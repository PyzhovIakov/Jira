#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет параметры отражения движений регистра в финансовом учете
//
// Параметры:
//  МетаданныеРегистра - ОбъектМетаданныхРегистрНакопления - Метаданные регистра накопления
//  РегистрацияКОтражению - Булево - Признак получения параметров для регистрации к отражению в учете
//
// Возвращаемое значение:
// 	см. ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
//
Функция ПараметрыОтраженияДвиженийВФинансовомУчете(МетаданныеРегистра = Неопределено, РегистрацияКОтражению = Ложь) Экспорт
	
	ПараметрыОтражения = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете(РегистрацияКОтражению);
	ПараметрыОтражения.ПутьКДаннымОрганизация = "АналитикаУчетаПоПартнерам.Организация";
	
	Если РегистрацияКОтражению Тогда
		Возврат ПараметрыОтражения;
	КонецЕсли;
	
	ПараметрыОтражения.ПутьКДаннымОбъектНастройки =
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ПолеВыборкиГФУНоменклатуры(ПараметрыОтражения.ПсевдонимИсточникаДанных);
	ПараметрыОтражения.ПутьКДаннымМестоУчета = "Подразделение";
	ПараметрыОтражения.ПутьКДаннымНаправлениеДеятельности = "НаправлениеДеятельностиНоменклатуры";
	ПараметрыОтражения.ПутьКДаннымПодразделение = "Подразделение";
	ПараметрыОтражения.РесурсыУпр.Добавить("СуммаВыручки");
	ПараметрыОтражения.РесурсыУпр.Добавить("СуммаВыручкиБезНДС");
	ПараметрыОтражения.РесурсыУпр.Добавить("СтоимостьУпр");
	ПараметрыОтражения.РесурсыУпр.Добавить("ДопРасходыУпр");
	ПараметрыОтражения.РесурсыУпр.Добавить("ТрудозатратыУпр");
	ПараметрыОтражения.РесурсыУпр.Добавить("ПостатейныеПостоянныеУпр");
	ПараметрыОтражения.РесурсыУпр.Добавить("ПостатейныеПеременныеУпр");
	ПараметрыОтражения.РесурсыУпр.Добавить("РасходыНаПродажуУпр");
	ПараметрыОтражения.РесурсыУпр.Добавить("РезервПодОбесценениеУпр");
	ПараметрыОтражения.РесурсыРегл.Добавить("СуммаВыручкиСНДСРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("СуммаВыручкиРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("СтоимостьРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("ДопРасходыРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("ТрудозатратыРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("ПостатейныеПостоянныеРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("ПостатейныеПеременныеРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("РасходыНаПродажуРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("РезервПодОбесценениеРегл");
	ПараметрыОтражения.РесурсыКоличество.Добавить("Количество");
	
	
	
	ПараметрыОтражения.ДополнительныйОтбор = СтрЗаменить(
		"НЕ ПсевдонимИсточникаДанных.ТипЗапасов В (
		|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга))",
		"ПсевдонимИсточникаДанных",
		ПараметрыОтражения.ПсевдонимИсточникаДанных);
	
	Если МетаданныеРегистра = Неопределено Тогда
		МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	КонецЕсли;
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ЗаполнитьПараметрыОтраженияПоМетаданнымРегистра(ПараметрыОтражения, МетаданныеРегистра);

	Возврат ПараметрыОтражения;
	
КонецФункции


// Собирает структуру из текстов запросов для дальнейшей проверки даты запрета.
// 
// Параметры:
// 	Запрос - Запрос - Запрос по проверке даты запрета, можно установить параметры
// Возвращаемое значение:
// 	Структура - см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
Функция ТекстЗапросаКонтрольДатыЗапрета(Запрос) Экспорт
	ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя;
	ИмяТаблицыИзменений = "ТаблицаИзмененийВыручкаИСебестоимостьПродаж"; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Период КАК Период,
	|	КлючиАналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	&ИмяРегистра КАК ИмяРегистра,
	|	&Раздел КАК РазделДатыЗапрета
	|ИЗ
	|	&ИмяТаблицыИзменений КАК Таблица
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитикаУчетаПоПартнерам
	|	ПО
	|		Таблица.АналитикаУчетаПоПартнерам = КлючиАналитикаУчетаПоПартнерам.КлючАналитики
	|";
	
	ИмяПараметраИмяРегистра = "ИмяРегистра" + ИмяРегистра;
	ИмяПараметраРаздел = "Раздел" + ИмяРегистра;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИмяРегистра", "&" + ИмяПараметраИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Раздел", "&" + ИмяПараметраРаздел);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИмяТаблицыИзменений", ИмяТаблицыИзменений);
	
	Запрос.УстановитьПараметр(ИмяПараметраИмяРегистра, ИмяРегистра);
	Запрос.УстановитьПараметр(ИмяПараметраРаздел, "ФинансовыйКонтур");
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)
	|	И ЗначениеРазрешено(Т1.Партнер)
	|	И ЗначениеРазрешено(Т.Подразделение)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#КонецОбласти

#КонецЕсли
