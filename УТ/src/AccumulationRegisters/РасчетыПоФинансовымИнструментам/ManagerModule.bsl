#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам);
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам);
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам);
		Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам);
	КонецЕсли;
	
	// Контроль даты запрета
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;

	ТекстыЗапросов = Новый Соответствие();
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
			
	Возврат ТекстыЗапросов;
	
КонецФункции

// Процедура формирования движений по регистру.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "РасчетыПоФинансовымИнструментам");
	
КонецПроцедуры

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийРасчетыПоФинансовымИнструментам", 
		РегистрыНакопления.РасчетыПоФинансовымИнструментам.ТекстЗапросаКонтрольДатыЗапрета(Запрос));
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Собирает структуру из текстов запросов для дальнейшей проверки даты запрета.
// 
// Параметры:
// 	Запрос - Запрос - Запрос по проверке даты запрета, можно установить параметры
// Возвращаемое значение:
// 	Структура - см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
Функция ТекстЗапросаКонтрольДатыЗапрета(Запрос) Экспорт
	ИмяРегистра = Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам.Имя;
	ИмяТаблицыИзменений = "ТаблицаИзмененийРасчетыПоФинансовымИнструментам"; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Период КАК Период,
	|	КлючиАналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	&ИмяРегистра КАК ИмяРегистра,
	|	&Раздел КАК РазделДатыЗапрета
	|ИЗ
	|	&ИмяТаблицыИзменений КАК Таблица
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитикаУчетаПоПартнерам
	|	ПО
	|		Таблица.АналитикаУчетаПоПартнерам = КлючиАналитикаУчетаПоПартнерам.КлючАналитики
	|ГДЕ
	|	Таблица.Сумма <> 0
	|	ИЛИ Таблица.СуммаУпр <> 0
	|	ИЛИ Таблица.СуммаРегл <> 0
	|";
	
	ИмяПараметраИмяРегистра = "ИмяРегистра" + ИмяРегистра;
	ИмяПараметраРаздел = "Раздел" + ИмяРегистра;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИмяРегистра", "&" + ИмяПараметраИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Раздел", "&" + ИмяПараметраРаздел);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИмяТаблицыИзменений", ИмяТаблицыИзменений);
	
	Запрос.УстановитьПараметр(ИмяПараметраИмяРегистра, ИмяРегистра);
	Запрос.УстановитьПараметр(ИмяПараметраРаздел, "ФинансовыйКонтур");
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов

КонецФункции

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыПоФинансовымИнструментамИзменение") Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаОстатков.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	ТаблицаОстатков.Договор                           КАК Договор,
		|	ТаблицаОстатков.ТипСуммы                          КАК ТипСуммы,
		|	ТаблицаОстатков.РасчетныйДокумент                 КАК РасчетныйДокумент,
		|	ТаблицаОстатков.Валюта                            КАК Валюта,
		|	ТаблицаОстатков.ОплачиваетсяОстаток               КАК Оплачивается,
		|	0                                                 КАК Сумма
		|
		|ИЗ
		|	РегистрНакопления.РасчетыПоФинансовымИнструментам.Остатки(,
		|		(АналитикаУчетаПоПартнерам, Договор, ТипСуммы, РасчетныйДокумент, Валюта) В
		|		(ВЫБРАТЬ
		|			Таблица.АналитикаУчетаПоПартнерам,
		|			Таблица.Договор,
		|			Таблица.ТипСуммы,
		|			Таблица.РасчетныйДокумент,
		|			Таблица.Валюта
		|		ИЗ
		|			ДвиженияРасчетыПоФинансовымИнструментамИзменение КАК Таблица
		|		)
		|		) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.ОплачиваетсяОстаток > 0
		|
		|";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиРасчетыПоФинансовымИнструментам");
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыПоФинансовымИнструментамИзменение") Тогда
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиРасчетыПоФинансовымИнструментам Цикл
			Если СтрокаОшибки.Оплачивается <> 0 Тогда 
				ТекстСообщения = СтрШаблон(НСтр("ru = 'По договору %1 оплачивается больше, чем утверждено в заявке, на %2 %3'"),
					СтрокаОшибки.Договор, СтрокаОшибки.Оплачивается, СтрокаОшибки.Валюта);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			ИначеЕсли СтрокаОшибки.Сумма > 0
				И СтрокаОшибки.РасчетныйДокумент = Неопределено Тогда 
				ТекстСообщения = СтрШаблон(НСтр("ru = 'По договору %1 оплачивается больше, чем указано в документах поступления услуг аренды, на %2 %3'"),
					СтрокаОшибки.Договор, СтрокаОшибки.Сумма, СтрокаОшибки.Валюта);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			ИначеЕсли СтрокаОшибки.Сумма < 0
				И СтрокаОшибки.РасчетныйДокумент <> Неопределено Тогда 
				ТекстСообщения = СтрШаблон(НСтр("ru = 'По документу %1 превышена сумма зачета аванса на %2 %3'"),
					СтрокаОшибки.РасчетныйДокумент, -СтрокаОшибки.Сумма, СтрокаОшибки.Валюта);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Заполняет параметры отражения движений регистра в финансовом учете
//
// Параметры:
//  МетаданныеРегистра - ОбъектМетаданныхРегистрНакопления - Метаданные регистра накопления
//  РегистрацияКОтражению - Булево - Признак получения параметров для регистрации к отражению в учете
//
// Возвращаемое значение:
// 	см. ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
//
Функция ПараметрыОтраженияДвиженийВФинансовомУчете(МетаданныеРегистра = Неопределено, РегистрацияКОтражению = Ложь) Экспорт
	
	ПараметрыОтражения = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете(РегистрацияКОтражению);
	ПараметрыОтражения.ПутьКДаннымОрганизация = "АналитикаУчетаПоПартнерам.Организация";
	
	Если РегистрацияКОтражению Тогда
		Возврат ПараметрыОтражения;
	КонецЕсли;
	
	ПараметрыОтражения.ВыделениеДолгосрочныхАктивовОбязательств = Истина;
	ПараметрыОтражения.ПутьКДаннымОбъектНастройки = "Договор.ГруппаФинансовогоУчета";
	ПараметрыОтражения.ПутьКДаннымНаправлениеДеятельности = "АналитикаУчетаПоПартнерам.НаправлениеДеятельности";
	ПараметрыОтражения.ПутьКДаннымПодразделение = "Договор.Подразделение";
	ПараметрыОтражения.ПутьКДаннымВалюта = "Валюта";
	ПараметрыОтражения.РесурсыУпр.Добавить("СуммаУпр");
	ПараметрыОтражения.РесурсыРегл.Добавить("СуммаРегл");
	ПараметрыОтражения.РесурсыВал.Добавить("Сумма");
	
	
	Если МетаданныеРегистра = Неопределено Тогда
		МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	КонецЕсли;
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ЗаполнитьПараметрыОтраженияПоМетаданнымРегистра(ПараметрыОтражения, МетаданныеРегистра);
	
	Возврат ПараметрыОтражения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.РасчетыПоФинансовымИнструментам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.21.80";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("340880e6-66f1-4d03-96d8-1d1b89116bd6");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.РасчетыПоФинансовымИнструментам.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	СписокОписаний = Новый Массив;
	СписокОписаний.Добавить(НСтр("ru = 'Обновление регистра накопления ""Расчеты по финансовым инструментам"":'"));
	СписокОписаний.Добавить(НСтр("ru = '- заполнение ""Валюты"".'"));
	Обработчик.Комментарий = СтрСоединить(СписокОписаний, Символы.ПС);
	Обработчик.Комментарий = НСтр("ru = 'Заполняет валюту взаиморасчетов.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра	= "РегистрНакопления.РасчетыПоФинансовымИнструментам";
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыПоФинансовымИнструментам КАК Расчеты
	|ГДЕ
	|	НЕ &НесколькоВалют
	|	И Расчеты.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|";
	
	Запрос.УстановитьПараметр("НесколькоВалют", ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют"));
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

// Обработчик обновления
// 
// Параметры:
// 	Параметры - См. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки 
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам.ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	СписокОписаний = Новый Массив;
	СписокОписаний.Добавить(НСтр("ru = 'Не удалось выполнить обработку данных регистра накопления ""Расчеты по финансовым инструментам"":'"));
	СписокОписаний.Добавить(НСтр("ru = '- заполнение ""Валюты""'"));
	
	ВалютаВзаиморасчетов = Константы.ВалютаУправленческогоУчета.Получить();
	
	Для Каждого ТекущиеДанные Из ОбновляемыеДанные Цикл
		
		ПричинаИсключения = "";
		Рекомендация = "";
		
		НачатьТранзакцию();
		
		Попытка
			
			ПричинаИсключения = "Блокировка";
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыПоФинансовымИнструментам.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", ТекущиеДанные.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ПричинаИсключения = "ПлохиеДанные";
			Рекомендация = НСтр("ru = 'Перепроведите документ вручную.'");
			
			НаборЗаписей = РегистрыНакопления.РасчетыПоФинансовымИнструментам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ТекущиеДанные.Регистратор);
			НаборЗаписей.Прочитать();
			
			Для Каждого Запись Из НаборЗаписей Цикл
				Если НЕ ЗначениеЗаполнено(Запись.Валюта) Тогда
					Запись.Валюта = ВалютаВзаиморасчетов;
				КонецЕсли;
			КонецЦикла;
			
			ПричинаИсключения = "Запись";
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ТекущиеДанные.Регистратор);
				
			Если ПричинаИсключения = "ПлохиеДанные" Тогда
				
				ОбновлениеИнформационнойБазы.ЗарегистрироватьПроблемуСДанными(ТекущиеДанные.Регистратор,
					Рекомендация, Параметры);
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
				
			ИначеЕсли ПричинаИсключения = "Запись" Тогда
				
				ВызватьИсключение СтрСоединить(СписокОписаний, Символы.ПС);
				
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
