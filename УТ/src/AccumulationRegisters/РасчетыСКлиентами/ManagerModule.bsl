#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)
	|	И ЗначениеРазрешено(Т1.Партнер)";
	
	Ограничение.ТекстДляВнешнихПользователей =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК ЭтотСписок
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|	ПО АналитикаУчетаПоПартнерам.КлючАналитики = ЭтотСписок.АналитикаУчетаПоПартнерам
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнешниеПользователи КАК ВнешниеПользователиПартнеры
	|	ПО ВнешниеПользователиПартнеры.ОбъектАвторизации = АналитикаУчетаПоПартнерам.Партнер
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ВнешниеПользователиПартнеры.Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонтрольИтогов

// Есть изменения итогов набора.
// 
// Параметры:
//  Набор - РегистрНакопленияНаборЗаписей.РасчетыСКлиентами,
//          РегистрНакопленияНаборЗаписей.РасчетыСПоставщиками,
//          РегистрНакопленияНаборЗаписей.РасчетыСПоставщикамиПоСрокам,
//          РегистрНакопленияНаборЗаписей.РасчетыСКлиентамиПоСрокам.
// 
// Возвращаемое значение:
//  Булево - Есть изменения итогов набора
Функция ЕстьИзмененияИтоговНабора(Набор) Экспорт
	
	Если НЕ Набор.Модифицированность() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоРасчетыСКлиентами = 
		ТипЗнч(Набор) = Тип("РегистрНакопленияНаборЗаписей.РасчетыСКлиентами")
		ИЛИ ТипЗнч(Набор) = Тип("РегистрНакопленияНаборЗаписей.РасчетыСКлиентамиПоСрокам");
		
	Если ТипЗнч(Набор) = Тип("РегистрНакопленияНаборЗаписей.РасчетыСКлиентами")
		ИЛИ ТипЗнч(Набор) = Тип("РегистрНакопленияНаборЗаписей.РасчетыСПоставщиками") Тогда
		ТекстЗапроса = ТекстЗапросаРасчеты(ЭтоРасчетыСКлиентами);
		
	ИначеЕсли ТипЗнч(Набор) = Тип("РегистрНакопленияНаборЗаписей.РасчетыСКлиентамиПоСрокам")
		ИЛИ ТипЗнч(Набор) = Тип("РегистрНакопленияНаборЗаписей.РасчетыСПоставщикамиПоСрокам") Тогда
		ТекстЗапроса = ТекстЗапросаРасчетыПоСрокам(ЭтоРасчетыСКлиентами);
		
	Иначе
		ТекстОшибки = НСтр("ru = 'Не удалось определить таблицу для сравнения итогов набора записей.'");
		ВызватьИсключение(ТекстОшибки, КатегорияОшибки.ОшибкаКонфигурации);
	КонецЕсли;
	ПроблемныйРегистратор = Набор.Отбор.Регистратор.Значение;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Регистратор", ПроблемныйРегистратор);
	Запрос.УстановитьПараметр("НовыеДвижения", Набор.Выгрузить());
	РезультатСравнения = Запрос.Выполнить().Выгрузить();
	
	ЕстьИзменения = РезультатСравнения.Количество() > 0;
	Если ЕстьИзменения Тогда
		РезультатСравнения.Свернуть("Регистратор");
		Для Каждого Запись Из РезультатСравнения Цикл
			СтрокиТекста = Новый Массив;
			СтрокиТекста.Добавить(НСтр("ru = 'После обновления изменились итоги ресурсов в движениях документа. Обновление документа отменено.'"));
			СтрокиТекста.Добавить(ТекстПерепроведитеДокументВРучную());
			ТекстРекомендации = СтрСоединить(СтрокиТекста, Символы.ПС);
			ОбновлениеИнформационнойБазы.ЗарегистрироватьПроблемуСДанными(
				Запись.Регистратор,
				ТекстРекомендации);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьИзменения;
	
КонецФункции

Функция ТекстЗапросаРасчеты(ЭтоРасчетыСКлиентами)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Расчеты.ВидДвижения КАК ВидДвижения,
	|	Расчеты.Регистратор КАК Регистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Расчеты.Валюта КАК Валюта,
	|	Расчеты.Сумма КАК Сумма
	|ПОМЕСТИТЬ втНовыеДвижения
	|ИЗ
	|	&НовыеДвижения КАК Расчеты
	|;
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Регистратор КАК Регистратор,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВложенныйЗапрос.Валюта КАК Валюта,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.Регистратор КАК Регистратор,
	|		Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|		Расчеты.Валюта КАК Валюта,
	|		-ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -Расчеты.Сумма
	|			ИНАЧЕ Расчеты.Сумма
	|		КОНЕЦ КАК Сумма
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|ГДЕ
	|	Расчеты.Регистратор = &Регистратор
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НовыеДвижения.Регистратор КАК Регистратор,
	|		НовыеДвижения.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		НовыеДвижения.ОбъектРасчетов КАК ОбъектРасчетов,
	|		НовыеДвижения.Валюта КАК Валюта,
	|		ВЫБОР КОГДА НовыеДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -НовыеДвижения.Сумма
	|			ИНАЧЕ НовыеДвижения.Сумма
	|		КОНЕЦ КАК Сумма
	|	ИЗ
	|		втНовыеДвижения КАК НовыеДвижения
	|	) КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Регистратор,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.ОбъектРасчетов,
	|	ВложенныйЗапрос.Валюта
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.Сумма) <> 0
	|";
	
	Если НЕ ЭтоРасчетыСКлиентами Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"РегистрНакопления.РасчетыСКлиентами",
			"РегистрНакопления.РасчетыСПоставщиками"
		);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчетыПоСрокам(ЭтоРасчетыСКлиентами)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Расчеты.ВидДвижения КАК ВидДвижения,
	|	Расчеты.ДокументРегистратор КАК ДокументРегистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Расчеты.Валюта КАК Валюта,
	|	Расчеты.Предоплата КАК Предоплата,
	|	Расчеты.Долг КАК Долг
	|ПОМЕСТИТЬ втНовыеДвижения
	|ИЗ
	|	&НовыеДвижения КАК Расчеты
	|;
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Регистратор КАК Регистратор,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВложенныйЗапрос.Валюта КАК Валюта,
	|	СУММА(ВложенныйЗапрос.Предоплата) КАК Предоплата,
	|	СУММА(ВложенныйЗапрос.Долг) КАК Долг
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.ДокументРегистратор КАК Регистратор,
	|		Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|		Расчеты.Валюта КАК Валюта,
	|		-ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -Расчеты.Предоплата
	|			ИНАЧЕ Расчеты.Предоплата
	|		КОНЕЦ КАК Предоплата,
	|		-ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -Расчеты.Долг
	|			ИНАЧЕ Расчеты.Долг
	|		КОНЕЦ КАК Долг
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|ГДЕ
	|	Расчеты.Регистратор = &Регистратор
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НовыеДвижения.ДокументРегистратор КАК Регистратор,
	|		НовыеДвижения.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		НовыеДвижения.ОбъектРасчетов КАК ОбъектРасчетов,
	|		НовыеДвижения.Валюта КАК Валюта,
	|		ВЫБОР КОГДА НовыеДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -НовыеДвижения.Предоплата
	|			ИНАЧЕ НовыеДвижения.Предоплата
	|		КОНЕЦ КАК Предоплата,
	|		ВЫБОР КОГДА НовыеДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -НовыеДвижения.Долг
	|			ИНАЧЕ НовыеДвижения.Долг
	|		КОНЕЦ КАК Долг
	|	ИЗ
	|		втНовыеДвижения КАК НовыеДвижения
	|	) КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Регистратор,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.ОбъектРасчетов,
	|	ВложенныйЗапрос.Валюта
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.Предоплата) <> 0
	|	ИЛИ СУММА(ВложенныйЗапрос.Долг) <> 0
	|";
	
	Если НЕ ЭтоРасчетыСКлиентами Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"РегистрНакопления.РасчетыСКлиентамиПоСрокам",
			"РегистрНакопления.РасчетыСПоставщикамиПоСрокам"
		);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращаемое значение:
//  Строка - Текст рекомендации для документа в случае не удачного обновления регистра
//
Функция ТекстПерепроведитеДокументВРучную() Экспорт
	
	Возврат НСтр("ru = 'Перепроведите документ вручную.'");
	
КонецФункции

// Параметры:
//  ИнформацияОбОшибке - ИнформацияОбОшибке
//  ПроблемныйРегистратор - ДокументСсылка - Проблемный регистратор
// 
// Возвращаемое значение:
//  Строка - Текст сообщения об ошибке
Функция ТекстСообщенияОбОшибке(ИнформацияОбОшибке, ПроблемныйРегистратор) Экспорт
	
	ТекстСообщения = НСтр("ru = 'Не удалось обновить документ: %Объект% по причине: %Причина%'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", ПроблемныйРегистратор);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	
	Возврат ТекстСообщения;
	
Конецфункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.РасчетыСКлиентами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.21.113";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("489f7d26-6bd5-7943-a55c-3d06d445974a");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.РасчетыСКлиентами.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.Комментарий = СтрШаблон(НСтр("ru = 'Очищает движения ресурса ""Оплачивается"" по Заявкам на расходование средств с пустыми объектами расчетов.
	|Исправляет порядок операции движений по ресурсу ""%1""
	|Перезаполняет поле ""Порядок зачета по дате платежа"" для платежных документов.
	|Сбрасывает реквизит ""По данным объекта расчетов источника"" в случае если в движениях документа не заполнены реквизиты приемника.
	|Исправляет остаток ресурса ""%2"" при расчетах с детализациями ""Аванс по заказам, долг по накладным"", ""Аванс по договорам, долг по накладным"".
	|Исправляет хозяйственную операцию для движения документов ""Взаимозачет задолженности"". 
	|Заполняет реквизит ""По данным объекта расчетов источника"" в расчетах по срокам.
	|Заполняет реквизит ""%3"".
	|Для движений переноса задолженности офлайн взаиморасчетов:
	| - заполняет новые реквизиты ""Объект расчетов приемник"", ""Аналитика учета по партнерам приемник"", ""Сумма приемник""
	| - перезаполняет идентификаторы фин.записи.
	|Исправление кор. аналитики для движений документов ""Взаимозачет задолженности"".
	|'"), 
	Метаданные.РегистрыНакопления.РасчетыСКлиентами.Ресурсы.КОтгрузке.Представление(),
	Метаданные.РегистрыНакопления.РасчетыСКлиентами.Ресурсы.КОплате.Представление(),
	Метаданные.РегистрыНакопления.РасчетыСКлиентами.Реквизиты.ОперацияВзаиморасчетов.Представление());
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ДоговорыКонтрагентов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВзаимозачетЗадолженности.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.БлокируемыеОбъекты = "";
	
КонецПроцедуры

// Процедура регистрации данных для обработчика обновления ОбработатьДанныеДляПереходаНаВерсию.
// 
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра  = "РегистрНакопления.РасчетыСКлиентами";

	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	#Область ТекстЗапроса
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.Регистратор КАК Регистратор,
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетовНакладная
	|ПОМЕСТИТЬ ВтОбъектыРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО (РасчетыСКлиентами.Регистратор = ОбъектыРасчетов.Объект)
	|ГДЕ
	|	РасчетыСКлиентами.Сумма <> 0
	|	И НЕ РасчетыСКлиентами.ПродажаПоЗаказу В (&ПустыеСсылкиНаЗаказы)
	|	И РасчетыСКлиентами.ПродажаПоЗаказу.ПорядокРасчетов В(&ПорядкиРасчетов)
	|	И НЕ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ОбъектРасчетовНакладная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Очистка ресурса "Оплачивается"
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|ГДЕ
	|	Расчеты.Оплачивается <> 0
	|	И (Расчеты.ЗаявкаНаРасходованиеДенежныхСредств В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДанныеРасшифровки.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ДанныеРасшифровки
	|		ГДЕ
	|			ДанныеРасшифровки.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|			И ДанныеРасшифровки.ОбъектРасчетов.Объект = Неопределено)
	|		ИЛИ НЕ Расчеты.ЗаявкаНаРасходованиеДенежныхСредств.КонтролироватьОплатуПоОбъектамРасчетов)
	|
	// Перезаполнение поля ПорядокЗачетаПоДатеПлатежа
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|ГДЕ
	|	Расчеты.Сумма > 0
	|	И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Расчеты.ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1)
	|	И НАЧАЛОПЕРИОДА(Расчеты.ДатаПлатежа,ДЕНЬ) <> НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора,ДЕНЬ)
	|	И Расчеты.ПорядокОперации = Расчеты.ПорядокЗачетаПоДатеПлатежа
	|	И Расчеты.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами)
	//Исправление порядка операции "КОтгрузке"
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|ГДЕ
	|	Расчеты.КОтгрузке <> 0
	|	И НАЧАЛОПЕРИОДА(Расчеты.Период, ДЕНЬ) <> НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ)
	|	И ПОДСТРОКА(Расчеты.ПорядокОперации, 0, 8) <> ПОДСТРОКА(Расчеты.ПорядокЗачетаПоДатеПлатежа, 0, 8)
	|	И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (ТИП(Документ.ЗаказКлиента),
	|										ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента))
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПриемники.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыПриемники
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК НеПустыеПриемники
	|	ПО РасчетыПриемники.Регистратор = НеПустыеПриемники.Регистратор
	|		И НеПустыеПриемники.ОбъектРасчетовПриемник <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И НеПустыеПриемники.АналитикаУчетаПоПартнерамПриемник <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
	|		И НеПустыеПриемники.ВалютаПриемник <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|		И НеПустыеПриемники.СуммаПриемник <> 0
	|ГДЕ
	|	НеПустыеПриемники.Регистратор ЕСТЬ NULL
	|	И РасчетыПриемники.ПоДаннымОбъектаРасчетовИсточника
	|	И ТИПЗНАЧЕНИЯ(РасчетыПриемники.Регистратор) <> ТИП(Документ.ВзаимозачетЗадолженности)
	|
	// Исправление остатков К оплате
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтОбъектыРасчетов.Регистратор КАК Регистратор
	|ИЗ
	|	ВтОбъектыРасчетов КАК ВтОбъектыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ОбъектРасчетов В
	|					(ВЫБРАТЬ
	|						Т.ОбъектРасчетовНакладная
	|					ИЗ
	|						ВтОбъектыРасчетов КАК Т)) КАК РасчетыСКлиентамиОбороты
	|		ПО (ВтОбъектыРасчетов.Регистратор = РасчетыСКлиентамиОбороты.Регистратор)
	|			И (ВтОбъектыРасчетов.ОбъектРасчетовНакладная = РасчетыСКлиентамиОбороты.ОбъектРасчетов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтОбъектыРасчетов.Регистратор
	|	
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(РасчетыСКлиентамиОбороты.СуммаОборот, 0)) <> СУММА(ЕСТЬNULL(РасчетыСКлиентамиОбороты.КОплатеОборот, 0)) 
	|
	// Исправление хозяйственной операции взаимозачета задолженности
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|ГДЕ
	|	Расчеты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|		И ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации В (&ВидыОпераций)
	|		И Расчеты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности)
	|
	// Заполнение флага ПоДаннымОбъектаРасчетовИсточника в расчетах по срокам
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПриемники.ДокументРегистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыИсточники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПриемники
	|	ПО РасчетыИсточники.ДокументРегистратор = РасчетыПриемники.ДокументРегистратор
	|		И РасчетыИсточники.ОбъектРасчетовПриемник = РасчетыПриемники.ОбъектРасчетов
	|		И РасчетыИсточники.АналитикаУчетаПоПартнерамПриемник = РасчетыПриемники.АналитикаУчетаПоПартнерам
	|		И РасчетыИсточники.ВалютаПриемник = РасчетыПриемники.Валюта
	|		И РасчетыИсточники.СуммаПриемник <> 0
	|ГДЕ
	|	&НоваяАрхитектураВзаиморасчетов
	|	И НЕ РасчетыПриемники.ПоДаннымОбъектаРасчетовИсточника
	|	И РасчетыПриемники.КорОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	// Заполнение операции взаиморасчетов
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|ГДЕ
	|	Расчеты.Сумма <> 0
	|	И Расчеты.ОперацияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ОперацииВзаиморасчетов.ПустаяСсылка)
	|
	// Заполнение приемников
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Приемник.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Приемник
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК Источник
	|	ПО Приемник.Регистратор = Источник.Регистратор
	|		И Приемник.КорАналитикаУчетаПоПартнерам = Источник.АналитикаУчетаПоПартнерам
	|		И Приемник.КорОбъектРасчетов = Источник.ОбъектРасчетов
	|		И Приемник.ХозяйственнаяОперация = Источник.ХозяйственнаяОперация
	|		И Приемник.ИдентификаторФинЗаписи = Источник.ИдентификаторФинЗаписи
	|ГДЕ
	| 	Приемник.КорОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	| 	И НЕ Приемник.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	| 	И Источник.ИдентификаторФинЗаписи ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности КАК Взаимозачеты
	|	ПО Расчеты.Регистратор = Взаимозачеты.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(Взаимозачеты.ОбъектРасчетовИнтеркампани,ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Регистратор
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Расчеты.КорОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|				И Расчеты.КорАналитикаУчетаПоПартнерам <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
	|	И НЕ МАКСИМУМ(Расчеты.ОбъектРасчетовПриемник <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|					И Расчеты.АналитикаУчетаПоПартнерамПриемник  <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
	|
	// Исправление кор. аналитики для взаимозачета задолженности
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|ГДЕ
	|	Расчеты.ПоДаннымОбъектаРасчетовИсточника
	|	И (Расчеты.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		ИЛИ Расчеты.КорАналитикаУчетаПопартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
	|	И Расчеты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	Запрос.УстановитьПараметр("ПустыеСсылкиНаЗаказы", ОперативныеВзаиморасчетыСервер.ПустыеСсылкиНаЗаказы());
	Запрос.УстановитьПараметр("ХозяйственнаяОперацияПередачаНаХранение", Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи);
	МассивПорядковРасчетов = Новый Массив;
	МассивПорядковРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамНакладным);
	МассивПорядковРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
	Запрос.УстановитьПараметр("ПорядкиРасчетов", МассивПорядковРасчетов);
	Запрос.УстановитьПараметр("ВидыОпераций", ВидыОпераций());
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрНакопления.РасчетыСКлиентами";

	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Если Параметры.ОбработкаЗавершена
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСПоставщиками.ПолноеИмя())
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя())
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя()) Тогда
			Константы.УдалитьТипыЗаписейВзаиморасчетовЗаполнены.Установить(Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	#Область ТекстЗапроса
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбновляемыеДанные.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТДляОбработки
	|ИЗ
	|	&ОбновляемыеДанные КАК ОбновляемыеДанные
	|;
	|
	|ВЫБРАТЬ
	|	СсылкиДляОбработки.Регистратор КАК Регистратор,
	|	СсылкиДляОбработки.Регистратор.Номер КАК РегистраторНомер
	|ИЗ 
	|	ВТДляОбработки КАК СсылкиДляОбработки
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПриемники.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыПриемники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК СсылкиДляОбработки
	|		ПО РасчетыПриемники.Регистратор = СсылкиДляОбработки.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК НеПустыеПриемники
	|	ПО РасчетыПриемники.Регистратор = НеПустыеПриемники.Регистратор
	|		И НеПустыеПриемники.ОбъектРасчетовПриемник <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И НеПустыеПриемники.АналитикаУчетаПоПартнерамПриемник <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
	|		И НеПустыеПриемники.ВалютаПриемник <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|		И НеПустыеПриемники.СуммаПриемник <> 0
	|ГДЕ
	|	&НоваяАрхитектураВзаиморасчетов
	|	И НеПустыеПриемники.Регистратор ЕСТЬ NULL
	|	И РасчетыПриемники.ПоДаннымОбъектаРасчетовИсточника
	|	И ТИПЗНАЧЕНИЯ(РасчетыПриемники.Регистратор) <> ТИП(Документ.ВзаимозачетЗадолженности)
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.Регистратор КАК Регистратор,
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетовНакладная
	|ПОМЕСТИТЬ ВтОбъектыРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО (РасчетыСКлиентами.Регистратор = ОбъектыРасчетов.Объект)
	|ГДЕ
	|	РасчетыСКлиентами.Сумма <> 0
	|	И НЕ РасчетыСКлиентами.ПродажаПоЗаказу В (&ПустыеСсылкиНаЗаказы)
	|	И РасчетыСКлиентами.ПродажаПоЗаказу.ПорядокРасчетов В(&ПорядкиРасчетов)
	|	И НЕ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ОбъектРасчетовНакладная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОбъектыРасчетов.Регистратор КАК Ссылка
	|ИЗ
	|	ВтОбъектыРасчетов КАК ВтОбъектыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ОбъектРасчетов В
	|					(ВЫБРАТЬ
	|						Т.ОбъектРасчетовНакладная
	|					ИЗ
	|						ВтОбъектыРасчетов КАК Т)) КАК РасчетыСКлиентамиОбороты
	|		ПО (ВтОбъектыРасчетов.Регистратор = РасчетыСКлиентамиОбороты.Регистратор)
	|			И (ВтОбъектыРасчетов.ОбъектРасчетовНакладная = РасчетыСКлиентамиОбороты.ОбъектРасчетов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтОбъектыРасчетов.Регистратор
	|	
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(РасчетыСКлиентамиОбороты.СуммаОборот, 0)) <> СУММА(ЕСТЬNULL(РасчетыСКлиентамиОбороты.КОплатеОборот, 0)) 
	|;
	|
	// Исправление хозяйственных операций
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК СсылкиДляОбработки
	|		ПО Расчеты.Регистратор = СсылкиДляОбработки.Регистратор
	|ГДЕ
	|	ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации В (&ВидыОперацийПоДолгу)
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК СсылкиДляОбработки
	|		ПО Расчеты.Регистратор = СсылкиДляОбработки.Регистратор
	|ГДЕ
	|	ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации В (&ВидыОперацийПоАвансу)
	|;
	|
	// Заполнение флага ПоДаннымОбъектаРасчетовИсточника в расчетах по срокам
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПриемники.ДокументРегистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыИсточники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК СсылкиДляОбработки
	|		ПО РасчетыИсточники.ДокументРегистратор = СсылкиДляОбработки.Регистратор
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПриемники
	|	ПО РасчетыИсточники.ДокументРегистратор = РасчетыПриемники.ДокументРегистратор
	|		И РасчетыИсточники.ОбъектРасчетовПриемник = РасчетыПриемники.ОбъектРасчетов
	|		И РасчетыИсточники.АналитикаУчетаПоПартнерамПриемник = РасчетыПриемники.АналитикаУчетаПоПартнерам
	|		И РасчетыИсточники.ВалютаПриемник = РасчетыПриемники.Валюта
	|		И РасчетыИсточники.СуммаПриемник <> 0
	|ГДЕ
	|	&НоваяАрхитектураВзаиморасчетов
	|	И НЕ РасчетыПриемники.ПоДаннымОбъектаРасчетовИсточника
	|;
	|
	// Документы основания Сторно
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СсылкиДляОбработки.Регистратор КАК Ссылка,
	|	ДанныеСторно.СторнируемыйДокумент КАК СторнируемыйДокумент
	|ИЗ
	|	ВТДляОбработки КАК СсылкиДляОбработки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Сторно КАК ДанныеСторно
	|		ПО СсылкиДляОбработки.Регистратор = ДанныеСторно.Ссылка
	|;
	|
	// Возвраты товаров
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СсылкиДляОбработки.Регистратор КАК Ссылка,
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов
	|ИЗ
	|	ВТДляОбработки КАК СсылкиДляОбработки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО СсылкиДляОбработки.Регистратор = ОбъектыРасчетов.Объект
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СсылкиДляОбработки.Регистратор) В 
	|		(ТИП(Документ.ВозвратТоваровОтКлиента),
	|		ТИП(Документ.ВозвратТоваровМеждуОрганизациями))
	|	И ОбъектыРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|;
	|
	// Исправление кор. аналитики для взаимозачета задолженности
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК СсылкиДляОбработки
	|		ПО Расчеты.Регистратор = СсылкиДляОбработки.Регистратор
	|ГДЕ
	|	Расчеты.ПоДаннымОбъектаРасчетовИсточника
	|	И (Расчеты.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		ИЛИ Расчеты.КорАналитикаУчетаПопартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
	|	И Расчеты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|";
	#КонецОбласти
	
	НоваяАрхитектураВзаиморасчетов = ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов");
	Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", НоваяАрхитектураВзаиморасчетов);
	Запрос.УстановитьПараметр("ОбновляемыеДанные", ОбновляемыеДанные);
	Запрос.УстановитьПараметр("ПустыеСсылкиНаЗаказы", ОперативныеВзаиморасчетыСервер.ПустыеСсылкиНаЗаказы());
	МассивПорядковРасчетов = Новый Массив;
	МассивПорядковРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамНакладным);
	МассивПорядковРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
	Запрос.УстановитьПараметр("ПорядкиРасчетов", МассивПорядковРасчетов);
	Запрос.УстановитьПараметр("ВидыОперацийПоДолгу", ВидыОперацийПоДолгу());
	Запрос.УстановитьПараметр("ВидыОперацийПоАвансу", ВидыОперацийПоАвансу());
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ОбновляемыеДанные =  РезультатыЗапроса[1].Выбрать();
	ОчисткаФлагаПоДаннымИсточника = РезультатыЗапроса[2].Выгрузить().ВыгрузитьКолонку("Ссылка");
	ИсправлениеОстатковКОплате = РезультатыЗапроса[4].Выгрузить().ВыгрузитьКолонку("Ссылка");
	ВзаимозачетПереносДолга = РезультатыЗапроса[5].Выгрузить().ВыгрузитьКолонку("Ссылка");
	ВзаимозачетПереносАванса = РезультатыЗапроса[6].Выгрузить().ВыгрузитьКолонку("Ссылка");
	ЗаполнениеФлагаВРасчетахПоСрокам = РезультатыЗапроса[7].Выгрузить().ВыгрузитьКолонку("Ссылка");
	СторнируемыеДокументы = РезультатыЗапроса[8].Выгрузить();
	СторнируемыеДокументы.Индексы.Добавить("Ссылка");
	ВозвратыТоваров = РезультатыЗапроса[9].Выгрузить();
	ВозвратыТоваров.Индексы.Добавить("Ссылка");
	ВзаимозачетКорАналитика = РезультатыЗапроса[10].Выгрузить();
	
	ДанныеЗаменыОперации = ДанныеЗаменыОперации();
	
	ЗапросВспомогательныхДанных = ЗапросВспомогательныхДанных(Истина);
	ЗапросДанныхОперативногоРегистра = ЗапросДанныхОперативногоРегистра(Истина);
	ЗапросКорАналитики = ЗапросКорАналитики();
	
	Пока ОбновляемыеДанные.Следующий() Цикл
		
		ПроблемныйРегистратор = ОбновляемыеДанные.Регистратор;
		
		Если НоваяАрхитектураВзаиморасчетов Тогда
			ЗапросВспомогательныхДанных.УстановитьПараметр("Ссылка", ПроблемныйРегистратор);
			ВспомогательныеДанные = ЗапросВспомогательныхДанных.ВыполнитьПакет();
			РегистраторыРасчетов = ВспомогательныеДанные[0].Выгрузить();
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			ПричинаИсключения = "Блокировка";
			#Область Блокировки
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСКлиентами.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", ПроблемныйРегистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Если НоваяАрхитектураВзаиморасчетов Тогда
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСКлиентамиПоСрокам.НаборЗаписей");
				ЭлементБлокировки.ИсточникДанных = РегистраторыРасчетов;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПоставщикамиПоСрокам.НаборЗаписей");
				ЭлементБлокировки.ИсточникДанных = РегистраторыРасчетов;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			КонецЕсли;
			
			Блокировка.Заблокировать();
			#КонецОбласти
			
			ПричинаИсключения = "ПлохиеДанные";
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ПроблемныйРегистратор);
			НаборЗаписей.Прочитать();

			#Область ЗаполнениеФлагаПоДаннымИсточникаВРасчетахПоСрокам
			Если ЗаполнениеФлагаВРасчетахПоСрокам.Найти(ПроблемныйРегистратор) <> Неопределено Тогда
				ЗаполнитьФлагВРасчетахПоСрокам(НаборЗаписей, ВспомогательныеДанные, РегистраторыРасчетов);
			КонецЕсли;
			#КонецОбласти
			
			Если ОчисткаФлагаПоДаннымИсточника.Найти(ПроблемныйРегистратор) <> Неопределено Тогда
				Для Каждого Запись Из НаборЗаписей Цикл
					Запись.ПоДаннымОбъектаРасчетовИсточника = Ложь;
				КонецЦикла;
			КонецЕсли;

			ЕстьЗаявкиНаРасходованиеДенежныхСредств = Ложь;
			Для Каждого Запись Из НаборЗаписей Цикл
				Если Запись.ВидДвижения = ВидДвиженияНакопления.Приход
					И Запись.КОплате > 0 
					И НачалоДня(Запись.Период) < НачалоДня(Запись.ДатаРегистратора) 
					И НЕ ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ВводОстатков")
					И НЕ ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ВводОстатковВзаиморасчетов") Тогда
					Запись.Период = Запись.ДатаРегистратора;
				КонецЕсли;
				Если ЗначениеЗаполнено(Запись.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
					ЕстьЗаявкиНаРасходованиеДенежныхСредств = Истина;
				КонецЕсли;
			КонецЦикла;
			
			//Очистка ресурса "Оплачивается"
			Если ЕстьЗаявкиНаРасходованиеДенежныхСредств Тогда
				ЗаявкиНаРасходованиеДенежныхСредств = НаборЗаписей.ВыгрузитьКолонку("ЗаявкаНаРасходованиеДенежныхСредств");
				РеквизитыЗаявок = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЗаявкиНаРасходованиеДенежныхСредств,"КонтролироватьОплатуПоОбъектамРасчетов");
				Для Каждого Запись Из НаборЗаписей Цикл
					Если ЗначениеЗаполнено(Запись.ЗаявкаНаРасходованиеДенежныхСредств)
						И Запись.Оплачивается <> 0 
						И НЕ РеквизитыЗаявок[Запись.ЗаявкаНаРасходованиеДенежныхСредств] Тогда
						Запись.Оплачивается = 0;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			//Перезаполнение поля ПорядокЗачетаПоДатеПлатежа
			ТипДокумента = ТипЗнч(Запись.Регистратор);
			Тип = ОперативныеВзаиморасчетыСервер.НомерТипа(ТипДокумента);
			Для Каждого Запись Из НаборЗаписей Цикл
				Если Запись.ВидДвижения = ВидДвиженияНакопления.Расход
					И Запись.Сумма > 0 
					И ЗначениеЗаполнено(Запись.ДатаПлатежа)
					И НачалоДня(Запись.ДатаПлатежа) <> НачалоДня(Запись.ДатаРегистратора) 
					И Запись.ПорядокОперации = Запись.ПорядокЗачетаПоДатеПлатежа 
					И Запись.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами Тогда
					Запись.ПорядокЗачетаПоДатеПлатежа = ОперативныеВзаиморасчетыСервер.Порядок(Запись.ДатаПлатежа, 
						ОбновляемыеДанные.РегистраторНомер, ТипДокумента, Сред(Запись.ПорядокОперации,9,1), Тип);
				КонецЕсли;
			КонецЦикла;
			#Область ИсправлениеПорядкаОперации
			Если ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ЗаказКлиента")
				
				ИЛИ ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
				НомерДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроблемныйРегистратор, "Номер");
				Для Каждого Запись Из НаборЗаписей Цикл
					Если Запись.КОтгрузке <> 0 Тогда
						Запись.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(
							Запись.ДатаРегистратора,
							НомерДокумента,
							ТипЗнч(Запись.Регистратор),
							1);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			#КонецОбласти
			
			#Область ИсправлениеОстатковКОплате
			
			Если ИсправлениеОстатковКОплате.Найти(ПроблемныйРегистратор) <> Неопределено Тогда
				
				ДанныеДляПроведения = ПроведениеДокументов.ДанныеДокументаДляПроведения(ПроблемныйРегистратор, "РасчетыСКлиентами");
				НовыеДвижения = ДанныеДляПроведения.ТаблицаРасчетыСКлиентами;
				
				МассивДоговоров = НовыеДвижения.ВыгрузитьКолонку("Договор");
				МассивДоговоров = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивДоговоров);
				ПорядкиЗачетаОплатНакладныхДоговоров = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивДоговоров, "ПорядокЗачетаОплатНакладных");
				
				ВзаиморасчетыСервер.ДобавитьЗаполнитьПорядокРасчетовСКлиентами(НовыеДвижения, ТипЗнч(ПроблемныйРегистратор), ПорядкиЗачетаОплатНакладныхДоговоров);
				
				КолонкиИзмерений = "АналитикаУчетаПоПартнерам,ОбъектРасчетов,Валюта,ВидДвижения";
				// Для контроля неизменности движений по ресурсам, кроме КОплате
				КолонкиРесурсов = "Сумма,Оплачивается,КОтгрузке,Отгружается";
				ТаблицаДвижений = НаборЗаписей.Выгрузить();
				
				СтарыеДвижения = ТаблицаДвижений.Скопировать(,КолонкиИзмерений+","+КолонкиРесурсов);
				СтарыеДвижения.Свернуть(КолонкиИзмерений, КолонкиРесурсов);
				СтарыеДвижения.Сортировать(КолонкиИзмерений+","+КолонкиРесурсов);
				Индекс = СтарыеДвижения.Количество();
				Пока Индекс > 0 Цикл
					Индекс = Индекс - 1;
					Если СтарыеДвижения[Индекс].Сумма = 0
						И СтарыеДвижения[Индекс].Оплачивается = 0
						И СтарыеДвижения[Индекс].КОтгрузке = 0
						И СтарыеДвижения[Индекс].Отгружается = 0 Тогда
						СтарыеДвижения.Удалить(Индекс);
					КонецЕсли;
				КонецЦикла;
				
				ИдентификаторФинЗаписиКОплате = "";
				ЕстьИзменения = Ложь;
				Индекс = ТаблицаДвижений.Количество();
				Пока Индекс > 0 Цикл
					Индекс = Индекс - 1;
					Если ТаблицаДвижений[Индекс].КОплате <> 0 Тогда
						ТаблицаДвижений[Индекс].КОплате = 0;
						Если ТаблицаДвижений[Индекс].ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПереносАванса Тогда
							ИдентификаторФинЗаписиКОплате = ТаблицаДвижений[Индекс].ИдентификаторФинЗаписи;
						КонецЕсли;
						Если ТаблицаДвижений[Индекс].Сумма = 0
							И ТаблицаДвижений[Индекс].Оплачивается = 0
							И ТаблицаДвижений[Индекс].КОтгрузке = 0
							И ТаблицаДвижений[Индекс].Отгружается = 0 Тогда
							ТаблицаДвижений.Удалить(Индекс);
						КонецЕсли;
						ЕстьИзменения = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого СтрокаКОплате Из НовыеДвижения Цикл
					Если СтрокаКОплате.КОплате <> 0 Тогда
						ЕстьИзменения = Истина;
						НоваяЗапись = ТаблицаДвижений.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаКОплате);
						НоваяЗапись.Сумма = 0;
						НоваяЗапись.СуммаУпр = 0;
						НоваяЗапись.СуммаРегл = 0;
						НоваяЗапись.ИдентификаторФинЗаписи = "";
						НоваяЗапись.Оплачивается = 0;
						НоваяЗапись.КОтгрузке = 0;
						НоваяЗапись.Отгружается = 0;
						НоваяЗапись.Регистратор = ПроблемныйРегистратор;
						НоваяЗапись.Активность = Истина;
					КонецЕсли;
				КонецЦикла;
					
				НовыеДвижения = ТаблицаДвижений.Скопировать(,КолонкиИзмерений+","+КолонкиРесурсов);
				НовыеДвижения.Свернуть(КолонкиИзмерений, КолонкиРесурсов);
				НовыеДвижения.Сортировать(КолонкиИзмерений+","+КолонкиРесурсов);
				Индекс = НовыеДвижения.Количество();
				Пока Индекс > 0 Цикл
					Индекс = Индекс - 1;
					Если НовыеДвижения[Индекс].Сумма = 0
						И НовыеДвижения[Индекс].Оплачивается = 0
						И НовыеДвижения[Индекс].КОтгрузке = 0
						И НовыеДвижения[Индекс].Отгружается = 0 Тогда
						НовыеДвижения.Удалить(Индекс);
					КонецЕсли;
				КонецЦикла;
				
				Если ЕстьИзменения И ТаблицыРавны(СтарыеДвижения, НовыеДвижения) Тогда
					
					ЗапросСвертки = Новый Запрос;
					ЗапросСвертки.Текст = 
					"ВЫБРАТЬ
					|	&ВсеПоля
					|ПОМЕСТИТЬ ВтДвижения
					|ИЗ
					|	&ТаблицаДвижений КАК ТаблицаДвижений
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	&ПоляГруппировки,
					|	&ПоляРесурсов
					|ИЗ
					|	ВтДвижения КАК Т
					|СГРУППИРОВАТЬ ПО
					|	&ПоляГруппировки";
					ЗапросСвертки.УстановитьПараметр("ТаблицаДвижений", ТаблицаДвижений);
					КолонкиДляГруппировки = Новый Массив;
					ВсеКолонки = Новый Массив;
					КолонкиРесурсов = КолонкиРесурсов + ",КОплате";
					Для Каждого Колонка Из ТаблицаДвижений.Колонки Цикл
						Если СтрНайти(КолонкиРесурсов, Колонка.Имя) = 0 
							И Колонка.Имя <> "СуммаУпр"
							И Колонка.Имя <> "СуммаРегл"
							И Колонка.Имя <> "ИдентификаторФинЗаписи"
							И Колонка.Имя <> "НомерСтроки"
							И Колонка.Имя <> "МоментВремени" Тогда
							КолонкиДляГруппировки.Добавить(Колонка.Имя);
						КонецЕсли;
						Если Колонка.Имя <> "МоментВремени" Тогда
							ВсеКолонки.Добавить(Колонка.Имя);
						КонецЕсли;
					КонецЦикла;
					КолонкиДляСуммирования = СтрРазделить(КолонкиРесурсов, ",");
					Индекс = 0;
					Пока Индекс < КолонкиДляСуммирования.Количество() Цикл
						КолонкиДляСуммирования[Индекс] = СтрШаблон("СУММА(%1) КАК %1", КолонкиДляСуммирования[Индекс]);
						Индекс = Индекс + 1;
					КонецЦикла;
					КолонкиДляСуммирования.Добавить("СУММА(СуммаУпр) КАК СуммаУпр");
					КолонкиДляСуммирования.Добавить("СУММА(СуммаРегл) КАК СуммаРегл");
					КолонкиДляСуммирования.Добавить("МАКСИМУМ(ИдентификаторФинЗаписи) КАК ИдентификаторФинЗаписи");
					КолонкиДляСуммирования.Добавить("МАКСИМУМ(НомерСтроки) КАК НомерСтроки");
					ЗапросСвертки.Текст = СтрЗаменить(ЗапросСвертки.Текст, "&ПоляГруппировки", СтрСоединить(КолонкиДляГруппировки,","));
					ЗапросСвертки.Текст = СтрЗаменить(ЗапросСвертки.Текст, "&ВсеПоля", СтрСоединить(ВсеКолонки,","));
					ЗапросСвертки.Текст = СтрЗаменить(ЗапросСвертки.Текст, "&ПоляРесурсов", СтрСоединить(КолонкиДляСуммирования,","));
					
					ТаблицаДвижений = ЗапросСвертки.Выполнить().Выгрузить();
					Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
						Если СтрокаДвижения.КОплате <> 0 
							И СтрокаДвижения.Сумма = 0
							И Не ЗначениеЗаполнено(СтрокаДвижения.ИдентификаторФинЗаписи) Тогда
							СтрокаДвижения.ИдентификаторФинЗаписи = ИдентификаторФинЗаписиКОплате;
						КонецЕсли;
					КонецЦикла;
					НаборЗаписей.Загрузить(ТаблицаДвижений);
					
				Иначе
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'При выполнении обработчика обновления регистра накопления ""%1"" 
							|по исправлению остатков ""%2"" изменились итоги остальных ресурсов в движениях документа 
							|%3, обработка документа не выполнена'"),
						Метаданные.РегистрыНакопления.РасчетыСКлиентами.Представление(),
						Метаданные.РегистрыНакопления.РасчетыСКлиентами.Ресурсы.КОплате.Представление(),
						ПроблемныйРегистратор);
					ЗаписьЖурналаРегистрации(
						ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Ошибка,
						Метаданные.РегистрыНакопления.РасчетыСКлиентами, ,
						ТекстСообщения);
					
				КонецЕсли;
				
			КонецЕсли;
			
			#КонецОбласти
			
			#Область ИсправлениеХозяйственнойОперацииВзаимозачета
			Если ВзаимозачетПереносДолга.Найти(ПроблемныйРегистратор) <> Неопределено Тогда
				ЗаменитьХозяйственнуюОперацию(ДанныеЗаменыОперации, НаборЗаписей, Истина);
			ИначеЕсли ВзаимозачетПереносАванса.Найти(ПроблемныйРегистратор) <> Неопределено Тогда
				ЗаменитьХозяйственнуюОперацию(ДанныеЗаменыОперации, НаборЗаписей, Ложь);
			КонецЕсли;
			#КонецОбласти
			
			#Область ЗаполнениеОперацииВзаиморасчетов
			
			ТипДокумента = ТипЗнч(ОбновляемыеДанные.Регистратор);
			ОбъектРасчетовВозвратТоваров = Справочники.ОбъектыРасчетов.ПустаяСсылка();
			// Для движений сторно необходимо анализировать тип сторнируемого документа
			Если ТипДокумента = Тип("ДокументСсылка.Сторно") Тогда
				СтрокаСторнируемогоДокумента = СторнируемыеДокументы.Найти(Запись.Регистратор, "Ссылка");
				Если СтрокаСторнируемогоДокумента <> Неопределено Тогда
					ТипДокумента = ТипЗнч(СтрокаСторнируемогоДокумента.СторнируемыйДокумент);
				КонецЕсли;
			КонецЕсли;
			Если (ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
				Или ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")) Тогда
				СтрокаВозврата = ВозвратыТоваров.Найти(ПроблемныйРегистратор, "Ссылка");
				Если СтрокаВозврата <> Неопределено Тогда
					ОбъектРасчетовВозвратТоваров = СтрокаВозврата.ОбъектРасчетов;
				КонецЕсли;
			КонецЕсли;
			Для Каждого Запись Из НаборЗаписей Цикл
				Если Запись.Сумма <> 0
					И Не ЗначениеЗаполнено(Запись.ОперацияВзаиморасчетов) Тогда
					Если ТипДокумента = Тип("ДокументСсылка.ВзаимозачетЗадолженности")
						Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами
						Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами
						Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереносАванса
						Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности
						Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РезервированиеАвансаКлиента
						Или (Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями
							Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
							И Не (Запись.ВидДвижения = ВидДвиженияНакопления.Расход
								И Запись.Сумма > 0
								И ОбъектРасчетовВозвратТоваров = Запись.ОбъектРасчетов) Тогда
						Запись.ОперацияВзаиморасчетов = Перечисления.ОперацииВзаиморасчетов.ПереносВзаиморасчетов;
					ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаЗадолженности")
						Или ТипДокумента = Тип("ДокументСсылка.КорректировкаРегистров")
						Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера
						Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомитентом
						Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеИзЗарплатыВСчетРеализацииСотруднику
						Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет
							И Запись.ВидДвижения = ВидДвиженияНакопления.Расход
						Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПремийКлиентам
						Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеПремииКлиентаРетроБонус Тогда
						Запись.ОперацияВзаиморасчетов = Перечисления.ОперацииВзаиморасчетов.КорректировкаЗадолженности;
					ИначеЕсли Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
						Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиентуНаПлатежнуюКарту
						Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту
						Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
						Или ТипДокумента = Тип("ДокументСсылка.АннулированиеПодарочныхСертификатов") Тогда
						Запись.ОперацияВзаиморасчетов = Перечисления.ОперацииВзаиморасчетов.ВозвратДенежныхСредств;
					ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаРеализации")
								И (Запись.ВидДвижения = ВидДвиженияНакопления.Расход
									Или Запись.ВидДвижения = ВидДвиженияНакопления.Приход 
									И (Запись.Сумма < 0 И Не Запись.Сторно
										Или Запись.Сумма > 0 И Запись.Сторно))
							Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента
							Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями
							Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя
							Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровЧерезКомиссионера
							Или Запись.ВидДвижения = ВидДвиженияНакопления.Расход
								И (Запись.Сумма > 0 И Не Запись.Сторно
									Или Запись.Сумма < 0 И Запись.Сторно)
								И (Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала
									Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомитенту
									Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионера)
							Или Запись.ВидДвижения = ВидДвиженияНакопления.Приход 
								И (Запись.Сумма < 0 И Не Запись.Сторно
									Или Запись.Сумма > 0 И Запись.Сторно)
								И (Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомитентуКомиссия
									Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионера
									Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомитенту)
							Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаЗадолженности
								И ТипДокумента = Тип("ДокументСсылка.ОтчетКомитентуОЗакупках") Тогда
						Запись.ОперацияВзаиморасчетов = Перечисления.ОперацииВзаиморасчетов.КорректировкаНакладной;
					ИначеЕсли Запись.ВидДвижения = ВидДвиженияНакопления.Расход
							И (Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
								Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиентаПоПлатежнойКарте
								Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации
								Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияПодарочныхСертификатов
								Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовКлиентов)
							И (Запись.Сумма > 0 И Не Запись.Сторно
									Или Запись.Сумма < 0 И Запись.Сторно) Тогда
						Запись.ОперацияВзаиморасчетов = Перечисления.ОперацииВзаиморасчетов.Оплата;
					ИначеЕсли Запись.ВидДвижения = ВидДвиженияНакопления.Приход
							И (Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
								Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыкупТоваровХранителем
								Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыкупТоваровПереработчиком
								Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетДавальцуМеждуОрганизациями
								Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионера
								Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионераОСписании
								Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомитенту
								Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомитентуКомиссия
								Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала
								Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияВРозницу
								Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетПоКомиссииМеждуОрганизациямиОСписании
								Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию
								Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет
								Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности
								Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионера
								Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионераБезПереходаПраваСобственности
								Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияВнеоборотныхАктивов
								Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав
								Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияУслугПоАренде
								Или Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов
								Или ТипДокумента = Тип("ДокументСсылка.КорректировкаРеализации"))
							И (Запись.Сумма > 0 И Не Запись.Сторно
									Или Запись.Сумма < 0 И Запись.Сторно) Тогда
						Запись.ОперацияВзаиморасчетов = Перечисления.ОперацииВзаиморасчетов.Отгрузка;
					Иначе
						Запись.ОперацияВзаиморасчетов = Перечисления.ОперацииВзаиморасчетов.КорректировкаЗадолженности;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			#КонецОбласти
			
			#Область ЗаполнениеПриемниковВОперативномРегистре
				ЗаполнитьПриемникиВОперативномРегистре(НаборЗаписей, ЗапросДанныхОперативногоРегистра);
			#КонецОбласти
			
			#Область ИсправлениеКорАналитикиРасчетовВзаимозачета
			Если ВзаимозачетКорАналитика.Найти(ПроблемныйРегистратор) <> Неопределено Тогда
				ИсправитьКорАналитикуВзаимозачета(ЗапросКорАналитики, НаборЗаписей);
			КонецЕсли;
			#КонецОбласти
			
			ИзменилисьИтоги = Ложь;
			Если НаборЗаписей.Количество() > 0 Тогда
				ИзменилисьИтоги = ЕстьИзмененияИтоговНабора(НаборЗаписей);
			КонецЕсли;
			Если НаборЗаписей.Модифицированность() И НЕ ИзменилисьИтоги Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			Если ПричинаИсключения = "ПлохиеДанные" Тогда
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ПроблемныйРегистратор);
				Если ЗначениеЗаполнено(ПроблемныйРегистратор) Тогда
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
					ОбновлениеИнформационнойБазы.ЗарегистрироватьПроблемуСДанными(
						ПроблемныйРегистратор,
						ТекстСообщенияОбОшибке(ИнформацияОбОшибке(), ПроблемныйРегистратор)
						+ Символы.ПС + ТекстПерепроведитеДокументВРучную());
				КонецЕсли;
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	Если Параметры.ОбработкаЗавершена
		И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСПоставщиками.ПолноеИмя())
		И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя())
		И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя()) Тогда
		Константы.УдалитьТипыЗаписейВзаиморасчетовЗаполнены.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицыРавны(Таблица1, Таблица2)
	
	МассивКолонок = Новый Массив;
	Для Каждого Колонка Из Таблица1.Колонки Цикл
		МассивКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Результат = Истина;
	Если Таблица1.Количество() <> Таблица2.Количество() Тогда
		Результат = Ложь;
	КонецЕсли;
	Если Результат Тогда
		Для Счетчик = 0 По Таблица1.Количество() - 1 Цикл
			Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(
						Таблица1[Счетчик],
						Таблица2[Счетчик],
						МассивКолонок) Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции

#Область ИсправлениеХозяйстеннойОперации

Функция ДанныеЗаменыОперации() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОперацияПереносДолга", Перечисления.ХозяйственныеОперации.ПереносДолга);
	Результат.Вставить("ОперацияПереносАванса", Перечисления.ХозяйственныеОперации.ПереносАванса);
	Результат.Вставить("ОперацияВзаимозачет", Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности);
	Результат.Вставить("НастройкаПереносДолга", Справочники.НастройкиХозяйственныхОпераций.ПереносДолга);
	Результат.Вставить("НастройкаПереносАванса", Справочники.НастройкиХозяйственныхОпераций.ПереносАванса);
	Результат.Вставить("НастройкаВзаимозачет", Справочники.НастройкиХозяйственныхОпераций.ВзаимозачетЗадолженности);
	Результат.Вставить("ВидыОперацийПоДолгу", ВидыОперацийПоДолгу());
	Результат.Вставить("ВидыОперацийПоАвансу", ВидыОперацийПоАвансу());
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаменитьХозяйственнуюОперацию(ДанныеЗамены, НаборЗаписей, ЭтоПереносДолга) Экспорт
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если Запись.ХозяйственнаяОперация = ДанныеЗамены.ОперацияВзаимозачет Тогда
			Если ЭтоПереносДолга Тогда
				Запись.ХозяйственнаяОперация = ДанныеЗамены.ОперацияПереносДолга;
				Запись.НастройкаХозяйственнойОперации = ДанныеЗамены.НастройкаПереносДолга;
			Иначе
				Запись.ХозяйственнаяОперация = ДанныеЗамены.ОперацияПереносАванса;
				Запись.НастройкаХозяйственнойОперации = ДанныеЗамены.НастройкаПереносАванса;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВидыОпераций() Экспорт
	
	Результат = ВидыОперацийПоДолгу();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ВидыОперацийПоАвансу());
	Возврат Результат;
	
КонецФункции

Функция ВидыОперацийПоДолгу() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаОрганизацияКонтрагент);
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуКонтрагентами);
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуОрганизациями);
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуОрганизацияКонтрагент);
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуКонтрагентами);
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуОрганизациями);
	
	Возврат Массив;
	
КонецФункции

Функция ВидыОперацийПоАвансу() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаОрганизацияКонтрагент);
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуКонтрагентами);
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуОрганизациями);
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуОрганизацияКонтрагент);
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуКонтрагентами);
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуОрганизациями);
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеФлагаВРасчетахПоСрокам

// Запрос вспомогательных данных.
// 
// Параметры:
//  ЭтоРасчетыСКлиентами - Булево - Это расчеты с клиентами.
//  ЗаполнитьФлагПоСрокам - Булево - Заполнение флага в расчетах по срокам.
// 
// Возвращаемое значение:
//  Запрос - Запрос вспомогательных данных
Функция ЗапросВспомогательныхДанных(ЭтоРасчетыСКлиентами) Экспорт
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(ТекстЗапросаРегистраторовДляЗаполненияФлага(ЭтоРасчетыСКлиентами));
	ТекстыЗапросов.Добавить(ТекстЗапросаПриемниковПоСрокам(ЭтоРасчетыСКлиентами));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭтоРасчетыСКлиентами", ЭтоРасчетыСКлиентами);
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Возврат Запрос;
	
КонецФункции

Функция ТекстЗапросаРегистраторовДляЗаполненияФлага(ЭтоРасчетыСКлиентами)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПоСрокам.ДокументРегистратор КАК ДокументРегистратор,
	|	РасчетыПоСрокам.Регистратор КАК Регистратор,
	|	ИСТИНА КАК ЭтоРасчетыСКлиентами
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокам
	|ГДЕ
	|	РасчетыПоСрокам.ДокументРегистратор = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПоСрокам.ДокументРегистратор КАК ДокументРегистратор,
	|	РасчетыПоСрокам.Регистратор КАК Регистратор,
	|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыПоСрокам
	|ГДЕ
	|	РасчетыПоСрокам.ДокументРегистратор = &Ссылка
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПриемниковПоСрокам(ЭтоРасчетыСКлиентами)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПриемники.Регистратор КАК Регистратор,
	|	РасчетыПриемники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыПриемники.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыПриемники.Валюта КАК Валюта,
	|	РасчетыИсточники.СуммаПриемник КАК СуммаПриемник,
	|	РасчетыПриемники.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&ЭтоРасчетыСКлиентами КАК ЭтоРасчетыСКлиентами,
	|	РасчетыИсточники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерамИсточник,
	|	РасчетыИсточники.ОбъектРасчетов КАК ОбъектРасчетовИсточник,
	|	РасчетыИсточники.Валюта КАК ВалютаИсточник,
	|	РасчетыИсточники.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	РасчетыПриемники.ДокументРегистратор КАК ДокументРегистратор
	|ПОМЕСТИТЬ втРегистраторыПриемников
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыИсточники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПриемники
	|	ПО РасчетыИсточники.ДокументРегистратор = РасчетыПриемники.ДокументРегистратор
	|		И РасчетыИсточники.ОбъектРасчетовПриемник = РасчетыПриемники.ОбъектРасчетов
	|		И РасчетыИсточники.АналитикаУчетаПоПартнерамПриемник = РасчетыПриемники.АналитикаУчетаПоПартнерам
	|		И РасчетыИсточники.ВалютаПриемник = РасчетыПриемники.Валюта
	|		И РасчетыИсточники.ИдентификаторФинЗаписи = РасчетыПриемники.ИдентификаторФинЗаписи
	|		И РасчетыИсточники.СуммаПриемник <> 0
	|ГДЕ
	|	НЕ РасчетыПриемники.ПоДаннымОбъектаРасчетовИсточника
	|	И РасчетыПриемники.ДокументРегистратор = &Ссылка
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПриемники.Регистратор КАК Регистратор,
	|	РасчетыПриемники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыПриемники.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыПриемники.Валюта КАК Валюта,
	|	РасчетыИсточники.СуммаПриемник КАК СуммаПриемник,
	|	РасчетыПриемники.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	НЕ &ЭтоРасчетыСКлиентами КАК ЭтоРасчетыСКлиентами,
	|	РасчетыИсточники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерамИсточник,
	|	РасчетыИсточники.ОбъектРасчетов КАК ОбъектРасчетовИсточник,
	|	РасчетыИсточники.Валюта КАК ВалютаИсточник,
	|	РасчетыИсточники.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	РасчетыПриемники.ДокументРегистратор КАК ДокументРегистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыИсточники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыПриемники
	|	ПО РасчетыИсточники.ДокументРегистратор = РасчетыПриемники.ДокументРегистратор
	|		И РасчетыИсточники.ОбъектРасчетовПриемник = РасчетыПриемники.ОбъектРасчетов
	|		И РасчетыИсточники.АналитикаУчетаПоПартнерамПриемник = РасчетыПриемники.АналитикаУчетаПоПартнерам
	|		И РасчетыИсточники.ВалютаПриемник = РасчетыПриемники.Валюта
	|		И РасчетыИсточники.ИдентификаторФинЗаписи = РасчетыПриемники.ИдентификаторФинЗаписи
	|		И РасчетыИсточники.СуммаПриемник <> 0
	|ГДЕ
	|	НЕ РасчетыПриемники.ПоДаннымОбъектаРасчетовИсточника
	|	И РасчетыПриемники.ДокументРегистратор = &Ссылка
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПриемники.Регистратор КАК Регистратор,
	|	РасчетыПриемники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыПриемники.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыПриемники.Валюта КАК Валюта,
	|	РасчетыПриемники.СуммаПриемник КАК Сумма,
	|	РасчетыПриемники.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	РасчетыПриемники.ЭтоРасчетыСКлиентами КАК ЭтоРасчетыСКлиентами,
	|	РасчетыПриемники.АналитикаУчетаПоПартнерамИсточник КАК АналитикаУчетаПоПартнерамИсточник,
	|	РасчетыПриемники.ОбъектРасчетовИсточник КАК ОбъектРасчетовИсточник,
	|	РасчетыПриемники.ВалютаИсточник КАК ВалютаИсточник,
	|	РасчетыПриемники.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	РасчетыПриемники.ДокументРегистратор КАК ДокументРегистратор
	|ИЗ
	|	втРегистраторыПриемников КАК РасчетыПриемники
	|ГДЕ
	|	РасчетыПриемники.ДокументРегистратор = &Ссылка
	|";
	
	Если НЕ ЭтоРасчетыСКлиентами Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрНакопления.РасчетыСКлиентамиПоСрокам", "%1");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрНакопления.РасчетыСПоставщикамиПоСрокам", "РегистрНакопления.РасчетыСКлиентамиПоСрокам");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%1", "РегистрНакопления.РасчетыСПоставщикамиПоСрокам");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Наборы регистраторов расчетов.
// 
// Параметры:
//  РегистраторыРасчетов - ТаблицаЗначений - Регистраторы расчетов
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Наборы регистраторов расчетов:
//  * Ключ - ДокументСсылка - Регистратор набора.
//  * Значение - РегистрНакопленияНаборЗаписей.РасчетыСКлиентами,РегистрНакопленияНаборЗаписей.РасчетыСПоставщикамиПоСрокам 
//
Функция НаборыРегистраторовРасчетов(РегистраторыРасчетов) Экспорт
	
	Результат = Новый Соответствие;
	Для Каждого Запись Из РегистраторыРасчетов Цикл
		
		Если Запись.ЭтоРасчетыСКлиентами Тогда
			Набор = РегистрыНакопления.РасчетыСКлиентамиПоСрокам.СоздатьНаборЗаписей();
		Иначе
			Набор = РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.СоздатьНаборЗаписей();
		КонецЕсли;
		Набор.Отбор.Регистратор.Установить(Запись.Регистратор);
		Набор.Прочитать();
		ТаблицаНабора = Набор.Выгрузить();
		ТаблицаНабора.Индексы.Добавить(ПоляПоиска());
		Данные = Новый Структура("ЭтоРасчетыСКлиентами, Набор",Запись.ЭтоРасчетыСКлиентами,ТаблицаНабора);
		Результат.Вставить(Запись.Регистратор, Данные);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПоляПоиска()
	
	Возврат "ДокументРегистратор,АналитикаУчетаПоПартнерам,ОбъектРасчетов,Валюта,СтатьяДвиженияДенежныхСредств,ИдентификаторФинЗаписи";
	
КонецФункции

Процедура ЗаписатьНаборыРегистраторов(НаборЗаписей, НаборыРегистраторовРасчетов)
	
	Для Каждого Описание Из НаборыРегистраторовРасчетов Цикл
		Если Описание.Значение.ЭтоРасчетыСКлиентами Тогда
			Набор = РегистрыНакопления.РасчетыСКлиентамиПоСрокам.СоздатьНаборЗаписей();
		Иначе
			Набор = РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.СоздатьНаборЗаписей();
		КонецЕсли;
		Набор.Отбор.Регистратор.Установить(Описание.Ключ);
		Набор.Загрузить(Описание.Значение.Набор);
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Заполнить флаг в расчетах по срокам.
// 
// Параметры:
//  ВспомогательныеДанные - Массив Из ТаблицаЗначений - 
//  РегистраторыРасчетов - Массив из ДокументСсылка - 
//
Процедура ЗаполнитьФлагВРасчетахПоСрокам(НаборЗаписей, ВспомогательныеДанные, РегистраторыРасчетов) Экспорт
	
	НаборыРегистраторовРасчетов = НаборыРегистраторовРасчетов(РегистраторыРасчетов);
	Приемники = ВспомогательныеДанные[2].Выгрузить();
	Для Каждого Приемник Из Приемники Цикл
		
		СведенияНабора = НаборыРегистраторовРасчетов[Приемник.Регистратор];
		Если СведенияНабора = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеНабора = СведенияНабора.Набор;
		
		Отбор = Новый Структура(ПоляПоиска());
		ЗаполнитьЗначенияСвойств(Отбор, Приемник);
		НайденныеЗаписи = ДанныеНабора.НайтиСтроки(Отбор);
		Для Каждого Запись Из НайденныеЗаписи Цикл
			Если НЕ ЗначениеЗаполнено(Запись.ОбъектРасчетовПриемник)
					И НЕ ЗначениеЗаполнено(Запись.АналитикаУчетаПоПартнерамПриемник)
					И НЕ ЗначениеЗаполнено(Запись.ВалютаПриемник)
					И Запись.СуммаПриемник = 0 Тогда
				Запись.КорАналитикаУчетаПоПартнерам = Приемник.АналитикаУчетаПоПартнерамИсточник;
				Запись.КорОбъектРасчетов = Приемник.ОбъектРасчетовИсточник;
				Запись.ПоДаннымОбъектаРасчетовИсточника = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	//очистим кор.часть там где флаг ложь
	Для Каждого Набор Из НаборыРегистраторовРасчетов Цикл
		Для Каждого Запись Из Набор.Значение.Набор Цикл
			Если НЕ Запись.ПоДаннымОбъектаРасчетовИсточника
					И НЕ ЗначениеЗаполнено(Запись.ОбъектРасчетовПриемник)
					И НЕ ЗначениеЗаполнено(Запись.АналитикаУчетаПоПартнерамПриемник)
					И НЕ ЗначениеЗаполнено(Запись.ВалютаПриемник)
					И Запись.СуммаПриемник = 0 Тогда
				Запись.КорАналитикаУчетаПоПартнерам = Неопределено;
				Запись.КорОбъектРасчетов = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЗаписатьНаборыРегистраторов(НаборЗаписей, НаборыРегистраторовРасчетов);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеИсточниковПриемников

// Запрос данных оперативного регистра.
// 
// Параметры:
//  ЭтоРасчетыСКлиентами - Булево - Это расчеты с клиентами
// 
// Возвращаемое значение:
//  Запрос - Запрос данных оперативного регистра
Функция ЗапросДанныхОперативногоРегистра(ЭтоРасчетыСКлиентами) Экспорт
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(ТекстЗапросаПриемниковИсточников(ЭтоРасчетыСКлиентами));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭтоРасчетыСКлиентами", ЭтоРасчетыСКлиентами);
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Возврат Запрос;
	
КонецФункции

Функция ТекстЗапросаПриемниковИсточников(ЭтоРасчетыСКлиентами)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Приемники.Регистратор КАК Регистратор,
	|	Приемники.ВидДвижения КАК ВидДвижения,
	|	Приемники.Сумма КАК Сумма,
	|	Приемники.Валюта КАК Валюта,
	|	Приемники.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Приемники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Приемники.КорОбъектРасчетов КАК КорОбъектРасчетов,
	|	Приемники.КорАналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	Приемники.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Приемники.Сторно КАК Сторно
	|ПОМЕСТИТЬ втДанныеНабора
	|ИЗ
	|	&ДанныеНабора КАК Приемники
	|;
	|
	|ВЫБРАТЬ
	|	Приемники.Регистратор КАК Регистратор,
	|	СУММА(ВЫБОР КОГДА Приемники.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА Приемники.Сумма
	|		ИНАЧЕ -Приемники.Сумма
	|	КОНЕЦ) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Приемники.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА Приемники.Сумма
	|		ИНАЧЕ -Приемники.Сумма
	|	КОНЕЦ) > 0 КАК ПоложительнаяСумма,
	|	Приемники.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Приемники.Валюта КАК Валюта,
	|	Приемники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Приемники.КорОбъектРасчетов КАК КорОбъектРасчетов,
	|	Приемники.КорОбъектРасчетов.ВалютаВзаиморасчетов КАК КорВалютаВзаиморасчетов,
	|	Приемники.КорАналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	Приемники.Валюта <> Приемники.КорОбъектРасчетов.Валюта
	|		И ТИПЗНАЧЕНИЯ(Приемники.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
	|		И ВЫРАЗИТЬ(Приемники.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации В(
	|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеВозвратаОплатыЧерезКомиссионера)) КАК ВалютаНеСовпадает,
	|	Приемники.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Приемники.Сторно КАК Сторно
	|ПОМЕСТИТЬ втПриемники
	|ИЗ
	|	втДанныеНабора КАК Приемники
	|ГДЕ
	|	Приемники.КорОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	И Приемники.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|	И Приемники.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|СГРУППИРОВАТЬ ПО
	|	Приемники.Регистратор,
	|	Приемники.ОбъектРасчетов,
	|	Приемники.АналитикаУчетаПоПартнерам,
	|	Приемники.Валюта,
	|	Приемники.КорОбъектРасчетов,
	|	Приемники.КорАналитикаУчетаПоПартнерам,
	|	Приемники.ХозяйственнаяОперация,
	|	Приемники.Сторно
	|;
	|
	|ВЫБРАТЬ
	|	Приемники.Регистратор КАК Регистратор,
	|	Приемники.Сумма КАК Сумма,
	|	Приемники.ПоложительнаяСумма КАК ПоложительнаяСумма,
	|	Приемники.Валюта КАК Валюта,
	|	Приемники.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Приемники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Приемники.КорВалютаВзаиморасчетов КАК КорВалютаВзаиморасчетов,
	|	Приемники.КорОбъектРасчетов КАК КорОбъектРасчетов,
	|	Приемники.КорАналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	Приемники.ВалютаНеСовпадает КАК ВалютаНеСовпадает,
	|	Приемники.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Приемники.Сторно КАК Сторно
	|ИЗ
	|	втПриемники КАК Приемники
	|;
	|
	|ВЫБРАТЬ
	|	Источники.Регистратор КАК Регистратор,
	|	СУММА(ВЫБОР КОГДА Источники.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА -Источники.Сумма
	|		ИНАЧЕ Источники.Сумма
	|	КОНЕЦ) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Источники.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА Источники.Сумма
	|		ИНАЧЕ -Источники.Сумма
	|	КОНЕЦ) > 0 КАК ПоложительнаяСумма,
	|	Источники.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Источники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Источники.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Источники.Сторно КАК Сторно,
	|	ИСТИНА КАК ЭтоРасчетыСКлиентами
	|ИЗ
	|	втДанныеНабора КАК Источники
	|ГДЕ
	|	(Регистратор, ОбъектРасчетов, АналитикаУчетаПоПартнерам, ХозяйственнаяОперация, Сторно) В 
	|		(ВЫБРАТЬ
	|			Регистратор, КорОбъектРасчетов, КорАналитикаУчетаПоПартнерам, ХозяйственнаяОперация, Сторно
	|		ИЗ
	|			втПриемники)
	|СГРУППИРОВАТЬ ПО
	|	Источники.Регистратор,
	|	Источники.ОбъектРасчетов,
	|	Источники.АналитикаУчетаПоПартнерам,
	|	Источники.ХозяйственнаяОперация,
	|	Источники.Сторно";
	
	Если НЕ ЭтоРасчетыСКлиентами Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
							"РегистрНакопления.РасчетыСКлиентами",
							"РегистрНакопления.РасчетыСПоставщиками");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗаполнитьПриемникиВОперативномРегистре(НаборЗаписей, ЗапросДанныхОперативногоРегистра) Экспорт
	
	ЕстьОшибка = Ложь;
	ЗапросДанныхОперативногоРегистра.УстановитьПараметр("ДанныеНабора", НаборЗаписей.Выгрузить());
	ВспомогательныеДанные = ЗапросДанныхОперативногоРегистра.ВыполнитьПакет();
	ПриемникиДокумента = ВспомогательныеДанные[2].Выгрузить();
	ИсточникиДокумента = ВспомогательныеДанные[3].Выгрузить();
	
	МассивОтборов = Новый Массив;
	МассивОтборов.Добавить(Новый Структура("Регистратор,АналитикаУчетаПоПартнерам,ОбъектРасчетов,ХозяйственнаяОперация,Сторно"));
	МассивОтборов.Добавить(Новый Структура("Регистратор,ОбъектРасчетов,ХозяйственнаяОперация,Сторно"));
	МассивОтборов.Добавить(Новый Структура("Регистратор,ХозяйственнаяОперация,Сторно"));
	Для Каждого Приемник Из ПриемникиДокумента Цикл
		Если Приемник.ВалютаНеСовпадает Тогда
			Отбор = МассивОтборов[0];
			ЗаполнитьЗначенияСвойств(Отбор,Приемник);
			Отбор.АналитикаУчетаПоПартнерам = Приемник.КорАналитикаУчетаПоПартнерам;
			Отбор.ОбъектРасчетов = Приемник.КорОбъектРасчетов;
			РаспределитьПриемникПоИсточникам(НаборЗаписей, Приемник, Отбор, ЕстьОшибка);
		Иначе
			Для Каждого Отбор Из МассивОтборов Цикл
				
				ЗаполнитьЗначенияСвойств(Отбор,Приемник);
				Если Отбор.Свойство("АналитикаУчетаПоПартнерам") Тогда
					Отбор.АналитикаУчетаПоПартнерам = Приемник.КорАналитикаУчетаПоПартнерам;
				КонецЕслИ;
				Если Отбор.Свойство("ОбъектРасчетов") Тогда
					Отбор.ОбъектРасчетов = Приемник.КорОбъектРасчетов;
				КонецЕсли;
				Источники = ИсточникиДокумента.Скопировать(Отбор);
				СуммаИсточников = Источники.Итог("Сумма");
				Если Макс(Приемник.Сумма,-Приемник.Сумма) > Макс(СуммаИсточников,-СуммаИсточников) Тогда
					ЕстьОшибка = Истина;
					Прервать;
				ИначеЕсли Макс(Приемник.Сумма,-Приемник.Сумма) < Макс(СуммаИсточников,-СуммаИсточников) Тогда
					Продолжить;
				Иначе
					РаспределитьПриемникПоИсточникам(НаборЗаписей, Приемник, Отбор, ЕстьОшибка);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьОшибка;
	
Конецфункции

// Распределить приемник по источникам.
// 
// Параметры:
//  НаборЗаписей - РегистрНакопленияНаборЗаписей.РасчетыСКлиентами - Набор записей
//  КортежПриемник - СтрокаТаблицыЗначений - Кортеж приемник
//  ОтборИсточников - Произвольный, Структура - Отбор источников:
// * АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам
// * ОбъектРасчетов  - СправочникСсылка.ОбъектыРасчетов
//  ЕстьОшибка - Булево - Взводится, если не удалось выполнить распределение
//
Процедура РаспределитьПриемникПоИсточникам(НаборЗаписей, КортежПриемник, ОтборИсточников, ЕстьОшибка) Экспорт
	
	НаборЗаписейТЗ= НаборЗаписей.Выгрузить();
	
	ИдентификаторФинЗаписи = Новый УникальныйИдентификатор;
	СуммаКРаспределению = Макс(КортежПриемник.Сумма,-КортежПриемник.Сумма);
	СуммаОтмечено = 0;
	Для Каждого Запись Из НаборЗаписейТЗ Цикл
		Если ЭтоЗаписьПриемник(Запись, КортежПриемник, ОтборИсточников) Тогда
			Запись.ПоДаннымОбъектаРасчетовИсточника = Истина;
			Запись.ИдентификаторФинЗаписи = ИдентификаторФинЗаписи;
			СуммаОтмечено = СуммаОтмечено + ?(Запись.Сумма < 0,-Запись.Сумма,Запись.Сумма);
		ИначеЕсли ЭтоЗаписьИсточник(Запись, ОтборИсточников, КортежПриемник) Тогда
			
			СуммаИсточника = ?(Запись.Сумма > 0,Запись.Сумма,-Запись.Сумма);
			СуммаПриемник = Мин(СуммаИсточника, СуммаКРаспределению);
			Запись.СуммаПриемник = СуммаПриемник;
			СуммаКРаспределению = СуммаКРаспределению - СуммаПриемник;
		
			Запись.АналитикаУчетаПоПартнерамПриемник = КортежПриемник.АналитикаУчетаПоПартнерам;
			Запись.ОбъектРасчетовПриемник = КортежПриемник.ОбъектРасчетов;
			Запись.ВалютаПриемник = КортежПриемник.Валюта;
			Запись.ИдентификаторФинЗаписи = ИдентификаторФинЗаписи;
			
		КонецЕсли;
		
	КонецЦикла;
	Если СуммаКРаспределению <> 0 
		ИЛИ СуммаОтмечено <> Макс(КортежПриемник.Сумма,-КортежПриемник.Сумма) Тогда
		ЕстьОшибка = Истина;
	Иначе
		НаборЗаписей.Загрузить(НаборЗаписейТЗ);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоЗаписьПриемник(Запись, КортежПриемник, ОтборИсточников)
	
	АналитикаУчетаПоПартнерамИсточника = Неопределено;
	ОтборИсточников.Свойство("АналитикаУчетаПоПартнерам", АналитикаУчетаПоПартнерамИсточника);
	ОбъектРасчетовИсточника = Неопределено;
	ОтборИсточников.Свойство("ОбъектРасчетов", ОбъектРасчетовИсточника);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Запись, "Сумма") Тогда
		ПоложительнаяСумма = Запись.ВидДвижения = ВидДвиженияНакопления.Приход И Запись.Сумма > 0
			ИЛИ Запись.ВидДвижения = ВидДвиженияНакопления.Расход И Запись.Сумма < 0;
	Иначе
		ПоложительнаяСумма = ?(Запись.ВидДвижения = ВидДвиженияНакопления.Приход, Запись.Долг - Запись.Предоплата,
			Запись.Предоплата - Запись.Долг) > 0;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Запись, "ДокументРегистратор") Тогда
		ПодходитПоРегистратору = Запись.ДокументРегистратор = ОтборИсточников.ДокументРегистратор;
	Иначе
		ПодходитПоРегистратору = Запись.Регистратор = ОтборИсточников.Регистратор;
	КонецЕсли;
	
	Возврат НЕ Запись.ПоДаннымОбъектаРасчетовИсточника
			И ПодходитПоРегистратору
			И Запись.ХозяйственнаяОперация = КортежПриемник.ХозяйственнаяОперация
			И Запись.Сторно = КортежПриемник.Сторно
			И Запись.АналитикаУчетаПоПартнерам = КортежПриемник.АналитикаУчетаПоПартнерам 
			И Запись.ОбъектРасчетов = КортежПриемник.ОбъектРасчетов
			И (Запись.КорАналитикаУчетаПоПартнерам = АналитикаУчетаПоПартнерамИсточника ИЛИ АналитикаУчетаПоПартнерамИсточника = Неопределено)
			И (Запись.КорОбъектРасчетов = ОбъектРасчетовИсточника ИЛИ ОбъектРасчетовИсточника = Неопределено)
			И ПоложительнаяСумма = КортежПриемник.ПоложительнаяСумма;
	
КонецФункции

Функция ЭтоЗаписьИсточник(Запись, ОтборИсточников, КортежПриемник)
	
	АналитикаУчетаПоПартнерам = Неопределено;
	ОтборИсточников.Свойство("АналитикаУчетаПоПартнерам", АналитикаУчетаПоПартнерам);
	ОбъектРасчетов = Неопределено;
	ОтборИсточников.Свойство("ОбъектРасчетов", ОбъектРасчетов);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Запись, "Сумма") Тогда
		ПодходитПоЗнаку = (Запись.ВидДвижения = ВидДвиженияНакопления.Приход И Запись.Сумма > 0 И НЕ КортежПриемник.ПоложительнаяСумма
				ИЛИ Запись.ВидДвижения = ВидДвиженияНакопления.Расход И Запись.Сумма < 0 И НЕ КортежПриемник.ПоложительнаяСумма
				ИЛИ Запись.ВидДвижения = ВидДвиженияНакопления.Расход И Запись.Сумма > 0 И КортежПриемник.ПоложительнаяСумма
				ИЛИ Запись.ВидДвижения = ВидДвиженияНакопления.Приход И Запись.Сумма < 0 И КортежПриемник.ПоложительнаяСумма);
	Иначе
		ПодходитПоЗнаку = (Запись.ВидДвижения = ВидДвиженияНакопления.Приход И Запись.Долг > 0 И НЕ КортежПриемник.ПоложительнаяСумма
				ИЛИ Запись.ВидДвижения = ВидДвиженияНакопления.Расход И Запись.Предоплата > 0 И НЕ КортежПриемник.ПоложительнаяСумма
				ИЛИ Запись.ВидДвижения = ВидДвиженияНакопления.Расход И Запись.Долг > 0 И КортежПриемник.ПоложительнаяСумма
				ИЛИ Запись.ВидДвижения = ВидДвиженияНакопления.Приход И Запись.Предоплата > 0 И КортежПриемник.ПоложительнаяСумма);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Запись, "ДокументРегистратор") Тогда
		ПодходитПоРегистратору = Запись.ДокументРегистратор = ОтборИсточников.ДокументРегистратор;
	Иначе
		ПодходитПоРегистратору = Запись.Регистратор = ОтборИсточников.Регистратор;
	КонецЕсли;
	
	Возврат НЕ ЗначениеЗаполнено(Запись.ОбъектРасчетовПриемник)
			И Запись.ХозяйственнаяОперация = ОтборИсточников.ХозяйственнаяОперация
			И ПодходитПоРегистратору
			И Запись.Сторно = ОтборИсточников.Сторно
			И (Запись.АналитикаУчетаПоПартнерам = АналитикаУчетаПоПартнерам ИЛИ АналитикаУчетаПоПартнерам = Неопределено)
			И (Запись.ОбъектРасчетов = ОбъектРасчетов ИЛИ ОбъектРасчетов = Неопределено)
			И ПодходитПоЗнаку;
	
КонецФункции

#КонецОбласти

#Область ИсправитьКорАналитикуВзаимозачета

// Запрос кор. аналитики взаимозачета
// 
// Возвращаемое значение:
//  Запрос - Запрос вспомогательных данных
Функция ЗапросКорАналитики() Экспорт
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(ТекстЗапросаКорАналитики());
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Возврат Запрос;
	
КонецФункции

Функция ТекстЗапросаКорАналитики()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Приемники.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Приемники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Источники.ОбъектРасчетов КАК КорОбъектРасчетов,
	|	Источники.АналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	Приемники.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Приемники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК Источники
	|	ПО Приемники.Регистратор = Источники.Регистратор
	|		И Приемники.ОбъектРасчетов = Источники.ОбъектРасчетовПриемник
	|		И Приемники.АналитикаУчетаПоПартнерам = Источники.АналитикаУчетаПоПартнерамПриемник
	|		И Приемники.ИдентификаторФинЗаписи = Источники.ИдентификаторФинЗаписи
	|ГДЕ
	|	Приемники.Регистратор = &Ссылка
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Приемники.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Приемники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Источники.ОбъектРасчетов КАК КорОбъектРасчетов,
	|	Источники.АналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	Приемники.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Приемники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК Источники
	|	ПО Приемники.Регистратор = Источники.Регистратор
	|		И Приемники.ОбъектРасчетов = Источники.ОбъектРасчетовПриемник
	|		И Приемники.АналитикаУчетаПоПартнерам = Источники.АналитикаУчетаПоПартнерамПриемник
	|		И Приемники.ИдентификаторФинЗаписи = Источники.ИдентификаторФинЗаписи
	|ГДЕ
	|	Приемники.Регистратор = &Ссылка
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Приемники.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Приемники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Источники.ОбъектРасчетов КАК КорОбъектРасчетов,
	|	Источники.АналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	Приемники.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Приемники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК Источники
	|	ПО Приемники.Регистратор = Источники.Регистратор
	|		И Приемники.ОбъектРасчетов = Источники.ОбъектРасчетовПриемник
	|		И Приемники.АналитикаУчетаПоПартнерам = Источники.АналитикаУчетаПоПартнерамПриемник
	|		И Приемники.ИдентификаторФинЗаписи = Источники.ИдентификаторФинЗаписи
	|ГДЕ
	|	Приемники.Регистратор = &Ссылка
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Приемники.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Приемники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Источники.ОбъектРасчетов КАК КорОбъектРасчетов,
	|	Источники.АналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	Приемники.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Приемники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК Источники
	|	ПО Приемники.Регистратор = Источники.Регистратор
	|		И Приемники.ОбъектРасчетов = Источники.ОбъектРасчетовПриемник
	|		И Приемники.АналитикаУчетаПоПартнерам = Источники.АналитикаУчетаПоПартнерамПриемник
	|		И Приемники.ИдентификаторФинЗаписи = Источники.ИдентификаторФинЗаписи
	|ГДЕ
	|	Приемники.Регистратор = &Ссылка
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИсправитьКорАналитикуВзаимозачета(Запрос, НаборЗаписей) Экспорт
	
	ПроблемныйРегистратор = НаборЗаписей.Отбор.Регистратор.Значение;
	Запрос.УстановитьПараметр("Ссылка", ПроблемныйРегистратор);
	КорАналитикаДокумента = Запрос.Выполнить().Выгрузить();
	Для Каждого Запись Из НаборЗаписей Цикл
		Если Запись.ПоДаннымОбъектаРасчетовИсточника Тогда
			Отбор = Новый Структура("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ИдентификаторФинЗаписи");
			ЗаполнитьЗначенияСвойств(Отбор, Запись);
			НайденныеСтроки = КорАналитикаДокумента.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				КорАналитика = НайденныеСтроки[0];
				Запись.КорОбъектРасчетов = КорАналитика.КорОбъектРасчетов;
				Запись.КорАналитикаУчетаПоПартнерам = КорАналитика.КорАналитикаУчетаПоПартнерам;
			Иначе
				СтрокиТекста = Новый Массив;
				СтрокиТекста.Добавить(НСтр("ru = 'Не удалось актуализировать кор. аналитику. Обновление документа отменено.'"));
				СтрокиТекста.Добавить(ТекстПерепроведитеДокументВРучную());
				ТекстРекомендации = СтрСоединить(СтрокиТекста, Символы.ПС);
				ОбновлениеИнформационнойБазы.ЗарегистрироватьПроблемуСДанными(
					ПроблемныйРегистратор,
					ТекстРекомендации);
			КонецЕсли;
		Иначе
			Запись.КорОбъектРасчетов = Неопределено;
			Запись.КорАналитикаУчетаПоПартнерам = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли