#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция - Данные об отсутствии сотрудника
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого требуется получить данные об отсутствии
//  Дата		 - Дата							 - Дата, на которую требуется получить данные об отстутствиии
// 
// Возвращаемое значение:
//   - Структура - Структура данных об отстутствии сотрудника
//
Функция ДанныеОбОтсутствии(Знач Пользователь = Неопределено, Знач Дата = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОтсутствиеСотрудников.Регистратор КАК Документ,
	|	ОтсутствиеСотрудников.ЗамещающийСотрудник КАК ЗамещающийСотрудник,
	|	ОтсутствиеСотрудников.ДатаНачала КАК ДатаНачала,
	|	ОтсутствиеСотрудников.ДатаОкончания КАК ДатаОкончания,
	|	ОтсутствиеСотрудников.Регистратор.ПричинаОтсутствия КАК ПричинаОтсутствия
	|ИЗ
	|	РегистрСведений.CRM_ОтсутствиеСотрудников КАК ОтсутствиеСотрудников
	|ГДЕ
	|	ОтсутствиеСотрудников.Сотрудник = &Сотрудник
	|	И ОтсутствиеСотрудников.ДатаНачала <= &Дата
	|	И ОтсутствиеСотрудников.ДатаОкончания >= &Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтсутствиеСотрудников.Регистратор,
	|	ОтсутствиеСотрудников.ЗамещающийСотрудник,
	|	ОтсутствиеСотрудников.ДатаНачала,
	|	ОтсутствиеСотрудников.ДатаОкончания,
	|	ОтсутствиеСотрудников.Регистратор.ПричинаОтсутствия
	|ИЗ
	|	РегистрСведений.CRM_ОтсутствиеСотрудников КАК ОтсутствиеСотрудников
	|ГДЕ
	|	ОтсутствиеСотрудников.Сотрудник = &Сотрудник
	|	И ОтсутствиеСотрудников.ДатаНачала <= &Дата
	|	И ОтсутствиеСотрудников.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)");
	
	Запрос.УстановитьПараметр("Дата", Дата); 
	Запрос.УстановитьПараметр("Сотрудник", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Документ,ЗамещающийСотрудник,ДатаНачала,ДатаОкончания, ПричинаОтсутствия", 
			Выборка.Документ, Выборка.ЗамещающийСотрудник, Выборка.ДатаНачала, Выборка.ДатаОкончания, Выборка.ПричинаОтсутствия);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции
	
// Получает замещаемых пользователей
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Замещающий пользователь
// 
// Возвращаемое значение:
//  Массив - из СправочникСсылка.Пользователи	- Замещаемые пользователи
//
Функция ЗамещаемыеПользователи(Пользователь) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОтсутствиеСотрудников.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрСведений.CRM_ОтсутствиеСотрудников КАК ОтсутствиеСотрудников
	|ГДЕ
	|	ОтсутствиеСотрудников.ЗамещающийСотрудник = &ЗамещающийСотрудник
	|	И ОтсутствиеСотрудников.ДатаНачала <= &ТекущаяДата
	|	И ОтсутствиеСотрудников.ДатаОкончания >= &ТекущаяДата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтсутствиеСотрудников.Сотрудник
	|ИЗ
	|	РегистрСведений.CRM_ОтсутствиеСотрудников КАК ОтсутствиеСотрудников
	|ГДЕ
	|	ОтсутствиеСотрудников.ЗамещающийСотрудник = &ЗамещающийСотрудник
	|	И ОтсутствиеСотрудников.ДатаНачала <= &ТекущаяДата
	|	И ОтсутствиеСотрудников.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)");
	
	Запрос.УстановитьПараметр("ЗамещающийСотрудник", Пользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Замещаемые = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	Замещаемые.Добавить(Пользователь);
	Возврат Замещаемые;
	
КонецФункции
	
// Получает замещающего сотрудник
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Замещаемый пользователь
// 
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - Замещающий пользователь
//
Функция ЗамещающийСотрудник(Пользователь) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ОтсутствиеСотрудников.ЗамещающийСотрудник КАК ЗамещающийСотрудник
	                      |ИЗ
	                      |	РегистрСведений.CRM_ОтсутствиеСотрудников КАК CRM_ОтсутствиеСотрудников
	                      |ГДЕ
	                      |	CRM_ОтсутствиеСотрудников.Сотрудник = &Сотрудник
	                      |	И CRM_ОтсутствиеСотрудников.ДатаНачала < &ТекущаяДата");
	
	Запрос.УстановитьПараметр("Сотрудник", Пользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗамещающийСотрудник;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Начинает отсутствие сотрудников
//
Процедура НачалоОтсутствияСотрудников() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ОтсутствиеСотрудников.Регистратор КАК Регистратор
	                      |ИЗ
	                      |	РегистрСведений.CRM_ОтсутствиеСотрудников КАК CRM_ОтсутствиеСотрудников
	                      |ГДЕ
	                      |	CRM_ОтсутствиеСотрудников.ДатаНачала <= &ТекущаяДата
	                      |	И НЕ CRM_ОтсутствиеСотрудников.ПраваПереданы");
	
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Регистратор.ПолучитьОбъект();
		ДокОбъект.ДополнительныеСвойства.Вставить("ОбъектЗаписанУправляющимБП", Истина);
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	
КонецПроцедуры

// Завершает отсутствие сотрудников
//
Процедура ЗавершениеОтсутствияСотрудников() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ОтсутствиеСотрудников.Регистратор КАК Регистратор
	                      |ИЗ
	                      |	РегистрСведений.CRM_ОтсутствиеСотрудников КАК CRM_ОтсутствиеСотрудников
	                      |ГДЕ
	                      |	CRM_ОтсутствиеСотрудников.ДатаОкончания < &ТекущаяДата
	                      |	И CRM_ОтсутствиеСотрудников.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)");
	
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Регистратор.ПолучитьОбъект();
		ДокОбъект.Состояние = Перечисления.CRM_СостоянияОтсутствияСотрудника.Завершено;
		
		ДокОбъект.ДополнительныеСвойства.Вставить("НеПроверятьПересечениеПериодов", Истина);
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	
КонецПроцедуры

// Управляет включением \ выключением регламентного задания "Завершение отсутствия сотрудников"
//
Процедура ВклВыклРегЗадание() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ОтсутствиеСотрудников.Регистратор КАК Регистратор
	                      |ИЗ
	                      |	РегистрСведений.CRM_ОтсутствиеСотрудников КАК CRM_ОтсутствиеСотрудников
	                      |ГДЕ
	                      |	CRM_ОтсутствиеСотрудников.ДатаОкончания <> ДАТАВРЕМЯ(1,1,1)");
	
	Использование = Не Запрос.Выполнить().Пустой();
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Метаданные", Метаданные.РегламентныеЗадания.CRM_ЗавершениеОтсутствияСотрудников);
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыПоиска);

	Для Каждого Задание Из СписокЗаданий Цикл
		
		ПараметрыЗадания = Новый Структура("Использование", Использование);
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
		
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ОтсутствиеСотрудников.Регистратор КАК Регистратор
	                      |ИЗ
	                      |	РегистрСведений.CRM_ОтсутствиеСотрудников КАК CRM_ОтсутствиеСотрудников
	                      |ГДЕ
	                      |	НЕ CRM_ОтсутствиеСотрудников.ПраваПереданы");
	
	Использование = Не Запрос.Выполнить().Пустой();
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Метаданные", Метаданные.РегламентныеЗадания.CRM_НачалоОтсутствияСотрудников);
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыПоиска);

	Для Каждого Задание Из СписокЗаданий Цикл
		
		ПараметрыЗадания = Новый Структура("Использование", Использование);
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует активную надпись
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ИмяГруппы			 - Строка						 - Имя группы формы
//  ВозможноИзменение	 - Истина						 - Управляет возможностью изменения
//  Пользователь		 - СправочникСсылка.Пользователи - Пользователь, для которого требудется получить данные об отстутствии
//  Дата				 - Дата							 - Дата, на которую требется получить данные об отсутствии
//
Процедура СформироватьАктивнуюНадпись(Форма, ИмяГруппы, ВозможноИзменение = Истина,
	 Знач Пользователь = Неопределено,
	 Дата = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ДанныеОбОтсутствии = ДанныеОбОтсутствии(Пользователь, Дата);
	
	Если ДанныеОбОтсутствии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбОтсутствии.ДатаОкончания) Тогда
		Надпись = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 до %2.'"),
			 ДанныеОбОтсутствии.ПричинаОтсутствия, Формат(ДанныеОбОтсутствии.ДатаОкончания,
			 "ДФ=dd.MM.yyyy"));
	Иначе
		Надпись = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 до %2.'"),
			 ДанныеОбОтсутствии.ПричинаОтсутствия,
			 НСтр("ru = '<дата не указана>'"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеОбОтсутствии.ЗамещающийСотрудник) Тогда
		ТекстЗамещающий = НСтр("ru = 'Замещающий:'");
		ГиперссылкаЗамещающий = Новый ФорматированнаяСтрока(Строка(ДанныеОбОтсутствии.ЗамещающийСотрудник),
			 , , ,
			 ПолучитьНавигационнуюСсылку(ДанныеОбОтсутствии.ЗамещающийСотрудник));
	Иначе
		ТекстЗамещающий = НСтр("ru = 'Замещающий не указан'");
		ГиперссылкаЗамещающий = "";
	КонецЕсли;
	Если ВозможноИзменение Тогда
		ГиперссылкаИзменить = Новый ФорматированнаяСтрока(НСтр("ru='Изменить.'"), , , ,
			 ПолучитьНавигационнуюСсылку(ДанныеОбОтсутствии.Документ));
		ГиперссылкаЗавершить = Новый ФорматированнаяСтрока(НСтр("ru='Завершить.'"), , , ,
			 "e1cib/command/Документ.CRM_ОтсутствиеСотрудника.Команда.ЗавершитьОтсутствиеТекущегоПользователя");
	Иначе
		ГиперссылкаИзменить = "";
		ГиперссылкаЗавершить = "";
	КонецЕсли;
	
	Группа = Форма.Элементы.Найти(ИмяГруппы);
	Если Группа <> Неопределено Тогда
		Элемент = Форма.Элементы.Найти("скНадписьОтсутствиеПользователя");
		Если Элемент = Неопределено Тогда
			Элемент = Форма.Элементы.Добавить("скНадписьОтсутствиеПользователя", Тип("ДекорацияФормы"), Группа);
			Элемент.Вид = ВидДекорацииФормы.Надпись;
			Элемент.РастягиватьПоГоризонтали = Истина;
			Элемент.АвтоМаксимальнаяШирина = Ложь;
			Элемент.ЦветФона = Новый Цвет(251, 237, 158);
			Элемент.Шрифт = Новый Шрифт(, 12);
			Элемент.Высота = 1;
			Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		КонецЕсли;
		Элемент.Заголовок = Новый ФорматированнаяСтрока(Надпись, "  ", ТекстЗамещающий, " ",
			 ГиперссылкаЗамещающий, ".  ", ГиперссылкаЗавершить, "  ",
			 ГиперссылкаИзменить);
	КонецЕсли;
	
КонецПроцедуры

// Завершает отсутствие текущего пользователя
//
Процедура ЗавершитьОтсутствиеТекущегоПользователя() Экспорт
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	
	ДанныеОбОтсутствии = ДанныеОбОтсутствии(ТекПользователь);
	
	Если ДанныеОбОтсутствии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокОбъект = ДанныеОбОтсутствии.Документ.ПолучитьОбъект();
	ДокОбъект.Состояние = Перечисления.CRM_СостоянияОтсутствияСотрудника.Завершено;
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
