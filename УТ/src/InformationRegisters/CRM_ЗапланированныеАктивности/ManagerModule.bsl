#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Функция - Следующая запланированная активность
//  Функция возвращает информацию о следующем взаимодействии или задаче выбранного интереса.
//
// Параметры:
//  Объект			- Ссылка, ДокументСсылка.CRM_Интерес			- Ссылка на интерес, 
//					по которому проверяются следующие запланированные активности.
//  ТипАктивности	- Ссылка, ПеречислениеСсылка.CRM_ТипыАктивности - Ссылка на тип активности, 
//					задача или взаимодействие.
// 
// Возвращаемое значение:
//  Результат		- Структура значений реквизитов записи регистра.
//  	ПланируемаяАктивность	- Ссылка,ДокументСсылка.CRM_Взаимодействие, ЗадачаСсылка.ЗадачаИсполнителя
//  	Ответственный	- Ссылка,СправочникСсылка.РолиИсполнителей, СправочникСсылка.Пользователи
//  	Тема			- Строка
//  	ПланируемаяДата	- Дата
//  	ТипАктивности	- ПеречислениеСсылка.CRM_ТипыАктивности
//
Функция СледующаяЗапланированнаяАктивность(Объект, ТипАктивности = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ЗапланированныеАктивности.ПланируемаяАктивность КАК ПланируемаяАктивность,
	                      |	CRM_ЗапланированныеАктивности.Ответственный КАК Ответственный,
	                      |	CRM_ЗапланированныеАктивности.Тема КАК Тема,
	                      |	CRM_ЗапланированныеАктивности.ТипАктивности КАК ТипАктивности,
	                      |	CRM_ЗапланированныеАктивности.ПланируемаяДата КАК ПланируемаяДата
	                      |ИЗ
	                      |	РегистрСведений.CRM_ЗапланированныеАктивности КАК CRM_ЗапланированныеАктивности
	                      |ГДЕ
	                      |	CRM_ЗапланированныеАктивности.Объект = &Объект
	                      |	И CRM_ЗапланированныеАктивности.ТипАктивности = &ТипАктивности
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ПланируемаяДата");
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Если ЗначениеЗаполнено(ТипАктивности) Тогда
		Запрос.УстановитьПараметр("ТипАктивности", ТипАктивности);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И CRM_ЗапланированныеАктивности.ТипАктивности = &ТипАктивности", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Новый Структура("ПланируемаяАктивность, Ответственный, Тема, ПланируемаяДата, ТипАктивности");
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция - Есть активности к завершению
//
// Параметры:
//  Объект			 - Ссылка, ДокументСсылка.CRM_Интерес							 - Ссылка на интерес,
//  							по которому проверяются наличие активности к завершению.
//  ТипАктивности	 - Ссылка, ПеречислениеСсылка.CRM_ТипыАктивности				 - Ссылка на тип активности,
//  				задача или взаимодействие.
//  ОтборЗавершаемых - Ссылка, ПеречислениеСсылка.CRM_ОтборыЗавершаемыхАктивностей	 - Ссылка на тип отбора по регистру.
// 
// Возвращаемое значение:
//  Булево - Признак наличия задач или взаимодействия готовых к завершению.
//
Функция ЕстьАктивностиКЗавершению(Объект, ТипАктивности = Неопределено, ОтборЗавершаемых) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ЗапланированныеАктивности.ПланируемаяАктивность КАК ПланируемаяАктивность
	                      |ИЗ
	                      |	РегистрСведений.CRM_ЗапланированныеАктивности КАК CRM_ЗапланированныеАктивности
	                      |ГДЕ
	                      |	CRM_ЗапланированныеАктивности.Объект = &Объект
	                      |	И CRM_ЗапланированныеАктивности.ТипАктивности = &ТипАктивности
	                      |	И CRM_ЗапланированныеАктивности.ПланируемаяДата <= &ЗавершатьПоДату
	                      |	И ВЫБОР
	                      |			КОГДА CRM_ЗапланированныеАктивности.ПланируемаяАктивность ССЫЛКА Задача.ЗадачаИсполнителя
	                      |				ТОГДА CRM_ЗапланированныеАктивности.ПланируемаяАктивность.CRM_Личная
	                      |			ИНАЧЕ ИСТИНА
	                      |		КОНЕЦ
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	CRM_ЗапланированныеАктивности.ПланируемаяДата");
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Если ЗначениеЗаполнено(ТипАктивности) Тогда
		Запрос.УстановитьПараметр("ТипАктивности", ТипАктивности);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И CRM_ЗапланированныеАктивности.ТипАктивности = &ТипАктивности", "");
	КонецЕсли;
	Если ОтборЗавершаемых = Перечисления.CRM_ОтборыЗавершаемыхАктивностей.ПросроченныеИНаСегодня Тогда
		ЗавершатьПоДату = КонецДня(ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("ЗавершатьПоДату", ЗавершатьПоДату);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И CRM_ЗапланированныеАктивности.ПланируемаяДата <= &ЗавершатьПоДату", "");
	КонецЕсли;
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Процедура - Завершить активности
//  Процедура переводит задачу или взаимодействие в статус "Завершено".
//
// Параметры:
//  Объект			 - Ссылка, ДокументСсылка.CRM_Интерес							 - Ссылка на интерес, который необходимо завершить.
//  Результат		 - Строка														 - Описание результата выполнения процедуры.
//  ТипАктивности	 - Ссылка, ПеречислениеСсылка.CRM_ТипыАктивности				 - Ссылка на тип активности, задача
	// или взаимодействие.
//  ОтборЗавершаемых - Ссылка, ПеречислениеСсылка.CRM_ОтборыЗавершаемыхАктивностей	 - Ссылка на тип отбора по регистру.
//
Процедура ЗавершитьАктивности(Объект, Результат = "", ТипАктивности = Неопределено, ОтборЗавершаемых) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ЗапланированныеАктивности.ПланируемаяАктивность КАК ПланируемаяАктивность
	                      |ИЗ
	                      |	РегистрСведений.CRM_ЗапланированныеАктивности КАК CRM_ЗапланированныеАктивности
	                      |ГДЕ
	                      |	CRM_ЗапланированныеАктивности.Объект = &Объект
	                      |	И CRM_ЗапланированныеАктивности.ТипАктивности = &ТипАктивности
	                      |	И CRM_ЗапланированныеАктивности.ПланируемаяДата <= &ЗавершатьПоДату
	                      |ОБЪЕДИНИТЬ
	                      |ВЫБРАТЬ
	                      |CRM_Взаимодействие.Ссылка
	                      |ИЗ
	                      |РегистрСведений.CRM_ЗапланированныеАктивности КАК CRM_ЗапланированныеАктивности
	                      |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	                      |	ПО CRM_ЗапланированныеАктивности.ПланируемаяАктивность = CRM_Взаимодействие.ДокументОснование
	                      |ГДЕ
	                      |	CRM_ЗапланированныеАктивности.Объект = &Объект
	                      |	И CRM_ЗапланированныеАктивности.ТипАктивности = &ТипАктивности
	                      |	И CRM_ЗапланированныеАктивности.ПланируемаяДата <= &ЗавершатьПоДату");
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Если ЗначениеЗаполнено(ТипАктивности) Тогда
		Запрос.УстановитьПараметр("ТипАктивности", ТипАктивности);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И CRM_ЗапланированныеАктивности.ТипАктивности = &ТипАктивности", "");
	КонецЕсли;
	Если ОтборЗавершаемых = Перечисления.CRM_ОтборыЗавершаемыхАктивностей.ПросроченныеИНаСегодня Тогда
		ЗавершатьПоДату = КонецДня(ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("ЗавершатьПоДату", ЗавершатьПоДату);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И CRM_ЗапланированныеАктивности.ПланируемаяДата <= &ЗавершатьПоДату", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.ПланируемаяАктивность) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
			ПланируемаяАктивность = Выборка.ПланируемаяАктивность.ПолучитьОбъект();
			ПланируемаяАктивность.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено;
			ПланируемаяАктивность.Результат = ?(ЗначениеЗаполнено(Результат), Результат,
				 НСтр("ru='Завершено автоматически';en='Completed Automatically'"));
			ПланируемаяАктивность.ДатаЗавершенияВзаимодействия = ТекущаяДатаСеанса();
			ПланируемаяАктивность.Записать();
		ИначеЕсли ТипЗнч(Выборка.ПланируемаяАктивность) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
			 И Выборка.ПланируемаяАктивность.CRM_Личная Тогда
			ПланируемаяАктивность = Выборка.ПланируемаяАктивность.ПолучитьОбъект();
			ПланируемаяАктивность.Выполнена = Истина;
			ПланируемаяАктивность.РезультатВыполнения = ?(ЗначениеЗаполнено(Результат), Результат,
				 НСтр("ru='Завершена автоматически';en='Finished automatically'"));
			ПланируемаяАктивность.Записать();
		КонецЕсли;
		Если ОтборЗавершаемых = Перечисления.CRM_ОтборыЗавершаемыхАктивностей.ПерваяЗапланированная Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура - Завершить активности
//  Завершает взаимодействия по интересу в зависимости от настроек состояния интереса.
//
// Параметры:
//  Интерес			 - Ссылка, ДокументСсылка.CRM_Интерес			 - Ссылка на интерес, который необходимо завершить.
//  СостояниеИнтереса - Ссылка, СправочникСсылка.CRM_СостоянияИнтересов 					
//
Процедура ЗавершитьАктивностиИнтересаПоНастройкамСостояния(Интерес, СостояниеИнтереса) Экспорт
	Если ЗначениеЗаполнено(СостояниеИнтереса.ЗавершатьЗапланированныеАктивности) Тогда
		Если СостояниеИнтереса.ЗавершатьЗапланированныеАктивности = Перечисления.CRM_ЗавершаемыеТипыАктивности.Взаимодействия Тогда
			ТипАктивности = Перечисления.CRM_ТипыАктивности.Взаимодействие;
		ИначеЕсли СостояниеИнтереса.ЗавершатьЗапланированныеАктивности = Перечисления.CRM_ЗавершаемыеТипыАктивности.Задачи Тогда
			ТипАктивности = Перечисления.CRM_ТипыАктивности.Задача;
		Иначе
			ТипАктивности = Неопределено;
		КонецЕсли;
		ЗавершитьАктивности(Интерес, "", ТипАктивности,	СостояниеИнтереса.ОтборЗавершаемыхАктивностей);
	КонецЕсли;
КонецПроцедуры

// Процедура - Отменить активности
//
// Параметры:
//  Объект			 - Ссылка, ДокументСсылка.CRM_Интерес							 - Ссылка на интерес,
//  																				   по которому отменяются активности.
//  Результат		 - Строка														 - Результат выполнения процедуры
//  ТипАктивности	 - Ссылка, ПеречислениеСсылка.CRM_ТипыАктивности				 - Ссылка на тип активности,
//  																				   задача или взаимодействие.
//  ОтборЗавершаемых - Ссылка, ПеречислениеСсылка.CRM_ОтборыЗавершаемыхАктивностей	 - Ссылка на тип отбора по регистру.
//
Процедура ОтменитьАктивности(Объект, Результат, ТипАктивности = Неопределено, ОтборЗавершаемых = Неопределено) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ЗапланированныеАктивности.ПланируемаяАктивность КАК ПланируемаяАктивность
	                      |ИЗ
	                      |	РегистрСведений.CRM_ЗапланированныеАктивности КАК CRM_ЗапланированныеАктивности
	                      |ГДЕ
	                      |	CRM_ЗапланированныеАктивности.Объект = &Объект
	                      |	И CRM_ЗапланированныеАктивности.ТипАктивности = &ТипАктивности
	                      |	И CRM_ЗапланированныеАктивности.ПланируемаяДата <= &ЗавершатьПоДату");
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Если ЗначениеЗаполнено(ТипАктивности) Тогда
		Запрос.УстановитьПараметр("ТипАктивности", ТипАктивности);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И CRM_ЗапланированныеАктивности.ТипАктивности = &ТипАктивности", "");
	КонецЕсли;
	Если ОтборЗавершаемых = Перечисления.CRM_ОтборыЗавершаемыхАктивностей.ПросроченныеИНаСегодня Тогда
		ЗавершатьПоДату = КонецДня(ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("ЗавершатьПоДату", ЗавершатьПоДату);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И CRM_ЗапланированныеАктивности.ПланируемаяДата <= &ЗавершатьПоДату", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.ПланируемаяАктивность) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
			ПланируемаяАктивность = Выборка.ПланируемаяАктивность.ПолучитьОбъект();
			ПланируемаяАктивность.ДатаЗавершенияВзаимодействия = ТекущаяДатаСеанса();
			ПланируемаяАктивность.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Отменено;
			ПланируемаяАктивность.Результат = Результат;
			ПланируемаяАктивность.Записать();
		ИначеЕсли ТипЗнч(Выборка.ПланируемаяАктивность) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
			 И Выборка.ПланируемаяАктивность.CRM_Личная Тогда
			ПланируемаяАктивность = Выборка.ПланируемаяАктивность.ПолучитьОбъект();
			ПланируемаяАктивность.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
		Если ОтборЗавершаемых = Перечисления.CRM_ОтборыЗавершаемыхАктивностей.ПерваяЗапланированная Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Функция возвращает Истина, если нет необходимости в планировании обязательной активности.
//
// Параметры:
//  Интерес				 - ДокументСсылка.CRM_Интерес	 - Ссылка на документ "Интерес".
//  НовоеСостояние		 - СправочникСсылка.CRM_СостоянияИнтересов	 - Состояние интереса.
//  ТекстПредупреждения	 - Строка	 - Текст предупреждения.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ПроверитьОбязательноеПланированиеАктивности(Интерес, НовоеСостояние, ТекстПредупреждения) Экспорт
	
	Если ЗначениеЗаполнено(НовоеСостояние.ОбязательноеПланированиеАктивности) Тогда
		Если НовоеСостояние.ОбязательноеПланированиеАктивности = 
				Перечисления.CRM_ПланируемыеТипыАктивности.ВзаимодействиеИЗадача Тогда
			Результат = РегистрыСведений.CRM_ЗапланированныеАктивности.СледующаяЗапланированнаяАктивность(Интерес,
			Перечисления.CRM_ТипыАктивности.Взаимодействие); 
			РезультатПроверки = Истина;
			Если Результат = Неопределено Тогда
				ТекстПредупреждения = 
					НСтр("ru = 'Нет запланированных взаимодействий по обращению. Переход в состояние невозможен.'");
				Возврат Ложь;
			КонецЕсли;
			Результат = РегистрыСведений.CRM_ЗапланированныеАктивности.СледующаяЗапланированнаяАктивность(Интерес,
			Перечисления.CRM_ТипыАктивности.Задача); 
			Если Результат = Неопределено Тогда
				ТекстПредупреждения = НСтр("ru = 'Нет запланированных задач по обращению. Переход в состояние невозможен.'");
				Возврат Ложь;
			КонецЕсли;
			Возврат Истина;
		ИначеЕсли НовоеСостояние.ОбязательноеПланированиеАктивности =
				Перечисления.CRM_ПланируемыеТипыАктивности.Взаимодействие Тогда
			ТипАктивности = Перечисления.CRM_ТипыАктивности.Взаимодействие;
			ТекстПредупреждения =
			НСтр("ru='Нет запланированных взаимодействий по текущему обращению. Переход в состояние невозможен!';
			|en='There will be no planned interactions for the current lead. You can not record a document!'");
		ИначеЕсли НовоеСостояние.ОбязательноеПланированиеАктивности = 
				Перечисления.CRM_ПланируемыеТипыАктивности.Задача Тогда
			ТипАктивности = Перечисления.CRM_ТипыАктивности.Задача;
			ТекстПредупреждения = НСтр("ru='Нет запланированных задач по текущему обращению. Переход в состояние невозможен.';
			|en='There are no scheduled tasks for the current lead. You can not record a document!'");
		Иначе 
			ТипАктивности = Неопределено;
			ТекстПредупреждения = НСтр("ru='Нет запланированных дел по текущему обращению. Переход в состояние невозможен.';
			|en='There are no scheduled activities for the current lead. You can not record a document!'");
		КонецЕсли;
		Результат = РегистрыСведений.CRM_ЗапланированныеАктивности.СледующаяЗапланированнаяАктивность(Интерес, ТипАктивности); 
		Если Результат = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина
	
КонецФункции
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВидФормы = "ФормаЗаписи" Тогда
		СтандартнаяОбработка = Ложь;
		Параметры.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Параметры.Вставить("ТолькоПросмотр", Ложь);
		Если ТипЗнч(Параметры.Ключ) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
			Если ВзаимодействиеЗавершеноИлиОтменено(Параметры.Ключ) Тогда
				Параметры.Вставить("ОткрыватьФорму", Истина);
				ВыбраннаяФорма = "Документ.CRM_Взаимодействие.Форма.ФормаДокумента";
			Иначе
				ВыбраннаяФорма = "Документ.CRM_Взаимодействие.Форма.ФормаДокументаКраткая";
			КонецЕсли;
		ИначеЕсли ТипЗнч(Параметры.Ключ) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Параметры.Вставить("ИзСпискаАктивностей", Истина);
			CRM_МетодыМодулейМенеджеровЗадач.ОбработкаПолученияФормОбъектовCRM(Задачи.ЗадачаИсполнителя,
				 "ФормаОбъекта", Параметры, ВыбраннаяФорма, ДополнительнаяИнформация,
				 СтандартнаяОбработка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ВзаимодействиеЗавершеноИлиОтменено(ВзаимодействиеСсылка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Взаимодействие.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.CRM_Взаимодействие КАК Взаимодействие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_СостоянияСобытий КАК СостоянияСобытий
	|		ПО Взаимодействие.СтатусВзаимодействия = СостоянияСобытий.Ссылка
	|			И Взаимодействие.Ссылка = &ВзаимодействиеСсылка
	|			И (СостоянияСобытий.ТипСостояния В (ЗНАЧЕНИЕ(Перечисление.CRM_ТипыСостоянийСобытий.Завершено), ЗНАЧЕНИЕ(Перечисление.CRM_ТипыСостоянийСобытий.Отменено)))");
	
	Запрос.Параметры.Вставить("ВзаимодействиеСсылка", ВзаимодействиеСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#КонецЕсли
