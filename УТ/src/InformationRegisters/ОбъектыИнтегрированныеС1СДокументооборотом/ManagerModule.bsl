#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет связь объекта ИС и объекта ДО.
//
// Параметры:
//   ID - Строка - идентификатор объекта ДО.
//   Тип - Строка - тип объекта ДО.
//   ОбъектИС - ЛюбаяСсылка - объект ИС.
//   НаличиеПрисоединенныхФайлов - Булево - Истина, если в ДО есть присоединенные файлы.
//   ДополнительныеДанные - Произвольный - дополнительные данные, которые требуется сохранить в хранилище.
//
Процедура ДобавитьСвязь(ID, Тип, ОбъектИС, НаличиеПрисоединенныхФайлов = Неопределено,
		ДополнительныеДанные = Неопределено) Экспорт
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектИС) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Установка связи объекта ДО (%1, %2) с несуществующим объектом ИС.'"), ID, Тип);
	КонецЕсли;
	
	Если ЗаписьУжеЕсть(ID, Тип, ОбъектИС) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Объект.Установить(ОбъектИС);
	НаборЗаписей.Очистить();
	
	Запись = НаборЗаписей.Добавить();
	
	Запись.Объект = ОбъектИС;
	Запись.ТипОбъектаДО = Тип;
	Запись.ИдентификаторОбъектаДО = ID;
	Если ДополнительныеДанные <> Неопределено Тогда
		Запись.ДополнительныеДанные = Новый ХранилищеЗначения(ДополнительныеДанные, Новый СжатиеДанных(9));
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриПоявленииПрисоединенныхФайловДокументооборота(
		ID,
		Тип,
		ОбъектИС,
		НаличиеПрисоединенныхФайлов);
	
КонецПроцедуры

// Удаляет связь объекта ИС и объекта ДО.
//
// Параметры:
//   ID - Строка - идентификатор объекта ДО.
//   Тип - Строка - тип объекта ДО.
//   ОбъектИС - ЛюбаяСсылка - объект ИС.
//
Процедура УдалитьСвязь(ID, Тип, ОбъектИС) Экспорт
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ОбъектыИнтегрированныеС1СДокументооборотом");
		ЭлементБлокировкиДанных.УстановитьЗначение("Объект", ОбъектИС);
		ЭлементБлокировкиДанных.УстановитьЗначение("ИдентификаторОбъектаДО", ID);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		МассивТипов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип);
		Если Тип = "DMDocument" Тогда
			МассивТипов.Добавить("DMInternalDocument");
			МассивТипов.Добавить("DMIncomingDocument");
			МассивТипов.Добавить("DMOutgoingDocument");
		КонецЕсли;
		Если Тип = "DMInternalDocument" Тогда
			МассивТипов.Добавить("DMDocument");
		КонецЕсли;
		Если Тип = "DMIncomingDocument" Тогда
			МассивТипов.Добавить("DMDocument");
		КонецЕсли;
		Если Тип = "DMOutgoingDocument" Тогда
			МассивТипов.Добавить("DMDocument");
		КонецЕсли;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ОбъектыИнтегрированныеС1СДокументооборотом.Объект КАК Объект,
			|	ОбъектыИнтегрированныеС1СДокументооборотом.ТипОбъектаДО КАК ТипОбъектаДО,
			|	ОбъектыИнтегрированныеС1СДокументооборотом.ИдентификаторОбъектаДО КАК ИдентификаторОбъектаДО
			|ИЗ
			|	РегистрСведений.ОбъектыИнтегрированныеС1СДокументооборотом КАК ОбъектыИнтегрированныеС1СДокументооборотом
			|ГДЕ
			|	ОбъектыИнтегрированныеС1СДокументооборотом.Объект = &ОбъектИС
			|	И ОбъектыИнтегрированныеС1СДокументооборотом.ИдентификаторОбъектаДО = &ID
			|	И ОбъектыИнтегрированныеС1СДокументооборотом.ТипОбъектаДО В (&МассивТипов)");
		Запрос.УстановитьПараметр("ОбъектИС", ОбъектИС);
		Запрос.УстановитьПараметр("ID", ID);
		Запрос.УстановитьПараметр("МассивТипов", МассивТипов);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = СоздатьМенеджерЗаписи();
			Запись.Объект = Выборка.Объект;
			Запись.ТипОбъектаДО = Выборка.ТипОбъектаДО;
			Запись.ИдентификаторОбъектаДО = Выборка.ИдентификаторОбъектаДО;
			Запись.Удалить();
		КонецЦикла;
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриУдаленииПрисоединенныхФайловДокументооборота(
			ID,
			Тип,
			ОбъектИС);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Получает связанный объект ИС по объекту ДО.
//
// Параметры:
//   ID - Строка - идентификатор объекта ДО.
//   Тип - Строка - тип объекта ДО.
//   ТипОбъекта - Строка - необязательный, тип объекта ИС.
//
// Возвращаемое значение:
//   Неопределено - если связи нет.
//   ДокументСсылка
//   СправочникСсылка
//   ПланВидовРасчетаСсылка
//   ПланВидовХарактеристикСсылка - ссылка на объект ИС.
//
Функция СсылкаНаОбъектИСПоДаннымДокументооборота(ID, Тип, ТипОбъекта = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбъектыИнтегрированныеС1СДокументооборотом.Объект
		|ИЗ
		|	РегистрСведений.ОбъектыИнтегрированныеС1СДокументооборотом КАК ОбъектыИнтегрированныеС1СДокументооборотом
		|ГДЕ
		|	ОбъектыИнтегрированныеС1СДокументооборотом.ТипОбъектаДО = &ТипОбъектаДО
		|	И ОбъектыИнтегрированныеС1СДокументооборотом.ИдентификаторОбъектаДО = &ИдентификаторОбъектаДО
		|	И &Условие");
	Запрос.УстановитьПараметр("ТипОбъектаДО", Тип);
	Запрос.УстановитьПараметр("ИдентификаторОбъектаДО", ID);
	
	Если ТипОбъекта = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&Условие",
			"ТИПЗНАЧЕНИЯ(ОбъектыИнтегрированныеС1СДокументооборотом.Объект) = &ТипОбъекта");
		Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
		
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Объект;
	КонецЕсли;
	
КонецФункции

// Получает из регистра данные объекта 1С:Документооборота, связанного с объектом конфигурации-потребителя.
//
// Параметры:
//   СсылкаНаВнешнийОбъект - ЛюбаяСсылка - ссылка на объект конфигурации-потребителя.
//
// Возвращаемое значение:
//   Неопределено, Структура - данные объекта:
//     * name - Строка - имя объекта Документооборота.
//     * ID - Строка - уникальный идентификатор объекта в Документообороте.
//     * type - Строка - имя типа XDTO, соответствующего объекту ДО.
//     * ВнешнийОбъект - ЛюбаяСсылка - ссылка на связанный объект ИС.
//     * ДополнительныеДанные - Произвольный - дополнительные данные.
//
Функция ДанныеОбъектаДОПоВнешнемуОбъекту(СсылкаНаВнешнийОбъект) Экспорт
	
	Если СсылкаНаВнешнийОбъект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбъектыИнтегрированныеС1СДокументооборотом.ТипОбъектаДО КАК ТипОбъектаДО,
		|	ОбъектыИнтегрированныеС1СДокументооборотом.ИдентификаторОбъектаДО КАК ИдентификаторОбъектаДО,
		|	ОбъектыИнтегрированныеС1СДокументооборотом.ДополнительныеДанные КАК ДополнительныеДанные
		|ИЗ
		|	РегистрСведений.ОбъектыИнтегрированныеС1СДокументооборотом КАК ОбъектыИнтегрированныеС1СДокументооборотом
		|ГДЕ
		|	ОбъектыИнтегрированныеС1СДокументооборотом.Объект = &ВнешнийОбъект");
	Запрос.УстановитьПараметр("ВнешнийОбъект", СсылкаНаВнешнийОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоСвязей = Выборка.Количество();
	
	Если КоличествоСвязей = 1 Тогда
		Выборка.Следующий();
		Результат = Новый Структура;
		Результат.Вставить("name", СокрЛП(СсылкаНаВнешнийОбъект));
		Результат.Вставить("ID", Выборка.ИдентификаторОбъектаДО);
		Результат.Вставить("type", Выборка.ТипОбъектаДО);
		Результат.Вставить("ВнешнийОбъект", СсылкаНаВнешнийОбъект);
		Результат.Вставить("ДополнительныеДанные", Неопределено);
		Если ТипЗнч(Выборка.ДополнительныеДанные) = Тип("ХранилищеЗначения") Тогда
			Результат.ДополнительныеДанные = Выборка.ДополнительныеДанные.Получить();
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаписьУжеЕсть(ID, Тип, ОбъектИС)
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбъектыИнтегрированныеС1СДокументооборотом.Объект КАК Объект,
		|	ОбъектыИнтегрированныеС1СДокументооборотом.ТипОбъектаДО КАК ТипОбъектаДО,
		|	ОбъектыИнтегрированныеС1СДокументооборотом.ИдентификаторОбъектаДО КАК ИдентификаторОбъектаДО
		|ИЗ
		|	РегистрСведений.ОбъектыИнтегрированныеС1СДокументооборотом КАК ОбъектыИнтегрированныеС1СДокументооборотом
		|ГДЕ
		|	ОбъектыИнтегрированныеС1СДокументооборотом.Объект = &Объект
		|	И ОбъектыИнтегрированныеС1СДокументооборотом.ИдентификаторОбъектаДО = &ИдентификаторОбъектаДО");
	Запрос.УстановитьПараметр("Объект", ОбъектИС);
	Запрос.УстановитьПараметр("ИдентификаторОбъектаДО", ID);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипОбъектаДО = Тип Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Настройки.ИспользоватьИнтеграциюДО3 Тогда
			МодульИнтеграцияС1СДокументооборот3 = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот3");
			Если МодульИнтеграцияС1СДокументооборот3.ЭтоДокументДО3(Выборка.ТипОбъектаДО)
					И МодульИнтеграцияС1СДокументооборот3.ЭтоДокументДО3(Тип) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецЕсли