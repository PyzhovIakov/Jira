#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Записывает в регистр данные отправленного письма
//
// Параметры:
//  Письмо								 - ДокументСсылка.ЭлектронноеПисьмоИсходящее	 - Письмо.
//  ИдентификаторСообщения				 - Строка	 - Идентификатор сообщения.
//  ИдентификаторСообщенияОтправкаIMAP	 - Строка	 - Идентификатор сообщения отправка IMAP.
//  ДатаОтправления						 - Дата	 - Дата отправления.
//
Процедура ЗарегистрироватьДанные(Письмо, ИдентификаторСообщения,
			ИдентификаторСообщенияОтправкаIMAP, ДатаОтправления) Экспорт
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Письмо = Письмо;
	МенеджерЗаписи.УчетнаяЗапись = Письмо.УчетнаяЗапись;
	МенеджерЗаписи.ИдентификаторСообщения = ИдентификаторСообщения;
	МенеджерЗаписи.ИдентификаторСообщенияОтправкаIMAP = ИдентификаторСообщенияОтправкаIMAP;
	МенеджерЗаписи.ДатаОтправления = ДатаОтправления;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Переносит временные данные в письма и чистит регистр
//
Процедура ПеренестиДанныеВПисьма() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ВременныеДанныеОтправленныхПисем.Письмо КАК Письмо,
	                      |	CRM_ВременныеДанныеОтправленныхПисем.ИдентификаторСообщенияОтправкаIMAP КАК ИдентификаторСообщенияОтправкаIMAP,
	                      |	CRM_ВременныеДанныеОтправленныхПисем.ИдентификаторСообщения КАК ИдентификаторСообщения,
	                      |	CRM_ВременныеДанныеОтправленныхПисем.ДатаОтправления КАК ДатаОтправления
	                      |ИЗ
	                      |	РегистрСведений.CRM_ВременныеДанныеОтправленныхПисем КАК CRM_ВременныеДанныеОтправленныхПисем");
	Выборка = Запрос.Выполнить().Выбрать();

	ПисьмаДляОпределенияПапок = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЭлектронноеПисьмоИсходящее");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Письмо);
			Блокировка.Заблокировать();
		
			ПисьмоОбъект = Выборка.Письмо.ПолучитьОбъект();
			Если ПисьмоОбъект.УдалятьПослеОтправки Тогда
				ПисьмоОбъект.Удалить();
			Иначе
				ПисьмоОбъект.ИдентификаторСообщения             = Выборка.ИдентификаторСообщения;
				ПисьмоОбъект.ИдентификаторСообщенияОтправкаIMAP = Выборка.ИдентификаторСообщенияОтправкаIMAP;
				
				ПисьмоОбъект.СтатусПисьма                       = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
				ПисьмоОбъект.Размер                             =
					Взаимодействия.ОценитьРазмерИсходящегоЭлектронногоПисьма(ПисьмоОбъект.Ссылка);
				ПисьмоОбъект.ДатаОтправления                    = Выборка.ДатаОтправления;
				ПисьмоОбъект.ДополнительныеСвойства.Вставить("НеЗаписыватьКонтакты", Истина);
				ПисьмоОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			МенеджерЗаписи = СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Письмо = Выборка.Письмо;
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.Удалить();
			
			ПисьмаДляОпределенияПапок.Добавить(Выборка.Письмо);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(CRM_УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, Выборка.Письмо.Метаданные(),
				ПисьмоОбъект, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
		
	КонецЦикла;

	Если ПисьмаДляОпределенияПапок.Количество() > 0 Тогда
		CRM_Взаимодействия.УстановитьПапкиДляМассиваПисем(ПисьмаДляОпределенияПапок);
	КонецЕсли;
	
КонецПроцедуры

// Переносит временные данные отправки в письмо
//
// Параметры:
//  Письмо	 - ДокументСсылка.ЭлектронноеПисьмоИсходящее	 - Письмо.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ПисьмоОтправленоРанее(Письмо) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ВременныеДанныеОтправленныхПисем.Письмо КАК Письмо,
	                      |	CRM_ВременныеДанныеОтправленныхПисем.ИдентификаторСообщенияОтправкаIMAP КАК ИдентификаторСообщенияОтправкаIMAP,
	                      |	CRM_ВременныеДанныеОтправленныхПисем.ИдентификаторСообщения КАК ИдентификаторСообщения,
	                      |	CRM_ВременныеДанныеОтправленныхПисем.ДатаОтправления КАК ДатаОтправления
	                      |ИЗ
	                      |	РегистрСведений.CRM_ВременныеДанныеОтправленныхПисем КАК CRM_ВременныеДанныеОтправленныхПисем
	                      |ГДЕ
	                      |	CRM_ВременныеДанныеОтправленныхПисем.Письмо = &Письмо");
	Запрос.УстановитьПараметр("Письмо", Письмо);
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		ПисьмаДляОпределенияПапок = Новый Массив;
		ПисьмаДляОпределенияПапок.Добавить(Выборка.Письмо);
		НачатьТранзакцию();
		Попытка
			ПисьмоОбъект = Выборка.Письмо.ПолучитьОбъект();
			Если ПисьмоОбъект.УдалятьПослеОтправки Тогда
				ПисьмоОбъект.Удалить();
			Иначе
				ПисьмоОбъект.ИдентификаторСообщения             = Выборка.ИдентификаторСообщения;
				ПисьмоОбъект.ИдентификаторСообщенияОтправкаIMAP = Выборка.ИдентификаторСообщенияОтправкаIMAP;
				
				ПисьмоОбъект.СтатусПисьма                       = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
				ПисьмоОбъект.Размер                             =
					Взаимодействия.ОценитьРазмерИсходящегоЭлектронногоПисьма(ПисьмоОбъект.Ссылка);
				ПисьмоОбъект.ДатаОтправления                    = Выборка.ДатаОтправления;
				ПисьмоОбъект.ДополнительныеСвойства.Вставить("НеЗаписыватьКонтакты", Истина);
				ПисьмоОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			МенеджерЗаписи = СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Письмо = Выборка.Письмо;
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.Удалить();

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(CRM_УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, Выборка.Письмо.Метаданные(),
				ПисьмоОбъект, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
		CRM_Взаимодействия.УстановитьПапкиДляМассиваПисем(ПисьмаДляОпределенияПапок);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецЕсли
