///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Производит поиск идентификатора заказа на оплату или возврата,
// если идентификатор еще не был создан, создает новый.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ отражающий оплату
//    в информационной базе;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//   см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ИдентификаторОплаты - Строка - идентификатор оплаты в Системе быстрых платежей. Передается
//    если известен на момент проведения операции;
//  КонтролироватьСтатусОперации - Булево - признак контроля потребности в генерации нового
//    идентификатора оплаты;
//  ОтложенноеПолучениеСтатуса - Булево - признак загрузки статуса оплаты регламентным заданием.
//
// Возвращаемое значение:
//  Строка - идентификатор оплаты (внешний идентификатор 1С по отношению к Системе быстрых платежей).
//
Функция НовыйИдентификаторОперации(
		ДокументОперации,
		ПараметрыНастройкиПодключения,
		ИдентификаторОплаты = "",
		КонтролироватьСтатусОперации = Истина,
		ОтложенноеПолучениеСтатуса = Ложь) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИдентификаторыОперацийСБПb2b");
		ЭлементБлокировки.УстановитьЗначение("ДокументОперации", ДокументОперации);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запись = РегистрыСведений.ИдентификаторыОперацийСБПb2b.СоздатьМенеджерЗаписи();
		Запись.ДокументОперации = ДокументОперации;
		Запись.Прочитать();
		
		ТребуетсяГенерация = СистемаБыстрыхПлатежейСлужебный.ТребуетсяГенерацияНовогоИдентификатора(
			Запись.Идентификатор,
			Запись.СтатусОперации);
		
		Если Не КонтролироватьСтатусОперации Или ТребуетсяГенерация Тогда
			Запись.Идентификатор = Новый УникальныйИдентификатор;
			Запись.ДокументОперации = ДокументОперации;
			Запись.ИдентификаторМерчанта = ПараметрыНастройкиПодключения.ИдентификаторМерчанта;
			Запись.НастройкаПодключения = ПараметрыНастройкиПодключения.НастройкаПодключения;
			Запись.ИдентификаторУчастника = ПараметрыНастройкиПодключения.ИдентификаторУчастника;
			Запись.ИдентификаторОплаты = ИдентификаторОплаты;
			Запись.ИдентификаторОперации = "";
			Запись.СтатусОперации = "";
			Запись.ПлатежнаяСсылка = "";
			Запись.ОтложенноеПолучениеСтатуса = Ложь;
			Запись.КоличествоПопыток = 0;
			Запись.ДатаОперации = Неопределено;
			Запись.СуммаОперации = 0;
			Запись.ПериодИспользования = Неопределено;
			Запись.ДатаЗапросаСтатуса = Неопределено;
			Запись.ОтложенноеПолучениеСтатуса = ОтложенноеПолучениеСтатуса;
			Запись.Заполнить(Неопределено);
			Запись.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При формировании идентификатора оплаты возникли ошибки:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ТекстИсключения,
			Истина);
		
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	Возврат Запись.Идентификатор;
	
КонецФункции

// Получает данные для определения статуса выполнения операции в Системе быстрых платежей.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ отражающий оплату
//    в информационной базе;
//  ПериодИспользования - Дата - срок действия QR-кода.
//
// Возвращаемое значение:
//  Структура - идентификаторы оплаты в Системе быстрых платежей.
//
Функция ПараметрыОпределенияСтатусаОперации(ДокументОперации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыОперацийСБПb2b.ИдентификаторОплаты КАК ИдентификаторОплаты,
		|	ИдентификаторыОперацийСБПb2b.ИдентификаторОперации КАК ИдентификаторОперации,
		|	ИдентификаторыОперацийСБПb2b.ДатаЗапросаСтатуса КАК ДатаЗапросаСтатуса,
		|	ИдентификаторыОперацийСБПb2b.СтатусОперации КАК СтатусОперации,
		|	ИдентификаторыОперацийСБПb2b.ПериодИспользования КАК ПериодИспользования,
		|	ИдентификаторыОперацийСБПb2b.ДатаОперации КАК ДатаОперации,
		|	ИдентификаторыОперацийСБПb2b.СуммаОперации КАК СуммаОперации,
		|	ИдентификаторыОперацийСБПb2b.ИдентификаторПлатежа КАК ИдентификаторПлатежа
		|ИЗ
		|	РегистрСведений.ИдентификаторыОперацийСБПb2b КАК ИдентификаторыОперацийСБПb2b
		|ГДЕ
		|	ИдентификаторыОперацийСБПb2b.ДокументОперации = &ДокументОперации";
	
	Запрос.УстановитьПараметр("ДокументОперации", ДокументОперации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("ИдентификаторОплаты", ВыборкаДетальныеЗаписи.ИдентификаторОплаты);
		Результат.Вставить("ИдентификаторОперации", ВыборкаДетальныеЗаписи.ИдентификаторОперации);
		Результат.Вставить("ДатаЗапросаСтатуса", ВыборкаДетальныеЗаписи.ДатаЗапросаСтатуса);
		Результат.Вставить("СтатусОперации", ВыборкаДетальныеЗаписи.СтатусОперации);
		Результат.Вставить("ПериодИспользования", ВыборкаДетальныеЗаписи.ПериодИспользования);
		Результат.Вставить("ДатаОперации", ВыборкаДетальныеЗаписи.ДатаОперации);
		Результат.Вставить("СуммаОперации", ВыборкаДетальныеЗаписи.СуммаОперации);
		Результат.Вставить("ИдентификаторПлатежа", ВыборкаДетальныеЗаписи.ИдентификаторПлатежа);
		
		// Если не было успешного получения статуса, необходимо
		// запрашивать наличие callback.
		Если Не ЗначениеЗаполнено(Результат.ДатаЗапросаСтатуса) Тогда
			Результат.ДатаЗапросаСтатуса = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

// Выполняет поиск и информации об оплате в регистре и устанавливает новое значение
// идентификатора Системы быстрых платежей и периода действия.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ отражающий оплату
//    в информационной базе;
//  ИдентификаторОплаты - Строка - идентификатор оплаты в Системе быстрых платежей;
//  ПериодИспользования - Дата - срок действия QR-кода;
//  ПлатежнаяСсылка - Строка - идентификатор, по которому выполняется оплата;
//  СтатусОперации - Строка - текущий статус операции;
//  ЗаказНаОплату - Структура - см. МодульПереводыСБПb2bСервис.ОписаниеЗаказаНаОплату.
//
Процедура ЗаписатьДанныеОплатыСБП(
		ДокументОперации,
		ИдентификаторОплаты,
		ПериодИспользования,
		ПлатежнаяСсылка,
		СтатусОперации,
		ЗаказНаОплату) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИдентификаторыОперацийСБПb2b");
		ЭлементБлокировки.УстановитьЗначение("ДокументОперации", ДокументОперации);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запись = РегистрыСведений.ИдентификаторыОперацийСБПb2b.СоздатьМенеджерЗаписи();
		Запись.ДокументОперации = ДокументОперации;
		Запись.Прочитать();
		
		Если Не ЗначениеЗаполнено(Запись.ДокументОперации) Тогда
			ВызватьИсключение НСтр("ru = 'Информация о документе оплаты не обнаружена, не возможно записать идентификатор СБП.'");
		КонецЕсли;
		
		Запись.ИдентификаторОплаты = СтрЗаменить(ИдентификаторОплаты, Символы.НПП, "");
		Запись.СтатусОперации = СтатусОперации;
		Запись.ПлатежнаяСсылка = ПлатежнаяСсылка;
		Запись.НазначениеПлатежа = ЗаказНаОплату.НазначениеПлатежа;
		Запись.РасчетныйСчет = ЗаказНаОплату.РасчетныйСчет;
		Запись.СуммаОперации = ЗаказНаОплату.СуммаОплаты;
		Запись.СуммаНДС = ЗаказНаОплату.СуммаНДС;
		Запись.ОблагаетсяНДС = ЗаказНаОплату.ОблагаетсяНДС;
		Запись.ИдентификаторПлатежа = ЗаказНаОплату.ИдентификаторПлатежа;
		
		// Период использования должен фиксироваться только при первом
		// запросе QR-кода.
		Если Не ЗначениеЗаполнено(Запись.ПериодИспользования) Тогда
			Запись.ПериодИспользования = ПериодИспользования;
		КонецЕсли;
		Запись.Заполнить(Неопределено);
		Запись.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При записи идентификатора СБП возникли ошибки:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ТекстИсключения,
			Истина);
		
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
КонецПроцедуры

// Выполняет поиск и информации об оплате в регистре и устанавливает новое значение
// идентификатора операции, статуса операции, даты операции и даты определения статуса.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ отражающий оплату
//    в информационной базе;
//  ИдентификаторОперации - Строка - идентификатор оплаты в Системе быстрых платежей;
//  ДатаОперации - Дата - дата операции в Системе быстрых платежей;
//  СтатусОперации - Строка - статус операции в Системе быстрых платежей;
//  ДатаЗапросаСтатуса - Дата - дата последней операции получения статуса.
//
Процедура ЗаписатьСтатусОперации(
		ДокументОперации,
		ИдентификаторОперации,
		ДатаОперации,
		СтатусОперации,
		СуммаОперации = Неопределено,
		ДатаЗапросаСтатуса = Неопределено) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИдентификаторыОперацийСБПb2b");
		ЭлементБлокировки.УстановитьЗначение("ДокументОперации", ДокументОперации);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запись = РегистрыСведений.ИдентификаторыОперацийСБПb2b.СоздатьМенеджерЗаписи();
		Запись.ДокументОперации = ДокументОперации;
		Запись.Прочитать();
		
		Если Не ЗначениеЗаполнено(Запись.ДокументОперации) Тогда
			ВызватьИсключение НСтр("ru = 'Информация о документе оплаты не обнаружена, невозможно записать данные.'");
		КонецЕсли;
		
		Запись.ИдентификаторОперации = ИдентификаторОперации;
		Запись.ДатаОперации = ДатаОперации;
		Если ЗначениеЗаполнено(СуммаОперации) Тогда
			Запись.СуммаОперации = СуммаОперации;
		КонецЕсли;
		Запись.СтатусОперации = СтатусОперации;
		Запись.КоличествоПопыток = Запись.КоличествоПопыток + 1;
		Если ЗначениеЗаполнено(ДатаЗапросаСтатуса) Тогда
			Запись.ДатаЗапросаСтатуса = ДатаЗапросаСтатуса;
		КонецЕсли;
		
		Если Запись.КоличествоПопыток > 400 Тогда
			Запись.ОтложенноеПолучениеСтатуса = Ложь;
		КонецЕсли;
		
		Запись.Заполнить(Неопределено);
		Запись.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При записи данных возникли ошибки:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ТекстИсключения,
			Истина);
		
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
КонецПроцедуры

// Получает исторические данные заказа на оплату по идентификатору.
//
// Параметры
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ отражающий оплату
//    в информационной базе.
//
// Возвращаемое значение:
//  Структура - данные заказа на оплату:
//    * СуммаОперации - Число - сумма операции;
//    * НазначениеПлатежа - Строка - назначение для СБП;
//    * ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - объект оплаты в информационной базе;
//    * ИдентификаторМерчанта - Строка - идентификатор торговой точки для которой была сформирован заказ;
//    * НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения;
//    * ИдентификаторУчастника - Строка - идентификатор участника СБП;
//    * РасчетныйСчет - Строка - расчетный счет получателя платежа
//
Функция ДанныеОперации(ДокументОперации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИдентификаторыОперацийСБПb2b.СуммаОперации КАК СуммаОперации,
		|	ИдентификаторыОперацийСБПb2b.ДатаОперации КАК ДатаОперации,
		|	ИдентификаторыОперацийСБПb2b.ИдентификаторОплаты КАК ИдентификаторОплаты,
		|	ИдентификаторыОперацийСБПb2b.ИдентификаторОперации КАК ИдентификаторОперации,
		|	ИдентификаторыОперацийСБПb2b.НазначениеПлатежа КАК НазначениеПлатежа,
		|	ИдентификаторыОперацийСБПb2b.ДокументОперации КАК ДокументОперации,
		|	ИдентификаторыОперацийСБПb2b.ИдентификаторМерчанта КАК ИдентификаторМерчанта,
		|	ИдентификаторыОперацийСБПb2b.НастройкаПодключения КАК НастройкаПодключения,
		|	ВЫБОР
		|		КОГДА ИдентификаторыОперацийСБПb2b.ИдентификаторУчастника <> """"
		|			ТОГДА ИдентификаторыОперацийСБПb2b.ИдентификаторУчастника
		|		ИНАЧЕ ИдентификаторыОперацийСБПb2b.НастройкаПодключения.ИдентификаторУчастника
		|	КОНЕЦ КАК ИдентификаторУчастника,
		|	ИдентификаторыОперацийСБПb2b.РасчетныйСчет КАК РасчетныйСчет,
		|	ИдентификаторыОперацийСБПb2b.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ИдентификаторыОперацийСБПb2b.СуммаНДС КАК СуммаНДС,
		|	ИдентификаторыОперацийСБПb2b.СтатусОперации КАК СтатусОперации,
		|	ИдентификаторыОперацийСБПb2b.ОблагаетсяНДС КАК ОблагаетсяНДС
		|ИЗ
		|	РегистрСведений.ИдентификаторыОперацийСБПb2b КАК ИдентификаторыОперацийСБПb2b
		|ГДЕ
		|	ИдентификаторыОперацийСБПb2b.ДокументОперации = &ДокументОперации";
	
	Запрос.УстановитьПараметр("ДокументОперации", ДокументОперации);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = Новый Структура;
		Результат.Вставить("СуммаОперации", ВыборкаДетальныеЗаписи.СуммаОперации);
		Результат.Вставить("ДатаОперации", ВыборкаДетальныеЗаписи.ДатаОперации);
		Результат.Вставить("НазначениеПлатежа", ВыборкаДетальныеЗаписи.НазначениеПлатежа);
		Результат.Вставить("ДокументОперации", ВыборкаДетальныеЗаписи.ДокументОперации);
		Результат.Вставить("ИдентификаторМерчанта", ВыборкаДетальныеЗаписи.ИдентификаторМерчанта);
		Результат.Вставить("НастройкаПодключения", ВыборкаДетальныеЗаписи.НастройкаПодключения);
		Результат.Вставить("ИдентификаторУчастника", ВыборкаДетальныеЗаписи.ИдентификаторУчастника);
		Результат.Вставить("РасчетныйСчет", ВыборкаДетальныеЗаписи.РасчетныйСчет);
		Результат.Вставить("ИдентификаторПлатежа", ВыборкаДетальныеЗаписи.ИдентификаторПлатежа);
		Результат.Вставить("СуммаНДС", ВыборкаДетальныеЗаписи.СуммаНДС);
		Результат.Вставить("ОблагаетсяНДС", ВыборкаДетальныеЗаписи.ОблагаетсяНДС);
		Результат.Вставить("СтатусОперации", ВыборкаДетальныеЗаписи.СтатусОперации);
		Результат.Вставить("ИдентификаторОплаты", ВыборкаДетальныеЗаписи.ИдентификаторОплаты);
		Результат.Вставить("ИдентификаторОперации", ВыборкаДетальныеЗаписи.ИдентификаторОперации);
		Результат.Вставить("Оплата", Истина);
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

// Получает данные отложенных операций для дальнейшей обработки статусов.
//
// Возвращаемое значение:
//  Структура - отложенные операции для обработки.
//
Функция ОтложенныеОперации() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОтложенныеОперации", Новый Соответствие);
	Результат.Вставить("СменаУчастника", Новый Соответствие);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИдентификаторыОперацийСБПb2b.ДокументОперации КАК ДокументОперации,
		|	ИдентификаторыОперацийСБПb2b.ИдентификаторОплаты КАК ИдентификаторОплаты,
		|	ИдентификаторыОперацийСБПb2b.ИдентификаторОперации КАК ИдентификаторОперации,
		|	ИдентификаторыОперацийСБПb2b.ДатаЗапросаСтатуса КАК ДатаЗапросаСтатуса,
		|	ИдентификаторыОперацийСБПb2b.НастройкаПодключения КАК НастройкаПодключения,
		|	ИдентификаторыОперацийСБПb2b.ИдентификаторУчастника <> ИдентификаторыОперацийСБПb2b.НастройкаПодключения.ИдентификаторУчастника КАК СменаУчастника,
		|	ИдентификаторыОперацийСБПb2b.ПериодИспользования КАК ПериодИспользования,
		|	ИдентификаторыОперацийСБПb2b.СтатусОперации КАК СтатусОперации,
		|	ИдентификаторыОперацийСБПb2b.КоличествоПопыток КАК КоличествоПопыток,
		|	ИдентификаторыОперацийСБПb2b.ДатаОперации КАК ДатаОперации,
		|	ИдентификаторыОперацийСБПb2b.СуммаОперации КАК СуммаОперации,
		|	ВЫБОР
		|		КОГДА ИдентификаторыОперацийСБПb2b.ДокументОперации ССЫЛКА Документ.ПлатежнаяСсылкаСБП
		|			ТОГДА ВЫРАЗИТЬ(ИдентификаторыОперацийСБПb2b.ДокументОперации КАК Документ.ПлатежнаяСсылкаСБП).ОснованиеПлатежа
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДокументОснование,
		|	ИдентификаторыОперацийСБПb2b.РасчетныйСчет КАК РасчетныйСчет,
		|	ИдентификаторыОперацийСБПb2b.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ИдентификаторыОперацийСБПb2b.КоличествоПопыток КАК КоличествоПопыток1
		|ИЗ
		|	РегистрСведений.ИдентификаторыОперацийСБПb2b КАК ИдентификаторыОперацийСБПb2b
		|ГДЕ
		|	ИдентификаторыОперацийСБПb2b.ОтложенноеПолучениеСтатуса
		|	И ИдентификаторыОперацийСБПb2b.НастройкаПодключения.Используется
		|	И ИдентификаторыОперацийСБПb2b.СтатусОперации <> """"
		|ИТОГИ ПО
		|	НастройкаПодключения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНастройкаПодключения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНастройкаПодключения.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаНастройкаПодключения.НастройкаПодключения) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = ВыборкаНастройкаПодключения.Выбрать();
		
		ОтложенныеОперации = Новый Массив;
		СменаУчастника = Новый Массив;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Операция = Новый Структура;
			Операция.Вставить("ДокументОперации", ВыборкаДетальныеЗаписи.ДокументОперации);
			Операция.Вставить("ИдентификаторОплаты", ВыборкаДетальныеЗаписи.ИдентификаторОплаты);
			Операция.Вставить("ИдентификаторОперации", ВыборкаДетальныеЗаписи.ИдентификаторОперации);
			Операция.Вставить("ДатаЗапросаСтатуса", ВыборкаДетальныеЗаписи.ДатаЗапросаСтатуса);
			Операция.Вставить("НастройкаПодключения", ВыборкаДетальныеЗаписи.НастройкаПодключения);
			Операция.Вставить("ПериодИспользования", ВыборкаДетальныеЗаписи.ПериодИспользования);
			Операция.Вставить("СтатусОперации", ВыборкаДетальныеЗаписи.СтатусОперации);
			Операция.Вставить("КоличествоПопыток", ВыборкаДетальныеЗаписи.КоличествоПопыток);
			Операция.Вставить("РасчетныйСчет", ВыборкаДетальныеЗаписи.РасчетныйСчет);
			Операция.Вставить("ДокументОснование", ВыборкаДетальныеЗаписи.ДокументОснование);
			Операция.Вставить("ИдентификаторПлатежа", ВыборкаДетальныеЗаписи.ИдентификаторПлатежа);
			Операция.Вставить("КоличествоПопыток", ВыборкаДетальныеЗаписи.КоличествоПопыток);
			
			ПараметрыОперации = ПереводыСБПb2bСлужебный.НовыйОписаниеПараметровОперации();
			ЗаполнитьЗначенияСвойств(
				ПараметрыОперации,
				ВыборкаДетальныеЗаписи);
			ПараметрыОперации.ИдентификаторОперации = ВыборкаДетальныеЗаписи.ИдентификаторОперации;
			Операция.Вставить("ПараметрыОперации", ПараметрыОперации);
			
			Если ВыборкаДетальныеЗаписи.СменаУчастника Тогда
				СменаУчастника.Добавить(Операция);
			Иначе
				ОтложенныеОперации.Добавить(Операция);
			КонецЕсли;
		КонецЦикла;
		
		Если ОтложенныеОперации.Количество() <> 0 Тогда
			Результат.ОтложенныеОперации.Вставить(
				ВыборкаНастройкаПодключения.НастройкаПодключения,
				ОтложенныеОперации);
		КонецЕсли;
		
		Если СменаУчастника.Количество() <> 0 Тогда
			Результат.СменаУчастника.Вставить(
				ВыборкаНастройкаПодключения.НастройкаПодключения,
				СменаУчастника);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует структуру данных для формы платежной ссылки в Системе быстрых платежей.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ отражающий операцию
//    в информационной базе;
//
// Возвращаемое значение:
//  Структура - данные для формы платежной ссылки в Системе быстрых платежей
//
Функция ДанныеПлатежнойСсылки(ДокументОперации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыОперацийСБПb2b.Идентификатор КАК Идентификатор,
		|	ИдентификаторыОперацийСБПb2b.ПлатежнаяСсылка КАК ПлатежнаяСсылка,
		|	ИдентификаторыОперацийСБПb2b.СтатусОперации КАК СтатусОперации,
		|	ИдентификаторыОперацийСБПb2b.ДатаОперации КАК ДатаОперации,
		|	ИдентификаторыОперацийСБПb2b.СуммаОперации КАК СуммаОперации,
		|	ИдентификаторыОперацийСБПb2b.НазначениеПлатежа КАК НазначениеПлатежа,
		|	ИдентификаторыОперацийСБПb2b.НастройкаПодключения КАК НастройкаПодключения,
		|	ИдентификаторыОперацийСБПb2b.ИдентификаторМерчанта КАК ИдентификаторМерчанта,
		|	ВЫБОР
		|		КОГДА ИдентификаторыОперацийСБПb2b.ДокументОперации ССЫЛКА Документ.ПлатежнаяСсылкаСБП
		|			ТОГДА ВЫРАЗИТЬ(ИдентификаторыОперацийСБПb2b.ДокументОперации КАК Документ.ПлатежнаяСсылкаСБП).ОснованиеПлатежа
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДокументОснование
		|ИЗ
		|	РегистрСведений.ИдентификаторыОперацийСБПb2b КАК ИдентификаторыОперацийСБПb2b
		|ГДЕ
		|	ИдентификаторыОперацийСБПb2b.ДокументОперации = &ДокументОперации";
	
	Запрос.УстановитьПараметр("ДокументОперации", ДокументОперации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("Идентификатор", ВыборкаДетальныеЗаписи.Идентификатор);
		Результат.Вставить("СтатусОперации", ВыборкаДетальныеЗаписи.СтатусОперации);
		Результат.Вставить("ПлатежнаяСсылка", ВыборкаДетальныеЗаписи.ПлатежнаяСсылка);
		Результат.Вставить("ДатаОперации", ВыборкаДетальныеЗаписи.ДатаОперации);
		Результат.Вставить("СуммаОперации", ВыборкаДетальныеЗаписи.СуммаОперации);
		Результат.Вставить("НазначениеПлатежа", ВыборкаДетальныеЗаписи.НазначениеПлатежа);
		Результат.Вставить("НастройкаПодключения", ВыборкаДетальныеЗаписи.НастройкаПодключения);
		Результат.Вставить("ИдентификаторМерчанта", ВыборкаДетальныеЗаписи.ИдентификаторМерчанта);
		Результат.Вставить("ДокументОснование", ВыборкаДетальныеЗаписи.ДокументОснование);
		
		Возврат Результат;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// См. СистемаБыстрыхПлатежейСлужебный.ИнформацияДляТехническойПоддержки.
//
Функция ИнформацияДляТехническойПоддержки(ДокументОперации) Экспорт
	
	ТекстСообщения = НСтр("ru = 'Данные операции b2b:'")
		+ Символы.ПС
		+ Символы.ПС;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыОперацийСБПb2b.Идентификатор КАК Идентификатор,
		|	ИдентификаторыОперацийСБПb2b.ИдентификаторОплаты КАК ИдентификаторОплаты,
		|	ИдентификаторыОперацийСБПb2b.ИдентификаторОперации КАК ИдентификаторОперации,
		|	ИдентификаторыОперацийСБПb2b.ДатаОперации КАК ДатаОперации,
		|	ИдентификаторыОперацийСБПb2b.ДатаЗапросаСтатуса КАК ДатаЗапросаСтатуса,
		|	ИдентификаторыОперацийСБПb2b.СтатусОперации КАК СтатусОперации,
		|	ИдентификаторыОперацийСБПb2b.ПлатежнаяСсылка КАК ПлатежнаяСсылка
		|ИЗ
		|	РегистрСведений.ИдентификаторыОперацийСБПb2b КАК ИдентификаторыОперацийСБПb2b
		|ГДЕ
		|	ИдентификаторыОперацийСБПb2b.ДокументОперации = &ДокументОперации";
	
	Запрос.УстановитьПараметр("ДокументОперации", ДокументОперации);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ТекстСообщения + НСтр("ru = 'Информация о выполнении операции c2b не обнаружена в базе данных.'")
			+ Символы.ПС
			+ Символы.ПС;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	ТекстСообщения = ТекстСообщения
		+ НСтр("ru = 'Идентификатор:'")
		+ СистемаБыстрыхПлатежейСлужебный.ОбработатьЗначениеДляТехническойПоддержки(
			ВыборкаДетальныеЗаписи.Идентификатор)
		+ Символы.ПС;
	ТекстСообщения = ТекстСообщения
		+ НСтр("ru = 'Идентификатор оплаты:'")
		+ СистемаБыстрыхПлатежейСлужебный.ОбработатьЗначениеДляТехническойПоддержки(
			ВыборкаДетальныеЗаписи.ИдентификаторОплаты)
		+ Символы.ПС; 
	ТекстСообщения = ТекстСообщения
		+ НСтр("ru = 'Идентификатор операции:'")
		+ СистемаБыстрыхПлатежейСлужебный.ОбработатьЗначениеДляТехническойПоддержки(
			ВыборкаДетальныеЗаписи.ИдентификаторОперации)
		+ Символы.ПС;
	ТекстСообщения = ТекстСообщения
		+ НСтр("ru = 'Платежная ссылка:'")
		+ СистемаБыстрыхПлатежейСлужебный.ОбработатьЗначениеДляТехническойПоддержки(
			ВыборкаДетальныеЗаписи.ПлатежнаяСсылка)
		+ Символы.ПС;
	ТекстСообщения = ТекстСообщения
		+ НСтр("ru = 'Дата операции:'")
		+ СистемаБыстрыхПлатежейСлужебный.ОбработатьЗначениеДляТехническойПоддержки(
			ВыборкаДетальныеЗаписи.ДатаОперации)
		+ Символы.ПС;
	ТекстСообщения = ТекстСообщения
		+ НСтр("ru = 'Дата запроса статуса:'")
		+ СистемаБыстрыхПлатежейСлужебный.ОбработатьЗначениеДляТехническойПоддержки(
			ВыборкаДетальныеЗаписи.ДатаЗапросаСтатуса)
		+ Символы.ПС;
	ТекстСообщения = ТекстСообщения
		+ НСтр("ru = 'Статус операции:'")
		+ СистемаБыстрыхПлатежейСлужебный.ОбработатьЗначениеДляТехническойПоддержки(
			ВыборкаДетальныеЗаписи.СтатусОперации)
		+ Символы.ПС
		+ Символы.ПС;
	
	Возврат ТекстСообщения;
	
КонецФункции

#КонецОбласти

#КонецЕсли
