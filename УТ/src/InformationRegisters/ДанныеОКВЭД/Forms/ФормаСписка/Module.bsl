///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РежимВыбора  = Параметры.РежимВыбора;
	Разрешенные  = Параметры.Разрешенные;
	СтрокаПоиска = Параметры.СтрокаПоиска;
	ТекущийКод   = Параметры.ТекущийКод;
	
	Элементы.Выбрать.Видимость = РежимВыбора;
	
	Если РежимВыбора Тогда
		Элементы.Дерево.МножественныйВыбор = Параметры.МножественныйВыбор;
		Элементы.Дерево.РежимВыделения =
			?(Параметры.МножественныйВыбор,
				РежимВыделенияТаблицы.Множественный,
				РежимВыделенияТаблицы.Одиночный);
	КонецЕсли;
	
	ТолькоПросмотр = Истина;
	
	ОбновитьДерево();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		СвернутьРазвернутьВсе("Развернуть");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекущийКод = "";
	Иначе
		ТекущийКод = ТекущиеДанные.Код;
	КонецЕсли;
	
	ОбновитьДерево();
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		СвернутьРазвернутьВсе("Развернуть");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДерево

&НаКлиенте
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если РежимВыбора Тогда
		ПриВыборе();
		Возврат;
	КонецЕсли;
	
	Ключ = КлючЗаписи(Элемент.ТекущиеДанные.Код);
	ПараметрыФормы = Новый Структура("Ключ, ТолькоПросмотр", Ключ, Истина);
	ОткрытьФорму("РегистрСведений.ДанныеОКВЭД.ФормаЗаписи", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выбрать(Команда)
	
	ПриВыборе();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	СвернутьРазвернутьВсе("Свернуть");
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	СвернутьРазвернутьВсе("Развернуть");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементРезультатПоиска = УсловноеОформление.Элементы.Добавить();
	ЭлементРезультатПоиска.Использование = Истина;
	
	ГруппаИ               = ЭлементРезультатПоиска.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаИ.Использование = Истина;
	
	НовыйОтбор                = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дерево.СодержитТекстПоиска");
	НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение = Истина;
	
	НовыйОтбор                = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СтрокаПоиска");
	НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	НовоеПоле               = ЭлементРезультатПоиска.Поля.Элементы.Добавить();
	НовоеПоле.Использование = Истина;
	НовоеПоле.Поле          = Новый ПолеКомпоновкиДанных("Дерево");
	
	ЭлементРезультатПоиска.Оформление.УстановитьЗначениеПараметра(
		"Шрифт",
		ШрифтыСтиля.ВажнаяНадписьШрифт);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДерево()
	
	СКД = РегистрыСведений.ДанныеОКВЭД.ПолучитьМакет("Иерархия");
	
	Настройки = СКД.НастройкиПоУмолчанию;
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		
		Параметр =
			Настройки.ПараметрыДанных.НайтиЗначениеПараметра(
				Новый ПараметрКомпоновкиДанных("СтрокаПоиска"));
		
		Если Параметр <> Неопределено Тогда
			Параметр.Значение      = "%" + СтрокаПоиска + "%";
			Параметр.Использование = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СКД, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МАкет);
	
	ДеревоИсточник = Новый ДеревоЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоИсточник);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ДеревоПолучатель = РеквизитФормыВЗначение("Дерево");
	ДеревоПолучатель.Строки.Очистить();
	
	ВывестиДерево(ДеревоИсточник, ДеревоПолучатель, "");
	
	ЗначениеВРеквизитФормы(ДеревоПолучатель, "Дерево");
	
	УстановитьТекущуюСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДерево(Источник, Получатель, Знач КодРодителя)
	
	Для Каждого СтрокаИсточник Из Источник.Строки Цикл
		
		Если СтрокаИсточник.Ссылка = КодРодителя Тогда
			ЗаполнитьЗначенияСвойств(
				Получатель,
				СтрокаИсточник);
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокаИсточник.СодержитТекстПоиска Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПолучатель = Получатель.Строки.Добавить();
		
		Если СтрокаИсточник.Строки.Количество() > 0 Тогда
			ВывестиДерево(
				СтрокаИсточник,
				СтрокаПолучатель,
				СтрокаИсточник.Ссылка);
		Иначе
			ЗаполнитьЗначенияСвойств(
				СтрокаПолучатель,
				СтрокаИсточник);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтроку()
	
	Если Не ЗначениеЗаполнено(ТекущийКод) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Дерево.ТекущаяСтрока = ИдентификаторТекущегоКода(Дерево.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервере
Функция ИдентификаторТекущегоКода(ЭлементыДерева)
	
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		Если СтрокаДерева.Код = ТекущийКод Тогда
			Возврат СтрокаДерева.ПолучитьИдентификатор();
		КонецЕсли;
		
		ПоискВПодстроках = ИдентификаторТекущегоКода(СтрокаДерева.ПолучитьЭлементы());
		Если ПоискВПодстроках >= 0 Тогда
			Возврат ПоискВПодстроках;
		КонецЕсли;
	КонецЦикла;
	
	Возврат -1;
	
КонецФункции

&НаСервереБезКонтекста
Функция КлючЗаписи(Знач Код)
	
	Ключ = Новый Структура("Код", Код);
	Возврат РегистрыСведений.ДанныеОКВЭД.СоздатьКлючЗаписи(Ключ);
	
КонецФункции

&НаКлиенте
Процедура ПриВыборе()
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВывестиСписокНедоступных = Ложь;
	
	Если Элементы.Дерево.МножественныйВыбор
		И Элементы.Дерево.ВыделенныеСтроки.Количество() > 1 Тогда
		ДанныеВыбора = ПриВыбореМножественный();
		ВывестиСписокНедоступных = Истина;
	Иначе
		ДанныеВыбора = ПриВыбореОдиночный();
	КонецЕсли;
	
	Если ДанныеВыбора.ЕстьНедоступные Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выбрано недопустимое значение.'"));
		
		ОчиститьСообщения();
		Если ВывестиСписокНедоступных Тогда
			Если ДанныеВыбора.НедоступныеДляВыбора.Количество() = 1 Тогда
				ТекстШаблона = НСтр("ru = 'Код %1 недоступен для выбора.'");
			Иначе
				ТекстШаблона = НСтр("ru = 'Коды %1 недоступны для выбора.'");
			КонецЕсли;
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстШаблона,
					СтрСоединить(ДанныеВыбора.НедоступныеДляВыбора, ", ")));
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	РезультатВыбора =
		Новый Структура(
			"ВыбранныеЗначения",
			ДанныеВыбора.ВыбранныеЗначения);
	
	Закрыть(РезультатВыбора);
	
КонецПроцедуры

&НаКлиенте
Функция ПриВыбореОдиночный()
	
	ДанныеВыбора = НовыйДанныеВыбора(Разрешенные);
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	
	Если Разрешенные И Не КлассификаторОКВЭДСлужебныйКлиентСервер.КодРазрешенДляВыбора(ТекущиеДанные.Код) Тогда
		ДанныеВыбора.НедоступныеДляВыбора.Добавить(ТекущиеДанные.Код);
		ДанныеВыбора.ЕстьНедоступные = Истина;
		Возврат ДанныеВыбора;
	КонецЕсли;
	
	ДобавитьЗначениеВДанныеВыбора(
		ДанныеВыбора,
		ТекущиеДанные);
		
	Возврат ДанныеВыбора;
	
КонецФункции

&НаКлиенте
Функция ПриВыбореМножественный()
	
	ВыбранныеКоды = Новый Массив;
	
	Для Каждого Индекс Из Элементы.Дерево.ВыделенныеСтроки Цикл
		Значение = Дерево.НайтиПоИдентификатору(Индекс);
		Если Значение <> Неопределено Тогда
			ВыбранныеКоды.Добавить(Значение.Код);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеВыбораПоКодам(ВыбранныеКоды, Разрешенные);
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовыйДанныеВыбора(Разрешенные)
	
	ДанныеВыбора = Новый Структура;
	
	ДанныеВыбора.Вставить("ВыбранныеЗначения",    Новый Массив);
	ДанныеВыбора.Вставить("НедоступныеДляВыбора", Новый Массив);
	ДанныеВыбора.Вставить("ЕстьНедоступные",      Ложь);
	ДанныеВыбора.Вставить("Разрешенные",          Разрешенные);
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеВыбораПоКодам(Знач ВыбранныеКоды, Знач Разрешенные = Ложь)
	
	ДанныеВыбора = НовыйДанныеВыбора(Разрешенные);
	
	ДанныеРегистра = КлассификаторОКВЭД.ЗначенияПоКодам(ВыбранныеКоды);
	
	Если ДанныеВыбора.Разрешенные Тогда
		Для Каждого Выборка Из ДанныеРегистра Цикл
			
			Если Не КлассификаторОКВЭДСлужебныйКлиентСервер.КодРазрешенДляВыбора(Выборка.Код) Тогда
				ДанныеВыбора.НедоступныеДляВыбора.Добавить(Выборка.Код);
				ДанныеВыбора.ЕстьНедоступные = Истина;
			КонецЕсли;
			
			Если ДанныеВыбора.ЕстьНедоступные Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавитьЗначениеВДанныеВыбора(ДанныеВыбора, Выборка);
			
		КонецЦикла;
	Иначе
		Для Каждого Выборка Из ДанныеРегистра Цикл
			ДобавитьЗначениеВДанныеВыбора(ДанныеВыбора, Выборка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Добавляет значение в возвращаемый результат.
//
// Параметры:
//  ДанныеВыбора - Структура - результат, который будет возвращен при закрытии формы.
//  Значение - ВыборкаИзРезультатаЗапроса, Структура, ТекущиеДанные дерева - данные, которые нужно добавить в результат.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьЗначениеВДанныеВыбора(ДанныеВыбора, Значение)
	
	ДанныеРегистра = Новый Структура("Раздел, Код, Наименование");
	ЗаполнитьЗначенияСвойств(ДанныеРегистра, Значение);
	ДанныеРегистра.Вставить("Представление", ДанныеРегистра.Код + " " + ДанныеРегистра.Наименование);
	
	ДанныеВыбора.ВыбранныеЗначения.Добавить(ДанныеРегистра);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьВсе(Вариант)
	
	Если Вариант = "Свернуть" Тогда
		
		// В некоторых случаях не сворачивает ветку, если выделен дочерний элемент, поэтому выделяем самый верхний.
		ВыделитьРодителяПервогоУровня();
		
		Для Каждого Стр Из Дерево.ПолучитьЭлементы() Цикл
			Элементы.Дерево.Свернуть(Стр.ПолучитьИдентификатор());
		КонецЦикла;
		
	ИначеЕсли Вариант = "Развернуть" Тогда
		
		Для Каждого Стр Из Дерево.ПолучитьЭлементы() Цикл
			Элементы.Дерево.Развернуть(Стр.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьРодителяПервогоУровня()
	
	Если Элементы.Дерево.ТекущаяСтрока = Неопределено Тогда
		Элементы.Дерево.ТекущаяСтрока = -1;
		Возврат;
	КонецЕсли;
	
	Значение = Дерево.НайтиПоИдентификатору(Элементы.Дерево.ТекущаяСтрока);
	Если ТипЗнч(Значение) <> Тип("ДанныеФормыЭлементДерева") Тогда
		Элементы.Дерево.ТекущаяСтрока = -1;
		Возврат;
	КонецЕсли;
	
	Родитель = Значение.ПолучитьРодителя();
	Пока Не Родитель = Неопределено Цикл
		Значение = Родитель;
		Родитель = Значение.ПолучитьРодителя();
	КонецЦикла;
	
	Элементы.Дерево.ТекущаяСтрока = Значение.ПолучитьИдентификатор();
	
КонецПроцедуры

#КонецОбласти
