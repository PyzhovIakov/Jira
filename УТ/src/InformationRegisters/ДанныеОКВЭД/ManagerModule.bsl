///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Выполняет начальное заполнение пустого регистра, а так же его обновление, если загруженная версия
// классификатора меньше версии в поставляемом макете.
//
Процедура НачальноеЗаполнение() Экспорт
	
	Попытка
	
		ИдентификаторВСервисе = КлассификаторОКВЭД.ИдентификаторВСервисеКлассификаторов();
	
		ЗагруженнаяВерсия = ЗагруженнаяВерсия(ИдентификаторВСервисе); 
		
		ВерсияВМакете = КлассификаторОКВЭД.ВерсияКлассификатораВМакете();
		
		Если ЗагруженнаяВерсия >= ВерсияВМакете Тогда
			Возврат;
		КонецЕсли;
		
		Макет = ПолучитьМакет("ОКВЭД");
		РезультатЧтенияXML = ОбщегоНазначения.ПрочитатьXMLВТаблицу(Макет.ПолучитьТекст());
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(РезультатЧтенияXML.Данные);
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.КодБезТочек = СтрЗаменить(Запись.Код, ".", "");
			
			Запись.Иерархия = "";
			Иерархия = КлассификаторОКВЭД.КодВИерархии(Запись.Код);
			Если Иерархия.Количество() > 1 Тогда
				Иерархия.Удалить(0);
				Запись.Иерархия = СтрСоединить(Иерархия, ",");
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		
		РаботаСКлассификаторами.УстановитьВерсиюКлассификатора(
			ИдентификаторВСервисе,
			ВерсияВМакете);
		РаботаСКлассификаторами.УстановитьДатуОбновленияКлассификатора(
			ИдентификаторВСервисе,
			ТекущаяДатаСеанса());
	
	Исключение
		
		КлассификаторОКВЭД.ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось выполнить начальное заполнение регистра сведений Классификатор ОКВЭД:
					|%1'"),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),
			Истина,
			РегистрыСведений.ДанныеОКВЭД);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Формирует и выполняет запрос, осуществляющий выбор информации из регистра по указанным кодам.
//
// Параметры:
//  Коды - Массив из Строка - список кодов, информацию по которым нужно найти.
//  ПоУбыванию - Булево - если Истина, то результат будет отсортирован в порядке убывания кодов. Если Ложь, то в
//  порядке возрастания кодов.
//
// Возвращаемое значение:
//  РезультатЗапроса - результат выполнения запроса. Содержит поля:
//    * Раздел - Строка - раздел классификатора, к которому относится найденное значение.
//    * Код - Строка - код по классификатору.
//    * Наименование - Строка - текстовое описание выбранного значения.
//
Функция ПоискПоКодам(Коды, ПоУбыванию = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеОКВЭД.Код КАК Код,
	|	ДанныеОКВЭД.Наименование КАК Наименование,
	|	ДанныеОКВЭД.Раздел КАК Раздел
	|ИЗ
	|	РегистрСведений.ДанныеОКВЭД КАК ДанныеОКВЭД
	|ГДЕ
	|	ДанныеОКВЭД.Код В(&Коды)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Раздел,
	|	Код УБЫВ";
	
	Если Не ПоУбыванию Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"Код УБЫВ",
			"Код");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Коды", Коды);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Получает номер загруженной версии классификатора. Если регистр пустой, то считается, что классификатор еще ни разу не
// загружался и возвращается 0.
// 
// Параметры:
//  ИдентификаторВСервисе - Строка - идентификатор в сервисе классификаторов.
// 
// Возвращаемое значение:
//  Число - номер версии загруженного классификатора
//
Функция ЗагруженнаяВерсия(ИдентификаторВСервисе)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Код
	|ИЗ
	|	РегистрСведений.ДанныеОКВЭД";
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат 0;
	КонецЕсли;

	ЗагруженнаяВерсия = РаботаСКлассификаторами.ВерсияКлассификатора(ИдентификаторВСервисе);
	Если ЗагруженнаяВерсия = Неопределено Тогда
		ЗагруженнаяВерсия = 0;
	КонецЕсли;
		
	Возврат ЗагруженнаяВерсия;
	
КонецФункции

#КонецОбласти

#КонецЕсли
