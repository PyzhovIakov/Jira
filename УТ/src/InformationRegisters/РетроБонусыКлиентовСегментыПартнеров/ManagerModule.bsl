//@strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Описание ограничения доступа
// 
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЧтениеОбъектаРазрешено(ДокументУсловий)";
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.РетроБонусыКлиентовСегментыПартнеров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.21.64";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("31255c7c-de65-424e-acf1-f4aadb415b49");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.РетроБонусыКлиентовСегментыПартнеров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.Комментарий = НСтр("ru = 'Заполнение поля ""Номер строки документа"" в регистре сведений ""Ретро-бонусы клиентов: сегменты партнеров"".
								  |До момента заполнения в печатных формах документа ""Условия ретро-бонусов клиентов"" может меняться порядок строк при повторной печати.'");
	
	Читаемые = Новый Массив; // Массив Из Строка
	Читаемые.Добавить(Метаданные.Документы.УсловияРетроБонусовКлиентов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.РетроБонусыКлиентовСегментыПартнеров.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив; // Массив Из Строка
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РетроБонусыКлиентовСегментыПартнеров.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
КонецПроцедуры

// Регистрация изменений.
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.РетроБонусыКлиентовСегментыПартнеров";
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Документ.УсловияРетроБонусовКлиентов";
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.ДокументУсловий КАК ДокументУсловий
	|ИЗ
	|	РегистрСведений.РетроБонусыКлиентовСегментыПартнеров КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.НомерСтрокиДокумента = 0";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РегистрируемыеИзмерения = Запрос.Выполнить().Выгрузить();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РегистрируемыеИзмерения, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры обработчика:
//   * ВерсияПодсистемыНаНачалоОбновления - Строка - версия подсистемы.
//   * ИмяОбработчика - Строка - имя обработчика.
//   * ОбновляемыеДанные - Структура.
//   * ОбработкаЗавершена - Булево, Неопределено - признак завершения обработки.
//   * Очередь - Число - очередь.
//   * ПрогрессВыполнения - Структура:
//     ** ВсегоОбъектов - Число - всего обработано объектов.
//     ** ОбработаноОбъектов - Число - обработано объектов.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПолноеИмяОбъекта = Метаданные.РегистрыСведений.РетроБонусыКлиентовСегментыПартнеров.ПолноеИмя();
	ИмяРегистра = Метаданные.РегистрыСведений.РетроБонусыКлиентовСегментыПартнеров.Имя;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ИмяВременнойТаблицы = "ДанныеДляОбработки";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь,
		ПолноеИмяОбъекта,
		МенеджерВременныхТаблиц,
		ДополнительныеПараметры);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки
	 ИЛИ НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.ДокументУсловий КАК ДокументУсловий,
	|	ДанныеРегистра.РегистраторДвижения КАК РегистраторДвижения
	|ИЗ
	|	РегистрСведений.РетроБонусыКлиентовСегментыПартнеров КАК ДанныеРегистра
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ДанныеДляОбработки КАК ДанныеДляОбработки
	|			ГДЕ
	|				ДанныеДляОбработки.ДокументУсловий = ДанныеРегистра.ДокументУсловий)";
	
	ОбновляемыеДанные = Запрос.Выполнить().Выгрузить();
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	ИсключенияПриОбновлении = Новый Массив;
	
	СписокОписаний = Новый Массив; // Массив Из Строка
	СписокОписаний.Добавить(НСтр("ru = 'Не удалось обработать записи регистра сведений ""Ретро-бонусы клиентов: сегменты партнеров"".'"));
	
	ШаблонВсегоПропущено = НСтр("ru = 'Всего пропущено: %1'");
	ШаблонСообщения = НСтр("ru = 'Обработана порция документов условий по регистру сведений ""Ретро-бонусы клиентов: сегменты партнеров"": %1'");
	
	Для каждого Данные Из ОбновляемыеДанные Цикл
		
		ПричинаИсключения = 0;
		
		НачатьТранзакцию();
		
		Попытка
			
			ПричинаИсключения = 1; // Блокировка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("ДокументУсловий", Данные.ДокументУсловий);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.РетроБонусыКлиентовСегментыПартнеров.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ДокументУсловий.Установить(Данные.ДокументУсловий);
			НаборЗаписей.Прочитать();
			
			ТаблицаРегистра = Неопределено;
			ТаблицыДляДвижений = Документы.УсловияРетроБонусовКлиентов.ДанныеДокументаДляПроведения(
				Данные.РегистраторДвижения, ИмяРегистра);
			ТаблицыДляДвижений.Свойство("Таблица" + ИмяРегистра, ТаблицаРегистра);
			НаборЗаписей.Загрузить(ТаблицаРегистра);
			
			ПричинаИсключения = 3; // Запись
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Данные.ДокументУсловий);
			
			Если ПричинаИсключения = 3 Тогда
				
				ОбновлениеИнформационнойБазыУТ.ЗаписатьПлохиеДанные(
					ИсключенияПриОбновлении, ОбъектовОбработано, Параметры);
				ВызватьИсключение СтрСоединить(СписокОписаний, Символы.ПС);
				
			КонецЕсли;
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ПолноеИмяОбъекта);
	
	Если ОбъектовОбработано = 0
	   И ПроблемныхОбъектов <> 0 Тогда
		
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонВсегоПропущено,
			Строка(ПроблемныхОбъектов));
		
		СписокОписаний.Добавить(Сообщение);
		ТекстСообщения = СтрСоединить(СписокОписаний, Символы.ПС);
		ВызватьИсключение ТекстСообщения;
		
	Иначе
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			Строка(ОбъектовОбработано));
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			ТекстСообщения);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыУТ.ЗаписатьПлохиеДанные(ИсключенияПриОбновлении, ОбъектовОбработано, Параметры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли