
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Новый отбор записей.
// 
// Возвращаемое значение:
//  Структура - Отбор для удаления:
// * ИдентификаторыДокументов - Неопределено, Массив из Строка - идентификаторы заказов на доставку, назначенные в сервисе интеграции.
// * ДокументыОснования - Неопределено, Массив из ОпределяемыйТип.ОснованиеЗаказаСервисДоставки - документы-основания.
// * ИдентификаторыСтрок - Неопределено, Массив из Строка - идентификаторы строк заказов на доставку.
// * УдалитьОбработанные - Булево - признак необходимости удаления только тех записей, которые находятся в состоянии "Удалить"
Функция НовыйОтборЗаписей() Экспорт
	
	ОтборДляУдаления = Новый Структура();
	ОтборДляУдаления.Вставить("ИдентификаторыДокументов", Неопределено);
	ОтборДляУдаления.Вставить("ДокументыОснования", Неопределено);
	ОтборДляУдаления.Вставить("ИдентификаторыСтрок", Неопределено);
	ОтборДляУдаления.Вставить("УдалитьОбработанные", Ложь);

	Возврат ОтборДляУдаления;
	
КонецФункции

// Удалить записи по отбору.
// 
// Параметры:
//  ОтборДляУдаления - Структура - см. описание НовыйОтборЗаписей()
//
Процедура УдалитьЗаписиПоОтбору(ОтборДляУдаления) Экспорт
	
	МассивЗамен = Новый Массив();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДляОбработки.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ДанныеДляОбработки.ДокументОснование КАК ДокументОснование,
		|	ДанныеДляОбработки.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	РегистрСведений.ДанныеЧастичнойДоставкиСервисДоставки КАК ДанныеДляОбработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеЗаказовСервисДоставки КАК ДанныеЗаказовСервисДоставки
		|		ПО (ДанныеЗаказовСервисДоставки.ИдентификаторДокумента = ДанныеДляОбработки.ИдентификаторДокумента)
		|			И (ДанныеЗаказовСервисДоставки.ДокументОснование = ДанныеДляОбработки.ДокументОснование)
		|ГДЕ
		|	&УсловияОтбора";

	Если ОтборДляУдаления.ИдентификаторыДокументов <> Неопределено Тогда
		Если ОтборДляУдаления.ИдентификаторыДокументов.Количество() > 0 Тогда
			МассивЗамен.Добавить("ДанныеДляОбработки.ИдентификаторДокумента В (&ИдентификаторыДокументов)");
			Запрос.УстановитьПараметр("ИдентификаторыДокументов", ОтборДляУдаления.ИдентификаторыДокументов);
		КонецЕсли;
	КонецЕсли;
	
	Если ОтборДляУдаления.ДокументыОснования <> Неопределено Тогда
		Если ОтборДляУдаления.ДокументыОснования.Количество() > 0 Тогда
			МассивЗамен.Добавить("ДанныеДляОбработки.ДокументОснование В (&ДокументыОснования)");
			Запрос.УстановитьПараметр("ДокументыОснования", ОтборДляУдаления.ДокументыОснования);
		КонецЕсли;
	КонецЕсли;
	
	Если ОтборДляУдаления.ИдентификаторыСтрок <> Неопределено Тогда
		Если ОтборДляУдаления.ИдентификаторыСтрок.Количество() > 0 Тогда
			МассивЗамен.Добавить("ДанныеДляОбработки.ИдентификаторСтроки В (&ИдентификаторыСтрок)");
			Запрос.УстановитьПараметр("ИдентификаторыСтрок", ОтборДляУдаления.ИдентификаторыСтрок);
		КонецЕсли;
	КонецЕсли;
	
	Если ОтборДляУдаления.УдалитьОбработанные = Истина Тогда
		МассивЗамен.Добавить("ДанныеЗаказовСервисДоставки.СостояниеОбработкиЧастичнойДоставки = ЗНАЧЕНИЕ(Перечисление.СостоянияОбработкиПроцедурСинхронизацииСервисДоставки.Обработано)");
	КонецЕсли;	
	
	Если МассивЗамен.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияОтбора", СтрСоединить(МассивЗамен, " И "));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		УдаляемаяЗапись = РегистрыСведений.ДанныеЧастичнойДоставкиСервисДоставки.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(УдаляемаяЗапись, ВыборкаДетальныеЗаписи);
		
		УдаляемаяЗапись.Удалить();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли