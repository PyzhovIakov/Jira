#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура добавляет связь потенциального клиента А с потенциальным клиентом Б.
//
// Параметры:
//  ПК_А		 - СправочникСсылка.CRM_ПотенциальныеКлиенты	 - Потенциальный клиент А.
//  ПК_Б		 - СправочникСсылка.CRM_ПотенциальныеКлиенты	 - Потенциальный клиент Б.
//  ПрочиеДанные - Структура									 - Прочие данные.
//
Процедура ДобавитьСвязь(ПК_А, ПК_Б, ПрочиеДанные) Экспорт
	
	СвязанныеСПК_А = СвязанныеПотенциальныеКлиенты(ПК_А).ВыгрузитьКолонку("ПотенциальныйКлиент");
	СвязанныеСПК_Б = СвязанныеПотенциальныеКлиенты(ПК_Б).ВыгрузитьКолонку("ПотенциальныйКлиент");
	
	НачатьТранзакцию();
	
    Попытка
		ОбновитьСвязь(ПК_А, ПК_Б, ПрочиеДанные);	
		
		Для Каждого СвязанныйПК Из СвязанныеСПК_Б Цикл
			ОбновитьСвязь(ПК_А, СвязанныйПК, ПрочиеДанные);
		КонецЦикла;
		
		Для Каждого СвязанныйПК Из СвязанныеСПК_А Цикл
			ОбновитьСвязь(ПК_Б, СвязанныйПК, ПрочиеДанные);
		КонецЦикла;
		
		Для Каждого СвязанныйПК_А Из СвязанныеСПК_А Цикл
			Для Каждого СвязанныйПК_Б Из СвязанныеСПК_Б Цикл
				ОбновитьСвязь(СвязанныйПК_А, СвязанныйПК_Б, ПрочиеДанные);
			КонецЦикла;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось создать связь!'") + Символы.ПС
			+ ОписаниеОшибки());
		
	КонецПопытки;
	
	ОбновитьКлиентКонтактВСвязанных(ПК_А);
	
КонецПроцедуры

// Процедура добавляет несколько связей потенциальных клиентов.
//
// Параметры:
//  МассивПК	 - Массив из СправочникСсылка.CRM_ПотенциальныеКлиенты	 - Массив потенциальных клиентов.
//  ПрочиеДанные - Структура											 - Прочие данные.
//
Процедура ДобавитьСвязьНесколько(МассивПК, ПрочиеДанные) Экспорт
	
	Если МассивПК.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Для Сч = 1 По МассивПК.Количество() - 1 Цикл
		ДобавитьСвязь(МассивПК[Сч - 1], МассивПК[Сч], ПрочиеДанные);
	КонецЦикла;
	
	ОбновитьКлиентКонтактВСвязанных(МассивПК[0]);
	
КонецПроцедуры

// Процедура обновиляет связь потенциального клиента А с потенциальным клиентом Б.
//
// Параметры:
//  ПК_А		 - СправочникСсылка.CRM_ПотенциальныеКлиенты - Потенциальный клиент А.
//  ПК_Б		 - СправочникСсылка.CRM_ПотенциальныеКлиенты - Потенциальный клиент Б.
//  ПрочиеДанные - Структура								 - Прочие данные.
//
Процедура ОбновитьСвязь(ПК_А, ПК_Б, ПрочиеДанные) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		УдалитьСвязь(ПК_А, ПК_Б);
		ЗаписатьСвязь(ПК_А, ПК_Б, ПрочиеДанные);
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось обновить связь!'") + Символы.ПС
			+ ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// Процедура удаляет связь потенциального клиента А с потенциальным клиентом Б.
//
// Параметры:
//  ПК_А - СправочникСсылка.CRM_ПотенциальныеКлиенты - Потенциальный клиент А.
//  ПК_Б - СправочникСсылка.CRM_ПотенциальныеКлиенты - Потенциальный клиент Б.
//
// Возвращаемое значение:
//   - Нет
//
Процедура УдалитьСвязь(ПК_А, ПК_Б) Экспорт
	
	НЗ = РегистрыСведений.CRM_СвязанныеПотенциальныеКлиенты.СоздатьНаборЗаписей();
	НЗ.Отбор.ПотенциальныйКлиентА.Установить(ПК_А);
	НЗ.Отбор.ПотенциальныйКлиентБ.Установить(ПК_Б);
	НЗ.Записать();
	
	НЗ = РегистрыСведений.CRM_СвязанныеПотенциальныеКлиенты.СоздатьНаборЗаписей();
	НЗ.Отбор.ПотенциальныйКлиентА.Установить(ПК_Б);
	НЗ.Отбор.ПотенциальныйКлиентБ.Установить(ПК_А);
	НЗ.Записать();
	
КонецПроцедуры

// Процедура удаляет все записи потенциального клиента из регистра "Связанные потенциальные клиенты (CRM)".
//
// Параметры:
//  ПК	 - СправочникСсылка.CRM_ПотенциальныеКлиенты	 - Потенциальный клиент.
// 
// Возвращаемое значение:
//   - Нет
//
Процедура УдалитьПК(ПК) Экспорт
	
	НЗ = РегистрыСведений.CRM_СвязанныеПотенциальныеКлиенты.СоздатьНаборЗаписей();
	НЗ.Отбор.ПотенциальныйКлиентА.Установить(ПК);
	НЗ.Записать();
	
	НЗ = РегистрыСведений.CRM_СвязанныеПотенциальныеКлиенты.СоздатьНаборЗаписей();
	НЗ.Отбор.ПотенциальныйКлиентБ.Установить(ПК);
	НЗ.Записать();
	
КонецПроцедуры

// Функция возвращает массив потенциальных клиентов, связанных с переданным.
//
// Параметры:
//  ПК	 - СправочникСсылка.CRM_ПотенциальныеКлиенты	 - Потенциальный клиент.
// 
// Возвращаемое значение:
//   - Массив
//
Функция СвязанныеПотенциальныеКлиенты(ПК) Экспорт
	
	Результат = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ПК) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиМеждуПК.ПотенциальныйКлиентБ КАК ПотенциальныйКлиент,
		|	СвязиМеждуПК.ПотенциальныйКлиентА КАК ПотенциальныйКлиентА,
		|	СвязиМеждуПК.ПотенциальныйКлиентБ КАК ПотенциальныйКлиентБ,
		|	СвязиМеждуПК.Автор КАК Автор,
		|	СвязиМеждуПК.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.CRM_СвязанныеПотенциальныеКлиенты КАК СвязиМеждуПК
		|ГДЕ
		|	СвязиМеждуПК.ПотенциальныйКлиентА = &ПК
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СвязиМеждуПК.ПотенциальныйКлиентА,
		|	СвязиМеждуПК.ПотенциальныйКлиентА,
		|	СвязиМеждуПК.ПотенциальныйКлиентБ,
		|	СвязиМеждуПК.Автор,
		|	СвязиМеждуПК.Комментарий
		|ИЗ
		|	РегистрСведений.CRM_СвязанныеПотенциальныеКлиенты КАК СвязиМеждуПК
		|ГДЕ
		|	СвязиМеждуПК.ПотенциальныйКлиентБ = &ПК";
	
	// Все, с кем связан ПК
	Запрос.УстановитьПараметр("ПК", ПК);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Процедура обновляет контакт клиента в связанных.
//
// Параметры:
//  ПК	 - СправочникСсылка.CRM_ПотенциальныеКлиенты	 - Потенциальный клиент.
//
Процедура ОбновитьКлиентКонтактВСвязанных(ПК) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПК.Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	Связанные = СвязанныеПотенциальныеКлиенты(ПК).ВыгрузитьКолонку("ПотенциальныйКлиент"); 
	
	НачатьТранзакцию();
	
	Попытка
		Для Каждого СвязанныйПК Из Связанные Цикл
			
			Если СвязанныйПК.Партнер = ПК.Партнер Тогда
				Продолжить;
			КонецЕсли;
			
			СвязанныйОбъект = СвязанныйПК.ПолучитьОбъект();
			СвязанныйОбъект.Партнер = ПК.Партнер;
			СвязанныйОбъект.КонтактноеЛицо = Неопределено;
			СвязанныйОбъект.ДополнительныеСвойства.Вставить("СвязанныйПК");
			СвязанныйОбъект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось обновить связь!'") + Символы.ПС 
			+ ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьСвязь(ПК_А, ПК_Б, ПрочиеДанные)
	
	Если ПК_А = ПК_Б Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.CRM_СвязанныеПотенциальныеКлиенты.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Автор = ПрочиеДанные.Автор;
	МенеджерЗаписи.Комментарий = ПрочиеДанные.Комментарий;
	
	Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.Автор) Тогда
		МенеджерЗаписи.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;	
	
	МенеджерЗаписи.ПотенциальныйКлиентА = ПК_А;
	МенеджерЗаписи.ПотенциальныйКлиентБ = ПК_Б;
	
	Попытка
		МенеджерЗаписи.Записать();
	Исключение
		ШаблонСообщения = НСтр("ru = 'Не удалось связать %1 и %2 по причине: %3'");
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
																							ПК_А, ПК_Б,
																							ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		ВызватьИсключение "Потенциальные клиенты не были связаны";
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
