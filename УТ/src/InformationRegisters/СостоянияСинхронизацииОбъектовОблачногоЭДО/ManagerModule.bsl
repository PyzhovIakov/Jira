// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  ТипДанных - ПеречислениеСсылка.ТипыСинхронизацииОблачногоЭДО
//  СостояниеСинхронизации - см. НовоеСостояниеОбъекта
Процедура ЗаписатьСостояние(ТипДанных, СостояниеСинхронизации) Экспорт
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторЭДО.Установить(СостояниеСинхронизации.ИдентификаторЭДО);
	НаборЗаписей.Отбор.ТипДанных.Установить(ТипДанных);
	НаборЗаписей.Отбор.ИдентификаторОбъекта.Установить(СостояниеСинхронизации.ИдентификаторОбъекта);
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(ЗаписьНабора, СостояниеСинхронизации);
	ЗаписьНабора.ТипДанных = ТипДанных;
	ЗаписьНабора.ДатаСинхронизации = ТекущаяДатаСеанса();
	НаборЗаписей.Записать();
КонецПроцедуры

// Параметры:
//  ТипДанных - ПеречислениеСсылка.ТипыСинхронизацииОблачногоЭДО
//  СостояниеСинхронизации - Структура:
//  * ИдентификаторОбъекта - Строка
//  * ИдентификаторЭДО - Строка
//  * МеткаВремени - Число
//  * Удаление - Булево
//  ОписаниеОшибки - Строка
Процедура ЗаписатьОшибку(ТипДанных, СостояниеСинхронизации, ОписаниеОшибки) Экспорт
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторЭДО.Установить(СостояниеСинхронизации.ИдентификаторЭДО);
	НаборЗаписей.Отбор.ТипДанных.Установить(ТипДанных);
	НаборЗаписей.Отбор.ИдентификаторОбъекта.Установить(СостояниеСинхронизации.ИдентификаторОбъекта);
	НачатьТранзакцию();
	Попытка
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() Тогда
			ЗаписьНабора = НаборЗаписей[0];
		Иначе
			ЗаписьНабора = НаборЗаписей.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, СостояниеСинхронизации);
		ЗаписьНабора.ТипДанных = ТипДанных;
		ЗаписьНабора.ДатаСинхронизации = ТекущаяДатаСеанса();
		ЗаписьНабора.Ошибка = Истина;
		ЗаписьНабора.ОписаниеОшибки = ОписаниеОшибки;
		ЗаписьНабора.КоличествоПопыток = ЗаписьНабора.КоличествоПопыток + 1;
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

// Параметры:
//  ТипДанных - ПеречислениеСсылка.ТипыСинхронизацииОблачногоЭДО
//  ИдентификаторыЭДО - Массив из Строка
//  ПределПопыток - Число
//  Порция - Число
// 
// Возвращаемое значение:
//  Массив из Строка
Функция ОбъектыСОшибками(ТипДанных, ИдентификаторыЭДО, ПределПопыток = 4) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	СостоянияСинхронизацииОбъектовОблачногоЭДО.ИдентификаторОбъекта
		|ИЗ
		|	РегистрСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО КАК СостоянияСинхронизацииОбъектовОблачногоЭДО
		|ГДЕ
		|	СостоянияСинхронизацииОбъектовОблачногоЭДО.ИдентификаторЭДО В (&ИдентификаторыЭДО)
		|	И СостоянияСинхронизацииОбъектовОблачногоЭДО.ТипДанных = &ТипДанных
		|	И СостоянияСинхронизацииОбъектовОблачногоЭДО.Ошибка
		|	И СостоянияСинхронизацииОбъектовОблачногоЭДО.КоличествоПопыток < &ПределПопыток";
	Запрос.УстановитьПараметр("ТипДанных", ТипДанных);
	Запрос.УстановитьПараметр("ИдентификаторыЭДО", ИдентификаторыЭДО);
	Запрос.УстановитьПараметр("ПределПопыток", ПределПопыток);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ИдентификаторОбъекта");
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИдентификаторОбъекта - Строка
//  * ИдентификаторЭДО - Строка
//  * МеткаВремени - Число
//  * Удаление - Булево
Функция НовоеСостояниеОбъекта() Экспорт
	
	Состояние = Новый Структура;
	Состояние.Вставить("ИдентификаторОбъекта", "");
	Состояние.Вставить("ИдентификаторЭДО", "");
	Состояние.Вставить("МеткаВремени", 0);
	Состояние.Вставить("Удаление", Ложь);
	Возврат Состояние;
	
КонецФункции

// Параметры:
//  ТипДанных - ПеречислениеСсылка.ТипыСинхронизацииОблачногоЭДО
//  ИдентификаторыЭДО - Массив из Строка
// 
// Возвращаемое значение:
//  Массив из см. НовоеСостояниеОбъекта
Функция СостоянияОбъектовСОшибками(ТипДанных, ИдентификаторыЭДО) Экспорт
	
	ШаблонЗапроса =
		"ВЫБРАТЬ
		|	СостоянияСинхронизацииОбъектовОблачногоЭДО.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		|	СостоянияСинхронизацииОбъектовОблачногоЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	СостоянияСинхронизацииОбъектовОблачногоЭДО.МеткаВремени КАК МеткаВремени
		|ИЗ
		|	РегистрСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО КАК СостоянияСинхронизацииОбъектовОблачногоЭДО
		|ГДЕ
		|	СостоянияСинхронизацииОбъектовОблачногоЭДО.ИдентификаторЭДО = &ИдентификаторЭДО
		|	И СостоянияСинхронизацииОбъектовОблачногоЭДО.ТипДанных = &ТипДанных
		|	И СостоянияСинхронизацииОбъектовОблачногоЭДО.Ошибка
		|	И СостоянияСинхронизацииОбъектовОблачногоЭДО.КоличествоПопыток < 4";
	
	Запрос = Новый Запрос;
	
	ШаблонПараметраИдентификаторЭДО = "&ИдентификаторЭДО";
	ТекстыПодзапроса = Новый Массив; // Массив из Строка
	Счетчик = 0;
	
	Для Каждого ИдентификаторЭДО Из ИдентификаторыЭДО Цикл
		
		Счетчик = Счетчик + 1;
		
		ПараметрИдентификаторЭДО = ШаблонПараметраИдентификаторЭДО + Счетчик;
		ТекстПодзапроса = СтрЗаменить(ШаблонЗапроса, ШаблонПараметраИдентификаторЭДО, ПараметрИдентификаторЭДО);
		ИмяПараметра = Сред(ПараметрИдентификаторЭДО, 2);
		Запрос.УстановитьПараметр(ИмяПараметра, ИдентификаторЭДО);
		
		ТекстыПодзапроса.Добавить(ТекстПодзапроса);
		
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(ТекстыПодзапроса, ОбщегоНазначения.ТекстОбъединитьВсе());
	Запрос.УстановитьПараметр("ТипДанных", ТипДанных);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	СостоянияОбъектов = Новый Массив; // См. СостоянияОбъектовСОшибками
	
	Пока Выборка.Следующий() Цикл
		СостояниеОбъекта = НовоеСостояниеОбъекта();
		ЗаполнитьЗначенияСвойств(СостояниеОбъекта, Выборка);
		СостоянияОбъектов.Добавить(СостояниеОбъекта);
	КонецЦикла;
	
	Возврат СостоянияОбъектов;
	
КонецФункции

// Параметры:
//  ТипДанных - ПеречислениеСсылка.ТипыСинхронизацииОблачногоЭДО
//  МеткиВремениОбъектов - Массив из Структура:
//  * ИдентификаторЭДО - Строка
//  * ИдентификаторОбъекта - Строка
//  * МеткаВремени - Число
// 
// Возвращаемое значение:
//  Массив из см. НовоеСостояниеОбъекта
Функция СостоянияОбъектовДляАктуализации(ТипДанных, МеткиВремениОбъектов) Экспорт
	
	ТаблицаМетокВремени = Новый ТаблицаЗначений;
	ТаблицаМетокВремени.Колонки.Добавить("ИдентификаторЭДО", ОбщегоНазначения.ОписаниеТипаСтрока(70));
	ТаблицаМетокВремени.Колонки.Добавить("ИдентификаторОбъекта", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаМетокВремени.Колонки.Добавить("МеткаВремени", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	
	Для Каждого МеткаВремениОбъекта Из МеткиВремениОбъектов Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаМетокВремени.Добавить(), МеткаВремениОбъекта);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаМетокВремени.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	ТаблицаМетокВремени.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		|	ТаблицаМетокВремени.МеткаВремени КАК МеткаВремени
		|ПОМЕСТИТЬ АктуальныеМеткиВремени
		|ИЗ
		|	&ТаблицаМетокВремени КАК ТаблицаМетокВремени
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторЭДО,
		|	ИдентификаторОбъекта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктуальныеМеткиВремени.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	АктуальныеМеткиВремени.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		|	ЕСТЬNULL(СостоянияСинхронизации.МеткаВремени, 0) КАК МеткаВремени
		|ИЗ
		|	АктуальныеМеткиВремени КАК АктуальныеМеткиВремени
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО КАК СостоянияСинхронизации
		|		ПО АктуальныеМеткиВремени.ИдентификаторЭДО = СостоянияСинхронизации.ИдентификаторЭДО
		|		И СостоянияСинхронизации.ТипДанных = &ТипДанных
		|		И АктуальныеМеткиВремени.ИдентификаторОбъекта = СостоянияСинхронизации.ИдентификаторОбъекта
		|ГДЕ
		|	АктуальныеМеткиВремени.МеткаВремени > ЕСТЬNULL(СостоянияСинхронизации.МеткаВремени, 0)";
	
	Запрос.УстановитьПараметр("ТаблицаМетокВремени", ТаблицаМетокВремени);
	Запрос.УстановитьПараметр("ТипДанных", ТипДанных);
	
	СостоянияОбъектов = Новый Массив; // См. СостоянияОбъектовДляАктуализации
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СостояниеОбъекта = НовоеСостояниеОбъекта();
		ЗаполнитьЗначенияСвойств(СостояниеОбъекта, Выборка);
		СостоянияОбъектов.Добавить(СостояниеОбъекта);
	КонецЦикла;
	
	Возврат СостоянияОбъектов;
	
КонецФункции

// Параметры:
//  ТипДанных - ПеречислениеСсылка.ТипыСинхронизацииОблачногоЭДО
//  СостояниеСинхронизации - см. НовоеСостояниеОбъекта
// 
// Возвращаемое значение:
//  Булево
Функция СостояниеОбъектаАктуально(ТипДанных, СостояниеСинхронизации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияСинхронизацииОбъектовОблачногоЭДО.МеткаВремени КАК МеткаВремени
		|ИЗ
		|	РегистрСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО КАК СостоянияСинхронизацииОбъектовОблачногоЭДО
		|ГДЕ
		|	СостоянияСинхронизацииОбъектовОблачногоЭДО.ИдентификаторЭДО = &ИдентификаторЭДО
		|	И СостоянияСинхронизацииОбъектовОблачногоЭДО.ТипДанных = &ТипДанных
		|	И СостоянияСинхронизацииОбъектовОблачногоЭДО.ИдентификаторОбъекта = &ИдентификаторОбъекта";
		
	Запрос.УстановитьПараметр("ИдентификаторЭДО", СостояниеСинхронизации.ИдентификаторЭДО);
	Запрос.УстановитьПараметр("ТипДанных", ТипДанных);
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", СостояниеСинхронизации.ИдентификаторОбъекта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = СостояниеСинхронизации.МеткаВремени > Выборка.МеткаВремени;
	Иначе
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИдентификаторыОбъектов - Массив из Строка
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка
//  * Значение - Число
Функция МеткиВремениОбъектов(ИдентификаторыОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияСинхронизацииОбъектовОблачногоЭДО.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		|	СостоянияСинхронизацииОбъектовОблачногоЭДО.МеткаВремени КАК МеткаВремени
		|ИЗ
		|	РегистрСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО КАК СостоянияСинхронизацииОбъектовОблачногоЭДО
		|ГДЕ
		|	СостоянияСинхронизацииОбъектовОблачногоЭДО.ИдентификаторОбъекта В (&ИдентификаторыОбъектов)";
		
	Запрос.УстановитьПараметр("ИдентификаторыОбъектов", ИдентификаторыОбъектов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ИдентификаторОбъекта, Выборка.МеткаВремени);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИдентификаторЭДО - Строка
//  ТипДанных - ПеречислениеСсылка.ТипыСинхронизацииОблачногоЭДО
//  ИдентификаторОбъекта - Строка
Процедура Удалить(ИдентификаторЭДО, ТипДанных, ИдентификаторОбъекта) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторЭДО.Установить(ИдентификаторЭДО);
	НаборЗаписей.Отбор.ТипДанных.Установить(ТипДанных);
	НаборЗаписей.Отбор.ИдентификаторОбъекта.Установить(ИдентификаторОбъекта);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Параметры:
//  ИдентификаторЭДО - Строка
//  ТипДанных - ПеречислениеСсылка.ТипыСинхронизацииОблачногоЭДО
//  ИдентификаторОбъекта - Строка
// 
// Возвращаемое значение:
//  См. НовоеСостояниеОбъекта
Функция СостояниеОбъекта(ИдентификаторЭДО, ТипДанных, ИдентификаторОбъекта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияСинхронизацииОбъектовОблачногоЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	СостоянияСинхронизацииОбъектовОблачногоЭДО.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		|	СостоянияСинхронизацииОбъектовОблачногоЭДО.МеткаВремени КАК МеткаВремени
		|ИЗ
		|	РегистрСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО КАК СостоянияСинхронизацииОбъектовОблачногоЭДО
		|ГДЕ
		|	СостоянияСинхронизацииОбъектовОблачногоЭДО.ИдентификаторЭДО = &ИдентификаторЭДО
		|	И СостоянияСинхронизацииОбъектовОблачногоЭДО.ТипДанных = &ТипДанных
		|	И СостоянияСинхронизацииОбъектовОблачногоЭДО.ИдентификаторОбъекта = &ИдентификаторОбъекта";
	
	Запрос.УстановитьПараметр("ИдентификаторЭДО", ИдентификаторЭДО);
	Запрос.УстановитьПараметр("ТипДанных", ТипДанных);
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", ИдентификаторОбъекта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СостояниеОбъекта = НовоеСостояниеОбъекта();
	СостояниеОбъекта.ИдентификаторЭДО = ИдентификаторЭДО;
	СостояниеОбъекта.ИдентификаторОбъекта = ИдентификаторОбъекта;
	
	Если Выборка.Следующий() Тогда
		СостояниеОбъекта.МеткаВремени = Выборка.МеткаВремени;
	КонецЕсли;
	
	Возврат СостояниеОбъекта;
	
КонецФункции

// Параметры:
//  ИдентификаторЭДО - Строка
//  ИдентификаторДокумента - Строка
// 
// Возвращаемое значение:
//  См. СостояниеОбъекта
Функция СостояниеДанныхДокумента(ИдентификаторЭДО, ИдентификаторДокумента) Экспорт
	
	Возврат СостояниеОбъекта(ИдентификаторЭДО,
		Перечисления.ТипыСинхронизацииОблачногоЭДО.ДанныеДокументовЭДО, ИдентификаторДокумента);
	
КонецФункции

#КонецОбласти

#КонецЕсли
