// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Данные

// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  Пользователь - ОпределяемыйТип.Пользователь
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. ИнтеграцияОблачногоЭДО.НовыйТокенАвторизации
Функция ТокенАвторизации(УчетнаяЗапись, Пользователь) Экспорт
	Логин = Логин(УчетнаяЗапись, Пользователь);
	Если ПустаяСтрока(Логин) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ИдентификаторДанных = ИдентификаторДанныхВБезопасноеХранилище(УчетнаяЗапись, Пользователь);
	Если Пользователь <> Пользователи.АвторизованныйПользователь()
		И Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для получения токена доступа к сервису облачного ЭДО.'");
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ИдентификаторДанных);
	УстановитьПривилегированныйРежим(Ложь);
	Если ТипЗнч(Пароль) = Тип("Строка") Тогда
		Возврат ИнтеграцияОблачногоЭДО.ТокенАвторизацииБазовый(Логин, Пароль);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  Пользователь - ОпределяемыйТип.Пользователь
// 
// Возвращаемое значение:
//  Строка
Функция Логин(УчетнаяЗапись, Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПользователиОблачногоЭДО.Логин
		|ИЗ
		|	РегистрСведений.ПользователиОблачногоЭДО КАК ПользователиОблачногоЭДО
		|ГДЕ
		|	ПользователиОблачногоЭДО.УчетнаяЗаписьОблачногоЭДО = &УчетнаяЗапись
		|	И ПользователиОблачногоЭДО.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Логин;
	
КонецФункции

#КонецОбласти

#Область Подключение

// Возвращаемое значение:
//  Структура:
//  * Пользователь - Неопределено,СправочникСсылка.Пользователи
//  * АдресСервиса - Строка
//  * Логин - Строка 
//  * Пароль - Строка
Функция НовыеПараметрыПользователя() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("Пользователь", Неопределено);
	Параметры.Вставить("АдресСервиса", "");
	Параметры.Вставить("Логин", "");
	Параметры.Вставить("Пароль", "");
	Возврат Параметры;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * АдресСервиса - Строка
//  * Логин - Строка 
//  * Пароль - Строка
Функция НовыеПараметрыАвторизации() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("АдресСервиса", "");
	Параметры.Вставить("Логин", "");
	Параметры.Вставить("Пароль", "");
	Возврат Параметры;
КонецФункции

// Параметры:
//  ПараметрыАвторизации - См. НовыеПараметрыАвторизации
//  НовоеПодключение - Булево
// 
// Возвращаемое значение:
//  Структура:
//  * ТекстОшибки - Строка
//  * ПриложенияДляВыбора - Массив из см. НовоеПриложениеАбонента
//
Функция Авторизоваться(ПараметрыАвторизации, НовоеПодключение) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ПриложенияДляВыбора", Новый Массив);
	
	Если ЭтоСервис1СФреш(ПараметрыАвторизации.АдресСервиса)
		И Не УказанНомерОбласти(ПараметрыАвторизации.АдресСервиса) Тогда
		РезультатПолученияПриложений = ПолучитьСписокПриложенийПользователя(ПараметрыАвторизации);
		Результат.ТекстОшибки = РезультатПолученияПриложений.ТекстОшибки;
		Результат.ПриложенияДляВыбора = РезультатПолученияПриложений.Приложения;
		Возврат Результат;
	КонецЕсли;
	
	РезультатПроверкиПрав = ПроверитьПраваПользователяВОблачномЭДО(ПараметрыАвторизации, НовоеПодключение);
	Результат.ТекстОшибки = РезультатПроверкиПрав.ТекстОшибки;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ПараметрыАвторизации - См. НовыеПараметрыАвторизации
//  НовоеПодключение - Булево
// 
// Возвращаемое значение:
//  Структура:
//  * ТекстОшибки - Строка
Функция ПроверитьПраваПользователяВОблачномЭДО(ПараметрыАвторизации, НовоеПодключение) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	
	ПараметрыВыполнения = ИнтеграцияОблачногоЭДО.НовыеПараметрыВыполненияМетодаСервиса();
	ПараметрыВыполнения.АдресСервиса = ПараметрыАвторизации.АдресСервиса;
	ПараметрыВыполнения.ТокенАвторизации = ИнтеграцияОблачногоЭДО.ТокенАвторизацииБазовый(
		ПараметрыАвторизации.Логин, ПараметрыАвторизации.Пароль);
	
	ПакетМетодов = ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса();
	
	Если НовоеПодключение Тогда
		
		УчетнаяЗаписьОблачногоЭДО = Справочники.УчетныеЗаписиОблачногоЭДО.НайтиПоАдресуСервиса(
			ПараметрыВыполнения.АдресСервиса);
		Если ЗначениеЗаполнено(УчетнаяЗаписьОблачногоЭДО) Тогда
			Результат.ТекстОшибки = НСтр("ru = 'Учетная запись с указанным адресом сервиса уже существует.'");;
			Возврат Результат;
		КонецЕсли;
		
		ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
			"ПроверитьПравоНастройкиПодключения", ОбщегоНазначенияБЭД.ИдентификаторПриложения());
		ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, 0);
		
	КонецЕсли;
	
	ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ПроверитьПравоВыполненияДействийПоЭДО");
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, 1);
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	РезультатПакета = ИнтеграцияОблачногоЭДО.ВыполнитьПакетМетодовСервиса(ПараметрыВыполнения, ПакетМетодов,
		КонтекстДиагностики);
	
	Если Не ЗначениеЗаполнено(РезультатПакета) Тогда
		Результат.ТекстОшибки = ОбработкаНеисправностейБЭД.ТекстОшибокКонтекстаДиагностики(КонтекстДиагностики);
		Возврат Результат;
	КонецЕсли;
	
	ПравоНастройкиПодключения = РезультатПакета[0]; // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ПроверитьПравоНастройкиПодключения
	ПравоВыполненияДействийПоЭДО = РезультатПакета[1]; // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ПроверитьПравоВыполненияДействийПоЭДО
	
	Если ПравоНастройкиПодключения <> Неопределено
		И Не ПравоНастройкиПодключения.ЕстьПраво Тогда
		Результат.ТекстОшибки = ПравоНастройкиПодключения.Описание;
	КонецЕсли;
	
	Если Не ПравоВыполненияДействийПоЭДО.ЕстьПраво Тогда 
		Результат.ТекстОшибки = ПравоВыполненияДействийПоЭДО.Описание;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ПараметрыАвторизации - См. НовыеПараметрыАвторизации
// 
// Возвращаемое значение:
//  Структура:
//  * ТекстОшибки - Строка
//  * Приложения - Массив из Структура
Функция ПолучитьСписокПриложенийПользователя(ПараметрыАвторизации)
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("Приложения", Новый Массив);
	
	РезультатПолученияАбонентов = ПолучитьСписокАбонентовПользователя(ПараметрыАвторизации);
	
	Если ЗначениеЗаполнено(РезультатПолученияАбонентов.ТекстОшибки) Тогда
		Результат.ТекстОшибки = РезультатПолученияАбонентов.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Абоненты = РезультатПолученияАбонентов.Абоненты;
	
	Если Не ЗначениеЗаполнено(Абоненты) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Абонент = Абоненты[0];
	
	РезультатПолученияПриложений = ПолучитьСписокПриложенийАбонента(ПараметрыАвторизации, Абонент.Код);
	
	Возврат РезультатПолученияПриложений;
	
КонецФункции

// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  ПараметрыПользователя - См. НовыеПараметрыПользователя
// 
// Возвращаемое значение:
//  Неопределено,РегистрСведенийКлючЗаписи.ПользователиОблачногоЭДО
Функция Добавить(УчетнаяЗапись, ПараметрыПользователя) Экспорт
	
	КлючЗаписи = Неопределено;
	
	Пользователь = ПараметрыПользователя.Пользователь;
	
	ЗначенияКлюча = Новый Структура("УчетнаяЗаписьОблачногоЭДО, Пользователь", УчетнаяЗапись, Пользователь);
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УчетнаяЗаписьОблачногоЭДО.Установить(ЗначенияКлюча.УчетнаяЗаписьОблачногоЭДО);
	НаборЗаписей.Отбор.Пользователь.Установить(ЗначенияКлюча.Пользователь);
	
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(ЗаписьНабора, ЗначенияКлюча);
	ЗаписьНабора.Логин = ПараметрыПользователя.Логин;
	
	ИдентификаторДанных = ИдентификаторДанныхВБезопасноеХранилище(УчетнаяЗапись, Пользователь);
	
	НачатьТранзакцию();
	Попытка
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИдентификаторДанных, ПараметрыПользователя.Пароль);
		УстановитьПривилегированныйРежим(Ложь);
		КлючЗаписи = СоздатьКлючЗаписи(ЗначенияКлюча);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат КлючЗаписи;
	
КонецФункции

// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  Пользователь - СправочникСсылка.Пользователи
// 
// Возвращаемое значение:
//  Строка
Функция ИдентификаторДанныхВБезопасноеХранилище(УчетнаяЗапись, Пользователь)
	Возврат СтрШаблон("%1_%2", УчетнаяЗапись.УникальныйИдентификатор(), Пользователь.УникальныйИдентификатор());
КонецФункции

// Возвращаемое значение:
//  Строка
Функция АдресСервиса1СФреш() Экспорт
	Возврат "https://1cfresh.com";
КонецФункции

// Параметры:
//  АдресСервиса - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоСервис1СФреш(АдресСервиса) Экспорт
	Возврат СтрНачинаетсяС(АдресСервиса, АдресСервиса1СФреш());
КонецФункции

// Параметры:
//  АдресСервиса - Строка
// 
// Возвращаемое значение:
//  Булево
Функция УказанНомерОбласти(АдресСервиса)
	МассивСтрок = СтрРазделить(АдресСервиса, "/", Ложь);
	Если ЗначениеЗаполнено(МассивСтрок) Тогда
		Возврат СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(МассивСтрок[МассивСтрок.ВГраница()]);
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// Возвращаемое значение:
//  Строка
Функция АдресПрограммногоИнтерфейсаМенеджераСервиса()
	Возврат "/a/adm/hs/ext_api/execute";
КонецФункции

// Параметры:
//  ПараметрыАвторизации - См. НовыеПараметрыАвторизации
// 
// Возвращаемое значение:
//  Структура:
//  * ТекстОшибки - Строка
//  * Абоненты - Массив из см. НовыйАбонентПользователя
Функция ПолучитьСписокАбонентовПользователя(ПараметрыАвторизации)
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("Абоненты", Новый Массив);
	
	ТелоЗапроса = 
		"{
		|	""general"":{
		|		""type"":""ext"",
		|		""method"":""account/list""
		|	}
		|}";
	
	РезультатЗапроса = ВыполнитьЗапросВСервис1СФреш(ПараметрыАвторизации, ТелоЗапроса);
	
	Если Не ЗначениеЗаполнено(РезультатЗапроса.Данные) Тогда
		Результат.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Если ЕстьОшибкаВДанныхРезультатаЗапроса(РезультатЗапроса.Данные, Результат.ТекстОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	АбонентыВФорматеСервиса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатЗапроса.Данные, "account", Новый Массив); // См. АбонентыИзФорматаСервиса.АбонентыВФорматеСервиса 
	
	Если Не ЗначениеЗаполнено(АбонентыВФорматеСервиса) Тогда
		Результат.ТекстОшибки = НСтр("ru = 'Не найден абонент пользователя'");
		Возврат Результат;
	КонецЕсли;
	
	Результат.Абоненты = АбонентыИзФорматаСервиса(АбонентыВФорматеСервиса);
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Имя - Строка
//  * Код - Число
//  * Роль - Строка
Функция НовыйАбонентПользователя()
	Свойства = Новый Структура;
	Свойства.Вставить("Имя", "");
	Свойства.Вставить("Код", 0);
	Свойства.Вставить("Роль", "");
	Возврат Свойства;
КонецФункции

// Параметры:
//  АбонентыВФорматеСервиса - Массив из Структура:
//  * name - Строка
//  * id - Число
//  * role - Строка
// 
// Возвращаемое значение:
//  Массив из см. НовыйАбонентПользователя
Функция АбонентыИзФорматаСервиса(АбонентыВФорматеСервиса)
	Абоненты = Новый Массив; // Массив из см. НовыйАбонентПользователя
	Для Каждого АбонентВФорматеСервиса Из АбонентыВФорматеСервиса Цикл
		Абонент = НовыйАбонентПользователя();
		Абонент.Имя = АбонентВФорматеСервиса.name;
		Абонент.Код = АбонентВФорматеСервиса.id;
		Абонент.Роль = АбонентВФорматеСервиса.role;
		Абоненты.Добавить(Абонент);
	КонецЦикла;
	Возврат Абоненты;
КонецФункции

// Параметры:
//  ПараметрыАвторизации - См. НовыеПараметрыАвторизации
//  КодАбонента - Число
// 
// Возвращаемое значение:
//  Структура:
//  * ТекстОшибки - Строка
//  * Приложения - Массив из Структура
Функция ПолучитьСписокПриложенийАбонента(ПараметрыАвторизации, КодАбонента)
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("Приложения", Новый Массив);
	
	ТелоЗапроса = ТелоЗапросаСпискаПриложенийАбонента(КодАбонента);
	
	РезультатЗапроса = ВыполнитьЗапросВСервис1СФреш(ПараметрыАвторизации, ТелоЗапроса);
	
	Если Не ЗначениеЗаполнено(РезультатЗапроса.Данные) Тогда
		Результат.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Если ЕстьОшибкаВДанныхРезультатаЗапроса(РезультатЗапроса.Данные, Результат.ТекстОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПриложенияВФорматеСервиса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатЗапроса.Данные, "tenant", Новый Массив); // См. ПриложенияИзФорматаСервиса.ПриложенияВФорматеСервиса
	
	Если Не ЗначениеЗаполнено(ПриложенияВФорматеСервиса) Тогда
		Результат.ТекстОшибки = НСтр("ru = 'Не найдены приложения для подключения'");
		Возврат Результат;
	КонецЕсли;
	
	Результат.Приложения = ПриложенияИзФорматаСервиса(ПриложенияВФорматеСервиса);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  КодАбонента - Число
// 
// Возвращаемое значение:
//  Строка
Функция ТелоЗапросаСпискаПриложенийАбонента(КодАбонента)
	
	Возврат СтрШаблон(
		"{
		|	""general"":{
		|		""type"":""ext"",
		|		""method"":""tenant/list""
		|	},
		|	""application"": [""cedo""],
		|	""status"": [""used""],
		|	""auth"": {
		|		""account"": %1
		|	}
		|}",
		Формат(КодАбонента, "ЧГ=;"));
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Наименование - Строка
//  * АдресОбласти - Строка
//  * НомерОбласти - Число
Функция НовоеПриложениеАбонента()
	Свойства = Новый Структура;
	Свойства.Вставить("Наименование", "");
	Свойства.Вставить("АдресОбласти", "");
	Свойства.Вставить("НомерОбласти", 0);
	Возврат Свойства;
КонецФункции

// Параметры:
//  ПриложенияВФорматеСервиса - Массив из Структура:
//  * id - Число
//  * name - Строка
//  * url - Строка
// 
// Возвращаемое значение:
//  Массив из см. НовоеПриложениеАбонента
Функция ПриложенияИзФорматаСервиса(ПриложенияВФорматеСервиса)
	Приложения = Новый Массив; // Массив из см. НовоеПриложениеАбонента
	Для Каждого ПриложениеВФорматеСервиса Из ПриложенияВФорматеСервиса Цикл
		Приложение = НовоеПриложениеАбонента();
		Приложение.Наименование = ПриложениеВФорматеСервиса.name;
		Приложение.АдресОбласти = ПриложениеВФорматеСервиса.url;
		Приложение.НомерОбласти = ПриложениеВФорматеСервиса.id;
		Приложения.Добавить(Приложение);
	КонецЦикла;
	Возврат Приложения;
КонецФункции

// Параметры:
//  ПараметрыАвторизации - См. НовыеПараметрыАвторизации
//  ТелоЗапроса - Строка
// 
// Возвращаемое значение:
//  Структура:
//  * ТекстОшибки - Строка
//  * Данные - Неопределено,Структура
Функция ВыполнитьЗапросВСервис1СФреш(ПараметрыАвторизации, ТелоЗапроса)
	
	РезультатЗапроса = Новый Структура;
	РезультатЗапроса.Вставить("ТекстОшибки", "");
	РезультатЗапроса.Вставить("Данные", Неопределено);
	
	Запрос = Новый HTTPЗапрос(АдресПрограммногоИнтерфейсаМенеджераСервиса());
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	ЗначениеЗаголовка = СтрШаблон("Basic %1",
		Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(
			СтрШаблон("%1:%2", ПараметрыАвторизации.Логин, ПараметрыАвторизации.Пароль))));
	Запрос.Заголовки.Вставить("Authorization", ЗначениеЗаголовка);
	
	СоединениеССервисом = ИнтеграцияОблачногоЭДО.СоединениеССервисомПоАдресу(ПараметрыАвторизации.АдресСервиса);
	
	Попытка
		Ответ = СоединениеССервисом.ВызватьHTTPМетод("POST", Запрос);
	Исключение
		РезультатЗапроса.ТекстОшибки = НСтр("ru = 'Не удалось установить соединение с сервисом.'");
		ЗаписатьОшибкуПодключенияКОблачномуЭДО(РезультатЗапроса.ТекстОшибки,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат РезультатЗапроса;
	КонецПопытки;
	
	Если Ответ.КодСостояния = 401 Тогда
		РезультатЗапроса.ТекстОшибки = НСтр("ru = 'Неверный логин или пароль.'");
	ИначеЕсли Ответ.КодСостояния >= 500 Тогда
		РезультатЗапроса.ТекстОшибки = НСтр("ru = 'Внутренняя ошибка сервиса.'");
	ИначеЕсли Ответ.КодСостояния <> 200 Тогда
		РезультатЗапроса.ТекстОшибки = НСтр("ru = 'Неизвестная ошибка.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатЗапроса.ТекстОшибки) Тогда
		ПодробноеПредставлениеОшибки = СтрШаблон(
			"Адрес: %1
			|Тело: %2
			|Код ответа: %3",
			СоединениеССервисом.Сервер + Запрос.АдресРесурса,
			Запрос.ПолучитьТелоКакСтроку(), Ответ.КодСостояния);
		ЗаписатьОшибкуПодключенияКОблачномуЭДО(РезультатЗапроса.ТекстОшибки,
			ПодробноеПредставлениеОшибки);
		Возврат РезультатЗапроса;
	КонецЕсли;
	
	ТелоСтрокой = Ответ.ПолучитьТелоКакСтроку();
	
	Попытка
		ДанныеОтвета = ОбщегоНазначения.JSONВЗначение(ТелоСтрокой,,Ложь); // Структура
	Исключение
		РезультатЗапроса.ТекстОшибки = НСтр("ru = 'Некорректный ответ сервиса.'");
		ЗаписатьОшибкуПодключенияКОблачномуЭДО(РезультатЗапроса.ТекстОшибки,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат РезультатЗапроса;
	КонецПопытки;
	
	РезультатЗапроса.Данные = ДанныеОтвета;
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Параметры:
//  Данные - Неопределено,Структура
//  ТекстОшибки - Строка
// 
// Возвращаемое значение:
//  Булево - Есть ошибка в данных результата запроса
Функция ЕстьОшибкаВДанныхРезультатаЗапроса(Данные, ТекстОшибки = "")
	ЕстьОшибка = Ложь;
	ОбщиеДанные = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Данные, "general"); // Структура
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОбщиеДанные, "error", Ложь) Тогда
		ТекстОшибки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОбщиеДанные, "message", ""); // Строка
		ЕстьОшибка = Истина;
	КонецЕсли;
	Возврат ЕстьОшибка;
КонецФункции

// Параметры:
//  КраткоеПредставление - Строка
//  ПодробноеПредставление - Строка
Процедура ЗаписатьОшибкуПодключенияКОблачномуЭДО(Знач КраткоеПредставление, Знач ПодробноеПредставление) Экспорт
	ВидОперации = НСтр("ru = 'Подключение облачного ЭДО'");
	ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробноеПредставление, КраткоеПредставление);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
