#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает элемент справочника - ключ аналитики учета плана продаж, если его нет, то он будет создан
//
// Параметры:
//	ПараметрыАналитики - ВыборкаИзРезультатаЗапроса, Структура - значения полей, по которым создается ключ:
//		* Подразделение - СправочникСсылка.СтруктураПредприятия
//		* Менеджер - СправочникСсылка.Пользователи
//		* Партнер - СправочникСсылка.Партнеры
//		* Номенклатура - СправочникСсылка.Номенклатура
//		* Склад - СправочникСсылка.Склады
//		* Аналитика1 - СправочникСсылка
//		* Аналитика2 - СправочникСсылка
//		* Аналитика3 - СправочникСсылка
//
// Возвращаемое значение:
//	СправочникСсылка.CRM_КлючиАналитикиПланаПродаж
//
Функция ЗначениеКлючаАналитики(ПараметрыАналитики) Экспорт

	НаборЗаписей = ПолучитьНаборЗаписей(ПараметрыАналитики);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0
		И Не ЗначениеЗаполнено(НаборЗаписей[0].КлючАналитики) Тогда
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Если НаборЗаписей.Количество() > 0
		И ЗначениеЗаполнено(НаборЗаписей[0].КлючАналитики) Тогда
		Результат = НаборЗаписей[0].КлючАналитики;
	Иначе
		Результат = СоздатьКлючАналитики(ПараметрыАналитики);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Создает элемент справочника - ключ аналитики учета.
//
// Параметры:
//	ПараметрыАналитики - ВыборкаИзРезультатаЗапроса, Структура - значения полей, по которым создается ключ:
//		* Подразделение - СправочникСсылка.СтруктураПредприятия
//		* Менеджер - СправочникСсылка.Пользователи
//		* Партнер - СправочникСсылка.Партнеры
//		* Номенклатура - СправочникСсылка.Номенклатура
//		* ГруппаНоменклатуры - СправочникСсылка.Номенклатура
//		* ВидНоменклатуры - СправочникСсылка.ВидНоменклатуры
//		* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности
//		* Склад - СправочникСсылка.Склады
//		* ТоварнаяКатегория - СправочникСсылка.ТоварныеКатегории
//	ЗаписьПриОбновленииИБ - Булево
//
// Возвращаемое значение:
//	СправочникСсылка.CRM_КлючиАналитикиПланаПродаж
//
Функция СоздатьКлючАналитики(ПараметрыАналитики, ЗаписьПриОбновленииИБ = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = ПолучитьНаборЗаписей(ПараметрыАналитики);
	
	НачатьТранзакцию(); // Создание нового ключа аналитики.
	Попытка
		СтрокаНабора = НаборЗаписей[0];
		
		СправочникОбъект = Справочники.CRM_КлючиАналитикиПланаПродаж.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СправочникОбъект, СтрокаНабора, "Подразделение, Менеджер, Партнер, Номенклатура, Склад,
			| Аналитика1, Аналитика2, Аналитика3");
		
		СправочникОбъект.Наименование = ПолучитьПолноеНаименованиеКлючаАналитики(СправочникОбъект);
		
		Если ЗаписьПриОбновленииИБ Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
		Иначе
			СправочникОбъект.Записать();
		КонецЕсли;
		
		СтрокаНабора.КлючАналитики = СправочникОбъект.Ссылка;
		
		Если ЗаписьПриОбновленииИБ Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Ложь, Истина);
		Иначе
			НаборЗаписей.Записать(Ложь);
		КонецЕсли;
		
		Результат = СправочникОбъект.Ссылка;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		// во время инициализации ключа, данный ключ уже был создан в ИБ другим сеансом.
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда // запись не создана из-за ошибки заполнения полей.
			ВызватьИсключение;
		Иначе
			Результат = НаборЗаписей[0].КлючАналитики;
		КонецЕсли;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры генерации ключей аналитики. Используется в обработчиках обновления.
// Возвращаемое значение:
//	Структура - Структура содержит поля: ЕстьНеобработанныеКлючи, ИзмененаАналитика, СоздаватьНовыеКлючи.
Функция ПараметрыЗаполненияКлючейАналитики() Экспорт
	Возврат Новый Структура("ИзмененаАналитика,СоздаватьВКлючи", Ложь, Истина);
КонецФункции

// Заполняет поле АналитикаУчетаПланаПродаж в коллекции, содержащей Подразделение, Менеджер и т.д.
//
// Параметры:
//  Коллекция			 - ТабличнаяЧасть	 - Коллекция, в которой производится заполнение аналитики учета плана продаж.
//  ПараметрыЗаполнения	 - Структура - Параметры заполнения ключей аналитики					 - 
//
Процедура ЗаполнитьВКоллекции(Коллекция, ПараметрыЗаполнения = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ПараметрыЗаполненияКлючейАналитики();
	КонецЕсли;
	
	
	Запрос = Новый Запрос(ТекстЗначенияКлючейАналитикиВКоллекции());
	Запрос.УстановитьПараметр("Коллекция", Коллекция);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.АналитикаУчетаПланаПродаж) Тогда
			Если ПараметрыЗаполнения.СоздаватьВКлючи Тогда
				КлючАналитики = ЗначениеКлючаАналитики(Выборка);
			Иначе
				ТекстИсключения = НСтр("ru = 'Ошибка при заполнении ключей в коллекции: есть аналитики,
					| по которым ключи еще не созданы.';
										|en = 'An error occurred while populating keys in collection: there are dimensions for which keys are not created.'");
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.CRM_КлючиАналитикиПланаПродаж,
					,
					ТекстИсключения);
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
		Иначе
			КлючАналитики = Выборка.АналитикаУчетаПланаПродаж;
		КонецЕсли;
		
		Коллекция[Выборка.Индекс]["АналитикаУчетаПланаПродаж"] = КлючАналитики;
		
		ПараметрыЗаполнения.ИзмененаАналитика = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Формирует структуру, определяющую, какие места учета использовать для различных типов номенклатуры
// при заполнении ключей аналитики в табчастях товаров.
//
// Параметры:
//	Операция - ПеречислениеСсылка.ХозяйственныеОперации,
//		ПеречислениеСсылка.ТипыОперацийВводаОстатков,
//		ПеречислениеСсылка.ТипыМестХранения - Хоз.операция документа.
//	Склад - СправочникСсылка.Склады - Склад, по которому формируется ключ.
//	Подразделение - СправочникСсылка.СтруктураПредприятия - Подразделение, по которому формируется ключ.
//	Партнер - СправочникСсылка.Партнеры - Партнер, по которому формируется ключ.
//	Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор, по которому формируется ключ.
//
// Возвращаемое значение:
//	Структура:
//		* Произвольный - Содержит место учета по-умолчанию.
//		* Работа - Содержит место учета для работ.
//
Функция МестаУчета(Операция, Склад, Подразделение, Партнер, Договор = Неопределено) Экспорт
	Хозоперации = Перечисления["ХозяйственныеОперации"];
	ОперацииОстатков = Перечисления["ТипыОперацийВводаОстатков"];
	ОперацииМестаХранения = Перечисления["ТипыМестХранения"];
	
	СкладУчета = ?(Склад = Неопределено, Справочники["Склады"].ПустаяСсылка(), Склад);
	ПодразделениеУчета = ?(Подразделение = Неопределено, Справочники.СтруктураПредприятия.ПустаяСсылка(), Подразделение);
	ПартнерУчета = ?(Партнер = Неопределено, Справочники.Партнеры.ПустаяСсылка(), Партнер);
	ДоговорУчета = ?(Договор = Неопределено, Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), Договор);
	
	МестаУчета = Новый Структура("Произвольный, Работа");
	
	ИспользоватьПартнера =
		(Операция = Хозоперации.ОтчетКомиссионера)
		Или (Операция = Хозоперации.ОтчетКомитенту)
		Или (Операция = Хозоперации.ПроизводствоУПереработчика)
		Или (Операция = Хозоперации.ВыкупВозвратнойТарыКлиентом)
		Или (Операция = ОперацииОстатков.ОстаткиТоваровПереданныхНаКомиссию)
		Или (Операция = ОперацииОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам)
		Или (Операция = ОперацииОстатков.ОстаткиМатериаловПереданныхПереработчикам);
	
	ИспользоватьДоговор = 
		(Операция = Хозоперации.ЗакупкаВСтранахЕАЭСТоварыВПути)
		Или (Операция = Хозоперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути)
		Или (Операция = Хозоперации.ЗакупкаПоИмпортуТоварыВПути)
		Или (Операция = Хозоперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути)
		Или (Операция = Хозоперации.ЗакупкаУПоставщикаТоварыВПути)
		Или (Операция = Хозоперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути)
		Или (Операция = Хозоперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки)
		Или (Операция = Хозоперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка)
		Или (Операция = Хозоперации.ЗакупкаУПоставщикаФактуровкаПоставки)
		Или (Операция = Хозоперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка)
		Или (Операция = Хозоперации.ПередачаНаХранениеСПравомПродажи)
		Или (Операция = Хозоперации.ВыкупТоваровХранителем)
		Или (Операция = Хозоперации.ВозвратОтХранителя)
		Или (Операция = ОперацииМестаХранения.ДоговорКонтрагента);
	
	ИспользоватьПодразделение = (Операция = ОперацииМестаХранения.Подразделение);
	
	МестаУчета.Произвольный = СкладУчета;
	Если ИспользоватьПартнера Тогда
		МестаУчета.Произвольный = ПартнерУчета;
	ИначеЕсли ИспользоватьДоговор Тогда
		МестаУчета.Произвольный = ДоговорУчета;
	ИначеЕсли ИспользоватьПодразделение Тогда
		МестаУчета.Произвольный = ПодразделениеУчета;
	КонецЕсли;
	МестаУчета.Работа = ПодразделениеУчета;
	
	Возврат МестаУчета;
КонецФункции

// Возвращает структуру полей выбора информации из коллекции для формирования аналитики учета номенклатуры.
//
// Возвращаемое значение:
//	Структура - содержит реальные имена полей коллекции для получения и формирования аналитики.
//		содержит две секции, если значение ключа Неопределено, то имя поля должно браться из имени ключа.
//		секция идентификации {Номенклатура, Характеристика, АналитикаУчетаНоменклатуры, СтатусУказанияСерий, Серия,
//		Назначение},
//			все ключи заданы.
//		секция места учета {Произвольный, [Товар, ВозвратнаяТара, Услуга, ] Работа}, ключи Произвольный и Работа заданы.
//			реквизиты этой секции должны содержать имена колонок коллекции, откуда надо брать значения для одноименных
//			типов номенклатуры.
//
Функция ИменаПолейКоллекцииПоУмолчанию() Экспорт
	
	ИменаПолей = Новый Структура();
	ИменаПолей.Вставить("Номенклатура", "Номенклатура");
	ИменаПолей.Вставить("Характеристика", "Характеристика");
	ИменаПолей.Вставить("АналитикаУчетаНоменклатуры", "АналитикаУчетаНоменклатуры");
	ИменаПолей.Вставить("СтатусУказанияСерий", "СтатусУказанияСерий");
	ИменаПолей.Вставить("Серия", "Серия");
	ИменаПолей.Вставить("Назначение", "Назначение");
	ИменаПолей.Вставить("СтатьяКалькуляции", "");
	ИменаПолей.Вставить("Произвольный", "");
	ИменаПолей.Вставить("Работа", "");
	
	Возврат ИменаПолей;
КонецФункции

// Возвращает структуру полей выбора информации из коллекции для формирования аналитики учета номенклатуры.
//
// Возвращаемое значение:
//	Структура - содержит реальные имена полей коллекции для получения и формирования аналитики.
//
Функция ИменаПолейДополненияКоллекцииПоУмолчанию() Экспорт
	
	ИменаПолей = Новый Структура();
	ИменаПолей.Вставить("АналитикаУчетаНоменклатуры", "АналитикаУчетаНоменклатуры");
	ИменаПолей.Вставить("ЗаполняемаяАналитикаУчетаНоменклатуры", "АналитикаУчетаНоменклатуры");
	ИменаПолей.Вставить("Номенклатура", "");
	ИменаПолей.Вставить("Характеристика", "");
	ИменаПолей.Вставить("Серия", "");
	ИменаПолей.Вставить("Склад", "");
	ИменаПолей.Вставить("МестоХранения", "");
	ИменаПолей.Вставить("СтатьяКалькуляции", "");
	ИменаПолей.Вставить("ВидЗапасов", "ВидЗапасов");
	
	Возврат ИменаПолей;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

Функция ПолучитьНаборЗаписей(ПараметрыАналитики)
	
	// В параметрах аналитики могут быть не все свойства
	СтруктураАналитики = Новый Структура("Подразделение, Менеджер, Партнер, Номенклатура, Склад,
			| Аналитика1, Аналитика2, Аналитика3");
	
	ЗаполнитьЗначенияСвойств(СтруктураАналитики, ПараметрыАналитики);
	
	Если Не (ЗначениеЗаполнено(СтруктураАналитики.Подразделение) Или ЗначениеЗаполнено(СтруктураАналитики.Менеджер)) Тогда
		
		ВызватьИсключение НСтр("ru = 'Ошибка при получении набора регистра сведений CRM_АналитикаУчетаПланаПродаж: не указано подразделение или менеджер.'");
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.CRM_АналитикаУчетаПланаПродаж.СоздатьНаборЗаписей();
	
	Для Каждого КлючЗначение Из СтруктураАналитики Цикл
		НаборЗаписей.Отбор[КлючЗначение.Ключ].Установить(КлючЗначение.Значение);
	КонецЦикла;
	
	НоваяСтрока = НаборЗаписей.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураАналитики);
	
	Возврат НаборЗаписей;
	
КонецФункции

Функция ПолучитьПолноеНаименованиеКлючаАналитики(СправочникОбъект)

	Наименование = "";
		
	Если ЗначениеЗаполнено(СправочникОбъект.Подразделение) Тогда
		Наименование = Наименование + НСтр("ru = 'Подразделение';
											|en = ''") + ": " + СправочникОбъект.Подразделение + "; ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СправочникОбъект.Менеджер) Тогда
		Наименование = Наименование + НСтр("ru = 'Менеджер';
											|en = ''") + ": " + СправочникОбъект.Менеджер + "; ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СправочникОбъект.Партнер) Тогда
		Наименование = Наименование + НСтр("ru = 'Партнер';
											|en = ''") + ": " + СправочникОбъект.Партнер + "; ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СправочникОбъект.Номенклатура) Тогда
		Наименование = Наименование + НСтр("ru = 'Номенклатура';
											|en = ''") + ": " + СправочникОбъект.Номенклатура + "; ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СправочникОбъект.Склад) Тогда
		Наименование = Наименование + НСтр("ru = 'Склад';
											|en = ''") + ": " + СправочникОбъект.Склад + "; ";
	КонецЕсли;  	
	
	Если ЗначениеЗаполнено(СправочникОбъект.Аналитика1) Тогда
		Наименование = Наименование + НСтр("ru = 'Аналитика1';
											|en = ''") + ": " + СправочникОбъект.Аналитика1 + "; ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СправочникОбъект.Аналитика2) Тогда
		Наименование = Наименование + НСтр("ru = 'Аналитика2';
											|en = ''") + ": " + СправочникОбъект.Аналитика1 + "; ";
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СправочникОбъект.Аналитика3) Тогда
		Наименование = Наименование + НСтр("ru = 'Аналитика3';
											|en = ''") + ": " + СправочникОбъект.Аналитика1 + "; ";
	КонецЕсли;  	
   		
	Наименование = СокрЛП(Наименование);
	
	Если Прав(Наименование, 1) = ";" Тогда
		Наименование = СокрЛП(Сред(Наименование, 1, СтрДлина(Наименование) - 1));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Наименование) Тогда
		Наименование = "<>";
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеКлючейАналитикиВКоллекции

Функция ТекстЗначенияКлючейАналитикиВКоллекции()
// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
// Основное условие в соединении
// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Коллекция.НомерСтроки - 1 КАК Индекс,
	|	Коллекция.АналитикаУчетаПланаПродаж КАК АналитикаУчетаПланаПродаж,
	|	Коллекция.Подразделение КАК Подразделение,
	|	Коллекция.Менеджер КАК Менеджер,
	|	Коллекция.Партнер КАК Партнер,
	|	Коллекция.Склад КАК Склад,
	|	Коллекция.Номенклатура КАК Номенклатура,
	|	Коллекция.Аналитика1 КАК Аналитика1,
	|	Коллекция.Аналитика2 КАК Аналитика2,
	|	Коллекция.Аналитика3 КАК Аналитика3
	|ПОМЕСТИТЬ Коллекция
	|ИЗ
	|	&Коллекция КАК Коллекция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Коллекция.Индекс КАК Индекс,
	|	Аналитика.КлючАналитики КАК АналитикаУчетаПланаПродаж,
	|	Коллекция.Подразделение КАК Подразделение,
	|	Коллекция.Менеджер КАК Менеджер,
	|	Коллекция.Партнер КАК Партнер,
	|	Коллекция.Номенклатура КАК Номенклатура,
	|	Коллекция.Склад КАК Склад,
	|	Коллекция.Аналитика1 КАК Аналитика1,
	|	Коллекция.Аналитика2 КАК Аналитика2,
	|	Коллекция.Аналитика3 КАК Аналитика3
	|ИЗ
	|	Коллекция КАК Коллекция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_АналитикаУчетаПланаПродаж КАК Аналитика
	|		ПО (Аналитика.Подразделение = Коллекция.Подразделение)
	|			И (Аналитика.Менеджер = Коллекция.Менеджер)
	|			И (Аналитика.Партнер = Коллекция.Партнер)
	|			И (Аналитика.Номенклатура = Коллекция.Номенклатура)
	|			И (Аналитика.Склад = Коллекция.Склад)
	|			И (Аналитика.Аналитика1 = Коллекция.Аналитика1)
	|			И (Аналитика.Аналитика2 = Коллекция.Аналитика2)
	|			И (Аналитика.Аналитика3 = Коллекция.Аналитика3)
	|ГДЕ
	|	(Аналитика.КлючАналитики ЕСТЬ NULL
	|			ИЛИ Аналитика.КлючАналитики <> Коллекция.АналитикаУчетаПланаПродаж
	|			ИЛИ Аналитика.КлючАналитики = ЗНАЧЕНИЕ(Справочник.CRM_КлючиАналитикиПланаПродаж.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Коллекция";
// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
