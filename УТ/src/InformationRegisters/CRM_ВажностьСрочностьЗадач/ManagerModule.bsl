#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ПереходНаНовуюВерсию

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаВерсию_3_1_31_32(Параметры) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	CRM_ОбъектыАРМ.НаименованиеАРМ КАК НаименованиеАРМ,
		|	CRM_ОбъектыАРМ.ИзмерениеАРМ КАК ИзмерениеАРМ,
		|	CRM_ОбъектыАРМ.СостояниеИнтереса КАК СостояниеИнтереса,
		|	CRM_ОбъектыАРМ.Пользователь КАК Пользователь,
		|	CRM_ОбъектыАРМ.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.CRM_ОбъектыАРМ КАК CRM_ОбъектыАРМ
		|ГДЕ
		|	CRM_ОбъектыАРМ.НаименованиеАРМ = ""МоиДела""
		|	И CRM_ОбъектыАРМ.ИзмерениеАРМ <> ""Завершенные""
		|	И ТИПЗНАЧЕНИЯ(CRM_ОбъектыАРМ.Объект) = ТИП(Задача.ЗадачаИсполнителя)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапросаТаблица = Запрос.Выполнить().Выгрузить();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.CRM_ОбъектыАРМ";
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РезультатЗапросаТаблица, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаВерсию_3_1_31_32(Параметры) Экспорт
	
	МетаданныеРегистра    = Метаданные.РегистрыСведений.CRM_ОбъектыАРМ;
	ПолноеИмяРегистра     = МетаданныеРегистра.ПолноеИмя();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ИмяВременнойТаблицы = "ВТДанныеДляОбработки";

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РезультатСозданияТаблицы = 
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь, ПолноеИмяРегистра, МенеджерВременныхТаблиц, ДополнительныеПараметры);
	Если Не РезультатСозданияТаблицы.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Не РезультатСозданияТаблицы.ЕстьДанныеДляОбработки;
		Возврат;
	КонецЕсли;
	Если Не РезультатСозданияТаблицы.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТДанныеДляОбработки.НаименованиеАРМ КАК НаименованиеАРМ,
	|	ВТДанныеДляОбработки.ИзмерениеАРМ КАК ИзмерениеАРМ,
	|	ВТДанныеДляОбработки.СостояниеИнтереса КАК СостояниеИнтереса,
	|	ВТДанныеДляОбработки.Пользователь КАК Пользователь,
	|	ВТДанныеДляОбработки.Объект КАК Объект
	|ИЗ
	|	ВТДанныеДляОбработки КАК ВТДанныеДляОбработки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	СекундВСутках = 24 * 60 * 60;
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.CRM_ВажностьСрочностьЗадач.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Задача.Установить(Выборка.Объект);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
		ЭлементБлокировки.УстановитьЗначение("НаименованиеАРМ", Выборка.НаименованиеАРМ);
		ЭлементБлокировки.УстановитьЗначение("ИзмерениеАРМ", Выборка.ИзмерениеАРМ);
		ЭлементБлокировки.УстановитьЗначение("СостояниеИнтереса", Выборка.СостояниеИнтереса);
		ЭлементБлокировки.УстановитьЗначение("Пользователь", Выборка.Пользователь);
		ЭлементБлокировки.УстановитьЗначение("Объект", Выборка.Объект);
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка.Заблокировать();
			
			Запись = НаборЗаписей.Добавить();
			Запись.Задача = Выборка.Объект;
			Запись.Важная = Ложь;
			Запись.Срочная = Ложь;
			Запись.РучнаяУстановкаВажностиИСрочности = Ложь;
			Запись.ТребуетсяПересчет = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени("РегистрСведений.CRM_ОбъектыАРМ");
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать записи в %ИмяОбъекта%. По причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", "РегистрСведений.CRM_ОбъектыАРМ");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%",    ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта, , 
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь,
		 "РегистрСведений.CRM_ВажностьСрочностьЗадач");
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Процедуре РегистрСведений.CRM_ВажностьСрочностьЗадач.ОбработатьДанныеДляПереходаНаВерсию_3_1_31_32 " 
			+ "не удалось обработать некоторые объекты (пропущены): %1'"), ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			 УровеньЖурналаРегистрации.Информация,
		Метаданные.РегистрыСведений.CRM_ВажностьСрочностьЗадач, ,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Процедура РегистрСведений." 
			+ "CRM_ВажностьСрочностьЗадач.ОбработатьДанныеДляПереходаНаВерсию_3_1_31_32 обработала очередную порцию объектов: %1'"),
			ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
