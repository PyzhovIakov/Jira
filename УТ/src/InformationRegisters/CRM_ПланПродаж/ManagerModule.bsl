#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
	
// Выполняет очистку прогноза
//
// Параметры:
//  ПланПродаж	 - 	СправочникСсылка.CRM_ПланПродаж - План продаж, для которого требуется очистить прогноз
//
Процедура ОчиститьПрогноз(ПланПродаж) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ПланПродаж.ПланПродаж КАК ПланПродаж,
		|	CRM_ПланПродаж.ПериодПлана КАК ПериодПлана,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж КАК АналитикаУчетаПланаПродаж,
		|	CRM_ПланПродаж.УровеньИерархии КАК УровеньИерархии,
		|	CRM_ПланПродаж.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	CRM_ПланПродаж.ИдентификаторСтрокиРодителя КАК ИдентификаторСтрокиРодителя,
		|	CRM_ПланПродаж.Комментарий КАК Комментарий,
		|	CRM_ПланПродаж.ДатаИзменения КАК ДатаИзменения,
		|	CRM_ПланПродаж.АвторИзменения КАК АвторИзменения,
		|	CRM_ПланПродаж.Количество КАК Количество,
		|	CRM_ПланПродаж.Сумма КАК Сумма,
		|	0 КАК КоличествоПрогноз,
		|	0 КАК СуммаПрогноз
		|ИЗ
		|	РегистрСведений.CRM_ПланПродаж КАК CRM_ПланПродаж";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗаписьРегистра = РегистрыСведений.CRM_ПланПродаж.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ВыборкаДетальныеЗаписи);
		
		Попытка
			ЗаписьРегистра.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

// Выполняет расчет прогноза по плану продаж
//
// Параметры:
//  ПланПродаж	 - СправочникСсылка.CRM_ПланПродаж	 - План продаж, для которого требуется рассчитать прогноз
//
Процедура РассчитатьПрогнозПоПлануПродаж(ПланПродаж) Экспорт
	
	ОчиститьПрогноз(ПланПродаж);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ПланПродаж.ПланПродаж КАК ПланПродаж,
		|	CRM_ПланПродаж.ПериодПлана КАК ПериодПлана,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж КАК АналитикаУчетаПланаПродаж,
		|	CRM_ПланПродаж.УровеньИерархии КАК УровеньИерархии,
		|	CRM_ПланПродаж.Количество КАК Количество,
		|	CRM_ПланПродаж.Сумма КАК Сумма,
		|	CRM_ПланПродаж.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	CRM_ПланПродаж.ИдентификаторСтрокиРодителя КАК ИдентификаторСтрокиРодителя,
		|	CRM_ПланПродаж.Комментарий КАК Комментарий,
		|	CRM_ПланПродаж.ДатаИзменения КАК ДатаИзменения,
		|	CRM_ПланПродаж.АвторИзменения КАК АвторИзменения
		|ПОМЕСТИТЬ ФактическиеЗначения
		|ИЗ
		|	РегистрСведений.CRM_ПланПродаж КАК CRM_ПланПродаж
		|ГДЕ
		|	CRM_ПланПродаж.ПланПродаж = &ПланПродаж
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	CRM_ПланПродаж.ПланПродаж КАК ПланПродаж,
		|	CRM_ПланПродаж.ПериодПлана КАК ПериодПлана,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж КАК АналитикаУчетаПланаПродаж,
		|	CRM_ПланПродаж.УровеньИерархии КАК УровеньИерархии,
		|	CRM_ПланПродаж.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	CRM_ПланПродаж.ИдентификаторСтрокиРодителя КАК ИдентификаторСтрокиРодителя,
		|	CRM_ПланПродаж.Комментарий КАК Комментарий,
		|	CRM_ПланПродаж.ДатаИзменения КАК ДатаИзменения,
		|	CRM_ПланПродаж.АвторИзменения КАК АвторИзменения,
		|	СУММА(ФактическиеЗначения.Количество) КАК КоличествоПрогноз,
		|	СУММА(ФактическиеЗначения.Сумма) КАК СуммаПрогноз,
		|	CRM_ПланПродаж.Количество КАК Количество,
		|	CRM_ПланПродаж.Сумма КАК Сумма
		|ИЗ
		|	РегистрСведений.CRM_ПланПродаж КАК CRM_ПланПродаж
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФактическиеЗначения КАК ФактическиеЗначения
		|		ПО CRM_ПланПродаж.ПланПродаж = ФактическиеЗначения.ПланПродаж
		|			И (CRM_ПланПродаж.ИдентификаторСтроки = ФактическиеЗначения.ИдентификаторСтрокиРодителя)
		//|			И (CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Подразделение = ФактическиеЗначения.АналитикаУчетаПланаПродаж.Подразделение.Родитель
		//|				ИЛИ CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Подразделение = ФактическиеЗначения.АналитикаУчетаПланаПродаж.Подразделение)
		// // условие на равенство выше необходимо, когда идет стыков записей план на менеджеров
			// и строк самих менеджеров, т.к. подразделения в строках
		// // планирования и им подчиненных в данном случае - одинаковые
		//|			И (CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Менеджер = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		//|				ИЛИ CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Менеджер = ФактическиеЗначения.АналитикаУчетаПланаПродаж.Менеджер)
		//|			И (CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		//|				ИЛИ CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Партнер = ФактическиеЗначения.АналитикаУчетаПланаПродаж.Партнер)
		//|			И (CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		//|				ИЛИ CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Номенклатура = ФактическиеЗначения.АналитикаУчетаПланаПродаж.Номенклатура)
		//|			И (CRM_ПланПродаж.АналитикаУчетаПланаПродаж.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
		//|				ИЛИ CRM_ПланПродаж.АналитикаУчетаПланаПродаж.НаправлениеДеятельности = ФактическиеЗначения.АналитикаУчетаПланаПродаж.НаправлениеДеятельности)
		//|			И (CRM_ПланПродаж.АналитикаУчетаПланаПродаж.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)
		//|				ИЛИ CRM_ПланПродаж.АналитикаУчетаПланаПродаж.ТоварнаяКатегория = ФактическиеЗначения.АналитикаУчетаПланаПродаж.ТоварнаяКатегория)
		//|			И (CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		//|				ИЛИ CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Склад = ФактическиеЗначения.АналитикаУчетаПланаПродаж.Склад)
		|			И (CRM_ПланПродаж.УровеньИерархии + 1 = ФактическиеЗначения.УровеньИерархии)
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_ПланПродаж.ПланПродаж,
		|	CRM_ПланПродаж.ПериодПлана,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж,
		|	CRM_ПланПродаж.УровеньИерархии,
		|	CRM_ПланПродаж.ИдентификаторСтроки,
		|	CRM_ПланПродаж.ИдентификаторСтрокиРодителя,
		|	CRM_ПланПродаж.Комментарий,
		|	CRM_ПланПродаж.ДатаИзменения,
		|	CRM_ПланПродаж.АвторИзменения,
		|	CRM_ПланПродаж.Количество,
		|	CRM_ПланПродаж.Сумма";
	
	Запрос.УстановитьПараметр("ПланПродаж", ПланПродаж);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗаписьРегистра = РегистрыСведений.CRM_ПланПродаж.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ВыборкаДетальныеЗаписи);
		
		Попытка
			ЗаписьРегистра.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует название периода плана продаж
//
// Параметры:
//  Периодичность	 - Перечисления.Периодичность	 - периодичность плана продаж
//  ПериодПлана		 - Дата							 - период плана продаж
//  ПланПродаж		 - СправочникСсылка.CRM_ПланПродаж	 - план прдаж, для которого формируется название периода
// 
// Возвращаемое значение:
//  Строка - наименование периода плана продаж
//
Функция НазваниеПериодаПлана(Периодичность, ПериодПлана, ПланПродаж) Экспорт
	
	Результат = Новый Структура("Название", "");
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		
		Результат.Название = НСтр("ru = ''") + Формат(ПериодПлана, "ДФ=dd.MM.yy");
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		
		Если ПланПродаж.ОтображатьНомерНедели Тогда
			
			НомерНедели = Строка(НеделяГода(ПериодПлана));
			
			// Неделя находится в разных годах
			Если Год(НачалоНедели(ПериодПлана)) <> Год(КонецНедели(ПериодПлана)) Тогда
				НомерНедели = НомерНедели + "/1";
			КонецЕсли;
			
			Результат.Название = НомерНедели + НСтр("ru = ' неделя'");
			
		Иначе
			
			Результат.Название = Формат(НачалоНедели(ПериодПлана), "ДФ=dd.MM") + " - " 
				+ Формат(КонецНедели(ПериодПлана),
				 "ДФ=dd.MM"); 
			
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		
		Результат.Название = Формат(ПериодПлана, "ДФ='MMMM yyyy'");
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		
		РимскоеОбозначение = НомерКвартала(ПериодПлана).Представление;
			
		Результат.Название = РимскоеОбозначение + " " + НСтр("ru = 'Квартал'") + " " + Формат(ПериодПлана, "ДФ='yyyy'"); 
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		
		РимскоеОбозначение = НомерПолугодия(ПериодПлана).Представление;
			
		Результат.Название = РимскоеОбозначение + " " + НСтр("ru = 'Полугодие'") + " " + Формат(ПериодПлана, "ДФ='yyyy'");
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		
		Результат.Название = Формат(ПериодПлана, "ДФ=гггг") + " г.";
		
	КонецЕсли;
	
	Возврат Результат.Название;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НомерКвартала(ПериодПлана)
	
	Результат = Новый Структура("Номер, Представление");
	
	НомерКвартала = Число(Формат(ПериодПлана, "ДФ='к'"));
	РимскоеОбозначение = 0;
	
	Если НомерКвартала = 1 Тогда
		РимскоеОбозначение = "I";
	ИначеЕсли НомерКвартала = 2 Тогда
		РимскоеОбозначение = "II";
	ИначеЕсли НомерКвартала = 3 Тогда
		РимскоеОбозначение = "III";
	ИначеЕсли НомерКвартала = 4 Тогда
		РимскоеОбозначение = "IV";
	КонецЕсли;
	
	Результат.Номер = НомерКвартала;
	Результат.Представление = РимскоеОбозначение;
	
	Возврат Результат;
	
КонецФункции

Функция НомерПолугодия(ПериодПлана)
	
	Результат = Новый Структура("Номер, Представление");
	
	НомерПолугодия = Цел( (Месяц(ПериодПлана) - 1) / 6) + 1;
	РимскоеОбозначение = 0;
	
	Если НомерПолугодия = 1 Тогда
		РимскоеОбозначение = "I";
	ИначеЕсли НомерПолугодия = 2 Тогда
		РимскоеОбозначение = "II";
	КонецЕсли;
	
	Результат.Номер = НомерПолугодия;
	Результат.Представление = РимскоеОбозначение;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
