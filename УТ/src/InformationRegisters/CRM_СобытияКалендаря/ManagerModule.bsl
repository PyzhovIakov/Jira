#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Календари

// Функция - Событие календаря по идентификатору
//  Функция возвращает запись регистра сведений CRM_СобытияКалендаря.
//
// Параметры:
//  Идентификатор	 - Строка					 - Идентификатор события.
//  Пользователь	 - СправочникСсылка.Пользователи - Пользователь, для которого записано событие.
// 
// Возвращаемое значение:
//  ЗаписьРегистра - Запись регистра сведений CRM_СобытияКалендаря.
//
Функция СобытиеКалендаряПоИдентификатору(Идентификатор, Пользователь) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаписиКалендаря.Объект КАК Ссылка
	|ИЗ
	|	РегистрСведений.CRM_СобытияКалендаря КАК ЗаписиКалендаря
	|ГДЕ
	|	ЗаписиКалендаря.Ключ = &Ключ
	|	И ЗаписиКалендаря.Пользователь = &Пользователь
	|	И ЗаписиКалендаря.Объект ССЫЛКА Документ.CRM_Взаимодействие");
	
	Запрос.УстановитьПараметр("Ключ", CRM_СинхронизацияКалендарей.КлючИзИдентификатора(
		Идентификатор, "РегистрыСведений.CRM_СобытияКалендаря.ОбъектПоИдентификатору()"));
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Результат = Документы.CRM_Взаимодействие.СоздатьДокумент();
		Результат.Заполнить(Новый Структура);
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка.ПолучитьОбъект();
	
КонецФункции

// Функция - Идентификаторы по событию календаря
//
// Параметры:
//  Объект		 - Ссылка						 - Событие календаря.
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого записано событие.
// 
// Возвращаемое значение:
//  Результат - Структура - Структура идентификаторов события.
//
Функция ИдентификаторыПоСобытиюКалендаря(Объект, Пользователь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор",				"");
	Результат.Вставить("ETag",						"");
	Результат.Вставить("ИндексЦвета",				"");
	Результат.Вставить("Гиперссылка",				"");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаписиКалендаря.Идентификатор КАК Идентификатор,
	|	ЗаписиКалендаря.ETag КАК ETag,
	|	ЗаписиКалендаря.ИндексЦвета КАК ИндексЦвета,
	|	ЗаписиКалендаря.Гиперссылка КАК Гиперссылка
	|ИЗ
	|	РегистрСведений.CRM_СобытияКалендаря КАК ЗаписиКалендаря
	|ГДЕ
	|	ЗаписиКалендаря.Пользователь = &Пользователь
	|	И ЗаписиКалендаря.Объект = &Объект");
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Объект", Объект);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	Возврат Результат;
	
КонецФункции

// Функция - Событие календаря по событию календаря
//  Функция возвращает запись регистра сведений CRM_СобытияКалендаря.
//
// Параметры:
//  Объект		 - Ссылка						 - Событие календаря.
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого записано событие.
// 
// Возвращаемое значение:
//  ЗаписьРегистра - Запись регистра сведений CRM_СобытияКалендаря.
//
Функция МенеджерЗаписиСобытияКалендаряПоИдентификатору(Объект, Пользователь) Экспорт
	
	НаборЗаписей = РегистрыСведений.CRM_СобытияКалендаря.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		МенеджерЗаписи = РегистрыСведений.CRM_СобытияКалендаря.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = Объект;
		МенеджерЗаписи.Пользователь = Пользователь;
	Иначе
		МенеджерЗаписи = РегистрыСведений.CRM_СобытияКалендаря.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, НаборЗаписей[0],
			"ПериодНачало, ПериодОкончание, Пользователь, Объект, Партнер");
		МенеджерЗаписи.Прочитать();
	КонецЕсли;

	Возврат МенеджерЗаписи;
	
КонецФункции

// Функция возвращает Истина, если сохранение изменения записей календарей прошло успешно.
//
// Параметры:
//  ОбрабатываемыеЭлементы	 - Массив	 - Обрабатываемые элементы.
// 
// Возвращаемое значение:
//   - Булево
//
Функция СохранитьИзмененияЗаписейКалендарей(ОбрабатываемыеЭлементы) Экспорт
	
	НезависимыеЗаписи = Новый Массив;
	ПодчиненныеИсточнику = Новый Соответствие;
	
	Для Каждого ОбрабатываемыйЭлемент Из ОбрабатываемыеЭлементы Цикл
		Если ЗначениеЗаполнено(ОбрабатываемыйЭлемент.Источник) 
			И ЗначениеЗаполнено(ОбрабатываемыйЭлемент.ЗаписьКалендаря) Тогда
			ЗаписиПоИсточнику = ПодчиненныеИсточнику.Получить(ОбрабатываемыйЭлемент.Источник);
			Если ЗаписиПоИсточнику = Неопределено Тогда
				ЗаписиПоИсточнику = Новый Массив;
				ЗаписиПоИсточнику.Добавить(ОбрабатываемыйЭлемент);
				ПодчиненныеИсточнику.Вставить(ОбрабатываемыйЭлемент.Источник, ЗаписиПоИсточнику);
			Иначе
				ЗаписиПоИсточнику.Добавить(ОбрабатываемыйЭлемент);
			КонецЕсли;
		Иначе
			НезависимыеЗаписи.Добавить(ОбрабатываемыйЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
	
		Для Каждого КлючИЗначение Из ПодчиненныеИсточнику Цикл
			
			ИсточникОбъект = КлючИЗначение.Ключ.ПолучитьОбъект();
			
			Если ОбрабатываемыйЭлемент.Свойство("ПометкаУдаления") Тогда
				ИсточникОбъект.УстановитьПометкуУдаления(ОбрабатываемыйЭлемент.ПометкаУдаления);
				Продолжить;
			КонецЕсли;
			
			ИсточникОбъект.ОбновитьИсточникПриИзмененииЗаписиКалендаря(КлючИЗначение.Значение);
			ИсточникОбъект.Записать();
			
		КонецЦикла;
		
		Для Каждого ОбрабатываемыйЭлемент Из НезависимыеЗаписи Цикл
			
			Если НЕ ЗначениеЗаполнено(ОбрабатываемыйЭлемент.ЗаписьКалендаря) 
				И НЕ ЗначениеЗаполнено(ОбрабатываемыйЭлемент.Источник) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ОбрабатываемыйЭлемент.ЗаписьКалендаря) <> Тип("ДокументСсылка." + "ЗадачаСотрудника")
				И ЗначениеЗаполнено(ОбрабатываемыйЭлемент.ЗаписьКалендаря) Тогда
				ЗаписьОбъект = ОбрабатываемыйЭлемент.ЗаписьКалендаря.ПолучитьОбъект();
			Иначе
				ЗаписьОбъект = ОбрабатываемыйЭлемент.Источник.ПолучитьОбъект();
			КонецЕсли;
			
			Если ОбрабатываемыйЭлемент.Свойство("ПометкаУдаления") Тогда
				ЗаписьОбъект.УстановитьПометкуУдаления(ОбрабатываемыйЭлемент.ПометкаУдаления);
				Продолжить;
			КонецЕсли;
			
			ЗаписьОбъект.ДатаНачала		= ОбрабатываемыйЭлемент.Начало;
			ЗаписьОбъект.ДатаОкончания	= ОбрабатываемыйЭлемент.Конец;
			ЗаписьОбъект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		Успешно = Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		Успешно = Ложь;
		ВызватьИсключение СтрШаблон(НСтр("ru='Не удалось сохранить изменения в календаре по причине: %1'"), ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Успешно;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
