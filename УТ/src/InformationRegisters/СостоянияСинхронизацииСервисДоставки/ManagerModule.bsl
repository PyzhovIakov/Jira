
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

// Регистрирует данные к обновлению в плане обмена ОбновлениеИнформационнойБазы
//  см. Стандарты и методики разработки прикладных решений: Параллельный режим отложенного обновления.
// 
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПолноеИмяРегистра = Метаданные.РегистрыСведений.СостоянияСинхронизацииСервисДоставки.ПолноеИмя();

	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияСинхронизацииСервисДоставки.ОрганизацияБизнесСети КАК ОрганизацияБизнесСети
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииСервисДоставки КАК СостоянияСинхронизацииСервисДоставки";
	
	Выгрузка = Запрос.Выполнить().Выгрузить();

	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Выгрузка, ДополнительныеПараметры);

КонецПроцедуры

// Обрабатывает данные, зарегистрированные в плане обмена ОбновлениеИнформационнойБазы
//  см. Стандарты и методики разработки прикладных решений: Параллельный режим отложенного обновления.
// 
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.СостоянияСинхронизацииСервисДоставки;
	ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();
	
	Если ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(
		Параметры.Очередь, ПолноеИмяОбъекта) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыборки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь, ПолноеИмяОбъекта, ПараметрыВыборки);
	
	ЕстьОтработанныеЗаписи = Ложь;
	ПроизошлаОшибка        = Ложь;
	ТекстСообщения         = "";
	
	Пока ОбновляемыеДанные.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			НаборЗаписейСостоянияСинхронизации = СоздатьНаборЗаписей();
			НаборЗаписейСостоянияСинхронизации.Отбор.ОрганизацияБизнесСети.Установить(ОбновляемыеДанные.ОрганизацияБизнесСети);
			
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписейСостоянияСинхронизации);
			
			НаборЗаписейСостоянияСинхронизации.Прочитать();
			
			Если НаборЗаписейСостоянияСинхронизации.Количество() = 0 Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Для Каждого ЗаписьСостоянияСинхронизации Из НаборЗаписейСостоянияСинхронизации Цикл
			
				Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ЗаписьСостоянияСинхронизации.УдалитьИдентификаторДокумента) Тогда
					Продолжить;
				КонецЕсли;
				
				//Трансформация значений измерений регистра "СостоянияСинхронизацииСервисДоставки"
				ЗаписьСостоянияСинхронизации.ИдентификаторДокумента
					= Новый УникальныйИдентификатор(ЗаписьСостоянияСинхронизации.УдалитьИдентификаторДокумента);
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейСостоянияСинхронизации);
			
			ЕстьОтработанныеЗаписи = Истина;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать записи по организации %1 по причине: %2%3'");
			ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(
				ШаблонСообщения,
				ОбновляемыеДанные.ОрганизацияБизнесСети,
				Символы.ПС, 
				ПредставлениеОшибки);
			
			Событие = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
			ЗаписьЖурналаРегистрации(
				Событие, 
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеОбъекта,
				ОбновляемыеДанные.ОрганизацияБизнесСети,
				ТекстСообщения);
			
			ПроизошлаОшибка = Истина;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если Не ЕстьОтработанныеЗаписи И ПроизошлаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = 
		ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Установить состояние.
// Метод обеспечивает предотвращение одновременного запуска более одного процесса загрузки отложенных платежей.
// 
// Параметры:
//  СостояниеЗагрузки - Структура - Состояние загрузки
//  Отказ - Булево
Процедура УстановитьСостояние(СостояниеЗагрузки, Отказ = Ложь) Экспорт
	
	ПравоДоступаАктивныеПользователи = ПравоДоступа("АктивныеПользователи", Метаданные);
	
	ТекущийСеанс = ПолучитьТекущийСеансИнформационнойБазы();
	ТекущееФоновоеЗадание = ТекущийСеанс.ПолучитьФоновоеЗадание();
	Если ТекущееФоновоеЗадание = Неопределено Тогда
		
		Если СостояниеЗагрузки.Состояние = Перечисления.СостоянияСинхронизацииСервисДоставки.Выполняется
			И Не ПравоДоступаАктивныеПользователи Тогда
			
			Отказ = Истина;
			ТекстОшибки = НСтр("ru = 'Установка состояния загрузки наложенных платежей возможна только в фоновом задании'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			
			Возврат;
			
		КонецЕсли;
		
		АктивныйСеансИД = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	Иначе
		АктивныйСеансИД = ТекущееФоновоеЗадание.УникальныйИдентификатор;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
	
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияСинхронизацииСервисДоставки");
		ЭлементБлокировки.УстановитьЗначение("ТипСинхронизации", СостояниеЗагрузки.ТипСинхронизации);
		ЭлементБлокировки.УстановитьЗначение("ТипГрузоперевозки", СостояниеЗагрузки.ТипГрузоперевозки);
		ЭлементБлокировки.УстановитьЗначение("ОрганизацияБизнесСети", СостояниеЗагрузки.ОрганизацияБизнесСети);
		ЭлементБлокировки.УстановитьЗначение("ШагЗагрузки", СостояниеЗагрузки.ШагЗагрузки);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запись = РегистрыСведений.СостоянияСинхронизацииСервисДоставки.СоздатьМенеджерЗаписи();
		Запись.ТипСинхронизации = СостояниеЗагрузки.ТипСинхронизации;
		Запись.ТипГрузоперевозки = СостояниеЗагрузки.ТипГрузоперевозки;
		Запись.ОрганизацияБизнесСети = СостояниеЗагрузки.ОрганизацияБизнесСети;
		Запись.ШагЗагрузки = СостояниеЗагрузки.ШагЗагрузки;
		Запись.Прочитать();
		
		Если Запись.Выбран() 
			И Запись.Состояние = Перечисления.СостоянияСинхронизацииСервисДоставки.Выполняется 
			И Запись.АктивныйСеансИД <> АктивныйСеансИД Тогда
			
			// Проверим существование сеанса записи
			ЕстьДругойИсполняемыйСеанс = Ложь;
			Если ПравоДоступаАктивныеПользователи Тогда
				ВсеСеансы = ПолучитьСеансыИнформационнойБазы();
				Для каждого ЭлемСеанс Из ВсеСеансы Цикл
					ФоновоеСеанса = ЭлемСеанс.ПолучитьФоновоеЗадание();
					Если ФоновоеСеанса = Неопределено Тогда
						Продолжить;
					КонецЕсли; 
					
					Если ФоновоеСеанса.УникальныйИдентификатор = Запись.АктивныйСеансИД Тогда
						ЕстьДругойИсполняемыйСеанс = Истина;
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			Иначе
				ЕстьДругойИсполняемыйСеанс = Истина;
			КонецЕсли; 
			
			Если ЕстьДругойИсполняемыйСеанс Тогда
				Отказ = Истина;
				Если СостояниеЗагрузки.ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисДоставки.ЗагрузкаДанныхПоНаложеннымПлатежам Тогда
					ТекстОшибки = НСтр("ru = 'Возможно загрузка наложенных платежей выполняется в другом сеансе(%1). Изменение состояния запрещено.'");
				ИначеЕсли СостояниеЗагрузки.ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисДоставки.СинхронизацияПоЧастичнойДоставке Тогда
					ТекстОшибки = НСтр("ru = 'Возможно загрузка частичной доставки выполняется в другом сеансе(%1). Изменение состояния запрещено.'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Возможно загрузка данных из сервиса интеграции выполняется в другом сеансе(%1). Изменение состояния запрещено.'");
				КонецЕсли;
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(АктивныйСеансИД) 
			И СостояниеЗагрузки.Состояние = Перечисления.СостоянияСинхронизацииСервисДоставки.Выполняется
			И СостояниеЗагрузки.ШагЗагрузки = Перечисления.ШагиСинхронизацииСервисДоставки.ЗагрузкаИзСервисаИнтеграции Тогда
			
			Если СостояниеЗагрузки.ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисДоставки.ЗагрузкаДанныхПоНаложеннымПлатежам Тогда
				ТекстОшибки = НСтр("ru = 'Загрузка/обработка наложенных платежей выполняется только фоновым заданием.'");
			ИначеЕсли СостояниеЗагрузки.ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисДоставки.СинхронизацияПоЧастичнойДоставке Тогда
				ТекстОшибки = НСтр("ru = 'Загрузка/обработка частичной доставки выполняется только фоновым заданием.'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Загрузка/обработка данных из сервиса интеграции выполняется только фоновым заданием.'");
			КонецЕсли;
			ВызватьИсключение ТекстОшибки;
				
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(Запись, СостояниеЗагрузки);
		Запись.ДатаПоследнегоИзменения = ТекущаяУниверсальнаяДата();
		Запись.АктивныйСеансИД = АктивныйСеансИД;
		
		Запись.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Отказ = Истина;
		
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если СостояниеЗагрузки.ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисДоставки.ЗагрузкаДанныхПоНаложеннымПлатежам Тогда
			ИмяСобытия = НСтр("ru='Сервис доставки.Обработка наложенных платежей.'",ОбщегоНазначения.КодОсновногоЯзыка());
		ИначеЕсли СостояниеЗагрузки.ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисДоставки.СинхронизацияПоЧастичнойДоставке Тогда
			ИмяСобытия = НСтр("ru='Сервис доставки.Обработка частичной доставки.'",ОбщегоНазначения.КодОсновногоЯзыка());
		Иначе
			ИмяСобытия = НСтр("ru='Сервис доставки.Обработка данных из сервиса интеграции.'",ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
			
		ОбщегоНазначения.СообщитьПользователю(ИнформацияОбОшибке().Описание);
	КонецПопытки;
	
КонецПроцедуры

// Получение текущего состояния синхронизации по указанным отборам
// 
// Параметры:
//  ТипГрузоперевозки - ПеречислениеСсылка.ТипыГрузоперевозки - Тип грузоперевозки. Определяет сервис перевозчика, с которым проиходит синхронизация.
//  ОрганизацияБизнесСети - СправочникСсылка.Организации - Организация, подключеная к 1С:Бизнес-сеть.
//  ШагЗагрузки - ПеречислениеСсылка.ШагиСинхронизацииСервисДоставки - Шаг загрузки, для которого необходимо получить состояние.
//  ТипСинхронизации - ПеречислениеСсылка.ТипыСинхронизацииСервисДоставки - бизнес-процесс, возникающий в результате доставки товара.
// 
// Возвращаемое значение:
//  Структура - текущее состояние загрузки:
// * Результат - Булево - результат выполнения.
// * ТипСинхронизации - ПеречислениеСсылка.ТипыСинхронизацииСервисДоставки - тип синхронизируемых с сервисом интеграции данных.
// * ШагЗагрузки - Неопределено - текущий шаг обработки данных.
// * ДатаПоследнегоИзменения - Дата -
// * Состояние - ПеречислениеСсылка.СостоянияСинхронизацииСервисДоставки - текущее состояние обработки данных
// * ДатаРегистрации - Дата - дата регистрации основного события бизнес-процесса. Например дата получения наложенного платежа 
// * ИдентификаторДокумента - Строка - идентификатор заказа на доставку в сервисе интеграции
//
Функция ПолучитьТекущееСостояниеСинхронизации(ТипГрузоперевозки, ОрганизацияБизнесСети, ШагЗагрузки, ТипСинхронизации) Экспорт
	
	ТекущееСостояние = СтруктураСостояния();
	ТекущееСостояние.Результат = Ложь;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СостоянияСинхронизации.ТипСинхронизации,
	|	СостоянияСинхронизации.ТипГрузоперевозки,
	|	СостоянияСинхронизации.ОрганизацияБизнесСети,
	|	СостоянияСинхронизации.ШагЗагрузки,
	|	СостоянияСинхронизации.ДатаПоследнегоИзменения,
	|	СостоянияСинхронизации.Состояние,
	|	СостоянияСинхронизации.АктивныйСеансИД,
	|	СостоянияСинхронизации.ДатаРегистрации КАК ДатаРегистрации,
	|	СостоянияСинхронизации.ИдентификаторДокумента
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииСервисДоставки КАК СостоянияСинхронизации
	|ГДЕ
	|	СостоянияСинхронизации.ТипСинхронизации = &ТипСинхронизации
	|	И СостоянияСинхронизации.ТипГрузоперевозки = &ТипГрузоперевозки
	|	И СостоянияСинхронизации.ОрганизацияБизнесСети = &ОрганизацияБизнесСети
	|	И СостоянияСинхронизации.ШагЗагрузки = &ШагЗагрузки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТипСинхронизации", ТипСинхронизации);
	Запрос.УстановитьПараметр("ТипГрузоперевозки", ТипГрузоперевозки);
	Запрос.УстановитьПараметр("ОрганизацияБизнесСети", ОрганизацияБизнесСети);
	Запрос.УстановитьПараметр("ШагЗагрузки", ШагЗагрузки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ТекущееСостояние;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ТекущееСостояние, Выборка);
	ТекущееСостояние.Результат = Истина;
	
	Возврат ТекущееСостояние;
	
КонецФункции

// Описание состояния синхронизации данных с сервисом интеграции
// 
// Возвращаемое значение:
//  Структура - текущее состояние загрузки:
// * Результат - Булево - 
// * ТипСинхронизации - ПеречислениеСсылка.ТипыСинхронизацииСервисДоставки - тип синхронизируемых с сервисом интеграции данных
// * ШагЗагрузки - Неопределено - текущий шаг обработки данных
// * ДатаПоследнегоИзменения - Дата -
// * Состояние - ПеречислениеСсылка.СостоянияСинхронизацииСервисДоставки - текущее состояние обработки данных
// * ДатаРегистрации - Дата - дата регистрации основного события бизнес-процесса. Например дата получения наложенного платежа 
// * ИдентификаторДокумента - УникальныйИдентификатор - идентификатор заказа на доставку в сервисе интеграции
Функция СтруктураСостояния() Экспорт
	
	СтруктураРезультатаЗапроса = Новый Структура();
	
	СтруктураРезультатаЗапроса.Вставить("Результат", Ложь);
	СтруктураРезультатаЗапроса.Вставить("ТипСинхронизации", Перечисления.ТипыСинхронизацииСервисДоставки.ПустаяСсылка());
	СтруктураРезультатаЗапроса.Вставить("ТипГрузоперевозки", Перечисления.ТипыГрузоперевозки.ПустаяСсылка());
	СтруктураРезультатаЗапроса.Вставить("ОрганизацияБизнесСети", Неопределено);
	СтруктураРезультатаЗапроса.Вставить("ШагЗагрузки", Неопределено);
	СтруктураРезультатаЗапроса.Вставить("ДатаПоследнегоИзменения", Дата("00010101"));
	СтруктураРезультатаЗапроса.Вставить("Состояние", Неопределено);
	СтруктураРезультатаЗапроса.Вставить("АктивныйСеансИД", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	СтруктураРезультатаЗапроса.Вставить("ДатаРегистрации", Дата("00010101"));
	СтруктураРезультатаЗапроса.Вставить("ИдентификаторДокумента", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Возврат СтруктураРезультатаЗапроса;
	
КонецФункции

#КонецОбласти

#КонецЕсли