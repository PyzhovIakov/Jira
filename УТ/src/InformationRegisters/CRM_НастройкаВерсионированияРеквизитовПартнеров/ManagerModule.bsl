#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Эта функция больше не используется, она нужна для перехода с релизов меньше 2_0_6_2 на более поздние,
// для получения признака ведения версионирования нужно использовать выражение
// ПолучитьФункциональнуюОпцию("CRM_ВестиИсториюРеквизитовКлиентов").
//
// Возвращаемое значение:
//	Булево - признак использования версионирования.
//
Функция ПолучитьИспользованиеВерсионирования() Экспорт
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.CRM_НастройкаВерсионированияРеквизитовПартнеров) Тогда
		Запрос =
			Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Использовать ИЗ РегистрСведений.CRM_НастройкаВерсионированияРеквизитовПартнеров ГДЕ Использовать = ИСТИНА");
		Возврат Не Запрос.Выполнить().Пустой();
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// Процедура - Сохранить настройку версионирования в регистр.
//
// Параметры:
//  СтруктураНастройки	 - Структура - Структура настроек версионирования. Содержит поля:
//		* Реквизиты - Массив - имена реквизитов, которые необходимо версионировать в справочнике Партнеры.
//  	* РеквизитыКонтактногоЛица - Массив - имена реквизитов, которые необходимо версионировать в справочнике КонтактныеЛицаПартнеров.
//  	* РеквизитыИнтереса - Массив - имена реквизитов, которые необходимо версионировать в документе CRM_Интерес.
//
Процедура СохранитьНастройку(СтруктураНастройки) Экспорт
	МенеджерЗаписи = РегистрыСведений.CRM_НастройкаВерсионированияРеквизитовПартнеров.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ЗначениеНастройки = Новый ХранилищеЗначения(СтруктураНастройки);
	МенеджерЗаписи.Использовать = Истина;
	МенеджерЗаписи.Записать();
КонецПроцедуры

// Функция - Получить настройку версионирования объектов.
// 
// Возвращаемое значение:
//  Структура -  Структура настроек версионирования.
//  	Реквизиты - Массив с именами реквизитов, которые необходимо версионировать в справочнике Партнеры.
//  	РеквизитыКонтактногоЛица - Массив с именами реквизитов, которые необходимо версионировать в справочнике КонтактныеЛицаПартнеров.
//  	РеквизитыИнтереса - Массив с именами реквизитов, которые необходимо версионировать в документе CRM_Интерес.
//
Функция ПолучитьНастройку() Экспорт
	МенеджерЗаписи = РегистрыСведений.CRM_НастройкаВерсионированияРеквизитовПартнеров.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		Возврат Новый Структура("СтруктураНастройки", МенеджерЗаписи.ЗначениеНастройки.Получить());
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Функция - Получить список версионируемых реквизитов
// 
// Возвращаемое значение:
//  Список - СписокЗначений -  Возвращает полный список реквизитов версионирования справочника "Партнеры",
//  добавляет в список реквизиты ABCКласс и XYZКласс.
//
Функция ПолучитьСписокВерсионируемыхРеквизитов() Экспорт
	Список = Новый СписокЗначений();
	
	Настройка = РегистрыСведений.CRM_НастройкаВерсионированияРеквизитовПартнеров.ПолучитьНастройку();
	Если ТипЗнч(Настройка) = Тип("Структура") Тогда
		Если (ТипЗнч(Настройка.СтруктураНастройки) <> Тип("Структура")
			 Или Не Настройка.СтруктураНастройки.Свойство("Реквизиты")) Тогда
			Возврат Список;
		КонецЕсли;
	Иначе
		Возврат Список;
	КонецЕсли;
	Реквизиты = Настройка.СтруктураНастройки.Реквизиты;
	Если ТипЗнч(Реквизиты) <> Тип("Массив") Тогда
		Возврат Список;
	КонецЕсли;
	
	Для Каждого Реквизит Из Реквизиты Цикл
		Если ТипЗнч(Реквизит) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
			Список.Добавить(Реквизит, Строка(Реквизит));
		ИначеЕсли ТипЗнч(Реквизит) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			Список.Добавить(Реквизит, Строка(Реквизит));
		ИначеЕсли Реквизит = "Сегмент" Тогда
			Список.Добавить(Реквизит, НСтр("ru='Сегмент';en='Segment'"));
		Иначе
			НайденныйРеквизит = Неопределено;
			Для Каждого РеквизитМд Из Метаданные.Справочники.Партнеры.СтандартныеРеквизиты Цикл
				Если РеквизитМд.Имя = Реквизит Тогда
					НайденныйРеквизит = РеквизитМд;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НайденныйРеквизит = Неопределено Тогда
				Для Каждого РеквизитМд Из Метаданные.Справочники.Партнеры.Реквизиты Цикл
					Если РеквизитМд.Имя = Реквизит Тогда
						НайденныйРеквизит = РеквизитМд;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если НайденныйРеквизит <> Неопределено Тогда
				Список.Добавить(НайденныйРеквизит.Имя, ?(ЗначениеЗаполнено(НайденныйРеквизит.Синоним),
					 НайденныйРеквизит.Синоним,
					 НайденныйРеквизит.Синоним));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Список.Добавить("ABCКласс", НСтр("ru='ABC класс';en='ABC Class'"));
	Список.Добавить("XYZКласс", НСтр("ru='XYZ класс';en='XYZ class'"));
	Возврат Список;
КонецФункции

// Выполняет обновление настроек версионирования
//
// Параметры:
//  Настройки	 - Структура - Параметры выполнения процедуры
//
// Возвращаемое значение:
//  Булево - Истина, если настройка была обновлена и ее необходимо перечитать.
Функция ОбновитьНастройкиВерсионирования(Настройки = Неопределено) Экспорт
	
	НастройкаОбновлена = Ложь;
	
	Если Настройки = Неопределено Тогда
		Настройки = ПолучитьНастройку();
	КонецЕсли;
	
	Если Настройки = Неопределено Тогда
		НачальноеЗаполнениеНастроекВерсионирования();
		НастройкаОбновлена = Истина;
	Иначе
		
		НеобходимоОбновитьНастройку = Ложь;
		
		// Восстановление структуры в одноуровневую
		СтруктураНастройки = Настройки.СтруктураНастройки;
		
		ВосстановитьСтуктуруНастроек(СтруктураНастройки, НеобходимоОбновитьНастройку);
		// Добавление пометки удаления в уже существующий список настроек.
		ДополнитьНастройкиВерсионирования(СтруктураНастройки, НеобходимоОбновитьНастройку);
		
		Если НеобходимоОбновитьНастройку Тогда
			СохранитьНастройку(СтруктураНастройки);
			НастройкаОбновлена = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НастройкаОбновлена;
	
КонецФункции

#Область ПервыйСтарт

// Осуществляет начальное заполнение настроек версионирования.
//
Процедура НачальноеЗаполнениеНастроекВерсионирования() Экспорт
	
	СохранитьНастройку(НастройкиВерсионированияПоУмолчанию());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НастройкиВерсионированияПоУмолчанию()
	// Интересы
	РеквизитыИнтереса = Новый Массив;
	РеквизитыИнтереса.Добавить("СостояниеИнтереса");
	РеквизитыИнтереса.Добавить("ОжидаемаяВыручка");
	РеквизитыИнтереса.Добавить("Партнер");
	РеквизитыИнтереса.Добавить("КонтактноеЛицо");
	РеквизитыИнтереса.Добавить("ПотенциальныйКлиент");
	РеквизитыИнтереса.Добавить("Организация");
	РеквизитыИнтереса.Добавить("Ответственный");
	РеквизитыИнтереса.Добавить("Подразделение");
	РеквизитыИнтереса.Добавить("ТипУслуги");
	РеквизитыИнтереса.Добавить("Тема");
	РеквизитыИнтереса.Добавить("ТипОбращения");
	РеквизитыИнтереса.Добавить("Офис");
	РеквизитыИнтереса.Добавить("Описание");
	РеквизитыИнтереса.Добавить("ПометкаУдаления");
	
	// Партнеры
	РеквизитыПартнера = Новый Массив;
	РеквизитыПартнера.Добавить("БизнесРегион");
	РеквизитыПартнера.Добавить("ДатаРегистрации");
	РеквизитыПартнера.Добавить("Комментарий");
	РеквизитыПартнера.Добавить("Наименование");
	РеквизитыПартнера.Добавить("НаименованиеПолное");
	РеквизитыПартнера.Добавить("ОсновнойМенеджер");
	РеквизитыПартнера.Добавить("ДоговорПоУмолчанию");
	РеквизитыПартнера.Добавить("ЮрФизЛицо");
	РеквизитыПартнера.Добавить("Пол");
	РеквизитыПартнера.Добавить("ДатаРождения");
	РеквизитыПартнера.Добавить("CRM_Важность");
	РеквизитыПартнера.Добавить("CRM_ДатаРегистрацииКомпании");
	РеквизитыПартнера.Добавить("CRM_Имя");
	РеквизитыПартнера.Добавить("CRM_ИНН");
	РеквизитыПартнера.Добавить("CRM_КодПоОКПО");
	РеквизитыПартнера.Добавить("CRM_КПП");
	РеквизитыПартнера.Добавить("CRM_ОГРН");
	РеквизитыПартнера.Добавить("CRM_ОсновнаяОтрасль");
	РеквизитыПартнера.Добавить("CRM_ОсновноеКонтактноеЛицо");
	РеквизитыПартнера.Добавить("CRM_ОтписалсяОтEmailРассылок");
	РеквизитыПартнера.Добавить("CRM_Отчество");
	РеквизитыПартнера.Добавить("CRM_Потенциал");
	РеквизитыПартнера.Добавить("CRM_СегментРынка");
	РеквизитыПартнера.Добавить("CRM_СтатусРаботы");
	РеквизитыПартнера.Добавить("CRM_ТипОтношенийПредставление");
	РеквизитыПартнера.Добавить("CRM_Фамилия");
	РеквизитыПартнера.Добавить("CRM_ФизЛицо");
	РеквизитыПартнера.Добавить("CRM_Фотография");
	РеквизитыПартнера.Добавить("CRM_ЧисленностьРабочихМест");
	РеквизитыПартнера.Добавить("CRM_ЧисленностьСотрудников");
	РеквизитыПартнера.Добавить("БанковскийСчетПоУмолчанию");
	РеквизитыПартнера.Добавить("ДоговорПоУмолчанию");
	РеквизитыПартнера.Добавить("CRM_Автор");
	РеквизитыПартнера.Добавить("CRM_ГоловнаяОрганизация");
	РеквизитыПартнера.Добавить("Родитель");
	РеквизитыПартнера.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица);
	РеквизитыПартнера.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СайтПартнера);
	РеквизитыПартнера.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес);
	РеквизитыПартнера.Добавить(Справочники.ВидыКонтактнойИнформации.EmailПартнера);
	РеквизитыПартнера.Добавить(Справочники.ВидыКонтактнойИнформации.АдресПартнера);
	РеквизитыПартнера.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера);
	РеквизитыПартнера.Добавить("Сегмент");
	РеквизитыПартнера.Добавить("ПометкаУдаления");
	
	// КонтактныеЛица
	РеквизитыКЛ = Новый Массив;
	РеквизитыКЛ.Добавить("Владелец");
	РеквизитыКЛ.Добавить("Пол");
	РеквизитыКЛ.Добавить("Наименование");
	РеквизитыКЛ.Добавить("ДатаРождения");
	РеквизитыКЛ.Добавить("CRM_Должность");
	РеквизитыКЛ.Добавить("CRM_Имя");
	РеквизитыКЛ.Добавить("CRM_Отчество");
	РеквизитыКЛ.Добавить("CRM_Фамилия");
	РеквизитыКЛ.Добавить("CRM_Фотография");
	РеквизитыКЛ.Добавить("CRM_РольКонтактногоЛица");
	РеквизитыКЛ.Добавить("CRM_СтатусыПредставление");
	РеквизитыКЛ.Добавить("CRM_Состояние");
	РеквизитыКЛ.Добавить("CRM_ОтписалсяОтEmailРассылок");
	РеквизитыКЛ.Добавить("CRM_ЛичныеИнтересы");
	РеквизитыКЛ.Добавить("CRM_ТипОтношенийПредставление");
	РеквизитыКЛ.Добавить("Комментарий");
	РеквизитыКЛ.Добавить(Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);
	РеквизитыКЛ.Добавить(Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица);
	РеквизитыКЛ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
	РеквизитыКЛ.Добавить("ПометкаУдаления");
	
	// ПотенциальныеКлиенты
	РеквизитыПотенциальногоКлиента = Новый Массив;
	РеквизитыПотенциальногоКлиента.Добавить("Партнер");
	РеквизитыПотенциальногоКлиента.Добавить("ОсновнойМенеджер");
	РеквизитыПотенциальногоКлиента.Добавить("Наименование");
	РеквизитыПотенциальногоКлиента.Добавить("Организация");
	РеквизитыПотенциальногоКлиента.Добавить("Фамилия");
	РеквизитыПотенциальногоКлиента.Добавить("Имя");
	РеквизитыПотенциальногоКлиента.Добавить("Отчество");
	РеквизитыПотенциальногоКлиента.Добавить("Должность");
	РеквизитыПотенциальногоКлиента.Добавить("БизнесРегион");
	РеквизитыПотенциальногоКлиента.Добавить("Отрасль");
	РеквизитыПотенциальногоКлиента.Добавить("КонтактноеЛицо");
	РеквизитыПотенциальногоКлиента.Добавить("Комментарий");
	РеквизитыПотенциальногоКлиента.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента);
	РеквизитыПотенциальногоКлиента.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента);
	РеквизитыПотенциальногоКлиента.Добавить("ПометкаУдаления");
	
	СтруктураНастройки = Новый Структура("Реквизиты,РеквизитыКонтактногоЛица,РеквизитыИнтереса,
		|РеквизитыПотенциальногоКлиента",
										РеквизитыПартнера, РеквизитыКЛ, РеквизитыИнтереса, РеквизитыПотенциальногоКлиента);
	Возврат СтруктураНастройки;
КонецФункции

// Процедура заполняет массив настройками версионирования реквизитов для всех справочников.
//
// Параметры:
//  СтруктураНастройки	 - Структура - Структрура, содержащая настройки версионируемых реквизитов.
//  МассивНастроек		 - Массив	 - Массив, в который нужно поместить настройки версионируемых реквизитов.
//  ЕстьИзменения - Булево - Выходной параметр. Показывает, были ли сделаны изменения со структурой настройки.
//
Процедура ДополнитьНастройкиВерсионирования(СтруктураНастройки, ЕстьИзменения)
	
	Для Каждого ТекНастройки Из СтруктураНастройки Цикл
		Если ТипЗнч(ТекНастройки.Значение) = Тип("Массив") Тогда
			МассивНастроек = ТекНастройки.Значение;
			Если МассивНастроек.Найти("ПометкаУдаления") = Неопределено Тогда
				МассивНастроек.Добавить("ПометкаУдаления");
				ЕстьИзменения = Истина
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура восстанавливает одноуровневую структуру настроек.
//
// Параметры:
//  СтруктураНастройки	 - Структура - Структура, содержащая настройки версионируемых реквизитов.
//  ЕстьИзменения - Булево - Выходной параметр. Показывает, были ли сделаны изменения со структурой настройки.
//
Процедура ВосстановитьСтуктуруНастроек(СтруктураНастройки, ЕстьИзменения, Восстановленные = Неопределено)
	
	Если Восстановленные = Неопределено Тогда
		Восстановленные = Новый Структура;
		Первая = Истина;
	Иначе
		Первая = Ложь;
	КонецЕсли;
	Удаляемые = Новый Массив;
	Для Каждого ТекСвойство Из СтруктураНастройки Цикл
		Если ТипЗнч(ТекСвойство.Значение) = Тип("Структура") Тогда
			ВосстановитьСтуктуруНастроек(ТекСвойство.Значение, ЕстьИзменения, Восстановленные);
			Удаляемые.Добавить(ТекСвойство.Ключ);
		Иначе
			Если Не Первая Тогда
				Восстановленные.Вставить(ТекСвойство.Ключ, ТекСвойство.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Первая Тогда
		Для каждого КлючЗнач Из Восстановленные Цикл
			Если Не СтруктураНастройки.Свойство(КлючЗнач.Ключ) Тогда
				СтруктураНастройки.Вставить(КлючЗнач.Ключ, КлючЗнач.Значение);
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЦикла;
		Для каждого Удаляемый Из Удаляемые Цикл
			Если СтруктураНастройки.Свойство(Удаляемый) Тогда
				СтруктураНастройки.Удалить(Удаляемый);
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
