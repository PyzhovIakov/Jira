#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

// Регистрирует данные к обновлению в плане обмена ОбновлениеИнформационнойБазы
//  см. Стандарты и методики разработки прикладных решений: Параллельный режим отложенного обновления.
// 
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПолноеИмяРегистра = Метаданные.РегистрыСведений.ДанныеЗаказовСервисДоставки.ПолноеИмя();

	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойУИД", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеЗаказовСервисДоставки.Организация КАК Организация,
	|	ДанныеЗаказовСервисДоставки.УдалитьИдентификаторДокумента КАК УдалитьИдентификаторДокумента
	|ИЗ
	|	РегистрСведений.ДанныеЗаказовСервисДоставки КАК ДанныеЗаказовСервисДоставки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналЗаказовСервисДоставки КАК ЖурналЗаказовСервисДоставки
	|		ПО ЖурналЗаказовСервисДоставки.ИдентификаторДокумента = ДанныеЗаказовСервисДоставки.ИдентификаторДокумента
	|ГДЕ
	|	ДЛИНАСТРОКИ(ДанныеЗаказовСервисДоставки.УдалитьИдентификаторДокумента) = 36
	|	И (ДанныеЗаказовСервисДоставки.ИдентификаторДокумента = &ПустойУИД
	|	ИЛИ ЖурналЗаказовСервисДоставки.ИдентификаторДокумента ЕСТЬ NULL)";
	
	Выгрузка = Запрос.Выполнить().Выгрузить();

	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Выгрузка, ДополнительныеПараметры);

КонецПроцедуры

// Обрабатывает данные, зарегистрированные в плане обмена ОбновлениеИнформационнойБазы
//  см. Стандарты и методики разработки прикладных решений: Параллельный режим отложенного обновления.
// 
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.ДанныеЗаказовСервисДоставки;
	ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();
	
	Если ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(
		Параметры.Очередь, ПолноеИмяОбъекта) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыборки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь, ПолноеИмяОбъекта, ПараметрыВыборки);
	
	ЕстьОтработанныеЗаписи = Ложь;
	ПроизошлаОшибка        = Ложь;
	ТекстСообщения         = "";
	
	Пока ОбновляемыеДанные.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			НаборЗаписейДанныеЗаказов = СоздатьНаборЗаписей();
			НаборЗаписейДанныеЗаказов.Отбор.Организация.Установить(ОбновляемыеДанные.Организация);
			НаборЗаписейДанныеЗаказов.Отбор.УдалитьИдентификаторДокумента.Установить(ОбновляемыеДанные.УдалитьИдентификаторДокумента);
			
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписейДанныеЗаказов);
			
			НаборЗаписейДанныеЗаказов.Прочитать();
			
			Если НаборЗаписейДанныеЗаказов.Количество() = 0 Тогда
				ОтменитьТранзакцию();
				Продолжить;
			
			ИначеЕсли Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ОбновляемыеДанные.УдалитьИдентификаторДокумента) Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписейДанныеЗаказов);
				ЗафиксироватьТранзакцию();
				Продолжить;
				
			КонецЕсли;
			
			ТребуетсяКорректировкаПоЧастичнойДоставке = Ложь;
			ЕстьИзмененияТоварногоСостава = Ложь;
			
			Для Каждого ЗаписьДанныеЗаказов Из НаборЗаписейДанныеЗаказов Цикл
				
				Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ЗаписьДанныеЗаказов.УдалитьИдентификаторДокумента) Тогда
					Продолжить;
				КонецЕсли;
				
				//Трансформация значений измерений регистра "ДанныеЗаказовСервисДоставки"
				Если ЗаписьДанныеЗаказов.УдалитьТипГрузоперевозки <> 0 Тогда
					ЗаписьДанныеЗаказов.ТипГрузоперевозки = Перечисления.ТипыГрузоперевозки.Получить(ЗаписьДанныеЗаказов.УдалитьТипГрузоперевозки - 1);
				КонецЕсли;
				ЗаписьДанныеЗаказов.ИдентификаторДокумента = Новый УникальныйИдентификатор(ЗаписьДанныеЗаказов.УдалитьИдентификаторДокумента);
				
				//Расчет значений ресурсов регистра ЖурналЗаказовСервисДоставки
				ТребуетсяКорректировкаПоЧастичнойДоставке = ТребуетсяКорректировкаПоЧастичнойДоставке 
					Или ЗаписьДанныеЗаказов.СостояниеОбработкиЧастичнойДоставки = Перечисления.СостоянияОбработкиПроцедурСинхронизацииСервисДоставки.Скорректировать;
				
				ЕстьИзмененияТоварногоСостава = ЕстьИзмененияТоварногоСостава Или ЗаписьДанныеЗаказов.УдалитьЕстьИзмененияТоварногоСостава;
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейДанныеЗаказов);
			
			ОсновнаяЗаписьДанныеЗаказов = НаборЗаписейДанныеЗаказов[0];

			//Перенос данных в регистр "ЖурналЗаказовСервисДоставки"
			ЗаписьЖурналЗаказов = РегистрыСведений.ЖурналЗаказовСервисДоставки.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьЖурналЗаказов, ОсновнаяЗаписьДанныеЗаказов);
			
			ЗаписьЖурналЗаказов.ЕстьИзмененияТоварногоСостава = ЕстьИзмененияТоварногоСостава;
			ЗаписьЖурналЗаказов.КоличествоДокументовОснований = НаборЗаписейДанныеЗаказов.Количество();
			ЗаписьЖурналЗаказов.ТребуетсяКорректировкаПоЧастичнойДоставке = ТребуетсяКорректировкаПоЧастичнойДоставке;
			
			ЧастиПредставления = СтрРазделить(ОсновнаяЗаписьДанныеЗаказов.Представление, " ", Ложь);
			Если ЧастиПредставления.Количество() >= 6 Тогда
					
				ЗаписьЖурналЗаказов.Номер = ЧастиПредставления[3];
				ЗаписьЖурналЗаказов.Дата = Дата(ЧастиПредставления[5] + " 00:00:00");
			КонецЕсли;
			
			ЗаписьЖурналЗаказов.Записать(Истина);
			
			ЕстьОтработанныеЗаписи = Истина;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать запись по заказу на доставку %1 по причине: %2%3'");
			ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(
				ШаблонСообщения,
				ОбновляемыеДанные.УдалитьИдентификаторДокумента,
				Символы.ПС, 
				ПредставлениеОшибки);
			
			Событие = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
			ЗаписьЖурналаРегистрации(
				Событие, 
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеОбъекта,
				ОбновляемыеДанные.УдалитьИдентификаторДокумента,
				ТекстСообщения);
			
			ПроизошлаОшибка = Истина;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если Не ЕстьОтработанныеЗаписи И ПроизошлаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = 
		ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

// Получает список заказов на доставку, введенных на основании передаваемого документа.
//
// Параметры:
// 	ПараметрыОтбораЗаказов - Структура:
// 		* ТипГрузоперевозки - Число
// 		* Организация - ОпределяемыйТип.ОрганизацияСервисДоставки
// 		* ДокументОснование - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки,
// 			Массив Из ОпределяемыйТип.ОснованиеЗаказаСервисДоставки.
//
// Возвращаемое значение:
// 	СписокЗначений Из УникальныйИдентификатор.
//
Функция СписокЗаказовПоОснованию(ПараметрыОтбораЗаказов) Экспорт
	
	Результат = Новый СписокЗначений();
	
	ДокументОснование = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтбораЗаказов, "ДокументОснование");
	ТипГрузоперевозки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтбораЗаказов, "ТипГрузоперевозки");
	Организация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтбораЗаказов, "Организация");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ТипГрузоперевозки", ТипГрузоперевозки);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРегистра.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ТаблицаРегистра.ТипГрузоперевозки КАК ТипГрузоперевозки,
	|	ЖурналЗаказов.Номер КАК НомерЗаказа,
	|	ЖурналЗаказов.Номер КАК ДатаЗаказа
	|ИЗ
	|	РегистрСведений.ДанныеЗаказовСервисДоставки КАК ТаблицаРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналЗаказовСервисДоставки КАК ЖурналЗаказов
	|		ПО ЖурналЗаказов.Организация = ТаблицаРегистра.Организация
	|		И ЖурналЗаказов.ТипГрузоперевозки = ТаблицаРегистра.ТипГрузоперевозки
	|		И ЖурналЗаказов.ИдентификаторДокумента = ТаблицаРегистра.ИдентификаторДокумента
	|ГДЕ
	|	ДокументОснование В (&ДокументОснование)
	|	И &ТекстУсловияПоТипуГрузоперевозки
	|	И &ТекстУсловияПоОрганизации";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловияПоТипуГрузоперевозки",
		?(ЗначениеЗаполнено(ТипГрузоперевозки), "ТаблицаРегистра.ТипГрузоперевозки = &ТипГрузоперевозки", "ИСТИНА"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловияПоОрганизации",
		?(ЗначениеЗаполнено(Организация), "ТаблицаРегистра.Организация = &Организация", "ИСТИНА"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПредставлениеДокумента = СервисДоставкиКлиентСервер.ПредставлениеЗаказаНаДоставку(Выборка, Истина);
		Результат.Добавить(Выборка.ИдентификаторДокумента, ПредставлениеДокумента);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает количество заказов на доставку, введенных на основании передаваемых документов.
//
// Параметры:
// 	Источник - Массив Из ОпределяемыйТип.ОснованиеЗаказаСервисДоставки, ОпределяемыйТип.ОснованиеЗаказаСервисДоставки.
//
// Возвращаемое значение:
// 	СписокЗначений Из Число - Количество заказов по документам основаниям.
Функция КоличествоЗаказовПоОснованиям(Источник) Экспорт
	
	Если ТипЗнч(Источник) = Тип("Массив") Тогда
		ДокументыОснования = Источник;
	Иначе
		ДокументыОснования = Новый Массив();
		ДокументыОснования.Добавить(Источник);
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	
	Если ДокументыОснования.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыОснования", ДокументыОснования);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ДанныеЗаказовСервисДоставки.ДокументОснование) КАК ДокументОснование,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИдентификаторДокумента) КАК Количество
	|ИЗ
	|	РегистрСведений.ДанныеЗаказовСервисДоставки КАК ДанныеЗаказовСервисДоставки
	|ГДЕ
	|	ДокументОснование В (&ДокументыОснования)
	|СГРУППИРОВАТЬ ПО
	|	ПРЕДСТАВЛЕНИЕ(ДанныеЗаказовСервисДоставки.ДокументОснование)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Количество, Выборка.ДокументОснование);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли