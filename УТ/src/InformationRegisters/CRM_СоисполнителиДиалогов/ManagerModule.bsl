#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет соисполнителей.
//
// Параметры:
//  МассивСоисполнителей			 - Массив	 - Массив Из СправочникСсылка.Пользователи - Соисполнители
//  УчетнаяЗапись					 - СправочникСсылка.CRM_УчетныеЗаписиМессенджеров	 - Ссылка на учетную запись.
//  Группа							 - Строка	 - Текущая группа.
//  ID_Пользователя					 - Строка	 - ИД пользователя.
//  МассивНачальноеСостояниеДоступа	 - Массив, Неопределено	 - Массив структур с описанием параметров начального
//  состояния доступа.
// 
// Возвращаемое значение:
//  Булево - Успешность выполнения операции.
//
Функция ДобавитьСоисполнителей(МассивСоисполнителей, УчетнаяЗапись, Группа, ID_Пользователя,
	 МассивНачальноеСостояниеДоступа = Неопределено) Экспорт
	
	Если МассивСоисполнителей.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Группа) И Не УчетнаяЗапись.ТипМессенджера = "TelegramBot" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаДобавляемыхСоисполнителей = Новый ТаблицаЗначений;
	ТаблицаДобавляемыхСоисполнителей.Колонки.Добавить("Пользователь",
		 Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Для Каждого ЭлМассива Из МассивСоисполнителей Цикл
		НС = ТаблицаДобавляемыхСоисполнителей.Добавить();
		НС.Пользователь = ЭлМассива;
	КонецЦикла;
	
	ТаблицаДобавленногоДоступа = Новый ТаблицаЗначений;
	ТаблицаДобавленногоДоступа.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаДобавленногоДоступа.Колонки.Добавить("СтрокаJSON", Новый ОписаниеТипов("Строка"));
	
	Если ТипЗнч(МассивНачальноеСостояниеДоступа) = Тип("Массив") Тогда
		Для Каждого ЭлМассива Из МассивНачальноеСостояниеДоступа Цикл
			НС = ТаблицаДобавленногоДоступа.Добавить();
			ЗаполнитьЗначенияСвойств(НС, ЭлМассива);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаДобавляемыхСоисполнителей.Пользователь КАК Справочник.Пользователи) КАК Пользователь
		|ПОМЕСТИТЬ ДобавляемыеСоисполнители
		|ИЗ
		|	&ТаблицаДобавляемыхСоисполнителей КАК ТаблицаДобавляемыхСоисполнителей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаДобавленногоДоступа.Пользователь КАК Справочник.Пользователи) КАК Пользователь,
		|	ВЫРАЗИТЬ(ТаблицаДобавленногоДоступа.СтрокаJSON КАК СТРОКА(128)) КАК СтрокаJSON
		|ПОМЕСТИТЬ ТаблДобавленногоДоступа
		|ИЗ
		|	&ТаблицаДобавленногоДоступа КАК ТаблицаДобавленногоДоступа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	CRM_СоисполнителиДиалогов.Соисполнитель КАК Пользователь,
		|	МАКСИМУМ(CRM_СоисполнителиДиалогов.НачальноеСостояниеДоступа) КАК СтрокаJSON
		|ПОМЕСТИТЬ ТекущийДоступ
		|ИЗ
		|	РегистрСведений.CRM_СоисполнителиДиалогов КАК CRM_СоисполнителиДиалогов
		|ГДЕ
		|	CRM_СоисполнителиДиалогов.Соисполнитель В(&МассивСоисполнителей)
		|	И CRM_СоисполнителиДиалогов.УчетнаяЗапись = &УчетнаяЗапись
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_СоисполнителиДиалогов.Соисполнитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТаблДобавленногоДоступа.Пользователь ЕСТЬ NULL
		|			ТОГДА ТекущийДоступ.Пользователь
		|		ИНАЧЕ ТаблДобавленногоДоступа.Пользователь
		|	КОНЕЦ КАК Пользователь,
		|	ВЫБОР
		|		КОГДА ТаблДобавленногоДоступа.СтрокаJSON ЕСТЬ NULL
		|			ТОГДА ТекущийДоступ.СтрокаJSON
		|		ИНАЧЕ ТаблДобавленногоДоступа.СтрокаJSON
		|	КОНЕЦ КАК СтрокаJSON,
		|	ВЫБОР
		|		КОГДА НЕ ТаблДобавленногоДоступа.СтрокаJSON ЕСТЬ NULL
		|				И НЕ ТекущийДоступ.СтрокаJSON ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НачальноеСостояниеДоступаУстарело
		|ПОМЕСТИТЬ ТаблицаДоступа
		|ИЗ
		|	ТаблДобавленногоДоступа КАК ТаблДобавленногоДоступа
		|		ПОЛНОЕ СОЕДИНЕНИЕ ТекущийДоступ КАК ТекущийДоступ
		|		ПО ТаблДобавленногоДоступа.Пользователь = ТекущийДоступ.Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДобавляемыеСоисполнители.Пользователь КАК Пользователь,
		|	ЕСТЬNULL(ТаблицаДоступа.СтрокаJSON, """") КАК СтрокаJSON,
		|	ЕСТЬNULL(ТаблицаДоступа.НачальноеСостояниеДоступаУстарело, ЛОЖЬ) КАК НачальноеСостояниеДоступаУстарело
		|ИЗ
		|	ДобавляемыеСоисполнители КАК ДобавляемыеСоисполнители
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДоступа КАК ТаблицаДоступа
		|		ПО ДобавляемыеСоисполнители.Пользователь = ТаблицаДоступа.Пользователь";
	
	Запрос.УстановитьПараметр("ТаблицаДобавляемыхСоисполнителей", ТаблицаДобавляемыхСоисполнителей);
	Запрос.УстановитьПараметр("ТаблицаДобавленногоДоступа", ТаблицаДобавленногоДоступа);
	Запрос.УстановитьПараметр("МассивСоисполнителей", МассивСоисполнителей);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	НачальноеСостояниеДоступаТЗ = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	
	Попытка
		Для Каждого СтрокаТЗ Из НачальноеСостояниеДоступаТЗ Цикл
			
			МенеджерЗаписи = РегистрыСведений.CRM_СоисполнителиДиалогов.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.УчетнаяЗапись = УчетнаяЗапись;
			МенеджерЗаписи.Группа = Группа;
			МенеджерЗаписи.ID_Пользователя = ID_Пользователя;
			МенеджерЗаписи.Соисполнитель = СтрокаТЗ.Пользователь;
			МенеджерЗаписи.Статус = Перечисления.CRM_СтатусыДиалогов.Новый;
			МенеджерЗаписи.НачальноеСостояниеДоступа = СтрокаТЗ.СтрокаJSON;
			
			МенеджерЗаписи.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение       
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("Мессенджеры.Соисполнители", УровеньЖурналаРегистрации.Ошибка, ,
			 УчетнаяЗапись,
			 "Не удалось добавить соисполнителей");
		Возврат Ложь;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Истина;
	
КонецФункции

// Определяет, является ли пользователь соисполнителем по контакту.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь.
//  УчетнаяЗапись	 - СправочникСсылка.CRM_УчетныеЗаписиМессенджеров - Ссылка на учетную запись.
//  Группа			 - Строка - Текущая группа. 
//  ID_Пользователя	 - Строка - ИД пользователя.
//
// Возвращаемое значение:
//  Булево - Истина, если пользователь является соисполнителем.
//
Функция ПользовательЯвляетсяСоисполнителем(Пользователь, УчетнаяЗапись, Группа, ID_Пользователя) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивСоисполнителей = Новый Массив();
	МассивСоисполнителей.Добавить(Пользователь);
	ДанныеКонтакта = Новый Структура("УчетнаяЗапись, Группа, ID_Пользователя", УчетнаяЗапись, Группа, ID_Пользователя);
	
	Возврат (КонтактыСоисполнителей(МассивСоисполнителей, ДанныеКонтакта).Количество() > 0);
	
КонецФункции

// Возвращает таблицу контактов соисполнителей.
//
// Параметры:
//  МассивСоисполнителей - Массив Из СправочникСсылка.Пользователи - Соисполнители
//  ДанныеКонтакта		 - Структура
//  * УчетнаяЗапись	 - СправочникСсылка.CRM_УчетныеЗаписиМессенджеров - Ссылка на учетную запись.
//  * Группа			 - Строка - Текущая группа.
//  * ID_Пользователя	 - Строка - ИД пользователя.
//  УчетнаяЗапись		 - СправочникСсылка.CRM_УчетныеЗаписиМессенджеров	 - Ссылка на учетную запись.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - :
//  * УчетнаяЗапись	 - СправочникСсылка.CRM_УчетныеЗаписиМессенджеров - Ссылка на учетную запись.
//  * Группа			 - Строка - Текущая группа.
//  * ID_Пользователя	 - Строка - ИД пользователя.
//
Функция КонтактыСоисполнителей(МассивСоисполнителей, ДанныеКонтакта = Неопределено,
	 УчетнаяЗапись = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	CRM_СоисполнителиДиалогов.УчетнаяЗапись КАК УчетнаяЗапись,
		|	CRM_СоисполнителиДиалогов.ID_Пользователя КАК ID_Пользователя,
		|	CRM_СоисполнителиДиалогов.Группа КАК Группа,
		|	CRM_СоисполнителиДиалогов.Статус КАК Статус"
		+ ?(ЗначениеЗаполнено(УчетнаяЗапись), ", CRM_СоисполнителиДиалогов.Соисполнитель КАК Соисполнитель", "") + "
		|ИЗ
		|	РегистрСведений.CRM_СоисполнителиДиалогов КАК CRM_СоисполнителиДиалогов
		|ГДЕ
		|	CRM_СоисполнителиДиалогов.Соисполнитель В(&МассивСоисполнителей)
		|	И &УсловиеПоКонтакту";
	
	Запрос.УстановитьПараметр("МассивСоисполнителей", МассивСоисполнителей);
	Если ТипЗнч(ДанныеКонтакта) = Тип("Структура") Тогда
		УсловиеПоКонтакту = "
		|	ВЫБОР
		|			КОГДА &ID_Пользователя = """"
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ CRM_СоисполнителиДиалогов.ID_Пользователя = &ID_Пользователя
		|		КОНЕЦ
		|	И CRM_СоисполнителиДиалогов.УчетнаяЗапись = &УчетнаяЗапись
		|	И CRM_СоисполнителиДиалогов.Группа = &Группа";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоКонтакту", УсловиеПоКонтакту);
		Запрос.УстановитьПараметр("УчетнаяЗапись", ДанныеКонтакта.УчетнаяЗапись);
		Запрос.УстановитьПараметр("Группа", ДанныеКонтакта.Группа);
		Запрос.УстановитьПараметр("ID_Пользователя", ДанныеКонтакта.ID_Пользователя);
	ИначеЕсли ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		УсловиеПоКонтакту = "
		|	CRM_СоисполнителиДиалогов.УчетнаяЗапись = &УчетнаяЗапись";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоКонтакту", УсловиеПоКонтакту);
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Иначе
		Запрос.УстановитьПараметр("УсловиеПоКонтакту", Истина);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Возвращает массив соисполнителей.
//
// Параметры:
//  ДанныеКонтакта	 - 	 - Структура
//  	* УчетнаяЗапись	 - СправочникСсылка.CRM_УчетныеЗаписиМессенджеров - Ссылка на учетную запись.
//  	* Группа			 - Строка - Текущая группа.
//  	* ID_Пользователя	 - Строка - ИД пользователя.
// 
// Возвращаемое значение:
//   - Массив
//
Функция СоисполнителиКонтакта(ДанныеКонтакта) Экспорт
	
	Если ТипЗнч(ДанныеКонтакта) <> Тип("Структура") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	CRM_СоисполнителиДиалогов.Соисполнитель КАК Соисполнитель
		|ИЗ
		|	РегистрСведений.CRM_СоисполнителиДиалогов КАК CRM_СоисполнителиДиалогов
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ID_Пользователя = """"
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ CRM_СоисполнителиДиалогов.ID_Пользователя = &ID_Пользователя
		|		КОНЕЦ
		|	И CRM_СоисполнителиДиалогов.УчетнаяЗапись = &УчетнаяЗапись
		|	И CRM_СоисполнителиДиалогов.Группа = &Группа
		|
		|УПОРЯДОЧИТЬ ПО
		|	Соисполнитель";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", ДанныеКонтакта.УчетнаяЗапись);
	Запрос.УстановитьПараметр("Группа", ДанныеКонтакта.Группа);
	Запрос.УстановитьПараметр("ID_Пользователя", ДанныеКонтакта.ID_Пользователя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Соисполнитель");
	
КонецФункции

// Удаляет соисполнителей.
//
// Параметры:
//  МассивСоисполнителей - Массив Из СправочникСсылка.Пользователи - Соисполнители
//  УчетнаяЗапись	 - СправочникСсылка.CRM_УчетныеЗаписиМессенджеров - Ссылка на учетную запись.
//  Группа			 - Строка - Текущая группа. 
//  ID_Пользователя	 - Строка - ИД пользователя.
//
// Возвращаемое значение:
//  Булево - Успешность выполнения операции.
//
Функция УдалитьСоисполнителей(МассивСоисполнителей, УчетнаяЗапись, Группа, ID_Пользователя) Экспорт
	
	Если МассивСоисполнителей.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Группа) И Не УчетнаяЗапись.ТипМессенджера = "TelegramBot" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	
	Попытка
		МассивНачальноеСостояниеДоступаПредварительно = Новый Массив;
		
		Для Каждого Соисполнитель Из МассивСоисполнителей Цикл
			
			МенеджерЗаписи = РегистрыСведений.CRM_СоисполнителиДиалогов.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.УчетнаяЗапись = УчетнаяЗапись;
			МенеджерЗаписи.Группа = Группа;
			МенеджерЗаписи.ID_Пользователя = ID_Пользователя;
			МенеджерЗаписи.Соисполнитель = Соисполнитель;
			
			МенеджерЗаписи.Прочитать();
			МассивНачальноеСостояниеДоступаПредварительно.Добавить(Новый Структура("Пользователь,
				| СтрокаJSON", Соисполнитель,
				 МенеджерЗаписи.НачальноеСостояниеДоступа));
			
			МенеджерЗаписи.Удалить();
			
		КонецЦикла;
		
		КонтактыСоисполнителейПоУчетнойЗаписи = КонтактыСоисполнителей(МассивСоисполнителей, , УчетнаяЗапись);
		
		МассивНачальноеСостояниеДоступа = Новый Массив;
		
		Для Каждого ЭлМассива Из МассивНачальноеСостояниеДоступаПредварительно Цикл
			Если КонтактыСоисполнителейПоУчетнойЗаписи.Найти(ЭлМассива.Пользователь,
				 "Соисполнитель") = Неопределено Тогда // Не осталось записи по другим контактам
				МассивНачальноеСостояниеДоступа.Добавить(ЭлМассива);
			КонецЕсли;
		КонецЦикла;
		
		CRM_СоисполнителиДиалоговСервер.ВосстановитьСостояниеДоступаПользователя(УчетнаяЗапись,
			 МассивНачальноеСостояниеДоступа);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("Мессенджеры.Соисполнители", УровеньЖурналаРегистрации.Ошибка, ,
			 УчетнаяЗапись,
			 "Не удалось удалить соисполнителей");
		Возврат Ложь;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Истина;
	
КонецФункции

// Удаляет всех соисполнителей.
//
// Параметры:
//  УчетнаяЗапись		 - СправочникСсылка.CRM_УчетныеЗаписиМессенджеров	 - Ссылка на учетную запись.
//  Группа				 - Строка											 - Текущая группа.
//  ID_Пользователя		 - Строка											 - ИД пользователя.
//  ВыполнитьВТранзакции - Булево											 - Признак необходимости выполнения транзакций.
// 
// Возвращаемое значение:
//   - Булево	 - Успешность выполнения операции.
//
Функция УдалитьВсехСоисполнителей(УчетнаяЗапись, Группа, ID_Пользователя, ВыполнитьВТранзакции = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Группа) И Не УчетнаяЗапись.ТипМессенджера = "TelegramBot" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ВыполнитьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
		
	НаборЗаписей = РегистрыСведений.CRM_СоисполнителиДиалогов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
	НаборЗаписей.Отбор.Группа.Установить(Группа);
	НаборЗаписей.Отбор.ID_Пользователя.Установить(ID_Пользователя);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Если ВыполнитьВТранзакции Тогда
            // BSLLS:WrongUseOfRollbackTransactionMethod-off
			ОтменитьТранзакцию();
			// BSLLS:WrongUseOfRollbackTransactionMethod-on
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	НачальноеСостояниеДоступаТЗ = НаборЗаписей.Выгрузить(, "Соисполнитель, НачальноеСостояниеДоступа");
	НаборЗаписей.Очистить();
	
	НаборЗаписей.Записать();
	
	НачальноеСостояниеДоступаТЗ.Колонки[0].Имя = "Пользователь";
	НачальноеСостояниеДоступаТЗ.Колонки[1].Имя = "СтрокаJSON";
	
	КонтактыСоисполнителейПоУчетнойЗаписи = КонтактыСоисполнителей(НачальноеСостояниеДоступаТЗ.ВыгрузитьКолонку("Пользователь"), ,
		 УчетнаяЗапись);
	
	МассивНачальноеСостояниеДоступаПредварительно = ОбщегоНазначения.ТаблицаЗначенийВМассив(НачальноеСостояниеДоступаТЗ);
	
	МассивНачальноеСостояниеДоступа = Новый Массив;
	
	Для Каждого ЭлМассива Из МассивНачальноеСостояниеДоступаПредварительно Цикл
		Если КонтактыСоисполнителейПоУчетнойЗаписи.Найти(ЭлМассива.Пользователь,
			 "Соисполнитель") = Неопределено Тогда // Не осталось записи по другим контактам
			МассивНачальноеСостояниеДоступа.Добавить(ЭлМассива);
		КонецЕсли;
	КонецЦикла;
	
	CRM_СоисполнителиДиалоговСервер.ВосстановитьСостояниеДоступаПользователя(УчетнаяЗапись,
		 МассивНачальноеСостояниеДоступа);

	Если ВыполнитьВТранзакции Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Истина;
	
КонецФункции

// Процедура выполняет установку статуса контакту соисполнителя.
//
// Параметры:
//  Соисполнитель	 - СправочникСсылка.Пользователи	 - Соисполнитель.
//  ДанныеКонтакта	 - Структура						 - Данные контакта.
//  НовыйСтатус		 - ПеречислениеСсылка.CRM_СтатусыДиалогов	 - Новый статус.
//
Процедура УстановитьСтатусКонтактуСоисполнителя(Соисполнитель, ДанныеКонтакта, НовыйСтатус) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи = РегистрыСведений.CRM_СоисполнителиДиалогов.СоздатьМенеджерЗаписи();
		
	МенеджерЗаписи.УчетнаяЗапись = ДанныеКонтакта.УчетнаяЗапись;
	МенеджерЗаписи.Группа = ДанныеКонтакта.Группа;
	МенеджерЗаписи.ID_Пользователя = ДанныеКонтакта.ID_Пользователя;
	МенеджерЗаписи.Соисполнитель = Соисполнитель;
	
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.Статус = НовыйСтатус;
	
	МенеджерЗаписи.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
