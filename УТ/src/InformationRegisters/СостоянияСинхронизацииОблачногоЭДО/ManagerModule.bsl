// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  ИдентификаторЭДО - См. РегистрСведений.СостоянияСинхронизацииОблачногоЭДО.ИдентификаторЭДО
//  ТипСинхронизации - См. РегистрСведений.СостоянияСинхронизацииОблачногоЭДО.ТипСинхронизации
//  МеткаВремени - См. РегистрСведений.СостоянияСинхронизацииОблачногоЭДО.МеткаВремени
Процедура Записать(ИдентификаторЭДО, ТипСинхронизации, МеткаВремени) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторЭДО.Установить(ИдентификаторЭДО);
	НаборЗаписей.Отбор.ТипСинхронизации.Установить(ТипСинхронизации);
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаписьНабора.ИдентификаторЭДО = ИдентификаторЭДО;
	ЗаписьНабора.ТипСинхронизации = ТипСинхронизации;
	ЗаписьНабора.МеткаВремени = МеткаВремени;
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Параметры:
//  ТипСинхронизации - См. РегистрСведений.СостоянияСинхронизацииОблачногоЭДО.ТипСинхронизации
//  МеткиВремениПоИдентификаторамЭДО - Соответствие из КлючИЗначение:
//  * Ключ - Строка
//  * Значение - Число
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ЗаписатьКоллекцию(ТипСинхронизации, МеткиВремениПоИдентификаторамЭДО, КонтекстДиагностики = Неопределено) Экспорт
	
	Для Каждого МеткаВремениПоИдентификаторуЭДО Из МеткиВремениПоИдентификаторамЭДО Цикл
		
		ИдентификаторЭДО = МеткаВремениПоИдентификаторуЭДО.Ключ;
		МеткаВремени = МеткаВремениПоИдентификаторуЭДО.Значение;
		
		Попытка
			Записать(ИдентификаторЭДО, ТипСинхронизации, МеткаВремени);
		Исключение
			ВидОперации = НСтр("ru = 'Синхронизация с облачным ЭДО'");
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось зафиксировать состояние синхронизации облачного ЭДО
				|для типа данных %1 по идентификатору ЭДО %2'"), ТипСинхронизации, ИдентификаторЭДО);
			ТекстОшибкиПодробно = ТекстОшибки + Символы.ПС
				+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации,
				ТекстОшибки, ТекстОшибкиПодробно);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ИдентификаторыЭДО - Массив из см. РегистрСведений.СостоянияСинхронизацииОблачногоЭДО.ИдентификаторЭДО
//  ТипыСинхронизации - ПеречислениеСсылка.ТипыСинхронизацииОблачногоЭДО,Массив из ПеречислениеСсылка.ТипыСинхронизацииОблачногоЭДО
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ИдентификаторЭДО - См. РегистрСведений.СостоянияСинхронизацииОблачногоЭДО.ИдентификаторЭДО
//  * ТипСинхронизации - См. РегистрСведений.СостоянияСинхронизацииОблачногоЭДО.ТипСинхронизации
//  * МеткаВремени - См. РегистрСведений.СостоянияСинхронизацииОблачногоЭДО.МеткаВремени
Функция Выгрузить(ИдентификаторыЭДО = Неопределено, ТипыСинхронизации = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СостоянияСинхронизацииОблачногоЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	СостоянияСинхронизацииОблачногоЭДО.ТипСинхронизации КАК ТипСинхронизации,
		|	СостоянияСинхронизацииОблачногоЭДО.МеткаВремени КАК МеткаВремени
		|ИЗ
		|	РегистрСведений.СостоянияСинхронизацииОблачногоЭДО КАК СостоянияСинхронизацииОблачногоЭДО
		|ГДЕ
		|	&УсловияОтбора";
	
	УсловияОтбора = Новый Массив; // Массив из Строка
	
	Если ЗначениеЗаполнено(ИдентификаторыЭДО) Тогда
		УсловияОтбора.Добавить("СостоянияСинхронизацииОблачногоЭДО.ИдентификаторЭДО В (&ИдентификаторыЭДО)");
		Запрос.УстановитьПараметр("ИдентификаторыЭДО", ИдентификаторыЭДО);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипыСинхронизации) Тогда
		УсловияОтбора.Добавить("СостоянияСинхронизацииОблачногоЭДО.ТипСинхронизации В (&ТипыСинхронизации)");
		Запрос.УстановитьПараметр("ТипыСинхронизации", ТипыСинхронизации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияОтбора) Тогда
		Разделитель = "
			|	И ";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияОтбора", СтрСоединить(УсловияОтбора, Разделитель));
	Иначе
		Запрос.УстановитьПараметр("УсловияОтбора", Истина);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Параметры:
//  ИдентификаторЭДО - см. РегистрСведений.СостоянияСинхронизацииОблачногоЭДО.ИдентификаторЭДО
//  ТипСинхронизации - см. РегистрСведений.СостоянияСинхронизацииОблачногоЭДО.ТипСинхронизации
// 
// Возвращаемое значение:
//  См. РегистрСведений.СостоянияСинхронизацииОблачногоЭДО.МеткаВремени
Функция МеткаВремени(ИдентификаторЭДО, ТипСинхронизации) Экспорт
	
	Выборка = ВыборкаМеткиВремениПоТипу(ИдентификаторЭДО, ТипСинхронизации);
	
	Если Выборка.Следующий() Тогда
		МеткаВремени = Выборка.МеткаВремени;
	Иначе
		МеткаВремени = 0;
	КонецЕсли;
	
	Возврат МеткаВремени;
	
КонецФункции

// Параметры:
//  ИдентификаторЭДО - см. РегистрСведений.СостоянияСинхронизацииОблачногоЭДО.ИдентификаторЭДО
//  ТипСинхронизации - см. РегистрСведений.СостоянияСинхронизацииОблачногоЭДО.ТипСинхронизации
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//  * МеткаВремени - см. РегистрСведений.СостоянияСинхронизацииОблачногоЭДО.МеткаВремени
Функция ВыборкаМеткиВремениПоТипу(ИдентификаторЭДО, ТипСинхронизации)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СостоянияСинхронизацииОблачногоЭДО.МеткаВремени КАК МеткаВремени
		|ИЗ
		|	РегистрСведений.СостоянияСинхронизацииОблачногоЭДО КАК СостоянияСинхронизацииОблачногоЭДО
		|ГДЕ
		|	СостоянияСинхронизацииОблачногоЭДО.ИдентификаторЭДО = &ИдентификаторЭДО
		|	И СостоянияСинхронизацииОблачногоЭДО.ТипСинхронизации = &ТипСинхронизации";
		
	Запрос.УстановитьПараметр("ИдентификаторЭДО", ИдентификаторЭДО);
	Запрос.УстановитьПараметр("ТипСинхронизации", ТипСинхронизации);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Параметры:
//  ВыгрузкаСостоянийСинхронизации - см. РегистрыСведений.СостоянияСинхронизацииОблачногоЭДО.Выгрузить
//  ТипСинхронизации - ПеречислениеСсылка.ТипыСинхронизацииОблачногоЭДО
//  ИдентификаторыЭДО - Массив из Строка
// 
// Возвращаемое значение:
//  Массив из Структура:
//  * МеткаВремени - Число
//  * ИдентификаторЭДО - Строка
Функция МеткиВремениИдентификаторовЭДО(ВыгрузкаСостоянийСинхронизации, ТипСинхронизации, ИдентификаторыЭДО) Экспорт
	
	ТекущаяМетка = 0;
	МеткиВремениПоИдентификаторамЭДО = Новый Соответствие;
	Для Каждого ИдентификаторЭДО Из ИдентификаторыЭДО Цикл
		МеткаВремениПоИдентификаторуЭДО = Новый Структура("МеткаВремени, ИдентификаторЭДО",
			ТекущаяМетка, ИдентификаторЭДО);
		МеткиВремениПоИдентификаторамЭДО.Вставить(ИдентификаторЭДО, МеткаВремениПоИдентификаторуЭДО);
	КонецЦикла;
	
	Для Каждого СостояниеСинхронизации Из ВыгрузкаСостоянийСинхронизации Цикл
		Если СостояниеСинхронизации.ТипСинхронизации <> ТипСинхронизации Тогда
			Продолжить;
		КонецЕсли;
		МеткаВремениПоИдентификаторуЭДО = МеткиВремениПоИдентификаторамЭДО[СостояниеСинхронизации.ИдентификаторЭДО];
		Если МеткаВремениПоИдентификаторуЭДО <> Неопределено Тогда
			МеткаВремениПоИдентификаторуЭДО.МеткаВремени = СостояниеСинхронизации.МеткаВремени;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ВыгрузитьКолонку(МеткиВремениПоИдентификаторамЭДО, "Значение");
	
КонецФункции

// Параметры:
//  РезультатОбработки - Структура:
//  * МеткиВремениПоИдентификаторамЭДО - Соответствие из КлючИЗначение:
//    ** Ключ - Строка
//    ** Значение - Число
//  * ФиксированныеМеткиВремени - Соответствие из КлючИЗначение:
//    ** Ключ - Строка
//    ** Значение - Булево
// 
// Возвращаемое значение:
//  Массив из Структура:
//  * ИдентификаторЭДО - Строка
//  * МеткаВремени - Число
Функция МеткиВремениИдентификаторовЭДОПоРезультатуОбработки(РезультатОбработки) Экспорт
	
	МеткиВремениИдентификаторовЭДО = Новый Массив; // Массив из Структура
	ФиксированныеМеткиВремени = РезультатОбработки.ФиксированныеМеткиВремени;
	Для Каждого МеткаВремениПоИдентификаторуЭДО Из РезультатОбработки.МеткиВремениПоИдентификаторамЭДО Цикл
		ИдентификаторЭДО = МеткаВремениПоИдентификаторуЭДО.Ключ;
		МеткаВремени = МеткаВремениПоИдентификаторуЭДО.Значение;
		Если ФиксированныеМеткиВремени[ИдентификаторЭДО] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МеткаВремениИдентификатораЭДО = Новый Структура("ИдентификаторЭДО, МеткаВремени",
			ИдентификаторЭДО, МеткаВремени);
		МеткиВремениИдентификаторовЭДО.Добавить(МеткаВремениИдентификатораЭДО);
	КонецЦикла;
	
	Возврат МеткиВремениИдентификаторовЭДО;
	
КонецФункции

#КонецОбласти

#КонецЕсли
