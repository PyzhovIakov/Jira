///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(НастройкаПодключения.Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает настройки подключения по документам операций.
//
// Параметры:
//  ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ, по данным которого
//    необходимо получить список настроек.
//
// Возвращаемое значение:
//  СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам, Неопределено - 
//  используемая в документе, настройка онлайн-заказов.
//
Функция НастройкаПодключенияПоДокументуЗаказа(ДокументЗаказа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИдентификаторыОнлайнЗаказов.НастройкаПодключения КАК НастройкаПодключения
	|ИЗ
	|	РегистрСведений.ИдентификаторыОнлайнЗаказов КАК ИдентификаторыОнлайнЗаказов
	|ГДЕ
	|	ИдентификаторыОнлайнЗаказов.ДокументЗаказа = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", ДокументЗаказа);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НастройкаПодключения;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получает данные для определения статуса выполнения онлайн-заказа.
//
// Параметры:
//  ДокументыЗаказов - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ основание заказа
//  по которому нужно получить статус;
//
// Возвращаемое значение:
//  Структура, Неопределено - параметры заказа, Неопределено, если данные по заказу не найдены.
//
Функция ПараметрыЗаказа(ДокументЗаказа) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НастройкаПодключения", Справочники.НастройкиПодключенияКОнлайнЗаказам.ПустаяСсылка());
	Результат.Вставить("СтатусЗаказа",         "");
	Результат.Вставить("ИдентификаторЗаказа",  "");
	Результат.Вставить("URLЗаказа",            "");
	Результат.Вставить("СуммаОплаты",          0);
	Результат.Вставить("ДокументЗаказа",       ДокументЗаказа);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыОнлайнЗаказов.НастройкаПодключения КАК НастройкаПодключения,
	|	ИдентификаторыОнлайнЗаказов.СтатусЗаказа КАК СтатусЗаказа,
	|	ИдентификаторыОнлайнЗаказов.ИдентификаторЗаказа КАК ИдентификаторЗаказа,
	|	ИдентификаторыОнлайнЗаказов.URLЗаказа КАК URLЗаказа,
	|	ИдентификаторыОнлайнЗаказов.СуммаОплаты КАК СуммаОплаты
	|ИЗ
	|	РегистрСведений.ИдентификаторыОнлайнЗаказов КАК ИдентификаторыОнлайнЗаказов
	|ГДЕ
	|	ИдентификаторыОнлайнЗаказов.ДокументЗаказа = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", ДокументЗаказа);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		Возврат Результат;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Формирует структуру данных для формы отправки ссылки онлайн-заказов.
//
// Параметры:
//  ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ основание заказа
//    в информационной базе;
//
// Возвращаемое значение:
//  Структура - данные для формы платежной ссылки
//
Функция ДанныеДляФормированияСсылки(ДокументЗаказа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИдентификаторыОнлайнЗаказов.ИдентификаторЗаказа КАК ИдентификаторЗаказа,
	|	ИдентификаторыОнлайнЗаказов.НастройкаПодключения КАК НастройкаПодключения,
	|	ИдентификаторыОнлайнЗаказов.СтатусЗаказа КАК СтатусЗаказа,
	|	ИдентификаторыОнлайнЗаказов.URLЗаказа КАК URLЗаказа,
	|	ИдентификаторыОнлайнЗаказов.СуммаОплаты КАК СуммаОплаты
	|ИЗ
	|	РегистрСведений.ИдентификаторыОнлайнЗаказов КАК ИдентификаторыОнлайнЗаказов
	|ГДЕ
	|	ИдентификаторыОнлайнЗаказов.ДокументЗаказа = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", ДокументЗаказа);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("ИдентификаторЗаказа",  ВыборкаДетальныеЗаписи.ИдентификаторЗаказа);
		Результат.Вставить("НастройкаПодключения", ВыборкаДетальныеЗаписи.НастройкаПодключения);
		Результат.Вставить("СтатусЗаказа",         ВыборкаДетальныеЗаписи.СтатусЗаказа);
		Результат.Вставить("URLЗаказа",            ВыборкаДетальныеЗаписи.URLЗаказа);
		Результат.Вставить("СуммаОплаты",          ВыборкаДетальныеЗаписи.СуммаОплаты);
		
		Возврат Результат;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Производит поиск идентификатора заказа на оплату или возврата,
// если идентификатор еще не был создан, создает новый.
//
// Параметры:
//  ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ по которому нужно записать
//    новый идентификатор заказа;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам -
//    настройка выполнения операции.
//
// Возвращаемое значение:
//  Строка - идентификатор заказа.
//
Функция НовыйИдентификаторЗаказа(
		ДокументЗаказа,
		НастройкаПодключения) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИдентификаторыОнлайнЗаказов");
		ЭлементБлокировки.УстановитьЗначение("ДокументЗаказа", ДокументЗаказа);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запись = РегистрыСведений.ИдентификаторыОнлайнЗаказов.СоздатьМенеджерЗаписи();
		Запись.ДокументЗаказа = ДокументЗаказа;
		Запись.Прочитать();
		
		Если Не ЗначениеЗаполнено(Запись.ИдентификаторЗаказа) Тогда
			
			Запись.ИдентификаторЗаказа  = Новый УникальныйИдентификатор;
			Запись.ДокументЗаказа       = ДокументЗаказа;
			Запись.НастройкаПодключения = НастройкаПодключения;
			Запись.Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При формировании идентификатора заказа возникли ошибки:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОнлайнЗаказыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ТекстИсключения,
			Истина);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Возврат Запись.ИдентификаторЗаказа;
	
КонецФункции

// Производит поиск платежной ссылки по документу онлайн-заказа.
//
// Параметры:
//  ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ снование онлайн-заказа.
//
// Возвращаемое значение:
//   Структура - Содержит параметры платежной ссылки.
//     * URLЗаказа - Строка - URL онлайн-заказа.
//     * СтатусЗаказа - Строка - текущий статус онлайн-заказа.
//     * ИдентификаторЗаказа - Строка - Идентификатор заказа (обеспечивает идемпотентность).
//     * НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам - настройка создания заказа.
//     * СрокЖизни - Дата - Срок жизни ссылки.
//
Функция ПараметрыСсылкиПоДокументуЗаказа(ДокументЗаказа) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("URLЗаказа",            "");
	Результат.Вставить("СтатусЗаказа",         "");
	Результат.Вставить("ИдентификаторЗаказа",  "");
	Результат.Вставить("НастройкаПодключения", Справочники.НастройкиПодключенияКОнлайнЗаказам.ПустаяСсылка());
	Результат.Вставить("СрокЖизни",            Дата(1, 1, 1));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыОнлайнЗаказов.URLЗаказа КАК URLЗаказа,
	|	ИдентификаторыОнлайнЗаказов.СтатусЗаказа КАК СтатусЗаказа,
	|	ИдентификаторыОнлайнЗаказов.ИдентификаторЗаказа КАК ИдентификаторЗаказа,
	|	ИдентификаторыОнлайнЗаказов.НастройкаПодключения КАК НастройкаПодключения,
	|	ИдентификаторыОнлайнЗаказов.СрокЖизни КАК СрокЖизни
	|ИЗ
	|	РегистрСведений.ИдентификаторыОнлайнЗаказов КАК ИдентификаторыОнлайнЗаказов
	|ГДЕ
	|	ИдентификаторыОнлайнЗаказов.ДокументЗаказа = &ДокументЗаказа";
	
	Запрос.УстановитьПараметр("ДокументЗаказа", ДокументЗаказа);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, ВыборкаДетальныеЗаписи);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Записывает данные онлайн-заказа.
//
// Параметры:
//  ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ основание заказа;
//  ДанныеЗаказа - Структура - содержит данные заказа заполненные прикладной логикой;
//  URLЗаказа - Строка - URL онлайн-заказа;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам - настройка создания заказа;
//  СтатусЗаказа - Строка - текущий статус онлайн-заказа.
//
Процедура ЗаписатьДанныеЗаказа(
	ДокументЗаказа,
	ДанныеЗаказа,
	URLЗаказа,
	НастройкаПодключения,
	СтатусЗаказа) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИдентификаторыОнлайнЗаказов");
		ЭлементБлокировки.УстановитьЗначение("ДокументЗаказа", ДокументЗаказа);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запись = РегистрыСведений.ИдентификаторыОнлайнЗаказов.СоздатьМенеджерЗаписи();
		Запись.ДокументЗаказа = ДокументЗаказа;
		Запись.Прочитать();
		
		Если Не ЗначениеЗаполнено(Запись.ДокументЗаказа) Тогда
			ВызватьИсключение НСтр("ru = 'Информация о заказе не обнаружена, не возможно обновить данные.'");
		КонецЕсли;
		
		Запись.ИдентификаторЗаказа        = СтрЗаменить(ДанныеЗаказа.ИдентификаторЗаказа, Символы.НПП, "");
		Запись.СрокЖизни                  = ДанныеЗаказа.ОбщиеПараметрыЗаказа.СрокЖизни;
		Запись.СтатусЗаказа               = СтатусЗаказа;
		Запись.URLЗаказа                  = URLЗаказа;
		Запись.НастройкаПодключения       = НастройкаПодключения;
		Запись.КоличествоПопыток          = 0;
		Запись.ОтложенноеПолучениеСтатуса = Истина;
		
		Запись.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При записи данных заказа возникли ошибки:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОнлайнЗаказыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ТекстИсключения,
			Истина);
		
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
КонецПроцедуры

// Выполняет поиск информации о заказе в регистре и устанавливает новые значения статуса заказа
// и количества попыток.
//
// Параметры:
//  ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ основание заказа;
//  СтатусЗаказа - Строка - статус заказа по данным сервиса;
//  СпособОплаты - ПеречислениеСсылка.СпособыОплатыОнлайнЗаказов - способ оплаты заказа;
//  СуммаОплаты - Число - сумма оплаты по заказу;
//
Процедура ЗаписатьСтатусЗаказа(
		ДокументЗаказа,
		СтатусЗаказа,
		СпособОплаты,
		СуммаОплаты) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИдентификаторыОнлайнЗаказов");
		ЭлементБлокировки.УстановитьЗначение("ДокументЗаказа", ДокументЗаказа);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запись = РегистрыСведений.ИдентификаторыОнлайнЗаказов.СоздатьМенеджерЗаписи();
		Запись.ДокументЗаказа = ДокументЗаказа;
		Запись.Прочитать();
		
		Если Не ЗначениеЗаполнено(Запись.ДокументЗаказа) Тогда
			ВызватьИсключение НСтр("ru = 'Информация о документе заказа не обнаружена, невозможно записать данные.'");
		КонецЕсли;
		
		Если СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняетсяОплата() Тогда
			Запись.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняется();
		Иначе
			Запись.СтатусЗаказа = СтатусЗаказа;
		КонецЕсли;
		
		Запись.КоличествоПопыток = Запись.КоличествоПопыток + 1;
		
		Если Запись.КоличествоПопыток > МаксимальноеКоличествоПопытокЗапросаСтатуса() Тогда
			Запись.ОтложенноеПолучениеСтатуса = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СпособОплаты) Тогда
			Запись.СпособОплаты = СпособОплаты;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СпособОплаты) И ЗначениеЗаполнено(СуммаОплаты) Тогда
			Запись.СуммаОплаты = СуммаОплаты;
		КонецЕсли;
		
		Запись.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При записи данных возникли ошибки:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОнлайнЗаказыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ТекстИсключения,
			Истина);
		
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
КонецПроцедуры

// Увеличивает значение количества попыток запроса статуса.
//
// Параметры:
//  ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ снование онлайн-заказа.
//
Процедура УвеличитьКоличествоПопытокЗапросаСтатуса(ДокументЗаказа) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИдентификаторыОнлайнЗаказов");
		ЭлементБлокировки.УстановитьЗначение("ДокументЗаказа", ДокументЗаказа);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запись = РегистрыСведений.ИдентификаторыОнлайнЗаказов.СоздатьМенеджерЗаписи();
		Запись.ДокументЗаказа = ДокументЗаказа;
		Запись.Прочитать();
		
		Если Не ЗначениеЗаполнено(Запись.ДокументЗаказа) Тогда
			ВызватьИсключение НСтр("ru = 'Информация о документе заказа не обнаружена, невозможно записать данные.'");
		КонецЕсли;
		
		Запись.КоличествоПопыток = Запись.КоличествоПопыток + 1;
		
		Если Запись.КоличествоПопыток > МаксимальноеКоличествоПопытокЗапросаСтатуса() Тогда
			Запись.ОтложенноеПолучениеСтатуса = Ложь;
		КонецЕсли;
		
		Запись.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При записи данных возникли ошибки:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОнлайнЗаказыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ТекстИсключения,
			Истина);
		
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
КонецПроцедуры

// Получает данные отложенных заказов для дальнейшей обработки статусов.
//
// Возвращаемое значение:
//  Соответствие - данные операций:
//    *Ключ - СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам - настройка создания заказа.
//    *Значение - Массив из Структура - данные заказов с отложенным получением статуса.
//
Функция ОтложенныеЗаказы() Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИдентификаторыОнлайнЗаказов.ДокументЗаказа КАК ДокументЗаказа,
	|	ИдентификаторыОнлайнЗаказов.ИдентификаторЗаказа КАК ИдентификаторЗаказа,
	|	ИдентификаторыОнлайнЗаказов.НастройкаПодключения КАК НастройкаПодключения,
	|	ИдентификаторыОнлайнЗаказов.СтатусЗаказа КАК СтатусЗаказа,
	|	ИдентификаторыОнлайнЗаказов.СпособОплаты КАК СпособОплаты
	|ИЗ
	|	РегистрСведений.ИдентификаторыОнлайнЗаказов КАК ИдентификаторыОнлайнЗаказов
	|ГДЕ
	|	ИдентификаторыОнлайнЗаказов.ОтложенноеПолучениеСтатуса
	|	И ИдентификаторыОнлайнЗаказов.НастройкаПодключения.Используется
	|	И ИдентификаторыОнлайнЗаказов.СтатусЗаказа <> """"
	|ИТОГИ ПО
	|	НастройкаПодключения,
	|	СпособОплаты";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоНастройкеПодключения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДокументыПоСпособуОплаты = Новый Соответствие;
	
	Пока ВыборкаПоНастройкеПодключения.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаПоНастройкеПодключения.НастройкаПодключения) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеОпераций = Новый Массив;
		
		ВыборкаПоСпособуОплаты = ВыборкаПоНастройкеПодключения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоСпособуОплаты.Следующий() Цикл
			
			ОплаченныеДокументы = ДокументыПоСпособуОплаты.Получить(ВыборкаПоСпособуОплаты.СпособОплаты);
			
			Если ОплаченныеДокументы = Неопределено Тогда
				ОплаченныеДокументы = Новый Массив;
			КонецЕсли;
			
			ВыборкаДетальныеЗаписи = ВыборкаПоСпособуОплаты.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				ПараметрыОплаты = Новый Структура;
				ПараметрыОплаты.Вставить("СБПc2b", Неопределено);
				
				ДанныеОперации = Новый Структура;
				ДанныеОперации.Вставить("ДокументЗаказа",       ВыборкаДетальныеЗаписи.ДокументЗаказа);
				ДанныеОперации.Вставить("НастройкаПодключения", ВыборкаДетальныеЗаписи.НастройкаПодключения);
				ДанныеОперации.Вставить("ИдентификаторЗаказа",  ВыборкаДетальныеЗаписи.ИдентификаторЗаказа);
				ДанныеОперации.Вставить("СтатусЗаказа",         ВыборкаДетальныеЗаписи.СтатусЗаказа);
				ДанныеОперации.Вставить("ПараметрыОплаты",      ПараметрыОплаты);
				
				ДанныеОпераций.Добавить(ДанныеОперации);
				
				Если ВыборкаДетальныеЗаписи.СтатусЗаказа = ОнлайнЗаказыСлужебный.СтатусЗаказаОплачен() Тогда
					ОплаченныеДокументы.Добавить(ВыборкаДетальныеЗаписи.ДокументЗаказа);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ВыборкаПоСпособуОплаты.СпособОплаты) Тогда
				ДокументыПоСпособуОплаты.Вставить(
					ВыборкаПоСпособуОплаты.СпособОплаты,
					ОплаченныеДокументы);
			КонецЕсли;
			
			Результат.Вставить(
				ВыборкаПоНастройкеПодключения.НастройкаПодключения,
				ДанныеОпераций);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДополнитьДаннымиОплат(
		Результат,
		ДокументыПоСпособуОплаты);
	
	Возврат Результат;
	
КонецФункции

// Выполняет установку признака загрузки статуса регламентным заданием.
//
// Параметры:
//  ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ снование онлайн-заказа.
//  Значение - Булево - если Истина, данные статуса будут загружены регламентным заданием.
//
// Возвращаемое значение:
//  Булево - Истина, если признак отложенной загрузки статуса установлен,
//   Ложь если операция не найдена.
//
Функция УстановитьОтложенноеПолучениеСтатуса(ДокументЗаказа, Значение) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИдентификаторыОнлайнЗаказов");
		ЭлементБлокировки.УстановитьЗначение("ДокументЗаказа", ДокументЗаказа);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запись = РегистрыСведений.ИдентификаторыОнлайнЗаказов.СоздатьМенеджерЗаписи();
		Запись.ДокументЗаказа = ДокументЗаказа;
		Запись.Прочитать();
		
		// Если записи нет, обновление данных не имеет смысла.
		Если Не ЗначениеЗаполнено(Запись.ИдентификаторЗаказа) Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		// Включать отложенную загрузку имеет смысл только для операций,
		// которые не находятся в терминальном состоянии.
		Если Значение И Запись.СтатусЗаказа <> ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняется() Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		Запись.ОтложенноеПолучениеСтатуса = Значение;
		Если Запись.ОтложенноеПолучениеСтатуса Тогда
			Запись.КоличествоПопыток = 0;
		КонецЕсли;
		
		Запись.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При записи идентификатора заказа возникли ошибки:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОнлайнЗаказыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ТекстИсключения,
			Истина);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Определяет максимальное количество попыток запроса статуса онлайн-заказа.
//
// Возвращаемое значение:
//  Число - максимальное количество попыток.
//
Функция МаксимальноеКоличествоПопытокЗапросаСтатуса() Экспорт
	
	Возврат 400;
	
КонецФункции

Процедура ДополнитьДаннымиОплат(
		ДанныеЗаказовПоНастройкам,
		ДокументыПоСпособуОплаты)
	
	Для Каждого СпособОплаты Из ДокументыПоСпособуОплаты Цикл
		
		ДанныеОпераций = Новый Структура;
		
		ОнлайнЗаказыСобытия.ПриПолученииДанныхОплат(
			ДанныеОпераций,
			СпособОплаты.Ключ,
			СпособОплаты.Значение);
			
		Для Каждого ДанныеЗаказаПоНастройке Из ДанныеЗаказовПоНастройкам Цикл
			Для Каждого ДанныеЗаказа Из ДанныеЗаказаПоНастройке.Значение Цикл
				ДанныеЗаказа.ПараметрыОплаты.СБПc2b = ДанныеОпераций.Получить(ДанныеЗаказа.ДокументЗаказа);
			КонецЦикла;
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
