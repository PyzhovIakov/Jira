
#Область ОписаниеПеременных

&НаСервере
Перем ПодчиненныеСправочники;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ЗаполнитьОбъектыСКомандамиПечати();
	ЗаполнитьСписокМакетовПоРазделам();
	
	Если Параметры.Свойство("ПоказыватьТолькоПользовательскиеИзмененные") Тогда
		ОтборПоИспользованиюМакета = "ИспользуемыеИзмененные";
	Иначе
		ОтборПоИспользованиюМакета = Элементы.ОтборПоИспользованиюМакета.СписокВыбора[0].Значение;
	КонецЕсли;
	
	ЕстьПравоИзменения = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПользовательскиеМакетыПечати);
	Если Не ЕстьПравоИзменения Тогда
		СтандартнаяОбработка = Ложь;
		ТекстСообщения = НСтр("ru = 'Недостаточно прав для изменения макетов.'");
		ВызватьИсключение(ТекстСообщения, КатегорияОшибки.НарушениеПравДоступа);
	КонецЕсли;
	
	ЕстьДополнительныеЯзыки = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Мультиязычность") Тогда
		МодульМультиязычностьСервер = ОбщегоНазначения.ОбщийМодуль("МультиязычностьСервер");
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Мультиязычность.Печать") Тогда
			МодульУправлениеПечатьюМультиязычность = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатьюМультиязычность");
			ДополнительныеЯзыкиПечатныхФорм = МодульУправлениеПечатьюМультиязычность.ДополнительныеЯзыкиПечатныхФорм();
			
			Элементы.ОтборПоЯзыку.СписокВыбора.Добавить("", НСтр("ru = 'Все'"));
			Для Каждого Язык Из ДополнительныеЯзыкиПечатныхФорм Цикл
				ПредставлениеЯзыка = МодульМультиязычностьСервер.ПредставлениеЯзыка(Язык);
				Элементы.ОтборПоЯзыку.СписокВыбора.Добавить(ПредставлениеЯзыка);
			КонецЦикла;
			
			ЕстьДополнительныеЯзыки = ДополнительныеЯзыкиПечатныхФорм.Количество() > 0;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаДополнительнаяИнформация.Видимость = ЕстьДополнительныеЯзыки;
	Элементы.ОтборПоЯзыку.Видимость = ЕстьДополнительныеЯзыки;
	Элементы.МакетыДоступныеЯзыки.Видимость = ЕстьДополнительныеЯзыки;
	Элементы.МакетыДоступенПеревод.Видимость = ЕстьДополнительныеЯзыки;
	
	РежимОткрытияМакетаПросмотр = Ложь;
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		РежимОткрытияМакетаПросмотр = Истина;
		Элементы.ГруппаОтборы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
	КонецЕсли;
	
	АвтоНавигационнаяСсылка = Ложь;
	НавигационнаяСсылка = "e1cib/list/РегистрСведений.ПользовательскиеМакетыПечати";
	
	Если ЗначениеЗаполнено(Параметры.ПутьКМакету) Тогда
		ПозицияВДереве = ПозицияМакетаВДереве(Параметры.ПутьКМакету);
		Если ЗначениеЗаполнено(ПозицияВДереве) Тогда
			ПерейтиКЭлементу(ПозицияВДереве);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Не ЗначениеЗаполнено(Параметры.ПутьКМакету) Тогда
		ПерейтиКЭлементу(ПозицияВДереве);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "Запись_ТабличныйДокумент" Или ИмяСобытия = "Запись_ОфисныйДокумент" 
		Или ИмяСобытия = "Запись_ПользовательскиеМакетыПечати") Тогда
		Если Не ТолькоПросмотр Тогда
			ИдентификаторыИзмененныхСтрок = ОбновитьОтображениеМакета(Параметр);
			Если Элементы.Макеты.ТекущиеДанные <> Неопределено И Элементы.Макеты.ТекущиеДанные.ЭтоГруппа Тогда
				Элементы.Макеты.ТекущаяСтрока =
					ИдентификаторыИзмененныхСтрок[Элементы.Макеты.ТекущиеДанные.ПолучитьИдентификатор()];
				Иначе
				Для Каждого Элемент Из ИдентификаторыИзмененныхСтрок Цикл
					Элементы.Макеты.ТекущаяСтрока = Элемент.Значение;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			Если Элементы.Макеты.ТекущиеДанные <> Неопределено Тогда
				Элементы.Макеты.ТекущиеДанные.СоответствуетОтбору = Истина;
			КонецЕсли;
		КонецЕсли;
		УстановитьДоступностьКнопокКоманднойПанели();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьОтображениеМакета(Знач Параметр)
	
	ИдентификаторыИзмененныхСтрок = Новый Соответствие;
	ИдентификаторМакета = Параметр.ИмяОбъектаМетаданныхМакета;
	ИсточникиДанных = ?(Параметр.Свойство("ИсточникиДанных"),
		Параметр.ИсточникиДанных, Новый Массив);
	
	НайденныеМакеты = НайтиМакеты(ИдентификаторМакета, Макеты);
	Для Каждого Макет Из НайденныеМакеты Цикл
		ИсточникДанных = Макет.ПолучитьРодителя();
		Если СтрНачинаетсяС(ИсточникДанных.Идентификатор, "Обработка")
			Или СтрНачинаетсяС(ИсточникДанных.Идентификатор, "Отчет") Тогда
			ИсточникиДанных.Добавить(ИсточникДанных.Владелец);
		КонецЕсли;
		
		Если ИсточникиДанных.Найти(ИсточникДанных.Владелец) = Неопределено Тогда
			ИсточникДанных.ПолучитьЭлементы().Удалить(Макет);
			ОчиститьКэш(ИсточникДанных.Идентификатор, ОбъектыСКомандамиПечати);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИсточникДанных Из ИсточникиДанных Цикл
		ВеткиВладельцаМакетов = НайтиВеткиВладельцаМакетов(ИсточникДанных, Макеты);
		Для Каждого Ветка Из ВеткиВладельцаМакетов Цикл
			Если Ветка.ПолучитьЭлементы().Количество() > 0 И Не ЗначениеЗаполнено(Ветка.ПолучитьЭлементы()[0].Идентификатор) Тогда
				Продолжить;
			КонецЕсли;
			
			ОчиститьКэш(Ветка.Идентификатор, ОбъектыСКомандамиПечати);
			
			// +CRM
			//Макет = НайтиМакет(ИдентификаторМакета, Ветка);
			Макет = CRM_НайтиМакет(ИдентификаторМакета, Макеты);
			// +CRM
			Если Макет = Неопределено Тогда
				// +CRM
				//РегистрыСведений.ПользовательскиеМакетыПечати.ДобавитьПользовательскиеМакеты(Ветка.ПолучитьЭлементы(), ИдентификаторМакета);
				//Макет = НайтиМакет(ИдентификаторМакета, Ветка);
				CRM_УправлениеПечатью.ДобавитьПользовательскиеМакеты(Ветка.ПолучитьЭлементы(), ИдентификаторМакета);
				Макет = CRM_НайтиМакет(ИдентификаторМакета, Макеты);
				// -CRM
				Макет.СоответствуетОтбору = Истина;
				ИдентификаторыИзмененныхСтрок.Вставить(Ветка.ПолучитьИдентификатор(), Макет.ПолучитьИдентификатор());
				Продолжить;
			КонецЕсли;
			
			ИдентификаторыИзмененныхСтрок.Вставить(Ветка.ПолучитьИдентификатор(), Макет.ПолучитьИдентификатор());
			
			Макет.Изменен = Не Макет.Поставляемый Или УправлениеПечатью.ИспользуетсяПользовательскийМакет(ИдентификаторМакета);
			Макет.ИспользуетсяИзмененный = Макет.Изменен;
			Макет.ДоступныеЯзыки = РегистрыСведений.ПользовательскиеМакетыПечати.ДоступныеЯзыкиМакета(Параметр.ИмяОбъектаМетаданныхМакета);
			Макет.КартинкаИспользования = -1;
			Если Макет.Изменен Тогда
				Макет.КартинкаИспользования = Число(Макет.Изменен) + Число(Макет.ИспользуетсяИзмененный);
			КонецЕсли;
			Если Параметр.Свойство("Представление") Тогда
				Макет.Представление = Параметр.Представление;
			КонецЕсли;
			// +CRM
			Если Параметр.Свойство("CRM_МакетИспользуется") Тогда
				Макет.Используется = Параметр.CRM_МакетИспользуется;
			КонецЕсли;
			// -CRM
		КонецЦикла;
	КонецЦикла;
	
	Возврат ИдентификаторыИзмененныхСтрок;
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Параметр = Новый Структура("Отказ", Ложь);
	Оповестить("ЗакрытиеФормыВладельца", Параметр, ЭтотОбъект);
	
	Если Параметр.Отказ Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьОтборМакетов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПоЯзыкуПриИзменении(Элемент)
	
	ОбновитьВидимостьМакетов();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	ОбновитьВидимостьМакетов();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаПоиска = Текст; 
	
	ОбновитьВидимостьМакетов();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(СтрокаПоиска)
		 И Элементы.СтрокаПоиска.СписокВыбора.НайтиПоЗначению(СтрокаПоиска) = Неопределено Тогда
		Элементы.СтрокаПоиска.СписокВыбора.Добавить(СтрокаПоиска);
	КонецЕсли;
	
	ОбновитьВидимостьМакетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоВидуИспользуемогоМакетаПриИзменении(Элемент)
	УстановитьОтборМакетов();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоИспользованиюМакетаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОтборПоИспользованиюМакета = Элементы.ОтборПоИспользованиюМакета.СписокВыбора[0].Значение;
	УстановитьОтборМакетов();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияОбработкаНавигационнойСсылки(Элемент,
	 НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Мультиязычность.Печать") Тогда
		МодульУправлениеПечатьюМультиязычностьКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеПечатьюМультиязычностьКлиент");
		МодульУправлениеПечатьюМультиязычностьКлиент.ДополнительнаяИнформацияОбработкаНавигационнойСсылки(Элемент,
			 НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМакеты

&НаКлиенте
Процедура МакетыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Макеты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
		
	Если Поле.Имя = "МакетыКнопкаНастройкиДоступности" Тогда
		УсловияДоступности(Неопределено);
	Иначе
		ОткрытьМакетПечатнойФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МакетыПриАктивизацииСтроки(Элемент)
	
	ПозицияВДереве = ПутьКЭлементуВДереве(Элементы.Макеты.ТекущиеДанные);
	ОтключитьОбработчикОжидания("УстановитьДоступностьКнопокКоманднойПанели");
	ПодключитьОбработчикОжидания("УстановитьДоступностьКнопокКоманднойПанели", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МакетыПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		УстановитьИспользованиеМакета(ТекущиеДанные.Ссылка, ТекущиеДанные.Используется);
		НайденныеМакеты = НайтиМакеты(ТекущиеДанные.Идентификатор, Макеты);
		Для Каждого Макет Из НайденныеМакеты Цикл
			Макет.Используется = ТекущиеДанные.Используется;
		КонецЦикла;
		ОчиститьКэш(ТекущиеДанные.ПолучитьРодителя().Идентификатор, ОбъектыСКомандамиПечати);
		
		// +CRM
		УстановитьДоступностьКнопокКоманднойПанели();
		// -CRM
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьИспользованиеМакета(Макет, Используется)
	
	Справочники.МакетыПечатныхФорм.УстановитьИспользованиеМакета(Макет, Используется);
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура МакетыПередРазворачиванием(Элемент, Строка, Отказ)

	КоллекцияЭлементов = Макеты.НайтиПоИдентификатору(Строка).ПолучитьЭлементы();
	Если КоллекцияЭлементов.Количество() > 0 И Не ЗначениеЗаполнено(КоллекцияЭлементов[0].Идентификатор) Тогда
		Отказ = Истина;
		РазворачиваемыеВетки = РазворачиваемыеВетки + Формат(Строка, "ЧГ=0;") + ";";
		ПодключитьОбработчикОжидания("Подключаемый_РазвернутьВетки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазвернутьВетки()
	
	ЗагрузитьПодчиненныеЭлементы(РазворачиваемыеВетки);
	
	Для Каждого ИдентификаторСтроки Из СтрРазделить(РазворачиваемыеВетки, ";", Ложь) Цикл
		Ветка = Макеты.НайтиПоИдентификатору(ИдентификаторСтроки);
		ОтметитьЭлементыСоответствующиеОтбору(Ветка);
		Элементы.Макеты.Развернуть(ИдентификаторСтроки);
	КонецЦикла;
	
	РазворачиваемыеВетки = "";
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодчиненныеЭлементы(ИдентификаторыСтрок)
	
	Для Каждого ИдентификаторСтроки Из СтрРазделить(ИдентификаторыСтрок, ";", Ложь) Цикл
		ТекущиеДанные = Макеты.НайтиПоИдентификатору(ИдентификаторСтроки);
		КоллекцияЭлементов = ТекущиеДанные.ПолучитьЭлементы();
	
		Если КоллекцияЭлементов.Количество() = 0 Или ЗначениеЗаполнено(КоллекцияЭлементов[0].Идентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		КоллекцияЭлементов.Очистить();
		
		ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоПолномуИмени(ТекущиеДанные.Идентификатор);
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ВывестиМакеты(ТекущиеДанные);
		
		Если ОбщегоНазначения.ЭтоЖурналДокументов(ОбъектМетаданных) Тогда
			ВывестиКоллекцию(ТекущиеДанные, ОбъектМетаданных.РегистрируемыеДокументы);
		ИначеЕсли ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда 
			ВывестиКоллекцию(ТекущиеДанные, ПодчиненныеСправочники(ОбъектМетаданных));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьМакет(Команда)
	ОткрытьМакетПечатнойФормыДляРедактирования();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИзмененныйМакет(Команда)
	ПереключитьИспользованиеВыбранныхМакетов(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСтандартныйМакет(Команда)
	ПереключитьИспользованиеВыбранныхМакетов(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМакет(Команда)
	
	ПараметрыОповещения = Новый Структура("Копирование, ТипМакета", Ложь, "MXL");
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриВыбореИмениМакета", ЭтотОбъект, ПараметрыОповещения);
	УникальноеНаименование = ПолучитьУникальноеНаименование(НСтр("ru = 'Новая печатная форма'"), Ложь);
	ПоказатьВводСтроки(ОписаниеОповещения, УникальноеНаименование, НСтр("ru = 'Введите наименование макета'"), 100, Ложь)
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВСписок(Команда)
	ПерейтиКСписку();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМакетOfficeOpenXML(Команда)
	
	ПараметрыОповещения = Новый Структура("Копирование, ТипМакета", Ложь, "DOCX");
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриВыбореИмениМакета", ЭтотОбъект, ПараметрыОповещения);
	УникальноеНаименование = ПолучитьУникальноеНаименование(НСтр("ru = 'Новая печатная форма'"), Ложь);
	ПоказатьВводСтроки(ОписаниеОповещения, УникальноеНаименование, НСтр("ru = 'Введите наименование макета'"), 100, Ложь)
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияДоступности(Команда)
	
	ТекущиеДанные = Элементы.Макеты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Ссылка);
	
	ОткрытьФорму("Справочник.МакетыПечатныхФорм.Форма.УсловияВидимостиВПодменюПечать", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Отборы

&НаКлиенте
Процедура УстановитьОтборМакетов()

	ПоказыватьИзмененные = Истина;
	ПоказыватьНеизмененные = Истина;
	ПоказыватьИспользуемые = Истина;
	ПоказыватьНеиспользуемые = Истина;
	
	Если ОтборПоИспользованиюМакета = "Измененные" Тогда
		ПоказыватьНеизмененные = Ложь;
	ИначеЕсли ОтборПоИспользованиюМакета = "НеИзмененные" Тогда
		ПоказыватьИзмененные = Ложь;
	ИначеЕсли ОтборПоИспользованиюМакета = "ИспользуемыеИзмененные" Тогда
		ПоказыватьНеиспользуемые = Ложь;
		ПоказыватьНеИзмененные = Ложь;
	ИначеЕсли ОтборПоИспользованиюМакета = "НеИспользуемыеИзмененные" Тогда
		ПоказыватьНеизмененные = Ложь;
		ПоказыватьИспользуемые = Ложь;
	КонецЕсли;
	
	ОбновитьВидимостьМакетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьМакетов(Интервал = 0.5);
	
	ОтключитьОбработчикОжидания("ПрименитьОтбор");
	ПодключитьОбработчикОжидания("ПрименитьОтбор", Интервал, Истина);
	
КонецПроцедуры

#КонецОбласти

// Открытие макета

&НаКлиенте
Процедура ОткрытьМакетПечатнойФормы()
	
	Если РежимОткрытияМакетаПросмотр Тогда
		ОткрытьМакетПечатнойФормыДляПросмотра();
	Иначе
		ОткрытьМакетПечатнойФормыДляРедактирования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМакетПечатнойФормыДляПросмотра()
	
	ТекущиеДанные = Элементы.Макеты.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяОбъектаМетаданныхМакета", ТекущиеДанные.ИмяОбъектаМетаданныхМакета);
	ПараметрыФормы.Вставить("ТипМакета", ТекущиеДанные.ТипМакета);
	ПараметрыФормы.Вставить("ТолькоОткрытие", Истина);
	// +CRM
	ПараметрыФормы.Вставить("ИсточникДанных", ТекущиеДанные.Владелец);
	ПараметрыФормы.Вставить("ИсточникиДанных", ТекущиеДанные.ИсточникиДанных);
	ПараметрыФормы.Вставить("ЭтоПечатнаяФорма", ТекущиеДанные.ЭтоПечатнаяФорма);
	ПараметрыФормы.Вставить("ДоступноНазначение", Не ТекущиеДанные.Поставляемый);
	// -CRM
	
	Если ТекущиеДанные.ТипМакета = "MXL" Тогда
		ПараметрыРедактора = СтандартныеПодсистемыКлиент.ПараметрыРедактораТабличногоДокумента();
		ПараметрыРедактора.ИмяДокумента = ТекущиеДанные.Представление;
		ПараметрыРедактора.Вставить("ИмяОбъектаМетаданныхМакета", ТекущиеДанные.ИмяОбъектаМетаданныхМакета);
		СтандартныеПодсистемыКлиент.ПоказатьРедакторТабличногоДокумента(Неопределено, ПараметрыРедактора);
		Возврат;
	ИначеЕсли ТекущиеДанные.ТипМакета = "DOCX" Тогда
		Если ВерсияМакета(ТекущиеДанные.Идентификатор, ТекущиеДанные.ТипМакета) = "Области" Тогда
			// +CRM
			//ОткрытьФорму("РегистрСведений.ПользовательскиеМакетыПечати.Форма.РедактированиеМакета", ПараметрыФормы,
			ОткрытьФорму("РегистрСведений.ПользовательскиеМакетыПечати.Форма.CRM_РедактированиеМакета", ПараметрыФормы,
			// -CRM
				ЭтотОбъект);
			Возврат;
		КонецЕсли;
		ПараметрыФормы.Вставить("ИмяДокумента", ТекущиеДанные.Представление);
		ПараметрыФормы.Вставить("Редактирование", Ложь);
		ОткрытьФорму("ОбщаяФорма.РедактированиеДокументаOfficeOpen", ПараметрыФормы, ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	// +CRM
	//ОткрытьФорму("РегистрСведений.ПользовательскиеМакетыПечати.Форма.РедактированиеМакета", ПараметрыФормы, ЭтотОбъект);
	ПараметрыФормы.Вставить("ИмяДокумента", ТекущиеДанные.Представление);
	ОткрытьФорму("РегистрСведений.ПользовательскиеМакетыПечати.Форма.CRM_РедактированиеМакета",
		 ПараметрыФормы, ЭтотОбъект);
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМакетПечатнойФормыДляРедактирования()
	
	ТекущиеДанные = Элементы.Макеты.ТекущиеДанные;
	
	Если ТекущиеДанные.Изменен И Не ТекущиеДанные.ИспользуетсяИзмененный Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьМакетПечатнойФормыДляРедактированияПродолжение", ЭтотОбъект, ТекущиеДанные);
		ТекстВопроса = НСтр("ru = 'Имеется измененный макет, но он не используется.
		|Можно переключиться на него и продолжить редактирование,
		|либо начать редактирование стандартного макета.'");
		
		Кнопки = Новый СписокЗначений();
		Кнопки.Добавить(Истина, НСтр("ru = 'Измененный ранее'"));
		Кнопки.Добавить(Ложь, НСтр("ru = 'Стандартный (текущий)'"));
		Кнопки.Добавить(Неопределено, НСтр("ru = 'Отмена'"));
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , , НСтр("ru = 'Какой макет редактировать?'"));
		Возврат;
	КонецЕсли;
	
	ОткрытьМакетПечатнойФормыДляРедактированияПродолжение(Ложь, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМакетПечатнойФормыДляРедактированияПродолжение(ПереключитьИспользование, ТекущиеДанные) Экспорт

	Если ПереключитьИспользование = Неопределено Тогда
		Возврат;
	ИначеЕсли ПереключитьИспользование Тогда
		ПереключитьИспользованиеВыбранныхМакетов(Истина);
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИмяОбъектаМетаданныхМакета", ТекущиеДанные.ИмяОбъектаМетаданныхМакета);
	ПараметрыОткрытия.Вставить("ТипМакета", ТекущиеДанные.ТипМакета);
	ПараметрыОткрытия.Вставить("Ссылка", ТекущиеДанные.Ссылка);
	ПараметрыОткрытия.Вставить("ИсточникДанных", ТекущиеДанные.Владелец);
	ПараметрыОткрытия.Вставить("ИсточникиДанных", ТекущиеДанные.ИсточникиДанных);
	ПараметрыОткрытия.Вставить("ЭтоПечатнаяФорма", ТекущиеДанные.ЭтоПечатнаяФорма);
	ПараметрыОткрытия.Вставить("ДоступноНазначение", Не ТекущиеДанные.Поставляемый);
	// +CRM
	ПараметрыОткрытия.Вставить("ИмяДокумента", ТекущиеДанные.Представление);
	ПараметрыОткрытия.Вставить("CRM_ПоставляемыйМакет", ТекущиеДанные.Поставляемый);
	// -CRM
	
	Если ТекущиеДанные.ТипМакета = "MXL" Тогда
		ПараметрыФормы = СтандартныеПодсистемыКлиент.ПараметрыРедактораТабличногоДокумента();
		ПараметрыФормы.ИмяДокумента = ТекущиеДанные.Представление;
		ПараметрыФормы.Редактирование = Не ТолькоПросмотр;
		// +CRM
		ПараметрыФормы.Вставить("CRM_ИмяМакета", ТекущиеДанные.CRM_ИмяМакета);
		ПараметрыФормы.Вставить("CRM_МакетИспользуется", ТекущиеДанные.Используется);
		// -CRM
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ПараметрыОткрытия, Истина);
		СтандартныеПодсистемыКлиент.ПоказатьРедакторТабличногоДокумента(Неопределено, ПараметрыФормы,, ЭтотОбъект);
		Возврат;
	ИначеЕсли ТекущиеДанные.ТипМакета = "DOCX" Тогда
		Если ВерсияМакета(ТекущиеДанные.Идентификатор, ТекущиеДанные.ТипМакета) = "Области" Тогда
			ОткрытьФорму("РегистрСведений.ПользовательскиеМакетыПечати.Форма.РедактированиеМакета", ПараметрыОткрытия, ЭтотОбъект);
			Возврат;
		КонецЕсли;
		ПараметрыОткрытия.Вставить("ИмяДокумента", ТекущиеДанные.Представление);
		ПараметрыОткрытия.Вставить("Редактирование", Истина);
		// +CRM
		ПараметрыОткрытия.Вставить("CRM_ИмяМакета", ТекущиеДанные.CRM_ИмяМакета);
		ПараметрыОткрытия.Вставить("CRM_МакетИспользуется", ТекущиеДанные.Используется);
		// -CRM
		ОткрытьФорму("ОбщаяФорма.РедактированиеДокументаOfficeOpen", ПараметрыОткрытия, ЭтотОбъект);
		Возврат;
	// +CRM
	ИначеЕсли ТекущиеДанные.ТипМакета = "HTML" Или ТекущиеДанные.ТипМакета = "HTM" Тогда
		ПараметрыОткрытия.Вставить("Редактирование", Не ТолькоПросмотр);
		ПараметрыОткрытия.Вставить("Идентификатор", ТекущиеДанные.Идентификатор);
		ПараметрыОткрытия.Вставить("CRM_ИмяМакета", ТекущиеДанные.CRM_ИмяМакета);
		ОткрытьФорму("Обработка.CRM_РаботаСHTML.Форма.РедакторМакетаHTML", ПараметрыОткрытия, ЭтотОбъект,
			 ТекущиеДанные.CRM_ИмяМакета);
		Возврат;
	// -CRM
	КонецЕсли;
	
	// +CRM
	//ОткрытьФорму("РегистрСведений.ПользовательскиеМакетыПечати.Форма.РедактированиеМакета", ПараметрыОткрытия, ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.ПользовательскиеМакетыПечати.Форма.CRM_РедактированиеМакета",
		 ПараметрыОткрытия, ЭтотОбъект);
	// -CRM
	
КонецПроцедуры

// Действия с макетами

&НаСервереБезКонтекста
Функция ВерсияМакета(Идентификатор, ТипМакета)
	Макет = УправлениеПечатью.МакетПечатнойФормы(Идентификатор);
	ДанныеМакета = УправлениеПечатью.ИнициализироватьМакетОфисногоДокумента(Макет, ТипМакета);
	
	Если ДанныеМакета.СтруктураДокумента.ОбластиДокумента.Количество() > 1 
		ИЛИ ДанныеМакета.СтруктураДокумента.ОбластиДокумента["Абзац"] = Неопределено Тогда
		ВерсияМакета = "Области";
	Иначе
		ВерсияМакета = "Параметры";
	КонецЕсли;
	
	ДанныеМакета.Вставить("ВерсияМакета", ВерсияМакета);
	Возврат ДанныеМакета.ВерсияМакета;
КонецФункции

&НаКлиенте
Процедура ПереключитьИспользованиеВыбранныхМакетов(ИспользуетсяИзмененный)
	ПереключаемыеМакеты = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.Макеты.ВыделенныеСтроки Цикл
		ТекущиеДанные = Элементы.Макеты.ДанныеСтроки(ВыделеннаяСтрока);
		// +CRM
		Если Не ТекущиеДанные.Поставляемый Тогда Продолжить; КонецЕсли;
		// -CRM
		Если ТекущиеДанные.Изменен Тогда
			ТекущиеДанные.ИспользуетсяИзмененный = ИспользуетсяИзмененный;
			УстановитьКартинкуИспользования(ТекущиеДанные);
			ПереключаемыеМакеты.Добавить(ТекущиеДанные.ИмяОбъектаМетаданныхМакета);
		КонецЕсли;
	КонецЦикла;
	УстановитьИспользованиеИзмененныхМакетов(ПереключаемыеМакеты, ИспользуетсяИзмененный);
	УстановитьДоступностьКнопокКоманднойПанели();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьИспользованиеИзмененныхМакетов(Макеты, ИспользуетсяИзмененный)
	
	РегистрыСведений.ПользовательскиеМакетыПечати.УстановитьИспользованиеИзмененныхМакетов(Макеты, ИспользуетсяИзмененный);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыбранныеИзмененныеМакеты(Команда)
	
	// +CRM
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВыделенныеСтроки", Элементы.Макеты.ВыделенныеСтроки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаОбУдалении", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Пользовательские макеты будут удалены,
		| типовые заменены на оригинальные. Продолжить ?'"),
		 РежимДиалогаВопрос.ДаНет);
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаОбУдалении(Ответ, ДопПараметры) Экспорт
	// +CRM
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УдаляемыеМакеты = Новый Массив;
		Для Каждого ВыделеннаяСтрока Из ДопПараметры.ВыделенныеСтроки Цикл
	// -CRM
			ТекущиеДанные = Элементы.Макеты.ДанныеСтроки(ВыделеннаяСтрока);
			ТекущиеДанные.ИспользуетсяИзмененный = Ложь;
			ТекущиеДанные.Изменен = Ложь;
			ТекущиеДанные.ДоступныеЯзыки = "";
			УстановитьКартинкуИспользования(ТекущиеДанные);
			УдаляемыеМакеты.Добавить(ТекущиеДанные.ИмяОбъектаМетаданныхМакета);
		КонецЦикла;
		УдалитьИзмененныеМакеты(УдаляемыеМакеты);
		УстановитьДоступностьКнопокКоманднойПанели();
	// +CRM
	КонецЕсли;
	// -CRM
КонецПроцедуры

// +CRM
//&НаСервереБезКонтекста
&НаСервере
// -CRM
Процедура УдалитьИзмененныеМакеты(УдаляемыеМакеты)
	
	Для Каждого ИмяОбъектаМетаданныхМакета Из УдаляемыеМакеты Цикл
		УправлениеПечатью.УдалитьМакет(ИмяОбъектаМетаданныхМакета);
		// +CRM
		СтрокаМакет = CRM_НайтиМакет(ИмяОбъектаМетаданныхМакета, Макеты);
		Если ЗначениеЗаполнено(СтрокаМакет.Ссылка) Тогда
			МакетОбъект = СтрокаМакет.Ссылка.ПолучитьОбъект();
			МакетОбъект.Представления.Очистить();
			МакетОбъект.Записать();
		КонецЕсли;
		// -CRM
	КонецЦикла;
	
КонецПроцедуры

// Общие

&НаКлиенте
Процедура УстановитьКартинкуИспользования(ОписаниеМакета)
	ОписаниеМакета.КартинкаИспользования = -1;
	Если ОписаниеМакета.Изменен Тогда
		ОписаниеМакета.КартинкаИспользования = Число(ОписаниеМакета.Изменен) + Число(ОписаниеМакета.ИспользуетсяИзмененный);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокКоманднойПанели()
	
	ТекущийМакет = Элементы.Макеты.ТекущиеДанные;
	ТекущийМакетВыбран = ТекущийМакет <> Неопределено;
	ВыбраноНесколькоМакетов = Элементы.Макеты.ВыделенныеСтроки.Количество() > 1;
	
	ИспользоватьИзмененныйМакетДоступность  = Ложь;
	ИспользоватьСтандартныйМакетДоступность = Ложь;
	УдалитьИзмененныйМакетДоступность       = Ложь;
	УдалитьМакетВидимость                   = Ложь;
	ДоступноОтображениеВСписке              = Ложь;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Макеты.ВыделенныеСтроки Цикл
		ТекущийМакет = Элементы.Макеты.ДанныеСтроки(ВыделеннаяСтрока);
		// +CRM
		ИспользоватьИзмененныйМакетДоступность = ТекущийМакетВыбран И ТекущийМакет.Изменен
			 И Не ТекущийМакет.ИспользуетсяИзмененный И ТекущийМакет.Поставляемый Или ВыбраноНесколькоМакетов
			 И ИспользоватьИзмененныйМакетДоступность;
		ИспользоватьСтандартныйМакетДоступность = ТекущийМакетВыбран И ТекущийМакет.Изменен
			 И ТекущийМакет.ИспользуетсяИзмененный И ТекущийМакет.Поставляемый Или ВыбраноНесколькоМакетов
			 И ИспользоватьСтандартныйМакетДоступность;
		УдалитьИзмененныйМакетДоступность = ТекущийМакетВыбран И ТекущийМакет.Изменен 
			 И ТекущийМакет.Поставляемый Или ВыбраноНесколькоМакетов
			 И УдалитьИзмененныйМакетДоступность;
		УдалитьМакетВидимость = ТекущийМакетВыбран И Не ТекущийМакет.Поставляемый
			 Или ВыбраноНесколькоМакетов
			 И УдалитьМакетВидимость;
		// -CRM
		
		ИсточникиДанных = СтрРазделить(ТекущийМакет.ИсточникиДанных, ",", Ложь);
		Для Каждого ИсточникДанных Из ИсточникиДанных Цикл
			Если СтрНачинаетсяС(ИсточникДанных, "Обработка") 
				Или СтрНачинаетсяС(ИсточникДанных, "Отчет")
				Или ИсточникДанных = "ОбщийМакет" Тогда
				Продолжить;
			КонецЕсли;
			ДоступноОтображениеВСписке = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Элементы.МакетыИспользоватьИзмененныйМакет.Доступность = ИспользоватьИзмененныйМакетДоступность;
	Элементы.МакетыИспользоватьСтандартныйМакет.Доступность = ИспользоватьСтандартныйМакетДоступность;
	Элементы.МакетыУдалитьИзмененныйМакет.Доступность = УдалитьИзмененныйМакетДоступность;
	
	Элементы.МакетыКонтекстноеМенюУдалитьИзмененныйМакет.Видимость = УдалитьИзмененныйМакетДоступность  И Не ТолькоПросмотр;
	Элементы.МакетыКонтекстноеМенюУдалитьМакет.Видимость = УдалитьМакетВидимость И Не ТолькоПросмотр;
	Элементы.МакетыУсловияДоступности.Доступность = ТекущийМакетВыбран И ТекущийМакет.ДоступнаНастройкаВидимости;
	Элементы.МакетыСкопировать.Доступность = ТекущийМакетВыбран И ТекущийМакет.ЭтоПечатнаяФорма И Не ВыбраноНесколькоМакетов И ТекущийМакет.ДоступноСоздание И Не ТолькоПросмотр;
	Элементы.МакетыДобавитьМакет.Доступность = ТекущийМакетВыбран И ТекущийМакет.ДоступноСоздание;
	Элементы.МакетыДобавитьМакетOfficeOpenXML.Доступность = ТекущийМакетВыбран И ТекущийМакет.ДоступноСоздание;
	Элементы.МакетыИзменитьМакет.Доступность = ТекущийМакетВыбран И Не ТекущийМакет.ЭтоГруппа;
	Элементы.ФормаПоказатьВСписке.Доступность = ДоступноОтображениеВСписке;
	
	// +CRM
	Элементы.МакетыСохранить.Доступность = ТекущийМакетВыбран И Не ТекущийМакет.ЭтоГруппа;
	Элементы.СписокМакетовДобавить.Доступность = ТекущийМакетВыбран И ТекущийМакет.Владелец <> Неопределено;
	//Элементы.МакетыОткрытьМакет.Доступность = ТекущийМакетВыбран И Не ВыбраноНесколькоМакетов И Не ТекущийМакет.ЭтоГруппа;
	Элементы.МакетыCRM_ОткрытьСвойства.Доступность = ТекущийМакетВыбран И Не ВыбраноНесколькоМакетов
		 И Не ТекущийМакет.ЭтоГруппа;
	Элементы.МакетыКонтекстноеМенюCRM_Добавить.Доступность = ТекущийМакетВыбран И ТекущийМакет.ДоступноСоздание;
	Элементы.МакетыКонтекстноеМенюCRM_ОткрытьСвойства.Доступность = ТекущийМакетВыбран
		 И Не ВыбраноНесколькоМакетов
		 И Не ТекущийМакет.ЭтоГруппа;
	Элементы.МакетыКонтекстноеМенюИзменитьМакет.Доступность = ТекущийМакетВыбран И Не ТекущийМакет.ЭтоГруппа;
	
	ИмяВладельца = "";
	Если ТекущийМакетВыбран И ЗначениеЗаполнено(ТекущийМакет.Владелец) Тогда
		ИмяВладельца = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущийМакет.Владелец, "Имя");
	КонецЕсли;
	
	Если (ИмяВладельца = "CRM_СчетНаОплатуПокупателю"
		Или ИмяВладельца = "КоммерческоеПредложениеКлиенту"
		Или ИмяВладельца = "CRM_Интерес") Тогда
		
		Элементы.СписокМакетовДобавить.Видимость = Истина;
		Элементы.МакетыГруппаДобавитьМакет.Видимость = Ложь;
	Иначе
		Элементы.СписокМакетовДобавить.Видимость = Ложь;
		Элементы.МакетыГруппаДобавитьМакет.Видимость = Истина;
	КонецЕсли;
	
	//Если ТекущийМакетВыбран И Не ВыбраноНесколькоМакетов И ТекущийМакет.ДоступноСоздание И Не ТекущийМакет.ЭтоГруппа Тогда
	//	ИмяВладельца = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущийМакет.Владелец, "Имя");
	//	Если (ИмяВладельца = "CRM_СчетНаОплатуПокупателю"
	//		 Или ИмяВладельца = "КоммерческоеПредложениеКлиенту"
	//		 Или ИмяВладельца = "CRM_Интерес")
	//		И Не (ТекущийМакет.Поставляемый И ТекущийМакет.ТипМакета = "MXL") Тогда
	//		
	//		Элементы.МакетыСкопировать.Доступность = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура Скопировать(Команда)
	
	// +CRM
	ТекущиеДанные = Элементы.Макеты.ТекущиеДанные;
	ИмяВладельца = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Владелец, "Имя");
	Если (ИмяВладельца = "CRM_СчетНаОплатуПокупателю"
		 Или ИмяВладельца = "КоммерческоеПредложениеКлиенту"
		 Или ИмяВладельца = "CRM_Интерес") Тогда
		 
		СтруктураМакета = Новый Структура;
		СтруктураМакета.Вставить("Идентификатор", ТекущиеДанные.Идентификатор);
		СтруктураМакета.Вставить("CRM_ИмяМакета", ТекущиеДанные.CRM_ИмяМакета);
		СтруктураМакета.Вставить("ТипМакета", ТекущиеДанные.ТипМакета);
		СтруктураМакета.Вставить("Владелец", ТекущиеДанные.Владелец);
		СтруктураМакета.Вставить("Представление", ТекущиеДанные.Представление);
		
		СтруктураВозврата = ПолучитьДанныеМакета(СтруктураМакета);
		Если СтруктураВозврата <> Неопределено Тогда
			#Если ВебКлиент Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ПутьКФайлуМакетаПродолжение", ЭтотОбъект, СтруктураВозврата);
				НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
			#Иначе
				ПутьКФайлуМакетаПродолжение(Истина, СтруктураВозврата);
			#КонецЕсли
		КонецЕсли;
	Иначе
	// -CRM
		ПараметрыОповещения = Новый Структура("Копирование, ТипМакета", Истина);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриВыбореИмениМакета", ЭтотОбъект, ПараметрыОповещения);
		ТекущийМакет = Элементы.Макеты.ТекущиеДанные;
		НаименованиеКопии = ПолучитьУникальноеНаименование(ТекущийМакет.Представление);
		ПоказатьВводСтроки(ОписаниеОповещения, НаименованиеКопии, НСтр("ru = 'Введите наименование макета';
		                                                               |en = 'Enter a template description'"), 100, Ложь);
	// +CRM
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

&НаСервере
Функция ПолучитьУникальноеНаименование(НаименованиеМакета, ЭтоКопирование = Истина)
	
	НовоеНаименование = НаименованиеМакета;
	ОкончаниеКопии = "";
	Счетчик = 1;
	ДеревоМакетов = РеквизитФормыВЗначение("Макеты");
	Пока ДеревоМакетов.Строки.Найти(НовоеНаименование + ОкончаниеКопии, "Представление", Истина) <> Неопределено Цикл
		Если ЭтоКопирование Тогда
			ОкончаниеКопии = " - " + НСтр("ru = 'копия';
											|en = 'copy'");
		Иначе
			ОкончаниеКопии = "";
		КонецЕсли;
		
		Если Счетчик > 1 Тогда
			ОкончаниеКопии = ОкончаниеКопии + " ("+Формат(Счетчик, "ЧДЦ=0; ЧГ=;")+")";
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;			
	Возврат НовоеНаименование + ОкончаниеКопии;
	
КонецФункции

&НаКлиенте
Процедура ПриВыбореИмениМакета(ТекИмяМакета, ПараметрыОповещения) Экспорт
	
	Копирование = ПараметрыОповещения.Копирование;
	
	Если Не ЗначениеЗаполнено(ТекИмяМакета) Тогда
		Возврат;
	КонецЕсли;
	
	// +CRM
	Если ТипЗнч(ТекИмяМакета) = Тип("Строка") Тогда
		ИмяМакета = ТекИмяМакета;
		CRM_ИмяМакета = "";
		МакетИспользуется = Истина;
	ИначеЕсли ТипЗнч(ТекИмяМакета) = Тип("Структура") Тогда
		ИмяМакета = ТекИмяМакета.Представление;
		CRM_ИмяМакета = ТекИмяМакета.CRM_ИмяМакета;
		МакетИспользуется = ТекИмяМакета.CRM_МакетИспользуется;
	Иначе
		Возврат;
	КонецЕсли;
	// -CRM
	
	ТекущиеДанные = Элементы.Макеты.ТекущиеДанные;
	
	ТипМакета = ?(ПараметрыОповещения.ТипМакета = Неопределено, ТекущиеДанные.ТипМакета, ПараметрыОповещения.ТипМакета);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТипМакета", ТипМакета);
	ПараметрыОткрытия.Вставить("Владелец", ?(ЗначениеЗаполнено(ТекущиеДанные.Владелец), ТекущиеДанные.Владелец, ТекущиеДанные.Идентификатор));
	ПараметрыОткрытия.Вставить("ИмяДокумента", ИмяМакета);
	// +CRM
	ПараметрыОткрытия.Вставить("CRM_ИмяМакета", CRM_ИмяМакета);
	ПараметрыОткрытия.Вставить("CRM_МакетИспользуется", МакетИспользуется);
	// -CRM
	
	Если Копирование Тогда
		ПараметрыОткрытия.Вставить("ИмяОбъектаМетаданныхМакета", ТекущиеДанные.ИмяОбъектаМетаданныхМакета);
		ПараметрыОткрытия.Вставить("Копирование", Копирование);
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("ИсточникДанных", ТекущиеДанные.Владелец);
	ПараметрыОткрытия.Вставить("ЭтоПечатнаяФорма", Истина);
	ПараметрыОткрытия.Вставить("ДоступноНазначение", Истина);
	
	Если ТипМакета = "MXL" Тогда
		ПараметрыФормы = СтандартныеПодсистемыКлиент.ПараметрыРедактораТабличногоДокумента();
		ПараметрыФормы.Редактирование = Истина;
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ПараметрыОткрытия, Истина);
		СтандартныеПодсистемыКлиент.ПоказатьРедакторТабличногоДокумента(Неопределено, ПараметрыФормы);
		Возврат;
	КонецЕсли;
	
	Если ТипМакета = "DOCX" Тогда
		ПараметрыОткрытия.Вставить("Редактирование", Истина);
		ОткрытьФорму("ОбщаяФорма.РедактированиеДокументаOfficeOpen", ПараметрыОткрытия, ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	// +CRM
	//ОткрытьФорму("РегистрСведений.ПользовательскиеМакетыПечати.Форма.РедактированиеМакета",
		// ПараметрыОткрытия,
		// ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.ПользовательскиеМакетыПечати.Форма.CRM_РедактированиеМакета",
		ПараметрыОткрытия,
		ЭтотОбъект);
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСписку()
	
	ВладелецКоманд = Элементы.Макеты.ТекущиеДанные;
	Если ВладелецКоманд = Неопределено Или СтрНачинаетсяС(ВладелецКоманд.Идентификатор, "Подсистема") Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ВладелецКоманд.ПолучитьРодителя();
	Если Родитель <> Неопределено И Не СтрНачинаетсяС(Родитель.Идентификатор, "Подсистема") Тогда
		ВладелецКоманд = Родитель;
	КонецЕсли;
	
	НавигационнаяСсылкаСписка = ПолучитьНавигационнуюСсылкуНаФормуСписка(ВладелецКоманд.Владелец);
	Для Каждого ОкноКлиентскогоПриложения Из ПолучитьОкна() Цикл
		Если ОкноКлиентскогоПриложения.ПолучитьНавигационнуюСсылку() = НавигационнаяСсылкаСписка Тогда
			Форма = ОкноКлиентскогоПриложения.Содержимое[0];
			ОписаниеОповещения = Новый ОписаниеОповещения("ПерейтиКСпискуЗавершение", ЭтотОбъект, 
				Новый Структура("Форма, НавигационнаяСсылка", Форма, НавигационнаяСсылкаСписка));
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("Переоткрыть", НСтр("ru = 'Переоткрыть';
												|en = 'Reopen'"));
			Кнопки.Добавить("Отмена", НСтр("ru = 'Не переоткрывать';
											|en = 'Do not reopen'"));
			ТекстВопроса = 
				НСтр("ru = 'Список уже открыт. Переоткрыть список, 
				|чтобы увидеть изменения меню печать?';
				|en = 'The list is already open. Reopen the list
				|to see the changes in Print menu?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , "Переоткрыть");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(НавигационнаяСсылкаСписка);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНавигационнуюСсылкуНаФормуСписка(ИдентификаторОбъектаМетаданных)
	Возврат  "e1cib/list/"
		+ ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИдентификаторОбъектаМетаданных).ПолноеИмя();
КонецФункции

&НаКлиенте
Процедура ПерейтиКСпискуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = "Отмена" Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Форма.Закрыть();
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ДополнительныеПараметры.НавигационнаяСсылка);
КонецПроцедуры

&НаСервере
Функция CRM_НайтиМакет(Идентификатор, Ветка, НайденныйМакет = Неопределено)
	
	МакетыЭлементы = Ветка.ПолучитьЭлементы();
	Для Каждого ТекЭлемент Из МакетыЭлементы Цикл
		Если Не НайденныйМакет = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если ТекЭлемент.ЭтоГруппа Или ТекЭлемент.ПолучитьЭлементы().Количество() > 0 Тогда
			CRM_НайтиМакет(Идентификатор, ТекЭлемент, НайденныйМакет);
		КонецЕсли;
		Если ТекЭлемент.ИмяОбъектаМетаданныхМакета = Идентификатор Тогда
			НайденныйМакет = ТекЭлемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныйМакет;
	
КонецФункции

&НаКлиенте
Процедура УдалитьМакет(Команда)
	
	ТекущиеДанные = Элементы.Макеты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторМакета = ТекущиеДанные.Идентификатор;
	УдалитьМакетНаСервере(ИдентификаторМакета);
	НайденныеМакеты = НайтиМакеты(ИдентификаторМакета, Макеты);
	Для Каждого Макет Из НайденныеМакеты Цикл
		Макет.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Макет);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМакетНаСервере(ИдентификаторМакета)
	
	УправлениеПечатью.УдалитьМакет(ИдентификаторМакета);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Разделы
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Макеты");
	
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Макеты.ЭтоПодраздел");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветРазделаПанелиФункций);
	
	// Цвет отключенных
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Макеты");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Макеты.Используется");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// Скрытие флажка использования для групп
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("МакетыИспользуется");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Макеты.ЭтоГруппа");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Скрытие флажка использования для поставляемых макетов
	
	// +CRM
	//ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	//
	//ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	//ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("МакетыИспользуется");
	//
	//ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Макеты.Поставляемый");
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.ПравоеЗначение = Истина;
	//
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	// -CRM
	
	// Отбор
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Макеты");

	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Макеты.СоответствуетОтбору");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;

	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Макеты.ЕстьЭлементыСоответствующиеОтбору");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Не соответствующие отбору 
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Макеты");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Макеты.СоответствуетОтбору");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Макеты.ЕстьЭлементыСоответствующиеОтбору");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;

	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Макеты.СтрокаПоиска");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит;
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("СтрокаПоиска");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокМакетовПоРазделам()
	
	Макеты.ПолучитьЭлементы().Очистить();
	ВывестиКоллекцию(Макеты, Метаданные.Подсистемы);
	ЗаполнитьТаблицуМакетовПечатныхФорм(Макеты);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуМакетовПечатныхФорм(Ветка)
	
	ОбъектыСМакетами = Новый Соответствие;
	Для Каждого ОписаниеМакета Из УправлениеПечатью.МакетыПечатныхФорм(Истина) Цикл
		ОбъектыСМакетами.Вставить(ОписаниеМакета.Значение, Истина);
	КонецЦикла;
	
	ОбъектыМетаданных = Новый Массив;
	Для Каждого Объект Из ОбъектыСМакетами Цикл
		ОбъектыМетаданных.Добавить(Объект.Ключ);
	КонецЦикла;
	
	СоответствиеВладельцевМакетов = ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(ОбъектыМетаданных, Ложь);
	
	ВладельцыМакетов = Новый СписокЗначений();
	Для Каждого Источник Из СоответствиеВладельцевМакетов Цикл
		Если Не ЗначениеЗаполнено(Источник.Значение) Тогда
			Продолжить;
		КонецЕсли;
		ВладельцыМакетов.Добавить(Источник.Значение, Источник.Значение);
	КонецЦикла;
	
	ИдентификаторыОбъектовМетаданных = ВладельцыМакетов.ВыгрузитьЗначения();
	ЗначенияПустойСсылки = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ИдентификаторыОбъектовМетаданных, "ЗначениеПустойСсылки");
	
	ВладельцыМакетов.СортироватьПоПредставлению();
	
	ГруппыМакетов = Новый Соответствие();
	
	ГруппаПрочие = Ветка.ПолучитьЭлементы().Добавить();
	ГруппаПрочие.Представление = НСтр("ru = 'Прочие';
										|en = 'Other'");
	ГруппаПрочие.КартинкаГруппы = БиблиотекаКартинок.Перечисление;
	ГруппаПрочие.Идентификатор = "ОбщиеМакеты";
	ГруппаПрочие.КартинкаИспользования = -1;
	ГруппаПрочие.ЭтоГруппа = Истина;
	ГруппаПрочие.Используется = Истина;
	ГруппаПрочие.Владелец = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
	ГруппаПрочие.СтрокаПоиска = НРег(ГруппаПрочие.Представление);
	ГруппаПрочие.ДоступноСоздание = Ложь;
	ГруппыМакетов.Вставить(Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка(), ГруппаПрочие);
	
	ДоступноДобавлениеМакетов = ПравоДоступа("Добавление", Метаданные.Справочники.МакетыПечатныхФорм); 
	
	Для Каждого Владелец Из ВладельцыМакетов Цикл
		ГруппаМакетов = ГруппаПрочие.ПолучитьЭлементы().Добавить();
		ГруппаМакетов.Представление = Владелец.Представление;
		ГруппаМакетов.КартинкаГруппы = Новый Картинка;
		ГруппаМакетов.Идентификатор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец.Значение, "ПолноеИмя");
		ГруппаМакетов.КартинкаИспользования = -1;
		ГруппаМакетов.ЭтоГруппа = Истина;
		ГруппаМакетов.Используется = Истина;
		ГруппаМакетов.Владелец = Владелец.Значение;
		ГруппаМакетов.СтрокаПоиска = НРег(ГруппаМакетов.Представление);
		ГруппаМакетов.ДоступноСоздание = Ложь;
		ГруппаМакетов.ПолучитьЭлементы().Добавить();
		
		ГруппыМакетов.Вставить(Владелец.Значение, ГруппаМакетов);
	КонецЦикла;
	
	ВывестиМакеты(ГруппаПрочие);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКоллекцию(Знач Ветка, Знач КоллекцияОбъектовМетаданных)
	
	Для Каждого ОбъектМетаданных Из КоллекцияОбъектовМетаданных Цикл
		
		// +CRM Рефакторинг кода
		Если Не ДобавлениеНовойВеткиДоступно(Ветка, ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		// -CRM Рефакторинг кода
		
		НоваяВетка = Ветка.ПолучитьЭлементы().Добавить();
		НоваяВетка.Представление = ОбъектМетаданных.Представление();
		НоваяВетка.КартинкаГруппы = КартинкаВИнтерфейсе(ОбъектМетаданных);
		НоваяВетка.Идентификатор = ОбъектМетаданных.ПолноеИмя();
		НоваяВетка.КартинкаИспользования = -1;
		НоваяВетка.ЭтоГруппа = Истина;
		НоваяВетка.Используется = Истина;
		НоваяВетка.СтрокаПоиска = НРег(НоваяВетка.Представление);
		
		Если ЭтоПодсистема(ОбъектМетаданных) Тогда
			ВывестиКоллекцию(НоваяВетка, ОбъектМетаданных.Состав);
			ВывестиКоллекцию(НоваяВетка, ОбъектМетаданных.Подсистемы);
			НоваяВетка.ЭтоПодраздел = КоллекцияОбъектовМетаданных <> Метаданные.Подсистемы;
		Иначе
			НоваяВетка.Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(НоваяВетка.Идентификатор, Ложь);
			НоваяВетка.ДоступноСоздание = ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ОбъектМетаданных);
			НоваяВетка.ПолучитьЭлементы().Добавить();
		КонецЕсли;
		
		Если ЭтоПодсистема(ОбъектМетаданных) И НоваяВетка.ПолучитьЭлементы().Количество() = 0 Тогда
			Индекс = Ветка.ПолучитьЭлементы().Индекс(НоваяВетка);
			Ветка.ПолучитьЭлементы().Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КартинкаВИнтерфейсе(ОбъектМетаданных)
	
	СвойстваОбъекта = Новый Структура("Картинка");
	ЗаполнитьЗначенияСвойств(СвойстваОбъекта, ОбъектМетаданных);
	Если ЗначениеЗаполнено(СвойстваОбъекта.Картинка) Тогда
		Возврат СвойстваОбъекта.Картинка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоПодсистема(ОбъектМетаданных)
	Возврат СтрНачинаетсяС(ОбъектМетаданных.ПолноеИмя(), "Подсистема");
КонецФункции

&НаСервере
Функция ОбъектМетаданныхДоступен(ОбъектМетаданных)
	
	Если Не ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных)
		И Не ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных)
		И Не ОбщегоНазначения.ЭтоЖурналДокументов(ОбъектМетаданных)
		И Не ОбщегоНазначения.ЭтоПланВидовХарактеристик(ОбъектМетаданных)
		И Не ОбщегоНазначения.ЭтоПланВидовХарактеристик(ОбъектМетаданных)
		И Не ОбщегоНазначения.ЭтоПланСчетов(ОбъектМетаданных)
		И Не ОбщегоНазначения.ЭтоПланВидовРасчета(ОбъектМетаданных)
		И Не ОбщегоНазначения.ЭтоБизнесПроцесс(ОбъектМетаданных)
		И Не ОбщегоНазначения.ЭтоЗадача(ОбъектМетаданных)
		И Не Метаданные.Обработки.Содержит(ОбъектМетаданных)
		И Не Метаданные.Отчеты.Содержит(ОбъектМетаданных)
		И Не ЭтоПодсистема(ОбъектМетаданных) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДоступенПоПравам = ПравоДоступа("Просмотр", ОбъектМетаданных);
	ДоступенПоФункциональнымОпциям = ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных);
	
	СвойстваМетаданного = Новый Структура("ПолнотекстовыйПоиск, ВключатьВКомандныйИнтерфейс");
	ЗаполнитьЗначенияСвойств(СвойстваМетаданного, ОбъектМетаданных);
	
	Если СвойстваМетаданного.ПолнотекстовыйПоиск = Неопределено Тогда 
		ИспользованиеПолнотекстовогоПоиска = Истина;
	Иначе 
		ИспользованиеПолнотекстовогоПоиска = (СвойстваМетаданного.ПолнотекстовыйПоиск = 
		Метаданные.СвойстваОбъектов.ИспользованиеПолнотекстовогоПоиска.Использовать);
	КонецЕсли;
	
	Если СвойстваМетаданного.ВключатьВКомандныйИнтерфейс = Неопределено Тогда 
		ВключатьВКомандныйИнтерфейс = Истина;
	Иначе 
		ВключатьВКомандныйИнтерфейс = СвойстваМетаданного.ВключатьВКомандныйИнтерфейс;
	КонецЕсли;
	
	Возврат ДоступенПоПравам И ДоступенПоФункциональнымОпциям 
		И ИспользованиеПолнотекстовогоПоиска И ВключатьВКомандныйИнтерфейс;
	
КонецФункции

&НаСервере
Функция ПодчиненныеСправочники(ОбъектМетаданных)
	
	Если ПодчиненныеСправочники = Неопределено Тогда
		ПодчиненныеСправочники = Новый Соответствие;
		
		Для Каждого Справочник Из Метаданные.Справочники Цикл
			Если ПодчиненныеСправочники[Справочник] = Неопределено Тогда
				ПодчиненныеСправочники[Справочник] = Новый Массив;
			КонецЕсли;
			Для Каждого ВладелецСправочника Из Справочник.Владельцы Цикл
				Если ПодчиненныеСправочники[ВладелецСправочника] = Неопределено Тогда
					ПодчиненныеСправочники[ВладелецСправочника] = Новый Массив;
				КонецЕсли;
				СписокСправочников = ПодчиненныеСправочники[ВладелецСправочника]; // Массив
				СписокСправочников.Добавить(Справочник);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПодчиненныеСправочники[ОбъектМетаданных];
	
КонецФункции

&НаСервере
Процедура ВывестиМакеты(ОписаниеОбъекта)
	
	Если Не ЗначениеЗаполнено(ОписаниеОбъекта.Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	МакетыОбъекта = МакетыОбъекта(ОписаниеОбъекта.Идентификатор);
	Ветка = ОписаниеОбъекта;
	КоллекцияЭлементов = Ветка.ПолучитьЭлементы();
	
	Для Индекс = 0 По МакетыОбъекта.Количество() -1 Цикл
		ОписаниеМакета = МакетыОбъекта[Индекс];
		Макет = КоллекцияЭлементов.Вставить(Индекс);
		ЗаполнитьЗначенияСвойств(Макет, ОписаниеМакета);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция МакетыОбъекта(ИмяОбъектаМетаданных)
	
	НайденныйЭлемент = ОбъектыСКомандамиПечати.НайтиПоЗначению(ИмяОбъектаМетаданных);
	Если НайденныйЭлемент = Неопределено Тогда
		НайденныйЭлемент = ОбъектыСКомандамиПечати.Добавить(ИмяОбъектаМетаданных);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НайденныйЭлемент.Представление) Тогда
		МакетыОбъекта = ОбщегоНазначения.ЗначениеИзСтрокиXML(НайденныйЭлемент.Представление);
	Иначе
		// +CRM
		//МакетыОбъекта = РегистрыСведений.ПользовательскиеМакетыПечати.МакетыОбъекта(ИмяОбъектаМетаданных);
		МакетыОбъекта = CRM_УправлениеПечатью.МакетыОбъекта(ИмяОбъектаМетаданных);
		// -CRM
		НайденныйЭлемент.Представление = ОбщегоНазначения.ЗначениеВСтрокуXML(МакетыОбъекта);
	КонецЕсли;
	
	Возврат МакетыОбъекта;
	
КонецФункции

&НаСервере
Функция НайтиВеткиВладельцаМакетов(Владелец, ТекущаяВетка, НайденныеВетки = Неопределено)
	
	Если НайденныеВетки = Неопределено Тогда
		НайденныеВетки = Новый Массив;
	КонецЕсли;
	
	Для Каждого Ветка Из ТекущаяВетка.ПолучитьЭлементы() Цикл
		Если Ветка.ЭтоГруппа И Ветка.Владелец = Владелец Тогда
			НайденныеВетки.Добавить(Ветка);
		Иначе
			НайтиВеткиВладельцаМакетов(Владелец, Ветка, НайденныеВетки)
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныеВетки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НайтиМакеты(Знач Идентификатор, Знач Ветка, Результат = Неопределено)
	
	// +CRM
	//Результат = Новый Массив;
	Если Результат = Неопределено Тогда
		Результат = Новый Массив;
	КонецЕсли;
	// -CRM
	
	Для Каждого Элемент Из Ветка.ПолучитьЭлементы() Цикл
		// +CRM
		//Если Элемент.Идентификатор = Идентификатор Тогда
		Если Элемент.ИмяОбъектаМетаданныхМакета = Идентификатор Тогда
		// -CRM
			Результат.Добавить(Элемент);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, НайтиМакеты(Идентификатор, Элемент));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НайтиЭлементВДеревеМакетов(Знач Идентификатор, Знач Ветка = Неопределено)
	
	Если Ветка = Неопределено Тогда
		Ветка = Макеты;
	КонецЕсли;
	
	Для Каждого Элемент Из Ветка.ПолучитьЭлементы() Цикл
		Если Элемент.Идентификатор = Идентификатор Тогда
			НайденныйЭлемент = Элемент;
		Иначе
			НайденныйЭлемент = НайтиЭлементВДеревеМакетов(Идентификатор, Элемент);
		КонецЕсли;

		Если НайденныйЭлемент <> Неопределено Тогда
			Возврат НайденныйЭлемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПрименитьОтбор()
	
	Если ОтборУстановлен() Тогда
		ЗагрузитьСписокМакетов();
	КонецЕсли;
	
	ОтметитьЭлементыСоответствующиеОтбору();
	
	Если Не ОтборУстановлен() Тогда
		Возврат;
	КонецЕсли;
	
	РазвернутьЭлементыСоответствующиеОтбору();

	Если Элементы.Макеты.ТекущиеДанные <> Неопределено Тогда
		Если СоответствуетОтбору(Элементы.Макеты.ТекущиеДанные) Тогда
			// Переход к текущей строке, если она не видна после изменения состава видимых строк.
			ТекущаяСтрока = Элементы.Макеты.ТекущаяСтрока;
			Элементы.Макеты.ТекущаяСтрока = 0;
			Элементы.Макеты.ТекущаяСтрока = ТекущаяСтрока;
		Иначе
			ПерейтиКПервомуНайденномуМакету();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьКнопокКоманднойПанели();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьЭлементыСоответствующиеОтбору(Ветка = Неопределено)
	
	Если Не ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	Если Ветка = Неопределено Тогда
		Ветка = Макеты;
	КонецЕсли;
	
	Для Каждого Элемент Из Ветка.ПолучитьЭлементы() Цикл
		КоллекцияПодчиненныхЭлементов = Элемент.ПолучитьЭлементы();
		Если Элемент.ЕстьЭлементыСоответствующиеОтбору И КоллекцияПодчиненныхЭлементов.Количество() > 0 
			И ЗначениеЗаполнено(КоллекцияПодчиненныхЭлементов[0].Идентификатор) Тогда
			Элементы.Макеты.Развернуть(Элемент.ПолучитьИдентификатор(), Ложь);
			РазвернутьЭлементыСоответствующиеОтбору(Элемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
	
&НаКлиенте
Функция ОтметитьЭлементыСоответствующиеОтбору(Знач Ветка = Неопределено)

	Если Ветка = Неопределено Тогда
		Ветка = Макеты;
	КонецЕсли;
	
	ЕстьЭлементыСоответствующиеОтбору = Не ОтборУстановлен();
	
	Для Каждого Элемент Из Ветка.ПолучитьЭлементы() Цикл
		Элемент.СоответствуетОтбору = СоответствуетОтбору(Элемент);
		Элемент.ЕстьЭлементыСоответствующиеОтбору = ОтметитьЭлементыСоответствующиеОтбору(Элемент);
		
		ЕстьЭлементыСоответствующиеОтбору = ЕстьЭлементыСоответствующиеОтбору 
			Или Элемент.СоответствуетОтбору Или Элемент.ЕстьЭлементыСоответствующиеОтбору;
	КонецЦикла;
	
	Возврат ЕстьЭлементыСоответствующиеОтбору;
	
КонецФункции

&НаКлиенте
Функция СоответствуетОтбору(Элемент)
	
	СтрокаСоответствуетШаблону = Не ЗначениеЗаполнено(СтрокаПоиска);
	
	Если СтрНайти(СтрокаПоиска, "*") Тогда
		ШаблонПоиска = НРег(СокрЛП(СтрокаПоиска));
	Иначе
		ШаблонПоиска = СтрЗаменить(НРег(СокрЛП(СтрокаПоиска)), " ", "*");
	КонецЕсли;
	
	СтрокаСоответствуетШаблону = СтрокаСоответствуетШаблону Или СтрокаСоответствуетШаблону(Элемент.СтрокаПоиска, ШаблонПоиска);
	
	Возврат СтрокаСоответствуетШаблону
		И (Не Элемент.ЭтоГруппа И ПоказыватьИзмененные И Элемент.Изменен 
			И (ПоказыватьИспользуемые И Элемент.Используется Или ПоказыватьНеиспользуемые И Не Элемент.Используется)
			Или ПоказыватьНеизмененные И Не Элемент.Изменен)
		И (Не ЗначениеЗаполнено(ОтборПоЯзыку) Или СтрНайти(Элемент.ДоступныеЯзыки, ОтборПоЯзыку));
	
КонецФункции

&НаКлиенте
Функция ОтборУстановлен()
	
	Возврат ЗначениеЗаполнено(СтрокаПоиска) 
		Или ОтборПоИспользованиюМакета <> "ВсеМакеты"
		Или ЗначениеЗаполнено(ОтборПоЯзыку);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОбъектыСКомандамиПечати()
	
	Для Каждого ОбъектМетаданных Из УправлениеПечатью.ИсточникиКомандПечати() Цикл
		ОбъектыСКомандамиПечати.Добавить(ОбъектМетаданных.ПолноеИмя());
	КонецЦикла;
	
	ОбъектыСМакетами = Новый Соответствие;
	Для Каждого ОписаниеМакета Из УправлениеПечатью.МакетыПечатныхФорм(Истина) Цикл
		ОбъектыСМакетами.Вставить(ОписаниеМакета.Значение, Истина);
	КонецЦикла;
	
	ОбъектыМетаданных = Новый Массив;
	Для Каждого Объект Из ОбъектыСМакетами Цикл
		Если Объект.Ключ <> Метаданные.ОбщиеМакеты Тогда
			ОбъектыСКомандамиПечати.Добавить(Объект.Ключ.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПерейтиКПервомуНайденномуМакету(Знач Ветка = Неопределено)
	
	Если Ветка = Неопределено Тогда
		Ветка = Макеты;
	КонецЕсли;
	
	Для Каждого Элемент Из Ветка.ПолучитьЭлементы() Цикл
		Если Элемент.СоответствуетОтбору Тогда
			Элементы.Макеты.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
			Возврат Истина;
		КонецЕсли;
		Если ПерейтиКПервомуНайденномуМакету(Элемент) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ПерейтиКЭлементу(Знач ПутьКЭлементу, Знач Ветка = Неопределено)
	
	Если Ветка = Неопределено Тогда
		Ветка = Макеты;
	КонецЕсли;
	
	ЧастиПути = СтрРазделить(ПутьКЭлементу, "/", Ложь);
	Если ЧастиПути.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторТекущейВетки = ЧастиПути[0];
	Для Каждого Элемент Из Ветка.ПолучитьЭлементы() Цикл
		Если Элемент.Идентификатор = ИдентификаторТекущейВетки Тогда
			Если ЧастиПути.Количество() = 1 Тогда
				Элементы.Макеты.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
				Возврат;
			КонецЕсли;
			
			ЗагрузитьПодчиненныеЭлементы(Элемент.ПолучитьИдентификатор());
			
			ЧастиПути.Удалить(0);
			ПутьКЭлементу = СтрСоединить(ЧастиПути, "/");
			ПерейтиКЭлементу(ПутьКЭлементу, Элемент);
			Возврат;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПутьКЭлементуВДереве(Элемент)
	
	Если Элемент = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ПутьКЭлементуВДереве(Элемент.ПолучитьРодителя()) + "/" + Элемент.Идентификатор;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьКэш(ИмяОбъектаМетаданных, ОбъектыСКомандамиПечати)
	
	НайденныйЭлемент = ОбъектыСКомандамиПечати.НайтиПоЗначению(ИмяОбъектаМетаданных);
	Если НайденныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НайденныйЭлемент.Представление = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСписокМакетов()
	
	Если ВыполняетсяЗагрузкаДанных Или Не ЕстьОбъектыБезКэша() Тогда
		Возврат;
	КонецЕсли;
	
	ВыполняетсяЗагрузкаДанных = Истина;
	Элементы.ВыполняетсяПоиск.Видимость = Истина;
	
	ДлительнаяОперация = НачатьВыполнениеНаСервере();
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультат", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция НачатьВыполнениеНаСервере()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	// +CRM
	//Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, 
	//	"РегистрыСведений.ПользовательскиеМакетыПечати.МакетыОбъектов", ОбъектыБезКэша());
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"CRM_УправлениеПечатью.МакетыОбъектов", ОбъектыБезКэша());
	// -CRM
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультат(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполняетсяЗагрузкаДанных = Ложь;
	Элементы.ВыполняетсяПоиск.Видимость = Ложь;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		СтандартныеПодсистемыКлиент.ВывестиИнформациюОбОшибке(
			Результат.ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;
	
	ОбработатьРезультатНаСервере(Результат.АдресРезультата);
	ОбновитьВидимостьМакетов();
	
КонецПроцедуры 

&НаСервере
Процедура ОбработатьРезультатНаСервере(АдресРезультата)
	
	МакетыОбъектов = ПолучитьИзВременногоХранилища(АдресРезультата); // См. РегистрыСведений.ПользовательскиеМакетыПечати.МакетыОбъектов
	ЗаписатьКэшМакетов(МакетыОбъектов);
	
	ЗагрузитьВетку(Макеты);
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьОбъектыБезКэша()
	
	Для Каждого Элемент Из ОбъектыСКомандамиПечати Цикл
		Если Не ЗначениеЗаполнено(Элемент.Представление) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ОбъектыБезКэша()
	
	Результат = Новый Массив;
	Для Каждого Элемент Из ОбъектыСКомандамиПечати Цикл
		Если Не ЗначениеЗаполнено(Элемент.Представление) Тогда
			Если Элемент.Значение = "ОбщиеМакеты" Тогда
				Результат.Добавить(Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка());
			Иначе
				Результат.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Элемент.Значение));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаписатьКэшМакетов(МакетыОбъектов)
	
	ИдентификаторыОбъектовМетаданных = ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(ОбъектыСКомандамиПечати.ВыгрузитьЗначения(), Ложь);

	Для Каждого Элемент Из ОбъектыСКомандамиПечати Цикл
		Если ЗначениеЗаполнено(Элемент.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Элемент.Значение = "ОбщиеМакеты" Тогда
			Владелец = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
		Иначе
			Владелец = ИдентификаторыОбъектовМетаданных[Элемент.Значение];
		КонецЕсли;
		
		НайденныеМакеты = МакетыОбъектов.НайтиСтроки(Новый Структура("Владелец", Владелец));
		МакетыОбъекта = МакетыОбъектов.Скопировать(НайденныеМакеты);
		Элемент.Представление = ОбщегоНазначения.ЗначениеВСтрокуXML(МакетыОбъекта);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВетку(Ветка)
	
	Для Каждого Элемент Из Ветка.ПолучитьЭлементы() Цикл
		ЗагрузитьПодчиненныеЭлементы(Элемент.ПолучитьИдентификатор());
		ЗагрузитьВетку(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаСоответствуетШаблону(Знач Строка, Знач Шаблон)
	
	Строка = СтрСоединить(СтрРазделить(Строка, " " + Символы.ПС + Символы.ВК + Символы.Таб, Ложь), " ");
	СтрокаСоответствуетШаблону = Истина;
	
	Для Каждого ЧастиШаблона Из СтрРазделить(Шаблон, "*", Ложь) Цикл
		ФрагментДляПоиска = СтрСоединить(СтрРазделить(ЧастиШаблона, " " + Символы.ПС + Символы.ВК + Символы.Таб, Ложь), " ");
		
		Позиция = СтрНайти(Строка, ФрагментДляПоиска);
		Если Позиция = 0 Тогда
			СтрокаСоответствуетШаблону = Ложь;
			Прервать;
		КонецЕсли;
		
		Строка = Сред(Строка, Позиция + СтрДлина(ФрагментДляПоиска));
	КонецЦикла;
	
	Возврат СтрокаСоответствуетШаблону;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИдентификаторВладельцаМакета(ПутьКМакету)
	
	ИсточникиДанныхМакета = УправлениеПечатью.ИсточникиДанныхМакета(ПутьКМакету);
	
	Если Не ЗначениеЗаполнено(ИсточникиДанныхМакета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектыМетаданных = ОбщегоНазначения.ОбъектыМетаданныхПоИдентификаторам(ИсточникиДанныхМакета, Ложь);
	
	Для Каждого ИсточникДанных Из ИсточникиДанныхМакета Цикл
		Если ОбъектыМетаданных[ИсточникДанных] <> Неопределено Тогда
			Если ИсточникДанных = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка() Тогда
				Возврат "ОбщиеМакеты";
			ИначеЕсли ОбъектыМетаданных[ИсточникДанных] <> Null Тогда
				Возврат ОбъектыМетаданных[ИсточникДанных].ПолноеИмя();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПозицияМакетаВДереве(Знач ПутьКМакету)
	
	Результат = "";
	
	ИдентификаторВладельцаМакета = ИдентификаторВладельцаМакета(ПутьКМакету);
	ВладелецМакета = НайтиЭлементВДеревеМакетов(ИдентификаторВладельцаМакета);
	
	Если ВладелецМакета <> Неопределено Тогда
		Результат = ПутьКЭлементуВДереве(ВладелецМакета) + "/" + ПутьКМакету;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// +CRM

&НаСервере
Функция ДобавлениеНовойВеткиДоступно(Знач Ветка, Знач ОбъектМетаданных)
	
	Результат = Истина;
	
	Если ТипЗнч(Ветка) = Тип("ДанныеФормыЭлементДерева") И ОбъектМетаданных.ПолноеИмя() = Ветка.Идентификатор Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Если Не ЭтоПодсистема(ОбъектМетаданных) И Не ОбщегоНазначения.ЭтоЖурналДокументов(ОбъектМетаданных)
		И ОбъектыСКомандамиПечати.НайтиПоЗначению(ОбъектМетаданных.ПолноеИмя()) = Неопределено Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Если Не ОбъектМетаданныхДоступен(ОбъектМетаданных) Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
// Функция возвращает массив макетов печатных форм.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив	- Массив макетов печатных форм.
//
Функция CRM_ПолучитьМассивМакетовПечатныхФорм()
	МассивМакетовПечатныхФорм = Новый Массив;
	Для Каждого ГруппаМакетов Из Макеты.ПолучитьЭлементы() Цикл
		Для Каждого МакетПечатнойФормы Из ГруппаМакетов.ПолучитьЭлементы() Цикл
			МассивМакетовПечатныхФорм.Добавить(МакетПечатнойФормы.ИмяОбъектаМетаданныхМакета);
		КонецЦикла;
	КонецЦикла;
	Возврат МассивМакетовПечатныхФорм;
КонецФункции // ПолучитьМассивМакетовПечатныхФорм()

&НаКлиенте
// Процедура - обработчик команды формы "CRM_Добавить".
//
Процедура CRM_Добавить(Команда)
	
	ТекущиеДанные = Элементы.Макеты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВладельца = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Владелец, "Имя");
	Если (ИмяВладельца = "CRM_СчетНаОплатуПокупателю"
		 Или ИмяВладельца = "КоммерческоеПредложениеКлиенту"
		 Или ИмяВладельца = "CRM_Интерес") Тогда
		СписокМакетов = Новый СписокЗначений;
		СписокМакетов.ЗагрузитьЗначения(CRM_ПолучитьМассивМакетовПечатныхФорм());
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокМакетов", СписокМакетов);
		ПараметрыФормы.Вставить("Владелец", ТекущиеДанные.Владелец);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("CRM_ДобавитьЗавершение", ЭтотОбъект);
		ОткрытьФорму("РегистрСведений.ПользовательскиеМакетыПечати.Форма.CRM_ФормаЗаписи", ПараметрыФормы,
			 ЭтотОбъект, , , , ОписаниеОповещения,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		СписокВариантов = Новый СписокЗначений;
		СписокВариантов.Добавить("МакетыДобавитьМакет", НСтр("ru = 'Создать макет табличного документа';
		                                                     |en = 'Create spreadsheet document template'"));
		СписокВариантов.Добавить("МакетыДобавитьМакетOfficeOpenXML", НСтр("ru = 'Создать макет Office Open XML';
		                                                                  |en = 'Create Office Open XML template'"));
		
		ОповещениеПродолжения = Новый ОписаниеОповещения("CRM_ДобавитьПродолжение", ЭтотОбъект);
		СписокВариантов.ПоказатьВыборЭлемента(ОповещениеПродолжения);
	КонецЕсли;
КонецПроцедуры // CRM_Добавить()

&НаКлиенте
Процедура CRM_ДобавитьПродолжение(ВыбранноеЗначение, ДополнительныеПараметры)Экспорт
	
	Перем ПараметрыОповещения;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	ИначеЕсли ВыбранноеЗначение.Значение = "МакетыДобавитьМакет" Тогда
		ПараметрыОповещения = Новый Структура("Копирование, ТипМакета", Ложь, "MXL");
	ИначеЕсли ВыбранноеЗначение.Значение = "МакетыДобавитьМакетOfficeOpenXML" Тогда
		ПараметрыОповещения = Новый Структура("Копирование, ТипМакета", Ложь, "DOCX");
	КонецЕсли;
	
	Если ПараметрыОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриВыбореИмениМакета", ЭтотОбъект, ПараметрыОповещения);
	УникальноеНаименование = ПолучитьУникальноеНаименование(НСтр("ru = 'Новая печатная форма';
																|en = 'New print form'"), Ложь);
	ПоказатьВводСтроки(ОписаниеОповещения, УникальноеНаименование, НСтр("ru = 'Введите наименование макета';
																		|en = 'Enter a template description'"), 100, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ДобавитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ (Результат = Неопределено) Тогда
		Копирование = Ложь;
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("Копирование") Тогда
			Копирование = ДополнительныеПараметры.Копирование;
		КонецЕсли;
		Если Результат.ТипМакета = "MXL" Тогда
			// Открыть форму создания табличного документа
			ПараметрыОповещения = Новый Структура("Копирование, ТипМакета", Копирование, Результат.ТипМакета);
			ПриВыбореИмениМакета(Результат, ПараметрыОповещения);
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗаписиМакета", ЭтотОбъект, Результат);
			НачатьСозданиеДвоичныхДанныхИзФайла(ОписаниеОповещения, Результат.ПутьКФайлуМакета);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // CRM_ДобавитьЗавершение()

&НаКлиенте
Процедура ПослеЗаписиМакета(ФайлМакета, Результат) Экспорт
	АдресМакетаВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлМакета);
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИмяОбъектаМетаданныхМакета", Результат.ИмяОбъектаМетаданныхМакета);
	ПараметрыЗаписи.Вставить("АдресМакетаВоВременномХранилище", АдресМакетаВоВременномХранилище);
	ПараметрыЗаписи.Вставить("ТипМакета", Результат.ТипМакета);
	ПараметрыЗаписи.Вставить("Владелец", Результат.Владелец);
	ПараметрыЗаписи.Вставить("ИсточникиДанных", Результат.ИсточникиДанных);
	ПараметрыЗаписи.Вставить("Представление", Результат.Представление);
	ПараметрыЗаписи.Вставить("Используется", Результат.CRM_МакетИспользуется);
	ПараметрыЗаписи.Вставить("CRM_ПоставляемыйМакет", Результат.CRM_ПоставляемыйМакет);
	ПараметрыЗаписи.Вставить("CRM_ИмяМакета", Результат.CRM_ИмяМакета);
	
	ИдентификаторМакета = CRM_МетодыФормРегистровСведенийСервер.ЗаписатьМакет(ПараметрыЗаписи);
	Результат.ИмяОбъектаМетаданныхМакета = ИдентификаторМакета;
	
	CRM_МетодыФормРегистровСведенийСервер.ДобавитьЗаписьНазначениеДополнительныхОбработок(Результат.ВладелецМакета);
	Элементы.Макеты.ТекущаяСтрока = ОбновитьОтображениеМакета(Результат);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТипМакета", Результат.ТипМакета);
	ПараметрыОткрытия.Вставить("Идентификатор", ИдентификаторМакета);
	ПараметрыОткрытия.Вставить("ИмяОбъектаМетаданныхМакета", Результат.ИмяОбъектаМетаданныхМакета);
	
	Если Результат.ТипМакета = "HTML" ИЛИ Результат.ТипМакета = "HTM" Тогда
		ПараметрыОткрытия.Вставить("ИмяДокумента", Результат.Представление);
		ПараметрыОткрытия.Вставить("ИсточникДанных", Результат.Владелец);
		ПараметрыОткрытия.Вставить("Редактирование", Истина);
		ПараметрыОткрытия.Вставить("CRM_ИмяМакета", Результат.CRM_ИмяМакета);
		ОткрытьФорму("Обработка.CRM_РаботаСHTML.Форма.РедакторМакетаHTML", ПараметрыОткрытия, ЭтотОбъект,
			 Результат.ИмяОбъектаМетаданныхМакета);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОткрытьСвойства(Команда)
	
	ТекущиеДанные = Элементы.Макеты.ТекущиеДанные;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИмяОбъектаМетаданныхМакета", ТекущиеДанные.ИмяОбъектаМетаданныхМакета);
	ПараметрыОткрытия.Вставить("ТипМакета", ТекущиеДанные.ТипМакета);
	ПараметрыОткрытия.Вставить("МакетСсылка", ТекущиеДанные.Ссылка);
	
	Оповещение = Новый ОписаниеОповещения("Обработчик_ЗакрытиеФормыРедактированияЗаписи", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.ПользовательскиеМакетыПечати.Форма.CRM_ФормаРедактированияЗаписи",
		ПараметрыОткрытия, ЭтотОбъект, , , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Обработчик_ЗакрытиеФормыРедактированияЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Макеты.ТекущаяСтрока = ОбновитьОтображениеМакета(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуМакетаПродолжение(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучениеКаталогаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПолучениеКаталогаВременныхФайлов(ОписаниеОповещения);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПутьКФайлуМакетаПродолжение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьУстановкуРасширенияРаботыСФайлами(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеКаталогаЗавершение(Путь, ДопПараметры) Экспорт
	Каталог = Путь;
	//ФайлМакета = ДопПараметры.ФайлМакета;
	#Если ВебКлиент Тогда
		УИН = Новый УникальныйИдентификатор;
	#Иначе
		Если НЕ ЗначениеЗаполнено(УИН) Тогда
			УИН = Новый УникальныйИдентификатор;
		КонецЕсли;
	#КонецЕсли
	ИмяФайла = Строка(УИН) + "." + ДопПараметры.ТипМакета;
	ПутьКФайлуМакета = Каталог + "\" + ИмяФайла;
	ДопПараметры.Вставить("ПутьКФайлуМакета", ПутьКФайлуМакета);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеКопированияМакетаСохранение", ЭтотОбъект, ДопПараметры);
	ФайловыеПотоки.НачатьОткрытиеДляЗаписи(ОписаниеОповещения, ПутьКФайлуМакета);
	
	//ФайлМакета.Записать(ПутьКФайлуМакета);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеКопированияМакетаСохранение(Поток, ДопПараметры) Экспорт
	ДДМакета = ДопПараметры.ФайлМакета;
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	#Если ВебКлиент Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОкончанияМакетаКопированиеВЕБ", ЭтотОбъект, ДопПараметры);
	#Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОкончанияМакетаКопирование", ЭтотОбъект, ДопПараметры);
	#КонецЕсли
	ЗаписьДанных.НачатьЗапись(ОписаниеОповещения, ДДМакета);
КонецПроцедуры

&НаКлиенте
Процедура ПослеОкончанияМакетаКопирование(ДопПараметры) Экспорт
	
	ЧастиПути = СтрРазделить(ДопПараметры.CRM_ИмяМакета, ".", Истина);
	ИмяМакета = ЧастиПути[ЧастиПути.ВГраница()];
	ЧастиПути.Удалить(ЧастиПути.ВГраница());
	ВладелецМакета = СтрСоединить(ЧастиПути, ".");
	
	СписокМакетов = Новый СписокЗначений;
	СписокМакетов.ЗагрузитьЗначения(CRM_ПолучитьМассивМакетовПечатныхФорм());
	ИндексМакета = СписокМакетов.Количество() + 1;
	
	ИмяОбъектаМетаданныхМакета = ВладелецМакета + "." + "ПФ_" + ДопПараметры.ТипМакета + "_Макет" + Строка(ИндексМакета);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокМакетов", СписокМакетов);
	ПараметрыФормы.Вставить("Владелец", ДопПараметры.Владелец);
	ПараметрыФормы.Вставить("ИмяОбъектаМетаданныхМакета", ИмяОбъектаМетаданныхМакета);
	ПараметрыФормы.Вставить("Представление", ДопПараметры.Представление + НСтр("ru=' (копия)'"));
	ПараметрыФормы.Вставить("ТипМакета", ДопПараметры.ТипМакета);
	ПараметрыФормы.Вставить("ПутьКФайлуМакета", ДопПараметры.ПутьКФайлуМакета);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Копирование", Истина);
	ОписаниеОповещения = Новый ОписаниеОповещения("CRM_ДобавитьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("РегистрСведений.ПользовательскиеМакетыПечати.Форма.CRM_ФормаЗаписи", ПараметрыФормы,
		 ЭтотОбъект, , , , ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПослеОкончанияМакетаКопированиеВЕБ(Результат, ДопПараметры) Экспорт
	ПутьКМакету = ДопПараметры.ИмяОбъектаМетаданныхМакета;
	ЧастиПути = СтрРазделить(ПутьКМакету, ".", Истина);
	
	ИмяМакета = ЧастиПути[ЧастиПути.ВГраница()];
	ЧастиПути.Удалить(ЧастиПути.ВГраница());
	ВладелецМакета = СтрСоединить(ЧастиПути, ".");
	
	СписокМакетов = Новый СписокЗначений;
	СписокМакетов.ЗагрузитьЗначения(CRM_ПолучитьМассивМакетовПечатныхФорм());
	ИндексМакета = СписокМакетов.Количество() + 1;
	
	ИмяОбъектаМетаданныхМакета = ВладелецМакета + "." + "ПФ_" + ДопПараметры.ТипМакета + "_Макет" + Строка(ИндексМакета);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокМакетов", СписокМакетов);
	ПараметрыФормы.Вставить("Владелец", ДопПараметры.Владелец);
	ПараметрыФормы.Вставить("ПредставлениеВладельца", ДопПараметры.ПредставлениеВладельца);
	ПараметрыФормы.Вставить("ИмяОбъектаМетаданныхМакета", ИмяОбъектаМетаданныхМакета);
	ПараметрыФормы.Вставить("ПредставлениеМакета", ДопПараметры.ПредставлениеМакета + НСтр("ru='(копия)'"));
	ПараметрыФормы.Вставить("ТипМакета", ДопПараметры.ТипМакета);
	ПараметрыФормы.Вставить("ПутьКФайлуМакета", ДопПараметры.ПутьКФайлуМакета);
	ОписаниеОповещения = Новый ОписаниеОповещения("CRM_ДобавитьЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.ПользовательскиеМакетыПечати.Форма.CRM_ФормаЗаписи", ПараметрыФормы,
		 ЭтотОбъект, , , , ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеМакета(ТекущиеДанные)
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
		Макет = МодульУправлениеПечатью.МакетПечатнойФормы(ТекущиеДанные.Идентификатор);
		Если ТипЗнч(Макет) = Тип("ДвоичныеДанные") Тогда
			Если ТекущиеДанные.ТипМакета = "MXL" Тогда
				ИмяФайлаМакета = ПолучитьИмяВременногоФайла("mxl");
			ИначеЕсли ТекущиеДанные.ТипМакета = "HTM" Или ТекущиеДанные.ТипМакета = "HTML" Тогда
				ИмяФайлаМакета = ПолучитьИмяВременногоФайла("html");
			ИначеЕсли ТекущиеДанные.ТипМакета = "DOC" Тогда
				ИмяФайлаМакета = ПолучитьИмяВременногоФайла("doc");
			ИначеЕсли ТекущиеДанные.ТипМакета = "ODT" Тогда
				ИмяФайлаМакета = ПолучитьИмяВременногоФайла("odt");
			КонецЕсли;
			Макет.Записать(ИмяФайлаМакета);
		ИначеЕсли ТипЗнч(Макет) = Тип("ТабличныйДокумент") Тогда
			ИмяФайлаМакета = ПолучитьИмяВременногоФайла("mxl");
			Макет.Записать(ИмяФайлаМакета);
		ИначеЕсли ТипЗнч(Макет) = Тип("ТекстовыйДокумент") Тогда
			ИмяФайлаМакета = ПолучитьИмяВременногоФайла("html");
			Макет.Записать(ИмяФайлаМакета);
		КонецЕсли;
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ФайлМакета", Новый ДвоичныеДанные(ИмяФайлаМакета));
		СтруктураВозврата.Вставить("ТипМакета", ТекущиеДанные.ТипМакета);
		СтруктураВозврата.Вставить("CRM_ИмяМакета", ТекущиеДанные.CRM_ИмяМакета);
		СтруктураВозврата.Вставить("Владелец", ТекущиеДанные.Владелец);
		СтруктураВозврата.Вставить("Представление", ТекущиеДанные.Представление);
		Возврат СтруктураВозврата;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция СохранитьНаСервере(ПараметрыОткрытия)
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
		Макет = МодульУправлениеПечатью.МакетПечатнойФормы(ПараметрыОткрытия.ИмяОбъектаМетаданныхМакета);
		ИмяФайлаМакета = ПолучитьИмяВременногоФайла(ПараметрыОткрытия.ТипМакета);
		Макет.Записать(ИмяФайлаМакета);
		ДДМакета = Новый ДвоичныеДанные(ИмяФайлаМакета);
		АдресМакета = ПоместитьВоВременноеХранилище(ДДМакета);
		Возврат ДДМакета;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура Сохранить(Команда)
	ТекущиеДанные = Элементы.Макеты.ТекущиеДанные;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИмяОбъектаМетаданныхМакета", ТекущиеДанные.ИмяОбъектаМетаданныхМакета);
	ПараметрыОткрытия.Вставить("ТипМакета", ТекущиеДанные.ТипМакета);
	ДДМакета = СохранитьНаСервере(ПараметрыОткрытия);
	ПодключитьРасширение(Новый Структура("ТипМакета, ПредставлениеМакета, ДДМакета, ВызванаУстановкаРасширения"
	, ТекущиеДанные.ТипМакета, ТекущиеДанные.Представление, ДДМакета, Ложь));
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьРасширение(ДополнительныеПараметры) Экспорт
	ОписаниеОповещения = Новый ОписаниеОповещения("ПутьКФайлуМакетаНачалоВыбораПродолжение",
		 ЭтотОбъект,
		 ДополнительныеПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуМакетаНачалоВыбораПродолжение(Подключено, ДополнительныеПараметры) Экспорт
	Если Подключено Тогда
		ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ДополнительныеПараметры.ПредставлениеМакета 
			+ "." + ДополнительныеПараметры.ТипМакета,
			 "");
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогОткрытияФайла.ПолноеИмяФайла = ПолноеИмяФайла;
		ДиалогОткрытияФайла.Фильтр             = "Файл макета (*." + ДополнительныеПараметры.ТипМакета 
			+ ")|*." 
			+ ДополнительныеПараметры.ТипМакета;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru='Выберите путь к файлу макета';en='Select path to file of template'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПутьКФайлуМакетаНачалоВыбораЗавершение",
			 ЭтотОбъект,
			 ДополнительныеПараметры);
		ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	Иначе
		Если ДополнительныеПараметры.ВызванаУстановкаРасширения Тогда 
			// Был отказ от установки расширения. При вызове установки расширения в веб-клиенте пользователь может просто закрыть окно его установки
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сохранение макета невозможно. Расширение для работы с файлами не установлено");
			Возврат;
		КонецЕсли; 
		ДополнительныеПараметры.ВызванаУстановкаРасширения = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьРасширение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьУстановкуРасширенияРаботыСФайлами(ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры // ПутьКФайлуМакетаНачалоВыбора()

&НаКлиенте
Процедура ПутьКФайлуМакетаНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		ПутьКФайлуМакета	= ВыбранныеФайлы[0];
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗаписиМакетаСохранение", ЭтотОбъект, ДополнительныеПараметры);
		ФайловыеПотоки.НачатьОткрытиеДляЗаписи(ОписаниеОповещения, ПутьКФайлуМакета); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиМакетаСохранение(Поток, ДопПараметры) Экспорт
	#Если ВебКлиент Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияБезДействияТолькоДополнительныеПараметрыВебКлиент",
			 CRM_ОбщегоНазначенияКлиент);	
	#Иначе       
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияБезДействияТолькоДополнительныеПараметры",
			 CRM_ОбщегоНазначенияКлиент);
	#КонецЕсли
	ДДМакета = ДопПараметры.ДДМакета;
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	ЗаписьДанных.НачатьЗапись(ОписаниеОповещения, ДДМакета);
КонецПроцедуры

// -CRM

#КонецОбласти
