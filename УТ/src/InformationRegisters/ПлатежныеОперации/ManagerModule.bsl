#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// СтандартныеПодсистемы.УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Менеджер = "РегистрСведений.ПлатежныеОперации";
	МенеджерОборудованияВызовСервераПереопределяемый.ПриЗаполненииОграниченияДоступа(Менеджер, Ограничение);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецЕсли

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОчиститьРегистрЗаПрошлыеМесяцы(ДатаОчистки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПлатежныеОперации.ГодМесяц КАК ГодМесяц
		|ИЗ
		|	РегистрСведений.ПлатежныеОперации КАК ПлатежныеОперации
		|ГДЕ
		|	ПлатежныеОперации.ГодМесяц < &ГодМесяцОчистки";
	
	ГодМесяцОчистки = Год(ДатаОчистки) * 100 + Месяц(ДатаОчистки);
	Запрос.УстановитьПараметр("ГодМесяцОчистки", ГодМесяцОчистки);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПлатежныеОперации");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ГодМесяц","ГодМесяц");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ПлатежныеОперации.СоздатьНаборЗаписей();
		Выборка      = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Очистить();
			НаборЗаписей.Отбор.ГодМесяц.Установить(Выборка.ГодМесяц);
			НаборЗаписей.Записать(Истина);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияБПО.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Очистка платежных операций'", ОбщегоНазначенияБПО.КодОсновногоЯзыка()));
	КонецПопытки
	
КонецПроцедуры

Процедура ОчиститьРегистрЗаТекущийМесяц(ДатаОчистки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлатежныеОперации.ИдентификаторЗапроса КАК ИдентификаторЗапроса,
		|	ПлатежныеОперации.ДокументОснование КАК ДокументОснование,
		|	ПлатежныеОперации.ИдентификаторОперации КАК ИдентификаторОперации,
		|	ПлатежныеОперации.ИдентификаторФискальнойОперации КАК ИдентификаторФискальнойОперации,
		|	ПлатежныеОперации.ГодМесяц КАК ГодМесяц
		|ИЗ
		|	РегистрСведений.ПлатежныеОперации КАК ПлатежныеОперации
		|ГДЕ
		|	ПлатежныеОперации.ГодМесяц = &ГодМесяцОчистки
		|	И ПлатежныеОперации.ДатаЗапроса < &ДатаОчистки";
	
	ГодМесяцОчистки = Год(ДатаОчистки) * 100 + Месяц(ДатаОчистки);
	Запрос.УстановитьПараметр("ГодМесяцОчистки", ГодМесяцОчистки);
	Запрос.УстановитьПараметр("ДатаОчистки",     ДатаОчистки);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПлатежныеОперации");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИдентификаторЗапроса","ИдентификаторЗапроса");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ПлатежныеОперации.СоздатьНаборЗаписей();
		Выборка      = РезультатЗапроса.Выбрать();
		Если ОбщегоНазначенияБПОПовтИсп.РежимЗамещенияДоступен() Тогда
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			НаборЗаписей.Записать(ОбщегоНазначенияБПОПовтИсп.РежимЗамещенияУдаление());
		Иначе
			Пока Выборка.Следующий() Цикл
				НаборЗаписей.Очистить();
				НаборЗаписей.Отбор.ИдентификаторЗапроса.Установить(Выборка.ИдентификаторЗапроса);
				НаборЗаписей.Записать(Истина);
			КонецЦикла;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияБПО.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Очистка платежных операций'", ОбщегоНазначенияБПО.КодОсновногоЯзыка()));
	КонецПопытки
	
КонецПроцедуры

Процедура УстановитьРеквизитПлатежнойОперации(ИдентификаторЗапроса, Имя, Значение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторЗапросаСтрока = Строка(ИдентификаторЗапроса);
	
	Если ЗначениеЗаполнено(ИдентификаторЗапросаСтрока) Тогда
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПлатежныеОперации");
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторЗапроса", ИдентификаторЗапросаСтрока);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ПлатежныеОперации.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИдентификаторЗапроса.Установить(ИдентификаторЗапросаСтрока);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество()>0 Тогда
				Запись = НаборЗаписей[0];
				Запись[Имя] = Значение;
				НаборЗаписей.Записать(Истина);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Ошибка записи в журнал логирования платежных операций: %1'", ОбщегоНазначенияБПО.КодОсновногоЯзыка()), 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияБПО.ЗаписатьОшибкуВЖурналРегистрации(
				НСтр("ru = 'Платежные операции'",  ОбщегоНазначенияБПО.КодОсновногоЯзыка()),
					ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли