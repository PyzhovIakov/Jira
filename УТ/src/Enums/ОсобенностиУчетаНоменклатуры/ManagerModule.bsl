#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Возвращает текст подсказки по особенностям учета номенклатуры.
//
// Параметры:
//	ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры	 - особенность учета номенклатуры.
//
// Возвращаемое значение:
//	Строка - подсказка по особенности учета номенклатуры.
//
Функция ПодсказкаПоОсобенностиУчетаНоменклатуры(ОсобенностьУчета) Экспорт
	
	ТекстПодсказки = "";
	
	Если ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОрганизациейПродавцом Тогда
		ТекстПодсказки = НСтр("ru = 'Услуга выполняется собственной организацией, продается ей же.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОрганизациейПоАгентскойСхеме Тогда
		ТекстПодсказки = НСтр("ru = 'Услуга выполняется собственной организацией (принципалом), продается по агентскому договору.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Партнером Тогда
		ТекстПодсказки = НСтр("ru = 'Услуга выполняется сторонним исполнителем (принципалом), продается по агентскому договору.'");
	КонецЕсли;
	
	НоменклатураЛокализация.ПодсказкаПоОсобенностиУчетаНоменклатуры(ТекстПодсказки, ОсобенностьУчета);
	
	Возврат ТекстПодсказки;
	
КонецФункции

// Связь особенностей учета и функциональных опций. Если связь не указана, то особенность учета по умолчанию скрывается.
//
// Возвращаемое значение:
//	Соответствие
//	 * Ключ - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры.
//	 * Значение - Строка - имена функциональных опций через запятую, значения опций объединяются по И.
//
Функция СвязьОсобенностейУчетаИФО() Экспорт
	
	СвязьОсобенностейУчетаИФО = Новый Соответствие;
	
	СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ОрганизациейПродавцом, "ИспользоватьПродажуАгентскихУслуг");
	СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ОрганизациейПоАгентскойСхеме, "ИспользоватьПродажуАгентскихУслуг,ИспользоватьНесколькоОрганизаций");
	СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Партнером, "ИспользоватьПродажуАгентскихУслуг");
	
	НоменклатураЛокализация.СвязьОсобенностейУчетаИФО(СвязьОсобенностейУчетаИФО);
	
	Возврат СвязьОсобенностейУчетаИФО;
	
КонецФункции

// Возвращает Истину если включены ФО особенностей учета номенклатуры
//
// Параметры:
//  ОтборТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры, Неопределено - Отбор по типу номенклатуры.
//  	Если передать Неопределено, то проверка будет выполнена по всем типам номенклатуры.
// 
// Возвращаемое значение:
//  Булево - возвращает Истину, если ФО включены.
Функция ОднаИзОсобенностейВключена(ОтборТипНоменклатуры = Неопределено) Экспорт
	
	ДоступныеОсобенностиУчета = ДанныеВыбораПоТипуНоменклатуры(ОтборТипНоменклатуры);
	
	ИспользуемыеБезусловно = Новый Массив;
	ИспользуемыеБезусловно.Добавить(БезОсобенностейУчета);
	
	Для Каждого ИспользуемыйБезусловно Из ИспользуемыеБезусловно Цикл
		ЭлементСписка = ДоступныеОсобенностиУчета.НайтиПоЗначению(ИспользуемыйБезусловно);
		Если ЭлементСписка = Неопределено Тогда
			Продолжить; // Не используется для данного типа номенклатуры
		КонецЕсли;
		ДоступныеОсобенностиУчета.Удалить(ЭлементСписка);
	КонецЦикла;
	
	Возврат ЗначениеЗаполнено(ДоступныеОсобенностиУчета);
	
КонецФункции

// Обновляет значение особенности учета при изменении типа номенклатуры.
// Если значение особенности учета осталось доступно для указанного типа, то значение особенности учета не изменяется.
// В противном случае, особенность учета заполняется значением по умолчанию.
// 
// Параметры:
//  ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - Определяет доступные особенности учета
//  ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры - значение, которое требуется перезаполнить
Процедура ОбработатьИзменениеТипаНоменклатуры(ТипНоменклатуры, ОсобенностьУчета) Экспорт
	
	ЗначениеДоступно = ЗначениеЗаполнено(ОсобенностьУчета)
		И ДанныеВыбораПоТипуНоменклатуры(ТипНоменклатуры).НайтиПоЗначению(ОсобенностьУчета) <> Неопределено;
	
	Если ЗначениеДоступно Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		ОсобенностьУчета = ОрганизациейПродавцом;
	Иначе
		ОсобенностьУчета = БезОсобенностейУчета;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ТипНоменклатуры = Неопределено;
	Если НЕ Параметры.Отбор.Свойство("ТипНоменклатуры", ТипНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
		
	СтандартнаяОбработка = Ложь;
	ЗначенияПеречисления = ПустаяСсылка().Метаданные().ЗначенияПеречисления;
	ФункциональныеОпции = Метаданные.ФункциональныеОпции;
	
	ТекстыДоступности = Новый Массив;
	ТекстыНаименований = Новый Массив; // Для сортировки и отбора по строке без учета регистра
	
	ШаблонВыбора = "ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.%1)
	|			ТОГДА %2";
	
	ПсевдонимыИспользуемыхКонстант = Новый Массив;
	ИспользуемыеЗначения = Новый Соответствие;
	// Используются безусловно:
	ИспользуемыеЗначения.Вставить(БезОсобенностейУчета);
	
	// Используются при включенных Ф.О.:
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ИспользуемыеЗначения, СвязьОсобенностейУчетаИФО());
	
	Для Каждого КлючИЗначение Из ИспользуемыеЗначения Цикл
		
		МетаданныеЗначенияПеречисления = ЗначенияПеречисления[Индекс(КлючИЗначение.Ключ)]; 
		ИмяЗначенияПеречисления = МетаданныеЗначенияПеречисления.Имя;
		УсловияЗначения = Новый Массив;
		
		ФункциональныеОпцииСтрокой = КлючИЗначение.Значение;
		Если ЗначениеЗаполнено(ФункциональныеОпцииСтрокой) Тогда
			
			Для Каждого ИмяФункциональнойОпции Из СтрРазделить(КлючИЗначение.Значение, ",") Цикл

				ИмяКонстанты = ФункциональныеОпции[ИмяФункциональнойОпции].Хранение.Имя;
				УсловияЗначения.Добавить(СтрШаблон("Константа%1.Значение", ИмяКонстанты));
				
				ПсевдонимыИспользуемыхКонстант.Добавить(СтрШаблон("Константа.%1 КАК Константа%1", ИмяКонстанты));
			КонецЦикла;
		
		Иначе // Безусловное использование:
			УсловияЗначения.Добавить("ИСТИНА");
		КонецЕсли;
		
		ТекстНаименования = МетаданныеЗначенияПеречисления.Представление();
		ТекстНаименования = СтрЗаменить(ТекстНаименования, """", """"""); // Экранирование кавычек
		ТекстНаименования = СтрШаблон("""%1""", ТекстНаименования); // Добавление кавычек
		ТекстНаименования = СтрШаблон(ШаблонВыбора, ИмяЗначенияПеречисления, ТекстНаименования);
		ТекстыНаименований.Добавить(ТекстНаименования);
		
		ТекстДоступности = СтрШаблон(ШаблонВыбора, ИмяЗначенияПеречисления, СтрСоединить(УсловияЗначения, " И "));
		ТекстыДоступности.Добавить(ТекстДоступности);
		
	КонецЦикла;
	
	ШаблонВыбора = 
	"ВЫБОР ОсобенностиУчетаНоменклатуры.Ссылка
	|		КОГДА %1
	|		ИНАЧЕ
	|			ЛОЖЬ
	|		КОНЕЦ";
	РазделительВыбора = "
	|		КОГДА ";
	
	ТекстНаименования = СтрШаблон(ШаблонВыбора, СтрСоединить(ТекстыНаименований, РазделительВыбора));
	ТекстыДоступности = СтрШаблон(ШаблонВыбора, СтрСоединить(ТекстыДоступности, РазделительВыбора));
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОсобенностиУчетаНоменклатуры.Ссылка КАК Ссылка,
	|	&Наименование КАК Наименование,
	|	ВЫБОР ОсобенностиУчетаНоменклатуры.Ссылка
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета)
	|			ТОГДА -2
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПродавцом)
	|			ТОГДА -1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПриоритетВывода
	|ИЗ
	|	Перечисление.ОсобенностиУчетаНоменклатуры КАК ОсобенностиУчетаНоменклатуры,
	|	Константы КАК ИсточникиКонстант
	|ГДЕ
	|	&ОтборПоФункциональнымОпциям
	|	И &ОтборПоСтроке
	|	И ВЫБОР
	|		КОГДА ОсобенностиУчетаНоменклатуры.Ссылка В (&ОсобенностиУчетаУслуг)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТИпыНоменклатуры.Товар)
	|	КОНЕЦ В (&ТипНоменклатуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетВывода,
	|	Наименование";
	
	Запрос.УстановитьПараметр("ТипНоменклатуры", ТипНоменклатуры);
	Запрос.УстановитьПараметр("ОсобенностиУчетаУслуг", ОсобенностиУчетаУслуг());
	ЕстьОтборПоСтроке = НЕ ПустаяСтрока(Параметры.СтрокаПоиска);
	Если ЕстьОтборПоСтроке Тогда
		Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоСтроке", "&Наименование ПОДОБНО &СтрокаПоиска");
	Иначе
		Запрос.УстановитьПараметр("ОтборПоСтроке", Истина);
	КонецЕсли;
	
	ПсевдонимыИспользуемыхКонстант = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПсевдонимыИспользуемыхКонстант);
	ПсевдонимыИспользуемыхКонстант = СтрСоединить(ПсевдонимыИспользуемыхКонстант, ",
	|	");
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Константы КАК ИсточникиКонстант", ПсевдонимыИспользуемыхКонстант);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоФункциональнымОпциям", ТекстыДоступности);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Наименование", ТекстНаименования);
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПредставлениеЭлемента = Выборка.Наименование;
		Если ЕстьОтборПоСтроке Тогда
			ПредставлениеЭлемента = ОбщегоНазначенияУТ.СтрВыделитьОформлениемНачалоСтроки(ПредставлениеЭлемента, Параметры.СтрокаПоиска);
		КонецЕсли;
		
		ДанныеВыбора.Добавить(Выборка.Ссылка, ПредставлениеЭлемента);
		
	КонецЦикла;

	НоменклатураЛокализация.ОбработкаПолученияДанныхВыбораОсобенностейУчета(ДанныеВыбора, Параметры,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеВыбораПоТипуНоменклатуры(ОтборТипНоменклатуры)

	Если ОтборТипНоменклатуры = Неопределено Тогда
		ОтборТипНоменклатуры = Новый Массив;
		Для Каждого ЭлементПеречисления Из Перечисления.ТипыНоменклатуры Цикл
			ОтборТипНоменклатуры.Добавить(ЭлементПеречисления);
		КонецЦикла;
	КонецЕсли;

	Отбор = Новый Структура;
	Отбор.Вставить("ТипНоменклатуры", ОтборТипНоменклатуры);

	ПараметрыДанныхВыбора = Новый Структура;
	ПараметрыДанныхВыбора.Вставить("СтрокаПоиска", "");
	ПараметрыДанныхВыбора.Вставить("Отбор", Отбор);
	ДанныеВыбора = Перечисления.ОсобенностиУчетаНоменклатуры.ПолучитьДанныеВыбора(ПараметрыДанныхВыбора);
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает перечень особенностей учета услуг.
// 
// Возвращаемое значение:
//   Массив из ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры - Перечень особенностей учета услуг.
//
Функция ОсобенностиУчетаУслуг()
	
	ВозвращаемоеЗначение = Новый Массив;
	ВозвращаемоеЗначение.Добавить(ОрганизациейПродавцом);
	ВозвращаемоеЗначение.Добавить(ОрганизациейПоАгентскойСхеме);
	ВозвращаемоеЗначение.Добавить(Партнером);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецЕсли

