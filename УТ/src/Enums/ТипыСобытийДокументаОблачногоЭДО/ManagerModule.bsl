// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Уникальный идентификатор.
// 
// Параметры:
//  Значение - ПеречислениеСсылка.ТипыСобытийДокументаОблачногоЭДО
// 
// Возвращаемое значение:
//  Строка
Функция УникальныйИдентификатор(Значение) Экспорт
	
	Если Значение = ПослеФормирования Тогда
		Возврат УникальныйИдентификаторПослеФормирования();
	ИначеЕсли Значение = ПослеЗагрузки Тогда
		Возврат УникальныйИдентификаторПослеЗагрузки();
	ИначеЕсли Значение = ПослеУтверждения Тогда
		Возврат УникальныйИдентификаторПослеУтверждения();
	ИначеЕсли Значение = ПослеПодписания Тогда
		Возврат УникальныйИдентификаторПослеПодписания();
	ИначеЕсли Значение = ПослеЗавершенияОбмена Тогда
		Возврат УникальныйИдентификаторПослеЗавершенияОбмена();
	ИначеЕсли Значение = ПослеАннулирования Тогда
		Возврат УникальныйИдентификаторПослеАннулирования();
	ИначеЕсли Значение = ПослеПолученияПоСчетуФактуреПДП Тогда
		Возврат УникальныйИдентификаторПослеПолученияПоСчетуФактуреПДП();
	ИначеЕсли Значение = ПослеПолученияПоСчетуФактуреПДО Тогда
		Возврат УникальныйИдентификаторПослеПолученияПоСчетуФактуреПДО();
	ИначеЕсли Значение = ПослеПолученияПоСчетуФактуреИОП Тогда
		Возврат УникальныйИдентификаторПослеПолученияПоСчетуФактуреИОП();
	ИначеЕсли Значение = ПослеПолученияПоСчетуФактуреИОП_ПДО Тогда
		Возврат УникальныйИдентификаторПослеПолученияПоСчетуФактуреИОП_ПДО();
	ИначеЕсли Значение = ПослеЗагрузкиИнформацииПолучателяПоАктуСверкиВзаиморасчетов Тогда
		Возврат УникальныйИдентификаторПослеЗагрузкиИнформацииПолучателяПоАктуСверкиВзаиморасчетов();
	ИначеЕсли Значение = ПослеЗагрузкиДополнительныхСведенийПоАктуОРасхождениях Тогда
		Возврат УникальныйИдентификаторПослеЗагрузкиДополнительныхСведенийПоАктуОРасхождениях();
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный тип события документа ЭДО: %1'"), Значение);
	КонецЕсли;
	
КонецФункции

// Параметры:
//  Идентификатор - см. УникальныйИдентификатор
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыСобытийДокументаОблачногоЭДО
Функция ЗначениеПоИдентификатору(Идентификатор) Экспорт
	
	Если Идентификатор = УникальныйИдентификаторПослеФормирования() Тогда
		Возврат ПослеФормирования;
	ИначеЕсли Идентификатор = УникальныйИдентификаторПослеЗагрузки() Тогда
		Возврат ПослеЗагрузки;
	ИначеЕсли Идентификатор = УникальныйИдентификаторПослеУтверждения() Тогда
		Возврат ПослеУтверждения;
	ИначеЕсли Идентификатор = УникальныйИдентификаторПослеПодписания() Тогда
		Возврат ПослеПодписания;
	ИначеЕсли Идентификатор = УникальныйИдентификаторПослеЗавершенияОбмена() Тогда
		Возврат ПослеЗавершенияОбмена;
	ИначеЕсли Идентификатор = УникальныйИдентификаторПослеАннулирования() Тогда
		Возврат ПослеАннулирования;
	ИначеЕсли Идентификатор = УникальныйИдентификаторПослеПолученияПоСчетуФактуреПДП() Тогда
		Возврат ПослеПолученияПоСчетуФактуреПДП;
	ИначеЕсли Идентификатор = УникальныйИдентификаторПослеПолученияПоСчетуФактуреПДО() Тогда
		Возврат ПослеПолученияПоСчетуФактуреПДО;
	ИначеЕсли Идентификатор = УникальныйИдентификаторПослеПолученияПоСчетуФактуреИОП() Тогда
		Возврат ПослеПолученияПоСчетуФактуреИОП;
	ИначеЕсли Идентификатор = УникальныйИдентификаторПослеПолученияПоСчетуФактуреИОП_ПДО() Тогда
		Возврат ПослеПолученияПоСчетуФактуреИОП_ПДО;
	ИначеЕсли Идентификатор = УникальныйИдентификаторПослеЗагрузкиИнформацииПолучателяПоАктуСверкиВзаиморасчетов() Тогда
		Возврат ПослеЗагрузкиИнформацииПолучателяПоАктуСверкиВзаиморасчетов;
	ИначеЕсли Идентификатор = УникальныйИдентификаторПослеЗагрузкиДополнительныхСведенийПоАктуОРасхождениях() Тогда
		Возврат ПослеЗагрузкиДополнительныхСведенийПоАктуОРасхождениях;
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный тип события документа ЭДО: %1'"), Идентификатор);
	КонецЕсли;
	
КонецФункции

// Возвращаемое значение:
//  Строка
Функция УникальныйИдентификаторПослеФормирования()
	Возврат "154fac30-7590-436b-a948-1ca697b31757";
КонецФункции

// Возвращаемое значение:
//  Строка
Функция УникальныйИдентификаторПослеЗагрузки()
	Возврат "63a333e2-615d-43b0-9228-a667c9ff8d95";
КонецФункции

// Возвращаемое значение:
//  Строка
Функция УникальныйИдентификаторПослеУтверждения()
	Возврат "fa1686ae-8f4e-415f-a2da-a7d4ee266129";
КонецФункции

// Возвращаемое значение:
//  Строка
Функция УникальныйИдентификаторПослеПодписания()
	Возврат "5e16cd3a-b0fc-4ec4-9526-72c2917a8482";
КонецФункции

// Возвращаемое значение:
//  Строка
Функция УникальныйИдентификаторПослеЗавершенияОбмена()
	Возврат "74795564-5c88-4211-a57c-ddc70249025b";
КонецФункции

// Возвращаемое значение:
//  Строка
Функция УникальныйИдентификаторПослеАннулирования()
	Возврат "7a19b336-5ab7-444f-9507-f0b95b3a4f2a";
КонецФункции

// Возвращаемое значение:
//  Строка
Функция УникальныйИдентификаторПослеПолученияПоСчетуФактуреПДП()
	Возврат "59712230-fbbf-4c21-b4b0-54a4081b2509";
КонецФункции

// Возвращаемое значение:
//  Строка
Функция УникальныйИдентификаторПослеПолученияПоСчетуФактуреПДО()
	Возврат "866873df-0152-4235-9266-fedd1e8ee0a4";
КонецФункции

// Возвращаемое значение:
//  Строка
Функция УникальныйИдентификаторПослеПолученияПоСчетуФактуреИОП()
	Возврат "f65ec499-981a-4330-9253-3659fa861c3c";
КонецФункции

// Возвращаемое значение:
//  Строка
Функция УникальныйИдентификаторПослеПолученияПоСчетуФактуреИОП_ПДО()
	Возврат "2d10c990-dd52-4e64-8331-9c1f0f49ccd8";
КонецФункции

// Возвращаемое значение:
//  Строка
Функция УникальныйИдентификаторПослеЗагрузкиИнформацииПолучателяПоАктуСверкиВзаиморасчетов()
	Возврат "4dc0dc9a-b1ff-4119-af1b-392231fd3d27";
КонецФункции

// Возвращаемое значение:
//  Строка
Функция УникальныйИдентификаторПослеЗагрузкиДополнительныхСведенийПоАктуОРасхождениях()
	Возврат "3c242bcb-7722-42c2-a89a-ad5c43b70c6d";
КонецФункции

#КонецОбласти

#КонецЕсли