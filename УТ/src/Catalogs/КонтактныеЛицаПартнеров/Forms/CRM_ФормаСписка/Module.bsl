
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступом");
	Если МодульУправлениеДоступом <> Неопределено Тогда
		МодульУправлениеДоступом.ОграничитьВыводКлиентскойБазы(ЭтотОбъект, "Список");
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("ТекДата", CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	КоличествоПолейПоиска = 1;    
	Элементы.Список.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Нет;    
	
	// Полнотекстовый поиск
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();  
	ИндексПолнотекстовогоПоискаАктуален = ПолнотекстовыйПоискСервер.ИндексПоискаАктуален();
	РасширенныйПоиск = Ложь;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
	"ОтборПоПолнотекстовомуПоискуУстановлен",
	Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
	"ОтборПоПолнотекстовомуПоиску",
	Неопределено);
	ОснованиеВыбора = "";
	// Конец Полнотекстовый поиск
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи

	УстановитьУсловноеОформление_ПроцентЗаполнения();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	НеобходимоОбновитьСписокСправочника = ИмяСобытия = "ОбновитьСписокСправочника" 
		И Параметр.Свойство("Отбор") И Параметр.Отбор.Свойство("Владелец")
		И ТипЗнч(Параметр.Отбор.Владелец) = Тип("СправочникСсылка.Партнеры")
		И Источник = ВладелецФормы;
	
	Если НеобходимоОбновитьСписокСправочника Тогда
		
			ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
				ПолучитьОтборДинамическогоСписка(Список), "Владелец");
			Если ЭлементыОтбора.Количество() > 0 
				И ЭлементыОтбора[0].ПравоеЗначение = Параметр.Отбор.Владелец Тогда
					Возврат;
			КонецЕсли;
		
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Владелец",
			                         Параметр.Отбор.Владелец, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущаяСтрока <> Неопределено И Элемент.ВыделенныеСтроки.Количество() = 1 Тогда
		ПервыйИзВыделенных = Элемент.ТекущаяСтрока;
	КонецЕсли;   
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСписка", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Клиенты.КонтактноеЛицо.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Клиенты.КонтактноеЛицо.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// +СофтФон

&НаКлиенте
// Процедура - обработчик команды формы "Позвонить".
//
Процедура Позвонить(Команда)
	ТД = Элементы.Список.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СписокОбъектов = Новый СписокЗначений;
	СписокОбъектов.Добавить(ТД.Ссылка);
	сфпСофтФонПроКлиент.сфпПозвонитьВыбравТелефон(СписокОбъектов);
КонецПроцедуры // Позвонить()

// -СофтФон

#Область ДублиКонтактов

&НаСервере
Процедура Дубли_СвязатьВыбранныеНаСервере(Знач Дубли)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	CRM_ДублиКлиентовИКонтактов.Оригинал КАК Оригинал
	                      |ИЗ
	                      |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	                      |ГДЕ
	                      |	CRM_ДублиКлиентовИКонтактов.Оригинал В(&Оригинал)");
	Запрос.УстановитьПараметр("Оригинал", Дубли);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Оригинал = Выборка.Оригинал;
	Иначе
		Оригинал = ПервыйИзВыделенных;
	КонецЕсли;
	Дубли.Удалить(Дубли.Найти(Оригинал));
	Для каждого Дубль Из Дубли Цикл
		РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ЗаписатьДубль(Оригинал, Дубль);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Дубли_СвязатьВыбранные(Команда)
	Дубли_СвязатьВыбранныеНаСервере(Элементы.Список.ВыделенныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура Дубли_ПоискДублей(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Настройки", Новый Структура("Настройки_ИскатьДублиКонтактов", Истина));
	ПараметрыФормы.Вставить("СкрытьГруппуКлиенты", Истина);
	ПараметрыФормы.Вставить("СкрытьГруппуПотенциальныеКлиенты", Истина);
	ОткрытьФорму("Обработка.CRM_ПоискИЗаменаДублейКлиентовИКонтактов.Форма.Форма", ПараметрыФормы);
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция РазрешеноГрупповоеИзменениеПартнеров()

	Возврат Пользователи.РолиДоступны("CRM_ПередачаДелОтветственному, ПолныеПрава");

КонецФункции // РазрешеноГрупповоеИзменениеПартнеров()

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	РазрешеноИзменениеПартнеров = РазрешеноГрупповоеИзменениеПартнеров();
	
	Если РазрешеноИзменениеПартнеров Тогда
	
		ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);	
	
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru='Команда ""Изменить выделенное"" доступна только пользователям,
			| у которых есть роль ""Полные права"" или ""Передача дел ответственному"".';
			|en='The ""Edit Selected"" command is available only to users who have the ""Full rights"" role or ""Transfer cases to responsible"" role.'"));
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРеквизитов(Команда)
	ТекущийОбъект = Элементы.Список.ТекущиеДанные.Ссылка;
	Если ЗначениеЗаполнено(ТекущийОбъект) Тогда
		УсловияОтбора = Новый Структура("Объект", ТекущийОбъект);
		ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии", УсловияОтбора, Истина);
		ОткрытьФорму("Отчет.CRM_ИсторияРеквизитов.Форма", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Поиск

&НаКлиенте
Процедура УдалитьПолеПоиска(Команда)
	
	Элементы["ГруппаПоиска" + Строка(КоличествоПолейПоиска - 1)].Видимость = Ложь;
	Элементы["УдалитьПолеПоиска" + Строка(КоличествоПолейПоиска - 1)].Видимость = Ложь;
	Если КоличествоПолейПоиска > 2 Тогда
		Элементы["УдалитьПолеПоиска" + Строка(КоличествоПолейПоиска - 2)].Видимость = Истина;
	КонецЕсли;
	Элементы["ДобавитьПолеПоиска" + Строка(КоличествоПолейПоиска - 2)].Видимость = Истина;
	Если ЭтотОбъект["СтрокаПоискаДоп" + Строка(КоличествоПолейПоиска - 1)] <> "" Тогда
		ЭтотОбъект["СтрокаПоискаДоп" + Строка(КоличествоПолейПоиска - 1)] = "";
		ВыполнитьПоиск(Истина);
	КонецЕсли;
	КоличествоПолейПоиска = КоличествоПолейПоиска - 1;
	
КонецПроцедуры    

&НаКлиенте
Процедура ДобавитьПолеПоиска(Команда)
	
	Элементы["ГруппаПоиска" + Строка(КоличествоПолейПоиска)].Видимость = Истина;
	Элементы["ДобавитьПолеПоиска" + Строка(КоличествоПолейПоиска - 1)].Видимость = Ложь;
	Если КоличествоПолейПоиска > 1 Тогда
		Элементы["УдалитьПолеПоиска" + Строка(КоличествоПолейПоиска - 1)].Видимость = Ложь;
	КонецЕсли;
	Элементы["УдалитьПолеПоиска" + Строка(КоличествоПолейПоиска)].Видимость = Истина;
	КоличествоПолейПоиска = КоличествоПолейПоиска + 1;
	
КонецПроцедуры    

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СпособыПоиска = Новый СписокЗначений;
	СпособыПоиска.Добавить(0, НСтр("ru = 'По началу строки'"));
	СпособыПоиска.Добавить(1, НСтр("ru = 'По части строки'"));
	СпособыПоиска.Добавить(2, НСтр("ru = 'По точному совпадению'"));
	
	НайденныйЭлемент = СпособыПоиска.НайтиПоЗначению(СпособПоиска);
	Если НайденныйЭлемент <> Неопределено Тогда
		НайденныйЭлемент.Пометка = Истина;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("СтрокаПоискаНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОповещениеЗавершения, СпособыПоиска, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	ВыполнитьПоиск(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоиск(ОповещатьОбОшибках)
	
	ОбрабатыватьАктивизациюПоиска = Истина;
	
	СтрокаПоиска = СокрЛП(СтрокаПоиска);
	Для Сч = 1 По 3 Цикл
		ИмяПоля = "СтрокаПоискаДоп" + Строка(Сч);
		ЭтотОбъект[ИмяПоля] = СокрЛП(ЭтотОбъект[ИмяПоля]);
	КонецЦикла;
	
	// Проверка возможности поиска.
	Отказ = Ложь;
	ТекстСообщения = НСтр("ru='Минимальная длина строки поиска 3 символа.';
		|en='Minimum length of the search line is 3 characters.'");
	Если ОповещатьОбОшибках И СтрДлина(СтрокаПоиска) < 3  И СтрДлина(СтрокаПоиска) > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СтрокаПоиска", , Отказ);
	КонецЕсли;	
	Для Сч = 1 По 3 Цикл
		ИмяПоля = "СтрокаПоискаДоп" + Строка(Сч);
		Если ОповещатьОбОшибках И СтрДлина(ЭтотОбъект[ИмяПоля]) < 3  И СтрДлина(ЭтотОбъект[ИмяПоля]) > 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ИмяПоля, , Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПоискНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискНаСервере(УсловияПоиска = Неопределено)
	CRM_ТаблицаНайденныхСсылок.Очистить();
	CRM_РезультатыПоиска = "";
	Если УсловияПоиска = Неопределено Тогда
		
		// Анализ строк поиска, формализация условий и заполнение кэша.
		КэшПоиска = CRM_ПоискКонтактов.СтруктураДанныхКэша();
		КэшЗаполнения = CRM_ПоискКонтактов.СтруктураДанныхКэша();
		УсловияПоиска = Новый Массив;
		Если Не ПустаяСтрока(СтрокаПоиска) Тогда
			СтрокаПоискаНормализованная = CRM_ПоискКонтактов.НормализоватьСтрокуПоискаИДополнитьКэш(СтрокаПоиска,
				 КэшПоиска,
				 КэшЗаполнения);
			УсловияПоиска.Добавить(СтрокаПоискаНормализованная);
		КонецЕсли;
		Для Сч = 1 По 3 Цикл
			ТекущаяСтрокаПоиска = ЭтотОбъект["СтрокаПоискаДоп" + Сч];
			Если Не ПустаяСтрока(ТекущаяСтрокаПоиска) Тогда
				СтрокаПоискаНормализованная = CRM_ПоискКонтактов.НормализоватьСтрокуПоискаИДополнитьКэш(ТекущаяСтрокаПоиска,
					 КэшПоиска,
					 КэшЗаполнения);
				УсловияПоиска.Добавить(СтрокаПоискаНормализованная);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Поиск.
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка",
			 Новый СписокЗначений, ВидСравненияКомпоновкиДанных.ВСписке, , Ложь,
			 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		Элементы.СтрокаПоиска.ЦветФона = Новый Цвет(255, 255, 255);
		Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		Возврат;
	КонецЕсли;	
	Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	УстановитьПривилегированныйРежим(Истина);
	РезультатПоиска = CRM_ПоискКонтактов.ВыполнитьПоискКонтактов(УсловияПоиска, СпособПоиска, Истина, Истина);
	УстановитьПривилегированныйРежим(Ложь);
	Если ЗначениеЗаполнено(РезультатПоиска.КодОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка",
			 Новый СписокЗначений, ВидСравненияКомпоновкиДанных.ВСписке, , Истина,
			 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		Элементы.СтрокаПоиска.ЦветФона = Новый Цвет(255, 200, 200);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ тмпСсылки
	               |ИЗ
	               |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	               |ГДЕ
	               |	КонтактныеЛицаПартнеров.Ссылка В(&Массивссылок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	тмпСсылки.Ссылка КАК Ссылка
	               |ИЗ
	               |	тмпСсылки КАК тмпСсылки";
	Запрос.УстановитьПараметр("Массивссылок", РезультатПоиска.Элементы);
	СписоСсылокДляОтбора = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка",
		 СписоСсылокДляОтбора, ВидСравненияКомпоновкиДанных.ВСписке, , Истина,
		 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	Если СписоСсылокДляОтбора.Количество() = 0 Тогда
		Элементы.СтрокаПоиска.ЦветФона = Новый Цвет(255, 200, 200);
	Иначе
		Элементы.СтрокаПоиска.ЦветФона = Новый Цвет(255, 255, 255);
	КонецЕсли;	
	CRM_ТаблицаНайденныхСсылок.Загрузить(РезультатПоиска.ТаблицаРезультатов);
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособПоиска <> ВыбранныйЭлемент.Значение Тогда
		СпособПоиска = ВыбранныйЭлемент.Значение;
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("CRM_МастерРегистрацииОбращения.СпособПоиска",
			 "СправочникПартнеры",
			 СпособПоиска);
		ВыполнитьПоиск(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьТиповойПоиск(Команда)
	Элементы.ФормаИспользоватьТиповойПоиск.Пометка = НЕ Элементы.ФормаИспользоватьТиповойПоиск.Пометка;
	Элементы.ГруппаДополнительныеПоляПоиска.Видимость = НЕ Элементы.ФормаИспользоватьТиповойПоиск.Пометка;    
	Элементы.ГруппаРезультатыПоиска.Видимость = НЕ Элементы.ФормаИспользоватьТиповойПоиск.Пометка;

	СтрокаПоиска = "";
	СтрокаПоискаCRM = "";
	СтрокаПоискаДоп1 = "";
	СтрокаПоискаДоп2 = "";
	СтрокаПоискаДоп3 = "";
	ВыполнитьПоиск(Ложь);     
	
	Элементы.Список.ПоложениеСтрокиПоиска = ?(Элементы.ФормаИспользоватьТиповойПоиск.Пометка,
		 ПоложениеСтрокиПоиска.Авто,
		 ПоложениеСтрокиПоиска.Нет);
КонецПроцедуры  

&НаКлиенте
Процедура CRM_РезультатыПоискаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(CRM_НайденнаяСсылка) = Тип("СправочникСсылка.Партнеры") Тогда
		
		CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
			"CRM_Статистика.Клиенты.Клиент.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
		
		Открытьформу("Справочник.Партнеры.ФормаОбъекта", Новый Структура("Ключ", CRM_НайденнаяСсылка));
		
	ИначеЕсли ТипЗнч(CRM_НайденнаяСсылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда	
		
		CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
			"CRM_Статистика.Клиенты.КонтактноеЛицо.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
		
		Открытьформу("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", Новый Структура("Ключ", CRM_НайденнаяСсылка));
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСписка()
	
		// +CRM
	CRM_РезультатыПоиска = "";
		
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда		
		CRM_СформироватьСтрокуРезультатаПоиска(Элементы.Список.ТекущаяСтрока);
	КонецЕсли;	
	// -CRM
	
КонецПроцедуры   

&НаСервере
Процедура CRM_СформироватьСтрокуРезультатаПоиска(Контакт)
	CRM_РезультатыПоиска = "";
	  
	Если Элементы.ФормаИспользоватьПолнотекстовыйПоиск.Пометка Тогда  
		СтруктураПоиска = Новый Структура("Партнер", Контакт); 
		МассивСтрок = Основания.НайтиСтроки(СтруктураПоиска);
		CRM_НайденнаяСсылка = Неопределено;
		Если МассивСтрок.Количество() > 0 Тогда
			
			СтрокаНайденного = МассивСтрок[0];
			CRM_НайденнаяСсылка = СтрокаНайденного.Партнер;
			Если ТипЗнч(СтрокаНайденного.Ссылка) = Тип("СправочникСсылка.Партнеры") Тогда
				ВидСправочника = "партнера";
			ИначеЕсли ТипЗнч(СтрокаНайденного.Ссылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда	
				ВидСправочника = "контактного лица";
			КонецЕсли;	
			CRM_РезультатыПоиска = СтрокаНайденного.Основание;
		КонецЕсли;	
	Иначе	   
		СтруктураПоиска = Новый Структура("Владелец", Контакт); 
		МассивСтрок = CRM_ТаблицаНайденныхСсылок.НайтиСтроки(СтруктураПоиска);
		CRM_НайденнаяСсылка = Неопределено;
		Если МассивСтрок.Количество() > 0 Тогда
			
			СтрокаНайденного = МассивСтрок[0];
			CRM_НайденнаяСсылка = СтрокаНайденного.Владелец;
			Если ТипЗнч(СтрокаНайденного.Владелец) = Тип("СправочникСсылка.Партнеры") Тогда
				ВидСправочника = "партнера";
			ИначеЕсли ТипЗнч(СтрокаНайденного.Владелец) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда	
				ВидСправочника = "контактного лица";
			КонецЕсли;	
			CRM_РезультатыПоиска = "Найдено в реквизите " + ВидСправочника + " " + СтрокаНайденного.Владелец 
				+ " '" + СтрокаНайденного.ПолеПоиска + "': " + СтрокаНайденного.ЗначениеПоиска;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ПолнотекстовыйПоиск

&НаКлиенте
Процедура ИспользоватьПолнотекстовыйПоиск(Команда)
	Элементы.ФормаИспользоватьПолнотекстовыйПоиск.Пометка = НЕ Элементы.ФормаИспользоватьПолнотекстовыйПоиск.Пометка;
	Элементы.ГруппаПолнотекстовыйПоиск.Видимость = Элементы.ФормаИспользоватьПолнотекстовыйПоиск.Пометка;
	Элементы.ГруппаДополнительныеПоляПоиска.Видимость = НЕ Элементы.ФормаИспользоватьПолнотекстовыйПоиск.Пометка;	    
	Если Элементы.ФормаИспользоватьПолнотекстовыйПоиск.Пометка Тогда 
		СтрокаПоиска = "";
		СтрокаПоискаДоп1 = "";
		СтрокаПоискаДоп2 = "";
		СтрокаПоискаДоп3 = "";
		   
	Иначе
		СтрокаПоискаПолнотекстовый = "";
	КонецЕсли;
	ВыполнитьПоиск(Истина);
	ВыполнитьПоискПолнотекстовый(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПолнотекстовыйПриИзменении(Элемент)
	ВыполнитьПоискПолнотекстовый(Неопределено);
КонецПроцедуры   

&НаКлиенте
Процедура ВыполнитьПоискПолнотекстовый(Знач Оповещение)
	CRM_РезультатыПоиска = "";
	Если СтрокаПоискаПолнотекстовый <> "" Тогда
		
		ПроверитьИндексПолнотекстовогоПоиска(Новый ОписаниеОповещения("ВыполнитьПоискЗавершение",
			 ЭтотОбъект, Новый Структура("Оповещение",
			 Оповещение)));
        Возврат;
		
	Иначе
		CRM_ПоискКонтактовКлиент.ВосстановитьОтображениеСпискаПослеПолнотекстовогоПоиска(ЭтотОбъект);
		РасширенныйПоиск = Ложь;
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
		                                                                   "ОтборПоПолнотекстовомуПоискуУстановлен",
		                                                                   Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
		                                                                   "ОтборПоПолнотекстовомуПоиску",
		                                                                   Неопределено);
		ОснованиеВыбора = "";  
		ВернутьЦветСтрокиПоиска();
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение);
КонецПроцедуры  

&НаСервере
Процедура ВернутьЦветСтрокиПоиска()
	
	Элементы.СтрокаПоискаПолнотекстовый.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИндексПолнотекстовогоПоиска(Знач Оповещение)
	
	Если Не ИндексПолнотекстовогоПоискаАктуален И ИнформационнаяБазаФайловая Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьИндексПолнотекстовогоПоискаЗавершение",
			 ЭтотОбъект, Новый Структура("Оповещение", Оповещение)),
			НСтр("ru='Индекс полнотекстового поиска неактуален. Обновить индекс?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ПроверитьИндексПолнотекстовогоПоискаФрагмент(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИндексПолнотекстовогоПоискаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    Результат = РезультатВопроса; 
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        ПодключитьОбработчикОжидания("ОбновитьИндексПолнотекстовогоПоиска", 0.2, Истина);
        ВыполнитьОбработкуОповещения(Оповещение);
        Возврат;
    КонецЕсли;
    
    ПроверитьИндексПолнотекстовогоПоискаФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИндексПолнотекстовогоПоискаФрагмент(Знач Оповещение)
    
    ВыполнитьПолнотекстовыйПоиск();
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИндексПолнотекстовогоПоиска()
	
	Состояние(НСтр("ru = 'Идет обновление индекса полнотекстового поиска...'"));
	ОбновитьИндексПолнотекстовогоПоискаСервер();
	ИндексПолнотекстовогоПоискаАктуален = Истина;
	Состояние(НСтр("ru = 'Обновление индекса полнотекстового поиска завершено...'"));
	ВыполнитьПолнотекстовыйПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПолнотекстовыйПоиск()
	
	ТекстОшибки = НайтиПартнеровПолнотекстовыйПоиск();
	Если ТекстОшибки = Неопределено Тогда
		РасширенныйПоиск = Истина;
		ЗаполнитьСтрокуОснования();
	Иначе
		Если НЕ ТекстОшибки = НСтр("ru = 'Ничего не найдено'") Тогда
			ПоказатьОповещениеПользователя(ТекстОшибки);
		Иначе
			CRM_ПоискКонтактовКлиент.ВосстановитьОтображениеСпискаПослеПолнотекстовогоПоиска(ЭтотОбъект);
			РасширенныйПоиск = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндексПолнотекстовогоПоискаСервер()
	
	CRM_ПоискКонтактов.ОбновитьИндексПолнотекстовогоПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокуОснования()
	
	Основание = Основания.НайтиСтроки(Новый Структура("Партнер", Элементы.Список.ТекущаяСтрока));
	Если Основание.Количество() = 0 Тогда
		ОснованиеВыбора = "";
	Иначе
		ОснованиеВыбора = Основание[0].Основание;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиПартнеровПолнотекстовыйПоиск()

	Возврат CRM_ПоискКонтактов.НайтиПартнеровПолнотекстовыйПоиск(ЭтотОбъект, Истина);

КонецФункции

&НаКлиенте
Процедура ВыполнитьПоискЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    ТекущийЭлемент = ?(НЕ РасширенныйПоиск, Элементы.СтрокаПоискаПолнотекстовый, Элементы.Список);
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПолучитьОтборДинамическогоСписка(Список)
	
	Возврат Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление_ПроцентЗаполнения()
	
	ЭлементУО = Список.УсловноеОформление.Элементы.Добавить();
	
	// отбор
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроцентЗаполненияАктуален"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбора.ПравоеЗначение = Ложь;
	ЭлементОтбора.Использование = Истина;
	
	//Оформление	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	// Создаем поля оформления
	ПолеОформления = ЭлементУО.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ПроцентЗаполнения");
	ПолеОформления.Использование = Истина;
	
	МассивЗапрещенныеПоля = Новый Массив;
	МассивЗапрещенныеПоля.Добавить("ПроцентЗаполнения");
	Список.УстановитьОграниченияИспользованияВОтборе(МассивЗапрещенныеПоля);
	Список.УстановитьОграниченияИспользованияВПорядке(МассивЗапрещенныеПоля);
	
КонецПроцедуры

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("РаспознаваниеРечиПоиск");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("РаспознаваниеРечиПоиск");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.РаспознаваниеРечиПоиск);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.РаспознаваниеРечиПоиск);
	Контекст.Вставить("ИмяРеквизита",                     "РаспознаваниеРечиПоиск");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если Не РезультатРаспознавания.РаспознаваниеФразыЗавершено Тогда
		ЭтотОбъект[Контекст.ИмяРеквизита] = "";
		Контекст.Элемент.ОбновитьТекстРедактирования();
	КонецЕсли;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		Контекст.Элемент,
		Контекст.ИмяРеквизита,
		РезультатРаспознавания);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
	СтрокаПоискаПриИзменении(ТекущийЭлемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "СтрокаПоиска");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

#КонецОбласти // СлужебныеПроцедурыИФункции
