
#Область ОписаниеПеременных

// ЛентаСобытий

&НаКлиенте
Перем БыстрыйВвод_КэшированноеВремя;

&НаКлиенте
Перем БыстрыйВвод_КэшированнаяДатаНачала;

&НаКлиенте
Перем БыстрыйВвод_АктивенАвтоПодбор;

&НаКлиенте
Перем Лента_Прокрутить;

// Конец ЛентаСобытий

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	 ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	 
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Установка значения реквизита АдресКартинки.
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтоНовый = Истина;
		Если НЕ Объект.CRM_Фотография.Пустая() Тогда
			АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
			// +CRM
			Если ПустаяСтрока(АдресКартинки) Тогда
				ВывестиНедоступностьКартинки();
			КонецЕсли;	
			// -CRM
		Иначе
			АдресКартинки = "";
		КонецЕсли;
		CRM_УправлениеВидимостьюКартинки();
		Элементы.CRM_СоздатьФизЛицо.Видимость = Ложь;
		Если Не ЗначениеЗаполнено(Объект.Автор) Тогда
			Объект.Автор = Пользователи.ТекущийПользователь();
		КонецЕсли;
	КонецЕсли;
	
	// Обработчик механизма "Свойства".
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "КоманднаяПанельФормы");
		ДополнительныеПараметры.Вставить("Объект", Объект);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
		
		Элемент = Элементы.Найти("РедактироватьСоставДополнительныхРеквизитов");
		Если Элемент <> Неопределено Тогда
			Элемент.Видимость = Ложь;
		КонецЕсли;
		// +CRM
		CRM_УправлениеСвойствами.ПослеОтрисовкиДополнительныхРеквизитов(ЭтотОбъект);
		// -CRM
	КонецЕсли;
	
	// +CRM
	Если Параметры.Свойство("СкопироватьКИПотенциальногоКлиента") Тогда
		CRM_ОбщегоНазначенияСервер.СкопироватьКонтактнуюИнформациюПотенциальногоКлиента(Параметры.ПотенциальныйКлиент,
			 , Объект, Ложь,
			 Ложь);
		ПрозвонитьМессенджерыПриОткрытии = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьИнтеграциюСМессенджерами");
	КонецЕсли;
	// -CRM
	
	// Обработчик подсистемы "Контактная информация".
	ДополнительныеПараметрыСозданияКИ = CRM_УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ДополнительныеПараметрыСозданияКИ.ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация";
	ДополнительныеПараметрыСозданияКИ.ВыводитьВОднуКолонку = Истина;
	ДополнительныеПараметрыСозданияКИ.Вставить("ПолеВвода_ВертикальнаяГруппировка", Истина);
	
	CRM_УправлениеКонтактнойИнформацией.ИнициализацияКонтактнойИнформации(ЭтотОбъект);
	CRM_УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ДополнительныеПараметрыСозданияКИ);
	Элементы.ГруппаКонтактнаяИнформацияОбщая.Видимость = Истина;
	
	Если Объект.Ссылка.Пустая() И Параметры.Свойство("ПараметрыНового") Тогда
		
		// +CRM
		ПараметрыНового = Параметры.ПараметрыНового;
		
		Объект.Наименование = ПараметрыНового.Наименование;
		
		Если ПараметрыНового.Свойство("СсылкаНаИсточникДанных") Тогда
			CRM_СсылкаНаИсточникДанных = ПараметрыНового.СсылкаНаИсточникДанных;
		КонецЕсли;
		
		Если ПараметрыНового.Свойство("Фамилия") Тогда
			Объект.CRM_Фамилия = ПараметрыНового.Фамилия;
		КонецЕсли;
		
		Если ПараметрыНового.Свойство("Имя") Тогда
			Объект.CRM_Имя = ПараметрыНового.Имя;
		КонецЕсли;
		
		Если ПараметрыНового.Свойство("Отчество") Тогда
			Объект.CRM_Отчество = ПараметрыНового.Отчество;
		КонецЕсли;
		
		Если ПараметрыНового.Свойство("CRM_ОтписалсяОтEmailРассылок") Тогда
			Объект.CRM_ОтписалсяОтEmailРассылок = ПараметрыНового.CRM_ОтписалсяОтEmailРассылок;
		КонецЕсли;
		
		Если ПараметрыНового.Свойство("Должность") Тогда
			Объект.CRM_Должность = ПараметрыНового.Должность;
		КонецЕсли;
		
		Если НЕ Параметры.Свойство("СкопироватьКИПотенциальногоКлиента") Тогда // иначе КИ была скопирована выше
			
			Если ПараметрыНового.Свойство("Телефон") Тогда
				
				CRM_ОсновнойВидТелефонаКонтакта = Константы.CRM_ОсновнойВидТелефонаКонтакта.Получить();			
				ВидКИ = ?(ЗначениеЗаполнено(CRM_ОсновнойВидТелефонаКонтакта),
										CRM_ОсновнойВидТелефонаКонтакта, Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
										
				МассивДопРеквизитов = ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"].НайтиСтроки(Новый Структура("Тип,
					|Вид", Перечисления.ТипыКонтактнойИнформации.Телефон,
					 ВидКИ));
				Если МассивДопРеквизитов.количество() > 0 Тогда
					МассивДопРеквизитов[0].Представление = ПараметрыНового.Телефон;
					МассивДопРеквизитов[0].Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(ПараметрыНового.Телефон,
						 МассивДопРеквизитов[0].Вид);
					CRM_УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Объект,
						 МассивДопРеквизитов[0].Значение, МассивДопРеквизитов[0].Вид, МассивДопРеквизитов[0].Тип, , ,
						 Ложь);
					ЭтотОбъект[МассивДопРеквизитов[0].ИмяРеквизита] = МассивДопРеквизитов[0].Представление;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПараметрыНового.Свойство("АдресПочты") Тогда
				
				CRM_ОсновнойВидEmailКонтакта = Константы.CRM_ОсновнойВидEmailКонтакта.Получить();
				ВидКИ = ?(ЗначениеЗаполнено(CRM_ОсновнойВидEmailКонтакта),
										CRM_ОсновнойВидEmailКонтакта, Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);
				
				МассивДопРеквизитов = ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"].НайтиСтроки(Новый Структура("Тип,
					|Вид", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
					 ВидКИ));
				Если МассивДопРеквизитов.количество() > 0 Тогда
					МассивДопРеквизитов[0].Представление = ПараметрыНового.АдресПочты;
					МассивДопРеквизитов[0].Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(ПараметрыНового.АдресПочты,
						 МассивДопРеквизитов[0].Вид);
					CRM_УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Объект,
						 МассивДопРеквизитов[0].Значение, МассивДопРеквизитов[0].Вид, МассивДопРеквизитов[0].Тип, , ,
						 Ложь);
					ЭтотОбъект[МассивДопРеквизитов[0].ИмяРеквизита] = МассивДопРеквизитов[0].Представление;
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		// -CRM
		
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовКИ();
	
	РедактированиеПредставления = Ложь;
	РедактированиеФИО = Ложь;
	ПредставлениеВыбраноИзСписка = Ложь;
	
	// +СофтФон
	сфпСтарыйПользовательДляПереключения = Объект.сфпПользовательДляПереключенияЗвонков;
	Если сфпСофтФонПроСервер.сфпИспользоватьСофтФон()
		 И сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьСофтФон") Тогда
		Элементы.сфпПользовательДляПереключенияЗвонков.Видимость = Истина;
		Если сфпСофтФонПроСервер.сфпРолиДоступны("сфпУправлениеМаршрутизацией, ПолныеПрава") Тогда
			Элементы.сфпПользовательДляПереключенияЗвонков.Доступность = Истина;
		Иначе
			Элементы.сфпПользовательДляПереключенияЗвонков.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Элементы.сфпПользовательДляПереключенияЗвонков.Видимость = Ложь;
	КонецЕсли;
	Если Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		сфпЗвонок =  Параметры.Основание;
	КонецЕсли;		
	Если Параметры.Свойство("Владелец") Тогда
		Объект.Владелец = Параметры.Владелец;
	КонецЕсли;			
	// -СофтФон
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.НаименованиеВыбор.КнопкаВыбора = Истина;
		Элементы.НаименованиеВыбор.КнопкаОткрытия = Истина;
	Иначе
		CRM_ФизЛицо = РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ПолучитьФизЛицо(Объект.Ссылка);
		Элементы.ГруппаРедактированиеФИО.Видимость = Не ЗначениеЗаполнено(CRM_ФизЛицо);
		Элементы.ФизЛицо.Видимость = Не Элементы.ГруппаРедактированиеФИО.Видимость;
		Элементы.CRM_СоздатьФизЛицо.Видимость = ПравоДоступа("Добавление", Метаданные.Справочники.Партнеры)
			И ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Справочники.Партнеры) И Не ЗначениеЗаполнено(CRM_ФизЛицо);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(CRM_ФизЛицо) Тогда
		Элементы.Пол.ТолькоПросмотр					= Истина;
		Элементы.CRM_Фамилия.ТолькоПросмотр			= Истина;
		Элементы.CRM_Имя.ТолькоПросмотр				= Истина;
		Элементы.CRM_Отчество.ТолькоПросмотр		= Истина;
		Элементы.НаименованиеВыбор.ТолькоПросмотр		= Истина;
		Элементы.НаименованиеВыбор.КнопкаОткрытия = Истина;
	КонецЕсли;
	CRM_ПродолжитьВводНового = Ложь;
	
	Если Параметры.Свойство("СпозиционироватьсяНаРеквизите")
		 И ЗначениеЗаполнено(Параметры.СпозиционироватьсяНаРеквизите) Тогда
		СпозиционироватьсяНаРеквизите = Параметры.СпозиционироватьсяНаРеквизите;
	КонецЕсли;
	
	Если Параметры.Свойство("БизнесРегион") Тогда
		БизнесРегион = Параметры.БизнесРегион;
	КонецЕсли;
	
	Элементы.ДатаКасания.Видимость = ЗначениеЗаполнено(ДатаКасания);

	// Видимость табличной части "Дополнительная информация", (не вешаем на ФО, чтобы не было отличий от БСП)
	Элементы.ГруппаДополнительнаяИнформация.Видимость =
		ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Создан';en='Created'") + ": ", ,
		 ЦветаСтиля.CRM_ЧерныйЦветТекста));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Строка(Объект.Автор), , ЦветаСтиля.CRM_ОсновнойГолубой, , "Автор"));
	КомпонентыФС.Добавить(" " + Формат(Объект.ДатаРегистрацииСвязи, "ДФ=d.MM.yyyy"));
	Элементы.ДекорацияАвторДата.Заголовок = Новый ФорматированнаяСтрока(КомпонентыФС);
	
	СформироватьПредставлениеВложений();
	
	CRM_ОбщегоНазначенияПовтИсп.ЗаполнитьСписокВыбораВариантовСроков(Элементы.БыстрыйВвод_ВзаимодействиеДатаНачала_Дата);
	CRM_ОбщегоНазначенияПовтИсп.ЗаполнитьСписокВыбораВариантовСроков(Элементы.БыстрыйВвод_ЗадачаДатаОкончания_Дата);
	
	// Управление элементами на форме
	CRM_УправлениеЭлементамиНаФормах.ПриСозданииНаСервере(ЭтотОбъект, "КоманднаяПанельФормы", "ГруппаДополнительно");
	// Конец Управление элементами на форме
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	ТекущееПодразделение = ТекущийПользователь.Подразделение;
	
	// ЛентаСобытий
	Лента_ЗначенияНастроек = CRM_ЛентаСобытий.НастройкиЛенты(ТекущийПользователь, "ЛентаКонтакта");
	Если Параметры.Свойство("ПараметрыОтбора") Тогда
		Лента_ЗначенияНастроек.Вставить("ПараметрыОтбора", Параметры.ПараметрыОтбора);
	КонецЕсли;
	CRM_ЛентаСобытий.НастроитьЛенту(ЭтотОбъект, Лента_ЗначенияНастроек);
	НастроитьОбластьВвода();
	Лента_НеЗаполнять = Не ЗначениеЗаполнено(Объект.Ссылка);
	CRM_ЛентаСобытийКлиентСервер.ОбновитьЛенту(Объект.Ссылка, ЭтотОбъект, "ЛентаКонтакта", Ложь, Лента_НеЗаполнять);
	// Конец ЛентаСобытий
	
	// +CRM
	Элементы.ПотенциальныеКлиенты.Доступность = (НЕ Объект.Ссылка.Пустая());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(CRM_ПотенциальныеКлиенты,
		 "КонтактноеЛицо", Объект.Ссылка,
		 Истина);
	СформироватьТаблицуДублей();
	
	CRM_Теги.УстановитьПараметрыВыбора(Элементы);
	// -CRM
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Объект.РолиКонтактногоЛица.Количество() = 0 Тогда
		Элементы.ГруппаТабЧастьРоли.Заголовок = "Роли";	
	Иначе	
		Элементы.ГруппаТабЧастьРоли.Заголовок = "Роли(" + Объект.РолиКонтактногоЛица.Количество() + ")";
	КонецЕсли;	
	
	Если Объект.Ссылка.Пустая() Тогда
		ВыбранныеСтатусы = Новый Массив;
	Иначе
		ВыбранныеСтатусы = Объект.CRM_Статусы.Выгрузить().ВыгрузитьКолонку("Статус");
	КонецЕсли;
	Справочники.CRM_СтатусыКонтактныхЛиц.ЗаполнитьСписокСтатусов(CRM_СтатусыКонтактныхЛиц, ВыбранныеСтатусы);
	
	УказыватьВКарточкеКонтактногоЛицаБолееОднойРоли =
		ПолучитьФункциональнуюОпцию("CRM_УказыватьВКарточкеКонтактногоЛицаБолееОднойРоли");
	Элементы.CRM_РольКонтактногоЛица.ТолькоПросмотр = УказыватьВКарточкеКонтактногоЛицаБолееОднойРоли;
	// Нужно, потому что в спарках есть функциональная опция ИспользоватьРолиКонтактныхЛицПартнеров, на которую повешена
	// и табличная часть РолиКонтактныхЛиц
	Элементы.ГруппаТабЧастьРоли.Видимость = УказыватьВКарточкеКонтактногоЛицаБолееОднойРоли;
	РольКЭШ = Объект.CRM_РольКонтактногоЛица;
	УстановитьУсловноеОформление();
	
	// +CRM
	Если Метаданные.ОбщиеМодули.Найти("CRM_Модуль_РаботаСФормамиСервер") <> Неопределено Тогда
		CRM_Модуль = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_РаботаСФормамиСервер");
		CRM_Модуль.ДобавитьЭлементыФормыДляКонтакта(ЭтотОбъект);
	КонецЕсли;
	// -CRM
	// +Мобильный клиент
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку(Истина,
			 Истина).ПодготовитьФормуДляМобильногоКлиента(ЭтотОбъект);
	КонецЕсли;
	// -Мобильный клиент
	
	Элементы.ИсторияРеквизитов.Видимость = ПолучитьФункциональнуюОпцию("CRM_ВестиИсториюРеквизитовКлиентов");
	
	Элементы.ГруппаB2BПортал.Видимость = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьОбменB2BПортал");
	Элементы.СтатусНаB2BПортале.АвтоОтметкаНезаполненного = Объект.CRM_ПодключенКB2BПорталу;
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ПолеКД = Новый ПолеКомпоновкиДанных(Элементы.РолиКонтактногоЛица.Имя);
	Элемент = Неопределено;
	Для Каждого ЭлементУО Из УсловноеОформление.Элементы Цикл
		Для Каждого ПолеУО Из  ЭлементУО.Поля.Элементы Цикл
			Если ПолеУО.Поле = ПолеКД Тогда
				Элемент = ЭлементУО;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;
	Если Элемент = Неопределено Тогда
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = ПолеКД;
	КонецЕсли;	

	ПолеКДОтбора = Новый ПолеКомпоновкиДанных("Объект.РолиКонтактногоЛица.РольКонтактногоЛица");
	ОтборЭлемента = Неопределено;
	Для Каждого ЭлементОтбора Из Элемент.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = ПолеКДОтбора Тогда
			ОтборЭлемента = ЭлементОтбора;
		КонецЕсли;	
	КонецЦикла;
	
	Если ОтборЭлемента = Неопределено Тогда
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = ПолеКДОтбора;
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	ОтборЭлемента.ПравоеЗначение = Объект.CRM_РольКонтактногоЛица;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,
		 , 10, Истина, Ложь, Ложь,
		 Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	// СтандартныеПодсистемы.КонтактнаяИнформация
	Если НЕ ЭтотОбъект["ПараметрыКонтактнойИнформации"].ГруппаКонтактнаяИнформация.ОтложеннаяИнициализация 
		ИЛИ ЭтотОбъект["ПараметрыКонтактнойИнформации"].ГруппаКонтактнаяИнформация.ВыполненаОтложеннаяИнициализация Тогда
		CRM_УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	КорректироватьНапоминание = Ложь;
	Если ТекущийОбъект.Ссылка.CRM_КлючевыеСобытия.Количество() = ТекущийОбъект.CRM_КлючевыеСобытия.Количество() Тогда
		Для Каждого СтрокаТЧ Из ТекущийОбъект.Ссылка.CRM_КлючевыеСобытия Цикл
			НайденнаяСтрока = ТекущийОбъект.CRM_КлючевыеСобытия.Найти(СтрокаТЧ.ВидСобытия, "ВидСобытия");
			Если НЕ (НайденнаяСтрока = Неопределено) Тогда
				Если НЕ (НайденнаяСтрока.НапоминатьОСобытии = СтрокаТЧ.НапоминатьОСобытии) Тогда
					КорректироватьНапоминание = Истина;
					Прервать;
				ИначеЕсли НЕ (НайденнаяСтрока.ДатаСобытия = СтрокаТЧ.ДатаСобытия) Тогда
					КорректироватьНапоминание = Истина;
					Прервать;
				КонецЕсли;	
			Иначе	
				КорректироватьНапоминание = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	Иначе
		КорректироватьНапоминание = Истина;
	// -CRM		
	КонецЕсли;
// +CRM
	Если НЕ (Объект.Ссылка.CRM_ОтписалсяОтEmailРассылок = Объект.CRM_ОтписалсяОтEmailРассылок) Тогда
		CRM_ИнтеграцияССервисамиРассылок.ПодписатьПолучателяНаРассылки(Объект, НЕ Объект.CRM_ОтписалсяОтEmailРассылок, Отказ);
	КонецЕсли;
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность", Модифицированность);
// +CRM
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// СтандартныеПодсистемы.УправлениеДоступом
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.УправлениеДоступом
	КонецЕсли;
	
	Если КорректироватьНапоминание Тогда
		// +CRM
		//CRM_ОповещенияСервер.СформироватьУдалитьНапоминанияОДняхРождения(ТекущийОбъект.Ссылка);
		CRM_ОповещенияСервер.CRM_СформироватьУдалитьНапоминанияОКлючевыхСобытиях(ТекущийОбъект.Ссылка);
		// -CRM
		КорректироватьНапоминание = Ложь;
	КонецЕсли;
	
	Элементы.НаименованиеВыбор.КнопкаВыбора = Ложь;
	
	// +CRM
	Если ЗначениеЗаполнено(CRM_ФизЛицо) Тогда
		РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ЗаписатьФизЛицо(Объект.Ссылка, CRM_ФизЛицо);
		Элементы.ФизЛицо.Видимость = Истина;
		Элементы.CRM_СоздатьФизЛицо.Видимость = Ложь;
	ИначеЕсли Не Элементы.ГруппаРедактированиеФИО.Видимость Тогда
		ВидимостьЭлементов = ПравоДоступа("Добавление", Метаданные.Справочники.Партнеры)
			И ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Справочники.Партнеры);
		Элементы.ГруппаРедактированиеФИО.Видимость = ВидимостьЭлементов;
		Элементы.CRM_СоздатьФизЛицо.Видимость = ВидимостьЭлементов;
	КонецЕсли;
	
	CRM_КонтрольЗаполненностиРеквизитовОбъектов.ОтобразитьПроцентЗаполнения(ЭтотОбъект, ТекущийОбъект);
	// -CRM
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ЛентаСобытий_Обновить" Или
		ИмяСобытия = "ОбновитьПланировщик" Или
		ИмяСобытия = "Запись_ЗадачаИсполнителя" Или
		ИмяСобытия = "СохраненаЛичнаяЗадача" Или
		ИмяСобытия = "СохраненоПоручение" Или
		ИмяСобытия = "Запись_Файл" Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
		
	// +CRM
	ИначеЕсли ИмяСобытия = "Создан новый партнер" И ТипЗнч(Параметр) = Тип("СправочникСсылка.Партнеры")
		 И ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения")
		 И Источник.ВладелецФормы = ЭтотОбъект Тогда
		СвязатьСНовымФизЛицом(Параметр);
		Записать();
	ИначеЕсли ИмяСобытия = "НовыйПотенциальныйКлиентЗаписан" Тогда
		ПодключитьОбработчикОжидания("CRM_ОбновитьГруппуПотенциальныеКлиенты", 0.1, Истина);
	// -CRM
	ИначеЕсли ИмяСобытия = "Запись_Файл" 
		И Параметр.Свойство("ВладелецФайла") Тогда
		
		Если Параметр.ВладелецФайла = Объект.Ссылка Тогда
			Модифицированность = Истина;
			
			СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			
			Если ВыборИзображения Тогда
				
				Объект.CRM_Фотография = СсылкаНаФайл;
				АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
				
			КонецЕсли;
			
			ФайлКартинкиПриИзменении(Неопределено);
			СформироватьПредставлениеВложений();
			
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		СформироватьПредставлениеВложений();
	ИначеЕсли ИмяСобытия = "ОбновитьОблакоТегов" И (ЭтотОбъект = Параметр) Тогда
		ОбновитьОблакоТегов();
	ИначеЕсли ИмяСобытия = "ПослеСозданияТега" И (Источник = Элементы.Тег) Тогда
		Тег = Параметр;
		CRM_ТегиКлиент.ТегПриИзменении(ЭтотОбъект, Элементы.Тег);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеКонтактнойИнформацией");
		МодульУправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если НЕ ТекущийОбъект.CRM_Фотография.Пустая() Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(ТекущийОбъект.CRM_Фотография, УникальныйИдентификатор);
		// +CRM
		Если ПустаяСтрока(АдресКартинки) Тогда
			ВывестиНедоступностьКартинки();
		КонецЕсли;	
		// -CRM
	Иначе
		АдресКартинки = "";
	КонецЕсли;
	CRM_УправлениеВидимостьюКартинки();
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// CRM_УправлениеДоступом
		МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
		Если МодульУправлениеДоступом <> Неопределено Тогда
			МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		КонецЕсли;
		// Конец CRM_УправлениеДоступом
	Иначе
		// СтандартныеПодсистемы.УправлениеДоступом
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.УправлениеДоступом
	КонецЕсли;
	УстановитьВидимостьРеквизитовКИ();
	
	ДатаКасания = РегистрыСведений.CRM_ДатыКасанийКонтактов.ПолучитьДатуКасания(ТекущийОбъект.Ссылка);
	
	// +CRM Теги
	CRM_Теги.ПриЧтенииНаСервере(ЭтотОбъект, Элементы);
	// -CRM Теги

	CRM_КонтрольЗаполненностиРеквизитовОбъектов.ОтобразитьПроцентЗаполнения(ЭтотОбъект, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ЭтоНовый Тогда
		
		Оповестить("НовоеКонтактноеЛицоЗаписано", Объект.Ссылка, Объект.Владелец);
		
		// +CRM
		Если ЗначениеЗаполнено(CRM_СсылкаНаИсточникДанных) Тогда
			Оповестить("НовоеКонтактноеЛицоЗаписаноСПараметрами", Новый Структура("ИсточникДанных, Данные",
				 CRM_СсылкаНаИсточникДанных, Новый Структура("Клиент, Контакт", Объект.Владелец,
				 Объект.Ссылка)));
		КонецЕсли;
		
		Элементы.ПотенциальныеКлиенты.Доступность = Истина;
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(CRM_ПотенциальныеКлиенты,
			 "КонтактноеЛицо", Объект.Ссылка,
			 Истина);
		// -CRM
		
	Иначе
		Оповестить("КонтактноеЛицоЗаписано", Объект.Ссылка, Объект.Владелец);
	КонецЕсли;
	
	ЭтоНовый = Ложь;
	
	// Попробовать перезаписать владельца для обновления реквизитов заполненности по клиенту
	ПараметрыФормы = Новый Структура("Ключ", Объект.Владелец);
	
	ИмяФормыПартнера = "Справочник.Партнеры.ФормаОбъекта";
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		
		ИмяФормыПартнера = "Справочник.Партнеры.Форма.CRM_Модуль_ФормаЭлементаРеквизитыКонтрагентаНовая";
		
	КонецЕсли; 
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
	// +СофтФон
	Если ЗначениеЗаполнено(сфпЗвонок) Тогда
		Оповестить("ЗаполнитьКонтактВТелефонномЗвонке", Новый Структура("Звонок, Контакт", сфпЗвонок, Объект.Ссылка));						
	КонецЕсли;					
	// Записываем маршрутизацию в АТС.	
	Если сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
		Если НЕ ЗначениеЗаполнено(сфпСтарыйПользовательДляПереключения)
			 И НЕ ЗначениеЗаполнено(Объект.сфпПользовательДляПереключенияЗвонков) Тогда	
			Возврат;
		КонецЕсли;	
		СтарыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(Объект.Ссылка,
			 сфпСтарыйПользовательДляПереключения);
		ПользовательОбновлен	= сфпСофтФонПроСервер.сфпЗаписатьНовогоПользователя(Объект.Ссылка,
			 Объект.сфпПользовательДляПереключенияЗвонков,
			 Истина);
		Если ПользовательОбновлен Тогда
			НовыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(Объект.Ссылка,
				 Объект.сфпПользовательДляПереключенияЗвонков);
			СписокМаршрутизации = сфпСофтФонПроСервер.сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
			сфпСофтФонПроСервер.сфпИзменитьМаршрутизациюВАТС(СписокМаршрутизации);
		КонецЕсли;	
	КонецЕсли;
	// -СофтФон
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения") И ИсточникВыбора.ВладелецФормы = ЭтотОбъект Тогда
		Если ИсточникВыбора.ИмяФормы = Нстр("ru='ОбщаяФорма.сфпПользователиДляПереключения';
			|en='Generalform.sfpUsersFor Switching'")
			 И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
			Объект.сфпПользовательДляПереключенияЗвонков = ВыбранноеЗначение;
			Модифицированность = Истина;
		КонецЕсли;			
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Клиенты.КонтактноеЛицо.ДлительностьСценариев.ВремяРаботыВФорме");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "КОНТАКТНАЯ ИНФОРМАЦИЯ"

// Подключаемый обработчик выбора.
//
// Параметры:
//  Элемент - ПолеФормы
//  ВыбранноеЗначение - Строка
//  СтандартнаяОбработка - Булево
//
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение,
		 Элемент.Имя,
		 СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора,
	 ПараметрыПолученияДанных, Ожидание,
	 СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора,
		 ПараметрыПолученияДанных, Ожидание,
		 СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
		// Если это адрес электронной почты, то надо проверить на коррректность заполнения.
		РезультатПроверки = МодульУправлениеКонтактнойИнформациейКлиент.CRM_ПолучитьТипПроверитьЗаполнение(ЭтотОбъект, Элемент);
		Если НЕ РезультатПроверки = Неопределено И РезультатПроверки.КодОшибки <> 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
		КонецЕсли;
		
		// +CRM
		ДополнительныеПараметры = Новый Структура("Элемент", Элемент);
		ОповещениеВыполнитьПоискДублейПоЗначению = Новый ОписаниеОповещения("ВыполнитьПоискДублейПоЗначениюКИ",
			 ЭтотОбъект,
			 ДополнительныеПараметры);
		МодульУправлениеКонтактнойИнформациейКлиент.ВыполнитьПоискДублейПоЗначению(ЭтотОбъект, Элемент,
			 ОповещениеВыполнитьПоискДублейПоЗначению);
		// -CRM
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	CRM_УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя, Объект.Ссылка);
КонецПроцедуры

&НаСервере
// BSLLS:ServerSideExportFormMethod-off
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт // АПК:78 - исключить из проверки.
// BSLLS:ServerSideExportFormMethod-on
	CRM_УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
	Подключаемый_ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзмененииАдресаЭлектроннойПочты(Элемент)
	
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.КодОшибки <> 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ФамилияПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	Объект.CRM_Фамилия = CRM_КлиентыКлиент.ПривестиФИОКСтандартномуВиду(Объект.CRM_Фамилия);

	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текФамилия) И текФамилия <> СокрЛП(Объект.CRM_Фамилия)) 
			 Или (ПустаяСтрока(Объект.CRM_Фамилия) И Не ПустаяСтрока(текФамилия)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текФамилия, СокрЛП(Объект.CRM_Фамилия)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
			
			Объект.Наименование = СокрЛП(Объект.CRM_Фамилия);
			
		ИначеЕсли Не ПустаяСтрока(Объект.CRM_Фамилия) И ПустаяСтрока(текФамилия) Тогда
			
			Объект.Наименование = СокрЛП(?(ЗначениеЗаполнено(Объект.CRM_Фамилия),   СокрЛП(Объект.CRM_Фамилия) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Имя), 		 СокрЛП(Объект.CRM_Имя) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Отчество),  СокрЛП(Объект.CRM_Отчество), ""));
			
		КонецЕсли;
		
	КонецЕсли;
	
	текФамилия = СокрЛП(Объект.CRM_Фамилия);
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект, Ложь);	
	Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	
	ВыполнитьПоискДублейПоЗначению(Объект.CRM_Фамилия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИмяПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	Объект.CRM_Имя = CRM_КлиентыКлиент.ПривестиФИОКСтандартномуВиду(Объект.CRM_Имя);
	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текИмя) И текФамилия <> СокрЛП(Объект.CRM_Имя)) 
			 Или (ПустаяСтрока(Объект.CRM_Имя) И Не ПустаяСтрока(текИмя)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текИмя, СокрЛП(Объект.CRM_Имя)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
			
			Объект.Наименование = СокрЛП(Объект.CRM_Имя);
			
		ИначеЕсли Не ПустаяСтрока(Объект.CRM_Имя) И ПустаяСтрока(текИмя) Тогда
			
			Объект.Наименование = СокрЛП((?(ЗначениеЗаполнено(Объект.CRM_Фамилия), 	 СокрЛП(Объект.CRM_Фамилия) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Имя), 		 СокрЛП(Объект.CRM_Имя) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Отчество),  СокрЛП(Объект.CRM_Отчество), "")));   
			
		КонецЕсли;
		
	КонецЕсли;
	
	текИмя = СокрЛП(Объект.CRM_Имя);
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект, Ложь);	
	Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	
	// Определим пол
	Если Не ЗначениеЗаполнено(Объект.Пол) Тогда
		
		Объект.Пол = CRM_КлиентыКлиент.ОпределитьПол(Объект.CRM_Имя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОтчествоПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	Объект.CRM_Отчество = CRM_КлиентыКлиент.ПривестиФИОКСтандартномуВиду(Объект.CRM_Отчество);
	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текОтчество) И текОтчество <> СокрЛП(Объект.CRM_Отчество)) 
			Или (ПустаяСтрока(Объект.CRM_Отчество) И Не ПустаяСтрока(текОтчество)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текОтчество, СокрЛП(Объект.CRM_Отчество)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
		
			Объект.Наименование = СокрЛП(Объект.CRM_Отчество);
	
		ИначеЕсли Не ПустаяСтрока(Объект.CRM_Отчество) И ПустаяСтрока(текОтчество) Тогда

			Объект.Наименование = Объект.Наименование + " " + СокрЛП(Объект.CRM_Отчество);
			
		КонецЕсли;
						
	КонецЕсли;
	
	текОтчество = СокрЛП(Объект.CRM_Отчество);
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект, Ложь);	
	Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАвторДатаОбработкаНавигационнойСсылки(Элемент,
	 НавигационнаяСсылкаФорматированнойСтроки,
	 СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.Автор);
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлыЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

// +CRM
&НаСервере
Процедура СвязатьСНовымФизЛицом(ФизЛицо)
	Если ЗначениеЗаполнено(Объект.Ссылка) И ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.Партнеры")
		 И ФизЛицо.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
		ЗаполнитьПоФизЛицу(ФизЛицо);
		РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ЗаписатьФизЛицо(Объект.Ссылка, ФизЛицо);
		Элементы.ГруппаРедактированиеФИО.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры
// -CRM

&НаСервере
Процедура ЗаполнитьПоФизЛицу(ФизЛицо)
	Если ФизЛицо.ЭтоГруппа Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Выберите элемент,
			| а не группу!';en='Select item,
			| instead of group!'"));
		Возврат;
	КонецЕсли;
	
	Если ФизЛицо.ЮрФизЛицо <> ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Вид клиента должен быть ""Физическое лицо""!';
			|en='The type of customer should be ""Individual""!'"));
		Возврат;
	КонецЕсли;
	
	CRM_ФизЛицо = ФизЛицо;
	
	Объект.Пол				= ФизЛицо.Пол;
	Объект.CRM_Фамилия		= ФизЛицо.CRM_Фамилия;
	Объект.CRM_Имя			= ФизЛицо.CRM_Имя;
	Объект.CRM_Отчество		= ФизЛицо.CRM_Отчество;
	Объект.Наименование		= ФизЛицо.Наименование;
	
	Элементы.Пол.ТолькоПросмотр				= Истина;
	Элементы.CRM_Фамилия.ТолькоПросмотр			= Истина;
	Элементы.CRM_Имя.ТолькоПросмотр				= Истина;
	Элементы.CRM_Отчество.ТолькоПросмотр		= Истина;
	Элементы.НаименованиеВыбор.ТолькоПросмотр		= Истина;
	
	Для Каждого СтрокаТаблицы Из ФизЛицо.КонтактнаяИнформация Цикл
		ТекТипКИ = Неопределено;
		ТекВидКИ = Неопределено;
		Если СтрокаТаблицы.Вид = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица Тогда
			ТекТипКИ = СтрокаТаблицы.Тип;
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица;
		ИначеЕсли СтрокаТаблицы.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера Тогда
			ТекТипКИ = СтрокаТаблицы.Тип;
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		ИначеЕсли СтрокаТаблицы.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера Тогда
			ТекТипКИ = СтрокаТаблицы.Тип;
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекТипКИ) И ЗначениеЗаполнено(ТекВидКИ) Тогда
			НайденныеСтроки = ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"].НайтиСтроки(Новый Структура("Тип,
				|Вид", ТекТипКИ,
				 ТекВидКИ));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, НайденныеСтроки[0].ИмяРеквизита) Тогда
					ЭтотОбъект[НайденныеСтроки[0].ИмяРеквизита] = СтрокаТаблицы.Представление;
				КонецЕсли;
				Элемент = Элементы.Найти(НайденныеСтроки[0].ИмяРеквизита);
				Если Элемент <> Неопределено Тогда
					Элемент.ТолькоПросмотр = Истина;
				КонецЕсли;
				НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, , "Вид");
				НоваяСтрока.Вид = ТекВидКИ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьВидимостьРеквизитовКИ();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Наименование".
//
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Если Элемент.Имя = "Наименование" Тогда
	//	Элементы.ГруппаРедактированиеФИО.Показать();
	// Иначе
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ЮрФизЛицо",
			 ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо")));
		ОписаниеОповещения = Новый ОписаниеОповещения("НаименованиеНачалоВыбораЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , ,
			 ОписаниеОповещения,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Наименование".
//
Процедура НаименованиеНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Партнеры") И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ЗаполнитьПоФизЛицу(ВыбранноеЗначение);
		Элементы.ГруппаРедактированиеФИО.Видимость = Ложь;
		Элементы.ФизЛицо.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Если Не ПредставлениеВыбраноИзСписка Тогда
		
		СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект, Ложь);	
		Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "Наименование".
//
Процедура НаименованиеПриИзменении(Элемент)
	РедактированиеПредставления = Истина;
	Если НЕ РедактированиеФИО И НЕ ПредставлениеВыбраноИзСписка Тогда
		ФИО = Объект.Наименование;
		СтруктураЗаполнения = ЗаполнитьФИОНаСервере();
		ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения);
	КонецЕсли;
	
	ВыполнитьПоискДублейПоЗначению(Объект.Наименование, Элемент);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Открытие" поля ввода "Наименование".
//
Процедура НаименованиеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(CRM_ФизЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Клиенты.Клиент.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НаименованиеОткрытиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.Партнеры.ФормаОбъекта", Новый Структура("Ключ", CRM_ФизЛицо), ЭтотОбъект,
		 , , , ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Открытие" поля ввода "Наименование".
//
Процедура НаименованиеОткрытиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ЗаполнитьПоФизЛицу(CRM_ФизЛицо);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Наименование".
//
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПредставлениеВыбраноИзСписка = Истина;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "АвтоПодбор" поля ввода "Наименование".
//
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	МассивПредставлений = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект, Ложь);
	Если МассивПредставлений.Количество() > 0 Тогда
		Если ДанныеВыбора = Неопределено Тогда
			ДанныеВыбора = Новый СписокЗначений();
		КонецЕсли;
		Для Каждого тДанные Из МассивПредставлений Цикл
			ДанныеВыбора.Вставить(0, тДанные, тДанные);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура сфпПользовательДляПереключенияЗвонковОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(ВыбранноеЗначение, Истина)) Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='У выбранного пользователя не заполнен текущий внутренний номер,
			| маршрутизация невозможна.';en='The selected user does not have the current internal number,
			| routing is not possible.'"));
	КонецЕсли;		
КонецПроцедуры

// Механизм картинок
&НаКлиенте
Процедура ФайлКартинкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.CRM_Фотография) Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
		// +CRM
		Если ПустаяСтрока(АдресКартинки) Тогда
			ВывестиНедоступностьКартинки();
		КонецЕсли;	
		// -CRM
	Иначе
		АдресКартинки = "";
	КонецЕсли;
	CRM_УправлениеВидимостьюКартинки();			
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?';
			|en='To select an image,
			| write the object. Write?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект),
			 ТекстВопроса,
			 РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Если Не Записать() Тогда
            Возврат;
        КонецЕсли;
    Иначе
        Возврат;
    КонецЕсли;
    
    ДобавитьИзображениеНаКлиентеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
	
	Перем ИдентификаторФайла;
	
	ВыборИзображения   = Истина;
	ИдентификаторФайла = Новый УникальныйИдентификатор;
	
	РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла,
		 CRM_ОбщегоНазначенияКлиент.ФильтрФайловИзображений());
	#Если НЕ ВебКлиент Тогда
		ВыборИзображения   = Ложь;
	#КонецЕсли
	
	CRM_УправлениеВидимостьюКартинки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл(ИмяРеквизитаОбъекта, ИмяРеквизитаФормы, ТекстСообщенияОбОшибке)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(
			РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
				ЭтотОбъект.Объект[ИмяРеквизитаОбъекта],
				УникальныйИдентификатор));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке, , ИмяРеквизитаФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	Объект.CRM_Фотография = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеровПрисоединенныеФайлы.ПустаяСсылка");
	АдресКартинки = "";
	ДанныеФайлаКартинки = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл("CRM_Фотография", "АдресКартинки",
		НСтр("ru='Отсутствует изображение для просмотра';en='No image to view'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.CRM_Фотография) Тогда
		
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.CRM_Фотография);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования';en='No image to edit'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "АдресКартинки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(Команда)
	
	СтруктураПараметрыВыбора =
		Новый Структура("ВладелецФайла, ЗакрыватьПриВыборе, РежимВыбора", Объект.Ссылка, Истина, Истина);

	ОткрытьФорму(
		"Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
		СтруктураПараметрыВыбора, , , , ,
		Новый ОписаниеОповещения("ВыбратьКартинкуИзПрисоединенныхФайловЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайловЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ЗначениеЗаполнено(Результат) Тогда
        Объект.CRM_Фотография = Результат;
        АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
    КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		АдресКартинки = РаботаСФайлами.ДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции

&НаСервере
Процедура CRM_УправлениеВидимостьюКартинки()
	Элементы.АдресКартинки.Видимость = ЗначениеЗаполнено(АдресКартинки);		
	Элементы.КомандаУстановитьЛогоФото.Видимость = НЕ ЗначениеЗаполнено(АдресКартинки);		
КонецПроцедуры

// +CRM

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(СпозиционироватьсяНаРеквизите) Тогда
		Если ТипЗнч(СпозиционироватьсяНаРеквизите) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			Для Каждого СтрокаТаблицы Из ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"] Цикл
				Если СтрокаТаблицы.Вид = СпозиционироватьсяНаРеквизите Тогда
					ТекущийЭлемент = Элементы.Найти(СтрокаТаблицы.ИмяРеквизита);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(СпозиционироватьсяНаРеквизите) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
			Для Каждого СтрокаТаблицы Из ЭтотОбъект["Свойства_ОписаниеДополнительныхРеквизитов"] Цикл
				Если СтрокаТаблицы.Свойство = СпозиционироватьсяНаРеквизите Тогда
					ТекущийЭлемент = Элементы.Найти(СтрокаТаблицы.ИмяРеквизитаЗначение);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(СпозиционироватьсяНаРеквизите) = Тип("Строка") Тогда
			ТекущийЭлемент = Элементы.Найти(СпозиционироватьсяНаРеквизите);
		КонецЕсли;
	КонецЕсли;
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект, Ложь);
	Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	// +CRM
	CRM_ЗаполнитьКлючевыеСобытия();
	// -CRM
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЛентаСобытий
	БыстрыйВвод_КэшированноеВремя = 0;
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	БыстрыйВвод_АктивенАвтоПодбор = Ложь;
	Лента_Прокрутить = Ложь;
	// Конец ЛентаСобытий
	
	// +CRM
	ПодключитьОбработчикОжидания("CRM_ОбновитьГруппуПотенциальныеКлиенты", 0.1, Истина);
	Если ПрозвонитьМессенджерыПриОткрытии Тогда
		ПодключитьОбработчикОжидания("ПрозвонитьВсеТелефоныФормы", 0.1, Истина);
	КонецЕсли;
	// -CRM
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Клиенты.КонтактноеЛицо.ДлительностьСценариев.ВремяРаботыВФорме");
	
КонецПроцедуры

// +CRM

&НаКлиенте
// Процедура - обработчик события формы "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	// Проверяем заполнен ли хотя бы один вид контактной информации.
	КонтактнаяИнформацияЗаполнена = Ложь;
	Для Каждого ЭлементКоллекции Из ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"] Цикл
		Если НЕ ПустаяСтрока(ЭлементКоллекции.Представление) Тогда
			КонтактнаяИнформацияЗаполнена = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	// Обрабатываем отдельный случай, когда контакт заполнен по физ. лицу
	Если НЕ КонтактнаяИнформацияЗаполнена И ЗначениеЗаполнено(CRM_ФизЛицо) Тогда 
		Если Объект.КонтактнаяИнформация.Количество() > 0 Тогда
			КонтактнаяИнформацияЗаполнена = Истина;
		КонецЕсли;
	КонецЕсли;		
	Если НЕ КонтактнаяИнформацияЗаполнена
		 И НЕ Объект.CRM_Состояние = ПредопределенноеЗначение("Перечисление.CRM_Состояние.Уволен")
		 И НЕ РазрешитьЗаписьБезКИ() Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен ни один вид контактной информации.';
			|en='No contact information is complete.'"));
		Отказ = Истина;
	КонецЕсли;	
	
	// Проверка дублей 
	Если CRM_ПродолжитьВводНового Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ВыполнятьПоискДублейПриЗаписиКонтакта() Тогда 
		НайтиДублиКонтакта(Истина, Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

&НаСервереБезКонтекста
Функция ВыполнятьПоискДублейПриЗаписиКонтакта()
	
	Возврат Константы.CRM_ВыполнятьПоискДублейПриЗаписиКонтакта.Получить();
	
КонецФункции

&НаСервере
// Функция возвращает массив видов ключевых событий.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//   Массив	- Массив видов ключевых событий.
//
Функция CRM_ПолучитьМассивВидовКлючевыхСобытий()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ВидыКлючевыхСобытий.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.CRM_ВидыКлючевыхСобытий КАК CRM_ВидыКлючевыхСобытий
	               |ГДЕ
	               |	НЕ CRM_ВидыКлючевыхСобытий.ПометкаУдаления";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции // CRM_ПолучитьМассивВидовКлючевыхСобытий()

&НаСервере
Процедура CRM_ЗаполнитьКлючевыеСобытияНаСервере()
	МассивВидовКлючевыхСобытий = CRM_ПолучитьМассивВидовКлючевыхСобытий();
	Для Каждого ЭлементМассива Из МассивВидовКлючевыхСобытий Цикл
		СтруктураОтбора = Новый Структура("ВидСобытия", ЭлементМассива);
		НайденныеСтроки = Объект.CRM_КлючевыеСобытия.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.CRM_КлючевыеСобытия.Добавить();
			НоваяСтрока.ВидСобытия			= ЭлементМассива;
			НоваяСтрока.НапоминатьОСобытии	= Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
// Процедура заполняет ТЧ "Ключевые события".
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьКлючевыеСобытия()
	CRM_ЗаполнитьКлючевыеСобытияНаСервере();
КонецПроцедуры // CRM_ЗаполнитьКлючевыеСобытия()	

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы формы "CRM_КлючевыеСобытия".
//
Процедура CRM_КлючевыеСобытияПриАктивизацииСтроки(Элемент)
	ТД = Элементы.CRM_КлючевыеСобытия.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Элементы.CRM_КлючевыеСобытияНапоминатьОСобытии.ТолькоПросмотр = Истина;
	Иначе
		Элементы.CRM_КлючевыеСобытияНапоминатьОСобытии.ТолькоПросмотр = НЕ ЗначениеЗаполнено(ТД.ДатаСобытия); 	
	КонецЕсли;
КонецПроцедуры // CRM_КлючевыеСобытияПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы формы "CRM_КлючевыеСобытия".
//
Процедура CRM_КлючевыеСобытияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры // CRM_КлючевыеСобытияПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы формы "CRM_КлючевыеСобытия".
//
Процедура CRM_КлючевыеСобытияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // CRM_КлючевыеСобытияПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" колонки "ДатаСобытия" таблицы формы "CRM_КлючевыеСобытия".
//
Процедура CRM_КлючевыеСобытияДатаСобытияПриИзменении(Элемент)
	ТД = Элементы.CRM_КлючевыеСобытия.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Элементы.CRM_КлючевыеСобытияНапоминатьОСобытии.ТолькоПросмотр = Истина;
	Иначе
		Элементы.CRM_КлючевыеСобытияНапоминатьОСобытии.ТолькоПросмотр = НЕ ЗначениеЗаполнено(ТД.ДатаСобытия); 	
	КонецЕсли;
КонецПроцедуры // CRM_КлючевыеСобытияДатаСобытияПриИзменении()

&НаСервере
// Функция возвращает структуру поиска контактов.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Структура	- Структура поиска контактов.
//
Функция CRM_СоздатьСтруктуруПоискаКонтактов()
	CRM_РеквизитыПоискаДублейКонтактов = Новый СписокЗначений;
	
	Если Константы.CRM_ИскатьДублиТолькоПоПолномуСовпадению.Получить() Тогда
		CRM_РеквизитыПоискаДублейКонтактов.Добавить("Наименование;=", "Наименование");
	Иначе
		CRM_РеквизитыПоискаДублейКонтактов.Добавить("Наименование;ПОДОБНО", "Наименование");
	КонецЕсли;
	
	CRM_РеквизитыПоискаДублейКонтактов.Добавить("Контакт_Телефон;=", "Телефон");
	CRM_РеквизитыПоискаДублейКонтактов.Добавить("Контакт_АдресЭлектроннойПочты;=", "Email");
	СтруктураПоиска = Новый Структура;
	Для Каждого СтрокаСписка Из CRM_РеквизитыПоискаДублейКонтактов Цикл
		Значение = СтрокаСписка.Значение;
		ТочкаСЗапятой = СтрНайти(Значение, ";");
		СтруктураПоиска.Вставить(Сред(Значение, 1, ТочкаСЗапятой - 1), Сред(Значение, ТочкаСЗапятой + 1));
	КонецЦикла;
	Возврат СтруктураПоиска;
КонецФункции // CRM_СоздатьСтруктуруПоискаКонтактов()

&НаКлиенте
// Процедура - обработчик результата поиска дублей.
//
// Параметры:
//	РезультатЗакрытия		- Структура	- Результат закрытия формы.
//	ДополнительныеПараметры	- Структура	- Структура дополнительных параметров.
//
Процедура CRM_ОбработатьРезультатПоискаДублейКонтакта(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Если РезультатЗакрытия.Свойство("Результат") Тогда
			Если РезультатЗакрытия.Результат = "Продолжить" Тогда
				CRM_ПродолжитьВводНового = Истина;
				Если Записать() Тогда
					Закрыть();
				КонецЕсли;
			ИначеЕсли РезультатЗакрытия.Результат = "Перейти" Тогда
				ДополнительныеПараметры = Новый Структура("Ключ", РезультатЗакрытия.Объект);
				// ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", ДополнительныеПараметры);
				ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОткрытьНайденныйКонтакт",
					 CRM_ОбщегоНазначенияКлиент,
					 ДополнительныеПараметры);
				Модифицированность	= Ложь;
				Закрыть();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // CRM_ОбработатьРезультатПоискаДублейКонтакта() 	

&НаКлиенте
Процедура CRM_НайтиДублиКонтакта(Команда)
	НайтиДублиКонтакта();
КонецПроцедуры // CRM_НайтиДублиКонтакта()

&НаКлиенте
// Процедура находит дубли реквизитов контакта.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Наличие дублей
//
Процедура НайтиДублиКонтакта(ПриЗаписи = Ложь, Отказ = Неопределено)
	СтруктураПоиска = CRM_СоздатьСтруктуруПоискаКонтактов();
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Наименование", Элементы.НаименованиеВыбор.ТекстРедактирования);
	СписокКонтактов = Новый СписокЗначений;
	Для Каждого СтрокаКИ Из ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"] Цикл
		Если ЗначениеЗаполнено(СтрокаКИ.Представление) Тогда
			Если СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
				СписокКонтактов.Добавить("Телефон", СтрокаКИ.Представление);
			ИначеЕсли СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
				СписокКонтактов.Добавить("АдресЭлектроннойПочты", СтрокаКИ.Представление);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	ПараметрыФормы = Новый Структура("СтруктураПоиска, СписокКонтактов, СтруктураОбъекта, Контакт,
		| Клиент", СтруктураПоиска, СписокКонтактов, СтруктураОбъекта, Объект.Ссылка,
		 Объект.Владелец);
	Если ПриЗаписи И НЕ ЕстьДублиКонтакта(ПараметрыФормы) Тогда
		Возврат;
	Иначе	
	    Отказ = Истина;
	КонецЕсли;
	ДополнительныеПараметры	= Новый Структура;
	ОповещениеПоиска		= Новый ОписаниеОповещения("CRM_ОбработатьРезультатПоискаДублейКонтакта",
		 ЭтотОбъект,
		 ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.CRM_ФормаНайденныхДублейКонтакта", ПараметрыФормы, ЭтотОбъект, ,
		 ВариантОткрытияОкна.ОтдельноеОкно, ,
		 ОповещениеПоиска);
КонецПроцедуры // CRM_НайтиДублиКонтакта()

&НаСервереБезКонтекста
Функция ЕстьДублиКонтакта(ПараметрыПоиска)
	Возврат CRM_КлиентыСервер.ЕстьДублиКонтакта(ПараметрыПоиска.СтруктураОбъекта, ПараметрыПоиска.СтруктураПоиска,
			ПараметрыПоиска.СписокКонтактов, ПараметрыПоиска.Контакт, ПараметрыПоиска.Клиент); 
КонецФункции

#Область ЛентаСобытий

// Процедура - обработчик события "ОбработкаКомандыЛенты".
&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыЛенты(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	ДополнительныеПараметры = Новый Структура;
	СписокКоманд = Новый СписокЗначений;
	ИмяКоманды = СтрЗаменить(Элемент.Имя, "ОбычныйВвод_", "");
	СписокКоманд.Добавить(ИмяКоманды, Элемент.Заголовок); 
	ОбычныйВвод_ПоказатьЕщеЗавершение(СписокКоманд[0], ДополнительныеПараметры);	
КонецПроцедуры

&НаКлиенте
Процедура Лента_HTMLДокументСформирован(Элемент)
	
	Если Лента_HTML_ПозицияОтКрая <> 0 Тогда
		Смещение = Элементы.Лента_HTML.Документ.getElementById("scollable-wrap").scrollHeight - Лента_HTML_ПозицияОтНачала;
		Элементы.Лента_HTML.Документ.getElementById("scollable-wrap").scrollTop = Лента_HTML_ПозицияОтКрая + Смещение;
		Лента_HTML_ПозицияОтКрая = 0;
		Лента_HTML_ПозицияОтНачала = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСсылки = ДанныеСобытия.href;
	Если Не ЗначениеЗаполнено(ДанныеСсылки) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаКоманд = CRM_ЛентаСобытийКлиент.ИменаКомандОбъектовЛенты();
	
	Для Каждого ИмяКоманды Из ИменаКоманд Цикл
		ПозицияРазделителя = СтрНайти(ДанныеСсылки, ИмяКоманды);
		Если ПозицияРазделителя > 0 Тогда
			Если ИмяКоманды = "ОбъектЛенты_Закрепить_" Или ИмяКоманды = "ОбъектЛенты_Открепить_" Тогда
				Лента_HTML_ПозицияОтКрая = Элементы.Лента_HTML.Документ.getElementById("scollable-wrap").scrollTop;
				Лента_HTML_ПозицияОтНачала = Элементы.Лента_HTML.Документ.getElementById("scollable-wrap").scrollHeight;
			КонецЕсли;
			ПараметрКоманды = Сред(ДанныеСсылки, ПозицияРазделителя + СтрДлина(ИмяКоманды));
			CRM_ЛентаСобытийКлиент.ВыполнитьКомандуЛенты(ИмяКоманды, ПараметрКоманды, ЭтотОбъект);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ПозицияРазделителя = СтрНайти(ДанныеСсылки, "ЛентаЗагрузитьЕще");
	Если ПозицияРазделителя > 0 Тогда
		Лента_КоличествоОбъектовИстории = Лента_КоличествоОбъектовИстории + 50;
		Лента_Прокрутить = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект = CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуИзНавигационной(ДанныеСсылки);
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.CRM_Диалоги") Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.АРМДиалоги.ОткрытиеВОдинКлик.ПереходИзЛентыКарточкиКонтактногоЛица");
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента",
			 Новый Структура("Ключ", СсылкаНаОбъект),
			 ЭтотОбъект);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента",
			 Новый Структура("Ключ", СсылкаНаОбъект),
			 ЭтотОбъект);
	Иначе
		Попытка
			ПозицияНайденного = СтрНайти(ДанныеСсылки, "e1cib/");
			ДлинаСсылкиВнутр  = СтрДлина(ДанныеСсылки) + 1 - ПозицияНайденного;
			НавигационнаяСсылка = Прав(ДанныеСсылки, ДлинаСсылкиВнутр);
			ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
		Исключение
			// Обработка не требуется.
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ОтборВсеСобытияПриИзменении(Элемент)
	
	НастройкаВсеСобытия = Лента_Отбор.Получить(0);
	ПометкаВсеСобытия = НастройкаВсеСобытия.Пометка;
	Для Сч = 1 По Лента_Отбор.Количество() - 1 Цикл
		НастройкаОтбора = Лента_Отбор.Получить(Сч);
		НастройкаОтбора.Пометка = ПометкаВсеСобытия;
	КонецЦикла;
	
	Если НастройкаВсеСобытия.Пометка Тогда
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрНеактивный;
	Иначе
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрАктивный;
	КонецЕсли;
	
	CRM_ЛентаСобытий.СохранитьОтборЛенты(Лента_Отбор, "ЛентаКонтакта");
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Лента_ОтборПриИзменении(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "Лента_Отбор_", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_Пометка", "");
	
	Если ИмяЭлемента = "Звонки" Или ИмяЭлемента = "Письма" Тогда
		ЭлементСписка = Лента_Отбор.НайтиПоЗначению(ИмяЭлемента);
		ЭлементСпискаВходящие = Лента_Отбор.НайтиПоЗначению("Входящие" + ИмяЭлемента);
		ЭлементСпискаИсходящие = Лента_Отбор.НайтиПоЗначению("Исходящие" + ИмяЭлемента);
		ЭлементСпискаВходящие.Пометка = ЭлементСписка.Пометка;
		ЭлементСпискаИсходящие.Пометка = ЭлементСписка.Пометка;
	КонецЕсли;
	
	Если СтрНайти(ИмяЭлемента, "Входящие") > 0 Тогда
		ИмяРодителя = СтрЗаменить(ИмяЭлемента, "Входящие", "");
		ЭлементСписка = Лента_Отбор.НайтиПоЗначению(ИмяРодителя);
		ЭлементСпискаВходящие = Лента_Отбор.НайтиПоЗначению("Входящие" + ИмяРодителя);
		ЭлементСпискаИсходящие = Лента_Отбор.НайтиПоЗначению("Исходящие" + ИмяРодителя);
		ЭлементСписка.Пометка = Макс(ЭлементСпискаВходящие.Пометка, ЭлементСпискаИсходящие.Пометка);
	КонецЕсли;
	
	Если СтрНайти(ИмяЭлемента, "Исходящие") > 0 Тогда
		ИмяРодителя = СтрЗаменить(ИмяЭлемента, "Исходящие", "");
		ЭлементСписка = Лента_Отбор.НайтиПоЗначению(ИмяРодителя);
		ЭлементСпискаВходящие = Лента_Отбор.НайтиПоЗначению("Входящие" + ИмяРодителя);
		ЭлементСпискаИсходящие = Лента_Отбор.НайтиПоЗначению("Исходящие" + ИмяРодителя);
		ЭлементСписка.Пометка = Макс(ЭлементСпискаВходящие.Пометка, ЭлементСпискаИсходящие.Пометка);
	КонецЕсли;
	
	ПометкаСобытие = Истина;
	Для Сч = 1 По Лента_Отбор.Количество() - 1 Цикл
		НастройкаОтбора = Лента_Отбор.Получить(Сч);
		ПометкаСобытие = Мин(ПометкаСобытие, НастройкаОтбора.Пометка);
	КонецЦикла;
	НастройкаВсеСобытия = Лента_Отбор.Получить(0);
	НастройкаВсеСобытия.Пометка = ПометкаСобытие;
	
	Если НастройкаВсеСобытия.Пометка Тогда
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрНеактивный;
	Иначе
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрАктивный;
	КонецЕсли;
	
	CRM_ЛентаСобытий.СохранитьОтборЛенты(Лента_Отбор, "ЛентаКонтакта");
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ЗакрепленныеСверхуПриИзменении(Элемент)
	
	НастройкаВсеСобытия = Лента_Отбор.Получить(0);
	
	Если НастройкаВсеСобытия.Пометка И Не Лента_ЗакрепленныеСверху Тогда
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрНеактивный;
	Иначе
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрАктивный;
	КонецЕсли;
	
	СохранитьЗначениеЗакрепленныеСверху();
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначениеЗакрепленныеСверху()
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("CRM_ЛентаСобытий_ЗакрепленныеСверху",
		"ЛентаКонтакта", Лента_ЗакрепленныеСверху);
КонецПроцедуры

#КонецОбласти

#Область ОбластьВвода

// Общее

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаПриИзменении(Элемент = Неопределено)
	
	Если БыстрыйВвод_ДатаНачала = НачалоДня(БыстрыйВвод_ДатаНачала) И БыстрыйВвод_КэшированноеВремя > 0 Тогда
		БыстрыйВвод_ДатаНачала = БыстрыйВвод_ДатаНачала + БыстрыйВвод_КэшированноеВремя;
		БыстрыйВвод_КэшированноеВремя = 0;
	КонецЕсли;
	
	Если НачалоДня(БыстрыйВвод_КэшированнаяДатаНачала) = НачалоДня(БыстрыйВвод_ДатаОкончания) Тогда
		ВремяЗавершения = БыстрыйВвод_ДатаОкончания - НачалоДня(БыстрыйВвод_ДатаОкончания);
		БыстрыйВвод_ДатаОкончания = НачалоДня(БыстрыйВвод_ДатаНачала) + ВремяЗавершения;
	КонецЕсли;
	
	Если БыстрыйВвод_ДатаНачала > БыстрыйВвод_ДатаОкончания Тогда
		
		СрокПоУмолчанию = 3600;
		Если БыстрыйВвод_ТекущийТипОбъекта = "Взаимодействие" Тогда
			СрокПоУмолчанию = 1800;
		КонецЕсли;
			
		БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + СрокПоУмолчанию;
		БыстрыйВвод_ЗадачаВариантСрока = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.ЧерезЧас");
	КонецЕсли;
	
	ПроверитьКорректностьДатыОкончания();
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	Если ЗначениеЗаполнено(БыстрыйВвод_ДатаНачала) Тогда
		ПараметрыОткрытия.Вставить("ДатаПоУмолчанию", БыстрыйВвод_ДатаНачала);
	КонецЕсли;
	ПараметрыОткрытия.Вставить("ДанныеБыстрогоВвода",
		 CRM_ЛентаСобытийКлиент.ДанныеЗаполненияОбъектаБыстрогоВвода("ЛентаКонтакта",
		 БыстрыйВвод_ТекущийТипОбъекта,
		 ЭтотОбъект));
	БыстрыйВвод_КэшированноеВремя = БыстрыйВвод_ДатаНачала - НачалоДня(БыстрыйВвод_ДатаНачала);
	CRM_ВзаимодействияКлиент.ДатаВзаимодействияНачалоВыбора(Объект, Элемент, ДанныеВыбора,
		СтандартнаяОбработка, ПараметрыОткрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ЭтоРезультатРаботыСКалендарем") Тогда
			СтандартнаяОбработка = Ложь;
			
			БыстрыйВвод_ДатаНачала = ВыбранноеЗначение.Начало;
			БыстрыйВвод_ДатаОкончания = ВыбранноеЗначение.Конец;
			
			БыстрыйВвод_ДатаНачалаПриИзменении();
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.CRM_ВариантыУстановкиДаты") Тогда
		СтандартнаяОбработка = Ложь;
		
		ДлительностьИнтервала = БыстрыйВвод_ДатаОкончания - БыстрыйВвод_ДатаНачала;
		
		Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.Вручную") Тогда
			ОписаниеОповещения	= Новый ОписаниеОповещения(
				"БыстрыйВвод_ДатаНачалаОбработкаВыбораЗавершение", ЭтотОбъект, ДлительностьИнтервала);
			ОткрытьФорму("ОбщаяФорма.CRM_ФормаРучногоПереносаВремени", , ЭтотОбъект, КлючУникальности, , , ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			// Осуществляется перенос обеих дат на указанный интервал
			БыстрыйВвод_ДатаНачала = CRM_ОбщегоНазначенияСервер.ДатаПоВариантуИнтервала(
				CRM_ОбщегоНазначенияСервер.БазоваяДатаПоВариантуИнтервала(БыстрыйВвод_ДатаНачала, ВыбранноеЗначение),
				ВыбранноеЗначение);
			
			БыстрыйВвод_ДатаОкончания = CRM_ОбщегоНазначенияСервер.ДатаПоВариантуИнтервала(
				CRM_ОбщегоНазначенияСервер.БазоваяДатаПоВариантуИнтервала(БыстрыйВвод_ДатаОкончания, ВыбранноеЗначение),
				ВыбранноеЗначение, ДлительностьИнтервала);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		БыстрыйВвод_ДатаНачала = Результат;
		БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + ДополнительныеПараметры;
	КонецЕсли;
	
КонецПроцедуры // БыстрыйВвод_ДатаНачалаОбработкаВыбораЗавершение()

&НаКлиенте
Процедура БыстрыйВвод_ВремяНачалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ВремяНачалаНачалоВыбораЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, БыстрыйВвод_ДатаНачала,
		Элемент, БыстрыйВвод_ДатаНачала, Ложь, ОповещениеЗавершения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяНачалаНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ДатаНачала = ВыбранныйЭлемент.Значение;
	БыстрыйВвод_ДатаНачалаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаОкончанияПриИзменении(Элемент)
	
	Если БыстрыйВвод_ДатаНачала > БыстрыйВвод_ДатаОкончания Тогда
		
		СрокПоУмолчанию = 3600;
		Если БыстрыйВвод_ТекущийТипОбъекта = "Взаимодействие" Тогда
			СрокПоУмолчанию = 1800;
		КонецЕсли;
		
		БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + СрокПоУмолчанию;
		БыстрыйВвод_ЗадачаВариантСрока = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.ЧерезЧас");
	КонецЕсли;
	ПроверитьКорректностьДатыОкончания();
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаОкончанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.CRM_ВариантыУстановкиДаты") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.Вручную") Тогда
			ОписаниеОповещения	= Новый ОписаниеОповещения("БыстрыйВвод_ДатаОкончанияОбработкаВыбораЗавершение", ЭтотОбъект);
			ОткрытьФорму("ОбщаяФорма.CRM_ФормаРучногоПереносаВремени", , ЭтотОбъект, КлючУникальности, , , ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			БыстрыйВвод_ДатаОкончания = CRM_ОбщегоНазначенияСервер.ДатаПоВариантуИнтервала(
				CRM_ОбщегоНазначенияСервер.БазоваяДатаПоВариантуИнтервала(БыстрыйВвод_ДатаОкончания, ВыбранноеЗначение),
				ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаОкончанияОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		БыстрыйВвод_ДатаОкончания = Результат;
	КонецЕсли;
	
КонецПроцедуры // БыстрыйВвод_ДатаОкончанияОбработкаВыбораЗавершение()

&НаКлиенте
Процедура БыстрыйВвод_ВремяОкончанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ВремяОкончанияНачалоВыбораЗавершение", ЭтотОбъект);
	ДобавлятьДлительность = (НачалоДня(БыстрыйВвод_ДатаНачала) = НачалоДня(БыстрыйВвод_ДатаОкончания));
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, БыстрыйВвод_ДатаОкончания,
		Элемент, БыстрыйВвод_ДатаНачала, ДобавлятьДлительность, ОповещениеЗавершения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяОкончанияНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ДатаОкончания = ВыбранныйЭлемент.Значение;
	ПроверитьКорректностьДатыОкончания();
КонецПроцедуры

// Примечание

&НаКлиенте
Процедура БыстрыйВвод_ПримечаниеТемаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТемаЗаполнена = ЗначениеЗаполнено(Текст);
	ВысотаТемы = ?(ТемаЗаполнена, 3, 1);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		 "БыстрыйВвод_ПримечаниеТема", "Высота",
		 ВысотаТемы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		 "БыстрыйВвод_КомандыПримечание", "Видимость",
		 ТемаЗаполнена);
	Если ТемаЗаполнена Тогда
		Элементы.БыстрыйВвод_СоздатьПримечание.КнопкаПоУмолчанию = Истина;
	Иначе	
		Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
	КонецЕсли;		
	
КонецПроцедуры

// Взаимодействие

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеВидПриИзменении(Элемент)
	
	БыстрыйВвод_Тема = CRM_ЛентаСобытий.ЗначениеРеквизитаОбъекта(БыстрыйВвод_ВзаимодействиеВид, "Тема");
	БыстрыйВвод_Содержание = CRM_ЛентаСобытий.ЗначениеРеквизитаОбъекта(БыстрыйВвод_ВзаимодействиеВид, "Описание");
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеВидОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеНаВесьДеньПриИзменении(Элемент)
	
	Элементы.БыстрыйВвод_ВзаимодействиеДатаНачала_Время.Видимость = (Не БыстрыйВвод_ВзаимодействиеНаВесьДень);
	Элементы.БыстрыйВвод_ВзаимодействиеДатаОкончания_Время.Видимость = (Не БыстрыйВвод_ВзаимодействиеНаВесьДень);
	
	Если БыстрыйВвод_ВзаимодействиеНаВесьДень Тогда
		ПараметрыДня = CRM_ЛентаСобытий.ПараметрыРабочегоДня(ТекущийПользователь);
		БыстрыйВвод_ДатаНачала = НачалоДня(БыстрыйВвод_ДатаНачала) + (ПараметрыДня.ВремяНачала - Дата('00010101'));
		БыстрыйВвод_ДатаОкончания = НачалоДня(БыстрыйВвод_ДатаОкончания) + (ПараметрыДня.ВремяОкончания - Дата('00010101'));
	КонецЕсли;
	
КонецПроцедуры

// Задача

&НаКлиенте
Процедура БыстрыйВвод_ВариантСрокаПриИзменении(Элемент)
	
	БыстрыйВвод_ДатаОкончания = CRM_ЛентаСобытий.ДатаОкончанияПоВарианту(БыстрыйВвод_ДатаНачала,
		 БыстрыйВвод_ЗадачаВариантСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВариантСрокаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Письмо

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	БыстрыйВвод_ПисьмоУчетнаяЗапись = ВыбранноеЗначение;
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	БыстрыйВвод_ПисьмоОтправительПредставление = ЭлементСписка.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(БыстрыйВвод_ПисьмоУчетнаяЗапись) Тогда
		ПоказатьЗначение(, БыстрыйВвод_ПисьмоУчетнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейПриИзменении(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейПисьма;
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейКопий;
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстРедактирования) Тогда
		ЭтотОбъект[ИмяТаблицы].Очистить();
		Возврат;
	КонецЕсли;
	
	Длина = СтрДлина(ТекстРедактирования);
	
	НачалоСтроки = 0;
	КонецСтроки = 0;
	НачалоКолонки = 0;
	КонецКолонки = 0;
	Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	Элемент.УстановитьГраницыВыделения(1, НачалоКолонки, 1, КонецКолонки);
	
	ЕстьОшибки = Ложь;
	Результат = CRM_ОбщегоНазначенияКлиентСервер.АнализСтрокиАдресовЭП(ТекстРедактирования, , ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Для каждого Адрес Из Результат Цикл
			Если Адрес.КодОшибки <> 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Адрес.Сообщение, , ИмяЭлемента);
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	СоответствияАдресовИКонтактов = Новый СписокЗначений;
	ДанныеПолучателей = ЭтотОбъект[ИмяТаблицы];
	СтруктураДанных = CRM_ЛентаСобытий.ПреобразоватьИменаПолучателей(ДанныеПолучателей,
		БыстрыйВвод_ПисьмоУчетнаяЗапись, Результат, СоответствияАдресовИКонтактов);
	
	ЭтотОбъект[ИмяТаблицы].Очистить();
	Для Каждого ДанныеПолучателя Из СтруктураДанных.Получатели Цикл
		ЗаполнитьЗначенияСвойств(ЭтотОбъект[ИмяТаблицы].Добавить(), ДанныеПолучателя);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ГруппаАдресов = "Кому";
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ГруппаАдресов = "Копии";
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ГруппаАдресов = "Скрытые";
	Иначе
		Возврат;
	КонецЕсли;
	
	СписокВыбранных = Новый СписокЗначений;
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучатели),
		 "Кому");
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучателиКопий),
		 "Копии");
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий),
		 "Скрытые");
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись",		БыстрыйВвод_ПисьмоУчетнаяЗапись);
	ПараметрыОткрытия.Вставить("СписокВыбранных",	СписокВыбранных);
	ПараметрыОткрытия.Вставить("ГруппаПоУмолчанию",	ГруппаАдресов);
	ПараметрыОткрытия.Вставить("ГруппаАдресов",		ГруппаАдресов);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_СписокПолучателейНачалоВыбораЗавершение",
		 ЭтотОбъект,
		 Новый Структура);
	ОткрытьФорму("ОбщаяФорма.CRM_АдреснаяКнига", ПараметрыОткрытия, , , , , ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если (ТипЗнч(Результат) <> Тип("Массив")) И (ТипЗнч(Результат) <> Тип("Соответствие")) Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ПисьмоПолучатели.Очистить();
	БыстрыйВвод_ПисьмоПолучателиКопий.Очистить();
	БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Очистить();
	
	Для Каждого Элемент Из Результат Цикл
		
		Если Элемент.Группа = "Кому" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ИначеЕсли Элемент.Группа = "Копии" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ИначеЕсли Элемент.Группа = "Скрытые" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		Иначе
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЭтотОбъект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
		НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, ",", "");
		НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, ";", "");
		
	КонецЦикла;
	
	ДанныеКонтактов = Новый Структура;
	ДанныеКонтактов.Вставить("Кому", БыстрыйВвод_ПисьмоПолучатели);
	ДанныеКонтактов.Вставить("Копии", БыстрыйВвод_ПисьмоПолучателиКопий);
	ДанныеКонтактов.Вставить("Скрытые", БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий);
	
	ПредставленияКонтактов = CRM_ЛентаСобытий.ПредставленияКонтактовПисьма(ДанныеКонтактов);
	
	БыстрыйВвод_ПисьмоСписокПолучателейПисьма		= ПредставленияКонтактов.Кому;
	БыстрыйВвод_ПисьмоСписокПолучателейКопий		= ПредставленияКонтактов.Копии;
	БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий	= ПредставленияКонтактов.Скрытые;
	
	ВидимостьПолучателейКопий = БыстрыйВвод_ПисьмоПолучателиКопий.Количество() > 0;
	ВидимостьПолучателейСкрытыхКопий = БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Количество() > 0;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПисьмоСписокПолучателейКопий", "Видимость", ВидимостьПолучателейКопий);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПоказатьПолучателейКопии", "Видимость", Не ВидимостьПолучателейКопий);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий", "Видимость", ВидимостьПолучателейСкрытыхКопий);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПоказатьПолучателейСкрытойКопии", "Видимость", Не ВидимостьПолучателейСкрытыхКопий);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ЗаголовокСписка = НСтр("ru='Список получателей письма (Кому)';en='List of receivers of the letter (Whom)'");
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ЗаголовокСписка = НСтр("ru='Список получателей письма (Копии)';en='List of receivers of the letter (Copy)'");
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		ЗаголовокСписка =
			НСтр("ru='Список получателей письма (Скрытые копии)';en='List of receivers of the letter (Hidden copies)'");
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяТаблицы].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", ЗаголовокСписка);
	ПараметрыОткрытия.Вставить("МассивПолучателей", ЭтотОбъект[ИмяТаблицы]);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаСпискаПолучателей",
		 ПараметрыОткрытия, ЭтотОбъект, , , , ,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не БыстрыйВвод_АктивенАвтоПодбор Тогда
		Возврат;
	КонецЕсли;
	
	НачалоСтроки = 0;
	КонецСтроки = 0;
	НачалоКолонки = 0;
	КонецКолонки = 0;
	Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	
	ТекстДоМаркера = Лев(Элемент.ТекстРедактирования, КонецКолонки - 1);
	ТекстПослеМаркера = Сред(Элемент.ТекстРедактирования, КонецКолонки);
	
	СборнаяСтрока = "";
	
	Если СтрНайти(ТекстДоМаркера, ",") > 0 Тогда
		МассивПодстрок = СтрРазделить(ТекстДоМаркера, ",");
		Для Индекс = 0 По МассивПодстрок.ВГраница() Цикл
			Если Индекс = (МассивПодстрок.Количество() - 1) Тогда
				Продолжить;
			КонецЕсли;
			СборнаяСтрока = СборнаяСтрока + ?(СборнаяСтрока = "", "", ",") + МассивПодстрок[Индекс];
		КонецЦикла;
	КонецЕсли;
	
	СборнаяСтрока = СборнаяСтрока + ?(СборнаяСтрока = "", "", ",") + ВыбранноеЗначение;
	
	Если СтрНайти(ТекстПослеМаркера, ",") > 0 Тогда
		МассивПодстрок = СтрРазделить(ТекстПослеМаркера, ",");
		Для Индекс = 1 По МассивПодстрок.ВГраница() Цикл
			СборнаяСтрока = СборнаяСтрока + "," + МассивПодстрок[Индекс];
		КонецЦикла;
	КонецЕсли;
	
	ВыбранноеЗначение = СборнаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейАвтоПодбор(Элемент, Текст, ДанныеВыбора,
	 ПараметрыПолученияДанных, Ожидание,
	 СтандартнаяОбработка)
	
	БыстрыйВвод_АктивенАвтоПодбор = (Не Ожидание = 0);
	
	Если БыстрыйВвод_АктивенАвтоПодбор Тогда
		
		ДанныеВыбора = Неопределено;
		
		НачалоСтроки = 0;
		КонецСтроки = 0;
		НачалоКолонки = 0;
		КонецКолонки = 0;
		Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
		
		ТекстДоМаркера = Лев(Текст, КонецКолонки - 1);
		ТекстПослеМаркера = Сред(Текст, КонецКолонки);
		
		ИтоговаяСтрокаДляПоиска = "";
		
		Если НЕ СокрЛП(ТекстДоМаркера) = "" И СтрНайти(ТекстДоМаркера, ",") > 0 Тогда
			МассивПодстрок = СтрРазделить(ТекстДоМаркера, ",");
			ИтоговаяСтрокаДляПоиска = МассивПодстрок[МассивПодстрок.Количество() - 1];
		ИначеЕсли НЕ СокрЛП(ТекстДоМаркера) = "" И СтрНайти(ТекстДоМаркера, ",") > 0 Тогда
			ИтоговаяСтрокаДляПоиска = "";
		Иначе
			ИтоговаяСтрокаДляПоиска = ТекстДоМаркера;
		КонецЕсли;
		
		Если Не ИтоговаяСтрокаДляПоиска = "" И СтрДлина(СокрЛП(ИтоговаяСтрокаДляПоиска)) > 0 Тогда
			СписокДляВыбора = CRM_ЛентаСобытий.СписокПолучателейАвтоПодборНаСервере(СокрЛП(ИтоговаяСтрокаДляПоиска));
			Если СписокДляВыбора.Количество() > 0 Тогда
				СтандартнаяОбработка = Ложь;
				ДанныеВыбора = СписокДляВыбора;
			ИначеЕсли БыстрыйВвод_ПисьмоИсторияАдресов.Количество() > 0 Тогда
				СписокИзИстории = Новый СписокЗначений;
				Для Каждого ЭлементИстории Из БыстрыйВвод_ПисьмоИсторияАдресов Цикл
					Если СтрНайти(ЭлементИстории.Представление, ИтоговаяСтрокаДляПоиска) > 0 Тогда
						СтандартнаяОбработка = Ложь;
						СписокИзИстории.Добавить(ЭлементИстории.Значение, ЭлементИстории.Представление);
					КонецЕсли;
				КонецЦикла;
				ДанныеВыбора = СписокИзИстории;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли БыстрыйВвод_ПисьмоИсторияАдресов.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БыстрыйВвод_ПисьмоИсторияАдресов;
	КонецЕсли;
	
КонецПроцедуры

// Файл

&НаКлиенте
Процедура БыстрыйВвод_ФайлОписаниеИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЕстьВложения = (БыстрыйВвод_Вложения.Количество() > 0);
	ВысотаТемы = ?(ЗначениеЗаполнено(Текст), 3, 1);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_ФайлОписание",
		 "Высота",
		 ВысотаТемы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_КомандыФайл",
		 "Видимость",
		 ЕстьВложения);
	
	Если ЕстьВложения Тогда
		Элементы.БыстрыйВвод_СоздатьФайл.КнопкаПоУмолчанию = Истина;
	Иначе	
		Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Чат

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УчетныеЗаписиМессенджеров = CRM_КлиентыСервер.УчетныеЗаписиМессенджеров(БыстрыйВвод_ЧатВидКИ, Объект.Ссылка, Истина);
	CRM_ЛентаСобытийКлиентСервер.НастроитьОбластьВводаУчетныеЗаписиМессенджеров(УчетныеЗаписиМессенджеров, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ЧатПолучательОбработкаВыбораЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
	
	CRM_ЛентаСобытийКлиент.ПоказатьВопросОЗаписиОбъекта(ЭтотОбъект, ОповещениеЗавершения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОбработкаВыбораЗавершение(ОбъектЗаписан, ДополнительныеПараметры) Экспорт
	
	Если Не ОбъектЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ВыбранноеЗначение = "НайтиВМессенджерах" Тогда
		
		ПрозвонитьВсеТелефоныФормы();
		
	Иначе
	
		ПараметрыОтбора = Новый Структура("Идентификатор", ДополнительныеПараметры.ВыбранноеЗначение);
		НайденныеСтроки = БыстрыйВвод_ЧатПолучатели.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныйПолучатель = НайденныеСтроки[0];
			БыстрыйВвод_ЧатИдентификаторПолучателя	= НайденныйПолучатель.Идентификатор;
			БыстрыйВвод_ЧатАдрес					= НайденныйПолучатель.Адрес;
			БыстрыйВвод_ЧатПолучатель					= НайденныйПолучатель.Контакт;
			БыстрыйВвод_ЧатПредставлениеПолучателя	= НайденныйПолучатель.Представление;
			БыстрыйВвод_ЧатУчетнаяЗапись			= НайденныйПолучатель.УчетнаяЗапись;
			БыстрыйВвод_ЧатПредставлениеУчетнойЗаписи = НайденныйПолучатель.УчетнаяЗапись;
			БыстрыйВвод_ЧатГруппа					= НайденныйПолучатель.Группа;
			БыстрыйВвод_ЧатЭтоНомерТелефона			= НайденныйПолучатель.ЭтоНомерТелефона;
			БыстрыйВвод_ЧатВидКИ					= НайденныйПолучатель.ВидКИ;
		КонецЕсли;
		
		УчетныеЗаписиМессенджеров = CRM_КлиентыСервер.УчетныеЗаписиМессенджеров(БыстрыйВвод_ЧатВидКИ, Объект.Ссылка);
		CRM_ЛентаСобытийКлиентСервер.НастроитьОбластьВводаУчетныеЗаписиМессенджеров(УчетныеЗаписиМессенджеров, ЭтотОбъект);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатУчетнаяЗаписьОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатУчетнаяЗаписьОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатУчетнаяЗаписьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	БыстрыйВвод_ЧатУчетнаяЗапись = ВыбранноеЗначение;
	БыстрыйВвод_ЧатПредставлениеУчетнойЗаписи = ВыбранноеЗначение;
	
КонецПроцедуры

#КонецОбласти

#Область ОбменB2bПортал

&НаКлиенте
Процедура ПодключенКB2BПорталуПриИзменении(Элемент)
	
	Если Объект.CRM_ПодключенКB2BПорталу И Не ЗначениеЗаполнено(Объект.CRM_СтатусНаB2BПортале) Тогда
		Объект.CRM_СтатусНаB2BПортале =
			ПредопределенноеЗначение("Перечисление.CRM_СтатусыПользователейB2BПортала.Пользователь");
	КонецЕсли;
	Элементы.СтатусНаB2BПортале.АвтоОтметкаНезаполненного = Объект.CRM_ПодключенКB2BПорталу;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура CRM_B2BПортал_СброситьПарольНаСервере(КонтактноеЛицо)
	ОписаниеОшибки = "";
	Результат = CRM_ОбменB2BПортал.СброситьПарольПользователя(КонтактноеЛицо, ОписаниеОшибки);
	Если Результат Тогда
		ОбщегоНазначения.СообщитьПользователю("Пароль сброшен! Пользователю придет уведомление по электронной почте.");
	Иначе                                                                                                                        
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Не удалось сбросить пароль! Причина ошибки%1", ОписаниеОшибки))
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_B2BПортал_СброситьПароль(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("CRM_B2BПортал_СброситьПарольЗавершение", ЭтотОбъект),
		 "Сбрость пароль пользователя портала?",
		 РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура CRM_B2BПортал_СброситьПарольЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	CRM_B2BПортал_СброситьПарольНаСервере(Объект.Ссылка);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

// -CRM

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СделатьРольОсновной(Команда)
	ТекСтрока = Элементы.РолиКонтактногоЛица.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Объект.CRM_РольКонтактногоЛица = ТекСтрока.РольКонтактногоЛица;
		УстановитьУсловноеОформление();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура CRM_РольКонтактногоЛицаПриИзмененииНаСервере()
	СтруктураОтбора = Новый Структура("РольКонтактногоЛица", РольКЭШ);
	ТекСтроки = Объект.РолиКонтактногоЛица.НайтиСтроки(СтруктураОтбора);	
	Если ТекСтроки.Количество() > 0 Тогда
		Объект.РолиКонтактногоЛица.Удалить(ТекСтроки[0]);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.CRM_РольКонтактногоЛица) Тогда
		СтрРоль = Объект.РолиКонтактногоЛица.Добавить();
		СтрРоль.РольКонтактногоЛица = Объект.CRM_РольКонтактногоЛица;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_РольКонтактногоЛицаПриИзменении(Элемент)
	Если Объект.CRM_РольКонтактногоЛица <> РольКЭШ Тогда
		CRM_РольКонтактногоЛицаПриИзмененииНаСервере();
		РольКЭШ = Объект.CRM_РольКонтактногоЛица;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РолиКонтактногоЛицаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Объект.РолиКонтактногоЛица.Количество() = 0 Тогда
		Элементы.ГруппаТабЧастьРоли.Заголовок = "Роли";	
	Иначе	
		Элементы.ГруппаТабЧастьРоли.Заголовок = "Роли(" + Объект.РолиКонтактногоЛица.Количество() + ")";
	КонецЕсли;
	Если Объект.РолиКонтактногоЛица.Количество() = 1 Тогда
		СделатьРольОсновной("");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РолиКонтактногоЛицаПослеУдаления(Элемент)
	Если Объект.РолиКонтактногоЛица.Количество() = 0 Тогда
		Элементы.ГруппаТабЧастьРоли.Заголовок = "Роли";	
	Иначе	
		Элементы.ГруппаТабЧастьРоли.Заголовок = "Роли(" + Объект.РолиКонтактногоЛица.Количество() + ")";
	КонецЕсли;
	Если Объект.РолиКонтактногоЛица.Количество() = 1 Тогда
		СделатьРольОсновной("");
	ИначеЕсли Объект.РолиКонтактногоЛица.Количество() = 0 Тогда	
		Объект.CRM_РольКонтактногоЛица = ПредопределенноеЗначение("Справочник.РолиКонтактныхЛицПартнеров.ПустаяСсылка");	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыФизическогоЛица(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьДокументыФизическогоЛицаЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры // ОткрытьДокументыФизическогоЛица()

#Область ЛентаСобытий

&НаКлиенте
Процедура Лента_Обновить(Команда)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ПоказатьОтборы(Команда)
	
	Если Элементы.Лента_СписокОтборов.Скрыта() Тогда
		
		CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
			"CRM_Статистика.Прочее.ЛентаСобытий.ДлительностьСценариев.ВремяУстановкиФильтра");
		
		Элементы.Лента_СписокОтборов.Показать();
		ПодключитьОбработчикОжидания("Лента_Закрыть", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ОткрытьЖурналДокументов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтборКонтакт",							Объект.Ссылка);
	ПараметрыФормы.Вставить("БлокироватьИзменениеОтбораПоКонтакту",	Истина);
	
	ОткрытьФорму(
		"Обработка.CRM_УниверсальныйЖурналДокументов.Форма.ФормаФиксированныйОтбор",
		ПараметрыФормы, ЭтотОбъект, КлючУникальности);
	
КонецПроцедуры // Лента_ОткрытьЖурналДокументов()

&НаКлиенте
Процедура Лента_Закрыть()
	
	Если Элементы.Лента_СписокОтборов.Скрыта() Тогда
		
		ТекущийЭлемент = Элементы.Лента_ПоказатьОтборы;
		ОтключитьОбработчикОжидания("Лента_Закрыть");
		
		CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
			"CRM_Статистика.Прочее.ЛентаСобытий.ДлительностьСценариев.ВремяУстановкиФильтра");
		
	Иначе
		ПодключитьОбработчикОжидания("Лента_Закрыть", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбластьВвода

&НаКлиенте
Процедура БыстрыйВвод_СменитьСтраницу(Команда)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Команда) = Тип("ЭлементСпискаЗначений") Тогда
		ИмяКомандыМассив = СтрРазделить(Команда.Значение, "_");
	Иначе	
		ИмяКомандыМассив = СтрРазделить(Команда.Имя, "_");
		Если Команда.Имя = "БыстрыйВвод_Чат" Тогда
			CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.АРМДиалоги.Удобство.ЧатКарточкаКонтактноеЛицо");
		КонецЕсли;
	КонецЕсли;
	ПереключитьСтраницуБыстрогоВвода(ИмяКомандыМассив[1]);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_Создать(Команда)
	
	Если Не CRM_ЛентаСобытийКлиент.ПроверитьЗаполнениеБыстрогоВвода(БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_СоздатьЗавершение", ЭтотОбъект, Новый Структура);
	CRM_ЛентаСобытийКлиент.ПоказатьВопросОЗаписиОбъекта(ЭтотОбъект, ОповещениеЗавершения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СоздатьЗавершение(ОбъектЗаписан, ДополнительныеПараметры) Экспорт
	
	Если ОбъектЗаписан Тогда
		
		ДанныеЗаполнения = CRM_ЛентаСобытийКлиент.ДанныеЗаполненияОбъектаБыстрогоВвода("ЛентаКонтакта",
			БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект);
		
		Если БыстрыйВвод_ТекущийТипОбъекта = "Чат" Тогда
			ВозможностьОтправкиСообщения = CRM_ЛентаСобытий.ПроверитьВозможностьОтправкиСообщения(ДанныеЗаполнения);
			Если Не ВозможностьОтправкиСообщения Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В данный мессенджер нельзя писать первыми!
				                                           |С указанным контактом не было диалогов.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		CRM_ЛентаСобытий.СоздатьОбъектБыстрыйВвод("ЛентаКонтакта", БыстрыйВвод_ТекущийТипОбъекта, ДанныеЗаполнения);
		Если БыстрыйВвод_ТекущийТипОбъекта = "Файл" Тогда
			СформироватьПредставлениеВложений();
		КонецЕсли;
		
		ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_Отменить(Команда)
	
	ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьПолучателейКопии(Команда)
	
	Элементы.БыстрыйВвод_ПисьмоСписокПолучателейКопий.Видимость = Истина;
	Элементы.БыстрыйВвод_ПоказатьПолучателейКопии.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьПолучателейСкрытойКопии(Команда)
	
	Элементы.БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий.Видимость = Истина;
	Элементы.БыстрыйВвод_ПоказатьПолучателейСкрытойКопии.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДругиеПараметры(Команда)
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ДругиеПараметрыЗавершение", ЭтотОбъект, Новый Структура);
	CRM_ЛентаСобытийКлиент.ПоказатьВопросОЗаписиОбъекта(ЭтотОбъект, ОповещениеЗавершения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДругиеПараметрыЗавершение(ОбъектЗаписан, ДополнительныеПараметры) Экспорт
	
	Если Не ОбъектЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ЛентаСобытийКлиент.ПоказатьПолнуюФормуОбъекта("ЛентаКонтакта", БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект);
	ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбычныйВвод_ПоказатьЕще(Команда)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОбычныйВвод_ПоказатьЕщеЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОповещениеЗавершения, ОбычныйВвод_Команды, Элементы.ОбычныйВвод_ПоказатьЕще);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбычныйВвод_ПоказатьЕщеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ВыбранныйЭлемент.Значение, "БыстрыйВвод_") = 1 Тогда
		БыстрыйВвод_СменитьСтраницу(ВыбранныйЭлемент);
	Иначе
		
		// РаспознаваниеРечи
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		// Конец РаспознаваниеРечи
		
		CRM_ЛентаСобытийКлиент.СоздатьОбъектОбычныйВвод("ЛентаКонтакта", ВыбранныйЭлемент.Значение, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДобавитьФайл(Команда)
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ДобавитьФайлЗавершение", ЭтотОбъект);
	CRM_ЛентаСобытийКлиент.ДобавитьВложение(ЭтотОбъект, ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДобавитьФайлЗавершение(Успех, ДополнительныеПараметры) Экспорт
	
	Если Не Успех Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ОбновитьЭлементыВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_БыстрыйВвод_УдалитьФайл(Команда)
	
	ИдентификаторСсылкиВложения = СтрЗаменить(Команда.Имя, "БыстрыйВвод_Удалить_СсылкаВложения_", "");
	
	CRM_ЛентаСобытийКлиент.УдалитьВложение(ЭтотОбъект, ИдентификаторСсылкиВложения);
	
	БыстрыйВвод_ОбновитьЭлементыВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВставитьФайлИзБуфера(Команда)
	
	CRM_ЛентаСобытийКлиент.ВставитьФайлИзБуфераОбмена(ЭтотОбъект);
	БыстрыйВвод_ОбновитьЭлементыВложений();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ИсторияРеквизитов(Команда)
	
	УсловияОтбора = Новый Структура("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии", УсловияОтбора, Истина);
	ОткрытьФорму("Отчет.CRM_ИсторияРеквизитов.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ФамилияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если (Ожидание > 0) И Не ПустаяСтрока(Текст) Тогда
		ПолучитьДанныеВыбораФИОНаСервере(Текст, Истина, , ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИмяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если (Ожидание > 0) И Не ПустаяСтрока(Текст) Тогда
		ПолучитьДанныеВыбораФИОНаСервере(Текст, , Истина, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОтчествоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если (Ожидание > 0) И Не ПустаяСтрока(Текст) Тогда
		ПолучитьДанныеВыбораФИОНаСервере(Текст, , , ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

&НаСервере
Процедура ПроверитьКорректностьДатыОкончания()
	Если ЗначениеЗаполнено(БыстрыйВвод_ВзаимодействиеВид.ДлительностьВстречиПоУмолчанию) Тогда
		ПлановаяДатаЗавершенияТМП = БыстрыйВвод_ДатаНачала 
			+ БыстрыйВвод_ВзаимодействиеВид.ДлительностьВстречиПоУмолчанию * 60;
		Если БыстрыйВвод_ДатаОкончания < ПлановаяДатаЗавершенияТМП Тогда
			БыстрыйВвод_ДатаОкончания = ПлановаяДатаЗавершенияТМП;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
	 НавигационнаяСсылка = Неопределено,
	 СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
&НаСервере
Функция РазрешитьЗаписьБезКИ()
	Возврат РольДоступна("ПолныеПрава") ИЛИ РольДоступна("CRM_РазрешитьСохранениеКЛБезКИ");
КонецФункции	

&НаСервере
Процедура УстановитьВидимостьРеквизитовКИ()
	
	Если НЕ Элементы.ГруппаКонтактнаяИнформацияОбщая.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	флагВыводаГиперСсылки = Ложь;
	СтруктураОтбора		= Неопределено;
	СтруктураОтбора		= Новый Структура("Родитель, Выводить",
		 Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров,
		 Ложь);
	
	МассивСтрок = ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"].НайтиСтроки(СтруктураОтбора);
	
	флагВыводаГиперСсылки = НЕ (МассивСтрок.Количество() = 0);
	
	Для Каждого СтрокаДопРеквизита Из ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"] Цикл
		
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			флаг_1 = ЗначениеЗаполнено(ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита]) 
				И НЕ (ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита] = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление());
		Иначе	
			флаг_1 = ЗначениеЗаполнено(ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита]);
		КонецЕсли;
		
		РеквизитПараметрыКонтактнойИнформации = ЭтотОбъект["ПараметрыКонтактнойИнформации"];
		Для Каждого СтрокаДобавленногоРеквизита Из РеквизитПараметрыКонтактнойИнформации["ГруппаКонтактнаяИнформация"].ДобавленныеЭлементы Цикл
			Если СтрокаДобавленногоРеквизита.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(СтрокаДобавленногоРеквизита.Значение, СтрокаДопРеквизита.ИмяРеквизита) Тогда
				СкрыватьПолеКИ = (СтрокаДопРеквизита.Комментарий = "Не выводить");
				Элементы[СтрокаДобавленногоРеквизита.Значение].Видимость = (((СтрокаДопРеквизита.Выводить
					 И НЕ СкрыватьПолеКИ) ИЛИ (РедактироватьДР
					 ИЛИ флаг_1))
										И ?(Тип(Элементы[СтрокаДобавленногоРеквизита.Значение]) = Тип("КнопкаФормы"), Элементы[СтрокаДобавленногоРеквизита.Значение].Заголовок <> "", Истина));
			КонецЕсли;
		КонецЦикла;
		
		Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка = ШрифтыСтиля.ЗаголовокУдаленногоРеквизитаШрифт Тогда
		
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветТекстаЗаголовка	= Новый Цвет();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка		= Новый Шрифт();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОчистки			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОткрытия		= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаСпискаВыбора	= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Истина;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].Подсказка				= "";
			
			Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].Вид = ВидПоляФормы.ПолеВвода Тогда
				
				Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].Высота = 5;
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].МногострочныйРежим = Истина;
				КонецЕсли;
				
				Если (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес)
				ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон)
				ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Факс) Тогда
					
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора				= Истина;
					Если СтрокаДопРеквизита.Вид.ВидРедактирования = "Диалог" Тогда
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Ложь;
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветФона				= WebЦвета.Кремовый;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			ИмяРеквизита = Элементы[СтрокаДопРеквизита.ИмяРеквизита].Имя;
			АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
			Если ПустаяСтрока(АдресСайтаКомпании) Тогда
				ЭтотОбъект[ИмяРеквизита] = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНедоступностьКартинки()
	АдресКартинки = "";
	Элементы.АдресКартинки.ТекстНевыбраннойКартинки
		=
			НСтр("ru='Картинка недоступна (недоступен том), обратитесь к администратору.';en='Picture unavailable (volume unavailable) of contact the administrator.'");
	Объект.CRM_Фотография = Справочники.КонтактныеЛицаПартнеровПрисоединенныеФайлы.ПустаяСсылка();
	CRM_УправлениеВидимостьюКартинки();	
КонецПроцедуры // ВывестиНедоступностьКартинки()

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Команда", "");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресКомпании", "");
	Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элементы[ИмяРеквизита], Неопределено, Ложь);
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНажатиеАдресаСайтаКомпании(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Команда", "");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании", "");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление() Тогда
		Подключаемый_РедактироватьАдресСайтаКомпании(Элемент);
	Иначе
		Если СтрНайти(АдресСайтаКомпании, "://") = 0 Тогда
			АдресСайтаКомпании = "http://" + АдресСайтаКомпании;
		КонецЕсли;	
		ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(АдресСайтаКомпании);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресСайтаКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Команда", "");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании", "");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление() Тогда
		АдресСайтаКомпании = "";
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_РедактироватьАдресСайтаКомпанииЗавершение",
		 ЭтотОбъект,
		 ИмяРеквизита);
	ПоказатьВводСтроки(ОписаниеОповещения, АдресСайтаКомпании,
		 НСтр("ru='Введите адрес сайта';en='Enter website address'"));
	
КонецПроцедуры // Подключаемый_РедактироватьАдресСайтаКомпании

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресСайтаКомпанииЗавершение(АдресСайтаКомпании, ИмяРеквизита) Экспорт
	
	Если АдресСайтаКомпании <> Неопределено Тогда 		
		Если ПустаяСтрока(АдресСайтаКомпании) Тогда
			ЭтотОбъект[ИмяРеквизита] = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление();
		Иначе	
			ЭтотОбъект[ИмяРеквизита] = АдресСайтаКомпании;
		КонецЕсли;
			
		// +CRM
		ТекущийЭлементКонтактнойИнформации = Элементы[ИмяРеквизита];
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, ТекущийЭлементКонтактнойИнформации);
		Модифицированность = Истина;
		// -CRM
		
	КонецЕсли;	
	
КонецПроцедуры // Подключаемый_РедактироватьАдресСайтаКомпании

&НаКлиенте
Процедура Подключаемый_ОткрытьАдресНаИнтернетКарте(Элемент)
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Команда", "");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОткрытьАдресНаИнтернетКарте", "");
	НайденныеСтроки = ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"].НайтиСтроки(Новый Структура("ИмяРеквизита",
		 ИмяРеквизита));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = CRM_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВСписокПолей(НайденныеСтроки[0].ЗначенияПолей);
	
	СтруктураАдреса = Новый Структура;
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		СтруктураАдреса.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;
	СтруктураАдреса.Вставить("Представление", ЭтотОбъект[ИмяРеквизита]);
	
	СписокКарт = Новый СписокЗначений;
	СписокКарт.Добавить("GIS", "Карта GIS", , БиблиотекаКартинок.CRM_ГлобусСЛупой);
	СписокКарт.Добавить("Google", "Карта Google", , БиблиотекаКартинок.CRM_ГлобусСЛупой);
	СписокКарт.Добавить("Yandex", "Карта Yandex", , БиблиотекаКартинок.CRM_ГлобусСЛупой);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение",
		 ЭтотОбъект,
		 СтруктураАдреса);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокКарт, ТекущийЭлемент);
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение(Результат, СтруктураАдреса) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		СайтИнтернетКарты = Результат.Значение;
		CRM_ОбщегоНазначенияКлиент.ПолучитьАдресПоказатьНаКарте(СтруктураАдреса, СайтИнтернетКарты);
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_РедактироватьПрочее(Элемент)
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Команда", "");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьПрочее", "");
	НайденныеСтроки = ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"].НайтиСтроки(Новый Структура("ИмяРеквизита",
		 ИмяРеквизита));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПрочее = ЭтотОбъект[ИмяРеквизита];
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_РедактироватьПрочееЗавершение", ЭтотОбъект, ИмяРеквизита);
	ПоказатьВводСтроки(ОписаниеОповещения, СтрокаПрочее, Строка(НайденныеСтроки[0].Вид), , Истина);
КонецПроцедуры // Подключаемый_РедактироватьПрочее

&НаКлиенте
Процедура Подключаемый_РедактироватьПрочееЗавершение(СтрокаПрочее, ИмяРеквизита) Экспорт
	Если СтрокаПрочее <> Неопределено Тогда
		ЭтотОбъект[ИмяРеквизита] = СтрокаПрочее;
			
		// +CRM
		ТекущийЭлементКонтактнойИнформации = Элементы[ИмяРеквизита];
		ТекущийЭлементКонтактнойИнформации.Заголовок = СтрокаПрочее;
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, ТекущийЭлементКонтактнойИнформации);
		Модифицированность = Истина;
		// -CRM	
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_РедактироватьПрочее

// +CRM

&НаКлиенте
Процедура ОткрытьДокументыФизическогоЛицаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Физлицо", Объект.Ссылка));
		ОткрытьФорму("РегистрСведений.ДокументыФизическихЛиц.Форма.ДокументыФизическогоЛица",
		             ПараметрыФормы,
		             ЭтотОбъект,
		             КлючУникальности,
		             Окно);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьДокументыФизическогоЛицаЗавершение()

&НаКлиенте
Процедура ОткрытиеФормыСоздаваемогоПартнера()
	
	СтруктураПараметры = Новый Структура("Наименование, CRM_Фамилия, CRM_Имя, CRM_Отчество,
		|Пол, ДатаРождения, CRM_НапоминатьОДнеРождения");
	ЗаполнитьЗначенияСвойств(СтруктураПараметры, Объект);
	СтруктураПараметры.Вставить("ЮрФизЛицо", ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо"));	
	
	СоответствиеВидКИ = Новый Соответствие();
	СоответствиеВидКИ.Вставить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailКонтактногоЛица"),
		 ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПартнера"));
	СоответствиеВидКИ.Вставить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица"),
		 ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица"));
	СоответствиеВидКИ.Вставить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица"),
		 ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"));
	
	СоответствиеВидаИПредставления = Новый Соответствие();
	
	Для Каждого СтрокаКИ Из Объект.КонтактнаяИнформация Цикл
		ВидКИПартнера = СоответствиеВидКИ[СтрокаКИ.Вид];
		Если Не ЗначениеЗаполнено(ВидКИПартнера) Тогда
			Если СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
				ВидКИПартнера = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПартнера");
			ИначеЕсли СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
				ВидКИПартнера = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера");
			Иначе
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		Если СтрокаКИ.CRM_ОсновнойДляСвязи Тогда
			СоответствиеВидаИПредставления.Вставить(СтрокаКИ.Представление + " CRM_ОсновнойДляСвязи", ВидКИПартнера);
		Иначе
			СоответствиеВидаИПредставления.Вставить(СтрокаКИ.Представление, ВидКИПартнера);			
		КонецЕсли;			
	КонецЦикла;	
	
	СтруктураПараметры.Вставить("ПреобразованиеКЛ", СоответствиеВидаИПредставления);
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Клиенты.Клиент.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
	
	ОткрытьФорму("Справочник.Партнеры.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения",
		 СтруктураПараметры),
		 ЭтотОбъект);
	
КонецПроцедуры	

&НаКлиенте
Процедура CRM_СоздатьФизЛицо(Команда)
	ОткрытиеФормыСоздаваемогоПартнера();	
КонецПроцедуры

#Область ПоискДублейПоЗначению

&НаКлиенте
Процедура ВыполнитьПоискДублейПоЗначениюКИ(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("ДанныеФормыЭлементКоллекции") Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПоискДублейПоЗначению(Результат.Представление, ДополнительныеПараметры.Элемент, Результат.Тип);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискДублейПоЗначению(ЗначениеПоиска, Поле, ТипКИ = Неопределено)

	ВыполнитьПоискДублейПоЗначениюНаСервере(ЗначениеПоиска, Поле.Имя, ТипКИ);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискДублейПоЗначениюНаСервере(ЗначениеПоиска, ИмяПоля, ТипКИ)
	
	CRM_ПоискКонтактовВызовСервера.ПодготовитьПоискДублейПоЗначению(ЭтотОбъект, ЗначениеПоиска, ИмяПоля, ТипКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаРезультатовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	CRM_ПоискКонтактовКлиент.ОбработатьВыборТаблицыРезультатов(ЭтотОбъект, Элемент, ВыбраннаяСтрока,
		 Поле,
		 СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьДанныеВыбораФИОНаСервере(СтрокаПоиска, ЭтоФамилия = Ложь, ЭтоИмя = Ложь,
	 ДанныеВыбора,
	 СтандартнаяОбработка)
	
	СписокФИО = CRM_КлиентыСервер.ПолучитьДанныеВыбораФИО(СтрокаПоиска, ЭтоФамилия, ЭтоИмя);
	Если СписокФИО.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокФИО;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФИО(Команда)
	
	СтруктураЗаполнения = ЗаполнитьФИОНаСервере();
	Если (ЗначениеЗаполнено(Объект.CRM_Фамилия) И Не Объект.CRM_Фамилия = СтруктураЗаполнения.CRM_Фамилия) 
		Или (ЗначениеЗаполнено(Объект.CRM_Имя) И Не Объект.CRM_Имя = СтруктураЗаполнения.CRM_Имя) 
		Или (ЗначениеЗаполнено(Объект.CRM_Отчество) И Не Объект.CRM_Отчество = СтруктураЗаполнения.CRM_Отчество) Тогда
			ТекстВопроса = НСтр("ru = 'Переписать ФИО?'");
			Ответ = Неопределено;
			ПоказатьВопрос(Новый ОписаниеОповещения("ПереписатьФИОЗавершение", ЭтотОбъект,
				 СтруктураЗаполнения), ТекстВопроса,
				 РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереписатьФИОЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Ответ = РезультатВопроса;

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьЗначенияСвойств(Объект, ДополнительныеПараметры);
		Модифицированность = Истина;
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьФИОНаСервере()
	
	СтруктураФИО = Новый Структура("CRM_Фамилия, CRM_Имя, CRM_Отчество");
	НаименованиеТекущее = Объект.Наименование;
	Справочники.CRM_ВысокочастотныеФИО.ДополнитьНедостающиеФИОПоНаименованию(НаименованиеТекущее, 
		СтруктураФИО.CRM_Фамилия, СтруктураФИО.CRM_Имя, СтруктураФИО.CRM_Отчество);
	Возврат СтруктураФИО;
	
КонецФункции

#КонецОбласти

#Область ПотенциальныеКлиенты

&НаКлиенте
Процедура CRM_ОбновитьГруппуПотенциальныеКлиенты()
	
	ЗаголовокПК = НСтр("ru='Потенциальные клиенты'; en='Potential Customers'");
	
	КоличествоПК = 0;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		КоличествоПК = КоличествоПотенциальныхКлиентовНаСервере(Объект.Ссылка);
		Если КоличествоПК > 0 Тогда
			ЗаголовокПК = ЗаголовокПК + " (" + КоличествоПК + ")";
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ПотенциальныеКлиенты.Заголовок <> ЗаголовокПК Тогда
		Элементы.ПотенциальныеКлиенты.Заголовок = ЗаголовокПК;
	КонецЕсли;
	
	Элементы.ПотенциальныеКлиенты.Видимость = (КоличествоПК > 0);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоПотенциальныхКлиентовНаСервере(КонтактноеЛицо)
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.CRM_ПотенциальныеКлиенты) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_ПотенциальныеКлиенты.Ссылка) КАК КоличествоПК
	                      |ИЗ
	                      |	Справочник.CRM_ПотенциальныеКлиенты КАК CRM_ПотенциальныеКлиенты
	                      |ГДЕ
	                      |	CRM_ПотенциальныеКлиенты.КонтактноеЛицо = &КонтактноеЛицо");
	Запрос.УстановитьПараметр("КонтактноеЛицо", КонтактноеЛицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоПК;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ПрозвонМессенджеровЗавершение(Результат, Параметры) Экспорт

	// Отключить картинку Длительной операции:
	Если НЕ Параметры.Свойство("ПрозвонВсехНомеров") Тогда
		Элементы["ДекорацияПрозвон" + Параметры.ИмяРеквизита].Вид = ВидДекорацииФормы.Надпись;
		Элементы["ДекорацияПрозвон" + Параметры.ИмяРеквизита].Ширина = 0;
	КонецЕсли;
	
	ОшибкаПриПрозвоне = Результат = Неопределено Или ТипЗнч(Результат) <> Тип("Структура")
	                    Или (Результат.Свойство("Статус") И Результат.Статус = "Ошибка");
	
	Если ОшибкаПриПрозвоне Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		
		РезультатПрозвона = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		CRM_УправлениеКонтактнойИнформациейКлиент.CRM_ПрозвонМессенджеровЗавершение(РезультатПрозвона.ВидыКИ, Параметры);
		
		УстановитьВидимостьРеквизитовКИ();
		
		Для Каждого СтрСообщения Из РезультатПрозвона.Сообщения Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрСообщения);
		КонецЦикла;
		
		Если РезультатПрозвона.ВидыКИ.Количество() = 0 Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Поиск в мессенджерах'"),
				 ПолучитьНавигационнуюСсылку(Объект.Ссылка),
				 НСтр("ru = 'Не найдено'"));
		КонецЕсли;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаписатьВЧатЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НомерТелефона = Результат;
	
	АдресПараметровОповещения = ПоместитьВоВременноеХранилище(
									Новый Структура("ИмяПроцедуры, Параметры", 
											"Подключаемый_ПереключитьНаЧат", 
											Новый Структура("НомерТелефона", НомерТелефона)), УникальныйИдентификатор);
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
							
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереключитьНаЧат(Результат, ДополнительныеПараметры) Экспорт // АПК:78 - исключить из проверки.
							
	НомерТелефона = ДополнительныеПараметры.НомерТелефона;
	
	Если НЕ БыстрыйВвод_ТекущийТипОбъекта = "Чат" Тогда
		ПереключитьСтраницуБыстрогоВвода("Чат");
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Адрес", НомерТелефона);
	НайденныеСтроки = БыстрыйВвод_ЧатПолучатели.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныйПолучатель = НайденныеСтроки[0];
		БыстрыйВвод_ЧатИдентификаторПолучателя	= НайденныйПолучатель.Идентификатор;
		БыстрыйВвод_ЧатАдрес					= НайденныйПолучатель.Адрес;
		БыстрыйВвод_ЧатПолучатель					= НайденныйПолучатель.Контакт;
		БыстрыйВвод_ЧатПредставлениеПолучателя	= НайденныйПолучатель.Представление;
		БыстрыйВвод_ЧатУчетнаяЗапись			= НайденныйПолучатель.УчетнаяЗапись;
		БыстрыйВвод_ЧатПредставлениеУчетнойЗаписи = НайденныйПолучатель.УчетнаяЗапись;
		БыстрыйВвод_ЧатГруппа					= НайденныйПолучатель.Группа;
		БыстрыйВвод_ЧатЭтоНомерТелефона			= НайденныйПолучатель.ЭтоНомерТелефона;
		БыстрыйВвод_ЧатВидКИ					= НайденныйПолучатель.ВидКИ;
	КонецЕсли;
	
	УчетныеЗаписиМессенджеров = CRM_КлиентыСервер.УчетныеЗаписиМессенджеров(БыстрыйВвод_ЧатВидКИ, Объект.Ссылка);
	CRM_ЛентаСобытийКлиентСервер.НастроитьОбластьВводаУчетныеЗаписиМессенджеров(УчетныеЗаписиМессенджеров, ЭтотОбъект);
	
	ТекущийЭлемент = Элементы.БыстрыйВвод_ЧатСодержание;
	
КонецПроцедуры

&НаСервере
Функция ВсеТелефоныФормы(ДополнительныеДанныеНомеровСоответствие)
	
	Возврат CRM_КлиентыСервер.ВсеТелефоныФормы(ЭтотОбъект, ДополнительныеДанныеНомеровСоответствие);
	
КонецФункции

&НаКлиенте
Процедура ПрозвонитьВсеТелефоныФормы()
	
	ДополнительныеДанныеНомеровСоответствие = Новый Соответствие;
	МассивТелефонныхНомеров = ВсеТелефоныФормы(ДополнительныеДанныеНомеровСоответствие);
	
	Если МассивТелефонныхНомеров.Количество() = 0 Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Поиск в мессенджерах'"),
												ПолучитьНавигационнуюСсылку(Объект.Ссылка),
												НСтр("ru = 'Не найдены номера телефонов для поиска в мессенджерах'"));
	Иначе
		
		ПараметрыПрозвона = Новый Структура("Форма, Ссылка", ЭтотОбъект, Объект.Ссылка);
		ПараметрыПрозвона.Вставить("ПрозвонВсехНомеров");
		ПараметрыПрозвона.Вставить("МассивТелефонныхНомеров", МассивТелефонныхНомеров);
		ПараметрыПрозвона.Вставить("МассивИсключаемыхМессенджеров", Новый Массив);
		ПараметрыПрозвона.Вставить("ДополнительныеДанныеНомеровСоответствие", ДополнительныеДанныеНомеровСоответствие);
		ПараметрыПрозвона.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтактнаяИнформация");
		CRM_УправлениеКонтактнойИнформациейКлиент.CRM_ЗапуститьДлительнуюОперациюПрозвонитьМессенджеры(ПараметрыПрозвона);
		
	КонецЕсли;
	
КонецПроцедуры

// -CRM

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// +CRM
	CRM_УправлениеСвойствами.ПослеОтрисовкиДополнительныхРеквизитов(ЭтотОбъект);
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ФизЛицоПриИзмененииНаСервере()
	Если CRM_ФизЛицо = Объект.Владелец Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нельзя ВЫБРАТЬ владельца контактного лица!";
		Сообщение.Поле = "ФизЛицо";
		Сообщение.Сообщить();
		CRM_ФизЛицо = Справочники.Партнеры.ПустаяСсылка();		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	ФизЛицоПриИзмененииНаСервере();
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Функция ПолучитьЧислоВложений()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(КонтактныеЛицаПартнеровПрисоединенныеФайлы.Ссылка) КАК КоличествоФайлов
	               |ИЗ
	               |	Справочник.КонтактныеЛицаПартнеровПрисоединенныеФайлы КАК КонтактныеЛицаПартнеровПрисоединенныеФайлы
	               |ГДЕ
	               |	КонтактныеЛицаПартнеровПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	               |	И НЕ КонтактныеЛицаПартнеровПрисоединенныеФайлы.ПометкаУдаления
	               |	И НЕ КонтактныеЛицаПартнеровПрисоединенныеФайлы.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КоличествоФайлов;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	
	Если Объект.Ссылка.Пустая() Тогда
		ВложенияПредставление = НСтр("ru='Файлы';en='Files'");
		Возврат;
	КонецЕсли;
	
	ЧислоВложений = ПолучитьЧислоВложений();
	Если ЧислоВложений = 0 Тогда
		ВложенияПредставление = НСтр("ru='Файлы';en='Files'");
	Иначе
		ВложенияПредставление = НСтр("ru='Файлы(';en='Files ('") + ЧислоВложений + ")"; 
	КонецЕсли;
			
КонецПроцедуры // СформироватьПредставлениеВложений()

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанные(ОписаниеОповещенияОЗавершении)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВопросЗаписатьДанныеЗавершение",
			 ЭтотОбъект,
			 ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Данные еще не записаны."
"Действие возможно только после записи данных. Записать?';en='Data is not yet recorded."
"Action is possible only after recording the data. Record?'"), 
					   РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанныеЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#Область КонтактнаяИнформация_КонтактныеЛица

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНажатие(Команда)
	
	CRM_УправлениеКонтактнойИнформациейКлиент.КонтактнаяИнформацияНажатие(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлыЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.CRM_ПрисоединенныеФайлы",
					  ПараметрыФормы, ЭтотОбъект, Ложь, Неопределено);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФайлыЗавершение()

#КонецОбласти

#Область НастройкаРасположенияЭлементов

&НаКлиенте
Процедура Подключаемый_НастройкаРасположенияЭлементовФормы(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_НастройкаРасположенияЭлементовФормыЗавершение",
		 ЭтотОбъект);
	CRM_УправлениеЭлементамиНаФормахКлиент.НастройкаРасположенияЭлементовФормы(ЭтотОбъект, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастройкаРасположенияЭлементовФормыЗавершение(Результат, ДопПараметры) Экспорт
	Подключаемый_НастройкаРасположенияЭлементовФормыЗавершениеСервер(Результат, ДопПараметры);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_НастройкаРасположенияЭлементовФормыЗавершениеСервер(Результат, ДопПараметры)
	CRM_УправлениеЭлементамиНаФормах.РазместитьЭлементыПоНастройке(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ЛентаСобытий

&НаКлиенте
Процедура Подключаемый_ОбновитьЛенту()
	
	Лента_НеЗаполнять = Не ЗначениеЗаполнено(Объект.Ссылка);
	CRM_ЛентаСобытийКлиентСервер.ОбновитьЛенту(Объект.Ссылка, ЭтотОбъект, "ЛентаКонтакта",
		 Лента_Прокрутить,
		 Лента_НеЗаполнять);
	
	Если ЭтоАдресВременногоХранилища(АдресПараметровОповещения) Тогда
		
		ПараметрыОповещения = ПолучитьИзВременногоХранилища(АдресПараметровОповещения);
		УдалитьИзВременногоХранилища(АдресПараметровОповещения);
		АдресПараметровОповещения = "";
		
		Оповещение = Новый ОписаниеОповещения(ПараметрыОповещения.ИмяПроцедуры, ЭтотОбъект, ПараметрыОповещения.Параметры);
		ВыполнитьОбработкуОповещения(Оповещение, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбластьВвода 

&НаСервере
Функция ПолучитьЦветАктивнойНадписи()
	Возврат ЦветаСтиля.CRM_ОсновнойГолубой; 
КонецФункции

&НаСервере
Функция ПолучитьЦветНеАктивнойНадписи()
	Возврат ЦветаСтиля.ЦветТекстаКнопки; 
КонецФункции

&НаКлиенте
Процедура ПереключитьСтраницуБыстрогоВвода(Знач НовыйТипОбъекта, Знач ПолныйСброс = Ложь)
	
	Если БыстрыйВвод_ТекущийТипОбъекта = НовыйТипОбъекта И Не ПолныйСброс Тогда
		Возврат;
	КонецЕсли;
	
	Если CRM_ОбщегоНазначенияКлиент.ЭтоМобильныйКлиент() Тогда     
		ИмяТекущиейКнопки = "БыстрыйВвод_" + БыстрыйВвод_ТекущийТипОбъекта;  
		Элементы[ИмяТекущиейКнопки].ЦветТекста = ПолучитьЦветНеАктивнойНадписи();
		
		ИмяКнопки = "БыстрыйВвод_" + НовыйТипОбъекта;
		Элементы[ИмяКнопки].ЦветТекста = ПолучитьЦветАктивнойНадписи();
	Иначе	
		ИмяТекущиейКнопки = "БыстрыйВвод_" + БыстрыйВвод_ТекущийТипОбъекта;
		ТекущийШрифтКнопки = Элементы[ИмяТекущиейКнопки].Шрифт;
		Элементы[ИмяТекущиейКнопки].Шрифт = Новый Шрифт(ТекущийШрифтКнопки, , , Ложь);
		
		ИмяКнопки = "БыстрыйВвод_" + НовыйТипОбъекта;
		ШрифтКнопки = Элементы[ИмяКнопки].Шрифт;
		Элементы[ИмяКнопки].Шрифт = Новый Шрифт(ШрифтКнопки, , , Истина);  
	КонецЕсли;
	
	ИмяТекущейСтраницы = "БыстрыйВвод_Страница" + БыстрыйВвод_ТекущийТипОбъекта;
	Элементы[ИмяТекущейСтраницы].Видимость = Ложь;
	
	ИмяСтраницы = "БыстрыйВвод_Страница" + НовыйТипОбъекта;
	Элементы[ИмяСтраницы].Видимость = Истина;
	
	БыстрыйВвод_ТекущийТипОбъекта = НовыйТипОбъекта;
	
	НастроитьОбластьВводаПоСтранице(ПолныйСброс);
	Если БыстрыйВвод_ТекущийТипОбъекта = "Примечание" Тогда
		Элементы.БыстрыйВвод_ПримечаниеТема.ОбновитьТекстРедактирования();
	КонецЕсли;
	Если БыстрыйВвод_ТекущийТипОбъекта = "Файл" Тогда
		Элементы.БыстрыйВвод_ФайлОписание.ОбновитьТекстРедактирования();
	КонецЕсли;
	
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	
	Если ПолныйСброс Тогда
		Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
	Иначе	
		ИмяКнопкиСоздать = "БыстрыйВвод_Создать" + НовыйТипОбъекта;
		Элементы[ИмяКнопкиСоздать].КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Если БыстрыйВвод_ТекущийТипОбъекта = "Письмо" Тогда
		ПараметрыОтбора = Новый Структура("Тип", 
		ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
		АдресаЭП = Объект.КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
		Если АдресаЭП.Количество() > 0 Тогда
			ДанныеПолучателя = Новый Структура("Адрес, Контакт, Представление");
			ДанныеПолучателя.Адрес = АдресаЭП[0].АдресЭП;
			ДанныеПолучателя.Контакт = Объект.Ссылка;
			ДанныеПолучателя.Представление = Объект.Наименование;
			ЗаполнитьЗначенияСвойств(БыстрыйВвод_ПисьмоПолучатели.Добавить(), ДанныеПолучателя);
			
			ДанныеКонтактов = Новый Структура("Кому, Копии, Скрытые", БыстрыйВвод_ПисьмоПолучатели, 
			Новый Структура(), Новый Структура());
			ПредставленияКонтактов = CRM_ЛентаСобытий.ПредставленияКонтактовПисьма(ДанныеКонтактов);
			БыстрыйВвод_ПисьмоСписокПолучателейПисьма		= ПредставленияКонтактов.Кому;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОбластьВвода()
	
	Если ТолькоПросмотр Тогда
		Элементы.БыстрыйВвод_Страницы.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	НастроитьОбластьВводаПоСтранице();
	
	// Настройки элементов.
	Элементы.БыстрыйВвод_ЗадачаПолучатель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	Элементы.БыстрыйВвод_ВзаимодействиеПолучатель.ОграничениеТипа =
		Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛицаПартнеров");
	
	ПараметрыВыбораВида = Новый Массив;
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.Направление",
		 Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее));
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.ВидДела",
		 Справочники.CRM_ВидыДелВзаимодействий.ПрочиеДокументы));
	Элементы.БыстрыйВвод_ВзаимодействиеВид.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораВида);
	
	Элементы.БыстрыйВвод_ЗадачаДатаОкончания_Время.Видимость = Лента_ЗначенияНастроек.ВремяВСрокахЗадач;
	Элементы.БыстрыйВвод_Письмо.Видимость	= Лента_ЗначенияНастроек.ДоступнаПочта;
	
	БыстрыйВвод_ПисьмоОтправлятьСразу = Ложь;
	НастройкиРаботыСПочтой = Взаимодействия.НастройкиРаботыСПочтой();
	Если НастройкиРаботыСПочтой.Свойство("ОтправлятьСообщенияСразу")
		 И НастройкиРаботыСПочтой.ОтправлятьСообщенияСразу Тогда
		БыстрыйВвод_ПисьмоОтправлятьСразу = Истина;
	КонецЕсли;
	
	// Шаблоны рассылок
	СписокШаблонов.Очистить();
	ЗапросШаблонов = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШаблоныРассылки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_ШаблоныРассылки КАК ШаблоныРассылки
	|ГДЕ
	|	НЕ ШаблоныРассылки.ЭтоГруппа
	|	И НЕ ШаблоныРассылки.ШаблонОповещения");
	РезультатЗапроса = ЗапросШаблонов.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		СписокШаблонов.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	
	// Обычный ввод
	ОбычныйВвод_Команды.Очистить();
	ОписанияКоманд = CRM_ЛентаСобытий.КомандыОбычногоВводаЛенты("ЛентаКонтакта", Лента_ЗначенияНастроек);
	Если ОписанияКоманд.Количество() = 0 Тогда
		Элементы.ОбычныйВвод_ПоказатьЕще.Видимость = Ложь;
	Иначе
		Для Каждого ОписаниеКоманды Из ОписанияКоманд Цикл
			НоваяКоманда = ОбычныйВвод_Команды.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяКоманда, ОписаниеКоманды);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОбластьВводаПоСтранице(Знач ПолныйСброс = Ложь)
	
	// Общее
	ТекущаяДата = ТекущаяДатаСеанса();
	БыстрыйВвод_ДатаНачала = ТекущаяДата;
	Если ПолныйСброс Тогда
		// При создании или отмене создания объекта.
		БыстрыйВвод_Тема = "";
		БыстрыйВвод_Содержание = "";
		Если БыстрыйВвод_Вложения.Количество() > 0 Тогда
			БыстрыйВвод_Вложения.Очистить();
			CRM_ЛентаСобытий.ОбновитьЭлементыВложений(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Если БыстрыйВвод_ТекущийТипОбъекта = "Примечание" Тогда
		
		ТемаЗаполнена = ЗначениеЗаполнено(БыстрыйВвод_Тема);
		ВысотаТемы = ?(ТемаЗаполнена, 3, 1);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			 "БыстрыйВвод_ПримечаниеТема", "Высота",
			 ВысотаТемы);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			 "БыстрыйВвод_КомандыПримечание", "Видимость",
			 ТемаЗаполнена);
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Взаимодействие" Тогда
		
		БыстрыйВвод_Тема = СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " ");
		
		ДанныеВидаВзаимодействия = CRM_ЛентаСобытий.ДанныеВидаВзаимодействияПоУмолчанию("ЛентаКонтакта");
		БыстрыйВвод_ВзаимодействиеВид = ДанныеВидаВзаимодействия.Ссылка;
		Если БыстрыйВвод_Тема = "" Тогда
			БыстрыйВвод_Тема = ДанныеВидаВзаимодействия.Тема;
		КонецЕсли;
		Если БыстрыйВвод_Содержание = "" Тогда
			БыстрыйВвод_Содержание = ДанныеВидаВзаимодействия.Описание;
		КонецЕсли;
		
		БыстрыйВвод_ВзаимодействиеНаВесьДень = Ложь;
		Элементы.БыстрыйВвод_ВзаимодействиеДатаНачала_Время.Видимость = Истина;
		Элементы.БыстрыйВвод_ВзаимодействиеДатаОкончания_Время.Видимость = Истина;
		БыстрыйВвод_ДатаНачала = CRM_ОбщегоНазначенияКлиентСервер.ОкруглитьДатуДоМинут(БыстрыйВвод_ДатаНачала, 30);
		
		КоличествоСекундВМинуте		= 60;
		СтандартноеКоличествоМинут	= 30;
		
		Если ЗначениеЗаполнено(БыстрыйВвод_ВзаимодействиеВид)
				И ЗначениеЗаполнено(БыстрыйВвод_ВзаимодействиеВид.ДлительностьВстречиПоУмолчанию) Тогда
			БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала
				+ БыстрыйВвод_ВзаимодействиеВид.ДлительностьВстречиПоУмолчанию * КоличествоСекундВМинуте;
		Иначе
			БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + СтандартноеКоличествоМинут * КоличествоСекундВМинуте;
		КонецЕсли;
		
		БыстрыйВвод_ВзаимодействиеОтправитель = ТекущийПользователь;
		БыстрыйВвод_ВзаимодействиеПолучатель = Объект.Ссылка;
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Задача" Тогда
		
		БыстрыйВвод_Тема = СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " ");
		
		БыстрыйВвод_ЗадачаВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДень;
		БыстрыйВвод_ДатаОкончания = CRM_ОбщегоНазначенияКлиентСервер.ОкруглитьДатуДоМинут(ТекущаяДата, 30) + 86400;
		БыстрыйВвод_ЗадачаПолучатель = ТекущийПользователь;
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Письмо" Тогда
		
		БыстрыйВвод_Тема = СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " ");
		
		БыстрыйВвод_ПисьмоПолучатели.Очистить();
		БыстрыйВвод_ПисьмоПолучателиКопий.Очистить();
		БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Очистить();
		БыстрыйВвод_ПисьмоСписокПолучателейПисьма = "";
		БыстрыйВвод_ПисьмоСписокПолучателейКопий = "";
		БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий = "";
		
		УчетныеЗаписиПочтыСписокВыбора = Элементы.БыстрыйВвод_ПисьмоОтправительПредставление.СписокВыбора;
		УчетныеЗаписиПочтыСписокВыбора.Очистить();
		CRM_УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(УчетныеЗаписиПочтыСписокВыбора, ,
			 ТекущийПользователь);
		Если УчетныеЗаписиПочтыСписокВыбора.Количество() > 0 Тогда
			УчетнаяЗаписьПоУмолчанию = CRM_ЛентаСобытий.УчетнаяЗаписьПоУмолчанию(ТекущийПользователь);
			ЭлементСписка = УчетныеЗаписиПочтыСписокВыбора.НайтиПоЗначению(УчетнаяЗаписьПоУмолчанию);
			Если ЭлементСписка = Неопределено Тогда
				ЭлементСписка = УчетныеЗаписиПочтыСписокВыбора[0];
			КонецЕсли;
			БыстрыйВвод_ПисьмоУчетнаяЗапись = ЭлементСписка.Значение;
			БыстрыйВвод_ПисьмоОтправительПредставление = ЭлементСписка.Представление;
		КонецЕсли;
		
		ВладельцыКонтактнойИнформации = Новый Массив;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВладельцыКонтактнойИнформации.Добавить(Объект.Ссылка);
		КонецЕсли;
		
		ДанныеКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
			ВладельцыКонтактнойИнформации, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		БыстрыйВвод_ПисьмоИсторияАдресов.Очистить();
		Для Каждого Строка Из ДанныеКонтактнойИнформации Цикл
			ПредставлениеАдресаКонтакта = CRM_ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(Строка.Объект,
				 Строка.Представление,
				 "");
			БыстрыйВвод_ПисьмоИсторияАдресов.Добавить(ПредставлениеАдресаКонтакта);
		КонецЦикла;
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Файл" Тогда
		
		ЕстьВложения = (БыстрыйВвод_Вложения.Количество() > 0);
		ВысотаТемы = ?(ЗначениеЗаполнено(БыстрыйВвод_Тема), 3, 1);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_ФайлОписание",
			 "Высота",
			 ВысотаТемы);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_КомандыФайл",
			 "Видимость",
			 ЕстьВложения);
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Чат" Тогда
		
		Если БыстрыйВвод_ЧатПолучатели.Количество() > 0 Тогда
			ПервыйПолучатель = БыстрыйВвод_ЧатПолучатели[0];
			БыстрыйВвод_ЧатИдентификаторПолучателя = ПервыйПолучатель.Идентификатор;
			БыстрыйВвод_ЧатАдрес = ПервыйПолучатель.Адрес;
			БыстрыйВвод_ЧатПолучатель = ПервыйПолучатель.Контакт;
			БыстрыйВвод_ЧатПредставлениеПолучателя = ПервыйПолучатель.Представление;
			БыстрыйВвод_ЧатУчетнаяЗапись = ПервыйПолучатель.УчетнаяЗапись;
			БыстрыйВвод_ЧатПредставлениеУчетнойЗаписи = ПервыйПолучатель.УчетнаяЗапись;
			БыстрыйВвод_ЧатГруппа = ПервыйПолучатель.Группа;
			БыстрыйВвод_ЧатЭтоНомерТелефона = ПервыйПолучатель.ЭтоНомерТелефона;
			БыстрыйВвод_ЧатВидКИ = ПервыйПолучатель.ВидКИ;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьШаблоны(Команда)
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ПоказатьШаблоныЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОповещениеЗавершения, СписокШаблонов, Элементы.БыстрыйВвод_ПоказатьШаблоны);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьШаблоныЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Шаблон = ВыбранныйЭлемент.Значение;
	CRM_ЛентаСобытийКлиент.ПоказатьПолнуюФормуОбъекта("ЛентаИнтереса", БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект);
	Шаблон = ПредопределенноеЗначение("Справочник.CRM_ШаблоныРассылки.ПустаяСсылка");
	ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
	
КонецПроцедуры

&НаСервере
Процедура БыстрыйВвод_ОбновитьЭлементыВложений()
	
	CRM_ЛентаСобытий.ОбновитьЭлементыВложений(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СтатусыКонтактныхЛиц

&НаКлиенте
Процедура CRM_СтатусыПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	Элементы.ГруппаСтатусыВыбор.Показать();
	ПодключитьОбработчикОжидания("ПроверитьВсплывающиеГруппы", 0.3, Истина);
	
КонецПроцедуры // CRM_ТипыОтношенийНачалоВыбора()

&НаКлиенте
Процедура ПроверитьВсплывающиеГруппы()
	
	Если Элементы.ГруппаСтатусыВыбор.Скрыта() Тогда
		ТекущийЭлемент = Элементы.CRM_СтатусыПредставление;
		СформироватьСтатусыПредставление();
	Иначе	
		ПодключитьОбработчикОжидания("ПроверитьВсплывающиеГруппы", 0.3, Истина);
	КонецЕсли;
	
КонецПроцедуры // CRM_ТипыОтношенийНачалоВыбора()

&НаСервере
Процедура СформироватьСтатусыПредставление()
	
	Объект.CRM_Статусы.Очистить();
	Для Каждого Статус Из CRM_СтатусыКонтактныхЛиц Цикл
		Если Статус.Пометка Тогда
			НовСтр = Объект.CRM_Статусы.Добавить();
			НовСтр.Статус = Статус.Значение;	
		КонецЕсли;	
	КонецЦикла;
	
	CRM_СтатусыТемп = "";
	
	Для Каждого Строка Из Объект.CRM_Статусы Цикл
		CRM_СтатусыТемп = CRM_СтатусыТемп  + "; " + Строка.Статус;
	КонецЦикла;	
	Если СтрДлина(CRM_СтатусыТемп) > 0 Тогда
		CRM_СтатусыТемп = Сред(CRM_СтатусыТемп, 3);
	КонецЕсли;	
	Объект.CRM_СтатусыПредставление = CRM_СтатусыТемп;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТегов

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Тег".
//
Процедура ТегПриИзменении(Элемент)
	CRM_ТегиКлиент.ТегПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Создание" элемента формы "Тег".
//
Процедура ТегСоздание(Элемент, СтандартнаяОбработка)
	CRM_ТегиКлиент.ТегСоздание(Элемент, СтандартнаяОбработка, ТекущееПодразделение);
КонецПроцедуры

// Процедура - обработчик события "ОбработкаНавигационнойСсылки" элемента формы "Тег".
&НаКлиенте
Процедура Подключаемый_ТегОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)	
	CRM_ТегиКлиент.ТегОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
// Процедура обновляет отображение тегов на форме.
//
Процедура ОбновитьОблакоТегов()
	
	CRM_Теги.ОбновитьОблакоТегов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ДублиКлиента

&НаСервереБезКонтекста
Процедура ДублиКлиентаДобавлениеНаСервере(Оригинал, Дубль)
	ЗаписьДубля = РегистрыСведений.CRM_ДублиКлиентовИКонтактов.СоздатьМенеджерЗаписи();
	ЗаписьДубля.Контакт = Дубль;
	ЗаписьДубля.Оригинал = Оригинал;
	ЗаписьДубля.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ДублиКлиентаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения("ДублиКлиентаДобавление", ЭтотОбъект);
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаВыбора", , ЭтотОбъект, , , ,
		 ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДублиКлиентаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	Дубли_Удалить(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДублиКлиентаДобавление(Дубль, ДопПараметр) Экспорт
	Если ЗначениеЗаполнено(Дубль) Тогда
		Если Объект.Ссылка = Дубль Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нельзя выбирать текущий элемент!'"));
			Возврат;
		КонецЕсли;
		ДублиКлиентаДобавлениеНаСервере(Объект.Ссылка, Дубль);
		Элементы.ДублиКлиента.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Дубли_ДобавитьНаСервере(Оригинал, Дубль)
	РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ЗаписатьДубль(Оригинал, Дубль);
	СформироватьТаблицуДублей();
КонецПроцедуры

&НаКлиенте
Процедура Дубли_Добавить(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("Дубли_Добавить_Продолжение", ЭтотОбъект);
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаВыбора", , ЭтотОбъект, , , ,
		 ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура Дубли_Добавить_Продолжение(Дубль, ДопПараметр) Экспорт
	Если ЗначениеЗаполнено(Дубль) Тогда
		Если Объект.Ссылка = Дубль Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нельзя выбирать текущий элемент!'"));
			Возврат;
		КонецЕсли;
		Если ДублиКлиента.НайтиСтроки(Новый Структура("Контакт", Дубль)).Количество() > 0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выбранный элемент уже есть в списке дублей!'"));
			Возврат;
		КонецЕсли;
		Дубли_ДобавитьНаСервере(Объект.Ссылка, Дубль);
		Элементы.ДублиКлиента.Обновить();
		Дубли_ОбновитьЗаголовок();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Дубли_ОтметитьКакОригиналНаСервере(Контакт)
	РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ОтметитьКакОригинал(Контакт);
	СформироватьТаблицуДублей();
КонецПроцедуры

&НаКлиенте
Процедура Дубли_ОтметитьКакОригинал(Команда)
	Если Элементы.ДублиКлиента.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Дубли_ОтметитьКакОригиналНаСервере(Элементы.ДублиКлиента.ТекущиеДанные.Контакт);
	Элементы.ДублиКлиента.Обновить();
	Дубли_ОбновитьЗаголовок();
КонецПроцедуры

&НаСервере
Процедура Дубли_УдалитьНаСервере(Контакт)
	Если Элементы.ДублиКлиента.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	РегистрыСведений.CRM_ДублиКлиентовИКонтактов.УдалитьДубль(Контакт);
	СформироватьТаблицуДублей();
КонецПроцедуры

&НаКлиенте
Процедура Дубли_Удалить(Команда)   
	Если Элементы.ДублиКлиента.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	ИначеЕсли Элементы.ДублиКлиента.ТекущиеДанные.ЭтоОригинал Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нельзя удалить дубль, помеченный как оригинал!'"));
		Возврат;
	КонецЕсли;
	Дубли_УдалитьНаСервере(Элементы.ДублиКлиента.ТекущиеДанные.Контакт);
КонецПроцедуры

&НаСервере
Процедура Дубли_ОбновитьЗаголовок()
	Дубли_Заголовок = НСтр("ru = 'Дубли'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Дубли_Количество = Дубли_КоличествоДублей(Объект.Ссылка);
		Если Дубли_Количество > 0 Тогда
			Дубли_Заголовок = Дубли_Заголовок + " (" + Дубли_Количество + ")";
		КонецЕсли;
	КонецЕсли;
	Если Элементы.ГруппаДублиКлиента.Заголовок <> Дубли_Заголовок Тогда
		Элементы.ГруппаДублиКлиента.Заголовок = Дубли_Заголовок;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция Дубли_КоличествоДублей(Ссылка)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал КАК Оригинал
	               |ПОМЕСТИТЬ ВТОригинал
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт = &ТекОбъект
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт КАК Контакт
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал = &ТекОбъект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт = &ТекОбъект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт
	               |ИЗ
	               |	ВТОригинал КАК ВТОригинал
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |		ПО ВТОригинал.Оригинал = CRM_ДублиКлиентовИКонтактов.Оригинал
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт <> &ТекОбъект
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контакт)
	               |ПО
	               |	ОБЩИЕ";
	Запрос.УстановитьПараметр("ТекОбъект", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Контакт;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция Дубли_ТаблицаДублей(Ссылка)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал КАК Оригинал
	               |ПОМЕСТИТЬ ВТОригинал
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт = &ТекОбъект
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт КАК Контакт,
	               |	CRM_ДублиКлиентовИКонтактов.Заменить КАК Заменить,
	               |	CRM_ДублиКлиентовИКонтактов.Комментарий КАК Комментарий,
	               |	CRM_ДублиКлиентовИКонтактов.Дата КАК Дата,
	               |	CRM_ДублиКлиентовИКонтактов.Автор КАК Автор,
	               |	ЛОЖЬ КАК ЭтоОригинал
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал = &ТекОбъект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал,
	               |	ЛОЖЬ,
	               |	CRM_ДублиКлиентовИКонтактов.Комментарий,
	               |	CRM_ДублиКлиентовИКонтактов.Дата,
	               |	CRM_ДублиКлиентовИКонтактов.Автор,
	               |	ИСТИНА
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт = &ТекОбъект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт,
	               |	CRM_ДублиКлиентовИКонтактов.Заменить,
	               |	CRM_ДублиКлиентовИКонтактов.Комментарий,
	               |	CRM_ДублиКлиентовИКонтактов.Дата,
	               |	CRM_ДублиКлиентовИКонтактов.Автор,
	               |	ЛОЖЬ
	               |ИЗ
	               |	ВТОригинал КАК ВТОригинал
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |		ПО ВТОригинал.Оригинал = CRM_ДублиКлиентовИКонтактов.Оригинал
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт <> &ТекОбъект";
	Запрос.УстановитьПараметр("ТекОбъект", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

&НаСервере
Процедура СформироватьТаблицуДублей()
	
	Если Объект.Ссылка.Пустая() Тогда
		
	Иначе
		ЗначениеВРеквизитФормы(Дубли_ТаблицаДублей(Объект.Ссылка), "ДублиКлиента");
		Дубли_ОбновитьЗаголовок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДублиКлиентаПриИзмененииНаСервере(Оригинал, Дубль, Заменить, Комментарий)
	РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ЗаписатьДубль(Оригинал, Дубль, Заменить, Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ДублиКлиентаПриИзменении(Элемент)
	ТекДанные = Элемент.ТекущиеДанные;
	СтрОригинал = ДублиКлиента.НайтиСтроки(Новый Структура("ЭтоОригинал", Истина));
	Если СтрОригинал.Количество() Тогда
		Оригинал = СтрОригинал[0].Контакт;
	Иначе
		Оригинал = Объект.Ссылка;
	КонецЕсли;
	ДублиКлиентаПриИзмененииНаСервере(Оригинал, ТекДанные.Контакт, ТекДанные.Заменить, ТекДанные.Комментарий);
КонецПроцедуры

#КонецОбласти

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ИмяРеквизита",                     "РаспознаваниеРечи");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекЭлемент = Контекст.Форма.ТекущийЭлемент;
	ИмяРеквизита = "";
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяЭлемента", ТекЭлемент.Имя);
	
	НайденныеСтроки = ЭтотОбъект["РаспознаваниеРечи_ТаблицаЭлементов"].НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = НайденныеСтроки[0].ИмяРеквизита;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		ТекЭлемент,
		ИмяРеквизита,
		РезультатРаспознавания);
	
	РаспознанныйТекст =
		CRM_ОбработкаРаспознанногоТекстаКлиентСервер.ТекстИзРезультатаРаспознавания(РезультатРаспознавания);
	Если ТекЭлемент.Имя = "БыстрыйВвод_ПримечаниеТема" Тогда
		РаспознанныйТекст = ТекЭлемент.ТекстРедактирования + РаспознанныйТекст;
		БыстрыйВвод_ПримечаниеТемаИзменениеТекстаРедактирования(ТекЭлемент, РаспознанныйТекст, Истина);
	ИначеЕсли ТекЭлемент.Имя = "БыстрыйВвод_ФайлОписание" Тогда
		РаспознанныйТекст = ТекЭлемент.ТекстРедактирования + РаспознанныйТекст;
		БыстрыйВвод_ФайлОписаниеИзменениеТекстаРедактирования(ТекЭлемент, РаспознанныйТекст, Истина);
	Иначе
		// Обработка не требуется. Распознанный текст уже заполнен.
	КонецЕсли;
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	Если ТекЭлемент.Имя = "Наименование" Тогда
		НаименованиеПриИзменении(ТекЭлемент);
	ИначеЕсли ТекЭлемент.Имя = "CRM_Фамилия" Тогда
		CRM_ФамилияПриИзменении(ТекЭлемент);
	ИначеЕсли ТекЭлемент.Имя = "CRM_Имя" Тогда
		CRM_ИмяПриИзменении(ТекЭлемент);
	ИначеЕсли ТекЭлемент.Имя = "CRM_Отчество" Тогда
		CRM_ОтчествоПриИзменении(ТекЭлемент);
	Иначе
		// Обработка не требуется
	КонецЕсли;
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Наименование");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "CRM_Фамилия");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "CRM_Имя");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "CRM_Отчество");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Комментарий");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "CRM_ЛичныеИнтересы");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ПримечаниеТема");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ВзаимодействиеТема");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_Содержание");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ЗадачаТема");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_Описание");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ПисьмоТема");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ФайлОписание");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ПисьмоСодержание");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ЧатСодержание");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

#Область КонтрольЗаполнения

&НаКлиенте
Процедура Подключаемый_ОбновитьПроцентЗаполнения(Команда)

	CRM_КлиентыКлиент.ОбновитьПроцентЗаполнения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьНастройкиЗаполнения(Команда)

	ПараметрыНастройки = Новый Структура("СтатусРаботыСКлиентом, ТипОбъекта",
		CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Владелец, "CRM_СтатусРаботы"),
		"Справочник.КонтактныеЛицаПартнеров");
	ОткрытьФорму("Справочник.CRM_ПравилаРасчетаКачестваЗаполненияДанных.Форма.ФормаНастройки", ПараметрыНастройки);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти
