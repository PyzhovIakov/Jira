//@strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//++ Локализация
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "УправлениеПечатью";
	КомандаПечати.Идентификатор = "Справочник.ВидыРетроБонусовПоставщиков.ПФ_MXL_Карточка";
	КомандаПечати.Представление = НСтр("ru = 'Карточка'");
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "ЭтоГруппа", Ложь);
	
	//-- Локализация
	
КонецПроцедуры

// Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов.
//
//	Возвращаемое значение:
//		Массив из Строка - массив имен реквизитов.
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив; // Массив из Строка
	
	НеРедактируемыеРеквизиты.Добавить("*");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Прочее

// Вид ретро бонуса используется в документах
// 
// Параметры:
//  Объект - СправочникОбъект.ВидыРетроБонусовПоставщиков -
//  	   - см. Справочник.ВидыРетроБонусовПоставщиков.Форма.ФормаЭлемента.Объект 
//  ПроверятьСБлокировкой - Булево - Проверять с блокировкой на документы
// 
// Возвращаемое значение:
//  Булево - Вид ретро бонуса используется
//
Функция ВидРетроБонусаИспользуется(Объект, ПроверятьСБлокировкой = Ложь) Экспорт
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ПроверятьСБлокировкой Тогда
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("Документ.УсловияРетроБонусовПоставщика");
		ЭлементБлокировки.УстановитьЗначение("ВидРетроБонуса", Объект.Ссылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		// Вызывается из внешней транзакции записи
		//@skip-check lock-out-of-try
		Блокировка.Заблокировать();
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидРетроБонуса", Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УсловияРетроБонусовПоставщика.Ссылка
	|ИЗ
	|	Документ.УсловияРетроБонусовПоставщика КАК УсловияРетроБонусовПоставщика
	|ГДЕ
	|	УсловияРетроБонусовПоставщика.ВидРетроБонуса = &ВидРетроБонуса";
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// Определяет свойства полей формы в зависимости от данных
//
// Параметры:
//	Настройки - ТаблицаЗначений - таблица с колонками:
//		* Поля - Массив из Строка - поля, для которых определяются настройки отображения
//		* Условие - ОтборКомпоновкиДанных - условия применения настройки
//		* Свойства - Структура - имена и значения свойств
//
Процедура ЗаполнитьНастройкиПолейФормы(Настройки) Экспорт
	
	МодульНастройки = ФинансоваяОтчетностьСервер;
	
	НастройкаПоляТипБонуса(Настройки, МодульНастройки);
	НастройкаПоляВыполнениеУсловийПоПокупателям(Настройки, МодульНастройки);
	НастройкаПоляБезРасчета(Настройки, МодульНастройки);
	НастройкаПоляПоказательТоваров(Настройки, МодульНастройки);
	НастройкаПоляБазаРасчета(Настройки, МодульНастройки);
	НастройкаПоляПериодичностьУсловий(Настройки, МодульНастройки);
	НастройкаПоляСУчетомНДС(Настройки, МодульНастройки);
	НастройкаПоляСоставУчастников(Настройки, МодульНастройки);
	НастройкаПоляОтборУчастников(Настройки, МодульНастройки);
	НастройкаПоляСоставТоваров(Настройки, МодульНастройки);
	НастройкаПоляОтборТоваров(Настройки, МодульНастройки);
	НастройкаПоляПорядокРаспределения(Настройки, МодульНастройки);
	НастройкаПоляПериодичностьНачислений(Настройки, МодульНастройки);
	НастройкаПоляДекорацииИспользования(Настройки, МодульНастройки);
	
КонецПроцедуры

// Устанавливает статус вида ретро-бонуса
//
// Параметры:
//	ВидыРетроБонусов - Массив из СправочникСсылка.ВидыРетроБонусовПоставщиков - Массив ссылок на виды ретро-бонусов
//	Статус - ПеречислениеСсылка.СтатусыВидовРетроБонусов - Статус, который будет установлен у видов ретро-бонусов
//
// Возвращаемое значение:
//	Число - Количество обработанных объектов.
//
Функция УстановитьСтатус(Знач ВидыРетроБонусов, Знач Статус) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСсылок = Новый Массив(); // Массив из СправочникСсылка.ВидыРетроБонусовПоставщиков
	КоличествоОбработанных = 0;
	
	Для Каждого ВидРетроБонуса Из ВидыРетроБонусов Цикл
		
		Если ТипЗнч(ВидРетроБонуса) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСсылок.Добавить(ВидРетроБонуса);
		
	КонецЦикла;
	
	Если МассивСсылок = 0 Тогда
		Возврат КоличествоОбработанных;
	КонецЕсли;
	
	РеквизитыВидов = ВыборкаРеквизитовВидов(МассивСсылок, Статус); 
	
	Пока РеквизитыВидов.Следующий() Цикл
		
		Если РеквизитыВидов.ПометкаУдаления Тогда
			
			ШаблонОшибки = НСтр("ru = 'Вид ретро-бонуса ""%1"" помечен на удаление. Изменение статуса пропущено'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				РеквизитыВидов.Представление);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, РеквизитыВидов.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		Если РеквизитыВидов.СтатусСовпадает Тогда
			
			ШаблонОшибки = НСтр("ru = 'Виду ретро-бонуса ""%1"" уже присвоен статус ""%2""'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				РеквизитыВидов.Представление,
				Строка(Статус));
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, РеквизитыВидов.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		Если РеквизитыВидов.Используется
		   И Статус = Перечисления.СтатусыВидовРетроБонусов.Подготовлен Тогда
			
			ШаблонОшибки = НСтр("ru = 'Вид ретро-бонуса ""%1"" уже используется в документах, установка статуса ""%2"" запрещена""'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				РеквизитыВидов.Представление,
				Строка(Статус));
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, РеквизитыВидов.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(РеквизитыВидов.Ссылка);
			
		Исключение
			
			ОписаниеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ШаблонОшибки = НСтр("ru = 'Не удалось заблокировать вид ретро-бонуса""%1"". %2'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				РеквизитыВидов.Представление,
				ОписаниеОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, РеквизитыВидов.Ссылка);
			
			Продолжить;
			
		КонецПопытки;
		
		Объект = РеквизитыВидов.Ссылка.ПолучитьОбъект();
		Объект.Статус = Статус;	
		
		Если Объект.ПроверитьЗаполнение() Тогда
			
			Попытка
				
				Объект.Записать();
				КоличествоОбработанных = КоличествоОбработанных + 1;
				
			Исключение
				
				ОписаниеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ШаблонОшибки = НСтр("ru = 'Не удалось записать %1. %2'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонОшибки,
					РеквизитыВидов.Представление,
					ОписаниеОшибки);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, РеквизитыВидов.Ссылка);
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоличествоОбработанных;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область МетодыНастройкиПолейФормы

Процедура НастройкаПоляТипБонуса(Настройки, МодульНастройки)
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ТипБонуса");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "БезРасчета", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ТипБонуса");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ВидРетроБонусаИспользуется", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляВыполнениеУсловийПоПокупателям(Настройки, МодульНастройки);
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ВыполнениеУсловийПоПокупателям");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	
	ГруппаНЕ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаИЛИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе);
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаНЕ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	МодульНастройки.НовыйОтбор(
		ГруппаИ,
		"ТипБонуса",
		Перечисления.ТипыРетроБонусовПоставщиков.Продажи);
	МодульНастройки.НовыйОтбор(
		ГруппаИ,
		"ПоказательТоваров",
		Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.НеИспользуется,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ВыполнениеУсловийПоПокупателям");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ВидРетроБонусаИспользуется", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляБезРасчета(Настройки, МодульНастройки)
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("БезРасчета");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ВидРетроБонусаИспользуется", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	
КонецПроцедуры

Процедура НастройкаПоляПоказательТоваров(Настройки, МодульНастройки)
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ПоказательТоваров");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ТипБонуса", Перечисления.ТипыРетроБонусовПоставщиков.Остатки);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ПоказательТоваров");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ВидРетроБонусаИспользуется", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляБазаРасчета(Настройки, МодульНастройки)
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("БазаРасчета");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ТипБонуса", Перечисления.ТипыРетроБонусовПоставщиков.Остатки);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("БазаРасчета");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ВидРетроБонусаИспользуется", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляСоставУчастников(Настройки, МодульНастройки)
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("СоставУчастников");
	
	МодульНастройки.НовыйОтбор(
		Элемент.Условие,
		"ТипБонуса",
		Перечисления.ТипыРетроБонусовПоставщиков.Продажи,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("СоставУчастников");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ВидРетроБонусаИспользуется", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляОтборУчастников(Настройки, МодульНастройки)
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ОтборУчастников");
	
	МодульНастройки.НовыйОтбор(
		Элемент.Условие,
		"ТипБонуса",
		Перечисления.ТипыРетроБонусовПоставщиков.Продажи,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ОтборУчастников");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "БезРасчета", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляСоставТоваров(Настройки, МодульНастройки)
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("СоставТоваров");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "БезРасчета", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	ОтборПолей = БазовыйОтборТоваров(МодульНастройки);
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("СоставТоваров");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.СкопироватьОтбор(ОтборПолей, ГруппаИЛИ);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Дополнительно.ИспользуютсяСегментыНоменклатуры", Ложь);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Дополнительно.ВидРетроБонусаИспользуется", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляОтборТоваров(Настройки, МодульНастройки)
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ОтборТоваров");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "БезРасчета", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	ОтборПолей = БазовыйОтборТоваров(МодульНастройки);
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ОтборТоваров");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.СкопироватьОтбор(ОтборПолей, ГруппаИЛИ);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Функция БазовыйОтборТоваров(МодульНастройки)
	
	ПоказателиПоТоварам = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам;
	БазыБонусов = Перечисления.БазыРасчетаРетроБонусов;
	
	Отбор = Новый ОтборКомпоновкиДанных();
	
	МодульНастройки.НовыйОтбор(Отбор, "БезРасчета", Истина);
	МодульНастройки.НовыйОтбор(Отбор, "ТипБонуса", Перечисления.ТипыРетроБонусовПоставщиков.Остатки);
	
	ЦелевыеПоказатели = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам
	ЦелевыеПоказатели.Добавить(ПоказателиПоТоварам.Количество);
	ЦелевыеПоказатели.Добавить(ПоказателиПоТоварам.КоличествоСовокупно);
	ЦелевыеПоказатели.Добавить(ПоказателиПоТоварам.ПакетноеПредложение);
	МодульНастройки.НовыйОтбор(
		Отбор, "ПоказательТоваров", ЦелевыеПоказатели,, ВидСравненияКомпоновкиДанных.ВСписке);
	
	БазыРасчета = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.БазыРасчетаРетроБонусов
	БазыРасчета.Добавить(БазыБонусов.ВыручкаБазовыеЦены);
	БазыРасчета.Добавить(БазыБонусов.СуммаЗакупкиБазовыеЦены);
	МодульНастройки.НовыйОтбор(
		Отбор, "БазаРасчета", БазыРасчета,, ВидСравненияКомпоновкиДанных.ВСписке);
	
	Возврат Отбор;
	
КонецФункции

Процедура НастройкаПоляПериодичностьУсловий(Настройки, МодульНастройки)
	
	ПоказателиПродаж = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам;
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ПериодичностьУсловий");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ПоказательТоваров", ПоказателиПродаж.НеИспользуется);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ТипБонуса", Перечисления.ТипыРетроБонусовПоставщиков.Остатки);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	
КонецПроцедуры

Процедура НастройкаПоляСУчетомНДС(Настройки, МодульНастройки)
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("УчитыватьНДС");
	
	БазыРасчета = Перечисления.БазыРасчетаРетроБонусов;
	ТипыБонусов = Перечисления.ТипыРетроБонусовПоставщиков;
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	
	ГруппаНЕ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаИЛИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе);
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаНЕ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ДопустимыеТипыБонусов = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.ТипыРетроБонусовПоставщиков
	ДопустимыеТипыБонусов.Добавить(ТипыБонусов.Продажи);
	ДопустимыеТипыБонусов.Добавить(ТипыБонусов.Закупки);
	МодульНастройки.НовыйОтбор(ГруппаИ, "ТипБонуса", ДопустимыеТипыБонусов,, ВидСравненияКомпоновкиДанных.ВСписке);
	
	ЗапрещенныеБазы = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.БазыРасчетаРетроБонусов
	ЗапрещенныеБазы.Добавить(БазыРасчета.ПустаяСсылка());
	ЗапрещенныеБазы.Добавить(БазыРасчета.ВыручкаБазовыеЦены);
	ЗапрещенныеБазы.Добавить(БазыРасчета.СуммаЗакупкиБазовыеЦены);
	МодульНастройки.НовыйОтбор(ГруппаИ, "БазаРасчета", ЗапрещенныеБазы,, ВидСравненияКомпоновкиДанных.НеВСписке);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("УчитыватьНДС");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ВидРетроБонусаИспользуется", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляПорядокРаспределения(Настройки, МодульНастройки)
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ПорядокРаспределения");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	
	ГруппаНЕ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаИЛИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе);
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаНЕ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	МодульНастройки.НовыйОтбор(ГруппаИ, "ТипБонуса", Перечисления.ТипыРетроБонусовПоставщиков.Закупки);
	
	ПоказателиТоваров = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам
	ПоказателиТоваров.Добавить(Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.Количество);
	ПоказателиТоваров.Добавить(Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.ПакетноеПредложение);
	МодульНастройки.НовыйОтбор(ГруппаИ, "ПоказательТоваров", ПоказателиТоваров,, ВидСравненияКомпоновкиДанных.ВСписке);
	
	МодульНастройки.НовыйОтбор(
		ГруппаИ,
		"БазаРасчета",
		Перечисления.БазыРасчетаРетроБонусов.СуммаЗакупкиБазовыеЦены,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ПорядокРаспределения");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Дополнительно.ВидРетроБонусаИспользуется", Истина);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ТипБонуса", Перечисления.ТипыРетроБонусовПоставщиков.Остатки);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляПериодичностьНачислений(Настройки, МодульНастройки)
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ПериодичностьНачислений");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ТипБонуса", Перечисления.ТипыРетроБонусовПоставщиков.Остатки);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ПериодичностьНачислений");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "ТипБонуса", Перечисления.ТипыРетроБонусовПоставщиков.Остатки);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляДекорацииИспользования(Настройки, МодульНастройки)
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ДекорацияВидРетроБонусаИспользуется");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ВидРетроБонусаИспользуется", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Выборка реквизитов видов для обновления статусов
// 
// Параметры:
//  Виды  - Массив из СправочникСсылка.ВидыРетроБонусовПоставщиков- Массив ссылок
//  Статус - ПеречислениеСсылка.СтатусыВидовРетроБонусов - Статус
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - Выборка реквизитов видов:
//	* Представление - Строка
//	* Ссылка - СправочникСсылка.ВидыРетроБонусовПоставщиков
//	* СтатусСовпадает - Булево
//	* ПометкаУдаления - Булево
//	* Используется - Булево - используется в документах условий ретро-бонусов
//
Функция ВыборкаРеквизитовВидов(Виды, Статус)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыРетроБонусов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ИспользуемыеВиды
	|ИЗ
	|	Справочник.ВидыРетроБонусовПоставщиков КАК ВидыРетроБонусов
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.УсловияРетроБонусовПоставщика КАК УсловияРетроБонусовПоставщика
	|			ГДЕ
	|				УсловияРетроБонусовПоставщика.ВидРетроБонуса = ВидыРетроБонусов.Ссылка)
	|	И ВидыРетроБонусов.Ссылка В(&Виды)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыРетроБонусов.Представление КАК Представление,
	|	ВидыРетроБонусов.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ВидыРетроБонусов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ВидыРетроБонусов.ПометкаУдаления КАК ПометкаУдаления,
	|	НЕ ИспользуемыеВиды.Ссылка ЕСТЬ NULL КАК Используется
	|ИЗ
	|	Справочник.ВидыРетроБонусовПоставщиков КАК ВидыРетроБонусов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИспользуемыеВиды КАК ИспользуемыеВиды
	|		ПО ВидыРетроБонусов.Ссылка = ИспользуемыеВиды.Ссылка
	|ГДЕ
	|	ВидыРетроБонусов.Ссылка В(&Виды)";
	
	Запрос.УстановитьПараметр("Виды", Виды);
	Запрос.УстановитьПараметр("Статус", Статус);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли