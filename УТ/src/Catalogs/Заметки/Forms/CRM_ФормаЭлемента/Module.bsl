
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Предмет) Тогда
		Объект.Предмет = Параметры.Предмет;
		Объект.ПредставлениеПредмета = ОбщегоНазначения.ПредметСтрокой(Объект.Предмет);
	КонецЕсли;
	
	Элементы.Предмет.Заголовок = Объект.ПредставлениеПредмета;
	Элементы.ГруппаПредмет.Видимость = ЗначениеЗаполнено(Объект.Предмет);
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			ФорматированныйТекст = Параметры.ЗначениеКопирования.Содержание.Получить();
			ТекстHTMLРедактор = Параметры.ЗначениеКопирования.CRM_СодержаниеHTML.Получить();
			
			Объект.ДляРабочегоСтола = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения) Тогда
			
			ДанныеЗаполнения = Параметры.ЗначенияЗаполнения;
			ЗаполнитьЗначенияСвойств(Объект, ДанныеЗаполнения);
			
			ШрифтПоУмолчанию = ПолучитьЩрифтПоУмлолчанию();
			СтрокаИмяШрифта = СтрШаблон("face=""%1""", ШрифтПоУмолчанию.Имя);
			
			ДокументHTML = Взаимодействия.ПолучитьДокументHTMLИзОбычногоТекста(ДанныеЗаполнения.ТекстСодержания);
			ТекстHTML    = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			ТекстHTML    = СтрЗаменить(ТекстHTML, "size=""2""", "");
			ТекстHTML    = СтрЗаменить(ТекстHTML, "face=""Tahoma""", СтрокаИмяШрифта);
			
			ФорматированныйТекст.УстановитьHTML(ТекстHTML, Новый Структура);
			ТекстHTMLРедактор = ТекстHTML;
			
			Объект.ДляРабочегоСтола = Ложь;
			
		КонецЕсли;
		
		// Дозаполнение по умолчанию.
		Если Не ЗначениеЗаполнено(Объект.Автор) Тогда
			Объект.Автор = Пользователи.ТекущийПользователь();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.ДатаИзменения) Тогда
			Объект.ДатаИзменения = ТекущаяДатаСеанса();
		КонецЕсли;
		
	Иначе
		Элементы.ДатаЗаметки.Заголовок = Формат(Объект.ДатаИзменения, "ДФ='dd.MM.yyyy ""в"" HH:mm'");
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// +CRM_HTML
	Если ПустаяСтрока(ТекстHTMLРедактор) Тогда
		// Необходимые теги для редактора.
		CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстHTMLРедактор);
		
		// Шрифт по умолчанию из настроек.
		ШрифтПоУмолчанию = ПолучитьЩрифтПоУмлолчанию();
	КонецЕсли;
	// -CRM_HTML
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// +CRM_HTML
	CRM_РаботаСHTML.УстановитьУбратьСкриптВставки(ТекстHTMLРедактор);
	// -CRM_HTML
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ФорматированныйТекст = ТекущийОбъект.Содержание.Получить();
	
	// +CRM_HTML
	ТекстHTMLРедактор = ТекущийОбъект.CRM_СодержаниеHTML.Получить();
	// -CRM_HTML
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// СтандартныеПодсистемы.УправлениеДоступом
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.УправлениеДоступом
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// +CRM_HTML
	ТекстHTMLПриЗаписи = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ТекстHTMLРедактор);
	
	CRM_РаботаСHTML.УстановитьУбратьСкриптВставки(ТекстHTMLПриЗаписи, Истина);
	
	Если Элементы.ПроверкаПравописания.Пометка Тогда
		ТекстHTMLРедактор = CRM_ПроверкаПравописанияКлиент.СкрытьОшибки(Элементы.ТекстHTMLРедактор);
	КонецЕсли;
	// -CRM_HTML
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// +CRM_HTML
	ТекущийОбъект.CRM_СодержаниеHTML = Новый ХранилищеЗначения(ТекстHTMLПриЗаписи, Новый СжатиеДанных(9));
	ФорматированныйТекст.УстановитьHTML(ТекстHTMLПриЗаписи, Новый Структура);
	// -CRM_HTML
	
	ТекущийОбъект.Содержание = Новый ХранилищеЗначения(ФорматированныйТекст, Новый СжатиеДанных(9));
	
	ТекстHTML = "";
	Вложения = Новый Структура;
	ФорматированныйТекст.ПолучитьHTML(ТекстHTML, Вложения);
	
	// +CRM
	//ТекущийОбъект.ТекстСодержания = СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(ТекстHTML);
	ТекущийОбъект.ТекстСодержания = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекстHTML);
	// -CRM
	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// СтандартныеПодсистемы.УправлениеДоступом
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.УправлениеДоступом
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Элементы.ДатаЗаметки.Заголовок = Формат(Объект.ДатаИзменения, "ДФ='dd.MM.yyyy ""в"" HH:mm'");
	ОповеститьОбИзменении(Объект.Ссылка);
	Оповестить("ЛентаСобытий_Обновить");
	
	// +CRM_HTML
	Если Элементы.ПроверкаПравописания.Пометка Тогда
		ПроверяемыйТекст = Элементы.ТекстHTMLРедактор.Документ.documentElement.outerHTML;
		CRM_ПроверкаПравописанияКлиент.ПоказатьОшибки(ЭтотОбъект, Элементы.ТекстHTMLРедактор,
			 ТекстHTMLРедактор,
			 ПроверяемыйТекст);
	КонецЕсли;
	// -CRM_HTML
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

// +CRM
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "ПроверкаПравописания_ИзмененТекст") И (Источник = ЭтотОбъект) Тогда
		ТекстHTMLРедактор = Параметр.Текст;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры
// -CRM

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.CRM_ФормированиеCсылкиНаОбъект") Тогда
		CRM_РаботаСHTMLКлиент.ВставитьСсылкуНаОбъект(Элементы.ТекстHTMLРедактор, ВыбранноеЗначение.Ссылка,
			ВыбранноеЗначение.ПредставлениеСсылки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредметНажатие(Элемент)
	ПоказатьЗначение(, Объект.Предмет);
КонецПроцедуры

&НаКлиенте
Процедура АвторНажатие(Элемент)
	ПоказатьЗначение(, Объект.Автор);
КонецПроцедуры

// +CRM
&НаКлиенте
Процедура СодержаниеПриИзменении(Элемент)
	Заголовок = Лев(ФорматированныйТекст.ПолучитьТекст(), 50);
КонецПроцедуры
// -CRM

// +CRM_HTML
&НаКлиенте
Процедура ТекстHTMLРедакторПриИзменении(Элемент)
	
	ФорматированныйТекст.УстановитьHTML(ТекстHTMLРедактор, Новый Структура);
	СодержаниеПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуСписка(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИмяКоманды = Сред(Элемент.Имя, 8);
	
	CRM_РаботаСHTMLКлиент.ВыполнитьHTMLКоманду(ЭтотОбъект, Элементы.ТекстHTMLРедактор, ИмяКоманды, ВыбранноеЗначение);
	
	ТекущийЭлемент = Элементы.ТекстHTMLРедактор;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстHTMLРедакторДокументСформирован(Элемент)
	
	ТекстПисьмаПриОткрытии = Элементы.ТекстHTMLРедактор.Документ.body.innerHTML; 
	CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьмаПриОткрытии);
	
	CRM_РаботаСHTMLКлиент.ПолеHTMLДокументСформирован(ЭтотОбъект, Элемент);
	
	УстановитьШрифтПисьмаИзНастроек();
	
	ОкноБраузераТекстаПисьма = Элементы.ТекстHTMLРедактор.Документ.defaultView;
	Если ОкноБраузераТекстаПисьма.referencePasteOnInit <> Неопределено Тогда
		ОкноБраузераТекстаПисьма.referencePasteOnInit();
	КонецЕсли;
	
КонецПроцедуры // ТекстHTMLРедакторДокументСформирован()

&НаКлиенте
Процедура ТекстHTMLРедакторПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	CRM_РаботаСHTMLКлиент.ПолеHTMLПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
	Если Элементы.Найти("МенюГруппаВариантыЗамены") <> Неопределено 
		И ДанныеСобытия.Element.className = "mistake" Тогда
		НомерОшибки = Число(СтрЗаменить(ДанныеСобытия.Element.id, "mistake", ""));
		ТекстHTMLРедакторПриНажатииНаСервере(НомерОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТекстHTMLРедакторПриНажатииНаСервере(НомерОшибки)
	CRM_ПроверкаПравописанияСервер.ДобавитьВариантыЗаменыВКонтекстноеМеню(ЭтотОбъект, НомерОшибки);
КонецПроцедуры

// -CRM_HTML

#КонецОбласти

// +CRM_HTML
#Область ОбработчикиКомандФормы

#Область РедакторHTML

&НаКлиенте
Процедура ВыполнитьКоманду(Команда)
	
	ИмяКоманды = Сред(Команда.Имя, 8);
	
	Если ИмяКоманды = "Undo" Тогда
		CRM_ЦентрМониторингаКлиентСервер.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаОтменитьПоследнееДействие");
	ИначеЕсли ИмяКоманды = "Redo" Тогда
		CRM_ЦентрМониторингаКлиентСервер.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаПовторитьСледующееДействие");
	ИначеЕсли ИмяКоманды = "InsertHorizontalRule" Тогда
		CRM_ЦентрМониторингаКлиентСервер.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаГоризонтальнаяЛиния");
	ИначеЕсли ИмяКоманды = "InsertHorizontalRule" Тогда
		CRM_ЦентрМониторингаКлиентСервер.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаГоризонтальнаяЛиния");
	ИначеЕсли ИмяКоманды = "Bold" Тогда
		CRM_ЦентрМониторингаКлиентСервер.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаПолужирный");
	ИначеЕсли ИмяКоманды = "Italic" Тогда
		CRM_ЦентрМониторингаКлиентСервер.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаКурсив");
	ИначеЕсли ИмяКоманды = "Underline" Тогда
		CRM_ЦентрМониторингаКлиентСервер.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаПодчеркнутый");
	ИначеЕсли ИмяКоманды = "JustifyLeft" Тогда
		CRM_ЦентрМониторингаКлиентСервер.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаВыравниваниеПоЛевомуКраю");
	ИначеЕсли ИмяКоманды = "JustifyCenter" Тогда
		CRM_ЦентрМониторингаКлиентСервер.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаВыравниваниеПоЦентру");
	ИначеЕсли ИмяКоманды = "JustifyRight" Тогда
		CRM_ЦентрМониторингаКлиентСервер.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаВыравниваниеПоПравомуКраю");
	ИначеЕсли ИмяКоманды = "JustifyFull" Тогда
		CRM_ЦентрМониторингаКлиентСервер.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаВыравниваниеПоШирине");
	КонецЕсли;
	
	CRM_РаботаСHTMLКлиент.ВыполнитьHTMLКоманду(ЭтотОбъект, Элементы.ТекстHTMLРедактор, ИмяКоманды);
	
КонецПроцедуры // ВыполнитьКоманду()

&НаКлиенте
Процедура ВставитьИзображение(Команда)
	
	CRM_ЦентрМониторингаКлиентСервер.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаВставитьИзображение");
	CRM_РаботаСHTMLКлиент.ВставитьИзображение(ЭтотОбъект, Элементы.ТекстHTMLРедактор, Истина);
	
КонецПроцедуры // ВставитьИзображение()

&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	
	CRM_ЦентрМониторингаКлиентСервер.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаВставитькартинкуИзБуфера");
	CRM_РаботаСHTMLКлиент.ВставитьКартинкуИзБуфера(ЭтотОбъект, Элементы.ТекстHTMLРедактор);
	
КонецПроцедуры // ВставитьКартинкуИзБуфера()

&НаКлиенте
Процедура ВставитьГиперссылку(Команда)
	
	CRM_ЦентрМониторингаКлиентСервер.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаВставитьГиперссылку");
	CRM_РаботаСHTMLКлиент.ВставитьГиперссылку(ЭтотОбъект, Элементы.ТекстHTMLРедактор);
	
КонецПроцедуры // ВставитьГиперссылку()

&НаКлиенте
Процедура ВставитьТаблицу(Команда)
	
	CRM_ЦентрМониторингаКлиентСервер.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаВставитьТаблицу");
	CRM_РаботаСHTMLКлиент.ВставитьТаблицу(ЭтотОбъект, Элементы.ТекстHTMLРедактор);
	
КонецПроцедуры // ВставитьТаблицу()

&НаКлиенте
Процедура УвеличитьШрифт(Команда)
	
	CRM_РаботаСHTMLКлиент.УвеличитьШрифт(ЭтотОбъект, Элементы.ТекстHTMLРедактор);
	
КонецПроцедуры // УвеличитьШрифт()

&НаКлиенте
Процедура УменьшитьШрифт(Команда)
	
	CRM_РаботаСHTMLКлиент.УменьшитьШрифт(ЭтотОбъект, Элементы.ТекстHTMLРедактор);
	
КонецПроцедуры // УменьшитьШрифт()

&НаКлиенте
Процедура ИзменитьШрифт(Команда)
	
	CRM_РаботаСHTMLКлиент.ИзменитьШрифт(ЭтотОбъект, Элементы.ТекстHTMLРедактор);
	
КонецПроцедуры // ИзменитьШрифт()

&НаКлиенте
Процедура ВыборЦвета(Команда)
	
	ИмяКоманды = Сред(Команда.Имя, 8);
	
	CRM_РаботаСHTMLКлиент.ВыборЦвета(ЭтотОбъект, Элементы.ТекстHTMLРедактор, ИмяКоманды);
	
КонецПроцедуры // ВыборЦвета()

&НаКлиенте
Процедура ПоказатьДопФорматирование(Команда)
	
	CRM_ЦентрМониторингаКлиентСервер.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаДополнительноеФорматирование");
	
	Элементы.ПоказатьДопФорматирование.Пометка	= Не Элементы.ПоказатьДопФорматирование.Пометка;
	Элементы.ГруппаДополнительное.Видимость		= Элементы.ПоказатьДопФорматирование.Пометка;
	
КонецПроцедуры // ПоказатьДопФорматирование()

#КонецОбласти

&НаКлиенте
Процедура ВставитьСсылкуНаОбъектИнформационнойБазы(Команда)
	
	ОткрытьФорму("ОбщаяФорма.CRM_ФормированиеCсылкиНаОбъект", , ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти
// -CRM_HTML

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимость()
	Элементы.Автор.Заголовок = Объект.Автор;
	ОткрытаАвтором = Объект.Автор = Пользователи.ТекущийПользователь();
	Элементы.ПараметрыОтображения.Видимость = ОткрытаАвтором;
	//Элементы.ИнформацияОбАвторе.Видимость = Не ОткрытаАвтором;
	
	ТолькоПросмотр = Не ОткрытаАвтором;
	// +CRM_HTML
	//Элементы.Содержание.ТолькоПросмотр = Не ОткрытаАвтором;
	Элементы.ТекстHTMLРедактор.ТолькоПросмотр = Не ОткрытаАвтором;
	// -CRM_HTML
	Элементы.КоманднаяПанельРедактирования.Видимость = ОткрытаАвтором;
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	ТекстВопроса = НСтр("ru='Примечание будет удалено. Продолжить?';en='Note will be deleted. Continue?'");
	ОповещениеЗавершения = Новый ОписаниеОповещения("ПометитьНаУдалениеЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВопрос(ОповещениеЗавершения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Модифицированность = Ложь;
		Закрыть();
	Иначе
		Объект.ПометкаУдаления = Истина;
		Записать();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("РаспознаваниеРечиТекст");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("РаспознаваниеРечиТекст");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.ТекстHTMLРедактор);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.РаспознаваниеРечиТекст);
	Контекст.Вставить("ИмяРеквизита",                     "ТекстHTMLРедактор");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		Контекст.Элемент,
		Контекст.ИмяРеквизита,
		РезультатРаспознавания);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	ТекущийЭлемент = Элементы.ТекстHTMLРедактор;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "ТекстHTMLРедактор");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

// +CRM_HTML

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПроверкиПравописания(Команда)
	CRM_ПроверкаПравописанияКлиент.ВыполнитьКомандуПроверкиПравописания(ЭтотОбъект, Элементы.ТекстHTMLРедактор, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаменитьНаВариантНажатие(Команда)
	CRM_ПроверкаПравописанияКлиент.ЗаменитьНаВариант(ЭтотОбъект, Элементы.ТекстHTMLРедактор, Команда.Имя)
КонецПроцедуры

#КонецОбласти

#Область ПроверкаПравописания

&НаКлиенте
// Процедура - обработчик команды формы "ПроверкаПравописани".
//
// Параметры:
//  Команда  - выполняемая команда
//
Процедура ПроверкаПравописания(Команда = Неопределено)
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'проверку орфографии'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаПравописанияПродолжение", ЭтотОбъект);
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПравописанияПродолжение(Результат, ДопПараметр) Экспорт
	
	Элементы.ПроверкаПравописания.Пометка = Не Элементы.ПроверкаПравописания.Пометка;
	Элементы.CRM_ГруппаПроверкаПравописания.Видимость = Элементы.ПроверкаПравописания.Пометка;
	
	Если Элементы.ПроверкаПравописания.Пометка Тогда
		CRM_ПроверкаПравописанияКлиент.СкрытьОшибки(Элементы.ТекстHTMLРедактор);
		ПроверяемыйТекст = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ТекстHTMLРедактор);
		ПроверкаПравописанияНаСервере(ПроверяемыйТекст);
		ТекстHTMLРедактор = ПроверяемыйТекст;
		CRM_ПроверкаПравописанияКлиент.ПоказатьОшибки(ЭтотОбъект, Элементы.ТекстHTMLРедактор,
			 ТекстHTMLРедактор,
			 ПроверяемыйТекст);
	
	Иначе
		ВыделенныйТекст = Элементы.ТекстHTMLРедактор.Документ.getSelection();
		НомерТекущейОшибки = ЭтотОбъект["CRM_НомерТекущейОшибки"];
		Если ВыделенныйТекст.type <> "None" 
			И НомерТекущейОшибки < ЭтотОбъект["CRM_СписокОшибок"].Количество()
			И ЭтотОбъект["CRM_СписокОшибок"].Получить(НомерТекущейОшибки).Значение.word
			= ВыделенныйТекст.anchorNode.textContent Тогда
			Элементы.ТекстHTMLРедактор.Документ.getSelection().empty();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаПравописанияНаСервере(ПроверяемыйТекст)
	CRM_ПроверкаПравописанияСервер.ПроверитьПравописание(ЭтотОбъект, Элементы.ТекстHTMLРедактор,
		 ПроверяемыйТекст);
КонецПроцедуры

#КонецОбласти

#Область ЗагрузитьИзФайла

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	Фильтр = НСтр("ru = 'Документ HTML (*.html;*.htm)|*.html;*.htm'");
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = Фильтр;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(ОповещениеЗавершения, ДиалогВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Результат = "" Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = Результат[0];
	
	РазделительПути = ПолучитьРазделительПути();
	
	Файл = Новый Файл(ПолноеИмяФайла);
	КаталогФайла = Файл.Путь;
	Если Не СтрЗаканчиваетсяНа(КаталогФайла, РазделительПути) Тогда
		КаталогФайла = КаталогФайла + РазделительПути;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекстовыйДокумент", ТекстовыйДокумент);
	ДополнительныеПараметры.Вставить("РазделительПути", РазделительПути);
	ДополнительныеПараметры.Вставить("КаталогФайла", КаталогФайла);
	Оповещение = Новый ОписаниеОповещения("ТекстовыйДокументЧтениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстовыйДокумент.НачатьЧтение(Оповещение, ПолноеИмяФайла, КодировкаТекста.UTF8);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстовыйДокументЧтениеЗавершение(ДополнительныеПараметры) Экспорт
	
	ТекстHTMLРедактор = ДополнительныеПараметры.ТекстовыйДокумент.ПолучитьТекст();
	ТекстHTMLРедактор = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстHTMLРедактор, " ");
	
	ПутиККартинкам = ПутиККартинкамHTML(ТекстHTMLРедактор);
	Для Каждого ТекущийПуть Из ПутиККартинкам Цикл
		
		ПутьККартинке = ТекущийПуть;
		ФайлКартинка = Новый Файл(ПутьККартинке);
		
		ДополнительныеПараметрыПроверки = Новый Структура;
		ДополнительныеПараметрыПроверки.Вставить("ПутьККартинке", ПутьККартинке);
		ДополнительныеПараметрыПроверки.Вставить("ТекущийПуть", ТекущийПуть);
		ДополнительныеПараметрыПроверки.Вставить("КаталогФайла", ДополнительныеПараметры.КаталогФайла);
		ДополнительныеПараметрыПроверки.Вставить("РазделительПути", ДополнительныеПараметры.РазделительПути);
		Оповещение = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаПродолжение", ЭтотОбъект,
			 ДополнительныеПараметрыПроверки);
		ФайлКартинка.НачатьПроверкуСуществования(Оповещение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСуществованияФайлаПродолжение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		
		Если СтрНайти(ВРег(ДополнительныеПараметры.ПутьККартинке), ВРег("file://")) = 0 Тогда
			ТекстHTMLРедактор = СтрЗаменить(ТекстHTMLРедактор, ДополнительныеПараметры.ТекущийПуть, "file://" 
				+ ДополнительныеПараметры.ПутьККартинке);
		КонецЕсли;
		
	Иначе
		
		Если СтрНачинаетсяС(ДополнительныеПараметры.ПутьККартинке, ДополнительныеПараметры.РазделительПути) Тогда
			ДополнительныеПараметры.ПутьККартинке = Сред(ДополнительныеПараметры.ПутьККартинке, 2);
		КонецЕсли;
		
		ДополнительныеПараметры.ПутьККартинке = ДополнительныеПараметры.КаталогФайла + ДополнительныеПараметры.ПутьККартинке;
		ФайлКартинка = Новый Файл(ДополнительныеПараметры.ПутьККартинке);
		
		ДополнительныеПараметрыПроверки = Новый Структура;
		ДополнительныеПараметрыПроверки.Вставить("ПутьККартинке", ДополнительныеПараметры.ПутьККартинке);
		ДополнительныеПараметрыПроверки.Вставить("ТекущийПуть", ДополнительныеПараметры.ТекущийПуть);
		
		Оповещение = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаЗавершение", ЭтотОбъект,
			 ДополнительныеПараметрыПроверки);
		ФайлКартинка.НачатьПроверкуСуществования(Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСуществованияФайлаЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		ТекстHTMLРедактор = СтрЗаменить(ТекстHTMLРедактор, ДополнительныеПараметры.ТекущийПуть, "file://" 
			+ ДополнительныеПараметры.ПутьККартинке);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПутиККартинкамHTML(Знач Текст)
	
	ПутиККартинкам = Новый Массив;
	
	ЧтениеHTML = Новый ЧтениеHTML;
	
	ЧтениеHTML.УстановитьСтроку(Текст);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
	
	Для Каждого Картинка Из ДокументHTML.Картинки Цикл
		Путь = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src").Значение;
		ПутиККартинкам.Добавить(Путь);
	КонецЦикла;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПутиККартинкам);
	
КонецФункции

#КонецОбласти

&НаСервере
Функция ПолучитьЩрифтПоУмлолчанию()
	
	// Шрифт по умолчанию из настроек.
	НастройкиХранилище = CRM_ВзаимодействияВызовСервера.ПолучитьНастройкуРаботаСПочтой();
	
	ШрифтПоУмолчанию = ?(
		НастройкиХранилище.Свойство("ШрифтПоУмолчаниюВЭлектронномПисьме"),
		НастройкиХранилище.ШрифтПоУмолчаниюВЭлектронномПисьме,
		WindowsШрифты.ШрифтДиалоговИМеню);
	
	Если ШрифтПоУмолчанию = WindowsШрифты.ШрифтДиалоговИМеню Тогда
		ШрифтПоУмолчанию = Константы.CRM_ШрифтПисьмаПоУмолчанию.ПолучитьШрифт();
	КонецЕсли;
	
	Возврат ШрифтПоУмолчанию;
	
КонецФункции

&НаКлиенте
Процедура УстановитьШрифтПисьмаИзНастроек()
	
	// Установка шрифта для HTML требует фокуса на элементе.
	//ТекущийЭлементВременная = ТекущийЭлемент;
	ТекущийЭлемент = Элементы.ТекстHTMLРедактор;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",		ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ПолеHTML",	Элементы.ТекстHTMLРедактор);
	
	CRM_РаботаСHTMLКлиент.ИзменитьШрифтЗавершение(ШрифтПоУмолчанию, ДополнительныеПараметры);
	
	//ТекущийЭлемент = ТекущийЭлементВременная;
	
КонецПроцедуры // УстановитьШрифтПисьмаИзНастроек()

// -CRM_HTML

#КонецОбласти