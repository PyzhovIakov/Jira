#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПрименитьПравило(Обращение) Экспорт
	
	Правило = ПравилоДляОбращения(Обращение);
	
	Если НЕ ЗначениеЗаполнено(Правило) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОтветственного(Обращение, Правило);
	
	Если ЗначениеЗаполнено(Правило.ВариантОбработки) 
		И Правило.ВариантОбработки <> Перечисления.CRM_ВариантыОбработкиОбращения.НеОбрабатывать Тогда
		
		Обращение.ДополнительныеСвойства.Вставить("ПравилоОбработкиОбращения", Правило);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПравилоДляОбращения(Обращение) Экспорт
	
	ИсточникОбращения = Неопределено;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Обращение, "УчетнаяЗапись") Тогда
		ИсточникОбращения = Обращение.УчетнаяЗапись;
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументОбъект.CRM_Заявка") Тогда
		ИсточникОбращения = Обращение.ИсточникПолучения;
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументОбъект.ТелефонныйЗвонок") Тогда
		ИсточникОбращения = Новый Структура;
		ИсточникОбращения.Вставить("CRM_ОбрабатыватьОбращения",
			 Константы.сфпНастройкиТелефонии_ПрименитьПравилаОбработки.Получить());
		ИсточникОбращения.Вставить("CRM_ПравилаОбработки",
			 Константы.сфпНастройкиТелефонии_ПравилаОбработки.Получить().Получить());
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИсточникОбращения) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникОбращения, "CRM_ОбрабатыватьОбращения") 
		И ИсточникОбращения.CRM_ОбрабатыватьОбращения Тогда
		
		ВключенаПоддержка = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПоддержку");
		
		ПолучатьаМеткуКлассификации = Ложь;
		Если ВключенаПоддержка И CRM_МоделиМашинногоОбучения.КлассификацияОбращенийИспользуется() Тогда
			Для Каждого СтрокаПравил Из ИсточникОбращения.CRM_ПравилаОбработки Цикл
				Если СтрокаПравил.УсловиеОбработки.ВидУсловия = Перечисления.CRM_ВидыУсловийОбработкиОбращений.МеткаПомощника Тогда
					ПолучатьаМеткуКлассификации = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ПолучатьаМеткуКлассификации Тогда
			ТекстОбращения = Обращение.Текст;
			Если Не ЗначениеЗаполнено(ТекстОбращения) Тогда
				ТекстОбращения = Взаимодействия.ПолучитьОбычныйТекстИзHTML(Обращение.ТекстHTML);
			КонецЕсли;
			МеткаКлассификации = CRM_МоделиМашинногоОбучения.МеткаКлассификацииОбращения(ТекстОбращения);
			Если ЗначениеЗаполнено(МеткаКлассификации) Тогда
				Обращение.ДополнительныеСвойства.Вставить("МеткаКлассификации", МеткаКлассификации);
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого СтрокаПравил Из ИсточникОбращения.CRM_ПравилаОбработки Цикл
			Если Справочники.CRM_УсловияОбработкиОбращений.УсловиеВыполнено(СтрокаПравил.УсловиеОбработки, Обращение) Тогда
				Если ТипЗнч(Обращение) = Тип("ДокументОбъект.ТелефонныйЗвонок")
					И СтрокаПравил.ПравилоОбработки.ВариантОбработки = Перечисления.CRM_ВариантыОбработкиОбращения.СоздатьИнтерес Тогда
					Продолжить;
				КонецЕсли;
				Если Не ВключенаПоддержка
					 И СтрокаПравил.ПравилоОбработки.ВариантОбработки = Перечисления.CRM_ВариантыОбработкиОбращения.СоздатьИнтерес
					И Не СтрокаПравил.ПравилоОбработки.ТипОбращения = Справочники.CRM_ТипыОбращений.Интерес Тогда
					Продолжить;
				Иначе
					Возврат СтрокаПравил.ПравилоОбработки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьОтветственного(Обращение, Правило) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Обращение, "Контакт") Тогда
		Контакт = Обращение.Контакт;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Обращение, "ОтправительКонтакт") Тогда
		Контакт = Обращение.ОтправительКонтакт;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Обращение, "Партнер") Тогда
		Контакт = Обращение.Партнер;
	Иначе
		Контакт = Неопределено;
	КонецЕсли;
	
	Ответственный = Неопределено;
	РольОтветственного = Неопределено;
	
	ТипКонтакта = ТипЗнч(Контакт);
	Если ЗначениеЗаполнено(Контакт) Тогда
		Если ТипКонтакта = Тип("СправочникСсылка.Партнеры") Тогда
			Если Правило.ОбращенияКлиентаОтветственному Тогда
				Ответственный = Контакт.ОсновнойМенеджер;
			КонецЕсли;
		ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Если Правило.ОбращенияКлиентаОтветственному Тогда
				Ответственный = Контакт.Владелец.ОсновнойМенеджер;
			КонецЕсли;
		ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			Если Правило.ОбращенияПКОтветственному Тогда
				Ответственный = Контакт.ОсновнойМенеджер;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Ответственный)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Обращение, "ВзаимодействиеОснование")
		И ЗначениеЗаполнено(Обращение.ВзаимодействиеОснование)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Обращение.ВзаимодействиеОснование, "Ответственный")
		И ЗначениеЗаполнено(Обращение.ВзаимодействиеОснование.Ответственный) Тогда
		Ответственный = Обращение.ВзаимодействиеОснование.Ответственный;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		Если Правило.АдресацияОбращения = Перечисления.CRM_ВариантыАдресацииОбращения.НаРольИсполнителя Тогда
			РольОтветственного = Правило.РольИсполнителя;
		ИначеЕсли Правило.АдресацияОбращения = Перечисления.CRM_ВариантыАдресацииОбращения.НаПользователяВОчереди Тогда
			Ответственный = РегистрыСведений.CRM_ОчередьИсполнителей.СледующийИсполнитель(Правило); 
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ответственный) Тогда
		Обращение.Ответственный = Ответственный;
	ИначеЕсли ЗначениеЗаполнено(РольОтветственного) Тогда
		Если ТипЗнч(Обращение) = Тип("ДокументОбъект.CRM_Интерес") Тогда
			Обращение.Ответственный = РольОтветственного;
		Иначе
			Обращение.CRM_РольОтветственного = РольОтветственного;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает обращение.
// Параметры:
//  Обращение - Объект
//  ПапкаЗагрузки - СправочникСсылка.ПапкиЭлектронныхПисем - Папка для загрузки электронного письма
//  Результат - Выходной параметр
//
Функция ОбработатьОбращение(Обращение, ПапкаЗагрузки = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ПапкаУстановлена", Ложь);
	Результат.Вставить("Папка", Неопределено);
	Результат.Вставить("Обработано", Ложь);
	
	Если Обращение.ДополнительныеСвойства.Свойство("ПравилоОбработкиОбращения") Тогда
		Правило = Обращение.ДополнительныеСвойства.ПравилоОбработкиОбращения;
		СостояниеЛида = РегистрыСведений.CRM_СостоянияЛидов.ПолучитьТекущееСостояниеЛида(?(ТипЗнч(Обращение) = Тип("ДокументОбъект.CRM_СообщениеМессенджера")
		, Обращение.Диалог, Обращение.Ссылка));
		Если ТипЗнч(СостояниеЛида) = Тип("Структура") Тогда
			Если СостояниеЛида.Состояние = Справочники.CRM_СостоянияЛидов.Новый Тогда
				Если Правило.ВариантОбработки = Перечисления.CRM_ВариантыОбработкиОбращения.СоздатьИнтерес Тогда
					СоздатьИнтерес(Обращение, Правило);
				ИначеЕсли Правило.ВариантОбработки = Перечисления.CRM_ВариантыОбработкиОбращения.ОтклонитьОбращение Тогда
					ОтклонитьОбращение(Обращение, Правило);
					Если ТипЗнч(Обращение.Ссылка) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
						Результат.Обработано = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если ТипЗнч(Обращение.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
					
					// Перенос в обработанные осуществляется, если учетная запись конкретного письма разрешает данное действие:
					Если Обращение.УчетнаяЗапись.CRM_ПереноситьВОбработанные Тогда						
						Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(Обращение.УчетнаяЗапись, "Обработанные");
						CRM_Взаимодействия.УстановитьПапкуЭлектронногоПисьма(Обращение.Ссылка, Папка, Ложь, Ложь);
						Результат.ПапкаУстановлена = Истина;
						Результат.Папка = Папка;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			Если Правило.ВариантОбработки = Перечисления.CRM_ВариантыОбработкиОбращения.СоздатьИнтерес Тогда
				Если НЕ Обращение.ДополнительныеСвойства.Свойство("CRM_ТаблицаИнтересов") 
					ИЛИ Обращение.ДополнительныеСвойства.CRM_ТаблицаИнтересов.Количество() = 0 Тогда
					СоздатьИнтерес(Обращение, Правило);
				КонецЕсли;
			ИначеЕсли Правило.ВариантОбработки = Перечисления.CRM_ВариантыОбработкиОбращения.ОтклонитьОбращение Тогда
				ОтклонитьОбращение(Обращение, Правило);
				Если ТипЗнч(Обращение.Ссылка) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
					Результат.Обработано = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если (ТипЗнч(Обращение.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") 
		Или ТипЗнч(Обращение.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")) 
		И Не Результат.ПапкаУстановлена И ЗначениеЗаполнено(ПапкаЗагрузки) Тогда
		Папка = ПапкаЗагрузки;
		CRM_Взаимодействия.УстановитьПапкуЭлектронногоПисьма(Обращение.Ссылка, ПапкаЗагрузки, Ложь, Ложь);
		Результат.ПапкаУстановлена = Истина;
		Результат.Папка = Папка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьИнтерес(Обращение, Правило)
	
	Клиент = Неопределено;
	Контакт = Неопределено;
	ПотенциальныйКлиент = Неопределено;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Обращение, "Контакт") Тогда
		ОтправительКонтакт = Обращение.Контакт;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Обращение, "ОтправительКонтакт") Тогда
		ОтправительКонтакт = Обращение.ОтправительКонтакт;
	Иначе
		ОтправительКонтакт = Неопределено;
	КонецЕсли;
		
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	НачатьТранзакцию();

	Попытка
		Если Не ЗначениеЗаполнено(ОтправительКонтакт) Тогда
			ОтправительКонтакт = CRM_КлиентыСервер.СоздатьКонтактВзаимодействия(Обращение.Ссылка, Правило);
		КонецЕсли;
		ТипКонтакта = ТипЗнч(ОтправительКонтакт);
		Если ЗначениеЗаполнено(ОтправительКонтакт) Тогда
			Если ТипКонтакта = Тип("СправочникСсылка.Партнеры") Тогда
				Клиент = ОтправительКонтакт;
				Контакт = ОтправительКонтакт.CRM_ОсновноеКонтактноеЛицо;
			ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Клиент = ОтправительКонтакт.Владелец;
				Контакт = ОтправительКонтакт;
			ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
				ПотенциальныйКлиент = ОтправительКонтакт;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;

		ОбъектИнтерес							= Документы.CRM_Интерес.СоздатьДокумент();
		ОбъектИнтерес.Дата						= ТекущаяДатаСеанса();
		ОбъектИнтерес.Автор						= ТекущийПользователь;
		
		Если ЗначениеЗаполнено(Клиент) Тогда
			ОбъектИнтерес.Партнер				= Клиент;
			ОбъектИнтерес.КонтактноеЛицо		= Контакт;
			Если ЗначениеЗаполнено(Контакт) Тогда
				СтрКонтакт = ОбъектИнтерес.Контакты.Добавить();
				СтрКонтакт.Контакт = Контакт;
				СтрКонтакт.Роль = Контакт.CRM_РольКонтактногоЛица;
			КонецЕсли;
		Иначе
			ОбъектИнтерес.ПотенциальныйКлиент	= ПотенциальныйКлиент;
		КонецЕсли;
		
		ПервоеСостояниеИнтереса = Справочники.CRM_СостоянияИнтересов.ПервичноеСостояниеСценария(Правило.Сценарий);
		
		ОбъектИнтерес.СостояниеИнтереса			= ПервоеСостояниеИнтереса;
		ОбъектИнтерес.ДокументОснование			= ?(ТипЗнч(Обращение) = Тип("ДокументОбъект.CRM_СообщениеМессенджера"),
			 Обращение.Диалог,
			 Обращение.Ссылка);
		ОбъектИнтерес.Описание					= Обращение.Тема;
		Если ЗначениеЗаполнено(Обращение.Ответственный) Тогда
			ОбъектИнтерес.Ответственный				= Обращение.Ответственный;
			ОбъектИнтерес.Подразделение				= CRM_ОбщегоНазначенияСервер.ПолучитьРеквизитОтветственного(ОбъектИнтерес.Ответственный,
				 "Подразделение");
			ОбъектИнтерес.Офис						= CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ОбъектИнтерес.Подразделение,
				 "CRM_Офис");
		Иначе
			ОбъектИнтерес.Ответственный				= Обращение.CRM_РольОтветственного;
		КонецЕсли;
		Если ЗначениеЗаполнено(Правило.ТипУслуги) Тогда
			ОбъектИнтерес.ТипУслуги				= Правило.ТипУслуги;
		Иначе
			ОбъектИнтерес.ТипУслуги				= Справочники.CRM_ТипУслуги.ПоставкаТоварыУслуги;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Обращение, "ТекстСообщения") Тогда
			ОбъектИнтерес.Тема = Обращение.ТекстСообщения;
		Иначе 
			ОбъектИнтерес.Тема = Обращение.Тема;
		КонецЕсли;
		
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			ОбъектИнтерес.Организация				= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ОбъектИнтерес.Ответственный,
				 "ОсновнаяОрганизация");
			Если НЕ ЗначениеЗаполнено(ОбъектИнтерес.Организация) Тогда
				ОбъектИнтерес.Организация			= CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию();
			КонецЕсли;
		Иначе
			МодульCRM_Модуль_МетодыМодулейОбъектовДокументов =
				ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_МетодыМодулейОбъектовДокументов");
			Если МодульCRM_Модуль_МетодыМодулейОбъектовДокументов <> Неопределено Тогда
				МодульCRM_Модуль_МетодыМодулейОбъектовДокументов.ЗаполнитьОрганизацию(ОбъектИнтерес);
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойПроект");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			ОбъектИнтерес.Проект				= ЗначениеНастройки;
		КонецЕсли;
		
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Если ТипЗнч(ОбъектИнтерес.Ответственный) = Тип("СправочникСсылка.Пользователи")
				И ЗначениеЗаполнено(ОбъектИнтерес.Ответственный["CRM_УровеньДоступа"])Тогда
				
				МодульУправлениеДоступомУровниДоступа = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
				ЗапрещенныеКонтакты = МодульУправлениеДоступомУровниДоступа.ЗапрещенныеКлиентыКонтактыОбъекта(ОбъектИнтерес,
					ОбъектИнтерес.Ответственный);
				Если ЗапрещенныеКонтакты.Количество() > 0 Тогда
					МодульУправлениеДоступомУровниДоступа.УстановитьОбъектамУровеньДоступаПользователя(ЗапрещенныеКонтакты,
						ОбъектИнтерес.Ответственный);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Если ЗначениеЗаполнено(ОбъектИнтерес.Партнер) Тогда
				Договор = CRM_ОбщегоНазначенияСервер.ПолучитьДоговорПартнера(ОбъектИнтерес.Партнер, ОбъектИнтерес.Организация);
				Если ЗначениеЗаполнено(Договор) Тогда
					ОбъектИнтерес["Договор"] = Договор;
					ОбъектИнтерес.Валюта = Договор.ВалютаРасчетов;
					ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ОбъектИнтерес.Дата,
						 Новый Структура("Валюта",
						 Договор.ВалютаРасчетов));
					ОбъектИнтерес["Курс"]      = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
					ОбъектИнтерес["Кратность"] = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1,
						 ВалютаРасчетовКурсКратность.Кратность);
					ОбъектИнтерес["ВидСкидкиНаценки"] = Договор.ВидСкидкиНаценки;
					ВидЦен = Договор.ВидЦен;
					ОбъектИнтерес["ВидЦен"] = ВидЦен;
					ОбъектИнтерес["ЦенаВключаетНДС"] = ВидЦен.ЦенаВключаетНДС;
				КонецЕсли;
			Иначе
				ОбъектИнтерес.Валюта = Константы.ВалютаУправленческогоУчета.Получить();
				ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ОбъектИнтерес.Дата,
					 Новый Структура("Валюта",
					 ОбъектИнтерес.Валюта));
				ОбъектИнтерес["Курс"]      = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
				ОбъектИнтерес["Кратность"] = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, ВалютаРасчетовКурсКратность.Кратность);
				ВидЦен = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь,
					 "ОсновнойВидЦенПродажи");
				ОбъектИнтерес["ВидЦен"] = ВидЦен;
				ОбъектИнтерес["ЦенаВключаетНДС"] = ВидЦен.ЦенаВключаетНДС;
			КонецЕсли;
		Иначе
			МодульCRM_Модуль_МетодыМодулейОбъектовДокументов =
				ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_МетодыМодулейОбъектовДокументов");
			МодульCRM_Модуль_МетодыМодулейОбъектовДокументов.ИнтересЗаполнитьРеквизитыДокумента(ОбъектИнтерес);
			Если ЗначениеЗаполнено(ОбъектИнтерес.Партнер) Тогда
				ИмяФО = "ИспользоватьСоглашенияСКлиентами";
				Если ПолучитьФункциональнуюОпцию(ИмяФО) Тогда
					// ОбъектИнтерес.Соглашение = МодульCRM_Модуль_МетодыМодулейОбъектовДокументов.ВернутьПоследнееСоглашение(Клиент); // закомментировано: не заполнять!
					ОбъектИнтерес.ЦенаВключаетНДС = ?(ОбъектИнтерес.Соглашение.Пустая(), Ложь,
						 ОбъектИнтерес.Соглашение.ЦенаВключаетНДС);
				КонецЕсли;
			Иначе
				ОбъектИнтерес.ЦенаВключаетНДС = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ОбъектИнтерес.ТипОбращения = Правило.ТипОбращения;
		Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПоддержку") Тогда
			Если Правило.Сценарий.ЭтоПоддержка Тогда
				ПоляФормы = Новый Структура;
				ПоляФормы.Вставить("КонтактноеЛицо",	Контакт);
				ПоляФормы.Вставить("Организация",		ОбъектИнтерес.Организация);
				ПоляФормы.Вставить("Ответственный",		ОбъектИнтерес.Ответственный);
				ПоляФормы.Вставить("Партнер",			Клиент);
				ПоляФормы.Вставить("ТипУслуги",			ОбъектИнтерес.ТипУслуги);
				ПоляФормы.Вставить("ТипОбращения",		ОбъектИнтерес.ТипОбращения);
				ПоляФормы.Вставить("Проект",			ОбъектИнтерес.Проект);
				
				ДанныеОбращения = Справочники.CRM_УровниПоддержки.ОписаниеДанныхОбращения();
				СтрокаНабора = ДанныеОбращения.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаНабора, ПоляФормы);
				
				СтрокаНабора.Ключ			= Строка(Новый УникальныйИдентификатор);
				СтрокаНабора.Дата			= ОбъектИнтерес.Дата;
				
				ДанныеУровня = Справочники.CRM_УровниПоддержки.ДанныеУровняПоддержки(ДанныеОбращения);
				
				ОбъектИнтерес.УровеньПоддержки = ДанныеУровня.Уровень;
				СрокиПоОбращению = Справочники.CRM_УровниПоддержки.СрокиПоУровнюПоддержки(ОбъектИнтерес.Дата, ДанныеУровня.Уровень);
				ЗаполнитьЗначенияСвойств(ОбъектИнтерес, СрокиПоОбращению);
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Обращение) = Тип("ДокументОбъект.CRM_Заявка") Тогда
			ОбъектИнтерес.КаналОбращения = Перечисления.CRM_ВидыКаналовИнформации.Заявка;
		КонецЕсли;
		Канал = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Обращение, "КаналПервичногоИнтереса") Тогда
			Канал = Обращение.КаналПервичногоИнтереса;
		КонецЕсли;
		Источник = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Обращение, "ИсточникПолучения") Тогда
			ОбъектИнтерес.ИсточникОбращения = Обращение.ИсточникПолучения;
			Источник = Обращение.ИсточникПервичногоИнтереса;
		КонецЕсли;
		
		ОбъектИнтерес.Записать();
		
		СозданныйИнтерес = ОбъектИнтерес.Ссылка;
		
		Если ЗначениеЗаполнено(Канал) Тогда
			Менеджер = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
			Менеджер.Период = ОбъектИнтерес.Дата;
			Менеджер.Сделка = СозданныйИнтерес;
			Менеджер.Партнер = ?(ОбъектИнтерес.Партнер.Пустая(), ОбъектИнтерес.ПотенциальныйКлиент, ОбъектИнтерес.Партнер);
			Менеджер.КаналПервичногоИнтереса = Канал;
			Менеджер.ИсточникПервичногоИнтереса = Источник;
			Менеджер.Записать(Истина);
		КонецЕсли;
		
		Если НЕ CRM_БизнесПроцессыСервер.ОбъектСвязанСБизнесПроцессом(ОбъектИнтерес.Ссылка)
			И НЕ ПервоеСостояниеИнтереса.НеСоздаватьЗадачу
			И ТипЗнч(ОбъектИнтерес.Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда
			
			ДатаЗадачи = ТекущаяДатаСеанса();
			Если СозданныйИнтерес.ТипОбращения = Справочники.CRM_ТипыОбращений.Интерес Тогда
				ТекстЗадачи = НСтр("ru='Обработать новый интерес клиента';en='Process new lead'") 
					+ ?(ЗначениеЗаполнено(ОбъектИнтерес.Тема), " (" + ОбъектИнтерес.Тема + ")",
					 "");
			Иначе
				ТекстЗадачи = НСтр("ru='Обработать новое обращение: '") + НРег(СозданныйИнтерес.ТипОбращения) 
					+ ?(ЗначениеЗаполнено(ОбъектИнтерес.Тема), " (" + ОбъектИнтерес.Тема + ")", "");
			КонецЕсли;	
			
			ОбъектЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			ОбъектЗадача.Автор				= Пользователи.ТекущийПользователь();
			ОбъектЗадача.Исполнитель		= ОбъектИнтерес.Ответственный;
			ОбъектЗадача.ПринятаКИсполнению	= Истина;
			ОбъектЗадача.Наименование		= ТекстЗадачи;
			ОбъектЗадача.Дата				= ДатаЗадачи;
			ОбъектЗадача.ДатаНачала			= ДатаЗадачи;
			
			СрокИсполнения = НачалоДня(ДатаЗадачи + 60 * 60 * 24);
			СоответствиеДат = CRM_КалендарныеГрафики.ПолучитьСоответствиеДатРабочихДней(СрокИсполнения);
			Если СоответствиеДат.Количество() > 0 Тогда
				ОбъектЗадача.СрокИсполнения =
					КонецДня(CRM_КалендарныеГрафики.ПолучитьСоответствиеДатРабочихДней(СрокИсполнения).Получить(СрокИсполнения));
			Иначе
				ОбъектЗадача.СрокИсполнения = СрокИсполнения;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен календарный график! Срок исполнения задачи по обработке Интереса установлен без учета календаря!'"));
			КонецЕсли;
			
			ОбъектЗадача.CRM_Личная			= Истина;
			ОбъектЗадача.Предмет			= СозданныйИнтерес;
			ОбъектЗадача.Описание			= ОбъектИнтерес.Описание;
			ОбъектЗадача.CRM_Партнер		= Клиент;
			ОбъектЗадача.CRM_КонтактноеЛицо	= Контакт;
			ОбъектЗадача.CRM_ПотенциальныйКлиент = ПотенциальныйКлиент;
			ОбъектЗадача.Записать();
	
		КонецЕсли;
		
		СвязатьОбращениеСИнтересомНаСервере(ОбъектИнтерес.Ссылка,
			 ?(ТипЗнч(Обращение) = Тип("ДокументОбъект.CRM_СообщениеМессенджера"),
			 Обращение.Диалог.ПолучитьОбъект(),
			 Обращение));
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстЗаписиЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При обработке обращения %1, не удалось создать интерес.'"), Обращение) 
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("Обработка обращений", УровеньЖурналаРегистрации.Ошибка, , , ТекстЗаписиЖурнала);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОтклонитьОбращение(Обращение, Правило)
	
	Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Обращение.Ссылка) Тогда
		РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Обращение.Ссылка,
			 Справочники.CRM_СостоянияЛидов.Отклонен, ,
			 Правило.ПричинаОтклонения); 
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Обращение, "CRM_СкрытьВАРМ") Тогда
		Обращение.CRM_СкрытьВАРМ = Истина;
		Обращение.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура СвязатьОбращениеСИнтересомНаСервере(Интерес, Обращение)
	
	Если Обращение.ВерсияДанных <> Обращение.Ссылка.ВерсияДанных Тогда
		Обращение = Обращение.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	CRM_Интерес.Ссылка КАК Ссылка,
	|	CRM_Интерес.СостояниеИнтереса КАК СостояниеИнтереса,
	|	ЛОЖЬ КАК ВведенНаОсновании,
	|	ИСТИНА КАК ОсновнойИнтерес
	|ИЗ
	|	Документ.CRM_Интерес КАК CRM_Интерес
	|ГДЕ
	|	CRM_Интерес.Ссылка = &СсылкаИнтерес
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_Интерес.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("СсылкаИнтерес" , Интерес);
	
	ТаблицаСвязей = Запрос.Выполнить().Выгрузить();
	Если ТаблицаСвязей.Количество() > 0 Тогда
		Обращение.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов", ТаблицаСвязей);
	КонецЕсли;
	
	ОбращениеЯвляетсяЛидом = РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Обращение.Ссылка);
	
	Если ОбращениеЯвляетсяЛидом
		 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Обращение, "CRM_СкрытьВАРМ") Тогда
		Обращение.CRM_СкрытьВАРМ = Истина;
	КонецЕсли;
	
	Обращение.Записать();
	
	Если ОбращениеЯвляетсяЛидом Тогда
		ПараметрСостояниеЛида = Справочники.CRM_СостоянияЛидов.Сконвертирован;
		РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Обращение.Ссылка, ПараметрСостояниеЛида, Интерес);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
