
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// +РаботаСЭтапами
	// Вставим верхнюю строку дерева этапов
	СтрокаДерева = ДеревоМодели.ПолучитьЭлементы().Добавить();
	СтрокаДерева.Этап = Объект.Ссылка;
	СтрокаДерева.ИндексКартинки = -1;
	
	ПустойШаблонПакета = Справочники.CRM_ШаблоныЭтаповПроектов.ПустаяСсылка();
	// -РаботаСЭтапами
	
	АвтоЗаголовок = Ложь;
	Если ЗначениеЗаполнено(Объект.Наименование) Тогда
		Заголовок = Объект.Наименование;
		ИзменитьУсловноеОформлениеКорняДерева();
	Иначе
		Заголовок = НСтр("ru='Новый шаблон этапа...';en='New template stage...'");
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		УстановитьРежимВводаОтЗадачи();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УстановитьРежимВводаОтЗадачи();
	
	Если РежимВводаОтЗадачи Тогда
		ЗаполнитьДеревоПоЭтапамВводОтЗадачи();
	Иначе
		ЗаполнитьДеревоПоЭтапам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// +РаботаСЭтапами
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
	// -РаботаСЭтапами
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ТекущийОбъект.Родитель)
		 И ТекущийОбъект.ШаблонПроекта <> ТекущийОбъект.Родитель.ШаблонПроекта  Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Выбранный проект не соответствует проекту Пакета задач! Запись невозможна.';
			|en='Selected project does not match project Task Package! Recording is not possible.'"), , , ,
			 Отказ);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	// +РаботаСЭтапами
	Если ТипЗнч(НовыйОбъект) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана") Тогда
		
		ДобавитьЭтапКонтрольнуюТочкуПослеЗаписиНового(НовыйОбъект);
		
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
		
		ДобавитьПакетЗадачПослеЗаписиНового(НовыйОбъект);
		
	КонецЕсли;
	// -РаботаСЭтапами
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ИзменениеШаблонаЭтапаКалендарногоПлана", Объект.ШаблонПроекта);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовФормы

&НаСервере
Процедура НаименованиеПриИзмененииНаСервере()
	ИзменитьУсловноеОформлениеКорняДерева();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Наименование) Тогда
		Заголовок = Объект.Наименование;
	Иначе
		Заголовок = НСтр("ru='Введите наименование...';en='Enter name...'"); 
	КонецЕсли;
	
	НаименованиеПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИзменитьУсловноеОформлениеКорняДерева()
	УсловноеОформление.Элементы[0].Оформление.Элементы.Найти("Текст").Значение = Объект.Наименование; 
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимВводаОтЗадачи()
	
	Если ЗначениеЗаполнено(Объект.ШаблонПроекта) Тогда
		РежимВводаОтЗадачи = Объект.ШаблонПроекта.РежимВводаОтЗадачи;
	КонецЕсли;
	
	Если РежимВводаОтЗадачи Тогда
		Элементы.ДеревоМоделиОтсрочкаОтПредыдущейЗадачи.Видимость = Истина;
		Элементы.ДеревоМоделиОтсрочкаСтартаДней.ТолькоПросмотр = Истина;
		Элементы.ГруппаДействияПеремещения.Видимость = Истина;
	Иначе
		Элементы.ДеревоМоделиОтсрочкаОтПредыдущейЗадачи.Видимость = Ложь;
		Элементы.ДеревоМоделиОтсрочкаСтартаДней.ТолькоПросмотр = Ложь;
		Элементы.ГруппаДействияПеремещения.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область РаботаСЭтапами

&НаСервере
Процедура ЗаполнитьДеревоПоЭтапам()
	
	ДеревоМодели.ПолучитьЭлементы().Очистить();
	
// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ШаблоныЭтаповПроектов.Ссылка КАК Пакет,
	               |	CRM_ШаблоныЭтаповПроектов.МинимальноеСмещение КАК МинимальноеСмещение,
	               |	CRM_ШаблонЭтапаКалендарногоПлана.Ссылка КАК Этап,
	               |	CRM_ШаблонЭтапаКалендарногоПлана.ПродолжительностьДней КАК ПродолжительностьДней,
	               |	CRM_ШаблонЭтапаКалендарногоПлана.ТипЭтапа КАК ТипЭтапа,
	               |	CRM_ШаблонЭтапаКалендарногоПлана.Смещение КАК ОтсрочкаСтартаДней,
	               |	CRM_ШаблонЭтапаКалендарногоПлана.Важность КАК Важность
	               |ИЗ
	               |	Справочник.CRM_ШаблоныЭтаповПроектов КАК CRM_ШаблоныЭтаповПроектов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_ШаблонЭтапаКалендарногоПлана КАК CRM_ШаблонЭтапаКалендарногоПлана
	               |		ПО CRM_ШаблоныЭтаповПроектов.Ссылка = CRM_ШаблонЭтапаКалендарногоПлана.ШаблонЭтапаПроекта
	               |ГДЕ
	               |	(CRM_ШаблоныЭтаповПроектов.ШаблонПроекта = &ШаблонПроекта
	               |			ИЛИ CRM_ШаблонЭтапаКалендарногоПлана.ШаблонПроекта = &ШаблонПроекта)
	               |	И (CRM_ШаблоныЭтаповПроектов.Ссылка В ИЕРАРХИИ (&ШаблонЭтапаПроекта)
	               |			ИЛИ CRM_ШаблонЭтапаКалендарногоПлана.ШаблонЭтапаПроекта В ИЕРАРХИИ (&ШаблонЭтапаПроекта))
	               |	И НЕ CRM_ШаблоныЭтаповПроектов.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	МинимальноеСмещение ИЕРАРХИЯ,
	               |	Пакет,
	               |	CRM_ШаблонЭтапаКалендарногоПлана.Смещение";
// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	
	Запрос.УстановитьПараметр("ШаблонПроекта", Объект.ШаблонПроекта);
	Запрос.УстановитьПараметр("ШаблонЭтапаПроекта", Объект.Ссылка);
	
	ДеревоПоЗапросу = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ЗаполнитьДеревоПоЭтапамРекурсивно(ДеревоМодели.ПолучитьЭлементы(), ДеревоПоЗапросу.Строки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПоЭтапамРекурсивно(СтрокиЭтапов, СтрокиПоЗапросу)
	
	ПредыдущийЭтапКакРодитель = NULL;
	СтрокаЭтапаГруппа		  = Неопределено;
	
	Для каждого СтрокаПоЗапросу Из СтрокиПоЗапросу Цикл
		
		Если СтрокаПоЗапросу.Строки.Количество() > 0 Тогда
			// Есть подчиненные пакеты/задачи
			СтрокаЭтапа = СтрокиЭтапов.Добавить();
			СтрокаЭтапа.Этап = СтрокаПоЗапросу.Пакет;
			СтрокаЭтапа.ИндексКартинки = 0;
			ЗаполнитьДеревоПоЭтапамРекурсивно(СтрокаЭтапа.ПолучитьЭлементы(), СтрокаПоЗапросу.Строки);
			
			ПредыдущийЭтапКакРодитель = СтрокаПоЗапросу.Пакет;
			СтрокаЭтапаГруппа		  = СтрокаЭтапа;
		КонецЕсли;
		
		Если ПредыдущийЭтапКакРодитель <> СтрокаПоЗапросу.Пакет Тогда
			// Создадим ветку Пакета 
			СтрокаЭтапаГруппа  = СтрокиЭтапов.Добавить();
			СтрокаЭтапаГруппа.Этап = СтрокаПоЗапросу.Пакет;
			СтрокаЭтапаГруппа.ИндексКартинки = 0;
			
			ПредыдущийЭтапКакРодитель = СтрокаПоЗапросу.Пакет;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СтрокаПоЗапросу.Этап) И НЕ СтрокаПоЗапросу.Этап.ПометкаУдаления Тогда
			// Добавим задачу (верхнего уровня или подчиненную пакету)
			СтрокаЭтапа = ?(СтрокаЭтапаГруппа = Неопределено, СтрокиЭтапов.Добавить(),
				 СтрокаЭтапаГруппа.ПолучитьЭлементы().Добавить());
			СтрокаЭтапа.Этап 				  = СтрокаПоЗапросу.Этап;
			СтрокаЭтапа.ОтсрочкаСтартаДней 	  = СтрокаПоЗапросу.ОтсрочкаСтартаДней;
			СтрокаЭтапа.ПродолжительностьДней = СтрокаПоЗапросу.ПродолжительностьДней;
			СтрокаЭтапа.ТипЭтапа 			  = СтрокаПоЗапросу.ТипЭтапа;
			СтрокаЭтапа.Важность 			  = СтрокаПоЗапросу.Важность;
			СтрокаЭтапа.ИндексКартинки   	  = ?(СтрокаЭтапа.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.Этап, 1, 3);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПоЭтапамВводОтЗадачи()
	
	ДеревоМодели.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = CRM_УправлениеПроектамиСервер.ТекстЗапросаШаблонаЭтапаВводОтЗадачи();
	
	Запрос.УстановитьПараметр("ШаблонПроекта", Объект.ШаблонПроекта);
	Запрос.УстановитьПараметр("ШаблонЭтапаПроекта", Объект.Ссылка);
	
	ДеревоПоЗапросу = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	УзелТекущегоЭтапа = НайтиТекущийЭтапРекурсивно(Неопределено, ДеревоПоЗапросу.Строки, Объект.Ссылка);
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоМодели");
	
	ВерхняяСтрокаЭтапов = ДеревоОбъект.Строки.Добавить();
	
	ВерхняяСтрокаЭтапов.ОтсрочкаСтартаДней = УзелТекущегоЭтапа.МинимальноеСмещение;
	ВерхняяСтрокаЭтапов.ПродолжительностьДней = УзелТекущегоЭтапа.ПродолжительностьДнейЭтапа;
	ВерхняяСтрокаЭтапов.Этап = УзелТекущегоЭтапа.Пакет;
	ВерхняяСтрокаЭтапов.ИндексКартинки = 0;
	ВерхняяСтрокаЭтапов.ПорядокВШаблоне = УзелТекущегоЭтапа.ПорядокГруппы;
	
	Длительность = 0;
	МаксПорядок = 0;
	
	ЗаполнитьДеревоПоЭтапамРекурсивноВводОтЗадачи(ВерхняяСтрокаЭтапов, ВерхняяСтрокаЭтапов.Строки, УзелТекущегоЭтапа.Строки, Длительность, МаксПорядок);
	
	ВерхняяСтрокаЭтапов.Строки.Сортировать("ПорядокВШаблоне");
	
	ВерхняяСтрокаЭтапов.МаксПорядокВГруппе = МаксПорядок;
	
	ЗначениеВРеквизитФормы(ДеревоОбъект, "ДеревоМодели");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиТекущийЭтапРекурсивно(Родитель, Строки, Ссылка)
	
	Для Каждого СтрокаДерева Из Строки Цикл
		
		Если СтрокаДерева.Пакет = Ссылка Тогда
			Возврат СтрокаДерева;
		КонецЕсли;
		
		Узел = НайтиТекущийЭтапРекурсивно(СтрокаДерева, СтрокаДерева.Строки, Ссылка);
		Если Узел <> Неопределено Тогда
			Возврат Узел;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоПоЭтапамРекурсивноВводОтЗадачи(РодительСтрокаЭтапов, СтрокиЭтапов, СтрокиПоЗапросу, Длительность, МаксПорядок)
	
	Для каждого СтрокаПоЗапросу Из СтрокиПоЗапросу Цикл
		
		Если СтрокаПоЗапросу.Строки.Количество() > 0 Тогда
			// Есть подчиненные пакеты/задачи
			Если ЗначениеЗаполнено(СтрокаПоЗапросу.Пакет) И (РодительСтрокаЭтапов = Неопределено
				Или РодительСтрокаЭтапов.Этап <> СтрокаПоЗапросу.Пакет) Тогда
				СтрокаЭтапа = СтрокиЭтапов.Добавить();
				СтрокаЭтапа.Этап = СтрокаПоЗапросу.Пакет;
				СтрокаЭтапа.ИндексКартинки = 0;
				СтрокаЭтапа.ИдентификаторСтроки = Новый УникальныйИдентификатор;
				//СтрокаЭтапа.ОтветственныйИсполнитель = СтрокаПоЗапросу.Ответственный;
				СтрокаЭтапа.ОтсрочкаСтартаДней 	  = СтрокаПоЗапросу.МинимальноеСмещение;
				СтрокаЭтапа.ПродолжительностьДней = СтрокаПоЗапросу.ПродолжительностьДнейЭтапа;
				
				СтрокаЭтапа.ПорядокВШаблоне = СтрокаПоЗапросу.ПорядокГруппы;
				МаксПорядок = Макс(МаксПорядок, СтрокаЭтапа.ПорядокВШаблоне);
			
				МаксПорядокВнутренний = 0;
				ЗаполнитьДеревоПоЭтапамРекурсивноВводОтЗадачи(СтрокаЭтапа, СтрокаЭтапа.Строки, СтрокаПоЗапросу.Строки, Длительность, МаксПорядокВнутренний);
				
				СтрокаЭтапа.МаксПорядокВГруппе = МаксПорядокВнутренний;
				
				СтрокаЭтапа.Строки.Сортировать("ПорядокВШаблоне");				
			Иначе
				ЗаполнитьДеревоПоЭтапамРекурсивноВводОтЗадачи(РодительСтрокаЭтапов, СтрокиЭтапов, СтрокаПоЗапросу.Строки, Длительность, МаксПорядок);
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаПоЗапросу.Этап) И НЕ СтрокаПоЗапросу.ПометкаУдаления Тогда
			
			СтрокаЭтапа = СтрокиЭтапов.Добавить();
			СтрокаЭтапа.Этап 				  = СтрокаПоЗапросу.Этап;
			
			СтрокаЭтапа.ПорядокВШаблоне = СтрокаПоЗапросу.ПорядокЗадачи;
			МаксПорядок = Макс(МаксПорядок, СтрокаЭтапа.ПорядокВШаблоне);
			
			СтрокаЭтапа.ОтсрочкаСтартаДней = СтрокаПоЗапросу.ОтсрочкаСтартаДней;
			СтрокаЭтапа.ОтсрочкаОтПредыдущейЗадачи = СтрокаПоЗапросу.ОтсрочкаОтПредыдущейЗадачи;			
			СтрокаЭтапа.ПродолжительностьДней = СтрокаПоЗапросу.ПродолжительностьДней;
			СтрокаЭтапа.ТипЭтапа 			  = СтрокаПоЗапросу.ТипЭтапа;
			СтрокаЭтапа.Важность 			  = СтрокаПоЗапросу.Важность;
			СтрокаЭтапа.ИндексКартинки   	  = ?(СтрокаЭтапа.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.Этап, 1, 3);
			СтрокаЭтапа.ИдентификаторСтроки	  = Новый УникальныйИдентификатор;
			Если СтрокаЭтапа.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
				ТекДлительность = СтрокаЭтапа.ОтсрочкаСтартаДней + 1;
			Иначе
				ТекДлительность = СтрокаЭтапа.ОтсрочкаСтартаДней + СтрокаЭтапа.ПродолжительностьДней;
			КонецЕсли;
			Если ТекДлительность > Длительность Тогда
				Длительность = ТекДлительность;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонЗадачи(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЭтапЗавершение", 
					 	 ЭтотОбъект, Новый Структура("ИмяКоманды", Команда.Имя));
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонКТ(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЭтапЗавершение", 
					 	 ЭтотОбъект, Новый Структура("ИмяКоманды", Команда.Имя));
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонЭтапа(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьПакетЗадачЗавершение", 
					 	 ЭтотОбъект, Новый Структура("ИмяКоманды", Команда.Имя));
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьКопированияЗадачи()
	
	ТекДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Этап = ТекДанные.Этап;
	Элементы.ДеревоМоделиКопироватьЗадачу.Доступность =
		(ТипЗнч(Этап) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана"));
	Элементы.ДеревоМоделиКонтекстноеМенюКопироватьЗадачу.Доступность = Элементы.ДеревоМоделиКопироватьЗадачу.Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьЗадачу(Команда)
	
	ТекДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Этап = ТекДанные.Этап;
	Если Этап = Неопределено ИЛИ ТипЗнч(Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
		Возврат;
	Иначе
		ОткрытьФорму("Документ.CRM_ШаблонЭтапаКалендарногоПлана.Форма.ФормаДокумента",
			 Новый Структура("ЗначениеКопирования", Этап),
			 ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанные(ОписаниеОповещенияОЗавершении)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВопросЗаписатьДанныеЗавершение",
			 ЭтотОбъект,
			 ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Данные еще не записаны."
"Добавление возможно только после записи данных. Записать?';en='Data is not yet recorded."
"The addition is only possible after recording data. Record?'"), 
					   РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтапЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		ДобавитьЭтапКонтрольнуюТочку(ПараметрыВыполнения.ИмяКоманды);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЭтапЗавершение()

&НаКлиенте
Процедура ДобавитьПакетЗадачЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		ДобавитьПакетЗадач();
	КонецЕсли;
	
КонецПроцедуры // ДобавитьПакетЗадач()

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанныеЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтапКонтрольнуюТочкуПослеЗаписиНового(ЗначениеВыбора)
	
	Если РежимВводаОтЗадачи Тогда
		ЗаполнитьДеревоПоЭтапамВводОтЗадачи();
	Иначе
		ЗаполнитьДеревоПоЭтапам();
	КонецЕсли;
	
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
	УстановитьКурсорНаНовыйЭтап(ЗначениеВыбора);
	
КонецПроцедуры // ДобавитьЭтапКонтрольнуюТочкуПослеЗаписиНового()

&НаКлиенте
Процедура ДобавитьПакетЗадачПослеЗаписиНового(ЗначениеВыбора)
	
	ЗаполнитьДеревоПоЭтапам();
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
	
	УстановитьКурсорНаНовыйЭтап(ЗначениеВыбора);
	
КонецПроцедуры // ДобавитьПакетЗадачПослеЗаписиНового()

&НаСервере
Процедура УстановитьКурсорНаНовыйЭтап(ЗначениеВыбора)
	
	ИдентификаторЭтапа = 0;
	НайтиНовыйЭтап(ДеревоМодели.ПолучитьЭлементы(), ЗначениеВыбора);
	Элементы.ДеревоМодели.ТекущаяСтрока = ИдентификаторЭтапа;
	
КонецПроцедуры

&НаСервере
Процедура НайтиНовыйЭтап(Строки, Этап)
	
	Для каждого Строка Из Строки Цикл
		Если ИдентификаторЭтапа > 0 Тогда
			Возврат;
		КонецЕсли;
		Если Строка.Этап = Этап Тогда
			ИдентификаторЭтапа = Строка.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;
		СтрокиПолученные = Строка.ПолучитьЭлементы();
		Если СтрокиПолученные.Количество() > 0 Тогда
			НайтиНовыйЭтап(СтрокиПолученные, Этап);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция МаксПорядокКорняДереваМодели()
	
	Если ДеревоМодели.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат ДеревоМодели.ПолучитьЭлементы()[0].МаксПорядокВГруппе;
	
КонецФункции

&НаСервере
Функция МаксПорядокВГруппе(Этап)
	
	Если Этап = Неопределено Тогда // Выделен корень дерева
		Возврат МаксПорядокКорняДереваМодели();
	КонецЕсли;
	
	РодительЭтапа = Неопределено;
	Если ТипЗнч(Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
		//РодительЭтапа = Этап.Родитель;
		РодительЭтапа = Этап;
	ИначеЕсли ТипЗнч(Этап) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана") Тогда
		РодительЭтапа = Этап.ШаблонЭтапаПроекта;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РодительЭтапа) Тогда
		Возврат МаксПорядокКорняДереваМодели(); // Выделен этап строк корня дерева
	КонецЕсли;
	
	ИдентификаторЭтапа = 0;
	НайтиНовыйЭтап(ДеревоМодели.ПолучитьЭлементы(), РодительЭтапа);
		
	СтрокаРодителяЭтапа = ДеревоМодели.НайтиПоИдентификатору(ИдентификаторЭтапа);
	
	Если СтрокаРодителяЭтапа = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат СтрокаРодителяЭтапа.МаксПорядокВГруппе;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьЭтапКонтрольнуюТочку(ИмяКоманды)
	
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	Если ИмяКоманды = "ДобавитьШаблонЗадачи" Тогда
		ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап");
	
	ИначеЕсли ИмяКоманды = "ДобавитьШаблонКонтрольнойТочки" Тогда	
		ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка");
	
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ШаблонПроекта"  , Объект.ШаблонПроекта);
	ЗначенияЗаполнения.Вставить("ТипЭтапа", ТипЭтапа);
	ЗначенияЗаполнения.Вставить("ПорядокВШаблоне", МаксПорядокВГруппе(ТекущиеДанные.Этап) + 1);
	
	Если ТипЗнч(ТекущиеДанные.Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
		ЗначенияЗаполнения.Вставить("ШаблонЭтапаПроекта", ТекущиеДанные.Этап);
	Иначе
		РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
		Если НЕ РодительСтроки = Неопределено Тогда
			ЗначенияЗаполнения.Вставить("ШаблонЭтапаПроекта", РодительСтроки.Этап);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.CRM_ШаблонЭтапаКалендарногоПлана.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор, , , , 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры // ДобавитьЭтапКонтрольнуюТочку()

&НаКлиенте
Процедура ДобавитьПакетЗадач()
	
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ШаблонПроекта", Объект.ШаблонПроекта);
	ЗначенияЗаполнения.Вставить("ПорядокВШаблоне", МаксПорядокВГруппе(ТекущиеДанные.Этап) + 1);
	
	Если ТипЗнч(ТекущиеДанные.Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
		ЗначенияЗаполнения.Вставить("Родитель", ТекущиеДанные.Этап);
	Иначе
		РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
		Если НЕ РодительСтроки = Неопределено Тогда
			ЗначенияЗаполнения.Вставить("Родитель", РодительСтроки.Этап);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.CRM_ШаблоныЭтаповПроектов.Форма.ФормаЭлементаПростая",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры // ДобавитьПакетЗадач()

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ЭлементДерево, ИмяРеквизитаФормы, Развернуть = Истина)
	
	Если Развернуть Тогда
		СтрокиДерева = ЭтотОбъект[ИмяРеквизитаФормы].ПолучитьЭлементы();
	Иначе
		СтрокиДерева = ЭтотОбъект[ИмяРеквизитаФормы].ПолучитьЭлементы()[0].ПолучитьЭлементы();
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если Развернуть Тогда
			ЭлементДерево.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		Иначе
			ЭлементДерево.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Развернуть(Команда)
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");	
КонецПроцедуры

&НаКлиенте
Процедура Свернуть(Команда)
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели", Ложь);	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьЗадачуВверх(Команда)
	
	Если НЕ РежимВводаОтЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ПередИзменениемШаблонаЭтапаКалендарногоПлана", Объект.ШаблонПроекта);	
	ПереместитьЭлемент("Вверх");
	Оповестить("ИзменениеШаблонаЭтапаКалендарногоПлана", Объект.ШаблонПроекта);
	
	ДеревоМоделиОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьЗадачуВниз(Команда)
	
	Если НЕ РежимВводаОтЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ПередИзменениемШаблонаЭтапаКалендарногоПлана", Объект.ШаблонПроекта);	
	ПереместитьЭлемент("Вниз");
	Оповестить("ИзменениеШаблонаЭтапаКалендарногоПлана", Объект.ШаблонПроекта);
	
	ДеревоМоделиОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьЭлемент(Направление)
	
	Если Элементы.ДеревоМодели.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = Элементы.ДеревоМодели.ТекущиеДанные.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		ВызватьИсключение "Родитель перемещаемой строки пустой";
	КонецЕсли;
	
	СтрокиРодителя = Родитель.ПолучитьЭлементы();
	
	ИндексТекущего = СтрокиРодителя.Индекс(Элементы.ДеревоМодели.ТекущиеДанные);
	ИндексСоседнего = ИндексТекущего;
	
	Если Направление = "Вверх" Тогда
		Если ИндексТекущего > 0 Тогда
			ИндексСоседнего = ИндексТекущего - 1;
		КонецЕсли;
	Иначе // Вниз
		Если ИндексТекущего < СтрокиРодителя.Количество() - 1 Тогда
			ИндексСоседнего = ИндексТекущего + 1;
		КонецЕсли;
	КонецЕсли;
	
	Если ИндексТекущего <> ИндексСоседнего Тогда
		СоседняяСтрока = СтрокиРодителя.Получить(ИндексСоседнего);
		СоседнийЭлементЭтап = СоседняяСтрока.Этап;
		
		// Оба элемента - шаблоны этапов
		Если ТипЗнч(Элементы.ДеревоМодели.ТекущиеДанные.Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов")
			И ТипЗнч(СоседнийЭлементЭтап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
			
			CRM_ОбщегоНазначенияСервер.ПоменятьЭлементыМестами(
								Элементы.ДеревоМодели.ТекущиеДанные.Этап, СоседнийЭлементЭтап,
								ИндексТекущего + 1, ИндексСоседнего + 1);
			CRM_УправлениеПроектамиСервер.ПересчитатьДеревоШаблонаПроекта(Объект.ШаблонПроекта);
			
		// Только первый элемент - шаблон этапа, второй - задача	
		ИначеЕсли ТипЗнч(Элементы.ДеревоМодели.ТекущиеДанные.Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
		
			CRM_ОбщегоНазначенияСервер.ПоменятьЭлементыМестами(
								Элементы.ДеревоМодели.ТекущиеДанные.Этап, СоседнийЭлементЭтап,
								ИндексТекущего + 1, ИндексСоседнего + 1);
			
		// Только второй элемент - шаблон этапа, первый - задача	
		ИначеЕсли ТипЗнч(СоседнийЭлементЭтап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
		    // Элементы меняются местами - при записи задачи будет вызван пересчет дерева шаблона проекта
			CRM_ОбщегоНазначенияСервер.ПоменятьЭлементыМестами(
								СоседнийЭлементЭтап, Элементы.ДеревоМодели.ТекущиеДанные.Этап,
								ИндексСоседнего + 1, ИндексТекущего + 1);
		
		// Оба элемента - задачи
		Иначе			
			CRM_ОбщегоНазначенияСервер.ПоменятьЭлементыМестами(
								Элементы.ДеревоМодели.ТекущиеДанные.Этап, СоседнийЭлементЭтап,
								ИндексТекущего + 1, ИндексСоседнего + 1, "НеПересчитыватьДеревоШаблонаПроекта");
		КонецЕсли;
							
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиОбновитьКоманда(Команда)
	
	ДеревоМоделиОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиОбновить()
	
	Если РежимВводаОтЗадачи Тогда
		ЗаполнитьДеревоПоЭтапамВводОтЗадачи();
	Иначе
		ЗаполнитьДеревоПоЭтапам();
	КонецЕсли;	
	
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьЭтап(Команда)
	
	ДеревоМоделиВыбор(Элементы.ДеревоМодели, Элементы.ДеревоМодели.ТекущаяСтрока, Неопределено, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиЭтап(ЭтапПриемник, ЭтапПереносимый)
	
	ЭтапПереносимыйОбъект = ЭтапПереносимый.ПолучитьОбъект();
	
	Если ТипЗнч(ЭтапПереносимыйОбъект) = Тип("СправочникОбъект.CRM_ШаблоныЭтаповПроектов") Тогда
		ЭтапПереносимыйОбъект.Родитель = ЭтапПриемник;
	ИначеЕсли ТипЗнч(ЭтапПереносимыйОбъект) = Тип("ДокументОбъект.CRM_ШаблонЭтапаКалендарногоПлана") Тогда
		ЭтапПереносимыйОбъект.ШаблонЭтапаПроекта = ЭтапПриемник;
	Иначе 
		Возврат;
	КонецЕсли;
	
	ЭтапПереносимыйОбъект.Записать();
	
	Если ТипЗнч(ЭтапПереносимыйОбъект) = Тип("СправочникОбъект.CRM_ШаблоныЭтаповПроектов") Тогда
		CRM_УправлениеПроектамиСервер.ПересчитатьДеревоШаблонаПроекта(Объект.ШаблонПроекта);
	КонецЕсли;
	
	Если РежимВводаОтЗадачи Тогда
		ЗаполнитьДеревоПоЭтапамВводОтЗадачи();
	Иначе
		ЗаполнитьДеревоПоЭтапам();
	КонецЕсли;
	
	УстановитьКурсорНаНовыйЭтап(ЭтапПереносимый);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьЗацикливанияУровнейПриПереносе(ЭтапПриемник, ЭтапПереносимый)
	
	Если ЭтапПриемник = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат ЭтапПриемник.ПринадлежитЭлементу(ЭтапПереносимый);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДеревоМоделиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ИмяКоманды = Элементы.ДеревоМоделиКнопкаДобавитьЗадачу.ИмяКоманды;
	Команда = Команды.Найти(ИмяКоманды);
	ДобавитьШаблонЗадачи(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтапПриемник = Элемент.ДанныеСтроки(Строка).Этап;
	
	Если ТипЗнч(ЭтапПриемник) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана")  Тогда
		
		Родитель = Элемент.ДанныеСтроки(Строка).ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
		    ЭтапПриемник = ПредопределенноеЗначение("Справочник.CRM_ШаблоныЭтаповПроектов.ПустаяСсылка");
		Иначе
			ЭтапПриемник = Родитель.Этап;
		КонецЕсли;
	КонецЕсли;
	
	Оповестить("ПередИзменениемШаблонаЭтапаКалендарногоПлана", Объект.ШаблонПроекта);
	
	ЭтапПереносимый = Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение).Этап;
	
	ПеренестиЭтап(ЭтапПриемник, ЭтапПереносимый);
	
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
	
	Оповестить("ИзменениеШаблонаЭтапаКалендарногоПлана", Объект.ШаблонПроекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Этап = Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение).Этап;

	Если НЕ ЗначениеЗаполнено(Этап) ИЛИ Этап = Объект.Ссылка Тогда
		Выполнение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка = Неопределено Тогда
		// перенос на "пустоту" поля
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	ЭтапПриемник		 = Элемент.ДанныеСтроки(Строка).Этап;
	ЭтапПереносимый		 = Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение).Этап;
	ПриемникЭтоЗадача 	 = (ТипЗнч(ЭтапПриемник) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана"));
	ПереносимыйЭтоЗадача = (ТипЗнч(ЭтапПереносимый) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана"));
	
	Если ПриемникЭтоЗадача  Тогда
		РодительПриемника = Элемент.ДанныеСтроки(Строка).ПолучитьРодителя();
		Если РодительПриемника = Неопределено Тогда
			ЭтапПриемникРодитель = ПустойШаблонПакета;
		Иначе
			ЭтапПриемникРодитель = РодительПриемника.Этап;
		КонецЕсли;
	Иначе
		ЭтапПриемникРодитель = ЭтапПриемник;
	КонецЕсли;
	
	РодительПереносимого = Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение).ПолучитьРодителя();
	Если РодительПереносимого = Неопределено Тогда
		ЭтапПереносимыйРодитель = ПустойШаблонПакета;
	ИначеЕсли НЕ ПереносимыйЭтоЗадача И ПриемникЭтоЗадача И ЭтапПриемникРодитель = ЭтапПереносимый Тогда
		// перенос пакета на подчиненную задачу
		ЭтапПереносимыйРодитель = ЭтапПереносимый;
	Иначе
		ЭтапПереносимыйРодитель = РодительПереносимого.Этап;
	КонецЕсли;
	
	Если (ЭтапПриемникРодитель = ЭтапПереносимыйРодитель)
		 Или (НЕ ПереносимыйЭтоЗадача И ЕстьЗацикливанияУровнейПриПереносе(ЭтапПриемникРодитель, ЭтапПереносимый)) Тогда
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Этап = Объект.Ссылка Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
	
		Этап = ДанныеСтроки.Этап;
		
		ПараметрыФормы = Новый Структура("Ключ", Этап);
		
		ВерсияДанныхЭтапа = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Этап, "ВерсияДанных");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьПослеЗаписиЭтапа", ЭтотОбъект,
			 Новый Структура("Ссылка, ВерсияДанных", Этап,
			 ВерсияДанныхЭтапа));
		
		Если ТипЗнч(Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
			
			ОткрытьФорму("Справочник.CRM_ШаблоныЭтаповПроектов.ФормаОбъекта",
				ПараметрыФормы,
				ЭтотОбъект,
				УникальныйИдентификатор, , ,
				ОписаниеОповещения, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
			
		ИначеЕсли ТипЗнч(Этап) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана") Тогда
			
			ОткрытьФорму("Документ.CRM_ШаблонЭтапаКалендарногоПлана.ФормаОбъекта",
				ПараметрыФормы,
				ЭтотОбъект,
				УникальныйИдентификатор, , ,
				ОписаниеОповещения, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
			
		КонецЕсли;
			
	ИначеЕсли ТипЗнч(ДанныеСтроки.Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов")	Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПриИзменении(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	ИмяРеквизита = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "ДеревоМодели", "");
	Значение = ТекДанные[ИмяРеквизита];
	Оповестить("ПередИзменениемШаблонаЭтапаКалендарногоПлана", Объект.ШаблонПроекта);	
	Если ПриИзмененииЗначенияРеквизитыЭтапа(ИмяРеквизита, ТекДанные.ПолучитьИдентификатор(), Значение) Тогда
		Оповестить("ИзменениеШаблонаЭтапаКалендарногоПлана", Объект.ШаблонПроекта);
		ДеревоМоделиОбновить();
	Иначе
		ТекДанные[ИмяРеквизита] = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииЗначенияРеквизитыЭтапа(ИмяРеквизита, ИдентификаторСтроки, Значение)
	ТекДанные = ДеревоМодели.НайтиПоИдентификатору(ИдентификаторСтроки);
	День = 86400;
	ДанныеЭтапаКалендарногоПлана = Новый Структура;
	Если ИмяРеквизита = "ОтсрочкаСтартаДней" Тогда
		ДанныеЭтапаКалендарногоПлана.Вставить("Смещение", Значение);
	КонецЕсли;
	Если ИмяРеквизита = "ОтсрочкаОтПредыдущейЗадачи" Тогда
		ДанныеЭтапаКалендарногоПлана.Вставить("СмещениеОтЗадачи", Значение);
	КонецЕсли;
	ДанныеЭтапаКалендарногоПлана.Вставить(ИмяРеквизита, Значение);
	ИзменитьЭтапКалендарногоПлана(ТекДанные.Этап, ДанныеЭтапаКалендарногоПлана);
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ИзменитьЭтапКалендарногоПлана(Этап, ДанныеЭтапаКалендарногоПлана)
	
	ЭтапКалендарногоПлана = Этап.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(ЭтапКалендарногоПлана, ДанныеЭтапаКалендарногоПлана);
	ЭтапКалендарногоПлана.Записать();
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьПослеЗаписиЭтапа(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		 И ДополнительныеПараметры.Свойство("Ссылка") И ДополнительныеПараметры.Свойство("ВерсияДанных") Тогда
		
		Если CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ДополнительныеПараметры.Ссылка,
			 "ВерсияДанных") <> ДополнительныеПараметры.ВерсияДанных Тогда
		
			Если РежимВводаОтЗадачи Тогда
				ЗаполнитьДеревоПоЭтапамВводОтЗадачи();
			Иначе
				ЗаполнитьДеревоПоЭтапам();
			КонецЕсли;
			
			РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
			УстановитьКурсорНаНовыйЭтап(ДополнительныеПараметры.Ссылка);
		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПослеЗаписиЭтапа()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПередИзменениемШаблонаЭтапаКалендарногоПлана" И Параметр = Объект.ШаблонПроекта Тогда
		Записать();
	ИначеЕсли ИмяСобытия = "ИзменениеШаблонаЭтапаКалендарногоПлана" И Параметр = Объект.ШаблонПроекта Тогда
		Если ЭтотОбъектИзменен() Тогда
			Прочитать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЭтотОбъектИзменен()
	Возврат Объект.ВерсияДанных <> Объект.Ссылка.ВерсияДанных;
КонецФункции

&НаКлиенте
Процедура ДеревоМоделиПриАктивизацииСтроки(Элемент)
	ДоступностьКопированияЗадачи();
КонецПроцедуры

#КонецОбласти // РаботаСЭтапами
