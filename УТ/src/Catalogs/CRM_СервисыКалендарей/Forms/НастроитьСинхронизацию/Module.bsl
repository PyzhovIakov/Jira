
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	// +Google
	СервисGoogle = Справочники.CRM_СервисыКалендарей.Google;
	ОписанияОбластейДоступа = CRM_ОбменСGoogleКлиентСервер.ОписанияОбластейДоступаКалендарь();
	ЗаполнитьОбластиДоступа(ОписанияОбластейДоступа);
	ИдентификацияПриложения = РегистрыСведений.CRM_СеансовыеДанныеGoogle.ИдентификацияПриложения();
	// -Google
	
	СервисЯндекс = Справочники.CRM_СервисыКалендарей.Яндекс;
	СервисMailRu = Справочники.CRM_СервисыКалендарей.MailRu;
	СервисICloud = Справочники.CRM_СервисыКалендарей.iCloud;
	
	ПрочитатьНастройкиКалендарей();
	ОбновитьФормуПоНастройкам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ТолькоСервисGoogle И Не ЗначениеЗаполнено(СервисКалендарей) Тогда
		
		СервисКалендарей = ПредопределенноеЗначение("Справочник.CRM_СервисыКалендарей.Google");
		НачатьАвторизацию();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru='Настройки календарей были изменены. Сохранить?';
			|en='Calendars settings were changed. Save?'"); 
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемВопросЗавершение",
			ЭтотОбъект, Новый Структура);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьНастройкиКалендарей();
		
		Модифицированность = Ложь;
		Оповестить("НастроенаСинхронизацияКалендаря");
		Закрыть();
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ЗначениеЗаполнено(СервисКалендарей) Тогда
		CRM_ОбщегоНазначенияСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ВыбранныйКалендарьИдентификатор");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СервисКалендарейОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(СервисКалендарей) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьОтключение();
	
КонецПроцедуры

&НаКлиенте
Процедура СервисКалендарейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = СервисКалендарей Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение = СервисКалендарейСохраненный Тогда
		// Отдельно нужно обработать ситуацию возврата к ранее сохраненной настройке.
		ПрочитатьНастройкиКалендарей();
		Модифицированность = Ложь;
		ОбновитьФормуПоНастройкам();
	Иначе
		ТекстВопроса = НСтр("ru='Не настроен доступ к сервису календарей. Настроить?';
			|en='Access to calendars service is not configured. Configure?'"); 
		ОписаниеОповещения = Новый ОписаниеОповещения("СервисКалендарейОбработкаВыбораВопросЗавершение",
			ЭтотОбъект, Новый Структура("СервисКалендарей", ВыбранноеЗначение));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СервисКалендарейОбработкаВыбораВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СервисКалендарей = ДополнительныеПараметры.СервисКалендарей;
		ВыбранныйКалендарьИдентификатор = "";
		ВыбранныйКалендарьНаименование = "";
		ДанныеАвторизации = Новый Структура;
		НачатьАвторизацию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныйКалендарьИдентификаторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыбранныйКалендарьИдентификатор = ВыбранноеЗначение;
	СписокВыбора = Элементы.ВыбранныйКалендарьИдентификатор.СписокВыбора;
	НайденныйЭлемент = СписокВыбора.НайтиПоЗначению(ВыбранныйКалендарьИдентификатор);
	Если НайденныйЭлемент <> Неопределено Тогда
		ВыбранныйКалендарьНаименование = НайденныйЭлемент.Представление;
	КонецЕсли;
	
КонецПроцедуры

#Область Google

&НаКлиенте
Процедура Подключаемый_ПриИзмененииОбластиДоступа(Элемент)
	
	ЗапроситьПодтверждениеДоступа();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьЗакрыть(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.КалендарьСинхронизацияСGoogle.Удобство.КоличествоНажатийКнопкаВСветофореНастроить");
	
	СохранитьНастройкиКалендарей();
	
	Модифицированность = Ложь;
	Оповестить("НастроенаСинхронизацияКалендаря");
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКалендари(Команда)
	
	ОбновитьФормуПоНастройкам();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьСинхронизацию(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.КалендарьСинхронизацияСGoogle.Удобство.КоличествоНажатийКнопкаВСветофореОтключить");
	
	НачатьОтключение();
	
КонецПроцедуры

&НаКлиенте
Процедура Справка(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.КалендарьСинхронизацияСGoogle.Удобство.КоличествоНажатийКнопкаВСветофореСправка");
	
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("ИнтеграцияGoogleCalendar"));
	
КонецПроцедуры

#Область Google

&НаКлиенте
Процедура АвторизоватьсяВGoogle(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.КалендарьСинхронизацияСGoogle.Удобство.КоличествоНажатийКнопкаПолучениеРазрешенияGoogle");
	ПерейтиПоНавигационнойСсылке(АдресЗапросаНаПодтверждениеДоступа(Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводТокенаЗапроса(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.КалендарьСинхронизацияСGoogle.Удобство.КоличествоНажатийКнопкаПроверитьПодключениеВФормеПодключенияСинхронизации");
	
	ПоказатьОповещениеПользователя(НСтр("ru='Выполняется обработка токена запроса';en='Processing of query token'"));
	
	ПодключитьОбработчикОжидания("ОбработатьПолучениеТокенаЗапроса", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура НачатьАвторизацию()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатАвторизации", ЭтотОбъект);
	Если СервисКалендарей = СервисGoogle Тогда
		ЗапроситьПодтверждениеДоступа();
	ИначеЕсли СервисКалендарей = СервисЯндекс 
		Или СервисКалендарей = СервисMailRu 
		Или СервисКалендарей = СервисICloud Тогда
		Элементы.Режимы.ТекущаяСтраница = Элементы.РежимАвторизацииCalDav;
		Логин = "";
		Пароль = "";
	Иначе
		ОткрытьФорму(
			CRM_СинхронизацияКалендарейКлиентПереопределяемый.ИмяФормыАвторизации(СервисКалендарей),
			CRM_СинхронизацияКалендарейКлиентПереопределяемый.ПараметрыФормыАвторизации(СервисКалендарей),
			ЭтотОбъект, , , ,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатАвторизации(Результат, ДополнительныеПараметры) Экспорт
	
	Модифицированность = Истина;
	ДанныеАвторизации = Результат;
	
	ОбновитьФормуПоНастройкам();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОтключение()
	
	ТекстВопроса = НСтр("ru='Доступ к сервису календарей будет отключен. Продолжить?';
		|en='Access to service calendars will be disabled. Continue?'"); 
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатОтключения",
		ЭтотОбъект, Новый Структура);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатОтключения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СервисКалендарей = ПредопределенноеЗначение("Справочник.CRM_СервисыКалендарей.ПустаяСсылка");
		ВыбранныйКалендарьИдентификатор = "";
		ВыбранныйКалендарьНаименование = "";
		ДанныеАвторизации = Новый Структура;
		
		СохранитьНастройкиКалендарей();
		
		Модифицированность = Ложь;
		Оповестить("НастроенаСинхронизацияКалендаря");
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиКалендарей()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросКоличествоСервисов = Новый Запрос(
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(СервисыКалендарей.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.CRM_СервисыКалендарей КАК СервисыКалендарей");
	РезультатЗапроса = ЗапросКоличествоСервисов.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ТолькоСервисGoogle = (Выборка.Количество = 1);
	
	КалендарьСохраненный = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("КалендарьДляСинхронизации");
	
	Если ЗначениеЗаполнено(КалендарьСохраненный) Тогда
		СервисКалендарей = КалендарьСохраненный.СервисКалендарей;
		ВыбранныйКалендарьИдентификатор = КалендарьСохраненный.Идентификатор;
		ВыбранныйКалендарьНаименование = КалендарьСохраненный.Наименование;
		Если СервисКалендарей = СервисЯндекс 
			Или СервисКалендарей = СервисMailRu 
			Или СервисКалендарей = СервисICloud Тогда
			УчетныеЗаписи = Справочники.CRM_УчетныеЗаписиВнешнихКалендарей.УчетныеЗаписиПользователя(ТекущийПользователь);
			УчетнаяЗаписьСтрока = УчетныеЗаписи.Найти(СервисКалендарей);
			Если УчетнаяЗаписьСтрока <> Неопределено Тогда
				УчетнаяЗаписьВнешнегоКалендаря = УчетнаяЗаписьСтрока.Ссылка;
				ДанныеАвторизации = 
					Справочники.CRM_УчетныеЗаписиВнешнихКалендарей.ДанныеАвторизации(УчетнаяЗаписьВнешнегоКалендаря);
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеАвторизации);
			КонецЕсли;
		Иначе
			CRM_СинхронизацияКалендарей.ПрочитатьДанныеАвторизации(
				СервисКалендарей,
				ДанныеАвторизации,
				ТекущийПользователь);
		КонецЕсли;
	Иначе
		СервисКалендарей = Справочники.CRM_СервисыКалендарей.ПустаяСсылка();
		ВыбранныйКалендарьИдентификатор = "";
		ВыбранныйКалендарьНаименование = "";
		ДанныеАвторизации = Новый Структура;
	КонецЕсли;
	
	СервисКалендарейСохраненный = СервисКалендарей;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуПоНастройкам()
	
	Элементы.СтраницыДоступныеКалендари.ТекущаяСтраница = Элементы.СтраницаНетКалендарей;
	Элементы.СохранитьЗакрыть3.КнопкаПоУмолчанию = Истина;
	Элементы.ВыбранныйКалендарьИдентификатор.СписокВыбора.Очистить();
	Элементы.ВыбранныйКалендарьИдентификатор.АвтоОтметкаНезаполненного = ЗначениеЗаполнено(СервисКалендарей);
	
	Если СервисКалендарей = СервисЯндекс 
		Или СервисКалендарей = СервисMailRu 
		Или СервисКалендарей = СервисICloud Тогда
		
		Если Не ЗначениеЗаполнено(ДанныеАвторизации) Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаНастройкаСинхронизации.Очистить();
		Если ДанныеАвторизации.КаталогКалендарей = "" Тогда
			ДанныеАвторизации.КаталогКалендарей = CRM_СинхронизацияDAV.КаталогКалендарейНаСервереDAV(ДанныеАвторизации);
		КонецЕсли;
		
		ЗагрузитьДанныеСинхронизацииКалендарейDAV();
		ОписанияКалендарей = Новый Соответствие;
		Для Каждого СтрокаТаблицы Из ТаблицаНастройкаСинхронизации Цикл
			ОписанияКалендарей.Вставить(СтрокаТаблицы.КодВнешнегоКалендаря, СтрокаТаблицы.DAVКалендарьНаименование);
		КонецЦикла;
		Элементы.Режимы.ТекущаяСтраница = Элементы.РежимНастройки;
	
	Иначе
	
		Если Не CRM_СинхронизацияКалендарейКлиентСервер.ДанныеАвторизацииЗаполнены(СервисКалендарей, ДанныеАвторизации) Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			ОписанияКалендарей = CRM_СинхронизацияКалендарей.ОписанияКалендарей(СервисКалендарей, ДанныеАвторизации);
		Исключение
			Элементы.СтраницыДоступныеКалендари.ТекущаяСтраница = Элементы.СтраницаКалендариНеПрочитаны;
			Элементы.Обновить.КнопкаПоУмолчанию = Истина;
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	Если ОписанияКалендарей.Количество() = 0 Тогда
		Элементы.СтраницыДоступныеКалендари.ТекущаяСтраница = Элементы.СтраницаНетКалендарей;
		Элементы.СохранитьЗакрыть3.КнопкаПоУмолчанию = Истина;
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыДоступныеКалендари.ТекущаяСтраница = Элементы.СтраницаКалендариПрочитаны;
	Элементы.СохранитьЗакрыть1.КнопкаПоУмолчанию = Истина;
	
	СписокВыбора = Элементы.ВыбранныйКалендарьИдентификатор.СписокВыбора;
	Для Каждого КлючИЗначение Из ОписанияКалендарей Цикл
		НовоеЗначение = СписокВыбора.Добавить();
		НовоеЗначение.Значение = КлючИЗначение.Ключ;
		НовоеЗначение.Представление = КлючИЗначение.Значение;
	КонецЦикла;
	
	НайденныйЭлемент = СписокВыбора.НайтиПоЗначению(ВыбранныйКалендарьИдентификатор);
	Если НайденныйЭлемент = Неопределено Тогда
		ПервыйЭлемент = СписокВыбора[0];
		ВыбранныйКалендарьИдентификатор = ПервыйЭлемент.Значение;
		ВыбранныйКалендарьНаименование = ПервыйЭлемент.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиКалендарей()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(СервисКалендарей) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КалендариСотрудников.Ссылка КАК Ссылка,
		|	КалендариСотрудников.Пользователь КАК Пользователь
		|ИЗ
		|	Справочник.CRM_КалендариСотрудников КАК КалендариСотрудников
		|ГДЕ
		|	КалендариСотрудников.Идентификатор = &Идентификатор
		|	И КалендариСотрудников.Пользователь = &Пользователь");
		Запрос.Параметры.Вставить("Идентификатор", ВыбранныйКалендарьИдентификатор);
		Запрос.Параметры.Вставить("Пользователь", ТекущийПользователь);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			НовыйКалендарьОбъект = Справочники.CRM_КалендариСотрудников.СоздатьЭлемент();
			НовыйКалендарьОбъект.Идентификатор = ВыбранныйКалендарьИдентификатор;
			НовыйКалендарьОбъект.Наименование = ВыбранныйКалендарьНаименование;
			НовыйКалендарьОбъект.Пользователь = ТекущийПользователь;
			НовыйКалендарьОбъект.СервисКалендарей = СервисКалендарей;
			НовыйКалендарьОбъект.Записать();
			КалендарьНовый = НовыйКалендарьОбъект.Ссылка;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			КалендарьНовый = Выборка.Ссылка;
		КонецЕсли;
		Если КалендарьНовый <> КалендарьСохраненный Тогда
			Если ЗначениеЗаполнено(КалендарьСохраненный) Тогда
				CRM_СинхронизацияКалендарей.УдалитьДанныеАвторизации(СервисКалендарейСохраненный, ТекущийПользователь);
				CRM_СинхронизацияКалендарей.ОчиститьОчередьНаОтправку(КалендарьСохраненный);
				CRM_СинхронизацияКалендарей.УдалитьУзелПланаОбмена(КалендарьСохраненный);
			КонецЕсли;
			CRM_ОбщегоНазначенияСервер.УстановитьЗначениеНастройки(
				ТекущийПользователь, "КалендарьДляСинхронизации", КалендарьНовый);
			Если СервисКалендарей = СервисЯндекс 
				Или СервисКалендарей = СервисMailRu 
				Или СервисКалендарей = СервисICloud Тогда
				ПараметрыОтбора = Новый Структура("КодВнешнегоКалендаря", ВыбранныйКалендарьИдентификатор); 
				ДанныеВнешнегоКалендаря = ТаблицаНастройкаСинхронизации.НайтиСтроки(ПараметрыОтбора);
				ДанныеВнешнегоКалендаря[0].КалендарьСотрудника = КалендарьНовый;
				CRM_СинхронизацияКалендарей.ЗаписатьДанныеАвторизации(СервисКалендарей, ДанныеАвторизации, ТекущийПользователь,
					УчетнаяЗаписьВнешнегоКалендаря, ДанныеВнешнегоКалендаря[0]);
			Иначе
				CRM_СинхронизацияКалендарей.ЗаписатьДанныеАвторизации(СервисКалендарей, ДанныеАвторизации, ТекущийПользователь);
			КонецЕсли;
			CRM_СинхронизацияКалендарей.ДобавитьАктуальныеЗаписиВОчередьНаОтправку(КалендарьНовый);
		КонецЕсли;
	Иначе
		CRM_ОбщегоНазначенияСервер.УстановитьЗначениеНастройки(
			ТекущийПользователь, "КалендарьДляСинхронизации", Справочники.CRM_КалендариСотрудников.ПустаяСсылка());
		CRM_СинхронизацияКалендарей.УдалитьДанныеАвторизации(СервисКалендарейСохраненный, ТекущийПользователь);
		CRM_СинхронизацияКалендарей.ОчиститьОчередьНаОтправку(КалендарьСохраненный);
		CRM_СинхронизацияКалендарей.УдалитьУзелПланаОбмена(КалендарьСохраненный);
	КонецЕсли;
	
	СервисКалендарейСохраненный = СервисКалендарей;
	ОбновитьПовторноИспользуемыеЗначения();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

#Область Google

&НаКлиенте
Функция АдресЗапросаНаПодтверждениеДоступа(БраузерВОтдельномОкне)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	"%1?scope=%2&state=%3&redirect_uri=%4&response_type=code&client_id=%5&approval_prompt=force&access_type=offline",
	ИдентификацияПриложения.auth_uri,											 // 1
	ПараметрОбластьДоступа(),													 // 2
	ПараметрАвторизации(ИдентификаторАвторизации, БраузерВОтдельномОкне),		 // 3
	CRM_ОбменСGoogleКлиентСервер.АдресПеренаправления(ИдентификацияПриложения),	 // 4
	ИдентификацияПриложения.client_id);											 // 5
	
КонецФункции

&НаКлиенте
Функция ПараметрОбластьДоступа()
	
	Результат = Новый Массив;
	
	Для Каждого ТекОбластьДоступа Из ОбластиДоступа Цикл
		
		Если Не ТекОбластьДоступа.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекОбластьДоступа.ОбластьДоступа) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ТекОбластьДоступа.ОбластьДоступа);
		
	КонецЦикла;
	
	Возврат СтрСоединить(Результат, " ");
	
КонецФункции

// Выполняет заполнение таблицы формы ОбластиДоступа на основании пер
//
// Параметры:
//  ОписанияОбластейДоступа	 - Массив - массив структур,
//  описания полей см. в ОбменСGoogleКлиентСервер.НовоеОписаниеОбластиДоступа()
//
&НаСервере
Процедура ЗаполнитьОбластиДоступа(ОписанияОбластейДоступа)
	
	ОбластиДоступа.Очистить();
	
	Для Каждого ЭлементОбластиДоступа Из Элементы.ОбластиДоступа.ПодчиненныеЭлементы Цикл
		Элементы.Удалить(ЭлементОбластиДоступа);
	КонецЦикла;
	
	Для Индекс = 0 По ОписанияОбластейДоступа.ВГраница() Цикл
		
		ЗаполнитьЗначенияСвойств(ОбластиДоступа.Добавить(), ОписанияОбластейДоступа[Индекс]);
			НовыйЭлемент = Элементы.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ОбластьДоступа%1", Формат(Индекс, "ЧГ=")),
			Тип("ПолеФормы"),
			Элементы.ОбластиДоступа);
		
		НовыйЭлемент.ПутьКДанным = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ОбластиДоступа[%1].Использование",
			 Индекс);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		НовыйЭлемент.Заголовок = ОписанияОбластейДоступа[Индекс].Представление;
		НовыйЭлемент.Доступность = ОписанияОбластейДоступа[Индекс].Редактирование;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииОбластиДоступа");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьПодтверждениеДоступа()
	
	ИдентификаторАвторизации = Новый УникальныйИдентификатор;
	
	Элементы.Режимы.ТекущаяСтраница = Элементы.РежимАвторизацииGoogle;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрАвторизации(ИдентификаторАвторизации, БраузерВОтдельномОкне)
	
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"id=%1;zone=%2%3",
		ИдентификаторАвторизации,
		Формат(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса(), "ЧГ="),
		?(БраузерВОтдельномОкне, ";closebrowser=true", ""));
	
	Возврат КодироватьСтроку(Результат, СпособКодированияСтроки.КодировкаURL);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьТокенЗапроса()
	
	ТокенЗапроса = ТокенЗапросаНаСервере(ИдентификаторАвторизации);
	
	Если ЗначениеЗаполнено(ТокенЗапроса) Тогда
		ОбработатьПолучениеТокенаЗапроса();
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("ПроверитьТокенЗапроса", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТокенЗапросаНаСервере(ПараметрСеансаАвторизации)
	
	Возврат РегистрыСведений.CRM_ДанныеАвторизацииGoogle.ТокенЗапроса(ПараметрСеансаАвторизации);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолучениеТокенаЗапроса()
	
	Элементы.Режимы.ТекущаяСтраница = Элементы.РежимНастройки;
	
	Если Не ЗначениеЗаполнено(ТокенЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru='Токен запроса получен,
			| выполняется обмен на токен доступа...';en='Query token is received,
			| exchange in process for access token...'"), , ,
		БиблиотекаКартинок.Информация32);
		
	Модифицированность = Истина;
	ДанныеАвторизации = ОбменятьТокенЗапросаНаСеансовыеДанные(
		ТокенЗапроса,
		ИдентификацияПриложения,
		ПараметрОбластьДоступа());
	ОбновитьФормуПоНастройкам();
	
	Если CRM_ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(ДанныеАвторизации) Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru='Ошибка при получении токена доступа';en='Error getting access token'"), , ,
			БиблиотекаКартинок.Ошибка32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru='Токен доступа получен успешно';en='Access token successfully received'"), , ,
			БиблиотекаКартинок.Успешно32);
	КонецЕсли;
	
КонецПроцедуры

Функция ОбменятьТокенЗапросаНаСеансовыеДанные(ТокенЗапроса, ИдентификацияПриложения, ОбластьДанных)
	
	АдресДляПолученияТокенаДоступа = ОбщегоНазначенияКлиентСервер.СтруктураURI(
	ИдентификацияПриложения.token_uri);
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(АдресДляПолученияТокенаДоступа.Схема);

	HTTPСоединение = Новый HTTPСоединение(
		АдресДляПолученияТокенаДоступа.Хост,
		АдресДляПолученияТокенаДоступа.Порт, , ,
		ИнтернетПрокси, 30,
		Новый ЗащищенноеСоединениеOpenSSL);
	
	ЗапросHTTP = Новый HTTPЗапрос;
	ЗапросHTTP.АдресРесурса = АдресДляПолученияТокенаДоступа.ПутьНаСервере;
	ЗапросHTTP.Заголовки["Content-Type"] = "application/x-www-form-urlencoded";
	ЗапросHTTP.УстановитьТелоИзСтроки(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"code=%1&client_id=%2&client_secret=%3&redirect_uri=%4&grant_type=authorization_code",
			ТокенЗапроса,
			ИдентификацияПриложения.client_id,
			ИдентификацияПриложения.client_secret,
			CRM_ОбменСGoogleКлиентСервер.АдресПеренаправления(ИдентификацияПриложения)));
	
	ОтветHTTP = HTTPСоединение.ОтправитьДляОбработки(ЗапросHTTP);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветHTTP.ПолучитьТелоКакСтроку());
	Результат = ПрочитатьJSON(ЧтениеJSON);
	
	Результат.Вставить("scope", СтрЗаменить(ОбластьДанных, " ", "+"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура АвторизоватьсяПоCalDav(Команда)
	
	Если СервисКалендарей = СервисЯндекс Тогда
		Сервер = "caldav.yandex.ru";
	ИначеЕсли СервисКалендарей = СервисMailRu Тогда
		Сервер = "calendar.mail.ru";
	ИначеЕсли СервисКалендарей = СервисICloud Тогда
		Сервер = "caldav.icloud.com";
	Иначе
		Возврат;
	КонецЕсли;
	
	УчетнаяЗаписьВнешнегоКалендаря = Неопределено;
	ДанныеАвторизации = Неопределено;
	
	СтатусПодключения = 0;
	ПроверитьПодключение(СтатусПодключения);
	
	КодОтветаМультистатус = 207;
	Если СтатусПодключения = КодОтветаМультистатус Тогда
		ОбновитьФормуПоНастройкам();
	Иначе
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение. Статус %1'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(ТекстСообщения, СтатусПодключения));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключение(СтатусПодключения)
	
	Если ЗначениеЗаполнено(УчетнаяЗаписьВнешнегоКалендаря) Тогда
		ДанныеАвторизации = Справочники.CRM_УчетныеЗаписиВнешнихКалендарей.ДанныеАвторизации(УчетнаяЗаписьВнешнегоКалендаря);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеАвторизации) Тогда
		ДанныеАвторизации = Новый Структура;
		ДанныеАвторизации.Вставить("Сервер", Сервер);
		ДанныеАвторизации.Вставить("Логин", Логин);
		ДанныеАвторизации.Вставить("Пароль", Пароль);
		ДанныеАвторизации.Вставить("КорневойКаталог", "");
		ДанныеАвторизации.Вставить("КаталогКалендарей", "");
	КонецЕсли;
	
	Если СервисКалендарей = СервисMailRu Тогда
		ДанныеАвторизации.КорневойКаталог = СтрШаблон("principals/%1/%2/", Прав(Логин, СтрДлина(Логин) - СтрНайти(Логин, "@") ), 
			Лев(Логин, СтрНайти(Логин, "@") - 1));
	КонецЕсли;
	
	ДанныеАвторизации.КаталогКалендарей = 
		CRM_СинхронизацияDAV.КаталогКалендарейНаСервереDAV(ДанныеАвторизации, СтатусПодключения);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеСинхронизацииКалендарейDAV()
	
	СписокКалендарейDAV = CRM_СинхронизацияDAV.СписокКалендарейНаСервереDAV(ДанныеАвторизации);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СписокКалендарейDAV.Идентификатор КАК Идентификатор,
	|	СписокКалендарейDAV.Наименование КАК Наименование,
	|	СписокКалендарейDAV.ТипСервиса КАК ТипСервиса,
	|	СписокКалендарейDAV.ТипКалендаря КАК ТипКалендаря
	|ПОМЕСТИТЬ СписокВнешнихКалендарей
	|ИЗ
	|	&СписокКалендарейDAV КАК СписокКалендарейDAV
	|ГДЕ
	|	СписокКалендарейDAV.ТипКалендаря = ""VEVENT""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСинхронизацииСВнешнимиКалендарями.КодВнешнегоКалендаря КАК КодВнешнегоКалендаря,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.УчетнаяЗаписьВнешнегоКалендаря КАК УчетнаяЗаписьВнешнегоКалендаря,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.КалендарьDAVНаименование КАК КалендарьDAVНаименование,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.КалендарьСотрудника КАК КалендарьСотрудника,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.КалендарьСотрудника.Наименование КАК КалендарьСотрудникаНаименование,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.Статус КАК Статус
	|ПОМЕСТИТЬ ЗарегистрированныеСинхронизацииПоУчетнойЗаписи
	|ИЗ
	|	РегистрСведений.CRM_НастройкиСинхронизацииСВнешнимиКалендарями КАК НастройкиСинхронизацииСВнешнимиКалендарями
	|ГДЕ
	|	НастройкиСинхронизацииСВнешнимиКалендарями.УчетнаяЗаписьВнешнегоКалендаря = &УчетнаяЗаписьВнешнегоКалендаря
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокВнешнихКалендарей.Идентификатор КАК КодВнешнегоКалендаря,
	|	СписокВнешнихКалендарей.Наименование КАК DAVКалендарьНаименование,
	|	СписокВнешнихКалендарей.ТипСервиса КАК ТипСервиса,
	|	СписокВнешнихКалендарей.ТипКалендаря КАК ТипКалендаря,
	|	СписокВнешнихКалендарей.Наименование КАК DAVКалендарьНаименованиеОписание,
	|	ЗарегистрированныеСинхронизацииПоУчетнойЗаписи.КалендарьСотрудника КАК КалендарьСотрудника,
	|	ЗарегистрированныеСинхронизацииПоУчетнойЗаписи.КалендарьСотрудникаНаименование КАК КалендарьСотрудникаНаименование,
	|	ЗарегистрированныеСинхронизацииПоУчетнойЗаписи.УчетнаяЗаписьВнешнегоКалендаря КАК УчетнаяЗаписьВнешнегоКалендаря,
	|	ЗарегистрированныеСинхронизацииПоУчетнойЗаписи.Статус КАК Статус
	|ПОМЕСТИТЬ КартаСинхронизации
	|ИЗ
	|	СписокВнешнихКалендарей КАК СписокВнешнихКалендарей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗарегистрированныеСинхронизацииПоУчетнойЗаписи КАК ЗарегистрированныеСинхронизацииПоУчетнойЗаписи
	|		ПО СписокВнешнихКалендарей.Идентификатор = ЗарегистрированныеСинхронизацииПоУчетнойЗаписи.КодВнешнегоКалендаря
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КартаСинхронизации.КодВнешнегоКалендаря КАК КодВнешнегоКалендаря,
	|	КартаСинхронизации.DAVКалендарьНаименование КАК DAVКалендарьНаименование,
	|	КартаСинхронизации.ТипСервиса КАК ТипСервиса,
	|	КартаСинхронизации.ТипКалендаря КАК ТипКалендаря,
	|	КартаСинхронизации.DAVКалендарьНаименованиеОписание КАК DAVКалендарьНаименованиеОписание,
	|	КартаСинхронизации.КалендарьСотрудника КАК КалендарьСотрудника,
	|	КартаСинхронизации.КалендарьСотрудникаНаименование КАК КалендарьСотрудникаНаименование,
	|	КартаСинхронизации.УчетнаяЗаписьВнешнегоКалендаря КАК УчетнаяЗаписьВнешнегоКалендаря,
	|	КартаСинхронизации.Статус КАК Статус,
	|	ВЫБОР
	|		КОГДА КартаСинхронизации.КалендарьСотрудника ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НоваяСинхронизация
	|ИЗ
	|	КартаСинхронизации КАК КартаСинхронизации");
	
	Запрос.УстановитьПараметр("СписокКалендарейDAV", СписокКалендарейDAV);
	Запрос.УстановитьПараметр("УчетнаяЗаписьВнешнегоКалендаря", УчетнаяЗаписьВнешнегоКалендаря);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаНастройкаСинхронизации.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

#КонецОбласти
