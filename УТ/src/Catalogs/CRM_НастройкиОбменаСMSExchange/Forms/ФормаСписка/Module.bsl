
#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'форму настройки'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
		Обработка_CRM_ОбменСMSExchange_ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// Устанавливаем доступность кнопку "Выполнить обмен".
	Элементы.ФормаВыполнитьОбмен.Видимость = Пользователи.РолиДоступны("CRM_ОбменСMSOutlook_MSExchange, ПолныеПрава");
	Если НЕ Пользователи.РолиДоступны("ПолныеПрава") Тогда
		// Устанавливаем отбор по текущему пользователю.
		СписокУчетныхЗаписей = Новый СписокЗначений;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь", CRM_ОбщегоНазначенияСервер.ТекущийПользователь());
		Запрос.Текст = "ВЫБРАТЬ
		               |	CRM_УчетныеЗаписиПользователейMSExchange.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.CRM_УчетныеЗаписиПользователейMSExchange КАК CRM_УчетныеЗаписиПользователейMSExchange
		               |ГДЕ
		               |	НЕ CRM_УчетныеЗаписиПользователейMSExchange.ПометкаУдаления
		               |	И CRM_УчетныеЗаписиПользователейMSExchange.Пользователь = &Пользователь";
		СписокУчетныхЗаписей.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		ОтборПоПользователю						= Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборПоПользователю.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("УчетнаяЗапись");
		ОтборПоПользователю.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборПоПользователю.ПравоеЗначение		= СписокУчетныхЗаписей;
		ОтборПоПользователю.Использование		= Истина;
		ОтборПоПользователю.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;	
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	ТекСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.Список.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОбменЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Обмен данными может занять продолжительное время."
"Рекомендуется настроить регламентное задание для обмена данными в настройках системы."
""
"Выполнить обмен вручную?';en='Data exchange can take a long time."
"We recommend to configure scheduled job to data exchange in system settings."
""
"Make exchange manually?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда

		ТекСтрока = Элементы.Список.ТекущаяСтрока;
		ОчиститьСообщения();
		
		Состояние(НСтр("ru='Выполняется подключение к серверу...'"));
		СтруктураРезультат = ПроверитьПодключениеНаСервере(ТекСтрока);
		
		Если Не СтруктураРезультат.Успешно Тогда
			ПоказатьПредупреждение(, СтруктураРезультат.СообщениеОшибки);
			Возврат;
		КонецЕсли;
		
		Состояние(НСтр("ru='Выполняется обмен данными...'"));
		ВыполнитьОбменНаСервере(ТекСтрока);
		Состояние(НСтр("ru='Обмен данными завершен.'"));
		
		Элементы.Список.Обновить();
		СписокПриАктивизацииСтроки(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ОбновитьИнформацию(ТекДанные)
	Если ТекДанные = Неопределено Тогда
		Элементы.ДекорацияДатаПоследнегоОбменаКонтактов.Заголовок			= "";
		Элементы.ДекорацияДатаПоследнегоОбменаСобытий.Заголовок				= "";
		Элементы.ДекорацияДатаПоследнегоОбменаПочтовыхСообщений.Заголовок	= "";
	Иначе
		Элементы.ДекорацияДатаПоследнегоОбменаКонтактов.Заголовок = НСтр("ru='Дата последнего обмена контактами: '") 
			+ Формат(Макс(ТекДанные.ДатаПоследнегоОбменаКонтактов1СMSExchange,
				 ТекДанные.ДатаПоследнегоОбменаКонтактовMSExchange1С),
				 "ДФ='dd.MM.yyyy ЧЧ:мм'");
		Элементы.ДекорацияДатаПоследнегоОбменаСобытий.Заголовок = НСтр("ru='Дата последнего обмена событиями: '") 
			+ Формат(Макс(ТекДанные.ДатаПоследнегоОбменаСобытий1СMSExchange,
				 ТекДанные.ДатаПоследнегоОбменаСобытийMSExchange1С),
				 "ДФ='dd.MM.yyyy ЧЧ:мм'");
		
		Элементы.ДекорацияДатаПоследнегоОбменаПочтовыхСообщений.Заголовок = НСтр("ru='Дата последнего обмена почтовыми сообщениями: '") 
			+
				Формат(Макс(	ТекДанные.ДатаПоследнегоОбменаПочтовыхСообщенийВходящие1СMSExchange,
								ТекДанные.ДатаПоследнегоОбменаПочтовыхСообщенийВходящиеMSExchange1С,
								ТекДанные.ДатаПоследнегоОбменаПочтовыхСообщенийОтправленные1СMSExchange,
								ТекДанные.ДатаПоследнегоОбменаПочтовыхСообщенийОтправленныеMSExchange1С), "ДФ='dd.MM.yyyy ЧЧ:мм'");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьИнформацию()
	ТекДанные = Элементы.Список.ТекущиеДанные;
	ОбновитьИнформацию(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	Если Элементы.ГруппаИнформация.Видимость Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИнформацию", 0.1, Истина);
	КонецЕсли;
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ВыполнитьОбменНаСервере(Настройка)
	СтрокаОшибки = "";
	CRM_MSExchangeВызовСервера.СинхронизироватьПоНастройке(Настройка, СтрокаОшибки);
	Если ЗначениеЗаполнено(СтрокаОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОшибки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьПодключениеНаСервере(Настройка)
	СтруктураПодключения = CRM_MSExchangeСерверЭкспортныеМетоды.СформироватьСтруктуруПодключения(Настройка);
	Возврат CRM_MSExchangeСерверЭкспортныеМетоды.ПроверитьПодключение(СтруктураПодключения);
КонецФункции

#КонецОбласти 
