#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЪЕКТА

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		Включено = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;

	// Заполнить служебный регистр для дальнейшей обработки
	МенеджерЗаписи = РегистрыСведений.CRM_ИсточникиКампаний.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИсточникиКампаний = Ссылка;
	МенеджерЗаписи.СценарийАналитики = СценарийАналитики;
	
	МенеджерЗаписи.Прочитать();
	
	Если ПометкаУдаления Тогда
		МенеджерЗаписи.Удалить();
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			GUIDЗадания = Ссылка.УникальныйИдентификатор();
			НайденныеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Ключ", GUIDЗадания));
			Если НайденныеЗадания.Количество() > 0 Тогда
				НайденныеЗадания[0].Удалить();
			КонецЕсли;
		КонецЕсли;

	Иначе
		МенеджерЗаписи.ИсточникиКампаний = Ссылка;
		МенеджерЗаписи.СценарийАналитики = СценарийАналитики;
		МенеджерЗаписи.Логин = Логин;
		МенеджерЗаписи.Пароль = Пароль;
		МенеджерЗаписи.УчетнаяЗапись = УчетнаяЗапись;
		МенеджерЗаписи.АдресОтправителя = ИсточникПисьма;
		МенеджерЗаписи.ТемаПисьма = ТемаПисьма;
		МенеджерЗаписи.OAuthТокен = OAuthТокен;
		МенеджерЗаписи.RefreshТокен = RefreshТокен;
		МенеджерЗаписи.Визиты = ПоказательВизиты;
		МенеджерЗаписи.ГлубинаПросмотра = ПоказательГлубинаПросмотра;
		МенеджерЗаписи.КаналПервичногоИнтереса = ПоказательИсточникиТрафика;
		МенеджерЗаписи.Посетители = ПоказательПосетители;
		МенеджерЗаписи.Отказы = ПоказательОтказы;
		МенеджерЗаписи.ЦелевыеДействия = ПоказательЦелевыеДействия;
		МенеджерЗаписи.География = ПоказательГеография;
		МенеджерЗаписи.ВремяНаСайте = ПоказательВремяНаСайте;
		МенеджерЗаписи.Устройства = ПоказательУстройства;
		МенеджерЗаписи.CRM_РекламнаяКампания = ПоказательРекламнаяКампания;
		МенеджерЗаписи.URL = ПоказательURL;
		МенеджерЗаписи.Source = ПоказательSource;
		МенеджерЗаписи.Medium = ПоказательMedium;
		МенеджерЗаписи.ClientID = ПоказательClientID;
		МенеджерЗаписи.YD_Login = YD_Login;
		МенеджерЗаписи.YD_Token = YD_Token;
		МенеджерЗаписи.YD_Валюта = YD_Валюта;
		МенеджерЗаписи.YD_ЗагружатьЗатраты = ПоказательЯндексДирект;
		МенеджерЗаписи.Client_id = Client_id;
		МенеджерЗаписи.Client_secret = Client_secret;

		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	
	Если НЕ ПометкаУдаления Тогда
		
		Если ДополнительныеСвойства.Свойство("АдресРасписания")
			 И ЗначениеЗаполнено(ДополнительныеСвойства.АдресРасписания) Тогда
			  ТекАдрес = ДополнительныеСвойства.АдресРасписания;
		Иначе ТекАдрес = АдресРасписания;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекАдрес) Тогда
			CRM_СистемаСквознойАналитикиВызовСервера.CRM_ПолучитьРегЗаданияПоСценарию(Ссылка,
				 СценарийАналитики, ТекАдрес,
				 Включено);
		КонецЕсли;

		ДозагрузкаВыполнена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьКодСостояния(Знач HttpОтвет, Знач ОтносительныйURL, Знач ТелоОтвета = "", Отказ = Ложь)
	
	Перем ТекстИсключения;
	
	Если (HttpОтвет.КодСостояния < 200) Или (HttpОтвет.КодСостояния >= 300) Тогда
		
		ТекстИсключения = "Запрос: " + ОтносительныйURL + Символы.ПС;
		ТекстИсключения = ТекстИсключения + "Код ответа: " + HttpОтвет.КодСостояния + Символы.ПС;
		ТекстИсключения = ТекстИсключения + "Тело ответа: " + ТелоОтвета;
		
		Отказ = Истина;
		
		ЗаписьЖурналаРегистрации("Ошибка получения токена",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.CRM_ИсточникиРекламныхКампаний,
			,
			ТекстИсключения);
		
	КонецЕсли;
		
КонецПроцедуры

// Обменивает заранее полученный код авторизации на токен. Код авторизации нужно
// предварительно поместить в реквизит обработки КодАвторизации. Полученный токен 
// записывается в реквизит Токен. Требуется для работоспособности других методов.
Процедура ПолучитьТокенGoogle(ОтладочныйТокен, Отказ = Ложь) Экспорт
	
	ИмяСервера 	= "www.googleapis.com";	
	АдресРесурса = "/oauth2/v4/token";
	стрЗапроса = "code=" + ОтладочныйТокен + 
	"&client_id=" 		+ Client_id +
	"&client_secret=" 	+ Client_secret +
	"&redirect_uri=urn:ietf:wg:oauth:2.0:oob&grant_type=authorization_code";	
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Content-Length", XMLСтрока(СтрДлина(стрЗапроса)));
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(стрЗапроса, КодировкаТекста.UTF8);
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	HttpСоединение = Новый HTTPСоединение(ИмяСервера, 443, , , Прокси, 60, Новый ЗащищенноеСоединениеOpenSSL);
	HttpОтвет = HttpСоединение.ОтправитьДляОбработки(HttpЗапрос);
	
	стрОтвета = HttpОтвет.ПолучитьТелоКакСтроку();		
	
	ОбработатьКодСостояния(HttpОтвет, стрЗапроса, стрОтвета, Отказ);
		
	Если Не Отказ Тогда 
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(стрОтвета);
		
		СтрутураОтвета = ПрочитатьJSON(ЧтениеJSON);
		OAuthТокен = СтрутураОтвета.access_token;
		RefreshТокен = СтрутураОтвета.refresh_token;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИнформациюПоПодключению() Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	Если СценарийАналитики = Перечисления.CRM_СценарииПолученияАналитики.ЯндексМетрика Тогда
		
		АдресСервера = "api-metrika.yandex.ru";
		
		ССЛ = Новый ЗащищенноеСоединениеOpenSSL();
		Прокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		
		Соединение = Новый HTTPСоединение(АдресСервера, , , , Прокси, 30, ССЛ, Ложь);
		
		// Получение доступных счетчиков
		Ресурс = "/management/v1/counters";
		
		ПараметрыСчетчика = "";
		
		HTTPЗапрос = Новый HTTPЗапрос;
		HTTPЗапрос.АдресРесурса = Ресурс + ПараметрыСчетчика;
		// Изменение API Метрика 13.02.2019
		HTTPЗапрос.Заголовки.Вставить("Authorization", "OAuth " + OAuthТокен);
		
		ОтветHTTP = Соединение.Получить(HTTPЗапрос);
		
		Если ОтветHTTP.КодСостояния = 200 Тогда
			СтруктураВозврата.Вставить("ЕстьОшибка", Ложь);
			
		Иначе
			СтруктураВозврата.Вставить("ЕстьОшибка", Истина);
			СтруктураВозврата.Вставить("Текст", "Код ошибки " + ОтветHTTP.КодСостояния +  "; описание : " 
				+ ОтветHTTP.ПолучитьТелоКакСтроку());
		КонецЕсли;
		
	ИначеЕсли СценарийАналитики = Перечисления.CRM_СценарииПолученияАналитики.GoogleAnalytics Тогда
		
		ИмяСервера 	= "www.googleapis.com";	
		АдресРесурса = "/analytics/v3/management/accountSummaries";
		стрЗапроса = "?access_token=" + OAuthТокен;	
		
		Заголовки = Новый Соответствие;
		
		HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса + стрЗапроса, Заголовки);
		
		Прокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		
		HttpСоединение = Новый HTTPСоединение(ИмяСервера, 443, , , Прокси, 60, Новый ЗащищенноеСоединениеOpenSSL);
		
		ОтветHTTP = HttpСоединение.Получить(HttpЗапрос);
		
		Если ОтветHTTP.КодСостояния =  200 Тогда
			СтруктураВозврата.Вставить("ЕстьОшибка", Ложь);
		Иначе
			СтруктураВозврата.Вставить("ЕстьОшибка", Истина);
			СтруктураВозврата.Вставить("Текст", "Код ошибки " + ОтветHTTP.КодСостояния +  "; описание : " 
				+ ОтветHTTP.ПолучитьТелоКакСтроку());
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru='Недопустимый вызов объекта на клиенте.';en='Invalid call of object on client.'");
#КонецЕсли
