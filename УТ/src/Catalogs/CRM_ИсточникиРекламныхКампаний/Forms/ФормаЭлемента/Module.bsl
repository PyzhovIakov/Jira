#Область ОписаниеПеременных

&НаКлиенте
Перем ПредыдущееЗначениеВключено;

&НаКлиенте
Перем ВыполняетсяДозагрузка;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'форму Источника аналитики'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
		Справочник_CRM_ИсточникиРекламныхКампаний_ФормаЭлемента_ПриСозданииНаСервере(
			ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	РасписаниеРегламентногоЗадания = Неопределено;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		GUIDЗадания = Объект.Ссылка.УникальныйИдентификатор();
		НайденныеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Ключ", GUIDЗадания));
		Если НайденныеЗадания.Количество() > 0 Тогда
			РасписаниеРегламентногоЗадания = НайденныеЗадания[0].Расписание;
		КонецЕсли;
	КонецЕсли;
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания();
		РасписаниеРегламентногоЗадания.ПериодПовтораДней = 1;
		РасписаниеРегламентногоЗадания.ПериодПовтораВТечениеДня = 3600;
	КонецЕсли;
	
	ЗаполнитьАдресРасписания();
	
	Если НЕ Объект.ПоказательВизиты Тогда
		Объект.ПоказательВизиты = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПредыдущееЗначениеВключено = Объект.Включено;
	ВыполняетсяДозагрузка = Ложь;
	
	СценарийАналитикиПриИзменении(Истина);
	
	УстановитьНадписьРасписанияОбмена();
	
	Яндекс_ЗаполнитьСчетчики();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.СценарийАналитики = Перечисления.CRM_СценарииПолученияАналитики.ВнешняяОбработка Тогда
		Если ЗначениеЗаполнено(АдресФайла) Тогда
			ТекущийОбъект.ОбработкаДействия = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресФайла));
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.СценарийАналитики = Перечисления.CRM_СценарииПолученияАналитики.ЯндексМетрика Тогда
		Если НЕ ЗначениеЗаполнено(ТекущийОбъект.OAuthТокен) Тогда
			ТекущийОбъект.OAuthТокен = ТекущийОбъект.YD_Token;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("АдресРасписания", АдресРасписания);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если НЕ ВыполняетсяДозагрузка И НЕ ПредыдущееЗначениеВключено И НЕ Объект.ПометкаУдаления И Объект.Включено Тогда
		CRM_СистемаСквознойАналитикиКлиент.ЗапуститьЗагрузкуДанных(ЭтотОбъект, Истина, Ложь);
	КонецЕсли;

	ПредыдущееЗначениеВключено = Объект.Включено;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФорм

&НаКлиенте
Процедура СтрокаПоискаРекламнойКампанииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(СтрокаПоискаРекламнойКампании) Тогда
		  Элементы.РекламныеКампании.ОтборСтрок = Новый ФиксированнаяСтруктура("Наименование", СтрокаПоискаРекламнойКампании);
	Иначе Элементы.РекламныеКампании.ОтборСтрок = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция Яндекс_ВыполнитьHTTPЗапрос(URL, Токен, HTTPМетод, json = Неопределено)
	
	СтруктураURI = сфпОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.Заголовки.Вставить("Authorization", "OAuth " + Токен);
	HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;
	
	ИспользоватьЗащищенноеСоединение = (ВРЕГ(Лев(URL, 5)) = ВРЕГ("HTTPS"));
	ЗащищенноеСоединениеOpenSSL = Неопределено;
	Если ИспользоватьЗащищенноеСоединение Тогда
		ЗащищенноеСоединениеOpenSSL = Новый ЗащищенноеСоединениеOpenSSL;
	КонецЕсли;
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Протокол = ?(ИспользоватьЗащищенноеСоединение, "https", "http");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси(Протокол);
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, , , Прокси, 30,
		ЗащищенноеСоединениеOpenSSL);
	
	Если json <> Неопределено Тогда
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
		HTTPЗапрос.УстановитьТелоИзСтроки(json);
	КонецЕсли;	
	
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос);
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		Возврат HTTPОтвет.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Возврат "";

КонецФункции

&НаСервере
Функция Яндекс_ПолучитьСчетчики()
	
	Токен = Объект.OAuthТокен;
	
	URL = "https://api-metrika.yandex.net/management/v1/counters";
	РезультатЗапроса = Яндекс_ВыполнитьHTTPЗапрос(URL, Токен, "GET");
	
	Счетчики = Новый Массив();
	
	Если ЗначениеЗаполнено(РезультатЗапроса) Тогда
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(РезультатЗапроса);
		РезультатЗапросаJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
				
		Для Каждого Счетчик Из РезультатЗапросаJSON.counters Цикл
			СтруктураСчетчика = Новый Структура("Идентификатор, Сайт", Счетчик.id, Счетчик.site);
			Счетчики.Добавить(СтруктураСчетчика);
		КонецЦикла;
	КонецЕсли;	
	
	Возврат Счетчики;

КонецФункции

&НаСервере
Функция Яндекс_ПолучитьЦели(ИдентификаторСчетчика)
	
	Токен = Объект.OAuthТокен;
	
	URL = "https://api-metrika.yandex.net/management/v1/counter/" + Формат(ИдентификаторСчетчика, "ЧГ=") + "/goals";
	РезультатЗапроса = Яндекс_ВыполнитьHTTPЗапрос(URL, Токен, "GET");
	
	Цели = Новый Массив();
	
	Если ЗначениеЗаполнено(РезультатЗапроса) Тогда
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(РезультатЗапроса);
		РезультатЗапросаJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
				
		Для Каждого Цель Из РезультатЗапросаJSON.goals Цикл
			Условия = Новый Массив();
			
			Если Цель.Свойство("conditions") Тогда
				Для Каждого Условие Из Цель.conditions Цикл
					Условия.Добавить(Условие.url);
				КонецЦикла;
			КонецЕсли;
			
			СтруктураЦели = Новый Структура("Идентификатор, Наименование, Условия", Цель.id, Цель.name, Условия);
			Цели.Добавить(СтруктураЦели);
		КонецЦикла;
	КонецЕсли;	
	
	Возврат Цели;

КонецФункции

&НаКлиенте
Процедура Яндекс_ЗаполнитьСчетчики()
	
	Объект.РекламныеКампании.Очистить();
	
	ВсеСчетчики = Яндекс_ПолучитьСчетчики();
	
	Для Каждого ТекСчетчик Из ВсеСчетчики Цикл
		Цели = Яндекс_ПолучитьЦели(ТекСчетчик.Идентификатор);
		
		Для Каждого Цель Из Цели Цикл
			НоваяСтрока = Объект.РекламныеКампании.Добавить();
			НоваяСтрока.Идентификатор = Цель.Идентификатор;
			НоваяСтрока.Наименование = Цель.Наименование;
		КонецЦикла;	
	КонецЦикла;
	
	Объект.РекламныеКампании.Сортировать("Наименование");

КонецПроцедуры

&НаКлиенте
Процедура СценарийАналитикиПриИзменении(Элемент)
	
	Если Объект.СценарийАналитики = ПредопределенноеЗначение("Перечисление.CRM_СценарииПолученияАналитики.GoogleAnalytics")
		ИЛИ Объект.СценарийАналитики = ПредопределенноеЗначение("Перечисление.CRM_СценарииПолученияАналитики.ЯндексМетрика") Тогда
		Элементы.OAuthТокен.Видимость = Истина;
		Элементы.YD_Token.Видимость = Истина;
		Элементы.ГруппаПочтовыеСообщения.Видимость = Ложь;
		Элементы.ГруппаВнешняяОбработка.Видимость = Ложь;
		Элементы.ГруппаGoogle.Видимость = Ложь;
		Элементы.ГруппаRoistat.Видимость = Ложь;
		Элементы.YD_Login.Видимость = Истина;
		Элементы.ПоказательОтказы.Видимость = Истина;
		Элементы.ПоказательГлубинаПросмотра.Видимость = Истина;
		Элементы.ПоказательВремяНаСайте.Видимость = Истина;
		Элементы.ПоказательЦелевыеДействия.Видимость = Истина;
		
	ИначеЕсли Объект.СценарийАналитики = ПредопределенноеЗначение("Перечисление.CRM_СценарииПолученияАналитики.ВнешняяОбработка") Тогда
		Элементы.OAuthТокен.Видимость = Ложь;
		Элементы.YD_Token.Видимость = Ложь;
		Элементы.ГруппаПочтовыеСообщения.Видимость = Ложь;
		Элементы.ГруппаВнешняяОбработка.Видимость = Истина;
		Элементы.ГруппаGoogle.Видимость = Ложь;
		Элементы.ГруппаRoistat.Видимость = Ложь;
		Элементы.YD_Login.Видимость = Ложь;
		Элементы.ПоказательОтказы.Видимость = Истина;
		Элементы.ПоказательГлубинаПросмотра.Видимость = Истина;
		Элементы.ПоказательВремяНаСайте.Видимость = Истина;
		Элементы.ПоказательЦелевыеДействия.Видимость = Истина;
		
	ИначеЕсли Объект.СценарийАналитики = ПредопределенноеЗначение("Перечисление.CRM_СценарииПолученияАналитики.Roistat") Тогда
		Элементы.OAuthТокен.Видимость = Ложь;
		Элементы.YD_Token.Видимость = Ложь;
		Элементы.ГруппаПочтовыеСообщения.Видимость = Ложь;
		Элементы.ГруппаВнешняяОбработка.Видимость = Ложь;
		Элементы.ГруппаGoogle.Видимость = Ложь;
		Элементы.ГруппаRoistat.Видимость = Истина;	
		Элементы.YD_Login.Видимость = Ложь;
		Элементы.ПоказательОтказы.Видимость = Ложь;
		Элементы.ПоказательГлубинаПросмотра.Видимость = Ложь;
		Элементы.ПоказательВремяНаСайте.Видимость = Ложь;
		Элементы.ПоказательЦелевыеДействия.Видимость = Ложь;
		
	Иначе
		Элементы.OAuthТокен.Видимость = Ложь;
		Элементы.YD_Token.Видимость = Ложь;
		Элементы.ГруппаПочтовыеСообщения.Видимость = Ложь;
		Элементы.ГруппаВнешняяОбработка.Видимость = Ложь;
		Элементы.ГруппаGoogle.Видимость = Ложь;
		Элементы.ГруппаRoistat.Видимость = Ложь;
		Элементы.YD_Login.Видимость = Ложь;
		Элементы.ПоказательОтказы.Видимость = Истина;
		Элементы.ПоказательГлубинаПросмотра.Видимость = Истина;
		Элементы.ПоказательВремяНаСайте.Видимость = Истина;
		Элементы.ПоказательЦелевыеДействия.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРасписаниеНажатие(Элемент)
	ВыполнитьНастройкуРасписанияОбмена();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресРасписания()
	АдресРасписания = ПоместитьВоВременноеХранилище(РасписаниеРегламентногоЗадания, Новый УникальныйИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуРасписанияОбмена()
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеОбмена", ЭтотОбъект);
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеОбмена(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("РасписаниеРегламентногоЗадания") Тогда
		РасписаниеРегламентногоЗадания = Результат;
		ЗаполнитьАдресРасписания();
		
		УстановитьНадписьРасписанияОбмена();
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьРасписанияОбмена()
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		ТекстЗаголовка = НСтр("ru='Настроить расписание обмена';en='Set up exchange schedule'");
		Попытка
			РасписаниеРегламентногоЗадания = ПолучитьИзВременногоХранилища(АдресРасписания);
		Исключение
			РасписаниеРегламентногоЗадания = Неопределено;
		КонецПопытки;
	Иначе
		ТекстЗаголовка = РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Элементы.ДекорацияРасписание.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

#Область ВнешняяОбработка

&НаСервере
Функция ПолучитьДвоичныеДанныеИзХранилища()
	ОбъектПолучения = РеквизитФормыВЗначение("Объект");
	Возврат(ОбъектПолучения.ОбработкаДействия.Получить());
КонецФункции

&НаСервере
Процедура ПодготовитьКВыгрузкеОбработкуНаСервере()
	ДанныеФайла = ПолучитьДвоичныеДанныеИзХранилища();
	АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОбработку(Команда)
	
	ПодготовитьКВыгрузкеОбработкуНаСервере();

	Оповещение = Новый ОписаниеОповещения("ВыгрузитьОбработкуПродолжение", ЭтотОбъект);
	ТекстПредупреждения = НСтр("ru='Для продолжения необходимо установить расширение для работы с файлами.';
		|en='To continue,
		| install the file operation extension.'");
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Оповещение, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОбработкуПродолжение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт

	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборФайла", ЭтотОбъект);
	ИмяФайла = Объект.НазваниеОбработки + ".epf";
	Файл = Новый ОписаниеПередаваемогоФайла(ИмяФайла, АдресФайла);
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Файл);
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогОткрытияФайла.Фильтр = "(*.epf)|*.epf";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	НачатьПолучениеФайлов(ОписаниеОповещения, ПолучаемыеФайлы, ДиалогОткрытияФайла, Истина);
    
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайла(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт

	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() > 0 Тогда
		Объект.ПутьКОбработке = ПомещенныеФайлы[0].Имя;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбработкуКлиент(Команда)
	
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(
			Новый ОписаниеОповещения(
				"ЗагрузитьОбработкуПродолжение",
				ЭтотОбъект,
				Новый Структура),
			НСтр("ru='Для продолжения необходимо установить расширение для работы с файлами.';en='To continue, install the file operation extension.'"));

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбработкуПродолжение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(Объект.НазваниеОбработки) Тогда
		ОписаниеОповещенияЗавершения = Новый ОписаниеОповещения("ВопросЗагрузитьОбработку", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияЗавершения,
			 НСтр("ru='Загрузить новую обработку с диска?';en='Download new treatment from disk?'"),
			 РежимДиалогаВопрос.ДаНет);
	Иначе
		ВопросЗагрузитьОбработку(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗагрузитьОбработку(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьОбработкуЗавершение", ЭтотОбъект);
		ИмяФайла = Объект.НазваниеОбработки + ".epf";
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.Фильтр = "(*.epf)|*.epf";
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		НачатьПомещениеФайлов(ОписаниеОповещения, , ДиалогОткрытияФайла, Истина, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбработкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
		АдресФайла = Результат[0].Хранение;
		Объект.ПутьКОбработке = Результат[0].Имя;
		ЗагрузитьОбработку();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьОбработку()
	ПараметрыЗащиты = Новый("ОписаниеЗащитыОтОпасныхДействий" + "");
	ПараметрыЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
	
	Объект.ИспользуетсяСтандартнаяОбработка = Ложь;
	Обработка =  ВнешниеОбработки.Создать(ВнешниеОбработки.Подключить(АдресФайла, , Ложь, ПараметрыЗащиты), Ложь);
	Объект.НазваниеОбработки = Обработка.Метаданные().Имя;
	Если Объект.Наименование = "" Тогда
		Объект.Наименование = Обработка.Метаданные().Синоним;
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ДозагрузитьДанные(Команда)
	
	ВыполняетсяДозагрузка = Истина;
	CRM_СистемаСквознойАналитикиКлиент.ЗапуститьЗагрузкуДанных(ЭтотОбъект, Истина);
	ВыполняетсяДозагрузка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму() Экспорт // АПК:78 - исключить из проверки.
	Закрыть();
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ИзмерениеПриИзменении(Элемент)
	
	Если Объект.СценарийАналитики <> ПредопределенноеЗначение("Перечисление.CRM_СценарииПолученияАналитики.ЯндексМетрика") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект[Элемент.Имя] Тогда
		СчетчикИзмерений = 1; // Дата
		Если Объект.ПоказательРекламнаяКампания Тогда
			СчетчикИзмерений = СчетчикИзмерений + 2; // Кампания + Объявление
		КонецЕсли;
		СчетчикИзмерений = СчетчикИзмерений + Объект.ПоказательИсточникиТрафика;
		СчетчикИзмерений = СчетчикИзмерений + Объект.ПоказательГеография;
		СчетчикИзмерений = СчетчикИзмерений + Объект.ПоказательУстройства;
		СчетчикИзмерений = СчетчикИзмерений + Объект.ПоказательВремяНаСайте;
		СчетчикИзмерений = СчетчикИзмерений + Объект.ПоказательSource;
		СчетчикИзмерений = СчетчикИзмерений + Объект.ПоказательMedium;
		СчетчикИзмерений = СчетчикИзмерений + Объект.ПоказательЦелевыеДействия;
		СчетчикИзмерений = СчетчикИзмерений + Объект.ПоказательURL;
			
		Если СчетчикИзмерений > 10 Тогда
			Объект[Элемент.Имя] = Ложь;
			
			ТекстПредупреждения = НСтр("ru='Превышено количество измерений,"
"используемых в запросе к сервисам Яндекс!';en='Number of measurements exceeded"
"used in query to Yandex services!'");
			ПоказатьПредупреждение(, ТекстПредупреждения, 3);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура CRM_НомерПроектаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.СценарийАналитики = ПредопределенноеЗначение("Перечисление.CRM_СценарииПолученияАналитики.Roistat") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.OAuthТокен) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст =  НСтр("ru='Введите значение API-ключа.';en='Enter API-key.'");
			Сообщение.Поле = "Объект.OAuthТокен";
			Сообщение.Сообщить();
		КонецЕсли;
		
		СписокПроектов = ПолучитьПроектыRoistat();
		Если ТипЗнч(СписокПроектов) = Тип("Строка") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СписокПроектов);
		ИначеЕсли СписокПроектов.Количество() = 0 Тогда
			ПоказатьПредупреждение(,  НСтр("ru='Проекты не найдены.';en='Projects not found.'"));
						
		Иначе	
			Если СписокПроектов.Количество() = 1 Тогда
				Если Объект.CRM_НомерПроекта <> СписокПроектов[0].Значение Тогда
					Объект.CRM_НомерПроекта = СписокПроектов[0].Значение;
				КонецЕсли;
			КонецЕсли;
			
			Оповещение = Новый ОписаниеОповещения("ПриВыбореНомераПроекта", ЭтотОбъект);
			НачальноеЗначение = СписокПроектов.НайтиПоЗначению(Объект.CRM_НомерПроекта);
			ПоказатьВыборИзСписка(Оповещение, СписокПроектов, Элемент, НачальноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПроектыRoistat()
	
	ИмяСервера 	= "cloud.roistat.com";
	АдресРесурса = "/api/v1/user/projects";
		
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-type", "application/json");
	Заголовки.Вставить("Api-key", Объект.OAuthТокен);
		
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(ИмяСервера, , , , Прокси, 60, Новый ЗащищенноеСоединениеOpenSSL);
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("GET", HTTPЗапрос);
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		ВызватьИсключение НСтр("ru='Проблема с получение данных Roistat';en='NTRS'");
	КонецЕсли;

	РезультатЗапроса = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	СтрОшибки = "";
	
	Если ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Попытка
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(РезультатЗапроса);
			РезультатЗапросаJSON = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();

			Если РезультатЗапросаJSON.Свойство("projects") Тогда
				СписокВыбора = Новый СписокЗначений();
				Для Каждого ТекПроект Из РезультатЗапросаJSON.projects Цикл
					ИдентификаторПроекта = Формат(ТекПроект.id, "ЧГ=");
					СписокВыбора.Добавить(ИдентификаторПроекта, ТекПроект.name + " (" + ИдентификаторПроекта + ")");
				КонецЦикла;
				
				Возврат СписокВыбора;
				
			Иначе
				Если РезультатЗапросаJSON.Свойство("status") Тогда
					Если РезультатЗапросаJSON.status = "error" Тогда
						СтрОшибки = РезультатЗапросаJSON.error;
					КонецЕсли;
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(СтрОшибки) Тогда
					СтрОшибки = АдресРесурса + Символы.ПС + РезультатЗапроса;
				КонецЕсли;
			КонецЕсли;
		Исключение
			СтрОшибки = ОписаниеОшибки() + Символы.ПС + РезультатЗапроса;
		КонецПопытки;
	КонецЕсли;
	
	Возврат СтрОшибки;
	
КонецФункции

&НаКлиенте
Процедура ПриВыбореНомераПроекта(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.CRM_НомерПроекта = ВыбранныйЭлемент.Значение;
	
КонецПроцедуры

#КонецОбласти
