#Область ОписаниеПеременных

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаСервере
Перем СсылкаНаКЛ;

// ЛентаСобытий

&НаКлиенте
Перем БыстрыйВвод_КэшированноеВремя;

&НаКлиенте
Перем БыстрыйВвод_КэшированнаяДатаНачала;

&НаКлиенте
Перем БыстрыйВвод_АктивенАвтоПодбор;

&НаКлиенте
Перем Лента_Прокрутить;

// Конец ЛентаСобытий

&НаКлиенте
Перем ВыведеныБизнесПроцессы; // Выведены бизнес-процессы

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	// +CRM_Модуль
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// +CRM_Модуль
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьНесколькоВидовЦен    = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен");
	ИспользуетсяЦенообразование25    = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();
	РазрешеноСоздаватьВидыЦен        = ИспользоватьНесколькоВидовЦен
	                                   И ПравоДоступа("Добавление", Метаданные.Справочники.ВидыЦен);
	УстановитьВидимостьЦенообразования();
	// -CRM_Модуль
	
	Если Объект.Ссылка.Пустая() И Объект.ЮрФизЛицо.Пустая() Тогда
		Объект.ЮрФизЛицо = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойВидКлиента");
	КонецЕсли;
	
	// +CRM_Модуль
	СохраненноеЗначениеКаналПервичногоИнтереса	  = КаналПервичногоИнтереса;
	СохраненноеЗначениеИсточникПервичногоИнтереса = ИсточникПервичногоИнтереса;
	// -CRM_Модуль
	
	ПартнерыИКонтрагенты.ПартнерФормаЭлементаПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ЦветГиперссылки        = ЦветаСтиля.CRM_ОсновнойГолубой;
	
	// +CRM_Модуль
	Если ЗначениеЗаполнено(СохраненноеЗначениеКаналПервичногоИнтереса) Тогда
		КаналПервичногоИнтереса    = СохраненноеЗначениеКаналПервичногоИнтереса;
		ИсточникПервичногоИнтереса = СохраненноеЗначениеИсточникПервичногоИнтереса;
	КонецЕсли;
	// -CRM_Модуль
	
	ЦветГиперссылки        = ЦветаСтиля.ГиперссылкаЦвет;
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		
		УпрощенныйВводДоступен = ПартнерыИКонтрагенты.УпрощенныйВводДоступен() ИЛИ ТолькоПросмотр;
		Если Объект.Ссылка.Пустая() Тогда
			
			Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Контрагенты.ЮрФизЛицо
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
				|		ПО Контрагенты.Партнер = Партнеры.Ссылка
				|ГДЕ
				|	Партнеры.Ссылка = &ЗначениеЗаполнения";
				
				Запрос.УстановитьПараметр("ЗначениеЗаполнения", Параметры.ЗначениеКопирования);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ЮрФизЛицо =  Выборка.ЮрФизЛицо;
				Иначе
					ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
				КонецЕсли;
				
			ИначеЕсли не Параметры.Свойство("ЗначенияЗаполнения") Тогда
	
				ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
			Иначе	
				ЮрФизЛицо = ?(Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания, Перечисления.ЮрФизЛицо.ЮрЛицо, Перечисления.ЮрФизЛицо.ФизЛицо);
			КонецЕсли;
			
			ПриСозданииИЧтенииНаСервере();
		// +CRM_Модуль
		Иначе
			Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
				ЮрФизЛицо = ?(Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания, Перечисления.ЮрФизЛицо.ЮрЛицо, Перечисления.ЮрФизЛицо.ФизЛицо);
				ПриСозданииИЧтенииНаСервере();
			КонецЕсли;
		// -CRM_Модуль
		КонецЕсли;
		
	Иначе
		
		ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
		
		// +CRM_Модуль
		Если Не ЗначениеЗаполнено(ЮрФизЛицо) Тогда
			ЮрФизЛицо = ?(Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания, Перечисления.ЮрФизЛицо.ЮрЛицо, Перечисления.ЮрФизЛицо.ФизЛицо);
		КонецЕсли;
		// -CRM_Модуль
		
		Если Объект.Ссылка.Пустая() Тогда
			ПриСозданииИЧтенииНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
	ОтгрузкаЗапрещена = СегментыСервер.ПартнерВходитВСегментыЗапретаОтгрузки(Объект.Ссылка);
	
	Если ИспользоватьЗапретОтгрузки И Объект.Клиент Тогда
		Если ОтгрузкаЗапрещена Тогда
			Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаЗапрещена;
		Иначе
			Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаРазрешена;
		КонецЕсли;
	Иначе
		Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаПустая;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтоНовыйПартнер = Истина;
		Объект.Клиент = Истина;
	КонецЕсли;
	
	Элементы.ОсновнойМенеджер.ТолькоПросмотр = НЕ Пользователи.РолиДоступны("CRM_ПередачаДелОтветственному, ПолныеПрава");
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ПравоДоступа("Изменение", Метаданные.Справочники.Партнеры) 
		ИЛИ ПравоДоступа("Добавление", Метаданные.Справочники.Партнеры) Тогда
		УправлениеДоступом.ПриСозданииФормыЗначенияДоступа(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// -CRM_Модуль
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.ЗначенияЗаполнения.Свойство("ПреобразованиеКЛ") Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметры.ЗначенияЗаполнения);
		Элементы.ПанельВидПартнера.Видимость = Ложь;
	КонецЕсли;

	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	ТекущееПодразделение = ТекущийПользователь.Подразделение;
	ЭтоКомпания = Перечисления.КомпанияЧастноеЛицо.Компания;
	ЭтоЧастноеЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
	
	ИспользоватьПК = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПотенциальныхКлиентов");
	
	// +CRM
	Если Параметры.Свойство("СкопироватьКИПотенциальногоКлиента") Тогда
		СкопироватьКИПотенциальногоКлиента = Истина;
		CRM_ОбщегоНазначенияСервер.СкопироватьКонтактнуюИнформациюПотенциальногоКлиента(Параметры.ПотенциальныйКлиент, Объект,, Ложь, Ложь);
		ПрозвонитьМессенджерыПриОткрытии = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьИнтеграциюСМессенджерами");
	КонецЕсли;
	Если Параметры.Свойство("ОбновитьДанныеПотенциальногоКлиентаПослеЗаписи") Тогда
		ОбновитьДанныеПотенциальногоКлиентаПослеЗаписи = Истина;
	КонецЕсли;
	// -CRM
	
	// УправлениеСвойствами
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		
		ДополнительныеПараметрыСвойств = Новый Структура;
		ДополнительныеПараметрыСвойств.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		ДополнительныеПараметрыСвойств.Вставить("ИмяЭлементаКоманднойПанели", "КоманднаяПанельФормы");
		ДополнительныеПараметрыСвойств.Вставить("Объект", Объект);
		ДополнительныеПараметрыСвойств.Вставить("ОтложеннаяИнициализация", Истина);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметрыСвойств, МассивДобавляемыхРеквизитов);
		
	КонецЕсли;
	// Конец УправлениеСвойствами
	
	// КонтактнаяИнформация
	ДополнительныеПараметрыКИ = Новый Структура;
	ДополнительныеПараметрыКИ.Вставить("ПолеВвода_ВертикальнаяГруппировка", Истина);
	
	CRM_УправлениеКонтактнойИнформацией.ИнициализацияКонтактнойИнформации(ЭтотОбъект, МассивДобавляемыхРеквизитов);
	
	ДополнительныеПараметры = CRM_УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ДополнительныеПараметры.ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация";
	ДополнительныеПараметры.ПоложениеЗаголовкаКИ     = ПоложениеЗаголовкаЭлементаФормы.Лево;
	ДополнительныеПараметры.ВыводитьВОднуКолонку     = Истина;
	ДополнительныеПараметры.ОтложеннаяИнициализация  = Истина;
	
	CRM_УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ДополнительныеПараметры);
	// Конец КонтактнаяИнформация
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	// КонтактнаяИнформация
	Элементы.ГруппаКонтактнаяИнформацияОбщая.Видимость = Истина;
	// Конец КонтактнаяИнформация
	
	// УправлениеСвойствами
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервереЗавершение(ЭтотОбъект, ДополнительныеПараметрыСвойств);
		
		Элемент = Элементы.Найти("РедактироватьСоставДополнительныхРеквизитов");
		Если Элемент <> Неопределено Тогда
			Элемент.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	// Конец УправлениеСвойствами
	
	Если Объект.Ссылка.Пустая() Тогда 
		ЭтоНовыйПартнер = Истина;
		Объект.Клиент = Истина;
		
		// +CRM
		Если Параметры.Свойство("ПотенциальныйКлиент") И ЗначениеЗаполнено(Параметры.ПотенциальныйКлиент) Тогда
		
			ПотенциальныйКлиент = Параметры.ПотенциальныйКлиент;
			
			// +CRM
			CRM_СсылкаНаИсточникДанных = ПотенциальныйКлиент;
			// -CRM
			
			Если ЗначениеЗаполнено(ПотенциальныйКлиент.Организация) Тогда
				Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
				Объект.Наименование = ПотенциальныйКлиент.Организация;
				Объект.НаименованиеПолное = ПотенциальныйКлиент.Организация;
			Иначе
				Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
				Объект.Наименование = ПотенциальныйКлиент.Наименование;
				Объект.НаименованиеПолное = ПотенциальныйКлиент.Наименование;
				
				БуферФИО = ПотенциальныйКлиент.Наименование;
				CRM_Фамилия = CRM_КлиентыСервер.ВыделитьЧастьНаименованияКонтактногоЛица(БуферФИО);
				CRM_Имя = CRM_КлиентыСервер.ВыделитьЧастьНаименованияКонтактногоЛица(БуферФИО);
				CRM_Отчество= CRM_КлиентыСервер.ВыделитьЧастьНаименованияКонтактногоЛица(БуферФИО);
			КонецЕсли;
			
			Объект.БизнесРегион = ПотенциальныйКлиент.БизнесРегион;
			Объект.ОсновнойМенеджер = ПотенциальныйКлиент.ОсновнойМенеджер;
			Объект.CRM_ОсновнаяОтрасль = ПотенциальныйКлиент.Отрасль;
			
			Объект.CRM_ВидыДеятельности.Очистить();
			Если ЗначениеЗаполнено(Объект.CRM_ОсновнаяОтрасль) Тогда
				СтрОтрасль = Объект.CRM_ВидыДеятельности.Добавить();
				СтрОтрасль.ВидДеятельности = Объект.CRM_ОсновнаяОтрасль;
			КонецЕсли;
			
			// Подготовка данных для создания КЛ:
			БуферФИО = ПотенциальныйКлиент.Наименование;
				
			Контакт_Объект.Наименование = ПотенциальныйКлиент.Наименование;
			Контакт_Объект.CRM_Фамилия = CRM_КлиентыСервер.ВыделитьЧастьНаименованияКонтактногоЛица(БуферФИО);
			Контакт_Объект.CRM_Имя = CRM_КлиентыСервер.ВыделитьЧастьНаименованияКонтактногоЛица(БуферФИО);
			Контакт_Объект.CRM_Отчество = CRM_КлиентыСервер.ВыделитьЧастьНаименованияКонтактногоЛица(БуферФИО);
			Контакт_Объект.CRM_ОтписалсяОтEmailРассылок = ПотенциальныйКлиент.CRM_ОтписалсяОтEmailРассылок;
			Контакт_Объект.CRM_Должность = ПотенциальныйКлиент.Должность;
			
		КонецЕсли;
		// -CRM

		Элементы.ГруппаСвязанныеСписки.Видимость = Ложь;
		НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере();
		// +CRM_Модуль
		// Элементы.ГруппаРеквизитыЮрЛица.Видимость = Ложь;
		// Элементы.Декорация5.Видимость = Ложь;
		// -CRM_Модуль
	КонецЕсли;
	
	Если Параметры.Свойство("Основание") Тогда
		
		Основание = Параметры.Основание;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			СоздаемИзВходящегоПисьма 	= Истина;
			
			Для Каждого СтрокаТаблицы Из ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"] Цикл
				Если СтрокаТаблицы.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					ЭтотОбъект[СтрокаТаблицы.ИмяРеквизита] = Основание.ОтправительАдрес;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ВариантПоставкиПользователяКОРП = CRM_ЛицензированиеЭкспортныеМетоды.ВариантПоставкиКОРП();
	Элементы.тПотенциал.Видимость	= ВариантПоставкиПользователяКОРП И ПолучитьФункциональнуюОпцию("CRM_РассчитыватьПотенциалКлиентов");
	
	Клиенты.Параметры.УстановитьЗначениеПараметра("ФизЛицо", Объект.Ссылка);
	
	Если Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
		Элементы.Наименование.КнопкаВыбора = Истина;
	КонецЕсли;
	
	СформироватьПредставлениеВложений();
	УстановкаНастройкаВидимостиНаСервере(Истина);
	ЗаполнитьИнформационныеНадписи();
	ВидимостьИДоступностьПоляПолныхЛет();
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НСтр("en='Created';ru='Создан'") + " ", , ЦветаСтиля.CRM_ЧерныйЦветТекста));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Строка(Объект.CRM_Автор), , ЦветаСтиля.CRM_ОсновнойГолубой, , "Автор"));
	КомпонентыФС.Добавить(" " + Формат(Объект.ДатаРегистрации, "ДФ=d.MM.yyyy"));
	Элементы.ДекорацияАвторДата.Заголовок = Новый ФорматированнаяСтрока(КомпонентыФС);
	
	// +CRM_Модуль
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ПриСозданииНаСервереКонтрагент(ЭтотОбъект, Параметры);
		РеквизитыПроверкиКонтрагентов.НеИспользоватьКэш = Истина;
		УстановитьРеквизитыПроверкиКонтрагента(ЭтотОбъект);
		ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.ПриСозданииНаСервереУправлениеВидимостью(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		
		ЮридическоеФизическоеЛицо = ?(Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания, 
					Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо,
					Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		
		// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСправочника();
		ПараметрыПриСозданииНаСервере.Форма                 = ЭтотОбъект;
		ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
		ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСправочника(ПараметрыПриСозданииНаСервере);
		// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		
	КонецЕсли;
	// -CRM_Модуль
	
	// Классификаторы
	Элементы.ГруппаКлассификация.Видимость = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьКлассификаторы");
	Элементы.Классификаторы_Показать.Видимость = Элементы.ГруппаКлассификация.Видимость;
	
	// ЛентаСобытий
	Лента_ЗначенияНастроек = CRM_ЛентаСобытий.НастройкиЛенты(ТекущийПользователь, "ЛентаКлиента");
	Если Параметры.Свойство("ПараметрыОтбора") Тогда
		Лента_ЗначенияНастроек.Вставить("ПараметрыОтбора", Параметры.ПараметрыОтбора);
	КонецЕсли;
	CRM_ЛентаСобытий.НастроитьЛенту(ЭтотОбъект, Лента_ЗначенияНастроек);
	НастроитьОбластьВвода();
	// Конец ЛентаСобытий
	
	// Управление элементами на форме
	CRM_УправлениеЭлементамиНаФормах.ПриСозданииНаСервере(ЭтотОбъект, "КоманднаяПанельФормы", "ГруппаДополнительно");
	// Конец Управление элементами на форме
	
	// ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ПодключаемыеКоманды
	
	// +CRM_Модуль
	// Скопируем подключаемые команды в группу "ГруппаКомандыФормы", чтобы отобразить в подменю "Еще..."
	ПараметрыРазмещения = Новый Структура("Источники, КоманднаяПанель, ПрефиксГрупп", Неопределено, Неопределено, "КПФ_");
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Удаим команды, отображаемые тольок в подменю "Еще..." из командной панели, чтобы не было двух таких подменю в одной строке.
	КоманднаяПанельСкрытьДополнительныеКоманды(Элементы.КоманднаяПанель);
	// -CRM_Модуль
	
	// Видимость табличной части "Дополнительная информация", (не вешаем на ФО, чтобы не было отличий от БСП)
	Элементы.CRM_ГруппаДополнительнаяИнформация.Видимость =
		ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	
	// +CRM
	Если Объект.Ссылка.Пустая() Тогда
		
		ВыбранныеТипы = Новый Массив;
		
		Если Параметры.Свойство("СписокОтборПоТипуПартнера") И ЗначениеЗаполнено(Параметры.СписокОтборПоТипуПартнера) Тогда
			Для Каждого ЭлементСписка Из Параметры.СписокОтборПоТипуПартнера Цикл
				НайденныйТипОтношений = Справочники.CRM_ТипыОтношений.НайтиПоНаименованию(ЭлементСписка.Значение);
				Если ЗначениеЗаполнено(НайденныйТипОтношений) Тогда
					ВыбранныеТипы.Добавить(НайденныйТипОтношений);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ВыбранныеТипы.Количество() = 0 Тогда
			ОсновнойТипОтношенийСКлиентом = 
				CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойТипОтношенийСКлиентом");
			Если ЗначениеЗаполнено(ОсновнойТипОтношенийСКлиентом) Тогда
				ВыбранныеТипы.Добавить(ОсновнойТипОтношенийСКлиентом);
			Иначе
				ВыбранныеТипы.Добавить(Справочники.CRM_ТипыОтношений.Покупатель);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ВыбранныеТипы = Объект.CRM_ТипыОтношений.Выгрузить().ВыгрузитьКолонку("ТипОтношений");
	КонецЕсли;
	Справочники.CRM_ТипыОтношений.ЗаполнитьСписокОтношений(CRM_ВсеТипыОтношений, ВыбранныеТипы);
	
	CRM_АдресаОфисов.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.Ссылка);
	УстановитьОформлениеАдресаПоУмолчанию();
	Элементы.ГруппаАдреса.Видимость = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПланированиеВстреч");
	
	CRM_ОбщегоНазначенияПовтИсп.ЗаполнитьСписокВыбораВариантовСроков(Элементы.БыстрыйВвод_ВзаимодействиеДатаНачала_Дата);
	CRM_ОбщегоНазначенияПовтИсп.ЗаполнитьСписокВыбораВариантовСроков(Элементы.БыстрыйВвод_ЗадачаДатаОкончания_Дата);
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.CRM_Интерес, ТекущийПользователь) Тогда
		
		СвязиМеждуПартнерами.ТекстЗапроса = СтрЗаменить(СвязиМеждуПартнерами.ТекстЗапроса, 
		"СвязиМеждуПартнерами.CRM_Интерес КАК CRM_Интерес", 
		"СвязиМеждуПартнерами.CRM_Интерес КАК CRM_Интерес,
		|ВЫБОР КОГДА СвязиМеждуПартнерами.CRM_Интерес.Дата<>ДатаВремя(1,1,1) ТОГДА СвязиМеждуПартнерами.CRM_Интерес.Дата ИНАЧЕ ДатаВремя(2999,1,1) КОНЕЦ КАК Порядок");
		
		ЭлементПорядок = СвязиМеждуПартнерами.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядок.Поле = Новый ПолеКомпоновкиДанных("Порядок");
		ЭлементПорядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		
	КонецЕсли;
	
	Элементы.СвязанныеПартнеры.Доступность = (НЕ Объект.Ссылка.Пустая());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СвязиМеждуПартнерами, "Партнер", Объект.Ссылка, Истина);
	РегистрироватьСвязиВИнтересах = ПолучитьФункциональнуюОпцию("CRM_РегистрироватьВИнтересахВзаимосвязиКлиентов");
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СвязиМеждуПартнерами, "РегистрироватьСвязиВИнтересах", РегистрироватьСвязиВИнтересах, Истина);
	Элементы.ГруппаДублиКлиента.Доступность = (НЕ Объект.Ссылка.Пустая());
	СформироватьТаблицуДублей();
	
	
	Элементы.ПотенциальныеКлиенты.Доступность = (НЕ Объект.Ссылка.Пустая());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(CRM_ПотенциальныеКлиенты,
		"Партнер", Объект.Ссылка,
		Истина);
	
	Элементы.ГруппаСвязанныеБизнесПроцессы.Видимость = Константы.CRM_ИспользоватьБизнесПроцессы.Получить();
	// -CRM
	
	// Настройка доступности основного менеджера.
	Если  Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() <> Истина Тогда
		Элементы.ОсновнойМенеджер.ТолькоПросмотр = НЕ Пользователи.РолиДоступны("CRM_ПередачаДелОтветственному, ПолныеПрава");
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Если Объект.CRM_ВидыДеятельности.Количество() = 0 Тогда
		Элементы.ГруппаВидыДеятельности.Заголовок = НСтр("ru = 'Отрасли'; en = 'Sectors'");
	Иначе	
		Элементы.ГруппаВидыДеятельности.Заголовок = НСтр("ru = 'Отрасли'; en = 'Sectors'") + "("
			+ Объект.CRM_ВидыДеятельности.Количество()
			+ ")";
	КонецЕсли;
	
	ОтображатьВсеОтрасли = Константы.CRM_ИспользоватьВидыДеятельностиУПартнеров.Получить();
	Элементы.CRM_ОсновнаяОтрасль.ТолькоПросмотр = ОтображатьВсеОтрасли;
	Элементы.ГруппаВидыДеятельности.Видимость = ОтображатьВсеОтрасли;
	ОтрасльКЭШ = Объект.CRM_ОсновнаяОтрасль;
	УстановитьУсловноеОформлениеПоВидуДеятельности();
	
	// +CRM_Модуль
	//// +CRM
	// Элементы.ГруппаУровниДоступа.ТолькоПросмотр = НЕ Пользователи.РолиДоступны("CRM_ПередачаДелОтветственному, ПолныеПрава");
	//// -CRM
	// -CRM_Модуль
	
	CRM_Теги.УстановитьПараметрыВыбора(Элементы);
	// -CRM
	
	ИспользоватьПроверкуКонтрагентов = Константы.ИспользоватьПроверкуКонтрагентов.Получить();
	// +CRM_Модуль
	
	// СтандартныеПодсистемы.Взаимодействия
	Взаимодействия.ПодготовитьОповещения(ЭтотОбъект, Параметры, Ложь);
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// +Софтфон
	Если НЕ(Параметры.ЗначенияЗаполнения = Неопределено) И Параметры.ЗначенияЗаполнения.Свойство("Звонок") Тогда
		сфпЗвонок =  Параметры.ЗначенияЗаполнения.Звонок;
	КонецЕсли;		
	Если ТипЗнч(Параметры.Основание) = Тип("Структура") И Параметры.Основание.Свойство("Интерес") Тогда
		сфпИнтерес = Параметры.Основание.Интерес;
	КонецЕсли;
	// -Софтфон
	
	// Настройки видов цен
	Если ИспользоватьНесколькоВидовЦен Тогда
		ОбновитьИндивидуальныйВидЦеныПредставление();
		ОбновитьФлажокИспользоватьОбщийВидЦен();
		ОбновитьФлажокИспользоватьИндивидуальныйВидЦены();
		НастроитьВидимостьДоступностьЭлементовНастройкиОбщегоВидаЦен(ЭтотОбъект);
		НастроитьВидимостьДоступностьЭлементовНастройкиИндивидуальногоВидаЦен(ЭтотОбъект);
	КонецЕсли;
	// Конец Настройки видов цен
	
	//++ Локализация 
	Элементы.НаименованиеВТранскрипции.Видимость = СтранаРегистрации <> Справочники.СтраныМира.Россия;
	//-- Локализация
	
	// -CRM_Модуль
	
	// +CRM
	Элементы.ГруппаРеквизитыКонтакта.Видимость = Объект.Ссылка.Пустая();
	
	Элементы.ИсторияРеквизитов.Видимость = ПолучитьФункциональнуюОпцию("CRM_ВестиИсториюРеквизитовКлиентов");
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	Если ПравоДоступа("Добавление", Метаданные.Справочники.CRM_СтатусыРаботыСКлиентом) Тогда
		Элементы.СтатусРаботы_Настройка.Видимость = Истина;
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.Наименование;
	
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопкуСвернуть()
	
	Если Команды.Найти("СвернутьРазвернутьГруппу") = Неопределено Тогда
		НоваяКомандаФормы = Команды.Добавить("СвернутьРазвернутьГруппу");
		НоваяКомандаФормы.Заголовок					= "СвернутьРазвернутьГруппу";
		НоваяКомандаФормы.Действие					= "СвернутьРазвернутьГруппу";
		НоваяКомандаФормы.ИзменяетСохраняемыеДанные	= Истина;
	КонецЕсли;
	
	Если Не Элементы.Найти("ГруппаПанельКЛ") = Неопределено
		И Элементы.Найти("КоманднаяПанельСвернутьРазвернутьГруппу") = Неопределено Тогда
		
		НоваяКоманднаяПанель = Элементы.Добавить("КоманднаяПанельСвернутьРазвернутьГруппу",
			Тип("ГруппаФормы"), Элементы.ГруппаПанельКЛ);
		НоваяКоманднаяПанель.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
		НоваяКоманднаяПанель.Вид = ВидГруппыФормы.КоманднаяПанель;
		НоваяКоманднаяПанель.РастягиватьПоГоризонтали = Ложь;
		НоваяКоманднаяПанель.Ширина = Макс(Элементы.ЭлементСписокКЛ.Ширина - 30, 1);
		НоваяКоманднаяПанель.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
		
		НовыйПунктМеню = Элементы.Добавить("СвернутьРазвернутьГруппу", Тип("КнопкаФормы"), НоваяКоманднаяПанель);
		НовыйПунктМеню.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйПунктМеню.ИмяКоманды = "СвернутьРазвернутьГруппу";
		НовыйПунктМеню.Картинка = БиблиотекаКартинок.CRM_КнопкаРазвернуть;
		НовыйПунктМеню.Отображение = ОтображениеКнопки.Картинка;
		НовыйПунктМеню.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		НовыйПунктМеню.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьГруппу(Команда)
	Группа = Неопределено;
	Родитель = ТекущийЭлемент.Родитель;
	Пока Группа = Неопределено Цикл
		Если ТипЗнч(Родитель) = Тип("ГруппаФормы") И Родитель.Поведение = ПоведениеОбычнойГруппы.Всплывающая Тогда
			Группа = Родитель;
		Иначе
			Родитель = Родитель.Родитель;
		КонецЕсли;
	КонецЦикла;
	Если Группа <> Неопределено Тогда
		Если Группа = Элементы.ГруппаСписокКЛ Тогда
			Элементы.ЭлементСписокКЛ.РастягиватьПоВертикали = НЕ Элементы.ЭлементСписокКЛ.РастягиватьПоВертикали;
			Элементы.ЭлементСписокКЛ.РастягиватьПоГоризонтали = НЕ Элементы.ЭлементСписокКЛ.РастягиватьПоГоризонтали;
			Элементы.КоманднаяПанельСвернутьРазвернутьГруппу.РастягиватьПоГоризонтали = 
				НЕ Элементы.КоманднаяПанельСвернутьРазвернутьГруппу.РастягиватьПоГоризонтали;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	ВыведеныБизнесПроцессы = Ложь;
	
	Если Объект.ЮрФизЛицо = ЭтоЧастноеЛицо Тогда
		СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
		Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЗаполнитьТипыОтношений();
	КонецЕсли;
	
	// +CRM_Модуль
	//// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	// ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	//// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	//
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		
		// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		ПараметрыПриОткрытии = ОбменСКонтрагентамиКлиент.ПараметрыПриОткрытии();
		ПараметрыПриОткрытии.Форма                            = ЭтотОбъект;
		ПараметрыПриОткрытии.МестоРазмещенияКоманд            = Элементы.КомандыЭДО;
		ПараметрыПриОткрытии.ЕстьОбработчикОбновитьКомандыЭДО = Истина;
		
		ОбменСКонтрагентамиКлиент.ПриОткрытии(ПараметрыПриОткрытии);
		// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	Иначе
		
		Элементы.ФормаПроверитьКонтрагента.Видимость = Ложь;	
		
	КонецЕсли;
	
	// -CRM_Модуль
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЛентаСобытий
	БыстрыйВвод_КэшированноеВремя = 0;
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	БыстрыйВвод_АктивенАвтоПодбор = Ложь;
	Лента_Прокрутить = Ложь;
	// Конец ЛентаСобытий
	
	ПодключитьОбработчикОжидания("ОбновитьЗаголовокСвязиМеждуПартнерами", 0.1, Истина);
	
	ПодключитьОбработчикОжидания("Подключаемый_ОтложенныеДействияПриОткрытии", 0.1, Истина);
	
	// +CRM
	Если ИспользоватьПК Тогда
		ПодключитьОбработчикОжидания("CRM_ОбновитьГруппуПотенциальныеКлиенты", 0.1, Истина);
	КонецЕсли;
	
	Если ПрозвонитьМессенджерыПриОткрытии Тогда
		ПодключитьОбработчикОжидания("ПрозвонитьВсеТелефоныФормы", 0.1, Истина);
	КонецЕсли;
	// -CRM
	
	// РаспознаваниеРечи
	МассивЭлементов = РаспознаваниеРечи_МассивИменЭлементов();
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, МассивЭлементов);
	// Конец РаспознаваниеРечи
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Клиенты.Клиент.ДлительностьСценариев.ВремяРаботыВФорме");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЛентаСобытий_Обновить"
		Или ИмяСобытия = "Запись_Файл" Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
		
	ИначеЕсли ИмяСобытия = "ОбновитьПланировщик"
		Или ИмяСобытия = "Запись_ЗадачаИсполнителя"
		Или ИмяСобытия = "СохраненаЛичнаяЗадача"
		Или ИмяСобытия = "СохраненоПоручение" 
		Или ИмяСобытия = "ЗадачаВыполнена" Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
		ЗаполнитьДеревоПроцессов();
		
	ИначеЕсли ИмяСобытия = "НовоеКонтактноеЛицоЗаписано" И Источник = Объект.Ссылка Тогда
		
		ОбновитьКонтактноеЛицо(Параметр);
		
		CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.Клиенты);
		Если Не Элементы["ГруппаСписокКЛ"].Скрыта() Тогда
			CRM_КлиентыКлиент.ДобавитьНовоеКЛ(ЭтотОбъект, Параметр);
		КонецЕсли;
		ОбновитьСписокКонтактов();
		
	ИначеЕсли ИмяСобытия = "КонтактноеЛицоЗаписано" И Источник = Объект.Ссылка Тогда
		
		ОбновитьКонтактноеЛицо(Параметр);
		CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.Клиенты);
		ОбновитьСписокКонтактов();
		
	ИначеЕсли ИмяСобытия = "Создан новый контактный клиент" Тогда
		
		CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.Клиенты);
		
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчетПоУмолчанию" Тогда
		
		Прочитать();
		
	ИначеЕсли ИмяСобытия = "ИзмененДоговорПоУмолчанию" Тогда
		
		Прочитать();
		
	ИначеЕсли ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		СформироватьПредставлениеВложений();
	ИначеЕсли ИмяСобытия = "Запись_Файл"
		И Параметр.Свойство("ВладелецФайла") Тогда
		
		Модифицированность = Истина;
		СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
		
		Если ВыборИзображения Тогда
			
			Объект.CRM_Фотография = СсылкаНаФайл;
			АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
			
		КонецЕсли;
		СформироватьПредставлениеВложений();
		
	// +CRM_Модуль
	// ИначеЕсли ИмяСобытия = "Изменение КПП" Тогда
	//	Если УникальныйИдентификатор = Источник Тогда 
	//		Объект.CRM_КПП = Параметр;
	//	КонецЕсли;
	// -CRM_Модуль
	ИначеЕсли ИмяСобытия = "ЗаписанаСвязьМеждуПартнерами" И (Параметр = Неопределено
		Или Параметр.ПервыйПартнер = Объект.Ссылка
		Или Параметр.ВторойПартнер = Объект.Ссылка) Тогда
		
		ПодключитьОбработчикОжидания("ОбновитьЗаголовокСвязиМеждуПартнерами", 0.1, Истина);
		
	ИначеЕсли ИмяСобытия = "НовыйПотенциальныйКлиентЗаписан" Тогда
		ПодключитьОбработчикОжидания("CRM_ОбновитьГруппуПотенциальныеКлиенты", 0.1, Истина);
		
	ИначеЕсли ИмяСобытия = "ОбновитьОблакоТегов" И (ЭтотОбъект = Параметр) Тогда
		ОбновитьОблакоТегов();
		
	ИначеЕсли ИмяСобытия = "ДопТелефоны_ПоказатьПодменю" И (Источник = ЭтотОбъект) Тогда
		СписокТелефоновКЛ = ДопТелефоныПолучитьНаСервере(Параметр);
		Оповещение = Новый ОписаниеОповещения("ВыборТелефонаИзМенюЗавершение", ЭтотОбъект, Параметр);
		ПоказатьВыборИзМеню(Оповещение,СписокТелефоновКЛ);
		
	ИначеЕсли ИмяСобытия = "ДопАдресаЭП_ПоказатьПодменю" И (Источник = ЭтотОбъект) Тогда
		СписокАдресовЭПКЛ = ДопАдресаЭППолучитьНаСервере(Параметр);
		Оповещение = Новый ОписаниеОповещения("ВыборАдресаЭПИзМенюЗавершение", ЭтотОбъект, Параметр);
		ПоказатьВыборИзМеню(Оповещение,СписокАдресовЭПКЛ);
		
		
	ИначеЕсли ИмяСобытия = "ПослеСозданияТега" И (Источник = Элементы.Тег) Тогда
		Тег = Параметр;
		CRM_ТегиКлиент.ТегПриИзменении(ЭтотОбъект, Элементы.Тег);
		
	ИначеЕсли ИмяСобытия = "ОбновленыДанныеСобытия"
		И (СтрНайти(Источник.ИмяФормы, "CRM_БизнесПроцесс") > 0 Или СтрНайти(Источник.ИмяФормы, "ЗадачаИсполнителя") > 0) Тогда
		
		ЗаполнитьДеревоПроцессов();
		
	ИначеЕсли ИмяСобытия = "СтартованНовыйНезависимыйБП" И Объект.Ссылка = Параметр Тогда
		ЗаполнитьДеревоПроцессов();
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// +CRM_Модуль
	//// ИнтернетПоддержкаПользователей.СПАРКРиски
	// СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Неопределено, ИмяСобытия, Параметр, Источник);
	//// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		
		// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСправочника();
		ПараметрыОповещенияЭДО.Форма                            = ЭтотОбъект;
		ПараметрыОповещенияЭДО.МестоРазмещенияКоманд            = Элементы.КомандыЭДО;
		ПараметрыОповещенияЭДО.ЕстьОбработчикОбновитьКомандыЭДО = Истина;

		ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСправочника(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
		// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		
		// ИнтернетПоддержкаПользователей.СПАРКРиски
		СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Объект, ИмяСобытия, Параметр, Источник);
		// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
		
	КонецЕсли;
	
	Если ИмяСобытия = "ДобавлениеПартнераВСегмент"
		ИЛИ ИмяСобытия = "УдалениеПартнераИзСегмента" Тогда
		
		ОбновитьЗапретОтгрузки(Объект.Ссылка, ОтгрузкаЗапрещена);
		УстановитьДоступностьЗапретаОтгрузки();
		
	КонецЕсли;
	// -CRM_Модуль
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// +CRM_Модуль
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	CRM_ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		ПартнерыИКонтрагенты.ЗаполнитьДанныеКонтрагентаПартнера(ЭтотОбъект, ТекущийОбъект.Ссылка);
		ПриСозданииИЧтенииНаСервере();
		ПартнерыИКонтрагенты.ПартнерФормаЭлементаПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	Иначе
		ПриСозданииИЧтенииНаСервере();
		ПартнерыИКонтрагенты.ПартнерФормаЭлементаПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	
	// -CRM_Модуль
	
	НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере();
	
	Если Не Объект.CRM_Фотография.Пустая() Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
		Если ПустаяСтрока(АдресКартинки) Тогда
			ВывестиНедоступностьКартинки();
		КонецЕсли;	
	Иначе
		АдресКартинки = "";
	КонецЕсли;
	CRM_УправлениеВидимостьюКартинки();
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеКонтактнойИнформацией");
		МодульУправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	УстановитьВидимостьРеквизитовКИ();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// +CRM_Модуль
	//// CRM_УправлениеДоступом
	// МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
	// Если МодульУправлениеДоступом <> Неопределено Тогда
	//	МодульУправлениеДоступом.ФормаПартнераПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// КонецЕсли;
	//// Конец CRM_УправлениеДоступом
	// -CRM_Модуль
	
	ДатаКасания = РегистрыСведений.CRM_ДатыКасанийКонтактов.ПолучитьДатуКасания(ТекущийОбъект.Ссылка);
	Элементы.ДатаКасания.Видимость = ЗначениеЗаполнено(ДатаКасания);
	
	Если Элементы.ГруппаПроцентЗаполнения.ПодчиненныеЭлементы.Количество() > 0 Тогда
		CRM_КонтрольЗаполненностиРеквизитовОбъектов.ОтобразитьПроцентЗаполнения(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	
	ЦветСтатусаРаботы = ЦветСтатусаРаботы(ТекущийОбъект.CRM_СтатусРаботы);
	
	Элементы.CRM_СтатусРаботы.ЦветФона   = ЦветСтатусаРаботы;
	Элементы.CRM_СтатусРаботы.ЦветТекста = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(ЦветСтатусаРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	CRM_ЗаписатьВсеТипыОтношений();
	СформироватьТипОтношенийПредставление();
	// +CRM_Модуль
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		ПартнерыИКонтрагентыЛокализацияКлиент.ПередЗаписьюКонтрагент(Отказ, ПараметрыЗаписи, ЭтотОбъект);
	КонецЕсли;

	Если ПараметрыЗаписи.Свойство("ЗаписыватьБезПроверки") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ВыполнятьПоискДублейПриЗаписиПартнера() Тогда 
		СтруктураОбъекта = Новый Структура;
		СтруктураПоиска = СоздатьСтруктуруПоиска(СтруктураОбъекта);
		Если (СтруктураПоиска.Свойство("Наименование") И СтруктураПоиска.Наименование = "=")
			ИЛИ (СтруктураПоиска.Свойство("НаименованиеПолное") И СтруктураПоиска.НаименованиеПолное = "=") Тогда
			ТочноеСоответствие = Истина;
		Иначе
			ТочноеСоответствие = Ложь;
		КонецЕсли;
		
		Если ЕстьДублиПартнеров(СтруктураОбъекта, СтруктураПоиска, , ТочноеСоответствие) Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СтруктураПоиска",		СтруктураПоиска);
			ПараметрыФормы.Вставить("СтруктураОбъекта",		СтруктураОбъекта);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект);
			ОткрытьФорму("ОбщаяФорма.CRM_ФормаНайденныхДублей", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда
		Объект.ДатаРегистрации = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	КонецЕсли;
	
	// -CRM_Модуль
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СтруктураПоиска = Новый Структура("ВидДеятельности", Справочники.CRM_Отрасли.ПустаяСсылка());
	МассивСтрок = ТекущийОбъект.CRM_ВидыДеятельности.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='в таблице ""Отрасли"" присутствуют пустые строки'");
		Сообщение.Сообщить();
	КонецЕсли;	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	// СтандартныеПодсистемы.КонтактнаяИнформация
	Если НЕ ЭтотОбъект["ПараметрыКонтактнойИнформации"].ГруппаКонтактнаяИнформация.ОтложеннаяИнициализация 
		ИЛИ ЭтотОбъект["ПараметрыКонтактнойИнформации"].ГруппаКонтактнаяИнформация.ВыполненаОтложеннаяИнициализация Тогда
		CRM_УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// +CRM_Модуль
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ПередЗаписьюНаСервереКонтрагент(ЭтотОбъект, ТекущийОбъект);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	КонецЕсли;
	// -CRM_Модуль
	
	Если ТекущийОбъект.Ссылка.Пустая() ИЛИ (НЕ ТекущийОбъект.Ссылка.ОсновнойМенеджер = ТекущийОбъект.ОсновнойМенеджер) Тогда
		КорректироватьНапоминание = Истина;
	КонецЕсли;
	
	Если НЕ (Объект.Ссылка.CRM_ОтписалсяОтEmailРассылок = Объект.CRM_ОтписалсяОтEmailРассылок) Тогда
		CRM_ИнтеграцияССервисамиРассылок.ПодписатьПолучателяНаРассылки(Объект, НЕ Объект.CRM_ОтписалсяОтEmailРассылок, Отказ);
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность", Модифицированность);
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// +CRM_Модуль
	Если Не CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);

		// ИнтеграцияС1СДокументооборотом
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
		// Конец ИнтеграцияС1СДокументооборотом
	
	КонецЕсли;
	// -CRM_Модуль
	
КонецПроцедуры

// +CRM_Модуль
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПартнерыИКонтрагенты.ПартнерФормаЭлементаПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
	
		ЗаписатьКонтрагентаПартнера();
		УправлениеДоступностью(ЭтотОбъект);
		
		ПараметрыЗаписиСПАРКРиски = Новый Структура("КонтрагентСсылка", КонтрагентПартнера);
		
		// ИнтернетПоддержкаПользователей.СПАРКРиски
		СПАРКРиски.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписиСПАРКРиски);
		// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
		
	Иначе
		
		МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
		
	КонецЕсли;
	
	// +Классификаторы
	Если Классификаторы_ВыполненаОтложеннаяИнициализация Тогда
		CRM_КлассификаторыЭкспортныеМетоды.ФормаОбъектаПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
		CRM_КлассификаторыЭкспортныеМетоды.ФормаОбъектаПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект.Ссылка);
	КонецЕсли;
	// -Классификаторы
	
	// +CRM
	Если КорректироватьНапоминание Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", ТекущийОбъект.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		               |	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		               |ГДЕ
		               |	КонтактныеЛицаПартнеров.Владелец = &Владелец";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			CRM_ОповещенияСервер.CRM_СформироватьУдалитьНапоминанияОКлючевыхСобытиях(Выборка.Ссылка);
		КонецЦикла;
		КорректироватьНапоминание = Ложь;
	КонецЕсли;
	
	СоздатьКонтактФормыРегистрацииНаСервере(ТекущийОбъект.Ссылка);
	
	CRM_КонтрольЗаполненностиРеквизитовОбъектов.ОтобразитьПроцентЗаполнения(ЭтотОбъект, ТекущийОбъект);
	// -CRM
	
	ПартнерыИКонтрагентыЛокализация.ПослеЗаписиНаСервереФормаЭлементаРеквизитыКонтрагента(ТекущийОбъект, ПараметрыЗаписи, ЭтотОбъект);
	
	УстановитьЗаголовок();
	
КонецПроцедуры
// +CRM_Модуль

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписьПартнера", Объект.Ссылка, Неопределено);
	
	Если ЭтоНовыйПартнер Тогда
		Если СоздаемИзВходящегоПисьма Тогда
			Оповестить("Создан новый партнер из письма", Объект.Ссылка);
		Иначе
			Оповестить("Создан новый партнер", Объект.Ссылка, ЭтотОбъект);
		КонецЕсли;
		
		Клиенты.Параметры.УстановитьЗначениеПараметра("ФизЛицо",Объект.Ссылка);
		Если ЗначениеЗаполнено(сфпЗвонок) Тогда		
			Оповестить("ЗаполнитьКонтактВТелефонномЗвонке", Новый Структура("Звонок, Контакт", сфпЗвонок, Объект.Ссылка));
		КонецЕсли;
		Если ЗначениеЗаполнено(сфпИнтерес) Тогда
			Оповестить("СозданКонтактДляИнтереса", Новый Структура("сфпИнтерес, Контакт", сфпИнтерес, Объект.Ссылка));
		КонецЕсли;
		
		// +CRM
		Если ЗначениеЗаполнено(CRM_СсылкаНаИсточникДанных) Тогда
			Оповестить("НовыйПартнерЗаписанСПараметрами", Новый Структура("ИсточникДанных, Данные", CRM_СсылкаНаИсточникДанных, Новый Структура("Клиент, Контакт", Объект.Ссылка, Объект.CRM_ОсновноеКонтактноеЛицо)));
			Если ОбновитьДанныеПотенциальногоКлиентаПослеЗаписи Тогда
				ОбновитьДанныеПотенциальногоКлиента(CRM_СсылкаНаИсточникДанных, Объект.Ссылка, Объект.CRM_ОсновноеКонтактноеЛицо);
				CRM_ОбновитьГруппуПотенциальныеКлиенты();
			КонецЕсли;
			Если ТипЗнч(CRM_СсылкаНаИсточникДанных) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
				CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.ПотенциальныйКлиент.КарточкаПотенциальногоКлиента.Удобство.СозданиеНовКлиента");
			КонецЕсли;
		КонецЕсли;
		// -CRM
		
		Элементы.СвязанныеПартнеры.Доступность = Истина;
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СвязиМеждуПартнерами, "Партнер", Объект.Ссылка, Истина);
		// +CRM
		Элементы.ПотенциальныеКлиенты.Доступность = Истина;
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(CRM_ПотенциальныеКлиенты, "Партнер", Объект.Ссылка, Истина);
		// -CRM
	КонецЕсли;
	
	ЭтоНовыйПартнер = Ложь;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
	СтруктураПараметров = Новый Структура("CRM_ФизЛицо", Объект.Ссылка);
	УстановитьПараметрыФункциональныхОпцийФормы(СтруктураПараметров);
	
	ПослеСозданияКонтактаФормыРегистрации();
	
	// +СофтФон
	// Записываем маршрутизацию в АТС.
	Если сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
		Если НЕ ЗначениеЗаполнено(сфпСтарыйПользовательДляПереключения) И НЕ ЗначениеЗаполнено(Объект.сфпПользовательДляПереключенияЗвонков) Тогда	
			Возврат;
		КонецЕсли;	
		СтарыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(Объект.Ссылка, сфпСтарыйПользовательДляПереключения);
		ПользовательОбновлен	= сфпСофтФонПроСервер.сфпЗаписатьНовогоПользователя(Объект.Ссылка, Объект.сфпПользовательДляПереключенияЗвонков, Истина);
		Если ПользовательОбновлен Тогда
			НовыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(Объект.Ссылка, Объект.сфпПользовательДляПереключенияЗвонков);
			СписокМаршрутизации = сфпСофтФонПроСервер.сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
			сфпСофтФонПроСервер.сфпИзменитьМаршрутизациюВАТС(СписокМаршрутизации);
		КонецЕсли;	
	КонецЕсли;
	// -СофтФон
	
	// +CRM_Модуль
	ВзаимодействияКлиент.КонтактПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи, "Партнеры");
	Оповестить("Запись_Партнеры", Объект.Ссылка);
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		ОповеститьОбИзменении(КонтрагентПартнера);
	Иначе
		МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// -CRM_Модуль
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// +CRM
	Если НЕ ПроверитьЗаполнениеКонтакта() Тогда
		Отказ = Истина;
	КонецЕсли;
	// -CRM
	
	// +CRM_Модуль
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		ПартнерыИКонтрагенты.ПроверитьКорректностьЗаполненияКонтрагента(ЭтотОбъект, КонтрагентПартнера, Отказ);
	КонецЕсли; 
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	РозничныеПродажи.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	Если НЕ ЭтотОбъект["ПараметрыКонтактнойИнформации"].ГруппаКонтактнаяИнформация.ОтложеннаяИнициализация 
		ИЛИ ЭтотОбъект["ПараметрыКонтактнойИнформации"].ГруппаКонтактнаяИнформация.ВыполненаОтложеннаяИнициализация Тогда
		CRM_УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	КонецЕсли;	
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	Если Не CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		Если Не ПроверяемыеРеквизиты.Найти("ЮрФизЛицо") = Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ЮрФизЛицо"));
		КонецЕсли;
		Если Не ПроверяемыеРеквизиты.Найти("ВидКонтрагента") = Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ВидКонтрагента"));
		КонецЕсли;
	КонецЕсли;
	// -CRM_Модуль	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Клиенты.Клиент.ДлительностьСценариев.ВремяРаботыВФорме");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область КонтактнаяИнформация_КонтактныеЛица

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНажатие(Команда)
	
	CRM_УправлениеКонтактнойИнформациейКлиент.КонтактнаяИнформацияНажатие(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияКонтактнойИнформации()
	Если ЭтотОбъект["ПараметрыКонтактнойИнформации"].ГруппаКонтактнаяИнформация.ОтложеннаяИнициализация 
		И НЕ ЭтотОбъект["ПараметрыКонтактнойИнформации"].ГруппаКонтактнаяИнформация.ВыполненаОтложеннаяИнициализация Тогда
		CRM_УправлениеКонтактнойИнформацией.ВыполнитьОтложеннуюИнициализацию(ЭтотОбъект, Объект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактныеЛицаНажатие(Команда)
	
	Если Команда.Имя = "ЭлементЕщеКонтакты" Тогда
		Если Объект.Ссылка.Пустая() Тогда
			ТекстВопроса = НСтр("ru='Данные еще не записаны."
"Добавление контактных лиц возможно только после записи данных."
"Данные будут записаны.';en='Data has not been written yet."
"Addition of contact persons is possible only after writing data."
"Data will be written.'");
			ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КонтактныеЛицаНажатиеЗавершение", ЭтотОбъект, Команда);	
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			Возврат;
		Иначе
			CRM_КлиентыКлиент.КонтактныеЛицаНажатие(ЭтотОбъект, Команда);
		КонецЕсли;
	Иначе
		Если СтрНайти(Команда.Имя, "ЭлементКЛ") > 0 Тогда
			ТекущиеСтрокиКЛ = ЭтотОбъект["КонтактныеЛицаПартнера"].НайтиСтроки(Новый Структура("ИмяРеквизита", Команда.Имя));
			Если ТекущиеСтрокиКЛ.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьКонтакты", ЭтотОбъект, Команда);
			CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
				"CRM_Статистика.Клиенты.КонтактноеЛицо.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
			Открытьформу("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", Новый Структура("Ключ", ТекущиеСтрокиКЛ[0].КонтактноеЛицо),,,,,ОписаниеОповещения);
		ИначеЕсли СтрНайти(Команда.Имя, "ЭлементСписокКЛКонтекстноеПометитьНаУдаление") > 0 Тогда
			ВыделенныеСтроки = Элементы["ЭлементСписокКЛ"].ВыделенныеСтроки;
			Если ВыделенныеСтроки.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			ЗадатьВопросОПометкеНаУдалениеКЛ(ВыделенныеСтроки);
		Иначе
			CRM_КлиентыКлиент.КонтактныеЛицаНажатие(ЭтотОбъект, Команда);
		КонецЕсли;
		Если Команда.Имя = "ПрименитьИзмененияКЛ" Тогда
			Если Элементы["ГруппаСписокКЛ"].Скрыта() Тогда
				ОбновитьСписокКонтактов();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКонтакты(Результат, Команда) Экспорт
	ОбновитьСписокКонтактов();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактныеЛицаНажатиеЗавершение(Ответ, Команда) Экспорт
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда
			CRM_КлиентыКлиент.КонтактныеЛицаНажатие(ЭтотОбъект, Команда);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактныеЛицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	CRM_КлиентыКлиент.КонтактныеЛицаВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ЛентаСобытий

&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыЛенты(Элемент, НавигационнаяСсылка, СтандартнаяОбработка) Экспорт // АПК:78 - исключить из проверки.
	ДополнительныеПараметры = Новый Структура;
	СписокКоманд = Новый СписокЗначений;
	ИмяКоманды = СтрЗаменить(Элемент.Имя, "ОбычныйВвод_", "");
	СписокКоманд.Добавить(ИмяКоманды, Элемент.Заголовок); 
	ОбычныйВвод_ПоказатьЕщеЗавершение(СписокКоманд[0], ДополнительныеПараметры);	
КонецПроцедуры

&НаКлиенте
Процедура Лента_HTMLДокументСформирован(Элемент)  
	
	Если Лента_HTML_ПозицияОтКрая <> 0 Тогда
		Смещение = Элементы.Лента_HTML.Документ.getElementById("scollable-wrap").scrollHeight - Лента_HTML_ПозицияОтНачала;
		Элементы.Лента_HTML.Документ.getElementById("scollable-wrap").scrollTop = Лента_HTML_ПозицияОтКрая + Смещение;
		Лента_HTML_ПозицияОтКрая = 0;
		Лента_HTML_ПозицияОтНачала = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСсылки = ДанныеСобытия.href;
	Если Не ЗначениеЗаполнено(ДанныеСсылки) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаКоманд = CRM_ЛентаСобытийКлиент.ИменаКомандОбъектовЛенты();
	
	Для Каждого ИмяКоманды Из ИменаКоманд Цикл
		ПозицияРазделителя = СтрНайти(ДанныеСсылки, ИмяКоманды);
		Если ПозицияРазделителя > 0 Тогда
			Если ИмяКоманды = "ОбъектЛенты_Закрепить_" Или ИмяКоманды = "ОбъектЛенты_Открепить_" Тогда
				Лента_HTML_ПозицияОтКрая = Элементы.Лента_HTML.Документ.getElementById("scollable-wrap").scrollTop;
				Лента_HTML_ПозицияОтНачала = Элементы.Лента_HTML.Документ.getElementById("scollable-wrap").scrollHeight;
			КонецЕсли;
			ПараметрКоманды = Сред(ДанныеСсылки, ПозицияРазделителя + СтрДлина(ИмяКоманды));
			CRM_ЛентаСобытийКлиент.ВыполнитьКомандуЛенты(ИмяКоманды, ПараметрКоманды, ЭтотОбъект);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ПозицияРазделителя = СтрНайти(ДанныеСсылки, "ЛентаЗагрузитьЕще");
	Если ПозицияРазделителя > 0 Тогда
		Лента_КоличествоОбъектовИстории = Лента_КоличествоОбъектовИстории + 50;
		Лента_Прокрутить = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект = CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуИзНавигационной(ДанныеСсылки);
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.CRM_Диалоги") Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.АРМДиалоги.ОткрытиеВОдинКлик.ПереходИзЛентыКарточкиКлиента");
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента", Новый Структура("Ключ", СсылкаНаОбъект), ЭтотОбъект);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", Новый Структура("Ключ", СсылкаНаОбъект), ЭтотОбъект);
	Иначе
		Попытка
			ПозицияНайденного = СтрНайти(ДанныеСсылки, "e1cib/");
			ДлинаСсылкиВнутр  = СтрДлина(ДанныеСсылки) + 1 - ПозицияНайденного;
			НавигационнаяСсылка = Прав(ДанныеСсылки, ДлинаСсылкиВнутр);
			ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
		Исключение
			// Обработка не требуется.
			Возврат;
		КонецПопытки
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ОтборВсеСобытияПриИзменении(Элемент)
	
	НастройкаВсеСобытия = Лента_Отбор.Получить(0);
	ПометкаВсеСобытия = НастройкаВсеСобытия.Пометка;
	Для Сч = 1 По Лента_Отбор.Количество()-1 Цикл
		НастройкаОтбора = Лента_Отбор.Получить(Сч);
		НастройкаОтбора.Пометка = ПометкаВсеСобытия;
	КонецЦикла;
	
	Если НастройкаВсеСобытия.Пометка Тогда
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрНеактивный;
	Иначе
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрАктивный;
	КонецЕсли;
	
	CRM_ЛентаСобытий.СохранитьОтборЛенты(Лента_Отбор, "ЛентаКлиента");
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Лента_ОтборПриИзменении(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "Лента_Отбор_", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_Пометка", "");
	
	Если ИмяЭлемента = "Звонки" Или ИмяЭлемента = "Письма" Тогда
		ЭлементСписка = Лента_Отбор.НайтиПоЗначению(ИмяЭлемента);
		ЭлементСпискаВходящие = Лента_Отбор.НайтиПоЗначению("Входящие"+ИмяЭлемента);
		ЭлементСпискаИсходящие = Лента_Отбор.НайтиПоЗначению("Исходящие"+ИмяЭлемента);
		ЭлементСпискаВходящие.Пометка = ЭлементСписка.Пометка;
		ЭлементСпискаИсходящие.Пометка = ЭлементСписка.Пометка;
	КонецЕсли;
	
	Если СтрНайти(ИмяЭлемента, "Входящие") > 0 Тогда
		ИмяРодителя = СтрЗаменить(ИмяЭлемента, "Входящие", "");
		ЭлементСписка = Лента_Отбор.НайтиПоЗначению(ИмяРодителя);
		ЭлементСпискаВходящие = Лента_Отбор.НайтиПоЗначению("Входящие"+ИмяРодителя);
		ЭлементСпискаИсходящие = Лента_Отбор.НайтиПоЗначению("Исходящие"+ИмяРодителя);
		ЭлементСписка.Пометка = Макс(ЭлементСпискаВходящие.Пометка, ЭлементСпискаИсходящие.Пометка);
	КонецЕсли;
	
	Если СтрНайти(ИмяЭлемента, "Исходящие") > 0 Тогда
		ИмяРодителя = СтрЗаменить(ИмяЭлемента, "Исходящие", "");
		ЭлементСписка = Лента_Отбор.НайтиПоЗначению(ИмяРодителя);
		ЭлементСпискаВходящие = Лента_Отбор.НайтиПоЗначению("Входящие"+ИмяРодителя);
		ЭлементСпискаИсходящие = Лента_Отбор.НайтиПоЗначению("Исходящие"+ИмяРодителя);
		ЭлементСписка.Пометка = Макс(ЭлементСпискаВходящие.Пометка, ЭлементСпискаИсходящие.Пометка);
	КонецЕсли;
	
	ПометкаСобытие = Истина;
	Для Сч = 1 По Лента_Отбор.Количество()-1 Цикл
		НастройкаОтбора = Лента_Отбор.Получить(Сч);
		ПометкаСобытие = Мин(ПометкаСобытие, НастройкаОтбора.Пометка);
	КонецЦикла;
	НастройкаВсеСобытия = Лента_Отбор.Получить(0);
	НастройкаВсеСобытия.Пометка = ПометкаСобытие;
	
	Если НастройкаВсеСобытия.Пометка Тогда
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрНеактивный;
	Иначе
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрАктивный;
	КонецЕсли;
	
	CRM_ЛентаСобытий.СохранитьОтборЛенты(Лента_Отбор, "ЛентаКлиента");
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ЗакрепленныеСверхуПриИзменении(Элемент)
	
	НастройкаВсеСобытия = Лента_Отбор.Получить(0);
	
	Если НастройкаВсеСобытия.Пометка И Не Лента_ЗакрепленныеСверху Тогда
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрНеактивный;
	Иначе
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрАктивный;
	КонецЕсли;
	
	СохранитьЗначениеЗакрепленныеСверху();
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначениеЗакрепленныеСверху()
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("CRM_ЛентаСобытий_ЗакрепленныеСверху",
		"ЛентаКлиента", Лента_ЗакрепленныеСверху);
КонецПроцедуры

#КонецОбласти

#Область ОбластьВвода

// Общее

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаПриИзменении(Элемент = Неопределено)
	
	Если БыстрыйВвод_ДатаНачала = НачалоДня(БыстрыйВвод_ДатаНачала) И БыстрыйВвод_КэшированноеВремя > 0 Тогда
		БыстрыйВвод_ДатаНачала = БыстрыйВвод_ДатаНачала + БыстрыйВвод_КэшированноеВремя;
		БыстрыйВвод_КэшированноеВремя = 0;
	КонецЕсли;
	
	Если НачалоДня(БыстрыйВвод_КэшированнаяДатаНачала) = НачалоДня(БыстрыйВвод_ДатаОкончания) Тогда
		ВремяЗавершения = БыстрыйВвод_ДатаОкончания - НачалоДня(БыстрыйВвод_ДатаОкончания);
		БыстрыйВвод_ДатаОкончания = НачалоДня(БыстрыйВвод_ДатаНачала) + ВремяЗавершения;
	КонецЕсли;
	
	Если БыстрыйВвод_ДатаНачала > БыстрыйВвод_ДатаОкончания Тогда
		
		СрокПоУмолчанию = 3600;
		Если БыстрыйВвод_ТекущийТипОбъекта = "Взаимодействие" Тогда
			СрокПоУмолчанию = 1800;
		КонецЕсли;
			
		БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + СрокПоУмолчанию;
		БыстрыйВвод_ЗадачаВариантСрока = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.ЧерезЧас");
	КонецЕсли;
	
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	Если ЗначениеЗаполнено(БыстрыйВвод_ДатаНачала) Тогда
		ПараметрыОткрытия.Вставить("ДатаПоУмолчанию", БыстрыйВвод_ДатаНачала);
	КонецЕсли;
	ПараметрыОткрытия.Вставить("ДанныеБыстрогоВвода", CRM_ЛентаСобытийКлиент.ДанныеЗаполненияОбъектаБыстрогоВвода("ЛентаКлиента", БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект));
	БыстрыйВвод_КэшированноеВремя = БыстрыйВвод_ДатаНачала - НачалоДня(БыстрыйВвод_ДатаНачала);
	CRM_ВзаимодействияКлиент.ДатаВзаимодействияНачалоВыбора(Объект, Элемент, ДанныеВыбора,
		СтандартнаяОбработка, ПараметрыОткрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ЭтоРезультатРаботыСКалендарем") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			БыстрыйВвод_ДатаНачала = ВыбранноеЗначение.Начало;
			БыстрыйВвод_ДатаОкончания = ВыбранноеЗначение.Конец;
			
			БыстрыйВвод_ДатаНачалаПриИзменении();
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.CRM_ВариантыУстановкиДаты") Тогда
		СтандартнаяОбработка = Ложь;
		
		ДлительностьИнтервала = БыстрыйВвод_ДатаОкончания - БыстрыйВвод_ДатаНачала;
		
		Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.Вручную") Тогда
			ОписаниеОповещения	= Новый ОписаниеОповещения(
				"БыстрыйВвод_ДатаНачалаОбработкаВыбораЗавершение", ЭтотОбъект, ДлительностьИнтервала);
			ОткрытьФорму("ОбщаяФорма.CRM_ФормаРучногоПереносаВремени", , ЭтотОбъект, КлючУникальности, , , ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			// Осуществляется перенос обеих дат на указанный интервал
			БыстрыйВвод_ДатаНачала = CRM_ОбщегоНазначенияСервер.ДатаПоВариантуИнтервала(
				CRM_ОбщегоНазначенияСервер.БазоваяДатаПоВариантуИнтервала(БыстрыйВвод_ДатаНачала, ВыбранноеЗначение),
				ВыбранноеЗначение);
			
			БыстрыйВвод_ДатаОкончания = CRM_ОбщегоНазначенияСервер.ДатаПоВариантуИнтервала(
				CRM_ОбщегоНазначенияСервер.БазоваяДатаПоВариантуИнтервала(БыстрыйВвод_ДатаОкончания, ВыбранноеЗначение),
				ВыбранноеЗначение, ДлительностьИнтервала);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		БыстрыйВвод_ДатаНачала = Результат;
		БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + ДополнительныеПараметры;
	КонецЕсли;
	
КонецПроцедуры // БыстрыйВвод_ДатаНачалаОбработкаВыбораЗавершение()


&НаКлиенте
Процедура БыстрыйВвод_ВремяНачалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ВремяНачалаНачалоВыбораЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, БыстрыйВвод_ДатаНачала,
		Элемент, БыстрыйВвод_ДатаНачала, Ложь, ОповещениеЗавершения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяНачалаНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ДатаНачала = ВыбранныйЭлемент.Значение;
	БыстрыйВвод_ДатаНачалаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаОкончанияПриИзменении(Элемент)
	
	Если БыстрыйВвод_ДатаНачала > БыстрыйВвод_ДатаОкончания Тогда
		
		СрокПоУмолчанию = 3600;
		Если БыстрыйВвод_ТекущийТипОбъекта = "Взаимодействие" Тогда
			СрокПоУмолчанию = 1800;
		КонецЕсли;
		
		БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + СрокПоУмолчанию;
		БыстрыйВвод_ЗадачаВариантСрока = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.ЧерезЧас");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаОкончанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.CRM_ВариантыУстановкиДаты") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.Вручную") Тогда
			ОписаниеОповещения	= Новый ОписаниеОповещения("БыстрыйВвод_ДатаОкончанияОбработкаВыбораЗавершение", ЭтотОбъект);
			ОткрытьФорму("ОбщаяФорма.CRM_ФормаРучногоПереносаВремени", , ЭтотОбъект, КлючУникальности, , , ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			БыстрыйВвод_ДатаОкончания = CRM_ОбщегоНазначенияСервер.ДатаПоВариантуИнтервала(
				CRM_ОбщегоНазначенияСервер.БазоваяДатаПоВариантуИнтервала(БыстрыйВвод_ДатаОкончания, ВыбранноеЗначение),
				ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаОкончанияОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		БыстрыйВвод_ДатаОкончания = Результат;
	КонецЕсли;
	
КонецПроцедуры // БыстрыйВвод_ДатаОкончанияОбработкаВыбораЗавершение()

&НаКлиенте
Процедура БыстрыйВвод_ВремяОкончанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ВремяОкончанияНачалоВыбораЗавершение", ЭтотОбъект);
	ДобавлятьДлительность = (НачалоДня(БыстрыйВвод_ДатаНачала) = НачалоДня(БыстрыйВвод_ДатаОкончания));
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, БыстрыйВвод_ДатаОкончания,
		Элемент, БыстрыйВвод_ДатаНачала, ДобавлятьДлительность, ОповещениеЗавершения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяОкончанияНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ДатаОкончания = ВыбранныйЭлемент.Значение;
	
КонецПроцедуры

// Примечание

&НаКлиенте
Процедура БыстрыйВвод_ПримечаниеТемаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТемаЗаполнена = ЗначениеЗаполнено(Текст);
	ВысотаТемы = ?(ТемаЗаполнена, 3, 1);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_ПримечаниеТема", "Высота", ВысотаТемы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_КомандыПримечание", "Видимость", ТемаЗаполнена);
	Если ТемаЗаполнена Тогда
		Элементы.БыстрыйВвод_СоздатьПримечание.КнопкаПоУмолчанию = Истина;
	Иначе	
		Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Взаимодействие

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеВидПриИзменении(Элемент)
	
	БыстрыйВвод_Тема = CRM_ЛентаСобытий.ЗначениеРеквизитаОбъекта(БыстрыйВвод_ВзаимодействиеВид, "Тема");
	БыстрыйВвод_Содержание = CRM_ЛентаСобытий.ЗначениеРеквизитаОбъекта(БыстрыйВвод_ВзаимодействиеВид, "Описание");
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеВидОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеНаВесьДеньПриИзменении(Элемент)
	
	Элементы.БыстрыйВвод_ВзаимодействиеДатаНачала_Время.Видимость = (Не БыстрыйВвод_ВзаимодействиеНаВесьДень);
	Элементы.БыстрыйВвод_ВзаимодействиеДатаОкончания_Время.Видимость = (Не БыстрыйВвод_ВзаимодействиеНаВесьДень);
	
	Если БыстрыйВвод_ВзаимодействиеНаВесьДень Тогда
		ПараметрыДня = CRM_ЛентаСобытий.ПараметрыРабочегоДня(ТекущийПользователь);
		БыстрыйВвод_ДатаНачала = НачалоДня(БыстрыйВвод_ДатаНачала) + (ПараметрыДня.ВремяНачала - Дата('00010101'));
		БыстрыйВвод_ДатаОкончания = НачалоДня(БыстрыйВвод_ДатаОкончания) + (ПараметрыДня.ВремяОкончания - Дата('00010101'));
	КонецЕсли;
	
КонецПроцедуры

// Задача

&НаКлиенте
Процедура БыстрыйВвод_ВариантСрокаПриИзменении(Элемент)
	
	БыстрыйВвод_ДатаОкончания = CRM_ЛентаСобытий.ДатаОкончанияПоВарианту(БыстрыйВвод_ДатаНачала, БыстрыйВвод_ЗадачаВариантСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВариантСрокаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Письмо

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	БыстрыйВвод_ПисьмоУчетнаяЗапись = ВыбранноеЗначение;
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	БыстрыйВвод_ПисьмоОтправительПредставление = ЭлементСписка.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(БыстрыйВвод_ПисьмоУчетнаяЗапись) Тогда
		ПоказатьЗначение(, БыстрыйВвод_ПисьмоУчетнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейПриИзменении(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейПисьма;
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейКопий;
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстРедактирования) Тогда
		ЭтотОбъект[ИмяТаблицы].Очистить();
		Возврат;
	КонецЕсли;
	
	Длина = СтрДлина(ТекстРедактирования);
	
	НачалоСтроки = 0;
	КонецСтроки = 0;
	НачалоКолонки = 0;
	КонецКолонки = 0;
	Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	Элемент.УстановитьГраницыВыделения(1, НачалоКолонки, 1, КонецКолонки);
	
	ЕстьОшибки = Ложь;
	Результат = CRM_ОбщегоНазначенияКлиентСервер.АнализСтрокиАдресовЭП(ТекстРедактирования,, ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Для каждого Адрес Из Результат Цикл
			Если Адрес.КодОшибки <> 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Адрес.Сообщение,, ИмяЭлемента);
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	СоответствияАдресовИКонтактов = Новый СписокЗначений;
	ДанныеПолучателей = ЭтотОбъект[ИмяТаблицы];
	СтруктураДанных = CRM_ЛентаСобытий.ПреобразоватьИменаПолучателей(ДанныеПолучателей,
		БыстрыйВвод_ПисьмоУчетнаяЗапись, Результат, СоответствияАдресовИКонтактов);
	
	ЭтотОбъект[ИмяТаблицы].Очистить();
	Для Каждого ДанныеПолучателя Из СтруктураДанных.Получатели Цикл
		ЗаполнитьЗначенияСвойств(ЭтотОбъект[ИмяТаблицы].Добавить(), ДанныеПолучателя);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ГруппаАдресов = "Кому";
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ГруппаАдресов = "Копии";
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ГруппаАдресов = "Скрытые";
	Иначе
		Возврат;
	КонецЕсли;
	
	СписокВыбранных = Новый СписокЗначений;
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучатели), "Кому");
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучателиКопий), "Копии");
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий), "Скрытые");
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись",		БыстрыйВвод_ПисьмоУчетнаяЗапись);
	ПараметрыОткрытия.Вставить("СписокВыбранных",	СписокВыбранных);
	ПараметрыОткрытия.Вставить("ГруппаПоУмолчанию",	ГруппаАдресов);
	ПараметрыОткрытия.Вставить("ГруппаАдресов",		ГруппаАдресов);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_СписокПолучателейНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура);
	ОткрытьФорму("ОбщаяФорма.CRM_АдреснаяКнига", ПараметрыОткрытия,,,,, ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если (ТипЗнч(Результат) <> Тип("Массив")) И (ТипЗнч(Результат) <> Тип("Соответствие")) Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ПисьмоПолучатели.Очистить();
	БыстрыйВвод_ПисьмоПолучателиКопий.Очистить();
	БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Очистить();
	
	Для Каждого Элемент Из Результат Цикл
		
		Если Элемент.Группа = "Кому" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ИначеЕсли Элемент.Группа = "Копии" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ИначеЕсли Элемент.Группа = "Скрытые" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		Иначе
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЭтотОбъект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
		НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, ",", "");
		НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, ";", "");
		
	КонецЦикла;
	
	ДанныеКонтактов = Новый Структура;
	ДанныеКонтактов.Вставить("Кому", БыстрыйВвод_ПисьмоПолучатели);
	ДанныеКонтактов.Вставить("Копии", БыстрыйВвод_ПисьмоПолучателиКопий);
	ДанныеКонтактов.Вставить("Скрытые", БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий);
	
	ПредставленияКонтактов = CRM_ЛентаСобытий.ПредставленияКонтактовПисьма(ДанныеКонтактов);
	
	БыстрыйВвод_ПисьмоСписокПолучателейПисьма		= ПредставленияКонтактов.Кому;
	БыстрыйВвод_ПисьмоСписокПолучателейКопий		= ПредставленияКонтактов.Копии;
	БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий	= ПредставленияКонтактов.Скрытые;
	
	ВидимостьПолучателейКопий = БыстрыйВвод_ПисьмоПолучателиКопий.Количество() > 0;
	ВидимостьПолучателейСкрытыхКопий = БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Количество() > 0;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПисьмоСписокПолучателейКопий", "Видимость", ВидимостьПолучателейКопий);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПоказатьПолучателейКопии", "Видимость", Не ВидимостьПолучателейКопий);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий", "Видимость", ВидимостьПолучателейСкрытыхКопий);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПоказатьПолучателейСкрытойКопии", "Видимость", Не ВидимостьПолучателейСкрытыхКопий);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ЗаголовокСписка = НСтр("en='List of receivers of the letter (Whom)';ru='Список получателей письма (Кому)'");
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ЗаголовокСписка = НСтр("en='List of receivers of the letter (Copy)';ru='Список получателей письма (Копии)'");
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		ЗаголовокСписка = НСтр("en='List of receivers of the letter (Hidden copies)';ru='Список получателей письма (Скрытые копии)'");
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяТаблицы].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", ЗаголовокСписка);
	ПараметрыОткрытия.Вставить("МассивПолучателей", ЭтотОбъект[ИмяТаблицы]);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаСпискаПолучателей", ПараметрыОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не БыстрыйВвод_АктивенАвтоПодбор Тогда
		Возврат;
	КонецЕсли;
	
	НачалоСтроки = 0;
	КонецСтроки = 0;
	НачалоКолонки = 0;
	КонецКолонки = 0;
	Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	
	ТекстДоМаркера = Лев(Элемент.ТекстРедактирования, КонецКолонки-1);
	ТекстПослеМаркера = Сред(Элемент.ТекстРедактирования, КонецКолонки);
	
	СборнаяСтрока = "";
	
	Если СтрНайти(ТекстДоМаркера, ",") > 0 Тогда
		МассивПодстрок = СтрРазделить(ТекстДоМаркера, ",");
		Для Индекс = 0 По МассивПодстрок.ВГраница() Цикл
			Если Индекс = (МассивПодстрок.Количество()-1) Тогда
				Продолжить;
			КонецЕсли;
			СборнаяСтрока = СборнаяСтрока + ?(СборнаяСтрока="", "", ",") + МассивПодстрок[Индекс];
		КонецЦикла;
	КонецЕсли;
	
	СборнаяСтрока = СборнаяСтрока +?(СборнаяСтрока="", "", ",")+ ВыбранноеЗначение;
	
	Если СтрНайти(ТекстПослеМаркера, ",") > 0 Тогда
		МассивПодстрок = СтрРазделить(ТекстПослеМаркера, ",");
		Для Индекс = 1 По МассивПодстрок.ВГраница() Цикл
			СборнаяСтрока = СборнаяСтрока + "," + МассивПодстрок[Индекс];
		КонецЦикла;
	КонецЕсли;
	
	ВыбранноеЗначение = СборнаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	БыстрыйВвод_АктивенАвтоПодбор = (Не Ожидание = 0);
	
	Если БыстрыйВвод_АктивенАвтоПодбор Тогда
		
		ДанныеВыбора = Неопределено;
		
		НачалоСтроки = 0;
		КонецСтроки = 0;
		НачалоКолонки = 0;
		КонецКолонки = 0;
		Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
		
		ТекстДоМаркера = Лев(Текст, КонецКолонки-1);
		ТекстПослеМаркера = Сред(Текст, КонецКолонки);
		
		ИтоговаяСтрокаДляПоиска = "";
		
		Если НЕ СокрЛП(ТекстДоМаркера) = "" И СтрНайти(ТекстДоМаркера, ",") > 0 Тогда
			МассивПодстрок = СтрРазделить(ТекстДоМаркера, ",");
			ИтоговаяСтрокаДляПоиска = МассивПодстрок[МассивПодстрок.Количество()-1];
		ИначеЕсли НЕ СокрЛП(ТекстДоМаркера) = "" И СтрНайти(ТекстДоМаркера, ",") > 0 Тогда
			ИтоговаяСтрокаДляПоиска = "";
		Иначе
			ИтоговаяСтрокаДляПоиска = ТекстДоМаркера;
		КонецЕсли;
		
		Если Не ИтоговаяСтрокаДляПоиска = "" И СтрДлина(СокрЛП(ИтоговаяСтрокаДляПоиска)) > 0 Тогда
			СписокДляВыбора = CRM_ЛентаСобытий.СписокПолучателейАвтоПодборНаСервере(СокрЛП(ИтоговаяСтрокаДляПоиска));
			Если СписокДляВыбора.Количество() > 0 Тогда
				СтандартнаяОбработка = Ложь;
				ДанныеВыбора = СписокДляВыбора;
			ИначеЕсли БыстрыйВвод_ПисьмоИсторияАдресов.Количество() > 0 Тогда
				СписокИзИстории = Новый СписокЗначений;
				Для Каждого ЭлементИстории Из БыстрыйВвод_ПисьмоИсторияАдресов Цикл
					Если СтрНайти(ЭлементИстории.Представление, ИтоговаяСтрокаДляПоиска) > 0 Тогда
						СтандартнаяОбработка = Ложь;
						СписокИзИстории.Добавить(ЭлементИстории.Значение, ЭлементИстории.Представление);
					КонецЕсли;
				КонецЦикла;
				ДанныеВыбора = СписокИзИстории;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли БыстрыйВвод_ПисьмоИсторияАдресов.Количество()>0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БыстрыйВвод_ПисьмоИсторияАдресов;
	КонецЕсли;
	
КонецПроцедуры

// Файл

&НаКлиенте
Процедура БыстрыйВвод_ФайлОписаниеИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЕстьВложения = (БыстрыйВвод_Вложения.Количество() > 0);
	ВысотаТемы = ?(ЗначениеЗаполнено(Текст), 3, 1);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_ФайлОписание", "Высота", ВысотаТемы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_КомандыФайл", "Видимость", ЕстьВложения);
	
	Если ЕстьВложения Тогда
		Элементы.БыстрыйВвод_СоздатьФайл.КнопкаПоУмолчанию = Истина;
	Иначе	
		Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Чат

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УчетныеЗаписиМессенджеров = CRM_КлиентыСервер.УчетныеЗаписиМессенджеров(БыстрыйВвод_ЧатВидКИ, Объект.Ссылка, Истина);
	CRM_ЛентаСобытийКлиентСервер.НастроитьОбластьВводаУчетныеЗаписиМессенджеров(УчетныеЗаписиМессенджеров, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ЧатПолучательОбработкаВыбораЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
	
	CRM_ЛентаСобытийКлиент.ПоказатьВопросОЗаписиОбъекта(ЭтотОбъект, ОповещениеЗавершения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОбработкаВыбораЗавершение(ОбъектЗаписан, ДополнительныеПараметры) Экспорт
	
	Если Не ОбъектЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ВыбранноеЗначение = "НайтиВМессенджерах" Тогда
		
		ПрозвонитьВсеТелефоныФормы();
		
	Иначе
	
		ПараметрыОтбора = Новый Структура("Идентификатор", ДополнительныеПараметры.ВыбранноеЗначение);
		НайденныеСтроки = БыстрыйВвод_ЧатПолучатели.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныйПолучатель = НайденныеСтроки[0];
			БыстрыйВвод_ЧатИдентификаторПолучателя	= НайденныйПолучатель.Идентификатор;
			БыстрыйВвод_ЧатАдрес					= НайденныйПолучатель.Адрес;
			БыстрыйВвод_ЧатПолучатель					= НайденныйПолучатель.Контакт;
			БыстрыйВвод_ЧатПредставлениеПолучателя	= НайденныйПолучатель.Представление;

			// учетная запись есть в списке доступных пользователю
			Если БыстрыйВвод_ЧатУчетныеЗаписи.НайтиСтроки(Новый Структура("УчетнаяЗапись", НайденныйПолучатель.УчетнаяЗапись)).Количество() > 0 Тогда
				БыстрыйВвод_ЧатУчетнаяЗапись			= НайденныйПолучатель.УчетнаяЗапись;
				БыстрыйВвод_ЧатПредставлениеУчетнойЗаписи = НайденныйПолучатель.УчетнаяЗапись;                                                         
			КонецЕсли;  

			БыстрыйВвод_ЧатГруппа					= НайденныйПолучатель.Группа;
			БыстрыйВвод_ЧатЭтоНомерТелефона			= НайденныйПолучатель.ЭтоНомерТелефона;
			БыстрыйВвод_ЧатВидКИ					= НайденныйПолучатель.ВидКИ;
		КонецЕсли;
		
		УчетныеЗаписиМессенджеров = CRM_КлиентыСервер.УчетныеЗаписиМессенджеров(БыстрыйВвод_ЧатВидКИ, Объект.Ссылка);
		CRM_ЛентаСобытийКлиентСервер.НастроитьОбластьВводаУчетныеЗаписиМессенджеров(УчетныеЗаписиМессенджеров, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатУчетнаяЗаписьОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатУчетнаяЗаписьОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатУчетнаяЗаписьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	БыстрыйВвод_ЧатУчетнаяЗапись = ВыбранноеЗначение;
	БыстрыйВвод_ЧатПредставлениеУчетнойЗаписи = ВыбранноеЗначение;
	
КонецПроцедуры

#КонецОбласти

#Область CRM_Модуль

&НаКлиенте
Процедура ШаблонЭтикеткиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	Отбор = Новый Структура();
	Отбор.Вставить("Назначение",ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляДоставки"));
	ПараметрыФормы.Вставить("Отбор",Отбор);
	ШаблонЭтикетки = Неопределено;

	ОткрытьФорму("Справочник.ШаблоныЭтикетокИЦенников.ФормаВыбора",ПараметрыФормы,,,,, Новый ОписаниеОповещения("ШаблонЭтикеткиНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЭтикеткиНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ШаблонЭтикетки = Результат;
    Если ШаблонЭтикетки=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Объект.ШаблонЭтикетки =  ШаблонЭтикетки;

КонецПроцедуры

&НаКлиенте
Процедура ГоловнойКонтрагентПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбщийВидЦенПриИзменении(Элемент)
	
	ИспользоватьОбщийВидЦенПриИзмененииНаКлиенте();
	НастроитьВидимостьДоступностьЭлементовНастройкиОбщегоВидаЦен(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбщийВидЦенПриИзмененииНаКлиенте()

	Если НЕ ИспользоватьОбщийВидЦен Тогда
		
		Объект.ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИндивидуальныйВидЦеныПриИзменении(Элемент)
	
	ИспользоватьИндивидуальныйВидЦеныПриИзмененииНаКлиенте();
	НастроитьВидимостьДоступностьЭлементовНастройкиИндивидуальногоВидаЦен(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИндивидуальныйВидЦеныПриИзмененииНаКлиенте()

	Если ИспользоватьИндивидуальныйВидЦены Тогда
	
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			Возврат;
			
		КонецЕсли;

		РезультатОтключения = НайтиИндивидуальныйВидЦенСервер();
	
	Иначе
		
		Если Объект.ИндивидуальныйВидЦены.Пустая() Тогда
			
			Возврат;
			
		КонецЕсли;
		
		РезультатОтключения = ОтключитьИндивидуальныйВидЦенСервер();
		
		Если Не РезультатОтключения.Результат Тогда
			
			ИспользоватьИндивидуальныйВидЦены = Истина;
			
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Возникла ошибка при отключении индивидуального прайс листа';
					|en = 'An error occurred while disabling the individual price list'") + " " + РезультатОтключения.ОписаниеОшибки,
				Объект.Ссылка,
				);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальныйВидЦеныПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "СоздатьИВЦ" Тогда

		Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или Модифицированность Тогда
		
			ТекстВопроса = Нстр("ru = 'Данные модифицированы.
			|Настройка индивидуального прайс-листа возможна только после записи элемента.
			|Записать элемент?';
			|en = 'The data has been modified.
			|Configuring an individual price list is only available after saving element.
			|Save the item?'");
			
			ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьИВЦВопросЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		КонецЕсли;
	
		СоздатьИВЦЗавершение();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьИВЦ" Тогда
		
		ПоказатьЗначение(Неопределено, Объект.ИндивидуальныйВидЦены);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИВЦВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЭлементЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Не ЭлементЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	
	СоздатьИВЦЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИВЦЗавершение()
	
//	ПоказатьОповещениеПользователя("Создаем индивидуальный вид цены", , , , СтатусОповещенияПользователя.Информация );
	РезультатПереноса = СоздатьИПЛСервер();
	
	Если РезультатПереноса.Результат Тогда
		
		Прочитать();
		ОбновитьИндивидуальныйВидЦеныПредставление();
		ПоказатьЗначение(Неопределено, Объект.ИндивидуальныйВидЦены);
		
	Иначе
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Возникла ошибка при создании индивидуального прайс листа';
				|en = 'An error occurred while generating the individual price list'") + " " + РезультатПереноса.ОписаниеОшибки,
			Объект.Ссылка,
			);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьИПЛСервер()
	
	РезультатПереноса = УстановкаЦенСервер.СоздатьИПЛ(Объект.Ссылка, ТекущаяДатаСеанса());
	
	Возврат РезультатПереноса;
	
КонецФункции

&НаКлиенте
Процедура ГиперссылкаПерейтиПрайсЛистОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиИсторияИзмененияЦенОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или Модифицированность Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к дополнительной информации возможен только после записи элемента.
		|Записать элемент?';
		|en = 'The data is not saved yet.
		|You can go to additional information only after the item is saved.
		|Save it?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ГиперссылкаПерейтиВопросЗавершение", ЭтотОбъект, ПараметрыПереходаПоГиперссылке), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЭлементЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Не ЭлементЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ДополнительныеПараметры.ИмяЭлемента,
																		ДополнительныеПараметры.Гиперссылка);
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке)
	
	Если ПараметрыПереходаПоГиперссылке.Свойство("ИмяФормы") Тогда
		ОткрытьФорму(ПараметрыПереходаПоГиперссылке.ИмяФормы,
			ПараметрыПереходаПоГиперссылке.ПараметрыФормы, , УникальныйИдентификатор, , , ,
			ПараметрыПереходаПоГиперссылке.РежимОткрытияОкнаФормы);
	Иначе
		ТекстИсключения = НСтр("ru = 'Не определено действие по гиперссылке.';
								|en = 'Hyperlink action is not identified.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФлажокИспользоватьОбщийВидЦен()
	
	ИспользоватьОбщийВидЦен = ЗначениеЗаполнено(Объект.ВидЦен);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФлажокИспользоватьИндивидуальныйВидЦены()

	ИспользоватьИндивидуальныйВидЦены = ЗначениеЗаполнено(Объект.ИндивидуальныйВидЦены);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходКИсторииНаименованияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИсторияНаименований" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущееНаименованиеПолное", Объект.НаименованиеПолное);
		ПараметрыФормы.Вставить("ИсторияНаименований",       ИсторияНаименований);
		ПараметрыФормы.Вставить("ТолькоПросмотр",            ТолькоПросмотр);
		ПараметрыФормы.Вставить("ЮрФизлицо",                 ЮрФизЛицо);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИсторияНаименованийПослеЗакрытия", ЭтотОбъект);
		ОткрытьФорму("Справочник.Контрагенты.Форма.РедактированиеИсторииНаименований", ПараметрыФормы, ЭтотОбъект,,,,ОповещениеОЗакрытии);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	ПартнерыИКонтрагентыКлиент.СокрЮрНаименованиеПриИзменении(Объект.Наименование, Объект.НаименованиеПолное);
	
	// +CRM_Модуль
	//Если ПустаяСтрока(Объект.Наименование) Тогда
	//	Объект.Наименование = Объект.НаименованиеПолное;
	//КонецЕсли;
	// -CRM_Модуль
	
	// +CRM
	ВыполнитьПоискДублейПоЗначению(Объект.НаименованиеПолное, Элемент);
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаРегистрацииПриИзменении(Элемент)   
	
	//++ Локализация
	Элементы.НаименованиеВТранскрипции.Видимость = СтранаРегистрации <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия");   
	//-- Локализация
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКонтрагентаПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
	Если ВидКонтрагента = "ОбособленноеПодразделение" Тогда
		
		ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
		ОбособленноеПодразделение = Истина;
		
		Если ГоловнойКонтрагент = КонтрагентПартнера Тогда
			ГоловнойКонтрагент = Неопределено;
		КонецЕсли;
		
	Иначе
		
		ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо." + ВидКонтрагента);
		ОбособленноеПодразделение = Ложь;
		
		Если ГоловнойКонтрагент <> КонтрагентПартнера Тогда
			ГоловнойКонтрагент = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	СтароеЗначениеЮрФизЛицо = Объект.ЮрФизЛицо;
	
	Если ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо");
	Иначе
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания");
	КонецЕсли;
	
	// +CRM_Модуль
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		УстановитьРеквизитыПроверкиКонтрагента(ЭтотОбъект);
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	КонецЕсли;
	// -CRM_Модуль
	
	УправлениеДоступностью(ЭтотОбъект);
	ОтключитьОтметкуНезаполненного();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ИндексыСПАРКРиски = Неопределено;
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// +CRM_Модуль
	CRM_ВидПартнераПриИзменении(Элемент);
	
	Элементы.ГруппаСтраницаИностраннойРегистрации.Видимость = (ВидКонтрагента ="ЮрЛицоНеРезидент");
	
	Если ВидКонтрагента ="ФизЛицо" Или ВидКонтрагента ="ИндивидуальныйПредприниматель" Тогда
		Элементы.Наименование.КнопкаВыбора = Истина;
		
		Элементы.ГруппаКПП.Видимость = Ложь;
		ГруппировкаЭлементовКолонокЮЛ = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Иначе	
		Элементы.Наименование.КнопкаВыбора = Ложь;
		Элементы.НаименованиеВыбор.СписокВыбора.Очистить();
		
		Элементы.ГруппаКПП.Видимость = Истина;
		ГруппировкаЭлементовКолонокЮЛ = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли;
	
	Элементы.ГруппаКолонкаЮЛ1.Группировка = ГруппировкаЭлементовКолонокЮЛ;
	Элементы.ГруппаКолонкаЮЛ2.Группировка = ГруппировкаЭлементовКолонокЮЛ;
	
	// -CRM_Модуль
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
// Процедура сохраняет все типы отношений клиента.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаписатьВсеТипыОтношений()
	Объект.CRM_ТипыОтношений.Очистить();
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если ТипОтношений.Пометка Тогда
			НовСтр = Объект.CRM_ТипыОтношений.Добавить();
			НовСтр.ТипОтношений = ТипОтношений.Значение;	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // CRM_ЗаписатьВсеТипыОтношений()

&НаКлиенте
// Процедура заполняет реквизит формы CRM_ТипыОтношений.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьТипыОтношений()
	Объект.CRM_ТипОтношенийПредставление = "";
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если ТипОтношений.Пометка Тогда
			Объект.CRM_ТипОтношенийПредставление = Объект.CRM_ТипОтношенийПредставление  + "; " + ТипОтношений.Значение;
		КонецЕсли;	
	КонецЦикла;	
	Если СтрДлина(Объект.CRM_ТипОтношенийПредставление) > 0 Тогда
		Объект.CRM_ТипОтношенийПредставление = Сред(Объект.CRM_ТипОтношенийПредставление, 3);
	КонецЕсли;
КонецПроцедуры // CRM_ЗаполнитьТипыОтношений();

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "CRM_ТипыОтношений".
//
Процедура CRM_ТипыОтношенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	Элементы.ГруппаВсеТипыОтношений.Показать();
	ПодключитьОбработчикОжидания("ПроверитьВсплывающиеГруппы", 0.3, Истина);
	
КонецПроцедуры // CRM_ТипыОтношенийНачалоВыбора()

&НаКлиенте
Процедура ПроверитьВсплывающиеГруппы()
	
	Если Элементы.ГруппаВсеТипыОтношений.Скрыта() Тогда
		ТекущийЭлемент = Элементы.CRM_ТипыОтношений;
		CRM_ЗаписатьВсеТипыОтношений();
		СформироватьТипОтношенийПредставление();
		ФлагПризнакПартнераПриИзменении(Неопределено);
	Иначе	
		ПодключитьОбработчикОжидания("ПроверитьВсплывающиеГруппы", 0.3, Истина);
	КонецЕсли;
	
КонецПроцедуры // CRM_ТипыОтношенийНачалоВыбора()

&НаКлиенте
Процедура ФлагПризнакПартнераПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.ПартнерФормаЭлементаФлагПризнакПартнераПриИзменении(ЭтотОбъект, Элемент);
	ОбновитьЭлементыДополнительныхРеквизитов();
	УстановитьДоступностьЗапретаОтгрузки();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТипОтношенийПредставление()
	
	CRM_ТипыОтношений = "";
	Клиент = Ложь;
	Поставщик = Ложь;
	Конкурент = Ложь;
	ПрочиеОтношения = Ложь;
	
	Для Каждого Строка Из Объект.CRM_ТипыОтношений Цикл
		Клиент = Клиент ИЛИ Строка.ТипОтношений.Клиент;
		Поставщик = Поставщик ИЛИ Строка.ТипОтношений.Поставщик;
		Конкурент = Конкурент ИЛИ Строка.ТипОтношений.Конкурент;
		ПрочиеОтношения = ПрочиеОтношения ИЛИ Строка.ТипОтношений.ПрочиеОтношения;
		
		CRM_ТипыОтношений = CRM_ТипыОтношений  + "; " + Строка.ТипОтношений;
	КонецЦикла;	
	Если СтрДлина(CRM_ТипыОтношений) > 0 Тогда
		CRM_ТипыОтношений = Сред(CRM_ТипыОтношений, 3);
	КонецЕсли;	
	Объект.CRM_ТипОтношенийПредставление = CRM_ТипыОтношений;
	Объект.Клиент = Клиент;
	Объект.Поставщик = Поставщик;
	Объект.Конкурент = Конкурент;
	Объект.ПрочиеОтношения = ПрочиеОтношения;
	
КонецПроцедуры


&НаКлиенте
// Процедура - обработчик события "Очистка" элемента формы "ОсновнойМенеджер".
//
Процедура ОсновнойМенеджерОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Удаление основного менеджера запрещено.';en='The removal of the main manager is prohibited.'"));
КонецПроцедуры // ОсновнойМенеджерОчистка()

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	// +CRM_Модуль
	// ТекстСообщения = "";
	// Если ЗначениеЗаполнено(Объект.CRM_ИНН) Тогда
	//	ЭтоЮрЛицо = (Объект.ЮрФизЛицо = ЭтоКомпания);
	//	Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Объект.CRM_ИНН, ЭтоЮрЛицо, ТекстСообщения) Тогда
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.CRM_ИНН");
	//	Иначе
	//		ВыполнитьЗаполнениеРеквизитовПоИНН();
	//	КонецЕсли;
	// КонецЕсли;
	//
	//// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	// ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	//// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	//// ИнтернетПоддержкаПользователей.СПАРКРиски
	// ИндексыСПАРКРиски = Неопределено;
	// ОбновитьОтображениеИндексыСПАРК();
	//// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	//// +CRM
	//// CRM_КлиентыКлиент.ЗаполнитьКППпоИНН(Объект.CRM_ИНН, Объект.CRM_КПП, Ложь, УникальныйИдентификатор);
	// ВыполнитьПоискДублейПоЗначению(Объект.CRM_ИНН, Элемент);
	//// -CRM
	
	ИнициализацияКонтактнойИнформации();
	ПартнерыИКонтрагентыЛокализацияКлиент.ПроверитьИНН(ЭтотОбъект);
	ПодключитьОбработчикОжидания("ПолучитьДанныеРуководителя", 1);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

	ОтключитьОтметкуНезаполненного();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ИндексыСПАРКРиски = Неопределено;
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// -CRM_Модуль
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОГРНПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыЛокализацияКлиент.ПроверитьОГРН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОГРНИППриИзменении(Элемент)
	
	ПартнерыИКонтрагентыЛокализацияКлиент.ПроверитьОГРН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "Задолженность" Тогда
		// +CRM_Модуль
		// ПараметрыФормы = Новый Структура("Отбор,КлючВарианта, СформироватьПриОткрытии",Новый Структура("Клиент", Объект.Ссылка),"Ведомость", Истина);
		// ОткрытьФорму("Отчет.CRM_ВедомостьВзаиморасчетыСКлиентами.Форма", ПараметрыФормы);
		ПараметрыФормы = Новый Структура("Отбор, ФиксированныеНастройки, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии");
		ПараметрыФормы.СформироватьПриОткрытии = Истина;
		Если ЕстьПодчиненныеПартнеры(Объект.Ссылка) Тогда
			ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных();
			ЭлементОтбора = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Партнер");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
			ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
			ПараметрыФормы.ФиксированныеНастройки = ФиксированныеНастройки;
			ПараметрыФормы.КлючНазначенияИспользования = "ГруппаПартнеров";
		Иначе
			ПараметрыФормы.Отбор = Новый Структура("Партнер", Объект.Ссылка);
			ПараметрыФормы.КлючНазначенияИспользования = "Партнер";
		КонецЕсли;
		ПараметрыФормы.КлючВарианта = "РасчетыСПартнерами";
		ОткрытьФорму("Отчет.РасчетыСПартнерами.Форма",ПараметрыФормы);
		// +CRM_Модуль
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Продажи" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			ПараметрыФормы.Вставить("Отбор", Новый Структура("Клиент", Объект.Ссылка));
			ПараметрыФормы.Вставить("КлючВарианта", "РасчетыСКлиентами");
			ИмяФормыОтчета = "Отчет.РасчетыСКлиентами.Форма";
		Иначе
			ПараметрыФормы.Вставить("Отбор", Новый Структура("Клиент", Объект.Ссылка));
			ПараметрыФормы.Вставить("КлючВарианта", "ПоНеделямДням");
			ИмяФормыОтчета = "Отчет.CRM_Продажи.Форма";
		КонецЕсли;
		ОткрытьФорму(ИмяФормыОтчета, ПараметрыФормы);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Потенциал" Тогда
		Элементы.ГруппаПотенциалы.Показать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура сфпПользовательДляПереключенияЗвонковОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(ВыбранноеЗначение, Истина)) Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='У выбранного пользователя не заполнен текущий внутренний номер, маршрутизация невозможна.';en='The selected user does not have the current internal number, routing is not possible.'"));
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлыЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ФамилияПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	Объект.CRM_Фамилия = CRM_КлиентыКлиент.ПривестиФИОКСтандартномуВиду(Объект.CRM_Фамилия);
	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текФамилия) И текФамилия <> СокрЛП(Объект.CRM_Фамилия)) 
			 Или (ПустаяСтрока(Объект.CRM_Фамилия) И Не ПустаяСтрока(текФамилия)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текФамилия, СокрЛП(Объект.CRM_Фамилия)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
			
			Объект.Наименование = СокрЛП(Объект.CRM_Фамилия);
			
		ИначеЕсли Не ПустаяСтрока(Объект.CRM_Фамилия) И ПустаяСтрока(текФамилия) Тогда
			
			Объект.Наименование = СокрЛП((?(ЗначениеЗаполнено(Объект.CRM_Фамилия),   СокрЛП(Объект.CRM_Фамилия) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Имя), 		 СокрЛП(Объект.CRM_Имя) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Отчество),  СокрЛП(Объект.CRM_Отчество), "")));   
			
		КонецЕсли;
		
	КонецЕсли;
	
	текФамилия = СокрЛП(Объект.CRM_Фамилия);
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
	Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	ЗаполнитьПолноеНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИмяПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	Объект.CRM_Имя = CRM_КлиентыКлиент.ПривестиФИОКСтандартномуВиду(Объект.CRM_Имя);
	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текИмя) И текФамилия <> СокрЛП(Объект.CRM_Имя)) 
			 Или (ПустаяСтрока(Объект.CRM_Имя) И Не ПустаяСтрока(текИмя)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текИмя, СокрЛП(Объект.CRM_Имя)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
			
			Объект.Наименование = СокрЛП(Объект.CRM_Имя);
			
		ИначеЕсли Не ПустаяСтрока(Объект.CRM_Имя) И ПустаяСтрока(текИмя) Тогда
			
			Объект.Наименование = СокрЛП((?(ЗначениеЗаполнено(Объект.CRM_Фамилия), 	 СокрЛП(Объект.CRM_Фамилия) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Имя), 		 СокрЛП(Объект.CRM_Имя) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Отчество),  СокрЛП(Объект.CRM_Отчество), "")));   
			
		КонецЕсли;
		
	КонецЕсли;
	
	текИмя = СокрЛП(Объект.CRM_Имя);
	
	// Определим пол
	Если Не ЗначениеЗаполнено(Объект.Пол) Тогда
		
		Объект.Пол = CRM_КлиентыКлиент.ОпределитьПол(Объект.CRM_Имя);
		
	КонецЕсли;
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
	Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	ЗаполнитьПолноеНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОтчествоПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	Объект.CRM_Отчество = CRM_КлиентыКлиент.ПривестиФИОКСтандартномуВиду(Объект.CRM_Отчество);
	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текОтчество)) 
			Или (ПустаяСтрока(Объект.CRM_Отчество) И Не ПустаяСтрока(текОтчество)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текОтчество, СокрЛП(Объект.CRM_Отчество)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
		
			Объект.Наименование = СокрЛП(Объект.CRM_Отчество);
	
		ИначеЕсли Не ПустаяСтрока(Объект.CRM_Отчество) И ПустаяСтрока(текОтчество) Тогда

			Объект.Наименование = Объект.Наименование + " " + СокрЛП(Объект.CRM_Отчество);
			
		КонецЕсли;
						
	КонецЕсли;
	
	текОтчество = СокрЛП(Объект.CRM_Отчество);
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
	Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	ЗаполнитьПолноеНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
			
	Если Объект.ЮрФизЛицо = ЭтоЧастноеЛицо Тогда
		
		МассивПредставлений = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
		Если МассивПредставлений.Количество() > 0 Тогда
			Если ДанныеВыбора = Неопределено Тогда
				ДанныеВыбора = Новый СписокЗначений();
			КонецЕсли;
			Для Каждого тДанные Из МассивПредставлений Цикл
				ДанныеВыбора.Вставить(0, тДанные, тДанные);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	РедактированиеПредставления = Истина;
	Если (НЕ CRM_ИспользоватьПартнеровКакКонтрагентов И Объект.ЮрФизЛицо = ЭтоЧастноеЛицо) ИЛИ
		 (CRM_ИспользоватьПартнеровКакКонтрагентов И (ВидКонтрагента ="ФизЛицо" Или ВидКонтрагента ="ИндивидуальныйПредприниматель")) Тогда
		
		// Если Не РедактированиеФИО И Не ПредставлениеВыбраноИзСписка Тогда
		Если Не ПредставлениеВыбраноИзСписка Тогда
						ФИО = Объект.Наименование;
			ФИО = СтрЗаменить(ФИО,",","");
			ФИО = СтрЗаменить(ФИО,".","");		
			ФИО = СтрЗаменить(ФИО,";","");
			
			СтруктураЗаполнения = ЗаполнитьФИОНаСервере();
			ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения);
			
		КонецЕсли;
		
	КонецЕсли;
	ЗаполнитьПолноеНаименование();
	
	Если Объект.Ссылка.Пустая() И Не Элементы.Найти("ГруппаСведения")<>Неопределено Тогда
		ТекущийЭлемент = Элементы.ГруппаСведения;
	КонецЕсли;
	
	// +CRM
	ВыполнитьПоискДублейПоЗначению(Объект.Наименование, Элемент);
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если CRM_ОбщегоНазначенияКлиент.ЭтоМобильныйКлиент() Тогда
		Элементы.ГруппаРедактированиеФИО.Видимость = Истина;
		ПодключитьОбработчикОжидания("ПроверитьВсплывающиеГруппыНаименованиеМобильныйКлиент", 0.3, Истина);
	Иначе	
		Элементы.ГруппаРедактированиеФИО.Показать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВсплывающиеГруппыНаименованиеМобильныйКлиент()
	Элементы.ГруппаРедактированиеФИО.Показать();
	ПодключитьОбработчикОжидания("ПроверитьВсплывающиеГруппыНаименованиеМобильныйКлиентПриЗакрытии", 0.3, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВсплывающиеГруппыНаименованиеМобильныйКлиентПриЗакрытии()
	Если Элементы.ГруппаРедактированиеФИО.Скрыта() Тогда
		Элементы.ГруппаРедактированиеФИО.Видимость = Ложь;
	Иначе	
		ПодключитьОбработчикОжидания("ПроверитьВсплывающиеГруппыНаименованиеМобильныйКлиентПриЗакрытии", 0.3, Истина);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПредставлениеВыбраноИзСписка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВыборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.ЮрФизЛицо = ЭтоЧастноеЛицо Тогда
		Если Не ПредставлениеВыбраноИзСписка Тогда
			
			СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);	
			Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаРожденияПриИзменении(Элемент)
	
	Объект.CRM_НапоминатьОДнеРождения = ЗначениеЗаполнено(Объект.ДатаРождения);
	Элементы.CRM_НапоминатьОДнеРождения.Доступность = ЗначениеЗаполнено(Объект.ДатаРождения);
	ВидимостьИДоступностьПоляПолныхЛет();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАвторДатаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.CRM_Автор);
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЗавершенныеБППриИзменении(Элемент)
	ЗаполнитьДеревоПроцессов();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПодчиненныеПартнеры(Ссылка)
	Возврат ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(Ссылка);
КонецФункции

#Область ФормаРегистрацииКонтакта

&НаКлиенте
Процедура Контакт_ОбъектНаименованиеПриИзменении(Элемент)
	
	ВыполнитьПоискДублейПоЗначению(Контакт_Объект.Наименование, Элемент);
	БуферФИО = Контакт_Объект.Наименование;
	Контакт_Объект.CRM_Фамилия = CRM_КлиентыСервер.ВыделитьЧастьНаименованияКонтактногоЛица(БуферФИО);
	Контакт_Объект.CRM_Имя = CRM_КлиентыСервер.ВыделитьЧастьНаименованияКонтактногоЛица(БуферФИО);
	Контакт_Объект.CRM_Отчество = CRM_КлиентыСервер.ВыделитьЧастьНаименованияКонтактногоЛица(БуферФИО);
	
КонецПроцедуры

&НаКлиенте
Процедура Контакт_EmailПриИзменении(Элемент)
	ВыполнитьПоискДублейПоЗначению(Контакт_Email, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
КонецПроцедуры

&НаКлиенте
Процедура Контакт_ТелефонПриИзменении(Элемент)
	СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ЭтотОбъект[Элемент.Имя]);
	ЭтотОбъект[Элемент.Имя] = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны, СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный, "");
	ВыполнитьПоискДублейПоЗначению(Контакт_Телефон, Элемент, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
КонецПроцедуры

&НаКлиенте
Процедура Контакт_МобТелефонПриИзменении(Элемент)
	СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ЭтотОбъект[Элемент.Имя]);
	ЭтотОбъект[Элемент.Имя] = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны, СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "", "");
	ВыполнитьПоискДублейПоЗначению(Контакт_МобТелефон, Элемент, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СделатьАдресОсновным(Команда)
	ТекДанные = Элементы.CRM_АдресаОфисов.ТекущаяСтрока;
	Если ТекДанные <> Неопределено Тогда
		Объект.CRM_ОсновнойАдрес = ТекДанные;
		Модифицированность = Истина;
		УстановитьОформлениеАдресаПоУмолчанию();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьАдресаНаКарте(Команда)
	ПараметрыОткрытия = Новый Структура("СписокСсылок, Режим", ПолучитьСписокАдресов(), "ДляПросмотра");
	ПараметрыОткрытия.Вставить("ОткрытаПоСценарию", Истина);
	ОткрытьФорму("Справочник.CRM_АдресаОфисовКомпании.Форма.ПросмотрКарты", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ВидыДеятельностиПослеУдаления(Элемент)
	Если Объект.CRM_ВидыДеятельности.Количество() = 0 Тогда
		Элементы.ГруппаВидыДеятельности.Заголовок = НСтр("ru = 'Отрасли'; en = 'Sectors'");
	Иначе
		Элементы.ГруппаВидыДеятельности.Заголовок = НСтр("ru = 'Отрасли'; en = 'Sectors'")
			+ "("+Объект.CRM_ВидыДеятельности.Количество()
			+ ")";
	КонецЕсли;
	Если Объект.CRM_ВидыДеятельности.Количество() = 1 Тогда
		СделатьОтрасльОсновной("");
	ИначеЕсли Объект.CRM_ВидыДеятельности.Количество() = 0 Тогда	
		Объект.CRM_ОсновнаяОтрасль = ПредопределенноеЗначение("Справочник.CRM_Отрасли.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидыДеятельностиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Объект.CRM_ВидыДеятельности.Количество() = 0 Тогда
		Элементы.ГруппаВидыДеятельности.Заголовок = НСтр("ru = 'Отрасли'; en = 'Sectors'");
	Иначе
		Элементы.ГруппаВидыДеятельности.Заголовок = НСтр("ru = 'Отрасли'; en = 'Sectors'")
			+"("+Объект.CRM_ВидыДеятельности.Количество()
			+ ")";
	КонецЕсли;
	Если Объект.CRM_ВидыДеятельности.Количество() = 1 Тогда
		СделатьОтрасльОсновной("");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура CRM_ОсновнаяОтрасльПриИзмененииНаСервере()
	СтруктураОтбора = Новый Структура("ВидДеятельности", ОтрасльКЭШ);
	ТекСтроки = Объект.CRM_ВидыДеятельности.НайтиСтроки(СтруктураОтбора);	
	Если ТекСтроки.Количество() > 0 Тогда
		Объект.CRM_ВидыДеятельности.Удалить(ТекСтроки[0]);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.CRM_ОсновнаяОтрасль) Тогда
		СтрОтрасль = Объект.CRM_ВидыДеятельности.Добавить();
		СтрОтрасль.ВидДеятельности = Объект.CRM_ОсновнаяОтрасль;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОсновнаяОтрасльПриИзменении(Элемент)
	Если Объект.CRM_ОсновнаяОтрасль <> ОтрасльКЭШ Тогда
		CRM_ОсновнаяОтрасльПриИзмененииНаСервере();
		ОтрасльКЭШ = Объект.CRM_ОсновнаяОтрасль;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыФизическихЛиц(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьДокументыФизическогоЛицаЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры // ОткрытьДокументыФизическихЛиц()

#Область ЛентаСобытий

&НаКлиенте
Процедура Лента_Обновить(Команда)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ПоказатьОтборы(Команда)
	
	Если Элементы.Лента_СписокОтборов.Скрыта() Тогда
		
		CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
			"CRM_Статистика.Прочее.ЛентаСобытий.ДлительностьСценариев.ВремяУстановкиФильтра");
		
		Элементы.Лента_СписокОтборов.Показать();
		ПодключитьОбработчикОжидания("Лента_Закрыть", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ОткрытьЖурналДокументов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтборПартнер", Объект.Ссылка);
	ПараметрыФормы.Вставить("БлокироватьИзменениеОтбораПоПартнеру", Истина);
	
	ОткрытьФорму(
		"Обработка.CRM_УниверсальныйЖурналДокументов.Форма.ФормаФиксированныйОтбор",
		ПараметрыФормы, ЭтотОбъект, КлючУникальности);
	
КонецПроцедуры // Лента_ОткрытьЖурналДокументов()

&НаКлиенте
Процедура Лента_Закрыть()
	
	Если Элементы.Лента_СписокОтборов.Скрыта() Тогда
		
		ТекущийЭлемент = Элементы.Лента_ПоказатьОтборы;
		ОтключитьОбработчикОжидания("Лента_Закрыть");
		
		CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
			"CRM_Статистика.Прочее.ЛентаСобытий.ДлительностьСценариев.ВремяУстановкиФильтра");
		
	Иначе
		ПодключитьОбработчикОжидания("Лента_Закрыть", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбластьВвода

&НаКлиенте
Процедура БыстрыйВвод_СменитьСтраницу(Команда)
	
	Если ТипЗнч(Команда) = Тип("ЭлементСпискаЗначений") Тогда
		ИмяКомандыМассив = СтрРазделить(Команда.Значение, "_");
	Иначе	
		ИмяКомандыМассив = СтрРазделить(Команда.Имя, "_");
		Если Команда.Имя = "БыстрыйВвод_Чат" Тогда
			CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.АРМДиалоги.Удобство.ЧатКарточкаКлиента");
		КонецЕсли;
	КонецЕсли;
	
	ПереключитьСтраницуБыстрогоВвода(ИмяКомандыМассив[1]);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_Создать(Команда)
	
	Если Не CRM_ЛентаСобытийКлиент.ПроверитьЗаполнениеБыстрогоВвода(БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_СоздатьЗавершение", ЭтотОбъект, Новый Структура);
	CRM_ЛентаСобытийКлиент.ПоказатьВопросОЗаписиОбъекта(ЭтотОбъект, ОповещениеЗавершения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СоздатьЗавершение(ОбъектЗаписан, ДополнительныеПараметры) Экспорт
	
	Если ОбъектЗаписан Тогда
		
		ДанныеЗаполнения = CRM_ЛентаСобытийКлиент.ДанныеЗаполненияОбъектаБыстрогоВвода("ЛентаКлиента", БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект);
		
		Если БыстрыйВвод_ТекущийТипОбъекта = "Чат" Тогда
			ВозможностьОтправкиСообщения = CRM_ЛентаСобытий.ПроверитьВозможностьОтправкиСообщения(ДанныеЗаполнения);
			Если Не ВозможностьОтправкиСообщения Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В данный мессенджер нельзя писать первыми!
				                                           |С указанным контактом не было диалогов.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		CRM_ЛентаСобытий.СоздатьОбъектБыстрыйВвод("ЛентаКлиента", БыстрыйВвод_ТекущийТипОбъекта, ДанныеЗаполнения);
		
		Если БыстрыйВвод_ТекущийТипОбъекта = "Файл" Тогда
			СформироватьПредставлениеВложений();
		КонецЕсли;
		
		ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_Отменить(Команда)
	
	ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьПолучателейКопии(Команда)
	
	Элементы.БыстрыйВвод_ПисьмоСписокПолучателейКопий.Видимость = Истина;
	Элементы.БыстрыйВвод_ПоказатьПолучателейКопии.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьПолучателейСкрытойКопии(Команда)
	
	Элементы.БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий.Видимость = Истина;
	Элементы.БыстрыйВвод_ПоказатьПолучателейСкрытойКопии.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДругиеПараметры(Команда)
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ДругиеПараметрыЗавершение", ЭтотОбъект, Новый Структура);
	CRM_ЛентаСобытийКлиент.ПоказатьВопросОЗаписиОбъекта(ЭтотОбъект, ОповещениеЗавершения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДругиеПараметрыЗавершение(ОбъектЗаписан, ДополнительныеПараметры) Экспорт
	
	Если Не ОбъектЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ЛентаСобытийКлиент.ПоказатьПолнуюФормуОбъекта("ЛентаКлиента", БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект);
	ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбычныйВвод_ПоказатьЕще(Команда)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОбычныйВвод_ПоказатьЕщеЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОповещениеЗавершения, ОбычныйВвод_Команды, Элементы.ОбычныйВвод_ПоказатьЕще);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбычныйВвод_ПоказатьЕщеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ВыбранныйЭлемент.Значение, "БыстрыйВвод_") = 1 Тогда
		БыстрыйВвод_СменитьСтраницу(ВыбранныйЭлемент);
	Иначе	
		// РаспознаваниеРечи
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		// Конец РаспознаваниеРечи

		CRM_ЛентаСобытийКлиент.СоздатьОбъектОбычныйВвод("ЛентаКлиента", ВыбранныйЭлемент.Значение, ЭтотОбъект);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДобавитьФайл(Команда)
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ДобавитьФайлЗавершение", ЭтотОбъект);
	CRM_ЛентаСобытийКлиент.ДобавитьВложение(ЭтотОбъект, ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДобавитьФайлЗавершение(Успех, ДополнительныеПараметры) Экспорт
	
	Если Не Успех Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ОбновитьЭлементыВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_БыстрыйВвод_УдалитьФайл(Команда)
	
	ИдентификаторСсылкиВложения = СтрЗаменить(Команда.Имя, "БыстрыйВвод_Удалить_СсылкаВложения_", "");
	
	CRM_ЛентаСобытийКлиент.УдалитьВложение(ЭтотОбъект, ИдентификаторСсылкиВложения);
	
	БыстрыйВвод_ОбновитьЭлементыВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВставитьФайлИзБуфера(Команда)
	
	CRM_ЛентаСобытийКлиент.ВставитьФайлИзБуфераОбмена(ЭтотОбъект);
	БыстрыйВвод_ОбновитьЭлементыВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКомандыМассив = СтрРазделить(Команда.Имя, "_");
	CRM_ЛентаСобытийКлиент.СоздатьОбъектОбычныйВвод("ЛентаКлиента", ИмяКомандыМассив[1], ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентов

&НаКлиенте
Процедура ПроверитьКонтрагента(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентаПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами	
	
КонецПроцедуры

#КонецОбласти

#Область CRM_Модуль

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	СтруктураОбъекта = Новый Структура("Ссылка", КонтрагентПартнера);
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, СтруктураОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПроцессов()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		ЭтотОбъект, "ДеревоВсеПроцессы") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.ДеревоВсеПроцессы.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
	|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
	|	ЗадачаИсполнителя.СрокИсполнения КАК СрокИсполнения
	|ПОМЕСТИТЬ ЗадачиПоБизнесПроцессу
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс.Партнер = &Партнер
	|	И НЕ ЗадачаИсполнителя.БизнесПроцесс.Завершен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
	|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
	|	ЗадачаИсполнителя.СрокИсполнения КАК СрокИсполнения
	|ПОМЕСТИТЬ ДанныеЗадач
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс.ВедущаяЗадача.БизнесПроцесс В
	|			(ВЫБРАТЬ
	|				ЗадачиПоБизнесПроцессу.БизнесПроцесс
	|			ИЗ
	|				ЗадачиПоБизнесПроцессу)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиПоБизнесПроцессу.Ссылка,
	|	ЗадачиПоБизнесПроцессу.БизнесПроцесс,
	|	ЗадачиПоБизнесПроцессу.СрокИсполнения
	|ИЗ
	|	ЗадачиПоБизнесПроцессу КАК ЗадачиПоБизнесПроцессу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЗадач.Ссылка КАК Ссылка,
	|	ДанныеЗадач.БизнесПроцесс КАК БизнесПроцесс
	|ИЗ
	|	ДанныеЗадач КАК ДанныеЗадач
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеЗадач.СрокИсполнения УБЫВ
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
	|ПО
	|	БизнесПроцесс";
	
	Запрос.УстановитьПараметр("Партнер", Объект.Ссылка);
	
	Если ПоказыватьЗавершенныеБП Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ ЗадачаИсполнителя.БизнесПроцесс.Завершен", "");
	КонецЕсли;
	
	АктивныхПроцессов = 0;
	ВыборкаБП = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаБП.Следующий() Цикл
		НовыйБП = ЭтотОбъект.ДеревоВсеПроцессы.ПолучитьЭлементы().Добавить();
		ТекБизнесПроцесс = ВыборкаБП.БизнесПроцесс;
		Если ЗначениеЗаполнено(ТекБизнесПроцесс) Тогда
			НовыйБП.Наименование = ТекБизнесПроцесс.Наименование;
		Иначе
			НовыйБП.Наименование = ВыборкаБП.БизнесПроцесс;
		КонецЕсли;
		НовыйБП.Ссылка = ТекБизнесПроцесс;
		НовыйБП.Выполнена = ТекБизнесПроцесс.Завершен;
		Если НЕ ТекБизнесПроцесс.Завершен Тогда
			АктивныхПроцессов = АктивныхПроцессов + 1;
		КонецЕсли;
		Выборка = ВыборкаБП.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяЗадача = НовыйБП.ПолучитьЭлементы().Добавить();
			Задача = Выборка.Ссылка;
			НоваяЗадача.Ссылка = Задача;
			НоваяЗадача.Этап = Задача.CRM_ТочкаМаршрута;
			НоваяЗадача.Исполнитель = Задача.Исполнитель;
			НоваяЗадача.ДатаИсполнения = ПолучитьПредставлениеДаты(Задача.ДатаИсполнения, Истина);
			НоваяЗадача.ПринятаКИсполнению = Задача.ПринятаКИсполнению;
			НоваяЗадача.Просрочена = ?(Задача.СрокИсполнения < НачалоДня(ТекущаяДатаСеанса()), Истина, Ложь);
			НоваяЗадача.СрокИсполнения = ПолучитьПредставлениеДаты(Задача.СрокИсполнения);
			НоваяЗадача.Выполнена = Задача.Выполнена;
		КонецЦикла;
	КонецЦикла;
	Элементы.ГруппаБизнесПроцессы.Заголовок = НСтр("ru = 'Бизнес-процессы'; en = 'Business Processes'") +
		" (" + Строка(АктивныхПроцессов) + ")";
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеДаты(ДатаЗадачи, ЭтоДатаИсполнения = Ложь)
	
	СекундВСутках = 86400;
	ДатаСегодня = НачалоДня(ТекущаяДатаСеанса());
	ДатаВчера = ДатаСегодня - СекундВСутках;
	ДатаЗавтра = ДатаСегодня + СекундВСутках;
	ТекущийГод = Год(ДатаСегодня);
	
	ДатаБезВремениПредыдущая = Дата("00010101");
	ПредставлениеДня = "";
	
	ТипОбъектаПредыдущий = "";
	БлокОбъектПредыдущий = Неопределено;
	
	ВыведенЗаголовокЗапланировано = Ложь;
	ВыведенЗаголовокЗакрепленныеОбъекты = Ложь;
	
	НадписьПоказать = Неопределено;
	НадписьСкрыть = Неопределено;
	
	// Вывод сделан так исходя из необходимости вывести ленту за один обход выборки без итогов и группировок.
	ДатаБезВремени = НачалоДня(ДатаЗадачи);
	
	Если ДатаБезВремени <> ДатаБезВремениПредыдущая Тогда
		
		Если ДатаБезВремени = ДатаСегодня Тогда
			ПредставлениеДня = НСтр("ru='Сегодня';en='Today'");
		ИначеЕсли ДатаБезВремени = ДатаВчера Тогда
			ПредставлениеДня = НСтр("ru='Вчера';en='Yesterday'");
		ИначеЕсли ДатаБезВремени = ДатаЗавтра Тогда
			ПредставлениеДня = НСтр("ru='Завтра';en='Tomorrow'");
		Иначе
			Если Год(ДатаБезВремени) = ТекущийГод Тогда
				ПредставлениеДня = ТРег(Формат(ДатаБезВремени, "ДФ='d MMMM'"));
			Иначе
				ПредставлениеДня = ТРег(Формат(ДатаБезВремени, "ДФ='d MMMM yyyy'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеВремени = Формат(ДатаЗадачи, "ДФ=HH:mm");
	Если ЗначениеЗаполнено(ПредставлениеДня) И Не ЭтоДатаИсполнения Тогда
		ПредставлениеДня = ПредставлениеДня + НСтр("ru=' до ';en=' to '") + ПредставлениеВремени;
	КонецЕсли;
	
	Возврат ПредставлениеДня;
	
КонецФункции

&НаСервере
Процедура ОбновитьМассивОбъектовСДопРеквизитами()
	
	МассивОбъектовСДопРеквизитами = Новый Массив;
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтейнерДопРеквизитовКонтакта");
	ДополнительныеПараметры.Вставить("НеУчитыватьЗависимости", Истина);
	ДополнительныеПараметры.Вставить("Объект", Контакт_Объект);
	МассивОбъектовСДопРеквизитами.Добавить(ДополнительныеПараметры);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("Объект", Объект);
	МассивОбъектовСДопРеквизитами.Добавить(ДополнительныеПараметры);
	
	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеСвойствами");
	МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, МассивОбъектовСДопРеквизитами);
	
	РазложитьДопРеквизитыПоКолонкам(МассивОбъектовСДопРеквизитами);
	ИзменитьСоставРеквизитов();
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ВывестиБизнесПроцессы()
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	ИмяДеревоВсеПроцессы = "ДеревоВсеПроцессы";
	
	РеквизитДеревоВсеПроцессы = Новый РеквизитФормы(ИмяДеревоВсеПроцессы, Новый ОписаниеТипов("ДеревоЗначений"));
	МассивДобавляемыхРеквизитов.Добавить(РеквизитДеревоВсеПроцессы);
	
	ТипыПоляСсылка = Новый Массив;
	ТипыПоляСсылка.Добавить(Тип("ЗадачаСсылка.ЗадачаИсполнителя"));
	ТипыПоляСсылка.Добавить(Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс"));
	РеквизитСсылка = Новый РеквизитФормы("Ссылка", Новый ОписаниеТипов(ТипыПоляСсылка), ИмяДеревоВсеПроцессы);
	МассивДобавляемыхРеквизитов.Добавить(РеквизитСсылка);
	
	ОписаниеТипаСтрока0 = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ПолеНаименование = Новый РеквизитФормы("Наименование", ОписаниеТипаСтрока0, ИмяДеревоВсеПроцессы);
	МассивДобавляемыхРеквизитов.Добавить(ПолеНаименование);
	
	ПолеЭтап = Новый РеквизитФормы("Этап", ОписаниеТипаСтрока0, ИмяДеревоВсеПроцессы);
	МассивДобавляемыхРеквизитов.Добавить(ПолеЭтап);
	
	ТипыПоляИсполнитель = Новый Массив;
	ТипыПоляИсполнитель.Добавить(Тип("СправочникСсылка.ВнешниеПользователи"));
	ТипыПоляИсполнитель.Добавить(Тип("СправочникСсылка.Пользователи"));
	ПолеНаименование = Новый РеквизитФормы("Исполнитель", Новый ОписаниеТипов(ТипыПоляИсполнитель), ИмяДеревоВсеПроцессы);
	МассивДобавляемыхРеквизитов.Добавить(ПолеНаименование);
	
	ПолеДатаИсполнения = Новый РеквизитФормы("ДатаИсполнения", ОписаниеТипаСтрока0, ИмяДеревоВсеПроцессы);
	ПолеДатаИсполнения.Заголовок = НСтр("ru = 'Дата исполнения'");
	МассивДобавляемыхРеквизитов.Добавить(ПолеДатаИсполнения);
	
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ПолеПринятаКИсполнению = Новый РеквизитФормы("ПринятаКИсполнению", ОписаниеТипаБулево, ИмяДеревоВсеПроцессы);
	МассивДобавляемыхРеквизитов.Добавить(ПолеПринятаКИсполнению);
	
	ПолеПросрочена = Новый РеквизитФормы("Просрочена", ОписаниеТипаБулево, ИмяДеревоВсеПроцессы);
	МассивДобавляемыхРеквизитов.Добавить(ПолеПросрочена);
	
	ПолеСрокИсполнения = Новый РеквизитФормы("СрокИсполнения", ОписаниеТипаСтрока0, ИмяДеревоВсеПроцессы);
	ПолеСрокИсполнения.Заголовок = НСтр("ru = 'Срок исполнения'");
	МассивДобавляемыхРеквизитов.Добавить(ПолеСрокИсполнения);
	
	ПолеВыполнена = Новый РеквизитФормы("Выполнена", ОписаниеТипаБулево, ИмяДеревоВсеПроцессы);
	МассивДобавляемыхРеквизитов.Добавить(ПолеВыполнена);
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	ГруппаБизнесПроцессы = Элементы.ГруппаБизнесПроцессы;
	
	ЭлементДеревоВсеПроцессы = Элементы.Добавить(ИмяДеревоВсеПроцессы, Тип("ТаблицаФормы"), ГруппаБизнесПроцессы);
	ЭлементДеревоВсеПроцессы.ПутьКДанным = ИмяДеревоВсеПроцессы;
	ЭлементДеревоВсеПроцессы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементДеревоВсеПроцессы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ЭлементДеревоВсеПроцессы.МножественныйВыбор = Ложь;
	ЭлементДеревоВсеПроцессы.ИзменятьСоставСтрок = Ложь;
	ЭлементДеревоВсеПроцессы.ИзменятьПорядокСтрок = Ложь;
	ЭлементДеревоВсеПроцессы.Отображение = ОтображениеТаблицы.Дерево;
	ЭлементДеревоВсеПроцессы.РежимВыделенияСтроки = РежимВыделенияСтрокиТаблицы.Строка;
	ЭлементДеревоВсеПроцессы.АвтоВводНовойСтроки = Ложь;
	ЭлементДеревоВсеПроцессы.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	ЭлементДеревоВсеПроцессы.ЧередованиеЦветовСтрок = Ложь;
	ЭлементДеревоВсеПроцессы.УстановитьДействие("Выбор", "ДеревоВсеПроцессыВыбор");
	ЭлементДеревоВсеПроцессы.УстановитьДействие("ПередНачаломДобавления", "ДеревоВсеПроцессыПередНачаломДобавления");
	ЭлементДеревоВсеПроцессы.УстановитьДействие("ПередНачаломИзменения", "ДеревоВсеПроцессыПередНачаломИзменения");
	
	НоваяГруппаКолонок = Элементы.Добавить("ДеревоВсеПроцессыГруппаКолонок", Тип("ГруппаФормы"), ЭлементДеревоВсеПроцессы);
	НоваяГруппаКолонок.Вид = ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппаКолонок.Группировка = ГруппировкаКолонок.ВЯчейке;
	НоваяГруппаКолонок.ОтображатьЗаголовок = Ложь;
	
	ТипПолеФормы = Тип("ПолеФормы");
	
	НовоеПоле = Элементы.Добавить("ДеревоВсеПроцессыНаименование", ТипПолеФормы, НоваяГруппаКолонок);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "ДеревоВсеПроцессы.Наименование";
	
	НовоеПоле = Элементы.Добавить("ДеревоВсеПроцессыЭтап", ТипПолеФормы, НоваяГруппаКолонок);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "ДеревоВсеПроцессы.Этап";
	НовоеПоле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
	НовоеПоле = Элементы.Добавить("ДеревоВсеПроцессыИсполнитель", ТипПолеФормы, ЭлементДеревоВсеПроцессы);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "ДеревоВсеПроцессы.Исполнитель";
	
	НовоеПоле = Элементы.Добавить("ДеревоВсеПроцессыСрокИсполнения", ТипПолеФормы, ЭлементДеревоВсеПроцессы);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "ДеревоВсеПроцессы.СрокИсполнения";
	
	НовоеПоле = Элементы.Добавить("ДеревоВсеПроцессыДатаИсполнения", ТипПолеФормы, ЭлементДеревоВсеПроцессы);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "ДеревоВсеПроцессы.ДатаИсполнения";
	
	НовоеПоле = Элементы.Добавить("ДеревоВсеПроцессыСсылка", ТипПолеФормы, ЭлементДеревоВсеПроцессы);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "ДеревоВсеПроцессы.Ссылка";
	НовоеПоле.Видимость = Ложь;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяДеревоВсеПроцессы);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоВсеПроцессы.Просрочена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(200, 0, 0));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяДеревоВсеПроцессы);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоВсеПроцессы.Выполнена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(120, 120, 120));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяДеревоВсеПроцессы);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоВсеПроцессы.ПринятаКИсполнению");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоВсеПроцессы.Выполнена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	
	ЗаполнитьДеревоПроцессов();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКомандыДобавленныхТаблиц()
	
	Если ВыведеныБизнесПроцессы Тогда
		НастроитьКомандыБизнесПроцессов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКомандыБизнесПроцессов()
	
	КомандыМеню = Элементы.ДеревоВсеПроцессы.КонтекстноеМеню.ПодчиненныеЭлементы;
	Для Каждого Элемент Из КомандыМеню Цикл
		Если СтрНайти(Элемент.Имя, "ДеревоВсеПроцессыКонтекстноеМенюИзменить") > 0
			Или СтрНайти(Элемент.Имя, "ДеревоВсеПроцессыПоискПоТекущемуЗначению") > 0 Тогда
			Элемент.Доступность = Ложь;
			Элемент.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВидПартнераНажатие(Команда)
	
	Если Объект.ЮрФизЛицо = ЭтоЧастноеЛицо Тогда
		СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
		Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	Иначе	
		Если ТипЗнч(Команда) = Тип("КомандаФормы") Тогда // Отработал обработчик, а не програмный вызов.
			Объект.ДатаРождения					= Дата("00010101");
			Объект.CRM_НапоминатьОДнеРождения	= Ложь;
			Объект.Пол							= ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	ИзменитьВидПартнераНаСервере(СтрЗаменить(Команда.Имя, "Команда", ""));
	
	// +CRM_Модуль
	//// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	// ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	//// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Элементы.ГруппаРедактированиеФИО.Скрыть();
	
	ПартнерЧастноеЛицо = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо");
	
	Элементы.Пол.Доступность                             = ПартнерЧастноеЛицо;
	Элементы.ДатаРождения.Доступность                    = ПартнерЧастноеЛицо;
	Элементы.ВариантОтправкиЭлектронногоЧека.Доступность = ПартнерЧастноеЛицо;
	
	CRM_ВидПартнераПриИзменении(Команда);
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		УстановитьРеквизитыПроверкиКонтрагента(ЭтотОбъект);
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	КонецЕсли;
	// +CRM_Модуль
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	// +CRM_Модуль
	// Если ОтключитьЗаполнениеПоИНН <> Неопределено Тогда
	//	Возврат;
	// КонецЕсли;
	//
	// Если НЕ ЗначениеЗаполнено(Объект.CRM_ИНН) Тогда
	//	ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено';en='The field ""TIN"" is empty'"));
	//	ТекущийЭлемент = Элементы.ИНН;
	//	Возврат;
	// КонецЕсли;
	//
	// Если ЗначениеЗаполнено(Объект.Наименование) 
	//	ИЛИ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
	//	ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?';en='Reload the current account?'");
	//	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект);
	//	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	// Иначе
	//	ВыполнитьЗаполнениеРеквизитовПоИНН();
	// КонецЕсли;
	//// ИнтернетПоддержкаПользователей.СПАРКРиски
	// ИндексыСПАРКРиски = Неопределено;
	// ОбновитьОтображениеИндексыСПАРК();
	//// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	//// +CRM
	//// CRM_КлиентыКлиент.ЗаполнитьКППпоИНН(Объект.CRM_ИНН, Объект.CRM_КПП, Ложь, УникальныйИдентификатор);
	//// -CRM
	Подключаемый_ВыполнитьКомандуЛокализации(Команда);
	ПодключитьОбработчикОжидания("ПолучитьДанныеРуководителя", 1);
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ИндексыСПАРКРиски = Неопределено;
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	// +CRM_Модуль
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКПП(Команда)
	// +CRM_Модуль
	// CRM_КлиентыКлиент.ЗаполнитьКППпоИНН(Объект.CRM_ИНН, Объект.CRM_КПП, Ложь, УникальныйИдентификатор);
	CRM_КлиентыКлиент.ЗаполнитьКППпоИНН(ИНН, КПП, Ложь, УникальныйИдентификатор);
	// -CRM_Модуль
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСегментовЗапретаОтгрузки(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к запрету отгрузки возможен только после записи данных.
		|Данные будут записаны.'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытьФормуСегментовЗапретаОтгрузкиЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаСегментовЗапретаОтгрузки", Новый Структура("Партнер", Объект.Ссылка));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСегментовЗапретаОтгрузкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        ЭлементЗаписан = Записать();
    Исключение
        Возврат;
    КонецПопытки;
    
    Если Не ЭлементЗаписан Тогда
        Возврат;
    КонецЕсли;
    
    ОткрытьФорму("Справочник.Партнеры.Форма.ФормаСегментовЗапретаОтгрузки", Новый Структура("Партнер", Объект.Ссылка));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЛокализации(Команда)
	
	Если Команда.Имя = "ЗаполнитьПоНаименованиюПоДаннымЕдиныхГосРеестров" Тогда
		ИнициализацияКонтактнойИнформации();
	КонецЕсли;
	
	ПартнерыИКонтрагентыЛокализацияКлиент.ВыполнитьКомандуЛокализации(Команда, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыполнениеКомандыЛокализации(ИмяКоманды, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ТребуетсяВызовСервера Тогда
		ПродолжитьВыполнениеКомандыЛокализацииНаСервере(ИмяКоманды, ДополнительныеПараметры.ПараметрыОбработки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПродолжитьВыполнениеКомандыЛокализацииНаСервере(ИмяКоманды, ПараметрыОбработки)
	
	ПартнерыИКонтрагентыЛокализация.ВыполнитьКомандуЛокализации(ЭтотОбъект, ИмяКоманды, ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРеквизитов(Команда)
	
	УсловияОтбора = Новый Структура("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии", УсловияОтбора, Истина);
	ОткрытьФорму("Отчет.CRM_ИсторияРеквизитов.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ФамилияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если (Ожидание > 0) И НЕ ПустаяСтрока(Текст)  Тогда
		ПолучитьДанныеВыбораФИОНаСервере(Текст,Истина,,ДанныеВыбора,СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИмяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если (Ожидание > 0) И НЕ ПустаяСтрока(Текст)  Тогда
		ПолучитьДанныеВыбораФИОНаСервере(Текст,,Истина,ДанныеВыбора,СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОтчествоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если (Ожидание > 0) И НЕ ПустаяСтрока(Текст)  Тогда
		ПолучитьДанныеВыбораФИОНаСервере(Текст,,,ДанныеВыбора,СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Разделы_ПереключитьБизнесПроцессы(Команда = Неопределено)
	
	Если Не ВыведеныБизнесПроцессы Тогда
		ВывестиБизнесПроцессы();
	КонецЕсли;
	
	ВыведеныБизнесПроцессы = Истина;
	НастроитьКомандыДобавленныхТаблиц();
	
	ВидимостьБизнесПроцессов = Элементы.ГруппаБизнесПроцессы.Видимость;
	Элементы.ГруппаБизнесПроцессы.Видимость = Не ВидимостьБизнесПроцессов;
	Если ВидимостьБизнесПроцессов Тогда
		Элементы.Разделы_ПереключитьБизнесПроцессы.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	Иначе
		Элементы.Разделы_ПереключитьБизнесПроцессы.Картинка = БиблиотекаКартинок.СтрелкаВниз;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыДеревоВсеПроцессы

&НаКлиенте
Процедура ДеревоВсеПроцессыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(,Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВсеПроцессыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВсеПроцессыПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область CRM_Модуль

&НаСервере
Процедура ЗаписатьКонтрагентаПартнера()
	
	СоздатьКонтрагента = КонтрагентПартнера.Пустая();
	
	Если СоздатьКонтрагента Тогда
		КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
	Иначе
		КонтрагентОбъект = КонтрагентПартнера.ПолучитьОбъект();
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, КонтрагентОбъект);
	
	КонтрагентОбъект.Наименование = Объект.Наименование;
	Если Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо И Не ПустаяСтрока(Объект.CRM_Имя + Объект.CRM_Фамилия + Объект.CRM_Отчество) Тогда
		КонтрагентОбъект.НаименованиеПолное = СокрЛП(Объект.CRM_Фамилия + " " + Объект.CRM_Имя + " " + Объект.CRM_Отчество);
	Иначе
		КонтрагентОбъект.НаименованиеПолное = Объект.НаименованиеПолное;
	КонецЕсли;
	КонтрагентОбъект.НаименованиеМеждународное = НаименованиеМеждународное;
	КонтрагентОбъект.НаименованиеВТранскрипции = НаименованиеВТранскрипции;
	КонтрагентОбъект.Партнер                   = Объект.Ссылка;
	КонтрагентОбъект.ЮрФизЛицо                 = ЮрФизЛицо;
	КонтрагентОбъект.ОбособленноеПодразделение = ОбособленноеПодразделение;
	КонтрагентОбъект.СтранаРегистрации         = СтранаРегистрации;
	КонтрагентОбъект.РегистрационныйНомер      = РегистрационныйНомер;
	КонтрагентОбъект.НалоговыйНомер            = НалоговыйНомер;
	КонтрагентОбъект.ИНН                       = ИНН;
	
	КонтрагентОбъект.ИсторияНаименований.Загрузить(ИсторияНаименований.Выгрузить());
	
	Если Не ЗначениеЗаполнено(ГоловнойКонтрагент) И Не ОбособленноеПодразделение Тогда
		
		Если СоздатьКонтрагента Тогда
			НоваяСсылка = Справочники.Контрагенты.ПолучитьСсылку();
			КонтрагентОбъект.УстановитьСсылкуНового(НоваяСсылка);
			ГоловнойКонтрагент = КонтрагентОбъект.ПолучитьСсылкуНового();
		Иначе
			ГоловнойКонтрагент = КонтрагентПартнера;
		КонецЕсли;
		
	КонецЕсли;
	КонтрагентОбъект.ГоловнойКонтрагент = ГоловнойКонтрагент;
	ПартнерыИКонтрагенты.ЗаполнитьКонтактнуюИнформациюКонтрагентаПартнера(КонтрагентОбъект, ЭтотОбъект, Объект.КонтактнаяИнформация);
	ПартнерыИКонтрагентыЛокализация.ПередЗаписьюКонтрагентаПартнера(КонтрагентОбъект, ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереКонтрагент(ЭтотОбъект, КонтрагентОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	КонтрагентОбъект.Записать();
	
	КонтрагентПартнера = КонтрагентОбъект.Ссылка;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Если РезультатЗакрытия.Свойство("Результат") Тогда
			
			Если РезультатЗакрытия.Результат = "Продолжить" Тогда
				Если РезультатЗакрытия.Свойство("Объект") Тогда
					Если ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.Партнеры") Тогда
						НайденныйКлиент	= РезультатЗакрытия.Объект;
						Если Элементы.ГруппаРеквизитыКонтакта.Видимость И ЗначениеЗаполнено(Контакт_Объект.Наименование) Тогда
							СоздатьКонтактФормыРегистрацииНаСервере(НайденныйКлиент); // При привязке в другому Клиенту не нужно делать Контакт основным
							ОповеститьОСозданииКонтактаФормыРегистрации();
						Иначе
							СтруктураНового = Новый Структура("Наименование, АдресПочты", Объект.Наименование, "");
							ПараметрыСоздания = Новый Структура("Владелец, ПараметрыНового", НайденныйКлиент, СтруктураНового);
							ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", ПараметрыСоздания);
						КонецЕсли;
						
						Модифицированность = Ложь;
						Закрыть();
						Возврат;
					КонецЕсли;
				КонецЕсли;	
			ИначеЕсли РезультатЗакрытия.Результат = "Перейти" Тогда
				Если РезультатЗакрытия.Свойство("Объект") И ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.Партнеры") Тогда
					Модифицированность = Ложь;
					ВладелецУправляемаяФорма = ТипЗнч(ЭтотОбъект.ВладелецФормы) = Тип("ФормаКлиентскогоПриложения");
					Если ВладелецУправляемаяФорма И СтрНайти(ВладелецФормы.ИмяФормы, "ФормаСписка") Тогда
						Попытка
							ЭлементСписок = ВладелецФормы.Элементы.Найти("Список");
							Если НЕ ЭлементСписок = Неопределено Тогда 
								ЭлементСписок.ТекущаяСтрока = РезультатЗакрытия.Объект; 
							КонецЕсли;	
						Исключение
							ФормаСписка = ПолучитьФорму("Справочник.Партнеры.ФормаСписка");
							ФормаСписка.Открыть();
							ЭлементСписок = ФормаСписка.Элементы.Найти("Список");
							Если НЕ ЭлементСписок = Неопределено Тогда 
								ЭлементСписок.ТекущаяСтрока = РезультатЗакрытия.Объект; 
							КонецЕсли;	
						КонецПопытки;
					ИначеЕсли ТипЗнч(ЭтотОбъект.ВладелецФормы) = Тип("ПолеФормы") Тогда
						ОповеститьОВыборе(РезультатЗакрытия.Объект);
					КонецЕсли;
					Если Открыта() Тогда
						Закрыть();
					КонецЕсли;
				КонецЕсли;
				Возврат;
				
			Иначе
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	Записать(Новый Структура("ЗаписыватьБезПроверки", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЗапретаОтгрузки()
	
	Если ИспользоватьЗапретОтгрузки И Объект.Клиент Тогда
		Если ОтгрузкаЗапрещена Тогда
			Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаЗапрещена;
		Иначе
			Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаРазрешена;
		КонецЕсли;
	Иначе
		Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаПустая;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияНаименованийПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт

	Перем ТекстСообщения;
	
	ОчиститьСообщения();
	
	Если ТипЗнч(Результат) = Тип("Структура") 
		И Результат.Свойство("ИсторияНаименований") Тогда
		
		Модифицированность = Истина;
		НоваяИсторияНаименований = Результат.ИсторияНаименований;
		НоваяИсторияНаименований.Сортировать("Период");
	
		ИсторияНаименований.Очистить();
		Если НоваяИсторияНаименований.Количество() > 1 Тогда
			Для Каждого СтрокаИстории Из НоваяИсторияНаименований Цикл
				ЗаписьИстории = ИсторияНаименований.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьИстории, СтрокаИстории);
			КонецЦикла;
		КонецЕсли;
		
		НовоеТекущееНаименование = НоваяИсторияНаименований[НоваяИсторияНаименований.Количество()-1].СокращенноеНаименование;
		
		Если НовоеТекущееНаименование <> Объект.НаименованиеПолное Тогда
			
			Объект.НаименованиеПолное = НовоеТекущееНаименование;
			
		КонецЕсли;
		
		УправлениеДоступностью(ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьЗапретОтгрузки(Партнер, ОтгрузкаЗапрещена)
	
	ОтгрузкаЗапрещена = СегментыСервер.ПартнерВходитВСегментыЗапретаОтгрузки(Партнер);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовок()

	Если Объект.Ссылка.Пустая() Тогда
		
		Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
			Заголовок = НСтр("ru = 'Контрагент (создание)'");
		Иначе
			Заголовок = НСтр("ru = 'Партнер (создание)'");
		КонецЕсли;	
		
	Иначе
		
		Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (Контрагент)'"), Объект.Наименование);
		Иначе
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (Партнер)'"), Объект.Наименование);
		КонецЕсли; 	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		ПартнерыИКонтрагентыЛокализация.УстановитьУсловноеОформлениеКонтрагент(ЭтотОбъект);
	Иначе
		
		//
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГруппаДоступа.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуютсяОграниченияДоступаНаУровнеЗаписей");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаРождения.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Пол.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЮрФизЛицо");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПоВидуДеятельности()
	
	ПолеКД = Новый ПолеКомпоновкиДанных(Элементы.ВидыДеятельности.Имя);
	Элемент = Неопределено;
	Для Каждого ЭлементУО ИЗ УсловноеОформление.Элементы Цикл
		Для Каждого ПолеУО Из  ЭлементУО.Поля.Элементы Цикл
			Если ПолеУО.Поле = ПолеКД Тогда
				Элемент = ЭлементУО;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;
	Если Элемент = Неопределено Тогда
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = ПолеКД;
	КонецЕсли;	

	ПолеКДОтбора = Новый ПолеКомпоновкиДанных("Объект.CRM_ВидыДеятельности.ВидДеятельности");
	ОтборЭлемента = Неопределено;
	Для Каждого ЭлементОтбора ИЗ Элемент.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = ПолеКДОтбора Тогда
			ОтборЭлемента = ЭлементОтбора;
		КонецЕсли;	
	КонецЦикла;
	
	Если ОтборЭлемента = Неопределено Тогда
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = ПолеКДОтбора;
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	ОтборЭлемента.ПравоеЗначение = Объект.CRM_ОсновнаяОтрасль;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,
		, 10, Истина, Ложь, Ложь,
		Ложь));
	
	// Оформление элемента ДеревоВсеПроцессы
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоВсеПроцессы");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоВсеПроцессы.Просрочена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(200, 0, 0));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоВсеПроцессы");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоВсеПроцессы.Выполнена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(120, 120, 120));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоВсеПроцессы");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоВсеПроцессы.ПринятаКИсполнению");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоВсеПроцессы.Выполнена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	
	РезультатВыполнения = ПартнерыИКонтрагентыЛокализацияВызовСервера.ФоновоеЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища);
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ПартнерыИКонтрагентыЛокализацияКлиент.ВыполнитьЗаполнениеРеквизитовПоИНН(ЭтотОбъект, РезультатВыполнения.РеквизитыКонтрагента);
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРеквизитыПроверкиКонтрагента(Форма)
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		
		Форма.РеквизитыПроверкиКонтрагентов.ЮрФизЛицо          = Форма.ЮрФизЛицо;
		
		Форма.РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо =
			(Форма.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") 
			Или Форма.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент"));
			
		Форма.РеквизитыПроверкиКонтрагентов.ЭтоИностранныйКонтрагент =
			Форма.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент")
			Или Форма.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо");
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СделатьОтрасльОсновной(Команда)
	ТекСтрока = Элементы.ВидыДеятельности.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Объект.CRM_ОсновнаяОтрасль = ТекСтрока.ВидДеятельности;
		УстановитьУсловноеОформлениеПоВидуДеятельности();
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнятьПоискДублейПриЗаписиПартнера()
	
	Возврат Константы.CRM_ВыполнятьПоискДублейПриЗаписиПартнера.Получить();
	
КонецФункции

&НаСервере
Функция СоздатьСтруктуруПоиска(СтруктураОбъекта)
	
	СтруктураПоиска = Новый Структура;
	
	ЗначениеХранилища = Константы.CRM_РеквизитыПоискаДублейПартнеров.Получить();
	РеквизитыПоиска = ЗначениеХранилища.Получить();
	Если РеквизитыПоиска <> Неопределено Тогда
		Если ТипЗнч(РеквизитыПоиска) = Тип("СписокЗначений") Тогда
			Для Каждого СтрокаСписка Из РеквизитыПоиска Цикл
				Если СтрокаСписка.Пометка Тогда	
					Значение = СтрокаСписка.Значение;
					ТочкаСЗапятой = СтрНайти(Значение, ";");
					
					Ключ = Сред(Значение,1,ТочкаСЗапятой-1);
					СтруктураПоиска.Вставить(Ключ, Сред(Значение,ТочкаСЗапятой+1));
					Если Ключ = "CRM_ИНН" Тогда
						СтруктураОбъекта.Вставить("CRM_ИНН", ИНН);
					ИначеЕсли Ключ = "Наименование" Или Ключ = "НаименованиеПолное" Тогда
						СтруктураОбъекта.Вставить(Ключ, Объект[Ключ]);	
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// +CRM_Модуль
	Для Каждого Стр Из ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"] Цикл
		Представление = Стр.Представление;
		Если ПустаяСтрока(Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			Если СтруктураПоиска.Свойство("Контакт_АдресЭлектроннойПочты") Тогда
				СтруктураОбъекта.Вставить("Контакт_АдресЭлектроннойПочты", Представление);
			КонецЕсли;
		ИначеЕсли Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			Если СтруктураПоиска.Свойство("Контакт_Адрес") Тогда
				СтруктураОбъекта.Вставить("Контакт_Адрес", Представление);
			КонецЕсли;
		ИначеЕсли Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон ИЛИ Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
			Если СтруктураПоиска.Свойство("Контакт_Телефон") Тогда
				СтруктураОбъекта.Вставить("Контакт_Телефон", Представление);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	// -CRM_Модуль
	
	Возврат СтруктураПоиска;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьДублиПартнеров(Знач Партнер, Знач СтруктураПоиска, Знач СписокКонтактов, Знач ТочноеСоответствие)
	
	// +CRM_Модуль
	// Выборка = CRM_КлиентыСервер.НайтиДубли(Партнер, СтруктураПоиска, СписокКонтактов, ТочноеСоответствие);
	Выборка = CRM_КлиентыСервер.НайтиДублиПартнеров(Партнер, СтруктураПоиска);
	// -CRM_Модуль
	Если Выборка <> Неопределено И Выборка.Количество()>0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)
		
	ПартнерыИКонтрагентыЛокализацияКлиентСервер.УправлениеЭлементамиЮридическихРеквизитов(Форма);
	ПартнерыИКонтрагентыЛокализацияКлиентСервер.УправлениеДоступностьюКонтрагент(Форма);
	
	//ПартнерыИКонтрагентыЛокализацияКлиентСервер.ОбновитьСтрокиИсторииНаименований(Форма.ИсторияНаименований,
	//	Форма.ПереходКИсторииНаименования,
	//	Форма.ЦветГиперссылки);
	СамообслуживаниеКлиентСервер.УправлениеСтраницамиЮрФизЛицоПриИзменении(Форма, Форма.ЮрФизЛицо);

	Форма.Элементы.НаименованиеПолноеКомпания.ТолькоПросмотр    = Форма.ИсторияНаименований.Количество() > 1;
	//Форма.Элементы.НаименованиеПолноеЧастноеЛицо.ТолькоПросмотр = Форма.ИсторияНаименований.Количество() > 1;
	
	Если Форма.CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		
		ПартнерыИКонтрагентыЛокализацияКлиентСервер.ОбновитьСтрокиИсторииНаименований(Форма.ИсторияНаименований,
			Форма.ПереходКИсторииНаименования,
			Форма.ЦветГиперссылки);
		
		Форма.Элементы.КПП.ТолькоПросмотр                           = Форма.ИсторияКПП.Количество() > 1;
		Форма.Элементы.НаименованиеПолное.ТолькоПросмотр    = Форма.ИсторияНаименований.Количество() > 1;
		
	КонецЕсли;	
	
	//Страна регистрация видна только в том случае, когда контрагент не является резидентом РФ.
	//В противном случае - и для физ лиц и для ИП и для юр лиц страна регистрации всегда Россия.
	Форма.Элементы.ГруппаСтраницыДанныхРегистрацииКонтрагента.ТекущаяСтраница = 
		?(Форма.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент"),
		Форма.Элементы.ГруппаСтраницаИностраннойРегистрации, Форма.Элементы.ЛокализацияГруппаСтраницаРоссийскогоКонтрагента);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииИЧтенииНаСервере()
	
	ПартнерыИКонтрагентыЛокализация.ПриЧтенииСозданииНаСервереКонтрагент(ЭтотОбъект);
	ПравоИзмененияОбъекта = ПравоДоступа("Изменение", Метаданные.Справочники.Партнеры);
	
	Если ОбособленноеПодразделение Тогда
		ВидКонтрагента = "ОбособленноеПодразделение";
	ИначеЕсли ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		ВидКонтрагента = ОбщегоНазначения.ИмяЗначенияПеречисления(ЮрФизЛицо);
	КонецЕсли;
	
	УправлениеДоступностью(ЭтотОбъект);
	УстановитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ВидПартнераПриИзменении(Элемент)
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	УстановитьВидимостьРеквизитовКИ();
	УстановитьВидимостьРеквизитов();
	
КонецПроцедуры

// +CRM_Модуль
&НаСервере
Процедура КоманднаяПанельСкрытьДополнительныеКоманды(ЭлементФормы)
	
	ЭлементыНаУдаление = Новый Массив();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЭлементыНаУдаление, ЭлементФормы.ПодчиненныеЭлементы);
	
	Для ИндексЭлемента = 0 По ЭлементыНаУдаление.Количество() - 1 Цикл
		
		Элемент = ЭлементыНаУдаление[ИндексЭлемента];
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			КоманднаяПанельСкрытьДополнительныеКоманды(Элемент);
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = Тип("КнопкаФормы") И Элемент.ТолькоВоВсехДействиях = Истина Тогда
			Элемент.Видимость = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыФизическогоЛицаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Физлицо", Объект.Ссылка));
		ОткрытьФорму("РегистрСведений.ДокументыФизическихЛиц.Форма.ДокументыФизическогоЛица",
		             ПараметрыФормы,
		             ЭтотОбъект,
		             КлючУникальности);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьДокументыФизическогоЛицаЗавершение()
// -CRM_Модуль

&НаСервере
Процедура УстановитьВидимостьЦенообразования()
	
	ВидимостьЦенообразования = ИспользоватьНесколькоВидовЦен 
												И Объект.Клиент
												И ИспользуетсяЦенообразование25
												И Не ИспользоватьСоглашенияСКлиентами;
	
	Элементы.ГруппаЦенообразование.Видимость = ВидимостьЦенообразования;
	Элементы.ГруппаОбщийВидЦен.Видимость = ВидимостьЦенообразования;
	Элементы.ГруппаИндивидуальныйВидЦен.Видимость = ВидимостьЦенообразования;
	Элементы.ГиперссылкаПерейтиПрайсЛист.Видимость = ВидимостьЦенообразования;
	Элементы.ГиперссылкаПерейтиИсторияИзмененияЦен.Видимость = ВидимостьЦенообразования;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьДоступностьЭлементовНастройкиОбщегоВидаЦен(Форма)
	
	Форма.Элементы.ВидЦен.Доступность = (Форма.ИспользоватьОбщийВидЦен И Не Форма.Элементы.ИспользоватьОбщийВидЦен.ТолькоПросмотр);
	
КонецПроцедуры

&НаСервере
Функция ОтключитьИндивидуальныйВидЦенСервер()
	
	РезультатОтключения = Справочники.ВидыЦен.ОтключитьИндивидуальныйВидЦен(Объект.ИндивидуальныйВидЦены);

	Если РезультатОтключения.Результат Тогда
		
		Объект.ИндивидуальныйВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
		ОбновитьИндивидуальныйВидЦеныПредставление();
		
	КонецЕсли;
		
	Возврат РезультатОтключения;
	
КонецФункции

&НаСервере
Функция НайтиИндивидуальныйВидЦенСервер()
	
	РезультатПоиска = Справочники.ВидыЦен.НайтиИндивидуальныйВидЦенСервер(Объект.Ссылка);
	
	Если РезультатПоиска.Результат Тогда
		Объект.ИндивидуальныйВидЦены = РезультатПоиска.Ссылка;
		ОбновитьИндивидуальныйВидЦеныПредставление();
	КонецЕсли;
			
	Возврат РезультатПоиска;
	
КонецФункции

&НаСервере
Процедура ОбновитьИндивидуальныйВидЦеныПредставление()
	Если ЗначениеЗаполнено(Объект.ИндивидуальныйВидЦены) Тогда
		МассивТекстов = Новый Массив;

		МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Индивидуальный вид цены';
																|en = 'Special price type'")));
		
		МассивТекстов.Добавить(" (");
		МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'настроить';
																|en = 'configure'"),,,,"ОткрытьИВЦ"));
		МассивТекстов.Добавить(")");
		
	Иначе
		МассивТекстов = Новый Массив;
		МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Индивидуальный вид цены (не настроен)';
																|en = 'Special price type (not configured)'")));

		МассивТекстов.Добавить(" (");
		МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'настроить';
																|en = 'configure'"),,,,"СоздатьИВЦ"));
		МассивТекстов.Добавить(")");
	КонецЕсли;
	
	ИндивидуальныйВидЦеныПредставление = Новый ФорматированнаяСтрока(МассивТекстов);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьДоступностьЭлементовНастройкиИндивидуальногоВидаЦен(Форма)
	
	Форма.Элементы.ИндивидуальныйВидЦеныПредставление.Доступность	= (Форма.ИспользоватьИндивидуальныйВидЦены 
												И Не Форма.Элементы.ИспользоватьИндивидуальныйВидЦены.ТолькоПросмотр)
												И Форма.РазрешеноСоздаватьВидыЦен;
	Форма.Элементы.ИспользоватьИндивидуальныйВидЦены.Доступность = Форма.РазрешеноСоздаватьВидыЦен;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПереходаПоГиперссылке(ИмяЭлемента, Гиперссылка = "")
	
	Если ИмяЭлемента = "ГиперссылкаПерейтиПрайсЛист" Тогда
		
		ВидыЦен = Новый Массив();
		ВидыЦен.Добавить(Объект.ВидЦен);
		ВидыЦен.Добавить(Объект.ИндивидуальныйВидЦены);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВидыЦен",  ВидыЦен);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Обработка.ПрайсЛист.Форма.Форма");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиИсторияИзмененияЦен" Тогда
		
		ВидыЦен = Новый Массив();
		ВидыЦен.Добавить(Объект.ВидЦен);
		ВидыЦен.Добавить(Объект.ИндивидуальныйВидЦены);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВидыЦен",  ВидыЦен);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		Если ИспользуетсяЦенообразование25 Тогда
			ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.ЦеныНоменклатуры25.Форма.ФормаСписка");
		Иначе	
			ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.ЦеныНоменклатуры.Форма.ФормаСписка");
		КонецЕсли;
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы", ПараметрыФормы);
			
	КонецЕсли;
	
	Если Не ПараметрыПереходаПоГиперссылке.Свойство("РежимОткрытияОкнаФормы") Тогда
		ПараметрыПереходаПоГиперссылке.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
	ПараметрыПереходаПоГиперссылке.Вставить("ИмяЭлемента", ИмяЭлемента);
	ПараметрыПереходаПоГиперссылке.Вставить("Гиперссылка", Гиперссылка);
	
	Возврат ПараметрыПереходаПоГиперссылке
КонецФункции

#КонецОбласти

&НаСервере
Процедура ВидимостьИДоступностьПоляПолныхЛет()
	Если НЕ ЗначениеЗаполнено(Объект.ДатаРождения) Тогда
		Элементы.КолвоПолныхЛет.Видимость = Ложь;
	Иначе
		КолвоПолныхЛет = НСтр("ru = 'Возраст'") + ": " + ВычислитьКолвоПолныхЛет();
		Элементы.КолвоПолныхЛет.Видимость = Истина;
	КонецЕсли;		 
КонецПроцедуры	

&НаСервере
Функция ВычислитьКолвоПолныхЛет()	
	РазницаВГодах = Год(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса())-Год(Объект.ДатаРождения);
	Если Месяц(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()) > Месяц(Объект.ДатаРождения) Тогда
		Возврат РазницаВГодах;	
	ИначеЕсли Месяц(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()) = Месяц(Объект.ДатаРождения) И
		День(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()) >= День(Объект.ДатаРождения) Тогда
		Возврат РазницаВГодах;
	Иначе 
		Возврат РазницаВГодах - 1;
	КонецЕсли;		
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьПолноеНаименование()
	
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
		Если Не ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
			ПравоваяФорма = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ПравоваяФормаКлиентаПоУмолчанию");
			Объект.НаименованиеПолное = ?(СокрЛП(ПравоваяФорма) = "" ,СокрЛП(Объект.Наименование),СокрЛП(ПравоваяФорма)+
				" """ + СокрЛП(Объект.Наименование)
				+ """");
		КонецЕсли;
	Иначе
		Объект.НаименованиеПолное = СокрЛП(Объект.Наименование);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокКонтактов()
	
	ВывестиКонтактныеЛицаПартнераНаСервере();
	
	Если CRM_ГруппаКЛПоказана Тогда
		Элементы["ГруппаСписокКЛ"].Показать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКонтактныеЛицаПартнераНаСервере()
	
	МассивТиповКИ = Новый Массив;
	МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	CRM_КлиентыСервер.ВывестиКонтактныеЛицаПартнера(ЭтотОбъект, Объект.Ссылка,
		Объект.CRM_ОсновноеКонтактноеЛицо, "ГруппаКонтакты",
		МассивТиповКИ, Истина);
	ЗаполнитьСписокВыбораВзаимодействиеПолучатель();
	
	СоздатьКнопкуСвернуть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораВзаимодействиеПолучатель()
	ТемпКонтактныеЛица = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактныхЛицКонтрагента(Объект.Ссылка);
	Элементы.БыстрыйВвод_ВзаимодействиеПолучатель.СписокВыбора.Очистить();
	Для Каждого ТемпСтрока Из ТемпКонтактныеЛица Цикл
		Элементы.БыстрыйВвод_ВзаимодействиеПолучатель.СписокВыбора.Добавить(ТемпСтрока.КонтактноеЛицо);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактноеЛицо(Ссылка)
	
	НовоеКЛ = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
	Если Ссылка.Владелец = Объект.Ссылка Тогда
		НовоеКЛ = Ссылка;
	КонецЕсли;
	
	Если НовоеКЛ = Объект.CRM_ОсновноеКонтактноеЛицо 
		Или (ЗначениеЗаполнено(Объект.CRM_ОсновноеКонтактноеЛицо) И ЗначениеЗаполнено(НовоеКЛ)) Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.CRM_ОсновноеКонтактноеЛицо = НовоеКЛ;
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлыЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.CRM_ПрисоединенныеФайлы",
					  ПараметрыФормы, ЭтотОбъект, Ложь, Неопределено);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФайлыЗавершение()

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанные(ОписаниеОповещенияОЗавершении)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВопросЗаписатьДанныеЗавершение", ЭтотОбъект, ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Данные еще не записаны.
					   |Действие возможно только после записи данных. Записать?'"), 
					   РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанныеЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Возвращает информацию о первичном интересе.
Функция ПолучитьПервичныйИнтерес(Партнер)
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсточникиПервичногоИнтересаСрезПоследних.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса,
		|	ИсточникиПервичногоИнтересаСрезПоследних.ИсточникПервичногоИнтереса КАК ИсточникПервичногоИнтереса,
		|	ИсточникиПервичногоИнтересаСрезПоследних.Партнер КАК Партнер
		|ИЗ
		|	РегистрСведений.ИсточникиПервичногоИнтереса.СрезПоследних(&Период, Партнер = &Партнер) КАК ИсточникиПервичногоИнтересаСрезПоследних
		|УПОРЯДОЧИТЬ ПО
		|	ИсточникиПервичногоИнтересаСрезПоследних.Период УБЫВ";
		
		Запрос.УстановитьПараметр("Партнер"	,Партнер);
		Запрос.УстановитьПараметр("Период"	,CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("КаналПервичногоИнтереса,ИсточникПервичногоИнтереса,Партнер",
	ПланыВидовХарактеристик.КаналыРекламныхВоздействий.ПустаяСсылка(),
	Неопределено,
	Справочники.Партнеры.ПустаяСсылка());
	
КонецФункции

&НаСервере
Процедура НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()
	
	// Определить канал и источник первичного интереса.
	РасцветкаВыбораПартнера();
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Если НЕ Объект.Ссылка.Пустая() Тогда
			Интерес = ПолучитьПервичныйИнтерес(Объект.Ссылка);
			КаналПервичногоИнтереса    = Интерес.КаналПервичногоИнтереса;
			ИсточникПервичногоИнтереса = Интерес.ИсточникПервичногоИнтереса;
			
			Элементы.ИсточникПервичногоИнтереса.Видимость = ЗначениеЗаполнено(ИсточникПервичногоИнтереса);
		КонецЕсли;
	Иначе
		Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция CRM_ПолучитьПотенциал()
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат 0;
	КонецЕсли;
	
	ТекПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ТекПодразделение = ТекПользователь.Подразделение;
	Если ЗначениеЗаполнено(ТекПодразделение) Тогда
		Возврат CRM_РасчетПотенциалаСервер.ПолучитьПотенциалКлиента(Объект.Ссылка, ТекПодразделение);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИнформационныеНадписи()
	
	// +CRM_Модуль
	// Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.CRM_РасчетыСПокупателями) Тогда
	//	Элементы.тЗадолженность.Видимость = Истина;
	//	СтруктураОтбора = Новый Структура("Контрагент", Объект.Ссылка);
	//	тзДолги = РегистрыНакопления.CRM_РасчетыСПокупателями.Остатки(,СтруктураОтбора,,"СуммаВал");
	//	Долг = тзДолги.Итог("СуммаВал");
	//	Элементы.тЗадолженность.Заголовок = ЗаголовокНадписиВзаиморасчетов(НСтр("ru = 'Должен нам'"), Долг, "Задолженность");
	// Иначе	
	//	Элементы.тЗадолженность.Видимость = Ложь;
	// КонецЕсли;
	
	Элементы.тЗадолженность.Видимость = (ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Элементы.тЗадолженность.Видимость Тогда
		
		Долг = 0;
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			ВалютаУчета = Константы.ВалютаУправленческогоУчета.Получить();
			Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
				ЭтотОбъект.Элементы.тЗадолженность.Видимость = Истина;
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Партнер", Объект.Ссылка);
				Запрос.Текст = "ВЫБРАТЬ
				|	РасчетыСКлиентамиОстатки.Валюта,
				|	РасчетыСКлиентамиОстатки.СуммаОстаток
				|ИЗ
				|	РегистрНакопления.РасчетыСКлиентами.Остатки КАК РасчетыСКлиентамиОстатки
				|ГДЕ
				|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам В
				|			(ВЫБРАТЬ
				|				АналитикаУчетаПоПартнерам.КлючАналитики
				|			ИЗ
				|				РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
				|			ГДЕ";
				Если ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(Объект.Ссылка) Тогда
					Запрос.Текст = Запрос.Текст + "						   
					|				АналитикаУчетаПоПартнерам.Партнер В ИЕРАРХИИ (&Партнер))";
				Иначе
					Запрос.Текст = Запрос.Текст + "						   
					|				АналитикаУчетаПоПартнерам.Партнер = &Партнер)";
				КонецЕсли;
				РасчетыСКлиентами = Запрос.Выполнить().Выгрузить();
				Для Каждого СтрокаРасчетов Из РасчетыСКлиентами Цикл
					Если СтрокаРасчетов.Валюта = ВалютаУчета Тогда
						Долг = Долг + СтрокаРасчетов.СуммаОстаток;		
					Иначе
						СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаРасчетов.Валюта, CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
						СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУчета,  CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
						Долг = Долг + РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СтрокаРасчетов.СуммаОстаток, СтруктураКурсовСтаройВалюты, СтруктураКурсовНовойВалюты);
					КонецЕсли;
				КонецЦикла;
			Иначе
				ЭтотОбъект.Элементы.тЗадолженность.Видимость = Ложь;
			КонецЕсли;	
			Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПоставщиками) Тогда
				ЭтотОбъект.Элементы.тЗадолженность.Видимость = Истина;
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Партнер", Объект.Ссылка);
				Запрос.Текст = "ВЫБРАТЬ
				|	РасчетыСПоставщикамиОстатки.Валюта,
				|	РасчетыСПоставщикамиОстатки.СуммаОстаток
				|ИЗ
				|	РегистрНакопления.РасчетыСПоставщиками.Остатки КАК РасчетыСПоставщикамиОстатки
				|ГДЕ
				|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам В
				|			(ВЫБРАТЬ
				|				АналитикаУчетаПоПартнерам.КлючАналитики
				|			ИЗ
				|				РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
				|			ГДЕ";
				Если ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(Объект.Ссылка) Тогда
					Запрос.Текст = Запрос.Текст + "						   
					|				АналитикаУчетаПоПартнерам.Партнер В ИЕРАРХИИ (&Партнер))";
				Иначе
					Запрос.Текст = Запрос.Текст + "						   
					|				АналитикаУчетаПоПартнерам.Партнер = &Партнер)";
				КонецЕсли;
				РасчетыСПоставщиками = Запрос.Выполнить().Выгрузить();
				Для Каждого СтрокаРасчетов Из РасчетыСПоставщиками Цикл
					Если СтрокаРасчетов.Валюта = ВалютаУчета Тогда
						Долг = Долг + СтрокаРасчетов.СуммаОстаток;		
					Иначе
						СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаРасчетов.Валюта, CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
						СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУчета,  CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
						Долг = Долг + РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СтрокаРасчетов.СуммаОстаток, СтруктураКурсовСтаройВалюты, СтруктураКурсовНовойВалюты);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.тЗадолженность.Заголовок = ЗаголовокНадписиВзаиморасчетов(?(Долг < 0, НСтр("ru = 'Должны мы'"), НСтр("ru = 'Должен нам'")), Долг, "Задолженность");
		
	КонецЕсли;	
	
	// -CRM_Модуль
	
	Если Элементы.тПотенциал.Видимость Тогда
		
		CRM_Потенциал = CRM_ПолучитьПотенциал();
		
		CRM_Потенциалы.Отбор.Клиент.ВидСравнения  = ВидСравнения;
		CRM_Потенциалы.Отбор.Клиент.Использование = Истина;
		CRM_Потенциалы.Отбор.Клиент.Значение      = Объект.Ссылка;
		НаборПотенциалов = РегистрыСведений.CRM_Потенциалы.СоздатьНаборЗаписей();
		НаборПотенциалов.Отбор.Клиент.ВидСравнения  = ВидСравнения.Равно;
		НаборПотенциалов.Отбор.Клиент.Использование = Истина;
		НаборПотенциалов.Отбор.Клиент.Значение      = Объект.Ссылка;
		НаборПотенциалов.Прочитать();
		CRM_Потенциалы.Загрузить(НаборПотенциалов.Выгрузить());
		
		ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
		Для Каждого ТекЗапись Из CRM_Потенциалы Цикл
			ТекЗапись.Валюта = ВалютаУпр;
			ТекЗапись.ПериодРасчета = ТекЗапись.Подразделение.CRM_ПериодРасчетаПотенциала;
		КонецЦикла;
	
		Элементы.тПотенциал.Заголовок = ЗаголовокНадписиВзаиморасчетов(НСтр("ru = 'Потенциал'"), CRM_Потенциал, "Потенциал");
		
	КонецЕсли;
	
	// +CRM_Модуль
	// Запрос = Новый Запрос();
	// Запрос.Текст = "ВЫБРАТЬ
	//               |	CRM_ПродажиОбороты.СтоимостьОборот КАК СтоимостьОборот
	//               |ИЗ
	//               |	РегистрНакопления.CRM_Продажи.Обороты(, , , Партнер = &Партнер) КАК CRM_ПродажиОбороты";
	//
	// Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "CRM_Продажи.Обороты(", "ВыручкаИСебестоимостьПродаж.Обороты(");
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, ".СтоимостьОборот", ".СуммаВыручкиСНДСРеглОборот");
	// КонецЕсли;
	// Запрос.УстановитьПараметр("Партнер", Объект.Ссылка);
	// ТабВзаиморасчетов = Запрос.Выполнить().Выгрузить();
	// СуммаВзаиморасчетов =  ТабВзаиморасчетов.Итог("СтоимостьОборот");
	
	// СуммаВзаиморасчетов = 0;
	
	// Элементы.тПродажи.Заголовок = ЗаголовокНадписиВзаиморасчетов(НСтр("ru = 'Продажи'"), СуммаВзаиморасчетов, "Продажи");
	// -CRM_Модуль
	
	
КонецПроцедуры

&НаСервере
Функция ЗаголовокНадписиВзаиморасчетов(Заголовок, Сумма, НавиСсылка)
	
	КрупныйШрифт = Новый Шрифт(, 10, Истина);
	МелкийШрифт  = Новый Шрифт(, 9, Истина);
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Заголовок + ": ", Новый Шрифт(, 10), ЦветаСтиля.CRM_ЦветДополнительногоТекста));
	
	Если ЗначениеЗаполнено(Сумма) Тогда
		СуммаСтрокой = Формат(?(Сумма<0, -Сумма, Сумма), "ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧН=0,00");
		ПозицияРазделителя = СтрНайти(СуммаСтрокой, ",");
		КомпонентыЧисла = Новый Массив;
		КомпонентыЧисла.Добавить(Новый ФорматированнаяСтрока(Лев(СуммаСтрокой, ПозицияРазделителя), КрупныйШрифт, ЦветаСтиля.CRM_ОсновнойГолубой));
		КомпонентыЧисла.Добавить(Новый ФорматированнаяСтрока(Сред(СуммаСтрокой, ПозицияРазделителя+1), МелкийШрифт, ЦветаСтиля.CRM_ОсновнойГолубой));
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(КомпонентыЧисла, , , , НавиСсылка));
	Иначе
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Нет'"), КрупныйШрифт, ЦветаСтиля.CRM_ОсновнойГолубой, , НавиСсылка));
	КонецЕсли;
	// КомпонентыФС.Добавить(" " + Константы.ВалютаУправленческогоУчета.Получить().СимвольноеПредставление);
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС);
	
КонецФункции

&НаСервере
Процедура УстановкаНастройкаВидимостиНаСервере(ПриСоздании = Ложь)
	Если Не ПриСоздании Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УстановитьВидимостьРеквизитовКИ();
	КонецЕсли;
	УстановитьВидимостьРеквизитов();
	Если Объект.ЮрФизЛицо = ЭтоЧастноеЛицо Тогда
		Элементы.Наименование.КнопкаВыбора = Истина;
	Иначе	
		Элементы.Наименование.КнопкаВыбора = Ложь;
		Элементы.НаименованиеВыбор.СписокВыбора.Очистить();
	КонецЕсли;
	Элементы.ОткрытьДокументыФизическогоЛица.Видимость = (Объект.ЮрФизЛицо = ЭтоЧастноеЛицо);
	Элементы.ГруппаРаботаетВОрганизациях.Видимость = (Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
КонецПроцедуры

&НаСервере
// Процедура устанавливает видимость реквизитов формы.
//
Процедура УстановитьВидимостьРеквизитов()
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		
		Элементы.СтраницыВидовПартнераИКонтрагента.ТекущаяСтраница = Элементы.СтраницаВидыКонтрагента;
		
		// Элементы.ПустаяДекорацияКонтактнаяИнформация.Видимость = Ложь;
		Элементы.Родитель.Видимость = Ложь;
		Элементы.НаименованиеМеждународное.Видимость = Истина;
		
		Элементы.ГруппаСтраницаИностраннойРегистрации.Видимость = (ВидКонтрагента ="ЮрЛицоНеРезидент");
		
		Элементы.ГруппаИндексыСПАРКРиски.Видимость = (ВидКонтрагента ="ЮрЛицо");
		Элементы.НДСпоСтавкам4и2.Видимость = НЕ (ВидКонтрагента = "ФизЛицо" ИЛИ ВидКонтрагента = "ЮрЛицоНеРезидент");
		
		Элементы.СтраницыНаименованиеПолноеКомпанияЧастноеЛицо.Видимость = Ложь;
		
	Иначе
		
		Элементы.СтраницыВидовПартнераИКонтрагента.ТекущаяСтраница = Элементы.СтраницаВидыПартнера;
		
		Элементы.ГруппаЮридическиеРеквизиты.Видимость = Ложь;
		Элементы.ДекорацияРазделительЮрРеквизитов.Видимость = Ложь;
		
		Элементы.ГруппаСтраницыДанныхРегистрацииКонтрагента.Видимость = Ложь;
		Элементы.ГруппаРезультатПроверкиКонтрагентов.Видимость = Ложь;
		Элементы.ГруппаГоловнойКонтрагент.Видимость = Ложь;
		Элементы.ГруппаИндексыСПАРКРиски.Видимость = Ложь;
		Элементы.ЛокализацияГруппаПредупреждениеГоловнойКонтрагент.Видимость = Ложь;
		Элементы.НДСпоСтавкам4и2.Видимость = Ложь;
		Элементы.ЗаполнитьПоНаименованиюПоДаннымЕдиныхГосРеестров.Видимость = Ложь;
		Элементы.НаименованиеПолное.Видимость = Ложь;
		Элементы.ПереходКИсторииНаименования.Видимость = Ложь;
		Элементы.ПереходКИсторииКПП.Видимость = Ложь;
		Элементы.НаименованиеМеждународное.Видимость = Ложь;
		
		Элементы.СтраницыНаименованиеПолноеКомпанияЧастноеЛицо.Видимость = (Объект.ЮрФизЛицо = ЭтоКомпания);
		
	КонецЕсли;
	
	Если (НЕ CRM_ИспользоватьПартнеровКакКонтрагентов И Объект.ЮрФизЛицо = ЭтоЧастноеЛицо) ИЛИ
		 (CRM_ИспользоватьПартнеровКакКонтрагентов И (ВидКонтрагента ="ФизЛицо" Или ВидКонтрагента ="ИндивидуальныйПредприниматель")) Тогда
		
		Элементы.Наименование.КнопкаВыбора = Истина;
		
		Элементы.ГруппаКПП.Видимость = Ложь;
		Элементы.ГруппаПереходКПП.Видимость = Ложь;
		ГруппировкаЭлементовКолонокЮЛ = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		
		// +CRM_Модуль
		Элементы.ОткрытьДокументыФизическогоЛица.Видимость = Истина;
		// -CRM_Модуль
	Иначе
		Элементы.Наименование.КнопкаВыбора = Ложь;
		Элементы.НаименованиеВыбор.СписокВыбора.Очистить();
		
		Элементы.ГруппаКПП.Видимость = Истина;
		Элементы.ГруппаПереходКПП.Видимость = Истина;
		ГруппировкаЭлементовКолонокЮЛ = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		// +CRM_Модуль
		Элементы.ОткрытьДокументыФизическогоЛица.Видимость = Ложь;
		// -CRM_Модуль
	КонецЕсли;
	
	Элементы.ГруппаКолонкаЮЛ1.Группировка = ГруппировкаЭлементовКолонокЮЛ;
	Элементы.ГруппаКолонкаЮЛ2.Группировка = ГруппировкаЭлементовКолонокЮЛ;
	
	Если Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
		Элементы.ГруппаФизЛицо.Видимость = Истина;
		Элементы.Пол.Видимость = Истина;
		Элементы.ГруппаОКПО.Видимость = Ложь;
		Элементы.ГруппаОГРН.Видимость = Ложь;
		Элементы.ГруппаРедактированиеФИО.Доступность = Истина;
	Иначе
		Элементы.ГруппаФизЛицо.Видимость = Ложь;
		Элементы.Пол.Видимость = Ложь;
		Элементы.ГруппаОКПО.Видимость = Истина;
		Элементы.ГруппаОГРН.Видимость = Истина;
		Элементы.ГруппаРедактированиеФИО.Доступность = (ВидКонтрагента ="ИндивидуальныйПредприниматель");
	КонецЕсли;
	
	Элементы.ГруппаРаботаетВОрганизациях.Видимость = (Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
	
	// +СофтФон
	Если сфпСофтФонПроСервер.сфпИспользоватьСофтФон() И сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьСофтФон") Тогда
		Элементы.сфпПользовательДляПереключенияЗвонков.Видимость = Истина;
		Если сфпСофтФонПроСервер.сфпРолиДоступны("сфпУправлениеМаршрутизацией, ПолныеПрава") Тогда
			Элементы.сфпПользовательДляПереключенияЗвонков.Доступность = Истина;
		Иначе
			Элементы.сфпПользовательДляПереключенияЗвонков.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Элементы.сфпПользовательДляПереключенияЗвонков.Видимость = Ложь;
	КонецЕсли;
	// -СофтФон
	
	Элементы.ДатаКасания.Видимость = ЗначениеЗаполнено(ДатаКасания);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовКИ()
	
	Если НЕ Элементы.ГруппаКонтактнаяИнформацияОбщая.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора			= Новый Структура("Родитель, Выводить", Справочники.ВидыКонтактнойИнформации.СправочникПартнеры, Ложь);
	флагВыводаГиперСсылки	=
		(ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"].НайтиСтроки(СтруктураОтбора).Количество() > 0);
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		СтруктураОтбора			= Новый Структура("Родитель, Выводить", Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты, Ложь);
		флагВыводаГиперСсылки	= флагВыводаГиперСсылки
			Или (ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"].НайтиСтроки(СтруктураОтбора).Количество() > 0);
	КонецЕсли;
	Если Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
		СтруктураОтбора 		= Новый Структура("Родитель, Выводить", Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания, Ложь);
		флагВыводаГиперСсылки	= флагВыводаГиперСсылки
			Или (ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"].НайтиСтроки(СтруктураОтбора).Количество() > 0);
	ИначеЕсли Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
		СтруктураОтбора 		= Новый Структура("Родитель, Выводить",Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо, Ложь);
		флагВыводаГиперСсылки	= флагВыводаГиперСсылки
			Или (ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"].НайтиСтроки(СтруктураОтбора).Количество() > 0);
	КонецЕсли;
	
	Для Каждого СтрокаДопРеквизита Из ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"] Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДопРеквизита.ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Выводить = Ложь;
		
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			флаг_1 = ЗначениеЗаполнено(ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита]) 
				И НЕ (ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита] = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление());
		Иначе	
			флаг_1 = ЗначениеЗаполнено(ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита]);
		КонецЕсли;	
		
		Если СтрокаДопРеквизита.Родитель = Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания Тогда
			Выводить = (Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
		ИначеЕсли СтрокаДопРеквизита.Родитель = Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо Тогда
			Выводить = (Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
		ИначеЕсли СтрокаДопРеквизита.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры Тогда
			Выводить = Истина;
		ИначеЕсли СтрокаДопРеквизита.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты Тогда
			Выводить = Истина;
		КонецЕсли;
			
// +CRM
		
		Для Каждого СтрокаДобавленногоРеквизита Из ЭтотОбъект["ПараметрыКонтактнойИнформации"].ГруппаКонтактнаяИнформация.ДобавленныеЭлементы Цикл
			Если СтрокаДобавленногоРеквизита.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(СтрокаДобавленногоРеквизита.Значение, СтрокаДопРеквизита.ИмяРеквизита) Тогда
				СкрыватьПолеКИ = (СтрокаДопРеквизита.Комментарий = "Не выводить");
				Элементы[СтрокаДобавленногоРеквизита.Значение].Видимость = (Выводить И ((СтрокаДопРеквизита.Выводить И НЕ СкрыватьПолеКИ) ИЛИ ((РедактироватьДР И НЕ СкрыватьПолеКИ) ИЛИ флаг_1))
										И ?(Тип(Элементы[СтрокаДобавленногоРеквизита.Значение])=Тип("КнопкаФормы"), Элементы[СтрокаДобавленногоРеквизита.Значение].Заголовок<>"", Истина));
			КонецЕсли;
		КонецЦикла;
// -CRM
		
		Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка = ШрифтыСтиля.ЗаголовокУдаленногоРеквизитаШрифт Тогда
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветТекстаЗаголовка	= Новый Цвет();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка		= Новый Шрифт();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОчистки			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОткрытия		= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаСпискаВыбора	= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Истина;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].Подсказка				= "";
			Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].Вид = ВидПоляФормы.ПолеВвода Тогда
				Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].Высота = 5;
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].МногострочныйРежим = Истина;
				КонецЕсли;
				Если (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес)
				ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон)
				ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Факс) Тогда
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора				= Истина;
					Если СтрокаДопРеквизита.Вид.ВидРедактирования = "Диалог" Тогда
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Ложь;
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветФона				= WebЦвета.Кремовый;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			ИмяРеквизита = Элементы[СтрокаДопРеквизита.ИмяРеквизита].Имя;
			АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
			Если ПустаяСтрока(АдресСайтаКомпании) Тогда
				ЭтотОбъект[ИмяРеквизита] = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЧислоВложений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(ПартнерыПрисоединенныеФайлы.Ссылка) КАК КоличествоФайлов
	               |ИЗ
	               |	Справочник.ПартнерыПрисоединенныеФайлы КАК ПартнерыПрисоединенныеФайлы
	               |ГДЕ
	               |	ПартнерыПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	               |	И НЕ ПартнерыПрисоединенныеФайлы.ПометкаУдаления
	               |	И НЕ ПартнерыПрисоединенныеФайлы.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КоличествоФайлов;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	
	Если Объект.Ссылка.Пустая() Тогда
		ВложенияПредставление = НСтр("ru='Файлы';en='Files'");
		Возврат;
	КонецЕсли;
	
	ЧислоВложений = ПолучитьЧислоВложений();
	Если ЧислоВложений = 0 Тогда
		ВложенияПредставление = НСтр("ru='Файлы';en='Files'");
	Иначе
		ВложенияПредставление = НСтр("ru='Файлы(';en='Files('") + ЧислоВложений + ")"; 
	КонецЕсли;
			
КонецПроцедуры // СформироватьПредставлениеВложений()

&НаСервере
Процедура ИзменитьВидПартнераНаСервере(ВидПартнера)
	
	Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо[ВидПартнера];
	Модифицированность = Истина;
	РасцветкаВыбораПартнера();
	УстановкаНастройкаВидимостиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РасцветкаВыбораПартнера()
	Если Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
		ГолубаяКнопка = Элементы.ЮридическоеЛицо;
		СераяКнопка = Элементы.ФизическоеЛицо;
	Иначе
		ГолубаяКнопка = Элементы.ФизическоеЛицо;
		СераяКнопка = Элементы.ЮридическоеЛицо;
	КонецЕсли;
	ГолубаяКнопка.Пометка = Истина;
	ГолубаяКнопка.ЦветФона = ЦветаСтиля.CRM_ОсновнойГолубой;
	ГолубаяКнопка.ЦветРамки = ЦветаСтиля.CRM_ОсновнойГолубой;
	ГолубаяКнопка.Шрифт = Новый Шрифт(,,Истина);
	СераяКнопка.ЦветФона = ЦветаСтиля.CRM_СерыйДляВторостепенныхФункций;
	СераяКнопка.Пометка = Ложь;
	СераяКнопка.ЦветРамки = ЦветаСтиля.CRM_СерыйДляВторостепенныхФункций;
	ГолубаяКнопка.Шрифт = Новый Шрифт();
КонецПроцедуры

// +CRM

Функция ПолучитьВладельцаСозданногоКонтакта()
	
	Если ЗначениеЗаполнено(CRM_СозданныйКонтакт) Тогда
		Возврат CRM_СозданныйКонтакт.Владелец;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОСозданииКонтактаФормыРегистрации()
	
	Если ЗначениеЗаполнено(CRM_СсылкаНаИсточникДанных) И ЗначениеЗаполнено(CRM_СозданныйКонтакт) Тогда
		Оповестить("НовоеКонтактноеЛицоЗаписаноСПараметрами", Новый Структура("ИсточникДанных, Данные", CRM_СсылкаНаИсточникДанных, Новый Структура("Клиент, Контакт", ПолучитьВладельцаСозданногоКонтакта(), CRM_СозданныйКонтакт)));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеКонтакта()
	
	Отказ = Ложь;
	
	ДополнительныеПоля = Новый Массив;
	
	// При незаполненном наименовании считаем, кто Контактное Лицо не вводится
	Если Элементы.ГруппаРеквизитыКонтакта.Видимость И ЗначениеЗаполнено(Контакт_Объект.Наименование) Тогда
		
		ЮрЛицо = (Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
		
		Если НЕ ЗначениеЗаполнено(Контакт_Объект.Наименование) И ЮрЛицо Тогда
			ТекстСообщения = НСтр("ru='Не заполнено наименование контакта'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Контакт_Объект.Наименование",, Отказ);
		КонецЕсли;
		
		ПроверятьЗаполнениеКИ = ЗначениеЗаполнено(Контакт_Объект.Наименование)
								ИЛИ ЮрЛицо;
		
		Если НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("CRM_РазрешитьСохранениеКЛБезКИ")
			И ПроверятьЗаполнениеКИ Тогда
			ДополнительныеПоля.Добавить("Контакт_Email");
			ДополнительныеПоля.Добавить("Контакт_Телефон");
			Если Элементы.Контакт_МобТелефон.Видимость Тогда
				ДополнительныеПоля.Добавить("Контакт_МобТелефон");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	

	Если ДополнительныеПоля <> Неопределено Тогда
		
		НетЗаполненных = Истина;
		Для Каждого Поле Из ДополнительныеПоля Цикл
			Если ЗначениеЗаполнено(ЭтотОбъект[Элементы[Поле].ПутьКДанным]) Тогда
				НетЗаполненных = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НетЗаполненных Тогда
			Для Каждого Поле Из ДополнительныеПоля Цикл
				Если Элементы[Поле].Видимость Тогда
					ТекстСообщения = НСтр("ru='Не заполнена контактная информация';en='Contact information not filled'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Элементы[Поле].ПутьКДанным,, Отказ);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПослеСозданияКонтактаФормыРегистрации()
	
	Если НЕ CRM_СозданныйКонтакт.Пустая() Тогда
		
		Элементы["ГруппаСписокКЛ"].Скрыть();
		Элементы.ГруппаРеквизитыКонтакта.Видимость = Ложь;
		
		Оповестить("НовоеКонтактноеЛицоЗаписано", CRM_СозданныйКонтакт);
		ОповеститьОСозданииКонтактаФормыРегистрации();
		
		CRM_СозданныйКонтакт = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКонтактФормыРегистрацииНаСервере(ВладелецСсылка)
	
	Если НЕ Элементы.ГруппаРеквизитыКонтакта.Видимость Тогда Возврат; КонецЕсли;
	
	Если ПустаяСтрока(Контакт_Объект.Наименование) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВладелецСсылка.Пустая() Тогда Возврат; КонецЕсли;
	
	Контакт_Объект.Владелец = ВладелецСсылка;
	
	Если ЗначениеЗаполнено(Контакт_Телефон) Тогда
		ВидКИ = Константы.CRM_ОсновнойВидТелефонаКонтакта.Получить();
		Если Не ЗначениеЗаполнено(ВидКИ) Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		КонецЕсли;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Контакт_Телефон);
		Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны, СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный, "");
		ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление, ВидКИ, "");
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контакт_Объект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт_МобТелефон) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Контакт_МобТелефон);
		Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны, СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "", "");
		ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление, ВидКИ, "");
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контакт_Объект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт_Email) Тогда
		ВидКИ = Константы.CRM_ОсновнойВидEmailКонтакта.Получить();
		Если Не ЗначениеЗаполнено(ВидКИ) Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		КонецЕсли;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, Контакт_Email, ВидКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контакт_Объект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт_Мессенджер) Тогда
		Если Контакт_МессенджерВид.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Контакт_Мессенджер);
			Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны, СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "", "");
			ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление, Контакт_МессенджерВид, "");
		Иначе
			СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Контакт_МессенджерВид);
			ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, Контакт_Мессенджер, Контакт_МессенджерВид);
		КонецЕсли;
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контакт_Объект, ДанныеКИ, Контакт_МессенджерВид, Контакт_МессенджерВид.Тип);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		Если ЭтотОбъект["Свойства_ИспользоватьСвойства"] И ЭтотОбъект["Свойства_ИспользоватьДопРеквизиты"] Тогда
			CRM_УправлениеСвойствамиСлужебный.ПеренестиЗначенияИзРеквизитовФормыВОбъект(ЭтотОбъект, Контакт_Объект);
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Контакт_Объект.ДатаРождения) Тогда
		ВидСобытия = Справочники.CRM_ВидыКлючевыхСобытий.НайтиПоНаименованию(Нстр("ru='День рождения контактного лица'"), Истина);
		Если НЕ (ВидСобытия = Справочники.CRM_ВидыКлючевыхСобытий.ПустаяСсылка()) Тогда
			НовСтрока = Контакт_Объект.CRM_КлючевыеСобытия.Добавить();
			НовСтрока.ВидСобытия = ВидСобытия;
			НовСтрока.ДатаСобытия = Контакт_Объект.ДатаРождения;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт_Статус) Тогда
		НовСтрока = Контакт_Объект.CRM_Статусы.Добавить();
		НовСтрока.Статус = Контакт_Статус;
	КонецЕсли;
	
	НовыйКонтакт = РеквизитФормыВЗначение("Контакт_Объект");
	НовыйКонтакт.ДатаРегистрацииСвязи = ТекущаяДатаСеанса();
	НовыйКонтакт.Автор = ТекущийПользователь;
	НовыйКонтакт.Записать();
	
	CRM_СозданныйКонтакт = НовыйКонтакт.Ссылка;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСоставРеквизитов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = ПараметрыСеанса.CRM_НастройкаСоставаРеквизитовМастераРегистрации.Получить();
	ОбщиеНастройки = Неопределено;
	Настройки.Свойство("ОбщиеНастройки", ОбщиеНастройки);
	Если ОбщиеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеЭлементов = Обработки.CRM_МастерРегистрацииОбращения.СответствиеЭлементовМастераИИнтереса();
	Для каждого НастройкаГруппы Из ОбщиеНастройки Цикл
		Если НастройкаГруппы.Ключ = "Контакт" Тогда
			Для каждого НастройкаЭлемента Из НастройкаГруппы.Значение Цикл
				Если ТипЗнч(НастройкаЭлемента.Значение) = Тип("Строка") Тогда
					ИмяЭлемента = "";
					Если НЕ СоответствиеЭлементов.Свойство(НастройкаЭлемента.Значение, ИмяЭлемента) Тогда
						ИмяЭлемента = НастройкаЭлемента.Значение;
					КонецЕсли;
					Элемент = Элементы.Найти(ИмяЭлемента);
				Иначе
					Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") И ЭтотОбъект["Свойства_ИспользоватьСвойства"] Тогда
						ОписанияДР = ЭтотОбъект["Свойства_ОписаниеДополнительныхРеквизитов"].НайтиСтроки(Новый Структура("Свойство",
							НастройкаЭлемента.Значение));
						Если ОписанияДР.Количество() > 0 Тогда
							Элемент = CRM_УправлениеСвойствами.ЭлементДопРеквизита(ЭтотОбъект, ОписанияДР[0]);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если Элемент <> Неопределено Тогда
					Элемент.Видимость = НастройкаЭлемента.Пометка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура РазложитьДопРеквизитыПоКолонкам(МассивОбъектов)
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства")
		И ЭтотОбъект["Свойства_ИспользоватьСвойства"] И ЭтотОбъект["Свойства_ИспользоватьДопРеквизиты"] Тогда
		Для Каждого ОбъектДопРеквизитов Из МассивОбъектов Цикл
			ГруппаДопРеквизитов = Элементы.Найти(ОбъектДопРеквизитов.ИмяЭлементаДляРазмещения);
			Если ГруппаДопРеквизитов <> Неопределено Тогда
				ГруппаЛев = Элементы.Найти(ОбъектДопРеквизитов.ИмяЭлементаДляРазмещения+"Левая");
				ГруппаПрав = Элементы.Найти(ОбъектДопРеквизитов.ИмяЭлементаДляРазмещения+"Правая");
				Если ГруппаЛев <> Неопределено И ГруппаПрав <> Неопределено Тогда
					Левая = Истина;
					Для Каждого ДопРеквизит Из ЭтотОбъект["Свойства_ОписаниеДополнительныхРеквизитов"] Цикл
						ДопЭлемент = CRM_УправлениеСвойствами.ЭлементДопРеквизита(ЭтотОбъект, ДопРеквизит);
						Если ДопЭлемент <> Неопределено 
							И (ДопЭлемент.Родитель = ГруппаДопРеквизитов ИЛИ ДопЭлемент.Родитель.Родитель = ГруппаДопРеквизитов) Тогда
							ДопЭлемент.Видимость = Ложь;
							Элементы.Переместить(ДопЭлемент, ?(Левая, ГруппаЛев, ГруппаПрав));
							Левая = Не Левая;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияДобавленияАдреса(Результат, ДопПараметры) Экспорт
	ПроверитьСделатьАдресОсновным();
КонецПроцедуры

&НаСервере
Процедура ПроверитьСделатьАдресОсновным()
	УстановитьОформлениеАдресаПоУмолчанию();
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеАдресаПоУмолчанию()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_АдресаОфисовКомпании.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_АдресаОфисовКомпании КАК CRM_АдресаОфисовКомпании
	|ГДЕ
	|	CRM_АдресаОфисовКомпании.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	ТабАдресов = Запрос.Выполнить().Выгрузить();
	Если ТабАдресов.Количество() = 1 И Не Объект.CRM_ОсновнойАдрес = ТабАдресов[0].Ссылка Тогда
		Объект.CRM_ОсновнойАдрес = ТабАдресов[0].Ссылка;
		Модифицированность = Истина;
	КонецЕсли;	
	
	Если ТабАдресов.Количество() = 1 И Не Объект.CRM_ОсновнойАдрес = ТабАдресов[0].Ссылка Тогда
		Элементы.ГруппаВсеАдреса.Заголовок = НСтр("ru='Все адреса ('")+ТабАдресов.Количество()+")";
	Иначе	
		Элементы.ГруппаВсеАдреса.Заголовок = НСтр("ru='Все адреса'");
	КонецЕсли;
	
	АдресПоУмолчанию = Объект.CRM_ОсновнойАдрес;
	
	Для каждого ЭлементУсловногоОформления Из CRM_АдресаОфисов.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный" Тогда
			CRM_АдресаОфисов.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы.Удалить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыУсловногоОформленияСписка	=
		CRM_АдресаОфисов.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы;
	ЭлементУсловногоОформления			= ЭлементыУсловногоОформленияСписка.Добавить();
	
	ЭлементОтбора 						= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения 			= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение 		= АдресПоУмолчанию;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
	ЭлементУсловногоОформления.Представление = "Адреса по умолчанию";  
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокАдресов()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_АдресаОфисовКомпании.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_АдресаОфисовКомпании КАК CRM_АдресаОфисовКомпании
	|ГДЕ
	|	CRM_АдресаОфисовКомпании.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	СписокСсылок = Новый СписокЗначений;
	СписокСсылок.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат СписокСсылок; 
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПрозвонМессенджеровЗавершение(Результат, Параметры) Экспорт

	// Отключить картинку Длительной операции:
	Если НЕ Параметры.Свойство("ПрозвонВсехНомеров") Тогда
		Элементы["ДекорацияПрозвон" + Параметры.ИмяРеквизита].Вид = ВидДекорацииФормы.Надпись;
		Элементы["ДекорацияПрозвон" + Параметры.ИмяРеквизита].Ширина = 0;
	КонецЕсли;
	
	Если Результат = Неопределено Или ТипЗнч(Результат) <> Тип("Структура")
		Или (Результат.Свойство("Статус") И Результат.Статус = "Ошибка") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		
		РезультатПрозвона = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		CRM_УправлениеКонтактнойИнформациейКлиент.CRM_ПрозвонМессенджеровЗавершение(РезультатПрозвона.ВидыКИ, Параметры);
		
		УстановитьВидимостьРеквизитовКИ();
		
		Для Каждого СтрСообщения Из РезультатПрозвона.Сообщения Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрСообщения);
		КонецЦикла;
		
		Если РезультатПрозвона.ВидыКИ.Количество() = 0 Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Поиск в мессенджерах'"), ПолучитьНавигационнуюСсылку(Объект.Ссылка), НСтр("ru = 'Не найдено'"));
		КонецЕсли;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаписатьВЧатЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НомерТелефона = Результат;
	
	АдресПараметровОповещения = ПоместитьВоВременноеХранилище(
									Новый Структура("ИмяПроцедуры, Параметры", 
											"Подключаемый_ПереключитьНаЧат", 
											Новый Структура("НомерТелефона", НомерТелефона)), УникальныйИдентификатор);
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
							
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереключитьНаЧат(Результат, ДополнительныеПараметры) Экспорт // АПК:78 - исключить из проверки.
							
	НомерТелефона = ДополнительныеПараметры.НомерТелефона;
	
	Если НЕ БыстрыйВвод_ТекущийТипОбъекта = "Чат" Тогда
		ПереключитьСтраницуБыстрогоВвода("Чат");
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Адрес", НомерТелефона);
	НайденныеСтроки = БыстрыйВвод_ЧатПолучатели.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныйПолучатель = НайденныеСтроки[0];
		БыстрыйВвод_ЧатИдентификаторПолучателя	= НайденныйПолучатель.Идентификатор;
		БыстрыйВвод_ЧатАдрес					= НайденныйПолучатель.Адрес;
		БыстрыйВвод_ЧатПолучатель					= НайденныйПолучатель.Контакт;
		БыстрыйВвод_ЧатПредставлениеПолучателя	= НайденныйПолучатель.Представление;
		БыстрыйВвод_ЧатУчетнаяЗапись			= НайденныйПолучатель.УчетнаяЗапись;
		БыстрыйВвод_ЧатПредставлениеУчетнойЗаписи = НайденныйПолучатель.УчетнаяЗапись;
		БыстрыйВвод_ЧатГруппа					= НайденныйПолучатель.Группа;
		БыстрыйВвод_ЧатЭтоНомерТелефона			= НайденныйПолучатель.ЭтоНомерТелефона;
		БыстрыйВвод_ЧатВидКИ					= НайденныйПолучатель.ВидКИ;
	КонецЕсли;
	
	УчетныеЗаписиМессенджеров = CRM_КлиентыСервер.УчетныеЗаписиМессенджеров(БыстрыйВвод_ЧатВидКИ, Объект.Ссылка);
	CRM_ЛентаСобытийКлиентСервер.НастроитьОбластьВводаУчетныеЗаписиМессенджеров(УчетныеЗаписиМессенджеров, ЭтотОбъект);
	
	ТекущийЭлемент = Элементы.БыстрыйВвод_ЧатСодержание;
	
КонецПроцедуры

&НаСервере
Функция ВсеТелефоныФормы(ДополнительныеДанныеНомеровСоответствие) Экспорт // АПК:78 - исключить из проверки.
	
	Возврат CRM_КлиентыСервер.ВсеТелефоныФормы(ЭтотОбъект, ДополнительныеДанныеНомеровСоответствие);
	
КонецФункции

&НаКлиенте
Процедура ПрозвонитьВсеТелефоныФормы()
	
	ДополнительныеДанныеНомеровСоответствие = Новый Соответствие;
	МассивТелефонныхНомеров = ВсеТелефоныФормы(ДополнительныеДанныеНомеровСоответствие);
	
	Если МассивТелефонныхНомеров.Количество() = 0 Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Поиск в мессенджерах'"),
												ПолучитьНавигационнуюСсылку(Объект.Ссылка),
												НСтр("ru = 'Не найдены номера телефонов для поиска в мессенджерах'"));
	Иначе
		
		ПараметрыПрозвона = Новый Структура("Форма, Ссылка", ЭтотОбъект, Объект.Ссылка);
		ПараметрыПрозвона.Вставить("ПрозвонВсехНомеров");
		ПараметрыПрозвона.Вставить("МассивТелефонныхНомеров", МассивТелефонныхНомеров);
		ПараметрыПрозвона.Вставить("МассивИсключаемыхМессенджеров", Новый Массив);
		ПараметрыПрозвона.Вставить("ДополнительныеДанныеНомеровСоответствие", ДополнительныеДанныеНомеровСоответствие);
		ПараметрыПрозвона.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтактнаяИнформация");
		CRM_УправлениеКонтактнойИнформациейКлиент.CRM_ЗапуститьДлительнуюОперациюПрозвонитьМессенджеры(ПараметрыПрозвона);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьДанныеПотенциальногоКлиента(ПотенциальныйКлиент, Клиент, Контакт)
	
	КонтактОбъект = ПотенциальныйКлиент.ПолучитьОбъект();
	КонтактОбъект.Партнер = Клиент;
	КонтактОбъект.КонтактноеЛицо = Контакт;
	
	Попытка
		КонтактОбъект.Записать();
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодключениеСервисовСопровождения.ЗаписатьИнформациюВЖурналРегистрации(ИнформацияОбОшибке);
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидКонтрагентаСПАРКРиски(КонтрПартнер)
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(КонтрПартнер)) Тогда
			ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтрПартнер, "ЮрФизЛицо");
		Иначе
			ЮрФизЛицо = КонтрПартнер.ЮрФизЛицо;
		КонецЕсли;
		
		Если ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
			ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентовСПАРКРиски.ЮридическоеЛицо");
		ИначеЕсли ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
			ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентовСПАРКРиски.ИндивидуальныйПредприниматель");
		Иначе
			ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентовСПАРКРиски.ПустаяСсылка");
		КонецЕсли;
		
	Иначе
		
		ВидКонтрагента = Перечисления.ЮрФизЛицо.ВидКонтрагентаСПАРКРиски(КонтрПартнер);
		
	КонецЕсли;
	
	Возврат ВидКонтрагента;
	
КонецФункции

&НаКлиенте
Процедура ЗадатьВопросОПометкеНаУдалениеКЛ(ИдентификаторыСтрок)
	
	ТекстВопроса = "";
	УстановитьПометку = Истина;
	
	ЕстьПометкиНаУдаление = Ложь;
	Для Каждого ТекИд Из ИдентификаторыСтрок Цикл
		ТекСтрока = ЭтотОбъект["КонтактныеЛицаПартнера"].НайтиПоИдентификатору(ТекИд);
		Если ТекСтрока.ПометкаУдаления Тогда
			ЕстьПометкиНаУдаление = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьПометкиНаУдаление Тогда
		ТекстВопроса = НСтр("ru = 'Снять с %1 пометку на удаление?';
		                    |en = 'Do you want to clear the deletion mark from %1?'");
		УстановитьПометку = Ложь;
	Иначе
		ТекстВопроса = НСтр("ru = 'Пометить %1 на удаление?';
		                    |en = 'Do you want to mark %1 for deletion?'");
	КонецЕсли;
	
	Если ИдентификаторыСтрок.Количество() = 1 Тогда
		ТекСтрока = ЭтотОбъект["КонтактныеЛицаПартнера"].НайтиПоИдентификатору(ИдентификаторыСтрок[0]);
		ПараметрВопроса = """" + ТекСтрока.КонтактноеЛицо + """";
	ИначеЕсли ЕстьПометкиНаУдаление Тогда
		ПараметрВопроса = НСтр("ru = 'выделенных элементов';
		                       |en = 'selected items'");
	Иначе
		ПараметрВопроса = НСтр("ru = 'выделенные элементы';
		                       |en = 'selected items'");
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ПараметрВопроса);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторыСтрок", ИдентификаторыСтрок);
	ДополнительныеПараметры.Вставить("УстановитьПометку", УстановитьПометку);
	
	Оповещение = Новый ОписаниеОповещения("ПослеОтветаНаВопросОПометкеНаУдаление", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОПометкеНаУдаление(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСнятьПометкуНаУдалениеКЛ(ДополнительныеПараметры.ИдентификаторыСтрок,
		ДополнительныеПараметры.УстановитьПометку);
	
	ОбновитьСписокКонтактов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьПометкуНаУдалениеКЛ(ИдентификаторыСтрок, ЗначениеПометки)
	
	Для Каждого ТекИд Из ИдентификаторыСтрок Цикл
		
		ТекСтрока = ЭтотОбъект["КонтактныеЛицаПартнера"].НайтиПоИдентификатору(ТекИд);
		
		Если ТекСтрока.КонтактноеЛицо.ПометкаУдаления = ЗначениеПометки Тогда
			Продолжить;
		КонецЕсли;
		
		КонтактОбъект = ТекСтрока.КонтактноеЛицо.ПолучитьОбъект();
		КонтактОбъект.УстановитьПометкуУдаления(ЗначениеПометки);
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПоискДублейПоЗначению

&НаКлиенте
Процедура ВыполнитьПоискДублейПоЗначениюКИ(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("ДанныеФормыЭлементКоллекции") Тогда Возврат; КонецЕсли;
	
	ВыполнитьПоискДублейПоЗначению(Результат.Представление, ДополнительныеПараметры.Элемент, Результат.Тип);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискДублейПоЗначению(ЗначениеПоиска, Поле, ТипКИ = Неопределено)

	ВыполнитьПоискДублейПоЗначениюНаСервере(ЗначениеПоиска, Поле.Имя, ТипКИ);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискДублейПоЗначениюНаСервере(ЗначениеПоиска, ИмяПоля, ТипКИ)
	
	CRM_ПоискКонтактовВызовСервера.ПодготовитьПоискДублейПоЗначению(ЭтотОбъект, ЗначениеПоиска, ИмяПоля, ТипКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаРезультатовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	CRM_ПоискКонтактовКлиент.ОбработатьВыборТаблицыРезультатов(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ПотенциальныеКлиенты

&НаКлиенте
Процедура CRM_ОбновитьГруппуПотенциальныеКлиенты()
	
	ЗаголовокПК = НСтр("ru='Потенциальные клиенты'; en='Potential Customers'");
	
	КоличествоПК = 0;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		КоличествоПК = КоличествоПотенциальныхКлиентовНаСервере(Объект.Ссылка);
		Если КоличествоПК > 0 Тогда
			ЗаголовокПК = ЗаголовокПК + " (" + КоличествоПК + ")"
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ПотенциальныеКлиенты.Заголовок <> ЗаголовокПК Тогда
		Элементы.ПотенциальныеКлиенты.Заголовок = ЗаголовокПК;
	КонецЕсли;
	
	Элементы.ПотенциальныеКлиенты.Видимость = (КоличествоПК > 0);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоПотенциальныхКлиентовНаСервере(Партнер)
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.CRM_ПотенциальныеКлиенты) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_ПотенциальныеКлиенты.Ссылка) КАК КоличествоПК
	                      |ИЗ
	                      |	Справочник.CRM_ПотенциальныеКлиенты КАК CRM_ПотенциальныеКлиенты
	                      |ГДЕ
	                      |	CRM_ПотенциальныеКлиенты.Партнер = &Партнер");
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоПК;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// -CRM

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
#Область СтандартныеПодсистемы_РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
КонецПроцедуры

// +CRM_Модуль
// &НаКлиенте
// Процедура ЗаполнитьРеквизитыПоИННЗавершение(Ответ, ДопПараметры) Экспорт
//	
//	Если Ответ = КодВозвратаДиалога.Да Тогда
//		ВыполнитьЗаполнениеРеквизитовПоИНН();
//	КонецЕсли;
//	
// КонецПроцедуры 

// &НаКлиенте
// Процедура ВыполнитьЗаполнениеРеквизитовПоИНН()
//	
//	ОписаниеОшибки = "";
//	ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки);
//	
//	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
//		// Обработка ошибок
//		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
//			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов
//				|необходимо подключиться к Интернет-поддержке пользователей.
//				|Подключиться сейчас?'");
//			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект);
//			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
//		Иначе
//			ПоказатьПредупреждение(, ОписаниеОшибки);
//		КонецЕсли;
//	ИначеЕсли Объект.ЮрФизЛицо = ЭтоКомпания Тогда
//		// Проверка юридического лица по данным сервиса ИФНС после заполнения реквизитов (мог измениться КПП).
//		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);		
//	КонецЕсли;
// КонецПроцедуры

// -CRM_Модуль

// +CRM_Модуль
// &НаСервере
// Процедура ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки = "")
//	
//	ЭтоЮридическоеЛицо = (Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
//	// +CRM_Модуль
//	// Если ЭтоЮридическоеЛицо Тогда
//	//	РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(Объект.CRM_ИНН);
//	// Иначе
//	//	РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(Объект.CRM_ИНН);
//	// КонецЕсли;
//	Если ЭтоЮридическоеЛицо Тогда
//		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(ИНН);
//	Иначе
//		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ИНН);
//	КонецЕсли;
//	// -CRM_Модуль
//	
//	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
//		ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
//		Возврат;
//	КонецЕсли;
//	
//	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента, , "ДатаРегистрации");
//	
//	ОбновитьКИ = Ложь;
//	
//	Если ЭтоЮридическоеЛицо Тогда
//		Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес") И ЗначениеЗаполнено(РеквизитыКонтрагента.ЮридическийАдрес) Тогда
//			ИнициализацияКонтактнойИнформации();
//			ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес, 
//				РеквизитыКонтрагента.ЮридическийАдрес);
//				ОбновитьКИ = Истина;
//				Если Элементы.ГруппаКонтактнаяИнформацияОбщая.Видимость Тогда	
//				УстановитьВидимостьРеквизитовКИ();
//			КонецЕсли;
//		КонецЕсли;
//	Иначе
//		Объект.CRM_Фамилия	= РеквизитыКонтрагента.Фамилия;
//		Объект.CRM_Имя		= РеквизитыКонтрагента.Имя;
//		Объект.CRM_Отчество	= РеквизитыКонтрагента.Отчество;
//		Объект.Пол	= ?(РеквизитыКонтрагента.Пол = "1", Перечисления.ПолФизическогоЛица.Мужской, Перечисления.ПолФизическогоЛица.Женский);
//	КонецЕсли;
//	
//	// +CRM_Модуль
//	// Если РеквизитыКонтрагента.Свойство("РегистрационныйНомер") И ЗначениеЗаполнено(РеквизитыКонтрагента.РегистрационныйНомер) Тогда
//	//	Объект.CRM_ОГРН = РеквизитыКонтрагента.РегистрационныйНомер;
//	// КонецЕсли;
//	// -CRM_Модуль
//	
//	Если РеквизитыКонтрагента.Свойство("Телефон") И ЗначениеЗаполнено(РеквизитыКонтрагента.Телефон) Тогда
//		ИнициализацияКонтактнойИнформации();
//		ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера, 
//			РеквизитыКонтрагента.Телефон);
//		ОбновитьКИ = Истина;
//	КонецЕсли;
//		
//	Если РеквизитыКонтрагента.Свойство("РегистрацияВНалоговомОргане") И РеквизитыКонтрагента.РегистрацияВНалоговомОргане<>Неопределено
//			И РеквизитыКонтрагента.РегистрацияВНалоговомОргане.Свойство("ДатаРегистрации") Тогда
//		Объект.CRM_ДатаРегистрацииКомпании = РеквизитыКонтрагента.РегистрацияВНалоговомОргане.ДатаРегистрации;
//	Иначе
//		Объект.CRM_ДатаРегистрацииКомпании = РеквизитыКонтрагента.ДатаРегистрации;
//	КонецЕсли;
//	
//	// +CRM_Модуль
//	// РеквизитыКонтрагента.Свойство("КПП", Объект.CRM_КПП);
//	// -CRM_Модуль
//	
//	Модифицированность = Истина;
//	
//	Если ОбновитьКИ Тогда
//		ОбновлениеКонтактнойИнформацииСписком();
//	КонецЕсли;

// КонецПроцедуры
// -CRM_Модуль

// +CRM_Модуль
//&НаСервере
//Процедура ЗаполнитьЭлементКонтактнойИнформации(ВидКонтактнойИнформации, СтруктураДанных)
//	
//	Если СтруктураДанных = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Отбор  = Новый Структура("Вид", ВидКонтактнойИнформации);
//	Строки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
//	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
//	Если ДанныеСтроки = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	ДанныеСтроки.Представление = СтруктураДанных.Представление;
//	ДанныеСтроки.Значение = СтруктураДанных.КонтактнаяИнформация;
//	Если Элементы.Найти(ДанныеСтроки.ИмяРеквизита)<>Неопределено Тогда
//		ЭтотОбъект[ДанныеСтроки.ИмяРеквизита] = СтруктураДанных.Представление;
//	КонецЕсли;
//	
//КонецПроцедуры
// -CRM_Модуль

// +CRM_Модуль
// &НаКлиенте
// Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт

//	Если Ответ = КодВозвратаДиалога.Да Тогда
//		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект);
//		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
//		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОповещениеОЗакрытии, ЭтотОбъект);
//	КонецЕсли;

// КонецПроцедуры

// &НаКлиенте
// Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДопПараметры) Экспорт

//	Если Результат <> Неопределено 
//		И Результат <> КодВозвратаДиалога.Отмена Тогда
//		ВыполнитьЗаполнениеРеквизитовПоИНН();
//	КонецЕсли;

// КонецПроцедуры
// -CRM_Модуль

&НаКлиенте
Процедура Подключаемый_ВключитьЗаполнениеПоИНН()

	ОтключитьЗаполнениеПоИНН = Неопределено;	

КонецПроцедуры 

#КонецОбласти
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#Область КонтактнаяИнформацияБСП

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "КОНТАКТНАЯ ИНФОРМАЦИЯ"

// Подключаемый обработчик выбора.
//
// Параметры:
//  Элемент - ПолеФормы
//  ВыбранноеЗначение - Строка
//  СтандартнаяОбработка - Булево
//
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		CRM_УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
		// Если это адрес электронной почты, то надо проверить на коррректность заполнения.
		РезультатПроверки = CRM_УправлениеКонтактнойИнформациейКлиент.CRM_ПолучитьТипПроверитьЗаполнение(ЭтотОбъект, Элемент);
		Если НЕ РезультатПроверки = Неопределено И РезультатПроверки.КодОшибки<>0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
		КонецЕсли;
		
		// +CRM		
		ДополнительныеПараметры = Новый Структура("Элемент", Элемент);
		ОповещениеВыполнитьПоискДублейПоЗначению = Новый ОписаниеОповещения("ВыполнитьПоискДублейПоЗначениюКИ", ЭтотОбъект, ДополнительныеПараметры);
		CRM_УправлениеКонтактнойИнформациейКлиент.ВыполнитьПоискДублейПоЗначению(ЭтотОбъект, Элемент, ОповещениеВыполнитьПоискДублейПоЗначению);
		// -CRM
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	CRM_УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя, Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт // АПК:78 - исключить из проверки.
	CRM_УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзмененииАдресаЭлектроннойПочты(Элемент)
	
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНажатиеАдресаСайтаКомпании(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании","");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление() Тогда
		Подключаемый_РедактироватьАдресСайтаКомпании(Элемент);
	Иначе
		Если СтрНайти(АдресСайтаКомпании, "://") = 0 Тогда
			АдресСайтаКомпании = "http://" + АдресСайтаКомпании;
		КонецЕсли;	
		ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(АдресСайтаКомпании);
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресСайтаКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании","");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление() Тогда
		АдресСайтаКомпании = "";
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводАдресаСайтаКомпанииЗавершение", ЭтотОбъект, ИмяРеквизита);
	ПоказатьВводСтроки(ОписаниеОповещения, АдресСайтаКомпании, НСтр("ru='Введите адрес сайта'"));
	
КонецПроцедуры // Подключаемый_РедактироватьАдресСайтаКомпании

&НаКлиенте
Процедура ВводАдресаСайтаКомпанииЗавершение(АдресСайтаКомпании, ИмяРеквизита) Экспорт
	
	Если АдресСайтаКомпании <> Неопределено Тогда
		Если ПустаяСтрока(АдресСайтаКомпании) Тогда
			ЭтотОбъект[ИмяРеквизита] = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление();
		Иначе	
			ЭтотОбъект[ИмяРеквизита] = АдресСайтаКомпании;
		КонецЕсли;	
			
		// +CRM
		ТекущийЭлементКонтактнойИнформации = Элементы[ИмяРеквизита];
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, ТекущийЭлементКонтактнойИнформации);
		Модифицированность = Истина;
		// -CRM
		
	КонецЕсли;	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресКомпании","");
	Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элементы[ИмяРеквизита], Неопределено, Ложь);
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
	Подключаемый_ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры

#КонецОбласти

#Область НастройкаРасположенияЭлементов

&НаСервереБезКонтекста
Функция СписокТиповОбращений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_ТипыОбращений.Ссылка КАК Ссылка,
		|	CRM_ТипыОбращений.ИндексКартинки КАК ИндексКартинки
		|ИЗ
		|	Справочник.CRM_ТипыОбращений КАК CRM_ТипыОбращений
		|ГДЕ
		|	НЕ CRM_ТипыОбращений.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	CRM_ТипыОбращений.РеквизитДопУпорядочивания";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокТиповОбращений = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		СписокТиповОбращений.Добавить(Выборка.Ссылка,,, БиблиотекаКартинок["CRM_ТипОбращения"+Выборка.ИндексКартинки]);
	КонецЦикла;
	
	Возврат СписокТиповОбращений;

КонецФункции

&НаКлиенте
Процедура КомандаСоздатьПоТипуОбращения(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	УИд = СтрЗаменить( СтрЗаменить(Команда.Имя, "КомандаСоздатьПоТипуОбращения_", "") , "_", "-");
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТипОбращения", ПолучитьТипОбращенияПоУИд(УИд));
	Если ПараметрыОткрытия.ТипОбращения = ПредопределенноеЗначение("Справочник.CRM_ТипыОбращений.Интерес") Тогда 
		ПараметрыОткрытия.Вставить("ИсточникОткрытияМастера", CRM_МетодыФормОбработокСервер.МастерОткрытИзПродаж());
	Иначе
		ПараметрыОткрытия.Вставить("ИсточникОткрытияМастера", CRM_МетодыФормОбработокСервер.МастерОткрытИзОбращений());
	КонецЕсли;
	ПараметрыОткрытия.Вставить("НеОбновлятьТипОбращения", Истина);
	ПараметрыОткрытия.Вставить("Основание", Объект.Ссылка);
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Интерес.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
	
	ОткрытьФорму("Документ.CRM_Интерес.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТипОбращенияПоУИд(УИд)
	Возврат Справочники.CRM_ТипыОбращений.ПолучитьСсылку(Новый УникальныйИдентификатор(УИд));
КонецФункции

&НаСервере
Процедура ОбновитьСоставКомандГруппыСоздать()
	
	Если НЕ ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПоддержку") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Создать_Интерес.Видимость = Ложь;
	
	СписокТиповОбращений = СписокТиповОбращений();
	
	Для Каждого ЭлементСписка Из СписокТиповОбращений Цикл
		
		Если НЕ ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда Продолжить; КонецЕсли;
		
		ПреобразованныйУИд = СтрЗаменить(ЭлементСписка.Значение.УникальныйИдентификатор(), "-", "_");
		
		// Команда
		ИмяКоманды = "КомандаСоздатьПоТипуОбращения_" + ПреобразованныйУИд;
		РезультатПоискаКомандыФормы = Команды.Найти(ИмяКоманды);
		
		Если РезультатПоискаКомандыФормы = Неопределено Тогда
			КомандаСоздатьПоТипуОбращения = Команды.Добавить(ИмяКоманды);
			КомандаСоздатьПоТипуОбращения.Заголовок  = НСтр("ru = 'Создать по типу обращения'");
			КомандаСоздатьПоТипуОбращения.Действие   = "КомандаСоздатьПоТипуОбращения";
		КонецЕсли;
		
		// Элемент формы
		ИмяЭлементаФормы = "КомандаСоздатьПоТипуОбращения_" + ПреобразованныйУИд;
		РезультатПоискаЭлементаФормы = Элементы.Найти(ИмяЭлементаФормы);
		
		Если РезультатПоискаЭлементаФормы = Неопределено Тогда
			ЭлементФормы = Элементы.Добавить(ИмяЭлементаФормы, Тип("КнопкаФормы"), Элементы.ГруппаПодменюСоздать);
			ЭлементФормы.Вид    = ВидКнопкиФормы.КнопкаКоманднойПанели;
			ЭлементФормы.Заголовок  = ЭлементСписка.Значение;
			ЭлементФормы.Картинка = ЭлементСписка.Картинка;
			ЭлементФормы.ИмяКоманды = ИмяКоманды;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастройкаРасположенияЭлементовФормы(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_НастройкаРасположенияЭлементовФормыЗавершение", ЭтотОбъект);
	CRM_УправлениеЭлементамиНаФормахКлиент.НастройкаРасположенияЭлементовФормы(ЭтотОбъект, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастройкаРасположенияЭлементовФормыЗавершение(Результат, ДопПараметры) Экспорт
	Подключаемый_НастройкаРасположенияЭлементовФормыЗавершениеСервер(Результат, ДопПараметры);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_НастройкаРасположенияЭлементовФормыЗавершениеСервер(Результат, ДопПараметры)
	CRM_УправлениеЭлементамиНаФормах.РазместитьЭлементыПоНастройке(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы_Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства")
		И ЭтотОбъект["Свойства_ИспользоватьСвойства"] И ЭтотОбъект["Свойства_ИспользоватьДопРеквизиты"] Тогда
		
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
		
		// +CRM
		ОбновитьМассивОбъектовСДопРеквизитами();
		// -CRM
		
	КонецЕсли;
	// +CRM
	CRM_УправлениеЭлементамиНаФормах.РазместитьЭлементыПоНастройке(ЭтотОбъект);
	CRM_УправлениеСвойствами.ПослеОтрисовкиДополнительныхРеквизитов(ЭтотОбъект);
	// -CRM
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеКомандПодключаемыхОтчетовИОбработок

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СПАРКРиски

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()
	ОбновитьОтображениеИндексыСПАРК();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()
	
	КонтрОбъект = ?(CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM(), Объект, Неопределено);
	КонтрПартнер = ?(CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM(), Объект["Ссылка"], ЭтотОбъект["КонтрагентПартнера"]);
	КонтрПоиск = ?(CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM(), Объект.CRM_ИНН, КонтрПартнер); // Искать по ИНН, если это CRM, иначе - по ссылке
	
	ПараметрыОтображения = Новый Структура("ВариантОтображения", "Многострочный");
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
		ИндексыСПАРКРиски,
		КонтрОбъект,
		КонтрПоиск,
		ВидКонтрагентаСПАРКРиски(КонтрПартнер),
		ЭтотОбъект,
		ПараметрыОтображения);
		
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

// Команды1СПАРКРиски
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду1СПАРКРиски(Команда)
	// +CRM_Модуль
	// СПАРКРискиКлиент.ВыполнитьПодключаемуюКоманду(Команда, ЭтотОбъект, Объект);
	СПАРКРискиКлиент.ВыполнитьПодключаемуюКоманду(Команда, ЭтотОбъект, Объект, 
					Новый Структура("КонтрагентСсылка", КонтрагентПартнера));
	// -CRM_Модуль
КонецПроцедуры

#КонецОбласти

#Область МеханизмКартинок

&НаСервере
Процедура CRM_УправлениеВидимостьюКартинки()
	Элементы.АдресКартинки.Видимость = ЗначениеЗаполнено(АдресКартинки);		
	Элементы.КомандаУстановитьЛогоФото.Видимость = НЕ ЗначениеЗаполнено(АдресКартинки);		
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьЛогоФото(Команда)
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

&НаСервере
Процедура ВывестиНедоступностьКартинки()
	АдресКартинки = "";
	Элементы.АдресКартинки.ТекстНевыбраннойКартинки
		= НСтр("ru='Картинка недоступна (недоступен том), обратитесь к администратору.'");
	Объект.CRM_Фотография = Справочники.ПартнерыПрисоединенныеФайлы.ПустаяСсылка();
	CRM_УправлениеВидимостьюКартинки();
КонецПроцедуры // ВывестиНедоступностьКартинки()

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?';en='Select an image, you need to record the object. Write down?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Если Не Записать() Тогда
            Возврат;
        КонецЕсли;
    Иначе
        Возврат;
    КонецЕсли;
    
    ДобавитьИзображениеНаКлиентеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
    
    Перем ИдентификаторФайла;
    
    ВыборИзображения   = Истина;
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    
    РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, CRM_ОбщегоНазначенияКлиент.ФильтрФайловИзображений());
	// +CRM_УТ
	#Если НЕ ВебКлиент Тогда
	// -CRM_УТ
	ВыборИзображения   = Ложь;
	// +CRM_УТ
	#КонецЕсли
	// -CRM_УТ
	
	CRM_УправлениеВидимостьюКартинки();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	Если ПустаяСтрока(АдресКартинки) Тогда Возврат; КонецЕсли;
	АдресКартинки = "";
	Объект.CRM_Фотография = ПредопределенноеЗначение("Справочник.ПартнерыПрисоединенныеФайлы.ПустаяСсылка");
	Модифицированность = Истина;
	CRM_УправлениеВидимостьюКартинки();	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?';en='Select an image, you need to record the object. Write down?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Записать();
    Иначе 
        Возврат
    КонецЕсли;
    
    ДобавитьИзображениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФрагмент()
    
    ВыборИзображения = Истина;
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    
    РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);
    ВыборИзображения = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.CRM_Фотография) Тогда
		
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.CRM_Фотография);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования';en='No image to edit'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл("CRM_Фотография", "АдресКартинки",
		НСтр("ru='Отсутствует изображение для просмотра';en='No image to view'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл(ИмяРеквизитаОбъекта, ИмяРеквизитаФормы, ТекстСообщенияОбОшибке)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(
			РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
				Объект[ИмяРеквизитаОбъекта],
				УникальныйИдентификатор));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке,, ИмяРеквизитаФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(Команда)
	
	СтруктураПараметрыВыбора =
		Новый Структура("ВладелецФайла, ЗакрыватьПриВыборе, РежимВыбора", Объект.Ссылка, Истина, Истина);

	ОткрытьФорму(
		"Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
		СтруктураПараметрыВыбора,,,,,
		Новый ОписаниеОповещения("ВыбратьКартинкуИзПрисоединенныхФайловЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайловЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ЗначениеЗаполнено(Результат) Тогда
        Объект.CRM_Фотография = Результат;
        АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор)
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаетВОрганизациях

&НаКлиенте
Процедура КлиентыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.Клиенты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Клиенты.Клиент.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
	
	ОткрытьФорму("Справочник.Партнеры.ФормаОбъекта", Новый Структура("Ключ", ТекДанные.Клиент), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КлиентыПередНачаломДобавленияЗавершение", ЭтотОбъект);
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Перед выполнением данного действия необходимо записать данные.
								   |Записать данные?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентыПередНачаломДобавленияЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда	
		Возврат;
	КонецЕсли;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("ЭтоКонтактныйКлиент", Истина);
	ПараметрыНового.Вставить("КонтактныйКлиент", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПараметрыНового", ПараметрыНового);
	
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаБыстрогоВвода", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ЛентаСобытий

&НаКлиенте
Процедура Подключаемый_ОбновитьЛенту()
	
	Лента_НеЗаполнять = Не ЗначениеЗаполнено(Объект.Ссылка) Или НеЗаполнятьЛенту;
	CRM_ЛентаСобытийКлиентСервер.ОбновитьЛенту(Объект.Ссылка, ЭтотОбъект, "ЛентаКлиента", Лента_Прокрутить, Лента_НеЗаполнять);
	
	Если ЭтоАдресВременногоХранилища(АдресПараметровОповещения) Тогда
		
		ПараметрыОповещения = ПолучитьИзВременногоХранилища(АдресПараметровОповещения);
		УдалитьИзВременногоХранилища(АдресПараметровОповещения);
		АдресПараметровОповещения = "";
		
		Оповещение = Новый ОписаниеОповещения(ПараметрыОповещения.ИмяПроцедуры, ЭтотОбъект, ПараметрыОповещения.Параметры);
		ВыполнитьОбработкуОповещения(Оповещение, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбластьВвода

&НаСервереБезКонтекста
Функция ПолучитьЦветАктивнойНадписи()
	Возврат ЦветаСтиля.CRM_ОсновнойГолубой; 
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦветНеАктивнойНадписи()
	Возврат ЦветаСтиля.ЦветТекстаКнопки; 
КонецФункции

&НаКлиенте
Процедура ПереключитьСтраницуБыстрогоВвода(Знач НовыйТипОбъекта, Знач ПолныйСброс = Ложь)
	
	Если БыстрыйВвод_ТекущийТипОбъекта = НовыйТипОбъекта И Не ПолныйСброс Тогда
		Возврат;
	КонецЕсли;
	
	Если CRM_ОбщегоНазначенияКлиент.ЭтоМобильныйКлиент() Тогда     
		ИмяТекущиейКнопки = "БыстрыйВвод_" + БыстрыйВвод_ТекущийТипОбъекта;  
		Элементы[ИмяТекущиейКнопки].ЦветТекста = ПолучитьЦветНеАктивнойНадписи();
		
		ИмяКнопки = "БыстрыйВвод_" + НовыйТипОбъекта;
		Элементы[ИмяКнопки].ЦветТекста = ПолучитьЦветАктивнойНадписи();
	Иначе	
		ИмяТекущиейКнопки = "БыстрыйВвод_" + БыстрыйВвод_ТекущийТипОбъекта;
		ТекущийШрифтКнопки = Элементы[ИмяТекущиейКнопки].Шрифт;
		Элементы[ИмяТекущиейКнопки].Шрифт = Новый Шрифт(ТекущийШрифтКнопки,,, Ложь);
		
		ИмяКнопки = "БыстрыйВвод_" + НовыйТипОбъекта;
		ШрифтКнопки = Элементы[ИмяКнопки].Шрифт;
		Элементы[ИмяКнопки].Шрифт = Новый Шрифт(ШрифтКнопки,,, Истина);  
	КонецЕсли;;
	
	ИмяТекущейСтраницы = "БыстрыйВвод_Страница" + БыстрыйВвод_ТекущийТипОбъекта;
	Элементы[ИмяТекущейСтраницы].Видимость = Ложь;
	
	ИмяСтраницы = "БыстрыйВвод_Страница" + НовыйТипОбъекта;
	Элементы[ИмяСтраницы].Видимость = Истина;
	
	БыстрыйВвод_ТекущийТипОбъекта = НовыйТипОбъекта;
	
	НастроитьОбластьВводаПоСтранице(ПолныйСброс);
	Если БыстрыйВвод_ТекущийТипОбъекта = "Примечание" Тогда
		Элементы.БыстрыйВвод_ПримечаниеТема.ОбновитьТекстРедактирования();
	КонецЕсли;
	Если БыстрыйВвод_ТекущийТипОбъекта = "Файл" Тогда
		Элементы.БыстрыйВвод_ФайлОписание.ОбновитьТекстРедактирования();
	КонецЕсли;
	
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	
	Если ПолныйСброс Тогда
		Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
	Иначе	
		ИмяКнопкиСоздать = "БыстрыйВвод_Создать" + НовыйТипОбъекта;
		Элементы[ИмяКнопкиСоздать].КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОбластьВвода()
	
	НастроитьОбластьВводаПоСтранице();
	
	// Настройки элементов.
	Элементы.БыстрыйВвод_ЗадачаПолучатель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	Элементы.БыстрыйВвод_ВзаимодействиеПолучатель.ОграничениеТипа =
		Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛицаПартнеров");
	
	ПараметрыВыбораВида = Новый Массив;
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.Направление", Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее));
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.ВидДела", Справочники.CRM_ВидыДелВзаимодействий.ПрочиеДокументы));
	Элементы.БыстрыйВвод_ВзаимодействиеВид.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораВида);
	
	Элементы.БыстрыйВвод_ЗадачаДатаОкончания_Время.Видимость = Лента_ЗначенияНастроек.ВремяВСрокахЗадач;
	Элементы.БыстрыйВвод_Письмо.Видимость	= Лента_ЗначенияНастроек.ДоступнаПочта;
	
	БыстрыйВвод_ПисьмоОтправлятьСразу = Ложь;
	НастройкиРаботыСПочтой = Взаимодействия.НастройкиРаботыСПочтой();
	Если НастройкиРаботыСПочтой.Свойство("ОтправлятьСообщенияСразу") И НастройкиРаботыСПочтой.ОтправлятьСообщенияСразу Тогда
		БыстрыйВвод_ПисьмоОтправлятьСразу = Истина;
	КонецЕсли;
	
	// Шаблоны рассылок
	СписокШаблонов.Очистить();
	ЗапросШаблонов = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШаблоныРассылки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_ШаблоныРассылки КАК ШаблоныРассылки
	|ГДЕ
	|	НЕ ШаблоныРассылки.ЭтоГруппа
	|	И НЕ ШаблоныРассылки.ШаблонОповещения");
	РезультатЗапроса = ЗапросШаблонов.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		СписокШаблонов.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	
	// Обычный ввод
	ОбычныйВвод_Команды.Очистить();
	ОписанияКоманд = CRM_ЛентаСобытий.КомандыОбычногоВводаЛенты("ЛентаКлиента", Лента_ЗначенияНастроек);
	Если ОписанияКоманд.Количество() = 0 Тогда
		Элементы.ОбычныйВвод_ПоказатьЕще.Видимость = Ложь;
	Иначе
		Для Каждого ОписаниеКоманды Из ОписанияКоманд Цикл
			НоваяКоманда = ОбычныйВвод_Команды.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяКоманда, ОписаниеКоманды);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОбластьВводаПоСтранице(Знач ПолныйСброс = Ложь)
	
	// Общее
	ТекущаяДата = ТекущаяДатаСеанса();
	БыстрыйВвод_ДатаНачала = ТекущаяДата;
	Если ПолныйСброс Тогда
		// При создании или отмене создания объекта.
		БыстрыйВвод_Тема = "";
		БыстрыйВвод_Содержание = "";
		Если БыстрыйВвод_Вложения.Количество() > 0 Тогда
			БыстрыйВвод_Вложения.Очистить();
			CRM_ЛентаСобытий.ОбновитьЭлементыВложений(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Если БыстрыйВвод_ТекущийТипОбъекта = "Примечание" Тогда
		
		ТемаЗаполнена = ЗначениеЗаполнено(БыстрыйВвод_Тема);
		ВысотаТемы = ?(ТемаЗаполнена, 3, 1);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_ПримечаниеТема", "Высота", ВысотаТемы);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_КомандыПримечание", "Видимость", ТемаЗаполнена);
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Взаимодействие" Тогда
		
		БыстрыйВвод_Тема = СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " ");
		
		ДанныеВидаВзаимодействия = CRM_ЛентаСобытий.ДанныеВидаВзаимодействияПоУмолчанию("ЛентаКлиента");
		БыстрыйВвод_ВзаимодействиеВид = ДанныеВидаВзаимодействия.Ссылка;
		Если БыстрыйВвод_Тема = "" Тогда
			БыстрыйВвод_Тема = ДанныеВидаВзаимодействия.Тема;
		КонецЕсли;
		Если БыстрыйВвод_Содержание = "" Тогда
			БыстрыйВвод_Содержание = ДанныеВидаВзаимодействия.Описание;
		КонецЕсли;
		
		БыстрыйВвод_ВзаимодействиеНаВесьДень = Ложь;
		Элементы.БыстрыйВвод_ВзаимодействиеДатаНачала_Время.Видимость = Истина;
		Элементы.БыстрыйВвод_ВзаимодействиеДатаОкончания_Время.Видимость = Истина;
		БыстрыйВвод_ДатаНачала = CRM_ОбщегоНазначенияКлиентСервер.ОкруглитьДатуДоМинут(БыстрыйВвод_ДатаНачала, 30);
		
		КоличествоСекундВМинуте		= 60;
		СтандартноеКоличествоМинут	= 30;
		
		Если ЗначениеЗаполнено(БыстрыйВвод_ВзаимодействиеВид)
				И ЗначениеЗаполнено(БыстрыйВвод_ВзаимодействиеВид.ДлительностьВстречиПоУмолчанию) Тогда
			БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала
				+ БыстрыйВвод_ВзаимодействиеВид.ДлительностьВстречиПоУмолчанию * КоличествоСекундВМинуте;
		Иначе
			БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + СтандартноеКоличествоМинут * КоличествоСекундВМинуте;
		КонецЕсли;
		
		БыстрыйВвод_ВзаимодействиеОтправитель = ТекущийПользователь;
		
		МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
		Если МодульУправлениеДоступом = Неопределено ИЛИ НЕ МодульУправлениеДоступом.РазрешенТолькоБазовыйДоступ(Объект.CRM_ОсновноеКонтактноеЛицо) Тогда
			БыстрыйВвод_ВзаимодействиеПолучатель = Объект.CRM_ОсновноеКонтактноеЛицо;
		КонецЕсли;
		
		Элементы.БыстрыйВвод_ВзаимодействиеПолучатель.Видимость = CRM_ЛентаСобытий.ЭтоПартнерСКонтактами(Объект.Ссылка);
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Задача" Тогда
		
		БыстрыйВвод_Тема = СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " ");
		
		БыстрыйВвод_ЗадачаВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДень;
		БыстрыйВвод_ДатаОкончания = CRM_ОбщегоНазначенияКлиентСервер.ОкруглитьДатуДоМинут(ТекущаяДата, 30) + 86400;
		БыстрыйВвод_ЗадачаПолучатель = ТекущийПользователь;
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Письмо" Тогда
		
		БыстрыйВвод_Тема = СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " ");
		
		БыстрыйВвод_ПисьмоПолучатели.Очистить();
		БыстрыйВвод_ПисьмоПолучателиКопий.Очистить();
		БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Очистить();
		БыстрыйВвод_ПисьмоСписокПолучателейПисьма = "";
		БыстрыйВвод_ПисьмоСписокПолучателейКопий = "";
		БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий = "";
		
		УчетныеЗаписиПочтыСписокВыбора = Элементы.БыстрыйВвод_ПисьмоОтправительПредставление.СписокВыбора;
		УчетныеЗаписиПочтыСписокВыбора.Очистить();
		CRM_УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(УчетныеЗаписиПочтыСписокВыбора,, ТекущийПользователь);
		Если УчетныеЗаписиПочтыСписокВыбора.Количество() > 0 Тогда
			УчетнаяЗаписьПоУмолчанию = CRM_ЛентаСобытий.УчетнаяЗаписьПоУмолчанию(ТекущийПользователь);
			ЭлементСписка = УчетныеЗаписиПочтыСписокВыбора.НайтиПоЗначению(УчетнаяЗаписьПоУмолчанию);
			Если ЭлементСписка = Неопределено Тогда
				ЭлементСписка = УчетныеЗаписиПочтыСписокВыбора[0];
			КонецЕсли;
			БыстрыйВвод_ПисьмоУчетнаяЗапись = ЭлементСписка.Значение;
			БыстрыйВвод_ПисьмоОтправительПредставление = ЭлементСписка.Представление;
		КонецЕсли;
		
		ВладельцыКонтактнойИнформации = Новый Массив;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВладельцыКонтактнойИнформации.Добавить(Объект.Ссылка);
			КонтактыПартнера = CRM_ЛентаСобытий.КонтактыПартнера(Объект.Ссылка);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВладельцыКонтактнойИнформации, КонтактыПартнера);
		КонецЕсли;
		
		ДанныеКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
			ВладельцыКонтактнойИнформации, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		БыстрыйВвод_ПисьмоИсторияАдресов.Очистить();
		Для Каждого Строка Из ДанныеКонтактнойИнформации Цикл
			ПредставлениеАдресаКонтакта = CRM_ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(Строка.Объект, Строка.Представление, "");
			БыстрыйВвод_ПисьмоИсторияАдресов.Добавить(ПредставлениеАдресаКонтакта);
		КонецЦикла;
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Файл" Тогда
		
		ЕстьВложения = (БыстрыйВвод_Вложения.Количество() > 0);
		ВысотаТемы = ?(ЗначениеЗаполнено(БыстрыйВвод_Тема), 3, 1);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_ФайлОписание", "Высота", ВысотаТемы);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_КомандыФайл", "Видимость", ЕстьВложения);
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Чат" Тогда
		
		Если БыстрыйВвод_ЧатПолучатели.Количество() > 0 Тогда
			ПервыйПолучатель = БыстрыйВвод_ЧатПолучатели[0];
			БыстрыйВвод_ЧатИдентификаторПолучателя = ПервыйПолучатель.Идентификатор;
			БыстрыйВвод_ЧатАдрес = ПервыйПолучатель.Адрес;
			БыстрыйВвод_ЧатПолучатель = ПервыйПолучатель.Контакт;
			БыстрыйВвод_ЧатПредставлениеПолучателя = ПервыйПолучатель.Представление;
			
			// учетная запись есть в списке доступных пользователю
			Если БыстрыйВвод_ЧатУчетныеЗаписи.НайтиСтроки(Новый Структура("УчетнаяЗапись", ПервыйПолучатель.УчетнаяЗапись)).Количество() > 0 Тогда
				БыстрыйВвод_ЧатУчетнаяЗапись = ПервыйПолучатель.УчетнаяЗапись;
				БыстрыйВвод_ЧатПредставлениеУчетнойЗаписи = ПервыйПолучатель.УчетнаяЗапись;
			КонецЕсли;
			
			БыстрыйВвод_ЧатГруппа = ПервыйПолучатель.Группа;
			БыстрыйВвод_ЧатЭтоНомерТелефона = ПервыйПолучатель.ЭтоНомерТелефона;
			БыстрыйВвод_ЧатВидКИ = ПервыйПолучатель.ВидКИ;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеРуководителя

&НаКлиенте
Процедура ПолучитьДанныеРуководителя()
	
	Если ЗначениеЗаполнено(НовыеДанныеРуководителя) Тогда
		ОтключитьОбработчикОжидания("ПолучитьДанныеРуководителя");
		ПодтвердитьОбновлениеРуководителяПоИНН();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте

Процедура ПодтвердитьОбновлениеРуководителяПоИНН()
	
	Если Объект.ЮрФизЛицо = ЭтоКомпания Тогда
		
		ПолучитьДанныеРуководителяНаСервере();
		
		Если ЕстьНовыеДанныеРуководителя Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодтвержденияОбновленияДанныхРуководителя", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Получены новые данные о руководителе.'")
				+ Символы.ПС + НСтр("ru = 'Добавить нового руководителя в справочник?'"),
				РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеРуководителяНаСервере()
	
	ЕстьНовыеДанныеРуководителя = Ложь;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|ГДЕ
		|	КонтактныеЛицаПартнеров.Владелец = &Владелец
		|	И КонтактныеЛицаПартнеров.CRM_Фамилия = &CRM_Фамилия
		|	И КонтактныеЛицаПартнеров.CRM_Имя = &CRM_Имя";
		
		Запрос.УстановитьПараметр("CRM_Фамилия", НовыеДанныеРуководителя.Фамилия);
		Запрос.УстановитьПараметр("CRM_Имя", НовыеДанныеРуководителя.Имя);
		Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если Не ВыборкаДетальныеЗаписи.Следующий() Тогда
			ЕстьНовыеДанныеРуководителя = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияОбновленияДанныхРуководителя(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбновитьДанныеРуководителяНаСервере();
		Оповестить("НовоеКонтактноеЛицоЗаписано", CRM_СозданныйКонтакт);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеРуководителяНаСервере()
	
	НовоеКонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НовоеКонтактноеЛицо, НовыеДанныеРуководителя);
	НовоеКонтактноеЛицо.Наименование = НовыеДанныеРуководителя.Фамилия + " " + НовыеДанныеРуководителя.Имя 
		+ ?(ЗначениеЗаполнено(НовыеДанныеРуководителя.Отчество), " " + НовыеДанныеРуководителя.Отчество, "");
	НовоеКонтактноеЛицо.Владелец = Объект.Ссылка;
	НовоеКонтактноеЛицо.CRM_Фамилия = НовыеДанныеРуководителя.Фамилия;
	НовоеКонтактноеЛицо.CRM_Имя = НовыеДанныеРуководителя.Имя;
	НовоеКонтактноеЛицо.CRM_Отчество = НовыеДанныеРуководителя.Отчество;
	НовоеКонтактноеЛицо.ДатаРегистрацииСвязи = ТекущаяДатаСеанса();
	НовоеКонтактноеЛицо.Автор = ТекущийПользователь;
	НовоеКонтактноеЛицо.Записать();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ОтложенныеДействияПриОткрытии()
	
	ОтложенныеДействияПриОткрытииНаСервере();
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		// ИнтернетПоддержкаПользователей.СПАРКРиски
		СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Объект);
		// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	КонецЕсли;
	
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОтложенныеДействияПриОткрытииНаСервере()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
		
		// +CRM
		ОбновитьМассивОбъектовСДопРеквизитами();
		// -CRM
		
		CRM_УправлениеСвойствами.ПослеОтрисовкиДополнительныхРеквизитов(ЭтотОбъект);
		
	КонецЕсли;
	
	CRM_УправлениеКонтактнойИнформацией.ВыполнитьОтложеннуюИнициализацию(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация");
	УстановитьВидимостьРеквизитовКИ();
	
	// +CRM_Модуль
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски

	//ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Однострочный");
	//СПАРКРиски.ПриСозданииНаСервере(
	//	ЭтотОбъект,
	//	Неопределено,
	//	Объект.Ссылка,
	//	ВидКонтрагентаСПАРКРиски(Объект.Ссылка),
	//	ПараметрыПроцедуры);
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		Контрагент = КонтрагентПартнера;
		ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Многострочный");
		СПАРКРиски.ПриСозданииНаСервере(ЭтотОбъект, Объект, Контрагент, 
			Перечисления.ЮрФизЛицо.ВидКонтрагентаСПАРКРиски(Контрагент), ПараметрыПроцедуры);
		
		ДополнительныеПараметрыСПАРК = Новый Структура("КонтрагентСсылка", КонтрагентПартнера);
		СПАРКРиски.ДобавитьПодключаемыеКомандыКонтрагента(ЭтотОбъект, Объект, Элементы.ПодменюСПАРК, ДополнительныеПараметрыСПАРК);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

	// -CRM_Модуль
	
	МассивТиповКИ = Новый Массив;
	МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	CRM_КлиентыСервер.ИнициализацияКонтактныхЛицПартнера(ЭтотОбъект, МассивТиповКИ, "Объект.CRM_ОсновноеКонтактноеЛицо");
	CRM_КлиентыСервер.ВывестиКонтактныеЛицаПартнера(ЭтотОбъект, Объект.Ссылка, Объект.CRM_ОсновноеКонтактноеЛицо, "ГруппаКонтакты", МассивТиповКИ, Истина);
	СоздатьКнопкуСвернуть();
	ЗаполнитьСписокВыбораВзаимодействиеПолучатель();
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		Если ТипЗнч(Параметры.ПараметрыНового) = Тип("Структура") Тогда
			Если Параметры.ПараметрыНового.Свойство("Наименование") Тогда
				Объект.Наименование = Параметры.ПараметрыНового.Наименование;
			КонецЕсли;
			
			Если Параметры.ПараметрыНового.Свойство("АдресПочты") Тогда
				МассивДопРеквизитов = 
					ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"].НайтиСтроки(Новый Структура("Тип, Вид",
						Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
						Справочники.ВидыКонтактнойИнформации.EmailПартнера));
				Если МассивДопРеквизитов.количество() > 0 Тогда
					МассивДопРеквизитов[0].Представление = Параметры.ПараметрыНового.АдресПочты;
					МассивДопРеквизитов[0].Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Параметры.ПараметрыНового.АдресПочты, МассивДопРеквизитов[0].Вид);
					CRM_УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Объект, МассивДопРеквизитов[0].Значение, МассивДопРеквизитов[0].Вид, МассивДопРеквизитов[0].Тип, , , Ложь);
					ЭтотОбъект[МассивДопРеквизитов[0].ИмяРеквизита] = МассивДопРеквизитов[0].Представление;
				КонецЕсли;
			КонецЕсли;
			
			Если Параметры.ПараметрыНового.Свойство("Телефон") Тогда
				МассивДопРеквизитов = ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"].НайтиСтроки(
					Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон,
					Справочники.ВидыКонтактнойИнформации.ТелефонПартнера));
				Если МассивДопРеквизитов.количество() > 0 Тогда
					МассивДопРеквизитов[0].Представление = Параметры.ПараметрыНового.Телефон;
					МассивДопРеквизитов[0].Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Параметры.ПараметрыНового.Телефон, МассивДопРеквизитов[0].Вид);
					CRM_УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Объект, МассивДопРеквизитов[0].Значение, МассивДопРеквизитов[0].Вид, МассивДопРеквизитов[0].Тип, , , Ложь);
					ЭтотОбъект[МассивДопРеквизитов[0].ИмяРеквизита] = МассивДопРеквизитов[0].Представление;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(CRM_СсылкаНаИсточникДанных) Тогда
		// Заполнение КИ по ПК
		
		СтрокаТелефонаПотенциальногоКлиента = CRM_СсылкаНаИсточникДанных.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента, "Вид");
		СтрокаЭлектронногоАдресаПотенциальногоКлиента = CRM_СсылкаНаИсточникДанных.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента, "Вид");
		СтрокаДругойКИПотенциальногоКлиента = CRM_СсылкаНаИсточникДанных.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.ВебСтраница, "Тип");
		ЗаполнениеМессенджераДоступно = НЕ (СтрокаДругойКИПотенциальногоКлиента = Неопределено)
		И Метаданные.Обработки.Найти("CRM_РаботаСМессенджером"+СтрокаДругойКИПотенциальногоКлиента.Вид.Наименование) <> Неопределено;
		
		
		Если Не СкопироватьКИПотенциальногоКлиента Тогда // иначе КИ была скопирована выше
			
			// Телефон:
			Если НЕ (СтрокаТелефонаПотенциальногоКлиента = Неопределено) Тогда
				МассивДопРеквизитов = ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"].НайтиСтроки(
					Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон,
					Справочники.ВидыКонтактнойИнформации.ТелефонПартнера));
				Если МассивДопРеквизитов.количество() > 0 Тогда
					МассивДопРеквизитов[0].Представление = СтрокаТелефонаПотенциальногоКлиента.Представление;
					МассивДопРеквизитов[0].Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СтрокаТелефонаПотенциальногоКлиента.Представление, МассивДопРеквизитов[0].Вид);
					CRM_УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Объект, МассивДопРеквизитов[0].Значение, МассивДопРеквизитов[0].Вид, МассивДопРеквизитов[0].Тип, , , Ложь);
					ЭтотОбъект[МассивДопРеквизитов[0].ИмяРеквизита] = МассивДопРеквизитов[0].Представление;
				КонецЕсли;
				
			КонецЕсли;
			
			// Email:
			Если НЕ (СтрокаЭлектронногоАдресаПотенциальногоКлиента = Неопределено) Тогда
				МассивДопРеквизитов = ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"].НайтиСтроки(
					Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
					Справочники.ВидыКонтактнойИнформации.EmailПартнера));
				Если МассивДопРеквизитов.количество() > 0 Тогда
					МассивДопРеквизитов[0].Представление = СтрокаЭлектронногоАдресаПотенциальногоКлиента.Представление;
					МассивДопРеквизитов[0].Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СтрокаЭлектронногоАдресаПотенциальногоКлиента.Представление, МассивДопРеквизитов[0].Вид);
					CRM_УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Объект, МассивДопРеквизитов[0].Значение, МассивДопРеквизитов[0].Вид, МассивДопРеквизитов[0].Тип, , , Ложь);
					ЭтотОбъект[МассивДопРеквизитов[0].ИмяРеквизита] = МассивДопРеквизитов[0].Представление;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ (СтрокаТелефонаПотенциальногоКлиента = Неопределено) Тогда
			Контакт_Телефон = СтрокаТелефонаПотенциальногоКлиента.Представление;
		КонецЕсли;
		
		Если НЕ (СтрокаЭлектронногоАдресаПотенциальногоКлиента = Неопределено) Тогда
			Контакт_Email = СтрокаЭлектронногоАдресаПотенциальногоКлиента.Представление;
		КонецЕсли;
		
		Если ЗаполнениеМессенджераДоступно Тогда
			Контакт_МессенджерВид = Обработки["CRM_РаботаСМессенджером"+СтрокаДругойКИПотенциальногоКлиента.Вид.Наименование].ПолучитьВидКИМессенджера(Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
			Контакт_Мессенджер = СтрокаДругойКИПотенциальногоКлиента.Представление;
			Элементы.Контакт_Мессенджер.Видимость = Истина;
			Элементы.Контакт_Мессенджер.Заголовок = Контакт_МессенджерВид;
		КонецЕсли;
	КонецЕсли;

	CRM_Теги.ПриЧтенииНаСервере(ЭтотОбъект, Элементы);
	CRM_Теги.УстановитьПараметрыВыбора(Элементы);
	Теги_ВыполненаОтложеннаяИнициализация = Истина;
	
	Элементы.ГруппаНаименованиеВнутр.Группировка = ?(
		Элементы.СтрокаТегов_1.ПодчиненныеЭлементы.Количество() >= 2,
		ГруппировкаПодчиненныхЭлементовФормы.Вертикальная,
		ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда
	);
	
	CRM_УправлениеЭлементамиНаФормах.ПриСозданииНаСервере(ЭтотОбъект, "КоманднаяПанельФормы", "ГруппаДополнительно");
	
	ОбновитьСоставКомандГруппыСоздать();
	
	// ЛентаСобытий
	Лента_НеЗаполнять = Не ЗначениеЗаполнено(Объект.Ссылка) Или НеЗаполнятьЛенту;
	CRM_ЛентаСобытийКлиентСервер.ОбновитьЛенту(Объект.Ссылка, ЭтотОбъект, "ЛентаКлиента", Ложь, Лента_НеЗаполнять);
	// Конец ЛентаСобытий
	
	Элементы.ДекорацияРазделительКонтактов.Видимость = Истина;
	Элементы.ДекорацияРазделитетьКИ.Видимость = Истина;
	Элементы.ДекорацияЗаголовокКИОбщей.Видимость = Истина;
	
	CRM_КонтрольЗаполненностиРеквизитовОбъектов.ОтобразитьПроцентЗаполнения(ЭтотОбъект, Объект);
	
	Если CRM_ОбщегоНазначенияПовтИсп.ИспользоватьCRM() Тогда
		ОписаниеОшибкиСервисы = "";
		СервисыДоступны = CRM_ЛицензированиеЭкспортныеМетоды.ПроверитьПодключениеКОтраслевымСервисам(ОписаниеОшибкиСервисы);
		Если Не СервисыДоступны Тогда
			Элементы.СтатусРаботы_Обновить.Видимость = Ложь;
			Элементы.СтатусРаботы_Предупреждение.Видимость = Истина;
		КонецЕсли;
	Иначе
		Элементы.СтатусРаботы_Обновить.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДопТелефоныПолучитьНаСервере(КонтактноеЛицо)
	
	СписокТелефонов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид КАК Вид,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид.Представление КАК ВидПредставление,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление КАК Представление
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
		|ГДЕ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = &КонтактноеЛицо
		|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Вид,
		|	Представление
		|ИТОГИ ПО
		|	Вид";
	
	Запрос.УстановитьПараметр("КонтактноеЛицо", КонтактноеЛицо);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаВид = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВид.Следующий() Цикл
		
		СписокТелефонов.Добавить(ВыборкаВид.Вид);
		
		ВыборкаДетальныеЗаписи = ВыборкаВид.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокТелефонов.Добавить(ВыборкаДетальныеЗаписи.Представление, "   " + ВыборкаДетальныеЗаписи.Представление);
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокТелефонов;
	
КонецФункции

&НаКлиенте
Процедура ВыборТелефонаИзМенюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или ТипЗнч(Результат.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") 
		Или Не сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура("Основание", Объект.Ссылка);
	сфпСофтФонПроКлиент.сфпПозвонить(Результат.Значение, ДополнительныеПараметры, Новый Структура("ДанныеЗаполнения", ДанныеЗаполнения));
	
КонецПроцедуры

&НаСервере
Функция ДопАдресаЭППолучитьНаСервере(КонтактноеЛицо)
	
	СписокАдресовЭП = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид КАК Вид,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид.Представление КАК ВидПредставление,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление КАК Представление
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
		|ГДЕ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = &КонтактноеЛицо
		|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Вид,
		|	Представление
		|ИТОГИ ПО
		|	Вид";
	
	Запрос.УстановитьПараметр("КонтактноеЛицо", КонтактноеЛицо);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаВид = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВид.Следующий() Цикл
		
		СписокАдресовЭП.Добавить(ВыборкаВид.Вид);
		
		ВыборкаДетальныеЗаписи = ВыборкаВид.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокАдресовЭП.Добавить(ВыборкаДетальныеЗаписи.Представление, "   " + ВыборкаДетальныеЗаписи.Представление);
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокАдресовЭП;
	
КонецФункции

&НаКлиенте
Процедура ВыборАдресаЭПИзМенюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или ТипЗнч(Результат.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
	ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.Ссылка);
	СписокАдресов = Новый СписокЗначений;
	СписокАдресов.Добавить(ДополнительныеПараметры, Результат.Значение);
	ПараметрыФормы.Вставить("Кому", СписокАдресов);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

// +Классификаторы
#Область Подключаемый_Классификаторы

&НаКлиенте
Процедура Подключаемый_ЗапретМодификацииСоставаКлассификаторов(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // Подключаемый_ЗапретМодификацииСоставаКлассификаторов()

&НаКлиенте
Процедура Подключаемый_ОбщимСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтотОбъект,
		ТекущиеДанные.КлючСтроки,
		ТекущиеДанные.Включен);
	
КонецПроцедуры // Подключаемый_ОбщимСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОтдельнымСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтотОбъект,
		ТекущиеДанные.КлючСтроки,
		ТекущиеДанные.Включен);
	
КонецПроцедуры // Подключаемый_ОтдельнымСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОдиночноеЗначение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПакетно(ЭтотОбъект, Элемент.Имя);
		
КонецПроцедуры // Подключаемый_ОдиночноеЗначение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Вхождение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтотОбъект, Элемент.Имя, ЭтотОбъект[Элемент.Имя]);
	
КонецПроцедуры // Подключаемый_Вхождение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Классификатор_ДобавитьТег(Элемент)

	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПоЗначению(ЭтотОбъект, 
		ЭтотОбъект[Элемент.Имя],
		Истина);
	Подключаемый_ТегиКлассификатора_Обновить();
	
КонецПроцедуры // Подключаемый_Классификатор_ДобавитьТег()

&НаКлиенте
Процедура Подключаемый_ТегКлассификатора_ОбработкаСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	CRM_КлассификаторыКлиентСервер.ОбработкаНавигационнойСсылкиТегаКлассификаторов(ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	Подключаемый_ТегиКлассификатора_Обновить();
	
КонецПроцедуры // Подключаемый_ТегКлассификатора_ОбработкаСсылки()

&НаСервере
Процедура Подключаемый_ТегиКлассификатора_Обновить()
	
	CRM_КлассификаторыЭкспортныеМетоды.СформироватьТегиКлассификаторов(ЭтотОбъект);
	
КонецПроцедуры // Подключаемый_ТегиКлассификатора_Обновить()

&НаКлиенте
Процедура ГиперссылкаПерейтиЗначенияКлассификаторовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Отбор = Новый Структура;
	Отбор.Вставить("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ОткрытьФорму("РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов.Форма.ФормаСпискаКонтекст", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура Классификаторы_Показать(Команда)
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "CRM_ТаблицаКлассификаторов") Тогда
		КлассификаторыВыполнитьОтложеннуюИнициализацию();
	КонецЕсли;
	
	Элементы.ГруппаКлассификация.Показать();
	ПодключитьОбработчикОжидания("Подключаемый_Классификаторы_Скрыть", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Классификаторы_Скрыть()
	
	Если Элементы.ГруппаКлассификация.Скрыта() Тогда
		ТекущийЭлемент = Элементы.Классификаторы_Показать;
		ОтключитьОбработчикОжидания("Подключаемый_Классификаторы_Скрыть");
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_Классификаторы_Скрыть", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КлассификаторыВыполнитьОтложеннуюИнициализацию()
	
	CRM_КлассификаторыЭкспортныеМетоды.ФормаОбъектаПриЧтенииНаСервере(ЭтотОбъект, Объект.Ссылка);
	
	Классификаторы_ВыполненаОтложеннаяИнициализация = Истина;
	
КонецПроцедуры

#КонецОбласти
// -Классификаторы

&НаКлиенте
Процедура CRM_АдресаОфисовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если НЕ Копирование Тогда
		// Отменить стандартную обработку и параметризовать форму нового.
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗавершенияДобавленияАдреса", ЭтотОбъект);
		ОткрытьФорму("Справочник.CRM_АдресаОфисовКомпании.Форма.ФормаЭлемента", Новый Структура("Владелец", Объект.Ссылка), ЭтотОбъект,,,, ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

#Область СвязиМеждуПартнерами

&НаКлиенте
Процедура СвязиМеждуПартнерамиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если НЕ Копирование Тогда
		// Отменить стандартную обработку и параметризовать форму нового.
		Отказ = Истина;
		ОткрытьФорму("РегистрСведений.СвязиМеждуПартнерами.ФормаЗаписи", Новый Структура("Партнер", Объект.Ссылка), ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвязиМеждуПартнерамиПослеУдаления(Элемент)
	ОбновитьЗаголовокСвязиМеждуПартнерами();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокСвязиМеждуПартнерами()
	ЗаголовокСвязей = НСтр("ru='Связанные партнеры'; en='Related partners'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		КоличествоСвязей = КоличествоСвязейМеждуПартнерамиНаСервере(Объект.Ссылка, РегистрироватьСвязиВИнтересах);
		Если КоличествоСвязей > 0 Тогда
			ЗаголовокСвязей = ЗаголовокСвязей + " (" + КоличествоСвязей + ")"
		КонецЕсли;
	КонецЕсли;
	Если Элементы.СвязанныеПартнеры.Заголовок <> ЗаголовокСвязей Тогда
		Элементы.СвязанныеПартнеры.Заголовок = ЗаголовокСвязей;
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоСвязейМеждуПартнерамиНаСервере(Партнер, РегистрироватьСвязиВИнтересах)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СвязиМеждуПартнерами.CRM_Интерес КАК Интерес
	                      |ПОМЕСТИТЬ Связи
	                      |ИЗ
	                      |	РегистрСведений.СвязиМеждуПартнерами КАК СвязиМеждуПартнерами
	                      |ГДЕ
	                      |	СвязиМеждуПартнерами.ПервыйПартнер = &Партнер
	                      |	И ИСТИНА
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	СвязиМеждуПартнерами.CRM_Интерес
	                      |ИЗ
	                      |	РегистрСведений.СвязиМеждуПартнерами КАК СвязиМеждуПартнерами
	                      |ГДЕ
	                      |	СвязиМеждуПартнерами.ВторойПартнер = &Партнер
	                      |	И ИСТИНА
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	КОЛИЧЕСТВО(Связи.Интерес) КАК Интерес
	                      |ИЗ
	                      |	Связи КАК Связи");
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Если Не РегистрироватьСвязиВИнтересах Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИСТИНА",
			"СвязиМеждуПартнерами.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)");
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Интерес;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьШаблоны(Команда)
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ПоказатьШаблоныЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОповещениеЗавершения, СписокШаблонов, Элементы.БыстрыйВвод_ПоказатьШаблоны);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьШаблоныЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Шаблон = ВыбранныйЭлемент.Значение;
	CRM_ЛентаСобытийКлиент.ПоказатьПолнуюФормуОбъекта("ЛентаИнтереса", БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект);
	Шаблон = ПредопределенноеЗначение("Справочник.CRM_ШаблоныРассылки.ПустаяСсылка");
	ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
	
КонецПроцедуры

&НаСервере
Процедура БыстрыйВвод_ОбновитьЭлементыВложений()
	
	CRM_ЛентаСобытий.ОбновитьЭлементыВложений(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТегов

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Тег".
//
Процедура ТегПриИзменении(Элемент)
	
	Если Не Теги_ВыполненаОтложеннаяИнициализация Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ТегиКлиент.ТегПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Создание" элемента формы "Тег".
//
Процедура ТегСоздание(Элемент, СтандартнаяОбработка)
	
	Если Не Теги_ВыполненаОтложеннаяИнициализация Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ТегиКлиент.ТегСоздание(Элемент, СтандартнаяОбработка, ТекущееПодразделение);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаНавигационнойСсылки" элемента формы "Тег".
&НаКлиенте
Процедура Подключаемый_ТегОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)	
	CRM_ТегиКлиент.ТегОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
// Процедура обновляет отображение тегов на форме.
//
Процедура ОбновитьОблакоТегов()
	
	CRM_Теги.ОбновитьОблакоТегов(ЭтотОбъект);
	
	Элементы.ГруппаНаименованиеВнутр.Группировка = ?(
		Элементы.СтрокаТегов_1.ПодчиненныеЭлементы.Количество() >= 2,
		ГруппировкаПодчиненныхЭлементовФормы.Вертикальная,
		ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда
	);
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Процедура ПолучитьДанныеВыбораФИОНаСервере(СтрокаПоиска, ЭтоФамилия = Ложь, ЭтоИмя = Ложь,
	 ДанныеВыбора,
	 СтандартнаяОбработка)
	
	СписокФИО = CRM_КлиентыСервер.ПолучитьДанныеВыбораФИО(СтрокаПоиска, ЭтоФамилия, ЭтоИмя);
	Если СписокФИО.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокФИО;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФИО(Команда)
	
	СтруктураЗаполнения = ЗаполнитьФИОНаСервере();
	
	ОтредактированоФИО = (ЗначениеЗаполнено(Объект.CRM_Фамилия) И Не Объект.CRM_Фамилия = СтруктураЗаполнения.CRM_Фамилия)
		Или (ЗначениеЗаполнено(Объект.CRM_Имя) И Не Объект.CRM_Имя = СтруктураЗаполнения.CRM_Имя) 
		Или (ЗначениеЗаполнено(Объект.CRM_Отчество) И Не Объект.CRM_Отчество = СтруктураЗаполнения.CRM_Отчество);
	
	Если ОтредактированоФИО Тогда
		ТекстВопроса = НСтр("ru = 'Переписать ФИО?'");
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПереписатьФИОЗавершение", ЭтотОбъект,
			СтруктураЗаполнения), ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереписатьФИОЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Ответ = РезультатВопроса;

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьЗначенияСвойств(Объект, ДополнительныеПараметры);
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьФИОНаСервере()
	
	СтруктураФИО = Новый Структура("CRM_Фамилия, CRM_Имя, CRM_Отчество");
	НаименованиеТекущее = Объект.Наименование;
	Справочники.CRM_ВысокочастотныеФИО.ДополнитьНедостающиеФИОПоНаименованию(НаименованиеТекущее, 
		СтруктураФИО.CRM_Фамилия, СтруктураФИО.CRM_Имя, СтруктураФИО.CRM_Отчество);
	Возврат СтруктураФИО;
	
КонецФункции


#Область ДублиКлиента

&НаСервереБезКонтекста
Процедура ДублиКлиентаДобавлениеНаСервере(Оригинал, Дубль)
	ЗаписьДубля = РегистрыСведений.CRM_ДублиКлиентовИКонтактов.СоздатьМенеджерЗаписи();
	ЗаписьДубля.Контакт = Дубль;
	ЗаписьДубля.Оригинал = Оригинал;
	ЗаписьДубля.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ДублиКлиентаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения("ДублиКлиентаДобавление", ЭтотОбъект);
	// +CRM_Модуль: форма выбора вместо CRM_ФормаВыбора:
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаВыбора",, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДублиКлиентаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	Дубли_Удалить(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДублиКлиентаДобавление(Дубль, ДопПараметр) Экспорт
	Если ЗначениеЗаполнено(Дубль) Тогда
		Если Объект.Ссылка = Дубль Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нельзя выбирать текущий элемент!'"));
			Возврат;
		КонецЕсли;
		ДублиКлиентаДобавлениеНаСервере(Объект.Ссылка, Дубль);
		Элементы.ДублиКлиента.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Дубли_ДобавитьНаСервере(Оригинал, Дубль)
	РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ЗаписатьДубль(Оригинал, Дубль);
	СформироватьТаблицуДублей();
КонецПроцедуры

&НаКлиенте
Процедура Дубли_Добавить(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("Дубли_Добавить_Продолжение", ЭтотОбъект);
	// +CRM_Модуль: форма выбора вместо CRM_ФормаВыбора:
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаВыбора",, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура Дубли_Добавить_Продолжение(Дубль, ДопПараметр) Экспорт
	Если ЗначениеЗаполнено(Дубль) Тогда
		Если Объект.Ссылка = Дубль Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нельзя выбирать текущий элемент!'"));
			Возврат;
		КонецЕсли;
		Если ДублиКлиента.НайтиСтроки(Новый Структура("Контакт", Дубль)).Количество()>0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выбранный элемент уже есть в списке дублей!'"));
			Возврат;
		КонецЕсли;
		Дубли_ДобавитьНаСервере(Объект.Ссылка, Дубль);
		Элементы.ДублиКлиента.Обновить();
		Дубли_ОбновитьЗаголовок();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Дубли_ОтметитьКакОригиналНаСервере(Контакт)
	РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ОтметитьКакОригинал(Контакт);
	СформироватьТаблицуДублей();
КонецПроцедуры

&НаКлиенте
Процедура Дубли_ОтметитьКакОригинал(Команда)
	Если Элементы.ДублиКлиента.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Дубли_ОтметитьКакОригиналНаСервере(Элементы.ДублиКлиента.ТекущиеДанные.Контакт);
	Элементы.ДублиКлиента.Обновить();
	Дубли_ОбновитьЗаголовок();
КонецПроцедуры

&НаСервере
Процедура Дубли_УдалитьНаСервере(Контакт)
	РегистрыСведений.CRM_ДублиКлиентовИКонтактов.УдалитьДубль(Контакт);
	СформироватьТаблицуДублей();
КонецПроцедуры

&НаКлиенте
Процедура Дубли_Удалить(Команда)
	Если Элементы.ДублиКлиента.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	ИначеЕсли Элементы.ДублиКлиента.ТекущиеДанные.ЭтоОригинал Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нельзя удалить дубль, помеченный как оригинал!'"));
		Возврат;
	КонецЕсли;
	Дубли_УдалитьНаСервере(Элементы.ДублиКлиента.ТекущиеДанные.Контакт);
КонецПроцедуры

&НаСервере
Процедура Дубли_ОбновитьЗаголовок()
	Дубли_Заголовок = НСтр("ru = 'Дубли'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Дубли_Количество = Дубли_КоличествоДублей(Объект.Ссылка);
		Если Дубли_Количество > 0 Тогда
			Дубли_Заголовок = Дубли_Заголовок + " (" + Дубли_Количество + ")"
		КонецЕсли;
	КонецЕсли;
	Если Элементы.ГруппаДублиКлиента.Заголовок <> Дубли_Заголовок Тогда
		Элементы.ГруппаДублиКлиента.Заголовок = Дубли_Заголовок;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция Дубли_КоличествоДублей(Ссылка)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал КАК Оригинал
	               |ПОМЕСТИТЬ ВТОригинал
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт = &ТекОбъект
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт КАК Контакт
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал = &ТекОбъект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт = &ТекОбъект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт
	               |ИЗ
	               |	ВТОригинал КАК ВТОригинал
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |		ПО ВТОригинал.Оригинал = CRM_ДублиКлиентовИКонтактов.Оригинал
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт <> &ТекОбъект
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контакт)
	               |ПО
	               |	ОБЩИЕ";
	Запрос.УстановитьПараметр("ТекОбъект", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Контакт;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция Дубли_ТаблицаДублей(Ссылка)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал КАК Оригинал
	               |ПОМЕСТИТЬ ВТОригинал
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт = &ТекОбъект
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт КАК Контакт,
	               |	CRM_ДублиКлиентовИКонтактов.Заменить КАК Заменить,
	               |	CRM_ДублиКлиентовИКонтактов.Комментарий КАК Комментарий,
	               |	CRM_ДублиКлиентовИКонтактов.Дата КАК Дата,
	               |	CRM_ДублиКлиентовИКонтактов.Автор КАК Автор,
	               |	ЛОЖЬ КАК ЭтоОригинал
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал = &ТекОбъект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал,
	               |	ЛОЖЬ,
	               |	CRM_ДублиКлиентовИКонтактов.Комментарий,
	               |	CRM_ДублиКлиентовИКонтактов.Дата,
	               |	CRM_ДублиКлиентовИКонтактов.Автор,
	               |	ИСТИНА
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт = &ТекОбъект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт,
	               |	CRM_ДублиКлиентовИКонтактов.Заменить,
	               |	CRM_ДублиКлиентовИКонтактов.Комментарий,
	               |	CRM_ДублиКлиентовИКонтактов.Дата,
	               |	CRM_ДублиКлиентовИКонтактов.Автор,
	               |	ЛОЖЬ
	               |ИЗ
	               |	ВТОригинал КАК ВТОригинал
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |		ПО ВТОригинал.Оригинал = CRM_ДублиКлиентовИКонтактов.Оригинал
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт <> &ТекОбъект";
	Запрос.УстановитьПараметр("ТекОбъект", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

&НаСервере
Процедура СформироватьТаблицуДублей()
	
	Если Объект.Ссылка.Пустая() Тогда
		
	Иначе
		ЗначениеВРеквизитФормы(Дубли_ТаблицаДублей(Объект.Ссылка), "ДублиКлиента");
		Дубли_ОбновитьЗаголовок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДублиКлиентаПриИзмененииНаСервере(Оригинал, Дубль, Заменить, Комментарий)
	РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ЗаписатьДубль(Оригинал, Дубль, Заменить, Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ДублиКлиентаПриИзменении(Элемент)
	ТекДанные = Элемент.ТекущиеДанные;
	СтрОригинал = ДублиКлиента.НайтиСтроки(Новый Структура("ЭтоОригинал", Истина));
	Если СтрОригинал.Количество() Тогда
		Оригинал = СтрОригинал[0].Контакт;
	Иначе
		Оригинал = Объект.Ссылка;
	КонецЕсли;
	ДублиКлиентаПриИзмененииНаСервере(Оригинал, ТекДанные.Контакт, ТекДанные.Заменить, ТекДанные.Комментарий);
КонецПроцедуры

#КонецОбласти

 #Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = РаспознаваниеРечи_МассивИменЭлементов();
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = РаспознаваниеРечи_МассивИменЭлементов();
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.Наименование);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ИмяРеквизита",                     "Объект.Наименование");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекЭлемент = Контекст.Форма.ТекущийЭлемент;
	ИмяРеквизита = "";
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяЭлемента", ТекЭлемент.Имя);
	
	НайденныеСтроки = ЭтотОбъект["РаспознаваниеРечи_ТаблицаЭлементов"].НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = НайденныеСтроки[0].ИмяРеквизита;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		ТекЭлемент,
		ИмяРеквизита,
		РезультатРаспознавания);
	
	РаспознанныйТекст = CRM_ОбработкаРаспознанногоТекстаКлиентСервер.ТекстИзРезультатаРаспознавания(РезультатРаспознавания);
	Если ТекЭлемент.Имя = "БыстрыйВвод_ПримечаниеТема" Тогда
		РаспознанныйТекст = ТекЭлемент.ТекстРедактирования + РаспознанныйТекст;
		БыстрыйВвод_ПримечаниеТемаИзменениеТекстаРедактирования(ТекЭлемент, РаспознанныйТекст, Истина);
	ИначеЕсли ТекЭлемент.Имя = "БыстрыйВвод_ФайлОписание" Тогда
		РаспознанныйТекст = ТекЭлемент.ТекстРедактирования + РаспознанныйТекст;
		БыстрыйВвод_ФайлОписаниеИзменениеТекстаРедактирования(ТекЭлемент, РаспознанныйТекст, Истина);
	Иначе
		// Обработка не требуется. Распознанный текст уже заполнен.
	КонецЕсли;
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивИменЭлементов()
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("РаспознаваниеРечи");
	
	Возврат МассивЭлементов;
	
КонецФункции

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Наименование");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Комментарий");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ПримечаниеТема");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ВзаимодействиеТема");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_Содержание");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ЗадачаТема");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_Описание");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ПисьмоТема");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ПисьмоСодержание");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ЧатСодержание");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ФайлОписание");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

#Область УниверсальныеОбработчикиСобытий

&НаКлиенте
Процедура Подключаемый_ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ПартнерыИКонтрагентыЛокализацияКлиент.ОкончаниеВводаТекста_Контрагент(Элемент,
		Текст,
		ДанныеВыбора,
		Параметры,
		СтандартнаяОбработка,
		ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент)
	ПартнерыИКонтрагентыЛокализацияКлиент.ПриИзмененииРеквизита_Контрагент(
		Элемент,
		ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылкиФормы(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПартнерыИКонтрагентыЛокализацияКлиент.ОбработкаНавигационнойСсылкиФормы_Контрагент(Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииИзмененияРеквизитаЛокализации(ИмяЭлемента, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ТребуетсяВызовСервера Тогда
		ПриОкончанииИзмененияРеквизитаЛокализацииНаСервере(ИмяЭлемента, ДополнительныеПараметры.ПараметрыОбработки);
	КонецЕсли;
	
	Если ИмяЭлемента = "ГоловнойКонтрагент" Тогда
		ГоловнойКонтрагентПриИзменении(Элементы.ГоловнойКонтрагент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриОкончанииИзмененияРеквизитаЛокализацииНаСервере(ИмяЭлемента, ПараметрыОбработки)
	
	ПартнерыИКонтрагентыЛокализация.ПриОкончанииИзмененияРеквизита_Контрагент(ИмяЭлемента, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольЗаполнения

&НаКлиенте
Процедура Подключаемый_ОбновитьПроцентЗаполнения(Команда)

	CRM_КлиентыКлиент.ОбновитьПроцентЗаполнения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьНастройкиЗаполнения(Команда)
	
	ПараметрыНастройки = Новый Структура("СтатусРаботыСКлиентом, ТипОбъекта",
		Объект.CRM_СтатусРаботы, "Справочник.Партнеры");
	ОткрытьФорму("Справочник.CRM_ПравилаРасчетаКачестваЗаполненияДанных.Форма.ФормаНастройки", ПараметрыНастройки);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетСтатусовРаботыСКлиентами

&НаСервереБезКонтекста
Процедура СтатусРаботы_ОбновитьНаСервере(Клиент)
	CRM_КлиентыСервер.CRM_РасчетСтатусовРаботыСКлиентами(Клиент);
КонецПроцедуры

&НаКлиенте
Процедура СтатусРаботы_Обновить(Команда)
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'На форме есть несохраненные данные, необходимо записать объект.'"));
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСтатусРаботы_Настройка.Скрыть();
	СтатусРаботы_ОбновитьНаСервере(Объект.Ссылка);
	Прочитать();
КонецПроцедуры

&НаКлиенте
Процедура СтатусРаботы_Предупреждение(Команда)
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть();
КонецПроцедуры

&НаКлиенте
Процедура СтатусРаботы_Настройка(Команда)
	Элементы.ГруппаСтатусРаботы_Настройка.Скрыть();
	ОткрытьФорму("Справочник.CRM_СтатусыРаботыСКлиентом.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура CRM_СтатусРаботыПриИзменении(Элемент)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(
		"CRM_Статистика.Клиенты.КарточкаКлиента.КоличествоВыбораВариантаВСтрокеСтатусыРаботы");
	
	ЦветСтатусаРаботы = ЦветСтатусаРаботы(Объект.CRM_СтатусРаботы);
	
	Элементы.CRM_СтатусРаботы.ЦветФона   = ЦветСтатусаРаботы;
	Элементы.CRM_СтатусРаботы.ЦветТекста = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(ЦветСтатусаРаботы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЦветСтатусаРаботы(Статус)
	Возврат CRM_ОбщегоНазначенияКлиентСервер.ЦветИзСтрокиRGB(Статус.ЦветФона);
КонецФункции

#КонецОбласти

