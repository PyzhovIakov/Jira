
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИспользоватьПодразделения = CRM_ОбщегоНазначенияПовтИсп.ИспользоватьПодразделения();
	
	Элементы.ОтборПодразделениеДляТегов.Видимость = ИспользоватьПодразделения;
	
	ПартнерыИКонтрагенты.ПартнерыФормаВыбораСпискаПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ИспользоватьПолнотекстовыйПоиск = ОбщегоНазначенияУТВызовСервера.ИспользуетсяПолнотекстовыйПоиск("ИспользоватьПолнотекстовыйПоиск");
	
	// +CRM 
	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, "Справочник.Партнеры КАК СправочникПартнеры", "
													|Справочник.Партнеры КАК СправочникПартнеры
													|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ЗаполненностьРеквизитовОбъектов КАК CRM_ЗаполненностьРеквизитовОбъектов
													|	ПО (CRM_ЗаполненностьРеквизитовОбъектов.Объект = СправочникПартнеры.Ссылка)");
	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, "СправочникПартнеры.Ссылка,", "СправочникПартнеры.Ссылка,
												    |ВЫБОР
													|	КОГДА CRM_ЗаполненностьРеквизитовОбъектов.ПроцентЗаполненностиОбщий < 25
													|		ТОГДА 0
													|	КОГДА CRM_ЗаполненностьРеквизитовОбъектов.ПроцентЗаполненностиОбщий < 50
													|		ТОГДА 1
													|	КОГДА CRM_ЗаполненностьРеквизитовОбъектов.ПроцентЗаполненностиОбщий < 75
													|		ТОГДА 2
													|	КОГДА CRM_ЗаполненностьРеквизитовОбъектов.ПроцентЗаполненностиОбщий < 90
												    |        ТОГДА 3
												    |    ИНАЧЕ 4
												    |КОНЕЦ КАК ЗаполненностьИнформации,
													|	СправочникПартнеры.CRM_ОсновнаяОтрасль КАК CRM_ОсновнаяОтрасль,
													|	СправочникПартнеры.CRM_ОсновноеКонтактноеЛицо КАК CRM_ОсновноеКонтактноеЛицо,
													|	СправочникПартнеры.CRM_СегментРынка КАК CRM_СегментРынка,
													|	СправочникПартнеры.CRM_СтатусРаботы КАК CRM_СтатусРаботы,
													|	СправочникПартнеры.CRM_ТипОтношенийПредставление КАК CRM_ТипОтношенийПредставление,
													|	СправочникПартнеры.CRM_ЧисленностьРабочихМест КАК CRM_ЧисленностьРабочихМест,
													|	СправочникПартнеры.CRM_ЧисленностьСотрудников КАК CRM_ЧисленностьСотрудников,");
	Элементы.ГруппаФильтры.Видимость = ИспользоватьПолнотекстовыйПоиск;
	// -CRM 
	
	// Обработчик подсистемы "Внешние обработки"
	
	// Электронные документы
	Если ПравоДоступа("Изменение", Метаданные.Справочники.Партнеры) Тогда
		Элементы.СписокЗагрузитьРеквизиты.Видимость = Истина;
	КонецЕсли;
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.Партнеры);
	// +CRM изменена Командная панель Списка: Элементы.СписокИзменитьВыделенные.Видимость = МожноРедактировать;
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	УстановитьВидимостьКомандКонтекстныхОтчетов();
	
	// +CRM
	
	// Видимость инфо-панелей
	ПометкаПоказатьСкрытьДопИнформацию 		= Истина;	// Значение по умолчанию
	ПометкаПоказатьСкрытьСодержание    		= Истина;	// Значение по умолчанию
	ТолькоАктивные							= Ложь;		// Значение по умолчанию
	
	КлючОбъекта = "Справочник.Партнеры.Форма.CRM_Модуль_ФормаСписка/ТекущиеДанные";
	Настройки = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(КлючОбъекта, "");
	
	Если Настройки <> Неопределено Тогда
	
		Если НЕ Настройки["ПометкаПоказатьСкрытьДопИнформацию"] = Неопределено Тогда
			ПометкаПоказатьСкрытьДопИнформацию = Настройки["ПометкаПоказатьСкрытьДопИнформацию"];
		КонецЕсли;
		
		Если НЕ Настройки["ПометкаПоказатьСкрытьСодержание"] = Неопределено Тогда
			ПометкаПоказатьСкрытьСодержание = Настройки["ПометкаПоказатьСкрытьСодержание"];
		КонецЕсли;
		
		Если НЕ Настройки["ТолькоАктивные"] = Неопределено Тогда
			ТолькоАктивные = Настройки["ТолькоАктивные"];
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.СписокСкрытьПоказатьПоКлиентам.Пометка = ПометкаПоказатьСкрытьДопИнформацию;
	// +МобильныйКлиент
	//Элементы.ГруппаПанельФильтры.Видимость			= ПометкаПоказатьСкрытьДопИнформацию;
	Элементы.СписокСкрытьПоказатьСодержание.Пометка = ПометкаПоказатьСкрытьСодержание;
	Если CRM_ОбщегоНазначенияСервер.ЭтоМобильныйКлиент() Тогда
		Элементы.ГруппаПанельСтраницДополнительнойИнформации.Видимость = Ложь;
	Иначе	
		Элементы.ГруппаПанельСтраницДополнительнойИнформации.Видимость = ПометкаПоказатьСкрытьСодержание;
	КонецЕсли;
	
	ДополнительнаяИнформацияПриСозданииНаСервере();
	
	// +Теги
	Если НЕ ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТеги") Тогда
		Элементы.ОтборТеги.Видимость = Ложь;
		Элементы.ЗначенияОтбораТеги.Видимость = Ложь;
	Иначе
		ОтборПодразделениеДляТегов = Пользователи.АвторизованныйПользователь().Подразделение;
		СписокВышестоящихПодразделений.ЗагрузитьЗначения(CRM_МетодыМодулейМенеджеровСправочников.ПолучитьВсеПодразделенияРодители(ОтборПодразделениеДляТегов, Истина));

		ОбновитьЗначенияОтбораТегов();
	КонецЕсли; 
	ОтбиратьОбъектыБезТегов = Ложь;
	// -Теги
	
	КоличествоПолейПоиска = 1;
	// -CRM
	
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	ПартнерыИКонтрагентыКлиент.ПанельНавигацииУправлениеДоступностью(ЭтотОбъект);
	
	// +CRM
	ДополнительнаяИнформацияПриОткрытии();
	
	Если ЗначениеЗаполнено(ОтборОсновнойМенеджер) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ОсновнойМенеджер", ОтборОсновнойМенеджер, Истина);
		CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборОсновнойМенеджер);
	КонецЕсли;
	// -CRM
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		ПартнерыИКонтрагентыКлиент.ФормаСпискаВыбораПриЗакрытии(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ТребуетсяОбновлениеПанелиИнформации = Ложь;
	
	ПартнерыИКонтрагентыКлиент.ПартнерыФормаСпискаВыбораОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ТребуетсяОбновлениеПанелиИнформации);
	
	// +CRM
	Если ИмяСобытия = "Создан новый партнер" Тогда
		Если ТипЗнч(Параметр) = Тип("СправочникСсылка.Партнеры") Тогда
			Элементы.Список.ТекущаяСтрока = Параметр;
		ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Элементы.Список.ТекущаяСтрока = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр, "Владелец");
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "КонтактноеЛицоЗаписано" Тогда
		Если Элементы.Контакты.ТекущаяСтрока = Параметр Тогда
			Элементы.Список.Обновить();
		КонецЕсли;
	КонецЕсли;
	// -CRM
	
	Если ТребуетсяОбновлениеПанелиИнформации Тогда
		ИгнорироватьСохранениеТекущейПозиции = Истина;
		ОбработатьАктивизациюСтрокиСписка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	ПартнерыИКонтрагенты.ПередЗагрузкойДанныхИзНастроекНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТолькоМоиПриИзменении(Элемент)
	
	ИзменитьОтборСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ВыполнитьПоиск(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеВыбораНажатие(Элемент, СтандартнаяОбработка)
	
	ПартнерыИКонтрагентыКлиент.ПартнерыФормаСпискаВыбораОснованиеВыбораНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СегментПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.ПартнерыФормаСпискаВыбораСегментПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СпискиВыбораКлиентСервер.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипФильтраОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьФильтрПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.ПанельНавигацииУправлениеДоступностью(ЭтотОбъект);
	ОбработатьАктивизациюСтрокиДинамическогоСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ДинамическийСписокФильтрыПриАктивизацииСтроки(Элемент)
	
	Если Элемент.Имя = "БизнесРегионы" И Элементы.СтраницыТипФильтра.ТекущаяСтраница <> Элементы.СтраницаБизнесРегионы Тогда
		Возврат;
	ИначеЕсли Элемент.Имя = "ГруппыДоступаПартнеров" И Элементы.СтраницыТипФильтра.ТекущаяСтраница <> Элементы.СтраницаГруппыДоступа Тогда
		Возврат;
	ИначеЕсли Элемент.Имя = "Менеджеры" И Элементы.СтраницыТипФильтра.ТекущаяСтраница <> Элементы.СтраницаМенеджеры Тогда
		Возврат;
	ИначеЕсли Элемент.Имя = "Свойства" И Элементы.СтраницыТипФильтра.ТекущаяСтраница <> Элементы.СтраницаСвойства Тогда
		Возврат;
	ИначеЕсли Элемент.Имя = "Категории" И Элементы.СтраницыТипФильтра.ТекущаяСтраница <> Элементы.СтраницаКатегории Тогда
		Возврат;
	КонецЕсли;
	
	Если НеОтрабатыватьАктивизациюПанелиНавигации Тогда
		НеОтрабатыватьАктивизациюПанелиНавигации = Ложь;
	Иначе
		Если Элемент.Имя = "БизнесРегионы" И ТекущееЗначениеФильтра = Элементы.БизнесРегионы.ТекущаяСтрока Тогда
			Возврат;
		ИначеЕсли Элемент.Имя = "ГруппыДоступаПартнеров" И ТекущееЗначениеФильтра = Элементы.ГруппыДоступаПартнеров.ТекущаяСтрока Тогда
			Возврат;
		ИначеЕсли Элемент.Имя = "Менеджеры" И ТекущееЗначениеФильтра = Элементы.Менеджеры.ТекущаяСтрока Тогда
			Возврат;
		ИначеЕсли Элемент.Имя = "Свойства" И ТекущееЗначениеФильтра = Свойства.НайтиПоИдентификатору(Элементы.Свойства.ТекущаяСтрока) Тогда
			Возврат;
		ИначеЕсли Элемент.Имя = "Категории" И ТекущееЗначениеФильтра = Категории.НайтиПоИдентификатору(Элементы.Категории.ТекущаяСтрока) Тогда
			Возврат;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиДинамическогоСписка",0.2,Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПартнераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПартнерыИКонтрагентыКлиент.КонтрагентыПартнераНажатие(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаПартнераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПартнерыИКонтрагентыКлиент.КонтактныеЛицаПартнераНажатие(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоВсемПриИзменении(Элемент)
	
	ИзменитьОтборСписок(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипФильтраПриИзменении(Элемент)
	
	ТребуетсяЗаполнениеСтраницыСвойств = ЛОЖЬ;
	ПартнерыИКонтрагентыКлиент.ФильтрыПанельНавигацииТипФильтраПриИзменении(ЭтотОбъект, Элемент, ТребуетсяЗаполнениеСтраницыСвойств);
	ИзменитьОтборСписок(Истина, ТребуетсяЗаполнениеСтраницыСвойств);
	Если ТребуетсяЗаполнениеСтраницыСвойств Тогда
		Для каждого СтрокаДерева Из Свойства.ПолучитьЭлементы() Цикл
			Элементы.Свойства.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПартнерыИКонтрагентыКлиент.ФильтрыПанельНавигацииПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле) 
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	КоличествоЗаписанных = 0;
	ПартнерыИКонтрагентыКлиент.ФильтрыПанельНавигацииПеретаскивание(КоличествоЗаписанных, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле);
	
	Если КоличествоЗаписанных > 0 Тогда
		ИзменитьОтборСписок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеДляТеговПриИзменении(Элемент)
	ОтборПодразделениеДляТеговПриИзмененииНаСервере();
	ОбновитьЗначенияОтбораТегов();
КонецПроцедуры

&НаКлиенте
Процедура ОтборОсновнойМенеджерПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОтборОсновнойМенеджер) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ОсновнойМенеджер", ОтборОсновнойМенеджер, Истина);
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ОсновнойМенеджер");			
	КонецЕсли;
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборОсновнойМенеджер);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.Найти("ГоловнойКонтрагент") Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные.ОбособленноеПодразделение И Не ЗначениеЗаполнено(ТекущиеДанные.ГоловнойКонтрагент) Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("Контрагент", ТекущиеДанные.Контрагент);
			ПараметрыЗаполнения.Вставить("ИНН",        ТекущиеДанные.ИНН);
			ПараметрыЗаполнения.Вставить("Партнер",    ТекущиеДанные.Ссылка);
			ПараметрыЗаполнения.Вставить("ИспользоватьПартнеровКакКонтрагентов", Истина);
			
			Оповещение = Новый ОписаниеОповещения("ЗаполнитьГоловногоКонтрагентаЗавершение", ЭтотОбъект);
			ПартнерыИКонтрагентыКлиент.ЗаполнитьГоловногоКонтрагента(ЭтотОбъект, ПараметрыЗаполнения, Истина, Оповещение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// +CRM
	Если CRM_ОбщегоНазначенияКлиент.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элемент.ТекущаяСтрока <> Неопределено И Элемент.ВыделенныеСтроки.Количество() = 1 Тогда
		ПервыйИзВыделенных = Элемент.ТекущаяСтрока;
	КонецЕсли;
	// -CRM
	
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСписка", 0.2, Истина);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ПартнерыИКонтрагентыКлиент.ПартнерыФормаСпискаВыбораСписокПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьНового(Команда)
	
	ПартнерыИКонтрагентыКлиент.ПартнерыФормаСпискаВыбораСоздатьНового(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПП(Команда)
	
	ВыполнитьПоиск(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРеквизиты(Команда)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Фильтр = НСтр("ru='XML файл'; en='XML file'")+"(*.xml)|*.xml";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗагрузитьРеквизитыВыборФайла",
		ЭтотОбъект);
	
	ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетЗаполненностьСвойствПартнеров(Команда)
	ПараметрыОтчета = Новый Структура("СформироватьПриОткрытии", Истина);
	ОткрытьФорму("Отчет.ЗаполнениеСвойствПартнеров.Форма", ПараметрыОтчета, ЭтотОбъект);
КонецПроцедуры

// +CRM

&НаКлиенте
Процедура ПринятьОбращениеПоКлиентуПоддержка(Команда)
	
	ПринятьОбращениеПоКлиенту(Элементы.Список.ТекущаяСтрока,
								CRM_МетодыФормОбработокСервер.МастерОткрытИзОбращений(),
								ПредопределенноеЗначение("Справочник.CRM_ТипыОбращений.Обращение"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОбращениеПоКлиентуПродажа(Команда)
	
	ПринятьОбращениеПоКлиенту(Элементы.Список.ТекущаяСтрока,
								CRM_МетодыФормОбработокСервер.МастерОткрытИзПродаж(),
								ПредопределенноеЗначение("Справочник.CRM_ТипыОбращений.Интерес"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОбращениеПоКлиенту(ТекущийКлиент, ИсточникОткрытияМастера, ТипОбращения)
			
	Если ТипЗнч(ТекущийКлиент) = Тип("СправочникСсылка.Партнеры") Тогда
		Если Истина Тогда
			
			СтруктураЗаполнения = Новый Структура("Основание", ТекущийКлиент);
			СтруктураЗаполнения.Вставить("ТипОбращения", ТипОбращения);
			СтруктураЗаполнения.Вставить("ИсточникОткрытияМастера", ИсточникОткрытияМастера);
			СтруктураЗаполнения.Вставить("НеОбновлятьТипОбращения", Истина);
			
			ОткрытьФорму("Документ.CRM_Интерес.ФормаОбъекта", СтруктураЗаполнения, ЭтотОбъект, УникальныйИдентификатор);
			
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для группы клиентов ввод обращения не доступен!';en='For the group of customers, the input of Lead is not available!'"));
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТегОтборОчистить(Команда)
	Элемент = Элементы.Найти("Тег_Очистить");
	Пометка = CRM_ТегиКлиент.ТегОтборНажатие("Документ.CRM_Интерес", ЭтотОбъект, "Список", Элемент, Истина);	
	ОбновитьЗначенияОтбораТегов();
КонецПроцедуры

&НаКлиенте
Процедура ОтборТеги(Команда)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Команда);
	Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость = Ложь;	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборы(Команда)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Команда);
	Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость = Истина;	
КонецПроцедуры

// -CRM

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	ПартнерыИКонтрагенты.ПартнерыФормаВыбораСпискаУсловноеОформление(ЭтотОбъект);
	ПартнерыИКонтрагенты.УстановитьОформлениеГоловногоКонтрагентаВСписке(ЭтотОбъект);

КонецПроцедуры

#Область ПолнотекстовыйПоиск

&НаКлиенте
Процедура ПроверитьИндексПолнотекстовогоПоиска(Знач Оповещение)
	
	Если Не ИндексПолнотекстовогоПоискаАктуален И ИнформационнаяБазаФайловая Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьИндексПолнотекстовогоПоискаЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), 
			НСтр("ru='Индекс полнотекстового поиска неактуален. Обновить индекс?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ПроверитьИндексПолнотекстовогоПоискаФрагмент(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИндексПолнотекстовогоПоискаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    Результат = РезультатВопроса; 
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        ПодключитьОбработчикОжидания("ОбновитьИндексПолнотекстовогоПоиска",0.2,Истина);
        ВыполнитьОбработкуОповещения(Оповещение);
        Возврат;
    КонецЕсли;
    
    
    ПроверитьИндексПолнотекстовогоПоискаФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИндексПолнотекстовогоПоискаФрагмент(Знач Оповещение)
    
    ВыполнитьПолнотекстовыйПоиск();
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИндексПолнотекстовогоПоиска()
	
	Состояние(НСтр("ru = 'Идет обновление индекса полнотекстового поиска...'"));
	ОбновитьИндексПолнотекстовогоПоискаСервер();
	ИндексПолнотекстовогоПоискаАктуален = Истина;
	Состояние(НСтр("ru = 'Обновление индекса полнотекстового поиска завершено...'"));
	ВыполнитьПолнотекстовыйПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПолнотекстовыйПоиск()
	
	ТекстОшибки = НайтиПартнеровПолнотекстовыйПоиск();
	Если ТекстОшибки = Неопределено Тогда
		РасширенныйПоиск = Истина;
		ЗаполнитьСтрокуОснования();
	Иначе
		Если НЕ ТекстОшибки = НСтр("ru = 'Ничего не найдено'") Тогда
			ПоказатьОповещениеПользователя(ТекстОшибки);
		Иначе
			ПартнерыИКонтрагентыКлиент.ВосстановитьОтображениеСпискаПослеПолнотекстовогоПоиска(ЭтотОбъект);
			РасширенныйПоиск = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндексПолнотекстовогоПоискаСервер()
	
	ПартнерыИКонтрагенты.ОбновитьИндексПолнотекстовогоПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокуОснования()
	
	Основание = Основания.НайтиСтроки(Новый Структура("Партнер", Элементы.Список.ТекущаяСтрока));
	Если Основание.Количество() = 0 Тогда
		ОснованиеВыбора = "";
	Иначе
		ОснованиеВыбора = Основание[0].Основание;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиПартнеровПолнотекстовыйПоиск()

	Возврат ПартнерыИКонтрагенты.НайтиПартнеровПолнотекстовыйПоиск(ЭтотОбъект)

КонецФункции

&НаКлиенте
Процедура ВыполнитьПоиск(Знач Оповещение)
	
	Если СтрокаПоиска <> "" Тогда
		
		ПроверитьИндексПолнотекстовогоПоиска(Новый ОписаниеОповещения("ВыполнитьПоискЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)));
        Возврат;
		
	Иначе
		ПартнерыИКонтрагентыКлиент.ВосстановитьОтображениеСпискаПослеПолнотекстовогоПоиска(ЭтотОбъект);
		РасширенныйПоиск = Ложь;
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
		                                                                   "ОтборПоПолнотекстовомуПоискуУстановлен",
		                                                                   Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
		                                                                   "ОтборПоПолнотекстовомуПоиску",
		                                                                   Неопределено);
		ОснованиеВыбора = "";
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    ТекущийЭлемент = ?(НЕ РасширенныйПоиск, Элементы.СтрокаПоиска, Элементы.Список);
    
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСписка()
	
	Если Не ПартнерыИКонтрагентыКлиент.ПозиционированиеКорректно("Список",ЭтотОбъект) Тогда
		
		Если ПометкаПоказатьСкрытьДопИнформацию Тогда
			Если ТекущийАктивныйПартнер <> ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка") Тогда
					ЗаполнитьПанельИнформацииПоДаннымПартнера(Неопределено);
			КонецЕсли;
		КонецЕсли;
		ОснованиеВыбора = "";
		
	Иначе
		
		Если ПометкаПоказатьСкрытьДопИнформацию Тогда
			Если ТекущийАктивныйПартнер <> Элементы.Список.ТекущаяСтрока ИЛИ ИгнорироватьСохранениеТекущейПозиции Тогда
				ЗаполнитьПанельИнформацииПоДаннымПартнера(Элементы.Список.ТекущаяСтрока);
			КонецЕсли;
		КонецЕсли;
		
		Если РасширенныйПоиск Тогда
			ПартнерыИКонтрагентыКлиент.ЗаполнитьСтрокуОснования(ЭтотОбъект);
		Иначе
			ОснованиеВыбора = "";
		КонецЕсли;
		
	КонецЕсли;
	
	ИгнорироватьСохранениеТекущейПозиции = Ложь;
	
	// +CRM
	CRM_РезультатыПоиска = "";
	Если ПометкаПоказатьСкрытьСодержание Тогда
		Если Элементы.Список.ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
		
		Если Элементы.Список.ТекущиеДанные.Свойство("ГруппировкаСтроки") Тогда 
			ПартнерОтбора = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		Иначе	
			ПартнерОтбора = Элементы.Список.ТекущаяСтрока;
		КонецЕсли;	
		
		КонтактыОтборПоКлиенту					= Контакты.Отбор.Элементы[0];
		КонтактыОтборПоКлиенту.ПравоеЗначение	= ПартнерОтбора;
		Элементы.Контакты.Обновить();
		
		Если Интересы.Отбор.Элементы.Количество() > 0 Тогда
			ИнтересыОтборПоКлиенту					= Интересы.Отбор.Элементы[0];
			ИнтересыОтборПоКлиенту.ПравоеЗначение	= ПартнерОтбора;
		КонецЕсли;
		
		CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.Интересы);
		CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.ИнтересыПоддержки);
		
		СформироватьТаблицуДублей();
	КонецЕсли;
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда		
		Партнер = ПартнерОтбора;
		
		ДоступностьПринятьОбращение = НЕ ЭтоГруппаПартнеров(Партнер);
				
		Если Элементы.Найти("ПринятьОбращениеПоКлиенту") <> Неопределено Тогда
			Элементы.ИнтересыПринятьОбращениеПоКлиентуПродажа.Доступность = ДоступностьПринятьОбращение;
		КонецЕсли;
		
		Если Элементы.Найти("ПринятьОбращениеПоКлиентуПоддержка") <> Неопределено Тогда
			Элементы.ПринятьОбращениеПоКлиентуПоддержка.Доступность = ДоступностьПринятьОбращение;
		КонецЕсли;

		CRM_СформироватьСтрокуРезультатаПоиска(Партнер);
	КонецЕсли;	
	// -CRM
	
КонецПроцедуры

// +CRM
&НаСервере
Процедура CRM_СформироватьСтрокуРезультатаПоиска(Партнер)
	CRM_РезультатыПоиска = "";
	СтруктураПоиска = Новый Структура("Партнер", Партнер);
	МассивСтрок = CRM_ТаблицаНайденныхСсылок.НайтиСтроки(СтруктураПоиска);
	CRM_НайденнаяСсылка = Неопределено;
	Если МассивСтрок.Количество() > 0 Тогда
		
		СтрокаНайденного = МассивСтрок[0];
		CRM_НайденнаяСсылка = СтрокаНайденного.Владелец;
		Если ТипЗнч(СтрокаНайденного.Владелец) = Тип("СправочникСсылка.Партнеры") Тогда
			ВидСправочника = "партнера";
		ИначеЕсли ТипЗнч(СтрокаНайденного.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда	
			ВидСправочника = "контрагента";
		ИначеЕсли ТипЗнч(СтрокаНайденного.Владелец) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда	
			ВидСправочника = "контактного лица";
		КонецЕсли;	
		CRM_РезультатыПоиска = "Найдено в реквизите " + ВидСправочника + " " + СтрокаНайденного.Владелец + " '" + СтрокаНайденного.ПолеПоиска + "': " + СтрокаНайденного.ЗначениеПоиска;// + СтрокаНайденного.Партнер+"/"+СтрокаНайденного.Владелец+"/"+СтрокаНайденного.ВидКонтактнойИнформации+"/"+СтрокаНайденного.ЗначениеПоиска+"/";
	КонецЕсли;	
КонецПроцедуры
// -CRM

&НаСервере
Процедура ЗаполнитьПанельИнформацииПоДаннымПартнера(Партнер)
	
	ПартнерыИКонтрагенты.ЗаполнитьПанельИнформацииПоДаннымПартнера(ЭтотОбъект, Партнер);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиДинамическогоСписка()

	ИзменитьОтборСписок();

КонецПроцедуры

&НаСервере
Процедура ИзменитьОтборСписок(ПереформированиеПанелиНавигации = Ложь, ТребуетсяЗаполнениеСтраницыСвойств = Ложь)

	ПартнерыИКонтрагенты.ИзменитьОтборСписок(ЭтотОбъект, ПереформированиеПанелиНавигации, ТребуетсяЗаполнениеСтраницыСвойств);

КонецПроцедуры

&НаСервере 
Процедура УстановитьВидимостьКомандКонтекстныхОтчетов()
	КоличествоДоступныхОтчетов = 0;
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ЗаполнениеСвойствПартнеров) Тогда
		Элементы.ОткрытьОтчетЗаполненностьСвойствПартнеров.Видимость = Истина;
		КоличествоДоступныхОтчетов = КоличествоДоступныхОтчетов + 1;
	Иначе
		Элементы.ОткрытьОтчетЗаполненностьСвойствПартнеров.Видимость = Ложь;
	КонецЕсли;
	
	Если КоличествоДоступныхОтчетов > 0 Тогда
		Элементы.СтраницыКонтекстныеОтчеты.ТекущаяСтраница = Элементы.СтраницаДоступныеОтчеты;
	Иначе
		Элементы.СтраницыКонтекстныеОтчеты.ТекущаяСтраница = Элементы.СтраницаНетДоступныхОтчетов;
	КонецЕсли;
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт // АПК:78 - исключить из проверки.
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьГоловногоКонтрагентаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРеквизитыВыборФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	ФайлЗагрузки = ВыбранныеФайлы[0];
	ДвоичныеДанные  = Новый ДвоичныеДанные(ФайлЗагрузки);
	СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ОткрытьФорму("Справочник.Партнеры.Форма.ПомощникНового",
		Новый Структура("СсылкаНаФайл", СсылкаНаФайл),
		,
		УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область МетодыCRM

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ЭтоИнтересы = ТекущаяСтраница = Элементы.ГруппаИнтересы;
	ЭтоИнтересыПоддержки = ТекущаяСтраница = Элементы.ГруппаИнтересыПоддержки;
	
	Если ТекущаяСтраница = Элементы.ГруппаКонтакты Тогда
		
		Если Элементы.Контакты.ТекущиеДанные = Неопределено Тогда 
			ЗаполнитьПанельИнформацииПоДаннымКонтакта(Неопределено);
		Иначе
			ЗаполнитьПанельИнформацииПоДаннымКонтакта(Элементы.Контакты.ТекущаяСтрока);
		КонецЕсли;
		
	ИначеЕсли ЭтоИнтересы ИЛИ ЭтоИнтересыПоддержки Тогда
		
		СписокИнтересы_УстановитьОтборПоТипуОбращения();

		ТекущаяСтрока = Неопределено;
		
		Если ЭтоИнтересы Тогда
			ТекущаяСтрока = Элементы.Интересы.ТекущаяСтрока;
		ИначеЕсли ЭтоИнтересыПоддержки Тогда
			ТекущаяСтрока = Элементы.ИнтересыПоддержки.ТекущаяСтрока;
		КонецЕсли;
		
		ЗаполнитьПанельИнформацииПоДаннымИнтереса(ТекущаяСтрока);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование Тогда
		
		ТекущийКлиент = Элементы.Список.ТекущаяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСодержаниеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	// Поле отображения содержания.
	Если Элемент.Имя = "ПолеОтображениеСодержания" Тогда
		
		CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия, СтандартнаяОбработка, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка());
		
		
	ИначеЕсли Элемент.Имя = "ПолеОтображениеСодержания1" Тогда
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКонтакты Тогда
			
			CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия, СтандартнаяОбработка, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка2());
			
		ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаИнтересы Тогда
			
			CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия, СтандартнаяОбработка, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка1());
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтересыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСпискаИнтересы", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтересыПоддержкиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСпискаИнтересы", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыПриАктивизацииСтроки(Элемент)
	
	// +CRM
	Если Элемент.ТекущаяСтрока <> Неопределено И Элемент.ВыделенныеСтроки.Количество() = 1 Тогда
		ПервыйИзВыделенныхКЛ = Элемент.ТекущаяСтрока;
	КонецЕсли;
	// -CRM
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСпискаКонтакты", 0.2, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПанельИнформацииПоДаннымИнтереса(ТекущийИнтерес)
	
	// Поле отображения содержания.
	Если Элементы.ГруппаПанельСтраницДополнительнойИнформации.Видимость Тогда
		Если ТипЗнч(ТекущийИнтерес) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			Содержание = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьСодержание(ТекущийИнтерес, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка1());
			Если Содержание <> ПолеОтображениеСодержания1 Тогда
				ПолеОтображениеСодержания1 = Содержание;
			КонецЕсли;
		Иначе
			Содержание = CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
			Если Содержание <> ПолеОтображениеСодержания1 Тогда
				ПолеОтображениеСодержания1 = Содержание;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийИнтерес = Неопределено Тогда Возврат КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПанельИнформацииПоДаннымКонтакта(ТекущийКонтакта)
	
	// Поле отображения содержания.
	Если Элементы.ГруппаПанельСтраницДополнительнойИнформации.Видимость Тогда
		Если ТипЗнч(ТекущийКонтакта) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Содержание = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьСодержание(ТекущийКонтакта, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка2());
			Если Содержание <> ПолеОтображениеСодержания1 Тогда
				ПолеОтображениеСодержания1 = Содержание;
			КонецЕсли;
		Иначе
			Содержание = CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
			Если Содержание <> ПолеОтображениеСодержания1 Тогда
				ПолеОтображениеСодержания1 = Содержание;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийКонтакта = Неопределено Тогда Возврат КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСпискаИнтересы()
	
	ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	
	ЭтоИнтересы = ТекущаяСтраница = Элементы.ГруппаИнтересы;
	ЭтоИнтересыПоддержки = ТекущаяСтраница = Элементы.ГруппаИнтересыПоддержки;
	
	ТекущаяСтрока = Неопределено;
		
	Если ЭтоИнтересы Тогда
		ТекущаяСтрока = Элементы.Интересы.ТекущаяСтрока;
	ИначеЕсли ЭтоИнтересыПоддержки Тогда
		ТекущаяСтрока = Элементы.ИнтересыПоддержки.ТекущаяСтрока;
	КонецЕсли;
	
	ЗаполнитьПанельИнформацииПоДаннымИнтереса(ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура СписокИнтересы_УстановитьОтборПоТипуОбращения()
	
	ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	
	ЭтоИнтересы = ТекущаяСтраница = Элементы.ГруппаИнтересы;
	ЭтоИнтересыПоддержки = ТекущаяСтраница = Элементы.ГруппаИнтересыПоддержки;
	
	ВидСравненияЭлементаОтбора = Неопределено;
	Если ЭтоИнтересы Тогда
		ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.Равно;
	ИначеЕсли ЭтоИнтересыПоддержки Тогда
		ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.НеРавно;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Интересы,
																			"ТипОбращения",
																			ПредопределенноеЗначение("Справочник.CRM_ТипыОбращений.Интерес"),
																			ВидСравненияЭлементаОтбора,,
																			Истина,
																			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСпискаКонтакты()
	
	Если Элементы.Контакты.ТекущиеДанные = Неопределено Тогда 
		ЗаполнитьПанельИнформацииПоДаннымКонтакта(Неопределено);
	Иначе
		ЗаполнитьПанельИнформацииПоДаннымКонтакта(Элементы.Контакты.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеИнтересы(Команда)
	
	ТолькоАктивные						= Ложь;
	Элементы.ВсеИнтересы.Пометка		= Истина;
	Элементы.ТолькоАктивные.Пометка		= Ложь;
	Элементы.ВсеТолькоАктивные.Заголовок	= "Все";
	УстановитьОтборПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоАктивные(Команда)
	
	ТолькоАктивные						= Истина;
	Элементы.ВсеИнтересы.Пометка		= Ложь;
	Элементы.ТолькоАктивные.Пометка		= Истина;
	Элементы.ВсеТолькоАктивные.Заголовок	= "Только активные";
	УстановитьОтборПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоСостоянию()
	
	Если Интересы.Отбор.Элементы.Количество() > 0 Тогда
		ИнтересыОтборПоСостоянию				= Интересы.Отбор.Элементы[1];
		ИнтересыОтборПоСостоянию.Использование	= ТолькоАктивные;
	КонецЕсли;
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.Интересы);
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.ИнтересыПоддержки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка()
	Возврат Новый ОписаниеТипов("СправочникСсылка.Партнеры");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка1()
	Возврат Новый ОписаниеТипов("ДокументСсылка.CRM_Интерес");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка2()
	Возврат Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛицаПартнеров");
КонецФункции

&НаСервере
Функция ЭтоГруппаПартнеров(Партнер)
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура СкрытьПоказатьПоКлиентам(Команда)
	
	Элементы.СписокСкрытьПоказатьПоКлиентам.Пометка = НЕ Элементы.СписокСкрытьПоказатьПоКлиентам.Пометка;
	ПометкаПоказатьСкрытьДопИнформацию				= Элементы.СписокСкрытьПоказатьПоКлиентам.Пометка;
	Элементы.ГруппаПанельФильтры.Видимость			= ПометкаПоказатьСкрытьДопИнформацию;
	Если ПометкаПоказатьСкрытьДопИнформацию Тогда
		ОбработатьАктивизациюСтрокиСписка();
	КонецЕсли;
	
КонецПроцедуры

// +CRM
&НаКлиенте
Процедура CRM_ИспользоватьПолнотекстовыйПоиск(Команда)
	Если ИспользоватьПолнотекстовыйПоиск Тогда
		Элементы.CRM_ИспользоватьПолнотекстовыйПоиск.Пометка = НЕ Элементы.CRM_ИспользоватьПолнотекстовыйПоиск.Пометка;
		Элементы.ГруппаПолнотекстовыйПоиск.Видимость = Элементы.CRM_ИспользоватьПолнотекстовыйПоиск.Пометка;
		Элементы.ГруппаДополнительныеПоляПоиска.Видимость = НЕ Элементы.CRM_ИспользоватьПолнотекстовыйПоиск.Пометка;
		СтрокаПоиска = "";
		СтрокаПоискаCRM = "";
		СтрокаПоискаДоп1 = "";
		СтрокаПоискаДоп2 = "";
		СтрокаПоискаДоп3 = "";
		ВыполнитьПоиск(Неопределено);
		ВыполнитьПоискCRM(Истина);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Использование полнотекстового поиска отключено!'");
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры
// -CRM

&НаКлиенте
Процедура СкрытьПоказатьСодержание(Команда)
	
	Элементы.СписокСкрытьПоказатьСодержание.Пометка 				= НЕ Элементы.СписокСкрытьПоказатьСодержание.Пометка;
	ПометкаПоказатьСкрытьСодержание									= Элементы.СписокСкрытьПоказатьСодержание.Пометка;
	Элементы.ГруппаПанельСтраницДополнительнойИнформации.Видимость	= ПометкаПоказатьСкрытьСодержание;
	Если ПометкаПоказатьСкрытьСодержание Тогда
		ОбработатьАктивизациюСтрокиСписка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительнаяИнформацияПриСозданииНаСервере()
	
	ИспользоватьПоддержку = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПоддержку");
	Элементы.ГруппаИнтересыПоддержки.Видимость = ИспользоватьПоддержку;
	
	СпособПоиска = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_МастерРегистрацииОбращения.СпособПоиска", "СправочникПартнеры", 1);
	
	КонтактыОтборПоКлиенту					= Контакты.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонтактыОтборПоКлиенту.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("Владелец");
	КонтактыОтборПоКлиенту.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	КонтактыОтборПоКлиенту.Использование	= Истина;
	КонтактыОтборПоКлиенту.ПравоеЗначение	= Справочники.Партнеры.ПустаяСсылка();
	
	ИнтересыОтборПоКлиенту					= Интересы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ИнтересыОтборПоКлиенту.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("Партнер");
	ИнтересыОтборПоКлиенту.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ИнтересыОтборПоКлиенту.Использование	= Истина;
	ИнтересыОтборПоКлиенту.ПравоеЗначение	= Неопределено;
	
	ИнтересыОтборПоСостоянию				= Интересы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ИнтересыОтборПоСостоянию.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("Завершен");
	ИнтересыОтборПоСостоянию.ВидСравнения	= ВидСравненияКомпоновкиДанных.Равно;
	ИнтересыОтборПоСостоянию.Использование	= Истина;
	ИнтересыОтборПоСостоянию.ПравоеЗначение	= Ложь;
	
	ИнтересыОтборПоПометке					= Интересы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ИнтересыОтборПоПометке.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ИнтересыОтборПоПометке.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ИнтересыОтборПоПометке.Использование	= Истина;
	ИнтересыОтборПоПометке.ПравоеЗначение	= Ложь;
	
	СписокИнтересы_УстановитьОтборПоТипуОбращения();	
	
	СуществующиеНастройки = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьНастройки();
	Если СуществующиеНастройки.Количество() = 0 Тогда
		CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияЗагрузитьИзМакета("CRM_НастройкиПолейОтображенияСодержания");
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриОткрытии()
	
	Элементы.ВсеИнтересы.Пометка		= НЕ ТолькоАктивные;
	Элементы.ТолькоАктивные.Пометка		= ТолькоАктивные;
	Элементы.ВсеТолькоАктивные.Заголовок	= ?(ТолькоАктивные,"Только активные","Все");
	
	УстановитьОтборПоСостоянию();
	
КонецПроцедуры

// +Рабочий стол
#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

#КонецОбласти
// -Рабочий стол

#Область Теги

&НаКлиенте
Процедура Подключаемый_ТегОтборНажатие(Элемент, СтандартнаяОбработка)
	
	ЭлементДляОчистки = Элементы.Найти("Тег_Очистить");	
	
	ЭлементДляОтбораБезТегов = Элементы.ЗначенияОтбораТеги.ПодчиненныеЭлементы.Найти("Тег_Нет");
	Если Элемент = ЭлементДляОтбораБезТегов Тогда
		ОтбиратьОбъектыБезТегов = НЕ ОтбиратьОбъектыБезТегов;	
	КонецЕсли; 	
	
	Пометка = CRM_ТегиКлиент.ТегОтборНажатие("Справочник.Партнеры", ЭтотОбъект, "Список", Элемент, СтандартнаяОбработка);	

	// Поведение при нажатии на кнопку очистки отборов по тегам.
	Если Элемент = ЭлементДляОчистки Тогда
		ОбновитьЗначенияОтбораТегов();
		Возврат;
	КонецЕсли; 
	
	// Поведение при нажатии на кнопку отбора [нет тегов].
	Если Элемент = ЭлементДляОтбораБезТегов Тогда
		ИзменитьЦветЭлементаСервер(ОтбиратьОбъектыБезТегов, ЭлементДляОтбораБезТегов.Имя);
		Если ОтбиратьОбъектыБезТегов Тогда			
			Если ЭлементДляОчистки <> Неопределено Тогда
				ЭлементДляОчистки.Видимость = Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 	
	
	Если НЕ Пометка = Неопределено И Элемент <> ЭлементДляОтбораБезТегов  Тогда
		ИзменитьЦветЭлементаСервер(Пометка, Элемент.Имя);
		Если Пометка Тогда			
			Если ЭлементДляОчистки <> Неопределено Тогда
				ЭлементДляОчистки.Видимость = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначенияОтбораТегов()
	CRM_Теги.ОбновитьЗначенияОтбораТегов(ЭтотОбъект, ,ОтборПодразделениеДляТегов, СписокВышестоящихПодразделений.ВыгрузитьЗначения());
КонецПроцедуры

&НаСервере
Процедура ИзменитьЦветЭлементаСервер(Пометка, ИмяЭлемента)
	CRM_Теги.ИзменитьЦветЭлементаОтбора(ЭтотОбъект, Пометка, ИмяЭлемента);
КонецПроцедуры

&НаСервере
Процедура ОтборПодразделениеДляТеговПриИзмененииНаСервере()
	СписокВышестоящихПодразделений.ЗагрузитьЗначения(CRM_МетодыМодулейМенеджеровСправочников.ПолучитьВсеПодразделенияРодители(ОтборПодразделениеДляТегов, Истина));	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьПолеПоиска(Команда)
	
	Элементы["ГруппаПоиска"+Строка(КоличествоПолейПоиска)].Видимость = Истина;
	Элементы["ДобавитьПолеПоиска"+Строка(КоличествоПолейПоиска-1)].Видимость = Ложь;
	Если КоличествоПолейПоиска > 1 Тогда
		Элементы["УдалитьПолеПоиска"+Строка(КоличествоПолейПоиска-1)].Видимость = Ложь;
	КонецЕсли;
	Элементы["УдалитьПолеПоиска"+Строка(КоличествоПолейПоиска)].Видимость = Истина;
	КоличествоПолейПоиска = КоличествоПолейПоиска + 1;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПолеПоиска(Команда)
	
	Элементы["ГруппаПоиска"+Строка(КоличествоПолейПоиска-1)].Видимость = Ложь;
	Элементы["УдалитьПолеПоиска"+Строка(КоличествоПолейПоиска-1)].Видимость = Ложь;
	Если КоличествоПолейПоиска > 2 Тогда
		Элементы["УдалитьПолеПоиска"+Строка(КоличествоПолейПоиска-2)].Видимость = Истина;
	КонецЕсли;
	Элементы["ДобавитьПолеПоиска"+Строка(КоличествоПолейПоиска-2)].Видимость = Истина;
	Если ЭтотОбъект["СтрокаПоискаДоп"+Строка(КоличествоПолейПоиска-1)] <> "" Тогда
		ЭтотОбъект["СтрокаПоискаДоп"+Строка(КоличествоПолейПоиска-1)] = "";
		ВыполнитьПоискCRM(Истина);
	КонецЕсли;
	КоличествоПолейПоиска = КоличествоПолейПоиска - 1;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#КонецОбласти

#Область ПоискCRM

&НаКлиенте
Процедура СтрокаПоискаCRMНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СпособыПоиска = Новый СписокЗначений;
	СпособыПоиска.Добавить(0, НСтр("ru = 'По началу строки'"));
	СпособыПоиска.Добавить(1, НСтр("ru = 'По части строки'"));
	СпособыПоиска.Добавить(2, НСтр("ru = 'По точному совпадению'"));
	
	НайденныйЭлемент = СпособыПоиска.НайтиПоЗначению(СпособПоиска);
	Если НайденныйЭлемент <> Неопределено Тогда
		НайденныйЭлемент.Пометка = Истина;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("СтрокаПоискаCRMНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОповещениеЗавершения, СпособыПоиска, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаCRMНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособПоиска <> ВыбранныйЭлемент.Значение Тогда
		СпособПоиска = ВыбранныйЭлемент.Значение;
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("CRM_МастерРегистрацииОбращения.СпособПоиска","СправочникПартнеры", СпособПоиска);
		ВыполнитьПоискCRM(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаCRMПриИзменении(Элемент)
	ВыполнитьПоискCRM(Истина);
КонецПроцедуры

&НаКлиенте
Процедура CRM_РезультатыПоискаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(CRM_НайденнаяСсылка) = Тип("СправочникСсылка.Партнеры") Тогда
		Открытьформу("Справочник.Партнеры.ФормаОбъекта", Новый Структура("Ключ", CRM_НайденнаяСсылка));
	ИначеЕсли ТипЗнч(CRM_НайденнаяСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда	
		Открытьформу("Справочник.Контрагенты.ФормаОбъекта", Новый Структура("Ключ", CRM_НайденнаяСсылка));
	ИначеЕсли ТипЗнч(CRM_НайденнаяСсылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда	
		Открытьформу("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", Новый Структура("Ключ", CRM_НайденнаяСсылка));
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьПоискCRM(ОповещатьОбОшибках)
	
	ОбрабатыватьАктивизациюПоиска = Истина;
	
	СтрокаПоискаCRM = СокрЛП(СтрокаПоискаCRM);
	Для Сч = 1 По 3 Цикл
		ИмяПоля = "СтрокаПоискаДоп"+Строка(Сч);
		ЭтотОбъект[ИмяПоля] = СокрЛП(ЭтотОбъект[ИмяПоля]);
	КонецЦикла;
	
	// Проверка возможности поиска.
	Отказ = Ложь;
	ТекстСообщения = НСтр("ru='Минимальная длина строки поиска 3 символа.';en='Minimum length of the search line is 3 characters.'");
	Если ОповещатьОбОшибках И СтрДлина(СтрокаПоискаCRM) < 3  И СтрДлина(СтрокаПоискаCRM) > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СтрокаПоискаCRM",, Отказ);
	КонецЕсли;	
	Для Сч = 1 По 3 Цикл
		ИмяПоля = "СтрокаПоискаДоп"+Строка(Сч);
		Если ОповещатьОбОшибках И СтрДлина(ЭтотОбъект[ИмяПоля]) < 3  И СтрДлина(ЭтотОбъект[ИмяПоля]) > 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ИмяПоля,, Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПоискCRMНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискCRMНаСервере(УсловияПоиска = Неопределено)
	
	CRM_ТаблицаНайденныхСсылок.Очистить();
	CRM_РезультатыПоиска = "";
	Если УсловияПоиска = Неопределено Тогда
		
		// Анализ строк поиска, формализация условий и заполнение кэша.
		КэшПоиска = CRM_ПоискКонтактов.СтруктураДанныхКэша();
		КэшЗаполнения = CRM_ПоискКонтактов.СтруктураДанныхКэша();
		УсловияПоиска = Новый Массив;
		Если Не ПустаяСтрока(СтрокаПоискаCRM) Тогда
			СтрокаПоискаНормализованная = CRM_ПоискКонтактов.НормализоватьСтрокуПоискаИДополнитьКэш(СтрокаПоискаCRM, КэшПоиска, КэшЗаполнения);
			УсловияПоиска.Добавить(СтрокаПоискаНормализованная);
		КонецЕсли;
		Для Сч = 1 По 3 Цикл
			ТекущаяСтрокаПоиска = ЭтотОбъект["СтрокаПоискаДоп" + Сч];
			Если Не ПустаяСтрока(ТекущаяСтрокаПоиска) Тогда
				СтрокаПоискаНормализованная = CRM_ПоискКонтактов.НормализоватьСтрокуПоискаИДополнитьКэш(ТекущаяСтрокаПоиска, КэшПоиска, КэшЗаполнения);
				УсловияПоиска.Добавить(СтрокаПоискаНормализованная);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Поиск.
	Если ПустаяСтрока(СтрокаПоискаCRM) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", Новый СписокЗначений, ВидСравненияКомпоновкиДанных.ВСписке, , Ложь, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		Элементы.СтрокаПоискаCRM.ЦветФона = Новый Цвет(255, 255, 255);
		Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		Возврат;
	КонецЕсли;	
	Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	УстановитьПривилегированныйРежим(Истина);
	РезультатПоиска = CRM_ПоискКонтактов.ВыполнитьПоискКонтактов(УсловияПоиска, СпособПоиска, Истина, Истина);
	УстановитьПривилегированныйРежим(Ложь);
	Если ЗначениеЗаполнено(РезультатПоиска.КодОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", Новый СписокЗначений, ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		Элементы.СтрокаПоискаCRM.ЦветФона = Новый Цвет(255, 200, 200);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Партнеры.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ тмпСсылки
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка В(&Массивссылок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтактныеЛицаПартнеров.Владелец
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Ссылка В(&Массивссылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	тмпСсылки.Ссылка КАК Ссылка
	|ИЗ
	|	тмпСсылки КАК тмпСсылки";
	Запрос.УстановитьПараметр("Массивссылок", РезультатПоиска.Элементы);
	СписоСсылокДляОтбора = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", СписоСсылокДляОтбора, ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	Если СписоСсылокДляОтбора.Количество() = 0 Тогда
		Элементы.СтрокаПоискаCRM.ЦветФона = Новый Цвет(255, 200, 200);
	Иначе
		Элементы.СтрокаПоискаCRM.ЦветФона = Новый Цвет(255, 255, 255);
	КонецЕсли;
	
	CRM_ТаблицаНайденныхСсылок.Загрузить(РезультатПоиска.ТаблицаРезультатов);
	
КонецПроцедуры

#КонецОбласти

#Область ДублиКлиентов

&НаКлиенте
Процедура ДублиКлиентаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения("ДублиКлиентаДобавление", ЭтотОбъект);
	// +CRM_Модуль: ФормаВыбора вместо CRM_ФормаВыбора
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаВыбора",, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДублиКлиентаДобавление(Дубль, ДопПараметр) Экспорт
	Если ЗначениеЗаполнено(Дубль) Тогда
		Если Элементы.Список.ТекущаяСтрока = Дубль Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нельзя выбирать текущий элемент!'"));
			Возврат;
		КонецЕсли;
		Дубли_ДобавитьНаСервере(Элементы.Список.ТекущаяСтрока, Дубль);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Дубли_ДобавитьНаСервере(Оригинал, Дубль)
	РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ЗаписатьДубль(Оригинал, Дубль);
	СформироватьТаблицуДублей();
КонецПроцедуры

&НаКлиенте
Процедура Дубли_Добавить(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("Дубли_Добавить_Продолжение", ЭтотОбъект);
	// +CRM_Модуль: ФормаВыбора вместо CRM_ФормаВыбора
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаВыбора",, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура Дубли_Добавить_Продолжение(Дубль, ДопПараметр) Экспорт
	Если ЗначениеЗаполнено(Дубль) Тогда
		Если ПартнерОтбора = Дубль Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нельзя выбирать текущий элемент!'"));
			Возврат;
		КонецЕсли;
		Если ДублиКлиента.НайтиСтроки(Новый Структура("Контакт", Дубль)).Количество()>0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выбранный элемент уже есть в списке дублей!'"));
			Возврат;
		КонецЕсли;
		Дубли_ДобавитьНаСервере(ПартнерОтбора, Дубль);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Дубли_ОтметитьКакОригиналНаСервере(Контакт)
	РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ОтметитьКакОригинал(Контакт);
КонецПроцедуры

&НаКлиенте
Процедура Дубли_ОтметитьКакОригинал(Команда)
	Если Элементы.ДублиКлиента.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Дубли_ОтметитьКакОригиналНаСервере(Элементы.ДублиКлиента.ТекущиеДанные.Контакт);
	СформироватьТаблицуДублей();
КонецПроцедуры

&НаСервере
Процедура Дубли_УдалитьНаСервере(Контакт)
	РегистрыСведений.CRM_ДублиКлиентовИКонтактов.УдалитьДубль(Контакт);
	СформироватьТаблицуДублей();
КонецПроцедуры

&НаКлиенте
Процедура Дубли_Удалить(Команда)
	Если Элементы.ДублиКлиента.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Дубли_УдалитьНаСервере(Элементы.ДублиКлиента.ТекущиеДанные.Контакт);
КонецПроцедуры

&НаСервере
Процедура Дубли_ОбновитьЗаголовок()
	Дубли_Заголовок = НСтр("ru = 'Дубли'");
	Если ЗначениеЗаполнено(ПартнерОтбора) Тогда
		Дубли_Количество = Дубли_КоличествоДублей(ПартнерОтбора);
		Если Дубли_Количество > 0 Тогда
			Дубли_Заголовок = Дубли_Заголовок + " (" + Дубли_Количество + ")"
		КонецЕсли;
	КонецЕсли;
	Если Элементы.СтраницаДубли.Заголовок <> Дубли_Заголовок Тогда
		Элементы.СтраницаДубли.Заголовок = Дубли_Заголовок;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция Дубли_КоличествоДублей(Ссылка)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал КАК Оригинал
	               |ПОМЕСТИТЬ ВТОригинал
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт = &ТекОбъект
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт КАК Контакт
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал = &ТекОбъект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт = &ТекОбъект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт
	               |ИЗ
	               |	ВТОригинал КАК ВТОригинал
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |		ПО ВТОригинал.Оригинал = CRM_ДублиКлиентовИКонтактов.Оригинал
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт <> &ТекОбъект
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контакт)
	               |ПО
	               |	ОБЩИЕ";
	Запрос.УстановитьПараметр("ТекОбъект", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Контакт;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция Дубли_ТаблицаДублей(Ссылка)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал КАК Оригинал
	               |ПОМЕСТИТЬ ВТОригинал
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт = &ТекОбъект
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт КАК Контакт,
	               |	CRM_ДублиКлиентовИКонтактов.Заменить КАК Заменить,
	               |	CRM_ДублиКлиентовИКонтактов.Комментарий КАК Комментарий,
	               |	CRM_ДублиКлиентовИКонтактов.Дата КАК Дата,
	               |	CRM_ДублиКлиентовИКонтактов.Автор КАК Автор,
	               |	ЛОЖЬ КАК ЭтоОригинал
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал = &ТекОбъект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал,
	               |	ЛОЖЬ,
	               |	CRM_ДублиКлиентовИКонтактов.Комментарий,
	               |	CRM_ДублиКлиентовИКонтактов.Дата,
	               |	CRM_ДублиКлиентовИКонтактов.Автор,
	               |	ИСТИНА
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт = &ТекОбъект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт,
	               |	CRM_ДублиКлиентовИКонтактов.Заменить,
	               |	CRM_ДублиКлиентовИКонтактов.Комментарий,
	               |	CRM_ДублиКлиентовИКонтактов.Дата,
	               |	CRM_ДублиКлиентовИКонтактов.Автор,
	               |	ЛОЖЬ
	               |ИЗ
	               |	ВТОригинал КАК ВТОригинал
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |		ПО ВТОригинал.Оригинал = CRM_ДублиКлиентовИКонтактов.Оригинал
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт <> &ТекОбъект";
	Запрос.УстановитьПараметр("ТекОбъект", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

&НаСервере
Процедура СформироватьТаблицуДублей()
	
	ЗначениеВРеквизитФормы(Дубли_ТаблицаДублей(ПартнерОтбора), "ДублиКлиента");
	Дубли_ОбновитьЗаголовок();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДублиКлиентаПриИзмененииНаСервере(Оригинал, Дубль, Заменить, Комментарий)
	РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ЗаписатьДубль(Оригинал, Дубль, Заменить, Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ДублиКлиентаПриИзменении(Элемент)
	ТекДанные = Элемент.ТекущиеДанные;
	СтрОригинал = ДублиКлиента.НайтиСтроки(Новый Структура("ЭтоОригинал", Истина));
	Если СтрОригинал.Количество() Тогда
		Оригинал = СтрОригинал[0].Контакт;
	Иначе
		Оригинал = ПартнерОтбора;
	КонецЕсли;
	ДублиКлиентаПриИзмененииНаСервере(Оригинал, ТекДанные.Контакт, ТекДанные.Заменить, ТекДанные.Комментарий);
КонецПроцедуры

&НаСервере
Процедура Дубли_СвязатьВыбранныеНаСервере(Знач Дубли)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	CRM_ДублиКлиентовИКонтактов.Оригинал КАК Оригинал
	                      |ИЗ
	                      |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	                      |ГДЕ
	                      |	CRM_ДублиКлиентовИКонтактов.Оригинал В(&Оригинал)");
	Запрос.УстановитьПараметр("Оригинал", Дубли);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Оригинал = Выборка.Оригинал;
	Иначе
		Оригинал = ПервыйИзВыделенных;
	КонецЕсли;
	Дубли.Удалить(Дубли.Найти(Оригинал));
	Для Каждого Дубль Из Дубли Цикл
		РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ЗаписатьДубль(Оригинал, Дубль);
	КонецЦикла;
	СформироватьТаблицуДублей();
КонецПроцедуры

&НаКлиенте
Процедура Дубли_СвязатьВыбранные(Команда)
	Дубли_СвязатьВыбранныеНаСервере(Элементы.Список.ВыделенныеСтроки);
КонецПроцедуры

&НаСервере
Процедура Дубли_СвязатьВыбранныеКЛНаСервере(Знач Дубли)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	CRM_ДублиКлиентовИКонтактов.Оригинал КАК Оригинал
	                      |ИЗ
	                      |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	                      |ГДЕ
	                      |	CRM_ДублиКлиентовИКонтактов.Оригинал В(&Оригинал)");
	Запрос.УстановитьПараметр("Оригинал", Дубли);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Оригинал = Выборка.Оригинал;
	Иначе
		Оригинал = ПервыйИзВыделенныхКЛ;
	КонецЕсли;
	Дубли.Удалить(Дубли.Найти(Оригинал));
	Для Каждого Дубль Из Дубли Цикл
		РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ЗаписатьДубль(Оригинал, Дубль);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Дубли_СвязатьВыбранныеКЛ(Команда)
	Дубли_СвязатьВыбранныеКЛНаСервере(Элементы.Контакты.ВыделенныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура Дубли_ПоискДублей(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Настройки", Новый Структура("Настройки_ИскатьДублиКлиентов", Истина));
	ПараметрыФормы.Вставить("СкрытьГруппуКонтакты", Истина);
	ОткрытьФорму("Обработка.CRM_ПоискИЗаменаДублейКлиентовИКонтактов.Форма.Форма", ПараметрыФормы);
КонецПроцедуры



#КонецОбласти