
#Область ОписаниеПеременных

// ЛентаСобытий

&НаКлиенте
Перем БыстрыйВвод_КэшированноеВремя;

&НаКлиенте
Перем БыстрыйВвод_КэшированнаяДатаНачала;

&НаКлиенте
Перем БыстрыйВвод_АктивенАвтоПодбор;

&НаКлиенте
Перем Лента_Прокрутить;

// Конец ЛентаСобытий

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// +CRM
	ИспользоватьПодразделения = CRM_ОбщегоНазначенияПовтИсп.ИспользоватьПодразделения();
	
	Элементы.ОтборПодразделениеДляТегов.Видимость = ИспользоватьПодразделения;
	
	ПартнерыИКонтрагенты.ПартнерыФормаВыбораСпискаПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ИспользоватьПолнотекстовыйПоиск = ОбщегоНазначенияУТВызовСервера.ИспользуетсяПолнотекстовыйПоиск("ИспользоватьПолнотекстовыйПоиск");
	
	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, "Справочник.Партнеры КАК СправочникПартнеры", "
													|Справочник.Партнеры КАК СправочникПартнеры
													|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ЗаполненностьРеквизитовОбъектов КАК ЗаполненностьРеквизитовОбъектов
													|	ПО (ЗаполненностьРеквизитовОбъектов.Объект = СправочникПартнеры.Ссылка)
													|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ДатыКасанийКонтактов КАК ДатыКасанийКонтактов
													|ПО (ДатыКасанийКонтактов.Контакт = СправочникПартнеры.Ссылка)
													|	И (ДатыКасанийКонтактов.СвязанноеСвойство = ЗНАЧЕНИЕ(Справочник.CRM_СвязанныеСвойства.ДатаПоследнегоВзаимодействия))");
	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, "СправочникПартнеры.Ссылка,", "СправочникПартнеры.Ссылка,
													|	ЕСТЬNULL(ДатыКасанийКонтактов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ПоследнееВзаимодействие,
													|		ЗаполненностьРеквизитовОбъектов.ПроцентЗаполненностиОбщий КАК ПроцентЗаполнения,
													|		ВЫБОР
													|			КОГДА ЗаполненностьРеквизитовОбъектов.Объект ЕСТЬ NULL
													|					ИЛИ ЗаполненностьРеквизитовОбъектов.ТребуетсяПересчет
													|				ТОГДА 2
													|			КОГДА ЗаполненностьРеквизитовОбъектов.ПроцентЗаполненностиОбщий <= 33
													|				ТОГДА 0
													|			КОГДА ЗаполненностьРеквизитовОбъектов.ПроцентЗаполненностиОбщий <= 66
													|				ТОГДА 1
													|			ИНАЧЕ 3
													|		КОНЕЦ КАК ИндексКартинкиПроцентЗаполнения,
													|		НЕ(ЗаполненностьРеквизитовОбъектов.Объект ЕСТЬ NULL
													|				ИЛИ ЗаполненностьРеквизитовОбъектов.ТребуетсяПересчет) КАК ПроцентЗаполненияАктуален,
													|	СправочникПартнеры.CRM_ОсновнаяОтрасль КАК CRM_ОсновнаяОтрасль,
													|	СправочникПартнеры.CRM_ОсновноеКонтактноеЛицо КАК CRM_ОсновноеКонтактноеЛицо,
													|	СправочникПартнеры.CRM_СегментРынка КАК CRM_СегментРынка,
													|	СправочникПартнеры.CRM_СтатусРаботы КАК CRM_СтатусРаботы,
													|	СправочникПартнеры.CRM_ТипОтношенийПредставление КАК CRM_ТипОтношенийПредставление,
													|	СправочникПартнеры.CRM_ЧисленностьРабочихМест КАК CRM_ЧисленностьРабочихМест,
													|	СправочникПартнеры.CRM_ЧисленностьСотрудников КАК CRM_ЧисленностьСотрудников,");
	Элементы.ГруппаФильтры.Видимость = ИспользоватьПолнотекстовыйПоиск;
	// -CRM 
	
	// Обработчик подсистемы "Внешние обработки"
	
	// Электронные документы
	Если ПравоДоступа("Изменение", Метаданные.Справочники.Партнеры) Тогда
		Элементы.СписокЗагрузитьРеквизиты.Видимость = Истина;
	КонецЕсли;
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.Партнеры);
	// +CRM изменена Командная панель Списка: Элементы.СписокИзменитьВыделенные.Видимость = МожноРедактировать;
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	УстановитьВидимостьКомандКонтекстныхОтчетов();
	
	// +CRM
	
	// Видимость инфо-панелей
	ПометкаПоказатьСкрытьДопИнформацию 		= Истина;	// Значение по умолчанию
	ПометкаПоказатьСкрытьСодержание    		= Истина;	// Значение по умолчанию
	ТолькоАктивные							= Ложь;		// Значение по умолчанию
	
	КлючОбъекта = "Справочник.Партнеры.Форма.CRM_Модуль_ФормаСписка/ТекущиеДанные";
	Настройки = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(КлючОбъекта, "");
	
	Если Настройки <> Неопределено Тогда
	
		Если НЕ Настройки["ПометкаПоказатьСкрытьДопИнформацию"] = Неопределено Тогда
			ПометкаПоказатьСкрытьДопИнформацию = Настройки["ПометкаПоказатьСкрытьДопИнформацию"];
		КонецЕсли;
		
		Если НЕ Настройки["ПометкаПоказатьСкрытьСодержание"] = Неопределено Тогда
			ПометкаПоказатьСкрытьСодержание = Настройки["ПометкаПоказатьСкрытьСодержание"];
		КонецЕсли;
		
		Если НЕ Настройки["ПометкаИспользоватьПолнотекстовыйПоиск"] = Неопределено Тогда
			ПометкаИспользоватьПолнотекстовыйПоиск = Настройки["ПометкаИспользоватьПолнотекстовыйПоиск"];
		КонецЕсли;
		
		Если НЕ Настройки["ТолькоАктивные"] = Неопределено Тогда
			ТолькоАктивные = Настройки["ТолькоАктивные"];
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеРежимаППД = ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска();
	ИспользованиеППД = ПолучитьФункциональнуюОпцию("ИспользоватьПолнотекстовыйПоиск")
		И ЗначениеРежимаППД = РежимПолнотекстовогоПоиска.Разрешить;
	
	Элементы.СписокСкрытьПоказатьПоКлиентам.Пометка          = ПометкаПоказатьСкрытьДопИнформацию;
	Элементы.ГруппаПанельИнформации.Видимость                = ПометкаПоказатьСкрытьДопИнформацию;
	Элементы.РежимОтображенияИнформации.Видимость            = ПометкаПоказатьСкрытьДопИнформацию;
	Элементы.СписокСкрытьПоказатьСодержание.Пометка          = ПометкаПоказатьСкрытьСодержание;
	Элементы.СписокИспользоватьПолнотекстовыйПоиск.Пометка   = ПометкаИспользоватьПолнотекстовыйПоиск;
	Элементы.СписокИспользоватьПолнотекстовыйПоиск.Видимость = ИспользованиеППД;
	Элементы.ГруппаПолнотекстовыйПоиск.Видимость             = ИспользованиеППД И ПометкаИспользоватьПолнотекстовыйПоиск;
	Элементы.ГруппаДополнительныеПоляПоиска.Видимость        = Не ИспользованиеППД Или Не ПометкаИспользоватьПолнотекстовыйПоиск;
	
	Если CRM_ОбщегоНазначенияСервер.ЭтоМобильныйКлиент() Тогда
		Элементы.ГруппаПанельСтраницДополнительнойИнформации.Видимость = Ложь;
	Иначе	
		Элементы.ГруппаПанельСтраницДополнительнойИнформации.Видимость = ПометкаПоказатьСкрытьСодержание;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	ДополнительнаяИнформацияПриСозданииНаСервере();
	
	// +Теги
	Если НЕ ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТеги") Тогда
		Элементы.ОтборТеги.Видимость = Ложь;
		Элементы.ЗначенияОтбораТеги.Видимость = Ложь;
	Иначе
		ОтборПодразделениеДляТегов = Пользователи.АвторизованныйПользователь().Подразделение;
		СписокВышестоящихПодразделений.ЗагрузитьЗначения(CRM_МетодыМодулейМенеджеровСправочников.ПолучитьВсеПодразделенияРодители(ОтборПодразделениеДляТегов, Истина));

		ОбновитьЗначенияОтбораТегов();
	КонецЕсли; 
	ОтбиратьОбъектыБезТегов = Ложь;
	// -Теги
	
	// ЛентаСобытий
	Лента_ЗначенияНастроек = CRM_ЛентаСобытий.НастройкиЛенты(ТекущийПользователь, "ЛентаКлиента");
	CRM_ЛентаСобытий.НастроитьЛенту(ЭтотОбъект, Лента_ЗначенияНастроек);
	НастроитьОбластьВвода();
	// Конец ЛентаСобытий
	
	КоличествоПолейПоиска = 1;
	
	СоздатьКнопкиОтображениеИнформации();

	ОбновитьСоставКомандГруппыСоздать();
	Элементы.Список.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Нет;    
	
	CRM_ОбщегоНазначенияПовтИсп.ЗаполнитьСписокВыбораВариантовСроков(Элементы.БыстрыйВвод_ВзаимодействиеДатаНачала_Дата);
	CRM_ОбщегоНазначенияПовтИсп.ЗаполнитьСписокВыбораВариантовСроков(Элементы.БыстрыйВвод_ЗадачаДатаОкончания_Дата);
	
	// Полнотекстовый поиск
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ИндексПолнотекстовогоПоискаАктуален = ПолнотекстовыйПоискСервер.ИндексПоискаАктуален();
	РасширенныйПоиск = Ложь;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
		"ОтборПоПолнотекстовомуПоискуУстановлен", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
		"ОтборПоПолнотекстовомуПоиску", Неопределено);
	ОснованиеВыбора = "";
	// Конец Полнотекстовый поиск
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	ВыполнитьОбработкуОтображенияРеквизитовКонтактнойИнформации();
	
	УстановитьУсловноеОформление_ПроцентЗаполнения();
	УстановитьУсловноеОформление_СтатусРаботы();
	
	// -CRM
	
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	ПартнерыИКонтрагентыКлиент.ПанельНавигацииУправлениеДоступностью(ЭтотОбъект);
	
	// +CRM
	ПереключательРежимОтображенияИнформацииПриИзменении(Неопределено);
	
	ДополнительнаяИнформацияПриОткрытии();
	
	// Перейдем сразу на вкладку отборов "Быстрые отборы" и оставим ее в свернутом режиме.
	Элементы.ПанельЗначенийОтбора.Видимость			= Истина;
	Элементы.ПанельЗначенийОтбора.ТекущаяСтраница	= Элементы.ЗначенияОтбораБыстрыеОтборы;
	БыстрыеОтборы(Элементы.БыстрыеОтборы);
	
	Если ЗначениеЗаполнено(ОтборОсновнойМенеджер) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ОсновнойМенеджер", ОтборОсновнойМенеджер, Истина);
		CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборОсновнойМенеджер);
	КонецЕсли;
	
	// ЛентаСобытий
	БыстрыйВвод_КэшированноеВремя = 0;
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	БыстрыйВвод_АктивенАвтоПодбор = Ложь;
	Лента_Прокрутить = Ложь;
	// Конец ЛентаСобытий
	// -CRM
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		ПартнерыИКонтрагентыКлиент.ФормаСпискаВыбораПриЗакрытии(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ПокраситьКнопкиОтображениеИнформацииНаСервере();
	Элементы.ГруппаПанельФильтры.Видимость = (РежимОтображенияИнформации = 0);
	Элементы.Лента_Обложка.Видимость = (РежимОтображенияИнформации = 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ТребуетсяОбновлениеПанелиИнформации = Ложь;
	
	ПартнерыИКонтрагентыКлиент.ПартнерыФормаСпискаВыбораОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ТребуетсяОбновлениеПанелиИнформации);
	
	// +CRM
	Если ИмяСобытия = "ЛентаСобытий_Обновить"
		Или ИмяСобытия = "Запись_Файл"
		Или ИмяСобытия = "СохраненоПоручение"
		Или ИмяСобытия = "ОбновитьПланировщик" Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	ИначеЕсли ИмяСобытия = "Создан новый партнер" Тогда
		Если ТипЗнч(Параметр) = Тип("СправочникСсылка.Партнеры") Тогда
			Элементы.Список.ТекущаяСтрока = Параметр;
		ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Элементы.Список.ТекущаяСтрока = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр, "Владелец");
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "КонтактноеЛицоЗаписано" Тогда
		Если Элементы.СписокКонтактов.ТекущиеДанные <> Неопределено
			И Элементы.СписокКонтактов.ТекущиеДанные.КонтактноеЛицо = Параметр Тогда
			ПодключитьОбработчикОжидания("ОбновитьДанныеСтрокиСписокКонтактов", 0.2, Истина);
			Элементы.Список.Обновить();
		КонецЕсли;
	КонецЕсли;
	// -CRM
	
	Если ТребуетсяОбновлениеПанелиИнформации Тогда
		ИгнорироватьСохранениеТекущейПозиции = Истина;
		ОбработатьАктивизациюСтрокиСписка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	ПартнерыИКонтрагенты.ПередЗагрузкойДанныхИзНастроекНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТолькоМоиПриИзменении(Элемент)
	
	ИзменитьОтборСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ВыполнитьПоискПолнотекстовый(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеВыбораНажатие(Элемент, СтандартнаяОбработка)
	
	ПартнерыИКонтрагентыКлиент.ПартнерыФормаСпискаВыбораОснованиеВыбораНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СегментПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.ПартнерыФормаСпискаВыбораСегментПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СпискиВыбораКлиентСервер.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипФильтраОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьФильтрПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.ПанельНавигацииУправлениеДоступностью(ЭтотОбъект);
	ОбработатьАктивизациюСтрокиДинамическогоСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ДинамическийСписокФильтрыПриАктивизацииСтроки(Элемент)
	
	Если Элемент.Имя = "БизнесРегионы" И Элементы.СтраницыТипФильтра.ТекущаяСтраница <> Элементы.СтраницаБизнесРегионы Тогда
		Возврат;
	ИначеЕсли Элемент.Имя = "ГруппыДоступаПартнеров" И Элементы.СтраницыТипФильтра.ТекущаяСтраница <> Элементы.СтраницаГруппыДоступа Тогда
		Возврат;
	ИначеЕсли Элемент.Имя = "Менеджеры" И Элементы.СтраницыТипФильтра.ТекущаяСтраница <> Элементы.СтраницаМенеджеры Тогда
		Возврат;
	ИначеЕсли Элемент.Имя = "Свойства" И Элементы.СтраницыТипФильтра.ТекущаяСтраница <> Элементы.СтраницаСвойства Тогда
		Возврат;
	ИначеЕсли Элемент.Имя = "Категории" И Элементы.СтраницыТипФильтра.ТекущаяСтраница <> Элементы.СтраницаКатегории Тогда
		Возврат;
	КонецЕсли;
	
	Если НеОтрабатыватьАктивизациюПанелиНавигации Тогда
		НеОтрабатыватьАктивизациюПанелиНавигации = Ложь;
	Иначе
		Если Элемент.Имя = "БизнесРегионы" И ТекущееЗначениеФильтра = Элементы.БизнесРегионы.ТекущаяСтрока Тогда
			Возврат;
		ИначеЕсли Элемент.Имя = "ГруппыДоступаПартнеров" И ТекущееЗначениеФильтра = Элементы.ГруппыДоступаПартнеров.ТекущаяСтрока Тогда
			Возврат;
		ИначеЕсли Элемент.Имя = "Менеджеры" И ТекущееЗначениеФильтра = Элементы.Менеджеры.ТекущаяСтрока Тогда
			Возврат;
		ИначеЕсли Элемент.Имя = "Свойства" И ТекущееЗначениеФильтра = Свойства.НайтиПоИдентификатору(Элементы.Свойства.ТекущаяСтрока) Тогда
			Возврат;
		ИначеЕсли Элемент.Имя = "Категории" И ТекущееЗначениеФильтра = Категории.НайтиПоИдентификатору(Элементы.Категории.ТекущаяСтрока) Тогда
			Возврат;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиДинамическогоСписка",0.2,Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПартнераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПартнерыИКонтрагентыКлиент.КонтрагентыПартнераНажатие(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаПартнераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПартнерыИКонтрагентыКлиент.КонтактныеЛицаПартнераНажатие(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоВсемПриИзменении(Элемент)
	
	ИзменитьОтборСписок(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипФильтраПриИзменении(Элемент)
	
	ТребуетсяЗаполнениеСтраницыСвойств = ЛОЖЬ;
	ПартнерыИКонтрагентыКлиент.ФильтрыПанельНавигацииТипФильтраПриИзменении(ЭтотОбъект, Элемент, ТребуетсяЗаполнениеСтраницыСвойств);
	ИзменитьОтборСписок(Истина, ТребуетсяЗаполнениеСтраницыСвойств);
	Если ТребуетсяЗаполнениеСтраницыСвойств Тогда
		Для каждого СтрокаДерева Из Свойства.ПолучитьЭлементы() Цикл
			Элементы.Свойства.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПартнерыИКонтрагентыКлиент.ФильтрыПанельНавигацииПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле) 
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	КоличествоЗаписанных = 0;
	ПартнерыИКонтрагентыКлиент.ФильтрыПанельНавигацииПеретаскивание(КоличествоЗаписанных, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле);
	
	Если КоличествоЗаписанных > 0 Тогда
		ИзменитьОтборСписок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеДляТеговПриИзменении(Элемент)
	ОтборПодразделениеДляТеговПриИзмененииНаСервере();
	ОбновитьЗначенияОтбораТегов();
КонецПроцедуры

&НаКлиенте
Процедура ОтборОсновнойМенеджерПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОтборОсновнойМенеджер) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ОсновнойМенеджер", ОтборОсновнойМенеджер, Истина);
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ОсновнойМенеджер");			
	КонецЕсли;
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборОсновнойМенеджер);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.Найти("ГоловнойКонтрагент") Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные.ОбособленноеПодразделение И Не ЗначениеЗаполнено(ТекущиеДанные.ГоловнойКонтрагент) Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("Контрагент", ТекущиеДанные.Контрагент);
			ПараметрыЗаполнения.Вставить("ИНН",        ТекущиеДанные.ИНН);
			ПараметрыЗаполнения.Вставить("Партнер",    ТекущиеДанные.Ссылка);
			ПараметрыЗаполнения.Вставить("ИспользоватьПартнеровКакКонтрагентов", Истина);
			
			Оповещение = Новый ОписаниеОповещения("ЗаполнитьГоловногоКонтрагентаЗавершение", ЭтотОбъект);
			ПартнерыИКонтрагентыКлиент.ЗаполнитьГоловногоКонтрагента(ЭтотОбъект, ПараметрыЗаполнения, Истина, Оповещение);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// +CRM
	ТекущиеДанныеСписка = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанныеСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбрабатываемаяСтрока = Неопределено;
	Для Каждого ТекущаяСтрокаКолонкиКИ Из ВидыКонтактнойИнформацииСписка Цикл
		Если СтрНачинаетсяС(Поле.Имя, ТекущаяСтрокаКолонкиКИ.НаименованиеКолонки) Тогда
			ОбрабатываемаяСтрока = ТекущаяСтрокаКолонкиКИ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбрабатываемаяСтрока <> Неопределено Тогда
		НаименованиеКолонкиДанныхСписка = СтрЗаменить(ОбрабатываемаяСтрока.НаименованиеКолонки, "Ссылка_", "Ссылка.");
		
		Если ТекущиеДанныеСписка.Свойство(НаименованиеКолонкиДанныхСписка) Тогда
			ПочтаКИ			= ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты");
			АдресКИ			= ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес");
			ТелефонКИ		= ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
			ВебСтраницаКИ	= ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница");
			
			ЗначениеПоляОбработки = ТекущиеДанныеСписка[НаименованиеКолонкиДанныхСписка];
			
			Если ОбрабатываемаяСтрока.ТипКонтактнойИнформации = ПочтаКИ Тогда
				СтандартнаяОбработка = Ложь;
				
				СписокАдресов = Новый СписокЗначений;
				Для Каждого ТекущийПолучатель Из СтрРазделить(ЗначениеПоляОбработки, ",", Ложь) Цикл
					СписокАдресов.Добавить(ТекущиеДанныеСписка.Ссылка, СокрЛП(ТекущийПолучатель));
				КонецЦикла;
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("СписокАдресов", СписокАдресов);
				
				ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", ПараметрыФормы);
			ИначеЕсли ОбрабатываемаяСтрока.ТипКонтактнойИнформации = ТелефонКИ Тогда
				СтандартнаяОбработка = Ложь;
				
				Если Не сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина, ТекущиеДанныеСписка.Ссылка) Тогда
					Возврат;
				КонецЕсли;
				
				МассивТелефонов = ПолучитьМассивЗначенийКИПоВидуКонтактнойИнформации(
				ТекущиеДанныеСписка.Ссылка, ОбрабатываемаяСтрока.ВидКонтактнойИнформации);
				
				ДанныеЗаполнения = Новый Структура;
				ДанныеЗаполнения.Вставить("Основание", ТекущиеДанныеСписка.Ссылка);
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
				
				Если МассивТелефонов.Количество() = 1 Тогда
					сфпСофтФонПроКлиент.сфпПозвонить(
						ЗначениеПоляОбработки,
						ТекущиеДанныеСписка.Ссылка,
						ДополнительныеПараметры);
				ИначеЕсли МассивТелефонов.Количество() > 1 Тогда
					СписокКоманд = Новый СписокЗначений;
					СписокКоманд.ЗагрузитьЗначения(МассивТелефонов);
					
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ВыборТелефонногоНомераДляЗвонкаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
					
					ПоказатьВыборИзМеню(ОписаниеОповещения, СписокКоманд, Поле);
				Иначе
					ОбщегоНазначенияКлиент.СообщитьПользователю(
						"en = 'There are no phone numbers in the client''s card.'; ru = 'В карточке клиенте нет телефонных номеров.'");
				КонецЕсли;
			ИначеЕсли ОбрабатываемаяСтрока.ТипКонтактнойИнформации = ВебСтраницаКИ Тогда
				СтандартнаяОбработка = Ложь;
				
				Если СтрНайти(ЗначениеПоляОбработки, "://") = 0 Тогда
					ЗначениеПоляОбработки = "http://" + ЗначениеПоляОбработки;
				КонецЕсли;
				
				ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ЗначениеПоляОбработки);
			ИначеЕсли ОбрабатываемаяСтрока.ТипКонтактнойИнформации = АдресКИ Тогда
				СтандартнаяОбработка = Ложь;
				
				СписокКоманд = Новый СписокЗначений;
				СписокКоманд.Добавить("ПоказатьАдресНаЯндексКартах",
					НСтр("ru='Адрес на Яндекс.Картах';en='Address on Yandex.Maps'"), , БиблиотекаКартинок.ЯндексКарты);
				СписокКоманд.Добавить("ПоказатьАдресНаGoogleMaps",
					НСтр("ru='Адрес на Google Maps';en='Address on Google Maps'"), , БиблиотекаКартинок.GoogleMaps);
				
				СтруктураКИ = Новый Структура;
				СтруктураКИ.Вставить("Представление", ЗначениеПоляОбработки);
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"КонтактнаяИнформацияНажатиеПродолжение", CRM_УправлениеКонтактнойИнформациейКлиент, СтруктураКИ);
				
				ПоказатьВыборИзМеню(ОписаниеОповещения, СписокКоманд, Поле);
				
			Иначе
				
				CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
					"CRM_Статистика.Клиенты.Клиент.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
				
			КонецЕсли;
			
		Иначе
			
			CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
				"CRM_Статистика.Клиенты.Клиент.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
			
		КонецЕсли;
		
	Иначе
		
		CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
			"CRM_Статистика.Клиенты.Клиент.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
		
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// +CRM
	Если CRM_ОбщегоНазначенияКлиент.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элемент.ТекущаяСтрока <> Неопределено И Элемент.ВыделенныеСтроки.Количество() = 1 Тогда
		ПервыйИзВыделенных = Элемент.ТекущаяСтрока;
	КонецЕсли;
	// -CRM
	
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСписка", 0.2, Истина);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	бИспользоватьПомощник = Не Копирование
		 И (CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ИспользоватьПомощникВводаНовогоКлиента") = Истина);
	
	ПартнерыИКонтрагентыКлиент.ПартнерыФормаСпискаВыбораСписокПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);
	
	Если Не бИспользоватьПомощник И Не Группа Тогда
		CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
			"CRM_Статистика.Клиенты.Клиент.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СписокПриЗагрузкеПользовательскихНастроекНаСервере(Элемент, Настройки, ИспользуютсяСтандартныеНастройки)
	Элементы.Список.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьНового(Команда)
	
	ПартнерыИКонтрагентыКлиент.ПартнерыФормаСпискаВыбораСоздатьНового(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПП(Команда)
	
	ВыполнитьПоискПолнотекстовый(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРеквизиты(Команда)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Фильтр = НСтр("ru='XML файл'; en='XML file'")+"(*.xml)|*.xml";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗагрузитьРеквизитыВыборФайла",
		ЭтотОбъект);
	
	ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетЗаполненностьСвойствПартнеров(Команда)
	ПараметрыОтчета = Новый Структура("СформироватьПриОткрытии", Истина);
	ОткрытьФорму("Отчет.ЗаполнениеСвойствПартнеров.Форма", ПараметрыОтчета, ЭтотОбъект);
КонецПроцедуры

// +CRM

&НаКлиенте
Процедура ПринятьОбращениеПоКлиентуПоддержка(Команда)
	
	ПринятьОбращениеПоКлиенту(Элементы.Список.ТекущаяСтрока,
								CRM_МетодыФормОбработокСервер.МастерОткрытИзОбращений(),
								ПредопределенноеЗначение("Справочник.CRM_ТипыОбращений.Обращение"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОбращениеПоКлиентуПродажа(Команда)
	
	ПринятьОбращениеПоКлиенту(Элементы.Список.ТекущаяСтрока,
								CRM_МетодыФормОбработокСервер.МастерОткрытИзПродаж(),
								ПредопределенноеЗначение("Справочник.CRM_ТипыОбращений.Интерес"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОбращениеПоКлиенту(ТекущийКлиент, ИсточникОткрытияМастера, ТипОбращения)
			
	Если ТипЗнч(ТекущийКлиент) = Тип("СправочникСсылка.Партнеры") Тогда
		Если Истина Тогда
			
			СтруктураЗаполнения = Новый Структура("Основание", ТекущийКлиент);
			СтруктураЗаполнения.Вставить("ТипОбращения", ТипОбращения);
			СтруктураЗаполнения.Вставить("ИсточникОткрытияМастера", ИсточникОткрытияМастера);
			СтруктураЗаполнения.Вставить("НеОбновлятьТипОбращения", Истина);
			
			CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
				"CRM_Статистика.Продажи.Интерес.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
			
			ОткрытьФорму("Документ.CRM_Интерес.ФормаОбъекта", СтруктураЗаполнения, ЭтотОбъект, УникальныйИдентификатор);
			
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для группы клиентов ввод обращения недоступен!';
				|en='For the group of customers,
				| the input of Lead is not available!'"));
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТегОтборОчистить(Команда)
	Элемент = Элементы.Найти("Тег_Очистить");
	Пометка = CRM_ТегиКлиент.ТегОтборНажатие("Документ.CRM_Интерес", ЭтотОбъект, "Список", Элемент, Истина);	
	ОбновитьЗначенияОтбораТегов();
КонецПроцедуры

&НаКлиенте
Процедура ОтборТеги(Команда)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Команда);
	Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость = Ложь;	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборы(Команда)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Команда);
	Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость = Истина;	
КонецПроцедуры

// -CRM

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДублиКлиентаКонтакт");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДублиКлиентаЗаменить");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДублиКлиентаКомментарий");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДублиКлиентаАвтор");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДублиКлиентаДата");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДублиКлиента.ЭтоОригинал");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", WindowsШрифты.ШрифтДиалоговИМеню);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокКонтактов");
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокКонтактов.КонтактДоступен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокКонтактов.Работает");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.CRM_СерыйДляВторостепенныхФункций);
	
	ПартнерыИКонтрагенты.ПартнерыФормаВыбораСпискаУсловноеОформление(ЭтотОбъект);
	ПартнерыИКонтрагенты.УстановитьОформлениеГоловногоКонтрагентаВСписке(ЭтотОбъект);
	
КонецПроцедуры

#Область Прочее

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСписка()
	
	Если Не ПартнерыИКонтрагентыКлиент.ПозиционированиеКорректно("Список",ЭтотОбъект) Тогда
		
		Если ПометкаПоказатьСкрытьДопИнформацию Тогда
			Если ТекущийАктивныйПартнер <> ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка") Тогда
					ЗаполнитьПанельИнформацииПоДаннымПартнера(Неопределено);
			КонецЕсли;
		КонецЕсли;
		ОснованиеВыбора = "";
		
	Иначе
		
		// см. данный код в ОбработатьАктивизациюСтрокиСпискаСервер
		//Если ПометкаПоказатьСкрытьДопИнформацию Тогда
		//	Если ТекущийАктивныйПартнер <> Элементы.Список.ТекущаяСтрока ИЛИ ИгнорироватьСохранениеТекущейПозиции Тогда
		//		ЗаполнитьПанельИнформацииПоДаннымПартнера(Элементы.Список.ТекущаяСтрока);
		//	КонецЕсли;
		//КонецЕсли;
		
		Если РасширенныйПоиск Тогда
			ПартнерыИКонтрагентыКлиент.ЗаполнитьСтрокуОснования(ЭтотОбъект);
		Иначе
			ОснованиеВыбора = "";
		КонецЕсли;
		
	КонецЕсли;
	
	ИгнорироватьСохранениеТекущейПозиции = Ложь;
	
	// +CRM
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если Элементы.Список.ТекущиеДанные.Свойство("ГруппировкаСтроки") Тогда
		ПартнерОтбора = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	ИначеЕсли ПартнерОтбора <> Элементы.Список.ТекущаяСтрока Тогда
		ПартнерОтбора = Элементы.Список.ТекущаяСтрока;
		БыстрыйВвод_ВзаимодействиеПолучатель = Неопределено;
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбработатьАктивизациюСтрокиСпискаСервер();
	
	Если ПометкаПоказатьСкрытьДопИнформацию Тогда
		Если РежимОтображенияИнформации <> 0 Тогда
			Если Элементы.Список.ТекущиеДанные.Свойство("ГруппировкаСтроки") Тогда
				Элементы.Лента_Обложка.Доступность = Ложь;
				НеЗаполнятьЛенту = Истина;
			Иначе
				Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
					Элементы.Лента_Обложка.Доступность = НЕ Элементы.Список.ТекущиеДанные.ЭтоГруппа;
					НеЗаполнятьЛенту = Элементы.Список.ТекущиеДанные.ЭтоГруппа;
				КонецЕсли;
			КонецЕсли;
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьАктивизациюСтрокиСпискаСервер()
	
	ДоступностьПринятьОбращение = НЕ ЭтоГруппаПартнеров(ПартнерОтбора);
	
	Если ПометкаПоказатьСкрытьДопИнформацию Тогда
		Если РежимОтображенияИнформации = 0 Тогда
			Если ТекущийАктивныйПартнер <> Элементы.Список.ТекущаяСтрока ИЛИ ИгнорироватьСохранениеТекущейПозиции Тогда
				ЗаполнитьПанельИнформацииПоДаннымПартнера(ПартнерОтбора);
			КонецЕсли;
		ИначеЕсли ДоступностьПринятьОбращение Тогда	
			БыстрыйВвод_ВзаимодействиеПолучатель = ПартнерОтбора.CRM_ОсновноеКонтактноеЛицо;
		КонецЕсли;
	КонецЕсли;
	
	Если ПометкаПоказатьСкрытьСодержание Тогда
		Если Интересы.Отбор.Элементы.Количество() > 0 Тогда
			ИнтересыОтборПоКлиенту					= Интересы.Отбор.Элементы[0];
			ИнтересыОтборПоКлиенту.ПравоеЗначение	= ПартнерОтбора;
		КонецЕсли;
		CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.Интересы);
		Если ИспользоватьПоддержку Тогда
			CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.ИнтересыПоддержки);
		КонецЕсли;
		СформироватьТаблицуДублей();
		
		СформироватьТаблицуКонтактов(ПартнерОтбора);
	КонецЕсли;
	
	Если Элементы.Найти("ПринятьОбращениеПоКлиенту") <> Неопределено Тогда
		Элементы.ПринятьОбращениеПоКлиенту.Доступность = ДоступностьПринятьОбращение;
	КонецЕсли;
	
	Если Элементы.Найти("ПринятьОбращениеПоКлиентуПоддержка") <> Неопределено Тогда
		Элементы.ПринятьОбращениеПоКлиентуПоддержка.Доступность = ДоступностьПринятьОбращение;
	КонецЕсли;
	
	НастроитьОбластьВводаПоСтранице();
	
	CRM_РезультатыПоиска = "";
	Если ДоступностьПринятьОбращение Тогда
		CRM_СформироватьСтрокуРезультатаПоиска(ПартнерОтбора);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура CRM_СформироватьСтрокуРезультатаПоиска(Партнер)
	CRM_РезультатыПоиска = "";
	СтруктураПоиска = Новый Структура("Партнер", Партнер);
	Если ПометкаИспользоватьПолнотекстовыйПоиск Тогда
		МассивСтрок = Основания.НайтиСтроки(СтруктураПоиска);
		CRM_НайденнаяСсылка = Неопределено;
		Если МассивСтрок.Количество() > 0 Тогда
			
			СтрокаНайденного = МассивСтрок[0];
			CRM_НайденнаяСсылка = СтрокаНайденного.Партнер;
			Если ТипЗнч(СтрокаНайденного.Ссылка) = Тип("СправочникСсылка.Партнеры") Тогда
				ВидСправочника = "партнера";
			ИначеЕсли ТипЗнч(СтрокаНайденного.Ссылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда	
				ВидСправочника = "контактного лица";
			КонецЕсли;	
			CRM_РезультатыПоиска = СтрокаНайденного.Основание;
		КонецЕсли;	
	Иначе	
		МассивСтрок = CRM_ТаблицаНайденныхСсылок.НайтиСтроки(СтруктураПоиска);
		CRM_НайденнаяСсылка = Неопределено;
		Если МассивСтрок.Количество() > 0 Тогда
			
			СтрокаНайденного = МассивСтрок[0];
			CRM_НайденнаяСсылка = СтрокаНайденного.Владелец;
			Если ТипЗнч(СтрокаНайденного.Владелец) = Тип("СправочникСсылка.Партнеры") Тогда
				ВидСправочника = "партнера";
			ИначеЕсли ТипЗнч(СтрокаНайденного.Владелец) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда	
				ВидСправочника = "контактного лица";
			КонецЕсли;	
			CRM_РезультатыПоиска = "Найдено в реквизите " + ВидСправочника + " " + СтрокаНайденного.Владелец + " '" + СтрокаНайденного.ПолеПоиска + "': " + СтрокаНайденного.ЗначениеПоиска;// + СтрокаНайденного.Партнер+"/"+СтрокаНайденного.Владелец+"/"+СтрокаНайденного.ВидКонтактнойИнформации+"/"+СтрокаНайденного.ЗначениеПоиска+"/";
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_РезультатыПоискаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(CRM_НайденнаяСсылка) = Тип("СправочникСсылка.Партнеры") Тогда
		CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
			"CRM_Статистика.Клиенты.Клиент.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
		Открытьформу("Справочник.Партнеры.ФормаОбъекта", Новый Структура("Ключ", CRM_НайденнаяСсылка));
	ИначеЕсли ТипЗнч(CRM_НайденнаяСсылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда	
		CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
			"CRM_Статистика.Клиенты.КонтактноеЛицо.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
		Открытьформу("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", Новый Структура("Ключ", CRM_НайденнаяСсылка));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПанельИнформацииПоДаннымПартнера(Партнер)
	
	ПартнерыИКонтрагенты.ЗаполнитьПанельИнформацииПоДаннымПартнера(ЭтотОбъект, Партнер);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиДинамическогоСписка()

	ИзменитьОтборСписок();

КонецПроцедуры

&НаСервере
Процедура ИзменитьОтборСписок(ПереформированиеПанелиНавигации = Ложь, ТребуетсяЗаполнениеСтраницыСвойств = Ложь)

	ПартнерыИКонтрагенты.ИзменитьОтборСписок(ЭтотОбъект, ПереформированиеПанелиНавигации, ТребуетсяЗаполнениеСтраницыСвойств);

КонецПроцедуры

&НаСервере 
Процедура УстановитьВидимостьКомандКонтекстныхОтчетов()
	КоличествоДоступныхОтчетов = 0;
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ЗаполнениеСвойствПартнеров) Тогда
		Элементы.ОткрытьОтчетЗаполненностьСвойствПартнеров.Видимость = Истина;
		КоличествоДоступныхОтчетов = КоличествоДоступныхОтчетов + 1;
	Иначе
		Элементы.ОткрытьОтчетЗаполненностьСвойствПартнеров.Видимость = Ложь;
	КонецЕсли;
	
	Если КоличествоДоступныхОтчетов > 0 Тогда
		Элементы.СтраницыКонтекстныеОтчеты.ТекущаяСтраница = Элементы.СтраницаДоступныеОтчеты;
	Иначе
		Элементы.СтраницыКонтекстныеОтчеты.ТекущаяСтраница = Элементы.СтраницаНетДоступныхОтчетов;
	КонецЕсли;
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт // АПК:78 - исключить из проверки.
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьГоловногоКонтрагентаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРеквизитыВыборФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	ФайлЗагрузки = ВыбранныеФайлы[0];
	ДвоичныеДанные  = Новый ДвоичныеДанные(ФайлЗагрузки);
	СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ОткрытьФорму("Справочник.Партнеры.Форма.ПомощникНового",
		Новый Структура("СсылкаНаФайл", СсылкаНаФайл),
		,
		УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область МетодыCRM

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ЭтоИнтересы = ТекущаяСтраница = Элементы.ГруппаИнтересы;
	ЭтоИнтересыПоддержки = ТекущаяСтраница = Элементы.ГруппаИнтересыПоддержки;
	
	Если ТекущаяСтраница = Элементы.ГруппаКонтакты Тогда
		ИспользуемаяСсылкаНаОбъект = ?(
			Элементы.СписокКонтактов.ТекущиеДанные <> Неопределено,
			Элементы.СписокКонтактов.ТекущиеДанные.КонтактноеЛицо,
			Неопределено);
		
		ОграничениеТиповОтображения = НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка2();
		
		CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПриАктивизацииСтроки(
			ЭтотОбъект,
			ИспользуемаяСсылкаНаОбъект,
			ОграничениеТиповОтображения,
			"ГруппаПанельИнформации1",
			"ПолеОтображениеСодержания1");
	ИначеЕсли ЭтоИнтересы ИЛИ ЭтоИнтересыПоддержки Тогда
		
		СписокИнтересы_УстановитьОтборПоТипуОбращения();
		
		ТекущаяСтрока = Неопределено;
		
		Если ЭтоИнтересы Тогда
			ТекущаяСтрока = Элементы.Интересы.ТекущаяСтрока;
		ИначеЕсли ЭтоИнтересыПоддержки Тогда
			ТекущаяСтрока = Элементы.ИнтересыПоддержки.ТекущаяСтрока;
		КонецЕсли;
		
		ОграничениеТиповОтображения = НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка1();
		
		CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПриАктивизацииСтроки(
			ЭтотОбъект,
			ТекущаяСтрока,
			ОграничениеТиповОтображения,
			"ГруппаПанельИнформации1",
			"ПолеОтображениеСодержания1");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСодержаниеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	// Поле отображения содержания.
	Если Элемент.Имя = "ПолеОтображениеСодержания" Тогда
		
		CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия,
			 СтандартнаяОбработка,
			 НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка());
		
	ИначеЕсли Элемент.Имя = "ПолеОтображениеСодержания1" Тогда
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКонтакты Тогда
			
			CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия,
				 СтандартнаяОбработка,
				 НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка2());
			
		ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаИнтересы Тогда
			
			CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия,
				 СтандартнаяОбработка,
				 НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка1());
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтересыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСпискаИнтересы", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтересыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	Если Элементы.Список.ТекущиеДанные.Свойство("ГруппировкаСтроки") Тогда Возврат; КонецЕсли;
	
	ПартнерОтбора = Элементы.Список.ТекущаяСтрока;
	ПринятьОбращениеПоКлиенту(Элементы.Список.ТекущаяСтрока,
							CRM_МетодыФормОбработокСервер.МастерОткрытИзПродаж(),
							ПредопределенноеЗначение("Справочник.CRM_ТипыОбращений.Интерес"));
КонецПроцедуры

&НаКлиенте
Процедура ИнтересыПоддержкиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСпискаИнтересы", 0.2, Истина);
	
КонецПроцедуры

//
&НаКлиенте
Процедура ИнтересыПоддержкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	Если Элементы.Список.ТекущиеДанные.Свойство("ГруппировкаСтроки") Тогда Возврат; КонецЕсли;
	
	ПринятьОбращениеПоКлиенту(Элементы.Список.ТекущаяСтрока,
							CRM_МетодыФормОбработокСервер.МастерОткрытИзОбращений(),
							ПредопределенноеЗначение("Справочник.CRM_ТипыОбращений.Обращение"));
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтактовПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущаяСтрока <> Неопределено И Элемент.ВыделенныеСтроки.Количество() = 1 Тогда
		ПервыйИзВыделенныхКЛ = Элемент.ТекущиеДанные.КонтактноеЛицо;
	КонецЕсли;
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСпискаКонтакты", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтактовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Контакт = Элемент.ТекущиеДанные.КонтактноеЛицо;
		Если Элемент.ТекущиеДанные.КонтактДоступен Тогда
			CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
				"CRM_Статистика.Клиенты.КонтактноеЛицо.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
			Открытьформу("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", Новый Структура("Ключ", Контакт));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтактовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	Если Элементы.Список.ТекущиеДанные.Свойство("ГруппировкаСтроки") Тогда Возврат; КонецЕсли;
	
	Если Копирование Тогда
		ПараметрыФормы = Новый Структура("ЗначениеКопирования", Элемент.ТекущиеДанные.КонтактноеЛицо);
		CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
			"CRM_Статистика.Клиенты.КонтактноеЛицо.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
		ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
	ПартнерОтбора = Элементы.Список.ТекущаяСтрока;
	// Если CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ПартнерОтбора, "ЭтоГруппа") Тогда Возврат КонецЕсли; // +CRM_Модуль
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеСозданияКонтакта", ЭтотОбъект, Новый Структура("ПартнерОтбора", ПартнерОтбора));
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Клиенты.КонтактноеЛицо.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", Новый Структура("Владелец", ПартнерОтбора), ЭтотОбъект,,,, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтактовПередУдалением(Элемент, Отказ)
	Отказ=Истина;
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ПартнерОтбора = Элементы.Список.ТекущаяСтрока;
		Контакт = Элемент.ТекущиеДанные.КонтактноеЛицо;
		ПометкаУ = Элемент.ТекущиеДанные.ПометкаУ;
		Если ПометкаУ Тогда
			ТекстВопроса = НСтр("ru = 'Снять с контакта ""%1"" пометку на удаление?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Пометить на удаление контакт ""%1""?'");
		КонецЕсли;
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, Контакт);
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьПометкуНаУдаление", ЭтотОбъект, Контакт);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтактовПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Контакт = Элемент.ТекущиеДанные.КонтактноеЛицо;
		Если Элемент.ТекущиеДанные.КонтактДоступен Тогда
			CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
				"CRM_Статистика.Клиенты.КонтактноеЛицо.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
			Открытьформу("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", Новый Структура("Ключ", Контакт));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуНаУдаление(РезультатВопроса, ДопПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СнятьУстановитьПометкуНаСервере(ДопПараметры);
		ПартнерОтбора = Элементы.Список.ТекущаяСтрока;
		СформироватьТаблицуКонтактов(ПартнерОтбора);
	КонецЕсли;
КонецПроцедуры
//

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСпискаИнтересы()
	
	ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	
	ЭтоИнтересы = ТекущаяСтраница = Элементы.ГруппаИнтересы;
	ЭтоИнтересыПоддержки = ТекущаяСтраница = Элементы.ГруппаИнтересыПоддержки;
	
	ТекущаяСтрока = Неопределено;
	
	Если ЭтоИнтересы Тогда
		ТекущаяСтрока = Элементы.Интересы.ТекущаяСтрока;
	ИначеЕсли ЭтоИнтересыПоддержки Тогда
		ТекущаяСтрока = Элементы.ИнтересыПоддержки.ТекущаяСтрока;
	КонецЕсли;
	
	CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПриАктивизацииСтроки(
		ЭтотОбъект,
		ТекущаяСтрока,
		НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка1(),
		"ГруппаПанельИнформации1",
		"ПолеОтображениеСодержания1");
	
КонецПроцедуры

&НаСервере
Процедура СписокИнтересы_УстановитьОтборПоТипуОбращения()
	
	ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	
	ЭтоИнтересы = ТекущаяСтраница = Элементы.ГруппаИнтересы;
	ЭтоИнтересыПоддержки = ТекущаяСтраница = Элементы.ГруппаИнтересыПоддержки;
	
	ВидСравненияЭлементаОтбора = Неопределено;
	Если ЭтоИнтересы Тогда
		ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.Равно;
	ИначеЕсли ЭтоИнтересыПоддержки Тогда
		ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.НеРавно;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Интересы,
																			"ТипОбращения",
																			ПредопределенноеЗначение("Справочник.CRM_ТипыОбращений.Интерес"),
																			ВидСравненияЭлементаОтбора,,
																			Истина,
																			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСпискаКонтакты()
	
	ИспользуемаяСсылкаНаОбъект = Неопределено;
	
	Если Элементы.СписокКонтактов.ТекущиеДанные = Неопределено Тогда 
		ИспользуемаяСсылкаНаОбъект = Неопределено;
	Иначе
		Если Элементы.СписокКонтактов.ТекущиеДанные.КонтактДоступен Тогда
			ИспользуемаяСсылкаНаОбъект = Элементы.СписокКонтактов.ТекущиеДанные.КонтактноеЛицо;
		Иначе
			ИспользуемаяСсылкаНаОбъект = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ОграничениеТиповОтображения = НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка2();
	
	CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПриАктивизацииСтроки(
		ЭтотОбъект,
		ИспользуемаяСсылкаНаОбъект,
		ОграничениеТиповОтображения,
		"ГруппаПанельИнформации1",
		"ПолеОтображениеСодержания1");
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеИнтересы(Команда)
	
	ТолькоАктивные						= Ложь;
	Элементы.ВсеИнтересы.Пометка		= Истина;
	Элементы.ТолькоАктивные.Пометка		= Ложь;
	Элементы.ВсеТолькоАктивные.Заголовок	= "Все";
	УстановитьОтборПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоАктивные(Команда)
	
	ТолькоАктивные						= Истина;
	Элементы.ВсеИнтересы.Пометка		= Ложь;
	Элементы.ТолькоАктивные.Пометка		= Истина;
	Элементы.ВсеТолькоАктивные.Заголовок	= "Только активные";
	УстановитьОтборПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоСостоянию()
	
	Если Интересы.Отбор.Элементы.Количество() > 0 Тогда
		ИнтересыОтборПоСостоянию				= Интересы.Отбор.Элементы[1];
		ИнтересыОтборПоСостоянию.Использование	= ТолькоАктивные;
	КонецЕсли;
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.Интересы);
	Если ИспользоватьПоддержку Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.ИнтересыПоддержки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка()
	Возврат Новый ОписаниеТипов("СправочникСсылка.Партнеры");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка1()
	Возврат Новый ОписаниеТипов("ДокументСсылка.CRM_Интерес");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка2()
	Возврат Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛицаПартнеров");
КонецФункции

&НаСервере
Функция ЭтоГруппаПартнеров(Партнер)
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Возврат Партнер.ЭтоГруппа;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СкрытьПоказатьПоКлиентам(Команда)
	
	Элементы.СписокСкрытьПоказатьПоКлиентам.Пометка = НЕ Элементы.СписокСкрытьПоказатьПоКлиентам.Пометка;
	ПометкаПоказатьСкрытьДопИнформацию				= Элементы.СписокСкрытьПоказатьПоКлиентам.Пометка;
	Элементы.ГруппаПанельИнформации.Видимость       = ПометкаПоказатьСкрытьДопИнформацию;
	Элементы.РежимОтображенияИнформации.Видимость	= ПометкаПоказатьСкрытьДопИнформацию;
	Если ПометкаПоказатьСкрытьДопИнформацию Тогда
		ПартнерОтбора = Неопределено;
		ОбработатьАктивизациюСтрокиСписка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьСодержание(Команда)
	
	Элементы.СписокСкрытьПоказатьСодержание.Пометка 				= НЕ Элементы.СписокСкрытьПоказатьСодержание.Пометка;
	ПометкаПоказатьСкрытьСодержание									= Элементы.СписокСкрытьПоказатьСодержание.Пометка;
	Элементы.ГруппаПанельСтраницДополнительнойИнформации.Видимость	= ПометкаПоказатьСкрытьСодержание;
	Если ПометкаПоказатьСкрытьСодержание Тогда
		ПартнерОтбора = Неопределено;
		ОбработатьАктивизациюСтрокиСписка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительнаяИнформацияПриСозданииНаСервере()
	
	ИспользоватьПоддержку = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПоддержку");
	Элементы.ГруппаИнтересыПоддержки.Видимость = ИспользоватьПоддержку;
	
	СпособПоиска = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_МастерРегистрацииОбращения.СпособПоиска", "СправочникПартнеры", 1);
	
	ИнтересыОтборПоКлиенту					= Интересы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ИнтересыОтборПоКлиенту.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("Партнер");
	ИнтересыОтборПоКлиенту.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ИнтересыОтборПоКлиенту.Использование	= Истина;
	ИнтересыОтборПоКлиенту.ПравоеЗначение	= Неопределено;
	
	ИнтересыОтборПоСостоянию				= Интересы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ИнтересыОтборПоСостоянию.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("Завершен");
	ИнтересыОтборПоСостоянию.ВидСравнения	= ВидСравненияКомпоновкиДанных.Равно;
	ИнтересыОтборПоСостоянию.Использование	= Истина;
	ИнтересыОтборПоСостоянию.ПравоеЗначение	= Ложь;
	
	ИнтересыОтборПоПометке					= Интересы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ИнтересыОтборПоПометке.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ИнтересыОтборПоПометке.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ИнтересыОтборПоПометке.Использование	= Истина;
	ИнтересыОтборПоПометке.ПравоеЗначение	= Ложь;
	
	СписокИнтересы_УстановитьОтборПоТипуОбращения();	
	
	СуществующиеНастройки = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьНастройки();
	Если СуществующиеНастройки.Количество() = 0 Тогда
		CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияЗагрузитьИзМакета("CRM_НастройкиПолейОтображенияСодержания");
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриОткрытии()
	
	Элементы.ВсеИнтересы.Пометка		= НЕ ТолькоАктивные;
	Элементы.ТолькоАктивные.Пометка		= ТолькоАктивные;
	Элементы.ВсеТолькоАктивные.Заголовок	= ?(ТолькоАктивные,"Только активные","Все");
	
	УстановитьОтборПоСостоянию();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопкиОтображениеИнформации()
	// +CRM_Модуль
	Возврат;
	// -CRM_Модуль
КонецПроцедуры

&НаСервере
Процедура ПокраситьКнопкиОтображениеИнформацииНаСервере()
	// +CRM_Модуль
	Возврат;
	// -CRM_Модуль
КонецПроцедуры

// +CRM_Модуль
&НаКлиенте
Процедура ПереключательРежимОтображенияИнформацииПриИзменении(Элемент)
	Если РежимОтображенияИнформации = 0 Тогда
		ОтображениеИнформацииСписок(Неопределено);
	ИначеЕсли РежимОтображенияИнформации = 1 Тогда
		ОтображениеИнформацииЛента(Неопределено);
	КонецЕсли;
КонецПроцедуры
// -CRM_Модуль

&НаКлиенте
Процедура ОтображениеИнформацииЛента(Команда)
	
	РежимОтображенияИнформации = 1;
	Элементы.ГруппаПанельФильтры.Видимость = Ложь;
	Элементы.Лента_Обложка.Видимость = Истина;
	ПокраситьКнопкиОтображениеИнформацииНаСервере();
	
	Если ПометкаПоказатьСкрытьДопИнформацию Тогда
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
				Элементы.Лента_Обложка.Доступность = Ложь;
				НеЗаполнятьЛенту = Истина;
			Иначе
				Элементы.Лента_Обложка.Доступность = Не Элементы.Список.ТекущиеДанные.ЭтоГруппа;
				НеЗаполнятьЛенту = Элементы.Список.ТекущиеДанные.ЭтоГруппа;
			КонецЕсли;
		КонецЕсли;

		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеИнформацииСписок(Команда)
	
	РежимОтображенияИнформации = 0;
	Элементы.ГруппаПанельФильтры.Видимость = Истина;
	Элементы.Лента_Обложка.Видимость = Ложь;
	ПокраситьКнопкиОтображениеИнформацииНаСервере();
	
	Если ПометкаПоказатьСкрытьДопИнформацию Тогда
		ЗаполнитьПанельИнформацииПоДаннымПартнера(ПартнерОтбора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуКонтактов(ПартнерОтбора)
	ВключеныОграниченияДоступа = Ложь;
	МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступом");
	Если МодульУправлениеДоступом <> Неопределено Тогда
		Если МодульУправлениеДоступом.ИспользоватьОграниченияДоступа() Тогда
			ВключеныОграниченияДоступа = Не Пользователи.ЭтоПолноправныйПользователь();
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтактныеЛицаПартнеров.Ссылка КАК КонтактноеЛицо,
	               |	КонтактныеЛицаПартнеров.Автор КАК Автор,
	               |	КонтактныеЛицаПартнеров.Наименование КАК Наименование,
	               |	КонтактныеЛицаПартнеров.CRM_РольКонтактногоЛица.Наименование КАК РольКонтактногоЛица,
	               |	КонтактныеЛицаПартнеров.CRM_Должность.Наименование КАК Должность,
	               |	КонтактныеЛицаПартнеров.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Работает) КАК Работает
	               |ИЗ
	               |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	               |ГДЕ
	               |	КонтактныеЛицаПартнеров.Владелец = &Владелец
	               |	И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Работает УБЫВ";
	Запрос.УстановитьПараметр("Владелец", ПартнерОтбора);
	СписокКонтактов.Загрузить(Запрос.Выполнить().Выгрузить());
	Для Каждого СтрокаКонтакт Из СписокКонтактов Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаКонтакт.КонтактноеЛицо) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаКонтакт.ПометкаУ =СтрокаКонтакт.КонтактноеЛицо.ПометкаУдаления;
		СтрокаКонтакт.Идентификатор = Строка(СтрокаКонтакт.КонтактноеЛицо.УникальныйИдентификатор());
		СтрокаКонтакт.КонтактДоступен = Истина;
		Если ВключеныОграниченияДоступа Тогда
			
			МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
			Если МодульУправлениеДоступом <> Неопределено Тогда
				СтрокаКонтакт.КонтактДоступен = Не МодульУправлениеДоступом.РазрешенТолькоБазовыйДоступ(СтрокаКонтакт.КонтактноеЛицо);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	Если ВключеныОграниченияДоступа Тогда
		
		МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
		Если МодульУправлениеДоступом <> Неопределено Тогда
			Элементы.ИнтересыПринятьОбращениеПоКлиентуПродажа.Доступность = Не МодульУправлениеДоступом.РазрешенТолькоБазовыйДоступ(ПартнерОтбора);
			РежимДоступа = МодульУправлениеДоступом.РежимДоступаКПартнерам(ПартнерОтбора, Пользователи.АвторизованныйПользователь(), "И");
			Элементы.СписокКонтактовСоздать_Контакт.Доступность = (РежимДоступа = 1);
		КонецЕсли;
		
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	// Условное оформление - выделение шрифтом основного КЛ
	ПолеКД = Новый ПолеКомпоновкиДанных(Элементы.СписокКонтактов.Имя);
	Элемент = Неопределено;
	Для Каждого ЭлементУО Из УсловноеОформление.Элементы Цикл
		Для Каждого ПолеУО Из ЭлементУО.Поля.Элементы Цикл
			Если ПолеУО.Поле = ПолеКД И ЭлементУО.Представление = "ОсновнойКонтакт" Тогда
				Элемент = ЭлементУО;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;
	Если Элемент = Неопределено Тогда
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Представление = "ОсновнойКонтакт";
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = ПолеКД;
	КонецЕсли;	

	ПолеКДОтбора = Новый ПолеКомпоновкиДанных("СписокКонтактов.КонтактноеЛицо");
	ОтборЭлемента = Неопределено;
	Для Каждого ЭлементОтбора Из Элемент.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.ЛевоеЗначение = ПолеКДОтбора Тогда
				ОтборЭлемента = ЭлементОтбора;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОтборЭлемента = Неопределено Тогда
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = ПолеКДОтбора;
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	ОтборЭлемента.ПравоеЗначение = ПартнерОтбора.CRM_ОсновноеКонтактноеЛицо;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", 
		Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,, 10, Истина, Ложь, Ложь, Ложь));
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокОбрабатываемыхВидовКИ(ВыборкаОбхода, СоответствиеКИ)
	
	Пока ВыборкаОбхода.Следующий() Цикл
		СоответствиеКИ.Вставить(
			Новый ПолеКомпоновкиДанных("Ссылка.[" + ВыборкаОбхода.Наименование + "]"), ВыборкаОбхода.Ссылка);
	КонецЦикла;
	
КонецПроцедуры // СформироватьСписокОбрабатываемыхВидовКИ()

&НаСервере
Процедура ВыполнитьОбработкуОтображенияРеквизитовКонтактнойИнформации()
	
	ИсполняемыеНастройкиСписка = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	Если ИсполняемыеНастройкиСписка.Структура.Количество() > 0 Тогда
		ВидыКонтактнойИнформацииСписка.Очистить();
		
		СоответствиеОбъектовКИ = Новый Соответствие;
		ВыбранныеКолонкиСписка = ИсполняемыеНастройкиСписка.Структура[0].Выбор;
		
		ВыборкаОбхода = Справочники.ВидыКонтактнойИнформации.Выбрать(
			Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
		СформироватьСписокОбрабатываемыхВидовКИ(ВыборкаОбхода, СоответствиеОбъектовКИ);
		
		ВыборкаОбхода = Справочники.ВидыКонтактнойИнформации.Выбрать(
			Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания);
		СформироватьСписокОбрабатываемыхВидовКИ(ВыборкаОбхода, СоответствиеОбъектовКИ);
		
		ВыборкаОбхода = Справочники.ВидыКонтактнойИнформации.Выбрать(
			Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо);
		СформироватьСписокОбрабатываемыхВидовКИ(ВыборкаОбхода, СоответствиеОбъектовКИ);
		
		Для Каждого ТекущаяКолонкаСписка Из ВыбранныеКолонкиСписка.Элементы Цикл
			НайденныйЭлементОбработки = СоответствиеОбъектовКИ.Получить(ТекущаяКолонкаСписка.Поле);
			
			Если НайденныйЭлементОбработки <> Неопределено Тогда
				ЭлементОформления = Список.УсловноеОформление.Элементы.Добавить();
				ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.CRM_ОсновнойГолубой);
				
				ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
				ПолеОформления.Поле				= ТекущаяКолонкаСписка.Поле;
				ПолеОформления.Использование	= Истина;
				
				НаименованиеКолонкиПоляКомпоновки = Строка(ТекущаяКолонкаСписка.Поле);
				
				НоваяСтрокаТипаКИ = ВидыКонтактнойИнформацииСписка.Добавить();
				НоваяСтрокаТипаКИ.НаименованиеКолонки		= СтрЗаменить(НаименованиеКолонкиПоляКомпоновки, ".", "_");
				НоваяСтрокаТипаКИ.ТипКонтактнойИнформации	= НайденныйЭлементОбработки.Тип;
				НоваяСтрокаТипаКИ.ВидКонтактнойИнформации	= НайденныйЭлементОбработки.Ссылка;
				
				СоответствиеОбъектовКИ.Удалить(ТекущаяКолонкаСписка.Поле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьОбработкуОтображенияРеквизитовКонтактнойИнформации()

&НаСервереБезКонтекста
Функция ПолучитьМассивЗначенийКИПоВидуКонтактнойИнформации(ОбъектОтбора, ВидКонтактнойИнформации)
	
	МассивКИ	= Новый Массив;
	ЗначенияКИ	= ОбъектОтбора.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", ВидКонтактнойИнформации));
	
	Для Каждого ТекущиеЗначениеКИ Из ЗначенияКИ Цикл
		МассивКИ.Добавить(ТекущиеЗначениеКИ.Представление);
	КонецЦикла;
	
	Возврат МассивКИ;
	
КонецФункции // ПолучитьСписокНомеровПоВидуКонтактнойИнформации()

&НаКлиенте
Процедура ВыборТелефонногоНомераДляЗвонкаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		сфпСофтФонПроКлиент.сфпПозвонить(
			РезультатВыбора.Значение,
			ДополнительныеПараметры.ДанныеЗаполнения.Основание,
			ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры // ВыборТелефонногоНомераДляЗвонкаЗавершение()


// +Рабочий стол
#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

#КонецОбласти
// -Рабочий стол

#Область Теги

&НаКлиенте
Процедура Подключаемый_ТегОтборНажатие(Элемент, СтандартнаяОбработка)
	
	ЭлементДляОчистки = Элементы.Найти("Тег_Очистить");	
	
	ЭлементДляОтбораБезТегов = Элементы.ЗначенияОтбораТеги.ПодчиненныеЭлементы.Найти("Тег_Нет");
	Если Элемент = ЭлементДляОтбораБезТегов Тогда
		ОтбиратьОбъектыБезТегов = НЕ ОтбиратьОбъектыБезТегов;	
	КонецЕсли; 	
	
	Пометка = CRM_ТегиКлиент.ТегОтборНажатие("Справочник.Партнеры", ЭтотОбъект, "Список", Элемент, СтандартнаяОбработка);	

	// Поведение при нажатии на кнопку очистки отборов по тегам.
	Если Элемент = ЭлементДляОчистки Тогда
		ОбновитьЗначенияОтбораТегов();
		Возврат;
	КонецЕсли; 
	
	// Поведение при нажатии на кнопку отбора [нет тегов].
	Если Элемент = ЭлементДляОтбораБезТегов Тогда
		ИзменитьЦветЭлементаСервер(ОтбиратьОбъектыБезТегов, ЭлементДляОтбораБезТегов.Имя);
		Если ОтбиратьОбъектыБезТегов Тогда			
			Если ЭлементДляОчистки <> Неопределено Тогда
				ЭлементДляОчистки.Видимость = Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 	
	
	Если НЕ Пометка = Неопределено И Элемент <> ЭлементДляОтбораБезТегов  Тогда
		ИзменитьЦветЭлементаСервер(Пометка, Элемент.Имя);
		Если Пометка Тогда			
			Если ЭлементДляОчистки <> Неопределено Тогда
				ЭлементДляОчистки.Видимость = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначенияОтбораТегов()
	CRM_Теги.ОбновитьЗначенияОтбораТегов(ЭтотОбъект, ,ОтборПодразделениеДляТегов, СписокВышестоящихПодразделений.ВыгрузитьЗначения());
КонецПроцедуры

&НаСервере
Процедура ИзменитьЦветЭлементаСервер(Пометка, ИмяЭлемента)
	CRM_Теги.ИзменитьЦветЭлементаОтбора(ЭтотОбъект, Пометка, ИмяЭлемента);
КонецПроцедуры

&НаСервере
Процедура ОтборПодразделениеДляТеговПриИзмененииНаСервере()
	СписокВышестоящихПодразделений.ЗагрузитьЗначения(CRM_МетодыМодулейМенеджеровСправочников.ПолучитьВсеПодразделенияРодители(ОтборПодразделениеДляТегов, Истина));	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИспользоватьТиповойПоиск(Команда)
	Элементы.ИспользоватьТиповойПоиск.Пометка = НЕ Элементы.ИспользоватьТиповойПоиск.Пометка;
	Элементы.ГруппаДополнительныеПоляПоиска.Видимость = НЕ Элементы.ИспользоватьТиповойПоиск.Пометка;
	Элементы.ГруппаРезультатыПоиска.Видимость = НЕ Элементы.ИспользоватьТиповойПоиск.Пометка;
	СтрокаПоиска = "";
	СтрокаПоискаCRM = "";
	СтрокаПоискаДоп1 = "";
	СтрокаПоискаДоп2 = "";
	СтрокаПоискаДоп3 = "";
	ВыполнитьПоискCRM(Ложь);
	
	Элементы.Список.ПоложениеСтрокиПоиска = ?(Элементы.ИспользоватьТиповойПоиск.Пометка, ПоложениеСтрокиПоиска.КоманднаяПанель, ПоложениеСтрокиПоиска.Нет); 
	Элементы.ГруппаМенюНачало.Ширина = ?(Элементы.ИспользоватьТиповойПоиск.Пометка, 50, 30);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПолеПоиска(Команда)
	
	Элементы["ГруппаПоиска"+Строка(КоличествоПолейПоиска)].Видимость = Истина;
	Элементы["ДобавитьПолеПоиска"+Строка(КоличествоПолейПоиска-1)].Видимость = Ложь;
	Если КоличествоПолейПоиска > 1 Тогда
		Элементы["УдалитьПолеПоиска"+Строка(КоличествоПолейПоиска-1)].Видимость = Ложь;
	КонецЕсли;
	Элементы["УдалитьПолеПоиска"+Строка(КоличествоПолейПоиска)].Видимость = Истина;
	КоличествоПолейПоиска = КоличествоПолейПоиска + 1;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПолеПоиска(Команда)
	
	Элементы["ГруппаПоиска"+Строка(КоличествоПолейПоиска-1)].Видимость = Ложь;
	Элементы["УдалитьПолеПоиска"+Строка(КоличествоПолейПоиска-1)].Видимость = Ложь;
	Если КоличествоПолейПоиска > 2 Тогда
		Элементы["УдалитьПолеПоиска"+Строка(КоличествоПолейПоиска-2)].Видимость = Истина;
	КонецЕсли;
	Элементы["ДобавитьПолеПоиска"+Строка(КоличествоПолейПоиска-2)].Видимость = Истина;
	Если ЭтотОбъект["СтрокаПоискаДоп"+Строка(КоличествоПолейПоиска-1)] <> "" Тогда
		ЭтотОбъект["СтрокаПоискаДоп"+Строка(КоличествоПолейПоиска-1)] = "";
		ВыполнитьПоискCRM(Истина);
	КонецЕсли;
	КоличествоПолейПоиска = КоличествоПолейПоиска - 1;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтакт(Команда)
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если Элементы.Список.ТекущиеДанные.Свойство("ГруппировкаСтроки") Тогда Возврат	КонецЕсли;	
	
	ПартнерОтбора = Элементы.Список.ТекущаяСтрока;
	// Если CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ПартнерОтбора, "ЭтоГруппа") Тогда Возврат КонецЕсли; // +CRM_Модуль
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеСозданияКонтакта", ЭтотОбъект, Новый Структура("ПартнерОтбора", ПартнерОтбора));
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Клиенты.КонтактноеЛицо.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", Новый Структура("Владелец", ПартнерОтбора), ЭтотОбъект,,,, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияКонтакта(Результат, ДопПараметры) Экспорт
	
	СформироватьТаблицуКонтактов(ДопПараметры.ПартнерОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРеквизитов(Команда)
	ТекущийОбъект = Элементы.Список.ТекущиеДанные.Ссылка;
	Если ЗначениеЗаполнено(ТекущийОбъект) Тогда
		УсловияОтбора = Новый Структура("Объект", ТекущийОбъект);
		ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии", УсловияОтбора, Истина);
		ОткрытьФорму("Отчет.CRM_ИсторияРеквизитов.Форма", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы


#Область ПоискCRM

&НаКлиенте
Процедура СтрокаПоискаCRMНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СпособыПоиска = Новый СписокЗначений;
	СпособыПоиска.Добавить(0, НСтр("ru = 'По началу строки'"));
	СпособыПоиска.Добавить(1, НСтр("ru = 'По части строки'"));
	СпособыПоиска.Добавить(2, НСтр("ru = 'По точному совпадению'"));
	
	НайденныйЭлемент = СпособыПоиска.НайтиПоЗначению(СпособПоиска);
	Если НайденныйЭлемент <> Неопределено Тогда
		НайденныйЭлемент.Пометка = Истина;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("СтрокаПоискаCRMНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОповещениеЗавершения, СпособыПоиска, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаCRMНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособПоиска <> ВыбранныйЭлемент.Значение Тогда
		СпособПоиска = ВыбранныйЭлемент.Значение;
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("CRM_МастерРегистрацииОбращения.СпособПоиска","СправочникПартнеры", СпособПоиска);
		ВыполнитьПоискCRM(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаCRMПриИзменении(Элемент)
	ВыполнитьПоискCRM(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискCRM(ОповещатьОбОшибках)
	
	ОбрабатыватьАктивизациюПоиска = Истина;
	
	СтрокаПоискаCRM = СокрЛП(СтрокаПоискаCRM);
	Для Сч = 1 По 3 Цикл
		ИмяПоля = "СтрокаПоискаДоп"+Строка(Сч);
		ЭтотОбъект[ИмяПоля] = СокрЛП(ЭтотОбъект[ИмяПоля]);
	КонецЦикла;
	
	// Проверка возможности поиска.
	Отказ = Ложь;
	ТекстСообщения = НСтр("ru='Минимальная длина строки поиска 3 символа.';en='Minimum length of the search line is 3 characters.'");
	Если ОповещатьОбОшибках И СтрДлина(СтрокаПоискаCRM) < 3  И СтрДлина(СтрокаПоискаCRM) > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СтрокаПоискаCRM",, Отказ);
	КонецЕсли;	
	Для Сч = 1 По 3 Цикл
		ИмяПоля = "СтрокаПоискаДоп"+Строка(Сч);
		Если ОповещатьОбОшибках И СтрДлина(ЭтотОбъект[ИмяПоля]) < 3  И СтрДлина(ЭтотОбъект[ИмяПоля]) > 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ИмяПоля,, Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПоискCRMНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискCRMНаСервере(УсловияПоиска = Неопределено)
	
	CRM_ТаблицаНайденныхСсылок.Очистить();
	CRM_РезультатыПоиска = "";
	Если УсловияПоиска = Неопределено Тогда
		
		// Анализ строк поиска, формализация условий и заполнение кэша.
		КэшПоиска = CRM_ПоискКонтактов.СтруктураДанныхКэша();
		КэшЗаполнения = CRM_ПоискКонтактов.СтруктураДанныхКэша();
		УсловияПоиска = Новый Массив;
		Если Не ПустаяСтрока(СтрокаПоискаCRM) Тогда
			СтрокаПоискаНормализованная = CRM_ПоискКонтактов.НормализоватьСтрокуПоискаИДополнитьКэш(СтрокаПоискаCRM, КэшПоиска, КэшЗаполнения);
			УсловияПоиска.Добавить(СтрокаПоискаНормализованная);
		КонецЕсли;
		Для Сч = 1 По 3 Цикл
			ТекущаяСтрокаПоиска = ЭтотОбъект["СтрокаПоискаДоп" + Сч];
			Если Не ПустаяСтрока(ТекущаяСтрокаПоиска) Тогда
				СтрокаПоискаНормализованная = CRM_ПоискКонтактов.НормализоватьСтрокуПоискаИДополнитьКэш(ТекущаяСтрокаПоиска, КэшПоиска, КэшЗаполнения);
				УсловияПоиска.Добавить(СтрокаПоискаНормализованная);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Поиск.
	Если ПустаяСтрока(СтрокаПоискаCRM) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", Новый СписокЗначений, ВидСравненияКомпоновкиДанных.ВСписке, , Ложь, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		Элементы.СтрокаПоискаCRM.ЦветФона = Новый Цвет(255, 255, 255);
		Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		Возврат;
	КонецЕсли;	
	Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	УстановитьПривилегированныйРежим(Истина);
	РезультатПоиска = CRM_ПоискКонтактов.ВыполнитьПоискКонтактов(УсловияПоиска, СпособПоиска, Истина, Истина);
	УстановитьПривилегированныйРежим(Ложь);
	Если ЗначениеЗаполнено(РезультатПоиска.КодОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", Новый СписокЗначений, ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		Элементы.СтрокаПоискаCRM.ЦветФона = Новый Цвет(255, 200, 200);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Партнеры.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ тмпСсылки
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка В(&Массивссылок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтактныеЛицаПартнеров.Владелец
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Ссылка В(&Массивссылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	тмпСсылки.Ссылка КАК Ссылка
	|ИЗ
	|	тмпСсылки КАК тмпСсылки";
	Запрос.УстановитьПараметр("Массивссылок", РезультатПоиска.Элементы);
	СписоСсылокДляОтбора = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", СписоСсылокДляОтбора, ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	Если СписоСсылокДляОтбора.Количество() = 0 Тогда
		Элементы.СтрокаПоискаCRM.ЦветФона = Новый Цвет(255, 200, 200);
	Иначе
		Элементы.СтрокаПоискаCRM.ЦветФона = Новый Цвет(255, 255, 255);
	КонецЕсли;	
	
	CRM_ТаблицаНайденныхСсылок.Загрузить(РезультатПоиска.ТаблицаРезультатов);
	
КонецПроцедуры

#КонецОбласти

#Область ДублиКлиентов

&НаКлиенте
Процедура ДублиКлиентаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения("ДублиКлиентаДобавление", ЭтотОбъект);
	// +CRM_Модуль: ФормаВыбора вместо CRM_ФормаВыбора
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаВыбора",, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДублиКлиентаДобавление(Дубль, ДопПараметр) Экспорт
	Если ЗначениеЗаполнено(Дубль) Тогда
		Если Элементы.Список.ТекущаяСтрока = Дубль Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нельзя выбирать текущий элемент!'"));
			Возврат;
		КонецЕсли;
		Дубли_ДобавитьНаСервере(Элементы.Список.ТекущаяСтрока, Дубль);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Дубли_ДобавитьНаСервере(Оригинал, Дубль)
	РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ЗаписатьДубль(Оригинал, Дубль);
	СформироватьТаблицуДублей();
КонецПроцедуры

&НаКлиенте
Процедура Дубли_Добавить(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("Дубли_Добавить_Продолжение", ЭтотОбъект);
	// +CRM_Модуль: ФормаВыбора вместо CRM_ФормаВыбора
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаВыбора",, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура Дубли_Добавить_Продолжение(Дубль, ДопПараметр) Экспорт
	Если ЗначениеЗаполнено(Дубль) Тогда
		Если ПартнерОтбора = Дубль Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нельзя выбирать текущий элемент!'"));
			Возврат;
		КонецЕсли;
		Если ДублиКлиента.НайтиСтроки(Новый Структура("Контакт", Дубль)).Количество()>0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выбранный элемент уже есть в списке дублей!'"));
			Возврат;
		КонецЕсли;
		Дубли_ДобавитьНаСервере(ПартнерОтбора, Дубль);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Дубли_ОтметитьКакОригиналНаСервере(Контакт)
	РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ОтметитьКакОригинал(Контакт);
КонецПроцедуры

&НаКлиенте
Процедура Дубли_ОтметитьКакОригинал(Команда)
	Если Элементы.ДублиКлиента.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Дубли_ОтметитьКакОригиналНаСервере(Элементы.ДублиКлиента.ТекущиеДанные.Контакт);
	СформироватьТаблицуДублей();
КонецПроцедуры

&НаСервере
Процедура Дубли_УдалитьНаСервере(Контакт)
	РегистрыСведений.CRM_ДублиКлиентовИКонтактов.УдалитьДубль(Контакт);
	СформироватьТаблицуДублей();
КонецПроцедуры

&НаКлиенте
Процедура Дубли_Удалить(Команда)
	Если Элементы.ДублиКлиента.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Дубли_УдалитьНаСервере(Элементы.ДублиКлиента.ТекущиеДанные.Контакт);
КонецПроцедуры

&НаСервере
Процедура Дубли_ОбновитьЗаголовок()
	Дубли_Заголовок = НСтр("ru = 'Дубли'");
	Если ЗначениеЗаполнено(ПартнерОтбора) Тогда
		Дубли_Количество = Дубли_КоличествоДублей(ПартнерОтбора);
		Если Дубли_Количество > 0 Тогда
			Дубли_Заголовок = Дубли_Заголовок + " (" + Дубли_Количество + ")"
		КонецЕсли;
	КонецЕсли;
	Если Элементы.СтраницаДубли.Заголовок <> Дубли_Заголовок Тогда
		Элементы.СтраницаДубли.Заголовок = Дубли_Заголовок;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция Дубли_КоличествоДублей(Ссылка)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал КАК Оригинал
	               |ПОМЕСТИТЬ ВТОригинал
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт = &ТекОбъект
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт КАК Контакт
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал = &ТекОбъект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт = &ТекОбъект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт
	               |ИЗ
	               |	ВТОригинал КАК ВТОригинал
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |		ПО ВТОригинал.Оригинал = CRM_ДублиКлиентовИКонтактов.Оригинал
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт <> &ТекОбъект
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контакт)
	               |ПО
	               |	ОБЩИЕ";
	Запрос.УстановитьПараметр("ТекОбъект", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Контакт;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция Дубли_ТаблицаДублей(Ссылка)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал КАК Оригинал
	               |ПОМЕСТИТЬ ВТОригинал
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт = &ТекОбъект
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт КАК Контакт,
	               |	CRM_ДублиКлиентовИКонтактов.Заменить КАК Заменить,
	               |	CRM_ДублиКлиентовИКонтактов.Комментарий КАК Комментарий,
	               |	CRM_ДублиКлиентовИКонтактов.Дата КАК Дата,
	               |	CRM_ДублиКлиентовИКонтактов.Автор КАК Автор,
	               |	ЛОЖЬ КАК ЭтоОригинал
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал = &ТекОбъект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал,
	               |	ЛОЖЬ,
	               |	CRM_ДублиКлиентовИКонтактов.Комментарий,
	               |	CRM_ДублиКлиентовИКонтактов.Дата,
	               |	CRM_ДублиКлиентовИКонтактов.Автор,
	               |	ИСТИНА
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт = &ТекОбъект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт,
	               |	CRM_ДублиКлиентовИКонтактов.Заменить,
	               |	CRM_ДублиКлиентовИКонтактов.Комментарий,
	               |	CRM_ДублиКлиентовИКонтактов.Дата,
	               |	CRM_ДублиКлиентовИКонтактов.Автор,
	               |	ЛОЖЬ
	               |ИЗ
	               |	ВТОригинал КАК ВТОригинал
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |		ПО ВТОригинал.Оригинал = CRM_ДублиКлиентовИКонтактов.Оригинал
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт <> &ТекОбъект";
	Запрос.УстановитьПараметр("ТекОбъект", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

&НаСервере
Процедура СформироватьТаблицуДублей()
	
	ЗначениеВРеквизитФормы(Дубли_ТаблицаДублей(ПартнерОтбора), "ДублиКлиента");
	Дубли_ОбновитьЗаголовок();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДублиКлиентаПриИзмененииНаСервере(Оригинал, Дубль, Заменить, Комментарий)
	РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ЗаписатьДубль(Оригинал, Дубль, Заменить, Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ДублиКлиентаПриИзменении(Элемент)
	ТекДанные = Элемент.ТекущиеДанные;
	СтрОригинал = ДублиКлиента.НайтиСтроки(Новый Структура("ЭтоОригинал", Истина));
	Если СтрОригинал.Количество() Тогда
		Оригинал = СтрОригинал[0].Контакт;
	Иначе
		Оригинал = ПартнерОтбора;
	КонецЕсли;
	Если Не ТекДанные=Неопределено Тогда
		ДублиКлиентаПриИзмененииНаСервере(Оригинал, ТекДанные.Контакт, ТекДанные.Заменить, ТекДанные.Комментарий);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Дубли_СвязатьВыбранныеНаСервере(Знач Дубли)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	CRM_ДублиКлиентовИКонтактов.Оригинал КАК Оригинал
	                      |ИЗ
	                      |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	                      |ГДЕ
	                      |	CRM_ДублиКлиентовИКонтактов.Оригинал В(&Оригинал)");
	Запрос.УстановитьПараметр("Оригинал", Дубли);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Оригинал = Выборка.Оригинал;
	Иначе
		Оригинал = ПервыйИзВыделенных;
	КонецЕсли;
	Дубли.Удалить(Дубли.Найти(Оригинал));
	Для Каждого Дубль Из Дубли Цикл
		РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ЗаписатьДубль(Оригинал, Дубль);
	КонецЦикла;
	СформироватьТаблицуДублей();
КонецПроцедуры

&НаКлиенте
Процедура Дубли_СвязатьВыбранные(Команда)
	Дубли_СвязатьВыбранныеНаСервере(Элементы.Список.ВыделенныеСтроки);
КонецПроцедуры

&НаСервере
Процедура Дубли_СвязатьВыбранныеКЛНаСервере(Знач Дубли)
	УстановитьПривилегированныйРежим(Истина);
	МассивДублей = Новый Массив;
	Для Каждого Дубль Из Дубли Цикл
		МассивДублей.Добавить(СписокКонтактов.НайтиПоИдентификатору(Дубль).КонтактноеЛицо);
	КонецЦикла;
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	CRM_ДублиКлиентовИКонтактов.Оригинал КАК Оригинал
	                      |ИЗ
	                      |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	                      |ГДЕ
	                      |	CRM_ДублиКлиентовИКонтактов.Оригинал В(&Оригинал)");
	Запрос.УстановитьПараметр("Оригинал", МассивДублей);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Оригинал = Выборка.Оригинал;
	Иначе
		Оригинал = ПервыйИзВыделенныхКЛ;
	КонецЕсли;
	МассивДублей.Удалить(МассивДублей.Найти(Оригинал));
	Для Каждого Дубль Из МассивДублей Цикл
		РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ЗаписатьДубль(Оригинал, Дубль);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Дубли_СвязатьВыбранныеКЛ(Команда)
	Дубли_СвязатьВыбранныеКЛНаСервере(Элементы.СписокКонтактов.ВыделенныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура Дубли_ПоискДублей(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Настройки", Новый Структура("Настройки_ИскатьДублиКлиентов", Истина));
	ПараметрыФормы.Вставить("СкрытьГруппуКонтакты", Истина);
	ПараметрыФормы.Вставить("СкрытьГруппуПотенциальныеКлиенты", Истина);
	ОткрытьФорму("Обработка.CRM_ПоискИЗаменаДублейКлиентовИКонтактов.Форма.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ДублиКлиентаПередУдалением(Элемент, Отказ)
	Если Элементы.ДублиКлиента.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Дубли_УдалитьНаСервере(Элементы.ДублиКлиента.ТекущиеДанные.Контакт);
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область ОбластьЛентаСобытий

#Область ЛентаСобытий

&НаКлиенте
Процедура Лента_Обновить(Команда)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ПоказатьОтборы(Команда)
	
	Если Элементы.Лента_СписокОтборов.Скрыта() Тогда
		
		CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
			"CRM_Статистика.Прочее.ЛентаСобытий.ДлительностьСценариев.ВремяУстановкиФильтра");
		
		Элементы.Лента_СписокОтборов.Показать();
		ПодключитьОбработчикОжидания("Лента_Закрыть", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ОткрытьЖурналДокументов(Команда)
	
	ТекущиеДанныеСписка = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанныеСписка <> Неопределено Тогда
		Если (Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы.Список.ТекущиеДанные, "ЭтоГруппа")
			Или Не Элементы.Список.ТекущиеДанные.ЭтоГруппа) И ЗначениеЗаполнено(ПартнерОтбора) Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ОтборПартнер",                         ПартнерОтбора);
			ПараметрыФормы.Вставить("БлокироватьИзменениеОтбораПоПартнеру", Истина);
			
			ОткрытьФорму(
				"Обработка.CRM_УниверсальныйЖурналДокументов.Форма.ФормаФиксированныйОтбор",
				ПараметрыФормы, ЭтотОбъект, КлючУникальности);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // Лента_ОткрытьЖурналДокументов()

&НаКлиенте
Процедура Лента_Закрыть()
	
	Если Элементы.Лента_СписокОтборов.Скрыта() Тогда
		
		ТекущийЭлемент = Элементы.Лента_ПоказатьОтборы;
		ОтключитьОбработчикОжидания("Лента_Закрыть");
		
		CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
			"CRM_Статистика.Прочее.ЛентаСобытий.ДлительностьСценариев.ВремяУстановкиФильтра");
		
	Иначе
		ПодключитьОбработчикОжидания("Лента_Закрыть", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ЗакрепленныеСверхуПриИзменении(Элемент)
	
	НастройкаВсеСобытия = Лента_Отбор.Получить(0);
	
	Если НастройкаВсеСобытия.Пометка И Не Лента_ЗакрепленныеСверху Тогда
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрНеактивный;
	Иначе
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрАктивный;
	КонецЕсли;
	
	СохранитьЗначениеЗакрепленныеСверху();
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначениеЗакрепленныеСверху()
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("CRM_ЛентаСобытий_ЗакрепленныеСверху",
		"ЛентаКлиента", Лента_ЗакрепленныеСверху);
КонецПроцедуры

#КонецОбласти

#Область ОбластьВвода

&НаКлиенте
Процедура БыстрыйВвод_СменитьСтраницу(Команда)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Команда) = Тип("ЭлементСпискаЗначений") Тогда
		ИмяКомандыМассив = СтрРазделить(Команда.Значение, "_");
	Иначе	
		ИмяКомандыМассив = СтрРазделить(Команда.Имя, "_");
	КонецЕсли;
	ПереключитьСтраницуБыстрогоВвода(ИмяКомандыМассив[1]);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_Создать(Команда)
	
	Если Элементы.Список.ТекущаяСтрока = Неопределено
		ИЛИ Не CRM_ЛентаСобытийКлиент.ПроверитьЗаполнениеБыстрогоВвода(БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = CRM_ЛентаСобытийКлиент.ДанныеЗаполненияОбъектаБыстрогоВвода("ЛентаКлиента", БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект, Элементы.Список.ТекущиеДанные);
	CRM_ЛентаСобытий.СоздатьОбъектБыстрыйВвод("ЛентаКлиента", БыстрыйВвод_ТекущийТипОбъекта, ДанныеЗаполнения);
	ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СоздатьЗавершение(ОбъектЗаписан, ДополнительныеПараметры) Экспорт
	
	Если ОбъектЗаписан Тогда
		ДанныеЗаполнения = CRM_ЛентаСобытийКлиент.ДанныеЗаполненияОбъектаБыстрогоВвода("ЛентаКлиента", БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект, Элементы.Список.ТекущиеДанные);
		
		Если БыстрыйВвод_ТекущийТипОбъекта = "Чат" Тогда
			ВозможностьОтправкиСообщения = CRM_ЛентаСобытий.ПроверитьВозможностьОтправкиСообщения(ДанныеЗаполнения);
			Если Не ВозможностьОтправкиСообщения Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В данный мессенджер нельзя писать первыми!
				                                           |С указанным контактом не было диалогов.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		CRM_ЛентаСобытий.СоздатьОбъектБыстрыйВвод("ЛентаКлиента", БыстрыйВвод_ТекущийТипОбъекта, ДанныеЗаполнения);
		ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_Отменить(Команда)
	
	ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьПолучателейКопии(Команда)
	
	Элементы.БыстрыйВвод_ПисьмоСписокПолучателейКопий.Видимость = Истина;
	Элементы.БыстрыйВвод_ПоказатьПолучателейКопии.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьПолучателейСкрытойКопии(Команда)
	
	Элементы.БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий.Видимость = Истина;
	Элементы.БыстрыйВвод_ПоказатьПолучателейСкрытойКопии.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДругиеПараметры(Команда)
	
	CRM_ЛентаСобытийКлиент.ПоказатьПолнуюФормуОбъекта("ЛентаКлиента", БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект);
	ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбычныйВвод_ПоказатьЕще(Команда)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОбычныйВвод_ПоказатьЕщеЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОповещениеЗавершения, ОбычныйВвод_Команды, Элементы.ОбычныйВвод_ПоказатьЕще);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбычныйВвод_ПоказатьЕщеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ВыбранныйЭлемент.Значение, "БыстрыйВвод_") = 1 Тогда
		БыстрыйВвод_СменитьСтраницу(ВыбранныйЭлемент);
	Иначе	
		CRM_ЛентаСобытийКлиент.СоздатьОбъектОбычныйВвод("ЛентаКлиента", ВыбранныйЭлемент.Значение, ЭтотОбъект, Элементы.Список.ТекущиеДанные);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДобавитьФайл(Команда)
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ДобавитьФайлЗавершение", ЭтотОбъект);
	CRM_ЛентаСобытийКлиент.ДобавитьВложение(ЭтотОбъект, ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДобавитьФайлЗавершение(Успех, ДополнительныеПараметры) Экспорт
	
	Если Не Успех Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ОбновитьЭлементыВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_БыстрыйВвод_УдалитьФайл(Команда)
	
	ИдентификаторСсылкиВложения = СтрЗаменить(Команда.Имя, "БыстрыйВвод_Удалить_СсылкаВложения_", "");
	
	CRM_ЛентаСобытийКлиент.УдалитьВложение(ЭтотОбъект, ИдентификаторСсылкиВложения);
	
	БыстрыйВвод_ОбновитьЭлементыВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВставитьФайлИзБуфера(Команда)
	
	CRM_ЛентаСобытийКлиент.ВставитьФайлИзБуфераОбмена(ЭтотОбъект);
	БыстрыйВвод_ОбновитьЭлементыВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	
	ИмяКомандыМассив = СтрРазделить(Команда.Имя, "_");
	CRM_ЛентаСобытийКлиент.СоздатьОбъектОбычныйВвод("ЛентаКлиента", ИмяКомандыМассив[1], ЭтотОбъект, Элементы.Список.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьШаблоны(Команда)
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ПоказатьШаблоныЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОповещениеЗавершения, СписокШаблонов, Элементы.БыстрыйВвод_ПоказатьШаблоны);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьШаблоныЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Шаблон = ВыбранныйЭлемент.Значение;
	CRM_ЛентаСобытийКлиент.ПоказатьПолнуюФормуОбъекта("ЛентаКлиента", БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект);
	Шаблон = ПредопределенноеЗначение("Справочник.CRM_ШаблоныРассылки.ПустаяСсылка");
	ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ЛентаСобытий

&НаКлиенте
Процедура Подключаемый_ОбновитьЛенту()
	
	Лента_НеЗаполнять = Не ЗначениеЗаполнено(ПартнерОтбора) Или НеЗаполнятьЛенту;
	CRM_ЛентаСобытийКлиентСервер.ОбновитьЛенту(ПартнерОтбора, ЭтотОбъект, "ЛентаКлиента", Лента_Прокрутить, Лента_НеЗаполнять, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбластьВвода

&НаКлиенте
Процедура ПереключитьСтраницуБыстрогоВвода(Знач НовыйТипОбъекта, Знач ПолныйСброс = Ложь)
	
	Если БыстрыйВвод_ТекущийТипОбъекта = НовыйТипОбъекта И Не ПолныйСброс Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущиейКнопки = "БыстрыйВвод_" + БыстрыйВвод_ТекущийТипОбъекта;
	ТекущийШрифтКнопки = Элементы[ИмяТекущиейКнопки].Шрифт;
	Элементы[ИмяТекущиейКнопки].Шрифт = Новый Шрифт(ТекущийШрифтКнопки,,, Ложь);
	
	ИмяКнопки = "БыстрыйВвод_" + НовыйТипОбъекта;
	ШрифтКнопки = Элементы[ИмяКнопки].Шрифт;
	Элементы[ИмяКнопки].Шрифт = Новый Шрифт(ШрифтКнопки,,, Истина);
	
	ИмяТекущейСтраницы = "БыстрыйВвод_Страница" + БыстрыйВвод_ТекущийТипОбъекта;
	Элементы[ИмяТекущейСтраницы].Видимость = Ложь;
	
	ИмяСтраницы = "БыстрыйВвод_Страница" + НовыйТипОбъекта;
	Элементы[ИмяСтраницы].Видимость = Истина;
	
	БыстрыйВвод_ТекущийТипОбъекта = НовыйТипОбъекта;
	
	НастроитьОбластьВводаПоСтранице(ПолныйСброс);
	Если БыстрыйВвод_ТекущийТипОбъекта = "Примечание" Тогда
		Элементы.БыстрыйВвод_ПримечаниеТема.ОбновитьТекстРедактирования();
	КонецЕсли;
	Если БыстрыйВвод_ТекущийТипОбъекта = "Файл" Тогда
		Элементы.БыстрыйВвод_ФайлОписание.ОбновитьТекстРедактирования();
	КонецЕсли;
	
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	
	Если ПолныйСброс Тогда
		ИмяКнопкиСоздать = "БыстрыйВвод_Создать" + НовыйТипОбъекта;
		Элементы[ИмяКнопкиСоздать].КнопкаПоУмолчанию = Ложь;
	Иначе	
		ИмяКнопкиСоздать = "БыстрыйВвод_Создать" + НовыйТипОбъекта;
		Элементы[ИмяКнопкиСоздать].КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОбластьВвода()
	
	Если ТолькоПросмотр Тогда
		Элементы.БыстрыйВвод_Страницы.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	НастроитьОбластьВводаПоСтранице();
	
	// Настройки элементов.
	Элементы.БыстрыйВвод_ЗадачаПолучатель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	Элементы.БыстрыйВвод_ВзаимодействиеПолучатель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛицаПартнеров");
	
	ПараметрыВыбораВида = Новый Массив;
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.Направление", Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее));
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.ВидДела", Справочники.CRM_ВидыДелВзаимодействий.ПрочиеДокументы));
	Элементы.БыстрыйВвод_ВзаимодействиеВид.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораВида);
	
	Элементы.БыстрыйВвод_ЗадачаДатаОкончания_Время.Видимость = Лента_ЗначенияНастроек.ВремяВСрокахЗадач;
	Элементы.БыстрыйВвод_Письмо.Видимость	= Лента_ЗначенияНастроек.ДоступнаПочта;
	
	БыстрыйВвод_ПисьмоОтправлятьСразу = Ложь;
	НастройкиРаботыСПочтой = Взаимодействия.НастройкиРаботыСПочтой();
	Если НастройкиРаботыСПочтой.Свойство("ОтправлятьСообщенияСразу") И НастройкиРаботыСПочтой.ОтправлятьСообщенияСразу Тогда
		БыстрыйВвод_ПисьмоОтправлятьСразу = Истина;
	КонецЕсли;
	
	// Шаблоны рассылок
	СписокШаблонов.Очистить();
	ЗапросШаблонов = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШаблоныРассылки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_ШаблоныРассылки КАК ШаблоныРассылки
	|ГДЕ
	|	НЕ ШаблоныРассылки.ЭтоГруппа
	|	И НЕ ШаблоныРассылки.ШаблонОповещения");
	РезультатЗапроса = ЗапросШаблонов.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		СписокШаблонов.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	
	// Обычный ввод
	ОбычныйВвод_Команды.Очистить();
	ОписанияКоманд = CRM_ЛентаСобытий.КомандыОбычногоВводаЛенты("ЛентаКлиента", Лента_ЗначенияНастроек);
	Если ОписанияКоманд.Количество() = 0 Тогда
		Элементы.ОбычныйВвод_ПоказатьЕще.Видимость = Ложь;
	Иначе
		Для Каждого ОписаниеКоманды Из ОписанияКоманд Цикл
			НоваяКоманда = ОбычныйВвод_Команды.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяКоманда, ОписаниеКоманды);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОбластьВводаПоСтранице(Знач ПолныйСброс = Ложь)
	
	//Общее
	ТекущаяДата = ТекущаяДатаСеанса();
	БыстрыйВвод_ДатаНачала = ТекущаяДата;
	Если ПолныйСброс Тогда
		// При создании или отмене создания объекта.
		БыстрыйВвод_Тема = "";
		БыстрыйВвод_Содержание = "";
		Если БыстрыйВвод_Вложения.Количество() > 0 Тогда
			БыстрыйВвод_Вложения.Очистить();
			CRM_ЛентаСобытий.ОбновитьЭлементыВложений(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Если БыстрыйВвод_ТекущийТипОбъекта = "Примечание" Тогда
		
		ТемаЗаполнена = ЗначениеЗаполнено(БыстрыйВвод_Тема);
		ВысотаТемы = ?(ТемаЗаполнена, 3, 1);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_ПримечаниеТема", "Высота", ВысотаТемы);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_КомандыПримечание", "Видимость", ТемаЗаполнена);
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Взаимодействие" Тогда
		
		БыстрыйВвод_Тема = СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " ");
		
		ДанныеВидаВзаимодействия = CRM_ЛентаСобытий.ДанныеВидаВзаимодействияПоУмолчанию("ЛентаКлиента");
		БыстрыйВвод_ВзаимодействиеВид = ДанныеВидаВзаимодействия.Ссылка;
		Если БыстрыйВвод_Тема = "" Тогда
			БыстрыйВвод_Тема = ДанныеВидаВзаимодействия.Тема;
		КонецЕсли;
		Если БыстрыйВвод_Содержание = "" Тогда
			БыстрыйВвод_Содержание = ДанныеВидаВзаимодействия.Описание;
		КонецЕсли;
		
		БыстрыйВвод_ВзаимодействиеНаВесьДень = Ложь;
		Элементы.БыстрыйВвод_ВзаимодействиеДатаНачала_Время.Видимость = Истина;
		Элементы.БыстрыйВвод_ВзаимодействиеДатаОкончания_Время.Видимость = Истина;
		БыстрыйВвод_ДатаНачала = CRM_ОбщегоНазначенияКлиентСервер.ОкруглитьДатуДоМинут(БыстрыйВвод_ДатаНачала, 30);
		
		КоличествоСекундВМинуте = 60;
		СтандартноеКоличествоМинут	= 30;
		
		Если ЗначениеЗаполнено(БыстрыйВвод_ВзаимодействиеВид)
				И ЗначениеЗаполнено(БыстрыйВвод_ВзаимодействиеВид.ДлительностьВстречиПоУмолчанию) Тогда
			БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала
				+ БыстрыйВвод_ВзаимодействиеВид.ДлительностьВстречиПоУмолчанию * КоличествоСекундВМинуте;
		Иначе
			БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + СтандартноеКоличествоМинут * КоличествоСекундВМинуте;
		КонецЕсли;
		
		БыстрыйВвод_ВзаимодействиеОтправитель = ТекущийПользователь;
		БыстрыйВвод_ВзаимодействиеПолучатель = ПартнерОтбора.CRM_ОсновноеКонтактноеЛицо;
		
		Элементы.БыстрыйВвод_ВзаимодействиеПолучатель.Видимость = CRM_ЛентаСобытий.ЭтоПартнерСКонтактами(ПартнерОтбора);
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Задача" Тогда
		
		БыстрыйВвод_Тема = СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " ");
		
		БыстрыйВвод_ЗадачаВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДень;
		БыстрыйВвод_ДатаОкончания = CRM_ОбщегоНазначенияКлиентСервер.ОкруглитьДатуДоМинут(ТекущаяДата, 30) + 86400;
		БыстрыйВвод_ЗадачаПолучатель = ТекущийПользователь;
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Письмо" Тогда
		
		БыстрыйВвод_Тема = СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " ");
		
		БыстрыйВвод_ПисьмоПолучатели.Очистить();
		БыстрыйВвод_ПисьмоПолучателиКопий.Очистить();
		БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Очистить();
		БыстрыйВвод_ПисьмоСписокПолучателейПисьма = "";
		БыстрыйВвод_ПисьмоСписокПолучателейКопий = "";
		БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий = "";
		
		УчетныеЗаписиПочтыСписокВыбора = Элементы.БыстрыйВвод_ПисьмоОтправительПредставление.СписокВыбора;
		УчетныеЗаписиПочтыСписокВыбора.Очистить();
		CRM_УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(УчетныеЗаписиПочтыСписокВыбора,, ТекущийПользователь);
		Если УчетныеЗаписиПочтыСписокВыбора.Количество() > 0 Тогда
			УчетнаяЗаписьПоУмолчанию = CRM_ЛентаСобытий.УчетнаяЗаписьПоУмолчанию(ТекущийПользователь);
			ЭлементСписка = УчетныеЗаписиПочтыСписокВыбора.НайтиПоЗначению(УчетнаяЗаписьПоУмолчанию);
			Если ЭлементСписка = Неопределено Тогда
				ЭлементСписка = УчетныеЗаписиПочтыСписокВыбора[0];
			КонецЕсли;
			БыстрыйВвод_ПисьмоУчетнаяЗапись = ЭлементСписка.Значение;
			БыстрыйВвод_ПисьмоОтправительПредставление = ЭлементСписка.Представление;
		КонецЕсли;
		
		ВладельцыКонтактнойИнформации = Новый Массив;
		Если ЗначениеЗаполнено(ПартнерОтбора) Тогда
			ВладельцыКонтактнойИнформации.Добавить(ПартнерОтбора);
			КонтактыПартнера = CRM_ЛентаСобытий.КонтактыПартнера(ПартнерОтбора);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВладельцыКонтактнойИнформации, КонтактыПартнера);
		КонецЕсли;
		
		ДанныеКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
			ВладельцыКонтактнойИнформации, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		БыстрыйВвод_ПисьмоИсторияАдресов.Очистить();
		Для Каждого Строка Из ДанныеКонтактнойИнформации Цикл
			ПредставлениеАдресаКонтакта = CRM_ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(Строка.Объект, Строка.Представление, "");
			БыстрыйВвод_ПисьмоИсторияАдресов.Добавить(ПредставлениеАдресаКонтакта);
		КонецЦикла;
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Файл" Тогда
		
		ЕстьВложения = (БыстрыйВвод_Вложения.Количество() > 0);
		ВысотаТемы = ?(ЗначениеЗаполнено(БыстрыйВвод_Тема), 3, 1);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_ФайлОписание", "Высота", ВысотаТемы);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_КомандыФайл", "Видимость", ЕстьВложения);
		
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Чат" Тогда
		
		Если БыстрыйВвод_ЧатПолучатели.Количество() > 0 Тогда
			ПервыйПолучатель = БыстрыйВвод_ЧатПолучатели[0];
			БыстрыйВвод_ЧатИдентификаторПолучателя = ПервыйПолучатель.Идентификатор;
			БыстрыйВвод_ЧатАдрес = ПервыйПолучатель.Адрес;
			БыстрыйВвод_ЧатПолучатель = ПервыйПолучатель.Контакт;
			БыстрыйВвод_ЧатПредставлениеПолучателя = ПервыйПолучатель.Представление;
			
			// учетная запись есть в списке доступных пользователю
			Если БыстрыйВвод_ЧатУчетныеЗаписи.НайтиСтроки(Новый Структура("УчетнаяЗапись", ПервыйПолучатель.УчетнаяЗапись)).Количество() > 0 Тогда
				БыстрыйВвод_ЧатУчетнаяЗапись = ПервыйПолучатель.УчетнаяЗапись;
				БыстрыйВвод_ЧатПредставлениеУчетнойЗаписи = ПервыйПолучатель.УчетнаяЗапись;
			КонецЕсли;     
			
			БыстрыйВвод_ЧатГруппа = ПервыйПолучатель.Группа;
			БыстрыйВвод_ЧатЭтоНомерТелефона = ПервыйПолучатель.ЭтоНомерТелефона;
			БыстрыйВвод_ЧатВидКИ = ПервыйПолучатель.ВидКИ;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура БыстрыйВвод_ОбновитьЭлементыВложений()
	
	CRM_ЛентаСобытий.ОбновитьЭлементыВложений(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ЛентаСобытий

// Процедура - обработчик события "ОбработкаКомандыЛенты".
&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыЛенты(Элемент, НавигационнаяСсылка, СтандартнаяОбработка) Экспорт // АПК:78 - исключить из проверки.
	ДополнительныеПараметры = Новый Структура;
	СписокКоманд = Новый СписокЗначений;
	ИмяКоманды = СтрЗаменить(Элемент.Имя, "ОбычныйВвод_", "");
	СписокКоманд.Добавить(ИмяКоманды, Элемент.Заголовок); 
	ОбычныйВвод_ПоказатьЕщеЗавершение(СписокКоманд[0], ДополнительныеПараметры);	
КонецПроцедуры

&НаКлиенте
Процедура Лента_HTMLДокументСформирован(Элемент)
	
	Если Лента_HTML_ПозицияОтКрая <> 0 Тогда
		Смещение = Элементы.Лента_HTML.Документ.getElementById("scollable-wrap").scrollHeight - Лента_HTML_ПозицияОтНачала;
		Элементы.Лента_HTML.Документ.getElementById("scollable-wrap").scrollTop = Лента_HTML_ПозицияОтКрая + Смещение;
		Лента_HTML_ПозицияОтКрая = 0;
		Лента_HTML_ПозицияОтНачала = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСсылки = ДанныеСобытия.href;
	Если Не ЗначениеЗаполнено(ДанныеСсылки) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаКоманд = CRM_ЛентаСобытийКлиент.ИменаКомандОбъектовЛенты();
	
	Для Каждого ИмяКоманды Из ИменаКоманд Цикл
		ПозицияРазделителя = СтрНайти(ДанныеСсылки, ИмяКоманды);
		Если ПозицияРазделителя > 0 Тогда
			Если ИмяКоманды = "ОбъектЛенты_Закрепить_" Или ИмяКоманды = "ОбъектЛенты_Открепить_" Тогда
				Лента_HTML_ПозицияОтКрая = Элементы.Лента_HTML.Документ.getElementById("scollable-wrap").scrollTop;
				Лента_HTML_ПозицияОтНачала = Элементы.Лента_HTML.Документ.getElementById("scollable-wrap").scrollHeight;
			КонецЕсли;
			ПараметрКоманды = Сред(ДанныеСсылки, ПозицияРазделителя + СтрДлина(ИмяКоманды));
			CRM_ЛентаСобытийКлиент.ВыполнитьКомандуЛенты(ИмяКоманды, ПараметрКоманды, ЭтотОбъект);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ПозицияРазделителя = СтрНайти(ДанныеСсылки, "ЛентаЗагрузитьЕще");
	Если ПозицияРазделителя > 0 Тогда
		Лента_КоличествоОбъектовИстории = Лента_КоличествоОбъектовИстории + 50;
		Лента_Прокрутить = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект = CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуИзНавигационной(ДанныеСсылки);
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента", Новый Структура("Ключ", СсылкаНаОбъект), ЭтотОбъект);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", Новый Структура("Ключ", СсылкаНаОбъект), ЭтотОбъект);
	Иначе
		Попытка
			ПозицияНайденного = СтрНайти(ДанныеСсылки, "e1cib/");
			ДлинаСсылкиВнутр  = СтрДлина(ДанныеСсылки) + 1 - ПозицияНайденного;
			НавигационнаяСсылка = Прав(ДанныеСсылки, ДлинаСсылкиВнутр);
			ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
		Исключение
			// Обработка не требуется.
			Возврат;
		КонецПопытки
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ОтборВсеСобытияПриИзменении(Элемент)
	
	НастройкаВсеСобытия = Лента_Отбор.Получить(0);
	ПометкаВсеСобытия = НастройкаВсеСобытия.Пометка;
	Для Сч = 1 По Лента_Отбор.Количество()-1 Цикл
		НастройкаОтбора = Лента_Отбор.Получить(Сч);
		НастройкаОтбора.Пометка = ПометкаВсеСобытия;
	КонецЦикла;
	
	Если НастройкаВсеСобытия.Пометка Тогда
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрНеактивный;
	Иначе
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрАктивный;
	КонецЕсли;
	
	CRM_ЛентаСобытий.СохранитьОтборЛенты(Лента_Отбор, "ЛентаКлиента");
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Лента_ОтборПриИзменении(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "Лента_Отбор_", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_Пометка", "");
	
	Если ИмяЭлемента = "Звонки" Или ИмяЭлемента = "Письма" Тогда
		ЭлементСписка = Лента_Отбор.НайтиПоЗначению(ИмяЭлемента);
		ЭлементСпискаВходящие = Лента_Отбор.НайтиПоЗначению("Входящие"+ИмяЭлемента);
		ЭлементСпискаИсходящие = Лента_Отбор.НайтиПоЗначению("Исходящие"+ИмяЭлемента);
		ЭлементСпискаВходящие.Пометка = ЭлементСписка.Пометка;
		ЭлементСпискаИсходящие.Пометка = ЭлементСписка.Пометка;
	КонецЕсли;
	
	Если СтрНайти(ИмяЭлемента, "Входящие") > 0 Тогда
		ИмяРодителя = СтрЗаменить(ИмяЭлемента, "Входящие", "");
		ЭлементСписка = Лента_Отбор.НайтиПоЗначению(ИмяРодителя);
		ЭлементСпискаВходящие = Лента_Отбор.НайтиПоЗначению("Входящие"+ИмяРодителя);
		ЭлементСпискаИсходящие = Лента_Отбор.НайтиПоЗначению("Исходящие"+ИмяРодителя);
		ЭлементСписка.Пометка = Макс(ЭлементСпискаВходящие.Пометка, ЭлементСпискаИсходящие.Пометка);
	КонецЕсли;
	
	Если СтрНайти(ИмяЭлемента, "Исходящие") > 0 Тогда
		ИмяРодителя = СтрЗаменить(ИмяЭлемента, "Исходящие", "");
		ЭлементСписка = Лента_Отбор.НайтиПоЗначению(ИмяРодителя);
		ЭлементСпискаВходящие = Лента_Отбор.НайтиПоЗначению("Входящие"+ИмяРодителя);
		ЭлементСпискаИсходящие = Лента_Отбор.НайтиПоЗначению("Исходящие"+ИмяРодителя);
		ЭлементСписка.Пометка = Макс(ЭлементСпискаВходящие.Пометка, ЭлементСпискаИсходящие.Пометка);
	КонецЕсли;
	
	ПометкаСобытие = Истина;
	Для Сч = 1 По Лента_Отбор.Количество()-1 Цикл
		НастройкаОтбора = Лента_Отбор.Получить(Сч);
		ПометкаСобытие = Мин(ПометкаСобытие, НастройкаОтбора.Пометка);
	КонецЦикла;
	НастройкаВсеСобытия = Лента_Отбор.Получить(0);
	НастройкаВсеСобытия.Пометка = ПометкаСобытие;
	
	Если НастройкаВсеСобытия.Пометка Тогда
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрНеактивный;
	Иначе
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрАктивный;
	КонецЕсли;
	
	CRM_ЛентаСобытий.СохранитьОтборЛенты(Лента_Отбор, "ЛентаКлиента");
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбластьВвода

// Общее

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаПриИзменении(Элемент = Неопределено)
	
	Если БыстрыйВвод_ДатаНачала = НачалоДня(БыстрыйВвод_ДатаНачала) И БыстрыйВвод_КэшированноеВремя > 0 Тогда
		БыстрыйВвод_ДатаНачала = БыстрыйВвод_ДатаНачала + БыстрыйВвод_КэшированноеВремя;
		БыстрыйВвод_КэшированноеВремя = 0;
	КонецЕсли;
	
	Если НачалоДня(БыстрыйВвод_КэшированнаяДатаНачала) = НачалоДня(БыстрыйВвод_ДатаОкончания) Тогда
		ВремяЗавершения = БыстрыйВвод_ДатаОкончания - НачалоДня(БыстрыйВвод_ДатаОкончания);
		БыстрыйВвод_ДатаОкончания = НачалоДня(БыстрыйВвод_ДатаНачала) + ВремяЗавершения;
	КонецЕсли;
	
	Если БыстрыйВвод_ДатаНачала > БыстрыйВвод_ДатаОкончания Тогда
		
		СрокПоУмолчанию = 3600;
		Если БыстрыйВвод_ТекущийТипОбъекта = "Взаимодействие" Тогда
			СрокПоУмолчанию = 1800;
		КонецЕсли;
			
		БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + СрокПоУмолчанию;
		БыстрыйВвод_ЗадачаВариантСрока = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.ЧерезЧас");
	КонецЕсли;
	
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	ПроверитьКорректностьДатыОкончания();
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	Если ЗначениеЗаполнено(БыстрыйВвод_ДатаНачала) Тогда
		ПараметрыОткрытия.Вставить("ДатаПоУмолчанию", БыстрыйВвод_ДатаНачала);
	КонецЕсли;
	ПараметрыОткрытия.Вставить("ДанныеБыстрогоВвода", CRM_ЛентаСобытийКлиент.ДанныеЗаполненияОбъектаБыстрогоВвода("ЛентаКлиента", БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект));
	БыстрыйВвод_КэшированноеВремя = БыстрыйВвод_ДатаНачала - НачалоДня(БыстрыйВвод_ДатаНачала);
	CRM_ВзаимодействияКлиент.ДатаВзаимодействияНачалоВыбора(Новый Структура("Ссылка", ПартнерОтбора), Элемент, ДанныеВыбора,
		СтандартнаяОбработка, ПараметрыОткрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ЭтоРезультатРаботыСКалендарем") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			БыстрыйВвод_ДатаНачала = ВыбранноеЗначение.Начало;
			БыстрыйВвод_ДатаОкончания = ВыбранноеЗначение.Конец;
			
			БыстрыйВвод_ДатаНачалаПриИзменении();
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.CRM_ВариантыУстановкиДаты") Тогда
		СтандартнаяОбработка = Ложь;
		
		ДлительностьИнтервала = БыстрыйВвод_ДатаОкончания - БыстрыйВвод_ДатаНачала;
		
		Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.Вручную") Тогда
			ОписаниеОповещения	= Новый ОписаниеОповещения(
				"БыстрыйВвод_ДатаНачалаОбработкаВыбораЗавершение", ЭтотОбъект, ДлительностьИнтервала);
			ОткрытьФорму("ОбщаяФорма.CRM_ФормаРучногоПереносаВремени", , ЭтотОбъект, КлючУникальности, , , ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			// Осуществляется перенос обеих дат на указанный интервал
			БыстрыйВвод_ДатаНачала = CRM_ОбщегоНазначенияСервер.ДатаПоВариантуИнтервала(
				CRM_ОбщегоНазначенияСервер.БазоваяДатаПоВариантуИнтервала(БыстрыйВвод_ДатаНачала, ВыбранноеЗначение),
				ВыбранноеЗначение);
			
			БыстрыйВвод_ДатаОкончания = CRM_ОбщегоНазначенияСервер.ДатаПоВариантуИнтервала(
				CRM_ОбщегоНазначенияСервер.БазоваяДатаПоВариантуИнтервала(БыстрыйВвод_ДатаОкончания, ВыбранноеЗначение),
				ВыбранноеЗначение, ДлительностьИнтервала);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяНачалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ВремяНачалаНачалоВыбораЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, БыстрыйВвод_ДатаНачала,
		Элемент, БыстрыйВвод_ДатаНачала, Ложь, ОповещениеЗавершения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяНачалаНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ДатаНачала = ВыбранныйЭлемент.Значение;
	БыстрыйВвод_ДатаНачалаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаОкончанияПриИзменении(Элемент)
	
	Если БыстрыйВвод_ДатаНачала > БыстрыйВвод_ДатаОкончания Тогда
		
		СрокПоУмолчанию = 3600;
		Если БыстрыйВвод_ТекущийТипОбъекта = "Взаимодействие" Тогда
			СрокПоУмолчанию = 1800;
		КонецЕсли;
		
		БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + СрокПоУмолчанию;
		БыстрыйВвод_ЗадачаВариантСрока = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.ЧерезЧас");
	КонецЕсли;
	ПроверитьКорректностьДатыОкончания();
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаОкончанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.CRM_ВариантыУстановкиДаты") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.Вручную") Тогда
			ОписаниеОповещения	= Новый ОписаниеОповещения("БыстрыйВвод_ДатаОкончанияОбработкаВыбораЗавершение", ЭтотОбъект);
			ОткрытьФорму("ОбщаяФорма.CRM_ФормаРучногоПереносаВремени", , ЭтотОбъект, КлючУникальности, , , ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			БыстрыйВвод_ДатаОкончания = CRM_ОбщегоНазначенияСервер.ДатаПоВариантуИнтервала(
				CRM_ОбщегоНазначенияСервер.БазоваяДатаПоВариантуИнтервала(БыстрыйВвод_ДатаОкончания, ВыбранноеЗначение),
				ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяОкончанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ВремяОкончанияНачалоВыбораЗавершение", ЭтотОбъект);
	ДобавлятьДлительность = (НачалоДня(БыстрыйВвод_ДатаНачала) = НачалоДня(БыстрыйВвод_ДатаОкончания));
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, БыстрыйВвод_ДатаОкончания,
		Элемент, БыстрыйВвод_ДатаНачала, ДобавлятьДлительность, ОповещениеЗавершения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяОкончанияНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ДатаОкончания = ВыбранныйЭлемент.Значение;
	ПроверитьКорректностьДатыОкончания();
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		БыстрыйВвод_ДатаНачала = Результат;
		БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + ДополнительныеПараметры;
	КонецЕсли;
	
КонецПроцедуры // БыстрыйВвод_ДатаНачалаОбработкаВыбораЗавершение()

&НаКлиенте
Процедура БыстрыйВвод_ДатаОкончанияОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		БыстрыйВвод_ДатаОкончания = Результат;
	КонецЕсли;
	
КонецПроцедуры // БыстрыйВвод_ДатаОкончанияОбработкаВыбораЗавершение()


&НаСервере
Процедура ПроверитьКорректностьДатыОкончания()
	Если ЗначениеЗаполнено(БыстрыйВвод_ВзаимодействиеВид.ДлительностьВстречиПоУмолчанию) Тогда
		ПлановаяДатаЗавершенияТМП = БыстрыйВвод_ДатаНачала + БыстрыйВвод_ВзаимодействиеВид.ДлительностьВстречиПоУмолчанию*60;
		Если БыстрыйВвод_ДатаОкончания < ПлановаяДатаЗавершенияТМП Тогда
			БыстрыйВвод_ДатаОкончания = ПлановаяДатаЗавершенияТМП;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

// Примечание

&НаКлиенте
Процедура БыстрыйВвод_ПримечаниеТемаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТемаЗаполнена = ЗначениеЗаполнено(Текст);
	ВысотаТемы = ?(ТемаЗаполнена, 3, 1);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_ПримечаниеТема", "Высота", ВысотаТемы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_КомандыПримечание", "Видимость", ТемаЗаполнена);
	БыстрыйВвод_Тема = Текст;
	Элементы.БыстрыйВвод_СоздатьПримечание.КнопкаПоУмолчанию = ТемаЗаполнена;
	
КонецПроцедуры

// Взаимодействие

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеВидПриИзменении(Элемент)
	
	БыстрыйВвод_Тема = CRM_ЛентаСобытий.ЗначениеРеквизитаОбъекта(БыстрыйВвод_ВзаимодействиеВид, "Тема");
	БыстрыйВвод_Содержание = CRM_ЛентаСобытий.ЗначениеРеквизитаОбъекта(БыстрыйВвод_ВзаимодействиеВид, "Описание");
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеВидОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеНаВесьДеньПриИзменении(Элемент)
	
	Элементы.БыстрыйВвод_ВзаимодействиеДатаНачала_Время.Видимость = (Не БыстрыйВвод_ВзаимодействиеНаВесьДень);
	Элементы.БыстрыйВвод_ВзаимодействиеДатаОкончания_Время.Видимость = (Не БыстрыйВвод_ВзаимодействиеНаВесьДень);
	
	Если БыстрыйВвод_ВзаимодействиеНаВесьДень Тогда
		ПараметрыДня = CRM_ЛентаСобытий.ПараметрыРабочегоДня(ТекущийПользователь);
		БыстрыйВвод_ДатаНачала = НачалоДня(БыстрыйВвод_ДатаНачала) + (ПараметрыДня.ВремяНачала - Дата('00010101'));
		БыстрыйВвод_ДатаОкончания = НачалоДня(БыстрыйВвод_ДатаОкончания) + (ПараметрыДня.ВремяОкончания - Дата('00010101'));
	КонецЕсли;
	
КонецПроцедуры

// Задача

&НаКлиенте
Процедура БыстрыйВвод_ВариантСрокаПриИзменении(Элемент)
	
	БыстрыйВвод_ДатаОкончания = CRM_ЛентаСобытий.ДатаОкончанияПоВарианту(БыстрыйВвод_ДатаНачала, БыстрыйВвод_ЗадачаВариантСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВариантСрокаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Письмо

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	БыстрыйВвод_ПисьмоУчетнаяЗапись = ВыбранноеЗначение;
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	БыстрыйВвод_ПисьмоОтправительПредставление = ЭлементСписка.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(БыстрыйВвод_ПисьмоУчетнаяЗапись) Тогда
		ПоказатьЗначение(, БыстрыйВвод_ПисьмоУчетнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейПриИзменении(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейПисьма;
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейКопий;
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстРедактирования) Тогда
		ЭтотОбъект[ИмяТаблицы].Очистить();
		Возврат;
	КонецЕсли;
	
	Длина = СтрДлина(ТекстРедактирования);
	
	НачалоСтроки = 0;
	КонецСтроки = 0;
	НачалоКолонки = 0;
	КонецКолонки = 0;
	Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	Элемент.УстановитьГраницыВыделения(1, НачалоКолонки, 1, КонецКолонки);
	
	ЕстьОшибки = Ложь;
	Результат = CRM_ОбщегоНазначенияКлиентСервер.АнализСтрокиАдресовЭП(ТекстРедактирования,, ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Для каждого Адрес Из Результат Цикл
			Если Адрес.КодОшибки <> 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Адрес.Сообщение,, ИмяЭлемента);
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	СоответствияАдресовИКонтактов = Новый СписокЗначений;
	ДанныеПолучателей = ЭтотОбъект[ИмяТаблицы];
	СтруктураДанных = CRM_ЛентаСобытий.ПреобразоватьИменаПолучателей(ДанныеПолучателей,
		БыстрыйВвод_ПисьмоУчетнаяЗапись, Результат, СоответствияАдресовИКонтактов);
	
	ЭтотОбъект[ИмяТаблицы].Очистить();
	Для Каждого ДанныеПолучателя Из СтруктураДанных.Получатели Цикл
		ЗаполнитьЗначенияСвойств(ЭтотОбъект[ИмяТаблицы].Добавить(), ДанныеПолучателя);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ГруппаАдресов = "Кому";
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ГруппаАдресов = "Копии";
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ГруппаАдресов = "Скрытые";
	Иначе
		Возврат;
	КонецЕсли;
	
	СписокВыбранных = Новый СписокЗначений;
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучатели), "Кому");
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучателиКопий), "Копии");
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий), "Скрытые");
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись",		БыстрыйВвод_ПисьмоУчетнаяЗапись);
	ПараметрыОткрытия.Вставить("СписокВыбранных",	СписокВыбранных);
	ПараметрыОткрытия.Вставить("ГруппаПоУмолчанию",	ГруппаАдресов);
	ПараметрыОткрытия.Вставить("ГруппаАдресов",		ГруппаАдресов);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_СписокПолучателейНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура);
	ОткрытьФорму("ОбщаяФорма.CRM_АдреснаяКнига", ПараметрыОткрытия,,,,, ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если (ТипЗнч(Результат) <> Тип("Массив")) И (ТипЗнч(Результат) <> Тип("Соответствие")) Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ПисьмоПолучатели.Очистить();
	БыстрыйВвод_ПисьмоПолучателиКопий.Очистить();
	БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Очистить();
	
	Для Каждого Элемент Из Результат Цикл
		
		Если Элемент.Группа = "Кому" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ИначеЕсли Элемент.Группа = "Копии" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ИначеЕсли Элемент.Группа = "Скрытые" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		Иначе
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЭтотОбъект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
		НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, ",", "");
		НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, ";", "");
		
	КонецЦикла;
	
	ДанныеКонтактов = Новый Структура;
	ДанныеКонтактов.Вставить("Кому", БыстрыйВвод_ПисьмоПолучатели);
	ДанныеКонтактов.Вставить("Копии", БыстрыйВвод_ПисьмоПолучателиКопий);
	ДанныеКонтактов.Вставить("Скрытые", БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий);
	
	ПредставленияКонтактов = CRM_ЛентаСобытий.ПредставленияКонтактовПисьма(ДанныеКонтактов);
	
	БыстрыйВвод_ПисьмоСписокПолучателейПисьма		= ПредставленияКонтактов.Кому;
	БыстрыйВвод_ПисьмоСписокПолучателейКопий		= ПредставленияКонтактов.Копии;
	БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий	= ПредставленияКонтактов.Скрытые;
	
	ВидимостьПолучателейКопий = БыстрыйВвод_ПисьмоПолучателиКопий.Количество() > 0;
	ВидимостьПолучателейСкрытыхКопий = БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Количество() > 0;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПисьмоСписокПолучателейКопий", "Видимость", ВидимостьПолучателейКопий);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПоказатьПолучателейКопии", "Видимость", Не ВидимостьПолучателейКопий);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий", "Видимость", ВидимостьПолучателейСкрытыхКопий);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПоказатьПолучателейСкрытойКопии", "Видимость", Не ВидимостьПолучателейСкрытыхКопий);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ЗаголовокСписка = НСтр("ru='Список получателей письма (Кому)'");
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ЗаголовокСписка = НСтр("ru='Список получателей письма (Копии)'");
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		ЗаголовокСписка = НСтр("ru='Список получателей письма (Скрытые копии)'");
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяТаблицы].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", ЗаголовокСписка);
	ПараметрыОткрытия.Вставить("МассивПолучателей", ЭтотОбъект[ИмяТаблицы]);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаСпискаПолучателей", ПараметрыОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не БыстрыйВвод_АктивенАвтоПодбор Тогда
		Возврат;
	КонецЕсли;
	
	НачалоСтроки = 0;
	КонецСтроки = 0;
	НачалоКолонки = 0;
	КонецКолонки = 0;
	Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	
	ТекстДоМаркера = Лев(Элемент.ТекстРедактирования, КонецКолонки-1);
	ТекстПослеМаркера = Сред(Элемент.ТекстРедактирования, КонецКолонки);
	
	СборнаяСтрока = "";
	
	Если СтрНайти(ТекстДоМаркера, ",") > 0 Тогда
		МассивПодстрок = СтрРазделить(ТекстДоМаркера, ",");
		Для Индекс = 0 По МассивПодстрок.ВГраница() Цикл
			Если Индекс = (МассивПодстрок.Количество()-1) Тогда
				Продолжить;
			КонецЕсли;
			СборнаяСтрока = СборнаяСтрока + ?(СборнаяСтрока="", "", ",") + МассивПодстрок[Индекс];
		КонецЦикла;
	КонецЕсли;
	
	СборнаяСтрока = СборнаяСтрока +?(СборнаяСтрока="", "", ",")+ ВыбранноеЗначение;
	
	Если СтрНайти(ТекстПослеМаркера, ",") > 0 Тогда
		МассивПодстрок = СтрРазделить(ТекстПослеМаркера, ",");
		Для Индекс = 1 По МассивПодстрок.ВГраница() Цикл
			СборнаяСтрока = СборнаяСтрока + "," + МассивПодстрок[Индекс];
		КонецЦикла;
	КонецЕсли;
	
	ВыбранноеЗначение = СборнаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	БыстрыйВвод_АктивенАвтоПодбор = (Не Ожидание = 0);
	
	Если БыстрыйВвод_АктивенАвтоПодбор Тогда
		
		ДанныеВыбора = Неопределено;
		
		НачалоСтроки = 0;
		КонецСтроки = 0;
		НачалоКолонки = 0;
		КонецКолонки = 0;
		Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
		
		ТекстДоМаркера = Лев(Текст, КонецКолонки-1);
		ТекстПослеМаркера = Сред(Текст, КонецКолонки);
		
		ИтоговаяСтрокаДляПоиска = "";
		
		Если НЕ СокрЛП(ТекстДоМаркера) = "" И СтрНайти(ТекстДоМаркера, ",") > 0 Тогда
			МассивПодстрок = СтрРазделить(ТекстДоМаркера, ",");
			ИтоговаяСтрокаДляПоиска = МассивПодстрок[МассивПодстрок.Количество()-1];
		ИначеЕсли НЕ СокрЛП(ТекстДоМаркера) = "" И СтрНайти(ТекстДоМаркера, ",") > 0 Тогда
			ИтоговаяСтрокаДляПоиска = "";
		Иначе
			ИтоговаяСтрокаДляПоиска = ТекстДоМаркера;
		КонецЕсли;
		
		Если Не ИтоговаяСтрокаДляПоиска = "" И СтрДлина(СокрЛП(ИтоговаяСтрокаДляПоиска)) > 0 Тогда
			СписокДляВыбора = CRM_ЛентаСобытий.СписокПолучателейАвтоПодборНаСервере(СокрЛП(ИтоговаяСтрокаДляПоиска));
			Если СписокДляВыбора.Количество() > 0 Тогда
				СтандартнаяОбработка = Ложь;
				ДанныеВыбора = СписокДляВыбора;
			ИначеЕсли БыстрыйВвод_ПисьмоИсторияАдресов.Количество() > 0 Тогда
				СписокИзИстории = Новый СписокЗначений;
				Для Каждого ЭлементИстории Из БыстрыйВвод_ПисьмоИсторияАдресов Цикл
					Если СтрНайти(ЭлементИстории.Представление, ИтоговаяСтрокаДляПоиска) > 0 Тогда
						СтандартнаяОбработка = Ложь;
						СписокИзИстории.Добавить(ЭлементИстории.Значение, ЭлементИстории.Представление);
					КонецЕсли;
				КонецЦикла;
				ДанныеВыбора = СписокИзИстории;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли БыстрыйВвод_ПисьмоИсторияАдресов.Количество()>0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БыстрыйВвод_ПисьмоИсторияАдресов;
	КонецЕсли;
	
КонецПроцедуры

// Файл

&НаКлиенте
Процедура БыстрыйВвод_ФайлОписаниеИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЕстьВложения = (БыстрыйВвод_Вложения.Количество() > 0);
	ВысотаТемы = ?(ЗначениеЗаполнено(Текст), 3, 1);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_ФайлОписание", "Высота", ВысотаТемы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_КомандыФайл", "Видимость", ЕстьВложения);
	
	Элементы.БыстрыйВвод_СоздатьФайл.КнопкаПоУмолчанию = ЕстьВложения;
	
КонецПроцедуры

// Чат

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УчетныеЗаписиМессенджеров = CRM_КлиентыСервер.УчетныеЗаписиМессенджеров(БыстрыйВвод_ЧатВидКИ, Элементы.Список.ТекущаяСтрока, Истина);
	CRM_ЛентаСобытийКлиентСервер.НастроитьОбластьВводаУчетныеЗаписиМессенджеров(УчетныеЗаписиМессенджеров, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура("Идентификатор", ВыбранноеЗначение);
	НайденныеСтроки = БыстрыйВвод_ЧатПолучатели.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныйПолучатель = НайденныеСтроки[0];
		БыстрыйВвод_ЧатИдентификаторПолучателя	= НайденныйПолучатель.Идентификатор;
		БыстрыйВвод_ЧатАдрес					= НайденныйПолучатель.Адрес;
		БыстрыйВвод_ЧатПолучатель					= НайденныйПолучатель.Контакт;
		БыстрыйВвод_ЧатПредставлениеПолучателя	= НайденныйПолучатель.Представление;
		
		// учетная запись есть в списке доступных пользователю
		Если БыстрыйВвод_ЧатУчетныеЗаписи.НайтиСтроки(Новый Структура("УчетнаяЗапись", НайденныйПолучатель.УчетнаяЗапись)).Количество() > 0 Тогда
			БыстрыйВвод_ЧатУчетнаяЗапись			= НайденныйПолучатель.УчетнаяЗапись;
			БыстрыйВвод_ЧатПредставлениеУчетнойЗаписи = НайденныйПолучатель.УчетнаяЗапись;                                                         
		КонецЕсли;  
		
		БыстрыйВвод_ЧатГруппа					= НайденныйПолучатель.Группа;
		БыстрыйВвод_ЧатЭтоНомерТелефона			= НайденныйПолучатель.ЭтоНомерТелефона;
		БыстрыйВвод_ЧатВидКИ					= НайденныйПолучатель.ВидКИ;
	КонецЕсли;
	
	УчетныеЗаписиМессенджеров = CRM_КлиентыСервер.УчетныеЗаписиМессенджеров(БыстрыйВвод_ЧатВидКИ, Элементы.Список.ТекущаяСтрока);
	CRM_ЛентаСобытийКлиентСервер.НастроитьОбластьВводаУчетныеЗаписиМессенджеров(УчетныеЗаписиМессенджеров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатУчетнаяЗаписьОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатУчетнаяЗаписьОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатУчетнаяЗаписьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	БыстрыйВвод_ЧатУчетнаяЗапись = ВыбранноеЗначение;
	БыстрыйВвод_ЧатПредставлениеУчетнойЗаписи = ВыбранноеЗначение;
	
КонецПроцедуры

#КонецОбласти

Процедура СнятьУстановитьПометкуНаСервере(Контакт)
	ОбъектКонтакт = Контакт.ПолучитьОбъект();
	ОбъектКонтакт.ПометкаУдаления = НЕ ОбъектКонтакт.ПометкаУдаления;
	Попытка
		ОбъектКонтакт.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Ошибка выполнения действия:';en='Run error of action:'") + Символы.ПС + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление_ПроцентЗаполнения()
	
	ЭлементУО = Список.УсловноеОформление.Элементы.Добавить();
	
	// отбор
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроцентЗаполненияАктуален"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбора.ПравоеЗначение = Ложь;
	ЭлементОтбора.Использование = Истина;
	
	//Оформление	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	// Создаем поля оформления
	ПолеОформления = ЭлементУО.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ПроцентЗаполнения");
	ПолеОформления.Использование = Истина;
	
	МассивЗапрещенныеПоля = Новый Массив;
	МассивЗапрещенныеПоля.Добавить("ПроцентЗаполнения");
	Список.УстановитьОграниченияИспользованияВОтборе(МассивЗапрещенныеПоля);
	Список.УстановитьОграниченияИспользованияВПорядке(МассивЗапрещенныеПоля);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление_СтатусРаботы()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	CRM_СтатусыРаботыСКлиентом.ЦветФона КАК ЦветФона
	                      |ИЗ
	                      |	Справочник.CRM_СтатусыРаботыСКлиентом КАК CRM_СтатусыРаботыСКлиентом");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.ЦветФона) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивRGB = СтрРазделить(Выборка.ЦветФона, ";");
		Если МассивRGB.Количество() = 3 Тогда
			
			ЦветФона = Новый Цвет(Число(МассивRGB[0]), Число(МассивRGB[1]), Число(МассивRGB[2]));
			ЦветТекста = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(ЦветФона);
			
			ЭлементУО = Список.УсловноеОформление.Элементы.Добавить();
			
			// Отбор
			ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("CRM_СтатусРаботы.ЦветФона"); 
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
			ЭлементОтбора.ПравоеЗначение = Выборка.ЦветФона;
			ЭлементОтбора.Использование = Истина;
			
			// Оформление
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
			
			// Создаем поля оформления
			ПолеОформления = ЭлементУО.Поля.Элементы.Добавить();
			ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("CRM_СтатусРаботы");
			ПолеОформления.Использование = Истина;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокТиповОбращений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_ТипыОбращений.Ссылка КАК Ссылка,
		|	CRM_ТипыОбращений.ИндексКартинки КАК ИндексКартинки
		|ИЗ
		|	Справочник.CRM_ТипыОбращений КАК CRM_ТипыОбращений
		|ГДЕ
		|	НЕ CRM_ТипыОбращений.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	CRM_ТипыОбращений.РеквизитДопУпорядочивания";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокТиповОбращений = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		СписокТиповОбращений.Добавить(Выборка.Ссылка,,, БиблиотекаКартинок["CRM_ТипОбращения"+Выборка.ИндексКартинки]);
	КонецЦикла;
	
	Возврат СписокТиповОбращений;

КонецФункции

&НаКлиенте
Процедура КомандаСоздатьПоТипуОбращения(Команда)
	
	УИд = СтрЗаменить( СтрЗаменить(Команда.Имя, "КомандаСоздатьПоТипуОбращения_", "") , "_", "-");
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТипОбращения", ПолучитьТипОбращенияПоУИд(УИд));
	Если ПараметрыОткрытия.ТипОбращения = ПредопределенноеЗначение("Справочник.CRM_ТипыОбращений.Интерес") Тогда 
		ПараметрыОткрытия.Вставить("ИсточникОткрытияМастера", CRM_МетодыФормОбработокСервер.МастерОткрытИзПродаж());
	Иначе
		ПараметрыОткрытия.Вставить("ИсточникОткрытияМастера", CRM_МетодыФормОбработокСервер.МастерОткрытИзОбращений());
	КонецЕсли;
	ПараметрыОткрытия.Вставить("НеОбновлятьТипОбращения", Истина);
	ПараметрыОткрытия.Вставить("Основание", ПартнерОтбора);
	
	ОткрытьФорму("Документ.CRM_Интерес.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор);

КонецПроцедуры

&НаСервере
Функция ПолучитьТипОбращенияПоУИд(УИд)
	Возврат Справочники.CRM_ТипыОбращений.ПолучитьСсылку(Новый УникальныйИдентификатор(УИд));
КонецФункции

&НаСервере
Процедура ОбновитьСоставКомандГруппыСоздать()
	
	Если НЕ ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПоддержку") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Создать_Интерес.Видимость = Ложь;
	
	СписокТиповОбращений = СписокТиповОбращений();
	
	Для Каждого ЭлементСписка Из СписокТиповОбращений Цикл
		
		Если НЕ ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда Продолжить; КонецЕсли;
		
		ПреобразованныйУИд = СтрЗаменить(ЭлементСписка.Значение.УникальныйИдентификатор(), "-", "_");
		
		// команда
		ИмяКоманды = "КомандаСоздатьПоТипуОбращения_" + ПреобразованныйУИд;
		РезультатПоискаКомандыФормы = Команды.Найти(ИмяКоманды);
		
		Если РезультатПоискаКомандыФормы = Неопределено Тогда
			КомандаСоздатьПоТипуОбращения = Команды.Добавить(ИмяКоманды);
			КомандаСоздатьПоТипуОбращения.Заголовок  = НСтр("ru = 'Создать по типу обращения'");
			КомандаСоздатьПоТипуОбращения.Действие   = "КомандаСоздатьПоТипуОбращения";
		КонецЕсли;
		
		// элемент формы
		ИмяЭлементаФормы = "КомандаСоздатьПоТипуОбращения_" + ПреобразованныйУИд;
		РезультатПоискаЭлементаФормы = Элементы.Найти(ИмяЭлементаФормы);
		
		Если РезультатПоискаЭлементаФормы = Неопределено Тогда
			ЭлементФормы = Элементы.Добавить(ИмяЭлементаФормы, Тип("КнопкаФормы"), Элементы.ГруппаПодменюСоздать);
			ЭлементФормы.Вид    = ВидКнопкиФормы.КнопкаКоманднойПанели;
			ЭлементФормы.Заголовок  = ЭлементСписка.Значение;
			ЭлементФормы.Картинка = ЭлементСписка.Картинка;
			ЭлементФормы.ИмяКоманды = ИмяКоманды;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПолнотекстовыйПоиск

&НаКлиенте
Процедура ИспользоватьПолнотекстовыйПоиск(Команда)
	Элементы.СписокИспользоватьПолнотекстовыйПоиск.Пометка = Не Элементы.СписокИспользоватьПолнотекстовыйПоиск.Пометка;
	ПометкаИспользоватьПолнотекстовыйПоиск = Элементы.СписокИспользоватьПолнотекстовыйПоиск.Пометка;
	Элементы.ГруппаПолнотекстовыйПоиск.Видимость = Элементы.СписокИспользоватьПолнотекстовыйПоиск.Пометка;
	Элементы.ГруппаДополнительныеПоляПоиска.Видимость = Не Элементы.СписокИспользоватьПолнотекстовыйПоиск.Пометка;
	Если ПометкаИспользоватьПолнотекстовыйПоиск Тогда
		СтрокаПоиска = "";
		СтрокаПоискаCRM = "";
		СтрокаПоискаДоп1 = "";
		СтрокаПоискаДоп2 = "";
		СтрокаПоискаДоп3 = "";
	Иначе
		СтрокаПоискаПолнотекстовый = "";
	КонецЕсли;
	ВыполнитьПоискCRM(Истина);
	ВыполнитьПоискПолнотекстовый(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПолнотекстовыйПриИзменении(Элемент)
	ВыполнитьПоискПолнотекстовый(Неопределено);
КонецПроцедуры   

&НаКлиенте
Процедура ВыполнитьПоискПолнотекстовый(Знач Оповещение)
	
	Если СтрокаПоискаПолнотекстовый <> "" Тогда
		
		ПроверитьИндексПолнотекстовогоПоиска(Новый ОписаниеОповещения("ВыполнитьПоискЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)));
		Возврат;
		
	Иначе
		CRM_ПоискКонтактовКлиент.ВосстановитьОтображениеСпискаПослеПолнотекстовогоПоиска(ЭтотОбъект);
		РасширенныйПоиск = Ложь;
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
		                                                                   "ОтборПоПолнотекстовомуПоискуУстановлен",
		                                                                   Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
		                                                                   "ОтборПоПолнотекстовомуПоиску",
		                                                                   Неопределено);
		ОснованиеВыбора = "";
		ВернутьЦветСтрокиПоиска();
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение);
КонецПроцедуры  

&НаСервере
Процедура ВернутьЦветСтрокиПоиска()
	
	Элементы.СтрокаПоискаПолнотекстовый.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИндексПолнотекстовогоПоиска(Знач Оповещение)
	
	Если Не ИндексПолнотекстовогоПоискаАктуален И ИнформационнаяБазаФайловая Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьИндексПолнотекстовогоПоискаЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), 
			НСтр("ru='Индекс полнотекстового поиска неактуален. Обновить индекс?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ПроверитьИндексПолнотекстовогоПоискаФрагмент(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИндексПолнотекстовогоПоискаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    Результат = РезультатВопроса; 
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        ПодключитьОбработчикОжидания("ОбновитьИндексПолнотекстовогоПоиска",0.2,Истина);
        ВыполнитьОбработкуОповещения(Оповещение);
        Возврат;
    КонецЕсли;
    
    
    ПроверитьИндексПолнотекстовогоПоискаФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИндексПолнотекстовогоПоискаФрагмент(Знач Оповещение)
    
    ВыполнитьПолнотекстовыйПоиск();
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИндексПолнотекстовогоПоиска()
	
	Состояние(НСтр("ru = 'Идет обновление индекса полнотекстового поиска...'"));
	ОбновитьИндексПолнотекстовогоПоискаСервер();
	ИндексПолнотекстовогоПоискаАктуален = Истина;
	Состояние(НСтр("ru = 'Обновление индекса полнотекстового поиска завершено...'"));
	ВыполнитьПолнотекстовыйПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПолнотекстовыйПоиск()
	
	ТекстОшибки = НайтиПартнеровПолнотекстовыйПоиск();
	Если ТекстОшибки = Неопределено Тогда
		РасширенныйПоиск = Истина;
		ЗаполнитьСтрокуОснования();
	Иначе
		Если НЕ ТекстОшибки = НСтр("ru = 'Ничего не найдено'") Тогда
			ПоказатьОповещениеПользователя(ТекстОшибки);
		Иначе
			CRM_ПоискКонтактовКлиент.ВосстановитьОтображениеСпискаПослеПолнотекстовогоПоиска(ЭтотОбъект);
			РасширенныйПоиск = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндексПолнотекстовогоПоискаСервер()
	
	CRM_ПоискКонтактов.ОбновитьИндексПолнотекстовогоПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокуОснования()
	
	Основание = Основания.НайтиСтроки(Новый Структура("Партнер", Элементы.Список.ТекущаяСтрока));
	Если Основание.Количество() = 0 Тогда
		ОснованиеВыбора = "";
	Иначе
		ОснованиеВыбора = Основание[0].Основание;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиПартнеровПолнотекстовыйПоиск()

	Возврат CRM_ПоискКонтактов.НайтиПартнеровПолнотекстовыйПоиск(ЭтотОбъект)

КонецФункции

&НаКлиенте
Процедура ВыполнитьПоискЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	
	ТекущийЭлемент = ?(НЕ РасширенныйПоиск, Элементы.СтрокаПоискаПолнотекстовый, Элементы.Список);
	
	
	ВыполнитьОбработкуОповещения(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеСтрокиСписокКонтактов()
	
	Если Элементы.СписокКонтактов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеСтрокиСписокКонтактовНаСервере(Элементы.СписокКонтактов.ТекущиеДанные.ПолучитьИдентификатор(),
		Элементы.СписокКонтактов.ТекущиеДанные.КонтактноеЛицо);
	ОбработатьАктивизациюСтрокиСпискаКонтакты();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСтрокиСписокКонтактовНаСервере(ИдентификаторСтроки, КонтактСсылка)
	
	СтрокаКонтакт = СписокКонтактов.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаКонтакт = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКонтакт.КонтактноеЛицо      = КонтактСсылка;
	СтрокаКонтакт.Автор               = КонтактСсылка.Автор;
	СтрокаКонтакт.Наименование        = КонтактСсылка.Наименование;
	СтрокаКонтакт.РольКонтактногоЛица = КонтактСсылка.CRM_РольКонтактногоЛица.Наименование;
	СтрокаКонтакт.Должность           = КонтактСсылка.CRM_Должность.Наименование;
	СтрокаКонтакт.ПометкаУ            = КонтактСсылка.ПометкаУдаления;
	СтрокаКонтакт.Работает            = (КонтактСсылка.CRM_Состояние = Перечисления.CRM_Состояние.Работает);
	
	СписокКонтактов.Сортировать("Работает Убыв");
	
КонецПроцедуры

#КонецОбласти

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = РаспознаваниеРечи_МассивИменЭлементов();
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = РаспознаваниеРечи_МассивИменЭлементов();
	МассивПолей         = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.СтрокаПоиска);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.РаспознаваниеРечиПоиск);
	Контекст.Вставить("ИмяРеквизита",                     "СтрокаПоиска");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если Не РезультатРаспознавания.РаспознаваниеФразыЗавершено Тогда
		ЭтотОбъект[Контекст.ИмяРеквизита] = "";
		Контекст.Элемент.ОбновитьТекстРедактирования();
	КонецЕсли;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		Контекст.Элемент,
		Контекст.ИмяРеквизита,
		РезультатРаспознавания);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	ТекущийЭлемент = Элементы.СтрокаПоискаCRM;
	
	// +CRM
	СтрокаПоискаCRMПриИзменении(ТекущийЭлемент);
	// -CRM
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивИменЭлементов()
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("РаспознаваниеРечиПоиск");
	
	Возврат МассивЭлементов;
	
КонецФункции

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "СтрокаПоиска");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи
