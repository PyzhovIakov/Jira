#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает количество уровней схемы плана продаж
//
// Параметры:
//  Схема	 - СправочникСсылка.CRM_СхемаПланаПродаж - схема плана продаж
// 
// Возвращаемое значение:
//  Число - количество уровней
//
Функция КоличествоУровней(Схема) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(CRM_СхемаПланаПродажЭлементыСхемы.ИдентификаторУровня) КАК КоличествоУровней
		|ИЗ
		|	Справочник.CRM_СхемаПланаПродаж.ЭлементыСхемы КАК CRM_СхемаПланаПродажЭлементыСхемы
		|ГДЕ
		|	CRM_СхемаПланаПродажЭлементыСхемы.Ссылка = &Схема";
	
	Запрос.УстановитьПараметр("Схема", Схема);
	
	Возврат Запрос.Выполнить().Выгрузить()[0].КоличествоУровней;
	
КонецФункции

// Получает разрезы уровня иерархии
//
// Параметры:
//  Схема	 - СправочникСсылка.CRM_СхемаПланаПродаж - схема плана продаж
//  УровеньИерархии	 - Число	 - идентификатор уровня иерархии
//  ТолькоДопРазрезы - 	Булево - признак получения только дополнительных разрезов
//  ВключатьИерархию - Булево	 - признак использования иерархии
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица разрезов уровня иерархии
//
Функция РазрезыУровняИерархии(Схема, УровеньИерархии, ТолькоДопРазрезы = Истина, ВключатьИерархию = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_СхемаПланаПродажЭлементыСхемы.Разрез КАК Разрез,
		|	CRM_СхемаПланаПродажЭлементыСхемы.ИдентификаторУровня КАК Уровень
		|ИЗ
		|	Справочник.CRM_СхемаПланаПродаж.ЭлементыСхемы КАК CRM_СхемаПланаПродажЭлементыСхемы
		|ГДЕ
		|	CRM_СхемаПланаПродажЭлементыСхемы.Ссылка = &Схема
		|	И CRM_СхемаПланаПродажЭлементыСхемы.ИдентификаторУровня = &УровеньИерархии
		|
		|УПОРЯДОЧИТЬ ПО
		|	CRM_СхемаПланаПродажЭлементыСхемы.НомерСтроки";
	
	Если ВключатьИерархию Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
									"CRM_СхемаПланаПродажЭлементыСхемы.ИдентификаторУровня = &УровеньИерархии", 
									"CRM_СхемаПланаПродажЭлементыСхемы.ИдентификаторУровня <= &УровеньИерархии");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Схема", Схема);
	Запрос.УстановитьПараметр("УровеньИерархии", УровеньИерархии);
	
	РезультатЗапросаТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТолькоДопРазрезы Тогда
		
		СтрокиКУдалению = Новый Массив;
		Для Каждого СтрокаТЗ Из РезультатЗапросаТЗ Цикл
			Если ЭтоТипИерархии(СтрокаТЗ.Разрез) Тогда
				СтрокиКУдалению.Добавить(СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлСтрокиКУдалению Из СтрокиКУдалению Цикл
			РезультатЗапросаТЗ.Удалить(ЭлСтрокиКУдалению);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РезультатЗапросаТЗ;
	
КонецФункции

// Проверяет, что уровень содержит тип иерархии
//
// Параметры:
//  Схема			 - СправочникСсылка.CRM_СхемаПланаПродаж - схема плана продаж
//  УровеньИерархии	 - Число								 - идентификатор уровня иерархии
//  ТипИерархии		 - ОписаниеТипов						 - тип иерархии
// 
// Возвращаемое значение:
//  Булево - результат выполнения функции
//
Функция УровеньСодержитТипИерархии(Схема, УровеньИерархии, ТипИерархии) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_СхемаПланаПродажЭлементыСхемы.Разрез КАК Разрез
		|ИЗ
		|	Справочник.CRM_СхемаПланаПродаж.ЭлементыСхемы КАК CRM_СхемаПланаПродажЭлементыСхемы
		|ГДЕ
		|	CRM_СхемаПланаПродажЭлементыСхемы.Ссылка = &Схема
		|	И CRM_СхемаПланаПродажЭлементыСхемы.ИдентификаторУровня = &УровеньИерархии";
	
	Запрос.УстановитьПараметр("Схема", Схема);
	Запрос.УстановитьПараметр("УровеньИерархии", УровеньИерархии);
	
	РезультатЗапросаТЗ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЗ Из РезультатЗапросаТЗ Цикл
		Если СтрокаТЗ.Разрез.ТипЗначения.СодержитТип(ТипИерархии) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
		
	Возврат Ложь;
	
КонецФункции

// Возвращает значение периодичности уровня схемы
//
// Параметры:
//  Схема			 - СправочникСсылка.CRM_СхемаПланаПродаж - схема плана продаж
//  УровеньИерархии	 - Число								 - идентификатор уровня иерархии
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.Периодичность - периодичность уровня схемы
//
Функция ПериодичностьУровняСхемы(Схема, УровеньИерархии) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_СхемаПланаПродажЭлементыСхемы.Периодичность КАК Периодичность
		|ИЗ
		|	Справочник.CRM_СхемаПланаПродаж.ЭлементыСхемы КАК CRM_СхемаПланаПродажЭлементыСхемы
		|ГДЕ
		|	CRM_СхемаПланаПродажЭлементыСхемы.Ссылка = &Схема
		|	И CRM_СхемаПланаПродажЭлементыСхемы.ИдентификаторУровня = &УровеньИерархии";
	
	Запрос.УстановитьПараметр("Схема", Схема);
	Запрос.УстановитьПараметр("УровеньИерархии", УровеньИерархии);
	
	ВыборкаИзРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаИзРезультатаЗапроса.Следующий() Тогда
		Возврат ВыборкаИзРезультатаЗапроса.Периодичность;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает значение периодичности прогнозирования
//
// Параметры:
//  Схема			 - СправочникСсылка.CRM_СхемаПланаПродаж - схема плана продаж
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.Периодичность - периодичность прогнозирования
//
Функция ПериодичностьПрогнозирования(Схема) Экспорт
	
	Возврат Схема.ПериодичностьПрогнозирования;
	
КонецФункции

#Область ПереходНаНовуюВерсию

// Процедура выполняет создание поставляемых схем.
//
// Параметры:
//  Параметры	 - Структура	 - Параметры.
//
Процедура СоздатьПоставляемыеСхемы(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СхемаПланаПродаж.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_СхемаПланаПродаж КАК CRM_СхемаПланаПродаж");
	
	Если Запрос.Выполнить().Пустой() Тогда
		
		// По менеджерам подразделения / на квартал
		НовСхема = СоздатьЭлемент();
		НовСхема.Наименование = НСтр("ru = 'По менеджерам подразделения / на квартал'");
		НовСхема.ПериодичностьПрогнозирования = Перечисления.Периодичность.Месяц;
		// Менеджеры
		НовЭлемент = НовСхема.ЭлементыСхемы.Добавить();
		НовЭлемент.Разрез = ПланыВидовХарактеристик.CRM_ТипыАналитикПланирования.Менеджеры;
        НовЭлемент.ИдентификаторУровня = 1;
        НовЭлемент.Периодичность = Перечисления.Периодичность.Квартал;
		// Группа номенклатуры
		НовЭлемент = НовСхема.ЭлементыСхемы.Добавить();
		НовЭлемент.Разрез = ПланыВидовХарактеристик.CRM_ТипыАналитикПланирования.Номенклатура_Родитель;
        НовЭлемент.Родитель = 1;
        НовЭлемент.ИдентификаторУровня = 1;
        НовЭлемент.Периодичность = Перечисления.Периодичность.Квартал;
		// Группа номенклатуры
		НовЭлемент = НовСхема.ЭлементыСхемы.Добавить();
		НовЭлемент.Разрез = ПланыВидовХарактеристик.CRM_ТипыАналитикПланирования.Партнеры;
        НовЭлемент.Родитель = 1;
        НовЭлемент.ИдентификаторУровня = 1;
        НовЭлемент.Периодичность = Перечисления.Периодичность.Квартал;
		
		НовСхема.Записать();

		// По подразделениям продаж / на год
		НовСхема = СоздатьЭлемент();
		НовСхема.Наименование = НСтр("ru = 'По подразделениям продаж / на год'");
		НовСхема.ПериодичностьПрогнозирования = Перечисления.Периодичность.Месяц;
		// Подразделение
		НовЭлемент = НовСхема.ЭлементыСхемы.Добавить();
		НовЭлемент.Разрез = ПланыВидовХарактеристик.CRM_ТипыАналитикПланирования.Подразделение;
        НовЭлемент.ИдентификаторУровня = 1;
        НовЭлемент.Периодичность = Перечисления.Периодичность.Год;
		// Менеджеры
		НовЭлемент = НовСхема.ЭлементыСхемы.Добавить();
		НовЭлемент.Разрез = ПланыВидовХарактеристик.CRM_ТипыАналитикПланирования.Менеджеры;
        НовЭлемент.Родитель = 1;
        НовЭлемент.ИдентификаторУровня = 2;
        НовЭлемент.Периодичность = Перечисления.Периодичность.Месяц;
		// Группа номенклатуры
		НовЭлемент = НовСхема.ЭлементыСхемы.Добавить();
		НовЭлемент.Разрез = ПланыВидовХарактеристик.CRM_ТипыАналитикПланирования.Партнеры;
        НовЭлемент.Родитель = 2;
        НовЭлемент.ИдентификаторУровня = 2;
        НовЭлемент.Периодичность = Перечисления.Периодичность.Месяц;
		
		НовСхема.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоТипИерархии(Разрез) Экспорт
	
	Если Разрез.ТипЗначения.СодержитТип(Тип("СправочникСсылка.СтруктураПредприятия"))
		Или Разрез.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Пользователи")) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоПериодичность(Разрез) Экспорт
	
	Если ТипЗнч(Разрез) = Тип("ПеречислениеСсылка.Периодичность") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьЗаписиСоСвязаннымиПланамиПродаж(Схема) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ПланПродаж.ПланПродаж КАК ПланПродаж
		|ИЗ
		|	РегистрСведений.CRM_ПланПродаж КАК CRM_ПланПродаж
		|ГДЕ
		|	CRM_ПланПродаж.ПланПродаж.СхемаПланаПродаж = &СхемаПланаПродаж
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_ПланПродаж.ПланПродаж";
	
	Запрос.УстановитьПараметр("СхемаПланаПродаж", Схема);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#КонецЕсли