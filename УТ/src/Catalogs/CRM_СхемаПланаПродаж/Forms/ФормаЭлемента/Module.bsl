
#Область ОбработчикиСобытийЭлементовФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОсновныеАналитики.ЗагрузитьЗначения(CRM_ПланированиеПродаж.ОсновныеАналитикиПланирования());
	ЗаполнитьДеревоСхемыСервер();
	
	СоздатьКнопкиПериодичностьПрогнозирования();
	ПокраситьКнопкиПериодичностьПрогнозирования();
	
	Если Справочники.CRM_СхемаПланаПродаж.ЕстьЗаписиСоСвязаннымиПланамиПродаж(Объект.Ссылка) Тогда
		//ТолькоПросмотр = Истина;
		ШаблонСообщения = НСтр("ru = 'Данная схема связана с планами продаж,
			| по которым уже есть записи. Изменения запрещены'");
		ОбщегоНазначения.СообщитьПользователю(ШаблонСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ДеревоСхемыПериодичность.СписокВыбора.ЗагрузитьЗначения(МассивДоступныхПериодичностей());
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СохранитьДеревоСхемыВОбъект(Отказ);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ДобавитьСтрокуВДеревоСхемы(Команда)
	
	ВСхемеЕстьСтроки = (ДеревоСхемы.ПолучитьЭлементы().Количество() > 0);
	
	Если ВСхемеЕстьСтроки Тогда
		
		Если Элементы.ДеревоСхемы.ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрокаДереваСхемы = ДеревоСхемы.НайтиПоИдентификатору(Элементы.ДеревоСхемы.ТекущаяСтрока);
		Если ТекущаяСтрокаДереваСхемы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ГруппаСтрок = ТекущаяСтрокаДереваСхемы.ПолучитьЭлементы();
		
	Иначе
		
		ГруппаСтрок = ДеревоСхемы.ПолучитьЭлементы();
		
	КонецЕсли;
	
	СтрокаДерева = ГруппаСтрок.Добавить();
	Если ЗначениеЗаполнено(ПериодичностьПоследнегоУровня) Тогда
		СтрокаДерева.Периодичность = ПериодичностьПоследнегоУровня;
	Иначе
		СтрокаДерева.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц");
	КонецЕсли;
	
	Элементы.ДеревоСхемы.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
	
	ДеревоСхемыПериодичностьПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоСхемы(Команда)
	
	ЗаполнитьДеревоСхемыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТумблерПериодичностьПрогнозирования_День(Команда)
	
	Объект.ПериодичностьПрогнозирования = ПредопределенноеЗначение("Перечисление.Периодичность.День");
	ПокраситьКнопкиПериодичностьПрогнозирования();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТумблерПериодичностьПрогнозирования_Неделя(Команда)
	
	Объект.ПериодичностьПрогнозирования = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя");
	ПокраситьКнопкиПериодичностьПрогнозирования();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТумблерПериодичностьПрогнозирования_Месяц(Команда)
	
	Объект.ПериодичностьПрогнозирования = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц");
	ПокраситьКнопкиПериодичностьПрогнозирования();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТумблерПериодичностьПрогнозирования_Квартал(Команда)
	
	Объект.ПериодичностьПрогнозирования = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал");
	ПокраситьКнопкиПериодичностьПрогнозирования();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТумблерПериодичностьПрогнозирования_Полугодие(Команда)
	
	Объект.ПериодичностьПрогнозирования = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие");
	ПокраситьКнопкиПериодичностьПрогнозирования();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТумблерПериодичностьПрогнозирования_Год(Команда)
	
	Объект.ПериодичностьПрогнозирования = ПредопределенноеЗначение("Перечисление.Периодичность.Год");
	ПокраситьКнопкиПериодичностьПрогнозирования();
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДеревоСхемыПериодичностьПриИзменении(Элемент)
	
	Модифицированность = Истина;
	СоздатьКнопкиПериодичностьПрогнозирования();
	ПокраситьКнопкиПериодичностьПрогнозирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСхемыПериодичностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РодительСтроки = ДеревоСхемы.НайтиПоИдентификатору(Элементы.ДеревоСхемы.ТекущаяСтрока).ПолучитьРодителя();
	Если РодительСтроки <> Неопределено Тогда
		ПериодичностьРодителяСтроки = РодительСтроки.Периодичность;
	КонецЕсли;
	Элемент.СписокВыбора.ЗагрузитьЗначения(МассивДоступныхПериодичностей(ПериодичностьРодителяСтроки));
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСхемыПослеУдаления(Элемент)
	
	СоздатьКнопкиПериодичностьПрогнозирования();
	ПокраситьКнопкиПериодичностьПрогнозирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСхемыРазрез2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КоличествоДопАналитик = 0;
	ИсключаемыеТипыАналитики = МассивИспользованныхТиповАналитик(Элементы.ДеревоСхемы.ТекущиеДанные.Разрез2,
		КоличествоДопАналитик);
	Элемент.СписокВыбора.ЗагрузитьЗначения(МассивВыбораКолонкиАналитики(ИсключаемыеТипыАналитики, КоличествоДопАналитик));
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСхемыРазрез3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КоличествоДопАналитик = 0;
	ИсключаемыеТипыАналитики = МассивИспользованныхТиповАналитик(Элементы.ДеревоСхемы.ТекущиеДанные.Разрез3,
		КоличествоДопАналитик);
	Элемент.СписокВыбора.ЗагрузитьЗначения(МассивВыбораКолонкиАналитики(ИсключаемыеТипыАналитики, КоличествоДопАналитик));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивВыбораКолонкиАналитики(ИсключаемыеТипыАналитики, КоличествоДопАналитик)
	
	ИсключаемыеТипыАналитики.Добавить(ПланыВидовХарактеристик.CRM_ТипыАналитикПланирования.Подразделение);
	ИсключаемыеТипыАналитики.Добавить(ПланыВидовХарактеристик.CRM_ТипыАналитикПланирования.Менеджеры);
	ЕстьНоменклатура = ИсключаемыеТипыАналитики.Найти(
		ПланыВидовХарактеристик.CRM_ТипыАналитикПланирования.Номенклатура) <> Неопределено;
	ЕстьПартнеры = ИсключаемыеТипыАналитики.Найти(
		ПланыВидовХарактеристик.CRM_ТипыАналитикПланирования.Партнеры) <> Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ТипыАналитикПланирования.Ссылка КАК Ссылка,
		|	CRM_ТипыАналитикПланирования.ИмяПредопределенныхДанных КАК Имя
		|ИЗ
		|	ПланВидовХарактеристик.CRM_ТипыАналитикПланирования КАК CRM_ТипыАналитикПланирования
		|ГДЕ
		|	НЕ CRM_ТипыАналитикПланирования.Ссылка В (&МассивИсключений)
		|	И НЕ CRM_ТипыАналитикПланирования.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("МассивИсключений", ИсключаемыеТипыАналитики);
	
	ВыборкаПВХ = Запрос.Выполнить().Выбрать();
	МассивСсылок = Новый Массив;
	Пока ВыборкаПВХ.Следующий() Цикл
		Если (СтрНачинаетсяС(ВыборкаПВХ.Имя, "Партнеры_") 
				И (ЕстьПартнеры Или КоличествоДопАналитик = 3))
			Или (СтрНачинаетсяС(ВыборкаПВХ.Имя, "Номенклатура_")
				И (ЕстьНоменклатура Или КоличествоДопАналитик = 3)) Тогда
			Продолжить;
		КонецЕсли;
		МассивСсылок.Добавить(ВыборкаПВХ.Ссылка);
	КонецЦикла;
	
	Возврат МассивСсылок;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаСервере
Процедура ПериодичностьПоследнегоУровня(Дерево, ПериодичностьУровня)
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		ПериодичностьУровня = СтрокаДерева.Периодичность;
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ПериодичностьПоследнегоУровня(СтрокаДерева, ПериодичностьУровня);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопкиПериодичностьПрогнозирования()
	
	ПериодичностьПоследнегоУровня = Неопределено;
	ПериодичностьПоследнегоУровня(РеквизитФормыВЗначение("ДеревоСхемы"), ПериодичностьПоследнегоУровня);
	
	ГруппаКнопокТумблера = Элементы.Найти("ТумблерПериодичностьПрогнозирования_Группа");
	Если ГруппаКнопокТумблера <> Неопределено Тогда
		Элементы.Удалить(ГруппаКнопокТумблера);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПериодичностьПоследнегоУровня) Тогда
		Элементы.ДекорацияПериодичностьПрогнозированияНеЗадана.Видимость = Истина;
		Объект.ПериодичностьПрогнозирования = Неопределено;
		Модифицированность = Истина;
		Возврат;
	КонецЕсли;
	Элементы.ДекорацияПериодичностьПрогнозированияНеЗадана.Видимость = Ложь;
	
	СтруктураСоздания = Новый Структура;
	
	СтруктураКоманднаяПанель = Новый Структура;
	СтруктураКоманднаяПанель.Вставить("Имя", "ТумблерПериодичностьПрогнозирования_Группа");
	СтруктураКоманднаяПанель.Вставить("Родитель", "ТумблерПериодичностьПрогнозирования");
	
	СтруктураГруппаКнопок = Новый Структура;
	СтруктураГруппаКнопок.Вставить("Имя", "ТумблерПериодичностьПрогнозирования_Элемент");
	
	СтруктураСоздания.Вставить("СтруктураКоманднаяПанель", СтруктураКоманднаяПанель);
	СтруктураСоздания.Вставить("СтруктураГруппаКнопок", СтруктураГруппаКнопок);
	
	СтруктураВидимыеКнопки = Новый Структура;
	
	МассивПериодичностей = CRM_ПланированиеПродаж.МассивПериодичностей();
	
	Сч = МассивПериодичностей.Количество() - 1;
	Пока Сч >= 0 Цикл
		
		ЭлМассива = МассивПериодичностей[Сч];
		
		Сч = Сч - 1;
		
		Если CRM_ПланированиеПродаж.ПериодичностьАДетальнееБ(ЭлМассива, ПериодичностьПоследнегоУровня)
				ИЛИ ЭлМассива = ПериодичностьПоследнегоУровня Тогда
				
			СтруктураКнопка = Новый Структура;
			ИмяОписания = "ТумблерПериодичностьПрогнозирования_" + ЭлМассива;
			СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
			СтруктураКнопка.Вставить("Заголовок", ЭлМассива);
			СтруктураКнопка.Вставить("ИмяКоманды", "Подключаемый_" + ИмяОписания);
			СтруктураКнопка.Вставить("Действие", "Подключаемый_" + ИмяОписания);
			СтруктураКнопка.Вставить("Отображение", ОтображениеКнопки.Текст);
			СтруктураКнопка.Вставить("ОтображениеФигуры", ОтображениеФигурыКнопки.Всегда);
			
			Если Модифицированность И ЭлМассива = ПериодичностьПоследнегоУровня Тогда
				СтруктураКнопка.Вставить("Пометка", Истина);
				Объект.ПериодичностьПрогнозирования = ПериодичностьПоследнегоУровня;
			КонецЕсли;
		
			СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
			
		КонецЕсли;
	
	КонецЦикла;
	
	СтруктураСоздания.Вставить("СтруктураВидимыеКнопки", СтруктураВидимыеКнопки);
	
	Если CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
			СформироватьКоманднуюПанельПоСтруктуре(ЭтотОбъект, СтруктураСоздания);
	КонецЕсли;
	
	ГруппаКнопокТумблера = Элементы.Найти("ТумблерПериодичностьПрогнозирования_Группа");
	Если ГруппаКнопокТумблера <> Неопределено Тогда
		ГруппаКнопокТумблера.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		ГруппаКнопокТумблера.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПокраситьКнопкиПериодичностьПрогнозирования()
	
	ГруппаКнопокТумблера = Элементы.Найти("ТумблерПериодичностьПрогнозирования_Группа");
	Если ГруппаКнопокТумблера = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВидимыеКнопки = Новый Структура;
	
	МассивПериодичностей = CRM_ПланированиеПродаж.МассивПериодичностей();
	
	Сч = МассивПериодичностей.Количество() - 1;
	Пока Сч >= 0 Цикл
		
		ЭлМассива = МассивПериодичностей[Сч];
		
		Сч = Сч - 1;
		
		Если CRM_ПланированиеПродаж.ПериодичностьАДетальнееБ(ЭлМассива, ПериодичностьПоследнегоУровня)
				ИЛИ ЭлМассива = ПериодичностьПоследнегоУровня Тогда
	
			СтруктураКнопка = Новый Структура;
			ИмяОписания = "ТумблерПериодичностьПрогнозирования_" + ЭлМассива;
			СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
			СтруктураКнопка.Вставить("Пометка", ЭлМассива = Объект.ПериодичностьПрогнозирования);
		
			СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
			ПокраситьКнопки(ЭтотОбъект, СтруктураВидимыеКнопки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоСхемыСервер()
	
	Если Объект.ЭлементыСхемы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоСхемыДЗ = РеквизитФормыВЗначение("ДеревоСхемы");
	
	ДеревоСхемыДЗ.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеТЧ.НомерСтроки КАК НомерСтроки,
		|	ДанныеТЧ.Разрез КАК Разрез,
		|	ДанныеТЧ.Родитель КАК Родитель,
		|	ДанныеТЧ.Периодичность КАК Периодичность
		|ПОМЕСТИТЬ ДанныеТЧ
		|ИЗ
		|	&ДанныеТЧ КАК ДанныеТЧ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеТЧ.НомерСтроки КАК НомерСтроки,
		|	ДанныеТЧ.Разрез КАК Разрез,
		|	ДанныеТЧ.Родитель КАК Родитель,
		|	ДанныеТЧ.Периодичность КАК Периодичность,
		|	ДанныеТЧ1.Разрез КАК ДопРазрез,
		|	ДанныеТЧ1.НомерСтроки КАК НомерСтрокиДопРазреза
		|ИЗ
		|	ДанныеТЧ КАК ДанныеТЧ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТЧ КАК ДанныеТЧ1
		|		ПО ДанныеТЧ.НомерСтроки = ДанныеТЧ1.Родитель";
	Запрос.УстановитьПараметр("ДанныеТЧ", Объект.ЭлементыСхемы.Выгрузить());
	
	ДанныеЭлементовСхемы = Запрос.Выполнить().Выгрузить();
	
	// Поиск и добавление корня дерева:
	ПараметрыОтбора = Новый Структура("Родитель", 0);
	СтрокиКорня = ДанныеЭлементовСхемы.НайтиСтроки(ПараметрыОтбора);
	
	СтрокаДерева = ДеревоСхемыДЗ.Строки.Добавить();
	ДанныеЗаполнения = Новый Структура("НомерСтроки, Разрез", СтрокиКорня[0].НомерСтроки, СтрокиКорня[0].Разрез);
	
	ЗаполнитьСтрокуДереваСхемы(СтрокаДерева, ДанныеЗаполнения, ДанныеЭлементовСхемы, ДеревоСхемыДЗ);
	
	ЗначениеВРеквизитФормы(ДеревоСхемыДЗ, "ДеревоСхемы");
	
КонецПроцедуры

&НаСервере
Функция ЭтоТипИерархии(ДопРазрез)
	
	Возврат Справочники.CRM_СхемаПланаПродаж.ЭтоТипИерархии(ДопРазрез);
	
КонецФункции

&НаСервере
Функция ЭтоПериодичность(ДопРазрез)
	
	Возврат Справочники.CRM_СхемаПланаПродаж.ЭтоПериодичность(ДопРазрез);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуДереваСхемы(СтрокаДерева, ДанныеЗаполнения, ДанныеЭлементовСхемы, ДеревоСхемыДЗ)
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПодчинения = Неопределено;
	
	СтрокаДерева.Разрез1 = ДанныеЗаполнения.Разрез;
		
	// получение доп. аналитики данного уровня, а также подчиненной иерархии:
	ПараметрыОтбора = Новый Структура("НомерСтроки", ДанныеЗаполнения.НомерСтроки);
	ДопДанныеЭлементаСхемы = ДанныеЭлементовСхемы.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаТЗ Из ДопДанныеЭлементаСхемы Цикл
		
		СтрокаДерева.Периодичность = СтрокаТЗ.Периодичность; // возможна избыточная перезапись одним и тем же значением,
															// однако положение данной строки гарантирует, что в случае
															// отсутствия доп. разрезов - Периодичность будет заполнена
		
		Если Не ЗначениеЗаполнено(СтрокаТЗ.ДопРазрез) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоТипИерархии(СтрокаТЗ.ДопРазрез) Тогда // это иерархия
			СтрокаПодчинения = СтрокаДерева.Строки.Добавить();
			ДанныеЗаполнения.НомерСтроки = СтрокаТЗ.НомерСтрокиДопРазреза;
			ДанныеЗаполнения.Разрез = СтрокаТЗ.ДопРазрез;
		Иначе
			Если НЕ ЗначениеЗаполнено(СтрокаДерева.Разрез2) Тогда
				СтрокаДерева.Разрез2 = СтрокаТЗ.ДопРазрез;
			Иначе
				СтрокаДерева.Разрез3 = СтрокаТЗ.ДопРазрез;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСтрокуДереваСхемы(СтрокаПодчинения, ДанныеЗаполнения, ДанныеЭлементовСхемы, ДеревоСхемыДЗ);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСхемыВОбъект(Отказ)
	
	Объект.ЭлементыСхемы.Очистить();
	
	ДеревоСхемыДЗ = РеквизитФормыВЗначение("ДеревоСхемы");
	
	КолонкиДЗ = ДеревоСхемыДЗ.Колонки;
	
	НомерСтрокиРодителя = 0;
	ИдентификаторУровняСхемы = 0;
	ПредыдПериодичность = Неопределено;
	
	ЗаполнитьТЧПоДеревуЗначений(Отказ, ДеревоСхемыДЗ.Строки, НомерСтрокиРодителя, КолонкиДЗ,
		 ИдентификаторУровняСхемы,
		 ПредыдПериодичность);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧПоДеревуЗначений(Отказ, Строки, НомерСтрокиРодителя, КолонкиДЗ,
	 ИдентификаторУровняСхемы,
	 ПредыдПериодичность)
	
	СчСтрок = 0;
	Для Каждого СтрокаДерева Из Строки Цикл
		
		СчСтрок = СчСтрок + 1;
		Если СчСтрок > 1 Тогда
			ОбщегоНазначения.СообщитьПользователю(
							НСтр("ru = 'Ошибка заполнения табличной части ЭлементыСхемы. На одном или более уровнях схемы введено более одной строки'"), , , , Отказ);
			Прервать;
		КонецЕсли;
		
		ИдентификаторУровняСхемы = ИдентификаторУровняСхемы + 1; // нумерация с 1
		ИерархияЗаполнена = Ложь;
		
		Для Каждого Колонка Из КолонкиДЗ Цикл
			
			Если ЭтоПериодичность(СтрокаДерева[Колонка.Имя]) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДерева[Колонка.Имя]) Тогда
				
				НС = Объект.ЭлементыСхемы.Добавить();
				НС.ИдентификаторУровня = ИдентификаторУровняСхемы;
				НС.Разрез = СтрокаДерева[Колонка.Имя];
				
				РазрезЭтоТипИерархии = ЭтоТипИерархии(НС.Разрез);
				
				НС.Периодичность = СтрокаДерева["Периодичность"];
				Если Не ПериодичностьКорректна(НС.Периодичность, ПредыдПериодичность) Тогда
					
					Отказ = Истина;
					Если РазрезЭтоТипИерархии Тогда // для избежания дублирования сообщения об ошибке
						СообщениеОшибкаПериодичности = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Ошибка заполнения табличной части ЭлементыСхемы. Нижеследующая периодичность %1 больше вышестоящей %2'"),
							НС.Периодичность, ПредыдПериодичность);
						ОбщегоНазначения.СообщитьПользователю(СообщениеОшибкаПериодичности);
					КонецЕсли;
					
				КонецЕсли;
				
				ПредыдПериодичность = НС.Периодичность;
				
				Если Не ЗначениеЗаполнено(НС.Периодичность) Тогда
					
					Отказ = Истина;
					Если РазрезЭтоТипИерархии Тогда // для избежания дублирования сообщения об ошибке
						ОбщегоНазначения.СообщитьПользователю(
								НСтр("ru = 'Ошибка заполнения табличной части ЭлементыСхемы. В одной или более строк не заполнена Периодичность'"));
					КонецЕсли;
							
				КонецЕсли;
				
				Если РазрезЭтоТипИерархии Тогда
					НС.Родитель = НомерСтрокиРодителя;
					НомерСтрокиРодителя = НС.НомерСтроки;
					ИерархияЗаполнена = Истина;
				Иначе
					Если Не ИерархияЗаполнена Тогда
						ОбщегоНазначения.СообщитьПользователю(
							НСтр("ru = 'Ошибка заполнения табличной части ЭлементыСхемы. Элемент иерархии должен идти раньше доп. разрезов'"), , , , Отказ);
					КонецЕсли;
					НС.Родитель = НомерСтрокиРодителя;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьТЧПоДеревуЗначений(Отказ, СтрокаДерева.Строки, НомерСтрокиРодителя, КолонкиДЗ,
			 ИдентификаторУровняСхемы,
			 ПредыдПериодичность);
		
	КонецЦикла;
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПериодичностьКорректна(Периодичность, ПредыдПериодичность)
	
	Если НЕ (ЗначениеЗаполнено(Периодичность) И ЗначениеЗаполнено(ПредыдПериодичность)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивПериодичности = Новый Массив;
	МассивПериодичности.Добавить(Перечисления.Периодичность.Год);
	МассивПериодичности.Добавить(Перечисления.Периодичность.Полугодие);
	МассивПериодичности.Добавить(Перечисления.Периодичность.Квартал);
	МассивПериодичности.Добавить(Перечисления.Периодичность.Месяц);
	МассивПериодичности.Добавить(Перечисления.Периодичность.Декада);
	МассивПериодичности.Добавить(Перечисления.Периодичность.Неделя);
	МассивПериодичности.Добавить(Перечисления.Периодичность.День);
	
	Возврат МассивПериодичности.Найти(Периодичность) >= МассивПериодичности.Найти(ПредыдПериодичность);
	
КонецФункции

&НаКлиенте
Функция МассивИспользованныхТиповАналитик(ТекущаяАналитика = Неопределено, КоличествоДопАналитик)
	
	ВыходнойМассив = Новый Массив;
	
	МассивИспользованныхТиповАналитикРекурсия(ДеревоСхемы, ВыходнойМассив, КоличествоДопАналитик);
	
	Если ЗначениеЗаполнено(ТекущаяАналитика) Тогда
		ИндексТекущейАналитики = ВыходнойМассив.Найти(ТекущаяАналитика);
		Если ИндексТекущейАналитики <> Неопределено Тогда
			ВыходнойМассив.Удалить(ИндексТекущейАналитики);
			КоличествоДопАналитик = КоличествоДопАналитик - 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВыходнойМассив;
	
КонецФункции

&НаКлиенте
Процедура МассивИспользованныхТиповАналитикРекурсия(Дерево, ВыходнойМассив, КоличествоДопАналитик)
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		
		Если ЗначениеЗаполнено(Строка.Разрез2) Тогда
			ВыходнойМассив.Добавить(Строка.Разрез2);
			Если ОсновныеАналитики.НайтиПоЗначению(Строка.Разрез2) = Неопределено Тогда
				КоличествоДопАналитик = КоличествоДопАналитик + 1;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.Разрез3) Тогда
			ВыходнойМассив.Добавить(Строка.Разрез3);
			Если ОсновныеАналитики.НайтиПоЗначению(Строка.Разрез3) = Неопределено Тогда
				КоличествоДопАналитик = КоличествоДопАналитик + 1;
			КонецЕсли;
		КонецЕсли;
		
		МассивИспользованныхТиповАналитикРекурсия(Строка, ВыходнойМассив, КоличествоДопАналитик);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция МассивДоступныхПериодичностей(ТекущаяПериодичность = Неопределено)
	
	Результат = Новый Массив;
	
	МассивПериодичностей = CRM_ПланированиеПродаж.МассивПериодичностей();
	
	ВСхемеЕстьСтроки = (ДеревоСхемы.ПолучитьЭлементы().Количество() > 0);
	
	Сч = МассивПериодичностей.Количество() - 1;
	Пока Сч >= 0 Цикл
		
		ЭлМассива = МассивПериодичностей[Сч];
		
		Сч = Сч - 1;
		
		Если ВСхемеЕстьСтроки И НЕ ТекущаяПериодичность = Неопределено Тогда
			Если CRM_ПланированиеПродаж.ПериодичностьАДетальнееБ(ЭлМассива, ТекущаяПериодичность)
					ИЛИ ЭлМассива = ТекущаяПериодичность Тогда
				Результат.Добавить(ЭлМассива);
			КонецЕсли;
		Иначе
			Результат.Добавить(ЭлМассива); // Переворот массива
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
