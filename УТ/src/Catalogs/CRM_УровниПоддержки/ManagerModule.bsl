
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает описание данных обращения.
//
//	Возвращаемое значение:
//		ТаблицаЗначений - описание данных обращения.
//
Функция ОписаниеДанныхОбращения() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеПолей = Новый ТаблицаЗначений;
	
	ОписаниеПолей.Колонки.Добавить("Ключ", ОбщегоНазначения.ОписаниеТипаСтрока(36), НСтр("ru = 'Ключ'"));
	
	СтандартныеРеквизитыОбращения = Метаданные.Документы.CRM_Интерес.СтандартныеРеквизиты;
	Для Каждого Реквизит Из СтандартныеРеквизитыОбращения Цикл
		Если Реквизит.Имя = "Дата" Тогда
			ОписаниеПолей.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип, Реквизит.Представление());
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	МетаданныеРеквизиты = Метаданные.Документы.CRM_Интерес.Реквизиты;
	
	РеквизитыОбращения = Новый Массив;
	РеквизитыОбращения.Добавить(МетаданныеРеквизиты.ТипОбращения);
	РеквизитыОбращения.Добавить(МетаданныеРеквизиты.КонтактноеЛицо);
	РеквизитыОбращения.Добавить(МетаданныеРеквизиты.Организация);
	РеквизитыОбращения.Добавить(МетаданныеРеквизиты.Ответственный);
	РеквизитыОбращения.Добавить(МетаданныеРеквизиты.Партнер);
	РеквизитыОбращения.Добавить(МетаданныеРеквизиты.Подразделение);
	РеквизитыОбращения.Добавить(МетаданныеРеквизиты.Проект);
	РеквизитыОбращения.Добавить(МетаданныеРеквизиты.ТипУслуги);
	
	Для Каждого Реквизит Из РеквизитыОбращения Цикл
		ОписаниеПолей.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип, Реквизит.Представление());
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Свойства.Ссылка КАК Свойство,
	|	Свойства.ТипЗначения КАК ТипЗначения,
	|	Свойства.Представление КАК Заголовок
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойства
	|ГДЕ
	|	Свойства.Ссылка В(&СвойстваОбращения)");
	
	СвойстваОбращения = УправлениеСвойствами.СвойстваОбъекта(Документы.CRM_Интерес.ПустаяСсылка());
	Запрос.Параметры.Вставить("СвойстваОбращения", СвойстваОбращения);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИмяСвойства = "Свойство_" + СтрЗаменить(ВРег(Строка(Выборка.Свойство.УникальныйИдентификатор())), "-", "x"); 
		ОписаниеПолей.Колонки.Добавить(ИмяСвойства, Выборка.ТипЗначения, Выборка.Заголовок);
	КонецЦикла;
	
	Возврат ОписаниеПолей;
	
КонецФункции

// Возвращает данные уровня поддержки.
//
// Параметры:
//  ДанныеОбращения	 - ТаблицаЗначений - данные обращения.
//
//	Возвращаемое значение:
//		Структура - данные уровня поддержки.
//
Функция ДанныеУровняПоддержки(ДанныеОбращения) Экспорт
	
	Схема = Справочники.CRM_УровниПоддержки.ПолучитьСхемуКомпоновки(ДанныеОбращения);
	
	АдресСхемы = ПоместитьВоВременноеХранилище(Схема, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ЗапросУровниПоддержки = Новый Запрос(
	"ВЫБРАТЬ
	|	УровниПоддержки.Ссылка КАК Уровень,
	|	УровниПоддержки.Отбор КАК Отбор,
	|	УровниПоддержки.ВремяРеакции КАК ВремяРеакции,
	|	УровниПоддержки.ВремяРешения КАК ВремяРешения,
	|	УровниПоддержки.Календарь КАК Календарь,
	|	УровниПоддержки.РежимРаботы КАК РежимРаботы
	|ИЗ
	|	Справочник.CRM_УровниПоддержки КАК УровниПоддержки
	|ГДЕ
	|	УровниПоддержки.Используется
	|
	|УПОРЯДОЧИТЬ ПО
	|	УровниПоддержки.Порядок");
	
	Выборка = ЗапросУровниПоддержки.Выполнить().Выбрать();
	
	УровеньПоддержкиПоУмолчанию = Справочники.CRM_УровниПоддержки.ПоУмолчанию;
	ДанныеУровняПоддержки = Новый Структура("Уровень,ВремяРеакции,ВремяРешения,Календарь,РежимРаботы");
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Уровень = УровеньПоддержкиПоУмолчанию Тогда
			ЗаполнитьЗначенияСвойств(ДанныеУровняПоддержки, Выборка);
			Прервать;
		КонецЕсли;
		
		Отбор = Выборка.Отбор.Получить();
		Если ТипЗнч(Отбор) <> Тип("ОтборКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПроверитьУсловиеОтбора(Схема, Настройки, Отбор, ДанныеОбращения) Тогда
			ЗаполнитьЗначенияСвойств(ДанныеУровняПоддержки, Выборка);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеУровняПоддержки;
	
КонецФункции

// Возвращает сроки по уровню поддержки.
//
// Параметры:
//  ДатаОбращения	 - Дата - дата обращения.
//  УровеньПоддержки - СправочникСсылка.CRM_УровниПоддержки - уровень поддержки.
//  ОбращениеСсылка	 - ДокументСсылка.CRM_Интерес - обращение.
//
//	Возвращаемое значение:
//		Структура - сроки по уровню поддержки.
//
Функция СрокиПоУровнюПоддержки(ДатаОбращения, УровеньПоддержки, ОбращениеСсылка = Неопределено) Экспорт
	
	РезультатРасчета = Новый Структура("СрокРеакции,СрокРешения");
	
	// Параметры расчета.
	ДанныеУровняПоддержки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		УровеньПоддержки, "ВремяРеакции,ВремяРешения,Календарь,РежимРаботы");
	
	ДанныеРежимаРаботы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДанныеУровняПоддержки.РежимРаботы, "ВремяСекунды,ПериодыРаботы");
	
	ДатаГрафика = НачалоДня(ДатаОбращения);
	
	ПериодыРаботы = ДанныеРежимаРаботы.ПериодыРаботы.Выгрузить();
	
	ВремяВОжидании = 0;
	Если ЗначениеЗаполнено(ОбращениеСсылка) Тогда
		ВремяВОжидании = РабочееВремяВОжидании(ОбращениеСсылка, ДанныеУровняПоддержки.Календарь, ДанныеРежимаРаботы);
	КонецЕсли;
	
	ВремяРеакции = ДанныеУровняПоддержки.ВремяРеакции * 60 * 60;
	ВремяРешения = ДанныеУровняПоддержки.ВремяРешения * 60 * 60 + ВремяВОжидании;
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ДатаГрафика",	ДатаГрафика);
	Запрос.Параметры.Вставить("Календарь",		ДанныеУровняПоддержки.Календарь);
	Запрос.Параметры.Вставить("ВремяСекунды",	ДанныеРежимаРаботы.ВремяСекунды);
	
	// Вычисление времени, приходящегося на первый день.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КалендарныеГрафики.ДеньВключенВГрафик КАК ДеньВключенВГрафик
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Календарь = &Календарь
	|	И КалендарныеГрафики.ДатаГрафика = &ДатаГрафика";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПервыйДеньРабочий = Ложь;
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ПервыйДеньРабочий = Выборка.ДеньВключенВГрафик;
	КонецЕсли;
	
	ВремяРеакцииПервыйДень = 0;
	ВремяРешенияПервыйДень = 0;
	Если ПервыйДеньРабочий Тогда
		Результат = РаспределитьВремяНаПериоды(ДатаОбращения, ВремяРеакции, ПериодыРаботы);
		Если Результат.Время = ВремяРеакции Тогда
			РезультатРасчета.СрокРеакции = Результат.Дата;
		Иначе
			ВремяРеакцииПервыйДень = Результат.Время;
		КонецЕсли;
		Результат = РаспределитьВремяНаПериоды(ДатаОбращения, ВремяРешения, ПериодыРаботы);
		Если Результат.Время = ВремяРешения Тогда
			РезультатРасчета.СрокРешения = Результат.Дата;
		Иначе
			ВремяРешенияПервыйДень = Результат.Время;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатРасчета.СрокРеакции) И ЗначениеЗаполнено(РезультатРасчета.СрокРешения) Тогда
		Возврат РезультатРасчета;
	КонецЕсли;
	
	// Запрос поиска последнего дня по графику.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика,
	|	&ВремяСекунды КАК ВремяСекунды
	|ПОМЕСТИТЬ ГрафикРаботы
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Календарь = &Календарь
	|	И КалендарныеГрафики.ДеньВключенВГрафик
	|	И КалендарныеГрафики.ДатаГрафика > &ДатаГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ДатаГрафика КАК ДатаГрафика,
	|	&ВремяПервыйДень КАК ВремяСекунды
	|ПОМЕСТИТЬ РабочееВремяПоГрафику
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГрафикРаботы.ДатаГрафика,
	|	ГрафикРаботы.ВремяСекунды
	|ИЗ
	|	ГрафикРаботы КАК ГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РабочееВремяПоГрафику1.ДатаГрафика КАК ДатаГрафика,
	|	РабочееВремяПоГрафику1.ВремяСекунды КАК ВремяСекунды,
	|	СУММА(РабочееВремяПоГрафику2.ВремяСекунды) КАК НакопленноеВремяСекунды
	|ИЗ
	|	РабочееВремяПоГрафику КАК РабочееВремяПоГрафику1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РабочееВремяПоГрафику КАК РабочееВремяПоГрафику2
	|		ПО (РабочееВремяПоГрафику2.ДатаГрафика <= РабочееВремяПоГрафику1.ДатаГрафика)
	|
	|СГРУППИРОВАТЬ ПО
	|	РабочееВремяПоГрафику1.ДатаГрафика,
	|	РабочееВремяПоГрафику1.ВремяСекунды
	|
	|ИМЕЮЩИЕ
	|	СУММА(РабочееВремяПоГрафику2.ВремяСекунды) >= &ВремяВсего
	|
	|УПОРЯДОЧИТЬ ПО
	|	РабочееВремяПоГрафику1.ДатаГрафика";
	
	Если Не ЗначениеЗаполнено(РезультатРасчета.СрокРеакции) Тогда
		
		Запрос.Параметры.Вставить("ВремяПервыйДень", ВремяРеакцииПервыйДень);
		Запрос.Параметры.Вставить("ВремяВсего", ВремяРеакции);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ВсегоРаспределить = ВремяРеакции - (Выборка.НакопленноеВремяСекунды - Выборка.ВремяСекунды);
			Результат = РаспределитьВремяНаПериоды(Выборка.ДатаГрафика, ВсегоРаспределить, ПериодыРаботы);
			РезультатРасчета.СрокРеакции = Результат.Дата;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатРасчета.СрокРешения) Тогда
		
		Запрос.Параметры.Вставить("ВремяПервыйДень", ВремяРешенияПервыйДень);
		Запрос.Параметры.Вставить("ВремяВсего", ВремяРешения);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ВсегоРаспределить = ВремяРешения - (Выборка.НакопленноеВремяСекунды - Выборка.ВремяСекунды);
			Результат = РаспределитьВремяНаПериоды(Выборка.ДатаГрафика, ВсегоРаспределить, ПериодыРаботы);
			РезультатРасчета.СрокРешения = Результат.Дата;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатРасчета;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьСхемуКомпоновки(ОписаниеПолей = Неопределено) Экспорт
	
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновки.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	Наборданных.ИсточникДанных = ИсточникДанных.Имя;
	НаборДанных.Имя = "ДанныеОбращения";
	Наборданных.ИмяОбъекта = "ДанныеОбращения";
	
	Если ОписаниеПолей = Неопределено Тогда
		ОписаниеПолей = ОписаниеДанныхОбращения();
	КонецЕсли;
	Для Каждого Поле Из ОписаниеПолей.Колонки Цикл
		ПолеНабора = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабора.Заголовок	= Поле.Заголовок;
		ПолеНабора.Поле			= Поле.Имя;
		ПолеНабора.ПутьКДанным	= Поле.Имя;
		ПолеНабора.ТипЗначения	= Поле.ТипЗначения;
		Если Поле.Имя = "Ключ" Тогда
			ПолеНабора.ОграничениеИспользования.Условие = Истина;
		КонецЕсли;
	КонецЦикла;
	
	НастройкиКомпоновки = СхемаКомпоновки.ВариантыНастроек[0].Настройки;
	
	ВыбранноеПоле = НастройкиКомпоновки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Ключ");
	
	Группировка = НастройкиКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	Возврат СхемаКомпоновки;
	
КонецФункции

Процедура СкопироватьОтборКомпоновкиДанных(ОтборПриемник, ОтборИсточник) Экспорт
	
	Для Каждого ЭлементОтбора Из ОтборИсточник.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ДобавитьВОтборЭлементОтбора(ОтборПриемник, ЭлементОтбора);
		Иначе
			ДобавитьВОтборГруппуЭлементовОтбора(ОтборПриемник, ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РабочееВремяВОжидании(Обращение, Календарь, ДанныеРежимаРаботы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПериодыРаботы = ДанныеРежимаРаботы.ПериодыРаботы.Выгрузить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИсторияСостояний.Период КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ИсторияСостояний.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ТекущаяДата
	|		ИНАЧЕ ИсторияСостояний.ДатаЗавершения
	|	КОНЕЦ КАК ДатаОкончания,
	|	НАЧАЛОПЕРИОДА(ИсторияСостояний.Период, ДЕНЬ) КАК ДатаНачалаДень,
	|	НАЧАЛОПЕРИОДА(ИсторияСостояний.ДатаЗавершения, ДЕНЬ) КАК ДатаОкончанияДень
	|ПОМЕСТИТЬ ПериодыОжидания
	|ИЗ
	|	РегистрСведений.CRM_ИсторияСостоянийОбращений КАК ИсторияСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_СостоянияИнтересов КАК СостоянияОбращений
	|		ПО ИсторияСостояний.Состояние = СостоянияОбращений.Ссылка
	|			И (СостоянияОбращений.КатегорияСостояния = ЗНАЧЕНИЕ(Перечисление.CRM_КатегорииСостоянийПоддержки.ВОжидании))
	|			И (ИсторияСостояний.Обращение = &Обращение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыОжидания.ДатаНачала КАК ДатаНачала,
	|	ПериодыОжидания.ДатаОкончания КАК ДатаОкончания,
	|	КалендарныеГрафики.ДатаГрафика = ПериодыОжидания.ДатаНачалаДень КАК ЭтоДатаНачала,
	|	КалендарныеГрафики.ДатаГрафика = ПериодыОжидания.ДатаОкончанияДень КАК ЭтоДатаОкончания
	|ИЗ
	|	ПериодыОжидания КАК ПериодыОжидания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|		ПО (КалендарныеГрафики.Календарь = &Календарь)
	|			И (КалендарныеГрафики.ДеньВключенВГрафик)
	|			И (КалендарныеГрафики.ДатаГрафика МЕЖДУ ПериодыОжидания.ДатаНачалаДень И ПериодыОжидания.ДатаОкончанияДень)");
	
	Запрос.Параметры.Вставить("Обращение", Обращение);
	Запрос.Параметры.Вставить("Календарь", Календарь);
	Запрос.Параметры.Вставить("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	РабочееВремя = 0;
	
	ПериодыОжидания = РезультатЗапроса.Выгрузить();
	Для Каждого ДанныеПериода Из ПериодыОжидания Цикл
		
		Если ДанныеПериода.ЭтоДатаНачала И ДанныеПериода.ЭтоДатаОкончания Тогда
			ДатаНачала = ДанныеПериода.ДатаНачала;
			ДатаОкончания = ДанныеПериода.ДатаОкончания;
		ИначеЕсли ДанныеПериода.ЭтоДатаНачала Тогда
			ДатаНачала = ДанныеПериода.ДатаНачала;
			ДатаОкончания = КонецДня(ДанныеПериода.ДатаНачала) + 1;
		Иначе
			ДатаНачала = НачалоДня(ДанныеПериода.ДатаОкончания);
			ДатаОкончания = ДанныеПериода.ДатаОкончания;
		КонецЕсли;
			
		Если ДанныеПериода.ЭтоДатаНачала Или ДанныеПериода.ЭтоДатаОкончания Тогда
			РабочееВремя = РабочееВремя + ПолучитьВремяВПериодах(ДатаНачала, ДатаОкончания, ПериодыРаботы);
		Иначе
			РабочееВремя = РабочееВремя + ДанныеРежимаРаботы.ВремяСекунды;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РабочееВремя;
	
КонецФункции

Функция ПроверитьУсловиеОтбора(Схема, Настройки, Отбор, ДанныеОбращения)
	
	Настройки.Отбор.Элементы.Очистить();
	СкопироватьОтборКомпоновкиДанных(Настройки.Отбор, Отбор);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , ,
		 Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	НаборыДанных = Новый Структура;
	НаборыДанных.Вставить("ДанныеОбращения", ДанныеОбращения);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, НаборыДанных);
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	ПроцессорВыводаРезультата = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаРезультата.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВыводаРезультата.Вывести(ПроцессорКомпоновки);
	
	Возврат (ТаблицаРезультат.Количество() > 0);
	
КонецФункции

Процедура ДобавитьВОтборЭлементОтбора(ОтборПриемник, ЭлементОтбора)
	НовыйЭлемент = ОтборПриемник.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементОтбора);
КонецПроцедуры

Процедура ДобавитьВОтборГруппуЭлементовОтбора(ОтборПриемник, ГруппаЭлементов)
	
	НоваяГруппа = ОтборПриемник.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ЗаполнитьЗначенияСвойств(НоваяГруппа, ГруппаЭлементов);
	
	Для Каждого ЭлементОтбора Из ГруппаЭлементов.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ДобавитьВОтборЭлементОтбора(НоваяГруппа, ЭлементОтбора);
		Иначе
			ДобавитьВОтборГруппуЭлементовОтбора(НоваяГруппа, ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РаспределитьВремяНаПериоды(ДатаСобытия, ВсегоРаспределить, ПериодыРаботы)
	
	Результат = Новый Структура;
	Результат.Вставить("Дата", ДатаСобытия);
	Результат.Вставить("Время", ВсегоРаспределить);
	
	ОсталосьРаспределить = ВсегоРаспределить;
	
	Для Каждого СтрокаПериода Из ПериодыРаботы Цикл
		
		РаспределеноНаПериод = 0;
		ДатаНачалаПериода = НачалоДня(ДатаСобытия) + СтрокаПериода.ВремяНачалаСекунды;
		ДатаОкончанияПериода = НачалоДня(ДатаСобытия) + СтрокаПериода.ВремяОкончанияСекунды;
		
		Если ДатаОкончанияПериода > ДатаСобытия И ОсталосьРаспределить > 0 Тогда
			РаспределеноНаПериод = Мин(ОсталосьРаспределить, ДатаОкончанияПериода - Макс(ДатаСобытия, ДатаНачалаПериода));
			ОсталосьРаспределить = ОсталосьРаспределить - РаспределеноНаПериод;
		КонецЕсли;
		
		Если ОсталосьРаспределить = 0 Тогда
			Результат.Дата = Макс(ДатаСобытия, ДатаНачалаПериода) + РаспределеноНаПериод;
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Дата = ДатаОкончанияПериода;
	Результат.Время = ВсегоРаспределить - ОсталосьРаспределить;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВремяВПериодах(ДатаНачала, ДатаОкончания, ПериодыРаботы)
	
	ВсегоВремя = 0;
	
	Для Каждого СтрокаПериода Из ПериодыРаботы Цикл
		
		ДатаНачалаПериода = НачалоДня(ДатаНачала) + СтрокаПериода.ВремяНачалаСекунды;
		ДатаОкончанияПериода = НачалоДня(ДатаНачала) + СтрокаПериода.ВремяОкончанияСекунды;
		
		Если ДатаНачала >= ДатаОкончанияПериода Или ДатаОкончания <= ДатаНачалаПериода Тогда
			Продолжить;
		КонецЕсли;
		
		ВсегоВремя = ВсегоВремя + (Мин(ДатаОкончания, ДатаОкончанияПериода) - Макс(ДатаНачала, ДатаНачалаПериода));
		
	КонецЦикла;
	
	Возврат ВсегоВремя;
	
КонецФункции

// Обновление информационной базы.

Процедура ЗаполнитьПредопределенныеДанные(Параметры = Неопределено) Экспорт
	
	// Поиск или создание календаря.
	ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	Календарь = Справочники.Календари.НайтиПоРеквизиту("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
	Если Не ЗначениеЗаполнено(Календарь) Тогда
		Обработки.ЗаполнениеГрафиковРаботы.СоздатьКалендарьПятидневкаРоссийскойФедерации();
		Календарь = Справочники.Календари.НайтиПоРеквизиту("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
	КонецЕсли;
	
	НаименованиеРежимРаботы = НСтр("ru = '09:00 - 18:00'");	
	РежимРаботы = Справочники.CRM_РежимыРаботы.НайтиПоНаименованию(НаименованиеРежимРаботы, Истина);
	
	Если НЕ ЗначениеЗаполнено(РежимРаботы) Тогда
	
		// Создание режима работы.
		РежимРаботыОбъект = Справочники.CRM_РежимыРаботы.СоздатьЭлемент();
		РежимРаботыОбъект.Наименование = НаименованиеРежимРаботы;
		РежимРаботыОбъект.ВремяСекунды = 28800;
		
		ПериодРаботы = РежимРаботыОбъект.ПериодыРаботы.Добавить();
		ПериодРаботы.ВремяНачала			= '0001-01-01 09:00:00';
		ПериодРаботы.ВремяОкончания			= '0001-01-01 13:00:00';
		ПериодРаботы.ВремяНачалаСекунды		= 32400;
		ПериодРаботы.ВремяОкончанияСекунды	= 46800;
		
		ПериодРаботы = РежимРаботыОбъект.ПериодыРаботы.Добавить();
		ПериодРаботы.ВремяНачала			= '0001-01-01 14:00:00';
		ПериодРаботы.ВремяОкончания			= '0001-01-01 18:00:00';
		ПериодРаботы.ВремяНачалаСекунды		= 50400;
		ПериодРаботы.ВремяОкончанияСекунды	= 64800;
		
		РежимРаботыОбъект.Записать();
		РежимРаботы = РежимРаботыОбъект.Ссылка;
		
	КонецЕсли;
	
	// Заполнение данных.
	УровеньПоУмолчанию = ПоУмолчанию.ПолучитьОбъект();
	УровеньПоУмолчанию.ВремяРеакции = 8;
	УровеньПоУмолчанию.ВремяРешения = 16;
	УровеньПоУмолчанию.Календарь = Календарь;
	УровеньПоУмолчанию.РежимРаботы = РежимРаботы;
	УровеньПоУмолчанию.ОтборСтрока = НСтр("ru = 'Применяется, когда остальные условия не выполнены'");
	УровеньПоУмолчанию.Порядок = 99999;
	УровеньПоУмолчанию.Используется = Истина;
	УровеньПоУмолчанию.Записать();
	
	Если Параметры <> Неопределено Тогда
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
