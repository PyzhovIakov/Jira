
#Область ОписаниеПеременных

&НаКлиенте
Перем ТекущаяПозицияHTML;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РежимРасчетаСроков = Число(Объект.РежимВводаОтЗадачи);
	// Вставим верхнюю строку дерева этапов
	Если ДеревоМодели.ПолучитьЭлементы().Количество() = 0 Тогда
		СтрокаДерева = ДеревоМодели.ПолучитьЭлементы().Добавить();
		СтрокаДерева.ИндексКартинки = -1;
		ПустойШаблонПакета = Справочники.CRM_ШаблоныЭтаповПроектов.ПустаяСсылка();
	КонецЕсли;
	
	CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстШаблонаHTML);
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ИзменитьУсловноеОформлениеКорняДерева();
		
		табВложения = ПолучитьПрикрепленныеФайлы();
		
		СтруктураФайлов = Новый Структура;
		
		Если табВложения.Количество() > 0 Тогда
			
			Для Каждого Стр Из табВложения Цикл
				
				Попытка
					// +CRM
					ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(Стр.Ссылка);
					Если ДвоичныеДанные = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					// -CRM
					СтруктураФайлов.Вставить(Стр.Наименование, Новый Картинка(ДвоичныеДанные)); 
				Исключение
					Продолжить;
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Объект.CRM_КомментарийHTML) Тогда
			ФорматированныйДокументТекст.УстановитьHTML(Объект.CRM_КомментарийHTML, СтруктураФайлов);
		ИначеЕсли НЕ ПустаяСтрока(Объект.Комментарий) Тогда
			HTMLТекст = CRM_ОбщегоНазначенияКлиентСервер.ПреобразоватьТекстВHTML(Объект.Комментарий);
			ФорматированныйДокументТекст.УстановитьHTML(HTMLТекст, СтруктураФайлов);
		КонецЕсли;
	Иначе
		КалендарныеГрафикиПриЧтенииСозданииНаСервере();
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ЗначениеКопирования = Параметры.ЗначениеКопирования;
			ТекстШаблонаHTML = CRM_Взаимодействия.ВставитьТекстВТекстПисьмаHTML(
				Неопределено, ЗначениеКопирования.CRM_КомментарийHTML, ЗначениеКопирования, Истина, УникальныйИдентификатор, ИдентификаторыКартинокШаблона);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.СтраницыОтображенияГрафиков.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;

	ЗаполнитьСписокКолонокКалендарногоГрафикаНаСервере();
	
	СформироватьПредставлениеВложений();
	
	АвтоЗаголовок = Ложь;
	Если ЗначениеЗаполнено(Объект.Наименование) Тогда
		Заголовок = Объект.Наименование;
	Иначе
		Заголовок = НСтр("ru='Новый шаблон проекта...';en='New Project Template...'");
	КонецЕсли;
	СписокРедактируемыхКолонок.Добавить("ОтсрочкаСтартаДней");
	СписокРедактируемыхКолонок.Добавить("ОтсрочкаОтПредыдущейЗадачи");
	СписокРедактируемыхКолонок.Добавить("ПродолжительностьДней");
	
	РежимВводаОтЗадачиПриИзмененииНаСервере();
	
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	
	ОтображатьТаблицуВложений = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_Подписки",
		"ОтображатьТаблицуВложений", Ложь);
	Элементы.ГруппаВложения.Видимость = ОтображатьТаблицуВложений;
	Элементы.ГруппаСсылокИКомандВложений.Видимость = Не ОтображатьТаблицуВложений;
	
	Элементы.ГруппаДополнительное.Видимость = Ложь;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//CRM_РаботаСHTMLКлиент.ЗапомнитьПозициюHTML(Элементы.ТекстШаблонаHTML, ТекущаяПозицияHTML);
	
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
	
	Если ВсеВложенияПометка Тогда
		Элементы.Вложения.ОтборСтрок = Неопределено;
	Иначе
		Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьмаОтбор", "#");
	КонецЕсли;
	
	СформироватьСсылкиВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	HTMLДокумент = Элементы.ТекстШаблонаHTML.Документ;
	Если HTMLДокумент <> Неопределено Тогда
		ТекстШаблонаПередЗакрытием = HTMLДокумент.body.innerHTML;
		CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстШаблонаПередЗакрытием);
		Если ТекстШаблонаПередЗакрытием <> ТекстШаблонаПриОткрытии Тогда
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		СформироватьПредставлениеВложений();
		
	ИначеЕсли ИмяСобытия = "Запись_Файл"
		 И (ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_ШаблоныПроектовПрисоединенныеФайлы")
		ИЛИ ТипЗнч(Источник) = Тип("Массив") И Источник.Количество() > 0 И ТипЗнч(Источник[0]) = Тип("СправочникСсылка.CRM_ШаблоныПроектовПрисоединенныеФайлы")) Тогда
		СформироватьПредставлениеВложений();
		
	ИначеЕсли ИмяСобытия = "ПередИзменениемШаблонаЭтапаКалендарногоПлана" И Параметр = Объект.Ссылка Тогда
		Записать();
	ИначеЕсли ИмяСобытия = "ИзменениеШаблонаЭтапаКалендарногоПлана" И Параметр = Объект.Ссылка Тогда
		
		Если ЭтотОбъектИзменен() Тогда
			Прочитать();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПроверкаПравописания_ИзмененТекст" И Источник = ЭтотОбъект Тогда
		ТекстШаблонаHTML = Параметр.Текст;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.CRM_ФормированиеCсылкиНаОбъект") Тогда
		CRM_РаботаСHTMLКлиент.ВставитьСсылкуНаОбъект(Элементы.ТекстШаблонаHTML, ВыбранноеЗначение.Ссылка,
			ВыбранноеЗначение.ПредставлениеСсылки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЭтотОбъектИзменен()
	Возврат Объект.ВерсияДанных <> Объект.Ссылка.ВерсияДанных;
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Элементы.ПроверкаПравописания.Пометка Тогда
		ТекстШаблонаHTML = CRM_ПроверкаПравописанияКлиент.СкрытьОшибки(Элементы.ТекстШаблонаHTML);
	КонецЕсли;
	
	CRM_РаботаСHTMLКлиент.ЗапомнитьПозициюHTML(Элементы.ТекстШаблонаHTML, ТекущаяПозицияHTML);
	CRM_РаботаСHTMLКлиент.ЗаписатьHTML(Элементы.ТекстШаблонаHTML, КартинкиДобавленные, УникальныйИдентификатор);
	ТекстШаблонаHTMLПриЗаписи = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ТекстШаблонаHTML);
	
	#Если Не ВебКлиент Тогда
		Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
			Если СтрокаТаблицыВложений.Расположение = 2 Тогда
				Попытка
					Данные = Новый ДвоичныеДанные(СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере);
					СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(Данные, "");
					СтрокаТаблицыВложений.Расположение = 4;
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
						 , "Вложения", ,
						 Отказ);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.CRM_КолонкиКалендарногоГрафика = Новый ХранилищеЗначения(КолонкиКалендарногоГрафика);
	
	CRM_Взаимодействия.ОбработатьКартинкиHTMLПередЗаписью(ТекстШаблонаHTMLПриЗаписи,
		ИдентификаторыКартинокШаблона, КартинкиДобавленные, КартинкиУдаляемые);
	
	ТекущийОбъект.CRM_КомментарийHTML = ТекстШаблонаHTMLПриЗаписи;
	
	ТекущийОбъект.Комментарий = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекущийОбъект.CRM_КомментарийHTML);
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого УдаленнаяКартинка Из КартинкиУдаляемые Цикл
		ОбъектВложение = УдаленнаяКартинка.Значение.ПолучитьОбъект();
		ОбъектВложение.Удалить();
	КонецЦикла;
	КартинкиУдаляемые.Очистить();
	
	// Удалим удаленные вложения
	Для Каждого УдаленноеВложение Из УдаленныеВложения Цикл
		ОбъектВложение = УдаленноеВложение.Значение.ПолучитьОбъект();
		ОбъектВложение.Удалить();
	КонецЦикла;
	УдаленныеВложения.Очистить();
	
	// Создадим вложения для добавленных картинок.
	Для Каждого Строка Из КартинкиДобавленные Цикл
		
		ПараметрыВложения = Строка.Значение;
		
		ПрисоединенныйФайл = CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			ТекущийОбъект.Ссылка, ПараметрыВложения.АдресВоВременномХранилище, ПараметрыВложения);
		
		Если ПрисоединенныйФайл <> Неопределено Тогда
			ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
			ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = ПараметрыВложения.ИДФайлаЭлектронногоПисьма;
			ПрисоединенныйФайлОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	КартинкиДобавленные.Очистить();
	
	ЗаписатьВложения(ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключитьОбработчикОжидания("Подключаемый_Обновить", 0.3, Истина);
	
	ТекстШаблонаПриОткрытии = Элементы.ТекстШаблонаHTML.Документ.body.innerHTML; 
	CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстШаблонаПриОткрытии);
	
	Если Элементы.ПроверкаПравописания.Пометка Тогда
		ПроверяемыйТекст = Элементы.ТекстШаблонаHTML.Документ.documentElement.outerHTML;
		CRM_ПроверкаПравописанияКлиент.ПоказатьОшибки(ЭтотОбъект, Элементы.ТекстШаблонаHTML,
			 ТекстШаблонаHTML,
			 ПроверяемыйТекст);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьВложения();
	
	ТекстШаблонаHTML = CRM_Взаимодействия.ВставитьКартинкиВТекстHTML(
		ТекущийОбъект.CRM_КомментарийHTML,
		Объект.Ссылка,
		УникальныйИдентификатор,
		ИдентификаторыКартинокШаблона);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана") Тогда
		
		ДобавитьЭтапКонтрольнуюТочкуПослеЗаписиНового(НовыйОбъект);
		
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
		
		ДобавитьЭтапКонтрольнуюТочкуПослеЗаписиНового(НовыйОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	КалендарныеГрафикиПриЧтенииСозданииНаСервере();
	
	ПриСозданииИПриЧтенииНаСервере();
	
	ТекстШаблонаHTML = CRM_Взаимодействия.ВставитьКартинкиВТекстHTML(
		ТекущийОбъект.CRM_КомментарийHTML,
		Объект.Ссылка,
		УникальныйИдентификатор,
		ИдентификаторыКартинокШаблона);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если НЕ Настройки["ВсеВложенияПометка"] = Неопределено Тогда
		ВсеВложенияПометка	= Настройки["ВсеВложенияПометка"];
	Иначе
		ВсеВложенияПометка	= Ложь;
	КонецЕсли;
	Элементы.ФормаВсеВложения.Пометка	= ВсеВложенияПометка;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПеречитатьКолонкиКалендарногоГрафикаИзМакета(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеречитатьКолонкиКалендарногоГрафикаИзМакетаЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения,
		 НСтр("ru='Перечитать список колонок?';en='Re-read list of columns?'"),
		 РежимДиалогаВопрос.ОКОтмена); 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроект(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СозданныйПроект = Неопределено;
		CRM_УправлениеПроектамиВызовСервера.СоздатьПроектПоШаблону(Объект.Ссылка, СозданныйПроект);
		Если СозданныйПроект <> Неопределено Тогда
			ПодключитьОбработчикОжидания("ОткрытьСозданныйПроект", 0.1, Истина);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Шаблон не записан,
			| создание проекта невозможно!';en='Template is not recorded,
			| creation of project is impossible!'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлыЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура НаименованиеПриИзмененииНаСервере()
	ИзменитьУсловноеОформлениеКорняДерева();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Наименование) Тогда
		Заголовок = Объект.Наименование;
	Иначе
		Заголовок = НСтр("ru='Введите наименование...';en='Enter name...'"); 
	КонецЕсли;
	
	НаименованиеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблоныЭтаповНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьШаблоныЭтаповЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблоныЗадачНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьШаблоныЗадачЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

#Область РедакторHTML

&НаКлиенте
Процедура ВыполнитьКомандуСписка(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИмяКоманды = Сред(Элемент.Имя, 8);
	
	CRM_РаботаСHTMLКлиент.ВыполнитьHTMLКоманду(ЭтотОбъект, Элементы.ТекстШаблонаHTML, ИмяКоманды, ВыбранноеЗначение);
	
	ТекущийЭлемент = Элементы.ТекстШаблонаHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстШаблонаHTMLПриИзменении(Элемент)
	
	CRM_РаботаСHTMLКлиент.ПолеHTMLПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстШаблонаHTMLДокументСформирован(Элемент)
	
	ТекстШаблонаПриОткрытии = Элементы.ТекстШаблонаHTML.Документ.body.innerHTML; 
	CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстШаблонаПриОткрытии);
	
	CRM_РаботаСHTMLКлиент.ПолеHTMLДокументСформирован(ЭтотОбъект, Элемент, Истина);
	CRM_РаботаСHTMLКлиент.ВосстановитьПоложениеHTML(Элементы.ТекстШаблонаHTML, ТекущаяПозицияHTML);
	
	//Если УстановитьФокусНаТекстеПисьма Тогда
	//	Элементы.ТекстШаблонаHTML.Документ.Body.focus();
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТекстШаблонаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	CRM_РаботаСHTMLКлиент.ПолеHTMLПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
	Если Элементы.Найти("МенюГруппаВариантыЗамены") <> Неопределено 
		И ДанныеСобытия.Element.className = "mistake" Тогда
		НомерОшибки = Число(СтрЗаменить(ДанныеСобытия.Element.id, "mistake", ""));
		ТекстШаблонаHTMLПриНажатииНаСервере(НомерОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТекстШаблонаHTMLПриНажатииНаСервере(НомерОшибки)
	CRM_ПроверкаПравописанияСервер.ДобавитьВариантыЗаменыВКонтекстноеМеню(ЭтотОбъект, НомерОшибки);
КонецПроцедуры

#КонецОбласти // РедакторHTML

#Область ПроверкаПравописания

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПроверкиПравописания(Команда)
	CRM_ПроверкаПравописанияКлиент.ВыполнитьКомандуПроверкиПравописания(ЭтотОбъект, Элементы.ТекстШаблонаHTML, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаменитьНаВариантНажатие(Команда)
	CRM_ПроверкаПравописанияКлиент.ЗаменитьНаВариант(ЭтотОбъект, Элементы.ТекстШаблонаHTML, Команда.Имя)
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ПроверкаПравописани".
//
// Параметры:
//  Команда  - выполняемая команда
//
Процедура ПроверкаПравописания(Команда = Неопределено)
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'проверку орфографии'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаПравописанияПродолжение", ЭтотОбъект);
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПравописанияПродолжение(Результат, ДопПараметр) Экспорт
	
	Элементы.ПроверкаПравописания.Пометка = Не Элементы.ПроверкаПравописания.Пометка;
	Элементы.CRM_ГруппаПроверкаПравописания.Видимость = Элементы.ПроверкаПравописания.Пометка;
	
	Если Элементы.ПроверкаПравописания.Пометка Тогда
		CRM_ПроверкаПравописанияКлиент.СкрытьОшибки(Элементы.ТекстШаблонаHTML);
		ПроверяемыйТекст = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ТекстШаблонаHTML);
		ПроверкаПравописанияНаСервере(ПроверяемыйТекст);
		ТекстШаблонаHTML = ПроверяемыйТекст;
		CRM_ПроверкаПравописанияКлиент.ПоказатьОшибки(ЭтотОбъект, Элементы.ТекстШаблонаHTML,
			 ТекстШаблонаHTML,
			 ПроверяемыйТекст);
	
	Иначе
		ВыделенныйТекст = Элементы.ТекстШаблонаHTML.Документ.getSelection();
		НомерТекущейОшибки = ЭтотОбъект["CRM_НомерТекущейОшибки"];
		Если ВыделенныйТекст.type <> "None" 
			И НомерТекущейОшибки < ЭтотОбъект["CRM_СписокОшибок"].Количество()
			И ЭтотОбъект["CRM_СписокОшибок"].Получить(НомерТекущейОшибки).Значение.word
			= ВыделенныйТекст.anchorNode.textContent Тогда
			Элементы.ТекстШаблонаHTML.Документ.getSelection().empty();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаПравописанияНаСервере(ПроверяемыйТекст)
	CRM_ПроверкаПравописанияСервер.ПроверитьПравописание(ЭтотОбъект, Элементы.ТекстШаблонаHTML,
		 ПроверяемыйТекст);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура РежимВводаОтЗадачиПриИзменении(Элемент)
	Объект.РежимВводаОтЗадачи = Булево(РежимРасчетаСроков);
	РежимВводаОтЗадачиПриИзмененииНаСервере();
	ДеревоМоделиОбновить();
КонецПроцедуры

&НаСервере
Процедура РежимВводаОтЗадачиПриИзмененииНаСервере()
	
	ЭлементСпискаОтсрочкаСтарта = СписокРедактируемыхКолонок.НайтиПоЗначению("ОтсрочкаСтартаДней");
	
	Если Объект.РежимВводаОтЗадачи Тогда
		Элементы.ДеревоМоделиОтсрочкаОтПредыдущейЗадачи.Видимость = Истина;
		Элементы.ДеревоМоделиОтсрочкаСтартаДней.ТолькоПросмотр = Истина;
		Элементы.ГруппаДействияПеремещения.Видимость = Истина;
				
		Если ЭлементСпискаОтсрочкаСтарта <> Неопределено Тогда
			СписокРедактируемыхКолонок.Удалить(ЭлементСпискаОтсрочкаСтарта);
		КонецЕсли;
	Иначе
		Элементы.ДеревоМоделиОтсрочкаОтПредыдущейЗадачи.Видимость = Ложь;
		Элементы.ДеревоМоделиОтсрочкаСтартаДней.ТолькоПросмотр = Ложь;
		Элементы.ГруппаДействияПеремещения.Видимость = Ложь;
		
		Если ЭлементСпискаОтсрочкаСтарта = Неопределено Тогда
			СписокРедактируемыхКолонок.Добавить(ЭлементСпискаОтсрочкаСтарта);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьПроизводственныйКалендарьПриИзменении(Элемент)
	ДеревоМоделиОбновить();
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыВложения

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьВложениеВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СвойстваВложенияМеню.Доступность = (ТекущиеДанные.Расположение <> 5);
	Элементы.СвойстваВложения.Доступность                        = (ТекущиеДанные.Расположение <> 5);
	
КонецПроцедуры

 &НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДобавитьВложениеВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьВложениеВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	МассивФайлов = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		
		МассивФайлов.Добавить(ПараметрыПеретаскивания.Значение);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1
			И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если ТипЗнч(ФайлПринятый) = Тип("Файл") Тогда
					МассивФайлов.Добавить(ФайлПринятый);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		// Обработка не требуется
	КонецЕсли;
	
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		
		ДополнительныеПараметры = Новый Структура("ВыбранныйФайл", ВыбранныйФайл);
		ОписаниеОповещение = Новый ОписаниеОповещения("ПроверкаЭтоФайлПослеЗавершения", ЭтотОбъект, ДополнительныеПараметры);
		ВыбранныйФайл.НачатьПроверкуЭтоФайл(ОписаниеОповещение);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

#Область РедакторHTML

&НаКлиенте
Процедура УвеличитьШрифт(Команда)
	
	CRM_РаботаСHTMLКлиент.УвеличитьШрифт(ЭтотОбъект, Элементы.ТекстШаблонаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьШрифт(Команда)
	
	CRM_РаботаСHTMLКлиент.УменьшитьШрифт(ЭтотОбъект, Элементы.ТекстШаблонаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьШрифт(Команда)
	
	CRM_РаботаСHTMLКлиент.ИзменитьШрифт(ЭтотОбъект, Элементы.ТекстШаблонаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКоманду(Команда)
	
	ИмяКоманды = Сред(Команда.Имя, 8);
	CRM_РаботаСHTMLКлиент.ВыполнитьHTMLКоманду(ЭтотОбъект, Элементы.ТекстШаблонаHTML, ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЦвета(Команда)
	
	ИмяКоманды = Сред(Команда.Имя, 8);
	CRM_РаботаСHTMLКлиент.ВыборЦвета(ЭтотОбъект, Элементы.ТекстШаблонаHTML, ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИзображение(Команда)
	
	CRM_РаботаСHTMLКлиент.ВставитьИзображение(ЭтотОбъект, Элементы.ТекстШаблонаHTML, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	
	CRM_РаботаСHTMLКлиент.ВставитьКартинкуИзБуфера(ЭтотОбъект, Элементы.ТекстШаблонаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьГиперссылку(Команда)
	
	CRM_РаботаСHTMLКлиент.ВставитьГиперссылку(ЭтотОбъект, Элементы.ТекстШаблонаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТаблицу(Команда)
	
	CRM_РаботаСHTMLКлиент.ВставитьТаблицу(ЭтотОбъект, Элементы.ТекстШаблонаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДопФорматирование(Команда)
	Элементы.ПоказатьДопФорматирование.Пометка = НЕ Элементы.ПоказатьДопФорматирование.Пометка;
	Элементы.ГруппаДополнительное.Видимость = Элементы.ПоказатьДопФорматирование.Пометка;
КонецПроцедуры

#КонецОбласти // РедакторHTML

&НаКлиенте
Процедура ВставитьСсылкуНаОбъектИнформационнойБазы(Команда)
	
	ОткрытьФорму("ОбщаяФорма.CRM_ФормированиеCсылкиНаОбъект", , ЭтотОбъект);
	
КонецПроцедуры

#Область РаботаСВложениями

&НаКлиенте
Процедура ВсеВложения(Команда)
	
	Элементы.ФормаВсеВложения.Пометка	= Не Элементы.ФормаВсеВложения.Пометка;
	ВсеВложенияПометка					= Элементы.ФормаВсеВложения.Пометка;
	
	Если ВсеВложенияПометка Тогда
		Элементы.Вложения.ОтборСтрок = Неопределено;
	Иначе
		Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьмаОтбор", "#");
	КонецЕсли;
	
	СформироватьСсылкиВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложение(Команда)
	
	СохранитьВложениеВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваВложения(Команда)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИндексВКоллекции = Вложения.Индекс(ТекущиеДанные);
	
	Если ТекущиеДанные.Ссылка = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура("ТекущийИндексВКоллекции", ТекущийИндексВКоллекции);
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ВопросОЗаписиФайлаПослеЗакрытия",
			 ЭтотОбъект,
			 ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Свойства файла доступны только после его записи. Записать?'");
		ПоказатьВопрос(ОбработчикОповещенияОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьСвойстваВложения(ТекущийИндексВКоллекции);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьПрикрепленныеФайлы() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШаблоныПроектовПрисоединенныеФайлы.Ссылка КАК Ссылка,
	               |	ШаблоныПроектовПрисоединенныеФайлы.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.CRM_ШаблоныПроектовПрисоединенныеФайлы КАК ШаблоныПроектовПрисоединенныеФайлы
	               |ГДЕ
	               |	ШаблоныПроектовПрисоединенныеФайлы.ВладелецФайла = &Ссылка";
				   
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокКолонокКалендарногоГрафикаНаСервере()
	
	КолонкиКалендарногоГрафика.Очистить();
	СохраненныйСписок = Объект.Ссылка.CRM_КолонкиКалендарногоГрафика.Получить();
	
	Если ЗначениеЗаполнено(СохраненныйСписок) Тогда 
		КолонкиКалендарногоГрафика = СохраненныйСписок.Скопировать();
	Иначе
		CRM_УправлениеПроектамиВызовСервера.ПеречитатьСписокКолонокКалендарногоГрафикаИзМакетаНаСервере(КолонкиКалендарногоГрафика);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьКолонкиКалендарногоГрафикаИзМакетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		CRM_УправлениеПроектамиВызовСервера.ПеречитатьСписокКолонокКалендарногоГрафикаИзМакетаНаСервере(КолонкиКалендарногоГрафика);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСозданныйПроект()

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", СозданныйПроект);
	ОткрытьФорму("Справочник.Проекты.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЧислоВложений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(CRM_ШаблоныПроектовПрисоединенныеФайлы.Ссылка) КАК КоличествоФайлов
	|ИЗ
	|	Справочник.CRM_ШаблоныПроектовПрисоединенныеФайлы КАК CRM_ШаблоныПроектовПрисоединенныеФайлы
	|ГДЕ
	|	CRM_ШаблоныПроектовПрисоединенныеФайлы.ВладелецФайла = &Этап
	|	И НЕ CRM_ШаблоныПроектовПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Этап", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КоличествоФайлов;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	
	Если Объект.Ссылка.Пустая() Тогда
		ВложенияПредставление = НСтр("ru='Файлы';en='Files'");
		Возврат;
	КонецЕсли;
	
	ЧислоВложений = ПолучитьЧислоВложений();
	Если ЧислоВложений = 0 Тогда
		ВложенияПредставление = НСтр("ru='Файлы';en='Files'");
	Иначе
		ВложенияПредставление = НСтр("ru='Файлы(';en='Files ('") + ЧислоВложений + ")"; 
	КонецЕсли;
			
КонецПроцедуры // СформироватьПредставлениеВложений()

&НаКлиенте
Процедура ОткрытьФайлыЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.CRM_ПрисоединенныеФайлы",
					  ПараметрыФормы, ЭтотОбъект, Ложь, Неопределено);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФайлыЗавершение()

&НаСервере
Процедура ИзменитьУсловноеОформлениеКорняДерева()
	УсловноеОформление.Элементы[0].Оформление.Элементы.Найти("Текст").Значение = Объект.Наименование; 
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблоныЭтаповЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("ШаблонПроекта", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ОткрытьФорму("Справочник.CRM_ШаблоныЭтаповПроектов.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьБизнесПроцессыЗавершение()

&НаКлиенте
Процедура ОткрытьШаблоныЗадачЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("ШаблонПроекта", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ОткрытьФорму("Документ.CRM_ШаблонЭтапаКалендарногоПлана.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	CRM_ХранилищеНастроек.Сохранить(ИмяФормы, "РежимРедактированияМодели", РежимРедактированияМодели);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииИПриЧтенииНаСервере()
	
	ЗаполнитьВложения(Параметры);
	
КонецПроцедуры

#Область РаботаСВложениями

&НаКлиенте
Процедура СсылкиВложенийНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НайденныеСтроки = Вложения.НайтиСтроки(Новый Структура("ИДФайлаЭлектронногоПисьма", "#"));
	Если НайденныеСтроки.Количество() = 0 Тогда
		ДобавитьВложениеВыполнить();
	КонецЕсли;
	
	ПереключитьРежимРаботыСВложениями();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложения(ПереданныеПараметры = Неопределено)
	
	ДополнитьСуществующиеВложения = Объект.Ссылка.Пустая() И ПереданныеПараметры <> Неопределено;
	
	Если ДополнитьСуществующиеВложения Тогда
		
		Если Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Вложения.Сортировать("ИмяФайла");
			Возврат;
		КонецЕсли;
		
		ТабВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(ПереданныеПараметры.ЗначениеКопирования,
			 Истина);
		Для Каждого СтрокаТаблицыВложений Из ТабВложения Цикл
			Если ПустаяСтрока(СтрокаТаблицыВложений.ИДФайлаЭлектронногоПисьма) Тогда
				НоваяСтрока = Вложения.Добавить();
				НоваяСтрока.Ссылка              = СтрокаТаблицыВложений.Ссылка;
				НоваяСтрока.ИмяФайла            = СтрокаТаблицыВложений.ИмяФайла;
				НоваяСтрока.ИндексКартинки      = СтрокаТаблицыВложений.ИндексКартинки;
				НоваяСтрока.Размер              = СтрокаТаблицыВложений.Размер;
				НоваяСтрока.РазмерПредставление = СтрокаТаблицыВложений.РазмерПредставление;
				НоваяСтрока.Расположение        = 1;
				НоваяСтрока.ИДФайлаЭлектронногоПисьмаОтбор = "#";
				НоваяСтрока.ИДФайлаЭлектронногоПисьма      = "#";
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Вложения.Очистить();
		ТабВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Объект.Ссылка, Истина);
		Для Каждого СтрокаТаблицыВложений Из ТабВложения Цикл
			
			ИДФайлаЭлектронногоПисьма = СтрокаТаблицыВложений.ИДФайлаЭлектронногоПисьма;
			Если ПустаяСтрока(ИДФайлаЭлектронногоПисьма) Тогда
				ИДФайлаЭлектронногоПисьма = "#";
			КонецЕсли;
			
			НоваяСтрока = Вложения.Добавить();
			НоваяСтрока.Ссылка              = СтрокаТаблицыВложений.Ссылка;
			НоваяСтрока.ИмяФайла            = СтрокаТаблицыВложений.ИмяФайла;
			НоваяСтрока.ИндексКартинки      = СтрокаТаблицыВложений.ИндексКартинки;
			НоваяСтрока.Размер              = СтрокаТаблицыВложений.Размер;
			НоваяСтрока.РазмерПредставление = СтрокаТаблицыВложений.РазмерПредставление;
			НоваяСтрока.ПодписанЭП          = СтрокаТаблицыВложений.ПодписанЭП;
			НоваяСтрока.Расположение        = 0;
			НоваяСтрока.ИДФайлаЭлектронногоПисьмаОтбор = ИДФайлаЭлектронногоПисьма;
			НоваяСтрока.ИДФайлаЭлектронногоПисьма      = ИДФайлаЭлектронногоПисьма;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Вложения.Сортировать("ИмяФайла");
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВложения(Письмо)
	
	Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
		
		Размер = 0;
		ИмяФайла = СтрокаТаблицыВложений.ИмяФайла;
		
		Если СтрокаТаблицыВложений.Расположение = 4 Тогда
			// из временного хранилища
			
			ПараметрыВложения = Новый Структура;
			ПараметрыВложения.Вставить("ИмяФайла", ИмяФайла);
			ПараметрыВложения.Вставить("Размер", Размер);
			
			CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			Письмо, СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере, ПараметрыВложения);
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 3 Тогда
			// из файла на сервере
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 2 Тогда
			// из файла на компьютере
			
			ДвоичныеДанные = Новый ДвоичныеДанные(СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере);
			АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			
			ПараметрыВложения = Новый Структура;
			ПараметрыВложения.Вставить("ИмяФайла", ИмяФайла);
			ПараметрыВложения.Вставить("Размер", Размер);
			
			CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			Письмо, АдресВременногоХранилищаФайла, ПараметрыВложения);
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 1 Тогда
			
			CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
			Письмо, СтрокаТаблицыВложений.Ссылка, УникальныйИдентификатор);
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 0 Тогда
			// перезаписать вложение
			
		КонецЕсли;
		
		СтрокаТаблицыВложений.Расположение = 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСсылкиВложений()
	
	НайденныеСтроки = Вложения.НайтиСтроки(Новый Структура("ИДФайлаЭлектронногоПисьма", "#"));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		СсылкиВложений = НСтр("ru='Добавить файл';en='Add file'");
	Иначе
		СсылкиВложений = "";
		Для Каждого Строка Из НайденныеСтроки Цикл
			СсылкиВложений = СсылкиВложений + "; " + Строка.ИмяФайла + "(" + Строка.РазмерПредставление + ")";
		КонецЦикла;
		СсылкиВложений = Сред(СсылкиВложений, 3);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимРаботыСВложениями()
	
	ОтображатьТаблицуВложений = Не ОтображатьТаблицуВложений;
	CRM_ОбщегоНазначенияСервер.ХранилищеОбщихНастроекСохранить("CRM_Подписи",
		"ОтображатьТаблицуВложений", ОтображатьТаблицуВложений);
	
	Элементы.ГруппаВложения.Видимость = ОтображатьТаблицуВложений;
	Элементы.ГруппаСсылокИКомандВложений.Видимость = Не ОтображатьТаблицуВложений;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение()
	
	ОткрытьВложениеВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнить(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	КонецЕсли;
	
	// Если установка текущих данных на предыдущем шаге не удалась - выходим из процедуры.
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТекущиеДанные.Расположение = 0) ИЛИ (ТекущиеДанные.Расположение = 1) Тогда
		
		Если ВзаимодействияКлиентСервер.ЭтоФайлПисьмо(ТекущиеДанные.ИмяФайла) Тогда
			
			ВзаимодействияКлиент.ОткрытьВложениеПисьмо(ТекущиеДанные.Ссылка, ПараметрыПисьмаВложения(), ЭтотОбъект);
			
		Иначе
			
			ДляРедактирования = Истина;
			
			УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(ТекущиеДанные.Ссылка,
			                                                  ЭтотОбъект,
			                                                  ДляРедактирования);
			
			Если ДляРедактирования Тогда
				ТекущиеДанные.Редактируется = Истина;
				Модифицированность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.Расположение = 2 Тогда
		
		ПутьКФайлу = ТекущиеДанные.ИмяФайлаНаКомпьютере;
			
		Если ВзаимодействияКлиентСервер.ЭтоФайлПисьмо(ТекущиеДанные.ИмяФайла) Тогда
			
			Попытка
				
				Данные = Новый ДвоичныеДанные(ТекущиеДанные.ИмяФайлаНаКомпьютере);
				
				ВзаимодействияКлиент.ОткрытьВложениеПисьмо(ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор), 
				                                           ПараметрыПисьмаВложения(),
				                                           ЭтотОбъект);
				
			Исключение
				ФайловаяСистемаКлиент.ОткрытьФайл(ПутьКФайлу);
			КонецПопытки;
		Иначе
			ФайловаяСистемаКлиент.ОткрытьФайл(ПутьКФайлу);
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.Расположение = 4 Тогда
		
		ФайловаяСистемаКлиент.ОткрытьФайл(ТекущиеДанные.ИмяФайлаНаКомпьютере, , ТекущиеДанные.ИмяФайла);
		
	ИначеЕсли ТекущиеДанные.Расположение = 5 Тогда
		
		ПараметрыВложения = ВзаимодействияКлиент.ПараметрыПисьмаВложения();
		ПараметрыВложения.ДатаПисьмаОснования = ?(ЗначениеЗаполнено(Объект.ДатаОтправления),
			 Объект.ДатаОтправления ,
			 Объект.Дата);
		ПараметрыВложения.ПисьмоОснование     = Объект.Ссылка;
		ПараметрыВложения.ТемаПисьмаОснования = Объект.Тема;
		
		ВзаимодействияКлиент.ОткрытьВложениеПисьмо(ТекущиеДанные.Письмо,
		                                           ПараметрыПисьмаВложения(),
		                                           ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьВложениеВБуферОбменаВыполнить(Команда)
	
	ВыделенныеСтроки = Элементы.Вложения.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	Для Каждого Стр Из ВыделенныеСтроки Цикл
		
		ТекущееВложение = Вложения.НайтиПоИдентификатору(Стр);
		Если ЗначениеЗаполнено(ТекущееВложение.Ссылка) Тогда
			МассивСсылок.Добавить(ТекущееВложение.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	CRM_ПрисоединенныеФайлы.СкопироватьФайлыВБуфер(МассивСсылок);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Копирование в буфер обмена'"), Окно.ПолучитьНавигационнуюСсылку(), 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Скопировано файлов: %1'"), МассивСсылок.Количество()));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеВыполнить()
	
	ОписаниеОповещение = Новый ОписаниеОповещения("ДиалогВыбораФайловПослеВыбора", ЭтотОбъект);
	ФайловаяСистемаКлиент.ЗагрузитьФайлы(ОписаниеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогВыбораФайловПослеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавленоФайлов = 0;
	Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
		
		ДанныеФайла = ПолучитьИзВременногоХранилища(ВыбранныйФайл.Хранение);
		Размер = ДанныеФайла.Размер();
		Расширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ВыбранныйФайл.ИмяФайла);
		
		РезультатПроверки = CRM_ВзаимодействияВызовСервера.ПроверитьВозможностьЗагрузкиВложения(ВыбранныйФайл.ИмяФайла,
			 Размер,
			 Расширение);
		Если РезультатПроверки.Ошибка Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.ОписаниеОшибки);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Вложения.Добавить();
		
		#Если ВебКлиент Тогда
			НоваяСтрока.Расположение = 4;
			НоваяСтрока.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(ДанныеФайла);
		#Иначе
			НоваяСтрока.Расположение = 2;
			НоваяСтрока.ИмяФайлаНаКомпьютере = ВыбранныйФайл.ПолноеИмя;
		#КонецЕсли
		
		НоваяСтрока.ИмяФайла = ВыбранныйФайл.ИмяФайла;
		
		НоваяСтрока.ИндексКартинки      = РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(Расширение);
		НоваяСтрока.РазмерПредставление = CRM_ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(Размер); 
		
		НоваяСтрока.ИДФайлаЭлектронногоПисьмаОтбор = "#";
		НоваяСтрока.ИДФайлаЭлектронногоПисьма = "#";
		
		ДобавленоФайлов = ДобавленоФайлов + 1;
		
	КонецЦикла;
	
	Если ДобавленоФайлов > 0 Тогда
		Элементы.Вложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Модифицированность = Истина;
		ОбновитьОтображениеДанных();
		СформироватьСсылкиВложений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьФайлИзБуфераОбменаВыполнить()
	
	Если НЕ CRM_ПрисоединенныеФайлы.БуферЗаполненФайлами() Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Вставка из буфера обмена'"), Окно.ПолучитьНавигационнуюСсылку(), 
										НСтр("ru = 'Буфер обмена пуст'"));
		Возврат;	
	КонецЕсли;
	
	МассивСсылокНаФайлы = CRM_ПрисоединенныеФайлы.МассивСсылокИзБуфера();
	
	ДобавленоФайлов = 0;
	Для Каждого СсылкаНаФайл Из МассивСсылокНаФайлы Цикл
		
		ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ПараметрыДанныхФайла.ИдентификаторФормы = УникальныйИдентификатор;
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(СсылкаНаФайл,, ПараметрыДанныхФайла);
		
		
		НоваяСтрока = Вложения.Добавить();
		
		НоваяСтрока.Расположение = 4;
		НоваяСтрока.ИмяФайлаНаКомпьютере = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		
		НоваяСтрока.ИмяФайла		= ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
		НоваяСтрока.Размер = ДанныеФайла.Размер;
		
		НоваяСтрока.ИндексКартинки	= РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(ДанныеФайла.Расширение);
		НоваяСтрока.РазмерПредставление = CRM_ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(ДанныеФайла.Размер); 
		
		НоваяСтрока.ИДФайлаЭлектронногоПисьмаОтбор = "#";
		НоваяСтрока.ИДФайлаЭлектронногоПисьма = "#";
		
		ДобавленоФайлов = ДобавленоФайлов + 1;
		
	КонецЦикла;
	
	Если ДобавленоФайлов > 0 Тогда
		Элементы.Вложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Модифицированность = Истина;
		ОбновитьОтображениеДанных();
		СформироватьСсылкиВложений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьВБуферВсеВложениеВыполнить(Команда)
	
	МассивСсылок = Новый Массив;
	Для Каждого Вложение Из Вложения Цикл
		МассивСсылок.Добавить(Вложение.Ссылка);
	КонецЦикла;
	
	CRM_ПрисоединенныеФайлы.СкопироватьФайлыВБуфер(МассивСсылок);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Копирование в буфер обмена'"), Окно.ПолучитьНавигационнуюСсылку(), 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Скопировано файлов: %1'"), МассивСсылок.Количество()));
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложениеВыполнить(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.Расположение = 0 Тогда
		УдаленныеВложения.Добавить(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	Индекс = Вложения.Индекс(ТекущиеДанные);
	Вложения.Удалить(Индекс);
	
	Модифицированность = Истина;
	ОбновитьОтображениеДанных();
	СформироватьСсылкиВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЭтоФайлПослеЗавершения(ЭтоФайл, ДополнительныеПараметры) Экспорт

	Если НЕ ЭтоФайл Тогда
		Возврат;
	КонецЕсли;
	
	Файл = ДополнительныеПараметры.ВыбранныйФайл;
	Размер = Файл.Размер();
	Расширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(Файл.Имя);
	
	РезультатПроверки = CRM_ВзаимодействияВызовСервера.ПроверитьВозможностьЗагрузкиВложения(Файл.Имя, Размер, Расширение);
	Если РезультатПроверки.Ошибка Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Вложения.Добавить();
	НоваяСтрока.Расположение = 2;
	НоваяСтрока.ИмяФайлаНаКомпьютере = Файл.ПолноеИмя;
	
	НоваяСтрока.ИмяФайла = Файл.Имя;
	
	НоваяСтрока.ИндексКартинки      = РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(Расширение);
	НоваяСтрока.РазмерПредставление = CRM_ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(Размер); 
	
	НоваяСтрока.ИДФайлаЭлектронногоПисьмаОтбор = "#";
	НоваяСтрока.ИДФайлаЭлектронногоПисьма = "#";
	
	Модифицированность = Истина;
	ОбновитьОтображениеДанных();
	СформироватьСсылкиВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвойстваВложения(ТекущийИндексВКоллекции)
	
	ТекущиеДанные = Вложения.Получить(ТекущийИндексВКоллекции);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.Вложения.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
		
	ФайлДоступенДляРедактирования = Истина;
	ПараметрыФормы = Новый Структура("ПрисоединенныйФайл, ТолькоПросмотр", 
		ТекущиеДанные.Ссылка, НЕ ФайлДоступенДляРедактирования);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныйФайл", ПараметрыФормы, , ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПисьмаВложения()
	
	ПараметрыВложения = ВзаимодействияКлиент.ПараметрыПисьмаВложения();
	ПараметрыВложения.ДатаПисьмаОснования = ?(ЗначениеЗаполнено(Объект.ДатаОтправления),
		 Объект.ДатаОтправления ,
		 Объект.Дата);
	ПараметрыВложения.ПисьмоОснование     = Объект.Ссылка;
	ПараметрыВложения.ТемаПисьмаОснования = Объект.Тема;
	
	Возврат ПараметрыВложения;
	
КонецФункции

&НаКлиенте
Процедура СохранитьВложениеВыполнить(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если (ТекущиеДанные.Расположение = 0) ИЛИ (ТекущиеДанные.Расположение = 1) Тогда
		CRM_УправлениеЭлектроннойПочтойКлиент.СохранитьВложение(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	ИначеЕсли ТекущиеДанные.Расположение = 2 Тогда
		
	ИначеЕсли ТекущиеДанные.Расположение = 4 Тогда
		ФайлВложения = Новый Файл(ТекущиеДанные.ИмяФайла);
		РасширениеВложения = ?(ПустаяСтрока(ФайлВложения.Расширение), ФайлВложения.Расширение,
			 Прав(ФайлВложения.Расширение,
			 СтрДлина(ФайлВложения.Расширение) - 1));
		Если РасширениеВложения = "EML" Тогда
			ПоказатьПредупреждение(, НСтр("ru='Это вложение не может быть сохранено.'"));
			Возврат;
		КонецЕсли;
		ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Неопределено);
		СтруктураДанных = Новый Структура("РасширениеВложения, текДанные", РасширениеВложения, ТекущиеДанные);
		ОповещениеНовое = Новый ОписаниеОповещения("СохранитьВложениеЗавершение", ЭтотОбъект, СтруктураДанных);
		НачатьПодключениеРасширенияРаботыСФайлами(ОповещениеНовое);	
	Иначе
		// Обработка не требуется
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	РасширениеВложения = ДополнительныеПараметры.РасширениеВложения;
	текДанные = ДополнительныеПараметры.текДанные;
		
	Если Подключено Тогда
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = текДанные.ИмяФайла;
		ВыборФайла.Расширение = РасширениеВложения;
		ВыборФайла.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Все файлы (*.%1)|*.%1'"), РасширениеВложения, РасширениеВложения);
		СтруктураДанных = Новый Структура("ВыборФайла, текДанные", ВыборФайла, текДанные);
		ОповещениеНовое = Новый ОписаниеОповещения("СохранитьВложениеЗавершениеВыборФайла", ЭтотОбъект, СтруктураДанных);
		ВыборФайла.Показать(ОповещениеНовое);
	Иначе
		#Если ВебКлиент Тогда
			ПолучитьФайл(текДанные.ИмяФайлаНаКомпьютере, текДанные.ИмяФайла, Истина);
		#КонецЕсли
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеЗавершениеВыборФайла(ВыбранныеФайлы, ДополнительныеПараметры1) Экспорт
	
	ВыборФайла = ДополнительныеПараметры1.ВыборФайла;
	текДанные = ДополнительныеПараметры1.текДанные;
		
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выполняется сохранение файла ""%1"" ...
		           |Пожалуйста, подождите.'"), текДанные.ИмяФайла);
		Состояние(ТекстПояснения);
		ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ВыборФайла.ПолноеИмяФайла, текДанные.ИмяФайлаНаКомпьютере);
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
		ПолученныеФайлы = Новый Массив;
		СтруктураДанных = Новый Структура("ВыборФайла", ВыборФайла);
		ОповещениеНовое = Новый ОписаниеОповещения("СохранитьВложениеЗавершениеПолучитьФайлы", ЭтотОбъект, СтруктураДанных);
		НачатьПолучениеФайлов(ОповещениеНовое, ПолучаемыеФайлы, ВыборФайла, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеЗавершениеПолучитьФайлы(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыборФайла = ДополнительныеПараметры.ВыборФайла;
		
	Если ПолученныеФайлы.Количество() > 0 Тогда
		Состояние(НСтр("ru='Файл успешно сохранен'"), , ВыборФайла.ПолноеИмяФайла);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти // РаботаСВложениями

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область РаботаСЭтапами

&НаСервере
Процедура ЗаполнитьДеревоПоЭтапам()
	
	ДеревоМодели.ПолучитьЭлементы().Очистить();
	
// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ШаблоныЭтаповПроектов.Ссылка КАК Пакет,
	               |	CRM_ШаблоныЭтаповПроектов.МинимальноеСмещение КАК МинимальноеСмещение,
	               |	CRM_ШаблоныЭтаповПроектов.ПродолжительностьДней КАК ПродолжительностьДнейЭтапа,
	               |	CRM_ШаблоныЭтаповПроектов.Ответственный КАК Ответственный,
	               |	CRM_ШаблонЭтапаКалендарногоПлана.Ссылка КАК Этап,
	               |	CRM_ШаблонЭтапаКалендарногоПлана.ПродолжительностьДней КАК ПродолжительностьДней,
	               |	CRM_ШаблонЭтапаКалендарногоПлана.ТипЭтапа КАК ТипЭтапа,
	               |	CRM_ШаблонЭтапаКалендарногоПлана.Смещение КАК ОтсрочкаСтартаДней,
	               |	CRM_ШаблонЭтапаКалендарногоПлана.Важность КАК Важность,
	               |	CRM_ШаблонЭтапаКалендарногоПлана.ПометкаУдаления КАК ПометкаУдаления
	               |ИЗ
	               |	Справочник.CRM_ШаблоныЭтаповПроектов КАК CRM_ШаблоныЭтаповПроектов
	               |		ПОЛНОЕ СОЕДИНЕНИЕ Документ.CRM_ШаблонЭтапаКалендарногоПлана КАК CRM_ШаблонЭтапаКалендарногоПлана
	               |		ПО CRM_ШаблоныЭтаповПроектов.Ссылка = CRM_ШаблонЭтапаКалендарногоПлана.ШаблонЭтапаПроекта
	               |ГДЕ
	               |	(CRM_ШаблоныЭтаповПроектов.ШаблонПроекта = &ШаблонПроекта
	               |			ИЛИ CRM_ШаблонЭтапаКалендарногоПлана.ШаблонПроекта = &ШаблонПроекта)
	               |	И НЕ ЕСТЬNULL(CRM_ШаблоныЭтаповПроектов.ПометкаУдаления, ЛОЖЬ)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	МинимальноеСмещение ИЕРАРХИЯ,
	               |	Пакет,
	               |	CRM_ШаблонЭтапаКалендарногоПлана.Смещение";
// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	
	Запрос.УстановитьПараметр("ШаблонПроекта", Объект.Ссылка);
	
	ДеревоПоЗапросу = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ВерхняяСтрокаЭтапов = ДеревоМодели.ПолучитьЭлементы().Добавить();
	ВерхняяСтрокаЭтапов.ИндексКартинки = -1;
	Длительность = 0;
	
	ЗаполнитьДеревоПоЭтапамРекурсивно(ВерхняяСтрокаЭтапов.ПолучитьЭлементы(), ДеревоПоЗапросу.Строки, Длительность);
	
	ВерхняяСтрокаЭтапов.ПродолжительностьДней = Длительность;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПоЭтапамРекурсивно(СтрокиЭтапов, СтрокиПоЗапросу, Длительность)
	
	ПредыдущийЭтапКакРодитель = NULL;
	СтрокаЭтапаГруппа		  = Неопределено;
	
	Для каждого СтрокаПоЗапросу Из СтрокиПоЗапросу Цикл
		
		Если СтрокаПоЗапросу.Строки.Количество() > 0 Тогда
			// Есть подчиненные пакеты/задачи
			СтрокаЭтапа = СтрокиЭтапов.Добавить();
			СтрокаЭтапа.Этап = СтрокаПоЗапросу.Пакет;
			СтрокаЭтапа.ИндексКартинки = 0;
			СтрокаЭтапа.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			СтрокаЭтапа.ОтветственныйИсполнитель = СтрокаПоЗапросу.Ответственный;
			СтрокаЭтапа.ОтсрочкаСтартаДней 	  = СтрокаПоЗапросу.МинимальноеСмещение;
			СтрокаЭтапа.ПродолжительностьДней = СтрокаПоЗапросу.ПродолжительностьДнейЭтапа;
			ЗаполнитьДеревоПоЭтапамРекурсивно(СтрокаЭтапа.ПолучитьЭлементы(), СтрокаПоЗапросу.Строки, Длительность);
			
			ПредыдущийЭтапКакРодитель = СтрокаПоЗапросу.Пакет;
			СтрокаЭтапаГруппа		  = СтрокаЭтапа;
		КонецЕсли;
		
		Если ПредыдущийЭтапКакРодитель <> СтрокаПоЗапросу.Пакет Тогда
			// Создадим ветку Пакета 
			СтрокаЭтапаГруппа  = СтрокиЭтапов.Добавить();
			СтрокаЭтапаГруппа.Этап = СтрокаПоЗапросу.Пакет;
			СтрокаЭтапаГруппа.ИндексКартинки = 0;
			СтрокаЭтапаГруппа.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			СтрокаЭтапаГруппа.ОтветственныйИсполнитель = СтрокаПоЗапросу.Ответственный;
			СтрокаЭтапаГруппа.ОтсрочкаСтартаДней 	  = СтрокаПоЗапросу.МинимальноеСмещение;
			СтрокаЭтапаГруппа.ПродолжительностьДней = СтрокаПоЗапросу.ПродолжительностьДнейЭтапа;
			
			ПредыдущийЭтапКакРодитель = СтрокаПоЗапросу.Пакет;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СтрокаПоЗапросу.Этап) И НЕ СтрокаПоЗапросу.ПометкаУдаления Тогда
			// Добавим задачу (верхнего уровня или подчиненную пакету)
			СтрокаЭтапа = ?(СтрокаЭтапаГруппа = Неопределено, СтрокиЭтапов.Добавить(),
				 СтрокаЭтапаГруппа.ПолучитьЭлементы().Добавить());
			СтрокаЭтапа.Этап 				  = СтрокаПоЗапросу.Этап;
			СтрокаЭтапа.ОтсрочкаСтартаДней 	  = СтрокаПоЗапросу.ОтсрочкаСтартаДней;
			СтрокаЭтапа.ПродолжительностьДней = СтрокаПоЗапросу.ПродолжительностьДней;
			СтрокаЭтапа.ТипЭтапа 			  = СтрокаПоЗапросу.ТипЭтапа;
			СтрокаЭтапа.Важность 			  = СтрокаПоЗапросу.Важность;
			СтрокаЭтапа.ИндексКартинки   	  = ?(СтрокаЭтапа.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.Этап, 1, 3);
			СтрокаЭтапа.ИдентификаторСтроки	  = Новый УникальныйИдентификатор;
			Если СтрокаЭтапа.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
				ТекДлительность = СтрокаЭтапа.ОтсрочкаСтартаДней + 1;
			Иначе
				ТекДлительность = СтрокаЭтапа.ОтсрочкаСтартаДней + СтрокаЭтапа.ПродолжительностьДней;
			КонецЕсли;
			Если ТекДлительность > Длительность Тогда
				Длительность = ТекДлительность;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПоЭтапамВводОтЗадачи()
	
	ДеревоМодели.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = CRM_УправлениеПроектамиСервер.ТекстЗапросаШаблонаПроектаВводОтЗадачи();
	
	Запрос.УстановитьПараметр("ШаблонПроекта", Объект.Ссылка);
	
	ДеревоПоЗапросу = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоМодели");
	ВерхняяСтрокаЭтапов = ДеревоОбъект.Строки.Добавить();
	ВерхняяСтрокаЭтапов.ИндексКартинки = -1;
	Длительность = 0;
	МаксПорядок = 0;
	
	ЗаполнитьДеревоПоЭтапамРекурсивноВводОтЗадачи(Неопределено, ВерхняяСтрокаЭтапов.Строки, ДеревоПоЗапросу.Строки, Длительность, МаксПорядок);
	
	ВерхняяСтрокаЭтапов.Строки.Сортировать("ПорядокВШаблоне");
	
	ВерхняяСтрокаЭтапов.ПродолжительностьДней = Длительность;
	ВерхняяСтрокаЭтапов.МаксПорядокВГруппе = МаксПорядок;
	
	ЗначениеВРеквизитФормы(ДеревоОбъект, "ДеревоМодели");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПоЭтапамРекурсивноВводОтЗадачи(РодительСтрокаЭтапов, СтрокиЭтапов, СтрокиПоЗапросу, Длительность, МаксПорядок)
	
	Для каждого СтрокаПоЗапросу Из СтрокиПоЗапросу Цикл
		
		Если СтрокаПоЗапросу.Строки.Количество() > 0 Тогда
			// Есть подчиненные пакеты/задачи
			Если ЗначениеЗаполнено(СтрокаПоЗапросу.Пакет) И (РодительСтрокаЭтапов = Неопределено
				Или РодительСтрокаЭтапов.Этап <> СтрокаПоЗапросу.Пакет) Тогда
				СтрокаЭтапа = СтрокиЭтапов.Добавить();
				СтрокаЭтапа.Этап = СтрокаПоЗапросу.Пакет;
				СтрокаЭтапа.ИндексКартинки = 0;
				СтрокаЭтапа.ИдентификаторСтроки = Новый УникальныйИдентификатор;
				СтрокаЭтапа.ОтветственныйИсполнитель = СтрокаПоЗапросу.Ответственный;
				СтрокаЭтапа.ОтсрочкаСтартаДней 	  = СтрокаПоЗапросу.МинимальноеСмещение;
				СтрокаЭтапа.ПродолжительностьДней = СтрокаПоЗапросу.ПродолжительностьДнейЭтапа;
				
				СтрокаЭтапа.ПорядокВШаблоне = СтрокаПоЗапросу.ПорядокГруппы;
				МаксПорядок = Макс(МаксПорядок, СтрокаЭтапа.ПорядокВШаблоне);
			
				МаксПорядокВнутренний = 0;
				ЗаполнитьДеревоПоЭтапамРекурсивноВводОтЗадачи(СтрокаЭтапа, СтрокаЭтапа.Строки, СтрокаПоЗапросу.Строки, Длительность, МаксПорядокВнутренний);
				
				СтрокаЭтапа.МаксПорядокВГруппе = МаксПорядокВнутренний;
				
				СтрокаЭтапа.Строки.Сортировать("ПорядокВШаблоне");				
			Иначе
				ЗаполнитьДеревоПоЭтапамРекурсивноВводОтЗадачи(РодительСтрокаЭтапов, СтрокиЭтапов, СтрокаПоЗапросу.Строки, Длительность, МаксПорядок);
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаПоЗапросу.Этап) И НЕ СтрокаПоЗапросу.ПометкаУдаления Тогда
			
			СтрокаЭтапа = СтрокиЭтапов.Добавить();
			СтрокаЭтапа.Этап 				  = СтрокаПоЗапросу.Этап;
			
			СтрокаЭтапа.ПорядокВШаблоне = СтрокаПоЗапросу.ПорядокЗадачи;
			МаксПорядок = Макс(МаксПорядок, СтрокаЭтапа.ПорядокВШаблоне);
			
			СтрокаЭтапа.ОтсрочкаСтартаДней = СтрокаПоЗапросу.ОтсрочкаСтартаДней;
			СтрокаЭтапа.ОтсрочкаОтПредыдущейЗадачи = СтрокаПоЗапросу.ОтсрочкаОтПредыдущейЗадачи;			
			СтрокаЭтапа.ПродолжительностьДней = СтрокаПоЗапросу.ПродолжительностьДней;
			СтрокаЭтапа.ТипЭтапа 			  = СтрокаПоЗапросу.ТипЭтапа;
			СтрокаЭтапа.Важность 			  = СтрокаПоЗапросу.Важность;
			СтрокаЭтапа.ИндексКартинки   	  = ?(СтрокаЭтапа.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.Этап, 1, 3);
			СтрокаЭтапа.ИдентификаторСтроки	  = Новый УникальныйИдентификатор;
			Если СтрокаЭтапа.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
				ТекДлительность = СтрокаЭтапа.ОтсрочкаСтартаДней + 1;
			Иначе
				ТекДлительность = СтрокаЭтапа.ОтсрочкаСтартаДней + СтрокаЭтапа.ПродолжительностьДней;
			КонецЕсли;
			Если ТекДлительность > Длительность Тогда
				Длительность = ТекДлительность;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонЗадачи(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЭтапЗавершение", 
					 	 ЭтотОбъект, Новый Структура("ИмяКоманды", Команда.Имя));
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонКТ(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЭтапЗавершение", 
					 	 ЭтотОбъект, Новый Структура("ИмяКоманды", Команда.Имя));
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонЭтапа(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьПакетЗадачЗавершение", 
					 	 ЭтотОбъект, Новый Структура("ИмяКоманды", Команда.Имя));
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанные(ОписаниеОповещенияОЗавершении)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВопросЗаписатьДанныеЗавершение",
			 ЭтотОбъект,
			 ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Данные еще не записаны."
"Добавление возможно только после записи данных. Записать?';en='Data is not yet recorded."
"The addition is only possible after recording data. Record?'"), 
					   РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтапЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		ДобавитьЭтапКонтрольнуюТочку(ПараметрыВыполнения.ИмяКоманды);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЭтапЗавершение()

&НаКлиенте
Процедура ДобавитьПакетЗадачЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		ДобавитьПакетЗадач();
	КонецЕсли;
	
КонецПроцедуры // ДобавитьПакетЗадач()

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанныеЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтапКонтрольнуюТочкуПослеЗаписиНового(ЗначениеВыбора)
	
	Если Объект.РежимВводаОтЗадачи Тогда
		ЗаполнитьДеревоПоЭтапамВводОтЗадачи();
	Иначе
		ЗаполнитьДеревоПоЭтапам();
	КонецЕсли;
	
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
	
	Если РежимРедактированияМодели = "Графически" Тогда
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
		
		ИнициализироватьТабличныйДокументМодели();

		ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, ЭлементыДерева, Элементы.ДеревоМодели.ТекущаяСтрока);
		
		ОбновитьДиаграмму();
		ВывестиКартинкиВТабличныйДокументНаСервере();
		
	Иначе
		УстановитьКурсорНаЭтап(ЗначениеВыбора);
	КонецЕсли;

КонецПроцедуры // ДобавитьЭтапКонтрольнуюТочкуПослеЗаписиНового()

&НаСервере
Процедура УстановитьКурсорНаЭтап(ЗначениеВыбора)
	
	ИдентификаторЭтапа = НайтиНовыйЭтап(ДеревоМодели.ПолучитьЭлементы(), ЗначениеВыбора);
	Элементы.ДеревоМодели.ТекущаяСтрока = ИдентификаторЭтапа;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиНовыйЭтап(Строки, Этап)
	
	Для каждого Строка Из Строки Цикл
		Если Строка.Этап = Этап Тогда
			Возврат Строка.ПолучитьИдентификатор();
		КонецЕсли;
		СтрокиПолученные = Строка.ПолучитьЭлементы();
		Если СтрокиПолученные.Количество() > 0 Тогда
			ИдентификаторЭтапа = НайтиНовыйЭтап(СтрокиПолученные, Этап);
			Если ИдентификаторЭтапа <> Неопределено Тогда
				Возврат ИдентификаторЭтапа;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция МаксПорядокКорняДереваМодели()
	
	Если ДеревоМодели.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат ДеревоМодели.ПолучитьЭлементы()[0].МаксПорядокВГруппе;
	
КонецФункции

&НаСервере
Функция МаксПорядокВГруппе(Этап)
	
	Если Этап = Неопределено Тогда // Выделен корень дерева
		Возврат МаксПорядокКорняДереваМодели();
	КонецЕсли;
	
	РодительЭтапа = Неопределено;
	Если ТипЗнч(Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
		//РодительЭтапа = Этап.Родитель;
		РодительЭтапа = Этап;
	ИначеЕсли ТипЗнч(Этап) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана") Тогда
		РодительЭтапа = Этап.ШаблонЭтапаПроекта;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РодительЭтапа) Тогда
		Возврат МаксПорядокКорняДереваМодели(); // Выделен этап строк корня дерева
	КонецЕсли;
	
	ИдентификаторЭтапа = НайтиНовыйЭтап(ДеревоМодели.ПолучитьЭлементы(), РодительЭтапа);
	
	СтрокаРодителяЭтапа = ДеревоМодели.НайтиПоИдентификатору(ИдентификаторЭтапа);
	
	Если СтрокаРодителяЭтапа = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат СтрокаРодителяЭтапа.МаксПорядокВГруппе;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьЭтапКонтрольнуюТочку(ИмяКоманды)
	
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	Если ИмяКоманды = "ДобавитьШаблонЗадачи" Тогда
		ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап");
	
	ИначеЕсли ИмяКоманды = "ДобавитьШаблонКонтрольнойТочки" Тогда	
		ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка");
	
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ШаблонПроекта"  , Объект.Ссылка);
	ЗначенияЗаполнения.Вставить("ТипЭтапа", ТипЭтапа);
	ЗначенияЗаполнения.Вставить("ПорядокВШаблоне", МаксПорядокВГруппе(ТекущиеДанные.Этап) + 1);
	
	Если ТипЗнч(ТекущиеДанные.Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
		ЗначенияЗаполнения.Вставить("ШаблонЭтапаПроекта", ТекущиеДанные.Этап);
	Иначе
		РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
		Если НЕ РодительСтроки = Неопределено Тогда
			ЗначенияЗаполнения.Вставить("ШаблонЭтапаПроекта", РодительСтроки.Этап);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.CRM_ШаблонЭтапаКалендарногоПлана.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор, , , , 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры // ДобавитьЭтапКонтрольнуюТочку()

&НаКлиенте
Процедура ДобавитьПакетЗадач()
	
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ШаблонПроекта", Объект.Ссылка);	
	ЗначенияЗаполнения.Вставить("ПорядокВШаблоне", МаксПорядокВГруппе(ТекущиеДанные.Этап) + 1);
	
	Если ТипЗнч(ТекущиеДанные.Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
		ЗначенияЗаполнения.Вставить("Родитель", ТекущиеДанные.Этап);
	Иначе
		РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
		Если НЕ РодительСтроки = Неопределено Тогда
			ЗначенияЗаполнения.Вставить("Родитель", РодительСтроки.Этап);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.CRM_ШаблоныЭтаповПроектов.Форма.ФормаЭлементаПростая",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры // ДобавитьПакетЗадач()

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ЭлементДерево, ИмяРеквизитаФормы, Развернуть = Истина)
	
	Если Развернуть Тогда
		СтрокиДерева = ЭтотОбъект[ИмяРеквизитаФормы].ПолучитьЭлементы();
	Иначе
		СтрокиДерева = ЭтотОбъект[ИмяРеквизитаФормы].ПолучитьЭлементы()[0].ПолучитьЭлементы();
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если Развернуть Тогда
			ЭлементДерево.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		Иначе
			ЭлементДерево.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиОбновитьКоманда(Команда)
	
	ДеревоМоделиОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиОбновить(ИспользоватьОбработчикОжидания = Истина)
	
	ТекущийЭтапДерева = Неопределено;
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийЭтапДерева = ТекущиеДанные.Этап;
	КонецЕсли;
	
	Если ИспользоватьОбработчикОжидания Тогда
		ПодключитьОбработчикОжидания("Подключаемый_Обновить", 0.1, Истина);
	Иначе
		Подключаемый_Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Обновить()
	
	Если Объект.РежимВводаОтЗадачи Тогда
		ЗаполнитьДеревоПоЭтапамВводОтЗадачи();
	Иначе
		ЗаполнитьДеревоПоЭтапам();
	КонецЕсли;
	
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
		
	Если РежимРедактированияМодели = "Графически" Тогда
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
		ИнициализироватьТабличныйДокументМодели();
		
		ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, ЭлементыДерева);
		
		ОбновитьДиаграмму();
		ВывестиКартинкиВТабличныйДокументНаСервере();
		
	Иначе
		
		УстановитьКурсорНаЭтап(ТекущийЭтапДерева);
		
		ВидДней = ?(Объект.CRM_УчитыватьПроизводственныйКалендарь, "рабочих", "календарных");
		Элементы.ДеревоМоделиОтсрочкаОтПредыдущейЗадачи.Заголовок =
			СтрШаблон(НСтр("ru = 'От начала предыд. задачи (%1 дней)'"), ВидДней);
		Элементы.ДеревоМоделиОтсрочкаСтартаДней.Заголовок =
			СтрШаблон(НСтр("ru = 'От начала проекта (%1 дней)'"), ВидДней);
		Элементы.ДеревоМоделиПродолжительностьДней.Заголовок =
			СтрШаблон(НСтр("ru = 'Длительность (%1 дней)'"), ВидДней);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьЭтап(Команда)
	
	ДеревоМоделиВыбор(Элементы.ДеревоМодели, Элементы.ДеревоМодели.ТекущаяСтрока, Неопределено, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиЭтап(ЭтапПриемник, ЭтапПереносимый)
	
	ЭтапПереносимыйОбъект = ЭтапПереносимый.ПолучитьОбъект();
	
	Если ТипЗнч(ЭтапПереносимыйОбъект) = Тип("СправочникОбъект.CRM_ШаблоныЭтаповПроектов") Тогда
		ЭтапПереносимыйОбъект.Родитель = ЭтапПриемник;
	ИначеЕсли ТипЗнч(ЭтапПереносимыйОбъект) = Тип("ДокументОбъект.CRM_ШаблонЭтапаКалендарногоПлана") Тогда
		ЭтапПереносимыйОбъект.ШаблонЭтапаПроекта = ЭтапПриемник;
	Иначе 
		Возврат;
	КонецЕсли;
	
	ЭтапПереносимыйОбъект.Записать();
	
	Если ТипЗнч(ЭтапПереносимыйОбъект) = Тип("СправочникОбъект.CRM_ШаблоныЭтаповПроектов") Тогда
		CRM_УправлениеПроектамиСервер.ПересчитатьДеревоШаблонаПроекта(Объект.Ссылка);
	КонецЕсли;
	
	Если Объект.РежимВводаОтЗадачи Тогда
		ЗаполнитьДеревоПоЭтапамВводОтЗадачи();
	Иначе
		ЗаполнитьДеревоПоЭтапам();
	КонецЕсли;
	
	УстановитьКурсорНаЭтап(ЭтапПереносимый);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьЗацикливанияУровнейПриПереносе(ЭтапПриемник, ЭтапПереносимый)
	
	Если ЭтапПриемник = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат ЭтапПриемник.ПринадлежитЭлементу(ЭтапПереносимый);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДеревоМоделиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ИмяКоманды = Элементы.ДеревоМоделиКнопкаДобавитьЗадачу.ИмяКоманды;
	Команда = Команды.Найти(ИмяКоманды);
	ДобавитьШаблонЗадачи(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ПометитьНаУдаление(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтапПриемник = Элемент.ДанныеСтроки(Строка).Этап;
	
	Если ТипЗнч(ЭтапПриемник) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана")  Тогда
		
		Родитель = Элемент.ДанныеСтроки(Строка).ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
		    ЭтапПриемник = ПредопределенноеЗначение("Справочник.CRM_ШаблоныЭтаповПроектов.ПустаяСсылка");
		Иначе
			ЭтапПриемник = Родитель.Этап;
		КонецЕсли;
	КонецЕсли;
	
	ЭтапПереносимый = Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение).Этап;
	
	ПеренестиЭтап(ЭтапПриемник, ЭтапПереносимый);
	
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Этап = Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение).Этап;

	Если НЕ ЗначениеЗаполнено(Этап) Тогда
		Выполнение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка = Неопределено Тогда
		// перенос на "пустоту" поля
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	ЭтапПриемник		 = Элемент.ДанныеСтроки(Строка).Этап;
	ЭтапПереносимый		 = Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение).Этап;
	ПриемникЭтоЗадача 	 = (ТипЗнч(ЭтапПриемник) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана"));
	ПереносимыйЭтоЗадача = (ТипЗнч(ЭтапПереносимый) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана"));
	
	Если ПриемникЭтоЗадача  Тогда
		РодительПриемника = Элемент.ДанныеСтроки(Строка).ПолучитьРодителя();
		Если РодительПриемника = Неопределено Тогда
			ЭтапПриемникРодитель = ПустойШаблонПакета;
		Иначе
			ЭтапПриемникРодитель = РодительПриемника.Этап;
		КонецЕсли;
	Иначе
		ЭтапПриемникРодитель = ЭтапПриемник;
	КонецЕсли;
	
	РодительПереносимого = Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение).ПолучитьРодителя();
	Если РодительПереносимого = Неопределено Тогда
		ЭтапПереносимыйРодитель = ПустойШаблонПакета;
	ИначеЕсли НЕ ПереносимыйЭтоЗадача И ПриемникЭтоЗадача И ЭтапПриемникРодитель = ЭтапПереносимый Тогда
		// перенос пакета на подчиненную задачу
		ЭтапПереносимыйРодитель = ЭтапПереносимый;
	Иначе
		ЭтапПереносимыйРодитель = РодительПереносимого.Этап;
	КонецЕсли;
	
	Если (ЭтапПриемникРодитель = ЭтапПереносимыйРодитель)
		 Или (НЕ ПереносимыйЭтоЗадача И ЕстьЗацикливанияУровнейПриПереносе(ЭтапПриемникРодитель, ЭтапПереносимый)) Тогда
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Этап = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	Если Элемент.ТекущийЭлемент.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		
		Этап = ДанныеСтроки.Этап;
		
		ПараметрыФормы = Новый Структура("Ключ", Этап);
		
		ВерсияДанныхЭтапа = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Этап, "ВерсияДанных");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьПослеЗаписиЭтапа", ЭтотОбъект,
			 Новый Структура("Ссылка, ВерсияДанных", Этап,
			 ВерсияДанныхЭтапа));
		
		Если ТипЗнч(Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
			
			ОткрытьФорму("Справочник.CRM_ШаблоныЭтаповПроектов.ФормаОбъекта",
				ПараметрыФормы,
				ЭтотОбъект,
				УникальныйИдентификатор, , ,
				ОписаниеОповещения, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
			
		ИначеЕсли ТипЗнч(Этап) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана") Тогда
			
			ОткрытьФорму("Документ.CRM_ШаблонЭтапаКалендарногоПлана.ФормаОбъекта",
				ПараметрыФормы,
				ЭтотОбъект,
				УникальныйИдентификатор, , ,
				ОписаниеОповещения, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
			
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДанныеСтроки.Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов")	Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПослеЗаписиЭтапа(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		 И ДополнительныеПараметры.Свойство("Ссылка") И ДополнительныеПараметры.Свойство("ВерсияДанных") Тогда
		
		Если CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ДополнительныеПараметры.Ссылка,
			 "ВерсияДанных") <> ДополнительныеПараметры.ВерсияДанных Тогда
		
			Если Объект.РежимВводаОтЗадачи Тогда
				ЗаполнитьДеревоПоЭтапамВводОтЗадачи();
			Иначе
				ЗаполнитьДеревоПоЭтапам();
			КонецЕсли;
			
			РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
			УстановитьКурсорНаЭтап(ДополнительныеПараметры.Ссылка);
		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПослеЗаписиЭтапа()

&НаСервереБезКонтекста
Процедура ПометитьНаУдалениеНаСервере(Этап)
	
	ЭтапОбъект = Этап.ПолучитьОбъект();
	ЭтапОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеЭтапЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекущийЭтап = Элементы.ДеревоМодели.ТекущиеДанные.Этап;
		ПометитьНаУдалениеНаСервере(ТекущийЭтап);
		
		ДеревоМоделиОбновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	Если Элементы.ДеревоМодели.ТекущиеДанные  = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭтап = Элементы.ДеревоМодели.ТекущиеДанные.Этап;
	Если ЗначениеЗаполнено(ТекущийЭтап) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПометитьНаУдалениеЭтапЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Удалить из шаблона текущий элемент?'"), РежимДиалогаВопрос.ДаНет); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьКопированияЗадачи()
	
	ТекДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Этап = Неопределено;
	Иначе
		Этап = ТекДанные.Этап;
	КонецЕсли;
	Элементы.ДеревоМоделиКопироватьЗадачу.Доступность =
		(ТипЗнч(Этап) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана"));
	Элементы.ДеревоМоделиКонтекстноеМенюКопироватьЗадачу.Доступность = Элементы.ДеревоМоделиКопироватьЗадачу.Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьЗадачу(Команда)
	
	ТекДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Этап = ТекДанные.Этап;
	Если Этап = Неопределено ИЛИ ТипЗнч(Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
		Возврат;
	Иначе
		ОткрытьФорму("Документ.CRM_ШаблонЭтапаКалендарногоПлана.Форма.ФормаДокумента",
			 Новый Структура("ЗначениеКопирования", Этап),
			 ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПриИзменении(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	ИмяРеквизита = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "ДеревоМодели", "");
	Значение = ТекДанные[ИмяРеквизита];
	Если ПриИзмененииЗначенияРеквизитыЭтапа(ИмяРеквизита, ТекДанные.ПолучитьИдентификатор(), Значение) Тогда
		ДеревоМоделиОбновить();
	Иначе
		ТекДанные[ИмяРеквизита] = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииЗначенияРеквизитыЭтапа(ИмяРеквизита, ИдентификаторСтроки, Значение)
	ТекДанные = ДеревоМодели.НайтиПоИдентификатору(ИдентификаторСтроки);
	День = 86400;
	ДанныеЭтапаКалендарногоПлана = Новый Структура;
	Если ИмяРеквизита = "ОтсрочкаСтартаДней" Тогда
		ДанныеЭтапаКалендарногоПлана.Вставить("Смещение", Значение);
	КонецЕсли;
	Если ИмяРеквизита = "ОтсрочкаОтПредыдущейЗадачи" Тогда
		ДанныеЭтапаКалендарногоПлана.Вставить("СмещениеОтЗадачи", Значение);
	КонецЕсли;
	ДанныеЭтапаКалендарногоПлана.Вставить(ИмяРеквизита, Значение);
	ИзменитьЭтапКалендарногоПлана(ТекДанные.Этап, ДанныеЭтапаКалендарногоПлана);
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ИзменитьЭтапКалендарногоПлана(Этап, ДанныеЭтапаКалендарногоПлана)
	
	ЭтапКалендарногоПлана = Этап.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(ЭтапКалендарногоПлана, ДанныеЭтапаКалендарногоПлана);
	ЭтапКалендарногоПлана.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Этап = ТекДанные.Этап;
	ИмяРеквизита = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "ДеревоМодели", "");
	Если Этап = Неопределено ИЛИ ТипЗнч(Этап) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
		Отказ = Истина;
	Иначе
		Отказ = НЕ РазрешеноРедактированиеЭлемента(ИмяРеквизита, ТекДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПриАктивизацииСтроки(Элемент)
	ДоступностьКопированияЗадачи();
КонецПроцедуры

&НаСервере
Процедура ОбновитьДиаграмму()

	День = 86400;
	МаксимальнаяДата = NULL;
	МинимальнаяДата  = NULL;
	Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	
	ДиаграммаРисунок = ТабличныйДокументМодели.Рисунки["ДиаграммаГанта"];
	ДиаграммаРисунок.Расположить(ТабличныйДокументМодели.Область(1,
		 Число(СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ДиаграммаГанта").Представление),
								 ТабличныйДокументМодели.ВысотаТаблицы, Число(СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ДиаграммаГанта").Представление)));
	
	ДиаграммаОбъект = ДиаграммаРисунок.Объект;
	ДиаграммаОбъект.ОтображениеТекстаЗначения = ОтображениеТекстаЗначенияДиаграммыГанта.Право;
	ДиаграммаОбъект.Обновление = Ложь;
	ДиаграммаОбъект.Анимация = АнимацияДиаграммы.НеИспользовать;
	
	ДиаграммаОбъект.Очистить();

	ДиаграммаОбъект.ОтображениеИнтервала  = ОтображениеИнтервалаДиаграммыГанта.Градиент;
	
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	ДатаНачала = ТекущаяДата;
	
	СерияПлан = ДиаграммаОбъект.Серии.Добавить();
	
	СерияПлан.ШтриховкаМеждуИнтервалами = Ложь;
	
	Для Сч = 3 По ТабличныйДокументМодели.ВысотаТаблицы Цикл
		СтрокаОбласти = "R" + Формат(Сч, "ЧН=0; ЧГ=");
		
		НомерКолонки = СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ИдентификаторСтрокиДерева").Представление;
		ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C" + НомерКолонки);
		
		ДанныеСтрокиДерева = ДеревоМодели.НайтиПоИдентификатору(ОбластьИдентификатора.Расшифровка);
		Если ДанныеСтрокиДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Объект.CRM_УчитыватьПроизводственныйКалендарь Тогда
			НачалоПлан = CRM_КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, ТекущаяДата, ДанныеСтрокиДерева.ОтсрочкаСтартаДней);
		Иначе
			НачалоПлан = ТекущаяДата + ДанныеСтрокиДерева.ОтсрочкаСтартаДней * День;
		КонецЕсли;
		
		Если ДанныеСтрокиДерева.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
			ОкончаниеПлан = ?(НачалоПлан = '00010101', НачалоПлан, КонецДня(НачалоПлан));
		ИначеЕсли ДанныеСтрокиДерева.ПродолжительностьДней = 0 Тогда
			ОкончаниеПлан = НачалоДня(НачалоПлан) - 1;
		ИначеЕсли Объект.CRM_УчитыватьПроизводственныйКалендарь Тогда
			Продолжительность = Макс(0, ДанныеСтрокиДерева.ПродолжительностьДней - 1);
			ОкончаниеПлан = CRM_КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь,
				НачалоПлан, Продолжительность, Ложь, Истина);
		Иначе
			ОкончаниеПлан = КонецДня(НачалоПлан + (ДанныеСтрокиДерева.ПродолжительностьДней - 1) * День);
		КонецЕсли;
		
		МассивИнтервалов = ПолучитьМассивИнтерваловЭтапа(НачалоПлан, ОкончаниеПлан);
		
		ИдентифкаторТочки = ДанныеСтрокиДерева.ИдентификаторСтроки;
		
		Родитель = ДанныеСтрокиДерева.ПолучитьРодителя();
		Если Родитель <> Неопределено Тогда
			ИдентифкаторТочкиРодителя = Родитель.ИдентификаторСтроки;
		КонецЕсли;
		
		Точка = ДиаграммаОбъект.УстановитьТочку(ИдентифкаторТочки, ИдентифкаторТочкиРодителя);
		Точка.Текст = " ";
		ЗначениеПлан = ДиаграммаОбъект.ПолучитьЗначение(Точка, СерияПлан);
		ЗначениеПлан.Очистить();
		
		Этап = ДанныеСтрокиДерева.Этап;
		
		// Если надо, корректируем максимальную и минимальную даты.
		Если МаксимальнаяДата = NULL 
		  ИЛИ МаксимальнаяДата < НачалоПлан + (ОкончаниеПлан - НачалоПлан) Тогда
			МаксимальнаяДата = НачалоПлан + (ОкончаниеПлан - НачалоПлан);
		КонецЕсли;
		
		Если МинимальнаяДата = NULL Или МинимальнаяДата > НачалоПлан Тогда
			МинимальнаяДата = НачалоПлан;
		КонецЕсли;
		
		ЗначениеПлан.Редактирование = Истина;
		
		Если ТипЗнч(Этап) <> Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана")  Тогда
			
			ЦветИнтерваловЗначения = ЦветИнтервалаПакетаПлан;
			
		ИначеЕсли ТипЗнч(Этап) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана")  Тогда
			
			Если ДанныеСтрокиДерева.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
				ЦветИнтерваловЗначения = ЦветИнтервалаКонтрольнойТочкиПлан;
			Иначе
				ЦветИнтерваловЗначения = ЦветИнтервалаЭтапаПлан;
			КонецЕсли;
			
		Иначе
			ЦветИнтерваловЗначения = Неопределено;
		КонецЕсли;
		
		// Вывод плана
		Для Каждого ТекИнтервал Из МассивИнтервалов Цикл
			ИнтервалПлан = ЗначениеПлан.Добавить();
			ИнтервалПлан.Начало = ТекИнтервал.Начало;
			ИнтервалПлан.Конец  = ТекИнтервал.Конец;
			ИнтервалПлан.Цвет   = ЦветИнтерваловЗначения;
		КонецЦикла;
		
	КонецЦикла;
	
	Пока Истина Цикл
		Попытка
			ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Получить(0).Видимость = Ложь;
			ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Удалить(ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Получить(1));
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	ШиринаКолонки = ДиаграммаРисунок.Ширина;
	Попытка
		Дни = (МаксимальнаяДата - МинимальнаяДата) / 86400;
	Исключение
		Дни = 7;
	КонецПопытки;
	Если Не ((ШиринаКолонки >= 283 И Дни <= 78)  ИЛИ 
		 (ШиринаКолонки >= 181 И Дни <= 58)  ИЛИ 
		 (ШиринаКолонки >= 140 И Дни <= 48)  ИЛИ 
		 (ШиринаКолонки >= 74 И Дни <= 38)  ИЛИ 
		 (ШиринаКолонки >= 85 И Дни <= 33)  ИЛИ 
		 (ШиринаКолонки >= 38 И Дни <= 29)  ИЛИ 
		 (ШиринаКолонки >= 48 И Дни <= 31)  ИЛИ 
		 (ШиринаКолонки >= 85 И Дни <= 33)  ИЛИ 
		  (ШиринаКолонки >= 555 И Дни <= 133))
		Тогда
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.Месяц;
		ЭлементШкалы.ЛинииДелений = Новый Линия( ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.Неделя;
		ЭлементШкалы.Формат	= "ДФ='ddd d'";
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
	Иначе
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.Неделя;
		ЭлементШкалы.ЛинииДелений = Новый Линия( ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.День;
		ЭлементШкалы.ФорматДня = ФорматДняШкалыВремени.ДеньНедели;
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
	КонецЕсли;
	
	ДиаграммаОбъект.ПоказатьУровеньТочек(0);
	ПолосаРегулированияШириныДиаграммыГанта =
		ТабличныйДокументМодели.Область("Служебная_ДиаграммаГанта").ШиринаКолонки / 2;
	
	ДиаграммаОбъект.РастягиваниеПоВертикали = РастягиваниеПоВертикалиДиаграммыГанта.РастягиватьСтрокиИДанные;
	ДиаграммаОбъект.Обновление = Истина;
	
КонецПроцедуры // ОбновитьДиаграмму()

&НаСервере
Функция ПолучитьМассивИнтерваловЭтапа(НачалоПлан, ОкончаниеПлан)
	
	МассивИнтервалов = Новый Массив;
	Если Объект.CRM_УчитыватьПроизводственныйКалендарь Тогда
		
		СписокДат = CRM_КалендарныеГрафики.ПолучитьРабочиеДниПериода(НачалоПлан, ОкончаниеПлан);
		
		СтруктураИнтервала = Новый Структура("Начало, Конец");
		ДатаЭлемента = '00010101';
		Для Каждого ТекЭлемент Из СписокДат Цикл
			
			Если СтруктураИнтервала.Начало = Неопределено Тогда
				СтруктураИнтервала.Начало = ТекЭлемент.Значение;
			КонецЕсли;
			
			ИндексСледующего = СписокДат.Индекс(ТекЭлемент) + 1;
			Если ИндексСледующего = СписокДат.Количество() Тогда
				СтруктураИнтервала.Конец = КонецДня(ТекЭлемент.Значение);
				МассивИнтервалов.Добавить(СтруктураИнтервала);
				Прервать;
			КонецЕсли;
			
			СледЭлемент = СписокДат[ИндексСледующего];
			Если (СледЭлемент.Значение - ТекЭлемент.Значение) > 86400 Тогда
				СтруктураИнтервала.Конец = КонецДня(ТекЭлемент.Значение);
				МассивИнтервалов.Добавить(СтруктураИнтервала);
				СтруктураИнтервала = Новый Структура("Начало, Конец");
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		СтруктураИнтервала = Новый Структура("Начало, Конец");
		СтруктураИнтервала.Начало = НачалоПлан;
		СтруктураИнтервала.Конец  = ОкончаниеПлан;
		МассивИнтервалов.Добавить(СтруктураИнтервала);
	КонецЕсли;
	
	Возврат МассивИнтервалов;
	
КонецФункции

&НаСервере
Процедура КалендарныеГрафикиПриЧтенииСозданииНаСервере()

	СоответствиеКоллекцииКартинок = Новый Соответствие;
	СоответствиеКоллекцииКартинок.Вставить(1, БиблиотекаКартинок.CRM_ЭтапПроцесса);
	СоответствиеКоллекцииКартинок.Вставить(0, БиблиотекаКартинок.CRM_ЭтапПроцессаСвязи);
	СоответствиеКоллекцииКартинок.Вставить(3, БиблиотекаКартинок.CRM_КонтрольнаяТочкаПроцесса);
	СоответствиеКоллекцииКартинок.Вставить(2, БиблиотекаКартинок.CRM_КонтрольнаяТочкаПроцессаСвязи);
	
	СоответствиеКоллекцииКартинокТипаЭтапа = Новый ФиксированноеСоответствие(СоответствиеКоллекцииКартинок);
	
	// Цвета интервалов Ганта
	ЦветИнтервалаЭтапаПлан		      = ЦветаСтиля.CRM_ЦветИнтервалаЭтапаПлан;
	ЦветИнтервалаКонтрольнойТочкиПлан = ЦветаСтиля.CRM_ЦветИнтервалаКонтрольнойТочкиПлан;
	ЦветИнтервалаПакетаПлан			  = ЦветаСтиля.CRM_ЦветИнтервалаПакетаПлан;
	ЦветНавигации					  = ЦветаСтиля.ЦветНавигации;
	ЦветФонаПоля					  = ЦветаСтиля.ЦветФонаПоля;
	
	Если НЕ ЗначениеЗаполнено(РежимРедактированияМодели) Тогда
		времРежимРедактированияМодели = CRM_ХранилищеНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "РежимРедактированияМодели");
		РежимРедактированияМодели = ?(НЕ ЗначениеЗаполнено(времРежимРедактированияМодели), "Дерево",
			 времРежимРедактированияМодели);
	КонецЕсли;
	
	ПрочитатьДанныеМоделиПроцесса();
	
	УстановитьРежимРедактирования(ЭтотОбъект);
	
	Если РежимРедактированияМодели = "Графически" Тогда
	
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();

		ИнициализироватьТабличныйДокументМодели();
		ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, ЭлементыДерева);
		
		ОбновитьДиаграмму();
		ВывестиКартинкиВТабличныйДокументНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // КалендарныеГрафикиПриЧтенииСозданииНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеТабличногоДокументаРекурсивно(Форма, ЭлементыДерева, ТекущийИдентификатор = Неопределено)

	ОбластьЭталон = Форма.ТабличныйДокументМодели.Область(2, 1, 2, 1);
	ОбластьЭталон.ВысотаСтроки = 39;
	
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		СтрокаДерева.АдресСтрокиОбласти = "";
		ЗаполнитьДанныеСтрокиТабличногоДокументаМодели(Форма, СтрокаДерева, ОбластьЭталон, ТекущийИдентификатор);
		ЗаполнитьДанныеТабличногоДокументаРекурсивно(Форма, СтрокаДерева.ПолучитьЭлементы(), ТекущийИдентификатор);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДанныеТабличногоДокументаРекурсивно()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеСтрокиТабличногоДокументаМодели(Форма, СтрокаДерева,
	 ОбластьЭталон = Неопределено,
	 ТекущийИдентификатор = Неопределено)
	
	ТабличныйДокументМодели = Форма.ТабличныйДокументМодели;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.АдресСтрокиОбласти) Тогда
		СтрокаОбласти = "R" + Формат(ТабличныйДокументМодели.ВысотаТаблицы + 1, "ЧН=0; ЧГ=");
		СтрокаДерева.АдресСтрокиОбласти = СтрокаОбласти;
		
	Иначе
		СтрокаОбласти = СтрокаДерева.АдресСтрокиОбласти;
		
	КонецЕсли;
	
	// Оформление
	ОбластьСтроки = Форма.ТабличныйДокументМодели.Область(СтрокаОбласти);
	ЦветФона = Новый Цвет(255, 255, 255); // для веб-клиента необходимо явно указанть цвет
	
	Для Сч = 1 По Форма.СписокОбластейТабличногоДокумента.Количество() - 1 Цикл  // по всем выведенным колонкам, кроме последней (в которой гант)
		ОбластьРедактирования = Форма.ТабличныйДокументМодели.Область(СтрокаОбласти + "C" + Формат(Сч, "ЧН=0; ЧГ="));
		ОбластьРедактирования.ЦветФона = ЦветФона;
	
	КонецЦикла;
		
	ОбластьРедактирования = Форма.ТабличныйДокументМодели.Область(СтрокаОбласти + "C1"); // Этап всегда первая колонка С1
	ОбластьРедактирования.Отступ = 2;
		
	Родитель = СтрокаДерева.ПолучитьРодителя();
	Если Родитель <> Неопределено  Тогда
	  // И ЗначениеЗаполнено(Родитель.ИдентификаторСтроки) Тогда
		ОбластьДобавленияРодитель = ТабличныйДокументМодели.Область(Родитель.АдресСтрокиОбласти 
			+ "C1"); // Этап всегда первая колонка С1
		
		// Отрисуем иерархию
		ОбластьРедактирования.Отступ = ОбластьДобавленияРодитель.Отступ + 2;
		
	КонецЕсли;
	
	Идентификатор = СтрокаДерева.ПолучитьИдентификатор();
	
	// Этап

	ОбластьРедактированияШрифт 	 = Новый Шрифт(, 8);
	Если ЗначениеЗаполнено(СтрокаДерева.Этап) Тогда
		
		ОбластьРедактирования.Текст 	  = СтрокаДерева.Этап;
		ОбластьРедактирования.Расшифровка = СтрокаДерева.Этап;
		
		Если СтрокаДерева.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиВзаимодействия.Высокая") Тогда
			ОбластьРедактированияШрифт 	 = Новый Шрифт(, 8, Истина);
		ИначеЕсли СтрокаДерева.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиВзаимодействия.Низкая") Тогда
			ОбластьРедактирования.ЦветТекста = Новый Цвет(160, 160, 160);
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.Этап)
			 И ТипЗнч(СтрокаДерева.Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
			ОбластьРедактированияШрифт = Новый Шрифт(, 9, Истина);
		КонецЕсли;
		
	Иначе
		ОбластьРедактированияШрифт = Новый Шрифт(, 9, Истина);
		ОбластьРедактирования.Текст = Форма.Объект.Наименование;
	КонецЕсли;
	ОбластьРедактирования.Шрифт = ОбластьРедактированияШрифт;
	
	ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, ОбластьЭталон);
	
	Если Идентификатор = ТекущийИдентификатор Тогда
		Форма.Элементы.ТабличныйДокументМодели.ТекущаяОбласть = ОбластьРедактирования;
	
	КонецЕсли;
		
	// Заполнение данных настроенных колонок
	
	Для каждого ЗначениеСписка Из Форма.СписокОбластейТабличногоДокумента Цикл
		
		ИмяОбласти = ЗначениеСписка.Значение;
		Если СтрНайти(ВРег(ИмяОбласти), "СЛУЖЕБНАЯ_") Тогда
			Продолжить;
		КонецЕсли;
		
		НомерКолонки = Форма.СписокОбластейТабличногоДокумента.НайтиПоЗначению(ИмяОбласти).Представление;
		ОбластьРедактирования = ТабличныйДокументМодели.Область(СтрокаОбласти + "C" + НомерКолонки);
		ОбластьРедактирования.Расшифровка 	   = ИмяОбласти;
		
		// Если ТипЗнч(СтрокаДерева.Этап) <> Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
			
			ОбластьРедактирования.СодержитЗначение = Истина;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(СтрокаДерева[ИмяОбласти]));
			ОбластьРедактирования.ТипЗначения = Новый ОписаниеТипов(МассивТипов, , ,
				 Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный), ,
																					Новый КвалификаторыДаты(ЧастиДаты.Дата));
			ОбластьРедактирования.Значение    = СтрокаДерева[ИмяОбласти];
			ОбластьРедактирования.Шрифт = ОбластьРедактированияШрифт;
			ОбластьРедактирования.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
		//КонецЕсли;
		
		ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, ОбластьЭталон);
		
	КонецЦикла;
	
	// Служебные поля
	НомерКолонки =
		Форма.СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ИдентификаторСтрокиДерева").Представление;
	ОбластьРедактирования	    	  = ТабличныйДокументМодели.Область(СтрокаОбласти + "C" + НомерКолонки);
	ОбластьРедактирования.Текст 	  = Идентификатор;
	ОбластьРедактирования.Расшифровка = Идентификатор;
		
КонецПроцедуры // ЗаполнитьДанныеСтрокиТабличногоДокумента()

&НаСервере
Процедура ИнициализироватьТабличныйДокументМодели()
	
	Макет = Справочники.CRM_ШаблоныПроектов.ПолучитьМакет("CRM_МакетМоделиЭтапов");
	
	СписокОбластейТабличногоДокумента.Очистить();
	ТабличныйДокументМодели.Очистить();
	
	// Службные поля
	ТабличныйДокументМодели.Вывести(Макет.ПолучитьОбласть("Шапка|Служебная_Этап"));
	ОбластьМодели = ТабличныйДокументМодели.Область(, 1, , 1);
	ОбластьМодели.Имя = "Служебная_Этап";
	СписокОбластейТабличногоДокумента.Добавить("Служебная_Этап", "1");
	
	ТабличныйДокументМодели.Присоединить(Макет.ПолучитьОбласть("Шапка|Служебная_ИдентификаторСтрокиДерева"));
	ОбластьМодели = ТабличныйДокументМодели.Область(, 2, , 2);
	ОбластьМодели.Имя = "Служебная_ИдентификаторСтрокиДерева";
	ОбластьМодели.Видимость = Ложь;
	СписокОбластейТабличногоДокумента.Добавить("Служебная_ИдентификаторСтрокиДерева", "2");
	
	ТабличныйДокументМодели.Присоединить(Макет.ПолучитьОбласть("Шапка|Служебная_Картинка"));
	ОбластьМодели = ТабличныйДокументМодели.Область(, 3, , 3);
	ОбластьМодели.Имя = "Служебная_Картинка";
	ОбластьМодели.Видимость = Ложь;
	СписокОбластейТабличногоДокумента.Добавить("Служебная_Картинка", "3");
	
	// Настраиваемые поля
	НомерКолонки = 4;
	ВидДней = ?(Объект.CRM_УчитыватьПроизводственныйКалендарь, "рабочих", "календарных");
	
	ОбластьОтсрочкаСтартаДней = Макет.ПолучитьОбласть("Шапка|" + "ОтсрочкаСтартаДней");
	ОбластьОтсрочкаСтартаДней.Параметры.ВидДней = ВидДней;
	
	ОбластьПродолжительностьДней = Макет.ПолучитьОбласть("Шапка|" + "ПродолжительностьДней");
	ОбластьПродолжительностьДней.Параметры.ВидДней = ВидДней;
	
	Если Объект.РежимВводаОтЗадачи Тогда
		
		ОбластьОтсрочкаОтПредыдущейЗадачи = Макет.ПолучитьОбласть("Шапка|" + "ОтсрочкаОтПредыдущейЗадачи");
		ОбластьОтсрочкаОтПредыдущейЗадачи.Параметры.ВидДней = ВидДней;
		
		ТабличныйДокументМодели.Присоединить(ОбластьОтсрочкаОтПредыдущейЗадачи);
		ОбластьМодели = ТабличныйДокументМодели.Область(, НомерКолонки, , НомерКолонки);
		ОбластьМодели.Имя = "ОтсрочкаОтПредыдущейЗадачи";
		СписокОбластейТабличногоДокумента.Добавить("ОтсрочкаОтПредыдущейЗадачи", Формат(НомерКолонки, "ЧН=0; ЧГ="), Истина);
		НомерКолонки = НомерКолонки + 1;
		
	КонецЕсли;
	
	ТабличныйДокументМодели.Присоединить(ОбластьОтсрочкаСтартаДней);
	ОбластьМодели = ТабличныйДокументМодели.Область(, НомерКолонки, , НомерКолонки);
	ОбластьМодели.Имя = "ОтсрочкаСтартаДней";
	СписокОбластейТабличногоДокумента.Добавить("ОтсрочкаСтартаДней", Формат(НомерКолонки, "ЧН=0; ЧГ="), Истина);
	НомерКолонки = НомерКолонки + 1;
	
	ТабличныйДокументМодели.Присоединить(ОбластьПродолжительностьДней);
	ОбластьМодели = ТабличныйДокументМодели.Область(, НомерКолонки, , НомерКолонки);
	ОбластьМодели.Имя = "ПродолжительностьДней";
	СписокОбластейТабличногоДокумента.Добавить("ПродолжительностьДней", Формат(НомерКолонки, "ЧН=0; ЧГ="), Истина);
	НомерКолонки = НомерКолонки + 1;
	
	ТабличныйДокументМодели.Присоединить(Макет.ПолучитьОбласть("Шапка|" + "ОтветственныйИсполнитель"));
	ОбластьМодели = ТабличныйДокументМодели.Область(, НомерКолонки, , НомерКолонки);
	ОбластьМодели.Имя = "ОтветственныйИсполнитель";
	СписокОбластейТабличногоДокумента.Добавить("ОтветственныйИсполнитель", Формат(НомерКолонки, "ЧН=0; ЧГ="), Истина);
	НомерКолонки = НомерКолонки + 1;
	
	// Диаграмма Ганта, всегда вводится в конце
	ТабличныйДокументМодели.Присоединить(Макет.ПолучитьОбласть("Шапка|Служебная_ДиаграммаГанта"));
	ОбластьМодели = ТабличныйДокументМодели.Область(, НомерКолонки, , НомерКолонки);
	ОбластьМодели.Имя = "Служебная_ДиаграммаГанта";
	СписокОбластейТабличногоДокумента.Добавить("Служебная_ДиаграммаГанта", Формат(НомерКолонки, "ЧН=0; ЧГ="), Истина);
	
	ТабличныйДокументМодели.ФиксацияСверху 			= 2;
	ТабличныйДокументМодели.ФиксацияСлева  			= 1;
	ТабличныйДокументМодели.Защита 		   			= Ложь;
	ТабличныйДокументМодели.ТолькоПросмотр 			= Ложь;
	//Элементы.ТабличныйДокументМодели.Редактирование = Истина;
	
КонецПроцедуры // ИнициализироватьТабличныйДокументМодели()

&НаКлиентеНаСервереБезКонтекста
Процедура ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, Знач ОбластьЭталон = Неопределено)

	Если ОбластьЭталон = Неопределено Тогда
		ОбластьЭталон = Форма.ТабличныйДокументМодели.Область(2, 1, 2, 1);
		ОбластьЭталон.ВысотаСтроки = 39;
	КонецЕсли;
	
	ОбластьРедактирования.ГраницаСверху = ОбластьЭталон.ГраницаСверху;
	ОбластьРедактирования.ГраницаСлева  = ОбластьЭталон.ГраницаСлева;
	ОбластьРедактирования.ГраницаСправа = ОбластьЭталон.ГраницаСправа;
	ОбластьРедактирования.ГраницаСнизу  = ОбластьЭталон.ГраницаСнизу;
	
	ОбластьРедактирования.ЦветРамки  	= ОбластьЭталон.ЦветРамки;
	ОбластьРедактирования.ВысотаСтроки  = 16;
	
	ОбластьРедактирования.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		
КонецПроцедуры // ОформитьОбластьРедактирования()

&НаСервере
Процедура ВывестиКартинкиВТабличныйДокументНаСервере()
	
	// Не возможно вывести на клиенте для Веб-клинта (ряд методов не документированы и для тонкого клиента)
	Выполнять = Истина;
	
	Для НомерСтроки = 2 По ТабличныйДокументМодели.ВысотаТаблицы Цикл
		
		ОбластьРедактирования = ТабличныйДокументМодели.Область(НомерСтроки, 1);
		
		ОтступСтроки = ТабличныйДокументМодели.Область(НомерСтроки, 1).Отступ;
		Если СокрЛП(ОбластьРедактирования.Текст) = "" Тогда
			Прервать;
		КонецЕсли;
		
		НетКартинкиСвернуть = Истина;
		// Выведем картинку группировки, если нужно
		Если ТабличныйДокументМодели.Область(НомерСтроки + 1, 1).Отступ > ОтступСтроки Тогда
			// Свернуть/Развернуть
			
			//ОбластьРедактирования.Отступ = ОбластьРедактирования.Отступ + 1;
			
			ОбластьКартинка = ТабличныйДокументМодели.Область("R" + НомерСтроки + "C8");
			РисунокСвернутьРазвернуть = ТабличныйДокументМодели.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
			РисунокСвернутьРазвернуть.Имя = "R" + Формат(ОбластьРедактирования.Низ, "ЧН=0; ЧГ=") + "_Свернуть";
			
			РисунокСвернутьРазвернуть.Картинка = БиблиотекаКартинок.CRM_Свернуть;
			
			РисунокСвернутьРазвернуть.Расположить(ОбластьРедактирования);
			РисунокСвернутьРазвернуть.РазмерКартинки = РазмерКартинки.Пропорционально;
			РисунокСвернутьРазвернуть.Линия 		 = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
			РисунокСвернутьРазвернуть.Лево  		 = РисунокСвернутьРазвернуть.Лево + 0.5 + (ОбластьРедактирования.Отступ - 2) * 1.5;
			РисунокСвернутьРазвернуть.Верх  		 = РисунокСвернутьРазвернуть.Верх + 1.1;
			РисунокСвернутьРазвернуть.Ширина 		 = 3;
			РисунокСвернутьРазвернуть.Высота 		 = 3;
			РисунокСвернутьРазвернуть.ЦветФона		 = ОбластьРедактирования.ЦветФона;
			
			ОбластьРедактирования.Отступ = ОбластьРедактирования.Отступ + 2;
			НетКартинкиСвернуть = Ложь;
		КонецЕсли;
		
		// Выведем картинку документа
		Если НетКартинкиСвернуть Тогда
			ОбластьРедактирования.Отступ = ОбластьРедактирования.Отступ + 2;
		КонецЕсли;
		
		ИндексКартинки = -1;
		Расшифровка = ОбластьРедактирования.Расшифровка;
		Если ТипЗнч(Расшифровка) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
			ИндексКартинки = 0;
		ИначеЕсли ТипЗнч(Расшифровка) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана") Тогда
			ИндексКартинки = ?(Расшифровка.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.Этап, 1, 3);
		КонецЕсли;
		
		Картинка = СоответствиеКоллекцииКартинокТипаЭтапа.Получить(ИндексКартинки);
		
		Если Картинка <> Неопределено Тогда
			//ОбластьРедактирования.Отступ = ОбластьРедактирования.Отступ + 2;
			
			Рисунок = ТабличныйДокументМодели.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
			Рисунок.Картинка = Картинка;
			
			Рисунок.Имя = "R" + Формат(ОбластьРедактирования.Низ, "ЧН=0; ЧГ=") + "_ТипЭтапа";
			
			Рисунок.Расположить(ОбластьРедактирования);
			Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
			Рисунок.Линия 		   = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
			Рисунок.Лево  		   = Рисунок.Лево + 2 + (ОбластьРедактирования.Отступ - 2) * 1.5;
			Рисунок.Верх  		   = Рисунок.Верх + 0.8;
			Рисунок.Ширина 		   = 3.5;
			Рисунок.Высота 		   = 3.5;
			Рисунок.ЦветФона	   = ОбластьРедактирования.ЦветФона;
			
			ОбластьРедактирования.Отступ = ОбластьРедактирования.Отступ + 2;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиКартинкиВТабличныйДокумент()

&НаСервере
Процедура ПрочитатьДанныеМоделиПроцесса()
	
	// Вставим верхнюю строку дерева этапов
	ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	СтрокаДерева = ЭлементыДерева.Добавить();
	СтрокаДерева.ИндексКартинки = -1;
	
	Если Объект.РежимВводаОтЗадачи Тогда
		ЗаполнитьДеревоПоЭтапамВводОтЗадачи();
	Иначе
		ЗаполнитьДеревоПоЭтапам();
	КонецЕсли;
	
КонецПроцедуры // ПрочитатьДанныеМоделиПроцесса()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРежимРедактирования(Форма)
	
	Форма.Элементы.СтраницыОтображенияГрафиков.ТекущаяСтраница = Форма.Элементы[Форма.РежимРедактированияМодели];
	Форма.Элементы.ПолосаРегулированияШириныДиаграммыГанта.Видимость = Форма.РежимРедактированияМодели = "Графически";
	
КонецПроцедуры // УстановитьРежимРедактирования()

&НаКлиенте
Процедура РежимОтображенияПриИзменении(Элемент)
	
	ТекущийЭтапДерева = Неопределено;
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийЭтапДерева = ТекущиеДанные.Этап;
	КонецЕсли;
		
	ПодключитьОбработчикОжидания("Подключаемый_РежимОтображенияПриИзменении", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РежимОтображенияПриИзменении()
	
	УстановитьРежимРедактирования(ЭтотОбъект);
	
	Подключаемый_Обновить();
	
КонецПроцедуры // Подключаемый_РежимОтображенияПриИзменении()

&НаКлиенте
Процедура ПолосаРегулированияШириныДиаграммыГантаПриИзменении(Элемент)
	
	ДиаграммаРисунок = ТабличныйДокументМодели.Рисунки["ДиаграммаГанта"];
	ДиаграммаОбъект = ДиаграммаРисунок.Объект;
	
	ДиаграммаОбъект.Обновление = Ложь;
	ТабличныйДокументМодели.Область("Служебная_ДиаграммаГанта").ШиринаКолонки =
		ПолосаРегулированияШириныДиаграммыГанта * 2;
	
	ДиаграммаОбъект.Обновление = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументМоделиПриИзменении(Элемент)
	ПеренестиДанныеТабличногоДокументаВЭтапКалендарногоПлана(Элемент.ТекущаяОбласть);
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументМоделиВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Попытка
		АктивнаяЯчейка = ТабличныйДокументМодели.Область(АдресТекущейЯчейки);
	Исключение
		АктивнаяЯчейка = Неопределено;
	КонецПопытки;
	
	Если ТипЗнч(Область) = Тип("РисунокТабличногоДокумента") Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Область.Лево > 1 И НЕ Область.СодержитЗначение Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Область.Низ <= 2 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	СтрокаОбласти = "R" + Формат(Область.Низ, "ЧН=0; ЧГ=");
	НомерКолонки = СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ИдентификаторСтрокиДерева").Представление;
	ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C" + НомерКолонки);
		
	Если ОбластьИдентификатора.Расшифровка = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиДерева = ДеревоМодели.НайтиПоИдентификатору(ОбластьИдентификатора.Расшифровка);
	Если ДанныеСтрокиДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Этап = ДанныеСтрокиДерева.Этап;
	
	Если Этап = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если СписокРедактируемыхКолонок.НайтиПоЗначению(Область.Расшифровка) = Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Модифицированность = Истина;
		ПараметрыФормы = Новый Структура("Ключ", Этап);

		ВерсияДанныхЭтапа = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Этап, "ВерсияДанных");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьПослеЗаписиЭтапа", ЭтотОбъект,
			 Новый Структура("Ссылка, ВерсияДанных", Этап,
			 ВерсияДанныхЭтапа));
		
		Если ТипЗнч(Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
			ОткрытьФорму("Справочник.CRM_ШаблоныЭтаповПроектов.ФормаОбъекта",
				ПараметрыФормы,
				ЭтотОбъект,
				УникальныйИдентификатор, , ,
				ОписаниеОповещения, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
		Иначе
			ОткрытьФорму("Документ.CRM_ШаблонЭтапаКалендарногоПлана.ФормаОбъекта",
				ПараметрыФормы,
				ЭтотОбъект,
				УникальныйИдентификатор, , ,
				ОписаниеОповещения, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Этап) <> Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана") Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	Иначе
		СтандартнаяОбработка = РазрешеноРедактированиеЭлемента(Область.Расшифровка, ОбластьИдентификатора.Расшифровка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазрешеноРедактированиеЭлемента(ИмяРеквизита, ИдентификаторСтроки)
	ТекДанные = ДеревоМодели.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ИмяРеквизита = "ПродолжительностьДней" Тогда	
		Если ТекДанные.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для контрольной точки изменение длительности не предусмотрено'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ТабличныйДокументМоделиПриАктивизацииОбласти(Элемент)
	
	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	Если ТипЗнч(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
		Если ТекущаяОбласть.Имя = "ДиаграммаГанта" Тогда
			Элемент.Редактирование  = Ложь;
			Возврат;
		
		Иначе
			Если Не Элемент.Редактирование Тогда
				Элемент.Редактирование  = Истина;
			КонецЕсли;
			
			МассивИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущаяОбласть.Имя, "_");
			СтрокаОбласти = МассивИмени[0];
			
			НомерКолонки =
				СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ИдентификаторСтрокиДерева").Представление;
			ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C" + НомерКолонки);
			
			Элементы.ДеревоМодели.ТекущаяСтрока = ОбластьИдентификатора.Расшифровка;
			
			Если СтрНайти(ТекущаяОбласть.Имя, "ТипЭтапа") > 0 Тогда
				Элементы.ТабличныйДокументМодели.ТекущаяОбласть = ТабличныйДокументМодели.Область(СтрокаОбласти 
					+ "C1"); // Этап всегда первая колонка С1
				
				Возврат;
			КонецЕсли;
			
			ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
			Если ТекущиеДанные <> Неопределено Тогда
				РежимСвернуть = (СтрНайти(ТекущаяОбласть.Имя, "Свернуть") > 0);

				СуффиксИмени = ?(РежимСвернуть, "Свернуть", "Развернуть");
				ОбратныйСуффикс = ?(РежимСвернуть, "Развернуть", "Свернуть");
				Рисунок = НайтиРисунокВКоллекции(ТабличныйДокументМодели.Рисунки, ТекущаяОбласть.Имя);
				Если Рисунок <> Неопределено Тогда
					Рисунок.Картинка = ?(РежимСвернуть, БиблиотекаКартинок.CRM_Развернуть, БиблиотекаКартинок.CRM_Свернуть);
					Рисунок.Имя = СтрокаОбласти + "_" + ОбратныйСуффикс;
				КонецЕсли;
				
				СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(ТекущиеДанные.ПолучитьЭлементы(), Не РежимСвернуть);
				
				СвернутьРазвернутьТочкуДиаграммы(ТекущиеДанные.ИдентификаторСтроки, Не РежимСвернуть);
				
				Элементы.ТабличныйДокументМодели.ТекущаяОбласть = ТабличныйДокументМодели.Область(СтрокаОбласти 
					+ "C1"); // Этап всегда первая колонка С1
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если СтрНайти(ТекущаяОбласть.Имя, "C") > 0 Тогда // адрес конкретной ячейки
			АдресТекущейЯчейки = ТекущаяОбласть.Имя;
		КонецЕсли;
		
		Если ТекущаяОбласть.Низ < 3 Тогда
			Элементы.ДеревоМодели.ТекущаяСтрока = ДеревоМодели.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
			Элемент.Редактирование = Ложь;
		Иначе
			СтрокаОбласти = "R" + Формат(ТекущаяОбласть.Низ, "ЧН=0; ЧГ=");
			НомерКолонки =
				СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ИдентификаторСтрокиДерева").Представление;
			ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C" + НомерКолонки);
			
			Если ОбластьИдентификатора.Расшифровка <> Неопределено Тогда
				Элементы.ДеревоМодели.ТекущаяСтрока = ОбластьИдентификатора.Расшифровка;
			Иначе
				Элементы.ДеревоМодели.ТекущаяСтрока = ДеревоМодели.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
			КонецЕсли;
			ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
			Если ЗначениеЗаполнено(ТекущаяОбласть.Расшифровка)
				 И СписокРедактируемыхКолонок.НайтиПоЗначению(ТекущаяОбласть.Расшифровка) <> Неопределено
				И ТекущиеДанные <> Неопределено
					 И ТипЗнч(ТекущиеДанные.Этап) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана") Тогда
				Если Не Элемент.Редактирование Тогда
					Элемент.Редактирование = Истина;
				КонецЕсли;
			Иначе
				Элемент.Редактирование = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//Элемент.ТекущаяОбласть = ТабличныйДокументМодели.Область("R" + Элемент.ТекущаяОбласть.Верх);
	Если ЗначениеЗаполнено(ТекущаяОбластьСтрока) Тогда
		ОбластьСтрока = ТабличныйДокументМодели.Область(ТекущаяОбластьСтрока);
		ОбластьСтрока.ЦветФона = ЦветФонаПоля;
	КонецЕсли;
	ТекущаяОбластьСтрока = "R" + Элемент.ТекущаяОбласть.Верх;
	ОбластьСтрока = ТабличныйДокументМодели.Область(ТекущаяОбластьСтрока);
	ОбластьСтрока.ЦветФона = ЦветНавигации;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументМоделиПриИзмененииСодержимогоОбласти(Элемент, Область, ДополнительныеПараметры)
	Если Область.Имя = "ДиаграммаГанта" Тогда
		ДополнительныеПараметры.Отмена = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиДанныеТабличногоДокументаВЭтапКалендарногоПлана(ОбластьРедактирования)
	
	ТекДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Значение = ОбластьРедактирования.Значение;
	
	Если ПриИзмененииЗначенияРеквизитыЭтапа(ОбластьРедактирования.Расшифровка,
		 ТекДанные.ПолучитьИдентификатор(),
		 Значение) Тогда
		ДеревоМоделиОбновить();
	Иначе
		ОбластьРедактирования.Значение = Значение;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(ЭлементыДерева, Видимость)
		
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		ТабличныйДокументМодели.Область(СтрокаДерева.АдресСтрокиОбласти).Видимость = Видимость;
		СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(СтрокаДерева.ПолучитьЭлементы(), Видимость);
	
	КонецЦикла;
	
КонецПроцедуры // СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно()

&НаКлиенте
Процедура СвернутьРазвернутьТочкуДиаграммы(ИдентифкаторТочки, Развернуть, Знач ДиаграммаОбъект = Неопределено)

	Если ДиаграммаОбъект = Неопределено Тогда
		ДиаграммаРисунок = ТабличныйДокументМодели.Рисунки["ДиаграммаГанта"];
		ДиаграммаОбъект = ДиаграммаРисунок.Объект;
		
	КонецЕсли;

	Точка = ДиаграммаОбъект.УстановитьТочку(ИдентифкаторТочки);
	Если Развернуть Тогда
		ДиаграммаОбъект.РазвернутьТочку(Точка, Истина);
	Иначе	
		ДиаграммаОбъект.СвернутьТочку(Точка, Истина);
	КонецЕсли;
	
КонецПроцедуры // СвернутьТочкуДиаграммы()

&НаКлиенте
Процедура Развернуть(Команда)
	Если РежимРедактированияМодели = "Графически" Тогда
		РазвернутьСтрокиТабличногоДокумента(Истина);
	Иначе
		РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Свернуть(Команда)
	
	Если РежимРедактированияМодели = "Графически" Тогда
		РазвернутьСтрокиТабличногоДокумента(Ложь);
	Иначе
		РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели", Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПереместитьЗадачуВверх(Команда)
	
	Если НЕ Объект.РежимВводаОтЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	ПереместитьЭлемент("Вверх");
	
	ДеревоМоделиОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьЗадачуВниз(Команда)
	
	Если НЕ Объект.РежимВводаОтЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	ПереместитьЭлемент("Вниз");
	
	ДеревоМоделиОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьЭлемент(Направление)
	
	Если Элементы.ДеревоМодели.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = Элементы.ДеревоМодели.ТекущиеДанные.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		ВызватьИсключение "Родитель перемещаемой строки пустой";
	КонецЕсли;
	
	СтрокиРодителя = Родитель.ПолучитьЭлементы();
	
	ИндексТекущего = СтрокиРодителя.Индекс(Элементы.ДеревоМодели.ТекущиеДанные);
	ИндексСоседнего = ИндексТекущего;
	
	Если Направление = "Вверх" Тогда
		Если ИндексТекущего > 0 Тогда
			ИндексСоседнего = ИндексТекущего - 1;
		КонецЕсли;
	Иначе // Вниз
		Если ИндексТекущего < СтрокиРодителя.Количество() - 1 Тогда
			ИндексСоседнего = ИндексТекущего + 1;
		КонецЕсли;
	КонецЕсли;
	
	Если ИндексТекущего <> ИндексСоседнего Тогда
		СоседняяСтрока = СтрокиРодителя.Получить(ИндексСоседнего);
		СоседнийЭлементЭтап = СоседняяСтрока.Этап;
		
		// Оба элемента - шаблоны этапов
		Если ТипЗнч(Элементы.ДеревоМодели.ТекущиеДанные.Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов")
			И ТипЗнч(СоседнийЭлементЭтап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
			
			CRM_ОбщегоНазначенияСервер.ПоменятьЭлементыМестами(
								Элементы.ДеревоМодели.ТекущиеДанные.Этап, СоседнийЭлементЭтап,
								ИндексТекущего + 1, ИндексСоседнего + 1);
			CRM_УправлениеПроектамиСервер.ПересчитатьДеревоШаблонаПроекта(Объект.Ссылка);
			
		// Только первый элемент - шаблон этапа, второй - задача	
		ИначеЕсли ТипЗнч(Элементы.ДеревоМодели.ТекущиеДанные.Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
		
			CRM_ОбщегоНазначенияСервер.ПоменятьЭлементыМестами(
								Элементы.ДеревоМодели.ТекущиеДанные.Этап, СоседнийЭлементЭтап,
								ИндексТекущего + 1, ИндексСоседнего + 1);
			
		// Только второй элемент - шаблон этапа, первый - задача	
		ИначеЕсли ТипЗнч(СоседнийЭлементЭтап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
		    // Элементы меняются местами - при записи задачи будет вызван пересчет дерева шаблона проекта
			CRM_ОбщегоНазначенияСервер.ПоменятьЭлементыМестами(
								СоседнийЭлементЭтап, Элементы.ДеревоМодели.ТекущиеДанные.Этап,
								ИндексСоседнего + 1, ИндексТекущего + 1);
		
		// Оба элемента - задачи
		Иначе			
			CRM_ОбщегоНазначенияСервер.ПоменятьЭлементыМестами(
								Элементы.ДеревоМодели.ТекущиеДанные.Этап, СоседнийЭлементЭтап,
								ИндексТекущего + 1, ИндексСоседнего + 1, "НеПересчитыватьДеревоШаблонаПроекта");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиРисунокВКоллекции(Коллекция, Имя)
	Для Каждого Рисунок Из Коллекция Цикл
		Если Рисунок.Имя = Имя Тогда
			Возврат Рисунок;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура РазвернутьСтрокиТабличногоДокумента(Развернуть = Истина)
	
	СтрокиДерева = ДеревоМодели.ПолучитьЭлементы()[0].ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		СуффиксИмени = ?(Развернуть, "_Развернуть", "_Свернуть");
		ОбратныйСуффикс = ?(Развернуть, "_Свернуть", "_Развернуть");
		Рисунок = НайтиРисунокВКоллекции(ТабличныйДокументМодели.Рисунки, СтрокаДерева.АдресСтрокиОбласти + СуффиксИмени);
		Если Рисунок <> Неопределено Тогда
			Рисунок.Картинка = БиблиотекаКартинок["CRM" + ОбратныйСуффикс];
			Рисунок.Имя = СтрокаДерева.АдресСтрокиОбласти + ОбратныйСуффикс;
		КонецЕсли;
		
		СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(СтрокаДерева.ПолучитьЭлементы(), Развернуть);
		СвернутьРазвернутьТочкуДиаграммы(СтрокаДерева.ИдентификаторСтроки, Развернуть);
		
	КонецЦикла;
	
КонецПроцедуры // РазвернутьСтрокиТабличногоДокумента()

#КонецОбласти // РаботаСЭтапами
