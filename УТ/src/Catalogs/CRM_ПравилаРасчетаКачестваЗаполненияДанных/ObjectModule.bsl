
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Если Не ЭтоГруппа Тогда
		Автор = Пользователи.ТекущийПользователь();
		ДатаСоздания = ТекущаяДата();	
	КонецЕсли;                       	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	ПересчитатьВес();
	Если Не ЭтоГруппа
		И Не ОбменДанными.Загрузка
		И Не ДополнительныеСвойства.Свойство("ПравилоНеИзменено") Тогда
		Ответственный = Пользователи.ТекущийПользователь();
		ДатаИзменения = ТекущаяДата();
		
		ЗаполнитьОбъектыКПересчету();
	КонецЕсли; 
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.CRM_РасчетЗаполненностиРеквизитовОбъектов);
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ПараметрыЗадания.Вставить("ИмяМетода",
			Метаданные.РегламентныеЗадания.CRM_РасчетЗаполненностиРеквизитовОбъектов.ИмяМетода);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
	Если СписокЗаданий.Количество() = 0 Тогда
		ПараметрыЗадания.Вставить("Использование", Истина);
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		ПараметрыЗадания = Новый Структура("Использование", Истина);
		Для Каждого Задание Из СписокЗаданий Цикл
			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	ПроверитьНаДубли(Отказ);
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Если Не ЭтоГруппа Тогда
		Автор = Пользователи.ТекущийПользователь();
		ДатаСоздания = ТекущаяДата();	
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	ЗаписатьОбъектыКПересчету();
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьОбъектыКПересчету()
	
	МассивПравилаКПересчету = Новый Массив;
	ПересчитатьТолькоДоДатыИзменения = Ложь;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ДанныеПравила = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ТипОбъекта, СтатусРаботыСКлиентом");
		Если ПометкаУдаления Тогда
			Если Не Ссылка.ПометкаУдаления Тогда
				ДополнительныеСвойства.Вставить("УдалитьОбъектыПоПравилу", Ссылка);
			КонецЕсли;
		ИначеЕсли Не СтатусРаботыСКлиентом = ДанныеПравила.СтатусРаботыСКлиентом Тогда
			МассивПравилаКПересчету.Добавить(Ссылка);
		Иначе
			МассивПравилаКПересчету.Добавить(Ссылка);
			ПересчитатьТолькоДоДатыИзменения = Истина;
		КонецЕсли; 
	Иначе
		МассивПравилаКПересчету.Добавить(Неопределено);
	КонецЕсли;
	
	Если МассивПравилаКПересчету.Количество() Тогда
		ИмяСвойства = "ПересчитатьПоПравилу" + ?(ПересчитатьТолькоДоДатыИзменения, "ДоДатыИзменения", "");
		ДополнительныеСвойства.Вставить(ИмяСвойства, МассивПравилаКПересчету);	
	КонецЕсли; 

КонецПроцедуры

Процедура ПересчитатьВес()

	Если ЭтоГруппа
		Или ПометкаУдаления
		Или Правила.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Сумма положительных весов должна быть 100 (отрицательные не учитываем).
	СуммаВесов = 0;
	Для каждого ТекПравило Из Правила Цикл
		Если ТекПравило.Вес > 0 Тогда
			СуммаВесов = СуммаВесов + ТекПравило.Вес;
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаВесов = 100
		Или СуммаВесов = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Коэффициент = 100/СуммаВесов;
	
	СуммаВесов = 0;
	ПоследняяСтрокаКПересчету = Неопределено;
	Для каждого ТекПравило Из Правила Цикл
		Если ТекПравило.Вес > 0 Тогда
			ТекПравило.Вес = ТекПравило.Вес * Коэффициент;
			СуммаВесов = СуммаВесов + ТекПравило.Вес;
			ПоследняяСтрокаКПересчету = ТекПравило;
		КонецЕсли;                                   
	КонецЦикла;
	
	Если Не СуммаВесов = 100 Тогда
		ПоследняяСтрокаКПересчету.Вес = 100 - (СуммаВесов - ПоследняяСтрокаКПересчету.Вес);	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьНаДубли(Отказ)
	
	Если ЭтоГруппа
		Или ПометкаУдаления Тогда
		Возврат;	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПравилаРасчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_ПравилаРасчетаКачестваЗаполненияДанных КАК ПравилаРасчета
	|ГДЕ
	|	ПравилаРасчета.ТипОбъекта = &ТипОбъекта
	|	И ПравилаРасчета.СтатусРаботыСКлиентом = &СтатусРаботыСКлиентом
	|	И НЕ ПравилаРасчета.Ссылка = &Ссылка
	|	И НЕ ПравилаРасчета.ЭтоГруппа
	|	И НЕ ПравилаРасчета.ПометкаУдаления";
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.УстановитьПараметр("СтатусРаботыСКлиентом", СтатусРаботыСКлиентом);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для выбранного типа объекта и статуса работы с клиентом уже введено правило расчета.",,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОбъектыКПересчету()
	
	МассивПравилаКПересчету = Неопределено;
	ДатаРасчета = Неопределено;
	
	Если ДополнительныеСвойства.Свойство("ПересчитатьПоПравилу", МассивПравилаКПересчету) Тогда
		
	ИначеЕсли ДополнительныеСвойства.Свойство("ПересчитатьПоПравилуДоДатыИзменения", МассивПравилаКПересчету) Тогда
		ДатаРасчета = ДатаИзменения;	
	КонецЕсли; 
	
	Если ТипЗнч(МассивПравилаКПересчету) = Тип("Массив")
		И МассивПравилаКПересчету.Количество() Тогда
		Для каждого Правило Из МассивПравилаКПересчету Цикл
			Если Правило = Неопределено Тогда
				Правило = Ссылка;			
			КонецЕсли; 
			РегистрыСведений.CRM_ЗаполненностьРеквизитовОбъектов.ДобавитьЗапись(Неопределено, Правило,, ДатаРасчета, Истина);
		КонецЦикла;
	КонецЕсли;
	
	ПравилоКУдалению = Неопределено;
	Если ДополнительныеСвойства.Свойство("УдалитьОбъектыПоПравилу", ПравилоКУдалению) Тогда
		РегистрыСведений.CRM_ЗаполненностьРеквизитовОбъектов.УдалитьВсеЗаписиПоПравилу(ПравилоКУдалению);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
