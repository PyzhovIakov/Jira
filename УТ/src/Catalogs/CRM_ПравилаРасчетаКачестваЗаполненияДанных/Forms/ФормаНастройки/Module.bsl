
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Ключ") Тогда
		ПерейтиКЭлементу = Параметры.Ключ.СтатусРаботыСКлиентом;
	ИначеЕсли Параметры.Свойство("СтатусРаботыСКлиентом") Тогда
		ПерейтиКЭлементу = Параметры.СтатусРаботыСКлиентом;
	КонецЕсли;
	ЗаполнитьСписокВыбораДоступныхТиповОбъектов(Параметры);
	ЗаполнитьИменаШаблонов();
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокСтатусов, 
		"ТипОбъекта", 
		ТипОбъекта, 
		Истина);
		
	ЗаполнитьУсловноеОформлениеСпискаСтатусов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗначениеЗаполнено(ПерейтиКЭлементу) Тогда
		ПодключитьОбработчикОжидания("ПерейтиКЭлементу", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтменитьПродолжить", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Настройки изменены, выйти из режима настройки?'"),
			РежимДиалогаВопрос.ДаНет);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти  

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипОбъектаПриИзменении(Элемент)
	Если ТипОбъекта = "" Тогда
		ТипОбъекта = Элементы.ТипОбъекта.СписокВыбора[0].Значение;
	КонецЕсли;
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ТипОбъектаПриИзмененииПродолжить", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Настройки изменены, сохранить настройки?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	ЗаполнитьИменаШаблонов();
	ПриИзмененииСтатуса();
	ОчиститьБуферКопирования();
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокСтатусов, 
		"ТипОбъекта", 
		ТипОбъекта, 
		Истина); 
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаПриИзмененииПродолжить(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИзменения();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Если ЗначениеЗаполнено(АдресХранилищаОбъектовПравил) Тогда
			УдалитьИзВременногоХранилища(АдресХранилищаОбъектовПравил);
			АдресХранилищаОбъектовПравил = "";
		КонецЕсли;
	Иначе
		ТипОбъекта = ТекПравило.ТипОбъекта;
		Возврат;
	КонецЕсли;
	Модифицированность = Ложь;
	ТекПравилоМодифицировано = Ложь;
	ЗаполнитьИменаШаблонов();
	ОчиститьБуферКопирования();
КонецПроцедуры

#КонецОбласти
	
#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура СписокСтатусовПриАктивизацииСтроки(Элемент)
	ПриИзмененииСтатуса();
	ПравилаПриАктивизацииСтроки(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТекПревилоПравилаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ТекПревилоПравилаУсловиеПредставление" Тогда
		СтандартнаяОбработка = Ложь;
		ТекСтрока = Элементы.Правила.ТекущиеДанные;
		Если ТекСтрока = Неопределено Тогда
			Возврат;	
		КонецЕсли;
		
		ИмяМакета = ПолучитьИмяМакетаНастроек(ТипОбъекта);
		Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
			Возврат;	
		КонецЕсли; 
		
		ИДСтроки = ТекСтрока.ПолучитьИдентификатор();
		
		ПараметрыКомпоновки = Новый Структура;
		ПараметрыКомпоновки.Вставить("НастройкиКомпоновкиДанных", ПолучитьНастройкиКомпоновки(ИДСтроки));
		ПараметрыКомпоновки.Вставить("ИмяОбъектаМетаданных", "Справочник.CRM_ПравилаРасчетаКачестваЗаполненияДанных");
		ПараметрыКомпоновки.Вставить("ИмяМакета", ИмяМакета);
				
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриИзмененииНастроекКомпоновкиДанных", ЭтотОбъект, ИДСтроки);
		
		ОткрытьФорму("ОбщаяФорма.CRM_НастройкиКомпоновкиДанных", ПараметрыКомпоновки, ЭтотОбъект,,,, ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНастройкиКомпоновки(ИДСтроки)
	
	Если ЗначениеЗаполнено(АдресХранилищаКомпоновщикНастроек) Тогда
		СоответствиеНастройкиХранилищеЗначения = ПолучитьИзВременногоХранилища(АдресХранилищаКомпоновщикНастроек);
		Если ТипЗнч(СоответствиеНастройкиХранилищеЗначения) = Тип("Соответствие") Тогда			
			НастройкаКомпоновки = СоответствиеНастройкиХранилищеЗначения.Получить(ИДСтроки);
			Если ТипЗнч(НастройкаКомпоновки) = Тип("НастройкиКомпоновкиДанных") Тогда
				Возврат НастройкаКомпоновки;
			КонецЕсли; 
		КонецЕсли;                                                      	
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура ПравилаПриИзменении(Элемент)
	ТекПравилоМодифицировано = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПредставлениеДляПользователяПриИзменении(Элемент)
    Элементы.Правила.ТекущиеДанные.УсловиеПредставление = 
		Элементы.Правила.ТекущиеДанные.УсловиеПредставлениеДляПользователя;
	ТекПравилоМодифицировано = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПравилаПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элементы.Правила.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
		Возврат;
	КонецЕсли;
	
	ИмяМакета = ПолучитьИмяМакетаНастроек(ТипОбъекта);
	Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
		Возврат;	
	КонецЕсли; 
	
	ИДСтроки = ТекСтрока.ПолучитьИдентификатор();
	
	ТекНастройки = ПолучитьНастройкиКомпоновки(ИДСтроки);
	Если ТекНастройки = Неопределено Тогда
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(ПолучитьНастройкиКомпоновки(ИДСтроки));
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("РазвернутьСтрокиОтбора", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиОтбора()
	ОтборКД = КомпоновщикНастроек.Настройки.Отбор;
	Для Каждого ЭлементОтбора Из ОтборКД.Элементы Цикл
		Идентификатор = ОтборКД.ПолучитьИдентификаторПоОбъекту(ЭлементОтбора);
		Элементы.КомпоновщикНастроекНастройкиОтбор.Развернуть(Идентификатор);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


#Область ОбаботчикиКомандФормы

&НаСервере
Процедура ЗаполнитьПоШаблонуНаСервере(КомандаИмя)
	
	ИмяВарианта = СтрЗаменить(КомандаИмя, "Команда_ЗаполнитьПоШаблону_", "");
	
	ИмяМакета = ПолучитьИмяМакетаНастроек(ТипОбъекта);
	Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
		Возврат;	
	КонецЕсли;

	ТекПравило.Правила.Очистить();
	
	СКД = Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.ПолучитьМакет(ИмяМакета);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	Для Каждого Вариант Из СКД.ВариантыНастроек Цикл
		Если Вариант.Имя = ИмяВарианта Тогда
			Для Каждого ЭлементОтбора Из Вариант.Настройки.Отбор.Элементы Цикл
				КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
				ЗаполнитьЭлементОтбораКомпоновщика(КомпоновщикНастроек.Настройки.Отбор.Элементы, ЭлементОтбора);

				Представление = Строка(КомпоновщикНастроек.Настройки.Отбор);
				Вес = 0;
				Если ЗначениеЗаполнено(ЭлементОтбора.Представление) Тогда
					ДанныеПоУсловию = CRM_ОбщегоНазначенияСервер.ЗначениеИзСтрокиJSON(ЭлементОтбора.Представление);
					Если ДанныеПоУсловию.Свойство("Представление") Тогда
						Представление = ДанныеПоУсловию.Представление;
					КонецЕсли;
					Если ДанныеПоУсловию.Свойство("Вес") Тогда
						Вес = ДанныеПоУсловию.Вес;
					КонецЕсли;
				КонецЕсли;
				
				Правило = ТекПравило.Правила.Добавить();
				ИДСтроки = Правило.ПолучитьИдентификатор();
				Правило.УсловиеПредставление = Представление;
				Правило.УсловиеПредставлениеДляПользователя = Представление;
				Правило.Вес = Вес;
				ОбновитьНастройкиКомпоновки(ИДСтроки, КомпоновщикНастроек.Настройки);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьПоШаблону(Команда)
	ЗаполнитьПоШаблонуНаСервере(Команда.Имя);
	Модифицированность = Истина;
	ТекПравилоМодифицировано = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	Если Модифицированность Тогда
		ЗаписатьИзменения();
	КонецЕсли;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтменитьПродолжить", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Настройки изменены, выйти из режима настройки?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПродолжить(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Копировать(Команда)
	
	ВыделенныеСтроки = Элементы.Правила.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Соответствие = ПолучитьИзВременногоХранилища(АдресХранилищаКомпоновщикНастроек);
	ДанныеКопирования = Новый Массив;
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		ТекДанные = ТекПравило.Правила.НайтиПоИдентификатору(Строка);
		ДанныеКопии = Новый Структура;
		ДанныеКопии.Вставить("Условие", Соответствие.Получить(Строка));
		ДанныеКопии.Вставить("УсловиеПредставление", ТекДанные.УсловиеПредставление);
		ДанныеКопии.Вставить("Вес", ТекДанные.Вес);
		ДанныеКопии.Вставить("УсловиеПредставлениеДляПользователя", ТекДанные.УсловиеПредставлениеДляПользователя);
		
		ДанныеКопирования.Добавить(ДанныеКопии);
	КонецЦикла;
	
	АдресБуфераКопирования = ПоместитьВоВременноеХранилище(ДанныеКопирования, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Вставить(Команда)
	
	Если Не ЭтоАдресВременногоХранилища(АдресБуфераКопирования) Тогда
		Возврат;
	КонецЕсли;
	ДанныеКопирования = ПолучитьИзВременногоХранилища(АдресБуфераКопирования);

	Для Каждого ДанныеКопии Из ДанныеКопирования Цикл
		Правило = ТекПравило.Правила.Добавить();
		ИДСтроки = Правило.ПолучитьИдентификатор();
		Правило.УсловиеПредставление = ДанныеКопии.УсловиеПредставление;
		Правило.Вес = ДанныеКопии.Вес;
		Правило.УсловиеПредставлениеДляПользователя = ДанныеКопии.УсловиеПредставлениеДляПользователя;
		Если ДанныеКопии.Условие <> Неопределено Тогда
			ОбновитьНастройкиКомпоновки(ИДСтроки, ДанныеКопии.Условие);
		КонецЕсли;
	КонецЦикла;

	ТекПравилоМодифицировано = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

	
#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПерейтиКЭлементу()
	Элементы.СписокСтатусов.ТекущаяСтрока = ПерейтиКЭлементу;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяМакетаНастроек(ТипОбъекта)

	Возврат Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.ПолучитьИмяМакетаНастроек(ТипОбъекта);	

КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораДоступныхТиповОбъектов(Параметры)
	
	Элементы.ТипОбъекта.СписокВыбора.Добавить("Справочник.Партнеры", "Клиенты");	 
	Элементы.ТипОбъекта.СписокВыбора.Добавить("Справочник.КонтактныеЛицаПартнеров", "Контактные лица");	 
	Если Не Параметры.Свойство("ТипОбъекта", ТипОбъекта) Тогда
		ТипОбъекта = "Справочник.Партнеры";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИменаШаблонов()
	
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого Элемент Из Элементы.ПодменюЗаполнитьПоШаблону.ПодчиненныеЭлементы Цикл
		ИмяКоманды = СтрЗаменить(Элемент.Имя, "Элемент_ЗаполнитьПоШаблону_", "Команда_ЗаполнитьПоШаблону_");
		УдаляемыеЭлементы.Добавить(Элемент.Имя); 
		Команда = Команды.Найти(ИмяКоманды);
		Если Команда <> Неопределено Тогда
			Команды.Удалить(Команда);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Элемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(Элементы[Элемент]);
	КонецЦикла;
	
	ИмяМакета = ПолучитьИмяМакетаНастроек(ТипОбъекта);
	Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
		Возврат;	
	КонецЕсли;
	
	СКД = Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.ПолучитьМакет(ИмяМакета);
	Для Каждого Вариант Из СКД.ВариантыНастроек Цикл
		Если Вариант.Имя = "Основной" Тогда
			Продолжить;
		КонецЕсли;
		
		Команда = Команды.Добавить("Команда_ЗаполнитьПоШаблону_" + Вариант.Имя);
		Команда.Действие = "Подключаемый_ЗаполнитьПоШаблону";
		Команда.Заголовок = Вариант.Представление;
		
		НовыйПунктМеню = Элементы.Добавить("Элемент_ЗаполнитьПоШаблону_" + Вариант.Имя, Тип("КнопкаФормы"),
			Элементы.ПодменюЗаполнитьПоШаблону);
		НовыйПунктМеню.ИмяКоманды = Команда.Имя;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьНастройкиВоВременноеХранилище(ОбъектПравил)
	
	СоответствиеПравила = Новый Соответствие;
	Для каждого Правило Из ТекПравило.Правила Цикл
		СтрокаХранилищеНастройки = ОбъектПравил.Правила.Получить(ТекПравило.Правила.Индекс(Правило));
		СоответствиеПравила.Вставить(Правило.ПолучитьИдентификатор(), СтрокаХранилищеНастройки.Условие.Получить());	
	КонецЦикла;  
	
	АдресХранилищаКомпоновщикНастроек = ПоместитьВоВременноеХранилище(СоответствиеПравила, УникальныйИдентификатор);	

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНастроекКомпоновкиДанных(Результат, ИДСтроки) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = ТекПравило.Правила.НайтиПоИдентификатору(ИДСтроки);
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока.УсловиеПредставление = Результат.ПредставлениеОтбора;
	ТекСтрока.УсловиеПредставлениеДляПользователя = Результат.ПредставлениеОтбора;
	ОбновитьНастройкиКомпоновки(ИДСтроки, Результат.Настройки);
	КомпоновщикНастроек.ЗагрузитьНастройки(Результат.Настройки);
	Модифицированность = Истина;
	ТекПравилоМодифицировано = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиКомпоновки(ИДСтроки, Настройки)
	
	Соответствие = ПолучитьИзВременногоХранилища(АдресХранилищаКомпоновщикНастроек);
	ТекНастройки = ?(ЗначениеЗаполнено(Настройки.Отбор), Настройки, Неопределено);
	Соответствие.Вставить(ИДСтроки, ТекНастройки);
	
	АдресХранилищаКомпоновщикНастроек = ПоместитьВоВременноеХранилище(Соответствие, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНаименование(ТипОбъекта, СтатусРаботыСКлиентом)

	МассивНаименование = Новый Массив;
	
	Если ЗначениеЗаполнено(ТипОбъекта) Тогда
		МассивНаименование.Добавить(ТипОбъекта);	
	КонецЕсли; 
	Если ЗначениеЗаполнено(СтатусРаботыСКлиентом) Тогда
		МассивНаименование.Добавить(СтатусРаботыСКлиентом.Наименование);	
	КонецЕсли;
	
	Возврат СтрСоединить(МассивНаименование, " ");
	
КонецФункции 

Процедура ЗаполнитьЭлементОтбораКомпоновщика(ЭлементыОтбора, Источник)
	Если ТипЗнч(Источник) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		НовыйЭлемент = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Источник);
		НовыйЭлемент.Представление = "";
	Иначе
		НоваяГруппа = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(НоваяГруппа, Источник);
		Для Каждого ЭлементОтбора Из Источник.Элементы Цикл
			ЗаполнитьЭлементОтбораКомпоновщика(НоваяГруппа.Элементы, ЭлементОтбора);
		КонецЦикла;
		НоваяГруппа.Представление = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтатуса()
	
	ТекСтатус = Элементы.СписокСтатусов.ТекущаяСтрока;
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаОбъектовПравил) Тогда
		СоответствиеОбъектов = ПолучитьИзВременногоХранилища(АдресХранилищаОбъектовПравил);
	Иначе
		СоответствиеОбъектов = Новый Соответствие;
	КонецЕсли;
	
	Если ТекПравилоМодифицировано Тогда
		ТекущийОбъект = РеквизитФормыВЗначение("ТекПравило");
		Соответствие = ПолучитьИзВременногоХранилища(АдресХранилищаКомпоновщикНастроек);
		ТекущийОбъект.Правила.Очистить();
	
		Для каждого СтрокаНастроки Из ТекПравило.Правила Цикл
			ТекСтрока = ТекущийОбъект.Правила.Добавить();
			ЗаполнитьЗначенияСвойств(ТекСтрока, СтрокаНастроки);
			ТекСтрока.Условие = Новый ХранилищеЗначения(Соответствие.Получить(СтрокаНастроки.ПолучитьИдентификатор()));
		КонецЦикла;
		
		СоответствиеОбъектов.Вставить(ТекПравило.СтатусРаботыСКлиентом, ТекущийОбъект);
		АдресХранилищаОбъектовПравил = ПоместитьВоВременноеХранилище(СоответствиеОбъектов, УникальныйИдентификатор);
	КонецЕсли;
	
	ОбъектПравил = СоответствиеОбъектов.Получить(ТекСтатус);
	Если ОбъектПравил = Неопределено Тогда
		Правило = НайтиПравило(ТипОбъекта, ТекСтатус);
		Если Правило = Неопределено Тогда
			ОбъектПравил = Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.СоздатьЭлемент();
			ОбъектПравил.ТипОбъекта = ТипОбъекта;
			ОбъектПравил.СтатусРаботыСКлиентом = ТекСтатус;
			ОбъектПравил.Наименование = ПолучитьНаименование(ТипОбъекта, ТекСтатус);
		Иначе
			ОбъектПравил = Правило.ПолучитьОбъект();
		КонецЕсли;
		ТекПравилоМодифицировано = Ложь;
	Иначе
		ТекПравилоМодифицировано = Истина;
	КонецЕсли;
	
	
	ЗначениеВРеквизитФормы(ОбъектПравил, "ТекПравило");
	ПоместитьНастройкиВоВременноеХранилище(ОбъектПравил);
	
КонецПроцедуры

&НаСервере
Функция НайтиПравило(ТипОбъекта, ТекСтатус)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ПравилаРасчетаКачестваЗаполненияДанных.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_ПравилаРасчетаКачестваЗаполненияДанных КАК CRM_ПравилаРасчетаКачестваЗаполненияДанных
	                      |ГДЕ
	                      |	CRM_ПравилаРасчетаКачестваЗаполненияДанных.ТипОбъекта = &ТипОбъекта
	                      |	И CRM_ПравилаРасчетаКачестваЗаполненияДанных.СтатусРаботыСКлиентом = &Статус");
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.УстановитьПараметр("Статус", ТекСтатус);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаписатьИзменения()
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаОбъектовПравил) Тогда
		СоответствиеОбъектов = ПолучитьИзВременногоХранилища(АдресХранилищаОбъектовПравил);
		УдалитьИзВременногоХранилища(АдресХранилищаОбъектовПравил);
		АдресХранилищаОбъектовПравил = "";
	Иначе
		СоответствиеОбъектов = Новый Соответствие;
	КонецЕсли;
	
	Если ТекПравилоМодифицировано Тогда
		ПравилоОбъект = РеквизитФормыВЗначение("ТекПравило");
		Соответствие = ПолучитьИзВременногоХранилища(АдресХранилищаКомпоновщикНастроек);
		ПравилоОбъект.Правила.Очистить();
	
		Для каждого СтрокаНастроки Из ТекПравило.Правила Цикл
			ТекСтрока = ПравилоОбъект.Правила.Добавить();
			ЗаполнитьЗначенияСвойств(ТекСтрока, СтрокаНастроки);
			ТекСтрока.Условие = Новый ХранилищеЗначения(Соответствие.Получить(СтрокаНастроки.ПолучитьИдентификатор()));
		КонецЦикла;
		ПравилоОбъект.Записать();
	КонецЕсли;
	
	Для Каждого КлючЗначение Из СоответствиеОбъектов Цикл
		Если КлючЗначение.Ключ <> ТекСтатус Тогда
			ПравилоОбъект = КлючЗначение.Значение;
			ПравилоОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	Модифицированность = Ложь;
	ТекПравилоМодифицировано = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьБуферКопирования()

	Если ЭтоАдресВременногоХранилища(АдресБуфераКопирования) Тогда
		УдалитьИзВременногоХранилища(АдресБуфераКопирования);
	КонецЕсли;
	АдресБуфераКопирования = "";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловноеОформлениеСпискаСтатусов()
	
	УО = СписокСтатусов.УсловноеОформление;
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	CRM_СтатусыРаботыСКлиентом.ЦветФона КАК ЦветФона
	                      |ИЗ
	                      |	Справочник.CRM_СтатусыРаботыСКлиентом КАК CRM_СтатусыРаботыСКлиентом");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.ЦветФона) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивRGB = СтрРазделить(Выборка.ЦветФона, ";");
		Если МассивRGB.Количество() = 3 Тогда
			
			ЦветФона = Новый Цвет(Число(МассивRGB[0]), Число(МассивRGB[1]), Число(МассивRGB[2]));
			ЦветТекста = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(ЦветФона);
			
			ЭлементУО = УО.Элементы.Добавить();
			
			ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Наименование");
			
			ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЦветФона");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Выборка.ЦветФона;
			
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

