
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступом");
	Если МодульУправлениеДоступом <> Неопределено Тогда
		МодульУправлениеДоступом.ОграничитьВыводКлиентскойБазы(ЭтотОбъект, "Список");
	КонецЕсли;
	
	СпособПоиска = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_МастерРегистрацииОбращения.СпособПоиска",
		 "СправочникПотенциальныеКлиенты",
		 1);
	
	// +Рабочий стол
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// -Рабочий стол
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.ПотенциальныйКлиент.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.ПотенциальныйКлиент.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыполнитьПоиск(ОповещатьОбОшибках)
	
	ОбрабатыватьАктивизациюПоиска = Истина;
	
	СтрокаПоиска = СокрЛП(СтрокаПоиска);
	
	// Проверка возможности поиска.
	Отказ = Ложь;
	ТекстСообщения = НСтр("ru='Минимальная длина строки поиска 3 символа.';
		|en='Minimum length of the search line is 3 characters.'");
	Если ОповещатьОбОшибках И СтрДлина(СтрокаПоиска) < 3  И СтрДлина(СтрокаПоиска) > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СтрокаПоиска", , Отказ);
	КонецЕсли;	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПоискНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураДанныхКэша()
	
	ДанныеКэша = Новый Структура;
	ДанныеКэша.Вставить("ИНН",			"");
	ДанныеКэша.Вставить("ФИО",			"");
	ДанныеКэша.Вставить("Организация",	"");
	ДанныеКэша.Вставить("Телефон",		"");
	ДанныеКэша.Вставить("Email",		"");
	ДанныеКэша.Вставить("URL",			"");
	
	Возврат ДанныеКэша;
	
КонецФункции

&НаСервереБезКонтекста
Функция НормализоватьСтрокуПоискаИДополнитьКэш(Знач СтрокаПоиска, КэшПоиска, КэшЗаполнения)
	
	Если РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(СтрокаПоиска, Истина, "") Тогда
		
		Если Не ЗначениеЗаполнено(КэшПоиска.ИНН) Тогда
			КэшПоиска.ИНН = СтрокаПоиска;
			КэшЗаполнения.ИНН = СтрокаПоиска;
		КонецЕсли;
		
	ИначеЕсли РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(СтрокаПоиска, Ложь, "") Тогда
		
		Если Не ЗначениеЗаполнено(КэшПоиска.ИНН) Тогда
			КэшПоиска.ИНН = СтрокаПоиска;
			КэшЗаполнения.ИНН = СтрокаПоиска;
		КонецЕсли;
		
	ИначеЕсли Взаимодействия.КорректноВведенНомерТелефона(СтрокаПоиска) Тогда
		
		Если Не ЗначениеЗаполнено(КэшПоиска.Телефон) Тогда
			КэшПоиска.Телефон = CRM_ПоискКонтактов.ФорматироватьНомерДляПоиска(СтрокаПоиска);
			СтруктураКИ = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаПоиска);
			КэшЗаполнения.Телефон = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураКИ.КодСтраны,
				 СтруктураКИ.КодГорода, СтруктураКИ.НомерТелефона, "",
				 "");
		КонецЕсли;
		СтрокаПоиска = КэшПоиска.Телефон;
		
	ИначеЕсли ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(СтрокаПоиска, Истина) Тогда
		
		Если Не ЗначениеЗаполнено(КэшПоиска.Email) Тогда
			КэшПоиска.Email = СтрокаПоиска;
			КэшЗаполнения.Email = СтрокаПоиска;
		КонецЕсли;
		
	ИначеЕсли ЭтоURL(СтрокаПоиска) Тогда
		
		Если Не ЗначениеЗаполнено(КэшПоиска.URL) Тогда
			КэшПоиска.URL = СтрокаПоиска;
			КэшЗаполнения.URL = СтрокаПоиска;
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(КэшПоиска.ФИО) Тогда
			КэшПоиска.ФИО = СтрокаПоиска;
			КэшЗаполнения.ФИО = CRM_КлиентыСервер.ПривестиФИОКСтандартномуВиду(СтрокаПоиска);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(КэшПоиска.Организация) Тогда
			КэшПоиска.Организация = СтрокаПоиска;
			КэшЗаполнения.Организация = СтрокаПоиска;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПоиска;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоURL(Знач Строка)
	
	Если СтрНайти(Строка, "https:") > 0
		Или СтрНайти(Строка, "http:") > 0 Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ВыполнитьПоискНаСервере(УсловияПоиска = Неопределено)
	
	Если УсловияПоиска = Неопределено Тогда
		
		// Анализ строк поиска, формализация условий и заполнение кэша.
		КэшПоиска = СтруктураДанныхКэша();
		КэшЗаполнения = СтруктураДанныхКэша();
		УсловияПоиска = Новый Массив;
		Если Не ПустаяСтрока(СтрокаПоиска) Тогда
			СтрокаПоискаНормализованная = НормализоватьСтрокуПоискаИДополнитьКэш(СтрокаПоиска, КэшПоиска, КэшЗаполнения);
			УсловияПоиска.Добавить(СтрокаПоискаНормализованная);
		КонецЕсли;
		
	КонецЕсли;
	
	// Поиск.
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка",
			 Новый СписокЗначений, ВидСравненияКомпоновкиДанных.ВСписке, , Ложь,
			 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		Элементы.СтрокаПоиска.ЦветФона = Новый Цвет(255, 255, 255);
		Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		Возврат;
	КонецЕсли;	
	Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	УстановитьПривилегированныйРежим(Истина);
	РезультатПоиска = CRM_ПоискКонтактов.ВыполнитьПоискКонтактов(УсловияПоиска, СпособПоиска, Истина);
	УстановитьПривилегированныйРежим(Ложь);
	Если ЗначениеЗаполнено(РезультатПоиска.КодОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка",
			 Новый СписокЗначений, ВидСравненияКомпоновкиДанных.ВСписке, , Истина,
			 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		Элементы.СтрокаПоиска.ЦветФона = Новый Цвет(255, 200, 200);
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка",
		 РезультатПоиска.Элементы, ВидСравненияКомпоновкиДанных.ВСписке, , Истина,
		 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	Если РезультатПоиска.Элементы.Количество() = 0 Тогда
		Элементы.СтрокаПоиска.ЦветФона = Новый Цвет(255, 200, 200);
	Иначе
		Элементы.СтрокаПоиска.ЦветФона = Новый Цвет(255, 255, 255);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СпособыПоиска = Новый СписокЗначений;
	СпособыПоиска.Добавить(0, НСтр("ru = 'По началу строки'"));
	СпособыПоиска.Добавить(1, НСтр("ru = 'По части строки'"));
	СпособыПоиска.Добавить(2, НСтр("ru = 'По точному совпадению'"));
	
	НайденныйЭлемент = СпособыПоиска.НайтиПоЗначению(СпособПоиска);
	Если НайденныйЭлемент <> Неопределено Тогда
		НайденныйЭлемент.Пометка = Истина;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("СтрокаПоискаНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОповещениеЗавершения, СпособыПоиска, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособПоиска <> ВыбранныйЭлемент.Значение Тогда
		СпособПоиска = ВыбранныйЭлемент.Значение;
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("CRM_МастерРегистрацииОбращения.СпособПоиска",
			 "СправочникПотенциальныеКлиенты",
			 СпособПоиска);
		ВыполнитьПоиск(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	ВыполнитьПоиск(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СвязиМеждуПКСоздать(Команда)
	СвязиМеждуПКСоздатьНаСервере(Элементы.Список.ВыделенныеСтроки);
КонецПроцедуры

&НаСервере
Процедура СвязиМеждуПКСоздатьНаСервере(Знач МассивПК)
	РегистрыСведений.CRM_СвязанныеПотенциальныеКлиенты.ДобавитьСвязьНесколько(МассивПК,
		 Новый Структура("Автор,
		| Комментарий"));
КонецПроцедуры

// +Рабочий стол
#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти
// -Рабочий стол    

&НаКлиенте
Процедура ИспользоватьТиповойПоиск(Команда)
	Элементы.ИспользоватьТиповойПоиск.Пометка = НЕ Элементы.ИспользоватьТиповойПоиск.Пометка;
	Элементы.СтрокаПоиска.Видимость = НЕ Элементы.ИспользоватьТиповойПоиск.Пометка; 
	СтрокаПоиска = "";
	ВыполнитьПоиск(Ложь);     
	
	Элементы.Список.ПоложениеСтрокиПоиска = ?(Элементы.ИспользоватьТиповойПоиск.Пометка,
		 ПоложениеСтрокиПоиска.Верх,
		 ПоложениеСтрокиПоиска.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРеквизитов(Команда)
	ТекущийОбъект = Элементы.Список.ТекущиеДанные.Ссылка;
	Если ЗначениеЗаполнено(ТекущийОбъект) Тогда
		УсловияОтбора = Новый Структура("Объект", ТекущийОбъект);
		ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии", УсловияОтбора, Истина);
		ОткрытьФорму("Отчет.CRM_ИсторияРеквизитов.Форма", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

#Область Дубли

&НаСервере
Процедура Дубли_СвязатьВыбранныеНаСервере(Знач Дубли)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Метаданные.Справочники.CRM_ПотенциальныеКлиенты.Иерархический Тогда
		Для Каждого Дубль Из Дубли Цикл
			Если Дубль.ЭтоГруппа Тогда
				ТекстСообщения = НСтр("ru = 'Ошибка: среди выбранных элементов присутствует группа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	CRM_ДублиКлиентовИКонтактов.Оригинал КАК Оригинал
	                      |ИЗ
	                      |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	                      |ГДЕ
	                      |	CRM_ДублиКлиентовИКонтактов.Оригинал В(&Оригинал)");
	
	Запрос.УстановитьПараметр("Оригинал", Дубли);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Оригинал = Выборка.Оригинал;
	Иначе
		Оригинал = Дубли[0];
	КонецЕсли;
	
	Дубли.Удалить(Дубли.Найти(Оригинал));
	
	Для Каждого Дубль Из Дубли Цикл
		РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ЗаписатьДубль(Оригинал, Дубль);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Дубли_СвязатьВыбранные(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Дубли_СвязатьВыбранныеНаСервере(Элементы.Список.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Дубли_ПоискДублей(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Настройки", Новый Структура("Настройки_ИскатьДублиПК", Истина));
	ПараметрыФормы.Вставить("СкрытьГруппуКлиенты", Истина);
	ПараметрыФормы.Вставить("СкрытьГруппуКонтакты", Истина);
	ОткрытьФорму("Обработка.CRM_ПоискИЗаменаДублейКлиентовИКонтактов.Форма.Форма", ПараметрыФормы);
КонецПроцедуры

#КонецОбласти

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("РаспознаваниеРечиПоиск");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("РаспознаваниеРечиПоиск");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.РаспознаваниеРечиПоиск);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.РаспознаваниеРечиПоиск);
	Контекст.Вставить("ИмяРеквизита",                     "РаспознаваниеРечиПоиск");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если Не РезультатРаспознавания.РаспознаваниеФразыЗавершено Тогда
		ЭтотОбъект[Контекст.ИмяРеквизита] = "";
		Контекст.Элемент.ОбновитьТекстРедактирования();
	КонецЕсли;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		Контекст.Элемент,
		Контекст.ИмяРеквизита,
		РезультатРаспознавания);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
	СтрокаПоискаПриИзменении(ТекущийЭлемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "СтрокаПоиска");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

#КонецОбласти // СлужебныеПроцедурыИФункции
