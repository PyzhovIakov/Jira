
#Область ОписаниеПеременных

// ЛентаСобытий

&НаКлиенте
Перем БыстрыйВвод_КэшированноеВремя;

&НаКлиенте
Перем БыстрыйВвод_КэшированнаяДатаНачала;

&НаКлиенте
Перем БыстрыйВвод_АктивенАвтоПодбор;

&НаКлиенте
Перем Лента_Прокрутить;

// Конец ЛентаСобытий

// ШаблоныЭлементовФорм
&НаКлиенте
Перем ШаблоныЭлементов_Формы;

&НаКлиенте
Перем ВыведеныПотенциальныеКлиенты;

&НаКлиенте
Перем ВыведеныДубли;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("Объект", Объект);
		ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
		ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "КоманднаяПанельФормы");
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
		
		ПостфиксФормы = "";
		Если CRM_УправлениеЭлементамиНаФормах.ЕстьДополнительныеСвойстваВОбластиОсновное(ИмяФормы, ПостфиксФормы) Тогда
			СвойстваВыполнитьОтложеннуюИнициализацию();
		КонецЕсли;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Параметры.Свойство("ТекущийИнтерес", ТекущийИнтерес);
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	ТекущееПодразделение = ТекущийПользователь.Подразделение;
	
	CRM_ДополнительныеПараметрыСозданияКИ = CRM_УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	CRM_ДополнительныеПараметрыСозданияКИ.ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация";
	CRM_ДополнительныеПараметрыСозданияКИ.ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Лево;
	CRM_ДополнительныеПараметрыСозданияКИ.ВыводитьВОднуКолонку = Истина;
	CRM_ДополнительныеПараметрыСозданияКИ.Вставить("ПолеВвода_ВертикальнаяГруппировка", Истина);
	
	CRM_УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, CRM_ДополнительныеПараметрыСозданияКИ);
	УстановитьВидимостьРеквизитовКИ();
	
	Если Объект.Ссылка.Пустая() И Параметры.Свойство("ПараметрыНового") Тогда
		Объект.Наименование = Параметры.ПараметрыНового.Наименование;
		
		МассивДопРеквизитов = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(
								Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
								Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента));
		Если МассивДопРеквизитов.количество() > 0 Тогда
			ЭтотОбъект[МассивДопРеквизитов[0].ИмяРеквизита] = Параметры.ПараметрыНового.АдресПочты;
		КонецЕсли;
		
		МассивДопРеквизитов = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(
								Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, 
								Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента));
		Если МассивДопРеквизитов.Количество() > 0 И Параметры.ПараметрыНового.Свойство("Телефон") Тогда
			ЭтотОбъект[МассивДопРеквизитов[0].ИмяРеквизита] = Параметры.ПараметрыНового.Телефон;
		КонецЕсли;
		
	КонецЕсли;
	
	РедактированиеПредставления = Ложь;
	РедактированиеФИО = Ложь;
	ПредставлениеВыбраноИзСписка = Ложь;
	
	Элементы.СоздатьНовогоКлиента.Видимость = НЕ ЗначениеЗаполнено(Объект.Партнер);
	Элементы.СоздатьНовыйКонтакт.Видимость = НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо);
	Элементы.ПеренестиКИ.Видимость = ЗначениеЗаполнено(Объект.Партнер);
	
	НастроитьСвязиПараметровВыбора();
	
	// ЛентаСобытий
	Лента_ЗначенияНастроек = CRM_ЛентаСобытий.НастройкиЛенты(ТекущийПользователь, "ЛентаПотенциальногоКлиента");
	Если Параметры.Свойство("ПараметрыОтбора") Тогда
		Лента_ЗначенияНастроек.Вставить("ПараметрыОтбора", Параметры.ПараметрыОтбора);
	КонецЕсли;
	CRM_ЛентаСобытий.НастроитьЛенту(ЭтотОбъект, Лента_ЗначенияНастроек);
	НастроитьОбластьВвода();
	Лента_НеЗаполнять = Не ЗначениеЗаполнено(Объект.Ссылка) Или НеЗаполнятьЛенту;
	CRM_ЛентаСобытийКлиентСервер.ОбновитьЛенту(Объект.Ссылка, ЭтотОбъект, "ЛентаПотенциальногоКлиента",
		 Ложь,
		 Лента_НеЗаполнять);
	// Конец ЛентаСобытий
	
	CRM_ОбщегоНазначенияПовтИсп.ЗаполнитьСписокВыбораВариантовСроков(Элементы.БыстрыйВвод_ВзаимодействиеДатаНачала_Дата);
	CRM_ОбщегоНазначенияПовтИсп.ЗаполнитьСписокВыбораВариантовСроков(Элементы.БыстрыйВвод_ЗадачаДатаОкончания_Дата);
	
	// Управление элементами на форме
	CRM_УправлениеЭлементамиНаФормах.ПриСозданииНаСервере(ЭтотОбъект, "КоманднаяПанельФормы", "ГруппаДополнительно");
	// Конец Управление элементами на форме
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Создан';en='Created'") + " ", ,
		 ЦветаСтиля.CRM_ЧерныйЦветТекста));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Строка(Объект.Автор), , ЦветаСтиля.CRM_ОсновнойГолубой, , "Автор"));
	КомпонентыФС.Добавить(" " + Формат(Объект.ДатаРегистрации, "ДФ=d.MM.yyyy"));
	Элементы.ДекорацияАвторДата.Заголовок = Новый ФорматированнаяСтрока(КомпонентыФС);
	
	СформироватьПредставлениеВложений();
	
	Элементы.ИсторияРеквизитов.Видимость = ПолучитьФункциональнуюОпцию("CRM_ВестиИсториюРеквизитовКлиентов");
	
	Элементы.Разделы_ПереключитьДубли.Доступность = Не Объект.Ссылка.Пустая();
	Элементы.Разделы_ПереключитьПотенциальныеКлиенты.Доступность = Не Объект.Ссылка.Пустая();
	
	Если Объект.Ссылка.Пустая() Тогда
		ЭтоНовый = Истина;
	КонецЕсли;
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	ЦветГолубой = ЦветаСтиля.CRM_ОсновнойГолубой;
	ЦветКрасный = ЦветаСтиля.ЦветОсобогоТекста;
	
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	ВыведеныПотенциальныеКлиенты = Ложь;
	ВыведеныДубли = Ложь;
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЛентаСобытий
	БыстрыйВвод_КэшированноеВремя = 0;
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	БыстрыйВвод_АктивенАвтоПодбор = Ложь;
	Лента_Прокрутить = Ложь;
	// Конец ЛентаСобытий
	
	ОбновитьЗаголовокСвязиМеждуПК();
	Дубли_ОбновитьЗаголовок();
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Клиенты.ПотенциальныйКлиент.ДлительностьСценариев.ВремяРаботыВФорме");
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	// СтандартныеПодсистемы.КонтактнаяИнформация
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеКонтактнойИнформацией");
		МодульУправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	ФотоКлиента = ПолучитьНавигационнуюСсылку(Объект.Ссылка, "Фотография");
КонецПроцедуры

&НаСервере
// Процедура - обработчик события формы "ПередЗаписьюНаСервере".
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// Копирование КИ
	Если ЗначениеЗаполнено(Объект.Ссылка)
		 И ЗначениеЗаполнено(ТекущийОбъект.Партнер)
		 И НЕ (ПараметрыЗаписи.Свойство("ИмяСобытия") И ПараметрыЗаписи.ИмяСобытия = "НовыйПартнерЗаписанСПараметрами") // иначе Клиент уже создан по кнопке "+", и КИ скопирована
		 И НЕ (ПараметрыЗаписи.Свойство("ИмяСобытия") И ПараметрыЗаписи.ИмяСобытия = "ОткрытиеФормыРегистрацииКонтакта") // Выбран клиент, но еще создается КЛ (куда должна быть помещена КИ ПК)
		 И НЕ ПараметрыЗаписи.Свойство("ЗаписьИзФормыРегистрации") Тогда // иначе клиент/КЛ уже создан через встроенную Форму регистрации
		CRM_ОбщегоНазначенияСервер.СкопироватьКонтактнуюИнформациюПотенциальногоКлиента(Объект.Ссылка,
																					?(ЗначениеЗаполнено(ТекущийОбъект.Партнер), ТекущийОбъект.Партнер, Неопределено),
																					?(ЗначениеЗаполнено(ТекущийОбъект.КонтактноеЛицо), ТекущийОбъект.КонтактноеЛицо, Неопределено),
																					Истина);
	КонецЕсли;
																				
	// Перенос документов
	Если ЗначениеЗаполнено(Объект.Ссылка)		
		// Выбран клиент, но еще создается КЛ (куда должна быть помещена КИ ПК)
		И НЕ (ПараметрыЗаписи.Свойство("ИмяСобытия") И ПараметрыЗаписи.ИмяСобытия = "ОткрытиеФормыРегистрацииКонтакта")
		И (ПараметрыЗаписи.Свойство("ЗаписьИзФормыРегистрации")
		Или (НЕ ЗначениеЗаполнено(Объект.Ссылка.Партнер) И ЗначениеЗаполнено(ТекущийОбъект.Партнер))) Тогда
		 
		CRM_ОбщегоНазначенияСервер.ПереопределитьПисьмаСПотенциальногоКлиентаНаПартнера(Объект.Ссылка,
			 ТекущийОбъект.Партнер,
			 ТекущийОбъект.КонтактноеЛицо);
		CRM_ОбщегоНазначенияСервер.ПереопределитьЗвонкиСПотенциальногоКлиентаНаПартнера(Объект.Ссылка,
			 ТекущийОбъект.Партнер,
			 ТекущийОбъект.КонтактноеЛицо);
		CRM_ОбщегоНазначенияСервер.ПереписатьАктивныеИнтересыСПотенциальногоКлиентаНаПартнера(Объект.Ссылка,
			 ТекущийОбъект.Партнер,
			 ТекущийИнтерес);
		CRM_ОбщегоНазначенияСервер.ПереопределитьДиалогиСПотенциальногоКлиентаНаПартнера(Объект.Ссылка,
			 ТекущийОбъект.Партнер,
			 ТекущийОбъект.КонтактноеЛицо);
		CRM_ОбщегоНазначенияСервер.ПереопределитьВзаимодействияСПотенциальногоКлиентаНаПартнера(Объект.Ссылка,
			 ТекущийОбъект.Партнер,
			 ТекущийОбъект.КонтактноеЛицо);
			 
		ОбъектыПереопределеныСПК = Истина;
	КонецЕсли;
	
	Если НЕ (Объект.Ссылка.CRM_ОтписалсяОтEmailРассылок = Объект.CRM_ОтписалсяОтEmailРассылок) Тогда
		CRM_ИнтеграцияССервисамиРассылок.ПодписатьПолучателяНаРассылки(Объект, НЕ Объект.CRM_ОтписалсяОтEmailРассылок, Отказ);
	КонецЕсли;
	
	// Если 
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не Элементы.Разделы_ПереключитьДубли.Доступность Тогда
		Элементы.Разделы_ПереключитьДубли.Доступность = Истина;
	КонецЕсли;
	Если Не Элементы.Разделы_ПереключитьПотенциальныеКлиенты.Доступность Тогда
		Элементы.Разделы_ПереключитьПотенциальныеКлиенты.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПослеЗаписи".
//
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ОбъектыПереопределеныСПК Тогда
		
		ПараметрОповещения = Новый Структура("ПК, Интерес, Партнер, КонтактноеЛицо",
											Объект.Ссылка, ТекущийИнтерес, Объект.Партнер, Объект.КонтактноеЛицо);
		Оповестить("ОбъектыПереопределеныСПК", ПараметрОповещения, ЭтотОбъект);
		
	Иначе
		Оповестить("НовыйПотенциальныйКлиентЗаписан", Объект.Ссылка, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры // ПослеЗаписи()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ЛентаСобытий_Обновить" Или
		ИмяСобытия = "ОбновитьПланировщик" Или
		ИмяСобытия = "Запись_ЗадачаИсполнителя" Или
		ИмяСобытия = "СохраненаЛичнаяЗадача" Или
		ИмяСобытия = "СохраненоПоручение" Или
		ИмяСобытия = "Запись_Файл" Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	ИначеЕсли ИмяСобытия = "НовыйПартнерЗаписанСПараметрами" И Параметр.ИсточникДанных = Объект.Ссылка Тогда
		Прочитать();
		Объект.Партнер = Параметр.Данные.Клиент;
		Объект.КонтактноеЛицо = Параметр.Данные.Контакт;
		Записать(Новый Структура("ИмяСобытия", "НовыйПартнерЗаписанСПараметрами"));
		Элементы.СоздатьНовогоКлиента.Видимость = НЕ ЗначениеЗаполнено(Объект.Партнер);
		Элементы.СоздатьНовыйКонтакт.Видимость = НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо);
		Элементы.ПеренестиКИ.Видимость = ЗначениеЗаполнено(Объект.Партнер);
	ИначеЕсли ИмяСобытия = "НовоеКонтактноеЛицоЗаписаноСПараметрами" И Параметр.ИсточникДанных = Объект.Ссылка Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Партнер) Тогда
			Объект.Партнер = Параметр.Данные.Клиент;
		КонецЕсли;
		Объект.КонтактноеЛицо = Параметр.Данные.Контакт;
		Записать();
	ИначеЕсли ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		
		СформироватьПредставлениеВложений();
		
	ИначеЕсли ИмяСобытия = "Запись_Файл"
		И Параметр.Свойство("ВладелецФайла") И Параметр.ВладелецФайла = Объект.Ссылка Тогда
		
		СформироватьПредставлениеВложений();
		
	ИначеЕсли ИмяСобытия = "ОбновленаСвязьМеждуПК" И (Параметр = Неопределено
		 ИЛИ Параметр.ПотенциальныйКлиентА = Объект.Ссылка
		 ИЛИ Параметр.ПотенциальныйКлиентБ = Объект.Ссылка) Тогда
		ПодключитьОбработчикОжидания("ОбновитьСвязиМеждуПКНаФорме", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка заполнения контактной информации
	Отказ = Истина;
	Для каждого СтрокаКИ Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		Если ЗначениеЗаполнено(СтрокаКИ.Представление) Тогда
			Отказ = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнена контактная информация! Запись запрещена.'"));
		Возврат;
	КонецЕсли;
	// Конец
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СоздатьКлиентаНаОсновеПотенциальногоКлиента();
	
КонецПроцедуры // ПартнерСоздание()

&НаКлиенте
Процедура КонтактноеЛицоСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СоздатьНовыйКонтакт(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЭтоНовый И Не Объект.Ссылка.Пустая() Тогда
		Если ЗначениеЗаполнено(Объект.Партнер) И Не ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
			CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.ПотенциальныйКлиент.КарточкаПотенциальногоКлиента.Удобство.ЗаполнениеПоляКлиент");
		ИначеЕсли Не ЗначениеЗаполнено(Объект.Партнер) И ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
			CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.ПотенциальныйКлиент.КарточкаПотенциальногоКлиента.Удобство.ЗаполнениеПоляКонтакт");
		ИначеЕсли ЗначениеЗаполнено(Объект.Партнер) И ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
			CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.ПотенциальныйКлиент.КарточкаПотенциальногоКлиента.Удобство.ЗаполненоПолеКлиентИКонтакт");
		КонецЕсли;
	КонецЕсли;
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Клиенты.ПотенциальныйКлиент.ДлительностьСценариев.ВремяРаботыВФорме");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура - обработчик команды формы "СоздатьНовогоКлиента".
//
Процедура СоздатьНовогоКлиента(Команда)
	
	СоздатьКлиентаНаОсновеПотенциальногоКлиента();
	
КонецПроцедуры // СоздатьНовогоКлиента()

&НаКлиенте
// Процедура - обработчик команды формы "СоздатьНовыйКонтакт".
//
Процедура СоздатьНовыйКонтакт(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Если НЕ Записать(Новый Структура("ИмяСобытия", "ОткрытиеФормыРегистрацииКонтакта")) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерПредыдущий = Объект.Партнер;
	
	Элементы.ГруппаКонтактноеЛицо.Видимость = Ложь;
	Элементы.Партнер.АвтоОтметкаНезаполненного = Истина;
	
	// ШаблоныЭлементовФорм
	ОписаниеОповещения = Новый ОписаниеОповещения("СозданиеКлиентаЗавершение", ЭтотОбъект);
	ШаблоныЭлементов_СоздатьЭлементы("Обработка.CRM_СлужебнаяШаблоныЭлементовФорм.Форма.ШаблонСозданиеКлиентаИКонтакта",
		Новый Структура("ПотенциальныйКлиент, ТолькоКонтакт", Объект.Ссылка), ОписаниеОповещения, "ГруппаКонтейнерФормРегистрации");
		
	ПередатьКлиентаВФормуРегистрации();
	
КонецПроцедуры // СоздатьНовыйКонтакт()

&НаКлиенте
Процедура СозданиеКлиентаЗавершение(Результат, Шаблон) Экспорт
	// ШаблоныЭлементовФорм
	ШаблоныЭлементов_УдалитьЭлементы(Результат.ИдентификаторФормыСтрокой);
	Если Результат.Свойство("Данные") Тогда
		// В данной форме заполнение Партнера и КЛ не имеет смысла,
		// т.к. оно происходит в форме регистрации
		Прочитать();
		ПартнерПриИзменении(Неопределено);
		Прочитать();
		
		ПараметрыЗаписи = Новый Структура;
		//Если НЕ ЗначениеЗаполнено(ПартнерПредыдущий) Тогда
			ПараметрыЗаписи.Вставить("ЗаписьИзФормыРегистрации");
		//КонецЕсли;
		
		Записать(ПараметрыЗаписи);
	Иначе
		Элементы.Партнер.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
		 
	Элементы.ГруппаПартнер.Видимость = Истина;
	Элементы.ГруппаКонтактноеЛицо.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиКИ(Команда)
	
	CRM_ОбщегоНазначенияСервер.СкопироватьКонтактнуюИнформациюПотенциальногоКлиента(Объект.Ссылка, Объект.Партнер, Неопределено, Истина);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Копирование контактной информации'"),
									Окно.ПолучитьНавигационнуюСсылку(),
									НСтр("ru = 'Контактная информация скопирована'"));
	
КонецПроцедуры

#Область ЛентаСобытий

&НаКлиенте
Процедура Лента_Обновить(Команда)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ПоказатьОтборы(Команда)
	
	Если Элементы.Лента_СписокОтборов.Скрыта() Тогда
		
		CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
			"CRM_Статистика.Прочее.ЛентаСобытий.ДлительностьСценариев.ВремяУстановкиФильтра");
		
		Элементы.Лента_СписокОтборов.Показать();
		ПодключитьОбработчикОжидания("Лента_Закрыть", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_Закрыть()
	
	Если Элементы.Лента_СписокОтборов.Скрыта() Тогда
		
		ТекущийЭлемент = Элементы.Лента_ПоказатьОтборы;
		ОтключитьОбработчикОжидания("Лента_Закрыть");
		
		CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
			"CRM_Статистика.Прочее.ЛентаСобытий.ДлительностьСценариев.ВремяУстановкиФильтра");
		
	Иначе
		ПодключитьОбработчикОжидания("Лента_Закрыть", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ЗакрепленныеСверхуПриИзменении(Элемент)
	
	НастройкаВсеСобытия = Лента_Отбор.Получить(0);
	
	Если НастройкаВсеСобытия.Пометка И Не Лента_ЗакрепленныеСверху Тогда
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрНеактивный;
	Иначе
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрАктивный;
	КонецЕсли;
	
	СохранитьЗначениеЗакрепленныеСверху();
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначениеЗакрепленныеСверху()
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("CRM_ЛентаСобытий_ЗакрепленныеСверху",
		"ЛентаПотенциальногоКлиента", Лента_ЗакрепленныеСверху);
КонецПроцедуры

#КонецОбласти

#Область ОбластьВвода

&НаКлиенте
Процедура БыстрыйВвод_СменитьСтраницу(Команда)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Команда) = Тип("ЭлементСпискаЗначений") Тогда
		ИмяКомандыМассив = СтрРазделить(Команда.Значение, "_");
	Иначе	
		ИмяКомандыМассив = СтрРазделить(Команда.Имя, "_");
		Если Команда.Имя = "БыстрыйВвод_Чат" Тогда
			CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.АРМДиалоги.Удобство.ЧатКарточкаПотенциальныйКлиент");
		КонецЕсли;
	КонецЕсли;
	ПереключитьСтраницуБыстрогоВвода(ИмяКомандыМассив[1]);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_Создать(Команда)
	
	Если Не CRM_ЛентаСобытийКлиент.ПроверитьЗаполнениеБыстрогоВвода(БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("CRM_КонтекстВызова", БыстрыйВвод_ТекущийТипОбъекта);
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_СоздатьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	CRM_ЛентаСобытийКлиент.ПоказатьВопросОЗаписиОбъекта(ЭтотОбъект, ОповещениеЗавершения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СоздатьЗавершение(ОбъектЗаписан, ДополнительныеПараметры) Экспорт
	
	Если ОбъектЗаписан Тогда
		
		ДанныеЗаполнения = CRM_ЛентаСобытийКлиент.ДанныеЗаполненияОбъектаБыстрогоВвода("ЛентаПотенциальногоКлиента",
			БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект);
		
		Если БыстрыйВвод_ТекущийТипОбъекта = "Чат" Тогда
			ВозможностьОтправкиСообщения = CRM_ЛентаСобытий.ПроверитьВозможностьОтправкиСообщения(ДанныеЗаполнения);
			Если Не ВозможностьОтправкиСообщения Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В данный мессенджер нельзя писать первыми!
				                                           |С указанным контактом не было диалогов.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		CRM_ЛентаСобытий.СоздатьОбъектБыстрыйВвод("ЛентаПотенциальногоКлиента",
			БыстрыйВвод_ТекущийТипОбъекта, ДанныеЗаполнения);
		Если БыстрыйВвод_ТекущийТипОбъекта = "Файл" Тогда
			СформироватьПредставлениеВложений();
		КонецЕсли;
		
		ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
		Если ДополнительныеПараметры.CRM_КонтекстВызова = "Взаимодействие" Тогда
			CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.ПотенциальныйКлиент.КарточкаПотенциальногоКлиента.Удобство.СозданиеВзаимодействияПК");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_Отменить(Команда)
	
	ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьПолучателейКопии(Команда)
	
	Элементы.БыстрыйВвод_ПисьмоСписокПолучателейКопий.Видимость = Истина;
	Элементы.БыстрыйВвод_ПоказатьПолучателейКопии.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьПолучателейСкрытойКопии(Команда)
	
	Элементы.БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий.Видимость = Истина;
	Элементы.БыстрыйВвод_ПоказатьПолучателейСкрытойКопии.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДругиеПараметры(Команда)
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ДругиеПараметрыЗавершение", ЭтотОбъект, Новый Структура);
	CRM_ЛентаСобытийКлиент.ПоказатьВопросОЗаписиОбъекта(ЭтотОбъект, ОповещениеЗавершения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДругиеПараметрыЗавершение(ОбъектЗаписан, ДополнительныеПараметры) Экспорт
	
	Если Не ОбъектЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ЛентаСобытийКлиент.ПоказатьПолнуюФормуОбъекта("ЛентаПотенциальногоКлиента",
		БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект);
	ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбычныйВвод_ПоказатьЕще(Команда)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОбычныйВвод_ПоказатьЕщеЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОповещениеЗавершения, ОбычныйВвод_Команды, Элементы.ОбычныйВвод_ПоказатьЕще);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбычныйВвод_ПоказатьЕщеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ВыбранныйЭлемент.Значение, "БыстрыйВвод_") = 1 Тогда
		БыстрыйВвод_СменитьСтраницу(ВыбранныйЭлемент);
	Иначе	
		CRM_ЛентаСобытийКлиент.СоздатьОбъектОбычныйВвод("ЛентаПотенциальногоКлиента", ВыбранныйЭлемент.Значение, ЭтотОбъект);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДобавитьФайл(Команда)
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ДобавитьФайлЗавершение", ЭтотОбъект);
	CRM_ЛентаСобытийКлиент.ДобавитьВложение(ЭтотОбъект, ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДобавитьФайлЗавершение(Успех, ДополнительныеПараметры) Экспорт
	
	Если Не Успех Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ОбновитьЭлементыВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_БыстрыйВвод_УдалитьФайл(Команда)
	
	ИдентификаторСсылкиВложения = СтрЗаменить(Команда.Имя, "БыстрыйВвод_Удалить_СсылкаВложения_", "");
	
	CRM_ЛентаСобытийКлиент.УдалитьВложение(ЭтотОбъект, ИдентификаторСсылкиВложения);
	
	БыстрыйВвод_ОбновитьЭлементыВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВставитьФайлИзБуфера(Команда)
	
	CRM_ЛентаСобытийКлиент.ВставитьФайлИзБуфераОбмена(ЭтотОбъект);
	БыстрыйВвод_ОбновитьЭлементыВложений();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ИсторияРеквизитов(Команда)
	
	УсловияОтбора = Новый Структура("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии", УсловияОтбора, Истина);
	ОткрытьФорму("Отчет.CRM_ИсторияРеквизитов.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Разделы_ПереключитьПотенциальныеКлиенты(Команда)
	
	Если Элементы.ГруппаДублиКлиента.Видимость Тогда
		Элементы.ГруппаДублиКлиента.Видимость = Ложь;
		Элементы.Разделы_ПереключитьДубли.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	КонецЕсли;
	
	Если Не ВыведеныПотенциальныеКлиенты Тогда
		ВывестиПотенциальныхКлиентов();
	КонецЕсли;
	
	ВыведеныПотенциальныеКлиенты = Истина;
	НастроитьКомандыДобавленныхТаблиц();
	
	ВидимостьПотенциальныхКлиентов = Элементы.ПотенциальныеКлиенты.Видимость;
	Элементы.ПотенциальныеКлиенты.Видимость = Не ВидимостьПотенциальныхКлиентов;
	Если ВидимостьПотенциальныхКлиентов Тогда
		Элементы.Разделы_ПереключитьПотенциальныеКлиенты.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	Иначе
		Элементы.Разделы_ПереключитьПотенциальныеКлиенты.Картинка = БиблиотекаКартинок.СтрелкаВниз;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Разделы_ПереключитьДубли(Команда)
	
	Если Элементы.ПотенциальныеКлиенты.Видимость Тогда
		Элементы.ПотенциальныеКлиенты.Видимость = Ложь;
		Элементы.Разделы_ПереключитьПотенциальныеКлиенты.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	КонецЕсли;
	
	Если Не ВыведеныДубли Тогда
		ВывестиДубли();
	КонецЕсли;
	
	ВыведеныДубли = Истина;
	НастроитьКомандыДобавленныхТаблиц();
	
	ВидимостьДублей = Элементы.ГруппаДублиКлиента.Видимость;
	Элементы.ГруппаДублиКлиента.Видимость = Не ВидимостьДублей;
	Если ВидимостьДублей Тогда
		Элементы.Разделы_ПереключитьДубли.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	Иначе
		Элементы.Разделы_ПереключитьДубли.Картинка = БиблиотекаКартинок.СтрелкаВниз;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Разделы_ПереключитьДополнительно(Команда)
	
	ВидимостьДополнительно = Элементы.ГруппаДополнительно.Видимость;
	Элементы.ГруппаДополнительно.Видимость = Не ВидимостьДополнительно;
	Если ВидимостьДополнительно Тогда
		Элементы.Разделы_ПереключитьДополнительно.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	Иначе
		Элементы.Разделы_ПереключитьДополнительно.Картинка = БиблиотекаКартинок.СтрелкаВниз;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		Если Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
			
			СвойстваВыполнитьОтложеннуюИнициализацию();
			МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
			
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если Элементы.ГруппаКонтейнерФормРегистрации.ПодчиненныеЭлементы.Количество() > 0 Тогда 
														// Находится в режиме ввода Контакта из ПК
														// по существующему клиенту
		ПередатьКлиентаВФормуРегистрации();
		Возврат;
	КонецЕсли;
	
	Элементы.СоздатьНовогоКлиента.Видимость = НЕ ЗначениеЗаполнено(Объект.Партнер);
	Элементы.СоздатьНовыйКонтакт.Видимость = НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо);
	Элементы.ПеренестиКИ.Видимость = ЗначениеЗаполнено(Объект.Партнер);
	
	ПартнерПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	Элементы.СоздатьНовыйКонтакт.Видимость = НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо);
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоОчистка(Элемент, СтандартнаяОбработка)
	Элементы.СоздатьНовыйКонтакт.Видимость = НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо);
КонецПроцедуры

&НаКлиенте
Процедура ПередатьКлиентаВФормуРегистрации()
	ЭлементСИдентификатором = Элементы.ГруппаКонтейнерФормРегистрации.ПодчиненныеЭлементы[0];
		CRM_ШаблоныЭлементовФормКлиент.ОбновитьЗначениеРеквизита(ШаблоныЭлементов_Формы[Прав(ЭлементСИдентификатором.Имя,
			 37)],
			"ПереданныйКлиент", Объект.Партнер);
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииНаСервере()
	
	НастроитьСвязиПараметровВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ФамилияПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	Объект.Фамилия = CRM_КлиентыКлиент.ПривестиФИОКСтандартномуВиду(Объект.Фамилия);

	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текФамилия) И текФамилия <> СокрЛП(Объект.Фамилия)) 
			 Или (ПустаяСтрока(Объект.Фамилия) И Не ПустаяСтрока(текФамилия)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текФамилия, СокрЛП(Объект.Фамилия)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
			
			Объект.Наименование = СокрЛП(Объект.Фамилия);
			
		ИначеЕсли Не ПустаяСтрока(Объект.Фамилия) И ПустаяСтрока(текФамилия) Тогда
			
			Объект.Наименование = СокрЛП(?(ЗначениеЗаполнено(Объект.Фамилия),   СокрЛП(Объект.Фамилия) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.Имя), 		 СокрЛП(Объект.Имя) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.Отчество),  СокрЛП(Объект.Отчество), ""));
			
		КонецЕсли;
		
	КонецЕсли;
	
	текФамилия = СокрЛП(Объект.Фамилия);
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект, Ложь, "");
	Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	
	ВыполнитьПоискДублейПоЗначению(Объект.Фамилия, Элемент);
	//ВыполнитьПоискДублейПоЗначению(Объект.Наименование, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИмяПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	Объект.Имя = CRM_КлиентыКлиент.ПривестиФИОКСтандартномуВиду(Объект.Имя);
	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текИмя) И текФамилия <> СокрЛП(Объект.Имя)) 
			 Или (ПустаяСтрока(Объект.Имя) И Не ПустаяСтрока(текИмя)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текИмя, СокрЛП(Объект.Имя)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
			
			Объект.Наименование = СокрЛП(Объект.Имя);
			
		ИначеЕсли Не ПустаяСтрока(Объект.Имя) И ПустаяСтрока(текИмя) Тогда
			
			Объект.Наименование = СокрЛП((?(ЗначениеЗаполнено(Объект.Фамилия), 	 СокрЛП(Объект.Фамилия) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.Имя), 		 СокрЛП(Объект.Имя) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.Отчество),  СокрЛП(Объект.Отчество), "")));   
			
		КонецЕсли;
		
	КонецЕсли;
	
	текИмя = СокрЛП(Объект.Имя);
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект, Ложь, "");
	Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОтчествоПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	Объект.Отчество = CRM_КлиентыКлиент.ПривестиФИОКСтандартномуВиду(Объект.Отчество);
	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текОтчество) И текОтчество <> СокрЛП(Объект.Отчество)) 
			Или (ПустаяСтрока(Объект.Отчество) И Не ПустаяСтрока(текОтчество)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текОтчество, СокрЛП(Объект.Отчество)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
		
			Объект.Наименование = СокрЛП(Объект.Отчество);
	
		ИначеЕсли Не ПустаяСтрока(Объект.Отчество) И ПустаяСтрока(текОтчество) Тогда

			Объект.Наименование = Объект.Наименование + " " + СокрЛП(Объект.Отчество);
			
		КонецЕсли;
						
	КонецЕсли;
	
	текОтчество = СокрЛП(Объект.Отчество);
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект, Ложь, "");
	Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Если Не ПредставлениеВыбраноИзСписка Тогда
		
		СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект, Ложь, "");
		Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "Наименование".
//
Процедура НаименованиеПриИзменении(Элемент)
	РедактированиеПредставления = Истина;
	Если НЕ РедактированиеФИО И НЕ ПредставлениеВыбраноИзСписка Тогда
		ФИО = Объект.Наименование;
		СтруктураЗаполнения = ЗаполнитьФИОНаСервере();
		ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения);
	КонецЕсли;
	
	ВыполнитьПоискДублейПоЗначению(Объект.Наименование, Элемент);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Наименование".
//
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПредставлениеВыбраноИзСписка = Истина;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "АвтоПодбор" поля ввода "Наименование".
//
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	МассивПредставлений = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект, Ложь, "");
	Если МассивПредставлений.Количество() > 0 Тогда
		Если ДанныеВыбора = Неопределено Тогда
			ДанныеВыбора = Новый СписокЗначений();
		КонецЕсли;
		Для Каждого тДанные Из МассивПредставлений Цикл
			ДанныеВыбора.Вставить(0, тДанные, тДанные);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#Область ЛентаСобытий

&НаКлиенте
Процедура Лента_HTMLДокументСформирован(Элемент)
	
	Если Лента_HTML_ПозицияОтКрая <> 0 Тогда
		Смещение = Элементы.Лента_HTML.Документ.getElementById("scollable-wrap").scrollHeight - Лента_HTML_ПозицияОтНачала;
		Элементы.Лента_HTML.Документ.getElementById("scollable-wrap").scrollTop = Лента_HTML_ПозицияОтКрая + Смещение;
		Лента_HTML_ПозицияОтКрая = 0;
		Лента_HTML_ПозицияОтНачала = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСсылки = ДанныеСобытия.href;
	Если Не ЗначениеЗаполнено(ДанныеСсылки) Тогда
		Возврат;
	КонецЕсли;
	
	Если сфпСофтФонПроСервер.ЭтоСсылкаСлужебногоПользователя(ДанныеСсылки) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаКоманд = CRM_ЛентаСобытийКлиент.ИменаКомандОбъектовЛенты();
	
	Для Каждого ИмяКоманды Из ИменаКоманд Цикл
		ПозицияРазделителя = СтрНайти(ДанныеСсылки, ИмяКоманды);
		Если ПозицияРазделителя > 0 Тогда
			Если ИмяКоманды = "ОбъектЛенты_Закрепить_" Или ИмяКоманды = "ОбъектЛенты_Открепить_" Тогда
				Лента_HTML_ПозицияОтКрая = Элементы.Лента_HTML.Документ.getElementById("scollable-wrap").scrollTop;
				Лента_HTML_ПозицияОтНачала = Элементы.Лента_HTML.Документ.getElementById("scollable-wrap").scrollHeight;
			КонецЕсли;
			ПараметрКоманды = Сред(ДанныеСсылки, ПозицияРазделителя + СтрДлина(ИмяКоманды));
			CRM_ЛентаСобытийКлиент.ВыполнитьКомандуЛенты(ИмяКоманды, ПараметрКоманды, ЭтотОбъект);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ПозицияРазделителя = СтрНайти(ДанныеСсылки, "ЛентаЗагрузитьЕще");
	Если ПозицияРазделителя > 0 Тогда
		Лента_КоличествоОбъектовИстории = Лента_КоличествоОбъектовИстории + 50;
		Лента_Прокрутить = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ЗадачаИсполнителя")
		 И ЗначениеЗаполнено(ЭтотОбъект["ЗадачаИсполнителя"])
		И СтрНайти(ДанныеСсылки, ПолучитьНавигационнуюСсылку(ЭтотОбъект["ЗадачаИсполнителя"])) > 0 Тогда
		Если Элементы.Найти("ГруппаОписаниеЗадачи") <> Неопределено Тогда
			Элементы.ГруппаОписаниеЗадачи.Показать();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СсылкаНаОбъект = CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуИзНавигационной(ДанныеСсылки);
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.CRM_Диалоги") Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.АРМДиалоги.ОткрытиеВОдинКлик.ПереходИзЛентыКарточкиПотенциальныйКлиент");
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента",
			 Новый Структура("Ключ", СсылкаНаОбъект),
			 ЭтотОбъект);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента",
			 Новый Структура("Ключ", СсылкаНаОбъект),
			 ЭтотОбъект);
	Иначе
		Попытка
			ПозицияНайденного = СтрНайти(ДанныеСсылки, "e1cib/");
			ДлинаСсылкиВнутр  = СтрДлина(ДанныеСсылки) + 1 - ПозицияНайденного;
			НавигационнаяСсылка = Прав(ДанныеСсылки, ДлинаСсылкиВнутр);
			ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
		Исключение
			// Обработка не требуется.
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ОтборВсеСобытияПриИзменении(Элемент)
	
	НастройкаВсеСобытия = Лента_Отбор.Получить(0);
	ПометкаВсеСобытия = НастройкаВсеСобытия.Пометка;
	Для Сч = 1 По Лента_Отбор.Количество() - 1 Цикл
		НастройкаОтбора = Лента_Отбор.Получить(Сч);
		НастройкаОтбора.Пометка = ПометкаВсеСобытия;
	КонецЦикла;
	
	Если НастройкаВсеСобытия.Пометка Тогда
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрНеактивный;
	Иначе
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрАктивный;
	КонецЕсли;
	
	CRM_ЛентаСобытий.СохранитьОтборЛенты(Лента_Отбор, "ЛентаИнтереса");
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Лента_ОтборПриИзменении(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "Лента_Отбор_", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_Пометка", "");
	
	Если ИмяЭлемента = "Звонки" Или ИмяЭлемента = "Письма" Тогда
		ЭлементСписка = Лента_Отбор.НайтиПоЗначению(ИмяЭлемента);
		ЭлементСпискаВходящие = Лента_Отбор.НайтиПоЗначению("Входящие" + ИмяЭлемента);
		ЭлементСпискаИсходящие = Лента_Отбор.НайтиПоЗначению("Исходящие" + ИмяЭлемента);
		ЭлементСпискаВходящие.Пометка = ЭлементСписка.Пометка;
		ЭлементСпискаИсходящие.Пометка = ЭлементСписка.Пометка;
	КонецЕсли;
	
	Если СтрНайти(ИмяЭлемента, "Входящие") > 0 Тогда
		ИмяРодителя = СтрЗаменить(ИмяЭлемента, "Входящие", "");
		ЭлементСписка = Лента_Отбор.НайтиПоЗначению(ИмяРодителя);
		ЭлементСпискаВходящие = Лента_Отбор.НайтиПоЗначению("Входящие" + ИмяРодителя);
		ЭлементСпискаИсходящие = Лента_Отбор.НайтиПоЗначению("Исходящие" + ИмяРодителя);
		ЭлементСписка.Пометка = Макс(ЭлементСпискаВходящие.Пометка, ЭлементСпискаИсходящие.Пометка);
	КонецЕсли;
	
	Если СтрНайти(ИмяЭлемента, "Исходящие") > 0 Тогда
		ИмяРодителя = СтрЗаменить(ИмяЭлемента, "Исходящие", "");
		ЭлементСписка = Лента_Отбор.НайтиПоЗначению(ИмяРодителя);
		ЭлементСпискаВходящие = Лента_Отбор.НайтиПоЗначению("Входящие" + ИмяРодителя);
		ЭлементСпискаИсходящие = Лента_Отбор.НайтиПоЗначению("Исходящие" + ИмяРодителя);
		ЭлементСписка.Пометка = Макс(ЭлементСпискаВходящие.Пометка, ЭлементСпискаИсходящие.Пометка);
	КонецЕсли;
	
	ПометкаСобытие = Истина;
	Для Сч = 1 По Лента_Отбор.Количество() - 1 Цикл
		НастройкаОтбора = Лента_Отбор.Получить(Сч);
		ПометкаСобытие = Мин(ПометкаСобытие, НастройкаОтбора.Пометка);
	КонецЦикла;
	НастройкаВсеСобытия = Лента_Отбор.Получить(0);
	НастройкаВсеСобытия.Пометка = ПометкаСобытие;
	
	Если НастройкаВсеСобытия.Пометка Тогда
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрНеактивный;
	Иначе
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрАктивный;
	КонецЕсли;
	
	CRM_ЛентаСобытий.СохранитьОтборЛенты(Лента_Отбор, "ЛентаИнтереса");
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбластьВвода

// Общее

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаПриИзменении(Элемент = Неопределено)
	
	Если БыстрыйВвод_ДатаНачала = НачалоДня(БыстрыйВвод_ДатаНачала) И БыстрыйВвод_КэшированноеВремя > 0 Тогда
		БыстрыйВвод_ДатаНачала = БыстрыйВвод_ДатаНачала + БыстрыйВвод_КэшированноеВремя;
		БыстрыйВвод_КэшированноеВремя = 0;
	КонецЕсли;
	
	Если НачалоДня(БыстрыйВвод_КэшированнаяДатаНачала) = НачалоДня(БыстрыйВвод_ДатаОкончания) Тогда
		ВремяЗавершения = БыстрыйВвод_ДатаОкончания - НачалоДня(БыстрыйВвод_ДатаОкончания);
		БыстрыйВвод_ДатаОкончания = НачалоДня(БыстрыйВвод_ДатаНачала) + ВремяЗавершения;
	КонецЕсли;
	
	Если БыстрыйВвод_ДатаНачала > БыстрыйВвод_ДатаОкончания Тогда
		
		СрокПоУмолчанию = 3600;
		Если БыстрыйВвод_ТекущийТипОбъекта = "Взаимодействие" Тогда
			СрокПоУмолчанию = 1800;
		КонецЕсли;
			
		БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + СрокПоУмолчанию;
		БыстрыйВвод_ЗадачаВариантСрока = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.ЧерезЧас");
	КонецЕсли;
	
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	ПроверитьКорректностьДатыОкончания();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	Если ЗначениеЗаполнено(БыстрыйВвод_ДатаНачала) Тогда
		ПараметрыОткрытия.Вставить("ДатаПоУмолчанию", БыстрыйВвод_ДатаНачала);
	КонецЕсли;
	ПараметрыОткрытия.Вставить("ДанныеБыстрогоВвода",
		 CRM_ЛентаСобытийКлиент.ДанныеЗаполненияОбъектаБыстрогоВвода("ЛентаПотенциальногоКлиента",
		 БыстрыйВвод_ТекущийТипОбъекта,
		 ЭтотОбъект));
	ПараметрыОткрытия.ДанныеБыстрогоВвода.Вставить("ОткрыватьФорму", Истина);
	БыстрыйВвод_КэшированноеВремя = БыстрыйВвод_ДатаНачала - НачалоДня(БыстрыйВвод_ДатаНачала);
	CRM_ВзаимодействияКлиент.ДатаВзаимодействияНачалоВыбора(Объект, Элемент, ДанныеВыбора,
		СтандартнаяОбработка, ПараметрыОткрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ЭтоРезультатРаботыСКалендарем") Тогда
			СтандартнаяОбработка = Ложь;
			
			БыстрыйВвод_ДатаНачала = ВыбранноеЗначение.Начало;
			БыстрыйВвод_ДатаОкончания = ВыбранноеЗначение.Конец;
			
			БыстрыйВвод_ДатаНачалаПриИзменении();
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.CRM_ВариантыУстановкиДаты") Тогда
		СтандартнаяОбработка = Ложь;
		
		ДлительностьИнтервала = БыстрыйВвод_ДатаОкончания - БыстрыйВвод_ДатаНачала;
		
		Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.Вручную") Тогда
			ОписаниеОповещения	= Новый ОписаниеОповещения(
				"БыстрыйВвод_ДатаНачалаОбработкаВыбораЗавершение", ЭтотОбъект, ДлительностьИнтервала);
			ОткрытьФорму("ОбщаяФорма.CRM_ФормаРучногоПереносаВремени", , ЭтотОбъект, КлючУникальности, , , ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			// Осуществляется перенос обеих дат на указанный интервал
			БыстрыйВвод_ДатаНачала = CRM_ОбщегоНазначенияСервер.ДатаПоВариантуИнтервала(
				CRM_ОбщегоНазначенияСервер.БазоваяДатаПоВариантуИнтервала(БыстрыйВвод_ДатаНачала, ВыбранноеЗначение),
				ВыбранноеЗначение);
			
			БыстрыйВвод_ДатаОкончания = CRM_ОбщегоНазначенияСервер.ДатаПоВариантуИнтервала(
				CRM_ОбщегоНазначенияСервер.БазоваяДатаПоВариантуИнтервала(БыстрыйВвод_ДатаОкончания, ВыбранноеЗначение),
				ВыбранноеЗначение, ДлительностьИнтервала);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		БыстрыйВвод_ДатаНачала = Результат;
		БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + ДополнительныеПараметры;
	КонецЕсли;
	
КонецПроцедуры // БыстрыйВвод_ДатаНачалаОбработкаВыбораЗавершение()

&НаКлиенте
Процедура БыстрыйВвод_ВремяНачалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ВремяНачалаНачалоВыбораЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, БыстрыйВвод_ДатаНачала,
		Элемент, БыстрыйВвод_ДатаНачала, Ложь, ОповещениеЗавершения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяНачалаНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ДатаНачала = ВыбранныйЭлемент.Значение;
	БыстрыйВвод_ДатаНачалаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаОкончанияПриИзменении(Элемент)
	
	Если БыстрыйВвод_ДатаНачала > БыстрыйВвод_ДатаОкончания Тогда
		
		СрокПоУмолчанию = 3600;
		Если БыстрыйВвод_ТекущийТипОбъекта = "Взаимодействие" Тогда
			СрокПоУмолчанию = 1800;
		КонецЕсли;
		
		БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + СрокПоУмолчанию;
		БыстрыйВвод_ЗадачаВариантСрока = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.ЧерезЧас");
	КонецЕсли;
	ПроверитьКорректностьДатыОкончания();
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаОкончанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.CRM_ВариантыУстановкиДаты") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.Вручную") Тогда
			ОписаниеОповещения	= Новый ОписаниеОповещения("БыстрыйВвод_ДатаОкончанияОбработкаВыбораЗавершение", ЭтотОбъект);
			ОткрытьФорму("ОбщаяФорма.CRM_ФормаРучногоПереносаВремени", , ЭтотОбъект, КлючУникальности, , , ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			БыстрыйВвод_ДатаОкончания = CRM_ОбщегоНазначенияСервер.ДатаПоВариантуИнтервала(
				CRM_ОбщегоНазначенияСервер.БазоваяДатаПоВариантуИнтервала(БыстрыйВвод_ДатаОкончания, ВыбранноеЗначение),
				ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаОкончанияОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		БыстрыйВвод_ДатаОкончания = Результат;
	КонецЕсли;
	
КонецПроцедуры // БыстрыйВвод_ДатаОкончанияОбработкаВыбораЗавершение()

&НаКлиенте
Процедура БыстрыйВвод_ВремяОкончанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ВремяОкончанияНачалоВыбораЗавершение", ЭтотОбъект);
	ДобавлятьДлительность = (НачалоДня(БыстрыйВвод_ДатаНачала) = НачалоДня(БыстрыйВвод_ДатаОкончания));
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, БыстрыйВвод_ДатаОкончания,
		Элемент, БыстрыйВвод_ДатаНачала, ДобавлятьДлительность, ОповещениеЗавершения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяОкончанияНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ДатаОкончания = ВыбранныйЭлемент.Значение;
	ПроверитьКорректностьДатыОкончания();
КонецПроцедуры

// Примечание

&НаКлиенте
Процедура БыстрыйВвод_ПримечаниеТемаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТемаЗаполнена = ЗначениеЗаполнено(Текст);
	ВысотаТемы = ?(ТемаЗаполнена, 3, 1);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		 "БыстрыйВвод_ПримечаниеТема", "Высота",
		 ВысотаТемы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		 "БыстрыйВвод_КомандыПримечание", "Видимость",
		 ТемаЗаполнена);
	Если ТемаЗаполнена Тогда
		Элементы.БыстрыйВвод_СоздатьПримечание.КнопкаПоУмолчанию = Истина;
	Иначе	
		Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
	КонецЕсли;		
	
КонецПроцедуры

// Взаимодействие

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеВидПриИзменении(Элемент)
	
	БыстрыйВвод_Тема = CRM_ЛентаСобытий.ЗначениеРеквизитаОбъекта(БыстрыйВвод_ВзаимодействиеВид, "Тема");
	БыстрыйВвод_Содержание = CRM_ЛентаСобытий.ЗначениеРеквизитаОбъекта(БыстрыйВвод_ВзаимодействиеВид, "Описание");
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеВидОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеНаВесьДеньПриИзменении(Элемент)
	
	Элементы.БыстрыйВвод_ВзаимодействиеДатаНачала_Время.Видимость = (Не БыстрыйВвод_ВзаимодействиеНаВесьДень);
	Элементы.БыстрыйВвод_ВзаимодействиеДатаОкончания_Время.Видимость = (Не БыстрыйВвод_ВзаимодействиеНаВесьДень);
	
	Если БыстрыйВвод_ВзаимодействиеНаВесьДень Тогда
		ПараметрыДня = CRM_ЛентаСобытий.ПараметрыРабочегоДня(ТекущийПользователь);
		БыстрыйВвод_ДатаНачала = НачалоДня(БыстрыйВвод_ДатаНачала) + (ПараметрыДня.ВремяНачала - Дата('00010101'));
		БыстрыйВвод_ДатаОкончания = НачалоДня(БыстрыйВвод_ДатаОкончания) + (ПараметрыДня.ВремяОкончания - Дата('00010101'));
	КонецЕсли;
	
КонецПроцедуры

// Задача

// не используется
&НаКлиенте
Процедура БыстрыйВвод_ВариантСрокаПриИзменении(Элемент)
	
	БыстрыйВвод_ДатаОкончания = CRM_ЛентаСобытий.ДатаОкончанияПоВарианту(БыстрыйВвод_ДатаНачала,
		 БыстрыйВвод_ЗадачаВариантСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВариантСрокаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Письмо

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	БыстрыйВвод_ПисьмоУчетнаяЗапись = ВыбранноеЗначение;
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	БыстрыйВвод_ПисьмоОтправительПредставление = ЭлементСписка.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(БыстрыйВвод_ПисьмоУчетнаяЗапись) Тогда
		ПоказатьЗначение(, БыстрыйВвод_ПисьмоУчетнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейПриИзменении(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейПисьма;
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейКопий;
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстРедактирования) Тогда
		ЭтотОбъект[ИмяТаблицы].Очистить();
		Возврат;
	КонецЕсли;
	
	Длина = СтрДлина(ТекстРедактирования);
	
	НачалоСтроки = 0;
	КонецСтроки = 0;
	НачалоКолонки = 0;
	КонецКолонки = 0;
	Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	Элемент.УстановитьГраницыВыделения(1, НачалоКолонки, 1, КонецКолонки);
	
	ЕстьОшибки = Ложь;
	Результат = CRM_ОбщегоНазначенияКлиентСервер.АнализСтрокиАдресовЭП(ТекстРедактирования, , ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Для каждого Адрес Из Результат Цикл
			Если Адрес.КодОшибки <> 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Адрес.Сообщение, , ИмяЭлемента);
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	СоответствияАдресовИКонтактов = Новый СписокЗначений;
	ДанныеПолучателей = ЭтотОбъект[ИмяТаблицы];
	СтруктураДанных = CRM_ЛентаСобытий.ПреобразоватьИменаПолучателей(ДанныеПолучателей,
		БыстрыйВвод_ПисьмоУчетнаяЗапись, Результат, СоответствияАдресовИКонтактов);
	
	ЭтотОбъект[ИмяТаблицы].Очистить();
	Для Каждого ДанныеПолучателя Из СтруктураДанных.Получатели Цикл
		ЗаполнитьЗначенияСвойств(ЭтотОбъект[ИмяТаблицы].Добавить(), ДанныеПолучателя);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ГруппаАдресов = "Кому";
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ГруппаАдресов = "Копии";
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ГруппаАдресов = "Скрытые";
	Иначе
		Возврат;
	КонецЕсли;
	
	СписокВыбранных = Новый СписокЗначений;
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучатели),
		 "Кому");
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучателиКопий),
		 "Копии");
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий),
		 "Скрытые");
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись",		БыстрыйВвод_ПисьмоУчетнаяЗапись);
	ПараметрыОткрытия.Вставить("СписокВыбранных",	СписокВыбранных);
	ПараметрыОткрытия.Вставить("ГруппаПоУмолчанию",	ГруппаАдресов);
	ПараметрыОткрытия.Вставить("ГруппаАдресов",		ГруппаАдресов);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_СписокПолучателейНачалоВыбораЗавершение",
		 ЭтотОбъект,
		 Новый Структура);
	ОткрытьФорму("ОбщаяФорма.CRM_АдреснаяКнига", ПараметрыОткрытия, , , , , ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если (ТипЗнч(Результат) <> Тип("Массив")) И (ТипЗнч(Результат) <> Тип("Соответствие")) Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ПисьмоПолучатели.Очистить();
	БыстрыйВвод_ПисьмоПолучателиКопий.Очистить();
	БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Очистить();
	
	Для Каждого Элемент Из Результат Цикл
		
		Если Элемент.Группа = "Кому" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ИначеЕсли Элемент.Группа = "Копии" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ИначеЕсли Элемент.Группа = "Скрытые" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		Иначе
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЭтотОбъект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
		НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, ",", "");
		НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, ";", "");
		
	КонецЦикла;
	
	ДанныеКонтактов = Новый Структура;
	ДанныеКонтактов.Вставить("Кому", БыстрыйВвод_ПисьмоПолучатели);
	ДанныеКонтактов.Вставить("Копии", БыстрыйВвод_ПисьмоПолучателиКопий);
	ДанныеКонтактов.Вставить("Скрытые", БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий);
	
	ПредставленияКонтактов = CRM_ЛентаСобытий.ПредставленияКонтактовПисьма(ДанныеКонтактов);
	
	БыстрыйВвод_ПисьмоСписокПолучателейПисьма		= ПредставленияКонтактов.Кому;
	БыстрыйВвод_ПисьмоСписокПолучателейКопий		= ПредставленияКонтактов.Копии;
	БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий	= ПредставленияКонтактов.Скрытые;
	
	ВидимостьПолучателейКопий = БыстрыйВвод_ПисьмоПолучателиКопий.Количество() > 0;
	ВидимостьПолучателейСкрытыхКопий = БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Количество() > 0;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПисьмоСписокПолучателейКопий", "Видимость", ВидимостьПолучателейКопий);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПоказатьПолучателейКопии", "Видимость", Не ВидимостьПолучателейКопий);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий", "Видимость", ВидимостьПолучателейСкрытыхКопий);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПоказатьПолучателейСкрытойКопии", "Видимость", Не ВидимостьПолучателейСкрытыхКопий);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ЗаголовокСписка = НСтр("ru='Список получателей письма (Кому)'");
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ЗаголовокСписка = НСтр("ru='Список получателей письма (Копии)'");
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		ЗаголовокСписка = НСтр("ru='Список получателей письма (Скрытые копии)'");
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяТаблицы].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", ЗаголовокСписка);
	ПараметрыОткрытия.Вставить("МассивПолучателей", ЭтотОбъект[ИмяТаблицы]);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаСпискаПолучателей",
		 ПараметрыОткрытия, ЭтотОбъект, , , , ,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не БыстрыйВвод_АктивенАвтоПодбор Тогда
		Возврат;
	КонецЕсли;
	
	НачалоСтроки = 0;
	КонецСтроки = 0;
	НачалоКолонки = 0;
	КонецКолонки = 0;
	Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	
	ТекстДоМаркера = Лев(Элемент.ТекстРедактирования, КонецКолонки - 1);
	ТекстПослеМаркера = Сред(Элемент.ТекстРедактирования, КонецКолонки);
	
	СборнаяСтрока = "";
	
	Если СтрНайти(ТекстДоМаркера, ",") > 0 Тогда
		МассивПодстрок = СтрРазделить(ТекстДоМаркера, ",");
		Для Индекс = 0 По МассивПодстрок.ВГраница() Цикл
			Если Индекс = (МассивПодстрок.Количество() - 1) Тогда
				Продолжить;
			КонецЕсли;
			СборнаяСтрока = СборнаяСтрока + ?(СборнаяСтрока = "", "", ",") + МассивПодстрок[Индекс];
		КонецЦикла;
	КонецЕсли;
	
	СборнаяСтрока = СборнаяСтрока + ?(СборнаяСтрока = "", "", ",") + ВыбранноеЗначение;
	
	Если СтрНайти(ТекстПослеМаркера, ",") > 0 Тогда
		МассивПодстрок = СтрРазделить(ТекстПослеМаркера, ",");
		Для Индекс = 1 По МассивПодстрок.ВГраница() Цикл
			СборнаяСтрока = СборнаяСтрока + "," + МассивПодстрок[Индекс];
		КонецЦикла;
	КонецЕсли;
	
	ВыбранноеЗначение = СборнаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейАвтоПодбор(Элемент, Текст, ДанныеВыбора,
	 ПараметрыПолученияДанных, Ожидание,
	 СтандартнаяОбработка)
	
	БыстрыйВвод_АктивенАвтоПодбор = (Не Ожидание = 0);
	
	Если БыстрыйВвод_АктивенАвтоПодбор Тогда
		
		ДанныеВыбора = Неопределено;
		
		НачалоСтроки = 0;
		КонецСтроки = 0;
		НачалоКолонки = 0;
		КонецКолонки = 0;
		Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
		
		ТекстДоМаркера = Лев(Текст, КонецКолонки - 1);
		ТекстПослеМаркера = Сред(Текст, КонецКолонки);
		
		ИтоговаяСтрокаДляПоиска = "";
		
		Если НЕ СокрЛП(ТекстДоМаркера) = "" И СтрНайти(ТекстДоМаркера, ",") > 0 Тогда
			МассивПодстрок = СтрРазделить(ТекстДоМаркера, ",");
			ИтоговаяСтрокаДляПоиска = МассивПодстрок[МассивПодстрок.Количество() - 1];
		ИначеЕсли НЕ СокрЛП(ТекстДоМаркера) = "" И СтрНайти(ТекстДоМаркера, ",") > 0 Тогда
			ИтоговаяСтрокаДляПоиска = "";
		Иначе
			ИтоговаяСтрокаДляПоиска = ТекстДоМаркера;
		КонецЕсли;
		
		Если Не ИтоговаяСтрокаДляПоиска = "" И СтрДлина(СокрЛП(ИтоговаяСтрокаДляПоиска)) > 0 Тогда
			СписокДляВыбора = CRM_ЛентаСобытий.СписокПолучателейАвтоПодборНаСервере(СокрЛП(ИтоговаяСтрокаДляПоиска));
			Если СписокДляВыбора.Количество() > 0 Тогда
				СтандартнаяОбработка = Ложь;
				ДанныеВыбора = СписокДляВыбора;
			ИначеЕсли БыстрыйВвод_ПисьмоИсторияАдресов.Количество() > 0 Тогда
				СписокИзИстории = Новый СписокЗначений;
				Для Каждого ЭлементИстории Из БыстрыйВвод_ПисьмоИсторияАдресов Цикл
					Если СтрНайти(ЭлементИстории.Представление, ИтоговаяСтрокаДляПоиска) > 0 Тогда
						СтандартнаяОбработка = Ложь;
						СписокИзИстории.Добавить(ЭлементИстории.Значение, ЭлементИстории.Представление);
					КонецЕсли;
				КонецЦикла;
				ДанныеВыбора = СписокИзИстории;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли БыстрыйВвод_ПисьмоИсторияАдресов.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БыстрыйВвод_ПисьмоИсторияАдресов;
	КонецЕсли;
	
КонецПроцедуры

// Файл
&НаКлиенте
Процедура БыстрыйВвод_ФайлОписаниеИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЕстьВложения = (БыстрыйВвод_Вложения.Количество() > 0);
	ВысотаТемы = ?(ЗначениеЗаполнено(Текст), 3, 1);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_ФайлОписание",
		 "Высота",
		 ВысотаТемы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_КомандыФайл",
		 "Видимость",
		 ЕстьВложения);
	
	Если ЕстьВложения Тогда
		Элементы.БыстрыйВвод_СоздатьФайл.КнопкаПоУмолчанию = Истина;
	Иначе	
		Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Чат
&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УчетныеЗаписиМессенджеров = CRM_КлиентыСервер.УчетныеЗаписиМессенджеров(БыстрыйВвод_ЧатВидКИ, Объект.Ссылка, Истина);
	CRM_ЛентаСобытийКлиентСервер.НастроитьОбластьВводаУчетныеЗаписиМессенджеров(УчетныеЗаписиМессенджеров, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ЧатПолучательОбработкаВыбораЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
	
	CRM_ЛентаСобытийКлиент.ПоказатьВопросОЗаписиОбъекта(ЭтотОбъект, ОповещениеЗавершения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОбработкаВыбораЗавершение(ОбъектЗаписан, ДополнительныеПараметры) Экспорт
	
	Если Не ОбъектЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ВыбранноеЗначение = "НайтиВМессенджерах" Тогда
		
		ДополнительныеДанныеНомеровСоответствие = Новый Соответствие;
		МассивТелефонныхНомеров = ВсеТелефоныФормы(ДополнительныеДанныеНомеровСоответствие);
		
		Если МассивТелефонныхНомеров.Количество() = 0 Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Поиск в мессенджерах'"),
													ПолучитьНавигационнуюСсылку(Объект.Ссылка),
													НСтр("ru = 'Не найдены номера телефонов для поиска в мессенджерах'"));
		Иначе
			
			ПараметрыПрозвона = Новый Структура("Форма, Ссылка", ЭтотОбъект, Объект.Ссылка);
			ПараметрыПрозвона.Вставить("ПрозвонВсехНомеров");
			ПараметрыПрозвона.Вставить("МассивТелефонныхНомеров", МассивТелефонныхНомеров);
			ПараметрыПрозвона.Вставить("МассивИсключаемыхМессенджеров", Новый Массив);
			ПараметрыПрозвона.Вставить("ДополнительныеДанныеНомеровСоответствие", ДополнительныеДанныеНомеровСоответствие);
			ПараметрыПрозвона.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтактнаяИнформация");
			CRM_УправлениеКонтактнойИнформациейКлиент.CRM_ЗапуститьДлительнуюОперациюПрозвонитьМессенджеры(ПараметрыПрозвона);
			
		КонецЕсли;
		
	Иначе
		
		ПараметрыОтбора = Новый Структура("Идентификатор", ДополнительныеПараметры.ВыбранноеЗначение);
		НайденныеСтроки = БыстрыйВвод_ЧатПолучатели.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныйПолучатель = НайденныеСтроки[0];
			БыстрыйВвод_ЧатИдентификаторПолучателя	= НайденныйПолучатель.Идентификатор;
			БыстрыйВвод_ЧатАдрес					= НайденныйПолучатель.Адрес;
			БыстрыйВвод_ЧатПолучатель				= НайденныйПолучатель.Контакт;
			БыстрыйВвод_ЧатПредставлениеПолучателя	= НайденныйПолучатель.Представление;
			БыстрыйВвод_ЧатУчетнаяЗапись			= НайденныйПолучатель.УчетнаяЗапись;
			БыстрыйВвод_ЧатПредставлениеУчетнойЗаписи = НайденныйПолучатель.УчетнаяЗапись;
			БыстрыйВвод_ЧатГруппа					= НайденныйПолучатель.Группа;
			БыстрыйВвод_ЧатЭтоНомерТелефона			= НайденныйПолучатель.ЭтоНомерТелефона;
			БыстрыйВвод_ЧатВидКИ					= НайденныйПолучатель.ВидКИ;
		КонецЕсли;
		
		УчетныеЗаписиМессенджеров = CRM_КлиентыСервер.УчетныеЗаписиМессенджеров(БыстрыйВвод_ЧатВидКИ, Объект.Ссылка);
		CRM_ЛентаСобытийКлиентСервер.НастроитьОбластьВводаУчетныеЗаписиМессенджеров(УчетныеЗаписиМессенджеров, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатУчетнаяЗаписьОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатУчетнаяЗаписьОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатУчетнаяЗаписьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	БыстрыйВвод_ЧатУчетнаяЗапись = ВыбранноеЗначение;
	БыстрыйВвод_ЧатПредставлениеУчетнойЗаписи = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ФамилияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если (Ожидание > 0) И Не ПустаяСтрока(Текст) Тогда
		ПолучитьДанныеВыбораФИОНаСервере(Текст, Истина, , ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИмяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если (Ожидание > 0) И Не ПустаяСтрока(Текст) Тогда
		ПолучитьДанныеВыбораФИОНаСервере(Текст, , Истина, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОтчествоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если (Ожидание > 0) И Не ПустаяСтрока(Текст) Тогда
		ПолучитьДанныеВыбораФИОНаСервере(Текст, , , ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлыЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАвторДатаОбработкаНавигационнойСсылки(Элемент,
	 НавигационнаяСсылкаФорматированнойСтроки,
	 СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.Автор);
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы_Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
		
		Элемент = Элементы.Найти("РедактироватьСоставДополнительныхРеквизитов");
		Если Элемент <> Неопределено Тогда
			Элемент.Видимость = Ложь;
		КонецЕсли;
		
		CRM_УправлениеСвойствами.ПослеОтрисовкиДополнительныхРеквизитов(ЭтотОбъект);
		
		// Управление элементами на форме
		CRM_УправлениеЭлементамиНаФормах.ПриСозданииНаСервере(
			ЭтотОбъект,
			"КоманднаяПанельФормы",
			"ГруппаДополнительно");
		// Конец Управление элементами на форме
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
	 НавигационнаяСсылка = Неопределено,
	 СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// +CRM
	CRM_УправлениеСвойствами.ПослеОтрисовкиДополнительныхРеквизитов(ЭтотОбъект);
	// -CRM
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимостьРеквизитовКИ()
	
	// Выключить команды
	Если НЕ (Элементы.Найти("КомандаКонтактнаяИнформацияПоле1ОтправитьEmail") = Неопределено) Тогда
		Элементы.КомандаКонтактнаяИнформацияПоле1ОтправитьEmail.Видимость	= Ложь;
	КонецЕсли;	
	Если НЕ (Элементы.Найти("КомандаКонтактнаяИнформацияПоле0ОтправитьСМСНаНомер") = Неопределено) Тогда
		Элементы.КомандаКонтактнаяИнформацияПоле0ОтправитьСМСНаНомер.Видимость	= Ложь;
	КонецЕсли;	
	Если НЕ (Элементы.Найти("КомандаКонтактнаяИнформацияПоле0ПозвонитьНаНомер") = Неопределено) Тогда
		Элементы.КомандаКонтактнаяИнформацияПоле0ПозвонитьНаНомер.Видимость	= Ложь;
	КонецЕсли;	
	СтруктураОтбора	= Новый Структура("Родитель, Выводить",
		 Справочники.ВидыКонтактнойИнформации.СправочникCRM_ПотенциальныеКлиенты,
		 Ложь);
	Для Каждого СтрокаДопРеквизита Из ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"] Цикл
		
		Выводить = Ложь; 
		
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			флаг_1 = ЗначениеЗаполнено(ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита]) 
			И НЕ (ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита] = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление());
		Иначе	
			флаг_1 = ЗначениеЗаполнено(ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита]);
		КонецЕсли;
		
		Если СтрокаДопРеквизита.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникCRM_ПотенциальныеКлиенты Тогда
			Выводить = Истина;
		КонецЕсли;
		
		Для Каждого СтрокаДобавленногоРеквизита Из ЭтотОбъект.ПараметрыКонтактнойИнформации["ГруппаКонтактнаяИнформация"].ДобавленныеЭлементы Цикл
			Если СтрокаДобавленногоРеквизита.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(СтрокаДобавленногоРеквизита.Значение, СтрокаДопРеквизита.ИмяРеквизита) Тогда
				СкрыватьПолеКИ = (СтрокаДопРеквизита.Комментарий = "Не выводить");
				Элементы[СтрокаДобавленногоРеквизита.Значение].Видимость = (Выводить
					 И (СтрокаДопРеквизита.Выводить И НЕ СкрыватьПолеКИ))
					 ИЛИ флаг_1;
			КонецЕсли;
		КонецЦикла;
		
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветТекстаЗаголовка	= Новый Цвет();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка		= Новый Шрифт();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].Подсказка				= "";
			
			Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].Вид = ВидПоляФормы.ПолеВвода Тогда
				Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОчистки			= Неопределено;
				Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора			= Неопределено;
				Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОткрытия		= Неопределено;
				Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаСпискаВыбора	= Неопределено;
				Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Истина;
				Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].Высота = 5;
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].МногострочныйРежим = Истина;
				КонецЕсли;
				Если (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес)
					ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон)
					ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Факс) Тогда
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора				= Истина;
					Если СтрокаДопРеквизита.Вид.ВидРедактирования = "Диалог" Тогда
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Ложь;
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветФона				= WebЦвета.Кремовый;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКорректностьДатыОкончания()
	Если ЗначениеЗаполнено(БыстрыйВвод_ВзаимодействиеВид.ДлительностьВстречиПоУмолчанию) Тогда
		ПлановаяДатаЗавершенияТМП = БыстрыйВвод_ДатаНачала 
			+ БыстрыйВвод_ВзаимодействиеВид.ДлительностьВстречиПоУмолчанию * 60;
		Если БыстрыйВвод_ДатаОкончания < ПлановаяДатаЗавершенияТМП Тогда
			БыстрыйВвод_ДатаОкончания = ПлановаяДатаЗавершенияТМП;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры	

// СтандартныеПодсистемы.КонтактнаяИнформация

// Подключаемый обработчик выбора.
//
// Параметры:
//  Элемент - ПолеФормы
//  ВыбранноеЗначение - Строка
//  СтандартнаяОбработка - Булево
//
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение,
		 Элемент.Имя,
		 СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора,
	 ПараметрыПолученияДанных, Ожидание,
	 СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора,
		 ПараметрыПолученияДанных, Ожидание,
		 СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
		// Если это адрес электронной почты, то надо проверить на коррректность заполнения.
		РезультатПроверки = МодульУправлениеКонтактнойИнформациейКлиент.CRM_ПолучитьТипПроверитьЗаполнение(ЭтотОбъект, Элемент);
		Если НЕ РезультатПроверки = Неопределено И РезультатПроверки.КодОшибки <> 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
		КонецЕсли;
		
		// +CRM
		ДополнительныеПараметры = Новый Структура("Элемент", Элемент);
		ОповещениеВыполнитьПоискДублейПоЗначению = Новый ОписаниеОповещения("ВыполнитьПоискДублейПоЗначениюКИ",
			 ЭтотОбъект,
			 ДополнительныеПараметры);
		МодульУправлениеКонтактнойИнформациейКлиент.ВыполнитьПоискДублейПоЗначению(ЭтотОбъект, Элемент,
			 ОповещениеВыполнитьПоискДублейПоЗначению);
		// -CRM
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя, Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
// BSLLS:ServerSideExportFormMethod-off
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт // АПК:78 - исключить из проверки.
// BSLLS:ServerSideExportFormMethod-on
	CRM_УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
	Подключаемый_ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНажатиеАдресаСайтаКомпании(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Команда", "");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании", "");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление() Тогда
		Подключаемый_РедактироватьАдресСайтаКомпании(Элемент);
	Иначе
		Если СтрНайти(АдресСайтаКомпании, "://") = 0 Тогда
			АдресСайтаКомпании = "http://" + АдресСайтаКомпании;
		КонецЕсли;	
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", CRM_ОбщегоНазначенияКлиент);	
		НачатьЗапускПриложения(ОписаниеОповещения, АдресСайтаКомпании);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресСайтаКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда", "");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании", "");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление() Тогда
		АдресСайтаКомпании = "";
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_РедактироватьАдресСайтаКомпанииЗавершение",
		 ЭтотОбъект,
		 ИмяРеквизита);
	ПоказатьВводСтроки(ОписаниеОповещения, АдресСайтаКомпании,
		 НСтр("ru='Введите адрес сайта';en='Enter website address'"));
	
КонецПроцедуры // Подключаемый_РедактироватьАдресСайтаКомпании

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресСайтаКомпанииЗавершение(АдресСайтаКомпании, ИмяРеквизита) Экспорт
	
	Если АдресСайтаКомпании <> Неопределено Тогда 		
		Если ПустаяСтрока(АдресСайтаКомпании) Тогда
			ЭтотОбъект[ИмяРеквизита] = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление();
		Иначе	
			ЭтотОбъект[ИмяРеквизита] = АдресСайтаКомпании;
		КонецЕсли;
			
		// +CRM
		ТекущийЭлементКонтактнойИнформации = Элементы[ИмяРеквизита];
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, ТекущийЭлементКонтактнойИнформации);
		Модифицированность = Истина;
		// -CRM
		
	КонецЕсли;	
	
КонецПроцедуры // Подключаемый_РедактироватьАдресСайтаКомпании

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#Область ПоискДублейПоЗначению

&НаКлиенте
Процедура ВыполнитьПоискДублейПоЗначениюКИ(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("ДанныеФормыЭлементКоллекции") Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПоискДублейПоЗначению(Результат.Представление, ДополнительныеПараметры.Элемент, Результат.Тип);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискДублейПоЗначению(ЗначениеПоиска, Поле, ТипКИ = Неопределено)

	ВыполнитьПоискДублейПоЗначениюНаСервере(ЗначениеПоиска, Поле.Имя, ТипКИ);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискДублейПоЗначениюНаСервере(ЗначениеПоиска, ИмяПоля, ТипКИ)
	
	CRM_ПоискКонтактовВызовСервера.ПодготовитьПоискДублейПоЗначению(ЭтотОбъект, ЗначениеПоиска, ИмяПоля, ТипКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаРезультатовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	CRM_ПоискКонтактовКлиент.ОбработатьВыборТаблицыРезультатов(ЭтотОбъект, Элемент, ВыбраннаяСтрока,
		 Поле,
		 СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура НастроитьСвязиПараметровВыбора()
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда				
		
		Если Элементы.КонтактноеЛицо.СвязиПараметровВыбора.Количество() = 0 Тогда
			Объект.КонтактноеЛицо = Неопределено;
		КонецЕсли;
		
		СвязьПоВладельцуМетаданные = Объект.Ссылка.Метаданные().Реквизиты.КонтактноеЛицо.СвязиПараметровВыбора[0];
		СвязьПоВладельцу = Новый СвязьПараметраВыбора(СвязьПоВладельцуМетаданные.Имя,
														"Объект." + СвязьПоВладельцуМетаданные.ПутьКДанным,
														СвязьПоВладельцуМетаданные.ИзменениеЗначения);
		МассивСвязейПараметровВыбора = Новый Массив();
		МассивСвязейПараметровВыбора.Добавить(СвязьПоВладельцу);

		Элементы.КонтактноеЛицо.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязейПараметровВыбора);
	Иначе
		Элементы.КонтактноеЛицо.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;

КонецПроцедуры

#Область НастройкаРасположенияЭлементов

&НаКлиенте
Процедура Подключаемый_НастройкаРасположенияЭлементовФормы(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_НастройкаРасположенияЭлементовФормыЗавершение",
		 ЭтотОбъект);
	CRM_УправлениеЭлементамиНаФормахКлиент.НастройкаРасположенияЭлементовФормы(ЭтотОбъект, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастройкаРасположенияЭлементовФормыЗавершение(Результат, ДопПараметры) Экспорт
	Подключаемый_НастройкаРасположенияЭлементовФормыЗавершениеСервер(Результат, ДопПараметры);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_НастройкаРасположенияЭлементовФормыЗавершениеСервер(Результат, ДопПараметры)
	CRM_УправлениеЭлементамиНаФормах.РазместитьЭлементыПоНастройке(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ЛентаСобытий

&НаКлиенте
Процедура Подключаемый_ОбновитьЛенту()
	
	Лента_НеЗаполнять = Не ЗначениеЗаполнено(Объект.Ссылка) Или НеЗаполнятьЛенту;
	CRM_ЛентаСобытийКлиентСервер.ОбновитьЛенту(Объект.Ссылка, ЭтотОбъект, "ЛентаПотенциальногоКлиента",
		 Лента_Прокрутить,
		 Лента_НеЗаполнять);
	
	Если ЭтоАдресВременногоХранилища(АдресПараметровОповещения) Тогда
		
		ПараметрыОповещения = ПолучитьИзВременногоХранилища(АдресПараметровОповещения);
		УдалитьИзВременногоХранилища(АдресПараметровОповещения);
		АдресПараметровОповещения = "";
		
		Оповещение = Новый ОписаниеОповещения(ПараметрыОповещения.ИмяПроцедуры, ЭтотОбъект, ПараметрыОповещения.Параметры);
		ВыполнитьОбработкуОповещения(Оповещение, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВсеТелефоныФормы(ДополнительныеДанныеНомеровСоответствие)
	
	Возврат CRM_КлиентыСервер.ВсеТелефоныФормы(ЭтотОбъект, ДополнительныеДанныеНомеровСоответствие);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыЛенты(Элемент, НавигационнаяСсылка, // АПК:78 - исключить из проверки.
	 СтандартнаяОбработка) Экспорт
	ДополнительныеПараметры = Новый Структура;
	СписокКоманд = Новый СписокЗначений;
	ИмяКоманды = СтрЗаменить(Элемент.Имя, "ОбычныйВвод_", "");
	СписокКоманд.Добавить(ИмяКоманды, Элемент.Заголовок); 
	ОбычныйВвод_ПоказатьЕщеЗавершение(СписокКоманд[0], ДополнительныеПараметры);
КонецПроцедуры

#КонецОбласти

#Область ОбластьВвода

&НаСервереБезКонтекста
Функция ПолучитьЦветАктивнойНадписи()
	Возврат ЦветаСтиля.CRM_ОсновнойГолубой; 
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦветНеАктивнойНадписи()
	Возврат ЦветаСтиля.ЦветТекстаКнопки; 
КонецФункции

&НаКлиенте
Процедура ПереключитьСтраницуБыстрогоВвода(Знач НовыйТипОбъекта, Знач ПолныйСброс = Ложь)
	
	Если БыстрыйВвод_ТекущийТипОбъекта = НовыйТипОбъекта И Не ПолныйСброс Тогда
		Возврат;
	КонецЕсли;
	
	Если CRM_ОбщегоНазначенияКлиент.ЭтоМобильныйКлиент() Тогда     
		ИмяТекущиейКнопки = "БыстрыйВвод_" + БыстрыйВвод_ТекущийТипОбъекта;  
		Элементы[ИмяТекущиейКнопки].ЦветТекста = ПолучитьЦветНеАктивнойНадписи();
		
		ИмяКнопки = "БыстрыйВвод_" + НовыйТипОбъекта;
		Элементы[ИмяКнопки].ЦветТекста = ПолучитьЦветАктивнойНадписи();
	Иначе	
		ИмяТекущиейКнопки = "БыстрыйВвод_" + БыстрыйВвод_ТекущийТипОбъекта;
		ТекущийШрифтКнопки = Элементы[ИмяТекущиейКнопки].Шрифт;
		Элементы[ИмяТекущиейКнопки].Шрифт = Новый Шрифт(ТекущийШрифтКнопки, , , Ложь);
		
		ИмяКнопки = "БыстрыйВвод_" + НовыйТипОбъекта;
		ШрифтКнопки = Элементы[ИмяКнопки].Шрифт;
		Элементы[ИмяКнопки].Шрифт = Новый Шрифт(ШрифтКнопки, , , Истина);  
	КонецЕсли;
	
	ИмяТекущейСтраницы = "БыстрыйВвод_Страница" + БыстрыйВвод_ТекущийТипОбъекта;
	Элементы[ИмяТекущейСтраницы].Видимость = Ложь;
	
	ИмяСтраницы = "БыстрыйВвод_Страница" + НовыйТипОбъекта;
	Элементы[ИмяСтраницы].Видимость = Истина;
	
	БыстрыйВвод_ТекущийТипОбъекта = НовыйТипОбъекта;
	
	НастроитьОбластьВводаПоСтранице(ПолныйСброс);
	Если БыстрыйВвод_ТекущийТипОбъекта = "Примечание" Тогда
		Элементы.БыстрыйВвод_ПримечаниеТема.ОбновитьТекстРедактирования();
	КонецЕсли;
	Если БыстрыйВвод_ТекущийТипОбъекта = "Файл" Тогда
		Элементы.БыстрыйВвод_ФайлОписание.ОбновитьТекстРедактирования();
	КонецЕсли;
	
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	
	Если ПолныйСброс Тогда
		Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
	Иначе	
		ИмяКнопкиСоздать = "БыстрыйВвод_Создать" + НовыйТипОбъекта;
		Элементы[ИмяКнопкиСоздать].КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Если БыстрыйВвод_ТекущийТипОбъекта = "Письмо" Тогда
		ПараметрыОтбора = Новый Структура("Тип", 
		ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
		АдресаЭП = Объект.КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
		Если АдресаЭП.Количество() > 0 Тогда
			ДанныеПолучателя = Новый Структура("Адрес, Контакт, Представление");
			ДанныеПолучателя.Адрес = АдресаЭП[0].АдресЭП;
			ДанныеПолучателя.Контакт = Объект.Ссылка;
			ДанныеПолучателя.Представление = Объект.Наименование;
			ЗаполнитьЗначенияСвойств(БыстрыйВвод_ПисьмоПолучатели.Добавить(), ДанныеПолучателя);
			
			ДанныеКонтактов = Новый Структура("Кому, Копии, Скрытые", БыстрыйВвод_ПисьмоПолучатели, 
			Новый Структура(), Новый Структура());
			ПредставленияКонтактов = CRM_ЛентаСобытий.ПредставленияКонтактовПисьма(ДанныеКонтактов);
			БыстрыйВвод_ПисьмоСписокПолучателейПисьма		= ПредставленияКонтактов.Кому;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОбластьВвода()
	
	Если ТолькоПросмотр Тогда
		Элементы.БыстрыйВвод_Страницы.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	НастроитьОбластьВводаПоСтранице();
	
	// Настройки элементов.
	Элементы.БыстрыйВвод_ЗадачаПолучатель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	Элементы.БыстрыйВвод_ВзаимодействиеПолучатель.ОграничениеТипа =
		Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛицаПартнеров");
	
	ПараметрыВыбораВида = Новый Массив;
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.Направление",
		 Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее));
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.ВидДела",
		 Справочники.CRM_ВидыДелВзаимодействий.ПрочиеДокументы));
	Элементы.БыстрыйВвод_ВзаимодействиеВид.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораВида);
	
	Элементы.БыстрыйВвод_ЗадачаДатаОкончания_Время.Видимость = Лента_ЗначенияНастроек.ВремяВСрокахЗадач;
	Элементы.БыстрыйВвод_Письмо.Видимость	= Лента_ЗначенияНастроек.ДоступнаПочта;
	
	БыстрыйВвод_ПисьмоОтправлятьСразу = Ложь;
	НастройкиРаботыСПочтой = Взаимодействия.НастройкиРаботыСПочтой();
	Если НастройкиРаботыСПочтой.Свойство("ОтправлятьСообщенияСразу")
		 И НастройкиРаботыСПочтой.ОтправлятьСообщенияСразу Тогда
		БыстрыйВвод_ПисьмоОтправлятьСразу = Истина;
	КонецЕсли;
	
	// Шаблоны рассылок
	СписокШаблонов.Очистить();
	ЗапросШаблонов = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШаблоныРассылки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_ШаблоныРассылки КАК ШаблоныРассылки
	|ГДЕ
	|	НЕ ШаблоныРассылки.ЭтоГруппа
	|	И НЕ ШаблоныРассылки.ШаблонОповещения");
	РезультатЗапроса = ЗапросШаблонов.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		СписокШаблонов.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	
	// Обычный ввод
	ОбычныйВвод_Команды.Очистить();
	ОписанияКоманд = CRM_ЛентаСобытий.КомандыОбычногоВводаЛенты("ЛентаПотенциальногоКлиента", Лента_ЗначенияНастроек);
	Если ОписанияКоманд.Количество() = 0 Тогда
		Элементы.ОбычныйВвод_ПоказатьЕще.Видимость = Ложь;
	Иначе
		Для Каждого ОписаниеКоманды Из ОписанияКоманд Цикл
			НоваяКоманда = ОбычныйВвод_Команды.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяКоманда, ОписаниеКоманды);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОбластьВводаПоСтранице(Знач ПолныйСброс = Ложь)
	
	// Общее
	ТекущаяДата = ТекущаяДатаСеанса();
	БыстрыйВвод_ДатаНачала = ТекущаяДата;
	Если ПолныйСброс Тогда
		// При создании или отмене создания объекта.
		БыстрыйВвод_Тема = "";
		БыстрыйВвод_Содержание = "";
		Если БыстрыйВвод_Вложения.Количество() > 0 Тогда
			БыстрыйВвод_Вложения.Очистить();
			CRM_ЛентаСобытий.ОбновитьЭлементыВложений(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Если БыстрыйВвод_ТекущийТипОбъекта = "Примечание" Тогда
		
		ТемаЗаполнена = ЗначениеЗаполнено(БыстрыйВвод_Тема);
		ВысотаТемы = ?(ТемаЗаполнена, 3, 1);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			 "БыстрыйВвод_ПримечаниеТема", "Высота",
			 ВысотаТемы);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			 "БыстрыйВвод_КомандыПримечание", "Видимость",
			 ТемаЗаполнена);
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Взаимодействие" Тогда
		
		БыстрыйВвод_Тема = СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " ");
		
		ДанныеВидаВзаимодействия = CRM_ЛентаСобытий.ДанныеВидаВзаимодействияПоУмолчанию("ЛентаКлиента");
		БыстрыйВвод_ВзаимодействиеВид = ДанныеВидаВзаимодействия.Ссылка;
		Если БыстрыйВвод_Тема = "" Тогда
			БыстрыйВвод_Тема = ДанныеВидаВзаимодействия.Тема;
		КонецЕсли;
		Если БыстрыйВвод_Содержание = "" Тогда
			БыстрыйВвод_Содержание = ДанныеВидаВзаимодействия.Описание;
		КонецЕсли;
		
		БыстрыйВвод_ВзаимодействиеНаВесьДень = Ложь;
		Элементы.БыстрыйВвод_ВзаимодействиеДатаНачала_Время.Видимость = Истина;
		Элементы.БыстрыйВвод_ВзаимодействиеДатаОкончания_Время.Видимость = Истина;
		БыстрыйВвод_ДатаНачала = CRM_ОбщегоНазначенияКлиентСервер.ОкруглитьДатуДоМинут(БыстрыйВвод_ДатаНачала, 30);
		
		КоличествоСекундВМинуте		= 60;
		СтандартноеКоличествоМинут	= 30;
		
		Если ЗначениеЗаполнено(БыстрыйВвод_ВзаимодействиеВид)
				И ЗначениеЗаполнено(БыстрыйВвод_ВзаимодействиеВид.ДлительностьВстречиПоУмолчанию) Тогда
			БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала
				+ БыстрыйВвод_ВзаимодействиеВид.ДлительностьВстречиПоУмолчанию * КоличествоСекундВМинуте;
		Иначе
			БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + СтандартноеКоличествоМинут * КоличествоСекундВМинуте;
		КонецЕсли;
		
		БыстрыйВвод_ВзаимодействиеОтправитель = ТекущийПользователь;
		Элементы.БыстрыйВвод_ВзаимодействиеПолучатель.Видимость = Ложь;
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Задача" Тогда
		
		БыстрыйВвод_Тема = СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " ");
		
		БыстрыйВвод_ЗадачаВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДень;
		БыстрыйВвод_ДатаОкончания = CRM_ОбщегоНазначенияКлиентСервер.ОкруглитьДатуДоМинут(ТекущаяДата, 30) + 86400;
		БыстрыйВвод_ЗадачаПолучатель = ТекущийПользователь;
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Письмо" Тогда
		
		БыстрыйВвод_Тема = СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " ");
		
		БыстрыйВвод_ПисьмоПолучатели.Очистить();
		БыстрыйВвод_ПисьмоПолучателиКопий.Очистить();
		БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Очистить();
		БыстрыйВвод_ПисьмоСписокПолучателейПисьма = "";
		БыстрыйВвод_ПисьмоСписокПолучателейКопий = "";
		БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий = "";
		
		УчетныеЗаписиПочтыСписокВыбора = Элементы.БыстрыйВвод_ПисьмоОтправительПредставление.СписокВыбора;
		УчетныеЗаписиПочтыСписокВыбора.Очистить();
		CRM_УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(УчетныеЗаписиПочтыСписокВыбора, ,
			 ТекущийПользователь);
		Если УчетныеЗаписиПочтыСписокВыбора.Количество() > 0 Тогда
			УчетнаяЗаписьПоУмолчанию = CRM_ЛентаСобытий.УчетнаяЗаписьПоУмолчанию(ТекущийПользователь);
			ЭлементСписка = УчетныеЗаписиПочтыСписокВыбора.НайтиПоЗначению(УчетнаяЗаписьПоУмолчанию);
			Если ЭлементСписка = Неопределено Тогда
				ЭлементСписка = УчетныеЗаписиПочтыСписокВыбора[0];
			КонецЕсли;
			БыстрыйВвод_ПисьмоУчетнаяЗапись = ЭлементСписка.Значение;
			БыстрыйВвод_ПисьмоОтправительПредставление = ЭлементСписка.Представление;
		КонецЕсли;
		
		ВладельцыКонтактнойИнформации = Новый Массив;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВладельцыКонтактнойИнформации.Добавить(Объект.Ссылка);
		КонецЕсли;
		
		ДанныеКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
			ВладельцыКонтактнойИнформации, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		БыстрыйВвод_ПисьмоИсторияАдресов.Очистить();
		Для Каждого Строка Из ДанныеКонтактнойИнформации Цикл
			ПредставлениеАдресаКонтакта = CRM_ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(Строка.Объект,
				 Строка.Представление,
				 "");
			БыстрыйВвод_ПисьмоИсторияАдресов.Добавить(ПредставлениеАдресаКонтакта);
		КонецЦикла;
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Файл" Тогда
		
		ЕстьВложения = (БыстрыйВвод_Вложения.Количество() > 0);
		ВысотаТемы = ?(ЗначениеЗаполнено(БыстрыйВвод_Тема), 3, 1);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_ФайлОписание",
			 "Высота",
			 ВысотаТемы);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_КомандыФайл",
			 "Видимость",
			 ЕстьВложения);
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Чат" Тогда
		
		Если БыстрыйВвод_ЧатПолучатели.Количество() > 0 Тогда
			ПервыйПолучатель = БыстрыйВвод_ЧатПолучатели[0];
			БыстрыйВвод_ЧатИдентификаторПолучателя = ПервыйПолучатель.Идентификатор;
			БыстрыйВвод_ЧатАдрес = ПервыйПолучатель.Адрес;
			БыстрыйВвод_ЧатПолучатель = ПервыйПолучатель.Контакт;
			БыстрыйВвод_ЧатПредставлениеПолучателя = ПервыйПолучатель.Представление;
			БыстрыйВвод_ЧатУчетнаяЗапись = ПервыйПолучатель.УчетнаяЗапись;
			БыстрыйВвод_ЧатПредставлениеУчетнойЗаписи = ПервыйПолучатель.УчетнаяЗапись;
			БыстрыйВвод_ЧатГруппа = ПервыйПолучатель.Группа;
			БыстрыйВвод_ЧатЭтоНомерТелефона = ПервыйПолучатель.ЭтоНомерТелефона;
			БыстрыйВвод_ЧатВидКИ = ПервыйПолучатель.ВидКИ;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьШаблоны(Команда)
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ПоказатьШаблоныЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОповещениеЗавершения, СписокШаблонов, Элементы.БыстрыйВвод_ПоказатьШаблоны);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьШаблоныЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Шаблон = ВыбранныйЭлемент.Значение;
	CRM_ЛентаСобытийКлиент.ПоказатьПолнуюФормуОбъекта("ЛентаИнтереса", БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект);
	Шаблон = ПредопределенноеЗначение("Справочник.CRM_ШаблоныРассылки.ПустаяСсылка");
	ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
	
КонецПроцедуры

&НаСервере
Процедура БыстрыйВвод_ОбновитьЭлементыВложений()
	
	CRM_ЛентаСобытий.ОбновитьЭлементыВложений(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ПрозвонМессенджеровЗавершение(Результат, Параметры) Экспорт

	// Отключить картинку Длительной операции:
	Если НЕ Параметры.Свойство("ПрозвонВсехНомеров") Тогда
		Элементы["ДекорацияПрозвон" + Параметры.ИмяРеквизита].Вид = ВидДекорацииФормы.Надпись;
		Элементы["ДекорацияПрозвон" + Параметры.ИмяРеквизита].Ширина = 0;
	КонецЕсли;
	
	ОшибкаПриПрозвоне = Результат = Неопределено Или ТипЗнч(Результат) <> Тип("Структура")
	                    Или (Результат.Свойство("Статус") И Результат.Статус = "Ошибка");
	
	Если ОшибкаПриПрозвоне Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		
		РезультатПрозвона = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		CRM_УправлениеКонтактнойИнформациейКлиент.CRM_ПрозвонМессенджеровЗавершение(РезультатПрозвона.ВидыКИ, Параметры);
		
		УстановитьВидимостьРеквизитовКИ();
		
		Для Каждого СтрСообщения Из РезультатПрозвона.Сообщения Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрСообщения);
		КонецЦикла;
		
		Если РезультатПрозвона.ВидыКИ.Количество() = 0 Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Поиск в мессенджерах'"),
				 ПолучитьНавигационнуюСсылку(Объект.Ссылка),
				 НСтр("ru = 'Не найдено'"));
		КонецЕсли;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаписатьВЧатЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НомерТелефона = Результат;
	
	АдресПараметровОповещения = ПоместитьВоВременноеХранилище(
									Новый Структура("ИмяПроцедуры, Параметры", 
											"Подключаемый_ПереключитьНаЧат", 
											Новый Структура("НомерТелефона", НомерТелефона)), УникальныйИдентификатор);
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
							
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереключитьНаЧат(Результат, ДополнительныеПараметры) Экспорт // АПК:78 - исключить из проверки.
							
	НомерТелефона = ДополнительныеПараметры.НомерТелефона;
	
	Если НЕ БыстрыйВвод_ТекущийТипОбъекта = "Чат" Тогда
		ПереключитьСтраницуБыстрогоВвода("Чат");
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Адрес", НомерТелефона);
	НайденныеСтроки = БыстрыйВвод_ЧатПолучатели.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныйПолучатель = НайденныеСтроки[0];
		БыстрыйВвод_ЧатИдентификаторПолучателя	= НайденныйПолучатель.Идентификатор;
		БыстрыйВвод_ЧатАдрес					= НайденныйПолучатель.Адрес;
		БыстрыйВвод_ЧатПолучатель					= НайденныйПолучатель.Контакт;
		БыстрыйВвод_ЧатПредставлениеПолучателя	= НайденныйПолучатель.Представление;
		БыстрыйВвод_ЧатУчетнаяЗапись			= НайденныйПолучатель.УчетнаяЗапись;
		БыстрыйВвод_ЧатПредставлениеУчетнойЗаписи = НайденныйПолучатель.УчетнаяЗапись;
		БыстрыйВвод_ЧатГруппа					= НайденныйПолучатель.Группа;
		БыстрыйВвод_ЧатЭтоНомерТелефона			= НайденныйПолучатель.ЭтоНомерТелефона;
		БыстрыйВвод_ЧатВидКИ					= НайденныйПолучатель.ВидКИ;
	КонецЕсли;
	
	УчетныеЗаписиМессенджеров = CRM_КлиентыСервер.УчетныеЗаписиМессенджеров(БыстрыйВвод_ЧатВидКИ, Объект.Ссылка);
	CRM_ЛентаСобытийКлиентСервер.НастроитьОбластьВводаУчетныеЗаписиМессенджеров(УчетныеЗаписиМессенджеров, ЭтотОбъект);
	
	ТекущийЭлемент = Элементы.БыстрыйВвод_ЧатСодержание;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЧислоВложений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(CRM_ПотенциальныеКлиентыПрисоединенныеФайлы.Ссылка) КАК КоличествоФайлов
	               |ИЗ
	               |	Справочник.CRM_ПотенциальныеКлиентыПрисоединенныеФайлы КАК CRM_ПотенциальныеКлиентыПрисоединенныеФайлы
	               |ГДЕ
	               |	CRM_ПотенциальныеКлиентыПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	               |	И НЕ CRM_ПотенциальныеКлиентыПрисоединенныеФайлы.ПометкаУдаления
	               |	И НЕ CRM_ПотенциальныеКлиентыПрисоединенныеФайлы.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КоличествоФайлов;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	
	Если Объект.Ссылка.Пустая() Тогда
		ВложенияПредставление = НСтр("ru='Файлы'");
		Возврат;
	КонецЕсли;
	
	ЧислоВложений = ПолучитьЧислоВложений();
	Если ЧислоВложений = 0 Тогда
		ВложенияПредставление = НСтр("ru='Файлы'");
	Иначе
		ВложенияПредставление = НСтр("ru='Файлы ('") + ЧислоВложений + ")"; 
	КонецЕсли;
			
КонецПроцедуры // СформироватьПредставлениеВложений()

&НаКлиенте
Процедура ОткрытьФайлыЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.CRM_ПрисоединенныеФайлы",
					  ПараметрыФормы, ЭтотОбъект, Ложь, Неопределено);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФайлыЗавершение()

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанные(ОписаниеОповещенияОЗавершении)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВопросЗаписатьДанныеЗавершение",
			 ЭтотОбъект,
			 ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Данные еще не записаны."
"Действие возможно только после записи данных. Записать?'"), РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанныеЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Процедура создания клиента, используя потенциального клиента и текущий интерес.
//
&НаКлиенте
Процедура СоздатьКлиентаНаОсновеПотенциальногоКлиента()
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерПредыдущий = Объект.Партнер;
	
	// ШаблоныЭлементовФорм
	Элементы.ГруппаПартнер.Видимость = Ложь;
	Элементы.ГруппаКонтактноеЛицо.Видимость = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СозданиеКлиентаЗавершение", ЭтотОбъект);
	ШаблоныЭлементов_СоздатьЭлементы("Обработка.CRM_СлужебнаяШаблоныЭлементовФорм.Форма.ШаблонСозданиеКлиентаИКонтакта",
		Новый Структура("Ответственный, ПотенциальныйКлиент", Объект.ОсновнойМенеджер, Объект.Ссылка),
			ОписаниеОповещения, "ГруппаКонтейнерФормРегистрации");
	
КонецПроцедуры // СоздатьКлиентаНаОсновеПотенциальногоКлиента()

#Область СвязиМеждуПК

&НаСервере
Процедура ВывестиПотенциальныхКлиентов()
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	РеквизитТаблицаПК = Новый РеквизитФормы("ТаблицаСвязейМеждуПК", Новый ОписаниеТипов("ТаблицаЗначений"));
	МассивДобавляемыхРеквизитов.Добавить(РеквизитТаблицаПК);
	
	ОписаниеТипаПК = Новый ОписаниеТипов("СправочникСсылка.CRM_ПотенциальныеКлиенты");
	ПолеПК = Новый РеквизитФормы("ПотенциальныйКлиент", ОписаниеТипаПК, "ТаблицаСвязейМеждуПК");
	МассивДобавляемыхРеквизитов.Добавить(ПолеПК);
	
	ОписаниеТипаПользователь = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	ПолеАвтор = Новый РеквизитФормы("Автор", ОписаниеТипаПользователь, "ТаблицаСвязейМеждуПК");
	МассивДобавляемыхРеквизитов.Добавить(ПолеАвтор);
	
	ОписаниеТипаСтрока0 = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ПолеКомментарий = Новый РеквизитФормы("Комментарий", ОписаниеТипаСтрока0, "ТаблицаСвязейМеждуПК");
	МассивДобавляемыхРеквизитов.Добавить(ПолеКомментарий);
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	ГруппаКонтейнер = Элементы.ПотенциальныеКлиенты;
	
	ЭлементТаблицаПК = Элементы.Добавить("СвязиМеждуПК", Тип("ТаблицаФормы"), ГруппаКонтейнер);
	ЭлементТаблицаПК.ПутьКДанным = "ТаблицаСвязейМеждуПК";
	ЭлементТаблицаПК.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементТаблицаПК.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Нет;
	ЭлементТаблицаПК.ПоложениеСостоянияПросмотра = ПоложениеСостоянияПросмотра.Нет;
	ЭлементТаблицаПК.ПоложениеУправленияПоиском = ПоложениеУправленияПоиском.Нет;
	ЭлементТаблицаПК.ВариантУправленияВысотой = ВариантУправленияВысотойТаблицы.ВСтрокахТаблицы;
	ЭлементТаблицаПК.МножественныйВыбор = Ложь;
	ЭлементТаблицаПК.ВысотаВСтрокахТаблицы = 5;
	ЭлементТаблицаПК.АвтоВводНовойСтроки = Ложь;
	ЭлементТаблицаПК.ИзменятьПорядокСтрок = Ложь;
	ЭлементТаблицаПК.УстановитьДействие("ПриИзменении", "Подключаемый_СвязиМеждуПКПриИзменении");
	ЭлементТаблицаПК.УстановитьДействие("Выбор", "Подключаемый_СвязиМеждуПКВыбор");
	ЭлементТаблицаПК.УстановитьДействие("ПередНачаломДобавления", "Подключаемый_СвязиМеждуПКПередНачаломДобавления");
	ЭлементТаблицаПК.УстановитьДействие("ПередУдалением", "Подключаемый_СвязиМеждуПКПередУдалением");
	
	НовоеПоле = Элементы.Добавить("СвязиМеждуПКПотенциальныйКлиент", Тип("ПолеФормы"), ЭлементТаблицаПК);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "ТаблицаСвязейМеждуПК.ПотенциальныйКлиент";
	НовоеПоле.ТолькоПросмотр = Истина;
	НовоеПоле.Заголовок = НСтр("ru = 'Потенциальный клиент'");
	
	НовоеПоле = Элементы.Добавить("СвязиМеждуПККомментарий", Тип("ПолеФормы"), ЭлементТаблицаПК);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "ТаблицаСвязейМеждуПК.Комментарий";
	
	НовоеПоле = Элементы.Добавить("СвязиМеждуПКАвтор", Тип("ПолеФормы"), ЭлементТаблицаПК);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "ТаблицаСвязейМеждуПК.Автор";
	НовоеПоле.ТолькоПросмотр = Истина;
	
	СформироватьТаблицуСвязейМеждуПК();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКомандыПотенциальныхКлиентов()
	
	КомандыПанели = Элементы.СвязиМеждуПК.КоманднаяПанель.ПодчиненныеЭлементы;
	Для Каждого Элемент Из КомандыПанели Цикл
		Если СтрНайти(Элемент.Имя, "СвязиМеждуПКДобавить") > 0 Тогда
			Элемент.ЦветФона = ЦветГолубой;
			Элемент.ЦветРамки = ЦветГолубой;
			Элемент.ЦветТекста = Новый Цвет(255, 255, 255);
			Элемент.Шрифт = Новый Шрифт(Элемент.Шрифт, , , Истина);
			Элемент.Заголовок = НСтр("ru = 'Связать потенциальных клиентов'");
		КонецЕсли;
		Если СтрНайти(Элемент.Имя, "СвязиМеждуПКЗакончитьРедактирование") > 0
			Или СтрНайти(Элемент.Имя, "СвязиМеждуПКСкопировать") > 0
			Или СтрНайти(Элемент.Имя, "СвязиМеждуПКСортировка") > 0
			Или СтрНайти(Элемент.Имя, "СвязиМеждуПКПоискПоТекущемуЗначению") > 0 Тогда
			Элемент.Доступность = Ложь;
			Элемент.Видимость = Ложь;
		КонецЕсли;
		Если СтрНайти(Элемент.Имя, "СвязиМеждуПКУдалить") > 0 Тогда
			Элемент.ЦветТекста = ЦветКрасный;
			Элемент.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			Элемент.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			Элемент.Заголовок = НСтр("ru = 'Исключить'");
		КонецЕсли;
	КонецЦикла;
	
	КомандыМеню = Элементы.СвязиМеждуПК.КонтекстноеМеню.ПодчиненныеЭлементы;
	Для Каждого Элемент Из КомандыМеню Цикл
		Если СтрНайти(Элемент.Имя, "СвязиМеждуПККонтекстноеМенюДобавить") > 0
			Или СтрНайти(Элемент.Имя, "СвязиМеждуПККонтекстноеМенюУдалить") > 0
			Или СтрНайти(Элемент.Имя, "СвязиМеждуПККонтекстноеМенюСкопировать") > 0
			Или СтрНайти(Элемент.Имя, "СвязиМеждуПККонтекстноеМенюПереместить") > 0
			Или СтрНайти(Элемент.Имя, "СвязиМеждуПКПоискПоТекущемуЗначению") > 0 Тогда
			Элемент.Доступность = Ложь;
			Элемент.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвязиМеждуПКПриИзменении(Элемент)
	
	Если Элементы.СвязиМеждуПК.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.СвязиМеждуПК.ТекущиеДанные;
	ПрочиеДанные = Новый Структура("Автор, Комментарий", ТекДанные.Автор, ТекДанные.Комментарий);
	ИзменитьСвязьМеджуПКНаСервере(ТекДанные.ПотенциальныйКлиент, ПрочиеДанные);
	
	Оповестить("ОбновленаСвязьМеждуПК", Новый Структура("ПотенциальныйКлиентА, ПотенциальныйКлиентБ",
		 Объект.Ссылка,
		 ТекДанные.ПотенциальныйКлиент));
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвязиМеждуПКПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения("СвязиМеждуПКПередНачаломДобавленияЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.CRM_ПотенциальныеКлиенты.Форма.ФормаВыбора",
		 Новый Структура("МножественныйВыбор", Истина), ЭтотОбъект, , , , ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СвязиМеждуПКПередНачаломДобавленияЗавершение(МассивПК, ДопПараметр) Экспорт
	
	Если НЕ ЗначениеЗаполнено(МассивПК) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПК Из МассивПК Цикл
	
		Если Объект.Ссылка = ПК Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нельзя выбирать текущий элемент!'"));
			Продолжить;
		КонецЕсли;
		
		Если ЭтотОбъект.ТаблицаСвязейМеждуПК.НайтиСтроки(Новый Структура("ПотенциальныйКлиент", ПК)).Количество() > 0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 уже есть в списке!'"),
				 ПК));
			Продолжить;
		КонецЕсли;
		
		ДобавитьСвязьМеждуПКНаСервере(Объект.Ссылка, ПК);
		
		Оповестить("ОбновленаСвязьМеждуПК", Новый Структура("ПотенциальныйКлиентА, ПотенциальныйКлиентБ", Объект.Ссылка, ПК));
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвязиМеждуПКПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.СвязиМеждуПК.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПК = Элементы.СвязиМеждуПК.ТекущиеДанные.ПотенциальныйКлиент;
	УдалитьСвязьМеждуПКНаСервере(Объект.Ссылка, ПК);
	
	Оповестить("ОбновленаСвязьМеждуПК", Новый Структура("ПотенциальныйКлиентА, ПотенциальныйКлиентБ", Объект.Ссылка, ПК));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвязиМеждуПКВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "СвязиМеждуПКПотенциальныйКлиент" Тогда
		ПоказатьЗначение(, Элементы.СвязиМеждуПК.ТекущиеДанные.ПотенциальныйКлиент);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИзменитьСвязьМеджуПКНаСервере(ПК, ПрочиеДанные)
	
	РегистрыСведений.CRM_СвязанныеПотенциальныеКлиенты.ОбновитьСвязь(Объект.Ссылка, ПК, ПрочиеДанные);
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьСвязьМеждуПКНаСервере(ПК_А, ПК_Б)
	
	РегистрыСведений.CRM_СвязанныеПотенциальныеКлиенты.ДобавитьСвязь(ПК_А, ПК_Б, Новый Структура("Автор, Комментарий"));
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязьМеждуПКНаСервере(ПК_А, ПК_Б)
	
	РегистрыСведений.CRM_СвязанныеПотенциальныеКлиенты.УдалитьСвязь(ПК_А, ПК_Б);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуСвязейМеждуПК()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Связанные = РегистрыСведений.CRM_СвязанныеПотенциальныеКлиенты.СвязанныеПотенциальныеКлиенты(Объект.Ссылка);
	
	ЭтотОбъект.ТаблицаСвязейМеждуПК.Загрузить(Связанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСвязиМеждуПКНаФорме()
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		ЭтотОбъект, "ТаблицаСвязейМеждуПК") Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьТаблицуСвязейМеждуПК();
	Элементы.СвязиМеждуПК.Обновить();
	ОбновитьЗаголовокСвязиМеждуПК();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокСвязиМеждуПК()
	
	ЗаголовокСвязей = НСтр("ru = 'Связанные потенциальные клиенты'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		КоличествоСвязей	= ?(
			ВыведеныПотенциальныеКлиенты,
			ЭтотОбъект.ТаблицаСвязейМеждуПК.Количество(),
			ПолучитьКоличествоСвязанныхПотенциальныхКлиентов(Объект.Ссылка));
		
		Если КоличествоСвязей > 0 Тогда
			ЗаголовокСвязей = ЗаголовокСвязей + " (" + КоличествоСвязей + ")";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.Разделы_ПереключитьПотенциальныеКлиенты.Заголовок <> ЗаголовокСвязей Тогда
		Элементы.Разделы_ПереключитьПотенциальныеКлиенты.Заголовок = ЗаголовокСвязей;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоСвязанныхПотенциальныхКлиентов(ПотенциальныйКлиент)
	
	Связанные =
		РегистрыСведений.CRM_СвязанныеПотенциальныеКлиенты.СвязанныеПотенциальныеКлиенты(ПотенциальныйКлиент);
	
	Возврат Связанные.Количество();
	
КонецФункции // ПолучитьКоличествоСвязанныхПотенциальныхКлиентов()

#КонецОбласти

#Область ПоискДублей

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ЗаписыватьБезПроверки") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		СтруктураПоиска = СоздатьСтруктуруПоиска();
		СписокКонтактов = ЗаполнитьТаблицуКонтактов();
		
		Если (СтруктураПоиска.Свойство("Наименование") И СтруктураПоиска.Наименование = "=") Тогда
			ТочноеСоответствие = Истина;
		Иначе
			ТочноеСоответствие = Ложь;
		КонецЕсли;
		
		Если ЕстьДублиПК(Объект, СтруктураПоиска, СписокКонтактов, ТочноеСоответствие) Тогда
			
			СтруктураОбъекта = Новый Структура;
			Для каждого Контакт Из СписокКонтактов Цикл
				СтруктураОбъекта.Вставить(Контакт.Значение, Контакт.Представление);
			КонецЦикла;
			
			СтруктураОбъекта.Вставить("Наименование",		Объект.Наименование);
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СтруктураПоиска",		СтруктураПоиска);
			ПараметрыФормы.Вставить("СтруктураОбъекта",		СтруктураОбъекта);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект);
			
			Форма = ОткрытьФорму("ОбщаяФорма.CRM_ФормаНайденныхДублейПК", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
			Если Форма <> Неопределено Тогда
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		Если РезультатЗакрытия.Свойство("Результат") Тогда
			
			Если РезультатЗакрытия.Результат = "Продолжить" Тогда
				
				Если РезультатЗакрытия.Свойство("Объект") Тогда
					
					Если ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
						
						НайденныйКлиент	= РезультатЗакрытия.Объект;
						Модифицированность = Ложь;
						Закрыть();
						Возврат;
						
					КонецЕсли;
				КонецЕсли;	
				
			ИначеЕсли РезультатЗакрытия.Результат = "Перейти" Тогда
				
				Если РезультатЗакрытия.Свойство("Объект") Тогда
					
					Модифицированность = Ложь;
					
					ВладелецУправляемаяФорма = ТипЗнч(ЭтотОбъект.ВладелецФормы) = Тип("ТаблицаФормы");
					Если ВладелецУправляемаяФорма Тогда
						Попытка 
							ВладелецФормы.ТекущаяСтрока = РезультатЗакрытия.Объект; 
						Исключение
							ФормаСписка = ПолучитьФорму("Справочник.CRM_ПотенциальныеКлиенты.ФормаСписка");
							ФормаСписка.Открыть();
							ФормаСписка.ТекущийЭлемент.ТекущаяСтрока = РезультатЗакрытия.Объект;
						КонецПопытки;
					ИначеЕсли ТипЗнч(ЭтотОбъект.ВладелецФормы) = Тип("ПолеФормы") Тогда
						ОповеститьОВыборе(РезультатЗакрытия.Объект);
					КонецЕсли;
					
					Если Открыта() Тогда
						Закрыть();
					КонецЕсли;
					
				КонецЕсли;
				
				Возврат;
				
			Иначе
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Записать(Новый Структура("ЗаписыватьБезПроверки", Истина));
	
КонецПроцедуры

&НаСервере
Функция СоздатьСтруктуруПоиска()
	
	СтруктураПоиска = Новый Структура;
	
	ЗначениеХранилища = Константы.CRM_РеквизитыПоискаДублейПартнеров.Получить();
	РеквизитыПоиска = ЗначениеХранилища.Получить();
	
	Если РеквизитыПоиска <> Неопределено Тогда
		
		Если ТипЗнч(РеквизитыПоиска) = Тип("СписокЗначений") Тогда
			
			Для Каждого СтрокаСписка Из РеквизитыПоиска Цикл
				Если СтрокаСписка.Пометка Тогда	
					Значение = СтрокаСписка.Значение;
					ТочкаСЗапятой = СтрНайти(Значение, ";");
		
					СтруктураПоиска.Вставить(Сред(Значение, 1, ТочкаСЗапятой - 1), Сред(Значение, ТочкаСЗапятой + 1));
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураПоиска;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуКонтактов()
	
	СписокКонтактов = Новый СписокЗначений;
	
	ИсточникКИ = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	Для Каждого Стр Из ИсточникКИ Цикл
		
		Представление = Стр.Представление;
		
		Если ПустаяСтрока(Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			СписокКонтактов.Добавить("АдресЭлектроннойПочты", Представление);
		ИначеЕсли Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			СписокКонтактов.Добавить("Адрес", Представление);
		ИначеЕсли Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
			 ИЛИ Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
			СписокКонтактов.Добавить("Телефон", Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокКонтактов;
	
КонецФункции

&НаСервере
Функция ЕстьДублиПК(Знач ПК, Знач СтруктураПоиска, Знач СписокКонтактов, Знач ТочноеСоответствие)
	
	Выборка = НайтиДубли(ПК, СтруктураПоиска, СписокКонтактов, ТочноеСоответствие);
	
	Если Выборка <> Неопределено И Выборка.Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция НайтиДубли(Объект, СтруктураПоиска, СписокКонтактов, ТочноеСоответствие)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос			= Новый Запрос;
	Сч				= 0;
	ПервоеЗначение	= Истина;
	
	Для Каждого КлючИЗначение Из СтруктураПоиска Цикл
		
		ИмяРеквизита = КлючИЗначение.Ключ;
		Если ТочноеСоответствие Тогда
			СтепеньСхожести	= "=";
		Иначе
			СтепеньСхожести	= КлючИЗначение.Значение;
		КонецЕсли;
		ЗначениеРеквизита	= Неопределено;
		Реквизиты			= "";
		Сч					= Сч + 1;
		
		Если СтрНайти(ИмяРеквизита, "Контакт") = 0 Тогда
			
			Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект,
				 ИмяРеквизита) Тогда Продолжить; КонецЕсли;
			
			Если ТипЗнч(Объект) = Тип("Структура") Тогда
				Объект.Свойство(ИмяРеквизита, ЗначениеРеквизита);
			Иначе
				ЗначениеРеквизита = Объект[ИмяРеквизита];
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ПервоеЗначение Тогда
				Реквизиты = "
				| ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;
			Реквизиты =  Реквизиты + "
			|ВЫБРАТЬ  
			|Данные.Ссылка" +  ?(ПервоеЗначение, " КАК Ссылка", "");
			Реквизиты = Реквизиты + "
			|,Данные." + ИмяРеквизита + ?(ПервоеЗначение, " КАК Реквизит", "");
			Реквизиты = Реквизиты + "
			|,""" + ИмяРеквизита + """" + ?(ПервоеЗначение, " КАК ИмяРеквизита", "");
			Условия  = "
			|Данные." + ИмяРеквизита + " " + СтепеньСхожести + " &" + ИмяРеквизита + Строка(Сч);
			Запрос.УстановитьПараметр(ИмяРеквизита + Строка(Сч), ?(СтепеньСхожести = "ПОДОБНО", "%" 
				+ ЗначениеРеквизита + "%",
				 ЗначениеРеквизита));
			Запрос.Текст = Запрос.Текст + Реквизиты + "
			|ИЗ Справочник.CRM_ПотенциальныеКлиенты КАК Данные
			|ГДЕ " + Сред(Условия, 2);
			ПервоеЗначение = Ложь;
		Иначе
			Массив = Новый Массив;
			Для Каждого Стр Из СписокКонтактов Цикл
				ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "Контакт_", "");
				Если Стр.Значение = ИмяРеквизита И ЗначениеЗаполнено(Стр.Представление) Тогда
					Массив.Добавить(Стр.Представление);	
				КонецЕсли;
			КонецЦикла;
			Если Массив.Количество() > 0 Тогда
				Для Каждого Стр Из Массив Цикл
					Если НЕ ПервоеЗначение Тогда
						Реквизиты = "
						| ОБЪЕДИНИТЬ ВСЕ
						|";
					КонецЕсли;
					Реквизиты =  Реквизиты + "
					|ВЫБРАТЬ 
					|Данные.Ссылка" +  ?(ПервоеЗначение, " КАК Ссылка", "");
					Реквизиты = Реквизиты + "
					|,Данные.Представление" + ?(ПервоеЗначение, " КАК Реквизит", "");
					Реквизиты = Реквизиты + "
					|,""" + ИмяРеквизита + """" + ?(ПервоеЗначение, " КАК ИмяРеквизита", "");
					Условия = "
					|Данные.Представление " + СтепеньСхожести + " &" + ИмяРеквизита + Строка(Сч) + "
					|И Данные.Тип = &Тип" + Строка(Сч);
					Запрос.УстановитьПараметр(ИмяРеквизита + Строка(Сч), ?(СтепеньСхожести = "ПОДОБНО", "%" + Стр + "%", Стр));
					Если ИмяРеквизита = "Адрес" Тогда
						Запрос.УстановитьПараметр("Тип" + Строка(Сч), Перечисления.ТипыКонтактнойИнформации.Адрес);
					ИначеЕсли ИмяРеквизита = "Телефон" Тогда 
						Запрос.УстановитьПараметр("Тип" + Строка(Сч), Перечисления.ТипыКонтактнойИнформации.Телефон);
					ИначеЕсли ИмяРеквизита = "АдресЭлектроннойПочты" Тогда 
						Запрос.УстановитьПараметр("Тип" + Строка(Сч), Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
					КонецЕсли;
					Запрос.Текст = Запрос.Текст + Реквизиты + "
					|ИЗ Справочник.CRM_ПотенциальныеКлиенты.КонтактнаяИнформация КАК Данные
					|ГДЕ " + Сред(Условия, 2);
					Сч				= Сч + 1;
					ПервоеЗначение	= Ложь;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;		
		
	КонецЦикла;
	
	Если ПустаяСтрока(Запрос.Текст) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#КонецОбласти

#Область ДублиКлиента

&НаСервере
Процедура ВывестиДубли()
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	РеквизитТаблицаДублей = Новый РеквизитФормы("ДублиКлиента", Новый ОписаниеТипов("ТаблицаЗначений"));
	МассивДобавляемыхРеквизитов.Добавить(РеквизитТаблицаДублей);
	
	ОписаниеТипаПользователь = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	ПолеАвтор = Новый РеквизитФормы("Автор", ОписаниеТипаПользователь, "ДублиКлиента");
	МассивДобавляемыхРеквизитов.Добавить(ПолеАвтор);
	
	ОписаниеТипаДата = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
	ПолеДата = Новый РеквизитФормы("Дата", ОписаниеТипаДата, "ДублиКлиента");
	МассивДобавляемыхРеквизитов.Добавить(ПолеДата);
	
	ПолеЗаменить = Новый РеквизитФормы("Заменить", Новый ОписаниеТипов("Булево"), "ДублиКлиента");
	МассивДобавляемыхРеквизитов.Добавить(ПолеЗаменить);
	
	ОписаниеТипаСтрока0 = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ПолеКомментарий = Новый РеквизитФормы("Комментарий", ОписаниеТипаСтрока0, "ДублиКлиента");
	МассивДобавляемыхРеквизитов.Добавить(ПолеКомментарий);
	
	ОписаниеТипаПК = Новый ОписаниеТипов("СправочникСсылка.CRM_ПотенциальныеКлиенты");
	ПолеКонтакт = Новый РеквизитФормы("Контакт", ОписаниеТипаПК, "ДублиКлиента");
	МассивДобавляемыхРеквизитов.Добавить(ПолеКонтакт);
	
	ПолеЭтоОригинал = Новый РеквизитФормы("ЭтоОригинал", Новый ОписаниеТипов("Булево"), "ДублиКлиента");
	МассивДобавляемыхРеквизитов.Добавить(ПолеЭтоОригинал);
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	ГруппаКонтейнер = Элементы.ГруппаДублиКлиента;
	
	ЭлементТаблицаДублей = Элементы.Добавить("ДублиКлиента", Тип("ТаблицаФормы"), ГруппаКонтейнер);
	ЭлементТаблицаДублей.ПутьКДанным = "ДублиКлиента";
	ЭлементТаблицаДублей.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементТаблицаДублей.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Нет;
	ЭлементТаблицаДублей.ПоложениеСостоянияПросмотра = ПоложениеСостоянияПросмотра.Нет;
	ЭлементТаблицаДублей.ПоложениеУправленияПоиском = ПоложениеУправленияПоиском.Нет;
	ЭлементТаблицаДублей.ВариантУправленияВысотой = ВариантУправленияВысотойТаблицы.ВСтрокахТаблицы;
	ЭлементТаблицаДублей.МножественныйВыбор = Ложь;
	ЭлементТаблицаДублей.ВысотаВСтрокахТаблицы = 5;
	ЭлементТаблицаДублей.АвтоВводНовойСтроки = Ложь;
	ЭлементТаблицаДублей.ИзменятьПорядокСтрок = Ложь;
	ЭлементТаблицаДублей.УстановитьДействие("ПриИзменении", "Подключаемый_ДублиКлиентаПриИзменении");
	ЭлементТаблицаДублей.УстановитьДействие("ПередНачаломДобавления", "Подключаемый_ДублиКлиентаПередНачаломДобавления");
	ЭлементТаблицаДублей.УстановитьДействие("ПередУдалением", "Подключаемый_ДублиКлиентаПередУдалением");
	
	НовоеПоле = Элементы.Добавить("ДублиКлиентаКонтакт", Тип("ПолеФормы"), ЭлементТаблицаДублей);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "ДублиКлиента.Контакт";
	НовоеПоле.ТолькоПросмотр = Истина;
	
	НовоеПоле = Элементы.Добавить("ДублиКлиентаДублиКлиентаЗаменить", Тип("ПолеФормы"), ЭлементТаблицаДублей);
	НовоеПоле.Вид = ВидПоляФормы.ПолеФлажка;
	НовоеПоле.ПутьКДанным = "ДублиКлиента.Заменить";
	
	НовоеПоле = Элементы.Добавить("ДублиКлиентаКомментарий", Тип("ПолеФормы"), ЭлементТаблицаДублей);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "ДублиКлиента.Комментарий";
	
	НовоеПоле = Элементы.Добавить("ДублиКлиентаДата", Тип("ПолеФормы"), ЭлементТаблицаДублей);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "ДублиКлиента.Дата";
	НовоеПоле.ТолькоПросмотр = Истина;
	
	НовоеПоле = Элементы.Добавить("ДублиКлиентаАвтор", Тип("ПолеФормы"), ЭлементТаблицаДублей);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "ДублиКлиента.Автор";
	НовоеПоле.ТолькоПросмотр = Истина;
	
	НоваяКоманда = Команды.Добавить("Дубли_ОтметитьКакОригинал");
	НоваяКоманда.Действие = "Подключаемый_Дубли_ОтметитьКакОригинал";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Заголовок = НСтр("ru = 'Отметить как оригинал'");
	НоваяКоманда.Подсказка = НСтр("ru = 'Отметить как оригинал'");
	
	НоваяКнопка = Элементы.Добавить("Дубли_ОтметитьКакОригинал",
		Тип("КнопкаФормы"), ЭлементТаблицаДублей.КоманднаяПанель);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "Дубли_ОтметитьКакОригинал";
	НоваяКнопка.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
	НоваяКнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	
	СформироватьТаблицуДублей();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКомандыДублей()
	
	КомандыПанели = Элементы.ДублиКлиента.КоманднаяПанель.ПодчиненныеЭлементы;
	Для Каждого Элемент Из КомандыПанели Цикл
		Если СтрНайти(Элемент.Имя, "ДублиКлиентаДобавить") > 0 Тогда
			Элемент.ЦветФона = ЦветГолубой;
			Элемент.ЦветРамки = ЦветГолубой;
			Элемент.ЦветТекста = Новый Цвет(255, 255, 255);
			Элемент.Шрифт = Новый Шрифт(Элемент.Шрифт, , , Истина);
			Элемент.Заголовок = НСтр("ru = 'Предложить дубли'");
		КонецЕсли;
		Если СтрНайти(Элемент.Имя, "ДублиКлиентаЗакончитьРедактирование") > 0
			Или СтрНайти(Элемент.Имя, "ДублиКлиентаСкопировать") > 0
			Или СтрНайти(Элемент.Имя, "ДублиКлиентаСортировка") > 0
			Или СтрНайти(Элемент.Имя, "ДублиКлиентаПоискПоТекущемуЗначению") > 0 Тогда
			Элемент.Доступность = Ложь;
			Элемент.Видимость = Ложь;
		КонецЕсли;
		Если СтрНайти(Элемент.Имя, "ДублиКлиентаУдалить") > 0 Тогда
			Элемент.ЦветТекста = ЦветКрасный;
			Элемент.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			Элемент.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			Элемент.Заголовок = НСтр("ru = 'Исключить из дублей'");
		КонецЕсли;
	КонецЦикла;
	
	КомандыМеню = Элементы.ДублиКлиента.КонтекстноеМеню.ПодчиненныеЭлементы;
	Для Каждого Элемент Из КомандыМеню Цикл
		Если СтрНайти(Элемент.Имя, "ДублиКлиентаКонтекстноеМенюДобавить") > 0
			Или СтрНайти(Элемент.Имя, "ДублиКлиентаКонтекстноеМенюУдалить") > 0
			Или СтрНайти(Элемент.Имя, "ДублиКлиентаКонтекстноеМенюСкопировать") > 0
			Или СтрНайти(Элемент.Имя, "ДублиКлиентаКонтекстноеМенюПереместить") > 0
			Или СтрНайти(Элемент.Имя, "ДублиКлиентаПоискПоТекущемуЗначению") > 0 Тогда
			Элемент.Доступность = Ложь;
			Элемент.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДублиКлиентаПриИзменении(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	СтрОригинал = ЭтотОбъект.ДублиКлиента.НайтиСтроки(Новый Структура("ЭтоОригинал", Истина));
	
	Если СтрОригинал.Количество() Тогда
		Оригинал = СтрОригинал[0].Контакт;
	Иначе
		Оригинал = Объект.Ссылка;
	КонецЕсли;
	
	Дубли_ИзменитьНаСервере(Оригинал, ТекДанные.Контакт, ТекДанные.Заменить, ТекДанные.Комментарий);
	
	Дубли_ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДублиКлиентаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"Подключаемый_ДублиКлиентаПередНачаломДобавленияЗаершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.CRM_ПотенциальныеКлиенты.Форма.ФормаВыбора", , ЭтотОбъект, , , ,
		 ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДублиКлиентаПередНачаломДобавленияЗаершение(Дубль, ДопПараметр) Экспорт
	
	Если ЗначениеЗаполнено(Дубль) Тогда
		
		Если Объект.Ссылка = Дубль Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нельзя выбирать текущий элемент!'"));
			Возврат;
		КонецЕсли;
		
		Если ЭтотОбъект.ДублиКлиента.НайтиСтроки(Новый Структура("Контакт", Дубль)).Количество() > 0 Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выбранный элемент уже есть в списке дублей!'"));
			Возврат;
			
		КонецЕсли;
		
		Дубли_ДобавитьНаСервере(Объект.Ссылка, Дубль);
		
		Элементы.ДублиКлиента.Обновить();
		
		Дубли_ОбновитьЗаголовок();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДублиКлиентаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элементы.ДублиКлиента.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	ИначеЕсли Элементы.ДублиКлиента.ТекущиеДанные.ЭтоОригинал Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нельзя удалить дубль, помеченный как оригинал!'"));
		Возврат;
	КонецЕсли;
	
	Дубли_УдалитьНаСервере(Элементы.ДублиКлиента.ТекущиеДанные.Контакт);
	
	Дубли_ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Дубли_ОтметитьКакОригинал(Команда)
	
	Если Элементы.ДублиКлиента.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Дубли_ОтметитьКакОригиналНаСервере(Элементы.ДублиКлиента.ТекущиеДанные.Контакт);
	Элементы.ДублиКлиента.Обновить();
	Дубли_ОбновитьЗаголовок();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура Дубли_ИзменитьНаСервере(Оригинал, Дубль, Заменить, Комментарий)
	РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ЗаписатьДубль(Оригинал, Дубль, Заменить, Комментарий);
КонецПроцедуры

&НаСервере
Процедура Дубли_ДобавитьНаСервере(Оригинал, Дубль)
	
	РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ЗаписатьДубль(Оригинал, Дубль);
	СформироватьТаблицуДублей();
	
КонецПроцедуры

&НаСервере
Процедура Дубли_УдалитьНаСервере(Контакт)
	
	РегистрыСведений.CRM_ДублиКлиентовИКонтактов.УдалитьДубль(Контакт);
	СформироватьТаблицуДублей();
	
КонецПроцедуры

&НаСервере
Процедура Дубли_ОтметитьКакОригиналНаСервере(Контакт)
	
	РегистрыСведений.CRM_ДублиКлиентовИКонтактов.ОтметитьКакОригинал(Контакт);
	СформироватьТаблицуДублей();
	
КонецПроцедуры

&НаКлиенте
Процедура Дубли_ОбновитьЗаголовок()
	
	Дубли_Заголовок = НСтр("ru = 'Дубли'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Дубли_Количество = Дубли_КоличествоДублей(Объект.Ссылка);
		Если Дубли_Количество > 0 Тогда
			Дубли_Заголовок = Дубли_Заголовок + " (" + Дубли_Количество + ")";
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.Разделы_ПереключитьДубли.Заголовок <> Дубли_Заголовок Тогда
		Элементы.Разделы_ПереключитьДубли.Заголовок = Дубли_Заголовок;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Дубли_КоличествоДублей(Ссылка)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал КАК Оригинал
	               |ПОМЕСТИТЬ ВТОригинал
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт = &ТекОбъект
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт КАК Контакт
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал = &ТекОбъект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Оригинал
	               |ИЗ
	               |	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт = &ТекОбъект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт
	               |ИЗ
	               |	ВТОригинал КАК ВТОригинал
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	               |		ПО ВТОригинал.Оригинал = CRM_ДублиКлиентовИКонтактов.Оригинал
	               |ГДЕ
	               |	CRM_ДублиКлиентовИКонтактов.Контакт <> &ТекОбъект
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контакт)
	               |ПО
	               |	ОБЩИЕ";
	
	Запрос.УстановитьПараметр("ТекОбъект", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Контакт;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СформироватьТаблицуДублей()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_ДублиКлиентовИКонтактов.Оригинал КАК Оригинал
	|ПОМЕСТИТЬ ВТОригинал
	|ИЗ
	|	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	|ГДЕ
	|	CRM_ДублиКлиентовИКонтактов.Контакт = &ТекОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_ДублиКлиентовИКонтактов.Контакт КАК Контакт,
	|	CRM_ДублиКлиентовИКонтактов.Заменить КАК Заменить,
	|	CRM_ДублиКлиентовИКонтактов.Комментарий КАК Комментарий,
	|	CRM_ДублиКлиентовИКонтактов.Дата КАК Дата,
	|	CRM_ДублиКлиентовИКонтактов.Автор КАК Автор,
	|	ЛОЖЬ КАК ЭтоОригинал
	|ИЗ
	|	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	|ГДЕ
	|	CRM_ДублиКлиентовИКонтактов.Оригинал = &ТекОбъект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_ДублиКлиентовИКонтактов.Оригинал,
	|	ЛОЖЬ,
	|	CRM_ДублиКлиентовИКонтактов.Комментарий,
	|	CRM_ДублиКлиентовИКонтактов.Дата,
	|	CRM_ДублиКлиентовИКонтактов.Автор,
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	|ГДЕ
	|	CRM_ДублиКлиентовИКонтактов.Контакт = &ТекОбъект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_ДублиКлиентовИКонтактов.Контакт,
	|	CRM_ДублиКлиентовИКонтактов.Заменить,
	|	CRM_ДублиКлиентовИКонтактов.Комментарий,
	|	CRM_ДублиКлиентовИКонтактов.Дата,
	|	CRM_ДублиКлиентовИКонтактов.Автор,
	|	ЛОЖЬ
	|ИЗ
	|	ВТОригинал КАК ВТОригинал
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК CRM_ДублиКлиентовИКонтактов
	|		ПО ВТОригинал.Оригинал = CRM_ДублиКлиентовИКонтактов.Оригинал
	|ГДЕ
	|	CRM_ДублиКлиентовИКонтактов.Контакт <> &ТекОбъект";
	
	Запрос.УстановитьПараметр("ТекОбъект", Объект.Ссылка);
	РезультатЗапросаТаблица = Запрос.Выполнить().Выгрузить();
	
	ЗначениеВРеквизитФормы(РезультатЗапросаТаблица, "ДублиКлиента");
	
КонецПроцедуры

#КонецОбласти

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ИмяРеквизита",                     "РаспознаваниеРечи");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекЭлемент = Контекст.Форма.ТекущийЭлемент;
	ИмяРеквизита = "";
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяЭлемента", ТекЭлемент.Имя);
	
	НайденныеСтроки = ЭтотОбъект["РаспознаваниеРечи_ТаблицаЭлементов"].НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = НайденныеСтроки[0].ИмяРеквизита;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		ТекЭлемент,
		ИмяРеквизита,
		РезультатРаспознавания);
	
	РаспознанныйТекст = 
		CRM_ОбработкаРаспознанногоТекстаКлиентСервер.ТекстИзРезультатаРаспознавания(РезультатРаспознавания);
	Если ТекЭлемент.Имя = "БыстрыйВвод_ПримечаниеТема" Тогда
		РаспознанныйТекст = ТекЭлемент.ТекстРедактирования + РаспознанныйТекст;
		БыстрыйВвод_ПримечаниеТемаИзменениеТекстаРедактирования(ТекЭлемент, РаспознанныйТекст, Истина);
	ИначеЕсли ТекЭлемент.Имя = "БыстрыйВвод_ФайлОписание" Тогда
		РаспознанныйТекст = ТекЭлемент.ТекстРедактирования + РаспознанныйТекст;
		БыстрыйВвод_ФайлОписаниеИзменениеТекстаРедактирования(ТекЭлемент, РаспознанныйТекст, Истина);
	Иначе
		// Обработка не требуется. Распознанный текст уже заполнен.
	КонецЕсли;
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	Если ТекЭлемент.Имя = "НаименованиеВыбор" Тогда
		НаименованиеПриИзменении(ТекЭлемент);
	ИначеЕсли ТекЭлемент.Имя = "CRM_Фамилия" Тогда
		CRM_ФамилияПриИзменении(ТекЭлемент);
	ИначеЕсли ТекЭлемент.Имя = "CRM_Имя" Тогда
		CRM_ИмяПриИзменении(ТекЭлемент);
	ИначеЕсли ТекЭлемент.Имя = "CRM_Отчество" Тогда
		CRM_ОтчествоПриИзменении(ТекЭлемент);
	Иначе
		// Обработка не требуется
	КонецЕсли;
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "НаименованиеВыбор");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "CRM_Фамилия");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "CRM_Имя");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "CRM_Отчество");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Организация");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Комментарий");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ПримечаниеТема");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ВзаимодействиеТема");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_Содержание");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ЗадачаТема");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_Описание");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ПисьмоТема");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ФайлОписание");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ПисьмоСодержание");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ЧатСодержание");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

#Область ШаблоныЭлементовФорм

&НаКлиенте
Процедура ШаблоныЭлементов_СоздатьЭлементы(ИмяФормыШаблона, Параметры, ОписаниеОповещенияОЗакрытии ,
	 ИмяГруппыРазмещения)
	
	Если ШаблоныЭлементов_Формы = Неопределено Тогда
		ШаблоныЭлементов_Формы = Новый Структура;
	КонецЕсли;
	
	ШаблоныЭлементов_ОписаниеФормы = CRM_ШаблоныЭлементовФормКлиент.ОписаниеФормы(ЭтотОбъект, ИмяФормыШаблона, Параметры);
	Если ШаблоныЭлементов_ОписаниеФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблоныЭлементов_ОписаниеФормы.ФормаШаблона.ОписаниеОповещенияОЗакрытии = ОписаниеОповещенияОЗакрытии;
	
	ШаблоныЭлементов_Формы.Вставить(ШаблоныЭлементов_ОписаниеФормы.ФормаШаблона.ИдентификаторФормыСтрокой,
		 ШаблоныЭлементов_ОписаниеФормы.ФормаШаблона);
	ШаблоныЭлементов_СоздатьЭлементыНаСервере(ШаблоныЭлементов_ОписаниеФормы.АдресОписанияФормыШаблона,
		 ИмяГруппыРазмещения,
		 ШаблоныЭлементов_ОписаниеФормы.ФормаШаблона.ИдентификаторФормыСтрокой);
	
КонецПроцедуры	

&НаСервере
Процедура ШаблоныЭлементов_СоздатьЭлементыНаСервере(АдресОписанияФормыШаблона, ИмяГруппыРазмещения,
	 ИдентификаторШаблона,
	 ИмяГруппыОбновления = Неопределено)
	
	ОбновлениеГруппы = Элементы.Найти(ИмяГруппыОбновления);
	CRM_ШаблоныЭлементовФорм.СоздатьЭлементыФормыПоШаблону(ЭтотОбъект, АдресОписанияФормыШаблона,
		 ИмяГруппыРазмещения, ИдентификаторШаблона,
		 ОбновлениеГруппы); 
	
КонецПроцедуры	

&НаКлиенте
Процедура ШаблоныЭлементов_ОбновитьЭлементы(ИдентификаторШаблона, // АПК:78 - исключить из проверки.
	 ИмяГруппыОбновления) Экспорт
	
	ФормаШаблона = ШаблоныЭлементов_Формы[ИдентификаторШаблона];
	
	АдресОписанияФормыШаблона = ФормаШаблона.ОписаниеФормы(СтрЗаменить(ИмяГруппыОбновления, ИдентификаторШаблона, ""));
	ЭтотОбъект["ШаблоныЭлементов_АдресОписанияФормы" + ИдентификаторШаблона] = АдресОписанияФормыШаблона;
	
	ШаблоныЭлементов_СоздатьЭлементыНаСервере(АдресОписанияФормыШаблона, "", ИдентификаторШаблона, ИмяГруппыОбновления);
	
КонецПроцедуры	

&НаКлиенте
Процедура ШаблоныЭлементов_УдалитьЭлементы(ИдентификаторФормыСтрокой)
	
	ШаблоныЭлементов_УдалитьЭлементыНаСервере(ИдентификаторФормыСтрокой);
	ШаблоныЭлементов_Формы.Удалить(ИдентификаторФормыСтрокой);
	
КонецПроцедуры	

&НаСервере
Процедура ШаблоныЭлементов_УдалитьЭлементыНаСервере(ИдентификаторФормыСтрокой)
	
	CRM_ШаблоныЭлементовФорм.УдалитьЭлементыФормы(ЭтотОбъект, ИдентификаторФормыСтрокой);
	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_ВыполнитьКоманду(Команда) 
	CRM_ШаблоныЭлементовФормКлиент.ВыполнитьКоманду(Команда, ЭтотОбъект, ШаблоныЭлементов_Формы[Прав(Команда.Имя, 37)]);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_ПриИзменении(Элемент)
	CRM_ШаблоныЭлементовФормКлиент.ПриИзменении(Элемент, ЭтотОбъект, ШаблоныЭлементов_Формы[Прав(Элемент.Имя, 37)]);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	CRM_ШаблоныЭлементовФормКлиент.НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка,
		 ЭтотОбъект, ШаблоныЭлементов_Формы[Прав(Элемент.Имя,
		 37)]);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	CRM_ШаблоныЭлементовФормКлиент.ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		 ЭтотОбъект, ШаблоныЭлементов_Формы[Прав(Элемент.Имя,
		 37)]);
КонецПроцедуры

#КонецОбласти

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаСервереБезКонтекста
Процедура ПолучитьДанныеВыбораФИОНаСервере(СтрокаПоиска, ЭтоФамилия = Ложь, ЭтоИмя = Ложь,
	 ДанныеВыбора,
	 СтандартнаяОбработка)
	
	СписокФИО = CRM_КлиентыСервер.ПолучитьДанныеВыбораФИО(СтрокаПоиска, ЭтоФамилия, ЭтоИмя);
	Если СписокФИО.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокФИО;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФИО(Команда)
	
	СтруктураЗаполнения = ЗаполнитьФИОНаСервере();
	Если (ЗначениеЗаполнено(Объект.Фамилия) И Не Объект.Фамилия = СтруктураЗаполнения.Фамилия) 
		Или (ЗначениеЗаполнено(Объект.Имя) И Не Объект.Имя = СтруктураЗаполнения.Имя) 
		Или (ЗначениеЗаполнено(Объект.Отчество) И Не Объект.Отчество = СтруктураЗаполнения.Отчество) Тогда
			ТекстВопроса = НСтр("ru = 'Переписать ФИО?'");
			Ответ = Неопределено;
			ПоказатьВопрос(Новый ОписаниеОповещения("ПереписатьФИОЗавершение", ЭтотОбъект,
				 СтруктураЗаполнения), ТекстВопроса,
				 РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереписатьФИОЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Ответ = РезультатВопроса;

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьЗначенияСвойств(Объект, ДополнительныеПараметры);
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьФИОНаСервере()
	
	СтруктураФИО = Новый Структура("Фамилия, Имя, Отчество");
	НаименованиеТекущее = Объект.Наименование;
	Справочники.CRM_ВысокочастотныеФИО.ДополнитьНедостающиеФИОПоНаименованию(НаименованиеТекущее, 
		СтруктураФИО.Фамилия, СтруктураФИО.Имя, СтруктураФИО.Отчество);
	Возврат СтруктураФИО;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Команда, "Имя") Тогда
		CRM_БизнесПроцессыИЗадачиКлиент.ПроверитьДействиеФормы(ЭтотОбъект, Команда);
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(Команда.Имя, "КомандаПереключить_") > 0 Тогда
		
		// СтандартныеПодсистемы.Свойства
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
			Если Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
				
				СвойстваВыполнитьОтложеннуюИнициализацию();
				МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
				МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
				
			КонецЕсли;
		КонецЕсли;
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКомандыДобавленныхТаблиц()
	
	Если ВыведеныПотенциальныеКлиенты Тогда
		НастроитьКомандыПотенциальныхКлиентов();
	КонецЕсли;
	
	Если ВыведеныДубли Тогда
		НастроитьКомандыДублей();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
