
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Принадлежность") Тогда
		Если ТипЗнч(Параметры.Принадлежность.ИмяТаблиц) = Тип("Строка") Тогда
			СписокИменТаблиц = Новый СписокЗначений;
			СписокИменТаблиц.Добавить(Параметры.Принадлежность.ИмяТаблиц);
			
		Иначе
			СписокИменТаблиц = Параметры.Принадлежность.ИмяТаблиц;
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗначенияКлассификаторовСписок, 
			"Владелец.Принадлежность.ИмяТаблицы", 
			СписокИменТаблиц,
			ВидСравненияКомпоновкиДанных.ВСписке
		);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		ПараметрыРазмещения = МодульПодключаемыеКоманды.ПараметрыРазмещения();
		ПараметрыРазмещения.Источники = Новый ОписаниеТипов("СправочникСсылка.CRM_ЗначенияКлассификаторов");
		ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаИзменениеПорядка;
		ПараметрыРазмещения.ПрефиксГрупп = "ЗначенияКлассификаторов";
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
		ПараметрыРазмещения = МодульПодключаемыеКоманды.ПараметрыРазмещения();
		ПараметрыРазмещения.Источники = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.CRM_Классификаторы");
		ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаИзменениеПорядкаКлассификаторов;
		ПараметрыРазмещения.ПрефиксГрупп = "Классификаторы";
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьДоступностьКомандПорядка(Элементы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКлассификаторыСписок

&НаКлиенте
Процедура КлассификаторыСписокПриАктивизацииСтроки(Элемент)
	
	ОбновитьСодержимоеФормыПриАктивизацииКлассификатора();
	
	УстановитьДоступностьКомандПорядка(Элементы);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗначенияКлассификаторовСписок

&НаКлиенте
Процедура ЗначенияКлассификаторовСписокПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандПорядка(Элементы);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте 
Функция НайтиПолеОтбора(Элементы, ИмяОтбора)
	
	ИскомоеПоле = Неопределено;
	
	ПолеОтбора = Новый ПолеКомпоновкиДанных(ИмяОтбора);
	
	Для каждого ОтборПоле Из Элементы Цикл
		
		Если ТипЗнч(ОтборПоле) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ИскомоеПоле = НайтиПолеОтбора(ОтборПоле.Элементы, ИмяОтбора);
		Иначе
			Если ОтборПоле.Использование И ОтборПоле.ЛевоеЗначение = ПолеОтбора Тогда
				
				ИскомоеПоле = ОтборПоле;
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИскомоеПоле;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСодержимоеФормыПриАктивизацииКлассификатора()
	
	Если ТипЗнч(Элементы.КлассификаторыСписок.ТекущаяСтрока) = Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы") Тогда
		ТекущийКлассификатор = Элементы.КлассификаторыСписок.ТекущаяСтрока;
	Иначе
		ТекущийКлассификатор = Неопределено;
	КонецЕсли;
	
	ИскомоеПолеОтбора = НайтиПолеОтбора(ПолучитьОтборДинамическогоСписка(ЗначенияКлассификаторовСписок).Элементы,
		 "Владелец");
	
	Если ИскомоеПолеОтбора = Неопределено Тогда
		ОтборПоЦели =
			ПолучитьОтборДинамическогоСписка(ЗначенияКлассификаторовСписок).Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборПоЦели.Использование = Истина;
		ОтборПоЦели.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
		ОтборПоЦели.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборПоЦели.ПравоеЗначение = ТекущийКлассификатор;
		ОтборПоЦели.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
	Иначе
		ИскомоеПолеОтбора.Использование = Истина;
		ИскомоеПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
		ИскомоеПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ИскомоеПолеОтбора.ПравоеЗначение = ТекущийКлассификатор;
		ИскомоеПолеОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьДоступностьКомандПорядка(Элементы)
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция ПолучитьОтборДинамическогоСписка(Список)
	
	Возврат Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.ЗначенияКлассификаторовСписок);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.ЗначенияКлассификаторовСписок);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.ЗначенияКлассификаторовСписок);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
