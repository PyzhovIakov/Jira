
#Область ОписаниеПеременных

&НаКлиенте
Перем ТекущаяПозицияHTML;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// +CRM
	CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьмаHTML);

	// Скроем раздел текущего этапа, если отключена ФО управления проектами.
	ИспользоватьПодсистемуУправленияПроектами = 
		ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПодсистемуУправленияПроектами");
	
	// +CRM работа с этапами
	ПлановаяДатаНачалаПредыдущая = Объект.ПлановаяДатаНачала;
	Элементы.СтраницыОтображенияГрафиков.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	// -CRM работа с этапами
	// -CRM
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ИзменитьУсловноеОформлениеКорняДерева();
	Иначе
		
		ЗаполнитьСписокКолонокКалендарногоГрафикаНаСервере();
		// Инициация данных календарных графиков
		КалендарныеГрафикиПриЧтенииСозданииНаСервере();
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ЗначениеКопирования = Параметры.ЗначениеКопирования;
			ТекстПисьмаHTML = CRM_Взаимодействия.ВставитьТекстВТекстПисьмаHTML(
				Неопределено, ЗначениеКопирования.CRM_КомментарийHTML, ЗначениеКопирования, Истина, УникальныйИдентификатор, ИдентификаторыКартинокПисьма);
		КонецЕсли;
		
	КонецЕсли;
	
	// +CRM
	// Вычисляем, нужно ли показывать подсказку на вкладке "Дополнительные реквизиты".
	ПоказатьПодсказку = CRM_ХранилищеНастроек.Загрузить(ИмяФормы, "ПоказыватьПодсказкуДопРеквизитыПроектов");
	Элементы.ДекорацияДополнительныхРеквизитов.Видимость = ?(ПоказатьПодсказку = Неопределено, Истина, ПоказатьПодсказку);
	
	СформироватьПредставлениеВложений();
	
	ПредыдущийСтатусПроекта = Объект.CRM_Статус;
	
	ВидимостьИПорядокКолонокДерева();
	
	СписокРедактируемыхКолонок.Добавить("ПлановаяДатаНачала");
	СписокРедактируемыхКолонок.Добавить("ПлановаяДатаОкончания");
	СписокРедактируемыхКолонок.Добавить("ПлановаяДлительность");
	СписокРедактируемыхКолонок.Добавить("ФактическаяДатаНачала");
	СписокРедактируемыхКолонок.Добавить("ФактическаяДатаОкончания");
	СписокРедактируемыхКолонок.Добавить("Сделано");
	
	АвтоЗаголовок = Ложь;
	Если ЗначениеЗаполнено(Объект.Наименование) Тогда
		Заголовок = Объект.Наименование;
		
	Иначе
		Заголовок = НСтр("ru = 'Новый проект...'");
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'Введите наименование проекта'");
	КонецЕсли;
	
	ТипПроекта = НСтр("ru = 'Проект'");

	ЕстьПраваНаПроект = (Пользователи.ЭтоПолноправныйПользователь()
		 ИЛИ Объект.Ответственный = Пользователи.ТекущийПользователь());
	
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	
	ОтображатьТаблицуВложений = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_Подписки",
		"ОтображатьТаблицуВложений", Ложь);
	Элементы.ГруппаВложения.Видимость = ОтображатьТаблицуВложений;
	Элементы.ГруппаСсылокИКомандВложений.Видимость = Не ОтображатьТаблицуВложений;
	
	Элементы.ГруппаДополнительное.Видимость = Ложь;
	// -CRM
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// +CRM
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели", Истина);
	
	УправлениеВидимостью();
	
	Если ВсеВложенияПометка Тогда
		Элементы.Вложения.ОтборСтрок = Неопределено;
	Иначе
		Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьмаОтбор", "#");
	КонецЕсли;
	
	СформироватьСсылкиВложений();
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Не ТекущийОбъект.ЭтоНовый() Тогда
		// Получим общую сумму запланированных затратам проекта.
		ИтогПоПлановымЗатратам = CRM_УправлениеПроектамиСервер.ПолучитьПлановыеЗатратыПоПроекту(ТекущийОбъект.Ссылка);
		Если ИтогПоПлановымЗатратам = 0 Тогда
			ИтогПоПлановымЗатратамПредставление = НСтр("ru='Отсутствуют';en='No'");
		Иначе
			ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
			Если ЗначениеЗаполнено(ВалютаУправленческогоУчета) Тогда
				ВалютаУправленческогоУчета = Строка(ВалютаУправленческогоУчета);
			Иначе
				ВалютаУправленческогоУчета = НСтр("ru='руб';en='rub.'");
			КонецЕсли;
			ИтогПоПлановымЗатратамПредставление = Формат(ИтогПоПлановымЗатратам, "ЧДЦ=2") + " " + ВалютаУправленческогоУчета;
			Если Прав(ИтогПоПлановымЗатратамПредставление, 1) <> "." Тогда
				ИтогПоПлановымЗатратамПредставление = ИтогПоПлановымЗатратамПредставление + ".";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСписокКолонокКалендарногоГрафикаНаСервере();
	// Инициация данных календарных графиков
	КалендарныеГрафикиПриЧтенииСозданииНаСервере();
	
	ПриСозданииИПриЧтенииНаСервере();
	
	ТекстПисьмаHTML = CRM_Взаимодействия.ВставитьКартинкиВТекстHTML(
		ТекущийОбъект.CRM_КомментарийHTML,
		Объект.Ссылка,
		УникальныйИдентификатор,
		ИдентификаторыКартинокПисьма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Элементы.ПроверкаПравописания.Пометка Тогда
		ТекстПисьмаHTML = CRM_ПроверкаПравописанияКлиент.СкрытьОшибки(Элементы.ТекстПисьмаHTML);
	КонецЕсли;
	
	CRM_РаботаСHTMLКлиент.ЗапомнитьПозициюHTML(Элементы.ТекстПисьмаHTML, ТекущаяПозицияHTML);
	CRM_РаботаСHTMLКлиент.ЗаписатьHTML(Элементы.ТекстПисьмаHTML, КартинкиДобавленные, УникальныйИдентификатор);
	ТекстПисьмаHTMLПриЗаписи = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ТекстПисьмаHTML);
	
	#Если Не ВебКлиент Тогда
		Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
			Если СтрокаТаблицыВложений.Расположение = 2 Тогда
				Попытка
					Данные = Новый ДвоичныеДанные(СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере);
					СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(Данные, "");
					СтрокаТаблицыВложений.Расположение = 4;
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
						 , "Вложения", ,
						 Отказ);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// +CRM
	ТекущийОбъект.Комментарий = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекущийОбъект.CRM_КомментарийHTML);
	
	ТекущийОбъект.CRM_КолонкиКалендарногоГрафика = Новый ХранилищеЗначения(КолонкиКалендарногоГрафика);
	// -CRM
	
	CRM_Взаимодействия.ОбработатьКартинкиHTMLПередЗаписью(ТекстПисьмаHTMLПриЗаписи,
	ИдентификаторыКартинокПисьма, КартинкиДобавленные, КартинкиУдаляемые);
	
	ТекущийОбъект.CRM_КомментарийHTML = ТекстПисьмаHTMLПриЗаписи;
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого УдаленнаяКартинка Из КартинкиУдаляемые Цикл
		ОбъектВложение = УдаленнаяКартинка.Значение.ПолучитьОбъект();
		ОбъектВложение.Удалить();
	КонецЦикла;
	КартинкиУдаляемые.Очистить();
	
	// Удалим удаленные вложения
	Для Каждого УдаленноеВложение Из УдаленныеВложения Цикл
		ОбъектВложение = УдаленноеВложение.Значение.ПолучитьОбъект();
		ОбъектВложение.Удалить();
	КонецЦикла;
	
	УдаленныеВложения.Очистить();
	
	// Создадим вложения для добавленных картинок.
	Для Каждого Строка Из КартинкиДобавленные Цикл
		
		ПараметрыВложения = Строка.Значение;
		
		ПрисоединенныйФайл = CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			ТекущийОбъект.Ссылка, ПараметрыВложения.АдресВоВременномХранилище, ПараметрыВложения);
		
		Если ПрисоединенныйФайл <> Неопределено Тогда
			ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
			ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = ПараметрыВложения.ИДФайлаЭлектронногоПисьма;
			ПрисоединенныйФайлОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	КартинкиДобавленные.Очистить();
	
	ЗаписатьВложения(ТекущийОбъект.Ссылка);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ПриЗаписиНаСервере()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Если ИспользоватьПодсистемуУправленияПроектами Тогда
		СтруктураПараметров = Новый Структура("CRM_Проект", Объект.Ссылка);
	Иначе
		СтруктураПараметров = Новый Структура("CRM_Проект", ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка"));
	КонецЕсли;
	УстановитьПараметрыФункциональныхОпцийФормы(СтруктураПараметров);
	
	ПодключитьОбработчикОжидания("Подключаемый_Обновить", 0.3, Истина);
	
	ТекстПисьмаПриОткрытии = Элементы.ТекстПисьмаHTML.Документ.body.innerHTML;
	CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьмаПриОткрытии);
	
	Если Элементы.ПроверкаПравописания.Пометка Тогда
		ПроверяемыйТекст = Элементы.ТекстПисьмаHTML.Документ.documentElement.outerHTML;
		CRM_ПроверкаПравописанияКлиент.ПоказатьОшибки(ЭтотОбъект, Элементы.ТекстПисьмаHTML,
			 ТекстПисьмаHTML,
			 ПроверяемыйТекст);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьВложения();
	
	ТекстПисьмаHTML = CRM_Взаимодействия.ВставитьКартинкиВТекстHTML(
		ТекущийОбъект.CRM_КомментарийHTML,
		Объект.Ссылка,
		УникальныйИдентификатор,
		ИдентификаторыКартинокПисьма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли; 
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		СформироватьПредставлениеВложений();
		
	ИначеЕсли ИмяСобытия = "Запись_Файл" И (ТипЗнч(Источник) = Тип("СправочникСсылка.ПроектыПрисоединенныеФайлы")
		Или ТипЗнч(Источник) = Тип("Массив") И Источник.Количество() > 0  
		И ТипЗнч(Источник[0]) = Тип("СправочникСсылка.ПроектыПрисоединенныеФайлы")) Тогда
		СформироватьПредставлениеВложений();
		
	ИначеЕсли ИмяСобытия = "ПередИзменениемШаблонаЭтапаКалендарногоПлана" И Параметр = Объект.Ссылка Тогда
		Записать();
	ИначеЕсли ИмяСобытия = "ИзменениеШаблонаЭтапаКалендарногоПлана" И Параметр = Объект.Ссылка Тогда
		
		Если ЭтотОбъектИзменен() Тогда
			Прочитать();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПроверкаПравописания_ИзмененТекст" И Источник = ЭтотОбъект Тогда
		ТекстПисьмаHTML = Параметр.Текст;
		Модифицированность = Истина;	
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ;
	Если HTMLДокумент <> Неопределено Тогда
		ТекстПисьмаПередЗакрытием = HTMLДокумент.body.innerHTML;
		CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьмаПередЗакрытием);
		Если ТекстПисьмаПередЗакрытием <> ТекстПисьмаПриОткрытии Тогда
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	ПриЗакрытииНаСервере();
	
	Оповестить("ЗаписьПроекта", Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.CRM_ФормаОтметкиЭлементовСписка" Тогда
		
		КолонкиКалендарногоГрафика = ВыбранноеЗначение;
		Модифицированность = Истина;
		
		ТекущийЭтапДерева = Неопределено;
		ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущийЭтапДерева = ТекущиеДанные.Этап;
		КонецЕсли;
		
		ВидимостьИПорядокКолонокДерева();
		
		ПодключитьОбработчикОжидания("Подключаемый_Обновить", 0.1, Истина);
		
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.CRM_ФормированиеCсылкиНаОбъект") Тогда
		CRM_РаботаСHTMLКлиент.ВставитьСсылкуНаОбъект(Элементы.ТекстПисьмаHTML, ВыбранноеЗначение.Ссылка,
			ВыбранноеЗначение.ПредставлениеСсылки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
		
		// Изменим плановую дату окончания при необходимости
		ПлановаяДатаОкончания = ПолучитьЗначениеРеквизита(НовыйОбъект, "ПлановаяДатаОкончания");
		Если ПлановаяДатаОкончания > Объект.ПлановаяДатаОкончания Тогда
			Объект.ПлановаяДатаОкончания = ПлановаяДатаОкончания;
			Модифицированность = Истина;
		КонецЕсли;
		
		ДобавитьЭтапЗадачуКонтрольнуюТочкуПослеЗаписиНового(НовыйОбъект);
		
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
		
		ДобавитьЭтапЗадачуКонтрольнуюТочкуПослеЗаписиНового(НовыйОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Не Настройки["ВсеВложенияПометка"] = Неопределено Тогда
		ВсеВложенияПометка	= Настройки["ВсеВложенияПометка"];
	Иначе
		ВсеВложенияПометка	= Ложь;
	КонецЕсли;
	Элементы.ФормаВсеВложения.Пометка	= ВсеВложенияПометка;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура CRM_ТекущийЭтапНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(, "Данные еще не записаны.
					   |Выбор текущего этапа возможен только после записи данных
					   |Данные будут записаны.");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИтогПоПлановымЗатратамНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Данные еще не записаны.
					   |Формирование отчета возможно только после записи данных.'"));
		//
		Возврат;
	КонецЕсли;
	
	Если ИтогПоПлановымЗатратам = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Нет данных для формирования отчета!';en='There are no data for formation of report!'"));
		Возврат;
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура("Отбор,СформироватьПриОткрытии", Новый Структура("Проект",
		 Объект.Ссылка),
		 Истина);
	Форма = ПолучитьФорму("Отчет.CRM_ПлановыеЗатратыПроектов.ФормаОбъекта", СтруктураПараметры, ЭтотОбъект);
	Если Форма <> Неопределено Тогда
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПартнерПриИзменении(Элемент)
	Объект.CRM_КонтактноеЛицоПартнера = ПолучитьЗначениеРеквизита(Объект.CRM_Партнер, "CRM_ОсновноеКонтактноеЛицо");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭтапыНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьЭтапыЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачиИКТНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьЗадачиИКТЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлыЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура НаименованиеПриИзмененииНаСервере()
	ИзменитьУсловноеОформлениеКорняДерева();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Наименование) Тогда
		Заголовок = Объект.Наименование;
	Иначе
		Заголовок = НСтр("ru='Введите наименование...'");
	КонецЕсли;
	
	НаименованиеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьШаблонНаОснованииПроекта(Команда)
	CRM_УправлениеПроектамиКлиент.СоздатьШаблонНаОснованииПроекта(Объект.Ссылка);
КонецПроцедуры

#Область РедакторHTML

&НаКлиенте
Процедура ВыполнитьКомандуСписка(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИмяКоманды = Сред(Элемент.Имя, 8);
	
	CRM_РаботаСHTMLКлиент.ВыполнитьHTMLКоманду(ЭтотОбъект, Элементы.ТекстПисьмаHTML, ИмяКоманды, ВыбранноеЗначение);
	
	ТекущийЭлемент = Элементы.ТекстПисьмаHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаHTMLПриИзменении(Элемент)
	
	CRM_РаботаСHTMLКлиент.ПолеHTMLПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаHTMLДокументСформирован(Элемент)
	
	ТекстПисьмаПриОткрытии = Элементы.ТекстПисьмаHTML.Документ.body.innerHTML; 
	CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьмаПриОткрытии);
	
	CRM_РаботаСHTMLКлиент.ПолеHTMLДокументСформирован(ЭтотОбъект, Элемент);
	CRM_РаботаСHTMLКлиент.ВосстановитьПоложениеHTML(Элементы.ТекстПисьмаHTML, ТекущаяПозицияHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	CRM_РаботаСHTMLКлиент.ПолеHTMLПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
	Если Элементы.Найти("МенюГруппаВариантыЗамены") <> Неопределено 
		И ДанныеСобытия.Element.className = "mistake" Тогда
		НомерОшибки = Число(СтрЗаменить(ДанныеСобытия.Element.id, "mistake", ""));
		ТекстПисьмаHTMLПриНажатииНаСервере(НомерОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТекстПисьмаHTMLПриНажатииНаСервере(НомерОшибки)
	CRM_ПроверкаПравописанияСервер.ДобавитьВариантыЗаменыВКонтекстноеМеню(ЭтотОбъект, НомерОшибки);
КонецПроцедуры

#КонецОбласти

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыВложения

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьВложениеВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СвойстваВложенияМеню.Доступность = (ТекущиеДанные.Расположение <> 5);
	Элементы.СвойстваВложения.Доступность                        = (ТекущиеДанные.Расположение <> 5);
	
КонецПроцедуры

 &НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДобавитьВложениеВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьВложениеВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	МассивФайлов = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		
		МассивФайлов.Добавить(ПараметрыПеретаскивания.Значение);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1
			И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если ТипЗнч(ФайлПринятый) = Тип("Файл") Тогда
					МассивФайлов.Добавить(ФайлПринятый);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		
		ДополнительныеПараметры = Новый Структура("ВыбранныйФайл", ВыбранныйФайл);
		ОписаниеОповещение = Новый ОписаниеОповещения("ПроверкаЭтоФайлПослеЗавершения", ЭтотОбъект, ДополнительныеПараметры);
		ВыбранныйФайл.НачатьПроверкуЭтоФайл(ОписаниеОповещение);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область РаботаСВложениями

&НаКлиенте
Процедура ВсеВложения(Команда)
	
	Элементы.ФормаВсеВложения.Пометка	= Не Элементы.ФормаВсеВложения.Пометка;
	ВсеВложенияПометка					= Элементы.ФормаВсеВложения.Пометка;
	
	Если ВсеВложенияПометка Тогда
		Элементы.Вложения.ОтборСтрок = Неопределено;
	Иначе
		Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьмаОтбор", "#");
	КонецЕсли;
	
	СформироватьСсылкиВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложение(Команда)
	
	СохранитьВложениеВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваВложения(Команда)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИндексВКоллекции = Вложения.Индекс(ТекущиеДанные);
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ДополнительныеПараметры = Новый Структура("ТекущийИндексВКоллекции", ТекущийИндексВКоллекции);
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ВопросОЗаписиФайлаПослеЗакрытия",
			 ЭтотОбъект,
			 ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Свойства файла доступны только после его записи. Записать?'");
		ПоказатьВопрос(ОбработчикОповещенияОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьСвойстваВложения(ТекущийИндексВКоллекции);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РедакторHTML

&НаКлиенте
Процедура УвеличитьШрифт(Команда)
	
	CRM_РаботаСHTMLКлиент.УвеличитьШрифт(ЭтотОбъект, Элементы.ТекстПисьмаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьШрифт(Команда)
	
	CRM_РаботаСHTMLКлиент.УменьшитьШрифт(ЭтотОбъект, Элементы.ТекстПисьмаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьШрифт(Команда)
	
	CRM_РаботаСHTMLКлиент.ИзменитьШрифт(ЭтотОбъект, Элементы.ТекстПисьмаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКоманду(Команда)
	
	ИмяКоманды = Сред(Команда.Имя, 8);
	CRM_РаботаСHTMLКлиент.ВыполнитьHTMLКоманду(ЭтотОбъект, Элементы.ТекстПисьмаHTML, ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЦвета(Команда)
	
	ИмяКоманды = Сред(Команда.Имя, 8);
	CRM_РаботаСHTMLКлиент.ВыборЦвета(ЭтотОбъект, Элементы.ТекстПисьмаHTML, ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИзображение(Команда)
	
	CRM_РаботаСHTMLКлиент.ВставитьИзображение(ЭтотОбъект, Элементы.ТекстПисьмаHTML, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	
	CRM_РаботаСHTMLКлиент.ВставитьКартинкуИзБуфера(ЭтотОбъект, Элементы.ТекстПисьмаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьГиперссылку(Команда)
	
	CRM_РаботаСHTMLКлиент.ВставитьГиперссылку(ЭтотОбъект, Элементы.ТекстПисьмаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТаблицу(Команда)
	
	CRM_РаботаСHTMLКлиент.ВставитьТаблицу(ЭтотОбъект, Элементы.ТекстПисьмаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДопФорматирование(Команда)
	Элементы.ПоказатьДопФорматирование.Пометка = НЕ Элементы.ПоказатьДопФорматирование.Пометка;
	Элементы.ГруппаДополнительное.Видимость = Элементы.ПоказатьДопФорматирование.Пометка;
КонецПроцедуры

#КонецОбласти // РедакторHTML

&НаКлиенте
Процедура ВставитьСсылкуНаОбъектИнформационнойБазы(Команда)
	
	ОткрытьФорму("ОбщаяФорма.CRM_ФормированиеCсылкиНаОбъект", , ЭтотОбъект);
	
КонецПроцедуры

#Область ПроверкаПравописания

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПроверкиПравописания(Команда)
	CRM_ПроверкаПравописанияКлиент.ВыполнитьКомандуПроверкиПравописания(ЭтотОбъект, Элементы.ТекстПисьмаHTML, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаменитьНаВариантНажатие(Команда)
	CRM_ПроверкаПравописанияКлиент.ЗаменитьНаВариант(ЭтотОбъект, Элементы.ТекстПисьмаHTML, Команда.Имя)
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ПроверкаПравописани".
//
// Параметры:
//  Команда  - выполняемая команда
//
Процедура ПроверкаПравописания(Команда = Неопределено)
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'проверку орфографии'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаПравописанияПродолжение", ЭтотОбъект);
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПравописанияПродолжение(Результат, ДопПараметр) Экспорт
	
	Элементы.ПроверкаПравописания.Пометка = Не Элементы.ПроверкаПравописания.Пометка;
	Элементы.CRM_ГруппаПроверкаПравописания.Видимость = Элементы.ПроверкаПравописания.Пометка;
	
	Если Элементы.ПроверкаПравописания.Пометка Тогда
		CRM_ПроверкаПравописанияКлиент.СкрытьОшибки(Элементы.ТекстПисьмаHTML);
		ПроверяемыйТекст = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ТекстПисьмаHTML);
		ПроверкаПравописанияНаСервере(ПроверяемыйТекст);
		ТекстПисьмаHTML = ПроверяемыйТекст;
		CRM_ПроверкаПравописанияКлиент.ПоказатьОшибки(ЭтотОбъект, Элементы.ТекстПисьмаHTML,
			 ТекстПисьмаHTML,
			 ПроверяемыйТекст);
	
	Иначе
		ВыделенныйТекст = Элементы.ТекстПисьмаHTML.Документ.getSelection();
		НомерТекущейОшибки = ЭтотОбъект["CRM_НомерТекущейОшибки"];
		Если ВыделенныйТекст.type <> "None" 
			И НомерТекущейОшибки < ЭтотОбъект["CRM_СписокОшибок"].Количество()
			И ЭтотОбъект["CRM_СписокОшибок"].Получить(НомерТекущейОшибки).Значение.word
			= ВыделенныйТекст.anchorNode.textContent Тогда
			Элементы.ТекстПисьмаHTML.Документ.getSelection().empty();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаПравописанияНаСервере(ПроверяемыйТекст)
	CRM_ПроверкаПравописанияСервер.ПроверитьПравописание(ЭтотОбъект, Элементы.ТекстПисьмаHTML,
		ПроверяемыйТекст);
КонецПроцедуры

#КонецОбласти // ПроверкаПравописания

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

#Область СтандартныеПодсистемыСвойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
	 НавигационнаяСсылка = Неопределено,
	 СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // СтандартныеПодсистемыСвойства

&НаКлиенте
Процедура УправлениеВидимостью()
	
	Элементы.ГруппаЭтапыПроекта.Видимость = ИспользоватьПодсистемуУправленияПроектами;
	// Элементы.ГруппаДатыДеятельность.Видимость = ИспользоватьПодсистемуУправленияПроектами;
	Элементы.СтраницаЗадачи.Видимость = ИспользоватьПодсистемуУправленияПроектами;
		
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ВариантПоставкиКОРП() Тогда
		Элементы.СтраницаЗадачи.Видимость         = Ложь;
		Элементы.CRM_ТекущийЭтап.Видимость        = Ложь;
		Элементы.CRM_Планируемый.Видимость        = Ложь;
		Элементы.ИтогПоПлановымЗатратам.Видимость = Ложь;
		Элементы.ОткрытьЭтапы.Видимость           = Ложь;
		Элементы.ОткрытьЗадачиИКТ.Видимость       = Ложь;
		Элементы.ГруппаСтатусПрогноз.Видимость    = Ложь;
		Элементы.Печать.Видимость                 = Ложь;
		Элементы.Завершен.Видимость               = Истина;
	Иначе
		Если Объект.CRM_Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.Завершен")
			Или Объект.CRM_Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.Отменен") Тогда
			
			Элементы.ДеревоМодели.ТолькоПросмотр                            = Истина;
			Элементы.ДеревоМоделиКнопкаДобавитьЭтап.Доступность             = Ложь;
			Элементы.ДеревоМоделиКнопкаДобавитьЗадачу.Доступность           = Ложь;
			Элементы.ДеревоМоделиКнопкаДобавитьКонтрольнуюТочку.Доступность = Ложь;
			Элементы.ДеревоМоделиКнопкаПометитьНаУдаление.Доступность       = Ложь;
			Элементы.ДеревоМоделиКонтекстноеМенюДобавитьЭтап.Доступность    = Ложь;
			Элементы.ДеревоМоделиКонтекстноеМенюДобавитьЗадачу.Доступность  = Ложь;
			Элементы.ДеревоМоделиКонтекстноеМенюДобавитьКТ.Доступность      = Ложь;
		Иначе
			Элементы.ДеревоМодели.ТолькоПросмотр                            = Ложь;
			Элементы.ДеревоМоделиКнопкаДобавитьЭтап.Доступность             = Истина;
			Элементы.ДеревоМоделиКнопкаДобавитьЗадачу.Доступность           = Истина;
			Элементы.ДеревоМоделиКнопкаДобавитьКонтрольнуюТочку.Доступность = Истина;
			Элементы.ДеревоМоделиКнопкаПометитьНаУдаление.Доступность       = Истина;
			Элементы.ДеревоМоделиКонтекстноеМенюДобавитьЭтап.Доступность    = Истина;
			Элементы.ДеревоМоделиКонтекстноеМенюДобавитьЗадачу.Доступность  = Истина;
			Элементы.ДеревоМоделиКонтекстноеМенюДобавитьКТ.Доступность      = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если CRM_ЛицензированиеЭкспортныеМетоды.ВариантПоставкиКОРП() Тогда

		СтатусПланируется = (Объект.CRM_Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.Планируется"));
		
		Элементы.ПлановаяДатаНачала.ТолькоПросмотр                     = Не СтатусПланируется;
		Элементы.ПлановаяДатаОкончания.ТолькоПросмотр                  = Не СтатусПланируется;
		
		Элементы.ДатаНачала.Видимость    = Не СтатусПланируется;
		Элементы.ДатаОкончания.Видимость = Не СтатусПланируется;
		Элементы.CRM_Прогноз.Видимость   = Не СтатусПланируется;
		
	КонецЕсли;
	
КонецПроцедуры // УправлениеВидимостью()

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	CRM_ХранилищеНастроек.Сохранить(ИмяФормы, "РежимРедактированияМодели", РежимРедактированияМодели);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  СсылкаНаОбъект	- Ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита	- Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
КонецФункции // ПолучитьЗначениеРеквизита()

&НаКлиенте
Процедура ДекорацияДополнительныхРеквизитовОбработкаНавигационнойСсылки(Элемент, 
	НавигационнаяСсылкаФорматированнойСтроки, 
	СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	CRM_ХранилищеНастроек.Сохранить(ИмяФормы, "ПоказыватьПодсказкуДопРеквизитыПроектов", Ложь);
	Элементы.ДекорацияДополнительныхРеквизитов.Видимость = Ложь;
КонецПроцедуры

&НаСервере
Функция ПолучитьЧислоВложений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ПроектПрисоединенныеФайлы.Ссылка) КАК КоличествоФайлов
	|ИЗ
	|	Справочник.ПроектыПрисоединенныеФайлы КАК ПроектПрисоединенныеФайлы
	|ГДЕ
	|	ПроектПрисоединенныеФайлы.ВладелецФайла = &Проект
	|	И НЕ ПроектПрисоединенныеФайлы.ПометкаУдаления
	|	И НЕ ПроектПрисоединенныеФайлы.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КоличествоФайлов;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	
	Если Объект.Ссылка.Пустая() Тогда
		ВложенияПредставление = НСтр("ru='Файлы';en='Fales'");
		Возврат;
	КонецЕсли;
	
	ЧислоВложений = ПолучитьЧислоВложений();
	Если ЧислоВложений = 0 Тогда
		ВложенияПредставление = НСтр("ru='Файлы';en='Fales'");
	Иначе
		ВложенияПредставление = НСтр("ru='Файлы(';en='Fales('") + ЧислоВложений + ")"; 
	КонецЕсли;
			
КонецПроцедуры // СформироватьПредставлениеВложений()

&НаКлиенте
Процедура ОткрытьЭтапыЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("Владелец", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ОткрытьФорму("Справочник.CRM_ЭтапыПроектов.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьБизнесПроцессыЗавершение()

&НаКлиенте
Процедура ОткрытьЗадачиИКТЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("Проект", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ОткрытьФорму("Документ.CRM_ЭтапКалендарногоПлана.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФайлыЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоВложения", Истина);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
					  ПараметрыФормы, ЭтотОбъект, Ложь, Неопределено);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФайлыЗавершение()

&НаСервере
Процедура ИзменитьУсловноеОформлениеКорняДерева()
	УсловноеОформление.Элементы[0].Оформление.Элементы.Найти("Текст").Значение = Объект.Наименование; 
	ТабличныйДокументМодели.Область("R3C1").Текст = Объект.Наименование;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнтересы(Команда)
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Проект", Объект.Ссылка);
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	ОткрытьФорму("Документ.CRM_Интерес.ФормаСписка", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииИПриЧтенииНаСервере()
	
	ЗаполнитьВложения(Параметры);
	
КонецПроцедуры

#Область РаботаСВложениями

&НаКлиенте
Процедура СсылкиВложенийНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НайденныеСтроки = Вложения.НайтиСтроки(Новый Структура("ИДФайлаЭлектронногоПисьма", "#"));
	Если НайденныеСтроки.Количество() = 0 Тогда
		ДобавитьВложениеВыполнить();
	КонецЕсли;
	
	ПереключитьРежимРаботыСВложениями();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложения(ПереданныеПараметры = Неопределено)
	
	Если Объект.Ссылка.Пустая() И ПереданныеПараметры <> Неопределено Тогда
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			ТабВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(ПереданныеПараметры.ЗначениеКопирования,
				 Истина);
			Для Каждого СтрокаТаблицыВложений Из ТабВложения Цикл
				Если ПустаяСтрока(СтрокаТаблицыВложений.ИДФайлаЭлектронногоПисьма) Тогда
					НоваяСтрока = Вложения.Добавить();
					НоваяСтрока.Ссылка              = СтрокаТаблицыВложений.Ссылка;
					НоваяСтрока.ИмяФайла            = СтрокаТаблицыВложений.ИмяФайла;
					НоваяСтрока.ИндексКартинки      = СтрокаТаблицыВложений.ИндексКартинки;
					НоваяСтрока.Размер              = СтрокаТаблицыВложений.Размер;
					НоваяСтрока.РазмерПредставление = СтрокаТаблицыВложений.РазмерПредставление;
					НоваяСтрока.Расположение        = 1;
					НоваяСтрока.ИДФайлаЭлектронногоПисьмаОтбор = "#";
					НоваяСтрока.ИДФайлаЭлектронногоПисьма      = "#";
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	Иначе
		
		Вложения.Очистить();
		ТабВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Объект.Ссылка, Истина);
		Для Каждого СтрокаТаблицыВложений Из ТабВложения Цикл
			
			ИДФайлаЭлектронногоПисьма = СтрокаТаблицыВложений.ИДФайлаЭлектронногоПисьма;
			Если ПустаяСтрока(ИДФайлаЭлектронногоПисьма) Тогда
				ИДФайлаЭлектронногоПисьма = "#";
			КонецЕсли;
			
			НоваяСтрока = Вложения.Добавить();
			НоваяСтрока.Ссылка              = СтрокаТаблицыВложений.Ссылка;
			НоваяСтрока.ИмяФайла            = СтрокаТаблицыВложений.ИмяФайла;
			НоваяСтрока.ИндексКартинки      = СтрокаТаблицыВложений.ИндексКартинки;
			НоваяСтрока.Размер              = СтрокаТаблицыВложений.Размер;
			НоваяСтрока.РазмерПредставление = СтрокаТаблицыВложений.РазмерПредставление;
			НоваяСтрока.ПодписанЭП          = СтрокаТаблицыВложений.ПодписанЭП;
			НоваяСтрока.Расположение        = 0;
			НоваяСтрока.ИДФайлаЭлектронногоПисьмаОтбор = ИДФайлаЭлектронногоПисьма;
			НоваяСтрока.ИДФайлаЭлектронногоПисьма      = ИДФайлаЭлектронногоПисьма;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Вложения.Сортировать("ИмяФайла");
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВложения(Письмо)
	
	Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
		
		Размер = 0;
		ИмяФайла = СтрокаТаблицыВложений.ИмяФайла;
		
		Если СтрокаТаблицыВложений.Расположение = 4 Тогда
			// из временного хранилища
			
			ПараметрыВложения = Новый Структура;
			ПараметрыВложения.Вставить("ИмяФайла", ИмяФайла);
			ПараметрыВложения.Вставить("Размер", Размер);
			
			CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			Письмо, СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере, ПараметрыВложения);
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 3 Тогда
			// из файла на сервере
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 2 Тогда
			// из файла на компьютере
			
			ДвоичныеДанные = Новый ДвоичныеДанные(СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере);
			АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			
			ПараметрыВложения = Новый Структура;
			ПараметрыВложения.Вставить("ИмяФайла", ИмяФайла);
			ПараметрыВложения.Вставить("Размер", Размер);
			
			CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			Письмо, АдресВременногоХранилищаФайла, ПараметрыВложения);
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 1 Тогда
			
			CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
			Письмо, СтрокаТаблицыВложений.Ссылка, УникальныйИдентификатор);
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 0 Тогда
			// перезаписать вложение
			
		КонецЕсли;
		
		СтрокаТаблицыВложений.Расположение = 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСсылкиВложений()
	
	НайденныеСтроки = Вложения.НайтиСтроки(Новый Структура("ИДФайлаЭлектронногоПисьма", "#"));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		СсылкиВложений = НСтр("ru='Добавить файл';en='Add file'");
	Иначе
		СсылкиВложений = "";
		Для Каждого Строка Из НайденныеСтроки Цикл
			СсылкиВложений = СсылкиВложений + "; " + Строка.ИмяФайла + "(" + Строка.РазмерПредставление + ")";
		КонецЦикла;
		СсылкиВложений = Сред(СсылкиВложений, 3);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимРаботыСВложениями()
	
	ОтображатьТаблицуВложений = Не ОтображатьТаблицуВложений;
	CRM_ОбщегоНазначенияСервер.ХранилищеОбщихНастроекСохранить("CRM_Подписи",
		"ОтображатьТаблицуВложений", ОтображатьТаблицуВложений);
	
	Элементы.ГруппаВложения.Видимость = ОтображатьТаблицуВложений;
	Элементы.ГруппаСсылокИКомандВложений.Видимость = Не ОтображатьТаблицуВложений;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение()
	
	ОткрытьВложениеВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнить(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если (ТекущиеДанные.Расположение = 0) ИЛИ (ТекущиеДанные.Расположение = 1) Тогда
		
		Если ВзаимодействияКлиентСервер.ЭтоФайлПисьмо(ТекущиеДанные.ИмяФайла) Тогда
			
			ВзаимодействияКлиент.ОткрытьВложениеПисьмо(ТекущиеДанные.Ссылка, ПараметрыПисьмаВложения(), ЭтотОбъект);
			
		Иначе
			
			ДляРедактирования = Истина;
			
			УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(ТекущиеДанные.Ссылка,
			                                                  ЭтотОбъект,
			                                                  ДляРедактирования);
			
			Если ДляРедактирования Тогда
				ТекущиеДанные.Редактируется = Истина;
				Модифицированность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.Расположение = 2 Тогда
		
		ПутьКФайлу = ТекущиеДанные.ИмяФайлаНаКомпьютере;
			
		Если ВзаимодействияКлиентСервер.ЭтоФайлПисьмо(ТекущиеДанные.ИмяФайла) Тогда
			
			Попытка
				
				Данные = Новый ДвоичныеДанные(ТекущиеДанные.ИмяФайлаНаКомпьютере);
				
				ВзаимодействияКлиент.ОткрытьВложениеПисьмо(ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор), 
				                                           ПараметрыПисьмаВложения(),
				                                           ЭтотОбъект);
				
			Исключение
				ФайловаяСистемаКлиент.ОткрытьФайл(ПутьКФайлу);
			КонецПопытки;
		Иначе
			ФайловаяСистемаКлиент.ОткрытьФайл(ПутьКФайлу);
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.Расположение = 4 Тогда
		
		ФайловаяСистемаКлиент.ОткрытьФайл(ТекущиеДанные.ИмяФайлаНаКомпьютере, , ТекущиеДанные.ИмяФайла);
		
	ИначеЕсли ТекущиеДанные.Расположение = 5 Тогда
		
		ПараметрыВложения = ВзаимодействияКлиент.ПараметрыПисьмаВложения();
		ПараметрыВложения.ДатаПисьмаОснования = ?(ЗначениеЗаполнено(Объект.ДатаОтправления),
			 Объект.ДатаОтправления ,
			 Объект.Дата);
		ПараметрыВложения.ПисьмоОснование     = Объект.Ссылка;
		ПараметрыВложения.ТемаПисьмаОснования = Объект.Тема;
		
		ВзаимодействияКлиент.ОткрытьВложениеПисьмо(ТекущиеДанные.Письмо,
		                                           ПараметрыПисьмаВложения(),
		                                           ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьВложениеВБуферОбменаВыполнить(Команда)
	
	ВыделенныеСтроки = Элементы.Вложения.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	Для Каждого Стр Из ВыделенныеСтроки Цикл
		
		ТекущееВложение = Вложения.НайтиПоИдентификатору(Стр);
		Если ЗначениеЗаполнено(ТекущееВложение.Ссылка) Тогда
			МассивСсылок.Добавить(ТекущееВложение.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	CRM_ПрисоединенныеФайлы.СкопироватьФайлыВБуфер(МассивСсылок);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Копирование в буфер обмена'"), Окно.ПолучитьНавигационнуюСсылку(), 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Скопировано файлов: %1'"), МассивСсылок.Количество()));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеВыполнить()
	
	ОписаниеОповещение = Новый ОписаниеОповещения("ДиалогВыбораФайловПослеВыбора", ЭтотОбъект);
	ФайловаяСистемаКлиент.ЗагрузитьФайлы(ОписаниеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогВыбораФайловПослеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавленоФайлов = 0;
	Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
		
		ДанныеФайла = ПолучитьИзВременногоХранилища(ВыбранныйФайл.Хранение);
		Размер = ДанныеФайла.Размер();
		Расширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ВыбранныйФайл.ИмяФайла);
		
		РезультатПроверки = CRM_ВзаимодействияВызовСервера.ПроверитьВозможностьЗагрузкиВложения(ВыбранныйФайл.ИмяФайла,
			 Размер,
			 Расширение);
		Если РезультатПроверки.Ошибка Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.ОписаниеОшибки);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Вложения.Добавить();
		
		#Если ВебКлиент Тогда
			НоваяСтрока.Расположение = 4;
			НоваяСтрока.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(ДанныеФайла);
		#Иначе
			НоваяСтрока.Расположение = 2;
			НоваяСтрока.ИмяФайлаНаКомпьютере = ВыбранныйФайл.ПолноеИмя;
		#КонецЕсли
		
		НоваяСтрока.ИмяФайла = ВыбранныйФайл.ИмяФайла;
		
		НоваяСтрока.ИндексКартинки      = РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(Расширение);
		НоваяСтрока.РазмерПредставление = CRM_ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(Размер); 
		
		НоваяСтрока.ИДФайлаЭлектронногоПисьмаОтбор = "#";
		НоваяСтрока.ИДФайлаЭлектронногоПисьма = "#";
		
		ДобавленоФайлов = ДобавленоФайлов + 1;
		
	КонецЦикла;
	
	Если ДобавленоФайлов > 0 Тогда
		Элементы.Вложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Модифицированность = Истина;
		ОбновитьОтображениеДанных();
		СформироватьСсылкиВложений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьФайлИзБуфераОбменаВыполнить()
	
	Если НЕ CRM_ПрисоединенныеФайлы.БуферЗаполненФайлами() Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Вставка из буфера обмена'"), Окно.ПолучитьНавигационнуюСсылку(), 
										НСтр("ru = 'Буфер обмена пуст'"));
		Возврат;	
	КонецЕсли;
	
	МассивСсылокНаФайлы = CRM_ПрисоединенныеФайлы.МассивСсылокИзБуфера();
	
	ДобавленоФайлов = 0;
	Для Каждого СсылкаНаФайл Из МассивСсылокНаФайлы Цикл
		
		ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ПараметрыДанныхФайла.ИдентификаторФормы = УникальныйИдентификатор;
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(СсылкаНаФайл,, ПараметрыДанныхФайла);
		
		
		НоваяСтрока = Вложения.Добавить();
		
		НоваяСтрока.Расположение = 4;
		НоваяСтрока.ИмяФайлаНаКомпьютере = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		
		НоваяСтрока.ИмяФайла		= ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
		НоваяСтрока.Размер = ДанныеФайла.Размер;
		
		НоваяСтрока.ИндексКартинки	= РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(ДанныеФайла.Расширение);
		НоваяСтрока.РазмерПредставление = CRM_ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(ДанныеФайла.Размер); 
		
		НоваяСтрока.ИДФайлаЭлектронногоПисьмаОтбор = "#";
		НоваяСтрока.ИДФайлаЭлектронногоПисьма = "#";
		
		ДобавленоФайлов = ДобавленоФайлов + 1;
		
	КонецЦикла;
	
	Если ДобавленоФайлов > 0 Тогда
		Элементы.Вложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Модифицированность = Истина;
		ОбновитьОтображениеДанных();
		СформироватьСсылкиВложений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьВБуферВсеВложениеВыполнить(Команда)
	
	МассивСсылок = Новый Массив;
	Для Каждого Вложение Из Вложения Цикл
		МассивСсылок.Добавить(Вложение.Ссылка);
	КонецЦикла;
	
	CRM_ПрисоединенныеФайлы.СкопироватьФайлыВБуфер(МассивСсылок);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Копирование в буфер обмена'"), Окно.ПолучитьНавигационнуюСсылку(), 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Скопировано файлов: %1'"), МассивСсылок.Количество()));
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложениеВыполнить(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.Расположение = 0 Тогда
		УдаленныеВложения.Добавить(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	Индекс = Вложения.Индекс(ТекущиеДанные);
	Вложения.Удалить(Индекс);
	
	Модифицированность = Истина;
	ОбновитьОтображениеДанных();
	СформироватьСсылкиВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЭтоФайлПослеЗавершения(ЭтоФайл, ДополнительныеПараметры) Экспорт

	Если НЕ ЭтоФайл Тогда
		Возврат;
	КонецЕсли;
	
	Файл = ДополнительныеПараметры.ВыбранныйФайл;
	Размер = Файл.Размер();
	Расширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(Файл.Имя);
	
	РезультатПроверки = CRM_ВзаимодействияВызовСервера.ПроверитьВозможностьЗагрузкиВложения(Файл.Имя, Размер, Расширение);
	Если РезультатПроверки.Ошибка Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Вложения.Добавить();
	НоваяСтрока.Расположение = 2;
	НоваяСтрока.ИмяФайлаНаКомпьютере = Файл.ПолноеИмя;
	
	НоваяСтрока.ИмяФайла = Файл.Имя;
	
	НоваяСтрока.ИндексКартинки      = РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(Расширение);
	НоваяСтрока.РазмерПредставление = CRM_ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(Размер); 
	
	НоваяСтрока.ИДФайлаЭлектронногоПисьмаОтбор = "#";
	НоваяСтрока.ИДФайлаЭлектронногоПисьма = "#";
	
	Модифицированность = Истина;
	ОбновитьОтображениеДанных();
	СформироватьСсылкиВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвойстваВложения(ТекущийИндексВКоллекции)
	
	ТекущиеДанные = Вложения.Получить(ТекущийИндексВКоллекции);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.Вложения.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
		
	ФайлДоступенДляРедактирования = Истина;
	ПараметрыФормы = Новый Структура("ПрисоединенныйФайл, ТолькоПросмотр", 
		ТекущиеДанные.Ссылка, НЕ ФайлДоступенДляРедактирования);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныйФайл", ПараметрыФормы, , ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОЗаписиФайлаПослеЗакрытия(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьСвойстваВложения(ДополнительныеПараметры.ТекущийИндексВКоллекции);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПисьмаВложения()
	
	ПараметрыВложения = ВзаимодействияКлиент.ПараметрыПисьмаВложения();
	ПараметрыВложения.ДатаПисьмаОснования = ?(ЗначениеЗаполнено(Объект.ДатаОтправления),
		 Объект.ДатаОтправления ,
		 Объект.Дата);
	ПараметрыВложения.ПисьмоОснование     = Объект.Ссылка;
	ПараметрыВложения.ТемаПисьмаОснования = Объект.Тема;
	
	Возврат ПараметрыВложения;
	
КонецФункции

&НаКлиенте
Процедура СохранитьВложениеВыполнить(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если (ТекущиеДанные.Расположение = 0) ИЛИ (ТекущиеДанные.Расположение = 1) Тогда
		CRM_УправлениеЭлектроннойПочтойКлиент.СохранитьВложение(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	ИначеЕсли ТекущиеДанные.Расположение = 2 Тогда
		
	ИначеЕсли ТекущиеДанные.Расположение = 4 Тогда
		ФайлВложения = Новый Файл(ТекущиеДанные.ИмяФайла);
		РасширениеВложения = ?(ПустаяСтрока(ФайлВложения.Расширение), ФайлВложения.Расширение,
			 Прав(ФайлВложения.Расширение,
			 СтрДлина(ФайлВложения.Расширение) - 1));
		Если РасширениеВложения = "EML" Тогда
			ПоказатьПредупреждение(, НСтр("ru='Это вложение не может быть сохранено.'"));
			Возврат;
		КонецЕсли;
		ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Неопределено);
		СтруктураДанных = Новый Структура("РасширениеВложения, текДанные", РасширениеВложения, ТекущиеДанные);
		ОповещениеНовое = Новый ОписаниеОповещения("СохранитьВложениеЗавершение", ЭтотОбъект, СтруктураДанных);
		НачатьПодключениеРасширенияРаботыСФайлами(ОповещениеНовое);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	РасширениеВложения = ДополнительныеПараметры.РасширениеВложения;
	текДанные = ДополнительныеПараметры.текДанные;
		
	Если Подключено Тогда
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = текДанные.ИмяФайла;
		ВыборФайла.Расширение = РасширениеВложения;
		ВыборФайла.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Все файлы (*.%1)|*.%1'"), РасширениеВложения, РасширениеВложения);
		СтруктураДанных = Новый Структура("ВыборФайла, текДанные", ВыборФайла, текДанные);
		ОповещениеНовое = Новый ОписаниеОповещения("СохранитьВложениеЗавершениеВыборФайла", ЭтотОбъект, СтруктураДанных);
		ВыборФайла.Показать(ОповещениеНовое);
	Иначе
		#Если ВебКлиент Тогда
			ПолучитьФайл(текДанные.ИмяФайлаНаКомпьютере, текДанные.ИмяФайла, Истина);
		#КонецЕсли
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеЗавершениеВыборФайла(ВыбранныеФайлы, ДополнительныеПараметры1) Экспорт
	
	ВыборФайла = ДополнительныеПараметры1.ВыборФайла;
	текДанные = ДополнительныеПараметры1.текДанные;
		
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Выполняется сохранение файла ""%1"" ...
		         |Пожалуйста, подождите.'"), текДанные.ИмяФайла);
		Состояние(ТекстПояснения);
		ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ВыборФайла.ПолноеИмяФайла, текДанные.ИмяФайлаНаКомпьютере);
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
		ПолученныеФайлы = Новый Массив;
		СтруктураДанных = Новый Структура("ВыборФайла", ВыборФайла);
		ОповещениеНовое = Новый ОписаниеОповещения("СохранитьВложениеЗавершениеПолучитьФайлы", ЭтотОбъект, СтруктураДанных);
		НачатьПолучениеФайлов(ОповещениеНовое, ПолучаемыеФайлы, ВыборФайла, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеЗавершениеПолучитьФайлы(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыборФайла = ДополнительныеПараметры.ВыборФайла;
		
	Если ПолученныеФайлы.Количество() > 0 Тогда
		Состояние(НСтр("ru='Файл успешно сохранен'"), , ВыборФайла.ПолноеИмяФайла);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ЭтотОбъектИзменен()
	Возврат Объект.ВерсияДанных <> Объект.Ссылка.ВерсияДанных;
КонецФункции

#Область РаботаСЭтапами

&НаСервере
Процедура КалендарныеГрафикиПриЧтенииСозданииНаСервере()

	СоответствиеКоллекцииКартинок = Новый Соответствие;
	СоответствиеКоллекцииКартинок.Вставить(1, БиблиотекаКартинок.CRM_ЭтапПроцесса);
	СоответствиеКоллекцииКартинок.Вставить(0, БиблиотекаКартинок.CRM_ЭтапПроцессаСвязи);
	СоответствиеКоллекцииКартинок.Вставить(3, БиблиотекаКартинок.CRM_КонтрольнаяТочкаПроцесса);
	СоответствиеКоллекцииКартинок.Вставить(2, БиблиотекаКартинок.CRM_КонтрольнаяТочкаПроцессаСвязи);
	
	СоответствиеКоллекцииКартинокТипаЭтапа = Новый ФиксированноеСоответствие(СоответствиеКоллекцииКартинок);
	
	// Цвета интервалов Ганта
	ЦветИнтервалаЭтапаПлан		      = ЦветаСтиля.CRM_ЦветИнтервалаЭтапаПлан;
	ЦветИнтервалаЭтапаФакт		      = ЦветаСтиля.CRM_ЦветИнтервалаЭтапаФакт;
	ЦветИнтервалаКонтрольнойТочкиПлан = ЦветаСтиля.CRM_ЦветИнтервалаКонтрольнойТочкиПлан;
	ЦветИнтервалаКонтрольнойТочкиФакт = ЦветаСтиля.CRM_ЦветИнтервалаКонтрольнойТочкиФакт;
	ЦветИнтервалаПакетаПлан			  = ЦветаСтиля.CRM_ЦветИнтервалаПакетаПлан;
	ЦветИнтервалаПакетаФакт 		  = ЦветаСтиля.CRM_ЦветИнтервалаПакетаФакт;
	ЦветНавигации					  = ЦветаСтиля.ЦветНавигации;
	ЦветФонаПоля					  = ЦветаСтиля.ЦветФонаПоля;
	
	Если НЕ ЗначениеЗаполнено(РежимРедактированияМодели) Тогда
		времРежимРедактированияМодели = CRM_ХранилищеНастроек.Загрузить(ИмяФормы, "РежимРедактированияМодели");
		РежимРедактированияМодели = ?(НЕ ЗначениеЗаполнено(времРежимРедактированияМодели), "Дерево", 
			времРежимРедактированияМодели);
	КонецЕсли;
	
	ПрочитатьДанныеМоделиПроцесса();
	
	УстановитьРежимРедактирования(ЭтотОбъект);
	
	Если РежимРедактированияМодели = "Графически" Тогда
	
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();

		ИнициализироватьТабличныйДокументМодели();
		// Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		//	ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, СтрокаДерева.ПолучитьЭлементы());
		// КонецЦикла;
		ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, ЭлементыДерева);
		
		ОбновитьДиаграмму();
		ВывестиКартинкиВТабличныйДокументНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // КалендарныеГрафикиПриЧтенииСозданииНаСервере()

&НаСервере
Процедура ВывестиКартинкиВТабличныйДокументНаСервере()
	
	// Не возможно вывести на клиенте для Веб-клинта (ряд методов не документированы и для тонкого клиента)
	Выполнять = Истина;
	
	Для НомерСтроки = 2 По ТабличныйДокументМодели.ВысотаТаблицы Цикл
		
		ОбластьРедактирования = ТабличныйДокументМодели.Область(НомерСтроки, 1);
		
		ОтступСтроки = ТабличныйДокументМодели.Область(НомерСтроки, 1).Отступ;
		Если СокрЛП(ОбластьРедактирования.Текст) = "" Тогда
			Прервать;
		КонецЕсли;
		
		НетКартинкиСвернуть = Истина;
		// Выведем картинку группировки, если нужно
		Если ТабличныйДокументМодели.Область(НомерСтроки + 1, 1).Отступ > ОтступСтроки Тогда
			// Свернуть/Развернуть
			
			// ОбластьРедактирования.Отступ = ОбластьРедактирования.Отступ + 1;
			
			ОбластьКартинка = ТабличныйДокументМодели.Область("R" + НомерСтроки + "C8");
			РисунокСвернутьРазвернуть = ТабличныйДокументМодели.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
			РисунокСвернутьРазвернуть.Имя = "R" + Формат(ОбластьРедактирования.Низ, "ЧН=0; ЧГ=") + "_Свернуть";
			
			РисунокСвернутьРазвернуть.Картинка = БиблиотекаКартинок.CRM_Свернуть;
			
			РисунокСвернутьРазвернуть.Расположить(ОбластьРедактирования);
			РисунокСвернутьРазвернуть.РазмерКартинки = РазмерКартинки.Пропорционально;
			РисунокСвернутьРазвернуть.Линия 		 = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
			РисунокСвернутьРазвернуть.Лево  		 = РисунокСвернутьРазвернуть.Лево + 0.5 + (ОбластьРедактирования.Отступ - 2) * 1.5;
			РисунокСвернутьРазвернуть.Верх  		 = РисунокСвернутьРазвернуть.Верх + 2.5;
			РисунокСвернутьРазвернуть.Ширина 		 = 3;
			РисунокСвернутьРазвернуть.Высота 		 = 3;
			РисунокСвернутьРазвернуть.ЦветФона		 = ОбластьРедактирования.ЦветФона;
			
			ОбластьРедактирования.Отступ = ОбластьРедактирования.Отступ + 2;
			НетКартинкиСвернуть = Ложь;
		КонецЕсли;
		
		// Выведем картинку документа
		Если НетКартинкиСвернуть Тогда
			ОбластьРедактирования.Отступ = ОбластьРедактирования.Отступ + 2;
		КонецЕсли;
		
		ИндексКартинки = -1;
		Расшифровка = ОбластьРедактирования.Расшифровка;
		Если ТипЗнч(Расшифровка) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
			ИндексКартинки = 0;
		ИначеЕсли ТипЗнч(Расшифровка) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
			ИндексКартинки = ?(Расшифровка.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.Этап, 1, 3);
		КонецЕсли;
		
		Картинка = СоответствиеКоллекцииКартинокТипаЭтапа.Получить(ИндексКартинки);
		
		Если Картинка <> Неопределено Тогда
			// ОбластьРедактирования.Отступ = ОбластьРедактирования.Отступ + 2;
			
			Рисунок = ТабличныйДокументМодели.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
			Рисунок.Картинка = Картинка;
			
			Рисунок.Имя = "R" + Формат(ОбластьРедактирования.Низ, "ЧН=0; ЧГ=") + "_ТипЭтапа";
			
			Рисунок.Расположить(ОбластьРедактирования);
			Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
			Рисунок.Линия 		   = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
			Рисунок.Лево  		   = Рисунок.Лево + 2 + (ОбластьРедактирования.Отступ - 2) * 1.5;
			Рисунок.Верх  		   = Рисунок.Верх + 2.1;
			Рисунок.Ширина 		   = 3.5;
			Рисунок.Высота 		   = 3.5;
			Рисунок.ЦветФона	   = ОбластьРедактирования.ЦветФона;
			
			ОбластьРедактирования.Отступ = ОбластьРедактирования.Отступ + 2;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиКартинкиВТабличныйДокумент()

&НаСервере
Процедура ОбновитьДиаграмму()
	
	День = 86400;
	МаксимальнаяДата = NULL;
	МинимальнаяДата  = NULL;
	Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	
	ДиаграммаРисунок = ТабличныйДокументМодели.Рисунки["ДиаграммаГанта"];
	ДиаграммаРисунок.Расположить(ТабличныйДокументМодели.Область(1,
		 Число(СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ДиаграммаГанта").Представление),
								 ТабличныйДокументМодели.ВысотаТаблицы, Число(СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ДиаграммаГанта").Представление)));
	
	ДиаграммаОбъект = ДиаграммаРисунок.Объект;
	ДиаграммаОбъект.ОтображениеТекстаЗначения = ОтображениеТекстаЗначенияДиаграммыГанта.Право;
	ДиаграммаОбъект.Обновление = Ложь;
	ДиаграммаОбъект.Анимация = АнимацияДиаграммы.НеИспользовать;
	
	ДиаграммаОбъект.Очистить();

	ДиаграммаОбъект.ОтображениеИнтервала  = ОтображениеИнтервалаДиаграммыГанта.Градиент;
	
	ДатаНачала = НачалоДня(Объект.ПлановаяДатаНачала);
	
	СерияПлан = ДиаграммаОбъект.Серии.Добавить();
	СерияФакт = ДиаграммаОбъект.Серии.Добавить();
	
	СерияПлан.ШтриховкаМеждуИнтервалами = Ложь;
	СерияФакт.ШтриховкаМеждуИнтервалами = Ложь;
	
	Для Сч = 3 По ТабличныйДокументМодели.ВысотаТаблицы Цикл
		СтрокаОбласти = "R" + Формат(Сч, "ЧН=0; ЧГ=");
		
		НомерКолонки = СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ИдентификаторСтрокиДерева").Представление;
		ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C" + НомерКолонки);
		
		ДанныеСтрокиДерева = ДеревоМодели.НайтиПоИдентификатору(ОбластьИдентификатора.Расшифровка);
		Если ДанныеСтрокиДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НачалоПлан = ДанныеСтрокиДерева.ПлановаяДатаНачала;
		НачалоФакт = ДанныеСтрокиДерева.ФактическаяДатаНачала;
		
		Если ДанныеСтрокиДерева.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
			ОкончаниеПлан = ?(НачалоПлан = '00010101', НачалоПлан, КонецДня(НачалоПлан));
			ОкончаниеФакт = ?(НачалоФакт = '00010101', НачалоФакт, КонецДня(НачалоФакт));
		Иначе
			Если ДанныеСтрокиДерева.ПлановаяДатаОкончания = '00010101' Тогда
				ОкончаниеПлан = ДанныеСтрокиДерева.ПлановаяДатаОкончания;
			Иначе
				ОкончаниеПлан = КонецДня(ДанныеСтрокиДерева.ПлановаяДатаОкончания);
			КонецЕсли;
			
			Если ДанныеСтрокиДерева.ФактическаяДатаОкончания = '00010101' Тогда
				ОкончаниеФакт = ДанныеСтрокиДерева.ФактическаяДатаОкончания;
			Иначе
				ОкончаниеФакт = КонецДня(ДанныеСтрокиДерева.ФактическаяДатаОкончания);
			КонецЕсли;
		КонецЕсли;
		
		МассивИнтерваловПлан = ПолучитьМассивИнтерваловЭтапа(НачалоПлан, ОкончаниеПлан);
		МассивИнтерваловФакт = ПолучитьМассивИнтерваловЭтапа(НачалоФакт, ОкончаниеФакт);
		
		ИдентифкаторТочки = ДанныеСтрокиДерева.ИдентификаторСтроки;
		
		Родитель = ДанныеСтрокиДерева.ПолучитьРодителя();
		Если Родитель <> Неопределено Тогда 
			ИдентифкаторТочкиРодителя = Родитель.ИдентификаторСтроки;
		КонецЕсли;
		
		Точка = ДиаграммаОбъект.УстановитьТочку(ИдентифкаторТочки, ИдентифкаторТочкиРодителя);
		Точка.Текст = " ";
		ЗначениеПлан = ДиаграммаОбъект.ПолучитьЗначение(Точка, СерияПлан);
		ЗначениеПлан.Очистить();
		
		ЗначениеФакт = ДиаграммаОбъект.ПолучитьЗначение(Точка, СерияФакт);
		ЗначениеФакт.Очистить();
		
		Этап = ДанныеСтрокиДерева.Этап;
		
		Если ТипЗнч(Этап) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") 
				И Этап.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Отменена Тогда
			Продолжить;
		КонецЕсли;
		
		// Если надо, корректируем максимальную и минимальную даты.
		Если МаксимальнаяДата = NULL 
		  ИЛИ МаксимальнаяДата < НачалоПлан + (ОкончаниеПлан - НачалоПлан) Тогда
			МаксимальнаяДата = НачалоПлан + (ОкончаниеПлан - НачалоПлан);
		КонецЕсли;
		
		Если МаксимальнаяДата < НачалоФакт + (ОкончаниеФакт - НачалоФакт) Тогда
			МаксимальнаяДата = НачалоФакт + (ОкончаниеФакт - НачалоФакт);
		КонецЕсли;
		
		Если МинимальнаяДата = NULL Или МинимальнаяДата > НачалоПлан Тогда
			МинимальнаяДата = НачалоПлан;
		КонецЕсли;
		
		Если МинимальнаяДата > НачалоФакт Тогда
			МинимальнаяДата = НачалоФакт;
		КонецЕсли;
		
		ЗначениеПлан.Редактирование = Истина;
		ЗначениеФакт.Редактирование = Истина;
		
		// Вывод плана
		Если ЗначениеЗаполнено(НачалоПлан) И ЗначениеЗаполнено(ОкончаниеПлан) Тогда
			
			ЦветИнтервалаПланЗначение = Неопределено;
			Если ТипЗнч(Этап) <> Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана")  Тогда
				
				ЦветИнтервалаПланЗначение = ЦветИнтервалаПакетаПлан;
					
			ИначеЕсли ТипЗнч(Этап) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана")  Тогда
			
				Если ДанныеСтрокиДерева.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
					Если НачалоПлан < ТекущаяДатаСеанса() И НЕ ЗначениеЗаполнено(Этап.ФактическаяДатаНачала) Тогда
						ЦветИнтервалаПланЗначение = Новый Цвет(255, 0, 0); // красный, просрочено
					Иначе
						ЦветИнтервалаПланЗначение = ЦветИнтервалаКонтрольнойТочкиПлан;
					КонецЕсли; 
					
				Иначе
					Если НЕ ЗначениеЗаполнено(Этап.ФактическаяДатаНачала) И ОкончаниеПлан < ТекущаяДатаСеанса() Тогда
						ЦветИнтервалаПланЗначение = Новый Цвет(255, 0, 0); // красный, просрочено
						
					ИначеЕсли НЕ ЗначениеЗаполнено(Этап.ФактическаяДатаОкончания) И ЗначениеЗаполнено(Этап.ФактическаяДатаНачала) 
							  И Этап.ФактическаяДатаНачала + (Этап.ПлановаяДлительность - 1) * День < ТекущаяДатаСеанса() Тогда
						ЦветИнтервалаПланЗначение = Новый Цвет(255, 0, 0); // красный, просрочено
						
					Иначе
						ЦветИнтервалаПланЗначение = ЦветИнтервалаЭтапаПлан;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Для Каждого ТекИнтервал Из МассивИнтерваловПлан Цикл
				ИнтервалПлан = ЗначениеПлан.Добавить();
				ИнтервалПлан.Начало = ТекИнтервал.Начало;
				ИнтервалПлан.Конец  = ТекИнтервал.Конец;
				ИнтервалПлан.Цвет   = ЦветИнтервалаПланЗначение;
			КонецЦикла;
			
		КонецЕсли;
		
		// Вывод факта
		Если ЗначениеЗаполнено(НачалоФакт) И ЗначениеЗаполнено(ОкончаниеФакт) Тогда
			
			ЦветИнтервалаФактЗначение = Неопределено;
			Если ТипЗнч(Этап) <> Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана")  Тогда
				
				ЦветИнтервалаФактЗначение = ЦветИнтервалаПакетаФакт;
				
			ИначеЕсли ТипЗнч(Этап) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана")  Тогда
					
				Если ДанныеСтрокиДерева.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
					ЦветИнтервалаФактЗначение = ЦветИнтервалаКонтрольнойТочкиФакт;
				Иначе
					ЦветИнтервалаФактЗначение = ЦветИнтервалаЭтапаФакт;
				КонецЕсли;
					
			КонецЕсли;
			
			Для Каждого ТекИнтервал Из МассивИнтерваловФакт Цикл
				ИнтервалФакт = ЗначениеФакт.Добавить();
				ИнтервалФакт.Начало = ТекИнтервал.Начало;
				ИнтервалФакт.Конец  = ТекИнтервал.Конец;
				ИнтервалФакт.Цвет   = ЦветИнтервалаФактЗначение;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Количество() > 0 Тогда
		ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Получить(0).Видимость = Ложь;
		Пока ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Количество() > 1 Цикл
			ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Удалить(ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Получить(1));
		КонецЦикла;
	КонецЕсли;
		
	ШиринаКолонки = ДиаграммаРисунок.Ширина;
	Попытка
		Дни = (МаксимальнаяДата - МинимальнаяДата) / День;
	Исключение
		Дни = 7;
	КонецПопытки;
	Если Не ((ШиринаКолонки >= 283 И Дни <= 78)  ИЛИ 
		 (ШиринаКолонки >= 181 И Дни <= 58)  ИЛИ 
		 (ШиринаКолонки >= 140 И Дни <= 48)  ИЛИ 
		 (ШиринаКолонки >= 74 И Дни <= 38)  ИЛИ 
		 (ШиринаКолонки >= 85 И Дни <= 33)  ИЛИ 
		 (ШиринаКолонки >= 38 И Дни <= 29)  ИЛИ 
		 (ШиринаКолонки >= 48 И Дни <= 31)  ИЛИ 
		 (ШиринаКолонки >= 85 И Дни <= 33)  ИЛИ 
		  (ШиринаКолонки >= 555 И Дни <= 133))
		Тогда
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.Месяц;
		ЭлементШкалы.ЛинииДелений = Новый Линия( ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.Неделя;
		ЭлементШкалы.Формат	= "ДФ='ddd d'";
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
	Иначе
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.Неделя;
		ЭлементШкалы.ЛинииДелений = Новый Линия( ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.День;
		ЭлементШкалы.ФорматДня = ФорматДняШкалыВремени.ДеньНедели;
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
	КонецЕсли;
	
	ДиаграммаОбъект.ПоказатьУровеньТочек(0); 
	ПолосаРегулированияШириныДиаграммыГанта =
		ТабличныйДокументМодели.Область("Служебная_ДиаграммаГанта").ШиринаКолонки / 2;
	
	ДиаграммаОбъект.РастягиваниеПоВертикали = РастягиваниеПоВертикалиДиаграммыГанта.РастягиватьСтрокиИДанные;
	ДиаграммаОбъект.Обновление = Истина;
	
КонецПроцедуры // ОбновитьДиаграмму()

&НаСервере
Функция ПолучитьМассивИнтерваловЭтапа(ДатаНачала, ДатаОкончания)
	
	МассивИнтервалов = Новый Массив;
	
	Если Объект.CRM_УчитыватьПроизводственныйКалендарь Тогда
		
		СписокДат = CRM_КалендарныеГрафики.ПолучитьРабочиеДниПериода(ДатаНачала, ДатаОкончания);
		
		СтруктураИнтервала = Новый Структура("Начало, Конец");
		ДатаЭлемента = '00010101';
		Для Каждого ТекЭлемент Из СписокДат Цикл
			
			Если СтруктураИнтервала.Начало = Неопределено Тогда
				СтруктураИнтервала.Начало = ТекЭлемент.Значение;
			КонецЕсли;
			
			ИндексСледующего = СписокДат.Индекс(ТекЭлемент) + 1;
			Если ИндексСледующего = СписокДат.Количество() Тогда
				СтруктураИнтервала.Конец = КонецДня(ТекЭлемент.Значение);
				МассивИнтервалов.Добавить(СтруктураИнтервала);
				Прервать;
			КонецЕсли;
			
			СледЭлемент = СписокДат[ИндексСледующего];
			Если (СледЭлемент.Значение - ТекЭлемент.Значение) > 86400 Тогда
				СтруктураИнтервала.Конец = КонецДня(ТекЭлемент.Значение);
				МассивИнтервалов.Добавить(СтруктураИнтервала);
				СтруктураИнтервала = Новый Структура("Начало, Конец");
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		СтруктураИнтервала = Новый Структура("Начало, Конец");
		СтруктураИнтервала.Начало = ДатаНачала;
		СтруктураИнтервала.Конец  = ДатаОкончания;
		МассивИнтервалов.Добавить(СтруктураИнтервала);
		
	КонецЕсли;
	
	Возврат МассивИнтервалов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеТабличногоДокументаРекурсивно(Форма, ЭлементыДерева, ТекущийИдентификатор = Неопределено)

	ОбластьЭталон = Форма.ТабличныйДокументМодели.Область(2, 1, 2, 1);
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		СтрокаДерева.АдресСтрокиОбласти = "";
		ЗаполнитьДанныеСтрокиТабличногоДокументаМодели(Форма, СтрокаДерева, ОбластьЭталон, ТекущийИдентификатор);
		ЗаполнитьДанныеТабличногоДокументаРекурсивно(Форма, СтрокаДерева.ПолучитьЭлементы(), ТекущийИдентификатор);
		
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьДанныеТабличногоДокументаРекурсивно()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеСтрокиТабличногоДокументаМодели(Форма, СтрокаДерева, 
		ОбластьЭталон = Неопределено, 
		ТекущийИдентификатор = Неопределено)
	
	ТабличныйДокументМодели = Форма.ТабличныйДокументМодели;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.АдресСтрокиОбласти) Тогда
		СтрокаОбласти = "R" + Формат(ТабличныйДокументМодели.ВысотаТаблицы + 1, "ЧН=0; ЧГ=");
		СтрокаДерева.АдресСтрокиОбласти = СтрокаОбласти;
		
	Иначе
		СтрокаОбласти = СтрокаДерева.АдресСтрокиОбласти;
		
	КонецЕсли;
	
	// Оформление
	ОбластьСтроки = Форма.ТабличныйДокументМодели.Область(СтрокаОбласти);
	ЦветФона = Новый Цвет(255, 255, 255); // для веб-клиента необходимо явно указанть цвет
	
	Для Сч = 1 По Форма.СписокОбластейТабличногоДокумента.Количество() - 1 Цикл  // по всем выведенным колонкам, кроме последней (в которой гант)
		ОбластьРедактирования = Форма.ТабличныйДокументМодели.Область(СтрокаОбласти + "C" + Формат(Сч, "ЧН=0; ЧГ="));
		ОбластьРедактирования.ЦветФона = ЦветФона;
	КонецЦикла;
		
	ОбластьРедактирования = Форма.ТабличныйДокументМодели.Область(СтрокаОбласти + "C1"); // Этап всегда первая колонка С1
	ОбластьРедактирования.Отступ = 2;
		
	Родитель = СтрокаДерева.ПолучитьРодителя();
	Если Родитель <> Неопределено  Тогда
		// И ЗначениеЗаполнено(Родитель.ИдентификаторСтроки) Тогда
		ОбластьДобавленияРодитель = ТабличныйДокументМодели.Область(Родитель.АдресСтрокиОбласти 
			+ "C1"); // Этап всегда первая колонка С1
		
		// Отрисуем иерархию
		ОбластьРедактирования.Отступ = ОбластьДобавленияРодитель.Отступ + 2;
		
	КонецЕсли;
	
	Идентификатор = СтрокаДерева.ПолучитьИдентификатор();
	
	// Этап

	ОбластьРедактированияШрифт 	 = Новый Шрифт(, 8);
	Если ЗначениеЗаполнено(СтрокаДерева.Этап) Тогда
		
		ОбластьРедактирования.Текст 	  = СтрокаДерева.Этап;
		ОбластьРедактирования.Расшифровка = СтрокаДерева.Этап;
		
		Если ТипЗнч(СтрокаДерева.Этап) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") 
				И ПолучитьЗначениеРеквизита(СтрокаДерева.Этап,
					 "Статус") = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Отменена") Тогда
				
			ОбластьРедактированияШрифт 	 = Новый Шрифт(, 8, , , , Истина);
			ОбластьРедактирования.ЦветТекста = Новый Цвет(128, 128, 128);
			
		ИначеЕсли ТипЗнч(СтрокаДерева.Этап) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") 
				И ПолучитьЗначениеРеквизита(СтрокаДерева.Этап,
					 "Статус") = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Проверена") Тогда
				
			ОбластьРедактированияШрифт 	 = Новый Шрифт(, 8);
			
		ИначеЕсли СтрокаДерева.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиВзаимодействия.Высокая") Тогда
			ОбластьРедактированияШрифт 	 = Новый Шрифт(, 8, Истина);
		ИначеЕсли СтрокаДерева.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиВзаимодействия.Низкая") Тогда
			ОбластьРедактирования.ЦветТекста = Новый Цвет(160, 160, 160);
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.Этап)
			 И ТипЗнч(СтрокаДерева.Этап) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
			ОбластьРедактированияШрифт = Новый Шрифт(, 9, Истина);
		КонецЕсли;
		
	Иначе
		ОбластьРедактированияШрифт = Новый Шрифт(, 9, Истина);
		ОбластьРедактирования.Текст = Форма.Объект.Наименование;
	КонецЕсли;
	ОбластьРедактирования.Шрифт = ОбластьРедактированияШрифт;
	
	ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, ОбластьЭталон);
	
	Если Идентификатор = ТекущийИдентификатор Тогда
		Форма.Элементы.ТабличныйДокументМодели.ТекущаяОбласть = ОбластьРедактирования;
	
	КонецЕсли;
		
	// Заполнение данных настроенных колонок
	
	Для каждого ЗначениеСписка Из Форма.СписокОбластейТабличногоДокумента Цикл
		
		ИмяОбласти = ЗначениеСписка.Значение;
		Если СтрНайти(ВРег(ИмяОбласти), "СЛУЖЕБНАЯ_") Тогда
			Продолжить;
		КонецЕсли;
		
		НомерКолонки = Форма.СписокОбластейТабличногоДокумента.НайтиПоЗначению(ИмяОбласти).Представление;
		ОбластьРедактирования = ТабличныйДокументМодели.Область(СтрокаОбласти + "C" + НомерКолонки);
		ОбластьРедактирования.Расшифровка 	   = ИмяОбласти;
		
		Если НЕ (ИмяОбласти = "Сделано" И ТипЗнч(СтрокаДерева.Этап) = Тип("СправочникСсылка.CRM_ЭтапыПроектов")) Тогда
			
			ОбластьРедактирования.СодержитЗначение = Истина;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(СтрокаДерева[ИмяОбласти]));
			ОбластьРедактирования.ТипЗначения = Новый ОписаниеТипов(МассивТипов, , ,
				 Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный), ,
																					Новый КвалификаторыДаты(ЧастиДаты.Дата));
			ОбластьРедактирования.Значение    = СтрокаДерева[ИмяОбласти];
			
			Если ТипЗнч(СтрокаДерева[ИмяОбласти]) = Тип("Дата") Тогда
				ОбластьРедактирования.Формат = "ДФ=dd.MM.yyyy";
			КонецЕсли;
			
			Если ИмяОбласти = "Сделано" Тогда
				ОбластьРедактирования.Формат = "БЛ=; БИ=✓";
				ОбластьРедактирования.ЦветТекста = Новый Цвет(0, 150, 0);
				ОбластьРедактирования.Шрифт = Новый Шрифт(, 14, Истина);
				ОбластьРедактирования.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			Иначе
				ОбластьРедактирования.Шрифт = ОбластьРедактированияШрифт;
			КонецЕсли;
			ОбластьРедактирования.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
			
		КонецЕсли;
		
		ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, ОбластьЭталон);
		
	КонецЦикла;
	
	// Служебные поля
	НомерКолонки =
		Форма.СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ИдентификаторСтрокиДерева").Представление;
	ОбластьРедактирования	    	  = ТабличныйДокументМодели.Область(СтрокаОбласти + "C" + НомерКолонки);
	ОбластьРедактирования.Текст 	  = Идентификатор;
	ОбластьРедактирования.Расшифровка = Идентификатор;
		
КонецПроцедуры // ЗаполнитьДанныеСтрокиТабличногоДокумента()

&НаСервере
Процедура ИнициализироватьТабличныйДокументМодели()
	
	Макет = Справочники.Проекты.ПолучитьМакет("CRM_МакетМоделиЭтапов");
	
	СписокОбластейТабличногоДокумента.Очистить();
	ТабличныйДокументМодели.Очистить();
	
	// Служебные поля
	ТабличныйДокументМодели.Вывести(Макет.ПолучитьОбласть("Шапка|Служебная_Этап"));
	ОбластьМодели = ТабличныйДокументМодели.Область(, 1, , 1);
	ОбластьМодели.Имя = "Служебная_Этап";
	СписокОбластейТабличногоДокумента.Добавить("Служебная_Этап", "1");
	
	ТабличныйДокументМодели.Присоединить(Макет.ПолучитьОбласть("Шапка|Служебная_ИдентификаторСтрокиДерева"));
	ОбластьМодели = ТабличныйДокументМодели.Область(, 2, , 2);
	ОбластьМодели.Имя = "Служебная_ИдентификаторСтрокиДерева";
	ОбластьМодели.Видимость = Ложь;
	СписокОбластейТабличногоДокумента.Добавить("Служебная_ИдентификаторСтрокиДерева", "2");
	
	ТабличныйДокументМодели.Присоединить(Макет.ПолучитьОбласть("Шапка|Служебная_Картинка"));
	ОбластьМодели = ТабличныйДокументМодели.Область(, 3, , 3);
	ОбластьМодели.Имя = "Служебная_Картинка";
	ОбластьМодели.Видимость = Ложь;
	СписокОбластейТабличногоДокумента.Добавить("Служебная_Картинка", "3");
	
	// Настраиваемые поля
	НомерКолонки = 4;
	Для каждого ЗначениеСписка Из КолонкиКалендарногоГрафика Цикл
		
		Если НЕ ЗначениеСписка.Пометка Тогда
			Продолжить;
		КонецЕсли; 
		
		ТабличныйДокументМодели.Присоединить(Макет.ПолучитьОбласть("Шапка|" + ЗначениеСписка.Значение));
		ОбластьМодели = ТабличныйДокументМодели.Область(, НомерКолонки, , НомерКолонки);
		ОбластьМодели.Имя = ЗначениеСписка.Значение;
		СписокОбластейТабличногоДокумента.Добавить(ЗначениеСписка.Значение, Формат(НомерКолонки, "ЧН=0; ЧГ="), Истина);
		НомерКолонки = НомерКолонки + 1;
		
	КонецЦикла;
	
	// Диаграмма Ганта, всегда вводится в конце
	ТабличныйДокументМодели.Присоединить(Макет.ПолучитьОбласть("Шапка|Служебная_ДиаграммаГанта"));
	ОбластьМодели = ТабличныйДокументМодели.Область(, НомерКолонки, , НомерКолонки);
	ОбластьМодели.Имя = "Служебная_ДиаграммаГанта";
	СписокОбластейТабличногоДокумента.Добавить("Служебная_ДиаграммаГанта", Формат(НомерКолонки, "ЧН=0; ЧГ="), Истина);
	
	ТабличныйДокументМодели.ФиксацияСверху 			= 2;
	ТабличныйДокументМодели.ФиксацияСлева  			= 1;
	ТабличныйДокументМодели.Защита 		   			= Ложь;
	ТабличныйДокументМодели.ТолькоПросмотр 			= Ложь;
	// Элементы.ТабличныйДокументМодели.Редактирование = Истина;
	
КонецПроцедуры // ИнициализироватьТабличныйДокументМодели()

&НаКлиентеНаСервереБезКонтекста
Процедура ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, Знач ОбластьЭталон = Неопределено)

	Если ОбластьЭталон = Неопределено Тогда
		ОбластьЭталон = Форма.ТабличныйДокументМодели.Область(2, 1, 2, 1);
	КонецЕсли;
	
	ОбластьРедактирования.ГраницаСверху = ОбластьЭталон.ГраницаСверху;
	ОбластьРедактирования.ГраницаСлева  = ОбластьЭталон.ГраницаСлева;
	ОбластьРедактирования.ГраницаСправа = ОбластьЭталон.ГраницаСправа;
	ОбластьРедактирования.ГраницаСнизу  = ОбластьЭталон.ГраницаСнизу;
	
	ОбластьРедактирования.ЦветРамки  	= ОбластьЭталон.ЦветРамки;
	ОбластьРедактирования.ВысотаСтроки  = 24;
	
	ОбластьРедактирования.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		
КонецПроцедуры // ОформитьОбластьРедактирования()

&НаСервере
Процедура ПрочитатьДанныеМоделиПроцесса()
	
	// Вставим верхнюю строку дерева этапов
	ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	СтрокаДерева = ЭлементыДерева.Добавить();
	СтрокаДерева.ИндексКартинки = -1;
	
	ЗаполнитьДеревоПоЭтапам();
	
КонецПроцедуры // ПрочитатьДанныеМоделиПроцесса()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРежимРедактирования(Форма)
	
	Форма.Элементы.СтраницыОтображенияГрафиков.ТекущаяСтраница = Форма.Элементы[Форма.РежимРедактированияМодели];
	Форма.Элементы.ПолосаРегулированияШириныДиаграммыГанта.Видимость = Форма.РежимРедактированияМодели = "Графически";
	
КонецПроцедуры // УстановитьРежимРедактирования()

&НаСервере
Процедура ЗаполнитьДеревоПоЭтапам()
	
	ДеревоМодели.ПолучитьЭлементы().Очистить();
	
// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ЭтапыПроектов.Ссылка КАК Пакет,
	               |	CRM_ЭтапыПроектов.СуммарнаяДатаНачалаПлановая КАК ПакетСуммарнаяДатаНачалаПлановая,
	               |	CRM_ЭтапыПроектов.СуммарнаяДатаОкончанияПлановая КАК ПакетСуммарнаяДатаОкончанияПлановая,
	               |	CRM_ЭтапыПроектов.СуммарнаяДлительностьПлановая КАК ПакетСуммарнаяДлительностьПлановая,
	               |	CRM_ЭтапыПроектов.Ответственный КАК ОтветственныйЗаЭтап,
	               |	CRM_ЭтапКалендарногоПлана.Ссылка КАК Этап,
	               |	CRM_ЭтапКалендарногоПлана.ПлановаяДатаНачала КАК ЭтапПлановаяДатаНачала,
	               |	CRM_ЭтапКалендарногоПлана.ПлановаяДатаОкончания КАК ЭтапПлановаяДатаОкончания,
	               |	CRM_ЭтапКалендарногоПлана.ПлановаяДлительность КАК ЭтапПлановаяПродолжительность,
	               |	CRM_ЭтапКалендарногоПлана.ТипЭтапа КАК ТипЭтапа,
	               |	CRM_ЭтапКалендарногоПлана.Статус КАК Статус,
	               |	CRM_ЭтапыПроектов.СуммарнаяДатаНачалаФакт КАК СуммарнаяДатаНачалаФакт,
	               |	CRM_ЭтапыПроектов.СуммарнаяДатаОкончанияФакт КАК СуммарнаяДатаОкончанияФакт,
	               |	CRM_ЭтапыПроектов.СуммарнаяДлительностьФакт КАК СуммарнаяДлительностьФакт,
	               |	CRM_ЭтапКалендарногоПлана.ФактическаяДатаНачала КАК ЭтапФактическаяДатаНачала,
	               |	CRM_ЭтапКалендарногоПлана.ФактическаяДатаОкончания КАК ЭтапФактическаяДатаОкончания,
	               |	CRM_ЭтапКалендарногоПлана.ФактическаяДлительность КАК ЭтапФактическаяДлительность,
	               |	CRM_ЭтапКалендарногоПлана.КомментарийОтменыЗадачи КАК КомментарийОтменыЗадачи,
	               |	CRM_ЭтапКалендарногоПлана.Результат КАК Результат,
	               |	CRM_ЭтапКалендарногоПлана.ОтветственныйИсполнитель КАК ОтветственныйИсполнитель,
	               |	ВЫБОР
	               |		КОГДА CRM_ЭтапКалендарногоПлана.Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Выполнена)
	               |			ИЛИ CRM_ЭтапКалендарногоПлана.Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Проверена)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Сделано,
	               |	CRM_ЭтапКалендарногоПлана.Важность КАК Важность,
	               |	CRM_ЭтапКалендарногоПлана.ПометкаУдаления КАК ПометкаУдаления
	               |ИЗ
	               |	Справочник.CRM_ЭтапыПроектов КАК CRM_ЭтапыПроектов
	               |		ПОЛНОЕ СОЕДИНЕНИЕ Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
	               |		ПО CRM_ЭтапыПроектов.Ссылка = CRM_ЭтапКалендарногоПлана.Этап
	               |ГДЕ
	               |	(CRM_ЭтапыПроектов.Владелец = &Проект
	               |			ИЛИ CRM_ЭтапКалендарногоПлана.Проект = &Проект)
	               |	И НЕ ЕСТЬNULL(CRM_ЭтапыПроектов.ПометкаУдаления, ЛОЖЬ)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПакетСуммарнаяДатаНачалаПлановая ИЕРАРХИЯ,
	               |	Пакет,
	               |	ПакетСуммарнаяДатаОкончанияПлановая,
	               |	ЭтапПлановаяДатаНачала,
	               |	ЭтапПлановаяДатаОкончания";
// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	
	Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
	
	ДеревоПоЗапросу = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ДеревоМодели.ПолучитьЭлементы().Очистить();
	ВерхняяСтрокаЭтапов = ДеревоМодели.ПолучитьЭлементы().Добавить();
	ВерхняяСтрокаЭтапов.ИндексКартинки = -1;
	ВерхняяСтрокаЭтапов.Статус = Объект.CRM_Статус;
	ВерхняяСтрокаЭтапов.ПлановаяДатаНачала = Объект.ПлановаяДатаНачала;
	ВерхняяСтрокаЭтапов.ПлановаяДатаОкончания = Объект.ПлановаяДатаОкончания;
	ВерхняяСтрокаЭтапов.ФактическаяДатаНачала = Объект.ДатаНачала;
	ВерхняяСтрокаЭтапов.ФактическаяДатаОкончания = Объект.ДатаОкончания;
	
	Если ЗначениеЗаполнено(ВерхняяСтрокаЭтапов.ПлановаяДатаОкончания) Тогда
		
		ВерхняяСтрокаЭтапов.ПлановаяДлительность = CRM_УправлениеПроектамиСервер.ПолучитьПродолжительностьПериода(
			ВерхняяСтрокаЭтапов.ПлановаяДатаНачала,
			ВерхняяСтрокаЭтапов.ПлановаяДатаОкончания,
			Объект.CRM_УчитыватьПроизводственныйКалендарь);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(ВерхняяСтрокаЭтапов.ФактическаяДатаОкончания) Тогда
		
		ВерхняяСтрокаЭтапов.ФактическаяДлительность = CRM_УправлениеПроектамиСервер.ПолучитьПродолжительностьПериода(
			ВерхняяСтрокаЭтапов.ФактическаяДатаНачала,
			ВерхняяСтрокаЭтапов.ФактическаяДатаОкончания,
			Объект.CRM_УчитыватьПроизводственныйКалендарь);
			
	КонецЕсли;
	
	ЗаполнитьДеревоПоЭтапамРекурсивно(ВерхняяСтрокаЭтапов.ПолучитьЭлементы(), ДеревоПоЗапросу.Строки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПоЭтапамРекурсивно(СтрокиЭтапов, СтрокиПоЗапросу)
	
	ПредыдущийЭтапКакРодитель = NULL;
	СтрокаЭтапаГруппа		  = Неопределено;
	
	Для каждого СтрокаПоЗапросу Из СтрокиПоЗапросу Цикл
		
		Если СтрокаПоЗапросу.Строки.Количество() > 0 Тогда
			// Есть подчиненные этапы/задачи
			СтрокаЭтапа = СтрокиЭтапов.Добавить();
			СтрокаЭтапа.Этап 				 	 = СтрокаПоЗапросу.Пакет;
			СтрокаЭтапа.ПлановаяДатаНачала 	 	 = СтрокаПоЗапросу.ПакетСуммарнаяДатаНачалаПлановая;
			СтрокаЭтапа.ПлановаяДатаОкончания 	 = СтрокаПоЗапросу.ПакетСуммарнаяДатаОкончанияПлановая;
			СтрокаЭтапа.ПлановаяДлительность  	 = СтрокаПоЗапросу.ПакетСуммарнаяДлительностьПлановая;
			СтрокаЭтапа.ФактическаяДатаНачала	 = СтрокаПоЗапросу.СуммарнаяДатаНачалаФакт;
			СтрокаЭтапа.ФактическаяДатаОкончания = СтрокаПоЗапросу.СуммарнаяДатаОкончанияФакт;
			СтрокаЭтапа.ФактическаяДлительность  = СтрокаПоЗапросу.СуммарнаяДлительностьФакт;
			СтрокаЭтапа.ИндексКартинки		  	 = 0;
			СтрокаЭтапа.ОтветственныйИсполнитель  = СтрокаПоЗапросу.ОтветственныйЗаЭтап;
			СтрокаЭтапа.ИдентификаторСтроки	 	 = Новый УникальныйИдентификатор;
			
			ЗаполнитьДеревоПоЭтапамРекурсивно(СтрокаЭтапа.ПолучитьЭлементы(), СтрокаПоЗапросу.Строки);
			
			ПредыдущийЭтапКакРодитель = СтрокаПоЗапросу.Пакет;
			СтрокаЭтапаГруппа		  = СтрокаЭтапа;
		КонецЕсли;
		
		Если ПредыдущийЭтапКакРодитель <> СтрокаПоЗапросу.Пакет Тогда
			// Создадим ветку Этапа проекта 
			СтрокаЭтапаГруппа  = СтрокиЭтапов.Добавить();
			СтрокаЭтапаГруппа.Этап 					   = СтрокаПоЗапросу.Пакет;
			СтрокаЭтапаГруппа.ПлановаяДатаНачала 	   = СтрокаПоЗапросу.ПакетСуммарнаяДатаНачалаПлановая;
			СтрокаЭтапаГруппа.ПлановаяДатаОкончания    = СтрокаПоЗапросу.ПакетСуммарнаяДатаОкончанияПлановая;
			СтрокаЭтапаГруппа.ПлановаяДлительность     = СтрокаПоЗапросу.ПакетСуммарнаяДлительностьПлановая;
			СтрокаЭтапаГруппа.ФактическаяДатаНачала	   = СтрокаПоЗапросу.СуммарнаяДатаНачалаФакт;
			СтрокаЭтапаГруппа.ФактическаяДатаОкончания = СтрокаПоЗапросу.СуммарнаяДатаОкончанияФакт;
			СтрокаЭтапаГруппа.ФактическаяДлительность  = СтрокаПоЗапросу.СуммарнаяДлительностьФакт;
			СтрокаЭтапаГруппа.ИндексКартинки 		   = 0;
			СтрокаЭтапаГруппа.ОтветственныйИсполнитель  = СтрокаПоЗапросу.ОтветственныйЗаЭтап;
			СтрокаЭтапаГруппа.ИдентификаторСтроки	   = Новый УникальныйИдентификатор;
			
			ПредыдущийЭтапКакРодитель = СтрокаПоЗапросу.Пакет;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СтрокаПоЗапросу.Этап) И НЕ СтрокаПоЗапросу.ПометкаУдаления Тогда
			// Добавим задачу (верхнего уровня или подчиненную этапу)
			СтрокаЭтапа = ?(СтрокаЭтапаГруппа = Неопределено, СтрокиЭтапов.Добавить(),
				 СтрокаЭтапаГруппа.ПолучитьЭлементы().Добавить());
			СтрокаЭтапа.Этап 					 = СтрокаПоЗапросу.Этап;
			СтрокаЭтапа.ПлановаяДатаНачала		 = СтрокаПоЗапросу.ЭтапПлановаяДатаНачала;
			//СтрокаЭтапа.ПлановаяДатаОкончания	 = ?(СтрокаПоЗапросу.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.Этап,
				// СтрокаПоЗапросу.ЭтапПлановаяДатаОкончания,
				// "");
			СтрокаЭтапа.ПлановаяДатаОкончания	 = СтрокаПоЗапросу.ЭтапПлановаяДатаОкончания;
			СтрокаЭтапа.ПлановаяДлительность	 = СтрокаПоЗапросу.ЭтапПлановаяПродолжительность;
			СтрокаЭтапа.ФактическаяДатаНачала	 = СтрокаПоЗапросу.ЭтапФактическаяДатаНачала;
			//СтрокаЭтапа.ФактическаяДатаОкончания = ?(СтрокаПоЗапросу.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.Этап,
				// СтрокаПоЗапросу.ЭтапФактическаяДатаОкончания,
				// "");
			СтрокаЭтапа.ФактическаяДатаОкончания = СтрокаПоЗапросу.ЭтапФактическаяДатаОкончания;
			СтрокаЭтапа.ФактическаяДлительность	 = СтрокаПоЗапросу.ЭтапФактическаяДлительность;
			СтрокаЭтапа.ТипЭтапа 				 = СтрокаПоЗапросу.ТипЭтапа;
			СтрокаЭтапа.Статус 					 = СтрокаПоЗапросу.Статус;
			СтрокаЭтапа.ПричинаОтмены 			 = СтрокаПоЗапросу.КомментарийОтменыЗадачи;
			СтрокаЭтапа.РезультатВыполнения		 = СтрокаПоЗапросу.Результат;
			СтрокаЭтапа.ОтветственныйИсполнитель = СтрокаПоЗапросу.ОтветственныйИсполнитель;
			СтрокаЭтапа.ИндексКартинки   		 = ?(СтрокаЭтапа.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.Этап, 1, 3);
			СтрокаЭтапа.ИдентификаторСтроки	  	 = Новый УникальныйИдентификатор;
			СтрокаЭтапа.Сделано					 = СтрокаПоЗапросу.Сделано;
			СтрокаЭтапа.Важность				 = СтрокаПоЗапросу.Важность;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗадачу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЗадачуКонтрольнуюТочкуЗавершение", 
					 	 ЭтотОбъект, Новый Структура("ИмяКоманды", Команда.Имя));
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтрольнуюТочку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЗадачуКонтрольнуюТочкуЗавершение", 
					 	 ЭтотОбъект, Новый Структура("ИмяКоманды", Команда.Имя));
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтап(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЭтапЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанные(ОписаниеОповещенияОЗавершении)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВопросЗаписатьДанныеЗавершение", 
			ЭтотОбъект, 
			ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Данные еще не записаны.
					   |Действие возможно только после записи данных. Записать?'"), 
					   РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтапЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		Модифицированность = Истина;
		
		ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Владелец", Объект.Ссылка);
		
		Если ТипЗнч(ТекущиеДанные.Этап) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
			ЗначенияЗаполнения.Вставить("Родитель", ТекущиеДанные.Этап);
		Иначе
			РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
			Если НЕ РодительСтроки = Неопределено Тогда
				ЗначенияЗаполнения.Вставить("Родитель", РодительСтроки.Этап);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("Справочник.CRM_ЭтапыПроектов.ФормаОбъекта",
			ПараметрыФормы,
			ЭтотОбъект,
			УникальныйИдентификатор, , , , 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЭтапЗавершение()

&НаКлиенте
Процедура ДобавитьЗадачуКонтрольнуюТочкуЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		Модифицированность = Истина;
		ДобавитьЗадачуКонтрольнуюТочку(ПараметрыВыполнения.ИмяКоманды);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЭтапЗавершение()

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанныеЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтапЗадачуКонтрольнуюТочкуПослеЗаписиНового(ЗначениеВыбора)
	
	ЗаполнитьДеревоПоЭтапам();
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");

	Если РежимРедактированияМодели = "Графически" Тогда
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
		
		ИнициализироватьТабличныйДокументМодели();
		// Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		//	ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, СтрокаДерева.ПолучитьЭлементы(),
			// Элементы.ДеревоМодели.ТекущаяСтрока);
		//КонецЦикла;
		ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, ЭлементыДерева, Элементы.ДеревоМодели.ТекущаяСтрока);
		
		ОбновитьДиаграмму();
		ВывестиКартинкиВТабличныйДокументНаСервере();
		
	Иначе
		// РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
		УстановитьКурсорНаЭтап(ЗначениеВыбора);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЭтапЗадачуКонтрольнуюТочкуПослеЗаписиНового()

&НаСервере
Процедура УстановитьКурсорНаЭтап(ЗначениеВыбора)
	
	ИдентификаторЭтапа = 0;
	НайтиНовыйЭтап(ДеревоМодели.ПолучитьЭлементы(), ЗначениеВыбора);
	Элементы.ДеревоМодели.ТекущаяСтрока = ИдентификаторЭтапа;
	
КонецПроцедуры

&НаСервере
Процедура НайтиНовыйЭтап(Строки, Этап)
	
	Для каждого Строка Из Строки Цикл
		Если ИдентификаторЭтапа > 0 Тогда
			Возврат;
		КонецЕсли;
		Если Строка.Этап = Этап Тогда
			ИдентификаторЭтапа = Строка.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;
		СтрокиПолученные = Строка.ПолучитьЭлементы();
		Если СтрокиПолученные.Количество() > 0 Тогда
			НайтиНовыйЭтап(СтрокиПолученные, Этап);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗадачуКонтрольнуюТочку(ИмяКоманды)
	
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	Если ИмяКоманды = "ДобавитьЗадачу" Тогда
		ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап");
	ИначеЕсли ИмяКоманды = "ДобавитьКонтрольнуюТочку" Тогда
		ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка");
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Проект", Объект.Ссылка);
	ЗначенияЗаполнения.Вставить("ТипЭтапа", ТипЭтапа);
	ЗначенияЗаполнения.Вставить("ВведенВручную", Истина);
	
	Если ТипЗнч(ТекущиеДанные.Этап) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
		ЗначенияЗаполнения.Вставить("Этап", ТекущиеДанные.Этап);
		ЗначенияЗаполнения.Вставить("ПлановаяДатаНачала",
			 CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Этап,
			 "СуммарнаяДатаНачалаПлановая"));
	
	ИначеЕсли ТипЗнч(ТекущиеДанные.Этап) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
		РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
		Если НЕ РодительСтроки = Неопределено Тогда
			ЗначенияЗаполнения.Вставить("Этап", РодительСтроки.Этап);
			Если ЗначениеЗаполнено(РодительСтроки.Этап) Тогда
				ЗначенияЗаполнения.Вставить("ПлановаяДатаНачала",
					 CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(РодительСтроки.Этап,
					 "СуммарнаяДатаНачалаПлановая"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.CRM_ЭтапКалендарногоПлана.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор, , , , 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры // ДобавитьЗадачуКонтрольнуюТочку()

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ЭлементДерево, ИмяРеквизитаФормы, Развернуть = Истина)
	
	Если Развернуть Тогда
		СтрокиДерева = ЭтотОбъект[ИмяРеквизитаФормы].ПолучитьЭлементы();
	Иначе
		СтрокиДерева = ЭтотОбъект[ИмяРеквизитаФормы].ПолучитьЭлементы()[0].ПолучитьЭлементы();
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если Развернуть Тогда
			CRM_ОбщегоНазначенияКлиентСервер.РазвернутьТаблицуФормы(ЭлементДерево, СтрокаДерева.ПолучитьИдентификатор(), Истина);
		Иначе
			CRM_ОбщегоНазначенияКлиентСервер.СвернутьТаблицуФормы(ЭлементДерево, СтрокаДерева.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Развернуть(Команда)
	Если РежимРедактированияМодели = "Графически" Тогда
		РазвернутьСтрокиТабличногоДокумента(Истина);
	Иначе
		РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Свернуть(Команда)
	
	Если РежимРедактированияМодели = "Графически" Тогда
		РазвернутьСтрокиТабличногоДокумента(Ложь);
	Иначе
		РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели", Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиОбновить(Команда)
	
	ТекущийЭтапДерева = Неопределено;
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийЭтапДерева = ТекущиеДанные.Этап;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_Обновить", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Обновить()
	
	ЗаполнитьДеревоПоЭтапам();
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
		
	Если РежимРедактированияМодели = "Графически" Тогда
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
		ИнициализироватьТабличныйДокументМодели();
		
		ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, ЭлементыДерева);
		
		ОбновитьДиаграмму();
		ВывестиКартинкиВТабличныйДокументНаСервере();
	
	Иначе
		
		УстановитьКурсорНаЭтап(ТекущийЭтапДерева);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьЭтап(Команда)
	
	ДеревоМоделиВыбор(Элементы.ДеревоМодели, Элементы.ДеревоМодели.ТекущаяСтрока,
		 Элементы.ДеревоМодели.ТекущийЭлемент,
		 Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Объект.CRM_Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.Планируется")
		ИЛИ Объект.CRM_Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.ВРаботе") Тогда
		ИмяКоманды = Элементы.ДеревоМоделиКнопкаДобавитьЗадачу.ИмяКоманды;
		Команда = Команды.Найти(ИмяКоманды);
		ДобавитьЗадачу(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ПометитьНаУдаление(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтапПриемник = Элемент.ДанныеСтроки(Строка).Этап;
	
	Если ТипЗнч(ЭтапПриемник) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана")  Тогда
		
		Родитель = Элемент.ДанныеСтроки(Строка).ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			ЭтапПриемник = ПредопределенноеЗначение("Справочник.CRM_ЭтапыПроектов.ПустаяСсылка");
		Иначе
			ЭтапПриемник = Родитель.Этап;
		КонецЕсли;
	КонецЕсли;
	
	ЭтапПереносимый = Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение).Этап;
	
	ПеренестиЭтап(ЭтапПриемник, ЭтапПереносимый);
	
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Этап = Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение).Этап;

	Если НЕ ЗначениеЗаполнено(Этап) Тогда
		Выполнение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка = Неопределено Тогда
		// Перенос на "пустоту" поля
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	ЭтапПриемник		 = Элемент.ДанныеСтроки(Строка).Этап;
	ЭтапПереносимый		 = Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение).Этап;
	ПриемникЭтоЗадача 	 = (ТипЗнч(ЭтапПриемник) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана"));
	ПереносимыйЭтоЗадача = (ТипЗнч(ЭтапПереносимый) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана"));
	
	Если ПриемникЭтоЗадача  Тогда
		РодительПриемника = Элемент.ДанныеСтроки(Строка).ПолучитьРодителя();
		Если РодительПриемника = Неопределено Тогда
			ЭтапПриемникРодитель = ПредопределенноеЗначение("Справочник.CRM_ЭтапыПроектов.ПустаяСсылка");
		Иначе
			ЭтапПриемникРодитель = РодительПриемника.Этап;
		КонецЕсли;
	Иначе
		ЭтапПриемникРодитель = ЭтапПриемник;
	КонецЕсли;
	
	РодительПереносимого = Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение).ПолучитьРодителя();
	Если РодительПереносимого = Неопределено Тогда
		ЭтапПереносимыйРодитель = ПредопределенноеЗначение("Справочник.CRM_ЭтапыПроектов.ПустаяСсылка");
	ИначеЕсли НЕ ПереносимыйЭтоЗадача И ПриемникЭтоЗадача И ЭтапПриемникРодитель = ЭтапПереносимый Тогда
		// Перенос пакета на подчиненную задачу
		ЭтапПереносимыйРодитель = ЭтапПереносимый;
	Иначе
		ЭтапПереносимыйРодитель = РодительПереносимого.Этап;
	КонецЕсли;
	
	Если (ЭтапПриемникРодитель = ЭтапПереносимыйРодитель)
		 Или (НЕ ПереносимыйЭтоЗадача И ЕстьЗацикливанияУровнейПриПереносе(ЭтапПриемникРодитель, ЭтапПереносимый)) Тогда
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяРеквизита = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "ДеревоМодели", "");
	Если СписокРедактируемыхКолонок.НайтиПоЗначению(ИмяРеквизита) = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
		Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Этап = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		Этап = ДанныеСтроки.Этап;
		
		ПараметрыФормы = Новый Структура("Ключ", Этап);
		
		ВерсияДанныхЭтапа = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Этап, "ВерсияДанных");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьПослеЗаписиЭтапа", ЭтотОбъект,
			 Новый Структура("Ссылка, ВерсияДанных", Этап,
			 ВерсияДанныхЭтапа));
		
		Если ТипЗнч(Этап) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
			
			ОткрытьФорму("Справочник.CRM_ЭтапыПроектов.ФормаОбъекта",
				ПараметрыФормы,
				ЭтотОбъект,
				УникальныйИдентификатор, , ,
				ОписаниеОповещения, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
			
		ИначеЕсли ТипЗнч(Этап) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
			
			ОткрытьФорму("Документ.CRM_ЭтапКалендарногоПлана.ФормаОбъекта",
				ПараметрыФормы,
				ЭтотОбъект,
				УникальныйИдентификатор, , ,
				ОписаниеОповещения, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Этап = ТекДанные.Этап;
	ИмяРеквизита = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "ДеревоМодели", "");
	Если Этап = Неопределено ИЛИ ТипЗнч(Этап) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
		Отказ = Истина;
	Иначе
		Отказ = НЕ РазрешеноРедактированиеЭлемента(ИмяРеквизита, ТекДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазрешеноРедактированиеЭлемента(ИмяРеквизита, ИдентификаторСтроки)
	ТекДанные = ДеревоМодели.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ИмяРеквизита = "ФактическаяДатаОкончания" Тогда
		Если ТекДанные.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для контрольной точки изменение даты окончания не предусмотрено'"));
			Возврат Ложь;
		КонецЕсли;
		Если Объект.CRM_Статус <> Перечисления.CRM_СтатусыПроектов.ВРаботе 
			ИЛИ ТекДанные.Статус <> Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для смены статуса проект и этап должны иметь статус ""В работе""'"));
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ФактическаяДатаНачала" Тогда	
		Если Объект.CRM_Статус <> Перечисления.CRM_СтатусыПроектов.ВРаботе 
			ИЛИ (ТекДанные.Статус <> Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе
				И ТекДанные.Статус <> Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Запланирована) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для смены статуса проект и этап должны иметь статус ""В работе""';
				|en='Project and stage must be in status ""In progress"" to change it'"));
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ПлановаяДлительность" Тогда	
		Если ТекДанные.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для контрольной точки изменение длительности не предусмотрено'"));
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ПлановаяДатаОкончания" Тогда	
		Если ТекДанные.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для контрольной точки изменение даты окончания не предусмотрено'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПриИзмененииЗначенияРеквизитыЭтапа(ИмяРеквизита, ИдентификаторСтроки, Значение)
	ТекДанные = ДеревоМодели.НайтиПоИдентификатору(ИдентификаторСтроки);
	День = 86400;
	ДанныеЭтапаКалендарногоПлана = Новый Структура;
	Если ИмяРеквизита = "ПлановаяДатаНачала" Тогда
		Если Не ЗначениеЗаполнено(Значение) Тогда
			Значение = ТекДанные.Этап.ПлановаяДатаНачала;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Плановая дата начала не может быть пустой!'"));
			Возврат Ложь;
		КонецЕсли;
		Если ТекДанные.ПлановаяДлительность > 0 Тогда
			ДанныеЭтапаКалендарногоПлана.Вставить("ПлановаяДатаОкончания", Значение 
				+ (ТекДанные.ПлановаяДлительность - 1) * День);
		Иначе
			ДанныеЭтапаКалендарногоПлана.Вставить("ПлановаяДатаОкончания", Значение);
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ПлановаяДатаОкончания" Тогда
		Если Значение < ТекДанные.ПлановаяДатаНачала Тогда
			Значение = ТекДанные.Этап.ПлановаяДатаОкончания;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Плановая дата окончания не может быть меньше плановой даты начала!'"));
			Возврат Ложь;
		Иначе
			ДанныеЭтапаКалендарногоПлана.Вставить("ПлановаяДлительность", (КонецДня(Значение) - НачалоДня(ТекДанные.ПлановаяДатаНачала) 
				+ 1) / День);
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ПлановаяДлительность" Тогда
		ДанныеЭтапаКалендарногоПлана.Вставить("ПлановаяДатаОкончания", ТекДанные.ПлановаяДатаНачала + (Значение - 1) * День);
	ИначеЕсли ИмяРеквизита = "ФактическаяДатаНачала" Тогда
		Если ТекДанные.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Запланирована Тогда
			ДанныеЭтапаКалендарногоПлана.Вставить("Статус", Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе);
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ФактическаяДатаОкончания" Тогда
		Если ТекДанные.ФактическаяДатаНачала > Значение Тогда
			Значение = ТекДанные.Этап.ФактическаяДатаОкончания;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата окончания не может быть меньше даты начала!'"));
			Возврат Ложь;
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекДанные.ФактическаяДатаНачала) Тогда
			ДанныеЭтапаКалендарногоПлана.Вставить("ФактическаяДатаНачала", ТекДанные.ПлановаяДатаНачала);
			ТекДанные.ФактическаяДатаНачала = ТекДанные.ПлановаяДатаНачала;
		КонецЕсли;
		ДанныеЭтапаКалендарногоПлана.Вставить("ФактическаяДлительность", (КонецДня(Значение) - НачалоДня(ТекДанные.ФактическаяДатаНачала) 
			+ 1) / День);
		ДанныеЭтапаКалендарногоПлана.Вставить("Статус", Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Выполнена);
		
		УстановкаРазрешена = Истина;
	
		// Проверим наличие файлов с необходимым контекстом
		СписокНедостающихКонтекстов = Новый СписокЗначений;
			
		CRM_УправлениеПроектамиВызовСервера.ПроверитьНаличиеФайловСНужнымКонтекстом(ТекДанные.Этап, 
			СписокНедостающихКонтекстов);
			
		Если СписокНедостающихКонтекстов.Количество() > 0 Тогда
			УстановкаРазрешена = Ложь; 
		КонецЕсли;
			
		Если УстановкаРазрешена Тогда
			ДанныеЭтапаКалендарногоПлана.Вставить(ИмяРеквизита, Значение);
			ИзменитьЭтапКалендарногоПлана(ТекДанные.Этап, ДанныеЭтапаКалендарногоПлана);
			Прогноз = CRM_УправлениеПроектамиВызовСервера.ПолучитьПрогноз(Объект.Ссылка);
			Если Объект.CRM_ПрогнозЗавершенияПроекта <> Прогноз Тогда
				Объект.CRM_ПрогнозЗавершенияПроекта = Прогноз;
				Модифицированность = Истина;
			КонецЕсли;
			Возврат Истина;
		Иначе
			Если ТекДанные.Этап.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап") Тогда
				Сообщение = НСтр("ru = 'Для завершения задачи необходимо присоединить файл(ы) следующего контекста:'");
			Иначе
				Сообщение = НСтр("ru = 'Для завершения контрольной точки необходимо присоединить файл(ы) следующего контекста:'");
			КонецЕсли;
			Для каждого ЭлементСписка Из СписокНедостающихКонтекстов Цикл
				Сообщение  = Сообщение + Символы.ПС + "  - " + ЭлементСписка.Значение;
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	ДанныеЭтапаКалендарногоПлана.Вставить(ИмяРеквизита, Значение);
	ИзменитьЭтапКалендарногоПлана(ТекДанные.Этап, ДанныеЭтапаКалендарногоПлана);
	
	Если ИмяРеквизита = "ПлановаяДатаОкончания" Или ИмяРеквизита = "ПлановаяДатаНачала"
		 Или ИмяРеквизита = "ПлановаяДлительность" Тогда
		МаксимальнаяПлановаяДатаОкончания =
			CRM_УправлениеПроектамиВызовСервера.ПолучитьПлановуюДатуОкончанияПроекта(Объект.Ссылка);
		Если МаксимальнаяПлановаяДатаОкончания <> Неопределено Тогда
			Если Объект.ПлановаяДатаОкончания <> МаксимальнаяПлановаяДатаОкончания Тогда
				Объект.ПлановаяДатаОкончания = МаксимальнаяПлановаяДатаОкончания;
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ДеревоМоделиПриИзменении(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	ИмяРеквизита = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "ДеревоМодели", "");
	Значение = ТекДанные[ИмяРеквизита];
	Если ПриИзмененииЗначенияРеквизитыЭтапа(ИмяРеквизита, ТекДанные.ПолучитьИдентификатор(), Значение) Тогда
		ДеревоМоделиОбновить(Неопределено);
	Иначе
		ТекДанные[ИмяРеквизита] = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПослеЗаписиЭтапа(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		 И ДополнительныеПараметры.Свойство("Ссылка") И ДополнительныеПараметры.Свойство("ВерсияДанных") Тогда
		
		ПараметрСсылка = ДополнительныеПараметры.Ссылка;
		Если CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ПараметрСсылка,
			 "ВерсияДанных") <> ДополнительныеПараметры.ВерсияДанных Тогда
			
			// Изменим при необходимости плановую дату окончания
			Если ТипЗнч(ПараметрСсылка) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
				
				МаксимальнаяПлановаяДатаОкончания =
					CRM_УправлениеПроектамиВызовСервера.ПолучитьПлановуюДатуОкончанияПроекта(Объект.Ссылка);
				Если МаксимальнаяПлановаяДатаОкончания <> Неопределено Тогда
					Если Объект.ПлановаяДатаОкончания <> МаксимальнаяПлановаяДатаОкончания Тогда
						Объект.ПлановаяДатаОкончания = МаксимальнаяПлановаяДатаОкончания;
						Модифицированность = Истина;
					КонецЕсли;
				КонецЕсли;
				
				МинимальнаяДатаНачала = CRM_УправлениеПроектамиВызовСервера.ПолучитьДатуНачалаПроекта(Объект.Ссылка);
				Если МинимальнаяДатаНачала <> Неопределено Тогда
					Если Объект.ДатаНачала <> МинимальнаяДатаНачала Тогда
						Объект.ДатаНачала = МинимальнаяДатаНачала;
						Модифицированность = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Прогноз = CRM_УправлениеПроектамиВызовСервера.ПолучитьПрогноз(Объект.Ссылка);
				Если Прогноз <> Неопределено Тогда
					Если Объект.CRM_ПрогнозЗавершенияПроекта <> Прогноз Тогда
						Объект.CRM_ПрогнозЗавершенияПроекта = Прогноз;
						Модифицированность = Истина;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			ЗаполнитьДеревоПоЭтапам();
			РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
			
			Если РежимРедактированияМодели = "Графически" Тогда
				ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
				ИнициализироватьТабличныйДокументМодели();
				
				// Для каждого СтрокаДерева Из ЭлементыДерева Цикл
				//	ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, СтрокаДерева.ПолучитьЭлементы());
				//КонецЦикла;
				ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, ЭлементыДерева);
				
				ОбновитьДиаграмму();
				ВывестиКартинкиВТабличныйДокументНаСервере();
				
			Иначе
				//РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
				УстановитьКурсорНаЭтап(ПараметрСсылка);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПослеЗаписиЭтапа()

&НаКлиенте
Процедура РежимОтображенияПриИзменении(Элемент)
	
	ТекущийЭтапДерева = Неопределено;
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийЭтапДерева = ТекущиеДанные.Этап;
	КонецЕсли;
		
	ПодключитьОбработчикОжидания("Подключамеый_РежимОтображенияПриИзменении", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_УчитыватьПроизводственныйКалендарьПриИзменении(Элемент)
	
	Объект.CRM_УчитыватьПроизводственныйКалендарь = Не Объект.CRM_УчитыватьПроизводственныйКалендарь;
	
	Оповещение = Новый ОписаниеОповещения("CRM_УчитыватьПроизводственныйКалендарьПриИзмененииПродолжение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'При изменении будет произведен пересчет плановых дат окончания всех этапов проекта.
	                          |Продолжить?'");
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_УчитыватьПроизводственныйКалендарьПриИзмененииПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	Объект.CRM_УчитыватьПроизводственныйКалендарь = Не Объект.CRM_УчитыватьПроизводственныйКалендарь;
	
	ДеревоМоделиОбновить(Неопределено);
	
	ПоказатьОповещениеПользователя(, , НСтр("ru='Выполняется пересчет дат графика работ...'"),
		БиблиотекаКартинок.CRM_Ожидание);
	
	// Необходимо записать проект, иначе есть вероятность что запись отменят, а этапы уже сместились.
	Записать();
	
	CRM_УправлениеПроектамиВызовСервера.ПересчитатьДатыОкончанияПроекта(
		Объект.Ссылка, ОписаниеОшибки, Объект.CRM_УчитыватьПроизводственныйКалендарь);
		
	Если ОписаниеОшибки = "" Тогда
		
		ПоказатьОповещениеПользователя(, , НСтр("ru='Пересчет дат графика завершен.'"));
		
		МаксимальнаяПлановаяДатаОкончания =
			CRM_УправлениеПроектамиВызовСервера.ПолучитьПлановуюДатуОкончанияПроекта(Объект.Ссылка);
		
		Если МаксимальнаяПлановаяДатаОкончания <> Неопределено Тогда
			Если Объект.ПлановаяДатаОкончания <> МаксимальнаяПлановаяДатаОкончания Тогда
				Объект.ПлановаяДатаОкончания = МаксимальнаяПлановаяДатаОкончания;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьДеревоПоЭтапам();
		РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
		
		Если РежимРедактированияМодели = "Графически" Тогда
			
			ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
			ИнициализироватьТабличныйДокументМодели();
			
			ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, ЭлементыДерева);
			
			ОбновитьДиаграмму();
			ВывестиКартинкиВТабличныйДокументНаСервере();
			
		Иначе
			УстановитьКурсорНаЭтап(ТекущийЭтапДерева);
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='При обновлении дат этапов произошла ошибка:'") 
			+ Символы.ПС
			+ ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключамеый_РежимОтображенияПриИзменении()
	
	УстановитьРежимРедактирования(ЭтотОбъект);
	ЗаполнитьДеревоПоЭтапам();
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
	
	Если РежимРедактированияМодели = "Графически" Тогда
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
		ИнициализироватьТабличныйДокументМодели();
		
		ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, ЭлементыДерева);
		
		ОбновитьДиаграмму();
		ВывестиКартинкиВТабличныйДокументНаСервере();
		
	Иначе
		//УстановитьКурсорНаЭтап(ТекущийЭтапДерева);
	КонецЕсли;
	
	УстановитьКурсорНаЭтап(ТекущийЭтапДерева);
	
КонецПроцедуры // Подключамеый_РежимОтображенияПриИзменении()

&НаКлиенте
Процедура ТабличныйДокументМоделиПриИзменении(Элемент)
	ПеренестиДанныеТабличногоДокументаВЭтапКалендарногоПлана(Элемент.ТекущаяОбласть);
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументМоделиВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Попытка
		АктивнаяЯчейка = ТабличныйДокументМодели.Область(АдресТекущейЯчейки);
	Исключение
		АктивнаяЯчейка = Неопределено;
	КонецПопытки;
	
	Если АктивнаяЯчейка <> Неопределено И АктивнаяЯчейка.Расшифровка = "Сделано" Тогда 
		
		Если Объект.CRM_Статус <> ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.ВРаботе") Тогда
			СтандартнаяОбработка = Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для смены статуса проект и этап должны иметь статус ""В работе""'"));
			Возврат;
		КонецЕсли;
		
		Если НЕ АктивнаяЯчейка.СодержитЗначение Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		СтрокаОбласти = "R" + Формат(АктивнаяЯчейка.Низ, "ЧН=0; ЧГ=");
		НомерКолонки = СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ИдентификаторСтрокиДерева").Представление;
		ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C" + НомерКолонки);
		ДанныеСтрокиДерева = ДеревоМодели.НайтиПоИдентификатору(ОбластьИдентификатора.Расшифровка);
		Этап = ДанныеСтрокиДерева.Этап;
		
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("Этап", Этап);
		ПараметрыОбработки.Вставить("Сделано", АктивнаяЯчейка.Значение);
		
		Если АктивнаяЯчейка.Значение Тогда
			Если ЕстьПраваНаПроект
				 ИЛИ ДанныеСтрокиДерева.Статус  = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Выполнена") Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветДляКолонкиСделаноУГанта",
					 ЭтотОбъект,
					 ПараметрыОбработки);
				ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Снять признак выполнения?'"), РежимДиалогаВопрос.ДаНет);
			Иначе
				СтандартнаяОбработка = Ложь;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нельзя отменять выполнение завершенной задачи'"));
				Возврат;
			КонецЕсли;
		Иначе
			Если ДанныеСтрокиДерева.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе") Тогда
				Отказ = Ложь;
				ДеревоМоделиСделаноПриИзмененииНаСервере(Этап, Отказ);
				Если НЕ Отказ Тогда
					АктивнаяЯчейка.Значение = ПараметрыОбработки.Сделано;
					Прочитать();
					ОбновитьОтображениеДанных();
				КонецЕсли;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для смены статуса проект и этап должны иметь статус ""В работе""'"));
			КонецЕсли;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(Область) = Тип("РисунокТабличногоДокумента") Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Область.Лево > 1 И НЕ Область.СодержитЗначение Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Область.Низ <= 2 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	СтрокаОбласти = "R" + Формат(Область.Низ, "ЧН=0; ЧГ=");
	НомерКолонки = СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ИдентификаторСтрокиДерева").Представление;
	ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C" + НомерКолонки);
		
	Если ОбластьИдентификатора.Расшифровка = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиДерева = ДеревоМодели.НайтиПоИдентификатору(ОбластьИдентификатора.Расшифровка);
	Если ДанныеСтрокиДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Этап = ДанныеСтрокиДерева.Этап;
	
	Если Этап = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если СписокРедактируемыхКолонок.НайтиПоЗначению(Область.Расшифровка) = Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Модифицированность = Истина;
		ПараметрыФормы = Новый Структура("Ключ", Этап);

		ВерсияДанныхЭтапа = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Этап, "ВерсияДанных");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьПослеЗаписиЭтапа", ЭтотОбъект,
			 Новый Структура("Ссылка, ВерсияДанных", Этап,
			 ВерсияДанныхЭтапа));
		
		Если ТипЗнч(Этап) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
			ОткрытьФорму("Справочник.CRM_ЭтапыПроектов.ФормаОбъекта",
				ПараметрыФормы,
				ЭтотОбъект,
				УникальныйИдентификатор, , ,
				ОписаниеОповещения, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
		Иначе
			ОткрытьФорму("Документ.CRM_ЭтапКалендарногоПлана.ФормаОбъекта",
				ПараметрыФормы,
				ЭтотОбъект,
				УникальныйИдентификатор, , ,
				ОписаниеОповещения, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Этап) <> Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	Иначе
		СтандартнаяОбработка = РазрешеноРедактированиеЭлемента(Область.Расшифровка, ОбластьИдентификатора.Расшифровка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументМоделиПриАктивизацииОбласти(Элемент)
	
	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	Если ТипЗнч(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
		Если ТекущаяОбласть.Имя = "ДиаграммаГанта" Тогда
			Элемент.Редактирование  = Ложь;
			Возврат;
		
		Иначе
			Если Не Элемент.Редактирование Тогда
				Элемент.Редактирование  = Истина;
			КонецЕсли;
			
			МассивИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущаяОбласть.Имя, "_");
			СтрокаОбласти = МассивИмени[0];
			
			НомерКолонки =
				СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ИдентификаторСтрокиДерева").Представление;
			ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C" + НомерКолонки);
			
			Элементы.ДеревоМодели.ТекущаяСтрока = ОбластьИдентификатора.Расшифровка;
			
			Если СтрНайти(ТекущаяОбласть.Имя, "ТипЭтапа") > 0 Тогда
				Элементы.ТабличныйДокументМодели.ТекущаяОбласть = ТабличныйДокументМодели.Область(СтрокаОбласти 
					+ "C1"); // Этап всегда первая колонка С1
				
				Возврат;
			КонецЕсли;
			
			ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
			Если ТекущиеДанные <> Неопределено Тогда
				РежимСвернуть = (СтрНайти(ТекущаяОбласть.Имя, "Свернуть") > 0);
				СуффиксИмени = ?(РежимСвернуть, "Свернуть", "Развернуть");
				ОбратныйСуффикс = ?(РежимСвернуть, "Развернуть", "Свернуть");
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабличныйДокументМодели.Рисунки,
					 ТекущаяОбласть.Имя) Тогда
					Рисунок = ТабличныйДокументМодели.Рисунки[ТекущаяОбласть.Имя];
					Рисунок.Картинка = ?(РежимСвернуть, БиблиотекаКартинок.CRM_Развернуть, БиблиотекаКартинок.CRM_Свернуть);
					Рисунок.Имя = СтрокаОбласти + "_" + ОбратныйСуффикс;
				КонецЕсли;

				
				СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(ТекущиеДанные.ПолучитьЭлементы(), Не РежимСвернуть);
				
				СвернутьРазвернутьТочкуДиаграммы(ТекущиеДанные.ИдентификаторСтроки, Не РежимСвернуть);
				
				Элементы.ТабличныйДокументМодели.ТекущаяОбласть = ТабличныйДокументМодели.Область(СтрокаОбласти 
					+ "C1"); // Этап всегда первая колонка С1
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		// Если Не Элемент.Редактирование Тогда
		//	Элемент.Редактирование = Истина;
		// КонецЕсли;
		
		Если СтрНайти(ТекущаяОбласть.Имя, "C") > 0 Тогда // Адрес конкретной ячейки
			АдресТекущейЯчейки = ТекущаяОбласть.Имя;
		КонецЕсли;
		
		Если ТекущаяОбласть.Низ < 3 Тогда
			Элементы.ДеревоМодели.ТекущаяСтрока = ДеревоМодели.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
			Элемент.Редактирование = Ложь;
		Иначе
			СтрокаОбласти = "R" + Формат(ТекущаяОбласть.Низ, "ЧН=0; ЧГ=");
			НомерКолонки =
				СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ИдентификаторСтрокиДерева").Представление;
			ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C" + НомерКолонки);
			
			Если ОбластьИдентификатора.Расшифровка <> Неопределено Тогда
				Элементы.ДеревоМодели.ТекущаяСтрока = ОбластьИдентификатора.Расшифровка;
			Иначе
				Элементы.ДеревоМодели.ТекущаяСтрока = ДеревоМодели.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
			КонецЕсли;
			ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
			Если ЗначениеЗаполнено(ТекущаяОбласть.Расшифровка)
				 И СписокРедактируемыхКолонок.НайтиПоЗначению(ТекущаяОбласть.Расшифровка) <> Неопределено
				И ТекущиеДанные <> Неопределено И ТипЗнч(ТекущиеДанные.Этап) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
				Если Не Элемент.Редактирование Тогда
					Элемент.Редактирование = Истина;
				КонецЕсли;
			Иначе
				Элемент.Редактирование = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Элемент.ТекущаяОбласть = ТабличныйДокументМодели.Область("R" + Элемент.ТекущаяОбласть.Верх);
	Если ЗначениеЗаполнено(ТекущаяОбластьСтрока) Тогда
		ОбластьСтрока = ТабличныйДокументМодели.Область(ТекущаяОбластьСтрока);
		ОбластьСтрока.ЦветФона = ЦветФонаПоля;
	КонецЕсли;
	ТекущаяОбластьСтрока = "R" + Элемент.ТекущаяОбласть.Верх;
	ОбластьСтрока = ТабличныйДокументМодели.Область(ТекущаяОбластьСтрока);
	ОбластьСтрока.ЦветФона = ЦветНавигации;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументМоделиПриИзмененииСодержимогоОбласти(Элемент, Область, ДополнительныеПараметры)
	Если Область.Имя = "ДиаграммаГанта" Тогда
		ДополнительныеПараметры.Отмена = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(ЭлементыДерева, Видимость)
		
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		ТабличныйДокументМодели.Область(СтрокаДерева.АдресСтрокиОбласти).Видимость = Видимость;
		СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(СтрокаДерева.ПолучитьЭлементы(), Видимость);
	
	КонецЦикла;
	
КонецПроцедуры // СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно()

&НаКлиенте
Процедура СвернутьРазвернутьТочкуДиаграммы(ИдентифкаторТочки, Развернуть, Знач ДиаграммаОбъект = Неопределено)

	Если ДиаграммаОбъект = Неопределено Тогда
		ДиаграммаРисунок = ТабличныйДокументМодели.Рисунки["ДиаграммаГанта"];
		ДиаграммаОбъект = ДиаграммаРисунок.Объект;
		
	КонецЕсли;

	Точка = ДиаграммаОбъект.УстановитьТочку(ИдентифкаторТочки);
	Если Развернуть Тогда
		ДиаграммаОбъект.РазвернутьТочку(Точка, Истина);
	Иначе	
		ДиаграммаОбъект.СвернутьТочку(Точка, Истина);
	КонецЕсли;
	
КонецПроцедуры // СвернутьТочкуДиаграммы()

&НаКлиенте
Процедура ПолосаРегулированияШириныДиаграммыГантаПриИзменении(Элемент)
	
	ДиаграммаРисунок = ТабличныйДокументМодели.Рисунки["ДиаграммаГанта"];
	ДиаграммаОбъект = ДиаграммаРисунок.Объект;
	
	ДиаграммаОбъект.Обновление = Ложь;
	ТабличныйДокументМодели.Область("Служебная_ДиаграммаГанта").ШиринаКолонки =
		ПолосаРегулированияШириныДиаграммыГанта * 2;
	
	ДиаграммаОбъект.Обновление = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяДатаНачалаПриИзменении(Элемент)
	
	Если ПлановаяДатаНачалаПредыдущая = Объект.ПлановаяДатаНачала Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПлановаяДатаНачала) Тогда
		
		Объект.ПлановаяДатаНачала = ПлановаяДатаНачалаПредыдущая;
		Возврат;
		
	ИначеЕсли Объект.ПлановаяДатаНачала > ПлановаяДатаНачалаПредыдущая
		 И НЕ ПлановаяДатаНачалаПредыдущая = '0001.01.01' Тогда
		
		ПоказатьОповещениеПользователя(, , НСтр("ru='Выполняется пересчет дат графика работ...'"),
			 БиблиотекаКартинок.CRM_Ожидание);
		
		ОписаниеОшибки = "";
		
		ТекущийЭтап = Неопределено;
		ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущийЭтап = ТекущиеДанные.Этап;
		КонецЕсли;
		
		CRM_УправлениеПроектамиВызовСервера.ПересчитатьДатыЭтаповПроекта(Объект.Ссылка,
			 ПлановаяДатаНачалаПредыдущая, Объект.ПлановаяДатаНачала,
			 ОписаниеОшибки);
		
		Если ОписаниеОшибки = "" Тогда
			
			Объект.ПлановаяДатаОкончания = Объект.ПлановаяДатаОкончания 
				+ CRM_УправлениеПроектамиКлиентСервер.РазностьДатВСекундах(Объект.ПлановаяДатаНачала, ПлановаяДатаНачалаПредыдущая);
			
			//УстановитьКурсорНаЭтап(ТекущийЭтап);
			
			ПоказатьОповещениеПользователя(, , НСтр("ru='Пересчет дат графика завершен.'"));
			
			ЗаполнитьДеревоПоЭтапам();
			РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
			
			Если РежимРедактированияМодели = "Графически" Тогда
				ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
				ИнициализироватьТабличныйДокументМодели();
				
				// Для каждого СтрокаДерева Из ЭлементыДерева Цикл
				//	ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, СтрокаДерева.ПолучитьЭлементы());
				//КонецЦикла;
				ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, ЭлементыДерева);

				ОбновитьДиаграмму();
				ВывестиКартинкиВТабличныйДокументНаСервере();
			
			Иначе
				
			//	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
				УстановитьКурсорНаЭтап(ТекущийЭтапДерева);
				
			КонецЕсли;
			
			// Необходимо записать проект, иначе есть вероятность что запись отменят, а этапы уже сместились.
			Записать();
			
		Иначе
			Объект.ПлановаяДатаНачала = ПлановаяДатаНачалаПредыдущая;
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='При обновлении дат этапов произошла ошибка:'") 
				+ Символы.ПС 
				+ ОписаниеОшибки);
		КонецЕсли;
		
	КонецЕсли;
	                     	
	ПлановаяДатаНачалаПредыдущая = Объект.ПлановаяДатаНачала;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДеревоМоделиОбновить(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСписокКолонок(Команда)
	
	ОткрытьФорму("ОбщаяФорма.CRM_ФормаОтметкиЭлементовСписка", Новый Структура("СписокЗначений",
		 КолонкиКалендарногоГрафика),
		 ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКолонокКалендарногоГрафикаНаСервере()
	
	Если КолонкиКалендарногоГрафика.Количество() = 0 Тогда
		СохраненныйСписок = Объект.Ссылка.CRM_КолонкиКалендарногоГрафика.Получить();
		
		Если ЗначениеЗаполнено(СохраненныйСписок) Тогда 
			КолонкиКалендарногоГрафика = СохраненныйСписок.Скопировать();
		Иначе
			CRM_УправлениеПроектамиВызовСервера.ПеречитатьСписокКолонокКалендарногоГрафикаИзМакетаНаСервере(КолонкиКалендарногоГрафика);
		КонецЕсли;
	КонецЕсли;
 	
КонецПроцедуры

&НаСервере
Процедура ВидимостьИПорядокКолонокДерева()

	НомерКолонки = 0;
	Для каждого ЭлементСписка Из КолонкиКалендарногоГрафика Цикл
		
		НомерКолонки = НомерКолонки + 1;
		Элемент = Элементы["ДеревоМодели" + ЭлементСписка.Значение];
		Элемент.Видимость = ЭлементСписка.Пометка;
		Если Элемент <> Элементы.ДеревоМодели.ПодчиненныеЭлементы[НомерКолонки] Тогда
			Элементы.Переместить(Элемент, Элементы.ДеревоМодели, Элементы.ДеревоМодели.ПодчиненныеЭлементы[НомерКолонки]);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДеревоМоделиСделаноПриИзмененииНаСервере(Этап, Отказ)
	
	Если ТипЗнч(Этап) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
		
		УстановкаРазрешена = Истина;
	
		// Проверим наличие файлов с необходимым контекстом
		СписокНедостающихКонтекстов = Новый СписокЗначений;
			
		CRM_УправлениеПроектамиВызовСервера.ПроверитьНаличиеФайловСНужнымКонтекстом(Этап, СписокНедостающихКонтекстов);
			
		Если СписокНедостающихКонтекстов.Количество() > 0 Тогда
			УстановкаРазрешена = Ложь; 
		КонецЕсли;
		
		Если УстановкаРазрешена Тогда
			ДокОбъект = Этап.ПолучитьОбъект();
			ДокОбъект.ФактическаяДатаОкончания = ТекущаяДатаСеанса();
			
			Если ДокОбъект.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
				ДокОбъект.ФактическаяДатаНачала = ТекущаяДатаСеанса();
			Иначе
				Если НЕ ЗначениеЗаполнено(ДокОбъект.ФактическаяДатаНачала) Тогда
					ДокОбъект.ФактическаяДатаНачала = ДокОбъект.ПлановаяДатаНачала;
				КонецЕсли;
			КонецЕсли;
			
			Если ДокОбъект.ФактическаяДатаНачала <> Дата(1, 1, 1) Тогда
				ДокОбъект.ФактическаяДлительность = ((НачалоДня(ДокОбъект.ФактическаяДатаОкончания) - НачалоДня(ДокОбъект.ФактическаяДатаНачала)) / 86400) 
					+ 1;
			Иначе
				ДокОбъект.ФактическаяДлительность = 0;
			КонецЕсли;
			
			Если ЕстьПраваНаПроект Тогда
				ДокОбъект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Проверена;
			Иначе
				ДокОбъект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Выполнена;
			КонецЕсли;
			ДокОбъект.Записать();
			Прогноз = CRM_УправлениеПроектамиВызовСервера.ПолучитьПрогноз(Объект.Ссылка);
			Если Объект.CRM_ПрогнозЗавершенияПроекта <> Прогноз Тогда
				Объект.CRM_ПрогнозЗавершенияПроекта = Прогноз;
				Модифицированность = Истина;
			КонецЕсли;
			Отказ = Ложь;
		Иначе
			Если Этап.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап") Тогда
				Сообщение = НСтр("ru = 'Для завершения задачи необходимо присоединить файл(ы) следующего контекста:'");
			Иначе
				Сообщение = НСтр("ru = 'Для завершения контрольной точки необходимо присоединить файл(ы) следующего контекста:'");
			КонецЕсли;
			Для каждого ЭлементСписка Из СписокНедостающихКонтекстов Цикл
				Сообщение  = Сообщение + Символы.ПС + "  - " + ЭлементСписка.Значение;
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
			Отказ = Истина;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветДляКолонкиСделано(ОтветПользователя, Параметр) Экспорт 
	
	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
		СнятьФлажокНаСервере(Параметр.Этап);
	Иначе
		Параметр.Сделано = Истина;
	КонецЕсли;
	Прочитать();
	ОбновитьОтображениеДанных();
	РазвернутьВсеДерево(ДеревоМодели.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветДляКолонкиСделаноУГанта(ОтветПользователя, Параметр) Экспорт 
	
	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
		СнятьФлажокНаСервере(Параметр.Этап);
	Иначе
		Параметр.Сделано = Истина;
	КонецЕсли;
	Прочитать();
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервере
Процедура СнятьФлажокНаСервере(Этап)
	
	ДокОбъект = Этап.ПолучитьОбъект();
	ДокОбъект.ФактическаяДатаОкончания = "";
	Если ДокОбъект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
		ДокОбъект.ФактическаяДатаНачала = "";
		ДокОбъект.ФактическаяДлительность = 0;
	КонецЕсли;
	ДокОбъект.ФактическаяДлительность = 0;
	
	ДокОбъект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе;
	ДокОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиСделаноПриИзменении(Элемент)
	
	СтрокаТовары = ДеревоМодели.НайтиПоИдентификатору(Элементы.ДеревоМодели.ТекущаяСтрока);	
		
	Если Объект.CRM_Статус <> ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.ВРаботе") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для смены статуса проект и этап должны иметь статус ""В работе""'"));
		СтрокаТовары.Сделано = НЕ СтрокаТовары.Сделано;
		Возврат;
	КонецЕсли;
		
	Если НЕ СтрокаТовары.Сделано Тогда
		Если ЕстьПраваНаПроект
			 ИЛИ СтрокаТовары.Статус  = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Выполнена") Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветДляКолонкиСделано", ЭтотОбъект, СтрокаТовары);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Снять признак выполнения?'"), РежимДиалогаВопрос.ДаНет);		
		Иначе
			СтандартнаяОбработка = Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нельзя отменять выполнение завершенной задачи'"));
		КонецЕсли;
	Иначе
		Если СтрокаТовары.Статус <> ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для смены статуса проект и этап должны иметь статус ""В работе""'"));
			СтрокаТовары.Сделано = НЕ СтрокаТовары.Сделано;
			Возврат;
		КонецЕсли;
		Отказ = Ложь;
		ДеревоМоделиСделаноПриИзмененииНаСервере(СтрокаТовары.Этап, Отказ);
		Если Отказ Тогда
			СтрокаТовары.Сделано = НЕ СтрокаТовары.Сделано;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеДерево(КоллекцияЭлементов) 
	
	Для каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
		CRM_ОбщегоНазначенияКлиентСервер.РазвернутьТаблицуФормы(Элементы.ДеревоМодели,
			 ЭлементКоллекции.ПолучитьИдентификатор());
		
		ВложенныеЭлементыКоллекции = ЭлементКоллекции.ПолучитьЭлементы();
		Если (ВложенныеЭлементыКоллекции.Количество() > 0) Тогда
			РазвернутьВсеДерево(ВложенныеЭлементыКоллекции);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиТабличногоДокумента(Развернуть = Истина)
	
	СтрокиДерева = ДеревоМодели.ПолучитьЭлементы()[0].ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		СуффиксИмени = ?(Развернуть, "_Развернуть", "_Свернуть");
		ОбратныйСуффикс = ?(Развернуть, "_Свернуть", "_Развернуть");
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабличныйДокументМодели.Рисунки,
				СтрокаДерева.АдресСтрокиОбласти + СуффиксИмени) Тогда
			Рисунок = ТабличныйДокументМодели.Рисунки[СтрокаДерева.АдресСтрокиОбласти + СуффиксИмени];
			Рисунок.Картинка = БиблиотекаКартинок["CRM" + ОбратныйСуффикс];
			Рисунок.Имя = СтрокаДерева.АдресСтрокиОбласти + ОбратныйСуффикс;
		КонецЕсли;
		
		СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(СтрокаДерева.ПолучитьЭлементы(), Развернуть);
		СвернутьРазвернутьТочкуДиаграммы(СтрокаДерева.ИдентификаторСтроки, Развернуть);
		
	КонецЦикла;
	
КонецПроцедуры // РазвернутьСтрокиТабличногоДокумента()

&НаКлиенте
Процедура ПечатьВыводПодключаемый()
	
	ИдентификаторПечатнойФормы = "Проект";
	НазваниеПечатнойФормы = НСтр("ru = 'Проект'");
	
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
	ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
	ПечатнаяФорма.СинонимМакета = НазваниеПечатнойФормы;
	ПечатнаяФорма.ТабличныйДокумент = ТабДок;
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = НазваниеПечатнойФормы;
	
	КлючУникальности = Строка(Новый УникальныйИдентификатор);
	
	ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати");
	ПараметрыОткрытия.ПараметрКоманды = Новый Массив;
	ПараметрыОткрытия.ПараметрыПечати = Новый Структура;
	ПараметрыОткрытия.ПараметрыПечати.Вставить("ЗаголовокФормы", "Печать проекта");
	
	ПараметрыОткрытия.Вставить("КоллекцияПечатныхФорм", КоллекцияПечатныхФорм);
	ПараметрыОткрытия.Вставить("ОбъектыПечати", Новый СписокЗначений);
	
	ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, ЭтотОбъект, КлючУникальности);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабличныйДокументМодели.Рисунки,
		"ДиаграммаГанта") Тогда
		ДиаграммаРисунок = ТабличныйДокументМодели.Рисунки["ДиаграммаГанта"];
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Для печати необходимо перейти в режим ""Диаграмма Ганта""'"));
		Возврат;
	КонецЕсли;

	ОсновнойЭкран = ПолучитьИнформациюЭкрановКлиента()[0];
	DPI = ?(ОсновнойЭкран.DPI > 0, ОсновнойЭкран.DPI,
		 96); // веб-клиент только в IE возвращает DPI (96 "стандартное" значение)
	
	ПечатьНаСервере(DPI, ТабличныйДокументМодели);
	
	ПодключитьОбработчикОжидания("ПечатьВыводПодключаемый", 1, Истина);

КонецПроцедуры

&НаСервере
Процедура ПечатьНаСервере(DPI, ТабличныйДокументГант)
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = Справочники.Проекты.ПолучитьМакет("CRM_ПечатьПроектовМакет");

	Шапка = Макет.ПолучитьОбласть("ШапкаДокумента");
	Шапка.Параметры.Заголовок = Объект.Наименование;
	Шапка.Параметры.Партнер = Объект.CRM_Партнер;
	
	Шапка.Параметры.ДатаСтарта = Формат(Объект.ПлановаяДатаНачала, "ДФ=dd.MM.yyyy") + " (" 
		+ Формат(Объект.ПлановаяДатаНачала, "Л=ru_RU; ДФ='ддд'") 
		+ ")";
	Шапка.Параметры.ДатаПечати = Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy");
	
	ШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	
	ТабДок.Вывести(Шапка);
	ТабДок.Вывести(ШапкаТаблицы);
	
	СтрокаТаблицы = Макет.ПолучитьОбласть("Строка");
	Номер = 1;
	
	СтрокаТЧНачальная = Шапка.ВысотаТаблицы + ШапкаТаблицы.ВысотаТаблицы;
	СтрокаТЧКонечная  = СтрокаТЧНачальная + ТабличныйДокументГант.ВысотаТаблицы - 3;
	НомерКолонкиГанта = 11;
	
	ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
	
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		ВывестиСтрокуТабличногоДокументаРекурсивно(СтрокаДерева.ПолучитьЭлементы(), СтрокаТаблицы, "");
	КонецЦикла;
	
	Подвал = Макет.ПолучитьОбласть("ПодвалДокумента");
	Подвал.Параметры.НашаОрганизация = Объект.CRM_Организация;
	Подвал.Параметры.ПартнерПодвал = Объект.CRM_Партнер;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Вывести(Подвал);
	
	// Вывод диаграммы Ганта
	// Получим картинку диаграммы Ганта
	ДиаграммаРисунок = ТабличныйДокументГант.Рисунки["ДиаграммаГанта"];
	ДиаграммаГанта   = ДиаграммаРисунок.Объект;
	КартинкаГанта    = Диаграммаганта.ПолучитьКартинку(ДиаграммаРисунок.Ширина * DPI / 25.4,
		ДиаграммаРисунок.Высота * DPI / 30, ФорматКартинки.PNG);

	
	ТабДок.Область(, НомерКолонкиГанта, , НомерКолонкиГанта).ШиринаКолонки = ДиаграммаРисунок.Ширина;
	
	ОбластьГанта = ТабДок.Область(СтрокаТЧНачальная, НомерКолонкиГанта, СтрокаТЧКонечная, НомерКолонкиГанта);
	ОбластьГанта.Объединить();
	ОбластьГанта.Картинка = КартинкаГанта;
	ОбластьГанта.РазмерКартинки = РазмерКартинки.Пропорционально;
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ОбластьГанта.Обвести(, , Линия, Линия);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтрокуТабличногоДокументаРекурсивно(ЭлементыДерева, СтрокаТаблицы, СтрокаНомера)

	Номер = 1;
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		
		СтрокаНомераТек = СтрокаНомера + Номер;
		СтрокаТаблицы.Параметры.Номер 		   = СтрокаНомераТек;
		СтрокаТаблицы.Параметры.Этап 		   = СтрокаДерева.Этап;
		СтрокаТаблицы.Параметры.Отвественный   = СтрокаДерева.ОтветственныйИсполнитель;
		СтрокаТаблицы.Параметры.ДатаНачала	   = Формат(СтрокаДерева.ПлановаяДатаНачала, "ДФ=dd.MM.yyyy");
		СтрокаТаблицы.Параметры.ДатаЗавершения = Формат(СтрокаДерева.ПлановаяДатаОкончания, "ДФ=dd.MM.yyyy");
		СтрокаТаблицы.Параметры.ВсегоДней	   = СтрокаДерева.ПлановаяДлительность;
		
		Если СтрокаДерева.Сделано ИЛИ НЕ ЗначениеЗаполнено(СтрокаДерева.ПлановаяДатаОкончания) ИЛИ
			 НачалоДня(СтрокаДерева.ПлановаяДатаОкончания) >= НачалоДня(ТекущаяДатаСеанса()) Тогда
			СтрокаТаблицы.Параметры.Просрочено = 0;
		Иначе
			СтрокаТаблицы.Параметры.Просрочено = CRM_УправлениеПроектамиКлиентСервер.РазностьДатВДнях(ТекущаяДатаСеанса(),
				 СтрокаДерева.ПлановаяДатаОкончания); 
			
		КонецЕсли;
			
		ОбластьНомера = СтрокаТаблицы.Область(1, 2, 1, 2);
		
		ОбластьЭтапа = СтрокаТаблицы.Область(1, 3, 1, 3);
		ОбластьЭтапа.Отступ =  СтрЧислоВхождений(СтрокаНомера, ".") * 2;
		Если ТипЗнч(СтрокаДерева.Этап) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
			ОбластьЭтапа.Шрифт  = Новый Шрифт(, , Истина);
			ОбластьНомера.Шрифт = Новый Шрифт(, , Истина);
		Иначе
			ОбластьЭтапа.Шрифт  = Новый Шрифт(, , Ложь);
			ОбластьНомера.Шрифт = Новый Шрифт(, , Ложь);
		КонецЕсли;
		
		ТабДок.Вывести(Строкатаблицы);
		
		ВывестиСтрокуТабличногоДокументаРекурсивно(СтрокаДерева.ПолучитьЭлементы(), СтрокаТаблицы, СтрокаНомераТек + ".");
		
		Номер = Номер + 1;
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиСтрокуТабличногоДокументаРекурсивно()

&НаКлиенте
Процедура CRM_СтатусПриИзменении(Элемент)
	
	Если Объект.CRM_Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.Завершен") Тогда
		
		Результат = ПроверитьВозможностьЗавершения();
		Если Результат Тогда
			Объект.Завершен 				 = Истина;
			Элементы.ДатаНачала.Видимость	 = Истина;
			Элементы.ДатаОкончания.Видимость = Истина;
			Элементы.CRM_Прогноз.Видимость 	 = Истина;
			УстановитьДатуОкончания();
			Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
				Объект.ДатаНачала = Объект.ПлановаяДатаНачала;
			КонецЕсли;
			УправлениеВидимостью();
		Иначе
			Объект.CRM_Статус = ПредыдущийСтатусПроекта;
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Объект.CRM_Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.Планируется") Тогда
		
		Элементы.ПлановаяДатаНачала.ТолькоПросмотр 	  = Ложь;
		Элементы.ПлановаяДатаОкончания.ТолькоПросмотр = Ложь;
		Элементы.ДатаНачала.Видимость	 			  = Ложь;
		Элементы.ДатаОкончания.Видимость 			  = Ложь;
		Элементы.CRM_Прогноз.Видимость 	 			  = Ложь;
		УправлениеВидимостью();
		
	ИначеЕсли Объект.CRM_Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.ВРаботе") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СтатусВРаботеПродолжение", ЭтотОбъект, ПредыдущийСтатусПроекта);
		ПоказатьВопрос(ОписаниеОповещения, "Внимание,
			| после старта проекта плановые даты будут недоступны для изменения. Продолжить?",
			 РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Объект.CRM_Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.Отменен") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СтатусОтмененПродолжение", ЭтотОбъект, ПредыдущийСтатусПроекта);
		ПоказатьВопрос(ОписаниеОповещения,
			 "Внимание! При записи отмененного проекта будут отменены все активные задачи. Продолжить?",
			 РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
	ПредыдущийСтатусПроекта = Объект.CRM_Статус;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДатуОкончания()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
    |	МАКСИМУМ(CRM_ЭтапКалендарногоПлана.ФактическаяДатаОкончания) КАК ФактическаяДатаОкончания
    |ИЗ
    |	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
    |ГДЕ
    |	CRM_ЭтапКалендарногоПлана.ФактическаяДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
    |	И CRM_ЭтапКалендарногоПлана.Проект = &Проект";
	
	Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.ДатаОкончания = Выборка.ФактическаяДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьЗавершения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_ЭтапКалендарногоПлана.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
	|ГДЕ
	|	CRM_ЭтапКалендарногоПлана.Проект = &Проект
	|	И НЕ CRM_ЭтапКалендарногоПлана.Статус В (&Статусы)
	|	И НЕ CRM_ЭтапКалендарногоПлана.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
	Статусы = Новый СписокЗначений();
	Статусы.Добавить(Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Проверена);
	Статусы.Добавить(Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Отменена);
	Запрос.УстановитьПараметр("Статусы", Статусы);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВсеЭтапыЗавершены = РезультатЗапроса.Пустой();
	
	Если НЕ ВсеЭтапыЗавершены Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Текст = НСтр("ru = 'Завершение проекта невозможно! По данному проекту есть незавершенные задачи/контрольные точки:'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст  = "";
		Пока Выборка.Следующий() Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("   - " + Выборка.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВсеЭтапыЗавершены;
	
КонецФункции 

&НаКлиенте
Процедура СтатусВРаботеПродолжение(ОтветПользователя, СтатусПроекта) Экспорт 
	
	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
		Элементы.ПлановаяДатаОкончания.Видимость   = Истина;
		Элементы.ДатаНачала.Видимость 			   = Истина;
		Элементы.ДатаОкончания.Видимость 		   = Истина;
		Элементы.CRM_Прогноз.Видимость 			   = Истина;
		Ответ 									   = Истина;
		//ПоказатьОповещениеПользователя(,,
			//НСтр("ru='Выполняется установка статуса ""В работе"" для всех этапов проекта...'"),
			//БиблиотекаКартинок.CRM_Ожидание);
		ОбработатьОтветПользователяНаСервере(Ответ);
		// ПоказатьОповещениеПользователя(,,НСтр("ru = 'Установка статусов завершена!'"));
		// Необходимо записать проект, иначе есть вероятность что запись отменят, а этапы уже статус сменили.
		Записать();
		Элементы.ПлановаяДатаНачала.ТолькоПросмотр    = Истина;
		Элементы.ПлановаяДатаОкончания.ТолькоПросмотр = Истина;
		
		ДеревоМоделиОбновить(Неопределено);
		
	Иначе
		Объект.CRM_Статус = СтатусПроекта;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтмененПродолжение(ОтветПользователя, СтатусПроекта) Экспорт 
	
	Если НЕ ОтветПользователя = КодВозвратаДиалога.Да Тогда
		Объект.CRM_Статус = СтатусПроекта;
		УправлениеВидимостью();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОтветПользователяНаСервере(Ответ)
	
	Если Ответ Тогда
		
		УстановитьДатуНачалаПроектаИПрогноз();
		
		// // Изменим у этапов проекта статус на "В работе"
		// Запрос = Новый Запрос;
		//ТекстЗапроса = "ВЫБРАТЬ
		//               |	CRM_ЭтапКалендарногоПлана.Ссылка КАК Ссылка
		//               |ИЗ
		//               |	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
		//               |ГДЕ
		//               |	CRM_ЭтапКалендарногоПлана.Проект = &Проект
		//               |	И CRM_ЭтапКалендарногоПлана.ПлановаяДатаНачала <= &ТекущаяДата
		//               |	И CRM_ЭтапКалендарногоПлана.Статус = &Статус
		//               |	И НЕ CRM_ЭтапКалендарногоПлана.ПометкаУдаления";
		//
		//Запрос.Текст = ТекстЗапроса;
		//Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
		//Запрос.УстановитьПараметр("ТекущаяДата", КонецДня(ТекущаяДата()));
		//Запрос.УстановитьПараметр("Статус", Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Запланирована);
		//
		//Выборка = Запрос.Выполнить().Выбрать();
		//ФактическаяДатаНачала = ТекущаяДатаСеанса();
		// Пока Выборка.Следующий() Цикл
		//	ЭтапОбъект = Выборка.Ссылка.ПолуЧитьОбъект();
		//	ЭтапОбъект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе;
		//	Если ЭтапОбъект.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.Этап Тогда
		//		ЭтапОбъект.ФактическаяДатаНачала = ФактическаяДатаНачала;
		//	КонецЕсли;
		//	ЭтапОбъект.Записать();
		//КонецЦикла;
	
	Иначе
		// Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//	Объект.CRM_Статус = Перечисления.CRM_СтатусыПроектов.Планируется;
		// Иначе
		//	Объект.CRM_Статус = Объект.CRM_Статус;
		//	Если Объект.CRM_Статус <> Перечисления.CRM_СтатусыПроектов.ВРаботе Тогда
		//		Элементы.ПлановаяДатаНачала.ТолькоПросмотр	  = Ложь;
		//		Элементы.ПлановаяДатаОкончания.ТолькоПросмотр = Ложь;
		//		Элементы.ДатаНачала.Видимость 	 = Ложь;
		//		Элементы.ДатаОкончания.Видимость = Ложь;
		//		Элементы.CRM_Прогноз.Видимость   = Ложь;
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДатуНачалаПроектаИПрогноз()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МИНИМУМ(CRM_ЭтапКалендарногоПлана.ФактическаяДатаНачала) КАК ДатаНачала
	               |ИЗ
	               |	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
	               |ГДЕ
	               |	CRM_ЭтапКалендарногоПлана.Проект = &Проект
	               |	И CRM_ЭтапКалендарногоПлана.ФактическаяДатаНачала <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	
	Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Объект.ДатаНачала = Выборка.ДатаНачала;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА CRM_ЭтапКалендарногоПлана.ФактическаяДатаОкончания >= CRM_ЭтапКалендарногоПлана.ПлановаяДатаОкончания
	               |				ТОГДА CRM_ЭтапКалендарногоПлана.ФактическаяДатаОкончания
	               |			ИНАЧЕ CRM_ЭтапКалендарногоПлана.ПлановаяДатаОкончания
	               |		КОНЕЦ) КАК Прогноз
	               |ИЗ
	               |	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
	               |ГДЕ
	               |	CRM_ЭтапКалендарногоПлана.Проект = &Проект";
	
	Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Объект.CRM_ПрогнозЗавершенияПроекта = Выборка.Прогноз;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПометитьНаУдалениеНаСервере(Этап)
	
	ЭтапОбъект = Этап.ПолучитьОбъект();
	ЭтапОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеЭтапЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекущийЭтап = Элементы.ДеревоМодели.ТекущиеДанные.Этап;
		ПометитьНаУдалениеНаСервере(ТекущийЭтап);
		ДеревоМоделиОбновить(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	Если Элементы.ДеревоМодели.ТекущиеДанные  = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭтап = Элементы.ДеревоМодели.ТекущиеДанные.Этап;
	Если ЗначениеЗаполнено(ТекущийЭтап) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПометитьНаУдалениеЭтапЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Удалить текущий элемент?'"), РежимДиалогаВопрос.ДаНет); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьКопированияЗадачи()
	
	ТекДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Этап = Неопределено;
	Иначе
		Этап = ТекДанные.Этап;
	КонецЕсли;
	Элементы.ДеревоМоделиКнопкаКопироватьЗадачу.Доступность =
		(ТипЗнч(Этап) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана"));
	Элементы.ДеревоМоделиКонтекстноеМенюКопироватьЗадачу.Доступность =
		Элементы.ДеревоМоделиКнопкаКопироватьЗадачу.Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьЗадачу(Команда)
	
	ТекДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Этап = ТекДанные.Этап;
	Если Этап = Неопределено ИЛИ ТипЗнч(Этап) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
		Возврат;
	Иначе
		ОткрытьФорму("Документ.CRM_ЭтапКалендарногоПлана.Форма.ФормаДокумента",
			 Новый Структура("ЗначениеКопирования", Этап),
			 ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиЭтап(ЭтапПриемник, ЭтапПереносимый)
	
	ЭтапПереносимыйОбъект = ЭтапПереносимый.ПолучитьОбъект();
	
	Если ТипЗнч(ЭтапПереносимыйОбъект) = Тип("СправочникОбъект.CRM_ЭтапыПроектов") Тогда
		ЭтапПереносимыйОбъект.Родитель = ЭтапПриемник;
	ИначеЕсли ТипЗнч(ЭтапПереносимыйОбъект) = Тип("ДокументОбъект.CRM_ЭтапКалендарногоПлана") Тогда
		ЭтапПереносимыйОбъект.Этап = ЭтапПриемник;
	Иначе 
		Возврат;
	КонецЕсли;
	
	ЭтапПереносимыйОбъект.Записать();
	
	ЗаполнитьДеревоПоЭтапам();
	УстановитьКурсорНаЭтап(ЭтапПереносимый);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьЭтапКалендарногоПлана(Этап, ДанныеЭтапаКалендарногоПлана)
	
	ЭтапКалендарногоПлана = Этап.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(ЭтапКалендарногоПлана, ДанныеЭтапаКалендарногоПлана);
	ЭтапКалендарногоПлана.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьЗацикливанияУровнейПриПереносе(ЭтапПриемник, ЭтапПереносимый)
	
	Если ЭтапПриемник = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат ЭтапПриемник.ПринадлежитЭлементу(ЭтапПереносимый);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПеренестиДанныеТабличногоДокументаВЭтапКалендарногоПлана(ОбластьРедактирования)
	
	ТекДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Значение = ОбластьРедактирования.Значение;
	Если ПриИзмененииЗначенияРеквизитыЭтапа(ОбластьРедактирования.Расшифровка,
		 ТекДанные.ПолучитьИдентификатор(),
		 Значение) Тогда
		ДеревоМоделиОбновить(Неопределено);
	Иначе
		ОбластьРедактирования.Значение = Значение;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДеревоМоделиПриАктивизацииСтроки(Элемент)
	ДоступностьКопированияЗадачи();
КонецПроцедуры

#КонецОбласти // РаботаСЭтапами

#КонецОбласти // СлужебныеПроцедурыИФункции
