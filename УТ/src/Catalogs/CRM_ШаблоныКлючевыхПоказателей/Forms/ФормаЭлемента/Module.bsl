
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПризнакПредопределенногоМакета = Врег("Предопределенный");
	ДлинаПризнакаПредопределенногоМакета = СтрДлина(ПризнакПредопределенногоМакета);
	
	Для каждого Макет Из Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).Макеты Цикл
		Если Макет.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных Тогда
			Если ВРег(Прав(Макет.Имя, ДлинаПризнакаПредопределенногоМакета)) = ПризнакПредопределенногоМакета Тогда
				Элементы.СхемаКомпоновкиДанных.СписокВыбора.Добавить(Макет.Имя, Макет.Синоним);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Параметры.ЗначениеКопирования.Пустая() Тогда
		СхемаИНастройки = Справочники.CRM_ШаблоныКлючевыхПоказателей.ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(
			Объект.Ссылка, Объект.СхемаКомпоновкиДанных);
	Иначе
		СхемаИНастройки = Справочники.CRM_ШаблоныКлючевыхПоказателей.ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(
			Параметры.ЗначениеКопирования, Параметры.ЗначениеКопирования.СхемаКомпоновкиДанных);
	КонецЕсли;
	
	Если ПустаяСтрока(СхемаИНастройки.Описание) Тогда
		Объект.СхемаКомпоновкиДанных = "";
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.СхемаКомпоновкиДанных) Тогда
		Элементы.СхемаКомпоновкиДанных.СписокВыбора.Добавить("", НСтр("ru='Произвольный';en='The arbitrary'"));
	КонецЕсли;
	
	Если Параметры.Свойство("Виджет") Тогда
		Объект.Виджет = Параметры.Виджет;
	КонецЕсли;
	
	Если Параметры.ЗначениеКопирования.Пустая() Тогда
		Адреса = АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище();
	Иначе
		Адреса = АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище(Параметры.ЗначениеКопирования);
	КонецЕсли;
	
	Если Объект.СхемаКомпоновкиДанных = "" Тогда
		Объект.СхемаКомпоновкиДанных = Адреса.НаименованиеСхемы;
		Объект.СхемаКомпоновкиДанныхРасшифровки = Адреса.НаименованиеСхемы;
	КонецЕсли;
	
	АдресСхемыКомпоновкиДанных = Адреса.СхемаКомпоновкиДанных;
	АдресНастроекКомпоновкиДанных = Адреса.НастройкиКомпоновкиДанных;
	АдресСхемыКомпоновкиДанныхРасшифровки = Адреса.СхемаКомпоновкиДанныхРасшифровки;
	АдресНастроекКомпоновкиДанныхРасшифровки = Адреса.НастройкиКомпоновкиДанныхРасшифровки;
	Элементы.ЗаполнитьСтандартнымиНастройками.Видимость = Объект.Предопределенный;
	
	Если Объект.ЦелевойТренд = "Интервал" Тогда
		Объект.ПериодАнализа = "День";
		Элементы.ПериодАнализа.Доступность = Ложь;
	Иначе	
		Элементы.ПериодАнализа.Доступность = Истина;
	КонецЕсли;
	
	Элементы.ТекстЗапросаРасчетаДинамикиПоказателя.ТолькоПросмотр = Объект.Предопределенный;
	Элементы.РассчитыватьРегламентнымЗаданием.Доступность = Не Объект.Предопределенный;
	Элементы.ОткрытьКонструкторЗапроса.Доступность = Не Объект.Предопределенный;
	Элементы.ТекстЗапросаРасчетаДинамикиПоказателя.Видимость = Объект.РассчитыватьРегламентнымЗаданием;
	
	Если Объект.Предопределенный Тогда
		Элементы.ГруппаСхемаКомпоновкиДанных1.Видимость = Ложь;
	КонецЕсли;
	
	СоздатьОбновитьПараметрыИзСхемыКомпоновкиДанных();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ШаблоныКлючевыхПоказателей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_ШаблоныКлючевыхПоказателей КАК CRM_ШаблоныКлючевыхПоказателей
	|ГДЕ
	|	CRM_ШаблоныКлючевыхПоказателей.Ссылка <> &Ссылка
	|	И НЕ CRM_ШаблоныКлючевыхПоказателей.ЭтоГруппа
	|	И CRM_ШаблоныКлючевыхПоказателей.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Наименование", Объект.Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Не Выборка.Ссылка.Пустая() Тогда
			ОбщегоНазначения.СообщитьПользователю("Показатель с таким наименование уже существует!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СхемаКомпоновкиДанныхДляЗаписи = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	Для Каждого ТекущийПараметрСхемыКомпоновкиДанных Из СхемаКомпоновкиДанныхДляЗаписи.Параметры Цикл
		Если ТекущийПараметрСхемыКомпоновкиДанных.ОграничениеИспользования Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = "ПараметрыСКД_" + ТекущийПараметрСхемыКомпоновкиДанных.Имя;
		ТекущийПараметрСхемыКомпоновкиДанных.Значение = ЭтотОбъект[ИмяРеквизита];
	КонецЦикла;
	
	ТекущийОбъект.ХранилищеСхемыКомпоновкиДанных =
		Новый ХранилищеЗначения(СхемаКомпоновкиДанныхДляЗаписи);
	ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных =
		Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных));
	ТекущийОбъект.ХранилищеСхемыКомпоновкиДанныхРасшифровки =
		Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхРасшифровки));
	ТекущийОбъект.ХранилищеНастроекКомпоновкиДанныхРасшифровки =
		Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанныхРасшифровки));
	
	Если ТекущийОбъект.Включен И Не ТекущийОбъект.Ссылка.Включен Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗапуститьРасчетПоказателя");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЦелевойТрендПриИзменении(Элемент)
	Если Объект.ЦелевойТренд = "Интервал" Тогда
		Объект.ПериодАнализа = "День";
		Элементы.ПериодАнализа.Доступность = Ложь;
	Иначе	
		Элементы.ПериодАнализа.Доступность = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьРегламентнымЗаданиемПриИзменении(Элемент)
	Элементы.ТекстЗапросаРасчетаДинамикиПоказателя.Видимость = Объект.РассчитыватьРегламентнымЗаданием;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПослеРедактированияСхемы(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Если ПустаяСтрока(РезультатЗакрытия.ИмяТекущегоШаблонаСКД) 
				И Элементы.СхемаКомпоновкиДанных.СписокВыбора.НайтиПоЗначению("") = Неопределено Тогда
			Элементы.СхемаКомпоновкиДанных.СписокВыбора.Добавить("", НСтр("ru='Произвольный';en='The arbitrary'"));
		КонецЕсли;
		
		Если ПустаяСтрока(РезультатЗакрытия.ИмяТекущегоШаблонаСКД) Тогда
			Объект.СхемаКомпоновкиДанных = "ШаблоннаяСхемаКомпоновкиДанныхПредопределенный";
		Иначе
			Объект.СхемаКомпоновкиДанных = РезультатЗакрытия.ИмяТекущегоШаблонаСКД;
		КонецЕсли;
		
		Если РезультатЗакрытия.Свойство("АдресХранилищаНастройкиКомпоновщика") Тогда
			АдресНастроекКомпоновкиДанных = РезультатЗакрытия.АдресХранилищаНастройкиКомпоновщика;
		КонецЕсли;
		
		СоздатьОбновитьПараметрыИзСхемыКомпоновкиДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияСхемыРасшифровки(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Если ПустаяСтрока(РезультатЗакрытия.ИмяТекущегоШаблонаСКД) 
			И Элементы.СхемаКомпоновкиДанных.СписокВыбора.НайтиПоЗначению("") = Неопределено Тогда
			Элементы.СхемаКомпоновкиДанных.СписокВыбора.Добавить("", НСтр("ru='Произвольный';en='The arbitrary'"));
			
		КонецЕсли;
		
		Объект.СхемаКомпоновкиДанныхРасшифровки = РезультатЗакрытия.ИмяТекущегоШаблонаСКД;
		
		Если РезультатЗакрытия.Свойство("АдресХранилищаНастройкиКомпоновщика") Тогда
			АдресНастроекКомпоновкиДанныхРасшифровки = РезультатЗакрытия.АдресХранилищаНастройкиКомпоновщика;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры	

&НаКлиенте
Процедура РедактироватьСхемуКомпоновкиДанных(Команда)
	
	// Открыть редактор настроек схемы компоновки данных
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр(
		"ru='Настройка шаблона расчета для целевого показателя ""%1""';
		|en='Set up calculation template for target indicator ""%1""'");
	
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = СтрЗаменить(
		ЗаголовокФормыНастройкиСхемыКомпоновкиДанных, "%1", Объект.Наименование);
	
	ОповещениеЗакрытия = Новый ОписаниеОповещения(
		"ПослеРедактированияСхемы", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НеПомещатьНастройкиВСхемуКомпоновкиДанных",	Истина);
	ПараметрыФормы.Вставить("НеРедактироватьСхемуКомпоновкиДанных",			Ложь);
	ПараметрыФормы.Вставить("НеНастраиватьУсловноеОформление",				Истина);
	ПараметрыФормы.Вставить("НеНастраиватьПараметры",						Истина);
	ПараметрыФормы.Вставить("НеНастраиватьПорядок",							Истина);
	ПараметрыФормы.Вставить("НеНастраиватьВыбор",							Истина);
	
	ПараметрыФормы.Вставить("УникальныйИдентификатор",			УникальныйИдентификатор);
	ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных",		АдресСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("АдресНастроекКомпоновкиДанных",	АдресНастроекКомпоновкиДанных);
	ПараметрыФормы.Вставить("Заголовок",						ЗаголовокФормыНастройкиСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("ИсточникШаблонов",					Объект.Ссылка);
	ПараметрыФормы.Вставить("ИмяШаблонаСКД",					Объект.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("ВозвращатьИмяТекущегоШаблонаСКД",	Истина);
	
	АдресаНастроек = ОткрытьФорму(
		"ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных", ПараметрыФормы, ЭтотОбъект, , , , ОповещениеЗакрытия);
	
	// УстановитьДоступностьИВидимостьЭлементовФормы(Объект, Элементы, РазмерностьДоступна());
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСхемуКомпоновкиДанныхРасшифровки(Команда)
	
	// Открыть редактор настроек схемы компоновки данных
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр("ru='Настройка шаблона расшифровки для целевого показателя ""%1""';
		|en='Configure the decryption template for target indicator ""%1""'");
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = СтрЗаменить(ЗаголовокФормыНастройкиСхемыКомпоновкиДанных,
		 "%1",
		 Объект.Наименование);
	ОповещениеЗакрытия = Новый ОписаниеОповещения("ПослеРедактированияСхемыРасшифровки", ЭтотОбъект);
	АдресаНастроек = ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных",
		Новый Структура(
						"НеПомещатьНастройкиВСхемуКомпоновкиДанных,
						|НеРедактироватьСхемуКомпоновкиДанных,
						|НеНастраиватьУсловноеОформление,
						|НеНастраиватьВыбор,
						|НеНастраиватьПорядок,
						|УникальныйИдентификатор,
						|АдресСхемыКомпоновкиДанных,
						|АдресНастроекКомпоновкиДанных,
						|Заголовок,
						|ИсточникШаблонов,
						|ИмяШаблонаСКД,
						|ВозвращатьИмяТекущегоШаблонаСКД",
						Истина,
						Ложь,
						Истина,
						Истина,
						Истина,
						УникальныйИдентификатор,
						АдресСхемыКомпоновкиДанныхРасшифровки,
						АдресНастроекКомпоновкиДанныхРасшифровки,
						ЗаголовокФормыНастройкиСхемыКомпоновкиДанных,
						Объект.Ссылка,
						Объект.СхемаКомпоновкиДанныхРасшифровки,
						Истина), ЭтотОбъект, , , , ОповещениеЗакрытия);
	
	// УстановитьДоступностьИВидимостьЭлементовФормы(Объект, Элементы, РазмерностьДоступна());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтандартнымиНастройками(Команда)
	ПараметрыОповещения = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ОбработкаОтвета", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьВопрос(Оповещение, "Текущие настройки будут заменены стандартными.
	|Продолжить ?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Команда)
	#Если НЕ МобильныйКлиент Тогда
	ТекстЗапросаВФорме = СокрЛП(Объект.ТекстЗапросаРасчетаДинамикиПоказателя);
	КонструкторЗапроса = Новый КонструкторЗапроса(ТекстЗапросаВФорме);
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияКонструктораЗапроса", ЭтотОбъект, ДополнительныеПараметры);
	КонструкторЗапроса.Показать(Оповещение);
	#КонецЕсли
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере 
Функция АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище(ЭлементКопирования = Неопределено)
	
	Возврат Справочники.CRM_ШаблоныКлючевыхПоказателей.АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище(Объект,
		 ЭлементКопирования);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтандартнымиНастройкамиНаСервере()
	Справочники.CRM_ШаблоныКлючевыхПоказателей.ЗаполнитьПредопределенныеПоказатели(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтвета(Знач Результат, Знач Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСтандартнымиНастройкамиНаСервере();
		Прочитать();
		СоздатьОбновитьПараметрыИзСхемыКомпоновкиДанных();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияКонструктораЗапроса(ТекстЗапросаВФорме, ДополнительныеПараметры) Экспорт
	Если ТекстЗапросаВФорме <> Неопределено Тогда
		Объект.ТекстЗапросаРасчетаДинамикиПоказателя = ТекстЗапросаВФорме;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Виджеты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_Виджеты КАК Виджеты
	|ГДЕ
	|	Виджеты.КлючевойПоказатель = &Показатель");
	Запрос.Параметры.Вставить("Показатель", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Если Объект.Включен Тогда
			ВиджетОбъект = Справочники.CRM_Виджеты.СоздатьЭлемент();
			ВиджетОбъект.Наименование = Объект.Наименование;
			ВиджетОбъект.КлючевойПоказатель = Объект.Ссылка;
			ВиджетОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЗапуститьРасчетПоказателя") Тогда
		CRM_УправлениеЦелевымиПоказателямиСервер.ЗапуститьПересчетПоказателя(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьОбновитьПараметрыИзСхемыКомпоновкиДанных()
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	////////////////////////////////
	// 1. Реквизиты параметров СКД.
	
	СписокРеквизитовТипаСписка	= Новый СписокЗначений;
	
	МассивУдаляемыхРеквизитов	= Новый Массив;
	МассивДобавляемыхРеквизитов	= Новый Массив;
	
	// Массив удаляемых реквизитов.
	Для Каждого ТекущийЭлементГруппыПараметров Из Элементы.ГруппаПараметры.ПодчиненныеЭлементы Цикл
		МассивУдаляемыхРеквизитов.Добавить(ТекущийЭлементГруппыПараметров.Имя);
	КонецЦикла;
	
	// Массив добавляемых реквизитов.
	Для Каждого ТекущийПараметрСхемыКомпоновкиДанных Из СхемаКомпоновкиДанных.Параметры Цикл
		Если ТекущийПараметрСхемыКомпоновкиДанных.ОграничениеИспользования Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = "ПараметрыСКД_" + ТекущийПараметрСхемыКомпоновкиДанных.Имя;
		ИспользуемыйТипЗначения = ТекущийПараметрСхемыКомпоновкиДанных.ТипЗначения;
		
		Если ТекущийПараметрСхемыКомпоновкиДанных.ДоступенСписокЗначений Тогда
			ИспользуемыйТипЗначения = Новый ОписаниеТипов("СписокЗначений");
			
			СписокРеквизитовТипаСписка.Добавить(
				ТекущийПараметрСхемыКомпоновкиДанных.ТипЗначения, ИмяРеквизита);
		КонецЕсли;
		
		НовыйРеквизит = Новый РеквизитФормы(
			ИмяРеквизита, ИспользуемыйТипЗначения, ,
			ТекущийПараметрСхемыКомпоновкиДанных.Заголовок);
		
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	
	////////////////////////////////
	// 2. Элементы формы.
	
	МассивУдаляемыхЭлементов = Новый Массив;
	Для Каждого ТекущийЭлементГруппы Из Элементы.ГруппаПараметры.ПодчиненныеЭлементы Цикл
		МассивУдаляемыхЭлементов.Добавить(ТекущийЭлементГруппы);
	КонецЦикла;
	
	Для Каждого ТекущийЭлементГруппы Из МассивУдаляемыхЭлементов Цикл
		Элементы.Удалить(ТекущийЭлементГруппы);
	КонецЦикла;
	
	Для Каждого ТекущийПараметрСхемыКомпоновкиДанных Из СхемаКомпоновкиДанных.Параметры Цикл
		Если ТекущийПараметрСхемыКомпоновкиДанных.ОграничениеИспользования Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = "ПараметрыСКД_" + ТекущийПараметрСхемыКомпоновкиДанных.Имя;
		
		//////////////////
		// а. Поле формы.
		
		НовыйЭлементФормы = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Элементы.ГруппаПараметры);
		НовыйЭлементФормы.ПутьКДанным = ИмяРеквизита;
		НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
		
		НовыйЭлементФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ПараметрСКДПриИзменении");
		
		//////////////////
		// б. Список значений.
		
		ДоступныеЗначенияПараметра = ТекущийПараметрСхемыКомпоновкиДанных.ПолучитьДоступныеЗначения();
		
		Если ДоступныеЗначенияПараметра <> Неопределено Тогда
			НовыйЭлементФормы.РежимВыбораИзСписка = Истина;
			
			Для Каждого ТекущийЭлементСписка Из ДоступныеЗначенияПараметра Цикл
				НовыйЭлементФормы.СписокВыбора.Добавить(
					ТекущийЭлементСписка.Значение, ТекущийЭлементСписка.Представление);
			КонецЦикла;
		КонецЕсли;
		
		//////////////////
		// в. Значение.
		
		ЭтотОбъект[ИмяРеквизита] = ТекущийПараметрСхемыКомпоновкиДанных.Значение;
	КонецЦикла;
	
	// Установка типа значения для списков значений.
	Для Каждого ТекущийРеквизитСписка Из СписокРеквизитовТипаСписка Цикл
		ЭтотОбъект[ТекущийРеквизитСписка.Представление].ТипЗначения = ТекущийРеквизитСписка.Значение;
	КонецЦикла;
	
КонецПроцедуры // СоздатьПараметрыИзСхемыКомпоновкиДанных()

&НаКлиенте
Процедура Подключаемый_ПараметрСКДПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры // Подключаемый_ПараметрСКДПриИзменении()

#КонецОбласти
