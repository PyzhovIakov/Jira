
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// +CRM
	Элементы.ФормаCRM_УстановкаВесаПоказателей.Видимость = CRM_ЛицензированиеЭкспортныеМетоды.ВариантПоставкиКОРП();
	
	CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(СписокДоступа, "Подразделение", Объект.Ссылка, Истина);
	// -CRM
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Подразделение", Объект.Ссылка));
	
	// +CRM
	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТеги") Тогда
		СписокВышестоящийхПодразделений = CRM_МетодыМодулейМенеджеровСправочников.ПолучитьВсеПодразделенияРодители(Объект.Ссылка, Истина);
		ТегиПодразделения.Параметры.УстановитьЗначениеПараметра("ПодразделенияПоИерархии", СписокВышестоящийхПодразделений);
		ТегиПодразделения.Параметры.УстановитьЗначениеПараметра("ТекущееПодразделение", Объект.Ссылка);
	КонецЕсли;
	
	КалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
	Если НЕ КалендарьПредприятия.Пустая() Тогда
		Элементы.СтраницыКалендарьПредприятия.ТекущаяСтраница = Элементы.СтраницаКалендарьЗадан;
	Иначе
		Элементы.СтраницыКалендарьПредприятия.ТекущаяСтраница = Элементы.СтраницаКалендарьНеЗадан;
	КонецЕсли;
	// -CRM
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРекивзиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект, Элементы.ГруппаРазблокироватьРеквизиты);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// +CRM
	Элементы.ТипыУслуг.Видимость = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТипыУслуг");
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	//++ Устарело_Производство21
	
	// +CRM врезка чтобы код работал и в ERP/КА2 и в УТиВсК
	УстановитьПривилегированныйРежим(Истина);
	
	Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("РегистрыСведений", "НастройкаПередачиМатериаловВПроизводство") Тогда
		СтрокаНастройкаПередачиМатериаловВПроизводство = "НастройкаПередачиМатериаловВПроизводство";
		РегистрыСведений[СтрокаНастройкаПередачиМатериаловВПроизводство].УстановитьНастройкуПередачиМатериаловПодразделения(
			ТекущийОбъект.Ссылка, СкладМатериалов);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	// -CRM
	
	//-- Устарело_Производство21
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Подразделение", Объект.Ссылка));
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Ссылка");
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект, Элементы.ГруппаРазблокироватьРеквизиты);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// +CRM
	CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(СписокДоступа, "Подразделение", Объект.Ссылка, Истина);
	// -CRM
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

// +CRM
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Элементы.ГрафикРаботы.Доступность = (ИспользованиеГрафикаРаботы = 1);
	
КонецПроцедуры
// -CRM

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.ВариантыОбособленногоУчетаТоваров") Тогда
		
		Модифицированность = Истина;
		Объект.ВариантОбособленногоУчетаТоваров = ВыбранноеЗначение;
		ЗаполнитьПредставлениеПараметров();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_СтруктураПредприятия",, Объект.Ссылка);
	
	// +CRM врезка чтобы код работал и в ERP/КА2 и в УТиВсК
	Если сфпОбщегоНазначенияПовтИсп.ПолучитьЗначениеКонстанты("УправлениеПредприятием") Тогда
		КешРеквизитовНовый = КешРеквизитовФормы();
		НеобходимоОбновлятьИнтерфейс = Ложь;
		Для Каждого Элемент Из КешРеквизитов Цикл
			Если НЕ Элемент.Значение = КешРеквизитовНовый[Элемент.Ключ] Тогда
				НеобходимоОбновлятьИнтерфейс = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		КешРеквизитов = КешРеквизитовНовый;
		Если НеобходимоОбновлятьИнтерфейс Тогда
			ОбновитьИнтерфейс();
		КонецЕсли;
	КонецЕсли;
	// -CRM
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// +CRM
	Если ИмяСобытия = "ПослеЗаписиТега" Тогда
		Элементы.ТегиПодразделения.Обновить();
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИспользованиеВСхемахОбеспечения(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	// +CRM врезка чтобы код работал и в ERP/КА2 и в УТиВсК
	//ПараметрыФормы = Новый Структура("Подразделение", Объект.Ссылка);
	//ОткрытьФорму("РегистрСведений.СхемыОбеспеченияПроизводства.Форма.ИспользованиеВСхемахОбеспечения", ПараметрыФормы);
	Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("РегистрыСведений", "СхемыОбеспеченияПроизводства") Тогда
		ПараметрыФормы = Новый Структура("Подразделение", Объект.Ссылка);
		ИмяФормыИспользованиеВСхемахОбеспечения = "ИспользованиеВСхемахОбеспечения";
		ОткрытьФорму("РегистрСведений.СхемыОбеспеченияПроизводства.Форма." + ИмяФормыИспользованиеВСхемахОбеспечения, ПараметрыФормы);
	КонецЕсли;
	// -CRM
	
	Возврат; // в УТ пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПараметрыПроизводственногоПодразделения(Команда)
	
	ОткрытьФорму(
		"Справочник.СтруктураПредприятия.Форма.ПараметрыПроизводственногоПодразделения",
		Новый Структура("Ссылка, АдресХранилищаДанныеОбъекта", Объект.Ссылка, ДанныеОбъектаВХранилище()),
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ПараметрыПроизводственногоПодразделенияЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОбособленногоУчетаТоваров(Команда)
	
	ПараметрыФормы = Новый Структура("ВариантОбособленногоУчетаТоваров", Объект.ВариантОбособленногоУчетаТоваров);
	ОткрытьФорму("Справочник.СтруктураПредприятия.Форма.ПараметрыОбособленногоУчетаТоваров", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	// +CRM
	//ПараметрыПроцедуры = ОбщегоНазначенияУТКлиент.ПараметрыРазрешенияРедактированияРеквизитовОбъекта();
	//ПараметрыПроцедуры.ОповещениеОРазблокировке = Новый ОписаниеОповещения("Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект);
	//ПараметрыПроцедуры.Объект = Новый Структура("Ссылка", Неопределено);
	//
	//ОбщегоНазначенияУТКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма, ПараметрыПроцедуры);
	
	ИмяФормыРазблокировки = "Справочник.СтруктураПредприятия.Форма.РазблокированиеРеквизитов";
	CRM_ОбщегоНазначенияКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект, ИмяФормыРазблокировки);
	// -CRM
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	// +CRM врезка чтобы код работал и в ERP/КА2 и в УТиВсК
	//ЕстьПравоПросмотраСхемОбеспечения = ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.СхемыОбеспеченияПроизводства);
	ИмяРегистра = "СхемыОбеспеченияПроизводства";
	Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("РегистрыСведений", ИмяРегистра) Тогда
		ЕстьПравоПросмотраСхемОбеспечения = ПравоДоступа("Просмотр", Метаданные.РегистрыСведений[ИмяРегистра]);
	КонецЕсли;
	// -CRM
	
	ПерейтиКПараметрамЗаголовок = ?(ПравоДоступа("Изменение", Метаданные.Справочники.СтруктураПредприятия),
		НСтр("ru = 'Изменить';
			|en = 'Change'"),
		НСтр("ru = 'Подробно';
			|en = 'More'"));
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		Элементы.ПараметрыПроизводственногоПодразделения.Видимость = Истина;
		Элементы.ПараметрыПроизводственногоПодразделения.Заголовок = ПерейтиКПараметрамЗаголовок;
	Иначе
		Элементы.ПараметрыПроизводственногоПодразделения.Видимость = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам") Тогда
		Элементы.ПараметрыОбособленногоУчетаТоваров.Видимость = Истина;
		Элементы.ПараметрыОбособленногоУчетаТоваров.Заголовок = ПерейтиКПараметрамЗаголовок;
	Иначе
		Элементы.ПараметрыОбособленногоУчетаТоваров.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьПредставлениеПараметров();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
	//КешРеквизитов = КешРеквизитовФормы();
	// +CRM врезка чтобы код работал и в ERP/КА2 и в УТиВсК
	Если Константы.УправлениеПредприятием.Получить() Тогда
		КешРеквизитов = КешРеквизитовФормы();
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПроизводственногоПодразделенияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		
		ЗагрузитьДанныеОбъектаИзХранилища(РезультатЗакрытия);
		
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПроизводственноеПодразделение");
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеОбъектаИзХранилища(АдресХранилищаДанныеОбъекта)
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресХранилищаДанныеОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеОбъекта);
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Объект[Реквизит.Имя] = ДанныеОбъекта[Реквизит.Имя];
	КонецЦикла;
	
	Для каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		Объект[ТабличнаяЧасть.Имя].Загрузить(ДанныеОбъекта[ТабличнаяЧасть.Имя]);
	КонецЦикла;
	
	СкладМатериалов = ДанныеОбъекта.СкладМатериалов;
	
	ЗаполнитьПредставлениеПараметров();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеПараметров()
	
	ЭтоКА = ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация");
	// +CRM врезка чтобы код работал и в ERP/КА2 и в УТиВсК
	ЭтоУТиВСК = CRM_ОбщегоНазначенияПовтИсп.ЭтоУТиВСК();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СлужебныеПодсистемы.Объекты.КАУП") Тогда
		МодульПроизводствоСерверПовтИсп = ОбщегоНазначения.ОбщийМодуль("ПроизводствоСерверПовтИсп");
		НастройкиПроизводства = МодульПроизводствоСерверПовтИсп.НастройкиПодсистемыПроизводство();
		Производство21 = НастройкиПроизводства.ИспользуетсяПроизводство21;
	Иначе
		Производство21 = Истина;
	КонецЕсли;
	// -CRM врезка чтобы код работал и в ERP/КА2 и в УТиВсК
	
	ПредставлениеПроизводственногоПодразделения = "";
	Если Объект.ПодразделениеДиспетчер
		И Объект.ПроизводствоПоЗаказам
		И Объект.ПроизводствоБезЗаказов
		// +CRM
		И Производство21
		// -CRM
		И Не ЭтоКА Тогда
		
		ПредставлениеПроизводственногоПодразделения =
			НСтр("ru = 'Подразделение диспетчирует заказы на производство, производит продукцию по заказам и без заказов на производство.'");
			
	ИначеЕсли Объект.ПодразделениеДиспетчер
		И Объект.ПроизводствоПоЗаказам
		И Не Объект.ПроизводствоБезЗаказов
		// +CRM
		И Производство21
		// -CRM
		И Не ЭтоКА Тогда
		
		ПредставлениеПроизводственногоПодразделения =
			НСтр("ru = 'Подразделение диспетчирует заказы на производство и производит продукцию по заказам.'");
			
	ИначеЕсли Объект.ПодразделениеДиспетчер
		И Не Объект.ПроизводствоПоЗаказам
		И Объект.ПроизводствоБезЗаказов
		// +CRM
		И Производство21
		// -CRM
		И Не ЭтоКА Тогда
		
		ПредставлениеПроизводственногоПодразделения =
			НСтр("ru = 'Подразделение диспетчирует заказы на производство и производит продукцию без заказов.'");
		
	ИначеЕсли Объект.ПодразделениеДиспетчер
		И Не Объект.ПроизводствоПоЗаказам
		И Не Объект.ПроизводствоБезЗаказов
		// +CRM
		И Производство21
		// -CRM
		И Не ЭтоКА Тогда
		
		ПредставлениеПроизводственногоПодразделения =
			НСтр("ru = 'Подразделение диспетчирует заказы на производство.'");
			
	ИначеЕсли Не Объект.ПодразделениеДиспетчер
		И Объект.ПроизводствоПоЗаказам
		И Объект.ПроизводствоБезЗаказов
		// +CRM
		И Производство21
		// -CRM
		И Не ЭтоКА Тогда
		
		ПредставлениеПроизводственногоПодразделения =
			НСтр("ru = 'Подразделение производит продукцию по заказам и без заказов на производство.'");
			
	ИначеЕсли Не Объект.ПодразделениеДиспетчер
		И Объект.ПроизводствоПоЗаказам
		И Не Объект.ПроизводствоБезЗаказов
		// +CRM
		И Производство21
		// -CRM
		И Не ЭтоКА Тогда
		
		ПредставлениеПроизводственногоПодразделения =
			НСтр("ru = 'Подразделение производит продукцию по заказам на производство.'");
			
	ИначеЕсли Не Объект.ПодразделениеДиспетчер
		И Не Объект.ПроизводствоПоЗаказам
		И Объект.ПроизводствоБезЗаказов
		// +CRM
		И Производство21
		// -CRM
		И Не ЭтоКА Тогда
		
		ПредставлениеПроизводственногоПодразделения =
			НСтр("ru = 'Подразделение производит продукцию без заказов на производство.'");
		
	// +CRM врезка чтобы код работал и в ERP/КА2 и в УТиВсК
	ИначеЕсли Объект.ПодразделениеДиспетчер
		И Объект.ПроизводственноеПодразделение
		И Не Производство21
		И Не ЭтоКА
		И Не ЭтоУТиВСК Тогда
		
		ПредставлениеПроизводственногоПодразделения =
			НСтр("ru = 'Подразделение диспетчирует заказы на производство, производит продукцию.'");
			
	ИначеЕсли Объект.ПодразделениеДиспетчер
		И Не Объект.ПроизводственноеПодразделение
		И Не Производство21
		И Не ЭтоКА
		И Не ЭтоУТиВСК Тогда
		
		ПредставлениеПроизводственногоПодразделения =
			НСтр("ru = 'Подразделение диспетчирует заказы на производство.'");
		
	ИначеЕсли Не Объект.ПодразделениеДиспетчер
		И Объект.ПроизводственноеПодразделение
		И Не Производство21
		И Не ЭтоКА
		И Не ЭтоУТиВСК Тогда
		
		ПредставлениеПроизводственногоПодразделения =
			НСтр("ru = 'Подразделение производит продукцию.'");
		
	// -CRM врезка чтобы код работал и в ERP/КА2 и в УТиВсК
	ИначеЕсли ЭтоКА И Объект.ПроизводственноеПодразделение Тогда
		
		ПредставлениеПроизводственногоПодразделения =
			НСтр("ru = 'Подразделение производит продукцию.'");
		
	Иначе
		
		ПредставлениеПроизводственногоПодразделения =
			НСтр("ru = 'Подразделение не является производственным.'");
			
	КонецЕсли;
	
	Команды["ПараметрыПроизводственногоПодразделения"].Подсказка = ПредставлениеПроизводственногоПодразделения;
	
	ПредставлениеОбособленногоУчетаТоваров = "";
	Если Объект.ВариантОбособленногоУчетаТоваров = Перечисления.ВариантыОбособленногоУчетаТоваров.НеВедется Тогда
		ПредставлениеОбособленногоУчетаТоваров = НСтр("ru = 'Обособленный учет товаров не ведется.'");
	ИначеЕсли Объект.ВариантОбособленногоУчетаТоваров = Перечисления.ВариантыОбособленногоУчетаТоваров.ПоПодразделению Тогда
		ПредставлениеОбособленногоУчетаТоваров = НСтр("ru = 'Обособленный учет товаров ведется по подразделению.'");
	ИначеЕсли Объект.ВариантОбособленногоУчетаТоваров = Перечисления.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения Тогда
		ПредставлениеОбособленногоУчетаТоваров = НСтр("ru = 'Обособленный учет товаров ведется по менеджерам подразделения.'");
	КонецЕсли;
	Команды["ПараметрыОбособленногоУчетаТоваров"].Подсказка = ПредставлениеОбособленногоУчетаТоваров;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если СтруктураРеквизитов.Свойство("ПроизводственноеПодразделение")
		ИЛИ СтруктураРеквизитов.Свойство("Ссылка")
		ИЛИ Инициализация Тогда
		Элементы.ИспользованиеВСхемахОбеспечения.Видимость = 
				Объект.ПроизводственноеПодразделение 
				И Форма.ЕстьПравоПросмотраСхемОбеспечения
				И ЗначениеЗаполнено(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеОбъектаВХранилище()
	
	ДанныеОбъекта = Новый Структура;
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		ДанныеОбъекта.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
	КонецЦикла;
	
	Для каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		ДанныеОбъекта.Вставить(ТабличнаяЧасть.Имя, Объект[ТабличнаяЧасть.Имя].Выгрузить());
	КонецЦикла;
	
	ДанныеОбъекта.Вставить("СкладМатериалов", СкладМатериалов);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОбъекта, УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция КешРеквизитовФормы()
	
	СписокРеквизитов =
	"ИспользоватьПооперационноеУправление,
	|ИспользоватьПооперационноеПланирование,
	|ИспользоватьСменныеЗадания
	//++ Устарело_Производство21
	|,ИспользоватьМетодикуББВ,
	|ИспользоватьМетодикуПооперационноеПланирование,
	|ИспользоватьМетодикуРегистрацияОпераций
	//-- Устарело_Производство21
	|";
	
	ЗначенияРеквизитов = Константы.СоздатьНабор(СписокРеквизитов);
	ЗначенияРеквизитов.Прочитать();
	
	Результат = Новый Структура(СписокРеквизитов);
	ЗаполнитьЗначенияСвойств(Результат, ЗначенияРеквизитов);
	
	Возврат Результат;
	
КонецФункции

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт // АПК:78 - исключить из проверки.
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура CRM_ФормулаРасчетаПотенциалаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Объект.Ссылка.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Поле = "Объект." + Элемент.Имя;
		Сообщение.Текст = "Нельзя редактировать формулу для незаписанного подразделения!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Подразделение", Объект.Ссылка);
	ПараметрыФормы.Вставить("Формула", Объект.CRM_ФормулаРасчетаПотенциала);
	ПараметрыФормы.Вставить("ПериодРасчета", Объект.CRM_ПериодРасчетаПотенциала);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("РегистрСведений.CRM_ВесаПоказателейПотенциала.Форма.ФормаНастройкиПотенциала",
		 ПараметрыФормы, Элемент, Объект.Ссылка, , , ,
		 РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

&НаКлиенте
Процедура CRM_УстановкаВесаПоказателей(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Текст = "Нельзя редактировать вес показателей для незаписанного подразделения!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Подразделение", Объект.Ссылка);
	ПараметрыФормы.Вставить("Формула", Объект.CRM_ФормулаРасчетаПотенциала);
	ПараметрыФормы.Вставить("ПериодРасчета", Объект.CRM_ПериодРасчетаПотенциала);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("РегистрСведений.CRM_ВесаПоказателейПотенциала.Форма.ФормаНастройкиПотенциала",
		 ПараметрыФормы, Элементы.CRM_ФормулаРасчетаПотенциала, Объект.Ссылка, , , ,
		 РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

#КонецОбласти

// +CRM
#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьГрафикПредприятияПриИзменении(Элемент)

	Если ИспользованиеГрафикаРаботы = 0 И НЕ Объект.ГрафикРаботы.Пустая() Тогда
		Объект.ГрафикРаботы = ПредопределенноеЗначение("Справочник.Календари.ПустаяСсылка");
	КонецЕсли;
	Элементы.ГрафикРаботы.Доступность = (ИспользованиеГрафикаРаботы = 1);

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИндивидуальныйГрафикПриИзменении(Элемент)
	Элементы.ГрафикРаботы.Доступность = (ИспользованиеГрафикаРаботы = 1);
КонецПроцедуры

&НаКлиенте
Процедура СписокДоступаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ВариантПоставкиКОРП() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Функция доступна только для ""КОРП"" поставки конфигурации!';
			|en='The function is only available for ""CORP"" configuration delivery!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо записать элемент!';
			|en='It is necessary to write down the element!'"));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТегиПодразделения

&НаКлиенте
Процедура ТегиПодразделенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ      = Истина;
	ПарамФормы = Новый Структура;
	ПарамФормы.Вставить("Владелец", Объект.Ссылка);
	ОткрытьФорму("Справочник.CRM_Теги.ФормаОбъекта", ПарамФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТегиПодразделенияПередНачаломИзменения(Элемент, Отказ)
	// Запрет на редактирование тегов другого подразделения.
	Если Элементы.ТегиПодразделения.ТекущиеДанные.Владелец <> Объект.Ссылка Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

// -CRM
