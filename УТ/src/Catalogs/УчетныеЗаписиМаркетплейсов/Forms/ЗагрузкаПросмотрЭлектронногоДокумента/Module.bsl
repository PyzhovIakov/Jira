
#Область ОписаниеПеременных

&НаКлиенте
Перем ФормаСопоставленияНоменклатуры;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗакрыватьПриЗакрытииВладельца = Истина;
	УстановитьУсловноеОформление();
	
	ИмяФайла            = Параметры.ИмяФайла;
	АдресХранилищаФайла = Параметры.АдресХранилищаФайла;
	ПервичныйДокумент   = Параметры.СсылкаНаДокумент;
	СпособОбработки     = "СверкаДокументаСТорговойПлощадкой";
	
	ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
	ОписаниеФайла.ИмяФайла       = ИмяФайла;
	ОписаниеФайла.ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилищаФайла);
	
	ТекстОшибки    = "";
	ПараметрыФайла = ИнтеграцияСМаркетплейсамиСервер.СодержаниеЭлектронногоДокумента(ОписаниеФайла, ТекстОшибки);
	
	ЗаполнитьТабличныйДокумент();
	
	Если Не ЗначениеЗаполнено(ПараметрыФайла) Тогда
		Элементы.ДекорацияИнформация1.Заголовок = НСтр("ru = 'Наиболее вероятные ошибки при чтении файла:
			| - не верно указано расширение файла;
			| - повреждена структура файла.'");
		ТекстСостояния = НСтр("ru = 'Не удалось прочитать содержимое файла.'") 
			+ ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС + ТекстОшибки, "")
			+ Символы.ПС + НСтр("ru = 'Выберите другой файл.'");
		ОтобразитьСостояние(ТекстСостояния, БиблиотекаКартинок.Остановить);
		
	Иначе
		ПараметрыФайла.Свойство("ВидТорговойПлощадки", ВидТорговойПлощадки);
		
		ТекстПодсказкиПриОшибке = НСтр("ru = 'Поддерживается сверка электронных документов следующих форматов:
			| - товарная накладная, УПД формализованной структуры в формате 5.01 или 5.02 (файл xml) для всех видов торговых площадок;
			| - акт приемки товаров торговой площадки Ozon (файл xlsx - книга Excel 2007);
			| - акт приемки товаров торговой площадки Wildberries (файл xlsx - книга Excel 2007).'");
		
		Если Не ПараметрыФайла.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной
				И Не СверкаФорматаПоддерживается(ПараметрыФайла) Тогда
			Элементы.ДекорацияИнформация1.Заголовок = ТекстПодсказкиПриОшибке;
			ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не поддерживается сверка электронных документов формата ""%1"".'"),
					ПараметрыФайла.Формат)
				+ Символы.ПС + НСтр("ru = 'Выберите другой файл.'");
			ОтобразитьСостояние(ТекстСостояния, БиблиотекаКартинок.Предупреждение);
			
		ИначеЕсли Не ПараметрыФайла.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной
					И Не СверкаВидаДокументаПоддерживается(ВидДокумента) Тогда
			Элементы.ДекорацияИнформация1.Заголовок = ТекстПодсказкиПриОшибке;
			ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не поддерживается сверка электронных документов вида ""%1"".'"),
					ВидДокумента)
				+ Символы.ПС + НСтр("ru = 'Выберите другой файл.'");
			ОтобразитьСостояние(ТекстСостояния, БиблиотекаКартинок.Предупреждение);
			
		ИначеЕсли Не ПараметрыФайла.ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная 
					И Не ПараметрыФайла.ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД
					И Не (ПараметрыФайла.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной 
							И ЗначениеЗаполнено(ВидТорговойПлощадки)) Тогда
			Элементы.ДекорацияИнформация1.Заголовок = ТекстПодсказкиПриОшибке;
			ТекстСостояния = НСтр("ru = 'Содержимое выбранного файла не соответствует требуемому формату.'")
				+ Символы.ПС + НСтр("ru = 'Выберите другой файл.'");
			ОтобразитьСостояние(ТекстСостояния, БиблиотекаКартинок.Предупреждение);
			
		Иначе
			ОтобразитьСостояние();
		КонецЕсли;
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПервичныйДокумент, 
			"Организация, Контрагент, Склад, ХозяйственнаяОперация");
		Организация = РеквизитыДокумента.Организация;
		Контрагент  = РеквизитыДокумента.Контрагент;
		Обработчик  = Документы.ПередачаТоваровХранителю.ОбработчикДействий(РеквизитыДокумента.ХозяйственнаяОперация);
		СкладГруппа = Обработчик.ЭтоГруппаСкладовИСкладыИспользуютсяВТЧДокументовПродажи(РеквизитыДокумента.Склад);
		РеквизитыДокумента.Вставить("СкладГруппа",   СкладГруппа);
		РеквизитыДокумента.Вставить("Идентификатор", ПервичныйДокумент.УникальныйИдентификатор());
		
		ЗаполнитьУчетныеЗаписи();
	КонецЕсли;
	
	Элементы.ДекорацияИнформация3.Заголовок = СформироватьЛегендуРасхожденийПоКодамМаркировки(
		Строка(Элементы.ДекорацияИнформация3.Заголовок) + Символы.ПС + Символы.ПС 
			+ НСтр("ru = 'Обозначения в детализации расхождений по кодам маркировки:'") + Символы.ПС);
	Элементы.ДекорацияИнформация4.Заголовок = СформироватьЛегендуРасхожденийПоКодамМаркировки(
		Строка(Элементы.ДекорацияИнформация4.Заголовок) + Символы.ПС + Символы.ПС
			+ НСтр("ru = 'Обозначения в детализации расхождений по кодам маркировки:'") + Символы.ПС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УточнитьСведения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг2 Тогда
		УточнитьСведения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения") 
			И Не ВладелецФормы.Открыта() Тогда
		ЗакрытьФорму = Истина;
	КонецЕсли;
	
	Если ЗакрытьФорму Тогда
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг2 Тогда
			Если ТипЗнч(ФормаСопоставленияНоменклатуры) = Тип("ФормаКлиентскогоПриложения") 
					И ФормаСопоставленияНоменклатуры.Открыта() Тогда
				ФормаСопоставленияНоменклатуры.ТолькоПросмотр = Истина;
				ФормаСопоставленияНоменклатуры.Закрыть();
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Отказ = Истина;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеОЗавершении,
			НСтр("ru = 'Закрыть форму?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = СпособОбработки + "_ПоказатьСкрытьПодсказку" Тогда
		Если ТипЗнч(ФормаСопоставленияНоменклатуры) = Тип("ФормаКлиентскогоПриложения") 
				И ФормаСопоставленияНоменклатуры.Открыта() Тогда
			ВидимостьПодсказки = ФормаСопоставленияНоменклатуры.Элементы[СпособОбработки + "_ГруппаИнформация"].Видимость;
			ПоказатьСкрытьПодсказку();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = СпособОбработки + "_Закрыть" Тогда
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант" 
				И (Источник = "ИспользоватьИсправлениеДокументов"
					Или Источник = "ИспользоватьАктыРасхожденийПослеОтгрузки") Тогда
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг3 Тогда
			УправлениеДополнительнойИнформацией3();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант" 
				И Источник = "ЗапретитьФормированиеФормализованныхЭДИзФайлов" Тогда
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг4 Тогда
			УправлениеДополнительнойИнформацией4();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияСостоянияЭДО() Тогда
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг3 Тогда
			УправлениеДополнительнойИнформацией3();
		ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг4 Тогда
			УправлениеДополнительнойИнформацией4();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ПередачаТоваровХранителю"
				И (Источник = ПервичныйДокумент 
					Или Источник = ПередачаТоваровХранителюИсправление) Тогда
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг3
				И Источник = ПервичныйДокумент Тогда
			ОбработатьРасхождения(Истина);
		ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг4 Тогда
			СформироватьРасхожденияВВидеОтчета4();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_АктОРасхожденияхПослеОтгрузки"
				И Источник = АктОРасхожденияхПослеОтгрузки Тогда
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг3 Тогда
			УправлениеДополнительнойИнформацией3();
		ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг4 Тогда
			СформироватьРасхожденияВВидеОтчета4();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "СопоставитьНоменклатуруОшибка"
			Или НавигационнаяСсылкаФорматированнойСтроки = "ОбработатьРасхожденияОшибка"
			Или НавигационнаяСсылкаФорматированнойСтроки = "ИсправитьДокументОшибка"
			Или НавигационнаяСсылкаФорматированнойСтроки = "ЗаменитьЭлектронныйДокументОшибка" Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ДатаНачала",    НачалоДня(ТекущаяДата));
		ПараметрыОткрытия.Вставить("ДатаОкончания", КонецДня(ТекущаяДата));
		ПараметрыОткрытия.Вставить("Уровень",       "Ошибка");
		
		ОткрытьФорму("Обработка.ЖурналРегистрации.Форма.ЖурналРегистрации", ПараметрыОткрытия, ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьИсправленныйДокумент" Тогда
		Если СпособОтраженияРасхождений = ПредопределенноеЗначение("Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ИсправлениеПервичныхДокументов") Тогда
			ПоказатьЗначение(, ПервичныйДокумент);
		ИначеЕсли СпособОтраженияРасхождений = ПредопределенноеЗначение("Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировкиКакИсправлениеПервичныхДокументов") Тогда
			ПоказатьЗначение(, ПередачаТоваровХранителюИсправление);
		ИначеЕсли СпособОтраженияРасхождений = ПредопределенноеЗначение("Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировокКакНовыеПервичныеДокументы") Тогда
			ПоказатьЗначение(, АктОРасхожденияхПослеОтгрузки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьУчетныеЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ЗаполнитьУчетныеЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОтраженияРасхожденийПриИзменении(Элемент)
	
	Элементы.ПередачаТоваровХранителюИсправление.Видимость = СпособОтраженияРасхождений 
		= ПредопределенноеЗначение("Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировкиКакИсправлениеПервичныхДокументов");
	Элементы.АктОРасхожденияхПослеОтгрузки.Видимость = СпособОтраженияРасхождений 
		= ПредопределенноеЗначение("Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировокКакНовыеПервичныеДокументы");
	Элементы.ПервичныйДокумент.Видимость = СпособОтраженияРасхождений 
		= ПредопределенноеЗначение("Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ИсправлениеПервичныхДокументов");
		
КонецПроцедуры

&НаКлиенте
Процедура РасхожденияПредставлениеПриИзменении(Элемент)
	
	ПереключитьРежимОтображения(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасхождения

&НаКлиенте
Процедура РасхожденияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Расхождения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.РасхожденияМаркировка
			И ЗначениеЗаполнено(ТекущиеДанные.Маркировка) Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗаголовокФормы",      НСтр("ru = 'Расхождения по кодам маркировки'"));
		ПараметрыОткрытия.Вставить("СведенияОМаркировке", ТекущиеДанные.СведенияОМаркировке);
		ПараметрыОткрытия.Вставить("Картинка",            ?(ТекущиеДанные.РасхожденийПоМаркировке > 0,
			БиблиотекаКартинок.ПредупреждениеГосИС32, БиблиотекаКартинок.Информация32ГосИС));
		
		ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.ПросмотрРасхожденийПоКодамМаркировки", 
			ПараметрыОткрытия, 
			ЭтотОбъект, 
			УникальныйИдентификатор); 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьПодсказку(Команда)
	
	ВидимостьПодсказки = Истина;
	ПоказатьСкрытьПодсказку();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПодсказку(Команда)
	
	ВидимостьПодсказки = Ложь;
	ПоказатьСкрытьПодсказку();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоРасхождения(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг3 Тогда
		Элементы.КнопкаТолькоРасхождения3.Пометка = Не Элементы.КнопкаТолькоРасхождения3.Пометка;
		ПереключитьРежимОтображения(Истина);
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг4 Тогда
		Элементы.КнопкаТолькоРасхождения4.Пометка = Не Элементы.КнопкаТолькоРасхождения4.Пометка;
		СформироватьРасхожденияВВидеОтчета4();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРасхождения(Команда)
	
	ОбработатьРасхождения(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг2 Тогда
		ЗавершитьФоновоеЗадание(СпособОбработки + "_СопоставлениеНоменклатуры_");
		УточнитьСведения(Истина);
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг3 Тогда
		ЗавершитьФоновоеЗадание(СпособОбработки + "_АнализРасхождений_");
		СопоставитьНоменклатуру();
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг4 Тогда
		ОбработатьРасхождения(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг1 Тогда
		СопоставитьНоменклатуру();
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг2 Тогда
		ОбработатьРасхождения();
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг3 Тогда
		ИсправитьДокумент();
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг4 Тогда
		СоздатьЗагрузитьЭлектронныйДокумент();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Характеристики
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект,
		"РасхожденияХарактеристика",
		"ПервичныйДокументОбъект.Товары.ХарактеристикиИспользуются");
	
	// Серии номенклатуры
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект, 
		"СерииПриПланированииОтгрузкиУказываютсяВТЧТовары",
		"РасхожденияСерия",
		"ПервичныйДокументОбъект.Товары.СтатусУказанияСерий",
		"ПервичныйДокументОбъект.Товары.ТипНоменклатуры");
	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(ЭтотОбъект, 
		Ложь,
		"РасхожденияСтатусУказанияСерий",
		"ПервичныйДокументОбъект.Товары.СтатусУказанияСерий");
	
	// Упаковка
	ДополнительныеПараметры = НоменклатураСервер.НовыеПараметрыУсловногоОформленияЕдиницИзмерения();
	ДополнительныеПараметры.Вставить("ИмяПоляЕдиницаИзмерения", "РасхожденияНоменклатураЕдиницаИзмерения");
	ДополнительныеПараметры.Вставить("ПутьКПолюУпаковка",       "ПервичныйДокументОбъект.Товары.Упаковка");
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект, ДополнительныеПараметры);
	
	// Вид цены
	ЦеныПредприятияЗаполнениеСервер.УстановитьУсловноеОформлениеВидовЦен(ЭтотОбъект,
		"РасхожденияВидЦены",
		"ПервичныйДокументОбъект.Товары.ВидЦены");
	
	// Расхождения количество
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасхожденияКоличествоУпаковокРасхождения.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПервичныйДокументОбъект.Товары.КоличествоУпаковокРасхождения");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Кирпичный);
	
	// Расхождения сумма
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасхожденияСуммаРасхождения.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПервичныйДокументОбъект.Товары.СуммаРасхождения");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Кирпичный);
	
	// Маркировка
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасхожденияМаркировка.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПервичныйДокументОбъект.Товары.РасхожденийПоМаркировке");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = -1;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасхожденияМаркировка.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПервичныйДокументОбъект.Товары.РасхожденийПоМаркировке");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасхожденияМаркировка.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПервичныйДокументОбъект.Товары.РасхожденийПоМаркировке");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Кирпичный);
	
	// Склад
	СкладыСервер.УстановитьУсловноеОформлениеСкладаВТЧ(ЭтотОбъект, "РасхожденияСклад");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьПодсказку()
	
	ИмяГруппы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	
	Элементы[СтрЗаменить(ИмяГруппы, "ГруппаШаг", "КнопкаПоказатьПодсказку")].Видимость = Не ВидимостьПодсказки;
	Элементы[СтрЗаменить(ИмяГруппы, "ГруппаШаг", "ГруппаИнформация")].Видимость        = ВидимостьПодсказки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеРазбора()
	
	Если ЗначениеЗаполнено(ПараметрыФайла.ДанныеРазбора)
			И ЭтоАдресВременногоХранилища(ПараметрыФайла.ДанныеРазбора) Тогда
		Возврат ПолучитьИзВременногоХранилища(ПараметрыФайла.ДанныеРазбора);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗапомнитьДанныеРазбора(Знач ДанныеРазбора)
	
	Если ТипЗнч(ДанныеРазбора) = Тип("Структура") 
			И ДанныеРазбора.Свойство("НовыйЭД") Тогда
		ДанныеРазбора.НовыйЭД = Неопределено;
	КонецЕсли;
	
	ПараметрыФайла.ДанныеРазбора = ПоместитьВоВременноеХранилище(ДанныеРазбора, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеЭлектронногоДокумента()
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами.ИнтеграцияСУчетнойСистемой.ОтражениеВУчете") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидМаркетплейса = ВидТорговойПлощадки;
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ВидМаркетплейса = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ВидМаркетплейса");
	ИначеЕсли УчетнаяЗапись = ПредопределенноеЗначение("Справочник.УчетныеЗаписиМаркетплейсов.ПустаяСсылка")
				И Не ЗначениеЗаполнено(ВидТорговойПлощадки) Тогда
		ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсWildberries");
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СпособОбработки",     СпособОбработки);
	ДополнительныеПараметры.Вставить("УчетнаяЗапись",       УчетнаяЗапись);
	ДополнительныеПараметры.Вставить("ВидТорговойПлощадки", ВидМаркетплейса);
	ДополнительныеПараметры.Вставить("ДанныеРазбора",       Неопределено);
	
	ДанныеЭлектронногоДокумента = ОтражениеВУчетеЭДО.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете();
	ДанныеЭлектронногоДокумента.ВидДокумента                        = ВидДокумента;
	ДанныеЭлектронногоДокумента.ТипДокумента                        = ПараметрыФайла.ТипДокумента;
	ДанныеЭлектронногоДокумента.Формат                              = ПараметрыФайла.Формат;
	ДанныеЭлектронногоДокумента.Направление                         = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Входящий");
	ДанныеЭлектронногоДокумента.ДанныеОсновногоФайла.ИмяФайла       = ИмяФайла;
	ДанныеЭлектронногоДокумента.ДанныеОсновногоФайла.ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилищаФайла);
	ДанныеЭлектронногоДокумента.Отправитель                         = Контрагент;
	ДанныеЭлектронногоДокумента.ДополнительныеДанные                = ДополнительныеПараметры;
	
	Возврат ДанныеЭлектронногоДокумента;
	
КонецФункции

&НаСервере
Процедура ЗавершитьФоновоеЗадание(ПрефиксКлюча)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ",      ПрефиксКлюча + РеквизитыДокумента.Идентификатор);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		АктивныеЗадания[0].Отменить();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьЛегендуРасхожденийПоКодамМаркировки(Знач Префикс)
	
	КонстантыРасхождений = ИнтеграцияСМаркетплейсамиСервер.КонстантыРасхождений();
	
	Результат = Префикс
		+ " " + "<img src=""" + КонстантыРасхождений["КодыМаркировкиСовпадают"] + """>"
		+ " - " + НСтр("ru = 'коды маркировки в файле и в документе совпадают;'") + Символы.ПС
		+ " " + "<img src=""" + КонстантыРасхождений["ЛишнийКодМаркировки"] + """>"
		+ " - " + НСтр("ru = '""лишний"" код маркировки в документе (количество подобранных штрихкодов больше, чем количество в документе, рекомендуется исправить первичный документ);'") + Символы.ПС
		+ " " + "<img src=""" + КонстантыРасхождений["ПересортицаКодовМаркировки"] + """>"
		+ " - " + НСтр("ru = 'файл не содержит сведений о маркируемой продукции (сведения о маркированных товарах необходимо обработать вручную) или коды маркировки в файле и в документе совпадает, но отличаются параметры номенклатуры (рекомендуется уточнить данные по штрихкоду);'") + Символы.ПС
		+ " " + "<img src=""" + КонстантыРасхождений["ИзлишекКодовМаркировки"] + """>"
		+ " - " + НСтр("ru = 'код маркировки присутствует только в файле (излишек);'") + Символы.ПС
		+ " " + "<img src=""" + КонстантыРасхождений["НедостачаКодовМаркировки"] + """>"
		+ " - " + НСтр("ru = 'код маркировки присутствует только в документе (недостача);'") + Символы.ПС
		+ " " + "<img src=""" + КонстантыРасхождений["КодыМаркировкиНеНайдены"] + """>"
		+ " - " + НСтр("ru = 'неизвестный код маркировки из файла (излишек) - данные не переносятся в документ, их необходимо проверить и обработать вручную, при необходимости открыть спор в личном кабинете.'") + Символы.ПС;
	
	Возврат СтроковыеФункции.ФорматированнаяСтрока(Результат);
	
КонецФункции

&НаСервереБезКонтекста
Процедура СформироватьОтчетОРасхождениях(ТабличныйДокумент, ВнешниеНаборыДанных, Знач ТолькоРасхождения, Знач ЕстьМаркировка)
	
	СхемаКомпоновкиДанных = Справочники.УчетныеЗаписиМаркетплейсов.ПолучитьМакет("РасхожденияЭлектронногоДокумента");
	КомпоновкаДанныхСервер.УстановитьПараметрСКД(СхемаКомпоновкиДанных, "ТолькоРасхождения", ТолькоРасхождения, Истина);
	
	НастройкиПоУмолчанию = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Если Не ЕстьМаркировка Тогда
		НастройкиПоУмолчанию.Структура[0].Имя = "БезМаркировки";
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	КомпоновкаДанныхСервер.НайтиВыбранноеПолеРекурсивно(НастройкиПоУмолчанию.Выбор.Элементы, 
		МассивЭлементов, Новый ПолеКомпоновкиДанных("РасшифровкаМаркировки"));
	Если ЗначениеЗаполнено(МассивЭлементов) Тогда
		МассивЭлементов[0].Использование = ЕстьМаркировка;
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
		КомпоновщикНастроек.ПолучитьНастройки(), 
		,,
		Тип("ГенераторМакетаКомпоновкиДанных")); 
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,, Истина);
	
	ТабличныйДокумент.Очистить();
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Область = ТабличныйДокумент.НайтиТекст(НСтр("ru = 'Характеристика'"),,, Истина, Истина);
		Если Область <> Неопределено Тогда
			ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область(, Область.Лево,, Область.Право), 
				ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		КонецЕсли;
	КонецЕсли;
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Область = ТабличныйДокумент.НайтиТекст(НСтр("ru = 'Серия'"),,, Истина, Истина);
		Если Область <> Неопределено Тогда
			ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область(, Область.Лево,, Область.Право), 
				ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область Шаг1

&НаСервере
Процедура ЗаполнитьТабличныйДокумент()
	
	СодержимоеТабличныйДокумент.Очистить();
	
	Если ЗначениеЗаполнено(ПараметрыФайла) Тогда
		ДанныеФайла = ПолучитьИзВременногоХранилища(АдресХранилищаФайла);
		
		ПараметрыВизуализации = ЭлектронныеДокументыЭДО.НовыеПараметрыВизуализацииДокумента();
		ПараметрыВизуализации.ВыводитьДопДанные  = Истина;
		ПараметрыВизуализации.ВыводитьКопияВерна = Ложь;
		
		Если ПараметрыФайла.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
			Если ПараметрыФайла.Свойство("Представление") Тогда
				СодержимоеТабличныйДокумент = ПараметрыФайла.Представление;
				Возврат;
			КонецЕсли;
			ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоПрикладномуТипу(ПараметрыФайла.ПрикладнойТипДокумента);
		Иначе
			ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(ПараметрыФайла.ТипДокумента);
		КонецЕсли;
		
		СодержимоеТабличныйДокумент = ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщения(ВидДокумента, 
			ДанныеФайла, 
			,
			ПараметрыВизуализации).ПредставлениеДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСостояние(Знач ТекстСостояния = "", Знач КартинкаСостояния = Неопределено, 
			Знач ВТабличномДокументе = Ложь)
	
	ОтображатьСостояние = Не ПустаяСтрока(ТекстСостояния);
	
	Если КартинкаСостояния = Неопределено Или Не ОтображатьСостояние Тогда 
		КартинкаСостояния = Новый Картинка;
	КонецЕсли;
	
	Если КартинкаСостояния <> Неопределено Тогда
		Элементы.КартинкаОшибка1.Картинка = КартинкаСостояния;
	КонецЕсли;
	
	Элементы.ДекорацияОшибка1.Заголовок = ТекстСостояния;
	Элементы.ГруппаОшибка1.Видимость    = ОтображатьСостояние;
	
	Если ВТабличномДокументе Тогда
		ОтображениеСостояния = Элементы.СодержимоеТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость                      = ОтображатьСостояние;
		ОтображениеСостояния.Картинка                       = КартинкаСостояния;
		ОтображениеСостояния.Текст                          = ТекстСостояния;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ?(ОтображатьСостояние, 
			ДополнительныйРежимОтображения.Неактуальность, ДополнительныйРежимОтображения.НеИспользовать);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СверкаФорматаПоддерживается(Знач СодержаниеСообщения)
	
	Если Не ЗначениеЗаполнено(СодержаниеСообщения) Или Не ЗначениеЗаполнено(СодержаниеСообщения.ТипРегламента) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СодержаниеСообщения.Формат) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ФорматыФНС = ФорматыЭДО_ФНС.ПоддерживаемыеФорматы();
	
	ПоддерживаемыеФорматы = Новый Структура;
	ПоддерживаемыеФорматы.Вставить("ФНС", Новый Структура);
	
	ПоддерживаемыеФорматы.ФНС.Вставить("УПД", Новый Структура);
	ПоддерживаемыеФорматы.ФНС.УПД.Вставить("ИнформацияПродавца", ФорматыФНС.УПД.ИнформацияПродавца);
	
	ПоддерживаемыеФорматы.ФНС.Вставить("УПД2019", Новый Структура);
	ПоддерживаемыеФорматы.ФНС.УПД2019.Вставить("ИнформацияПродавца", ФорматыФНС.УПД2019.ИнформацияПродавца);
	
	ПоддерживаемыеФорматы.ФНС.Вставить("УПД_5_02", Новый Структура);
	ПоддерживаемыеФорматы.ФНС.УПД_5_02.Вставить("ИнформацияПродавца", ФорматыФНС.УПД_5_02.ИнформацияПродавца);
	
	ПоддерживаемыеФорматы.Вставить("Прикладной", "Прикладной");
	
	Возврат ФорматыЭДО.ЭтоФорматПространства(ПоддерживаемыеФорматы, СодержаниеСообщения.Формат);
	
КонецФункции

&НаСервереБезКонтекста
Функция СверкаВидаДокументаПоддерживается(Знач ВидДокумента)
	
	ИспользуемыеВидыДокументовВходящие     = ЭлектронныеДокументыЭДО.ИспользуемыеВидыДокументовВходящие();
	ИспользуемыеВидыДокументовИнтеркампани = ЭлектронныеДокументыЭДО.ИспользуемыеВидыДокументовИнтеркампани();
	
	МожноЗагрузить = ИспользуемыеВидыДокументовВходящие.Найти(ВидДокумента) <> Неопределено
		Или ИспользуемыеВидыДокументовИнтеркампани.Найти(ВидДокумента) <> Неопределено;
	
	Возврат МожноЗагрузить;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьУчетныеЗаписи()
	
	Элементы.УчетнаяЗапись.СписокВыбора.Очистить();
	
	ВидыТорговыхПлощадок = Новый Массив;
	Если ЗначениеЗаполнено(ВидТорговойПлощадки) Тогда
		ВидыТорговыхПлощадок.Добавить(ВидТорговойПлощадки);
	Иначе
		Если ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСOzon") Тогда
			ВидыТорговыхПлощадок.Добавить(Перечисления.ВидыМаркетплейсов.МаркетплейсOzon);
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЯндексМаркет") Тогда
			ВидыТорговыхПлощадок.Добавить(Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет);
		КонецЕсли;
		ВидыТорговыхПлощадок.Добавить(Перечисления.ВидыМаркетплейсов.МаркетплейсWildberries);
		ВидыТорговыхПлощадок.Добавить(Перечисления.ВидыМаркетплейсов.ПустаяСсылка());
	КонецЕсли;
	
	Если ВидыТорговыхПлощадок.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВложенныйЗапрос.Приоритет КАК Приоритет,
			|	ВложенныйЗапрос.Ссылка КАК Ссылка,
			|	ВложенныйЗапрос.ВидМаркетплейса КАК ВидМаркетплейса,
			|	ВложенныйЗапрос.Представление КАК Представление
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВЫБОР
			|			КОГДА УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = &ПриоритетныйВидТорговойПлощадки
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ КАК Приоритет,
			|		УчетныеЗаписиМаркетплейсов.Ссылка КАК Ссылка,
			|		УчетныеЗаписиМаркетплейсов.ВидМаркетплейса КАК ВидМаркетплейса,
			|		УчетныеЗаписиМаркетплейсов.Представление КАК Представление
			|	ИЗ
			|		Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
			|	ГДЕ
			|		НЕ УчетныеЗаписиМаркетплейсов.ПометкаУдаления
			|		И УчетныеЗаписиМаркетплейсов.ВидМаркетплейса В(&ВидыТорговыхПлощадок)
			|		И (УчетныеЗаписиМаркетплейсов.Организация = &Организация
			|				ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
			|		И (УчетныеЗаписиМаркетплейсов.Контрагент = &Контрагент
			|				ИЛИ &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ВЫБОР
			|			КОГДА &ПриоритетныйВидТорговойПлощадки = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсWildberries)
			|				ТОГДА 0
			|			ИНАЧЕ 2
			|		КОНЕЦ,
			|		ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиМаркетплейсов.ПустаяСсылка),
			|		ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсWildberries),
			|		""Wildberries""
			|	ГДЕ
			|		ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсWildberries) В (&ВидыТорговыхПлощадок)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ВЫБОР
			|			КОГДА &ПриоритетныйВидТорговойПлощадки = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.ПустаяСсылка)
			|				ТОГДА 0
			|			ИНАЧЕ 3
			|		КОНЕЦ,
			|		NULL,
			|		ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.ПустаяСсылка),
			|		&ПредставлениеНеОпределено
			|	ГДЕ
			|		ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.ПустаяСсылка) В (&ВидыТорговыхПлощадок)) КАК ВложенныйЗапрос
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет,
			|	ВидМаркетплейса";
		
		Запрос.УстановитьПараметр("ВидыТорговыхПлощадок",            ВидыТорговыхПлощадок);
		Запрос.УстановитьПараметр("ПриоритетныйВидТорговойПлощадки", Неопределено);
		Запрос.УстановитьПараметр("Организация",                     Организация);
		Запрос.УстановитьПараметр("Контрагент",                      Контрагент);
		Запрос.УстановитьПараметр("ПредставлениеНеОпределено",       НСтр("ru = 'Не определена'"));
		
		Если Не ПараметрыФайла.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
			ДанныеЭлектронногоДокумента = ПолучитьДанныеЭлектронногоДокумента();
			
			Если ЗначениеЗаполнено(ДанныеЭлектронногоДокумента) Тогда
				Запрос.УстановитьПараметр("ПриоритетныйВидТорговойПлощадки", 
					ИнтеграцияСМаркетплейсамиСервер.ОпределитьВидТорговойПлощадкиПоЭлектронномуДокументу(ДанныеЭлектронногоДокумента));
				ЗапомнитьДанныеРазбора(ДанныеЭлектронногоДокумента.ДополнительныеДанные.ДанныеРазбора);
			КонецЕсли;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		ВыборкаДанных = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Пока ВыборкаДанных.Следующий() Цикл
			Элементы.УчетнаяЗапись.СписокВыбора.Добавить(ВыборкаДанных.Ссылка, 
				ВыборкаДанных.Представление,
				,
				ИнтеграцияСМаркетплейсамиКлиентСервер.ЛоготипТорговойПлощадки(ВыборкаДанных.ВидМаркетплейса, "2", "", "2"));
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) 
				И Элементы.УчетнаяЗапись.СписокВыбора.Количество() > 0 Тогда
		УчетнаяЗапись = Элементы.УчетнаяЗапись.СписокВыбора[0].Значение;
	ИначеЕсли Элементы.УчетнаяЗапись.СписокВыбора.НайтиПоЗначению(УчетнаяЗапись) = Неопределено Тогда
		УчетнаяЗапись = Справочники.УчетныеЗаписиМаркетплейсов.ПустаяСсылка();
	КонецЕсли;
	
	Если ПараметрыФайла <> Неопределено Тогда
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН, КПП, Наименование");
		РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "ИНН, КПП, Наименование");
		
		Если ЗначениеЗаполнено(ПараметрыФайла.Отправитель.ИНН)
					И РеквизитыОрганизации.ИНН <> ПараметрыФайла.Отправитель.ИНН
				Или ЗначениеЗаполнено(ПараметрыФайла.Отправитель.КПП) 
					И РеквизитыОрганизации.КПП <> ПараметрыФайла.Отправитель.КПП Тогда
			Элементы.Организация.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
				БиблиотекаКартинок.Предупреждение,
				" ",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Организация в файле (%1, %2%3) не соответствует документу.'"),
					ПараметрыФайла.Отправитель.Наименование,
					ПараметрыФайла.Отправитель.ИНН,
					?(ЗначениеЗаполнено(ПараметрыФайла.Отправитель.КПП), "/" + ПараметрыФайла.Отправитель.КПП, "")));
		Иначе
			Элементы.Организация.РасширеннаяПодсказка.Заголовок = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыФайла.Получатель.ИНН) 
					И РеквизитыКонтрагента.ИНН <> ПараметрыФайла.Получатель.ИНН
				Или ЗначениеЗаполнено(ПараметрыФайла.Получатель.КПП) 
					И РеквизитыКонтрагента.КПП <> ПараметрыФайла.Получатель.КПП Тогда
			Элементы.Контрагент.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
					БиблиотекаКартинок.Предупреждение,
					" ",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Контрагент в файле (%1, %2%3) не соответствует документу.'"),
						ПараметрыФайла.Получатель.Наименование,
						ПараметрыФайла.Получатель.ИНН,
						?(ЗначениеЗаполнено(ПараметрыФайла.Получатель.КПП), "/" + ПараметрыФайла.Получатель.КПП, "")));
		Иначе
			Элементы.Контрагент.РасширеннаяПодсказка.Заголовок = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗакрытьФорму = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьСведения(ОчиститьДанныеРазбора = Ложь)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг1 Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг1;
	Элементы.ДекорацияЗаголовок1.Видимость  = Не Элементы.ГруппаОшибка1.Видимость;
	Элементы.ГруппаНастройки1.Видимость     = Не Элементы.ГруппаОшибка1.Видимость;
	Элементы.КнопкаНазад.Видимость          = Ложь;
	Элементы.КнопкаДалее.Видимость          = Не Элементы.ГруппаОшибка1.Видимость;
	Элементы.КнопкаДалее.Доступность        = Истина;
	
	ПоказатьСкрытьПодсказку();
	
	Если ОчиститьДанныеРазбора Тогда
		ПараметрыФайла.ДанныеРазбора = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Шаг2

&НаКлиенте
Процедура СопоставитьНоменклатуру()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг2 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами.ИнтеграцияСУчетнойСистемой.ОтражениеВУчете") Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Отсутствует подсистема отражения электронных документов в учете.'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указан контрагент.'"),, "Контрагент");
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница  = Элементы.ГруппаШаг2;
	Элементы.ДекорацияИнформация2.Заголовок  = Новый ФорматированнаяСтрока(
		НСтр("ru = '1. Проверьте и при необходимости измените подобранный вариант сопоставления номенклатуры из файла с данными информационной базы.
			|2. Переход к следующему шагу помощника возможен после сопоставления всех позиций номенклатуры.
			|3. Запись позиций, которые были найдены по данным публикации товаров торговых площадок (выделены шрифтом), не производится. Изменения действуют только при работе с текущим помощником.
			|4. При нажатии кнопки ""Назад"" выполненные изменения аннулируются. Повторный поиск вариантов сопоставления будет выполнен без учета выполненных изменений.
			|5. Нажмите кнопку ""Далее"", чтобы перейти к следующему шагу помощника ""Обработка расхождений"".'"));
	Элементы.ГруппаСтраницы2.ТекущаяСтраница = Элементы.ГруппаДлительнаяОперация2;
	Элементы.ГруппаОшибка2.Видимость         = Ложь;
	Элементы.КнопкаНазад.Видимость           = Истина;
	Элементы.КнопкаДалее.Видимость           = Истина;
	Элементы.КнопкаДалее.Доступность         = Ложь;
	
	ПоказатьСкрытьПодсказку();
	
	ДанныеЭлектронногоДокумента = ПолучитьДанныеЭлектронногоДокумента();
	ДлительнаяОперация          = СопоставитьНоменклатуруНаСервере(ДанныеЭлектронногоДокумента);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("СопоставитьНоменклатуруЗавершениеФоновогоЗадания", 
		ЭтотОбъект, ДанныеЭлектронногоДокумента);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания              = Ложь;
		ПараметрыОжидания.ВыводитьСообщения                 = Истина;
		ПараметрыОжидания.ОтменятьПриЗакрытииФормыВладельца = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СопоставитьНоменклатуруНаСервере(Знач ДанныеЭлектронногоДокумента)
	
	ДанныеЭлектронногоДокумента.ДополнительныеДанные.Вставить("ДанныеРазбора", ПолучитьДанныеРазбора());
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне               = Истина;
	ПараметрыВыполнения.ПрерватьВыполнениеЕслиОшибка = Истина;
	ПараметрыВыполнения.КлючФоновогоЗадания          = СпособОбработки + "_СопоставлениеНоменклатуры_" 
		+ РеквизитыДокумента.Идентификатор;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания  = ИнтеграцияСМаркетплейсамиСервер.СобытиеЖурналаРегистрации(
		СпособОбработки);
	
	ИмяМетода = "ИнтеграцияСМаркетплейсамиСервер.НоменклатураЭлектронногоДокументаДляСопоставления";
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, 
		ИмяМетода, 
		ДанныеЭлектронногоДокумента);
		
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура СопоставитьНоменклатуруЗавершениеФоновогоЗадания(Результат, ДанныеЭлектронногоДокумента) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Элементы.ГруппаСтраницы2.ТекущаяСтраница = Элементы.ГруппаСопоставлениеНоменклатуры2;
		Элементы.ГруппаОшибка2.Видимость         = Ложь;
		Элементы.КнопкаДалее.Доступность         = Истина;
		
		Если Результат.Статус = "Выполнено" 
				И Результат.Свойство("АдресРезультата") Тогда
			НоменклатураДляСопоставления = РезультатСопоставленияНоменклатуры(Результат.АдресРезультата);
			
			Если ЗначениеЗаполнено(НоменклатураДляСопоставления) Тогда
				ПараметрыОткрытия = Новый Структура;
				ПараметрыОткрытия.Вставить("РазрешитьСохранение",                  Истина);
				ПараметрыОткрытия.Вставить("Заголовок",                            Элементы.ДекорацияЗаголовок2.Заголовок);
				ПараметрыОткрытия.Вставить("ОтключитьПоискПоНатуральнымКлючам",    Ложь);
				ПараметрыОткрытия.Вставить("ОтключитьПоискПоШтрихкодамКомбинаций", Ложь);
				ПараметрыОткрытия.Вставить("ОтключитьПоискПоСловарю",              Ложь);
				ПараметрыОткрытия.Вставить("ТочностьПоискаПоУмолчанию",            75);
				ПараметрыОткрытия.Вставить("ДополнительныеПараметрыПоиска",        ДанныеЭлектронногоДокумента.ДополнительныеДанные);
				ПараметрыОткрытия.Вставить("НоменклатураКонтрагентов",             НоменклатураДляСопоставления);
				
				ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗавершенияСопоставленияНоменклатуры",
					ЭтотОбъект, 
					ДанныеЭлектронногоДокумента);
				
				ФормаСопоставленияНоменклатуры = ОткрытьФорму("Обработка.СопоставлениеНоменклатурыБЭД.Форма.Форма", 
					ПараметрыОткрытия, 
					ЭтотОбъект, 
					, 
					Окно, 
					, 
					ОповещениеОЗакрытии, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					
				ПодключитьОбработчикОжидания("МодифицированностьФормыСопоставленияНоменклатуры", 0.1, Истина);
				
			Иначе
				ОбработатьРасхождения(ДанныеЭлектронногоДокумента, Неопределено);
			КонецЕсли;
			Возврат;
			
		ИначеЕсли Результат.Статус = "Отменено" Тогда
			УточнитьСведения(Истина);
			Возврат;
			
		ИначеЕсли Результат.Статус = "Ошибка" 
					И Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.ГруппаШаг2 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаСтраницы2.ТекущаяСтраница = Элементы.ГруппаСопоставлениеНоменклатуры2;
	Элементы.ДекорацияИнформация2.Заголовок  = НСтр("ru = 'Для получения дополнительной информации об ошибках нажмите гиперссылку ""Подробнее"".'");
	Элементы.ГруппаОшибка2.Видимость         = Истина;
	Элементы.КнопкаДалее.Доступность         = Ложь;
	
КонецПроцедуры

&НаСервере
Функция РезультатСопоставленияНоменклатуры(Знач АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗапомнитьДанныеРазбора(Результат.ДанныеРазбора);
	
	Возврат Результат.НаборНоменклатурыКонтрагентов;
	
КонецФункции

&НаКлиенте
Процедура МодифицированностьФормыСопоставленияНоменклатуры()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг2 Тогда
		Если ТипЗнч(ФормаСопоставленияНоменклатуры) = Тип("ФормаКлиентскогоПриложения") 
				И ФормаСопоставленияНоменклатуры.Открыта() Тогда
			Если ФормаСопоставленияНоменклатуры.ОперацияПоискаВариантов = Неопределено Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("Сопоставлено", Истина);
				Отбор.Вставить("Сохранено",    Ложь);
				Отбор.Вставить("ВариантУказанияНоменклатуры", 
					СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ВариантУказанияНоменклатураКонтрагента());
				
				НайденныеСтроки = ФормаСопоставленияНоменклатуры.Объект.Сопоставление.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() = 0 Тогда
					ФормаСопоставленияНоменклатуры.Модифицированность = Ложь;
				КонецЕсли;
				
				ФормаСопоставленияНоменклатуры.Элементы[СпособОбработки + "_ПоказатьПодсказку"].Видимость = Не ВидимостьПодсказки;
				ФормаСопоставленияНоменклатуры.Элементы[СпособОбработки + "_ГруппаИнформация"].Видимость  = ВидимостьПодсказки;
				
			ИначеЕсли ФормаСопоставленияНоменклатуры.Модифицированность Тогда
				ПодключитьОбработчикОжидания("МодифицированностьФормыСопоставленияНоменклатуры", 0.5, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияСопоставленияНоменклатуры(Результат, ДанныеЭлектронногоДокумента) Экспорт
	
	Если Результат = Неопределено Тогда
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда
		Если Результат = "Назад" Тогда
			УточнитьСведения(Истина);
			
		ИначеЕсли Результат = "Закрыть" Тогда
			ЗакрытьФорму = Истина;
			Закрыть();
		КонецЕсли;
		
	Иначе
		СопоставленнаяНоменклатура = Новый Соответствие;
		
		Для Каждого ЭлементКоллекции Из Результат Цикл
			Если ЭлементКоллекции.ПоискВариантовНеТребуется Тогда
				Если ЗначениеЗаполнено(ЭлементКоллекции.НоменклатураКонтрагента.Идентификатор) Тогда
					СопоставленнаяНоменклатура.Вставить(
						"Идентификатор_" + ЭлементКоллекции.НоменклатураКонтрагента.Идентификатор,
						Новый Структура("НоменклатураИБ, НоменклатураКонтрагента",
							ЭлементКоллекции.НоменклатураИБ, ЭлементКоллекции.НоменклатураКонтрагента));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЭлементКоллекции.НоменклатураКонтрагента.КодНоменклатуры) Тогда
					СопоставленнаяНоменклатура.Вставить(
						"КодНоменклатуры_" + ЭлементКоллекции.НоменклатураКонтрагента.КодНоменклатуры,
						Новый Структура("НоменклатураИБ, НоменклатураКонтрагента",
							ЭлементКоллекции.НоменклатураИБ, ЭлементКоллекции.НоменклатураКонтрагента));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЭлементКоллекции.НоменклатураКонтрагента.ШтрихкодКомбинации) Тогда
					СопоставленнаяНоменклатура.Вставить(
						"Штрихкод_" + ЭлементКоллекции.НоменклатураКонтрагента.ШтрихкодКомбинации,
						Новый Структура("НоменклатураИБ, НоменклатураКонтрагента",
							ЭлементКоллекции.НоменклатураИБ, ЭлементКоллекции.НоменклатураКонтрагента));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ОбработатьРасхождения(ДанныеЭлектронногоДокумента, СопоставленнаяНоменклатура);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Шаг3

&НаКлиенте
Процедура ОбработатьРасхождения(Знач ДанныеЭлектронногоДокумента = Неопределено, 
			Знач СопоставленнаяНоменклатура = Неопределено)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг3
			И Не (ТипЗнч(ДанныеЭлектронногоДокумента) = Тип("Булево") И ДанныеЭлектронногоДокумента = Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг3;
	Элементы.КнопкаНазад.Видимость          = Истина;
	Элементы.КнопкаДалее.Заголовок          = НСтр("ru = 'Далее >'");
	Элементы.КнопкаДалее.Видимость          = Истина;
	Элементы.КнопкаДалее.Доступность        = Истина;
	
	ПоказатьСкрытьПодсказку();
	
	Если ДанныеЭлектронногоДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСтраницы3.ТекущаяСтраница = Элементы.ГруппаДлительнаяОперация3;
	Элементы.ГруппаОшибка3.Видимость         = Ложь;
	Элементы.КнопкаДалее.Доступность         = Ложь;
	
	Если (ТипЗнч(ДанныеЭлектронногоДокумента) = Тип("Булево") И ДанныеЭлектронногоДокумента = Истина) Тогда
		ДлительнаяОперация = АнализРасхожденийНаСервере();
		ДополнительныеПараметры = Истина;
	Иначе
		ДлительнаяОперация = ОбработатьРасхожденияНаСервере(ДанныеЭлектронногоДокумента, СопоставленнаяНоменклатура);
		ДополнительныеПараметры = Ложь;
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРасхожденияЗавершениеФоновогоЗадания", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания              = Ложь;
		ПараметрыОжидания.ВыводитьСообщения                 = Истина;
		ПараметрыОжидания.ОтменятьПриЗакрытииФормыВладельца = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРасхожденияНаСервере(Знач ДанныеЭлектронногоДокумента, Знач СопоставленнаяНоменклатура)
	
	ПервичныйДокументОбъект.Товары.Очистить();
	РасхожденияТабличныйДокумент.Очистить();
	
	ДанныеЭлектронногоДокумента.ДополнительныеДанные.Вставить("ДанныеРазбора", ПолучитьДанныеРазбора());
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне               = Истина;
	ПараметрыВыполнения.ПрерватьВыполнениеЕслиОшибка = Истина;
	ПараметрыВыполнения.КлючФоновогоЗадания          = СпособОбработки + "_АнализРасхождений_" 
		+ РеквизитыДокумента.Идентификатор;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания  = ИнтеграцияСМаркетплейсамиСервер.СобытиеЖурналаРегистрации(
		СпособОбработки);
	
	ИмяМетода = "ИнтеграцияСМаркетплейсамиСервер.ОтразитьДанныеОРасхожденияхЭлектронногоДокумента";
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, 
		ИмяМетода, 
		ПервичныйДокумент,
		ДанныеЭлектронногоДокумента, 
		СпособОбработки,
		СопоставленнаяНоменклатура);
		
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаСервере
Функция АнализРасхожденийНаСервере()
	
	ПервичныйДокументОбъект.Товары.Очистить();
	РасхожденияТабличныйДокумент.Очистить();
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне               = Истина;
	ПараметрыВыполнения.ПрерватьВыполнениеЕслиОшибка = Истина;
	ПараметрыВыполнения.КлючФоновогоЗадания          = СпособОбработки + "_АнализРасхождений_" 
		+ РеквизитыДокумента.Идентификатор;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания  = ИнтеграцияСМаркетплейсамиСервер.СобытиеЖурналаРегистрации(
		СпособОбработки);
	
	ИмяМетода = "ИнтеграцияСМаркетплейсамиСервер.АнализРасхожденийДокументаИТорговойПлощадки";
	РасхожденияРезультат = ПолучитьИзВременногоХранилища(АдресХранилищаРасхождений);
	
	ТоварыИзДокумента            = Неопределено;
	ШтрихкодыУпаковокИзДокумента = Неопределено;
	ИнтеграцияСМаркетплейсамиСервер.ПолучитьТабличныеЧастиИзДокумента(ПервичныйДокумент, 
		ТоварыИзДокумента, ШтрихкодыУпаковокИзДокумента);
		
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, 
		ИмяМетода, 
		РасхожденияРезультат.ТоварыИзФайла, 
		РасхожденияРезультат.ШтрихкодыУпаковокИзФайла, 
		ТоварыИзДокумента, 
		ШтрихкодыУпаковокИзДокумента);
		
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРасхожденияЗавершениеФоновогоЗадания(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Элементы.ГруппаСтраницы3.ТекущаяСтраница  = Элементы.ГруппаРасхождения3;
		Элементы.ГруппаОшибка3.Видимость          = Ложь;
		Элементы.ГруппаКоманднаяПанель3.Видимость = Истина;
		Элементы.ГруппаНастройки3.Видимость       = Истина;
		Элементы.КнопкаДалее.Доступность          = Истина;
		
		Если Результат.Статус = "Выполнено" 
				И Результат.Свойство("АдресРезультата") Тогда
			РезультатАнализаРасхождений(Результат.АдресРезультата, ДополнительныеПараметры);
			ПереключитьРежимОтображения(Ложь);
			Возврат;
			
		ИначеЕсли Результат.Статус = "Отменено" Тогда
			СопоставитьНоменклатуру();
			Возврат;
			
		ИначеЕсли Результат.Статус = "Ошибка" 
					И Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.ГруппаШаг3 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаСтраницы3.ТекущаяСтраница  = Элементы.ГруппаРасхождения3;
	Элементы.ГруппаОшибка3.Видимость          = Истина;
	Элементы.ДекорацияОшибка3.Заголовок       = Новый ФорматированнаяСтрока(
		НСтр("ru = 'При анализе расхождений произошла ошибка.'"), " ",
		Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее'"),, 
			ОбщегоНазначенияКлиент.ЦветСтиля("ГиперссылкаЦвет"),, "ОбработатьРасхожденияОшибка"));
	Элементы.ГруппаКоманднаяПанель3.Видимость = Ложь;
	Элементы.ГруппаНастройки3.Видимость       = Ложь;
	Элементы.КнопкаДалее.Доступность          = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура РезультатАнализаРасхождений(Знач АдресРезультата, Знач ДополнительныеПараметры)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаРасхождений) Тогда
		РасхожденияРезультат = ПолучитьИзВременногоХранилища(АдресХранилищаРасхождений);
	Иначе
		РасхожденияРезультат = Новый Структура;
	КонецЕсли;
	
	Если ДополнительныеПараметры = Ложь Тогда
		ЗапомнитьДанныеРазбора(Результат.ДанныеРазбора);
		
		РасхожденияРезультат.Вставить("ТоварыИзФайла",                Результат.ТоварыИзФайла);
		РасхожденияРезультат.Вставить("ШтрихкодыУпаковокИзФайла",     Результат.ШтрихкодыУпаковокИзФайла);
		РасхожденияРезультат.Вставить("ТоварыИзДокумента",            Результат.ТоварыИзДокумента);
		РасхожденияРезультат.Вставить("ШтрихкодыУпаковокИзДокумента", Результат.ШтрихкодыУпаковокИзДокумента);
	КонецЕсли;
	
	Если ДополнительныеПараметры = Истина Тогда
		ИнтеграцияСМаркетплейсамиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(ПервичныйДокумент, 
			Результат.ТоварыРасхождения);
	КонецЕсли;
	
	РасхожденияРезультат.Вставить("ТоварыРасхождения",            Результат.ТоварыРасхождения);
	РасхожденияРезультат.Вставить("ШтрихкодыУпаковокРасхождения", Результат.ШтрихкодыУпаковокРасхождения);
	
	АдресХранилищаРасхождений = ПоместитьВоВременноеХранилище(РасхожденияРезультат, УникальныйИдентификатор);
	ЕстьМаркировка            = ЗначениеЗаполнено(Результат.ШтрихкодыУпаковокРасхождения);
	
	Элементы.РасхожденияМаркировка.Видимость = ЕстьМаркировка;
	
	ПервичныйДокументОбъект.Товары.Загрузить(Результат.ТоварыРасхождения);
	СформироватьРасхожденияВВидеОтчета3(Результат.ТоварыРасхождения);
	УправлениеДополнительнойИнформацией3();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДополнительнойИнформацией3()
	
	ЕстьРасхождения = ПервичныйДокументОбъект.Товары.НайтиСтроки(Новый Структура("ЕстьРасхождения", Истина)).Количество();
	
	Если ЕстьРасхождения = 0 Тогда
		Элементы.ДекорацияНастройки3.Заголовок             = НСтр("ru = 'Отсутствуют строки с расхождениями, по которым требуется оформление документов'");
		Элементы.ГруппаСпособОтражения3.Видимость          = Ложь;
		Элементы.ГруппаДополнительнаяИнформация3.Видимость = Ложь;
		
		СпособОтраженияРасхождений = Неопределено;
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияНастройки3.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Обнаружены расхождения в %1 %2'"),
		Формат(ЕстьРасхождения, "ЧДЦ=0; ЧН=0; ЧГ=0"),
		ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(ЕстьРасхождения, НСтр("ru = 'строке, строках, строках, ж'")));
	Элементы.ГруппаСпособОтражения3.Видимость = Истина;
	
	ИспользоватьИсправлениеДокументов        = ПолучитьФункциональнуюОпцию("ИспользоватьИсправлениеДокументов");
	ИспользоватьАктыРасхожденийПослеОтгрузки = ПолучитьФункциональнуюОпцию("ИспользоватьАктыРасхожденийПослеОтгрузки");
	
	ДоступныеСпособыОтраженияРасхождений = Новый Массив;
	СтатусЭДОПервичногоДокумента         = ОбменСКонтрагентами.СтатусДокументооборота(ПервичныйДокумент).Статус;
	ЕстьИсправлениеИлиСторно             = ИсправлениеДокументов.ЕстьИсправлениеИлиСторно(ПервичныйДокумент);
	ТекстПояснения                       = "";
	
	Если СтатусЭДОПервичногоДокумента = "ЭДОНеНастроен"
			Или СтатусЭДОПервичногоДокумента = "НеНачат"
			Или СтатусЭДОПервичногоДокумента = "Ошибка"
			Или СтатусЭДОПервичногоДокумента = "ВОбработке"
			Или СтатусЭДОПервичногоДокумента = "Получен"
			Или СтатусЭДОПервичногоДокумента = "ОтклонениеВОбработке"
			Или СтатусЭДОПервичногоДокумента = "УтверждениеВОбработке" Тогда
		Если Не ЕстьИсправлениеИлиСторно Тогда
			ДоступныеСпособыОтраженияРасхождений.Добавить(
				Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ИсправлениеПервичныхДокументов);
		КонецЕсли;
		Если ИспользоватьИсправлениеДокументов Тогда
			ДоступныеСпособыОтраженияРасхождений.Добавить(
				Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировкиКакИсправлениеПервичныхДокументов);
		КонецЕсли;
		Если ИспользоватьАктыРасхожденийПослеОтгрузки Тогда
			ДоступныеСпособыОтраженияРасхождений.Добавить(
				Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировокКакНовыеПервичныеДокументы);
		КонецЕсли;
		
	ИначеЕсли СтатусЭДОПервичногоДокумента = "Утвержден" Тогда
		Если ИспользоватьИсправлениеДокументов Тогда
			ДоступныеСпособыОтраженияРасхождений.Добавить(
				Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировкиКакИсправлениеПервичныхДокументов);
		КонецЕсли;
		Если ИспользоватьАктыРасхожденийПослеОтгрузки Тогда
			ДоступныеСпособыОтраженияРасхождений.Добавить(
				Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировокКакНовыеПервичныеДокументы);
		КонецЕсли;
		
	ИначеЕсли СтатусЭДОПервичногоДокумента = "Отклонен" Тогда
		Если Не ЕстьИсправлениеИлиСторно Тогда
			ДоступныеСпособыОтраженияРасхождений.Добавить(
				Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ИсправлениеПервичныхДокументов);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СпособОтраженияРасхождений)
			И ДоступныеСпособыОтраженияРасхождений.Найти(СпособОтраженияРасхождений) = Неопределено Тогда
		Если ДоступныеСпособыОтраженияРасхождений.Количество() = 0 Тогда
			СпособОтраженияРасхождений = Неопределено;
		Иначе
			СпособОтраженияРасхождений = ДоступныеСпособыОтраженияРасхождений[0];
		КонецЕсли;
	ИначеЕсли Не ЗначениеЗаполнено(СпособОтраженияРасхождений)
				И ДоступныеСпособыОтраженияРасхождений.Количество() > 0 Тогда
		СпособОтраженияРасхождений = ДоступныеСпособыОтраженияРасхождений[0];
	КонецЕсли;
	
	Элементы.СпособОтраженияРасхожденийИзменение.Доступность = ДоступныеСпособыОтраженияРасхождений.Найти(
		Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ИсправлениеПервичныхДокументов) <> Неопределено;
	Элементы.ПервичныйДокумент.Видимость                     = СпособОтраженияРасхождений 
		= Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ИсправлениеПервичныхДокументов;
	Элементы.ГруппаСпособОтражения3Исправление.Видимость     = ИспользоватьИсправлениеДокументов;
	Элементы.ГруппаСпособОтражения3Исправление.Доступность   = ДоступныеСпособыОтраженияРасхождений.Найти(
		Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировкиКакИсправлениеПервичныхДокументов) <> Неопределено;
	Элементы.ПередачаТоваровХранителюИсправление.Видимость   = СпособОтраженияРасхождений 
		= Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировкиКакИсправлениеПервичныхДокументов;
	Элементы.ГруппаСпособОтражения3Акт.Видимость             = ИспользоватьАктыРасхожденийПослеОтгрузки;
	Элементы.ГруппаСпособОтражения3Акт.Доступность           = ДоступныеСпособыОтраженияРасхождений.Найти(
		Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировокКакНовыеПервичныеДокументы) <> Неопределено;
	Элементы.АктОРасхожденияхПослеОтгрузки.Видимость         = СпособОтраженияРасхождений 
		= Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировокКакНовыеПервичныеДокументы;
	
	Если СтатусЭДОПервичногоДокумента = "ВОбработке"
			Или СтатусЭДОПервичногоДокумента = "Получен"
			Или СтатусЭДОПервичногоДокумента = "ОтклонениеВОбработке"
			Или СтатусЭДОПервичногоДокумента = "УтверждениеВОбработке" Тогда
		ТекстПояснения = НСтр("ru = 'Первичный документ участвует в ЭДО, но комиссионер пока не подтвердил и не отклонил документ.'");
		Если ЕстьИсправлениеИлиСторно Тогда
			Если Не ИспользоватьИсправлениеДокументов 
					И Не ИспользоватьАктыРасхожденийПослеОтгрузки Тогда
				ТекстПояснения = ТекстПояснения + " " + НСтр("ru = 'Документ аннулирован. Возможна только корректировка передачи товаров, но ее использование отключено.'");
			Иначе
				ТекстПояснения = ТекстПояснения + " " + НСтр("ru = 'Документ аннулирован. Возможна только корректировка передачи товаров.'");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтатусЭДОПервичногоДокумента = "Утвержден" Тогда
		Если Не ИспользоватьИсправлениеДокументов 
				И Не ИспользоватьАктыРасхожденийПослеОтгрузки Тогда
			ТекстПояснения = НСтр("ru = 'Электронный документ по передаче товаров подтвержден комиссионером. Возможна только корректировка передачи товаров, но ее использование отключено.'");
		Иначе
			ТекстПояснения = НСтр("ru = 'Электронный документ по передаче товаров подтвержден комиссионером. Возможна только корректировка передачи товаров.'");
		КонецЕсли;
		
	ИначеЕсли СтатусЭДОПервичногоДокумента = "Отклонен"
				И (ИспользоватьИсправлениеДокументов 
					Или ИспользоватьАктыРасхожденийПослеОтгрузки) Тогда
		ТекстПояснения = НСтр("ru = 'Электронный документ по передаче товаров отклонен комиссионером. Возможно только изменение передачи товаров.'");
		
	Иначе
		Если ЕстьИсправлениеИлиСторно Тогда
			Если Не ИспользоватьИсправлениеДокументов 
					И Не ИспользоватьАктыРасхожденийПослеОтгрузки Тогда
				ТекстПояснения = НСтр("ru = 'Первичный документ аннулирован. Возможна только корректировка передачи товаров, но ее использование отключено.'");
			Иначе
				ТекстПояснения = НСтр("ru = 'Первичный документ аннулирован. Возможна только корректировка передачи товаров.'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаДополнительнаяИнформация3.Видимость    = Не ПустаяСтрока(ТекстПояснения);
	Элементы.ДекорацияДополнительнаяИнформация3.Заголовок = ТекстПояснения;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимОтображения(Знач ОбновитьТабличныйДокумент = Ложь)
	
	Если РасхожденияПредставление = 0 Тогда
		Элементы.Расхождения.Видимость                  = Истина;
		Элементы.СтрокаПоискаРасхождения.Видимость      = Истина;
		Элементы.РасхожденияТабличныйДокумент.Видимость = Ложь;
		
		Если Элементы.КнопкаТолькоРасхождения3.Пометка Тогда
			Элементы.Расхождения.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьРасхождения", Истина);
		Иначе
			Элементы.Расхождения.ОтборСтрок = Неопределено;
		КонецЕсли;
		
	Иначе
		Элементы.Расхождения.Видимость                  = Ложь;
		Элементы.СтрокаПоискаРасхождения.Видимость      = Ложь;
		Элементы.РасхожденияТабличныйДокумент.Видимость = Истина;
	КонецЕсли;
	
	Если ОбновитьТабличныйДокумент Тогда
		СформироватьРасхожденияВВидеОтчета3();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРасхожденияВВидеОтчета3(Знач Расхождения = Неопределено)
	
	ВнешниеНаборыДанных = Новый Структура;
	Если Расхождения = Неопределено Тогда
		ВнешниеНаборыДанных.Вставить("Расхождения", ПервичныйДокументОбъект.Товары.Выгрузить());
	Иначе
		ВнешниеНаборыДанных.Вставить("Расхождения", Расхождения);
	КонецЕсли;
	
	СформироватьОтчетОРасхождениях(РасхожденияТабличныйДокумент, 
		ВнешниеНаборыДанных, 
		Элементы.КнопкаТолькоРасхождения3.Пометка,
		ЕстьМаркировка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьДокумент()
	
	Если ЗначениеЗаполнено(СпособОтраженияРасхождений) Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПередИсправлениемДокумента", ЭтотОбъект);
		
		Если СпособОтраженияРасхождений = ПредопределенноеЗначение("Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ИсправлениеПервичныхДокументов") Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Изменить документ %1?'"),
				ПервичныйДокумент);
			
		ИначеЕсли СпособОтраженияРасхождений = ПредопределенноеЗначение("Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировкиКакИсправлениеПервичныхДокументов") Тогда
			Если ЗначениеЗаполнено(ПередачаТоваровХранителюИсправление) Тогда
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Изменить корректировку передачи товаров (исправление) %1?'"),
					ПередачаТоваровХранителюИсправление);
			Иначе
				ТекстВопроса = НСтр("ru = 'Создать корректировку передачи товаров (исправление)?'");
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(АктОРасхожденияхПослеОтгрузки) Тогда
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Изменить акт о расхождениях после передачи товаров %1?'"),
					АктОРасхожденияхПослеОтгрузки);
			Иначе
				ТекстВопроса = НСтр("ru = 'Создать акт о расхождениях после передачи товаров?'");
			КонецЕсли;
		КонецЕсли;
		
		ПоказатьВопрос(ОповещениеОЗавершении,
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНетОтмена,
			,
			КодВозвратаДиалога.Да);
		
	Иначе
		ЗаменитьЭлектронныйДокумент();
	КонецЕсли
		
КонецПроцедуры

&НаКлиенте
Процедура ПередИсправлениемДокумента(РезультатВопроса, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ИсправленныйДокумент = Неопределено;
		ТекстОшибки          = "";
		
		Если СпособОтраженияРасхождений = ПредопределенноеЗначение("Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ИсправлениеПервичныхДокументов") Тогда
			Оповестить(СпособОбработки + "_Исправление", 
				АдресХранилищаРасхождений,
				ПервичныйДокумент);
			ИсправленныйДокумент = ПервичныйДокумент;
			
		ИначеЕсли СпособОтраженияРасхождений = ПредопределенноеЗначение("Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировкиКакИсправлениеПервичныхДокументов") Тогда
			ОчиститьСообщения();
			Если СоздатьПередачаТоваровХранителюИсправление(ТекстОшибки) Тогда
				ИсправленныйДокумент = ПередачаТоваровХранителюИсправление;
				Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
					ПоказатьЗначение(, ИсправленныйДокумент);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли СпособОтраженияРасхождений = ПредопределенноеЗначение("Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировокКакНовыеПервичныеДокументы") Тогда
			ОчиститьСообщения();
			Если СоздатьАктОРасхожденияхПослеОтгрузки(ТекстОшибки) Тогда
				ИсправленныйДокумент = АктОРасхожденияхПослеОтгрузки;
				Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
					ПоказатьЗначение(, ИсправленныйДокумент);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
			ТекстЗаголовка = НСтр("ru = 'Сверка документа с торговой площадкой'");
			ТекстПояснения = НСтр("ru = 'Документ перезаполнен, проверьте данные.'")
				+ ?(ЕстьМаркировка, " " + НСтр("ru = 'Для маркированной продукции на странице ""Товары"" откройте форму ""Подбор и проверка товаров"", выполните контроль статусов и владельцев кодов маркировки.'"), "");
			ПоказатьОповещениеПользователя(ТекстЗаголовка, 
				ПолучитьНавигационнуюСсылку(ИсправленныйДокумент), 
				ТекстПояснения,
				БиблиотекаКартинок.Информация32, 
				СтатусОповещенияПользователя.Важное);
				
		ИначеЕсли ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
			
			Элементы.ГруппаОшибка3.Видимость          = Истина;
			Элементы.ДекорацияОшибка3.Заголовок       = Новый ФорматированнаяСтрока(
				НСтр("ru = 'При исправлении расхождений произошла ошибка.'"), " ",
				Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее'"),, 
					ОбщегоНазначенияКлиент.ЦветСтиля("ГиперссылкаЦвет"),, "ИсправитьДокументОшибка"));
			Возврат;
			
		Иначе
			Элементы.ГруппаОшибка3.Видимость = Ложь;
		КонецЕсли; 
		
		ЗаменитьЭлектронныйДокумент(ИсправленныйДокумент);
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ЗаменитьЭлектронныйДокумент();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьПередачаТоваровХранителюИсправление(ТекстОшибки)
	
	ИмяСобытия = ИнтеграцияСМаркетплейсамиСервер.СобытиеЖурналаРегистрации(СпособОбработки);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИсправлениеДокументов") Тогда
		ТекстОшибки = НСтр("ru = 'Для оформления корректировки передачи товаров необходимо включить опцию ""Использовать исправительные документы"" в настройках раздела ""НСИ и администрирование"" - ""Финансовый результат и контроллинг"" - ""Исправление и проверка документов"".'");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПередачаТоваровХранителюИсправление) Тогда
		ИсправленныйДокумент = ПередачаТоваровХранителюИсправление.ПолучитьОбъект();
		НовыйДокумент        = Ложь;
		
		ТекстОшибки = ИнтеграцияСМаркетплейсамиСервер.ЗаблокироватьДокумент(ИсправленныйДокумент, ИмяСобытия);
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		ИсправленныйДокумент = Документы.ПередачаТоваровХранителю.СоздатьДокумент();
		НовыйДокумент        = Истина;
	КонецЕсли;
	
	Исправления = ИсправлениеДокументов.ИсправленияДокумента(ПервичныйДокумент);
	Если ЗначениеЗаполнено(Исправления) Тогда
		ДанныеЗаполнения = Исправления[Исправления.ВГраница()];
	Иначе
		ДанныеЗаполнения = ПервичныйДокумент;
	КонецЕсли;
	
	ТекстОшибки = ИнтеграцияСМаркетплейсамиСервер.ПередачаТоваровХранителюЗаполнить(ИсправленныйДокумент, 
		ДанныеЗаполнения, Неопределено, ИмяСобытия);
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИсправленныйДокумент.Товары.Очистить();
	ИсправленныйДокумент.ШтрихкодыУпаковок.Очистить();
	
	РасхожденияРезультат = ПолучитьИзВременногоХранилища(АдресХранилищаРасхождений);
	
	Для Каждого СтрокаТаблицыЗначений Из РасхожденияРезультат.ТоварыРасхождения Цикл
		Если СтрокаТаблицыЗначений.КоличествоУпаковок > 0 Тогда
			СтрокаТабличнойЧасти = ИсправленныйДокумент.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицыЗначений);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыЗначений Из РасхожденияРезультат.ШтрихкодыУпаковокРасхождения Цикл
		Если СтрокаТаблицыЗначений.Количество > 0
				И ЗначениеЗаполнено(СтрокаТаблицыЗначений.Ссылка) Тогда
			СтрокаТабличнойЧасти = ИсправленныйДокумент.ШтрихкодыУпаковок.Добавить();
			СтрокаТабличнойЧасти.ШтрихкодУпаковки = СтрокаТаблицыЗначений.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Если ИсправленныйДокумент.Товары.Количество() > 0 Тогда
		// Запись документа
		РезультатЗаписиДокумента = ИнтеграцияСМаркетплейсамиСервер.ЗаписатьПровестиДокумент(ИсправленныйДокумент, 
			Ложь, ИмяСобытия);
			
		Если Не НовыйДокумент Тогда
			ИсправленныйДокумент.Разблокировать();
		КонецЕсли;
		
		Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
			ТекстОшибки = НСтр("ru = 'При записи исправительного документа возникли ошибки. Подробнее см. в журнале регистрации.'");
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли Не НовыйДокумент Тогда
		// Запись и пометка на удаление документа
		ИсправленныйДокумент.ПометкаУдаления = Истина;
		
		РезультатЗаписиДокумента = ИнтеграцияСМаркетплейсамиСервер.ЗаписатьПровестиДокумент(ИсправленныйДокумент, 
			Ложь, ИмяСобытия);
		ИсправленныйДокумент.Разблокировать();
		
		Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
			ТекстОшибки = НСтр("ru = 'При записи исправительного документа возникли ошибки. Подробнее см. в журнале регистрации.'");
			Возврат Ложь;
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные для записи отсутствуют. Документ %1 помечен на удаление.'"),
			ИсправленныйДокумент));
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Данные для записи отсутствуют. Документ не создан.'"));
	КонецЕсли;
	
	ПередачаТоваровХранителюИсправление = ИсправленныйДокумент.Ссылка;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СоздатьАктОРасхожденияхПослеОтгрузки(ТекстОшибки)
	
	ИмяСобытия = ИнтеграцияСМаркетплейсамиСервер.СобытиеЖурналаРегистрации(СпособОбработки);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьАктыРасхожденийПослеОтгрузки") Тогда
		ТекстОшибки = НСтр("ru = 'Для оформления акта о расхождениях после передачи товаров необходимо включить опцию ""Использовать акты о расхождениях после отгрузки"" в настройках раздела ""НСИ и администрирование"" - ""Продажи"" - ""Оптовые продажи"".'");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АктОРасхожденияхПослеОтгрузки) Тогда
		ИсправленныйДокумент = АктОРасхожденияхПослеОтгрузки.ПолучитьОбъект();
		НовыйДокумент        = Ложь;
		
		ТекстОшибки = ИнтеграцияСМаркетплейсамиСервер.ЗаблокироватьДокумент(ИсправленныйДокумент, ИмяСобытия);
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		ИсправленныйДокумент = Документы.АктОРасхожденияхПослеОтгрузки.СоздатьДокумент();
		НовыйДокумент        = Истина;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Дата", ТекущаяДатаСеанса());
	
	Исправления = ИсправлениеДокументов.ИсправленияДокумента(ПервичныйДокумент);
	Если ЗначениеЗаполнено(Исправления) Тогда
		ДанныеЗаполнения.Вставить("ДокументОснование", Исправления[Исправления.ВГраница()]);
	Иначе
		ДанныеЗаполнения.Вставить("ДокументОснование", ПервичныйДокумент);
	КонецЕсли;
	
	ТекстОшибки = ИнтеграцияСМаркетплейсамиСервер.АктОРасхожденияхПослеОтгрузкиЗаполнить(ИсправленныйДокумент, 
		ДанныеЗаполнения, Неопределено, ИмяСобытия);
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИсправленныйДокумент.Товары.Очистить();
	ИсправленныйДокумент.ШтрихкодыУпаковок.Очистить();
	ИсправленныйДокумент.ШтрихкодыУпаковокФактЭДО.Очистить();
	
	РасхожденияРезультат = ПолучитьИзВременногоХранилища(АдресХранилищаРасхождений);
	
	Для Каждого СтрокаТаблицыЗначений Из РасхожденияРезультат.ТоварыРасхождения Цикл
		СтрокаТабличнойЧасти = ИсправленныйДокумент.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицыЗначений);
		
		Если ЗначениеЗаполнено(Исправления) Тогда
			СтрокаТабличнойЧасти.Реализация = Исправления[Исправления.ВГраница()];
		Иначе
			СтрокаТабличнойЧасти.Реализация = ПервичныйДокумент;
		КонецЕсли;
		
		Если СтрокаТаблицыЗначений.КоличествоУпаковокПоДокументу > 0 Тогда
			СтрокаТабличнойЧасти.ЗаполненоПоРеализации = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыЗначений Из РасхожденияРезультат.ШтрихкодыУпаковокРасхождения Цикл
		Если СтрокаТаблицыЗначений.Количество > 0 Тогда
			СтрокаТабличнойЧасти = ИсправленныйДокумент.ШтрихкодыУпаковок.Добавить();
			СтрокаТабличнойЧасти.ШтрихкодУпаковки  = СтрокаТаблицыЗначений.Ссылка;
			СтрокаТабличнойЧасти.ЗначениеШтрихкода = СтрокаТаблицыЗначений.ЗначениеШтрихкода;
			
			СтрокаТабличнойЧасти = ИсправленныйДокумент.ШтрихкодыУпаковокФактЭДО.Добавить();
			СтрокаТабличнойЧасти.ЗначениеШтрихкода = СтрокаТаблицыЗначений.ЗначениеШтрихкода;
			СтрокаТабличнойЧасти.Номенклатура      = СтрокаТаблицыЗначений.Номенклатура;
			СтрокаТабличнойЧасти.Характеристика    = СтрокаТаблицыЗначений.Характеристика;
			СтрокаТабличнойЧасти.Количество        = СтрокаТаблицыЗначений.Количество;
		КонецЕсли;
	КонецЦикла;
	
	Если ИсправленныйДокумент.Товары.Количество() > 0 Тогда
		// Запись документа
		РезультатЗаписиДокумента = ИнтеграцияСМаркетплейсамиСервер.ЗаписатьПровестиДокумент(ИсправленныйДокумент, 
			Ложь, ИмяСобытия);
			
		Если Не НовыйДокумент Тогда
			ИсправленныйДокумент.Разблокировать();
		КонецЕсли;
		
		Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
			ТекстОшибки = НСтр("ru = 'При записи акта о расхождениях после передачи товаров возникли ошибки. Подробнее см. в журнале регистрации.'");
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли Не НовыйДокумент Тогда
		// Запись и пометка на удаление документа
		ИсправленныйДокумент.ПометкаУдаления = Истина;
		
		РезультатЗаписиДокумента = ИнтеграцияСМаркетплейсамиСервер.ЗаписатьПровестиДокумент(ИсправленныйДокумент, 
			Ложь, ИмяСобытия);
		ИсправленныйДокумент.Разблокировать();
		
		Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
			ТекстОшибки = НСтр("ru = 'При записи акта о расхождениях после передачи товаров возникли ошибки. Подробнее см. в журнале регистрации.'");
			Возврат Ложь;
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные для записи отсутствуют. Документ %1 помечен на удаление.'"),
			ИсправленныйДокумент));
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Данные для записи отсутствуют. Документ не создан.'"));
	КонецЕсли;
	
	АктОРасхожденияхПослеОтгрузки = ИсправленныйДокумент.Ссылка;
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Шаг4

&НаКлиенте
Процедура ЗаменитьЭлектронныйДокумент(Знач ИсправленныйДокумент = Неопределено)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаг4 Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница  = Элементы.ГруппаШаг4;
	Элементы.ГруппаОшибка4.Видимость         = Ложь;
	Элементы.ГруппаНастройки4.Видимость      = Не ПараметрыФайла.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.Прикладной");
	Элементы.КнопкаНазад.Видимость           = Истина;
	Элементы.КнопкаДалее.Заголовок           = НСтр("ru = 'Завершить'");
	Элементы.КнопкаДалее.Видимость           = Истина;
	Элементы.КнопкаДалее.Доступность         = Истина;
	
	Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		Элементы.ДекорацияПредупреждение4.Заголовок = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Проверьте'"), " ",
			Новый ФорматированнаяСтрока(НСтр("ru = 'результат исправления'"),, 
				ОбщегоНазначенияКлиент.ЦветСтиля("ГиперссылкаЦвет"),, "ОткрытьИсправленныйДокумент"),
			".");
	Иначе
		Элементы.ДекорацияПредупреждение4.Заголовок = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Изменения в документы учетной системы не вносились.'"));
	КонецЕсли;
	
	УправлениеДополнительнойИнформацией4();
	СформироватьРасхожденияВВидеОтчета4(ИсправленныйДокумент);
	
	ПоказатьСкрытьПодсказку();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДополнительнойИнформацией4()
	
	Если Не ПараметрыФайла.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.Прикладной") Тогда
		ЗапретитьФормированиеФормализованныхЭДИзФайлов = ПолучитьФункциональнуюОпцию("ЗапретитьФормированиеФормализованныхЭДИзФайлов");
		ТекстПояснения = "";
		
		Если ЗапретитьФормированиеФормализованныхЭДИзФайлов Тогда
			ТекстПояснения = НСтр("ru = 'Замена электронного документа запрещена настройками учетной системы.'");
		Иначе
			СтатусЭДО = ОбменСКонтрагентами.СтатусДокументооборота(ПервичныйДокумент);
			
			Если СтатусЭДО.Статус <> "ЭДОНеНастроен"
					И СтатусЭДО.Статус <> "НеНачат"
					И СтатусЭДО.Статус <> "Получен"
					И СтатусЭДО.Статус <> "ВОбработке" Тогда
				ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Замена электронного документа в статусе ""%1"" невозможна.'"),
					СтрЗаменить(СтатусЭДО.Статус, "ВОбработке", " " + НСтр("ru = 'в обработке'")));
				
			Иначе
				ОписаниеФайла = Новый Структура;
				ОписаниеФайла.Вставить("Имя",      ИмяФайла);
				ОписаниеФайла.Вставить("Хранение", АдресХранилищаФайла);
				
				СуществующийДокумент = ЭлектронныеДокументыЭДО.ИсходящийДокументПоИдентификаторуФайла(ОписаниеФайла, 
					СтатусЭДО.ЭлектронныйДокумент);
				
				Если ЗначениеЗаполнено(СуществующийДокумент) 
						И ЗначениеЗаполнено(СтатусЭДО.ЭлектронныйДокумент) Тогда
					ТекстПояснения = НСтр("ru = 'Замена электронного документа невозможна. Такой файл уже был загружен ранее.'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстПояснения = НСтр("ru = 'Замена электронного документа возможна только для формализованной структуры входящего файла.'");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстПояснения) Тогда
		ЗаменитьЭлектронныйДокумент = Ложь;
	КонецЕсли;
	
	Элементы.ЗаменитьЭлектронныйДокумент.Доступность      = ПустаяСтрока(ТекстПояснения);
	Элементы.ГруппаДополнительнаяИнформация4.Видимость    = Не ПустаяСтрока(ТекстПояснения);
	Элементы.ДекорацияДополнительнаяИнформация4.Заголовок = ТекстПояснения;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРасхожденияВВидеОтчета4(Знач ИсправленныйДокумент = Неопределено)
	
	Если Не ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		Если СпособОтраженияРасхождений = ПредопределенноеЗначение("Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ИсправлениеПервичныхДокументов") Тогда
			ИсправленныйДокумент = ПервичныйДокумент;
		ИначеЕсли СпособОтраженияРасхождений = ПредопределенноеЗначение("Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировкиКакИсправлениеПервичныхДокументов") Тогда
			ИсправленныйДокумент = ПередачаТоваровХранителюИсправление;
		ИначеЕсли СпособОтраженияРасхождений = ПредопределенноеЗначение("Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировокКакНовыеПервичныеДокументы") Тогда
			ИсправленныйДокумент = АктОРасхожденияхПослеОтгрузки;
		Иначе
			ИсправленныйДокумент = ПервичныйДокумент;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		ИсправленныйДокумент = ПервичныйДокумент;
	КонецЕсли;
	
	РасхожденияРезультат = ПолучитьИзВременногоХранилища(АдресХранилищаРасхождений);
	
	ТоварыИзДокумента            = Неопределено;
	ШтрихкодыУпаковокИзДокумента = Неопределено;
	ИнтеграцияСМаркетплейсамиСервер.ПолучитьТабличныеЧастиИзДокумента(ИсправленныйДокумент, 
		ТоварыИзДокумента, ШтрихкодыУпаковокИзДокумента);
	
	Расхождения = ИнтеграцияСМаркетплейсамиСервер.АнализРасхожденийДокументаИТорговойПлощадки(
		РасхожденияРезультат.ТоварыИзФайла, 
		РасхожденияРезультат.ШтрихкодыУпаковокИзФайла, 
		ТоварыИзДокумента,
		ШтрихкодыУпаковокИзДокумента);
	ИнтеграцияСМаркетплейсамиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(ИсправленныйДокумент, 
		Расхождения.ТоварыРасхождения);
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("Расхождения", Расхождения.ТоварыРасхождения);
	
	СформироватьОтчетОРасхождениях(РасхожденияПослеТабличныйДокумент, 
		ВнешниеНаборыДанных, 
		Элементы.КнопкаТолькоРасхождения4.Пометка,
		ЕстьМаркировка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗагрузитьЭлектронныйДокумент()
	
	Если Не ПараметрыФайла.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.Прикладной") Тогда
		Элементы.ГруппаОшибка4.Видимость = Ложь;
		
		Если ЗаменитьЭлектронныйДокумент Тогда
			ОчиститьСообщения();
			Результат = СоздатьЭлектронныйДокументНаСервере();
			
			Если Результат.ЕстьОшибки Тогда
				ПараметрыОткрытия = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыПроблемПриОбработкеДокументов();
				ПараметрыОткрытия.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(
					Результат.РезультатДействийПоЭДО.ОшибкиФормирования);
				ПараметрыОткрытия.СписокДокументовКОтправке.Добавить(ПервичныйДокумент);
				
				ИнтерфейсДокументовЭДОКлиент.ПоказатьПроблемыПриОбработкеДокументов(Неопределено, ПараметрыОткрытия);
				
				Элементы.ГруппаОшибка3.Видимость = Истина;
				Возврат;
			КонецЕсли;
			
			Если Не ЗагрузитьЭлектронныйДокументИзФайла(Результат.ЭлектронныйДокумент) Тогда
				Возврат;
			КонецЕсли;
			
			ОбменСКонтрагентамиКлиент.ОткрытьАктуальныйЭлектронныйДокумент(ПервичныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
	ЗакрытьФорму = Истина;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция СоздатьЭлектронныйДокументНаСервере()
	
	Результат  = ИнтерфейсДокументовЭДО.НовыйРезультатПереформированияДокументов();
	ИмяСобытия = ИнтеграцияСМаркетплейсамиСервер.СобытиеЖурналаРегистрации(СпособОбработки);
	
	ЭлектронныйДокумент = ОбменСКонтрагентами.СтатусДокументооборота(ПервичныйДокумент).ЭлектронныйДокумент;
	
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Результат.СформированныеДокументы.Вставить(ЭлектронныйДокумент, Истина);
		
	Иначе
		НачатьТранзакцию();
		
		Попытка
			Результат.РезультатДействийПоЭДО  = ОбменСКонтрагентамиИнтеграция.НачатьЭДОПоОбъектамУчета(
				ОбщегоНазначенияКлиентСервер.МассивЗначений(ПервичныйДокумент)); 
			Результат.СформированныеДокументы = Результат.РезультатДействийПоЭДО.Итог.ОбработанныеДокументы;
			
			Если ЗначениеЗаполнено(Результат.РезультатДействийПоЭДО.ОшибкиФормирования) Тогда
				ОтменитьТранзакцию();
				Результат.ЕстьОшибки = Истина;
				
				Возврат Результат;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			Результат.ЕстьОшибки = Истина;
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При замене электронного документа возникли ошибки: %1. Подробнее см. в журнале регистрации.'"),
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			
			ЗаписьЖурналаРегистрации(ИмяСобытия, 
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			Возврат Результат;
		КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.СформированныеДокументы) Тогда
		Результат.ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru = 'При замене электронного документа возникли ошибки. Документ не сформирован.'");
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
	Иначе
		Для Каждого КлючИЗначение Из Результат.СформированныеДокументы Цикл
			Если КлючИЗначение.Значение = Истина Тогда
				Результат.Вставить("ЭлектронныйДокумент", КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьЭлектронныйДокументИзФайла(Знач ЭлектронныйДокумент)
	
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Имя",      ИмяФайла);
		ОписаниеФайла.Вставить("Хранение", АдресХранилищаФайла);
		
		Ошибки = Новый Соответствие;
		
		Если ЗагрузкаИзФайлаНаСервереУспешна(ЭлектронныйДокумент, ОписаниеФайла, Ошибки) Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Файл успешно загружен.'"));
			
		Иначе
			Если Ошибки.Количество() = 0 Тогда 
				ОчиститьСообщения();
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					ИнтерфейсДокументовЭДОКлиентСервер.ТекстСообщенияОбОтсутствииВозможностиЗагрузитьФайлXML());
				Возврат Ложь;
				
			ИначеЕсли Ошибки.Количество() = 1 Тогда
				Для Каждого Ошибка Из Ошибки Цикл
					Если Ошибка.Значение = Ложь Тогда
						ОчиститьСообщения();
						ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка.Ключ);
						Возврат Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ПараметрыОшибки", Ошибки);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
			ДополнительныеПараметры.Вставить("ОписаниеФайла", ОписаниеФайла);
			
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗагрузитьИзФайлаПринудительно", 
				ЭтотОбъект, ДополнительныеПараметры);
			
			ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.СравнениеФормализованныхФайлов", 
				ПараметрыОткрытия, 
				ЭтотОбъект,,,,
				ОповещениеОЗакрытии);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаИзФайлаНаСервереУспешна(ЭлектронныйДокумент, ОписаниеФайла, Ошибки, ЗагрузитьПринудительно = Ложь)
	
	ОсновнойФайл = ЭлектронныеДокументыЭДО.ОсновнойФайлИнформацииОтправителя(ЭлектронныйДокумент);
	ИмяФайлаБезРасширения = ОписаниеФайла.Имя;
	
	Ошибки = ФорматыЭДО.ЗагружаемыйФайлСоответсвуетЗагруженномуФайлу(Организация, 
		ОписаниеФайла, ОсновнойФайл, ИмяФайлаБезРасширения);
	
	Если Ошибки.Количество() = 0 Или ЗагрузитьПринудительно Тогда
		ОписаниеФайла = РаботаСФайламиБЭД.ОписаниеФайлаПоДаннымПомещенногоФайла(ОписаниеФайла);
		ЭлектронныеДокументыЭДО.ЗаменитьДанныеОсновногоФайлаДокумента(ЭлектронныйДокумент, ОписаниеФайла);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайлаПринудительно(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "Продолжить" Тогда
		ЗагрузкаИзФайлаНаСервереУспешна(ДополнительныеПараметры.ЭлектронныйДокумент, 
			ДополнительныеПараметры.ОписаниеФайла, Неопределено, Истина);
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Файл успешно загружен.'"));
		ОбменСКонтрагентамиКлиент.ОткрытьАктуальныйЭлектронныйДокумент(ПервичныйДокумент);
		
		ЗакрытьФорму = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
