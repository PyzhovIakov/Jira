
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	УстановитьУсловноеОформление();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	УтверждатьОтветСразу = Константы.CRM_УтверждатьОтветСразу.Получить();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.СтатусРешения = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.НаРассмотрении");
		Объект.Автор = ТекущийПользователь();
	КонецЕсли;
	
	Элементы.ПрисоединенныеФайлы.Заголовок = "Файлы (" + ПолучитьЧислоВложений() + ")";
	
	// Устанавливаем доступность решения.
	УстановитьДоступностьРешения();
	
	Элементы.ГруппаДополнительноеОтветы.Видимость = Ложь;
	Элементы.ГруппаДополнительноеВопросы.Видимость = Ложь;
	
	ОтключениеВариантовОтветов = Не Константы.CRM_ИспользоватьВариантыОтветов.Получить();
	
	Если Не ЗначениеЗаполнено(ТекстВопросаHTML) Тогда
		ТекстВопросаHTML = "<html><head></head><body></body></html>";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВариантОтветаHTML) Тогда
		ВариантОтветаHTML = "<html><head></head><body></body></html>";
	КонецЕсли;
	
	ТекущаяСтрокаОтветы = -1;
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И Не CRM_БазаЗнанийСервер.ЕстьПраваАдминистратора() 
		И Не ((Объект.СтатусРешения = Перечисления.CRM_СтатусыРешений.Личное)
		Или (Объект.СтатусРешения = Перечисления.CRM_СтатусыРешений.НаРассмотрении)) Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтветыНомерСтроки.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтветыВариантОтвета.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтветыСтатусОтвета.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтветыДатаНачалаРассмотрения.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтветыДатаОкончанияРассмотрения.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Ответы.СтатусОтвета");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.CRM_СтатусыРешений.Утверждено;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		Элемент.Использование = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьСвязанныеРешения();
	СформироватьПредставлениеСвязанныхРешений();
	
	ОтрисоватьКатегорииНаФорме();
	
	// Устанавливаем доступность ответов.
	УстановитьДоступностьОтветов();
	
	Если ОтключениеВариантовОтветов Тогда
		ИдентификаторПервойСтроки = ?(Объект.Ответы.Количество() > 0, Объект.Ответы[0].ПолучитьИдентификатор(), "");
		Элементы.Ответы.Видимость = Не ОтключениеВариантовОтветов;
		ОбработчикОтветыПриАктивизацииСтроки();
	КонецЕсли;
	
	УстановитьДоступностьСостояний();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаВыбора".
//
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_Решения") Тогда
		ДобавитьСвязанноеРешение(ВыбранноеЗначение);
		СформироватьПредставлениеСвязанныхРешений();
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.CRM_ФормированиеCсылкиНаОбъект") Тогда
		CRM_РаботаСHTMLКлиент.ВставитьСсылкуНаОбъект(ЭтотОбъект.ТекущийЭлемент, ВыбранноеЗначение.Ссылка,
			ВыбранноеЗначение.ПредставлениеСсылки);
	КонецЕсли;
КонецПроцедуры // ОбработкаВыбора()

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения".
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если (ИмяСобытия = "ПроверкаПравописания_ИзмененТекст") И (Источник = ЭтотОбъект) Тогда
		Если Параметр.ИмяРеквизита = "ТекстВопросаHTML" Тогда
			ОбновитьТекстВопросаHTML(Параметр.Текст, Параметр.Вложения);
		ИначеЕсли Параметр.ИмяРеквизита = "ВариантОтветаHTML" Тогда
			ОбновитьВариантОтветаHTML(Параметр.Текст, Параметр.Вложения);
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		Если ФормаОткрытаИзОтветов Тогда
			Если (ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_РешенияПрисоединенныеФайлы")
				Или ТипЗнч(Источник) = Тип("Массив") И Источник.Количество() > 0 И ТипЗнч(Источник[0]) = Тип("СправочникСсылка.CRM_РешенияПрисоединенныеФайлы")) Тогда
				ОбработатьЗаписьПрисоединенныхФайловОтвета(Источник);
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ВладелецФайла", Объект.Ссылка);
				ПараметрыФормы.Вставить("ТолькоПросмотр", Не ОтветДоступен);
				
				ФормаПрисоединенныхФайлов = ПолучитьФорму("Обработка.РаботаСФайлами.Форма.CRM_ПрисоединенныеФайлы",
					 ПараметрыФормы, ЭтотОбъект,
					 УникальныйИдентификатор);
				
				Если ФормаПрисоединенныхФайлов.Открыта() Тогда
					ФормаПрисоединенныхФайлов.Элементы.Список.Обновить();
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ФормаОткрытаИзОтветов Тогда
			УправлениеОтметкойНаличияФайловОтветы(ТекущийИДОтветаОтбор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ТД = Элементы.Ответы.ТекущиеДанные;
	
	Если ТД = Неопределено И Объект.Ответы.Количество() = 0 Тогда
		НовыйОтвет = Объект.Ответы.Добавить();
		НовыйОтвет.ИДСтроки = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_");
		Если НеИспользоватьСостояния Или УтверждатьОтветСразу Тогда
			НовыйОтвет.СтатусОтвета = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Утверждено");
			Объект.СтатусРешения = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Утверждено");
		Иначе
			НовыйОтвет.СтатусОтвета = Объект.СтатусРешения;
		КонецЕсли;
		
		ТекущийИДОтвета = НовыйОтвет.ИДСтроки;
	КонецЕсли;
	
	Если ОтключениеВариантовОтветов Или Объект.Ответы.Количество() = 1 Тогда
		ТекущийИДОтвета = Объект.Ответы[0].ИдСтроки;
		Объект.Ответы[0].СтатусОтвета = Объект.СтатусРешения;
	КонецЕсли;
	
	ТекущийСтатус = Объект.Ответы[0].СтатусОтвета;
	СтатусыОтличаются = Ложь;
	Для Каждого СтрокаОтвета Из Объект.Ответы Цикл
		Если СтрокаОтвета.СтатусОтвета = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Утверждено") Тогда
			Объект.СтатусРешения = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Утверждено");
			СтатусыОтличаются = Истина;
			Прервать;
		КонецЕсли;
		Если Не ТекущийСтатус = СтрокаОтвета.СтатусОтвета Тогда
			СтатусыОтличаются = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не СтатусыОтличаются Тогда
		Объект.СтатусРешения = Объект.Ответы[0].СтатусОтвета;
	КонецЕсли;
	
	МассивСтрок = ТаблицаСоответствийОтветов.НайтиСтроки(Новый Структура("ИДСтроки", ТекущийИДОтвета));
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаСоответствия = ТаблицаСоответствийОтветов.Добавить();
		СтрокаСоответствия.ИДСтроки = ТекущийИДОтвета;
	Иначе
		СтрокаСоответствия = МассивСтрок[0];
	КонецЕсли;
	
	HTMLДокумент = Элементы.ТекстВопросаHTML.Документ;
	Если Не HTMLДокумент = Неопределено Тогда
		
		ТекстВопросаПередЗакрытием = Элементы.ТекстВопросаHTML.Документ.body.innerHTML;
		CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстВопросаПередЗакрытием);
		ТекстВопросаПередЗакрытием = ОбработатьТекстHTML(
			Объект.Ссылка, Элементы.ТекстВопросаHTML.Документ.body.innerHTML, УникальныйИдентификатор);
		Если Не ТекстВопросаПриОткрытии = ТекстВопросаПередЗакрытием Тогда
			CRM_РаботаСHTMLКлиент.ЗаписатьHTML(Элементы.ТекстВопросаHTML, КартинкиДобавленныеВопрос, УникальныйИдентификатор);
			ТекстВопросаHTMLПриЗаписи = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ТекстВопросаHTML);
			ТекстПисьма = Элементы.ТекстВопросаHTML.Документ.body.innerHTML;
			CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьма);
		КонецЕсли;
		
		ТекстВопросаHTML = ТекстВопросаПередЗакрытием;
		
	КонецЕсли;
	
	HTMLДокумент = Элементы.ВариантОтветаHTML.Документ;
	Если Не HTMLДокумент = Неопределено Тогда
		ТекстОтветаПередЗакрытием = HTMLДокумент.body.innerHTML;
		CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстОтветаПередЗакрытием);
		
		ВариантОтветаHTML = ТекстОтветаПередЗакрытием;
		
		Если Не ТекстВариантаПриОткрытии = ТекстОтветаПередЗакрытием Тогда
			CRM_РаботаСHTMLКлиент.ЗаписатьHTML(Элементы.ВариантОтветаHTML, КартинкиДобавленные, УникальныйИдентификатор);
			ТекстПисьмаHTMLПриЗаписи = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ВариантОтветаHTML);
			ТекстПисьма = Элементы.ВариантОтветаHTML.Документ.body.innerHTML;
			CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьма);
			ИзменитьДанныеОтвета(ТекстПисьмаHTMLПриЗаписи, ТекущийИДОтвета);
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ПроверкаПравописанияВопросы.Пометка Тогда
		ТекстВопросаHTML = CRM_ПроверкаПравописанияКлиент.СкрытьОшибки(Элементы.ТекстВопросаHTML);
	КонецЕсли;
	Если Элементы.ПроверкаПравописанияОтвета.Пометка Тогда
		ВариантОтветаHTML = CRM_ПроверкаПравописанияКлиент.СкрытьОшибки(Элементы.ВариантОтветаHTML);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ДокументHTMLТекущегоПисьмаПодготовлен = Ложь;
	ТаблицаСоответствийИменВложенийИдентификаторам.Очистить();
	
	СтруктураВложений = Новый Структура;
	
	Счетчик = 0;
	Для Каждого Строка Из КартинкиДобавленныеВопрос Цикл
		
		ПараметрыВложения = Строка.Значение;
		СтруктураВложений.Вставить("Структура" + Счетчик, ПараметрыВложения);
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	КартинкиДобавленныеВопрос.Очистить();
	
	ДобавитьВТаблицуСоответствийИменВложенийИдентификаторамКартинкиИзИнтернета(ТекстВопросаHTMLПриЗаписи);
	
	Для каждого Вложение Из СтруктураВложений Цикл
		
		НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
		Если ТипЗнч(Вложение.Значение) = Тип("Структура") Тогда
			НоваяСтрока.ИмяФайла = Вложение.Значение.ИДФайлаЭлектронногоПисьма;
			НоваяСтрока.ИмяФайлаДляХранилища = Вложение.Значение.ИмяФайла;
			НоваяСтрока.ИдентификаторФайлаДляHTML = Вложение.Значение.ИДФайлаЭлектронногоПисьма;
			НоваяСтрока.Размер = Вложение.Значение.Размер;
			НоваяСтрока.АдресКартинкиВоВременномХранилище = Вложение.Значение.АдресВоВременномХранилище;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
		
		ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстВопросаHTMLПриЗаписи);
		Справочники.CRM_Решения.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложений(
		ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам.Выгрузить());
		ВариантДляЗаписи = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		ВариантДляЗаписи = СтрЗаменить(ВариантДляЗаписи,
			 "<!DOCTYPE html PUBLIC ""-//W3C//DTD HTML 4.0 Transitional//EN"">",
			 "");
		
		ТекущийОбъект.ТекстВопросаHTML = ВариантДляЗаписи;
		ТекущийОбъект.ТекстВопроса = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекущийОбъект.ТекстВопросаHTML);
		
	Иначе
		
		ТекущийОбъект.ТекстВопросаHTML = ТекстВопросаПередЗакрытием;
		ТекущийОбъект.ТекстВопроса = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекущийОбъект.ТекстВопросаHTML);
		
	КонецЕсли;
	
	Для Каждого СтрокаОтвета Из ТаблицаСоответствийОтветов Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаОтвета.ИДСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаСоответствийИменВложенийИдентификаторамОтветы.Очистить();
		
		ДобавитьВТаблицуСоответствийИменВложенийИдентификаторамКартинкиИзИнтернета(СтрокаОтвета.ВариантОтветаHTML);
		
		Если Не СтрокаОтвета.СтруктураВложений = Неопределено Тогда
			Для каждого Вложение Из СтрокаОтвета.СтруктураВложений Цикл
				
				НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторамОтветы.Добавить();
				Если ТипЗнч(Вложение.Значение) = Тип("Структура") Тогда
					НоваяСтрока.ИмяФайла = Вложение.Значение.ИДФайлаЭлектронногоПисьма;
					НоваяСтрока.ИмяФайлаДляХранилища = Вложение.Значение.ИмяФайла;
					НоваяСтрока.ИдентификаторФайлаДляHTML = "_" + Строка(Новый УникальныйИдентификатор) + "_" + СтрокаОтвета.ИДСтроки;
					НоваяСтрока.Размер = Вложение.Значение.Размер;
					НоваяСтрока.АдресКартинкиВоВременномХранилище = Вложение.Значение.АдресВоВременномХранилище;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(СтрокаОтвета.ВариантОтветаHTML);
		Справочники.CRM_Решения.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложений(
		ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторамОтветы.Выгрузить());
		ДокументHTMLТекущегоОтветаПодготовлен = Истина;
		
		МассивОтветов = ТекущийОбъект.Ответы.НайтиСтроки(Новый Структура("ИДСтроки", СтрокаОтвета.ИДСтроки));
		
		ВариантДляЗаписи = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		ВариантДляЗаписи = СтрЗаменить(ВариантДляЗаписи,
			 "<!DOCTYPE html PUBLIC ""-//W3C//DTD HTML 4.0 Transitional//EN"">",
			 "");
		
		СтрокаОтвета.ВариантОтветаHTML = ВариантДляЗаписи;
		Если Не СтрокаОтвета.СтруктураВложений = Неопределено Тогда
			СтрокаОтвета.СтруктураВложений.Очистить();
		КонецЕсли;
		
		МассивОтветов[0].ВариантОтветаHTML = ВариантДляЗаписи;
		МассивОтветов[0].ВариантОтвета     = Взаимодействия.ПолучитьОбычныйТекстИзHTML(МассивОтветов[0].ВариантОтветаHTML);
		
		Для Каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторамОтветы Цикл
			НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Вложение);
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаВложенийКартинокФорматированногоДокумента =
		Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(ТекущийОбъект.Ссылка);
	Для Каждого Вложение Из ТаблицаВложенийКартинокФорматированногоДокумента Цикл
		МассивОтветов = Объект.Ответы.НайтиСтроки(Новый Структура("ИДСтроки", Вложение.ИДФайлаЭлектронногоПисьма));
		Если МассивОтветов.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИДФайлаЭлектронногоПисьма = СтрЗаменить(Вложение.ИДФайлаЭлектронногоПисьма, "-", "_");
		Если НайтиКартинкуВДокументе(ТекущийОбъект.ТекстВопросаHTML, ИДФайлаЭлектронногоПисьма) Тогда
			Продолжить;
		КонецЕсли;
		
		КартинкаНайдена = Ложь;
		Для Каждого СтрокаОтвета Из ТаблицаСоответствийОтветов Цикл
			КартинкаНайдена = НайтиКартинкуВДокументе(СтрокаОтвета.ВариантОтветаHTML, Вложение.ИДФайлаЭлектронногоПисьма);
			Если КартинкаНайдена Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не КартинкаНайдена Тогда
			УдаленныеВложения.Добавить(Вложение.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Удалим удаленные вложения
	Для Каждого УдаленноеВложение Из УдаленныеВложения Цикл
		ОбъектВложение = УдаленноеВложение.Значение.ПолучитьОбъект();
		ОбъектВложение.Удалить();
	КонецЦикла;
	
	УдаленныеВложения.Очистить();
	
	Для каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
		
		Если ЗначениеЗаполнено(Вложение.АдресКартинкиВоВременномХранилище) Тогда
			ИмяФайлаВложения = СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_") + "." 
				+ ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(Вложение.ИмяФайлаДляХранилища);
			АдресКартинкиВоВременномХранилище = Вложение.АдресКартинкиВоВременномХранилище;
			Размер = Вложение.Размер;
		Иначе
			ИмяФайлаВложения = СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_") + "." 
				+ ?(Вложение.Картинка.Формат() = ФорматКартинки.НеизвестныйФормат, "PNG",
				 Вложение.Картинка.Формат());
			ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
			АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, УникальныйИдентификатор);
			Размер = ДвоичныеДанныеКартинки.Размер();
		КонецЕсли;
		
		ПараметрыВложения = Новый Структура;
		ПараметрыВложения.Вставить("ИмяФайла", ИмяФайлаВложения);
		ПараметрыВложения.Вставить("Размер", Размер);
		
		ПрисоединенныйФайл = CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
		ТекущийОбъект.Ссылка,
		АдресКартинкиВоВременномХранилище,
		ПараметрыВложения);
		
		Если ПрисоединенныйФайл <> Неопределено Тогда
			ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
			ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_");
			ПрисоединенныйФайлОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	ЗаписатьСвязанныеРешения();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПослеЗаписи".
//
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьДоступностьОтветов();
	Оповестить("CRM_РешенияОбновлениеСправочника", Объект.Ссылка);
	УжеЗаписан = Ложь;
	
	HTMLДокумент = Элементы.ТекстВопросаHTML.Документ;
	Если Не HTMLДокумент = Неопределено Тогда
		ТекстВопросаПередЗакрытием = Элементы.ТекстВопросаHTML.Документ.body.innerHTML;
		ТекстВопросаПриОткрытии = Элементы.ТекстВопросаHTML.Документ.body.innerHTML;
		CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстВопросаПриОткрытии);
	КонецЕсли;
	
	HTMLДокумент = Элементы.ВариантОтветаHTML.Документ;
	Если Не HTMLДокумент = Неопределено Тогда
		ТекстОтветаПередЗакрытием = HTMLДокумент.body.innerHTML;
		ТекстВариантаПриОткрытии = HTMLДокумент.body.innerHTML;
		CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстВариантаПриОткрытии);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработчикОтветыПриАктивизацииСтроки();
		УправлениеОтметкойНаличияФайловОтветы(ТекущийИДОтвета);
	КонецЕсли;
	
	Если ОтключениеВариантовОтветов Тогда
		HTMLДокумент.body.innerHTML = ТекстОтветаПередЗакрытием;
	КонецЕсли;
	
	Если Элементы.ПроверкаПравописанияВопросы.Пометка Тогда
		ПроверяемыйТекст = Элементы.ТекстВопросаHTML.Документ.documentElement.outerHTML;
		CRM_ПроверкаПравописанияКлиент.ПоказатьОшибки(ЭтотОбъект, Элементы.ТекстВопросаHTML,
			ТекстВопросаHTML, ПроверяемыйТекст);
	КонецЕсли;
	
	Если Элементы.ПроверкаПравописанияОтвета.Пометка Тогда
		ПроверяемыйТекст = Элементы.ВариантОтветаHTML.Документ.documentElement.outerHTML;
		CRM_ПроверкаПравописанияКлиент.ПоказатьОшибки(ЭтотОбъект, Элементы.ВариантОтветаHTML,
			ВариантОтветаHTML, ПроверяемыйТекст);
	КонецЕсли;
	
КонецПроцедуры // ПослеЗаписи()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы И Не УжеЗаписан Тогда
	
		HTMLДокумент = Элементы.ВариантОтветаHTML.Документ;
		HTMLДокументВопрос = Элементы.ТекстВопросаHTML.Документ;
		Если Не HTMLДокумент = Неопределено И Не HTMLДокументВопрос = Неопределено Тогда
			ТекстОтветаПередЗакрытием = HTMLДокумент.body.innerHTML;
			CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстОтветаПередЗакрытием);
			HTMLДокументВопрос = Элементы.ТекстВопросаHTML.Документ;
			ТекстВопросаПередЗакрытиемЗавершение = HTMLДокументВопрос.body.innerHTML;
			CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстВопросаПередЗакрытиемЗавершение);
			Если Не ТекстВопросаПриОткрытии = ТекстВопросаПередЗакрытиемЗавершение
				Или Не ТекстВариантаПриОткрытии = ТекстОтветаПередЗакрытием Тогда
				CRM_РаботаСHTMLКлиент.ЗаписатьHTML(Элементы.ВариантОтветаHTML, КартинкиДобавленные, УникальныйИдентификатор);
				ТекстПисьма = Элементы.ВариантОтветаHTML.Документ.body.innerHTML;
				CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьма);
				ИзменитьДанныеОтвета(ТекстПисьма, ТекущийИДОтвета);
				СтруктураПоляHTML = ОбработатьТекстHTML(Объект.Ссылка, ТекстОтветаПередЗакрытием, УникальныйИдентификатор);
				ВариантОтветаHTML = СтруктураПоляHTML;
				Объект.ТекстВопросаHTML = ТекстВопросаПередЗакрытиемЗавершение;
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Проект".
//
Процедура ПроектПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Проект) И Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение = ПолучитьЗначениеРеквизита(Объект.Проект, "CRM_Подразделение");
	КонецЕсли;	
КонецПроцедуры // ПроектПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "СтатусРешения".
//
Процедура СтатусРешенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	Если Объект.Автор = ТекущийПользователь() Тогда	
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Личное"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.НаРассмотрении"));
	КонецЕсли;	
	Если CRM_БазаЗнанийСервер.ЕстьПраваАдминистратора() Тогда
		Если СписокВыбора.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.НаРассмотрении")) = Неопределено Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.НаРассмотрении"));
		КонецЕсли;	
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Утверждено"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Устарело"));
	КонецЕсли;
	Если СписокВыбора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	НачальноеЗначение = СписокВыбора.НайтиПоЗначению(Объект.СтатусРешения);
	ОписаниеОповещения = Новый ОписаниеОповещения("СтатусРешенияНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбора, Элемент, НачальноеЗначение);
КонецПроцедуры // СтатусРешенияНачалоВыбора()

&НаКлиенте
Процедура СтатусРешенияНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если Не (ВыбранныйЭлемент = Неопределено) Тогда
		Объект.СтатусРешения = ВыбранныйЭлемент.Значение;
		Если Объект.Ответы.Количество() = 1 Тогда
			ТД = Элементы.Ответы.ТекущиеДанные;
			Если ТД <> Неопределено Тогда
				ТД.СтатусОтвета = Объект.СтатусРешения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // СтатусРешенияНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "Нажатия" элемента формы "ПредставлениеСвязанныхРешений".
//
Процедура ПредставлениеСвязанныхРешенийНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка				= Ложь;
	СформироватьПредставлениеСвязанныхРешений();
КонецПроцедуры // ПредставлениеСвязанныхРешенийНажатие()

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы формы "Ответы".
//
Процедура ОтветыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОтветыПриАктивизацииСтроки", 0.2, Истина);
	
КонецПроцедуры // ОтветыПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы формы "Ответы".
//
Процедура ОтветыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТД = Элемент.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТД.АвторИзменения = ТекущийПользователь();
		Если НеИспользоватьСостояния Или УтверждатьОтветСразу Или ОтключениеВариантовОтветов Тогда
			ТД.СтатусОтвета = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Утверждено");
		Иначе
			ТД.СтатусОтвета = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.НаРассмотрении");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТД.ДатаНачалаРассмотрения) Тогда
		Если ОбщегоНазначенияКлиент.ДатаСеанса() < ТД.ДатаНачалаРассмотрения Тогда
			ТД.СтатусОтвета = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.НаРассмотрении");
		ИначеЕсли ОбщегоНазначенияКлиент.ДатаСеанса() >= ТД.ДатаНачалаРассмотрения Тогда
			ТД.СтатусОтвета = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Утверждено");
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТД.ДатаОкончанияРассмотрения) Тогда
		Если ОбщегоНазначенияКлиент.ДатаСеанса() >= КонецДня(ТД.ДатаОкончанияРассмотрения) Тогда
			ТД.СтатусОтвета = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Устарело");
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьОтвета();
	
КонецПроцедуры // ОтветыПередОкончаниемРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы формы "Ответы".
//
Процедура ОтветыПередУдалением(Элемент, Отказ)
	
	ТД = Элементы.Ответы.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Отказ = Истина;
	ИначеЕсли Не CRM_БазаЗнанийСервер.ЕстьПраваАдминистратора() Тогда
		Если ЗначениеЗаполнено(ТД.АвторИзменения) И Не (ТД.АвторИзменения = ТекущийПользователь()) Тогда
			Отказ = Истина;
		КонецЕсли;	
	ИначеЕсли Объект.Ответы.Количество() = 1 Тогда
		ТекущийИДОтвета = "";
	КонецЕсли;
	
	Если Не Отказ Тогда
		МассивСтрок = ТаблицаСоответствийОтветов.НайтиСтроки(Новый Структура("ИДСтроки", ТД.ИДСтроки));
		Если МассивСтрок.Количество() <> 0 Тогда
			ТаблицаСоответствийОтветов.Удалить(ТаблицаСоответствийОтветов.Индекс(МассивСтрок[0]));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОтветыПередУдалением()

// Процедура - обработчик события "ПриНачалеРедактирования" таблицы формы "Ответы".
//
&НаКлиенте
Процедура ОтветыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ИДСтроки = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_");
		СтрокаСоответствия = ТаблицаСоответствийОтветов.Добавить();
		
		СтрокаСоответствия.ИДСтроки = Элемент.ТекущиеДанные.ИДСтроки;
		СтрокаСоответствия.ВариантОтветаHTML = "<html><head></head><body></body></html>";
		СтрокаСоответствия.СтруктураВложений = Новый Структура;
	КонецЕсли;
	
КонецПроцедуры  // ОтветыПриНачалеРедактирования()

// Процедура - обработчик события "ПослеУдаления" таблицы формы "Ответы".
//
&НаКлиенте
Процедура ОтветыПослеУдаления(Элемент)
	ТД = Элементы.Ответы.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		ВариантОтветаHTML = "";
		Возврат;
	КонецЕсли;
	
	ТекущийИДОтвета = ТД.ИДСтроки;
	// Устанавливаем доступность ответа.
	УстановитьДоступностьОтвета();
	
КонецПроцедуры  // ОтветыПослеУдаления()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "СтатусОтвета" таблицы формы "Ответы".
//
Процедура ОтветыСтатусОтветаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.Ответы.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если CRM_БазаЗнанийСервер.ЕстьПраваАдминистратора() Тогда
		СтандартнаяОбработка = Ложь;
		СписокВыбора = Новый СписокЗначений;
		Если УтверждатьОтветСразу Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Утверждено"));
		Иначе
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.НаРассмотрении"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Утверждено"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Устарело"));
		КонецЕсли;
		НачальноеЗначение = СписокВыбора.НайтиПоЗначению(ТД.СтатусОтвета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветыСтатусОтветаНачалоВыбораЗавершение", ЭтотОбъект, ТД);
		ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбора, Элемент, НачальноеЗначение);
	КонецЕсли;	
КонецПроцедуры // ОтветыСтатусОтветаНачалоВыбора()

&НаКлиенте
Процедура ОтветыСтатусОтветаНачалоВыбораЗавершение(ВыбранныйЭлемент, ТД) Экспорт
	Если Не (ВыбранныйЭлемент = Неопределено) Тогда
		ТД.СтатусОтвета = ВыбранныйЭлемент.Значение;
		Если Объект.Ответы.Количество() = 1 Тогда
			ИзменитьСтатусРешения(ТД.СтатусОтвета);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры // ОтветыСтатусОтветаНачалоВыбора()

&НаСервере
Процедура ИзменитьСтатусРешения(НовыйСтатус)
	Объект.СтатусРешения = НовыйСтатус;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" таблицы формы "СвязанныеРешения".
//
Процедура СвязанныеРешенияПриИзменении(Элемент)
	СформироватьПредставлениеСвязанныхРешений();
КонецПроцедуры // СвязанныеРешенияПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы формы "СвязанныеРешения".
//
Процедура СвязанныеРешенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ФормаВыбора = ПолучитьФорму("Справочник.CRM_Решения.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
	СписокРешений = ПолучитьСписокСвязаныхРешений();
	НовыйОтбор = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("Ссылка");
	НовыйОтбор.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеВСписке;
	НовыйОтбор.ПравоеЗначение	= СписокРешений;
	ФормаВыбора.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("СвязанныеРешенияПередНачаломДобавленияЗавершение",
		 ЭтотОбъект);
	ФормаВыбора.Открыть();
КонецПроцедуры // СвязанныеРешенияПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы формы "СвязанныеРешения".
//
Процедура СвязанныеРешенияПередНачаломДобавленияЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если Не (ВыбранныйЭлемент = Неопределено) Тогда
	КонецЕсли;
КонецПроцедуры // СвязанныеРешенияПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломИзменения" таблицы формы "СвязанныеРешения".
//
Процедура СвязанныеРешенияПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ТД = Элемент.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("Ключ", ТД.Решение);
	ФормаРешения = ПолучитьФорму("Справочник.CRM_Решения.ФормаОбъекта", ПараметрыФормы, Элемент);
	ФормаРешения.Открыть();	
КонецПроцедуры // СвязанныеРешенияПередНачаломИзменения()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ДекорацияВыбратьКатегории".
//
Процедура ДекорацияВыбратьКатегорииНажатие(Элемент)
	МассивКатегорий = Новый Массив();
	Для Каждого КатегорияСтрока Из Объект.Категории Цикл
		МассивКатегорий.Добавить(КатегорияСтрока.Категория);
	КонецЦикла;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивКатегорий",		МассивКатегорий);
	ПараметрыФормы.Вставить("ОсновнаяКатегория",	Объект.ОсновнаяКатегория);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияВыбратьКатегорииНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.CRM_Решения.Форма.ВыборКатегорий", ПараметрыФормы, ЭтотОбъект, , , ,
		 ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ДекорацияВыбратьКатегории".
//
Процедура ДекорацияВыбратьКатегорииНажатиеЗавершение(СписокВыбранныеКатегории, ДополнительныеПараметры) Экспорт
	Если СписокВыбранныеКатегории = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	Объект.Категории.Очистить();
	Объект.ОсновнаяКатегория = ПредопределенноеЗначение("Справочник.CRM_КатегорииРешений.ПустаяСсылка");
	Для Каждого СтрокаКатегория Из СписокВыбранныеКатегории Цикл
		НоваяСтрока				= Объект.Категории.Добавить();
		НоваяСтрока.Категория	= СтрокаКатегория.Значение;
		Если СтрокаКатегория.Пометка Тогда
			Объект.ОсновнаяКатегория = НоваяСтрока.Категория;
		КонецЕсли;
	КонецЦикла;
	ОтрисоватьКатегорииНаФорме();
КонецПроцедуры

&НаКлиенте
// Процедура - динамически подключаемыйт обработчик события "НачалоВыбора" элементов формы отображения категорий.
//
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры // Подключаемый_ПолеВводаИгнорироватьОбработчикНачалоВыбора()

&НаКлиенте
// Процедура - динамически подключаемыйт обработчик события "Очистка" элементов формы отображения категорий.
//
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры // Подключаемый_ПолеВводаИгнорироватьОбработчикОчистка()

&НаКлиенте
// Процедура - динамически подключаемыйт обработчик события "Открытие" элементов формы отображения категорий.
//
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры // Подключаемый_ПолеВводаИгнорироватьОбработчикОткрытие()

&НаКлиенте
Процедура ВариантОтветаHTMLДокументСформирован(Элемент)
	
	ТекстВариантаПриОткрытии = Элементы.ВариантОтветаHTML.Документ.body.innerHTML; 
	CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстВариантаПриОткрытии);
	
	ВключитьРедактирование = Истина;
	
	CRM_РаботаСHTMLКлиент.ПолеHTMLДокументСформирован(ЭтотОбъект, Элемент, ВключитьРедактирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросHTMLДокументСформирован(Элемент)
	
	ТекстВопросаПриОткрытии = Элементы.ТекстВопросаHTML.Документ.body.innerHTML; 
	CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстВопросаПриОткрытии);
	
	ВключитьРедактирование = Истина;
	
	CRM_РаботаСHTMLКлиент.ПолеHTMLДокументСформирован(ЭтотОбъект, Элемент, ВключитьРедактирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстВопросаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	CRM_РаботаСHTMLКлиент.ПолеHTMLПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
	Если Элементы.Найти("МенюГруппаВариантыЗамены") <> Неопределено 
		И ДанныеСобытия.Element.className = "mistake" Тогда
		НомерОшибки = Число(СтрЗаменить(ДанныеСобытия.Element.id, "mistake", ""));
		ТекстHTMLПриНажатииНаСервере(НомерОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтветаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	CRM_РаботаСHTMLКлиент.ПолеHTMLПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
	Если Элементы.Найти("МенюГруппаВариантыЗамены") <> Неопределено 
		И ДанныеСобытия.Element.className = "mistake" Тогда
		НомерОшибки = Число(СтрЗаменить(ДанныеСобытия.Element.id, "mistake", ""));
		ТекстHTMLПриНажатииНаСервере(НомерОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТекстHTMLПриНажатииНаСервере(НомерОшибки)
	CRM_ПроверкаПравописанияСервер.ДобавитьВариантыЗаменыВКонтекстноеМеню(ЭтотОбъект, НомерОшибки);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПроверкиПравописания(Команда)
	
	Если Элементы.ПроверкаПравописанияВопросы.Пометка Тогда
		ПолеДокументаHTML = Элементы.ТекстВопросаHTML;
	Иначе
		ПолеДокументаHTML = Элементы.ВариантОтветаHTML;
	КонецЕсли;
	
	CRM_ПроверкаПравописанияКлиент.ВыполнитьКомандуПроверкиПравописания(ЭтотОбъект, ПолеДокументаHTML, Команда.Имя);
	Если Элементы.CRM_ГруппаПроверкаПравописания.Видимость = Ложь Тогда
		Элементы.ПроверкаПравописанияВопросы.Пометка = Ложь;
		Элементы.ПроверкаПравописанияОтвета.Пометка = Ложь;
		CRM_ПроверкаПравописанияКлиент.СкрытьОшибки(Элементы.ТекстВопросаHTML);
		CRM_ПроверкаПравописанияКлиент.СкрытьОшибки(Элементы.ВариантОтветаHTML);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаменитьНаВариантНажатие(Команда)
	
	Если Элементы.ПроверкаПравописанияВопросы.Пометка Тогда
		ПолеДокументаHTML = Элементы.ТекстВопросаHTML;
	Иначе
		ПолеДокументаHTML = Элементы.ВариантОтветаHTML;
	КонецЕсли;
	CRM_ПроверкаПравописанияКлиент.ЗаменитьНаВариант(ЭтотОбъект, ПолеДокументаHTML, Команда.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ КОМАНД ФОРМЫ

&НаКлиентеНаСервереБезКонтекста
Функция НайтиПолеВОтборе(ЭлементыОтбора, Поле)
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НайденныйЭлемент = НайтиПолеВОтборе(ЭлементОтбора.Элементы, Поле);
			Если НайденныйЭлемент <> Неопределено Тогда
				Возврат НайденныйЭлемент;
			КонецЕсли;
		Иначе
			Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
				Возврат ЭлементОтбора;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ОтветыПрисоединенныеФайлы(Команда)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Текст = НСтр("ru='Данные еще не записаны."
		"Переход к ""Файлы ответа"" возможен только после записи данных."
		"Данные будут записаны.'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветыПрисоединенныеФайлыЗавершение", ЭтотОбъект, Ложь);
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОтветыПрисоединенныеФайлыЗавершение(Неопределено, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтветыПрисоединенныеФайлыЗавершение(Ответ, Записано) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записано = Записать();
	КонецЕсли;
	
	Если Записано = Истина Тогда
		Если ВариантОтветаИзменен Тогда
			Текст = НСтр("ru='Данные изменены."
			"Переход к ""Файлы ответа"" возможен только после записи данных."
			"Данные будут записаны.'");
			ОповещениеНовое = Новый ОписаниеОповещения("ПослеВопросаОСохраненииВариантаОтвета", ЭтотОбъект);
			ПоказатьВопрос(ОповещениеНовое, Текст, РежимДиалогаВопрос.ДаНет,,);
			Возврат;
		КонецЕсли;	
		
		ТД = Элементы.Ответы.ТекущиеДанные;
		Если ТД = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ФормаОткрытаИзОтветов = Истина;
		ТекущийИДОтветаОтбор = ТекущийИДОтвета;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВладелецФайла", Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоПросмотр", Не ОтветДоступен);
		
		ФормаПрисоединенныхФайлов = ПолучитьФорму("Обработка.РаботаСФайлами.Форма.CRM_ПрисоединенныеФайлы",
			 ПараметрыФормы, ЭтотОбъект,
			 УникальныйИдентификатор);
		
		Если ФормаПрисоединенныхФайлов.Открыта() Тогда
			ПолеОтбораЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка.ИДФайлаЭлектронногоПисьма");
			ЭлементОтбора = НайтиПолеВОтборе(ФормаПрисоединенныхФайлов.Список.Отбор.Элементы, ПолеОтбораЛевоеЗначение);
			Если ЭлементОтбора = Неопределено Тогда
				ЭлементОтбора = ФормаПрисоединенныхФайлов.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение	= ПолеОтбораЛевоеЗначение;
				ЭлементОтбора.ВидСравнения	= ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = ТекущийИДОтвета;
			Иначе
				ЭлементОтбора.ВидСравнения	= ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = ТекущийИДОтвета;
			КонецЕсли;
			
			ФормаПрисоединенныхФайлов.Активизировать();
		Иначе
			ФормаПрисоединенныхФайлов.ЗакрыватьПриЗакрытииВладельца = Истина;
			
			ЭлементОтбора = ФормаПрисоединенныхФайлов.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка.ИДФайлаЭлектронногоПисьма");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ТекущийИДОтвета;
			
			ФормаПрисоединенныхФайлов.Открыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОСохраненииВариантаОтвета(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
// Процедура - обработчик команды формы "ПроверкаПравописанияВопроса".
//
Процедура ПроверкаПравописанияВопроса(Команда = Неопределено)
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'проверку орфографии'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаПравописанияВопросаПродолжение", ЭтотОбъект);
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПравописанияВопросаПродолжение(Результат, ДопПараметр) Экспорт
	
	Элементы.ПроверкаПравописанияВопросы.Пометка = Не Элементы.ПроверкаПравописанияВопросы.Пометка;
	Элементы.ПроверкаПравописанияОтвета.Пометка = Ложь;
	Элементы.CRM_ГруппаПроверкаПравописания.Видимость = Элементы.ПроверкаПравописанияВопросы.Пометка;
	
	Если Элементы.ПроверкаПравописанияВопросы.Пометка Тогда
		CRM_ПроверкаПравописанияКлиент.СкрытьОшибки(Элементы.ТекстВопросаHTML);
		ПроверяемыйТекст = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ТекстВопросаHTML);
		ПроверкаПравописанияВопросаНаСервере(ПроверяемыйТекст);
		ТекстВопросаHTML = ПроверяемыйТекст;
		CRM_ПроверкаПравописанияКлиент.ПоказатьОшибки(ЭтотОбъект, Элементы.ТекстВопросаHTML,
			 ТекстВопросаHTML, ПроверяемыйТекст);
	
	Иначе
		ВыделенныйТекст = Элементы.ТекстВопросаHTML.Документ.getSelection();
		НомерТекущейОшибки = ЭтотОбъект["CRM_НомерТекущейОшибки"];
		Если ВыделенныйТекст.type <> "None" 
			И Не ЭтотОбъект["CRM_СписокОшибок"].Количество() = 0
			И ЭтотОбъект["CRM_СписокОшибок"].Получить(НомерТекущейОшибки).Значение.word
			= ВыделенныйТекст.anchorNode.textContent Тогда
			Элементы.ТекстВопросаHTML.Документ.getSelection().empty();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаПравописанияВопросаНаСервере(ПроверяемыйТекст)
	
	Элементы.Переместить(Элементы.CRM_ГруппаПроверкаПравописания, Элементы.ГруппаТекстВопроса);
	CRM_ПроверкаПравописанияСервер.ПроверитьПравописание(ЭтотОбъект, Элементы.ТекстВопросаHTML, 
		ПроверяемыйТекст, , 
		"ПроверкаПравописанияВопросы");
	Элементы.Переместить(Элементы.МенюГруппаВариантыЗамены, Элементы.ТекстВопросаHTML.КонтекстноеМеню,
			Элементы.ТекстВопросаHTML.КонтекстноеМеню.ПодчиненныеЭлементы[0]);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ПроверкаПравописанияОтвета".
//
Процедура ПроверкаПравописанияОтвета(Команда = Неопределено)
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'проверку орфографии'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаПравописанияОтветаПродолжение", ЭтотОбъект);
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПравописанияОтветаПродолжение(Результат, ДопПараметр) Экспорт
	
	Элементы.ПроверкаПравописанияОтвета.Пометка = Не Элементы.ПроверкаПравописанияОтвета.Пометка;
	Элементы.ПроверкаПравописанияВопросы.Пометка = Ложь;
	Элементы.CRM_ГруппаПроверкаПравописания.Видимость = Элементы.ПроверкаПравописанияОтвета.Пометка;
	
	Если Элементы.ПроверкаПравописанияОтвета.Пометка Тогда
		CRM_ПроверкаПравописанияКлиент.СкрытьОшибки(Элементы.ВариантОтветаHTML);
		ПроверяемыйТекст = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ВариантОтветаHTML);
		ПроверкаПравописанияОтветаНаСервере(ПроверяемыйТекст);
		ВариантОтветаHTML = ПроверяемыйТекст;
		CRM_ПроверкаПравописанияКлиент.ПоказатьОшибки(ЭтотОбъект, Элементы.ВариантОтветаHTML, 
			ВариантОтветаHTML, ПроверяемыйТекст);
	
	Иначе
		ВыделенныйТекст = Элементы.ВариантОтветаHTML.Документ.getSelection();
		НомерТекущейОшибки = ЭтотОбъект["CRM_НомерТекущейОшибки"];
		Если ВыделенныйТекст.type <> "None" 
			И ЭтотОбъект["CRM_СписокОшибок"].Количество() > НомерТекущейОшибки
			И ЭтотОбъект["CRM_СписокОшибок"].Получить(НомерТекущейОшибки).Значение.word
				= ВыделенныйТекст.anchorNode.textContent Тогда
				Элементы.ВариантОтветаHTML.Документ.getSelection().empty();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаПравописанияОтветаНаСервере(ПроверяемыйТекст)
	
	Элементы.Переместить(Элементы.CRM_ГруппаПроверкаПравописания, Элементы.ГруппаВариантОтвета);
	CRM_ПроверкаПравописанияСервер.ПроверитьПравописание(ЭтотОбъект, Элементы.ВариантОтветаHTML, 
		ПроверяемыйТекст, , 
		"ПроверкаПравописанияОтвета");
	Элементы.Переместить(Элементы.МенюГруппаВариантыЗамены, Элементы.ВариантОтветаHTML.КонтекстноеМеню,
			Элементы.ВариантОтветаHTML.КонтекстноеМеню.ПодчиненныеЭлементы[0]);
	
КонецПроцедуры

#Область РедакторHTML

&НаКлиенте
Процедура ВыполнитьКомандуВариантОтветаHTML(Команда)
	
	ИмяКоманды = Сред(Команда.Имя, 8);
	CRM_РаботаСHTMLКлиент.ВыполнитьHTMLКоманду(ЭтотОбъект, Элементы.ВариантОтветаHTML, ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИзображениеВариантОтветаHTML(Команда)
	
	CRM_РаботаСHTMLКлиент.ВставитьИзображение(ЭтотОбъект, Элементы.ВариантОтветаHTML, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераВариантОтветаHTML(Команда)
	
	CRM_РаботаСHTMLКлиент.ВставитьКартинкуИзБуфера(ЭтотОбъект, Элементы.ВариантОтветаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИзображениеВопросыHTML(Команда)
	
	CRM_РаботаСHTMLКлиент.ВставитьИзображение(ЭтотОбъект, Элементы.ТекстВопросаHTML, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераВопросыHTML(Команда)
	
	CRM_РаботаСHTMLКлиент.ВставитьКартинкуИзБуфера(ЭтотОбъект, Элементы.ТекстВопросаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьГиперссылкуВариантОтветаHTML(Команда)
	
	CRM_РаботаСHTMLКлиент.ВставитьГиперссылку(ЭтотОбъект, Элементы.ВариантОтветаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТаблицуВариантОтветаHTML(Команда)
	
	CRM_РаботаСHTMLКлиент.ВставитьТаблицу(ЭтотОбъект, Элементы.ВариантОтветаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьШрифтВариантОтветаHTML(Команда)
	
	CRM_РаботаСHTMLКлиент.УвеличитьШрифт(ЭтотОбъект, Элементы.ВариантОтветаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьШрифтВариантОтветаHTML(Команда)
	
	CRM_РаботаСHTMLКлиент.УменьшитьШрифт(ЭтотОбъект, Элементы.ВариантОтветаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьШрифтВариантОтветаHTML(Команда)
	
	CRM_РаботаСHTMLКлиент.ИзменитьШрифт(ЭтотОбъект, Элементы.ВариантОтветаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЦветаВариантОтветаHTML(Команда)
	
	ИмяКоманды = "ForeColor";
	CRM_РаботаСHTMLКлиент.ВыборЦвета(ЭтотОбъект, Элементы.ВариантОтветаHTML, ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЦветаЗаливкаОтветыHTML(Команда)
	
	ИмяКоманды = "BackColor";
	CRM_РаботаСHTMLКлиент.ВыборЦвета(ЭтотОбъект, Элементы.ВариантОтветаHTML, ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДопФорматированиеВариантОтветаHTML(Команда)
	Элементы.ПоказатьДопФорматированиеОтветы.Пометка = НЕ Элементы.ПоказатьДопФорматированиеОтветы.Пометка;
	Элементы.ГруппаДополнительноеОтветы.Видимость = Элементы.ПоказатьДопФорматированиеОтветы.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСсылкуНаОбъектИнформационнойБазы(Команда)
	
	ОткрытьФорму("ОбщаяФорма.CRM_ФормированиеCсылкиНаОбъект", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуВопросыHTML(Команда)
	
	ИмяКоманды = Сред(Команда.Имя, 8);
	ИмяКоманды = СтрЗаменить(ИмяКоманды, "1", "");
	CRM_РаботаСHTMLКлиент.ВыполнитьHTMLКоманду(ЭтотОбъект, Элементы.ТекстВопросаHTML, ИмяКоманды, , Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьГиперссылкуВопросыHTML(Команда)
	
	CRM_РаботаСHTMLКлиент.ВставитьГиперссылку(ЭтотОбъект, Элементы.ТекстВопросаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТаблицуВопросыHTML(Команда)
	
	CRM_РаботаСHTMLКлиент.ВставитьТаблицу(ЭтотОбъект, Элементы.ТекстВопросаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьШрифтВопросыHTML(Команда)
	
	CRM_РаботаСHTMLКлиент.УвеличитьШрифт(ЭтотОбъект, Элементы.ТекстВопросаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьШрифтВопросыHTML(Команда)
	
	CRM_РаботаСHTMLКлиент.УменьшитьШрифт(ЭтотОбъект, Элементы.ТекстВопросаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьШрифтВопросыHTML(Команда)
	
	CRM_РаботаСHTMLКлиент.ИзменитьШрифт(ЭтотОбъект, Элементы.ТекстВопросаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЦветаВопросыHTML(Команда)
	
	ИмяКоманды = "ForeColor";
	CRM_РаботаСHTMLКлиент.ВыборЦвета(ЭтотОбъект, Элементы.ТекстВопросаHTML, ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЦветаЗаливкаВопросыHTML(Команда)
	
	ИмяКоманды = "BackColor";
	CRM_РаботаСHTMLКлиент.ВыборЦвета(ЭтотОбъект, Элементы.ТекстВопросаHTML, ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДопФорматированиеВопросыHTML(Команда)
	Элементы.ПоказатьДопФорматированиеВопросы.Пометка = НЕ Элементы.ПоказатьДопФорматированиеВопросы.Пометка;
	Элементы.ГруппаДополнительноеВопросы.Видимость = Элементы.ПоказатьДопФорматированиеВопросы.Пометка;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбработатьЗаписьПрисоединенныхФайловОтвета(МассивФайлов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ПрисоединенныйФайл Из МассивФайлов Цикл
		Если ПрисоединенныйФайл.ВладелецФайла = Объект.Ссылка Тогда
			ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
			ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = ТекущийИДОтветаОтбор;
			ПрисоединенныйФайлОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура обновляет значение поля "ТекстВопросаHTML".
//
Процедура ОбновитьТекстВопросаHTML(Текст, Вложения)
	
	ТекстВопросаHTML = ОбработатьТекстHTML(Объект.Ссылка, Текст, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
// Процедура обновляет значение поля "ВариантОтветаHTML".
//
Процедура ОбновитьВариантОтветаHTML(Текст, Вложения)
	
	ВариантОтветаHTML = ОбработатьТекстHTML(Объект.Ссылка, Текст, УникальныйИдентификатор);
	
КонецПроцедуры // ОбновитьВариантОтветаHTML()

&НаСервереБезКонтекста
// Функция возвращает текущего пользователя.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СправочникСсылка	- Текущий пользователь.
//
Функция ТекущийПользователь()
	Возврат Пользователи.ТекущийПользователь();
КонецФункции // ТекущийПользователь()

&НаСервереБезКонтекста
// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  СсылкаНаОбъект	- Ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита	- Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
КонецФункции // ПолучитьЗначениеРеквизита()

&НаСервере
// Процедура заполняет заголовок кнопки "Присоединенные файлы у ТЧ Ответы".
//
// Параметры:
//	Нет.
//
Процедура УправлениеОтметкойНаличияФайловОтветы(ПереданныйИДОтветаОтбор)
	НаличиеФайлов = 0;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		табВложения = ПолучитьВложения(Объект.Ссылка, ПереданныйИДОтветаОтбор);
		НаличиеФайлов = табВложения.Количество();
	КонецЕсли;
	Если НаличиеФайлов = 0 Тогда
		Элементы.ОтветыПрисоединенныеФайлы.Отображение = ОтображениеКнопки.Картинка;
	Иначе
		Элементы.ОтветыПрисоединенныеФайлы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Текст = Формат(НаличиеФайлов, "ЧГ=");
		Если НаличиеФайлов <= 1 Тогда
			Текст = Текст + " файл";
		ИначеЕсли НаличиеФайлов <= 4 Тогда
			Текст = Текст + " файла";
		Иначе
			Текст = Текст + " файлов";
		КонецЕсли;
		Элементы.ОтветыПрисоединенныеФайлы.Заголовок = Текст;
	КонецЕсли;
	Если ОтключениеВариантовОтветов Тогда
		Элементы.ПрисоединенныеФайлы.Заголовок = "Файлы (" 
			+ ПолучитьЧислоВложенийПриОтключенныхВариантах(ПереданныйИДОтветаОтбор) 
			+ ")";
	Иначе
		ОбновлениеКоличестваПрисоединенныхФайлов();
	КонецЕсли;
КонецПроцедуры // УправлениеОтметкойНаличияФайловОтветы()

&НаСервере
// Процедура заполняет заголовок кнопки "Файлы".
//
// Параметры:
//	Нет.
//
Процедура ОбновлениеКоличестваПрисоединенныхФайлов()
	Элементы.ПрисоединенныеФайлы.Заголовок = "Файлы (" + ПолучитьЧислоВложений() + ")";
КонецПроцедуры // ОбновлениеКоличестваПрисоединенныхФайлов()

&НаСервере
// Процедура заполняет таблицу связанных решений.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьСвязанныеРешения()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Решение", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_СвязанныеРешения.СвязанноеРешение КАК Решение,
	|	CRM_СвязанныеРешения.СвязанноеРешение.СтатусРешения КАК Состояние,
	|	CRM_СвязанныеРешения.СвязанноеРешение.ПредставлениеНаименованияРешения КАК Наименование
	|ИЗ
	|	РегистрСведений.CRM_СвязанныеРешения КАК CRM_СвязанныеРешения
	|ГДЕ
	|	CRM_СвязанныеРешения.Решение = &Решение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Решение";
	СвязанныеРешения.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры // ЗаполнитьСвязанныеРешения()	

&НаСервере
// Процедура записывает в регистр таблицу связанных решений.
//
// Параметры:
//	Нет.
//
Процедура ЗаписатьСвязанныеРешения()
	НаборЗаписей = РегистрыСведений.CRM_СвязанныеРешения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Решение.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	Для Каждого СвязанноеРешение Из СвязанныеРешения Цикл
		НоваяЗапись						= НаборЗаписей.Добавить();
		НоваяЗапись.Решение				= Объект.Ссылка;
		НоваяЗапись.СвязанноеРешение	= СвязанноеРешение.Решение;
	КонецЦикла;
	НаборЗаписей.Записать();
КонецПроцедуры // ЗаписатьСвязанныеРешения()

&НаСервере
// Функция возвращает список решений, которые не должны отображаться в форме выбора решений.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СписокЗначений	- Список решений.
//
Функция ПолучитьСписокСвязаныхРешений()
	СписокРешений = Новый СписокЗначений;
	СписокРешений.ЗагрузитьЗначения(СвязанныеРешения.Выгрузить(, "Решение").ВыгрузитьКолонку("Решение"));
	СписокРешений.Добавить(Объект.Ссылка);
	Возврат СписокРешений;
КонецФункции // ПолучитьСписокСвязанныхРешений()	

&НаСервере
// Процедура добавляет новое решение в таблицу связанных решений.
//
// Параметры:
//	Решение	- СправочникСсылка	- Добавляемое решение.
//
Процедура ДобавитьСвязанноеРешение(Решение)
	НоваяСтрока = СвязанныеРешения.Добавить();
	НоваяСтрока.Решение			= Решение;
	НоваяСтрока.Наименование	= Решение.Наименование;
	НоваяСтрока.Состояние		= Решение.СтатусРешения;
КонецПроцедуры // ДобавитьСвязанноеРешение()

&НаСервере
// Процедура отображает категории решения на форме.
//
// Параметры:
//	Нет.
//
Процедура ОтрисоватьКатегорииНаФорме()
	ПрефиксРеквизита = "ПолеВводаКатегория";
	МассивУдаляемыхРеквизитов = Новый Массив();
	нИндекс = 1;
	Пока ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект,
		ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=")) Цикл
		МассивУдаляемыхРеквизитов.Добавить(ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ="));
		нИндекс = нИндекс + 1;
	КонецЦикла;
	МассивКатегорий = Новый Массив();
	Если ЗначениеЗаполнено(Объект.ОсновнаяКатегория) Тогда
		МассивКатегорий.Добавить(Объект.ОсновнаяКатегория);
	КонецЕсли;
	Для Каждого СтрокаКатегория Из Объект.Категории Цикл
		Если ЗначениеЗаполнено(СтрокаКатегория.Категория)
			 И МассивКатегорий.Найти(СтрокаКатегория.Категория) = Неопределено Тогда
			МассивКатегорий.Добавить(СтрокаКатегория.Категория);
		КонецЕсли;
	КонецЦикла;
	МассивДобавляемыхРеквизитов = Новый Массив();
	ОписаниеТиповКатегория = Новый ОписаниеТипов("СправочникСсылка.CRM_КатегорииРешений");
	Если МассивКатегорий.Количество() > 0 Тогда
		Для нИндекс = 1 По МассивКатегорий.Количество() Цикл
			ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
			РеквизитКатегория = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТиповКатегория);
			МассивДобавляемыхРеквизитов.Добавить(РеквизитКатегория);
		КонецЦикла;
	КонецЕсли;
	Для Каждого УдаляемыйЭлемент Из МассивУдаляемыхРеквизитов Цикл
		Элемент = Элементы.Найти(УдаляемыйЭлемент);
		Если Элемент <> Неопределено Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	нИндекс = 1;
	Для Каждого ДобавляемаяКатегория Из МассивКатегорий Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		ЭтотОбъект[ИмяРеквизита] = ДобавляемаяКатегория;
		
		ЦветФона = Новый Цвет(ДобавляемаяКатегория.ЦветКрасный, ДобавляемаяКатегория.ЦветЗеленый,
			 ДобавляемаяКатегория.ЦветСиний);
		ЭлементыЗаголовка = Новый Массив;
		Если нИндекс = 1 Тогда
			ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(" " 
				+ ДобавляемаяКатегория.ПредставлениеНаименования + " ", Новый Шрифт(, , Истина),
				 CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(ЦветФона), ЦветФона));
		Иначе	
			ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(" " 
				+ ДобавляемаяКатегория.ПредставлениеНаименования + " ", ,
				 CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(ЦветФона), ЦветФона));
		КонецЕсли;
		ЭлементКатегория = Элементы.Добавить(ИмяРеквизита, Тип("ДекорацияФормы"), Элементы.ГруппаКатегории);
		ЭлементКатегория.Вид = ВидДекорацииФормы.Надпись;
		ЭлементКатегория.Заголовок = Новый ФорматированнаяСтрока(ЭлементыЗаголовка);
		ЭлементКатегория.Подсказка = ДобавляемаяКатегория.ПредставлениеНаименования;
		ЭлементКатегория.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		ЭлементКатегория.АвтоМаксимальнаяШирина = Ложь;
		ЭлементКатегория.РастягиватьПоГоризонтали = Ложь;
		
		нИндекс = нИндекс + 1;
	КонецЦикла;
КонецПроцедуры // ОтрисоватьКатегорииНаФорме()

&НаСервереБезКонтекста
// Функция получает все вложения решения.
//
// Параметры:
//	Ссылка		- СправочникСсылка	- Владелец вложений.
//	НомерСтроки	- Число				- НомерСтроки
//  КлючСтроки  - Строка (по умолчанию нет)	- Ключ строки, для которой нужно получить вложения.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица вложений.
//
Функция ПолучитьВложения(Ссылка, ИДФайлаЭлектронногоПисьма = "")
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",			Ссылка);
	Запрос.УстановитьПараметр("ИДФайлаЭлектронногоПисьма",	ИДФайлаЭлектронногоПисьма);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ИндексКартинки КАК ИндексКартинки,
	|	Файлы.Размер КАК Размер,
	|	Файлы.ИДФайлаЭлектронногоПисьма КАК ИДФайлаЭлектронногоПисьма,
	|	ВЫБОР
	|		КОГДА Файлы.Расширение = """"
	|			ТОГДА Файлы.Наименование
	|		ИНАЧЕ Файлы.Наименование + ""."" + Файлы.Расширение
	|	КОНЕЦ КАК ИмяФайла
	|ИЗ
	|	Справочник.CRM_РешенияПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Ссылка
	|	И НЕ Файлы.ПометкаУдаления
	|	И Файлы.ИДФайлаЭлектронногоПисьма = &ИДФайлаЭлектронногоПисьма";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьВложения()

&НаКлиенте
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеСвязанныхРешений()
	
	Если СвязанныеРешения.Количество() = 0 Тогда
		ПредставлениеСвязанныхРешений = НСтр("ru='Связанные решения'");
	Иначе
		ПредставлениеСвязанныхРешений = НСтр("ru='Связанные решения'") + 
		" (" + Строка(СвязанныеРешения.Количество()) + ")";
	КонецЕсли;
	
	Элементы.ГруппаСвязанныеРешенияСворачиваемая.Заголовок = ПредставлениеСвязанныхРешений;
	
КонецПроцедуры // СформироватьПредставлениеВложений()	

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" табличной части "Ответы".
//
// Параметры:
//	Нет.
//
Процедура ОбработчикОтветыПриАктивизацииСтроки()
	
	Если Элементы.Ответы.ТекущаяСтрока = ТекущаяСтрокаОтветы Тогда
		Возврат;
	Иначе
		ТекущаяСтрокаОтветы = Элементы.Ответы.ТекущаяСтрока;
	КонецЕсли;
	
	HTMLДокумент = Элементы.ВариантОтветаHTML.Документ;
	Если Не HTMLДокумент = Неопределено Тогда
		ТекстПисьмаПередЗакрытием = HTMLДокумент.body.innerHTML;
		CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьмаПередЗакрытием);
		
		Если Не ПустаяСтрока(ТекущийИДОтвета) И Не ТекстВариантаПриОткрытии = ТекстПисьмаПередЗакрытием Тогда
			CRM_РаботаСHTMLКлиент.ЗаписатьHTML(Элементы.ВариантОтветаHTML, КартинкиДобавленные, УникальныйИдентификатор);
			ТекстПисьмаHTMLПриЗаписи = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ВариантОтветаHTML);
			ИзменитьДанныеОтвета(ТекстПисьмаHTMLПриЗаписи, ТекущийИДОтвета, ТекстПисьмаПередЗакрытием);
			Модифицированность = Истина;
		КонецЕсли;
		HTMLДокумент.body.innerHTML = "";
		ТекущийИДОтвета = "";
	КонецЕсли;
	
	ТД = Элементы.Ответы.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Если Не ОтключениеВариантовОтветов Тогда
			Возврат;
		Иначе
			ТекущийИДОтвета = ?(ПустаяСтрока(ИДПервойСтроки), ?(Объект.Ответы.Количество() > 0,
				 Объект.Ответы[0].ИДСтроки, ""),
				 ИДПервойСтроки);
		КонецЕсли;
	ИначеЕсли ПустаяСтрока(ТД.ИДСтроки) Тогда
		ТД.ИДСтроки = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_");
	Иначе
		ТекущийИДОтвета = ТД.ИДСтроки;
	КонецЕсли;
	
	ВариантОтветаHTML = "<html><head></head><body></body></html>";
	
	// Заполняем текущий ответ
	МассивСтрок = ТаблицаСоответствийОтветов.НайтиСтроки(Новый Структура("ИДСтроки", ТекущийИДОтвета));
	Если МассивСтрок.Количество() = 0 Тогда
		ВариантОтветаHTML = "<html><head></head><body></body></html>";
	Иначе
		Если Модифицированность И ЗначениеЗаполнено(МассивСтрок[0].ВариантОтветаHTMLПередЗакрытием) Тогда
			СтруктураПоляHTML = ОбработатьТекстHTML(Объект.Ссылка,
				 МассивСтрок[0].ВариантОтветаHTMLПередЗакрытием,
				 УникальныйИдентификатор);
		Иначе
			СтруктураПоляHTML = ОбработатьТекстHTML(Объект.Ссылка, МассивСтрок[0].ВариантОтветаHTML, УникальныйИдентификатор);
		КонецЕсли;
		ВариантОтветаHTML = СтруктураПоляHTML;
	КонецЕсли;
	// Устанавливаем доступность ответа.
	УстановитьДоступностьОтвета();
	
	УправлениеОтметкойНаличияФайловОтветы(ТекущийИДОтвета);
	
	Если Элементы.Ответы.ТекущаяСтрока = ИдентификаторПервойСтроки Тогда
		ИДПервойСтроки = ТекущийИДОтвета;
	КонецЕсли;
	
КонецПроцедуры // ОбработчикОтветыПриАктивизацииСтроки()

&НаСервере
Процедура ИзменитьДанныеОтвета(ТекстПисьма, ТекущийИДОтвета, ТекстПисьмаПередЗакрытием = "")
	
	НайденныеСтроки = ТаблицаСоответствийОтветов.НайтиСтроки(Новый Структура("ИДСтроки", ТекущийИДОтвета));
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаСоответствия = ТаблицаСоответствийОтветов.Добавить();
		СтрокаСоответствия.ИДСтроки = ТекущийИДОтвета;
	Иначе
		СтрокаСоответствия = НайденныеСтроки[0];
	КонецЕсли;
	
	СтрокаСоответствия.Изменен = Истина;
	
	СтрокаСоответствия.ВариантОтветаHTML = ТекстПисьма;
	СтрокаСоответствия.ВариантОтветаHTMLПередЗакрытием = ТекстПисьмаПередЗакрытием;
	
	СтруктураВложений = Новый Структура;
	
	Счетчик = 0;
	Для Каждого Строка Из КартинкиДобавленные Цикл
		
		ПараметрыВложения = Строка.Значение;
		
		СтруктураВложений.Вставить("Структура" + Счетчик, ПараметрыВложения);
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	СтрокаСоответствия.СтруктураВложений = СтруктураВложений;
	
	КартинкиДобавленные.Очистить();
	
КонецПроцедуры

&НаСервере
// Процедура управляет доступностью решения.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьРешения()
	
	РешениеДоступно = Истина;
	
	Если Не CRM_БазаЗнанийСервер.ЕстьПраваАдминистратора()
		 И Не ((Объект.СтатусРешения = Перечисления.CRM_СтатусыРешений.Личное)
		Или (Объект.СтатусРешения = Перечисления.CRM_СтатусыРешений.НаРассмотрении)) Тогда
		Если Объект.СтатусРешения = Перечисления.CRM_СтатусыРешений.Утверждено Тогда
			РешениеДоступно = Ложь;
		ИначеЕсли Объект.СтатусРешения = Перечисления.CRM_СтатусыРешений.Устарело Тогда
			РешениеДоступно = Ложь;
		ИначеЕсли Не (Объект.Автор = ТекущийПользователь()) Тогда
			РешениеДоступно = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Наименование.ТолькоПросмотр		   = Не РешениеДоступно;
	Элементы.Подразделение.ТолькоПросмотр		   = Не РешениеДоступно;
	Элементы.Проект.ТолькоПросмотр				   = Не РешениеДоступно;
	Элементы.Родитель.ТолькоПросмотр			   = Не РешениеДоступно;
	Элементы.СтатусРешения.ТолькоПросмотр		   = Не РешениеДоступно;
	Элементы.ДекорацияВыбратьКатегории.Доступность = РешениеДоступно;
	
	Элементы.ГруппаРедактированиеВопроса.Видимость = РешениеДоступно;
	Элементы.ПолеПросмотраВопросаHTML.Видимость = Не РешениеДоступно;
	Если Не РешениеДоступно Тогда
		ТекстВопроса = Объект.Ссылка.ТекстВопросаHTML;
		ТекстВопроса = ОбработатьТекстHTML(Объект.Ссылка, ТекстВопроса, УникальныйИдентификатор);
		Элементы.СвязанныеРешения.ИзменятьСоставСтрок = Ложь;
		Элементы.СвязанныеРешения.ИзменятьПорядокСтрок = Ложь;
		Элементы.СвязанныеРешения.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	КонецЕсли;
	
	Если Объект.СтатусРешения = Перечисления.CRM_СтатусыРешений.Личное И Не (Объект.Автор = ТекущийПользователь()) Тогда
		Элементы.Ответы.ИзменятьСоставСтрок  = Ложь;
		Элементы.Ответы.ИзменятьПорядокСтрок = Ложь;
		Элементы.Ответы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	КонецЕсли;
	
	Если Не CRM_БазаЗнанийСервер.ЕстьПраваАдминистратора()
		 И Не ((Объект.СтатусРешения = Перечисления.CRM_СтатусыРешений.Личное)
		Или (Объект.СтатусРешения = Перечисления.CRM_СтатусыРешений.НаРассмотрении)) Тогда
		Элементы.Ответы.ИзменятьСоставСтрок  = Ложь;
		Элементы.Ответы.ИзменятьПорядокСтрок = Ложь;
		Элементы.Ответы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьРешения()

&НаСервере
Процедура УстановитьДоступностьСостояний()
	
	СостояниеДоступно = Не Константы.CRM_ИспользоватьСтатусыОтветовБазыЗнаний.Получить();
	
	Элементы.ОтветыСтатусОтвета.Видимость = Не СостояниеДоступно;
	Элементы.ОтветыДатаНачалаРассмотрения.Видимость = Не СостояниеДоступно;
	Элементы.ОтветыДатаОкончанияРассмотрения.Видимость = Не СостояниеДоступно;
	
	НеИспользоватьСостояния = СостояниеДоступно;
	Элементы.СтатусРешения.Видимость = Не СостояниеДоступно;
	
КонецПроцедуры

&НаКлиенте
// Процедура управляет доступностью ответа.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьОтвета()
	
	ОтветДоступен = Истина;
	
	ТД = Элементы.Ответы.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не CRM_БазаЗнанийСервер.ЕстьПраваАдминистратора()
		 И Не ((Объект.СтатусРешения = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Личное"))
		Или (Объект.СтатусРешения = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.НаРассмотрении"))) Тогда
		
		Если ТД.СтатусОтвета = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Утверждено") Тогда
			ОтветДоступен = Ложь;
			
		ИначеЕсли ТД.СтатусОтвета = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Устарело") Тогда
			ОтветДоступен = Ложь;
			
		ИначеЕсли ТД.СтатусОтвета = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.НаРассмотрении") Тогда
			ОтветДоступен = Ложь;
		
		ИначеЕсли Объект.СтатусРешения = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Личное")
			 И Не (Объект.Автор = ТекущийПользователь()) Тогда
			ОтветДоступен = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СостояниеДоступно Тогда
		ОтветДоступен = Истина;
	КонецЕсли;
	
	Элементы.ОтветыВариантОтвета.ТолькоПросмотр = Не ОтветДоступен;
	Элементы.ОтветыСтатусОтвета.ТолькоПросмотр  = Не ОтветДоступен;
	
	Элементы.ГруппаВариантОтветаHTML.Видимость = ОтветДоступен;
	//Элементы.ГруппаОтвет.Видимость = ОтветДоступен;
	Элементы.ПолеПросмотраОтветаHTML.Видимость = Не ОтветДоступен;
	
	Если Не ОтветДоступен Тогда
		ТекстОтвета = ОбработатьТекстHTML(Объект.Ссылка, ТД.ВариантОтветаHTML, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьОтвета()

&НаКлиенте
// Процедура управляет доступностью таблицы ответов и связанных решений.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьОтветов()
	
	РешениеЗаписано = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.ДекорацияОтветыНедоступны.Видимость	= Не РешениеЗаписано;
	Элементы.Ответы.ТолькоПросмотр					= Не РешениеЗаписано;
	Элементы.ВариантОтветаHTML.ТолькоПросмотр		= Не РешениеЗаписано;
	Элементы.СвязанныеРешения.ТолькоПросмотр		= Не РешениеЗаписано;
	Элементы.ПроверкаПравописанияОтвета.Доступность = РешениеЗаписано;
	
КонецПроцедуры // УстановитьДоступностьОтветов()

&НаСервере
Процедура ОбработатьТекстВопроса()
	
	Объект.ТекстВопросаHTML = ОбработатьТекстHTML(Объект.Ссылка, Объект.ТекстВопросаHTML, УникальныйИдентификатор);
	ТекстВопросаHTML = Объект.ТекстВопросаHTML;
	
КонецПроцедуры 

&НаСервере
Процедура ОбработатьТекстыОтветов()
	
	СтатусОтветаИзменен = Ложь;
	
	Для Каждого СтрокаОтвета Из Объект.Ответы Цикл
		
		СтрокаСоответствия = ТаблицаСоответствийОтветов.Добавить();
		СтрокаСоответствия.ИДСтроки = СтрокаОтвета.ИДСтроки;
		
		СтрокаСоответствия.СтруктураВложений = Новый Структура;
		СтрокаСоответствия.ВариантОтветаHTML = СтрокаОтвета.ВариантОтветаHTML;
		
		ТекущийСтатус = СтрокаОтвета.СтатусОтвета;
		
		Если ЗначениеЗаполнено(СтрокаОтвета.ДатаНачалаРассмотрения) Тогда
			Если ТекущаяДатаСеанса() < СтрокаОтвета.ДатаНачалаРассмотрения Тогда
				СтрокаОтвета.СтатусОтвета = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.НаРассмотрении");
			ИначеЕсли ТекущаяДатаСеанса() >= СтрокаОтвета.ДатаНачалаРассмотрения Тогда
				СтрокаОтвета.СтатусОтвета = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Утверждено");
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаОтвета.ДатаОкончанияРассмотрения) Тогда
			Если ТекущаяДатаСеанса() >= КонецДня(СтрокаОтвета.ДатаОкончанияРассмотрения) Тогда
				СтрокаОтвета.СтатусОтвета = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Устарело");
			КонецЕсли;
		КонецЕсли;
		
		Если Не СтрокаОтвета.СтатусОтвета = ТекущийСтатус Тогда
			СтатусОтветаИзменен = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтатусОтветаИзменен Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПриСозданииИПриЧтенииНаСервере()
	
	ОбработатьТекстВопроса();
	ОбработатьТекстыОтветов();
	
КонецПроцедуры 

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ПриСозданииИПриЧтенииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДобавитьВТаблицуСоответствийИменВложенийИдентификаторамКартинкиИзИнтернета(ПереданныйТекстHTML)
	
	ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ПереданныйТекстHTML);
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		Если АтрибутИсточникКартинки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрЧислоВхождений(АтрибутИсточникКартинки.ТекстовоеСодержимое, "://") > 0 Тогда
			РезультатСкаченногоФайла =
				ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(АтрибутИсточникКартинки.ТекстовоеСодержимое);
			
			Если Не РезультатСкаченногоФайла = Неопределено И РезультатСкаченногоФайла.Статус Тогда
				НоваяКартинка = Новый Картинка(ПолучитьИзВременногоХранилища(РезультатСкаченногоФайла.Путь));
				
				НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
				НоваяСтрока.ИмяФайла = АтрибутИсточникКартинки.ТекстовоеСодержимое;
				НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
				НоваяСтрока.Картинка = НоваяКартинка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЧислоВложений(ИДФайлаЭлектронногоПисьма = "")
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(CRM_РешенияПрисоединенныеФайлы.Ссылка) КАК КоличествоФайлов
	|ИЗ
	|	Справочник.CRM_РешенияПрисоединенныеФайлы КАК CRM_РешенияПрисоединенныеФайлы
	|ГДЕ
	|	CRM_РешенияПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И НЕ CRM_РешенияПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КоличествоФайлов;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьЧислоВложенийПриОтключенныхВариантах(ИДФайлаЭлектронногоПисьма = "")
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(CRM_РешенияПрисоединенныеФайлы.Ссылка) КАК КоличествоФайлов
	|ИЗ
	|	Справочник.CRM_РешенияПрисоединенныеФайлы КАК CRM_РешенияПрисоединенныеФайлы
	|ГДЕ
	|	CRM_РешенияПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И CRM_РешенияПрисоединенныеФайлы.ИДФайлаЭлектронногоПисьма В (&МассивИД) 
	|	И НЕ CRM_РешенияПрисоединенныеФайлы.ПометкаУдаления";
	
	МассивИД = Новый Массив;
	МассивИД.Добавить(ИДФайлаЭлектронногоПисьма);
	МассивИД.Добавить("");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("МассивИД",	МассивИД);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КоличествоФайлов;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбработатьТекстHTML(Вопрос, ТекстHTML, ИдентификаторФормы)
	
	Кодировка = "utf-8";
	
	Если Не ПустаяСтрока(ТекстHTML) Тогда
		Если СтрЧислоВхождений(ТекстHTML, "<head") = 0 Тогда
			ТекстHTML = "
			|<html>
			|<head>  
			|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
			|<META content=""MSHTML 6.00.2800.1400"" name=GENERATOR>
			|<body scroll=""auto"">" + ТекстHTML + "
			|</body>
			|</html>";
		КонецЕсли;
		
		ТаблицаФайлов = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(Вопрос);
		Если ТаблицаФайлов.Количество() Тогда
			
			ДокументHTML = CRM_БазаЗнанийСервер.ЗаменитьИдентификаторыКартинокНаПутьКФайлам(ТекстHTML,
				 ТаблицаФайлов, Кодировка, ,
				 ИдентификаторФормы);
			
			Возврат Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			
		Иначе
			Возврат ТекстHTML;
		КонецЕсли;
		
	Иначе
		Возврат ТекстHTML;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоНавигационнаяСсылка(Строка)
	
	Возврат СтрНачинаетсяС(Строка, "e1c:")
		Или СтрНачинаетсяС(Строка, "e1cib/")
		Или СтрНачинаетсяС(Строка, "e1ccs/");
	
КонецФункции

&НаКлиенте
Процедура ПрисоединенныеФайлы(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла", Объект.Ссылка);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Не РешениеДоступно);
	
	ФормаПрисоединенныхФайлов = ПолучитьФорму("Обработка.РаботаСФайлами.Форма.CRM_ПрисоединенныеФайлы",
		 ПараметрыФормы, ЭтотОбъект,
		 УникальныйИдентификатор);
	
	Если ФормаПрисоединенныхФайлов.Открыта() Тогда
				
		ФормаПрисоединенныхФайлов.Активизировать();
	Иначе
		ФормаПрисоединенныхФайлов.ЗакрыватьПриЗакрытииВладельца = Истина;
		
		ФормаПрисоединенныхФайлов.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиКартинкуВДокументе(ТекстHTML, ИДФайлаЭлектронногоПисьма)
	
	КартинкаНайдена = Ложь;
	ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
	Если ДокументHTML.Картинки.Количество() > 0 Тогда
		УзлыИзображения = ДокументHTML.ПолучитьЭлементыПоИмени("img");
		
		ИДФайлаЭлектронногоПисьма = ИДФайлаЭлектронногоПисьма;
		Для Каждого Узел Из УзлыИзображения Цикл
			Если ЭтоНавигационнаяСсылка(Узел.Источник) Тогда
				Если Узел.ПолучитьАтрибут("cid-1crm") = ИДФайлаЭлектронногоПисьма Тогда
					КартинкаНайдена = Истина;
					Прервать;
				КонецЕсли;
			Иначе
				ИДФайлаЭлектронногоПисьмаCID = "cid:" + ИДФайлаЭлектронногоПисьма;
				Если Узел.Источник = ИДФайлаЭлектронногоПисьмаCID
					Или Узел.Источник = ИДФайлаЭлектронногоПисьма Тогда
					КартинкаНайдена = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат КартинкаНайдена;
	
КонецФункции

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ИмяРеквизита",                     "РаспознаваниеРечи");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекЭлемент = Контекст.Форма.ТекущийЭлемент;
	ИмяРеквизита = "";
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяЭлемента", ТекЭлемент.Имя);
	
	НайденныеСтроки = ЭтотОбъект["РаспознаваниеРечи_ТаблицаЭлементов"].НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = НайденныеСтроки[0].ИмяРеквизита;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		ТекущийЭлемент,
		ИмяРеквизита,
		РезультатРаспознавания);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Наименование");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "ТекстВопросаHTML");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "ВариантОтветаHTML");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

#КонецОбласти
