
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ФлагХраненияВМакете = ЗначениеЗаполнено(Объект.НаименованиеМакетаВерсии);
	
	Элементы.ГруппаСтраницВариантаХранения.ТекущаяСтраница = ?(
		ФлагХраненияВМакете,
		Элементы.ГруппаСтраницыВариантаИзМакета,
		Элементы.ГруппаСтраницыВариантаВХранилищеЗначений);
	
	ПриИзмененииВариантаХранения();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Элементы.ДекорацияКартинкиФлажкаНаличияДанныхАрхив.Картинка = ?(
		ТекущийОбъект.ХранилищеАрхиваБиблиотеки.Получить() = Неопределено,
		БиблиотекаКартинок.ОформлениеКрест,
		БиблиотекаКартинок.ОформлениеФлажок);
	
	Элементы.ДекорацияКартинкиФлажкаНаличияДанныхБиблиотека.Картинка = ?(
		ТекущийОбъект.ХранилищеБиблиотеки.Получить() = Неопределено,
		БиблиотекаКартинок.ОформлениеКрест,
		БиблиотекаКартинок.ОформлениеФлажок);
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ФлагХраненияВМакете Тогда
		ДвоичныеДанныеБиблиотеки = ПолучитьИзВременногоХранилища(АдресХраненияВнешнейБиблиотеки);
		
		ZipФайл = Новый ЧтениеZipФайла(ДвоичныеДанныеБиблиотеки.ОткрытьПотокДляЧтения());
		
		Если ZipФайл.Элементы.Количество() = 0 Или 
				ZipФайл.Элементы.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(
				"ru = 'В выбранном архиве должен быть только 1 файл.';
				|en = 'There should be only 1 file in the selected archive.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ТекущийОбъект.ХранилищеАрхиваБиблиотеки = Новый ХранилищеЗначения(ДвоичныеДанныеБиблиотеки);
	КонецЕсли;;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Элементы.ГруппаСтраницВариантаХранения.ТекущаяСтраница = Элементы.ГруппаСтраницыВариантаИзМакета Тогда
		ПроверяемыеРеквизиты.Добавить("НаименованиеМакетаВерсии");
	Иначе
		ПроверяемыеРеквизиты.Добавить("АдресХраненияВнешнейБиблиотеки");
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполненияНаСервере()

#КонецОбласти

/////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПутьКВнешнейБиблиотекиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьФайлВнешнейБиблиотеки();
	
КонецПроцедуры // ПутьКВнешнейБиблиотекиОткрытие()

&НаКлиенте
Процедура ПутьКВнешнейБиблиотекиНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьФайлВнешнейБиблиотеки();
	
КонецПроцедуры // ПутьКВнешнейБиблиотекиНачалоВыбора()

&НаКлиенте
Процедура ПутьКВнешнейБиблиотекиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ПутьКВнешнейБиблиотеки) Тогда
		ОписаниеОповещенияПроверкиСуществованияФайла = Новый ОписаниеОповещения(
			"ПутьКВнешнейБиблиотекиПриИзменении_ПроверкаСуществованияФайла", ЭтотОбъект);
		
		ФайлАрхива = Новый Файл(ПутьКВнешнейБиблиотеки);
		ФайлАрхива.НачатьПроверкуСуществования(ОписаниеОповещенияПроверкиСуществованияФайла);
	КонецЕсли;
	
КонецПроцедуры // ПутьКВнешнейБиблиотекиПриИзменении()

&НаКлиенте
Процедура НаименованиеМакетаВерсииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.НаименованиеМакетаВерсии) Тогда
		Если Не ПроверитьНаличиеМакета(Объект.НаименованиеМакетаВерсии) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(
				"ru = 'Указанного макета не существует.';
				|en = 'The specified layout does not exist.'"), ,
				"НаименованиеМакетаВерсии");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // НаименованиеМакетаВерсииПриИзменении()

#КонецОбласти

/////////////////////////////////////////////////////////////////

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьВариантИзМакета(Команда)
	
	Элементы.ГруппаСтраницВариантаХранения.ТекущаяСтраница = Элементы.ГруппаСтраницыВариантаИзМакета;
	ПриИзмененииВариантаХранения();
	
КонецПроцедуры // ВыбратьВариантИзМакета()

&НаКлиенте
Процедура ВыбратьВариантВХранилище(Команда)
	
	Элементы.ГруппаСтраницВариантаХранения.ТекущаяСтраница = Элементы.ГруппаСтраницыВариантаВХранилищеЗначений;
	ПриИзмененииВариантаХранения();
	
КонецПроцедуры // ВыбратьВариантВХранилище()

#КонецОбласти

/////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриИзмененииВариантаХранения()
	
	Если Элементы.ГруппаСтраницВариантаХранения.ТекущаяСтраница = Элементы.ГруппаСтраницыВариантаИзМакета Тогда
		ФлагХраненияВМакете = Истина;
		
		ИспользуемыйЦветИзМакета	= Новый Цвет(0, 160, 242);		// ЦветаСтиля.CRM_ОсновнойГолубой;
		ИспользуемыйЦветВХранилище	= Новый Цвет(163, 173, 187);	// ЦветаСтиля.CRM_СерыйДляВторостепенныхФункций;
	Иначе
		ФлагХраненияВМакете = Ложь;
		
		ИспользуемыйЦветИзМакета	= Новый Цвет(163, 173, 187);	// ЦветаСтиля.CRM_СерыйДляВторостепенныхФункций;
		ИспользуемыйЦветВХранилище	= Новый Цвет(0, 160, 242);		// ЦветаСтиля.CRM_ОсновнойГолубой;
	КонецЕсли;
	
	Элементы.ВыбратьВариантИзМакета.Пометка		= ФлагХраненияВМакете;
	Элементы.ВыбратьВариантВХранилище.Пометка	= Не ФлагХраненияВМакете;
	
	Элементы.ВыбратьВариантИзМакета.ЦветФона	= ИспользуемыйЦветИзМакета;
	Элементы.ВыбратьВариантВХранилище.ЦветФона	= ИспользуемыйЦветВХранилище;
	
	Элементы.ВыбратьВариантИзМакета.ЦветРамки	= ИспользуемыйЦветИзМакета;
	Элементы.ВыбратьВариантВХранилище.ЦветРамки	= ИспользуемыйЦветВХранилище;
	
КонецПроцедуры // ПриИзмененииВариантаХранения()

&НаКлиенте
Процедура ВыбратьФайлВнешнейБиблиотеки()
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр				= "ZIP-архив(*.zip)|*.zip";
	ДиалогВыбораФайла.Каталог				= ПутьКВнешнейБиблиотеки;
	ДиалогВыбораФайла.МножественныйВыбор	= Ложь;
	ДиалогВыбораФайла.Заголовок				= НСтр(
		"ru = 'Выберите архив с файлом внешней библиотеки';
		|en = 'Select the archive with the external library file'");
	
	ОписаниеОповещенияОВыбореФайла = Новый ОписаниеОповещения(
		"ВыбратьФайлВнешнейБиблиотекиЗавершение", ЭтотОбъект);
	
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(
		ОписаниеОповещенияОВыбореФайла, ДиалогВыбораФайла);
	
КонецПроцедуры // ВыбратьФайлВнешнейБиблиотеки()

&НаКлиенте
Процедура ВыбратьФайлВнешнейБиблиотекиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		ПутьКВнешнейБиблиотеки = ВыбранныеФайлы[0];
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ПутьКВнешнейБиблиотеки);
		АдресХраненияВнешнейБиблиотеки = ПоместитьВоВременноеХранилище(
			ДвоичныеДанныеФайла, ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры // ВыбратьФайлВнешнейБиблиотекиЗавершение()

&НаКлиенте
Процедура ПутьКВнешнейБиблиотекиПриИзменении_ПроверкаСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		ОписаниеОповещенияПроверкиНаТипФайла = Новый ОписаниеОповещения(
			"ПутьКВнешнейБиблиотекиПриИзменении_ПроверкаТипаФайла", ЭтотОбъект);
		
		ФайлАрхива = Новый Файл(ПутьКВнешнейБиблиотеки);
		ФайлАрхива.НачатьПроверкуЭтоФайл(ОписаниеОповещенияПроверкиНаТипФайла);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(
			"ru = 'Указанного файла не существует.';
			|en = 'The specified file does not exist.'"), ,
			"ПутьКВнешнейБиблиотеки");
	КонецЕсли;
	
КонецПроцедуры // ПутьКВнешнейБиблиотекиПриИзменении_ПроверкаСуществованияФайла()

&НаКлиенте
Процедура ПутьКВнешнейБиблиотекиПриИзменении_ПроверкаТипаФайла(ЭтоФайл, ДополнительныеПараметры) Экспорт
	
	Если ЭтоФайл Тогда
		ВыбранныеФайлы = Новый Массив;
		ВыбранныеФайлы.Добавить("ПутьКВнешнейБиблиотеки");
		
		ВыбратьФайлВнешнейБиблиотекиЗавершение(ВыбранныеФайлы, Неопределено);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(
			"ru = 'Путь к объекту не является файлом.';
			|en = 'The path to the object is not a file.'"), ,
			"ПутьКВнешнейБиблиотеки");
	КонецЕсли;
	
КонецПроцедуры // ПутьКВнешнейБиблиотекиПриИзменении_ПроверкаТипаФайла()

&НаСервереБезКонтекста
Функция ПроверитьНаличиеМакета(НаименованиеМакета)
	
	Возврат Метаданные.Справочники.CRM_ВнешниеБиблиотеки.Макеты.Найти(НаименованиеМакета) <> Неопределено;
	
КонецФункции // ПроверитьНаличиеМакета()

#КонецОбласти
