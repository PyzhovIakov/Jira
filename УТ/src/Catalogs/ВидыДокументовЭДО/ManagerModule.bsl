
#Область ПрограммныйИнтерфейс

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ОтработаныВсеДанные = Ложь;
	Ссылка = ПустаяСсылка();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	ПараметрыВыборки.ПолныеИменаОбъектов = Ссылка.Метаданные().ПолноеИмя();
	
	Пока Не ОтработаныВсеДанные Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1000
			|	ВидыДокументовЭДО.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
			|ГДЕ
			|	ВидыДокументовЭДО.Ссылка > &Ссылка
			|	И ((ВидыДокументовЭДО.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.ПустаяСсылка)
			|			ИЛИ ВидыДокументовЭДО.ПорядокСортировкиВПакете = 0
			|			И ВидыДокументовЭДО.ТипДокумента <> ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.Внутренний))
			|		ИЛИ ВидыДокументовЭДО.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.ДоговорныйДокумент))
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		//@skip-check query-in-loop
		МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивСсылок);
		
		КоличествоСсылок = МассивСсылок.Количество();
		Если КоличествоСсылок < 1000 Тогда
			ОтработаныВсеДанные = Истина;
		КонецЕсли;
		
		Если КоличествоСсылок > 0 Тогда
			Ссылка = МассивСсылок[КоличествоСсылок - 1];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.Справочники.ВидыДокументовЭДО;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	
	ВыбранныеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Для Каждого СтрокаДанных Из ВыбранныеДанные Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Записать = Ложь;
			
			Объект = ОбщегоНазначенияБЭД.ОбъектПоСсылкеДляИзменения(СтрокаДанных.Ссылка);
			
			Если Объект <> Неопределено Тогда
				
				ЗаполнитьТипДокументаДляВидовВнутреннегоЭДО(Объект, Записать);
				ЗаполнитьПорядокСортировкиВПакете(Объект, Записать);
				ОбновитьНаименованиеВидаДокумента(Объект, Записать);
				
			КонецЕсли;
			
			Если Записать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СтрокаДанных.Ссылка, ПараметрыОтметкиВыполнения);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обработать вид электронного документа: %1 по причине:
				|%2'"), СтрокаДанных.Ссылка, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, МетаданныеОбъекта, СтрокаДанных.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторые виды электронных документов (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция видов электронных документов: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектовОбработано);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,
			МетаданныеОбъекта,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов =
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбъектовОбработано;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецЕсли

#КонецОбласти

#Область ОбработчикиСобытий

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ДляПроизвольногоФормата", Ложь) Тогда
		СтандартнаяОбработка = Ложь;
		ВидыДокументов = ЭлектронныеДокументыЭДО.ВидыДокументовДляПроизвольногоФормата();
		ДанныеВыбора = Новый СписокЗначений;
		
		Для Каждого ВидДокумента Из ВидыДокументов Цикл
			Если ВидДокумента.ТипДокумента <> Перечисления.ТипыДокументовЭДО.ДоговорныйДокумент Тогда
				ДанныеВыбора.Добавить(ВидДокумента, ВидДокумента.Наименование);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	Если ЭлектронныеДокументыЭДОВызовСервера.ИспользоватьКраткоеПредставлениеВидовДокументов() Тогда
		СтандартнаяОбработка = Ложь;
		Поля.Добавить("КраткоеНаименование");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Если ЭлектронныеДокументыЭДОВызовСервера.ИспользоватьКраткоеПредставлениеВидовДокументов() Тогда
		СтандартнаяОбработка = Ложь;
		Представление = Данные.КраткоеНаименование;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - Значение элемента структуры СтандартныеТипыДокументов.
// Возвращаемое значение:
//  СправочникСсылка.ВидыДокументовЭДО
Функция ВидДокументаПоТипу(ТипДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(ТипДокумента) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнено значение параметра ""Тип документа""'");
	КонецЕсли;
	
	ПараметрыПоиска = НовыеПараметрыПоискаВидаДокумента(ТипДокумента);
	Возврат НайтиСоздатьВидДокумента(ПараметрыПоиска);
	
КонецФункции

// Параметры:
//  ТипыДокументов - Массив из ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ПеречислениеСсылка.ТипыДокументовЭДО
//  * Значение - СправочникСсылка.ВидыДокументовЭДО
Функция ВидыДокументовПоТипам(ТипыДокументов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДокументовЭДО.Ссылка КАК ВидДокумента,
		|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|ГДЕ
		|	ВидыДокументовЭДО.ТипДокумента В (&ТипыДокументов)";
	
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	
	ВидыДокументовПоТипам = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидыДокументовПоТипам.Вставить(Выборка.ТипДокумента, Выборка.ВидДокумента);
	КонецЦикла;
	
	Возврат ВидыДокументовПоТипам;
	
КонецФункции

// Параметры:
//  ВидыДокументовПоТипам - См. ВидыДокументовПоТипам
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ВидыДокументовЭДО
Функция ВыгрузитьВидыДокументовПоТипам(ВидыДокументовПоТипам) Экспорт
	ВидыДокументов = Новый Массив;
	Для Каждого ВидПоТипу Из ВидыДокументовПоТипам Цикл
		ВидыДокументов.Добавить(ВидПоТипу.Значение);
	КонецЦикла;
	Возврат ВидыДокументов;
КонецФункции

// Возвращает виды электронных документов по стандартным типам электронных документов.
// Не подходит для поиска по внутренним и прикладным типам документов.
// 
// Параметры:
//  ТипыДокументов - Массив из ПеречислениеСсылка.ТипыДокументовЭДО - Набор прикладных типов электронных документов.
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - ПеречислениеСсылка.ТипыДокументовЭДО - Ссылка на тип документа.
//   * Значение - СправочникСсылка.ВидыДокументовЭДО - Ссылка на вид электронного документа.
//                                                     Для внутреннего и прикладного документа возвращается пустая ссылка.
Функция ВидыДокументовПоСтандартнымТипам(ТипыДокументов) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДокументовЭДО.Ссылка,
		|	ВидыДокументовЭДО.ТипДокумента
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|ГДЕ
		|	ВидыДокументовЭДО.ТипДокумента В (&ТипыДокументов)
		|	И ВидыДокументовЭДО.ПрикладнойТипДокумента = &ПрикладнойТипДокумента
		|	И ВидыДокументовЭДО.ИдентификаторКомандыПечати = &ИдентификаторКомандыПечати
		|	И ВидыДокументовЭДО.ИдентификаторОбъектаУчета = &ИдентификаторОбъектаУчета";
	
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	Запрос.УстановитьПараметр("ПрикладнойТипДокумента", ИнтеграцияЭДО.ПустойПрикладнойТипЭлектронногоДокумента());
	Запрос.УстановитьПараметр("ИдентификаторОбъектаУчета", ИнтеграцияБСПБЭД.ПустойИдентификаторОбъектаМетаданных());
	Запрос.УстановитьПараметр("ИдентификаторКомандыПечати", "");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ТипДокумента, Выборка.Ссылка);
	КонецЦикла;
	
	Если ТипыДокументов.Количество() = Результат.Количество() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ТипДокумента Из ТипыДокументов Цикл
		Если Не ЗначениеЗаполнено(ТипДокумента)
			ИЛИ Результат[ТипДокумента] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыПоиска = НовыеПараметрыПоискаВидаДокумента(ТипДокумента);
		//@skip-check query-in-loop
		ВидДокумента = СоздатьВидДокумента(ПараметрыПоиска);
		Результат.Вставить(ТипДокумента, ВидДокумента);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает вид электронного документа по прикладному типу электронного документа.
// 
// Параметры:
// 	ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - Значение прикладного типа электронного документа.
// Возвращаемое значение:
// 	СправочникСсылка.ВидыДокументовЭДО - Ссылка на вид электронного документа.
Функция ВидДокументаПоПрикладномуТипу(ПрикладнойТипДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(ПрикладнойТипДокумента) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнено значение параметра ""Прикладной тип документа""'");
	КонецЕсли;
	
	ПараметрыПоиска = НовыеПараметрыПоискаВидаДокумента(Перечисления.ТипыДокументовЭДО.Прикладной);
	ПараметрыПоиска.ПрикладнойТипДокумента = ПрикладнойТипДокумента;
	Возврат НайтиСоздатьВидДокумента(ПараметрыПоиска);
	
КонецФункции

// Параметры:
//  ПрикладныеТипыДокументов - Массив из ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО
//  * Значение - СправочникСсылка.ВидыДокументовЭДО
Функция ВидыДокументовПоПрикладнымТипам(ПрикладныеТипыДокументов) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДокументовЭДО.Ссылка,
		|	ВидыДокументовЭДО.ПрикладнойТипДокумента
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|ГДЕ
		|	ВидыДокументовЭДО.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.Прикладной)
		|	И ВидыДокументовЭДО.ПрикладнойТипДокумента В (&ПрикладныеТипыДокументов)";
	
	Запрос.УстановитьПараметр("ПрикладныеТипыДокументов", ПрикладныеТипыДокументов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ПрикладнойТипДокумента, Выборка.Ссылка);
	КонецЦикла;
	
	Если ПрикладныеТипыДокументов.Количество() = Результат.Количество() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ПрикладнойТип Из ПрикладныеТипыДокументов Цикл
		Если Не ЗначениеЗаполнено(ПрикладнойТип)
			ИЛИ Результат[ПрикладнойТип] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыПоиска = НовыеПараметрыПоискаВидаДокумента(
			Перечисления.ТипыДокументовЭДО.Прикладной);
		ПараметрыПоиска.ПрикладнойТипДокумента = ПрикладнойТип;
		//@skip-check query-in-loop
		ВидДокумента = СоздатьВидДокумента(ПараметрыПоиска);
		Результат.Вставить(ПрикладнойТип, ВидДокумента);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИменаТиповДокументов - Массив из Строка
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка
//  * Значение - СправочникСсылка.ВидыДокументовЭДО
Функция ВидыДокументовПоИменамСтандартныхТипов(ИменаТиповДокументов) Экспорт
	
	Результат = Новый Соответствие;
	ТипыДокументовЭДОИзФорматаСервиса = Новый Соответствие;
	ТипыДокументовЭДО = Новый Массив; // Массив из ПеречислениеСсылка.ТипыДокументовЭДО
	МетаданныеПеречисленияТипыДокументовЭДО = Метаданные.Перечисления.ТипыДокументовЭДО;
	
	Для Каждого ИмяТипаДокумента Из ИменаТиповДокументов Цикл
		ТипДокумента = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(
			ИмяТипаДокумента, МетаданныеПеречисленияТипыДокументовЭДО); // ПеречислениеСсылка.ТипыДокументовЭДО
		ТипыДокументовЭДОИзФорматаСервиса.Вставить(ИмяТипаДокумента, ТипДокумента);
		ТипыДокументовЭДО.Добавить(ТипДокумента);
	КонецЦикла;
	
	ВидыДокументовПоТипам = ВидыДокументовПоСтандартнымТипам(ТипыДокументовЭДО);
	
	Для Каждого ТипДокументаЭДОИзФорматаСервиса Из ТипыДокументовЭДОИзФорматаСервиса Цикл
		ТипДокументаВФорматеСервиса = ТипДокументаЭДОИзФорматаСервиса.Ключ;
		ТипДокумента = ТипДокументаЭДОИзФорматаСервиса.Значение;
		ВидДокумента = ВидыДокументовПоТипам[ТипДокумента];
		Результат.Вставить(ТипДокументаВФорматеСервиса, ВидДокумента);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Определяет соответствует ли тип вида документа прикладному типу.
// 
// Параметры:
// 	ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - ссылка на вид документа.
// Возвращаемое значение:
// 	Булево - вид имеет тип документа запрос коммерческих предложений.
Функция ЭтоПрикладнойВидДокумента(ВидДокумента) Экспорт
	Возврат ТипВидаДокументаСоответствуетТипу(ВидДокумента,
		Перечисления.ТипыДокументовЭДО.Прикладной);
КонецФункции

// Определяет соответствует ли тип вида документа внутреннему типу.
// 
// Параметры:
// 	ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - ссылка на вид документа.
// Возвращаемое значение:
// 	Булево - вид имеет тип документа запрос коммерческих предложений.
Функция ЭтоВнутреннийВидДокумента(ВидДокумента) Экспорт
	Возврат ТипВидаДокументаСоответствуетТипу(ВидДокумента,
		Перечисления.ТипыДокументовЭДО.Внутренний);
КонецФункции

// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Структура:
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// * ПрикладнойТипДокумента - См. ИнтеграцияЭДО.ПустойПрикладнойТипЭлектронногоДокумента
// * ИдентификаторОбъектаУчета - СправочникСсылка.ИдентификаторыОбъектовМетаданных
// * ИдентификаторКомандыПечати - Строка
// * ПредставлениеКомандыПечати - Строка
// 
Функция НовыеПараметрыПоискаВидаДокумента(ТипДокумента) Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ТипДокумента", ТипДокумента);
	Параметры.Вставить("ПрикладнойТипДокумента", ИнтеграцияЭДО.ПустойПрикладнойТипЭлектронногоДокумента());
	Параметры.Вставить("ИдентификаторОбъектаУчета", ИнтеграцияБСПБЭД.ПустойИдентификаторОбъектаМетаданных());
	Параметры.Вставить("ИдентификаторКомандыПечати", "");
	Параметры.Вставить("ПредставлениеКомандыПечати", "");
	Возврат Параметры;
КонецФункции

// Параметры:
//  ПараметрыПоиска - См. НовыеПараметрыПоискаВидаДокумента
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыДокументовЭДО
Функция НайтиВидДокумента(ПараметрыПоиска) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыДокументовЭДО.Ссылка
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|ГДЕ
		|	ВидыДокументовЭДО.ТипДокумента = &ТипДокумента
		|	И ВидыДокументовЭДО.ПрикладнойТипДокумента = &ПрикладнойТипДокумента
		|	И ВидыДокументовЭДО.ИдентификаторКомандыПечати = &ИдентификаторКомандыПечати
		|	И ВидыДокументовЭДО.ИдентификаторОбъектаУчета = &ИдентификаторОбъектаУчета";
	
	Запрос.УстановитьПараметр("ТипДокумента", ПараметрыПоиска.ТипДокумента);
	Запрос.УстановитьПараметр("ПрикладнойТипДокумента", ПараметрыПоиска.ПрикладнойТипДокумента);
	Запрос.УстановитьПараметр("ИдентификаторОбъектаУчета", ПараметрыПоиска.ИдентификаторОбъектаУчета);
	Запрос.УстановитьПараметр("ИдентификаторКомандыПечати", ПараметрыПоиска.ИдентификаторКомандыПечати);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ПараметрыПоиска - См. НовыеПараметрыПоискаВидаДокумента
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыДокументовЭДО
Функция СоздатьВидДокумента(ПараметрыПоиска) Экспорт
	
	ВидДокумента = ПустаяСсылка();
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		БлокировкаВидаДокумента(ПараметрыПоиска).Заблокировать();
		ВидДокумента = НайтиВидДокумента(ПараметрыПоиска);
		Если ЗначениеЗаполнено(ВидДокумента) Тогда
			ЗафиксироватьТранзакцию();
			Возврат ВидДокумента;
		КонецЕсли;
		
		НовыйЭлемент = СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ПараметрыПоиска);
		ЗаполнитьНаименованиеВидаДокумента(НовыйЭлемент, ПараметрыПоиска.ПредставлениеКомандыПечати);
		НовыйЭлемент.ПорядокСортировкиВПакете = ПорядокСортировкиВПакете(ПараметрыПоиска.ТипДокумента);
		
		Если Не НовыйЭлемент.ПроверитьЗаполнение() Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка заполнения нового вида документа'");
		КонецЕсли;
		
		НовыйЭлемент.Записать();
		ВидДокумента = НовыйЭлемент.Ссылка;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(НСтр("ru = 'Параметры поиска:'"));
		МассивСтрок.Добавить(ОбщегоНазначенияБЭДКлиентСервер.СтруктураВСтроку(ПараметрыПоиска,,Символы.ПС));
		МассивСтрок.Добавить(НСтр("ru = 'Описание ошибки:'"));
		МассивСтрок.Добавить(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстОшибки = СтрСоединить(МассивСтрок, Символы.ПС);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Поиск вида документа'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ВызватьИсключение;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);

	Возврат ВидДокумента;
	
КонецФункции

// Параметры:
//  ПараметрыПоиска - см. НовыеПараметрыПоискаВидаДокумента
// 
// Возвращаемое значение:
//  Неопределено,СправочникСсылка.ВидыДокументовЭДО
Функция НайтиСоздатьВидДокумента(ПараметрыПоиска) Экспорт
	
	ВидДокумента = НайтиВидДокумента(ПараметрыПоиска);
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		ВидДокумента = СоздатьВидДокумента(ПараметрыПоиска);
	КонецЕсли;
	
	Возврат ВидДокумента;
	
КонецФункции

// Найти создать виды документов.
// 
// Параметры:
//  ТипыДокументов - Массив из ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  См. ВидыДокументовПоТипам
Функция НайтиСоздатьВидыДокументов(ТипыДокументов) Экспорт
	
	ВидыДокументовПоТипам = ВидыДокументовПоТипам(ТипыДокументов);
	
	Если ТипыДокументов.Количество() = ВидыДокументовПоТипам.Количество() Тогда
		Возврат ВидыДокументовПоТипам;
	КонецЕсли;
	
	Для Каждого ТипДокумента Из ТипыДокументов Цикл
		Если ВидыДокументовПоТипам[ТипДокумента] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыПоиска = НовыеПараметрыПоискаВидаДокумента(ТипДокумента);
		//@skip-check query-in-loop
		ВидДокумента = СоздатьВидДокумента(ПараметрыПоиска);
		ВидыДокументовПоТипам.Вставить(ТипДокумента, ВидДокумента);
	КонецЦикла;
	
	Возврат ВидыДокументовПоТипам;
	
КонецФункции

// Параметры:
//  ВидДокументаОбъект - СправочникОбъект.ВидыДокументовЭДО
//  ПредставлениеКомандыПечати - Строка
// 
Процедура ЗаполнитьНаименованиеВидаДокумента(ВидДокументаОбъект, ПредставлениеКомандыПечати = "") Экспорт
	
	Если ВидДокументаОбъект.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
		ВидДокументаОбъект.Наименование = Строка(ВидДокументаОбъект.ПрикладнойТипДокумента);
	ИначеЕсли ВидДокументаОбъект.ТипДокумента = Перечисления.ТипыДокументовЭДО.Внутренний Тогда
		Если ЗначениеЗаполнено(ПредставлениеКомандыПечати) Тогда
			ВидДокументаОбъект.Наименование = ПредставлениеКомандыПечати;
		Иначе
			ВидДокументаОбъект.Наименование = ИнтерфейсДокументовЭДО.ПредставлениеКомандыПечатиОбъекта(
				ВидДокументаОбъект.ИдентификаторОбъектаУчета, ВидДокументаОбъект.ИдентификаторКомандыПечати)
		КонецЕсли;
	Иначе
		ВидДокументаОбъект.Наименование = Строка(ВидДокументаОбъект.ТипДокумента);
		ВидДокументаОбъект.КраткоеНаименование = Перечисления.ТипыДокументовЭДО.КраткоеНаименование(
			ВидДокументаОбъект.ТипДокумента);
	КонецЕсли;
	
	Если ПустаяСтрока(ВидДокументаОбъект.КраткоеНаименование) Тогда
		ВидДокументаОбъект.КраткоеНаименование = ВидДокументаОбъект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ПараметрыПоиска - см. ЭлектронныеДокументыЭДО.НовыеПараметрыПоискаВидаДокумента
// 
// Возвращаемое значение:
//  БлокировкаДанных
Функция БлокировкаВидаДокумента(ПараметрыПоиска) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ВидыДокументовЭДО");
	ЭлементБлокировки.УстановитьЗначение("ТипДокумента", ПараметрыПоиска.ТипДокумента);
	ЭлементБлокировки.УстановитьЗначение("ПрикладнойТипДокумента", ПараметрыПоиска.ПрикладнойТипДокумента);
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторОбъектаУчета", ПараметрыПоиска.ИдентификаторОбъектаУчета);
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторКомандыПечати", ПараметрыПоиска.ИдентификаторКомандыПечати);
	
	Возврат Блокировка;
	
КонецФункции

// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Число
Функция ПорядокСортировкиВПакете(ТипДокумента)
	Порядок = 100;
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД Тогда Порядок = 1;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Тогда Порядок = 2;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная Тогда Порядок = 3;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот Тогда Порядок = 4;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав Тогда Порядок = 5;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости Тогда Порядок = 6;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура Тогда Порядок = 7;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура Тогда Порядок = 8;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктОРасхождениях Тогда Порядок = 9;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов Тогда Порядок = 10;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктПриемкиСтроительныхРаботУслуг Тогда Порядок = 11;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОПродажахКомиссионногоТовара Тогда Порядок = 12;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОСписанииКомиссионногоТовара Тогда Порядок = 13;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда Порядок = 14;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КаталогТоваров Тогда Порядок = 15;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетНаОплату Тогда Порядок = 16;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗаказТовара Тогда Порядок = 17;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтветНаЗаказ Тогда Порядок = 18;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений Тогда Порядок = 19;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КоммерческоеПредложение Тогда Порядок = 20;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВзаимозачета Тогда Порядок = 21;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктСверки Тогда Порядок = 22;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Ведомость Тогда Порядок = 23;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ГарантийноеПисьмо Тогда Порядок = 24;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Договор Тогда Порядок = 25;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ДополнительноеСоглашение Тогда Порядок = 26;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КС11 Тогда Порядок = 27;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КС2 Тогда Порядок = 28;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КС3 Тогда Порядок = 29;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Отчет Тогда Порядок = 30;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПлатежноеПоручение Тогда Порядок = 31;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПриложениеКАкту Тогда Порядок = 32;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбЭДО Тогда Порядок = 33;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Спецификация Тогда Порядок = 34;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Уведомление Тогда Порядок = 35;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.Прочее Тогда Порядок = 36;
	КонецЕсли;
	Возврат Порядок;
КонецФункции

// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ТипВидаДокументаСоответствуетТипу(ВидДокумента, ТипДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИСТИНА КАК Выбран
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|ГДЕ
		|	ВидыДокументовЭДО.Ссылка = &Ссылка
		|	И ВидыДокументовЭДО.ТипДокумента = &ТипДокумента";
	
	Запрос.УстановитьПараметр("Ссылка", ВидДокумента);
	Запрос.УстановитьПараметр("ТипДокумента", ТипДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#Область СлужебныеПроцедурыИФункцииОбработчиковОбновления

Процедура ЗаполнитьТипДокументаДляВидовВнутреннегоЭДО(Объект, Записать)
	
	Если ЗначениеЗаполнено(Объект.ТипДокумента)
		ИЛИ Не ЗначениеЗаполнено(Объект.ИдентификаторКомандыПечати) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ТипДокумента = Перечисления.ТипыДокументовЭДО.Внутренний;
	
	Записать = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьПорядокСортировкиВПакете(Объект, Записать)
	
	Если ЗначениеЗаполнено(Объект.ПорядокСортировкиВПакете) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПорядокСортировкиВПакете = ПорядокСортировкиВПакете(Объект.ТипДокумента);
	
	Записать = Истина;
	
КонецПроцедуры

Процедура ОбновитьНаименованиеВидаДокумента(Объект, Записать)
	
	Если Объект.ТипДокумента <> Перечисления.ТипыДокументовЭДО.ДоговорныйДокумент
		ИЛИ Объект.Наименование = Строка(Объект.ТипДокумента) Тогда
			
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьНаименованиеВидаДокумента(Объект);
	
	Записать = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#КонецОбласти
