
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	CRM_ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	CRM_ИспользоватьПотенциальныхКлиентов = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПотенциальныхКлиентов");
	Если Объект.Ссылка.Пустая() Тогда
		
		Параметры.Свойство("ТипМессенджера", Объект.ТипМессенджера);
		
		// Добавляем Текущего пользователя в СписокПользователей, если это новый элемент.
		СтрокаПользователь = CRM_СписокПользователей.Добавить();
		СтрокаПользователь.Пользователь = CRM_ТекущийПользователь;
		СтрокаПользователь.Администрирование = Истина;
		СтрокаПользователь.Запись = Истина;
		
		Элементы.Наименование.Видимость = Ложь;
		Элементы.Включена.Видимость = Ложь;
		
		Если CRM_ИспользоватьПотенциальныхКлиентов Тогда
			Объект.CRM_ВариантАвтосозданияКлиентов = Перечисления.CRM_ВариантыАвтосозданияКлиентов.СоздаватьПК;
		Иначе
			Объект.CRM_ВариантАвтосозданияКлиентов = Перечисления.CRM_ВариантыАвтосозданияКлиентов.СоздаватьКлиента;
		КонецЕсли;
		
	КонецЕсли;
	
	ИнициализироватьДанные();
	
	ТекущийПользовательРазрешеноАдминистрирование = CRM_РаботаСМессенджерамиСервер.ТекущийПользовательПолучитьПравоУчетнойЗаписи(Объект.Ссылка,
		 "Администрирование");
	
	ТолькоПросмотр = Истина;
	Если  ТекущийПользовательРазрешеноАдминистрирование И ПравоДоступа("Редактирование",
		 Метаданные.Справочники.CRM_УчетныеЗаписиМессенджеров) Тогда
		
		ТолькоПросмотр = Ложь;
		
	КонецЕсли;
	Элементы.ГруппаПользователи.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.СписокПользователейГруппаЗаполнить.Доступность = НЕ ТолькоПросмотр;
	Элементы.СписокПользователейПодбор.Доступность = НЕ ТолькоПросмотр;
	Элементы.ГруппаНастройки.Доступность = НЕ ТолькоПросмотр;
	Элементы.CRM_СписокПользователейГруппаДобавить.Доступность = НЕ ТолькоПросмотр; 
	Элементы.ФормаГотово.Доступность = НЕ ТолькоПросмотр;
	
	Если ЗначениеЗаполнено(Объект.CRM_РольОтветственного) Тогда
		РолеваяАдресация = 1;
	КонецЕсли;
	Элементы.Ответственный.Видимость = НЕ РолеваяАдресация;
	Элементы.CRM_РольОтветственного.Видимость = РолеваяАдресация;
	
	Логотип = ПоместитьВоВременноеХранилище(CRM_РаботаСМессенджерамиСерверПовтИсп.КартинкаМессенджера(
		Новый Структура("ТипМессенджера", Объект.ТипМессенджера), "Картинка_128"), УникальныйИдентификатор);
		
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(CRM_РаботаСМессенджерамиСерверПовтИсп.ТекстЗаголовка(Объект.ТипМессенджера));
	ТекстЗаголовка = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON, Тип("ФорматированнаяСтрока"));

	УправлениеВидимостьюЭлементов();
	
	РегистрыСведений.CRM_НастройкиСвязиОбращенийСИнтересами.ФормаИсточникаПриСозданииНаСервере(ЭтотОбъект);
	
	Если Объект.Ссылка = Справочники.CRM_УчетныеЗаписиМессенджеров.СистемаВзаимодействия Тогда
		Элементы.ГруппаЛиды.Видимость = Ложь;
		Элементы.ГруппаОтветственный.Видимость = Ложь;
		Элементы.НастройкиСвязиОбращенийСИнтересами.Видимость = Ложь;
		Элементы.ДекорацияРазделитель2.Видимость = Ложь;
		Элементы.ГруппаОбработкаОбращений.Видимость = Ложь;
		Элементы.ДекорацияРазделитель3.Видимость = Ложь;
		Элементы.ГруппаНастройкиВсплывющие.Видимость = Ложь;
		Элементы.CRM_ЗаблокированныеОтправители.Видимость = Ложь;
	КонецЕсли;

	CRM_НастроитьКнопкиСоздаватьКлиентаНаСервере();
	
	ЗаполнитьИспользуемыеСценарии();

	Если Элементы.CRM_СрокЖизниОбращения.СписокВыбора.НайтиПоЗначению(Объект.CRM_СрокЖизниОбращения) = Неопределено Тогда
		Элементы.CRM_СрокЖизниОбращения.РежимВыбораИзСписка = Ложь;
		Элементы.CRM_СрокЖизниОбращения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	СтруктураПараметровДоступа = ТекущийОбъект.ХранилищеПараметровДоступа.Получить();
	УправлениеВидимостьюЭлементов();
	Если ТекущийОбъект.Ссылка.Пустая() Тогда
		ТекущийОбъект.УстановитьСсылкуНового(ТекущийОбъект.ПолучитьСсылкуНового());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ОбновитьИспользуемыеСценарии();
	Если Объект.CRM_ИсточникЛидов
		И Объект.CRM_Сценарии.Количество() = 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СнятьФлагИсточникЛидов", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Не выбраны сценарии для источника лидов!
                  |Флаг ""Источник лидов"" будет снят.'"),
			РежимДиалогаВопрос.ОКОтмена);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ХранилищеПараметровДоступа = Новый ХранилищеЗначения(СтруктураПараметровДоступа);
	Если НЕ ТекущийОбъект.ПометкаУдаления И ТекущийОбъект.Включена И ТекущийОбъект.ИспользоватьWebhook Тогда
		Если Объект.Ссылка.Пустая() Тогда
			СсылкаНаОбъект = Справочники.CRM_УчетныеЗаписиМессенджеров.ПолучитьСсылку();
			ТекущийОбъект.УстановитьСсылкуНового(СсылкаНаОбъект);
		КонецЕсли;
		СтруктураПараметровДоступа.Вставить("ПараметрыПрокси", ПараметрыПрокси(ЭтотОбъект));
		Если НЕ CRM_РаботаСМессенджерамиСервер.УстановитьWebhook(Объект, СтруктураПараметровДоступа) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ТекущийОбъект.Ссылка.Пустая() И ТекущийОбъект.CRM_ИсточникЛидов
		 И (ТекущийОбъект.CRM_СрокОбработкиДней <> ТекущийОбъект.Ссылка.CRM_СрокОбработкиДней
		ИЛИ ТекущийОбъект.CRM_СрокОбработкиЧасов <> ТекущийОбъект.Ссылка.CRM_СрокОбработкиЧасов ИЛИ ТекущийОбъект.CRM_СрокОбработкиМинут <> ТекущийОбъект.Ссылка.CRM_СрокОбработкиМинут) Тогда
		CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.УправлениеСрокомОбработкиОбращений.Удобство.ИзменениеВремениОбработкиОбращенийВНастройкеУчетныхЗаписей");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НаборРегистра = РегистрыСведений.CRM_УчетныеЗаписиМессенджеров.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.УчетнаяЗапись.Установить(Объект.Ссылка);
	НаборРегистра.Прочитать();
	ТаблицаНабора = НаборРегистра.Выгрузить();
	НаборРегистра.Очистить();
	// Запишем данные о пользователях учетной записи в регистр.
	Для Каждого СтрокаПользователя Из CRM_СписокПользователей Цикл
		СтрокаНабора = НаборРегистра.Добавить();
		СтрокаНабора.УчетнаяЗапись	= Объект.Ссылка;
		СтрокаНабора.Пользователь	= СтрокаПользователя.Пользователь;
		СтрокаНабора.Запись			= СтрокаПользователя.Запись;
		СтрокаНабора.Администрирование	= СтрокаПользователя.Администрирование;
		СтрокаТаблицыНабора = ТаблицаНабора.Найти(Объект.Ссылка, "УчетнаяЗапись");
		СтрокаНабора.Основная = ?(СтрокаТаблицыНабора = Неопределено, Ложь, СтрокаТаблицыНабора.Основная);
	КонецЦикла;
	НаборРегистра.Записать();
	РегистрыСведений.CRM_НастройкиСвязиОбращенийСИнтересами.ФормаИсточникаПриЗаписи(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОбновитьПравилаОбработкиОбращений");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		мСписокПользователей = Новый СписокЗначений;
		мСписокПользователей.ЗагрузитьЗначения(ВыбранноеЗначение);
		ЗаполнитьСписокПользователей(мСписокПользователей);
		Модифицированность = Истина;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		мСписокПользователей = Новый СписокЗначений;
		мСписокПользователей.Добавить(ВыбранноеЗначение);
		ЗаполнитьСписокПользователей(мСписокПользователей);
		Модифицированность = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВидимостьПравилОбработки();
	CRM_ИсточникЛидовПриИзменении(Неопределено);
	ИспользуемыеСценарииПометкаПриИзменении(Неопределено);	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РолеваяАдресацияПриИзменении(Элемент)
	РолеваяАдресацияПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИсточникЛидовПриИзменении(Элемент)
	Элементы.CRM_УказыватьПричинуОтклонения.Видимость = Объект.CRM_ИсточникЛидов;
	Элементы.ГруппаИспользуемыеСценарии.Видимость = Объект.CRM_ИсточникЛидов;
	Элементы.ГруппаСрокОбработки.Видимость = Объект.CRM_ИсточникЛидов;
	Элементы.ГруппаСрокЖизни.Видимость = Объект.CRM_ИсточникЛидов;
	Если Элемент <> Неопределено 
		И Объект.CRM_ИсточникЛидов 
		И Не ЗначениеЗаполнено(Объект.CRM_СрокЖизниОбращения) Тогда
		Объект.CRM_СрокЖизниОбращения = 30;
	КонецЕсли;
	Если Элемент <> Неопределено И НЕ Объект.CRM_ИсточникЛидов Тогда
		Объект.CRM_УказыватьПричинуОтклонения = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеСценарииПометкаПриИзменении(Элемент)
	КолвоСценариев = 0;
	Для каждого Элемент Из ИспользуемыеСценарии Цикл
		Если Элемент.Пометка Тогда
			КолвоСценариев = КолвоСценариев + 1;
		КонецЕсли;
	КонецЦикла;
	Элементы.ГруппаИспользуемыеСценарии.Заголовок = НСтр("ru = 'Используемые сценарии'") + " (" + КолвоСценариев + ")";
КонецПроцедуры

&НаКлиенте
Процедура ТекстЗаголовкаОбработкаНавигационнойСсылки(Элемент,
	 НавигационнаяСсылкаФорматированнойСтроки,
	 СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаФорматированнойСтроки);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыCRM_СписокПользователей

&НаКлиенте
Процедура CRM_СписокПользователейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	Если Записать() И Открыта() Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаПродолжение", ЭтотОбъект);
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПродолжение(Результат, ДопПараметр) Экспорт
	Если ЗначениеЗаполнено(Объект.ТипМессенджера) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаЗавершение", ЭтотОбъект);
		Если ТипЗнч(СтруктураПараметровДоступа) <> Тип("Структура") Тогда
			СтруктураПараметровДоступа = Новый Структура;
		КонецЕсли;
		СтруктураПараметровДоступа.Вставить("ПараметрыПрокси", ПараметрыПрокси(ЭтотОбъект));
		СтруктураПараметровДоступа.Вставить("УчетнаяЗапись", Объект.Ссылка);
		ОткрытьФорму("Обработка.CRM_РаботаСМессенджером" + Строка(Объект.ТипМессенджера) 
			+ ".Форма.ФормаНастройки", СтруктураПараметровДоступа,
				ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Модифицированность = Истина;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выбран мессенджер/соц. сеть!';
			|en='Messenger/Social Network is not selected!'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		СтруктураПараметровДоступа = Результат;
		Если Результат.Свойство("ИмяГруппы") Тогда
			Объект.Наименование = Результат.ИмяГруппы;
		КонецЕсли;
		Если Результат.Свойство("ИспользоватьWebhook") Тогда
			Объект.ИспользоватьWebhook = Результат.ИспользоватьWebhook;
		КонецЕсли;
		Если Результат.Свойство("УсловияИспользованияПриняты") Тогда
			Объект.УсловияИспользованияПриняты = Результат.УсловияИспользованияПриняты;
		КонецЕсли;
		
		Объект.Включена = Истина;
		УправлениеВидимостьюЭлементов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отключить(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтключитьЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("en = 'The communication channel will be disabled,
		| and all settings you have made will be deleted.
                                            |Are you sure?';ru = 'Канал коммуникаций будет отключен, с удалением всех сделанных настроек.
                                            |Продолжить?'"), РежимДиалогаВопрос.ОКОтмена, , , НСтр("en = 'Disabling an account';ru = 'Отключение учетной записи'"));
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если CRM_РаботаСМессенджерамиСервер.Отключиться(Объект.ТипМессенджера, СтруктураПараметровДоступа) Тогда
			СтруктураПараметровДоступа = Неопределено;
			Объект.Включена = Ложь;
			УправлениеВидимостьюЭлементов();
			Если НЕ Объект.Ссылка.Пустая() Тогда
				Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура заполнения всеми пользователями.
//
Процедура ЗаполнитьВсемиПользователями(Команда)
	мСписокПользователей = ПолучитьСписокПользователей();
	ЗаполнитьСписокПользователей(мСписокПользователей);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
// Процедура заполнения по группе пользователей.
//
Процедура ЗаполнитьПоГруппеПользователей(Команда)
	ИспользоватьГруппы = ПолучитьИспользованиеГрупп();
	Если НЕ ИспользоватьГруппы Тогда
		ПоказатьПредупреждение(, "Отключена настройка ""Использовать группы пользователей""");
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоГруппеПользователейПродолжение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ГруппыПользователей.ФормаВыбораГруппы", ПараметрыФормы, ЭтотОбъект, , , ,
		 ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГруппеПользователейПродолжение(ГруппаПользователей, ДополнительныеПараметры) Экспорт
	Если ГруппаПользователей <> Неопределено Тогда
		ВключаяВложенные = ЕстьВложенныеГруппы(ГруппаПользователей);
		Если ВключаяВложенные Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоГруппеПользователейЗавершение",
				 ЭтотОбъект,
				 ГруппаПользователей);
			ПоказатьВопрос(ОписаниеОповещения, "Загрузить также пользователей вложенных групп?", РежимДиалогаВопрос.ДаНет, 0);
		Иначе
			ЗаполнитьПоГруппеПользователейЗавершение(Неопределено, ГруппаПользователей);
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГруппеПользователейЗавершение(Ответ, ГруппаПользователей) Экспорт
	Если Ответ  = КодВозвратаДиалога.Да Тогда
		ВключаяВложенные = Истина;
	Иначе	
		ВключаяВложенные = Ложь;
	КонецЕсли;			
	мСписокПользователей = ПолучитьСписокПользователей(ГруппаПользователей, ВключаяВложенные);
	ЗаполнитьСписокПользователей(мСписокПользователей);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
// Процедура очистки списка пользователей.
//
Процедура ОчиститьСписок(Команда)
	ТД = Элементы.CRM_СписокПользователей.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьСписокЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Все пользователи из списка будут удалены. Продолжить?",
		 РежимДиалогаВопрос.ДаНет,
		 0);
КонецПроцедуры // ОчиститьСписок()

&НаКлиенте
// Процедура заполнения подбором.
//
Процедура Подбор(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",				Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",		Истина);
	ПараметрыФормы.Вставить("ВыборГруппПользователей",	Ложь);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",		Ложь);
	ФормаПодбора = ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПользователяРоль(Команда)
	
	Если Команда.Имя = "CRM_ДобавитьПользователя" Тогда
		ПараметрыФормы = Новый Структура(
			"РежимВыбора,ЗакрыватьПриВыборе",
			Истина, Истина
		);
		
		ОткрытьФорму("Справочник.Пользователи.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
	ИначеЕсли Команда.Имя = "CRM_ДобавитьРоль" Тогда
		ОткрытьФорму("Справочник.РолиИсполнителей.ФормаВыбора", , ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_СоздаватьПК(Команда)
	
	Объект.CRM_ВариантАвтосозданияКлиентов =
		ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.СоздаватьПК");
	CRM_НастроитьКнопкиСоздаватьКлиентаНаСервере();
	
	Элементы.ГруппаНастройкиСозданияПартнера.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_СоздаватьКлиента(Команда)
	
	Объект.CRM_ВариантАвтосозданияКлиентов =
		ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.СоздаватьКлиента");
	CRM_НастроитьКнопкиСоздаватьКлиентаНаСервере();
	
	Элементы.ГруппаНастройкиСозданияПартнера.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_НеСоздаватьКлиента(Команда)
	
	Объект.CRM_ВариантАвтосозданияКлиентов =
		ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.НеСоздавать");
	CRM_НастроитьКнопкиСоздаватьКлиентаНаСервере();
	
	Элементы.ГруппаНастройкиСозданияПартнера.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура CRM_НастроитьКнопкиСоздаватьКлиентаНаСервере()
	
	// Установить видимость
	
	Элементы.CRM_СоздаватьПК.Видимость = CRM_ИспользоватьПотенциальныхКлиентов;
	Элементы.ГруппаНастройкиСозданияПартнера.Видимость =
		(Объект.CRM_ВариантАвтосозданияКлиентов = Перечисления.CRM_ВариантыАвтосозданияКлиентов.СоздаватьКлиента);
	Если CRM_ИспользоватьПотенциальныхКлиентов Тогда
		Элементы.ДекорацияПодсказкаСозданиеПартнера.Подсказка = НСтр("ru = 'При обращении от неизвестного контакта,
			| создавать потенциального клиента,
                                                        |клиента, либо не сохранять контакт.'");
	КонецЕсли;
	
	// Покрасить кнопки
	
	НомерКнопки = ?(CRM_ИспользоватьПотенциальныхКлиентов, 1, 2);
	
	Если Объект.CRM_ВариантАвтосозданияКлиентов = ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.СоздаватьПК") Тогда
		НомерКнопки = 1;
	ИначеЕсли Объект.CRM_ВариантАвтосозданияКлиентов = ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.СоздаватьКлиента") Тогда
		НомерКнопки = 2;
	ИначеЕсли Объект.CRM_ВариантАвтосозданияКлиентов = ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.НеСоздавать") Тогда
		НомерКнопки = 3;
	КонецЕсли;
	
	СтруктураВидимыеКнопки = Новый Структура;
	
	Если CRM_ИспользоватьПотенциальныхКлиентов Тогда
		
		СтруктураКнопка = Новый Структура;
		ИмяОписания = "CRM_СоздаватьПК";
		СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
		СтруктураКнопка.Вставить("Пометка", ?(НомерКнопки = 1, Истина, Ложь));
		
		СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
		
	КонецЕсли;
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "CRM_СоздаватьКлиента";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(НомерКнопки = 2, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "CRM_НеСоздаватьКлиента";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(НомерКнопки = 3, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	CRM_ОбщегоНазначенияСервер.ПокраситьКнопки(ЭтотОбъект, СтруктураВидимыеКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ЗаблокированныеОтправители(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипМессенджера", Объект.ТипМессенджера);
	
	ОткрытьФорму(
		"РегистрСведений.CRM_ЗаблокированныеОтправителиМессенджера.Форма.ФормаРедактированияБлокировок",
		ПараметрыФормы, ЭтотОбъект, КлючУникальности, , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // CRM_ЗаблокированныеОтправители()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Функция получает список пользователей.
//
// Параметры:
//	ГруппаПользователей	- СправочникСсылка	- Группа, пользователей которой нужно получить.
//
// Возвращаемое значение:
//	СписокЗначений	- Список пользователей.
//
Функция ПолучитьСписокПользователей(ГруппаПользователей = Неопределено, ВключаяВложенные = Ложь)
	мСписокПользователей = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(ГруппаПользователей)
		 И ГруппаПользователей <> Справочники.ГруппыПользователей.ВсеПользователи Тогда
		Запрос.УстановитьПараметр("Ссылка", ГруппаПользователей);
		Запрос.Текст = "ВЫБРАТЬ
           |	ГруппыПользователейСостав.Пользователь
           |ИЗ
           |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
           |ГДЕ";
		Если ВключаяВложенные Тогда
			Запрос.Текст = Запрос.Текст + "
           |	ГруппыПользователейСостав.Ссылка В ИЕРАРХИИ(&Ссылка)";
		Иначе	   
			Запрос.Текст = Запрос.Текст + "
           |	ГруппыПользователейСостав.Ссылка = &Ссылка";
		КонецЕсли;   
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
           |	Пользователи.Ссылка КАК Пользователь
           |ИЗ
           |	Справочник.Пользователи КАК Пользователи";
	КонецЕсли;				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаПользователя = мСписокПользователей.Добавить();
		СтрокаПользователя.Значение	= Выборка.Пользователь;
	КонецЦикла;
	Возврат мСписокПользователей;
КонецФункции // ПолучитьСписокПользователей() 	

&НаКлиенте
// Процедура выполняет заполнение списка пользователей на форме.
//
// Параметры:
//	мСписокПользователей	- СписокЗначений	- Список пользователей для заполнения на форме
//
Процедура ЗаполнитьСписокПользователей(мСписокПользователей)
	// Удаляем дубли из списка
	Для Каждого СтрокаСписка Из CRM_СписокПользователей Цикл
		ТекПользователь = мСписокПользователей.НайтиПоЗначению(СтрокаСписка.Пользователь);
		Если НЕ (ТекПользователь = Неопределено) Тогда 
			мСписокПользователей.Удалить(ТекПользователь);
		КонецЕсли;
	КонецЦикла;	
	// Добавляем новых пользователей в список.
	Для Каждого СтрокаСписка Из мСписокПользователей Цикл
		СтрокаПользователя = CRM_СписокПользователей.Добавить();
		СтрокаПользователя.Пользователь	= СтрокаСписка.Значение;
		СтрокаПользователя.Запись = Истина;
	КонецЦикла;	
	CRM_СписокПользователей.Сортировать("Пользователь Возр");
КонецПроцедуры // ЗаполнитьСписокПользователей()	

&НаСервере
// Функция проверяет наличие вложенных групп у группы.
//
// Параметры:
//	ГруппаПользователей	- СпрвочникСсылка	- Группа для проверки.
//
// Возвращаемое значение:
//	Булево	- Наличие вложенных групп.
//
Функция ЕстьВложенныеГруппы(ГруппаПользователей)
	Если НЕ ЗначениеЗаполнено(ГруппаПользователей) Тогда
		Возврат Ложь;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", ГруппаПользователей);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыПользователей.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ГруппыПользователей КАК ГруппыПользователей
	               |ГДЕ
	               |	ГруппыПользователей.Родитель = &Родитель";
	Выборка = Запрос.Выполнить();
	Возврат НЕ Выборка.Пустой(); 
КонецФункции // ЕстьВложенныеГруппы()

&НаСервереБезКонтекста
// Функция проверяет использование функциональной опции "ИспользоватьГруппыПользователей".
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Использование опции.
//
Функция ПолучитьИспользованиеГрупп()
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");
КонецФункции // ПолучитьИспользованиеГрупп()

&НаКлиенте
Процедура ОчиститьСписокЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		CRM_СписокПользователей.Очистить();
		Модифицированность = Истина;
	КонецЕсли;	
КонецПроцедуры // ОчиститьСписок()

&НаСервере
// Процедура заполняет таблицу пользователей учетной записи.
//
Процедура ИнициализироватьДанные()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗапись", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_УчетныеЗаписиМессенджеров.Пользователь КАК Пользователь,
	               |	CRM_УчетныеЗаписиМессенджеров.Администрирование КАК Администрирование,
	               |	CRM_УчетныеЗаписиМессенджеров.Запись КАК Запись
	               |ИЗ
	               |	РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
	               |ГДЕ
	               |	CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись = &УчетнаяЗапись";
	ВыборкаРезультатовЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультатовЗапроса.Следующий() Цикл
		СтрокаПользователя = CRM_СписокПользователей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПользователя, ВыборкаРезультатовЗапроса);
	КонецЦикла;
	CRM_СписокПользователей.Сортировать("Пользователь Возр");
КонецПроцедуры//

&НаСервере
Процедура УправлениеВидимостьюЭлементов()
	Элементы.Настройка.Заголовок = ?(СтруктураПараметровДоступа = Неопределено,
		 НСтр("ru = 'Подключить';en='Connect'"),
		 НСтр("ru = 'Изменить';en='Settings'"));
	Элементы.Отключить.Видимость = (СтруктураПараметровДоступа <> Неопределено);
	Элементы.Включена.Видимость = (СтруктураПараметровДоступа <> Неопределено);
	Элементы.Наименование.Видимость = (СтруктураПараметровДоступа <> Неопределено);
КонецПроцедуры

&НаСервере
Процедура РолеваяАдресацияПриИзмененииСервер()
	Элементы.Ответственный.Видимость = НЕ РолеваяАдресация;
	Элементы.CRM_РольОтветственного.Видимость = РолеваяАдресация;
	Если РолеваяАдресация = 0 Тогда
		Объект.CRM_РольОтветственного = Справочники.РолиИсполнителей.ПустаяСсылка();
	Иначе
		Объект.Ответственный = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПрокси(Форма)
	Если ЗначениеЗаполнено(Форма.Объект.ПроксиСервер) Тогда
		СтруктураПрокси = Новый Структура("Сервер, Порт, Пользователь, Пароль", 
			Форма.Объект.ПроксиСервер, Форма.Объект.ПроксиПорт, Форма.Объект.ПроксиПользователь, Форма.Объект.ПроксиПароль);
	Иначе
		СтруктураПрокси = Неопределено;
	КонецЕсли;
	Возврат СтруктураПрокси;
КонецФункции

&НаСервере
Процедура ЗаполнитьИспользуемыеСценарии()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СостоянияИнтересов.Ссылка КАК Ссылка,
	|	ИСТИНА КАК Пометка,
	|	СостоянияИнтересов.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.CRM_СостоянияИнтересов КАК СостоянияИнтересов
	|ГДЕ
	|	СостоянияИнтересов.Ссылка В(&Используемые)
	|	И СостоянияИнтересов.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СостоянияИнтересов.Ссылка,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.CRM_СостоянияИнтересов КАК СостоянияИнтересов
	|ГДЕ
	|	НЕ СостоянияИнтересов.Ссылка В (&Используемые)
	|	И СостоянияИнтересов.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
	|	И НЕ СостоянияИнтересов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка");
	
	Запрос.УстановитьПараметр("Используемые", Объект.CRM_Сценарии.Выгрузить().ВыгрузитьКолонку("Сценарий"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИспользуемыеСценарии.Добавить(Выборка.Ссылка, , Выборка.Пометка, ?(Выборка.ПометкаУдаления,
			 БиблиотекаКартинок.ПометитьНаУдаление,
			 Неопределено));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИспользуемыеСценарии()
	Объект.CRM_Сценарии.Очистить();
	Для каждого Элемент Из ИспользуемыеСценарии Цикл
		Если Элемент.Пометка Тогда
			НовСтр = Объект.CRM_Сценарии.Добавить();
			НовСтр.Сценарий = Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлагИсточникЛидов(Ответ, ДопПарам) Экспорт
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Объект.CRM_ИсточникЛидов = Ложь;
		Если Записать() И Открыта() Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область ПравилаОбработки

&НаКлиенте
Процедура ВидимостьПравилОбработки()
	
	Если Объект.CRM_ОбрабатыватьОбращения Тогда
		Если Объект.CRM_ПравилаОбработки.Количество() = 1 
			И Объект.CRM_ПравилаОбработки[0].УсловиеОбработки = ПредопределенноеЗначение("Справочник.CRM_УсловияОбработкиОбращений.БезУсловия") Тогда
			Элементы.ПолеПравилоОбработки.Видимость = Истина;
			Элементы.ГруппаСписокПравил.Видимость = Истина;
			Элементы.ГруппаСписокПравил.Заголовок = НСтр("ru = 'Расширенная настройка'");
		Иначе
			Элементы.ПолеПравилоОбработки.Видимость = Ложь;
			Элементы.ГруппаСписокПравил.Видимость = Истина;
			Элементы.ГруппаСписокПравил.Заголовок = НСтр("ru = 'Правила обработки'") + " (" 
				+ Объект.CRM_ПравилаОбработки.Количество() 
				+ ")";
		КонецЕсли;
	Иначе
		Элементы.ПолеПравилоОбработки.Видимость = Ложь;
		Элементы.ГруппаСписокПравил.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОбрабатыватьОбращенияПриИзменении(Элемент)
	Если Объект.CRM_ОбрабатыватьОбращения Тогда
		Если Объект.CRM_ПравилаОбработки.Количество() = 0 Тогда
			НовПравило = Объект.CRM_ПравилаОбработки.Добавить();
			НовПравило.УсловиеОбработки = ПредопределенноеЗначение("Справочник.CRM_УсловияОбработкиОбращений.БезУсловия");
		КонецЕсли;
	Иначе
		Объект.CRM_ПравилаОбработки.Очистить();
	КонецЕсли;
	ВидимостьПравилОбработки();
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПравилаОбработкиПриИзменении(Элемент)
	
	Если Объект.CRM_ПравилаОбработки.Количество() = 0 Тогда
		Объект.CRM_ОбрабатыватьОбращения = Ложь;
	КонецЕсли;
	ВидимостьПравилОбработки();
		
КонецПроцедуры

&НаКлиенте
Процедура ПолеПравилоОбработкиПриИзменении(Элемент)
	Если Объект.CRM_ОбрабатыватьОбращения
		И Объект.CRM_ПравилаОбработки.Количество() = 0 Тогда
		НовПравило = Объект.CRM_ПравилаОбработки.Добавить();
		НовПравило.УсловиеОбработки = ПредопределенноеЗначение("Справочник.CRM_УсловияОбработкиОбращений.БезУсловия");
	КонецЕсли;
	ВидимостьПравилОбработки();
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПравилаОбработкиТелефонияУсловиеОбработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.CRM_ПравилаОбработки.ТекущиеДанные;
	
	ПараметрыВвода = Новый Структура("Ключ, РежимВыбора, ИсточникОткрытияМессенджер, ПометкаУдаления",
		 ТекущаяСтрока.УсловиеОбработки, Истина, Истина,
		 Ложь);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораУсловия", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.CRM_УсловияОбработкиОбращений.Форма.ФормаВыбора", ПараметрыВвода, Элемент,
		 , , , ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПравилаОбработкиТелефонияПравилоОбработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.CRM_ПравилаОбработки.ТекущиеДанные;
	
	ПараметрыВвода = Новый Структура("Ключ, РежимВыбора, ИсточникОткрытияМессенджер, ПометкаУдаления",
		 ТекущаяСтрока.ПравилоОбработки, Истина, Истина,
		 Ложь);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораПравила", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.CRM_ПравилаОбработкиОбращений.Форма.ФормаВыбора", ПараметрыВвода, Элемент,
		 , , , ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПравилаОбработкиПравилоОбработкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.CRM_ПравилаОбработки.ТекущиеДанные;
	ОткрытьПравилоОбработки(Элемент, ТекущиеДанные.ПравилоОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПравила(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.CRM_ПравилаОбработки.ТекущиеДанные.ПравилоОбработки = Результат;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораУсловия(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.CRM_ПравилаОбработки.ТекущиеДанные.УсловиеОбработки = Результат;
КонецПроцедуры

#КонецОбласти

#Область СрокиОбработки

&НаКлиенте
Процедура СрокОбработкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Для Сч = Элемент.МинимальноеЗначение  По мин(Элемент.МаксимальноеЗначение, 59) Цикл
		Элемент.СписокВыбора.Добавить(Сч);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_СрокЖизниОбращенияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	Если Элемент.РежимВыбораИзСписка Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.РежимВыбораИзСписка = Ложь;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_СрокЖизниОбращенияПриИзменении(Элемент)
	Если Элемент.СписокВыбора.НайтиПоЗначению(Объект.CRM_СрокЖизниОбращения) <> Неопределено Тогда
		Элемент.РежимВыбораИзСписка = Истина;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_СрокЖизниОбращенияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора,
	 ПараметрыПолученияДанных,
	 СтандартнаяОбработка)
	Если Элемент.РежимВыбораИзСписка 
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Объект.CRM_СрокЖизниОбращения = Число(Текст);
		Если Элемент.СписокВыбора.НайтиПоЗначению(Объект.CRM_СрокЖизниОбращения) = Неопределено Тогда
			Элемент.РежимВыбораИзСписка = Ложь;
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолеПравилоОбработкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПравилоОбработки(Элемент, Объект.CRM_ПравилаОбработки[0].ПравилоОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПравилоОбработки(Элемент, ПравилоОбработки)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", ПравилоОбработки);
	ПараметрыФормы.Вставить("АккаунтВладелец", Объект.Ссылка);
	ОткрытьФорму("Справочник.CRM_ПравилаОбработкиОбращений.ФормаОбъекта", ПараметрыФормы, Элемент, , , , ,
	             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти
