
#Область ОписаниеПеременных

&НаКлиенте
Перем РазрешенияПолучены;

&НаКлиенте
Перем ПроверкаЗаполненияПараметрыЗаписи;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Параметры.БлокироватьВладельца Тогда
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	ДоступноПолучениеПисем = РаботаСПочтовымиСообщениямиСлужебный.НастройкиПодсистемы().ДоступноПолучениеПисем;
	// +CRM
	// Элементы.ИспользоватьУчетнуюЗапись.ОтображатьЗаголовок = ДоступноПолучениеПисем;
	Элементы.ДляПолучения.Видимость = ДоступноПолучениеПисем;
	Элементы.ОставлятьПисьмаНаСервере.Видимость = ДоступноПолучениеПисем;
	Если Не ДоступноПолучениеПисем Тогда
		Элементы.ДляОтправки.Заголовок = НСтр("ru='Использовать для отправки писем';en='Use to send emails'");
	КонецЕсли;
	Элементы.ПолучениеПисем.Доступность = ДоступноПолучениеПисем Или Объект.ТребуетсяВходНаСерверПередОтправкой;
	Элементы.ДекорацияДатаПолученияПисем.Доступность = Элементы.ПолучениеПисем.Доступность;
	Элементы.Протокол.Доступность = ДоступноПолучениеПисем;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ИспользоватьДляОтправки = Истина;
		Объект.ИспользоватьДляПолучения = ДоступноПолучениеПисем;
		ЗаполнитьНастройки();
	КонецЕсли;
	
	УдалятьПисьмаССервера = Объект.ПериодХраненияСообщенийНаСервере > 0;
	Если Не УдалятьПисьмаССервера Тогда
		Объект.ПериодХраненияСообщенийНаСервере = 10;
	КонецЕсли;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		УстановитьПривилегированныйРежим(Истина);
		ПарольУстановлен = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка) <> "";
		УстановитьПривилегированныйРежим(Ложь);
		Пароль = ?(ПарольУстановлен, УникальныйИдентификатор, "");
		ПарольИзменен = Ложь;
		РаботаСПочтовымиСообщениямиСлужебный.ОформитьПолеПароля(Элементы.Пароль);
	КонецЕсли;
	
	// +CRM
	CRM_ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ИнициализироватьДанные();
	
	ТекущийПользовательРазрешеноАдминистрирование = CRM_УправлениеЭлектроннойПочтой.ТекущийПользовательПолучитьПравоУчетнойЗаписи(Объект.Ссылка,
		 "Администрирование");
	
	Если ТекущийПользовательРазрешеноАдминистрирование И Не ПравоДоступа("Редактирование",
		 Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты) Тогда
		
		ТолькоПросмотр = Истина;
		ТекстСообщения =
			НСтр("ru = 'Недостаточно прав для редактирования справочника ""Учетные записи электронной почты"". Обратитесь к администратору.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
	ИначеЕсли Не ТекущийПользовательРазрешеноАдминистрирование Тогда
		
		ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	// Заполнить подписи для учетной записи для текущего пользователя.
	Если НЕ Объект.Ссылка.Пустая() Тогда
		МенеджерНастроек = РегистрыСведений.НастройкиУчетныхЗаписейЭлектроннойПочты.СоздатьМенеджерЗаписи();
		МенеджерНастроек.УчетнаяЗаписьЭлектроннойПочты = Объект.Ссылка;
		МенеджерНастроек.Прочитать();
		ОтветственныйЗаОбработкуПисем = МенеджерНастроек.ОтветственныйЗаОбработкуПисем;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.CRM_НастройкаСинхронизацииСВнешнимПриложением) Тогда
		Элементы.ИмяОтправителяПисем.Видимость				= Ложь;
		Элементы.АдресЭлектроннойПочты.Видимость			= Ложь;
		Объект.ИспользоватьДляОтправки 						= Ложь;
		Объект.ИспользоватьДляПолучения 					= Ложь;
		Элементы.ОтправкаПисем.Видимость 					= Ложь;
		Элементы.ПолучениеПисем.Видимость 					= Ложь;
		Элементы.ДекорацияДатаПолученияПисем.Видимость		= Ложь;
		Элементы.ПрочиеНастройки.Видимость 					= Ложь;

		Элементы.CRM_ДекорацияРазделитель3.Видимость		= Ложь;
		Элементы.CRM_ДекорацияРазделитель4.Видимость		= Ложь;

		Элементы.ДекорацияСинхронизацияOutlook.Видимость	= Истина;
	КонецЕсли;

	Элементы.ФормаЗаписатьИЗакрыть.Доступность = НЕ ТолькоПросмотр;
	Элементы.CRM_Пользователи.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ПрочиеНастройки.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.СписокПользователейГруппаЗаполнить.Доступность = НЕ ТолькоПросмотр;
	Элементы.СписокПользователейПодбор.Доступность = НЕ ТолькоПросмотр;
	Элементы.ФормаОтключить.Доступность = Не ТолькоПросмотр;
	Элементы.CRM_СписокПользователейГруппаДобавить.Доступность = НЕ ТолькоПросмотр;
	
	// -CRM
	
	ЭтоПерсональнаяУчетнаяЗапись = ЗначениеЗаполнено(Объект.ВладелецУчетнойЗаписи);
	// +CRM
	//Элементы.ПользовательУчетнойЗаписи.Доступность = ЭтоПерсональнаяУчетнаяЗапись;
	//ВидУчетнойЗаписи = ?(ЭтоПерсональнаяУчетнаяЗапись, "Персональная", "Общая");
	Если Объект.CRM_ЭтоОбщаяУчетнаяЗапись Тогда
		ВидУчетнойЗаписи = "Общая";
	Иначе
		Если ЭтоПерсональнаяУчетнаяЗапись Тогда
			ВидУчетнойЗаписи = "Персональная";
		Иначе
			ВидУчетнойЗаписи = "Групповая";
		КонецЕсли;
	КонецЕсли;
	// -CRM
	Элементы.ГруппаДляКогоУчетнаяЗапись.Доступность = Пользователи.ЭтоПолноправныйПользователь();
	Элементы.ГруппаДляКогоУчетнаяЗапись.Видимость = Элементы.ГруппаДляКогоУчетнаяЗапись.Доступность;
	ВладелецУчетнойЗаписи = Объект.ВладелецУчетнойЗаписи;
	
	Если ЗначениеЗаполнено(Объект.CRM_РольОтветственного) Тогда
		РолеваяАдресация = 1;
	КонецЕсли;
	Элементы.ОтветственныйЗаОбработкуПисем.Видимость = НЕ РолеваяАдресация;
	Элементы.CRM_РольОтветственного.Видимость = РолеваяАдресация;
	
	ПапкиЛиды = Объект.CRM_ПапкиЛиды.Выгрузить().ВыгрузитьКолонку("Папка");
	ПапкиЛидыСписок.ЗагрузитьЗначения(ПапкиЛиды);
	Если ПапкиЛидыСписок.Количество() > 0 Тогда
		ПапкиЛидыТумблер = 1;
	КонецЕсли;
	Элементы.ПапкиЛидыСписок.Видимость = ПапкиЛидыТумблер;
	Элементы.ТаблицаИспользуемыеСценарииПапки.Видимость = ПапкиЛидыТумблер;
	
	РеквизитыТребующиеВводаПароляДляИзменения =
		Справочники.УчетныеЗаписиЭлектроннойПочты.РеквизитыТребующиеВводаПароляДляИзменения();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	
	// +CRM
	CRM_ИспользоватьПотенциальныхКлиентов = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПотенциальныхКлиентов");
	
	CRM_ПокраситьКнопкиДляКогоУчетнаяЗаписьНаСервере();
	CRM_НастроитьКнопкиСоздаватьКлиентаНаСервере();
	CRM_ПокраситьКнопкиРолеваяАдресацияНаСервере();
	CRM_ПокраситьКнопкиПапкиЛидыНаСервере();
	
	НастроитьФормуПоВидуУчетнойЗаписи();
	
	Элементы.ГруппаiCRM.Видимость = ПолучитьФункциональнуюОпцию("CRM_РаботаВЛокальномРежиме")
											И ПолучитьФункциональнуюОпцию("CRM_ИспользуетсяОбменСiCRM");
	
	Элементы.ДекорацияДатаПолученияПисем.Заголовок = "";
	УстановитьНадписьДатыЗагрузки();
	
	РегистрыСведений.CRM_НастройкиСвязиОбращенийСИнтересами.ФормаИсточникаПриСозданииНаСервере(ЭтотОбъект);
	
	ЗаполнитьИспользуемыеСценарии();
	
	Если Элементы.CRM_СрокЖизниОбращения.СписокВыбора.НайтиПоЗначению(Объект.CRM_СрокЖизниОбращения) = Неопределено Тогда
		Элементы.CRM_СрокЖизниОбращения.РежимВыбораИзСписка = Ложь;
		Элементы.CRM_СрокЖизниОбращения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНадписьДатыЗагрузки()
	Если НЕ Объект.Ссылка.Пустая() Тогда
		МенеджерЗаписи = РегистрыСведений.ДатыПоследнейЗагрузкиПочтовыхСообщений.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.УчетнаяЗапись = Объект.Ссылка;
		МенеджерЗаписи.Прочитать();
		Элементы.ДекорацияДатаПолученияПисем.Заголовок = Нстр("ru = 'Дата последней загрузки: '") 
			+ ?(ЗначениеЗаполнено(МенеджерЗаписи.ДатаЗагрузкиПисем), Формат(МенеджерЗаписи.ДатаЗагрузкиПисем,
				 "ДФ='dd.MM.yyyy HH:mm'"),
				 Нстр("ru = 'не установлена'"));
	КонецЕсли;
КонецПроцедуры			

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ПарольИзменен Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, Пароль);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, Пароль, "ПарольSMTP");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// +CRM
	РегистрыСведений.CRM_НастройкиСвязиОбращенийСИнтересами.ФормаИсточникаПриЗаписи(ЭтотОбъект);
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если ВидУчетнойЗаписи = "Персональная" И Не ЗначениеЗаполнено(Объект.ВладелецУчетнойЗаписи) Тогда 
		Отказ = Истина;
		ТекстСообщения = НСтр("ru='Не выбран владелец почты.';en='Email owner is not selected.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ВладелецУчетнойЗаписи");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ПользовательSMTP = ?(ТекущийОбъект.ПриОтправкеПисемТребуетсяАвторизация
		 И Не Объект.ТребуетсяВходНаСерверПередОтправкой, ТекущийОбъект.Пользователь, "");
	ТекущийОбъект.ТребуетсяВходНаСерверПередОтправкой = ТекущийОбъект.ТребуетсяВходНаСерверПередОтправкой
		 И ТекущийОбъект.ПриОтправкеПисемТребуетсяАвторизация;
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Пароль", ПроверкаПароля);
	
	// +CRM
	ТекущийОбъект.CRM_ЭтоОбщаяУчетнаяЗапись = (ВидУчетнойЗаписи = "Общая");
	// Добавляем Текущего пользователя в СписокПользователей, если это новый элемент.
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекПользователь = ПользователиКлиентСервер.ТекущийПользователь();
		СтрокаПользователь = CRM_СписокПользователей.Добавить();
		СтрокаПользователь.Пользователь = ТекПользователь;
	КонецЕсли;
	// -CRM
	
	Если Не ТекущийОбъект.Ссылка.Пустая() И ТекущийОбъект.CRM_ИсточникЛидов
		 И (ТекущийОбъект.CRM_СрокОбработкиДней <> ТекущийОбъект.Ссылка.CRM_СрокОбработкиДней
		ИЛИ ТекущийОбъект.CRM_СрокОбработкиЧасов <> ТекущийОбъект.Ссылка.CRM_СрокОбработкиЧасов ИЛИ ТекущийОбъект.CRM_СрокОбработкиМинут <> ТекущийОбъект.Ссылка.CRM_СрокОбработкиМинут) Тогда
		CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.УправлениеСрокомОбработкиОбращений.Удобство.ИзменениеВремениОбработкиОбращенийВНастройкеУчетныхЗаписей");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемПодтверждениеПолучено", ЭтотОбъект);
// +CRM
	//ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(ОписаниеОповещения, Отказ);
	CRM_ОбщегоНазначенияКлиент.CRM_ПоказатьПодтверждениеЗакрытияФормы(ОписаниеОповещения, Отказ, ЗавершениеРаботы);
// -CRM

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗаполнитьРеквизитыОбъекта();
	ОбновитьИспользуемыеСценарии();
	ОбновитьПапкиЛиды();
	
	Если Объект.CRM_ИсточникЛидов
		И Объект.CRM_Сценарии.Количество() = 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СнятьФлагИсточникЛидов", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Не выбраны сценарии для источника лидов!
                  |Флаг ""Источник лидов"" будет снят.'"),
			РежимДиалогаВопрос.ОКОтмена);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Объект.CRM_ИсточникЛидов
		И ПапкиЛидыТумблер = 1 И ПапкиЛидыСписок.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выбраны папки-источники лидов'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,
										Элементы.ПапкиЛидыСписок, "ПапкиЛидыСписок", Отказ);
		Возврат;
	КонецЕсли;
	
	ОбработчикиПередЗаписью = Новый Массив;
	ОбработчикиПередЗаписью.Добавить(Новый ОписаниеОповещения("ПроверитьЗаполнениеПередЗаписью",
		 ЭтотОбъект,
		 ПараметрыЗаписи));
	ОбработчикиПередЗаписью.Добавить(Новый ОписаниеОповещения("ПроверитьРазрешенияПередЗаписью",
		 ЭтотОбъект,
		 ПараметрыЗаписи));
	ОбработчикиПередЗаписью.Добавить(Новый ОписаниеОповещения("ПроверитьПарольПередЗаписью", ЭтотОбъект, ПараметрыЗаписи));
	
	ПодключитьОбработчикиПередЗаписью(ОбработчикиПередЗаписью, ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(Объект.Ссылка);
	Оповестить("ОбновитьПравилаОбработкиОбращений");
	
	Если ПараметрыЗаписи.Свойство("ЗаписатьИЗакрыть") Тогда
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	ВладелецУчетнойЗаписи = Объект.ВладелецУчетнойЗаписи;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьДоступностьЭлементов();
	ВидимостьПравилОбработки();
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;

	// +CRM
	CRM_ДляОтправкиПриИзменении(Элементы.ДляОтправки);
	CRM_ДляПолученияПриИзменении(Элементы.ДляПолучения);
	CRM_ИсточникЛидовПриИзменении(Неопределено);
	ТаблицаИспользуемыеСценарииПометкаПриИзменении(Неопределено);
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПолучитьПредопределенныеПапки(ТекущийОбъект);
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// СтандартныеПодсистемы.УправлениеДоступом
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.УправлениеДоступом
	КонецЕсли;
	
	ЗаполнитьНастройки();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСпособИсправления(СпособИсправления, ДополнительныеПараметры = Неопределено) Экспорт

	Если СпособИсправления = "ВключитьИспользованиеАвторизацииSMTP" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Включите авторизацию на сервере исходящей почты.'"),
			Объект.Ссылка, , "Объект.ПриОтправкеПисемТребуетсяАвторизация");
	ИначеЕсли СпособИсправления = "Перенастроить" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для перенастройки почты нажмите на кнопку ""Перенастроить"".'"),
			Объект.Ссылка);
	ИначеЕсли СпособИсправления = "ИспользоватьSTARTTLSДляВходящейПочты" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Переключите шифрование на STARTTLS (для входящей почты).'"),
			Объект.Ссылка, "ШифрованиеПриПолученииПочты");
	ИначеЕсли СпособИсправления = "ПерезаполнитьЛогинИПароль" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Попробуйте очистить и ввести заново логин.'"),
			Объект.Ссылка, , "Объект.Пользователь");
	ИначеЕсли СпособИсправления = "ПерезаполнитьПароль" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Введите пароль.'"),
			Объект.Ссылка, "Пароль");
	ИначеЕсли СпособИсправления = "ЗаполнитьАдресПочты" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Проверьте адрес почты.'"),
			Объект.Ссылка, "Объект.АдресЭлектроннойПочты");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗагруженаИсторияПисем" И Параметр = Объект.Ссылка Тогда
		УстановитьНадписьДатыЗагрузки();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПротоколПриИзменении(Элемент)
	
	Если Объект.ПротоколВходящейПочты = "IMAP" Тогда
		Если СтрНачинаетсяС(Объект.СерверВходящейПочты, "pop.") Тогда
			Объект.СерверВходящейПочты = "imap." + Сред(Объект.СерверВходящейПочты, 5);
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(Объект.ПротоколВходящейПочты) Тогда
			Объект.ПротоколВходящейПочты = "POP";
		КонецЕсли;
		Если СтрНачинаетсяС(Объект.СерверВходящейПочты, "imap.") Тогда
			Объект.СерверВходящейПочты = "pop." + Сред(Объект.СерверВходящейПочты, 6);
		КонецЕсли;
		// +CRM
		Объект.CRM_СинхронизироватьПапкиСПочтовымСервером = Ложь;
		Объект.CRM_ОтображатьТолькоПодписанныеПапки = Ложь;
		// -CRM
	КонецЕсли;
	
	ИспользуетсяПротоколPOP = Объект.ПротоколВходящейПочты = "POP";
	УстановитьВидГруппыТребуетсяАвторизация(ЭтотОбъект, ИспользуетсяПротоколPOP);
	
	УстановитьПортВходящейПочты();
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СерверВходящейПочтыПриИзменении(Элемент)
	Объект.СерверВходящейПочты = СокрЛП(НРег(Объект.СерверВходящейПочты));
КонецПроцедуры

&НаКлиенте
Процедура СерверИсходящейПочтыПриИзменении(Элемент)
	Объект.СерверИсходящейПочты = СокрЛП(НРег(Объект.СерверИсходящейПочты));
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыПриИзменении(Элемент)
	Объект.АдресЭлектроннойПочты = СокрЛП(Объект.АдресЭлектроннойПочты);
КонецПроцедуры

&НаКлиенте
Процедура ОставлятьКопииПисемНаСервереПриИзменении(Элемент)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура УдалятьПисьмаССервераПриИзменении(Элемент)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПользовательУчетнойЗаписиПриИзменении(Элемент)
	// +CRM
	CRM_СписокПользователей.Очистить();
	НоваяСтрока = CRM_СписокПользователей.Добавить();
	НоваяСтрока.Пользователь = Объект.ВладелецУчетнойЗаписи;
	НоваяСтрока.Запись = Истина;
	// -CRM
	ОповеститьОбИзмененииВладельцаУчетнойЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяАвторизацияПриОтправкеПисемПриИзменении(Элемент)
	Элементы.АвторизацияПриОтправкеПисем1.Доступность = Объект.ПриОтправкеПисемТребуетсяАвторизация;
	Элементы.АвторизацияПриОтправкеПисем1.Видимость = Объект.ПротоколВходящейПочты = "POP";
КонецПроцедуры

&НаКлиенте
Процедура ШифрованиеПриОтправкеПочтыПриИзменении(Элемент)
	Объект.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты = ШифрованиеПриОтправкеПочты = "SSL";
	УстановитьПортИсходящейПочты();
КонецПроцедуры

&НаКлиенте
Процедура ШифрованиеПриПолученииПочтыПриИзменении(Элемент)
	Объект.ИспользоватьЗащищенноеСоединениеДляВходящейПочты = ШифрованиеПриПолученииПочты = "SSL";
	УстановитьПортВходящейПочты();
КонецПроцедуры

&НаКлиенте
Процедура СпособАвторизацииПриОтправкеПочтыПриИзменении(Элемент)
	Объект.ТребуетсяВходНаСерверПередОтправкой = ?(СпособАвторизацииПриОтправкеПочты = "POP", Истина, Ложь);
	//УстановитьВидНастройкиХраненияПисемНаСервере();
	Элементы.ПолучениеПисем.Доступность = ДоступноПолучениеПисем Или Объект.ТребуетсяВходНаСерверПередОтправкой;
	Элементы.ДекорацияДатаПолученияПисем.Доступность = Элементы.ПолучениеПисем.Доступность;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидГруппыТребуетсяАвторизация(Форма, ИспользуетсяПротоколPOP)
	
	Если ИспользуетсяПротоколPOP Тогда
		Форма.Элементы.ТребуетсяАвторизацияПриОтправкеПисем.Заголовок =
			НСтр("ru = 'При отправке писем требуется авторизация'");
	Иначе
		Форма.Элементы.ТребуетсяАвторизацияПриОтправкеПисем.Заголовок =
			НСтр("ru = 'При отправке писем требуется авторизация на сервере исходящей почты (SMTP)'");
	КонецЕсли;

	Форма.Элементы.АвторизацияПриОтправкеПисем1.Видимость = ИспользуетсяПротоколPOP;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособАутентификацииПриИзменении(Элемент)
	
	Объект.АвторизацияСПомощьюПочтовогоСервиса = ВариантАутентификации = "OAuth";
	
#Если МобильныйКлиент Тогда
	Элементы.Пароль.Видимость = Не Объект.АвторизацияСПомощьюПочтовогоСервиса;
#Иначе
	Элементы.Пароль.Доступность = Не Объект.АвторизацияСПомощьюПочтовогоСервиса;
#КонецЕсли

	Если Объект.АвторизацияСПомощьюПочтовогоСервиса Тогда
		ОткрытьФормуПомощникаНастроек(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	ПарольИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПарольИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	Элементы.Пароль.КнопкаВыбора = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПарольНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСПочтовымиСообщениямиКлиент.ПолеПароляНачалоВыбора(Элемент, Пароль, СтандартнаяОбработка);
КонецПроцедуры

// +CRM
&НаКлиенте
Процедура CRM_ДляОтправкиПриИзменении(Элемент)
	
	Для Каждого ЭлементГруппы Из Элементы.ОтправкаПисем.ПодчиненныеЭлементы Цикл
		Если ЭлементГруппы <> Элемент Тогда
			ЭлементГруппы.Доступность = Объект.ИспользоватьДляОтправки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ДляПолученияПриИзменении(Элемент)
	
	Для Каждого ЭлементГруппы Из Элементы.ПолучениеПисем.ПодчиненныеЭлементы Цикл
		Если ЭлементГруппы <> Элемент Тогда
			ЭлементГруппы.Доступность = Объект.ИспользоватьДляПолучения;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ДекорацияДатаПолученияПисем.Доступность = Объект.ИспользоватьДляПолучения;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПодписьНовогоСоздание(Элемент, СтандартнаяОбработка)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(
		"CRM_Статистика.Взаимодействия.НастройкаУчетнойЗаписи.Удобство.КоилчествоНажатийГиперссылкаНастройкаПодписей.КоличествоНажатийКнопкаПлюса");
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПодписьПриОтветеСоздание(Элемент, СтандартнаяОбработка)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(
		"CRM_Статистика.Взаимодействия.НастройкаУчетнойЗаписи.Удобство.КоилчествоНажатийГиперссылкаНастройкаПодписей.КоличествоНажатийКнопкаПлюса");
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОграничениеПоОбъемуВложенийПриИзменении(Элемент)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(
		"CRM_Статистика.Взаимодействия.НастройкаУчетнойЗаписи.Удобство.КоличествоНажатийВСтрокеОграничениеПоОбъемуВложений");
	
КонецПроцедуры

// -CRM

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыCRM_СписокПользователей

// +CRM
&НаКлиенте
Процедура CRM_СписокПользователейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры
// -CRM

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТаблицаИспользуемыеСценарии

// +CRM

&НаКлиенте
Процедура ТаблицаИспользуемыеСценарииПометкаПриИзменении(Элемент)
	
	КолвоСценариев = 0;
	
	Для каждого Элемент Из ТаблицаИспользуемыеСценарии Цикл
		Если Элемент.Пометка Тогда
			КолвоСценариев = КолвоСценариев + 1;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ГруппаИспользуемыеСценарии.Заголовок = НСтр("ru = 'Отображать лиды в сценариях'") + " (" + КолвоСценариев + ")";
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИспользуемыеСценарииПапкиНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыборПапкиЗавершение", ЭтотОбъект);
	
	ТекущиеВыбранныеПапки = Элементы.ТаблицаИспользуемыеСценарии.ТекущиеДанные.Папки;
	
	Для Каждого ПапкаСписка Из ПапкиЛидыСписок Цикл
		Если ТекущиеВыбранныеПапки.НайтиПоЗначению(ПапкаСписка.Значение) = Неопределено Тогда
			ПапкаСписка.Пометка = Ложь;
		Иначе
			ПапкаСписка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ПапкиЛидыСписок.ПоказатьОтметкуЭлементов(ОповещениеВыбора, НСтр("ru = 'Выбор папок'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПапкиЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("СписокЗначений") Тогда
		
		ПапкаОбработанные = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(Объект.Ссылка, "Обработанные");
		
		Элементы.ТаблицаИспользуемыеСценарии.ТекущиеДанные.Папки.Очистить();
		Для Каждого ПапкаСписка Из Результат Цикл
			
			Если ПапкаСписка.Пометка Тогда
				
				Если ПапкаСписка = ПапкаОбработанные Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'Нельзя использовать папку Обработанные в качестве источника обращений.'"));
					Продолжить;
				КонецЕсли;
				
				Элементы.ТаблицаИспользуемыеСценарии.ТекущиеДанные.Папки.Добавить(ПапкаСписка.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОтсортироватьПапки(МассивПапок)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПапкиЭлектронныхПисем.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	                      |ГДЕ
	                      |	ПапкиЭлектронныхПисем.Ссылка В(&МассивПапок)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ПапкиЭлектронныхПисем.РеквизитДопУпорядочивания");
	Запрос.УстановитьПараметр("МассивПапок", МассивПапок);
	
	Результат = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаИспользуемыеСценарииПапкиОчистка(Элемент, СтандартнаяОбработка)
	Элементы.ТаблицаИспользуемыеСценарии.ТекущиеДанные.Папки.Очистить();
КонецПроцедуры

////

&НаКлиенте
Процедура ПапкиЛидыСписокНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = Новый Структура("Владелец", Объект.Ссылка);
	СтруктураОтбора.Вставить("ВыбранныеПапки", ПапкиЛидыСписок);
	
	ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбора);	
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыборПапкиЛидаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ПапкиЭлектронныхПисем.Форма.CRM_ФормаВыбораДерево", ПараметрыОткрытия,
		 ЭтотОбъект, , , , ОповещениеВыбора,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПапкиЛидаЗавершение(Результат, ДопПараметры) Экспорт
	
	ПапкаОбработанные = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(Объект.Ссылка, "Обработанные");
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Массив") Тогда
		
		Если Результат.Найти(ПапкаОбработанные) <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Нельзя использовать папку Обработанные в качестве источника обращений.'"));
			Возврат;
		КонецЕсли;
		
		ПапкиЛидыСписок.ЗагрузитьЗначения(ОтсортироватьПапки(Результат));
		
	КонецЕсли;
	
	// Обновление папок отображения
	Для Каждого Стр Из ТаблицаИспользуемыеСценарии Цикл
			
		НовыеПапкиОтображения = Новый Массив;
			
		Для Каждого ПапкаЛид Из ПапкиЛидыСписок Цикл
			
			ЭлементСпискаОтображения = Стр.Папки.НайтиПоЗначению(ПапкаЛид.Значение);
			Если ЭлементСпискаОтображения <> Неопределено Тогда
				НовыеПапкиОтображения.Добавить(ЭлементСпискаОтображения.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Стр.Папки.ЗагрузитьЗначения(НовыеПапкиОтображения);
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиЛидыСписокОчистка(Элемент, СтандартнаяОбработка)
	
	ПапкиЛидыСписок.Очистить();
	Для Каждого Стр Из ТаблицаИспользуемыеСценарии Цикл
		Стр.Папки.Очистить();
	КонецЦикла;
	Модифицированность = Истина;
	
КонецПроцедуры


// -CRM

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Записать(Новый Структура("ЗаписатьИЗакрыть"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНастройки(Команда)
	ВыполнитьПроверкуНастроек();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникНастройки(Команда)
	
	ОткрытьФормуПомощникаНастроек();
	
КонецПроцедуры

// +CRM

&НаКлиенте
Процедура CRM_ОткрытьПапкиЭлектронныхПисем(Команда)
	
	СтруктураОтбора = Новый Структура("Владелец", Объект.Ссылка);
	ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбора);
	ОткрытьФорму("Справочник.ПапкиЭлектронныхПисем.Форма.CRM_ФормаСписка", ПараметрыОткрытия,
		 ЭтотОбъект, , , , ,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПравилаОбработкиЭлектроннойПочты(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(
		"CRM_Статистика.Взаимодействия.НастройкаУчетнойЗаписи.Удобство.КоличествоНажатийГиперссылкаНастройкиАвтоматическойСортировкиПисемПоПапкам");
	
	СтруктураОтбора = Новый Структура("Владелец", Объект.Ссылка);
	ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбора);
	ОткрытьФорму("Справочник.ПравилаОбработкиЭлектроннойПочты.Форма.ФормаСписка", ПараметрыОткрытия,
		 ЭтотОбъект, , , , ,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_Отменить(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура CRM_Отключить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("CRM_ОтключитьЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Заблокировать отправку и получение писем?'"),
		 РежимДиалогаВопрос.ДаНет, 60,
		 КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОтключитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ИспользоватьДляОтправки = Ложь;
	Объект.ИспользоватьДляПолучения = Ложь;
	
	Модифицированность = Истина;
	
	CRM_ДляОтправкиПриИзменении(Элементы.ДляОтправки);
	CRM_ДляПолученияПриИзменении(Элементы.ДляПолучения);
	
КонецПроцедуры

&НаКлиенте
// Процедура заполнения всеми пользователями.
//
Процедура ЗаполнитьВсемиПользователями(Команда)
	мСписокПользователей = ПолучитьСписокПользователей();
	ЗаполнитьСписокПользователей(мСписокПользователей);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура CRM_ДоступноВсем(Команда)
	
	ВидУчетнойЗаписи = "Общая";
	CRM_ПокраситьКнопкиДляКогоУчетнаяЗаписьНаСервере();
	
	Объект.CRM_РазрешитьПросмотрПисемВсемПользователям = Истина;
	
	НастроитьФормуПоВидуУчетнойЗаписи();
	
	ОповеститьОбИзмененииВладельцаУчетнойЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ДоступноПользователю(Команда)
	
	ВидУчетнойЗаписи = "Персональная";
	CRM_ПокраситьКнопкиДляКогоУчетнаяЗаписьНаСервере();
	
	НастроитьФормуПоВидуУчетнойЗаписи();
	
	ОповеститьОбИзмененииВладельцаУчетнойЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ДоступноСпискуПользователей(Команда)
	
	ВидУчетнойЗаписи = "Групповая";
	CRM_ПокраситьКнопкиДляКогоУчетнаяЗаписьНаСервере();
	
	НастроитьФормуПоВидуУчетнойЗаписи();
	
	ОповеститьОбИзмененииВладельцаУчетнойЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_Ответственный(Команда)
	
	РолеваяАдресация = 0;
	CRM_ПокраситьКнопкиРолеваяАдресацияНаСервере();
	
	РолеваяАдресацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_Роль(Команда)
	
	РолеваяАдресация = 1;
	CRM_ПокраситьКнопкиРолеваяАдресацияНаСервере();
	
	РолеваяАдресацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ДобавитьПользователяРоль(Команда)
	
	Если Команда.Имя = "CRM_ДобавитьПользователя" Тогда
		ПараметрыФормы = Новый Структура(
			"РежимВыбора,ЗакрыватьПриВыборе",
			Истина, Истина
		);
		
		ОткрытьФорму("Справочник.Пользователи.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
	ИначеЕсли Команда.Имя = "CRM_ДобавитьРоль" Тогда
		ОткрытьФорму("Справочник.РолиИсполнителей.ФормаВыбора", , ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_СоздаватьПК(Команда)
	
	Объект.CRM_ВариантАвтосозданияКлиентов =
		ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.СоздаватьПК");
	CRM_НастроитьКнопкиСоздаватьКлиентаНаСервере();
	
	Элементы.ГруппаНастройкиСозданияПартнера.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_СоздаватьКлиента(Команда)
	
	Объект.CRM_ВариантАвтосозданияКлиентов =
		ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.СоздаватьКлиента");
	CRM_НастроитьКнопкиСоздаватьКлиентаНаСервере();
	
	Элементы.ГруппаНастройкиСозданияПартнера.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_НеСоздаватьКлиента(Команда)
	
	Объект.CRM_ВариантАвтосозданияКлиентов =
		ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.НеСоздавать");
	CRM_НастроитьКнопкиСоздаватьКлиентаНаСервере();
	
	Элементы.ГруппаНастройкиСозданияПартнера.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_НастроитьАвтоответчик(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(
		"CRM_Статистика.Взаимодействия.НастройкаУчетнойЗаписи.Удобство.КоличествоНажатийГиперссылкаНастройкаАвтоответчика");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("CRM_НастроитьАвтоответчикПродолжение", ЭтотОбъект);
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
	
КонецПроцедуры // CRM_НастроитьАвтоответчик()
	
&НаКлиенте
Процедура CRM_НастроитьАвтоответчикПродолжение(Результат, ДопПараметр) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("УчетнаяЗапись", Объект.Ссылка);
	
	МассивКлючейРегистра = Новый Массив;
	МассивКлючейРегистра.Добавить(ЗначенияЗаполнения);
	
	КлючЗаписиРегистра = Новый ("РегистрСведенийКлючЗаписи.CRM_АвтоответчикПочты", МассивКлючейРегистра);
	
	Попытка
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", КлючЗаписиРегистра);
		ПараметрыФормы.Вставить("РедактированиеИзНастроек", Истина);
		
		ОткрытьФорму(
			"РегистрСведений.CRM_АвтоответчикПочты.Форма.ФормаЗаписи",
			ПараметрыФормы, ЭтотОбъект, КлючУникальности);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		
		Если Найти(ОписаниеОшибки, "Объект не найден") Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
			ПараметрыФормы.Вставить("РедактированиеИзНастроек", Истина);
			
			ОткрытьФорму(
				"РегистрСведений.CRM_АвтоответчикПочты.Форма.ФормаЗаписи",
				ПараметрыФормы, ЭтотОбъект, КлючУникальности);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры // CRM_НастроитьАвтоответчикПродолжение()

&НаКлиенте
Процедура CRM_ВсеПапкиЛиды(Команда)
	
	ПапкиЛидыТумблер = 0;
	CRM_ПокраситьКнопкиПапкиЛидыНаСервере();
	
	ПапкиЛидыТумблерПриИзмененииСервер();
	
	Элементы.ТаблицаИспользуемыеСценарииПапки.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ВыбранныеПапкиЛиды(Команда)
	
	ПапкиЛидыТумблер = 1;
	CRM_ПокраситьКнопкиПапкиЛидыНаСервере();
	
	ПапкиЛидыТумблерПриИзмененииСервер();
	
	Элементы.ТаблицаИспользуемыеСценарииПапки.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_НастройкаПодписей(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(
		"CRM_Статистика.Взаимодействия.НастройкаУчетнойЗаписи.Удобство.КоличествоНажатийГиперссылкаНастройкаПодписей");
	
	Элементы.ГруппаПодписи.Показать();
	ПодключитьОбработчикОжидания("CRM_НастройкаПодписей_Закрыть", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_НастройкаПодписей_Закрыть()
	
	Если Элементы.ГруппаПодписи.Скрыта() Тогда
		
		ТекущийЭлемент = Элементы.CRM_НастройкаПодписей;
		ОтключитьОбработчикОжидания("CRM_НастройкаПодписей_Закрыть");
		
	Иначе
		ПодключитьОбработчикОжидания("CRM_НастройкаПодписей_Закрыть", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

// -CRM

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриЗавершенииНастройки(Результат, ТолькоАвторизация) Экспорт
		
	Если ТолькоАвторизация Тогда
		Если Результат <> Истина Тогда
			Объект.АвторизацияСПомощьюПочтовогоСервиса = Ложь;
			ВариантАутентификации = "Пароль";
#Если МобильныйКлиент Тогда
			Элементы.Пароль.Видимость = Не Объект.АвторизацияСПомощьюПочтовогоСервиса;
#Иначе
			Элементы.Пароль.Доступность = Не Объект.АвторизацияСПомощьюПочтовогоСервиса;
#КонецЕсли
			ТекстПредупреждения = НСтр("ru = 'Не удалось авторизоваться на почтовом сервисе.'");
			Если ТипЗнч(Результат) = Тип("Строка") Тогда
				ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + Результат;
			КонецЕсли;
			ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройки()
	
	ИспользуетсяПротоколPOP = Объект.ПротоколВходящейПочты = "POP";
	Элементы.АвторизацияПриОтправкеПисем1.Доступность = Объект.ПриОтправкеПисемТребуетсяАвторизация;
	УстановитьВидГруппыТребуетсяАвторизация(ЭтотОбъект, ИспользуетсяПротоколPOP);
	
	ШифрованиеПриОтправкеПочты = ?(Объект.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты, "SSL", "Авто");
	ШифрованиеПриПолученииПочты = ?(Объект.ИспользоватьЗащищенноеСоединениеДляВходящейПочты, "SSL", "Авто");
	
	СпособАвторизацииПриОтправкеПочты = ?(Объект.ТребуетсяВходНаСерверПередОтправкой, "POP", "SMTP");
	Элементы.ФормаПроверитьНастройки.Доступность = Объект.ИспользоватьДляОтправки Или Объект.ИспользоватьДляПолучения;
	Элементы.ПомощникНастройки.Доступность = Не Объект.Ссылка.Пустая() И Не ТолькоПросмотр;
	
	Если Объект.АвторизацияСПомощьюПочтовогоСервиса Тогда
		ВариантАутентификации = "OAuth";
	Иначе
		ВариантАутентификации = "Пароль";
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Элементы.Пароль.Видимость = Не Объект.АвторизацияСПомощьюПочтовогоСервиса;
	Иначе
		Элементы.Пароль.Доступность = Не Объект.АвторизацияСПомощьюПочтовогоСервиса;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПортВходящейПочты()
	Если Объект.ПротоколВходящейПочты = "IMAP" Тогда
		Если Объект.ПортСервераВходящейПочты = 995 Тогда
			Объект.ПортСервераВходящейПочты = 993;
		КонецЕсли;
	Иначе
		Если Объект.ПортСервераВходящейПочты = 993 Тогда
			Объект.ПортСервераВходящейПочты = 995;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПортИсходящейПочты()
	Если Объект.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты Тогда
		Если Объект.ПортСервераИсходящейПочты = 587 Тогда
			Объект.ПортСервераИсходящейПочты = 465;
		КонецЕсли;
	Иначе
		Если Объект.ПортСервераИсходящейПочты = 465 Тогда
			Объект.ПортСервераИсходящейПочты = 587;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПодтверждениеПолучено(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Записать(Новый Структура("ЗаписатьИЗакрыть"));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	ИспользуетсяПротоколPOP = Объект.ПротоколВходящейПочты = "POP";
	Элементы.ОставлятьПисьмаНаСервере.Видимость = ИспользуетсяПротоколPOP И ДоступноПолучениеПисем;
	
	Элементы.НастройкаПериодаХраненияПисем.Доступность = Объект.ОставлятьКопииСообщенийНаСервере;
	Элементы.ПериодХраненияСообщенийНаСервере.Доступность = УдалятьПисьмаССервера;
	Элементы.ДекорацияДатаПолученияПисем.Видимость = Объект.ПротоколВходящейПочты = "IMAP";
	// +CRM
	Элементы.ГруппаСинхронизацияIMAP.Видимость = (Объект.ПротоколВходящейПочты = "IMAP");
	Элементы.CRM_НастройкаСинхронизацииПапок.Видимость = Объект.CRM_СинхронизироватьПапкиСПочтовымСервером;
	Элементы.ГруппаСинхронизацияПапокВложенная2.Видимость = Объект.CRM_СинхронизироватьПапкиСПочтовымСервером;
	Элементы.CRM_УдалятьПисьмаНаПочтовомСервере.Видимость = Объект.CRM_СинхронизироватьПапкиСПочтовымСервером;
	Элементы.CRM_ОтображатьТолькоПодписанныеПапки.Видимость = Объект.CRM_СинхронизироватьПапкиСПочтовымСервером;
	Элементы.CRM_ЗадаватьВопросПриПереносеВОбработанные.Доступность = Объект.CRM_ПереноситьВОбработанные;
	// -CRM
КонецПроцедуры

&НаСервере
Функция ЗапросыНаИспользованиеВнешнихРесурсов()
	
	Запрос = Неопределено;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
		МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
		Запрос = МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения(), Объект.Ссылка);
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Запрос);
	
КонецФункции

&НаСервере
Функция Разрешения()
	
	Результат = Новый Массив;
	
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	
	Если Объект.ИспользоватьДляОтправки Тогда
		Результат.Добавить(
			МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
				"SMTP",
				Объект.СерверИсходящейПочты,
				Объект.ПортСервераИсходящейПочты,
				НСтр("ru = 'Электронная почта.'")));
	КонецЕсли;
	
	Если Объект.ИспользоватьДляПолучения Тогда
		Результат.Добавить(
			МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
				Объект.ПротоколВходящейПочты,
				Объект.СерверВходящейПочты,
				Объект.ПортСервераВходящейПочты,
				НСтр("ru = 'Электронная почта.'")));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОбИзмененииВладельцаУчетнойЗаписи()
	Оповестить("ПриИзмененииВидаУчетнойЗаписиЭлектроннойПочты", ВидУчетнойЗаписи = "Персональная", ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Функция ПроверкаЗаполненияВыполнена(ПараметрыЗаписи)
	Если ПараметрыЗаписи.Свойство("ПроверкаЗаполненияВыполнена") Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПроверкаЗаполненияПараметрыЗаписи = ПараметрыЗаписи;
	ПодключитьОбработчикОжидания("ПроверитьЗаполнениеИЗаписать", 0.1, Истина);
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ПроверитьЗаполнениеИЗаписать()
	Если ПроверитьЗаполнение() Тогда
		ПроверкаЗаполненияПараметрыЗаписи.Вставить("ПроверкаЗаполненияВыполнена");
		Записать(ПроверкаЗаполненияПараметрыЗаписи);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуНастроек()
	Если Модифицированность Тогда
		Записать(Новый Структура("ПроверитьНастройки"));
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьСпособИсправления", ЭтотОбъект);
		ПараметрыОткрытия = Новый Структура("УчетнаяЗапись", Объект.Ссылка);
		ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.ПроверкаНастроекУчетнойЗаписи",
			ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыОбъекта()
	
	Если Не УдалятьПисьмаССервера Тогда
		Объект.ПериодХраненияСообщенийНаСервере = 0;
	КонецЕсли;
	
	Если Объект.ПротоколВходящейПочты = "IMAP" Тогда
		Объект.ОставлятьКопииСообщенийНаСервере = Истина;
		Объект.ПериодХраненияСообщенийНаСервере = 0;
	КонецЕсли;
	
	// +CRM
	//Если ВидУчетнойЗаписи = "Общая" И ЗначениеЗаполнено(Объект.ВладелецУчетнойЗаписи) Тогда
	Если (ВидУчетнойЗаписи = "Общая" Или ВидУчетнойЗаписи = "Групповая")
		 И ЗначениеЗаполнено(Объект.ВладелецУчетнойЗаписи) Тогда
	// -CRM
		Объект.ВладелецУчетнойЗаписи = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПередЗаписью(Отказ, ПараметрыЗаписи) Экспорт
	
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРазрешенияПередЗаписью(Отказ, ПараметрыЗаписи) Экспорт
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПроверкиРазрешений", ЭтотОбъект, ПараметрыЗаписи);
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
		МодульРаботаВБезопасномРежимеКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаВБезопасномРежимеКлиент");
		МодульРаботаВБезопасномРежимеКлиент.ПрименитьЗапросыНаИспользованиеВнешнихРесурсов(
			ЗапросыНаИспользованиеВнешнихРесурсов(), ЭтотОбъект, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПарольПередЗаписью(Отказ, ПараметрыЗаписи) Экспорт
	
	Если Не ПроверкаПароляВыполнена(ПараметрыЗаписи) Тогда
		Отказ = Истина;
		ПроверкаПароля = "";
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВводаПароля", ЭтотОбъект, ПараметрыЗаписи);
		ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.ПроверкаДоступаКУчетнойЗаписи", ,
			 ЭтотОбъект, , , ,
			 ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиРазрешений(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ПараметрыЗаписи.Вставить("РазрешенияПолучены");
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаПароляВыполнена(ПараметрыЗаписи)
	
	Если Не ПараметрыЗаписи.Свойство("ПарольВведен") Тогда
		ЗначенияРеквизитовПередЗаписью = Новый Структура(РеквизитыТребующиеВводаПароляДляИзменения);
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитовПередЗаписью, Объект);
		Возврат Не ТребуетсяПроверкаПароля(Объект.Ссылка, ЗначенияРеквизитовПередЗаписью);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТребуетсяПроверкаПароля(Ссылка, ЗначенияРеквизитов)
	Возврат Справочники.УчетныеЗаписиЭлектроннойПочты.ТребуетсяПроверкаПароля(Ссылка, ЗначенияРеквизитов);
КонецФункции

&НаКлиенте
Процедура ПослеВводаПароля(Пароль, ПараметрыЗаписи) Экспорт
	
	Если ТипЗнч(Пароль) = Тип("Строка") Тогда
		ПроверкаПароля = Пароль;
		ПараметрыЗаписи.Вставить("ПарольВведен");
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

// Последовательно вызывает указанные обработчики в событии ПередЗаписью через обработчик ожидания.
&НаКлиенте
Процедура ПодключитьОбработчикиПередЗаписью(Обработчики, Форма, Отказ, ПараметрыЗаписи)
	
	Если Не ПараметрыЗаписи.Свойство("ОбработчикиПередЗаписью") Тогда
		ПараметрыЗаписи.Вставить("ОбработчикиПередЗаписью", Новый Структура);
	КонецЕсли;
	
	Для Каждого Обработчик Из Обработчики Цикл
		Если Не ПараметрыЗаписи.ОбработчикиПередЗаписью.Свойство(Обработчик.ИмяПроцедуры) Тогда
			ПараметрыЗаписи.ОбработчикиПередЗаписью.Вставить(Обработчик.ИмяПроцедуры, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Проверка Из ПараметрыЗаписи.ОбработчикиПередЗаписью Цикл
		Если Проверка.Значение = Ложь Тогда
			Отказ = Истина;
			ОписаниеОповещения = Новый ОписаниеОповещения(Проверка.Ключ, Форма, ПараметрыЗаписи);
			
			ИмяПараметра = "СтандартныеПодсистемы.ОбработчикОжиданияПередЗаписьюВФорме";
			Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
				ПараметрыПриложения.Вставить(ИмяПараметра, Новый Массив);
			КонецЕсли;
			ПараметрыПриложения[ИмяПараметра].Добавить(ОписаниеОповещения);
			
			ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередЗаписьюВФорме", 0.1, Истина);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередЗаписьюВФорме()
	
	ИмяПараметра = "СтандартныеПодсистемы.ОбработчикОжиданияПередЗаписьюВФорме";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Новый Массив);
	КонецЕсли;
	ОбработчикиОжидания = ПараметрыПриложения[ИмяПараметра];
	
	Если ОбработчикиОжидания.Количество() > 0 Тогда
		ОписаниеОповещения = ОбработчикиОжидания[0];
		ИмяПроцедуры = ОбработчикиОжидания[0].ИмяПроцедуры;
		Форма = ОбработчикиОжидания[0].Модуль;
		ПараметрыЗаписи = ОбработчикиОжидания[0].ДополнительныеПараметры;
		ОбработчикиОжидания.Удалить(0);
		ПараметрыЗаписи.ОбработчикиПередЗаписью[ИмяПроцедуры] = Истина;
		Отказ = Ложь;
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Отказ);
		Если Не Отказ Тогда
			Форма.Записать(ПараметрыЗаписи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПомощникаНастроек(ТолькоАвторизация = Ложь)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииНастройки", ЭтотОбъект, ТолькоАвторизация);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", Объект.Ссылка);
	Если ТолькоАвторизация Тогда
		ПараметрыОткрытия.Вставить("ТолькоАвторизация", Истина);
	Иначе
		ПараметрыОткрытия.Вставить("Перенастройка", Истина);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.CRM_ПомощникНастройкиУчетнойЗаписи", 
		ПараметрыОткрытия, , , , , ОписаниеОповещения);
		
КонецПроцедуры

// +CRM
#Область CRM

&НаКлиенте
Процедура CRM_ПереноситьВОбработанныеПриИзменении(Элемент)	
	
	Элементы.CRM_ЗадаватьВопросПриПереносеВОбработанные.Доступность = Объект.CRM_ПереноситьВОбработанные;
	
	Если НЕ Объект.CRM_ПереноситьВОбработанные Тогда
		Объект.CRM_ЗадаватьВопросПриПереносеВОбработанные = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция получает список пользователей.
//
// Параметры:
//	ГруппаПользователей	- СправочникСсылка	- Группа, пользователей которой нужно получить.
//
// Возвращаемое значение:
//	СписокЗначений	- Список пользователей.
//
Функция ПолучитьСписокПользователей(ГруппаПользователей = Неопределено, ВключаяВложенные = Ложь)
	мСписокПользователей = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(ГруппаПользователей)
		 И ГруппаПользователей <> Справочники.ГруппыПользователей.ВсеПользователи Тогда
		Запрос.УстановитьПараметр("Ссылка", ГруппаПользователей);
		Запрос.Текст = "ВЫБРАТЬ
           |	ГруппыПользователейСостав.Пользователь
           |ИЗ
           |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
           |ГДЕ";
		Если ВключаяВложенные Тогда
			Запрос.Текст = Запрос.Текст + "
           |	ГруппыПользователейСостав.Ссылка В ИЕРАРХИИ(&Ссылка)";
		Иначе	   
			Запрос.Текст = Запрос.Текст + "
           |	ГруппыПользователейСостав.Ссылка = &Ссылка";
		КонецЕсли;   
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
           |	Пользователи.Ссылка КАК Пользователь
           |ИЗ
           |	Справочник.Пользователи КАК Пользователи";
	КонецЕсли;				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаПользователя = мСписокПользователей.Добавить();
		СтрокаПользователя.Значение	= Выборка.Пользователь;
	КонецЦикла;
	Возврат мСписокПользователей;
КонецФункции // ПолучитьСписокПользователей() 	

&НаКлиенте
// Процедура выполняет заполнение списка пользователей на форме.
//
// Параметры:
//	мСписокПользователей	- СписокЗначений	- Список пользователей для заполнения на форме
//
Процедура ЗаполнитьСписокПользователей(мСписокПользователей)
	// Удаляем дубли из списка
	Для Каждого СтрокаСписка Из CRM_СписокПользователей Цикл
		ТекПользователь = мСписокПользователей.НайтиПоЗначению(СтрокаСписка.Пользователь);
		Если НЕ (ТекПользователь = Неопределено) Тогда 
			мСписокПользователей.Удалить(ТекПользователь);
		КонецЕсли;
	КонецЦикла;	
	// Добавляем новых пользователей в список.
	Для Каждого СтрокаСписка Из мСписокПользователей Цикл
		СтрокаПользователя = CRM_СписокПользователей.Добавить();
		СтрокаПользователя.Пользователь	= СтрокаСписка.Значение;
		СтрокаПользователя.Запись = Истина;
	КонецЦикла;	
	CRM_СписокПользователей.Сортировать("Пользователь Возр");
КонецПроцедуры // ЗаполнитьСписокПользователей()	

&НаСервере
// Функция проверяет наличие вложенных групп у группы.
//
// Параметры:
//	ГруппаПользователей	- СпрвочникСсылка	- Группа для проверки.
//
// Возвращаемое значение:
//	Булево	- Наличие вложенных групп.
//
Функция ЕстьВложенныеГруппы(ГруппаПользователей)
	Если НЕ ЗначениеЗаполнено(ГруппаПользователей) Тогда
		Возврат Ложь;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", ГруппаПользователей);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыПользователей.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ГруппыПользователей КАК ГруппыПользователей
	               |ГДЕ
	               |	ГруппыПользователей.Родитель = &Родитель";
	Выборка = Запрос.Выполнить();
	Возврат НЕ Выборка.Пустой(); 
КонецФункции // ЕстьВложенныеГруппы()

&НаСервереБезКонтекста
// Функция проверяет использование функциональной опции "ИспользоватьГруппыПользователей".
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Использование опции.
//
Функция ПолучитьИспользованиеГрупп()
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");
КонецФункции // ПолучитьИспользованиеГрупп()
	
&НаКлиенте
// Процедура заполнения по группе пользователей.
//
Процедура ЗаполнитьПоГруппеПользователей(Команда)
	ИспользоватьГруппы = ПолучитьИспользованиеГрупп();
	Если НЕ ИспользоватьГруппы Тогда
		ПоказатьПредупреждение(, "Отключена настройка ""Использовать группы пользователей""");
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоГруппеПользователейПродолжение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ГруппыПользователей.ФормаВыбораГруппы", ПараметрыФормы, ЭтотОбъект, , , ,
		 ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГруппеПользователейПродолжение(ГруппаПользователей, ДополнительныеПараметры) Экспорт
	Если ГруппаПользователей <> Неопределено Тогда
		ВключаяВложенные = ЕстьВложенныеГруппы(ГруппаПользователей);
		Если ВключаяВложенные Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоГруппеПользователейЗавершение",
				 ЭтотОбъект,
				 ГруппаПользователей);
			ПоказатьВопрос(ОписаниеОповещения, "Загрузить также пользователей вложенных групп?", РежимДиалогаВопрос.ДаНет, 0);
		Иначе
			ЗаполнитьПоГруппеПользователейЗавершение(Неопределено, ГруппаПользователей);
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГруппеПользователейЗавершение(Ответ, ГруппаПользователей) Экспорт
	Если Ответ  = КодВозвратаДиалога.Да Тогда
		ВключаяВложенные = Истина;
	Иначе	
		ВключаяВложенные = Ложь;
	КонецЕсли;			
	мСписокПользователей = ПолучитьСписокПользователей(ГруппаПользователей, ВключаяВложенные);
	ЗаполнитьСписокПользователей(мСписокПользователей);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
// Процедура очистки списка пользователей.
//
Процедура ОчиститьСписок(Команда)
	ТД = Элементы.CRM_СписокПользователей.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьСписокЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Все пользователи из списка будут удалены. Продолжить?",
		 РежимДиалогаВопрос.ДаНет,
		 0);
КонецПроцедуры // ОчиститьСписок()

&НаКлиенте
Процедура ОчиститьСписокЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		CRM_СписокПользователей.Очистить();
		Модифицированность = Истина;
	КонецЕсли;	
КонецПроцедуры // ОчиститьСписок()

&НаКлиенте
// Процедура заполнения подбором.
//
Процедура Подбор(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",				Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",		Истина);
	ПараметрыФормы.Вставить("ВыборГруппПользователей",	Ложь);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",		Ложь);
	ФормаПодбора = ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// СтандартныеПодсистемы.УправлениеДоступом
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.УправлениеДоступом
	КонецЕсли;
	
	НаборРегистра = РегистрыСведений.CRM_УчетныеЗаписиЭлектроннойПочты.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.УчетнаяЗапись.Установить(Объект.Ссылка);
	НаборРегистра.Прочитать();
	ТаблицаНабора = НаборРегистра.Выгрузить();
	НаборРегистра.Очистить();
	// Запишем данные о пользователях учетной записи в регистр.
	Для Каждого СтрокаПользователя Из CRM_СписокПользователей Цикл
		СтрокаНабора = НаборРегистра.Добавить();
		СтрокаНабора.УчетнаяЗапись	= Объект.Ссылка;
		СтрокаНабора.Пользователь	= СтрокаПользователя.Пользователь;
		СтрокаНабора.Запись			= СтрокаПользователя.Запись;
		СтрокаНабора.Администрирование	= СтрокаПользователя.Администрирование;
		СтрокаТаблицыНабора = ТаблицаНабора.Найти(Объект.Ссылка, "УчетнаяЗапись");
		СтрокаНабора.Основная = ?(СтрокаТаблицыНабора = Неопределено, Ложь, СтрокаТаблицыНабора.Основная);
	КонецЦикла;
	Если CRM_СписокПользователей.Количество() = 1 Тогда
		СтрокаНабора.Администрирование	= Истина;
	КонецЕсли;
	НаборРегистра.Записать();
	
	МенеджерНастроек = РегистрыСведений.НастройкиУчетныхЗаписейЭлектроннойПочты.СоздатьМенеджерЗаписи();
	МенеджерНастроек.УчетнаяЗаписьЭлектроннойПочты = Объект.Ссылка;
	МенеджерНастроек.Прочитать();
	Если МенеджерНастроек.ОтветственныйЗаОбработкуПисем <> ОтветственныйЗаОбработкуПисем Тогда
		МенеджерНастроек.УчетнаяЗаписьЭлектроннойПочты = Объект.Ссылка;
		МенеджерНастроек.ОтветственныйЗаОбработкуПисем = ОтветственныйЗаОбработкуПисем;
		МенеджерНастроек.Записать(Истина);
	КонецЕсли;	
	
	УстановитьПредпределенныеПапки(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура заполняет таблицу пользователей учетной записи.
//
Процедура ИнициализироватьДанные()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗапись", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь КАК Пользователь,
	               |	CRM_УчетныеЗаписиЭлектроннойПочты.Администрирование КАК Администрирование,
	               |	CRM_УчетныеЗаписиЭлектроннойПочты.Запись КАК Запись
	               |ИЗ
	               |	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
	               |ГДЕ
	               |	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись = &УчетнаяЗапись";
	ВыборкаРезультатовЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультатовЗапроса.Следующий() Цикл
		СтрокаПользователя = CRM_СписокПользователей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПользователя, ВыборкаРезультатовЗапроса);
	КонецЦикла;
	CRM_СписокПользователей.Сортировать("Пользователь Возр");
КонецПроцедуры//

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТекущийЭлемент.Имя = Элементы.CRM_СписокПользователей.Имя
		И ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		мСписокПользователей = Новый СписокЗначений;
		мСписокПользователей.ЗагрузитьЗначения(ВыбранноеЗначение);
		ЗаполнитьСписокПользователей(мСписокПользователей);
		Модифицированность = Истина;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		мСписокПользователей = Новый СписокЗначений;
		мСписокПользователей.Добавить(ВыбранноеЗначение);
		ЗаполнитьСписокПользователей(мСписокПользователей);
		Модифицированность = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура РолеваяАдресацияПриИзмененииСервер()
	Элементы.ОтветственныйЗаОбработкуПисем.Видимость = НЕ РолеваяАдресация;
	Элементы.CRM_РольОтветственного.Видимость = РолеваяАдресация;
	Если РолеваяАдресация = 0 Тогда
		Объект.CRM_РольОтветственного = Справочники.РолиИсполнителей.ПустаяСсылка();
	Иначе
		Объект.CRM_Ответственный = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПапкиЛидыТумблерПриИзмененииСервер()
	
	Элементы.ПапкиЛидыСписок.Видимость = ПапкиЛидыТумблер;
	
	Если ПапкиЛидыТумблер = 0 Тогда
		ПапкиЛидыСписок.Очистить();
		Для Каждого Стр Из ТаблицаИспользуемыеСценарии Цикл
			Стр.Папки.Очистить();
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_СписокПользователейПользовательПриИзменении(Элемент)
	Если CRM_СписокПользователей.Количество() = 1 Тогда
		CRM_СписокПользователей[0].Запись = Истина;
		CRM_СписокПользователей[0].Администрирование = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоВидуУчетнойЗаписи()
	
	Если ВидУчетнойЗаписи = "Общая" Тогда
		Элементы.CRM_Пользователи.Видимость = Ложь;
		Элементы.ПользовательУчетнойЗаписи.Видимость = Ложь;
	ИначеЕсли ВидУчетнойЗаписи = "Персональная" Тогда
		Элементы.CRM_Пользователи.Видимость = Ложь;
		Элементы.ПользовательУчетнойЗаписи.Видимость = Истина;
	ИначеЕсли ВидУчетнойЗаписи = "Групповая" Тогда
		Элементы.CRM_Пользователи.Видимость = Истина;
		Элементы.ПользовательУчетнойЗаписи.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура CRM_ПокраситьКнопкиДляКогоУчетнаяЗаписьНаСервере()
	
	НомерКнопки = 1;
	
	Если ВидУчетнойЗаписи = "Общая" Тогда
		НомерКнопки = 1;
	ИначеЕсли ВидУчетнойЗаписи = "Персональная" Тогда
		НомерКнопки = 2;
	ИначеЕсли ВидУчетнойЗаписи = "Групповая" Тогда
		НомерКнопки = 3;
	КонецЕсли;
	
	СтруктураВидимыеКнопки = Новый Структура;
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "CRM_ДоступноВсем";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(НомерКнопки = 1, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "CRM_ДоступноПользователю";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(НомерКнопки = 2, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "CRM_ДоступноСпискуПользователей";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(НомерКнопки = 3, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	CRM_ОбщегоНазначенияСервер.ПокраситьКнопки(ЭтотОбъект, СтруктураВидимыеКнопки);
	
КонецПроцедуры

&НаСервере
Процедура CRM_ПокраситьКнопкиРолеваяАдресацияНаСервере()
	
	НомерКнопки = 1;
	
	Если РолеваяАдресация = 0 Тогда
		НомерКнопки = 1;
	ИначеЕсли РолеваяАдресация = 1 Тогда
		НомерКнопки = 2;
	КонецЕсли;
	
	СтруктураВидимыеКнопки = Новый Структура;
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "CRM_Ответственный";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(НомерКнопки = 1, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "CRM_Роль";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(НомерКнопки = 2, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	CRM_ОбщегоНазначенияСервер.ПокраситьКнопки(ЭтотОбъект, СтруктураВидимыеКнопки);
	
КонецПроцедуры

&НаСервере
Процедура CRM_ПокраситьКнопкиПапкиЛидыНаСервере()
	
	НомерКнопки = 1;
	
	Если ПапкиЛидыТумблер = 0 Тогда
		НомерКнопки = 1;
	ИначеЕсли ПапкиЛидыТумблер = 1 Тогда
		НомерКнопки = 2;
	КонецЕсли;
	
	СтруктураВидимыеКнопки = Новый Структура;
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ВсеПапкиЛиды";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(НомерКнопки = 1, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ВыбранныеПапкиЛиды";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(НомерКнопки = 2, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	CRM_ОбщегоНазначенияСервер.ПокраситьКнопки(ЭтотОбъект, СтруктураВидимыеКнопки);
	
КонецПроцедуры

&НаСервере
Процедура CRM_НастроитьКнопкиСоздаватьКлиентаНаСервере()
	
	// Установить видимость
	
	Элементы.CRM_СоздаватьПК.Видимость = CRM_ИспользоватьПотенциальныхКлиентов;
	Элементы.ГруппаНастройкиСозданияПартнера.Видимость =
		(Объект.CRM_ВариантАвтосозданияКлиентов = Перечисления.CRM_ВариантыАвтосозданияКлиентов.СоздаватьКлиента);
	Элементы.CRM_ПартнерГруппа.Видимость = CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM();
	
	Если CRM_ИспользоватьПотенциальныхКлиентов Тогда
		Элементы.ДекорацияПодсказкаСозданиеПартнера.Подсказка = НСтр("ru = 'При обращении от неизвестного контакта,
			| создавать потенциального клиента,
                                                        |клиента, либо не сохранять контакт.'");
	КонецЕсли;
	
	// Покрасить кнопки
	
	НомерКнопки = ?(CRM_ИспользоватьПотенциальныхКлиентов, 1, 2);
	
	Если Объект.CRM_ВариантАвтосозданияКлиентов = ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.СоздаватьПК") Тогда
		НомерКнопки = 1;
	ИначеЕсли Объект.CRM_ВариантАвтосозданияКлиентов = ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.СоздаватьКлиента") Тогда
		НомерКнопки = 2;
	ИначеЕсли Объект.CRM_ВариантАвтосозданияКлиентов = ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.НеСоздавать") Тогда
		НомерКнопки = 3;
	КонецЕсли;
	
	СтруктураВидимыеКнопки = Новый Структура;
	
	Если CRM_ИспользоватьПотенциальныхКлиентов Тогда
		
		СтруктураКнопка = Новый Структура;
		ИмяОписания = "CRM_СоздаватьПК";
		СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
		СтруктураКнопка.Вставить("Пометка", ?(НомерКнопки = 1, Истина, Ложь));
		
		СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
		
	КонецЕсли;
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "CRM_СоздаватьКлиента";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(НомерКнопки = 2, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "CRM_НеСоздаватьКлиента";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(НомерКнопки = 3, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	CRM_ОбщегоНазначенияСервер.ПокраситьКнопки(ЭтотОбъект, СтруктураВидимыеКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДатаПолученияПисемНажатие(Элемент)
	Подсказка = "Введите дату и время";
	ЧастьДаты = ЧастиДаты.ДатаВремя;
	ДатаПолучения = ПоследняяДатаПолученияПисьма(Объект.Ссылка);
	Оповещение = Новый ОписаниеОповещения("ПослеВводаДаты", ЭтотОбъект);
	ПоказатьВводДаты(Оповещение, ДатаПолучения, Подсказка, ЧастьДаты);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоследняяДатаПолученияПисьма(СсылкаНаОбъект)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ДатаЗагрузкиПисем 
		|ИЗ РегистрСведений.ДатыПоследнейЗагрузкиПочтовыхСообщений 
		|ГДЕ УчетнаяЗапись = &ЭтаСсылка");
	Запрос.УстановитьПараметр("ЭтаСсылка", СсылкаНаОбъект);
	Результат = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Результат.Следующий(), Результат.ДатаЗагрузкиПисем, ТекущаяДатаСеанса());
	
КонецФункции

&НаКлиенте
Процедура ПослеВводаДаты(Дата, Параметр2) Экспорт
	Если НЕ Дата = Неопределено Тогда
		CRM_УправлениеЭлектроннойПочтой.УстановитьДатуПоследнейЗагрузкиПисем(Объект.Ссылка, Дата);
		Элементы.ДекорацияДатаПолученияПисем.Заголовок = Нстр("ru = 'Дата последней загрузки: '") 
			+ ?(ЗначениеЗаполнено(Дата), Формат(Дата, "ДФ='dd.MM.yyyy HH:mm'"), Нстр("ru = 'не установлена'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_НастройкаСинхронизацииПапок(Команда)
	ОткрытьФорму("Справочник.ПапкиЭлектронныхПисем.Форма.CRM_ФормаСинхронизацииПапок", 
		Новый Структура("УчетнаяЗапись", Объект.Ссылка), ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура CRM_СинхронизироватьПапкиСПочтовымСерверомПриИзменении(Элемент)
	Элементы.CRM_НастройкаСинхронизацииПапок.Видимость = Объект.CRM_СинхронизироватьПапкиСПочтовымСервером;
	Элементы.CRM_ОтображатьТолькоПодписанныеПапки.Видимость = Объект.CRM_СинхронизироватьПапкиСПочтовымСервером;
	Элементы.ГруппаСинхронизацияПапокВложенная2.Видимость = Объект.CRM_СинхронизироватьПапкиСПочтовымСервером;
	Элементы.CRM_УдалятьПисьмаНаПочтовомСервере.Видимость = Объект.CRM_СинхронизироватьПапкиСПочтовымСервером;
	Если НЕ Объект.CRM_СинхронизироватьПапкиСПочтовымСервером Тогда
		Объект.CRM_ОтображатьТолькоПодписанныеПапки = Ложь;
	Иначе	
		CRM_НастройкаСинхронизацииПапок(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьПредопределенныеПапки(ТекущийОбъект)
	
	ПапкаВходящие = РегистрыСведений.CRM_ПапкиУчетныхЗаписей.ПолучитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.CRM_ВидыПапокЭлектроннойПочты.Входящие);
	
	ПапкаОбработанные = РегистрыСведений.CRM_ПапкиУчетныхЗаписей.ПолучитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.CRM_ВидыПапокЭлектроннойПочты.Обработанные);
	
	ПапкаИсходящие = РегистрыСведений.CRM_ПапкиУчетныхЗаписей.ПолучитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.CRM_ВидыПапокЭлектроннойПочты.Исходящие);
	
	ПапкаОтправленные = РегистрыСведений.CRM_ПапкиУчетныхЗаписей.ПолучитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.CRM_ВидыПапокЭлектроннойПочты.Отправленные);
	
	ПапкаЧерновики = РегистрыСведений.CRM_ПапкиУчетныхЗаписей.ПолучитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.CRM_ВидыПапокЭлектроннойПочты.Черновики);
	
	ПапкаУдаленные = РегистрыСведений.CRM_ПапкиУчетныхЗаписей.ПолучитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.CRM_ВидыПапокЭлектроннойПочты.Удаленные);
	
	ПапкаНежелательные = РегистрыСведений.CRM_ПапкиУчетныхЗаписей.ПолучитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.CRM_ВидыПапокЭлектроннойПочты.НежелательнаяПочта);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредпределенныеПапки(ТекущийОбъект)
	
	РегистрыСведений.CRM_ПапкиУчетныхЗаписей.УстановитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.CRM_ВидыПапокЭлектроннойПочты.Входящие,
		ПапкаВходящие);
	
	РегистрыСведений.CRM_ПапкиУчетныхЗаписей.УстановитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.CRM_ВидыПапокЭлектроннойПочты.Обработанные,
		ПапкаОбработанные);
	
	РегистрыСведений.CRM_ПапкиУчетныхЗаписей.УстановитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.CRM_ВидыПапокЭлектроннойПочты.Исходящие,
		ПапкаИсходящие);
	
	РегистрыСведений.CRM_ПапкиУчетныхЗаписей.УстановитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.CRM_ВидыПапокЭлектроннойПочты.Отправленные,
		ПапкаОтправленные);
	
	РегистрыСведений.CRM_ПапкиУчетныхЗаписей.УстановитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.CRM_ВидыПапокЭлектроннойПочты.Черновики,
		ПапкаЧерновики);
	
	РегистрыСведений.CRM_ПапкиУчетныхЗаписей.УстановитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.CRM_ВидыПапокЭлектроннойПочты.Удаленные,
		ПапкаУдаленные);
	
	РегистрыСведений.CRM_ПапкиУчетныхЗаписей.УстановитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.CRM_ВидыПапокЭлектроннойПочты.НежелательнаяПочта,
		ПапкаНежелательные);
	
КонецПроцедуры

#КонецОбласти

#Область ПравилаОбработки

&НаКлиенте
Процедура ВидимостьПравилОбработки()
	
	Если Объект.CRM_ОбрабатыватьОбращения Тогда
		Если Объект.CRM_ПравилаОбработки.Количество() = 1 
			И Объект.CRM_ПравилаОбработки[0].УсловиеОбработки = ПредопределенноеЗначение("Справочник.CRM_УсловияОбработкиОбращений.БезУсловия") Тогда
			Элементы.ПолеПравилоОбработки.Видимость = Истина;
			Элементы.ГруппаСписокПравил.Видимость = Истина;
			Элементы.ГруппаСписокПравил.Заголовок = НСтр("ru = 'Расширенная настройка'");
		Иначе
			Элементы.ПолеПравилоОбработки.Видимость = Ложь;
			Элементы.ГруппаСписокПравил.Видимость = Истина;
			Элементы.ГруппаСписокПравил.Заголовок = НСтр("ru = 'Правила обработки'") + " (" 
				+ Объект.CRM_ПравилаОбработки.Количество() 
				+ ")";
		КонецЕсли;
	Иначе
		Элементы.ПолеПравилоОбработки.Видимость = Ложь;
		Элементы.ГруппаСписокПравил.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОбрабатыватьОбращенияПриИзменении(Элемент)
	Если Объект.CRM_ОбрабатыватьОбращения Тогда
		Если Объект.CRM_ПравилаОбработки.Количество() = 0 Тогда
			НовПравило = Объект.CRM_ПравилаОбработки.Добавить();
			НовПравило.УсловиеОбработки = ПредопределенноеЗначение("Справочник.CRM_УсловияОбработкиОбращений.БезУсловия");
		КонецЕсли;
	Иначе
		Объект.CRM_ПравилаОбработки.Очистить();
	КонецЕсли;
	ВидимостьПравилОбработки();
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПравилаОбработкиПриИзменении(Элемент)
	
	Если Объект.CRM_ПравилаОбработки.Количество() = 0 Тогда
		Объект.CRM_ОбрабатыватьОбращения = Ложь;
	КонецЕсли;
	ВидимостьПравилОбработки();
		
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИсточникЛидовПриИзменении(Элемент)
	Элементы.CRM_УказыватьПричинуОтклонения.Видимость = Объект.CRM_ИсточникЛидов;
	Элементы.ГруппаИспользуемыеСценарии.Видимость = Объект.CRM_ИсточникЛидов;
	Элементы.ГруппаСрокОбработки.Видимость = Объект.CRM_ИсточникЛидов;
	Элементы.ГруппаСрокЖизни.Видимость = Объект.CRM_ИсточникЛидов;
	
	Элементы.CRM_ТумблерПапкиЛиды.Видимость = Объект.CRM_ИсточникЛидов;
	Элементы.ПапкиЛидыСписок.Видимость = (Объект.CRM_ИсточникЛидов
											И Объект.CRM_ПапкиЛиды.Количество() > 0);
	
	Если Элемент <> Неопределено 
		И Объект.CRM_ИсточникЛидов 
		И Не ЗначениеЗаполнено(Объект.CRM_СрокЖизниОбращения) Тогда
		Объект.CRM_СрокЖизниОбращения = 30;
	КонецЕсли;
	Если Элемент <> Неопределено И НЕ Объект.CRM_ИсточникЛидов Тогда
		Объект.CRM_УказыватьПричинуОтклонения = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИспользуемыеСценарии()

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПапкиСценариев.Сценарий КАК Сценарий,
	                      |	ПапкиСценариев.Папка КАК Папка
	                      |ПОМЕСТИТЬ ПапкиСценариев
	                      |ИЗ
	                      |	&ПапкиСценариев КАК ПапкиСценариев
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	CRM_СостоянияИнтересов.Ссылка КАК Сценарий,
	                      |	ВЫБОР
	                      |		КОГДА ПапкиСценариев.Сценарий ЕСТЬ NULL
	                      |			ТОГДА ЛОЖЬ
	                      |		ИНАЧЕ ИСТИНА
	                      |	КОНЕЦ КАК Пометка,
	                      |	CRM_СостоянияИнтересов.ПометкаУдаления КАК ПометкаУдаления,
	                      |	ПапкиСценариев.Папка КАК Папка
	                      |ИЗ
	                      |	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ПапкиСценариев КАК ПапкиСценариев
	                      |		ПО CRM_СостоянияИнтересов.Ссылка = ПапкиСценариев.Сценарий
	                      |ГДЕ
	                      |	CRM_СостоянияИнтересов.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
	                      |	И НЕ CRM_СостоянияИнтересов.ПометкаУдаления
	                      |	И ВЫБОР
	                      |			КОГДА &ИспользоватьПоддержку
	                      |				ТОГДА ИСТИНА
	                      |			ИНАЧЕ НЕ CRM_СостоянияИнтересов.ЭтоПоддержка
	                      |		КОНЕЦ
	                      |ИТОГИ
	                      |	МАКСИМУМ(Пометка)
	                      |ПО
	                      |	Сценарий");
	
	Запрос.УстановитьПараметр("ПапкиСценариев", Объект.CRM_Сценарии.Выгрузить());
	Запрос.УстановитьПараметр("ИспользоватьПоддержку", ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПоддержку"));
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		НС = ТаблицаИспользуемыеСценарии.Добавить();
		НС.Сценарий = Выборка.Сценарий;
		НС.Пометка = Выборка.Пометка;
		
		ВыборкаПапки = Выборка.Выбрать();
		Пока ВыборкаПапки.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаПапки.Папка) Тогда
				НС.Папки.Добавить(ВыборкаПапки.Папка);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИспользуемыеСценарии()
	
	Объект.CRM_Сценарии.Очистить();
	
	Для каждого Стр Из ТаблицаИспользуемыеСценарии Цикл
		
		Если Стр.Пометка Тогда
			
			Если Стр.Папки.Количество() = 0 Тогда
				НовСтр = Объект.CRM_Сценарии.Добавить();
				НовСтр.Сценарий = Стр.Сценарий;
			Иначе
				Для Каждого ЭлементСпискаПапок Из Стр.Папки Цикл
					НовСтр = Объект.CRM_Сценарии.Добавить();
					НовСтр.Сценарий = Стр.Сценарий;
					НовСтр.Папка = ЭлементСпискаПапок.Значение;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПапкиЛиды()
	
	Объект.CRM_ПапкиЛиды.Очистить();
	
	Для Каждого ПапкаЛид Из ПапкиЛидыСписок Цикл
		НС = Объект.CRM_ПапкиЛиды.Добавить();
		НС.Папка = ПапкаЛид.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлагИсточникЛидов(Ответ, ДопПарам) Экспорт
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Объект.CRM_ИсточникЛидов = Ложь;
		Если Записать() Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПравилаОбработкиТелефонияУсловиеОбработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.CRM_ПравилаОбработки.ТекущиеДанные;
	
	ПараметрыВвода = Новый Структура("Ключ, РежимВыбора, ИсточникОткрытияПочта, ПометкаУдаления",
		 ТекущаяСтрока.УсловиеОбработки, Истина, Истина,
		 Ложь);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораУсловия", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.CRM_УсловияОбработкиОбращений.Форма.ФормаВыбора", ПараметрыВвода, Элемент,
		 , , , ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПравилаОбработкиТелефонияПравилоОбработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.CRM_ПравилаОбработки.ТекущиеДанные;
	
	ПараметрыВвода = Новый Структура("Ключ, РежимВыбора, ИсточникОткрытияПочта, ПометкаУдаления",
		 ТекущаяСтрока.ПравилоОбработки, Истина, Истина,
		 Ложь);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораПравила", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.CRM_ПравилаОбработкиОбращений.Форма.ФормаВыбора", ПараметрыВвода, Элемент,
		 , , , ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПравилаОбработкиПравилоОбработкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.CRM_ПравилаОбработки.ТекущиеДанные;
	ОткрытьПравилоОбработки(Элемент, ТекущиеДанные.ПравилоОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПравила(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.CRM_ПравилаОбработки.ТекущиеДанные.ПравилоОбработки = Результат;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораУсловия(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.CRM_ПравилаОбработки.ТекущиеДанные.УсловиеОбработки = Результат;
КонецПроцедуры

#КонецОбласти

#Область СрокиОбработки

&НаКлиенте
Процедура СрокОбработкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Для Сч = Элемент.МинимальноеЗначение  По мин(Элемент.МаксимальноеЗначение, 59) Цикл
		Элемент.СписокВыбора.Добавить(Сч);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_СрокЖизниОбращенияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	Если Элемент.РежимВыбораИзСписка Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.РежимВыбораИзСписка = Ложь;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_СрокЖизниОбращенияПриИзменении(Элемент)
	Если Элемент.СписокВыбора.НайтиПоЗначению(Объект.CRM_СрокЖизниОбращения) <> Неопределено Тогда
		Элемент.РежимВыбораИзСписка = Истина;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_СрокЖизниОбращенияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора,
	 ПараметрыПолученияДанных,
	 СтандартнаяОбработка)
	Если Элемент.РежимВыбораИзСписка 
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Объект.CRM_СрокЖизниОбращения = Число(Текст);
		Если Элемент.СписокВыбора.НайтиПоЗначению(Объект.CRM_СрокЖизниОбращения) = Неопределено Тогда
			Элемент.РежимВыбораИзСписка = Ложь;
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПапкаПриИзменении(Элемент)
	
	ПапкаПриИзмененииНаСервере(Элемент.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ПапкаПриИзмененииНаСервере(ИмяЭлемента)
	
	ПутьКТекущимДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	ВыбранноеЗначение = ЭтотОбъект[ПутьКТекущимДанным];
	
	Для Каждого ВидПапки Из  Элементы.ГруппаПапкиПоУмолчанию.ПодчиненныеЭлементы Цикл
		
		Если ВидПапки.Имя = ИмяЭлемента Тогда
			Продолжить;
		Иначе
			СравниваемоеЗначение = ЭтотОбъект[ВидПапки.ПутьКДанным];
			Если ВыбранноеЗначение = СравниваемоеЗначение Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Папка %1 уже используется в поле %2 и не может быть выбрана'"),
					ВыбранноеЗначение, ВидПапки.Заголовок);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				ЭтотОбъект[ПутьКТекущимДанным] = Неопределено;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ЗагрузитьПисьма(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(
		"CRM_Статистика.Взаимодействия.НастройкаУчетнойЗаписи.Удобство.КоличествоНажатийГиперссылкиЗагрузкаПочтыЗаПериод");
	
	ПараметрыФормы = Новый Структура("Ключ", Объект.Ссылка);
	ОткрытьФорму("Обработка.CRM_МенеджерПочты.Форма.ФормаЗагрузкиИсторииПисем", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПравилоОбработкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПравилоОбработки(Элемент, Объект.CRM_ПравилаОбработки[0].ПравилоОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПравилоОбработки(Элемент, ПравилоОбработки)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", ПравилоОбработки);
	ПараметрыФормы.Вставить("АккаунтВладелец", Объект.Ссылка);
	ОткрытьФорму("Справочник.CRM_ПравилаОбработкиОбращений.ФормаОбъекта", ПараметрыФормы, Элемент, , , , ,
	             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

// -CRM

#КонецОбласти
