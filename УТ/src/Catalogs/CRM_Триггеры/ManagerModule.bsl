#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
	
// Функция возвращает структуру с синонимом и схемой компоновки данных по имени макета
//
// Параметры:
//	ЦельСсылка - Ссылка, СправочникСсылка.СтруктураЦелей - цель, для которой требуется получить схему
//	ИмяМакета - Строка, Неопределено - имя получаемого макета схемы компоновки данных
//
// Возвращаемое значение:
//	Структура - Описание - Строка - синоним получаемого макета
//				СхемаКомпоновкиДанных - СхемаКомпоновкиДанных, Неопределено - найденная схема компоновки данных
//				НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных, Неопределено - найденные настройки компоновки данных
//
Функция ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(ЦельСсылка, ИмяМакета = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Описание",                  "");
	ВозвращаемоеЗначение.Вставить("СхемаКомпоновкиДанных",     Неопределено);
	ВозвращаемоеЗначение.Вставить("НастройкиКомпоновкиДанных", Неопределено);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	CRM_Триггеры.ХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
	|	CRM_Триггеры.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных,
	|	CRM_Триггеры.УсловиеСрабатывания КАК УсловиеСрабатывания,
	|	CRM_Триггеры.УсловиеСрабатывания.ХранилищеСхемыКомпоновкиДанных КАК УсловиеХранилищеСхемыКомпоновкиДанных
	|ИЗ
	|	Справочник.CRM_Триггеры КАК CRM_Триггеры
	|ГДЕ
	|	CRM_Триггеры.Ссылка = &ЦельСсылка");
	
	Запрос.УстановитьПараметр("ЦельСсылка", ЦельСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
		
		ВозвращаемоеЗначение.Описание = ИмяМакета;
		Если Выборка.Следующий() Тогда
			ВозвращаемоеЗначение.СхемаКомпоновкиДанных = Выборка.УсловиеХранилищеСхемыКомпоновкиДанных.Получить();
			ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
		КонецЕсли;
		
	Иначе
		
		Макет = Метаданные.НайтиПоТипу(ТипЗнч(ЦельСсылка)).Макеты.Найти(ИмяМакета);
		Если НЕ Макет = Неопределено Тогда
			ВозвращаемоеЗначение.Описание = Макет.Синоним;
			ВозвращаемоеЗначение.СхемаКомпоновкиДанных = Справочники.CRM_Триггеры.ПолучитьМакет(ИмяМакета);
			Если Выборка.Следующий() Тогда
				ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция - Адреса схемы компоновки данных и настроек во временном хранилище
//  Помещает во временное хранилище схему компоновки данных,
//  настройки компоновки данных и возвращает их адреса
//
// Параметры:
//  ЭлементСтруктурыЦелей	 - Ссылка, СправочникСсылка.СтруктураЦелей	 - цель, для которой требуется получить адреса.
// 
// Возвращаемое значение:
//  Структура - структура, содержащая адреса.
//  СхемаКомпоновкиДанных - Строка - Адрес схемы компоновки данных.
//  НастройкиКомпоновкиДанных - Строка - Адрес настроек компоновки данных.
//  СхемаКомпоновкиДанныхРасшифровки - СхемаКомпоновкиДанных - Схема компановки данных.
//  НастройкиКомпоновкиДанныхРасшифровки - НастройкиКомпоновкиДанных - Настройки компоновки данных.
//  НаименованиеСхемы - Строка - Наименование схемы.
//
Функция АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище(ЭлементСтруктурыЦелей) Экспорт
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных,
		| СхемаКомпоновкиДанныхРасшифровки, НастройкиКомпоновкиДанныхРасшифровки,
		| НаименованиеСхемы");
	
	Если ТипЗнч(ЭлементСтруктурыЦелей) = Тип("ДанныеФормыСтруктура") Тогда
		ЭлементСтруктурыЦелейСсылка = ЭлементСтруктурыЦелей.Ссылка;
	Иначе
		ЭлементСтруктурыЦелейСсылка = ЭлементСтруктурыЦелей;
	КонецЕсли;
	СхемаКомпоновкиДанных = Неопределено;
	// Получим схему компоновки данных
	Если ЭлементСтруктурыЦелейСсылка.ХранилищеСхемыКомпоновкиДанных.Получить() = Неопределено
		 И НЕ ЭлементСтруктурыЦелейСсылка.Пустая() Тогда
		СхемаИНастройки = ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(ЭлементСтруктурыЦелейСсылка,
			 "ШаблоннаяСхемаКомпоновкиДанныхПредопределенный");
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		Если НЕ СхемаИНастройки.НастройкиКомпоновкиДанных = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СхемаИНастройки.НастройкиКомпоновкиДанных);
		Иначе	
			КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		КонецЕсли;	
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ИначеЕсли НЕ ЭлементСтруктурыЦелейСсылка.Пустая() Тогда
		СхемаКомпоновкиДанных = ЭлементСтруктурыЦелейСсылка.ХранилищеСхемыКомпоновкиДанных.Получить();
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(ЭлементСтруктурыЦелейСсылка.ХранилищеНастроекКомпоновкиДанных.Получить());
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаКомпоновкиДанных = Справочники.CRM_Триггеры.ПолучитьМакет("ШаблоннаяСхемаКомпоновкиДанныхПредопределенный");
		Адреса.НаименованиеСхемы = "ШаблоннаяСхемаКомпоновкиДанныхПредопределенный";
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		
	КонецЕсли;
	
	ОтключитьОтборыПоФункциональнымОпциям(СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки);
	Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	// Настройки = ЭлементСтруктурыЦелейСсылка.ХранилищеНастроекКомпоновкиДанных.Получить();
	// НастройкиРасшифровки = ЭлементСтруктурыЦелейСсылка.ХранилищеНастроекКомпоновкиДанныхРасшифровки.Получить();
	
	Если ЗначениеЗаполнено(Настройки) Тогда
		ОтключитьОтборыПоФункциональнымОпциям(Настройки);
		Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(Настройки, Новый УникальныйИдентификатор());
	КонецЕсли;
	
	Возврат Адреса;
	
КонецФункции

// Функция - Шаблоны схемы компоновки данных
// 
// Возвращаемое значение:
//  Шаблоны - Массив - Массив шаблонов ключевых показателей.
//
Функция ШаблоныСхемыКомпоновкиДанных() Экспорт
	
	Шаблоны = Новый Массив;
	
	Для каждого Макет Из Метаданные.Справочники.CRM_Триггеры.Макеты Цикл
		
		Если Макет.ТипМакета <> Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Шаблоны.Добавить(Новый Структура("Имя, Синоним", Макет.Имя, Макет.Синоним));
		
	КонецЦикла;
	
	Возврат Шаблоны;
	
КонецФункции

// Функция - Проверить условия триггера
//
// Параметры:
//  Триггер			 - Ссылка, СправочникСсылка.CRM_Триггеры - Триггер для проверки.
//  ОбъектПроверки	 - Ссылка								 - Объект, в котором используется триггер.
//  ОбъектыДействия	 - Неопределено, Массив					 - Массив действий. Заполняется в функции.
//  ДополнительныеСвойства	 - Строка						 - Строка, описывающая дополнительные свойства объекта.
// 
// Возвращаемое значение:
//  Булево - Истина, если проверка прошла успешно.
//
Функция ПроверитьУсловияТриггера(Триггер, ОбъектПроверки, ОбъектыДействия, ДополнительныеСвойства) Экспорт
	
	Попытка
		Если Триггер.УсловиеСрабатывания.ИспользоватьСКД Тогда
			Возврат ПроверитьУсловиеТриггераСИспользованиемСКД(Триггер,
			                                                   ОбъектПроверки, ОбъектыДействия, ДополнительныеСвойства);
		Иначе
			Возврат ПроверитьУсловиеТриггераБезИспользованияСКД(Триггер, ОбъектПроверки, ОбъектыДействия);
		КонецЕсли;
	Исключение
		МенеджерЗаписи = РегистрыСведений.CRM_ЛогиТриггеров.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ДатаСрабатывания = ТекущаяДатаСеанса();
		МенеджерЗаписи.Объект = ОбъектПроверки.Ссылка;
		МенеджерЗаписи.Триггер = Триггер;
		МенеджерЗаписи.ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		МенеджерЗаписи.ОшибкаУсловия = Истина;
		МенеджерЗаписи.Записать(Истина);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Функция - Проверить условия триггера
//
// Параметры:
//  Триггер				 - Ссылка, СправочникСсылка.CRM_Триггеры - Триггер для проверки.
//  ПараметрыПроверки	 - Структура							 - Параметры триггера										 -
//  ОбъектыДействия		 - Неопределено, Массив					 - Массив действий. Заполняется в функции.
// 
// Возвращаемое значение:
//  Булево - Истина, если проверка прошла успешно.
//
Функция ПроверитьУсловияТриггераСервиса(Триггер, ПараметрыПроверки, ОбъектыДействия) Экспорт
	Попытка
		Если Триггер.УсловиеСрабатывания.РежимОтладки Тогда
			Обработка = CRM_ТриггерыСервер.ВернутьОбработкуУсловия(Триггер);
		Иначе	
			Обработка = CRM_ТриггерыПовтИсп.ВернутьОбработкуУсловия(Триггер);
		КонецЕсли;
		НастройкиУсловий = Триггер.НастройкиУсловий.Получить();
		Если ТипЗнч(НастройкиУсловий) <> Тип("Структура") Тогда
			НастройкиУсловий = Новый Структура;
		КонецЕсли;
		Если ЗначениеЗаполнено(Триггер.СценарийКарта) Тогда
			Если Обработка.Метаданные().Реквизиты.Найти("Сценарий") <> Неопределено Тогда
				НастройкиУсловий.Вставить("Сценарий", Триггер.СценарийКарта);
			ИначеЕсли Обработка.Метаданные().Реквизиты.Найти("КартаМаршрута") <> Неопределено Тогда
				НастройкиУсловий.Вставить("КартаМаршрута", Триггер.СценарийКарта);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Триггер.СостояниеИнтереса) Тогда
			Если Обработка.Метаданные().Реквизиты.Найти("СостояниеИнтереса") <> Неопределено Тогда
				НастройкиУсловий.Вставить("СостояниеИнтереса", Триггер.СостояниеИнтереса);
			ИначеЕсли Обработка.Метаданные().Реквизиты.Найти("ТочкаМаршрута") <> Неопределено Тогда
				НастройкиУсловий.Вставить("ТочкаМаршрута", Триггер.СостояниеИнтереса);
			КонецЕсли;
		КонецЕсли;
		НастройкиУсловий.Вставить("ПараметрыПроверки", ПараметрыПроверки);
		ЗаполнитьЗначенияСвойств(Обработка, НастройкиУсловий);
		Результат = Обработка.ВыполнитьПроверку(ОбъектыДействия);
		Возврат Результат;
	Исключение
		МенеджерЗаписи = РегистрыСведений.CRM_ЛогиТриггеров.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ДатаСрабатывания = ТекущаяДатаСеанса();
		МенеджерЗаписи.Триггер = Триггер;
		МенеджерЗаписи.ОписаниеОшибки = ОписаниеОшибки();
		МенеджерЗаписи.ОшибкаУсловия = Истина;
		МенеджерЗаписи.Записать(Истина);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции	

// Функция - Выполнить триггер
//  Функция выполняет код обработки триггера и возвращает результат выполнения.
//
// Параметры:
//  Триггер				 - СправочникСсылка.CRM_Триггеры	 -  Ссылка на триггер, который необходимо выполнить.
//  ОбъектДействия		 - Ссылка	 -   Объект, в котором используется триггер.
//  ОбъектСрабатывания	 - Ссылка	 -   Объект, в котором проверяется условие срабатывания.
//  Отказ				 - Булево	 -   Признак успешности выполнения триггера.
//  СообщениеДействия	 - Строка	 -   Сообщение, при выполнении триггера.
//  ОтложенноеВыполнение - Булево	 -   Признак отложенного выполнения.
// 
// Возвращаемое значение:
//  Результат - Результат выполнения обработки триггера.
//
Функция ВыполнитьТриггер(Триггер, ОбъектДействия, ОбъектСрабатывания, Отказ = Неопределено,
	 СообщениеДействия = "",
	 ОтложенноеВыполнение = Ложь) Экспорт
	Обработка = CRM_ТриггерыСервер.ВернутьОбработкуДействия(Триггер);
	Если Обработка = Неопределено Тогда
		СообщениеДействия = НСтр("ru = 'Не удалось получить обработку действия триггера!!!'");
		Возврат Ложь;
	КонецЕсли;
	НастройкиДействий = Триггер.НастройкиДействий.Получить();
	Если ТипЗнч(НастройкиДействий) <> Тип("Структура") Тогда
		НастройкиДействий = Новый Структура;
	КонецЕсли;	
	НастройкиДействий.Вставить("ОбъектДействия", ОбъектДействия);
	НастройкиДействий.Вставить("ОбъектСрабатывания", ОбъектСрабатывания);
	НастройкиДействий.Вставить("УсловиеСрабатывания", Триггер.УсловиеСрабатывания);
	НастройкиДействий.Вставить("Триггер", Триггер);
	Если Обработка.Метаданные().Реквизиты.Найти("ОтложенноеВыполнение") <> Неопределено Тогда
		НастройкиДействий.Вставить("ОтложенноеВыполнение", ОтложенноеВыполнение);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Обработка, НастройкиДействий);
	Результат = Обработка.ВыполнитьДействие();
	Обработка.ОбъектДействия = Неопределено;
	Если Обработка.Метаданные().Реквизиты.Найти("СообщениеДействия") <> Неопределено Тогда
		СообщениеДействия = Обработка.СообщениеДействия;
	КонецЕсли;
	Если ОбъектДействия.ДополнительныеСвойства.Свойство("Отказ") Тогда
		Отказ = ОбъектДействия.ДополнительныеСвойства.Отказ;
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Функция - Выполнить триггер
//  Функция выполняет код обработки триггера и возвращает результат выполнения.
//
// Параметры:
//  Триггер				 - СправочникСсылка.CRM_Триггеры	 -  Ссылка на триггер, который необходимо выполнить.
//  ОбъектДействия		 - Ссылка	 -   Объект, в котором используется триггер.
//  ОбъектСрабатывания	 - Ссылка	 -   Объект, в котором проверяется условие срабатывания.
// 
// Возвращаемое значение:
//  Результат - Результат выполнения обработки триггера.
//
Процедура ВыполнитьДействиеПриОшибке(Триггер, ОбъектДействия, ОбъектСрабатывания) Экспорт
	Если Триггер.Действие.РежимОтладки Тогда
		Обработка = CRM_ТриггерыСервер.ВернутьОбработкуДействия(Триггер);
	Иначе	
		Обработка = CRM_ТриггерыПовтИсп.ВернутьОбработкуДействия(Триггер);
	КонецЕсли;	
	Если Обработка.Метаданные().Реквизиты.Найти("ДействиеПриОшибке") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НастройкиДействий = Новый Структура;
	НастройкиДействий.Вставить("ОбъектДействия", ОбъектДействия);
	НастройкиДействий.Вставить("ОбъектСрабатывания", ОбъектСрабатывания);
	НастройкиДействий.Вставить("УсловиеСрабатывания", Триггер.УсловиеСрабатывания);
	НастройкиДействий.Вставить("ДействиеПриОшибке", Истина);
	ЗаполнитьЗначенияСвойств(Обработка, НастройкиДействий);
	Обработка.ВыполнитьДействие();
КонецПроцедуры

// Функция - Проверить повторное использование
//  Функция возвращает признак применения повторного использования.
//
// Параметры:
//  Триггер			 - Ссылка, СправочникСсылка.CRM_Триггеры - Триггер для проверки.
//  ОбъектДействия	 - Ссылка								 - Объект, в котором используется триггер.
// 
// Возвращаемое значение:
//  Булево - Признак применения повторного использования.
//
Функция ПроверитьПовторноеИспользование(Триггер, ОбъектДействия) Экспорт
	Если Триггер.РазрешитьПовторноеСрабатывание Тогда
		Возврат Истина;
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ОбработанныеОбъектыТриггеров.Триггер КАК Триггер
	|ИЗ
	|	РегистрСведений.CRM_ОбработанныеОбъектыТриггеров КАК CRM_ОбработанныеОбъектыТриггеров
	|ГДЕ
	|	CRM_ОбработанныеОбъектыТриггеров.Триггер = &Триггер
	|	И CRM_ОбработанныеОбъектыТриггеров.Объект = &Объект";
	Запрос.УстановитьПараметр("Триггер", Триггер);
	Запрос.УстановитьПараметр("Объект", ОбъектДействия.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции

// Процедура - Записать обработанный объект триггера
//  Процедура записывает обработанные триггеры в регистр сведений CRM_ОбработанныеОбъектыТриггеров.
//
// Параметры:
//  Триггер				 - Ссылка, СправочникСсылка.CRM_Триггеры - Триггер.
//  ОбъектДействия		 - Ссылка								 - Объект, в котором используется триггер.
//  ОбъектСрабатывания	 - Ссылка								 - Объект, в котором проверяется условие срабатывания.
//  СообщениеДействия	 - Строка								 - Сообщение, при выполнении триггера.
//
Процедура ЗаписатьОбработанныйОбъектТриггера(Триггер, ОбъектДействия,
	 ОбъектСрабатывания = Неопределено,
	 СообщениеДействия) Экспорт
	МенеджерЗаписи = РегистрыСведений.CRM_ОбработанныеОбъектыТриггеров.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = ?(ОбъектСрабатывания = Неопределено
		 Или ТипЗнч(ОбъектСрабатывания) = Тип("Строка"), ОбъектДействия.Ссылка, ОбъектСрабатывания.Ссылка);
	МенеджерЗаписи.Триггер = Триггер;
	МенеджерЗаписи.Записать(Истина);
	
	Если Триггер.ВключатьВЛоги Тогда
		МенеджерЗаписи = РегистрыСведений.CRM_ЛогиТриггеров.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ДатаСрабатывания = ТекущаяДатаСеанса();
		МенеджерЗаписи.Объект = ОбъектДействия.Ссылка;
		МенеджерЗаписи.Триггер = Триггер;
		МенеджерЗаписи.ОписаниеОшибки = СообщениеДействия;
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
КонецПроцедуры	

// Процедура - Записать ошибку триггера
//  Процедура записывает сообщения об ошибке в регистр CRM_ЛогиТриггеров.
//
// Параметры:
//  Триггер			 - Ссылка, СправочникСсылка.CRM_Триггеры - Триггер.
//  ОбъектДействия	 - Ссылка								 - Объект, в котором используется триггер.
//  ОписаниеОшибки	 - Строка								 - Сообщение, при выполнении триггера.
//
Процедура ЗаписатьОшибкуТриггера(Триггер, ОбъектДействия, ОписаниеОшибки) Экспорт
	МенеджерЗаписи = РегистрыСведений.CRM_ЛогиТриггеров.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ДатаСрабатывания = ТекущаяДатаСеанса();
	МенеджерЗаписи.Объект = ОбъектДействия.Ссылка;
	МенеджерЗаписи.Триггер = Триггер;
	МенеджерЗаписи.ОписаниеОшибки = ОписаниеОшибки;
	МенеджерЗаписи.ОшибкаДействия = Истина;
	МенеджерЗаписи.Записать(Истина);
КонецПроцедуры

#Область ПериодическиеТриггеры

// Функция - Выполнить периодический триггер
//  Функция выполняет код обработки периодического триггера и возвращает результат выполнения.
//
// Параметры:
//  Триггер				 - СправочникСсылка.CRM_Триггеры - Ссылка на триггер, который необходимо выполнить.
//  СообщениеДействия	 - Строка						 - Сообщение, при выполнении триггера.
// 
// Возвращаемое значение:
//  Результат - Результат выполнения обработки триггера.
//
Функция ВыполнитьПериодическийТриггер(Триггер, СообщениеДействия = "") Экспорт
	Если Триггер.Действие.РежимОтладки Тогда
		Обработка = CRM_ТриггерыСервер.ВернутьОбработкуДействия(Триггер);
	Иначе	
		Обработка = CRM_ТриггерыПовтИсп.ВернутьОбработкуДействия(Триггер);
	КонецЕсли;	
	НастройкиДействий = Триггер.НастройкиДействий.Получить();
	Если ТипЗнч(НастройкиДействий) <> Тип("Структура") Тогда
		НастройкиДействий = Новый Структура;
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Обработка, НастройкиДействий);
	Результат = Обработка.ВыполнитьДействие();
	Если Обработка.Метаданные().Реквизиты.Найти("СообщениеДействия") <> Неопределено Тогда
		СообщениеДействия = Обработка.СообщениеДействия;
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Процедура - Записать ошибку периодического триггера
// Процедура записывает ошибку выполнения периодического триггера в регистр сведений CRM_ЛогиТриггеров.
//
// Параметры:
//  Триггер			 - СправочникСсылка.CRM_Триггеры - Периодический триггер.
//  ОписаниеОшибки	 - Строка						 - Сообщение, при выполнении триггера.
//
Процедура ЗаписатьОшибкуПериодическогоТриггера(Триггер, ОписаниеОшибки) Экспорт
	МенеджерЗаписи = РегистрыСведений.CRM_ЛогиТриггеров.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ДатаСрабатывания = ТекущаяДатаСеанса();
	МенеджерЗаписи.Триггер = Триггер;
	МенеджерЗаписи.ОписаниеОшибки = ОписаниеОшибки;
	МенеджерЗаписи.ОшибкаДействия = Истина;
	МенеджерЗаписи.Записать(Истина);
КонецПроцедуры

// Процедура - Записать выполнение периодического триггера
// Процедура записывает сообщения, при выполнении обработки периодического триггера в регистр сведений CRM_ЛогиТриггеров. 
//
// Параметры:
//  Триггер				 - СправочникСсылка.CRM_Триггеры - Периодический триггер.
//  СообщениеДействия	 - Строка						 - Сообщение, при выполнении триггера.
//
Процедура ЗаписатьВыполнениеПериодическогоТриггера(Триггер, СообщениеДействия = "") Экспорт
	Если Триггер.ВключатьВЛоги Тогда
		МенеджерЗаписи = РегистрыСведений.CRM_ЛогиТриггеров.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ДатаСрабатывания = ТекущаяДатаСеанса();
		МенеджерЗаписи.Триггер = Триггер;
		МенеджерЗаписи.ОписаниеОшибки = СообщениеДействия;
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
КонецПроцедуры	

#КонецОбласти

#Область ОбновлениеИБ

// Процедура заполняет данные о повторах выполнения триггеров. 
//
Процедура ЗаполнитьДанныеОПовторахВыполненияТриггеров() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_Триггеры.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_Триггеры КАК CRM_Триггеры
	                      |ГДЕ
	                      |	CRM_Триггеры.Действие В(&Действия)");
	Действия = Новый Массив;
	Действия.Добавить(Справочники.CRM_ДействияТриггеров.ПересчетПотенциалаВИнтересе);
	Действия.Добавить(Справочники.CRM_ДействияТриггеров.ИзменениеСостоянияИнтереса);
	Запрос.УстановитьПараметр("Действия", Действия);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектТриггер = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектТриггер.ПовторятьПриОшибке = 12;
		ОбъектТриггер.ПовторятьЧерез = 120;
		ОбъектТриггер.ВыполнятьВСостоянииИнтереса = Истина;
		ОбъектТриггер.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьУсловиеТриггераСИспользованиемСКД(Триггер, ОбъектПроверки, ОбъектыДействия, ДополнительныеСвойства)
	
	СКД = Триггер.УсловиеСрабатывания.ХранилищеСхемыКомпоновкиДанных.Получить();
	НастройкиСКД = Триггер.ХранилищеНастроекКомпоновкиДанных.Получить();
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
	НастройкиСКД = КомпоновщикНастроек.Настройки;
	
	ДетальнаяГруппировка = НастройкиСКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальнаяГруппировка.Использование = Истина;
	
	ВыбранноеАвтоПоле = ДетальнаяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеАвтоПоле.Использование = Истина;
	
	Для Каждого ПолеВыбора Из НастройкиСКД.ДоступныеПоляВыбора.Элементы Цикл
		Если СтрНайти(Строка(ПолеВыбора.Поле), "ОбъектДействия") > 0 Тогда
			ВыбранноеПоле = НастройкиСКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле  = Новый ПолеКомпоновкиДанных("ОбъектДействия");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ВыбранноеПоле = НастройкиСКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	
	ПараметрыНастройки = НастройкиСКД.ПараметрыДанных;
	
	ЗначениеПараметра = ПараметрыНастройки.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Ссылка"));
	Если ЗначениеПараметра <>  Неопределено Тогда
		ЗначениеПараметра.Использование = Истина;
		ЗначениеПараметра.Значение = ОбъектПроверки.Ссылка;
	КонецЕсли;
	
	Для каждого ДопСвойство Из ДополнительныеСвойства Цикл
		ЗначениеПараметра = ПараметрыНастройки.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ДопСвойство.Ключ));
		Если ЗначениеПараметра <>  Неопределено Тогда
			ЗначениеПараметра.Использование = Истина;
			ЗначениеПараметра.Значение = ДопСвойство.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Триггер.СостояниеИнтереса)
		И ТипЗнч(Триггер.СостояниеИнтереса) = Тип("СправочникСсылка.CRM_СостоянияИнтересов")
		И НастройкиСКД.Отбор.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("СостояниеИнтереса")) <> Неопределено Тогда
		ЭлементОтбора = НайтиОтборРекурсивно(НастройкиСКД.Отбор.Элементы, Новый ПолеКомпоновкиДанных("СостояниеИнтереса"));
		Если ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора = НастройкиСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеИнтереса");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Триггер.СостояниеИнтереса;
	КонецЕсли;
	Если ЗначениеЗаполнено(Триггер.СостояниеИнтереса)
		И ТипЗнч(Триггер.СостояниеИнтереса) = Тип("СправочникСсылка.CRM_ТочкиМаршрутов")
		И НастройкиСКД.Отбор.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("CRM_ТочкаМаршрута")) <> Неопределено Тогда
		ЭлементОтбора = НайтиОтборРекурсивно(НастройкиСКД.Отбор.Элементы, Новый ПолеКомпоновкиДанных("CRM_ТочкаМаршрута"));
		Если ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора = НастройкиСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("CRM_ТочкаМаршрута");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Триггер.СостояниеИнтереса;
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД, НастройкиСКД, , ,
	Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	Если ТаблицаРезультат.Количество() > 0 И ТаблицаРезультат.Колонки.Найти("ОбъектДействия") <> Неопределено Тогда
		ТаблицаРезультат.Свернуть("ОбъектДействия");
		ОбъектыДействия = Новый Массив;
		Для Каждого ЭлТаб Из ТаблицаРезультат Цикл
			Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЭлТаб.ОбъектДействия)) И НЕ ЭлТаб.ОбъектДействия.Пустая()
				И ОбъектыДействия.Найти(ЭлТаб.ОбъектДействия) = Неопределено Тогда
				
				ОбъектыДействия.Добавить(ЭлТаб.ОбъектДействия);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаРезультат.Количество() > 0;
	
КонецФункции

Функция ПроверитьУсловиеТриггераБезИспользованияСКД(Триггер, ОбъектПроверки, ОбъектыДействия)
	
	Если Триггер.УсловиеСрабатывания.РежимОтладки Тогда
		Обработка = CRM_ТриггерыСервер.ВернутьОбработкуУсловия(Триггер);
	Иначе
		Обработка = CRM_ТриггерыПовтИсп.ВернутьОбработкуУсловия(Триггер);
	КонецЕсли;
	
	НастройкиУсловий = Триггер.НастройкиУсловий.Получить();
	Если ТипЗнч(НастройкиУсловий) <> Тип("Структура") Тогда
		НастройкиУсловий = Новый Структура;
	КонецЕсли;
	Если ЗначениеЗаполнено(Триггер.СценарийКарта) Тогда
		Если Обработка.Метаданные().Реквизиты.Найти("Сценарий") <> Неопределено Тогда
			НастройкиУсловий.Вставить("Сценарий", Триггер.СценарийКарта);
		ИначеЕсли Обработка.Метаданные().Реквизиты.Найти("КартаМаршрута") <> Неопределено Тогда
			НастройкиУсловий.Вставить("КартаМаршрута", Триггер.СценарийКарта);
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Триггер.СостояниеИнтереса) Тогда
		Если Обработка.Метаданные().Реквизиты.Найти("СостояниеИнтереса") <> Неопределено Тогда
			НастройкиУсловий.Вставить("СостояниеИнтереса", Триггер.СостояниеИнтереса);
		ИначеЕсли Обработка.Метаданные().Реквизиты.Найти("ТочкаМаршрута") <> Неопределено Тогда
			НастройкиУсловий.Вставить("ТочкаМаршрута", Триггер.СостояниеИнтереса);
		КонецЕсли;
	КонецЕсли;
	НастройкиУсловий.Вставить("ОбъектПроверки", ОбъектПроверки);
	
	ЗаполнитьЗначенияСвойств(Обработка, НастройкиУсловий);
	Результат = Обработка.ВыполнитьПроверку(ОбъектыДействия);
	Обработка.ОбъектПроверки = Неопределено;
	
	Возврат Результат;
	
КонецФункции

Процедура ОтключитьОтборыПоФункциональнымОпциям(Настройки)
	ИспользоватьПартнеровКакКонтрагентов		= Истина;
	ИспользоватьНесколькоОрганизаций			= Истина;
	ИспользоватьНесколькоКасс					= Истина;
	ИспользоватьНесколькоРасчетныхСчетов		= Истина;
	ИспользоватьХарактеристикиНоменклатуры		= ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	УчитыватьСебестоимостьТоваровПоВидамЗапасов	= Истина;
	ИспользоватьКлассификациюКлиентов			= ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоВыручке")
	ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоКоличествуПродаж");
	
	Отборы = Настройки.Отбор.Элементы;
	ИзменяемыеОтборы = Новый Соответствие;
	Для Каждого Отбор Из Отборы Цикл
		Если ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ИзменяемыеОтборы.Вставить(Отбор.ЛевоеЗначение, Отбор);
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользоватьПартнеровКакКонтрагентов Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Контрагент");
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоОрганизаций Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Организация");
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоКасс Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Касса");
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоРасчетныхСчетов Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "БанковскийСчет");
	КонецЕсли;
	
	Если Не ИспользоватьХарактеристикиНоменклатуры Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Характеристика");
	КонецЕсли;
	
	Если Не УчитыватьСебестоимостьТоваровПоВидамЗапасов Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "ВидЗапасов");
	КонецЕсли;
	
	Если Не ИспользоватьКлассификациюКлиентов Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Класс");
	КонецЕсли;
КонецПроцедуры

Процедура ОтключитьОтбор(Настройки, ИзменяемыеОтборы, ИмяПоля)
	ПроверяемоеПоле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	УдаляемыйОтбор = ИзменяемыеОтборы.Получить(ПроверяемоеПоле);
	Если Не УдаляемыйОтбор = Неопределено Тогда
		Настройки.Отбор.Элементы.Удалить(УдаляемыйОтбор);
	КонецЕсли;
КонецПроцедуры

Функция НайтиОтборРекурсивно(КоллекцияЭлементов, ЗначениеПоиска)
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
				Возврат ЭлементОтбора;
			КонецЕсли;
		Иначе
			
			ЭлементОтбора = НайтиОтборРекурсивно(ЭлементОтбора.Элементы, ЗначениеПоиска);
			Возврат ЭлементОтбора;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли
