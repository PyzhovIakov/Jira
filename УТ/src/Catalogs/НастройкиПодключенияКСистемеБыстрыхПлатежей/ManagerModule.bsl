///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - Структура:
//   * ПриОпределенииПолучателей - Булево - при установке значения Истина будет
//     вызвана процедура модуля менеджера объекта ПриОпределенииПолучателей,
//     где определяются получатели для отправки печатной формы.
//   * ПриДобавленииКомандПечати - Булево, Неопределено - при установке значения
//     Истина будет вызвана процедура модуля менеджера объекта ДобавитьКомандыПечати,
//     где добавляются команды печати. Неопределено - объект не подключен к подсистеме печати.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей";
	КомандаПечати.Идентификатор = "НаклейкаСБПДверь";
	КомандаПечати.Представление = НСтр("ru = 'Наклейка СБП (дверь)'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей";
	КомандаПечати.Идентификатор = "НаклейкаСБПКасса";
	КомандаПечати.Представление = НСтр("ru = 'Наклейка СБП (касса)'");
	
КонецПроцедуры

// Формирует печатные формы объекта.
//
// Параметры:
//  МассивОбъектов - Массив из СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - ссылки
//                   на объекты которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные параметры печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы;
//  ОбъектыПечати - СписокЗначений из ЛюбаяСсылка - соответствие между объектами и именами печатных областей, куда
//    распечатан объект;
//  ПараметрыВывода - Структура - параметры сформированных табличных документов.
//
Процедура Печать(
		МассивОбъектов,
		ПараметрыПечати,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
	
	Если МодульУправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НаклейкаСБПДверь") Тогда
		СинонимМакета = НСтр("ru = 'Наклейка СБП (Дверь)'");
		ИдентификаторМакета = "НаклейкаСБПДверь";
	ИначеЕсли МодульУправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НаклейкаСБПКасса") Тогда
		СинонимМакета = НСтр("ru = 'Наклейка СБП (Кассовая зона)'");
		ИдентификаторМакета = "НаклейкаСБПКасса";
	Иначе
		Возврат;
	КонецЕсли;
	
	МодульУправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		ИдентификаторМакета,
		СинонимМакета,
		ПечатьНаклейки(ИдентификаторМакета));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаДанныхНастроек

// Сохраняет настройки подключения к СБП в информационную базу.
//
// Параметры:
//  ПараметрыЗаполнения - Структура - данные заполнения настройки подключения;
//  ПараметрыАутентификации - Структура - данные аутентификации;
//  ПараметрыОплаты - Структура - содержит данные для записи настроек в регистр сведений.
//    Структура параметра соответствует структуре регистра, которая определена
//    в метаданных за исключением полей указанных в настройках в свойстве ИсключаемыеПоля
//    процедуры ПриОпределенииНастроекПодключения;
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей.
//
// Возвращаемое значение:
//  Структура - результат создания торговой точки:
//    * Ссылка - Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей - новая настройка;
//    * Ошибка - Булево - признак ошибки сохранения;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//
Функция НоваяНастройкаПодключения(
		ПараметрыЗаполнения,
		ПараметрыАутентификации,
		ПараметрыОплаты,
		ВариантНастройки) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ПроверитьВариантНастройки(
		ВариантНастройки);
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("СообщениеОбОшибке", "");
	Результат.Вставить("Ссылка", Неопределено);
	
	НастройкиУчастника = СистемаБыстрыхПлатежейСлужебный.НастройкиАвторизацииУчастникаСБП(
		ПараметрыЗаполнения.ИдентификаторУчастника,
		ВариантНастройки);
	
	НачатьТранзакцию();
	
	Попытка
		
		НастройкаПодключения = Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(
			НастройкаПодключения,
			ПараметрыЗаполнения,
			"ИдентификаторУчастника, Наименование");
		НастройкаПодключения.ИдентификаторМерчанта = СистемаБыстрыхПлатежейСлужебный.ИдентификаторМерчантаПоДаннымАутентификации(
			ПараметрыАутентификации);
		НастройкаПодключения.Родитель = ГруппаНастройкиБанк(
			ПараметрыЗаполнения.ИдентификаторУчастника,
			ВариантНастройки);
		НастройкаПодключения.Используется = Истина;
		НастройкаПодключения.ВариантНастройки = ВариантНастройки;
		
		НастройкаПодключения.Заполнить(Неопределено);
		НастройкаПодключения.Записать();
		
		РезультатЗаписиНастроек = СистемаБыстрыхПлатежейСлужебный.ЗаписатьНастройкиОплаты(
			ПараметрыОплаты,
			НастройкаПодключения.Ссылка,
			ВариантНастройки);
		
		Если РезультатЗаписиНастроек.Отказ Тогда
			Результат.Ошибка = Истина;
			Результат.СообщениеОбОшибке = РезультатЗаписиНастроек.СообщениеОбОшибке;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		СистемаБыстрыхПлатежейСлужебный.СохранитьНастройкиАутентификации(
			НастройкаПодключения.Ссылка,
			ПараметрыАутентификации,
			НастройкаПодключения.ИдентификаторУчастника,
			НастройкиУчастника.ТипАутентификации);
		
		Результат.Ссылка = НастройкаПодключения.Ссылка;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		// Вызов во вложенной транзакции не предполагается,
		// вместо вызова исключения обработка ошибки делегируется
		// вызывающему методу.
		Результат.Ошибка = Истина;
		Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось записать настройку подключения по причине:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Изменяет участника и данные аутентификации в переданной настройке.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - элемент для обновления.
//  ИдентификаторУчастника - Строка - идентификатор участника Системы быстрых платежей.
//  ПараметрыАутентификации - Структура - данные аутентификации;
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей.
//
// Возвращаемое значение:
//  СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - новый или найденный корневой элемент.
//
Функция ИзменитьУчастника(
		НастройкаПодключения,
		ИдентификаторУчастника,
		ПараметрыАутентификации,
		ВариантНастройки) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("СообщениеОбОшибке", "");
	
	НастройкиУчастника = СистемаБыстрыхПлатежейСлужебный.НастройкиАвторизацииУчастникаСБП(
		ИдентификаторУчастника,
		ВариантНастройки);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", НастройкаПодключения);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НастройкаПодключенияОбъект = НастройкаПодключения.ПолучитьОбъект();
		НастройкаПодключенияОбъект.ИдентификаторУчастника = ИдентификаторУчастника;
		НастройкаПодключенияОбъект.ИдентификаторМерчанта =
			СистемаБыстрыхПлатежейСлужебный.ИдентификаторМерчантаПоДаннымАутентификации(ПараметрыАутентификации);
		
		ПредыдущийРодитель = НастройкаПодключенияОбъект.Родитель;
		НастройкаПодключенияОбъект.Родитель = ГруппаНастройкиБанк(
			ИдентификаторУчастника,
			ВариантНастройки);
		НастройкаПодключенияОбъект.Записать();
		
		ОбработатьСменуРодителя(ПредыдущийРодитель);
		
		СистемаБыстрыхПлатежейСлужебный.СохранитьНастройкиАутентификации(
			НастройкаПодключения,
			ПараметрыАутентификации,
			ИдентификаторУчастника,
			НастройкиУчастника.ТипАутентификации);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		// Вызов во вложенной транзакции не предполагается,
		// вместо вызова исключения обработка ошибки делегируется
		// вызывающему методу.
		Результат.Ошибка = Истина;
		Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось изменить участника в настройке подключения по причине:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Обновляет идентификатор участника СБП у переданной настройки.
//
// Параметры:
//  НастройкаПодключения - Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей - элемент для обновления;
//  ИдентификаторУчастника - Строка - идентификатор участника Системы быстрых платежей.
//
// Возвращаемое значение:
//  СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - новый или найденный корневой элемент.
//
Процедура ОбновитьИдентификаторУчастника(
		НастройкаПодключения,
		ИдентификаторУчастника) Экспорт
	
	НастройкаПодключенияОбъект = НастройкаПодключения.ПолучитьОбъект();
	НастройкаПодключенияОбъект.Заблокировать();
	НастройкаПодключенияОбъект.ИдентификаторУчастника = ИдентификаторУчастника;
	НастройкаПодключенияОбъект.Записать();
	
КонецПроцедуры

// Создает корневой элемент банк настроек подключения к СБП, если он отсутствует.
//
// Параметры:
//  ИдентификаторУчастника - Строка - идентификатор участника Системы быстрых платежей.
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей.
//
// Возвращаемое значение:
//  СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - новый или найденный корневой элемент.
//
Функция ГруппаНастройкиБанк(ИдентификаторУчастника, ВариантНастройки) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Родитель КАК Родитель,
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ПометкаУдаления КАК ПометкаУдаления
			|ИЗ
			|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
			|ГДЕ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ИдентификаторУчастника = &ИдентификаторУчастника
			|	И НастройкиПодключенияКСистемеБыстрыхПлатежей.ВариантНастройки = &ВариантНастройки";
		
		Запрос.УстановитьПараметр(
			"ИдентификаторУчастника",
			ИдентификаторУчастника);
		Запрос.УстановитьПараметр(
			"ВариантНастройки",
			ВариантНастройки);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			
			НастройкиУчастника = СистемаБыстрыхПлатежейСлужебный.НастройкиУчастникаСБП(
				ИдентификаторУчастника);
			Если НастройкиУчастника = Неопределено Тогда
				ВызватьИсключение НСтр("ru = 'Неопределенны настройки участника СБП.'");
			КонецЕсли;
			
			РодительНастройкиОбъект = СоздатьГруппу();
			РодительНастройкиОбъект.Наименование = НастройкиУчастника.Наименование;
			РодительНастройкиОбъект.ВариантНастройки = ВариантНастройки;
			РодительНастройкиОбъект.Родитель = ГруппаВариантНастройки(ВариантНастройки);
			РодительНастройкиОбъект.Записать();
			РодительНастройки = РодительНастройкиОбъект.Ссылка;
			
		Иначе
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			Если ВыборкаДетальныеЗаписи.ПометкаУдаления Тогда
				РодительНастройкиОбъект = ВыборкаДетальныеЗаписи.Родитель.ПолучитьОбъект();
				РодительНастройкиОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			РодительНастройки = ВыборкаДетальныеЗаписи.Родитель;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось записать корневой узел настройки:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Возврат РодительНастройки;
	
КонецФункции

// Создает корневой элемент сценарий оплаты настроек подключения к СБП, если он отсутствует.
//
// Параметры:
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей.
//  ОбработчикОбновления - Булево - признак вызова из обработчика обновления.
//
// Возвращаемое значение:
//  СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей, Неопределено - новый или найденный корневой элемент.
//
Функция ГруппаВариантНастройки(
		ВариантНастройки,
		ОбработчикОбновления = Ложь,
		СоздатьНастройку = Истина) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ПроверитьВариантНастройки(
		ВариантНастройки);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
		|ГДЕ
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Родитель = ЗНАЧЕНИЕ(Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей.ПустаяСсылка)
		|	И НастройкиПодключенияКСистемеБыстрыхПлатежей.ВариантНастройки = &ВариантНастройки
		|	И НЕ НастройкиПодключенияКСистемеБыстрыхПлатежей.ПометкаУдаления";
	
	Запрос.УстановитьПараметр(
		"ВариантНастройки",
		ВариантНастройки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Если Не СоздатьНастройку Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ГруппаОбъект = СоздатьГруппу();
		
		Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b Тогда
			ГруппаОбъект.Наименование = НСтр("ru = 'Прием оплаты от физических лиц (c2b)'");
		Иначе
			ГруппаОбъект.Наименование = НСтр("ru = 'Прием оплаты от юридических лиц (b2b)'");
		КонецЕсли;
		
		ГруппаОбъект.ВариантНастройки = ВариантНастройки;
		Если ОбработчикОбновления Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ГруппаОбъект);
		Иначе
			ГруппаОбъект.Записать();
		КонецЕсли;
		
		ГруппаСсылка = ГруппаОбъект.Ссылка;
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		ГруппаСсылка = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат ГруппаСсылка;
	
КонецФункции

// Обрабатывает смену родителя в настройке подключения. Если у родителя не осталось ни одной настройки
//   устанавливается пометка на удаление.
//
// Параметры:
//  Родитель - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - ссылка на группу.
//
Процедура ОбработатьСменуРодителя(Родитель)
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
			|ГДЕ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Родитель = &Родитель";
		
		Запрос.УстановитьПараметр("Родитель", Родитель);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			РодительНастройкиОбъект = Родитель.ПолучитьОбъект();
			РодительНастройкиОбъект.УстановитьПометкуУдаления(Истина);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обработать смену родителя настройки подключения:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецПроцедуры

// Определяет параметры настройки подключения.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка выполнения оплаты.
//
// Возвращаемое значение:
//  Структура - параметры копирования:
//    * Наименование - Строка - наименование копируемой торговой точки;
//    * ИдентификаторУчастника - Строка - идентификатор участника Системы быстрых платежей;
//    * ИдентификаторМерчанта - Строка - идентификатор мерчанта настройки;
//    * ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей;
//    * Используется - Булево - признак активности настройки.
//
Функция ДанныеНастройкиПодключения(НастройкаПодключения) Экспорт
	
	ДанныеНастройки = Новый Структура;
	ДанныеНастройки.Вставить("Наименование", "");
	ДанныеНастройки.Вставить("ИдентификаторУчастника", Неопределено);
	ДанныеНастройки.Вставить("ИдентификаторМерчанта", Неопределено);
	ДанныеНастройки.Вставить("ВариантНастройки", Неопределено);
	ДанныеНастройки.Вставить("Используется", Ложь);
	
	Если НастройкаПодключения = Неопределено Тогда
		Возврат ДанныеНастройки;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Наименование КАК Наименование,
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ИдентификаторУчастника КАК ИдентификаторУчастника,
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ВариантНастройки КАК ВариантНастройки,
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Используется КАК Используется,
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ИдентификаторМерчанта КАК ИдентификаторМерчанта
		|ИЗ
		|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
		|ГДЕ
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка = &НастройкаПодключения";
	
	Запрос.УстановитьПараметр("НастройкаПодключения", НастройкаПодключения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	ЗаполнитьЗначенияСвойств(
		ДанныеНастройки,
		ВыборкаДетальныеЗаписи,
		"Наименование, ИдентификаторУчастника, ИдентификаторМерчанта, ВариантНастройки, Используется");
	
	Возврат ДанныеНастройки;
	
КонецФункции

// Определяет настройки подключения к Системе быстрых платежей
// по участнику.
//
// Параметры:
//  Идентификатор - Строка - идентификатор участника Системы быстрых платежей.
//
// Возвращаемое значение:
//  Массив Из Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей - используемые настройки.
//
Функция НастройкиПодключенияУчастникаСБП(Идентификатор) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
		|ГДЕ
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ИдентификаторУчастника = &Идентификатор
		|	И НастройкиПодключенияКСистемеБыстрыхПлатежей.Используется";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Определяет данные настройки подключения к Системе быстрых платежей.
//
// Параметры:
//  ИдентификаторМерчанта - Строка - идентификатор мерчанта.
//
// Возвращаемое значение:
//  Структура - параметры настройки:
//    * НастройкаПодключения - Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей
//      - настройка подключения к системе быстрых платежей.
//    * ИдентификаторУчастника - Строка - идентификатор участника системы быстрых платежей.
//
Функция ДанныеНастройкиПодключенияПоИдентификаторуМерчанта(ИдентификаторМерчанта) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НастройкаПодключения", ПустаяСсылка());
	Результат.Вставить("ИдентификаторУчастника", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка,
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ИдентификаторУчастника КАК ИдентификаторУчастника
		|ИЗ
		|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
		|ГДЕ
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ИдентификаторМерчанта = &ИдентификаторМерчанта
		|
		|УПОРЯДОЧИТЬ ПО
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Используется УБЫВ";
	
	Запрос.УстановитьПараметр("ИдентификаторМерчанта", ИдентификаторМерчанта);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат.НастройкаПодключения = ВыборкаДетальныеЗаписи.Ссылка;
		Результат.ИдентификаторУчастника = ВыборкаДетальныеЗаписи.ИдентификаторУчастника;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Определяет наличие настроек подключения к Системе быстрых платежей.
//
// Возвращаемое значение:
//  Булево - если Истина, есть настройки подключения.
//
Функция ЕстьНастройкиПодключения() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Признак
		|ИЗ
		|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
		|ГДЕ
		|	НЕ НастройкиПодключенияКСистемеБыстрыхПлатежей.ЭтоГруппа";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Формирует табличный документ с данными кассовой ссылки.
//
// Параметры:
//  ИдентификаторМакета - Строка - идентификатор макета наклейки.
//    Допустимые значения:
//      "НаклейкаСБПДверьНаСебя" - наклейка "Дверь на себя";
//
// Возвращаемое значение:
//  ТабличныйДокумент - подготовленный для печати документ.
//
Функция ПечатьНаклейки(ИдентификаторМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ИдентификаторМакета = "НаклейкаСБПКасса" Тогда
		Макет = СистемаБыстрыхПлатежейСлужебный.ПолучитьМакетСБП("StickerCash");
	ИначеЕсли ИдентификаторМакета = "НаклейкаСБПДверь" Тогда
		Макет = СистемаБыстрыхПлатежейСлужебный.ПолучитьМакетСБП("StickerDoor");
	Иначе
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(Макет);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли