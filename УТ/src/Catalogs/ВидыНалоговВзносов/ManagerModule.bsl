#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения:
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Истина;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов справочника.
//  ТабличныеЧасти - Структура - Ключ - Имя табличной части объекта.
//                               Значение - Выгрузка в таблицу значений пустой табличной части.
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НДС";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'НДС'", КодыЯзыков);// @НСтр-2

	ВидыНалоговВзносовЛокализация.ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти);
	
КонецПроцедуры

// Вызывается при начальном заполнении создаваемого элемента.
//
// Параметры:
//  Объект                  - СправочникОбъект.НаборыУпаковок - заполняемый объект.
//  Данные                  - СтрокаТаблицыЗначений - данные заполнения.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
Процедура ПриНачальномЗаполненииЭлемента(Объект, Данные, ДополнительныеПараметры) Экспорт
	
	Возврат;
КонецПроцедуры

// Получить ссылку предопределенного элемента.
// 
// Параметры:
//  ИмяПредопределенного - Строка - Имя предопределенного элемента
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыНалоговВзносов - Получить ссылку предопределенного элемента
Функция ПолучитьСсылкуПредопределенногоЭлемента(ИмяПредопределенного) Экспорт

	СправочникОбъект = Справочники.ВидыНалоговВзносов.СоздатьЭлемент();
	ИменаПредопределенных = СправочникОбъект.Метаданные().ПолучитьИменаПредопределенных();
	ЕстьПредопределенный = Ложь;
	Для Каждого Элемент Из ИменаПредопределенных Цикл
		Если НРег(Элемент) = НРег(ИмяПредопределенного) Тогда 
			ЕстьПредопределенный = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьПредопределенный Тогда
		Возврат Справочники.ВидыНалоговВзносов[ИмяПредопределенного];
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыНалоговВзносов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыНалоговВзносов КАК ВидыНалоговВзносов
	|ГДЕ
	|	НРЕГ(ВидыНалоговВзносов.ИдентификаторЭлемента) = &Идентификатор";
	Запрос.УстановитьПараметр("Идентификатор", НРег(ИмяПредопределенного));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
	Иначе
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ВидыНалоговВзносов");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Наименование =  НаименованиеПредопределенногоЭлемента(ИмяПредопределенного); // Строка
			//@skip-check bsl-nstr-string-literal-format
			СправочникОбъект.Наименование = НСтр(Наименование, ОбщегоНазначения.КодОсновногоЯзыка());
			СправочникОбъект.ИдентификаторЭлемента = ИмяПредопределенного;
			СправочникОбъект.Записать();
			Ссылка = СправочникОбъект.Ссылка;
			ЗафиксироватьТранзакцию();
		Исключение

			ОтменитьТранзакцию();

			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось записать предопределенный элемент справочника ""Виды налогов и взносов"" %1:
					|%2';"),
				ИмяПредопределенного,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение ТекстИсключения;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Ссылка;
КонецФункции

// Наименование предопределенного элемента.
// 
// Параметры:
//  ИмяПредопределенного - Строка - Имя предопределенного элемента
// 
// Возвращаемое значение:
//  Строка - наименовование предопределенного элемента
Функция НаименованиеПредопределенногоЭлемента(ИмяПредопределенного) Экспорт
	Наименование = "";
	Если ИмяПредопределенного = "НДС_ВвозимыеТовары" Тогда
		Наименование = "ru = 'НДС при импорте товаров из ЕАЭС'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДС_НалоговыйАгент" Тогда
		Наименование = "ru = 'НДС при исполнении обязанностей налогового агента'"; // @НСтр-1
	КонецЕсли;
	Если ПустаяСтрока(Наименование) Тогда
		Наименование = Перечисления.УдалитьТипыНалогов.НаименованиеПредопределенногоЭлемента(ИмяПредопределенного);
	КонецЕсли;
	Возврат Наименование;
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьКлиентСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьКлиентСервер.ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
КонецПроцедуры

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьСервер.ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка, Метаданные.Справочники.ВидыНалоговВзносов);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
КонецПроцедуры

#КонецЕсли

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
// 
// Возвращаемое значение:
// 	Массив - имена блокируемых реквизитов:
//		* БлокируемыйРеквизит - Строка - Имя блокируемого реквизита.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ПлательщикНалога");
	
	Возврат Результат;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// Заполняет сведения об обработчиках обновления.
// 
// Параметры:
//  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ВидыНалоговВзносов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.20.33";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0b42d254-ccd3-453d-91c0-a524c04084ac");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ВидыНалоговВзносов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	
	МассивКомментариев = Новый Массив(); // Массив из Строка
	МассивКомментариев.Добавить(НСтр("ru = 'Очищает предопределенные элементы справочника ""Виды налогов и взносов для WE""'"));
	Обработчик.Комментарий = СтрСоединить(МассивКомментариев, " ");
	
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	
	Читаемые = Новый Массив; // Массив из Строка
	Читаемые.Добавить(Метаданные.Справочники.ВидыНалоговВзносов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив; // Массив из Строка
	Изменяемые.Добавить(Метаданные.Справочники.ВидыНалоговВзносов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив; // Массив из Строка
	Блокируемые.Добавить(Метаданные.Справочники.ВидыНалоговВзносов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = СоздатьЭлемент().Метаданные().ПолноеИмя();
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Данные.Ссылка
	|ИЗ
	|	Справочник.ВидыНалоговВзносов КАК Данные
	|ГДЕ
	|	Данные.ИдентификаторЭлемента = """"";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры,
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры обработчика:
//   * ВерсияПодсистемыНаНачалоОбновления - Строка - версия подсистемы.
//   * ИмяОбработчика - Строка - имя обработчика.
//   * ОбновляемыеДанные - Структура.
//   * ОбработкаЗавершена - Булево, Неопределено - признак завершения обработки.
//   * Очередь - Число - очередь.
//   * ПрогрессВыполнения - Структура:
//     ** ВсегоОбъектов - Число - всего обработано объектов.
//     ** ОбработаноОбъектов - Число - обработано объектов.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		
		Параметры.ОбработкаЗавершена =
			ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
		
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	
	Для Каждого СтрокаТаблицы Из ОбновляемыеДанные Цикл
		
		ОписаниеИзменений = Новый Массив; // Массив из Строка
		ОписаниеИзменений.Добавить(НСтр("ru = 'При обновлении системы выполнены следующие операции:'"));
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаТаблицы.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ВидыНалоговВзносов
			
			Если СправочникОбъект <> Неопределено Тогда
				СправочникОбъект.ИдентификаторЭлемента = СправочникОбъект.ИмяПредопределенныхДанных;
			КонецЕсли;
			ПредставлениеСсылки = Строка(СправочникОбъект);
			
			Если СправочникОбъект.Модифицированность() Тогда
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
				
			Иначе
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СтрокаТаблицы.Ссылка);
				
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(
				ИнформацияОбОшибке(),
				СтрокаТаблицы.Ссылка,
				ПредставлениеСсылки);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
