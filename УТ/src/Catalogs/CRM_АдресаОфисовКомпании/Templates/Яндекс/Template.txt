<!--
Пример использования сервиса Яндекс.Карты.
Условия использования сервиса:
- http://legal.yandex.ru/maps_termsofuse/
- http://legal.yandex.ru/maps_api/

Версия скрипта 1.4.0.2 от 25.07.19 
 -->
 
<!DOCTYPE html>
<html>
<head>
	<meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	
	<title>	
	    Yandex maps API
	</title>

	<style>
		html,body {
			padding:0px;
			margin:0px;
			height:100%;
			overflow:hidden;
		}
	</style>

    <!--
        Подключаем API карт 2.x
        Параметры:
          - lang=ru-RU - язык русский.
    -->    
    <script src="http://yandex.st/jquery/1.6.4/jquery.min.js" type="text/javascript"></script>
    <script src="http://api-maps.yandex.ru/2.1-dev/?lang=ru-RU&apikey=9825d89c-81b9-4a1f-9287-0f55ea85758e" type="text/javascript"></script>
    <script type="text/javascript">
        
        // Как только будет загружен API и готов DOM, выполняем инициализацию
        
		var myMap, myCollection, route;
		var panelIsVisible = false;
		var map_for_1c81;
		var PageLoaded = false;
		
		try {
			ymaps.ready(initialize);    //лучше чем window.onload, т.к. происходит только после того как map yandex загрузится 
		} catch (err) {
		}
		
		function initialize () {
		    map_for_1c81 = false;
		    //получим координаты центра карты						
			latCenter = 55.751574; // Москва
			lonCenter = 37.573856;
						
		    //вместо window.name используестся div "СoordinatesСenter, т.к. в из 1С до него надежней достучаться
			CoordsOfCenter = GetName().split("@");
			if (CoordsOfCenter.length==3) {
				latCenter = CoordsOfCenter[0];
				lonCenter = CoordsOfCenter[1];				
				windowname = CoordsOfCenter[2];
				SetName(windowname);
			}
			
			myMap = new ymaps.Map("map_canvas",
             		{
             		    //center: [55.76, 37.64], // Москва
             		    center: [latCenter, lonCenter],
             		    zoom: 13,
						<!-- controls: ['zoomControl','rulerControl','searchControl'], -->
						//controls: ['zoomControl','rulerControl'],
             		    // Масштабирование карты колесом
             		    behaviors: ['default', 'scrollZoom']
             		}, {
						searchControlProvider: 'yandex#search'
					}

                );
            $('#search_form').submit(function () {
                var search_query = $('input:first').val();

                ymaps.geocode(search_query, {results: 100}).then(function (res) {
                    myMap.geoObjects.removeAll();
                    myMap.geoObjects.add(res.geoObjects);
                });
				PageLoaded = true;
                return false;
            });            

            var CurNameWindow = GetName();
			
            var Ed = CurNameWindow.indexOf("LabelEditor");
            if (CurNameWindow.indexOf("1C81") >= 0) {
                map_for_1c81 = true;
                SetName(CurNameWindow);
            };
			
            if (Ed == 0) {
				
			    myMap.events.add('click', function (e) {
			        var coords = e.get('coords');
										
					//преобразуем координаты
			        TextCoords = coords + "";
			        var text = TextCoords.split(',');
					text1 = text[0];
					text2 = text[1];
					//var MyCoords = ConvertWGS84NMEA(text1).toFixed(4) + ", " + ConvertWGS84NMEA(text2).toFixed(4);
					var MyCoords = text1 + ", " + text2;

			        // Отправим запрос на геокодирование
					//ymaps.geocode(coords).then(function (res) {
					// Добавим на карту метку в точку, по координатам которой запрашивали обратное геокодирование
					var PlaceMarkWithCoords = new ymaps.Placemark(coords, 
							{ iconContent: MyCoords }, 
							//{ preset: 'twirl#redStretchyIcon', balloonMaxWidth: '250' }
							{
								preset: "islands#redStretchyIcon",
								// Отключаем кнопку закрытия балуна.
								balloonCloseButton: false,
								// Балун будем открывать и закрывать кликом по иконке метки.
								hideIconOnBalloonOpen: false
							}							
						);					
						
					myMap.geoObjects.removeAll();
					myMap.geoObjects.add(PlaceMarkWithCoords);
						
					//});
					//aa 
					setWindowName("LabelEditor_" + MyCoords);
				
					//var button = document.getElementById("ClickEvent");
					//button.apObjectType = "map";
					//button.apObjectID   = "";
					//button.apValue 	    = MyCoords;
					
					////if (myMap.balloon.isOpen())	{
					////	myMap.balloon.close();
					///}
					//button.click();
					////aa 171027
				});
            }
			
            setWindowName(GetName() + "_initEnd");
			PageLoaded = true;
			document.getElementById('Open').innerHTML = false;				
        }
                         		
		function Convert(coor)  {  	
			var flTemp =  coor;
			var nTemp =  flTemp / 100.0;  
			nTemp = nTemp - (nTemp%1); 
			var flMin = flTemp - 100.0 * nTemp;
			var Co = nTemp + flMin / 60.0;
			result = Co.toFixed(6);
											
			return result;		 
		}
		
		function GetName() {
		    //if (map_for_1c81) return document.title;
		    //return document.getElementById("СoordinatesСenter").innerHTML;
			if (window.name=="") return document.getElementById("СoordinatesСenter").innerHTML;
			return window.name;
		}
		
		function SetName(value) {
		    //if (map_for_1c81) { document.title = value }
		    //else { document.getElementById("СoordinatesСenter").innerHTML = value}
			document.getElementById("СoordinatesСenter").innerHTML = value;
			window.name = value;
		}

        //для передачи координат используем div СoordinatesСenter
		function setWindowName (coords) {		
		    Ed = false;
		    end_name = "";
		    
		    Ed = GetName().indexOf("_initEnd") >= 0;
		    
		    if (Ed) end_name = "_initEnd";
		    SetName(coords + end_name);
        }
		
		//конвертация координат
		function ConvertWGS84NMEA(coor) {
			NMEA_coord = Math.floor(coor) * 100 + (coor - Math.floor(coor)) * 60;
		
			return NMEA_coord;
		}
		
		//вывод маркера на карту		
		function setMarker(lat, lon, Header, Body, Footer, Help, OpenBallon) {
			
											
				//var myPlacemark = new ymaps.Placemark([Convert(lat), Convert(lon)],
				var myPlacemark = new ymaps.Placemark([lat, lon],
					{				
					// Свойства   
					iconContent: Body,
	                balloonContentHeader: Header,
	                balloonContentBody: Body,                
	                balloonContentFooter: Footer,
	                hintContent: Help,
					}, {
       				preset: "islands#blueStretchyIcon"
    				});
				myMap.geoObjects.add(myPlacemark);
				if(OpenBallon==true) {
				myPlacemark.balloon.open();
				}
		}
		
		function GetIDObject(Element) {
			document.getElementById('ID_Object').innerHTML = Element;	
			document.getElementById('Open').innerHTML = true;	
		}
		
		//вывод маркера на карту		
		function setClusterer(pointsLat, pointsLon, catalog,  pointNameIcon, pointHeader, pointBody, pointFooter, pointHelp, color) {
						
			var ArLat = pointsLat.split("&");   // Точки широты маршрута
			var ArLon = pointsLon.split("&");	  // Точки долготы маршрута	
			var ArHeader 	= pointHeader.split("&"); 
			var ArBody 		= pointBody.split("&");
			var ArFooter 	= pointFooter.split("&");
			var ArHelp		= pointHelp.split("&");
			var ArNameIcon	= pointNameIcon.split("&");
			var ArColor = '';
						
			if(color=='#1bad03') {
				preset = 'islands#invertedDarkGreenClusterIcons';	
			} else if(color=='#196dce') {
				preset = 'islands#invertedDarkBlueClusterIcons';	
			} else {
				preset = 'default#pieChart';
				ArColor = color.split("&");
			}
			
			if(ArColor=='') {
				clusterer = new ymaps.Clusterer({
					preset: preset,
					groupByCoordinates: false,
					clusterDisableClickZoom: true,
					clusterHideIconOnBalloonOpen: false,
					geoObjectHideIconOnBalloonOpen: false
				});
			} else{
				clusterer = new ymaps.Clusterer({
					clusterIconLayout: preset,
					groupByCoordinates: false,
					clusterDisableClickZoom: true,
					clusterHideIconOnBalloonOpen: false,
					geoObjectHideIconOnBalloonOpen: false
				});
			}
			
			geoObjects = [];
			try{

				for(var i = 0, len = ArLat.length; i < len; i++) {
					lat = ArLat[i];
					lon = ArLon[i];
					if(ArColor=='') {
						var options = {
							// Опции
							iconLayout: 'default#image',
							iconImageHref: catalog + ArNameIcon[i], // картинка иконки
							iconImageSize: [32, 32], // размеры картинки
							iconImageOffset: [-16, -16], // смещение картинки				
							//balloonCloseButton: false, // убираем знак закрытия из балуна				
							hideIconOnBalloonOpen: false, //не скрывать балун при на его нажатии
						}	
					} else {
						var options = {
							// Опции
							iconColor: RGB2HEX(ArColor[i]), //'#3caa3c'
							iconImageSize: [32, 32], // размеры картинки
							iconImageOffset: [-16, -16], // смещение картинки				
							//balloonCloseButton: false, // убираем знак закрытия из балуна				
							hideIconOnBalloonOpen: false, //не скрывать балун при на его нажатии
						}
					}
					
					//geoObjects[i] = new ymaps.Placemark([Convert(lat), Convert(lon)],
					geoObjects[i] = new ymaps.Placemark([lat, lon],
					{				
						// Свойства   
						balloonContentHeader: ArHeader[i],
						balloonContentBody: ArBody[i],                
						balloonContentFooter: ArFooter[i],
						hintContent: ArHelp[i],
						clusterCaption: ArHeader[i]
					},				
						options
					);
				}
				
				clusterer.add(geoObjects);
				myMap.geoObjects.add(clusterer);	
			} catch (err) {
				alert(err);
			}
		}
		
		// Центрируем и масштабируем карту по маркерам		
		function ShowAllMarkers() {
			try{
			 if (myMap != null && myMap.geoObjects.getLength() != 0)
			 {	
		        myMap.setBounds(myMap.geoObjects.getBounds(), {
					checkZoomRange: true,
					}).then(function () {
					// Действие было успешно завершено.
					}, function (err) {
					// Не удалось показать заданный регион
					// ...
					}, this);
			 }	
			 }catch(err) {}
			
		}
		
		// Удаляем все, что было отображено ранее
		function ClearCollection(){			
		    if (myMap != null) {
				myMap.geoObjects.removeAll();
		    }
		}  

		function GoToMarker(lat, lon) {
			
			//myMap.setBounds([[Convert(lat),Convert(lon)], [Convert(lat),Convert(lon)]], {checkZoomRange: true});
			myMap.setBounds([[lat-0.005,lon-0.005], [lat+0.005,lon+0.005]], {checkZoomRange: true});
			}
			
				
		//вывод цветного маркера на карту		
		function setColorMarker(lat, lon, MColor, Header, Body, Footer, Help, Order) {
		 
			//значки Яндекс-карт: https://tech.yandex.ru/maps/doc/jsapi/2.1/ref/reference/option.presetStorage-docpage/	
			 
			var options = {
			// Опции
			iconImageSize: [32, 32], // размеры картинки
			iconImageOffset: [-16, -16], // смещение картинки
			preset: 'islands#dotIcon',//'islands#dotIcon',//"twirl#redStretchyIcon",
			iconColor: RGB2HEX(MColor), //'#3caa3c'
			balloonCloseButton: true,  // убираем знак закрытия из балуна, т.к. нажатие по этой кнопки в IE 9 приводит к исключению
			}

					
		     //var myPlacemark = new ymaps.Placemark([Convert(lat), Convert(lon)],
		     var myPlacemark = new ymaps.Placemark([lat, lon],
					{
					// Свойства              
					
	                balloonContentHeader: Header,
	                balloonContentBody: Body,                
	                balloonContentFooter: Footer,
	                hintContent: Help,
					iconContent: Order
					
					},
					options 
					);					
			 myMap.geoObjects.add(myPlacemark);			
		}
		
		// вывод полигона на карту		
		function SetPolygon(pointsLat,pointsLon,bgColor,borderColor,opacit,strokeW, HContent){
			
			var ArLat = pointsLat.split(";");   // Точки широты маршрута
			var ArLon = pointsLon.split(";");	  // Точки долготы маршрута	
			
			
			var length = ArLat.length;
			var geometry = new Array(); 
			var i = 0;
			
			for (i=0; i<length-1; i++)				
			{      
				var latPoint = ArLat[i];
				var lonPoint = ArLon[i];
				//geometry[i] = [Convert(latPoint), Convert(lonPoint)];// [latPoint, lonPoint];
				geometry[i] = [latPoint, lonPoint];// [latPoint, lonPoint];
			}
			
			                // Создаем многоугольник
               myPolygon = new ymaps.Polygon([geometry
                    // Координаты вершин внешней границы многоугольника.
					
                ], {
                    //Свойства
                    balloonContent: HContent // подсказка

                }, {
                    // Опции.
                    // Цвет заливки 
                    fillColor: RGB2HEX(bgColor),//'#FF0000',//(красный)
                    // Цвет границ 
                    strokeColor: RGB2HEX(borderColor),//'#0000FF', // (синий)
                    // Прозрачность (полупрозрачная заливка)
                    opacity: opacit, //0.6,
                    // Ширина линии
                    strokeWidth: strokeW,
                    // Стиль линии
                    strokeStyle: 'solid'
                });
	 
            myMap.geoObjects.add(myPolygon);
			//myMap.setBounds(myMap.geoObjects.getBounds());
		}
		
		function SetMapCenter(){
	
			myMap.setBounds(myMap.geoObjects.getBounds());
		
		}
		
		function RGB2HEX(StringRGB){
		
			var ArRGB = StringRGB.split(",");

			var ColorHex = componentToHex(ArRGB[0]) + componentToHex(ArRGB[1]) + componentToHex(ArRGB[2]);
			
			return "#" + ColorHex;
		}
	
		function componentToHex(n){
		
			n = parseInt(n,10);
			if (isNaN(n)) return "00";
			n = Math.max(0,Math.min(n,255));
			return "0123456789ABCDEF".charAt((n-n%16)/16)+ "0123456789ABCDEF".charAt(n%16);
		
		}
		
		function setPolyline(pointsLat, pointsLon, strokeColor, strokeWidth, strokeStyle, opacity, strPolygone,  strDuration, strDistance, RouteByPlan, setSummary, strHint , strID) {
			
			var ArPointsLat = pointsLat.split(";");   // Точки широты маршрута
			var ArPointsLon = pointsLon.split(";");	  // Точки долготы маршрута	
			//var ArPointsPol = strPolygone.split(";"); // Точки полигона трека
			var ArDuration  = strDuration.split(";"); // Время между точками
			var ArDistance  = strDistance.split(";"); // Расстояние между точками
			
			var length = ArPointsLat.length;
			
			var latStart = ArPointsLat[length-2];
			var lonStart = ArPointsLon[length-2];
			
			var latFin = ArPointsLat[length-1];
			var lonFin = ArPointsLon[length-1];   			
			
			var geometry = new Array(); 			
			
			var i = 0;
			
			// Начало маршрута
			//geometry[i] = [Convert(latStart), Convert(lonStart)];
			geometry[i] = [latStart, lonStart];
			var strokeColor = RGB2HEX(strokeColor);
			
			for (i=0; i<length; i++)				
			{      
				var latPoint = ArPointsLat[i];
				var lonPoint = ArPointsLon[i];
				//geometry[i] = [Convert(latPoint), Convert(lonPoint)];
				geometry[i] = [latPoint, lonPoint];
			}
						
			// Конец маршрута
			//geometry[i] = [Convert(latFin), Convert(lonFin)];
			geometry[i] = [latFin, lonFin];
						
			//outline 	String		 Наличие обводки. 			
			//strokeOpacity 	Number		 Прозрачность контура. 
						
			polyline = new ymaps.Polyline(geometry, {hintContent: strHint, APID: strID}, 
			options = {
						balloonCloseButton: true, 
				        draggable:     false,
				        opacity:  	   opacity,	     // Общая прозрачность 
				        strokeOpacity: opacity,      // Прозрачность контура
				        strokeColor:   strokeColor,  // Цвет
				        strokeWidth:   strokeWidth,  // Толщина линии
				        strokeStyle:   strokeStyle   // Стиль	
            		  }
            );
             
            polyline.events.add('mousemove', OnPolylineMousemove);
			
			polyline.properties.set("APID",   strID||null);
			polyline.properties.set("arTime", ArDuration);
			polyline.properties.set("Legend", strHint||null);
			
			myMap.geoObjects.add(polyline);
			
			//if (RouteByPlan==0)
			//{			
			//	 // Широта SW
			//     var SouthWestLat = Convert(ArPointsPol[0]);
			//     // Долгота SW
			//    var SouthWestLon = Convert(ArPointsPol[1]);	     
			//     // Широта NE
			//     var NorthEastLat = Convert(ArPointsPol[2]);
			//     // Долгота NE
			//     var NorthEastLon = Convert(ArPointsPol[3]);
			//     
			//     myMap.setBounds([[SouthWestLat,SouthWestLon], [NorthEastLat,NorthEastLon]], {
			//	     checkZoomRange: true				     
			//	});	    
			//}
			
			<!-- if (setSummary==1) -->
			<!-- { -->
				<!-- // Выводим легенду -->
				<!-- var summaryPanel = document.getElementById("directions_panel"); -->
				<!-- summaryPanel.innerHTML = ""; -->
				
				<!-- var route = new Array(); 			 -->
				
				<!-- var totalValues = computeTotalValues(ArDuration, ArDistance, route); -->
				   				   
				<!-- summaryPanel.innerHTML += "<b>Расшифровка маршрута:</b><br />"; -->
				<!-- summaryPanel.innerHTML += "<b>Общее расстояние: " + totalValues[0] + "</b><br />"; -->
				<!-- summaryPanel.innerHTML += "<b>Общее время: " + totalValues[1] + "</b><br />"; -->
				<!-- summaryPanel.innerHTML += "<br>"; -->
				
				<!-- for (var i=1; i<length; i++) { -->
					<!-- var routeSegment = i;	  -->
					<!-- var dist = Number(ArDistance[i]); -->
					<!-- var dur  = getDurationStr(Number(ArDuration[i])); -->
					<!-- dist = dist / 1000.0;   -->
					<!-- dist =  dist.toFixed(2);   -->
					<!-- summaryPanel.innerHTML += "<b>Отрезок №: " + routeSegment  + "</b><br/>"; -->
					<!-- summaryPanel.innerHTML += "От Точки маршрута № " + (routeSegment) + " до "; -->
					<!-- summaryPanel.innerHTML += "Точки маршрута № " + (routeSegment + 1) + "<br />"; -->
					<!-- summaryPanel.innerHTML += "Расстояние: " + dist + " км. Время: " + dur + "<br /><br />";			 -->
				<!-- } -->
				
				<!-- summaryPanel.innerHTML += "<br/><br/>"; -->
			<!-- } -->
     
        }        
         
		function OnPolylineClick(e) {
			var coords   = e.get('coords');
			var polyline = e.get('target');
			
			var button = document.getElementById("ClickEvent");
			button.apObjectType = "polyline";
			button.apObjectID   = polyline.properties.get("APID");
			button.apValue 	    = coords[0].toFixed(6) + ", " + coords[1].toFixed(6);
			
			if (myMap.balloon.isOpen())	{
				myMap.balloon.close();
			}
			button.click();
		}		 
		function OnPolylineMousemove(e) {
			var polyline = e.get('target');
			polyline.properties.set("hintContent", getPolylineLegend(polyline, e.get('coords')));
		}
		
		function getPolylineLegend(polyline, coords) {
			var time = null;
			var geometry = polyline.geometry;
			var arTime   = polyline.properties.get("arTime");
			var APID   = polyline.properties.get("APID");
			var i, len, minDist, dist;
			minDist = 1000000000;
			
			len = geometry.getLength();
			
			for (i = 0; i < len; ++i) {
				dist = ymaps.coordSystem.geo.getDistance(geometry.get(i), coords);
				if (dist < minDist) {
					minDist = dist;
					time = arTime[i];
				}
			}
			
			if( time == null || APID == null)
				return polyline.properties.get("Legend")
			else
				return polyline.properties.get("Legend") + " - " + time;
		}
		  
		function computeTotalValues(ArDuration, ArDistance, myroute) {
		 
		  var totalDist = 0;	  
		  var totalDur  = 0;
		  
		  if (myroute.length==0)
		  {	 
		  	for (i=0; i < ArDuration.length; i++) {    		   
		  		var dur  = Number(ArDuration[i]);
		  		var dist = Number(ArDistance[i]);
		  		
		  		totalDur  += dur;
		    	totalDist += dist;
		  	} 	
		  }
		  else
		  {
		  	for (i=0; i < myroute.length; i++) {    		   
		  		dist = myroute[i].getLength();
				dur  = myroute[i].getTime();
			
				totalDur  += dur;
		    	totalDist += dist;
		  	} 	
		  }
		 	
		  // Переводим в километры	 
		  totalDist = totalDist / 1000.0;
		  
		  Ar = new Array;
		  Ar[0] = totalDist.toFixed(1) + " км.";
		  Ar[1] = getDurationStr(totalDur); // Представление времени
		  
		  return Ar;   
		} 	
		   
	
		function chunk(arr, chunkSize) {// Разбивает массив на подмассивы
			var R = [];
			for (var i = 0, len = arr.length; i < len; i += chunkSize)
				R.push(arr.slice(i, i + chunkSize));
			return R;
		}
		   
		function setRoute(pointsLat, pointsLon, strDuration, strDistance, setSummary, strokeColor, strokeWidth, strokeStyle, opacity) {     
			
			//маршрутизатор: http://api.yandex.ru/maps/doc/jsapi/2.0/dg/concepts/router.xml
			document.getElementById("Dist").innerHTML = "js_result";
			
			var ArPointsLat = pointsLat.split(";");   // Точки широты маршрута
			var ArPointsLon = pointsLon.split(";");	  // Точки долготы маршрута				
			var ArDuration  = strDuration.split(";"); // Время между точками
			var ArDistance  = strDistance.split(";"); // Расстояние между точками
			
			var length = ArPointsLat.length;		
			var myArray = new Array(); 			
			
			var i = 0;
			if (length <= 1) {
			    return;
			};	
			
			for (i=0; i<length; i++)				
			{      
				var latPoint = ArPointsLat[i];  
				var lonPoint = ArPointsLon[i];  
			    //myArray.push([Convert(latPoint), Convert(lonPoint)]);
				myArray.push([latPoint, lonPoint]);			            
			}
			
			var arrsChunk = chunk(myArray, 300); // Разбиваем массив на несколько подмассивов из 300 элементов
		
			var myLatlngFirst = arrsChunk[0][0]; 		
			FirstIteration = true;
	
			var dis = [""];
			
			var summaryPanel = document.getElementById("directions_panel");
			summaryPanel.innerHTML = "";	
			var strokeColor = RGB2HEX(strokeColor);	
			
			for (var i = 0; i < arrsChunk.length; i++)
			{
				
				var subArr = arrsChunk[i];
				var wayPts = new Array(); // Создаем массив для промежуточных точек 
				var myLatlngStart = myLatlngFirst;
				var myLatlngFin = subArr[subArr.length - 1];
				myLatlngFirst = myLatlngFin;
			
				var firstvalueP = 0;
				if (FirstIteration) {
					firstvalueP = 1;
					FirstIteration = false;
				}
			
				wayPts.push({
		            type: 'wayPoint', //************* wayPoint
		            point: myLatlngStart
		        })
					
				for (var p = firstvalueP; p < subArr.length; p++) {
		        wayPts.push({
		            type: 'wayPoint', //************* wayPoint
		            point: subArr[p]
		        });
				}
			
				// Прокладывание маршрута  
				try {
					<!-- alert(wayPts.length); -->
					ymaps.route(wayPts, {mapStateAutoApply: false}).then(function (router) {               			             
					
					route = router;		 
					//route.options.set({ strokeColor: strokeColor, opacity: opacity });
					<!-- alert(router) -->
					route.getPaths().options.set({ strokeColor: strokeColor, opacity: opacity });
					//style = new ymaps.Style(); // Стиль для меток и линий маршрутизатора
					//style.lineStyle = new ymaps.LineStyle(); // Задаем стиль линии
					//style.lineStyle.strokeWidth = 5; // Ширина линии
					//style.lineStyle.strokeColor = strokeColor; // Цвет линии в формате RGBA

					//route.setStyle(style); // Применяем стиль к маршруту
					myMap.geoObjects.add(route);
					//var disArray = new Array(); 			 
					var points = route.getWayPoints();
					for (var i = 0; i < (points.getLength()) ; i++) {
						points.get(i).options.set('visible', false); // убираем автоматически, генерируемые балуны
					}
					
					for (var i = 0; i < (route.getPaths().getLength()) ; i++) {
						
						dis[0] = dis[0] + ',' + route.getPaths().get(i).getLength();
						if (dis[0]!="") {
							//alert(dis[0]);
							document.getElementById("Dist").innerHTML = dis[0];		
						}	
						else{
							dis[0] = "js_result";
						}						
					}
					
					if (setSummary==1)
					{   								
					   var way = route.getPaths().get(0); 
									 
					   var segments = way.getSegments();
					   
					   var totalValues = computeTotalValues(ArDuration, ArDistance, segments);
					   
					   summaryPanel.innerHTML += "<b>Расшифровка маршрута:</b><br />";
					   summaryPanel.innerHTML += "<b>Общее расстояние: " + totalValues[0] + "</b><br />";
					   summaryPanel.innerHTML += "<b>Общее время: " + totalValues[1] + "</b><br />";
					   summaryPanel.innerHTML += "<br>";
					   
					   for (var i = 0; i < (segments.length - 1); i++) {			   	  
						  
						  //var dur  = getDurationStr(Number(ArDuration[i]));				   	  
						  var dur = getDurationStr(segments[i].getTime());
						  var dist = segments[i].getLength();
						  // Расчет в километрах
						  dist = dist/1000.0;  
						  dist = dist.toFixed(2);  
						  
						  if (i==0) 
						  {
							var start_street = "Начало маршрута";
						  }
						  else 
						  {
							var start_street = segments[i].getStreet();
						  }
						  
						  var end_street   = "";
						  if (i==(segments.length-1)) 
						  {
							end_street = "Конец маршрута";
						  }
						  else 
						  {
							end_street = segments[i+1].getStreet();
						  }
						  
						  if(start_street == "") 
						  {
							start_street = "<Неизвестно>";
						  }
						  
						  if(end_street == "") 
						  {
							end_street = "<Неизвестно>";
						  } 				   	  
								  
						  summaryPanel.innerHTML += "<b>Отрезок №: " + (i+1) + "</b><br />";
						  summaryPanel.innerHTML += "От " + start_street + " до ";
						  summaryPanel.innerHTML += end_street + "<br />";				  	
						  summaryPanel.innerHTML += "Расстояние: " + dist + " км.," + ". Время: " + dur + "<br /><br />";					 
					  }		  
					 
					  summaryPanel.innerHTML += "<br/><br/>";    			  
					}
					else if (setSummary==2) // запись фактического расстояния
					{
						document.getElementById("FactDist").innerHTML = route.getLength();
						//alert(document.getElementById("FactDist").innerHTML);	
					}
					else if (setSummary==3) // запись планового расстояния
					{
						document.getElementById("PlanDist").innerHTML = route.getLength();
						//alert(document.getElementById("PlanDist").innerHTML);
					};
					
					
				}, function (error) {
				 alert("Не удалось проложить маршрут по дорогам!");
				
               
            });
			} catch (err) {
			
			}
				
			}		
			
		} 
        
       function getDurationStr(totalDur) {            
	      var totalMin = totalDur/60.0;
		  var totalH   = totalDur/3600.0;	  
		  var ostMin   = totalMin - Math.floor(totalH)*60; 
		  
		  totalMin = totalMin.toFixed(0);
		  ostMin   = ostMin.toFixed(0);
		  
		  var strDur = "";
		  
		  if (totalH < 1) 
		  {
		  	strDur = totalMin + " мин."
		  }
		  else{
		  	strDur = Math.floor(totalH) + " ч. " + ostMin + " мин."
		  }	      
		  
		  return strDur;   		
		}   
		
		function showPanel() {    	
			
			_map_canvas = document.getElementById("map_canvas");
			_panel = document.getElementById("directions_panel");
			
			if (panelIsVisible == false)  
		    {  
		        _map_canvas.style.width='70%';  
		        panelIsVisible = true;                   
		    }  
		   	else  
		    {  
		        _map_canvas.style.width='100%';  		     		        
		        panelIsVisible = false;
			}	  
			
			myMap.container.fitToViewport(); // Перерисовывает карту			
		}

        //функция для выполнения кода, переданного из учетной системы
		function ExecCommand() {
		    //чтение переданной команды
		    code = document.getElementById("ExtCommand").innerHTML;
		    //выполнение комадны
		    result = "" + eval(code);
		    //запись результата
		    document.getElementById("BufferData").innerHTML = result;
		}
		function SetBounds(strPolygone){//в отдельной функции лучше, т.к. даже если в скрипте будет ошибка - все равно спозиционируем карту
		try{
			var ArPointsPol = strPolygone.split(";"); // Точки полигона трека
			// Широта SW
			//var SouthWestLat = Convert(ArPointsPol[0]);
			var SouthWestLat = ArPointsPol[0];
			// Долгота SW
			//var SouthWestLon = Convert(ArPointsPol[1]);	
			var SouthWestLon = ArPointsPol[1];     
			// Широта NE
			//var NorthEastLat = Convert(ArPointsPol[2]);
			var NorthEastLat = ArPointsPol[2];
			// Долгота NE
			//var NorthEastLon = Convert(ArPointsPol[3]);
			var NorthEastLon = ArPointsPol[3];
			     
			myMap.setBounds([[SouthWestLat,SouthWestLon], [NorthEastLat,NorthEastLon]], {
					checkZoomRange: true				     
			});
			}
			catch(err){
			}
			}
	</script>
	
</head>

<BODY>	  	
<!--<form id="search_form">
    <input type="text" value="Ввести строку для поиска объекта на карте" style="width: 720px;"/>
    <input type="submit" value="Найти"/>        
</form>
-->
<form id="formInfo">    
    <input style="display:none" id="routeInfo" type="button" value="Показать панель" onclick="showPanel();" />        
</form>                                                                                                  
<div id="map_canvas" style="float:left;width:100%;height:100%;"></div>
<input id="closePanel" type="button" value="Скрыть панель" onclick="showPanel();" />         	
<div id="directions_panel" style="height:100%;overflow-y:scroll;background-color:#FFEE77;margin:10px;border-width:2px;"></div>	
<div id="ExtCommand" style="display:none">extcommand</div>
<div id="EventName" style="display:none">js_event</div>
<div id="BufferData" style="display:none">js_result</div>
<div id="PlanDist" style="display:none">js_result</div>
<div id="FactDist" style="display:none">js_result</div>
<div id="СoordinatesСenter" style="display:none"></div>
<div id="Dist" style="display:none">js_result</div>
<input id="SendEvent" type=button style="display:none" onmouseup="ExecCommand();" />  
<input id="ClickEvent" style="display:none" type=button apObjectType="" apObjectID="" apValue="">
<div id="ID_Object" style="display:none"></div>
<div id="Open" style="display:none">false</div>
</BODY>
</HTML>