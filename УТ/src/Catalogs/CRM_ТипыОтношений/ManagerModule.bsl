#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет список значений значениями справочника.
//
// Параметры:
//  СписокЗначений	 - СписокЗначений	 - Список, который будет заполнен значениями справочника.
//  МассивВыбранных	 - Массив			 - Массив выбранных.
//
Процедура ЗаполнитьСписокОтношений(СписокЗначений, МассивВыбранных = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ТипыОтношений.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_ТипыОтношений КАК CRM_ТипыОтношений
	                      |ГДЕ
	                      |	НЕ CRM_ТипыОтношений.ПометкаУдаления
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	CRM_ТипыОтношений.РеквизитДопУпорядочивания");
	СписокЗначений.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Если МассивВыбранных <> Неопределено Тогда
		Для каждого Тип Из МассивВыбранных Цикл
			ЭлементСписка = СписокЗначений.НайтиПоЗначению(Тип);
			Если ЭлементСписка <> Неопределено Тогда
				ЭлементСписка.Пометка = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет предопределенные данные.
//
// Параметры:
//  Параметры - Структура - Параметры выполнения.
//
Процедура ЗаполнитьПредопределенныеДанные(Параметры) Экспорт
	
	Объект = Покупатель.ПолучитьОбъект();
	Объект.РеквизитДопУпорядочивания = 1;
	Объект.Клиент = Истина;
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
	Объект = Поставщик.ПолучитьОбъект();
	Объект.РеквизитДопУпорядочивания = 2;
	Объект.Поставщик = Истина;
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();

	Объект = Конкурент.ПолучитьОбъект();
	Объект.РеквизитДопУпорядочивания = 3;
	Объект.Конкурент = Истина;
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
	Объект = Другое.ПолучитьОбъект();
	Объект.РеквизитДопУпорядочивания = 4;
	Объект.ПрочиеОтношения = Истина;
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
КонецПроцедуры

// Перезаписывает партнеров с типом.
//
// Параметры:
//  ПараметрыМетода - Структура - Параметры выполнения метода.
//  АдресРезультата - Строка 	- Адрес результата.
//
Процедура ПерезаписатьПартнеровСТипом(ПараметрыМетода, АдресРезультата) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ПартнерыCRM_ТипыОтношений.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Партнеры.CRM_ТипыОтношений КАК ПартнерыCRM_ТипыОтношений
	                      |ГДЕ
	                      |	ПартнерыCRM_ТипыОтношений.ТипОтношений = &ТипОтношений");
	Запрос.УстановитьПараметр("ТипОтношений", ПараметрыМетода.ТипОтношений);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПартнерОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			ПартнерОбъект.Заблокировать();
			ПартнерОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации("Изменение типа отношений в партнере",
				УровеньЖурналаРегистрации.Информация, , ,
				НСтр("ru='Не удалось заблокировать партнера для записи';en='Failed to block partner for recording'") + ": " + ПартнерОбъект.Наименование);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ТипыОтношений.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_ТипыОтношений КАК CRM_ТипыОтношений
	                      |ГДЕ
	                      |	НЕ CRM_ТипыОтношений.ПометкаУдаления
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	CRM_ТипыОтношений.РеквизитДопУпорядочивания");
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
КонецПроцедуры

#КонецОбласти

#КонецЕсли
