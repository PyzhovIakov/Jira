
#Область ОписаниеПеременных

&НаКлиенте
Перем CRM_ВсеСчетчики;

&НаКлиенте
Перем ПараметрыЦелей;

&НаКлиенте
Перем ПредыдущееЗначениеВключено;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'форму Источника заявок'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
		Справочник_CRM_ИсточникиПолученияЛидов_ФормаЭлемента_ПриСозданииНаСервере(
			ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	УстановитьПривилегированныйРежим(Истина);

	Если ЗначениеЗаполнено(Объект.CRM_РольОтветственного) Тогда
		РолеваяАдресация = 1;
	КонецЕсли;
	Элементы.ОтветственныйМенеджер.Видимость = НЕ РолеваяАдресация;
	Элементы.CRM_РольОтветственного.Видимость = РолеваяАдресация;
	
	РасписаниеРегламентногоЗадания = Неопределено;
	
	CRM_ИспользоватьПотенциальныхКлиентов = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПотенциальныхКлиентов");
	
	// Заполним список исключений
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		Сценарий = Объект.Сценарий;
		Если Сценарий = Перечисления.CRM_CallTrakingСценарии.WebService ИЛИ
			 Сценарий = Перечисления.CRM_CallTrakingСценарии.ПочтовоеСообщение ИЛИ
			 Сценарий = Перечисления.CRM_CallTrakingСценарии.ВнешнийAPI ИЛИ
			 Сценарий = Перечисления.CRM_CallTrakingСценарии.РучнойВвод ИЛИ
			 Сценарий = Перечисления.CRM_CallTrakingСценарии.JivoSite ИЛИ
			 Сценарий = Перечисления.CRM_CallTrakingСценарии.ВнешняяОбработка Тогда
		
			РежимВыбораСценария = "Виджет";
			
		 ИначеЕсли НЕ Объект.ИспользоватьГенераторЗвонка Тогда
			
			РежимВыбораСценария = "Сервис";
		
		 ИначеЕсли Объект.ИспользоватьГенераторЗвонка Тогда

			РежимВыбораСценария = "Коллтрекинг";
			
		КонецЕсли;
		
		Если Объект.Сценарий = Перечисления.CRM_CallTrakingСценарии.WebService Тогда
			МакетВиджета = ОбновитьДанныеВиджета();
			ЗаполнениеДанныхПоИСключениям();
		КонецЕсли;
		
		GUIDЗадания = Объект.Ссылка.УникальныйИдентификатор();
		НайденныеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Ключ", GUIDЗадания));
		Если НайденныеЗадания.Количество() > 0 Тогда
			РасписаниеРегламентногоЗадания = НайденныеЗадания[0].Расписание;
		КонецЕсли;

	Иначе
		Объект.Сценарий = Перечисления.CRM_CallTrakingСценарии.РучнойВвод;
		РежимВыбораСценария = "Виджет";
		Если CRM_ИспользоватьПотенциальныхКлиентов Тогда
			Объект.CRM_ВариантАвтосозданияКлиентов = Перечисления.CRM_ВариантыАвтосозданияКлиентов.СоздаватьПК;
		Иначе
			Объект.CRM_ВариантАвтосозданияКлиентов = Перечисления.CRM_ВариантыАвтосозданияКлиентов.СоздаватьКлиента;
		КонецЕсли;
		Объект.CRM_ДлительностьОжиданияСвязыванияЗаявки = 8;
	КонецЕсли;
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания();
		РасписаниеРегламентногоЗадания.ПериодПовтораДней = 1;
		РасписаниеРегламентногоЗадания.ПериодПовтораВТечениеДня = 3600;
	КонецЕсли;
	
	ЗаполнитьАдресРасписания();
	
	СервисВиджетаАдресОбратногоВызова = Константы.CRM_СквознаяАналитикаАдресПубликацииСервисов.Получить();
	
	СтрокаАвторизацииVRDФайла =
		CRM_СистемаСквознойАналитикиВызовСервера.СлужебныйПользовательАвторизацияВСтрокеПодключения();
	
	РегистрыСведений.CRM_НастройкиСвязиОбращенийСИнтересами.ФормаИсточникаПриСозданииНаСервере(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		Объект.Наименование = Объект.Сценарий;
	КонецЕсли;
	
	CRM_НастроитьКнопкиСоздаватьКлиентаНаСервере();
	
	Элементы.ГруппаИспользуемыеСценарии.Видимость = Объект.CRM_ИсточникЛидов;
	Элементы.ГруппаСрокОбработки.Видимость = Объект.CRM_ИсточникЛидов;
	Элементы.ГруппаСрокЖизни.Видимость = Объект.CRM_ИсточникЛидов;
	ЗаполнитьИспользуемыеСценарии();
	
	Если Элементы.CRM_СрокЖизниОбращения.СписокВыбора.НайтиПоЗначению(Объект.CRM_СрокЖизниОбращения) = Неопределено Тогда
		Элементы.CRM_СрокЖизниОбращения.РежимВыбораИзСписка = Ложь;
		Элементы.CRM_СрокЖизниОбращения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	КонецЕсли;

	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПредыдущееЗначениеВключено = Объект.Включено;
		
	ЗаполнитьСписокВыбораИсточников(РежимВыбораСценария);

	Яндекс_ЗаполнитьСчетчики();
	
	УправлениеВидимостью();
	
	УстановитьНадписьРасписанияОбмена();
	
	АдресПубликацииСервисовПриИзменении();
	
	ВидимостьПравилОбработки();

	ИспользуемыеСценарииПометкаПриИзменении(Неопределено);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НЕ Отказ И ПараметрыЦелей <> Неопределено Тогда
		Для Каждого ПараметрЦели Из ПараметрыЦелей Цикл
			Если НЕ ПараметрЦели.Существует Тогда
				ОшибкаСозданияЦели = Яндекс_СоздатьЦель(Объект.CRM_ИдентификаторСчетчика, ПараметрЦели);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		Если Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Comagic")
			ИЛИ Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.UIS")
			ИЛИ Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Roistat") 
			ИЛИ Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.ПочтовоеСообщение") 
			ИЛИ Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.ВнешняяОбработка")	Тогда
			ТекстОшибки = НСтр("ru='Не заполнено расписание!';en='Schedule is not filled!'");
			ПолеВвода = "ДекорацияРасписание";
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеВвода);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ИдентификаторИсточника.АвтоВыборНезаполненного = Истина
		 И НЕ ЗначениеЗаполнено(Объект.ИдентификаторИсточника) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнен идентификатор источника!'");
		ПолеВвода = "Объект.ИдентификаторИсточника";
		
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеВвода);
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.CRM_ОбрабатыватьОбращения
		И Объект.CRM_ПравилаОбработки.Количество() > 0 Тогда
		Объект.CRM_ПравилаОбработки.Очистить();
	КонецЕсли;
	
	ОбновитьИспользуемыеСценарии();
	
	Если Объект.CRM_ИсточникЛидов
		И Объект.CRM_Сценарии.Количество() = 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СнятьФлагИсточникЛидов", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Не выбраны сценарии для источника лидов!
                  |Флаг ""Источник лидов"" будет снят.'"),
			РежимДиалогаВопрос.ОКОтмена);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не Элементы.ГруппаДлительностьОжиданияСвязыванияЗаявки.Видимость Тогда
		Объект.CRM_ДлительностьОжиданияСвязыванияЗаявки = 0;
	КонецЕсли;
	
	// Проверка заполненности реквизитов
	Отказ = ПроверкаЗаполненностиРеквизитовПоСценарию();

КонецПроцедуры
	
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.Сценарий = Перечисления.CRM_CallTrakingСценарии.ВнешняяОбработка Тогда
		Если ЗначениеЗаполнено(АдресФайла) Тогда
			ТекущийОбъект.ОбработкаДействия = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресФайла));
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("АдресРасписания", АдресРасписания);
		Возврат;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	Если ТекущийОбъект.Сценарий = Перечисления.CRM_CallTrakingСценарии.JivoSite Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().НастройкаЛидогенерацииJivoSite(ТекущийОбъект.Ссылка);
	КонецЕсли;
	Константы.CRM_СквознаяАналитикаАдресПубликацииСервисов.Установить(СервисВиджетаАдресОбратногоВызова);
	УстановитьПривилегированныйРежим(Ложь);
	
	// Дополнить таблицу ТабличнаяЧастьСопоставлениеРеквизитов
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоРеквизитов");
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("РеквизитПользовательский", Истина);
	
	НайденныеСтроки = ДеревоЗначений.Строки.НайтиСтроки(СтруктураОтбора, Истина);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("РеквизитПоиск", ТекСтрока.Наименование);
			
			ИзменяемаяСтрока = Неопределено;
			СтрокиТаблицы = ТекущийОбъект.ТабличнаяЧастьСопоставлениеРеквизитов.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиТаблицы.Количество() > 0 Тогда
				ИзменяемаяСтрока = СтрокиТаблицы[0];
			КонецЕсли;
			
			Если ИзменяемаяСтрока = Неопределено Тогда
				ИзменяемаяСтрока = ТекущийОбъект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
				ИзменяемаяСтрока.РеквизитПоиск = ТекСтрока.Наименование;
				ИзменяемаяСтрока.РеквизитЗаголовок = ТекСтрока.Заголовок;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ИзменяемаяСтрока, ТекСтрока);
			
		КонецЦикла;
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("АдресРасписания", АдресРасписания);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	РегистрыСведений.CRM_НастройкиСвязиОбращенийСИнтересами.ФормаИсточникаПриЗаписи(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОбновитьПравилаОбработкиОбращений");
	
	Если НЕ ПредыдущееЗначениеВключено Тогда
		Если НЕ Объект.ПометкаУдаления И Объект.Включено И ЗначениеЗаполнено(Объект.Сценарий) И
			 Объект.Сценарий <> ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.ВнешнийAPI") И
		 	 Объект.Сценарий <> ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.РучнойВвод") И
			 Объект.Сценарий <> ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Roistat") И
		 	 Объект.Сценарий <> ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.WebService") Тогда
			CRM_СистемаСквознойАналитикиКлиент.ЗапуститьЗагрузкуДанных(ЭтотОбъект, Истина, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ПредыдущееЗначениеВключено = Объект.Включено;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура CRM_СоздаватьПК(Команда)
	
	Объект.CRM_ВариантАвтосозданияКлиентов =
		ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.СоздаватьПК");
	CRM_НастроитьКнопкиСоздаватьКлиентаНаСервере();
	
	Элементы.ГруппаНастройкиСозданияПартнера.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_СоздаватьКлиента(Команда)
	
	Объект.CRM_ВариантАвтосозданияКлиентов =
		ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.СоздаватьКлиента");
	CRM_НастроитьКнопкиСоздаватьКлиентаНаСервере();
	
	Элементы.ГруппаНастройкиСозданияПартнера.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_НеСоздаватьКлиента(Команда)
	
	Объект.CRM_ВариантАвтосозданияКлиентов =
		ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.НеСоздавать");
	CRM_НастроитьКнопкиСоздаватьКлиентаНаСервере();
	
	Элементы.ГруппаНастройкиСозданияПартнера.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура CRM_НастроитьКнопкиСоздаватьКлиентаНаСервере()
	
	// Установить видимость
	
	Элементы.CRM_СоздаватьПК.Видимость = CRM_ИспользоватьПотенциальныхКлиентов;
	Элементы.ГруппаНастройкиСозданияПартнера.Видимость =
		(Объект.CRM_ВариантАвтосозданияКлиентов = Перечисления.CRM_ВариантыАвтосозданияКлиентов.СоздаватьКлиента);
	Если CRM_ИспользоватьПотенциальныхКлиентов Тогда
		Элементы.ДекорацияНадписьСозданиеПартнера.Подсказка = НСтр("ru = 'При обращении от неизвестного контакта,
			| создавать потенциального клиента,
                                                        |клиента, либо не сохранять контакт.'");
	КонецЕсли;
	
	// Покрасить кнопки
	
	НомерКнопки = ?(CRM_ИспользоватьПотенциальныхКлиентов, 1, 2);
	
	Если Объект.CRM_ВариантАвтосозданияКлиентов = ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.СоздаватьПК") Тогда
		НомерКнопки = 1;
	ИначеЕсли Объект.CRM_ВариантАвтосозданияКлиентов = ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.СоздаватьКлиента") Тогда
		НомерКнопки = 2;
	ИначеЕсли Объект.CRM_ВариантАвтосозданияКлиентов = ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.НеСоздавать") Тогда
		НомерКнопки = 3;
	КонецЕсли;
	
	СтруктураВидимыеКнопки = Новый Структура;
	
	Если CRM_ИспользоватьПотенциальныхКлиентов Тогда
		
		СтруктураКнопка = Новый Структура;
		ИмяОписания = "CRM_СоздаватьПК";
		СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
		СтруктураКнопка.Вставить("Пометка", ?(НомерКнопки = 1, Истина, Ложь));
		
		СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
		
	КонецЕсли;
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "CRM_СоздаватьКлиента";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(НомерКнопки = 2, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "CRM_НеСоздаватьКлиента";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(НомерКнопки = 3, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	CRM_ОбщегоНазначенияСервер.ПокраситьКнопки(ЭтотОбъект, СтруктураВидимыеКнопки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Функция Яндекс_ВыполнитьHTTPЗапрос(URL, Токен, HTTPМетод, json = Неопределено)
	
	СтруктураURI = сфпОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.Заголовки.Вставить("Authorization", "OAuth " + Токен);
	HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;
	
	ИспользоватьЗащищенноеСоединение = (ВРЕГ(Лев(URL, 5)) = ВРЕГ("HTTPS"));
	ЗащищенноеСоединениеOpenSSL = Неопределено;
	Если ИспользоватьЗащищенноеСоединение Тогда
		ЗащищенноеСоединениеOpenSSL = Новый ЗащищенноеСоединениеOpenSSL;
	КонецЕсли;
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Протокол = ?(ИспользоватьЗащищенноеСоединение, "https", "http");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси(Протокол);
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, , , Прокси, 30,
		ЗащищенноеСоединениеOpenSSL);
	
	Если json <> Неопределено Тогда
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
		HTTPЗапрос.УстановитьТелоИзСтроки(json);
	КонецЕсли;	
	
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос);
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		Возврат HTTPОтвет.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Возврат "";

КонецФункции

&НаСервере
Функция Яндекс_ПолучитьСчетчики()
	
	Токен = Объект.CRM_ИсточникПолученияАналитики.OAuthТокен;
	
	Счетчики = Новый Массив();
	
	Если ЗначениеЗаполнено(Токен) Тогда
		URL = "https://api-metrika.yandex.net/management/v1/counters";
		РезультатЗапроса = Яндекс_ВыполнитьHTTPЗапрос(URL, Токен, "GET");
		
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(РезультатЗапроса);
		РезультатЗапросаJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Для Каждого Счетчик Из РезультатЗапросаJSON.counters Цикл
			СтруктураСчетчика = Новый Структура("Идентификатор, Сайт", Счетчик.id, Счетчик.site);
			Счетчики.Добавить(СтруктураСчетчика);
		КонецЦикла;
	КонецЕсли;	
	
	Возврат Счетчики;

КонецФункции

&НаСервере
Функция Яндекс_ПолучитьЦели(ИдентификаторСчетчика)
	
	Токен = Объект.CRM_ИсточникПолученияАналитики.OAuthТокен;
	
	Цели = Новый Массив();
	
	Если ЗначениеЗаполнено(Токен) Тогда
		URL = "https://api-metrika.yandex.net/management/v1/counter/" + Формат(ИдентификаторСчетчика, "ЧГ=") + "/goals";
		РезультатЗапроса = Яндекс_ВыполнитьHTTPЗапрос(URL, Токен, "GET");
		
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(РезультатЗапроса);
		РезультатЗапросаJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Для Каждого Цель Из РезультатЗапросаJSON.goals Цикл
			Если Цель.Свойство("conditions") Тогда
				Условия = Новый Массив();
				Для Каждого Условие Из Цель.conditions Цикл
					Условия.Добавить(Условие.url);
				КонецЦикла;
						
				СтруктураЦели = Новый Структура("Идентификатор, Наименование, Условия", Цель.id, Цель.name, Условия);
				Цели.Добавить(СтруктураЦели);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	
	
	Возврат Цели;

КонецФункции

&НаСервере
Функция Яндекс_СоздатьЦель(ИдентификаторСчетчика, ПараметрЦели)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("goal");
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("id");
	ЗаписьJSON.ЗаписатьЗначение(ИдентификаторСчетчика);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("name");
	ЗаписьJSON.ЗаписатьЗначение(ПараметрЦели.Наименование);
		
	ЗаписьJSON.ЗаписатьИмяСвойства("type");
	ЗаписьJSON.ЗаписатьЗначение("action");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("is_retargeting");
	ЗаписьJSON.ЗаписатьЗначение(0);

	//ЗаписьJSON.ЗаписатьИмяСвойства("flag");
	//ЗаписьJSON.ЗаписатьЗначение("order");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("conditions");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("type");
	ЗаписьJSON.ЗаписатьЗначение("exact");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("url");
	ЗаписьJSON.ЗаписатьЗначение(ПараметрЦели.Условие);
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	json = ЗаписьJSON.Закрыть();
	
	Токен = Объект.CRM_ИсточникПолученияАналитики.OAuthТокен;
	
	URL = "https://api-metrika.yandex.net/management/v1/counter/" + Формат(ИдентификаторСчетчика, "ЧГ=") + "/goals";
	РезультатЗапроса = Яндекс_ВыполнитьHTTPЗапрос(URL, Токен, "POST", json);
	
	Возврат РезультатЗапроса;
	
КонецФункции	

&НаКлиенте
Процедура Яндекс_ЗаполнитьСчетчики()
	
	Элементы.CRM_ИдентификаторСчетчика.СписокВыбора.Очистить(); 
	
	CRM_ВсеСчетчики = Яндекс_ПолучитьСчетчики();
	
	Для Каждого ТекСчетчик Из CRM_ВсеСчетчики Цикл
		Цели = Яндекс_ПолучитьЦели(ТекСчетчик.Идентификатор);
		ТекСчетчик.Вставить("Цели", Цели);
		
		Элементы.CRM_ИдентификаторСчетчика.СписокВыбора.Добавить(ТекСчетчик.Идентификатор, ТекСчетчик.Сайт + " - " 
			+ Формат(ТекСчетчик.Идентификатор,
			 "ЧГ="));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИсточникПолученияАналитикиПриИзменении(Элемент)
	
	Яндекс_ЗаполнитьСчетчики();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИдентификаторСчетчикаПриИзменении(Элемент)
	
	СтрокаШаблона = "1crm_form_[" + Формат(Объект.CRM_ИдентификаторСчетчика, "ЧГ=") + "%2B" 
		+ Объект.ИдентификаторИсточника 
		+ "]_";
	
	ПараметрыЦелей = Новый Массив();
	ПараметрыЦели = Новый Структура("Наименование,Условие,Существует", "Виджет - открыли форму", СтрокаШаблона + "view",
		 Ложь);
	ПараметрыЦелей.Добавить(ПараметрыЦели);
	ПараметрыЦели = Новый Структура("Наименование,Условие,Существует",
		 "Виджет - начали заполнять форму", СтрокаШаблона + "start",
		 Ложь);
	ПараметрыЦелей.Добавить(ПараметрыЦели);
	ПараметрыЦели = Новый Структура("Наименование,Условие,Существует", "Виджет - ошибки", СтрокаШаблона + "end", Ложь);
	ПараметрыЦелей.Добавить(ПараметрыЦели);
	ПараметрыЦели = Новый Структура("Наименование,Условие,Существует", "Виджет - успешная отправка", СтрокаШаблона 
		+ "success",
		 Ложь);
	ПараметрыЦелей.Добавить(ПараметрыЦели);
	
	Для Каждого Счетчик Из CRM_ВсеСчетчики Цикл
		Если Счетчик.Идентификатор = Объект.CRM_ИдентификаторСчетчика Тогда
			Для Каждого Цель Из Счетчик.Цели Цикл
				Для Каждого Условие Из Цель.Условия Цикл
					Для Каждого ПараметрЦели Из ПараметрыЦелей Цикл
						Если ПараметрЦели.Условие = Условие Тогда
							ПараметрЦели.Существует = Истина;
						КонецЕсли;	
					КонецЦикла;	
				КонецЦикла;
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;	
	
	КоличествоСуществующих = 0;
	
	Для Каждого ПараметрЦели Из ПараметрыЦелей Цикл
		Если ПараметрЦели.Существует Тогда
			КоличествоСуществующих = КоличествоСуществующих + 1;
		КонецЕсли;	
	КонецЦикла;
	
	ТекстСообщенияПередЗаписью = "";
	
	Если КоличествоСуществующих = 0 Тогда
		ТекстСообщенияПередЗаписью =
			"При сохранении виджета будут автоматически созданы цели в выбранном источнике аналитики.";
		
	ИначеЕсли КоличествоСуществующих < ПараметрыЦелей.Количество() Тогда
		ТекстСообщенияПередЗаписью =
			"При сохранении виджета будут автоматически созданы отсутствующие цели в выбранном источнике аналитики.";
	КонецЕсли;

	ЗаполнитьКодВиджета();

КонецПроцедуры

&НаКлиенте
Процедура СервисВиджетаАдресОбратногоВызоваПриИзменении(Элемент)
	
	ЗаполнитьКодВиджета();
	
КонецПроцедуры

&НаКлиенте
Процедура КаналПервичногоИнтересаПриИзменении(Элемент)
	ДоступностьПервичногоИнтереса();
	Если Объект.ИсточникПервичногоИнтереса = Неопределено ИЛИ Объект.ИсточникПервичногоИнтереса.Пустая() Тогда
		Элементы.ИсточникПервичногоИнтереса.ПодсказкаВвода = Строка(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.КаналПервичногоИнтереса,
			 "ТипЗначения"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПервичногоИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.КаналПервичногоИнтереса) Тогда
		Если ТипПВХ(Объект.КаналПервичногоИнтереса) = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",		Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока",	Объект.ИсточникПервичногоИнтереса);
			ПараметрыФормы.Вставить("СкрытьПодменюВид",	Истина);
			ФормаВыбора = ПолучитьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Завершено");
			ЭлементОтбора.ПравоеЗначение	= Истина;
			ЭлементОтбора.Использование		= Истина;
			ГруппаОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДатаОкончания");
			ЭлементОтбора.ПравоеЗначение	= Дата("00010101");
			ЭлементОтбора.Использование		= Истина;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("CRM_ДатаАктуальности");
			ЭлементОтбора.ПравоеЗначение	= НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
			ЭлементОтбора.Использование		= Истина;
			ФормаВыбора.Открыть();
		ИначеЕсли ТипПВХ(Объект.КаналПервичногоИнтереса) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			СтандартнаяОбработка	= Ложь;
			ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
			ОписаниеВыбораПартнера	= Новый ОписаниеОповещения("ОбработкаВыбораПартнераИсточника", ЭтотОбъект,
				 ДополнительныеПараметры);
			ПараметрыФормы			= Новый Структура;
			Если ЗначениеЗаполнено(Объект.ИсточникПервичногоИнтереса)
				 И (ТипЗнч(Объект.ИсточникПервичногоИнтереса) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
				ПараметрыФормы.Вставить("ТекущаяСтрока",
					 CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ИсточникПервичногоИнтереса,
					 "Владелец"));
			КонецЕсли;	
			ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элемент, ,
				 ВариантОткрытияОкна.ОтдельноеОкно, ,
				 ОписаниеВыбораПартнера);
		КонецЕсли;	
	КонецЕсли;
	
	ДоступностьПервичногоИнтереса();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСоставДопРеквизитов(Команда)
	ОткрытьФорму("Справочник.НаборыДополнительныхРеквизитовИСведений.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура РолеваяАдресацияПриИзменении(Элемент)
	РолеваяАдресацияПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРасписаниеНажатие(Элемент)
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеОбмена", ЭтотОбъект);
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	Объект.Наименование = Объект.Сценарий;
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПримерФайлаНажатие(Элемент)
	
	ТекстУстановки = "";
	
	Для Каждого Стр Из Объект.ТабличнаяЧастьСопоставлениеРеквизитов Цикл
		Если Стр.Выбрано Тогда
			Если ЗначениеЗаполнено(ТекстУстановки) Тогда
				 ТекстУстановки = ТекстУстановки + "," + Символы.ПС;
			 КонецЕсли;
			 
			ТекстУстановки = ТекстУстановки + """" + Стр.Наименование + """: """ + Стр.РеквизитЗаголовок + """";
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстУстановки) Тогда
		
		Текст = "{ 
		|""data"": [
		|{ " + Символы.ПС + ТекстУстановки + "
		|},
		|{ " + Символы.ПС + ТекстУстановки + "
		|}
		|] 
		|} ";
		
	Иначе
		
		Текст = "{ 
		|""data"": [
		|{
		|""campaign_name"":""Adwords"",
		|""channel"": ""direct"",
		|""id"": 512256,
		|""visitor_email"": ""demoaccaunt1@gmail.com"",
		|""visitor_phone_number"": ""8441111994"",
		|""visitor_name"":""demoaccaunt1"",
		|""text"": ""Сможете перезвонить?"",
		|""campaign_id"": -1,
		|""date_time"":""2018-08-18 12:34:02"",
		|""device"":""PC"",
		|""city"":""N"",
		|""site"":""rarus"",
		|""site_id"":""1""
		|},
		|{
		|""campaign_name"":""Direct"",
		|""channel"":""organic"",
		|""id"": 512258,
		|""visitor_email"":""demoaccaunt2@gmail.com"",
		|""visitor_phone_number"": ""01811117321"",
		|""visitor_name"":""demoaccaunt2"",
		|""text"":""Текст заявки..."",
		|""campaign_id"":42659,
		|""date_time"":""2018-08-19 07:58:53"",
		|""device"":""phone"",
		|""city"":""N"",
		|""site"":""rarus"",
		|""site_id"":""1""
		|}
		|] 
		|} ";
		
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ПоказатьЗначение(, Текст);
	#Иначе
		
// BSLLS:MissingTemporaryFileDeletion-off
// Временный файл не удаляем, так как он открыт пользователем
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".txt");
// BSLLS:MissingTemporaryFileDeletion-on
		
		ТекстДок = Новый ТекстовыйДокумент;
		ТекстДок.УстановитьТекст(Текст);
		
		ТекстДок.Записать(ИмяВременногоФайла);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", CRM_ОбщегоНазначенияКлиент);	
		НачатьЗапускПриложения(ОписаниеОповещения, ИмяВременногоФайла);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьИдентификатор(Команда)
	Если ЗначениеЗаполнено(Объект.ИдентификаторИсточника) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СгенерироватьНовыйИдентификатор", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Сгенерировать новый идентификатор?'"),
			РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена);
	
	Иначе
		Объект.ИдентификаторИсточника = Новый УникальныйИдентификатор;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовШапкиФормы

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
// Функция возвращает тип значения элемента ПВХ.
//
// Параметры:
//	ПВХСсылкка	- ЛюбаяСсылка	- Ссылка на элемент ПВХ.
//
// Возвращаемое значение:
//	Тип	- Тип значения элемента ПВХ.
//
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции // ТипПВХ()

&НаКлиенте
// Процедура определяет доступность первичного интереса.
//
// Параметры:
//	Нет.
//
Процедура ДоступностьПервичногоИнтереса()
	
	Если ЗначениеЗаполнено(Объект.КаналПервичногоИнтереса) И НЕ ЗначениеЗаполнено(Объект.ИсточникПервичногоИнтереса) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного	= Истина;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного		= Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.КаналПервичногоИнтереса)
		 И (ТипПВХ(Объект.КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
	КонецЕсли;
КонецПроцедуры // ДоступностьПервичногоИнтереса()

&НаСервере
Процедура РолеваяАдресацияПриИзмененииСервер()
	Элементы.ОтветственныйМенеджер.Видимость = НЕ РолеваяАдресация;
	Элементы.CRM_РольОтветственного.Видимость = РолеваяАдресация;
	Если РолеваяАдресация = 0 Тогда
		Объект.CRM_РольОтветственного = Справочники.РолиИсполнителей.ПустаяСсылка();
	Иначе
		Объект.ОтветственныйМенеджер = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыЛидаСвойствоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор",
		Новый Структура("НаборСвойств", ПолучитьНаборСвойствПоИмени("Справочник_CRM_ИсточникиПолученияЛидов")));
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Истина);
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаВыбора", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаСервере
Функция ПолучитьНаборСвойствПоИмени(ИмяНабора)
	Возврат УправлениеСвойствами.НаборСвойствПоИмени(ИмяНабора);
КонецФункции

&НаСервере
Процедура ЗаполнитьАдресРасписания()
	АдресРасписания = ПоместитьВоВременноеХранилище(РасписаниеРегламентногоЗадания, Новый УникальныйИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеОбмена(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("РасписаниеРегламентногоЗадания") Тогда
		РасписаниеРегламентногоЗадания = Результат;
		ЗаполнитьАдресРасписания();
		
		УстановитьНадписьРасписанияОбмена();
		
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьРасписанияОбмена()
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		ТекстЗаголовка = НСтр("ru='Настроить расписание обмена';en='Set up exchange schedule'");
	Иначе
		ТекстЗаголовка = РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Элементы.ДекорацияРасписание.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостью()
	
	Элементы.ИдентификаторИсточника.АвтоОтметкаНезаполненного = Ложь;
	
	Если Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Comagic")
		ИЛИ Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.UIS") Тогда
		Элементы.ГруппаСценарийCallTraking.Видимость = Истина;
		Элементы.ГруппаСценарийПочтовоеСообщение.Видимость = Ложь;
		Элементы.ГруппаВиджет.Видимость = Ложь;
		Элементы.ГруппаВнешняяОбработка.Видимость = Ложь;
		Элементы.ГруппаГенераторы.Видимость = Истина;
		Элементы.ГруппаГенераторЗаявки.Видимость = Ложь; // временно скрываем
		Элементы.ГруппаСценарийRoistat.Видимость = Ложь;
		Элементы.ГруппаСценарийCoMagic.Видимость = (РежимВыбораСценария = "Коллтрекинг");
		Элементы.ДекорацияРасписание.Видимость = Истина;
		Элементы.ГруппаКодВиджета.Видимость = Ложь;
		Элементы.ГруппаПоУмолчанию.Видимость = Истина;
		Элементы.ГруппаСервисRoistat.Видимость = Ложь;
		Элементы.ГруппаСервисCoMagic.Видимость = (РежимВыбораСценария = "Коллтрекинг");
		Элементы.ПередаватьКонтактнуюИнформацию.Видимость = Ложь;
		Элементы.ГруппаИдентификаторИсточника.Видимость = Ложь;

	ИначеЕсли Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.ПочтовоеСообщение") Тогда
		Элементы.ГруппаСценарийCallTraking.Видимость = Ложь;
		Элементы.ГруппаСценарийПочтовоеСообщение.Видимость = Истина;
		Элементы.ГруппаВиджет.Видимость = Ложь;
		Элементы.ГруппаВнешняяОбработка.Видимость = Ложь;
		Элементы.ГруппаГенераторы.Видимость = Ложь;
		Элементы.ГруппаСценарийRoistat.Видимость = Ложь;
		Элементы.ГруппаСценарийCoMagic.Видимость = Ложь;
		Элементы.ДекорацияРасписание.Видимость = Истина;
		Элементы.ГруппаКодВиджета.Видимость = Ложь;
		Элементы.ГруппаПоУмолчанию.Видимость = Истина;
		Элементы.ГруппаСервисRoistat.Видимость = Ложь;
		Элементы.ГруппаСервисCoMagic.Видимость = Ложь;
		Элементы.ПередаватьКонтактнуюИнформацию.Видимость = Ложь;
		Элементы.ГруппаИдентификаторИсточника.Видимость = Ложь;
		
		Если Объект.Ссылка.Пустая() Тогда
			ЗаполнитьТабличнуюЧастьСопоставлениеРеквизитов();

		Иначе
			ЗаполнитьДеревоЗначений();
			ЗаполнитьСтрокуТелаПисьма();
		КонецЕсли;
		
	ИначеЕсли Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.WebService") Тогда
		Элементы.ГруппаСценарийCallTraking.Видимость = Ложь;
		Элементы.ГруппаСценарийПочтовоеСообщение.Видимость = Ложь;
		Элементы.ГруппаВиджет.Видимость = Истина;
		Элементы.МакетВиджета.Видимость = Истина;
		Элементы.ГруппаВнешняяОбработка.Видимость = Ложь;
		Элементы.ГруппаГенераторы.Видимость = Ложь;
		Элементы.ГруппаСценарийRoistat.Видимость = Ложь;
		Элементы.ГруппаСценарийCoMagic.Видимость = Ложь;
		Элементы.ДекорацияРасписание.Видимость = Ложь;
		Элементы.ГруппаКодВиджета.Видимость = Истина;
		Элементы.ГруппаПоУмолчанию.Видимость = Истина;
		Элементы.ГруппаСервисRoistat.Видимость = Ложь;
		Элементы.ГруппаСервисCoMagic.Видимость = Ложь;
		Элементы.ПередаватьКонтактнуюИнформацию.Видимость = Ложь;
		Элементы.ГруппаИдентификаторИсточника.Видимость = Истина;
		
		// Заполнение данных по реквизитам виджета.
		ЗаполнитьДанныеДляВиджета();
		
		ЗаполнитьКодВиджета();

	ИначеЕсли Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.ВнешняяОбработка") Тогда
		Элементы.ГруппаСценарийCallTraking.Видимость = Ложь;
		Элементы.ГруппаСценарийПочтовоеСообщение.Видимость = Ложь;
		Элементы.ГруппаВиджет.Видимость = Ложь;
		Элементы.ГруппаВнешняяОбработка.Видимость = Истина;
		Элементы.ГруппаГенераторы.Видимость = Ложь;
		Элементы.ГруппаСценарийRoistat.Видимость = Ложь;
		Элементы.ГруппаСценарийCoMagic.Видимость = Ложь;
		Элементы.ДекорацияРасписание.Видимость = Истина;
		Элементы.ГруппаКодВиджета.Видимость = Ложь;
		Элементы.ГруппаПоУмолчанию.Видимость = Истина;
		Элементы.ГруппаСервисRoistat.Видимость = Ложь;
		Элементы.ГруппаСервисCoMagic.Видимость = Ложь;
		Элементы.ПередаватьКонтактнуюИнформацию.Видимость = Ложь;
		Элементы.ГруппаИдентификаторИсточника.Видимость = Истина;
		
	ИначеЕсли Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Roistat") Тогда
		Элементы.ГруппаСценарийCallTraking.Видимость = Ложь;
		Элементы.ГруппаСценарийПочтовоеСообщение.Видимость = Ложь;
		Элементы.ГруппаВиджет.Видимость = Ложь;
		Элементы.ГруппаВнешняяОбработка.Видимость = Ложь;
		Элементы.ГруппаГенераторы.Видимость = Истина;
		Элементы.ГруппаСценарийRoistat.Видимость = Истина;
		Элементы.ГруппаСценарийCoMagic.Видимость = Ложь;
		Элементы.ДекорацияРасписание.Видимость = Ложь;
		Элементы.ГруппаКодВиджета.Видимость = Ложь;
		Элементы.ГруппаПоУмолчанию.Видимость = Ложь;
		Элементы.ГруппаСервисRoistat.Видимость = Истина;
		Элементы.ГруппаСервисCoMagic.Видимость = Ложь;
		Элементы.ГруппаГенераторЗаявки.Видимость = Истина;
		Элементы.ПередаватьКонтактнуюИнформацию.Видимость = Истина;
		Элементы.ГруппаИдентификаторИсточника.Видимость = Ложь;
		
	ИначеЕсли Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.ВнешнийAPI")
		 ИЛИ Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.РучнойВвод") Тогда
		Элементы.ГруппаСценарийCallTraking.Видимость = Ложь;
		Элементы.ГруппаСценарийПочтовоеСообщение.Видимость = Ложь;
		Элементы.ГруппаВиджет.Видимость = Ложь;
		Элементы.МакетВиджета.Видимость = Ложь;
		Элементы.ГруппаВнешняяОбработка.Видимость = Ложь;
		Элементы.ГруппаГенераторы.Видимость = Ложь;
		Элементы.ГруппаСценарийRoistat.Видимость = Ложь;
		Элементы.ГруппаСценарийCoMagic.Видимость = Ложь;
		Элементы.ДекорацияРасписание.Видимость = Ложь;
		Элементы.ГруппаКодВиджета.Видимость = Ложь;
		Элементы.ГруппаПоУмолчанию.Видимость = Истина;
		Элементы.ГруппаСервисRoistat.Видимость = Ложь;
		Элементы.ГруппаСервисCoMagic.Видимость = Ложь;
		Элементы.ПередаватьКонтактнуюИнформацию.Видимость = Ложь;

		Элементы.ГруппаИдентификаторИсточника.Видимость =
			(Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.ВнешнийAPI"));
		Элементы.ИдентификаторИсточника.АвтоОтметкаНезаполненного =
			(Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.ВнешнийAPI"));

		Объект.ДополнительныеДанныеПоИсточникам.Очистить();
		
	ИначеЕсли Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.JivoSite") Тогда
		Элементы.ГруппаСценарийCallTraking.Видимость = Ложь;
		Элементы.ГруппаСценарийПочтовоеСообщение.Видимость = Ложь;
		Элементы.ГруппаВиджет.Видимость = Ложь;
		Элементы.МакетВиджета.Видимость = Ложь;
		Элементы.ГруппаВнешняяОбработка.Видимость = Ложь;
		Элементы.ГруппаГенераторы.Видимость = Ложь;
		Элементы.ГруппаСценарийRoistat.Видимость = Ложь;
		Элементы.ГруппаСценарийCoMagic.Видимость = Ложь;
		Элементы.ДекорацияРасписание.Видимость = Ложь;
		Элементы.ГруппаКодВиджета.Видимость = Ложь;
		Элементы.ГруппаПоУмолчанию.Видимость = Истина;
		Элементы.ГруппаСервисRoistat.Видимость = Ложь;
		Элементы.ГруппаСервисCoMagic.Видимость = Ложь;
		Элементы.ПередаватьКонтактнуюИнформацию.Видимость = Ложь;
		Элементы.ГруппаИдентификаторИсточника.Видимость = Истина;
		Элементы.ИдентификаторИсточника.АвтоОтметкаНезаполненного = Истина;
		
	КонецЕсли;
	
	УстановитьВидимостьКнопок();
	Элементы.ГруппаДлительностьОжиданияСвязыванияЗаявки.Видимость = (СписокЗаявки = "1");
	
	Если РежимВыбораСценария = "Коллтрекинг" Тогда
		ОблачнаяТелефония = Ложь;
		
		ВерсияСофтФон = "";
		ТелефонияНастроена = НЕ сфпСофтФонПроСервер.сфпТребуетсяНастройкаТелефонии(ВерсияСофтФон);
		
		Если ТелефонияНастроена Тогда
			Если ВерсияСофтФон = ПредопределенноеЗначение("Перечисление.сфпВерсииСофтФон.СофтФотPROSTO") Тогда
				
				НаименованиеАТС = НСтр("ru=' + Облачная АТС: ';en=' + Cloud PBX: '");
				Если СтрНайти(Объект.Наименование, НаименованиеАТС) = 0 Тогда
					Объект.Наименование = Объект.Наименование + НаименованиеАТС 
						+ сфпСофтФонПроКлиент.ПредставлениеВыбраннойТелефонии();
					ОблачнаяТелефония = Истина;
				КонецЕсли;
				
			ИначеЕсли ВерсияСофтФон = ПредопределенноеЗначение("Перечисление.сфпВерсииСофтФон.СофтФотПроф") Тогда
				НаименованиеАТС = НСтр("ru=' + Софтфон';en=' + Softphone'");
				
				Если СтрНайти(Объект.Наименование, НаименованиеАТС) = 0 Тогда
					Объект.Наименование  = Объект.Наименование + НаименованиеАТС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ГруппаСтатусПодключения.Видимость = Истина;
		
		Элементы.КартинкаСтатусОнлайн.Видимость = ТелефонияНастроена;
		Элементы.КартинкаСтатусОффлайн.Видимость = НЕ ТелефонияНастроена;
		
		Если НЕ ТелефонияНастроена Тогда
			Элементы.ДекорацияСтатусПодключения.Заголовок = НСтр("ru='Телефония не подключена';en='Telephony is not connect'");
		Иначе
			Если ОблачнаяТелефония Тогда
				Элементы.ДекорацияСтатусПодключения.Заголовок = НСтр("ru='Облачная АТС: ';en='Cloud PBX: '")  
					+ сфпСофтФонПроКлиент.ПредставлениеВыбраннойТелефонии();
			Иначе
				
				Элементы.ДекорацияСтатусПодключения.Заголовок = НСтр("ru='Подключен Софтфон';en='Softphone connected'");
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Элементы.ГруппаСтатусПодключения.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаГенераторЗвонка.Видимость = (РежимВыбораСценария = "Коллтрекинг");
	
	Заголовок = НСтр("ru='Источник получения заявок: ';en='Source of requests:'") + Объект.Сценарий;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКнопок()
	
	СписокВерификация 			= ?(Объект.CRM_УказыватьПричинуОтклонения, "1", "0");
	СписокЗаявки 				= ?(Объект.ИспользоватьГенераторЗаявки, "1", "0");
	СписокЗвонки 				= ?(Объект.ИспользоватьГенераторЗвонка, "1", "0");
	СписокПрисоединенныйФайл 	= ?(Объект.ПрисоединенныйФайл, "1", "0");
	СписокЯвляетсяЛидом 		= ?(Объект.CRM_ИсточникЛидов, "1", "0");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьСопоставлениеРеквизитов(Теги = Истина)
	
	Если Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Количество() > 0 Тогда
		Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Очистить();
	КонецЕсли;
	
	// Идентификатор заявки(ID)
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	НоваяСтр.Реквизит = "ID";
	НоваяСтр.РеквизитПоиск = "id";
	НоваяСтр.РеквизитЗаголовок = "Идентификатор заявки(ID)";
	Если Теги Тогда
		НоваяСтр.Наименование = "id";
	КонецЕсли;
	НоваяСтр.ПоУмолчанию = Истина;
	НоваяСтр.Выбрано = Истина;
	НоваяСтр.Пример = "0000000001";
	
	// Дата
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	НоваяСтр.Реквизит = "Дата";
	НоваяСтр.РеквизитПоиск = "Дата";
	НоваяСтр.РеквизитЗаголовок = "Дата";
	Если Теги Тогда
		НоваяСтр.Наименование = "date_time";
	КонецЕсли;
	НоваяСтр.ПоУмолчанию = Истина;
	НоваяСтр.Выбрано = Истина;
	НоваяСтр.Пример = "2019-04-01 12:34:02";
	
	// Имя пользователя
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	НоваяСтр.Реквизит = "ИмяПользователя";
	НоваяСтр.РеквизитПоиск = "ФИО";
	НоваяСтр.РеквизитЗаголовок = "ФИО";
	Если Теги Тогда
		НоваяСтр.Наименование = "visitor_name";
	КонецЕсли;
	НоваяСтр.Выбрано = Истина;
	НоваяСтр.Пример = "Иванов И.И.";
	
	// Канал привлечения
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	НоваяСтр.Реквизит = "КаналПривлечения";
	НоваяСтр.РеквизитПоиск = "Канал привлечения";
	НоваяСтр.РеквизитЗаголовок = "Канал привлечения";
	Если Теги Тогда
		НоваяСтр.Наименование = "channel";
	КонецЕсли;
	НоваяСтр.ПоУмолчанию = Истина;
	НоваяСтр.Выбрано = Истина;
	НоваяСтр.Пример = "Email рассылки";
	
	// Рекламная кампания
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	НоваяСтр.Реквизит = "РекламнаяКампания";
	НоваяСтр.РеквизитПоиск = "Рекламная кампания";
	НоваяСтр.РеквизитЗаголовок = "Рекламная кампания";
	Если Теги Тогда
		НоваяСтр.Наименование = "campaign_name";
	КонецЕсли;
	НоваяСтр.ПоУмолчанию = Истина;
	НоваяСтр.Выбрано = Истина;
	НоваяСтр.Пример = "Email рассылки";
	
	// Рекламная кампания ИД
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	НоваяСтр.Реквизит = "РекламнаяКампанияИД";
	НоваяСтр.РеквизитПоиск = "ID Рекламная кампания";
	НоваяСтр.РеквизитЗаголовок = "ID Рекламная кампания";
	Если Теги Тогда
		НоваяСтр.Наименование = "campaign_id";
	КонецЕсли;
	НоваяСтр.ПоУмолчанию = Истина;
	НоваяСтр.Выбрано = Истина;
	НоваяСтр.Пример = "1234567890";
	
	// Сайт домен
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	НоваяСтр.Реквизит = "Сайт";
	НоваяСтр.РеквизитПоиск = "Сайт";
	НоваяСтр.РеквизитЗаголовок = "Сайт";
	Если Теги Тогда
		НоваяСтр.Наименование = "Сайт";
	КонецЕсли;
	НоваяСтр.ПоУмолчанию = Истина;
	НоваяСтр.Выбрано = Истина;
	НоваяСтр.Пример = "rarus.ru";
	
	// e-mail
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	НоваяСтр.Реквизит = "ЭлектроннаяПочта";
	НоваяСтр.РеквизитПоиск = "Электронная почта";
	НоваяСтр.РеквизитЗаголовок = "Электронная почта";
	Если Теги Тогда
		НоваяСтр.Наименование = "visitor_email";
	КонецЕсли;
	НоваяСтр.Выбрано = Истина;
	НоваяСтр.Пример = "test@ya.ru";
	
	// Телефон
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	НоваяСтр.Реквизит = "Телефон";
	НоваяСтр.РеквизитПоиск = "Телефон";
	НоваяСтр.РеквизитЗаголовок = "Телефон";
	Если Теги Тогда
		НоваяСтр.Наименование = "visitor_phone_number";
	КонецЕсли;
	НоваяСтр.Выбрано = Истина;
	НоваяСтр.Пример = "+79999999999";
	
	// Тема Заявки
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	НоваяСтр.Реквизит = "ТемаЗаявки";
	НоваяСтр.РеквизитПоиск = "Тема заявки";
	НоваяСтр.РеквизитЗаголовок = "Тема заявки";
	Если Теги Тогда
		НоваяСтр.Наименование = "theme";
	КонецЕсли;
	НоваяСтр.Выбрано = Истина;
	НоваяСтр.Пример = "Обратная связь";
	
	// Текст Заявки
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	НоваяСтр.Реквизит = "ТекстЗаявки";
	НоваяСтр.РеквизитПоиск = "Текст заявки";
	НоваяСтр.РеквизитЗаголовок = "Текст заявки";
	Если Теги Тогда
		НоваяСтр.Наименование = "text";
	КонецЕсли;
	НоваяСтр.Выбрано = Истина;
	НоваяСтр.Пример = "Прошу перезвонить или прислать ответ в электронном письме";
	
	// Устройство
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	НоваяСтр.Реквизит = "Устройство";
	НоваяСтр.РеквизитПоиск = "Устройство";
	НоваяСтр.РеквизитЗаголовок = "Устройство";
	Если Теги Тогда
		НоваяСтр.Наименование = "device";
	КонецЕсли;
	НоваяСтр.Выбрано = Истина;
	НоваяСтр.Пример = "phone";
	
	// Город
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	НоваяСтр.Реквизит = "Город";
	НоваяСтр.РеквизитПоиск = "Город";
	НоваяСтр.РеквизитЗаголовок = "Город";
	Если Теги Тогда
		НоваяСтр.Наименование = "city";
	КонецЕсли;
	НоваяСтр.Выбрано = Истина;
	НоваяСтр.Пример = "Москва";
	
	// Организация
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	НоваяСтр.Реквизит = "Организация";
	НоваяСтр.РеквизитПоиск = "Организация";
	НоваяСтр.РеквизитЗаголовок = "Организация";
	Если Теги Тогда
		НоваяСтр.Наименование = "organization";
	КонецЕсли;
	НоваяСтр.Выбрано = Истина;
	НоваяСтр.Пример = "Ветерок ООО";
	
	// UTM_Метки
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	НоваяСтр.Реквизит = "utm_source";
	НоваяСтр.РеквизитПоиск = "utm_source";
	НоваяСтр.РеквизитЗаголовок = "utm_source";
	Если Теги Тогда
		НоваяСтр.Наименование = "utm_source";
	КонецЕсли;
	НоваяСтр.UTM_Метка = Истина;
	НоваяСтр.Выбрано = Истина;
	НоваяСтр.Пример = "cpc";
	
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	НоваяСтр.Реквизит = "utm_pos";
	НоваяСтр.РеквизитПоиск = "utm_pos";
	НоваяСтр.РеквизитЗаголовок = "utm_pos";
	Если Теги Тогда
		НоваяСтр.Наименование = "utm_pos";
	КонецЕсли;
	НоваяСтр.UTM_Метка = Истина;
	НоваяСтр.Выбрано = Истина;
	НоваяСтр.Пример = "Переход с сайта";
	
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	НоваяСтр.Реквизит = "utm_medium";
	НоваяСтр.РеквизитПоиск = "utm_medium";
	НоваяСтр.РеквизитЗаголовок = "utm_medium";
	Если Теги Тогда
		НоваяСтр.Наименование = "utm_medium";
	КонецЕсли;
	НоваяСтр.UTM_Метка = Истина;
	НоваяСтр.Выбрано = Истина;
	НоваяСтр.Пример = "yandex";
	
	// для дальнейшей разработки
	// НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	// НоваяСтр.Реквизит = "utm_campaign";
	// НоваяСтр.РеквизитПоиск = "utm_campaign";
	// НоваяСтр.РеквизитЗаголовок = "utm_campaign";
	// Если Теги Тогда
	//	НоваяСтр.Наименование = "utm_campaign";
	// КонецЕсли;
	// НоваяСтр.UTM_Метка = Истина;
	// НоваяСтр.Выбрано = Истина;
	//
	// НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	// НоваяСтр.Реквизит = "utm_term";
	// НоваяСтр.РеквизитПоиск = "utm_term";
	// НоваяСтр.РеквизитЗаголовок = "utm_term";
	// Если Теги Тогда
	//	НоваяСтр.Наименование = "utm_term";
	// КонецЕсли;
	// НоваяСтр.UTM_Метка = Истина;
	// НоваяСтр.Выбрано = Истина;
	//
	// НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	// НоваяСтр.Реквизит = "utm_content";
	// НоваяСтр.РеквизитПоиск = "utm_content";
	// НоваяСтр.РеквизитЗаголовок = "utm_content";
	// Если Теги Тогда
	//	НоваяСтр.Наименование = "utm_content";
	// КонецЕсли;
	// НоваяСтр.UTM_Метка = Истина;
	// НоваяСтр.Выбрано = Истина;
	
	ЗаполнитьДеревоЗначений();
	
	ЗаполнитьСтрокуТелаПисьма();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗначений()
	
	ТЗ = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Выгрузить();
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоРеквизитов"); 
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("ПоУмолчанию", Истина);
	
	МасСтрок = ТЗ.НайтиСтроки(СтруктураОтбор);
	
	Если МасСтрок.Количество() > 0 Тогда
		
		Уровень1 = ДеревоЗначений.Строки.Добавить();
		Уровень1.Наименование = "Поля по умолчанию";
		Уровень1.Заголовок = Истина;
		
		Для Каждого Стр Из МасСтрок Цикл
			
			Уровень2 = Уровень1.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(Уровень2, Стр);
			Уровень2.Наименование = Стр.РеквизитПоиск;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("UTM_Метка", Истина);

	МасСтрок = ТЗ.НайтиСтроки(СтруктураОтбор);
	
	Если МасСтрок.Количество() > 0 Тогда
		
		Уровень1 = ДеревоЗначений.Строки.Добавить();
		Уровень1.Наименование = "UTM_Метки";
		Уровень1.Заголовок = Истина;
		
		Для Каждого Стр Из МасСтрок Цикл
			
			Уровень2 = Уровень1.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(Уровень2, Стр);
			Уровень2.Наименование = Стр.РеквизитПоиск;
			
		КонецЦикла;
		
	КонецЕсли;

	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("UTM_Метка", Ложь);
	СтруктураОтбор.Вставить("ПоУмолчанию", Ложь);
	
	МасСтрок = ТЗ.НайтиСтроки(СтруктураОтбор);
	
	Если МасСтрок.Количество() > 0 Тогда
		
		Уровень1 = ДеревоЗначений.Строки.Добавить();
		Уровень1.Наименование = "Поля заявки";
		Уровень1.Заголовок = Истина;
		
		Для Каждого Стр Из МасСтрок Цикл
			
			Уровень2 = Уровень1.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(Уровень2, Стр);
			Уровень2.Наименование = Стр.РеквизитПоиск;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоРеквизитов"); 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуТелаПисьма()
	
	ТелоПисьма = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетПочтовогоСообщения").ПолучитьТекст();
	
	СтруктураТестовогоПисьма = Новый Структура();
	СтруктураТестовогоПисьма.Вставить("_Сайт", "rarus.ru");
	СтруктураТестовогоПисьма.Вставить("_ИсточникТрафика", "Email рассылки");
	СтруктураТестовогоПисьма.Вставить("_РекламнаяКампанияИД", "1234567890");
	СтруктураТестовогоПисьма.Вставить("_РекламнаяКампания", "email рекламная кампания");
	СтруктураТестовогоПисьма.Вставить("_utm_source", "google");
	СтруктураТестовогоПисьма.Вставить("_utm_medium", "cpc");
	СтруктураТестовогоПисьма.Вставить("_id", "000000001");
	СтруктураТестовогоПисьма.Вставить("_Дата", "2019-02-18 12:34:02");
	
	Текст1 = "";
	
	Для Каждого Стр Из ДеревоРеквизитов.ПолучитьЭлементы() Цикл
		Для Каждого Уровень2 Из Стр.ПолучитьЭлементы() Цикл
			Если Уровень2.Выбрано Тогда
				Если Уровень2.Наименование = "ФИО" Тогда
					Текст1 = Текст1 + "ФИО: " + ?(ЗначениеЗаполнено(Уровень2.Пример), Уровень2.Пример, "Иванов И.И.") + Символы.ПС;
					
				ИначеЕсли Уровень2.Наименование = "Электронная почта" Тогда
					Текст1 = Текст1 + "Электронная почта: " + ?(ЗначениеЗаполнено(Уровень2.Пример),
						 Уровень2.Пример, "test@ya.ru") + Символы.ПС;
					
				ИначеЕсли Уровень2.Наименование = "Телефон" Тогда
					Текст1 = Текст1 + "Телефон: " + ?(ЗначениеЗаполнено(Уровень2.Пример), Уровень2.Пример, "
						|+79999999999") 
						+ Символы.ПС;
					
				ИначеЕсли Уровень2.Наименование = "Устройство" Тогда
					Текст1 = Текст1 + "Устройство: " + ?(ЗначениеЗаполнено(Уровень2.Пример), Уровень2.Пример, "phone") + Символы.ПС;
					
				ИначеЕсли Уровень2.Наименование = "Город" Тогда
					Текст1 = Текст1 + "Город: " + ?(ЗначениеЗаполнено(Уровень2.Пример), Уровень2.Пример, "Москва") + Символы.ПС;
					
				ИначеЕсли Уровень2.Наименование = "Организация" Тогда
					Текст1 = Текст1 + "Организация: " + ?(ЗначениеЗаполнено(Уровень2.Пример), Уровень2.Пример, "Ветерок ООО") + Символы.ПС;
					
				ИначеЕсли Уровень2.РеквизитПользовательский Тогда
					Текст1 = Текст1 + Уровень2.Реквизит + ": " + Уровень2.Пример + Символы.ПС;
					
				ИначеЕсли Уровень2.Наименование = "Тема заявки" Тогда
					Текст1 = Текст1 + "Тема заявки: " + ?(ЗначениеЗаполнено(Уровень2.Пример), Уровень2.Пример,
						 "Обратная связь") 
						+ Символы.ПС;
					
				ИначеЕсли Уровень2.Наименование = "Текст заявки" Тогда
					Текст1 = Текст1 + "Текст заявки: " + ?(ЗначениеЗаполнено(Уровень2.Пример), Уровень2.Пример,
						 "Прошу перезвонить или прислать ответ в электронном письме") 
						+ Символы.ПС;

				ИначеЕсли Уровень2.Наименование = "Сайт" Тогда
					СтруктураТестовогоПисьма.Вставить("_Сайт", ?(ЗначениеЗаполнено(Уровень2.Пример), Уровень2.Пример, "rarus.ru"));

				ИначеЕсли Уровень2.Наименование = "Дата" Тогда
					СтруктураТестовогоПисьма.Вставить("_Дата", ?(ЗначениеЗаполнено(Уровень2.Пример),
						 Уровень2.Пример,
						 "2019-02-18 12:34:02"));

				ИначеЕсли Уровень2.Наименование = "Канал привлечения" Тогда
					СтруктураТестовогоПисьма.Вставить("_ИсточникТрафика", ?(ЗначениеЗаполнено(Уровень2.Пример),
						 Уровень2.Пример,
						 "Email рассылки"));

				ИначеЕсли Уровень2.Наименование = "Рекламная кампания" Тогда
					СтруктураТестовогоПисьма.Вставить("_РекламнаяКампания", ?(ЗначениеЗаполнено(Уровень2.Пример),
						 Уровень2.Пример,
						 "email рекламная кампания"));

				ИначеЕсли Уровень2.Наименование = "ID Рекламная кампания" Тогда
					СтруктураТестовогоПисьма.Вставить("_РекламнаяКампанияИД", ?(ЗначениеЗаполнено(Уровень2.Пример),
						 Уровень2.Пример,
						 "1234567890"));

				ИначеЕсли Уровень2.Наименование = "id" Тогда
					СтруктураТестовогоПисьма.Вставить("_id", ?(ЗначениеЗаполнено(Уровень2.Пример), Уровень2.Пример, "0000000001"));

				ИначеЕсли Уровень2.Наименование = "utm_source" Тогда
					СтруктураТестовогоПисьма.Вставить("_utm_source", ?(ЗначениеЗаполнено(Уровень2.Пример), Уровень2.Пример, "google"));

				ИначеЕсли Уровень2.Наименование = "utm_pos" Тогда
					СтруктураТестовогоПисьма.Вставить("_utm_pos", ?(ЗначениеЗаполнено(Уровень2.Пример),
						 Уровень2.Пример,
						 "Переход с сайта"));

				ИначеЕсли Уровень2.Наименование = "utm_medium" Тогда
					СтруктураТестовогоПисьма.Вставить("_utm_medium", ?(ЗначениеЗаполнено(Уровень2.Пример), Уровень2.Пример, "cpc"));
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Стр Из СтруктураТестовогоПисьма Цикл
		ТелоПисьма = СтрЗаменить(ТелоПисьма, Стр.Ключ, Стр.Значение);
	КонецЦикла;

	ТелоПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТелоПисьма, Текст1);
	
	СтрокаТелоПисьмо = ТелоПисьма;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаЗаполненностиРеквизитовПоСценарию()
	
	Если Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Comagic")
		ИЛИ Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.UIS") Тогда
		Если Не ЗначениеЗаполнено(Объект.Token) Тогда
			ТекстОшибки = НСтр("ru='Не заполнен токен!';en='Token is not filled in.'");
			ПолеВвода = "Объект.Token";
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеВвода);
		КонецЕсли;
	ИначеЕсли Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.WebService") Тогда
		
	ИначеЕсли Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.ПочтовоеСообщение") Тогда
		Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
			ТекстОшибки = НСтр("ru='Не заполнена учетная запись!';en='Account is not filled!'");
			ПолеВвода = "Объект.УчетнаяЗапись";
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеВвода);
		КонецЕсли;
		
	Иначе
		Отказ = Ложь;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура СгенерироватьНовыйИдентификатор(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Объект.ИдентификаторИсточника = Новый УникальныйИдентификатор;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область ВнешняяОбработка

&НаСервере
Функция ПолучитьДвоичныеДанныеИзХранилища()
	ОбъектПолучения = РеквизитФормыВЗначение("Объект");
	Возврат(ОбъектПолучения.ОбработкаДействия.Получить());
КонецФункции

&НаСервере
Процедура ПодготовитьКВыгрузкеОбработкуНаСервере()
	ДанныеФайла = ПолучитьДвоичныеДанныеИзХранилища();
	АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОбработку(Команда)
	
	ПодготовитьКВыгрузкеОбработкуНаСервере();

	Оповещение = Новый ОписаниеОповещения("ВыгрузитьОбработкуПродолжение", ЭтотОбъект);
	ТекстПредупреждения = НСтр("ru='Для продолжения необходимо установить расширение для работы с файлами.';
		|en='To continue,
		| install the file operation extension.'");
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Оповещение, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОбработкуПродолжение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборФайла", ЭтотОбъект);
	ИмяФайла = Объект.НазваниеОбработки + ".epf";
	Файл = Новый ОписаниеПередаваемогоФайла(ИмяФайла, АдресФайла);
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Файл);
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогОткрытияФайла.Фильтр = "(*.epf)|*.epf";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	НачатьПолучениеФайлов(ОписаниеОповещения, ПолучаемыеФайлы, ДиалогОткрытияФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайла(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() > 0 Тогда
		Объект.ПутьКОбработке = ПомещенныеФайлы[0].Имя;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбработкуКлиент(Команда)
	
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(
			Новый ОписаниеОповещения(
				"ЗагрузитьОбработкуПродолжение",
				ЭтотОбъект,
				Новый Структура),
			НСтр("ru='Для продолжения необходимо установить расширение для работы с файлами.';en='To continue, install the file operation extension.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбработкуПродолжение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Объект.НазваниеОбработки) Тогда
		ОписаниеОповещенияЗавершения = Новый ОписаниеОповещения("ВопросЗагрузитьОбработку", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияЗавершения,
			 НСтр("ru='Загрузить новую обработку с диска?';en='Download new treatment from disk?'"),
			 РежимДиалогаВопрос.ДаНет);
	Иначе
		ВопросЗагрузитьОбработку(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗагрузитьОбработку(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьОбработкуЗавершение", ЭтотОбъект);
		ИмяФайла = Объект.НазваниеОбработки + ".epf";
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.Фильтр = "(*.epf)|*.epf";
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		НачатьПомещениеФайлов(ОписаниеОповещения, , ДиалогОткрытияФайла, Истина, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбработкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
		АдресФайла = Результат[0].Хранение;
		Объект.ПутьКОбработке = Результат[0].Имя;
		ЗагрузитьОбработку();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьОбработку()
	ПараметрыЗащиты = Новый("ОписаниеЗащитыОтОпасныхДействий" + "");
	ПараметрыЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
	
	Объект.ИспользуетсяСтандартнаяОбработка = Ложь;
	Обработка =  ВнешниеОбработки.Создать(ВнешниеОбработки.Подключить(АдресФайла, , Ложь, ПараметрыЗащиты), Ложь);
	Объект.НазваниеОбработки = Обработка.Метаданные().Имя;
	Если Объект.Наименование = "" Тогда
		Объект.Наименование = Обработка.Метаданные().Синоним;
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ВыгрузитьДемоОбработку()
	ПодготовитьКВыгрузкеДемоОбработкуНаСервере();

	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(
			Новый ОписаниеОповещения(
				"ВыгрузитьДемоОбработкуПродолжение",
				ЭтотОбъект,
				Новый Структура),
			НСтр("ru='Для продолжения необходимо установить расширение для работы с файлами.';en='To continue, install the file operation extension.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДемоОбработкуПродолжение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт

	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборФайла", ЭтотОбъект);
	ИмяФайла = "Демо обработка.epf";
	Файл = Новый ОписаниеПередаваемогоФайла(ИмяФайла, ДемоАдресФайла);
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Файл);
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогОткрытияФайла.Фильтр = "(*.epf)|*.epf";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	НачатьПолучениеФайлов(ОписаниеОповещения, ПолучаемыеФайлы, ДиалогОткрытияФайла, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДемоДвоичныеДанныеИзХранилища()
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	Возврат(ОбъектЗначение.ПолучитьМакет("МакетОбработки"));
КонецФункции

&НаКлиенте
Процедура ПодготовитьКВыгрузкеДемоОбработкуНаСервере()
	
	ДанныеФайла = ПолучитьДемоДвоичныеДанныеИзХранилища();
	ДемоАдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВиджета

&НаКлиенте
Процедура ЗаполнитьДанныеДляВиджета()
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДополнительныеДанныеПоИсточникам.Очистить();
	
	// Заполнение обязательных полей виджета.
	НоваяСтр = Объект.ДополнительныеДанныеПоИсточникам.Добавить();
	НоваяСтр.Свойство = "Контакт";
	НоваяСтр.Реквизит = "ФИО";
	НоваяСтр.Служебный = Истина;
	НоваяСтр.Обязательный = Истина;
	
	НоваяСтр = Объект.ДополнительныеДанныеПоИсточникам.Добавить();
	НоваяСтр.Свойство = "Телефон";
	НоваяСтр.Реквизит = "Телефон";
	НоваяСтр.Служебный = Истина;	
	НоваяСтр.Обязательный = Истина;
	
	НоваяСтр = Объект.ДополнительныеДанныеПоИсточникам.Добавить();
	НоваяСтр.Свойство = "ЭлектроннаяПочта";
	НоваяСтр.Реквизит = "e-mail";
	НоваяСтр.Служебный = Истина;
	НоваяСтр.Обязательный = Истина;
	
	НоваяСтр = Объект.ДополнительныеДанныеПоИсточникам.Добавить();
	НоваяСтр.Свойство = "Организация";
	НоваяСтр.Реквизит = "Компания";
	НоваяСтр.Служебный = Истина;
	НоваяСтр.Обязательный = Истина;
	
	НоваяСтр = Объект.ДополнительныеДанныеПоИсточникам.Добавить();
	НоваяСтр.Свойство = "Комментарий";
	НоваяСтр.Реквизит = "Комментарий";
	НоваяСтр.Служебный = Истина;	
	НоваяСтр.Обязательный = Истина;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	Элементы.ДополнительныеДанныеПоИсточникамСвойство.ОграничениеТипа = Новый ОписаниеТипов(Массив);
	
	МакетВиджета = ОбновитьДанныеВиджета();
	
	Если НЕ ЗначениеЗаполнено(Объект.ИдентификаторИсточника) Тогда
		Объект.ИдентификаторИсточника = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СормироватьТекстЗамены(Наименование)
	
	Если Наименование = "Контакт" Тогда
		Возврат " <P><INPUT style=""COLOR: grey"" value=""Имя"" name=crm_form_name placeholder=""Имя""></INPUT></P> " 
			+ Символы.ПС;
	ИначеЕсли Наименование = "Телефон" Тогда
		Возврат " <P><INPUT style=""COLOR: grey"" value=""Телефон"" name=crm-form_phone placeholder=""
			|+7 (123) 456 78 90"" v-mask=""'+7 (###) ### ## ##'""></INPUT></P> " 
			+ Символы.ПС; 
	ИначеЕсли Наименование = "ЭлектроннаяПочта" Тогда
		Возврат " <P><INPUT style=""COLOR: grey"" value=""e-mail"" name=crm_form_email placeholder=""e-mail""></INPUT></P> " 
			+ Символы.ПС; 
	ИначеЕсли Наименование = "Организация" Тогда
		Возврат " <P><INPUT style=""COLOR: grey"" value=""Название компании"" name=crm_form_work placeholder=""Название компании""></INPUT></P> " 
			+ Символы.ПС; 
	ИначеЕсли Наименование = "Комментарий" Тогда
		Возврат " <P><INPUT style=""COLOR: grey"" value=""Сообщение"" placeholder=""Сообщение""></INPUT></P> " + Символы.ПС; 
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция ОбновитьДанныеВиджета()
	
	ДокОб = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	
	ТекстМакета = ДокОб.ПолучитьТекст();
	
	ТекстЗамены = "";
	
	Для Каждого Стр Из Объект.ДополнительныеДанныеПоИсточникам Цикл
		
		Если Стр.Служебный Тогда
			ТекстПодстановки = СормироватьТекстЗамены(Стр.Свойство);
			ТекстЗамены = ТекстЗамены + ТекстПодстановки;
		Иначе 
			ТекстПодстановки = "<P><INPUT style=""COLOR: grey"" value=""" + Стр.Реквизит 
				+ """ name=crm_form_name></INPUT></P> " 
				+ Символы.ПС; 
			//ТекстПодстановки = "<P>"+Стр.Реквизит + "<BR><INPUT style=""COLOR: grey"" value=""" 
				//+ Стр.Реквизит + """ name=crm_form_name></INPUT></P> " 
				//+ Символы.ПС;;
			ТекстЗамены = ТекстЗамены + ТекстПодстановки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстМакета = СтрЗаменить(ТекстМакета, "#Замена", ТекстЗамены);
	
	Возврат ТекстМакета;
	
КонецФункции

&НаКлиенте
Процедура ДополнительныеДанныеПоИсточникамПриИзменении(Элемент)
	МакетВиджета = ОбновитьДанныеВиджета();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеДанныеПоИсточникамПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные.Служебный Тогда
		ПоказатьПредупреждение(, "Нельзя удалять служебные реквизиты");
		Отказ = Истина;
		Возврат;
	Иначе
		ЭлементДляУдаления = ТекДанные.Свойство;
		ЭлементДляУдаления = СписокИсключений.НайтиПоЗначению(ЭлементДляУдаления);
		СписокИсключений.Удалить(ЭлементДляУдаления);
		МакетВиджета = ОбновитьДанныеВиджета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеДанныеПоИсточникамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Реквизит) Тогда
		Объект.ДополнительныеДанныеПоИсточникам.Удалить(Элемент.ТекущиеДанные.НомерСтроки - 1);
	КонецЕсли;
	МакетВиджета = ОбновитьДанныеВиджета();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеДанныеПоИсточникамПеретаскивание(Элемент, ПараметрыПеретаскивания,
	 СтандартнаяОбработка, Строка,
	 Поле)
	МакетВиджета = ОбновитьДанныеВиджета();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеДанныеПоИсточникамОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания,
	 СтандартнаяОбработка)
	МакетВиджета = ОбновитьДанныеВиджета();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеДанныеПоИсточникамРеквизитНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокИсключений", СписокИсключений);
	
	ОткрытьФорму("Справочник.CRM_ИсточникиПолученияЛидов.Форма.ФормаДополнительныхДанных",
		 ПараметрыФормы, ЭтотОбъект, , , , ,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		Объект.CRM_РольОтветственного = ВыбранноеЗначение;
		
	Иначе	
		ТекСтрока = Элементы.ДополнительныеДанныеПоИсточникам.ТекущиеДанные;
		ТекСтрока.Свойство = ВыбранноеЗначение;
		ТекСтрока.Реквизит 		= ПолучитьЗаголовокЗначения(ВыбранноеЗначение);
		ТекСтрока.Обязательный 	= ПолучитьОбязательноЗначения(ВыбранноеЗначение);
		МакетВиджета = ОбновитьДанныеВиджета();
		
		СписокИсключений.Добавить(ВыбранноеЗначение);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбязательноЗначения(ВыбранноеЗначение)
	
	Возврат ВыбранноеЗначение.ЗаполнятьОбязательно;
	
КонецФункции

&НаСервере
Процедура ЗаполнениеДанныхПоИСключениям()
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Служебный", Ложь);
	
	МассиСтрок = Объект.ДополнительныеДанныеПоИсточникам.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Стр Из МассиСтрок Цикл
		
		СписокИсключений.Добавить(Стр.Свойство);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаголовокЗначения(ВыбранноеЗначение)
	
	Возврат ВыбранноеЗначение.Заголовок;
	
КонецФункции

&НаКлиенте
Процедура ЯвляетсяЛидом(Команда)
	
	НаСервереЛид();
	
КонецПроцедуры

&НаСервере
Процедура НаСервереЛид()
	
	Если Элементы.ЯвляетсяЛидом.Пометка Тогда
		Элементы.ЯвляетсяЛидом.Пометка = Ложь;
		Объект.CRM_ИсточникЛидов = Ложь;
	Иначе
		Элементы.ЯвляетсяЛидом.Пометка = Истина;
		Объект.CRM_ИсточникЛидов = Истина;
	КонецЕсли;
	
	УстановитьЦветаКнопки("ЯвляетсяЛидом", Элементы.ЯвляетсяЛидом.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбязательнаяВерификация(Команда)
	
	Если Элементы.ОбязательнаяВерификация.Пометка Тогда
		Элементы.ОбязательнаяВерификация.Пометка = Ложь;
		Объект.CRM_УказыватьПричинуОтклонения = Ложь;
	Иначе
		Элементы.ОбязательнаяВерификация.Пометка = Истина;
		Объект.CRM_УказыватьПричинуОтклонения = Истина;
	КонецЕсли;
	
	УстановитьЦветаКнопки("ОбязательнаяВерификация", Элементы.ОбязательнаяВерификация.Пометка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветаКнопки(Наименование, Пометка)
	
	Если НЕ Пометка Тогда
		Элементы[Наименование].ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
	Иначе
		Элементы[Наименование].ЦветТекста = ЦветаСтиля.ЦветАкцента;
		Элементы[Наименование].ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединенныйФайл(Команда)
	
	Если Элементы.ПрисоединенныйФайл1.Пометка Тогда
		Элементы.ПрисоединенныйФайл1.Пометка = Ложь;
		Объект.ПрисоединенныйФайл = Ложь;
	Иначе
		Элементы.ПрисоединенныйФайл1.Пометка = Истина;
		Объект.ПрисоединенныйФайл = Истина;
	КонецЕсли;
	
	УстановитьЦветаКнопки("ПрисоединенныйФайл1", Элементы.ПрисоединенныйФайл1.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьГенераторЗвонка(Команда)
	
	Если Элементы.ИспользоватьГенераторЗвонка1.Пометка Тогда
		Элементы.ИспользоватьГенераторЗвонка1.Пометка = Ложь;
		Объект.ИспользоватьГенераторЗвонка = Ложь;
	Иначе
		Элементы.ИспользоватьГенераторЗвонка1.Пометка = Истина;
		Объект.ИспользоватьГенераторЗвонка = Истина;
	КонецЕсли;
	
	УстановитьЦветаКнопки("ИспользоватьГенераторЗвонка1", Элементы.ИспользоватьГенераторЗвонка1.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьГенераторЗаявки(Команда)
	Если Элементы.ИспользоватьГенераторЗаявки1.Пометка Тогда
		Элементы.ИспользоватьГенераторЗаявки1.Пометка = Ложь;
		Объект.ИспользоватьГенераторЗаявки = Ложь;
	Иначе
		Элементы.ИспользоватьГенераторЗаявки1.Пометка = Истина;
		Объект.ИспользоватьГенераторЗаявки = Истина;
	КонецЕсли;
	УстановитьЦветаКнопки("ИспользоватьГенераторЗаявки1", Элементы.ИспользоватьГенераторЗаявки1.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПримерФайлаНажатие(Элемент)
	
	ВыгрузитьДемоОбработку();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПрисоединенныйФайлПриИзменении(Элемент)
	
	Признак = ?(СписокПрисоединенныйФайл = "1", Истина, Ложь);
	ИзменитьРеквизитыОтображение("ПрисоединенныйФайл", Признак);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТелефонию()
	ИмяОткрываемойФормы = "Обработка.сфпАРМ_Телефония.Форма.Форма";
	ОткрытьФорму(ИмяОткрываемойФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПриОтветеНаВопросПодключитьТелефонию(КодВозврата, Параметры) Экспорт
	
	Если КодВозврата = "Подключить" Тогда
		ОткрытьТелефонию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗвонкиПриИзменении(Элемент)
	
	Признак = ?(СписокЗвонки = "1", Истина, Ложь);
	Если Признак Тогда
		
		// Проверим что телефония подключена
		ТребуетсяНастройкаТелефонии = сфпСофтФонПроСервер.сфпТребуетсяНастройкаТелефонии();
		
		Если ТребуетсяНастройкаТелефонии Тогда
			ТекстВопроса = НСтр("ru='Для использования коллтрекинга требуется подключить Телефонию!"
"Это необходимо для онлайн принятия звонка в 1C:CRM.';en='It is necessary connect Telephony to use call-tracking!"
"It is necessary for online making call in 1C:CRM.'");
			ОбработчикРезультата = Новый ОписаниеОповещения("ПриОтветеНаВопросПодключитьТелефонию", ЭтотОбъект);
			ТекстВопроса = ТекстВопроса + Символы.ПС + Символы.ПС + НСтр("ru='Подключить Телефонию?'");
			СписокКнопок = Новый СписокЗначений();
			СписокКнопок.Добавить("Подключить", НСтр("ru='Подключить'"));
			СписокКнопок.Добавить("Отмена", НСтр("ru='Отмена'"));
			ПоказатьВопрос(ОбработчикРезультата, ТекстВопроса, СписокКнопок);
			
			СписокЗвонки = "0";
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменитьРеквизитыОтображение("ИспользоватьГенераторЗвонка", Признак);

КонецПроцедуры

Процедура ИзменитьРеквизитыОтображение(Наименование, Признак)
	
	Объект[Наименование] = Признак;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаявкиПриИзменении(Элемент)
	
	Признак = ?(СписокЗаявки = "1", Истина, Ложь);
	ИзменитьРеквизитыОтображение("ИспользоватьГенераторЗаявки", Признак);
	
	Элементы.ГруппаДлительностьОжиданияСвязыванияЗаявки.Видимость = Признак;
	Если Признак И Объект.CRM_ДлительностьОжиданияСвязыванияЗаявки = 0 Тогда
		Объект.CRM_ДлительностьОжиданияСвязыванияЗаявки = 8;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЯвляетсяЛидомПриИзменении(Элемент)
	
	Признак = ?(СписокЯвляетсяЛидом = "1", Истина, Ложь);
	ИзменитьРеквизитыОтображение("CRM_ИсточникЛидов", Признак);
	Элементы.ГруппаИспользуемыеСценарии.Видимость = Объект.CRM_ИсточникЛидов;
	Элементы.ГруппаСрокОбработки.Видимость = Объект.CRM_ИсточникЛидов;
	Элементы.ГруппаСрокЖизни.Видимость = Объект.CRM_ИсточникЛидов;
	Если Объект.CRM_ИсточникЛидов 
		И Не ЗначениеЗаполнено(Объект.CRM_СрокЖизниОбращения) Тогда
		Объект.CRM_СрокЖизниОбращения = 30;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеСценарииПометкаПриИзменении(Элемент)
	КолвоСценариев = 0;
	Для каждого Элемент Из ИспользуемыеСценарии Цикл
		Если Элемент.Пометка Тогда
			КолвоСценариев = КолвоСценариев + 1;
		КонецЕсли;
	КонецЦикла;
	Элементы.ГруппаИспользуемыеСценарии.Заголовок = НСтр("ru = 'Используемые сценарии'") + " (" + КолвоСценариев + ")";
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИспользуемыеСценарии()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СостоянияИнтересов.Ссылка КАК Ссылка,
	|	ИСТИНА КАК Пометка,
	|	СостоянияИнтересов.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.CRM_СостоянияИнтересов КАК СостоянияИнтересов
	|ГДЕ
	|	СостоянияИнтересов.Ссылка В(&Используемые)
	|	И СостоянияИнтересов.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СостоянияИнтересов.Ссылка,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.CRM_СостоянияИнтересов КАК СостоянияИнтересов
	|ГДЕ
	|	НЕ СостоянияИнтересов.Ссылка В (&Используемые)
	|	И СостоянияИнтересов.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
	|	И НЕ СостоянияИнтересов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка");
	
	Запрос.УстановитьПараметр("Используемые", Объект.CRM_Сценарии.Выгрузить().ВыгрузитьКолонку("Сценарий"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИспользуемыеСценарии.Добавить(Выборка.Ссылка, , Выборка.Пометка, ?(Выборка.ПометкаУдаления,
			 БиблиотекаКартинок.ПометитьНаУдаление,
			 Неопределено));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИспользуемыеСценарии()
	Объект.CRM_Сценарии.Очистить();
	Для каждого Элемент Из ИспользуемыеСценарии Цикл
		Если Элемент.Пометка Тогда
			НовСтр = Объект.CRM_Сценарии.Добавить();
			НовСтр.Сценарий = Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлагИсточникЛидов(Ответ, ДопПарам) Экспорт
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Объект.CRM_ИсточникЛидов = Ложь;
		Если Записать() Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокВерификацияПриИзменении(Элемент)
	
	Признак = ?(СписокВерификация = "1", Истина, Ложь);
	ИзменитьРеквизитыОтображение("CRM_УказыватьПричинуОтклонения", Признак);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьСопоставлениеРеквизитовНаименованиеОкончаниеВводаТекста(Элемент, Текст,
	 ДанныеВыбора, ПараметрыПолученияДанных,
	 СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ТекСтрока = Элементы.ТабличнаяЧастьСопоставлениеРеквизитов.ТекущиеДанные;
		ТекСтрока.Выбрано = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.РеквизитПользовательский Тогда
		ТекстПредупреждения = НСтр("ru = 'Нельзя удалить предопределенное поле письма.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
	Иначе
		
		Стр = Новый Структура;
		Стр.Вставить("РеквизитПоиск", Элемент.ТекущиеДанные.Наименование);
		МассивДанных = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.НайтиСтроки(Стр);
		Если МассивДанных.Количество() > 0 Тогда
			Для Каждого ТекСтрока Из МассивДанных Цикл
				Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Удалить(ТекСтрока);
			КонецЦикла;
		КонецЕсли;
		
		ЗаполнитьСтрокуТелаПисьма();
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Стр = Новый Структура;
	Стр.Вставить("РеквизитПоиск", Элемент.ТекущиеДанные.Наименование);
	МассивДанных = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.НайтиСтроки(Стр);
	Если МассивДанных.Количество() > 0 Тогда
		СтрокаТаблицы = МассивДанных[0];
		СтрокаТаблицы.Выбрано = Элемент.ТекущиеДанные.Выбрано;
	КонецЕсли;
	
	ЗаполнитьСтрокуТелаПисьма();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовПримерПриИзменении(Элемент)
	ЗаполнитьСтрокуТелаПисьма();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	РодительскийЭлемент = ДеревоРеквизитов.ПолучитьЭлементы().Получить(2);
	
	НовыйЭлемент = РодительскийЭлемент.ПолучитьЭлементы().Добавить();
	НовыйЭлемент.РеквизитПользовательский = Истина;
	
	ИдентификаторСтроки = НовыйЭлемент.ПолучитьИдентификатор();
	Элементы.ДеревоРеквизитов.ТекущаяСтрока = ИдентификаторСтроки;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовРеквизитПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	ТекущиеДанные.Заголовок = ТекущиеДанные.Наименование;
	ТекущиеДанные.Реквизит = ТекущиеДанные.Наименование;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьКодВиджета()
	
	СервисВиджетаКодВиджета = "<script id=""widgetCrm""
	|	src=""https://form.1crm.ru/widget.js""
	|	data-token=""1234""
	|	data-source=""" + Объект.ИдентификаторИсточника + """
	|	data-url=""" + СервисВиджетаАдресОбратногоВызова + """
	|	data-metrika=""" + Формат(Объект.CRM_ИдентификаторСчетчика, "ЧГ=") + """
	|	data-analitics="""">
	|</script>";
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_РольОтветственногоСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.РолиИсполнителей.ФормаОбъекта", , ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура CRM_РольОтветственногоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.РолиИсполнителей.ФормаВыбора", , ЭтотОбъект); 

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		Объект.CRM_РольОтветственного = НовыйОбъект;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораИсточников(Режим)
	
	СписокСценариев = Новый СписокЗначений;
	Если Режим = "Виджет" Тогда
		СписокСценариев.Добавить(ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.JivoSite"));
		СписокСценариев.Добавить(ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.WebService"));
		СписокСценариев.Добавить(ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.ПочтовоеСообщение"));
		СписокСценариев.Добавить(ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.ВнешнийAPI"));
		СписокСценариев.Добавить(ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.РучнойВвод"));
		СписокСценариев.Добавить(ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.ВнешняяОбработка"));
		
	ИначеЕсли Режим = "Сервис" Тогда
		//СписокСценариев.Добавить(ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Comagic"));
		СписокСценариев.Добавить(ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Roistat"));
		
	ИначеЕсли Режим = "Коллтрекинг" Тогда
		СписокСценариев.Добавить(ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Comagic"));
		СписокСценариев.Добавить(ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.UIS"));
		СписокСценариев.Добавить(ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Roistat"));
	
	КонецЕсли;
	
	Элементы.Сценарий.СписокВыбора.Очистить();
	Элементы.Сценарий.СписокВыбора.ЗагрузитьЗначения(СписокСценариев.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура РежимВыбораСценарияПриИзменении(Элемент)
	
	ЗаполнитьСписокВыбораИсточников(РежимВыбораСценария);
	ПредСценарий = Объект.Сценарий;
	Объект.Сценарий = Элементы.Сценарий.СписокВыбора[0].Значение;
	
	Если ПредСценарий <> Объект.Сценарий Тогда
		Объект.Наименование = Объект.Сценарий;
	КонецЕсли;
	
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСтатусПодключенияНажатие(Элемент)
	ОткрытьТелефонию();
КонецПроцедуры

&НаКлиенте
Процедура АдресПубликацииСервисовПриИзменении(Элемент = Неопределено)
	
	Если ЗначениеЗаполнено(СервисВиджетаАдресОбратногоВызова) Тогда
		АдресСервисаRoistat = СервисВиджетаАдресОбратногоВызова + "/hs/analytics/roistat";
		АдресСервисаCoMagic = СервисВиджетаАдресОбратногоВызова + "/ws/CoMagic.1cws?wsdl";
		
	Иначе
		АдресСервисаRoistat = "";
		АдресСервисаCoMagic = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПравилаОбработкиТелефонияУсловиеОбработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.CRM_ПравилаОбработки.ТекущиеДанные;
	
	ПараметрыВвода = Новый Структура("Ключ, РежимВыбора, ИсточникОткрытияЛиды, ПометкаУдаления",
		 ТекущаяСтрока.УсловиеОбработки, Истина, Истина,
		 Ложь);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораУсловия", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.CRM_УсловияОбработкиОбращений.Форма.ФормаВыбора", ПараметрыВвода, Элемент,
		 , , , ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПравилаОбработкиТелефонияПравилоОбработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.CRM_ПравилаОбработки.ТекущиеДанные;
	
	ПараметрыВвода = Новый Структура("Ключ, РежимВыбора, ИсточникОткрытияЛиды, ПометкаУдаления",
		 ТекущаяСтрока.ПравилоОбработки, Истина, Истина,
		 Ложь);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораПравила", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.CRM_ПравилаОбработкиОбращений.Форма.ФормаВыбора", ПараметрыВвода, Элемент,
		 , , , ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПравилаОбработкиПравилоОбработкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.CRM_ПравилаОбработки.ТекущиеДанные;
	ОткрытьПравилоОбработки(Элемент, ТекущиеДанные.ПравилоОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПравила(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.CRM_ПравилаОбработки.ТекущиеДанные.ПравилоОбработки = Результат;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораУсловия(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.CRM_ПравилаОбработки.ТекущиеДанные.УсловиеОбработки = Результат;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик выбора партнера - владельца.
//
// Параметры:
//	РезультатЗакрытия		- СправочникСсылка	- Владелец контактных лиц.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораПартнераИсточника(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	ПараметрыФормы = Новый Структура;
	Если РезультатЗакрытия <> Неопределено Тогда 
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", РезультатЗакрытия));
	КонецЕсли;
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы,
		 ДополнительныеПараметры.Элемент, ,
		 ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры // ОбработкаВыбораПартнераИсточника()

&НаКлиенте
Процедура CRM_НомерПроектаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Roistat") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Token) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст =  НСтр("ru='Введите значение API-ключа.';en='Enter API-key.'");
			Сообщение.Поле = "Объект.Token";
			Сообщение.Сообщить();
		КонецЕсли;
		
		СписокПроектов = ПолучитьПроектыRoistat();
		Если ТипЗнч(СписокПроектов) = Тип("Строка") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СписокПроектов);
		ИначеЕсли СписокПроектов.Количество() = 0 Тогда
			ПоказатьПредупреждение(,  НСтр("ru='Проекты не найдены.';en='Projects not found.'"));
						
		Иначе	
			Если СписокПроектов.Количество() = 1 Тогда
				Если Объект.CRM_НомерПроекта <> СписокПроектов[0].Значение Тогда
					Объект.CRM_НомерПроекта = СписокПроектов[0].Значение;
				КонецЕсли;
			КонецЕсли;
			
			Оповещение = Новый ОписаниеОповещения("ПриВыбореНомераПроекта", ЭтотОбъект);
			НачальноеЗначение = СписокПроектов.НайтиПоЗначению(Объект.CRM_НомерПроекта);
			ПоказатьВыборИзСписка(Оповещение, СписокПроектов, Элемент, НачальноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПроектыRoistat()
	
	ИмяСервера 	= "cloud.roistat.com";
	АдресРесурса = "/api/v1/user/projects";
		
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-type", "application/json");
	Заголовки.Вставить("Api-key", Объект.Token);
		
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(ИмяСервера, , , , Прокси, 60, Новый ЗащищенноеСоединениеOpenSSL);
    HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("GET", HTTPЗапрос);
    Если HTTPОтвет.КодСостояния <> 200 Тогда
		ВызватьИсключение НСтр("ru='Проблема с получение данных Roistat';en='NTRS'");
	КонецЕсли;

	РезультатЗапроса = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	СтрОшибки = "";
	
	Если ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Попытка
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(РезультатЗапроса);
			РезультатЗапросаJSON = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();

			Если РезультатЗапросаJSON.Свойство("projects") Тогда
				СписокВыбора = Новый СписокЗначений();
				Для Каждого ТекПроект Из РезультатЗапросаJSON.projects Цикл
					ИдентификаторПроекта = Формат(ТекПроект.id, "ЧГ=");
					СписокВыбора.Добавить(ИдентификаторПроекта, ТекПроект.name + " (" + ИдентификаторПроекта + ")");
				КонецЦикла;
				
				Возврат СписокВыбора;
				
			Иначе
				Если РезультатЗапросаJSON.Свойство("status") Тогда
					Если РезультатЗапросаJSON.status = "error" Тогда
						СтрОшибки = РезультатЗапросаJSON.error;
					КонецЕсли;
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(СтрОшибки) Тогда
					СтрОшибки = АдресРесурса + Символы.ПС + РезультатЗапроса;
				КонецЕсли;
			КонецЕсли;
        Исключение
			СтрОшибки = ОписаниеОшибки() + Символы.ПС + РезультатЗапроса;
		КонецПопытки;
    КонецЕсли;
	
	Возврат СтрОшибки;
	
КонецФункции

&НаКлиенте
Процедура ПриВыбореНомераПроекта(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.CRM_НомерПроекта = ВыбранныйЭлемент.Значение;
	
КонецПроцедуры

#КонецОбласти

#Область ПравилаОбработки

&НаКлиенте
Процедура ВидимостьПравилОбработки()
	
	Если Объект.CRM_ОбрабатыватьОбращения Тогда
		Если Объект.CRM_ПравилаОбработки.Количество() = 1 
			И Объект.CRM_ПравилаОбработки[0].УсловиеОбработки = ПредопределенноеЗначение("Справочник.CRM_УсловияОбработкиОбращений.БезУсловия") Тогда
			Элементы.ПолеПравилоОбработки.Видимость = Истина;
			Элементы.ГруппаСписокПравил.Видимость = Истина;
			Элементы.ГруппаСписокПравил.Заголовок = НСтр("ru = 'Расширенная настройка'");
		Иначе
			Элементы.ПолеПравилоОбработки.Видимость = Ложь;
			Элементы.ГруппаСписокПравил.Видимость = Истина;
			Элементы.ГруппаСписокПравил.Заголовок = НСтр("ru = 'Правила обработки'") + " (" 
				+ Объект.CRM_ПравилаОбработки.Количество() 
				+ ")";
		КонецЕсли;
	Иначе
		Элементы.ПолеПравилоОбработки.Видимость = Ложь;
		Элементы.ГруппаСписокПравил.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОбрабатыватьОбращенияПриИзменении(Элемент)
	Если Объект.CRM_ОбрабатыватьОбращения
		И Объект.CRM_ПравилаОбработки.Количество() = 0 Тогда
		НовПравило = Объект.CRM_ПравилаОбработки.Добавить();
		НовПравило.УсловиеОбработки = ПредопределенноеЗначение("Справочник.CRM_УсловияОбработкиОбращений.БезУсловия");
	КонецЕсли;
	ВидимостьПравилОбработки();
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПравилаОбработкиПриИзменении(Элемент)
	
	Если Объект.CRM_ПравилаОбработки.Количество() = 0 Тогда
		Объект.CRM_ОбрабатыватьОбращения = Ложь;
	КонецЕсли;
	ВидимостьПравилОбработки();
		
КонецПроцедуры

#КонецОбласти

#Область СрокиОбработки

&НаКлиенте
Процедура СрокОбработкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Для Сч = Элемент.МинимальноеЗначение  По мин(Элемент.МаксимальноеЗначение, 59) Цикл
		Элемент.СписокВыбора.Добавить(Сч);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_СрокЖизниОбращенияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	Если Элемент.РежимВыбораИзСписка Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.РежимВыбораИзСписка = Ложь;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_СрокЖизниОбращенияПриИзменении(Элемент)
	Если Элемент.СписокВыбора.НайтиПоЗначению(Объект.CRM_СрокЖизниОбращения) <> Неопределено Тогда
		Элемент.РежимВыбораИзСписка = Истина;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_СрокЖизниОбращенияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора,
	 ПараметрыПолученияДанных,
	 СтандартнаяОбработка)
	Если Элемент.РежимВыбораИзСписка 
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Объект.CRM_СрокЖизниОбращения = Число(Текст);
		Если Элемент.СписокВыбора.НайтиПоЗначению(Объект.CRM_СрокЖизниОбращения) = Неопределено Тогда
			Элемент.РежимВыбораИзСписка = Ложь;
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолеПравилоОбработкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПравилоОбработки(Элемент, Объект.CRM_ПравилаОбработки[0].ПравилоОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПравилоОбработки(Элемент, ПравилоОбработки)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", ПравилоОбработки);
	ПараметрыФормы.Вставить("АккаунтВладелец", Объект.Ссылка);
	ОткрытьФорму("Справочник.CRM_ПравилаОбработкиОбращений.ФормаОбъекта", ПараметрыФормы, Элемент, , , , ,
	             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти
