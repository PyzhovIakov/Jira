
#Область ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ 

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере"
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ сфпСофтФонПроСервер.сфпРолиДоступны("ПолныеПрава, сфпУправлениеМаршрутизацией") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИспользоватьПодразделения = сфпСофтФонПроСервер.сфпИспользоватьПодразделенияПользователей();
	
	Элементы.ПоказатьДеревоПодразделений.Видимость = ИспользоватьПодразделения;
	Элементы.ПоказатьДеревоГруппПользователей.Видимость = сфпСофтФонПроСервер.сфпИспользоватьГруппыПользователей();
	Если Не ИспользоватьПодразделения
		И Не сфпСофтФонПроСервер.сфпИспользоватьГруппыПользователей() Тогда
		Элементы.ПоказатьДеревоПользователей.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		НоваяСсылка	= Справочники.сфпТелефонныеКниги.ПолучитьСсылку(Новый УникальныйИдентификатор()); 
		
		ЗначениеОбъекта	= РеквизитФормыВЗначение("Объект");
		ЗначениеОбъекта.УстановитьСсылкуНового(НоваяСсылка);
		ЗначениеОбъекта.Идентификатор = НоваяСсылка.УникальныйИдентификатор();
		ЗначениеВРеквизитФормы(ЗначениеОбъекта, "Объект");

		Объект.УчаствуетВРегламентномЗадании = Константы.сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг.Получить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Идентификатор) Тогда
		Объект.Идентификатор = Объект.Ссылка.УникальныйИдентификатор();
	КонецЕсли;

	АдресКнигиВоВременномХранилище = "";
		
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации
	|ГДЕ
	|	НЕ ЭтоГруппа И НЕ ПометкаУдаления
	|	И Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникПользователи)
	|	И Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)");
	СписокВидовКонтактнойИнформации.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Если Объект.ВидыТелефонов.Количество() = 0 Тогда
		ТекВид	= Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПользователяРабочий;
		НоваяСтрока = Объект.ВидыТелефонов.Добавить();
		НоваяСтрока.Пометка	= Истина;
		НоваяСтрока.Идентификатор = ТекВид.УникальныйИдентификатор();
		НоваяСтрока.Наименование = "Внутренний номер";
		НоваяСтрока.Псевдоним = "Внутренний";
		НоваяСтрока.Вид	= ТекВид;
		
		ТекВид	= Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонПользователя;
		НоваяСтрока = Объект.ВидыТелефонов.Добавить();
		НоваяСтрока.Пометка	= Истина;
		НоваяСтрока.Идентификатор = ТекВид.УникальныйИдентификатор();
		НоваяСтрока.Наименование = "Мобильный телефон";
		НоваяСтрока.Псевдоним = "Мобильный";
		НоваяСтрока.Вид	= ТекВид;
		
		ТекВид	= Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
		НоваяСтрока = Объект.ВидыТелефонов.Добавить();
		НоваяСтрока.Пометка	= Истина;
		НоваяСтрока.Идентификатор = ТекВид.УникальныйИдентификатор();
		НоваяСтрока.Наименование = "Рабочий номер";
		НоваяСтрока.Псевдоним = "Рабочий";
		НоваяСтрока.Вид	= ТекВид;
		
	Иначе
		СтруктураПоиска = Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.ПустаяСсылка());
		НайденныеСтроки = Объект.ВидыТелефонов.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Объект.ВидыТелефонов.Удалить(НайденнаяСтрока);
		КонецЦикла;	
	КонецЕсли;

	Для Каждого ТекЭлемент Из СписокВидовКонтактнойИнформации Цикл
		СтруктураПоиска = Новый Структура("Вид", ТекЭлемент.Значение);
		НайденныеСтроки = Объект.ВидыТелефонов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.ВидыТелефонов.Добавить();
			НоваяСтрока.Пометка	= Ложь;
			НоваяСтрока.Идентификатор = ТекЭлемент.Значение.УникальныйИдентификатор();
			НоваяСтрока.Наименование = "" + ТекЭлемент.Значение;
			НоваяСтрока.Псевдоним = НоваяСтрока.Наименование;
			НоваяСтрока.Вид	= ТекЭлемент.Значение;
		КонецЕсли;	
	КонецЦикла;
	
	ДлинаВнутреннихНомеров = ПолучитьДлинуВнутреннихНомеров();

	СтруктураПоиска = Новый Структура("Пометка", Истина);
	НайденныеСтроки = Объект.ВидыТелефонов.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ВыбранныеВидыКонтактнойИнформации.Добавить(НайденнаяСтрока.Вид);
	КонецЦикла;	
	
	ВыгрузитьСправочникВДерево("Пользователи", "ДеревоОбъектовПользователи");
	ВыгрузитьСправочникВДерево("ГруппыПользователей", "ДеревоОбъектовГруппыПользователей");
	ВыгрузитьСправочникВДерево("СтруктураПредприятия", "ДеревоОбъектовПодразделения");

	ЗаполнитьДеревоПользователей();

	ЦветФонаКнопки = ЦветаСтиля.CRM_СерыйДляВторостепенныхФункций;
	ЦветФонаВыбраннойКнопки = ЦветаСтиля.CRM_ОсновнойГолубой;

	//МассивВидов = СписокВидовКонтактнойИнформации.ВыгрузитьЗначения();
	//МассивВсехПользователей	= сфпСофтФонПроСервер.сфпПолучитьМассивВсехПользователей(МассивВидов);

	СтрокиДерева = ДеревоТелефоннойКниги.ПолучитьЭлементы();

	// Заполняем дерево структурами телефонной книги
	МассивТелефоннойКниги = ПолучитьМассивТелефоннойКниги();
	Для Каждого ЭлементМассива Из МассивТелефоннойКниги Цикл
		ДобавитьСтрокуСтруктурыВТелефоннуюКнигу(ЭлементМассива, СтрокиДерева, ДеревоТелефоннойКниги);
	КонецЦикла;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии"
//
Процедура ПриОткрытии(Отказ)
	ПоказатьДерево(0, Ложь);
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура - обработчик события формы "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НЕ ПроверитьЗаполнениеТелефоннойКниги() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	МассивТелефоннойКниги = ПолучитьМассивСтруктурТелефоннойКниги();
	АдресКнигиВоВременномХранилище = ПоместитьВоВременноеХранилище(МассивТелефоннойКниги, УникальныйИдентификатор);
	
	Если НЕ Объект.ПометкаУдаления Тогда	
		МассивВидовТелефонов = Новый Массив();
		Для Каждого СтрокаВида Из Объект.ВидыТелефонов Цикл
			Если СтрокаВида.Пометка Тогда 
				СтруктураВида = Новый Структура();
				СтруктураВида.Вставить("Идентификатор",	СтрокаВида.Идентификатор);
				СтруктураВида.Вставить("Наименование", СтрокаВида.Наименование);
				СтруктураВида.Вставить("Псевдоним", СтрокаВида.Псевдоним);
				СтруктураВида.Вставить("Вид", СтрокаВида.Вид);
				МассивВидовТелефонов.Добавить(СтруктураВида);
			КонецЕсли;	
		КонецЦикла;	
		
		СтруктураКниги = Новый Структура();
		СтруктураКниги.Вставить("Идентификатор", Объект.Идентификатор);
		СтруктураКниги.Вставить("ИмяКниги", Объект.Наименование);
		СтруктураКниги.Вставить("ВидыТелефонов", МассивВидовТелефонов);
		СтруктураКниги.Вставить("МассивКниги", МассивТелефоннойКниги);
		СтруктураКниги.Вставить("Порядок", Объект.РеквизитДопУпорядочивания);
		
		Тест1(СтруктураКниги);
		
		сфпСофтФонПроКлиент.сфпЗаписатьТелефоннуюКнигу(СтруктураКниги);
	КонецЕсли;	

КонецПроцедуры // ПередЗаписью()

&НаСервере
Процедура Тест1(СтруктураКниги)
	
	ТекДерево = РеквизитФормыВЗначение("ДеревоТелефоннойКниги");
	
	Объекты = Новый Массив();
	
	СтруктураПоиска = Новый Структура("ТипОбъекта", "Пользователи");
	НайденныеСтроки = ТекДерево.Строки.НайтиСтроки(СтруктураПоиска, Истина);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если ЗначениеЗаполнено(НайденнаяСтрока.Объект) Тогда
			Объекты.Добавить(НайденнаяСтрока.Объект);
		КонецЕсли;
	КонецЦикла;	
	
	СтруктураПоиска = Новый Структура("ТипОбъекта", "ГруппыПользователей");
	НайденныеСтроки = ТекДерево.Строки.НайтиСтроки(СтруктураПоиска, Истина);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если ЗначениеЗаполнено(НайденнаяСтрока.Объект) Тогда
			Объекты.Добавить(НайденнаяСтрока.Объект);
		КонецЕсли;
	КонецЦикла;	
	
	СтруктураПоиска = Новый Структура("ТипОбъекта", "СтруктураПредприятия");
	НайденныеСтроки = ТекДерево.Строки.НайтиСтроки(СтруктураПоиска, Истина);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если ЗначениеЗаполнено(НайденнаяСтрока.Объект) Тогда
			Объекты.Добавить(НайденнаяСтрока.Объект);
		КонецЕсли;
	КонецЦикла;	

	СтруктураКниги.Вставить("Объекты", Объекты);

	ОписаниеТелефоннойКниги = сфпСофтФонПроСервер.сфпСформироватьОписаниеТелефоннойКниги(СтруктураКниги, Ложь);
	
КонецПроцедуры // Тест1()

&НаСервере
// Процедура - обработчик события формы "ПередЗаписьюНаСервере"
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПустаяСтрока(АдресКнигиВоВременномХранилище) Тогда
		МассивТелефоннойКниги = ПолучитьИзВременногоХранилища(АдресКнигиВоВременномХранилище); 
		ТекущийОбъект.МассивКниги = Новый ХранилищеЗначения(МассивТелефоннойКниги, Новый СжатиеДанных(9));
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ЗаполнитьАбонентовКниги(АбонентыКниги, РодительКоллекции, НаборЗаписей)
	
	КоллекцияЭлементов = РодительКоллекции.ПолучитьЭлементы();
	Для Каждого ТекЭлемент Из КоллекцияЭлементов Цикл
		Если ЗначениеЗаполнено(ТекЭлемент.Объект)
			 И ТипЗнч(ТекЭлемент.Объект) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			ТекЗапись = НаборЗаписей.Добавить();
			ТекЗапись.ТелефоннаяКнига = Объект.Ссылка;
			ТекЗапись.Абонент = РодительКоллекции.Объект;
			ТекЗапись.ВидТелефона = ТекЭлемент.Объект;
		КонецЕсли;
		
		ЗаполнитьАбонентовКниги(АбонентыКниги, ТекЭлемент, НаборЗаписей);
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НаборЗаписей = РегистрыСведений.сфпАбонентыТелефонныхКниг.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТелефоннаяКнига.Установить(Объект.Ссылка);
	
	АбонентыКниги = Новый Массив();
	ЗаполнитьАбонентовКниги(АбонентыКниги, ДеревоТелефоннойКниги, НаборЗаписей);	
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Наименование" таблицы формы "ВидыТелефонов"
//
Процедура ВидыТелефоновНаименованиеПриИзменении(Элемент)
	ТД = Элементы.ВидыТелефонов.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбновитьВидТелефонаВДереве(ТД.Идентификатор, ТД.Наименование);
КонецПроцедуры // ВидыТелефоновНаименованиеПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Выбор" таблицы формы "Пользователи"
//
Процедура ПользователиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 
	ДобавитьКонтактВТелефоннуюКнигу();

КонецПроцедуры // ПользователиВыбор()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломИзменения" таблицы формы "Пользователи"
//
Процедура ПользователиПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ИзменитьПользователя(Неопределено);
КонецПроцедуры // ПользователиПередНачаломИзменения()

&НаКлиенте
// Процедура - обработчик события "ПроверкаПеретаскивания" таблицы формы "Пользователи"
//
Процедура ПользователиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь; 
КонецПроцедуры // ПользователиПроверкаПеретаскивания()

&НаКлиенте
// Процедура - обработчик события "Перетаскивание" таблицы формы "Пользователи"
//
Процедура ПользователиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ДанныеФормыЭлементДерева") Тогда
		// Удаляем строку контакта из телефонной книги
		СтрокаКонтакта = ПараметрыПеретаскивания.Значение;
		УдалитьСтрокуВТелефоннойКниге(СтрокаКонтакта);
	КонецЕсли;	
КонецПроцедуры // ПользователиПеретаскивание()

&НаКлиенте
// Процедура - обработчик события "Выбор" таблицы формы "ТелефоннаяКнига"
//
Процедура ТелефоннаяКнигаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаКонтакта = ДеревоТелефоннойКниги.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаКонтакта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.ТелефоннаяКнига.Развернут(ВыбраннаяСтрока) Тогда
		Элементы.ТелефоннаяКнига.Свернуть(ВыбраннаяСтрока);
	Иначе
		Элементы.ТелефоннаяКнига.Развернуть(ВыбраннаяСтрока, Ложь);
	КонецЕсли;	
КонецПроцедуры // ТелефоннаяКнигаВыбор()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы формы "ТелефоннаяКнига"
//
Процедура ТелефоннаяКнигаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ДобавитьГруппуВТелефоннуюКнигу(Неопределено);
КонецПроцедуры // ТелефоннаяКнигаПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломИзменения" таблицы формы "ТелефоннаяКнига"
//
Процедура ТелефоннаяКнигаПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ИзменитьИмяГруппыТелефоннойКниги(Неопределено);	
КонецПроцедуры // ТелефоннаяКнигаПередНачаломИзменения()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы формы "ТелефоннаяКнига"
//
Процедура ТелефоннаяКнигаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	УдалитьИзТелефоннойКниги(Неопределено);	
КонецПроцедуры // ТелефоннаяКнигаПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПроверкаПеретаскивания" таблицы формы "ТелефоннаяКнига"
//
Процедура ТелефоннаяКнигаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь; 
КонецПроцедуры // ТелефоннаяКнигаПроверкаПеретаскивания()

&НаКлиенте
// Процедура - обработчик события "Перетаскивание" таблицы формы "ТелефоннаяКнига"
//
Процедура ТелефоннаяКнигаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка	= Ложь;
	// Определяем группу-получатель
	Если Строка = Неопределено Тогда
		СтрокаКниги = ДеревоТелефоннойКниги;
	Иначе
		СтрокаКниги = ДеревоТелефоннойКниги.НайтиПоИдентификатору(Строка);
		Если СтрокаКниги = Неопределено Тогда
			СтрокаКниги = ДеревоТелефоннойКниги;
		КонецЕсли;	
	КонецЕсли;	
	Если НЕ (СтрокаКниги = ДеревоТелефоннойКниги) И НЕ СтрокаКниги.ЭтоГруппа Тогда
		// Ищем первую группу снизу вверх
		РодительСтрокиКниги = СтрокаКниги.ПолучитьРодителя();
		Если РодительСтрокиКниги = Неопределено Тогда
			СтрокаКниги = ДеревоТелефоннойКниги;
		ИначеЕсли РодительСтрокиКниги.ЭтоГруппа Тогда
			СтрокаКниги = РодительСтрокиКниги;
		Иначе	
			ГруппаРодителяСтрокиКниги = РодительСтрокиКниги.ПолучитьРодителя();
			Если ГруппаРодителяСтрокиКниги = Неопределено Тогда
				СтрокаКниги = ДеревоТелефоннойКниги;
			Иначе	
				СтрокаКниги = ГруппаРодителяСтрокиКниги;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	// Определяем отправителя
	СтрокаКонтакта			= Неопределено;
	ПеремещениеВнутриДерева	= Ложь;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ДанныеФормыЭлементДерева") Тогда
		// Перемещение из дерева пользователей в дерево телефонной книги
		СтрокаКонтакта			= ПараметрыПеретаскивания.Значение;
		ПеремещениеВнутриДерева	= Ложь;
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Число") Тогда
		// Перемещение внутри дерева телефонной книги
		СтрокаКонтакта			= ДеревоТелефоннойКниги.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
		ПеремещениеВнутриДерева	= Истина;
	КонецЕсли;	
	Если СтрокаКонтакта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если (СтрокаКонтакта.Картинка = 2) Тогда
		// Если добавляем телефонный номер, то, возможно, пользователь уже есть в выбранной группе
		РодительСтрокиКонтакта = СтрокаКонтакта.ПолучитьРодителя();
		Если НЕ (РодительСтрокиКонтакта = Неопределено) Тогда
			РодительНайден = Ложь;
			СтрокиВыбраннойГруппы = СтрокаКниги.ПолучитьЭлементы();
			Для Каждого СтрокаВыбраннойГруппы Из СтрокиВыбраннойГруппы Цикл
				Если СтрокаВыбраннойГруппы.Объект = РодительСтрокиКонтакта.Объект Тогда
					СтрокаКниги		= СтрокаВыбраннойГруппы;
					РодительНайден	= Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			Если НЕ РодительНайден Тогда
				// Добавляем родителя
				НоваяСтрокаКниги = СтрокаКниги.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаКниги, РодительСтрокиКонтакта);
				НоваяСтрокаКниги.Идентификатор	= Новый УникальныйИдентификатор;
				СтрокаКниги						= НоваяСтрокаКниги;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	Если ПеремещениеВнутриДерева И (ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение) Тогда
		// Проверяем на перемещение внутри одной группы
		РодительКонтакта = СтрокаКонтакта.ПолучитьРодителя();
		Если РодительКонтакта = Неопределено Тогда
			РодительКонтакта = ДеревоТелефоннойКниги;
		КонецЕсли;	
		Если СтрокаКниги = РодительКонтакта  Тогда
			Возврат;
		КонецЕсли;
		// Добавляем строку
		ДобавитьСтрокуВТелефоннуюКнигу(СтрокаКонтакта, СтрокаКниги);		
		// Удаляем скопированную строку
		УдалитьСтрокуВТелефоннойКниге(СтрокаКонтакта);
	Иначе
		// Добавляем строку
		ДобавитьСтрокуВТелефоннуюКнигу(СтрокаКонтакта, СтрокаКниги);		
	КонецЕсли;	
КонецПроцедуры // ТелефоннаяКнигаПеретаскивание()

#КонецОбласти

#Область ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ 

&НаКлиенте
// Процедура - обработчик команды формы "ДобавитьВсеКонтактыВТелефоннуюКнигу"
//
Процедура ДобавитьВсеКонтактыВТелефоннуюКнигу(Команда)
	СтрокиКонтакта	= ДеревоПользователей.ПолучитьЭлементы();
	СтрокаКниги		= ДеревоТелефоннойКниги;
	Для Каждого СтрокаКонтакта Из СтрокиКонтакта Цикл
		ДобавитьСтрокуВТелефоннуюКнигу(СтрокаКонтакта, СтрокаКниги);		
	КонецЦикла;	
КонецПроцедуры // ДобавитьВсеКонтактыВТелефоннуюКнигу()

&НаКлиенте
// Процедура - обработчик команды формы "ДобавитьГруппуВТелефоннуюКнигу"
//
Процедура ДобавитьГруппуВТелефоннуюКнигу(Команда)
	// Определяем группу-получатель
	НомерСтроки = Элементы.ТелефоннаяКнига.ТекущаяСтрока;
	Если НомерСтроки = Неопределено Тогда
		СтрокаКниги = ДеревоТелефоннойКниги;
	Иначе
		СтрокаКниги = ДеревоТелефоннойКниги.НайтиПоИдентификатору(НомерСтроки);
		Если СтрокаКниги = Неопределено Тогда
			СтрокаКниги = ДеревоТелефоннойКниги;
		ИначеЕсли НЕ СтрокаКниги.ЭтоГруппа Тогда
			// Ищем первую группу снизу вверх
			РодительСтрокиКниги = СтрокаКниги.ПолучитьРодителя();
			Если РодительСтрокиКниги = Неопределено Тогда
				СтрокаКниги = ДеревоТелефоннойКниги;
			ИначеЕсли РодительСтрокиКниги.ЭтоГруппа Тогда
				СтрокаКниги = РодительСтрокиКниги;
			Иначе	
				ГруппаРодителяСтрокиКниги = РодительСтрокиКниги.ПолучитьРодителя();
				Если ГруппаРодителяСтрокиКниги = Неопределено Тогда
					СтрокаКниги = ДеревоТелефоннойКниги;
				Иначе	
					СтрокаКниги = ГруппаРодителяСтрокиКниги;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаКниги", СтрокаКниги);
	ОписаниеВвода = Новый ОписаниеОповещения("ДобавитьНовуюГруппуВТелефоннуюКнигу", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВводСтроки(ОписаниеВвода, "", НСтр("ru='Введите наименование новой группы';en='Enter Group Name'"), , Ложь); 	
КонецПроцедуры // ДобавитьГруппуВТелефоннуюКнигу()

&НаКлиенте
// Процедура - обработчик команды формы "ДобавитьКонтактВТелефоннуюКнигу"
//
Процедура ДобавитьКонтактВТелефоннуюКнигу(Команда = Неопределено)
	
	// Определяем группу-получатель
	НомерСтроки = Элементы.ТелефоннаяКнига.ТекущаяСтрока;
	Если НомерСтроки = Неопределено Тогда
		СтрокаКниги = ДеревоТелефоннойКниги;
		
	Иначе
		СтрокаКниги = ДеревоТелефоннойКниги.НайтиПоИдентификатору(НомерСтроки);
		Если СтрокаКниги = Неопределено Тогда
			СтрокаКниги = ДеревоТелефоннойКниги;
			
		ИначеЕсли НЕ СтрокаКниги.ЭтоГруппа Тогда
			// Ищем первую группу снизу вверх
			РодительСтрокиКниги = СтрокаКниги.ПолучитьРодителя();
			Если РодительСтрокиКниги = Неопределено Тогда
				СтрокаКниги = ДеревоТелефоннойКниги;
				
			ИначеЕсли РодительСтрокиКниги.ЭтоГруппа Тогда
				СтрокаКниги = РодительСтрокиКниги;
				
			Иначе	
				ГруппаРодителяСтрокиКниги = РодительСтрокиКниги.ПолучитьРодителя();
				Если ГруппаРодителяСтрокиКниги = Неопределено Тогда
					СтрокаКниги = ДеревоТелефоннойКниги;
					
				Иначе	
					СтрокаКниги = ГруппаРодителяСтрокиКниги;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	// Определяем отправителя
	НомерСтроки = Элементы.Пользователи.ТекущаяСтрока;
	Если НомерСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКонтакта = ДеревоПользователей.НайтиПоИдентификатору(НомерСтроки);
	Если СтрокаКонтакта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьСтрокуВТелефоннуюКнигу(СтрокаКонтакта, СтрокаКниги);

КонецПроцедуры // ДобавитьКонтактВТелефоннуюКнигу()

&НаКлиенте
// Процедура - обработчик команды формы "ИзменитьИмяГруппыТелефоннойКниги"
//
Процедура ИзменитьИмяГруппыТелефоннойКниги(Команда)
	ТД = Элементы.ТелефоннаяКнига.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ТД.ЭтоГруппа Тогда
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(ТД.Объект) Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТД", Элементы.ТелефоннаяКнига.ТекущиеДанные);
	ОписаниеВвода = Новый ОписаниеОповещения("ОбновитьИмяГруппы", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВводСтроки(ОписаниеВвода, ТД.Наименование, НСтр("ru='Наименование группы';en='Group name'"), , Ложь); 	
КонецПроцедуры // ИзменитьИмяГруппыТелефоннойКниги()

&НаКлиенте
// Процедура - обработчик команды формы "ИзменитьПользователя"
//
Процедура ИзменитьПользователя(Команда)
	
	// Определяем строку пользователя
	НомерСтроки = Элементы.Пользователи.ТекущаяСтрока;
	Если НомерСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКонтакта = ДеревоПользователей.НайтиПоИдентификатору(НомерСтроки);
	Если СтрокаКонтакта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, СтрокаКонтакта.Объект);

КонецПроцедуры // ИзменитьПользователя()

&НаКлиенте
// Процедура - обработчик команды формы "НайтиВДеревеПользователей"
//
Процедура НайтиВДеревеПользователей(Команда)
	НомерСтроки	= Элементы.ТелефоннаяКнига.ТекущаяСтрока;
	Если НомерСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаКонтакта	= ДеревоТелефоннойКниги.НайтиПоИдентификатору(НомерСтроки);
	Если СтрокаКонтакта = Неопределено Тогда
		Возврат;
	ИначеЕсли СтрокаКонтакта.ЭтоГруппа Тогда
		Возврат;
	ИначеЕсли СтрокаКонтакта.Картинка = 2 Тогда
		РодительСтрокиКонтакта	= СтрокаКонтакта.ПолучитьРодителя();
		Если РодительСтрокиКонтакта = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СтрокаКонтакта = РодительСтрокиКонтакта;
	КонецЕсли;	
	НайтиПользователяВДеревеПользователей(СтрокаКонтакта.Объект);
КонецПроцедуры // НайтиВДеревеПользователей()

&НаКлиенте
Процедура НайтиВТелефоннойКниге(Команда)
	НомерСтроки = Элементы.Пользователи.ТекущаяСтрока;
	Если НомерСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаКонтакта	= ДеревоПользователей.НайтиПоИдентификатору(НомерСтроки);
	Если СтрокаКонтакта = Неопределено Тогда
		Возврат;
	ИначеЕсли СтрокаКонтакта.Картинка = 2 Тогда
		РодительСтрокиКонтакта	= СтрокаКонтакта.ПолучитьРодителя();
		Если РодительСтрокиКонтакта = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СтрокаКонтакта = РодительСтрокиКонтакта;
	КонецЕсли;	
	НайтиПользователяВТелефоннойКниге(СтрокаКонтакта.Объект);
КонецПроцедуры // НайтиВТелефоннойКниге()

&НаКлиенте
// Процедура - обработчик команды формы "ОбновитьДеревоПользователей"
//
Процедура ОбновитьДеревоПользователей(Команда)
	
	// Определяем строку пользователя
	НомерСтроки = Элементы.Пользователи.ТекущаяСтрока;
	Если НомерСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры // ОбновитьДеревоПользователей()

&НаКлиенте
// Процедура - обработчик команды формы "ПереместитьВверх"
//
Процедура ПереместитьВверх(Команда)
	ПереместитьТекущуюСтрокуТелефоннойКниги(-1);
КонецПроцедуры // ПереместитьВверх()

&НаКлиенте
// Процедура - обработчик команды формы "ПереместитьВниз"
//
Процедура ПереместитьВниз(Команда)
	ПереместитьТекущуюСтрокуТелефоннойКниги(1);
КонецПроцедуры // ПереместитьВниз()

&НаКлиенте
// Процедура - обработчик команды формы "УдалитьВсеКонтактыИзТелефоннойКниги"
//
Процедура УдалитьВсеКонтактыИзТелефоннойКниги(Команда)
	ДеревоТелефоннойКниги.ПолучитьЭлементы().Очистить();
КонецПроцедуры // УдалитьВсеКонтактыИзТелефоннойКниги()

&НаКлиенте
// Процедура - обработчик команды формы "УдалитьИзТелефоннойКниги"
//
Процедура УдалитьИзТелефоннойКниги(Команда)
	НомерСтроки = Элементы.ТелефоннаяКнига.ТекущаяСтрока;
	Если НомерСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаКонтакта = ДеревоТелефоннойКниги.НайтиПоИдентификатору(НомерСтроки);
	Если СтрокаКонтакта = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	УдалитьСтрокуВТелефоннойКниге(СтрокаКонтакта);
КонецПроцедуры // УдалитьИзТелефоннойКниги()

&НаКлиенте
// Процедура - обработчик команды формы "УдалитьКонтактИзТелефоннойКниги"
//
Процедура УдалитьКонтактИзТелефоннойКниги(Команда)
	НомерСтроки = Элементы.ТелефоннаяКнига.ТекущаяСтрока;
	Если НомерСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаКонтакта = ДеревоТелефоннойКниги.НайтиПоИдентификатору(НомерСтроки);
	Если СтрокаКонтакта = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	УдалитьСтрокуВТелефоннойКниге(СтрокаКонтакта);
КонецПроцедуры // УдалитьКонтактИзТелефоннойКниги()

&НаКлиенте
Процедура ПоказатьДеревоПользователей(Команда)
	ПоказатьДерево(0);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДеревоГруппПользователей(Команда)
	ПоказатьДерево(1);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДеревоПодразделений(Команда)
	ПоказатьДерево(2);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//////////////////////////////////////////////////////////////////////////////////
// // ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
Функция СсылкаСуществует(ЛюбаяСсылка)
	Возврат ОбщегоНазначения.СсылкаСуществует(ЛюбаяСсылка);
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает значение константы "сфпМаксимальнаяДлинаВнутреннихНомеров"
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Число	- Длина внутренних номеров
//
Функция ПолучитьДлинуВнутреннихНомеров()
	Возврат Константы.сфпМаксимальнаяДлинаВнутреннихНомеров.Получить();
КонецФункции // ПолучитьДлинуВнутреннихНомеров()
	
&НаСервере
// Процедура заполняет дерево пользователей 
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьДеревоПользователей()
	
	Если ВариантОтображенияПользователей = 0 Тогда
		ТекДерево = РеквизитФормыВЗначение("ДеревоОбъектовПользователи");
		
	ИначеЕсли ВариантОтображенияПользователей = 1 Тогда
		ТекДерево = РеквизитФормыВЗначение("ДеревоОбъектовГруппыПользователей");
		
	Иначе
		ТекДерево = РеквизитФормыВЗначение("ДеревоОбъектовПодразделения");
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТекДерево, "ДеревоПользователей");

КонецПроцедуры // ЗаполнитьДеревоПользователей()	

&НаСервере
// Функция возвращает массив структур телефонной книги
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив	- Массив структур телефонной книги
//
Функция ПолучитьМассивТелефоннойКниги()
	
	ЗначениеОбъекта = РеквизитФормыВЗначение("Объект");
	МассивКниги = ЗначениеОбъекта.МассивКниги.Получить();
	Если МассивКниги = Неопределено Тогда
		МассивКниги = Новый Массив();
	КонецЕсли;	
	
	Возврат МассивКниги;

КонецФункции // ПолучитьМассивТелефоннойКниги()

&НаСервере
Процедура ДобавитьСтрокуСтруктурыВТелефоннуюКнигу(ЭлементМассива, СтрокиДерева, Родитель)
	
	Если ЗначениеЗаполнено(ЭлементМассива.Объект) И НЕ ЭлементМассива.ЭтоГруппа Тогда
		Если НЕ СсылкаСуществует(ЭлементМассива.Объект) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементМассива.Объект) Тогда
		Если ЭлементМассива.Картинка = 2 Тогда
			Если ТипЗнч(ЭлементМассива.Объект) = Тип("СправочникСсылка.Пользователи") Тогда
				ТекущийВнутреннийНомер = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(ЭлементМассива.Объект);
				Если ПустаяСтрока(ТекущийВнутреннийНомер) Тогда
					Возврат;
				КонецЕсли;
				
				СтрокаГруппы = СтрокиДерева.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаГруппы, ЭлементМассива);
				СтрокаГруппы.Наименование = НСтр("ru='Внутренний номер: ';en='Internal number: '") + ТекущийВнутреннийНомер;
				
			Иначе
				НайденныеСтроки = Объект.ВидыТелефонов.НайтиСтроки(Новый Структура("Вид", ЭлементМассива.Объект));
				Если НайденныеСтроки.Количество() = 0 Тогда
					Возврат;
				КонецЕсли;
				
				ПредставлениеНомера = сфпСофтФонПроСервер.сфпПолучитьПредставлениеНомера(Родитель.Объект,
					 ЭлементМассива.Объект,
					 ЭлементМассива.ПорядковыйНомер);
				Если ПустаяСтрока(ПредставлениеНомера) Тогда
					Возврат;
				КонецЕсли;
				
				СтрокаГруппы = СтрокиДерева.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаГруппы, ЭлементМассива);
				СтрокаГруппы.Наименование = НайденныеСтроки[0].Наименование + ": " + ПредставлениеНомера;
			КонецЕсли;

		Иначе
			Если сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(ЭлементМассива.Объект, "ПометкаУдаления") Тогда
				Возврат;
			КонецЕсли;	
			
			СтрокаГруппы = СтрокиДерева.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаГруппы, ЭлементМассива);
			СтрокаГруппы.Наименование = сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(ЭлементМассива.Объект, "Наименование");
			ПодчиненныеСтроки = СтрокаГруппы.ПолучитьЭлементы();
			Для Каждого ПодчиненныйЭлемент Из ЭлементМассива.Строки Цикл
				ДобавитьСтрокуСтруктурыВТелефоннуюКнигу(ПодчиненныйЭлемент, ПодчиненныеСтроки, СтрокаГруппы);
			КонецЦикла;
			//Если ПодчиненныеСтроки.Количество() = 0 Тогда
			//	СтрокиДерева.Удалить(СтрокаГруппы);
			//КонецЕсли;	
		КонецЕсли;

	Иначе
		СтрокаГруппы = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаГруппы, ЭлементМассива);
		ПодчиненныеСтроки = СтрокаГруппы.ПолучитьЭлементы();
		Для Каждого ПодчиненныйЭлемент Из ЭлементМассива.Строки Цикл
			ДобавитьСтрокуСтруктурыВТелефоннуюКнигу(ПодчиненныйЭлемент, ПодчиненныеСтроки, СтрокаГруппы);
		КонецЦикла;
		//Если ПодчиненныеСтроки.Количество() = 0 Тогда
		//	СтрокиДерева.Удалить(СтрокаГруппы);
		//КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуСтруктурыВТелефоннуюКнигу()
	
&НаКлиенте
// Процедура добавляет строку контакта в телефонную книгу
//
// Параметры:
//	СтрокаКонтакта	- ДанныеФормыЭлементДерева	- Добавляемая строка
//	СтрокаКниги		- ДанныеФормыЭлементДерева	- Строка дерева телефонной книги
//
Процедура ДобавитьСтрокуВТелефоннуюКнигу(СтрокаКонтакта, СтрокаКниги)
	
	СтрокиКниги = СтрокаКниги.ПолучитьЭлементы();
	
	// Проверяем на наличие добавляемой строки
	Для Каждого ЭлементСтрокиКниги Из СтрокиКниги Цикл
		Если ЭлементСтрокиКниги.Объект = СтрокаКонтакта.Объект Тогда
			Если СтрокаКонтакта.Картинка = 2 Тогда
				Если ЭлементСтрокиКниги.ПорядковыйНомер = СтрокаКонтакта.ПорядковыйНомер Тогда
					Возврат;
				КонецЕсли;

			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	НоваяСтрокаКниги = СтрокиКниги.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрокаКниги, СтрокаКонтакта);
	НоваяСтрокаКниги.Наименование = "" + СтрокаКонтакта.Объект;
	
	Если СтрокаКонтакта.Картинка = 2 Тогда
		Если ТипЗнч(СтрокаКонтакта.Объект) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			  СтруктураПоиска = Новый Структура("Вид", СтрокаКонтакта.Объект);
		Иначе СтруктураПоиска = Новый Структура("Вид", "Внутренний номер");
		КонецЕсли;
		
		НайденныеСтроки = Объект.ВидыТелефонов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрокаКниги.Идентификатор = Новый УникальныйИдентификатор;
			
		Иначе
			НоваяСтрокаКниги.Идентификатор = НайденныеСтроки[0].Идентификатор;
			ПозицияРазделителя = СтрНайти(СтрокаКонтакта.Наименование, ": ");
			Если ПозицияРазделителя > 0 Тогда
				НоваяСтрокаКниги.Наименование = НайденныеСтроки[0].Наименование 
					+ Сред(СтрокаКонтакта.Наименование, ПозицияРазделителя);
			КонецЕсли;	
		КонецЕсли;
		
	Иначе	
		НоваяСтрокаКниги.Идентификатор = Новый УникальныйИдентификатор;
		
		Если ТипЗнч(СтрокаКонтакта.Объект) = Тип("СправочникСсылка.Пользователи") Тогда
			НоваяСтрокаКниги.ТипОбъекта = "Пользователи";
			
		ИначеЕсли ТипЗнч(СтрокаКонтакта.Объект) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			НоваяСтрокаКниги.ТипОбъекта = "ГруппыПользователей";
			
		ИначеЕсли ТипЗнч(СтрокаКонтакта.Объект) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			НоваяСтрокаКниги.ТипОбъекта = "СтруктураПредприятия";
		КонецЕсли;		
	КонецЕсли;
	
	ПодчиненныеСтрокиКонтакта = СтрокаКонтакта.ПолучитьЭлементы();
	Для Каждого ПодчиненнаяСтрокаКонтакта Из ПодчиненныеСтрокиКонтакта Цикл
		ДобавитьСтрокуВТелефоннуюКнигу(ПодчиненнаяСтрокаКонтакта, НоваяСтрокаКниги);
	КонецЦикла;
	
	ИДСтроки = НоваяСтрокаКниги.ПолучитьИдентификатор(); 
	Элементы.ТелефоннаяКнига.Развернуть(ИДСтроки, Ложь);
	Элементы.ТелефоннаяКнига.ТекущаяСтрока = ИДСтроки;
	
	Модифицированность = Истина;

КонецПроцедуры // ДобавитьСтрокуВТелефоннуюКнигу()

&НаКлиенте
// Процедура удаляет строку контакта из телефонной книги
//
// Параметры:
//	СтрокаКонтакта	- ДанныеФормыЭлементДерева	- Удаляемая строка дерева телефонной книги
//
Процедура УдалитьСтрокуВТелефоннойКниге(СтрокаКонтакта)
	РодительКонтакта = СтрокаКонтакта.ПолучитьРодителя();
	Если РодительКонтакта = Неопределено Тогда
		РодительКонтакта = ДеревоТелефоннойКниги;
	КонецЕсли;	
	СтрокиРодителяКонтакта = РодительКонтакта.ПолучитьЭлементы();
	ИндексКонтакта = СтрокиРодителяКонтакта.Индекс(СтрокаКонтакта);
	СтрокиРодителяКонтакта.Удалить(ИндексКонтакта);
	Модифицированность = Истина;
КонецПроцедуры // УдалитьСтрокуВТелефоннойКниге()

&НаКлиенте
// Функция возвращает структуру строки дерева телефонной книги
//
// Параметры:
//	СтрокаКниги	- СтрокаДереваЗначений	- Строка телефонной книги
//
Функция ПолучитьСтруктуруСтрокиДерева(СтрокаКниги)
	МассивПодчиненныхСтрок = Новый Массив;
	СтруктураСтрокиДерева = Новый Структура;
	СтруктураСтрокиДерева.Вставить("Идентификатор",		СтрокаКниги.Идентификатор);
	СтруктураСтрокиДерева.Вставить("Наименование",		СтрокаКниги.Наименование);
	СтруктураСтрокиДерева.Вставить("ЭтоГруппа",			СтрокаКниги.ЭтоГруппа);
	СтруктураСтрокиДерева.Вставить("Картинка",			СтрокаКниги.Картинка);
	СтруктураСтрокиДерева.Вставить("Объект",			СтрокаКниги.Объект);
	СтруктураСтрокиДерева.Вставить("ПорядковыйНомер",	СтрокаКниги.ПорядковыйНомер);
	СтруктураСтрокиДерева.Вставить("ТипОбъекта",		СтрокаКниги.ТипОбъекта);
	Если НЕ (СтрокаКниги.Картинка = 2) Тогда
		ПодчиненныеСтроки = СтрокаКниги.ПолучитьЭлементы();
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			СтруктураПодчиненнойСтроки = ПолучитьСтруктуруСтрокиДерева(ПодчиненнаяСтрока);
			Если НЕ (СтруктураПодчиненнойСтроки = Неопределено) Тогда
				МассивПодчиненныхСтрок.Добавить(СтруктураПодчиненнойСтроки);
			КонецЕсли;	
		КонецЦикла;	
		//Если МассивПодчиненныхСтрок.Количество() = 0 Тогда
		//	Возврат Неопределено;
		//КонецЕсли;	
	КонецЕсли;
	СтруктураСтрокиДерева.Вставить("Строки",	МассивПодчиненныхСтрок);
	Возврат СтруктураСтрокиДерева;
КонецФункции // ПолучитьСтруктуруСтрокиДерева()	

&НаКлиенте
// Функция возвращает массив структур телефонной книги
//
// Параметры:
//	Нет.
//
Функция ПолучитьМассивСтруктурТелефоннойКниги()
	
	МассивТелефоннойКниги = Новый Массив();
	
	СтрокиКниги = ДеревоТелефоннойКниги.ПолучитьЭлементы();
	Для Каждого СтрокаКниги Из СтрокиКниги Цикл
		СтруктураСтрокиКниги = ПолучитьСтруктуруСтрокиДерева(СтрокаКниги);
		Если СтруктураСтрокиКниги <> Неопределено Тогда
			МассивТелефоннойКниги.Добавить(СтруктураСтрокиКниги);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат МассивТелефоннойКниги;

КонецФункции // ПолучитьМассивСтруктурТелефоннойКниги()	

&НаКлиенте
// 	Функция проверяет заполнение телефонной книги
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Результат проверки
//
Функция ПроверитьЗаполнениеТелефоннойКниги()
	ЕстьОшибки = Ложь;
	Если ПустаяСтрока(Объект.Наименование) Тогда	
		ЕстьОшибки = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено наименование телефонной книги';
			|en='Phone book name is not filled'"));
	КонецЕсли;	
	НайденныеСтроки = Объект.ВидыТелефонов.НайтиСтроки(Новый Структура("Пометка", Истина));
	Если НайденныеСтроки.Количество() = 0 Тогда
		ЕстьОшибки = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выбран ни один вид телефонного номера';
			|en='No phone number type selected'"));
	КонецЕсли;
	Если ДеревоТелефоннойКниги.ПолучитьЭлементы().Количество() = 0 Тогда
		ЕстьОшибки = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнена телефонная книга';
			|en='Phone book is empty'"));
	КонецЕсли;	
	Возврат НЕ ЕстьОшибки; 
КонецФункции // ПроверитьЗаполнениеТелефоннойКниги()

&НаКлиенте
// Процедура обновляет наименование вида телефона в дереве телефонной книги
//
// Параметры:
//	СтрокаДерева	- ДанныеФормыЭлементДерева	- Строка дерева значений
//	Идентификатор	- Строка					- Уникальный идентификатор вида телефона
//	Наименование	- Строка					- Наименование вида телефона
//
Процедура ОбновитьВидТелефонаВСтроке(СтрокаДерева, Идентификатор, Наименование)
	Если СтрокаДерева.Картинка = 2 Тогда
		Если СтрокаДерева.Идентификатор = Идентификатор Тогда
			ПозицияРазделителя = СтрНайти(СтрокаДерева.Наименование, ": ");
			Если ПозицияРазделителя > 0 Тогда
				СтрокаДерева.Наименование = Наименование + Сред(СтрокаДерева.Наименование, ПозицияРазделителя);
			КонецЕсли;	
		КонецЕсли;	
	Иначе	
		ПодчиненныеСтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
		Для Каждого ПодчиненнаяСтрокаДерева Из ПодчиненныеСтрокиДерева Цикл
			ОбновитьВидТелефонаВСтроке(ПодчиненнаяСтрокаДерева, Идентификатор, Наименование);
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры // ВидыТелефоновНаименованиеПриИзменении()

&НаКлиенте
// Процедура обновляет наименование вида телефона в дереве телефонной книги
//
// Параметры:
//	Идентификатор	- Строка	- Уникальный идентификатор вида телефона
//	Наименование	- Строка	- Наименование вида телефона
//
Процедура ОбновитьВидТелефонаВДереве(Идентификатор, Наименование)
	СтрокиДерева = ДеревоТелефоннойКниги.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		ОбновитьВидТелефонаВСтроке(СтрокаДерева, Идентификатор, Наименование);
	КонецЦикла;	
КонецПроцедуры // ВидыТелефоновНаименованиеПриИзменении()

&НаКлиенте
// Процедура перемещает внутри группы строку телефонной книги
//
// Параметры:
//	Направление	- Число	- Направление перемещения
//
Процедура ПереместитьТекущуюСтрокуТелефоннойКниги(Направление)
	// Определяем текущую строку
	НомерСтроки = Элементы.ТелефоннаяКнига.ТекущаяСтрока;
	Если НомерСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаКниги = ДеревоТелефоннойКниги.НайтиПоИдентификатору(НомерСтроки);
	Если СтрокаКниги = Неопределено Тогда
		Возврат;
	КонецЕсли;
	РодительСтрокаКниги	= СтрокаКниги.ПолучитьРодителя();
	Если РодительСтрокаКниги = Неопределено Тогда
		РодительСтрокаКниги = ДеревоТелефоннойКниги;
	КонецЕсли;	
	СтрокиДерева		= РодительСтрокаКниги.ПолучитьЭлементы();
	ИндексГруппы		= СтрокиДерева.Индекс(СтрокаКниги);
	КоличествоЭлементов	= СтрокиДерева.Количество();
	Если (Направление < 0) И (ИндексГруппы = 0) Тогда
		СтрокиДерева.Сдвинуть(ИндексГруппы, КоличествоЭлементов - 1);
	ИначеЕсли (Направление > 0) И (ИндексГруппы = КоличествоЭлементов - 1) Тогда 
		СтрокиДерева.Сдвинуть(ИндексГруппы, - 1 * КоличествоЭлементов + 1);
	Иначе	
		СтрокиДерева.Сдвинуть(ИндексГруппы, Направление);
	КонецЕсли;	
КонецПроцедуры // ПереместитьТекущуюСтрокуТелефоннойКниги()

&НаКлиенте
// Процедура - обработчик изменения наименования группы
//
// Параметры:
//	Строка					- Строка	- Имя группы
//	ДополнительныеПараметры	- Структура	- Структура дополнительных параметров
//
Процедура ОбновитьИмяГруппы(Строка, ДополнительныеПараметры) Экспорт
	Если Строка = Неопределено Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(Строка) Тогда	
		Возврат;
	ИначеЕсли ДополнительныеПараметры.ТД = Неопределено Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(Строка) Тогда	
		Возврат;
	КонецЕсли;	
	ДополнительныеПараметры.ТД.Наименование = Строка;
КонецПроцедуры // ОбновитьИмяГруппы()

&НаКлиенте
// Процедура изменяет идентификатор строки пользователя
//
// Параметры:
//	ИдентификаторСтроки	- Число						- Идентификатор строки дерева пользователей
//	Пользователь		- СправочникСсылка			- Пользователь
//	СтрокаДерева		- ДанныеФормыЭлементДерева	- Строка дерева значений
//
Процедура ПолучитьИдентификаторСтрокиПользователя(ИдентификаторСтроки, Пользователь, СтрокаДерева)
	Если ИдентификаторСтроки > 0 Тогда
		Возврат;
	КонецЕсли;
	Если СтрокаДерева.Объект = Пользователь Тогда
		ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
	Иначе
		ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			ПолучитьИдентификаторСтрокиПользователя(ИдентификаторСтроки, Пользователь, ПодчиненнаяСтрока);
			Если ИдентификаторСтроки > 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры // ПолучитьИдентификаторСтрокиПользователя()

&НаКлиенте
// Процедура изменяет идентификатор строки телефонной книги
//
// Параметры:
//	ИдентификаторСтроки	- Число						- Идентификатор строки дерева телефонной книги 
//	Пользователь		- СправочникСсылка			- Пользователь
//	СтрокаКниги			- ДанныеФормыЭлементДерева	- Строка дерева значений
//
Процедура ПолучитьИдентификаторСтрокиКниги(ИдентификаторСтроки, Пользователь, СтрокаКниги)
	Если ИдентификаторСтроки > 0 Тогда
		Возврат;
	КонецЕсли;
	Если СтрокаКниги.ЭтоГруппа Тогда
		ПодчиненныеСтроки = СтрокаКниги.ПолучитьЭлементы();
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			ПолучитьИдентификаторСтрокиКниги(ИдентификаторСтроки, Пользователь, ПодчиненнаяСтрока);
			Если ИдентификаторСтроки > 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	ИначеЕсли СтрокаКниги.Объект = Пользователь Тогда
		ИдентификаторСтроки = СтрокаКниги.ПолучитьИдентификатор(); 
	КонецЕсли;
КонецПроцедуры // ПолучитьИдентификаторСтрокиКниги()

&НаКлиенте
// Процедура - обработчик добавления новой группы в телефонную книгу
//
// Параметры:
//	Строка					- Строка	- Имя группы
//	ДополнительныеПараметры	- Структура	- Структура дополнительных параметров
//
Процедура ДобавитьНовуюГруппуВТелефоннуюКнигу(Строка, ДополнительныеПараметры) Экспорт
	Если Строка = Неопределено Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(Строка) Тогда	
		Возврат;
	КонецЕсли;	
	НоваяСтрокаКниги = ДополнительныеПараметры.СтрокаКниги.ПолучитьЭлементы().Добавить();
	НоваяСтрокаКниги.Идентификатор		= Новый УникальныйИдентификатор;
	НоваяСтрокаКниги.Наименование		= Строка;
	НоваяСтрокаКниги.ЭтоГруппа			= Истина;
	НоваяСтрокаКниги.Картинка			= 3;
	НоваяСтрокаКниги.ПорядковыйНомер	= 0;
	НоваяСтрокаКниги.Объект				= ПредопределенноеЗначение("Справочник.ГруппыПользователей.ПустаяСсылка");
	ИДСтроки = НоваяСтрокаКниги.ПолучитьИдентификатор(); 
	Элементы.ТелефоннаяКнига.Развернуть(ИДСтроки, Ложь);
	Элементы.ТелефоннаяКнига.ТекущаяСтрока = ИДСтроки;
КонецПроцедуры // ДобавитьНовуюГруппуВТелефоннуюКнигу()

&НаКлиенте
// Процедура выполняет поиск пользователя в дереве пользователей
//
// Параметры:
//	Пользователь	- СправочникСсылка	- Пользователь
//
Процедура НайтиПользователяВДеревеПользователей(Пользователь, НачальныйИдентификатор = -1)
	Если НачальныйИдентификатор = -1 Тогда
		// Определяем место начала поиска по текущей строке
		НомерСтроки = Элементы.Пользователи.ТекущаяСтрока;
		Если НомерСтроки = Неопределено Тогда
			СтрокаДерева = ДеревоПользователей;	
			НачальныйИдентификатор = -1;
		Иначе
			СтрокаДерева = ДеревоПользователей.НайтиПоИдентификатору(НомерСтроки);
			Если СтрокаДерева = Неопределено Тогда
				СтрокаДерева = ДеревоПользователей;	
				НачальныйИдентификатор = -1;
			ИначеЕсли НЕ (СтрокаДерева = ДеревоПользователей) И (СтрокаДерева.Картинка = 2) Тогда
				// Ищем первую группу снизу вверх
				РодительСтрокиДерева = СтрокаДерева.ПолучитьРодителя();
				Если РодительСтрокиДерева = Неопределено Тогда
					СтрокаДерева = ДеревоПользователей;
					НачальныйИдентификатор = -1;
				Иначе
					СтрокаДерева = РодительСтрокиДерева;
					Если СтрокаДерева.Объект = Пользователь Тогда
						НачальныйИдентификатор = СтрокаДерева.ПолучитьИдентификатор();
					Иначе	
						НачальныйИдентификатор = -1;
					КонецЕсли;	
				КонецЕсли;	
			ИначеЕсли СтрокаДерева.Объект = Пользователь Тогда
				НачальныйИдентификатор = СтрокаДерева.ПолучитьИдентификатор();
			Иначе	
				НачальныйИдентификатор = -1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ИдентификаторСтроки	= -1;
	ПервыйИдентификатор	= -1;
	СтрокиДерева = ДеревоПользователей.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		ПолучитьИдентификаторСтрокиПользователя(ИдентификаторСтроки, Пользователь, СтрокаДерева);
		Если ИдентификаторСтроки > 0 Тогда
			Если ИдентификаторСтроки > НачальныйИдентификатор Тогда
				Прервать;
			ИначеЕсли ПервыйИдентификатор = -1 Тогда
				ПервыйИдентификатор = ИдентификаторСтроки;
			КонецЕсли;
			ИдентификаторСтроки = -1;
		КонецЕсли;
	КонецЦикла;
	Если ИдентификаторСтроки = -1 Тогда
		ИдентификаторСтроки = ПервыйИдентификатор;
	КонецЕсли;
	Если ИдентификаторСтроки > 0 Тогда
		Элементы.Пользователи.ТекущаяСтрока = ИдентификаторСтроки;
	Иначе	
		Элементы.Пользователи.ТекущаяСтрока = 0;
	КонецЕсли;	
КонецПроцедуры // НайтиПользователяВДеревеПользователей()

&НаКлиенте
// Процедура выполняет поиск пользователя в телефонной книге
//
// Параметры:
//	Пользователь	- СправочникСсылка	- Пользователь
//
Процедура НайтиПользователяВТелефоннойКниге(Пользователь)
	// Определяем место начала поиска по текущей строке
	НомерСтроки = Элементы.ТелефоннаяКнига.ТекущаяСтрока;
	Если НомерСтроки = Неопределено Тогда
		СтрокаКниги = ДеревоТелефоннойКниги;	
		НачальныйИдентификатор = -1;
	Иначе
		СтрокаКниги = ДеревоТелефоннойКниги.НайтиПоИдентификатору(НомерСтроки);
		Если СтрокаКниги = Неопределено Тогда
			СтрокаКниги = ДеревоТелефоннойКниги;	
			НачальныйИдентификатор = -1;
		ИначеЕсли НЕ (СтрокаКниги = ДеревоТелефоннойКниги) И (СтрокаКниги.Картинка = 2) Тогда
			// Ищем первую группу снизу вверх
			РодительСтрокиКниги = СтрокаКниги.ПолучитьРодителя();
			Если РодительСтрокиКниги = Неопределено Тогда
				СтрокаКниги = ДеревоТелефоннойКниги;
				НачальныйИдентификатор = -1;
			Иначе
				СтрокаКниги = РодительСтрокиКниги;
				Если СтрокаКниги.Объект = Пользователь Тогда
					НачальныйИдентификатор = СтрокаКниги.ПолучитьИдентификатор();
				Иначе	
					НачальныйИдентификатор = -1;
				КонецЕсли;	
			КонецЕсли;	
		ИначеЕсли СтрокаКниги.Объект = Пользователь Тогда
			НачальныйИдентификатор = СтрокаКниги.ПолучитьИдентификатор();
		Иначе	
			НачальныйИдентификатор = -1;
		КонецЕсли;
	КонецЕсли;
	ИдентификаторСтроки	= -1;
	ПервыйИдентификатор	= -1;
	СтрокиКниги = ДеревоТелефоннойКниги.ПолучитьЭлементы();
	Для Каждого СтрокаКниги Из СтрокиКниги Цикл
		ПолучитьИдентификаторСтрокиКниги(ИдентификаторСтроки, Пользователь, СтрокаКниги);
		Если ИдентификаторСтроки > 0 Тогда
			Если ИдентификаторСтроки > НачальныйИдентификатор Тогда
				Прервать;
			ИначеЕсли ПервыйИдентификатор = -1 Тогда
				ПервыйИдентификатор = ИдентификаторСтроки;
			КонецЕсли;
			ИдентификаторСтроки = -1;
		КонецЕсли;
	КонецЦикла;
	Если ИдентификаторСтроки = -1 Тогда
		ИдентификаторСтроки = ПервыйИдентификатор;
	КонецЕсли;
	Если ИдентификаторСтроки > 0 Тогда
		Элементы.ТелефоннаяКнига.ТекущаяСтрока = ИдентификаторСтроки;
	Иначе	
		Элементы.ТелефоннаяКнига.ТекущаяСтрока = 0;
	КонецЕсли;	
КонецПроцедуры // НайтиПользователяВТелефоннойКниге()

&НаСервере
Процедура ВыгрузитьСправочникВДерево(ИмяСправочника, ИмяДерева)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка КАК Объект, ИСТИНА КАК ДетальнаяЗапись, " + ?(ИмяСправочника <> "Пользователи", 1, 0) + " КАК Картинка
	|ИЗ Справочник." + ИмяСправочника + "
	|ГДЕ НЕ ПометкаУдаления" + ?(ИмяСправочника <> "Пользователи", "", " И НЕ Недействителен") + "
	|
	|УПОРЯДОЧИТЬ ПО Ссылка
	|ИТОГИ ПО Ссылка ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ");
	
	ТекДерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	СтруктураПоиска = Новый Структура("ДетальнаяЗапись", Истина);
	НайденныеСтроки = ТекДерево.Строки.НайтиСтроки(СтруктураПоиска, Истина);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СтрокаРодитель = НайденнаяСтрока.Родитель;
		СтрокаРодитель.Строки.Удалить(НайденнаяСтрока);
		
		Если ЗначениеЗаполнено(СтрокаРодитель.Родитель) И СтрокаРодитель.Объект = СтрокаРодитель.Родитель.Объект Тогда
			Если СтрокаРодитель.Строки.Количество() = 0 Тогда
				СтрокаРодитель.Родитель.Строки.Удалить(СтрокаРодитель);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Если ИмяСправочника = "ГруппыПользователей" Тогда
		СтруктураПоиска = Новый Структура("Объект", Справочники.ГруппыПользователей.ВсеПользователи);
		НайденныеСтроки = ТекДерево.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекДерево.Строки.Удалить(НайденныеСтроки[0]);
		КонецЕсли;
		
		НоваяСтрока = ТекДерево.Строки.Добавить();
		НоваяСтрока.Объект = Справочники.ГруппыПользователей.ВсеПользователи;
		НоваяСтрока.Картинка = 1;
	КонецЕсли;	
	
	ЗначениеВРеквизитФормы(ТекДерево, ИмяДерева);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДерево(ВариантОтображения, ЗаполнитьДерево = Истина)
	
	ВариантОтображенияПользователей = ВариантОтображения;

	Элементы.ПоказатьДеревоПользователей.ЦветФона = ?(ВариантОтображенияПользователей = 0,
		 ЦветФонаВыбраннойКнопки,
		 ЦветФонаКнопки);
	Элементы.ПоказатьДеревоПользователей.ЦветРамки = Элементы.ПоказатьДеревоПользователей.ЦветФона;
	
	Элементы.ПоказатьДеревоГруппПользователей.ЦветФона = ?(ВариантОтображенияПользователей = 1,
		 ЦветФонаВыбраннойКнопки,
		 ЦветФонаКнопки);
	Элементы.ПоказатьДеревоГруппПользователей.ЦветРамки = Элементы.ПоказатьДеревоГруппПользователей.ЦветФона;
	
	Элементы.ПоказатьДеревоПодразделений.ЦветФона = ?(ВариантОтображенияПользователей = 2,
		 ЦветФонаВыбраннойКнопки,
		 ЦветФонаКнопки);
	Элементы.ПоказатьДеревоПодразделений.ЦветРамки = Элементы.ПоказатьДеревоПодразделений.ЦветФона;
	
	Если ЗаполнитьДерево Тогда
		ЗаполнитьДеревоПользователей();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
