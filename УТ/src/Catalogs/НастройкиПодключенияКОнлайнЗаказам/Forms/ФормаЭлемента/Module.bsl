///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Для Каждого НастройкаОплаты Из Объект.НастройкиОплаты Цикл
		Если НастройкаОплаты.СпособОплаты = Перечисления.СпособыОплатыОнлайнЗаказов.СБПc2b Тогда
			НастройкаПодключенияКСБПc2b = НастройкаОплаты.НастройкаПодключения;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.Используется = Истина;
		
		Если ЗначениеЗаполнено(Объект.Организация)
			И ПустаяСтрока(Объект.Наименование) Тогда
			Объект.Наименование = Строка(Объект.Организация);
		КонецЕсли;
		
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			Объект.Ссылка);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ДанныеХранилища <> Неопределено
			И Не ПустаяСтрока(ДанныеХранилища.КонтрольнаяСумма) Тогда
			НастройкаВыгруженаВСервис = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкаОнлайнЗаказовДоступна = ОнлайнЗаказыСлужебный.НастройкаОнлайнЗаказовДоступна();
	
	УстановитьВидимостьДоступность();
	УправлениеЭлементамиФормыПоДанным();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	НеобходимОтзывТокенов = Ложь;
	
	Если Не ИзменениеАктуальности
		И Не ТекущийОбъект.Используется
		И ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		
		НеобходимОтзывТокенов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ТекущийОбъект.Ссылка,
			"Используется");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РезультатПроверкиШаблонов = Неопределено;
	ИспользоватьШаблоныСообщений = ОнлайнЗаказыСлужебный.ИспользоватьШаблоныСообщений();
	
	Если ИспользоватьШаблоныСообщений Тогда
		РезультатПроверкиШаблонов = ОнлайнЗаказыСлужебный.ВсеШаблоныСозданы();
	КонецЕсли;
	
	Если ИзменениеАктуальности Тогда
		ИзменениеАктуальности = Ложь;
		УправлениеЭлементамиФормыПоДанным();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗакрытьПослеЗаписи", Ложь);
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ПараметрыЗаписи);
	
	Если ОписаниеОповещенияОЗакрытии <> Неопределено
		И ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры <> Неопределено Тогда
		ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Вставить(
			"НастройкаПодключенияКОнлайнЗаказам",
			Объект.Ссылка);
	КонецЕсли;
	
	Если НеобходимОтзывТокенов Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется отзыв неиспользуемых токенов.'");
		
		РезультатВыполнения = ОтозватьТокеныЗапускЗадания();
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения(
			"ОтозватьТокеныЗавершение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		Если РезультатВыполнения = Неопределено
			Или РезультатВыполнения.Статус = "Выполнено"
			Или РезультатВыполнения.Статус = "Ошибка" Тогда
			
			ОтозватьТокеныЗавершение(РезультатВыполнения, ДополнительныеПараметры);
			Возврат;
			
		КонецЕсли;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			РезультатВыполнения,
			ОповещениеОЗавершении,
			ПараметрыОжидания);
		
	Иначе
		ПослеЗавершенияОперацийСТокенами(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПредставлениеНеРедактировалось = Объект.Наименование = Строка(Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ПредставлениеНеРедактировалось Тогда
		Объект.Наименование = Строка(Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодключениеКСБПc2bОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "chose:SBP" Тогда
		ОнлайнЗаказыКлиентСобытия.ПриВыбореНастройкиПодключения(
			ЭтотОбъект,
			Новый ОписаниеОповещения("ПослеВыбораНастройкиПодключенияСБПc2b", ЭтотОбъект),
			ПредопределенноеЗначение("Перечисление.СпособыОплатыОнлайнЗаказов.СБПc2b"));
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "disable:SBP" Тогда
		УдалитьСпособОплаты(ПредопределенноеЗначение("Перечисление.СпособыОплатыОнлайнЗаказов.СБПc2b"));
		НастройкаПодключенияКСБПc2b = Неопределено;
		ПослеВыбораНастройкиОплаты();
		ПослеЗаписи(Новый Структура);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "open:SBP" Тогда
		ПоказатьЗначение(, НастройкаПодключенияКСБПc2b);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПредупреждениеОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "operation:pageSettings" Тогда
		ИнициализацияОправкиВСервис(Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Записать(Новый Структура("ЗакрытьПослеЗаписи", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСтраницуЗаказа(Команда)
	
	НастроитьВнешнийВидСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВСервис(Команда)
	
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Перед обновлением настроек в сервисе необходимо записать изменения.'"));
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Необходимо записать настройку подключения.'"));
		Возврат;
	КонецЕсли;
	
	ИнициализацияОправкиВСервис(Ложь, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СпособыОплаты

&НаКлиенте
Процедура УдалитьСпособОплаты(СпособОплаты)
	
	Модифицированность = Истина;
	
	Отбор = Новый Структура;
	Отбор.Вставить("СпособОплаты", СпособОплаты);
	
	УдаленнаяНастройкаОплаты = Новый Структура;
	
	НайденныеЗначения = Объект.НастройкиОплаты.НайтиСтроки(Отбор);
	
	Для Каждого НайденноеЗначение Из НайденныеЗначения Цикл
		УдаленнаяНастройкаОплаты.Вставить("СпособОплаты", НайденноеЗначение.СпособОплаты);
		УдаленнаяНастройкаОплаты.Вставить("НастройкаПодключения", НайденноеЗначение.НастройкаПодключения);
		Объект.НастройкиОплаты.Удалить(НайденноеЗначение);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(УдаленнаяНастройкаОплаты) Тогда
		ОтозватьТокен(УдаленнаяНастройкаОплаты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораНастройкиПодключенияСБПc2b(
		НастройкаПодключения,
		ДополнительныеПараметры) Экспорт
	
	Если НастройкаПодключения <> Неопределено Тогда
		
		НастройкаПодключенияКСБПc2b = НастройкаПодключения;
		
		УдалитьСпособОплаты(ПредопределенноеЗначение("Перечисление.СпособыОплатыОнлайнЗаказов.СБПc2b"));
		
		СпособОплаты = Объект.НастройкиОплаты.Добавить();
		СпособОплаты.СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыОплатыОнлайнЗаказов.СБПc2b");
		СпособОплаты.НастройкаПодключения = НастройкаПодключенияКСБПc2b;
		
		ПослеВыбораНастройкиОплаты();
		ПослеЗаписи(Новый Структура);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеВыбораНастройкиОплаты()
	
	Записать();
	УстановитьПредставлениеНастройкиПодключенияКСБПc2b();
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

&НаКлиенте
Процедура ПослеОтветаНаВопросОСозданииШаблонов(Результат, Параметры) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗакрытьПослеЗаписи", Ложь);
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, Параметры);
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СозданныеШаблоны = СоздатьПредопределенныеШаблоныСообщений();
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			РезультатПроверкиШаблонов.Шаблоны,
			СозданныеШаблоны);
		РезультатПроверкиШаблонов.ВсеШаблоны = Истина;
		
		Если Не ДополнительныеПараметры.ЗакрытьПослеЗаписи Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Предопределенные шаблоны созданы.'"));
		КонецЕсли;
		
	КонецЕсли;
	
	ИнициализацияОправкиВСервис(
		ДополнительныеПараметры.ЗакрытьПослеЗаписи,
		Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьПредопределенныеШаблоныСообщений()
	
	ОнлайнЗаказыСлужебный.УстановитьИспользованиеШаблоновСообщенийПроверкаПодсистем();
	Возврат ОнлайнЗаказыСлужебный.СоздатьПредопределенныеШаблоныСообщенийПроверкаПодсистем();
	
КонецФункции

#КонецОбласти

#Область ОтзывТокенаНастройкиОплаты

&НаКлиенте
Процедура ОтозватьТокен(НастройкаОплаты)
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Проверка использования и отзыв токена по настройке оплаты.'");
	
	РезультатВыполнения = ОтозватьТокенЗапускЗадания(НастройкаОплаты);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ОтозватьТокенЗавершение",
		ЭтотОбъект,
		Новый Структура("НастройкаОплаты", НастройкаОплаты));
	
	Если РезультатВыполнения = Неопределено
		Или РезультатВыполнения.Статус = "Выполнено"
		Или РезультатВыполнения.Статус = "Ошибка" Тогда
		
		ОтозватьТокенЗавершение(РезультатВыполнения, Неопределено);
		Возврат;
		
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		РезультатВыполнения,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ОтозватьТокенЗапускЗадания(Знач УдаленнаяНастройкаОплаты)
	
	Если Справочники.НастройкиПодключенияКОнлайнЗаказам.СуществуютНастройкиПоНастройкеОплаты(
		УдаленнаяНастройкаОплаты.НастройкаПодключения,
		Объект.Ссылка) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(
		УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания
		= НСтр("ru = 'Отзыв токена настройки оплаты.'");
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"ОнлайнЗаказыСлужебный.ОтозватьТокенНастройкиОплаты",
		УдаленнаяНастройкаОплаты.СпособОплаты,
		УдаленнаяНастройкаОплаты.НастройкаПодключения);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ОтозватьТокенЗавершение(
		Результат,
		ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатОперации = ПолучитьИзВременногоХранилища(
			Результат.АдресРезультата);
		Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			Оповещение = Новый ОписаниеОповещения(
				"ПослеОтветаНаВопросОПовторномОтзывеТокена",
				ЭтотОбъект,
				Новый Структура("НастройкаОплаты", ДополнительныеПараметры.НастройкаОплаты));
			ПоказатьВопрос(
				Оповещение,
				НСтр("ru = 'При отзыве токена возникла ошибка. Повторить попытку?'"),
				РежимДиалогаВопрос.ДаНетОтмена);
		Иначе
			Записать();
		КонецЕсли;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПослеОтветаНаВопросОПовторномОтзывеТокена",
			ЭтотОбъект,
			Новый Структура("НастройкаОплаты", ДополнительныеПараметры.НастройкаОплаты));
		ПоказатьВопрос(
			Оповещение,
			НСтр("ru = 'При отзыве токена возникла ошибка. Повторить попытку?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОПовторномОтзывеТокена(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОтозватьТокен(Параметры.НастройкаОплаты);
		Возврат;
	КонецЕсли;
	
	Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ОтзывТокенов

&НаСервере
Функция ОтозватьТокеныЗапускЗадания()
	
	НеиспользуемыеНастройки = Справочники.НастройкиПодключенияКОнлайнЗаказам.НеиспользуемыеНастройкиОплат(
		Объект.Ссылка);
	
	Если Не ЗначениеЗаполнено(НеиспользуемыеНастройки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(
		УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отзыв неиспользуемых токенов оплат.'");
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"ОнлайнЗаказыСлужебный.ОтозватьНеиспользуемыеТокеныНастройкиПодключения",
		НеиспользуемыеНастройки);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ОтозватьТокеныЗавершение(
		Результат,
		ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ПослеЗавершенияОперацийСТокенами(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатОперации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			Оповещение = Новый ОписаниеОповещения(
				"ПослеОтветаНаВопросОПовторномОтзывеТокенов",
				ЭтотОбъект,
				ДополнительныеПараметры);
			ПоказатьВопрос(
				Оповещение,
				НСтр("ru = 'При отзыве токенов возникла ошибка. Повторить попытку?'"),
				РежимДиалогаВопрос.ДаНетОтмена);
		КонецЕсли;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПослеОтветаНаВопросОПовторномОтзывеТокенов",
			ЭтотОбъект,
			ДополнительныеПараметры);
		ПоказатьВопрос(
			Оповещение,
			НСтр("ru = 'При отзыве токенов возникла ошибка. Повторить попытку?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
	ПослеЗавершенияОперацийСТокенами(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОПовторномОтзывеТокенов(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОтозватьТокеныЗапускЗадания();
		Возврат;
	КонецЕсли;
	
	ПослеЗавершенияОперацийСТокенами(Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияОперацийСТокенами(ДополнительныеПараметры)
	
	Если РезультатПроверкиШаблонов <> Неопределено
		И Не РезультатПроверкиШаблонов.ВсеШаблоны Тогда
		
		Оповещение = Новый ОписаниеОповещения(
			"ПослеОтветаНаВопросОСозданииШаблонов",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ПоказатьВопрос(
			Оповещение,
			НСтр("ru = 'Создать шаблоны сообщений для автоматического заполнения на основании данных документов?'"),
			РежимДиалогаВопрос.ДаНет);
			
	Иначе
		
		ИнициализацияОправкиВСервис(
			ДополнительныеПараметры.ЗакрытьПослеЗаписи,
			Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаВСервис

&НаКлиенте
Процедура ИнициализацияОправкиВСервис(ЗакрытьПослеЗаписи, ПоказыватьПредупреждение)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗакрытьПослеЗаписи", ЗакрытьПослеЗаписи);
	ДополнительныеПараметры.Вставить("ПоказыватьПредупреждение", ПоказыватьПредупреждение);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Обновление настроек онлайн-заказов в сервисе.'");
	
	РезультатВыполнения = ОтправитьВСервисЗапускЗадания();
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ОтправитьВСервисЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	Если РезультатВыполнения.Статус = "Выполнено" Или РезультатВыполнения.Статус = "Ошибка" Тогда
		ОтправитьВСервисЗавершение(
			РезультатВыполнения,
			ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		РезультатВыполнения,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ОтправитьВСервисЗапускЗадания()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(
		УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания
		= НСтр("ru = 'Обновление настроек онлайн-заказов в сервисе.'");
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"ОнлайнЗаказыСлужебный.ОбновлениеНастройки",
		Объект.Ссылка);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьВСервисЗавершение(
		Результат,
		ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатОперации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			
			ПоказатьПредупреждение(
				Неопределено,
				РезультатОперации.СообщениеОбОшибке);
			
			Если Объект.ОшибкаСинхронизации <> Истина Тогда
				УстановитьОшибкуСинхронизации(Истина);
			КонецЕсли;
			
		Иначе
			
			Если Объект.ОшибкаСинхронизации <> Ложь Тогда
				УстановитьОшибкуСинхронизации(Ложь);
			КонецЕсли;
			
			Если ДополнительныеПараметры.ПоказыватьПредупреждение Тогда
				
				ПоказатьПредупреждение(
					Неопределено,
					НСтр("ru = 'Настройки успешно обновлены.'"));
					
			ИначеЕсли ДополнительныеПараметры.ЗакрытьПослеЗаписи Тогда
				Закрыть(Истина);
				Возврат;
			Иначе
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Настройки успешно обновлены.'"));
			КонецЕсли;
			
			Если Не НастройкаВыгруженаВСервис Тогда
				НастройкаВыгруженаВСервис = Истина;
				Элементы.НастроитьСтраницуЗаказа.Видимость = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(
			Неопределено,
			Результат.КраткоеПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВнешнегоВидаСтраницы

&НаКлиенте
Процедура НастроитьВнешнийВидСтраницы()
	
	Результат = URLНастройкиПодключения(Объект.Ссылка);
	
	Если Результат.КодОшибки = ОнлайнЗаказыКлиент.КодОшибкиДанныеАутентификацииИППНеЗаполнены() Тогда
		Если ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
			ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
				Новый ОписаниеОповещения("ПриЗавершенииПодключенияИнтернетПоддержки", ЭтотОбъект),
				ЭтотОбъект);
		Иначе
			ПоказатьПредупреждение(
				,
				НСтр("ru = 'Необходимо подключить Интернет-поддержку пользователей.
				|Обратитесь к администратору системы.'"));
		КонецЕсли;
	ИначеЕсли ПустаяСтрока(Результат.КодОшибки) Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(Результат.URLНастройкиПодключения);
	Иначе
		ПоказатьПредупреждение(
			,
			Результат.СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция URLНастройкиПодключения(Знач НастройкаПодключения)
	
	Возврат ОнлайнЗаказыСлужебный.URLНастройкиПодключения(НастройкаПодключения);
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Элементы.НастроитьСтраницуЗаказа.Доступность = НастройкаОнлайнЗаказовДоступна;
	Элементы.ФормаОбновитьНастройки.Доступность = НастройкаОнлайнЗаказовДоступна;
	Элементы.ФормаЗаписатьИЗакрыть.Доступность = НастройкаОнлайнЗаказовДоступна;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.БазоваяФункциональностьСБП") Тогда
		МодульСистемаБыстрыхПлатежейСлужебный = ОбщегоНазначения.ОбщийМодуль("СистемаБыстрыхПлатежейСлужебный");
		ЧтениеНастроекСБПДоступно = МодульСистемаБыстрыхПлатежейСлужебный.ЧтениеНастроекДоступно();
	КонецЕсли;
	
	Если Не ЧтениеНастроекСБПДоступно
		Или Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		Элементы.ГруппаНастройкаПодключенияСБПc2b.Видимость = Ложь;
	Иначе
		УстановитьПредставлениеНастройкиПодключенияКСБПc2b();
	КонецЕсли;
	
	УстановитьПредставлениеДекорацииПредупреждение();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеДекорацииПредупреждение()
	
	ЧастиСтрок = Новый Массив;
	ЧастиСтрок.Добавить(НСтр("ru = 'Не удалось обновить данные в сервисе.'"));
	
	Если НастройкаОнлайнЗаказовДоступна Тогда
		ЧастиСтрок.Добавить(" ");
		ЧастиСтрок.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'Повторить отправку'")
				,
				,
				,
				,
				"operation:pageSettings"));
	КонецЕсли;
	
	Элементы.ДекорацияПредупреждение.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтрок);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеНастройкиПодключенияКСБПc2b()
	
	Если Не ЗначениеЗаполнено(НастройкаПодключенияКСБПc2b) Тогда
		Если НастройкаОнлайнЗаказовДоступна Тогда
			Элементы.ДекорацияПодключениеКСБПc2b.Заголовок = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Выбрать'")
				,
				,
				,
				,
				"chose:SBP");
		Иначе
			Элементы.ДекорацияПодключениеКСБПc2b.Заголовок = "";
		КонецЕсли;
	Иначе
		ЧастиСтрок = Новый Массив;
		ЧастиСтрок.Добавить(
			Новый ФорматированнаяСтрока(
				Строка(НастройкаПодключенияКСБПc2b),
				,
				,
				,
				"open:SBP"));
		ЧастиСтрок.Добавить(" ");
		Если НастройкаОнлайнЗаказовДоступна Тогда
			ЧастиСтрок.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'Отключить'")
					,
					,
					,
					,
					"disable:SBP"));
		КонецЕсли;
		Элементы.ДекорацияПодключениеКСБПc2b.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтрок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииПодключенияИнтернетПоддержки(ДанныеАутентификации, ДопПараметры) Экспорт
	
	Если ДанныеАутентификации <> Неопределено Тогда
		НастроитьВнешнийВидСтраницы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОшибкуСинхронизации(Знач ЗначениеОшибки)
	
	Объект.ОшибкаСинхронизации = ЗначениеОшибки;
	ИзменениеАктуальности = Истина;
	Записать();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыПоДанным()
	
	Элементы.НастроитьСтраницуЗаказа.Видимость = НастройкаВыгруженаВСервис;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Элементы.ГруппаПредупреждение.Видимость = Объект.ОшибкаСинхронизации;
	Иначе
		Элементы.ГруппаПредупреждение.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти
