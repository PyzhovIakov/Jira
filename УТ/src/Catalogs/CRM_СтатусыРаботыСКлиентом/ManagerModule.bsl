#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик получения формы справочника.
//
// Параметры:
//	ВидФормы					- Строка	- Вид формы справочника.
//	Параметры					- Структура	- Параметры, переданные для формы.
//	ВыбраннаяФорма				- Строка	- Имя открываемой формы справочника.
//	ДополнительнаяИнформация	- Строка	- Дополнительная информация.
//	СтандартнаяОбработка		- Булево	- Признак стандартной обработки.
//
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	Если ВидФормы = "ФормаОбъекта" Тогда
		Если Параметры.Свойство("Ключ") Тогда
			Если Параметры.Ключ.Предопределенный Тогда
				// Запрещаем редактировать предопределенный элемент.
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "ФормаЭлемента";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОбработкаПолученияФормы()

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат;
	КонецЕсли;
	Если Не Параметры.Свойство("ФильтроватьПоСпособуУстановки") Тогда
		Возврат;
	КонецЕсли;
	Ответственный = Неопределено;
	Если Параметры.Свойство("Ответственный", Ответственный)
		И ЗначениеЗаполнено(Ответственный) Тогда
		МассивРуководителей = CRM_УправлениеДоступомПовтИсп.ПолучитьРуководителейПользователя(Ответственный);
		Если МассивРуководителей.Найти(Пользователи.ТекущийПользователь()) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СтатусыРаботыСКлиентом.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_СтатусыРаботыСКлиентом КАК CRM_СтатусыРаботыСКлиентом
	                      |ГДЕ
	                      |	CRM_СтатусыРаботыСКлиентом.СпособУстановки = &СпособУстановки
	                      |	И НЕ CRM_СтатусыРаботыСКлиентом.ПометкаУдаления
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	CRM_СтатусыРаботыСКлиентом.РеквизитДопУпорядочивания");
	
	Запрос.УстановитьПараметр("СпособУстановки", Перечисления.CRM_СпособыУстановкиСтатусаКлиента.Вручную);
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Функция возвращает статус работы для нового клиента.
// 
// Возвращаемое значение:
//   - СправочникСсылка.CRM_СтатусыРаботыСКлиентом, Неопределено
//
Функция СтатусНовогоКлиента() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	CRM_СтатусыРаботыСКлиентом.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_СтатусыРаботыСКлиентом КАК CRM_СтатусыРаботыСКлиентом
	                      |ГДЕ
	                      |	CRM_СтатусыРаботыСКлиентом.СпособУстановки = &СпособУстановки
	                      |	И НЕ CRM_СтатусыРаботыСКлиентом.ПометкаУдаления
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	CRM_СтатусыРаботыСКлиентом.РеквизитДопУпорядочивания");
	Запрос.УстановитьПараметр("СпособУстановки", Перечисления.CRM_СпособыУстановкиСтатусаКлиента.ДляНовогоКлиента);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция возвращает структуру шаблонов расчета.
// 
// Возвращаемое значение:
//   - Структура
//
Функция ШаблоныРасчета() Экспорт
	
	Шаблоны = Новый Структура;
	
	// Способ расчета "СКД" - рассчитывается на основе схемы компоновки данных из макета
	// Способ расчета "Метод" - рассчитывается в указанной процедуре
	// Пример:
	//Шаблоны.Вставить("Свой", Новый Структура("Заголовок, СпособРасчета, Путь",
	//	"Свой шаблон", "Метод", "ОбщийМодуль.РасчетСтатуса"));
	// Процедура РасчетСтатуса(УстанавливаемыйСтатус, НачалоРасчета)
	
	ПрефиксМакета = "";
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ПрефиксМакета = "Модуль_";
	КонецЕсли;
	
	Шаблоны.Вставить("ВПроработке", Новый Структура("Заголовок, СпособРасчета, Путь, Описание",
		НСтр("ru = 'В проработке'"), "СКД", ПрефиксМакета + "Расчет_ВПроработке",
		НСтр("ru = 'Предыдущий статус клиента - Новый.
              |
              |По клиенту за последние 30 дней есть активные Интересы,
              |но при этом:
              |- нет успешно завершенных интересов;
              |- нет оплат
              |- нет отгрузок'")));
	Шаблоны.Вставить("Активный", Новый Структура("СпособРасчета, Путь, Описание",
		"СКД", ПрефиксМакета + "Расчет_Активный",
		НСтр("ru = 'Предыдущий статус клиента - Новый, В проработке, Возвращенный.
              |
              |По клиенту за последние 30 дней: 
              |- есть успешно завершенные Интересы;
              |- или есть оплаты;
              |- или есть отгрузки'")));
	Шаблоны.Вставить("Потерянный", Новый Структура("СпособРасчета, Путь, Описание",
		"СКД", ПрефиксМакета + "Расчет_Потерянный",
		НСтр("ru = 'Предыдущий статус клиента - Активный, В проработке, Возвращенный.
              |
              |По клиенту за последние 30 дней:
              |- нет активных Интересов;
              |- нет успешно завершенных Интересов;
              |- нет отгрузок;
              |- нет оплат'")));
	Шаблоны.Вставить("Возвращенный", Новый Структура("СпособРасчета, Путь, Описание",
		"СКД", ПрефиксМакета + "Расчет_Возвращенный",
		НСтр("ru = 'Предыдущий статус клиента - Потерянный.
              |
              |По клиенту за последние 30 дней: 
              |- есть активные Интересы;
              |- нет успешно завершенных Интересов;
              |- нет оплат;
              |- нет отгрузок'")));
	Шаблоны.Вставить("Ликвидирован", Новый Структура("СпособРасчета, Путь, Описание",
		"СКД", ПрефиксМакета + "Расчет_Ликвидирован",
		НСтр("ru = 'Статус выставляется автоматически 
              |при проверке контрагента связанного с клиентом с помощью
              |сервиса 1С:Контрагент'")));
	
	Возврат Шаблоны;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПереходНаНовуюВерсию

Процедура НачальноеЗаполнениеДанных() Экспорт
	
	Если Выбрать().Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Шаблоны = ШаблоныРасчета();
	
	// Новый клиент
	Элемент = СоздатьЭлемент();
	Элемент.Наименование = НСтр("ru = 'Новый'");
	Элемент.СпособУстановки = Перечисления.CRM_СпособыУстановкиСтатусаКлиента.ДляНовогоКлиента;
	Элемент.ЦветФона = "224;255;255";
	Элемент.Описание = НСтр("ru = 'Зарегистрирован новый клиент. 
                            |По клиенту нет истории с нашей организацией.'");
	Элемент.Записать();
	
	// Правило заполнения клиентов
	Правило = Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.СоздатьЭлемент();
	Правило.ТипОбъекта = "Справочник.Партнеры";
	Правило.СтатусРаботыСКлиентом = Элемент.Ссылка;
	Правило.Наименование = НСтр("ru = 'Партнеры'") + " " + Элемент.Наименование;
	Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.ЗаполнитьПравилоПоШаблону(Правило, "Новый");
	Правило.Записать();
	// Правило заполнения контактных лиц
	Правило = Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.СоздатьЭлемент();
	Правило.ТипОбъекта = "Справочник.КонтактныеЛицаПартнеров";
	Правило.СтатусРаботыСКлиентом = Элемент.Ссылка;
	Правило.Наименование = НСтр("ru = 'Контактные лица'") + " " + Элемент.Наименование;
	Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.ЗаполнитьПравилоПоШаблону(Правило, "Новый");
	Правило.Записать();
	
	// В проработке
	Элемент = СоздатьЭлемент();
	Элемент.Наименование = НСтр("ru = 'В проработке'");
	Элемент.СпособУстановки = Перечисления.CRM_СпособыУстановкиСтатусаКлиента.Автоматически;
    Элемент.ШаблонРасчета = "ВПроработке";
	Макет = ПолучитьМакет("Расчет_ВПроработке");
	Элемент.НастройкиРасчета = Новый ХранилищеЗначения(Макет.НастройкиПоУмолчанию);
	Элемент.ЦветФона = "255;251;240";
	Элемент.Описание = Шаблоны["ВПроработке"].Описание;
	Элемент.Записать();
	
	// Правило заполнения клиентов
	Правило = Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.СоздатьЭлемент();
	Правило.ТипОбъекта = "Справочник.Партнеры";
	Правило.СтатусРаботыСКлиентом = Элемент.Ссылка;
	Правило.Наименование = НСтр("ru = 'Партнеры'") + " " + Элемент.Наименование;
	Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.ЗаполнитьПравилоПоШаблону(Правило, "ВПроработке");
	Правило.Записать();
	// Правило заполнения контактных лиц
	Правило = Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.СоздатьЭлемент();
	Правило.ТипОбъекта = "Справочник.КонтактныеЛицаПартнеров";
	Правило.СтатусРаботыСКлиентом = Элемент.Ссылка;
	Правило.Наименование = НСтр("ru = 'Контактные лица'") + " " + Элемент.Наименование;
	Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.ЗаполнитьПравилоПоШаблону(Правило, "ВПроработке");
	Правило.Записать();
	
	// Активный
	Элемент = СоздатьЭлемент();
	Элемент.Наименование = НСтр("ru = 'Активный'");
	Элемент.СпособУстановки = Перечисления.CRM_СпособыУстановкиСтатусаКлиента.Автоматически;
    Элемент.ШаблонРасчета = "Активный";
	Макет = ПолучитьМакет("Расчет_Активный");
	Элемент.НастройкиРасчета = Новый ХранилищеЗначения(Макет.НастройкиПоУмолчанию);
	Элемент.ЦветФона = "215;240;199";
	Элемент.Описание = Шаблоны["Активный"].Описание;
	Элемент.Записать();
	
	// Правило заполнения клиентов
	Правило = Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.СоздатьЭлемент();
	Правило.ТипОбъекта = "Справочник.Партнеры";
	Правило.СтатусРаботыСКлиентом = Элемент.Ссылка;
	Правило.Наименование = НСтр("ru = 'Партнеры'") + " " + Элемент.Наименование;
	Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.ЗаполнитьПравилоПоШаблону(Правило, "Активный");
	Правило.Записать();
	// Правило заполнения контактных лиц
	Правило = Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.СоздатьЭлемент();
	Правило.ТипОбъекта = "Справочник.КонтактныеЛицаПартнеров";
	Правило.СтатусРаботыСКлиентом = Элемент.Ссылка;
	Правило.Наименование = НСтр("ru = 'Контактные лица'") + " " + Элемент.Наименование;
	Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.ЗаполнитьПравилоПоШаблону(Правило, "Активный");
	Правило.Записать();
	
	// Потерянный
	Элемент = СоздатьЭлемент();
	Элемент.Наименование = НСтр("ru = 'Потерянный'");
	Элемент.СпособУстановки = Перечисления.CRM_СпособыУстановкиСтатусаКлиента.Автоматически;
    Элемент.ШаблонРасчета = "Потерянный";
	Макет = ПолучитьМакет("Расчет_Потерянный");
	Элемент.НастройкиРасчета = Новый ХранилищеЗначения(Макет.НастройкиПоУмолчанию);
	Элемент.ЦветФона = "238;130;238";
	Элемент.Описание = Шаблоны["Потерянный"].Описание;
	Элемент.Записать();
	
	// Правило заполнения клиентов
	Правило = Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.СоздатьЭлемент();
	Правило.ТипОбъекта = "Справочник.Партнеры";
	Правило.СтатусРаботыСКлиентом = Элемент.Ссылка;
	Правило.Наименование = НСтр("ru = 'Партнеры'") + " " + Элемент.Наименование;
	Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.ЗаполнитьПравилоПоШаблону(Правило, "Потерянный");
	Правило.Записать();
	// Правило заполнения контактных лиц
	Правило = Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.СоздатьЭлемент();
	Правило.ТипОбъекта = "Справочник.КонтактныеЛицаПартнеров";
	Правило.СтатусРаботыСКлиентом = Элемент.Ссылка;
	Правило.Наименование = НСтр("ru = 'Контактные лица'") + " " + Элемент.Наименование;
	Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.ЗаполнитьПравилоПоШаблону(Правило, "Потерянный");
	Правило.Записать();
	
	// Возвращенный
	Элемент = СоздатьЭлемент();
	Элемент.Наименование = НСтр("ru = 'Возвращенный'");
	Элемент.СпособУстановки = Перечисления.CRM_СпособыУстановкиСтатусаКлиента.Автоматически;
    Элемент.ШаблонРасчета = "Возвращенный";
	Макет = ПолучитьМакет("Расчет_Возвращенный");
	Элемент.НастройкиРасчета = Новый ХранилищеЗначения(Макет.НастройкиПоУмолчанию);
	Элемент.ЦветФона = "143;188;139";
	Элемент.Описание = Шаблоны["Возвращенный"].Описание;
	Элемент.Записать();
	
	// Правило заполнения клиентов
	Правило = Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.СоздатьЭлемент();
	Правило.ТипОбъекта = "Справочник.Партнеры";
	Правило.СтатусРаботыСКлиентом = Элемент.Ссылка;
	Правило.Наименование = НСтр("ru = 'Партнеры'") + " " + Элемент.Наименование;
	Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.ЗаполнитьПравилоПоШаблону(Правило, "Возвращенный");
	Правило.Записать();
	// Правило заполнения контактных лиц
	Правило = Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.СоздатьЭлемент();
	Правило.ТипОбъекта = "Справочник.КонтактныеЛицаПартнеров";
	Правило.СтатусРаботыСКлиентом = Элемент.Ссылка;
	Правило.Наименование = НСтр("ru = 'Контактные лица'") + " " + Элемент.Наименование;
	Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.ЗаполнитьПравилоПоШаблону(Правило, "Возвращенный");
	Правило.Записать();
	
	// Ликвидирован
	Элемент = СоздатьЭлемент();
	Элемент.Наименование = НСтр("ru = 'Ликвидирован'");
	Элемент.СпособУстановки = Перечисления.CRM_СпособыУстановкиСтатусаКлиента.Автоматически;
    Элемент.ШаблонРасчета = "Ликвидирован";
	Макет = ПолучитьМакет("Расчет_Ликвидирован");
	Элемент.НастройкиРасчета = Новый ХранилищеЗначения(Макет.НастройкиПоУмолчанию);
	Элемент.ЦветФона = "220;220;220";
	Элемент.Описание = Шаблоны["Ликвидирован"].Описание;
	Элемент.Записать();
	
	// Правило заполнения клиентов
	Правило = Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.СоздатьЭлемент();
	Правило.ТипОбъекта = "Справочник.Партнеры";
	Правило.СтатусРаботыСКлиентом = Элемент.Ссылка;
	Правило.Наименование = НСтр("ru = 'Партнеры'") + " " + Элемент.Наименование;
	Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.ЗаполнитьПравилоПоШаблону(Правило, "Ликвидирован");
	Правило.Записать();
	// Правило заполнения контактных лиц
	Правило = Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.СоздатьЭлемент();
	Правило.ТипОбъекта = "Справочник.КонтактныеЛицаПартнеров";
	Правило.СтатусРаботыСКлиентом = Элемент.Ссылка;
	Правило.Наименование = НСтр("ru = 'Контактные лица'") + " " + Элемент.Наименование;
	Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.ЗаполнитьПравилоПоШаблону(Правило, "Ликвидирован");
	Правило.Записать();
	
	// Чужой
	Элемент = СоздатьЭлемент();
	Элемент.Наименование = НСтр("ru = 'Чужой'");
	Элемент.СпособУстановки = Перечисления.CRM_СпособыУстановкиСтатусаКлиента.Вручную;
	Элемент.ЦветФона = "255;255;0";
	Элемент.Описание = НСтр("ru = 'Статус указывается вручную. 
                             |Пользователь имеющий доступ к редактированию карточки клиента
                             |имеет возможность указания данного статуса.
                             |Чужим считается клиент, который является клиентом у наших конкурентов.
                             |
                             |Статус, назначенный вручную, не может быть изменен автоматическими
                             |правилами расчета.'");
	Элемент.Записать();
	
	// Правило заполнения клиентов
	Правило = Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.СоздатьЭлемент();
	Правило.ТипОбъекта = "Справочник.Партнеры";
	Правило.СтатусРаботыСКлиентом = Элемент.Ссылка;
	Правило.Наименование = НСтр("ru = 'Партнеры'") + " " + Элемент.Наименование;
	Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.ЗаполнитьПравилоПоШаблону(Правило, "Чужой");
	Правило.Записать();
	// Правило заполнения контактных лиц
	Правило = Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.СоздатьЭлемент();
	Правило.ТипОбъекта = "Справочник.КонтактныеЛицаПартнеров";
	Правило.СтатусРаботыСКлиентом = Элемент.Ссылка;
	Правило.Наименование = НСтр("ru = 'Контактные лица'") + " " + Элемент.Наименование;
	Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.ЗаполнитьПравилоПоШаблону(Правило, "Чужой");
	Правило.Записать();
	
	// Нецелевой
	Элемент = СоздатьЭлемент();
	Элемент.Наименование = НСтр("ru = 'Нецелевой'");
	Элемент.СпособУстановки = Перечисления.CRM_СпособыУстановкиСтатусаКлиента.Вручную;
	Элемент.ЦветФона = "220;220;220";
	Элемент.Описание = НСтр("ru = 'Статус указывается вручную. 
                             |Пользователь имеющий доступ к редактированию карточки клиента
                             |имеет возможность указания данного статуса.
                             |
                             |Статус, назначенный вручную, не может быть изменен автоматическими
                             |правилами расчета.'");
	Элемент.Записать();
	
	// Правило заполнения клиентов
	Правило = Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.СоздатьЭлемент();
	Правило.ТипОбъекта = "Справочник.Партнеры";
	Правило.СтатусРаботыСКлиентом = Элемент.Ссылка;
	Правило.Наименование = НСтр("ru = 'Партнеры'") + " " + Элемент.Наименование;
	Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.ЗаполнитьПравилоПоШаблону(Правило, "Нецелевой");
	Правило.Записать();
	// Правило заполнения контактных лиц
	Правило = Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.СоздатьЭлемент();
	Правило.ТипОбъекта = "Справочник.КонтактныеЛицаПартнеров";
	Правило.СтатусРаботыСКлиентом = Элемент.Ссылка;
	Правило.Наименование = НСтр("ru = 'Контактные лица'") + " " + Элемент.Наименование;
	Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.ЗаполнитьПравилоПоШаблону(Правило, "Нецелевой");
	Правило.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПриПереходеНаВерсию() Экспорт
	
	Выборка = Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписатьОбъект = Ложь;
		Объект = Выборка.ПолучитьОбъект();
		Если Не ЗначениеЗаполнено(Объект.СпособУстановки) Тогда
			Если Объект.ИмяПредопределенныхДанных = "#210cbf20-fbdf-449b-bcb9-af854d35be1c" Тогда
				Объект.СпособУстановки = Перечисления.CRM_СпособыУстановкиСтатусаКлиента.ДляНовогоКлиента;
			Иначе
				Объект.СпособУстановки = Перечисления.CRM_СпособыУстановкиСтатусаКлиента.Вручную;
			КонецЕсли;
			ЗаписатьОбъект = Истина;
		КонецЕсли;
		Если ЗаписатьОбъект Тогда
			Объект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	МЗ = РегистрыСведений.CRM_НастройкиРасположенияЭлементовНаФормах.СоздатьМенеджерЗаписи();
	МЗ.ИмяФормы = "Справочник.Партнеры.Форма.CRM_ФормаЭлементаНовая";
	МЗ.ИмяЭлемента = "CRM_СтатусРаботы";
	МЗ.Прочитать();
	Если МЗ.Выбран() Тогда
		МЗ.Удалить();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли