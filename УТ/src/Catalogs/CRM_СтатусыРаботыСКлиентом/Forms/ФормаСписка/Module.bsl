
#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗаполнитьСписокШаблонов();
	ЗаполнитьСоответствиеКартинокЦветам();
	ДанныеЗадания = ПолучитьДанныеРегЗаданияНаСервере();

	Элементы.ГруппаРасписание.Видимость = ЕстьАвтоматическиеСтатусы();
	Элементы.ДекорацияПредставлениеРасписания.Заголовок = Строка(ДанныеЗадания.Расписание);
	Элементы.ДекорацияРазультатВыполнения.Заголовок = ДанныеЗадания.Выполнено;
	ОшибкаВыполненияРегЗадания = ДанныеЗадания.Ошибка;
	Если ЗначениеЗаполнено(ОшибкаВыполненияРегЗадания) Тогда
		Элементы.ДекорацияРазультатВыполнения.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		Элементы.ДекорацияРазультатВыполнения.Гиперссылка = Истина;
	Иначе
		Элементы.ДекорацияРазультатВыполнения.ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
		Элементы.ДекорацияРазультатВыполнения.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекОбъект.Ссылка.Пустая() И ЗначениеЗаполнено(ТекСсылка) Тогда
		ПодключитьОбработчикОжидания("ПерейтиКНаименованиюОбъекта", 0.1, Истина);
		Возврат;
	КонецЕсли;
	Если Элемент.ТекущаяСтрока = ТекСсылка Тогда
		Возврат;
	КонецЕсли;
	Если Модифицированность
		И Элемент.ТекущаяСтрока <> ТекОбъект.Ссылка Тогда
		ТекстВопроса = НСтр("ru = 'Текущий элемент был изменен! Сохранить изменения?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриАктивацииСтрокиПослеВопроса", ЭтотОбъект, Элемент);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	Если Элемент.ТекущаяСтрока = ТекОбъект.Ссылка Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьОбластьНастроекПоТекСтроке();
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивацииСтрокиПослеВопроса(Ответ, Элемент) Экспорт
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьОбластьНастроекПоТекСтроке();
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		Элемент.ТекущаяСтрока = ТекОбъект.Ссылка;
		Если ТекОбъект.Ссылка.Пустая() Тогда
			ПерейтиКНаименованиюОбъекта();
		КонецЕсли;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		Если ЗаписатьТекущийОбъектНаСервере() Тогда
			Элементы.Список.Обновить();
			ЗаполнитьОбластьНастроекПоТекСтроке();
		Иначе
			Элемент.ТекущаяСтрока = ТекОбъект.Ссылка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ШаблонРасчетаПриИзмененииНаСервере(ПриАктивации = Ложь)
	
	Если ТекОбъект.ШаблонРасчета <> "" Тогда
		Шаблоны = Справочники.CRM_СтатусыРаботыСКлиентом.ШаблоныРасчета();
		ДанныеШаблона = Шаблоны[ТекОбъект.ШаблонРасчета];
		
		Если Не ПриАктивации Тогда
			ТекОбъект.Описание = ДанныеШаблона.Описание;
		КонецЕсли;
		СКД = Справочники.CRM_СтатусыРаботыСКлиентом.ПолучитьМакет(ДанныеШаблона.Путь);
		Настройки = Неопределено;
		Если ПриАктивации Тогда
			Настройки = ТекОбъект.Ссылка.НастройкиРасчета.Получить();
		КонецЕсли;
		Если Настройки = Неопределено Тогда
			Настройки = СКД.НастройкиПоУмолчанию;
		КонецЕсли;
		Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
		Компоновщик.ЗагрузитьНастройки(Настройки);
	Иначе
		Компоновщик.Инициализировать(Неопределено);
	КонецЕсли;
	СоздатьЭлементыНастройкиШаблона(СКД); 
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонРасчетаПриИзменении(Элемент)
	ШаблонРасчетаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ШаблонРасчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	Если ВыбранноеЗначение = "ДобавитьШаблон" Тогда
		СтандартнаяОбработка = Ложь;

		МСтрок=Новый Массив;
	    МСтрок.Добавить(НСтр("ru = 'Добавить предопределенный шаблон правил расчета статуса клиента возможно только в режиме конфигуратора с привлечением программиста. 
                              |
                              |Данная услуга также доступна в рамках премиальной поддержки пользователей по сервису '"));
	    МСтрок.Добавить(Новый ФорматированнаяСтрока("1С:ИТС Отраслевой КОРП", , , ,"https://1crm.ru/itskorp/"));
		ТекстПредупреждения = Новый ФорматированнаяСтрока(МСтрок);
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СпособУстановкиПриИзмененииНаСервере()
	Элементы.ГруппаНастройкиРасчета.Видимость = 
		(ТекОбъект.СпособУстановки = Перечисления.CRM_СпособыУстановкиСтатусаКлиента.Автоматически);
	Если Не Элементы.ШаблонРасчета.Видимость Тогда
		ТекОбъект.ШаблонРасчета = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособУстановкиПриИзменении(Элемент)
	СпособУстановкиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Процедура СписокПередНачаломДобавленияНаСервере()
	СпрОбъект = Справочники.CRM_СтатусыРаботыСКлиентом.СоздатьЭлемент();
	ЗначениеВРеквизитФормы(СпрОбъект, "ТекОбъект");
	Заголовок = НСтр("ru = '(Создание)'");
	СпособУстановкиПриИзмененииНаСервере();
	Компоновщик.Инициализировать(Неопределено);
	Элементы.Отменить.Видимость = Истина;
	ТекущийЭлемент = Элементы.ТекОбъектНаименование;
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Текущий элемент был изменен! Сохранить изменения?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередДобавлениемПослеВопроса", ЭтотОбъект, Элемент);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	Элементы.Список.ВыделенныеСтроки.Очистить();
	СписокПередНачаломДобавленияНаСервере();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПередДобавлениемПослеВопроса(Ответ, ДопПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		СписокПередНачаломДобавленияНаСервере();
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		Если ЗаписатьТекущийОбъектНаСервере() Тогда
			СписокПередНачаломДобавленияНаСервере();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТекОбъектЦветФонаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЦветаЗавершение", ЭтотОбъект,);
	ОткрытьФорму("Обработка.CRM_РаботаСHTML.Форма.ВыборЦвета", , ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЦветаЗавершение(Цвет, ДопПараметры) Экспорт
	
	Если Не ТипЗнч(Цвет) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТекОбъект.ЦветФона = "" + Цвет.Красный + ";" + Цвет.Зеленый + ";" + Цвет.Синий;
	Элементы.ТекОбъектЦветФона.ЦветФона = Новый Цвет(Цвет.Красный, Цвет.Зеленый, Цвет.Синий);
	Элементы.ТекОбъектЦветФона.ЦветТекста =
		CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(Элементы.ТекОбъектЦветФона.ЦветФона);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРазультатВыполненияНажатие(Элемент)
	ПоказатьПредупреждение(, ОшибкаВыполненияРегЗадания);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	ЗаписатьТекущийОбъектНаСервере();
	Если Элементы.Список.ТекущаяСтрока <> ТекОбъект.Ссылка Тогда
		Элементы.Список.ТекущаяСтрока = ТекОбъект.Ссылка;
		Заголовок = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	Если Элементы.Список.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Список.ВыделенныеСтроки.Добавить(Элементы.Список.ТекущаяСтрока);
		ЗаполнитьОбластьНастроекПоТекСтроке();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРасчета(Команда)

	Расписание = ПолучитьДанныеРегЗаданияНаСервере().Расписание;
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьРасписаниеЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	Если Расписание <> Неопределено Тогда
        Элементы.ДекорацияПредставлениеРасписания.Заголовок = Строка(Расписание);

		ЗаписатьРасписаниеНаСервере(Расписание);
	КонецЕсли;
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Текущий элемент изменен, сначала сохраните изменения.'"));
		Возврат;
	КонецЕсли;
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
	ЗаполнитьОбластьНастроекПоТекСтроке();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЗаписатьТекущийОбъектНаСервере()
	
	Попытка
		СпрОбъект = РеквизитФормыВЗначение("ТекОбъект");
		Если СпрОбъект.ПроверитьЗаполнение() Тогда
			Если ТекОбъект.СпособУстановки = 
				Перечисления.CRM_СпособыУстановкиСтатусаКлиента.Автоматически Тогда
				Для Каждого Реквизит Из РеквизитыНастройки Цикл
					Компоновщик.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Реквизит.Представление,
						ЭтотОбъект[Реквизит.Значение]);
				КонецЦикла;
				СпрОбъект.НастройкиРасчета = Новый ХранилищеЗначения(Компоновщик.Настройки);
			Иначе
				СпрОбъект.НастройкиРасчета = Новый ХранилищеЗначения(Неопределено);
			КонецЕсли;
			СпрОбъект.Записать();
			ЗначениеВРеквизитФормы(СпрОбъект, "ТекОбъект");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	ЗаполнитьСоответствиеКартинокЦветам();
	Элементы.ГруппаРасписание.Видимость = ЕстьАвтоматическиеСтатусы();

	Модифицированность = Ложь;
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОбластьНастроекПоТекСтроке()
	
	СпрОбъект = Элементы.Список.ТекущаяСтрока.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(СпрОбъект, "ТекОбъект");
	Модифицированность = Ложь;
	СпособУстановкиПриИзмененииНаСервере();
	ШаблонРасчетаПриИзмененииНаСервере(Истина);
	ТекСсылка = Элементы.Список.ТекущаяСтрока;
	Элементы.Отменить.Видимость = Ложь;
	
	ЦветСтатусаРаботы = Новый Цвет(255, 255, 255);
	Если ЗначениеЗаполнено(ТекОбъект.ЦветФона) Тогда
		МассивRGB = СтрРазделить(ТекОбъект.ЦветФона, ";");
		Если МассивRGB.Количество() = 3 Тогда
			ЦветСтатусаРаботы = Новый Цвет(Число(МассивRGB[0]), Число(МассивRGB[1]), Число(МассивRGB[2]));
		КонецЕсли;
	Иначе
		ТекОбъект.ЦветФона = "255;255;255";
	КонецЕсли;
	
	Элементы.ТекОбъектЦветФона.ЦветФона   = ЦветСтатусаРаботы;
	Элементы.ТекОбъектЦветФона.ЦветТекста = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(ЦветСтатусаРаботы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокШаблонов()
	
	Шаблоны = Справочники.CRM_СтатусыРаботыСКлиентом.ШаблоныРасчета();
	Для Каждого Шаблон Из Шаблоны Цикл
		ДанныеШаблона = Шаблон.Значение;
		
		Если ДанныеШаблона.Свойство("Заголовок") Тогда
			ТекЗаголовок = ДанныеШаблона.Заголовок;
		ИначеЕсли ДанныеШаблона.СпособРасчета = "СКД" Тогда
			МетаданныеМакета = Метаданные.Справочники.CRM_СтатусыРаботыСКлиентом.Макеты.Найти(ДанныеШаблона.Путь);
			Если МетаданныеМакета = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТекЗаголовок = МетаданныеМакета.Представление();
		Иначе
			ТекЗаголовок = "";
		КонецЕсли;
		Элементы.ШаблонРасчета.СписокВыбора.Добавить(Шаблон.Ключ, ТекЗаголовок);
	КонецЦикла;
	Элементы.ШаблонРасчета.СписокВыбора.Добавить("ДобавитьШаблон", НСтр("ru = 'Добавить шаблон...'"));
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыНастройкиШаблона(СКД)
	
	ИзменитьРеквизиты(, РеквизитыНастройки.ВыгрузитьЗначения());
	Для Каждого Реквизит Из РеквизитыНастройки Цикл
		Элемент = Элементы.Найти(Реквизит.Значение);
		Если Элемент <> Неопределено Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	РеквизитыНастройки.Очистить();
	
	Если СКД = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого Параметр Из СКД.Параметры Цикл
		Если Параметр.ОграничениеИспользования Тогда
			Продолжить;
		КонецЕсли;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Параметр_"+Параметр.Имя,
			Параметр.ТипЗначения,,
			Параметр.Заголовок,
			Истина));
		РеквизитыНастройки.Добавить("Параметр_"+Параметр.Имя, Параметр.Имя, Параметр.ЗапрещатьНезаполненныеЗначения);
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Для Каждого Реквизит Из РеквизитыНастройки Цикл
		Элемент = Элементы.Добавить(Реквизит.Значение, Тип("ПолеФормы"), Элементы.ГруппаПараметры);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = Реквизит.Значение;
		Элемент.АвтоОтметкаНезаполненного = Реквизит.Пометка;
		Элемент.АвтоМаксимальнаяШирина = Ложь;
		Элемент.РастягиватьПоГоризонтали = Ложь;
		
		ЗначениеПараметра = Компоновщик.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных(Реквизит.Представление));
		Если ЗначениеПараметра <> Неопределено Тогда
			ЭтотОбъект[Реквизит.Значение] = ЗначениеПараметра.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНаименованиюОбъекта()
	Элементы.Список.ВыделенныеСтроки.Очистить();
	ТекущийЭлемент = Элементы.ТекОбъектНаименование;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствиеКартинокЦветам()
	
	УО = Список.УсловноеОформление;
	УО.Элементы.Очистить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	CRM_СтатусыРаботыСКлиентом.ЦветФона КАК ЦветФона
	                      |ИЗ
	                      |	Справочник.CRM_СтатусыРаботыСКлиентом КАК CRM_СтатусыРаботыСКлиентом");

	ЦветФона = Новый Цвет(255, 255, 255);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.ЦветФона) Тогда
			Продолжить;
		КонецЕсли;
		
		ЦветКруга = CRM_ОбщегоНазначенияКлиентСервер.ЦветИзСтрокиRGB(Выборка.ЦветФона);
        ДанныеКартинки = CRM_ОбщегоНазначенияСервер.СоздатьКартинкуSVG(
			CRM_ОбщегоНазначенияСервер.ТекстSVG_Круг(ЦветКруга));
		Картинка = Новый Картинка(ДанныеКартинки);
		АдресКартинки = ПоместитьВоВременноеХранилище(Картинка, УникальныйИдентификатор);

		ЭлементУО = УО.Элементы.Добавить();

		ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("АдресКартинки");
		ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЦветФона");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Выборка.ЦветФона;

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", АдресКартинки);
	КонецЦикла;

	ЭлементУО = УО.Элементы.Добавить();

	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Наименование");
	
	ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы.Наименование.Шрифт, , , , , , Истина));

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ПолеЦветФона = Новый ПолеКомпоновкиДанных("ЦветФона");
	ПараметрТекст = Новый ПараметрКомпоновкиДанных("Текст");
	Для Каждого Строка Из Строки Цикл
		Для Каждого Элемент Из Настройки.УсловноеОформление.Элементы Цикл
			Если Элемент.Отбор.Элементы[0].ЛевоеЗначение = ПолеЦветФона
				И Строка.Значение.Данные.ЦветФона = Элемент.Отбор.Элементы[0].ПравоеЗначение Тогда
				Строка.Значение.Данные.АдресКартинки = Элемент.Оформление.НайтиЗначениеПараметра(ПараметрТекст).Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеРегЗаданияНаСервере()

	Результат = Новый Структура("Расписание, Выполнено, Ошибка", Неопределено, "", "");
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.CRM_РасчетСтатусовРаботыСКлиентами);
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ПараметрыЗадания.Вставить("ИмяМетода", Метаданные.РегламентныеЗадания.CRM_РасчетСтатусовРаботыСКлиентами.ИмяМетода);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
	Если СписокЗаданий.Количество() > 0 Тогда
		Результат.Расписание = СписокЗаданий[0].Расписание;
		
		ПоследнееЗаданиеЗполнено = Ложь;
		Если (ТипЗнч(СписокЗаданий) = Тип("Массив") 
				И ТипЗнч(СписокЗаданий[0]) = Тип("РегламентноеЗадание"))
			Или (ТипЗнч(СписокЗаданий) = Тип("ТаблицаЗначений")
				И СписокЗаданий.Колонки.Найти("ПоследнееЗадание") <> Неопределено) Тогда
			
			ПоследнееЗаданиеЗполнено = СписокЗаданий[0].ПоследнееЗадание <> Неопределено;
		КонецЕсли;
		
		Если ПоследнееЗаданиеЗполнено Тогда
			ИнформацияОбОшибке = СписокЗаданий[0].ПоследнееЗадание.ИнформацияОбОшибке;
			Если ИнформацияОбОшибке <> Неопределено Тогда
				Результат.Ошибка = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КонецЕсли;
			Результат.Выполнено = Строка(СписокЗаданий[0].ПоследнееЗадание.Состояние)
				+ " " + Строка(СписокЗаданий[0].ПоследнееЗадание.Конец);
		КонецЕсли;
	Иначе
		Результат.Расписание = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьРасписаниеНаСервере(Расписание)

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.CRM_РасчетСтатусовРаботыСКлиентами);
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ПараметрыЗадания.Вставить("ИмяМетода", Метаданные.РегламентныеЗадания.CRM_РасчетСтатусовРаботыСКлиентами.ИмяМетода);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
	Для Каждого Задание Из СписокЗаданий Цикл
		ПараметрыЗадания = Новый Структура("Использование", (Строка(Расписание) <> "один день; один раз в день"));
		ПараметрыЗадания.Вставить("Расписание", Расписание);
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьАвтоматическиеСтатусы()
    Запрос = Новый Запрос("ВЫБРАТЬ
                          |	CRM_СтатусыРаботыСКлиентом.Ссылка КАК Ссылка
                          |ИЗ
                          |	Справочник.CRM_СтатусыРаботыСКлиентом КАК CRM_СтатусыРаботыСКлиентом
                          |ГДЕ
                          |	CRM_СтатусыРаботыСКлиентом.СпособУстановки = &СпособУстановки
                          |	И НЕ CRM_СтатусыРаботыСКлиентом.ПометкаУдаления");
	Запрос.УстановитьПараметр("СпособУстановки", Перечисления.CRM_СпособыУстановкиСтатусаКлиента.Автоматически);
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

#КонецОбласти

