//@strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиОтчетаВФорме = КомпоновщикНастроек.ПолучитьНастройки();
	ДокументУсловийРетроБонусов = ДокументИзДополнительныхСвойствИлиПараметров(НастройкиОтчетаВФорме);
	
	Если НЕ ЗначениеЗаполнено(ДокументУсловийРетроБонусов) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = ЗначенияРеквизитовДокументаУсловий(ДокументУсловийРетроБонусов);
	Отказ = Ложь;
	РетроБонусыРасчет.ПроверитьРеквизитыУсловий(ЗначенияРеквизитов, Отказ, Истина);
	
	Если ЗначенияРеквизитов.Исправление = Истина Тогда
		ИсходныйДокумент = ЗначенияРеквизитов.ИсправляемыйДокумент; // ДокументСсылка.УсловияРетроБонусовПоставщика
	Иначе
		ИсходныйДокумент = ДокументУсловийРетроБонусов;
	КонецЕсли;
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОтчетаВФорме, "ИсходныйДокумент", ИсходныйДокумент);
	
	ПараметрыУсловийРетроБонусов = РетроБонусыРасчет.ПараметрыУсловийРетроБонусовПоставщиков(ИсходныйДокумент);
	
	ДокументНачисление = Документы.НачислениеРетроБонусовПоставщика.ПустаяСсылка();
	НастройкиОтчетаВФорме.ДополнительныеСвойства.Свойство("ДокументНачислениеРетроБонусов", ДокументНачисление);
	Если ЗначениеЗаполнено(ДокументНачисление) Тогда
		
		Отказ = Ложь;
		РеквизитыНачисления = ЗначенияРеквизитовДокументаНачисления(ДокументНачисление);
		ПроверитьРеквизитыНачисления(ПараметрыУсловийРетроБонусов, РеквизитыНачисления, Отказ, Истина);
		
	КонецЕсли;
	
	ДополнительныеСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	
	ПерваяКомпоновкаПриОткрытии = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеСвойства, "ПерваяКомпоновкаПриОткрытии", Ложь);
	
	ПараметрыВарианта = ПараметрыВарианта(НастройкиОтчетаВФорме, КомпоновщикНастроек);
	
	ПредыдущиеПараметрыУсловийРетроБонусов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеСвойства, "ПараметрыУсловийРетроБонусов", ПараметрыУсловийРетроБонусов); // Структура
	Если ПерваяКомпоновкаПриОткрытии Тогда
		ПредыдущиеПараметрыУсловийРетроБонусов = ПараметрыУсловийРетроБонусов;
	КонецЕсли;
	ИзменилисьПараметрыУсловий = РетроБонусыРасчет.ИзменилисьПараметрыУсловийРетроБонусов(
		ПредыдущиеПараметрыУсловийРетроБонусов, ПараметрыУсловийРетроБонусов);
	Если ИзменилисьПараметрыУсловий
	   И ПараметрыВарианта.ВариантМодифицированПользователем Тогда
		
		ВызватьИсключение НСтр("ru = 'Изменились реквизиты документа условий ретро-бонусов. Для актуализации варианта и настроек необходимо открыть отчет заново.'");
		
	КонецЕсли;
	
	ПараметрыЗамера = ПараметрыЗамераПроизводительности(ПараметрыУсловийРетроБонусов, ПараметрыВарианта);
	Если ПараметрыЗамера.Фиксировать Тогда
		Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(ПараметрыЗамера.КлючеваяОперация);
	КонецЕсли;
	
	Если ПерваяКомпоновкаПриОткрытии
	 ИЛИ ИзменилисьПараметрыУсловий Тогда
		
		КомпоновщикНастроекПоВарианту = Новый КомпоновщикНастроекКомпоновкиДанных;
		НастроитьСхемуКомпоновкиДанных(
			ПараметрыУсловийРетроБонусов,
			СхемаКомпоновкиДанных,
			КомпоновщикНастроекПоВарианту,
			НастройкиОтчетаВФорме,
			ПараметрыВарианта);
		НастройкиОтчета = КомпоновщикНастроекПоВарианту.ПолучитьНастройки();
		
		РетроБонусыРасчет.ПеренестиИспользуемыеОтборы(НастройкиОтчета, НастройкиОтчетаВФорме);
		РетроБонусыРасчет.СохранитьПараметрыУсловийРетроБонусов(ПараметрыУсловийРетроБонусов, ДополнительныеСвойства);
		
	Иначе
		
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
		// Для заполнения флагов в ПараметрыВарианта
		ВариантОтчетаПоУсловиям(ПараметрыУсловийРетроБонусов, ПараметрыВарианта);
		
	КонецЕсли;
	
	ТаблицаПоставщиков = Отчеты.РасчетРетроБонусовПоставщиков.ПредварительнаяТаблицаПоставщиков(ИсходныйДокумент);
	ТекстЗапроса = Отчеты.РасчетРетроБонусовПоставщиков.ТекстЗапроса(
		ПараметрыУсловийРетроБонусов, ПараметрыВарианта, ТаблицаПоставщиков);
	СхемаКомпоновкиДанных.НаборыДанных.РасчетРетроБонусовПоставщиков.Запрос = ТекстЗапроса;
	
	КомпоновкаДанныхКлиентСервер.ЗаполнитьЭлементы(
		НастройкиОтчета.ПараметрыДанных,
		НастройкиОтчетаВФорме.ПараметрыДанных);
	
	Если ПараметрыУсловийРетроБонусов.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки Тогда
		
		ПараметрДатаОстатков = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "ДатаОстатков");
		Если ПараметрДатаОстатков <> Неопределено Тогда
			ДатаОстатков = ПараметрДатаОстатков.Значение; // Дата
		Иначе
			ДатаОстатков = '00010101';
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДатаОстатков) Тогда
			ДатаОстатков = ПараметрыУсловийРетроБонусов.ДатаОстатков;
		КонецЕсли;
		Если ПерваяКомпоновкаПриОткрытии
		 ИЛИ ИзменилисьПараметрыУсловий
		 ИЛИ ПараметрыВарианта.ЭтоРасшифровка Тогда
			ДатаОстатков = ПараметрыУсловийРетроБонусов.ДатаОстатков;
		КонецЕсли;
		ДатаОстатков = КонецДня(ДатаОстатков);
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОтчета, "ДатаОстатков", ДатаОстатков);
		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
			НастройкиОтчета, "КонтрагентПоставщик", ПараметрыУсловийРетроБонусов.Контрагент, Истина);
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
			НастройкиОтчета, "ПартнерПоставщик", ПараметрыУсловийРетроБонусов.Партнер, Истина);
		
	Иначе
		
		Если ПараметрыВарианта.ЭтоРасшифровка Тогда
			
			// для расшифровки период всегда равен периоду исходного отчета
			ПараметрДатаНачала = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчетаВФорме, "ДатаНачала");
			ПараметрДатаОкончания = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчетаВФорме, "ДатаОкончания");
			ПериодОтчета = Новый СтандартныйПериод(ПараметрДатаНачала.Значение, ПараметрДатаОкончания.Значение);
			
			ИменаПараметров = ИменаПараметровДляРасшифровки();
			Для Каждого ИмяПараметра Из ИменаПараметров Цикл
				ПрименитьПараметрИзНастроекФормы(НастройкиОтчета, НастройкиОтчетаВФорме, ИмяПараметра);
			КонецЦикла;
			
			ПрименитьПараметрыРасшифровки(ПараметрыУсловийРетроБонусов, НастройкиОтчета);
			
		Иначе
			
			ПараметрПериодОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "ПериодОтчета");
			Если ПараметрПериодОтчета <> Неопределено Тогда
				ПериодОтчета = ПараметрПериодОтчета.Значение; // СтандартныйПериод
			Иначе
				ПериодОтчета = Новый СтандартныйПериод;
			КонецЕсли;
			
			РетроБонусыРасчет.ПроверитьИсправитьПериодОтчета(ПериодОтчета, ПараметрыУсловийРетроБонусов);
			
		КонецЕсли;
		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек.ПользовательскиеНастройки, "ПериодОтчета", ПериодОтчета);
		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
			НастройкиОтчета, "ПериодОтчета", ПериодОтчета);
		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
			НастройкиОтчета, "ДатаНачала", ПериодОтчета.ДатаНачала);
		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
			НастройкиОтчета, "ДатаОкончания", КонецДня(ПериодОтчета.ДатаОкончания));
		
	КонецЕсли;
	
	СписокОрганизаций = Новый СписокЗначений(); // СписокЗначений Из СправочникСсылка.Организации
	СписокОрганизаций.Добавить(ПараметрыУсловийРетроБонусов.Организация);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
		НастройкиОтчета, "Организация", СписокОрганизаций);
	
	ИсключаемыеХозяйственныеОперации = Отчеты.РасчетРетроБонусовПоставщиков.ИсключаемыеХозяйственныеОперации();
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
		НастройкиОтчета, "ИсключаемыеХозяйственныеОперации", ИсключаемыеХозяйственныеОперации);
	
	ИсключаемыеНастройкиХозОпераций = Отчеты.РасчетРетроБонусовПоставщиков.ИсключаемыеНастройкиХозяйственныхОпераций();
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
		НастройкиОтчета, "ИсключаемыеНастройкиХозяйственныхОпераций", ИсключаемыеНастройкиХозОпераций);
	
	Если ПерваяКомпоновкаПриОткрытии
	 ИЛИ ИзменилисьПараметрыУсловий Тогда
		
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
		ДополнительныеСвойства.Вставить("ВариантМодифицирован", Истина);
		ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
		Если ИзменилисьПараметрыУсловий Тогда
			ДополнительныеСвойства.Вставить("ПерваяКомпоновкаПриОткрытии", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	КлючВариантаРасшифровкиПоНоменклатуре = КлючВариантаРасшифровкиПоНоменклатуре(ПараметрыУсловийРетроБонусов);
	ДополнительныеСвойства.Вставить("КлючВариантаРасшифровкиПоНоменклатуре", КлючВариантаРасшифровкиПоНоменклатуре);
	КлючВариантаРасшифровкиПоДокументам = КлючВариантаРасшифровкиПоДокументам(ПараметрыУсловийРетроБонусов);
	ДополнительныеСвойства.Вставить("КлючВариантаРасшифровкиПоДокументам", КлючВариантаРасшифровкиПоДокументам);
	ДополнительныеСвойства.Вставить("ТипБонуса", ПараметрыУсловийРетроБонусов.ТипБонуса);
	
	// На время формирования включаем доступность служебных параметров для вывода в шапку отчета
	СлужебныеПараметры = ИменаСлужебныхПараметров(ПараметрыУсловийРетроБонусов);
	Для Каждого ИмяПараметра Из СлужебныеПараметры Цикл
		СхемаКомпоновкиДанных.Параметры[ИмяПараметра].ОграничениеИспользования = Ложь;
	КонецЦикла;
	
	Если ПараметрыЗамера.Фиксировать Тогда
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(Замер, 0, "Настройка");
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	МенеджерВТ = ВнешниеВременныеТаблицыДляОтчета(ИсходныйДокумент, ПараметрыУсловийРетроБонусов, Замер, ТаблицаПоставщиков);
	
	Если ПараметрыЗамера.Фиксировать Тогда
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(Замер, 0, "ПодготовкаДанных");
	КонецЕсли;
	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина,, МенеджерВТ);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	// отключение доступности служебных параметров для скрытия из формы настроек
	Для Каждого ИмяПараметра Из СлужебныеПараметры Цикл
		СхемаКомпоновкиДанных.Параметры[ИмяПараметра].ОграничениеИспользования = Истина;
	КонецЦикла;
	
	ОтчетПустой = ОтчетыСервер.ОтчетПустой(ЭтотОбъект, ПроцессорКомпоновки);
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", ОтчетПустой);
	
	Если ПараметрыЗамера.Фиксировать Тогда
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
			Замер, ДокументРезультат.ВысотаТаблицы / ПараметрыЗамера.Делитель, "Компоновка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - Форма отчета или форма настроек отчета.
//       Неопределено когда вызов без контекста.
//   КлючВарианта - Строка, Неопределено - Имя предопределенного
//       или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов без контекста.
//   Настройки - См. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.ФормироватьСразу = Истина;
	Настройки.РазрешеноИзменятьСтруктуру = Истина;
	Настройки.РазрешеноВыбиратьИНастраиватьВариантыБезСохранения = Истина;
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПередЗагрузкойВариантаНаСервере = Истина;
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - См. ОбщаяФорма.ФормаОтчета
//   Отказ - Булево - Признак отказа от создания формы.
//      См. описание одноименного параметра "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//   СтандартнаяОбработка - Булево - Признак выполнения стандартной (системной) обработки события.
//      См. описание одноименного параметра "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
// См. также:
//   Процедура для вывода добавленных команд в форму: ОтчетыСервер.ВывестиКоманду().
//   Глобальный обработчик этого события: ОтчетыПереопределяемый.ПриСозданииНаСервере().
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = Форма.Параметры;
	ЗначенияРеквизитовУсловий = Неопределено;
	
	ВариантыРасшифровкиПоДокументам = ИменаВариантовРасшифровкиПоДокументам();
	ВариантыРасшифровкиПоНоменклатуре = ИменаВариантовРасшифровкиПоНоменклатуре();
	КлючТекущегоВарианта = Форма.КлючТекущегоВарианта; // Строка
	ЭтоРасшифровка = (ВариантыРасшифровкиПоДокументам.Найти(КлючТекущегоВарианта) <> Неопределено)
		ИЛИ (ВариантыРасшифровкиПоНоменклатуре.Найти(КлючТекущегоВарианта) <> Неопределено);
	
	Если НЕ Параметры.Свойство("ПараметрКоманды")
	   И НЕ Форма.РежимРасшифровки
	   И НЕ ЭтоРасшифровка Тогда
		
		Отказ = Истина;
		СинонимДокумента = Метаданные.Документы.УсловияРетроБонусовПоставщика.Синоним;
		ШаблонОшибки = НСтр("ru= 'Отчет предназначен только для открытия из документа ""%1"".'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, СинонимДокумента);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	// Помещаем параметры в реквизиты формы отчета
	ДобавляемыеРеквизитыФормы = Новый Массив(); // Массив из РеквизитФормы
	
	ТипСсылкаНаДокументУсловий = Новый ОписаниеТипов("ДокументСсылка.УсловияРетроБонусовПоставщика");
	РеквизитДокументУсловий = Новый РеквизитФормы("ДокументУсловийРетроБонусов", ТипСсылкаНаДокументУсловий);
	ДобавляемыеРеквизитыФормы.Добавить(РеквизитДокументУсловий);
	
	ТипСсылкаНаДокументНачисление = Новый ОписаниеТипов("ДокументСсылка.НачислениеРетроБонусовПоставщика");
	РеквизитДокументНачисление = Новый РеквизитФормы("ДокументНачислениеРетроБонусов", ТипСсылкаНаДокументНачисление);
	ДобавляемыеРеквизитыФормы.Добавить(РеквизитДокументНачисление);
	
	РеквизитОчищатьПериод = Новый РеквизитФормы("ОчищатьПериодПользовательскихНастроек", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизитыФормы.Добавить(РеквизитОчищатьПериод);
	
	РеквизитПерваяКомпоновкаПриОткрытии = Новый РеквизитФормы("ПерваяКомпоновкаПриОткрытии", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизитыФормы.Добавить(РеквизитПерваяКомпоновкаПриОткрытии);
	
	ТипПеречислениеТипыРетроБонуса = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРетроБонусовПоставщиков");
	РеквизитТипРетроБонуса = Новый РеквизитФормы("ТипРетроБонуса", ТипПеречислениеТипыРетроБонуса);
	ДобавляемыеРеквизитыФормы.Добавить(РеквизитТипРетроБонуса);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизитыФормы);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ПерваяКомпоновкаПриОткрытии", Истина);
	
	Если Параметры.Свойство("ПараметрКоманды") Тогда
		
		ДокументНачисление = Документы.НачислениеРетроБонусовПоставщика.ПустаяСсылка();
		ТипПараметра = ТипЗнч(Параметры.ПараметрКоманды);
		Если ТипПараметра = Тип("ДокументСсылка.УсловияРетроБонусовПоставщика") Тогда
			
			ДокументУсловийРетроБонусов = Параметры.ПараметрКоманды; // ДокументСсылка.УсловияРетроБонусовПоставщика
			
		ИначеЕсли ТипПараметра = Тип("ДокументСсылка.НачислениеРетроБонусовПоставщика") Тогда
			
			ДокументНачисление = Параметры.ПараметрКоманды; // ДокументСсылка.НачислениеРетроБонусовПоставщика
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
				Форма, "ДокументНачислениеРетроБонусов", ДокументНачисление);
			РеквизитыНачисления = ЗначенияРеквизитовДокументаНачисления(ДокументНачисление);
			ДокументУсловийРетроБонусов = РеквизитыНачисления.ДокументУсловий;
			
		Иначе
			
			ШаблонОшибки = НСтр("ru = 'Некорректный тип параметра команды ""%1""'");
			ТипПараметраСтрокой = Строка(ТипПараметра);
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ТипПараметраСтрокой);
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
			Форма, "ОчищатьПериодПользовательскихНастроек", Истина);
		
		Если ЗначениеЗаполнено(ДокументНачисление) Тогда
			
			ЗначенияРеквизитовУсловий = ЗначенияРеквизитовДокументаУсловий(ДокументУсловийРетроБонусов);
			
			Если ЗначенияРеквизитовУсловий.Исправление = Истина Тогда
				ИсходныйДокумент = ЗначенияРеквизитовУсловий.ИсправляемыйДокумент;
			Иначе
				ИсходныйДокумент = ДокументУсловийРетроБонусов;
			КонецЕсли;
			ПараметрыУсловий = РетроБонусыРасчет.ПараметрыУсловийРетроБонусовПоставщиков(ИсходныйДокумент);
			ПроверитьРеквизитыНачисления(ПараметрыУсловий, РеквизитыНачисления, Отказ);
			
			КлючВарианта = КлючВариантаРасшифровкиНачислений(ПараметрыУсловий);
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "КлючТекущегоВарианта", КлючВарианта);
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "Параметры.КлючВарианта", КлючВарианта);
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
				Форма, "НастройкиОтчета.КлючПредопределенногоВарианта", КлючВарианта);
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
				Форма, "ФормаПараметры.НачальныйКлючВарианта", КлючВарианта);
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
				Форма, "ФормаПараметры.НачальныйКлючПредопределенногоВарианта", КлючВарианта);
			
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", РеквизитыНачисления.Организация);
			Отбор.Вставить("Валюта", РеквизитыНачисления.Валюта);
			Если ПараметрыУсловий.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки Тогда
				
				Отбор.Вставить("ДатаОстатков", ПараметрыУсловий.ДатаОстатков);
				
			Иначе
				
				ПериодОтчета = Новый СтандартныйПериод(РеквизитыНачисления.НачалоПериода, РеквизитыНачисления.ОкончаниеПериода);
				Отбор.Вставить("ПериодОтчета", ПериодОтчета);
				Отбор.Вставить("ДатаНачала", РеквизитыНачисления.НачалоПериода);
				Отбор.Вставить("ДатаОкончания", РеквизитыНачисления.ОкончаниеПериода);
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ФормаПараметры.Отбор", Отбор);
			
		КонецЕсли;
		
	ИначеЕсли Форма.РежимРасшифровки Тогда
		
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(Форма.Параметры.Расшифровка.Данные); // ДанныеРасшифровкиКомпоновкиДанных
		ПараметрДокументУсловий = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(
			ДанныеРасшифровки.Настройки, "ДокументУсловийРетроБонусов");
		ДокументУсловийРетроБонусов = ПараметрДокументУсловий.Значение; // ДокументСсылка.УсловияРетроБонусовПоставщика
		
	ИначеЕсли ЭтоРасшифровка Тогда
		
		ДокументУсловийРетроБонусов = Форма.ФормаПараметры.Отбор.ДокументУсловийРетроБонусов; // ДокументСсылка.УсловияРетроБонусовПоставщика
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
		Форма, "ДокументУсловийРетроБонусов", ДокументУсловийРетроБонусов);
	
	Если ЗначенияРеквизитовУсловий = Неопределено Тогда
		ЗначенияРеквизитовУсловий = ЗначенияРеквизитовДокументаУсловий(ДокументУсловийРетроБонусов);
	КонецЕсли;
	РетроБонусыРасчет.ПроверитьРеквизитыУсловий(ЗначенияРеквизитовУсловий, Отказ);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
		Форма, "ТипРетроБонуса", ЗначенияРеквизитовУсловий.ВидРетроБонусаТипБонуса);
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки для загрузки в компоновщик настроек.
//
// См. также:
//   "Расширение управляемой формы для отчета.ПриЗагрузкеВариантаНаСервере" в синтакс-помощнике.
//
Процедура ПередЗагрузкойВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	ДокументУсловийРетроБонусов = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
		Форма, "ДокументУсловийРетроБонусов");
	НовыеНастройкиКД.ДополнительныеСвойства.Вставить("ДокументУсловийРетроБонусов", ДокументУсловийРетроБонусов);
	
	ДокументНачисление = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
		Форма, "ДокументНачислениеРетроБонусов");
	НовыеНастройкиКД.ДополнительныеСвойства.Вставить("ДокументНачислениеРетроБонусов", ДокументНачисление);
	
	РежимРасшифровки = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
		Форма, "РежимРасшифровки");
	НовыеНастройкиКД.ДополнительныеСвойства.Вставить("РежимРасшифровки", РежимРасшифровки);
	
	ТипРетроБонуса = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
		Форма, "ТипРетроБонуса");
	НовыеНастройкиКД.ДополнительныеСвойства.Вставить("ТипРетроБонуса", ТипРетроБонуса);
	
КонецПроцедуры

// Вызывается перед загрузкой новых настроек. Используется для изменения схемы компоновки.
//   Например, если схема отчета зависит от ключа варианта или параметров отчета.
//   Чтобы изменения схемы вступили в силу следует вызывать метод ОтчетыСервер.ПодключитьСхему().
//
// Параметры:
//   Контекст - См. ОбщаяФорма.ФормаОтчета
//   КлючСхемы - Строка -
//       Идентификатор текущей схемы компоновщика настроек.
//       По умолчанию не заполнен (это означает что компоновщик инициализирован на основании основной схемы).
//       Используется для оптимизации, чтобы переинициализировать компоновщик как можно реже).
//       Может не использоваться, если переинициализация выполняется безусловно.
//   КлючВарианта - Строка, Неопределено -
//       Имя предопределенного или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено, когда вызов для варианта расшифровки или без контекста.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных, Неопределено -
//       Настройки варианта отчета, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено, когда настройки варианта не надо загружать (уже загружены ранее).
//   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных, Неопределено -
//       Пользовательские настройки, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено, когда пользовательские настройки не надо загружать (уже загружены ранее).
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	ПараметрыВарианта = ПараметрыВарианта(НовыеНастройкиКД, КомпоновщикНастроек);
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения")
	   И Контекст.ТипФормыОтчета = ТипФормыОтчета.Основная Тогда
		
		ДокументУсловийРетроБонусов = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
			Контекст, "ДокументУсловийРетроБонусов"); // ДокументСсылка.УсловияРетроБонусовПоставщика
		
		ПерваяКомпоновкаПриОткрытии = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
			Контекст, "ПерваяКомпоновкаПриОткрытии");
		Если ПерваяКомпоновкаПриОткрытии = Истина Тогда
			НовыеПользовательскиеНастройкиКД.ДополнительныеСвойства.Вставить("ПерваяКомпоновкаПриОткрытии", ПерваяКомпоновкаПриОткрытии);
		КонецЕсли;
		
		// Определяем нужный вариант и применяем настройки структуры
		
		Если ПерваяКомпоновкаПриОткрытии = Истина
		   И НЕ ПараметрыВарианта.РежимРасшифровки Тогда
		   
			ЗначенияРеквизитов = ЗначенияРеквизитовДокументаУсловий(ДокументУсловийРетроБонусов);
			Если ЗначенияРеквизитов.Исправление = Истина Тогда
				ИсходныйДокумент = ЗначенияРеквизитов.ИсправляемыйДокумент; // ДокументСсылка.УсловияРетроБонусовПоставщика
			Иначе
				ИсходныйДокумент = ДокументУсловийРетроБонусов;
			КонецЕсли;
			ПараметрыУсловийРетроБонусов = РетроБонусыРасчет.ПараметрыУсловийРетроБонусовПоставщиков(ИсходныйДокумент);
			
			КомпонуемыйВариантОтчета = ВариантОтчетаПоУсловиям(ПараметрыУсловийРетроБонусов, ПараметрыВарианта);
			НастройкиПоВарианту = КомпонуемыйВариантОтчета.Настройки;
			РетроБонусыРасчет.ПеренестиСтруктуруНастроекКомпоновки(НовыеНастройкиКД, НастройкиПоВарианту);
			
			НастроитьВидимостьКолонок(ПараметрыУсловийРетроБонусов, НовыеНастройкиКД, ПараметрыВарианта);
			
		КонецЕсли;
		
		// Для контекстного отчета очищаем сохраняемый в пользовательских настройках период, заполним по условиям РБ
		
		ОчищатьПериодПользовательскихНастроек = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
			Контекст, "ОчищатьПериодПользовательскихНастроек"); // Булево
		Контекстный = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
			Контекст, "НастройкиОтчета.Контекстный"); // Булево
		ТипРетроБонуса = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
			Контекст, "ТипРетроБонуса"); // ПеречислениеСсылка.ТипыРетроБонусовПоставщиков
		
		Если Контекстный
		   И ОчищатьПериодПользовательскихНастроек Тогда
			
			ПустаяДата = '00010101';
			
			ПериодОтчета = Новый СтандартныйПериод;
			ПериодОтчета.ДатаНачала = ПустаяДата;
			ПериодОтчета.ДатаОкончания = ПустаяДата;
			
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
				НовыеПользовательскиеНастройкиКД,
				"ПериодОтчета",
				ПериодОтчета,
				Истина);
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
				НовыеПользовательскиеНастройкиКД,
				"ДатаОстатков",
				ПустаяДата,
				Истина);
			
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
				Контекст, "ОчищатьПериодПользовательскихНастроек", Ложь);
			
		КонецЕсли;
		
		// Удаляем исходные отборы по партнеру/контрагенту из параметров формы, иначе они затирают пользовательские настройки
		
		Если НЕ ПерваяКомпоновкаПриОткрытии Тогда
			
			ИменаПараметров = ИменаПараметровДляРасшифровки();
			ИменаПараметров.Добавить("Валюта");
			ОтборФормы = Контекст.ФормаПараметры.Отбор; // Структура
			
			Для Каждого ИмяПараметра Из ИменаПараметров Цикл
				
				Если ОтборФормы.Свойство(ИмяПараметра) Тогда
					ОтборФормы.Удалить(ИмяПараметра);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Отключение пользовательской доступности параметров
		
		Если НЕ ПараметрыВарианта.ЭтоРасшифровка Тогда
			
			ИменаПараметров = ИменаПараметровДляРасшифровки();
			Для Каждого ИмяПараметра Из ИменаПараметров Цикл
				СхемаКомпоновкиДанных.Параметры[ИмяПараметра].ОграничениеИспользования = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
		ИменаПараметров = ИменаНедоступныхПараметров(ТипРетроБонуса);
		Для Каждого ИмяПараметра Из ИменаПараметров Цикл
			СхемаКомпоновкиДанных.Параметры[ИмяПараметра].ОграничениеИспользования = Истина;
		КонецЦикла;
		
		// Ограничение доступности полей
		
		НастроитьОграниченияИспользованияПолей(ТипРетроБонуса, СхемаКомпоновкиДанных);
		НастроитьТипыРегистраторов(ТипРетроБонуса, СхемаКомпоновкиДанных);
		
		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКомпоновкиДанных, КлючСхемы);
		
	КонецЕсли;
	
	// Отключение пользовательской настройки периода в расшифровке
	
	Если ПараметрыВарианта.ЭтоРасшифровка
	 ИЛИ ПараметрыВарианта.РежимРасшифровки = Истина Тогда
		
		ПараметрПериод = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НовыеНастройкиКД, "ПериодОтчета");
		Если ПараметрПериод <> Неопределено Тогда
			ПараметрПериод.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		
		ПараметрПериод = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НовыеПользовательскиеНастройкиКД, "ПериодОтчета");
		Если ПараметрПериод <> Неопределено Тогда
			ПараметрПериод.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыВарианта(НастройкиОтчетаВФорме, КомпоновщикНастроек)
	
	ПараметрыВарианта = РетроБонусыРасчет.НовыеПараметрыВарианта();
	КлючВарианта = НастройкиОтчетаВФорме.ДополнительныеСвойства.КлючВарианта; // Строка
	ПараметрыВарианта.КлючВарианта = КлючВарианта;
	
	ВариантыРасшифровкиПоДокументам = ИменаВариантовРасшифровкиПоДокументам();
	ВариантыРасшифровкиПоНоменклатуре = ИменаВариантовРасшифровкиПоНоменклатуре();
	
	ПараметрыВарианта.ЭтоРасшифровкаПоДокументам = (ВариантыРасшифровкиПоДокументам.Найти(КлючВарианта) <> Неопределено);
	ПараметрыВарианта.ЭтоРасшифровкаПоНоменклатуре = (ВариантыРасшифровкиПоНоменклатуре.Найти(КлючВарианта) <> Неопределено);
	ПараметрыВарианта.ЭтоРасшифровка = (ПараметрыВарианта.ЭтоРасшифровкаПоНоменклатуре
		ИЛИ ПараметрыВарианта.ЭтоРасшифровкаПоДокументам);
	
	РежимРасшифровки1 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		НастройкиОтчетаВФорме.ДополнительныеСвойства, "РежимРасшифровки", Ложь); // Булево
	РежимРасшифровки2 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		КомпоновщикНастроек.Настройки.ДополнительныеСвойства, "РежимРасшифровки", Ложь); // Булево
	ПараметрыВарианта.РежимРасшифровки = (РежимРасшифровки1 ИЛИ РежимРасшифровки2);
		
	Если ПараметрыВарианта.РежимРасшифровки Тогда
		
		Для Каждого ЭлементСтруктуры Из НастройкиОтчетаВФорме.Структура Цикл
			
			Если ТипЗнч(ЭлементСтруктуры) <> Тип("ГруппировкаКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				ПараметрыВарианта.ПоляРасшифровки.Добавить(ПолеГруппировки.Поле);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВариантМодифицирован = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства, "ВариантМодифицирован", Ложь); // Булево
	ПользовательскиеНастройкиМодифицированы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства, "ПользовательскиеНастройкиМодифицированы", Ложь); // Булево
	ПараметрыВарианта.ВариантМодифицированПользователем = (ВариантМодифицирован ИЛИ ПользовательскиеНастройкиМодифицированы);
	
	Возврат ПараметрыВарианта;
	
КонецФункции

Функция ДокументИзДополнительныхСвойствИлиПараметров(НастройкиОтчетаВФорме)
	
	ДокументУсловийРетроБонусов = Документы.УсловияРетроБонусовПоставщика.ПустаяСсылка();
	НастройкиОтчетаВФорме.ДополнительныеСвойства.Свойство("ДокументУсловийРетроБонусов", ДокументУсловийРетроБонусов);
	
	Если ДокументУсловийРетроБонусов <> Неопределено
	   И НЕ ДокументУсловийРетроБонусов.Пустая() Тогда
		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
			НастройкиОтчетаВФорме, "ДокументУсловийРетроБонусов", ДокументУсловийРетроБонусов);
		
	Иначе
		
		ПараметрДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДокументУсловийРетроБонусов");
		Если ПараметрДанных <> Неопределено Тогда
			ДокументУсловийРетроБонусов = ПараметрДанных.Значение; // ДокументСсылка.УсловияРетроБонусовПоставщика
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДокументУсловийРетроБонусов;
	
КонецФункции

Функция ЗначенияРеквизитовДокументаУсловий(ДокументУсловийРетроБонусов)
	
	Реквизиты = "Проведен, БезРасчета, Статус, Исправление, ИсправляемыйДокумент, ВидРетроБонуса.ТипБонуса";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументУсловийРетроБонусов, Реквизиты);
	Возврат ЗначенияРеквизитов;
	
КонецФункции

Функция ЗначенияРеквизитовДокументаНачисления(ДокументНачисление)
	
	Реквизиты = "Проведен, ДокументУсловий, Организация, Контрагент, Партнер, НачалоПериода, ОкончаниеПериода, Валюта";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументНачисление, Реквизиты);
	Возврат ЗначенияРеквизитов;
	
КонецФункции

Процедура ПроверитьРеквизитыНачисления(ПараметрыУсловий, РеквизитыНачисления, Отказ, ВызыватьИсключение = Ложь)
	
	ТекстСообщения = "";
	
	ПроверяемыеРеквизиты = Новый Массив; // Массив Из Строка
	ПроверяемыеРеквизиты.Добавить("ДокументУсловий");
	ПроверяемыеРеквизиты.Добавить("Валюта");
	
	Если ПараметрыУсловий.ТипБонуса <> Перечисления.ТипыРетроБонусовПоставщиков.Остатки Тогда
		
		ПроверяемыеРеквизиты.Добавить("НачалоПериода");
		ПроверяемыеРеквизиты.Добавить("ОкончаниеПериода");
		
	КонецЕсли;
	
	ШаблонОшибки = НСтр("ru = 'Не заполнено поле ""%1""'");
	
	Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
		
		Если ЗначениеЗаполнено(РеквизитыНачисления[ПроверяемыйРеквизит]) Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеРеквизита = Метаданные.Документы.НачислениеРетроБонусовПоставщика.Реквизиты.Найти(ПроверяемыйРеквизит);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, МетаданныеРеквизита.Синоним);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстСообщения;
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИменаСлужебныхПараметров(ПараметрыУсловийРетроБонусов)
	
	ИменаПараметров = Новый Массив; // Массив Из Строка
	ИменаПараметров.Добавить("Организация");
	ИменаПараметров.Добавить("ИсходныйДокумент");
	
	Если ПараметрыУсловийРетроБонусов.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки Тогда
		
		ИменаПараметров.Добавить("КонтрагентПоставщик");
		ИменаПараметров.Добавить("ПартнерПоставщик");
		
	КонецЕсли;
	
	Возврат ИменаПараметров;
	
КонецФункции

Функция ВнешниеВременныеТаблицыДляОтчета(ИсходныйДокумент, ПараметрыУсловийРетроБонусов, Замер, ТаблицаПоставщиков)
	
	МенеджерВТ = Неопределено;
	ТребуетсяПолучениеСоставаСегментовТоваров = (НЕ ПараметрыУсловийРетроБонусов.СегментыЗафиксированы)
		И ПараметрыУсловийРетроБонусов.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры;
	
	Если ТребуетсяПолучениеСоставаСегментовТоваров Тогда
		
		СоставСегментовТоваров = РетроБонусыСервер.СоставСегментовТоваров(ИсходныйДокумент);
		
		Запрос = Новый Запрос;
		Если МенеджерВТ = Неопределено Тогда
			МенеджерВТ = Новый МенеджерВременныхТаблиц();
		КонецЕсли;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.УстановитьПараметр("СоставСегментов", СоставСегментовТоваров);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ ВТ_СоставСегментовТоваров
		|ИЗ
		|	&СоставСегментов КАК СоставСегментов";
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.Выполнить();
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(Замер, 1, "ПолучениеСоставаСегментовТоваров");
		
	КонецЕсли;
	
	Если ПараметрыУсловийРетроБонусов.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Закупки Тогда
		
		Запрос = Новый Запрос;
		Если МенеджерВТ = Неопределено Тогда
			МенеджерВТ = Новый МенеджерВременныхТаблиц();
		КонецЕсли;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.УстановитьПараметр("ТаблицаПоставщиков", ТаблицаПоставщиков);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ ВТ_ПоставщикиПредварительно
		|ИЗ
		|	&ТаблицаПоставщиков КАК ТаблицаПоставщиков";
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Возврат МенеджерВТ;
	
КонецФункции

// Параметры:
//  ПараметрыУсловийРетроБонусов - См. РетроБонусыРасчет.ПараметрыУсловийРетроБонусовПоставщиков
//  ПараметрыВарианта - См. ПараметрыВарианта
// 
// Возвращаемое значение:
//  ВариантНастроекКомпоновкиДанных
//  
Функция ВариантОтчетаПоУсловиям(ПараметрыУсловийРетроБонусов, ПараметрыВарианта)
	
	ВариантыОтчета = СхемаКомпоновкиДанных.ВариантыНастроек;
	ТипБонуса = ПараметрыУсловийРетроБонусов.ТипБонуса;
	ТипБонусаПредставление = Строка(ТипБонуса);
	ТипыБонусов = Перечисления.ТипыРетроБонусовПоставщиков;
	ДетализацияРасчетаУчастников = ПараметрыУсловийРетроБонусов.ДетализацияРасчетаУчастников;
	ДетализацияРасчетаУчастниковПредставление = Строка(ДетализацияРасчетаУчастников);
	ВидыДетализацииРасчетаУчастников = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	
	Если ТипБонуса = ТипыБонусов.Продажи Тогда
		
		Если ДетализацияРасчетаУчастников = ВидыДетализацииРасчетаУчастников.ПоКонтрагенту Тогда
			
			Если ПараметрыВарианта.ЭтоРасшифровкаПоНоменклатуре
			 ИЛИ ПараметрыВарианта.РежимРасшифровки = Истина Тогда
				
				КомпонуемыйВариантОтчета = ВариантыОтчета.ПродажиРасшифровкаПоНоменклатуреПоПокупателям;
				ПараметрыВарианта.ДетализацияДоНоменклатуры = Истина;
				
			ИначеЕсли ПараметрыВарианта.ЭтоРасшифровкаПоДокументам Тогда
				КомпонуемыйВариантОтчета = ВариантыОтчета.ПродажиРасшифровкаПоДокументамПоПокупателям;
			Иначе
				КомпонуемыйВариантОтчета = ВариантыОтчета.ПродажиПоПокупателям;
			КонецЕсли;
			
		ИначеЕсли ДетализацияРасчетаУчастников = ВидыДетализацииРасчетаУчастников.ПустаяСсылка() Тогда
			
			Если ПараметрыВарианта.ЭтоРасшифровкаПоНоменклатуре Тогда
				
				КомпонуемыйВариантОтчета = ВариантыОтчета.ПродажиРасшифровкаПоНоменклатуреСводно;
				ПараметрыВарианта.ДетализацияДоНоменклатуры = Истина;
				
			ИначеЕсли ПараметрыВарианта.ЭтоРасшифровкаПоДокументам Тогда
				КомпонуемыйВариантОтчета = ВариантыОтчета.ПродажиРасшифровкаПоДокументамСводно;
			Иначе
				
				КомпонуемыйВариантОтчета = ВариантыОтчета.ПродажиСводно;
				ПараметрыВарианта.ДетализацияДоНоменклатуры = Истина;
				
			КонецЕсли;
			
		Иначе
			
			ШаблонОшибки = НСтр("ru = 'Неизвестная детализация расчета по участникам ""%1"" для документа ""%2""'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				ДетализацияРасчетаУчастниковПредставление,
				ПараметрыУсловийРетроБонусов.ДокументУсловийРетроБонусовПредставление);
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
	ИначеЕсли ТипБонуса = ТипыБонусов.Закупки Тогда
		
		Если ПараметрыВарианта.ЭтоРасшифровкаПоДокументам Тогда
			КомпонуемыйВариантОтчета = ВариантыОтчета.ЗакупкиРасшифровкаПоДокументам;
		Иначе
			
			КомпонуемыйВариантОтчета = ВариантыОтчета.Закупки;
			ПараметрыВарианта.ДетализацияДоНоменклатуры = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипБонуса = ТипыБонусов.Остатки Тогда
		
		КомпонуемыйВариантОтчета = ВариантыОтчета.Остатки;
		ПараметрыВарианта.ДетализацияДоНоменклатуры = Истина;
		
	Иначе
		
		ШаблонОшибки = НСтр("ru = 'Неизвестный тип бонуса ""%1"" для документа ""%2""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки,
			ТипБонусаПредставление,
			ПараметрыУсловийРетроБонусов.ДокументУсловийРетроБонусовПредставление);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Возврат КомпонуемыйВариантОтчета;
	
КонецФункции

Процедура НастроитьСхемуКомпоновкиДанных(ПараметрыУсловийРетроБонусов, СхемаКомпоновкиДанных, КомпоновщикНастроекПоВарианту, НастройкиОтчетаВФорме, ПараметрыВарианта)
	
	КомпонуемыйВариантОтчета = ВариантОтчетаПоУсловиям(ПараметрыУсловийРетроБонусов, ПараметрыВарианта);
	
	КомпоновщикНастроекПоВарианту.ЗагрузитьНастройки(КомпонуемыйВариантОтчета.Настройки);
	
	ИсточникДоступныхНастроекКД = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	КомпоновщикНастроекПоВарианту.Инициализировать(ИсточникДоступныхНастроекКД);
	ПараметрыВывода = КомпоновщикНастроекПоВарианту.Настройки.ПараметрыВывода;
	
	// переносим установленные параметры вывода из настроек отчета в форме
	
	Для каждого ПараметрВыводаПоУмолчанию Из НастройкиОтчетаВФорме.ПараметрыВывода.Элементы Цикл
		
		Если НЕ ПараметрВыводаПоУмолчанию.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрВывода = ПараметрыВывода.НайтиЗначениеПараметра(ПараметрВыводаПоУмолчанию.Параметр);
		Если ПараметрВывода = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ПараметрВывода, ПараметрВыводаПоУмолчанию);
		
	КонецЦикла;
	
	// переносим настройку структуры из настроек компоновки формы в текущие настройки
	
	Если ПараметрыВарианта.ВариантМодифицированПользователем
	 ИЛИ ПараметрыВарианта.РежимРасшифровки Тогда
		
		РетроБонусыРасчет.ПеренестиСтруктуруНастроекКомпоновки(КомпоновщикНастроекПоВарианту.Настройки, НастройкиОтчетаВФорме);
		
	КонецЕсли;
	
	// настраиваем заголовок
	
	ПараметрВывода = ПараметрыВывода.Элементы.Найти("Title");
	Если ПараметрыВарианта.ЭтоРасшифровка Тогда
		ПараметрВывода.Значение = "";
		ПараметрВывода.Использование = Ложь;
	Иначе
		ПараметрВывода.Значение = ЗаголовокОтчета(ПараметрыУсловийРетроБонусов);
		ПараметрВывода.Использование = Истина;
	КонецЕсли;
	
	НастроитьВидимостьКолонок(ПараметрыУсловийРетроБонусов, КомпоновщикНастроекПоВарианту.Настройки, ПараметрыВарианта);
	
	НастроитьЗаголовкиКолонок(ПараметрыУсловийРетроБонусов, КомпоновщикНастроекПоВарианту, ПараметрыВарианта);
	
КонецПроцедуры

Функция ЗаголовокОтчета(ПараметрыУсловийРетроБонусов)
	
	ЗаголовокОтчета = НСтр("ru = 'Расчет ретро-бонусов поставщика'");
	Возврат ЗаголовокОтчета;
	
КонецФункции

Процедура НастроитьВидимостьКолонок(ПараметрыУсловийРетроБонусов, Настройки, ПараметрыВарианта)
	
	ЦелевыеПоказатели = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам;
	БазаРасчета = ПараметрыУсловийРетроБонусов.БазаРасчета;
	ВидыБазыРасчета = Перечисления.БазыРасчетаРетроБонусов;
	
	ВидимостьКолонок = Новый Структура;
	ВидимостьКолонок.Вставить("СуммаОборотСНДС", Ложь);
	ВидимостьКолонок.Вставить("СуммаОборотБезНДС", Ложь);
	ВидимостьКолонок.Вставить("СуммаВБазовыхЦенах", Ложь);
	ВидимостьКолонок.Вставить("СуммаПлан", Ложь);
	ВидимостьКолонок.Вставить("КоличествоПлан", Ложь);
	ВидимостьКолонок.Вставить("БазоваяЦена", Ложь);
	ВидимостьКолонок.Вставить("КоличествоПакетов", Ложь);
	ВидимостьКолонок.Вставить("КоличествоОстаток", Ложь);
	ВидимостьКолонок.Вставить("СуммаБонусаЗаЕдиницу", Ложь);
	
	Если БазаРасчета = ВидыБазыРасчета.ВыручкаБазовыеЦены
	 ИЛИ БазаРасчета = ВидыБазыРасчета.СуммаЗакупкиБазовыеЦены Тогда
		
		ВидимостьКолонок.СуммаВБазовыхЦенах = Истина;
		ВидимостьКолонок.БазоваяЦена = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(БазаРасчета) Тогда
		
		Если ПараметрыУсловийРетроБонусов.УчитыватьНДС Тогда
			ВидимостьКолонок.СуммаОборотСНДС = Истина;
		Иначе
			ВидимостьКолонок.СуммаОборотБезНДС = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыУсловийРетроБонусов.ПоказательТоваров = ЦелевыеПоказатели.Сумма Тогда
		
		ВидимостьКолонок.СуммаПлан = Истина;
		
	ИначеЕсли ПараметрыУсловийРетроБонусов.ПоказательТоваров = ЦелевыеПоказатели.Количество
	      ИЛИ ПараметрыУсловийРетроБонусов.ПоказательТоваров = ЦелевыеПоказатели.КоличествоСовокупно
	      ИЛИ ПараметрыУсловийРетроБонусов.ПоказательТоваров = ЦелевыеПоказатели.ПакетноеПредложение Тогда
		
		ВидимостьКолонок.КоличествоПлан = Истина;
		
	КонецЕсли;
	
	Если ПараметрыУсловийРетроБонусов.ПоказательТоваров = ЦелевыеПоказатели.ПакетноеПредложение Тогда
		ВидимостьКолонок.КоличествоПакетов = Истина;
	КонецЕсли;
	
	Если ПараметрыУсловийРетроБонусов.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки Тогда
		
		ВидимостьКолонок.КоличествоПлан = Истина;
		ВидимостьКолонок.КоличествоОстаток = Истина;
		ВидимостьКолонок.СуммаБонусаЗаЕдиницу = Истина;
		
	КонецЕсли;
	
	Для Каждого ЭлементВидимостиКолонок Из ВидимостьКолонок Цикл
		
		Если ЭлементВидимостиКолонок.Значение Тогда
			Продолжить;
		КонецЕсли;
		
		ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ЭлементВидимостиКолонок.Ключ);
		
		Если РетроБонусыРасчет.ЭтоПолеРасшифровки(ПараметрыВарианта, ПолеКомпоновки) Тогда
			Продолжить;
		КонецЕсли;
		
		РетроБонусыРасчет.ОтключитьИспользованиеВыбранногоПоля(Настройки.Выбор.Элементы, ПолеКомпоновки);
		Для Каждого СтруктураНастроек Из Настройки.Структура Цикл
			РетроБонусыРасчет.ОтключитьИспользованиеПоля(СтруктураНастроек, ПолеКомпоновки);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьЗаголовкиКолонок(ПараметрыУсловийРетроБонусов, КомпоновщикНастроекПоВарианту, ПараметрыВарианта)
	
	ТипБонуса = ПараметрыУсловийРетроБонусов.ТипБонуса;
	ТипБонусаПредставление = Строка(ТипБонуса);
	ТипыБонусов = Перечисления.ТипыРетроБонусовПоставщиков;
	
	ЗаголовкиКолонок = Новый Структура;
	ЗаголовкиКолонок.Вставить("СуммаОборотСНДС", "");
	ЗаголовкиКолонок.Вставить("СуммаОборотБезНДС", "");
	ЗаголовкиКолонок.Вставить("СуммаВБазовыхЦенах", "");
	
	Если ТипБонуса = ТипыБонусов.Продажи Тогда
		
		ЗаголовкиКолонок.СуммаОборотСНДС = НСтр("ru = 'Выручка (с НДС)'");
		ЗаголовкиКолонок.СуммаОборотБезНДС = НСтр("ru = 'Выручка (без НДС)'");
		ЗаголовкиКолонок.СуммаВБазовыхЦенах = НСтр("ru = 'Выручка в базовых ценах'");
		
	ИначеЕсли ТипБонуса = ТипыБонусов.Закупки
	      Или ТипБонуса = ТипыБонусов.Остатки Тогда
		
		ЗаголовкиКолонок.СуммаОборотСНДС = НСтр("ru = 'Сумма закупки (с НДС)'");
		ЗаголовкиКолонок.СуммаОборотБезНДС = НСтр("ru = 'Сумма закупки (без НДС)'");
		ЗаголовкиКолонок.СуммаВБазовыхЦенах = НСтр("ru = 'Сумма закупки в базовых ценах'");
	
	Иначе
		
		ШаблонОшибки = НСтр("ru = 'Неизвестный тип бонуса ""%1"" для документа ""%2""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки,
			ТипБонусаПредставление,
			ПараметрыУсловийРетроБонусов.ДокументУсловийРетроБонусовПредставление);
		ВызватьИсключение ТекстОшибки;
	
	КонецЕсли;
	
	Для Каждого ЭлементЗаголовкаКолонки Из ЗаголовкиКолонок Цикл
		
		Заголовок = ЭлементЗаголовкаКолонки.Значение; // Строка
		ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ЭлементЗаголовкаКолонки.Ключ);
		
		Для Каждого ВыбранноеПоле Из КомпоновщикНастроекПоВарианту.Настройки.Выбор.Элементы Цикл
			
			Если ТипЗнч(ВыбранноеПоле) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыбранноеПоле.Поле = ПолеКомпоновки Тогда
				ВыбранноеПоле.Заголовок = Заголовок;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьОграниченияИспользованияПолей(ТипБонуса, СхемаКомпоновкиДанных)
	
	ТипыБонуса = Перечисления.ТипыРетроБонусовПоставщиков;
	
	ДоступностьКолонок = Новый Структура;
	ДоступностьКолонок.Вставить("КонтрагентПокупатель", Ложь);
	ДоступностьКолонок.Вставить("КонтрагентПоставщик", Ложь);
	ДоступностьКолонок.Вставить("ПартнерПоставщик", Ложь);
	ДоступностьКолонок.Вставить("Склад", Ложь);
	ДоступностьКолонок.Вставить("ДокументРегистратор", Ложь);
	
	Если ТипБонуса = ТипыБонуса.Продажи Тогда
		
		ДоступностьКолонок.КонтрагентПокупатель = Истина;
		ДоступностьКолонок.ДокументРегистратор = Истина;
		
	ИначеЕсли ТипБонуса = ТипыБонуса.Закупки Тогда
		
		ДоступностьКолонок.КонтрагентПоставщик = Истина;
		ДоступностьКолонок.ПартнерПоставщик = Истина;
		ДоступностьКолонок.ДокументРегистратор = Истина;
		
	ИначеЕсли ТипБонуса = ТипыБонуса.Остатки Тогда
		
		ДоступностьКолонок.КонтрагентПоставщик = Истина;
		ДоступностьКолонок.ПартнерПоставщик = Истина;
		ДоступностьКолонок.Склад = Истина;
		
	Иначе
		
		ШаблонОшибки = НСтр("ru = 'Некорректный тип бонуса ""%1""'");
		ТипБонусаСтрокой = Строка(ТипБонуса);
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ТипБонусаСтрокой);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ПоляНабораДанных = СхемаКомпоновкиДанных.НаборыДанных.Найти("РасчетРетроБонусовПоставщиков").Поля;
	
	Для Каждого ЭлементДоступностиКолонок Из ДоступностьКолонок Цикл
		
		ПолеНабораДанных = ПоляНабораДанных.Найти(ЭлементДоступностиКолонок.Ключ);
		Если ПолеНабораДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОграничениеДоступности = НЕ ЭлементДоступностиКолонок.Значение;
		
		ПолеНабораДанных.ОграничениеИспользования.Группировка = ОграничениеДоступности;
		ПолеНабораДанных.ОграничениеИспользования.Условие = ОграничениеДоступности;
		ПолеНабораДанных.ОграничениеИспользования.Порядок = ОграничениеДоступности;
		ПолеНабораДанных.ОграничениеИспользования.Поле = ОграничениеДоступности;
		
		ПолеНабораДанных.ОграничениеИспользованияРеквизитов.Группировка = ОграничениеДоступности;
		ПолеНабораДанных.ОграничениеИспользованияРеквизитов.Условие = ОграничениеДоступности;
		ПолеНабораДанных.ОграничениеИспользованияРеквизитов.Порядок = ОграничениеДоступности;
		ПолеНабораДанных.ОграничениеИспользованияРеквизитов.Поле = ОграничениеДоступности;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьТипыРегистраторов(ТипРетроБонуса, СхемаКомпоновкиДанных)
	
	ТипыБонуса = Перечисления.ТипыРетроБонусовПоставщиков;
	
	Если ТипРетроБонуса = ТипыБонуса.Продажи Тогда
		
		ТипыРегистраторов = Новый Массив; // Массив Из ОбъектМетаданныхДокумент
		ТипыРегистраторов.Добавить(Метаданные.Документы.РеализацияТоваровУслуг);
		ТипыРегистраторов.Добавить(Метаданные.Документы.КорректировкаРеализации);
		ТипыРегистраторов.Добавить(Метаданные.Документы.АктВыполненныхРабот);
		ТипыРегистраторов.Добавить(Метаданные.Документы.ВозвратТоваровОтКлиента);
		
	ИначеЕсли ТипРетроБонуса = ТипыБонуса.Закупки Тогда
		
		ТипыРегистраторов = Отчеты.РасчетРетроБонусовПоставщиков.ТипыРегистраторовВыборкиЗакупок();
	
	ИначеЕсли ТипРетроБонуса = ТипыБонуса.Остатки Тогда
		
		ТипыРегистраторов = Новый Массив; // Массив Из ОбъектМетаданныхДокумент
	
	Иначе
		
		ШаблонОшибки = НСтр("ru = 'Некорректный тип бонуса ""%1""'");
		ТипБонусаСтрокой = Строка(ТипРетроБонуса);
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ТипБонусаСтрокой);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ТипыСсылокРегистраторов = Новый Массив; // Массив Из Тип
	Для Каждого МетаданныеРегистратора Из ТипыРегистраторов Цикл
		
		ТипСсылкиРегистратора = Тип("ДокументСсылка." + МетаданныеРегистратора.Имя);
		ТипыСсылокРегистраторов.Добавить(ТипСсылкиРегистратора);
		
	КонецЦикла;
	
	ОписаниеТиповРегистратора = Новый ОписаниеТипов(ТипыСсылокРегистраторов);
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Найти("РасчетРетроБонусовПоставщиков");
	ПолеРегистратор = НаборДанных.Поля.Найти("ДокументРегистратор");
	ПолеРегистратор.ТипЗначения = ОписаниеТиповРегистратора;
	
КонецПроцедуры

Функция ИменаВариантовРасшифровкиПоДокументам()
	
	ВариантыРасшифровкиПоДокументам = Новый Массив; // Массив Из Строка
	ВариантыРасшифровкиПоДокументам.Добавить("ПродажиРасшифровкаПоДокументамПоПокупателям");
	ВариантыРасшифровкиПоДокументам.Добавить("ПродажиРасшифровкаПоДокументамСводно");
	ВариантыРасшифровкиПоДокументам.Добавить("ЗакупкиРасшифровкаПоДокументам");
	Возврат ВариантыРасшифровкиПоДокументам;
	
КонецФункции

Функция ИменаВариантовРасшифровкиПоНоменклатуре()
	
	ВариантыРасшифровкиПоНоменклатуре = Новый Массив; // Массив Из Строка
	ВариантыРасшифровкиПоНоменклатуре.Добавить("ПродажиРасшифровкаПоНоменклатуреПоПокупателям");
	ВариантыРасшифровкиПоНоменклатуре.Добавить("ПродажиРасшифровкаПоНоменклатуреСводно");
	Возврат ВариантыРасшифровкиПоНоменклатуре;
	
КонецФункции

Функция ИменаПараметровДляРасшифровки()
	
	ИменаПараметров = Новый Массив; // Массив Из Строка
	ИменаПараметров.Добавить("КонтрагентПокупатель");
	ИменаПараметров.Добавить("КонтрагентПоставщик");
	ИменаПараметров.Добавить("ПартнерПоставщик");
	ИменаПараметров.Добавить("Партнер");
	ИменаПараметров.Добавить("Контрагент");
	Возврат ИменаПараметров;
	
КонецФункции

Функция ИменаНедоступныхПараметров(ТипБонуса)
	
	ИменаПараметров = Новый Массив; // Массив Из Строка
	
	Если ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Продажи Тогда
		
		ИменаПараметров.Добавить("Партнер");
		
	КонецЕсли;
	
	Если ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки Тогда
		
		ИменаПараметров.Добавить("ПериодОтчета");
		
	Иначе
		
		ИменаПараметров.Добавить("ДатаОстатков");
		
	КонецЕсли;
	
	Возврат ИменаПараметров;
	
КонецФункции

Функция КлючВариантаРасшифровкиПоНоменклатуре(ПараметрыУсловийРетроБонусов)
	
	ТипБонуса = ПараметрыУсловийРетроБонусов.ТипБонуса;
	ТипБонусаПредставление = Строка(ТипБонуса);
	ТипыБонусов = Перечисления.ТипыРетроБонусовПоставщиков;
	
	ДетализацияРасчетаУчастников = ПараметрыУсловийРетроБонусов.ДетализацияРасчетаУчастников;
	ДетализацияРасчетаУчастниковПредставление = Строка(ДетализацияРасчетаУчастников);
	ВидыДетализацииРасчетаУчастников = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	
	Если ТипБонуса = ТипыБонусов.Продажи Тогда
		
		Если ДетализацияРасчетаУчастников = ВидыДетализацииРасчетаУчастников.ПоКонтрагенту Тогда
			
			КлючВарианта = "ПродажиРасшифровкаПоНоменклатуреПоПокупателям";
			
		ИначеЕсли ДетализацияРасчетаУчастников = ВидыДетализацииРасчетаУчастников.ПустаяСсылка() Тогда
			
			КлючВарианта = "ПродажиРасшифровкаПоНоменклатуреСводно";
			
		Иначе
			
			ШаблонОшибки = НСтр("ru = 'Неизвестная детализация расчета по участникам ""%1"" для документа ""%2""'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				ДетализацияРасчетаУчастниковПредставление,
				ПараметрыУсловийРетроБонусов.ДокументУсловийРетроБонусовПредставление);
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
	ИначеЕсли ТипБонуса = ТипыБонусов.Закупки Тогда
		
		КлючВарианта = "ЗакупкиРасшифровкаПоНоменклатуре";
		
	ИначеЕсли ТипБонуса = ТипыБонусов.Остатки Тогда
		
		КлючВарианта = "";
		
	Иначе
		
		ШаблонОшибки = НСтр("ru = 'Неизвестный тип бонуса ""%1"" для документа ""%2""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки,
			ТипБонусаПредставление,
			ПараметрыУсловийРетроБонусов.ДокументУсловийРетроБонусовПредставление);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Возврат КлючВарианта;
	
КонецФункции

Функция КлючВариантаРасшифровкиПоДокументам(ПараметрыУсловийРетроБонусов)
	
	ТипБонуса = ПараметрыУсловийРетроБонусов.ТипБонуса;
	ТипБонусаПредставление = Строка(ТипБонуса);
	ТипыБонусов = Перечисления.ТипыРетроБонусовПоставщиков;
	
	ДетализацияРасчетаУчастников = ПараметрыУсловийРетроБонусов.ДетализацияРасчетаУчастников;
	ДетализацияРасчетаУчастниковПредставление = Строка(ДетализацияРасчетаУчастников);
	ВидыДетализацииРасчетаУчастников = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	
	Если ТипБонуса = ТипыБонусов.Продажи Тогда
		
		Если ДетализацияРасчетаУчастников = ВидыДетализацииРасчетаУчастников.ПоКонтрагенту Тогда
			
			КлючВарианта = "ПродажиРасшифровкаПоДокументамПоПокупателям";
			
		ИначеЕсли ДетализацияРасчетаУчастников = ВидыДетализацииРасчетаУчастников.ПустаяСсылка() Тогда
			
			КлючВарианта = "ПродажиРасшифровкаПоДокументамСводно";
			
		Иначе
			
			ШаблонОшибки = НСтр("ru = 'Неизвестная детализация расчета по участникам ""%1"" для документа ""%2""'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				ДетализацияРасчетаУчастниковПредставление,
				ПараметрыУсловийРетроБонусов.ДокументУсловийРетроБонусовПредставление);
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
	ИначеЕсли ТипБонуса = ТипыБонусов.Закупки Тогда
		
		КлючВарианта = "ЗакупкиРасшифровкаПоДокументам";
		
	ИначеЕсли ТипБонуса = ТипыБонусов.Остатки Тогда
		
		КлючВарианта = "";
		
	Иначе
		
		ШаблонОшибки = НСтр("ru = 'Неизвестный тип бонуса ""%1"" для документа ""%2""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки,
			ТипБонусаПредставление,
			ПараметрыУсловийРетроБонусов.ДокументУсловийРетроБонусовПредставление);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Возврат КлючВарианта;
	
КонецФункции

Функция КлючВариантаРасшифровкиНачислений(ПараметрыУсловийРетроБонусов)
	
	ТипБонуса = ПараметрыУсловийРетроБонусов.ТипБонуса;
	ТипБонусаПредставление = Строка(ТипБонуса);
	ТипыБонусов = Перечисления.ТипыРетроБонусовПоставщиков;
	
	Если ПараметрыУсловийРетроБонусов.ТипБонуса = ТипыБонусов.Продажи Тогда
		КлючВарианта = "ПродажиПоПокупателям";
	ИначеЕсли ПараметрыУсловийРетроБонусов.ТипБонуса = ТипыБонусов.Закупки Тогда
		КлючВарианта = "Закупки";
	ИначеЕсли ПараметрыУсловийРетроБонусов.ТипБонуса = ТипыБонусов.Остатки Тогда
		КлючВарианта = "Остатки";
	ИначеЕсли ПараметрыУсловийРетроБонусов.БезРасчета Тогда
		КлючВарианта = "";
	Иначе
		
		ШаблонОшибки = НСтр("ru = 'Неизвестный тип бонуса ""%1"" для документа ""%2""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки,
			ТипБонусаПредставление,
			ПараметрыУсловийРетроБонусов.ДокументУсловийРетроБонусовПредставление);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Возврат КлючВарианта;
	
КонецФункции

Процедура ПрименитьПараметрИзНастроекФормы(НастройкиОтчета, НастройкиОтчетаВФорме, ИмяПараметра)
	
	ПараметрРасшифровки = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчетаВФорме, ИмяПараметра);
	ЗначениеПараметра = ПараметрРасшифровки.Значение;
	Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда
		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
			НастройкиОтчета, ИмяПараметра, ЗначениеПараметра.ПравоеЗначение, Истина);
		
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, ИмяПараметра).Использование = Истина;
	
КонецПроцедуры

Процедура ПрименитьПараметрыРасшифровки(ПараметрыУсловийРетроБонусов, НастройкиОтчета)
	
	ТипБонуса = ПараметрыУсловийРетроБонусов.ТипБонуса;
	ТипыБонуса = Перечисления.ТипыРетроБонусовПоставщиков;
	
	Если ТипБонуса = ТипыБонуса.Продажи Тогда
		
		Контрагент = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "КонтрагентПокупатель").Значение;
		Партнер = Справочники.Партнеры.ПустаяСсылка();
		
	ИначеЕсли ТипБонуса = ТипыБонуса.Закупки Тогда
		
		Контрагент = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "КонтрагентПоставщик").Значение;
		Партнер = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "ПартнерПоставщик").Значение; // СправочникСсылка.Партнеры
		
	Иначе
		
		ШаблонОшибки = НСтр("ru = 'Некорректный тип бонуса ""%1""'");
		ТипБонусаСтрокой = Строка(ТипБонуса);
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ТипБонусаСтрокой);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОтчета, "Контрагент", Контрагент, Истина);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОтчета, "Партнер", Партнер, Истина);
	
КонецПроцедуры

Функция ПараметрыЗамераПроизводительности(ПараметрыУсловийРетроБонусов, ПараметрыВарианта)
	
	Результат = Новый Структура;
	Результат.Вставить("Фиксировать", Истина);
	Результат.Вставить("Делитель", 1);
	
	ИмяТипаБонуса = ОбщегоНазначения.ИмяЗначенияПеречисления(ПараметрыУсловийРетроБонусов.ТипБонуса);
	Если ПараметрыВарианта.ЭтоРасшифровкаПоНоменклатуре Тогда
		
		ТипВарианта = "КомпоновкаРасшифровкиПоНоменклатуре";
		Результат.Делитель = 100;
		
	ИначеЕсли ПараметрыВарианта.ЭтоРасшифровкаПоДокументам Тогда
		
		ТипВарианта = "КомпоновкаРасшифровкиПоДокументам";
		Результат.Делитель = 1;
		
	ИначеЕсли ПараметрыВарианта.РежимРасшифровки Тогда
		
		ТипВарианта = "КомпоновкаРасшифровки";
		Результат.Фиксировать = Ложь;
		Результат.Делитель = 100;
		
	Иначе
		
		ТипВарианта = "КомпоновкаОсновногоВарианта";
		
		Если ПараметрыУсловийРетроБонусов.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Продажи Тогда
			Результат.Делитель = 1;
		ИначеЕсли ПараметрыУсловийРетроБонусов.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Закупки Тогда
			Результат.Делитель = 100;
		ИначеЕсли ПараметрыУсловийРетроБонусов.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки Тогда
			Результат.Делитель = 100;
		Иначе
			
			ШаблонОшибки = НСтр("ru = 'Неизвестный тип бонуса ""%1""'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,ИмяТипаБонуса);
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	КлючеваяОперация = СтрШаблон(
		"Отчет.РасчетРетроБонусовПоставщиков.МодульОбъекта.ПриКомпоновкеРезультата.%1.%2",
		ТипВарианта,
		ИмяТипаБонуса);
	Результат.Вставить("КлючеваяОперация", КлючеваяОперация);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли