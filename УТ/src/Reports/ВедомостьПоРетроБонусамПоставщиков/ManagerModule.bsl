// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Задает расширенные настройки отчета
//
// Параметры:
//   Настройки - см. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.Настройки.
//   НастройкиОтчета - см. ВариантыОтчетов.ОписаниеОтчета.
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	ВыводитьВариантыОтчетов = Ложь;
	
	НастройкиОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоРетроБонусамПоставщиков);
	НастройкиОтчета.ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьРетроБонусыПоставщиков.Имя);
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "ВедомостьПоРетроБонусамПоставщиков");
	НастройкиВарианта.Описание = НСтр("ru = 'Сколько бонусов начислено поставщиками за указанный период?
									  |Какие суммы бонусов отражены актом финансовой премии или ожидают согласования документов списания?
									  |Какой остаток начисленных ретро-бонусов от поставщиков?'");
	НастройкиВарианта.Размещение.Вставить(Метаданные.Подсистемы.Закупки.Подсистемы.РетроБонусыПоставщиков);
	
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, ВыводитьВариантыОтчетов);
	
	ВариантыОтчетовУТПереопределяемый.ОтключитьВариантОтчета(
		Настройки,
		НастройкиОтчета,
		"ВедомостьПоРБПКонтекстУсловия");
		
	ВариантыОтчетовУТПереопределяемый.ОтключитьВариантОтчета(
		Настройки,
		НастройкиОтчета,
		"ВедомостьПоРБПКонтекстАктПремии");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//   КлючВарианта - Строка - 
//   
//	Возвращаемое значение:
//		СтрокаТаблицыЗначений - описание созданной команды.
//
Функция ДобавитьКомандуОтчета(КомандыОтчетов, Параметры, КлючВарианта = "") Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоРетроБонусамПоставщиков)
	   И ПолучитьФункциональнуюОпцию("ИспользоватьРетроБонусыПоставщиков") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		Представление = НСтр("ru = 'Ведомость по начисленным ретро-бонусам'");
		КомандаОтчет.Менеджер = Метаданные.Отчеты.ВедомостьПоРетроБонусамПоставщиков.ПолноеИмя();
		КомандаОтчет.Представление = Представление;
		КомандаОтчет.МножественныйВыбор = Ложь;
		КомандаОтчет.Важность = "Обычное";
		
		Если ЗначениеЗаполнено(КлючВарианта) Тогда
			
			КомандаОтчет.КлючВарианта = КлючВарианта;
			
		КонецЕсли;
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  ОбластиСРасшифровками - Структура:
//   * МассивИдентификаторовРасшифровок - Массив Из ИдентификаторРасшифровкиКомпоновкиДанных
//   * РасшифровкаОбласть - Соответствие Из КлючИЗначение:
//     ** Ключ - ИдентификаторРасшифровкиКомпоновкиДанных
//     ** Значение - Строка - Имя области
//  АдресДанныхРасшифровки - Строка
//  ПоляРасшифровки - Массив Из Строка
//  Действие - Строка
// 
// Возвращаемое значение:
//  Структура:
//   * МассивДокументовУсловий - Массив Из ДокументСсылка.УсловияРетроБонусовПоставщика
//   * МассивИменОбластей - Массив Из Строка
//   * ДокументыУсловийСАдресами - Соответствие Из КлючИЗначение:
//      ** Ключ - Строка
//      ** Значение - ДокументСсылка.УсловияРетроБонусовПоставщика
//
Функция ДокументыУсловийВыделенныхОбластей(ОбластиСРасшифровками, АдресДанныхРасшифровки, ПоляРасшифровки) Экспорт
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки); // ДанныеРасшифровкиКомпоновкиДанных
	
	РасшифровкаОбласть = ОбластиСРасшифровками.РасшифровкаОбласть;
	МассивИдентификаторовРасшифровок = ОбластиСРасшифровками.МассивИдентификаторовРасшифровок;
	
	ТипДокумента = Тип("ДокументСсылка.УсловияРетроБонусовПоставщика");
	МассивДокументовУсловий = Новый Массив; // Массив Из ДокументСсылка.УсловияРетроБонусовПоставщика
	МассивИменОбластей = Новый Массив; // Массив Из Строка
	ДокументыУсловийСАдресами = Новый Соответствие;
	
	Для Каждого ТекущаяРасшифровка Из МассивИдентификаторовРасшифровок Цикл
		
		ПолеРасшифровки = ДанныеРасшифровки.Элементы.Получить(ТекущаяРасшифровка).ПолучитьПоля()[0];
		Если ТипЗнч(ПолеРасшифровки.Значение) = ТипДокумента
		   И ЗначениеЗаполнено(ПолеРасшифровки.Значение) Тогда
			
			ДокументУсловий = ПолеРасшифровки.Значение; // ДокументСсылка.УсловияРетроБонусовПоставщика
			
			ИмяОбласти = РасшифровкаОбласть[ТекущаяРасшифровка];
			МассивИменОбластей.Добавить(ИмяОбласти);
			ДокументыУсловийСАдресами.Вставить(ИмяОбласти, ДокументУсловий);
			
			Если МассивДокументовУсловий.Найти(ДокументУсловий) = Неопределено Тогда
				МассивДокументовУсловий.Добавить(ДокументУсловий);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("МассивДокументовУсловий", МассивДокументовУсловий);
	Результат.Вставить("МассивИменОбластей", МассивИменОбластей);
	Результат.Вставить("ДокументыУсловийСАдресами", ДокументыУсловийСАдресами);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли