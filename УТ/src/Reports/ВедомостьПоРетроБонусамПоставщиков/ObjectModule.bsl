//@strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;
	
	НастройкиОсновнойСхемы = КомпоновщикНастроек.ПолучитьНастройки();
	
	УказанПериод = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОсновнойСхемы, "Период").Использование;
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОсновнойСхемы, "УказанПериод", УказанПериод, УказанПериод);
	
	КомментарийЗавершено = НСтр("ru = 'Расчеты по условию закрыты, расхождение на конец периода не рассчитывается'");
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
		НастройкиОсновнойСхемы,
		"КомментарийЗавершено",
		КомментарийЗавершено);
	
	КомментарийПустоеУсловие = НСтр("ru = 'Акты без условий, расхождения не рассчитываются'");
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
		НастройкиОсновнойСхемы,
		"КомментарийПустоеУсловие",
		КомментарийПустоеУсловие);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОсновнойСхемы, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки, Истина);
	
	ПроцессорВыводаВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаВТабличныйДокумент.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных);
	
	// Сообщим форме отчета, что настройки модифицированы
	Если ПользовательскиеНастройкиМодифицированы Тогда
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить(
			"ПользовательскиеНастройкиМодифицированы", Истина);
	КонецЕсли;
	
	ОтчетПустой = ОтчетыСервер.ОтчетПустой(ЭтотОбъект, ПроцессорКомпоновкиДанных);
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", ОтчетПустой);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - Форма отчета или форма настроек отчета.
//       Неопределено когда вызов без контекста.
//   КлючВарианта - Строка, Неопределено - Имя предопределенного
//       или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов без контекста.
//   Настройки - См. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт 
	
	Если КлючВарианта = "ВедомостьПоРетроБонусамПоставщиковКонтекст" Тогда
		
		Настройки.ФормироватьСразу = Истина;
		Настройки.РазрешеноИзменятьВарианты = Ложь;
		
	КонецЕсли;
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриОпределенииСвойствЭлементовФормыНастроек = Истина;
	Настройки.События.ПередФормированиемОтчета = Истина;
	
КонецПроцедуры

// См. ОтчетыПереопределяемый.ПриСозданииНаСервере
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ВыводитьКомментарийВШапке = Истина;
	Параметры = Форма.Параметры;
	
	Если Параметры.Свойство("ПараметрКоманды") Тогда
		
		Если ТипЗнч(Параметры.ПараметрКоманды) = Тип("ДокументСсылка.УсловияРетроБонусовПоставщика") Тогда
			
			ВыводитьКомментарийВШапке = Ложь;
			УсловияРетроБонусовПоставщика = Параметры.ПараметрКоманды; // ДокументСсылка.УсловияРетроБонусовПоставщика
			
			Реквизиты = "Исправление, ИсправляемыйДокумент";
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УсловияРетроБонусовПоставщика, Реквизиты);
			
			Если ЗначенияРеквизитов.Исправление = Истина Тогда
				ИсходныйДокумент = ЗначенияРеквизитов.ИсправляемыйДокумент;
			Иначе
				ИсходныйДокумент = УсловияРетроБонусовПоставщика;
			КонецЕсли;
			
			Форма.ФормаПараметры.Отбор = Новый Структура("ДокументУсловий", ИсходныйДокумент);
			Форма.НастройкиОтчета.РазрешеноВыбиратьВарианты = Ложь;
			
		ИначеЕсли ТипЗнч(Параметры.ПараметрКоманды) = Тип("ДокументСсылка.АктПремииПоставщика") Тогда
			
			АктПремииПоставщика = Параметры.ПараметрКоманды; // ДокументСсылка.АктПремииПоставщика
			УстановитьОтборыПоАкту(Форма, АктПремииПоставщика);
			ДобавляемыеРеквизитыФормы = Новый Массив(); // Массив из РеквизитФормы
			
			ТипРеквизита = Новый ОписаниеТипов("ДокументСсылка.АктПремииПоставщика");
			ИмяРеквизита = "АктПремииПоставщика";
			
			НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита);
			ДобавляемыеРеквизитыФормы.Добавить(НовыйРеквизит);
			
			Форма.ИзменитьРеквизиты(ДобавляемыеРеквизитыФормы);
			
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ИмяРеквизита, АктПремииПоставщика);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыводитьКомментарийВШапке Тогда
		
		ДобавляемыеРеквизитыФормы = Новый Массив(); // Массив из РеквизитФормы
		
		ТипСтрока = Новый ОписаниеТипов("Строка");
		ИмяРеквизита = "КомментарийВШапке";
		
		РеквизитКомментарийВШапке = Новый РеквизитФормы(ИмяРеквизита, ТипСтрока);
		ДобавляемыеРеквизитыФормы.Добавить(РеквизитКомментарийВШапке);
		
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизитыФормы);
		КомментарийВШапке = СтрокаРасчетыАктуальны();
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ИмяРеквизита, КомментарийВШапке);
		
		Элементы = Форма.Элементы;
		
		Если Элементы.Найти("КомандыИПоказатели") <> Неопределено Тогда
			НовыйЭлемент = Элементы.Вставить(ИмяРеквизита, Тип("ПолеФормы"),, Элементы.КомандыИПоказатели);
		Иначе
			НовыйЭлемент = Элементы.Вставить(ИмяРеквизита, Тип("ПолеФормы"));
		КонецЕсли;
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
		НовыйЭлемент.ПутьКДанным = ИмяРеквизита;
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
		НовыйЭлемент.ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после определения свойств элементов формы, связанных с пользовательскими настройками.
// См. ОтчетыСервер.СвойстваЭлементовФормыНастроек()
// Позволяет переопределить свойства, для целей персонализации отчета.
//
// Параметры:
//  ТипФормы - ТипФормыОтчета - см. Синтакс-помощник
//  СвойстваЭлементов - см. ОтчетыСервер.СвойстваЭлементовФормыНастроек
//  ПользовательскиеНастройки - КоллекцияЭлементовПользовательскихНастроекКомпоновкиДанных - элементы актуальных
//                              пользовательских настроек, влияющих на создание связанных элементов формы.
//
Процедура ПриОпределенииСвойствЭлементовФормыНастроек(ТипФормы, СвойстваЭлементов, ПользовательскиеНастройки) Экспорт
	
	Если ТипФормы <> ТипФормыОтчета.Основная Тогда 
		Возврат;
	КонецЕсли;
	
	ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных("Партнер");
	
	ТаблицаПолей = СвойстваЭлементов.Поля;
	ТаблицаПолей.Колонки.Добавить("ПараметрыВыбора", Новый ОписаниеТипов("ФиксированныйМассив"));
	
	Для Каждого СвойстваПоля Из ТаблицаПолей Цикл
		
		Если ТипЗнч(СвойстваПоля.ОписаниеНастройки) = Тип("ДоступноеПолеОтбораКомпоновкиДанных")
		   И СвойстваПоля.ОписаниеНастройки.Поле = ПолеКомпоновкиДанных Тогда
			
			ПараметрыВыбора = Новый Массив; // Массив из ПараметрВыбора
			Параметр = Новый ПараметрВыбора("Отбор.Поставщик", Истина); 
			ПараметрыВыбора.Добавить(Параметр);
			
			СвойстваПоля.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ФормаОтчета - ФормаКлиентскогоПриложения
//  ДополнительныеПараметры - Структура:
//   * ТекстПредупреждения - Строка
//   * ИмяПараметраХраненияОтказаОтПредупреждения - Строка
//
Процедура ПередФормированиемОтчета(ФормаОтчета, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "КомментарийВШапке") Тогда
		
		КомментарийВШапке = СтрокаРасчетыАктуальны();
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
			ФормаОтчета, "КомментарийВШапке", КомментарийВШапке);
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "АктПремииПоставщика") Тогда
		
		АктПремииПоставщика = ФормаОтчета.АктПремииПоставщика; // ДокументСсылка.АктПремииПоставщика
		УстановитьОтборыПоАкту(ФормаОтчета, АктПремииПоставщика);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтрокаРасчетыАктуальны()
	
	СтрокаПодсказки = НСтр("ru = 'Данные статусов расчетов по документам ""Условия ретро-бонусов поставщиков"" актуальны'");
	
	Возврат СтрокаПодсказки;
	
КонецФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  АктПремииПоставщика - ДокументСсылка.АктПремииПоставщика
//
Процедура УстановитьОтборыПоАкту(Форма, АктПремииПоставщика)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Отбор.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	ДанныеДляОтбора = ДанныеАкта(АктПремииПоставщика);
	ДанныеШапки = ДанныеДляОтбора.ДанныеШапки;
	ДокументыУсловий = ДанныеДляОтбора.ДокументыУсловий;
	
	ДокументыУсловийСписок = Новый СписокЗначений;
	ДокументыУсловийСписок.ЗагрузитьЗначения(ДокументыУсловий);
	Если ДанныеШапки.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(Отбор, ДанныеШапки);
		
	КонецЕсли;
	Отбор.Вставить("ДокументУсловий", ДокументыУсловийСписок);
	
	Форма.ФормаПараметры.Отбор = Отбор;
	Форма.НастройкиОтчета.РазрешеноВыбиратьВарианты = Ложь;
	
	НовыеНастройки = КомпоновщикНастроек.ПолучитьНастройки();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		НовыеНастройки.Отбор,
		"Контрагент",
		Отбор.Контрагент,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		НовыеНастройки.Отбор,
		"Организация",
		Отбор.Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		НовыеНастройки.Отбор,
		"ДокументУсловий",
		ДокументыУсловийСписок,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);
		
	КомпоновщикНастроек.ЗагрузитьНастройки(НовыеНастройки);
	
КонецПроцедуры

// Данные акта.
// 
// Параметры:
//  АктПремииПоставщика - ДокументСсылка.АктПремииПоставщика - 
// 
// Возвращаемое значение:
//  Структура - Данные акта:
// * ДанныеШапки - ВыборкаИзРезультатаЗапроса:
//   ** Организация - СправочникСсылка.Организации
//   ** Контрагент - СправочникСсылка.Контрагенты
// * ДокументыУсловий - Массив Из ДокументСсылка.УсловияРетроБонусовПоставщика
// 
Функция ДанныеАкта(АктПремииПоставщика)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", АктПремииПоставщика);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктПремииПоставщика.Организация КАК Организация,
	|	АктПремииПоставщика.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.АктПремииПоставщика КАК АктПремииПоставщика
	|ГДЕ
	|	АктПремииПоставщика.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктПремииПоставщикаРетроБонусы.ДокументУсловий КАК ДокументУсловий
	|ИЗ
	|	Документ.АктПремииПоставщика.РетроБонусы КАК АктПремииПоставщикаРетроБонусы
	|ГДЕ
	|	АктПремииПоставщикаРетроБонусы.Ссылка = &Ссылка";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ДанныеШапки = Результат[0].Выбрать();
	ДокументыУсловий = Результат[1].Выгрузить().ВыгрузитьКолонку("ДокументУсловий");
	
	Данные = Новый Структура;
	Данные.Вставить("ДанныеШапки", ДанныеШапки);
	Данные.Вставить("ДокументыУсловий", ДокументыУсловий);
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#КонецЕсли