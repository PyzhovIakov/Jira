
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ЭтоКурьерика = СервисДоставкиКлиентСервер.ЭтоКурьерика(Параметры.ТипГрузоперевозки);

	Если ЭтоКурьерика Тогда

		Для Каждого КурьерИзСписка Из Параметры.СписокКурьеров Цикл
			Элементы.Курьер.СписокВыбора.Добавить(КурьерИзСписка.Значение, КурьерИзСписка.Представление);
		КонецЦикла;

		Курьер = Параметры.КурьерИдентификатор;

		ЗаполнитьЗначенияСвойств(ПериодДоставки, Параметры.ПериодДоставки);
	Иначе
		ЗаполнитьЗначенияСвойств(ПериодСоздания, Параметры.ПериодСоздания);
	КонецЕсли;

	Элементы.ГруппаПериодДоставки.Видимость = ЭтоКурьерика;
	Элементы.Курьер.Видимость = ЭтоКурьерика;

	Элементы.ГруппаПериодСоздания.Видимость = Не ЭтоКурьерика;

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(Параметры.ТипГрузоперевозки) Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрТипГрузоперевозки", Параметры.ТипГрузоперевозки);
	Иначе
		ВызватьИсключение НСтр("ru = 'Реестр заказов возможно открыть только из формы списка заказов на доставку.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрОрганизация", Параметры.Организация);
	Иначе
		
		ТаблицаОрганизаций = СервисДоставкиСлужебный.ОрганизацииБизнесСети();
		Если ТаблицаОрганизаций.Количество() Тогда
			Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрОрганизация",
				ТаблицаОрганизаций.Получить(0).Организация);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ПунктВыдачи) Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрПунктВыдачи", Параметры.ПунктВыдачи);
	Иначе
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрПунктВыдачи", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Состояние) Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрСостояние", Параметры.Состояние);
	Иначе
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрСостояние", Новый СписокЗначений);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Курьер) Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрКурьерИдентификатор", Курьер);
		КурьерПредставление = Элементы.Курьер.СписокВыбора.НайтиПоЗначению(Курьер).Представление;
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрКурьерПредставление", КурьерПредставление);
	КонецЕсли;
	
	Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрПериодДоставки", ПериодДоставки);
	Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрПериодСоздания", ПериодСоздания);
	
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СкомпоноватьРезультат();
	ВариантМодифицирован = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодДоставкиДатаНачалаПриИзменении(Элемент)
	Если ПроверитьЗаполнениеПериода() Тогда
		ЗарегистрироватьИзменениеПараметров();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПериодДоставкиДатаОкончанияПриИзменении(Элемент)
	Если ПроверитьЗаполнениеПериода() Тогда
		ЗарегистрироватьИзменениеПараметров();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПериодСозданияДатаНачалаПриИзменении(Элемент)
	Если ПроверитьЗаполнениеПериода() Тогда
		ЗарегистрироватьИзменениеПараметров();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПериодСозданияДатаОкончанияПриИзменении(Элемент)
	Если ПроверитьЗаполнениеПериода() Тогда
		ЗарегистрироватьИзменениеПараметров();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КурьерПриИзменении(Элемент)
	ЗарегистрироватьИзменениеПараметров();
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сохранить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПриПодключенииРасширения", ЭтотОбъект);
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодСоздания(Команда)
	УстановитьИнтервал("ПериодСоздания");
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодДоставки(Команда)
	УстановитьИнтервал("ПериодДоставки");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ФорматыСохраненияОтчета(Знач ПолноеИмяФайлаОтчета, ИндексФорматовСохраненияОтчета)
	
	ОписаниеПолногоИмениФайла = СтрРазделить(ПолноеИмяФайлаОтчета, ПолучитьРазделительПути());
	ИмяФайлаОтчета = ОписаниеПолногоИмениФайла[ОписаниеПолногоИмениФайла.ВГраница()];
	
	ОписаниеИмениФайла = СтрРазделить(ИмяФайлаОтчета, ".");
	РасширениеФайлаОтчета = ОписаниеИмениФайла[ОписаниеИмениФайла.ВГраница()];
	
	Возврат ИндексФорматовСохраненияОтчета[РасширениеФайлаОтчета];
	
КонецФункции

// Проверить заполнение периода.
// 
// Возвращаемое значение:
//  Булево - Проверить заполнение периода
&НаКлиенте
Функция ПроверитьЗаполнениеПериода()

	РезультатПроверки = Истина;

	Если ЗначениеЗаполнено(ПериодДоставки.ДатаНачала) И ЗначениеЗаполнено(ПериодДоставки.ДатаОкончания)
		И ПериодДоставки.ДатаНачала > ПериодДоставки.ДатаОкончания Тогда
		РезультатПроверки = Ложь;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Конец периода должен быть больше начала'"),,
			"ПериодДоставки.ДатаОкончания");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодСоздания.ДатаНачала) И ЗначениеЗаполнено(ПериодСоздания.ДатаОкончания)
		И ПериодСоздания.ДатаНачала > ПериодСоздания.ДатаОкончания Тогда
		РезультатПроверки = Ложь;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Конец периода должен быть больше начала'"),,
			"ПериодСоздания.ДатаОкончания");
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокДоступныхФорматовСохраненияОтчета(ИндексФорматовСохраненияОтчета)
	
	ДоступныеФорматы = Новый СписокЗначений;
	
	ФорматыСохранения = СтандартныеПодсистемыСервер.НастройкиФорматовСохраненияТабличногоДокумента();
	
	Для Каждого ФорматСохранения Из ИндексФорматовСохраненияОтчета Цикл
		
		НайденноеОписание = ФорматыСохранения.Найти(ФорматСохранения.Ключ, "Расширение");
		ДоступныеФорматы.Добавить(НайденноеОписание.Расширение,
			НайденноеОписание.Представление,,
			НайденноеОписание.Картинка);
		
	КонецЦикла;
	
	Возврат ДоступныеФорматы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДоступныеФорматыСохраненияОтчета(ИндексФорматовСохраненияОтчета)
	
	ДоступныеФорматы = Новый Массив;
	
	ФорматыСохранения = СтандартныеПодсистемыСервер.НастройкиФорматовСохраненияТабличногоДокумента();
	
	ФорматСохраненияTXT = ФорматыСохранения.Найти(ТипФайлаТабличногоДокумента.TXT, "ТипФайлаТабличногоДокумента");
	ФорматСохраненияANSITXT = ФорматыСохранения.Найти(ТипФайлаТабличногоДокумента.ANSITXT,
		"ТипФайлаТабличногоДокумента");
	
	Если ФорматСохраненияTXT <> Неопределено И ФорматСохраненияANSITXT <> Неопределено Тогда
		ФорматыСохранения.Удалить(ФорматСохраненияANSITXT);
	КонецЕсли;
	
	ТекущийФорматСохранения = Новый Массив;
	
	Для Каждого ФорматСохранения Из ФорматыСохранения Цикл
	
		РасширениеФорматаСохранения = "*." + ФорматСохранения.Расширение;
		ПредставлениеФорматаСохранения = СтрЗаменить(ФорматСохранения.Представление, "." + ФорматСохранения.Расширение,
			РасширениеФорматаСохранения);
		
		ТекущийФорматСохранения.Добавить(ПредставлениеФорматаСохранения);
		ТекущийФорматСохранения.Добавить(РасширениеФорматаСохранения);
		
		ДоступныеФорматы.Добавить(СтрСоединить(ТекущийФорматСохранения, "|"));
		
		ТекущийФорматСохранения.Очистить();
		
		ИндексФорматовСохраненияОтчета.Вставить(ФорматСохранения.Расширение,
			ФорматСохранения.ТипФайлаТабличногоДокумента);
		
	КонецЦикла;
	
	Возврат СтрСоединить(ДоступныеФорматы, "|");
	
КонецФункции

&НаКлиенте
Процедура ПриПодключенииРасширения(РасширениеПодключено, ДополнительныеПараметры) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ИндексФорматовСохраненияОтчета", Новый Соответствие);
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = ДоступныеФорматыСохраненияОтчета(Контекст.ИндексФорматовСохраненияОтчета);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Заголовок = НСтр("ru = 'Сохранение результата отчета'");
	
	Обработчик = Новый ОписаниеОповещения("СохранитьОтчетПослеВыбораИмениФайла", ЭтотОбъект, Контекст);
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(Обработчик, Диалог);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчетПослеВыбораИмениФайла(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
		ПолноеИмяФайлаОтчета = Результат[0];
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда
		ПолноеИмяФайлаОтчета = Результат;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолноеИмяФайлаОтчета) Тогда
		
		Контекст.Вставить("ПолноеИмяФайлаОтчета", ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
			Заголовок));
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПослеВыбораФорматаСохранения", ЭтотОбъект, Контекст);
		СписокФорматов = СписокДоступныхФорматовСохраненияОтчета(Контекст.ИндексФорматовСохраненияОтчета);
		
		ФорматПоУмолчанию = СписокФорматов.НайтиПоЗначению("pdf");
		СписокФорматов.ПоказатьВыборЭлемента(ОписаниеОповещенияОЗакрытии,
			НСтр("ru = 'Выберите формат сохранения'"),
			ФорматПоУмолчанию);
		
	Иначе
		
		Контекст.Вставить("ПолноеИмяФайлаОтчета", ПолноеИмяФайлаОтчета);
		ВыбранныйЭлемент = Новый Структура("Значение");
		ПослеВыбораФорматаСохранения(ВыбранныйЭлемент, Контекст);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФорматаСохранения(ВыбранныйЭлемент, Контекст) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайлаОтчета = Контекст.ПолноеИмяФайлаОтчета;
	Если ВыбранныйЭлемент.Значение <> Неопределено Тогда
		ПолноеИмяФайлаОтчета = ПолноеИмяФайлаОтчета + "." + ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("СохранитьОтчетПослеСохраненияРезультатаОтчета",
		ЭтотОбъект,
		ПолноеИмяФайлаОтчета);
	
	ФорматыСохранения = ФорматыСохраненияОтчета(ПолноеИмяФайлаОтчета, Контекст.ИндексФорматовСохраненияОтчета);
	
	Результат.НачатьЗапись(Обработчик, ПолноеИмяФайлаОтчета, ФорматыСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчетПослеСохраненияРезультатаОтчета(Результат, ПолноеИмяФайлаОтчета) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("СохранитьОтчетПриВыбореИмениФайлаОтчета", ЭтотОбъект, ПолноеИмяФайлаОтчета);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Отчет сохранен в файл'"), Обработчик, ПолноеИмяФайлаОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчетПриВыбореИмениФайлаОтчета(ПолноеИмяФайлаОтчета) Экспорт
	
	ФайловаяСистемаКлиент.ОткрытьФайл(ПолноеИмяФайлаОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(ПериодИмя)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = ЭтотОбъект[ПериодИмя];
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизита", ПериодИмя);
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьИнтервалЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		ЗарегистрироватьИзменениеПараметров();
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект[ДополнительныеПараметры.ИмяРеквизита] = ВыбранноеЗначение;
	
	ЗарегистрироватьИзменениеПараметров();
	 
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьИзменениеПараметров()
	
	Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрКурьерИдентификатор", Курьер);
	Если ЗначениеЗаполнено(Курьер) Тогда
		КурьерПредставление =  Элементы.Курьер.СписокВыбора.НайтиПоЗначению(Курьер).Представление;
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрКурьерПредставление", КурьерПредставление);
	Иначе
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрКурьерПредставление", "");
	КонецЕсли;
	Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрПериодДоставки", ПериодДоставки);
	Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрПериодСоздания", ПериодСоздания);

КонецПроцедуры

#КонецОбласти
