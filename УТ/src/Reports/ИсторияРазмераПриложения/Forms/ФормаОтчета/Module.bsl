#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РазмерПриложений.ПроверитьПоддержкуРасчетаРазмераПриложений();
	
	ОбновитьВидимостьГруппыРазмераПриложения();
	ОбновитьИнформациюОРасчетеРазмераПриложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжиданияВыполненияРасчета();
	
	Период = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтотКвартал);
	ВариантСортировки = "ПоРазмеруНаКонецПериода";
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантСортировкиПриИзменении(Элемент)
	
	МодифицированностьДо = ВариантМодифицирован;
	
	ПолеРазмерНаКонецПериода	= Новый ПолеКомпоновкиДанных("РазмерНаКонецПериода");
	ПолеПриростАбсолютный		= Новый ПолеКомпоновкиДанных("Прирост_Абсолютный");
	ЭлементСортировки_РазмерНаКонецПериода	= Неопределено;
	ЭлементСортировки_ПриростАбсолютный		= Неопределено;
	Для Каждого ЭлементСортировки Из Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы Цикл
		Если ЭлементСортировки.Поле = ПолеРазмерНаКонецПериода Тогда
			ЭлементСортировки_РазмерНаКонецПериода = ЭлементСортировки;
		ИначеЕсли ЭлементСортировки.Поле = ПолеПриростАбсолютный Тогда
			ЭлементСортировки_ПриростАбсолютный = ЭлементСортировки;
		КонецЕсли;
	КонецЦикла;
	
	Если ВариантСортировки = "ПоРазмеруНаКонецПериода" Тогда
		Если ЭлементСортировки_РазмерНаКонецПериода <> Неопределено Тогда
			ЭлементСортировки_РазмерНаКонецПериода.Использование = Истина;
			ЭлементСортировки_РазмерНаКонецПериода.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		Иначе
			ЭлементСортировки = Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			ЭлементСортировки.Использование = Истина;
			ЭлементСортировки.Поле = ПолеРазмерНаКонецПериода;
			ЭлементСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;	
		КонецЕсли;	
	ИначеЕсли ЭлементСортировки_РазмерНаКонецПериода <> Неопределено Тогда
		ЭлементСортировки_РазмерНаКонецПериода.Использование = Ложь;		
	КонецЕсли;
	
	Если ВариантСортировки = "ПоАбсолютномуПриросту" Тогда
		Если ЭлементСортировки_ПриростАбсолютный <> Неопределено Тогда
			ЭлементСортировки_ПриростАбсолютный.Использование = Истина;
			ЭлементСортировки_ПриростАбсолютный.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		Иначе
			ЭлементСортировки = Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			ЭлементСортировки.Использование = Истина;
			ЭлементСортировки.Поле = ПолеПриростАбсолютный;
			ЭлементСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;	
		КонецЕсли;	
	ИначеЕсли ЭлементСортировки_ПриростАбсолютный <> Неопределено Тогда
		ЭлементСортировки_ПриростАбсолютный.Использование = Ложь;		
	КонецЕсли;
	
	Если НЕ МодифицированностьДо Тогда
		ВариантМодифицирован = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоИзменившиесяПриИзменении(Элемент)
	
	МодифицированностьДо = ВариантМодифицирован;
	
	ПолеОтбора = Новый ПолеКомпоновкиДанных("Прирост_Абсолютный");
	НайденныйОтбор = Неопределено;
	Для Каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = ПолеОтбора
			И ЭлементОтбора.Представление = НСтр("ru = 'Отображать только изменившиеся'") Тогда
			НайденныйОтбор = ЭлементОтбора;
			Прервать;	
		КонецЕсли;		
	КонецЦикла;
	
	Если НайденныйОтбор <> Неопределено Тогда
		НайденныйОтбор.Использование = ОтображатьТолькоИзменившиеся;
	ИначеЕсли ОтображатьТолькоИзменившиеся Тогда
		ЭлементОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Прирост_Абсолютный");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.Представление		= НСтр("ru = 'Отображать только изменившиеся'");
		ЭлементОтбора.ПравоеЗначение	= 0;		
	КонецЕсли;
	
	Если НЕ МодифицированностьДо Тогда
		ВариантМодифицирован = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодИспользованиеПриИзменении(Элемент)
	
	УстановитьЗначениеПараметраКомпоновки("ПериодОтчета", Период, ПериодИспользование);	
	
	ОбновитьВидимостьГруппыРазмераПриложенияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ПериодИспользование = Истина;
	УстановитьЗначениеПараметраКомпоновки("ПериодОтчета", Период, ПериодИспользование);
	
	ОбновитьВидимостьГруппыРазмераПриложенияНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	Если ВыполняетсяРасчет Или ЕстьДанныеДляФормированияОтчета() Тогда
		
		СформироватьОтчетПродолжение();
		
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Расчет размера приложения не выполнялся.
							|Выполнить сейчас?'");
		Обработчик = Новый ОписаниеОповещения("ОбработчикВопросаВыполненияРасчета", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРазмерПриложения(Команда)
	
	Если Не ДоступенРасчетПриложения() Тогда
		ВызватьИсключение НСтр("ru = 'В неразделенном сеансе недоступен расчет размера приложения'");
	КонецЕсли;
	
	ВыполнитьРасчетРазмераПриложения();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СформироватьОтчетПродолжение()
	
	СформироватьОтчетПослеВыполненияРасчета = Ложь;
	ЭтотОбъект.СкомпоноватьРезультат(РежимКомпоновкиРезультата.Фоновый);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеПараметраКомпоновки(ИмяПараметра, ЗначениеПараметра, Использование)

	МодифицированностьДо = ВариантМодифицирован;
	
	Параметр = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ЗначениеПараметра;
		Параметр.Использование = Использование;
		Если ИмяПараметра = "ПериодОтчета" Тогда
			ПараметрНачПериода = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачПериода");
			ПараметрНачПериода.Значение = ?(ЗначениеЗаполнено(ЗначениеПараметра.ДатаНачала), 
				ЗначениеПараметра.ДатаНачала, Дата(1,1,1,0,0,1));
			ПараметрНачПериода.Использование = Использование;
		КонецЕсли
	КонецЕсли;
	
	Если НЕ МодифицированностьДо Тогда
		ВариантМодифицирован = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#Область РасчетРазмераПриложения

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияВыполненияРасчета(УвеличитьИнтервал = 0)
	
	Если Не ВыполняетсяРасчет Тогда
		Возврат;
	КонецЕсли;
	
	ИнтервалОжиданияВыполненияРасчета = Макс(5 + УвеличитьИнтервал, 300);
	ПодключитьОбработчикОжидания("ПроверитьРезультатЗаданияРасчетаРазмераПриложения",
		ИнтервалОжиданияВыполненияРасчета, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРезультатЗаданияРасчетаРазмераПриложения()
	
	Если ЕстьЗапланированноеЗаданиеРасчетаРазмераПриложения() Тогда
		
		ПодключитьОбработчикОжиданияВыполненияРасчета(ИнтервалОжиданияВыполненияРасчета);
		
	Иначе
		
		ОбновитьИнформациюОРасчетеРазмераПриложения();
		
		Если СформироватьОтчетПослеВыполненияРасчета Тогда
			СформироватьОтчетПродолжение();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВопросаВыполненияРасчета(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		СформироватьОтчетПослеВыполненияРасчета = Истина;
		ВыполнитьРасчетРазмераПриложения();
		
	Иначе
		
		СформироватьОтчетПродолжение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРасчетРазмераПриложения()
	
	Если ЭтоРазделенныйСеанс() Тогда
		
		ЗапланироватьРасчетРазмераПриложения();
		ПодключитьОбработчикОжиданияВыполненияРасчета();
		
	Иначе
		
		ДлительнаяОперация = ЗапуститьФоновыйРасчетРазмераПриложения(УникальныйИдентификатор);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется расчет размера приложения'");
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("РасчетРазмераПриложенияЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетРазмераПриложенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	 
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		ОбновитьИнформациюОРасчетеРазмераПриложения();
		
		Если СформироватьОтчетПослеВыполненияРасчета Тогда
			СформироватьОтчетПродолжение();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьФоновыйРасчетРазмераПриложения(Знач ИдентификаторФормы)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Расчет размера приложения'");
	ПараметрыВыполнения.КлючФоновогоЗадания = Строка(Новый УникальныйИдентификатор);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"Отчеты.ИсторияРазмераПриложения.РассчитатьРазмерПриложения",
		Неопределено,
		ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Процедура ЗапланироватьРасчетРазмераПриложения()
	
	РазмерПриложений.ЗапланироватьРасчетРазмераПриложения();
	ОбновитьВыполнениеРасчетаПриложения();
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнтерфейса

&НаКлиенте
Процедура ОбновитьВидимостьГруппыРазмераПриложенияНаКлиенте()

	Если ПериодИспользование 
		И ЗначениеЗаполнено(Период) 
		И Период.ДатаОкончания <= ОбщегоНазначенияКлиент.ДатаСеанса() Тогда
		Элементы.ГруппаРазмерПриложения.Видимость = Ложь;
	Иначе
		ОбновитьВидимостьГруппыРазмераПриложения();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьГруппыРазмераПриложения()
	
	ДоступенРасчет = ДоступенРасчетПриложения();
	Элементы.ГруппаРазмерПриложения.Видимость = ДоступенРасчет;
	
	Если Не ДоступенРасчет Тогда
		Возврат;
	КонецЕсли;
	
	МинимальныйШагИзменений = РазмерПриложений.ЗначениеНастройкиРасчета("МинимальныйШагИзменений", 0);
	Если МинимальныйШагИзменений > 0 Тогда
		
		Элементы.РассчитатьРазмерПриложения.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элементы.РассчитатьРазмерПриложенияРасширеннаяПодсказка.Заголовок = СтрШаблон(
			НСтр("ru = 'Изменения в размере объекта метаданных меньше %1 Мб не отображаются'"),
			МинимальныйШагИзменений / 1024 / 1024);
		
	Иначе 
		
		Элементы.РассчитатьРазмерПриложения.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОРасчетеРазмераПриложения()
	
	ОбновитьАктуальностьРасчетаПриложения();
	ОбновитьВыполнениеРасчетаПриложения();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВыполнениеРасчетаПриложения()
	
	Если Не ДоступенРасчетПриложения() Тогда
		Возврат;
	КонецЕсли;
	
	ВыполняетсяРасчет = ?(ЭтоРазделенныйСеанс(), ЕстьЗапланированноеЗаданиеРасчетаРазмераПриложения(), Ложь);

	Элементы.РассчитатьРазмерПриложения.Видимость = Не ВыполняетсяРасчет; 
	Элементы.ГруппаВыполняетсяРасчетПриложения.Видимость = ВыполняетсяРасчет;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьАктуальностьРасчетаПриложения()
	
	Если Не ДоступенРасчетПриложения() Тогда
		Возврат;
	КонецЕсли;
	
	ДатаРасчета = РазмерПриложений.АктуальностьРасчетаРазмераПриложения();
	ИнфоАктуальностьРасчета = ?(ЗначениеЗаполнено(ДатаРасчета),
		СтрШаблон(НСтр("ru = 'Расчет размера приложения выполнен: %1'"), Формат(ДатаРасчета, НСтр("ru = 'ДФ=dd.MM.yyyy;'"))),
		НСтр("ru = 'Расчет размера приложения не выполнялся'"));

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервереБезКонтекста
Функция ЕстьЗапланированноеЗаданиеРасчетаРазмераПриложения()
	
	Возврат РазмерПриложений.ЕстьЗапланированноеЗаданиеРасчетаРазмераПриложения();
	
КонецФункции

&НаСервереБезКонтекста
Функция ДоступенРасчетПриложения()
	
	Если РаботаВМоделиСервиса.РазделениеВключено()
		И Не РаботаВМоделиСервиса.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоРазделенныйСеанс()
	
	Возврат РаботаВМоделиСервиса.РазделениеВключено() И РаботаВМоделиСервиса.ДоступноИспользованиеРазделенныхДанных();
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьДанныеДляФормированияОтчета()
	
	Если Не ДоступенРасчетПриложения() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДатаРасчета = РазмерПриложений.АктуальностьРасчетаРазмераПриложения();
	Возврат ЗначениеЗаполнено(ДатаРасчета);
	
КонецФункции

#КонецОбласти

#КонецОбласти
