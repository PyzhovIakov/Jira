////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции модуля менеджера "Отчеты.CRM_ВоронкаПродаж".
//
////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция используется для получения данных воронки продаж.
//
// Параметры:
//  Параметры     - ФормаКлиентскогоПриложения | Структура - Параметры запроса воронки продаж.
//  ДляСравнения  - Булево - Признак использования для сравнения
//
// Возвращаемое значение:
//   ТаблицаЗначений  - 
//
Функция ПолучитьДанныеВоронкиПродаж(Параметры, РежимВоронкиДляПостроения = "", ДляСравнения = Ложь) Экспорт
	
	Если РежимВоронкиДляПостроения = "" Тогда
		РежимВоронкиДляПостроения = Параметры.РежимВоронки;
	КонецЕсли;
	
	СКДДанные = ПолучитьСхемуКомпоновкиДанныхПоТекущимНастройкам(Параметры, РежимВоронкиДляПостроения, ДляСравнения);
	НастройкиСКД = СКДДанные.НастройкиПоУмолчанию;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКДДанные, НастройкиСКД, , ,
		 Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"),
		 Ложь);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	РезультатТаблица = Новый ТаблицаЗначений();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(РезультатТаблица);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Ложь);
	
	Возврат РезультатТаблица;
	
КонецФункции // ПолучитьДанныеВоронкиПродаж()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьЗначениеВОтборе(Отбор, Имя, ВидСравнения, Значение, Использование,
	 ДоступныеПоля = Неопределено,
	 СоздатьГруппуЭлементов = Ложь)
	Если ДоступныеПоля <> Неопределено Тогда
		Если ДоступныеПоля.НайтиПоле(Новый ПолеКомпоновкиДанных(Имя)) = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СоздатьГруппуЭлементов Тогда
		ПолеОтбораЛевоеЗначение = Новый ПолеКомпоновкиДанных(Имя);
		ЭлементОтбора = НайтиПолеВОтборе(Отбор.Элементы, ПолеОтбораЛевоеЗначение);
		Если ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = ПолеОтбораЛевоеЗначение;
		Иначе
			Возврат;
		КонецЕсли;
		ЭлементОтбора.ВидСравнения = ВидСравнения;
		ЭлементОтбора.ПравоеЗначение = Значение;
		ЭлементОтбора.Использование = Использование;
	Иначе
		ГруппаОтбора				= Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ГруппаОтбора.Использование	= Использование;
		
		Для Каждого СтруктураОтбора Из Значение Цикл
			
			ПолеОтбораЛевоеЗначение			= Новый ПолеКомпоновкиДанных(СтруктураОтбора.ИмяПоляОтбора);
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение		= ПолеОтбораЛевоеЗначение;
			ЭлементОтбора.ВидСравнения		= ВидСравнения;
			ЭлементОтбора.ПравоеЗначение	= СтруктураОтбора.ЗначениеОтбора;
			ЭлементОтбора.Использование		= Использование;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСхемуКомпоновкиДанныхПоТекущимНастройкам(Параметры, РежимВоронкиДляПостроения, ДляСравнения)
	
	ПараметрыЧерезФормы = (ТипЗнч(Параметры) = Тип("ФормаКлиентскогоПриложения"));
	
	///////////////////////////////////////////////
	// Создание и настройка схемы компоновки данных.
	
	СКДДанные = Новый СхемаКомпоновкиДанных();
	
	ИсточникДанных = СКДДанные.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанныхЗадачи";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКДДанные.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанныхСобытия";
	НаборДанных.ИсточникДанных = "ИсточникДанныхЗадачи";
	
	НаборДанных.Запрос = CRM_ВоронкиПродажСервер.ВоронкаПродажПолучитьТекстЗапроса(Параметры);
	
	НастройкиСКД = СКДДанные.НастройкиПоУмолчанию;
	
	ДетальнаяГруппировка = НастройкиСКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальнаяГруппировка.Использование = Истина;
	
	ВыбранноеАвтоПоле = НастройкиСКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеАвтоПоле.Использование = Истина;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКДДанные));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
	
	Для Каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		
		Если Лев(Строка(ПолеВыбора.Поле), 13) = "СистемныеПоля"
				Или Лев(Строка(ПолеВыбора.Поле), 12) = "SystemFields" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Лев(Строка(ПолеВыбора.Поле), 15) = "ПараметрыДанных"
				Или Лев(Строка(ПолеВыбора.Поле), 14) = "DataParameters" Тогда
			Продолжить;
		КонецЕсли;
		
		ВыбранныеПоляДетальнаяГруппировка =
			ДетальнаяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранныеПоляДетальнаяГруппировка.Поле  = Новый ПолеКомпоновкиДанных(ПолеВыбора.Поле);
		
	КонецЦикла;
	
	///////////////////////////////////////////////
	// Базовые параметры.
	
	КартыИТочкиМаршрутаВоронки = ПолучитьВсеКартыИТочкиМаршрутаВоронки(
		Параметры.ЭтапыТекущейВоронки);
	
	ДатаНачалаПериода = ?(
		ЗначениеЗаполнено(Параметры.ОтборПериод.ДатаНачала),
		НачалоДня(Параметры.ОтборПериод.ДатаНачала),
		Дата(1, 1, 1));
	
	ДатаОкончанияПериода = ?(
		ЗначениеЗаполнено(Параметры.ОтборПериод.ДатаОкончания),
		КонецДня(Параметры.ОтборПериод.ДатаОкончания),
		Дата(3000, 1, 1));
	
	ДатаКонецПериода = ?(
		ЗначениеЗаполнено(Параметры.ОтборПериод.ДатаОкончания),
		КонецДня(Параметры.ОтборПериод.ДатаОкончания),
		Дата(3000, 1, 1));
	
	ГоризонтВоронки			= ДатаОкончанияПериода;
	ГоризонтВоронкиПрогноз	= ГоризонтВоронки;
	
	ИспользуемыйКалендарь = ?(
		Параметры.ОтборПодразделение.ГрафикРаботы.Пустая(),
		Константы.ОсновнойКалендарьПредприятия.Получить(),
		Параметры.ОтборПодразделение.ГрафикРаботы);
	
	///////////////////////////////////////////////
	// Установка обязательных параметров запроса.
	
	НастройкиСКД.ПараметрыДанных.Элементы.Очистить();
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ТекущаяДата");
	Параметр.Значение = НачалоДня(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	Параметр.Использование = Истина;
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Воронка");
	Параметр.Значение = Параметры.Воронка;
	Параметр.Использование = Истина;
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("НачалоПериода");
	Параметр.Значение = ДатаНачалаПериода;
	Параметр.Использование = Истина;
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("КонецПериода");
	Параметр.Значение = ДатаКонецПериода;
	Параметр.Использование = Истина;
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ГоризонтВоронки");
	Параметр.Значение = ГоризонтВоронки;
	Параметр.Использование = Истина;
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ГоризонтВоронкиПрогноз");
	Параметр.Значение = ГоризонтВоронкиПрогноз;
	Параметр.Использование = Истина;
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Календарь");
	Параметр.Значение = ИспользуемыйКалендарь;
	Параметр.Использование = Истина;
	
	Если Параметры.ЕстьЭтапыПоДокументам Тогда
		Для Каждого ЭтапВоронки Из Параметры.ЭтапыТекущейВоронки Цикл
			Если ЭтапВоронки.Этап.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоДокументам Тогда
				
				ИмяПараметраЭтапа = "_" + СтрЗаменить(ЭтапВоронки.Этап.УникальныйИдентификатор(), "-", "_");
				
				Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
				Параметр.Параметр = Новый ПараметрКомпоновкиДанных(ИмяПараметраЭтапа);
				Параметр.Значение = ЭтапВоронки.Этап;
				Параметр.Использование = Истина;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("КартыМаршрута");
	Параметр.Значение = КартыИТочкиМаршрутаВоронки.Карты;
	Параметр.Использование = Истина;
	
	///////////////////////////////////////////////
	// Фиксация списка параметров расшифровки.
	
	Если ПараметрыЧерезФормы Тогда
		
		Параметры.СписокПараметровРасшифровки.Очистить();
		Параметры.СписокПараметровРасшифровки.Добавить(ИспользуемыйКалендарь,	"Календарь");
		Параметры.СписокПараметровРасшифровки.Добавить(ДатаНачалаПериода,		"ПараметрНачалоПериода"); 
		Параметры.СписокПараметровРасшифровки.Добавить(ДатаКонецПериода,		"ПараметрКонецПериода");
		Параметры.СписокПараметровРасшифровки.Добавить(ГоризонтВоронки,			"ПараметрГоризонтВоронки");
		Параметры.СписокПараметровРасшифровки.Добавить(ГоризонтВоронкиПрогноз,	"ПараметрГоризонтВоронкиПрогноз");
		Параметры.СписокПараметровРасшифровки.Добавить(РежимВоронкиДляПостроения,	"ПараметрТипВоронки");
		
	КонецЕсли;
	
	///////////////////////////////////////////////
	// Установка отборов СКД.
	
	НастройкиСКД.Отбор.Элементы.Очистить();
	
	// --------------
	// Пользователь или подразделение.
	
	Если ДляСравнения И ЗначениеЗаполнено(Параметры.СравнитьСПользовательПодразделение)
			И Не Параметры.СравнитьСПользовательПодразделение = "Плановые показатели" Тогда
		
		Если ТипЗнч(Параметры.СравнитьСПользовательПодразделение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			УстановитьЗначениеВОтборе(
				НастройкиСКД.Отбор,
				"Подразделение",
				ВидСравненияКомпоновкиДанных.Равно,
				Параметры.СравнитьСПользовательПодразделение,
				Истина);
		ИначеЕсли ТипЗнч(Параметры.СравнитьСПользовательПодразделение) = Тип("СправочникСсылка.Пользователи") Тогда
			УстановитьЗначениеВОтборе(
				НастройкиСКД.Отбор,
				"Пользователь",
				ВидСравненияКомпоновкиДанных.Равно,
				Параметры.СравнитьСПользовательПодразделение,
				Истина);
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Параметры.ОтборОтветственные) Тогда
			УстановитьЗначениеВОтборе(
				НастройкиСКД.Отбор,
				"Пользователь",
				ВидСравненияКомпоновкиДанных.ВСписке,
				Параметры.ОтборОтветственные,
				Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ОтборПодразделение) Тогда
			УстановитьЗначениеВОтборе(
				НастройкиСКД.Отбор,
				"Подразделение",
				ВидСравненияКомпоновкиДанных.Равно,
				Параметры.ОтборПодразделение,
				Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	// --------------
	// Офис.
	
	Если ЗначениеЗаполнено(Параметры.ОтборОфис) Тогда
		УстановитьЗначениеВОтборе(
			НастройкиСКД.Отбор,
			"Офис",
			ВидСравненияКомпоновкиДанных.Равно,
			Параметры.ОтборОфис,
			Истина);
	КонецЕсли;
	
	// --------------
	// Бизнес регион.
	
	Если ЗначениеЗаполнено(Параметры.ОтборРегион) Тогда
		УстановитьЗначениеВОтборе(
			НастройкиСКД.Отбор,
			"БизнесРегион",
			ВидСравненияКомпоновкиДанных.Равно,
			Параметры.ОтборРегион,
			Истина);
	КонецЕсли;
	
	// --------------
	// Сегмент.
	
	Если ЗначениеЗаполнено(Параметры.ОтборСегментКлиентов) Тогда
		УстановитьЗначениеВОтборе(
			НастройкиСКД.Отбор,
			"Сегмент",
			ВидСравненияКомпоновкиДанных.Равно,
			Параметры.ОтборСегментКлиентов,
			Истина);
	КонецЕсли;
	
	// --------------
	// Источник привлечения.
	
	Если ЗначениеЗаполнено(Параметры.ПоискИсточникПривлечения) Тогда
		УстановитьЗначениеВОтборе(
			НастройкиСКД.Отбор,
			"ИсточникПривлечения",
			ВидСравненияКомпоновкиДанных.Равно,
			Параметры.ПоискИсточникПривлечения,
			Истина);
	КонецЕсли;
	
	// --------------
	// Значение источника привлечения.
	
	Если ЗначениеЗаполнено(Параметры.ПоискЗначениеИсточникаПривлечения) Тогда
		УстановитьЗначениеВОтборе(
			НастройкиСКД.Отбор,
			"ЗначениеИсточникаПривлечения",
			ВидСравненияКомпоновкиДанных.Равно,
			Параметры.ПоискЗначениеИсточникаПривлечения,
			Истина);
	КонецЕсли;
	
	// --------------
	// Признак нового клиента.
	
	Если Параметры.ОтборТолькоНовые Тогда
		УстановитьЗначениеВОтборе(
			НастройкиСКД.Отбор,
			"НовыйКлиент",
			ВидСравненияКомпоновкиДанных.Равно,
			Истина,
			Истина);
	КонецЕсли;
	
	// --------------
	// Типы услуг.
	
	Если Параметры.ОтборТипыУслуг.Количество() > 0 Тогда
		УстановитьЗначениеВОтборе(
			НастройкиСКД.Отбор,
			"ТипУслуги",
			ВидСравненияКомпоновкиДанных.ВСписке,
			Параметры.ОтборТипыУслуг,
			Истина);
	КонецЕсли;
	
	// --------------
	// Состояния.
	
	СписокСостояний = Новый СписокЗначений;
	Если РежимВоронкиДляПостроения = "Активные" Тогда
		
		СписокСостояний.Добавить(Перечисления.CRM_СостоянияЭтаповВоронки.Активный);
		
		УстановитьЗначениеВОтборе(
			НастройкиСКД.Отбор,
			"СостояниеЭтапа",
			ВидСравненияКомпоновкиДанных.ВСписке,
			СписокСостояний,
			Истина);
		
	ИначеЕсли РежимВоронкиДляПостроения = "Закрытые" Тогда
		
		УстановитьЗначениеВОтборе(
			НастройкиСКД.Отбор,
			"Завершено",
			ВидСравненияКомпоновкиДанных.Равно,
			Истина,
			Истина);
		
		СписокСостояний.Добавить(Перечисления.CRM_СостоянияЭтаповВоронки.Активный);
		
		УстановитьЗначениеВОтборе(
			НастройкиСКД.Отбор,
			"СостояниеЭтапа",
			ВидСравненияКомпоновкиДанных.НеВСписке,
			СписокСостояний,
			Истина);
		
	ИначеЕсли РежимВоронкиДляПостроения = "Все" Тогда
		
		СписокСостояний.Добавить(Перечисления.CRM_СостоянияЭтаповВоронки.Активный);
		СписокСостояний.Добавить(Перечисления.CRM_СостоянияЭтаповВоронки.ЗавершенНеудачно);
		СписокСостояний.Добавить(Перечисления.CRM_СостоянияЭтаповВоронки.ЗавершенУспешно);
		
		УстановитьЗначениеВОтборе(
			НастройкиСКД.Отбор,
			"СостояниеЭтапа",
			ВидСравненияКомпоновкиДанных.ВСписке,
			СписокСостояний,
			Истина);
		
	КонецЕсли;
	
	// --------------
	// Теги.
	
	Если Параметры.ОтбиратьПоТегам Тогда
		
		УстановитьЗначениеВОтборе(
			НастройкиСКД.Отбор,
			"Объект",
			ВидСравненияКомпоновкиДанных.ВСписке,
			Параметры.СписокОбъектовСТегами,
			Истина);
		
	КонецЕсли;
	
	// --------------
	
	Возврат СКДДанные;
	
КонецФункции // ПолучитьСхемуКомпоновкиДанныхПоТекущимНастройкам()

Функция НайтиПолеВОтборе(ЭлементыОтбора, Поле)
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НайденныйЭлемент = НайтиПолеВОтборе(ЭлементОтбора.Элементы, Поле);
			Если НайденныйЭлемент <> Неопределено Тогда
				Возврат НайденныйЭлемент;
			КонецЕсли;
		Иначе
			Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
				Возврат ЭлементОтбора;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Функция ПолучитьВсеКартыИТочкиМаршрутаВоронки(ЭтапыТекущейВоронки)
	МассивКарты = Новый Массив();
	МассивТочки = Новый Массив();
	
	Для Каждого СтрокаЭтап Из ЭтапыТекущейВоронки Цикл
		Для Каждого СтрокаСостав Из СтрокаЭтап.Состав Цикл
			Если МассивКарты.Найти(СтрокаСостав.КартаМаршрута) = Неопределено Тогда
				МассивКарты.Добавить(СтрокаСостав.КартаМаршрута);
			КонецЕсли;
			Если МассивТочки.Найти(СтрокаСостав.ТочкаМаршрута) = Неопределено Тогда
				МассивТочки.Добавить(СтрокаСостав.ТочкаМаршрута);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Новый Структура("Карты,Точки", МассивКарты, МассивТочки);
КонецФункции

#КонецОбласти

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////