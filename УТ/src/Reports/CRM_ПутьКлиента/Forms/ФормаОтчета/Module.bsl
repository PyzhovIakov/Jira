
#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().ПриСозданииНаСервере(ЭтотОбъект,
		 Отказ,
		 СтандартнаяОбработка);
	
	ИтогиHTML = Отчеты.CRM_ПутьКлиента.ПолучитьМакет("МакетИтогиHTML").ПолучитьТекст();
	
	ПутьККартинке	= ПоместитьВоВременноеХранилище(
		БиблиотекаКартинок.ВажностьНовостиВажнаяПрочтенная, УникальныйИдентификатор);
	ИтогиHTML		= СтрЗаменить(ИтогиHTML, "images/hint.png", ПутьККартинке);
	
	УстановитьЗаголовкиВHTML(ИтогиHTML);
	
	Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ОтборМенеджеры.Добавить(ТекущийПользователь);
	ДоступныеПользователи =
		Новый ФиксированныйМассив(CRM_УправлениеЦелевымиПоказателямиСервер.ДоступныеПользователи(Ложь));
	
	Элементы.ГруппаМенюОтбор.Видимость = Ложь;
	Для каждого ДП Из ДоступныеПользователи Цикл
		Если ДП <> ТекущийПользователь И Не ДП.Служебный Тогда
			Элементы.ГруппаМенюОтбор.Видимость = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Элементы.ГруппаМенюОтбор.Видимость Тогда
		ЗагрузитьСохраненныеОтборы();
	КонецЕсли;
	
	// Реестр интересов.
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		РеестрИнтересов, "НачалоПериода", Дата(1, 1, 1), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		РеестрИнтересов, "ОкончаниеПериода", Дата(1, 1, 1), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		РеестрИнтересов, "ТекущаяДата", ТекущаяДатаСеанса(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		РеестрИнтересов, "Календарь", Календарь, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		РеестрИнтересов, "Менеджеры", ОтборМенеджеры, Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		РеестрИнтересов.Отбор, "Сценарий", СценарийПродаж, ВидСравненияКомпоновкиДанных.Равно);
	
	// Реестр обращений.
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		РеестрОбращений, "НачалоПериода", Дата(1, 1, 1), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		РеестрОбращений, "ОкончаниеПериода", Дата(1, 1, 1), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		РеестрОбращений, "ТекущаяДата", ТекущаяДатаСеанса(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		РеестрОбращений, "Менеджеры", ОтборМенеджеры, Истина);
	
	CRM_СмещениеДатыТекущегоСеанса = СмещениеСтандартногоВремени(ЧасовойПоясСеанса());
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		РеестрОбращений, "CRM_СмещениеДатыТекущегоСеанса", CRM_СмещениеДатыТекущегоСеанса);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		РеестрОбращений, "СтрокаТелефонныйЗвонок", НСтр("ru = 'Телефонный звонок'"), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		РеестрОбращений, "СтрокаПропущенныйТелефонныйЗвонок", НСтр("ru = 'Пропущенный телефонный звонок'"), Истина);
	
	Период.ДатаНачала = НачалоНедели(ТекущаяДатаСеанса());
	Период.ДатаОкончания = КонецНедели(ТекущаяДатаСеанса());
	ПериодСтатистики = Перечисления.Периодичность.Квартал;
	
	Если Параметры.Свойство("Сценарий") Тогда
		СценарийПродаж = Параметры.Сценарий;
		Если ЗначениеЗаполнено(СценарийПродаж) Тогда
			ИсточникиЛидов.ЗагрузитьЗначения(ИсточникиЛидовСценария(СценарийПродаж));
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьКоллекциюЦветов();
	Элементы.ГруппаЗаглушка.Видимость = Истина;
	Элементы.ГруппаОтчеты.Видимость = Ложь;
	Элементы.ГруппаИтоги.Видимость = Ложь;
	
	// +Рабочий стол
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// -Рабочий стол
	
	// +CRM_РаботаСВнешнимиБиблиотеками
	CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ПриСозданииНаСервере(ЭтотОбъект);
	// -CRM_РаботаСВнешнимиБиблиотеками
	
	Если Параметры.Свойство("CRM_КонтекстВызова") Тогда
		Если Параметры.CRM_КонтекстВызова = "МоиПродажи" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПутьКлиента.ОткрытиеВОдинКлик.МоиПродажи");
		ИначеЕсли Параметры.CRM_КонтекстВызова = "РазделКлиенты" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПутьКлиента.ОткрытиеВОдинКлик.РазделКлиенты");
		ИначеЕсли Параметры.CRM_КонтекстВызова = "УниверсальныйРабочийСтол" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПутьКлиента.ОткрытиеВОдинКлик.УниверсальныйРабочийСтол");
		КонецЕсли;
	Иначе
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "CRM_ЛоготипРабочегоСтола") Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПутьКлиента.ОткрытиеВОдинКлик.ОткрытиеБезКонтекста");
		КонецЕсли;
	КонецЕсли;
	
	// +УО расшифровки.
	ИдентификаторыУсловногоОформленияСтруктура = Новый Структура;
	
	// Инициализация условного оформления для расшифровки данных из диаграмм верхней диагонали.
	ВыполнитьРасшифровкуВыбранногоСтолбца("ИсходныеДанныеИсточники");
	ВыполнитьРасшифровкуВыбранногоСтолбца("ИсходныеДанныеИсточники1");
	ВыполнитьРасшифровкуВыбранногоСтолбца("ИсходныеДанныеОтвал");
	ВыполнитьРасшифровкуВыбранногоСтолбца("ИсходныеДанныеПричиныПотериИнтересов");
	
	СравнениеСтатистики = ВидСравненияКомпоновкиДанных.Меньше;
	
	УстановитьУсловноеОформлениеВидимостиДляОтбора(Элементы.ИсходныеДанныеСтатистика, "Период", Неопределено);
	УстановитьУсловноеОформлениеВидимостиДляОтбора(Элементы.ИсходныеДанныеСтатистика, "КоличествоП", 0, СравнениеСтатистики, Ложь);
	УстановитьУсловноеОформлениеВидимостиДляОтбора(Элементы.ИсходныеДанныеСтатистика, "КоличествоТ", 0, СравнениеСтатистики, Ложь);
	УстановитьУсловноеОформлениеВидимостиДляОтбора(Элементы.ИсходныеДанныеСтатистика, "КоличествоЗавершенныхП", 0, СравнениеСтатистики, Ложь);
	УстановитьУсловноеОформлениеВидимостиДляОтбора(Элементы.ИсходныеДанныеСтатистика, "КоличествоЗавершенныхТ", 0, СравнениеСтатистики, Ложь);
	
	ВыполнитьОтборСтатистикиПоЗавершенным(Ложь);
	// -УО расшифровки.
	
	// +Валюта колонок расшифроки.
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаУправленческогоУчета = ?(ЗначениеЗаполнено(ВалютаУправленческогоУчета), Строка(ВалютаУправленческогоУчета), "RUB");
	ВалютаУправленческогоУчета = " (" + ВалютаУправленческогоУчета + ")";
	
	Элементы.ИсходныеДанныеИсточникиСумма.Заголовок =
		Элементы.ИсходныеДанныеИсточникиСумма.Заголовок + ВалютаУправленческогоУчета;
	Элементы.ИсходныеДанныеИсточникиСуммаСконвертированныхИнтересов.Заголовок =
		Элементы.ИсходныеДанныеИсточникиСуммаСконвертированныхИнтересов.Заголовок + ВалютаУправленческогоУчета;
	Элементы.ИсходныеДанныеОтвалСумма.Заголовок =
		Элементы.ИсходныеДанныеОтвалСумма.Заголовок + ВалютаУправленческогоУчета;
	Элементы.ИсходныеДанныеИсточники1Сумма.Заголовок =
		Элементы.ИсходныеДанныеИсточники1Сумма.Заголовок + ВалютаУправленческогоУчета;
	Элементы.ИсходныеДанныеИсточники1СуммаСконвертированныхИнтересов.Заголовок =
		Элементы.ИсходныеДанныеИсточники1СуммаСконвертированныхИнтересов.Заголовок + ВалютаУправленческогоУчета;
	// -Валюта колонок расшифроки.
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// +CRM_РаботаСВнешнимиБиблиотеками
	CRM_РаботаСВнешнимиБиблиотекамиКлиент.ПриОткрытииФормы(ЭтотОбъект);
	// -CRM_РаботаСВнешнимиБиблиотеками
	
	Если ПорядокГруппВерхнейГоризонтали.Количество() <> 3 Тогда
		ПорядокГруппВерхнейГоризонтали.Очистить();
		
		ПорядокГруппВерхнейГоризонтали.Добавить("ГруппаОтчетИсточникиОбращений",	"Источники обращений");
		ПорядокГруппВерхнейГоризонтали.Добавить("ГруппаОтчетОтвалКлиентов",			"Отвал лидов/сделок");
		ПорядокГруппВерхнейГоризонтали.Добавить("ГруппаОтчетСумма",					"Сумма");
	Иначе
		УстановитьПорядокГруппВерхнейГоризонтали();
	КонецЕсли;
	
	Реестр_ПоказатьИнтересы(Команды.Найти("Реестр_ПоказатьИнтересы"));
	Статистика_ПоказатьИнтересы(Команды.Найти("Статистика_ПоказатьИнтересы"));
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура - обработчик события формы "ПриЗакрытии".
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИсточникиОбращенийВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	ОтключитьОбработчикОжидания("СброситьСвязанныеОтчеты");
	ЭтоВыборЭлементаДиаграммы = Истина;
	ОбновитьСвязанныеОтчеты(ЗначениеДиаграммы.Источник, ЗначениеДиаграммы.Состояние);
	ТекЗначениеДиаграммы = ЗначениеДиаграммы.Источник;
	
	ЖирныйШрифт = Новый Шрифт(, , Истина);
	
	Компоненты = Новый Массив;
	Компоненты.Добавить(ПредставлениеОтбора);
	Компоненты.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '   Состояние: '")));
	Компоненты.Добавить(Новый ФорматированнаяСтрока(Строка(ЗначениеДиаграммы.Состояние), ЖирныйШрифт));
	ПредставлениеОтбораССостоянием = Новый ФорматированнаяСтрока(Компоненты);
	
	Компоненты = Новый Массив;
	Компоненты.Добавить(ПредставлениеОтбора);
	Компоненты.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '   Источник: '")));
	Компоненты.Добавить(Новый ФорматированнаяСтрока(Строка(ЗначениеДиаграммы.Источник), ЖирныйШрифт));
	ПредставлениеОтбораСИсточником = Новый ФорматированнаяСтрока(Компоненты);
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогиHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	НажатыйЭлемент = ДанныеСобытия.Element;
	
	Если НажатыйЭлемент.id = "result_hint" Тогда
		СтандартнаяОбработка = Ложь;
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Клиенты находят путь - это отношение количества новых лидов на входе в воронку продаж к закрытым успешно интересам с этими лидами.
			|Конверсия - это отношение интересов в воронке продаж к лидам, умноженное на 100%.'"), , "Информация...");
		
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПутьКлиента.Удобство.ПодсказкаДляДетализации");
	КонецЕсли;
	
КонецПроцедуры // ИтогиHTMLПриНажатии()

&НаКлиенте
Процедура ОтвалКлиентовHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ПриНажатииНаДиаграммуВерхнейВертикали(Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры // ОтвалКлиентовHTMLПриНажатии()

&НаКлиенте
Процедура СуммаИнтересовHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ПриНажатииНаДиаграммуВерхнейВертикали(Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры // СуммаИнтересовHTMLПриНажатии()

&НаКлиенте
Процедура ИсточникОбращенийHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ПриНажатииНаДиаграммуВерхнейВертикали(Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры // ИсточникОбращенийHTMLПриНажатии()

&НаКлиенте
Процедура ПричиныПотериИнтересовHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ДокументБраузера	= Элемент.Документ;
	ОкноБраузера		= ДокументБраузера.defaultView;
	
	Если ОкноБраузера.ext_selectedBarData = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаПричину = ОкноБраузера.ext_selectedBarData.reasonRef;
	
	Если ТипЗнч(СсылкаНаПричину) = Тип("Строка") И СтрНайти(СсылкаНаПричину, "e1cib/data") > 0 Тогда
		СсылкаНаПричину = CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуИзНавигационной(СсылкаНаПричину);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаПричину) Тогда
		// Если была нажата гиперссылка "Расшифровать".
		Если СтрНайти(ДанныеСобытия.Href, "РасшифроватьСтолбецДиаграммы") > 0 Тогда
			ВыполнитьРасшифровкуВыбранногоСтолбца("ИсходныеДанныеПричиныПотериИнтересов", СсылкаНаПричину);
			ТекущийЭлемент = Элементы["ИзменитьВидОтчетаПричиныПотериИнтересов"];
			ИзменитьВидОтчета(Команды.Найти("ИзменитьВидОтчета"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПричиныПотериИнтересовHTMLПриНажатии()

&НаКлиенте
Процедура СтатистикаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ДокументБраузера	= Элемент.Документ;
	ОкноБраузера		= ДокументБраузера.defaultView;
	
	Если ОкноБраузера.ext_selectedBarData = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндексВыбранногоПериода = ОкноБраузера.ext_selectedBarData.index;
	ЭтоОтборПоТекущемуПериоду = ОкноБраузера.ext_selectedBarData.isCurrent;
	
	Если ТипЗнч(ИндексВыбранногоПериода) = Тип("Число") Тогда
		ВыполнитьРасшифровкуВыбранногоСтолбца(
			"ИсходныеДанныеСтатистика", ИндексВыбранногоПериода + 1, 1, ЭтоОтборПоТекущемуПериоду);
		
		ТекущийЭлемент = Элементы["ИзменитьВидОтчетаСтатистика"];
		ИзменитьВидОтчета(Команды.Найти("ИзменитьВидОтчета"));
	КонецЕсли;
	
КонецПроцедуры // СтатистикаHTMLПриНажатии()

&НаКлиенте
Процедура РеестрОбращенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанныеСписка = Элементы.РеестрОбращений.ТекущиеДанные;
	
	Если ТекущиеДанныеСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанныеСписка.Ссылка);
	
КонецПроцедуры // РеестрОбращенийВыбор()

&НаКлиенте
Процедура ОтборСуммаИнтересовОтПриИзменении(Элемент)
	
	Если ОтборСуммаИнтересовДо <> 0 И ОтборСуммаИнтересовОт > ОтборСуммаИнтересовДо Тогда
		ОтборСуммаИнтересовОт = 0;
	КонецЕсли;
	
КонецПроцедуры // ОтборСуммаИнтересовОтПриИзменении()

&НаКлиенте
Процедура ОтборСуммаИнтересовДоПриИзменении(Элемент)
	
	Если ОтборСуммаИнтересовОт <> 0 И ОтборСуммаИнтересовДо < ОтборСуммаИнтересовОт Тогда
		ОтборСуммаИнтересовДо = 0;
	КонецЕсли;
	
КонецПроцедуры // ОтборСуммаИнтересовДоПриИзменении()

&НаКлиенте
Процедура ИзменитьВидОтчета(Команда)
	
	Кнопка = ТекущийЭлемент;
	Если Не СтрНачинаетсяС(Кнопка.Имя, "ИзменитьВидОтчета") Тогда
		Возврат;
	КонецЕсли;
	
	ПоложениеГруппы = СтрЗаменить(Кнопка.Имя, "ИзменитьВидОтчета", "Группа");
	
	ГруппаСтраницы = Элементы.Найти(ПоложениеГруппы + "Страницы");
	Если ГруппаСтраницы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтраницаДиаграмма	= Элементы.Найти(ПоложениеГруппы + "Диаграмма");
	СтраницаТаблица		= Элементы.Найти(ПоложениеГруппы + "Таблица");
	
	Если ГруппаСтраницы.ТекущаяСтраница = СтраницаДиаграмма Тогда
		ГруппаСтраницы.ТекущаяСтраница = СтраницаТаблица;
		Кнопка.Картинка = БиблиотекаКартинок.CRM_Диаграмма;
	ИначеЕсли ГруппаСтраницы.ТекущаяСтраница = СтраницаТаблица Тогда
		ГруппаСтраницы.ТекущаяСтраница = СтраницаДиаграмма;
		Кнопка.Картинка = БиблиотекаКартинок.ТабличныйДокументВставитьРазрывСтраницы;
		
		// Снять отборы в таблице-расшифровке.
		ВыполнитьРасшифровкуВыбранногоСтолбца(СтраницаТаблица.ПодчиненныеЭлементы[0].Имя);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьВидОтчета()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗагрузитьСохраненныеОтборы()
	
	СохраненныеНастройки = ХранилищеОбщихНастроек.Загрузить(ИмяФормы, "СохраненныеНастройки");
	Если СохраненныеНастройки <> Неопределено Тогда
		Для каждого Настройка Из СохраненныеНастройки Цикл
			ДобавитьКомандуОтбора(Настройка.Идентификатор, Настройка.Наименование, Настройка.Менеджеры);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьОтборы()
	
	Настройки = Новый Массив;
	Для каждого Строка Из СохраненныеОтборы Цикл
		Настройки.Добавить(Новый Структура("Идентификатор, Наименование, Менеджеры",
			Строка.Идентификатор, Строка.Наименование, Строка.Менеджеры));
	КонецЦикла;
	ХранилищеОбщихНастроек.Сохранить(ИмяФормы, "СохраненныеНастройки", Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуОтбора(Идентификатор, Наименование, Менеджеры, Пометка = Ложь)
	
	НовСтр = СохраненныеОтборы.Добавить();
	НовСтр.Идентификатор = Идентификатор;
	НовСтр.Наименование = Наименование;
	НовСтр.Менеджеры = Менеджеры;

	Команда = Команды.Добавить(Идентификатор);
	Команда.Заголовок = Наименование;
	Команда.Действие = "Подключаемый_Отбор_Пользовательский";
			
	Элемент = Элементы.Добавить(Идентификатор, Тип("КнопкаФормы"), Элементы.ГруппаСохраненныеОтборы);
	Элемент.ИмяКоманды = Команда.Имя;
	Элемент.Пометка = Пометка;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьКомандуОтбора(Идентификатор)
	
	Элемент = Элементы.Найти(Идентификатор);
	Если Элемент <> Неопределено Тогда
		Элементы.Удалить(Элемент);
	КонецЕсли;
	Команда = Команды.Найти(Идентификатор);
	Если Команда <> Неопределено Тогда
		Команды.Удалить(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуОтбора()
	Для каждого Элемент Из Элементы.ГруппаМенюОтбор.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			Для каждого Элемент1 Из Элемент.ПодчиненныеЭлементы Цикл
				Если Элемент1.Пометка Тогда
					Элемент1.Пометка = Ложь;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если Элемент.Пометка Тогда
				Элемент.Пометка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьРезультатКомпоновкиДанных(СКДДанные, Параметры = Неопределено, Отбор = Неопределено,
	 РезультатДерево = Ложь,
	 ВариантНастроек = "")
	
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		ПараметрыНастройки = СКДДанные.Параметры;
		Для Каждого ПараметрКлючЗначение Из Параметры Цикл
			Параметр = ПараметрыНастройки.Найти(ПараметрКлючЗначение.Ключ);
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = ПараметрКлючЗначение.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Отбор <> Неопределено Тогда
	КонецЕсли;
	
	Если ВариантНастроек = "" Тогда
		Настройки = СКДДанные.НастройкиПоУмолчанию;
	Иначе
		Настройки = СКДДанные.ВариантыНастроек[ВариантНастроек].Настройки;
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКДДанные, Настройки, , ,
		 Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , , Истина);
	
	Если РезультатДерево Тогда
		Результат = Новый ДеревоЗначений;
	Иначе
		Результат = Новый ТаблицаЗначений();
	КонецЕсли;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗакрытиеРазвернутойГруппы()
	
	РазворачиваемаяГруппа = Элементы.Найти(РазвернутаяГруппа);
	Если РазворачиваемаяГруппа <> Неопределено Тогда
		Если РазворачиваемаяГруппа.Скрыта() Тогда
			РазвернутаяГруппа = "";
			РазворачиваемаяГруппа.Поведение = ПоведениеОбычнойГруппы.Обычное;
			РазворачиваемаяГруппа.ОтображатьЗаголовок = Ложь;
			Если ТекЭлементПредставлениеОтбора <> "" Тогда
				Элемент = Элементы.Найти(ТекЭлементПредставлениеОтбора);
				Если Элемент <> Неопределено Тогда
					Элемент.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			КолонкаЯчейчкиПодробно = 5;
			
			Для Каждого ЭлементКоллекцииСписка Из СтрокиОтчетовДетализации Цикл
				СтрокаЗаголовкаОтчета = Детализация.Область(
					"R" + ЭлементКоллекцииСписка.Значение + "C" + КолонкаЯчейчкиПодробно);
				СтрокаЗаголовкаОтчета.Текст = "Подробнее...";
			КонецЦикла;
			
			Если РазворачиваемаяГруппа.Имя = "ГруппаОтчетДетализация" Тогда
				Элементы.Детализация.ТекущаяОбласть = Детализация.Область("R1C1:R1C1");
			КонецЕсли;
		Иначе
			ПодключитьОбработчикОжидания("ОбработатьЗакрытиеРазвернутойГруппы", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ИсточникиЛидовСценария(СценарийИнтереса)
	
	Если Не ЗначениеЗаполнено(СценарийИнтереса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	CRM_ИсточникиПолученияЛидовСценарии.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_ИсточникиПолученияЛидов.CRM_Сценарии КАК CRM_ИсточникиПолученияЛидовСценарии
	                      |ГДЕ
	                      |	CRM_ИсточникиПолученияЛидовСценарии.Сценарий = &Сценарий
	                      |	И НЕ CRM_ИсточникиПолученияЛидовСценарии.Ссылка.ПометкаУдаления
	                      |	И CRM_ИсточникиПолученияЛидовСценарии.Ссылка.Включено
	                      |	И CRM_ИсточникиПолученияЛидовСценарии.Ссылка.CRM_ИсточникЛидов
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	CRM_УчетныеЗаписиМессенджеровСценарии.Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_УчетныеЗаписиМессенджеров.CRM_Сценарии КАК CRM_УчетныеЗаписиМессенджеровСценарии
	                      |ГДЕ
	                      |	CRM_УчетныеЗаписиМессенджеровСценарии.Сценарий = &Сценарий
	                      |	И НЕ CRM_УчетныеЗаписиМессенджеровСценарии.Ссылка.ПометкаУдаления
	                      |	И CRM_УчетныеЗаписиМессенджеровСценарии.Ссылка.Включена
	                      |	И CRM_УчетныеЗаписиМессенджеровСценарии.Ссылка.CRM_ИсточникЛидов
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	УчетныеЗаписиЭлектроннойПочтыСценарии.Ссылка
	                      |ИЗ
	                      |	Справочник.УчетныеЗаписиЭлектроннойПочты.CRM_Сценарии КАК УчетныеЗаписиЭлектроннойПочтыСценарии
	                      |ГДЕ
	                      |	УчетныеЗаписиЭлектроннойПочтыСценарии.Сценарий = &Сценарий
	                      |	И НЕ УчетныеЗаписиЭлектроннойПочтыСценарии.Ссылка.ПометкаУдаления
	                      |	И УчетныеЗаписиЭлектроннойПочтыСценарии.Ссылка.CRM_ИсточникЛидов
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	УчетныеЗаписиЭлектроннойПочтыСценарии.Ссылка");

	Запрос.УстановитьПараметр("Сценарий", СценарийИнтереса);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#Область ОтборыЧерезУсловноеОформление

&НаСервере
Процедура ВыполнитьРасшифровкуВыбранногоСтолбца(
		ИмяЭлементаФормы, Значение1 = Неопределено, Значение2 = Неопределено, Значение3 = Неопределено)
	
	ЭлементФормы = Элементы[ИмяЭлементаФормы];
	
	Если ЭлементФормы = Элементы.ИсходныеДанныеПричиныПотериИнтересов Тогда
		УстановитьУсловноеОформлениеВидимостиДляОтбора(ЭлементФормы, "ПричинаОтказа", Значение1);
	ИначеЕсли ЭлементФормы = Элементы.ИсходныеДанныеСтатистика Тогда
		ВыполнитьОтборСтатистикиПоЗавершенным(Ложь);
		УстановитьУсловноеОформлениеВидимостиДляОтбора(ЭлементФормы, "Период", Значение1);
		
		Если ЗначениеЗаполнено(ВыбраннаяКолонкаОтбораСтатистики) Тогда
			УстановитьУсловноеОформлениеВидимостиДляОтбора(ЭлементФормы, ВыбраннаяКолонкаОтбораСтатистики, Неопределено);
		КонецЕсли;
		
		Если Значение3 <> Неопределено Тогда
			ВыбраннаяКолонкаОтбораСтатистики = ?(Элементы.Статистика_ПоказатьИнтересы.Пометка, "Количество", "КоличествоЗавершенных");
			ВыбраннаяКолонкаОтбораСтатистики = ВыбраннаяКолонкаОтбораСтатистики + ?(Значение3, "Т", "П");
			
			УстановитьУсловноеОформлениеВидимостиДляОтбора(ЭлементФормы, ВыбраннаяКолонкаОтбораСтатистики, Значение2);
		КонецЕсли;
	Иначе
		УстановитьУсловноеОформлениеВидимостиДляОтбора(ЭлементФормы, "Состояние", Значение1);
		УстановитьУсловноеОформлениеВидимостиДляОтбора(ЭлементФормы, "Источник", Значение2);
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьРасшифровкуВыбранногоИсточника()

&НаСервере
Функция ИнициализироватьЭлементУсловногоОформленияДляОтбора(ЭлементФормы, ИмяРеквизита)
	
	УсловноеОформлениеФормы = ЭтотОбъект.УсловноеОформление;
	КлючИдентификатора = ЭлементФормы.Имя + ИмяРеквизита;
	
	Если ИдентификаторыУсловногоОформленияСтруктура.Свойство(КлючИдентификатора) Тогда
		ЭлементУсловногоОформления = УсловноеОформлениеФормы.ПолучитьОбъектПоИдентификатору(
			ИдентификаторыУсловногоОформленияСтруктура[КлючИдентификатора]);
	Иначе
		ЭлементУсловногоОформления = УсловноеОформлениеФормы.Элементы.Добавить();
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		ИдентификаторУО = УсловноеОформлениеФормы.ПолучитьИдентификаторПоОбъекту(ЭлементУсловногоОформления);
		ИдентификаторыУсловногоОформленияСтруктура.Вставить(КлючИдентификатора, ИдентификаторУО);
		
		ДобавитьЭлементУсловногоОформления(ЭлементФормы, ЭлементУсловногоОформления);
	КонецЕсли;
	
	Возврат ЭлементУсловногоОформления;
	
КонецФункции // ИнициализироватьЭлементУсловногоОформленияДляОтбора()

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимостиДляОтбора(
		ЭлементФормы, ИмяРеквизита, ЗначениеРеквизита, ВидСравнения = Неопределено, ПроверкаЗаполнения = Истина)
	
	ЭлементУсловногоОформления = ИнициализироватьЭлементУсловногоОформленияДляОтбора(ЭлементФормы, ИмяРеквизита);
	ЭлементУсловногоОформления.Использование = ЗначениеЗаполнено(ЗначениеРеквизита);
	
	ОтборУсловногоОформления = ЭлементУсловногоОформления.Отбор;
	
	Если ОтборУсловногоОформления.Элементы.Количество() = 0 Тогда
		ПутьПоляКомпоновки = ЭлементФормы.ПутьКДанным + "." + ИмяРеквизита;
		
		ЭлементОтбора = ОтборУсловногоОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПутьПоляКомпоновки);
		ЭлементОтбора.ВидСравнения		= ?(ЗначениеЗаполнено(ВидСравнения), ВидСравнения, ВидСравненияКомпоновкиДанных.НеРавно);
		ЭлементОтбора.ПравоеЗначение	= Неопределено;
		
		Если ПроверкаЗаполнения Тогда
			ЭлементОтбора = ОтборУсловногоОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПутьПоляКомпоновки);
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Заполнено;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементУсловногоОформления.Использование Тогда
		ОтборУсловногоОформления.Элементы[0].ПравоеЗначение = ЗначениеРеквизита;
	КонецЕсли;
	
КонецПроцедуры //УстановитьУсловноеОформлениеВидимостиДляОтбора()

&НаСервере
Процедура ДобавитьЭлементУсловногоОформления(ЭлементФормы, ЭлементУсловногоОформления)
	
	Для Каждого ТекущееПолеДерева Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ТекущееПолеДерева) = Тип("ГруппаФормы") Тогда
			ДобавитьЭлементУсловногоОформления(ТекущееПолеДерева, ЭлементУсловногоОформления);
		КонецЕсли;
		
		ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ТекущееПолеДерева.Имя);
		ПолеОформления.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры // ДобавитьЭлементУсловногоОформления()

&НаСервере
Процедура ВыполнитьОтборСтатистикиПоЗавершенным(ИспользоватьОтбор)
	
	ЭлементУсловногоОформления = ИнициализироватьЭлементУсловногоОформленияДляОтбора(
		Элементы.ИсходныеДанныеСтатистика, "Завершенные");
	ЭлементУсловногоОформления.Использование = ИспользоватьОтбор;
	
	ОтборУсловногоОформления = ЭлементУсловногоОформления.Отбор;
	
	Если ОтборУсловногоОформления.Элементы.Количество() = 0 Тогда
		ГруппаОтбора = ОтборУсловногоОформления.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("ИсходныеДанныеСтатистика.КоличествоЗавершенныхТ");
		ЭлементОтбора.ВидСравнения	= ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("ИсходныеДанныеСтатистика.КоличествоЗавершенныхП");
		ЭлементОтбора.ВидСравнения	= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	КонецЕсли;
	
КонецПроцедуры //УстановитьУсловноеОформлениеВидимостиДляОтбора()

#КонецОбласти

&НаКлиенте
Процедура ПриНажатииНаДиаграммуВерхнейВертикали(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ДокументБраузера	= Элемент.Документ;
	ОкноБраузера		= ДокументБраузера.defaultView;
	
	Если ОкноБраузера.ext_selectedBarData = Неопределено Тогда
		Если ЭтоВыборЭлементаДиаграммы Тогда
			ЭтоВыборЭлементаДиаграммы = Ложь;
			ИсточникиОбращенийПриАктивизации(Элементы.ИсточникОбращенийHTML);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СсылкаНаСостояние	= ОкноБраузера.ext_selectedBarData.statusRef;
	СсылкаНаИсточник	= ОкноБраузера.ext_selectedBarData.sourceRef;
	
	Если ТипЗнч(СсылкаНаСостояние) = Тип("Строка") И СтрНайти(СсылкаНаСостояние, "e1cib/data") > 0 Тогда
		СсылкаНаСостояние = CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуИзНавигационной(СсылкаНаСостояние);
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаИсточник) = Тип("Строка") И СтрНайти(СсылкаНаИсточник, "e1cib/data") > 0 Тогда
		СсылкаНаИсточник = CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуИзНавигационной(СсылкаНаИсточник);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаСостояние) И ЗначениеЗаполнено(СсылкаНаИсточник) Тогда
		Если Элемент.Имя = "ИсточникОбращенийHTML" Тогда
			ЭлементТаблица = "ИсходныеДанныеИсточники";
			ЭлементКнопкиПереключения = "ИзменитьВидОтчетаОтчетИсточникиОбращений";
		ИначеЕсли Элемент.Имя = "ОтвалКлиентовHTML" Тогда
			ЭлементТаблица = "ИсходныеДанныеОтвал";
			ЭлементКнопкиПереключения = "ИзменитьВидОтчетаОтчетОтвалКлиентов";
		ИначеЕсли Элемент.Имя = "СуммаИнтересовHTML" Тогда
			ЭлементТаблица = "ИсходныеДанныеИсточники1";
			ЭлементКнопкиПереключения = "ИзменитьВидОтчетаОтчетСумма";
		КонецЕсли;
		
		// Если была нажата гиперссылка "Расшифровать".
		Если СтрНайти(ДанныеСобытия.Href, "РасшифроватьСтолбецДиаграммы") > 0 Тогда
			ВыполнитьРасшифровкуВыбранногоСтолбца(ЭлементТаблица, СсылкаНаСостояние, СсылкаНаИсточник);
			ТекущийЭлемент = Элементы[ЭлементКнопкиПереключения];
			ИзменитьВидОтчета(Команды.Найти("ИзменитьВидОтчета"));
			Возврат;
		КонецЕсли;
		
		Если Элемент.Имя = "ИсточникОбращенийHTML" Тогда
			// Обработка двойного клика на точку диаграммы.
			ЗначенияДиаграммы = Новый Структура;
			ЗначенияДиаграммы.Вставить("Состояние",	СсылкаНаСостояние);
			ЗначенияДиаграммы.Вставить("Источник",	СсылкаНаИсточник);
			
			ИсточникиОбращенийВыбор(Элемент, ЗначенияДиаграммы, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриНажатииНаДиаграммуВерхнейВертикали()

&НаСервереБезКонтекста
Функция ПолучитьСсылкуДляДиаграммы(СсылкаИлиСтроки)
	
	ТипЗначения = ТипЗнч(СсылкаИлиСтроки);
	
	Если ЗначениеЗаполнено(СсылкаИлиСтроки) Тогда
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗначения)
				Или Документы.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
			Возврат ПолучитьНавигационнуюСсылку(СсылкаИлиСтроки);
		ИначеЕсли ТипЗнч(СсылкаИлиСтроки) = Тип("Строка") Тогда
			Возврат СсылкаИлиСтроки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьСсылкуДляДиаграммы()

&НаСервереБезКонтекста
Функция ПолучитьЭлементДанныхДиаграммыИсточникаОбращений()
	
	ТочкаДиаграммы = Новый Структура;
	ТочкаДиаграммы.Вставить("status",		"");
	ТочкаДиаграммы.Вставить("source",		"");
	ТочкаДиаграммы.Вставить("barValue",		0);
	ТочкаДиаграммы.Вставить("statusRef",	Неопределено);
	ТочкаДиаграммы.Вставить("sourceRef",	Неопределено);
	ТочкаДиаграммы.Вставить("avgStageTime",	Неопределено);
	
	Возврат ТочкаДиаграммы;
	
КонецФункции // ПолучитьЭлементДанныхДиаграммыИсточникаОбращений()

&НаКлиенте
Процедура ИзменитьВариантОтображенияДиаграммыСтатистики()
	
	ДокументБраузера = Элементы.СтатистикаHTML.Документ;
	
	Если ДокументБраузера = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОкноБраузера = ДокументБраузера.defaultView;
	
	Если ОкноБраузера = Неопределено
			Или ОкноБраузера.document.readyState <> "complete" Тогда
		Возврат;
	КонецЕсли;
	
	ОкноБраузера.ext_showData = ?(
		Элементы.Статистика_ПоказатьИнтересы.Пометка,
		ОкноБраузера.data, ОкноБраузера.dataCompleted);
	
	ОкноБраузера.windowOnResize();
	
КонецПроцедуры // Статистика_ВариантОтображения()

&НаКлиенте
Процедура ОбновитьПереключательТублера(НажатыйЭлементТумблера)
	
	ГруппаТублера = НажатыйЭлементТумблера.Родитель;
	
	Для Каждого ТекущийЭлементТумблера Из ГруппаТублера.ПодчиненныеЭлементы Цикл
		Если ТекущийЭлементТумблера.Имя = НажатыйЭлементТумблера.Имя Тогда
			ПометкаЭлемента = Истина;
			ЦветЭлемента	= Новый Цвет(0, 160, 242); // ЦветаСтиля.CRM_ОсновнойГолубой;
		Иначе
			ПометкаЭлемента = Ложь;
			ЦветЭлемента	= Новый Цвет(163, 173, 187);
		КонецЕсли;
		
		ТекущийЭлементТумблера.Пометка		= ПометкаЭлемента;
		ТекущийЭлементТумблера.ЦветФона		= ЦветЭлемента;
		ТекущийЭлементТумблера.ЦветРамки	= ЦветЭлемента;
	КонецЦикла;
	
КонецПроцедуры // ОбновитьПереключательТублера()

#КонецОбласти

#Область КомандыФормы

&НаСервере
Процедура СформироватьНаСервере()
	
	Если Элементы.ГруппаЗаглушка.Видимость Тогда
		Элементы.ГруппаЗаглушка.Видимость = Ложь;
		Элементы.ГруппаОтчеты.Видимость = Истина;
		Элементы.ГруппаИтоги.Видимость = Истина;
	КонецЕсли;
	
	ЦветаСерийДиаграмм.Очистить();
	ТекЗначениеДиаграммы = Неопределено;
	ТекущаяДата = ТекущаяДатаСеанса();
	
	ОтборМенеджеровМассив = CRM_ОбщегоНазначенияКлиентСервер.ОбъединитьМассивы(
		ОтборМенеджеры.ВыгрузитьЗначения(), ОтборРоли.ВыгрузитьЗначения());
	
	// Первая секция
	ИсточникиОбращенийСформировать();
	ОтвалКлиентовСформировать();
	СуммаИнтересовСформировать();
	
	// Вторая секция
	ДетализацияИнтересовСформировать();
	ПричиныПотериИнтересовСформировать();
	
	// Третья секция - Реестр интересов
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		РеестрИнтересов.Отбор, "Сценарий", СценарийПродаж, ВидСравненияКомпоновкиДанных.Равно);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		РеестрИнтересов, "НачалоПериода", Период.ДатаНачала, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		РеестрИнтересов, "ОкончаниеПериода", Период.ДатаОкончания, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		РеестрИнтересов, "Менеджеры", ОтборМенеджеровМассив, Истина);
	
	// Третья секция - Реестр обращений
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		РеестрОбращений, "НачалоПериода", Период.ДатаНачала, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		РеестрОбращений, "ОкончаниеПериода", Период.ДатаОкончания, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		РеестрОбращений, "Менеджеры", ОтборМенеджеровМассив, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		РеестрОбращений, "ИсточникиЛидов",
		Справочники.CRM_ИсточникиПолученияЛидов.ИсточникиЛидовСценария(СценарийПродаж), Истина);
	
	СтатистикаСформировать();
	
	ЖирныйШрифт = Новый Шрифт(, , Истина);
	Компоненты = Новый Массив;

	Компоненты.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Сценарий: '")));
	Компоненты.Добавить(Новый ФорматированнаяСтрока(Строка(СценарийПродаж), ЖирныйШрифт));
	
	Компоненты.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '   Период: '")));
	Компоненты.Добавить(Новый ФорматированнаяСтрока(Строка(Период), ЖирныйШрифт));
	
	Компоненты.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '   Менеджеры: '")));
	Компоненты.Добавить(Новый ФорматированнаяСтрока(СтрСоединить(ОтборМенеджеры.ВыгрузитьЗначения(), "; "), ЖирныйШрифт));
	
	ПредставлениеОтбора = Новый ФорматированнаяСтрока(Компоненты);
	ПредставлениеОтбораССостоянием = ПредставлениеОтбора;
	ПредставлениеОтбораСИсточником = ПредставлениеОтбора;
	
	СформироватьИтоги();
	
	Если ВысотаСекций = 0 Тогда
		ВысотаСекций = 20;
	КонецЕсли;
	УстановитьВысотуСекций();
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьПродолжение", ЭтотОбъект);
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения, НСтр("ru='Данный отчет'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПродолжение(Результат, ДопПараметр) Экспорт

	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.ПутьКлиента.ДлительностьСценариев.ВремяОбновленияАРМ");
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПутьКлиента.Удобство.КоличествоФормированийОтчета");
	
	СформироватьНаСервере();
	ПодключитьОбработчикОжидания("ЗаполнитьИтоги", 0.1, Истина);
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.ПутьКлиента.ДлительностьСценариев.ВремяОбновленияАРМ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьОтчета(Команда)
	
	ЦветаСерий = Новый Соответствие;
	Для каждого Цвет Из ЦветаСерийДиаграмм Цикл
		ЦветаСерий.Вставить(Цвет.Источник, Цвет.Цвет);
	КонецЦикла;
	УсловияОтбора = Новый Структура("Сценарий, НачалоПериода, ОкончаниеПериода, Менеджеры, ИсточникиЛидов",
		СценарийПродаж, Период.ДатаНачала, Период.ДатаОкончания, ОтборМенеджеры, ИсточникиЛидов);
	ПараметрыОтчета = Новый Структура("Отбор, СформироватьПриОткрытии", УсловияОтбора, Истина);
	Если ТекущийЭлемент.Имя = "ПечатьОтчетаИсточникиОбращений" Тогда
		ПараметрыОтчета.Вставить("ИмяМакетаОтчета", "МакетИсточникОбращений");
		ПараметрыОтчета.Вставить("ВариантНастроек", "ДиаграммаИсточники");
		ПараметрыОтчета.Вставить("ЦветаСерий", ЦветаСерий);
	ИначеЕсли ТекущийЭлемент.Имя = "ПечатьОтчетаСумма" Тогда
		ПараметрыОтчета.Вставить("ИмяМакетаОтчета", "МакетИсточникОбращений");
		ПараметрыОтчета.Вставить("ВариантНастроек", "ДиаграммаСумма");
		ПараметрыОтчета.Вставить("ЦветаСерий", ЦветаСерий);
	ИначеЕсли ТекущийЭлемент.Имя = "ПечатьОтчетаОтвалКлиентов" Тогда
		ПараметрыОтчета.Вставить("ИмяМакетаОтчета", "МакетОтвалКлиентов");
		ПараметрыОтчета.Вставить("ВариантНастроек", "Диаграмма");
		ПараметрыОтчета.Вставить("ЦветаСерий", ЦветаСерий);
	ИначеЕсли ТекущийЭлемент.Имя = "ПечатьОтчетаПричиныПотериИнтересов" Тогда
		ПараметрыОтчета.Вставить("ИмяМакетаОтчета", "МакетПричиныПотериИнтересов");
		ПараметрыОтчета.Вставить("ВариантНастроек", "Диаграмма");
	Иначе
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Отчет.CRM_ПутьКлиента.Форма.ФормаОтчетаПечать", ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьОтчет(Команда)
	
	РазворачиваемаяГруппа = ТекущийЭлемент.Родитель.Родитель.Родитель;
	РазвернутаяГруппа = РазворачиваемаяГруппа.Имя;
	РазворачиваемаяГруппа.ОтображатьЗаголовок = Истина;
	РазворачиваемаяГруппа.Заголовок = " ";
	РазворачиваемаяГруппа.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
	
	ПодключитьОбработчикОжидания("УвеличитьОтчетПродолжение", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьОтчетПродолжение()
	
	РазворачиваемаяГруппа = Элементы.Найти(РазвернутаяГруппа);
	Если РазворачиваемаяГруппа <> Неопределено Тогда
		Для Каждого Элемент Из РазворачиваемаяГруппа.ПодчиненныеЭлементы Цикл
			Если СтрНачинаетсяС(Элемент.Имя, "ПредставлениеОтбора") Тогда
				ТекЭлементПредставлениеОтбора = Элемент.Имя;
				Элемент.Видимость = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		КолонкаЯчейчкиПодробно = 5;
		
		Для Каждого ЭлементКоллекцииСписка Из СтрокиОтчетовДетализации Цикл
			СтрокаЗаголовкаОтчета = Детализация.Область(
				"R" + ЭлементКоллекцииСписка.Значение + "C" + КолонкаЯчейчкиПодробно);
			СтрокаЗаголовкаОтчета.Текст = ЭлементКоллекцииСписка.Представление;
		КонецЦикла;
		
		РазворачиваемаяГруппа.Показать();
		ПодключитьОбработчикОжидания("ОбработатьЗакрытиеРазвернутойГруппы", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Информация(Команда)
	Если ТекущийЭлемент.Имя = "ИнформацияДетализация" Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Обращения – общее количество обращений.
                                      |Лиды - обращения от клиентов, с которыми нет активного интереса.'"), , "Информация...");
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПутьКлиента.Удобство.ПодсказкаДляДетализации");
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СценарийПродажПриИзменении(Элемент)
	Если ЗначениеЗаполнено(СценарийПродаж) Тогда
		ИсточникиЛидов.ЗагрузитьЗначения(ИсточникиЛидовСценария(СценарийПродаж));
	Иначе
		ИсточникиЛидов.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Отбор_ПоСебе(Команда)
	
	ТекущийОтбор = "";
	Элементы.ГруппаМенюОтбор.Заголовок = НСтр("ru = 'По себе'");
	СнятьПометкуОтбора();
	Элементы.Отбор_ПоСебе.Пометка = Истина;
	Элементы.Отбор_СохранитьТекущий.Доступность = Ложь;
	Элементы.Отбор_УдалитьТекущий.Доступность = Ложь;
	ОтборМенеджеры.Очистить();
	ОтборМенеджеры.Добавить(ТекущийПользователь);
	ОтборРоли.Очистить();
	Сформировать(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Отбор_ПоВсемДоступным(Команда)
	ТекущийОтбор = "";
	Элементы.ГруппаМенюОтбор.Заголовок = НСтр("ru = 'По всем доступным'");
	СнятьПометкуОтбора();
	Элементы.Отбор_ПоВсемДоступным.Пометка = Истина;
	Элементы.Отбор_СохранитьТекущий.Доступность = Ложь;
	Элементы.Отбор_УдалитьТекущий.Доступность = Ложь;
	ОтборМенеджеры.Очистить();
	ОтборМенеджеры.ЗагрузитьЗначения(Новый Массив(ДоступныеПользователи));
	ОтборРоли.ЗагрузитьЗначения(CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователям(ДоступныеПользователи).ВыгрузитьЗначения());
	ОтборРоли.Добавить(ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));

	Сформировать(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура Отбор_ПоПользователям(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("Отбор_ПоПользователям_Завершение", ЭтотОбъект);
	ПараметрыВыбора = Новый Структура("ОтборМенеджеры, ДоступныеМенеджеры", ОтборМенеджеры.ВыгрузитьЗначения()); 
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПутьКлиента.Удобство.ОтборПоПользователям");
	ОткрытьФорму("Отчет.CRM_ПутьКлиента.Форма.ФормаОтбораМенеджеров", ПараметрыВыбора, ЭтотОбъект, , ,
		 , ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура Отбор_ПоПользователям_Завершение(МассивПользователей, ДопПараметры) Экспорт
	
	Если МассивПользователей <> Неопределено И МассивПользователей.Количество() > 0 Тогда
		ТекущийОтбор = "";
		ОтборМенеджеры.ЗагрузитьЗначения(МассивПользователей);
		ОтборРоли.Очистить();
		Элементы.ГруппаМенюОтбор.Заголовок = НСтр("ru = 'По пользователям...'");
		СнятьПометкуОтбора();
		Элементы.Отбор_ПоПользователям.Пометка = Истина;
		Элементы.Отбор_СохранитьТекущий.Доступность = Истина;
		Элементы.Отбор_УдалитьТекущий.Доступность = Ложь;
		Сформировать(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Отбор_Пользовательский(Команда)
	
	Элемент = Элементы.Найти(Команда.Имя);
	Если Элемент <> Неопределено Тогда
		Настройка = СохраненныеОтборы.НайтиСтроки(Новый Структура("Идентификатор", Команда.Имя));
		Если Настройка.Количество() > 0 Тогда
			СнятьПометкуОтбора();
			Элемент.Пометка = Истина;
			Элементы.ГруппаМенюОтбор.Заголовок = Настройка[0].Наименование;
			ОтборМенеджеры.ЗагрузитьЗначения(Настройка[0].Менеджеры.ВыгрузитьЗначения());
			ОтборРоли.Очистить();
			Элементы.Отбор_СохранитьТекущий.Доступность = Ложь;
			Элементы.Отбор_УдалитьТекущий.Доступность = Истина;
			ТекущийОтбор = Настройка[0].Идентификатор;
			Сформировать(Неопределено);
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Данные настройки не найдены!'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отбор_СохранитьТекущий(Команда)
	ОписаниеОпопвещения = Новый ОписаниеОповещения("Отбор_СохранитьТекущий_Завершение", ЭтотОбъект);
	ПоказатьВводСтроки(ОписаниеОпопвещения, , НСтр("ru = 'Введите наименование настройки'"), 50);
КонецПроцедуры

&НаКлиенте
Процедура Отбор_СохранитьТекущий_Завершение(ИмяНастройки, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(ИмяНастройки) Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Продажи.ПутьКлиента.Удобство.СохранениеОтборовПоПользователям");
		ТекущийОтбор = "Отбор_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
		СнятьПометкуОтбора();
		ДобавитьКомандуОтбора(ТекущийОтбор, ИмяНастройки, ОтборМенеджеры, Истина);
		Элементы.ГруппаМенюОтбор.Заголовок = ИмяНастройки;
		Элементы.Отбор_СохранитьТекущий.Доступность = Ложь;
		Элементы.Отбор_УдалитьТекущий.Доступность = Истина;
		СохранитьОтборы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Отбор_УдалитьТекущий(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущийОтбор) Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьКомандуОтбора(ТекущийОтбор);
	СохранитьОтборы();
	Отбор_ПоСебе(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСвернутьРазвернутьГруппуНажатие(Элемент)
	
	ПоложениеГруппы = СтрЗаменить(Элемент.Имя, "ДекорацияРазвернуть", "");
	ПоложениеГруппы = СтрЗаменить(ПоложениеГруппы, "ДекорацияСвернуть", "");
	ИмяРеквизита = "СвернутаГруппа" + ПоложениеГруппы;
	
	Группа = Элементы.Найти("ГруппаОтчетов" + ПоложениеГруппы);
	Если Группа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Группа.Высота = ?(НЕ ЭтотОбъект[ИмяРеквизита], 0, ВысотаСекций);
	Для каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
		Если СтрНачинаетсяС(Элемент.Имя, "ЗаголовокСвернутойГруппы") Тогда
			Элемент.Видимость = Не ЭтотОбъект[ИмяРеквизита];
		Иначе
			Элемент.Видимость = ЭтотОбъект[ИмяРеквизита];
		КонецЕсли;
	КонецЦикла;
	ЭтотОбъект[ИмяРеквизита] = Не ЭтотОбъект[ИмяРеквизита];
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядокВерхнейГоризонтали(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПорядокГруппВерхнейГоризонтали", ПорядокГруппВерхнейГоризонтали);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
		"ИзменитьПорядокВерхнейГоризонталиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Отчет.CRM_ПутьКлиента.Форма.ФормаПорядкаВерхнейГоризонтали",
		ПараметрыФормы,
		ЭтотОбъект,
		КлючУникальности, , ,
		ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ИзменитьПорядокВерхнейГоризонтали()

&НаКлиенте
Процедура ИзменитьПорядокВерхнейГоризонталиЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		ПорядокГруппВерхнейГоризонтали = РезультатЗакрытия;
		УстановитьПорядокГруппВерхнейГоризонтали();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьПорядокВерхнейГоризонталиЗавершение()

&НаКлиенте
Процедура Реестр_ПоказатьИнтересы(Команда)
	
	Элементы.ГруппаСтраницРеестров.ТекущаяСтраница = Элементы.ГруппаСтраницыИнтересов;
	ОбновитьПереключательТублера(Элементы.Реестр_ПоказатьИнтересы);
	ОбновитьПоложениеПереключателяВариантаОтображения();
	
КонецПроцедуры // Реестр_ПоказатьИнтересы()

&НаКлиенте
Процедура Реестр_ПоказатьОбращения(Команда)
	
	Элементы.ГруппаСтраницРеестров.ТекущаяСтраница = Элементы.ГруппаСтраницыОбращений;
	ОбновитьПереключательТублера(Элементы.Реестр_ПоказатьОбращения);
	ОбновитьПоложениеПереключателяВариантаОтображения();
	
КонецПроцедуры // Реестр_ПоказатьОбращения()

&НаКлиенте
Процедура Статистика_ПоказатьЗавершенныеИнтересы(Команда)
	
	ОбновитьПереключательТублера(Элементы.Статистика_ПоказатьЗавершенныеИнтересы);
	ИзменитьВариантОтображенияДиаграммыСтатистики();
	ВыполнитьОтборСтатистикиПоЗавершенным(Истина);
	
КонецПроцедуры // Статистика_ПоказатьЗавершенныеИнтересы()

&НаКлиенте
Процедура Статистика_ПоказатьИнтересы(Команда)
	
	ОбновитьПереключательТублера(Элементы.Статистика_ПоказатьИнтересы);
	ИзменитьВариантОтображенияДиаграммыСтатистики();
	ВыполнитьОтборСтатистикиПоЗавершенным(Ложь);
	
КонецПроцедуры // Статистика_ПоказатьИнтересы()

#КонецОбласти

#Область ИсточникиОбращений

&НаСервере
Процедура ИсточникиОбращенийСформировать()
	
	/////////////////////////////////
	// 1. Данные.
	
	СКД = Отчеты.CRM_ПутьКлиента.ПолучитьМакет("МакетИсточникОбращений");
	
	Если ОтборСуммаИнтересовОт = 0 И ОтборСуммаИнтересовДо = 0 Тогда
		СКД.НаборыДанных.НаборДанных1.Запрос = СтрЗаменить(
			СКД.НаборыДанных.НаборДанных1.Запрос,
			"И (CRM_Интерес.ОжидаемаяВыручка МЕЖДУ &СуммаОт И &СуммаДо)", "");
	ИначеЕсли ОтборСуммаИнтересовДо = 0 Тогда
		СКД.НаборыДанных.НаборДанных1.Запрос = СтрЗаменить(
			СКД.НаборыДанных.НаборДанных1.Запрос,
			"И (CRM_Интерес.ОжидаемаяВыручка МЕЖДУ &СуммаОт И &СуммаДо)",
			"И (CRM_Интерес.ОжидаемаяВыручка >= &СуммаОт)");
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ПериодОтчета", Период);
	ПараметрыОтчета.Вставить("НачалоПериода", Период.ДатаНачала);
	ПараметрыОтчета.Вставить("СуммаОт", ОтборСуммаИнтересовОт);
	ПараметрыОтчета.Вставить("СуммаДо", ОтборСуммаИнтересовДо);
	ПараметрыОтчета.Вставить("ОкончаниеПериода", Период.ДатаОкончания);
	ПараметрыОтчета.Вставить("Сценарий", СценарийПродаж);
	ПараметрыОтчета.Вставить("ИсточникиЛидов", ИсточникиЛидов);
	ПараметрыОтчета.Вставить("Менеджеры", ОтборМенеджеры);
	ПараметрыОтчета.Вставить("Роли", ОтборРоли);
	ПараметрыОтчета.Вставить("Календарь", Календарь);
	ПараметрыОтчета.Вставить("ТекущаяДата", ТекущаяДата());
	
	ДеревоРезультат = ПолучитьРезультатКомпоновкиДанных(СКД, ПараметрыОтчета, , Истина);
	
	/////////////////////////////////
	// 2. Дополнительные источники.
	
	Если ДеревоРезультат.Строки.Найти("Обращения", "Состояние") = Неопределено Тогда
		НовСтр = ДеревоРезультат.Строки.Вставить(0);
		НовСтр.Состояние = "Обращения";
		НовСтр.Документ = 0;
		НовСтр.Сумма = 0;
	КонецЕсли;
	
	/////////////////////////////////
	// 3. Данные диаграммы.
	
	ЦветаСерийДиаграммы		= Новый Соответствие;
	МассивДанныхДиаграммы	= Новый Массив;
	
	/////////////////////////////////
	// 4. Формирование данных диаграммы и таблицы.
	
	Для Каждого ТекущаяСтрокаСостояния Из ДеревоРезультат.Строки Цикл
		ПустаяСтрокаИсточника = Неопределено;
		
		ТекущаяСтрокаСостояния.ОбъектСсылка = ТекущаяСтрокаСостояния.Состояние;
		
		Для Каждого ТекущаяСтрокаИсточника Из ТекущаяСтрокаСостояния.Строки Цикл
			ИсточникСтрокой = "";
			
			Если ЗначениеЗаполнено(ТекущаяСтрокаИсточника.Документ) Тогда
				ИсточникСтрокой = Строка(ТекущаяСтрокаИсточника.Источник);
				
				Если ЦветаСерийДиаграммы.Получить(ИсточникСтрокой) = Неопределено Тогда
					ЦветСерии = ЦветСерии(ТекущаяСтрокаИсточника.Источник);
					ЦветСтрокой = СтрШаблон("rgb(%1,%2,%3)", ЦветСерии.Красный, ЦветСерии.Зеленый, ЦветСерии.Синий);
					ЦветаСерийДиаграммы.Вставить(ИсточникСтрокой, ЦветСтрокой);
				КонецЕсли;
			Иначе
				ПустаяСтрокаИсточника = ТекущаяСтрокаИсточника;
				Если ТекущаяСтрокаСостояния.Строки.Количество() = 1 Тогда
					ТочкаДиаграммы = ПолучитьЭлементДанныхДиаграммыИсточникаОбращений();
					ТочкаДиаграммы["status"] = Строка(ТекущаяСтрокаСостояния.Состояние);
					
					МассивДанныхДиаграммы.Добавить(ТочкаДиаграммы);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			ТекущаяСтрокаИсточника.ОбъектСсылка = ТекущаяСтрокаИсточника.Источник;
			
			ТочкаДиаграммы = ПолучитьЭлементДанныхДиаграммыИсточникаОбращений();
			ТочкаДиаграммы["status"]		= Строка(ТекущаяСтрокаСостояния.Состояние);
			ТочкаДиаграммы["source"]		= ИсточникСтрокой;
			ТочкаДиаграммы["barValue"]		= ТекущаяСтрокаИсточника.Документ;
			ТочкаДиаграммы["statusRef"]		= ПолучитьСсылкуДляДиаграммы(ТекущаяСтрокаСостояния.Состояние);
			ТочкаДиаграммы["sourceRef"]		= ПолучитьСсылкуДляДиаграммы(ТекущаяСтрокаИсточника.Источник);
			ТочкаДиаграммы["avgStageTime"]	= Формат(ТекущаяСтрокаИсточника.СрокНаЭтапе, "ЧДЦ=2");
			
			МассивДанныхДиаграммы.Добавить(ТочкаДиаграммы);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ПустаяСтрокаИсточника) Тогда
			ТекущаяСтрокаСостояния.Строки.Удалить(ПустаяСтрокаИсточника);
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоРезультат, "ИсходныеДанныеИсточники");
	
	Если ДеревоРезультат.Строки.Количество() > 2 Тогда 
		КоличествоРасшифровок = ДеревоРезультат.Строки.Количество() - 2;
		CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики(
			"CRM_Статистика.Продажи.ПутьКлиента.Удобство.РасшифровкаЭтаповСценарияКромеПервогоИПоследнего",
			КоличествоРасшифровок);
	КонецЕсли;
	
	/////////////////////////////////
	// 5. Шаблон отсутствия данных.
	
	Если ЦветаСерийДиаграммы.Количество() = 0 Тогда
		ИсточникОбращенийHTML =
			Отчеты.CRM_ПутьКлиента.ПолучитьМакет("HTMLМакетОтсутствияДанныхДиаграммы").ПолучитьТекст();
		Возврат;
	КонецЕсли;
	
	/////////////////////////////////
	// 6. Установка параметров диаграммы.
	
	ИнтеграцияСВнешнейБиблиотекой = CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ПолучитьБлокИнтеграцииВнешнейБиблиотеки(
		Справочники.CRM_ВнешниеБиблиотеки.БиблиотекаОтображенияГрафиков, ЭтотОбъект.ФлагСовместимостиВнешнихБиблиотек);
	
	ИсточникОбращенийHTML = СтрЗаменить(
		Отчеты.CRM_ПутьКлиента.ПолучитьМакет("D3_ДиаграммаИсточникОбращений").ПолучитьТекст(),
		"{{CRM:PATH_TO_LIBRARY}}",
		ИнтеграцияСВнешнейБиблиотекой);
	
	ИсточникОбращенийHTML = СтрЗаменить(
		ИсточникОбращенийHTML,
		"""{{CRM:DATA}}""",
		CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(МассивДанныхДиаграммы));
	
	ИсточникОбращенийHTML = СтрЗаменить(
		ИсточникОбращенийHTML,
		"""{{CRM:COLORS}}""",
		CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(ЦветаСерийДиаграммы));
	
	ИсточникОбращенийHTML = СтрЗаменить(
		ИсточникОбращенийHTML, """{{CRM:SHOW_CONTEXT_MENU_FLAG}}""", "true");
	
	ИсточникОбращенийHTML = СтрЗаменить(
		ИсточникОбращенийHTML, """{{CRM:IS_MONEY_VALUES}}""", "false");
	
	ИсточникОбращенийHTML = CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ЗаменитьПутиВызоваБиблиотек(
		ЭтотОбъект.ИсточникиВнешнихБиблиотек, ИсточникОбращенийHTML);
	
КонецПроцедуры

&НаСервере
Функция ЦветСерии(Источник)
	
	СтрокиЦвет = ЦветаСерийДиаграмм.НайтиСтроки(Новый Структура("Источник", Источник));
	Если СтрокиЦвет.Количество() = 0 Тогда
		НовСтр = ЦветаСерийДиаграмм.Добавить();
		Цвет = ЦветИзКоллекции(ЦветаСерийДиаграмм.Количество());
		НовСтр.Цвет = Цвет;
		НовСтр.Источник = Источник;
	Иначе
		Цвет = СтрокиЦвет[0].Цвет;
	КонецЕсли;
	
	Возврат Цвет;
	
КонецФункции

&НаСервере
Функция ЦветИзКоллекции(Индекс)
	
	Возврат КоллекцияЦветов[Индекс % КоллекцияЦветов.Количество()].Значение;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКоллекциюЦветов()
	
	КоллекцияЦветов.Добавить(Новый Цвет(123, 31, 162));
	КоллекцияЦветов.Добавить(Новый Цвет(25, 118, 210));
	КоллекцияЦветов.Добавить(Новый Цвет(0, 150, 136));
	КоллекцияЦветов.Добавить(Новый Цвет(255, 235, 59));
	КоллекцияЦветов.Добавить(Новый Цвет(229, 115, 115));
	КоллекцияЦветов.Добавить(Новый Цвет(141, 110, 99));
	КоллекцияЦветов.Добавить(Новый Цвет(126, 87, 194));
	КоллекцияЦветов.Добавить(Новый Цвет(77, 208, 225));
	КоллекцияЦветов.Добавить(Новый Цвет(129, 199, 132));
	КоллекцияЦветов.Добавить(Новый Цвет(251, 192, 45));
	КоллекцияЦветов.Добавить(Новый Цвет(244, 67, 54));
	КоллекцияЦветов.Добавить(Новый Цвет(93, 64, 55));
	КоллекцияЦветов.Добавить(Новый Цвет(81, 45, 168));
	КоллекцияЦветов.Добавить(Новый Цвет(0, 188, 212));
	КоллекцияЦветов.Добавить(Новый Цвет(56, 142, 60));
	КоллекцияЦветов.Добавить(Новый Цвет(255, 152, 0));
	КоллекцияЦветов.Добавить(Новый Цвет(240, 98, 146));
	КоллекцияЦветов.Добавить(Новый Цвет(97, 97, 97));
	КоллекцияЦветов.Добавить(Новый Цвет(48, 63, 159));
	КоллекцияЦветов.Добавить(Новый Цвет(0, 151, 167));
	КоллекцияЦветов.Добавить(Новый Цвет(156, 204, 101));
	КоллекцияЦветов.Добавить(Новый Цвет(255, 112, 67));
	КоллекцияЦветов.Добавить(Новый Цвет(194, 24, 91));
	КоллекцияЦветов.Добавить(Новый Цвет(158, 158, 158));
	КоллекцияЦветов.Добавить(Новый Цвет(100, 181, 246));
	КоллекцияЦветов.Добавить(Новый Цвет(0, 121, 107));
	КоллекцияЦветов.Добавить(Новый Цвет(175, 180, 43));
	КоллекцияЦветов.Добавить(Новый Цвет(230, 74, 25));
	КоллекцияЦветов.Добавить(Новый Цвет(186, 104, 200));
	КоллекцияЦветов.Добавить(Новый Цвет(69, 90, 100));
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиОбращенийПриАктивизации(Элемент)
	Если Не ЭтоВыборЭлементаДиаграммы И ТекЗначениеДиаграммы <> Неопределено Тогда
		ПодключитьОбработчикОжидания("СброситьСвязанныеОтчеты", 0.2, Истина);
		ТекЗначениеДиаграммы = Неопределено;
	КонецЕсли;
	ЭтоВыборЭлементаДиаграммы = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СброситьСвязанныеОтчеты()

	ОтвалКлиентовСформировать();
	СуммаИнтересовСформировать();
	ДетализацияИнтересовСформировать();
	ПричиныПотериИнтересовСформировать();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(РеестрИнтересов.Отбор, "СостояниеИнтереса",
		 Неопределено, ВидСравненияКомпоновкиДанных.Равно, ,
		 Ложь);

	ПредставлениеОтбораССостоянием = ПредставлениеОтбора;
	ПредставлениеОтбораСИсточником = ПредставлениеОтбора;

КонецПроцедуры

&НаСервере
Процедура ОбновитьСвязанныеОтчеты(Источник, Состояние)
	
	// 1. Отвал лидов/сделок.
	ОтвалКлиентовСформировать(Источник);
	
	// 2. Сумма интересов.
	СуммаИнтересовСформировать(Источник);
	
	// 3. Детализация.
	ДетализацияИнтересовСформировать(Состояние);
	
	// 4. Потери интересов.
	ПричиныПотериИнтересовСформировать(Состояние);
	
	// 5. Реестр интересов.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		РеестрИнтересов.Отбор, "СостояниеИнтереса", Состояние, ВидСравненияКомпоновкиДанных.Равно, , Истина);
	
КонецПроцедуры // ОбновитьСвязанныеОтчеты()

#КонецОбласти

#Область ОтвалКлиентов

&НаСервере
Процедура ОтвалКлиентовСформировать(Источник = Неопределено)
	
	/////////////////////////////////
	// 1. Данные.
	
	СКД = Отчеты.CRM_ПутьКлиента.ПолучитьМакет("МакетОтвалКлиентов");
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ПериодОтчета", Период);
	ПараметрыОтчета.Вставить("НачалоПериода", Период.ДатаНачала);
	ПараметрыОтчета.Вставить("ОкончаниеПериода", Период.ДатаОкончания);
	ПараметрыОтчета.Вставить("Сценарий", СценарийПродаж);
	ПараметрыОтчета.Вставить("ИсточникиЛидов", ИсточникиЛидов);
	ПараметрыОтчета.Вставить("Менеджеры", ОтборМенеджеры);
	ПараметрыОтчета.Вставить("Роли", ОтборРоли);
	ПараметрыОтчета.Вставить("Календарь", Календарь);
	ПараметрыОтчета.Вставить("ТекущаяДата", ТекущаяДата());
	
	Если ЗначениеЗаполнено(Источник) И ИсходныеДанныеОтвал.ПолучитьЭлементы().Количество() > 0 Тогда
		ДеревоРезультат = РеквизитФормыВЗначение("ИсходныеДанныеОтвал");
	Иначе
		ДеревоРезультат = ПолучитьРезультатКомпоновкиДанных(СКД, ПараметрыОтчета, , Истина);
	КонецЕсли;
	
	/////////////////////////////////
	// 2. Данные диаграммы.
	
	ЦветаСерийДиаграммы		= Новый Соответствие;
	МассивДанныхДиаграммы	= Новый Массив;
	
	/////////////////////////////////
	// 3. Формирование данных диаграммы и таблицы.
	
	Для Каждого ТекущаяСтрокаСостояния Из ДеревоРезультат.Строки Цикл
		ПустаяСтрокаИсточника = Неопределено;
		
		ТекущаяСтрокаСостояния.ОбъектСсылка = ТекущаяСтрокаСостояния.Состояние;
		
		Для Каждого ТекущаяСтрокаИсточника Из ТекущаяСтрокаСостояния.Строки Цикл
			Если ЗначениеЗаполнено(Источник) И Источник <> ТекущаяСтрокаИсточника.Источник Тогда
				Продолжить;
			КонецЕсли;
			
			ИсточникСтрокой = "";
			
			Если ЗначениеЗаполнено(ТекущаяСтрокаИсточника.Документ) Тогда
				ИсточникСтрокой = Строка(ТекущаяСтрокаИсточника.Источник);
				
				Если ЦветаСерийДиаграммы.Получить(ИсточникСтрокой) = Неопределено Тогда
					ЦветСерии = ЦветСерии(ТекущаяСтрокаИсточника.Источник);
					ЦветСтрокой = СтрШаблон("rgb(%1,%2,%3)", ЦветСерии.Красный, ЦветСерии.Зеленый, ЦветСерии.Синий);
					ЦветаСерийДиаграммы.Вставить(ИсточникСтрокой, ЦветСтрокой);
				КонецЕсли;
			Иначе
				ПустаяСтрокаИсточника = ТекущаяСтрокаИсточника;
				Если ТекущаяСтрокаСостояния.Строки.Количество() = 1 Тогда
					ТочкаДиаграммы = ПолучитьЭлементДанныхДиаграммыИсточникаОбращений();
					ТочкаДиаграммы["status"] = Строка(ТекущаяСтрокаСостояния.Состояние);
					
					МассивДанныхДиаграммы.Добавить(ТочкаДиаграммы);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			ТекущаяСтрокаИсточника.ОбъектСсылка = ТекущаяСтрокаИсточника.Источник;
			
			ТочкаДиаграммы = ПолучитьЭлементДанныхДиаграммыИсточникаОбращений();
			ТочкаДиаграммы["status"]	= Строка(ТекущаяСтрокаСостояния.Состояние);
			ТочкаДиаграммы["source"]	= ИсточникСтрокой;
			ТочкаДиаграммы["barValue"]	= ТекущаяСтрокаИсточника.Документ;
			ТочкаДиаграммы["statusRef"] = ПолучитьСсылкуДляДиаграммы(ТекущаяСтрокаСостояния.Состояние);
			ТочкаДиаграммы["sourceRef"] = ПолучитьСсылкуДляДиаграммы(ТекущаяСтрокаИсточника.Источник);
			
			МассивДанныхДиаграммы.Добавить(ТочкаДиаграммы);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ПустаяСтрокаИсточника) Тогда
			ТекущаяСтрокаСостояния.Строки.Удалить(ПустаяСтрокаИсточника);
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоРезультат, "ИсходныеДанныеОтвал");
	
	/////////////////////////////////
	// 5. Шаблон отсутствия данных.
	
	Если ЦветаСерийДиаграммы.Количество() = 0 Тогда
		ОтвалКлиентовHTML =
			Отчеты.CRM_ПутьКлиента.ПолучитьМакет("HTMLМакетОтсутствияДанныхДиаграммы").ПолучитьТекст();
		Возврат;
	КонецЕсли;
	
	/////////////////////////////////
	// 6. Установка параметров диаграммы.
	
	ИнтеграцияСВнешнейБиблиотекой = CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ПолучитьБлокИнтеграцииВнешнейБиблиотеки(
		Справочники.CRM_ВнешниеБиблиотеки.БиблиотекаОтображенияГрафиков, ЭтотОбъект.ФлагСовместимостиВнешнихБиблиотек);
	
	ОтвалКлиентовHTML = СтрЗаменить(
		Отчеты.CRM_ПутьКлиента.ПолучитьМакет("D3_ДиаграммаИсточникОбращений").ПолучитьТекст(),
		"{{CRM:PATH_TO_LIBRARY}}",
		ИнтеграцияСВнешнейБиблиотекой);
	
	ОтвалКлиентовHTML = СтрЗаменить(
		ОтвалКлиентовHTML,
		"""{{CRM:DATA}}""",
		CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(МассивДанныхДиаграммы));
	
	ОтвалКлиентовHTML = СтрЗаменить(
		ОтвалКлиентовHTML,
		"""{{CRM:COLORS}}""",
		CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(ЦветаСерийДиаграммы));
	
	ОтвалКлиентовHTML = СтрЗаменить(
		ОтвалКлиентовHTML, """{{CRM:SHOW_CONTEXT_MENU_FLAG}}""", "false");
	
	ОтвалКлиентовHTML = СтрЗаменить(
		ОтвалКлиентовHTML, """{{CRM:IS_MONEY_VALUES}}""", "false");
	
	ОтвалКлиентовHTML = CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ЗаменитьПутиВызоваБиблиотек(
		ЭтотОбъект.ИсточникиВнешнихБиблиотек, ОтвалКлиентовHTML);
	
КонецПроцедуры

#КонецОбласти

#Область СуммаИнтересов

&НаСервере
Процедура СуммаИнтересовСформировать(Источник = Неопределено)
	
	/////////////////////////////////
	// 1. Данные.
	
	ДеревоРезультат = РеквизитФормыВЗначение("ИсходныеДанныеИсточники");
	
	/////////////////////////////////
	// 2. Данные диаграммы.
	
	ЕстьДанныеДиаграммы		= Ложь;
	ЦветаСерийДиаграммы		= Новый Соответствие;
	МассивДанныхДиаграммы	= Новый Массив;
	
	/////////////////////////////////
	// 3. Формирование данных диаграммы.
	
	Для Каждого ТекущаяСтрокаСостояния Из ДеревоРезультат.Строки Цикл
		Если ТекущаяСтрокаСостояния.Строки.Количество() = 0 Тогда
			ТочкаДиаграммы = ПолучитьЭлементДанныхДиаграммыИсточникаОбращений();
			ТочкаДиаграммы["status"] = Строка(ТекущаяСтрокаСостояния.Состояние);
			МассивДанныхДиаграммы.Добавить(ТочкаДиаграммы);
		КонецЕсли;
		
		Для Каждого ТекущаяСтрокаИсточника Из ТекущаяСтрокаСостояния.Строки Цикл
			Если ЗначениеЗаполнено(Источник) И Источник <> ТекущаяСтрокаИсточника.Источник Тогда
				Продолжить;
			КонецЕсли;
			
			ИсточникСтрокой = Строка(ТекущаяСтрокаИсточника.Источник);
			
			ТочкаДиаграммы = ПолучитьЭлементДанныхДиаграммыИсточникаОбращений();
			ТочкаДиаграммы["status"]		= Строка(ТекущаяСтрокаСостояния.Состояние);
			ТочкаДиаграммы["source"]		= ИсточникСтрокой;
			ТочкаДиаграммы["avgStageTime"]	= Формат(ТекущаяСтрокаИсточника.СрокНаЭтапе, "ЧДЦ=2");
			
			Если ЗначениеЗаполнено(ТекущаяСтрокаИсточника.Сумма) Тогда
				ТочкаДиаграммы["barValue"] = ТекущаяСтрокаИсточника.Сумма;
				ЕстьДанныеДиаграммы = Истина;
			КонецЕсли;
			
			ЦветСерии = ЦветСерии(ТекущаяСтрокаИсточника.Источник);
			Если ЦветаСерийДиаграммы.Получить(ИсточникСтрокой) = Неопределено Тогда
				ЦветСтрокой = СтрШаблон("rgb(%1,%2,%3)", ЦветСерии.Красный, ЦветСерии.Зеленый, ЦветСерии.Синий);
				ЦветаСерийДиаграммы.Вставить(ИсточникСтрокой, ЦветСтрокой);
			КонецЕсли;
			
			ТочкаДиаграммы["statusRef"] = ПолучитьСсылкуДляДиаграммы(ТекущаяСтрокаСостояния.Состояние);
			ТочкаДиаграммы["sourceRef"] = ПолучитьСсылкуДляДиаграммы(ТекущаяСтрокаИсточника.Источник);
			
			МассивДанныхДиаграммы.Добавить(ТочкаДиаграммы);
		КонецЦикла;
	КонецЦикла;
	
	/////////////////////////////////
	// 4. Шаблон отсутствия данных.
	
	Если Не ЕстьДанныеДиаграммы Тогда
		СуммаИнтересовHTML =
			Отчеты.CRM_ПутьКлиента.ПолучитьМакет("HTMLМакетОтсутствияДанныхДиаграммы").ПолучитьТекст();
		Возврат;
	КонецЕсли;
	
	/////////////////////////////////
	// 5. Установка параметров диаграммы.
	
	ИнтеграцияСВнешнейБиблиотекой = CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ПолучитьБлокИнтеграцииВнешнейБиблиотеки(
		Справочники.CRM_ВнешниеБиблиотеки.БиблиотекаОтображенияГрафиков, ЭтотОбъект.ФлагСовместимостиВнешнихБиблиотек);
	
	СуммаИнтересовHTML = СтрЗаменить(
		Отчеты.CRM_ПутьКлиента.ПолучитьМакет("D3_ДиаграммаИсточникОбращений").ПолучитьТекст(),
		"{{CRM:PATH_TO_LIBRARY}}",
		ИнтеграцияСВнешнейБиблиотекой);
	
	СуммаИнтересовHTML = СтрЗаменить(
		СуммаИнтересовHTML,
		"""{{CRM:DATA}}""",
		CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(МассивДанныхДиаграммы));
	
	СуммаИнтересовHTML = СтрЗаменить(
		СуммаИнтересовHTML,
		"""{{CRM:COLORS}}""",
		CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(ЦветаСерийДиаграммы));
	
	СуммаИнтересовHTML = СтрЗаменить(
		СуммаИнтересовHTML, """{{CRM:SHOW_CONTEXT_MENU_FLAG}}""", "false");
	
	СуммаИнтересовHTML = СтрЗаменить(
		СуммаИнтересовHTML, """{{CRM:IS_MONEY_VALUES}}""", "true");
	
	СуммаИнтересовHTML = CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ЗаменитьПутиВызоваБиблиотек(
		ЭтотОбъект.ИсточникиВнешнихБиблиотек, СуммаИнтересовHTML);
	
КонецПроцедуры

#КонецОбласти

#Область ДетализацияИнтересов

&НаСервере
Процедура ДетализацияИнтересовСформировать(Состояние = Неопределено)
	
	Макет = Отчеты.CRM_ПутьКлиента.ПолучитьМакет("МакетДетализация");
	ДеревоРезультат = РеквизитФормыВЗначение("ИсходныеДанныеИсточники");
	
	Детализация.Очистить();
	СтрокиОтчетовДетализации.Очистить();
	
	Обл = Макет.ПолучитьОбласть("СтрокаПустая");
	Детализация.Вывести(Обл);
	
	Если Состояние = Неопределено Тогда
		// Секция Состояние
		Обл = Макет.ПолучитьОбласть("ШапкаСостояниеВсе");
		Детализация.Вывести(Обл);
		
		Обл = Макет.ПолучитьОбласть("СтрокаДанныхВсе");
		Обл.Параметры["Состояние"] = "Обращения";
		СтрокаДереваОбращения = ДеревоРезультат.Строки.Найти("Обращения", "Состояние");
		КолОбращений = СтрокаДереваОбращения.Строки.Итог("Документ");
		Обл.Параметры["Количество"] = КолОбращений;
		Детализация.Вывести(Обл);

		Обл = Макет.ПолучитьОбласть("СтрокаДанныхВсе");
		Обл.Параметры["Состояние"] = "Лиды";
		СтрокаДереваЛиды = ДеревоРезультат.Строки.Найти("Лиды", "Состояние");
		КолЛидов = СтрокаДереваЛиды.Строки.Итог("Документ");
		Обл.Параметры["Количество"] = КолЛидов;
		Детализация.Вывести(Обл);

		Обл = Макет.ПолучитьОбласть("СтрокаДанныхВсе");
		Обл.Параметры["Состояние"] = "Интересы";
		КолИнтересов = ДеревоРезультат.Строки.Итог("СконвертированныхИнтересов");
		Конверсия = ?(КолЛидов = 0, 0, КолИнтересов / КолЛидов * 100);
		Обл.Параметры["Количество"] = КолИнтересов;
		Обл.Параметры["Конверсия"] = Формат(Конверсия, "ЧДЦ=0; ЧФ=Ч%");
		Обл.Параметры["Сумма"] = ДеревоРезультат.Строки.Итог("СуммаСконвертированныхИнтересов");
		Детализация.Вывести(Обл);

		ДеревоОтвалов = РеквизитФормыВЗначение("ИсходныеДанныеОтвал");
		КолОтвалов = ДеревоОтвалов.Строки.Итог("Документ");
		Обл = Макет.ПолучитьОбласть("СтрокаДанныхКоличество");
		Обл.Параметры["Состояние"] = "Отвалы";
		Обл.Параметры["Количество"] = КолОтвалов;
		Детализация.Вывести(Обл);
		
		Обл = Макет.ПолучитьОбласть("СтрокаПустая");
		Детализация.Вывести(Обл);
		
		// Секция
		Детализация.НачатьАвтогруппировкуСтрок();
		Обл = Макет.ПолучитьОбласть("ШапкаИсточникиОбращения");
		Обл.Параметры["ИмяОтчета"] = "АнализПричинОтклонения";
		// Обл.Область("R1C5:R1C5").Примечание.Текст = "Анализ причин отклонения";
		Детализация.Вывести(Обл, 1);
		СтрокиОтчетовДетализации.Добавить(Детализация.ВысотаТаблицы, "Анализ причин отклонения");
		
		Для каждого Строка Из СтрокаДереваОбращения.Строки Цикл
			Если Не ЗначениеЗаполнено(Строка.Источник) Тогда
				Продолжить;
			КонецЕсли;
			Обл = Макет.ПолучитьОбласть("СтрокаДанныхКоличество");
			Обл.Параметры["Состояние"] = Строка.Источник;
			Обл.Параметры["Количество"] = Строка.Документ;
			Детализация.Вывести(Обл, 2);
		КонецЦикла;
		Детализация.ЗакончитьАвтогруппировкуСтрок();
		
		Обл = Макет.ПолучитьОбласть("СтрокаПустая");
		Детализация.Вывести(Обл);
		
		// Секция
		Детализация.НачатьАвтогруппировкуСтрок();
		Обл = Макет.ПолучитьОбласть("ШапкаИсточникиЛиды");
		Обл.Параметры["ИмяОтчета"] = "АнализПричинОтклонения";
		// Обл.Область("R1C5:R1C5").Примечание.Текст = "Анализ причин отклонения";
		Детализация.Вывести(Обл, 1);
		СтрокиОтчетовДетализации.Добавить(Детализация.ВысотаТаблицы, "Анализ причин отклонения");
		
		ДанныеПоЛидам = Новый Соответствие;
		ОтвалыЛидов = РеквизитФормыВЗначение("ИсходныеДанныеОтвал").Строки[0];

		Для каждого Строка Из СтрокаДереваЛиды.Строки Цикл
			Если Не ЗначениеЗаполнено(Строка.Источник) Тогда
				Продолжить;
			КонецЕсли;
			Обл = Макет.ПолучитьОбласть("СтрокаДанныхКоличествоСумма");
			Обл.Параметры["Состояние"] = Строка.Источник;
			Обл.Параметры["Количество"] = Строка.Документ;
			// Сумма = Отвал
			СтрокаОтвалов = ОтвалыЛидов.Строки.Найти(Строка.Источник, "Источник");
			Если СтрокаОтвалов <> Неопределено Тогда
				Обл.Параметры["Сумма"] = СтрокаОтвалов.Документ;
			КонецЕсли;
			ДанныеПоЛидам.Вставить(Строка.Источник, Строка.Документ); 
			Детализация.Вывести(Обл, 2);
		КонецЦикла;
		Детализация.ЗакончитьАвтогруппировкуСтрок();
		
		Обл = Макет.ПолучитьОбласть("СтрокаПустая");
		Детализация.Вывести(Обл);
		
		// Секция
		Детализация.НачатьАвтогруппировкуСтрок();
		Обл = Макет.ПолучитьОбласть("ШапкаИсточникиИнтересы");
		Обл.Параметры["ИмяОтчета"] = "ПричиныОтклоненияИнтересов";
		// Обл.Область("R1C5:R1C5").Примечание.Текст = "Причины отклонения интересов";
		Детализация.Вывести(Обл, 1);
		СтрокиОтчетовДетализации.Добавить(Детализация.ВысотаТаблицы, "Причины отклонения интересов");
		ДанныеПоИнтересам = Новый Соответствие;
		Для каждого СтрокаДрева Из ДеревоРезультат.Строки Цикл
			Если ТипЗнч(СтрокаДрева.Состояние) = Тип("Строка") Тогда
				Продолжить;
			КонецЕсли;
			Для каждого Строка Из СтрокаДрева.Строки Цикл
				Если Не ЗначениеЗаполнено(Строка.Источник) Тогда
					Продолжить;
				КонецЕсли;
				ТекДанные = ДанныеПоИнтересам.Получить(Строка.Источник);
				//Если ТекДанные = Неопределено Тогда
				//	ДанныеПоИнтересам.Вставить(Строка.Источник, Новый Структура("Количество, Сумма",
				//		Строка.СконвертированныхИнтересов, Строка.СуммаСконвертированныхИнтересов));
				// Иначе
				//	ТекДанные.Количество = ТекДанные.Количество + Строка.СконвертированныхИнтересов;
				//	ТекДанные.Сумма = ТекДанные.Сумма + Строка.СуммаСконвертированныхИнтересов;
				//	ДанныеПоИнтересам.Вставить(Строка.Источник, ТекДанные);
				//КонецЕсли;
				Если ТекДанные = Неопределено Тогда
					ДанныеПоИнтересам.Вставить(Строка.Источник, Новый Структура("Количество, Сумма",
						Строка.Документ, Строка.Сумма));
				Иначе
					ТекДанные.Количество = ТекДанные.Количество + Строка.Документ;
					ТекДанные.Сумма = ТекДанные.Сумма + Строка.Сумма;
					ДанныеПоИнтересам.Вставить(Строка.Источник, ТекДанные);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Для каждого Строка Из ДанныеПоИнтересам Цикл
			Если Не ЗначениеЗаполнено(Строка.Значение.Количество) Тогда
				Продолжить;
			КонецЕсли;
			Обл = Макет.ПолучитьОбласть("СтрокаДанныхВсе");
			Обл.Параметры["Состояние"] = Строка.Ключ;
			Обл.Параметры["Количество"] = Строка.Значение.Количество;
			Обл.Параметры["Сумма"] = Строка.Значение.Сумма;
			Лидов = ДанныеПоЛидам.Получить(Строка.Ключ);
			Конверсия = ?(ЗначениеЗаполнено(Лидов), Строка.Значение.Количество / Лидов * 100, 0);
			Обл.Параметры["Конверсия"] = Формат(Конверсия, "ЧДЦ=0; ЧФ=Ч%");
			Детализация.Вывести(Обл, 2);
		КонецЦикла;
		Детализация.ЗакончитьАвтогруппировкуСтрок();
		
	ИначеЕсли Состояние = "Обращения" Тогда
		// Секция Состояние
		Обл = Макет.ПолучитьОбласть("ШапкаСостояниеКоличество");
		Детализация.Вывести(Обл);

		Обл = Макет.ПолучитьОбласть("СтрокаДанныхКоличество");
		Обл.Параметры["Состояние"] = Состояние;
		СтрокаДерева = ДеревоРезультат.Строки.Найти(Состояние, "Состояние");
		Если СтрокаДерева = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Обл.Параметры["Количество"] = СтрокаДерева.Документ;
		Детализация.Вывести(Обл);

		Обл = Макет.ПолучитьОбласть("СтрокаПустая");
		Детализация.Вывести(Обл);
		
		СтрокаДереваОбращения = ДеревоРезультат.Строки.Найти("Обращения", "Состояние");
		
		// Секция
		Детализация.НачатьАвтогруппировкуСтрок();
		Обл = Макет.ПолучитьОбласть("ШапкаИсточникиОбращения");
		Обл.Параметры["ИмяОтчета"] = "АнализПричинОтклонения";
		// Обл.Область("R1C5:R1C5").Примечание.Текст = "Анализ причин отклонения";
		Детализация.Вывести(Обл, 1);
		СтрокиОтчетовДетализации.Добавить(Детализация.ВысотаТаблицы, "Анализ причин отклонения");
		
		Для каждого Строка Из СтрокаДереваОбращения.Строки Цикл
			Если Не ЗначениеЗаполнено(Строка.Источник) Тогда
				Продолжить;
			КонецЕсли;
			Обл = Макет.ПолучитьОбласть("СтрокаДанныхКоличество");
			Обл.Параметры["Состояние"] = Строка.Источник;
			Обл.Параметры["Количество"] = Строка.Документ;
			Детализация.Вывести(Обл, 2);
		КонецЦикла;
		Детализация.ЗакончитьАвтогруппировкуСтрок();
		
	ИначеЕсли Состояние = "Лиды" Тогда
		// Секция Состояние
		Обл = Макет.ПолучитьОбласть("ШапкаСостояниеКоличество");
		Детализация.Вывести(Обл);

		Обл = Макет.ПолучитьОбласть("СтрокаДанныхКоличество");
		Обл.Параметры["Состояние"] = Состояние;
		СтрокаДерева = ДеревоРезультат.Строки.Найти(Состояние, "Состояние");
		Если СтрокаДерева = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Обл.Параметры["Количество"] = СтрокаДерева.Документ;
		Детализация.Вывести(Обл);

		Обл = Макет.ПолучитьОбласть("СтрокаПустая");
		Детализация.Вывести(Обл);
		
		ДеталиЛидов = ДетализацияЛидов();
		
		// Секция
		Детализация.НачатьАвтогруппировкуСтрок();
		Обл = Макет.ПолучитьОбласть("ШапкаИсточникиКоличествоВремя");
		Обл.Параметры["ИмяОтчета"] = "АнализОбращений";
		// Обл.Область("R1C5:R1C5").Примечание.Текст = "Анализ обращений";
		Детализация.Вывести(Обл, 1);
		СтрокиОтчетовДетализации.Добавить(Детализация.ВысотаТаблицы, "Анализ обращений");
		ДанныеПоИнтересам = Новый Соответствие;
		Для каждого Строка Из ДеталиЛидов.Источники.Строки Цикл
			Обл = Макет.ПолучитьОбласть("СтрокаДанныхКоличествоВремя");
			Обл.Параметры["Состояние"] = Строка.Источник;
			Обл.Параметры["Количество"] = Строка.Документ;
			Обл.Параметры["ВремяОбработкиСред"] = Строка.ПользовательскиеПоляПоле1;
			Обл.Параметры["ВремяОбработкиПлан"] = ПредставлениеСрокаОбработкиКанала(Строка.Источник);
			Детализация.Вывести(Обл, 2);
		КонецЦикла;
		Детализация.ЗакончитьАвтогруппировкуСтрок();
		
		Обл = Макет.ПолучитьОбласть("СтрокаПустая");
		Детализация.Вывести(Обл);
		
		// Секция
		Детализация.НачатьАвтогруппировкуСтрок();
		Обл = Макет.ПолучитьОбласть("ШапкаДетальноКоличество");
		Обл.Параметры["ИмяОтчета"] = "АнализПричинОтклоненияОбращений";
		// Обл.Область("R1C5:R1C5").Примечание.Текст = "Анализ причин отклонения обращений";
		Детализация.Вывести(Обл, 1);
		СтрокиОтчетовДетализации.Добавить(Детализация.ВысотаТаблицы, "Анализ причин отклонения обращений");
		ДанныеПоИнтересам = Новый Соответствие;
		Для каждого Строка Из ДеталиЛидов.Состояния.Строки Цикл
			Обл = Макет.ПолучитьОбласть("СтрокаДанныхКоличество");
			Обл.Параметры["Состояние"] = Строка.СостояниеЛида;
			Обл.Параметры["Количество"] = Строка.Документ;
			Детализация.Вывести(Обл, 2);
		КонецЦикла;
		Детализация.ЗакончитьАвтогруппировкуСтрок();
	ИначеЕсли Состояние.Завершено Тогда
		// Секция Состояние
		Обл = Макет.ПолучитьОбласть("ШапкаСостояниеКоличествоСумма");
		Детализация.Вывести(Обл);

		Обл = Макет.ПолучитьОбласть("СтрокаДанныхКоличествоСумма");
		Обл.Параметры["Состояние"] = "Интересы";
		СтрокаДерева = ДеревоРезультат.Строки.Найти(Состояние, "Состояние");
		Если СтрокаДерева = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Обл.Параметры["Количество"] = СтрокаДерева.Документ;
		Обл.Параметры["Сумма"] = СтрокаДерева.Сумма;
		Детализация.Вывести(Обл);

		Обл = Макет.ПолучитьОбласть("СтрокаПустая");
		Детализация.Вывести(Обл);
		
		// Секция
		Детализация.НачатьАвтогруппировкуСтрок();
		Обл = Макет.ПолучитьОбласть("ШапкаИсточникиКоличествоСумма");
		Обл.Параметры["ИмяОтчета"] = "ПричиныОтклоненияИнтересов";
		// Обл.Область("R1C5:R1C5").Примечание.Текст = "Причины отклонения интересов";
		Детализация.Вывести(Обл, 1);
		СтрокиОтчетовДетализации.Добавить(Детализация.ВысотаТаблицы, "Причины отклонения интересов");
		ДанныеПоИнтересам = Новый Соответствие;
		Для каждого Строка Из СтрокаДерева.Строки Цикл
			Обл = Макет.ПолучитьОбласть("СтрокаДанныхКоличествоСумма");
			Обл.Параметры["Состояние"] = Строка.Источник;
			Обл.Параметры["Количество"] = Строка.Документ;
			Обл.Параметры["Сумма"] = Строка.Сумма;
			Детализация.Вывести(Обл, 2);
		КонецЦикла;
		Детализация.ЗакончитьАвтогруппировкуСтрок();
	Иначе
		Обл = Макет.ПолучитьОбласть("ШапкаСостояниеВсе");
		Обл.Область("R1C1:R1C1").Текст = Состояние;
		Детализация.Вывести(Обл);

		Обл = Макет.ПолучитьОбласть("СтрокаДанныхВсе");
		Обл.Параметры["Состояние"] = "Интересы";
		СтрокаДерева = ДеревоРезультат.Строки.Найти(Состояние, "Состояние");
		Если СтрокаДерева = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СтрокаДереваЛиды = ДеревоРезультат.Строки.Найти("Лиды", "Состояние");
		КолЛидов = СтрокаДереваЛиды.Строки.Итог("Документ");
        ИнтересовНаЭтапе = СтрокаДерева.Документ;
        ИнтересовНаЭтапеСумма = СтрокаДерева.Сумма;
		ИнтересовНаСледЭтапах = 0;
		ИнтересовНаСледЭтапахСумма = 0;
		Для Ном = ДеревоРезультат.Строки.Индекс(СтрокаДерева) + 1 По ДеревоРезультат.Строки.Количество() - 1 Цикл
			ИнтересовНаСледЭтапах = ИнтересовНаСледЭтапах + ДеревоРезультат.Строки[Ном].Документ;
			ИнтересовНаСледЭтапахСумма = ИнтересовНаСледЭтапахСумма 
				+ ?(ЗначениеЗаполнено(ДеревоРезультат.Строки[Ном].Сумма), ДеревоРезультат.Строки[Ном].Сумма, 0);
		КонецЦикла;

		ДеревоОтвалов = РеквизитФормыВЗначение("ИсходныеДанныеОтвал");
		СтрокаОтвал = ДеревоОтвалов.Строки.Найти(Состояние, "Состояние");
		Если СтрокаОтвал = Неопределено Тогда
			ОтклоненоНаЭтапе = 0;
			ОтклоненоНаЭтапеСумма = 0;
		Иначе
			ОтклоненоНаЭтапе = СтрокаОтвал.Документ;
			ОтклоненоНаЭтапеСумма = СтрокаОтвал.Сумма;
		КонецЕсли;

		КолИнтересов = ИнтересовНаЭтапе + ИнтересовНаСледЭтапах + ОтклоненоНаЭтапе;
		Конверсия = ?(Не ЗначениеЗаполнено(КолЛидов), 0, КолИнтересов / КолЛидов * 100);
		Обл.Параметры["Количество"] = КолИнтересов;
		Обл.Параметры["Конверсия"] = Формат(Конверсия, "ЧДЦ=0; ЧФ=Ч%");
		Обл.Параметры["Сумма"] = СтрокаДерева.Сумма;
		Детализация.Вывести(Обл);
		
		Обл = Макет.ПолучитьОбласть("СтрокаПустая");
		Детализация.Вывести(Обл);
		
		Детализация.НачатьАвтогруппировкуСтрок();
		Обл = Макет.ПолучитьОбласть("ШапкаИсточникиВсе");
		Обл.Параметры["ИмяОтчета"] = "КонтрольРуководителя";
		// Обл.Область("R1C5:R1C5").Примечание.Текст = "Контроль руководителя";
		Детализация.Вывести(Обл, 1);
		СтрокиОтчетовДетализации.Добавить(Детализация.ВысотаТаблицы, "Контроль руководителя");
		Для каждого Строка Из СтрокаДерева.Строки Цикл
			Если Не ЗначениеЗаполнено(Строка.Источник) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаЛидов = СтрокаДереваЛиды.Строки.Найти(Строка.Источник, "Источник");
			Если СтрокаЛидов = Неопределено Тогда
				Конверсия = 0;
			Иначе
				Конверсия = ?(СтрокаЛидов.Документ = 0, 0, Строка.Документ / СтрокаЛидов.Документ * 100);
			КонецЕсли;
			Обл = Макет.ПолучитьОбласть("СтрокаДанныхВсе");
			Обл.Параметры["Состояние"] = Строка.Источник;
			Обл.Параметры["Количество"] = Строка.Документ;
			Обл.Параметры["Сумма"] = Строка.Сумма;
			Обл.Параметры["Конверсия"] = Формат(Конверсия, "ЧДЦ=0; ЧФ=Ч%");
			Детализация.Вывести(Обл, 2);
		КонецЦикла;
		
		Обл = Макет.ПолучитьОбласть("СтрокаПустая");
		Детализация.Вывести(Обл);
		
		// Секция
		Детализация.НачатьАвтогруппировкуСтрок();
		Обл = Макет.ПолучитьОбласть("ШапкаДетальноВсе");
		Обл.Параметры["ИмяОтчета"] = "ПричиныОтклоненияИнтересов";
		// Обл.Область("R1C5:R1C5").Примечание.Текст = "Причины отклонения интересов";
		Детализация.Вывести(Обл, 1);
		СтрокиОтчетовДетализации.Добавить(Детализация.ВысотаТаблицы, "Причины отклонения интересов");
		
		Обл = Макет.ПолучитьОбласть("СтрокаДанныхВсе");
		Обл.Параметры["Состояние"] = НСтр("ru = 'В работе'");
		Обл.Параметры["Количество"] = ИнтересовНаЭтапе;
		Конверсия = ?(КолЛидов = 0, 0, ИнтересовНаЭтапе / КолЛидов * 100);
		Обл.Параметры["Конверсия"] = Формат(Конверсия, "ЧДЦ=0; ЧФ=Ч%");
		Обл.Параметры["Сумма"] = ИнтересовНаЭтапеСумма;
		Детализация.Вывести(Обл, 2);
		
		Обл = Макет.ПолучитьОбласть("СтрокаДанныхВсе");
		Обл.Параметры["Состояние"] = НСтр("ru = 'Переведено на след. этапы'");
		Обл.Параметры["Количество"] = ИнтересовНаСледЭтапах;
		Конверсия = ?(КолЛидов = 0, 0, ИнтересовНаСледЭтапах / КолЛидов * 100);
		Обл.Параметры["Конверсия"] = Формат(Конверсия, "ЧДЦ=0; ЧФ=Ч%");
		Обл.Параметры["Сумма"] = ИнтересовНаСледЭтапахСумма;
		Детализация.Вывести(Обл, 2);
		
		Обл = Макет.ПолучитьОбласть("СтрокаДанныхВсе");
		Обл.Параметры["Состояние"] = НСтр("ru = 'Отклонено на этапе'");
		Обл.Параметры["Количество"] = ОтклоненоНаЭтапе;
		Конверсия = ?(КолЛидов = 0, 0, ОтклоненоНаЭтапе / КолЛидов * 100);
		Обл.Параметры["Конверсия"] = Формат(Конверсия, "ЧДЦ=0; ЧФ=Ч%");
		Обл.Параметры["Сумма"] = ОтклоненоНаЭтапеСумма;
		Детализация.Вывести(Обл, 2);
		
		Детализация.ЗакончитьАвтогруппировкуСтрок();
	КонецЕсли;
	
	Детализация.ФиксацияСверху = Детализация.ВысотаТаблицы;
	Детализация.ФиксацияСлева = 5;
	Элементы.Детализация.ТекущаяОбласть = Детализация.Область("R1C1:R1C1");
	
КонецПроцедуры

&НаКлиенте
Процедура ДетализацияОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)

	СтандартнаяОбработка = Ложь;
	Если Расшифровка = "АнализПричинОтклонения" Тогда
		
		УсловияОтбора = Новый Структура("Период", Период);
		ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии, КлючВарианта", УсловияОтбора, Истина, "Вариант2");
		ОткрытьФорму("Отчет.CRM_АнализОбращений.Форма", ПараметрыФормы);
		
	ИначеЕсли Расшифровка = "ПричиныОтклоненияИнтересов" Тогда
		
		УсловияОтбора = Новый Структура("ПериодОтчета", Период);
		ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии, КлючВарианта", УсловияОтбора, Истина, "ОсновнойПотеря");
		ОткрытьФорму("Отчет.CRM_ПричиныПотериИнтересовКлиентов.Форма", ПараметрыФормы);
		
	ИначеЕсли Расшифровка = "КонтрольРуководителя" Тогда
		
		УсловияОтбора = Новый Структура("ПериодОтчета", Период);
		ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии, КлючВарианта", УсловияОтбора,
			 Истина,
			 "Т_СписокКлиентов3");
		ОткрытьФорму("Отчет.CRM_КонтрольРуководителя_Интересы.Форма", ПараметрыФормы);
		
	ИначеЕсли Расшифровка = "АнализПричинОтклоненияОбращений" Тогда
		
		УсловияОтбора = Новый Структура("Период", Период);
		ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии, КлючВарианта", УсловияОтбора, Истина, "Вариант2");
		ОткрытьФорму("Отчет.CRM_АнализОбращений.Форма", ПараметрыФормы);
		
	ИначеЕсли Расшифровка = "АнализОбращений" Тогда
		
		УсловияОтбора = Новый Структура("Период", Период);
		ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии, КлючВарианта", УсловияОтбора, Истина, "Вариант1");
		ОткрытьФорму("Отчет.CRM_АнализОбращений.Форма", ПараметрыФормы);
		
	КонецЕсли;
	Элементы.Детализация.ТекущаяОбласть = Детализация.Область("R1C1:R1C1");
	
КонецПроцедуры

&НаСервере
Функция ДетализацияЛидов()
	
	Результат = Новый Структура;
	СКД = Отчеты.CRM_ПутьКлиента.ПолучитьМакет("МакетДетализацияЛидов");
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НачалоПериода", Период.ДатаНачала);
	ПараметрыОтчета.Вставить("ОкончаниеПериода", Период.ДатаОкончания);
	ПараметрыОтчета.Вставить("ТекущаяДата", ТекущаяДата);
	ПараметрыОтчета.Вставить("ПериодТекущих", НачалоДня(ТекущаяДата));
	ПараметрыОтчета.Вставить("Сценарий", СценарийПродаж);
	ПараметрыОтчета.Вставить("Менеджеры", ОтборМенеджеры);
	ПараметрыОтчета.Вставить("Роли", ОтборРоли);
	ПараметрыОтчета.Вставить("ИсточникиЛидов", ИсточникиЛидов);
	ДеревоРезультат = ПолучитьРезультатКомпоновкиДанных(СКД, ПараметрыОтчета, , Истина, "Источники");

	Результат.Вставить("Источники", ДеревоРезультат);

	ДеревоРезультат = ПолучитьРезультатКомпоновкиДанных(СКД, ПараметрыОтчета, , Истина, "Состояния");

	Результат.Вставить("Состояния", ДеревоРезультат);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПредставлениеСрокаОбработкиКанала(КаналОбращения)
	
	НастройкиСрока = Неопределено;
	Если КаналОбращения = "Телефония" Тогда
		НастройкиСрока = Константы.CRM_СрокОбработкиЗвонков.Получить().Получить();
	Иначе
		НастройкиСрока = КаналОбращения;
	КонецЕсли;
	Если НастройкиСрока = Неопределено Тогда
		НастройкиСрока = Новый Структура;
		НастройкиСрока.Вставить("CRM_СрокОбработкиДней", 0);
		НастройкиСрока.Вставить("CRM_СрокОбработкиЧасов", 8);
		НастройкиСрока.Вставить("CRM_СрокОбработкиМинут", 0);
	КонецЕсли; 
	
	Представление = ?(НастройкиСрока.CRM_СрокОбработкиДней = 0, "", Строка(НастройкиСрока.CRM_СрокОбработкиДней) + " д. ") 
		+ ?(НастройкиСрока.CRM_СрокОбработкиЧасов = 0, "", Строка(НастройкиСрока.CRM_СрокОбработкиЧасов) + " ч. ")
		+ ?(НастройкиСрока.CRM_СрокОбработкиМинут = 0, "", Строка(НастройкиСрока.CRM_СрокОбработкиМинут) + " мин.");
		
	Возврат Представление;
	
КонецФункции

&НаКлиенте
Процедура ДетализацияПриИзмененииСодержимогоОбласти(Элемент, Область, ДополнительныеПараметры)
	Элементы.Детализация.ТекущаяОбласть = Детализация.Область("R1C1:R1C1");
КонецПроцедуры

&НаКлиенте
Процедура ДетализацияПриАктивизации(Элемент)
	Если Элементы.Детализация.ТекущаяОбласть.Верх >= Детализация.ВысотаТаблицы
		Или Элементы.Детализация.ТекущаяОбласть.Лево >= 6 Тогда
		Элементы.Детализация.ТекущаяОбласть = Детализация.Область("R1C1:R1C1");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПричиныПотериИнтересов

&НаСервере
Процедура ПричиныПотериИнтересовСформировать(Состояние = Неопределено)
	
	/////////////////////////////////
	// 1. Данные.
	
	СКД = Отчеты.CRM_ПутьКлиента.ПолучитьМакет("МакетПричиныПотериИнтересов");
	
	Если ОтборСуммаИнтересовОт = 0 И ОтборСуммаИнтересовДо = 0 Тогда
		СКД.НаборыДанных.НаборДанных1.Запрос = СтрЗаменить(
			СКД.НаборыДанных.НаборДанных1.Запрос,
			"И (CRM_Интерес.ОжидаемаяВыручка МЕЖДУ &СуммаОт И &СуммаДо)", "");
	ИначеЕсли ОтборСуммаИнтересовДо = 0 Тогда
		СКД.НаборыДанных.НаборДанных1.Запрос = СтрЗаменить(
			СКД.НаборыДанных.НаборДанных1.Запрос,
			"И (CRM_Интерес.ОжидаемаяВыручка МЕЖДУ &СуммаОт И &СуммаДо)",
			"И (CRM_Интерес.ОжидаемаяВыручка >= &СуммаОт)");
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ПериодОтчета",		Период);
	ПараметрыОтчета.Вставить("НачалоПериода",		Период.ДатаНачала);
	ПараметрыОтчета.Вставить("ОкончаниеПериода",	Период.ДатаОкончания);
	ПараметрыОтчета.Вставить("СуммаОт",				ОтборСуммаИнтересовОт);
	ПараметрыОтчета.Вставить("СуммаДо",				ОтборСуммаИнтересовДо);
	ПараметрыОтчета.Вставить("Сценарий",			СценарийПродаж);
	ПараметрыОтчета.Вставить("Состояние",			Состояние);
	ПараметрыОтчета.Вставить("Менеджеры",			ОтборМенеджеры);
	ПараметрыОтчета.Вставить("Роли",				ОтборРоли);
	
	РезультатДерево = ПолучитьРезультатКомпоновкиДанных(СКД, ПараметрыОтчета, , Истина);
	
	/////////////////////////////////
	// 2. Формирование данных диаграммы и таблицы.
	
	МассивДанныхДиаграммы = Новый Массив;
	Для Каждого СтрокаПричины Из РезультатДерево.Строки Цикл
		СтрокаПричины.ОбъектСсылка = СтрокаПричины.ПричинаОтказа;
		Если ЗначениеЗаполнено(СтрокаПричины.Документ) Тогда
			СерияДиаграммы = Новый Структура;
			СерияДиаграммы.Вставить("title",		Строка(СтрокаПричины.ПричинаОтказа));
			СерияДиаграммы.Вставить("value",		СтрокаПричины.Документ);
			СерияДиаграммы.Вставить("reasonRef",	ПолучитьНавигационнуюСсылку(СтрокаПричины.ПричинаОтказа));
			
			МассивДанныхДиаграммы.Добавить(СерияДиаграммы);
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(РезультатДерево, "ИсходныеДанныеПричиныПотериИнтересов");
	
	Элементы.ДекорацияПричиныПотери.Заголовок =
		НСтр("ru = 'Потеряно интересов: '") + Строка(РезультатДерево.Строки.Итог("Документ"));
	
	/////////////////////////////////
	// 3. Шаблон отсутствия данных.
	
	Если МассивДанныхДиаграммы.Количество() = 0 Тогда
		ПричиныПотериИнтересовHTML =
			Отчеты.CRM_ПутьКлиента.ПолучитьМакет("HTMLМакетОтсутствияДанныхДиаграммы").ПолучитьТекст();
		Возврат;
	КонецЕсли;
	
	/////////////////////////////////
	// 4. Установка параметров диаграммы.
	
	ИнтеграцияСВнешнейБиблиотекой = CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ПолучитьБлокИнтеграцииВнешнейБиблиотеки(
		Справочники.CRM_ВнешниеБиблиотеки.БиблиотекаОтображенияГрафиков, ЭтотОбъект.ФлагСовместимостиВнешнихБиблиотек);
	
	ПричиныПотериИнтересовHTML = СтрЗаменить(
		Отчеты.CRM_ПутьКлиента.ПолучитьМакет("D3_ДиаграммаПричиныПотериИнтересов").ПолучитьТекст(),
		"{{CRM:PATH_TO_LIBRARY}}",
		ИнтеграцияСВнешнейБиблиотекой);
	
	ПричиныПотериИнтересовHTML = СтрЗаменить(
		ПричиныПотериИнтересовHTML,
		"""{{CRM:DATA}}""",
		CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(МассивДанныхДиаграммы));
	
	ПричиныПотериИнтересовHTML = CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ЗаменитьПутиВызоваБиблиотек(
		ЭтотОбъект.ИсточникиВнешнихБиблиотек, ПричиныПотериИнтересовHTML);
	
КонецПроцедуры

#КонецОбласти

#Область Статистика

&НаКлиенте
Процедура ПериодСтатистикиПриИзменении(Элемент)
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	СтатистикаСформировать();
КонецПроцедуры

Процедура СтатистикаСформировать()
	
	/////////////////////////////////
	// 1. Данные.
	
	ТекДата = ТекущаяДатаСеанса();
	
	СКД = Отчеты.CRM_ПутьКлиента.ПолучитьМакет("МакетСтатистика");
	
	Если ОтборСуммаИнтересовОт = 0 И ОтборСуммаИнтересовДо = 0 Тогда
		СКД.НаборыДанных.НаборДанных1.Запрос = СтрЗаменить(
			СКД.НаборыДанных.НаборДанных1.Запрос,
			"И (CRM_Интерес.ОжидаемаяВыручка МЕЖДУ &СуммаОт И &СуммаДо)", "");
	ИначеЕсли ОтборСуммаИнтересовДо = 0 Тогда
		СКД.НаборыДанных.НаборДанных1.Запрос = СтрЗаменить(
			СКД.НаборыДанных.НаборДанных1.Запрос,
			"И (CRM_Интерес.ОжидаемаяВыручка МЕЖДУ &СуммаОт И &СуммаДо)",
			"И (CRM_Интерес.ОжидаемаяВыручка >= &СуммаОт)");
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Сценарий",			СценарийПродаж);
	ПараметрыОтчета.Вставить("Менеджеры",			ОтборМенеджеры);
	ПараметрыОтчета.Вставить("Роли",				ОтборРоли);
	ПараметрыОтчета.Вставить("ПериодСтатистики",	ПериодСтатистики);
	ПараметрыОтчета.Вставить("СуммаОт",				ОтборСуммаИнтересовОт);
	ПараметрыОтчета.Вставить("СуммаДо",				ОтборСуммаИнтересовДо);
	
	Если ПериодСтатистики = Перечисления.Периодичность.Год Тогда
		Периодов			= 12;
		ТекПериод			= Месяц(ТекДата);
		НачалоТекПериода	= НачалоГода(ТекДата);
		ОкончаниеТекПериода	= КонецГода(ТекДата);
		
		ПараметрыОтчета.Вставить("НачалоПрошлогоПериода",		НачалоГода(НачалоТекПериода - 3600));
		ПараметрыОтчета.Вставить("ОкончаниеПрошлогоПериода",	НачалоТекПериода - 1);
		ПараметрыОтчета.Вставить("НачалоТекущегоПериода",		НачалоТекПериода);
		ПараметрыОтчета.Вставить("ОкончаниеТекущегоПериода",	ОкончаниеТекПериода);
	Иначе
		НачалоТекПериода	= НачалоКвартала(ТекДата);
		ОкончаниеТекПериода	= КонецКвартала(ТекДата);
		ТекПериод			= Цел((ТекДата - НачалоТекПериода) / 604800 + 0.5);
		Периодов			= Цел((ОкончаниеТекПериода - НачалоТекПериода) / 604800 + 0.5);
		
		ПараметрыОтчета.Вставить("НачалоПрошлогоПериода",		НачалоКвартала(НачалоТекПериода - 3600));
		ПараметрыОтчета.Вставить("ОкончаниеПрошлогоПериода",	НачалоТекПериода - 1);
		ПараметрыОтчета.Вставить("НачалоТекущегоПериода",		НачалоТекПериода);
		ПараметрыОтчета.Вставить("ОкончаниеТекущегоПериода",	ОкончаниеТекПериода);
	КонецЕсли;
	
	ДеревоРезультат = ПолучитьРезультатКомпоновкиДанных(СКД, ПараметрыОтчета, , Истина);
	
	/////////////////////////////////
	// 2. Формирование данных диаграммы и таблицы.
	
	ДанныеДиаграммыСтатистика = Новый Массив;
	ДанныеДиаграммыСтатисткаЗавершенных = Новый Массив;
	
	МаксЗнач = 0;
	МаксЗначЗавершенные = 0;
	
	Для Ном = 1 По Периодов Цикл
		Если ПериодСтатистики = Перечисления.Периодичность.Год Тогда
			ЗначениеТочки = Формат(Дата(1, Ном, 1), "ДФ=MMM");
		Иначе
			ЗначениеТочки = Формат(Ном, "ЧФ='Ч-я нед.'");
		КонецЕсли;
		
		СтрокаДерева = ДеревоРезультат.Строки.Найти(Ном, "Период");
		
		Если СтрокаДерева = Неопределено Тогда
			КоличествоП = 0;
			КоличествоТ = 0;
			
			КоличествоЗавершенныхП = 0;
			КоличествоЗавершенныхТ = 0;
		Иначе
			СтрокаДерева.ОбъектСсылка = ЗначениеТочки;
			
			КоличествоП = СтрокаДерева.КоличествоП;
			КоличествоТ = СтрокаДерева.КоличествоТ;
			
			КоличествоЗавершенныхП = СтрокаДерева.КоличествоЗавершенныхП;
			КоличествоЗавершенныхТ = СтрокаДерева.КоличествоЗавершенныхТ;
			
			МаксЗнач = Макс(МаксЗнач, КоличествоП, КоличествоТ);
			МаксЗначЗавершенные = Макс(МаксЗначЗавершенные, КоличествоЗавершенныхП, КоличествоЗавершенныхТ);
		КонецЕсли;
		
		// Данные диаграммы - Статистика.
		ЕдиницаДиаграммы = Новый Структура;
		ЕдиницаДиаграммы.Вставить("period",			ЗначениеТочки);
		ЕдиницаДиаграммы.Вставить("currentValue",	КоличествоТ);
		ЕдиницаДиаграммы.Вставить("previousValue",	КоличествоП);
		
		ДанныеДиаграммыСтатистика.Добавить(ЕдиницаДиаграммы);
		
		// Данные диаграммы - СтатистикаЗавершенных.
		ЕдиницаДиаграммы = Новый Структура;
		ЕдиницаДиаграммы.Вставить("period",			ЗначениеТочки);
		ЕдиницаДиаграммы.Вставить("currentValue",	КоличествоЗавершенныхТ);
		ЕдиницаДиаграммы.Вставить("previousValue",	КоличествоЗавершенныхП);
		
		ДанныеДиаграммыСтатисткаЗавершенных.Добавить(ЕдиницаДиаграммы);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоРезультат, "ИсходныеДанныеСтатистика");
	
	//Если МаксЗнач < 6 Тогда
	//	Статистика.ОбластьПостроения.ШкалаЗначений.ШагШкалы = 1;
	//Иначе
	//	Статистика.ОбластьПостроения.ШкалаЗначений.ШагШкалы = 0;
	//КонецЕсли;

	//Если МаксЗначЗавершенные < 6 Тогда
	//	СтатистикаЗавершенных.ОбластьПостроения.ШкалаЗначений.ШагШкалы = 1;
	//Иначе
	//	СтатистикаЗавершенных.ОбластьПостроения.ШкалаЗначений.ШагШкалы = 0;
	//КонецЕсли;
	
	/////////////////////////////////
	// 3. Установка параметров диаграммы.
	
	ИнтеграцияСВнешнейБиблиотекой = CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ПолучитьБлокИнтеграцииВнешнейБиблиотеки(
		Справочники.CRM_ВнешниеБиблиотеки.БиблиотекаОтображенияГрафиков, ЭтотОбъект.ФлагСовместимостиВнешнихБиблиотек);
	
	СтатистикаHTML = СтрЗаменить(
		Отчеты.CRM_ПутьКлиента.ПолучитьМакет("D3_ДиаграммаСтатистикиПоИнтересам").ПолучитьТекст(),
		"{{CRM:PATH_TO_LIBRARY}}",
		ИнтеграцияСВнешнейБиблиотекой);
	
	СтатистикаHTML = СтрЗаменить(
		СтатистикаHTML,
		"""{{CRM:DATA}}""",
		CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(ДанныеДиаграммыСтатистика));
	
	СтатистикаHTML = СтрЗаменить(
		СтатистикаHTML,
		"""{{CRM:DATA_COMPLETED}}""",
		CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(ДанныеДиаграммыСтатисткаЗавершенных));
	
	Если Элементы.Статистика_ПоказатьЗавершенныеИнтересы.Пометка Тогда
		СтатистикаHTML = СтрЗаменить(
			СтатистикаHTML,
			"ext_showData = data",
			"ext_showData = dataCompleted");
	КонецЕсли;
	
	СтатистикаHTML = CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ЗаменитьПутиВызоваБиблиотек(
		ЭтотОбъект.ИсточникиВнешнихБиблиотек, СтатистикаHTML);
	
КонецПроцедуры

#КонецОбласти

#Область РегулировкаВысотыСекций

&НаКлиенте
Процедура НастроитьВысотуСекций(Команда)
	
	Если Элементы.ГруппаПолосаРегулированияВсплывающая.Скрыта() Тогда
		Элементы.ГруппаПолосаРегулированияВсплывающая.Показать();
		ПодключитьОбработчикОжидания("ЗакрытьПанельРегулирования", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельРегулирования()
	
	Если Элементы.ГруппаПолосаРегулированияВсплывающая.Скрыта() Тогда
		ОтключитьОбработчикОжидания("ЗакрытьПанельРегулирования");
		ТекущийЭлемент = Элементы.НастроитьВысотуСекций;
	Иначе
		ПодключитьОбработчикОжидания("ЗакрытьПанельРегулирования", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВысотуСекций()
	
	Если Не СвернутаГруппаВерх Тогда
		Элементы.ГруппаОтчетовВерх.Высота = ВысотаСекций;
	КонецЕсли;
	Если Не СвернутаГруппаЦентр Тогда
		Элементы.ГруппаОтчетовЦентр.Высота = ВысотаСекций;
	КонецЕсли;
	Если Не СвернутаГруппаНиз Тогда
		Элементы.ГруппаОтчетовНиз.Высота = ВысотаСекций;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВысотаСекцийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ИзменениеВысотыСекций", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеВысотыСекций()
	УстановитьВысотуСекций();
КонецПроцедуры

#КонецОбласти

#Область Итоги

&НаСервере
Процедура УстановитьЗаголовкиВHTML(ИтогиHTML)
	
	ИтогиHTML = СтрЗаменить(ИтогиHTML, "ЗаголовокВВоронке", НСтр("ru = 'В воронке'"));
	ИтогиHTML = СтрЗаменить(ИтогиHTML, "ЗаголовокКонверсия", НСтр("ru = 'Конверсия'"));
	ИтогиHTML = СтрЗаменить(ИтогиHTML, "ЗаголовокЗакрытоНеудачно", НСтр("ru = 'Закрыто неудачно'"));
	ИтогиHTML = СтрЗаменить(ИтогиHTML, "ЗаголовокЗакрытоУспешно", НСтр("ru = 'Закрыто успешно'"));
	ИтогиHTML = СтрЗаменить(ИтогиHTML, "ЗаголовокСредняяДлительность", НСтр("ru = 'Средняя длительность'"));
	ИтогиHTML = СтрЗаменить(ИтогиHTML, "ЗаголовокСреднийЧек", НСтр("ru = 'Средний чек'"));
	ИтогиHTML = СтрЗаменить(ИтогиHTML, "ЗаголовокЛидыВВоронке", НСтр("ru = 'Лиды в воронке'"));
	ИтогиHTML = СтрЗаменить(ИтогиHTML, "ЗаголовокЗабытыеИнтересы", НСтр("ru = 'Забытые интересы'"));
	ИтогиHTML = СтрЗаменить(ИтогиHTML, "ЗаголовокРезультат", НСтр("ru = 'Клиенты находят путь'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеЭлементаHTML(id, Значение)

	ТекСтр = Элементы.ИтогиHTML.Документ.getElementById(id);
	Если ТекСтр <> Неопределено Тогда
		ТекСтр.innerHTML = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКлассЭлементаHTML(id, Класс, Добавить = Ложь)
	ТекСтр = Элементы.ИтогиHTML.Документ.getElementById(id);
	Если ТекСтр <> Неопределено Тогда
		Если Не Добавить Тогда
			ТекКлассы = СтрРазделить(ТекСтр.classList.value, " ", Ложь);
			Для каждого ТекКласс Из ТекКлассы Цикл
				ТекСтр.classList.remove(ТекКласс);
			КонецЦикла;
		КонецЕсли;
		ТекКлассы = СтрРазделить(Класс, " ");
		Для каждого ТекКласс Из ТекКлассы Цикл
			ТекСтр.classList.add(ТекКласс);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИтоги()
	
	Итоги = ПолучитьИзВременногоХранилища(АдресИтогов);
	Если Итоги = Неопределено Или Элементы.ИтогиHTML.Документ = Неопределено Тогда
		ПодключитьОбработчикОжидания("ЗаполнитьИтоги", 0.1, Истина);
		Возврат;
	КонецЕсли;
	Для каждого Элемент Из Итоги Цикл
		Если Элемент.Ключ = "Результат" Тогда
			Если Элемент.Значение > 75 Тогда
				Класс = "text_green";
			ИначеЕсли Элемент.Значение > 50 Тогда
				Класс = "text_yellow";
			Иначе
				Класс = "text_red";
			КонецЕсли;
			УстановитьКлассЭлементаHTML("result", Класс, Ложь);
		Иначе
			УстановитьЗначениеЭлементаHTML(Элемент.Ключ, Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьИтоги()
	
	Результат = Новый Структура;
	
	ДеревоРезультат = РеквизитФормыВЗначение("ИсходныеДанныеИсточники");
	ВалютаСтр = Строка(Константы.ВалютаУправленческогоУчета.Получить());
	
	// Интересы
	КолОбращений = ДеревоРезультат.Строки[0].Документ;
	КолЛидов = ДеревоРезультат.Строки[1].Документ;
	КолИнтересов = ДеревоРезультат.Строки.Итог("Документ") - КолОбращений - КолЛидов;
	СуммИнтересов = ДеревоРезультат.Строки.Итог("Сумма");
	Результат.Вставить("in_funnel", ЧислоСЧислительнымПрописью(КолИнтересов, НСтр("ru='интерес,
		| интереса, интересов,
		| м'")));
	Результат.Вставить("in_funnel_summ", Формат(СуммИнтересов, "ЧДЦ=2; ЧН=") + " " + ВалютаСтр);

	// Лиды
	СтрокаДереваЛиды = ДеревоРезультат.Строки.Найти("Лиды", "Состояние");
	КолЛидов = СтрокаДереваЛиды.Строки.Итог("Документ");
	Результат.Вставить("lead_in_funnel", КолЛидов);

	// Удачные интересы
	СтрокаУспешных = ДеревоРезультат.Строки[ДеревоРезультат.Строки.Количество() - 1];
	КолУспешных = СтрокаУспешных.Документ;
	СуммИнтересов = ?(ЗначениеЗаполнено(СтрокаУспешных.Сумма), СтрокаУспешных.Сумма, 0);
	Результат.Вставить("successfully", ЧислоСЧислительнымПрописью(КолУспешных, НСтр("ru='интерес,
		| интереса, интересов,
		| м'")));
	Результат.Вставить("successfully_summ", Формат(СуммИнтересов, "ЧДЦ=2; ЧН=") + " " + ВалютаСтр);
	Результат.Вставить("average_amount_summ", Формат(?(КолУспешных = 0, 0,
		 СуммИнтересов / КолУспешных), "ЧДЦ=2; ЧН=") + " " 
		+ ВалютаСтр);
	
	// Неудачные интересы
	ДеревоОтвалов = РеквизитФормыВЗначение("ИсходныеДанныеОтвал");
	КолОтвалов = ДеревоОтвалов.Строки.Итог("Документ") - ДеревоОтвалов.Строки[0].Документ;
	СуммИнтересов = ДеревоОтвалов.Строки.Итог("Сумма");
	Результат.Вставить("unsuccessfully", ЧислоСЧислительнымПрописью(КолОтвалов, НСтр("ru='интерес,
		| интереса, интересов,
		| м'")));
	Результат.Вставить("unsuccessfully_summ", Формат(СуммИнтересов, "ЧДЦ=2; ЧН=") + " " + ВалютаСтр);
	
	// Конверсия
	Конверсия = Формат(?(КолЛидов = 0, 0, КолИнтересов / КолЛидов * 100), "ЧДЦ=0; ЧН=; ЧФ=Ч%");
	Результат.Вставить("conversion", Конверсия);

	СКД = Отчеты.CRM_ПутьКлиента.ПолучитьМакет("МакетДлительность");
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ПериодОтчета", Период);
	ПараметрыОтчета.Вставить("НачалоПериода", Период.ДатаНачала);
	ПараметрыОтчета.Вставить("ОкончаниеПериода", Период.ДатаОкончания);
	ПараметрыОтчета.Вставить("Сценарий", СценарийПродаж);
	ПараметрыОтчета.Вставить("Календарь", Календарь);
	ДанныеДлительности = ПолучитьРезультатКомпоновкиДанных(СКД, ПараметрыОтчета);
	СредДлительность = Формат(?(Не ЗначениеЗаполнено(ДанныеДлительности[0].Завершенных), 0,
		 ДанныеДлительности[0].Длительность / ДанныеДлительности[0].Завершенных),
		 "ЧДЦ=0; ЧН=; ЧФ='Ч дн.'");
	Результат.Вставить("average_duration", СредДлительность);
	Результат.Вставить("forgotten",
		 ЧислоСЧислительнымПрописью(?(Не ЗначениеЗаполнено(ДанныеДлительности[0].Забытых), 0,
		 ДанныеДлительности[0].Забытых), НСтр("ru='интерес, интереса, интересов,
		| м'")));
	
	// ИТОГ
	НаходятПуть = ?(КолЛидов = 0, 0, КолУспешных / КолЛидов * 100);
	Результат.Вставить("result", Формат(НаходятПуть, "ЧДЦ=0; ЧН=; ЧФ=Ч%"));
	Результат.Вставить("Результат", НаходятПуть);
	
	АдресИтогов = ПоместитьВоВременноеХранилище(Результат, ЭтотОбъект.УникальныйИдентификатор);

КонецПроцедуры

Функция ЧислоСЧислительнымПрописью(Число, ПараметрыПредметаИсчисления)
	СтрокаЧ = ЧислоПрописью(Число, "Л=" + НСтр("ru='ru_RU';en='en_US'") + ";НД=Ложь", ПараметрыПредметаИсчисления);
	СтрокаТМП = ЧислоПрописью(Число, "Л=" + НСтр("ru='ru_RU';en='en_US'") + ";НД=Ложь;НП=Ложь",
		 ПараметрыПредметаИсчисления);
	СтрокаТМП = СокрЛП(СтрЗаменить(СтрокаТМП, "00", ""));
	СтрокаЧ = СокрЛП(СтрЗаменить(СтрокаЧ, "00", ""));
	СтрокаЧ = СокрЛП(СтрЗаменить(СтрокаЧ, СтрокаТМП, Строка(Число)));
	
	Возврат СтрокаЧ;
КонецФункции

#КонецОбласти

#Область ПорядокВерхнейГоризонтали

&НаСервере
Процедура УстановитьПорядокГруппВерхнейГоризонтали()
	
	ГруппаВерхнейГоризонтали	= Элементы.ГруппаОтчетовВерх;
	ПорядокЗаголовков			= Новый Массив;
	
	// 1. Порядок групп.
	Для Каждого ЭлементКоллекцииСписка Из ПорядокГруппВерхнейГоризонтали Цикл
		ОбрабатываемыйЭлемент = Элементы[ЭлементКоллекцииСписка.Значение];
		Если ОбрабатываемыйЭлемент <> Неопределено Тогда
			Элементы.Переместить(ОбрабатываемыйЭлемент, ГруппаВерхнейГоризонтали);
			ПорядокЗаголовков.Добавить(ОбрабатываемыйЭлемент.Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	// 2. Корректировка положения групп.
	Элементы.Переместить(Элементы.ЗаголовокСвернутойГруппыВерх, ГруппаВерхнейГоризонтали);
	
	// 3. Перенос кнопки свертки.
	ПерваяГруппаОтчета	= Элементы.ГруппаОтчетовВерх.ПодчиненныеЭлементы[0];
	ГруппаЗаголовка		= ПерваяГруппаОтчета.ПодчиненныеЭлементы[0];
	ПередЭлементомФормы	= ГруппаЗаголовка.ПодчиненныеЭлементы[0];
	
	Элементы.Переместить(Элементы.ДекорацияСвернутьВерх, ГруппаЗаголовка, ПередЭлементомФормы);
	
	// 4. Заголовок свернутой группы.
	Элементы.ЗаголовокСвернутойГруппыТекстВерх.Заголовок = СтрСоединить(ПорядокЗаголовков, " / ");
	
КонецПроцедуры // УстановитьПорядокГруппВерхнейГоризонтали()

#КонецОбласти

#Область РеестрИнтересовОбращений

&НаСервере
Процедура ОбновитьПоложениеПереключателяВариантаОтображения()
	
	Если Элементы.ГруппаСтраницРеестров.ТекущаяСтраница = Элементы.ГруппаСтраницыИнтересов Тогда
		Элементы.Переместить(Элементы.ГруппаВариантОтображения, Элементы.РеестрИнтересов.КоманднаяПанель);
	Иначе
		Элементы.Переместить(Элементы.ГруппаВариантОтображения, Элементы.РеестрОбращений.КоманднаяПанель);
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПоложениеПереключателяВариантаОтображения()

#КонецОбласти

// +Рабочий стол
#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

#КонецОбласти
// -Рабочий стол
