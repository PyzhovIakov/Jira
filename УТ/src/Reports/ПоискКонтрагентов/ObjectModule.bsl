///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ПоискКонтрагентов".
// ОбщийМодуль.ПоискКонтрагентовКлиент.
//
// Процедуры и функции для формирования отчета
// - ПриКомпоновкеРезультата.
// - Вспомогательные методы для получения данных из веб-сервиса.
// - Формирование расшифровки полей.
// - Формирование краткого представления поля со списком ОКВЭД.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Реквизиты объекта
//
// * АдресХранилищаНастроек - адрес временного хранилища, в которое необходимо предварительно поместить параметры для
//   формирования отчета.
// * ВсегоЗаписей - общее количество записей, удовлетворяющее критериям отбора, заданным пользователем.
// * ВсегоСтраниц - общее количество страниц со всеми записями, удовлетворяющими критериям отбора, заданным
//   пользователем.
// * ДоступноСтраниц - максимальный номер страницы, на которую разрешен переход.
// * ТекущаяСтраница - номер страницы, информация с которой выведена в результат отчета.
// * ОшибкаПриФормированииОтчета - Истина, если при формировании отчета возникли ошибки и в отчет выведена не таблица с
//   результатом, а представление ошибки.
// * ИнформацияОбОшибке - текстовое представление ошибки, если использование табличного документа из результата
//   невозможно или не целесообразно.
//
////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Формирование отчета выполняется на основе параметров, сохраненных в хранилище, адрес которого должен быть указан в
// реквизите объекта АдресХранилищаНастроек.
// В процессе компоновки выполняются следующие действия:
//   - Получение параметров из хранилища и проверка их состава.
//   - Сохранение настроек отбора и выводимых полей в хранилище настроек пользователя.
//   - Получение информации из веб-сервиса по указанным параметрам.
//   - Формирование расшифровки полей.
//   - Формирование отчета с требуемыми пользователю колонками.
//
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеПоиска = ДанныеПоиска();
	
	ВсегоЗаписей    = 0;
	ВсегоСтраниц    = 0;
	ТекущаяСтраница = 0;
	ДоступноСтраниц = 0;
	
	ОшибкаПриФормированииОтчета = Ложь;
	ИнформацияОбОшибке          = "";
	
	Если ДанныеПоиска.Ошибка Тогда
		
		ПоискКонтрагентовСлужебный.ЗаполнитьОписаниеОшибкиФормированияОтчета(
			ДокументРезультат,
			ДанныеПоиска);
			
		ОшибкаПриФормированииОтчета = Истина;
		ИнформацияОбОшибке          = ДанныеПоиска.ИнформацияОбОшибке;
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеПоиска);
	
	Если ДанныеПоиска.Данные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СКД = СхемаКомпоновкиДанных;
	
	Набор = СКД.НаборыДанных.Найти("РезультатПоиска");
	
	Если Набор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеПоля = СКД.НастройкиПоУмолчанию.Выбор.Элементы;
	
	ПоляВМакете = Новый Массив;
	Для Каждого Поле Из Набор.Поля Цикл
		ПоляВМакете.Добавить(Поле.Поле);
	КонецЦикла;
	
	ТипыЗначений = ПоискКонтрагентовСлужебный.ТипыЗначений();
	
	НомерПП = 2;
	ДанныеПоиска.Вставить("НомерКолонкиПоИД", Новый Соответствие);
	
	Для Каждого Колонка Из ДанныеПоиска.Данные.Колонки Цикл
		
		Если ПоляВМакете.Найти(Колонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеПоля = ДанныеПоиска.ДоступныеПоля[Колонка.Имя];
		Если ОписаниеПоля = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Структура ОписаниеПоля задается в методе ПоискКонтрагентовСлужебныйКлиентСервер.НовыйДоступноеПоле.
		ПредставлениеДоступногоПоля = ПоискКонтрагентовСлужебный.ПредставлениеДоступногоПоля(
			ОписаниеПоля);
		
		Поле             = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		Поле.ПутьКДанным = Колонка.Имя;
		Поле.Поле        = Колонка.Имя;
		Поле.Заголовок   = ПредставлениеДоступногоПоля;
		
		Если ОписаниеПоля.ТипЗначения = ТипыЗначений.Дата Тогда
			Поле.Оформление.УстановитьЗначениеПараметра("Формат", "ДЛФ=D");
		КонецЕсли;
		
		ВыбранноеПоле               = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных(Колонка.Имя);
		ВыбранноеПоле.Использование = Истина;
		
		ДанныеПоиска.НомерКолонкиПоИД.Вставить(Колонка.Имя, НомерПП);
		НомерПП = НомерПП + 1;
		
	КонецЦикла;
	
	Компоновщик = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет       = Компоновщик.Выполнить(СКД, СКД.НастройкиПоУмолчанию);
	
	ВнешниеДанные = Новый Структура("ДанныеПоиска", ДанныеПоиска.Данные);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, ВнешниеДанные);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ЗаполнитьРасшифровку(ДокументРезультат, ДанныеПоиска);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаДанныхИзВнешнегоИсточника

// Получает настройки отчета из временного хранилища, сохраняет текущие настройки в хранилище настроек и получает
// данные из веб-сервиса.
//
// Возвращаемое значение:
//  см. ПоискКонтрагентовСлужебный.ВнешниеДанныеДляОтчета
//
Функция ДанныеПоиска()
	
	Результат = ПоискКонтрагентовСлужебный.НовыйРезультатОперации();
	
	ПараметрыПоиска = ЗагрузитьПараметрыИзХранилища();
	Если ПараметрыПоиска.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(Результат, ПараметрыПоиска);
		Возврат Результат;
	КонецЕсли;
	
	СохранитьНастройки(
		ПараметрыПоиска.ПараметрыПоиска.СохраняемыеНастройки);
	
	Возврат ПоискКонтрагентовСлужебный.ВнешниеДанныеДляОтчета(
		ПараметрыПоиска.ПараметрыПоиска.ПараметрыЗапроса);
	
КонецФункции

// Загружает параметры отчета из временного хранилища и проверяет правильность их заполнения.
//
// Возвращаемое значение:
//  Структура - Параметры отчета или описание возникших ошибок:
//    * Ошибка - Булево - Истина, если в процессе выполнения метода возникли ошибки.
//    * ВидОшибки - Строка - вид возникшей ошибки, либо пустая строка, если ошибок нет.
//    * ИнформацияОбОшибке - Строка - описание ошибки, либо пустая строка, если ошибок нет.
//    * ОписаниеОшибкиСервиса - Структура, Неопределено - подробное описание ошибки веб-сервиса, либо Неопределено,
//      если ошибок нет, либо ошибка не связана с запросом к веб-сервису.
//      См. ПоискКонтрагентовСлужебный.НовыйОписаниеОшибкиСервиса.
//    * ПараметрыПоиска - Неопределено - в случае ошибки.
//                      - Структура - результат загрузки настроек:
//                        ** ПараметрыЗапроса - Структура - параметры выполнения запроса к веб-сервису.
//                           См. ПоискКонтрагентовСлужебныйКлиентСервер.НовыйПараметрыЗапроса.
//                        ** СохраняемыеНастройки - Структура, Неопределено - настройки пользователя, которые
//                           необходимо сохранить. Если настройки сохранять не нужно, то Неопределено.
//                           См. ПоискКонтрагентовСлужебныйКлиентСервер.НовыйСохраняемыеНастройки.
//
Функция ЗагрузитьПараметрыИзХранилища()
	
	Результат = ПоискКонтрагентовСлужебный.НовыйРезультатОперации();
	Результат.Вставить("ПараметрыПоиска",   Неопределено);
	
	НастройкиПоиска = ПолучитьИзВременногоХранилища(АдресХранилищаНастроек);
	
	УдалитьИзВременногоХранилища(АдресХранилищаНастроек);
	
	Если Не ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(НастройкиПоиска) Тогда
		
		Результат.Ошибка = Истина;
		Результат.ВидОшибки = "НекорректныйЗапрос";
		Результат.ИнформацияОбОшибке = НСтр("ru = 'Заданы неправильные параметры отчета.'");
			
		ПоискКонтрагентовСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Ошибка при получении параметров из временного хранилища в функции ЗагрузитьПараметрыИзХранилища модуля отчета ""ПоискКонтрагентов""'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
			
		Возврат Результат;
		
	КонецЕсли;
	
	ПравильныеНастройки = Новый Структура;
	
	ПравильныеНастройки.Вставить("ПараметрыЗапроса",     Неопределено);
	ПравильныеНастройки.Вставить("СохраняемыеНастройки", Неопределено);
	
	ЗаполнитьЗначенияСвойств(ПравильныеНастройки, НастройкиПоиска);
	
	Если Не ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(ПравильныеНастройки.ПараметрыЗапроса) Тогда
		
		Результат.Ошибка = Истина;
		Результат.ВидОшибки = "НекорректныйЗапрос";
		Результат.ИнформацияОбОшибке = НСтр("ru = 'Ошибка в параметрах запроса.'");
			
		ПоискКонтрагентовСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'В функции ЗагрузитьПараметрыИзХранилища модуля объекта отчета ""ПоискКонтрагентов"" переданы ошибочные параметры запроса'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
				
		Возврат Результат;
		
	КонецЕсли;
	
	ПараметрыЗапроса = ПоискКонтрагентовСлужебныйКлиентСервер.НовыйПараметрыЗапроса();
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПравильныеНастройки.ПараметрыЗапроса);
	
	Если ТипЗнч(ПараметрыЗапроса.Отбор) <> Тип("Массив")
		Или ТипЗнч(ПараметрыЗапроса.Поля) <> Тип("Массив")
		Или ТипЗнч(ПараметрыЗапроса.ДоступныеПоля) <> Тип("Соответствие")
		Или Не ЗначениеЗаполнено(ПараметрыЗапроса.ВидКонтрагента) Тогда
		
		Результат.Ошибка = Истина;
		Результат.ВидОшибки = "НекорректныйЗапрос";
		Результат.ИнформацияОбОшибке = НСтр("ru = 'Ошибка в параметрах запроса.'");
			
		ПоискКонтрагентовСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'В функции ЗагрузитьПараметрыИзХранилища модуля объекта отчета ""ПоискКонтрагентов"" переданы ошибочные параметры запроса'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
				
		Возврат Результат;
		
	КонецЕсли;
	
	ПравильныеНастройки.ПараметрыЗапроса = ПараметрыЗапроса;
	Результат.ПараметрыПоиска = ПравильныеНастройки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Расшифровка

// Выполняет заполнение расшифровки ячейки результата, чтобы можно было открыть карточку контрагента из подсистемы
// "Проверка контрагента" и посмотреть подробную расшифровку ОКВЭД.
//
// Параметры:
//  ДокументРезультат - ТабличныйДокумент - результат формирования отчета.
//  ДанныеПоиска - Структура - загруженные данные.
//    см. Отчет.ПоискКонтрагентов.МодульОбъекта.РазборВнешнихДанных
//
Процедура ЗаполнитьРасшифровку(
		ДокументРезультат,
		ДанныеПоиска)
	
	Если Не ДанныеПоиска.ДобавитьРасшифровку Тогда
		Возврат;
	КонецЕсли;
	
	КолонкаСсылка = НомерКолонкиГиперссылка(ДанныеПоиска.Поля);
	КолонкуВГиперссылку(ДокументРезультат, КолонкаСсылка);
	
	// Определяем колонки, по которым нужно вывести расшифровку.
	ИДКолонокДляУдаления = Новый Массив;
	Для Каждого КлючЗначение Из ДанныеПоиска.НомерКолонкиПоИД Цикл
		
		ИДКолонки    = КлючЗначение.Ключ;
		НомерКолонки = КлючЗначение.Значение;
		Если НомерКолонки = КолонкаСсылка Тогда
			// Установлена расшифровка контрагента,
			// другие расшифровки не устанавливаем
			ИДКолонокДляУдаления.Добавить(ИДКолонки);
			Продолжить;
		КонецЕсли;
			
		РасшифровкаСтрок = ДанныеПоиска.РасшифровкаПолей[ИДКолонки];
		Если РасшифровкаСтрок <> Неопределено И РасшифровкаСтрок.Количество() > 0 Тогда
			// Меняем оформление на гиперссылку
			КолонкуВГиперссылку(ДокументРезультат, НомерКолонки);
		Иначе
			// Удаляем номер колонки из списка
			ИДКолонокДляУдаления.Добавить(ИДКолонки);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ИДКолонки Из ИДКолонокДляУдаления Цикл
		ДанныеПоиска.НомерКолонкиПоИД.Удалить(ИДКолонки);
	КонецЦикла;
	
	// Выводим расшифровку
	РасшифровкаКонтрагента = ДанныеПоиска.РасшифровкаПолей["РасшифровкаКонтрагента"];
	
	Для НомерСтроки = 2 По ДокументРезультат.ВысотаТаблицы Цикл
		
		Ячейка = ДокументРезультат.Область(
			НомерСтроки,
			1,
			НомерСтроки,
			1);
				
		КлючСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Ячейка.Текст);
		
		РасшифровкаСтроки = РасшифровкаКонтрагента[КлючСтроки];
		
		Если РасшифровкаСтроки <> Неопределено Тогда
			
			Ячейка = ДокументРезультат.Область(
				НомерСтроки,
				КолонкаСсылка,
				НомерСтроки,
				КолонкаСсылка);
			
			Ячейка.Расшифровка = РасшифровкаСтроки;
			
		КонецЕсли;
		
		Для Каждого КлючЗначение Из ДанныеПоиска.НомерКолонкиПоИД Цикл
			
			// В списке ДанныеПоиска.НомерКолонкиПоИД должны остаться только те номера, по которым
			// точно есть расшифровка.
			РасшифровкаКолонки = ДанныеПоиска.РасшифровкаПолей[КлючЗначение.Ключ][КлючСтроки];
			
			Если РасшифровкаКолонки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Ячейка = ДокументРезультат.Область(
				НомерСтроки,
				КлючЗначение.Значение,
				НомерСтроки,
				КлючЗначение.Значение);
			
			Ячейка.Расшифровка = РасшифровкаКолонки;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает номер колонки отчета, которая должна быть представлена как гиперссылка для открытия карточки контрагента.
// Определение колонки выполняется по следующему алгоритму:
//  1. Если пользователь отключил все выводимые поля, то возвращается №1, поскольку в отчет всегда выводится порядковый
//  номер.
//  2. Последовательно выполняется поиск колонок с именами CORP_NAME, CORP_FULLNAME, CORP_INN, PERS_FULLNAME, PERS_INN.
//  Если такая колонка найдена, то возвращается ее номер.
//  3. Если ни одна из указанных в п.2 колонок не найдена, то возвращается №2 - первая колонка после порядкового
//  номера.
//
// Параметры:
//  ВыводимыеПоля - Массив Из Строка - список идентификаторов выводимых полей.
//
// Возвращаемое значение:
//  Число - номер колонки для преобразования.
//
Функция НомерКолонкиГиперссылка(ВыводимыеПоля)
	
	Если ВыводимыеПоля.Количество() = 0 Тогда
		Возврат 1;
	КонецЕсли;
	
	ИменаПолейДляПоиска = СтрРазделить(
		"CORP_NAME,CORP_FULLNAME,CORP_INN,PERS_FULLNAME,PERS_INN",
		",",
		Ложь);

	Для Каждого ИмяПоля Из ИменаПолейДляПоиска Цикл
		
		НомерПоля = ВыводимыеПоля.Найти(ИмяПоля);
		Если ВыводимыеПоля.Найти(ИмяПоля) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НомерПоля = НомерПоля + 2;
		Возврат НомерПоля;
		
	КонецЦикла;
	
	Возврат 2;
	
КонецФункции

// Устанавливает для указанной колонки табличного документа оформление в виде гиперссылки.
//
// Параметры:
//  ДокументРезультат - ТабличныйДокумент - результат формирования отчета.
//  НомерКолонки - Число - номер колонки, которую необходимо оформить.
//
Процедура КолонкуВГиперссылку(ДокументРезультат, НомерКолонки)
	
	ОбластьГиперссылка = ДокументРезультат.Область(
		2,
		НомерКолонки,
		ДокументРезультат.ВысотаТаблицы,
		НомерКолонки);
	
	ОбластьГиперссылка.Гиперссылка = Истина;
	
	ОбластьГиперссылка.Шрифт      = ШрифтыСтиля.ШрифтГиперссылка;
	ОбластьГиперссылка.ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Выполняет сохранение настроек в хранилище настроек пользователя.
//
// Параметры:
//  СохраняемыеНастройки - Структура, Неопределено - данные для сохранения. Если Неопределено, то сохранения настроек
//    не происходит. См. ПоискКонтрагентовСлужебныйКлиентСервер.НовыйСохраняемыеНастройки
//
Процедура СохранитьНастройки(СохраняемыеНастройки)
	
	ОшибкиПриСохранении = ПоискКонтрагентовСлужебный.СохранитьНастройкиОтбораИПолей(
		СохраняемыеНастройки);
	
	Если ЗначениеЗаполнено(ОшибкиПриСохранении) Тогда
		
		// Даже если не удалось сохранить настройки, отчет нужно сформировать. Поэтому нет прерывания,
		// а только информация для пользователя.
		ОбщегоНазначения.СообщитьПользователю(ОшибкиПриСохранении);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Иначе
	ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли
