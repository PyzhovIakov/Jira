///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем ПоследнееВремяПодбора;

&НаКлиенте
Перем ИсходныеДанныеВыбора;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВидыКонтрагентов = ПоискКонтрагентовСлужебный.ВидыКонтрагентов();
	
	ВидыСравнений = ПоискКонтрагентовСлужебныйКлиентСервер.ВидыСравнений();
	
	ТипЗначенияПоСтроке = Новый ФиксированноеСоответствие(
		ПоискКонтрагентовСлужебный.ОписаниеТиповПоИдентификатору());
		
	ПараметрыПриОткрытииФормы = Новый Структура(
		"Наименование, ВидКонтрагента, ОшибкаВидКонтрагента",
		Неопределено,
		Неопределено,
		Ложь);
		
	ПараметрыПоиска = Новый Структура;
	
	ПараметрыПоиска.Вставить("ДоступныеОтборы",           Новый Соответствие);
	ПараметрыПоиска.Вставить("ДоступныеПоля",             Новый Соответствие);
	ПараметрыПоиска.Вставить("НастройкаПолей",            Новый Соответствие);
	ПараметрыПоиска.Вставить("НастройкаОтборов",          Новый Соответствие);
	ПараметрыПоиска.Вставить("НастройкиПриФормировании",  Неопределено);
	ПараметрыПоиска.Вставить("БыстрыйДоступ",             Новый Соответствие);
	ПараметрыПоиска.Вставить("Обновить",                  Истина);
	ПараметрыПоиска.Вставить("ПараметрыПриОткрытииФормы", ПараметрыПриОткрытииФормы);
	
	Если ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(Параметры.ПараметрыПоиска) Тогда
		
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска.ПараметрыПриОткрытииФормы, Параметры.ПараметрыПоиска);
		
		ВидКонтрагентаПараметры = ПараметрыПоиска.ПараметрыПриОткрытииФормы.ВидКонтрагента;
		
		Если ВидКонтрагентаПараметры = "ЮрЛицо" Тогда
			ПараметрыПоиска.ПараметрыПриОткрытииФормы.ВидКонтрагента = ВидыКонтрагентов.ЮрЛицо;
		ИначеЕсли ВидКонтрагентаПараметры = "ИП" Тогда
			ПараметрыПоиска.ПараметрыПриОткрытииФормы.ВидКонтрагента = ВидыКонтрагентов.ИП;
		Иначе
			ПараметрыПоиска.ПараметрыПриОткрытииФормы.ВидКонтрагента = Неопределено;
			ПараметрыПоиска.ПараметрыПриОткрытииФормы.ОшибкаВидКонтрагента = ЗначениеЗаполнено(ВидКонтрагентаПараметры);
		КонецЕсли;
		
		ИспользоватьНастройкиПриОткрытии = (ЗначениеЗаполнено(ПараметрыПоиска.ПараметрыПриОткрытииФормы.Наименование)
			И Не ПараметрыПоиска.ПараметрыПриОткрытииФормы.ОшибкаВидКонтрагента);
		
	КонецЕсли;
	
	НомераСтраницПерехода = ОбнулитьНомераПерехода();
	
	ЗаполнитьНастройкиПоиска(Истина);
	
	СоздатьГруппыБыстрогоДоступа();
	
	Если Не НужноОбновитьПараметры Тогда
		ОбновитьБыстрыйДоступ();
	КонецЕсли;
	
	ЕстьПроверкаКонтрагента = ЕстьПроверкаКонтрагента();
	
	ПолужирныйШрифт = ШрифтыСтиля.ВажнаяНадписьШрифт;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ПараметрыПоиска.ПараметрыПриОткрытииФормы.ВидКонтрагента)
		И Не ПараметрыПоиска.ПараметрыПриОткрытииФормы.ОшибкаВидКонтрагента Тогда
		ВидКонтрагента = ПараметрыПоиска.ПараметрыПриОткрытииФормы.ВидКонтрагента;
	КонецЕсли;
	
	Если НужноОбновитьПараметры Тогда
		ПодключитьОбработчикОжидания("ФоновоеОбновлениеПараметров", 0.1, Истина);
	КонецЕсли;
	
	ОбновитьНадписиОтборПоля();
	
	Если ЗначениеЗаполнено(ОшибкиПолученияНастроек) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОшибкиПолученияНастроек);
		НеОчищатьСообщения = Истина;
	КонецЕсли;
	
	ПоследнееВремяПодбора = 0;
	ИсходныеДанныеВыбора  = Неопределено;
	
	ПриИзмененииВидаКонтрагента();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
		Элементы.Результат,
		"Неактуальность");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(
		Отказ,
		ЗавершениеРаботы,
		ТекстПредупреждения,
		СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохраняемыеНастройки = ПоискКонтрагентовСлужебныйКлиентСервер.НовыйСохраняемыеНастройки();
	СохраняемыеНастройки.НастройкаПолей   = ПараметрыПоиска.НастройкаПолей;
	СохраняемыеНастройки.НастройкаОтборов = ПараметрыПоиска.НастройкаОтборов;
	СохраняемыеНастройки.ВидКонтрагента   = ВидКонтрагента;
	СохранитьНастройкиПриЗакрытииФормы(СохраняемыеНастройки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииВидаКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтборНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(ВидКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаЗакрытия = Новый ОписаниеОповещения(
		"ИзменениеОтборовЗавершение",
		ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДоступныеОтборы",  ПараметрыПоиска.ДоступныеОтборы[ВидКонтрагента]);
	ПараметрыФормы.Вставить("НастройкаОтборов", ПараметрыПоиска.НастройкаОтборов[ВидКонтрагента]);
	
	ОткрытьФорму(
		"Отчет.ПоискКонтрагентов.Форма.НастройкаОтбора",
		ПараметрыФормы,
		УникальныйИдентификатор,
		,
		,
		,
		ОбработкаЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоляНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(ВидКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаЗакрытия = Новый ОписаниеОповещения("ИзменениеПолейЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДоступныеПоля",  ПараметрыПоиска.ДоступныеПоля[ВидКонтрагента]);
	ПараметрыФормы.Вставить("НастройкаПолей", ПараметрыПоиска.НастройкаПолей[ВидКонтрагента]);
	
	ОткрытьФорму(
		"Отчет.ПоискКонтрагентов.Форма.НастройкаПолей",
		ПараметрыФормы,
		УникальныйИдентификатор,
		,
		,
		,
		ОбработкаЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_БыстрыйДоступПриИзменении(Элемент)
	
	ИсходныеДанныеВыбора = Неопределено;
	
	ОписаниеПоля = ОписаниеПоля(Элемент);
	Если ОписаниеПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОтборов = ПараметрыПоиска.НастройкаОтборов[ОписаниеПоля.ВидКонтрагента];
	
	Если НастройкаОтборов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеПоля.ВидСравнения = ВидыСравнений.ВСписке.Значение Тогда
		ЗначениеОтбора = ЭтотОбъект[ОписаниеПоля.РеквизитСписок];
	Иначе
		ЗначениеОтбора = ЭтотОбъект[ОписаниеПоля.Реквизит];
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		
		ОчиститьЗначениеВНастройках(ОписаниеПоля);
		БыстрыйДоступПометка = Ложь;
		
	Иначе
		
		Если Не (ОписаниеПоля.ВыборИзСправочника
			Или ОписаниеПоля.ЭтоПолеОКВЭД)
			Или ОписаниеПоля.ВидСравнения = ВидыСравнений.Содержит.Значение Тогда
			
			// Если это выбор из справочника или ОКВЭД, то отборы уже должны быть заполнены в процедуре
			// Подключаемый_БыстрыйДоступОбработкаВыбора, ИзмененияСпискаЗавершение,
			// Подключаемый_БыстрыйДоступОкончаниеВводаТекста,
			
			ОбновитьЗначениеВНастройках(
				ОписаниеПоля,
				ЗначениеОтбора,
				ЗначениеОтбора,
				НастройкаОтборов);
			
			БыстрыйДоступПометка = Истина;
			
		ИначеЕсли (ОписаниеПоля.ВыборИзСправочника
			Или ОписаниеПоля.ЭтоПолеОКВЭД)
			И ОписаниеПоля.ВидСравнения = ВидыСравнений.ВСписке.Значение Тогда
			// Может быть удаление значения в поле, без открытия списка.
			// Проверяем, что элементы в представлении соответствуют элементам в значении.
			
			ТекущийОтбор = НастройкаОтборов[ОписаниеПоля.ИдентификаторКритерия];
			Если ТекущийОтбор <> Неопределено Тогда
				ПоискКонтрагентовКлиент.СравнитьПредставленияВСпискеИзСправочника(
					ТекущийОтбор.Значение,
					ЗначениеОтбора);
				БыстрыйДоступПометка = ТекущийОтбор.Значение.Количество() > 0;
				ТекущийОтбор.ПредставлениеЗначения.Очистить();
				Для Каждого ЭлементСписка Из ТекущийОтбор.Значение Цикл
					ТекущийОтбор.ПредставлениеЗначения.Добавить(ЭлементСписка.Представление);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьНадписиОтборПоля();
	
	ПроверитьНастройкиПослеИзменения();
	
	УстановитьЦветПоляБыстрогоДоступа(
		Элементы,
		ОписаниеПоля,
		БыстрыйДоступПометка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_БыстрыйДоступНачалоВыбора(
		Элемент,
		ДанныеВыбора,
		СтандартнаяОбработка)

	ОписаниеПоля = ОписаниеПоля(Элемент);
	Если ОписаниеПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РеквизитСписок", ОписаниеПоля.РеквизитСписок);
	ДополнительныеПараметры.Вставить("ЭлементСписок",  ОписаниеПоля.ЭлементСписок);
	
	НастройкаСпискаЗавершение = Новый ОписаниеОповещения(
		"ИзмененияСпискаЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Реквизит", ОписаниеПоля.Реквизит);
	ДополнительныеПараметры.Вставить("Элемент",  ОписаниеПоля.Элемент);
	
	ВыборОКВЭДЗавершение = Новый ОписаниеОповещения(
		"ВыбораОКВЭДЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ПараметрыВыбора = ПоискКонтрагентовКлиент.НовыйПараметрыВыбора();
	
	ПараметрыВыбора.ОписаниеПоля              = ОписаниеПоля;
	ПараметрыВыбора.НастройкаСпискаЗавершение = НастройкаСпискаЗавершение;
	ПараметрыВыбора.ВыборОКВЭДЗавершение      = ВыборОКВЭДЗавершение;
	ПараметрыВыбора.УникальныйИдентификатор   = УникальныйИдентификатор;
	
	Если ОписаниеПоля.ВыборИзСправочника
		Или ОписаниеПоля.ЭтоПолеОКВЭД Тогда
		
		ТекущееЗначение = Неопределено;
		НастройкаПоВидуКонтрагента = ПараметрыПоиска.НастройкаОтборов[ОписаниеПоля.ВидКонтрагента];
		Если НастройкаПоВидуКонтрагента <> Неопределено Тогда
			НастройкаКритерия = НастройкаПоВидуКонтрагента[ОписаниеПоля.ИдентификаторКритерия];
			Если ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(НастройкаКритерия) Тогда
				ПравильноеЗначение = Новый Структура("Значение");
				ЗаполнитьЗначенияСвойств(ПравильноеЗначение, НастройкаКритерия);
				ТекущееЗначение = ПравильноеЗначение.Значение;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущееЗначение <> Неопределено Тогда
			Если ОписаниеПоля.ЭтоПолеОКВЭД Тогда
				ПараметрыВыбора.ТекущееЗначениеОКВЭД = ТекущееЗначение;
			КонецЕсли;
			ПараметрыВыбора.ТекущееЗначениеСписок = ТекущееЗначение;
		КонецЕсли;
		
	Иначе
		ПараметрыВыбора.ТекущееЗначениеСписок = ЭтотОбъект[ОписаниеПоля.РеквизитСписок];
		
	КонецЕсли;

	ПоискКонтрагентовКлиент.НачалоВыбора(ПараметрыВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_БыстрыйДоступОчистка(Элемент, СтандартнаяОбработка)
	
	ОписаниеПоля = ОписаниеПоля(Элемент);
	Если ОписаниеПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьЗначениеВНастройках(ОписаниеПоля);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_БыстрыйДоступОбработкаВыбора(
		Элемент,
		ВыбранноеЗначение,
		СтандартнаяОбработка)
	
	ИсходныеДанныеВыбора = Неопределено;
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПоля = ОписаниеПоля(Элемент);
	Если ОписаниеПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеПоля.ВыборИзСправочника
		Или ОписаниеПоля.ЭтоПолеОКВЭД Тогда
		
		// Если список, то он обрабатывается в процедуре ИзмененияСпискаЗавершение
		
		ПравильноеЗначение = ПоискКонтрагентовСлужебныйКлиентСервер.ПравильноеЗначениеИзСправочника(
			ВыбранноеЗначение);
		Если ПравильноеЗначение = Неопределено Тогда
			
			СтандартнаяОбработка = Ложь;
			БыстрыйДоступПометка = Ложь;
			
		Иначе
		
			НовыйОтбор = ОбновитьЗначениеВНастройках(
				ОписаниеПоля,
				ПравильноеЗначение,
				ПравильноеЗначение.Представление);
				
			Если НовыйОтбор = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ВыбранноеЗначение = НовыйОтбор.ПредставлениеЗначения;
			
			БыстрыйДоступПометка = Истина;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_БыстрыйДоступАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		Ожидание,
		СтандартнаяОбработка)
	
	ОписаниеПоля = ОписаниеПоля(Элемент);
	Если ОписаниеПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ПоискКонтрагентовКлиент.НовыйДопПараметрыАвтоподбора();
	ДополнительныеПараметры.ПоследнееВремяПодбора = ПоследнееВремяПодбора;
	ДополнительныеПараметры.ИсходныеДанныеВыбора  = ИсходныеДанныеВыбора;
	
	АвтоподборВыполнен = ПоискКонтрагентовКлиент.АвтоПодбор(
		ОписаниеПоля,
		Текст,
		ДанныеВыбора,
		СтандартнаяОбработка,
		ДополнительныеПараметры);
		
	Если АвтоподборВыполнен Тогда
		ИсходныеДанныеВыбора = ДанныеВыбора;
		ПоследнееВремяПодбора = ТекущаяУниверсальнаяДатаВМиллисекундах();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_БыстрыйДоступОкончаниеВводаТекста(
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		СтандартнаяОбработка)
	
	ОписаниеПоля = ОписаниеПоля(Элемент);
	Если ОписаниеПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПоискКонтрагентовКлиент.ЭтоТочноеЗначениеИзСправочника(ОписаниеПоля) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПоискКонтрагентовКлиент.ЭтоТочноеЗначениеОКВЭД(ОписаниеПоля) Тогда
		ТекстДляПроверки = СтрЗаменить(Текст, ".", "");
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекстДляПроверки) Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		ДанныеОКВЭД = ПоискКонтрагентовКлиент.ЗначениеОКВЭДНетВКлассификаторе(Текст);
		
		ОбновитьЗначениеВНастройках(
			ОписаниеПоля,
			ДанныеОКВЭД,
			ДанныеОКВЭД.Представление);
			
		ЭтотОбъект[ОписаниеПоля.Реквизит] = ДанныеОКВЭД.Представление;
		
		БыстрыйДоступПометка = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(
		Элемент,
		Расшифровка,
		СтандартнаяОбработка,
		ДополнительныеПараметры)
	
	Если Не ЗначениеЗаполнено(Расшифровка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(Расшифровка) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// Структура расшифровки задается в методе ПоискКонтрагентовСлужебный.НовыйЗначениеРасшифровки.
		Если Расшифровка.Действие = "ОткрытьКонтрагента"  Тогда
			
			Если Не ЗначениеЗаполнено(Расшифровка.Значение) Тогда
				Возврат;
			КонецЕсли;
			
			Если ЕстьПроверкаКонтрагента Тогда
				МодульПроверкаКонтрагентаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроверкаКонтрагентаКлиент");
				МодульПроверкаКонтрагентаКлиент.Проверить(Расшифровка.Значение);
			Иначе
				ПараметрыФормы = Новый Структура("ИНН", (Расшифровка.Значение));
				ОткрытьФорму(
					"Отчет.ДосьеКонтрагента.Форма",
					ПараметрыФормы,
					,
					Расшифровка.Значение);
			КонецЕсли;
			
		ИначеЕсли Расшифровка.Действие = "РасшифровкаОКВЭД" Тогда
			
			ПараметрыФормы = Новый Структура(
				"РасшифровкаОКВЭД",
				Расшифровка.Значение);
			ОткрытьФорму(
				"Отчет.ПоискКонтрагентов.Форма.РасшифровкаОКВЭД",
				ПараметрыФормы,
				ЭтотОбъект,
				,
				,
				,
				,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
		КонецЕсли;
		
	ИначеЕсли Расшифровка = "ПодключитьИнтернетПоддержкуПользователей" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПодключенияИнтернетПоддержкиПользователейЗавершение",
			ЭтотОбъект);
		
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			ОписаниеОповещения,
			ЭтотОбъект);
		
	ИначеЕсли Расшифровка = "ПереходКПокупкеСервиса" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОбработчикЗавершения = Новый ОписаниеОповещения(
			"ПодключенияТестовогоПериодаЗавершение",
			ЭтотОбъект);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИдентификаторМестаВызова", "podbor_contragentov");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
		
		РаботаСКонтрагентамиКлиент.ПодключитьТестовыйПериод(
			ПараметрыФормы,
			ЭтотОбъект,
			ДополнительныеПараметры);
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Строка")
		И (СтрНайти(Расшифровка, "http:") <> 0
		Или СтрНайти(Расшифровка, "https:") <> 0) Тогда
		
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(Расшифровка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ПереходПоСтраницам

&НаКлиенте
Процедура Переход1(Команда)
	
	НажатиеКнопкиПерехода(НомераСтраницПерехода.Переход1);
	
КонецПроцедуры

&НаКлиенте
Процедура Переход2(Команда)
	
	НажатиеКнопкиПерехода(НомераСтраницПерехода.Переход2);
	
КонецПроцедуры

&НаКлиенте
Процедура Переход3(Команда)
	
	НажатиеКнопкиПерехода(НомераСтраницПерехода.Переход3);
	
КонецПроцедуры

&НаКлиенте
Процедура Переход4(Команда)
	
	НажатиеКнопкиПерехода(НомераСтраницПерехода.Переход4);
	
КонецПроцедуры

&НаКлиенте
Процедура Переход5(Команда)
	
	НажатиеКнопкиПерехода(НомераСтраницПерехода.Переход5);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходПервая(Команда)
	
	НажатиеКнопкиПерехода(НомераСтраницПерехода.ПереходПервая);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходПоНомеру(Команда)
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ВыбораСтраницыЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура(
		"МаксимальноеЗначение, ТекущееЗначение, ДоступноСтраниц",
		Отчет.ВсегоСтраниц,
		Отчет.ТекущаяСтраница,
		Отчет.ДоступноСтраниц);
	
	ОткрытьФорму(
		"Отчет.ПоискКонтрагентов.Форма.ВыборСтраницыДляПерехода",
		ПараметрыФормы,
		УникальныйИдентификатор,
		,
		,
		,
		ОповещениеОВыборе);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходПоследняя(Команда)
	
	НажатиеКнопкиПерехода(НомераСтраницПерехода.ПереходПоследняя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходПредыдущая(Команда)
	
	НажатиеКнопкиПерехода(НомераСтраницПерехода.ПереходПредыдущая);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходСледующая(Команда)
	
	НажатиеКнопкиПерехода(НомераСтраницПерехода.ПереходСледующая);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Сформировать(Команда)
	
	ПодобратьКонтрагентов(
		,
		,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	ПараметрыОтчета = ПараметрыОтчетаСПроверкой(
		Истина,
		1,
		Ложь);
	
	Если ПараметрыОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПредложения = НСтр("ru = 'Для сохранения результата отчета в файл рекомендуется установить расширение для работы с 1С:Предприятием.'");
	Обработчик = Новый ОписаниеОповещения(
		"СохранитьОтчетЗавершение",
		ЭтотОбъект,
		ПараметрыОтчета);
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(
		Обработчик,
		ТекстПредложения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступныеОтборыИПоля(Команда)
	
	ФоновоеОбновлениеПараметров();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОповещений

&НаКлиенте
Процедура ВыбораСтраницыЗавершение(
		НомерСтраницы,
		ДополнительныеПараметры) Экспорт
	
	Если НомерСтраницы <> Неопределено Тогда
		НажатиеКнопкиПерехода(НомерСтраницы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеПолейЗавершение(
		ВыбранныеПоля,
		ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеПоля) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска.НастройкаПолей.Вставить(
		ВидКонтрагента,
		ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ВыбранныеПоля));
	ПараметрыПоиска.Обновить = Истина;
	
	ОбновитьНадписиОтборПоля();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеОтборовЗавершение(
		НастройкаОтборов,
		ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(НастройкаОтборов) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеОтборовЗавершениеНаСервере(НастройкаОтборов);
	
	ОбновитьНадписиОтборПоля();
	
	ПроверитьНастройкиПослеИзменения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияСпискаЗавершение(
		РезультатВыбора,
		ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатВыбора) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПоля = ОписаниеПоля(ДополнительныеПараметры.ЭлементСписок);
	Если ОписаниеПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеПоля.ВыборИзСправочника
		Или ОписаниеПоля.ЭтоПолеОКВЭД Тогда
		
		ПредставлениеСписка = ПоискКонтрагентовСлужебныйКлиентСервер.ПредставлениеЗначенияИзСправочника(
			РезультатВыбора);
			
		Если ПредставлениеСписка = Неопределено Тогда
			БыстрыйДоступПометка = Ложь;
			Возврат;
		КонецЕсли;
		
		ОбновитьЗначениеВНастройках(
			ОписаниеПоля,
			РезультатВыбора,
			ПредставлениеСписка);
		
		ЭтотОбъект[ДополнительныеПараметры.РеквизитСписок] = ПредставлениеСписка;
		
		БыстрыйДоступПометка = Истина;
		
	Иначе
		
		ЭтотОбъект[ДополнительныеПараметры.РеквизитСписок] = РезультатВыбора;
		БыстрыйДоступПометка = Истина;
		
	КонецЕсли;
	
	Подключаемый_БыстрыйДоступПриИзменении(Элементы[ДополнительныеПараметры.ЭлементСписок]);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбораОКВЭДЗавершение(
		РезультатВыбора,
		ДополнительныеПараметры) Экспорт
	
	Если Не ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(РезультатВыбора) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПоля = ОписаниеПоля(ДополнительныеПараметры.Элемент);
	Если ОписаниеПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПравильноеЗначение = Новый Структура("ВыбранныеЗначения");
	ЗаполнитьЗначенияСвойств(ПравильноеЗначение, РезультатВыбора);
	Если ТипЗнч(ПравильноеЗначение.ВыбранныеЗначения) <> Тип("Массив")
		Или ПравильноеЗначение.ВыбранныеЗначения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОКВЭД = ПоискКонтрагентовКлиент.ВыбранныйОКВЭДВЗначениеСправочника(
		ПравильноеЗначение.ВыбранныеЗначения[0]);
		
	ЭтотОбъект[ДополнительныеПараметры.Реквизит] = ДанныеОКВЭД.Представление;
	
	ОбновитьЗначениеВНастройках(
		ОписаниеПоля,
		ДанныеОКВЭД,
		ДанныеОКВЭД.Представление);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчетЗавершение(
		РасширениеПодключено,
		ДополнительныеПараметры) Экспорт
	
	ФорматыСохранения = ДоступныеФорматыСохраненияОтчета();
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = ФорматыСохранения.Фильтр;
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Заголовок = НСтр("ru = 'Сохранение результата отчета'");
	
	ДопПараметры = Новый Структура(
		"ПараметрыОтчета, ИндексФорматовСохраненияОтчета",
		ДополнительныеПараметры,
		ФорматыСохранения.ИндексФорматовСохраненияОтчета);
	
	Обработчик = Новый ОписаниеОповещения(
		"СохранитьОтчетПослеВыбораИмениФайла",
		ЭтотОбъект,
		ДопПараметры);
	
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(
		Обработчик,
		Диалог);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчетПослеВыбораИмениФайла(
		РезультатВыбораФайла,
		ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбораФайла) = Тип("Массив") И РезультатВыбораФайла.Количество() > 0 Тогда
		ПолноеИмяФайлаОтчета = РезультатВыбораФайла[0];
	ИначеЕсли ТипЗнч(РезультатВыбораФайла) = Тип("Строка") Тогда
		ПолноеИмяФайлаОтчета = РезультатВыбораФайла;
	Иначе
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ПолноеИмяФайлаОтчета) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПолногоИмениФайла = СтрРазделить(ПолноеИмяФайлаОтчета, ПолучитьРазделительПути());
	ИмяФайлаОтчета = ОписаниеПолногоИмениФайла[ОписаниеПолногоИмениФайла.ВГраница()];
	
	Если ТипЗнч(ДопПараметры.ИндексФорматовСохраненияОтчета) = Тип("Соответствие") Тогда
		ОписаниеИмениФайла    = СтрРазделить(ИмяФайлаОтчета, ".");
		РасширениеФайлаОтчета = ОписаниеИмениФайла[ОписаниеИмениФайла.ВГраница()];
		ФорматФайла = ДопПараметры.ИндексФорматовСохраненияОтчета[РасширениеФайлаОтчета];
	Иначе
		ФорматФайла = ДопПараметры.ИндексФорматовСохраненияОтчета;
	КонецЕсли;
	
	ПоследнееДействие           = "Сохранить";
	ИмяФайлаДляСохраненияПовтор = ПолноеИмяФайлаОтчета;
	ФорматФайлаПовтор           = ФорматФайла;
	
	ИзменитьСостояниеРезультата(Ложь);
	
	ДопПараметры.ПараметрыОтчета.ПараметрыЗапроса.ДобавитьРасшифровку = Ложь;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения             = НСтр("ru = 'Загрузка данных контрагентов.'");
	ПараметрыОжидания.ВыводитьОкноОжидания       = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	
	РезультатВыполнения = ЗагрузкаДанныхДляСохранения(
		ДопПараметры.ПараметрыОтчета,
		УникальныйИдентификатор);
	
	ДопПараметры.Очистить();
	ДопПараметры.Вставить("ПолноеИмяФайлаОтчета", ПолноеИмяФайлаОтчета);
	ДопПараметры.Вставить("ФорматФайла",          ФорматФайла);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ПоискКонтрагентовДляСохраненияЗавершение",
		ЭтотОбъект,
		ДопПараметры);
	
	Если РезультатВыполнения.Статус = "Выполнено" Тогда
		ПоискКонтрагентовДляСохраненияЗавершение(РезультатВыполнения, ДопПараметры);
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		РезультатВыполнения,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчетПриВыбореИмениФайлаОтчета(
		ПолноеИмяФайлаОтчета) Экспорт
	
	ФайловаяСистемаКлиент.ОткрытьФайл(ПолноеИмяФайлаОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключенияИнтернетПоддержкиПользователейЗавершение(
		РезультатПодключения,
		ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатПодключения)
		Или Не ЗначениеЗаполнено(ПоследнееДействие) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПоследнееДействие();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключенияТестовогоПериодаЗавершение(
		Результат,
		ДополнительныеПараметры) Экспорт
	
	Если Не ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Эталон = Новый Структура("ПовторитьДействие");
	ЗаполнитьЗначенияСвойств(Эталон, Результат);
	
	Если Эталон.ПовторитьДействие = Истина Тогда
		ВыполнитьПоследнееДействие();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаСохранениеНастроек

&НаСервере
Процедура ЗаполнитьНастройкиПоиска(ЭтоСозданиеФормы = Ложь)
	
	ЗагрузитьНастройкиИзБазы(ЭтоСозданиеФормы);
	
	ТекущийВидКонтрагента = ВидКонтрагента;
	Элементы.ВидКонтрагента.СписокВыбора.Очистить();
	
	Элементы.ВидКонтрагента.СписокВыбора.Добавить(
		ВидыКонтрагентов.ЮрЛицо,
		ПоискКонтрагентовСлужебныйКлиентСервер.ПредставлениеКонтрагентаПоВиду(
			ВидыКонтрагентов.ЮрЛицо));
			
	Элементы.ВидКонтрагента.СписокВыбора.Добавить(
		ВидыКонтрагентов.ИП,
		ПоискКонтрагентовСлужебныйКлиентСервер.ПредставлениеКонтрагентаПоВиду(
			ВидыКонтрагентов.ИП));
	
	Если Элементы.ВидКонтрагента.СписокВыбора.НайтиПоЗначению(ТекущийВидКонтрагента) <> Неопределено Тогда
		ВидКонтрагента = ТекущийВидКонтрагента;
	Иначе
		ВидКонтрагента = Элементы.ВидКонтрагента.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиИзБазы(ЭтоСозданиеФормы)
	
	СохраненныеПараметры = ПоискКонтрагентовСлужебный.ДоступныеОтборыИПоля();
	
	ПараметрыПоиска.ДоступныеПоля   = СохраненныеПараметры.ДоступныеПоля;
	ПараметрыПоиска.ДоступныеОтборы = СохраненныеПараметры.ДоступныеОтборы;
	
	НужноОбновитьПараметры = СохраненныеПараметры.ДатаОбновления < НачалоДня(ТекущаяДатаСеанса());
	
	Если Не НужноОбновитьПараметры Тогда
		// Если текущая дата соответствует сохраненным настройкам, то дополнительно проверяем наличие  нужных
		// полей в сохраненной структуре, чтобы учесть возможные изменения в версиях.
		Для Каждого КлючЗначение Из ВидыКонтрагентов Цикл
			Если Не ЗначениеЗаполнено(СохраненныеПараметры.ДоступныеПоля[КлючЗначение.Значение])
				Или Не ЗначениеЗаполнено(СохраненныеПараметры.ДоступныеОтборы[КлючЗначение.Значение]) Тогда
				НужноОбновитьПараметры = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СохраненныеНастройки = ПоискКонтрагентовСлужебный.ЗагрузитьНастройкиОтбораИПолей(
		ПараметрыПоиска.ДоступныеПоля,
		ПараметрыПоиска.ДоступныеОтборы);
		
	СообщенияПользователю = Новый Массив;
	
	Если СохраненныеНастройки.Ошибка Тогда
		СообщенияПользователю.Добавить(СохраненныеНастройки.ИнформацияОбОшибке);
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, СохраненныеНастройки);
		Если ЗначениеЗаполнено(СохраненныеНастройки.ВидКонтрагента) Тогда
			ВидКонтрагента = СохраненныеНастройки.ВидКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СохраненныеНастройки.Информация) Тогда
		СообщенияПользователю.Добавить(СохраненныеНастройки.Информация);
	КонецЕсли;
	
	Если СообщенияПользователю.Количество() > 0 Тогда
		СообщенияПользователю = СтрСоединить(СообщенияПользователю, Символы.ПС);
		Если ЭтоСозданиеФормы Тогда
			ОшибкиПолученияНастроек = СообщенияПользователю;
		Иначе
			ОбщегоНазначения.СообщитьПользователю(СообщенияПользователю);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиПриЗакрытииФормы(Знач СохраняемыеНастройки)
	
	ПоискКонтрагентовСлужебный.СохранитьНастройкиОтбораИПолей(СохраняемыеНастройки);
	
КонецПроцедуры

#КонецОбласти

#Область БыстрыйДоступ

&НаСервере
Процедура СоздатьГруппыБыстрогоДоступа()
	
	Для Каждого КлючЗначение Из ВидыКонтрагентов Цикл
		
		ТекущийВидКонтрагента = КлючЗначение.Значение;
		
		НоваяГруппа = Элементы.Добавить(
			"БыстрыйДоступ" + ТекущийВидКонтрагента,
			Тип("ГруппаФормы"),
			Элементы.БыстрыйДоступ);
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Объединенная        = Ложь;
		НоваяГруппа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.Нет;
		НоваяГруппа.ОтображатьЗаголовок = Ложь;
		
		НоваяГруппаЛево = Элементы.Добавить(
			"БыстрыйДоступЛево" + ТекущийВидКонтрагента,
			Тип("ГруппаФормы"),
			НоваяГруппа);
		НоваяГруппаЛево.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппаЛево.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		НоваяГруппаЛево.Отображение         = ОтображениеОбычнойГруппы.Нет;
		НоваяГруппаЛево.ОтображатьЗаголовок = Ложь;
		
		НоваяГруппаПраво = Элементы.Добавить(
			"БыстрыйДоступПраво" + ТекущийВидКонтрагента,
			Тип("ГруппаФормы"),
			НоваяГруппа);
		НоваяГруппаПраво.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппаПраво.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		НоваяГруппаПраво.Отображение         = ОтображениеОбычнойГруппы.Нет;
		НоваяГруппаПраво.ОтображатьЗаголовок = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьГруппыБыстрогоДоступа()

	Для Каждого КлючЗначение Из ВидыКонтрагентов Цикл
		
		ТекущийВидКонтрагента = КлючЗначение.Значение;
		
		УдалитьПодчиненныеЭлементы(Элементы["БыстрыйДоступЛево"  + ТекущийВидКонтрагента]);
		УдалитьПодчиненныеЭлементы(Элементы["БыстрыйДоступПраво" + ТекущийВидКонтрагента]);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеОтборовЗавершениеНаСервере(Знач НастройкаОтборов)

	ПараметрыПоиска.НастройкаОтборов.Вставить(
		ВидКонтрагента,
		НастройкаОтборов);
		
	ПараметрыПоиска.Обновить = Истина;
	
	ОбновитьБыстрыйДоступ();

КонецПроцедуры

&НаСервере
Процедура ОбновитьБыстрыйДоступ()
	
	Если ИспользоватьНастройкиПриОткрытии Тогда
		УстановитьНастройкиИзПараметровПриОткрытии();
		ИспользоватьНастройкиПриОткрытии = Ложь;
	КонецЕсли;
	
	ОчиститьГруппыБыстрогоДоступа();
	
	УдаляемыеРеквизиты   = Новый Массив;
	ДобавляемыеРеквизиты = Новый Массив;
	
	Для Каждого КлючЗначение Из ПараметрыПоиска.БыстрыйДоступ Цикл
		УдаляемыеРеквизиты.Добавить(КлючЗначение.Значение.Реквизит);
		УдаляемыеРеквизиты.Добавить(КлючЗначение.Значение.РеквизитСписок);
	КонецЦикла;
	
	ПараметрыПоиска.БыстрыйДоступ.Очистить();
	
	ИндексПоля = 1;
	
	ЛевоПраво = Новый Соответствие;
	ЛевоПраво.Вставить(Истина, "Лево");
	ЛевоПраво.Вставить(Ложь,   "Право");
	
	ПорядокЭлементов = Новый Массив;
	
	ПроизвольныйТип = Новый ОписаниеТипов();
	
	ТипыОбработкиПолей = ПоискКонтрагентовСлужебный.ТипыОбработкиПолей();
	ОтборыДляВывода   = Новый СписокЗначений;
	
	Для Каждого КлючЗначение Из ВидыКонтрагентов Цикл
		
		ТекущийВидКонтрагента = КлючЗначение.Значение;
		
		ВсеОтборы = ПараметрыПоиска.ДоступныеОтборы[ТекущийВидКонтрагента];
		Если ВсеОтборы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкиОтборовПоВиду = ПараметрыПоиска.НастройкаОтборов[ТекущийВидКонтрагента];
		Если НастройкиОтборовПоВиду = Неопределено
			Или НастройкиОтборовПоВиду.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборыДляВывода.Очистить();
		
		Для Каждого ДоступныйОтбор Из ВсеОтборы Цикл
			ПользовательскаяНастройка = НастройкиОтборовПоВиду[ДоступныйОтбор.Идентификатор];
			Если ПользовательскаяНастройка = Неопределено
				Или Не ПользовательскаяНастройка.БыстрыйДоступ Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущийТип = ТипЗначенияПоСтроке.Получить(ДоступныйОтбор.ТипЗначения);
			Если ТекущийТип = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОтборыДляВывода.Добавить(
				ДоступныйОтбор,
				Формат(ПользовательскаяНастройка.Порядок, "ЧЦ=4; ЧВН="));
			
		КонецЦикла;
		
		Если ОтборыДляВывода.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборыДляВывода.СортироватьПоПредставлению();
		
		Лево = Истина;
		
		Для Каждого ЭлементОтбора Из ОтборыДляВывода Цикл
			
			ДоступныйОтбор = ЭлементОтбора.Значение;
			
			ПользовательскаяНастройка = НастройкиОтборовПоВиду[ДоступныйОтбор.Идентификатор];
			Если ПользовательскаяНастройка = Неопределено
				Или Не ПользовательскаяНастройка.БыстрыйДоступ Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйИндекс           = Формат(ИндексПоля, "ЧГ=");
			ИмяРеквизита          = "БыстрыйДоступ"          + НовыйИндекс;
			ИмяРеквизитаСписок    = "БыстрыйДоступСписок"    + НовыйИндекс;
			
			ОписаниеПоля = ПоискКонтрагентовСлужебныйКлиентСервер.НовыйОписаниеБыстрогоОтбора();
			ОписаниеПоля.ВидКонтрагента        = ТекущийВидКонтрагента;
			ОписаниеПоля.Реквизит              = ИмяРеквизита;
			ОписаниеПоля.РеквизитСписок        = ИмяРеквизитаСписок;
			ОписаниеПоля.Представление         = ДоступныйОтбор.Представление;
			ОписаниеПоля.ИдентификаторКритерия = ДоступныйОтбор.Идентификатор;
			ОписаниеПоля.ТипЗначения           = ДоступныйОтбор.ТипЗначения;
			ОписаниеПоля.ТипОбработки          = ДоступныйОтбор.ТипОбработки;
			ОписаниеПоля.ВыборИзСправочника    = ДоступныйОтбор.ВыборИзСправочника;
			
			ОписаниеПоля.ЭтоПолеОКВЭД = ОписаниеПоля.ТипОбработки = ТипыОбработкиПолей.ОКВЭД;

			ОписаниеПоля.Положение = "БыстрыйДоступ" + ЛевоПраво[Лево] + ТекущийВидКонтрагента;
			
			ОписаниеПоля.ВидСравнения = ПользовательскаяНастройка.ВидСравнения;
			ОписаниеПоля.Пометка      = ПользовательскаяНастройка.Пометка;
			ОписаниеПоля.Значение     = ПользовательскаяНастройка.Значение;
			
			Если (ОписаниеПоля.ВыборИзСправочника
				Или ОписаниеПоля.ЭтоПолеОКВЭД)
				И ОписаниеПоля.ВидСравнения <> ПоискКонтрагентовСлужебныйКлиентСервер.ВидСравненияСодержит() Тогда
				
				ПредставлениеЗначения = ПоискКонтрагентовСлужебныйКлиентСервер.ПредставлениеЗначенияИзСправочника(
					ПользовательскаяНастройка.Значение);
				
				ОписаниеПоля.ПредставлениеЗначения       = ПредставлениеЗначения;
				ОписаниеПоля.ПредставлениеЗначенияСписка = ПредставлениеЗначения;
				
			КонецЕсли;

			Если Не ЗначениеЗаполнено(ОписаниеПоля.ВидСравнения)
				И ДоступныйОтбор.ВариантыСравнения.Количество() > 0 Тогда
				ОписаниеПоля.ВидСравнения = ДоступныйОтбор.ВариантыСравнения[0];
			КонецЕсли;
			
			ПараметрыПоиска.БыстрыйДоступ.Вставить(НовыйИндекс, ОписаниеПоля);
			
			Реквизит = Новый РеквизитФормы(
				ИмяРеквизита,
				ПроизвольныйТип,
				,
				ОписаниеПоля.Представление);
				
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			
			Реквизит = Новый РеквизитФормы(
				ИмяРеквизитаСписок,
				Новый ОписаниеТипов("СписокЗначений"),
				,
				ОписаниеПоля.Представление);
				
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			
			ПорядокЭлементов.Добавить(НовыйИндекс);
			
			ИндексПоля = ИндексПоля + 1;
			
			Лево = Не Лево;

		КонецЦикла;

	КонецЦикла;
	
	ОтборыДляВывода.Очистить();
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	Для каждого ИндексПоля Из ПорядокЭлементов Цикл
		
		ОписаниеПоля = ПараметрыПоиска.БыстрыйДоступ[ИндексПоля];
		
		НоваяГруппа = НовыйГруппаБыстрыйДоступ(ОписаниеПоля, ИндексПоля);
		ДобавитьЭлементБыстрыйДоступ(НоваяГруппа, ОписаниеПоля, ИндексПоля, Ложь);
		ДобавитьЭлементБыстрыйДоступ(НоваяГруппа, ОписаниеПоля, ИндексПоля, Истина);
		
		Если (ОписаниеПоля.ВыборИзСправочника
			Или ОписаниеПоля.ЭтоПолеОКВЭД)
			И ОписаниеПоля.ВидСравнения <> ПоискКонтрагентовСлужебныйКлиентСервер.ВидСравненияСодержит() Тогда
			ЭтотОбъект[ОписаниеПоля.Реквизит]       = ОписаниеПоля.ПредставлениеЗначения;
			ЭтотОбъект[ОписаниеПоля.РеквизитСписок] = ОписаниеПоля.ПредставлениеЗначенияСписка;
		Иначе
			ЭтотОбъект[ОписаниеПоля.Реквизит]       = ОписаниеПоля.Значение;
			ЭтотОбъект[ОписаниеПоля.РеквизитСписок] = ОписаниеПоля.Значение;
		КонецЕсли;
		
		УстановитьЦветПоляБыстрогоДоступа(
			Элементы,
			ОписаниеПоля,
			ОписаниеПоля.Пометка);

	КонецЦикла;
	
	Для каждого КлючЗначение Из ВидыКонтрагентов Цикл
		ВидимостьЭлемента = КлючЗначение.Значение = ВидКонтрагента;
		Элементы["БыстрыйДоступЛево"  + ТекущийВидКонтрагента].Видимость = ВидимостьЭлемента;
		Элементы["БыстрыйДоступПраво" + ТекущийВидКонтрагента].Видимость = ВидимостьЭлемента;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НовыйГруппаБыстрыйДоступ(ОписаниеПоля, ИндексПоля)
	
	НоваяГруппа = Элементы.Добавить(
		"ПолеБыстрогоДоступаГруппа" + ИндексПоля,
		Тип("ГруппаФормы"),
		Элементы[ОписаниеПоля.Положение]);
	НоваяГруппа.Вид                    = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.ОтображатьЗаголовок    = Ложь;
	НоваяГруппа.Отображение            = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	НоваяГруппа.Группировка            = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	Возврат НоваяГруппа;
	
КонецФункции

&НаСервере
Процедура ДобавитьЭлементБыстрыйДоступ(
		Положение,
		ОписаниеПоля,
		ИндексПоля,
		ДляСписка)
	
	ПоложениеЗаголовкаЭлемента = ПоложениеЗаголовкаЭлементаФормы.Лево;
	
	ВидСравненияВСписке = ВидыСравнений.ВСписке.Значение;
	
	Если ДляСписка Тогда
		ИмяЭлемента                = "ПолеБыстрогоДоступаСписок" + ИндексПоля;
		ПутьКДанным                = ОписаниеПоля.РеквизитСписок;
		ВидСравненияПоля           = ВидСравненияВСписке;
		ОписаниеПоля.ЭлементСписок = ИмяЭлемента;
	Иначе
		ИмяЭлемента          = "ПолеБыстрогоДоступа" + ИндексПоля;
		ПутьКДанным          = ОписаниеПоля.Реквизит;
		ВидСравненияПоля     = ОписаниеПоля.ВидСравнения;
		ОписаниеПоля.Элемент = ИмяЭлемента;
	КонецЕсли;
	
	НовыйЭлемент = Элементы.Добавить(
		ИмяЭлемента,
		Тип("ПолеФормы"),
		Положение);
	НовыйЭлемент.Вид                = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлемента;
	НовыйЭлемент.ПутьКДанным        = ПутьКДанным;
	
	ЗаголовокПоля  = ОписаниеПоля.Представление;
	
	Если СтрДлина(ЗаголовокПоля) > 15 Тогда // длина заголовка поля ВидКонтрагента.
		ЗаголовокПоля = Лев(ЗаголовокПоля, 12) + "...";
	КонецЕсли;
	
	НовыйЭлемент.Заголовок = ЗаголовокПоля;
	
	Если ДляСписка Тогда
		НовыйЭлемент.Видимость = ОписаниеПоля.ВидСравнения = ВидСравненияВСписке;
	Иначе
		НовыйЭлемент.Видимость = ОписаниеПоля.ВидСравнения <> ВидСравненияВСписке;
	КонецЕсли;
	
	ПараметрыПоля                    = НовыйПараметрыПоляЭлементаОтбора();
	ПараметрыПоля.ВидСравнения       = ВидСравненияПоля;
	ПараметрыПоля.ТипЗначения        = ОписаниеПоля.ТипЗначения;
	ПараметрыПоля.ЭтоПолеОКВЭД       = ОписаниеПоля.ЭтоПолеОКВЭД;
	ПараметрыПоля.ВыборИзСправочника = ОписаниеПоля.ВыборИзСправочника;
	
	НастроитьПараметрыПоляЭлементаОтбора(
		НовыйЭлемент,
		Неопределено,
		ПараметрыПоля);
		
	НовыйЭлемент.УстановитьДействие("ПриИзменении",         "Подключаемый_БыстрыйДоступПриИзменении");
	НовыйЭлемент.УстановитьДействие("НачалоВыбора",         "Подключаемый_БыстрыйДоступНачалоВыбора");
	НовыйЭлемент.УстановитьДействие("АвтоПодбор",           "Подключаемый_БыстрыйДоступАвтоПодбор");
	НовыйЭлемент.УстановитьДействие("ОбработкаВыбора",      "Подключаемый_БыстрыйДоступОбработкаВыбора");
	НовыйЭлемент.УстановитьДействие("ОкончаниеВводаТекста", "Подключаемый_БыстрыйДоступОкончаниеВводаТекста");
	НовыйЭлемент.УстановитьДействие("Очистка",              "Подключаемый_БыстрыйДоступОчистка");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыйПараметрыПоляЭлементаОтбора()
	
	Результат = Новый Структура;
	Результат.Вставить("ВидСравнения",       "");
	Результат.Вставить("ТипЗначения",        "");
	Результат.Вставить("ЭтоПолеОКВЭД",       Ложь);
	Результат.Вставить("ВыборИзСправочника", Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура НастроитьПараметрыПоляЭлементаОтбора(
		Элемент,
		ТекущееЗначение,
		Знач ПараметрыПоля)
	
	Если Не ЗначениеЗаполнено(ПараметрыПоля.ВидСравнения) Тогда
		ТекущееЗначение = Неопределено;
		Элемент.ОграничениеТипа = Новый ОписаниеТипов(Неопределено);
		Возврат;
	КонецЕсли;

	Если ПараметрыПоля.ВидСравнения = ВидыСравнений.Содержит.Значение Тогда
		
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("Строка");
		Элемент.КнопкаВыбора = Ложь;
		ТекущееЗначение = Элемент.ОграничениеТипа.ПривестиЗначение(ТекущееЗначение);
		
	ИначеЕсли ПараметрыПоля.ВидСравнения = ВидыСравнений.ВСписке.Значение Тогда
		
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		Элемент.КнопкаВыбора = Истина;
		
		Если ЗначениеЗаполнено(ТекущееЗначение) Тогда
			НовыйСписок = Новый СписокЗначений;
			НовыйСписок.Добавить(ТекущееЗначение);
			ТекущееЗначение = НовыйСписок;
		КонецЕсли;
		
	ИначеЕсли ПараметрыПоля.ВидСравнения = ВидыСравнений.Равно.Значение
		Или ПараметрыПоля.ВидСравнения = ВидыСравнений.Больше.Значение
		Или ПараметрыПоля.ВидСравнения = ВидыСравнений.БольшеИлиРавно.Значение
		Или ПараметрыПоля.ВидСравнения = ВидыСравнений.Меньше.Значение
		Или ПараметрыПоля.ВидСравнения = ВидыСравнений.МеньшеИлиРавно.Значение Тогда

		Элемент.ОграничениеТипа = ТипЗначенияПоСтроке.Получить(ПараметрыПоля.ТипЗначения);
		
		Если ПараметрыПоля.ЭтоПолеОКВЭД Тогда
			Элемент.КнопкаВыбора = Истина
		Иначе
			Элемент.КнопкаВыбора = Неопределено;
		КонецЕсли;
		
		Если ТипЗнч(ТекущееЗначение) = Тип("СписокЗначений") Тогда
			ТекущееЗначение = ТекущееЗначение.Значение[0].Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыПоля.ЭтоПолеОКВЭД Или ПараметрыПоля.ВыборИзСправочника Тогда
		Элемент.КнопкаОчистки = Истина;
	КонецЕсли;
	
	Если ПараметрыПоля.ЭтоПолеОКВЭД Тогда
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элемент.Подсказка            = ПодсказкаПоляОКВЭД();
	Иначе
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		Элемент.Подсказка            = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПодчиненныеЭлементы(Элемент)
	
	Количество = Элемент.ПодчиненныеЭлементы.Количество();
	Пока Количество >= 1 Цикл
		Элементы.Удалить(Элемент.ПодчиненныеЭлементы[0]);
		Количество = Количество - 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеПоля(Элемент)
	
	Если ТипЗнч(Элемент) = Тип("Строка") Тогда
		ИмяЭлемента = Элемент;
	Иначе
		ИмяЭлемента = Элемент.Имя;
	КонецЕсли;
	
	ИндексПоля = СтрЗаменить(ИмяЭлемента, "ПолеБыстрогоДоступа", "");
	ИндексПоля = СтрЗаменить(ИндексПоля,  "Список",              "");
	
	Возврат ПараметрыПоиска.БыстрыйДоступ[ИндексПоля];
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветПоляБыстрогоДоступа(
		Элементы,
		ОписаниеПоля,
		Пометка)
	
	Если Пометка Тогда
		ЦветШрифта = Новый Цвет();
	Иначе
		ЦветШрифта = ЦветНедоступногоТекста();
	КонецЕсли;
	Элементы[ОписаниеПоля.Элемент].ЦветТекста       = ЦветШрифта;
	Элементы[ОписаниеПоля.ЭлементСписок].ЦветТекста = ЦветШрифта;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЦветНедоступногоТекста()
	
	Возврат ЦветаСтиля.ЦветНедоступногоТекста;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодсказкаПоляОКВЭД()
	
	Возврат
		НСтр("ru = 'Особенности поиска информации с отбором по коду ОКВЭД:
		|• Автоматический подбор значения при вводе текста, выполняется только
		|  по актуальной версии ОКВЭД.
		|• При открытии общего списка ОКВД, возможен выбор только актуальных
		|  значений.
		|• Если необходимо выполнить поиск по устаревшим версиям классификатора
		|  и нужный код отсутствует в списке выбора, то допускается указание
		|  кода вручную. При этом могут быть введены только цифры и
		|  знак ""."" (точка). Например, можно указать код ""14.40"", который
		|  присутствует только в первой версии классификатора.
		|• Поиск информации осуществляется без учета версии классификатора.
		|  Например, коду ""01.21"" классификатора первой версии соответствует
		|  значение ""Разведение крупного рогатого скота"", а классификатора
		|  второй версии - значение ""Выращивание винограда"".
		|  При поиске информации по указанному коду в результат попадут как
		|  те контрагенты, у которых указан ОКВЭД ""01.21 Разведение крупного
		|  рогатого скота"", так и те, у которых ОКВЭД содержит значение
		|  ""01.21 Выращивание винограда"".'");
	
КонецФункции

&НаКлиенте
Функция ОбновитьЗначениеВНастройках(
	ОписаниеПоля,
	Значение,
	ПредставлениеЗначения,
	НастройкаОтборов = Неопределено)
	
	Если НастройкаОтборов = Неопределено Тогда
		НастройкаОтборов = ПараметрыПоиска.НастройкаОтборов[ОписаниеПоля.ВидКонтрагента];
		Если НастройкаОтборов = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	НовыйОтбор = НастройкаОтборов[ОписаниеПоля.ИдентификаторКритерия];
	Если НовыйОтбор = Неопределено Тогда
		НовыйОтбор = ПоискКонтрагентовСлужебныйКлиентСервер.НовыйОписаниеПоляОтбора();
		ЗаполнитьЗначенияСвойств(НовыйОтбор, ОписаниеПоля);
		НовыйОтбор.Идентификатор = ОписаниеПоля.ИдентификаторКритерия;
		НастройкаОтборов.Вставить(ОписаниеПоля.ИдентификаторКритерия, НовыйОтбор);
	КонецЕсли;

	НовыйОтбор.Значение              = Значение;
	НовыйОтбор.ПредставлениеЗначения = ПредставлениеЗначения;
	НовыйОтбор.Пометка               = ЗначениеЗаполнено(Значение);
	НовыйОтбор.БыстрыйДоступ         = Истина;
	
	Если Не ЗначениеЗаполнено(НовыйОтбор.ВидСравнения) Тогда
		НовыйОтбор.ВидСравнения = ОписаниеПоля.ВидСравнения;
	КонецЕсли;
	
	ПараметрыПоиска.Обновить = Истина;
	
	Возврат НовыйОтбор;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьЗначениеВНастройках(ОписаниеПоля)
	
	ОбновитьЗначениеВНастройках(
		ОписаниеПоля,
		Неопределено,
		"");
	
КонецПроцедуры

#КонецОбласти

#Область ПереходПоСтраницам

&НаКлиенте
Процедура НажатиеКнопкиПерехода(НомерСтраницы)
	
	Если НомерСтраницы = Отчет.ТекущаяСтраница
		Или НомерСтраницы <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НомерСтраницы > Отчет.ДоступноСтраниц Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Переход на страницу с номером больше %1 не поддерживается.
			|Уточните параметры поиска.'"),
			Отчет.ДоступноСтраниц);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПодобратьКонтрагентов(Ложь, НомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПереходНаСтраницу(Знач НомерСтраницы)
	
	ВсегоСтраниц = Отчет.ВсегоСтраниц;
	
	ВидимостьНеЦифры = ВсегоСтраниц > 5;
	
	Элементы.ПереходПервая.Видимость     = ВидимостьНеЦифры;
	Элементы.ПереходПредыдущая.Видимость = ВидимостьНеЦифры;
	Элементы.ПереходСледующая.Видимость  = ВидимостьНеЦифры;
	Элементы.ПереходПоследняя.Видимость  = ВидимостьНеЦифры;
	Элементы.ПереходПоНомеру.Видимость   = ВидимостьНеЦифры;
	
	ШрифтОбычный = Новый Шрифт();

	Для ном = 1 По 5 Цикл
		Элементы["Переход" + ном].Видимость = ВсегоСтраниц >= ном;
		Элементы["Переход" + ном].Шрифт = ШрифтОбычный;
		Элементы["Переход" + ном].Пометка = Ложь;
	КонецЦикла;
	
	НомераСтраницПерехода = ОбнулитьНомераПерехода(ВсегоСтраниц);
	
	Если НомерСтраницы = 0 Тогда
		
		Возврат;
		
	ИначеЕсли НомерСтраницы <= 3 Или ВсегоСтраниц <= 5 Тогда
		
		Для ном = 1 По 5 Цикл
			Элементы["Переход" + ном].Заголовок = Формат(ном, "ЧГ=");
			НомераСтраницПерехода["Переход" + ном] = ном;
		КонецЦикла;
		
		Элементы["Переход" + НомерСтраницы].Пометка = Истина;
		Элементы["Переход" + НомерСтраницы].Шрифт   = ПолужирныйШрифт;
		
		НомераСтраницПерехода.ПереходПредыдущая = НомерСтраницы - 1;
		НомераСтраницПерехода.ПереходСледующая  = НомерСтраницы + 1;
		
	Иначе
		
		Разница = ВсегоСтраниц - НомерСтраницы;
		Если Разница < 2 Тогда
			
			Элементы.Переход5.Заголовок = Строка(ВсегоСтраниц);
			Элементы.Переход4.Заголовок = Строка(ВсегоСтраниц - 1);
			Элементы.Переход3.Заголовок = Строка(ВсегоСтраниц - 2);
			Элементы.Переход2.Заголовок = Строка(ВсегоСтраниц - 3);
			Элементы.Переход1.Заголовок = Строка(ВсегоСтраниц - 4);
			
			НомераСтраницПерехода.Переход5 = ВсегоСтраниц;
			НомераСтраницПерехода.Переход4 = ВсегоСтраниц - 1;
			НомераСтраницПерехода.Переход3 = ВсегоСтраниц - 2;
			НомераСтраницПерехода.Переход2 = ВсегоСтраниц - 3;
			НомераСтраницПерехода.Переход1 = ВсегоСтраниц - 4;
			
			Если Разница = 0 Тогда
				
				Элементы.Переход5.Пометка = Истина;
				Элементы.Переход5.Шрифт   = ПолужирныйШрифт;
				
				НомераСтраницПерехода.ПереходПредыдущая = НомераСтраницПерехода.Переход4;
				НомераСтраницПерехода.ПереходСледующая  = 0;
				
			Иначе
				
				Элементы.Переход4.Пометка = Истина;
				Элементы.Переход4.Шрифт   = ПолужирныйШрифт;
				
				НомераСтраницПерехода.ПереходПредыдущая = НомераСтраницПерехода.Переход3;
				НомераСтраницПерехода.ПереходСледующая  = НомераСтраницПерехода.Переход5;
				
			КонецЕсли;
			
		Иначе
			
			Элементы.Переход1.Заголовок = Строка(НомерСтраницы - 2);
			Элементы.Переход2.Заголовок = Строка(НомерСтраницы - 1);
			Элементы.Переход3.Заголовок = Строка(НомерСтраницы);
			Элементы.Переход4.Заголовок = Строка(НомерСтраницы + 1);
			Элементы.Переход5.Заголовок = Строка(НомерСтраницы + 2);
			
			НомераСтраницПерехода.Переход1 = НомерСтраницы - 2;
			НомераСтраницПерехода.Переход2 = НомерСтраницы - 1;
			НомераСтраницПерехода.Переход3 = НомерСтраницы;
			НомераСтраницПерехода.Переход4 = НомерСтраницы + 1;
			НомераСтраницПерехода.Переход5 = НомерСтраницы + 2;
			
			Элементы.Переход3.Пометка = Истина;
			Элементы.Переход3.Шрифт   = ПолужирныйШрифт;
			
			НомераСтраницПерехода.ПереходПредыдущая = НомераСтраницПерехода.Переход2;
			НомераСтраницПерехода.ПереходСледующая  = НомераСтраницПерехода.Переход4;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Отчет.ТекущаяСтраница = НомерСтраницы;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбнулитьНомераПерехода(Последняя = 0)
	
	Результат = Новый Структура;
	Результат.Вставить("Переход1",          1);
	Результат.Вставить("Переход2",          0);
	Результат.Вставить("Переход3",          0);
	Результат.Вставить("Переход4",          0);
	Результат.Вставить("Переход5",          0);
	Результат.Вставить("Переход6",          0);
	Результат.Вставить("ПереходПредыдущая", 0);
	Результат.Вставить("ПереходСледующая",  0);
	Результат.Вставить("ПереходПервая",     1);
	Результат.Вставить("ПереходПоследняя",  Последняя);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеДоступныхОтборовИПолей

&НаКлиенте
Процедура ФоновоеОбновлениеПараметров()
	
	ПоследнееДействие = "ОбновлениеПараметров";
	
	Если Не НеОчищатьСообщения Тогда
		ОчиститьСообщения();
	Иначе
		НеОчищатьСообщения = Ложь;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания              = Истина;
	ПараметрыОжидания.ФормаВладелец                     = ЭтотОбъект;
	ПараметрыОжидания.ОтменятьПриЗакрытииФормыВладельца = Истина;
	ПараметрыОжидания.ТекстСообщения                    = НСтр("ru = 'Обновление настроек.'");
	
	РезультатВыполнения = ОбновитьДоступныеОтборыИПоляНаСервере(
		УникальныйИдентификатор);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ОбновлениеДоступныхОтборовИПолейЗавершение",
		ЭтотОбъект);
	
	Если РезультатВыполнения.Статус = "Выполнено" Тогда
		ОбновлениеДоступныхОтборовИПолейЗавершение(РезультатВыполнения, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		РезультатВыполнения,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьДоступныеОтборыИПоляНаСервере(Знач УникальныйИдентификатор)
	
	НаименованиеЗадания = НСтр("ru = 'Поиск контрагентов. Обновление доступных критериев и полей.'");
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"ПоискКонтрагентовСлужебный.ОбновитьДоступныеОтборыИПоля");
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ОбновлениеДоступныхОтборовИПолейЗавершение(
		РезультатЗадания,
		ДополнительныеПараметры) Экспорт
	
	Если РезультатЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗадания.Статус = "Выполнено" Тогда
		
		РезультатОбновления = ПолучитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);
		
		ПараметрыПоиска.Обновить = Истина;
		
		Успешно = Истина;
		Если РезультатОбновления.Ошибка Тогда
			
			Если РезультатОбновления.КритическаяОшибка Тогда
				// Если не прошли аутентификацию
				// или ни один из параметров не обновился.
				ИзменитьСостояниеРезультата(Истина, РезультатОбновления.ПредставлениеОшибки);
				ОбновитьБыстрыйДоступ();
				ОбновитьНадписиОтборПоля();
				Возврат;
			КонецЕсли;
			
			// Если ошибки есть, но часть параметров обновилась,
			// то просто выводим сообщение, но не выходим из процедуры
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				РезультатОбновления.ИнформацияОбОшибке);
			Успешно = Ложь;
			
		КонецЕсли;
		
		ИзменитьСостояниеРезультата(Ложь);
		
		Для каждого КлючЗначение Из РезультатОбновления.ДоступныеОтборы Цикл
			ПараметрыПоиска.ДоступныеОтборы.Вставить(
				КлючЗначение.Ключ,
				КлючЗначение.Значение);
		КонецЦикла;
			
		Для каждого КлючЗначение Из РезультатОбновления.ДоступныеПоля Цикл
			ПараметрыПоиска.ДоступныеПоля.Вставить(
				КлючЗначение.Ключ,
				КлючЗначение.Значение);
		КонецЦикла;
		
		Если РезультатОбновления.ДоступныеОтборы.Количество() > 0
			Или РезультатОбновления.ДоступныеПоля.Количество() > 0 Тогда
			
			// Если обновилось хотя бы одно значение, то обрабатываем настройки пользователя и
			// поля быстрого доступа.
			
			Информация = Новый Массив;
			
			Для Каждого КлючЗначение Из ВидыКонтрагентов Цикл
				
				ТекущийВидКонтрагента = КлючЗначение.Значение;
				
				ПоискКонтрагентовСлужебныйКлиентСервер.ОбработатьНастройкиПолейПослеЗагрузки(
					ПараметрыПоиска.НастройкаПолей[ТекущийВидКонтрагента],
					ПараметрыПоиска.ДоступныеПоля[ТекущийВидКонтрагента],
					ПоискКонтрагентовСлужебныйКлиентСервер.ПоляПоУмолчанию(ТекущийВидКонтрагента));
					
				ПоискКонтрагентовСлужебныйКлиентСервер.ОбработатьНастройкиОтборовПослеЗагрузки(
					ПараметрыПоиска.НастройкаОтборов[ТекущийВидКонтрагента],
					ПараметрыПоиска.ДоступныеОтборы[ТекущийВидКонтрагента],
					Информация,
					ПоискКонтрагентовСлужебныйКлиентСервер.ПредставлениеКонтрагентаПоВиду(
						ТекущийВидКонтрагента));
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Информация) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					СтрСоединить(
						Информация,
						Символы.ПС));
			КонецЕсли;
			
			Если Успешно Тогда
				ТекстСообщения = НСтр("ru = 'Обновление информации выполнено успешно.'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Обновление информации выполнено с ошибками.'");
			КонецЕсли;
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Обновление информации'"),
				,
				ТекстСообщения,
				БиблиотекаКартинок.ДиалогИнформация,
				СтатусОповещенияПользователя.Информация,);
			
		КонецЕсли;
		
	ИначеЕсли РезультатЗадания.Статус = "Ошибка" Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			РезультатЗадания.КраткоеПредставлениеОшибки);

	КонецЕсли;
	
	ОбновитьБыстрыйДоступ();
	ОбновитьНадписиОтборПоля();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписиОтборПоля()
	
	УстановленныеЗначения = Новый СписокЗначений;
	ДоступныеПоля = ПараметрыПоиска.ДоступныеПоля[ВидКонтрагента];
	
	// Настройка полей
	НастройкаПолей = ПараметрыПоиска.НастройкаПолей[ВидКонтрагента];
	Если НастройкаПолей <> Неопределено Тогда
		Для Каждого Настройка Из НастройкаПолей Цикл
			Если Настройка.Пометка Тогда
				ОписаниеВыводимогоПоля = ДоступныеПоля[Настройка.Идентификатор];
				Если ОписаниеВыводимогоПоля <> Неопределено Тогда
					УстановленныеЗначения.Добавить(
						ОписаниеВыводимогоПоля.Наименование);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ДекорацияПоля.Заголовок = ЗаголовокЭлементаОтборыПоля(
		НСтр("ru = 'Поля (%1)'"),
		УстановленныеЗначения.ВыгрузитьЗначения());
	
	// Настройка отборов
	УстановленныеЗначения.Очистить();
	
	НастройкаОтборов = ПараметрыПоиска.НастройкаОтборов[ВидКонтрагента];
	Если НастройкаОтборов <> Неопределено Тогда
		Для Каждого КлючЗначение Из НастройкаОтборов Цикл
			Если КлючЗначение.Значение.Пометка Тогда
				УстановленныеЗначения.Добавить(
					КлючЗначение.Значение.Представление,
					Формат(КлючЗначение.Значение.Порядок, "ЧЦ=3; ЧВН="));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УстановленныеЗначения.СортироватьПоПредставлению();
	
	Элементы.ДекорацияОтбор.Заголовок = ЗаголовокЭлементаОтборыПоля(
		НСтр("ru = 'Отборы (%1)'"),
		УстановленныеЗначения.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Функция ЗаголовокЭлементаОтборыПоля(ШаблонЗаголовка, УстановленныеЗначения)
	
	Всего = УстановленныеЗначения.Количество();
	
	Если Всего = 0 Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонЗаголовка,
			НСтр("ru = 'не заданы'"));
	КонецЕсли;
	
	МаксДлинаСтроки = 40;
	
	ДлинаДополнения = 8;
	Если Всего > 10 Тогда
		Если Всего > 100 Тогда
			ДлинаДополнения = 10;
		Иначе
			ДлинаДополнения = 9;
		КонецЕсли;
	КонецЕсли;
	
	ТекстПредставления = СтрСоединить(УстановленныеЗначения, "# ");
	Если СтрДлина(ТекстПредставления) > МаксДлинаСтроки Тогда
		
		Сокращенный = Лев(
			ТекстПредставления,
			МаксДлинаСтроки - ДлинаДополнения);
		
		СписокСокращенных = СтрРазделить(Сокращенный, "#", Ложь);
		СписокПолный      = СтрРазделить(ТекстПредставления, "#", Ложь);
		
		ВсегоВСокращенном = СписокСокращенных.ВГраница();
		
		Для ном = 0 По ВсегоВСокращенном Цикл
			СписокСокращенных[ном] = СокрЛП(СписокСокращенных[ном]);
		КонецЦикла;
		
		Если СписокСокращенных[ВсегоВСокращенном] <> СокрЛП(СписокПолный[ВсегоВСокращенном]) Тогда
			СписокСокращенных.Удалить(ВсегоВСокращенном);
		КонецЕсли;
		
		КоличествоДополнить = Всего - СписокСокращенных.Количество();
		
		ТекстПредставления = СтрСоединить(СписокСокращенных, "# ")
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '... еще %1'"),
				КоличествоДополнить)
		
	КонецЕсли;
	
	ТекстПредставления = СтрЗаменить(ТекстПредставления, "#", ",");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонЗаголовка,
		ТекстПредставления);
	
КонецФункции

#КонецОбласти

#Область ФормированиеОтчета

&НаКлиенте
Процедура ПодобратьКонтрагентов(
		НовыйЗапрос = Истина,
		НомерСтраницы = 1,
		СохранятьНастройки = Ложь)
	
	// Подготовка и проверка параметров
	ПараметрыОтчета = ПараметрыОтчетаСПроверкой(
		НовыйЗапрос,
		НомерСтраницы,
		СохранятьНастройки);
	
	Если ПараметрыОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	ВыведеныОшибки = Ложь;
	ПоследнееДействие = "Сформировать";
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
		Элементы.Результат,
		"ФормированиеОтчета");
	
	// Формирование отчета
	Отчет.АдресХранилищаНастроек = ПоместитьВоВременноеХранилище(ПараметрыОтчета, УникальныйИдентификатор);
	СкомпоноватьРезультат(РежимКомпоновкиРезультата.Фоновый);
	
	Если Не Отчет.ОшибкаПриФормированииОтчета Тогда
		
		ПараметрыПоиска.НастройкиПриФормировании = ПараметрыОтчета.ПараметрыЗапроса;
		
		Если Отчет.ДоступноСтраниц < Отчет.ВсегоСтраниц Тогда
			
			Отчет.ВсегоСтраниц = Отчет.ДоступноСтраниц;
			ОрганизацийМаксимум = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru='%1 организаций;%1 организация;;%1 организации;%1 организаций;%1 организаций'"),
				Отчет.ДоступноСтраниц * 100,
				,
				"ЧДЦ=0; ЧН=0");
				
			Элементы.ДекорацияНайденоКоличество.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для просмотра/сохранения доступны первые %1. Уточните параметры поиска.'"),
				ОрганизацийМаксимум);
				
		Иначе
			
			КоличествоОрганизаций = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru='%1 организаций;%1 организация;;%1 организации;%1 организаций;%1 организаций'"),
				Отчет.ВсегоЗаписей,
				,
				"ЧДЦ=0; ЧН=0");
				
			Элементы.ДекорацияНайденоКоличество.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Найдено: %1'"),
				КоличествоОрганизаций);
			
		КонецЕсли;
		
		Элементы.ПереходПоследняя.Заголовок = "(" + Строка(Отчет.ВсегоСтраниц) + ")";
		Если Отчет.ТекущаяСтраница > Отчет.ВсегоСтраниц
			И Отчет.ТекущаяСтраница > 1 Тогда
			ПодобратьКонтрагентов(НовыйЗапрос, Отчет.ВсегоСтраниц);
			Возврат;
		Иначе
			ВыполнитьПереходНаСтраницу(Отчет.ТекущаяСтраница);
		КонецЕсли;
		
		Элементы.КоманднаяПанельНавигация.Видимость = Истина;
		Элементы.ФормаСохранить.Доступность         = Истина;
		
	Иначе

		Элементы.ДекорацияНайденоКоличество.Заголовок = НСтр("ru = 'Найдено: 0 организаций'");
		ВыполнитьПереходНаСтраницу(0);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
		Элементы.Результат);
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьПараметрыОтчета(
		НовыйЗапрос,
		НомерСтраницы,
		СохранятьНастройки)
	
	ПараметрыОтчета = Новый Структура(
		"ПараметрыЗапроса, СохраняемыеНастройки",
		ПоискКонтрагентовСлужебныйКлиентСервер.НовыйПараметрыЗапроса(),
		Неопределено);
	
	Если НовыйЗапрос Тогда
		ЗаполнитьПараметрыЗапроса(ПараметрыОтчета.ПараметрыЗапроса);
	Иначе
		ТекущиеПараметры = ПараметрыПоиска.НастройкиПриФормировании;
		Если ТекущиеПараметры <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыОтчета.ПараметрыЗапроса, ТекущиеПараметры);
		КонецЕсли;
		Если ТекущиеПараметры.ВидКонтрагента = ВидКонтрагента Тогда
			ВыбранныеПоляВПараметрыЗапроса(ТекущиеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОтчета.ПараметрыЗапроса.НомерСтраницы       = НомерСтраницы;
	ПараметрыОтчета.ПараметрыЗапроса.ДобавитьРасшифровку = Истина;
	
	Если СохранятьНастройки Тогда
		
		СохраняемыеНастройки = ПоискКонтрагентовСлужебныйКлиентСервер.НовыйСохраняемыеНастройки();
		СохраняемыеНастройки.НастройкаПолей   = ПараметрыПоиска.НастройкаПолей;
		СохраняемыеНастройки.НастройкаОтборов = ПараметрыПоиска.НастройкаОтборов;
		СохраняемыеНастройки.ВидКонтрагента   = ВидКонтрагента;
		
		ПараметрыОтчета.СохраняемыеНастройки = СохраняемыеНастройки;
		
	КонецЕсли;
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаКлиенте
Функция ПараметрыОтчетаСПроверкой(
		НовыйЗапрос,
		НомерСтраницы,
		СохранятьНастройки)
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета(
		НовыйЗапрос,
		НомерСтраницы,
		СохранятьНастройки);
	
	ТекстОшибки = Новый Массив;
	
	Если ПараметрыОтчета.ПараметрыЗапроса.Отбор.Количество() = 0 Тогда
		ТекстОшибки.Добавить(НСтр("ru = 'Необходимо настроить хотя бы один отбор.'"));
	КонецЕсли;
	
	Если ПараметрыОтчета.ПараметрыЗапроса.Поля.Количество() = 0 Тогда
		ТекстОшибки.Добавить(НСтр("ru = 'Необходимо выбрать хотя бы одно выводимое поле.'"));
	КонецЕсли;
	
	Если ТекстОшибки.Количество() > 0 Тогда
		ПоказатьПредупреждение(, СтрСоединить(ТекстОшибки, Символы.ПС));
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПараметрыЗапроса(ПараметрыЗапроса)
	
	ТипСписок    = Тип("СписокЗначений");
	
	Для Каждого КлючЗначение Из ПараметрыПоиска.НастройкаОтборов[ВидКонтрагента] Цикл
		
		ОписаниеОтбора = ПоискКонтрагентовСлужебныйКлиентСервер.НовыйОписаниеПоляОтбора();
		ЗаполнитьЗначенияСвойств(ОписаниеОтбора, КлючЗначение.Значение);
		
		Если Не ОписаниеОтбора.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеОтбора.ВыборИзСправочника
			Или ОписаниеОтбора.ЭтоПолеОКВЭД Тогда
			
			Если ТипЗнч(ОписаниеОтбора.Значение) = ТипСписок Тогда
				
				ЗначениеДляЗапроса = Новый Массив;
				
				Для Каждого ЭлементСписка Из ОписаниеОтбора.Значение Цикл
					
					ПравильноеЗначение = ПоискКонтрагентовСлужебныйКлиентСервер.ПравильноеЗначениеИзСправочника(
						ЭлементСписка.Значение);
					Если ПравильноеЗначение = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ЗначениеДляЗапроса.Добавить(ПравильноеЗначение.Данные);
					
				КонецЦикла;
				
				ОписаниеОтбора.Значение = ЗначениеДляЗапроса;
				
			Иначе
				
				ПравильноеЗначение = ПоискКонтрагентовСлужебныйКлиентСервер.ПравильноеЗначениеИзСправочника(
					ОписаниеОтбора.Значение);
				Если ПравильноеЗначение = Неопределено Тогда
					Если ОписаниеОтбора.ВидСравнения = ВидыСравнений.Содержит.Значение
						И ТипЗнч(ОписаниеОтбора.Значение) = Тип("Строка") Тогда
						ОписаниеОтбора.Значение = ОписаниеОтбора.Значение;
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					ОписаниеОтбора.Значение = ПравильноеЗначение.Данные;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ОписаниеОтбора.Значение) = ТипСписок Тогда
			ОписаниеОтбора.Значение = ОписаниеОтбора.Значение.ВыгрузитьЗначения();
		КонецЕсли;
		
		ПараметрыЗапроса.Отбор.Добавить(ОписаниеОтбора);
		
	КонецЦикла;
	
	ВыбранныеПоляВПараметрыЗапроса(ПараметрыЗапроса);
	
	ПараметрыЗапроса.ДоступныеПоля  = ПараметрыПоиска.ДоступныеПоля[ВидКонтрагента];
	ПараметрыЗапроса.ВидКонтрагента = ВидКонтрагента;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоляВПараметрыЗапроса(ПараметрыЗапроса)
	
	ПараметрыЗапроса.Поля.Очистить();
	НастройкаПолей = ПараметрыПоиска.НастройкаПолей[ВидКонтрагента];
	Если НастройкаПолей <> Неопределено Тогда
		Для Каждого НастройкаПоля Из НастройкаПолей Цикл
			Если НастройкаПоля.Пометка Тогда
				ПараметрыЗапроса.Поля.Добавить(НастройкаПоля.Идентификатор);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеОтчета

&НаСервереБезКонтекста
Функция ЗагрузкаДанныхДляСохранения(
		Знач ПараметрыОтчета,
		Знач УникальныйИдентификатор)
	
	НаименованиеЗадания = НСтр("ru = 'Поиск контрагентов. Загрузка информации для сохранения в файл.'");
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"ПоискКонтрагентовСлужебный.ЗагрузкаДанныхДляСохранения",
		ПараметрыОтчета);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ПоискКонтрагентовДляСохраненияЗавершение(
		РезультатЗадания,
		ДополнительныеПараметры) Экспорт
	
	Если РезультатЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗадания.Статус = "Выполнено" Тогда
		
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);
		
		Если ТипЗнч(РезультатЗагрузки.Результат) = Тип("ТабличныйДокумент") Тогда
		
			Если РезультатЗагрузки.Ошибка Тогда
				
				ИзменитьСостояниеРезультата(Истина, РезультатЗагрузки.Результат);
				
			Иначе
				
				Попытка
					
					РезультатЗагрузки.Результат.Записать(
						ДополнительныеПараметры.ПолноеИмяФайлаОтчета,
						ДополнительныеПараметры.ФорматФайла);
						
					Обработчик = Новый ОписаниеОповещения(
						"СохранитьОтчетПриВыбореИмениФайлаОтчета",
						ЭтотОбъект,
						ДополнительныеПараметры.ПолноеИмяФайлаОтчета);
						
					ПоказатьОповещениеПользователя(
						НСтр("ru = 'Отчет сохранен в файл'"),
						Обработчик,
						ДополнительныеПараметры.ПолноеИмяФайлаОтчета);
					
				Исключение
					
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					
					ПоискКонтрагентовСлужебныйВызовСервера.ЗаписатьИнформациюВЖурналРегистрации(
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(
							ИнформацияОбОшибке));
							
					ОбработкаОшибок.ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке);
							
				КонецПопытки;
				
			КонецЕсли;
			
		Иначе
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				РезультатЗагрузки.ИнформацияОбОшибке);
			
		КонецЕсли;
		
	ИначеЕсли РезультатЗадания.Статус = "Ошибка" Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			РезультатЗадания.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступныеФорматыСохраненияОтчета()

	Результат = Новый Структура(
		"ИндексФорматовСохраненияОтчета, Фильтр",
		Новый Соответствие,
		"");
	
	ДоступныеФорматы = Новый Массив;

	ФорматыСохранения = СтандартныеПодсистемыСервер.НастройкиФорматовСохраненияТабличногоДокумента();

	ФорматСохраненияTXT = ФорматыСохранения.Найти(
		ТипФайлаТабличногоДокумента.TXT,
		"ТипФайлаТабличногоДокумента");
	ФорматСохраненияANSITXT = ФорматыСохранения.Найти(
		ТипФайлаТабличногоДокумента.ANSITXT,
		"ТипФайлаТабличногоДокумента");

	Если ФорматСохраненияTXT <> Неопределено И ФорматСохраненияANSITXT <> Неопределено Тогда
		ФорматыСохранения.Удалить(ФорматСохраненияANSITXT);
	КонецЕсли;

	ТекущийФорматСохранения = Новый Массив;

	Для Каждого ФорматСохранения Из ФорматыСохранения Цикл

		РасширениеФорматаСохранения = "*." + ФорматСохранения.Расширение;
		ПредставлениеФорматаСохранения = СтрЗаменить(
			ФорматСохранения.Представление,
			"." + ФорматСохранения.Расширение,
			РасширениеФорматаСохранения);
		
		ТекущийФорматСохранения.Добавить(ПредставлениеФорматаСохранения);
		ТекущийФорматСохранения.Добавить(РасширениеФорматаСохранения);
		
		ДоступныеФорматы.Добавить(СтрСоединить(ТекущийФорматСохранения, "|"));
		ТекущийФорматСохранения.Очистить();
		
		Результат.ИндексФорматовСохраненияОтчета.Вставить(
			ФорматСохранения.Расширение,
			ФорматСохранения.ТипФайлаТабличногоДокумента);
		
	КонецЦикла;
	
	Результат.Фильтр = СтрСоединить(ДоступныеФорматы, "|");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СравнениеНастроек

&НаКлиенте
Процедура ПроверитьНастройкиПослеИзменения()
	
	Если НастройкиОтличаются() Тогда
		Элементы.КоманднаяПанельНавигация.Видимость = Ложь;
		Элементы.ФормаСохранить.Доступность         = Ложь;
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
			Элементы.Результат,
			"Неактуальность");
	Иначе
		Элементы.КоманднаяПанельНавигация.Видимость = Истина;
		Элементы.ФормаСохранить.Доступность         = Истина;
		Если Результат.ВысотаТаблицы <> 0 Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
				Элементы.Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НастройкиОтличаются()
	
	ТекущиеПараметры = ПараметрыПоиска.НастройкиПриФормировании;
	Если ТекущиеПараметры = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НовыеПараметрыЗапроса = ПоискКонтрагентовСлужебныйКлиентСервер.НовыйПараметрыЗапроса();
	ЗаполнитьПараметрыЗапроса(НовыеПараметрыЗапроса);
	
	Если ТекущиеПараметры.Отбор.Количество() <> НовыеПараметрыЗапроса.Отбор.Количество()
		Или ТекущиеПараметры.ВидКонтрагента <> НовыеПараметрыЗапроса.ВидКонтрагента Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОтборТекущий = Новый Соответствие;
	Для Каждого ЭлементОтбора Из ТекущиеПараметры.Отбор Цикл
		
		Если Не ЭлементОтбора.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеОтбора = ПоискКонтрагентовСлужебныйКлиентСервер.НовыйОписаниеПоляОтбора();
		ОписаниеОтбора.ВидСравнения  = ЭлементОтбора.ВидСравнения;
		ОписаниеОтбора.Значение      = ЭлементОтбора.Значение;
		ОписаниеОтбора.Пометка       = ЭлементОтбора.Пометка;
		
		ОтборТекущий.Вставить(ЭлементОтбора.Идентификатор, ОписаниеОтбора);
		
	КонецЦикла;
	
	Для Каждого ОтборНовый Из НовыеПараметрыЗапроса.Отбор Цикл
		
		ЭлементТекущегоОтбора = ОтборТекущий[ОтборНовый.Идентификатор];
		Если ЭлементТекущегоОтбора = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ОтборНовый.ВидСравнения <> ЭлементТекущегоОтбора.ВидСравнения Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ЗначенияОтличаются(ЭлементТекущегоОтбора.Значение, ОтборНовый.Значение) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ЗначенияОтличаются(
		Значение1,
		Значение2)
	
	ТипЗначения1 = ТипЗнч(Значение1);
	ТипЗначения2 = ТипЗнч(Значение2);
	
	Если ТипЗначения1 <> ТипЗначения2 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗначения1 = Тип("СписокЗначений") Тогда
		
		Возврат ЗначенияОтличаются(
			Значение1.ВыгрузитьЗначения(),
			Значение2.ВыгрузитьЗначения());
		
	ИначеЕсли ТипЗначения1 = Тип("Массив")
		Или ТипЗначения1 = Тип("ФиксированныйМассив") Тогда
		
		Возврат МассивыОтличаются(Значение1, Значение2);
		
	ИначеЕсли ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(ТипЗначения1) Тогда
		
		Возврат СтруктураОтличается(Значение1, Значение2);
		
	ИначеЕсли ТипЗначения1 = Тип("Соответствие")
		Или ТипЗначения1 = Тип("ФиксированноеСоответствие") Тогда
		
		Возврат СоответствиеОтличается(Значение1, Значение2);
		
	Иначе
		
		Возврат Значение1 <> Значение2;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция МассивыОтличаются(
		Значение1,
		Значение2,
		СравниватьКоличество = Ложь)
	
	Если СравниватьКоличество
		И Значение1.Количество() <> Значение2.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	СоставнойТип = Новый Массив;
	СоставнойТип.Добавить(Тип("СписокЗначений"));
	СоставнойТип.Добавить(Тип("Массив"));
	СоставнойТип.Добавить(Тип("ФиксированныйМассив"));
	СоставнойТип.Добавить(Тип("Структура"));
	СоставнойТип.Добавить(Тип("ФиксированнаяСтруктура"));
	СоставнойТип.Добавить(Тип("Соответствие"));
	СоставнойТип.Добавить(Тип("ФиксированноеСоответствие"));
	
	Если Не ЕстьВсеЭлементыДругогоМассива(Значение1, Значение2, СоставнойТип) Тогда
		Возврат Истина;
	КонецЕсли;
	Если Не ЕстьВсеЭлементыДругогоМассива(Значение2, Значение1, СоставнойТип) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ЕстьВсеЭлементыДругогоМассива(
		ИскомыеЗначения,
		ПроверяемыйМассив,
		СоставнойТип)
	
	Для Каждого ЭлементМассива1 Из ИскомыеЗначения Цикл
		
		Если СоставнойТип.Найти(ТипЗнч(ЭлементМассива1)) <> Неопределено Тогда
			
			ЕстьТакоеЗначение = Ложь;
			Для Каждого ЭлементМассива2 Из ПроверяемыйМассив Цикл
				Если Не ЗначенияОтличаются(ЭлементМассива1, ЭлементМассива2) Тогда
					ЕстьТакоеЗначение = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ЕстьТакоеЗначение Тогда
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			
			Если ПроверяемыйМассив.Найти(ЭлементМассива1) = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СтруктураОтличается(
		Значение1,
		Значение2)
	
	Если Значение1.Количество() <> Значение2.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЕстьВсеЭлементыДругойСтруктуры(Значение1, Значение2) Тогда
		Возврат Истина;
	КонецЕсли;
	Если Не ЕстьВсеЭлементыДругойСтруктуры(Значение2, Значение1) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ЕстьВсеЭлементыДругойСтруктуры(
		ИскомыеЗначения,
		ПроверяемыйМассив)
	
	Проверка = Новый Структура;
	Для Каждого КлючЗначение Из ИскомыеЗначения Цикл
		Проверка.Вставить(КлючЗначение.Ключ, Новый УникальныйИдентификатор);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Проверка, ПроверяемыйМассив);
	Для Каждого КлючЗначение Из ИскомыеЗначения Цикл
		Если ЗначенияОтличаются(КлючЗначение.Значение, Проверка[КлючЗначение.Ключ]) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СоответствиеОтличается(
		Значение1,
		Значение2)
	
	Если Значение1.Количество() <> Значение2.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из Значение1 Цикл
		Если Значение2[КлючЗначение.Ключ] <> КлючЗначение.Значение Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючЗначение Из Значение2 Цикл
		Если Значение1[КлючЗначение.Ключ] <> КлючЗначение.Значение Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ПараметрыПоискаПриОткрытии

&НаСервере
Процедура УстановитьНастройкиИзПараметровПриОткрытии()
	
	ВидКонтрагентаПриОткрытии = ПараметрыПоиска.ПараметрыПриОткрытииФормы.ВидКонтрагента;
	
	ВидыКонтрагентовУстановка = Новый Массив;
	ОписаниеПолейУстановка = Новый Массив;
	
	Наименование = ПараметрыПоиска.ПараметрыПриОткрытииФормы.Наименование;
	Если ЗначениеЗаполнено(Наименование)
		И Не ПараметрыПоиска.ПараметрыПриОткрытииФормы.ОшибкаВидКонтрагента Тогда
		
		Если ВидКонтрагентаПриОткрытии = ВидыКонтрагентов.ЮрЛицо Тогда
			ВидыКонтрагентовУстановка.Добавить(ВидКонтрагентаПриОткрытии);
			ОписаниеПолейУстановка.Добавить(
				Новый Структура(
					"Имя, Значение, ЭтоНаименование",
					"CORP_FULLNAME",
					Наименование,
					Истина));
		ИначеЕсли ВидКонтрагентаПриОткрытии = ВидыКонтрагентов.ИП Тогда
			ВидыКонтрагентовУстановка.Добавить(ВидКонтрагентаПриОткрытии);
			ОписаниеПолейУстановка.Добавить(
				Новый Структура(
					"Имя, Значение, ЭтоНаименование",
					"PERS_FULLNAME",
					Наименование,
					Истина));
		Иначе
			ВидыКонтрагентовУстановка.Добавить(ВидыКонтрагентов.ЮрЛицо);
			ВидыКонтрагентовУстановка.Добавить(ВидыКонтрагентов.ИП);
			ОписаниеПолейУстановка.Добавить(
				Новый Структура(
					"Имя, Значение, ЭтоНаименование",
					"CORP_FULLNAME",
					Наименование,
					Истина));
			ОписаниеПолейУстановка.Добавить(
				Новый Структура(
					"Имя, Значение, ЭтоНаименование",
					"PERS_FULLNAME",
					Наименование,
					Истина));
		КонецЕсли;
	КонецЕсли;
	
	УстановитьЗначениеПараметраПриОткрытии(ВидыКонтрагентовУстановка, ОписаниеПолейУстановка);
	
	ИспользоватьНастройкиПриОткрытии = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеПараметраПриОткрытии(ВидыКонтрагентовУстановка, ОписаниеПолейУстановка)
	
	ТипыОбработкиПолей = ПоискКонтрагентовСлужебный.ТипыОбработкиПолей();
	
	Для Каждого ТекущийВидКонтрагента Из ВидыКонтрагентовУстановка Цикл
		
		// ДоступныеОтборы это массив из структур. Описание - ПоискКонтрагентовСлужебный.НовыйПолеОтбора
		ДоступныеОтборы = ПараметрыПоиска.ДоступныеОтборы[ТекущийВидКонтрагента];
		Если ДоступныеОтборы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого ОписаниеПоляУстановка Из ОписаниеПолейУстановка Цикл
			
			ИмяПоля = ОписаниеПоляУстановка.Имя;
			
			ТекущийКритерий = Неопределено;
			Для Каждого КритерийОтбора Из ДоступныеОтборы Цикл
				Если КритерийОтбора.Идентификатор = ИмяПоля Тогда
					ТекущийКритерий = КритерийОтбора;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ТекущийКритерий = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НастройкаОтборов = ПараметрыПоиска.НастройкаОтборов[ТекущийВидКонтрагента];
			
			НовыйОтбор = Неопределено;
			Если ТипЗнч(НастройкаОтборов) = Тип("Соответствие") Тогда
				НовыйОтбор = НастройкаОтборов[ИмяПоля];
			КонецЕсли;
			
			Если Не ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(НовыйОтбор) Тогда
				
				НовыйОтбор = ПоискКонтрагентовСлужебныйКлиентСервер.НовыйОписаниеПоляОтбора();

				НовыйОтбор.Идентификатор      = ИмяПоля;
				НовыйОтбор.Представление      = ТекущийКритерий.Представление;
				НовыйОтбор.ВидСравнения       = ТекущийКритерий.ВариантыСравнения[0];
				НовыйОтбор.ВыборИзСправочника = ТекущийКритерий.ВыборИзСправочника;
				НовыйОтбор.ЭтоПолеОКВЭД       = (ТекущийКритерий.ТипОбработки = ТипыОбработкиПолей.ОКВЭД);
				НовыйОтбор.Порядок            = ТекущийКритерий.Порядок;
				
			КонецЕсли;
			
			НовыйОтбор.Пометка               = Истина;
			НовыйОтбор.БыстрыйДоступ         = Истина;
				
			Если ОписаниеПоляУстановка.ЭтоНаименование Тогда
			
				НовыйОтбор.Значение              = ОписаниеПоляУстановка.Значение;
				НовыйОтбор.ПредставлениеЗначения = ОписаниеПоляУстановка.Значение;
				
			КонецЕсли;
			
			НастройкаОтборов.Вставить(ИмяПоля, НовыйОтбор);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

&НаКлиенте
Процедура ИзменитьСостояниеРезультата(
		Ошибка,
		ПредставлениеОшибки = Неопределено)
		
	Если Не Ошибка Тогда
		
		Если ВыведеныОшибки Тогда
			Результат = Новый ТабличныйДокумент;
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
				Элементы.Результат,
				"Неактуальность");
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
		Элементы.Результат);
	Результат = ПредставлениеОшибки;
	ВыведеныОшибки = Истина;
	
	Отчет.ВсегоЗаписей                = 0;
	Отчет.ВсегоСтраниц                = 0;
	Отчет.ТекущаяСтраница             = 0;
	Отчет.ОшибкаПриФормированииОтчета = Истина;
	
	Элементы.ДекорацияНайденоКоличество.Заголовок = НСтр("ru = 'Найдено: 0 организаций'");
	
	ВыполнитьПереходНаСтраницу(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоследнееДействие()
	
	Результат = Новый ТабличныйДокумент;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
		Элементы.Результат,
		"Неактуальность");
	
	Если ПоследнееДействие = "Сформировать" Тогда
		ПодобратьКонтрагентов(
			,
			,
			Истина);
	ИначеЕсли ПоследнееДействие = "ОбновлениеПараметров" Тогда
		ФоновоеОбновлениеПараметров();
	ИначеЕсли ПоследнееДействие = "Сохранить" Тогда
		
		ПараметрыОтчета = ПараметрыОтчетаСПроверкой(
			Истина,
			1,
			Ложь);
		
		Если ПараметрыОтчета = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДопПараметры = Новый Структура(
			"ПараметрыОтчета, ИндексФорматовСохраненияОтчета",
			ПараметрыОтчета,
			ФорматФайлаПовтор);
		
		СохранитьОтчетПослеВыбораИмениФайла(
			ИмяФайлаДляСохраненияПовтор,
			ДопПараметры);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПроверкаКонтрагента()
	
	Возврат ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПроверкаКонтрагента");
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииВидаКонтрагента()
	
	ОбновитьНадписиОтборПоля();
	Для Каждого КлючЗначение Из ВидыКонтрагентов Цикл
		ТекущийВидКонтрагента = КлючЗначение.Значение;
		Элементы["БыстрыйДоступЛево"  + ТекущийВидКонтрагента].Видимость = ТекущийВидКонтрагента = ВидКонтрагента;
		Элементы["БыстрыйДоступПраво" + ТекущийВидКонтрагента].Видимость = ТекущийВидКонтрагента = ВидКонтрагента;
	КонецЦикла;
	
	ПроверитьНастройкиПослеИзменения();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти