
#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьЗаписьЖурнала(ИмяСобытия, Текст, Ошибка = Ложь)
	
	Если Ошибка Тогда
		  УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
	Иначе УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("CRM_LeadsExchange." + ИмяСобытия, УровеньЖурнала, , , Текст);
	
КонецПроцедуры	

Процедура ДобавитьБазовыеПоля(МассивПолей)
	
	СтруктураПоля = Новый Структура("name,type,required,ico", "Контакт", "string", Истина, "crm-app__icon-account");
	МассивПолей.Добавить(СтруктураПоля);
	СтруктураПоля = Новый Структура("name,type,required,ico", "Телефон", "tel", Ложь, "crm-app__icon-baseline-phone");
	МассивПолей.Добавить(СтруктураПоля);
	СтруктураПоля = Новый Структура("name,type,required,ico", "ЭлектроннаяПочта", "email", Истина,
		 "crm-app__icon-baseline-mail");
	МассивПолей.Добавить(СтруктураПоля);
	СтруктураПоля = Новый Структура("name,type,required,ico", "Организация", "string", Истина, "crm-app__icon-domain");
	МассивПолей.Добавить(СтруктураПоля);
	СтруктураПоля = Новый Структура("name,type,required,ico", "Комментарий", "textarea", Истина, "");
	МассивПолей.Добавить(СтруктураПоля);
	
КонецПроцедуры

Функция Ответ(ИмяСобытия, Успешно, Текст)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("status");
    ЗаписьJSON.ЗаписатьЗначение(?(Успешно, "success", "error"));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("text");
    ЗаписьJSON.ЗаписатьЗначение(Текст);
		
	ЗаписьJSON.ЗаписатьКонецОбъекта();

	json = ЗаписьJSON.Закрыть();
	
	ДобавитьЗаписьЖурнала(ИмяСобытия, "Ответ: " + json, НЕ Успешно);
		
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json");
	Ответ.УстановитьТелоИзСтроки(json);
	
	Возврат Ответ;
	
КонецФункции	

Функция ПолучитьПараметрыИзСтроки(Знач СтрокаПараметров, Знач Разделитель = "&") Экспорт
	
	Результат = Новый Структура;
	
	ОписаниеПараметра = "";
	НайденоНачалоСтроки = Ложь;
	НомерПоследнегоСимвола = СтрДлина(СтрокаПараметров);
	Для НомерСимвола = 1 По НомерПоследнегоСимвола Цикл
		Символ = Сред(СтрокаПараметров, НомерСимвола, 1);
		Если Символ = """" Тогда
			НайденоНачалоСтроки = Не НайденоНачалоСтроки;
		КонецЕсли;
		Если Символ <> Разделитель Или НайденоНачалоСтроки Тогда
			ОписаниеПараметра = ОписаниеПараметра + Символ;
		КонецЕсли;
		Если Символ = Разделитель И Не НайденоНачалоСтроки Или НомерСимвола = НомерПоследнегоСимвола Тогда
			Позиция = СтрНайти(ОписаниеПараметра, "=");
			Если Позиция > 0 Тогда
				ИмяПараметра = СокрЛП(Лев(ОписаниеПараметра, Позиция - 1));
				ЗначениеПараметра = СокрЛП(Сред(ОписаниеПараметра, Позиция + 1));
				ЗначениеПараметра = сфпОбщегоНазначенияКлиентСервер.сфпСократитьДвойныеКавычки(ЗначениеПараметра);
				// BSLLS:MissingCodeTryCatchEx-off
				Попытка
					Результат.Вставить(ИмяПараметра, ЗначениеПараметра);
				Исключение
				КонецПопытки;
				// BSLLS:MissingCodeTryCatchEx-on
			КонецЕсли;
			ОписаниеПараметра = "";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция GetFieldsGET(Запрос)
	
	ИмяСобытия = "GetFields";
	
	ТелоЗапроса = РаскодироватьСтроку(Запрос.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	ПараметрыТела = ПолучитьПараметрыИзСтроки(ТелоЗапроса);
	
	Токен = Неопределено;
	ИдентификаторИсточника = Неопределено;
	
	СтрПараметров = "{";
	Если Запрос.ПараметрыЗапроса.Количество() > 0 Тогда
		Для Каждого ТекПараметр Из Запрос.ПараметрыЗапроса Цикл
			СтрПараметров = СтрПараметров + ?(СтрПараметров = "{", "", ",") + ТекПараметр.Ключ + ":" + ТекПараметр.Значение;
			
			Если ВРЕГ(ТекПараметр.Ключ) = "TOKEN" Тогда
				Токен = ТекПараметр.Значение;
				
			ИначеЕсли ВРЕГ(ТекПараметр.Ключ) = "SOURCEID" Тогда
				ИдентификаторИсточника = ТекПараметр.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СтрПараметров = СтрПараметров + "}";
	
	ДобавитьЗаписьЖурнала(ИмяСобытия, "ТелоЗапроса: " + ТелоЗапроса + "; Параметры: " + СтрПараметров);
	
	Если НЕ ЗначениеЗаполнено(Токен) ИЛИ НЕ ЗначениеЗаполнено(ИдентификаторИсточника) Тогда
		Если ЗначениеЗаполнено(ТелоЗапроса) Тогда
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
			ПараметрыЗапросаJSON = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			Для Каждого ТекПараметр Из ПараметрыЗапросаJSON Цикл
				Если ВРЕГ(ТекПараметр.Ключ) = "TOKEN" Тогда
					Токен = ТекПараметр.Значение;
					
				ИначеЕсли ВРЕГ(ТекПараметр.Ключ) = "SOURCEID" Тогда
					ИдентификаторИсточника = ТекПараметр.Значение;
				КонецЕсли;
			КонецЦикла;
	 	КонецЕсли;
	КонецЕсли;

	// Если Токен = Неопределено Тогда
	//	Возврат Ответ(ИмяСобытия, Ложь, "Не найден параметр token");
	//	
	//ИначеЕсли НЕ ЗначениеЗаполнено(Токен) Тогда
	//	Возврат Ответ(ИмяСобытия, Ложь, "Не заполнен параметр token");

	// Иначе
	Если ИдентификаторИсточника = Неопределено Тогда
		Возврат Ответ(ИмяСобытия, Ложь, "Не найден параметр sourceId");
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ИдентификаторИсточника) Тогда
		Возврат Ответ(ИмяСобытия, Ложь, "Не заполнен параметр sourceId");	
	КонецЕсли;
	
	ИсточникПолученияЛидов = Справочники.CRM_ИсточникиПолученияЛидов.НайтиПоРеквизиту("ИдентификаторИсточника",
		 ИдентификаторИсточника);
	Если ИсточникПолученияЛидов.Пустая() Тогда
		Возврат Ответ(ИмяСобытия, Ложь, "Не найден Источник получения заявок: " + ИдентификаторИсточника);
	КонецЕсли;
	
	МассивПолей = Новый Массив();
	//ДобавитьБазовыеПоля(МассивПолей);
	
	//СтруктураПоля = Новый Структура("name,type,required,ico", "IDСобытия", "string", Ложь, "");
	//МассивПолей.Добавить(СтруктураПоля);
	//СтруктураПоля = Новый Структура("name,type,required,ico", "theme", "string", Ложь, "");
	//МассивПолей.Добавить(СтруктураПоля);
	//СтруктураПоля = Новый Структура("name,type,required,ico", "UTMМетка", "string", Ложь, "");
	//МассивПолей.Добавить(СтруктураПоля);
	//СтруктураПоля = Новый Структура("name,type,required,ico", "ИДКампании", "number", Ложь, "");
	//МассивПолей.Добавить(СтруктураПоля);
	//СтруктураПоля = Новый Структура("name,type,required,ico", "КаналПервичногоИнтереса", "string", Ложь, "");
	//МассивПолей.Добавить(СтруктураПоля);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ДопРеквизиты.Свойство.Наименование КАК Наименование,
		|	ДопРеквизиты.Свойство КАК Свойство,
		|	ДопРеквизиты.Свойство.ТипЗначения КАК ТипЗначения,
		|	ДопРеквизиты.Свойство.Заголовок КАК Заголовок,
		|	ДопРеквизиты.Обязательный КАК Обязательный,
		|	ЗначенияСвойств.Ссылка КАК СсылкаЗначенияСвойств,
		|	ЗначенияСвойств.Наименование КАК НаименованиеЗначенияСвойств
		|ИЗ
		|	Справочник.CRM_ИсточникиПолученияЛидов.ДополнительныеДанныеПоИсточникам КАК ДопРеквизиты
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойств
		|	ПО ЗначенияСвойств.Владелец = ДопРеквизиты.Свойство
		|	И НЕ ЗначенияСвойств.ПометкаУдаления
		|ГДЕ
		|	ДопРеквизиты.Ссылка = &ИсточникПолученияЛидов
		|	И НЕ ДопРеквизиты.Ссылка.ПометкаУдаления
		|ИТОГИ ПО
		|	ДопРеквизиты.Свойство");
		Запрос.УстановитьПараметр("ИсточникПолученияЛидов", ИсточникПолученияЛидов);
		
		ВыборкаСвойств = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСвойств.Следующий() Цикл
			ТекТип = "";
			КодСвойства = "";
			ИмяПоля = "" + ВыборкаСвойств.Свойство;
			Иконка = Ложь;
			Обязательное = ВыборкаСвойств.Обязательный;
			
			МассивДопЗначений = Новый Массив();
			
	        Если ТипЗнч(ВыборкаСвойств.Свойство) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
				КодСвойства = "" + ВыборкаСвойств.Свойство.УникальныйИдентификатор();
				ИмяПоля = ВыборкаСвойств.Заголовок;
				Обязательное = Ложь;
				
				Если ВыборкаСвойств.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
					ТекТип = "string";
					
				ИначеЕсли ВыборкаСвойств.ТипЗначения.СодержитТип(Тип("Число")) Тогда
					ТекТип = "number";
					
				ИначеЕсли ВыборкаСвойств.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
					ТекТип = "date";

				ИначеЕсли ВыборкаСвойств.ТипЗначения.СодержитТип(Тип("Булево")) Тогда	
					ТекТип = "boolean";
					Продолжить;
					
				ИначеЕсли ВыборкаСвойств.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда	
					ТекТип = "select";
									
					Выборка = ВыборкаСвойств.Выбрать();
					Пока Выборка.Следующий() Цикл
						СтруктураЗначения = Новый Структура("Ссылка,Наименование", Выборка.СсылкаЗначенияСвойств,
							 Выборка.НаименованиеЗначенияСвойств);
						МассивДопЗначений.Добавить(СтруктураЗначения);
					КонецЦикла;
					
				Иначе
					Продолжить;
				КонецЕсли;
			
			ИначеЕсли ВыборкаСвойств.Свойство = "Контакт" Тогда
				ИмяПоля = "ФИО";
				ТекТип = "string";
				КодСвойства = "name";
				Иконка = "widgetCrm__icon-account";
				Обязательное = Истина;

			ИначеЕсли ВыборкаСвойств.Свойство = "Телефон" Тогда	
				ТекТип = "tel";
				КодСвойства = "phone";
				Иконка = "widgetCrm__icon-phone";
				Обязательное = Ложь;
				
			ИначеЕсли ВыборкаСвойств.Свойство = "ЭлектроннаяПочта" Тогда	
				ИмяПоля = "e-mail";
				ТекТип = "email";
				КодСвойства = "mail";
				Иконка = "widgetCrm__icon-mail";
				Обязательное = Истина;
				
			ИначеЕсли ВыборкаСвойств.Свойство = "Организация" Тогда	
				ИмяПоля = "Компания";
				ТекТип = "string";
				КодСвойства = "company";
				Иконка = "widgetCrm__icon-domain";
				Обязательное = Истина;
				
			ИначеЕсли ВыборкаСвойств.Свойство = "Комментарий" Тогда	
				ТекТип = "string";
				КодСвойства = "comment";
				Иконка = Ложь;
				Обязательное = Истина;
				
			Иначе
				Продолжить;
			КонецЕсли;

			СтруктураПоля = Новый Структура("name,type,required,ico,code,values", ИмяПоля, ТекТип,
				 Обязательное, Иконка, КодСвойства,
				 МассивДопЗначений);
			МассивПолей.Добавить(СтруктураПоля);
		КонецЦикла;
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		
		//ЗаписьJSON.ЗаписатьНачалоОбъекта();
		//ЗаписьJSON.ЗаписатьИмяСвойства("fields");
		
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Для Каждого ТекПоле Из МассивПолей Цикл
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			Для Каждого СтруктураПоля Из ТекПоле Цикл
				Если СтруктураПоля.Ключ = "values" Тогда
					МассивДопЗначений = СтруктураПоля.Значение;
					Если МассивДопЗначений.Количество() > 0 Тогда
						ЗаписьJSON.ЗаписатьИмяСвойства("select");
						ЗаписьJSON.ЗаписатьНачалоМассива();
						
						Для Каждого ДопЗначение Из МассивДопЗначений Цикл
							ЗаписьJSON.ЗаписатьНачалоОбъекта();
							ЗаписьJSON.ЗаписатьИмяСвойства("code");
							ЗаписьJSON.ЗаписатьЗначение("" + ДопЗначение.Ссылка.УникальныйИдентификатор());
							
							ЗаписьJSON.ЗаписатьИмяСвойства("value");
							ЗаписьJSON.ЗаписатьЗначение(ДопЗначение.Наименование);
							ЗаписьJSON.ЗаписатьКонецОбъекта();
						КонецЦикла;	
						
						ЗаписьJSON.ЗаписатьКонецМассива();
					КонецЕсли;
					
				//ИначеЕсли СтруктураПоля.Ключ = "type" И СтруктураПоля.Значение = "select" Тогда
				//	ЗаписьJSON.ЗаписатьИмяСвойства(СтруктураПоля.Ключ);
					
				Иначе	
					ЗаписьJSON.ЗаписатьИмяСвойства(СтруктураПоля.Ключ);
					ЗаписьJSON.ЗаписатьЗначение(СтруктураПоля.Значение);
				КонецЕсли;
			КонецЦикла;	
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЦикла;	
		ЗаписьJSON.ЗаписатьКонецМассива();
		
		//ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		json = ЗаписьJSON.Закрыть();
		
		ДобавитьЗаписьЖурнала(ИмяСобытия, "json: " + json);
			
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json");
		Ответ.УстановитьТелоИзСтроки(json);
		
		Возврат Ответ;
	Исключение
		СтрОшибки = ОписаниеОшибки();
		Возврат Ответ(ИмяСобытия, Ложь, "При отправке структуры полей возникла ошибка: " + СтрОшибки);
	КонецПопытки;	

КонецФункции

Функция GetFieldsDefaultGET(Запрос)
	
	ИмяСобытия = "GetFieldsDefault";
	
	МассивПолей = Новый Массив();
	ДобавитьБазовыеПоля(МассивПолей);
		
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("fields");
	
	ЗаписьJSON.ЗаписатьНачалоМассива();
	Для Каждого ТекПоле Из МассивПолей Цикл
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		Для Каждого СтруктураПоля Из ТекПоле Цикл
			ЗаписьJSON.ЗаписатьИмяСвойства(СтруктураПоля.Ключ);
			ЗаписьJSON.ЗаписатьЗначение(СтруктураПоля.Значение);
		КонецЦикла;	
		ЗаписьJSON.ЗаписатьКонецОбъекта();
	КонецЦикла;	
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	json = ЗаписьJSON.Закрыть();
	
	ДобавитьЗаписьЖурнала(ИмяСобытия, "json: " + json);
		
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json");
	Ответ.УстановитьТелоИзСтроки(json);
	
	Возврат Ответ;

КонецФункции

Функция НомерНайденнойЗаявки(Телефон, ЭлектроннаяПочта, ЭтоЗвонок)
	
	Если ЭтоЗвонок Тогда
		  СтрУсловия = " И Телефон ПОДОБНО &Телефон";
	Иначе СтрУсловия = " И ЭлектроннаяПочта = &ЭлектроннаяПочта";
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка, Номер
	|ИЗ Документ.CRM_Заявка
	|ГДЕ Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ) И КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)" + СтрУсловия);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Телефон", Телефон);
	Запрос.УстановитьПараметр("ЭлектроннаяПочта", ЭлектроннаяПочта);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Номер;
		
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

Функция LoadLeadPOST(Запрос)
	
	ИмяСобытия = "LoadLead";
	
	ТелоЗапроса = РаскодироватьСтроку(Запрос.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	ПараметрыТела = ПолучитьПараметрыИзСтроки(ТелоЗапроса);
	
	ДобавитьЗаписьЖурнала(ИмяСобытия, "ТелоЗапроса: " + ТелоЗапроса);
	
	ЭтоЗвонок = Ложь;
	ФИО = "";
	Телефон = "";
	ЭлектроннаяПочта = "";
	Организация = "";
	Комментарий = "";
	ИдентификаторИсточника = Неопределено;
	ДополнительныеСвойства = Новый Массив();
	
	Если НЕ ЗначениеЗаполнено(ТелоЗапроса) Тогда
		Возврат Ответ(ИмяСобытия, Ложь, "Не заполнен JSON");
		
	Иначе	
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
		ПараметрыЗапросаJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Попытка
			Для Каждого ТекПараметр Из ПараметрыЗапросаJSON.fields Цикл
				Если ВРЕГ(ТекПараметр.code) = "PHONE" Тогда
					Телефон = ТекПараметр.value;
					
				ИначеЕсли ВРЕГ(ТекПараметр.code) = "NAME" Тогда
					ФИО = ТекПараметр.value;
					
				ИначеЕсли ВРЕГ(ТекПараметр.code) = "COMPANY" Тогда
					Организация = ТекПараметр.value;	
					
				ИначеЕсли ВРЕГ(ТекПараметр.code) = "COMMENT" Тогда
					Комментарий = ТекПараметр.value;
					
				ИначеЕсли ВРЕГ(ТекПараметр.code) = "MAIL" Тогда
					ЭлектроннаяПочта = ТекПараметр.value;
					
				Иначе
					// Дополнительные поля
					Если СтрДлина(ТекПараметр.code) = 36 Тогда
						ИдентификаторСвойства = Новый УникальныйИдентификатор(ТекПараметр.code);
						ТекСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(ИдентификаторСвойства);
						Если ЗначениеЗаполнено(ТекСвойство) Тогда
							ЗначениеСвойства = ТекСвойство.ТипЗначения.ПривестиЗначение(ТекПараметр.value);
							Если ТекСвойство.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
								Если ЗначениеЗаполнено(ТекПараметр.value) Тогда
									ИдентификаторЗначения = Новый УникальныйИдентификатор(ТекПараметр.value);
									ЗначениеСвойства = Справочники.ЗначенияСвойствОбъектов.ПолучитьСсылку(ИдентификаторЗначения);
								КонецЕсли;
							КонецЕсли;
							
							ДополнительноеСвойство = Новый Структура("Свойство,Значение", ТекСвойство, ЗначениеСвойства);
							ДополнительныеСвойства.Добавить(ДополнительноеСвойство);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТекПараметр Из ПараметрыЗапросаJSON.options Цикл
				Если ВРЕГ(ТекПараметр.Ключ) = "TOKEN" Тогда
					Токен = ТекПараметр.Значение;
					
				ИначеЕсли ВРЕГ(ТекПараметр.Ключ) = "SOURCEID" Тогда
					ИдентификаторИсточника = ТекПараметр.Значение;
					
				ИначеЕсли ВРЕГ(ТекПараметр.Ключ) = "ISCALL" Тогда
					ЭтоЗвонок = ТекПараметр.Значение;		
				КонецЕсли;
			КонецЦикла;
		Исключение
			Стр = ОписаниеОшибки();
			Возврат Ответ(ИмяСобытия, Ложь, "При разборе JSON возникла ошибка: " + Стр);
		КонецПопытки;	
 	КонецЕсли;

	Если ИдентификаторИсточника = Неопределено Тогда
		Возврат Ответ(ИмяСобытия, Ложь, "Не найден параметр sourceId");
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ИдентификаторИсточника) Тогда
		Возврат Ответ(ИмяСобытия, Ложь, "Не заполнен параметр sourceId");	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Телефон) И НЕ ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
		Возврат Ответ(ИмяСобытия, Ложь, "Не заполнен Телефон или Электронная почта");
	КонецЕсли;
	
	НомерЗаявки = НомерНайденнойЗаявки(Телефон, ЭлектроннаяПочта, ЭтоЗвонок);
	Если ЗначениеЗаполнено(НомерЗаявки) Тогда
		Возврат Ответ(ИмяСобытия, Истина, "Заявка уже зарегистрированна в системе под номером " + НомерЗаявки);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсточникПолученияЛидов = Справочники.CRM_ИсточникиПолученияЛидов.НайтиПоРеквизиту("ИдентификаторИсточника",
		 ИдентификаторИсточника);
	Если ИсточникПолученияЛидов.Пустая() Тогда
		Возврат Ответ(ИмяСобытия, Ложь, "Не найден Источник получения заявок: " + ИдентификаторИсточника);
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Свойство.Наименование КАК Наименование, Свойство КАК Свойство
	|ИЗ Справочник.CRM_ИсточникиПолученияЛидов.ДополнительныеДанныеПоИсточникам
	|ГДЕ Ссылка");
	Запрос.УстановитьПараметр("ИсточникПолученияЛидов", ИсточникПолученияЛидов);
	
	Попытка
		Заявка = Документы.CRM_Заявка.СоздатьДокумент();
		Заявка.Дата = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
		Заявка.ИсточникПолучения = ИсточникПолученияЛидов;
		Заявка.Ответственный = ИсточникПолученияЛидов.ОтветственныйМенеджер;
		Заявка.CRM_РольОтветственного = ИсточникПолученияЛидов.CRM_РольОтветственного;
		Заявка.КаналПервичногоИнтереса = ИсточникПолученияЛидов.КаналПервичногоИнтереса;
		Заявка.ИсточникПервичногоИнтереса = ИсточникПолученияЛидов.ИсточникПервичногоИнтереса;
		
		Заявка.Организация = Организация;
		Заявка.Наименование = ФИО;
		Заявка.Телефон = Телефон;
		Заявка.ЭлектроннаяПочта = ЭлектроннаяПочта;
		Заявка.UTMМетка = ПараметрыЗапросаJSON.options.utmCampaign;
		Заявка.Тема = ПараметрыЗапросаJSON.options.theme;
		Заявка.Комментарий = Комментарий;
		
		Для Каждого ТекСвойство Из ДополнительныеСвойства Цикл
			СтрокаСвойства = Заявка.ДополнительныеРеквизиты.Добавить();
			СтрокаСвойства.Свойство = ТекСвойство.Свойство;
			СтрокаСвойства.Значение = ТекСвойство.Значение;
		КонецЦикла;	
		
		Если ЗначениеЗаполнено(Заявка.UTMМетка) Тогда
			// Если несколько меток в одной, берем первую
			Попытка
				СтрМеткаМассив = СтрРазделить(Заявка.UTMМетка, "&");
				СтрМетка = СтрМеткаМассив[0];
			Исключение
				СтрМетка = Заявка.UTMМетка;
			КонецПопытки;
			
			Если Заявка.КаналПервичногоИнтереса <> Неопределено
				 И Заявка.КаналПервичногоИнтереса.ТипЗначения.СодержитТип(Тип("СправочникСсылка.МаркетинговыеМероприятия")) Тогда
				ИсточникПервичногоИнтереса = Справочники.МаркетинговыеМероприятия.НайтиПоРеквизиту("CRM_UTMМетка", СтрМетка);
				Если НЕ ИсточникПервичногоИнтереса.Пустая() Тогда
					Заявка.ИсточникПервичногоИнтереса = ИсточникПервичногоИнтереса;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		Документы.CRM_Заявка.ЗаполнитьКонтактЗаявки(Заявка);
		Справочники.CRM_ПравилаОбработкиОбращений.ПрименитьПравило(Заявка);
		Заявка.Записать();
		Справочники.CRM_ПравилаОбработкиОбращений.ОбработатьОбращение(Заявка);
		
		Сайт = ИсточникПолученияЛидов.CRM_Сайт;
				
		ИмяСайта = СокрЛП(ПараметрыЗапросаJSON.options.site);
		Если ЗначениеЗаполнено(ИмяСайта) Тогда
			domain = СтрЗаменить(ИмяСайта, "https://", "");
			domain = СтрЗаменить(domain, "http://", "");
			
			СтруктураДанных = Новый Структура("Наименование,domain", ИмяСайта, domain);
			Сайт = CRM_СистемаСквознойАналитики.ЗаписатьИнформациюПоСайтам(СтруктураДанных);
		КонецЕсли;	
		
		utmSource = ПараметрыЗапросаJSON.options.utmSource;
		utmMedium = ПараметрыЗапросаJSON.options.utmMedium;
		utmPos = ПараметрыЗапросаJSON.options.utmPos;
		
		СтруктураДанных = Новый Структура("CRM_Сайт,CRM_UTM_source,CRM_UTM_medium,CRM_UTM_pos,
			|ИсточникПолучения,КаналПервичногоИнтереса,ИсточникПервичногоИнтереса", Сайт, utmSource, utmMedium,
			 utmPos, ИсточникПолученияЛидов, Заявка.КаналПервичногоИнтереса,
			 Заявка.ИсточникПервичногоИнтереса);
		CRM_СистемаСквознойАналитики.УстановитьСсылкуВИсточникПервичногоИнтересаЗаписатьДопРеквизит(Заявка.Ссылка,
			 СтруктураДанных);
		
		Возврат Ответ(ИмяСобытия, Истина, "Создана новая заявка в системе под номером " + Заявка.Номер);
	Исключение
		СтрОшибки = ОписаниеОшибки();
		Возврат Ответ(ИмяСобытия, Ложь, "При обработке заявки возникла ошибка: " + СтрОшибки);
	КонецПопытки;	

КонецФункции

Функция GetListExtraOptionsGET(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
КонецФункции

#Область ПрочиеЛидогенерации

Функция leadsPOST(Запрос)
	
	ИмяМетода = Запрос.ПараметрыURL.Получить("ИмяМетода");
	Если НРег(ИмяМетода) = "jivosite" Тогда
		Заголовок = ПолучитьЗаголовок(Запрос.Заголовки, "user-agent");
		Если Заголовок <> Неопределено И СтрНайти(Заголовок, "Jivobot-WebhookSender") > 0 Тогда
			Ответ = ОбработатьWebhookJivosite(Запрос.ПолучитьТелоКакСтроку());
		Иначе
			Ответ = Новый HTTPСервисОтвет(401);
		КонецЕсли;
	Иначе
		Ответ = Ответ("CRM_LeadsExchange/leads", Ложь, "The requested URL was not found on this server: " + Запрос.БазовыйURL 
			+ Запрос.ОтносительныйURL);
	КонецЕсли;
	Возврат Ответ;
	
КонецФункции

#Область Лидогенерация_с_Jivosite

Функция ОбработатьWebhookJivosite(ТелоЗапроса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураХука = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(ТелоЗапроса);
	
	Если НРег(СтруктураХука.event_name) = "chat_finished" Тогда
		Если СтруктураХука.chat.Свойство("blacklisted") И СтруктураХука.chat.blacklisted Тогда
			Возврат ОтветJivoSite("JivoSite", Истина, "Ок");
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	CRM_ИсточникиПолученияЛидов.Ссылка КАК Ссылка,
		                      |	CRM_ИсточникиПолученияЛидов.CRM_РольОтветственного КАК CRM_РольОтветственного,
		                      |	CRM_ИсточникиПолученияЛидов.ОтветственныйМенеджер КАК ОтветственныйМенеджер,
		                      |	CRM_ИсточникиПолученияЛидов.ИсточникПервичногоИнтереса КАК ИсточникПервичногоИнтереса,
		                      |	CRM_ИсточникиПолученияЛидов.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса,
		                      |	CRM_ИсточникиПолученияЛидов.ИдентификаторИсточника КАК ИдентификаторИсточника
		                      |ИЗ
		                      |	Справочник.CRM_ИсточникиПолученияЛидов КАК CRM_ИсточникиПолученияЛидов
		                      |ГДЕ
		                      |	CRM_ИсточникиПолученияЛидов.ИдентификаторИсточника = &ИдентификаторИсточника
		                      |	И CRM_ИсточникиПолученияЛидов.Сценарий = &Сценарий
		                      |	И CRM_ИсточникиПолученияЛидов.Включено
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	CRM_ИсточникиПолученияЛидов.Ссылка,
		                      |	CRM_ИсточникиПолученияЛидов.CRM_РольОтветственного,
		                      |	CRM_ИсточникиПолученияЛидов.ОтветственныйМенеджер,
		                      |	CRM_ИсточникиПолученияЛидов.ИсточникПервичногоИнтереса,
		                      |	CRM_ИсточникиПолученияЛидов.КаналПервичногоИнтереса,
		                      |	CRM_ИсточникиПолученияЛидов.ИдентификаторИсточника
		                      |ИЗ
		                      |	Справочник.CRM_ИсточникиПолученияЛидов КАК CRM_ИсточникиПолученияЛидов
		                      |ГДЕ
		                      |	CRM_ИсточникиПолученияЛидов.ИдентификаторИсточника = """"
		                      |	И CRM_ИсточникиПолученияЛидов.Сценарий = &Сценарий
		                      |	И CRM_ИсточникиПолученияЛидов.Включено
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	ИдентификаторИсточника УБЫВ");
		
		Запрос.УстановитьПараметр("Сценарий", Перечисления.CRM_CallTrakingСценарии.Jivosite);
		Запрос.УстановитьПараметр("ИдентификаторИсточника", СтруктураХука.widget_id);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Заявка = Документы.CRM_Заявка.СоздатьДокумент();
			Если ЗначениеЗаполнено(Выборка.ОтветственныйМенеджер) Тогда
				Заявка.Ответственный = Выборка.ОтветственныйМенеджер;
			ИначеЕсли ЗначениеЗаполнено(Выборка.CRM_РольОтветственного) Тогда
				Заявка.CRM_РольОтветственного = Выборка.CRM_РольОтветственного;
			Иначе
				ном = СтруктураХука.chat.messages.Количество();
				Пока ном > 0 Цикл
					ном = ном - 1;
					Если НРег(СтруктураХука.chat.messages[Ном].type) = "agent" Тогда
						Для каждого Оператор Из СтруктураХука.agents Цикл
							Если Оператор.id = СтруктураХука.chat.messages[Ном].agent_id Тогда
								Заявка.Ответственный = НайтиПользователяПоEmail(Оператор.email);
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Заявка.Дата = ТекущаяДатаСеанса();
			Заявка.ИсточникПолучения = Выборка.Ссылка;
			Заявка.Тема = НСтр("ru = 'Диалог JivoSite'; en = 'Dialog JivoSite'");
			Заявка.ТипЗаявки = 0;
			Заявка.ИДСобытия = СтруктураХука.chat_id;
			Заявка.Наименование = СтруктураХука.visitor.name;
			Если Не ЗначениеЗаполнено(Заявка.Наименование) Тогда
				Заявка.Наименование = ?(СтруктураХука.session.geoip.city <> "",
					 СтруктураХука.session.geoip.city, "Anonymous") + " " 
					+ СтруктураХука.visitor.number;
			КонецЕсли;
			Заявка.Телефон = СтруктураХука.visitor.phone;
			Заявка.ЭлектроннаяПочта = СтруктураХука.visitor.email;
			Заявка.Комментарий = СтруктураХука.plain_messages;
			СсылкаНаДиалог = "https://app.jivosite.com/chat/archive/" + СтруктураХука.chat_id + "_chat-" 
				+ СтруктураХука.visitor.number + "-" 
				+ СтруктураХука.chat_id;
			Заявка.Комментарий = Заявка.Комментарий + Символы.ПС + Символы.ПС 
				+ НСтр("ru = 'Ссылка на диалог в архивах'") + ": " 
				+ СсылкаНаДиалог;
			Заявка.Комментарий = Заявка.Комментарий + Символы.ПС + НСтр("ru = 'Сайт'; en = 'Site'") + ": " 
				+ СтруктураХука.page.url;
			Если ЗначениеЗаполнено(СтруктураХука.visitor.description) Тогда
				Заявка.Комментарий = Заявка.Комментарий + Символы.ПС + Символы.ПС 
					+ НСтр("ru = 'Комментарий оператора'") + ": " 
					+ СтруктураХука.visitor.description;
			КонецЕсли;
			Заявка.КаналПервичногоИнтереса = Выборка.КаналПервичногоИнтереса;
			Заявка.ИсточникПервичногоИнтереса = Выборка.ИсточникПервичногоИнтереса;
			
			Документы.CRM_Заявка.ЗаполнитьКонтактЗаявки(Заявка);
			Справочники.CRM_ПравилаОбработкиОбращений.ПрименитьПравило(Заявка);
			Попытка
				Заявка.Записать();
				Справочники.CRM_ПравилаОбработкиОбращений.ОбработатьОбращение(Заявка);
			Исключение
				Возврат ОтветJivoSite("JivoSite", Ложь, ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОтветJivoSite("JivoSite", Истина, "Ок");
	
КонецФункции

Функция НайтиПользователяПоEmail(Email)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПользователиКонтактнаяИнформация.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	                      |ГДЕ
	                      |	ПользователиКонтактнаяИнформация.АдресЭП = &АдресЭП
	                      |	И НЕ ПользователиКонтактнаяИнформация.Ссылка.ПометкаУдаления
	                      |	И НЕ ПользователиКонтактнаяИнформация.Ссылка.Недействителен");
	Запрос.УстановитьПараметр("АдресЭП", Email);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

Функция ОтветJivoSite(ИмяСобытия, Успешно, Текст)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("result");
    ЗаписьJSON.ЗаписатьЗначение(?(Успешно, "OK", "FAILURE"));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("text");
    ЗаписьJSON.ЗаписатьЗначение(Текст);
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();

	json = ЗаписьJSON.Закрыть();
	
	ДобавитьЗаписьЖурнала(ИмяСобытия, Текст, НЕ Успешно);
		
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json");
	Ответ.УстановитьТелоИзСтроки(json);
	
	Возврат Ответ;
	
КонецФункции	

Функция ПолучитьЗаголовок(Заголовки, ИмяЗаголовка)
	
	Для каждого Заголовок Из Заголовки Цикл
		Если ВРег(Заголовок.Ключ) = ВРег(ИмяЗаголовка) Тогда
			Возврат Заголовок.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция pingGET(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки("OK");
	Возврат Ответ;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
