#Область СлужебныеПроцедурыИФункции

Процедура ЗаписьЖурнала(Действие, Комментарий, Ошибка = Ложь)
	
	РодительСобытия = "Сквозная аналитика";
	
	Если Ошибка Тогда
		  УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
	Иначе УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(РодительСобытия + "." + Действие, УровеньЖурнала, , , Комментарий);
	
КонецПроцедуры

#Область Roistat

Функция ОпределитьКаналРекламы(utmMedium, utmSource)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НРег(utmSource) = "organic" Тогда
		// Бесплатный поиск
		Наименование = "Переходы из поисковых систем";

	ИначеЕсли НРег(utmSource) = "internal" Тогда
		// Внутренние переходы
		Наименование = "Внутренние переходы";
		
	ИначеЕсли НРег(utmSource) = "referral" ИЛИ НРег(utmSource) = "link" Тогда
		// Переходы по ссылкам
		Наименование = "Переходы по ссылкам на сайт";
		
	ИначеЕсли НРег(utmSource) = "direct" ИЛИ НРег(utmSource) = "ya_direct" ИЛИ НРег(utmSource) = "Yandex-Direct" Тогда
		// Прямые заходы
		Наименование = "Прямые заходы";
		
	ИначеЕсли НРег(utmSource) = "email" Тогда
		// Почтовая рассылка
		Наименование = "Переходы с почтовых рассылок";
		
	ИначеЕсли НРег(utmSource) = "cpc" ИЛИ НРег(utmSource) = "ppc" ИЛИ НРег(utmSource) = "paidsearch"
		 ИЛИ НРег(utmSource) = "ad"
		 ИЛИ НРег(utmSource) = "paid" Тогда
		// Поисковая реклама
		Наименование = "Переходы по рекламе";
		
	ИначеЕсли НРег(utmSource) = "social" ИЛИ НРег(utmSource) = "social-network"
		 ИЛИ НРег(utmSource) = "social-media" ИЛИ НРег(utmSource) = "sm"
		 ИЛИ НРег(utmSource) = "social network"
		 ИЛИ НРег(utmSource) = "social media" Тогда
		// Социальные сети
		Наименование = "Переходы из социальных сетей";
		
	ИначеЕсли НРег(utmSource) = "display" ИЛИ НРег(utmSource) = "cpm" ИЛИ НРег(utmSource) = "banner" Тогда
		// Медийная реклама
		Наименование = "Медийная реклама";
		
	ИначеЕсли НРег(utmSource) = "cpv" ИЛИ НРег(utmSource) = "cpa" ИЛИ НРег(utmSource) = "cpp"
		 ИЛИ НРег(utmSource) = "content-text" Тогда
		// Другая реклама
		Наименование = "Прочая реклама";
		
	Иначе
		Наименование = НРег(utmSource);
	КонецЕсли;
	
	Канал = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.НайтиПоНаименованию(Наименование, Истина);
	Если Канал.Пустая() Тогда
		КаналОбъект = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.СоздатьЭлемент();
		КаналОбъект.Наименование = Наименование;
		КаналОбъект.Записать();
		
		Канал = КаналОбъект.Ссылка;
	КонецЕсли;
	
	Возврат Канал;

КонецФункции	

Функция ПолучитьМенеджеровИлиКлиентов(ВидЗапроса, Лимит = 0, НачалоПорции = 0)
	
	Если ВидЗапроса = "Менеджеры" Тогда
		ПолеЗапросаИнтерес = "
		|	Интерес.Ответственный";
		
		ПолеЗапросаЗаявка = "
		|	Заявка.Ответственный";
		
		УсловиеЗапросаЗаявка = "
		|	И Заявка.Контакт <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
		
	Иначе
		// Клиенты
		ПолеЗапросаИнтерес = "
		|	ВЫБОР КОГДА Интерес.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) ТОГДА Интерес.ПотенциальныйКлиент ИНАЧЕ Интерес.Партнер КОНЕЦ";
		
		ПолеЗапросаЗаявка = "
		|	Заявка.Контакт";
		
		УсловиеЗапросаЗаявка = "
		|	И Заявка.Контакт <> НЕОПРЕДЕЛЕНО";
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Интерес.ДокументОснование КАК ДокументОснование," + ПолеЗапросаИнтерес + " КАК Поле,
	|	Интерес.ДокументОснование.ИсточникПолучения.ПередаватьКонтактнуюИнформацию КАК ПередаватьКИ
	|ПОМЕСТИТЬ Интересы
	|ИЗ
	|	Документ.CRM_Интерес КАК Интерес
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Заявка.ДополнительныеРеквизиты КАК ДопРеквизиты
	|	ПО ДопРеквизиты.Ссылка = Интерес.ДокументОснование
	|	И ДопРеквизиты.Свойство = &СвойствоRoistat
	|ГДЕ
	|	Интерес.ДокументОснование ССЫЛКА Документ.CRM_Заявка
	|	И Интерес.ДокументОснование.ИсточникПолучения.Сценарий = ЗНАЧЕНИЕ(Перечисление.CRM_CallTrakingСценарии.Roistat)
	|	И НЕ ДопРеквизиты.Значение ЕСТЬ NULL
	|;
	|
	|ВЫБРАТЬ
	|	Поле,
	|	МАКСИМУМ(ПередаватьКИ) КАК ПередаватьКИ,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
	|ПОМЕСТИТЬ ЕдиныйЗапрос
	|ИЗ
	|	(ВЫБРАТЬ
	|		Поле,
	|		ПередаватьКИ
	|	ИЗ
	|		Интересы
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		" + ПолеЗапросаЗаявка + " КАК Поле,
	|		Заявка.ИсточникПолучения.ПередаватьКонтактнуюИнформацию КАК ПередаватьКИ
	|	ИЗ
	|		Документ.CRM_Заявка КАК Заявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Заявка.ДополнительныеРеквизиты КАК ДопРеквизиты
	|		ПО ДопРеквизиты.Ссылка = Заявка.Ссылка
	|		И ДопРеквизиты.Свойство = &СвойствоRoistat
	|	ГДЕ
	|		НЕ Заявка.Ссылка В (ВЫБРАТЬ ДокументОснование ИЗ Интересы)" + УсловиеЗапросаЗаявка + "
	|		И Заявка.ИсточникПолучения.Сценарий = ЗНАЧЕНИЕ(Перечисление.CRM_CallTrakingСценарии.Roistat)
	|		И НЕ ДопРеквизиты.Значение ЕСТЬ NULL) КАК ЕдиныйЗапрос
	|	ГДЕ Поле <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|		И Поле <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|		И Поле <> НЕОПРЕДЕЛЕНО
	|СГРУППИРОВАТЬ ПО Поле
	|;
	|
	|ВЫБРАТЬ
	|	СУММА(1) КАК ВсегоИзменений
	|ПОМЕСТИТЬ ВсеИзменения
	|ИЗ
	|	ЕдиныйЗапрос
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Подзапрос.Поле КАК Поле,
	|	ВсеИзменения.ВсегоИзменений КАК ВсегоИзменений,
	|	ВЫБОР КОГДА НЕ Подзапрос.ПередаватьКИ ТОГДА """"
	|      	  КОГДА ТИПЗНАЧЕНИЯ(Подзапрос.Поле) = ТИПЗНАЧЕНИЯ(ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) ТОГДА КИ_Пользователи.Тип
	|	  	  КОГДА ТИПЗНАЧЕНИЯ(Подзапрос.Поле) = ТИПЗНАЧЕНИЯ(ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) ТОГДА КИ_Партнеры.Тип
	|	  	  ИНАЧЕ КИ_ПотенциальныеКлиенты.Тип
	|	КОНЕЦ КАК КИ_Тип,
	|	ВЫБОР КОГДА НЕ Подзапрос.ПередаватьКИ ТОГДА """"
	|      	  КОГДА ТИПЗНАЧЕНИЯ(Подзапрос.Поле) = ТИПЗНАЧЕНИЯ(ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) ТОГДА КИ_Пользователи.Вид
	|	   	  КОГДА ТИПЗНАЧЕНИЯ(Подзапрос.Поле) = ТИПЗНАЧЕНИЯ(ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) ТОГДА КИ_Партнеры.Вид
	|	   	  ИНАЧЕ КИ_ПотенциальныеКлиенты.Вид
	|	КОНЕЦ КАК КИ_Вид,
	|	ВЫБОР КОГДА НЕ Подзапрос.ПередаватьКИ ТОГДА """"
	|      	  КОГДА ТИПЗНАЧЕНИЯ(Подзапрос.Поле) = ТИПЗНАЧЕНИЯ(ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) ТОГДА КИ_Пользователи.Представление
	|	   	  КОГДА ТИПЗНАЧЕНИЯ(Подзапрос.Поле) = ТИПЗНАЧЕНИЯ(ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) ТОГДА КИ_Партнеры.Представление
	|	   	  ИНАЧЕ КИ_ПотенциальныеКлиенты.Представление
	|	КОНЕЦ КАК КИ_Представление
	|ИЗ
	|	ЕдиныйЗапрос КАК Подзапрос
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК КИ_Пользователи
	|	ПО КИ_Пользователи.Ссылка = Подзапрос.Поле
	|	И (КИ_Пользователи.Тип = &ТипТелефон ИЛИ КИ_Пользователи.Тип = &ТипПочта)
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК КИ_Партнеры
	|	ПО КИ_Партнеры.Ссылка = Подзапрос.Поле
	|	И (КИ_Партнеры.Тип = &ТипТелефон ИЛИ КИ_Партнеры.Тип = &ТипПочта)
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.CRM_ПотенциальныеКлиенты.КонтактнаяИнформация КАК КИ_ПотенциальныеКлиенты
	|	ПО КИ_ПотенциальныеКлиенты.Ссылка = Подзапрос.Поле
	|	И (КИ_ПотенциальныеКлиенты.Тип = &ТипТелефон ИЛИ КИ_ПотенциальныеКлиенты.Тип = &ТипПочта)
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВсеИзменения КАК ВсеИзменения
	|	ПО ИСТИНА" + ?((НачалоПорции + Лимит) = 0, "", "
	|ГДЕ
	|	Подзапрос.НомерЗаписи >= " + Формат(НачалоПорции, "ЧН=0; ЧГ=") + "
	|	И Подзапрос.НомерЗаписи <" + ?(НачалоПорции = 0, "= ", " ") + Формат((НачалоПорции + Лимит), "ЧГ=")) + "
	|УПОРЯДОЧИТЬ ПО
	|	Подзапрос.Поле
	|ИТОГИ МИНИМУМ(ВсеИзменения.ВсегоИзменений) ПО
	|	Подзапрос.Поле
	|АВТОУПОРЯДОЧИВАНИЕ");
	
	СвойствоRoistat = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Roistat_Маркер");
	Запрос.УстановитьПараметр("СвойствоRoistat", СвойствоRoistat);
	Запрос.УстановитьПараметр("ТипТелефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("ТипПочта", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	ТаблицаДанных = Новый ТаблицаЗначений();
	ТаблицаДанных.Колонки.Добавить("Объект");
	ТаблицаДанных.Колонки.Добавить("Телефон");
	ТаблицаДанных.Колонки.Добавить("Почта");

	ВсегоЗаписей = 0;
	
	ВыборкаОбъектов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОбъектов.Следующий() Цикл
		Телефон = "";
		Почта = "";
		
		ВыборкаКИ = ВыборкаОбъектов.Выбрать();
		Пока ВыборкаКИ.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаКИ.КИ_Представление) Тогда
				Если ВыборкаКИ.КИ_Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
					Телефон = ВыборкаКИ.КИ_Представление;
					
				ИначеЕсли ВыборкаКИ.КИ_Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					Почта = ВыборкаКИ.КИ_Представление;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.Объект = ВыборкаОбъектов.Поле;
		СтрокаДанных.Телефон = Телефон;
		СтрокаДанных.Почта = Почта;
		
		ВсегоЗаписей = ВыборкаОбъектов.ВсегоИзменений + 1;
	КонецЦикла;
	
	СтруктураДанных = Новый Структура("Порция,ВсегоИзменений", ТаблицаДанных, ВсегоЗаписей);
	Возврат СтруктураДанных;

КонецФункции	//	ПолучитьМенеджеровИлиКлиентов()

Функция ПолучитьДанныеЗаявок(ДатаЗапроса, СмещениеЧасовогоПояса, Лимит, НачалоПорции = 0)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СУММА(1) КАК ВсегоИзменений
	|ПОМЕСТИТЬ ВсеИзменения
	|ИЗ
	|	РегистрСведений.CRM_СквознаяАналитикаИзмененныеЗаявки КАК ИзмененныеЗаявки
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Заявка.ДополнительныеРеквизиты КАК ДопРеквизиты
	|	ПО (ДопРеквизиты.Ссылка = ИзмененныеЗаявки.Заявка)
	|	И (ДопРеквизиты.Свойство = &СвойствоRoistat)
	|ГДЕ
	|	ИзмененныеЗаявки.ИсточникАналитики.Сценарий = ЗНАЧЕНИЕ(Перечисление.CRM_CallTrakingСценарии.Roistat)
	|	И ИзмененныеЗаявки.ДатаИзменения >= &ДатаИзменения
	|	И НЕ ДопРеквизиты.Значение ЕСТЬ NULL
	|;
	|
	|ВЫБРАТЬ
	|	ИзмененныеЗаявки.ИсточникАналитики КАК ИсточникАналитики,
	|	ИзмененныеЗаявки.ДатаИзменения КАК ДатаИзменения,
	|	ИзмененныеЗаявки.Заявка КАК Заявка,
	|	ИзмененныеЗаявки.Заявка.Дата КАК Дата,
	|	РАЗНОСТЬДАТ(&ДатаСтарт, ИзмененныеЗаявки.Заявка.Дата, СЕКУНДА) КАК Дата2,
	|	ИзмененныеЗаявки.Заявка.Тема КАК Тема,
	|	ИзмененныеЗаявки.Статус КАК Статус,
	|	ИзмененныеЗаявки.Клиент КАК Клиент,
	|	ИзмененныеЗаявки.Менеджер КАК Менеджер,
	|	ИзмененныеЗаявки.Стоимость КАК Стоимость,
	|	ДопРеквизиты.Значение КАК ЗначениеСвойстваRoistat,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
	|ПОМЕСТИТЬ Заявки
	|ИЗ
	|	РегистрСведений.CRM_СквознаяАналитикаИзмененныеЗаявки КАК ИзмененныеЗаявки
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Заявка.ДополнительныеРеквизиты КАК ДопРеквизиты
	|	ПО (ДопРеквизиты.Ссылка = ИзмененныеЗаявки.Заявка)
	|	И (ДопРеквизиты.Свойство = &СвойствоRoistat)
	|ГДЕ
	|	ИзмененныеЗаявки.ИсточникАналитики.Сценарий = ЗНАЧЕНИЕ(Перечисление.CRM_CallTrakingСценарии.Roistat)
	|	И ИзмененныеЗаявки.ДатаИзменения >= &ДатаИзменения
	|	И НЕ ДопРеквизиты.Значение ЕСТЬ NULL
	|;
    |
	|ВЫБРАТЬ
	|	НомерЗаписи,
	|	ИсточникАналитики,
	|	ДатаИзменения,
	|	Заявка,
	|	Дата,
	|	Дата2,
	|	Тема,
	|	Статус,
	|	Клиент,
	|	Менеджер,
	|	Стоимость,
	|	ЗначениеСвойстваRoistat,
	|	ВсеИзменения.ВсегоИзменений КАК ВсегоИзменений
	|ИЗ
	|	Заявки
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВсеИзменения КАК ВсеИзменения
	|	ПО ИСТИНА
	|ГДЕ
	|	НомерЗаписи >= " + Формат(НачалоПорции, "ЧН=0; ЧГ=") + "
	|	И НомерЗаписи <" + ?(НачалоПорции = 0, "= ", " ") + Формат((НачалоПорции + Лимит), "ЧГ="));
	
	СвойствоRoistat = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Roistat_Маркер");
	Запрос.УстановитьПараметр("СвойствоRoistat", СвойствоRoistat);
	Запрос.УстановитьПараметр("ДатаИзменения", ДатаЗапроса);
	Запрос.УстановитьПараметр("ДатаСтарт", '19700101');
	
	ТаблицаДанных = Новый ТаблицаЗначений();
	ТаблицаДанных.Колонки.Добавить("Идентификатор");
	ТаблицаДанных.Колонки.Добавить("Тема");
	ТаблицаДанных.Колонки.Добавить("Дата");
	ТаблицаДанных.Колонки.Добавить("Статус");
	ТаблицаДанных.Колонки.Добавить("Roistat");
	ТаблицаДанных.Колонки.Добавить("Клиент");
	ТаблицаДанных.Колонки.Добавить("Менеджер");
	ТаблицаДанных.Колонки.Добавить("Стоимость");
	
	ВсегоЗаписей = 0;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИдентификаторЗаявки = Строка(Выборка.Заявка.УникальныйИдентификатор());
		ДатаЗаявки = (Выборка.Дата - СмещениеЧасовогоПояса) - '19700101';
		
		КлиентИдентификатор = "";
		Если ЗначениеЗаполнено(Выборка.Клиент) Тогда
			КлиентИдентификатор = Строка(Выборка.Клиент.УникальныйИдентификатор());
		КонецЕсли;
		
		МенеджерИдентификатор = "";
		Если ЗначениеЗаполнено(Выборка.Менеджер) Тогда
			МенеджерИдентификатор = Строка(Выборка.Менеджер.УникальныйИдентификатор());
		КонецЕсли;
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.Идентификатор = ИдентификаторЗаявки;
		СтрокаДанных.Тема = Выборка.Тема;
		СтрокаДанных.Дата = ДатаЗаявки;
		СтрокаДанных.Статус = ПолучитьСтатусПоПредставлению(Выборка.Статус);
		СтрокаДанных.Roistat = Выборка.ЗначениеСвойстваRoistat;
		СтрокаДанных.Клиент = КлиентИдентификатор;
		СтрокаДанных.Менеджер = МенеджерИдентификатор;
		СтрокаДанных.Стоимость = Выборка.Стоимость;
		
		ВсегоЗаписей = Выборка.ВсегоИзменений;
	КонецЦикла;
			
	СтруктураДанных = Новый Структура("Порция,ВсегоИзменений", ТаблицаДанных, ВсегоЗаписей);
	Возврат СтруктураДанных;

КонецФункции	//	ПолучитьДанныеЗаявок()

Функция ПолучитьВыборкуДопРеквизитов()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка, Заголовок, Имя
	|ИЗ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения
	|ГДЕ НаборСвойств = &НаборСвойств И Виден И НЕ ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ");
	Запрос.УстановитьПараметр("НаборСвойств", УправлениеСвойствами.НаборСвойствПоИмени("Документ_CRM_Заявка"));
		
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗаписатьДопРеквизит(ЗаписьJSON, Идентификатор, Наименование)
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("id");
	ЗаписьJSON.ЗаписатьЗначение(Идентификатор);
	ЗаписьJSON.ЗаписатьИмяСвойства("name");
	ЗаписьJSON.ЗаписатьЗначение(Наименование);
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
КонецПроцедуры	

Функция ВыгрузитьСправочники(Параметры)
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json");
		
	Попытка
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("statuses");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("id");
		ЗаписьJSON.ЗаписатьЗначение(1);
		ЗаписьJSON.ЗаписатьИмяСвойства("name");
		ЗаписьJSON.ЗаписатьЗначение("В работе");
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("id");
		ЗаписьJSON.ЗаписатьЗначение(2);
		ЗаписьJSON.ЗаписатьИмяСвойства("name");
		ЗаписьJSON.ЗаписатьЗначение("Оплаченные");
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("id");
		ЗаписьJSON.ЗаписатьЗначение(3);
		ЗаписьJSON.ЗаписатьИмяСвойства("name");
		ЗаписьJSON.ЗаписатьЗначение("Отмененные");
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		ЗаписьJSON.ЗаписатьКонецМассива();
			
		ЗаписьJSON.ЗаписатьИмяСвойства("fields");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		
		ВыборкаРеквизитов = ПолучитьВыборкуДопРеквизитов();
		Пока ВыборкаРеквизитов.Следующий() Цикл
			Идентификатор = Строка(ВыборкаРеквизитов.Ссылка.УникальныйИдентификатор());
			Наименование = ВыборкаРеквизитов.Заголовок;
			
			ЗаписатьДопРеквизит(ЗаписьJSON, Идентификатор, Наименование);
		КонецЦикла;
		
		МетрикаUTM_Source = ПолучитьСвойствоМетрики("CRM_Метрика_UTM_Source", "utm_source",
			 Новый ОписаниеТипов("Строка", , , ,
			 Новый КвалификаторыСтроки(200)));
		Идентификатор = Строка(МетрикаUTM_Source.УникальныйИдентификатор());
		Наименование = МетрикаUTM_Source.Заголовок;
		
		ЗаписатьДопРеквизит(ЗаписьJSON, Идентификатор, Наименование);
		
		МетрикаUTM_Medium = ПолучитьСвойствоМетрики("CRM_Метрика_UTM_Medium", "utm_medium",
			 Новый ОписаниеТипов("Строка", , , ,
			 Новый КвалификаторыСтроки(200)));
		Идентификатор = Строка(МетрикаUTM_Medium.УникальныйИдентификатор());
		Наименование = МетрикаUTM_Medium.Заголовок;
		
		ЗаписатьДопРеквизит(ЗаписьJSON, Идентификатор, Наименование);
		
		МетрикаUTM_Campaign = ПолучитьСвойствоМетрики("CRM_Метрика_UTM_Campaign", "utm_campaign",
			 Новый ОписаниеТипов("Строка", , , ,
			 Новый КвалификаторыСтроки(300)));
		Идентификатор = Строка(МетрикаUTM_Campaign.УникальныйИдентификатор());
		Наименование = МетрикаUTM_Campaign.Заголовок;
		
		ЗаписатьДопРеквизит(ЗаписьJSON, Идентификатор, Наименование);
			
		ЗаписьJSON.ЗаписатьКонецМассива();
			
		ЗаписьJSON.ЗаписатьИмяСвойства("managers");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		
		СтруктураДанных = ПолучитьМенеджеровИлиКлиентов("Менеджеры");
		Для Каждого СтрокаМенеджера Из СтруктураДанных.Порция Цикл
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			ЗаписьJSON.ЗаписатьИмяСвойства("id");
			ЗаписьJSON.ЗаписатьЗначение(Строка(СтрокаМенеджера.Объект.УникальныйИдентификатор()));
			ЗаписьJSON.ЗаписатьИмяСвойства("name");
			ЗаписьJSON.ЗаписатьЗначение(Строка(СтрокаМенеджера.Объект));
			ЗаписьJSON.ЗаписатьИмяСвойства("phone");
			ЗаписьJSON.ЗаписатьЗначение(СтрокаМенеджера.Телефон);
			ЗаписьJSON.ЗаписатьИмяСвойства("email");
			ЗаписьJSON.ЗаписатьЗначение(СтрокаМенеджера.Почта);

			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		json = ЗаписьJSON.Закрыть();
		
		ЗаписьЖурнала("Roistat.import_scheme.Ответ", "json: " + json);
		
		Ответ.УстановитьТелоИзСтроки(json);
		
	Исключение
		СтрОшибки = ОписаниеОшибки();
		ЗаписьЖурнала("Roistat.import_scheme.Ответ", "Ошибка: " + СтрОшибки, Истина);
	КонецПопытки;
	
	Возврат Ответ;

КонецФункции

Функция ПолучитьСтатусПоПредставлению(Статус)
	
	Если НЕ ЗначениеЗаполнено(Статус) Тогда
		Возврат 1;
	КонецЕсли;
	
	Статусы = Новый Массив();
	Статусы.Добавить("InWork");
	Статусы.Добавить("Paid");
	Статусы.Добавить("Canceled");
	
	ТекИндекс = Статусы.Найти(Статус);
	Возврат ТекИндекс + 1;
	
КонецФункции	

Функция ВыгрузитьЗаказы(Параметры)
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json");
		
	Попытка
		ТекДата = НачалоДня(ТекущаяДатаСеанса());
		СмещениеЧасовогоПояса = ТекДата - УниверсальноеВремя(ТекДата, ЧасовойПояс());
		
		ЛимитЗаписей = Число(Параметры.Получить("limit")); // количество выгружаемых сделок, которое Roistat ожидает получить от CRM-системы
		НачалоПорции = Число(Параметры.Получить("offset")); // количество сделок от начала выборки, которые нужно пропустить

		ДатаUNIX = Число(Параметры.Получить("date")); // Дата в формате UNIX-time
		ДатаЗапроса = '19700101' + ДатаUNIX; // Преобразование к формату 1С
		
		ДанныеЗаявок = ПолучитьДанныеЗаявок(ДатаЗапроса, СмещениеЧасовогоПояса, ЛимитЗаписей, НачалоПорции);
		
		ВсегоИзменений = 0;
		Если ДанныеЗаявок <> Неопределено Тогда
			ВсегоИзменений = ДанныеЗаявок.ВсегоИзменений;
		КонецЕсли;
		
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("pagination");
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("total_count");
		ЗаписьJSON.ЗаписатьЗначение(ВсегоИзменений);
		ЗаписьJSON.ЗаписатьИмяСвойства("limit");
		ЗаписьJSON.ЗаписатьЗначение(ЛимитЗаписей);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
				
		ЗаписьJSON.ЗаписатьИмяСвойства("orders");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		
		Если ДанныеЗаявок <> Неопределено Тогда
			Для Каждого СтрокаДанных Из ДанныеЗаявок.Порция Цикл
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				ЗаписьJSON.ЗаписатьИмяСвойства("id");
				ЗаписьJSON.ЗаписатьЗначение(СтрокаДанных.Идентификатор);
				ЗаписьJSON.ЗаписатьИмяСвойства("name");
				ЗаписьJSON.ЗаписатьЗначение(СтрокаДанных.Тема);
				ЗаписьJSON.ЗаписатьИмяСвойства("date_create");
				ЗаписьJSON.ЗаписатьЗначение(СтрокаДанных.Дата);
				
				ЗаписьJSON.ЗаписатьИмяСвойства("status");
				ЗаписьJSON.ЗаписатьЗначение(СтрокаДанных.Статус);
				ЗаписьJSON.ЗаписатьИмяСвойства("roistat");
				ЗаписьJSON.ЗаписатьЗначение(СтрокаДанных.Roistat);
				
				ЗаписьJSON.ЗаписатьИмяСвойства("client_id");
				Если ЗначениеЗаполнено(СтрокаДанных.Клиент) Тогда
					ЗаписьJSON.ЗаписатьЗначение(СтрокаДанных.Клиент);
				Иначе
					ЗаписьJSON.ЗаписатьЗначение("");
				КонецЕсли;
				
				ЗаписьJSON.ЗаписатьИмяСвойства("manager_id");
				Если ЗначениеЗаполнено(СтрокаДанных.Менеджер) Тогда
					ЗаписьJSON.ЗаписатьЗначение(СтрокаДанных.Менеджер);
				Иначе
					ЗаписьJSON.ЗаписатьЗначение("");
				КонецЕсли;
				
				ЗаписьJSON.ЗаписатьИмяСвойства("fields");
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				ЗаписьJSON.ЗаписатьКонецОбъекта();
				
				// Стоимость
				ЗаписьJSON.ЗаписатьИмяСвойства("price");
				ЗаписьJSON.ЗаписатьЗначение(СтрокаДанных.Стоимость);
				ЗаписьJSON.ЗаписатьИмяСвойства("cost");
				ЗаписьJSON.ЗаписатьЗначение(0);

				ЗаписьJSON.ЗаписатьКонецОбъекта();
				
			КонецЦикла;
		КонецЕсли;
		
		ЗаписьJSON.ЗаписатьКонецМассива();
			
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		json = ЗаписьJSON.Закрыть();
		
		ЗаписьЖурнала("Roistat.export.Ответ", "json: " + json);
		
		Ответ.УстановитьТелоИзСтроки(json);
		
	Исключение
		СтрОшибки = ОписаниеОшибки();
		ЗаписьЖурнала("Roistat.export.Ответ", "Ошибка: " + СтрОшибки, Истина);
	КонецПопытки;
	
	Возврат Ответ;

КонецФункции

Функция ВыгрузитьКлиентов(Параметры)

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json");
		
	Попытка
		ЛимитЗаписей = Число(Параметры.Получить("limit")); // количество выгружаемых клиентов,
		// которое Roistat ожидает получить от CRM-системы
		НачалоПорции = Число(Параметры.Получить("offset")); // количество клиентов от начала выборки,
		// которые нужно пропустить
		
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("clients");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		
		СтруктураДанных = ПолучитьМенеджеровИлиКлиентов("Клиенты", ЛимитЗаписей, НачалоПорции);
		
		ЗаписейВПорции = 0;
		
		Для Каждого СтрокаКлиента Из СтруктураДанных.Порция Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаКлиента.Объект) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			ЗаписьJSON.ЗаписатьИмяСвойства("id");
			ЗаписьJSON.ЗаписатьЗначение(Строка(СтрокаКлиента.Объект.УникальныйИдентификатор()));
			ЗаписьJSON.ЗаписатьИмяСвойства("name");
			ЗаписьJSON.ЗаписатьЗначение(Строка(СтрокаКлиента.Объект));
			ЗаписьJSON.ЗаписатьИмяСвойства("phone");
			ЗаписьJSON.ЗаписатьЗначение(СтрокаКлиента.Телефон);
			ЗаписьJSON.ЗаписатьИмяСвойства("email");
			ЗаписьJSON.ЗаписатьЗначение(СтрокаКлиента.Почта);
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			ЗаписейВПорции = ЗаписейВПорции + 1;
		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();

		ЗаписьJSON.ЗаписатьИмяСвойства("pagination");
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("total_count");
		ЗаписьJSON.ЗаписатьЗначение(СтруктураДанных.ВсегоИзменений);
		ЗаписьJSON.ЗаписатьИмяСвойства("limit");
		ЗаписьJSON.ЗаписатьЗначение(ЛимитЗаписей);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		json = ЗаписьJSON.Закрыть();
		
		ЗаписьЖурнала("Roistat.export_clients.Ответ", "json: " + json + "count: " + Строка(ЗаписейВПорции));
		
		Ответ.УстановитьТелоИзСтроки(json);
		
	Исключение
		СтрОшибки = ОписаниеОшибки();
		ЗаписьЖурнала("Roistat.export_clients.Ответ", "Ошибка: " + СтрОшибки, Истина);
	КонецПопытки;
	
	Возврат Ответ;

КонецФункции

Функция ЗаменитьСлужебныеСимволы(Строка)
	
	Возврат СтрЗаменить(Строка, "+", " ");
	
КонецФункции

Функция ПолучитьСвойствоМетрики(ИдентификаторМетрики, НаименованиеМетрики, ТипЗначенияМетрики)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборСвойств = УправлениеСвойствами.НаборСвойствПоИмени("Документ_CRM_Заявка");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка
	|ИЗ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения
	|ГДЕ Имя = &Имя И НЕ ПометкаУдаления И НаборСвойств = &НаборСвойств");
	Запрос.УстановитьПараметр("Имя", ИдентификаторМетрики);
	Запрос.УстановитьПараметр("НаборСвойств", НаборСвойств);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;	
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Имя", ИдентификаторМетрики);
	СтруктураРеквизитов.Вставить("Заголовок", НаименованиеМетрики);
	СтруктураРеквизитов.Вставить("НаборСвойств", НаборСвойств);
	СтруктураРеквизитов.Вставить("ТипЗначения", ТипЗначенияМетрики);
	СтруктураРеквизитов.Вставить("Доступен", Истина);
	СтруктураРеквизитов.Вставить("Виден", Ложь);
	СтруктураРеквизитов.Вставить("ЗаполнятьОбязательно", Ложь);
	
	ОбъектПВХ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(ОбъектПВХ, СтруктураРеквизитов);
	
	НаименованиеНабора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектПВХ.НаборСвойств, "Наименование");
	ОбъектПВХ.Наименование = ОбъектПВХ.Заголовок + " (" + НаименованиеНабора + ")";
	ОбъектПВХ.Записать();
	
	Возврат ОбъектПВХ.Ссылка;
	
КонецФункции

Функция ОбработатьЗаявку(Параметры, ПараметрыСтрокой)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json");
		
	НачатьТранзакцию();
	Попытка
		
		ТекДата = НачалоДня(ТекущаяДатаСеанса());
		СмещениеЧасовогоПояса = ТекДата - УниверсальноеВремя(ТекДата, ЧасовойПояс());
	
		Тема = ЗаменитьСлужебныеСимволы(Параметры.Получить("title"));
			
		ДатаСтрокой = Параметры.Получить("created_date");
		Позиция = СтрНайти(ДатаСтрокой, "+");
		ТекДата = Дата(СтрЗаменить(Лев(ДатаСтрокой, Позиция - 1), "-", ""));
		ТекВремя = Дата("00010101" + СтрЗаменить(Сред(ДатаСтрокой, Позиция + 1), ":", ""));
		ДатаЗаявки = ТекДата + (ТекВремя - Дата("00010101")) + СмещениеЧасовогоПояса;
		
		КлиентНаименование = ЗаменитьСлужебныеСимволы(Параметры.Получить("name"));
		КлиентЭлектроннаяПочта = Параметры.Получить("email");
		КлиентТелефон = Прав(СокрЛП(Параметры.Получить("phone")), 10);
		Комментарий = ЗаменитьСлужебныеСимволы(Параметры.Получить("text"));
		ВизитИдентификатор = Параметры.Получить("visit");
		МенеджерИдентификатор = Параметры.Получить("manager_id");
		
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(Параметры.Получить("data"));
		json = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();

		roistat = "";
		utmSource = "";
		utmMedium = "";
		utmCampaign = "";
		
		КаналПервичногоИнтереса = "";
		ИсточникПервичногоИнтереса = "";
		ДопРеквизиты = Новый Соответствие;
		
		НомерПроектаЗаявки = "";
		
		ДопПараметрыСтрокой = "";
		Для Каждого ТекПараметр Из json Цикл
			
			Если ТекПараметр.Ключ = "roistat" Тогда
				roistat = ТекПараметр.Значение;
				Продолжить;
			КонецЕсли;
			
			Если НЕ СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ТекПараметр.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекПараметр.Ключ = "roistatProjectId" Тогда
				НомерПроектаЗаявки = ТекПараметр.Значение;
			КонецЕсли;
			
			GUID = Новый УникальныйИдентификатор(ТекПараметр.Ключ);
			ДопРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(GUID);
			
			Если ДопРеквизит.ПолучитьОбъект() <> Неопределено И ЗначениеЗаполнено(ТекПараметр.Значение) Тогда
				
				ДопРеквизиты.Вставить(ДопРеквизит, ТекПараметр.Значение);
				
				Если ДопРеквизит.Имя = "CRM_Метрика_UTM_Source" Тогда
					utmSource = ТекПараметр.Значение;
				ИначеЕсли ДопРеквизит.Имя = "CRM_Метрика_UTM_Medium" Тогда
					utmMedium = ТекПараметр.Значение;
				ИначеЕсли ДопРеквизит.Имя = "CRM_Метрика_UTM_Campaign" Тогда
					utmCampaign = ТекПараметр.Значение;
				КонецЕсли;
			Иначе
				ДопПараметрыСтрокой = ДопПараметрыСтрокой + ?(ДопПараметрыСтрокой = "", "", Символы.ПС) 
					+ ТекПараметр.Ключ + ": " 
					+ ТекПараметр.Значение;
			КонецЕсли;

		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(utmSource) Тогда
			Если СтрНайти(roistat, "campaign=") > 0 Тогда
				utmSource = СтрЗаменить(roistat, ":u:", "_");
				utmSource = СтрЗаменить(utmSource, ":utm:", "");
								
			ИначеЕсли СтрНайти(ВизитИдентификатор, "campaign=") > 0 Тогда
				utmSource = СтрЗаменить(ВизитИдентификатор, ":u:", "_");
				utmSource = СтрЗаменить(utmSource, ":utm:", "");
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(utmSource) Тогда
			Если НЕ ЗначениеЗаполнено(utmMedium) Тогда
				Позиция = СтрНайти(utmSource, "&utm_medium");
				Если Позиция > 0 Тогда
					ОстатокСтроки = Сред(utmSource, Позиция + 1);
					Позиция = СтрНайти(ОстатокСтроки, "&");
					Если Позиция > 0 Тогда
						ОстатокСтроки = Лев(ОстатокСтроки, Позиция - 1);
					КонецЕсли;
					utmMedium = "&" + ОстатокСтроки;
					
					utmSource = СтрЗаменить(utmSource, utmMedium, "");
					utmMedium = СтрЗаменить(utmMedium, "&utm_medium=", "");
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(utmCampaign) Тогда
				Позиция = СтрНайти(utmSource, "&utm_campaign");
				Если Позиция > 0 Тогда
					ОстатокСтроки = Сред(utmSource, Позиция + 1);
					Позиция = СтрНайти(ОстатокСтроки, "&");
					Если Позиция > 0 Тогда
						ОстатокСтроки = Лев(ОстатокСтроки, Позиция - 1);
					КонецЕсли;
					utmCampaign = "&" + ОстатокСтроки;
					
					utmSource = СтрЗаменить(utmSource, utmCampaign, "");
					utmCampaign = СтрЗаменить(utmCampaign, "&utm_campaign=", "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(utmCampaign) И ЗначениеЗаполнено(roistat) Тогда
			// Для статического коллтрекинга идентификатор рекламной кампании указывается в настройках сценария
			Если roistat = ВизитИдентификатор И СтрНайти(Комментарий, roistat) > 0 Тогда
				utmCampaign = roistat;
				
				Если НЕ ЗначениеЗаполнено(utmSource) Тогда
					utmSource = "roistat";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(utmCampaign) Тогда
			КаналПервичногоИнтереса = ОпределитьКаналРекламы(utmMedium, utmSource);	
			
			ИсточникПервичногоИнтереса = Справочники.МаркетинговыеМероприятия.НайтиПоРеквизиту("CRM_UTMМетка", utmCampaign);
			Если ИсточникПервичногоИнтереса.Пустая() Тогда
				ТекОбъект = Справочники.МаркетинговыеМероприятия.СоздатьЭлемент();
				ТекОбъект.CRM_UTMМетка = utmCampaign;
				ТекОбъект.Наименование = utmCampaign;
				ТекОбъект.CRM_СквознаяАналитика = Истина;
				ТекОбъект.CRM_Неограниченно = Истина;
				ТекОбъект.Записать();
				
				ИсточникПервичногоИнтереса = ТекОбъект.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		ИсточникПолучения = "";
		Ответственный = "";
		CRM_РольОтветственного = "";
		СекундВЧасе = 3600;
		CRM_ДлительностьОжиданияСвязыванияЗаявки = 8;
		
		Запрос = Новый Запрос();

		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	CRM_ИсточникиПолученияЛидов.Ссылка КАК Ссылка,
			|	CRM_ИсточникиПолученияЛидов.CRM_РольОтветственного КАК CRM_РольОтветственного,
			|	CRM_ИсточникиПолученияЛидов.ОтветственныйМенеджер КАК ОтветственныйМенеджер,
			|	CRM_ИсточникиПолученияЛидов.CRM_ДлительностьОжиданияСвязыванияЗаявки КАК CRM_ДлительностьОжиданияСвязыванияЗаявки
			|ИЗ
			|	Справочник.CRM_ИсточникиПолученияЛидов КАК CRM_ИсточникиПолученияЛидов
			|ГДЕ
			|	НЕ CRM_ИсточникиПолученияЛидов.ПометкаУдаления
			|	И CRM_ИсточникиПолученияЛидов.Включено
			|	И CRM_ИсточникиПолученияЛидов.Сценарий = &Сценарий";
		
		Если ЗначениеЗаполнено(НомерПроектаЗаявки) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И CRM_ИсточникиПолученияЛидов.CRM_НомерПроекта = &НомерПроектаЗаявки
			|";
			Запрос.УстановитьПараметр("НомерПроектаЗаявки", НомерПроектаЗаявки);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Сценарий", Перечисления.CRM_CallTrakingСценарии.Roistat);
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ИсточникПолучения = Выборка.Ссылка;
			Ответственный = Выборка.ОтветственныйМенеджер;
			CRM_РольОтветственного = Выборка.CRM_РольОтветственного;
			Если Выборка.CRM_ДлительностьОжиданияСвязыванияЗаявки > 0 Тогда
				CRM_ДлительностьОжиданияСвязыванияЗаявки = Выборка.CRM_ДлительностьОжиданияСвязыванияЗаявки;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОбъект = Документы.CRM_Заявка.СоздатьДокумент();
		ДокументОбъект.Дата = ДатаЗаявки;
		ДокументОбъект.Наименование = КлиентНаименование;
		ДокументОбъект.Комментарий = Комментарий + ?(Комментарий = "", "", Символы.ПС) + ДопПараметрыСтрокой;
		ДокументОбъект.Телефон = КлиентТелефон;
		ДокументОбъект.ЭлектроннаяПочта = КлиентЭлектроннаяПочта;
		ДокументОбъект.Тема = Тема;
		ДокументОбъект.ИсточникПолучения = ИсточникПолучения;
		ДокументОбъект.Ответственный = Ответственный;
		ДокументОбъект.CRM_РольОтветственного = CRM_РольОтветственного;
		ДокументОбъект.КаналПервичногоИнтереса = КаналПервичногоИнтереса;
		ДокументОбъект.ИсточникПервичногоИнтереса = ИсточникПервичногоИнтереса;
		ДокументОбъект.ТипЗаявки = ?(СтрНайти(ВРег(Тема), "ЗВОНОК") > 0, 1, 0);
		
		ТекСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Roistat_Маркер");
		СтрокаДопРеквизитов = ДокументОбъект.ДополнительныеРеквизиты.Добавить();
		СтрокаДопРеквизитов.Свойство = ТекСвойство;
		СтрокаДопРеквизитов.Значение = roistat;
		
		// Запишем доп. реквизиты в Заявку
		Для каждого ДопРеквизит Из ДопРеквизиты Цикл
			СтрокаСвойств = ДокументОбъект.ДополнительныеРеквизиты.Добавить();
			СтрокаСвойств.Свойство = ДопРеквизит.Ключ;
			СтрокаСвойств.Значение = ДопРеквизит.Значение;
		КонецЦикла;
		
		СвязываемыйЗвонок = "";
		СвязываемоеПисьмо = "";
		
		Если ДокументОбъект.ТипЗаявки = 1 Тогда
			
			ДокументОбъект.Комментарий = НСтр("ru='Звонок с номера'; en='Call From Number'") + ": " + Параметры.Получить("phone") 
				+ Символы.ПС 
				+ ДокументОбъект.Комментарий;
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Звонки.Ссылка КАК Звонок
			|ИЗ
			|	Документ.ТелефонныйЗвонок КАК Звонки
			|ГДЕ
			|	Звонки.Дата МЕЖДУ &ДатаС И &ДатаПо
			|	И Звонки.АбонентКакСвязаться = &КлиентТелефон
			|	И Звонки.ВзаимодействиеОснование = НЕОПРЕДЕЛЕНО
			|	И НЕ Звонки.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	Звонки.Ссылка УБЫВ
			|АВТОУПОРЯДОЧИВАНИЕ");
			Запрос.УстановитьПараметр("ДатаС", ДатаЗаявки - CRM_ДлительностьОжиданияСвязыванияЗаявки * СекундВЧасе);
			Запрос.УстановитьПараметр("ДатаПо", ДатаЗаявки);
			Запрос.УстановитьПараметр("КлиентТелефон", КлиентТелефон);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ДокументОбъект.CRM_СкрытьВАРМ = Истина;
				СвязываемыйЗвонок = Выборка.Звонок;
			КонецЕсли;
			
		Иначе 
			Запрос = Новый Запрос("
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Письма.Ссылка КАК Письмо
			|ИЗ
			|	Документ.ЭлектронноеПисьмоВходящее КАК Письма
			|ГДЕ
			|	Письма.ДатаПолучения МЕЖДУ &ДатаС И &ДатаПо
			|	И Письма.ОтправительАдрес = &КлиентЭлектроннаяПочта
			|	И НЕ Письма.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	Письма.Ссылка УБЫВ
			|АВТОУПОРЯДОЧИВАНИЕ");
			Запрос.УстановитьПараметр("ДатаС", ДатаЗаявки - CRM_ДлительностьОжиданияСвязыванияЗаявки * СекундВЧасе);
			Запрос.УстановитьПараметр("ДатаПо", ДатаЗаявки);
			Запрос.УстановитьПараметр("КлиентЭлектроннаяПочта", КлиентЭлектроннаяПочта);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СвязываемоеПисьмо = Выборка.Письмо;
			КонецЕсли;
		КонецЕсли;
				
		Документы.CRM_Заявка.ЗаполнитьКонтактЗаявки(ДокументОбъект);
		Справочники.CRM_ПравилаОбработкиОбращений.ПрименитьПравило(ДокументОбъект);
		ДокументОбъект.Записать();
		
		РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(ДокументОбъект.Ссылка,
			 Справочники.CRM_СостоянияЛидов.Новый);
		
		Справочники.CRM_ПравилаОбработкиОбращений.ОбработатьОбращение(ДокументОбъект);
		
		ИдентификаторЗаявки = Строка(ДокументОбъект.Ссылка.УникальныйИдентификатор());
		
		ДокументСвязываемоеПисьмо = Неопределено;
		
		Если ДокументОбъект.ТипЗаявки = 1 Тогда
			Если ЗначениеЗаполнено(СвязываемыйЗвонок) Тогда
				ЗвонокОбъект = СвязываемыйЗвонок.ПолучитьОбъект();
				ЗвонокОбъект.ВзаимодействиеОснование = ДокументОбъект.Ссылка;
				ЗвонокОбъект.Записать();
				
			Иначе
				МенеджерЗаписи = РегистрыСведений.сфпДанныеКоллтрекинга.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.НомерТелефона = КлиентТелефон;
				МенеджерЗаписи.ДатаЗвонка = ТекущаяДатаСеанса();
				МенеджерЗаписи.utm_campaign = roistat;
				МенеджерЗаписи.Заявка = ДокументОбъект.Ссылка;
				МенеджерЗаписи.КаналПервичногоИнтереса = КаналПервичногоИнтереса;
				МенеджерЗаписи.ИсточникПервичногоИнтереса = ИсточникПервичногоИнтереса;
				МенеджерЗаписи.Оператор = Перечисления.CRM_CallTrakingСценарии.Roistat;
				МенеджерЗаписи.Записать();
				
				// Удалим записи старше 1 часа.
				Запрос = Новый Запрос("
				|ВЫБРАТЬ НомерТелефона
				|ИЗ РегистрСведений.сфпДанныеКоллтрекинга
				|ГДЕ ДатаЗвонка < &ДатаПроверки");
				Запрос.УстановитьПараметр("ДатаПроверки", (ТекущаяДатаСеанса() - СекундВЧасе));
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					МенеджерЗаписи = РегистрыСведений.сфпДанныеКоллтрекинга.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.НомерТелефона = Выборка.НомерТелефона;
					МенеджерЗаписи.Прочитать();
					Если МенеджерЗаписи.Выбран() Тогда
						МенеджерЗаписи.Удалить();
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			Если ЗначениеЗаполнено(СвязываемоеПисьмо) Тогда
				
				ДокументСвязываемоеПисьмо = СвязываемоеПисьмо;
				
				ПисьмоОбъект = СвязываемоеПисьмо.ПолучитьОбъект();
				ПисьмоОбъект.CRM_СкрытьВАРМ = Истина;
				ПисьмоОбъект.Записать();
			КонецЕсли;	
		КонецЕсли;
		
		ДокументОбъект = ДокументОбъект.Ссылка.ПолучитьОбъект();
		Если Не ДокументСвязываемоеПисьмо = Неопределено И
			Не ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) Тогда
			ДокументОбъект.ДокументОснование = ДокументСвязываемоеПисьмо;
			ДокументОбъект.Записать();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СвязываемоеПисьмо) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	CRM_ЖурналДокументов.CRM_Интерес КАК CRM_Интерес
				|ИЗ
				|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
				|ГДЕ
				|	CRM_ЖурналДокументов.Объект = &Объект
				|
				|УПОРЯДОЧИТЬ ПО
				|	CRM_ЖурналДокументов.Дата УБЫВ";
			
			Запрос.УстановитьПараметр("Объект", ДокументСвязываемоеПисьмо);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				СвязатьЗаявкуСИнтересомОснования(ДокументОбъект.Ссылка, Выборка.CRM_Интерес);
				
			КонецЕсли;
		КонецЕсли;
		
		РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(ДокументОбъект.Ссылка,
			 Справочники.CRM_СостоянияЛидов.Новый);
		
		Справочники.CRM_ПравилаОбработкиОбращений.ОбработатьОбращение(ДокументОбъект);
		
		СтруктураДанных = Новый Структура();
		СтруктураДанных.Вставить("CRM_Сайт", Неопределено);
		СтруктураДанных.Вставить("CRM_UTM_source", utmSource);
		СтруктураДанных.Вставить("CRM_UTM_medium", utmMedium);
		СтруктураДанных.Вставить("CRM_UTM_pos", "");
		СтруктураДанных.Вставить("КаналПервичногоИнтереса", КаналПервичногоИнтереса);
		СтруктураДанных.Вставить("ИсточникПервичногоИнтереса", ИсточникПервичногоИнтереса);
		СтруктураДанных.Вставить("ИсточникПолучения", ИсточникПолучения);
		СтруктураДанных.Вставить("id", ИдентификаторЗаявки);
		CRM_СистемаСквознойАналитики.УстановитьСсылкуВИсточникПервичногоИнтересаЗаписатьДопРеквизит(ДокументОбъект.Ссылка,
			 СтруктураДанных);
		
		МенеджерЗаписиОбновленияАналитики = РегистрыСведений.CRM_ОбъектыОбновленияАналитики.СоздатьМенеджерЗаписи();
		МенеджерЗаписиОбновленияАналитики.Источник = ИсточникПолучения;
		МенеджерЗаписиОбновленияАналитики.Объект = ДокументОбъект.Ссылка;
		МенеджерЗаписиОбновленияАналитики.Записать();
		
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("status");
		ЗаписьJSON.ЗаписатьЗначение("ok");
		ЗаписьJSON.ЗаписатьИмяСвойства("order_id");
		ЗаписьJSON.ЗаписатьЗначение(ИдентификаторЗаявки);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		ЗаписьЖурнала("Roistat.lead." + НСтр("ru='Ответ';en='Request'"), "json: " + json);
		
		Ответ.УстановитьТелоИзСтроки(json);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		СтрОшибки = ОписаниеОшибки();
		ЗаписьЖурнала("Roistat.lead." + НСтр("ru='Ответ';en='Request'"), НСтр("ru='Ошибка';en='Error'") 
			+ ": " + СтрОшибки,
			 Истина);
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Процедура СвязатьЗаявкуСИнтересомОснования(ОбъектЖурнала, Интерес)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	CRM_ЖурналДокументов.ГлавнаяЗапись КАК ГлавнаяЗапись,
		|	CRM_ЖурналДокументов.Клиент КАК Клиент,
		|	CRM_ЖурналДокументов.Объект КАК Объект,
		|	CRM_ЖурналДокументов.CRM_Интерес КАК CRM_Интерес
		|ИЗ
		|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
		|ГДЕ
		|	CRM_ЖурналДокументов.Объект = &Объект
		|
		|УПОРЯДОЧИТЬ ПО
		|	CRM_ЖурналДокументов.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Объект", ОбъектЖурнала);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурнала = РегистрыСведений.CRM_ЖурналДокументов.СоздатьМенеджерЗаписи();
	ЗаписьЖурнала.ГлавнаяЗапись = Результат[0].ГлавнаяЗапись;
	ЗаписьЖурнала.Клиент = Результат[0].Клиент;
	ЗаписьЖурнала.Объект = Результат[0].Объект;
	ЗаписьЖурнала.CRM_Интерес = Результат[0].CRM_Интерес;
	ЗаписьЖурнала.Прочитать();
	Если ЗаписьЖурнала.Выбран() Тогда
		ЗаписьЖурнала.CRM_Интерес = Интерес;
		ЗаписьЖурнала.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьКомментарий(Параметры)
	
	Идентификатор = Параметры.Получить("leadId"); // ID сделки или иной сущности, в которую необходимо добавить сообщение
	Заголовок = Параметры.Получить("title"); // заголовок сообщения
	Комментарий = Параметры.Получить("message"); // текст сообщения
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("status");
	ЗаписьJSON.ЗаписатьЗначение("ok");
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	json = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json");
	Ответ.УстановитьТелоИзСтроки(json);
	Возврат Ответ;

КонецФункции

Функция ДобавитьЗадачу(Параметры)
	
	Идентификатор = Параметры.Получить("element_id"); // ID сделки или иной сущности, в которую необходимо добавить задачу
	СрокВыполнения = Параметры.Получить("deadline"); // крайний срок задачи (UTC+0)
	ТекстЗадачи = Параметры.Получить("text"); // текст задачи
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("status");
	ЗаписьJSON.ЗаписатьЗначение("ok");
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	json = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json");
	Ответ.УстановитьТелоИзСтроки(json);
	Возврат Ответ;

КонецФункции

Функция ДобавитьЗвонок(Параметры)
	
	ИдентификаторЗвонка = Параметры.Получить("id"); // ID звонка в системе Roistat
	ИдентификаторЗаявки = Параметры.Получить("order_id"); // номер сделки, которая была создана по звонку
	КомуЗвонили = Параметры.Получить("callee"); // кому был совершен вызов
	КтоЗвонил = Параметры.Получить("caller"); // кто совершил вызов
	Визит = Параметры.Получить("visit"); // номер визита
	РекламныйИсточник = Параметры.Получить("marker"); // маркер, рекламный источник визита
	Длительность = Параметры.Получить("duration"); // длительность вызова
	ЗаписьРазговора = Параметры.Получить("file_url"); // запись разговора
	ДатаЗвонка = Параметры.Получить("date"); // дата звонка
	Статус = Параметры.Получить("status"); // статус звонка. Возможные статусы звонка:
		// ANSWER – звонок был принят и обработан сотрудником; 
		// BUSY – входящий звонок был, но линия была занята; 
		// NOANSWER – входящий вызов состоялся, но в течение времени ожидания ответа не был принят сотрудником; 
		// CANCEL – входящий вызов состоялся, но был завершен до того, как сотрудник ответил; 
		// CONGESTION – вызов не состоялся из-за технических проблем; 
		// CHANUNAVAIL – вызываемый номер был недоступен; 
		// DONTCALL – входящий вызов был отменен; 
		// TORTURE – входящий вызов был перенаправлен на автоответчик
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("status");
	ЗаписьJSON.ЗаписатьЗначение("ok");
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	json = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json");
	Ответ.УстановитьТелоИзСтроки(json);
	Возврат Ответ;

КонецФункции

Функция RoistatGET(Запрос)
	
	Параметры = Запрос.ПараметрыЗапроса;
	
	Действие = Параметры.Получить("action");
	Если Действие = Неопределено Тогда
		Действие = "Пусто";
	КонецЕсли;
	
	token = Параметры.Получить("token");
	Если token = Неопределено Тогда
		token = "";
	КонецЕсли;
	
	user = Параметры.Получить("user");
	Если user = Неопределено Тогда
		user = "";
	КонецЕсли;
	
	ПараметрыСтрокой = "";
	Для Каждого ТекПараметр Из Параметры Цикл
		ПараметрыСтрокой = ПараметрыСтрокой + "&" + ТекПараметр.Ключ + "=" + ТекПараметр.Значение;
	КонецЦикла;	
	
	ЗаписьЖурнала("Roistat." + Действие + ".Запрос", ПараметрыСтрокой);

	Если Действие = "import_scheme" Тогда
		// Выгрузка информации о статусах, дополнительных полях и менеджерах CRM-системы
		Возврат ВыгрузитьСправочники(Параметры);

	ИначеЕсли Действие = "export" Тогда
		// Выгрузка информации о сделках из CRM-системы
		Возврат ВыгрузитьЗаказы(Параметры);

	ИначеЕсли Действие = "export_clients" Тогда
		// Выгрузка информации о клиентах из CRM-системы
		Возврат ВыгрузитьКлиентов(Параметры);
		
	ИначеЕсли Действие = "lead" Тогда
		// Отправка данных в CRM-систему
		Возврат ОбработатьЗаявку(Параметры, ПараметрыСтрокой);
		
	ИначеЕсли Действие = "message" Тогда
		// Добавление комментария к текущей сделке
		Возврат ДобавитьКомментарий(Параметры);
		
	ИначеЕсли Действие = "task" Тогда
		// Добавление задачи к текущей сделке
		Возврат ДобавитьЗадачу(Параметры);
		
	ИначеЕсли Действие = "call" Тогда
		// Добавление звонка к текущей сделке
		Возврат ДобавитьЗвонок(Параметры);	
	КонецЕсли;
	
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("status");
	ЗаписьJSON.ЗаписатьЗначение("ok");
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	json = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json");
	Ответ.УстановитьТелоИзСтроки(json);
	Возврат Ответ;

КонецФункции

#КонецОбласти

#КонецОбласти
