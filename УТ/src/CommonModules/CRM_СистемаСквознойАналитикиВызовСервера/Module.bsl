////////////////////////////////////////////////////////////////////////////////
// Система сквозной аналитики (сервер)
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьПредопределенныеЭлементыИнтерваловВремени() Экспорт
	CRM_СистемаСквознойАналитики.УстановитьПредопределенныеЭлементыИнтерваловВремени();
КонецПроцедуры

Процедура CRM_ПолучитьРегЗаданияПоСценарию(Источник, Сценарий, АдресРасписания, Включено) Экспорт
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
		ПолучитьРегЗаданияПоСценарию(Источник, Сценарий, АдресРасписания, Включено);
КонецПроцедуры

Процедура CRM_ПолучитьРегЗаданияПоСценариюЛидогенерация(Ссылка, Источник, АдресРасписания, Включено) Экспорт
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
		ПолучитьРегЗаданияПоСценариюЛидогенерация(Ссылка, Источник, АдресРасписания, Включено);
КонецПроцедуры

Процедура ВыполнитьРегламентоеЗадание(Параметр1 = Неопределено, Параметр2 = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.CRM_ЗагрузкаСквознойАналитики);

	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьСквознуюАналитику") Тогда
		CRM_СистемаСквознойАналитики.ВыполнитьРегламентоеЗадание(Параметр1, Параметр2);
	КонецЕсли;
	
КонецПроцедуры

Функция ОповещенияОбОкончанииВыполненияРегламентныхЗаданий(Параметры) Экспорт
	
	ОповещенияОбОкончанииВыполнения = Новый Массив();
	
	Попытка
		Если Параметры.ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Количество() > 0 Тогда
			Индекс = Параметры.ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Количество() - 1;
			
			УстановитьПривилегированныйРежим(Истина);
			
			Пока Индекс >= 0 Цикл
				НовыйУникальныйИдентификатор =
					Новый УникальныйИдентификатор(Параметры.ИдентификаторыФоновыхЗаданийПриРучномВыполнении[Индекс].Значение);
				Отбор = Новый Структура("УникальныйИдентификатор", НовыйУникальныйИдентификатор);
				МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
				Если МассивФоновыхЗаданий.Количество() = 1 Тогда
					МоментОкончания = МассивФоновыхЗаданий[0].Конец;
					Если ЗначениеЗаполнено(МоментОкончания) Тогда
						СтрокаОшибки = "";
						Если МассивФоновыхЗаданий[0].Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
							СтрокаОшибки = МассивФоновыхЗаданий[0].ИнформацияОбОшибке.Описание + "
							|" + МассивФоновыхЗаданий[0].ИнформацияОбОшибке.ИмяМодуля + " (" 
								+ Формат(МассивФоновыхЗаданий[0].ИнформацияОбОшибке.НомерСтроки, "ЧГ=") + ")
							|" + МассивФоновыхЗаданий[0].ИнформацияОбОшибке.ИсходнаяСтрока;
						КонецЕсли;
						
						ОповещенияОбОкончанииВыполнения.Добавить(
							Новый Структура("ПредставлениеРегламентногоЗадания, МоментОкончания, СтрокаОшибки",
								Параметры.ИдентификаторыФоновыхЗаданийПриРучномВыполнении[Индекс].Представление, МоментОкончания, СтрокаОшибки));
						
						Параметры.ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Удалить(Индекс);
					КонецЕсли;

				Иначе
					Параметры.ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Удалить(Индекс);
				КонецЕсли;
				
				Индекс = Индекс - 1;
			КонецЦикла;
			
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	  	Возврат ОповещенияОбОкончанииВыполнения;

	Исключение
		Возврат ОповещенияОбОкончанииВыполнения;
	КонецПопытки;
	
КонецФункции

Функция ЗапуститьЗаданиеВРучную(Источник) Экспорт
	
	Результат = Неопределено;
	
	НайденныеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Ключ", "" 
		+ Источник.УникальныйИдентификатор()));
	Если НайденныеЗадания.Количество() > 0 Тогда
		Результат = РегламентныеЗаданияСлужебный.ВыполнитьРегламентноеЗаданиеВручную(НайденныеЗадания[0]);
		Результат.Вставить("НаименованиеЗадания", НайденныеЗадания[0].Наименование);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция СлужебныйПользовательАвторизацияВСтрокеПодключения() Экспорт
	Возврат сфпОбщегоНазначения.сфпПодставитьПараметрыВСтроку("Usr=%1;Pwd=&quot;%2&quot;",
		 CRM_ПользователиПереопределяемый.СлужебныйПользовательСервисовЛогин(),
		 CRM_ПользователиПереопределяемый.СлужебныйПользовательСервисовПароль());
КонецФункции

// Функция - проверка наличия элементов в справочнике "CRM_ИсточникиРекламныхКампаний"
//
// Параметры:
//  Нет
// 
// Возвращаемое значение:
//  Булево - Результат выполнения функции. Истина, если элементов нет.
//
Функция ПроверитьПустоеКоличествоИсточниковАналитики() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка
	|ИЗ Справочник.CRM_ИсточникиРекламныхКампаний
	|ГДЕ НЕ ПометкаУдаления");
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции // ПроверитьПустоеКоличествоИсточниковАналитики()

// Функция - проверка наличия элементов в справочнике "Источники получения заявок"
//
// Параметры:
//  Нет
// 
// Возвращаемое значение:
//  Булево - Результат выполнения функции. Истина, если элементов нет.
//
Функция КоличествоИсточниковПолученияЛидов() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ КОЛИЧЕСТВО(Ссылка) КАК КоличествоЭлементов
	|ИЗ Справочник.CRM_ИсточникиПолученияЛидов
	|ГДЕ НЕ ПометкаУдаления");
		
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	
	Возврат РезультатЗапроса.КоличествоЭлементов;
	
КонецФункции // КоличествоИсточниковПолученияЛидов()

#Область ЗагрузкаЛидогенерация

Процедура CRM_ЗагрузкаЛидогенерации(Параметр1, Параметр2) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.CRM_ЗагрузкаЛидогенерации);

	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьСквознуюАналитику") Тогда
		CRM_СистемаСквознойАналитики.CRM_ЗагрузкаЛидогенерации(Параметр1, Параметр2);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаЛидогенерация

#Область ЗагрузкаЯндекс

Процедура ОбработкаТаблицыИтоговЗаписьВРегистрСведений(ИтоговаяТаблица, ДатаЗагрузки, Структура) Экспорт
	CRM_СистемаСквознойАналитики.ОбработкаТаблицыИтоговЗаписьВРегистрСведений(ИтоговаяТаблица, ДатаЗагрузки, Структура);
КонецПроцедуры

Функция ЗаписатьИнформациюПоСайтам(Структура) Экспорт
	Возврат CRM_СистемаСквознойАналитики.ЗаписатьИнформациюПоСайтам(Структура);
КонецФункции

#КонецОбласти // ЗагрузкаЯндекс

#Область ЗагрузкаЯндексДиректа

Функция СформироватьСтрокуJSONИзСтруктуры(Объект) Экспорт
	Возврат CRM_СистемаСквознойАналитики.СформироватьСтрокуJSONИзСтруктуры(Объект);
КонецФункции

Функция СформироватьСтрокуJSON(Объект) Экспорт
	Возврат CRM_СистемаСквознойАналитики.СформироватьСтрокуJSON(Объект);
КонецФункции

Процедура ЗапросКода(УникальныйИдентификатор, СтруктураПараметров) Экспорт
	CRM_СистемаСквознойАналитики.ЗапросКода(УникальныйИдентификатор, СтруктураПараметров);
КонецПроцедуры

// Обменивает заранее полученный код авторизации на токен. Код авторизации нужно
// предварительно поместить в реквизит обработки КодАвторизации. Полученный токен 
// записывается в реквизит Токен. Требуется для работоспособности других методов.
//
Процедура ПолучитьТокен(СтруктураПараметров) Экспорт
	CRM_СистемаСквознойАналитики.ПолучитьТокен(СтруктураПараметров);
КонецПроцедуры

Процедура ЗагрузкаЗатрат(СтруктураПараметров) Экспорт
	CRM_СистемаСквознойАналитики.ЗагрузкаЗатрат(СтруктураПараметров);
КонецПроцедуры

#КонецОбласти // ЗагрузкаЯндексДиректа

#Область ВыгрузкаДанныхПоСквознойАналитике

// Обработчик подписки "CRM_СквознаяАналитикаСостоянияЛидовПриЗаписи"
//
Процедура CRM_СквознаяАналитикаСостоянияЛидовПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("CRM_ИспользоватьСквознуюАналитику") Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникПолучения = Неопределено;
	Заявка = Неопределено;
	Статус = "";
	
	Если Источник.Отбор.Найти("Лид") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник.Отбор.Лид.Значение) <> Тип("ДокументСсылка.CRM_Заявка") Тогда
		Возврат;
	Иначе
		Заявка = Источник.Отбор.Лид.Значение;
	КонецЕсли;
	
	Если Источник.Количество() > 0 Тогда
	
		ЗаписьЛида = Источник[0];
		ИсточникПолучения = ЗаписьЛида.КаналПолучения;
		
		Если ЗначениеЗаполнено(ИсточникПолучения) Тогда
			Если ИсточникПолучения.Сценарий = Перечисления.CRM_CallTrakingСценарии.Roistat 
			 ИЛИ ИсточникПолучения.Сценарий = Перечисления.CRM_CallTrakingСценарии.Comagic
			 ИЛИ ИсточникПолучения.Сценарий = Перечисления.CRM_CallTrakingСценарии.UIS Тогда
				Если ЗаписьЛида.Состояние = Справочники.CRM_СостоянияЛидов.Отклонен Тогда
					Статус = "Canceled";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Статус <> "" Тогда
		
		// Запишем измененные данные по Заявке в регистр
		
		МенеджерЗаписи = РегистрыСведений.CRM_СквознаяАналитикаИзмененныеЗаявки.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.ИсточникАналитики = ИсточникПолучения;
		МенеджерЗаписи.ДатаИзменения	 = ТекущаяДатаСеанса();
		МенеджерЗаписи.Заявка 			 = Заявка;
		МенеджерЗаписи.Статус 			 = Статус;
		МенеджерЗаписи.Клиент			 = Заявка.Контакт;
		МенеджерЗаписи.Менеджер			 = Заявка.Ответственный;
		МенеджерЗаписи.Стоимость		 = 0;
		МенеджерЗаписи.ИсточникДанных 	 = Заявка;
		
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки "CRM_СквознаяАналитикаЗаявкаПередЗаписью"
//
Процедура CRM_СквознаяАналитикаЗаявкаПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("CRM_ИспользоватьСквознуюАналитику") Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененныеДанныеСделки = Новый Структура();
	ИсточникПолучения = Неопределено;
	Заявка = Неопределено;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Заявка") Тогда
		ИсточникПолучения = Источник.ИсточникПолучения;
		Заявка 			  = Источник.Ссылка;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Интерес") Тогда
		
		Если Не Источник.ЭтоНовый() Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	CRM_ЖурналДокументов.Объект КАК Заявка
				|ИЗ
				|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
				|ГДЕ
				|	CRM_ЖурналДокументов.CRM_Интерес = &CRM_Интерес
				|	И ТИПЗНАЧЕНИЯ(CRM_ЖурналДокументов.Объект) = ТИП(Документ.CRM_Заявка)
				|УПОРЯДОЧИТЬ ПО
				|	CRM_ЖурналДокументов.Дата УБЫВ";
			
			Запрос.УстановитьПараметр("CRM_Интерес", Источник.Ссылка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				ИсточникПолучения = Выборка.Заявка.ИсточникПолучения;
				Заявка = Выборка.Заявка;
				
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.ДокументОснование) Тогда
			Если ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.CRM_Заявка") Тогда
				ИсточникПолучения = Источник.ДокументОснование.ИсточникПолучения;
				Заявка 			  = Источник.ДокументОснование;
				
			ИначеЕсли ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
				Если ЗначениеЗаполнено(Источник.ДокументОснование.ВзаимодействиеОснование) И
					 ТипЗнч(Источник.ДокументОснование.ВзаимодействиеОснование) = Тип("ДокументСсылка.CRM_Заявка") Тогда
					ИсточникПолучения = Источник.ДокументОснование.ВзаимодействиеОснование.ИсточникПолучения;
					Заявка 			  = Источник.ДокументОснование.ВзаимодействиеОснование;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	БылиЗначимыеИзменения = Ложь;
	
	Если ЗначениеЗаполнено(ИсточникПолучения) И НЕ ИсточникПолучения.ПометкаУдаления Тогда
		Если ИсточникПолучения.Сценарий = Перечисления.CRM_CallTrakingСценарии.Roistat 
		 ИЛИ ИсточникПолучения.Сценарий = Перечисления.CRM_CallTrakingСценарии.Comagic
		 ИЛИ ИсточникПолучения.Сценарий = Перечисления.CRM_CallTrakingСценарии.UIS Тогда
			
			Если ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Заявка") Тогда
				
				// Запись статуса отмены заявки выполняется в методе CRM_СквознаяАналитикаСостоянияЛидовПриЗаписи()
				
				Если Источник.ЭтоНовый() // Запись статуса новой Заявки
				 ИЛИ Источник.Ответственный <> Источник.Ссылка.Ответственный
				 ИЛИ Источник.Контакт <> Источник.Ссылка.Контакт Тогда
					БылиЗначимыеИзменения = Истина;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Интерес") Тогда
				
				Если Источник.СостояниеИнтереса <> Источник.Ссылка.СостояниеИнтереса 
				 ИЛИ Источник.Ответственный <> Источник.Ссылка.Ответственный
				 ИЛИ Источник.ОжидаемаяВыручка <> Источник.Ссылка.ОжидаемаяВыручка Тогда
					БылиЗначимыеИзменения = Истина;
				КонецЕсли;
				
				// Проверка смены Клиента(сначала проверяем Потенциального клиента, потом Партнера)
				Если Источник.ПотенциальныйКлиент <> Источник.Ссылка.ПотенциальныйКлиент Тогда
					БылиЗначимыеИзменения = Истина;
				КонецЕсли;
				Если Источник.Партнер <> Источник.Ссылка.Партнер Тогда
					БылиЗначимыеИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если БылиЗначимыеИзменения И Не Заявка = Неопределено Тогда
			Если ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Заявка") Тогда
				ИзмененныеДанныеСделки.Вставить("Статус", 	 "InWork");
				ИзмененныеДанныеСделки.Вставить("Менеджер",  Источник.Ответственный);
				ИзмененныеДанныеСделки.Вставить("Клиент", 	 Источник.Контакт);
				ИзмененныеДанныеСделки.Вставить("Стоимость", 0);
			
			ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Интерес") Тогда
				ВидСостояния = Источник.СостояниеИнтереса.ВидСостояния;
				Если ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение Тогда
					ИзмененныеДанныеСделки.Вставить("Статус", "Canceled");
				ИначеЕсли ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение Тогда
					ИзмененныеДанныеСделки.Вставить("Статус", "Paid");
				Иначе
					ИзмененныеДанныеСделки.Вставить("Статус", "InWork");
				КонецЕсли;
				Клиент = ?(ЗначениеЗаполнено(Источник.Партнер), Источник.Партнер, Источник.ПотенциальныйКлиент);
				ИзмененныеДанныеСделки.Вставить("Клиент",	 Клиент);
				ИзмененныеДанныеСделки.Вставить("Менеджер",  Источник.Ответственный);
				ИзмененныеДанныеСделки.Вставить("Стоимость", Источник.ОжидаемаяВыручка);
			КонецЕсли;
			
			ИзмененныеДанныеСделки.Вставить("ИсточникАналитики", ИсточникПолучения);
			ИзмененныеДанныеСделки.Вставить("Заявка", Заявка);
			Источник.ДополнительныеСвойства.Вставить("ИзмененныеДанныеСделки", ИзмененныеДанныеСделки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки "CRM_СквознаяАналитикаЗаявкаПриЗаписи"
//
Процедура CRM_СквознаяАналитикаЗаявкаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ИзмененныеДанныеСделки") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("CRM_ИспользоватьСквознуюАналитику") Тогда
		Возврат;
	КонецЕсли;
	
	// Запишем измененные данные по Заявке в регистр
	ИзмененныеДанныеСделки = Источник.ДополнительныеСвойства.ИзмененныеДанныеСделки;
	
	Если НЕ ЗначениеЗаполнено(ИзмененныеДанныеСделки.Заявка) Тогда
		// Значит это первая запись документа "CRM_Заявка"
		ИзмененныеДанныеСделки.Заявка = Источник.Ссылка;
	КонецЕсли;
	
	Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.CRM_Заявка") Тогда
		// Если по Заявке уже есть записи с Интересом, то саму Заявку уже не обрабатываем
		НаборЗаписей = РегистрыСведений.CRM_СквознаяАналитикаИзмененныеЗаявки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИсточникАналитики.Установить(ИзмененныеДанныеСделки.ИсточникАналитики);
		НаборЗаписей.Отбор.Заявка.Установить(ИзмененныеДанныеСделки.Заявка);
		НаборЗаписей.Прочитать();
		ТаблицаЗаписей = НаборЗаписей.Выгрузить(, "ИсточникДанных");
		Для каждого Строка Из ТаблицаЗаписей Цикл
			Если ТипЗнч(Строка.ИсточникДанных) = Тип("ДокументСсылка.CRM_Интерес") Тогда
				Возврат;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.CRM_СквознаяАналитикаИзмененныеЗаявки.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИсточникАналитики = ИзмененныеДанныеСделки.ИсточникАналитики;
	МенеджерЗаписи.ДатаИзменения	 = ТекущаяДатаСеанса();
	МенеджерЗаписи.Заявка 			 = ИзмененныеДанныеСделки.Заявка;
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ИзмененныеДанныеСделки);
	МенеджерЗаписи.ИсточникДанных 	 = Источник.Ссылка;
	МенеджерЗаписи.Статус = ?(ПустаяСтрока(МенеджерЗаписи.Статус), "InWork", МенеджерЗаписи.Статус);
	
	МенеджерЗаписи.Записать();
	
	Источник.ДополнительныеСвойства.Удалить("ИзмененныеДанныеСделки");
	
КонецПроцедуры

#КонецОбласти // ВыгрузкаДанныхПоСквознойАналитике

#КонецОбласти // СлужебныеПроцедурыИФункции
