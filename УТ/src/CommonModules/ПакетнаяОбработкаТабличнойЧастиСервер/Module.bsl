#Область ПрограммныйИнтерфейс

// Выполняет обработку нескольких строк коллекции в соответствии с операциями, перечисленными в структуре действий.
// При выполнении метода происходит предварительное получение данных, необходимых для обработки одним запросом.
// Следует использовать когда требуется обработать некоторые строки табличной части, предварительно сформировать массив 
// строк табличной части и передавать его в параметр КоллекцияСтрок, 
// указав в параметре ТабЧасть табличную часть, к которой относятся элементы этого массива.
//
// Параметры:
//	КоллекцияСтрок - Массив Из ДанныеФормыЭлементКоллекции, СтрокаТаблицыЗначений- Коллекция, которая обходится в 
//					цикле и является источником данных для обработки, на основании этой коллекция сформируется 
//					временная таблица втИсточникДанных. Данные полученной временной таблицы следует использовать для описания
//					текстов запроса получения данных, необходимых для обработки всех обрабатываемых строк в методе
//					ДополнитьТекстыЗапросовИсточниковДанных. Коллекция должна содержать в себе все необходимые колонки,
//					данные из которых будут участвовать в запросах получения данных.
// СтруктураДействий - Структура - Действия, которые нужно произвести над строкой. В ключах хранится наименование действия, 
//					в значениях - произвольные данные, необходимые для обработки.
//	ТабЧасть - ДанныеФормыКоллекция - Табличная часть, к которой относятся обрабатываемые строки из параметра 
//				КоллекцияСтрок. Используется для определения состава колонок при формировании временной таблицы в 
//				запросе получения данных по выполняемым действиям по массиву обрабатываемых строк.
//	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ОбработатьСтрокиТЧ(КоллекцияСтрок, СтруктураДействий, ТабЧасть, КэшированныеЗначения = Неопределено) Экспорт
	
	#Область ПроверкаПараметров 
	
	Если Не КоллекцияСтрок.Количество() Или Не СтруктураДействий.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Если КэшированныеЗначения = Неопределено 
		Или Не КэшированныеЗначения.Количество() Тогда
			КэшированныеЗначения = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	// В переданном массиве строк к обработке могут оказаться строки, которые уже не существуют в
	// коллекции, к которой они принадлежат, удаляем такие строки из обрабатываемого массива строк
	Если Не КэшированныеЗначения.Свойство("ОбработкаОднойСтроки") Тогда
		УдаляемыеСтроки = Новый Массив;
		Для Каждого Строка Из КоллекцияСтрок Цикл
			Если ТабЧасть.Индекс(Строка) = -1 Тогда
				УдаляемыеСтроки.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Пока КоллекцияСтрок.Найти(УдаляемаяСтрока) <> Неопределено Цикл
				КоллекцияСтрок.Удалить(КоллекцияСтрок.Найти(УдаляемаяСтрока));
			КонецЦикла;
		КонецЦикла;
				
		Если Не КоллекцияСтрок.Количество() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область ИнициализацияОбработкиСтрокКоллекции
	
	КэшированныеЗначения.Вставить("ОбработкаКоллекции");
	
	Если Не КэшированныеЗначения.Свойство("ЧитаемыеПоля") Тогда
		ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПоляСтрокиПоДействиям(
			КоллекцияСтрок[0], СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
	ЗависимыеОбработчики = ЗависимыеОбработчикиСтрокТЧ(СтруктураДействий, КэшированныеЗначения);
	ЕстьЗависимыеОбработчики = ЗависимыеОбработчики.Количество();
	
	Параметры = Новый Структура();
	Параметры.Вставить("СтруктураДействий", СтруктураДействий);
	
	#КонецОбласти
	
	#Область ОбработкаСтрокКоллекции
	
	КоличествоСтрок = КоллекцияСтрок.Количество();
	Счетчик = 0;
	ОбрабатываемаяКоллекция = Неопределено;
	
	Пока Счетчик < КоличествоСтрок Цикл
		
		СчетчикТекущаяПорция = 0;
		ТекущаяПорция = Новый Массив;
		
		Пока СчетчикТекущаяПорция < 1000
			И Счетчик < КоличествоСтрок Цикл
			
				ТекущаяПорция.Добавить(КоллекцияСтрок[Счетчик]);
				СчетчикТекущаяПорция = СчетчикТекущаяПорция + 1;
				Счетчик = Счетчик + 1;
					
		КонецЦикла;
			
		КоличествоСтрокВПорции = ТекущаяПорция.Количество();
			
		КэшированныеЗначения.Удалить("ИнициализацияЗавершена");
		Параметры.Вставить("КоллекцияСтрок", ТекущаяПорция);
		ПерваяСтрокаКоллекции = ТекущаяПорция[0];
		
		Если Не ЕстьЗависимыеОбработчики Тогда
			
			КэшированныеЗначения.Вставить("ЕстьЗависимыеОбработчики", Ложь);
			
			ОбрабатываемаяКоллекция = ПолучитьТаблицуПоКоллекции(ТекущаяПорция, ТабЧасть, КэшированныеЗначения);
		
			ИнициализироватьПакетнуюОбработку(ПерваяСтрокаКоллекции,
				СтруктураДействий,
				КэшированныеЗначения,
				ОбрабатываемаяКоллекция,
				ПерваяСтрокаКоллекции);
			
			ВыполнитьКодОбработкиСтрок(Параметры, КэшированныеЗначения, КоличествоСтрокВПорции);
			
		Иначе
			
			КэшированныеЗначения.Вставить("ЕстьЗависимыеОбработчики", Истина);
			
			// Формирование очереди выполнения обработчиков в соответствии с описанными зависимостями
			СтруктураДействийПорядок = Новый Структура();
			
			Для Каждого Обработчик Из ЗависимыеОбработчики Цикл
				СтруктураДействийПорядок.Вставить(Обработчик.Ключ, Обработчик.Значение.Очередь);
			КонецЦикла;
			
			// Пока не достигнута последняя очередь формируется список действий.
			// Выполняется запрос получения данных только для них.
			ТекущаяОчередь = 1;
			ОбработкаЗавершена = Ложь;
			
			Пока Не ОбработкаЗавершена Цикл
				
				ОбработкаЗавершена = Истина;
				ПропускаемыеДействия = Новый Структура();
				
				Для Каждого ДействиеСПорядком Из СтруктураДействийПорядок Цикл
					Если ДействиеСПорядком.Значение = ТекущаяОчередь Тогда
						ОбработкаЗавершена = Ложь;
					Иначе
						ПропускаемыеДействия.Вставить(ДействиеСПорядком.Ключ, СтруктураДействий[ДействиеСПорядком.Ключ]);
					КонецЕсли;
				КонецЦикла;
				
				ТекущаяОчередь = ТекущаяОчередь + 1;
				
				Если ОбработкаЗавершена
					И ПропускаемыеДействия.Количество() = СтруктураДействийПорядок.Количество() Тогда
					Прервать;
				КонецЕсли;
				
				КэшированныеЗначения.Вставить("ПропускаемыеДействия", ПропускаемыеДействия);
				КэшированныеЗначения.Удалить("ИнициализацияЗавершена");
				
				// Чтобы вторые и последующие очереди обрабатывали результат выполнения действий предыдущих
				// очередей требуется пересоздавать таблицу значений по обрабатываемой коллекции
				// и передавать результат обработки во временную таблицу втИсточникДанных
				Если КэшированныеЗначения.Свойство("ОбработкаОднойСтроки") Тогда
					Если ОбрабатываемаяКоллекция <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(ОбрабатываемаяКоллекция[0], ПерваяСтрокаКоллекции);
					Иначе
						ОбрабатываемаяКоллекция = ТаблицаЗначенийПоТекущейСтроке(
							ПерваяСтрокаКоллекции,
							СтруктураДействий,
							КэшированныеЗначения);
					КонецЕсли;
				Иначе
					ОбрабатываемаяКоллекция = ПолучитьТаблицуПоКоллекции(
						ТекущаяПорция, ТабЧасть, КэшированныеЗначения);
				КонецЕсли;
					
				ИнициализироватьПакетнуюОбработку(
					ПерваяСтрокаКоллекции,
					СтруктураДействий,
					КэшированныеЗначения,
					ОбрабатываемаяКоллекция,
					ПерваяСтрокаКоллекции);
			
				ВыполнитьКодОбработкиСтрок(Параметры, КэшированныеЗначения, КоличествоСтрокВПорции);
					
				Если КэшированныеЗначения.Свойство("ОбработкаОднойСтроки") Тогда
					Для Каждого Колонка Из КэшированныеЗначения.КолонкиКоллекции Цикл
						Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПерваяСтрокаКоллекции, Колонка.Имя)
							И ПерваяСтрокаКоллекции[Колонка.Имя] = Null Тогда
								ПерваяСтрокаКоллекции[Колонка.Имя] = Неопределено;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	#КонецОбласти
	
	#Область ОчисткаСлужебныхДанных
	
	УдалитьНеподдерживаемыеТипыНаКлиенте(КэшированныеЗначения);
	ОчиститьСлужебныйКэш(КэшированныеЗначения);
	ОчиститьПарметрыДействий(СтруктураДействий);
	
	Если ТипЗнч(ТабЧасть) = Тип("ТаблицаЗначений")
		И ТабЧасть.Колонки.Найти("ИдентификаторСтрокиВТ") <> Неопределено Тогда
			ТабЧасть.Колонки.Удалить("ИдентификаторСтрокиВТ");
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

// Выполняет обработку одной строки коллекции в соответствии с операциями, перечисленными в структуре действий.
// При выполнении метода происходит предварительное получение данных, необходимых для обработки одним запросом.
// Следует применять в тех случаях, когда обработка происходит не в цикле, например при заполнении Ставки НДС при
// изменении номенклатуры в табличной части.
//
// Параметры:
//	ТекущаяСтрока - Структура, ДанныеФормыЭлементКоллекции, СтрокаТаблицыЗначений, ДокументОбъект, ФормаКлиентскогоПриложения -
//					данные которы требуется обработать в соответствии со структурой дейтсивй.
//	СтруктураДействий - см. ОбработатьСтрокиТЧ.СтруктураДействий.
//	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//	Коллекция -см. ОбработатьСтрокиТЧ.ТабЧасть.
//
Процедура ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, Коллекция = Неопределено) Экспорт
	
	Если Не СтруктураДействий.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Если КэшированныеЗначения = Неопределено 
		Или Не КэшированныеЗначения.Количество() Тогда
			КэшированныеЗначения = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
		
	Если ТипЗнч(ТекущаяСтрока) = Тип("Структура") И Не ТекущаяСтрока.Свойство("НомерСтроки") Тогда 
		УдалятьНомерСтроки = Истина
	Иначе
		УдалятьНомерСтроки = Ложь;
	КонецЕсли;
	
	КэшированныеЗначения.Вставить("ОбработкаОднойСтроки");
	
	ТЗСОднойСтрокой = ТаблицаЗначенийПоТекущейСтроке(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	СтрокаВМассиве = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущаяСтрока);
	
	ОбработатьСтрокиТЧ(СтрокаВМассиве, СтруктураДействий, ТЗСОднойСтрокой, КэшированныеЗначения);
	УдалитьНеподдерживаемыеТипыНаКлиенте(КэшированныеЗначения);
	КэшированныеЗначения.Удалить("ИнициализацияЗавершена");
	КэшированныеЗначения.Удалить("МетодыКВыполнению");
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("Структура") Тогда
		ТекущаяСтрока.Удалить("ИдентификаторСтрокиВТ");
	КонецЕсли;
	Если УдалятьНомерСтроки Тогда
		ТекущаяСтрока.Удалить("НомерСтроки");
	КонецЕсли;

КонецПроцедуры

// Выполняет обработку всей коллекции в соответствии с операциями, перечисленными в структуре действий.
// При выполнении метода происходит предварительное получение данных, необходимых для обработки одним запросом.
//
// Параметры:
//	ТабличнаяЧасть - ДанныеФормыКоллекция, ТаблицаЗначений, ТабличнаяЧасть - Обрабатываемая коллекция.
//	СтруктураДействий - см. ОбработатьСтрокиТЧ.СтруктураДействий.
//	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ОбработатьТЧ(ТабличнаяЧасть, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	ОбработатьСтрокиТЧ(ТабличнаяЧасть, СтруктураДействий, ТабличнаяЧасть, КэшированныеЗначения);
	
КонецПроцедуры

// Добавляет описание текста запросов для получения всех необходимых данных, нужных для обработки строк табличной части.
//
// Параметры:
//	ОписаниеЗапроса - см. ОписаниеЗапроса
//	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//	
Процедура ДобавитьИсточникДанных(ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Если Не КэшированныеЗначения.Свойство("ВнешнееОписаниеЗапроса") Тогда
		КэшированныеЗначения.Вставить("ВнешнееОписаниеЗапроса", ОписаниеЗапроса());
	КонецЕсли;
	
	Для Каждого ТекстЗапроса Из ОписаниеЗапроса.ТекстыЗапросов Цикл
		КэшированныеЗначения.ВнешнееОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса.Значение, ТекстЗапроса.Представление);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(КэшированныеЗначения.ВнешнееОписаниеЗапроса.ПараметрыЗапроса, ОписаниеЗапроса.ПараметрыЗапроса);
	
КонецПроцедуры

// Проверяет наличие колонки в обрабатываемой коллекции.
//
// Параметры:
//	ИмяКолонки - Строка - Имя колонки, наличие которой требуется проверить.
//	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
// Возвращаемое значение:
//  Булево - Признак наличия колонки в обрабатываемой коллекции.
//
Функция ЕстьКолонкаВИсточникеДанных(ИмяКолонки, КэшированныеЗначения) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
				КэшированныеЗначения.ТекущаяСтрокаВКоллекции,
				ИмяКолонки);
	
КонецФункции

// Возвращает тип колонки в обрабатываемой коллекции.
//
// Параметры:
//	ИмяКолонки - Строка - Имя колонки, которая будет добавлена в временную таблицу, построенную на основании всей коллекции.
//	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
// Возвращаемое значение:
//  ОписаниеТипов - ОписаниеТипов - Тип колонки в обрабатываемой коллекции.
//
Функция ТипКолонкиВИсточникеДанных(ИмяКолонки, КэшированныеЗначения) Экспорт
	
	Если ЕстьКолонкаВИсточникеДанных(ИмяКолонки, КэшированныеЗначения) Тогда
		Возврат ОбщегоНазначенияУТ.ОписаниеТиповПоТипу(ТипЗнч(КэшированныеЗначения.ТекущаяСтрокаВКоллекции[ИмяКолонки]));
	КонецЕсли;
	
КонецФункции

// Возвращает описание запроса, необходимое для получения необходимых данных для обработки строк коллекции. 
//
// Возвращаемое значение:
//	Структура:
//		* ТекстыЗапросов - СписокЗначений из Строка - Тексты запросов, результат выполнения которых вернет 
//				все необходимые данные для обработки строк. В значении следует поместить текст запроса.
//				В представлении наименование запроса, его следует передавать в параметр ИмяИсточника при использовании
//				метода ДанныеДляОбработкиСтроки.
//		* ПараметрыЗапроса - Структура - Параметры пакета запросов. В ключах структуры содержатся имена параметров,
//				которое используется в запросе, в значениях значения параметров, передаваемых в запрос.
//					* ИсточникДанных - ТаблицаЗначений - Обрабатываемая коллекция, преобразованная в таблицу значений. 
//		* ДопКолонки       - Структура - Описание дополнительных колонок.
//		* ПривилегированныйРежим - Булево - Признак необходимости установки привилегированного режима перед выполнением запроса.
//
Функция ОписаниеЗапроса() Экспорт
	
	ОписаниеЗапроса = Новый Структура();
	ОписаниеЗапроса.Вставить("ТекстыЗапросов", Новый СписокЗначений());
	ОписаниеЗапроса.Вставить("ПараметрыЗапроса", Новый Структура("ИсточникДанных"));
	ОписаниеЗапроса.Вставить("ДопКолонки", Новый Структура());
	ОписаниеЗапроса.Вставить("ПривилегированныйРежим", Ложь);
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Возвращает данные, необходимые для обработки текущей строки табличной части.
//
// Параметры:
//	ИмяИсточника - Строка - Имя таблицы в запросе, которая описана в методе ДополнитьТекстыЗапросовИсточниковДанных
//	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
// Возвращаемое значение:
//	ТаблицаЗначений, Неопределено - Результат запроса с отбором по имени запроса и текущей обрабатываемой строке:
//
Функция ДанныеДляОбработкиСтроки(ИмяИсточника, КэшированныеЗначения) Экспорт
	
	Результат = Неопределено;
	ТекущаяСтрокаВКоллекции = КэшированныеЗначения.ТекущаяСтрокаВКоллекции;
	Если КэшированныеЗначения.ДанныеДляОбработки <> Неопределено
		И КэшированныеЗначения.ДанныеДляОбработки.Свойство(ИмяИсточника) Тогда
			
			Если КэшированныеЗначения.Свойство("ОбработкаОднойСтроки") Тогда
				Результат = КэшированныеЗначения.ДанныеДляОбработки[ИмяИсточника];
			Иначе
				ПутьКИдентификаторуСтроки = КэшированныеЗначения.ПутьКИдентификаторуСтроки; 
				Если ПутьКИдентификаторуСтроки = "ПолучитьИдентификатор" Тогда
					ИдентификаторСтроки = ТекущаяСтрокаВКоллекции.ПолучитьИдентификатор();
				Иначе
					ИдентификаторСтроки = ТекущаяСтрокаВКоллекции[ПутьКИдентификаторуСтроки];
				КонецЕсли;
				
				ОтборПоСтроке = Новый Структура("ИдентификаторСтрокиВТ", Строка(ИдентификаторСтроки));
				НайденныеСтроки = КэшированныеЗначения.ДанныеДляОбработки[ИмяИсточника].Скопировать(ОтборПоСтроке);
			
				Результат = ?(НайденныеСтроки.Количество(), НайденныеСтроки, Неопределено);
			КонецЕсли;
		
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
	
		ЗначенияПолей = Новый Массив;
		Для Каждого Колонка Из КэшированныеЗначения.КолонкиКоллекции Цикл
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
					ТекущаяСтрокаВКоллекции, Колонка.Имя) Тогда
				ЗначенияПолей.Добавить(Колонка.Имя + ":	" + ТекущаяСтрокаВКоллекции[Колонка.Имя]);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеСтрокиТекстом = СтрСоединить(ЗначенияПолей, Символы.ПС);
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось получить данные при пакетной обработке строк табличной части
										|Отсутствуют данные для строки с идентификатором ""%1"" по таблице ""%2"".
										|
										|Данные обрабатываемой строки:
										|
										|%3'"),
										ИдентификаторСтроки, ИмяИсточника, ДанныеСтрокиТекстом);
		
		Если ОбщегоНазначения.РежимОтладки() Тогда
			ВызватьИсключение ТекстОшибки;
		Иначе
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Пакетная обработка строк в табличной части.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
		КонецЕсли;
	
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Проверяет необходимость выполнения действия со строкой, исходя из наличия действия в структуре действий и зависимости
// обработчиков. Устанавливает значения переданных параметров из действия в переменную Параметр.
// 
// Параметры:
//  ИмяДействия - Строка - Имя действия, которое требуется выполнить над строкой, например "ЗаполнитьСтавкуНДС".
//  СтруктураДействий - см. ОбработатьСтрокиТЧ.СтруктураДействий.
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//  Параметры - Произвольный - Дополнительные параметры, необходимые для обработки строки текущим действием.
// 
// Возвращаемое значение:
//  Булево - Признак необходимости выполнения действия.
//
Функция ТребуетсяВыполнитьДействие(ИмяДействия, СтруктураДействий, КэшированныеЗначения, Параметры = Неопределено) Экспорт
	
	Действия = СтрРазделить(ИмяДействия, ",");
		
	Для Каждого Действие Из Действия Цикл
		Если СтруктураДействий.Свойство(Действие, Параметры) Тогда
			Если КэшированныеЗначения.Свойство("ПропускаемыеДействия") Тогда
				Если Не КэшированныеЗначения.ПропускаемыеДействия.Свойство(Действие) Тогда
					Возврат Истина;
				КонецЕсли;
			Иначе
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
		
КонецФункции

// Описание дополнительных колонок, которые будут заполнены программно. Данные в колонках требуется для более удобной
// обработки строк, нежели переноса логики на сторону СУБД.
//
// Параметры:
//  ОписаниеЗапроса - см. ОписаниеЗапроса
//  ИмяКолонки - Строка - Имя колонки, которую требуется добавить в временную таблицу с обрабатываемой коллекцией.
//  ОписаниеТипа - ОписаниеТипов - Тип добавляемой колонки.
//
Процедура ДополнитьКолонкиИсточникаДанных(ОписаниеЗапроса, ИмяКолонки, ОписаниеТипа) Экспорт
	
	ОписаниеЗапроса.ДопКолонки.Вставить(ИмяКолонки, ОписаниеТипа);

КонецПроцедуры

// Процедура - Проверяет, что ключ заполнения служебных реквизитов поддерживается
//
// Параметры:
//  КлючДействия - Строка	 - проверяемый ключ.
// 
// Возвращаемое значение:
//  Булево - Ключ заполнения служебных реквизитов поддерживается
Функция КлючЗаполненияСлужебныхРеквизитовПоддерживается(КлючДействия) Экспорт
	Возврат ШаблонПоляВыборкиПоКлючуДействия(КлючДействия, Истина) <> Неопределено;
КонецФункции

// Преобразует строку коллекции в табличную часть.
//
// Параметры:
//  СтрокаКоллекции - СтрокаТаблицыЗначений, ДанныеФормыЭлементКоллекции
//  СтруктураДействий - см. ОбработатьСтрокиТЧ.СтруктураДействий
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ТаблицаЗначенийПоТекущейСтроке(СтрокаКоллекции, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если Не ТипЗнч(СтрокаКоллекции) = Тип("Структура") Тогда
		СтрокаСтруктурой =
			ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьТекущуюСтрокуСтруктурой(
				СтрокаКоллекции, СтруктураДействий, КэшированныеЗначения);
	Иначе
		СтрокаСтруктурой = СтрокаКоллекции;
		Если Не СтрокаСтруктурой.Свойство("НомерСтроки") Тогда
			СтрокаСтруктурой.Вставить("НомерСтроки", 0);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Свойство Из СтрокаСтруктурой Цикл
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаКоллекции, Свойство.Ключ)
				И Свойство.Ключ <> "НомерСтроки" Тогда
					СтрокаСтруктурой.Удалить(Свойство.Ключ);
		КонецЕсли;;
	КонецЦикла;
		
	ТаблицаИсточник = Новый ТаблицаЗначений();
	
	ТипДляЗначенияНеопределено = Новый Массив;
	ТипДляЗначенияНеопределено.Добавить(тип("Число"));
	ТипДляЗначенияНеопределено.Добавить(тип("Булево"));
	
	ОписаниеТипов = Новый ОписаниеТипов(ТипДляЗначенияНеопределено);
	
	Для Каждого Свойство Из СтрокаСтруктурой Цикл
		Если Не Свойство.Значение = Неопределено Тогда
			Если ТипЗнч(Свойство.Значение) = Тип("Строка") Тогда
				ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка",,,,
					Новый КвалификаторыСтроки(1024, ДопустимаяДлина.Переменная));
				ТаблицаИсточник.Колонки.Добавить(
					Свойство.Ключ,
					ОписаниеТипаСтрока);
			Иначе
				ТаблицаИсточник.Колонки.Добавить(
					Свойство.Ключ,
					ОбщегоНазначенияУТ.ОписаниеТиповПоТипу(ТипЗнч(Свойство.Значение)));
			КонецЕсли;
		Иначе
			ТаблицаИсточник.Колонки.Добавить(
				Свойство.Ключ,
				ОписаниеТипов);
		КонецЕсли;
	КонецЦикла;
		
	ЗаполнитьЗначенияСвойств(ТаблицаИсточник.Добавить(), СтрокаСтруктурой);
	
	Возврат ТаблицаИсточник;
	
КонецФункции

// Очистить служебный кэш.
// 
// Параметры:
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ОчиститьСлужебныйКэш(КэшированныеЗначения) Экспорт
	
	КэшКУдалению = Новый Массив(); 
	КэшКУдалению.Добавить("ДанныеДляОбработки");
	КэшКУдалению.Добавить("ЕстьЗависимыеОбработчики");
	КэшКУдалению.Добавить("ИзменяемыеПоля");
	КэшКУдалению.Добавить("ИнициализацияЗавершена");
	КэшКУдалению.Добавить("КодОбработкиОднойСтроки");
	КэшКУдалению.Добавить("КоллекцияСКоллекцияССоставнымТипом");
	КэшКУдалению.Добавить("КолонкиКоллекции");
	КэшКУдалению.Добавить("МетодыКВыполнению");
	КэшКУдалению.Добавить("НеподдерживаемыеПоляВЗапросе");
	КэшКУдалению.Добавить("ОбрабатываетсяТабличнаяЧасть");
	КэшКУдалению.Добавить("ОбработкаКоллекции");
	КэшКУдалению.Добавить("ОбработкаОднойСтроки");
	КэшКУдалению.Добавить("ОписаниеПолейПоДействию");
	КэшКУдалению.Добавить("ПропускаемыеДействия");
	КэшКУдалению.Добавить("СтруктураПолейТЧПолная");
	КэшКУдалению.Добавить("ТекущаяСтрока");
	КэшКУдалению.Добавить("ТекущаяСтрокаВКоллекции");
	КэшКУдалению.Добавить("ЧитаемыеПоля");

	Для Каждого Кэш Из КэшКУдалению Цикл
		КэшированныеЗначения.Удалить(Кэш);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обновляет параметры для вызова методов обработки строки табличной части.
// 
// Параметры:
//  Параметры - Структура:
//  	* ТекущаяСтрока - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокиТЧ
//  	* КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//  	* Счетчик - Число - Порядковый номер обрабатываемой строки в коллекции.
//
Процедура ОбновитьТекущуюСтроку(Параметры) Экспорт
	
	Параметры.Вставить("ТекущаяСтрока", Параметры.КоллекцияСтрок[Параметры.Счетчик]);
	Параметры.КэшированныеЗначения.Вставить("ТекущаяСтрокаВКоллекции", Параметры.ТекущаяСтрока);
	Параметры.Счетчик = Параметры.Счетчик + 1;
	
КонецПроцедуры

#Область ОбработчикиСтрок

#Область ПроцедурыИФункцииЗаполненияСлужебныхРеквизитовПоНоменклатуре

// Преобразует структуру действий для использования в ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ(),
// чтобы рассчитывать нужные поля одним запросом по всей коллекции.
//
// Параметры:
// 		СтруктураДействий - Структура - Структура с действиями по получению служебных реквизитов.
//
Процедура НормализоватьДействия(СтруктураДействий) Экспорт
	
	Суффикс = Неопределено;
	Если СтруктураДействий.Свойство("ПересчитатьВесОбъем", Суффикс)
		И ТипЗнч(Суффикс) <> Тип("Структура") Тогда
		КоличествоУпаковок = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.КоличествоССуффиксом(Суффикс).КоличествоУпаковок;
		СтруктураДействий.Вставить("ПересчитатьВесОбъем",
									Новый Структура(КоличествоУпаковок + ",Номенклатура,Упаковка", "Вес,Объем"));
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст запроса выборки по служебным реквизитам номенклатуры
//
// Параметры:
// 		СтруктураДействий - Структура - Структура с именами служебных реквизитов в качестве полей
// 		СтруктураДопДанных - Структура - Структура с дополнительными данными.
//
// Возвращаемое значение:
// 		Строка - Строка с текстом запроса.
//
Функция ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ(СтруктураДействий, СтруктураДопДанных, ПакетнаяОбработка = Ложь) Экспорт
	
	ШаблонЗапроса = "";
	
	// Формирование шаблона запроса временной таблицы по номенклатуре
	Если ПакетнаяОбработка Тогда
		ШаблонЗапроса = "
		|ВЫБРАТЬ
		|	Таблица.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ, &ТекстВЫБРАТЬ
		|ПОМЕСТИТЬ втТаблицаНоменклатуры
		|ИЗ
		|	&КоллекцияДанных КАК Таблица;";
	Иначе
		ШаблонЗапроса = "
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
		|	ИСТИНА КАК ИдентификаторСтрокиВТ, &ТекстВЫБРАТЬ
		|ПОМЕСТИТЬ втТаблицаНоменклатуры
		|ИЗ
		|	&КоллекцияДанных КАК Таблица;";
	КонецЕсли;
	
	ШаблонВЫБРАТЬ = ",
	|	Таблица.%ИмяПоля% КАК %ИмяПоля%";
	ШаблонВЫБРАТЬНоменклатура = ",
	|	ВЫРАЗИТЬ(Таблица.%ИмяПоля% КАК Справочник.Номенклатура) КАК %ИмяПоля%";
	
	ТекстВЫБРАТЬ = "";
	Для Каждого Поле Из СтруктураДопДанных.СтруктураИсточников Цикл
		Если Поле.Ключ = "Упаковка" Тогда
			ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + ",
			|	ВЫРАЗИТЬ(Таблица.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка";
		ИначеЕсли Поле.Ключ = "Назначение" Тогда
			ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + ",
			|	ВЫРАЗИТЬ(Таблица.Назначение КАК Справочник.Назначения) КАК Назначение";
		ИначеЕсли СтрНачинаетсяС(Поле.Ключ, "Номенклатура") Тогда
			ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + СтрЗаменить(ШаблонВЫБРАТЬНоменклатура, "%ИмяПоля%", Поле.Ключ);
		Иначе
			ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + СтрЗаменить(ШаблонВЫБРАТЬ, "%ИмяПоля%", Поле.Ключ);
		КонецЕсли;
	КонецЦикла;
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, ", &ТекстВЫБРАТЬ", ТекстВЫБРАТЬ);
	
	// Шаблон запроса основной выборки
	Если ПакетнаяОбработка Тогда
		ШаблонЗапроса = ШаблонЗапроса + "
		|///////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТаблицаНоменклатуры.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ, &ТекстВЫБРАТЬ
		|ИЗ
		|	втТаблицаНоменклатуры КАК втТаблицаНоменклатуры";
	Иначе
		
		ШаблонЗапроса = ШаблонЗапроса + "
		|///////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТаблицаНоменклатуры.НомерСтроки КАК НомерСтроки, 
		|	втТаблицаНоменклатуры.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ, &ТекстВЫБРАТЬ
		|ИЗ
		|	втТаблицаНоменклатуры КАК втТаблицаНоменклатуры
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	КонецЕсли;
	
	// Формирование полей запроса основной выборки
	ТекстВЫБРАТЬ = "";
	Для Каждого Действие Из СтруктураДействий Цикл
		Если Не ДействиеИсключение(Действие) Тогда
			ШаблонВЫБРАТЬ = ШаблонПоляВыборкиПоКлючуДействия(Действие.Ключ);
			Если ШаблонВЫБРАТЬ <> Неопределено Тогда
				Для Каждого Поле Из Действие.Значение Цикл
					Если ЗначениеЗаполнено(Поле.Значение) Тогда
						ТекстВыбрать = ТекстВЫБРАТЬ + СтрЗаменить(СтрЗаменить(ШаблонВЫБРАТЬ, "%ЗначениеЗамены%", Поле.Значение), "%Ключ%", Поле.Ключ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		 КонецЕсли;
	КонецЦикла;
	
	Возврат СтрЗаменить(ШаблонЗапроса, ", &ТекстВЫБРАТЬ", ТекстВЫБРАТЬ);
	
КонецФункции

// Возвращает структуру дополнительной информации получения служебных реквизитов
//
// Параметры:
// 		СтруктураДействий - Структура - Структура с действиями по получения служебных реквизитов.
//
// Возвращаемое значение:
// 		Структура
//
Функция ОписаниеДополнительнойИнформации(СтруктураДействий) Экспорт
	
	СтруктураИсточников = Новый Структура;
	СтрокаРеквизитовЗаполнения = "";
	СтрокаРеквизитовВыгрузки = "";
	
	Для Каждого Действие Из СтруктураДействий Цикл
		Если ЗначениеЗаполнено(Действие.Значение) 
				И Не ДействиеИсключение(Действие) Тогда
			Для Каждого Поле Из Действие.Значение Цикл
				Если Не СтруктураИсточников.Свойство(Поле.Ключ) Тогда
					СтруктураИсточников.Вставить(Поле.Ключ);
					СтрокаРеквизитовВыгрузки = СтрокаРеквизитовВыгрузки + ", " + Поле.Ключ;
				КонецЕсли;
				Если ЗначениеЗаполнено(Поле.Значение) Тогда
					СтрокаРеквизитовЗаполнения = СтрокаРеквизитовЗаполнения + ", " + Поле.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура(
		"СтруктураИсточников, РеквизитыЗаполнения, РеквизитыВыгрузки",
		СтруктураИсточников,
		Сред(СтрокаРеквизитовЗаполнения, 2), // Отрезать первый символ строки, т.к. это запятая
		СтрокаРеквизитовВыгрузки);
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьКодТНВЭДПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем НалогообложениеНДС;

	СтруктураДействий.Свойство("ЗаполнитьКодТНВЭД", НалогообложениеНДС);
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт 
		ИЛИ НалогообложениеНДС = Неопределено Тогда
		ТекущаяСтрока.КодТНВЭД = ДанныеДляОбработкиСтроки(
									"КодТНВЭДПоНоменклатуре", КэшированныеЗначения)[0].КодТНВЭД;
	Иначе
		ТекущаяСтрока.КодТНВЭД = Справочники.КлассификаторТНВЭД.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно(Строка, Действия, КэшированныеЗначения) Экспорт
	
	ДанныеДляОбработки = ДанныеДляОбработкиСтроки("НоменклатураПродаваемаяСовместно", КэшированныеЗначения); 
	Если Не ДанныеДляОбработки = Неопределено Тогда
		Строка.ИндексСовместноПродаваемыеТовары = ?(ДанныеДляОбработки[0].НоменклатураПродаетсяСовместно, 1, 0);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтавкуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	Перем УказаннаяСтавкаНДС;
	
	СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС", СтруктураПараметровДействия);
		
	Если СтруктураПараметровДействия.Свойство("ХозяйственнаяОперация") Тогда
		ХозяйственнаяОперация = СтруктураПараметровДействия.ХозяйственнаяОперация;
	Иначе
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПустаяСсылка();
	КонецЕсли;
	
	Если ПродажиСервер.ХозяйственнаяОперацияСоСтавкойБезНДС(ХозяйственнаяОперация) Тогда
		ТекущаяСтрока.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
	Иначе
		НалогообложениеНДС = СтруктураПараметровДействия.НалогообложениеНДС;
		Дата = СтруктураПараметровДействия.Дата;
		КэшированныеЗначения.Вставить("ОрганизацияДляСтавкиНДС", СтруктураПараметровДействия.Организация);

		Номенклатура = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Номенклатура") Тогда
			Номенклатура = ТекущаяСтрока.Номенклатура;
		КонецЕсли;
		
		Если СтруктураПараметровДействия.Свойство("ПоДатеОтгрузки") 
			И СтруктураПараметровДействия.ПоДатеОтгрузки
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ДатаОтгрузки")
			И ЗначениеЗаполнено(ТекущаяСтрока.ДатаОтгрузки) Тогда
			Дата = ТекущаяСтрока.ДатаОтгрузки;
		КонецЕсли;
		
		СтруктураПараметровДействия.Свойство("УказаннаяСтавкаНДС", УказаннаяСтавкаНДС);
		ТекущаяСтрока.СтавкаНДС = УчетНДСУП.СтавкаНДСПоНоменклатуреИНалогообложениюПакетно(
			Номенклатура, НалогообложениеНДС, Дата, КэшированныеЗначения, УказаннаяСтавкаНДС);
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.СтавкаНДС)
				И ЗначениеЗаполнено(УказаннаяСтавкаНДС) Тогда

				Если КэшированныеЗначения.АктуальныеСтавкиНДС = Неопределено Тогда
					ЗаполнитьАктуальныеСтавкиНДСКэшированныеЗначения(СтруктураПараметровДействия, КэшированныеЗначения);
				КонецЕсли;
				АктуальныеСтавкиНДС = КэшированныеЗначения.АктуальныеСтавкиНДС; //Массив
				Если АктуальныеСтавкиНДС.Найти(УказаннаяСтавкаНДС) = Неопределено Тогда
					Возврат;
				КонецЕсли;
				ТекущаяСтрока.СтавкаНДС = УказаннаяСтавкаНДС;

		КонецЕсли;

		Если Не ЗначениеЗаполнено(ТекущаяСтрока.СтавкаНДС)
			И ЗначениеЗаполнено(УказаннаяСтавкаНДС) Тогда

			Если КэшированныеЗначения.АктуальныеСтавкиНДС = Неопределено Тогда
				ЗаполнитьАктуальныеСтавкиНДСКэшированныеЗначения(СтруктураПараметровДействия, КэшированныеЗначения);
			КонецЕсли;
			АктуальныеСтавкиНДС = КэшированныеЗначения.АктуальныеСтавкиНДС; //Массив
			Если АктуальныеСтавкиНДС.Найти(УказаннаяСтавкаНДС) = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ТекущаяСтрока.СтавкаНДС = УказаннаяСтавкаНДС;

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтавкуНДССуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССуффикс", СтруктураПараметровДействия);
	
	НалогообложениеНДС = СтруктураПараметровДействия.НалогообложениеНДС;
	Дата = СтруктураПараметровДействия.Дата;
	КэшированныеЗначения.Вставить("ОрганизацияДляСтавкиНДС", СтруктураПараметровДействия.Организация);
	
	Номенклатура = Неопределено;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Номенклатура") Тогда
		Номенклатура = ТекущаяСтрока.Номенклатура;
	КонецЕсли;
	
	Если СтруктураПараметровДействия.Свойство("ПоДатеОтгрузки") 
		И СтруктураПараметровДействия.ПоДатеОтгрузки
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ДатаОтгрузки")
		И ЗначениеЗаполнено(ТекущаяСтрока.ДатаОтгрузки) Тогда
		Дата = ТекущаяСтрока.ДатаОтгрузки;
	КонецЕсли; 
	
	Суффикс = "";
	Если СтруктураПараметровДействия.Свойство("Суффикс", Суффикс) 
		И Не ЗначениеЗаполнено(Суффикс) Тогда
		Суффикс = "";
	КонецЕсли;
	СтавкаССуффиксом = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.СтавкаССуффиксом(Суффикс);
	
	ТекущаяСтрока[СтавкаССуффиксом.СтавкаНДС] = УчетНДСУП.СтавкаНДСПоНоменклатуреИНалогообложениюПакетно(
			Номенклатура, НалогообложениеНДС, Дата, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ПересчитатьЦенуСНДС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем СтруктураПараметровДействия;
	Перем СтавкаНДС;
	
	СтруктураДействий.Свойство("ПересчитатьЦенуСНДС", СтруктураПараметровДействия);
		
	Если СтруктураПараметровДействия = Неопределено
	 Или СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС) = Ложь Тогда
		СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
	КонецЕсли;
	
	ПроцентНДС = 0;
	ДанныеДляОбработки = ДанныеДляОбработкиСтроки(
								"СтавкаПоСтавкеНДС", КэшированныеЗначения);

	Если ДанныеДляОбработки <> Неопределено Тогда
		ПроцентНДС = ДанныеДляОбработки[0].Ставка;
	КонецЕсли;
	
	ТекущаяСтрока.Цена = ТекущаяСтрока.Цена * (ПроцентНДС + 100)/100;
	
КонецПроцедуры

Процедура СкорректироватьСтавкуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 
	
	Перем СтруктураПараметровДействия;
	Перем ВернутьМногооборотнуюТару;
	Перем ТипНоменклатуры;
	
	Если СтруктураДействий.Свойство("СкорректироватьСтавкуНДС", СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.ИнициализацияВходящегоДокумента И ЗначениеЗаполнено(ТекущаяСтрока.СтавкаНДС) Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураПараметровДействия.Свойство("ВернутьМногооборотнуюТару", ВернутьМногооборотнуюТару);
		
		НалогообложениеНДС = СтруктураПараметровДействия.НалогообложениеНДС;
		Дата = СтруктураПараметровДействия.Дата;
		КэшированныеЗначения.Вставить("ОрганизацияДляСтавкиНДС", СтруктураПараметровДействия.Организация);
		
		Если СтруктураПараметровДействия.Свойство("ХозяйственнаяОперация") Тогда
			ХозяйственнаяОперация = СтруктураПараметровДействия.ХозяйственнаяОперация;
		Иначе 
			ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПустаяСсылка();
		КонецЕсли;
		
		Номенклатура = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Номенклатура") Тогда
			Номенклатура = ТекущаяСтрока.Номенклатура;
		КонецЕсли;
		
		Если ВернутьМногооборотнуюТару Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ТипНоменклатуры") Тогда
				ТипНоменклатуры = ТекущаяСтрока.ТипНоменклатуры;
			ИначеЕсли ЗначениеЗаполнено(Номенклатура) Тогда
				ТипыНоменклатуры = КэшированныеЗначения.ТипыНоменклатуры; //Соответствие
				ТипНоменклатуры = ТипыНоменклатуры.Получить(Номенклатура);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда
			СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС");
		Иначе

			ПроверятьАктуальность = Истина;
			
			Если ТекущаяСтрока.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС")
				И НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС")
				И СтруктураПараметровДействия.ЗаполнениеНаОснованииКопирование = Ложь Тогда
					ПроверятьАктуальность = Ложь;
			КонецЕсли;
			
			Если ПроверятьАктуальность Тогда
				Если КэшированныеЗначения.АктуальныеСтавкиНДС = Неопределено Тогда
					ЗаполнитьАктуальныеСтавкиНДСКэшированныеЗначения(СтруктураПараметровДействия, КэшированныеЗначения);
				КонецЕсли;
				
				АктуальныеСтавкиНДС = КэшированныеЗначения.АктуальныеСтавкиНДС; //Массив
				Если АктуальныеСтавкиНДС.Найти(ТекущаяСтрока.СтавкаНДС) <> Неопределено Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			СтавкаНДС = УчетНДСУП.СтавкаНДСПоНоменклатуреИНалогообложениюПакетно(
				Номенклатура, НалогообложениеНДС, Дата, КэшированныеЗначения);

		КонецЕсли;
		
		Если ТекущаяСтрока.СтавкаНДС <> СтавкаНДС Тогда
			
			ТекущаяСтрока.СтавкаНДС = СтавкаНДС;
			
			ОбработанныеСтроки = КэшированныеЗначения.ОбработанныеСтроки; //Массив
			ОбработанныеСтроки.Добавить(ТекущаяСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтатьюАналитикуРасходовНоменклатуры(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	СтруктураДействий.Свойство("ЗаполнитьСтатьюАналитикуРасходовНоменклатуры", СтруктураПараметровДействия);
		
	ДоходыИРасходыСервер.ЗаполнитьСтатьюИАналитикуРасходовНоменклатурыПакетно(
		ТекущаяСтрока, 
		СтруктураПараметровДействия,
		КэшированныеЗначения);
	
КонецПроцедуры

Процедура ПересчитатьСуммуСУчетомПогрешностиОкругленияВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Погрешность = Неопределено;
	ПогрешностиПоСтрокам = Новый Соответствие;
	ПараметрыДействия = Неопределено;
	
	СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомПогрешностиОкругления", ПараметрыДействия);
	Если ТипЗнч(ПараметрыДействия) = Тип("Число") Тогда
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма + ПараметрыДействия;
	ИначеЕсли ПараметрыДействия.Свойство("ПогрешностиПоСтрокам", ПогрешностиПоСтрокам) Тогда
		Погрешность = ПогрешностиПоСтрокам.Получить(ТекущаяСтрока);
		Погрешность = ?(Погрешность = Неопределено, 0, Погрешность);
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма + Погрешность;
	ИначеЕсли ПараметрыДействия.Свойство("Погрешность", Погрешность) Тогда
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма + Погрешность;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	СтруктураДействий.Свойство("ПересчитатьСуммуНДС", СтруктураПараметровДействия);
		
	НалогообложениеНДС = Неопределено;
	СтруктураПараметровДействия.Свойство("НалогообложениеНДС", НалогообложениеНДС);
	ТекПроцентНДС = Неопределено;
	
	СтавкаНДС = Неопределено;
	Если НЕ (СтруктураПараметровДействия <> Неопределено И СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС)) Тогда
		ДанныеСтавки = ДанныеДляОбработкиСтроки("СтавкаПоСтавкеНДС", КэшированныеЗначения);
		Если Не ДанныеСтавки = Неопределено Тогда
			ТекПроцентНДС = ДанныеСтавки[0].Ставка;
		Иначе
			ТекПроцентНДС = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС")
		И ТекПроцентНДС = Неопределено Тогда
		ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[СтавкаНДС];
	Иначе
		КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
	КонецЕсли;

	Если ТекПроцентНДС = Неопределено Тогда
		ТекПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
		КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(СтавкаНДС, ТекПроцентНДС);
	КонецЕсли;
	
	ТекущаяСтрока.СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(ТекущаяСтрока.Сумма,
																	ТекПроцентНДС,
																	СтруктураПараметровДействия.ЦенаВключаетНДС,
																	НалогообложениеНДС);
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДССуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
		
	СтруктураДействий.Свойство("ПересчитатьСуммуНДССуффикс", СтруктураПараметровДействия);
	
	НалогообложениеНДС = Неопределено;
	СтруктураПараметровДействия.Свойство("НалогообложениеНДС", НалогообложениеНДС);
	
	Суффикс = "";
	
	Если СтруктураПараметровДействия.Свойство("Суффикс", Суффикс)
		И Не ЗначениеЗаполнено(Суффикс) Тогда
		Суффикс = "";
	КонецЕсли;
	
	СуммаССуффиксом = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.СуммаССуффиксом(Суффикс);
	
	ДанныеСтавки = ДанныеДляОбработкиСтроки("СтавкаПоСтавкеНДССуффикс", КэшированныеЗначения);
	Если Не ДанныеСтавки = Неопределено Тогда
		СтавкаПоСтавкеНДС = ДанныеСтавки[0].Ставка;
	Иначе
		СтавкаПоСтавкеНДС = 0;
	КонецЕсли;
	
	ТекущаяСтрока[СуммаССуффиксом.СуммаНДС] = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
		ТекущаяСтрока[СуммаССуффиксом.Сумма],
		СтавкаПоСтавкеНДС,
		СтруктураПараметровДействия.ЦенаВключаетНДС,
		НалогообложениеНДС);

КонецПроцедуры

Процедура ПересчитатьСуммуПродажиПоСуммеСНДС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	ТекущаяСтрока.СуммаПродажи = ТекущаяСтрока.СуммаСНДС;

КонецПроцедуры

Процедура ОчиститьСтатьюАналитикуРасходов(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	СтруктураДействий.Свойство("ОчиститьСтатьюАналитикуРасходов", СтруктураПараметровДействия);
	ДоходыИРасходыСервер.ОчиститьСтатьюАналитикуРасходовПакетно(ТекущаяСтрока, СтруктураПараметровДействия, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	СтруктураДействий.Свойство("ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки", СтруктураПараметровДействия);
	ДоходыИРасходыСервер.ИнициализироватьСтатьюИАналитикуПослеДобавленияСтрокиПакетно(ТекущаяСтрока, СтруктураПараметровДействия, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ЗаполнитьНастройкуСчетовУчетаПоУмолчанию(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	
	Возврат; // В УТ обработчик пустой
	
КонецПроцедуры

// Используется для заполнения служебного реквизита формы документа ""СкладОбязателен"".
// Реквизит используется для установки отметки незаполненного в поле Склад.
// В строке таб. части, если склад указывается построчно, либо в шапке, если склад указывается в шапке документа.
// Отметка незаполненного у поля в шапке документа ставится, если условия выполнены хотя бы в одной строке документа. 
// Отметка незаполненного ставится при одновременном выполнении всех перечисленных ниже условий:
// - в строке не установлен признак Отменено (если в строке есть признак отмены)
// - тип номенклатуры ""Товар"" или ""Многооборотная тара"" (не услуга и не работа).
// В общем случае отметка не заполненного ставится всегда, когда на незаполненное поле должна сработать
// проверка заполнения документа. А данные из поля нужны для движений по РН Запасы и потребности.
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  Действия - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПриИзмененииТипаНоменклатуры(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатуры", ПараметрыДействия);
	
	Если ПараметрыДействия.Свойство("ЕстьОтменено") И ПараметрыДействия.ЕстьОтменено Тогда
		Отменено = ПараметрыДействия.ЕстьОтменено И ТекущаяСтрока.Отменено;
	Иначе
		Отменено = Ложь;
	КонецЕсли;
	
	ЭтоРабота = ПараметрыДействия.ЕстьРаботы
		И (ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
			Или ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	
	ТекущаяСтрока.СкладОбязателен = ?(ЗначениеЗаполнено(ТекущаяСтрока.ТипНоменклатуры) И Не (ЭтоРабота Или Отменено), 1, 0);
	
КонецПроцедуры

// Заполняет следующие реквизиты в строке таб. части документа: 
// - ВариантОбеспечения (поле "Действие" в форме документа)
// - Обособленно
// Работает, только если в строке указана номенклатура.
// Если в номенклатуре установлен флаг Обособленная закупка/продажа, то для номенклатуры с типами Товар и Работа заполняет так:
//  ВариантОбеспечения - К обеспечению, флаг Обособленно - взводит.
// Для номенклатуры с типом Многооборотная тара и Услуга заполняет так:
//  ВариантОбеспечения - Не обеспечивать, флаг Обособленно - сбрасывает.
// Если в номенклатуре не установлен флаг Обособленная закупка/продажа, то для номенклатуры с типами Товар, Многооборотная тара заполняет так: 
//  ВариантОбеспечения - К обеспечению, флаг Обособленно - сбрасывает.
// Для номенклатуры с типом Работа, Услуга заполняет так:
//  ВариантОбеспечения - Не обеспечивать, флаг Обособленно - сбрасывает.
// Имеются особые случаи заполнения в отдельных документах:
// а) В заказе давальца - считается, что в номенклатуре всегда установлен флаг обособленная закупка продажа
// б) В заказе клиента / заявке на возврат при установленной опции "Заказ со склада и под заказ"
//    флаг Обособленная закупка продажа считается установленным в любом их следующих случаев:
//    - флаг Обособленная закупка продажа установлен в номенклатуре.
//    - флаг Обособленная закупка продажа установлен в соглашении.
//    - хоз. операция документа Поставка под принципала.
// в) В заказе клиента / заявке на возврат при установленной опции "Заказ со склада"
//    флаг Обособленная закупка продажа всегда сброшен, а вариант обеспечения заполняется,
//    исходя из статуса документа и типа номенклатуры:
//    - в статусах К отгрузке / К отгрузке, Закрыт, Выполнена ставится Отгрузить
//    - в статусах В резерве / В резерве ставится Резервировать на складе для товаров и тары, Не обеспечивать для Работ и Услуг
//    - в статусах На согласовании / На согласовании, К возврату, Отклонена ставится Не обеспечивать
// г) В заказе клиента / заявке на возврат, если заказ был создан при установленной опции "Заказ как счет", ставится Не обеспечивать и флаг Обособленно сброшен
// д) В Управлении продажами OZON работает как в заказе клиента в статусе К отгрузке.
// е) В помощнике продаж работает как в заказе клиента (в настройках помощника есть Статус, в шапке помощника есть Соглашение),
//    но есть особый случай, когда в настройках помощника включен особый "Упрощенный" режим.
//    Флаг Обособленно взводится либо сбрасывается согласно правилам заказа клиента.
//    Вариант обеспечения определяется  зависимости от выбранного варианта обеспечения в настройках помощника.
//    - если в настройках Отгрузить, то для всех типов номенклатуры ставится Отгрузить
//    - если в настройках Резервировать на складе, то для номенклатуры с типом Товар и Тара ставится Резервировать на складе,
//      для Услуг ставится Не обеспечивать, для Работ ставится К обеспечению (если флаг Обособленно взвелся) и Не обеспечивать, если флаг Обособленно сброшен. 
//    - если в настройках Резервировать по мере поступления, то для номенклатуры с типом Товар и Тара ставится Резервировать по мере поступления,
//      для Услуг ставится Не обеспечивать, для Работ ставится К обеспечению (если флаг Обособленно взвелся) и Не обеспечивать, если флаг Обособленно сброшен.
//    - если в настройках К обеспечению, то для номенклатуры с типом Товар и Тара ставится К обеспечению,
//      для Услуг ставится Не обеспечивать, для Работ ставится К обеспечению (если флаг Обособленно взвелся) и Не обеспечивать, если флаг Обособленно сброшен.
//    - если в настройках Не обеспечивать, то для всех типов номенклатуры ставится Не обеспечивать.
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  Действия - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПроверитьЗаполнитьОбеспечениеВДокументеПродажи(ТекущаяСтрока, Действия, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	Если Действия.Свойство("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия) Тогда
		
		ДанныеДляОбработки = ДанныеДляОбработкиСтроки("ОбеспечениеВДокументах", КэшированныеЗначения);
		ДанныеЗаполнения = ДанныеДляОбработки[0];
		Если Не ЗначениеЗаполнено(ДанныеЗаполнения.Номенклатура) Тогда
			Возврат;
		КонецЕсли;
		
		ТипНоменклатуры = ДанныеЗаполнения.ТипНоменклатуры;
		Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
			ИмяСвойства = "Товар";
		ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			ИмяСвойства = "Работа";
		ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			ИмяСвойства = "Услуга";
		ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
			ИмяСвойства = "Тара";
		КонецЕсли;
		
		// Заполнение варианта обеспечения.
		ВариантОбеспеченияИФлагОбособленно = ПараметрыДействия.ВариантОбеспеченияИФлагОбособленно;
		
		Если ВариантОбеспеченияИФлагОбособленно = Неопределено Тогда
			
			ВариантИФлагВременный = ОбеспечениеВДокументахКлиентСервер.ВариантОбеспеченияИФлагОбособленноПоУмолчанию(
				ДанныеЗаполнения.ОбособленнаяЗакупкаПродажа);
			
			ВариантОбеспечения = ВариантИФлагВременный[ИмяСвойства].ВариантОбеспечения;
			Обособленно = ВариантИФлагВременный[ИмяСвойства].Обособленно;
			
		ИначеЕсли ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].Обособленно = Неопределено Тогда // случай, когда вариант обеспечения переопределяется а флаг нет.
			
			ВариантИФлагВременный = ОбеспечениеВДокументахКлиентСервер.ВариантОбеспеченияИФлагОбособленноПоУмолчанию(
				ДанныеЗаполнения.ОбособленнаяЗакупкаПродажа);
			ВариантОбеспечения = ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].ВариантОбеспечения;
			Обособленно = ВариантИФлагВременный[ИмяСвойства].Обособленно;
			Если ИмяСвойства = "Работа" Тогда
				Если Обособленно И ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Тогда
					ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению
				ИначеЕсли Не Обособленно И ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению Тогда
					ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			ВариантОбеспечения = ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].ВариантОбеспечения;
			Обособленно = ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].Обособленно;
			
		КонецЕсли;
		
		ТекущаяСтрока.ВариантОбеспечения = ВариантОбеспечения;
		ТекущаяСтрока.Обособленно = Обособленно;
		
	КонецЕсли;
	
КонецПроцедуры

// Используется для:
// 
// 1) Заполнения служебного реквизита формы документа "СкладОбязателен".
// Реквизит используется для установки отметки незаполненного в поле Склад.
// В строке таб. части, если склад указывается построчно, либо в шапке, если склад указывается в шапке документа.
// Отметка незаполненного у поля в шапке документа ставится, если условия выполнены хотя бы в одной строке документа. 
// Отметка незаполненного ставится при одновременном выполнении всех перечисленных ниже условий:
// - в строке не установлен признак Отменено (если в строке есть признак отмены)
// - тип номенклатуры "Товар" или "Многооборотная тара"
// - вариант обеспечения (поле "Действие" в строке таб.части) имеет одно из следующих значений:
//     а) "Отгрузить"
//     б) "Резервировать на складе"
//     в) "К обеспечению", только если документ в текущем статусе (поле Статус в документе) делает движения
//        в РН Запасы и потребности по строкам с действием "К обеспечению" (готов к обеспечению).
//     г) "Резервировать по мере поступления", только если документ в текущем (поле Статус в документе) делает движения 
//        в РН Запасы и потребности по строкам с действием "Резервировать по мере поступления"  (готов к обеспечению).
// В общем случае отметка не заполненного ставится всегда, когда на незаполненное поле должна сработать
// проверка заполнения документа. А данные из поля нужны для движений по РН Запасы и потребности.
// Условия "готов к обеспечению" зависят от статуса документа и задаются в тексте запроса в процедуре
// ДоступныеОстаткиПараметрыВстраивания в модуле менеджера документа. 
//
// 2) Заполнения служебного реквизита формы "ДатаОтгрузкиОбязательна"
// Реквизит используется для установки отметки незаполненного в поле "Дата отгрузки" (поле может называться по-другому).
// Это то самое поле, которое используется для движений документа, по измерению Дата события (Дата отгрузки)
// в РН Запасы и потребности.
// Отметка незаполненного ставится В строке таб. части, если дата отгрузки указывается построчно, либо в шапке,
// если дата отгрузки одна на весь документ.
// Отметка незаполненного у поля в шапке документа ставится, если условия выполнены хотя бы в одной строке документа. 
// Отметка незаполненного ставится при одновременном выполнении всех перечисленных ниже условий:
// - в строке не установлен признак Отменено (если в строке есть признак отмены)
// - вариант обеспечения (поле "Действие" в строке таб.части) "Отгрузить"
// - документ находится в статусе, в котором выдается распоряжение на отгрузку
// РН Товары к отгрузке. 
// В общем случае отметка не заполненного ставится всегда, когда на незаполненное поле должна сработать
// проверка заполнения документа. А данные из поля нужны для движений по РН Товары к отгрузке.
// Условия "готов к отгрузке" зависят от статуса документа и задаются в тексте запроса в процедуре
// ДоступныеОстаткиПараметрыВстраивания в модуле менеджера документа.
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  Действия - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения(ТекущаяСтрока, Действия, КэшированныеЗначения) Экспорт
	
	ДанныеДляОбработки = ДанныеДляОбработкиСтроки("ОбеспечениеВДокументах", КэшированныеЗначения); 
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеДляОбработки[0], "ДатаОтгрузкиОбязательна,СкладОбязателен");
	
КонецПроцедуры

// Действие необходимо вызывать при изменении любого из следующих полей в строке документа:
// Номенклатура, Характеристика, Склад (для товаров и тары) /Подразделение (для работ), Назначение, Упаковка, Обособленно
// Действие рассчитывает колонку Доступно для указанной аналитики товара и упаковки по данным регистров обеспечения.
// Есть особые случаи, для документов вида "Заказ переработчику", "Заказ переработчику по этапам", Обработка "Редактирование последовательности этапов"
// В этих случаях такие поля как Подразделение, Склад, Назначение могут браться не из текущей табличной части а в другой табличной части документа. 
// Также, в этих случаях в документе пользователь может изменять привязку строки к конкретному заказу на отгрузку, например этапу производства.
// А так как в колонке Доступно учитывается не только свободный остаток но и резерв, распределенный по заказу с действием Резервировать по мере поступления,
// то изменение заказа привязанного к строке, вызывает изменение значения в колонке Доступно.
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  Действия - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьКолонкуДоступно(ТекущаяСтрока, Действия, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Действия.Свойство("ЗаполнитьКолонкуДоступно", ПараметрыДействия);
		
	Если Действия.Свойство("ПроверитьНеобходимостьОбновленияКолонкиДоступно")
			И Действия.ПроверитьНеобходимостьОбновленияКолонкиДоступно.ОбновитьКолонкуДоступно Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляОбработки = ДанныеДляОбработкиСтроки("ОбеспечениеВДокументах", КэшированныеЗначения); 
	
	ОбеспечениеВДокументахСервер.ОбновитьКолонкуДоступноПриОбработкеСтрокиТабличнойЧастиПакетно(
		ТекущаяСтрока,
		ДанныеДляОбработки,
		ПараметрыДействия);
		
КонецПроцедуры

// Вызывается в случаях, если в строке меняется вариант обеспечения, в том числе при изменении номенклатуры и т.п.
// Отслеживает ситуации, когда в строке установили вариант обеспечения "Отгрузить" или "Резервировать на складе".
// Либо заменили этот вариант обеспечения на любые другие. Такое изменение приводит к необходимости пересчета колонки Доступно
// для данной номенклатуры и характеристики в документе. Возможны два случая:
// 1) В документе есть еще другая строка такой же номенклатуры и характеристики, тогда обновление колонки Доступно
//     необходимо выполнить в документе отдельным контекстным серверным вызовом, после выполнения всех действий структуры действий
//     над всеми обрабатываемыми строками.
// 2) Такая номенклатура и характеристика в документе есть только в текущей строке. В этом случае для обновления колонки
//    в структуре действий должно быть добавлено действие ЗаполнитьКолонкуДоступно. Оно обновит колонку Доступно
//    в текущей обрабатываемой строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  Действия - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПроверитьНеобходимостьОбновленияКолонкиДоступно(ТекущаяСтрока, Действия, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	Действия.Свойство("ПроверитьНеобходимостьОбновленияКолонкиДоступно", ПараметрыДействия);
	ОбеспечениеВДокументахСервер.ПроверитьНеобходимостьОбновленияКолонкиДоступно(ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

// Вызывается в случаях, когда в документе появляются дубли номенклатуры и характеристики. Например, при разбиении строк командой над ТЧ "Разбить строки".
// Действие обновляет служебные данные, которые понадобятся действию ПроверитьНеобходимостьОбновленияКолонкиДоступно.
// Так как логика этого действия завязана на наличии или отсутствии в документе двух строк с одинаковой номенклатурой.
// Действие ОбновитьКэшНоменклатура не нужно вызывать при выполнении хотя бы одного из условий ниж:
//  - вызывается действие ПроверитьНеобходимостьОбновленияКолонкиДоступно
//  - вызывается метод ОбеспечениеВДокументахСервер.ОбновитьКолонкуДоступно (обновляющий колонку Доступно во всей табличной части).
// Так как в обоих случаях служебные данные по дублям номенклатуры и характеристики и так будут обновлены. 
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  Действия - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ОбновитьКэшНоменклатура(ТекущаяСтрока, Действия, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	Действия.Свойство("ОбновитьКэшНоменклатура", ПараметрыДействия);
	ОбеспечениеВДокументахСервер.ОбновитьКэшНоменклатура(ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

// Используется в помощнике продаж.
// Заполняет реквизит Вариант обеспечения в табличной части документа значением Отгрузить
// Если в строке указан вариант оформления Заказ + Реализация или Заказ + Передача хранителю. 
// Также заполняет Отгрузить, если в помощнике отключена настройка "Один вариант обеспечения"
// и установлен флаг Отгружать одной датой и указана дата отгрузки "Сегодня".
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  Действия - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьОтгрузитьДляВариантаОформленияЗаказПлюсРеализация(ТекущаяСтрока, Действия, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	Действия.Свойство("ЗаполнитьОтгрузитьДляВариантаОформленияЗаказПлюсРеализация", ПараметрыДействия);
		
	Если ПараметрыДействия = Истина 
			Или ТекущаяСтрока.ВариантОформления = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг
			Или ТекущаяСтрока.ВариантОформления = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаПередачаТоваровХранителю Тогда
				ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет колонку "Количество по РНПТ" в текущей строке. Расчет основывается на:
// 1. Значении колонки "Количество".
// 2. Коэффициента пересчета, который вычисляется в разрезе:
//		А. Организации.
//		Б. Аналитики учета номенклатуры: Номенклатуре, Характеристике, Складу (Месту хранения).
//		В. Номеру ГТД (РНПТ).
// По указанному разрезу ищутся записи в:
//		А. РН Товары организации,
//		Б. РН Товары переданные на комиссию,
//		В. РН Товары к оформлению отчетов комитенту,
//		Г. РН Товары к оформлению отчетов комитенту о закупках.
// По найденным записям выполняется расчет:
// Коэффициент = КоличествоПоРНПТ / Количество;
// Если записи нет, и/или Номер ГТД (РНПТ) передан пустым - коэффициент устанавливается в "1",
// т.е. "Количество по РНПТ" приравнивается к "Количество".
//
// Типичный сценарий:
// Поступило 10 шт товара, пользователь указал номер ГТД (РНПТ)
// и изменил значение в поле "Количество по РНПТ" с 10 на 20.
// Пользователь вводит следующий документ с тем же товаром и ГТД (РНПТ), вводит количество.
// Система прочла из памяти, что коэффициент = 2, и автоматически устанавливает
// в колонке "Количество по РНПТ" значение как "Количество" * 2.
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  Действия - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьКоличествоПоРНПТВСтрокеТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения) Экспорт
	
	ИмяСвойства = "ПересчитатьКоличествоПоРНПТ";
	ПолучитьКоэффициентРНПТВнутренний(ТекущаяСтрока, Действия, КэшированныеЗначения, ИмяСвойства);
	
КонецПроцедуры

// Заполняет колонку "Количество по РНПТ" (поддерживается иное наименование колонки) в текущей строке.
// Расчет основывается на:
// 1. Значении колонки "Количество" (поддерживается иное наименование колонки).
// 2. Коэффициента пересчета, который вычисляется в разрезе:
//		А. Организации.
//		Б. Аналитики учета номенклатуры: Номенклатуре, Характеристике, Складу (Месту хранения).
//		В. Номеру ГТД (РНПТ).
// По указанному разрезу ищутся записи в:
//		А. РН Товары организации,
//		Б. РН Товары переданные на комиссию,
//		В. РН Товары к оформлению отчетов комитенту,
//		Г. РН Товары к оформлению отчетов комитенту о закупках.
// По найденным записям выполняется расчет:
// Коэффициент = КоличествоПоРНПТ / Количество;
// Если записи нет, и/или Номер ГТД (РНПТ) передан пустым - коэффициент устанавливается в "1",
// т.е. "Количество по РНПТ" приравнивается к "Количество".
//
// Типичный сценарий:
// Поступило 10 шт товара, пользователь указал номер ГТД (РНПТ)
// и изменил значение в поле "Количество по РНПТ" с 10 на 20.
// Пользователь вводит следующий документ с тем же товаром и ГТД (РНПТ), вводит количество.
// Система прочла из памяти, что коэффициент = 2, и автоматически устанавливает
// в колонке "Количество по РНПТ" значение как "Количество" * 2.
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  Действия - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьКоличествоПоРНПТСуффиксВСтрокеТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения) Экспорт
	
	ИмяСвойства = "ПересчитатьКоличествоПоРНПТСуффикс";
	ПолучитьКоэффициентРНПТВнутренний(ТекущаяСтрока, Действия, КэшированныеЗначения, ИмяСвойства);
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураДействийЗаполнения = НоменклатураСервер.ДействияЗаполненияРеквизитовПоНоменклатуре(СтруктураДействий);
	
	Если СтруктураДействийЗаполнения.Количество() <> 0 Тогда
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтруктуреПакетно(ТекущаяСтрока, СтруктураДействийЗаполнения, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакОрдерногоСкладаВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	СтруктураДействий.Свойство("ЗаполнитьПризнакОрдерногоСклада", ПараметрыДействия);
	
	ДатаПроверки = ТекущаяДатаСеанса();
	ИмяПоляПризнака = "ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач";
	
	Если ТипЗнч(ПараметрыДействия) = Тип("Структура")
		И ПараметрыДействия.Свойство("ИмяПоляПризнака") Тогда
		ИмяПоляПризнака = ПараметрыДействия.ИмяПоляПризнака;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыДействия) = Тип("Структура")
		И ПараметрыДействия.Свойство("ДатаПроверки") Тогда
		ДатаПроверки = ПараметрыДействия.ДатаПроверки;
	КонецЕсли;
	
	РеквизитыСклада = ДанныеДляОбработкиСтроки("ПризнакОрдерногоСклада", КэшированныеЗначения)[0];
	
	ТекущаяСтрока[ИмяПоляПризнака] = ЗначениеЗаполнено(РеквизитыСклада.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач)
								И РеквизитыСклада.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
								И РеквизитыСклада.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач <> Неопределено
								И РеквизитыСклада.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач <= ДатаПроверки;
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыПоНазначениюВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Результат = ДанныеДляОбработкиСтроки("СлужебныеРеквизитыПоНазначению", КэшированныеЗначения)[0];
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Результат);

КонецПроцедуры

Процедура ЗаполнитьСтрануПроисхожденияНоменклатуры(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Результат = ДанныеДляОбработкиСтроки("СтранаПроисхожденияНоменклатуры", КэшированныеЗначения)[0];
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Результат);
	
КонецПроцедуры

Процедура ПроверитьЗаполнитьСклад(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Если Не СтруктураДействий.Свойство("ПроверитьЗаполнитьСклад", ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	СкладГруппа = Ложь;
	Если ПараметрыДействия.Свойство("СкладГруппа") Тогда
		СкладГруппа = ПараметрыДействия.СкладГруппа;
	КонецЕсли;
	
	ИмяПоляСклад = "Склад";
	Если ТипЗнч(ПараметрыДействия) = Тип("Структура")
		И ПараметрыДействия.Свойство("ИмяПоляСклад") Тогда
		ИмяПоляСклад = ПараметрыДействия.ИмяПоляСклад;
	КонецЕсли;
	
	ДанныеДляОбработки = ДанныеДляОбработкиСтроки("ПроверитьЗаполнитьСклад", КэшированныеЗначения)[0];
	
	ТоварИлиМногооборотнаяТара =
		ДанныеДляОбработки.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
			Или ДанныеДляОбработки.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара");
			
	СкладПоУмолчанию = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
		И ТоварИлиМногооборотнаяТара
		И ТипЗнч(ПараметрыДействия) = Тип("Структура") Тогда
			Если ПараметрыДействия.Свойство("СкладПоУмолчанию") Тогда
				СкладПоУмолчанию = ПараметрыДействия.СкладПоУмолчанию;
			ИначеЕсли ПараметрыДействия.Свойство("СкладПоУмолчаниюИзТекущейСтроки") Тогда
				СкладПоУмолчанию = ТекущаяСтрока[ИмяПоляСклад];
			КонецЕсли;
	КонецЕсли;
			
	Если СкладГруппа
		И ТоварИлиМногооборотнаяТара Тогда
		
		// Проверка на вхождение склада в иерархию группы складов
		Если ЗначениеЗаполнено(ТекущаяСтрока[ИмяПоляСклад])
			И ПараметрыДействия.Свойство("СкладГруппаСсылка")
			И ЗначениеЗаполнено(ПараметрыДействия.СкладГруппаСсылка)
			И ДанныеДляОбработки.ОчиститьСклад Тогда
				ТекущаяСтрока[ИмяПоляСклад] = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяСтрока[ИмяПоляСклад] = СкладПоУмолчанию;
	
КонецПроцедуры



Процедура ЗаполнитьСтрануПроисхожденияДляНомераГТД(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	ТекущаяСтрока.СтранаПроисхождения = ДанныеДляОбработкиСтроки("СтранаПроисхожденияПоНомеруГТД", КэшированныеЗначения)[0].СтранаПроисхождения;
	
КонецПроцедуры

Процедура ЗаполнитьТипНомераГТД(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	ТекущаяСтрока.ТипНомераГТД = ДанныеДляОбработкиСтроки("ТипНомераГТД", КэшированныеЗначения)[0].ТипНомераГТД;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакДвиженияПоСкладскимРегистрам(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ИмяПоля;
	
	СтруктураДействий.Свойство("ЗаполнитьПризнакДвиженияПоСкладскимРегистрам", ИмяПоля);
	ДанныеДляОбработкиСтроки = ДанныеДляОбработкиСтроки("ПризнакДвиженияПоСкладскимРегистрам", КэшированныеЗначения)[0];
	ТекущаяСтрока[ИмяПоля] = ДанныеДляОбработкиСтроки.ДвиженияПоСкладскимРегистрам;
	
КонецПроцедуры

Процедура ЗаполнитьСодержаниеУслуги(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем СтруктураПараметровДействия;
	СтруктураДействий.Свойство("ЗаполнитьСодержание", СтруктураПараметровДействия);
		
	ЗаполнятьДляВсехУслуг = Неопределено;
	СтруктураПараметровДействия.Свойство("ЗаполнятьДляВсехУслуг", ЗаполнятьДляВсехУслуг);
	
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) И ЗаполнятьДляВсехУслуг <> Неопределено Тогда
	
		ДанныеДляОбработкиСтроки = ДанныеДляОбработкиСтроки("СодержаниеУслуги", КэшированныеЗначения)[0];
			
		Если ЗаполнятьДляВсехУслуг
			И ДанныеДляОбработкиСтроки.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар 
			И ДанныеДляОбработкиСтроки.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
			
			ТекущаяСтрока.Содержание = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				ДанныеДляОбработкиСтроки.НоменклатураНаименованиеПолное, 
				ДанныеДляОбработкиСтроки.ХарактеристикаНаименованиеПолное);
			
		ИначеЕсли Не ЗаполнятьДляВсехУслуг
			И (ДанныеДляОбработкиСтроки.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот
			ИЛИ ДанныеДляОбработкиСтроки.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав) Тогда
			
			ТекущаяСтрока.Содержание = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				ДанныеДляОбработкиСтроки.НоменклатураНаименованиеПолное, 
				ДанныеДляОбработкиСтроки.ХарактеристикаНаименованиеПолное);
			
		Иначе
			ТекущаяСтрока.Содержание = "";
		КонецЕсли;
		
	Иначе
		ТекущаяСтрока.Содержание = "";
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьПолучитьВариантКомплектации(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		СтруктураРезультатаПринадлежность = ДанныеДляОбработкиСтроки(
													"ПринадлежностьВариантаКомплектацииНоменклатуреХарактеристике",
													КэшированныеЗначения)[0];
		
		Если Не СтруктураРезультатаПринадлежность.ПринадлежитНоменклатуреХарактеристике = Истина Тогда
			
			СтруктураРезультатаПринадлежность = ДанныеДляОбработкиСтроки("ОсновнойВариантКомплектации", КэшированныеЗначения)[0];
			
			ТекущаяСтрока.ВариантКомплектации = СтруктураРезультатаПринадлежность.ОсновнойВариантКомплектации;
		
		КонецЕсли;
		
	ИначеЕсли Не ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) И ТекущаяСтрока.ХарактеристикиИспользуются Тогда 
		
		ТекущаяСтрока.ВариантКомплектации = Неопределено;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДанныеПоДокументуПриобретенияВОтчетеКомитентуОЗакупках(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ТекущаяСтрока.Поставщик = Неопределено;
	ТекущаяСтрока.ТипДокументаПриобретения = Новый ОписаниеТипов("Неопределено");
	
	Если Не ТекущаяСтрока.ДокументПриобретения = Неопределено Тогда
		
		ТекущаяСтрока.Поставщик = ДанныеДляОбработкиСтроки("ДанныеПоДокументуПриобретения", КэшированныеЗначения)[0].Контрагент;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(ТекущаяСтрока.ДокументПриобретения));
		ТекущаяСтрока.ТипДокументаПриобретения = Новый ОписаниеТипов(МассивТипов);
		
	КонецЕсли;
	
КонецПроцедуры



// Заполняет вид цены и цену передачи продукции давальцу.
//
// 1. Определяется вид цены передачи продукции давальцу по умолчанию (единственный вид цены в справочнике ВидыЦен
// 	с установленным признаком "Использовать при передаче продукции давальцу").
//
// 2. Если вид цен найден, то цена в строке рассчитывается по подобранному виду цен и пересчитывается
// 	по курсу переданной валюты на дату документа с учетом коэффициента упаковки (для товаров).
//
// Параметры:
// 	ТекущаяСтрока - Структура - текущая строка табличной части.
// 	СтруктураДействий - см. ОбработатьСтрокиТЧ.СтруктураДействий.
// 	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьЦенуПередачиПродукцииДавальцу(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	СтруктураДействий.Свойство("ЗаполнитьЦенуПередачиПродукцииДавальцу", ПараметрыДействия);
	
	ДанныеДляОбработки = ДанныеДляОбработкиСтроки("ЗаполнитьЦенуПередачиПродукцииДавальцу", КэшированныеЗначения);
	Если ДанныеДляОбработки <> Неопределено Тогда
		
		ТекущаяСтрока.Цена = ДанныеДляОбработки[0].Цена;
		ТекущаяСтрока.ВидЦены = ДанныеДляОбработки[0].ВидЦены;
		
	КонецЕсли;

КонецПроцедуры

// Заполняет цену выпуска номенклатуры в строке табличной части по переданному в параметрах действия виду цен.
//
// Если в строке установлен признак Произведено и используется плановая стоимость выпускаемой продукции,
// то цена продукции рассчитывается по указанному в параметрах действия виду цен и пересчитывается
// по курсу переданной валюты на дату документа с учетом коэффициента упаковки (для товаров).
//
// Параметры:
// 	ТекущаяСтрока - Структура - текущая строка табличной части.
// 	СтруктураДействий - см. ОбработатьСтрокиТЧ.СтруктураДействий.
// 	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПроверитьЗаполнитьЦенуВыпуска(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	СтруктураДействий.Свойство("ПроверитьЗаполнитьЦенуВыпуска", ПараметрыДействия);
	
	ДанныеДляОбработки = ДанныеДляОбработкиСтроки("ПроверитьЗаполнитьЦенуВыпуска", КэшированныеЗначения);
	Если ДанныеДляОбработки <> Неопределено Тогда
		
		Если Не ТекущаяСтрока.Произведено
			Или Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			
			ТекущаяСтрока.Цена = 0;
			
		Иначе
		
			Если ТекущаяСтрока.Свойство("ИспользоватьПлановуюСтоимость")
				И Не ТекущаяСтрока.ИспользоватьПлановуюСтоимость Тогда
				
				ТекущаяСтрока.Цена = 0;
				ТекущаяСтрока.Сумма = 0;
				
			Иначе
				ТекущаяСтрока.Цена = ДанныеДляОбработки[0].Цена;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПодразделениеВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем ПараметрыДействия;
	
	Если Не СтруктураДействий.Свойство("ЗаполнитьПодразделениеВСтрокеТЧ", ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	СписокТипов = ПродажиСервер.ТипыНоменклатурыСАналитикойПодразделение();
	Если СписокТипов.НайтиПоЗначению(ТекущаяСтрока.ТипНоменклатуры) = Неопределено Тогда
		ТекущаяСтрока.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	Иначе
		ТекущаяСтрока.Подразделение = ПараметрыДействия.Подразделение;
	КонецЕсли;

КонецПроцедуры

// Заполняет служебный реквизит "РасхождениеЗаказ" в строке
//
// Параметры:
//  ТекущаяСтрока		 - Структура - данные обрабатываемой строки.
//  СтруктураДействий	 - Структура - описывает действия, где Ключ - наименование действия,
//  														   Значение - Структура - параметры действия.
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//
Процедура ЗаполнитьПризнакРасхождениеЗаказ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыЗаполнения;
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьПризнакРасхождениеЗаказ", ПараметрыЗаполнения) Тогда
		Возврат;
	КонецЕсли;

	ЗаказыСервер.ЗаполнитьПризнакРасхождениеЗаказ(ТекущаяСтрока, ПараметрыЗаполнения, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ЗаполнитьПродавца(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем ПараметрСтруктурыДействий;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПродавца", ПараметрСтруктурыДействий)
		И Не ЗначениеЗаполнено(ТекущаяСтрока.Продавец) Тогда
		
			ТекущаяСтрока.Продавец = ПараметрСтруктурыДействий.Продавец;

	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПризнакДляЗаполненияТекстовогоОписания(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	ТекущаяСтрока.ДляЗаполненияТекстовогоОписания = НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура);
	
КонецПроцедуры

Процедура ЗаполнитьАктуальныеСтавкиНДСКэшированныеЗначения(СтруктураДействия, КэшированныеЗначения) Экспорт
	
	НалогообложениеНДС = СтруктураДействия.НалогообложениеНДС;
	Дата = СтруктураДействия.Дата;
	Организация = СтруктураДействия.Организация;
	Если СтруктураДействия.Свойство("ХозяйственнаяОперация") Тогда
		ХозяйственнаяОперация = СтруктураДействия.ХозяйственнаяОперация;
	Иначе
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПустаяСсылка();
	КонецЕсли;
	
	Если ПродажиСервер.ХозяйственнаяОперацияСоСтавкойБезНДС(ХозяйственнаяОперация) Тогда
		
		АктуальныеСтавкиНДС = Новый Массив();
		АктуальныеСтавкиНДС.Добавить(Справочники.СтавкиНДС.БезНДС);
		КэшированныеЗначения.АктуальныеСтавкиНДС = АктуальныеСтавкиНДС;
		
	Иначе
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНДСТипыНалогообложенияНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС.ТипыНалогообложенияНДС КАК СтавкиНДСТипыНалогообложенияНДС
		|ГДЕ
		|	СтавкиНДСТипыНалогообложенияНДС.ТипНалогообложенияНДС = &ТипНалогообложенияНДС
		|	И (СтавкиНДСТипыНалогообложенияНДС.Ссылка.Страна = &Страна
		|			ИЛИ СтавкиНДСТипыНалогообложенияНДС.Ссылка.Страна = &ПустаяСтрана)
		|	И (СтавкиНДСТипыНалогообложенияНДС.Ссылка.НачалоПериода <= &Дата
		|			ИЛИ СтавкиНДСТипыНалогообложенияНДС.Ссылка.НачалоПериода = ДАТАВРЕМЯ(1, 1, 1))
		|	И (КОНЕЦПЕРИОДА(СтавкиНДСТипыНалогообложенияНДС.Ссылка.КонецПериода, ДЕНЬ) >= &Дата
		|			ИЛИ СтавкиНДСТипыНалогообложенияНДС.Ссылка.КонецПериода = ДАТАВРЕМЯ(1, 1, 1))
		|
		|СГРУППИРОВАТЬ ПО
		|	СтавкиНДСТипыНалогообложенияНДС.Ссылка";
		
		Запрос.УстановитьПараметр("ТипНалогообложенияНДС", НалогообложениеНДС);
		Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("Страна", ЗначениеНастроекКлиентСерверПовтИсп.СтранаРегистрацииОрганизации(Организация));
		Запрос.УстановитьПараметр("ПустаяСтрана", Справочники.СтраныМира.ПустаяСсылка());
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			КэшированныеЗначения.АктуальныеСтавкиНДС = Новый Массив;
		КонецЕсли;
		
		КэшированныеЗначения.АктуальныеСтавкиНДС = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("СтавкаНДС");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнитьВидЦеныВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	СтруктураДействий.Свойство("ПроверитьЗаполнитьВидЦены", СтруктураПараметровДействия);
	
	ИмяКолонкиВидЦены = "ВидЦены";
	Если ТипЗнч(СтруктураПараметровДействия.ВидЦены) = Тип("Строка")
				И ЗначениеЗаполнено(СтруктураПараметровДействия.ВидЦены) Тогда
			ИмяКолонкиВидЦены = СтруктураПараметровДействия.ВидЦены;
	КонецЕсли;
	
	ТекущаяСтрока[ИмяКолонкиВидЦены]= ДанныеДляОбработкиСтроки("ВидыЦен", КэшированныеЗначения)[0].ВидЦены;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакАдресногоХранения(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ТекущаяСтрока.ИспользоватьАдресноеХранение = 
		ДанныеДляОбработкиСтроки("ПризнакАдресногоХранения", КэшированныеЗначения)[0].ИспользоватьАдресноеХранение;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакПринимаетсяКНУ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ТекущаяСтрока.ПринимаетсяКНУ =
		ДанныеДляОбработкиСтроки("ПризнакПринимаетсяКНУ", КэшированныеЗначения)[0].ПринятиеКНалоговомуУчету;
	
КонецПроцедуры

Процедура ЗаполнитьGTINВСтроке(ТекущаяСтрока, Действия, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем ПараметрСтруктурыДействий;
	
	Действия.Свойство("ЗаполнитьGTINВСтроке", ПараметрСтруктурыДействий);
	ДобавлятьЛидирующиеНули = Ложь;
	Если ПараметрСтруктурыДействий <> Неопределено Тогда
		ДобавлятьЛидирующиеНули = ПараметрСтруктурыДействий.ДобавлятьЛидирующиеНули;
	КонецЕсли;
	
	ДанныеДляОбработки = ДанныеДляОбработкиСтроки("втТаблицаШтрихкодов",КэшированныеЗначения);
	Если ДанныеДляОбработки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КорректныеGTIN = Новый Массив;
	
	Для Каждого Элемент Из ДанныеДляОбработки Цикл
		
		GTIN = Элемент.GTIN;
		Если МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(GTIN) Тогда
			Если ДобавлятьЛидирующиеНули Тогда
				GTIN = Прав("000000" + GTIN, 14);
			КонецЕсли;
			КорректныеGTIN.Добавить(GTIN);
		КонецЕсли;
		
	КонецЦикла;
	
	Если КорректныеGTIN.Найти(ТекущаяСтрока.GTIN) <> Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли КорректныеGTIN.Количество() = 1 Тогда
		
		ТекущаяСтрока.GTIN = КорректныеGTIN[0];
		
	ИначеЕсли КорректныеGTIN.Количество() > 1 Тогда
		
		ТекущаяСтрока.GTIN = "";
		
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ЗаполнитьПризнакИспользованияПомещений(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	ТекущаяСтрока.ИспользоватьСкладскиеПомещения =
		ДанныеДляОбработкиСтроки("ПризнакИспользованияПомещений", КэшированныеЗначения)[0].ИспользоватьСкладскиеПомещения;
		
КонецПроцедуры

Процедура ЗаполнитьПомещение(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Помещение) Тогда
		ДанныеДляОбработки = ДанныеДляОбработкиСтроки("ЗаполнитьПомещение", КэшированныеЗначения);
		ТекущаяСтрока.Помещение = ДанныеДляОбработки[0].Помещение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНаправлениеДеятельности(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;

	СтруктураДействий.Свойство("ЗаполнитьНаправлениеДеятельности", ПараметрыДействия);

	НаправленияДеятельностиСервер.ЗаполнитьНаправлениеДеятельностиПакетно(
		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ПараметрыДействия);

КонецПроцедуры

// Заполняет цену продажи (Цена) в строке табличной части.
//
// 1. Вид цены подбирается по следующему алгоритму:
// 	1) если передан параметр действия ВидЦены, то ПараметрыДействия.ВидЦены;
// 	2) иначе значение поля текущей строки ТекущаяСтрока.ВидЦены.
//
// 2. Цена в строке рассчитывается по подобранному виду цен и пересчитывается по курсу переданной валюты на дату документа
// 	с учетом коэффициента упаковки (для товаров).
//
// Параметры:
// 	ТекущаяСтрока - Структура - текущая строка табличной части.
// 	СтруктураДействий - см. ОбработатьСтрокиТЧ.СтруктураДействий.
// 	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьЦенуПродажи(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи", ПараметрыДействия);
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ЗаполнитьЦенуПродажи", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		ИмяПоляЦена = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыДействия, "ИмяПоляЦена", "Цена");
		
		Результат = ДанныеПоСтроке[0];
		Если ЗначениеЗаполнено(Результат.Цена) Тогда
			ТекущаяСтрока[ИмяПоляЦена] = Результат.Цена;
		ИначеЕсли ЗначениеЗаполнено(Результат.ВидЦены) Тогда
			ТекущаяСтрока[ИмяПоляЦена] = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет цену продажи по ассортименту (Цена) в строке табличной части.
//
// 1. Вид цены подбирается из регистра сведений Ассортимент на дату документа по номенклатуре из строки
// 	и объекту планирования (склад или формат магазина), переданному в параметре действия Склад.
//
// 2. Цена в строке рассчитывается по подобранному виду цен и пересчитывается по курсу переданной валюты на дату документа
// 	с учетом коэффициента упаковки (для товаров).
//
// Параметры:
// 	ТекущаяСтрока - Структура - текущая строка табличной части.
// 	СтруктураДействий - см. ОбработатьСтрокиТЧ.СтруктураДействий.
// 	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьЦенуПродажиПоАссортименту(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ЗаполнитьЦенуПродажиПоАссортименту", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		ТекущаяСтрока.Цена = ДанныеПоСтроке[0].Цена;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет вхождение товара в строке в ассортимент переданного магазина.
// 
// Для указанной в строке номенклатуры по переданному объекту планирования (склад или формат магазина)
// из регистра сведений Ассортимент на дату документа получается признак возможности указать товар в документе.
// Если такая возможность отсутствует (товар запрещен к закупке или продаже), выводится информационное
// сообщение и номенклатура в строке очищается.
//
// Параметры:
// 	ТекущаяСтрока - Структура - текущая строка табличной части.
// 	СтруктураДействий - см. ОбработатьСтрокиТЧ.СтруктураДействий.
// 	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПроверитьАссортиментСтроки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия; // см. АссортиментКлиентСервер.ПараметрыПроверкиАссортимента
	
	СтруктураДействий.Свойство("ПроверитьАссортиментСтроки", ПараметрыДействия);
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ПроверитьАссортиментСтроки", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		Результат = ДанныеПоСтроке[0];
		Если Результат.КонтролироватьАссортимент
			И Не Результат[ПараметрыДействия.ИмяРесурсаАссортимента] Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыДействия.ТекстСообщения, Результат.Номенклатура);
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,
				ПараметрыДействия.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "Номенклатура"),,
				Ложь);
				
			Если Не ПараметрыДействия.РазрешатьДобавление Тогда
				ТекущаяСтрока.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж (ВидЦены, Цена, СрокПоставки) в строке табличной части по переданному
// в параметрах действия Соглашению.
//
// 1. Вид цены подбирается по следующему алгоритму:
// 	1) если в условиях продаж соглашения товару назначена цена, то Справочник.ВидыЦен.ПустаяСсылка;
// 	2) если в условиях продаж товару назначен вид цены, то ПараметрыДействия.Соглашение.Товары.ВидЦены;
// 	3) если в условиях продаж ценовой группе товара назначен вид цены, то ПараметрыДействия.Соглашение.ЦеновыеГруппы.ВидЦен;
// 	4) если вид цены в пп. 1.1-1.3 не определился, то вид цен из шапки соглашения - ПараметрыДействия.Соглашение.ВидЦен.
//
// 2. Если в п. 1.1 не определилась цена, то она рассчитывается по подобранному виду цен и пересчитывается по курсу
// 	переданной валюты на дату документа с учетом коэффициента упаковки (для товаров).
// 3. Срок поставки рассчитывается для товаров, если в условиях продаж соглашения он назначен товару в строке.
//
// Параметры:
// 	ТекущаяСтрока - Структура - текущая строка табличной части.
// 	СтруктураДействий - см. ОбработатьСтрокиТЧ.СтруктураДействий.
// 	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьУсловияПродаж(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ЗаполнитьУсловияПродаж", КэшированныеЗначения);
	ЕстьПолеВидЦены = ЕстьКолонкаВИсточникеДанных("ВидЦены", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		Результат = ДанныеПоСтроке[0];
		ТекущаяСтрока.Цена = Окр(Результат.Цена, 2);
		
		Если ЕстьПолеВидЦены Тогда
			
			Если ЗначениеЗаполнено(Результат.ВидЦены) Тогда
				ТекущаяСтрока.ВидЦены = Результат.ВидЦены;
			Иначе
				ТекущаяСтрока.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьКолонкаВИсточникеДанных("СрокПоставки", КэшированныеЗначения)
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат, "СрокПоставки") Тогда
			ТекущаяСтрока.СрокПоставки = Результат.СрокПоставки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия розничных продаж (ВидЦены, Цена) в строке табличной части по переданному параметру ОбъектХраненияУсловийПродаж.
//
// 1. Вид цены подбирается по следующему алгоритму:
// 	1) если ОбъектХраненияУсловийПродаж - склад, то вычисляется по приоритету:
// 		а) ОбъектХраненияУсловийПродаж.ИндивидуальныйВидЦены;
// 		б) ОбъектХраненияУсловийПродаж.РозничныйВидЦены.
// 	2) если ОбъектХраненияУсловийПродаж - формат магазина, то вычисляется по приоритету
// 		а) ОбъектХраненияУсловийПродаж.ИндивидуальныйВидЦены;
// 		б) ОбъектХраненияУсловийПродаж.РозничныйВидЦены.
//
// 2. Цена рассчитывается по подобранному виду цен и пересчитывается по курсу переданной валюты
// 	на дату документа с учетом коэффициента упаковки (для товаров).
//
// Параметры:
// 	ТекущаяСтрока - Структура - текущая строка табличной части.
// 	СтруктураДействий - см. ОбработатьСтрокиТЧ.СтруктураДействий.
// 	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьУсловияРозничныхПродаж(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ЗаполнитьУсловияРозничныхПродаж", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		Результат = ДанныеПоСтроке[0];
		
		ТекущаяСтрока.Цена = Результат.Цена;
		
		Если ЕстьКолонкаВИсточникеДанных("ВидЦены", КэшированныеЗначения) Тогда
			ТекущаяСтрока.ВидЦены = Результат.ВидЦены;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет номенклатуру партнера (НоменклатураПартнера) в строке табличной части.
//
// 1. Если в строке указана бракованная номенклатура, то в качестве значения для поиска берется
// 	соответствующая номенклатура с качеством Новый.
// 2. Производится поиск номенклатуры партнера по найденному значению. Вариант выбирается с приоритетом:
// 	1) НоменклатураПартнера, уже заполненная в строке, с подходящими значениями реквизитов {Номенклатура, Характеристика, Упаковка};
// 	2) найденный вариант номенклатуры партнеров, существующий в единственном экземпляре,
// 		с подходящими значениями реквизитов {Номенклатура, Характеристика, Упаковка}.
//
// Параметры:
// 	ТекущаяСтрока - Структура - текущая строка табличной части.
// 	СтруктураДействий - см. ОбработатьСтрокиТЧ.СтруктураДействий.
// 	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьНоменклатуруПартнераПоНоменклатуре(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		ТекущаяСтрока.НоменклатураПартнера = ДанныеПоСтроке[0].НоменклатураПартнера;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты товара (Номенклатура, Характеристика, Упаковка) по номенклатуре партнера в строке табличной части.
// Если в строке указан бракованный товар, а в выбранной номенклатуре партнера такой же новый,
// то перезаполнения реквизитов не происходит.
//
// Параметры:
// 	ТекущаяСтрока - Структура - текущая строка табличной части.
// 	СтруктураДействий - см. ОбработатьСтрокиТЧ.СтруктураДействий.
// 	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьНоменклатуруПоНоменклатуреПартнера(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ЗаполнитьНоменклатуруПоНоменклатуреПартнера", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		Результат = ДанныеПоСтроке[0];
		
		Если Результат.НеобходимоПерезаполнитьНоменклатуру Тогда
			ТекущаяСтрока.Номенклатура = Результат.Номенклатура;
		КонецЕсли;
		
		Если Результат.НеобходимоПерезаполнитьХарактеристики Тогда
			
			ТекущаяСтрока.Характеристика = Результат.Характеристика;
			ТекущаяСтрока.ХарактеристикиИспользуются = Результат.ХарактеристикиИспользуются;
			
		КонецЕсли;
		
		Если Результат.НеобходимоПерезаполнитьУпаковки Тогда
			
			ТекущаяСтрока.Упаковка = Результат.Упаковка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет соответствие указанной в строке номенклатуры партнера номенклатуре и партнеру,
// а также проверяет ее уникальность.
// В случае нахождения дублей выдает информационное сообщение с ошибкой пользователю.
//
// Параметры:
// 	ТекущаяСтрока - Структура - текущая строка табличной части.
// 	СтруктураДействий - см. ОбработатьСтрокиТЧ.СтруктураДействий.
// 	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПроверитьСопоставленнуюНоменклатуруПартнера(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	СтруктураДействий.Свойство("ПроверитьСопоставленнуюНоменклатуруПартнера", ПараметрыДействия);
	
	ИспользоватьНоменклатуруПартнеров = Ложь;
	Если Не ПараметрыДействия.Свойство("ИспользоватьНоменклатуруПартнеров", ИспользоватьНоменклатуруПартнеров) Тогда
		
		ПараметрыДействия.Вставить("ИспользоватьНоменклатуруПартнеров",
			ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПартнеров"));
			
		ИспользоватьНоменклатуруПартнеров = ПараметрыДействия.ИспользоватьНоменклатуруПартнеров;
		
	КонецЕсли;
	
	Если Не ИспользоватьНоменклатуруПартнеров Тогда
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ПроверитьСопоставленнуюНоменклатуруПартнера", КэшированныеЗначения)[0];
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
		И ДанныеПоСтроке.КоличествоНоменклатурыПартнера > 0 Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Номенклатуре ""%1"" с характеристикой ""%2"" уже сопоставлена другая номенклатура поставщика (%3)'"),
				ТекущаяСтрока.Номенклатура,
				ТекущаяСтрока.Характеристика,
				ДанныеПоСтроке.КоличествоНоменклатурыПартнера);
			
		Иначе
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Номенклатуре ""%1"" уже сопоставлена другая номенклатура поставщика (%2)'"),
				ТекущаяСтрока.Номенклатура,
				ДанныеПоСтроке.КоличествоНоменклатурыПартнера);
			
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,
			ПараметрыДействия.Ссылка,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Объект.Товары",
				ТекущаяСтрока.НомерСтроки,
				"Номенклатура"));
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность указания серии для номенклатуры в строке табличной части.
// Заполняет статус указания серий для номенклатуры в строке табличной части согласно переданным параметрам указания серий.
// 
// Параметры:
// 	ТекущаяСтрока - Структура - текущая строка табличной части.
// 	СтруктураДействий - Структура - допустимые действия для табличной части.
// 	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПроверитьСериюРассчитатьСтатус(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Если СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус", ПараметрыДействия) Тогда
	
		ПараметрыУказанияСерий = ПараметрыДействия.ПараметрыУказанияСерий;
		
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("УказыватьСерии", Ложь);
		
		ДанныеПоСтроке = ДанныеДляОбработкиСтроки("РассчитатьСтатус", КэшированныеЗначения)[0];
		
		ПроверкаСерии = ДанныеДляОбработкиСтроки("ПроверитьСерию", КэшированныеЗначения)[0];
		Если ПроверкаСерии.РазличаютсяВладельцыСерииИНоменклатуры Тогда
			ДанныеПоСтроке.СтатусУказанияСерий = 0;
		КонецЕсли;
		
		Если ДанныеПоСтроке.СтатусУказанияСерий = Null Тогда
			Возврат;
		КонецЕсли;
		
		Если ДанныеПоСтроке.СтатусУказанияСерий <> Неопределено Тогда
			
			Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
				СтруктураПолей.Вставить("СтатусУказанияСерий", ДанныеПоСтроке.СтатусУказанияСерий);
			Иначе
				
				Для Каждого ИмяПоляСтатус Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
					СтруктураПолей.Вставить(ИмяПоляСтатус, ДанныеПоСтроке[ИмяПоляСтатус]);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураПолей.УказыватьСерии = Истина;
		
		Если НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(
			ДанныеПоСтроке.СтатусУказанияСерий,
			ПараметрыУказанияСерий)
			Или Не ЗначениеЗаполнено(ТекущаяСтрока.СтатусУказанияСерий) Тогда
			ИсточникЗаполнения = ДанныеПоСтроке;
		Иначе
			ИсточникЗаполнения = ТекущаяСтрока;
		КонецЕсли;
		
		Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
			СтруктураПолей.СтатусУказанияСерий = ИсточникЗаполнения.СтатусУказанияСерий;
		Иначе
			
			Для Каждого ИмяПоляСтатус Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
				СтруктураПолей[ИмяПоляСтатус] = ИсточникЗаполнения[ИмяПоляСтатус];
			КонецЦикла;
			
		КонецЕсли;
		
		Если НоменклатураКлиентСервер.ВЭтомСтатусеСерииНеУказываются(
			ДанныеПоСтроке.СтатусУказанияСерий,
			ПараметрыУказанияСерий) Тогда
			
			СтруктураПолей.УказыватьСерии = Ложь;
			
			Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
				СтруктураПолей.Вставить("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка());
			Иначе
				
				СоответствиеИмениПоляСерияСтатусуУказанияСерий =
					ПараметрыУказанияСерий.СоответствиеИмениПоляСерияСтатусуУказанияСерий; // Соответствие -
				
				Для Каждого ИмяПоляСтатус Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
					
					Если ИмяПоляСтатус = "СтатусУказанияСерий" Тогда
						ИмяПоляСерия = "Серия";
					Иначе
						ИмяПоляСерия = СоответствиеИмениПоляСерияСтатусуУказанияСерий.Получить(ИмяПоляСтатус);
					КонецЕсли;
					
					Если ИмяПоляСерия <> Неопределено Тогда
						СтруктураПолей.Вставить(ИмяПоляСерия, Справочники.СерииНоменклатуры.ПустаяСсылка());
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураПолей);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность указания характеристики для номенклатуры в строке табличной части.
// В случае несоответствия характеристики выбранному товару очищает ее.
// Если в структуре действий содержится действие "ЗаполнитьХарактеристикуНекачественногоТовара",
// то будут произведены поиск и подстановка характеристики, идентичной характеристике оригинального товара.
//
// Параметры:
// 	ТекущаяСтрока - Структура - текущая строка табличной части.
// 	СтруктураДействий - см. ОбработатьСтрокиТЧ.СтруктураДействий.
// 	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПроверитьХарактеристикуПоВладельцу(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ПроверитьХарактеристикуПоВладельцу", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		Результат = ДанныеПоСтроке[0];
		
		ТекущаяСтрока.Характеристика = Результат.Характеристика;
		
		Если ЕстьКолонкаВИсточникеДанных("ХарактеристикиИспользуются", КэшированныеЗначения) Тогда
			ТекущаяСтрока.ХарактеристикиИспользуются = Результат.ХарактеристикиИспользуются;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьХарактеристикуНекачественногоТовара") Тогда
		
		ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ЗаполнитьХарактеристикуНекачественногоТовара", КэшированныеЗначения);
		Если ДанныеПоСтроке <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(ДанныеПоСтроке[0].Характеристика) Тогда
				ТекущаяСтрока.Характеристика = ДанныеПоСтроке[0].Характеристика;
			Иначе
				ТекущаяСтрока.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность указания упаковки для номенклатуры в строке табличной части.
// В случае несоответствия упаковки выбранному товару очищает ее.
// Если в структуре действий содержится действие "ЗаполнитьУпаковкуНекачественногоТовара",
// то будут произведены поиск и подстановка упаковки, идентичной упаковке оригинального товара.
//
// Параметры:
// 	ТекущаяСтрока - Структура - текущая строка табличной части.
// 	СтруктураДействий - см. ОбработатьСтрокиТЧ.СтруктураДействий.
// 	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПроверитьЗаполнитьУпаковкуПоВладельцу(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ПроверитьЗаполнитьУпаковкуПоВладельцу", КэшированныеЗначения);
	Если Не ДанныеПоСтроке[0].ПроверкаУспешна Тогда
		
		Если СтруктураДействий.Свойство("ЗаполнитьУпаковкуНекачественногоТовара") Тогда
			
			ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ЗаполнитьУпаковкуНекачественногоТовара", КэшированныеЗначения);
			Если ДанныеПоСтроке <> Неопределено Тогда
				
				НайденнаяУпаковка = ДанныеПоСтроке[0].Упаковка;
				Если ЗначениеЗаполнено(НайденнаяУпаковка)
					Или Не ДанныеПоСтроке[0].ЭтоИндивидуальныйНабор Тогда
					ТекущаяСтрока.Упаковка = НайденнаяУпаковка;
				Иначе
					ТекущаяСтрока.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
				КонецЕсли;
				
			Иначе
				
				ТекущаяСтрока.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
				
			КонецЕсли;
			
		Иначе
			
			ТекущаяСтрока.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет цену закупки (Цена) в строке табличной части.
//
// 1. Вид цены подбирается по следующему алгоритму:
// 	1) если передан параметр действия ВидЦеныПоставщика, то ПараметрыДействия.ВидЦеныПоставщика;
// 	2) если передан параметр действия Соглашение, то ПараметрыДействия.Соглашение.ВидЦеныПоставщика;
// 	3) если в строке есть поле ВидЦеныПоставщика, то ТекущаяСтрока.ВидЦеныПоставщика,
// 	4) иначе Справочник.ВидыЦенПоставщиков.ПустаяСсылка.
//
// 2. Цена в строке рассчитывается по подобранному виду цен и пересчитывается по курсу переданной валюты на дату документа
// 	с учетом коэффициента упаковки (для товаров).
//
// Параметры:
// 	ТекущаяСтрока - Структура - текущая строка табличной части.
// 	СтруктураДействий - см. ОбработатьСтрокиТЧ.СтруктураДействий.
// 	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьЦенуЗакупки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ЗаполнитьЦенуЗакупки", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		ТекущаяСтрока.Цена = ДанныеПоСтроке[0].Цена;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия закупок (ВидЦеныПоставщика, Цена) в строке табличной части по переданному
// в параметрах действия значениям Соглашение и ВидЦеныПоставщика.
//
// 1. Вид цены подбирается по следующему алгоритму:
// 	1) если строке есть поле ВидЦеныПоставщика, оно заполняется значением ПараметрыДействия.Соглашение.ВидЦеныПоставщика,
// 		и искомый вид цен равен ПараметрыДействия.Соглашение.ВидЦеныПоставщика;
// 	2) если передан параметр действия ВидЦеныПоставщика, то искомый вид цен равен ПараметрыДействия.ВидЦеныПоставщика;
// 	3) если в строке нет поля ВидЦеныПоставщика, а параметр ВидЦеныПоставщика не передан,
// 		то берется значение Справочник.ВидыЦенПоставщиков.ПустаяСсылка.
//
// 2. Цена в строке рассчитывается по подобранному виду цен и пересчитывается по курсу переданной валюты на дату документа
// 	с учетом коэффициента упаковки (для товаров).
//
// Параметры:
// 	ТекущаяСтрока - Структура - текущая строка табличной части.
// 	СтруктураДействий - см. ОбработатьСтрокиТЧ.СтруктураДействий.
// 	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьУсловияЗакупок(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ЗаполнитьУсловияЗакупок", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		Результат = ДанныеПоСтроке[0];
		
		Если ЕстьКолонкаВИсточникеДанных("ВидЦеныПоставщика", КэшированныеЗначения) Тогда
			ТекущаяСтрока.ВидЦеныПоставщика = Результат.ВидЦеныПоставщика;
		КонецЕсли;
		
		ТекущаяСтрока.Цена = Результат.Цена;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет остаток товара (КоличествоУпаковокУчет, КоличествоУпаковокФакт) в регистре ТоварыОрганизаций
// за исключением движения указанного документа (параметр действия Регистратор) в строке табличной части
// по переданным в параметрах действия значениям Склад, Организация и МоментВремени.
//
// 1. Подбирается ключ аналитики учета номенклатуры по номенклатуре и характеристике из строки, а также
// 	с переданным значением Склад в качестве места хранения.
// 2. По переданной Организации и полученным ключам в регистре накопления ТоварыОрганизаций
// 	рассчитывается остаток на МоментВремени по ресурсу Количество за исключением движений переданного документа.
//
// Параметры:
// 	ТекущаяСтрока - Структура - текущая строка табличной части.
// 	СтруктураДействий - см. ОбработатьСтрокиТЧ.СтруктураДействий.
// 	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьУчетноеКоличествоНоменклатуры(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ЗаполнитьУчетноеКоличествоНоменклатуры", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		Результат = ДанныеПоСтроке[0];
		ТекущаяСтрока.КоличествоУпаковокУчет = Результат.Количество;
		ТекущаяСтрока.КоличествоУпаковокФакт = Результат.Количество;
		
	КонецЕсли;

КонецПроцедуры

// Рассчитывает количество упаковок товара (КоличествоУпаковок) в строке табличной части исходя
// из количества единиц товара и указанной упаковки.
//
// Параметры:
// 	ТекущаяСтрока - Структура - текущая строка табличной части.
// 	СтруктураДействий - см. ОбработатьСтрокиТЧ.СтруктураДействий.
// 	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьКоличествоУпаковок(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ПересчитатьКоличествоУпаковок", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		Результат = ДанныеПоСтроке[0];
		ТекущаяСтрока[Результат.ИмяПоляКоличествоУпаковок] = Результат.Количество;
		
	Иначе
		
		ТекстИсключения = НСтр("ru = 'При попытке пересчета количества в %ЕдИзмерения% превышена допустимая разрядность.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ЕдИзмерения%", ТекущаяСтрока.Упаковка);
		
		ТекущаяСтрока.Количество = 0;
		ТекущаяСтрока.КоличествоУпаковок = 0;
		ТекущаяСтрока.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;

КонецПроцедуры

// Рассчитывает количество упаковок товара в строке табличной части исходя
// из количества единиц товара и указанной упаковки. Используется для полей с суффиксами.
//
// Параметры:
// 	ТекущаяСтрока - Структура - текущая строка табличной части.
// 	СтруктураДействий - см. ОбработатьСтрокиТЧ.СтруктураДействий.
// 	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьКоличествоУпаковокСуффикс(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффикс", ПараметрыДействия);
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ПересчитатьКоличествоУпаковокСуффикс", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		Результат = ДанныеПоСтроке[0];
		ТекущаяСтрока[Результат.ИмяПоляКоличествоУпаковок] = Результат.Количество;
		
	Иначе
		
		ПараметрыПересчета = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.НормализоватьПараметрыПересчетаЕдиницСуффикс(Неопределено, ПараметрыДействия);
		КоличествоССуффиксом = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.КоличествоССуффиксом(ПараметрыПересчета.Суффикс);
		
		ТекстИсключения = НСтр("ru = 'При попытке пересчета количества в %ЕдИзмерения% превышена допустимая разрядность.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ЕдИзмерения%", ТекущаяСтрока.Упаковка);
		
		ТекущаяСтрока[КоличествоССуффиксом.Количество] = 0;
		ТекущаяСтрока[КоличествоССуффиксом.КоличествоУпаковок] = 0;
		ТекущаяСтрока.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;

КонецПроцедуры

// Рассчитывает количество упаковок товара в строке табличной части исходя
// из указанной упаковки, ее веса и общего веса товара.
//
// Параметры:
// 	ТекущаяСтрока - Структура - текущая строка табличной части.
// 	СтруктураДействий - см. ОбработатьСтрокиТЧ.СтруктураДействий.
// 	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьКоличествоУпаковокПоВесу(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоВесу", ПараметрыДействия);
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ПересчитатьКоличествоУпаковокПоВесу", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		Результат = ДанныеПоСтроке[0];
		ТекущаяСтрока[Результат.ИмяПоляКоличество] = Результат.Количество;
		ТекущаяСтрока[Результат.ИмяПоляКоличествоУпаковок] = Результат.КоличествоУпаковок;
		
		ОбъемЕдиницыИзмерения = Результат.КоэффициентОбъем;
		Если ТекущаяСтрока.ОбъемУпаковки * ОбъемЕдиницыИзмерения <> 0 Тогда
			
			ТекущаяСтрока.Объем = Результат.КоличествоУпаковок
				* 1 / Окр(ОбъемЕдиницыИзмерения / ТекущаяСтрока.ОбъемУпаковки, 11, РежимОкругления.Окр15как20);
			
		Иначе
			ТекущаяСтрока.Объем = 0;
		КонецЕсли;
		
	Иначе
		
		ПараметрыПересчета = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.НормализоватьПараметрыПересчетаЕдиницСуффикс(
			Неопределено,
			ПараметрыДействия);
		
		КоличествоССуффиксом = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.КоличествоССуффиксом(ПараметрыПересчета.Суффикс);
		
		ТекущаяСтрока[КоличествоССуффиксом.Количество] = 0;
		ТекущаяСтрока[КоличествоССуффиксом.КоличествоУпаковок] = 0;
		ТекущаяСтрока.Объем = 0;
		
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает количество упаковок товара в строке табличной части исходя
// из указанной упаковки, ее объема и общего объема товара.
//
// Параметры:
// 	ТекущаяСтрока - Структура - текущая строка табличной части.
// 	СтруктураДействий - см. ОбработатьСтрокиТЧ.СтруктураДействий.
// 	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьКоличествоУпаковокПоОбъему(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоОбъему", ПараметрыДействия);
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ПересчитатьКоличествоУпаковокПоОбъему", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		Результат = ДанныеПоСтроке[0];
		ТекущаяСтрока[Результат.ИмяПоляКоличество] = Результат.Количество;
		ТекущаяСтрока[Результат.ИмяПоляКоличествоУпаковок] = Результат.КоличествоУпаковок;
		ВесЕдиницыИзмерения = Результат.КоэффициентВес;
		Если ТекущаяСтрока.ВесУпаковки * ВесЕдиницыИзмерения <> 0 Тогда
			
			ТекущаяСтрока.Вес = Результат.КоличествоУпаковок
				* 1 / Окр(ВесЕдиницыИзмерения / ТекущаяСтрока.ВесУпаковки, 11, РежимОкругления.Окр15как20);
			
		Иначе
			ТекущаяСтрока.Вес = 0;
		КонецЕсли;
		
	Иначе
		
		ПараметрыПересчета = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.НормализоватьПараметрыПересчетаЕдиницСуффикс(
			Неопределено,
			ПараметрыДействия);
		
		КоличествоССуффиксом = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.КоличествоССуффиксом(ПараметрыПересчета.Суффикс);
		
		ТекущаяСтрока[КоличествоССуффиксом.Количество] = 0;
		ТекущаяСтрока[КоличествоССуффиксом.КоличествоУпаковок] = 0;
		ТекущаяСтрока.Вес = 0;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает данные об упаковке.
// 
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - Номенклатура, по которой требуется получить коэффициент упаковки.
//  Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - Упаковка, по которой требуется получить коэффициент упаковки.
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
// 
// Возвращаемое значение:
//  см. Справочники.УпаковкиЕдиницыИзмерения.КоэффициентВесОбъемПрочиеРеквизитыУпаковки
//
Функция ДанныеОбУпаковке(Номенклатура, Упаковка, КэшированныеЗначения) Экспорт 
	
	ДанныеОбУпаковке = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентВесОбъемПрочиеРеквизитыУпаковки(Упаковка, Номенклатура, , Ложь);
	
	КлючКоэффициента = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.КлючКэшаУпаковки(Номенклатура, Упаковка);
	
	КэшированныеЗначения.КоэффициентыУпаковок.Вставить(КлючКоэффициента,	Новый Структура("Коэффициент, НужноОкруглятьКоличество",
																							ДанныеОбУпаковке.Коэффициент,
																							ДанныеОбУпаковке.НужноОкруглятьКоличество));
	КэшированныеЗначения.ОбъемУпаковок.Вставить(КлючКоэффициента, 			ДанныеОбУпаковке.Вес);
	КэшированныеЗначения.ВесУпаковок.Вставить(КлючКоэффициента, 			ДанныеОбУпаковке.Объем);
	
	Возврат ДанныеОбУпаковке;
	
КонецФункции

// Процедура, вызываемая из обработчика реквизита "Номенклатура" табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - текущая строка табличной части.
//	СтруктураДействий - Структура - допустимые действия для табличной части.
//	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура НоменклатураПриИзмененииПереопределяемый(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	СтруктураДействий.Свойство("НоменклатураПриИзмененииПереопределяемый", ПараметрыДействия);
	МодификацияКонфигурацииПереопределяемый.НоменклатураПриИзмененииПереопределяемый(ТекущаяСтрока,
		ПараметрыДействия, КэшированныеЗначения);
	
КонецПроцедуры

// Процедура, вызываемая из обработчика реквизита "Характеристика" табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - текущая строка табличной части.
//	СтруктураДействий - Структура - допустимые действия для табличной части.
//	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ХарактеристикаПриИзмененииПереопределяемый(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	СтруктураДействий.Свойство("ХарактеристикаПриИзмененииПереопределяемый", ПараметрыДействия);
	МодификацияКонфигурацииПереопределяемый.ХарактеристикаПриИзмененииПереопределяемый(ТекущаяСтрока,ПараметрыДействия,КэшированныеЗначения);
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеНастройкиСчетовУчета(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт

	
	Возврат; // В УТ обработчик пустой
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Описание обработчиков строк коллекции:
// 
// Параметры:
//  ОбработчикиСтрок - СписокЗначений из Строка - Содержит в себе соответствие действия над строкой и метода.
//
Процедура ПриДобавленииОбработчиковСтрокКоллекции(ОбработчикиСтрок) Экспорт
	
	// Обработчики будут выполнены в порядке строк ниже
	ТМЦВЭксплуатацииСервер.ДополнитьМетодыКВыполнениюПакетно(ОбработчикиСтрок);
	РетроБонусыСервер.ПриДобавленииОбработчиковСтрокКоллекции(ОбработчикиСтрок);
	
	ОбработчикиСтрок.Добавить("ПроверитьАссортиментСтроки",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПроверитьАссортиментСтроки");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьНоменклатуруПоНоменклатуреПартнера",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьНоменклатуруПоНоменклатуреПартнера");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьНоменклатуруПартнераПоНоменклатуре");
		
	ОбработчикиСтрок.Добавить("ПроверитьСопоставленнуюНоменклатуруПартнера",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПроверитьСопоставленнуюНоменклатуруПартнера");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакТипНоменклатуры",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакВидНоменклатуры",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакЕдиницаИзмерения",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакТипИзмеряемойВеличины",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьВесУпаковки",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьОбъемУпаковки",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьЕдиницуИзмеренияВеса",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьЕдиницуИзмеренияОбъема",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("КоличествоУпаковокВЕдиницеИзмеренияВеса",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакАртикул",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакКод",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакОписание",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакХарактеристикиИспользуются",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакВедетсяУчетПоГТД",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакВедетсяУчетПоРНПТ",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакЭтоУслуга",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьЕдиницуИзмеренияТНВЭД",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакВариантОформленияПродажи",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакСерииИспользуются",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьВесОбъем",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПроверитьХарактеристикуПоВладельцу",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПроверитьХарактеристикуПоВладельцу");
	
	ОбработчикиСтрок.Добавить("ПроверитьЗаполнитьУпаковкуПоВладельцу",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПроверитьЗаполнитьУпаковкуПоВладельцу");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьТипНомераГТД",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьТипНомераГТД");
	
	ОбработчикиСтрок.Добавить("ПроверитьЗаполнитьСклад",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПроверитьЗаполнитьСклад");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакОрдерногоСклада",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьПризнакОрдерногоСкладаВСтрокеТЧ");
	
	
	ОбработчикиСтрок.Добавить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПроверитьЗаполнитьОбеспечениеВДокументеПродажи");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьОтгрузитьДляВариантаОформленияЗаказПлюсРеализация",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьОтгрузитьДляВариантаОформленияЗаказПлюсРеализация");
	
	
	
	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоНеОтгружать",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоНеОтгружатьСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьGTINВСтроке",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьGTINВСтроке");
	
	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоУпаковокПоФакту",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоФактуВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоУпаковокФактПоУпаковкам",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокФактПоУпаковкамВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоУпаковокСуффиксИзОтклонения",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокСуффиксИзОтклоненияВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоЕдиниц",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоЕдиницСуффикс",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницСуффиксВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоПоРНПТ",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПересчитатьКоличествоПоРНПТВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоПоРНПТСуффикс",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПересчитатьКоличествоПоРНПТСуффиксВСтрокеТЧ");
		
	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоУпаковок",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПересчитатьКоличествоУпаковок");
	
	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоУпаковокСуффикс",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПересчитатьКоличествоУпаковокСуффикс");
	
	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоОтклонение",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоОтклонение");
		
	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоУпаковокПоВесу",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПересчитатьКоличествоУпаковокПоВесу");
	
	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоУпаковокПоОбъему",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПересчитатьКоличествоУпаковокПоОбъему");
	
	ОбработчикиСтрок.Добавить("ПересчитатьВесОбъем",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьВесОбъемВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьВидЦены",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьВидЦеныВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьЦенуЗаУпаковку",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуЗаУпаковкуВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьЦенуЗаУпаковкуСуффикс",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуЗаУпаковкуСуффиксВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьЦенуЗаказаЗаУпаковку",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуЗаказаЗаУпаковкуВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПроверитьЗаполнитьВидЦены",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПроверитьЗаполнитьВидЦеныВСтрокеТЧ");
		
	ОбработчикиСтрок.Добавить("ЗаполнитьЦенуПродажи",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьЦенуПродажи");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьЦенуПродажиПоАссортименту",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьЦенуПродажиПоАссортименту");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьЦенуЗакупки",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьЦенуЗакупки");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьУсловияПродаж",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьУсловияПродаж");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьУсловияПродажУслуги",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьУсловияПродаж");
		
	ОбработчикиСтрок.Добавить("ЗаполнитьУсловияРозничныхПродаж",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьУсловияРозничныхПродаж");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьУсловияЗакупок",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьУсловияЗакупок");
		
	
	
	ОбработчикиСтрок.Добавить("СкорректироватьСтавкуНДС",
		"ПакетнаяОбработкаТабличнойЧастиСервер.СкорректироватьСтавкуНДСВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьСтавкуНДС",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСтавкуНДСВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьСтавкуНДССуффикс",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСтавкуНДССуффиксВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьКодТНВЭД",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьКодТНВЭДПоНоменклатуреВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьЦенуСНДС",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПересчитатьЦенуСНДС");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьСтавкуНДСВозвратнойТары",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтавкуНДСВозвратнойТарыВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуРучнойСкидки",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуРучнойСкидкиВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуАвтоматическойСкидки",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуАвтоматическойСкидкиВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьПроцентРучнойСкидки",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьПроцентРучнойСкидкиВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСумму",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуСуффикс",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСуффиксВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуРасхождения",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВСтрокеТЧРасхождения");
	
	ОбработчикиСтрок.Добавить("ПересчитатьЦенуСкидкуПоСуммеВПродажах",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьЦенуСкидкуПоСуммеВЗакупках",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьЦенуПоСумме",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуПоСуммеВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуПродажиПоСуммеСНДС",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПересчитатьСуммуПродажиПоСуммеСНДС");
	
	ОбработчикиСтрок.Добавить("ПересчитатьЦенуПродажиПоСуммеПродажи",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуПродажиПоСуммеПродажиВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуСУчетомАвтоматическойСкидки",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуСУчетомРучнойСкидки",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомСкидкиБонуснымиБалламиВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуСУчетомПогрешностиОкругления",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПересчитатьСуммуСУчетомПогрешностиОкругленияВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуНДС",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПересчитатьСуммуНДСВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуНДССуффикс",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПересчитатьСуммуНДССуффиксВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуСНДС",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСНДСВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуСНДССуффикс",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСНДССуффиксВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуБезНДС",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуБезНДСВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуРегл",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуРеглВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуПР",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПРВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуНУ",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуНУВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуВР",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВРВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьНДСРегл",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьНДСРеглВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуПродажи",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПродажиВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуПродажиНДС",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПродажиНДСВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ОчиститьСуммуВознаграждения",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ОчиститьСуммуВознагражденияВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("УстановитьАктивность",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.УстановитьАктивностьСтроки");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьТипМестаХраненияПоУмолчанию",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьТипМестаХраненияПоУмолчанию");
	
	ОбработчикиСтрок.Добавить("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПроверитьПолучитьВариантКомплектации");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьФлагРасхождение",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьФлагРасхождение");
	
	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоУпаковокОтклонение",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокОтклонение");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьФлагИзлишекПорча",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьФлагИзлишекПорча");
	
	ОбработчикиСтрок.Добавить("ОчиститьСуммуВзаиморасчетов",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ОчиститьСуммуВзаиморасчетовВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ОчиститьСуммуВзаиморасчетовСуффикс",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ОчиститьСуммуВзаиморасчетовСуффиксВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ОчиститьСуммуНДСРеглУпр",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ОчиститьСуммуНДСРеглУпрВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ОчиститьАвтоматическуюСкидку",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ОчиститьАвтоматическуюСкидкуВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьСодержание",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСодержаниеУслуги");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьСтатьюАналитикуРасходовНоменклатуры",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСтатьюАналитикуРасходовНоменклатуры");
	
	ОбработчикиСтрок.Добавить("ОчиститьСтатьюАналитикуРасходов",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ОчиститьСтатьюАналитикуРасходов");
	
	ОбработчикиСтрок.Добавить("ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьНастройкуСчетовУчетаПоУмолчанию",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьНастройкуСчетовУчетаПоУмолчанию");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПредставлениеНастройкиСчетовУчета",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьПредставлениеНастройкиСчетовУчета");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПартнера",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПартнера");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПомещение",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьПомещение");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПродавца",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьПродавца");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьУчетноеКоличествоНоменклатуры",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьУчетноеКоличествоНоменклатуры");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакБезВозвратнойТары",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакБезВозвратнойТары");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакОтмененоБезВозвратнойТары",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакОтмененоБезВозвратнойТары");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакАктивностьБезВозвратнойТары",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакАктивностьБезВозвратнойТары");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьДубликатыЗависимыхРеквизитов",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьДубликатыЗависимыхРеквизитов");
	
	ОбработчикиСтрок.Добавить("ПроверитьСериюРассчитатьСтатус",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПроверитьСериюРассчитатьСтатус");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуСверхЗаказа",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСверхЗаказаВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("УстановитьПризнакДляЗаполненияТекстовогоОписания",
		"ПакетнаяОбработкаТабличнойЧастиСервер.УстановитьПризнакДляЗаполненияТекстовогоОписания");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьВариантОтраженияКорректировкиРеализации",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьВариантОтраженияКорректировкиРеализации");
	
	ОбработчикиСтрок.Добавить("НоменклатураПриИзмененииПереопределяемый",
		"ПакетнаяОбработкаТабличнойЧастиСервер.НоменклатураПриИзмененииПереопределяемый");
	
	ОбработчикиСтрок.Добавить("ХарактеристикаПриИзмененииПереопределяемый",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ХарактеристикаПриИзмененииПереопределяемый");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакПринимаетсяКНУ",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьПризнакПринимаетсяКНУ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакАдресногоХранения",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьПризнакАдресногоХранения");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакИспользованияПомещений",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьПризнакИспользованияПомещений");
	
	ОбработчикиСтрок.Добавить("ПересчитатьРасхожденияПослеОтгрузки",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхожденияПослеОтгрузки");
	
	ОбработчикиСтрок.Добавить("ПересчитатьРасхожденияПослеПриемки",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхожденияПослеПриемки");
	
	ОбработчикиСтрок.Добавить("ПересчитатьРасхождения",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхождения");
	
	ОбработчикиСтрок.Добавить("ПризнакНаличиеКомментарияПриемка",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментарияПриемка");
	
	ОбработчикиСтрок.Добавить("ПризнакНаличиеКомментарияОтгрузка",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментарияОтгрузка");
	
	ОбработчикиСтрок.Добавить("ПризнакНаличиеКомментария",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментария");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакТовМестаТребуетсяОбработка",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакТоварногоМестаТребуетсяОбработка");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакДвиженияПоСкладскимРегистрам",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьПризнакДвиженияПоСкладскимРегистрам");
	
	ОбработчикиСтрок.Добавить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения");
	
	ОбработчикиСтрок.Добавить("ПриИзмененииТипаНоменклатуры",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПриИзмененииТипаНоменклатуры");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьСлужебныеРеквизитыПоНазначению",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНазначениюВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПроверитьЗаполнитьНазначение",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПроверитьЗаполнитьНазначениеВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьФлагОбособленноПоНазначению",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьФлагОбособленноПоНазначению");
	
	ОбработчикиСтрок.Добавить("ПриИзмененииНазначения",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПриИзмененииНазначенияВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьСтрануПроисхожденияДляНомераГТД",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСтрануПроисхожденияДляНомераГТД");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьСтрануПроисхожденияНоменклатуры",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСтрануПроисхожденияНоменклатуры");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьСпособОпределенияСебестоимости",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСпособОпределенияСебестоимости");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьСпособОпределенияСебестоимостиСтрокой",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСпособОпределенияСебестоимостиСтрокой");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьНаправлениеДеятельности",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьНаправлениеДеятельности");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПодразделениеВСтрокеТЧ",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьПодразделениеВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПроверитьНеобходимостьОбновленияКолонкиДоступно",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПроверитьНеобходимостьОбновленияКолонкиДоступно");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьКолонкуДоступно",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьКолонкуДоступно");
	
	ОбработчикиСтрок.Добавить("ОбновитьКэшНоменклатура",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ОбновитьКэшНоменклатура");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьДанныеПоДокументуПриобретенияВОтчетеКомитентуОЗакупках",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьДанныеПоДокументуПриобретенияВОтчетеКомитентуОЗакупках");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакРасхождениеЗаказ",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьПризнакРасхождениеЗаказ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуБезНДСРегл",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуБезНДСРеглВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуБезНДСУпр",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуБезНДСУпрВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуБезНДСРеглСуффикс",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуБезНДСРеглСуффиксВСтрокеТЧ");
	
	ОбработчикиСтрок.Добавить("ПересчитатьСуммуБезНДСУпрСуффикс",
		"ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуБезНДСУпрСуффиксВСтрокеТЧ");
	
	ПакетнаяОбработкаТабличнойЧастиСерверЛокализация.ПриДобавленииОбработчиковСтрокКоллекции(ОбработчикиСтрок);
	
КонецПроцедуры

// Описание текстов запросов, которые требуется выполнить для получения всех необходимых данных, необходимых для 
// обработки строк.
// 
// Параметры:
//  Действия - см. ОбработатьСтрокиТЧ.СтруктураДействий.
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ДополнитьТекстыЗапросовИсточниковДанных(Действия, КэшированныеЗначения)
	
	ОписаниеЗапроса = КэшированныеЗначения.ОписаниеЗапроса; // см. ОписаниеЗапроса()
	
	// Поставляемые тексты запросов для получения все необходимых данных для обработки строк за минимальное количество запросов.
	ДоходыИРасходыСервер.ДополнитьТекстЗапросаЗначенияРеквизитовСтатьи(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	ДоходыИРасходыСервер.ДополнитьТекстЗапросаСтатьяАналитикаРасходовПоУмолчанию(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	ДоходыИРасходыСервер.ДополнитьТекстЗапросаПризнакПринимаетсяКНУ(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	ЗакупкиСервер.ДополнитьТекстЗапросаСтранаПроисхожденияПоНомеруГТД(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	ЗакупкиСервер.ДополнитьТекстЗапросаТипНомераГТД(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	
	НоменклатураПродаваемаяСовместно.ДополнитьТекстЗапросаПолучитьДанныеОНоменклатуреПродаваемойСовместно(Действия, 
		ОписаниеЗапроса, КэшированныеЗначения);
	
	НоменклатураСервер.ДополнитьТекстЗапросаРеквизитыПоНоменклатуре(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	НоменклатураСервер.ДополнитьТекстЗапросаСодержаниеУслуги(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	НоменклатураСервер.ДополнитьТекстЗапросаСтранаПроисхожденияНоменклатуры(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	НоменклатураСервер.ДополнитьТекстЗапросаШтрихкодыНоменклатуры(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	НоменклатураСервер.ДополнитьТекстЗапросаКодТНВЭДПоНоменклатуре(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	ПродажиСервер.ДополнитьТекстЗапросаДанныеПоДокументуПриобретения(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	ПродажиСервер.ДополнитьТекстЗаполнениеВидаЦены(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	СкладыСервер.ДополнитьТекстЗапросаПроверитьЗаполнитьСклад(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	СкладыСервер.ДополнитьТекстЗапросаПризнакДвиженияПоСкладскимРегистрам(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	СкладыСервер.ДополнитьТекстЗапросаПризнакОрдерногоСклада(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	СкладыСервер.ДополнитьТекстЗапросаИспользоватьАдресноеХранение(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	СкладыСервер.ДополнитьТекстЗапросаИспользоватьСкладскиеПомещения(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	СкладыСервер.ДополнитьТекстЗапросаЗаполнитьПомещение(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	ТМЦВЭксплуатацииСервер.ДополнитьОписаниеЗапросаПакетнойОбработкиТЧ(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	УчетНДСУП.ДополнитьТекстЗапросаСтавкаНДСПоСпискуНоменклатуры(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	УчетНДСУП.ДополнитьТекстЗапросаСтавкаПоСтавкеНДС(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	УчетНДСУП.ДополнитьТекстЗапросаСтавкаПоСтавкеНДССуффикс(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	ОбеспечениеВДокументахСервер.ПакетнаяОбработкаДополнитьИсточникомДанныхОбеспечениеВДокументах(
		Действия,
		ОписаниеЗапроса,
		КэшированныеЗначения);
	
	УчетПрослеживаемыхТоваровЛокализация.ДополнитьТекстыЗапросовИсточниковДанных(Действия,
		ОписаниеЗапроса,
		КэшированныеЗначения);
		
	Справочники.ВариантыКомплектацииНоменклатуры.ДополнитьТекстЗапросаВариантаКомплектацииНоменклатуры(
		Действия,
		ОписаниеЗапроса,
		КэшированныеЗначения);
	
	
	
	НазначенияСервер.ДополнитьТекстЗапросаРеквизитыПоНазначению(Действия, ОписаниеЗапроса, КэшированныеЗначения);

	
	ЦеныПредприятияЗаполнениеСервер.ДополнитьТекстЗапросаЗаполнитьЦенуПередачиПродукцииДавальцу(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	ЦеныПредприятияЗаполнениеСервер.ДополнитьТекстЗапросаПроверитьЗаполнитьЦенуВыпуска(Действия, ОписаниеЗапроса, КэшированныеЗначения);

	ЦеныПредприятияЗаполнениеСервер.ДополнитьТекстЗапросаЗаполнитьЦенуПродажи(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	АссортиментСервер.ДополнитьТекстЗапросаЗаполнитьЦенуПродажиПоАссортименту(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	АссортиментСервер.ДополнитьТекстЗапросаПроверитьАссортиментСтроки(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	ПродажиСервер.ДополнитьТекстЗапросаЗаполнитьУсловияПродаж(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	РозничныеПродажи.ДополнитьТекстЗапросаЗаполнитьУсловияРозничныхПродаж(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	НаправленияДеятельностиСервер.ДополнитьТекстЗапросаНаправлениеДеятельностиПоНазначению(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	НоменклатураПартнеровСервер.ДополнитьТекстЗапросаЗаполнитьНоменклатуруПартнераПоНоменклатуре(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	НоменклатураПартнеровСервер.ДополнитьТекстЗапросаЗаполнитьНоменклатуруПоНоменклатуреПартнера(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	НоменклатураПартнеровСервер.ДополнитьТекстЗапросаПроверитьСопоставленнуюНоменклатуруПартнера(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	НоменклатураСервер.ДополнитьТекстЗапросаПроверитьКорректностьЗаполнитьХарактеристикиИУпаковки(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	НоменклатураСервер.ДополнитьТекстЗапросаЗаполнитьУчетноеКоличествоНоменклатуры(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	НоменклатураСервер.ДополнитьТекстЗапросаПересчитатьКоличествоУпаковок(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	НоменклатураСервер.ДополнитьТекстЗапросаПересчитатьКоличествоУпаковокСуффикс(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	НоменклатураСервер.ДополнитьТекстЗапросаПересчитатьКоличествоУпаковокПоВесу(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	НоменклатураСервер.ДополнитьТекстЗапросаПересчитатьКоличествоУпаковокПоОбъему(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	НоменклатураСервер.ДополнитьТекстЗапросаПроверитьСериюРассчитатьСтатус(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	ЦеныПартнеровЗаполнениеСервер.ДополнитьТекстЗапросаЗаполнитьЦенуЗакупки(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	ЦеныПартнеровЗаполнениеСервер.ДополнитьТекстЗапросаЗаполнитьУсловияЗакупок(Действия, ОписаниеЗапроса, КэшированныеЗначения);

	РетроБонусыСервер.ДополнитьТекстыЗапросовИсточниковДанных(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	ПакетнаяОбработкаТабличнойЧастиСерверЛокализация.ДополнитьТекстыЗапросовИсточниковДанных(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	ТаблицаИсточникДанных = ОписаниеЗапроса.ПараметрыЗапроса.ИсточникДанных; // ТаблицаЗначений -
	
	Для Каждого ДопКолонка Из ОписаниеЗапроса.ДопКолонки Цикл
		ТаблицаИсточникДанных.Колонки.Добавить(ДопКолонка.Ключ, ДопКолонка.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Программное заполнение дополнительных колонок, используется когда данные получить в запросе более сложно, чем программно. 
Процедура ЗаполнитьДополнительныеКолонки(СтруктураДействий, КэшированныеЗначения)
	
	ОбрабатываемаяКоллекция = КэшированныеЗначения.ОписаниеЗапроса.ПараметрыЗапроса.ИсточникДанных;
		
	УчетНДСУП.ЗаполнитьКолонкуДатаПолученияСтавки(ОбрабатываемаяКоллекция, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

Функция ЗависимыеОбработчикиСтрокТЧ(СтруктураДействий, КэшированныеЗначения)

	ЧитаемыеПоля = КэшированныеЗначения.ЧитаемыеПоля;
	ИзменяемыеПоля = КэшированныеЗначения.ИзменяемыеПоля;
	
	МетодыКВыполнению = МетодыКВыполнению(СтруктураДействий, КэшированныеЗначения);
	
	ОчередьОбработчиков = Новый СписокЗначений;
	
	Для Каждого МетодКВыполнению Из МетодыКВыполнению Цикл
		
		ИмяОбработчика = МетодКВыполнению.Обработка;
		ОписаниеОбработчика = ОписаниеОбработчикаСтрокиТЧ();
		ОписаниеОчереди = ОчередьОбработчиков.Добавить(ОписаниеОбработчика, ИмяОбработчика);
		Если ЧитаемыеПоля.Свойство(ИмяОбработчика) Тогда
			ОписаниеОчереди.Значение.ЧитаемыеПоля = ЧитаемыеПоля[ИмяОбработчика];
		КонецЕсли;
		
		Если ИзменяемыеПоля.Свойство(ИмяОбработчика) Тогда
			ОписаниеОчереди.Значение.ИзменяемыеПоля = ИзменяемыеПоля[ИмяОбработчика];
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьЗависимыеОбработчики = Ложь;
	
	// Порядок действий над строкой описан в методе ПриДобавленииОбработчиковСтрокКоллекции
	Для Каждого Обработчик Из ОчередьОбработчиков Цикл
		
		Счетчик = ОчередьОбработчиков.Индекс(Обработчик);
		ОписаниеОбработчика = Обработчик.Значение;
		
		// анализ зависимостей производится от более поздних Действий к более ранним
		Пока Счетчик > 0 Цикл
			Счетчик = Счетчик - 1;
			АнализируемыйОбработчик = ОчередьОбработчиков[Счетчик].Значение;
			
			// Если ранее выполняющийся обработчик изменяет данные, то для более позднего 
			// устанавливаем очередь больше на единицу
			Для Каждого ЧитаемоеПоле Из ОписаниеОбработчика.ЧитаемыеПоля Цикл
				Если АнализируемыйОбработчик.ИзменяемыеПоля.Свойство(ЧитаемоеПоле.Ключ)
					И ОписаниеОбработчика.Очередь <= АнализируемыйОбработчик.Очередь Тогда
						ОписаниеОбработчика.Очередь = АнализируемыйОбработчик.Очередь + 1;
						
						ОписаниеОбработчика.ВедомыеОбработчики.Вставить(
							ОчередьОбработчиков[Счетчик].Представление, АнализируемыйОбработчик);
							
						АнализируемыйОбработчик.ЗависимыеОбработчики.Вставить(
							Обработчик.Представление);
							
						ЕстьЗависимыеОбработчики = Истина;
				КонецЕсли;
			КонецЦикла;
			
			// Если обработчики изменяют одни и те же данные, то их очередь должна быть либо одинакова
			// либо у более позднего очередь больше, чем у более раннего
			Для Каждого ИзменяемоеПоля Из ОписаниеОбработчика.ИзменяемыеПоля Цикл
				Если АнализируемыйОбработчик.ИзменяемыеПоля.Свойство(ИзменяемоеПоля.Ключ)
					И ОписаниеОбработчика.Очередь < АнализируемыйОбработчик.Очередь Тогда
						ОписаниеОбработчика.Очередь = АнализируемыйОбработчик.Очередь;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОчередьОбработчиковСтруктурой = Новый Структура;
	
	Для Каждого Обработчик Из ОчередьОбработчиков Цикл
		ОчередьОбработчиковСтруктурой.Вставить(Обработчик.Представление, Обработчик.Значение);
	КонецЦикла;
	
	Возврат ?(ЕстьЗависимыеОбработчики, ОчередьОбработчиковСтруктурой, Новый Структура);
	
КонецФункции

Функция МетодыКВыполнению(СтруктураДействий, КэшированныеЗначения)

	СоответствиеТЗ = ПакетнаяОбработкаТабличнойЧастиПовтИсп.МетодыКВыполнению();
	СтруктураДействийТЗ = СоответствиеТЗ.Скопировать(Новый Массив()); 
	КопияСтруктурыДействий = Новый Структура;
	Для Каждого КлючЗначение Из СтруктураДействий Цикл
		КопияСтруктурыДействий.Вставить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Для каждого Действие Из КопияСтруктурыДействий Цикл
		
		Если КэшированныеЗначения.Свойство("ПропускаемыеДействия")
			И КэшированныеЗначения.ПропускаемыеДействия.Свойство(Действие.Ключ) Тогда
				Продолжить;
		КонецЕсли;
		
		НайденныеСтроки = СоответствиеТЗ.НайтиСтроки(Новый Структура("Обработка", Действие.Ключ));
		Для каждого Обработка Из НайденныеСтроки Цикл
			 ЗаполнитьЗначенияСвойств(СтруктураДействийТЗ.Добавить(), Обработка);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураДействийТЗ.Сортировать("Порядок");
	
	Возврат СтруктураДействийТЗ;
	
КонецФункции

Процедура ДобавитьВременнуюТаблицуПоКоллекции(ОписаниеЗапроса, Коллекция, КэшированныеЗначения)
	
	ТаблицаИсточник = Новый ТаблицаЗначений();
	
	Если ТипЗнч(Коллекция) = Тип("ТаблицаЗначений") Тогда
		
			Если Коллекция.Колонки.Найти("ИдентификаторСтрокиВТ") = Неопределено Тогда
				
				Коллекция.Колонки.Добавить("ИдентификаторСтрокиВТ", 
					Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
					
				Если Не КэшированныеЗначения.Свойство("ОбработкаОднойСтроки") Тогда
					
					Для Каждого СтрокаКоллекции Из Коллекция Цикл
						СтрокаКоллекции.ИдентификаторСтрокиВТ = Строка(Новый УникальныйИдентификатор());
					КонецЦикла;
					
					КэшированныеЗначения.Вставить("ПутьКИдентификаторуСтроки", "ИдентификаторСтрокиВТ");
				КонецЕсли;
				
			КонецЕсли;
			
			ТаблицаИсточник = Коллекция.Скопировать();
			
	ИначеЕсли ТипЗнч(Коллекция) = Тип("ДанныеФормыКоллекция")
		Или ЭтоТабличнаяЧасть(Коллекция) Тогда
				
		ТаблицаИсточник = ДанныеФормыКоллекцияВТаблицуЗначений(
				Коллекция, КэшированныеЗначения);

	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	* 
		|ПОМЕСТИТЬ
		|	ВтИсточникДанных
		|ИЗ
		|	&ИсточникДанных КАК ВложенныйЗапрос
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторСтрокиВТ";
		
	ОписаниеЗапроса.ТекстыЗапросов.Вставить(0, ТекстЗапроса);
	ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ИсточникДанных", ТаблицаИсточник);
	
	УдалитьНеподдерживаемыеТипыВЗапросе(ОписаниеЗапроса, КэшированныеЗначения);
	
КонецПроцедуры

Процедура УдалитьНеподдерживаемыеТипыНаКлиенте(КэшированныеЗначения)
	
	КэшированныеЗначения.Удалить("ДанныеДляОбработки");
	КэшированныеЗначения.Удалить("ОписаниеЗапроса");
	КэшированныеЗначения.Удалить("ВнешнееОписаниеЗапроса");
	КэшированныеЗначения.Удалить("ТекущаяСтрокаВКоллекции");
	
	Для Каждого КлючЗначение Из КэшированныеЗначения Цикл
		Если ТипЗнч(КлючЗначение.Значение) = Тип("ТаблицаЗначений") Тогда
			КэшированныеЗначения.Удалить(КлючЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьНеподдерживаемыеТипыВЗапросе(ОписаниеЗапроса, КэшированныеЗначения)
	
	ОбрабатываемаяТаблица = ОписаниеЗапроса.ПараметрыЗапроса.ИсточникДанных; // ТаблицаЗначений
		
	Если Не КэшированныеЗначения.Свойство("НеподдерживаемыеПоляВЗапросе") Тогда
		УдаляемыеКолонки = Новый Массив();
		НеподдерживаемыеТипы = Новый Массив();
		НеподдерживаемыеТипы.Добавить(Тип("СписокЗначений"));
		НеподдерживаемыеТипы.Добавить(Тип("СтандартныйПериод"));
		НеподдерживаемыеТипы.Добавить(Тип("ОписаниеТипов"));
		Для каждого Колонка Из ОбрабатываемаяТаблица.Колонки Цикл
			Для Каждого НеподдерживаемыйТип Из НеподдерживаемыеТипы Цикл
				Если Колонка.ТипЗначения.Типы().Найти(НеподдерживаемыйТип) <> Неопределено 
					Или Не Колонка.ТипЗначения.Типы().Количество()
					Или Колонка.ТипЗначения = Неопределено 
					Или Колонка.ТипЗначения = Новый ОписаниеТипов() Тогда
						УдаляемыеКолонки.Добавить(Колонка.Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		КэшированныеЗначения.Вставить("НеподдерживаемыеПоляВЗапросе", УдаляемыеКолонки);
	Иначе
		УдаляемыеКолонки = КэшированныеЗначения.НеподдерживаемыеПоляВЗапросе;
	КонецЕсли;
	
	Для Каждого УдаляемаяКолонка Из УдаляемыеКолонки Цикл
		Если ОбрабатываемаяТаблица.Колонки.Найти(УдаляемаяКолонка) <> Неопределено Тогда
			ОбрабатываемаяТаблица.Колонки.Удалить(УдаляемаяКолонка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗависимостьОбработчиков(ОбработчикЗависимый, ОбработчикВедущий, ОписанияЗависимостей, Цепочка)
	
	Если Не ОписанияЗависимостей.Свойство(ОбработчикЗависимый) Тогда
		Возврат;
	КонецЕсли;
	
	ИндексВЦепочке = Цепочка.Найти(ОбработчикВедущий);
	
	Если ИндексВЦепочке <> Неопределено Тогда
		
		ЦепочкаСЗацикливанием = Новый Массив();
		Для Счетчик = ИндексВЦепочке По Цепочка.Количество() - 1 Цикл
			ЦепочкаСЗацикливанием.Добавить(Цепочка[Счетчик]);
		КонецЦикла;
		
		ЦепочкаСЗацикливанием.Добавить(ОбработчикВедущий);
		ОписаниеЗацикливания = СтрСоединить(ЦепочкаСЗацикливанием, Символы.ПС + Символ(11107) + Символы.ПС);
		
		ТекстСообщения = НСтр("ru = 'Некорректно встроен механизм пакетной обработки строк табличных частей.
									|Обнаружена цикличность в описании зависимостей между обработчиками строк:
									|
									|%1'");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ТекстСообщения,
							ОписаниеЗацикливания);
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ОписанияЗависимостей.Свойство(ОбработчикВедущий) Тогда
		Для Каждого ОписаниеЗависимостей Из ОписанияЗависимостей[ОбработчикВедущий] Цикл
			Если ОписанияЗависимостей.Свойство(ОписаниеЗависимостей) Тогда
				Цепочка.Добавить(ОбработчикВедущий);
				ПроверитьЗависимостьОбработчиков(ОбработчикВедущий,
					ОписаниеЗависимостей, ОписанияЗависимостей, Цепочка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоТабличнаяЧасть(Коллекция)
	
	ТипЗначения = ТипЗнч(Коллекция);
	ТипЗначенияСтрокой = ВРег(СтрЗаменить(Строка(ТипЗначения)," ",""));
	
	ТипЭталонДокумента = Тип("ДокументТабличнаяЧасть.КорректировкаРегистров.ТаблицаРегистров");
	ТипЭталонДокументаСтрокой = ВРег(СтрЗаменить(Строка(ТипЭталонДокумента)," ",""));
	ПозицияРазделителяДокумента = СтрНайти(ТипЭталонДокументаСтрокой,":")-1;
	
	ТипЭталонСправочника = Тип("СправочникТабличнаяЧасть.Организации.КонтактнаяИнформация");
	ТипЭталонСправочникаСтрокой = ВРег(СтрЗаменить(Строка(ТипЭталонСправочника)," ",""));
	ПозицияРазделителяСправочника = СтрНайти(ТипЭталонСправочникаСтрокой,":")-1;
	
	ТипЭталонОбработки = Тип("ОбработкаТабличнаяЧасть.КлиентБанк.БанковскиеСчета");
	ТипЭталонОбработкиСтрокой = ВРег(СтрЗаменить(Строка(ТипЭталонОбработки)," ",""));
	ПозицияРазделителяОбработки = СтрНайти(ТипЭталонОбработкиСтрокой,":")-1;
	
	ЭтоТабличнаяЧасть = Лев(ТипЗначенияСтрокой, ПозицияРазделителяДокумента) = Лев(ТипЭталонДокументаСтрокой, ПозицияРазделителяДокумента)
					ИЛИ Лев(ТипЗначенияСтрокой, ПозицияРазделителяСправочника) = Лев(ТипЭталонСправочникаСтрокой, ПозицияРазделителяСправочника)
					ИЛИ Лев(ТипЗначенияСтрокой, ПозицияРазделителяОбработки) = Лев(ТипЭталонОбработкиСтрокой, ПозицияРазделителяОбработки);
	
	Возврат ЭтоТабличнаяЧасть;
	
КонецФункции

Функция ДанныеФормыКоллекцияВТаблицуЗначений(Коллекция, КэшированныеЗначения, Строки = Неопределено)
	
	ТаблицаИсточник = Коллекция.Выгрузить(Строки);
	ТаблицаИсточник.Колонки.Добавить("ИдентификаторСтрокиВТ",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
	
	Если ТаблицаИсточник.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		Счетчик = 0;
		ИсточникИдентификаторов = ?(Строки = Неопределено, Коллекция, Строки);
		Для Каждого СтрокаКоллекции Из ИсточникИдентификаторов Цикл
			ТаблицаИсточник[Счетчик].ИдентификаторСтрокиВТ = Строка(СтрокаКоллекции.ПолучитьИдентификатор());
			Счетчик = Счетчик + 1;
		КонецЦикла;
		КэшированныеЗначения.Вставить("ПутьКИдентификаторуСтроки", "ПолучитьИдентификатор");
	Иначе
		ТаблицаИсточник.ЗагрузитьКолонку(
			Коллекция.Выгрузить(Строки, "НомерСтроки").ВыгрузитьКолонку("НомерСтроки"), "ИдентификаторСтрокиВТ");
			
		КэшированныеЗначения.Вставить("ПутьКИдентификаторуСтроки", "НомерСтроки");
	КонецЕсли;
	
	Возврат ТаблицаИсточник;
	
КонецФункции

Функция ПолучитьТаблицуПоКоллекции(КоллекцияСтрок, ТабЧасть, КэшированныеЗначения)
	
	Перем ТаблицаЗначений;
	
	Если ТабЧасть = Неопределено
		Или ТабЧасть = КоллекцияСтрок Тогда
		ТаблицаЗначений = КоллекцияСтрок;
	ИначеЕсли ЭтоТабличнаяЧасть(ТабЧасть)
		Или ТипЗнч(ТабЧасть) = Тип("ДанныеФормыКоллекция") Тогда
		КэшированныеЗначения.Вставить("ОбрабатываетсяТабличнаяЧасть");
			
		Если ТипЗнч(КоллекцияСтрок[0]) = Тип("Структура") Тогда
			ТаблицаЗначений = ТабЧасть.Выгрузить(Новый Массив);
			ТаблицаЗначений.Колонки.Добавить(
				"ИдентификаторСтрокиВТ", Новый ОписаниеТипов(
					"Строка", Новый КвалификаторыСтроки(36)));
			
			Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
				НоваяСтрока = ТаблицаЗначений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
				НоваяСтрока.ИдентификаторСтрокиВТ = СтрокаКоллекции.НомерСтроки;
			КонецЦикла;
			
		Иначе
			ТаблицаЗначений = ДанныеФормыКоллекцияВТаблицуЗначений(
				ТабЧасть, КэшированныеЗначения, КоллекцияСтрок);
		КонецЕсли;
			
	ИначеЕсли ТипЗнч(ТабЧасть) = Тип("ТаблицаЗначений") Тогда
		Если КэшированныеЗначения.Свойство("ОбработкаОднойСтроки") Тогда
			ЗаполнитьЗначенияСвойств(ТабЧасть[0], КоллекцияСтрок[0]);
			ТаблицаЗначений = ТабЧасть;
		Иначе
			КэшированныеЗначения.Вставить("ОбрабатываетсяТабличнаяЧасть");
			
			Если ТабЧасть.Колонки.Найти("ИдентификаторСтрокиВТ") = Неопределено Тогда
				
				ТабЧасть.Колонки.Добавить("ИдентификаторСтрокиВТ", 
					Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
				
				Для Каждого СтрокаКоллекции Из ТабЧасть Цикл
					СтрокаКоллекции.ИдентификаторСтрокиВТ = Строка(Новый УникальныйИдентификатор());
				КонецЦикла;
				
			КонецЕсли;
			ТаблицаЗначений = ТабЧасть.Скопировать(КоллекцияСтрок);
			КэшированныеЗначения.Вставить("ПутьКИдентификаторуСтроки", "ИдентификаторСтрокиВТ");
		КонецЕсли;
	КонецЕсли;
		
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция ОписаниеОбработчикаСтрокиТЧ()
	
	ОписаниеОбработчика = Новый Структура;
	ОписаниеОбработчика.Вставить("Очередь", 1);
	ОписаниеОбработчика.Вставить("ЧитаемыеПоля", Новый Структура);
	ОписаниеОбработчика.Вставить("ИзменяемыеПоля", Новый Структура);
	ОписаниеОбработчика.Вставить("ЗависимыеОбработчики", Новый Структура);
	ОписаниеОбработчика.Вставить("ВедомыеОбработчики", Новый Структура);
	
	Возврат ОписаниеОбработчика;
	
КонецФункции

Процедура ИнициализироватьПакетнуюОбработку(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, КоллекцияСтрок, ТекущаяСтрокаВКоллекции)
	
	// Убрать после выполнения задач встраивания
	Если КоллекцияСтрок = Неопределено
		Или ТекущаяСтрокаВКоллекции = Неопределено Тогда
		 ВызватьИсключение НСтр("ru = 'Некорректно встроен механизм пакетной обработки строк табличных частей.
										|В обязательных параметрах передано значение Неопределено.'");
	КонецЕсли;
	
	КэшированныеЗначения.Вставить("ТекущаяСтрокаВКоллекции", ТекущаяСтрокаВКоллекции);
	КэшированныеЗначения.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	
	Если Не КэшированныеЗначения.Свойство("ИнициализацияЗавершена")
		Или Не КэшированныеЗначения.Свойство("МетодыКВыполнению") Тогда
			
		Если Не КэшированныеЗначения.Свойство("ЧитаемыеПоля") Тогда
			ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПоляСтрокиПоДействиям(
				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
			
		Если Не КэшированныеЗначения.Свойство("ЕстьЗависимыеОбработчики") Тогда
			КэшированныеЗначения.Вставить("ЕстьЗависимыеОбработчики",
				ЗависимыеОбработчикиСтрокТЧ(СтруктураДействий, КэшированныеЗначения).Количество());
		КонецЕсли;
		
		Если КэшированныеЗначения.ЕстьЗависимыеОбработчики
			И Не КэшированныеЗначения.Свойство("ОбработкаКоллекции") Тогда
				ИмяМетода = "ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокиТЧ";
				ТекстИсключения = СтрШаблон(НСтр("ru = 'Некорректно встроен механизм пакетной обработки строк табличных частей.
										|В структуре действий указаны зависимые друг от друга действия.
										|Для обработки строк коллекции в такой ситуации следует использовать метод 
										|%1, передав в параметры только строки, требующие обработки.'"), ИмяМетода);
				ВызватьИсключение ТекстИсключения;
		КонецЕсли;
			
		КэшированныеЗначения.Вставить("МетодыКВыполнению", МетодыКВыполнению(СтруктураДействий, КэшированныеЗначения));
		
		ОписаниеЗапроса = ОписаниеЗапроса();
		
		КэшированныеЗначения.Вставить("ОписаниеЗапроса", ОписаниеЗапроса);
		
		// Формирование временной таблицы источника данных
		ДобавитьВременнуюТаблицуПоКоллекции(ОписаниеЗапроса, КоллекцияСтрок, КэшированныеЗначения);
		
		// Добавление запросов механизмами, обрабатывающими строки из общих модулей
		ДополнитьТекстыЗапросовИсточниковДанных(СтруктураДействий, КэшированныеЗначения);
		
		// Добавление запросов механизмами, обрабатывающими строки из места встраивания
		Если КэшированныеЗначения.Свойство("ВнешнееОписаниеЗапроса") Тогда
				Для Каждого ТекстЗапроса Из КэшированныеЗначения.ВнешнееОписаниеЗапроса.ТекстыЗапросов Цикл
					КэшированныеЗначения.ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса.Значение, ТекстЗапроса.Представление);
				КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(КэшированныеЗначения.ОписаниеЗапроса.ПараметрыЗапроса,
																КэшированныеЗначения.ВнешнееОписаниеЗапроса.ПараметрыЗапроса);
		КонецЕсли;
		
		Если ЭтоТабличнаяЧасть(КоллекцияСтрок) Тогда
			КэшированныеЗначения.Вставить("ОбрабатываетсяТабличнаяЧасть");
		КонецЕсли;
		
		ЗаполнитьДополнительныеКолонки(СтруктураДействий, КэшированныеЗначения);
		
		Запрос = Новый Запрос();
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Запрос.Параметры, ОписаниеЗапроса.ПараметрыЗапроса);
		
		Если ОписаниеЗапроса.ТекстыЗапросов.Количество() > 1 Тогда
			Если Не ПривилегированныйРежим() И ОписаниеЗапроса.ПривилегированныйРежим Тогда
				УстановитьПривилегированныйРежим(Истина);
			КонецЕсли;
			Таблицы = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, ОписаниеЗапроса.ТекстыЗапросов, ,Истина, Истина);
			Если ОписаниеЗапроса.ПривилегированныйРежим Тогда
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
			Для Каждого Таблица Из Таблицы Цикл
				Если Таблица.Значение.Колонки.Найти("ИдентификаторСтрокиВТ") <> Неопределено Тогда
					Таблица.Значение.Индексы.Добавить("ИдентификаторСтрокиВТ");
				КонецЕсли;
			КонецЦикла;
			
			КэшированныеЗначения.Вставить("ДанныеДляОбработки", Таблицы);
		Иначе
			КэшированныеЗначения.Вставить("ДанныеДляОбработки", Неопределено);
		КонецЕсли;
		
		ТЗПоКоллекции = КэшированныеЗначения.ОписаниеЗапроса.ПараметрыЗапроса.ИсточникДанных; // ТаблицаЗначений
			
		КэшированныеЗначения.Вставить("КолонкиКоллекции", ТЗПоКоллекции.Колонки);
		КэшированныеЗначения.Удалить("ОписаниеЗапроса");
		КэшированныеЗначения.Удалить("ВнешнееОписаниеЗапроса");
		
		// формирование шаблона текста кода для обработки одной строки
		
		СтрокиКодаДляОднойСтроки = Новый Массив();
	
		Для каждого ДействиеМетод Из КэшированныеЗначения.МетодыКВыполнению Цикл
			// Проверка на наличие действия в списке действий нужна для выполнения действия по условию в зависимости 
			// от данных строки. Для действия которое не требуется выполнять для конкретной строке оно будет удалено
			// из структуры действий
			Если СтруктураДействий.Свойство(ДействиеМетод.Обработка)
				И СтрокиКодаДляОднойСтроки.Найти(ДействиеМетод.Метод) = Неопределено Тогда
					СтрокиКодаДляОднойСтроки.Добавить(ДействиеМетод.Метод);
			КонецЕсли;
		КонецЦикла;
		
		КодОбработкиОднойСтроки = СтрСоединить(СтрокиКодаДляОднойСтроки, Символы.ПС);
		
		КэшированныеЗначения.Вставить("КодОбработкиОднойСтроки", КодОбработкиОднойСтроки);
		КэшированныеЗначения.Вставить("ИнициализацияЗавершена");
	
	КонецЕсли;
	
КонецПроцедуры

Функция КодЗаменыТекущейСтроки()
	
	СтрокиКода = Новый Массив();
	СтрокиКода.Добавить("ПакетнаяОбработкаТабличнойЧастиСервер.ОбновитьТекущуюСтроку");
	СтрокиКода.Добавить("(");
	СтрокиКода.Добавить("Параметры");
	СтрокиКода.Добавить(");");
	
	Возврат СтрСоединить(СтрокиКода);

КонецФункции

Процедура ВыполнитьКодОбработкиСтрок(Параметры, КэшированныеЗначения, КоличествоСтрокВКоллекции = 1)
	
	КодКВыполнению = Новый Массив();
		
	Параметры.Вставить("КэшированныеЗначения", КэшированныеЗначения);
	Параметры.Вставить("Счетчик", 0);
	
	КодОбработкиСтроки = КэшированныеЗначения.КодОбработкиОднойСтроки;
	КодЗаменыТекущейСтроки = КодЗаменыТекущейСтроки();
	
	Если Параметры.КэшированныеЗначения.Свойство("ОбработкаКоллекции") Тогда
		Для Счетчик = 0 По КоличествоСтрокВКоллекции - 1 Цикл
			КодКВыполнению.Добавить(КодЗаменыТекущейСтроки);
			КодКВыполнению.Добавить(КодОбработкиСтроки);
		КонецЦикла;
	Иначе
		КодКВыполнению.Добавить(КодОбработкиСтроки);
	КонецЕсли;
	
	Алгоритм = СтрСоединить(КодКВыполнению, Символы.ПС);
	ОбщегоНазначения.ВыполнитьВБезопасномРежиме(Алгоритм, Параметры);
	
КонецПроцедуры

Процедура ОчиститьПарметрыДействий(СтруктураДействий)
	
	ДействияКОчисткеПараметров = ДействияКОчисткеПараметров();
	
	Для Каждого Действие Из ДействияКОчисткеПараметров Цикл
		Если СтруктураДействий.Свойство(Действие) Тогда
			СтруктураДействий.Удалить(Действие);
			СтруктураДействий.Вставить(Действие);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДействияКОчисткеПараметров()
	
	Действия = Новый Массив;
	
	Действия.Добавить("ПересчитатьСуммуСУчетомПогрешностиОкругления");
	
	Возврат Действия;
	
КонецФункции


#Область ОбработчикиСтрок

Процедура ПолучитьКоэффициентРНПТВнутренний(ТекущаяСтрока, Действия, КэшированныеЗначения, ИмяСвойства)

	Перем ПараметрыПересчета;
	Если Действия.Свойство(ИмяСвойства, ПараметрыПересчета) Тогда
		
		ИмяПоляКоличество = "Количество";
		ИмяПоляКоличествоПоРНПТ = "КоличествоПоРНПТ";
		Если ПараметрыПересчета.Свойство("ИменаПолейССуффиксом")
			И ЗначениеЗаполнено(ПараметрыПересчета.ИменаПолейССуффиксом) Тогда
			
			Если ПараметрыПересчета.ИменаПолейССуффиксом.Свойство("Количество") Тогда
				ИмяПоляКоличество = ПараметрыПересчета.ИменаПолейССуффиксом.Количество;
			КонецЕсли;
			Если ПараметрыПересчета.ИменаПолейССуффиксом.Свойство("КоличествоПоРНПТ") Тогда
				ИмяПоляКоличествоПоРНПТ = ПараметрыПересчета.ИменаПолейССуффиксом.КоличествоПоРНПТ;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущаяСтрока.ВедетсяУчетПоРНПТ Тогда
			Если Действия.Свойство("ЗаполнитьТипНомераГТД") Тогда
				Если ТекущаяСтрока.ТипНомераГТД = ПредопределенноеЗначение("Перечисление.ТипыНомеровГТД.НомерРНПТКомплекта") Тогда
					ТекущаяСтрока[ИмяПоляКоличествоПоРНПТ] = ТекущаяСтрока[ИмяПоляКоличество];
				КонецЕсли;
			Иначе
				ДанныеДляОбработки = ДанныеДляОбработкиСтроки("РасчетКоличестваПоРНПТ", КэшированныеЗначения); 
				Если Не ДанныеДляОбработки = Неопределено Тогда
					Коэффициент = ДанныеДляОбработки[0].Коэффициент;
					ТекущаяСтрока[ИмяПоляКоличествоПоРНПТ] = ТекущаяСтрока[ИмяПоляКоличество] * Коэффициент;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекущаяСтрока[ИмяПоляКоличествоПоРНПТ] = 0;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииЗаполненияСлужебныхРеквизитовПоНоменклатуре

// Возвращает шаблон поля выборки соответствующий для указанного ключа действия
//
// Параметры:
//  КлючДействия						 - Строка	 - Строка имени ключа действия
//  ТолькоПроверитьПоддерживаемыеКлючи	 - Булево - признак проверки поддержки ключа действия.
// 
// Возвращаемое значение:
//  Строка, Неопределено - Строка шаблон поля запроса.
//
Функция ШаблонПоляВыборкиПоКлючуДействия(КлючДействия, ТолькоПроверитьПоддерживаемыеКлючи = Ложь)
	
	ШаблонЛокализация = "";
	ПакетнаяОбработкаТабличнойЧастиСерверЛокализация.ПриОпределенииШаблонаПоляВыборкиПоКлючуДействия(КлючДействия, ШаблонЛокализация);
	Если ЗначениеЗаполнено(ШаблонЛокализация) Тогда
		Возврат ШаблонЛокализация;
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакТипНоменклатуры" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ТипНоменклатуры КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакВидНоменклатуры" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ВидНоменклатуры КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакЕдиницаИзмерения" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ЕдиницаИзмерения КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакТипИзмеряемойВеличины" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ЕдиницаИзмерения.ТипИзмеряемойВеличины КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьВесУпаковки" Тогда
		ТекстЗапроса = ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ТОГДА &ТекстЗапросаВесУпаковки
		|	ИНАЧЕ &ТекстЗапросаВесНоменклатуры
		|	КОНЕЦ КАК ВесУпаковки";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаВесУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("втТаблицаНоменклатуры.Упаковка","втТаблицаНоменклатуры.Номенклатура", Ложь));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаВесНоменклатуры",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("втТаблицаНоменклатуры.Номенклатура.ЕдиницаИзмерения","втТаблицаНоменклатуры.Номенклатура", Ложь));
		Возврат ТекстЗапроса
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьОбъемУпаковки" Тогда
		ТекстЗапроса = ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ТОГДА &ТекстЗапросаОбъемУпаковки
		|	ИНАЧЕ &ТекстЗапросаОбъемНоменклатуры
		|	КОНЕЦ КАК ОбъемУпаковки";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаОбъемУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("втТаблицаНоменклатуры.Упаковка","втТаблицаНоменклатуры.Номенклатура", Ложь));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаОбъемНоменклатуры",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("втТаблицаНоменклатуры.Номенклатура.ЕдиницаИзмерения","втТаблицаНоменклатуры.Номенклатура", Ложь));
		Возврат ТекстЗапроса
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьЕдиницуИзмеренияВеса" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.ВесЕдиницаИзмерения
		|	ИНАЧЕ втТаблицаНоменклатуры.Номенклатура.ВесЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмеренияВеса";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьЕдиницуИзмеренияОбъема" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.ОбъемЕдиницаИзмерения
		|	ИНАЧЕ втТаблицаНоменклатуры.Номенклатура.ОбъемЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмеренияОбъема";
	КонецЕсли;
	
	Если КлючДействия = "ПересчитатьВесОбъем" Тогда
		ТекстЗапроса = ",
		|	втТаблицаНоменклатуры.%Ключ% * &ТекстЗапросаВесУпаковки / 
		|	ВЫБОР
		|		КОГДА втТаблицаНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ИЛИ втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|			И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ВесЕдиницаИзмерения.Знаменатель, 0) <> 0
		|			ТОГДА ВЫРАЗИТЬ(втТаблицаНоменклатуры.Номенклатура.ВесЕдиницаИзмерения.Числитель / втТаблицаНоменклатуры.Номенклатура.ВесЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(27, 11))
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Вес,
		|	втТаблицаНоменклатуры.%Ключ% * &ТекстЗапросаОбъемУпаковки /
		|	ВЫБОР
		|		КОГДА втТаблицаНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ИЛИ втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|			И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель, 0) <> 0
		|			ТОГДА ВЫРАЗИТЬ(втТаблицаНоменклатуры.Номенклатура.ОбъемЕдиницаИзмерения.Числитель / втТаблицаНоменклатуры.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(27, 11))
		|	ИНАЧЕ 1
		|	КОНЕЦ КАК Объем";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
				"втТаблицаНоменклатуры.Упаковка",
				"втТаблицаНоменклатуры.Номенклатура",
				Ложь));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
				"втТаблицаНоменклатуры.Упаковка",
				"втТаблицаНоменклатуры.Номенклатура",
				Ложь));
		
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Если КлючДействия = "ПересчитатьКоличествоУпаковок" Тогда
		ТекстЗапроса = ",
		|	втТаблицаНоменклатуры.%Ключ% / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК %ЗначениеЗамены%";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"втТаблицаНоменклатуры.Упаковка",
				"втТаблицаНоменклатуры.Номенклатура"));
		
		Возврат ТекстЗапроса;
	КонецЕсли;

	Если КлючДействия = "ЗаполнитьПризнакАртикул" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.Артикул КАК %ЗначениеЗамены%";
	КонецЕсли;

	Если КлючДействия = "ЗаполнитьПризнакКод" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.Код КАК %ЗначениеЗамены%";
	КонецЕсли;

	Если КлючДействия = "ЗаполнитьПризнакОписание" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.Описание КАК %ЗначениеЗамены%";
	КонецЕсли;

	Если КлючДействия = "ЗаполнитьПризнакВариантОформленияПродажи" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ВариантОформленияПродажи КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакХарактеристикиИспользуются" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.%Ключ%.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|																			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|																			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|		ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакВедетсяУчетПоГТД" Тогда
		Возврат ",
		|	ЕСТЬNULL(втТаблицаНоменклатуры.%Ключ%.ВестиУчетПоГТД, ЛОЖЬ) КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакВедетсяУчетПоРНПТ" Тогда
		Возврат ",
		|	ЕСТЬNULL(втТаблицаНоменклатуры.%Ключ%.ПрослеживаемыйТовар, ЛОЖЬ)
		|		И ЕСТЬNULL(втТаблицаНоменклатуры.%Ключ%.ВестиУчетПоГТД, ЛОЖЬ) КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьЕдиницуИзмеренияТНВЭД" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ЕдиницаИзмеренияТНВЭД КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакЭтоУслуга" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.%Ключ%.ТипНоменклатуры НЕ В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|		ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакСерииИспользуются" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ВидНоменклатуры.ИспользоватьСерии КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если ТипЗнч(КлючДействия) = Тип("Строка")
		И Не ТолькоПроверитьПоддерживаемыеКлючи Тогда
		ТекстЗапроса =
			",
			|	втТаблицаНоменклатуры.%Ключ%.%ИмяПоля% КАК %ЗначениеЗамены%";
		Возврат СтрЗаменить(ТекстЗапроса, "%ИмяПоля%", КлючДействия);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает коэффициенты по РНПТ для указанной Организации и списка товаров.
//
// Параметры:
//	ИсключаемыйДокумент - ДокументСсылка - документ, движения которого исключаются при расчета коэффициента по РНПТ.
//	Организация - СправочникСсылка.Организации - организация, для которой рассчитываются коэффициенты по РНПТ.
//	Товары - ТаблицаЗначений - таблица, содержащая сведения о товарах.
//	КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке данных.
//	Соглашение - СправочникСсылка.СоглашенияСКлиентами - соглашение, для которого рассчитываются коэффициенты по РНПТ.
//	
// Возвращаемое значение:
//	ТаблицаЗначений - см. УчетПрослеживаемыхТоваровЛокализация.ПолучитьКоэффициентыПрослеживаемыхТоваров
//
Функция ПолучитьКоэффициентРНПТ(ИсключаемыйДокумент, Организация, Товары, КэшированныеЗначения, Соглашение = Неопределено) Экспорт
	
	Коэффициенты =
		УчетПрослеживаемыхТоваровЛокализация.ПолучитьКоэффициентыПрослеживаемыхТоваров(
			ИсключаемыйДокумент,
			Организация,
			Товары,
			Соглашение);
	
	Возврат Коэффициенты;
	
КонецФункции

Функция ДействиеИсключение(Действие)
	
	ИсключенияИзДействий = Новый Массив();
	ИсключенияИзДействий.Добавить("МетодыКВыполнению");
	ИсключенияИзДействий.Добавить("КоличествоДействий"); 
	
	Возврат Не ИсключенияИзДействий.Найти(Действие.Ключ) = Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти
