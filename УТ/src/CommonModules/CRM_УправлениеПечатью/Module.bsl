#Область ПрограммныйИнтерфейс

// Вызывается из обработчика ПриСозданииНаСервере формы печати документов (ОбщаяФорма.ПечатьДокументов).
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма ОбщаяФорма.ПечатьДокументов.
//
Процедура ПечатьДокументовПриСозданииНаСервере(Форма) Экспорт
	
	Если Форма.Команды.Найти("CRM_ОтправитьВДиалогах") = Неопределено Тогда
		
		ЕстьДанныеДляПечати = Ложь;
		
		Для Каждого НастройкаПечатнойФормы Из Форма.НастройкиПечатныхФорм Цикл
			ЕстьДанныеДляПечати = ЕстьДанныеДляПечати Или Форма[НастройкаПечатнойФормы.ИмяРеквизита].ВысотаТаблицы > 0;
		КонецЦикла;
		
		Команда = Форма.Команды.Добавить("CRM_ОтправитьВДиалогах");
		Команда.Действие = "Подключаемый_ОтправитьВДиалогах";
		Команда.Картинка = БиблиотекаКартинок.CRM_ОтправкаЧерезМессенджер;
		Команда.Подсказка = НСтр("ru = 'Отправить в диалогах'");
		
		Кнопка = Форма.Элементы.Добавить("CRM_ОтправитьВДиалогах", Тип("КнопкаФормы"),
			 Форма.Элементы.Найти("ГруппаСохранитьОтправить"));
		Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Кнопка.ИмяКоманды = "CRM_ОтправитьВДиалогах";
		Кнопка.Видимость = ЕстьДанныеДляПечати;
		
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("CRM_Служебный", Новый ОписаниеТипов("Строка")));
		
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		Элемент = Форма.Элементы.Добавить("CRM_Служебный", Тип("ПолеФормы"));
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.Видимость = Ложь;
		Элемент.ПутьКДанным = "CRM_Служебный";
		
	КонецЕсли;
	
	Если Форма.Команды.Найти("CRM_ПерейтиКУправлениюМакетами") = Неопределено Тогда
		
		Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПользовательскиеМакетыПечати) Тогда
			Возврат;
		КонецЕсли;
		
		НайденнаяКоманда = Форма.Элементы.Найти("КнопкаПерейтиКУправлениюМакетами");
		Если Не НайденнаяКоманда = Неопределено Тогда
			НайденнаяКоманда.Видимость = Ложь;
		КонецЕсли;
		
		Команда = Форма.Команды.Добавить("CRM_ПерейтиКУправлениюМакетами");
		Команда.Действие = "Подключаемый_ПерейтиКУправлениюМакетами";
		Команда.Подсказка = НСтр("ru = 'Перейти к управлению макетами'");
		
		Кнопка = Форма.Элементы.Добавить("CRM_ПерейтиКУправлениюМакетами", Тип("КнопкаФормы"),
			 Форма.Элементы.Найти("ГруппаРедактированиеМакета"));
		Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Кнопка.ИмяКоманды = "CRM_ПерейтиКУправлениюМакетами";
		Кнопка.Заголовок = НСтр("ru = 'Перейти к макетам печатных форм'");
		Кнопка.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры открытия для мессенджера.
//
// Параметры:
//	ОбъектСсылка - Ссылка - ссылка на объект.
//
// Возвращаемое значение:
//	Структура - параметры открытия для мессенджера.
Функция ПолучитьПараметрыОткрытияДляМессенджера(ОбъектСсылка) Экспорт
	ПараметрыДиалога = Новый Структура;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектСсылка, "КонтактноеЛицо")
			И ЗначениеЗаполнено(ОбъектСсылка["КонтактноеЛицо"]) Тогда
		ПараметрыДиалога.Вставить("ПараметрОткрытия", ОбъектСсылка["КонтактноеЛицо"]);
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектСсылка, "Партнер")
			И ЗначениеЗаполнено(ОбъектСсылка["Партнер"]) Тогда
		ПараметрыДиалога.Вставить("ПараметрОткрытия", ОбъектСсылка["Партнер"]);
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектСсылка, "Клиент")
			И ЗначениеЗаполнено(ОбъектСсылка["Клиент"]) Тогда
		ПараметрыДиалога.Вставить("ПараметрОткрытия", ОбъектСсылка["Клиент"]);
	КонецЕсли;
    Возврат ПараметрыДиалога;
КонецФункции

// Функция возвращает структуру описания макета.
// 
// Возвращаемое значение:
//   - Структура:
//  * Ссылка - СправочникСсылка.МакетыПечатныхФорм
//  * АдресМакетаВоВременномХранилище - Строка
//  * ИмяОбъектаМетаданныхМакета - Строка
//  * КодЯзыка - Строка
//  * Владелец - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  * Наименование - Строка
//  * ТипМакета - Строка
//  * ИсточникиДанных - Строка
//  * CRM_ИмяМакета - Строка
//  * CRM_ПоставляемыйМакет - Булево
//  * Используется - Булево
//
Функция ОписаниеМакета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка");
	Результат.Вставить("АдресМакетаВоВременномХранилище");
	Результат.Вставить("ИмяОбъектаМетаданныхМакета");
	Результат.Вставить("КодЯзыка");
	Результат.Вставить("Владелец");
	Результат.Вставить("Наименование");
	Результат.Вставить("ТипМакета");
	Результат.Вставить("ИсточникиДанных");
	
	// +CRM
	Результат.Вставить("CRM_ИмяМакета");
	Результат.Вставить("CRM_ПоставляемыйМакет");
	Результат.Вставить("Используется");
	// -CRM
	
	Возврат Результат;
	
КонецФункции

// Сохраняет пользовательский макет печати в информационной базе.
// 
// Параметры:
//  ОписаниеМакета - см. ОписаниеМакета
// 
// Возвращаемое значение:
//  Строка
// 
Функция ЗаписатьМакет(ОписаниеМакета) Экспорт
	
	ИмяОбъектаМетаданныхМакета = ОписаниеМакета.ИмяОбъектаМетаданныхМакета;
	ИдентификаторМакета = ИмяОбъектаМетаданныхМакета; // +CRM
	АдресМакетаВоВременномХранилище = ОписаниеМакета.АдресМакетаВоВременномХранилище;
	КодЯзыка = ОписаниеМакета.КодЯзыка;
	
	Если Не ЗначениеЗаполнено(ИмяОбъектаМетаданныхМакета) Или ЗначениеЗаполнено(ОписаниеМакета.Ссылка) Тогда
		// +CRM
		//Возврат Справочники.МакетыПечатныхФорм.ЗаписатьМакет(ОписаниеМакета);
		ИдентификаторМакета = ЗаписатьМакетВСправочник(ОписаниеМакета);
		// -CRM
	КонецЕсли;
	
	// +CRM
	Если Не ОписаниеМакета.CRM_ПоставляемыйМакет Тогда
		Возврат ИдентификаторМакета;
	КонецЕсли;
	// -CRM
	
	Если Не ЗначениеЗаполнено(ИмяОбъектаМетаданныхМакета) Тогда
		ИмяОбъектаМетаданныхМакета = ИдентификаторМакета;
	КонецЕсли;
	
	ИзмененныйМакет = ПолучитьИзВременногоХранилища(АдресМакетаВоВременномХранилище);
	
	ЧастиИмени = СтрРазделить(ИмяОбъектаМетаданныхМакета, ".");
	ИмяМакета = ЧастиИмени[ЧастиИмени.ВГраница()];
	
	ИмяВладельца = "";
	Для НомерЧасти = 0 По ЧастиИмени.ВГраница()-1 Цикл
		Если Не ПустаяСтрока(ИмяВладельца) Тогда
			ИмяВладельца = ИмяВладельца + ".";
		КонецЕсли;
		ИмяВладельца = ИмяВладельца + ЧастиИмени[НомерЧасти];
	КонецЦикла;
	
	Если ЧастиИмени.Количество() = 3 Тогда
		УстановитьОтключениеБезопасногоРежима(Истина);
		УстановитьПривилегированныйРежим(Истина);
		
		МакетИзМетаданных = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяВладельца).ПолучитьМакет(ИмяМакета);
		
		УстановитьПривилегированныйРежим(Ложь);
		УстановитьОтключениеБезопасногоРежима(Ложь);
	Иначе
		МакетИзМетаданных = ПолучитьОбщийМакет(ИмяМакета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодЯзыка) Тогда
		ИмяМакета = ИмяМакета + "_" + КодЯзыка;
	КонецЕсли;
	
	// Запись только для предопределенных
	Запись = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьМенеджерЗаписи();
	Запись.Объект = ИмяВладельца;
	Запись.ИмяМакета = ИмяМакета;
	// +CRM
	//Если МакетыРазличаются(МакетИзМетаданных, ИзмененныйМакет) Тогда
	Если УправлениеПечатью.МакетыРазличаются(МакетИзМетаданных, ИзмененныйМакет) Тогда
	// -CRM
		
		Запись.Использование = Истина;
		Запись.Макет = Новый ХранилищеЗначения(ИзмененныйМакет, Новый СжатиеДанных(9));
		Запись.Записать();
	Иначе
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			Запись.Удалить();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИдентификаторМакета;
	
КонецФункции

// Функция выполняет запись элемента справочника "МакетыПечатныхФорм"
//
// Параметры:
//  ОписаниеМакета	 - Структура	 - Поля макета и их значения.
// 
// Возвращаемое значение:
//   - Строка
//
Функция ЗаписатьМакетВСправочник(ОписаниеМакета) Экспорт
	
	Ссылка = ОписаниеМакета.Ссылка;
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Объект = Ссылка.ПолучитьОбъект();
	Иначе
		Объект = Справочники.МакетыПечатныхФорм.СоздатьЭлемент();
		Объект.ТипМакета = ОписаниеМакета.ТипМакета;
		Объект.Идентификатор = Новый УникальныйИдентификатор;
		// +CRM
		Объект.CRM_ИмяМакета = ОписаниеМакета.CRM_ИмяМакета;
		Объект.CRM_ПоставляемыйМакет = ОписаниеМакета.CRM_ПоставляемыйМакет;
		// -CRM
	КонецЕсли;
	
	Объект.ИсточникиДанных.Очистить();
	Для Каждого ИсточникДанных Из ОписаниеМакета.ИсточникиДанных Цикл
		НоваяСтрока = Объект.ИсточникиДанных.Добавить();
		НоваяСтрока.ИсточникДанных = ИсточникДанных;
	КонецЦикла;
	
	// +CRM
	Если НЕ ОписаниеМакета.Используется = Неопределено Тогда
		Объект.Используется = ОписаниеМакета.Используется;
	КонецЕсли;
	// -CRM
	
	Наименование = ОписаниеМакета.Наименование;
	КодЯзыка = ОписаниеМакета.КодЯзыка;
	
	// +CRM
	МакетИзВременногоХранилища = ПолучитьИзВременногоХранилища(ОписаниеМакета.АдресМакетаВоВременномХранилище);
	Если ТипЗнч(МакетИзВременногоХранилища) = Тип("ТабличныйДокумент") Тогда
		Макет = Новый ХранилищеЗначения(МакетИзВременногоХранилища);
	Иначе
		СтруктураМакета = Новый Структура("Макет, КодЯзыка");
		СтруктураМакета.Макет = МакетИзВременногоХранилища;
		СтруктураМакета.КодЯзыка = КодЯзыка;
		
		Макет = Новый ХранилищеЗначения(СтруктураМакета);
	КонецЕсли;
	// -CRM
	
	ОбщегоНазначения.УстановитьЗначениеРеквизита(Объект, "Наименование", Наименование, КодЯзыка);
	ОбщегоНазначения.УстановитьЗначениеРеквизита(Объект, "Макет", Макет, КодЯзыка);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.МакетыПечатныхФорм");
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Объект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ?(Объект.CRM_ПоставляемыйМакет, Объект.CRM_ИмяМакета, "ПФ_" + Строка(Объект.Идентификатор));
	
КонецФункции

// Функция возвращает макет печатной формы.
//
// Параметры:
//  ПутьКМакету			 - Строка	 - Путь к макету.
//  КодЯзыка			 - Строка	 - Код языка.
//  ТолькоПоставляемый	 - Булево	 - Признак поиска только поставляемых макетов.
// 
// Возвращаемое значение:
//   - ТабличныйДокумент, ДвоичныеДанные - макет.
//
Функция НайтиМакет(ПутьКМакету, КодЯзыка, ТолькоПоставляемый = Ложь) Экспорт
	
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Макет ""%1"" не существует. Операция прервана.'"), ПутьКМакету);
	ЧастиПути = СтрРазделить(ПутьКМакету, ".", Истина);
	
	НайденныйМакет = Справочники.МакетыПечатныхФорм.НайтиМакет(ПутьКМакету, КодЯзыка);
	Если НайденныйМакет <> Неопределено Тогда
		Если ТипЗнч(НайденныйМакет) = Тип("Структура") Тогда
			Возврат НайденныйМакет.Макет;
		Иначе
			Возврат НайденныйМакет;
		КонецЕсли;
	КонецЕсли;

	Если ЧастиПути.Количество() <> 2 И ЧастиПути.Количество() <> 3 Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ИмяМакета = ЧастиПути[ЧастиПути.ВГраница()];
	ЧастиПути.Удалить(ЧастиПути.ВГраница());
	ИмяОбъекта = СтрСоединить(ЧастиПути, ".");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПользовательскиеМакетыПечати.Макет КАК Макет,
	|	ПользовательскиеМакетыПечати.ИмяМакета КАК ИмяМакета
	|ИЗ
	|	РегистрСведений.ПользовательскиеМакетыПечати КАК ПользовательскиеМакетыПечати
	|ГДЕ
	|	ПользовательскиеМакетыПечати.Объект = &Объект
	|	И ПользовательскиеМакетыПечати.ИмяМакета ПОДОБНО &ИмяМакета
	|	И ПользовательскиеМакетыПечати.Использование";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("Объект", ИмяОбъекта);
	Запрос.Параметры.Вставить("ИмяМакета", ИмяМакета + "%");
	
	СписокМакетов = Новый Соответствие;
	
	Если Не ТолькоПоставляемый Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокМакетов.Вставить(Выборка.ИмяМакета, Выборка.Макет.Получить());
		КонецЦикла;
	КонецЕсли;
	
	ИменаПоиска = ИменаМакета(ИмяМакета, КодЯзыка);
	
	Для Каждого ИмяПоиска Из ИменаПоиска Цикл
		НайденныйМакет = СписокМакетов[ИмяПоиска];
		Если НайденныйМакет <> Неопределено Тогда
			УстановитьЯзыкМакета(НайденныйМакет, КодЯзыка);
			Возврат НайденныйМакет;
		КонецЕсли;
	КонецЦикла;
	
	ЭтоОбщийМакет = СтрРазделить(ИмяОбъекта, ".").Количество() = 1;
	
	КоллекцияМакетов = Метаданные.ОбщиеМакеты;
	Если Не ЭтоОбщийМакет Тогда
		ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоПолномуИмени(ИмяОбъекта);
		Если ОбъектМетаданных = Неопределено Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		КоллекцияМакетов = ОбъектМетаданных.Макеты;
	КонецЕсли;
	
	Для Каждого ИмяПоиска Из ИменаПоиска Цикл
		Если КоллекцияМакетов.Найти(ИмяПоиска) <> Неопределено Тогда
			Если ЭтоОбщийМакет Тогда
				Макет = ПолучитьОбщийМакет(ИмяПоиска);
			Иначе
				УстановитьОтключениеБезопасногоРежима(Истина);
				УстановитьПривилегированныйРежим(Истина);
				Макет = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяОбъекта).ПолучитьМакет(ИмяПоиска);
			КонецЕсли;
			УстановитьЯзыкМакета(Макет, КодЯзыка);
			Возврат Макет;
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение ТекстОшибки;
	
КонецФункции

// Процедура добавляет команды печати макета.
//
// Параметры:
//  КомандыПечати		 - ТаблицаЗначений	 - Таблица добавляемых команд печати.
//  ОбъектМетаданных	 - ОбъектМетаданных	 - Объект метаданных.
//  ТолькоВнешниеМакеты	 - Булево	 - Признак добавления команд только для внешних макетов.
//
Процедура ДобавитьКомандыПечати(КомандыПечати, ОбъектМетаданных, ТолькоВнешниеМакеты = Истина) Экспорт
	
	Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных, Ложь);
	Если Владелец = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МакетыПечатныхФорм.Идентификатор КАК Идентификатор,
	|	МакетыПечатныхФорм.Представление КАК Представление,
	|	МакетыПечатныхФорм.УсловиеВидимости КАК УсловияВидимости,
	|	МакетыПечатныхФорм.CRM_ИмяМакета КАК CRM_ИмяМакета,
	|	МакетыПечатныхФорм.ТипМакета КАК ТипМакета,
	|	МакетыПечатныхФорм.CRM_ПоставляемыйМакет КАК CRM_ПоставляемыйМакет
	|ИЗ
	|	Справочник.МакетыПечатныхФорм.ИсточникиДанных КАК МакетыПечатныхФормИсточникиДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МакетыПечатныхФорм КАК МакетыПечатныхФорм
	|		ПО МакетыПечатныхФормИсточникиДанных.Ссылка = МакетыПечатныхФорм.Ссылка
	|ГДЕ
	|	МакетыПечатныхФормИсточникиДанных.ИсточникДанных = &Владелец
	|	И МакетыПечатныхФорм.Используется
	|	И НЕ МакетыПечатныхФорм.ПометкаУдаления";
	
	Если ТолькоВнешниеМакеты Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	И НЕ МакетыПечатныхФорм.CRM_ПоставляемыйМакет";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КомандаПечати = КомандыПечати.Добавить();
		ЗаполнитьЗначенияСвойств(КомандаПечати, Выборка);
		
		Если Выборка.ТипМакета = "MXL" Тогда
			КомандаПечати.Картинка = БиблиотекаКартинок.ФорматMXL;
		ИначеЕсли Выборка.ТипМакета = "DOC" Тогда
			КомандаПечати.Картинка = БиблиотекаКартинок.ФорматWord;
		ИначеЕсли Выборка.ТипМакета = "DOCX" Тогда
			КомандаПечати.Картинка = БиблиотекаКартинок.ФорматWord2007;
		ИначеЕсли Выборка.ТипМакета = "ODT" Тогда
			КомандаПечати.Картинка = БиблиотекаКартинок.ФорматOpenOfficeWriter;
		ИначеЕсли Выборка.ТипМакета = "HTML" Тогда
			КомандаПечати.Картинка = БиблиотекаКартинок.ФорматHTML;
		КонецЕсли;
		
		ИспользоватьПечатьCRM = (Владелец.Имя = "CRM_СчетНаОплатуПокупателю"
			Или Владелец.Имя = "КоммерческоеПредложениеКлиенту"
			Или Владелец.Имя = "CRM_Интерес");
			
		Если Не(Выборка.ТипМакета = "MXL") И ИспользоватьПечатьCRM Тогда
			
			КомандаПечати.МенеджерПечати = "";
			КомандаПечати.Идентификатор  = "ПФ_" + Выборка.ТипМакета + "_" + Строка(КомандаПечати.Идентификатор);
			КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_ВыполнитьКомандуПечатьВнешнегоМакета";
		Иначе
			КомандаПечати.МенеджерПечати = "УправлениеПечатью";
			КомандаПечати.Идентификатор  = "ПФ_" + Строка(КомандаПечати.Идентификатор);
			КомандаПечати.Обработчик = "";
		КонецЕсли;
		
		УсловияВидимости = Выборка.УсловияВидимости.Получить();
		Если ЗначениеЗаполнено(УсловияВидимости) Тогда
			Для Каждого Условие Из УсловияВидимости Цикл
				ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Условие.Реквизит, Условие.Значение, Условие.ВидСравнения); 
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Дублер процедуры РегистрыСведений.ПользовательскиеМакетыПечати.МакетыОбъектов
//
// Параметры:
//  ИмяОбъекта	 - Строка	 - Имя объекта
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция МакетыОбъекта(ИмяОбъекта) Экспорт
	
	Если ИмяОбъекта = "ОбщиеМакеты" Тогда
		ИдентификаторОбъектаМетаданных = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
	Иначе
		ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ИмяОбъекта);
	КонецЕсли;
	
	Возврат МакетыОбъектов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторОбъектаМетаданных));
	
КонецФункции

// Дублер процедуры РегистрыСведений.ПользовательскиеМакетыПечати.МакетыОбъектов
//
// Параметры:
//  ИдентификаторыОбъектовМетаданных - Массив	 - Массив идентификаторов объектов метаданных.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - 
//
Функция МакетыОбъектов(ИдентификаторыОбъектовМетаданных) Экспорт
	
	СписокМакетов = Новый ТаблицаЗначений();
	СписокМакетов.Колонки.Добавить("ИсточникМакета");
	СписокМакетов.Колонки.Добавить("ИсточникиДанных");
	СписокМакетов.Колонки.Добавить("Идентификатор");
	СписокМакетов.Колонки.Добавить("Представление");
	СписокМакетов.Колонки.Добавить("Владелец");
	СписокМакетов.Колонки.Добавить("ТипМакета");
	СписокМакетов.Колонки.Добавить("Картинка");
	СписокМакетов.Колонки.Добавить("КартинкаГруппы");
	СписокМакетов.Колонки.Добавить("СтрокаПоиска");
	СписокМакетов.Колонки.Добавить("ДоступныеЯзыки");
	СписокМакетов.Колонки.Добавить("Изменен");
	СписокМакетов.Колонки.Добавить("ИспользуетсяИзмененный");
	СписокМакетов.Колонки.Добавить("КартинкаИспользования");
	СписокМакетов.Колонки.Добавить("ДоступенПеревод");
	СписокМакетов.Колонки.Добавить("Ссылка");
	СписокМакетов.Колонки.Добавить("Используется");
	СписокМакетов.Колонки.Добавить("ДоступнаНастройкаВидимости");
	СписокМакетов.Колонки.Добавить("Поставляемый");
	СписокМакетов.Колонки.Добавить("ЭтоПечатнаяФорма");
	СписокМакетов.Колонки.Добавить("ДоступноСоздание");
	СписокМакетов.Колонки.Добавить("ИмяОбъектаМетаданныхМакета");
	// +CRM
	СписокМакетов.Колонки.Добавить("CRM_Представление");
	СписокМакетов.Колонки.Добавить("CRM_ИмяМакета");
	// -CRM
	
	СписокМакетов.Индексы.Добавить("Владелец");
	
	ДобавитьПользовательскиеМакеты(СписокМакетов, , ИдентификаторыОбъектовМетаданных);
	
	СписокМакетов.Сортировать("Представление");
	
	Возврат СписокМакетов;
	
КонецФункции

// Дублер процедуры РегистрыСведений.ПользовательскиеМакетыПечати.ДобавитьМакетыИзМетаданных
//
// Параметры:
//  СписокМакетов	 - ТаблицаЗначений	 - Таблица значений для записи макетов
//  Идентификатор	 - Строка	 - Идентификатор
//  ИсточникиДанных	 - Массив	 - Источники данных
//
Процедура ДобавитьПользовательскиеМакеты(СписокМакетов, Знач Идентификатор = Неопределено, Знач ИсточникиДанных = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Идентификатор = Новый УникальныйИдентификатор(Сред(Идентификатор, 4));
	Иначе
		Идентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МакетыПечатныхФорм.Ссылка КАК Ссылка,
	|	МакетыПечатныхФорм.Представление КАК Представление,
	|	МакетыПечатныхФорм.Используется КАК Используется,
	|	МакетыПечатныхФорм.ТипМакета КАК ТипМакета,
	|	МакетыПечатныхФорм.Идентификатор КАК Идентификатор,
	|	МакетыПечатныхФормИсточникиДанных.ИсточникДанных КАК Владелец,
	|	МакетыПечатныхФорм.CRM_ИмяМакета КАК CRM_ИмяМакета,
	|	МакетыПечатныхФорм.CRM_ПоставляемыйМакет КАК CRM_ПоставляемыйМакет,
	|	МакетыПечатныхФормПредставления.КодЯзыка КАК КодЯзыка
	|ПОМЕСТИТЬ втСправочникМакетов
	|ИЗ
	|	Справочник.МакетыПечатныхФорм.ИсточникиДанных КАК МакетыПечатныхФормИсточникиДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МакетыПечатныхФорм КАК МакетыПечатныхФорм
	|		ПО МакетыПечатныхФормИсточникиДанных.Ссылка = МакетыПечатныхФорм.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|		ПО МакетыПечатныхФормИсточникиДанных.Ссылка = ИдентификаторыОбъектовМетаданных.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовРасширений КАК ИдентификаторыОбъектовРасширений
	|		ПО МакетыПечатныхФормИсточникиДанных.Ссылка = ИдентификаторыОбъектовРасширений.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МакетыПечатныхФорм.Представления КАК МакетыПечатныхФормПредставления
	|		ПО (МакетыПечатныхФорм.Ссылка = МакетыПечатныхФормПредставления.Ссылка)
	|ГДЕ
	|	НЕ МакетыПечатныхФорм.ПометкаУдаления
	|	И (НЕ &ОтборПоИсточникамДанныхУстановлен
	|			ИЛИ МакетыПечатныхФормИсточникиДанных.ИсточникДанных В (&ИсточникиДанных))
	|	И (НЕ &ОтборПоИдентификаторуУстановлен
	|			ИЛИ МакетыПечатныхФорм.Идентификатор = &Идентификатор)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСправочникМакетов.Ссылка КАК Ссылка,
	|	втСправочникМакетов.Представление КАК Представление,
	|	втСправочникМакетов.Используется КАК Используется,
	|	втСправочникМакетов.ТипМакета КАК ТипМакета,
	|	втСправочникМакетов.Идентификатор КАК Идентификатор,
	|	втСправочникМакетов.Владелец КАК Владелец,
	|	втСправочникМакетов.CRM_ИмяМакета КАК CRM_ИмяМакета,
	|	втСправочникМакетов.CRM_ПоставляемыйМакет КАК CRM_ПоставляемыйМакет,
	|	ЕСТЬNULL(ПользовательскиеМакетыПечати.CRM_Представление, """") КАК CRM_Представление,
	|	ЕСТЬNULL(ПользовательскиеМакетыПечати.Использование, ЛОЖЬ) КАК ИспользоватьИзмененный,
	|	втСправочникМакетов.КодЯзыка КАК КодЯзыка,
	|	ВЫБОР
	|		КОГДА ПользовательскиеМакетыПечати.ИмяМакета ЕСТЬ NULL
	|				И втСправочникМакетов.CRM_ПоставляемыйМакет
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Изменен
	|ИЗ
	|	втСправочникМакетов КАК втСправочникМакетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПользовательскиеМакетыПечати КАК ПользовательскиеМакетыПечати
	|		ПО (втСправочникМакетов.CRM_ИмяМакета = ПользовательскиеМакетыПечати.Объект + ""."" + ПользовательскиеМакетыПечати.ИмяМакета)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОтборПоИдентификаторуУстановлен", ЗначениеЗаполнено(Идентификатор));
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("ОтборПоИсточникамДанныхУстановлен", ИсточникиДанных <> Неопределено);
	Запрос.УстановитьПараметр("ИсточникиДанных", ИсточникиДанных);
	
	ТаблицаМакетов = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из ТаблицаМакетов Цикл
		
		Макет = СписокМакетов.Добавить();
		ЗаполнитьЗначенияСвойств(Макет, СтрокаТаблицы);
		
		НайденныеСтроки = ТаблицаМакетов.НайтиСтроки(Новый Структура("Идентификатор", Макет.Идентификатор));
		ИсточникиДанных = Новый Массив;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ИсточникиДанных.Добавить(НайденнаяСтрока.Владелец);
		КонецЦикла;
		
		ОбъектыМетаданныхПоИдентификаторам = ОбщегоНазначения.ОбъектыМетаданныхПоИдентификаторам(ИсточникиДанных, Ложь);
		
		ИсточникиДанных = Новый Массив;
		Для Каждого ОбъектМетаданных Из ОбъектыМетаданныхПоИдентификаторам Цикл
			// +CRM
			Если ОбъектМетаданных.Значение <> Неопределено И ОбъектМетаданных.Значение <> Null Тогда
			// -CRM
				ИсточникиДанных.Добавить(ОбъектМетаданных.Значение.ПолноеИмя());
			КонецЕсли;
		КонецЦикла;
		
		Макет.ИсточникиДанных = СтрСоединить(ИсточникиДанных, ",");
		// +CRM
		Макет.ИспользуетсяИзмененный = (Не СтрокаТаблицы.CRM_ПоставляемыйМакет Или СтрокаТаблицы.ИспользоватьИзмененный);
		Макет.ДоступенПеревод = Врег(СтрокаТаблицы.ТипМакета) = "MXL";
		Макет.Поставляемый = СтрокаТаблицы.CRM_ПоставляемыйМакет;
		Макет.ЭтоПечатнаяФорма = Не СтрокаТаблицы.CRM_ПоставляемыйМакет;
		// -CRM
		Макет.Идентификатор = "ПФ_" + Строка(Макет.Идентификатор);
		
		// +CRM
		//Макет.ДоступнаНастройкаВидимости = Истина;
		//Макет.ИмяОбъектаМетаданныхМакета = Макет.Идентификатор;
		//Макет.ДоступныеЯзыки = ДоступныеЯзыкиМакета(Макет.Идентификатор);
		Макет.ИмяОбъектаМетаданныхМакета = ?(СтрокаТаблицы.CRM_ПоставляемыйМакет, СтрокаТаблицы.CRM_ИмяМакета, Макет.Идентификатор);
		Макет.ДоступныеЯзыки = РегистрыСведений.ПользовательскиеМакетыПечати.ДоступныеЯзыкиМакета(Макет.Идентификатор);
		// -CRM
		
		Макет.Картинка = ИндексКартинки(Макет.ТипМакета);
		Макет.КартинкаГруппы = КартинкаМакета(Макет.ТипМакета);
		Макет.КартинкаИспользования = -1;

		Если Макет.Изменен Тогда
			Макет.КартинкаИспользования = Число(Макет.Изменен) + Число(Макет.ИспользуетсяИзмененный);
		КонецЕсли;
		Макет.СтрокаПоиска = НРег(Макет.Представление + " " + Макет.ТипМакета);
		Если ЗначениеЗаполнено(Макет.Владелец) Тогда
			ОбъектМетаданныхВладелецМакета = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Макет.Владелец);
			// +CRM
			ЭтоОбъектСсылочногоТипа = ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ОбъектМетаданныхВладелецМакета);
			Макет.ДоступноСоздание = ЭтоОбъектСсылочногоТипа;
			Макет.ДоступнаНастройкаВидимости = ЭтоОбъектСсылочногоТипа;
			// -CRM
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает таблицу команд печати.
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма
//  СписокОбъектов	 - Массив, Неопределено - Коллекция объектов метаданных, команды печати которых необходимо
//  	использовать при составлении списка команд печати для указанной формы.
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция ПолучитьТаблицуКомандПечати(Форма, СписокОбъектов = Неопределено) Экспорт
	
	КомандыПечати = УправлениеПечатью.КомандыПечатиФормы(Форма, СписокОбъектов);
	
	// фильтр по менеджеру печати
	Для НомерСтроки = -КомандыПечати.Количество() + 1 По 0 Цикл
		КомандаПечати = КомандыПечати[-НомерСтроки];
		Если КомандаПечати.МенеджерПечати = "" Тогда 
			КомандыПечати.Удалить(КомандаПечати);
		КонецЕсли;
	КонецЦикла;
	
	Возврат КомандыПечати;
	
КонецФункции

// Функция возвращает сформированый табличный документ.
//
// Параметры:
//  Макет			 - Макет	 - Макет табичного документа.
//  МассивОбъектов	 - Массив	 - Массив объектов.
//  ОбъектыПечати	 - Массив	 - Массив объектов печати.
//  КодЯзыка		 - Строка	 - Код языка.
// 
// Возвращаемое значение:
//   - ТабличныйДокумент
//
Функция СформироватьТабличныйДокумент(Макет, МассивОбъектов, ОбъектыПечати, КодЯзыка) Экспорт
	
	ПоляМакета = ПоляМакета(Макет);
	
	ДанныеПечати = УправлениеПечатью.ДанныеПечати(МассивОбъектов, ПоляМакета, КодЯзыка);
	НастройкиФорматаПолей = ДанныеПечати["НастройкиФорматаПолей"];
	
	ПутьКДаннымРисунков = Новый Соответствие();
	Для Каждого Рисунок Из Макет.Рисунки Цикл
		Если Рисунок.ТипРисунка <> ТипРисункаТабличногоДокумента.Группа Тогда 
			ПутьКДаннымРисунков.Вставить(Рисунок.Имя, Рисунок.ПараметрРасшифровки);
		КонецЕсли;
	КонецЦикла;
	
	ОбластиМакета = ОбластиМакета(Макет, ДанныеПечати);
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ВыведеноРисунков = ТабличныйДокумент.Рисунки.Количество();
	Для Каждого Ссылка Из МассивОбъектов Цикл

		// +CRM
		ЗаполнитьТекстыПоШаблонуВМакете(Макет, Ссылка);
		// -CRM
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Для Каждого Элемент Из ОбластиМакета.ВсеОбласти Цикл
			ИмяОбласти = Элемент.Значение;
			УсловиеВывода = Элемент.Представление;
			КоличествоПовторений = 1;

			ИмяТаблицы = ОбластиМакета.ОбластиТаблиц[ИмяОбласти];
			Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
				КоличествоПовторений = ДанныеПечати[Ссылка][ИмяТаблицы].Количество();
			КонецЕсли;
			
			Для НомерСтрокиТабличнойЧасти = 1 По КоличествоПовторений Цикл
				ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			
				ИсточникДанных = Новый Соответствие;
				ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ИсточникДанных, ДанныеПечати[Ссылка]);
				Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
					ДанныеСтрокиТабличнойЧасти = ДанныеПечати[Ссылка][ИмяТаблицы][НомерСтрокиТабличнойЧасти];
					Для Каждого КлючИЗначение Из ДанныеСтрокиТабличнойЧасти Цикл
						ИсточникДанных[ИмяТаблицы + "." + КлючИЗначение.Ключ] = КлючИЗначение.Значение;
					КонецЦикла;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(УсловиеВывода) Тогда
					ВыводитьОбласть = ВычислитьВыражение("[" + УсловиеВывода + "]", ИсточникДанных, НастройкиФорматаПолей, КодЯзыка);
					Если ТипЗнч(ВыводитьОбласть) <> Тип("Булево") Или Не ВыводитьОбласть Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ОбработанныеЯчейки = Новый Соответствие;
				Для НомерСтроки = 1 По ОбластьМакета.ВысотаТаблицы Цикл
					Для НомерСтолбца = 1 По ОбластьМакета.ШиринаТаблицы Цикл
						ОбластьЯчейки = ОбластьМакета.Область(НомерСтроки, НомерСтолбца, НомерСтроки, НомерСтолбца);
						
						ИдентификаторОбласти = УправлениеПечатью.ИдентификаторОбласти(ОбластьЯчейки);
						Если ОбработанныеЯчейки[ИдентификаторОбласти] <> Неопределено Тогда
							Продолжить;
						КонецЕсли;
						ОбработанныеЯчейки[ИдентификаторОбласти] = Истина;
						
						Если Не ЗначениеЗаполнено(ОбластьЯчейки.Текст) Тогда
							Продолжить;
						КонецЕсли;
						
						ОбластьЯчейки.Текст = ЗаменитьПараметрыЗначениями(ОбластьЯчейки.Текст, ИсточникДанных, НастройкиФорматаПолей, КодЯзыка);
					КонецЦикла;
				КонецЦикла;
	
				ТабличныйДокумент.Вывести(ОбластьМакета);
				Для Индекс = ВыведеноРисунков По ТабличныйДокумент.Рисунки.Количество() - 1 Цикл
					Рисунок = ТабличныйДокумент.Рисунки[Индекс];
					Если Рисунок.ТипРисунка = ТипРисункаТабличногоДокумента.Группа Тогда
						Продолжить;
					КонецЕсли;
					Рисунок.ПараметрРасшифровки = ПутьКДаннымРисунков[Рисунок.Имя];
					Если Не ЗначениеЗаполнено(Рисунок.ПараметрРасшифровки) Тогда
						Продолжить;
					КонецЕсли;
					СсылкаНаКартинку = ВычислитьВыражение(Рисунок.ПараметрРасшифровки, ИсточникДанных, НастройкиФорматаПолей, КодЯзыка);
					Если ТипЗнч(СсылкаНаКартинку) = Тип("Картинка") Тогда
						Рисунок.Картинка = СсылкаНаКартинку;
					Иначе
						Рисунок.Картинка = КартинкаИзФайла(СсылкаНаКартинку);
					КонецЕсли;
				КонецЦикла;
				ВыведеноРисунков = ТабличныйДокумент.Рисунки.Количество();
			КонецЦикла;
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;
	
	ИсточникДанных = ДанныеПечати[МассивОбъектов[0]];
	
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстСлева = ЗаменитьПараметрыЗначениями(Макет.ВерхнийКолонтитул.ТекстСлева, ИсточникДанных, НастройкиФорматаПолей, КодЯзыка);
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстВЦентре = ЗаменитьПараметрыЗначениями(Макет.ВерхнийКолонтитул.ТекстВЦентре, ИсточникДанных, НастройкиФорматаПолей, КодЯзыка);
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстСправа = ЗаменитьПараметрыЗначениями(Макет.ВерхнийКолонтитул.ТекстСправа, ИсточникДанных, НастройкиФорматаПолей, КодЯзыка);
	
	ТабличныйДокумент.НижнийКолонтитул.ТекстСлева = ЗаменитьПараметрыЗначениями(Макет.НижнийКолонтитул.ТекстСлева, ИсточникДанных, НастройкиФорматаПолей, КодЯзыка);
	ТабличныйДокумент.НижнийКолонтитул.ТекстВЦентре = ЗаменитьПараметрыЗначениями(Макет.НижнийКолонтитул.ТекстВЦентре, ИсточникДанных, НастройкиФорматаПолей, КодЯзыка);
	ТабличныйДокумент.НижнийКолонтитул.ТекстСправа = ЗаменитьПараметрыЗначениями(Макет.НижнийКолонтитул.ТекстСправа, ИсточникДанных, НастройкиФорматаПолей, КодЯзыка);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Процедура-обработчик события "При создании" формы редактирования документа Office-Open.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - Форма.
//
Процедура ПриСозданииФормыРедактированияТабличногоДокумента(Форма) Экспорт
	
	ДобавитьНеобходимыеРеквизитыФормы(Форма);
	
	Если Форма.Параметры.Свойство("CRM_ИмяМакета") Тогда
		Форма.CRM_ИмяМакета = Форма.Параметры.CRM_ИмяМакета;
	КонецЕсли;
	Если Форма.Параметры.Свойство("CRM_МакетИспользуется") Тогда
		Форма.CRM_МакетИспользуется = Форма.Параметры.CRM_МакетИспользуется;
	КонецЕсли;
	Если Форма.Параметры.Свойство("CRM_ПоставляемыйМакет") Тогда
		Форма.CRM_ПоставляемыйМакет = Форма.Параметры.CRM_ПоставляемыйМакет;
	КонецЕсли;
	
	СоздатьЭлементыАвтотекста(Форма);
	
КонецПроцедуры

// Процедура-обработчик события "При создании" формы редактирования табличного документа.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - Форма.
//
Процедура ПриСозданииФормыРедактированиеДокументаOfficeOpen(Форма) Экспорт
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("CRM_ИмяМакета", Новый ОписаниеТипов("Строка")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("CRM_МакетИспользуется", Новый ОписаниеТипов("Булево")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("CRM_ПоставляемыйМакет", Новый ОписаниеТипов("Булево")));
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Если Форма.Параметры.Свойство("CRM_ИмяМакета") Тогда
		Форма.CRM_ИмяМакета = Форма.Параметры.CRM_ИмяМакета;
	КонецЕсли;
	Если Форма.Параметры.Свойство("CRM_МакетИспользуется") Тогда
		Форма.CRM_МакетИспользуется = Форма.Параметры.CRM_МакетИспользуется;
	КонецЕсли;
	Если Форма.Параметры.Свойство("CRM_ПоставляемыйМакет") Тогда
		Форма.CRM_ПоставляемыйМакет = Форма.Параметры.CRM_ПоставляемыйМакет;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Дублер процедуры РегистрыСведений.ПользовательскиеМакетыПечати.КартинкаМакета
Функция КартинкаМакета(Знач ТипМакета)
	
	ТипыМакетов = Новый Соответствие;
	ТипыМакетов.Вставить("DOC", БиблиотекаКартинок.ФорматWord);
	ТипыМакетов.Вставить("DOCX", БиблиотекаКартинок.ФорматWord2007);
	ТипыМакетов.Вставить("ODT", БиблиотекаКартинок.ФорматOpenOfficeCalc);
	ТипыМакетов.Вставить("MXL", БиблиотекаКартинок.ФорматMXL);
	// +CRM
	ТипыМакетов.Вставить("HTML", БиблиотекаКартинок.ФорматHTML);
	ТипыМакетов.Вставить("HTM",  БиблиотекаКартинок.ФорматHTML);
	// -CRM
	
	Результат = ТипыМакетов[ВРег(ТипМакета)];
	Возврат ?(Результат = Неопределено, Новый Картинка, Результат);
	
КонецФункции

Функция ИндексКартинки(Знач ТипМакета) Экспорт
	
	ТипыМакетов = Новый Соответствие;
	ТипыМакетов.Вставить("DOC",  0);
	ТипыМакетов.Вставить("DOCX", 0);
	ТипыМакетов.Вставить("ODT",  1);
	ТипыМакетов.Вставить("MXL",  2);
	// +CRM
	ТипыМакетов.Вставить("HTML", 3);
	ТипыМакетов.Вставить("HTM",  4);
	// -CRM
	Результат = ТипыМакетов[ВРег(ТипМакета)];
	Возврат ?(Результат = Неопределено, -1, Результат);
	
КонецФункции 

// Список возможных имен макета:
//  1) на языке сеанса,
//  2) на языке конфигурации,
//  3) без указания языка.
//
// Параметры:
//  ИмяМакета	 - Строка	 - Имя макета.
//  КодЯзыка	 - Строка	 - Код языка.
// 
// Возвращаемое значение:
//   - Массив
//
Функция ИменаМакета(Знач ИмяМакета, Знач КодЯзыка = Неопределено)
	
	Результат = Новый Массив;
	
	Если ЗначениеЗаполнено(КодЯзыка) Тогда
		Результат.Добавить(ИмяМакета + "_" + КодЯзыка);
		ЧастиСтроки = СтрРазделить(КодЯзыка, "_", Ложь);
		Если ЧастиСтроки.Количество() > 1 Тогда
			Результат.Добавить(ИмяМакета + "_" + ЧастиСтроки[0]);
		КонецЕсли;
	КонецЕсли;
	
	Результат.Добавить(ИмяМакета + "_" + ОбщегоНазначения.КодОсновногоЯзыка());
	Результат.Добавить(ИмяМакета);
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьЯзыкМакета(Макет, КодЯзыка)
	
	Если ТипЗнч(Макет) <> Тип("ТабличныйДокумент") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоДополнительныйЯзыкПечатныхФорм = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Мультиязычность.Печать") Тогда
		МодульУправлениеПечатьюМультиязычность = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатьюМультиязычность");
		ЭтоДополнительныйЯзыкПечатныхФорм =
			МодульУправлениеПечатьюМультиязычность.ЭтоДополнительныйЯзыкПечатныхФорм(КодЯзыка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодЯзыка) И Не ЭтоДополнительныйЯзыкПечатныхФорм Тогда
		Макет.КодЯзыка = КодЯзыка;
	Иначе
		Макет.КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТекстыПоШаблонуВМакете(Макет, ОбъектСсылка) Экспорт
	
	ТаблицаАвтотекста = Новый ТаблицаЗначений;
	ТаблицаАвтотекста.Колонки.Добавить("Тэг");
	ТаблицаАвтотекста.Колонки.Добавить("ИмяКоманды");
	ТаблицаАвтотекста.Колонки.Добавить("ЗаголовокКоманды");
	ТаблицаАвтотекста.Колонки.Добавить("Действие");
	
	// Список автотекста, доступного для объекта, которому принадлежит макет.
	CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекста,
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ОбъектСсылка)));
	
	ОбработанныеЯчейки = Новый Соответствие;
	Для НомерСтроки = 1 По Макет.ВысотаТаблицы Цикл
		Для НомерСтолбца = 1 По Макет.ШиринаТаблицы Цикл
			ОбластьЯчейки = Макет.Область(НомерСтроки, НомерСтолбца, НомерСтроки, НомерСтолбца);
			
			ИдентификаторОбласти = УправлениеПечатью.ИдентификаторОбласти(ОбластьЯчейки);
			Если ОбработанныеЯчейки[ИдентификаторОбласти] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОбработанныеЯчейки[ИдентификаторОбласти] = Истина;
			
			Если Не ЗначениеЗаполнено(ОбластьЯчейки.Текст) Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаАвтотекста Из ТаблицаАвтотекста Цикл
				Если СтрНайти(ОбластьЯчейки.Текст, СтрокаАвтотекста.Тэг) > 0 Тогда
					СтруктураАвтотекста = Новый Структура;
					СтруктураАвтотекста.Вставить("Тэг",      СтрокаАвтотекста.Тэг);
					СтруктураАвтотекста.Вставить("Действие", СтрокаАвтотекста.Действие);
					ЗначениеТэга = CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэга(СтрокаАвтотекста, ОбъектСсылка);
					ОбластьЯчейки.Текст = СтрЗаменить(ОбластьЯчейки.Текст, СтрокаАвтотекста.Тэг, ЗначениеТэга);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПоляМакета(Макет)

	Тексты = Новый Соответствие;
	
	ОбработанныеЯчейки = Новый Соответствие;
	Для НомерСтроки = 1 По Макет.ВысотаТаблицы Цикл
		Для НомерСтолбца = 1 По Макет.ШиринаТаблицы Цикл
			ОбластьЯчейки = Макет.Область(НомерСтроки, НомерСтолбца, НомерСтроки, НомерСтолбца);
			
			ИдентификаторОбласти = УправлениеПечатью.ИдентификаторОбласти(ОбластьЯчейки);
			Если ОбработанныеЯчейки[ИдентификаторОбласти] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОбработанныеЯчейки[ИдентификаторОбласти] = Истина;
			
			Если Не ЗначениеЗаполнено(ОбластьЯчейки.Текст) Тогда
				Продолжить;
			КонецЕсли;
			
			Тексты.Вставить(ОбластьЯчейки.Текст, Истина);
		КонецЦикла;
	КонецЦикла;
	
	Тексты.Вставить(Строка(Макет.ВерхнийКолонтитул.ТекстСлева), Истина);
	Тексты.Вставить(Строка(Макет.ВерхнийКолонтитул.ТекстВЦентре), Истина);
	Тексты.Вставить(Строка(Макет.ВерхнийКолонтитул.ТекстСправа), Истина);

	Тексты.Вставить(Строка(Макет.НижнийКолонтитул.ТекстСлева), Истина);
	Тексты.Вставить(Строка(Макет.НижнийКолонтитул.ТекстВЦентре), Истина);
	Тексты.Вставить(Строка(Макет.НижнийКолонтитул.ТекстСправа), Истина);
	
	Для Каждого Рисунок Из Макет.Рисунки Цикл
		Если Рисунок.ТипРисунка <> ТипРисункаТабличногоДокумента.Группа Тогда 
			Тексты.Вставить(Рисунок.ПараметрРасшифровки, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из Макет.Области Цикл
		Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента")
			И Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			УсловиеВывода = Область.ПараметрРасшифровки;
			Если ЗначениеЗаполнено(УсловиеВывода) Тогда
				Тексты.Вставить(Область.ПараметрРасшифровки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Массив;

	Для Каждого Элемент Из Тексты Цикл
		Текст = Элемент.Ключ;
		ПараметрыТекста = УправлениеПечатью.НайтиПараметрыВТексте(Текст);
		Для Каждого Выражение Из ПараметрыТекста Цикл
			Выражение = Сред(Выражение, 2, СтрДлина(Выражение) - 2);
			ЭлементыФормулы = КонструкторФормулСлужебный.ЭлементыФормулы(Выражение);
			Для Каждого ОписаниеЭлемента Из ЭлементыФормулы.ОперандыИФункции Цикл
				ЭтоФункция = ОписаниеЭлемента.Значение;
				Если ЭтоФункция Тогда
					Продолжить;
				КонецЕсли;
				
				Операнд = ЭлементыФормулы.ВсеЭлементы[ОписаниеЭлемента.Ключ];
				Операнд = ОчиститьКвадратныеСкобки(Операнд);
				Если ЗначениеЗаполнено(Операнд) Тогда
					Результат.Добавить(Операнд);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОбластиМакета(Макет, ДанныеПечати)
	
	Таблицы = ДанныеПечати["ИменаТабличныхЧастейОбъекта"];
	ВсеОбласти = Новый СписокЗначений;
	ОбластиТаблиц = Новый Соответствие;
	
	ОбластиСУсловиями = Новый Соответствие;
	Для Каждого Область Из Макет.Области Цикл
		Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") И Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ОбластиСУсловиями.Вставить(Область.Верх, Область);
		КонецЕсли;
	КонецЦикла;	
	
	ОбластиДляОбработки = Новый Массив;
	
	НачалоОбласти = 1;
	Для НомерСтроки = 1 По Макет.ВысотаТаблицы Цикл
		Если ОбластиСУсловиями[НомерСтроки] <> Неопределено Тогда
			Если НачалоОбласти < НомерСтроки Тогда
				Область = Макет.Область(НачалоОбласти, , НомерСтроки-1);
				ОбластиДляОбработки.Добавить(Область);
			КонецЕсли;
			ОбластиДляОбработки.Добавить(ОбластиСУсловиями[НомерСтроки]);
			НомерСтроки = ОбластиСУсловиями[НомерСтроки].Низ;
			НачалоОбласти = НомерСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Макет.ВысотаТаблицы >= НачалоОбласти Тогда
		Область = Макет.Область(НачалоОбласти, , Макет.ВысотаТаблицы);
		ОбластиДляОбработки.Добавить(Область);
	КонецЕсли;
	
	Для Каждого Область Из ОбластиДляОбработки Цикл // ОбластьЯчеекТабличногоДокумента
		ОписаниеОбластей = РазделитьНаОбласти(Макет, Область, Таблицы);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ОбластиТаблиц, ОписаниеОбластей.ОбластиТаблиц);
		УсловиеВывода = "";
		Если Макет.Области.Найти(Область.Имя) <> Неопределено Тогда
			УсловиеВывода = Область.ПараметрРасшифровки;
		КонецЕсли;
		Для Каждого ИдентификаторОбласти Из ОписаниеОбластей.ВсеОбласти Цикл
			ВсеОбласти.Добавить(ИдентификаторОбласти, УсловиеВывода);
		КонецЦикла;
	КонецЦикла;

	Результат = Новый Структура;
	Результат.Вставить("ВсеОбласти", ВсеОбласти);
	Результат.Вставить("ОбластиТаблиц", ОбластиТаблиц);
	
	Возврат Результат;
	
КонецФункции

Функция ВычислитьВыражение(Знач ИсходноеВыражение, ДанныеПечати, НастройкиФорматаПолей, КодЯзыка, ПрименятьФорматирование = Неопределено)
	
	Выражение = ИсходноеВыражение;
	Выражение = Сред(Выражение, 2, СтрДлина(Выражение) - 2);
	
	ЭлементыФормулы = КонструкторФормулСлужебный.ЭлементыФормулы(Выражение);
	ВыделитьИмяКолонкиТабличнойЧасти(Выражение, ЭлементыФормулы);
	
	Параметры = Новый Массив;
	
	Если ПрименятьФорматирование = Неопределено Тогда
		ПрименятьФорматирование = Ложь;
		
		Если ЭлементыФормулы.ОперандыИФункции.Количество() = 1 Тогда
			Для Каждого ОписаниеЭлемента Из ЭлементыФормулы.ОперандыИФункции Цикл
				ЭтоФункция = ОписаниеЭлемента.Значение;
				Если ЭтоФункция Тогда
					Прервать;
				КонецЕсли;
				Операнд = ЭлементыФормулы.ВсеЭлементы[ОписаниеЭлемента.Ключ];
				ПрименятьФорматирование = Операнд = Выражение;
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ОписаниеЭлемента Из ЭлементыФормулы.ОперандыИФункции Цикл
		Операнд = ЭлементыФормулы.ВсеЭлементы[ОписаниеЭлемента.Ключ];
		ЭтоФункция = ОписаниеЭлемента.Значение;
		КоллекцияДанных = ДанныеПечати;
		
		Если Не ЭтоФункция Тогда
			Если СтрНайти("И,ИЛИ,НЕ,ИСТИНА,ЛОЖЬ", ВРег(Операнд)) Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = КоллекцияДанных[ОчиститьКвадратныеСкобки(Операнд) + "." + СтрРазделить(КодЯзыка, "_")[0]];
			Если Не ЗначениеЗаполнено(Значение) Тогда
				Значение = КоллекцияДанных[ОчиститьКвадратныеСкобки(Операнд)];
			КонецЕсли;
			
			Формат = "";
			Если ПрименятьФорматирование Тогда
				Формат = НастройкиФорматаПолей[Операнд];
			КонецЕсли;

			Если ЗначениеЗаполнено(Формат) И ЭлементыФормулы.ОперандыИФункции.Количество() = 1 Тогда
				Если ЗначениеЗаполнено(КодЯзыка) Тогда
					Формат = СтрШаблон("Л=%1;", КодЯзыка) + Формат;
				КонецЕсли;
				Значение = Формат(Значение, Формат);
			КонецЕсли;
			
			Параметры.Добавить(Значение);
			ЭлементыФормулы.ВсеЭлементы[ОписаниеЭлемента.Ключ] = "Параметры[" + Параметры.ВГраница() + "]";
		КонецЕсли;
	КонецЦикла;
	
	Выражение = СтрСоединить(ЭлементыФормулы.ВсеЭлементы);
	Выражение = СтрЗаменить(Выражение, ИмяМодуляПечати() + РазделительКоманды(), ИмяМодуляПечати() + ".");
	
	Попытка
		Результат = ОбщегоНазначения.ВычислитьВБезопасномРежиме(Выражение, Параметры);
	Исключение
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выражение ""%1"" содержит ошибки:
			|%2'"), ИсходноеВыражение, ТекстОшибки));
		Результат = "";
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаменитьПараметрыЗначениями(Знач Строка, ИсточникДанных, НастройкиФорматаПолей, КодЯзыка)
	
	ПараметрыТекста = УправлениеПечатью.НайтиПараметрыВТексте(Строка(Строка));
	ЗначенияПараметров = ЗначенияПараметров(ПараметрыТекста, ИсточникДанных, НастройкиФорматаПолей, КодЯзыка);
	
	Если ТипЗнч(Строка) = Тип("ФорматированнаяСтрока") Тогда
		Результат = ЗаменитьВФорматированнойСтроке(Строка, ЗначенияПараметров);
	Иначе
		Результат = ЗаменитьВСтроке(Строка, ЗначенияПараметров);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КартинкаИзФайла(Файл)
	
	Результат = Новый Картинка;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиСлужебный");
		МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");

		ТипыПрисоединенныхФайлов = МодульРаботаСФайламиСлужебный.ТипыПрисоединенныхФайлов();
		Если ЗначениеЗаполнено(Файл) И ТипыПрисоединенныхФайлов.СодержитТип(ТипЗнч(Файл)) Тогда
			ДвоичныеДанные = МодульРаботаСФайлами.ДвоичныеДанныеФайла(Файл, Ложь);
			Если ДвоичныеДанные <> Неопределено Тогда
				Результат = Новый Картинка(ДвоичныеДанные, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОчиститьКвадратныеСкобки(Строка)
	
	Если СтрНачинаетсяС(Строка, "[") И СтрЗаканчиваетсяНа(Строка, "]") Тогда
		Возврат Сред(Строка, 2, СтрДлина(Строка) - 2);
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

Функция РазделитьНаОбласти(Макет, Область, Таблицы)
	
	ВсеОбласти = Новый Массив;
	ОбластиТаблиц = Новый Соответствие;
	
	НачалоОбласти = Область.Верх;
	ТекущаяТаблица = "";
	ПредыдущаяТаблица = "";
	
	Для НомерСтроки = Область.Верх По Область.Низ Цикл
		Верх = НомерСтроки;
		Низ = НомерСтроки;
		
		Для НомерКолонки = 1 По Макет.ШиринаТаблицы Цикл
			ОбластьЯчейки = Макет.Область(НомерСтроки, НомерКолонки);
			Низ = Макс(Низ, ОбластьЯчейки.Низ);
		КонецЦикла;
		
		НомерСтроки = Низ;
		ОбластьСтроки = Макет.Область(Верх, , Низ);
		ТекущаяТаблица = ИмяТаблицыВОбластиМакета(Макет, ОбластьСтроки, Таблицы);
	
		Если ПредыдущаяТаблица <> ТекущаяТаблица И Верх > НачалоОбласти Тогда
			ИдентификаторОбласти = "R" + XMLСтрока(НачалоОбласти) + ":R" + XMLСтрока(Верх - 1);
			ВсеОбласти.Добавить(ИдентификаторОбласти);
			
			Если ЗначениеЗаполнено(ПредыдущаяТаблица) Тогда
				ОбластиТаблиц.Вставить(ИдентификаторОбласти, ПредыдущаяТаблица);
			КонецЕсли;
			
			НачалоОбласти = Верх;
		КонецЕсли;

		ПредыдущаяТаблица = ТекущаяТаблица;
	КонецЦикла;
	
	ИдентификаторОбласти = "R" + XMLСтрока(НачалоОбласти) + ":R" + Область.Низ;

	Если ЗначениеЗаполнено(ТекущаяТаблица) Тогда
		ОбластиТаблиц.Вставить(ИдентификаторОбласти, ПредыдущаяТаблица);
	КонецЕсли;
	ВсеОбласти.Добавить(ИдентификаторОбласти);
	
	Результат = Новый Структура;
	Результат.Вставить("ВсеОбласти", ВсеОбласти);
	Результат.Вставить("ОбластиТаблиц", ОбластиТаблиц);
	
	Возврат Результат;
	
КонецФункции

Процедура ВыделитьИмяКолонкиТабличнойЧасти(Выражение, ЭлементыФормулы)
	
	ФункцииСРазделениемПараметров = ФункцииСРазделениемПараметров();
	
	ФункцияНайдена = Ложь;
	Для Каждого ИмяФункции Из ФункцииСРазделениемПараметров Цикл
		Если СтрНайти(Выражение, ИмяФункции) Тогда
			ФункцияНайдена = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ФункцияНайдена Тогда
		Результат = Новый Массив;
		ВсеЭлементыВыражения = ЭлементыФормулы.ВсеЭлементы;
		Для Индекс = 0 По ВсеЭлементыВыражения.ВГраница() Цикл
			Элемент = ВсеЭлементыВыражения[Индекс];
			Результат.Добавить(Элемент);
			Если СтрНачинаетсяС(Элемент, ИмяМодуляПечати() + РазделительКоманды()) Тогда
				Результат.Добавить(ВсеЭлементыВыражения[Индекс+1]); 
				МассивИменПараметра = СтрРазделить(ВсеЭлементыВыражения[Индекс+2], ".", Ложь);
				Результат.Добавить(МассивИменПараметра[0]);
				Результат.Добавить(",");
				Если МассивИменПараметра.Количество() = 2 Тогда
					Результат.Добавить("""");
					ИмяКолонки = МассивИменПараметра[1];
					Для Позиция = 1 По СтрДлина(ИмяКолонки) Цикл
						Результат.Добавить(Сред(ИмяКолонки, Позиция, 1));
					КонецЦикла;
					Результат.Добавить("""");
				КонецЕсли;
				Результат.Добавить(ВсеЭлементыВыражения[Индекс+3]);
				Индекс = Индекс + 3;
			КонецЕсли;
		КонецЦикла;
		ЭлементыФормулы.ВсеЭлементы = Результат;
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяМодуляПечати()
	Возврат Метаданные.ОбщиеМодули.УправлениеПечатью.Имя;
КонецФункции

Функция РазделительКоманды()
	Возврат "_";
КонецФункции

Функция ЗначенияПараметров(Параметры, ДанныеПечати, НастройкиФорматаПолей, КодЯзыка)
	
	Результат = Новый Соответствие;

	Для Каждого Параметр Из Параметры Цикл
		Значение = ВычислитьВыражение(Параметр, ДанныеПечати, НастройкиФорматаПолей, КодЯзыка);
		Результат.Вставить(Параметр, Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаменитьВСтроке(Знач Строка, ПараметрыЗамены)
	
	Для Каждого Элемент Из ПараметрыЗамены Цикл
		ПодстрокаПоиска = Элемент.Ключ;
		ПодстрокаЗамены = Элемент.Значение;
		Строка = СтрЗаменить(Строка, ПодстрокаПоиска, ПодстрокаЗамены);
	КонецЦикла;
	
	Возврат Строка;
	
КонецФункции

Функция ЗаменитьВФорматированнойСтроке(Строка, ПараметрыЗамены)

	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	ФорматированныйДокумент.УстановитьФорматированнуюСтроку(Строка);
	
	Для Каждого Элемент Из ПараметрыЗамены Цикл
		ПодстрокаПоиска = Элемент.Ключ;
		ПодстрокаЗамены = Элемент.Значение;

		НайденнаяОбласть = ФорматированныйДокумент.НайтиТекст(ПодстрокаПоиска);
		Пока НайденнаяОбласть <> Неопределено Цикл
			Фрагменты = ФорматированныйДокумент.СформироватьЭлементы(НайденнаяОбласть.ЗакладкаНачала, НайденнаяОбласть.ЗакладкаКонца);
			Для Индекс = 1 По Фрагменты.ВГраница() Цикл
				Фрагменты[0].Текст = Фрагменты[0].Текст + Фрагменты[Индекс].Текст;
				Фрагменты[Индекс].Текст = "";
			КонецЦикла;
			Фрагменты[0].Текст = СтрЗаменить(Фрагменты[0].Текст, ПодстрокаПоиска, ПодстрокаЗамены);
	
			НайденнаяОбласть = ФорматированныйДокумент.НайтиТекст(ПодстрокаПоиска, НайденнаяОбласть.ЗакладкаКонца);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ФорматированныйДокумент.ПолучитьФорматированнуюСтроку();

КонецФункции

Функция ИмяТаблицыВОбластиМакета(Макет, Область, Таблицы)
	
	ОбработанныеЯчейки = Новый Соответствие;
	
	ИмяТаблицы = "";
	Для НомерСтроки = Область.Верх По Область.Низ Цикл
		Для НомерСтолбца = 1 По Макет.ШиринаТаблицы Цикл
			ОбластьЯчейки = Макет.Область(НомерСтроки, НомерСтолбца, НомерСтроки, НомерСтолбца);
			
			ИдентификаторОбласти = УправлениеПечатью.ИдентификаторОбласти(ОбластьЯчейки);
			Если ОбработанныеЯчейки[ИдентификаторОбласти] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОбработанныеЯчейки[ИдентификаторОбласти] = Истина;

			Для Каждого Таблица Из Таблицы Цикл
				СтрокаПоиска = "[" + Таблица + ".";
				Если СтрНайти(ОбластьЯчейки.Текст, СтрокаПоиска) Тогда
					ИмяТаблицы = Таблица;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяТаблицы;
	
КонецФункции

Функция ФункцииСРазделениемПараметров()
	
	ИмяМодуляПечатиСРазделителем = ИмяМодуляПечати() + РазделительКоманды();
	
	ФункцииСРазделениемПараметров = Новый Массив();
	ФункцииСРазделениемПараметров.Добавить(ИмяМодуляПечатиСРазделителем + "СуммаПоКолонке");
	ФункцииСРазделениемПараметров.Добавить(ИмяМодуляПечатиСРазделителем + "КоличествоСтрок");
	ФункцииСРазделениемПараметров.Добавить(ИмяМодуляПечатиСРазделителем + "Максимум");
	ФункцииСРазделениемПараметров.Добавить(ИмяМодуляПечатиСРазделителем + "Минимум");
	ФункцииСРазделениемПараметров.Добавить(ИмяМодуляПечатиСРазделителем + "Среднее");
	
	Возврат ФункцииСРазделениемПараметров;
	
КонецФункции

// +CRM

Процедура ДобавитьНеобходимыеРеквизитыФормы(Форма)
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("CRM_ТаблицаАвтотекста", Новый ОписаниеТипов("ТаблицаЗначений")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Тэг", Новый ОписаниеТипов("Строка"), "CRM_ТаблицаАвтотекста"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяКоманды", Новый ОписаниеТипов("Строка"), "CRM_ТаблицаАвтотекста"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЗаголовокКоманды", Новый ОписаниеТипов("Строка"), "CRM_ТаблицаАвтотекста"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Действие", Новый ОписаниеТипов("Строка"), "CRM_ТаблицаАвтотекста"));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("CRM_ОбъектыАвтотекста", Новый ОписаниеТипов("СписокЗначений")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("CRM_ИмяМакета", Новый ОписаниеТипов("Строка")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("CRM_МакетИспользуется", Новый ОписаниеТипов("Булево")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("CRM_ПоставляемыйМакет", Новый ОписаниеТипов("Булево")));
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	
КонецПроцедуры

Процедура СоздатьЭлементыАвтотекста(Форма)
	
	СписокМакетов = Новый СписокЗначений;
	ЗаполнитьСписокПредопределенныхМакетовСАвтотекстом(СписокМакетов);
	
	Если Форма.CRM_ПоставляемыйМакет 
		И СписокМакетов.НайтиПоЗначению(Форма.CRM_ИмяМакета) = Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	ВладелецМакетаСсылка = Форма.ВладелецМакета;
	Если Форма.ИсточникиДанных.Количество() > 0 Тогда
		ВладелецМакетаСсылка = Форма.ИсточникиДанных[0].Значение;
	КонецЕсли;
	
	// Группа Автотекст.
	ГруппаАвтотекст    = Форма.Элементы.Добавить("АвтоТекст", Тип("ГруппаФормы"), Форма.Элементы["КомандыРедактирования"]);
	ГруппаАвтотекст.Вид = ВидГруппыФормы.Подменю;
	ГруппаАвтотекст.Заголовок = НСтр("ru = 'Автотекст'");
	
	ТаблицаАвтотекстаЗнач = Форма.РеквизитФормыВЗначение("CRM_ТаблицаАвтотекста");
	
	Форма.CRM_ОбъектыАвтотекста.Добавить(ВладелецМакетаСсылка);
	CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекстаЗнач, ВладелецМакетаСсылка);
	
	Форма.ЗначениеВРеквизитФормы(ТаблицаАвтотекстаЗнач, "CRM_ТаблицаАвтотекста");
	
	CRM_АвтотекстПереопределяемый.ЗаполнитьКоманднуюПанельФорматированногоДокумента(
		Форма, , , , "CRM_ТаблицаАвтотекста");
	
КонецПроцедуры

// Процедура заполняет список предопределенных макетов, в которых нужно вывести команды для
// создания автотекста.
//
// Параметры:
//  СписокМакетов	 - СписокЗначений	 - Список предопределенных макето печатных форм.
//
Процедура ЗаполнитьСписокПредопределенныхМакетовСАвтотекстом(СписокМакетов)
	
	СписокМакетов.Добавить("Документ.CRM_Интерес.CRM_ПФ_MXL_КоммерческоеПредложение");
	СписокМакетов.Добавить("Документ.КоммерческоеПредложениеКлиенту.CRM_ПФ_MXL_КоммерческоеПредложение");
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		СписокМакетов.Добавить("Документ.CRM_СчетНаОплатуПокупателю.ПФ_MXL_Счет");
	КонецЕсли;
	
КонецПроцедуры

// -CRM

#КонецОбласти // СлужебныеПроцедурыИФункции
