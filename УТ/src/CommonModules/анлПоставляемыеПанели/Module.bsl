#Область ПрограммныйИнтерфейс

#Область РаботаСмакетамиПоставляемыхПанелей

// Таблица макетов конфигурации для установки в 1С:Аналитика.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Поставляемые панели 1С:Аналитика, обнаруженные в конфигурации.
// 	 * ИмяМакета 				 - Строка - Имя общего макета, содержащего поставляемую панель.
// 	 * ДатаИзмененияКонфигурация - Дата - Дата изменений поставляемой панели в общем макете.
// 	 * ДатаИзмененияАналитика 	 - Дата - Дата изменений установленной панели на сервере 1С:Аналитика.
// 	 * ПутьКФайламМакета 		 - Строка - Путь к файлам на диске с содержимым поставляемой панели.
//
Функция ПоставляемыеПанелиКонфигурации()	Экспорт
	
	Возврат анлПоставляемыеПанелиПовтИсп.ПоставляемыеПанелиКонфигурации();
	
КонецФункции

// Заполнить дерево поставляемых панелей.
// 
// Параметры:
//  ДеревоПанелей 		- ДеревоЗначений - Дерево поставляемых панелей.
//  ПоставляемыеПанели  - ТаблицаЗначений -  Таблица статусов поставляемых панелей.
//
Процедура ЗаполнитьДеревоПоставляемыхПанелей(ДеревоПанелей, ПоставляемыеПанели)	Экспорт
	
	ДеревоПанелейЭлементы = ДеревоПанелей.ПолучитьЭлементы();
	ДеревоПанелейЭлементы.Очистить();
	
	ДеревоПанелейКонфигурации = ПоставляемыеПанелиКонфигурацииВДеревоЗначений(ПоставляемыеПанели);	
	СтрокиПанелейКонфигурацииВЭлементыДереваПанелей(ДеревоПанелейКонфигурации.Строки, ДеревоПанелейЭлементы);
	
КонецПроцедуры

// Статусы поставляемых панелей.
// 
// Параметры:
//  ПоставляемыеПанели 		- ТаблицаЗначений - Таблица статусов поставляемых панелей.
//  РабочиеСтолыАналитики  	- ТаблицаЗначений - Таблица статусов поставляемых панелей
//  											 установленных в 1С:Аналитика.
//  МассивПанелей 			- Массив - Массив имен общих макетов, содержащих поставляемые панели.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Статусы поставляемых панелей.
//
Функция СтатусыПоставляемыхПанелей(ПоставляемыеПанели, ОбъектыАналитики, МассивПанелей = Неопределено)	Экспорт
	
	Для Каждого ПоставляемаяПанель Из ПоставляемыеПанели Цикл
		
		Если ТипЗнч(МассивПанелей) = Тип("Массив") И МассивПанелей <> Неопределено 
			И МассивПанелей.Найти(ПоставляемаяПанель.ИмяМакета) = Неопределено  Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураМакета = СтруктураПоставляемойПанели(ПоставляемаяПанель.ИмяМакета);
		Если ОбъектыАналитики <> Неопределено Тогда
			ДатаИзмененияАналитика = ДатаИзмененияОбъектовАналитики(
				ОбъектыАналитики, СтруктураМакета);
		Иначе
			ДатаИзмененияАналитика = Неопределено;
		КонецЕсли;
		
		ПоставляемаяПанель.ДатаИзмененияКонфигурация = анлАналитика.ДатаПоМеткеВремени(СтруктураМакета.ДатаИзменения);
		ПоставляемаяПанель.ДатаИзмененияАналитика = ДатаИзмененияАналитика;
		
	КонецЦикла;
	
	Возврат ПоставляемыеПанели;
	
КонецФункции

// Обновить статусы дерева поставляемых панелей.
// 
// Параметры:
//  ДеревоПанелей 		- ДеревоЗначений - Дерево поставляемых панелей.
//  ПоставляемыеПанели  - ТаблицаЗначений -  Таблица статусов поставляемых панелей.
//
Процедура ОбновитьСтатусыДереваПоставляемыхПанелей(ДеревоПанелей, ПоставляемыеПанели)	Экспорт
	
	ЗаполнитьСтатусыЭлементовДерева(ДеревоПанелей.ПолучитьЭлементы(), ПоставляемыеПанели);
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаИОбновлениеПоставляемыхПанелей

// Поставляемые панели конфигурации к установке и обновлению на сервере 1С:Аналитика.
// 
// Параметры:
//  МассивПанелей - Массив - Массив имен общих макетов, содержащих поставляемые панели.
// 
// Возвращаемое значение:
//  Структура - Поставляемые панели конфигурации к установке и обновлению:
// * КУстановке 	- Массив - Массив имен общих макетов, содержащих поставляемые панели к установке.
// * КОбновлению 	- Массив - Массив имен общих макетов, содержащих поставляемые панели к обновлению.
//
Функция ПоставляемыеПанелиКонфигурацииКУстановкеИОбновлению(МассивПанелей = Неопределено)	Экспорт
	
	ПанелиКУстановкеИОбновлению = Новый Структура("КУстановке, КОбновлению", Новый Массив, Новый Массив);
	
	ПоставляемыеПанели = ПоставляемыеПанелиКонфигурации();
	ОбъектыАналитики = анлАналитика.ОбъектыАналитики(анлАналитика.ТипыКонтролируемыхОбъектовПанелиАналитики());
	
	СтрокиПанелей = СтатусыПоставляемыхПанелей(ПоставляемыеПанели, ОбъектыАналитики, МассивПанелей);
	Для Каждого СтрокаПанели Из СтрокиПанелей Цикл
		
		Если ТипЗнч(МассивПанелей) = Тип("Массив") И МассивПанелей <> Неопределено 
			И МассивПанелей.Найти(СтрокаПанели["ИмяМакета"]) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаПанели["ДатаИзмененияАналитика"]) Тогда
			ПанелиКУстановкеИОбновлению["КУстановке"].Добавить(СтрокаПанели["ИмяМакета"]);
		ИначеЕсли ЗначениеЗаполнено(СтрокаПанели["ДатаИзмененияКонфигурация"]) Тогда
			ПанелиКУстановкеИОбновлению["КОбновлению"].Добавить(СтрокаПанели["ИмяМакета"]);		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПанелиКУстановкеИОбновлению;
	
КонецФункции

// Установить поставляемые панели на сервере 1С:Аналитика.
// 
// Параметры:
//  МассивПанелей - Массив - Массив имен общих макетов, содержащих поставляемые панели.
// 
// Возвращаемое значение:
//  Массив - Установленные на сервере 1С:Аналитике поставляемые панели.
//
Функция УстановитьПоставляемыеПанели(МассивПанелей, Ошибки)	Экспорт

	УстановленныеПанели = Новый Массив;	
	Для Каждого ИмяМакета Из МассивПанелей Цикл
		
		СтруктураПанели = СтруктураПоставляемойПанели(ИмяМакета);
		ДвоичныеДанныеПанели = ПолучитьДвоичныеДанныеИзСтроки(
			анлАналитика.ЗначениеВJSON(СтруктураПанели.ДанныеПанели));

		АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеПанели);

		Попытка
			
			анлАналитика.ЗагрузитьНастройкиПанелиДляПользователя(АдресХранилища);
			УстановленныеПанели.Добавить(ИмяМакета);
			
		Исключение
			ИнформацияОбОшибке =ИнформацияОбОшибке();
			ЗаписатьИнформациюВЖурналРегистрации(ИнформацияОбОшибке, Истина);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,,
				СтрШаблон("Ошибка при установке поставляемой панели ""%1"" 1С:Аналитика.
					|""%2"" (%3)", 
					ИмяМакета,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке),
					ИнформацияОбОшибке.Описание)
				,,,,);
				
		КонецПопытки;
	
	КонецЦикла;
	
	Возврат УстановленныеПанели;
	
КонецФункции

// Обновить поставляемые панели на сервере 1С:Аналитика.
// 
// Параметры:
//  МассивПанелей - Массив - Массив имен общих макетов, содержащих поставляемые панели.
// 
// Возвращаемое значение:
//  Массив - Обновленные на сервере 1С:Аналитике поставляемые панели.
//
Функция ОбновитьПоставляемыеПанели(МассивПанелей, Ошибки)	Экспорт

	ОбновленныеПанели = Новый Массив;	
	Для Каждого ИмяМакета Из МассивПанелей Цикл
		
		СтруктураПанели = СтруктураПоставляемойПанели(ИмяМакета);
		ДвоичныеДанныеПанели = ПолучитьДвоичныеДанныеИзСтроки(
			анлАналитика.ЗначениеВJSON(СтруктураПанели.ДанныеПанели));

		АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеПанели);
		
		Попытка
			
			анлАналитика.ЗагрузитьНастройкиПанелиДляПользователя(АдресХранилища);
			ОбновленныеПанели.Добавить(ИмяМакета);
			
		Исключение
			ИнформацияОбОшибке =ИнформацияОбОшибке();
			ЗаписатьИнформациюВЖурналРегистрации(ИнформацияОбОшибке, Истина);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,,
				СтрШаблон("Ошибка при обновлении поставляемой панели ""%1"" 1С:Аналитика.
					|""%2"" (%3)", 
					ИмяМакета,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке),
					ИнформацияОбОшибке.Описание)
				,,,,);
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ОбновленныеПанели;
	
КонецФункции

// Статусы поставляемых панелей.
// 
// Возвращаемое значение:
//  УникальныйИдентификатор - адрес во временном хранилище - двоичные данные архива,
//    содержащего файл с данными панели 1С:Аналитика - текущего подключения к 1С:Аналитика.
//
Функция ПакетПоставкиПанелиПодключения()	Экспорт

	ИмяВременногоКаталога = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(ИмяВременногоКаталога);
	ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременногоКаталога) + "AnalyticsSystemSchema";
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ДвоичныеДанныеПакетаПОставки = АнлАналитика.ДвоичныеДанныеПанелиПоставки(ТекущийПользователь);
	ДвоичныеДанныеПакетаПОставки.Записать(ПутьКФайлу + ".json");
	
	МаскаУпаковкиФайлов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременногоКаталога) + "*.json";
	ОбменДаннымиСервер.ЗапаковатьВZipФайл(ПутьКФайлу + ".zip", МаскаУпаковкиФайлов);
	
	ДвоичныеДанныеАрхиваПакета = Новый ДвоичныеДанные(ПутьКФайлу + ".zip");
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеАрхиваПакета);
	УдалитьФайлы(ИмяВременногоКаталога);

	Возврат АдресВременногоХранилища;

КонецФункции

// Структура поставляемой панели.
// 
// Возвращаемое значение:
//  Структура - Структура панели:
// * ДанныеПанели - Неопределено -
// * Идентификаторы - Неопределено -
// * ДатаИзменения - Неопределено -
//
Функция СтруктураПанели() Экспорт

	ПанельПоставки = Новый Структура;
	ПанельПоставки.Вставить("ДанныеПанели", Неопределено);
	ПанельПоставки.Вставить("Идентификаторы", Неопределено);
	ПанельПоставки.Вставить("ДатаИзменения", Неопределено);

	Возврат ПанельПоставки;

КонецФункции

Процедура ОшибкиСтруктурыПоставляемойПанели(ИмяМакетаПанели, Ошибки = Неопределено) Экспорт

	ПанельПодключения = анлАналитика.ОписаниеПодключенияСистемыАналитики();
	
	СтруктураМакета = СтруктураПоставляемойПанели(ИмяМакетаПанели);
	ДвоичныеДанныеПанели = ПолучитьДвоичныеДанныеИзСтроки(
		анлАналитика.ЗначениеВJSON(СтруктураМакета.ДанныеПанели));
	ПоставляемаяПанель = анлАналитика.ОписаниеПанелиСистемыАналитикиИзДвоичныхДанных(ДвоичныеДанныеПанели);
	
	ОшибкиСтруктурыПоставляемойПанелиВПодключении(ПоставляемаяПанель, ПанельПодключения, Ошибки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПоставляемыеПанелиКонфигурацииВДеревоЗначений(ПоставляемыеПанели)
	
	ДеревоПанелей = Новый ДеревоЗначений;
	ДеревоПанелей.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ДеревоПанелей.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	ДеревоПанелей.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("Строка"));
	ДеревоПанелей.Колонки.Добавить("ИмяМакета", Новый ОписаниеТипов("Строка"));
	
	Для Каждого ПоставляемаяПанель Из ПоставляемыеПанели Цикл
		
		МакетПанели = Метаданные.ОбщиеМакеты[ПоставляемаяПанель.ИмяМакета];
		
		ИерархияНаименований = СтрРазделить(МакетПанели.Синоним, "/", Ложь);
		ИнформацияОМакете = ИнформацияОМакетеПанели(МакетПанели); 
		
		СтрокаДерева = Неопределено;
		Для ИндексИерархии = 0 По ИерархияНаименований.ВГраница() Цикл
			 
			 СтрокаИерархии = ?(СтрокаДерева = Неопределено, ДеревоПанелей, СтрокаДерева);
			 Наименование = ИерархияНаименований[ИндексИерархии];

			 СтрокаДерева = СтрокаИерархии.Строки.Найти(Наименование, "Наименование", Ложь);
			 Если СтрокаДерева = Неопределено Тогда
			 
				 СтрокаДерева = СтрокаИерархии.Строки.Добавить();
				 СтрокаДерева.Наименование = Наименование;
				 Если ИндексИерархии = ИерархияНаименований.ВГраница() Тогда
					 СтрокаДерева.Описание = ИнформацияОМакете.Описание;
					 СтрокаДерева.Поставщик = ИнформацияОМакете.Поставщик;
					 СтрокаДерева.ИмяМакета = МакетПанели.Имя;
				 КонецЕсли;
				 
			 КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
	
	Возврат ДеревоПанелей;
	
КонецФункции

Процедура СтрокиПанелейКонфигурацииВЭлементыДереваПанелей(
	Знач СтрокиПанелейКонфигурации, ЭлементыДереваПанелей)
	
	
	Если СтрокиПанелейКонфигурации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаПанелиКонфигурации Из СтрокиПанелейКонфигурации Цикл
		
		ЭлементДереваПанелей = ЭлементыДереваПанелей.Добавить();
		ЭлементДереваПанелей.Наименование = СтрокаПанелиКонфигурации.Наименование;
		ЭлементДереваПанелей.ЭтоГруппа = ?(СтрокаПанелиКонфигурации.Строки.Количество() > 0, Истина, Ложь);
		
		Если ЭлементДереваПанелей.ЭтоГруппа Тогда
			ЭлементДереваПанелей.Картинка = БиблиотекаКартинок.ЗагрузитьНастройкиОтчета;
		Иначе
			
			ЭлементДереваПанелей.Поставщик = СтрокаПанелиКонфигурации.Поставщик;
			ЭлементДереваПанелей.Описание = СтрокаПанелиКонфигурации.Описание;
			ЭлементДереваПанелей.Картинка = БиблиотекаКартинок.Диаграмма;
			ЭлементДереваПанелей.ИмяМакета = СтрокаПанелиКонфигурации.ИмяМакета;
			
		КонецЕсли;
		
		СтрокиПанелейКонфигурацииВЭлементыДереваПанелей(
			СтрокаПанелиКонфигурации.Строки, ЭлементДереваПанелей.ПолучитьЭлементы());
		 
	КонецЦикла;
	
КонецПроцедуры

Функция ИнформацияОМакетеПанели(МакетПанели)
	
	ИнформацияОМакете = Новый Структура("Описание, Поставщик");
	
	МассивИнформацииОМакете = СтрРазделить(МакетПанели.Комментарий, "/", Ложь);
	Если Не МассивИнформацииОМакете.Количество() = 2 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Комментарий общего макета ""%1"" содержит некорректное описание поставляемой панели и производителя.'"),
				МакетПанели.Имя)
		);
	КонецЕсли;

	Для ИндексИнформации = 0 По МассивИнформацииОМакете.ВГраница() Цикл
		Если ИндексИнформации = 0 Тогда
			ИнформацияОМакете["Описание"] = МассивИнформацииОМакете[ИндексИнформации];
		ИначеЕсли ИндексИнформации = 1 Тогда
			ИнформацияОМакете["Поставщик"] = МассивИнформацииОМакете[ИндексИнформации];
		КонецЕсли;
	КонецЦикла;			
	
	Возврат ИнформацияОМакете;
	
КонецФункции

Процедура ЗаполнитьСтатусыЭлементовДерева(ЭлементыДереваПанелей, ПоставляемыеПанели)
	
	Если ЭлементыДереваПанелей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементДереваПанелей Из ЭлементыДереваПанелей Цикл
		
		ИмяМакета = ЭлементДереваПанелей.ИмяМакета;
		Если ЗначениеЗаполнено(ИмяМакета) Тогда
			
			СтрокаПанели = ПоставляемыеПанели.Найти(ИмяМакета);
			Если СтрокаПанели = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементДереваПанелей.ДатаИзмененияКонфигурация = СтрокаПанели.ДатаИзмененияКонфигурация;
			ЭлементДереваПанелей.ДатаИзмененияАналитика = СтрокаПанели.ДатаИзмененияАналитика;

			ОтчетОСравненииКартинка = БиблиотекаКартинок.Пустая;
			ОтчетОСравнении = Ложь;
						
			Если НЕ ЗначениеЗаполнено(ЭлементДереваПанелей.ДатаИзмененияАналитика) Тогда
				ЭлементДереваПанелей.СтатусКартинка = БиблиотекаКартинок.ОформлениеКругПустой;
				ЭлементДереваПанелей.ДействиеКартинка = БиблиотекаКартинок.ВосстановитьЗначения;
				ЭлементДереваПанелей.Действие = "Установить в 1С:Аналитика";
			Иначе
				ЭлементДереваПанелей.Действие = "Обновить в 1С:Аналитика";
				ЭлементДереваПанелей.ДействиеКартинка = БиблиотекаКартинок.Обновить;
				
				СтатусКартинка = БиблиотекаКартинок.ОформлениеКругЖелтый;
				
				Если ЭлементДереваПанелей.ДатаИзмененияКонфигурация = ЭлементДереваПанелей.ДатаИзмененияАналитика Тогда
					СтатусКартинка = БиблиотекаКартинок.ОформлениеКругЗеленый;
				Иначе
					ОтчетОСравненииКартинка = БиблиотекаКартинок.Вопрос32;
					ОтчетОСравнении = Истина;
				КонецЕсли;
				
				ЭлементДереваПанелей.СтатусКартинка = СтатусКартинка;
			КонецЕсли;

			ЭлементДереваПанелей.ОтчетОСравненииКартинка = ОтчетОСравненииКартинка;
			ЭлементДереваПанелей.ОтчетОСравнении = ОтчетОСравнении;
						
		КонецЕсли;
		
		ЗаполнитьСтатусыЭлементовДерева(ЭлементДереваПанелей.ПолучитьЭлементы(), ПоставляемыеПанели);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураПоставляемойПанели(ИмяМакета)
	
	Возврат анлПоставляемыеПанелиПовтИсп.СтруктураПоставляемойПанели(ИмяМакета);
	
КонецФункции

Функция ДатаИзмененияОбъектовАналитики(ОбъектыАналитики, СтруктураПанели)

	МассивИдентификаторовДляПубликации = Неопределено;
	Для каждого ЭлементПанели Из СтруктураПанели.ДанныеПанели Цикл
		
		Если ЭлементПанели.Свойство("name")
			И ЭлементПанели["name"] = "ROOT_FOLDER_NAME" Тогда
			МассивИдентификаторовДляПубликации = ЭлементПанели["links"];
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ДатаИзменения = Дата(1, 1, 1);
	Для каждого ИдентификаторМакета Из СтруктураПанели.Идентификаторы Цикл
		
		Для Каждого ОбъектАналитики Из ОбъектыАналитики Цикл
			
			Если ОбъектАналитики["id"] <> ИдентификаторМакета Тогда
				Продолжить;
			КонецЕсли;
			
			ДатаОбъектаАналитики = анлАналитика.ДатаПоМеткеВремени(ОбъектАналитики.updated);
			Если ДатаОбъектаАналитики > ДатаИзменения Тогда
				ДатаИзменения = ДатаОбъектаАналитики;
			КонецЕсли;

		КонецЦикла;
		
	КонецЦикла;
	
	Если Не ДатаИзменения = Дата(1, 1, 1) Тогда
		ДатаИзмененияОбщегоКаталога = Дата(1, 1, 1);
		Для каждого ОбъектАналитики Из ОбъектыАналитики Цикл
			
			Если ОбъектАналитики["Id"] = "COMMON_FOLDER_ID" Тогда
				Если ОбъектАналитики.Свойство("updated") Тогда
					Если ОбъектАналитики.Свойство("links") Тогда
						РазностьМассивов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивИдентификаторовДляПубликации, ОбъектАналитики["links"]);
						Если РазностьМассивов.Количество() Тогда
							//Публикация была удалена или нарушена
							ДатаИзмененияОбщегоКаталога = анлАналитика.ДатаПоМеткеВремени(ОбъектАналитики.updated);
						Иначе
							//Публикая для панели корректна
							Прервать;
						КонецЕсли;
					Иначе
						//Публикация была удалена
						ДатаИзмененияОбщегоКаталога = анлАналитика.ДатаПоМеткеВремени(ОбъектАналитики.updated);
					КонецЕсли;
				Иначе
					//Публикация не выполнялась ??? - нарушен процесс публикации
					ДатаИзмененияОбщегоКаталога = ?(ДатаИзменения = Дата(1, 1, 1), Дата(1, 1, 1), ДатаИзменения + 1);
				КонецЕсли;
				
				ДатаИзменения = ?(ДатаИзменения > ДатаИзмененияОбщегоКаталога, ДатаИзменения, ДатаИзмененияОбщегоКаталога);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ?(ДатаИзменения > Дата(1, 1, 1), ДатаИзменения, Неопределено);
	
КонецФункции

// Добавляет запись в журнал регистрации.
//
// Параметры:
//  СообщениеОбОшибке - Строка - комментарий к записи журнала регистрации;
//  Ошибка - Булево - если истина будет установлен уровень журнала регистрации "Ошибка";
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных для которого регистрируется ошибка.
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(
		СообщениеОбОшибке,
		Ошибка = Истина,
		ОбъектМетаданных = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Поставляемые панели 1С:Аналитика'"),
		?(Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация),
		?(ОбъектМетаданных = Неопределено, Обработки.анлУправлениеПоставляемымиПанелями1САналитика, ОбъектМетаданных),
		,
		Лев(СообщениеОбОшибке, 5120));
	
КонецПроцедуры

Функция ОшибкиСтруктурыПоставляемойПанелиВПодключении(ПоставляемаяПанель, ПанельПодключения, Ошибки = Неопределено)

	//Проходим по описанию поставляемой панели и проверяем в текущем подключении, в существующих объектах 1С:Аналитика
	//1. наличие в COMMON_FOLDER_ID идентификаторов из ПоставляемаяПанель.РабочиеСтолы[N].Links
	Отбор = Новый Структура("Id", "COMMON_FOLDER_ID");
	ОбщийКаталогПодключения = ПанельПодключения.Папки.НайтиСтроки(Отбор);

	Если ОбщийКаталогПодключения.Количество() = 0 Тогда
		//TODO ошибка - отсутствует каталог публикации для всех пользователей
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,, "Отсутствует каталог общей публикации",,,,);
	Иначе
		Отбор = Новый Структура("name", "ROOT_FOLDER_NAME");
		КаталогРабочегоСтола = ПоставляемаяПанель.Папки.НайтиСтроки(Отбор);
		Если КаталогРабочегоСтола.Количество() Тогда
			//КаталогРабочегоСтола[0]["Links"] - папки поставялемой панели, должны быть опубликованы для всех пользователей
			РазностьМассивов = РазностьСписковЗначений(КаталогРабочегоСтола[0]["Links"], ОбщийКаталогПодключения[0]["Links"]);
			Если РазностьМассивов.Количество() Тогда
				ОтсутствующиеИдентификаторы = "";
				Для каждого ЭлементМассива Из РазностьМассивов Цикл
					ОтсутствующиеИдентификаторы = СтрШаблон("%1%2%3",
						ОтсутствующиеИдентификаторы,
						Строка(ЭлементМассива),
						Символы.ПС);
				КонецЦикла;
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,,
				СтрШаблон("Нарушена публикация поставляемой панели.
					| Отсутствуют следующие общие элементы: 
					|%1",ОтсутствующиеИдентификаторы),
				);
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,, "Ошибка в данных поставляемой панели 1С:Аналитика - отсутствует корневой каталог панели.",
				);
		КонецЕсли;
	КонецЕсли;

	//2. Связность - то, что структура каталогов, элементов каталогов (их содержимое) соответствует поставляемой панели
	//ПоставляемаяПанель.Папки[N].Data_FolderIds - вложенные каталоги
	//ПоставляемаяПанель.Папки[N].Data_FileIds - вложенные элементы 
	Для каждого ПоставляемыйКаталог Из ПоставляемаяПанель.Папки Цикл
		Если ПоставляемыйКаталог["name"] = "ROOT_FOLDER_NAME" Тогда
			Продолжить;
		КонецЕсли;

		//Найдем данный каталог в подключении
		Отбор = Новый Структура("Id", ПоставляемыйКаталог["Id"]);
		НайденныйКаталог = ПанельПодключения.Папки.НайтиСтроки(Отбор);
		Если НайденныйКаталог.Количество() Тогда
			РазностьМассивов1 = РазностьСписковЗначений(ПоставляемыйКаталог["Data_FolderIds"], НайденныйКаталог[0]["Data_FolderIds"]);
			РазностьМассивов2 = РазностьСписковЗначений(ПоставляемыйКаталог["Data_FileIds"], НайденныйКаталог[0]["Data_FileIds"]);

			Если РазностьМассивов1.Количество() Или РазностьМассивов2.Количество() Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,,
					СтрШаблон("Нарушена структура каталога ""%1"".", ПоставляемыйКаталог["name"]),
					);
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,,
				СтрШаблон("Не найден каталог ""%1"".", ПоставляемыйКаталог["name"]),
				);
		КонецЕсли;
	КонецЦикла;

	//3. Структура дашбордов - проверим состав дашбордов
	Для каждого ПоставляемыйДашборд Из ПоставляемаяПанель.Дашборды Цикл
		Отбор = Новый Структура("Id", ПоставляемыйДашборд["Id"]);
		НайденныйДашборд = ПанельПодключения.Дашборды.НайтиСтроки(Отбор);
		Если НайденныйДашборд.Количество() Тогда
			РазностьМассивов = РазностьСписковЗначений(ПоставляемыйДашборд["Links"], НайденныйДашборд[0]["Links"]);
			
			Если РазностьМассивов.Количество() Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,,
					СтрШаблон("Нарушен состав дашборда ""%1"".", ПоставляемыйДашборд["name"]),
					);
			КонецЕсли;

		Иначе
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,,
				СтрШаблон("Не найден дашборд ""%1"" поставляемой панели.", ПоставляемыйДашборд["name"]),
				);
		КонецЕсли;
	КонецЦикла;

	//4. Источники данных - проверим состав и тексты запросов
	Для каждого ИсточникДанных Из ПоставляемаяПанель.ИсточникиДанных Цикл
		Отбор = Новый Структура("Id", ИсточникДанных["Id"]);
		НайденныИсточник = ПанельПодключения.ИсточникиДанных.НайтиСтроки(Отбор);

		Если НайденныИсточник.Количество() Тогда
			Если Не НайденныИсточник[0]["Data"] = ИсточникДанных["Data"] Тогда
				//TODO ошибка - Текст определения источника в подключении отличается от текста источника поставляемой панели
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,,
					СтрШаблон("В источнике данных ""%1"" текст запроса отличается от текста запроса источника данных поставляемой панели.", ИсточникДанных["Id"]),
					);
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,,
				СтрШаблон("Не найден источник данных ""%1"".", ИсточникДанных["Id"]),
				);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ошибки;
	
КонецФункции

// Возвращает разность массивов. Разностью двух массивов является массив, содержащий
// все элементы первого массива, не существующие во втором массиве.
//
// Параметры:
//  Массив - Массив - массив элементов, из которого необходимо выполнить вычитание;
//  МассивВычитания - Массив - массив элементов, который будет вычитаться.
// 
// Возвращаемое значение:
//  Массив - разностью двух массивов.
//
// Пример:
//	//А = [1, 3, 5, 7];
//	//В = [3, 7, 9];
//	Результат = ОбщегоНазначенияКлиентСервер.РазностьМассивов(А, В);
//	//Результат = [1, 5];
//
Функция РазностьСписковЗначений(Знач СписокЗначений, Знач СписокЗначенийВычитания)
	
	Результат = Новый Массив;
	Для Каждого Элемент Из СписокЗначений Цикл
		Если СписокЗначенийВычитания.НайтиПоЗначению(Элемент.Значение) = Неопределено Тогда
			Результат.Добавить(Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

#КонецОбласти