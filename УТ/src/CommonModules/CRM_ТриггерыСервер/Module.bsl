////////////////////////////////////////////////////////////////////////////////
// CRM триггеры сервер
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Вернуть обработку действия
//
// Параметры:
//  Триггер	 - СправочникСсылка	 - Выполняемы триггер.
// 
// Возвращаемое значение:
//  ВнешняяОбработка, Неопределено - Возвращает обработку действия, либо Неопределено.
//
Функция ВернутьОбработкуДействия(Триггер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Триггер.Действие.РежимОтладки Тогда
		ИмяВременногоФайла = Триггер.Действие.ПутьКОбработке;
		ФайлНаДиске = Новый Файл(ИмяВременногоФайла);
		Если ФайлНаДиске.Существует() Тогда
			Обработка = ВнешниеОбработки.Создать(ИмяВременногоФайла, Ложь);
			Возврат Обработка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе	
	//	Обработка = CRM_ТриггерыПовтИсп.ВернутьОбработкуДействия(Триггер);
		ОбработкаПроверки = Триггер.Действие.ОбработкаДействия.Получить();
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");
		ОбработкаПроверки.Записать(ИмяВременногоФайла);
		
		ПараметрыЗащиты = Новый("ОписаниеЗащитыОтОпасныхДействий" + "");
		ПараметрыЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;                                            
		
		Данные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресХранилища = ПоместитьВоВременноеХранилище(Данные, Новый УникальныйИдентификатор());
		
		Обработка =  ВнешниеОбработки.Создать(ВнешниеОбработки.Подключить(АдресХранилища, , Ложь, ПараметрыЗащиты), Ложь);
		Возврат Обработка;
	КонецЕсли;	
	
КонецФункции	

// Вернуть обработку условия
//
// Параметры:
//  Триггер	 - СправочникСсылка	 - Выполняемы триггер.
// 
// Возвращаемое значение:
//  ВнешняяОбработка - Возвращает обработку условия.
//
Функция ВернутьОбработкуУсловия(Триггер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяВременногоФайла = Триггер.УсловиеСрабатывания.ПутьКОбработке;
	
	Обработка = ВнешниеОбработки.Создать(ИмяВременногоФайла, Ложь);
	Возврат Обработка;
КонецФункции

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения	 - Передаваемая форма.
//  Отказ				 - Булево			 - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево			 - Признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Триггер = ПолучитьТриггер(Форма.Объект.Ссылка, Перечисления.CRM_СобытияТриггеров.ПриСозданииНаСервере);
	
	Если НЕ Триггер = Неопределено Тогда
		Если Триггер.Действие.РежимОтладки Тогда
			Обработка = ВернутьОбработкуДействия(Триггер);
		Иначе	
			Обработка = CRM_ТриггерыПовтИсп.ВернутьОбработкуДействия(Триггер);
		КонецЕсли;
		СообщениеДействия = "";
		Попытка
			
			Если Обработка = Неопределено Тогда
				СообщениеДействия = НСтр("ru = 'Не удалось получить обработку действия триггера!!!'");
				ВызватьИсключение СообщениеДействия;
			КонецЕсли;
				
			НастройкиДействий = Триггер.НастройкиДействий.Получить();
			Если ТипЗнч(НастройкиДействий) = Тип("Структура") Тогда
				Для Каждого КлючИЗначение Из НастройкиДействий Цикл
					Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
						Если НЕ Обработка.Метаданные().ТабличныеЧасти.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
							Обработка[КлючИЗначение.Ключ].Очистить();
							Для Каждого СтруктураСтроки Из КлючИЗначение.Значение Цикл
								НоваяСтрока = Обработка[КлючИЗначение.Ключ].Добавить();
								Для Каждого КлючИЗначениеСтроки Из СтруктураСтроки Цикл
									Если НЕ Обработка.Метаданные().ТабличныеЧасти[КлючИЗначение.Ключ].Реквизиты.Найти(КлючИЗначениеСтроки.Ключ) = Неопределено Тогда
										
										НоваяСтрока[КлючИЗначениеСтроки.Ключ] = КлючИЗначениеСтроки.Значение;
										
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
						КонецЕсли;
					ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Обработка, КлючИЗначение.Ключ) Тогда
						Обработка[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Обработка.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
			
			Если Обработка.Метаданные().Реквизиты.Найти("СообщениеДействия") <> Неопределено Тогда
				СообщениеДействия = Обработка.СообщениеДействия;
			КонецЕсли;
			
			Если Триггер.ВключатьВЛоги Тогда
				Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(Триггер, Форма.Объект.Ссылка, , СообщениеДействия);
			КонецЕсли;
			
		Исключение
			Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(Триггер, Форма.Объект.Ссылка,
				 ?(ЗначениеЗаполнено(СообщениеДействия), СообщениеДействия,
				 "Действие не выполнено."));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - Передаваемая форма.
//  Отказ			 - Булево			 - Признак отказа от создания формы.
//  ТекущийОбъект	 - СправочникОбъект	 - Записываемый объект.
//  ПараметрыЗаписи	 - Структура		 - Структура, содержащая параметры записи.
//
Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Триггер = ПолучитьТриггер(Форма.Объект.Ссылка, Перечисления.CRM_СобытияТриггеров.ПередЗаписьюНаСервере);
	
	Если НЕ Триггер = Неопределено Тогда
		Если Триггер.Действие.РежимОтладки Тогда
			Обработка = ВернутьОбработкуДействия(Триггер);
		Иначе	
			Обработка = CRM_ТриггерыПовтИсп.ВернутьОбработкуДействия(Триггер);
		КонецЕсли;
		СообщениеДействия = "";
		Попытка
			
			Если Обработка = Неопределено Тогда
				СообщениеДействия = НСтр("ru = 'Не удалось получить обработку действия триггера!!!'");
				ВызватьИсключение СообщениеДействия;
			КонецЕсли;
			
			НастройкиДействий = Триггер.НастройкиДействий.Получить();
			Если ТипЗнч(НастройкиДействий) = Тип("Структура") Тогда
				Для Каждого КлючИЗначение Из НастройкиДействий Цикл
					Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
						Если НЕ Обработка.Метаданные().ТабличныеЧасти.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
							Обработка[КлючИЗначение.Ключ].Очистить();
							Для Каждого СтруктураСтроки Из КлючИЗначение.Значение Цикл
								НоваяСтрока = Обработка[КлючИЗначение.Ключ].Добавить();
								Для Каждого КлючИЗначениеСтроки Из СтруктураСтроки Цикл
									Если НЕ Обработка.Метаданные().ТабличныеЧасти[КлючИЗначение.Ключ].Реквизиты.Найти(КлючИЗначениеСтроки.Ключ) = Неопределено Тогда
										
										НоваяСтрока[КлючИЗначениеСтроки.Ключ] = КлючИЗначениеСтроки.Значение;
										
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
						КонецЕсли;
					ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Обработка, КлючИЗначение.Ключ) Тогда
						Обработка[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Обработка.ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
			
			Если Обработка.Метаданные().Реквизиты.Найти("СообщениеДействия") <> Неопределено Тогда
				СообщениеДействия = Обработка.СообщениеДействия;
			КонецЕсли;
			
			Если Триггер.ВключатьВЛоги Тогда
				Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(Триггер, Форма.Объект.Ссылка, , СообщениеДействия);
			КонецЕсли;
		Исключение
			Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(Триггер, Форма.Объект.Ссылка,
				 ?(ЗначениеЗаполнено(СообщениеДействия), СообщениеДействия,
				 "Действие не выполнено."));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения - Передаваемая форма.
//  ТекущийОбъект	 - СправочникОбъект	 - Записываемый объект. 
//  ПараметрыЗаписи	 - Структура - Структура, содержащая параметры записи. 
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Триггер = ПолучитьТриггер(Форма.Объект.Ссылка, Перечисления.CRM_СобытияТриггеров.ПослеЗаписиНаСервере);
	
	Если НЕ Триггер = Неопределено Тогда
		Если Триггер.Действие.РежимОтладки Тогда
			Обработка = ВернутьОбработкуДействия(Триггер);
		Иначе	
			Обработка = CRM_ТриггерыПовтИсп.ВернутьОбработкуДействия(Триггер);
		КонецЕсли;
		СообщениеДействия = "";
		Попытка
			
			Если Обработка = Неопределено Тогда
				СообщениеДействия = НСтр("ru = 'Не удалось получить обработку действия триггера!!!'");
				ВызватьИсключение СообщениеДействия;
			КонецЕсли;
			
			НастройкиДействий = Триггер.НастройкиДействий.Получить();
			Если ТипЗнч(НастройкиДействий) = Тип("Структура") Тогда
				Для Каждого КлючИЗначение Из НастройкиДействий Цикл
					Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
						Если НЕ Обработка.Метаданные().ТабличныеЧасти.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
							Обработка[КлючИЗначение.Ключ].Очистить();
							Для Каждого СтруктураСтроки Из КлючИЗначение.Значение Цикл
								НоваяСтрока = Обработка[КлючИЗначение.Ключ].Добавить();
								Для Каждого КлючИЗначениеСтроки Из СтруктураСтроки Цикл
									Если НЕ Обработка.Метаданные().ТабличныеЧасти[КлючИЗначение.Ключ].Реквизиты.Найти(КлючИЗначениеСтроки.Ключ) = Неопределено Тогда
										
										НоваяСтрока[КлючИЗначениеСтроки.Ключ] = КлючИЗначениеСтроки.Значение;
										
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
						КонецЕсли;
					ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Обработка, КлючИЗначение.Ключ) Тогда
						Обработка[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Обработка.ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
			
			Если Обработка.Метаданные().Реквизиты.Найти("СообщениеДействия") <> Неопределено Тогда
				СообщениеДействия = Обработка.СообщениеДействия;
			КонецЕсли;
			
			Если Триггер.ВключатьВЛоги Тогда
				Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(Триггер, Форма.Объект.Ссылка, , СообщениеДействия);
			КонецЕсли;
		Исключение
			Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(Триггер, Форма.Объект.Ссылка,
				 ?(ЗначениеЗаполнено(СообщениеДействия), СообщениеДействия,
				 "Действие не выполнено."));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТриггер(Источник, Событие)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_Триггеры.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.CRM_Триггеры КАК CRM_Триггеры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_УсловияСрабатыванияТриггеров.ОбъектыОбработки КАК CRM_УсловияСрабатыванияТриггеровОбъектыОбработки
	               |		ПО CRM_Триггеры.УсловиеСрабатывания = CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.Ссылка
	               |			И (CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.ОбъектОбработки = &ОбъектОбработки)
	               |			И (CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.Ссылка.Событие = &Событие)
	               |ГДЕ
	               |	CRM_Триггеры.Действует
	               |	И НЕ CRM_Триггеры.Действие = ЗНАЧЕНИЕ(Справочник.CRM_ДействияТриггеров.ПустаяСсылка)";
	Запрос.УстановитьПараметр("Событие"			, Событие);
	Запрос.УстановитьПараметр("ОбъектОбработки"	, ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Источник)));
	ВыборкаТриггеров = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаТриггеров.Следующий() Цикл
		
		Возврат ВыборкаТриггеров.Ссылка;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьОбработкуДействийДляКлиента(Источник, Событие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_Триггеры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_Триггеры КАК CRM_Триггеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_УсловияСрабатыванияТриггеров.ОбъектыОбработки КАК CRM_УсловияСрабатыванияТриггеровОбъектыОбработки
	|		ПО CRM_Триггеры.УсловиеСрабатывания = CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.Ссылка
	|			И (CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.ОбъектОбработки = &ОбъектОбработки)
	|			И (CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.Ссылка.Событие = &Событие)
	|			И (НЕ CRM_Триггеры.Действие = ЗНАЧЕНИЕ(Справочник.CRM_ДействияТриггеров.ПустаяСсылка))
	|			И (CRM_Триггеры.Действует)";
	Запрос.УстановитьПараметр("Событие"			, Событие);
	Запрос.УстановитьПараметр("ОбъектОбработки"	, ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Источник)));
	ВыборкаТриггеров = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаТриггеров.Следующий() Цикл
		
		НастройкиДействий = ВыборкаТриггеров.Ссылка.НастройкиДействий.Получить();
		
		АдресХранилища = ПоместитьВоВременноеХранилище(ВыборкаТриггеров.Ссылка.Действие.ОбработкаДействия.Получить(),
			 Новый УникальныйИдентификатор());
		
		Возврат Новый Структура("ОбработкаДействий,НастройкиДействий",
			 ВнешниеОбработки.Подключить(АдресХранилища),
			 НастройкиДействий); 
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура яCRM_ТриггерыПередЗаписьюОбъекта(Источник, Отказ, РежимЗаписи = Неопределено,
	 РежимПроведения = Неопределено) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	ЭлементСостава = Метаданные.ОбщиеРеквизиты.ОбластьДанныхОсновныеДанные.Состав.Найти(Источник.Метаданные());
	Если  ЭлементСостава = Неопределено
		
		 	 Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать Тогда Возврат; КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Источник.ЭтоНовый());
	КонецЕсли;
	Если Источник.ДополнительныеСвойства.Свойство("НеЗапускатьТриггер") Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_Триггеры.Ссылка КАК Ссылка,
	               |	CRM_Триггеры.УсловиеСрабатывания КАК УсловиеСрабатывания,
	               |	CRM_Триггеры.Действие КАК Действие
	               |ИЗ
	               |	Справочник.CRM_Триггеры КАК CRM_Триггеры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_УсловияСрабатыванияТриггеров.ОбъектыОбработки КАК CRM_УсловияСрабатыванияТриггеровОбъектыОбработки
	               |		ПО CRM_Триггеры.УсловиеСрабатывания = CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.Ссылка
	               |			И (CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.ОбъектОбработки = &ОбъектОбработки)
	               |			И (CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.Ссылка.Событие = ЗНАЧЕНИЕ(Перечисление.CRM_СобытияТриггеров.ПередЗаписью))
	               |ГДЕ
	               |	CRM_Триггеры.Действует";
	Запрос.УстановитьПараметр("ОбъектОбработки", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Источник)));
	ВыборкаТриггеров = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТриггеров.Следующий() Цикл
		Если ВыборкаТриггеров.УсловиеСрабатывания.ПометкаУдаления Тогда
			Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник,
				 НСтр("ru='Условие срабатывания триггера помечено на удаление!';
				|en='Trigger condition is marked for deleting!'"));
			Продолжить;
		КонецЕсли;
		Если ВыборкаТриггеров.Действие.ПометкаУдаления Тогда
			Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник,
				 НСтр("ru='Действие триггера помечено на удаление!';
				|en='This trigger action is marked for deletion!'"));
			Продолжить;
		КонецЕсли;
		
		Если НЕ Справочники.CRM_Триггеры.ПроверитьПовторноеИспользование(ВыборкаТриггеров.Ссылка, Источник) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектыДействия = Неопределено;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "ДополнительныеСвойства") Тогда
			ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		Иначе
			ДополнительныеСвойства = Новый Структура;
		КонецЕсли;
		
		ПроверкаПрошла = Справочники.CRM_Триггеры.ПроверитьУсловияТриггера(ВыборкаТриггеров.Ссылка, 
			Источник, ОбъектыДействия, ДополнительныеСвойства);
		
		Если ПроверкаПрошла Тогда
			Если ОбъектыДействия <> Неопределено И ТипЗнч(ОбъектыДействия) = Тип("Массив")
				 И ОбъектыДействия.Количество() > 0 Тогда
				Для Каждого ОбъектДействияСсылка Из ОбъектыДействия Цикл
					ОбъектДействия = ОбъектДействияСсылка.ПолучитьОбъект();
					Попытка
						СообщениеДействия = "";
						ТриггерВыполнен = Справочники.CRM_Триггеры.ВыполнитьТриггер(ВыборкаТриггеров.Ссылка,
							 ОбъектДействия, Источник, Отказ,
							 СообщениеДействия);
						Если ОбъектДействия.ДополнительныеСвойства.Свойство("ОбъектИзменен") Тогда
							ОбъектДействия.ДополнительныеСвойства.Удалить("ОбъектИзменен");
							ОбъектДействия.Записать();
						КонецЕсли;
						Если ТриггерВыполнен Тогда // И НЕ ВыборкаТриггеров.Ссылка.РазрешитьПовторноеСрабатывание
							Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(ВыборкаТриггеров.Ссылка,
								 ОбъектДействия, Источник,
								 СообщениеДействия);
						ИначеЕсли НЕ ТриггерВыполнен Тогда
							Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, ОбъектДействия,
								 ?(ЗначениеЗаполнено(СообщениеДействия), СообщениеДействия,
								 "Действие не выполнено."));		
						КонецЕсли;
					Исключение
						Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, ОбъектДействия, ОписаниеОшибки());
						ДобавитьОповещениеПоТриггеру(ВыборкаТриггеров.Ссылка);
					КонецПопытки;
				КонецЦикла;
			Иначе
				Попытка
					СообщениеДействия = "";
					ТриггерВыполнен = Справочники.CRM_Триггеры.ВыполнитьТриггер(ВыборкаТриггеров.Ссылка, Источник,
						 Источник, Отказ,
						 СообщениеДействия);
					Если ТриггерВыполнен Тогда // И НЕ ВыборкаТриггеров.Ссылка.РазрешитьПовторноеСрабатывание
						Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(ВыборкаТриггеров.Ссылка, Источник,
							 Источник,
							 СообщениеДействия);
					ИначеЕсли НЕ ТриггерВыполнен Тогда
						Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник,
							 ?(ЗначениеЗаполнено(СообщениеДействия), СообщениеДействия,
							 "Действие не выполнено."));		
					КонецЕсли;
				Исключение
					Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник, ОписаниеОшибки());
					ДобавитьОповещениеПоТриггеру(ВыборкаТриггеров.Ссылка);
				КонецПопытки;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

Процедура яCRM_ТриггерыПриЗаписиОбъекта(Источник, Отказ, РежимПроведения = Неопределено) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСостава = Метаданные.ОбщиеРеквизиты.ОбластьДанныхОсновныеДанные.Состав.Найти(Источник.Метаданные());
	Если ЭлементСостава = Неопределено
		Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НеЗапускатьТриггер") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	CRM_Триггеры.Ссылка КАК Ссылка,
	|	CRM_Триггеры.ОтложенноеВыполнение КАК ОтложенноеВыполнение,
	|	CRM_Триггеры.ПовторятьПриОшибке КАК ПовторятьПриОшибке,
	|	CRM_Триггеры.Действие КАК Действие,
	|	CRM_Триггеры.УсловиеСрабатывания КАК УсловиеСрабатывания
	|ИЗ
	|	Справочник.CRM_Триггеры КАК CRM_Триггеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_УсловияСрабатыванияТриггеров.ОбъектыОбработки КАК CRM_УсловияСрабатыванияТриггеровОбъектыОбработки
	|		ПО CRM_Триггеры.УсловиеСрабатывания = CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.Ссылка
	|			И (CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.ОбъектОбработки = &ОбъектОбработки)
	|			И (CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.Ссылка.Событие = &Событие)
	|ГДЕ
	|	CRM_Триггеры.Действует";
	
	Запрос.УстановитьПараметр("ОбъектОбработки", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Источник)));
	Запрос.УстановитьПараметр("Событие", ?(РежимПроведения = Неопределено,
		 Перечисления.CRM_СобытияТриггеров.ПриЗаписи,
		 Перечисления.CRM_СобытияТриггеров.ОбработкаПроведения));
	
	ОтложенныеТриггеры = Новый Массив;
	
	ДанныеТриггеров = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из ДанныеТриггеров Цикл
		
		Если Строка.УсловиеСрабатывания.ПометкаУдаления Тогда
			ТекстОшибки = НСтр("ru='Условие срабатывания триггера помечено на удаление.';
				|en='Trigger condition is marked for deleting.'");
			Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(Строка.Ссылка, Источник, Текстошибки);
			Продолжить;
		КонецЕсли;
		Если Строка.Действие.ПометкаУдаления Тогда
			ТекстОшибки = НСтр("ru='Действие триггера помечено на удаление.';en='This trigger action is marked for deletion.'");
			Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(Строка.Ссылка, Источник, ТекстОшибки);
			Продолжить;
		КонецЕсли;
		Если Источник.ДополнительныеСвойства.Свойство("ВыполнениеТриггера")
			И Источник.ДополнительныеСвойства.ВыполнениеТриггера = Строка.Ссылка Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не Справочники.CRM_Триггеры.ПроверитьПовторноеИспользование(Строка.Ссылка, Источник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.ОтложенноеВыполнение Тогда
			ОтложенныеТриггеры.Добавить(Строка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		ОбъектыДействия = Неопределено;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "ДополнительныеСвойства") Тогда
			ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		Иначе
			ДополнительныеСвойства = Новый Структура;
		КонецЕсли;
		
		ПроверкаПрошла = Справочники.CRM_Триггеры.ПроверитьУсловияТриггера(Строка.Ссылка, 
			Источник, ОбъектыДействия, ДополнительныеСвойства);
		
		Если ПроверкаПрошла Тогда
			Если ОбъектыДействия <> Неопределено И ТипЗнч(ОбъектыДействия) = Тип("Массив")
				 И ОбъектыДействия.Количество() > 0 Тогда
				Для Каждого ОбъектДействияСсылка Из ОбъектыДействия Цикл
					
					ОбъектДействия = ОбъектДействияСсылка.ПолучитьОбъект();
					ЗапуститьВыполнениеТриггера(Строка.Ссылка, ОбъектДействия, Источник, Отказ, Строка.ПовторятьПриОшибке);
					
				КонецЦикла;
			Иначе
				
				ЗапуститьВыполнениеТриггера(Строка.Ссылка, Источник, Источник, Отказ, Строка.ПовторятьПриОшибке);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОтложенныеТриггеры.Количество() > 0 Тогда
		ДополнительныеСвойстваИсточника = ЗначениеВСтрокуВнутр(Источник.ДополнительныеСвойства);
		ДлительныеОперации.ВыполнитьПроцедуру(, "CRM_ТриггерыСервер.ПроверитьЗарегистрироватьОтложенныеТриггеры",
			ОтложенныеТриггеры, Источник.Ссылка, ДополнительныеСвойстваИсточника);
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗапуститьВыполнениеТриггера(Триггер, ОбъектДействия, Источник, Отказ, ПовторятьПриОшибке)
	
	Попытка
		
		СообщениеДействия = "";
		ТриггерВыполнен = Справочники.CRM_Триггеры.ВыполнитьТриггер(Триггер, ОбъектДействия, Источник,
			 Отказ,
			 СообщениеДействия);
		
		Если ОбъектДействия.ДополнительныеСвойства.Свойство("ОбъектИзменен") Тогда
			ОбъектДействия.ДополнительныеСвойства.Удалить("ОбъектИзменен");
			ОбъектДействия.ДополнительныеСвойства.Вставить("ВыполнениеТриггера", Триггер);
			ОбъектДействия.Записать();
			ОбъектДействия.ДополнительныеСвойства.Удалить("ВыполнениеТриггера");
		КонецЕсли;
		
		Если ТриггерВыполнен Тогда
			Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(Триггер, ОбъектДействия, Источник, СообщениеДействия);
		ИначеЕсли НЕ ТриггерВыполнен Тогда
			Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(Триггер, ОбъектДействия,
				?(ЗначениеЗаполнено(СообщениеДействия), СообщениеДействия, "Действие не выполнено."));
			Если ПовторятьПриОшибке > 0 Тогда
				ЗаписатьТриггерВОчередь(Триггер, Источник.Ссылка, ОбъектДействия.Ссылка);
			Иначе	
				ДобавитьОповещениеПоТриггеру(Триггер);
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		
		Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(Триггер, ОбъектДействия, ОписаниеОшибки());
		Если ПовторятьПриОшибке > 0 Тогда
			ЗаписатьТриггерВОчередь(Триггер, Источник.Ссылка, ОбъектДействия.Ссылка);
		Иначе	
			ДобавитьОповещениеПоТриггеру(Триггер);
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПроверитьЗарегистрироватьОтложенныеТриггеры(ДанныеТриггеров, ИсточникСсылка, ДополнительныеСвойства) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Источник = ПодготовитьОбъектИсточник(ИсточникСсылка);
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеСвойства = Неопределено Тогда
		ДополнительныеСвойстваЗначение = ЗначениеИзСтрокиВнутр(ДополнительныеСвойства);
	Иначе
		ДополнительныеСвойстваЗначение = Новый Структура;
	КонецЕсли;
	Для Каждого ДопСвойство Из ДополнительныеСвойстваЗначение Цикл
		Источник.ДополнительныеСвойства.Вставить(ДопСвойство.Ключ, ДопСвойство.Значение);
	КонецЦикла;
	
	Для Каждого СтрокаСсылка Из ДанныеТриггеров Цикл
		
		ОбъектыДействия = Неопределено;
		
		ПроверкаПрошла = Справочники.CRM_Триггеры.ПроверитьУсловияТриггера(СтрокаСсылка, Источник, ОбъектыДействия,
			ДополнительныеСвойстваЗначение);
		
		Если ПроверкаПрошла Тогда
			Если ОбъектыДействия <> Неопределено 
				И ТипЗнч(ОбъектыДействия) = Тип("Массив")
				И ОбъектыДействия.Количество() > 0 Тогда
				
				Для Каждого ОбъектДействияСсылка Из ОбъектыДействия Цикл
					
					ЗаписатьТриггерВОчередь(СтрокаСсылка, ИсточникСсылка, ОбъектДействияСсылка, , Истина);
					
				КонецЦикла;
			Иначе
				
				ЗаписатьТриггерВОчередь(СтрокаСсылка, ИсточникСсылка, ИсточникСсылка, , Истина);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьОбъектИсточник(ИсточникСсылка)
	
	// Необходимо, чтобы подождать завершения записи объекта триггера.
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ИсточникСсылка.Метаданные().ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ИсточникСсылка);
		Блокировка.Заблокировать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru='Проверка/регистрация отложенных триггеров'"), УровеньЖурналаРегистрации.Ошибка, , , 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
	Источник = ИсточникСсылка.ПолучитьОбъект();
	Если Источник = Неопределено Тогда
		КоличествоПопытокЧтения = 10;
		ПаузаМеждуПопытками = 2;
		СчетчикПопытокЧтения = 0;
		Пока СчетчикПопытокЧтения < КоличествоПопытокЧтения Цикл
			СчетчикПопытокЧтения = СчетчикПопытокЧтения + 1;
			ОбщегоНазначенияБТС.Пауза(ПаузаМеждуПопытками);
			Источник = ИсточникСсылка.ПолучитьОбъект();
			Если Источник <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Источник = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось прочитать объект проверки триггера.'");
		ЗаписьЖурналаРегистрации(НСтр("ru='Проверка/регистрация отложенных триггеров'"), УровеньЖурналаРегистрации.Ошибка, , , 
			ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Источник;
	
КонецФункции

#Область ПериодическиеТриггеры

Процедура ВыполнениеПериодическогоТриггера(Параметры = Неопределено) Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.CRM_ВыполнениеТриггеров);

	Если ОбщегоНазначения.РазделениеВключено() И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Параметры.Свойство("УникальныйИдентификаторЗадания") Тогда
		Триггер = Справочники.CRM_Триггеры.НайтиПоРеквизиту("УникальныйИдентификаторЗадания",
			 Параметры.УникальныйИдентификаторЗадания);
		Если ЗначениеЗаполнено(Триггер) Тогда
			Попытка
				СообщениеДействия = "";
				ТриггерВыполнен = Справочники.CRM_Триггеры.ВыполнитьПериодическийТриггер(Триггер, СообщениеДействия);
				Если ТриггерВыполнен И Триггер.ВключатьВЛоги Тогда
					Справочники.CRM_Триггеры.ЗаписатьВыполнениеПериодическогоТриггера(Триггер, СообщениеДействия);
				ИначеЕсли НЕ ТриггерВыполнен Тогда
					Справочники.CRM_Триггеры.ЗаписатьОшибкуПериодическогоТриггера(Триггер,
						 ?(ЗначениеЗаполнено(СообщениеДействия), СообщениеДействия,
						 "Действие не выполнено."));			
				КонецЕсли;
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Справочники.CRM_Триггеры.ЗаписатьОшибкуПериодическогоТриггера(Триггер, ОписаниеОшибки());
				ВызватьИсключение ТекстОшибки;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтложенныеТриггеры

Процедура ОтложенноеВыполнениеТриггеров(Параметры = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.CRM_ОтложенноеВыполнениеТриггеров);

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ОчередьОтложенногоВыполненияТриггеров.Триггер КАК Триггер,
	                      |	CRM_ОчередьОтложенногоВыполненияТриггеров.ОбъектТриггера КАК ОбъектТриггера,
	                      |	CRM_ОчередьОтложенногоВыполненияТриггеров.ОбъектДействия КАК ОбъектДействия,
	                      |	CRM_ОчередьОтложенногоВыполненияТриггеров.КоличествоЗапусков КАК КоличествоЗапусков
	                      |ИЗ
	                      |	РегистрСведений.CRM_ОчередьОтложенногоВыполненияТриггеров КАК CRM_ОчередьОтложенногоВыполненияТриггеров
	                      |ГДЕ
	                      |	CRM_ОчередьОтложенногоВыполненияТриггеров.СрокВыполнения <= &СрокВыполнения");
	Запрос.УстановитьПараметр("СрокВыполнения", ТекущаяДатаСеанса());
	ВыборкаТриггеров = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТриггеров.Следующий() Цикл
		Если ТипЗнч(ВыборкаТриггеров.ОбъектДействия) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			Если ВыборкаТриггеров.Триггер.ВыполнятьВСостоянииИнтереса
				 И ЗначениеЗаполнено(ВыборкаТриггеров.Триггер.СостояниеИнтереса) Тогда
				РеквизитСостоянияИЛИЭтапа = "";
				Если ТипЗнч(ВыборкаТриггеров.ОбъектДействия) = Тип("ДокументСсылка.CRM_Интерес") Тогда
					РеквизитСостоянияИЛИЭтапа = "СостояниеИнтереса";
				ИначеЕсли ТипЗнч(ВыборкаТриггеров.ОбъектДействия) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
					РеквизитСостоянияИЛИЭтапа = "CRM_ТочкаМаршрута";
				КонецЕсли;
				Если РеквизитСостоянияИЛИЭтапа <> ""
					 И ВыборкаТриггеров.Триггер.СостояниеИнтереса <> ВыборкаТриггеров.ОбъектДействия[РеквизитСостоянияИЛИЭтапа] Тогда
					УдалитьТриггерИзОчереди(ВыборкаТриггеров.Триггер, ВыборкаТриггеров.ОбъектТриггера,
						 ВыборкаТриггеров.ОбъектДействия);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Попытка
			ОбъектДействия = ВыборкаТриггеров.ОбъектДействия.ПолучитьОбъект();
			СообщениеДействия = "";
			Отказ = Ложь;
			ТриггерВыполнен = Справочники.CRM_Триггеры.ВыполнитьТриггер(ВыборкаТриггеров.Триггер,
				 ОбъектДействия, ВыборкаТриггеров.ОбъектТриггера, Отказ, СообщениеДействия,
				 Истина);
			Если ОбъектДействия.ДополнительныеСвойства.Свойство("ОбъектИзменен") Тогда
				ОбъектДействия.ДополнительныеСвойства.Удалить("ОбъектИзменен");
				ОбъектДействия.ДополнительныеСвойства.Вставить("ВыполнениеТриггера", ВыборкаТриггеров.Триггер);
				ОбъектДействия.Записать();
				ОбъектДействия.ДополнительныеСвойства.Удалить("ВыполнениеТриггера");
			КонецЕсли;
			Если ТриггерВыполнен Тогда // И НЕ ВыборкаТриггеров.Ссылка.РазрешитьПовторноеСрабатывание
				Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(ВыборкаТриггеров.Триггер,
					 ОбъектДействия, ВыборкаТриггеров.ОбъектТриггера,
					 СообщениеДействия);
				УдалитьТриггерИзОчереди(ВыборкаТриггеров.Триггер, ВыборкаТриггеров.ОбъектТриггера, ОбъектДействия.Ссылка);
			ИначеЕсли НЕ ТриггерВыполнен Тогда
				Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Триггер, ОбъектДействия,
					 ?(ЗначениеЗаполнено(СообщениеДействия), СообщениеДействия,
					 "Действие не выполнено."));		
				Если ВыборкаТриггеров.КоличествоЗапусков + 1 < ВыборкаТриггеров.Триггер.ПовторятьПриОшибке Тогда
					ЗаписатьТриггерВОчередь(ВыборкаТриггеров.Триггер, ВыборкаТриггеров.ОбъектТриггера,
						 ОбъектДействия.Ссылка, ВыборкаТриггеров.КоличествоЗапусков 
						+ 1);
				Иначе	
					ДобавитьОповещениеПоТриггеру(ВыборкаТриггеров.Триггер);
					УдалитьТриггерИзОчереди(ВыборкаТриггеров.Триггер, ВыборкаТриггеров.ОбъектТриггера, ОбъектДействия.Ссылка);
					Справочники.CRM_Триггеры.ВыполнитьДействиеПриОшибке(ВыборкаТриггеров.Триггер,
						 ОбъектДействия.Ссылка,
						 ВыборкаТриггеров.ОбъектТриггера);
				КонецЕсли;
			КонецЕсли;
		Исключение
			Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Триггер, ОбъектДействия, ОписаниеОшибки());
			Если ВыборкаТриггеров.КоличествоЗапусков + 1 < ВыборкаТриггеров.Триггер.ПовторятьПриОшибке Тогда
				ЗаписатьТриггерВОчередь(ВыборкаТриггеров.Триггер, ВыборкаТриггеров.ОбъектТриггера,
					 ОбъектДействия.Ссылка, ВыборкаТриггеров.КоличествоЗапусков 
					+ 1);
			Иначе
				ДобавитьОповещениеПоТриггеру(ВыборкаТриггеров.Триггер);
				УдалитьТриггерИзОчереди(ВыборкаТриггеров.Триггер, ВыборкаТриггеров.ОбъектТриггера, ОбъектДействия.Ссылка);
				Справочники.CRM_Триггеры.ВыполнитьДействиеПриОшибке(ВыборкаТриггеров.Триггер,
					 ОбъектДействия.Ссылка,
					 ВыборкаТриггеров.ОбъектТриггера);
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьТриггерВОчередь(Триггер, ОбъектТриггера, ОбъектДействия, НомерСрабатывания = 0,
	 ЭтоПлановоеВыполнение = Ложь)
	
	МенеджерЗаписи = РегистрыСведений.CRM_ОчередьОтложенногоВыполненияТриггеров.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Триггер = Триггер;
	МенеджерЗаписи.ОбъектТриггера = ОбъектТриггера;
	МенеджерЗаписи.ОбъектДействия = ОбъектДействия;
	МенеджерЗаписи.КоличествоЗапусков = НомерСрабатывания;
	Если ЭтоПлановоеВыполнение Тогда
		Секунд = 1;
		Если Триггер.ОтложеноПериодичность = Перечисления.CRM_ПериодичностьОповещений.Неделя Тогда
			Секунд = 604800;
			Если Триггер.УчитыватьГрафикРаботы Тогда
				СтруктураСрока = Новый Структура();
				СтруктураСрока.Вставить("Дней", Триггер.ОтложеноНа*7);
				СтруктураСрока.Вставить("Часов", 0);
				СтруктураСрока.Вставить("Минут", 0);

				МенеджерЗаписи.СрокВыполнения = CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(ТекущаяДатаСеанса(),
					СтруктураСрока);
			КонецЕсли;
		ИначеЕсли Триггер.ОтложеноПериодичность = Перечисления.CRM_ПериодичностьОповещений.День Тогда
			Секунд = 86400;
			Если Триггер.УчитыватьГрафикРаботы Тогда
				СтруктураСрока = Новый Структура();
				СтруктураСрока.Вставить("Дней", Триггер.ОтложеноНа);
				СтруктураСрока.Вставить("Часов", 0);
				СтруктураСрока.Вставить("Минут", 0);

				МенеджерЗаписи.СрокВыполнения = CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(ТекущаяДатаСеанса(),
					СтруктураСрока);
			КонецЕсли;
		ИначеЕсли Триггер.ОтложеноПериодичность = Перечисления.CRM_ПериодичностьОповещений.Час Тогда
			Секунд = 3600;
		ИначеЕсли Триггер.ОтложеноПериодичность = Перечисления.CRM_ПериодичностьОповещений.Минута Тогда
			Секунд = 60;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(МенеджерЗаписи.СрокВыполнения) Тогда
			МенеджерЗаписи.СрокВыполнения = ТекущаяДатаСеанса() + Триггер.ОтложеноНа * Секунд;
		КонецЕсли;
	Иначе
		МенеджерЗаписи.СрокВыполнения = ТекущаяДатаСеанса() + Триггер.ПовторятьЧерез * 60;
	КонецЕсли;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура УдалитьТриггерИзОчереди(Триггер, ОбъектТриггера, ОбъектДействия)
	
	МенеджерЗаписи = РегистрыСведений.CRM_ОчередьОтложенногоВыполненияТриггеров.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Триггер = Триггер;
	МенеджерЗаписи.ОбъектТриггера = ОбъектТриггера;
	МенеджерЗаписи.ОбъектДействия = ОбъектДействия;
	МенеджерЗаписи.Удалить();
	
КонецПроцедуры

Процедура ДобавитьОповещениеПоТриггеру(Триггер)
	ТаблицаНастроекОповещений =
		CRM_ОповещенияСервер.ПолучитьПараметрыОповещенияПоВиду(Справочники.CRM_ВидыОповещений.ОшибкаСрабатыванияТриггера);
	МассивСтруктур = Новый Массив;
	Для Каждого СтрокаОповещения Из ТаблицаНастроекОповещений Цикл
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Получатель", СтрокаОповещения.Пользователь);
		СтруктураОповещения.Вставить("Предмет", Триггер);
		СтруктураОповещения.Вставить("ВидОповещения", СтрокаОповещения.ВидОповещения);
		СтруктураОповещения.Вставить("Канал", СтрокаОповещения.Канал);
		СтруктураОповещения.Вставить("СрокОповещения", СтрокаОповещения.СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность", СтрокаОповещения.Периодичность);
		МассивСтруктур.Добавить(СтруктураОповещения);
	КонецЦикла;
	CRM_ОповещенияСервер.ДобавитьОповещение(МассивСтруктур);
КонецПроцедуры

#КонецОбласти

#Область ОтложенныеТриггеры

Функция ПодключенныеКТриггерамСервисы() Экспорт
	
	Результат = Новый СписокЗначений;
	
	Результат.Добавить("CRM_Feedback", НСтр("ru = 'Обратная связь'; en = 'Feedback'"));
	
	Возврат Результат;
	
КонецФункции

Процедура СервисныйВызов(Идентификатор, Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_Триггеры.Ссылка КАК Ссылка,
	               |	CRM_Триггеры.ОтложенноеВыполнение КАК ОтложенноеВыполнение,
	               |	CRM_Триггеры.ПовторятьПриОшибке КАК ПовторятьПриОшибке,
	               |	CRM_Триггеры.Действие КАК Действие,
	               |	CRM_Триггеры.УсловиеСрабатывания КАК УсловиеСрабатывания
	               |ИЗ
	               |	Справочник.CRM_Триггеры КАК CRM_Триггеры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_УсловияСрабатыванияТриггеров КАК CRM_УсловияСрабатыванияТриггеров
	               |		ПО CRM_Триггеры.УсловиеСрабатывания = CRM_УсловияСрабатыванияТриггеров.Ссылка
	               |			И CRM_УсловияСрабатыванияТриггеров.СервисныйВызов
	               |			И CRM_УсловияСрабатыванияТриггеров.ИдентификаторВызова = &ИдентификаторВызова
	               |ГДЕ
	               |	CRM_Триггеры.Действует";
	Запрос.УстановитьПараметр("ИдентификаторВызова", Идентификатор);
	ВыборкаТриггеров = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТриггеров.Следующий() Цикл
		Если ВыборкаТриггеров.УсловиеСрабатывания.ПометкаУдаления Тогда
			Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Неопределено,
				 НСтр("ru='Условие срабатывания триггера помечено на удаление!';
				|en='Trigger condition is marked for deleting!'"));
			Продолжить;
		КонецЕсли;
		Если ВыборкаТриггеров.Действие.ПометкаУдаления Тогда
			Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Неопределено,
				 НСтр("ru='Действие триггера помечено на удаление!';
				|en='This trigger action is marked for deletion!'"));
			Продолжить;
		КонецЕсли;
		ОбъектыДействия = Неопределено;
		ПроверкаПрошла = Справочники.CRM_Триггеры.ПроверитьУсловияТриггераСервиса(ВыборкаТриггеров.Ссылка,
			 Параметры,
			 ОбъектыДействия);
		Если ПроверкаПрошла Тогда
			Если ОбъектыДействия <> Неопределено И ТипЗнч(ОбъектыДействия) = Тип("Массив")
				 И ОбъектыДействия.Количество() > 0 Тогда
				Для Каждого ОбъектДействияСсылка Из ОбъектыДействия Цикл
					Если ВыборкаТриггеров.ОтложенноеВыполнение Тогда
						ЗаписатьТриггерВОчередь(ВыборкаТриггеров.Ссылка, Идентификатор, ОбъектДействияСсылка, , Истина);
						Продолжить;
					КонецЕсли;
					ОбъектДействия = ОбъектДействияСсылка.ПолучитьОбъект();
					Попытка
						СообщениеДействия = "";
						Отказ = Ложь;
						ТриггерВыполнен = Справочники.CRM_Триггеры.ВыполнитьТриггер(ВыборкаТриггеров.Ссылка,
							 ОбъектДействия, Идентификатор, Отказ,
							 СообщениеДействия);
						Если ОбъектДействия.ДополнительныеСвойства.Свойство("ОбъектИзменен") Тогда
							ОбъектДействия.ДополнительныеСвойства.Удалить("ОбъектИзменен");
							ОбъектДействия.Записать();
						КонецЕсли;
						Если ТриггерВыполнен Тогда // И НЕ ВыборкаТриггеров.Ссылка.РазрешитьПовторноеСрабатывание
							Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(ВыборкаТриггеров.Ссылка,
								 ОбъектДействия, Идентификатор,
								 СообщениеДействия);
						ИначеЕсли НЕ ТриггерВыполнен Тогда
							Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, ОбъектДействия,
								 ?(ЗначениеЗаполнено(СообщениеДействия), СообщениеДействия,
								 "Действие не выполнено."));		
							Если ВыборкаТриггеров.ПовторятьПриОшибке > 0 Тогда
								ЗаписатьТриггерВОчередь(ВыборкаТриггеров.Ссылка, Неопределено, ОбъектДействияСсылка);
							Иначе	
								ДобавитьОповещениеПоТриггеру(ВыборкаТриггеров.Ссылка);
							КонецЕсли;
						КонецЕсли;
					Исключение
						Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, ОбъектДействияСсылка, ОписаниеОшибки());
						Если ВыборкаТриггеров.ПовторятьПриОшибке > 0 Тогда
							ЗаписатьТриггерВОчередь(ВыборкаТриггеров.Ссылка, Неопределено, ОбъектДействияСсылка);
						Иначе	
							ДобавитьОповещениеПоТриггеру(ВыборкаТриггеров.Ссылка);
						КонецЕсли;
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
