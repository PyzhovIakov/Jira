///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция возвращает версию библиотеки.
// 
// Возвращаемое значение:
//   - Строка
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "1.0.1.3";
	
КонецФункции

// Функция возвращает Истина, если поддерживается распознавание.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ПоддерживаетсяРаспознавание() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(
		СистемнаяИнформация.ВерсияПриложения, "8.3.23.1200") >= 0;
	
КонецФункции

// Функция возвращает Истина, если распознавание доступно.
// 
// Возвращаемое значение:
//   - Булево
//
Функция РаспознаваниеДоступно() Экспорт
	
	Если Не ПоддерживаетсяРаспознавание() Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ОписаниеМоделейРаспознавания = ПолучитьОписаниеМоделейРаспознавания();
	Исключение
		ОписаниеМоделейРаспознавания = Новый Массив;
	КонецПопытки;
	
	ЕстьДоступнаяЛокальная = Ложь;
	Для Каждого ОписаниеМодели Из ОписаниеМоделейРаспознавания Цикл
		Если ОписаниеМодели.ДоступнаВЛокальномВарианте Тогда
			ЕстьДоступнаяЛокальная = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ТекущиеНастройки = Константы.CRM_НастройкиРаботыСРечью.ПолучитьБезопасно();
	
	Возврат ЕстьДоступнаяЛокальная
		Или (Не ТекущиеНастройки.ЗапретитьОблачноеРаспознавание И ПоддерживаетсяИспользованиеВнешнегоРасположения());
	
КонецФункции

// Функция возвращает Истина, если поддерживается использование внешнего расположения.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ПоддерживаетсяИспользованиеВнешнегоРасположения() Экспорт
	
	Если Не ПоддерживаетсяРаспознавание() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат CRM_РаботаСРечьюБМОСерверТолько8323.ПоддерживаетсяИспользованиеВнешнегоРасположения();
	
КонецФункции

// Функция возвоащает параметры внешнего подключения работы с речью.
//
// Параметры:
//  Токен	 - Строка, Неопределено	 - Токен.
//  Адрес	 - Строка, Неопределено	 - Адрес.
// 
// Возвращаемое значение:
//   - Структура
//
Функция НовыйПараметрыВнешнегоПодключенияРаботыСРечью(Токен = Неопределено, Адрес = Неопределено) Экспорт
	
	Если Не ПоддерживаетсяРаспознавание() Тогда
		Возврат Новый Структура("Адрес, Токен", Адрес, Токен);
	КонецЕсли;
	
	Возврат CRM_РаботаСРечьюБМОСерверТолько8323.НовыйПараметрыВнешнегоПодключенияРаботыСРечью(Токен, Адрес);
	
КонецФункции

// Функция возвращает вариант использования расположения работы с речью.
// 
// Возвращаемое значение:
//   - Структура
//
Функция ВариантИспользованияРасположенияРаботыСРечью() Экспорт
	
	Если Не ПоддерживаетсяРаспознавание() Тогда
		Возврат Новый Структура("Авто", Неопределено);
	КонецЕсли;
	
	Возврат CRM_РаботаСРечьюБМОСерверТолько8323.ВариантИспользованияРасположенияРаботыСРечью();
	
КонецФункции

// Процедура выполняет регистрацию сеанса.
//
// Параметры:
//  Логин	 - Строка, Неопределено	 - Логин.
//  Пароль	 - Строка, Неопределено	 - Пароль.
//  Адрес	 - Строка, Неопределено	 - Адрес.
//
Процедура ВыполнитьРегистрациюСеанса(Логин = Неопределено, Пароль = Неопределено, Адрес = Неопределено) Экспорт
	
	Если Не ПоддерживаетсяРаспознавание() Тогда
		Возврат;
	КонецЕсли;
	
	CRM_РаботаСРечьюБМОСерверТолько8323.ВыполнитьРегистрациюСеанса(Логин, Пароль, Адрес);
	
КонецПроцедуры

// Функция возвращает параметры внешнего подключения информационной базы.
// 
// Возвращаемое значение:
//   - Структура, Неопределно
//
Функция ПолучитьПараметрыВнешнегоПодключенияИнформационнойБазы() Экспорт
	
	Если Не ПоддерживаетсяРаспознавание() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат CRM_РаботаСРечьюБМОСерверТолько8323.ПолучитьПараметрыВнешнегоПодключенияИнформационнойБазы();
	
КонецФункции

// Процедура устанавливает параметры внешнего подключения информационной базы.
//
// Параметры:
//  Параметры	 - Структура	 - Параметры.
//
Процедура УстановитьПараметрыВнешнегоПодключенияИнформационнойБазы(Параметры) Экспорт
	
	Если Не ПоддерживаетсяРаспознавание() Тогда
		Возврат;
	КонецЕсли;
	
	CRM_РаботаСРечьюБМОСерверТолько8323.УстановитьПараметрыВнешнегоПодключенияИнформационнойБазы(Параметры);
	
КонецПроцедуры

// Функция возвращает параметры внешнего подключения сеанса.
// 
// Возвращаемое значение:
//   - Структура, Неопределено
//
Функция ПолучитьПараметрыВнешнегоПодключенияСеанса() Экспорт
	
	Если Не ПоддерживаетсяРаспознавание() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат CRM_РаботаСРечьюБМОСерверТолько8323.ПолучитьПараметрыВнешнегоПодключенияСеанса();
	
КонецФункции

// Процедура устанавливает параметры внешнего подключения сеанса.
//
// Параметры:
//  Параметры	 - Структура	 - Параметры.
//
Процедура УстановитьПараметрыВнешнегоПодключенияСеанса(Параметры) Экспорт
	
	Если Не ПоддерживаетсяРаспознавание() Тогда
		Возврат;
	КонецЕсли;
	
	CRM_РаботаСРечьюБМОСерверТолько8323.УстановитьПараметрыВнешнегоПодключенияСеанса(Параметры);
	
КонецПроцедуры

// Функция возвращает идентификатор модели распознавания речи.
//
// Параметры:
//  ИдентификаторМодели	 - Строка	 - Идентификатор модели.
// 
// Возвращаемое значение:
//   - Строка, Неопределено
//
Функция НовыйИдентификаторМоделиРаспознаванияРечи(ИдентификаторМодели) Экспорт
	
	Если Не ПоддерживаетсяРаспознавание() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат CRM_РаботаСРечьюБМОСерверТолько8323.НовыйИдентификаторМоделиРаспознаванияРечи(ИдентификаторМодели);
	
КонецФункции

// Функция возвращает описание моделей распознавания.
// 
// Возвращаемое значение:
//   - Массив
//
Функция ПолучитьОписаниеМоделейРаспознавания() Экспорт
	
	Если Не ПоддерживаетсяРаспознавание() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат CRM_РаботаСРечьюБМОСерверТолько8323.ПолучитьОписаниеМоделейРаспознавания();
	
КонецФункции

// Функция возвращает модель распознавания во временное хранилище.
//
// Параметры:
//  ИдентификаторМодели	 - Строка	 - Идентификатор модели.
// 
// Возвращаемое значение:
//   - МодельРеспознавания
//
Функция ПолучитьМодельРаспознаванияВоВременноеХранилище(ИдентификаторМодели) Экспорт
	
	Если Не ПоддерживаетсяРаспознавание() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат CRM_РаботаСРечьюБМОСерверТолько8323.ПолучитьМодельРаспознаванияВоВременноеХранилище(ИдентификаторМодели);
	
КонецФункции

// Процедура устанавливает модель распознавания для информационной базы.
//
// Параметры:
//  Источник - Строка	 - Источник.
//
Процедура УстановитьМодельРаспознаванияДляИнформационнойБазы(Источник) Экспорт 
	
	Если Не ПоддерживаетсяРаспознавание() Тогда
		Возврат;
	КонецЕсли;
	
	CRM_РаботаСРечьюБМОСерверТолько8323.УстановитьМодельРаспознаванияДляИнформационнойБазы(Источник);
	
КонецПроцедуры

// Процедура удаляет модель распознавания для информационной базы.
//
// Параметры:
//  ИдентификаторМодели	 - Строка	 - Идентификатор модели.
//
Процедура УдалитьМодельРаспознаванияДляИнформационнойБазы(ИдентификаторМодели) Экспорт
	
	Если Не ПоддерживаетсяРаспознавание() Тогда
		Возврат;
	КонецЕсли;
	
	CRM_РаботаСРечьюБМОСерверТолько8323.УдалитьМодельРаспознаванияДляИнформационнойБазы(ИдентификаторМодели);
	
КонецПроцедуры

// Процедура устанавливает дополнительную грамматику сеанса.
//
// Параметры:
//  Ключ					 - Строка	 - Ключ.
//  ДополнительнаяГрамматика - ХранилищеЗначения	 - Дополнительная грамматика.
//
Процедура УстановитьДополнительнуюГрамматикуСеанса(Ключ, ДополнительнаяГрамматика) Экспорт
	
	Если Не ПоддерживаетсяРаспознавание() Тогда
		Возврат;
	КонецЕсли;
	
	CRM_РаботаСРечьюБМОСерверТолько8323.УстановитьДополнительнуюГрамматикуСеанса(Ключ, ДополнительнаяГрамматика);
	
КонецПроцедуры

// Процедура удаляет дополнительную грамматику сеанса.
//
// Параметры:
//  Ключ - Строка	 - Ключ.
//
Процедура УдалитьДополнительнуюГрамматикуСеанса(Ключ) Экспорт
	
	Если Не ПоддерживаетсяРаспознавание() Тогда
		Возврат;
	КонецЕсли;
	
	CRM_РаботаСРечьюБМОСерверТолько8323.УдалитьДополнительнуюГрамматикуСеанса(Ключ);
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// Регистрирует список сервисов, которые доступны для
// использования в конфигурации.
//
// Параметры:
//   СервисыСопровождения - Массив    - массив структур, описывающий сервисы доступные для использовании в конфигурации;
//     Значение - Структура - см. ПодключениеСервисовСопровождения.НовыйОписательСервиса().
//
Процедура ПриДобавленииОписанийСервисовСопровождения(СервисыСопровождения) Экспорт
	
	ОписательСервиса = ПодключениеСервисовСопровождения.НовыйОписательСервиса();
	ОписательСервиса.Идентификатор   = CRM_РаботаСРечьюБМОКлиентСервер.ИдентификаторСервиса();
	ОписательСервиса.Картинка        = Метаданные.ОбщиеКартинки.CRM_РаспознаваниеРечи72;
	ОписательСервиса.Наименование    = НСтр("ru = '1С:Распознавание речи'");
	ОписательСервиса.Описание        = НСтр("ru = 'Бесплатно подключите тестовый пакет для сервиса 1С:Распознавание речи. Его хватит на распознавание до 1 часа потокового аудио'");
	
	СервисыСопровождения.Добавить(ОписательСервиса);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииCRM

// Процедура выполняет создать реквизитов для работы распознавания речи.
//
// Параметры:
//  Форма						 - ФормаКлиентскогоПриложения	 - Форма.
//  МассивКнопокРаспознавания	 - Массив	 - Массив кнопок распознавания.
//  МассивЭлементовРаспознавания - Массив	 - Массив элементов распознавания.
//
Процедура СоздатьНеобходимыеРеквизитыФормы(Форма, МассивКнопокРаспознавания, МассивЭлементовРаспознавания) Экспорт
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	ИмяРаспознаваниеРечиДоступно = "РаспознаваниеРечи_РаспознаваниеДоступно";
	
	РеквизитРаспознаваниеДоступно = Новый РеквизитФормы(ИмяРаспознаваниеРечиДоступно, ОписаниеТиповБулево);
	РеквизитВыполняетсяРаспознавание = Новый РеквизитФормы("РаспознаваниеРечи_ВыполняетсяРаспознавание",
		ОписаниеТиповБулево);
	РеквизитРаспознаваниеФразыЗавершено = Новый РеквизитФормы("РаспознаваниеРечи_РаспознаваниеФразыЗавершено",
		ОписаниеТиповБулево);
	РеквизитВремяНачалаРаспознавания = Новый РеквизитФормы("РаспознаваниеРечи_ВремяНачалаРаспознавания",
		Новый ОписаниеТипов("Число"));
	РеквизитПараметрыРаспознавания = Новый РеквизитФормы("РаспознаваниеРечи_ПараметрыРаспознавания",
		Новый ОписаниеТипов); // Произвольный
	РеквизитПерезапускРаспознавания = Новый РеквизитФормы("РаспознаваниеРечи_ПерезапускРаспознавания",
		ОписаниеТиповБулево);
	РеквизитТекущаяКоманда = Новый РеквизитФормы("РаспознаваниеРечи_ТекущаяКоманда", ОписаниеТиповСтрока);
	
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитРаспознаваниеДоступно);
	ДобавляемыеРеквизиты.Добавить(РеквизитВыполняетсяРаспознавание);
	ДобавляемыеРеквизиты.Добавить(РеквизитРаспознаваниеФразыЗавершено);
	ДобавляемыеРеквизиты.Добавить(РеквизитВремяНачалаРаспознавания);
	ДобавляемыеРеквизиты.Добавить(РеквизитПараметрыРаспознавания);
	ДобавляемыеРеквизиты.Добавить(РеквизитПерезапускРаспознавания);
	ДобавляемыеРеквизиты.Добавить(РеквизитТекущаяКоманда);
	
	ИмяТаблицы = "РаспознаваниеРечи_ТаблицаЭлементов";
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяТаблицы,               Новый ОписаниеТипов("ТаблицаЗначений")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЦветРамки",              Новый ОписаниеТипов("Цвет"), ИмяТаблицы));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяЭлемента",            ОписаниеТиповСтрока,         ИмяТаблицы));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяРеквизита",           ОписаниеТиповСтрока,         ИмяТаблицы));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПодсказкаВвода",         ОписаниеТиповСтрока,         ИмяТаблицы));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("КомандаГолосовогоВвода", ОписаниеТиповСтрока,         ИмяТаблицы));
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	//
	
	ТекущиеПараметры = CRM_ПараметрыРаспознаванияРечи.ТекущиеПараметры(Форма);
	
	Форма["РаспознаваниеРечи_ПараметрыРаспознавания"] = ТекущиеПараметры;
	Форма[ИмяРаспознаваниеРечиДоступно] = CRM_ПараметрыРаспознаванияРечи.РаспознаваниеДоступно(ТекущиеПараметры);
	Форма["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = Истина;
	
	Для Каждого ТекЭлементИмя Из МассивКнопокРаспознавания Цикл
		ТекЭлемент = Форма.Элементы[ТекЭлементИмя];
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекЭлемент, "КнопкаВыбора") Тогда
			ТекЭлемент.КнопкаВыбора = Форма[ИмяРаспознаваниеРечиДоступно];
		Иначе
			ТекЭлемент.Видимость = Форма[ИмяРаспознаваниеРечиДоступно];
		КонецЕсли;
	КонецЦикла;
	
	//
	
	ЗаполнитьТаблицуОформленийЭлементов(Форма, МассивЭлементовРаспознавания);
	
	Константы.CRM_ОбщаяГрамматикаРаботыСРечью.УстановитьГрамматикуСеанса();
	
КонецПроцедуры

// Процедура дополняет массив полей распознавания.
//
// Параметры:
//  МассивПолей		 - Массив	 - Массив полей.
//  ИмяЭлементаФормы - Строка	 - Имя элемента формы.
//  ИмяКоманды		 - Строка	 - Имя команды.
//
Процедура ДополнитьМассивПолейРаспознавания(МассивПолей, ИмяЭлементаФормы, ИмяКоманды = "") Экспорт
	
	СтруктураЭлемента = Новый Структура;
	СтруктураЭлемента.Вставить("ИмяЭлементаФормы",       ИмяЭлементаФормы);
	СтруктураЭлемента.Вставить("КомандаГолосовогоВвода", ИмяКоманды);
	
	МассивПолей.Добавить(СтруктураЭлемента);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуОформленийЭлементов(Форма, МассивЭлементов)
	
	ИмяТаблицыЭлементов = "РаспознаваниеРечи_ТаблицаЭлементов";
	
	Для Каждого ТекЭлемент Из МассивЭлементов Цикл
		
		ЭлементФормы = Форма.Элементы[ТекЭлемент.ИмяЭлементаФормы];
		
		НоваяСтрока = Форма[ИмяТаблицыЭлементов].Добавить();
		НоваяСтрока.ИмяЭлемента =            ТекЭлемент.ИмяЭлементаФормы;
		НоваяСтрока.ИмяРеквизита =           ЭлементФормы.ПутьКДанным;
		НоваяСтрока.ЦветРамки =              ЭлементФормы.ЦветРамки;
		НоваяСтрока.КомандаГолосовогоВвода = ТекЭлемент.КомандаГолосовогоВвода;
		
		Если ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода Тогда
			НоваяСтрока.ПодсказкаВвода =     ЭлементФормы.ПодсказкаВвода;
		Иначе
			НоваяСтрока.ПодсказкаВвода =     "";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
