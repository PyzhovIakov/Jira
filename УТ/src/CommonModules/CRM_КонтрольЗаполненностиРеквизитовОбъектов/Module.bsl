
#Область ПрограммныйИнтерфейс

// Выполняет расчет.
//
Процедура ВыполнитьРасчет() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.CRM_РасчетЗаполненностиРеквизитовОбъектов);

	Если ОбщегоНазначения.РазделениеВключено() И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);

	РазмерПакетаКПересчету = 1000;
	РассчитатьЗаписатьПроцентЗаполненияПоОбъектам_ПоРазмеруПакета(РазмерПакетаКПересчету);	
	РассчитатьЗаписатьПроцентЗаполненияПоПравилам(РазмерПакетаКПересчету);	
	
	УстановитьПривилегированныйРежим(Ложь);
		
КонецПроцедуры

// Процедура выполняет рассчет и запись процента заполнения по переданным объектам и рзмеру пакета.
//
// Параметры:
//  РазмерПакетаКПересчету	 - Число	 - Размер пакета к пересчету.
//
Процедура РассчитатьЗаписатьПроцентЗаполненияПоОбъектам_ПоРазмеруПакета(РазмерПакетаКПересчету) Экспорт

	СоответствиеОбъектыКРасчету = РегистрыСведений.CRM_ЗаполненностьРеквизитовОбъектов.ПолучитьОбъектыКРасчету_ПоРазмеруПакета(РазмерПакетаКПересчету);
	РассчитатьЗаписатьПроцентЗаполненияПоОбъектам(СоответствиеОбъектыКРасчету);

КонецПроцедуры

// Адрес результата нужен для запуска через фоновое задание.
//
// Параметры:
//  МассивОбъектов	 - Массив	 - Массив объектов.
//  АдресРезультата	 - Строка, Неопределено	 - Адрес результата.
//
Процедура РассчитатьЗаписатьПроцентЗаполненияПоОбъектам_ДляМассиваОбъектов(МассивОбъектов, АдресРезультата = Неопределено) Экспорт

	СоответствиеОбъектыКРасчету = РегистрыСведений.CRM_ЗаполненностьРеквизитовОбъектов.ПолучитьОбъектыКРасчету_ДляМассиваОбъектов(МассивОбъектов);
	РассчитатьЗаписатьПроцентЗаполненияПоОбъектам(СоответствиеОбъектыКРасчету);

КонецПроцедуры

Процедура РассчитатьЗаписатьПроцентЗаполненияПоОбъектам(СоответствиеОбъектыКРасчету)

	Для каждого СоответствиеПравило Из СоответствиеОбъектыКРасчету Цикл
		РассчитатьЗаписатьПроцентЗаполненияПоПравилу(СоответствиеПравило.Ключ, СоответствиеПравило.Значение);	
	КонецЦикла;

КонецПроцедуры

Процедура РассчитатьЗаписатьПроцентЗаполненияПоПравилу(Правило, МассивОбъектов)

	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СоответствиеОбъектВес = Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных.ПолучитьПроцентЗаполнения(Правило, МассивОбъектов);
	
	ЗаписатьПроцентЗаполнения(Правило, СоответствиеОбъектВес);
	
КонецПроцедуры

Процедура РассчитатьЗаписатьПроцентЗаполненияПоПравилам(РазмерПакетаКПересчету)

	СоответствиеОбъектыКРасчету = РегистрыСведений.CRM_ЗаполненностьРеквизитовОбъектов.ПолучитьОбъектыКРасчетуПоПравилам(РазмерПакетаКПересчету);
	
	Для каждого СоответствиеПравило Из СоответствиеОбъектыКРасчету Цикл
		Правило = СоответствиеПравило.Ключ;
		МассивОбъектов = СоответствиеПравило.Значение;
		РассчитатьЗаписатьПроцентЗаполненияПоПравилу(Правило, МассивОбъектов);
		Если МассивОбъектов.Количество() < РазмерПакетаКПересчету Тогда
			РегистрыСведений.CRM_ЗаполненностьРеквизитовОбъектов.УдалитьЗаписьПоПравилу(Правило);		
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьПроцентЗаполнения(Правило, СоответствиеОбъектВес)	
	
	Для каждого ЭлементСоответствия Из СоответствиеОбъектВес Цикл
		ТекВес = ЭлементСоответствия.Значение.Вес;
		ОбъектСсылка = ЭлементСоответствия.Ключ;

		РегистрыСведений.CRM_ЗаполненностьРеквизитовОбъектов.ДобавитьЗапись(ОбъектСсылка,
			Правило, ТекВес,,, СтрСоединить(ЭлементСоответствия.Значение.КомментарийМассив, "; "));	
	КонецЦикла;

КонецПроцедуры

// Записывает информацию в журнал.
//
// Параметры:
//  ПараметрыЖурнала		 - Структура - Параметры журнала.
//  УровеньЖурнала			 - УровеньЖурналаРегистрации - Уровень журнала регистрации.
//  ИмяСобытия				 - Строка - Имя события.
//  КомментарийСПараметрами	 - Строка - Комментарий с параметрами.
//  ИнформацияОбОшибке		 - ИнформацияОбОшибке - Информация об ошибке.
//  Параметр1				 - Строка - первый параметр.
//  Параметр2				 - Строка - второй параметр. 
//  Параметр3				 - Строка - третий параметр.
//  Параметр4				 - Строка - четвертый параметр.
//
Процедура ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурнала = Неопределено, ИмяСобытия = "", 
		Знач КомментарийСПараметрами = "", ИнформацияОбОшибке = Неопределено, 
		Параметр1 = Неопределено, 
		Параметр2 = Неопределено, 
		Параметр3 = Неопределено, 
		Параметр4 = Неопределено
	) Экспорт
	
	// Определение уровня журнала регистрации на основе типа переданного сообщения об ошибке.
	Если ТипЗнч(УровеньЖурнала) <> Тип("УровеньЖурналаРегистрации") Тогда
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
		ИначеЕсли ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
		Иначе
			УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		КонецЕсли;
	КонецЕсли;
	
	// Комментарий для журнала регистрации и пользователя.
	Если Параметр1 <> Неопределено Тогда
		КомментарийСПараметрами = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			КомментарийСПараметрами, Параметр1, Параметр2, Параметр3, Параметр4
		);
	КонецЕсли;
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		Если КомментарийСПараметрами = "" Тогда
			ТестСообщенияПользователю = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КомментарийСПараметрами = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Иначе
			ТестСообщенияПользователю = КомментарийСПараметрами + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КомментарийСПараметрами = КомментарийСПараметрами + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
	Иначе
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") И ИнформацияОбОшибке <> "" Тогда
			КомментарийСПараметрами = КомментарийСПараметрами + Символы.ПС + ИнформацияОбОшибке;
		КонецЕсли;
		ТестСообщенияПользователю = КомментарийСПараметрами;
	КонецЕсли;
	
	// Журнал регистрации 
	УстановитьПривилегированныйРежим(Истина);
	ЗаписьЖурналаРегистрации(
		ПараметрыЖурнала.ГруппаСобытий + ?(ИмяСобытия = "", "", ". " + ИмяСобытия), 
		УровеньЖурнала, 
		ПараметрыЖурнала.Метаданные, 
		ПараметрыЖурнала.Данные, 
		КомментарийСПараметрами
	);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка
		 ИЛИ УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение Тогда
		Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка Тогда
			ПараметрыЖурнала.Вставить("БылиОшибки", Истина);
		Иначе
			ПараметрыЖурнала.Вставить("БылиПредупреждения", Истина);
		КонецЕсли;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СокрЛП(ТестСообщенияПользователю);
		Сообщение.УстановитьДанные(ПараметрыЖурнала.Данные);
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру заполнености объекта.
//
// Параметры:
//  ОбъектСсылка - Ссылка - Ссылка на объект.
// 
// Возвращаемое значение:
//  Структура - структура заполнености объекта.
//
Функция СтруктураЗаполненостиОбъекта(ОбъектСсылка) Экспорт
	
	Результат = Новый Структура("ПроцентЗаполненностиОбщий, Картинка", 0, БиблиотекаКартинок.Пустая);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектСсылка", ОбъектСсылка);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаполненностьРеквизитовОбъектов.ПроцентЗаполненностиОбщий КАК ПроцентЗаполненностиОбщий,
		|	ВЫБОР
		|		КОГДА ЗаполненностьРеквизитовОбъектов.ПроцентЗаполненностиОбщий < 25
		|			ТОГДА ""CRM_ПроцентВыполненияЗадачи_0""
		|		КОГДА ЗаполненностьРеквизитовОбъектов.ПроцентЗаполненностиОбщий < 50
		|			ТОГДА ""CRM_ПроцентВыполненияЗадачи_25""
		|		КОГДА ЗаполненностьРеквизитовОбъектов.ПроцентЗаполненностиОбщий < 75
		|			ТОГДА ""CRM_ПроцентВыполненияЗадачи_50""
		|		КОГДА ЗаполненностьРеквизитовОбъектов.ПроцентЗаполненностиОбщий < 90
		|			ТОГДА ""CRM_ПроцентВыполненияЗадачи_75""
		|		ИНАЧЕ ""CRM_ПроцентВыполненияЗадачи_100""
		|	КОНЕЦ КАК ИмяКартинки
		|ИЗ
		|	РегистрСведений.CRM_ЗаполненностьРеквизитовОбъектов КАК ЗаполненностьРеквизитовОбъектов
		|ГДЕ
		|	ЗаполненностьРеквизитовОбъектов.Объект = &ОбъектСсылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.ПроцентЗаполненностиОбщий = Выборка.ПроцентЗаполненностиОбщий;
		Результат.Картинка = БиблиотекаКартинок[Выборка.ИмяКартинки];
	
	КонецЕсли;	

	Возврат Результат;
	
КонецФункции // СтруктураЗаполненостиОбъекта()

// Процедура отображает процент заполнения на форме.
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма.
//  ТекущийОбъект	 - ДанныеФормыСтруктура	 - Текущий объект.
//  ИмяГруппы		 - Строка	 - Имя группы для отображения процента заполнения.
//
Процедура ОтобразитьПроцентЗаполнения(Форма, ТекущийОбъект, ИмяГруппы = "ГруппаПроцентЗаполнения") Экспорт
	
	ДанныеРасчета = РегистрыСведений.CRM_ЗаполненностьРеквизитовОбъектов.ДанныеРасчетаПроцентаЗаполнения(
		ТекущийОбъект.Ссылка);
		
	Если Форма.Элементы.ГруппаПроцентЗаполнения.ПодчиненныеЭлементы.Количество() = 0 Тогда
		СоздатьРеквизитыЭлементыФормыПроцентЗаполнения(Форма, ИмяГруппы);	
	КонецЕсли; 	
	
	ЕстьДанныеРасчета = Не ДанныеРасчета = Неопределено;
	
	Если ДанныеРасчета = Неопределено Тогда
		ИндексКартинки = 2;
	ИначеЕсли ДанныеРасчета.ПроцентЗаполнения <= 33 Тогда
		ИндексКартинки = 0;	
	ИначеЕсли ДанныеРасчета.ПроцентЗаполнения <= 66 Тогда
		ИндексКартинки = 1;	
	Иначе
		ИндексКартинки = 3;
	КонецЕсли;
	
	Форма["ИндексКартинкиПроцентаЗаполнения"] = ИндексКартинки;
	ЕстьНастройки = Истина;
	Если ЕстьДанныеРасчета Тогда
		Форма["ПравилоРасчетаПроцентаЗаполнения"] = ДанныеРасчета.ДеталиРасчета[0].Правило;
		Форма["УсловияРасчетаПроцентаЗаполнения"].Загрузить(ДанныеРасчета.ДеталиРасчета); 
	Иначе
		ЕстьНастройки = ПроверитьНаличиеПравилПоСтатусу(ТекущийОбъект.Ссылка);
	КонецЕсли; 
	
	Форма.Элементы["ГруппаПроцентЗаполненияДетализация"].Заголовок = ?(ЕстьДанныеРасчета,
		СтрШаблон("%1%%", ДанныеРасчета.ПроцентЗаполнения), "?");
	Форма.Элементы["СтраницаПроцентЗаполнения_ЕстьДанные"].Видимость = ЕстьДанныеРасчета;
	Форма.Элементы["СтраницаПроцентЗаполнения_НетДанных"].Видимость = Не ЕстьДанныеРасчета И ЕстьНастройки; 
	Форма.Элементы["СтраницаПроцентЗаполнения_НеНастроено"].Видимость = Не ЕстьНастройки; 
	
	УстановитьУсловноеОформлениеПроцентЗаполнения(Форма);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОтображениеПроцентаЗаполнения

Функция ПроверитьНаличиеПравилПоСтатусу(СсылкаНаОбъект)
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Партнеры") Тогда
		ТипОбъекта = "Справочник.Партнеры";
		Статус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "CRM_СтатусРаботы");
	Иначе
		ТипОбъекта = "Справочник.КонтактныеЛицаПартнеров";
		Статус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект.Владелец, "CRM_СтатусРаботы");
	КонецЕсли; 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ПравилаРасчетаКачестваЗаполненияДанных.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_ПравилаРасчетаКачестваЗаполненияДанных КАК CRM_ПравилаРасчетаКачестваЗаполненияДанных
	                      |ГДЕ
	                      |	CRM_ПравилаРасчетаКачестваЗаполненияДанных.СтатусРаботыСКлиентом = &СтатусРаботыСКлиентом
	                      |	И CRM_ПравилаРасчетаКачестваЗаполненияДанных.ТипОбъекта = &ТипОбъекта
	                      |	И НЕ CRM_ПравилаРасчетаКачестваЗаполненияДанных.ПометкаУдаления");
	Запрос.УстановитьПараметр("СтатусРаботыСКлиентом", Статус);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	
	Возврат (Не Запрос.Выполнить().Пустой());
КонецФункции

Процедура СоздатьРеквизитыЭлементыФормыПроцентЗаполнения(Форма, ИмяГруппы)

	СоздатьРеквизитыКомандыФормыПроцентЗаполнения(Форма);
	СоздатьЭлементыФормыПроцентЗаполнения(Форма, ИмяГруппы); 
		
КонецПроцедуры

Процедура СоздатьРеквизитыКомандыФормыПроцентЗаполнения(Форма)
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИндексКартинкиПроцентаЗаполнения", Новый ОписаниеТипов("Число")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПравилоРасчетаПроцентаЗаполнения", Новый ОписаниеТипов("СправочникСсылка.CRM_ПравилаРасчетаКачестваЗаполненияДанных"),, "Правило"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("УсловияРасчетаПроцентаЗаполнения", Новый ОписаниеТипов("ТаблицаЗначений"),, "Условия расчета"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("УсловиеПредставление", Новый ОписаниеТипов("Строка"), "УсловияРасчетаПроцентаЗаполнения", "Условие"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Вес", Новый ОписаниеТипов("Число"), "УсловияРасчетаПроцентаЗаполнения", "%"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Выполнено", Новый ОписаниеТипов("Булево"), "УсловияРасчетаПроцентаЗаполнения"));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДлительнаяОперация_РасчетПроцентаЗаполнения", Новый ОписаниеТипов()));
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, Новый Массив);
	
	Команда = Форма.Команды.Добавить("ОбновитьПроцентЗаполнения");
	Команда.Заголовок = НСтр("ru = 'Пересчитать сейчас'");
	Команда.Действие = "Подключаемый_ОбновитьПроцентЗаполнения";
	Команда.Картинка = БиблиотекаКартинок.Обновить;
	Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
		
	Команда = Форма.Команды.Добавить("ОткрытьНастройкиЗаполнения");
	Команда.Заголовок = НСтр("ru = 'Настроить сейчас'");
	Команда.Действие = "Подключаемый_ОткрытьНастройкиЗаполнения";
	Команда.Отображение = ОтображениеКнопки.Текст;
		
КонецПроцедуры

Процедура СоздатьЭлементыФормыПроцентЗаполнения(Форма, ИмяГруппы)
	
	КорневаяГруппа = Форма.Элементы[ИмяГруппы];	 
	
	КорневаяГруппа.Видимость = Истина;
	КорневаяГруппа.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	
	КартинкаЭлемент = Форма.Элементы.Добавить("КартинкаПроцентЗаполнения", Тип("ПолеФормы"), КорневаяГруппа);
	КартинкаЭлемент.Вид = ВидПоляФормы.ПолеКартинки;
	КартинкаЭлемент.ПутьКДанным = "ИндексКартинкиПроцентаЗаполнения";
	КартинкаЭлемент.КартинкаЗначений = БиблиотекаКартинок.CRM_КоллекцияШаров;
	КартинкаЭлемент.Ширина = 2;
	КартинкаЭлемент.Высота = 1;
	КартинкаЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КартинкаЭлемент.РастягиватьПоВертикали = Ложь;
	КартинкаЭлемент.РастягиватьПоГоризонтали = Ложь;
	КартинкаЭлемент.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	
	СворачиваемаяГруппа = Форма.Элементы.Добавить("ГруппаПроцентЗаполненияДетализация", Тип("ГруппаФормы"), КорневаяГруппа);
	СворачиваемаяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	СворачиваемаяГруппа.РазрешитьИзменениеСостава = Ложь;
	СворачиваемаяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	СворачиваемаяГруппа.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
	СворачиваемаяГруппа.ТолькоПросмотр = Истина;
	СворачиваемаяГруппа.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
	СворачиваемаяГруппа.ЦветТекстаЗаголовка = ЦветаСтиля.CRM_ОсновнойГолубой;
	СворачиваемаяГруппа.ШрифтЗаголовка = ШрифтыСтиля.ОбычныйШрифтТекста;
	
	
	СтраницаНеНастроено = Форма.Элементы.Добавить("СтраницаПроцентЗаполнения_НеНастроено", Тип("ГруппаФормы"), СворачиваемаяГруппа);
	СтраницаНеНастроено.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	СтраницаНеНастроено.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	СтраницаНеНастроено.ОтображатьЗаголовок = Ложь;
	
	ДекорацияЭлемент = Форма.Элементы.Добавить("ДекорацияНеНастроеноПроцентаЗаполнения", Тип("ДекорацияФормы"), СтраницаНеНастроено);
	ДекорацияЭлемент.Вид = ВидДекорацииФормы.Надпись;
	ДекорацияЭлемент.Заголовок = НСтр("ru = 'Для данного статуса работы с клиентом, не настроены правила расчета процента заполнения.'");
	ДекорацияЭлемент.АвтоМаксимальнаяШирина = Истина;
	
	Если ПравоДоступа("Изменение", Метаданные.Справочники.CRM_ПравилаРасчетаКачестваЗаполненияДанных) Тогда
		Кнопка = Форма.Элементы.Добавить("ОткрытьНастройкиЗаполнения", Тип("КнопкаФормы"), СтраницаНеНастроено);
		Кнопка.Вид = ВидКнопкиФормы.Гиперссылка;
		Кнопка.ИмяКоманды = "ОткрытьНастройкиЗаполнения";
		Кнопка.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
	КонецЕсли;
		
	СтраницаНетДанных = Форма.Элементы.Добавить("СтраницаПроцентЗаполнения_НетДанных", Тип("ГруппаФормы"), СворачиваемаяГруппа);
	СтраницаНетДанных.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	СтраницаНетДанных.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	СтраницаНетДанных.ОтображатьЗаголовок = Ложь;
	
	ДекорацияЭлемент = Форма.Элементы.Добавить("ДекорацияНетДанныхПроцентаЗаполнения", Тип("ДекорацияФормы"), СтраницаНетДанных);
	ДекорацияЭлемент.Вид = ВидДекорацииФормы.Надпись;
	ДекорацияЭлемент.Заголовок = "Показатель заполненности будет автоматически пересчитан в течение дня. Изменения реквизитов учитываются не сразу.";
	ДекорацияЭлемент.АвтоМаксимальнаяШирина = Истина;
	
	Кнопка = Форма.Элементы.Добавить("ОбновитьПроцентЗаполнения", Тип("КнопкаФормы"), СтраницаНетДанных);
	Кнопка.Вид = ВидКнопкиФормы.Гиперссылка;
	Кнопка.ИмяКоманды = "ОбновитьПроцентЗаполнения";
	Кнопка.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
		
	
	СтраницаДанные = Форма.Элементы.Добавить("СтраницаПроцентЗаполнения_ЕстьДанные", Тип("ГруппаФормы"), СворачиваемаяГруппа);
	СтраницаДанные.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	СтраницаДанные.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	СтраницаДанные.ОтображатьЗаголовок = Ложь;
	
	ПравилоЭлемент = Форма.Элементы.Добавить("ПравилоРасчетаПроцентаЗаполнения", Тип("ПолеФормы"), СтраницаДанные);
	ПравилоЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	ПравилоЭлемент.ПутьКДанным = "ПравилоРасчетаПроцентаЗаполнения";
	ПравилоЭлемент.Гиперссылка = Истина;
	ПравилоЭлемент.АвтоМаксимальнаяШирина = Истина;
	ПравилоЭлемент.МаксимальнаяШирина = 26;
	ПравилоЭлемент.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
	
	ТаблицаЭлемент = Форма.Элементы.Добавить("УсловияРасчетаПроцентаЗаполнения", Тип("ТаблицаФормы"), СтраницаДанные);
	ТаблицаЭлемент.ПутьКДанным = "УсловияРасчетаПроцентаЗаполнения";
	ТаблицаЭлемент.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ТаблицаЭлемент.КонтекстноеМеню.Видимость = Ложь;
	ТаблицаЭлемент.Ширина = 48;
	ТаблицаЭлемент.ВариантУправленияВысотой = ВариантУправленияВысотойТаблицы.ПоСодержимому;
	ТаблицаЭлемент.РастягиватьПоВертикали = Ложь;
	ТаблицаЭлемент.РастягиватьПоГоризонтали = Ложь;
	ТаблицаЭлемент.ПутьКДаннымКартинкиСтроки = "УсловияРасчетаПроцентаЗаполнения.Выполнено";
	ТаблицаЭлемент.КартинкаСтрок = БиблиотекаКартинок.ВнешняяКомпонентаДоступна;
	
	КолонкаУсловие = Форма.Элементы.Добавить("УсловияРасчетаПроцентаЗаполнения_УсловиеПредставление", Тип("ПолеФормы"), ТаблицаЭлемент);
	КолонкаУсловие.ПутьКДанным = "УсловияРасчетаПроцентаЗаполнения.УсловиеПредставление";
	КолонкаУсловие.АвтоВысотаЯчейки = Истина;
	
	КолонкаВес = Форма.Элементы.Добавить("УсловияРасчетаПроцентаЗаполнения_Вес", Тип("ПолеФормы"), ТаблицаЭлемент);
	КолонкаВес.ПутьКДанным = "УсловияРасчетаПроцентаЗаполнения.Вес";
	КолонкаВес.Ширина = 2;

КонецПроцедуры

Процедура УстановитьУсловноеОформлениеПроцентЗаполнения(Форма)

	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	
	ОтборУО = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборУО.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УсловияРасчетаПроцентаЗаполнения.Выполнено"); 
	ОтборУО.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ОтборУО.ПравоеЗначение = Ложь;
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("УсловияРасчетаПроцентаЗаполнения");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серебряный);

КонецПроцедуры

#КонецОбласти

#Область События

Процедура РасчетЗаполненностиРеквизитовОбъектаПриЗаписи(Источник, Отказ) Экспорт

	Если Отказ
		Или Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("Модифицированность") 
		И Не Источник.ДополнительныеСвойства["Модифицированность"] Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецКЛ = Неопределено;
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.КонтактныеЛицаПартнеров") Тогда 
		ВладелецКЛ = Источник.Владелец;
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Источник.ПометкаУдаления Тогда
		РегистрыСведений.CRM_ЗаполненностьРеквизитовОбъектов.ДобавитьЗапись(Источник.Ссылка,,,, Истина);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВладелецКЛ) Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецКЛ, "ПометкаУдаления") Тогда
			Возврат;
		КонецЕсли;
		РегистрыСведений.CRM_ЗаполненностьРеквизитовОбъектов.ДобавитьЗапись(ВладелецКЛ,,,, Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

#КонецОбласти

#Область ИсключаемыеРеквизиты

Функция ИсключаемыеРеквизитыКонтроляЗаполненностиОбъектов() Экспорт
	
	ИсключаемыеРеквизитыКонтроля = Новый Соответствие;
	
	// Партнеры
	МассивИсключаемыхРеквизитов = Новый Массив;
	МассивИсключаемыхРеквизитов.Добавить("ДатаРегистрации");
	МассивИсключаемыхРеквизитов.Добавить("CRM_Потенциал");
	МассивИсключаемыхРеквизитов.Добавить("CRM_Автор");
	МассивИсключаемыхРеквизитов.Добавить("сфпCoMagicID");
	МассивИсключаемыхРеквизитов.Добавить("сфпПользовательДляПереключенияЗвонков");
	
	ИсключаемыеРеквизитыКонтроля.Вставить("Справочник.Партнеры", МассивИсключаемыхРеквизитов);
	
	// КонтактныеЛицаПартнеров
	МассивИсключаемыхРеквизитов = Новый Массив;
	МассивИсключаемыхРеквизитов.Добавить("ДатаРегистрацииСвязи");
	МассивИсключаемыхРеквизитов.Добавить("ДатаПрекращенияСвязи");
	МассивИсключаемыхРеквизитов.Добавить("Автор");
	МассивИсключаемыхРеквизитов.Добавить("сфпCoMagicID");
	МассивИсключаемыхРеквизитов.Добавить("сфпПользовательДляПереключенияЗвонков");
	
	ИсключаемыеРеквизитыКонтроля.Вставить("Справочник.КонтактныеЛицаПартнеров", МассивИсключаемыхРеквизитов);
	
	Если Метаданные.ОбщиеМодули.Найти("CRM_Модуль_КонтрольЗаполненностиРеквизитовОбъектов") <> Неопределено Тогда
		CRM_Модуль = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_КонтрольЗаполненностиРеквизитовОбъектов");
		CRM_Модуль.ИсключаемыеРеквизитыКонтроляЗаполненностиОбъектов(ИсключаемыеРеквизитыКонтроля);
	КонецЕсли;
	
	Возврат ИсключаемыеРеквизитыКонтроля;
		
КонецФункции

#КонецОбласти

#Область НачальноеЗаполнение

Процедура НачальноеЗаполнениеНастроекКонтроляЗаполненностиОбъектов(Параметры = Неопределено) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	
	// Запуск расчета заполненности
	Если НЕ Параметры.Свойство("ПервыйЗапуск") Тогда
		ВыполнитьРасчет();
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
