///////////////////////////////////////////////////////////////////////////////////////////////////////////
// Система сквозной аналитики лицензирование (сервер)
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьПредопределенныеЭлементыИнтерваловВремени() Экспорт
	
	Уровень1_9 = Справочники.CRM_ИнтервалыВремениНаСайте.Уровень1_9.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(Уровень1_9.max) Тогда
		Уровень1_9.min = 1;
		Уровень1_9.max = 9;
		Уровень1_9.Записать();
	КонецЕсли;
	
	Уровень10_29 = Справочники.CRM_ИнтервалыВремениНаСайте.Уровень10_29.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(Уровень10_29.max) Тогда
		Уровень10_29.min = 10;
		Уровень10_29.max = 29;
		Уровень10_29.Записать();
	КонецЕсли;
	
	Уровень30_59 = Справочники.CRM_ИнтервалыВремениНаСайте.Уровень30_59.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(Уровень30_59.max) Тогда
		Уровень30_59.min = 30;
		Уровень30_59.max = 59;
		Уровень30_59.Записать();
	КонецЕсли;
	
	Уровень60_119 = Справочники.CRM_ИнтервалыВремениНаСайте.Уровень60_119.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(Уровень60_119.max) Тогда
		
		Уровень60_119.min = 60;
		Уровень60_119.max = 119;
		
		Уровень60_119.Записать();
	КонецЕсли;
	
	Уровень120_179 = Справочники.CRM_ИнтервалыВремениНаСайте.Уровень120_179.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(Уровень120_179.max) Тогда
		Уровень120_179.min = 120;
		Уровень120_179.max = 179;
		
		Уровень120_179.Записать();
	КонецЕсли;
	
	Уровень180_239 = Справочники.CRM_ИнтервалыВремениНаСайте.Уровень180_239.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(Уровень180_239.max) Тогда
		Уровень180_239.min = 180;
		Уровень180_239.max = 239;
		
		Уровень180_239.Записать();
	КонецЕсли;
	
	Уровень240_299 = Справочники.CRM_ИнтервалыВремениНаСайте.Уровень240_299.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(Уровень240_299.max) Тогда
		Уровень240_299.min = 240;
		Уровень240_299.max = 299;
		
		Уровень240_299.Записать();
	КонецЕсли;
	
	УровеньМин5_9 = Справочники.CRM_ИнтервалыВремениНаСайте.УровеньМин5_9.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(УровеньМин5_9.max) Тогда
		УровеньМин5_9.min = 300;
		УровеньМин5_9.max = 599;
		
		УровеньМин5_9.Записать();
	КонецЕсли;
	
	УровеньМин10_19 = Справочники.CRM_ИнтервалыВремениНаСайте.УровеньМин10_19.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(УровеньМин10_19.max) Тогда
		УровеньМин10_19.min = 600;
		УровеньМин10_19.max = 1199;
		
		УровеньМин10_19.Записать();
	КонецЕсли;
	УровеньМин20_29 = Справочники.CRM_ИнтервалыВремениНаСайте.УровеньМин20_29.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(УровеньМин20_29.max) Тогда
		УровеньМин20_29.min = 1200;
		УровеньМин20_29.max = 1799;
		
		УровеньМин20_29.Записать();
	КонецЕсли;
	УровеньМин30_59 = Справочники.CRM_ИнтервалыВремениНаСайте.УровеньМин30_59.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(УровеньМин30_59.max) Тогда
		УровеньМин30_59.min = 1800;
		УровеньМин30_59.max = 3599;
		
		УровеньМин30_59.Записать();
	КонецЕсли;
	УровеньЧас = Справочники.CRM_ИнтервалыВремениНаСайте.УровеньЧас.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(УровеньМин30_59.max) Тогда
		УровеньЧас.min = 3600;
		УровеньЧас.max = 9999999999;
		
		УровеньЧас.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьРегламентоеЗадание(Параметр1 = Неопределено, Параметр2 = Неопределено) Экспорт
	
	Если Параметр1 = Неопределено ИЛИ Параметр2 = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Не заполнены параметры процедуры';en='Parameters of procedure not filled'");
	КонецЕсли;
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровВыполнения(Параметр1, Параметр2);
	СтруктураПараметров.Вставить("ИсточникиКампаний", Параметр1);
	СтруктураПараметров.Вставить("СценарийАналитики", Параметр2);
	СтруктураПараметров.Вставить("Дозагрузка", Ложь);
	СтруктураПараметров.Вставить("ДатаЗагрузки", '00010101');
	
	Если ЗначениеЗаполнено(Параметр1) И ЗначениеЗаполнено(Параметр1.ДатаДозагрузки) Тогда
		СтруктураПараметров.Вставить("Дозагрузка", Истина);
		СтруктураПараметров.Вставить("ДатаЗагрузки", Параметр1.ДатаДозагрузки);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("НомерПроекта", "");
	Если ЗначениеЗаполнено(Параметр1) И ЗначениеЗаполнено(Параметр1.CRM_НомерПроекта) Тогда
		СтруктураПараметров.Вставить("НомерПроекта", Параметр1.CRM_НомерПроекта);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметр1) И ЗначениеЗаполнено(Параметр1.YD_Token) Тогда
		СтруктураПараметров.Вставить("YD_Token", Параметр1.YD_Token);
	КонецЕсли;

	Если Параметр2 = ПредопределенноеЗначение("Перечисление.CRM_СценарииПолученияАналитики.GoogleAnalytics") Тогда
		ПолучитьДанныеАналитикиГуглGoogle(СтруктураПараметров);
		
	ИначеЕсли Параметр2 = ПредопределенноеЗначение("Перечисление.CRM_СценарииПолученияАналитики.ЯндексМетрика") Тогда
		ПродолжитьВыполнениеЗаданияЯндексМетрика(СтруктураПараметров);
		
	ИначеЕсли Параметр2 = ПредопределенноеЗначение("Перечисление.CRM_СценарииПолученияАналитики.Roistat") Тогда
		ПолучитьДанныеАналитикиRoistat(СтруктураПараметров);

	ИначеЕсли Параметр2 = ПредопределенноеЗначение("Перечисление.CRM_СценарииПолученияАналитики.ВнешняяОбработка") Тогда
		ПродолжитьВыполнениеЗаданияВнешняяОбработка(СтруктураПараметров);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметр1) И ЗначениеЗаполнено(Параметр1.ДатаДозагрузки) Тогда
		ТекОбъект = Параметр1.ПолучитьОбъект();
		ТекОбъект.ДатаДозагрузки = "";
		ТекОбъект.ОбменДанными.Загрузка = Истина;
		ТекОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтруктуруПараметровВыполнения(ИсточникиКампаний, СценарийАналитики) Экспорт
	
	Структура = Новый Структура("Логин,Пароль,OAuthТокен,RefreshТокен,УчетнаяЗапись,АдресОтправителя,
		|ТемаПисьма,Визиты,ГлубинаПросмотра,КаналПервичногоИнтереса,
		|"
	+ "Посетители,Отказы,География,ВремяНаСайте,Устройства,РекламнаяКампания,Дозагрузка,ИсточникиКампаний,СценарийАналитики,"
	+ "YD_ЗагружатьЗатраты,YD_Login,YD_Token,YD_Валюта,Client_id,ЦелевыеДействия,Client_secret,URL,Medium,Source,ClientID");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_ИсточникиКампаний.Визиты КАК Визиты,
	|	CRM_ИсточникиКампаний.ГлубинаПросмотра КАК ГлубинаПросмотра,
	|	CRM_ИсточникиКампаний.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса,
	|	CRM_ИсточникиКампаний.Посетители КАК Посетители,
	|	CRM_ИсточникиКампаний.Отказы КАК Отказы,
	|	CRM_ИсточникиКампаний.География КАК География,
	|	CRM_ИсточникиКампаний.ВремяНаСайте КАК ВремяНаСайте,
	|	CRM_ИсточникиКампаний.Устройства КАК Устройства,
	|	CRM_ИсточникиКампаний.Логин КАК Логин,
	|	CRM_ИсточникиКампаний.Пароль КАК Пароль,
	|	CRM_ИсточникиКампаний.УчетнаяЗапись КАК УчетнаяЗапись,
	|	CRM_ИсточникиКампаний.АдресОтправителя КАК АдресОтправителя,
	|	CRM_ИсточникиКампаний.ТемаПисьма КАК ТемаПисьма,
	|	CRM_ИсточникиКампаний.OAuthТокен КАК OAuthТокен,
	|	CRM_ИсточникиКампаний.CRM_РекламнаяКампания КАК РекламнаяКампания,
	|	CRM_ИсточникиКампаний.YD_Валюта КАК YD_Валюта,
	|	CRM_ИсточникиКампаний.YD_Login КАК YD_Login,
	|	CRM_ИсточникиКампаний.YD_Token КАК YD_Token,
	|	CRM_ИсточникиКампаний.YD_ЗагружатьЗатраты КАК YD_ЗагружатьЗатраты,
	|	CRM_ИсточникиКампаний.RefreshТокен КАК RefreshТокен,
	|	CRM_ИсточникиКампаний.Client_id КАК Client_id,
	|	CRM_ИсточникиКампаний.Client_secret КАК Client_secret,
	|	CRM_ИсточникиКампаний.URL КАК URL,
	|	CRM_ИсточникиКампаний.Medium КАК Medium,
	|	CRM_ИсточникиКампаний.ClientID КАК ClientID,
	|	CRM_ИсточникиКампаний.ЦелевыеДействия КАК ЦелевыеДействия,
	|	CRM_ИсточникиКампаний.Source КАК Source,
	|	ЛОЖЬ КАК Дозагрузка,
	|	CRM_ИсточникиКампаний.ИсточникиКампаний КАК ИсточникиКампаний,
	|	CRM_ИсточникиКампаний.СценарийАналитики КАК СценарийАналитики
	|ИЗ
	|	РегистрСведений.CRM_ИсточникиКампаний КАК CRM_ИсточникиКампаний
	|ГДЕ
	|	CRM_ИсточникиКампаний.ИсточникиКампаний = &ИсточникиКампаний
	|	И CRM_ИсточникиКампаний.СценарийАналитики = &СценарийАналитики";
	
	Запрос.УстановитьПараметр("ИсточникиКампаний", ИсточникиКампаний);
	Запрос.УстановитьПараметр("СценарийАналитики", СценарийАналитики);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Структура, ВыборкаДетальныеЗаписи);
		
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Функция ОпределитьКаналРекламы(utmMedium, utmSource) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НРег(utmSource) = "organic" Тогда
		// Бесплатный поиск
		Наименование = "Переходы из поисковых систем";

	ИначеЕсли НРег(utmSource) = "internal" Тогда
		// Внутренние переходы
		Наименование = "Внутренние переходы";
		
	ИначеЕсли НРег(utmSource) = "referral" ИЛИ НРег(utmSource) = "link" Тогда
		// Переходы по ссылкам
		Наименование = "Переходы по ссылкам на сайт";
		
	ИначеЕсли НРег(utmSource) = "direct" ИЛИ НРег(utmSource) = "ya_direct" ИЛИ НРег(utmSource) = "Yandex-Direct" Тогда
		// Прямые заходы
		Наименование = "Прямые заходы";
		
	ИначеЕсли НРег(utmSource) = "email" Тогда
		// Почтовая рассылка
		Наименование = "Переходы с почтовых рассылок";
		
	ИначеЕсли НРег(utmSource) = "cpc" ИЛИ НРег(utmSource) = "ppc" ИЛИ НРег(utmSource) = "paidsearch"
		 ИЛИ НРег(utmSource) = "ad"
		 ИЛИ НРег(utmSource) = "paid" Тогда
		// Поисковая реклама
		Наименование = "Переходы по рекламе";
		
	ИначеЕсли НРег(utmSource) = "social" ИЛИ НРег(utmSource) = "social-network"
		 ИЛИ НРег(utmSource) = "social-media" ИЛИ НРег(utmSource) = "sm"
		 ИЛИ НРег(utmSource) = "social network"
		 ИЛИ НРег(utmSource) = "social media" Тогда
		// Социальные сети
		Наименование = "Переходы из социальных сетей";
		
	ИначеЕсли НРег(utmSource) = "display" ИЛИ НРег(utmSource) = "cpm" ИЛИ НРег(utmSource) = "banner" Тогда
		// Медийная реклама
		Наименование = "Медийная реклама";
		
	ИначеЕсли НРег(utmSource) = "cpv" ИЛИ НРег(utmSource) = "cpa" ИЛИ НРег(utmSource) = "cpp"
		 ИЛИ НРег(utmSource) = "content-text" Тогда
		// Другая реклама
		Наименование = "Прочая реклама";
		
	Иначе
		Наименование = НРег(utmSource);
	КонецЕсли;
	
	Канал = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.НайтиПоНаименованию(Наименование, Истина);
	Если Канал.Пустая() Тогда
		КаналОбъект = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.СоздатьЭлемент();
		КаналОбъект.Наименование = Наименование;
		КаналОбъект.Записать();
		
		Канал = КаналОбъект.Ссылка;
	КонецЕсли;
	
	Возврат Канал;

КонецФункции	//	ОпределитьКаналРекламы()

#Область ЗагрузкаЛидогенерация

Процедура CRM_ЗагрузкаЛидогенерации(Параметр1, Параметр2) Экспорт
	
	Если Параметр2 = Перечисления.CRM_CallTrakingСценарии.ПочтовоеСообщение Тогда
		// Обработка почтовых сообщений
		Структура = Новый Структура;
		Структура.Вставить("УчетнаяЗапись", Параметр1.УчетнаяЗапись);
		Структура.Вставить("ТемаПисьма", Параметр1.ТемаПисьма);
		Структура.Вставить("ИсточникПисьма", Параметр1.ИсточникПисьма);
		Структура.Вставить("ПрисоединенныйФайл", Параметр1.ПрисоединенныйФайл);
		Структура.Вставить("ТабличнаяЧастьСопоставлениеРеквизитов",
			 Параметр1.ТабличнаяЧастьСопоставлениеРеквизитов.Выгрузить());
		Структура.Вставить("КаналПервичногоИнтереса", Параметр1.КаналПервичногоИнтереса);
		Структура.Вставить("ИсточникПервичногоИнтереса", Параметр1.ИсточникПервичногоИнтереса);
		Структура.Вставить("ИсточникПолучения", Параметр1);
		Структура.Вставить("Сценарий", Параметр2);
		Структура.Вставить("Сайт", Параметр1.CRM_Сайт);
		Структура.Вставить("Ответственный", Параметр1.ОтветственныйМенеджер);
		Структура.Вставить("РольОтветственного", Параметр1.CRM_РольОтветственного);
		
		ОбработатьПочтовыеСообщения(Структура);
		
	ИначеЕсли Параметр2 = Перечисления.CRM_CallTrakingСценарии.Comagic
		ИЛИ Параметр2 = Перечисления.CRM_CallTrakingСценарии.UIS Тогда
		// Обработка данных из comagic
		
		Токен = Параметр1.Token;
		
		Если Параметр1.ИспользоватьГенераторЗвонка Тогда
			
			СтрПараметры = ПолучитьСтрокуПараметры(Истина, Токен);
			
			ВыполнитьСозданиеЗаявокИзЗвонкаComagic(СтрПараметры, Токен, Параметр1);
			
			CoMagic_ОтправитьИзменения(Токен);
			
		КонецЕсли;
		
		Если Параметр1.ИспользоватьГенераторЗаявки Тогда
			
			СтрПараметры = ПолучитьСтрокуПараметры(Ложь, Токен);
			
			ВыполнитьСозданиеЗаявокИзЗаявокComagic(СтрПараметры, Токен, Параметр1);
			
			CoMagic_ОтправитьИзменения(Токен);
			
		КонецЕсли;
		
	ИначеЕсли Параметр2 = Перечисления.CRM_CallTrakingСценарии.ВнешняяОбработка Тогда
		Если ЗначениеЗаполнено(Параметр1) Тогда
			Если ТипЗнч(Параметр1) = тип("СправочникСсылка.CRM_ИсточникиПолученияЛидов") Тогда
				ВыполнитьВнешнуюОбработку(Параметр1.ОбработкаДействия);	
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ЗагрузкаЛидогенерацияПочтовыеСообщения

Процедура ОбработатьПочтовыеСообщения(Структура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Текст КАК Текст,
	|	ЭлектронноеПисьмоВходящее.ТекстHTML КАК ТекстHTML,
	|	ЭлектронноеПисьмоВходящее.Ссылка КАК Ссылка,
	|	ЭлектронноеПисьмоВходящее.Дата КАК Дата,
	|	ЭлектронноеПисьмоВходящее.Тема КАК Тема,
	|	ЭлектронноеПисьмоВходящееПрисоединенныеФайлы.ФайлХранилище КАК ФайлХранилище,
	|	ДвоичныеДанныеФайлов.ДвоичныеДанныеФайла КАК ДвоичныеДанныеФайла
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы КАК ЭлектронноеПисьмоВходящееПрисоединенныеФайлы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьДвоичныеДанныеФайлов КАК ДвоичныеДанныеФайлов
	|			ПО ЭлектронноеПисьмоВходящееПрисоединенныеФайлы.Ссылка = ДвоичныеДанныеФайлов.Файл
	|		ПО ЭлектронноеПисьмоВходящее.Ссылка = ЭлектронноеПисьмоВходящееПрисоединенныеФайлы.ВладелецФайла
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.Дата МЕЖДУ &Дата1 И &Дата2 ";
	Если ЗначениеЗаполнено(Структура.ТемаПисьма) Тогда
		Запрос.Текст = Запрос.Текст + "	И ЭлектронноеПисьмоВходящее.Тема ПОДОБНО &ТемаПисьма ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Структура.ИсточникПисьма) Тогда
		Запрос.Текст = Запрос.Текст + "	И ЭлектронноеПисьмоВходящее.ОтправительАдрес = &ИсточникПисьма ";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "	И НЕ ЭлектронноеПисьмоВходящее.ПометкаУдаления
	|	И ЭлектронноеПисьмоВходящее.УчетнаяЗапись = &УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДатаСеанса() - 86400));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДатаСеанса()));
	Если ЗначениеЗаполнено(Структура.ИсточникПисьма) Тогда
		Запрос.УстановитьПараметр("ИсточникПисьма", Структура.ИсточникПисьма);
	КонецЕсли;
	Если ЗначениеЗаполнено(Структура.ТемаПисьма) Тогда
		Запрос.УстановитьПараметр("ТемаПисьма", "%" + Структура.ТемаПисьма + "%");
	КонецЕсли;
	Запрос.УстановитьПараметр("УчетнаяЗапись", Структура.УчетнаяЗапись); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ТекстПисьма = "";
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Текст) Тогда
			ТекстПисьма = ВыборкаДетальныеЗаписи.Текст;
		ИначеЕсли ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ТекстHTML) Тогда
			ТекстПисьма = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ВыборкаДетальныеЗаписи.ТекстHTML);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстПисьма) Тогда
			Структура.Вставить("Основание", ВыборкаДетальныеЗаписи.Ссылка);
			Структура.Вставить("Дата", ВыборкаДетальныеЗаписи.Дата);
			Структура.Вставить("Тема", ВыборкаДетальныеЗаписи.Тема);
			
			// Обрабатываем тело письма.
			ОбработатьТелоПисьма(ТекстПисьма, Структура);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьТелоПисьма(Текст, СтруктураДанных)
	
	СоздатьОбновитьЗаявкиНоваяВерсия(Текст, СтруктураДанных);
	
КонецПроцедуры

Процедура СоздатьОбновитьЗаявкиНоваяВерсия(Текст, СтруктураДанных)
	
	ИмяСобытияЖурналаРегистрации = НСтр("ru='Сквозная аналитика. Почтовое сообщение';en='End-to-end Analytics. Mail'");
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, Символы.ПС);
	
	СтруктураЗаявки = Новый Структура();
	СтруктураЗаявки.Вставить("ИсточникПолучения", СтруктураДанных.ИсточникПолучения);
	СтруктураЗаявки.Вставить("РекламнаяКампанияИД", "");
	СтруктураЗаявки.Вставить("РекламнаяКампания", "");
	СтруктураЗаявки.Вставить("Сайт", "");
	СтруктураЗаявки.Вставить("ИсточникТрафика", "");
	СтруктураЗаявки.Вставить("Дата", "");
	СтруктураЗаявки.Вставить("Тема", "");
	СтруктураЗаявки.Вставить("Контакт", "");
	СтруктураЗаявки.Вставить("CRM_UTM_source", "");
	СтруктураЗаявки.Вставить("CRM_UTM_medium", "");
	СтруктураЗаявки.Вставить("CRM_UTM_pos", "");

	Для Каждого Стр Из МассивСтрок Цикл
		Если СтрНайти(Стр, "Сайт:") > 0 Тогда
			
			ПозицияПервого = СтрНайти(Стр, "Сайт:");
			ДлинаПодстроки = СтрДлина(Стр) - (ПозицияПервого + СтрДлина("Сайт:"));
			СтрЗначениеПараметра = СокрЛП(Прав(Стр, ДлинаПодстроки));
			Если НЕ СтруктураЗаявки.Свойство("Сайт") Тогда
				СтруктураЗаявки.Вставить("Сайт", СтрЗначениеПараметра);
			КонецЕсли;
			
		ИначеЕсли СтрНайти(Стр, "Канал привлечения:") > 0 Тогда
			
			ПозицияПервого = СтрНайти(Стр, "Канал привлечения:");
			ДлинаПодстроки = СтрДлина(Стр) - (ПозицияПервого + СтрДлина("Канал привлечения:"));
			СтрЗначениеПараметра = СокрЛП(Прав(Стр, ДлинаПодстроки));
			СтруктураЗаявки.Вставить("ИсточникТрафика", СтрЗначениеПараметра);
			
		ИначеЕсли СтрНайти(Стр, "Рекламная кампания (id):") > 0 Тогда
			
			ПозицияПервого = СтрНайти(Стр, "Рекламная кампания (id):");
			ДлинаПодстроки = СтрДлина(Стр) - (ПозицияПервого + СтрДлина("Рекламная кампания (id):"));
			СтрЗначениеПараметра = СокрЛП(Прав(Стр, ДлинаПодстроки));
			СтруктураЗаявки.Вставить("РекламнаяКампанияИД", СтрЗначениеПараметра);
			
		ИначеЕсли СтрНайти(Стр, "Рекламная кампания (наименование):") > 0 Тогда
			
			ПозицияПервого = СтрНайти(Стр, "Рекламная кампания (наименование):");
			ДлинаПодстроки = СтрДлина(Стр) - (ПозицияПервого + СтрДлина("Рекламная кампания (наименование):"));
			СтрЗначениеПараметра = СокрЛП(Прав(Стр, ДлинаПодстроки));
			СтруктураЗаявки.Вставить("РекламнаяКампания", СтрЗначениеПараметра);
			
		ИначеЕсли СтрНайти(Стр, "utm_source:") > 0 Тогда
			
			ПозицияПервого = СтрНайти(Стр, "utm_source:");
			ДлинаПодстроки = СтрДлина(Стр) - (ПозицияПервого + СтрДлина("utm_source:"));
			СтрЗначениеПараметра = СокрЛП(Прав(Стр, ДлинаПодстроки));
			СтруктураЗаявки.Вставить("CRM_UTM_source", СтрЗначениеПараметра);
			
		ИначеЕсли СтрНайти(Стр, "utm_medium:") > 0 Тогда
			
			ПозицияПервого = СтрНайти(Стр, "utm_medium:");
			ДлинаПодстроки = СтрДлина(Стр) - (ПозицияПервого + СтрДлина("utm_medium:"));
			СтрЗначениеПараметра = СокрЛП(Прав(Стр, ДлинаПодстроки));
			СтруктураЗаявки.Вставить("CRM_UTM_medium", СтрЗначениеПараметра);
			
		ИначеЕсли СтрНайти(Стр, "utm_pos:") > 0 Тогда
			
			ПозицияПервого = СтрНайти(Стр, "utm_pos:");
			ДлинаПодстроки = СтрДлина(Стр) - (ПозицияПервого + СтрДлина("utm_pos:"));
			СтрЗначениеПараметра = СокрЛП(Прав(Стр, ДлинаПодстроки));
			СтруктураЗаявки.Вставить("CRM_UTM_pos", СтрЗначениеПараметра);
			
		ИначеЕсли СтрНайти(Стр, "Номер заявки:") > 0 Тогда
			
			ПозицияПервого = СтрНайти(Стр, "Номер заявки:");
			ДлинаПодстроки = СтрДлина(Стр) - (ПозицияПервого + СтрДлина("Номер заявки:"));
			СтрЗначениеПараметра = СокрЛП(Прав(Стр, ДлинаПодстроки));
			СтруктураЗаявки.Вставить("ID", СтрЗначениеПараметра);
			
		ИначеЕсли СтрНайти(Стр, "Дата заявки:") > 0 Тогда
			
			ПозицияПервого = СтрНайти(Стр, "Дата заявки:");
			ДлинаПодстроки = СтрДлина(Стр) - (ПозицияПервого + СтрДлина("Дата заявки:"));
			ДатаТекст = СокрЛП(Прав(Стр, ДлинаПодстроки));
			ДатаТекст = СтрЗаменить(ДатаТекст, "-", "");
			ДатаТекст = СтрЗаменить(ДатаТекст, ":", "");
			ДатаТекст = СтрЗаменить(ДатаТекст, " ", "");
			Попытка
				ЗначениеДанных = Дата(ДатаТекст);
			
			Исключение ЗначениеДанных = ТекущаяДатаСеанса();
			КонецПопытки;
			СтруктураЗаявки.Вставить("Дата", ЗначениеДанных);
			
		ИначеЕсли СтрНайти(Стр, "ФИО:") > 0 Тогда
			
			ПозицияПервого = СтрНайти(Стр, "ФИО:");
			ДлинаПодстроки = СтрДлина(Стр) - (ПозицияПервого + СтрДлина("ФИО:"));
			СтрЗначениеПараметра = СокрЛП(Прав(Стр, ДлинаПодстроки));
			СтруктураЗаявки.Вставить("Наименование", СтрЗначениеПараметра);
			
		ИначеЕсли СтрНайти(Стр, "Электронная почта:") > 0 Тогда
			
			ПозицияПервого = СтрНайти(Стр, "Электронная почта:");
			ДлинаПодстроки = СтрДлина(Стр) - (ПозицияПервого + СтрДлина("Электронная почта:"));
			СтрЗначениеПараметра = СокрЛП(Прав(Стр, ДлинаПодстроки));
			СтруктураЗаявки.Вставить("ЭлектроннаяПочта", СтрЗначениеПараметра);
			
		ИначеЕсли СтрНайти(Стр, "Телефон:") > 0 Тогда
			
			ПозицияПервого = СтрНайти(Стр, "Телефон:");
			ДлинаПодстроки = СтрДлина(Стр) - (ПозицияПервого + СтрДлина("Телефон:"));
			СтрЗначениеПараметра = СокрЛП(Прав(Стр, ДлинаПодстроки));
			СтруктураЗаявки.Вставить("Телефон", СтрЗначениеПараметра);
			
		ИначеЕсли СтрНайти(Стр, "Город:") > 0 Тогда
			
			ПозицияПервого = СтрНайти(Стр, "Город:");
			ДлинаПодстроки = СтрДлина(Стр) - (ПозицияПервого + СтрДлина("Город:"));
			СтрЗначениеПараметра = СокрЛП(Прав(Стр, ДлинаПодстроки));
			СтруктураЗаявки.Вставить("Город", СтрЗначениеПараметра);
			
			ТекКомментарий = НСтр("ru = 'Город:'") + СтрЗначениеПараметра;
			Если СтруктураЗаявки.Свойство("Комментарий") Тогда
				ТекКомментарий = СтруктураЗаявки.Комментарий + Символы.ПС + ТекКомментарий;
			КонецЕсли;
			СтруктураЗаявки.Вставить("Комментарий", ТекКомментарий);
			
		ИначеЕсли СтрНайти(Стр, "Устройство:") > 0 Тогда
			
			ПозицияПервого = СтрНайти(Стр, "Устройство:");
			ДлинаПодстроки = СтрДлина(Стр) - (ПозицияПервого + СтрДлина("Устройство:"));
			СтрЗначениеПараметра = СокрЛП(Прав(Стр, ДлинаПодстроки));
			СтруктураЗаявки.Вставить("Устройство", СтрЗначениеПараметра);
			
			ТекКомментарий = НСтр("ru = 'Устройство:'") + СтрЗначениеПараметра;
			Если СтруктураЗаявки.Свойство("Комментарий") Тогда
				ТекКомментарий = СтруктураЗаявки.Комментарий + Символы.ПС + ТекКомментарий;
			КонецЕсли;
			СтруктураЗаявки.Вставить("Комментарий", ТекКомментарий);
			
		ИначеЕсли СтрНайти(Стр, "Тема заявки:") > 0 Тогда
			
			ПозицияПервого = СтрНайти(Стр, "Тема заявки:");
			ДлинаПодстроки = СтрДлина(Стр) - (ПозицияПервого + СтрДлина("Тема заявки:"));
			СтрЗначениеПараметра = СокрЛП(Прав(Стр, ДлинаПодстроки));
			СтруктураЗаявки.Вставить("Тема", СтрЗначениеПараметра);
			
		ИначеЕсли СтрНайти(Стр, "Текст заявки:") > 0 Тогда
			
			ПозицияПервого = СтрНайти(Стр, "Текст заявки:");
			ДлинаПодстроки = СтрДлина(Стр) - (ПозицияПервого + СтрДлина("Текст заявки:"));
			ТекКомментарий = СокрЛП(Прав(Стр, ДлинаПодстроки));
			Если СтруктураЗаявки.Свойство("Комментарий") Тогда
				ТекКомментарий = СтруктураЗаявки.Комментарий + Символы.ПС + ТекКомментарий;
			КонецЕсли;
			
			СтруктураЗаявки.Вставить("Комментарий", ТекКомментарий);
		ИначеЕсли СтрНайти(Стр, "Организация:") > 0 Тогда
			
			ПозицияПервого = СтрНайти(Стр, "Организация:");
			ДлинаПодстроки = СтрДлина(Стр) - (ПозицияПервого + СтрДлина("Организация:"));
			СтрЗначениеПараметра = СокрЛП(Прав(Стр, ДлинаПодстроки));
			СтруктураЗаявки.Вставить("Организация", СтрЗначениеПараметра);
		
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("ТабличнаяЧастьСопоставлениеРеквизитов") Тогда
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("РеквизитПользовательский", Истина);
			СтруктураПоиска.Вставить("Выбрано", Истина);
			
			НайденныеСтроки = СтруктураДанных.ТабличнаяЧастьСопоставлениеРеквизитов.НайтиСтроки(СтруктураПоиска);
			Для Каждого ТекСопоставление Из НайденныеСтроки Цикл
				
				Если СтрНайти(Стр, ТекСопоставление.РеквизитПоиск + ":") > 0 Тогда
					
					ПозицияПервого = СтрНайти(Стр, ТекСопоставление.РеквизитПоиск + ":");
					ДлинаПодстроки = СтрДлина(Стр) - (ПозицияПервого + СтрДлина(ТекСопоставление.РеквизитПоиск + ":"));
					ТекКомментарий = ТекСопоставление.РеквизитПоиск + ":" + СокрЛП(Прав(Стр, ДлинаПодстроки));
					Если СтруктураЗаявки.Свойство("Комментарий") Тогда
						ТекКомментарий = СтруктураЗаявки.Комментарий + Символы.ПС + ТекКомментарий
					КонецЕсли;
					
					СтруктураЗаявки.Вставить("Комментарий", ТекКомментарий);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураЗаявки.Вставить("КаналПервичногоИнтереса", СтруктураДанных.КаналПервичногоИнтереса);
	СтруктураЗаявки.Вставить("ИсточникПервичногоИнтереса", СтруктураДанных.ИсточникПервичногоИнтереса);
		
	СтрРекламнаяКампания = Новый Структура();
	СтрРекламнаяКампания.Вставить("ID", СтрЗаменить(СтруктураЗаявки.РекламнаяКампанияИД, Символы.НПП, ""));
	СтрРекламнаяКампания.Вставить("Наименование", СтруктураЗаявки.РекламнаяКампания);
	СтрРекламнаяКампания.Вставить("КаналПривлечения", СтрЗаменить(СтруктураЗаявки.ИсточникТрафика, Символы.НПП, ""));
	
	Если НЕ ЗначениеЗаполнено(СтрРекламнаяКампания.Наименование) И ЗначениеЗаполнено(СтрРекламнаяКампания.ID) Тогда
		СтрРекламнаяКампания.Вставить("Наименование", "Рекламная кампания");
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(СтрРекламнаяКампания.Наименование) И ЗначениеЗаполнено(СтрРекламнаяКампания.ID) Тогда
		ДанныеКампании = Новый Структура("Идентификатор,Наименование", СтрРекламнаяКампания.ID,
			 СтрРекламнаяКампания.Наименование);
		РекламнаяКампанияСтр = ПолучитьРекламнуюКампаниюПоИД(ДанныеКампании,
			 СтрРекламнаяКампания.КаналПривлечения,
			 СтруктураДанных);
		СтруктураЗаявки.Вставить("КаналПервичногоИнтереса", РекламнаяКампанияСтр.КаналПервичногоИнтереса);
		СтруктураЗаявки.Вставить("ИсточникПервичногоИнтереса", РекламнаяКампанияСтр.ИсточникПервичногоИнтереса);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураЗаявки.КаналПервичногоИнтереса) Тогда
		СтруктураЗаявки.Вставить("КаналПервичногоИнтереса", СтруктураДанных.КаналПервичногоИнтереса);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтруктураЗаявки.ИсточникПервичногоИнтереса) Тогда
		СтруктураЗаявки.Вставить("ИсточникПервичногоИнтереса", СтруктураДанных.ИсточникПервичногоИнтереса);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтруктураЗаявки.Дата) Тогда
		СтруктураЗаявки.Вставить("Дата", СтруктураДанных.Дата);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураЗаявки.Тема) Тогда
		СтруктураЗаявки.Вставить("Тема", СтруктураДанных.Тема);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураЗаявки.CRM_UTM_source) Тогда
		СтруктураЗаявки.Вставить("CRM_UTM_source", СтруктураДанных.ИсточникПолучения.CRM_UTM_source);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураЗаявки.CRM_UTM_medium) Тогда
		СтруктураЗаявки.Вставить("CRM_UTM_medium", СтруктураДанных.ИсточникПолучения.CRM_UTM_medium);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураЗаявки.CRM_UTM_pos) Тогда
		СтруктураЗаявки.Вставить("CRM_UTM_pos", СтруктураДанных.ИсточникПолучения.CRM_UTM_pos);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураЗаявки.Сайт) Тогда
		Если ЗначениеЗаполнено(СтруктураДанных.ИсточникПолучения.CRM_Сайт) Тогда
			СтруктураЗаявки.Вставить("CRM_Сайт", СтруктураДанных.ИсточникПолучения.CRM_Сайт);
			
		Иначе
			СтруктураЗаявки.Вставить("Сайт", "Сайт компании");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтруктураЗаявки.Свойство("CRM_Сайт") Тогда
		СтрСайт = Новый Структура();
		СтрСайт.Вставить("Наименование", СтруктураЗаявки.Сайт);
		СтрСайт.Вставить("domain", СтруктураЗаявки.Сайт);
			
		Сайт = ЗаписатьИнформациюПоСайтам(СтрСайт);
		СтруктураЗаявки.Вставить("CRM_Сайт", Сайт);
	КонецЕсли;

	Если СтруктураЗаявки.Свойство("ID") И ЗначениеЗаполнено(СтруктураЗаявки.ID) Тогда
		ЗаявкаСуществует = ДокументНайденПоИД(СтруктураЗаявки.ID);
		Если ЗаявкаСуществует Тогда
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Информация, , , НСтр("ru='Заявка существует (ID):';en='Request exists (ID):'") 
				+ " " 
				+ СтруктураЗаявки.ID);
			Возврат;
		КонецЕсли;
	КонецЕсли;	

	Если ЗначениеЗаполнено(СтруктураДанных.Основание) Тогда
		ЗаявкаСуществует = ДокументНайденПоОснованию(СтруктураДанных.Основание);
		Если ЗаявкаСуществует Тогда
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Информация, , , НСтр("ru='Заявка существует (письмо):';en='Request exists (letter):'") 
				+ " " 
				+ СтруктураДанных.Основание);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтруктураЗаявки.Контакт) Тогда
		Если СтруктураЗаявки.Свойство("Телефон") И ЗначениеЗаполнено(СтруктураЗаявки.Телефон) Тогда
			Контакты = CRM_КлиентыСервер.НайтиПартнераПоКИ(СтруктураЗаявки.Телефон, 1, Истина);
			Если Контакты.Количество() > 0 Тогда
				СтруктураЗаявки.Контакт = Контакты[0];
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтруктураЗаявки.Контакт) Тогда
			Если СтруктураЗаявки.Свойство("ЭлектроннаяПочта") И ЗначениеЗаполнено(СтруктураЗаявки.ЭлектроннаяПочта) Тогда
				Контакты = CRM_КлиентыСервер.НайтиПартнераПоКИ(СтруктураЗаявки.ЭлектроннаяПочта, 2, Истина);
				Если Контакты.Количество() > 0 Тогда
					СтруктураЗаявки.Контакт = Контакты[0];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Док = Документы.CRM_Заявка.СоздатьДокумент();
	Док.ДокументОснование = СтруктураДанных.Основание;
	Док.Ответственный = СтруктураДанных.Ответственный;
	Док.CRM_РольОтветственного = СтруктураДанных.РольОтветственного;
	ЗаполнитьЗначенияСвойств(Док, СтруктураЗаявки);
	
	Документы.CRM_Заявка.ЗаполнитьКонтактЗаявки(Док);
	Справочники.CRM_ПравилаОбработкиОбращений.ПрименитьПравило(Док);
	Попытка
		Док.Записать();
		УстановитьСсылкуВИсточникПервичногоИнтересаЗаписатьДопРеквизит(Док.Ссылка, СтруктураЗаявки);
		Справочники.CRM_ПравилаОбработкиОбращений.ОбработатьОбращение(Док);
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаЛидогенерацияComagic

Процедура ВыполнитьСозданиеЗаявокИзЗаявокComagic(ТелоЗапроса, Токен, Источники)
	
	// Пока заявки Comagic не поддерживаются
	СформироватьЗаявкиПоДаннымИзЗаявкиComagic(Новый Массив, Источники);
	
КонецПроцедуры

// Пока заявки Comagic не поддерживаются
Процедура СформироватьЗаявкиПоДаннымИзЗаявкиComagic(Массив, Источники)
	
	// Пока заявки Comagic не поддерживаются
	Возврат;
	
	// Для Каждого Стр Из Массив Цикл
	//	
	//	СтруктураЗаполнения = Новый Структура;
	//	
	//	Ид = СтрЗаменить(Стр.Получить("id"),Символы.НПП,"");
	//	СтруктураЗаполнения.Вставить("id",Ид);
	//	
	//	Если ДокументНайденПоИД(ИД) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	ДатаСтр = Стр.Получить("date_time");
	//	ДатаСтр = СтрЗаменить(ДатаСтр,"-","");
	//	ДатаСтр = СтрЗаменить(ДатаСтр,":","");
	//	ДатаСтр = СтрЗаменить(ДатаСтр," ","");
	//	
	//	Дата = Дата(ДатаСтр);
	//	
	//	НаименованиеРеклКампания 	= Стр.Получить("campaign_name");
	//	ИДРекламнаяКомпания 		= СтрЗаменить(Стр.Получить("campaign_id"),Символы.НПП,"");
	//	СайтДомен					= Стр.Получить("site_domain_name");
	//	СайтДомен 					= СтрЗаменить(СайтДомен,"https://","");
	//	СайтДомен 					= СтрЗаменить(СайтДомен,"http://","");
	//	
	//	СайтИД						= СтрЗаменить(Стр.Получить("site_id"),Символы.НПП,"");
	//	
	//	КаналПривлечения			= СтрЗаменить(Стр.Получить("channel"),Символы.НПП,"");
	//	
	//	Структура = Новый Структура;
	//	
	//	Структура.Вставить("ПометкаУдаления",Ложь);
	//	Структура.Вставить("id",СайтИД);
	//	Структура.Вставить("Наименование",СайтДомен);
	//	Структура.Вставить("domain",СайтДомен);
	//	Структура.Вставить("ИсточникиКампаний",Справочники.CRM_ИсточникиРекламныхКампаний.ПустаяСсылка());
	//	
	//	Сайт = ЗаписатьИнформациюПоСайтам(Структура);
	//	
	//	СтруктураЗаполнения.Вставить("CRM_Сайт",Сайт);
	//	СтруктураЗаполнения.Вставить("CRM_UTM_source","");
	//	СтруктураЗаполнения.Вставить("CRM_UTM_medium","");
	//	СтруктураЗаполнения.Вставить("CRM_UTM_pos", "");
	//	
	//	СтруктураЗаполнения.Вставить("ИсточникиКампаний",Источники);
	//	
	//	ДанныеКампании = Новый Структура("Идентификатор,Наименование",ИДРекламнаяКомпания, НаименованиеРеклКампания);
	//	СтрРекл = ПолучитьРекламнуюКампаниюПоИД(ДанныеКампании, КаналПривлечения);
	//	
	//	СтруктураЗаполнения.Вставить("КаналПервичногоИнтереса",СтрРекл.КаналПервичногоИнтереса);
	//	СтруктураЗаполнения.Вставить("ИсточникПервичногоИнтереса",СтрРекл.ИсточникПервичногоИнтереса);
	//	Наименование = Стр.Получить("visitor_name");
	//	
	//	ТекстОписание = Стр.Получить("text");
	//	
	//	Телефон = Стр.Получить("visitor_phone_number");
	//	
	//	ЭлектроннаяПочта = Стр.Получить("visitor_email");
	//	
	//	Док = Документы.CRM_Заявка.СоздатьДокумент();
	//	
	//	Док.Дата = Дата;
	//	
	//	ЗаполнитьЗначенияСвойств(Док,СтрРекл);
	//	Док.Тема = НСтр("ru='Заявка по клиенту';en='Request by customer'") + " " + Телефон;
	//	Док.Телефон = Телефон;
	//	Док.ЭлектроннаяПочта = ЭлектроннаяПочта;
	//	Док.Комментарий = ТекстОписание;
	//	Док.Наименование = Наименование;
	//	Док.UTMМетка = Сайт;
	//	Док.ИсточникПолучения = Источники;
	//	
	//	Попытка
	//		Док.Записать();
	//		УстановитьСсылкуВИсточникПервичногоИнтересаЗаписатьДопРеквизит(Док.Ссылка,СтруктураЗаполнения);
	//		
	//	Исключение
	//		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
	//	КонецПопытки;
	//	
	//КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСсылкуВИсточникПервичногоИнтересаЗаписатьДопРеквизит(Сделка, СтруктураДанных) Экспорт
	
	Если СтруктураДанных.Свойство("id") И ЗначениеЗаполнено(СтруктураДанных.id) Тогда
		ПВХИД = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ИДСквознаяАналитика");
		
		Если ТипЗнч(Сделка) = Тип("ДокументСсылка.CRM_Заявка") Тогда
			НаборОбъект = УправлениеСвойствами.НаборСвойствПоИмени("Документ_CRM_Заявка").ПолучитьОбъект();
			СтрокаТЧ = НаборОбъект.ДополнительныеРеквизиты.Найти(ПВХИД, "Свойство");
			Если СтрокаТЧ = Неопределено Тогда
				НоваяСтрока = НаборОбъект.ДополнительныеРеквизиты.Добавить();
				НоваяСтрока.Свойство = ПВХИД;
				НаборОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаСвойствИЗначений = Новый ТаблицаЗначений;
		ТаблицаСвойствИЗначений.Колонки.Добавить("Свойство",
			 Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
		ТаблицаСвойствИЗначений.Колонки.Добавить("Значение");
		
		НоваястрТаблицы = ТаблицаСвойствИЗначений.Добавить();
		НоваястрТаблицы.Свойство = ПВХИД;
		НоваястрТаблицы.Значение = СтруктураДанных.id;
		
		УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(Сделка, ТаблицаСвойствИЗначений);
	КонецЕсли;	
	
	// Записываем данные в служебный РС
	НоваяЗапись = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
	НоваяЗапись.Сделка = Сделка;
	НоваяЗапись.Прочитать();
	
	Если СтруктураДанных.CRM_Сайт = Неопределено Тогда
		Сайт = Справочники.CRM_Сайты.ПустаяСсылка();
	Иначе
		Сайт = СтруктураДанных.CRM_Сайт;
	КонецЕсли;
	
	Источник = СтруктураДанных.ИсточникПолучения;
	
	Если ЗначениеЗаполнено(СтруктураДанных.КаналПервичногоИнтереса) Тогда
		КаналПервичногоИнтереса = СтруктураДанных.КаналПервичногоИнтереса;
	Иначе
		КаналПервичногоИнтереса = Источник.КаналПервичногоИнтереса;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СтруктураДанных.ИсточникПервичногоИнтереса) Тогда
		ИсточникПервичногоИнтереса = СтруктураДанных.ИсточникПервичногоИнтереса;
	Иначе
		ИсточникПервичногоИнтереса = Источник.ИсточникПервичногоИнтереса;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СтруктураДанных.CRM_UTM_source) Тогда
		CRM_UTM_source = СтруктураДанных.CRM_UTM_source;
	Иначе
		CRM_UTM_source = Источник.CRM_UTM_source;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СтруктураДанных.CRM_UTM_medium) Тогда
		CRM_UTM_medium = СтруктураДанных.CRM_UTM_medium;
	Иначе
		CRM_UTM_medium = Источник.CRM_UTM_medium;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СтруктураДанных.CRM_UTM_pos) Тогда
		CRM_UTM_pos = СтруктураДанных.CRM_UTM_pos;
	Иначе
		CRM_UTM_pos = Источник.CRM_UTM_pos;
	КонецЕсли;	
	
	Если Не новаяЗапись.Выбран() Тогда 
		новаяЗапись.Сделка         				= Сделка;
		новаяЗапись.Период						= НачалоДня(Сделка.Дата);
		новаяЗапись.КаналПервичногоИнтереса		= КаналПервичногоИнтереса;
		новаяЗапись.ИсточникПервичногоИнтереса	= ИсточникПервичногоИнтереса;
		новаяЗапись.CRM_Сайт 					= Сайт;
		новаяЗапись.CRM_UTM_source				= CRM_UTM_source;
		новаяЗапись.CRM_UTM_medium				= CRM_UTM_medium;
		новаяЗапись.CRM_UTM_pos					= CRM_UTM_pos;
		новаяЗапись.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеЗаявокИзЗвонкаComagic(ТелоЗапроса, Токен, Источники)
	
	ПараметрыОператораКоллтрекинга = сфпСофтФонПроСервер.сфпПараметрыОператораКоллтрекинга(Источники.Сценарий);
	ИмяСервера = ПараметрыОператораКоллтрекинга.ДоменDataAPI;
	ОтносительныйURL = ПараметрыОператораКоллтрекинга.ОтносительныйURLDataAPI;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	HttpЗапрос = Новый HTTPЗапрос(ОтносительныйURL, Заголовки);
	HttpЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	имяВыходногоФайла = ПолучитьИмяВременногоФайла();
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	HttpСоединение = Новый HTTPСоединение(ИмяСервера, , , , Прокси, 60, Новый ЗащищенноеСоединениеOpenSSL);
	HttpСоединение.ОтправитьДляОбработки(HttpЗапрос, имяВыходногоФайла);
	
	текстовыйДокумент = Новый ТекстовыйДокумент;
	текстовыйДокумент.Прочитать(имяВыходногоФайла);
	ОтветЗначение = текстовыйДокумент.ПолучитьТекст();
	
	Результат = jsonПрочитать(ОтветЗначение);
	
	УдалитьФайлы(имяВыходногоФайла);
	
	Массив = Результат.Получить("result").Получить("data");
	
	СформироватьЗаявкиПоДаннымИзЗвонкаComagic(Массив, Источники);
	
КонецПроцедуры

Процедура СформироватьЗаявкиПоДаннымИзЗвонкаComagic(Массив, Источники)
	
	Для Каждого Стр Из Массив Цикл
		
		СтруктураЗаполнения = Новый Структура;
		
		Ид = СтрЗаменить(Стр.Получить("id"), Символы.НПП, "");
		
		Если ДокументНайденПоИД(ИД) Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаСтр = Стр.Получить("finish_time");
		ДатаСтр = СтрЗаменить(ДатаСтр, "-", "");
		ДатаСтр = СтрЗаменить(ДатаСтр, ":", "");
		ДатаСтр = СтрЗаменить(ДатаСтр, " ", "");
		
		Дата = Дата(ДатаСтр);
		
		НаименованиеРеклКампания 	= Стр.Получить("campaign_name");
		ИДРекламнаяКомпания 		= СтрЗаменить(Стр.Получить("campaign_id"), Символы.НПП, "");
		СайтДомен					= Стр.Получить("site_domain_name");
		СайтДомен 					= СтрЗаменить(СайтДомен, "https://", "");
		СайтДомен 					= СтрЗаменить(СайтДомен, "http://", "");
		
		СайтИД						= СтрЗаменить(Стр.Получить("site_id"), Символы.НПП, "");
		КаналПривлечения			= СтрЗаменить(Стр.Получить("channel"), Символы.НПП, "");
		
		СтруктураСайт = Новый Структура;
		СтруктураСайт.Вставить("id", СайтИД);
		СтруктураСайт.Вставить("Наименование", СайтДомен);
		СтруктураСайт.Вставить("domain", СайтДомен);
		
		Сайт = ЗаписатьИнформациюПоСайтам(СтруктураСайт);
		
		ДанныеКампании = Новый Структура("Идентификатор,Наименование", ИДРекламнаяКомпания, НаименованиеРеклКампания);
		СтрРекл = ПолучитьРекламнуюКампаниюПоИД(ДанныеКампании, КаналПривлечения);
		
		Телефон = Стр.Получить("contact_phone_number");
		
		СтруктураЗаполнения = Новый Структура;
		
		СтруктураЗаполнения.Вставить("id", Ид);
		СтруктураЗаполнения.Вставить("CRM_Сайт", Сайт);
		СтруктураЗаполнения.Вставить("КаналПервичногоИнтереса", СтрРекл.КаналПервичногоИнтереса);
		СтруктураЗаполнения.Вставить("ИсточникПервичногоИнтереса", СтрРекл.ИсточникПервичногоИнтереса);
		СтруктураЗаполнения.Вставить("CRM_UTM_source", "");
		СтруктураЗаполнения.Вставить("CRM_UTM_medium", "");
		СтруктураЗаполнения.Вставить("CRM_UTM_pos", "");
		СтруктураЗаполнения.Вставить("ИсточникПолучения", Источники);
		
		ТекстОписание = "visitor_city: " + Стр.Получить("visitor_city") + " 
						|site_domain_name: "  + Стр.Получить("site_domain_name") + " 
						|visitor_device: "  + Стр.Получить("visitor_device") + " 
						|channel: "  + Стр.Получить("channel") + " 
						|source: "  + Стр.Получить("source");
		
		Док = Документы.CRM_Заявка.СоздатьДокумент();
		
		СтруктураЗаполнения.Вставить("Дата", 	Дата);
		СтруктураЗаполнения.Вставить("Телефон",	Телефон);
		СтруктураЗаполнения.Вставить("Тема",	НСтр("ru='Заявка по клиенту';en='Request by customer'") + " " + Телефон);
		
		ЗаполнитьЗначенияСвойств(Док, СтруктураЗаполнения);
		Док.Комментарий = ТекстОписание;
		
		Документы.CRM_Заявка.ЗаполнитьКонтактЗаявки(Док);
		Справочники.CRM_ПравилаОбработкиОбращений.ПрименитьПравило(Док);
		Попытка
			Док.Записать();
			УстановитьСсылкуВИсточникПервичногоИнтересаЗаписатьДопРеквизит(Док.Ссылка, СтруктураЗаполнения);
			Справочники.CRM_ПравилаОбработкиОбращений.ОбработатьОбращение(Док);
			
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПреобразоватьКаналПривлечения(Канал)
	
	Если Канал = "organic" Тогда
		
		Наименование = "Переходы из поисковых систем";
		
	ИначеЕсли Канал = "referral" ИЛИ Канал = "link" Тогда
		
		Наименование = "Переходы по ссылкам на сайт";
		
	ИначеЕсли Канал = "ad" ИЛИ Канал = "paid" ИЛИ Канал = "cpc" Тогда 
		
		Наименование = "Переходы по рекламе";
		
	ИначеЕсли Канал = "internal" Тогда
		Наименование = "Внутренние переходы";
		
	ИначеЕсли Канал = "direct" ИЛИ Канал = "ya_direct" ИЛИ Канал = "Yandex-Direct" Тогда
		Наименование = "Прямые заходы";
		
	ИначеЕсли Канал = "social" Тогда
		Наименование = "Переходы из социальных сетей";
		
	ИначеЕсли  Канал = "CPM" Тогда
		Наименование = "Цена за клик";
		
	Иначе
		Наименование = "Неопределено";
	КонецЕсли;	
	
	Возврат Наименование;
	
КонецФункции

Функция ПолучитьРекламнуюКампаниюПоИД(ДанныеКампании, КаналПривлечения, Структура = Неопределено) Экспорт 
	
	Возврат CRM_СистемаСквознойАналитикиСлужебный.ПолучитьРекламнуюКампаниюПоИД(ДанныеКампании,
		 КаналПривлечения,
		 Структура);
	
КонецФункции

Функция ПолучитьСтрокуПараметры(Звонок, access_token)
	
	ЗаписьСон = Новый ЗаписьJSON;
	ЗаписьСон.УстановитьСтроку();
	
	ЗаписьСон.ЗаписатьНачалоОбъекта();
	ЗаписьСон.ЗаписатьИмяСвойства("jsonrpc");
	ЗаписьСон.ЗаписатьЗначение("2.0");
	
	ЗаписьСон.ЗаписатьИмяСвойства("id");
	ЗаписьСон.ЗаписатьЗначение("number");
	
	ЗаписьСон.ЗаписатьИмяСвойства("method");
	Если Звонок Тогда
		ЗаписьСон.ЗаписатьЗначение("get.calls_report");
	Иначе
		ЗаписьСон.ЗаписатьЗначение("get.offline_messages_report");
	КонецЕсли;
	
	ЗаписьСон.ЗаписатьИмяСвойства("params");
	
	ЗаписьСон.ЗаписатьНачалоОбъекта();
	
	ЗаписьСон.ЗаписатьИмяСвойства("access_token");
	ЗаписьСон.ЗаписатьЗначение(access_token);
	
	ЗаписьСон.ЗаписатьИмяСвойства("limit");
	ЗаписьСон.ЗаписатьЗначение(10000);
	
	ЗаписьСон.ЗаписатьИмяСвойства("date_from");
	ЗаписьСон.ЗаписатьЗначение(Формат(НачалоДня(ТекущаяДатаСеанса() - 86400), "ДФ='yyyy-MM-dd HH:mm:ss'"));
	
	ЗаписьСон.ЗаписатьИмяСвойства("date_till");
	ЗаписьСон.ЗаписатьЗначение(Формат(КонецДня(ТекущаяДатаСеанса()), "ДФ='yyyy-MM-dd HH:mm:ss'"));
	
	ЗаписьСон.ЗаписатьИмяСвойства("fields");
	ЗаписьСон.ЗаписатьНачалоМассива();
	
	Если Звонок Тогда
		
		ЗаписьСон.ЗаписатьЗначение("id");
		ЗаписьСон.ЗаписатьЗначение("virtual_phone_number");
		ЗаписьСон.ЗаписатьЗначение("contact_phone_number");
		ЗаписьСон.ЗаписатьЗначение("source");
		ЗаписьСон.ЗаписатьЗначение("channel");
		ЗаписьСон.ЗаписатьЗначение("finish_time");
		ЗаписьСон.ЗаписатьЗначение("visitor_city");
		ЗаписьСон.ЗаписатьЗначение("visitor_device");
		ЗаписьСон.ЗаписатьЗначение("campaign_name");
		ЗаписьСон.ЗаписатьЗначение("campaign_id");
		ЗаписьСон.ЗаписатьЗначение("site_domain_name");
		ЗаписьСон.ЗаписатьЗначение("site_id");
		ЗаписьСон.ЗаписатьЗначение("total_duration");
		ЗаписьСон.ЗаписатьКонецМассива();
		
		ЗаписьСон.ЗаписатьИмяСвойства("filter");
		ЗаписьСон.ЗаписатьНачалоОбъекта();
		
		ЗаписьСон.ЗаписатьИмяСвойства("field");
		ЗаписьСон.ЗаписатьЗначение("direction");
		
		ЗаписьСон.ЗаписатьИмяСвойства("operator");
		ЗаписьСон.ЗаписатьЗначение("=");
		
		ЗаписьСон.ЗаписатьИмяСвойства("value");
		ЗаписьСон.ЗаписатьЗначение("in");
		
		ЗаписьСон.ЗаписатьКонецОбъекта();
		
	Иначе
		
		ЗаписьСон.ЗаписатьЗначение("id");
		ЗаписьСон.ЗаписатьЗначение("date_time");
		ЗаписьСон.ЗаписатьЗначение("text");
		ЗаписьСон.ЗаписатьЗначение("status");
		ЗаписьСон.ЗаписатьЗначение("form_type");
		ЗаписьСон.ЗаписатьЗначение("channel");
		ЗаписьСон.ЗаписатьЗначение("visitor_phone_number");
		ЗаписьСон.ЗаписатьЗначение("visitor_email");
		ЗаписьСон.ЗаписатьЗначение("visitor_name");
		ЗаписьСон.ЗаписатьЗначение("visitor_id");
		ЗаписьСон.ЗаписатьЗначение("visitor_type");
		ЗаписьСон.ЗаписатьЗначение("visitor_city");
		ЗаписьСон.ЗаписатьЗначение("visitor_device");
		ЗаписьСон.ЗаписатьЗначение("campaign_name");
		ЗаписьСон.ЗаписатьЗначение("campaign_id");
		ЗаписьСон.ЗаписатьЗначение("site_domain_name");
		ЗаписьСон.ЗаписатьЗначение("site_id");
		
		ЗаписьСон.ЗаписатьКонецМассива();
		
		ЗаписьСон.ЗаписатьИмяСвойства("filter");
		ЗаписьСон.ЗаписатьНачалоОбъекта();
		
		ЗаписьСон.ЗаписатьИмяСвойства("field");
		ЗаписьСон.ЗаписатьЗначение("status");
		
		ЗаписьСон.ЗаписатьИмяСвойства("operator");
		ЗаписьСон.ЗаписатьЗначение("=");
		
		ЗаписьСон.ЗаписатьИмяСвойства("value");
		ЗаписьСон.ЗаписатьЗначение("not_processed");
		
		ЗаписьСон.ЗаписатьКонецОбъекта();
		
	КонецЕсли;
	
	ЗаписьСон.ЗаписатьКонецОбъекта();
	
	ЗаписьСон.ЗаписатьКонецОбъекта();
	
	СтрСон = ЗаписьСон.Закрыть();
	
	Возврат СтрСон;
	
КонецФункции

Функция ДокументНайденПоИД(ИД) Экспорт
	
	ПВХИД = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ИДСквознаяАналитика");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка
	|ИЗ Документ.CRM_Заявка.ДополнительныеРеквизиты
	|ГДЕ Свойство = &Свойство И Значение = &Значение");
	Запрос.УстановитьПараметр("Значение", ИД);
	Запрос.УстановитьПараметр("Свойство", ПВХИД);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ДокументНайденПоОснованию(Основание)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка
	|ИЗ Документ.CRM_Заявка
	|ГДЕ ДокументОснование = &Основание");
	Запрос.УстановитьПараметр("Основание", Основание);

	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ТелефонныйЗвонокНайденПоИД(ИД, Звонок = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТелефонныйЗвонок.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
	|ГДЕ
	|	ТелефонныйЗвонок.сфпИдентификаторЗвонка = &сфпИдентификаторЗвонка";
	
	Запрос.УстановитьПараметр("сфпИдентификаторЗвонка", ИД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Звонок = Выборка.Ссылка;
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

Функция CoMagic_СформироватьJSON(Токен, ИмяМетода, ПараметрыЗапроса)
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("jsonrpc");
	ЗаписьJSON.ЗаписатьЗначение("2.0");
	ЗаписьJSON.ЗаписатьИмяСвойства("id");
	ЗаписьJSON.ЗаписатьЗначение("number");
	ЗаписьJSON.ЗаписатьИмяСвойства("method");
	ЗаписьJSON.ЗаписатьЗначение(ИмяМетода);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("params");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("access_token");
	ЗаписьJSON.ЗаписатьЗначение(Токен);
	
	Для Каждого ТекПараметр Из ПараметрыЗапроса Цикл
		ЗаписьJSON.ЗаписатьИмяСвойства(ТекПараметр.Ключ);
		ЗаписьJSON.ЗаписатьЗначение(ТекПараметр.Значение);
	КонецЦикла;	
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция CoMagic_ВыполнитьЗапрос(JSON)
	
	ПараметрыОператораКоллтрекинга = сфпСофтФонПроСервер.сфпПараметрыОператораКоллтрекинга();
	ИмяСервера = ПараметрыОператораКоллтрекинга.ДоменDataAPI;
	ОтносительныйURL = ПараметрыОператораКоллтрекинга.ОтносительныйURLDataAPI;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	HTTPЗапрос = Новый HTTPЗапрос(ОтносительныйURL, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(JSON);
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(ИмяСервера, , , , Прокси, 60, Новый ЗащищенноеСоединениеOpenSSL);
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		ВызватьИсключение НСтр("ru='Проблема с получением данных CoMagic'");
	КонецЕсли;
	
	РезультатЗапроса = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(РезультатЗапроса);
	РезультатЗапросаJSON = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат РезультатЗапросаJSON;
	
КонецФункции

Функция CoMagic_ПолучитьСписокТэгов(Токен)
	
	ПараметрыЗапроса = Новый Структура();
	
	JSON = CoMagic_СформироватьJSON(Токен, "get.tags", ПараметрыЗапроса);
	
	Рез = CoMagic_ВыполнитьЗапрос(JSON);
	
	СписокТэгов = Новый Соответствие();
	
	Для Каждого ТекЭлемент Из Рез.result.data Цикл
		СписокТэгов.Вставить(ТекЭлемент.id, ТекЭлемент.name);
	КонецЦикла;
	
	Возврат СписокТэгов;
	
КонецФункции

Функция CoMagic_ПроверитьТэг(Токен, ИмяТэга)
	
	ПараметрыЗапроса = Новый Структура("name", ИмяТэга);
	
	JSON = CoMagic_СформироватьJSON(Токен, "create.tags", ПараметрыЗапроса);
	
	Рез = CoMagic_ВыполнитьЗапрос(JSON);
	
	Возврат Рез.result.data.id;
	
КонецФункции

Процедура CoMagic_ПроставитьТэгОбращению(Токен, ИдентификаторОбращения, ИдентификаторТэга)
	
	ПараметрыЗапроса = Новый Структура("communication_id,communication_type,tag_id",
		 ИдентификаторОбращения, "call",
		 ИдентификаторТэга);
	
	JSON = CoMagic_СформироватьJSON(Токен, "set.tag_communications", ПараметрыЗапроса);
	
	CoMagic_ВыполнитьЗапрос(JSON);

КонецПроцедуры

Процедура CoMagic_ПроставитьТэгПродажаОбращению(Токен, ИдентификаторОбращения, СуммаВыручки)
	
	ПараметрыЗапроса = Новый Структура("communication_id,communication_type,transaction_value,
		|date_time", ИдентификаторОбращения, "call", СуммаВыручки, Формат(ТекущаяДатаСеанса(),
		 "ДФ='yyyy-MM-dd hh:mm:ss'"));
	
	JSON = CoMagic_СформироватьJSON(Токен, "set.tag_sales", ПараметрыЗапроса);
	
	CoMagic_ВыполнитьЗапрос(JSON);

КонецПроцедуры

Процедура CoMagic_СнятьТэгОбращения(Токен, ИдентификаторОбращения, ИдентификаторТэга)
	
	ПараметрыЗапроса = Новый Структура("communication_id,communication_type,tag_id",
		 ИдентификаторОбращения, "call",
		 ИдентификаторТэга);
	
	JSON = CoMagic_СформироватьJSON(Токен, "unset.tag_communications", ПараметрыЗапроса);
	
	CoMagic_ВыполнитьЗапрос(JSON);

КонецПроцедуры

Процедура CoMagic_ДописатьТегиОбращений(Токен, ТаблицаЗаявок, date_from)
	
	ЗаписьСон = Новый ЗаписьJSON;
	ЗаписьСон.УстановитьСтроку();
	
	ЗаписьСон.ЗаписатьНачалоОбъекта();
		ЗаписьСон.ЗаписатьИмяСвойства("jsonrpc");
		ЗаписьСон.ЗаписатьЗначение("2.0");
		
		ЗаписьСон.ЗаписатьИмяСвойства("id");
		ЗаписьСон.ЗаписатьЗначение("number");
		
		ЗаписьСон.ЗаписатьИмяСвойства("method");
		
		ЗаписьСон.ЗаписатьЗначение("get.communications_report");

		ЗаписьСон.ЗаписатьИмяСвойства("params");
		ЗаписьСон.ЗаписатьНачалоОбъекта();
		
			ЗаписьСон.ЗаписатьИмяСвойства("access_token");
			ЗаписьСон.ЗаписатьЗначение(Токен);
			
			ЗаписьСон.ЗаписатьИмяСвойства("limit");
			ЗаписьСон.ЗаписатьЗначение(10000);
			
			ЗаписьСон.ЗаписатьИмяСвойства("date_from");
			ЗаписьСон.ЗаписатьЗначение(Формат(date_from - 24 * 60 * 60, "ДФ='yyyy-MM-dd HH:mm:ss'"));
			
			ЗаписьСон.ЗаписатьИмяСвойства("date_till");
			ЗаписьСон.ЗаписатьЗначение(Формат(КонецДня(ТекущаяДатаСеанса()), "ДФ='yyyy-MM-dd HH:mm:ss'"));
			
			ЗаписьСон.ЗаписатьИмяСвойства("fields");
			ЗаписьСон.ЗаписатьНачалоМассива();
				
			ЗаписьСон.ЗаписатьЗначение("id");
			ЗаписьСон.ЗаписатьЗначение("sale_cost");
			ЗаписьСон.ЗаписатьЗначение("tags");
			
			ЗаписьСон.ЗаписатьКонецМассива();
			
			ЗаписьСон.ЗаписатьИмяСвойства("filter");
			ЗаписьСон.ЗаписатьНачалоОбъекта();
			
				ЗаписьСон.ЗаписатьИмяСвойства("field");
				ЗаписьСон.ЗаписатьЗначение("id");
				
				ЗаписьСон.ЗаписатьИмяСвойства("operator");
				ЗаписьСон.ЗаписатьЗначение("in");
				
				ЗаписьСон.ЗаписатьИмяСвойства("value");
				ЗаписьСон.ЗаписатьНачалоМассива();
				
				Для каждого Строка Из ТаблицаЗаявок Цикл
					ЗаписьСон.ЗаписатьЗначение(Строка.ИдентификаторЗаявки);
				КонецЦикла;
				ЗаписьСон.ЗаписатьКонецМассива();
			
			ЗаписьСон.ЗаписатьКонецОбъекта();
		
		ЗаписьСон.ЗаписатьКонецОбъекта();
	
	ЗаписьСон.ЗаписатьКонецОбъекта();
	
	JSON = ЗаписьСон.Закрыть();
	
	РезультатЗапросаВUIS = CoMagic_ВыполнитьЗапрос(JSON);
	
	МассивОбращений = РезультатЗапросаВUIS.result.data;
	
	Для каждого Обращение Из МассивОбращений Цикл
		Строка = ТаблицаЗаявок.Найти(Обращение.id, "ИдентификаторЗаявки");
		Если ЗначениеЗаполнено(Строка) Тогда
			Строка.СтоимостьUIS = Обращение.sale_cost;
			Если ЗначениеЗаполнено(Обращение.tags) Тогда
				Для каждого Тег Из Обращение.tags Цикл
					Если Тег.tag_name = "В работе" Тогда
						Строка.ЕстьТегВРаботе = Истина;
					ИначеЕсли Тег.tag_name = "Отмененные" Тогда
						Строка.ЕстьТегОтмененные = Истина;
					ИначеЕсли Тег.tag_name = "Продажа" Тогда
						Строка.ЕстьТегПродажа = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Процедура CoMagic_ОтправитьИзменения(Токен)
	
	СписокТэгов = CoMagic_ПолучитьСписокТэгов(Токен);
	
	ИдентификаторТэга_ВРаботе 	 = Неопределено;
	ИдентификаторТэга_Отмененные = Неопределено;
	ИдентификаторТэга_Продажа 	 = Неопределено;
	
	Для Каждого ТекЭлемент Из СписокТэгов Цикл
		Если ТекЭлемент.Значение = "В работе" Тогда
			ИдентификаторТэга_ВРаботе = ТекЭлемент.Ключ;
			
		ИначеЕсли ТекЭлемент.Значение = "Отмененные" Тогда
			ИдентификаторТэга_Отмененные = ТекЭлемент.Ключ;
			
		ИначеЕсли ТекЭлемент.Значение = "Продажа" Тогда
			ИдентификаторТэга_Продажа = ТекЭлемент.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторТэга_ВРаботе = Неопределено Тогда
		ИдентификаторТэга_ВРаботе = CoMagic_ПроверитьТэг(Токен, "В работе");
	КонецЕсли;
	
	Если ИдентификаторТэга_Отмененные = Неопределено Тогда
		ИдентификаторТэга_Отмененные = CoMagic_ПроверитьТэг(Токен, "Отмененные");
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ИзмененныеЗаявки.ДатаИзменения КАК ДатаИзменения,
	                      |	ИзмененныеЗаявки.Заявка.Дата КАК Дата,
	                      |	ИзмененныеЗаявки.Статус КАК Статус,
	                      |	ИзмененныеЗаявки.Стоимость КАК Стоимость,
	                      |	ЕСТЬNULL(ДопРеквизиты.Значение, НЕОПРЕДЕЛЕНО) КАК ИдентификаторЗаявки
	                      |ИЗ
	                      |	РегистрСведений.CRM_СквознаяАналитикаИзмененныеЗаявки КАК ИзмененныеЗаявки
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Заявка.ДополнительныеРеквизиты КАК ДопРеквизиты
	                      |		ПО (ДопРеквизиты.Ссылка = ИзмененныеЗаявки.Заявка)
	                      |			И (ДопРеквизиты.Свойство = &ПВХИД)
	                      |ГДЕ
	                      |	ИзмененныеЗаявки.ИсточникАналитики.Сценарий = &ОператорКоллтрекинга
	                      |	И ИзмененныеЗаявки.ДатаИзменения >= &ДатаИзменения
	                      |	И НЕ ДопРеквизиты.Значение ЕСТЬ NULL
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ДатаИзменения УБЫВ
	                      |ИТОГИ ПО
	                      |	Заявка");
	
	ПВХИД = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ИДСквознаяАналитика");
	Запрос.УстановитьПараметр("ПВХИД", ПВХИД);
	Запрос.УстановитьПараметр("ДатаИзменения", НачалоДня(ТекущаяДатаСеанса()) - 24 * 60 * 60 * 3);
	Запрос.УстановитьПараметр("ОператорКоллтрекинга", Константы.сфпОператорКоллтрекинга.Получить());
		
	ВыборкаЗаявокИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаЗаявок = Новый ТаблицаЗначений;
	ТаблицаЗаявок.Колонки.Добавить("ДатаИзменения");
	ТаблицаЗаявок.Колонки.Добавить("Дата");
	ТаблицаЗаявок.Колонки.Добавить("Статус");
	ТаблицаЗаявок.Колонки.Добавить("Стоимость");
	ТаблицаЗаявок.Колонки.Добавить("ИдентификаторЗаявки", Новый ОписаниеТипов("Число"));
	ТаблицаЗаявок.Колонки.Добавить("СтоимостьUIS");
	ТаблицаЗаявок.Колонки.Добавить("ЕстьТегВРаботе", Новый ОписаниеТипов("Булево"));
	ТаблицаЗаявок.Колонки.Добавить("ЕстьТегОтмененные", Новый ОписаниеТипов("Булево"));
	ТаблицаЗаявок.Колонки.Добавить("ЕстьТегПродажа", Новый ОписаниеТипов("Булево"));
	
	// Определим минимальную дату для запроса тегов обращений
	date_from = ТекущаяДатаСеанса();
	
	Пока ВыборкаЗаявокИтоги.Следующий() Цикл
		ВыборкаЗаявок = ВыборкаЗаявокИтоги.Выбрать();
		ВыборкаЗаявок.Следующий();
		
		Если ЗначениеЗаполнено(ВыборкаЗаявок.ИдентификаторЗаявки) Тогда
			Строка = ТаблицаЗаявок.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, ВыборкаЗаявок);
			
			Если date_from > ВыборкаЗаявок.Дата Тогда
				date_from = НачалоДня(ВыборкаЗаявок.Дата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Допишем в таблицу теги и суммы обращений
	CoMagic_ДописатьТегиОбращений(Токен, ТаблицаЗаявок, date_from);
	
	Для каждого Строка Из ТаблицаЗаявок Цикл
	
		ИдентификаторЗаявки = Строка.ИдентификаторЗаявки;
		
		Если Строка.Статус = "Paid" Тогда
			
			Если Строка.ЕстьТегВРаботе Тогда
				CoMagic_СнятьТэгОбращения(Токен, ИдентификаторЗаявки, ИдентификаторТэга_ВРаботе);
			КонецЕсли;
			
			Если Строка.ЕстьТегОтмененные Тогда
				CoMagic_СнятьТэгОбращения(Токен, ИдентификаторЗаявки, ИдентификаторТэга_Отмененные);
			КонецЕсли;

			Если НЕ Строка.ЕстьТегПродажа Тогда
				CoMagic_ПроставитьТэгПродажаОбращению(Токен, ИдентификаторЗаявки, Строка.Стоимость);
				
			ИначеЕсли Строка.ЕстьТегПродажа И Строка.Стоимость <> Строка.СтоимостьUIS Тогда
				CoMagic_СнятьТэгОбращения(Токен, ИдентификаторЗаявки, ИдентификаторТэга_Продажа);
				CoMagic_ПроставитьТэгПродажаОбращению(Токен, ИдентификаторЗаявки, Строка.Стоимость);
			КонецЕсли;
			
		ИначеЕсли Строка.Статус = "Canceled" Тогда
				Если Строка.ЕстьТегВРаботе Тогда
					CoMagic_СнятьТэгОбращения(Токен, ИдентификаторЗаявки, ИдентификаторТэга_ВРаботе);
				КонецЕсли;
				
				Если Строка.ЕстьТегПродажа Тогда
					CoMagic_СнятьТэгОбращения(Токен, ИдентификаторЗаявки, ИдентификаторТэга_Продажа);
				КонецЕсли;
				
				Если НЕ Строка.ЕстьТегОтмененные Тогда
					CoMagic_ПроставитьТэгОбращению(Токен, ИдентификаторЗаявки, ИдентификаторТэга_Отмененные);
				КонецЕсли;
				
		ИначеЕсли Строка.Статус = "InWork" Тогда
				Если Строка.ЕстьТегОтмененные Тогда
					CoMagic_СнятьТэгОбращения(Токен, ИдентификаторЗаявки, ИдентификаторТэга_Отмененные);
				КонецЕсли;
				
				Если Строка.ЕстьТегПродажа Тогда
					CoMagic_СнятьТэгОбращения(Токен, ИдентификаторЗаявки, ИдентификаторТэга_Продажа);
				КонецЕсли;
				
				Если НЕ Строка.ЕстьТегВРаботе Тогда
					CoMagic_ПроставитьТэгОбращению(Токен, ИдентификаторЗаявки, ИдентификаторТэга_ВРаботе);
				КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДополнительныеДанные

Функция ПолучитьБизнесРегионПоНаименованию(Наименование)
	
	Возврат CRM_СистемаСквознойАналитикиСлужебный.ПолучитьБизнесРегионПоНаименованию(Наименование);
	
КонецФункции

Функция ПолучитьДанныеПоКаналамРекламныхВзаимодействий(Наименование)
	
	Возврат CRM_СистемаСквознойАналитикиСлужебный.ПолучитьДанныеПоКаналамРекламныхВзаимодействий(Наименование);
	
КонецФункции
 
Функция ПолучитьМаркетинговоеМероприятиеПоИД(ИД, ПВХ)
	
	Возврат CRM_СистемаСквознойАналитикиСлужебный.ПолучитьМаркетинговоеМероприятиеПоИД(ИД, ПВХ);
	
КонецФункции

Функция СоздатьЗаписатьМаркетинговоеМероприятие(Структура) Экспорт
	
	Возврат CRM_СистемаСквознойАналитикиСлужебный.СоздатьЗаписатьМаркетинговоеМероприятие(Структура);
	
КонецФункции

Процедура ОбновитьМаркетинговоеМероприятие(МаркетинговоеМероприятие, ДанныеКампании) Экспорт
	
	CRM_СистемаСквознойАналитикиСлужебный.ОбновитьМаркетинговоеМероприятие(МаркетинговоеМероприятие, ДанныеКампании);
	
КонецПроцедуры

Функция СоздатьЗаписатьОбъявлениеРекламныхКампаний(Структура)
	
	Возврат CRM_СистемаСквознойАналитикиСлужебный.СоздатьЗаписатьОбъявлениеРекламныхКампаний(Структура);
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаGoogle

Процедура СформироватьСписокСчетчиковGoogle(ОтветСервера, СписокСчетчиковГугл, СтруктураДанных)
	
	Данные = ОтветСервера.Получить("items");
	
	Для Каждого Стр Из Данные Цикл
		
		МассивКлючей = Стр.Получить("webProperties");
		
		Для Каждого ЭлКлюч Из МассивКлючей Цикл
			
			ИмяСайта = ЭлКлюч.Получить("name");
			ИмяСайта = СтрЗаменить(ИмяСайта, "https://", "");
			ИмяСайта = СтрЗаменить(ИмяСайта, "http://", "");
			
			МассивДоступов = ЭлКлюч.Получить("profiles");
			
			Структура = Новый Структура;
			
			Структура.Вставить("Наименование", ИмяСайта);
			Структура.Вставить("domain", ИмяСайта);
			Структура.Вставить("ИсточникПолучения", СтруктураДанных.ИсточникиКампаний);
			
			Для Каждого Ключ Из МассивДоступов Цикл
				
				КлючСайта = СтрЗаменить(Ключ.Получить("id"), Символы.НПП, "");
				Структура.Вставить("id", КлючСайта);
				Сайт = ЗаписатьИнформациюПоСайтам(Структура);
				СтрСайт = Новый Структура;
				СтрСайт.Вставить("id", КлючСайта);
				СтрСайт.Вставить("Сайт", Сайт);
				СписокСчетчиковГугл.Добавить(СтрСайт);
				 
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьJsonСтруктуруСУчетомДозагрузкиКампаний(СтруктураДанных) 
	
	СтруктураТаблицДляЗагрузки = Новый Структура;
	
	ТаблицаСопоставленияГруппировок = Новый ТаблицаЗначений;
	ТаблицаСопоставленияГруппировок.Колонки.Добавить("Параметр");
	ТаблицаСопоставленияГруппировок.Колонки.Добавить("Индекс");
	ТаблицаСопоставленияГруппировок.Колонки.Добавить("ТипЗначения");
	Счетчик = 0;
	
	ТаблицаСопоставленияМетрик = Новый ТаблицаЗначений;
	ТаблицаСопоставленияМетрик.Колонки.Добавить("Параметр");
	ТаблицаСопоставленияМетрик.Колонки.Добавить("Индекс");

	Если НЕ СтруктураДанных.ЗагружатьРекламнуюКампанию Тогда
		
		// Дата по умолчанию
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "Период";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "Дата";
		Счетчик = Счетчик + 1;
		
	КонецЕсли;
	Данные 		   = Новый Структура;
	dimensions 	   = Новый Массив;
	metrics 	   = Новый Массив;
	reportRequests = Новый Массив;
	dateRanges 	   = Новый Массив;
	orderBys 	   = Новый Массив;
	
	СтрОбщая = Новый Структура;
	
	// Счетчики
	Структура = Новый Структура;
	СтрОбщая.Вставить("viewId", СтруктураДанных.СтрСчетчик.id);
	Структура = Новый Структура;
	Если СтруктураДанных.ДатаЗагрузки = Неопределено Тогда
		Структура.Вставить("startDate", Строка(Формат(ТекущаяДатаСеанса() - 86400, "ДФ=yyyy-MM-dd")));
		Структура.Вставить("endDate", Строка(Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-dd")));
	Иначе
		Структура.Вставить("startDate", Строка(Формат(СтруктураДанных.ДатаЗагрузки, "ДФ=yyyy-MM-dd")));
		Структура.Вставить("endDate", Строка(Формат(СтруктураДанных.ДатаЗагрузки, "ДФ=yyyy-MM-dd")));
	КонецЕсли;
	
	dateRanges.Добавить(Структура);
	
	СтрОбщая.Вставить("dateRanges", dateRanges);
	
	// Dimensions - группировки
	Если СтруктураДанных.ЗагружатьРекламнуюКампанию Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("name", "ga:adwordsCampaignID");
		dimensions.Добавить(Структура);
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "РекламнаяКампанияИД";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "CRM_ОбъявленияРекламныхКампанийИД";
		Счетчик = Счетчик + 1;
		
		Структура = Новый Структура;
		Структура.Вставить("name", "ga:campaign");
		dimensions.Добавить(Структура);
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "РекламнаяКампания";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "CRM_ОбъявленияРекламныхКампаний";
		Счетчик = Счетчик + 1;
		
		Структура = Новый Структура;
		Структура.Вставить("name", "ga:adwordsAdGroupID");
		dimensions.Добавить(Структура);
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "РекламнаяКампанияИДКампания";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "CRM_ОбъявленияРекламныхКампанийИДКампания";
		Счетчик = Счетчик + 1;
		
		Структура = Новый Структура;
		Структура.Вставить("name", "ga:adGroup");
		dimensions.Добавить(Структура);
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "РекламнаяКампания";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "CRM_ОбъявленияРекламныхКампаний";
		Счетчик = Счетчик + 1;
		
		Структура = Новый Структура;
		Структура.Вставить("name", "ga:keyword");
		dimensions.Добавить(Структура);
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "РекламнаяКампания";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "CRM_ОбъявленияРекламныхКампаний";
		Счетчик = Счетчик + 1;
		
		СтрОбщая.Вставить("dimensions", dimensions);
		
		Счетчик = 0;
		
		// Metrics - Метрики
		Если СтруктураДанных.Визиты Тогда
			
			Структура = Новый Структура;
			Структура.Вставить("expression", "ga:users");
			metrics.Добавить(Структура);
			НоваяСтр = ТаблицаСопоставленияМетрик.Добавить();
			НоваяСтр.Параметр = "Визиты";
			НоваяСтр.Индекс = Счетчик;
			Счетчик = Счетчик + 1;
		КонецЕсли;
		
		СтрОбщая.Вставить("metrics", metrics);
		
		// Заполняем отбор
		dimensionFilterClauses  = Новый Массив;
		filters 				= Новый Массив;
		
		СтруктураФильтра = Новый Структура;
		СтруктураФильтра.Вставить("dimensionName", "ga:adwordsCampaignID");
		СтруктураФильтра.Вставить("not", Истина);
		СтруктураФильтра.Вставить("operator", "EXACT");
		массивИсключений = Новый массив;
		массивИсключений.Добавить("(not set)");
		
		СтруктураФильтра.Вставить("expressions", массивИсключений);
		
		filters.Добавить(СтруктураФильтра);
		
		стрфильтры = Новый Структура;
		стрфильтры.Вставить("filters", filters);
		dimensionFilterClauses.Добавить(стрфильтры);
		
		СтрОбщая.Вставить("dimensions", dimensions);
		
		СтрОбщая.Вставить("dimensionFilterClauses", dimensionFilterClauses);
		
		reportRequests.Добавить(СтрОбщая);
		
		Данные.Вставить("reportRequests", reportRequests);
		
		СтрокаJSON = СформироватьСтрокуJSONИзСтруктуры(Данные);

		СтруктураТаблицДляЗагрузки.Вставить("СтрокаJSON", СтрокаJSON);
		СтруктураТаблицДляЗагрузки.Вставить("ТаблицаСопоставленияГруппировок", ТаблицаСопоставленияГруппировок);
		СтруктураТаблицДляЗагрузки.Вставить("ТаблицаСопоставленияМетрик", ТаблицаСопоставленияМетрик);
		
		Возврат СтруктураТаблицДляЗагрузки;
		
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("name", "ga:date");
	dimensions.Добавить(Структура);
	
	Если СтруктураДанных.География Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("name", "ga:region");
		dimensions.Добавить(Структура);
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "География";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "БизнесРегионы";
		Счетчик = Счетчик + 1;
		
	КонецЕсли;
	
	Если СтруктураДанных.КаналПервичногоИнтереса Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("name", "ga:medium");
		dimensions.Добавить(Структура);
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "КаналПервичногоИнтереса";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "CRM_КаналПервичногоИнтереса";
		Счетчик = Счетчик + 1;
	КонецЕсли;
	
	Если СтруктураДанных.Source Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("name", "ga:Source");
		dimensions.Добавить(Структура);
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "Source";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "Строка";
		Счетчик = Счетчик + 1;
	КонецЕсли;
	
	Если СтруктураДанных.ВремяНаСайте Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("name", "ga:sessionDurationBucket");
		dimensions.Добавить(Структура);
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "ВремяНаСайте";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "CRM_ИнтервалыВремениНаСайте";
		Счетчик = Счетчик + 1;
	КонецЕсли;
	
	Если СтруктураДанных.URL Тогда
		Структура = Новый Структура;
		Структура.Вставить("name", "ga:adDestinationUrl");
		dimensions.Добавить(Структура);
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "URL";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "Строка";
		Счетчик = Счетчик + 1;
	КонецЕсли;
	
	Если СтруктураДанных.РекламнаяКампания Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("name", "ga:adwordsCampaignID");
		dimensions.Добавить(Структура);
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "РекламнаяКампанияИД";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "CRM_ОбъявленияРекламныхКампанийИД";
		Счетчик = Счетчик + 1;
		
		Структура = Новый Структура;
		Структура.Вставить("name", "ga:adwordsAdGroupID");
		dimensions.Добавить(Структура);
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "РекламнаяКампанияИДКампания";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "CRM_ОбъявленияРекламныхКампанийИДКампания";
		Счетчик = Счетчик + 1;
		
	КонецЕсли;
	
	СтрОбщая.Вставить("dimensions", dimensions);
	
	Счетчик = 0;
	
	// Metrics - Метрики
	Если СтруктураДанных.Визиты Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("expression", "ga:users");
		metrics.Добавить(Структура);
		НоваяСтр = ТаблицаСопоставленияМетрик.Добавить();
		НоваяСтр.Параметр = "Визиты";
		НоваяСтр.Индекс = Счетчик;
		Счетчик = Счетчик + 1;
	КонецЕсли;
	
	Если СтруктураДанных.Посетители Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("expression", "ga:newUsers");
		metrics.Добавить(Структура);
		НоваяСтр = ТаблицаСопоставленияМетрик.Добавить();
		НоваяСтр.Параметр = "Посетители";
		НоваяСтр.Индекс = Счетчик;
		Счетчик = Счетчик + 1;
	КонецЕсли;
	
	Если СтруктураДанных.ГлубинаПросмотра Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("expression", "ga:pageviews");
		metrics.Добавить(Структура);
		НоваяСтр = ТаблицаСопоставленияМетрик.Добавить();
		НоваяСтр.Параметр = "ГлубинаПросмотра";
		НоваяСтр.Индекс = Счетчик;
		Счетчик = Счетчик + 1;
	КонецЕсли;
	
	Если СтруктураДанных.Отказы Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("expression", "ga:bounces");
		metrics.Добавить(Структура);
		НоваяСтр = ТаблицаСопоставленияМетрик.Добавить();
		НоваяСтр.Параметр = "Отказы";
		НоваяСтр.Индекс = Счетчик;
		Счетчик = Счетчик + 1;
	КонецЕсли;
	
	СтрОбщая.Вставить("metrics", metrics);
	
	Структура = Новый Структура;
	Структура.Вставить("fieldName", "ga:date");
	
	orderBys.Добавить(Структура);
	
	СтрОбщая.Вставить("orderBys", orderBys);
	
	reportRequests.Добавить(СтрОбщая);
	
	Данные.Вставить("reportRequests", reportRequests);
	
	СтрокаJSON = СформироватьСтрокуJSONИзСтруктуры(Данные);
	
	СтруктураТаблицДляЗагрузки.Вставить("СтрокаJSON", СтрокаJSON);
	СтруктураТаблицДляЗагрузки.Вставить("ТаблицаСопоставленияГруппировок", ТаблицаСопоставленияГруппировок);
	СтруктураТаблицДляЗагрузки.Вставить("ТаблицаСопоставленияМетрик", ТаблицаСопоставленияМетрик);
	
	Возврат СтруктураТаблицДляЗагрузки;
	
КонецФункции

Процедура ПродолжитьВыполнениеЗаданияGoogleAnalytics(СтруктураДанных, ДатаЗагрузки = Неопределено)
	
	СтруктураДанных.Вставить("ДатаЗагрузки", ДатаЗагрузки);
	СтруктураДанных.Вставить("ЗагружатьРекламнуюКампанию", Истина);
	
	Если СтруктураДанных.РекламнаяКампания Тогда
		СтруктураДанных.Вставить("ЗагружатьРекламнуюКампанию", Истина);
		СтруктураТаблиц = ПолучитьJsonСтруктуруСУчетомДозагрузкиКампаний(СтруктураДанных);
	Иначе
		СтруктураДанных.Вставить("ЗагружатьРекламнуюКампанию", Ложь);
		СтруктураТаблиц = ПолучитьJsonСтруктуруСУчетомДозагрузкиКампаний(СтруктураДанных);
	КонецЕсли;
	
	ОтветСервера = ПолучитьОтветСервераGoogle(СтруктураТаблиц, СтруктураДанных);
	
	Попытка
		Результат = ОтветСервера.Получить("reports")[0];
	Исключение
		ЗаписьЖурналаРегистрации("Загрузка данных Google analitycs", УровеньЖурналаРегистрации.Ошибка, , ,
			 НСтр("ru='Ошибка при получении набора данных';
			|en='Error when getting set of data'"));
		Возврат;
	КонецПопытки;
	
	СайтСсылка = СтруктураДанных.СтрСчетчик.Сайт;
	
	Если СтруктураДанных.ЗагружатьРекламнуюКампанию Тогда
		ОбработатьИЗаписатьРекламныеКампании(Результат, СтруктураТаблиц, СтруктураДанных);
		СтруктураДанных.ЗагружатьРекламнуюКампанию = Ложь;
		СтруктураТаблиц = ПолучитьJsonСтруктуруСУчетомДозагрузкиКампаний(СтруктураДанных);
		ОтветСервера = ПолучитьОтветСервераGoogle(СтруктураТаблиц, СтруктураДанных);
		
		Попытка
			Результат = ОтветСервера.Получить("reports")[0];
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных Google analitycs';
				|en='Data import Google analitycs'"), УровеньЖурналаРегистрации.Ошибка, , ,
				 НСтр("ru='Ошибка при получении набора данных'"));
			Возврат;
		КонецПопытки;
		ОбработатьЗначенияПоказателейGoogle(Результат, СтруктураТаблиц, СтруктураДанных, СайтСсылка, ДатаЗагрузки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИЗаписатьРекламныеКампании(Результат, СтруктураТаблиц, СтруктураДанных)
	
	ТаблицаСопоставленияГруппировок = СтруктураТаблиц.ТаблицаСопоставленияГруппировок;
	
	ПустаяСсылкаММ = Справочники.МаркетинговыеМероприятия.ПустаяСсылка();
	
	МассивТаблицы = Результат.Получить("data").Получить("rows");
	
	Для Каждого Стр Из МассивТаблицы Цикл
		
		СписокГруппировок = Стр.Получить("dimensions");
		
		Структура = Новый Структура;
		
		Если СтруктураДанных.РекламнаяКампания Тогда
			СчетчикРК = 0;
			Родитель = ПустаяСсылкаММ;
			ЭлементСсылка = ПустаяСсылкаММ;
		КонецЕсли;
		
		ИДМаркетинг = "";
		ИДОбъявление = "";
		
		// Обходим группировки
		Для Каждого Стр Из ТаблицаСопоставленияГруппировок Цикл
			
			Индекс = Стр.Индекс;
			ТипДанных = Стр.ТипЗначения;
			//
			СтрокаДанных = СписокГруппировок[Индекс];
			//
			Если ТипДанных = "CRM_ОбъявленияРекламныхКампанийИД" Тогда
				
				Если СтрокаДанных = "" ИЛИ СтрокаДанных = Неопределено ИЛИ СтрНайти(СтрокаДанных, "none") > 0
					 ИЛИ СтрНайти(СтрокаДанных, "not set") > 0 Тогда
					ИДМаркетинг = "";
					Продолжить;
				КонецЕсли;
				
				ИДМаркетинг = СтрокаДанных;
				
			ИначеЕсли ТипДанных = "CRM_ОбъявленияРекламныхКампанийИДКампания" Тогда
				
				Если СтрокаДанных = "" ИЛИ СтрокаДанных = Неопределено ИЛИ СтрНайти(СтрокаДанных, "none") > 0
					 ИЛИ СтрНайти(СтрокаДанных, "not set") > 0 Тогда
					ИДОбъявление = "";
					Продолжить;
				КонецЕсли;
				
				ИДОбъявление = СтрокаДанных;
				
			ИначеЕсли ТипДанных = "CRM_ОбъявленияРекламныхКампаний" Тогда
				
				Если СтрокаДанных = "" ИЛИ СтрокаДанных = Неопределено ИЛИ ИДМаркетинг = ""
					 ИЛИ ИДОбъявление = "" ИЛИ СтрНайти(СтрокаДанных, "none") > 0 ИЛИ СтрНайти(СтрокаДанных,
					 "not set") > 0 Тогда
					
					Если СчетчикРК = 0 Тогда
						Структура.Вставить("РекламнаяКампания", ПустаяСсылкаММ);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				
				ПолучитьЗаписатьДанныеПоКампаниямGoogle(СтруктураДанных, Родитель, ЭлементСсылка, СтрокаДанных,
					 СчетчикРК, ИДМаркетинг,
					 ИДОбъявление);	
				
				Если СчетчикРК = 0 Тогда
					Структура.Вставить("РекламнаяКампания", Родитель);
				ИначеЕсли СчетчикРК = 1 Тогда
					Структура.Вставить("ОбъявлениеРекламнаяКомпания", ЭлементСсылка);
				КонецЕсли;
				
				СчетчикРК = СчетчикРК + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОтветСервераGoogle(СтруктураТаблицДляЗагрузки, СтруктураДанных)
	
	ИмяСервера 	= "analyticsreporting.googleapis.com";	
	АдресРесурса = "/v4/reports:batchGet?";
	стрЗапроса = "access_token=" + СтруктураДанных.OAuthТокен;	
	
	Заголовки = Новый Соответствие;
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса + стрЗапроса, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтруктураТаблицДляЗагрузки.СтрокаJSON, КодировкаТекста.UTF8);
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	HttpСоединение = Новый HTTPСоединение(ИмяСервера, 443, , , Прокси, 60, Новый ЗащищенноеСоединениеOpenSSL);
	
	HttpОтвет = HttpСоединение.ОтправитьДляОбработки(HttpЗапрос);
	
	Если Не HttpОтвет.КодСостояния = 200 Тогда
		ОбщегоНазначения.СообщитьПользователю(HttpОтвет.ПолучитьТелоКакСтроку());
		ВызватьИсключение НСтр("ru='Проблема с получение аналитики Google';en='Проблема с receiving analysts Google'");
	КонецЕсли;
	
	стрОтвета = HttpОтвет.ПолучитьТелоКакСтроку();
	ОтветСервера = jsonПрочитать(стрОтвета);

	Возврат ОтветСервера;
	
КонецФункции

Процедура ОбработатьЗначенияПоказателейGoogle(Результат, СтруктураТаблиц, СтруктураДанных, СайтСсылка, ДатаЗагрузки)
	
	ТаблицаСопоставленияГруппировок = СтруктураТаблиц.ТаблицаСопоставленияГруппировок;
	ТаблицаСопоставленияМетрик		= СтруктураТаблиц.ТаблицаСопоставленияМетрик;

	ИтоговаяТаблица = Новый ТаблицаЗначений;
	
	ИтоговаяТаблица.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ИтоговаяТаблица.Колонки.Добавить("География", Новый ОписаниеТипов("СправочникСсылка.БизнесРегионы"));
	ИтоговаяТаблица.Колонки.Добавить("КаналПервичногоИнтереса",
		 Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.КаналыРекламныхВоздействий"));
	ИтоговаяТаблица.Колонки.Добавить("Устройства", Новый ОписаниеТипов("СправочникСсылка.CRM_Устройства"));
	ИтоговаяТаблица.Колонки.Добавить("ВремяНаСайте", Новый ОписаниеТипов("СправочникСсылка.CRM_ИнтервалыВремениНаСайте"));
	ИтоговаяТаблица.Колонки.Добавить("Визиты", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)));
	ИтоговаяТаблица.Колонки.Добавить("Посетители", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)));
	ИтоговаяТаблица.Колонки.Добавить("Отказы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)));
	ИтоговаяТаблица.Колонки.Добавить("ГлубинаПросмотра", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)));
	ИтоговаяТаблица.Колонки.Добавить("ИсточникиКампаний",
		 Новый ОписаниеТипов("СправочникСсылка.CRM_ИсточникиРекламныхКампаний"));
	ИтоговаяТаблица.Колонки.Добавить("СценарийАналитики",
		 Новый ОписаниеТипов("ПеречислениеСсылка.CRM_СценарииПолученияАналитики"));
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.МаркетинговыеМероприятия"));
	ИтоговаяТаблица.Колонки.Добавить("CRM_РекламнаяКампания", Новый ОписаниеТипов(МассивТипов));
	ИтоговаяТаблица.Колонки.Добавить("ОбъявлениеРекламнаяКомпания",
		 Новый ОписаниеТипов("СправочникСсылка.CRM_ОбъявленияРекламныхКампаний"));
	ИтоговаяТаблица.Колонки.Добавить("CRM_Сайт", Новый ОписаниеТипов("СправочникСсылка.CRM_Сайты"));
	ИтоговаяТаблица.Колонки.Добавить("URL", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(256)));
	ИтоговаяТаблица.Колонки.Добавить("ClientID", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ИтоговаяТаблица.Колонки.Добавить("Medium", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ИтоговаяТаблица.Колонки.Добавить("Source", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ИтоговаяТаблица.Колонки.Добавить("ЦелевыеДействия", Новый ОписаниеТипов("СправочникСсылка.CRM_ЦелевыеДействия"));
	
	МассивТаблицы = Результат.Получить("data").Получить("rows");
	
	Для Каждого Стр Из МассивТаблицы Цикл
		
		СписокГруппировок = Стр.Получить("dimensions");
		СписокМетрик = Стр.Получить("metrics")[0].Получить("values");
		
		Структура = Новый Структура;
		
		ИДМаркетинг = "";
		ИДОбъявление = "";
		
		// Обходим группировки
		Для Каждого Стр Из ТаблицаСопоставленияГруппировок Цикл
			
			ИмяКолонки = Стр.Параметр;
			Индекс = Стр.Индекс;
			ТипДанных = Стр.ТипЗначения;
			
			СтрокаДанных = СписокГруппировок[Индекс];
			
			Если ТипДанных = "Дата" Тогда
				
				СтрокаДанных = СтрЗаменить(СтрокаДанных, "-", "");
				Дата = Дата(СтрокаДанных);
				Структура.Вставить(ИмяКолонки, Дата);
				
			ИначеЕсли  ТипДанных = "Число" Тогда
				
				ПараметрЧисло = Число(СтрокаДанных);
				Структура.Вставить(ИмяКолонки, ПараметрЧисло);
				
			ИначеЕсли ТипДанных = "Строка" Тогда
				
				Если ЗначениеЗаполнено(СтрокаДанных) ИЛИ НЕ СтрНайти(СтрокаДанных, "none") > 0
					 ИЛИ НЕ СтрНайти(СтрокаДанных, "not set") > 0  Тогда
					
					Структура.Вставить(ИмяКолонки, СтрокаДанных);
				Иначе
					Структура.Вставить(ИмяКолонки, "");
				КонецЕсли;
				
			ИначеЕсли ТипДанных = "CRM_ИнтервалыВремениНаСайте" Тогда
				
				ПараметрЧисло = Число(СтрокаДанных);
				Если ПараметрЧисло = 0 Тогда
					ЭлементСправочника = Справочники.CRM_ИнтервалыВремениНаСайте.Отказ;
				Иначе
					ЭлементСправочника = ПолучитьВременнойИнтервал(ПараметрЧисло);
				КонецЕсли;
				Структура.Вставить(ИмяКолонки, ЭлементСправочника);
				
			ИначеЕсли ТипДанных = "CRM_КаналПервичногоИнтереса" Тогда
				
				НаименованиеКанала = ПреобразоватьКаналПривлечения(СтрокаДанных);
				
				ЭлССылка = ПолучитьДанныеПоКаналамРекламныхВзаимодействий(НаименованиеКанала);
				Структура.Вставить(ИмяКолонки, ЭлССылка);
				Структура.Вставить("Medium", СтрокаДанных);
				
			ИначеЕсли ТипДанных = "CRM_ОбъявленияРекламныхКампанийИД" Тогда
				
				Если СтрокаДанных = "" ИЛИ СтрокаДанных = Неопределено ИЛИ СтрНайти(СтрокаДанных, "none") > 0
					 ИЛИ СтрНайти(СтрокаДанных, "not set") > 0 Тогда
					ИДМаркетинг = "";
					Продолжить;
				КонецЕсли;
				
				ИДМаркетинг = СтрокаДанных;
				
				ПВХ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",
					 "ИДМаркетинговоеМероприятие");
				// Создаем маркетинговое мероприятие
				СпрСсылка = ПолучитьМаркетинговоеМероприятиеПоИД(ИДМаркетинг, ПВХ);

				Структура.Вставить("CRM_РекламнаяКампания", СпрСсылка);
				
			ИначеЕсли ТипДанных = "CRM_ОбъявленияРекламныхКампанийИДКампания" Тогда
				
				Если СтрокаДанных = "" ИЛИ СтрокаДанных = Неопределено ИЛИ СтрНайти(СтрокаДанных, "none") > 0
					 ИЛИ СтрНайти(СтрокаДанных, "not set") > 0 Тогда
					ИДОбъявление = "";
					Продолжить;
				КонецЕсли;
				
				ИДОбъявление = СтрокаДанных;
				
				Спрссылка = Справочники.CRM_ОбъявленияРекламныхКампаний.НайтиПоРеквизиту("id", ИДОбъявление,
					 Структура.CRM_РекламнаяКампания);
				
				Структура.Вставить("ОбъявлениеРекламнаяКомпания", Спрссылка);
				
			Иначе
				
				Если СтрокаДанных = "" ИЛИ СтрокаДанных = Неопределено Тогда
					Структура.Вставить(ИмяКолонки, Справочники[ТипДанных].ПустаяСсылка());
				Иначе
					ПараметрДанные = Справочники[ТипДанных].НайтиПоНаименованию(СтрокаДанных, Истина);
					Если ПараметрДанные.Пустая() Тогда
						ПараметрДанные = СоздатьОбновитьЭлементСправочника(СтрокаДанных, ТипДанных);
					КонецЕсли;
					Структура.Вставить(ИмяКолонки, ПараметрДанные);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// Обходим метрики
		// Обходим группировки
		Индекс = 0;
		Для Каждого Стр Из ТаблицаСопоставленияМетрик Цикл
			
			ИмяКолонки = Стр.Параметр;
			Индекс = Стр.Индекс;
			
			ЗначениеМетрики = СписокМетрик[Индекс];
			
			Структура.Вставить(ИмяКолонки, ЗначениеМетрики);
			
			Индекс = Индекс + 1;
		КонецЦикла;
		
		Структура.Вставить("ИсточникиКампаний", СтруктураДанных.ИсточникиКампаний);
		Структура.Вставить("СценарийАналитики", СтруктураДанных.СценарийАналитики);
		Структура.Вставить("CRM_Сайт", СайтСсылка);
		
		НоваяСтрока = ИтоговаяТаблица.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
		
	КонецЦикла;
	
	ТаблицаЦелевыхДействий = Новый ТаблицаЗначений();
	
	ОбработкаТаблицыИтоговЗаписьВРегистрСведений(ИтоговаяТаблица, ТаблицаЦелевыхДействий, ДатаЗагрузки, Структура);
	
КонецПроцедуры

Процедура ПолучитьЗаписатьДанныеПоКампаниямGoogle(СтруктураДанных, Родитель, ЭлементСсылка,
	 Наименование, СчетчикРК, ИД,
	 ИДОбъвление)
	
	Если СчетчикРК = 0 Тогда
		
		ПВХ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ИДМаркетинговоеМероприятие");
		// Создаем маркетинговое мероприятие
		СпрСсылка = ПолучитьМаркетинговоеМероприятиеПоИД(ИД, ПВХ);
		
		Если ЗначениеЗаполнено(Спрссылка) Тогда
			
			Родитель = Спрссылка;
			
		Иначе
			
			Структура = Новый Структура;
			
			Структура.Вставить("CRM_СквознаяАналитика", Истина);
			Структура.Вставить("ДатаНачала", ТекущаяДатаСеанса());
			Структура.Вставить("CRM_Неограниченно", Истина);
			Структура.Вставить("Наименование", Наименование);
			Структура.Вставить("ПВХ", ПВХ);
			Структура.Вставить("Идентификатор", ИД);
			
			МаркетинговыеМероприятия = СоздатьЗаписатьМаркетинговоеМероприятие(Структура);
						
			Родитель = МаркетинговыеМероприятия;
			
		КонецЕсли;
		
	ИначеЕсли СчетчикРК = 1 Тогда
		
		Спрссылка = Справочники.CRM_ОбъявленияРекламныхКампаний.НайтиПоРеквизиту("id", ИДОбъвление, Родитель);
		
		Если ЗначениеЗаполнено(Спрссылка) Тогда
			
			ЭлементСсылка = Спрссылка;
			
		Иначе
			
			Структура = Новый Структура;
			
			Структура.Вставить("Id", ИД);
			Структура.Вставить("Владелец", Родитель);
			Структура.Вставить("Наименование", Наименование);
			
			ЭлементСсылка = СоздатьЗаписатьОбъявлениеРекламныхКампаний(Структура);
			
		КонецЕсли;
		
	Иначе
		
		СпрОбъект = ЭлементСсылка.ПолучитьОбъект();
		
		ТЧФразы = СпрОбъект.ПоисковыеФразы;
		
		МассивДанных = ТЧФразы.Найти(Наименование, "Фраза");
		
		Если МассивДанных = Неопределено Тогда
			
			НоваяСтр = ТЧФразы.Добавить();
			
			НоваяСтр.Фраза = Наименование;
			
			СпрОбъект.Записать();
			
		КонецЕсли;
		
	КонецЕсли;   
	
КонецПроцедуры

Процедура ПолучитьДанныеАналитикиГуглGoogle(СтруктураПараметров)
	
	СписокСчетчиковГугл = Новый Массив;
	
	ИмяСервера 	= "www.googleapis.com";	
	АдресРесурса = "/analytics/v3/management/accountSummaries";
	стрЗапроса = "?access_token=" + СтруктураПараметров.OAuthТокен;	
	
	Заголовки = Новый Соответствие;
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса + стрЗапроса, Заголовки);
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	HttpСоединение = Новый HTTPСоединение(ИмяСервера, 443, , , Прокси, 60, Новый ЗащищенноеСоединениеOpenSSL);
	
	HttpОтвет = HttpСоединение.Получить(HttpЗапрос);
	стрОтвета = HttpОтвет.ПолучитьТелоКакСтроку();
	ОтветСервера = jsonПрочитать(стрОтвета);
	
	Если HttpОтвет.КодСостояния = 401 Тогда
		ОбновитьТокенНаСервере(СтруктураПараметров);
		ПолучитьДанныеАналитикиГуглGoogle(СтруктураПараметров);

	ИначеЕсли HttpОтвет.КодСостояния <> 200 Тогда
		ОписаниеОшибки = стрОтвета;
		
		СтруктураОшибки = ОтветСервера.Получить("error");
		Если СтруктураОшибки <> Неопределено Тогда
			СообщениеОшибки = СтруктураОшибки.Получить("message");
			Если ЗначениеЗаполнено(СообщениеОшибки) Тогда
				ОписаниеОшибки = СообщениеОшибки;
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;

	СформироватьСписокСчетчиковGoogle(ОтветСервера, СписокСчетчиковГугл, СтруктураПараметров);
	
	// Для каждого сайта проходим циклом и записываем данные
	Для Каждого СтрСчетчик Из СписокСчетчиковГугл Цикл
		СтруктураПараметров.Вставить("СтрСчетчик", СтрСчетчик);
		
		Если СтруктураПараметров.Дозагрузка Тогда
			ДатаКонечная = ТекущаяДатаСеанса() - 86400;
			ДатаЗагрузки = СтруктураПараметров.ДатаЗагрузки;
			
			Пока ДатаЗагрузки <= ДатаКонечная Цикл
				ПродолжитьВыполнениеЗаданияGoogleAnalytics(СтруктураПараметров, ДатаЗагрузки);
				
				ДатаЗагрузки = КонецДня(ДатаЗагрузки) + 1;
			КонецЦикла;
			
		Иначе
			ПродолжитьВыполнениеЗаданияGoogleAnalytics(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьТокенНаСервере(СтруктураПараметров)
	
	ИмяСервера 	= "www.googleapis.com";	
	АдресРесурса = "/oauth2/v4/token";
	стрЗапроса = "refresh_token=" + СтруктураПараметров.RefreshТокен + 
	"&client_id=" 		+ СтруктураПараметров.Client_id +
	"&client_secret=" 	+ СтруктураПараметров.Client_secret +
	"&grant_type=refresh_token";	
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Content-Length", XMLСтрока(СтрДлина(стрЗапроса)));
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(стрЗапроса, КодировкаТекста.UTF8);
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	HttpСоединение = Новый HTTPСоединение(ИмяСервера, 443, , , Прокси, 60, Новый ЗащищенноеСоединениеOpenSSL);
	
	HttpОтвет = HttpСоединение.ОтправитьДляОбработки(HttpЗапрос);
	
	Если Не HttpОтвет.КодСостояния = 200 Тогда
		ОбщегоНазначения.СообщитьПользователю(HttpОтвет.ПолучитьТелоКакСтроку());
		ВызватьИсключение НСтр("ru='Проблема с получение аналитики Google';en='Проблема с receiving analysts Google'");
	КонецЕсли;
	
	стрОтвета = HttpОтвет.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(стрОтвета);
	
	СтрутураОтвета = ПрочитатьJSON(ЧтениеJSON);
	
	новаяЗапись = РегистрыСведений.CRM_ИсточникиКампаний.СоздатьМенеджерЗаписи();
	новаяЗапись.ИсточникиКампаний         = СтруктураПараметров.ИсточникиКампаний;
	новаяЗапись.СценарийАналитики         = СтруктураПараметров.СценарийАналитики;
	
	новаяЗапись.Прочитать();
	новаяЗапись.OAuthТокен = СтрутураОтвета.access_token;
	
	новаяЗапись.Записать(Истина);
	
	СтруктураПараметров.OAuthТокен = СтрутураОтвета.access_token;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаЯндекс

Процедура ПродолжитьВыполнениеЗаданияЯндексМетрика(Структура) Экспорт
	
	СписокСчетчиков = Новый Массив;
	
	АдресСервера = "api-metrika.yandex.ru";
	
	имяВыходногоФайла = ПолучитьИмяВременногоФайла();
	
	ССЛ = Новый ЗащищенноеСоединениеOpenSSL();
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(АдресСервера, , , , Прокси, 60, ССЛ, Ложь);
	
	// Получение доступных счетчиков
	Ресурс = "/management/v1/counters";
	
	ПараметрыСчетчика = "";
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = Ресурс + ПараметрыСчетчика;
	Если Структура.Свойство("OAuthТокен") Тогда
		HTTPЗапрос.Заголовки.Вставить("Authorization", "OAuth " + Структура.OAuthТокен);
	Иначе
		HTTPЗапрос.Заголовки.Вставить("Authorization", "OAuth " + Структура.YD_Token);
	КонецЕсли;
	
	ОтветHTTP = Соединение.Получить(HTTPЗапрос, имяВыходногоФайла);
	
	Если ОтветHTTP.КодСостояния = 200 Тогда
	Иначе
		ТекстИсключения = "" + ОтветHTTP.КодСостояния + " " + ОтветHTTP.ПолучитьТелоКакСтроку();
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	текстовыйДокумент = Новый ТекстовыйДокумент;
	текстовыйДокумент.Прочитать(имяВыходногоФайла, КодировкаТекста.UTF8);
	ОтветЗначение = текстовыйДокумент.ПолучитьТекст();
	
	Результат = jsonПрочитать(ОтветЗначение);
	
	СформироватьСписокСчетчиков(Результат, СписокСчетчиков, Структура);
	
	УдалитьФайлы(имяВыходногоФайла);
	
	Если Структура.YD_ЗагружатьЗатраты Тогда
		Структура.Вставить("СписокСчетчиков", СписокСчетчиков);
		ЗагрузкаЗатрат(Структура);
	КонецЕсли;
	
	ДатаЗагрузки = Неопределено;
	Если Структура.Дозагрузка Тогда
		ДатаЗагрузки = Структура.ДатаЗагрузки;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаЗагрузки) Тогда
		ДатаЗагрузки = НачалоДня(ТекущаяДатаСеанса() - 86400);
	КонецЕсли;
	
	Для Каждого СтрСчетчик Из СписокСчетчиков Цикл
		Структура.Вставить("СтрСчетчик", СтрСчетчик);
		
		Если Структура.Дозагрузка Тогда
			Если Структура.Свойство("ДатаОкончанияЗагрузки") Тогда
				  ДатаКонечная = Структура.ДатаОкончанияЗагрузки;
			Иначе ДатаКонечная = ТекущаяДатаСеанса() - 86400;
			КонецЕсли;	
			
			ДатаЗагрузкиМетрик = ДатаЗагрузки;
			Пока ДатаЗагрузкиМетрик <= ДатаКонечная Цикл
				ВыполнитьЗагрузкуДанныхДляЯндексМетрика(Соединение, Структура, ДатаЗагрузкиМетрик);
				
				ДатаЗагрузкиМетрик = КонецДня(ДатаЗагрузкиМетрик) + 1;
			КонецЦикла;
			
		Иначе
			ВыполнитьЗагрузкуДанныхДляЯндексМетрика(Соединение, Структура, ДатаЗагрузки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьJsonСтруктуруСУчетомДозагрузкиКампанийЯндекс(Структура) 
	
	СтруктураТаблицДляЗагрузки = Новый Структура;
	
	ТаблицаСопоставленияГруппировок = Новый ТаблицаЗначений;
	ТаблицаСопоставленияГруппировок.Колонки.Добавить("Параметр");
	ТаблицаСопоставленияГруппировок.Колонки.Добавить("Индекс");
	ТаблицаСопоставленияГруппировок.Колонки.Добавить("ТипЗначения");

	ТаблицаСопоставленияМетрик = Новый ТаблицаЗначений;
	ТаблицаСопоставленияМетрик.Колонки.Добавить("Параметр");
	ТаблицаСопоставленияМетрик.Колонки.Добавить("Индекс");

	Если Структура.ДатаЗагрузки = Неопределено Тогда
		  ДатаЗапроса = ТекущаяДатаСеанса() - 86400;
	Иначе ДатаЗапроса = Структура.ДатаЗагрузки;
	КонецЕсли;
	
	ПараметрыТаблицы = "?offset=1&auto_group_size=1&limit=100000&sort=ym:s:date,ym:s:<attribution>DirectClickOrder";
	ПараметрыТаблицы = ПараметрыТаблицы + "&date1=" + Формат(ДатаЗапроса, "ДФ=yyyy-MM-dd");
	ПараметрыТаблицы = ПараметрыТаблицы + "&date2=" + Формат(ДатаЗапроса, "ДФ=yyyy-MM-dd");
	ПараметрыТаблицы = ПараметрыТаблицы + "&ids=" + Структура.СтрСчетчик.id;
	
	Счетчик = 0;
	
	// Дата по умолчанию
	dimensions = "ym:s:date";
	НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
	НоваяСтр.Параметр = "Период";
	НоваяСтр.Индекс = Счетчик;
	НоваяСтр.ТипЗначения = "Дата";
	Счетчик = Счетчик + 1;
	
	Если Структура.ЗагружатьРекламнуюКампанию Тогда
		// Рекламная кампания
		dimensions = dimensions + ",ym:s:<attribution>DirectClickOrder";
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "РекламнаяКампания";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "CRM_ОбъявленияРекламныхКампаний";
		Счетчик = Счетчик + 1;
		
		// Объявление
		dimensions = dimensions + ",ym:s:<attribution>DirectClickBanner";
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "РекламнаяКампания";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "CRM_ОбъявленияРекламныхКампаний";
		Счетчик = Счетчик + 1;
		
		// Поисковая фраза
		dimensions = dimensions + ",ym:s:<attribution>DirectSearchPhrase";
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "РекламнаяКампания";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "CRM_ОбъявленияРекламныхКампаний";
		Счетчик = Счетчик + 1;
		
		Счетчик = 0;
		
		ПараметрыТаблицы = ПараметрыТаблицы + "&dimensions=" + dimensions;
		
		// Метрики 
		metrics = "";
		Если Структура.Визиты Тогда
			metrics = metrics + "ym:s:visits";
			НоваяСтр = ТаблицаСопоставленияМетрик.Добавить();
			НоваяСтр.Параметр = "Визиты";
			НоваяСтр.Индекс = Счетчик;
			Счетчик = Счетчик + 1;
		КонецЕсли;
		
		ПараметрыТаблицы = ПараметрыТаблицы + "&metrics=" + metrics;
		
		СтруктураТаблицДляЗагрузки.Вставить("ПараметрыТаблицы", ПараметрыТаблицы);
		СтруктураТаблицДляЗагрузки.Вставить("ТаблицаСопоставленияГруппировок", ТаблицаСопоставленияГруппировок);
		СтруктураТаблицДляЗагрузки.Вставить("ТаблицаСопоставленияМетрик", ТаблицаСопоставленияМетрик);
		
		Возврат СтруктураТаблицДляЗагрузки;
	КонецЕсли;

	// Собираем группировки
	Если Структура.География Тогда
		dimensions = dimensions + ",ym:s:regionCityName";
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "География";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "БизнесРегионы";
		Счетчик = Счетчик + 1;
	КонецЕсли;
	
	Если Структура.КаналПервичногоИнтереса Тогда
		dimensions = dimensions + ",ym:s:<attribution>TrafficSource";
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "КаналПервичногоИнтереса";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "CRM_КаналПервичногоИнтереса";
		Счетчик = Счетчик + 1;
	КонецЕсли;
	
	Если Структура.Medium Тогда
		dimensions = dimensions + ",ym:s:UTMMedium";
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "Medium";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "Строка";
		Счетчик = Счетчик + 1;
	КонецЕсли;

	Если Структура.Source Тогда
		dimensions = dimensions + ",ym:s:UTMSource";
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "Source";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "Строка";
		Счетчик = Счетчик + 1;
	КонецЕсли;

	Если Структура.Устройства Тогда
		dimensions = dimensions + ",ym:s:deviceCategoryName";
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "Устройства";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "CRM_Устройства";
		Счетчик = Счетчик + 1;
	КонецЕсли;
	
	Если Структура.ВремяНаСайте Тогда
		dimensions = dimensions + ",ym:s:visitDuration";
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "ВремяНаСайте";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "CRM_ИнтервалыВремениНаСайте";
		Счетчик = Счетчик + 1;
	КонецЕсли;
	
	Если Структура.РекламнаяКампания Тогда
		// Рекламная кампания  ym:s:<attribution>DirectClickOrder
		dimensions = dimensions + ",ym:s:<attribution>DirectClickOrder";
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "РекламнаяКампания";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "CRM_ОбъявленияРекламныхКампаний";
		Счетчик = Счетчик + 1;
		
		// Объявление  ,ym:s:<attribution>DirectClickBanner
		dimensions = dimensions + ",ym:s:<attribution>DirectClickBanner";
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "РекламнаяКампания";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "CRM_ОбъявленияРекламныхКампаний";
		Счетчик = Счетчик + 1;
	КонецЕсли;
	
	Если Структура.URL Тогда
		dimensions = dimensions + ",ym:s:<attribution>ReferalSource";
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "URL";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "Строка";
		Счетчик = Счетчик + 1;
	КонецЕсли;

	Если Структура.ЦелевыеДействия Тогда
		dimensions = dimensions + ",ym:s:goal";
		НоваяСтр = ТаблицаСопоставленияГруппировок.Добавить();
		НоваяСтр.Параметр = "ЦелевыеДействия";
		НоваяСтр.Индекс = Счетчик;
		НоваяСтр.ТипЗначения = "CRM_ЦелевыеДействия";
		Счетчик = Счетчик + 1;
	КонецЕсли;
	
	ПараметрыТаблицы = ПараметрыТаблицы + "&dimensions=" + dimensions;
	
	Счетчик = 0;
	
	// Метрики 
	metrics = "";
	Если Структура.Визиты Тогда
		metrics = metrics + "ym:s:visits";
		НоваяСтр = ТаблицаСопоставленияМетрик.Добавить();
		НоваяСтр.Параметр = "Визиты";
		НоваяСтр.Индекс = Счетчик;
		Счетчик = Счетчик + 1;
	КонецЕсли;
	
	Если Структура.Посетители Тогда
		metrics = metrics + ",ym:s:users";
		НоваяСтр = ТаблицаСопоставленияМетрик.Добавить();
		НоваяСтр.Параметр = "Посетители";
		НоваяСтр.Индекс = Счетчик;
		Счетчик = Счетчик + 1;
	КонецЕсли;
	
	Если Структура.ГлубинаПросмотра Тогда
		metrics = metrics + ",ym:s:pageviews";
		НоваяСтр = ТаблицаСопоставленияМетрик.Добавить();
		НоваяСтр.Параметр = "ГлубинаПросмотра";
		НоваяСтр.Индекс = Счетчик;
		Счетчик = Счетчик + 1;
	КонецЕсли;
	
	Если Структура.Отказы Тогда
		metrics = metrics + ",ym:s:bounces";
		НоваяСтр = ТаблицаСопоставленияМетрик.Добавить();
		НоваяСтр.Параметр = "Отказы";
		НоваяСтр.Индекс = Счетчик;
		Счетчик = Счетчик + 1;
	КонецЕсли;
	
	ПараметрыТаблицы = ПараметрыТаблицы + "&metrics=" + metrics;
	
	СтруктураТаблицДляЗагрузки.Вставить("ПараметрыТаблицы", ПараметрыТаблицы);
	СтруктураТаблицДляЗагрузки.Вставить("ТаблицаСопоставленияГруппировок", ТаблицаСопоставленияГруппировок);
	СтруктураТаблицДляЗагрузки.Вставить("ТаблицаСопоставленияМетрик", ТаблицаСопоставленияМетрик);
	
	Возврат СтруктураТаблицДляЗагрузки;
	
КонецФункции

Функция ПолучитьОтветСервераЯндекс(СтруктураТаблицДляЗагрузки, СтруктураДанных)
	
	Ресурс = "/stat/v1/data";
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = Ресурс + СтруктураТаблицДляЗагрузки.ПараметрыТаблицы;
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json;charset=windows-1251");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "OAuth " + СтруктураДанных.OAuthТокен);
	
	АдресСервера = "api-metrika.yandex.ru";
	
	имяВыходногоФайла = ПолучитьИмяВременногоФайла();
	
	ССЛ = Новый ЗащищенноеСоединениеOpenSSL();
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(АдресСервера, , , , Прокси, 60, ССЛ, Ложь);
	
	ОтветHTTP = Соединение.Получить(HTTPЗапрос, имяВыходногоФайла);
	
	текстовыйДокумент = Новый ТекстовыйДокумент;
	текстовыйДокумент.Прочитать(имяВыходногоФайла, КодировкаТекста.UTF8);
	ОтветЗначение = текстовыйДокумент.ПолучитьТекст();
	
	Если ОтветHTTP.КодСостояния = 200 Тогда
	Иначе
		ТекстИсключения = "" + ОтветHTTP.КодСостояния + " " + ОтветЗначение;
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	Результат = jsonПрочитать(ОтветЗначение);
	
	УдалитьФайлы(имяВыходногоФайла);
	
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьЗагрузкуДанныхДляЯндексМетрика(Соединение, СтруктураДанных, ДатаЗагрузки = Неопределено)
	
	СайтСсылка = СтруктураДанных.СтрСчетчик.Сайт;
	
	СтруктураДанных.Вставить("ДатаЗагрузки", ДатаЗагрузки);
	СтруктураДанных.Вставить("ЗагружатьРекламнуюКампанию", СтруктураДанных.РекламнаяКампания);
	СтруктураДанных.Вставить("CRM_Сайт", СайтСсылка);
	
	СтруктураТаблиц = ПолучитьJsonСтруктуруСУчетомДозагрузкиКампанийЯндекс(СтруктураДанных);
	ОтветСервера = ПолучитьОтветСервераЯндекс(СтруктураТаблиц, СтруктураДанных);

	Если СтруктураДанных.ЗагружатьРекламнуюКампанию Тогда
		ОбработатьИЗаписатьРекламныеКампанииЯндекс(ОтветСервера, СтруктураТаблиц, СтруктураДанных);
		СтруктураДанных.ЗагружатьРекламнуюКампанию = Ложь;
		
		ЗагружатьЦели = СтруктураДанных.ЦелевыеДействия;
		Если ЗагружатьЦели Тогда
			СтруктураДанных.ЦелевыеДействия = Ложь;
		КонецЕсли;
		
		СтруктураТаблицБезЦелей = ПолучитьJsonСтруктуруСУчетомДозагрузкиКампанийЯндекс(СтруктураДанных);
		ОтветСервераБезЦелей = ПолучитьОтветСервераЯндекс(СтруктураТаблицБезЦелей, СтруктураДанных);
			
		ТаблицаПоказателей = ОбработатьЗначенияПоказателей(ОтветСервераБезЦелей, СтруктураТаблицБезЦелей,
			 СтруктураДанных, СайтСсылка,
			 ДатаЗагрузки);
		
		Если ЗагружатьЦели Тогда
		 	СтруктураДанных.ЦелевыеДействия = Истина;
			СтруктураТаблицПоЦелям = ПолучитьJsonСтруктуруСУчетомДозагрузкиКампанийЯндекс(СтруктураДанных);
			ОтветСервераПоЦелям = ПолучитьОтветСервераЯндекс(СтруктураТаблицПоЦелям, СтруктураДанных);
			
			ТаблицаЦелей = ОбработатьЦелевыеДействия(ОтветСервераПоЦелям, ТаблицаПоказателей,
				 СтруктураТаблицПоЦелям, СтруктураДанных, СайтСсылка,
				 ДатаЗагрузки);
			
		Иначе
			ТаблицаЦелей = Новый ТаблицаЗначений();
		КонецЕсли;
		
		ОбработкаТаблицыИтоговЗаписьВРегистрСведений(ТаблицаПоказателей, ТаблицаЦелей, ДатаЗагрузки, СтруктураДанных);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьИЗаписатьРекламныеКампанииЯндекс(Результат, СтруктураТаблиц, СтруктураДанных)
	
	МассивТаблицы = Результат.Получить("data");
	
	ПустаяСсылкаММ = Справочники.МаркетинговыеМероприятия.ПустаяСсылка();
	
	Структура = Новый Структура;
	
	Для Каждого Стр Из МассивТаблицы Цикл
		
		СписокГруппировок = Стр.Получить("dimensions");
		
		Если СтруктураДанных.РекламнаяКампания Тогда
			СчетчикРК = 0;
			Родитель = ПустаяСсылкаММ;
			ЭлементСсылка = ПустаяСсылкаММ;
		КонецЕсли;
		
		// Обходим группировки
		Для Каждого Стр Из СтруктураТаблиц.ТаблицаСопоставленияГруппировок Цикл
			
			ИмяКолонки = Стр.Параметр;
			Индекс = Стр.Индекс;
			ТипДанных = Стр.ТипЗначения;
			
			СтрокаДанных = СписокГруппировок[Индекс].Получить("name");
			
			Если СтрокаДанных = "(not set)" ИЛИ  СтрокаДанных = "(none)" Тогда
				СтрокаДанных = "";
			КонецЕсли;
			
			Если ТипДанных = "Дата" Тогда
				
				СтрокаДанных = СтрЗаменить(СтрокаДанных, "-", "");
				Дата = Дата(СтрокаДанных);
				Структура.Вставить(ИмяКолонки, Дата);
				
			ИначеЕсли ТипДанных = "CRM_КаналПервичногоИнтереса" Тогда
				
				ЭлССылка = ПолучитьДанныеПоКаналамРекламныхВзаимодействий(СтрокаДанных);
				Структура.Вставить(ИмяКолонки, ЭлССылка);
				
			ИначеЕсли ТипДанных = "CRM_ОбъявленияРекламныхКампаний" Тогда
				
				// Сначала записываем родителя
				// Записываем по элементу
				// Записываем слова
				
				Если СчетчикРК = 0 И (СтрокаДанных = "" ИЛИ СтрокаДанных = Неопределено) Тогда
					
					Продолжить;
					
				ИначеЕсли СтрокаДанных = "" ИЛИ СтрокаДанных = Неопределено Тогда
					
					Продолжить;
				КонецЕсли;
				
				ПолучитьЗаписатьДанныеПоКампаниям(СтруктураДанных, Родитель, ЭлементСсылка, СписокГруппировок,
					 Индекс, СчетчикРК,
					 Ложь);	
				
				Если СчетчикРК = 0 Тогда
					Структура.Вставить("РекламнаяКампания", Родитель);
				ИначеЕсли СчетчикРК = 1 Тогда
					Структура.Вставить("ОбъявлениеРекламнаяКомпания", ЭлементСсылка);
				КонецЕсли;
				
				СчетчикРК = СчетчикРК + 1;
				
			ИначеЕсли ТипДанных = "Строка" Тогда
				// BSLLS:UnusedLocalVariable-off
				// Пустой блок.
				Перем1 = ""; // СтрокаДанных
				// BSLLS:UnusedLocalVariable-on
			Иначе
				
				Если СтрокаДанных = "" ИЛИ СтрокаДанных = Неопределено Тогда
					Структура.Вставить(ИмяКолонки, Справочники[ТипДанных].ПустаяСсылка());
				Иначе
					ПараметрДанные = Справочники[ТипДанных].НайтиПоНаименованию(СтрокаДанных, Истина);
					Если ПараметрДанные.Пустая() Тогда
						ПараметрДанные = СоздатьОбновитьЭлементСправочника(СтрокаДанных, ТипДанных);
					КонецЕсли;
					Структура.Вставить(ИмяКолонки, ПараметрДанные);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьСтрокуДанных(СтрокаДанных)
	
	СтрокаДанных = СтрЗаменить(СтрокаДанных, "#", "");
	СтрокаДанных = СтрЗаменить(СтрокаДанных, """", "");
	Если СтрНайти(СтрокаДанных, "not set") > 0 ИЛИ СтрокаДанных = "(none)" Тогда
		СтрокаДанных = "";
	КонецЕсли;
	
	Возврат СтрокаДанных;
	
КонецФункции	

Функция ЗаполнитьЗначенияПоказателей(Группировки, ЗначенияГруппировок)
	
	ЗначенияСтрокиПоказателей = Новый Структура();
	
	СчетчикРК = 0;
	СтрокаУникальности = "ID_";
	
	// Обходим группировки
	Для Каждого СтрокаГруппировки Из Группировки Цикл
		ИмяКолонки = СтрокаГруппировки.Параметр;
		Индекс = СтрокаГруппировки.Индекс;
		ТипДанных = СтрокаГруппировки.ТипЗначения;
		
		СтрокаДанных = ОбработатьСтрокуДанных(ЗначенияГруппировок[Индекс].Получить("name"));
					
		Если ТипДанных = "Дата" Тогда
			СтрокаДанных = СтрЗаменить(СтрокаДанных, "-", "");
			Дата = Дата(СтрокаДанных);
			ЗначенияСтрокиПоказателей.Вставить(ИмяКолонки, Дата);
			СтрокаУникальности = СтрокаУникальности + "_" + Формат(Дата, "ДФ=ггггММддЧЧммсс");
			
		ИначеЕсли ТипДанных = "Число" Тогда
			ПараметрЧисло = Число(СтрокаДанных);
			ЗначенияСтрокиПоказателей.Вставить(ИмяКолонки, ПараметрЧисло);
			СтрокаУникальности = СтрокаУникальности + "_" + Формат(ПараметрЧисло, "ЧГ=");
			
		ИначеЕсли ТипДанных = "Строка" Тогда
			Если ЗначениеЗаполнено(СтрокаДанных) Тогда
				ЗначенияСтрокиПоказателей.Вставить(ИмяКолонки, СтрокаДанных);
			КонецЕсли;
			СтрокаУникальности = СтрокаУникальности + "_" + СтрокаДанных;
			
		ИначеЕсли ТипДанных = "CRM_ИнтервалыВремениНаСайте" Тогда
			ПараметрЧисло = Число(СтрокаДанных);
			Если ПараметрЧисло = 0 Тогда
				  ЭлементСправочника = Справочники.CRM_ИнтервалыВремениНаСайте.Отказ;
			Иначе ЭлементСправочника = ПолучитьВременнойИнтервал(ПараметрЧисло);
			КонецЕсли;
			ЗначенияСтрокиПоказателей.Вставить(ИмяКолонки, ЭлементСправочника);
			ЗначенияСтрокиПоказателей.Вставить("Длительность", ПараметрЧисло);
			СтрокаУникальности = СтрокаУникальности + "_" + ЭлементСправочника;
			
		ИначеЕсли ТипДанных = "CRM_КаналПервичногоИнтереса" Тогда
			ЭлементСправочника = ПолучитьДанныеПоКаналамРекламныхВзаимодействий(СтрокаДанных);
			ЗначенияСтрокиПоказателей.Вставить(ИмяКолонки, ЭлементСправочника);
			СтрокаУникальности = СтрокаУникальности + "_" + ЭлементСправочника;
			
		ИначеЕсли ТипДанных = "CRM_ОбъявленияРекламныхКампаний" Тогда
			Если СчетчикРК = 0 Тогда
				Если ЗначениеЗаполнено(СтрокаДанных) Тогда
					ИДМаркетинг = СтрЗаменить(ЗначенияГруппировок[Индекс].Получить("direct_id"), "N-", "");
					
					ПВХ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",
						 "ИДМаркетинговоеМероприятие");
					
					// Создаем маркетинговое мероприятие
					ЭлементСправочника = ПолучитьМаркетинговоеМероприятиеПоИД(ИДМаркетинг, ПВХ);
					
					ЗначенияСтрокиПоказателей.Вставить("CRM_РекламнаяКампания", ЭлементСправочника);
					ЗначенияСтрокиПоказателей.Вставить("ID_РекламнаяКампания", ИДМаркетинг);
				КонецЕсли;
				
				СчетчикРК = СчетчикРК + 1;
				
				СтрокаУникальности = СтрокаУникальности + "_" + ЭлементСправочника;

			ИначеЕсли СчетчикРК = 1 Тогда
				ЭлементСправочника = Справочники.CRM_ОбъявленияРекламныхКампаний.ПустаяСсылка();
				Если ЗначениеЗаполнено(СтрокаДанных) Тогда
					ИДОбъявление = СтрЗаменить(ЗначенияГруппировок[Индекс].Получить("direct_id"), "M-", "");
					ЭлементСправочника = Справочники.CRM_ОбъявленияРекламныхКампаний.НайтиПоРеквизиту("id",
						 ИДОбъявление,
						 ЗначенияСтрокиПоказателей.CRM_РекламнаяКампания);
					ЗначенияСтрокиПоказателей.Вставить("ОбъявлениеРекламнаяКомпания", ЭлементСправочника);
				КонецЕсли;
				
				СчетчикРК = СчетчикРК + 1;
				
				СтрокаУникальности = СтрокаУникальности + "_" + ЭлементСправочника;
            КонецЕсли;
			
		ИначеЕсли ТипДанных = "CRM_ЦелевыеДействия" Тогда
			
		Иначе
			ЭлементСправочника = Справочники[ТипДанных].ПустаяСсылка();
			Если ЗначениеЗаполнено(СтрокаДанных) Тогда
				ЭлементСправочника = Справочники[ТипДанных].НайтиПоНаименованию(СтрокаДанных, Истина);
				Если ЭлементСправочника.Пустая() Тогда
					ЭлементСправочника = СоздатьОбновитьЭлементСправочника(СтрокаДанных, ТипДанных);
				КонецЕсли;
				ЗначенияСтрокиПоказателей.Вставить(ИмяКолонки, ЭлементСправочника);
			КонецЕсли;
			
			СтрокаУникальности = СтрокаУникальности + "_" + ЭлементСправочника;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначенияСтрокиПоказателей.Свойство("Medium") Тогда
		ЗначенияСтрокиПоказателей.Вставить("Medium", "");
	КонецЕсли;
	Если ЗначенияСтрокиПоказателей.Свойство("Длительность") Тогда
		ЗначенияСтрокиПоказателей.Medium = ЗначенияСтрокиПоказателей.Medium + " " + ЗначенияСтрокиПоказателей.Длительность;
	КонецЕсли;
	
	ЗначенияСтрокиПоказателей.Вставить("СтрокаУникальности", СтрокаУникальности);
	
	Возврат ЗначенияСтрокиПоказателей;

КонецФункции		

Функция ОбработатьЗначенияПоказателей(Результат, СтруктураТаблиц, СтруктураДанных, СайтСсылка, ДатаЗагрузки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.CRM_ПоказателиКампаний.СоздатьНаборЗаписей();
	ТаблицаПоказателей = НаборЗаписей.Выгрузить();
	ТаблицаПоказателей.Колонки.Добавить("СтрокаУникальности");
	
	Для Каждого СтрокаДанных Из Результат.Получить("data") Цикл
		СписокГруппировок = СтрокаДанных.Получить("dimensions");
		СписокМетрик = СтрокаДанных.Получить("metrics");
				
		ЗначенияСтрокиПоказателей = ЗаполнитьЗначенияПоказателей(СтруктураТаблиц.ТаблицаСопоставленияГруппировок,
			 СписокГруппировок);
		
		// Обходим метрики
		Для Каждого СтрокаМетрики Из СтруктураТаблиц.ТаблицаСопоставленияМетрик Цикл
			ЗначениеМетрики = ОбработатьСтрокуДанных(СписокМетрик[СтрокаМетрики.Индекс]);
			ЗначенияСтрокиПоказателей.Вставить(СтрокаМетрики.Параметр, ЗначениеМетрики);
		КонецЦикла;

		ЗначенияСтрокиПоказателей.Вставить("ПериодДанных", ДатаЗагрузки);
		ЗначенияСтрокиПоказателей.Вставить("ИсточникиКампаний", СтруктураДанных.ИсточникиКампаний);
		ЗначенияСтрокиПоказателей.Вставить("СценарийАналитики", СтруктураДанных.СценарийАналитики);
		ЗначенияСтрокиПоказателей.Вставить("CRM_Сайт", СайтСсылка);

		СтрокаПоказателей = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПоказателей, ЗначенияСтрокиПоказателей);
	КонецЦикла;
	
	Возврат ТаблицаПоказателей;
	
КонецФункции

Функция ОбработатьЦелевыеДействия(Результат, ТаблицаПоказателей, СтруктураТаблиц, СтруктураДанных,
	 СайтСсылка,
	 ДатаЗагрузки)
	
	УстановитьПривилегированныйРежим(Истина);

	НаборЗаписей = РегистрыСведений.CRM_ПоказателиКампанийЦелевыеДействия.СоздатьНаборЗаписей();
	ТаблицаЦелевыхДействий = НаборЗаписей.Выгрузить();
	
	СвязиПоказателей = Новый Соответствие();
		
	ИндексГруппировкиЦелей = Неопределено;
	
	Для Каждого СтрокаГруппировок Из СтруктураТаблиц.ТаблицаСопоставленияГруппировок Цикл
		Если СтрокаГруппировок.ТипЗначения = "CRM_ЦелевыеДействия" Тогда
			ИндексГруппировкиЦелей = СтрокаГруппировок.Индекс;
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого СтрокаДанных Из Результат.Получить("data") Цикл
		СписокГруппировок = СтрокаДанных.Получить("dimensions");
				
		НаименованиеЦели = ОбработатьСтрокуДанных(СписокГруппировок[ИндексГруппировкиЦелей].Получить("name"));
		Если НЕ ЗначениеЗаполнено(НаименованиеЦели) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначенияСтрокиПоказателей = ЗаполнитьЗначенияПоказателей(СтруктураТаблиц.ТаблицаСопоставленияГруппировок,
			 СписокГруппировок);
	    СтрокаУникальности = ЗначенияСтрокиПоказателей.СтрокаУникальности;
		
		ИдентификаторСвязиПоказателей = СвязиПоказателей.Получить(СтрокаУникальности);
		Если ИдентификаторСвязиПоказателей = Неопределено Тогда
		    ИдентификаторСвязиПоказателей = Новый УникальныйИдентификатор();
			СвязиПоказателей.Вставить(СтрокаУникальности, ИдентификаторСвязиПоказателей);
		КонецЕсли;
				
		ДействиеСсылка = Справочники.CRM_ЦелевыеДействия.НайтиПоНаименованию(НаименованиеЦели, Истина);
		Если ДействиеСсылка.Пустая() Тогда
			ДействиеОбъект = Справочники.CRM_ЦелевыеДействия.СоздатьЭлемент();
			ДействиеОбъект.Наименование = НаименованиеЦели;
			ДействиеОбъект.Записать();
					
			ДействиеСсылка = ДействиеОбъект.Ссылка;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("СтрокаУникальности", СтрокаУникальности);
		НайденныеСтрокиПоказателей = ТаблицаПоказателей.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаПоказателя Из НайденныеСтрокиПоказателей Цикл
			СтрокаПоказателя.ИдентификаторСвязиПоказателей = ИдентификаторСвязиПоказателей;
		КонецЦикла;	
		
		СтруктураПоиска = Новый Структура("ИдентификаторСвязиПоказателей,ЦелевоеДействие",
			 ИдентификаторСвязиПоказателей,
			 ДействиеСсылка);
		НайденныеСтрокиЦелей = ТаблицаЦелевыхДействий.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтрокиЦелей.Количество() = 0 Тогда
			СтрокаЦели = ТаблицаЦелевыхДействий.Добавить();
			СтрокаЦели.ИсточникиКампаний = СтруктураДанных.ИсточникиКампаний;
			СтрокаЦели.ПериодДанных = ДатаЗагрузки;
			СтрокаЦели.Сайт = СайтСсылка;
			СтрокаЦели.ИдентификаторСвязиПоказателей = ИдентификаторСвязиПоказателей;
			СтрокаЦели.ЦелевоеДействие = ДействиеСсылка;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаЦелевыхДействий;
	
КонецФункции

Процедура ПолучитьЗаписатьДанныеПоКампаниям(СтруктураДанных, Родитель, ЭлементСсылка,
	 СписокГруппировок, Индекс, СчетчикРК,
	 СоздаватьНовые = Истина)
	
	Если СчетчикРК = 0 Тогда
		
		ПВХ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ИДМаркетинговоеМероприятие");
		ИД = СтрЗаменить(СписокГруппировок[Индекс].Получить("direct_id"), "N-", "");
		Наименование = СписокГруппировок[Индекс].Получить("name");
		СпрСсылка = ПолучитьМаркетинговоеМероприятиеПоИД(ИД, ПВХ);
		
		Наименование = СтрЗаменить(Наименование, "#", "");
		Наименование = СтрЗаменить(Наименование, """", "");

		Родитель = Спрссылка;
		
		Если НЕ ЗначениеЗаполнено(Спрссылка) Тогда
			Структура = Новый Структура;
			Структура.Вставить("CRM_СквознаяАналитика", Истина);
			Структура.Вставить("ДатаНачала", ТекущаяДатаСеанса());
			Структура.Вставить("CRM_Неограниченно", Истина);
			Структура.Вставить("ПВХ", ПВХ);
			Структура.Вставить("Идентификатор", ИД);
			Если НЕ СоздаватьНовые Тогда
				Структура.Вставить("Наименование", Наименование);
				
			Иначе
				Структура.Вставить("Наименование", Наименование);
			КонецЕсли;	
			
			МаркетинговыеМероприятия = СоздатьЗаписатьМаркетинговоеМероприятие(Структура);
			
			Родитель = МаркетинговыеМероприятия;
		КонецЕсли;
		
	ИначеЕсли СчетчикРК = 1 Тогда
		
		ИД = СтрЗаменить(СписокГруппировок[Индекс].Получить("direct_id"), "M-", "");
		Наименование = СписокГруппировок[Индекс].Получить("name");
		Спрссылка = Справочники.CRM_ОбъявленияРекламныхКампаний.НайтиПоРеквизиту("id", ИД, Родитель);
		
		ЭлементСсылка = Спрссылка;
		
		Если НЕ ЗначениеЗаполнено(Спрссылка) Тогда
			Структура = Новый Структура();
			Структура.Вставить("Id", ИД);
			Структура.Вставить("Владелец", Родитель);
			Если НЕ СоздаватьНовые Тогда
				Структура.Вставить("Наименование", Наименование);
				
			Иначе
				Структура.Вставить("Наименование", Наименование);
			КонецЕсли;
			
			ЭлементСсылка = СоздатьЗаписатьОбъявлениеРекламныхКампаний(Структура);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ЭлементСсылка) Тогда
		
		Наименование = СокрЛП(СписокГруппировок[Индекс].Получить("name"));
		
		СпрОбъект = ЭлементСсылка.ПолучитьОбъект();
		
		ТЧФразы = СпрОбъект.ПоисковыеФразы;
		
		МассивДанных = ТЧФразы.Найти(Наименование, "Фраза");
		
		Если МассивДанных = Неопределено Тогда
			
			НоваяСтр = ТЧФразы.Добавить();
			
			НоваяСтр.Фраза = Наименование;
			
			СпрОбъект.Записать();
			
		КонецЕсли;
		
	КонецЕсли;   
	
КонецПроцедуры

Процедура ОбработкаТаблицыИтоговЗаписьВРегистрСведений(ТаблицаПоказателей, ТаблицаЦелевыхДействий,
	 ДатаЗагрузки,
	 СтруктураДанных) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Показатели.ПериодДанных КАК ПериодДанных,
	|	Показатели.География КАК География,
	|	Показатели.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса,
	|	Показатели.Устройства КАК Устройства,
	|	Показатели.ВремяНаСайте КАК ВремяНаСайте,
	|	Показатели.ИсточникиКампаний КАК ИсточникиКампаний,
	|	Показатели.СценарийАналитики КАК СценарийАналитики,
	|	Показатели.CRM_РекламнаяКампания КАК CRM_РекламнаяКампания,
	|	Показатели.ОбъявлениеРекламнаяКомпания КАК ОбъявлениеРекламнаяКомпания,
	|	Показатели.CRM_Сайт КАК CRM_Сайт,
	|	Показатели.ИдентификаторСвязиПоказателей КАК ИдентификаторСвязиПоказателей,
	|	Показатели.Medium КАК Medium,
	|	Показатели.Source КАК Source,
	|	Показатели.URL КАК URL,
	|	Показатели.Визиты КАК Визиты,
	|	Показатели.Посетители КАК Посетители,
	|	Показатели.Отказы КАК Отказы,
	|	Показатели.ГлубинаПросмотра КАК ГлубинаПросмотра
	|ПОМЕСТИТЬ ТаблицаПоказателей
	|ИЗ
	|	&Показатели КАК Показатели
	|;
	|
	|ВЫБРАТЬ
	|	ПериодДанных,
	|	География,
	|	КаналПервичногоИнтереса,
	|	Устройства,
	|	ВремяНаСайте,
	|	ИсточникиКампаний,
	|	СценарийАналитики,
	|	CRM_РекламнаяКампания,
	|	ОбъявлениеРекламнаяКомпания,
	|	CRM_Сайт,
	|	ИдентификаторСвязиПоказателей,
	|	Medium,
	|	Source,
	|	URL,
	|	СУММА(Визиты) КАК Визиты,
	|	СУММА(Посетители) КАК Посетители,
	|	СУММА(Отказы) КАК Отказы,
	|	СРЕДНЕЕ(ГлубинаПросмотра) КАК ГлубинаПросмотра
	|ИЗ
	|	ТаблицаПоказателей
	|СГРУППИРОВАТЬ ПО
	|	ПериодДанных,
	|	География,
	|	КаналПервичногоИнтереса,
	|	Устройства,
	|	ВремяНаСайте,
	|	ИсточникиКампаний,
	|	СценарийАналитики,
	|	CRM_РекламнаяКампания,
	|	ОбъявлениеРекламнаяКомпания,
	|	CRM_Сайт,
	|	ИдентификаторСвязиПоказателей,
	|	Medium,
	|	Source,
	|	URL");
	Запрос.УстановитьПараметр("Показатели", ТаблицаПоказателей);
	
	Если ДатаЗагрузки = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ДатаЗагрузки) Тогда
		  ПериодДанных = НачалоДня(ТекущаяДатаСеанса() - 86400);
	Иначе ПериодДанных = ДатаЗагрузки;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.CRM_ПоказателиКампаний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПериодДанных.Установить(ПериодДанных);
	НаборЗаписей.Отбор.ИсточникиКампаний.Установить(СтруктураДанных.ИсточникиКампаний);
	НаборЗаписей.Отбор.СценарийАналитики.Установить(СтруктураДанных.СценарийАналитики); 
	НаборЗаписей.Отбор.CRM_Сайт.Установить(СтруктураДанных.CRM_Сайт);
	
	НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
	НаборЗаписей.Записать();

	НаборЗаписей = РегистрыСведений.CRM_ПоказателиКампанийЦелевыеДействия.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИсточникиКампаний.Установить(СтруктураДанных.ИсточникиКампаний);
	НаборЗаписей.Отбор.ПериодДанных.Установить(ПериодДанных);
	НаборЗаписей.Отбор.Сайт.Установить(СтруктураДанных.CRM_Сайт);

	Если ТаблицаЦелевыхДействий.Количество() > 0 Тогда
		НаборЗаписей.Загрузить(ТаблицаЦелевыхДействий);
	КонецЕсли;
	НаборЗаписей.Записать();

КонецПроцедуры

Функция ПолучитьВременнойИнтервал(ПараметрЧисло)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_ИнтервалыВремениНаСайте.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_ИнтервалыВремениНаСайте КАК CRM_ИнтервалыВремениНаСайте
	|ГДЕ
	|	(CRM_ИнтервалыВремениНаСайте.min <= &ПараметрЧисло
	|	И CRM_ИнтервалыВремениНаСайте.max >= &ПараметрЧисло)";
	
	Запрос.УстановитьПараметр("ПараметрЧисло", ПараметрЧисло);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	КонецЕсли;
	
	Возврат Справочники.CRM_ИнтервалыВремениНаСайте.ПустаяСсылка();
	
КонецФункции

Функция СоздатьОбновитьЭлементСправочника(Наименование, ТипСправочника)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипСправочника = "БизнесРегионы" Тогда
		
		ЭлСсылка = ПолучитьБизнесРегионПоНаименованию(Наименование);
		
	Иначе
		
		НовыйЭлемент = Справочники[ТипСправочника].СоздатьЭлемент();
		
		НовыйЭлемент.Наименование = Наименование;
		
		НовыйЭлемент.Записать();
		
		ЭлСсылка = НовыйЭлемент.Ссылка;
		
	КонецЕсли;
	
	Возврат ЭлСсылка;
	
КонецФункции

Функция ЗаписатьИнформациюПоСайтам(Структура) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СайтСсылка = Справочники.CRM_Сайты.НайтиПоНаименованию(Структура.Наименование, Истина);
	
	Если НЕ ЗначениеЗаполнено(СайтСсылка) Тогда
		
		СайтОбъект = Справочники.CRM_Сайты.СоздатьЭлемент();
		
		ЗаполнитьЗначенияСвойств(СайтОбъект, Структура);
		
		СайтОбъект.Записать();
		
		Возврат СайтОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат СайтСсылка;
	
КонецФункции

Процедура СформироватьСписокСчетчиков(СтрокаРезультат, СписокСчетчиков, СтруктураДанных)
	
	МассивСЧетчиков = СтрокаРезультат.Получить("counters");
	
	Для Каждого СтрМас Из МассивСЧетчиков Цикл
		
		СтрВозврат = Новый Структура;
		Структура = Новый Структура;
		
		Статус = СтрМас.Получить("status");
		
		domain = СокрЛП(СтрМас.Получить("site"));
		domain = СтрЗаменить(domain, "https://", "");
		domain = СтрЗаменить(domain, "http://", "");
		
		Структура.Вставить("ПометкаУдаления", ?(Статус = "Active", Ложь, Истина));
		Структура.Вставить("id", СтрЗаменить(СтрМас.Получить("id"), Символы.НПП, ""));
		Структура.Вставить("Наименование", СокрЛП(СтрМас.Получить("name")));
		Структура.Вставить("domain", domain);
		Структура.Вставить("ИсточникиКампаний", СтруктураДанных.ИсточникиКампаний);
		
		Сайт = ЗаписатьИнформациюПоСайтам(Структура);
		
		Если Статус = "Active" Тогда
			
			СтрВозврат.Вставить("id", СтрЗаменить(Строка(СтрМас.Получить("id")), Символы.НПП, ""));
			СтрВозврат.Вставить("Сайт", Сайт);
			СписокСчетчиков.Добавить(СтрВозврат);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДерево(ЧтениеJSON, Дерево)
	
	ИмяСвойства = Неопределено;
	
	Пока ЧтениеJSON.Прочитать() Цикл
		TипJSON = ЧтениеJSON.ТипТекущегоЗначения;
		
		Если TипJSON = ТипЗначенияJSON.НачалоОбъекта 
			ИЛИ TипJSON = ТипЗначенияJSON.НачалоМассива Тогда
			НовыйОбъект = ?(TипJSON = ТипЗначенияJSON.НачалоОбъекта, Новый Соответствие, Новый Массив);
			
			Если ТипЗнч(Дерево) = Тип("Массив") Тогда
				Дерево.Добавить(НовыйОбъект);
			ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") И ЗначениеЗаполнено(ИмяСвойства) Тогда
				Дерево.Вставить(ИмяСвойства, НовыйОбъект);
			КонецЕсли;
			
			СформироватьДерево(ЧтениеJSON, НовыйОбъект);
			
			Если Дерево = Неопределено Тогда
				Дерево = НовыйОбъект;
			КонецЕсли;
		ИначеЕсли TипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
			ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
		ИначеЕсли TипJSON = ТипЗначенияJSON.Число 
			ИЛИ TипJSON = ТипЗначенияJSON.Строка 
			ИЛИ TипJSON = ТипЗначенияJSON.Булево 
			ИЛИ TипJSON = ТипЗначенияJSON.Null Тогда
			Если ТипЗнч(Дерево) = Тип("Массив") Тогда
				Дерево.Добавить(ЧтениеJSON.ТекущееЗначение);
			ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") Тогда
				Дерево.Вставить(ИмяСвойства, ЧтениеJSON.ТекущееЗначение);
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция jsonПрочитать(Значение)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Значение);
	
	Результат = Неопределено;
	СформироватьДерево(ЧтениеJSON, Результат);
	
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаЯндексДиректа

Функция СформироватьСтрокуJSONИзСтруктуры(Объект) Экспорт
	
	СтрокаJSON = "{";
	
	Для каждого Элемент Из Объект Цикл
		
		Если Элемент.Значение = "" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаJSON = СтрокаJSON + """" + Элемент.Ключ + """" + ":";
		
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			СтрокаJSON = СтрокаJSON + """" + Элемент.Значение + """";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
			СтрокаJSON = СтрокаJSON + СтрЗаменить(Строка(Элемент.Значение), Символы.НПП, "");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Булево") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент.Значение, "БЛ=false; БИ=true");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			
			// Преобразование в unixtime
			СтрокаJSON = СтрокаJSON + Формат(Элемент.Значение - Дата(1970, 1, 1, 1, 0, 0), "ЧГ=0");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		Иначе
			СтрокаJSON = СтрокаJSON + """" + Элемент.Значение + """";
		КонецЕсли;
		
		СтрокаJSON = СтрокаJSON + ",";
		
	КонецЦикла;
	
	Если Прав(СтрокаJSON, 1) = "," Тогда
		СтрокаJSON = Лев(СтрокаJSON, СтрДлина(СтрокаJSON) - 1);
	КонецЕсли;
	
	Возврат СтрокаJSON + "}";
	
КонецФункции

Функция СформироватьСтрокуJSONИзМассива(Объект)
	
	СтрокаJSON = "[";
	
	Для каждого Элемент Из Объект Цикл
		СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент) + ",";
	КонецЦикла;
	
	Если Прав(СтрокаJSON, 1) = "," Тогда
		СтрокаJSON = Лев(СтрокаJSON, СтрДлина(СтрокаJSON) - 1);
	КонецЕсли;
	
	Возврат СтрокаJSON + "]";
	
КонецФункции

Функция СформироватьСтрокуJSON(Объект) Экспорт
	
	СтрокаJSON = "";
	
	Если ТипЗнч(Объект) = Тип("Массив") Тогда
		СтрокаJSON = СформироватьСтрокуJSONИзМассива(Объект);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("Структура") Тогда
		СтрокаJSON = СформироватьСтрокуJSONИзСтруктуры(Объект);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ТаблицаЗначений") Тогда
		
		СоставСтруктуры = "";
		Для каждого Колонка Из Объект.Колонки Цикл
			СоставСтруктуры = СоставСтруктуры + ?(ЗначениеЗаполнено(СоставСтруктуры), ",", "") + Колонка.Имя;
		КонецЦикла;
		
		МассивСтрок = Новый Массив;
		Для каждого Строка Из Объект Цикл
			СтруктураКолонок = Новый Структура(СоставСтруктуры);
			ЗаполнитьЗначенияСвойств(СтруктураКолонок, Строка);
			МассивСтрок.Добавить(СтруктураКолонок);
		КонецЦикла;
		
		СтрокаJSON = СформироватьСтрокуJSONИзМассива(МассивСтрок);
	ИначеЕсли ТипЗнч(Объект) = Тип("Строка") Тогда
		СтрокаJSON = СтрокаJSON + """" + КодироватьСтроку(Объект, СпособКодированияСтроки.КодировкаURL) + """";
	КонецЕсли;
	
	Возврат СтрокаJSON;
	
КонецФункции

Процедура ЗапросКода(УникальныйИдентификатор, СтруктураПараметров) Экспорт
	
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
		ЗапросКода(УникальныйИдентификатор, СтруктураПараметров);
	
КонецПроцедуры

// Обменивает заранее полученный код авторизации на токен. Код авторизации нужно
// предварительно поместить в реквизит обработки КодАвторизации. Полученный токен 
// записывается в реквизит Токен. Требуется для работоспособности других методов.
//
Процедура ПолучитьТокен(СтруктураПараметров) Экспорт
	
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().ПолучитьТокен(СтруктураПараметров);
	
КонецПроцедуры

Функция ОбработатьКодСостояния(Знач HttpОтвет, Знач ОтносительныйURL = "", Знач ТелоОтвета = "") Экспорт
	
	Перем ТекстИсключения;
	Если (HttpОтвет.КодСостояния < 200) Или (HttpОтвет.КодСостояния >= 300) Тогда
		ТекстИсключения = НСтр("ru='Запрос:';en='Query:'") + " " + ОтносительныйURL + Символы.ПС;
		ТекстИсключения = ТекстИсключения + НСтр("ru='Код ответа:';en='Answer code:'") + " " 
			+ HttpОтвет.КодСостояния 
			+ Символы.ПС;
		ТекстИсключения = ТекстИсключения + НСтр("ru='Тело ответа:';en='Answer body:'") + " " + ТелоОтвета;
		Возврат ТекстИсключения;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКампанииЯндексДирект(Токен, Логин)
	
	URL = "https://api.direct.yandex.com/json/v5/campaigns";
	HTTPМетод = "POST";
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + Токен);
	HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru");
	HTTPЗапрос.Заголовки.Вставить("Client-Login", Логин);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json; charset=UTF-8");
		
	СтруктураURI = сфпОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("method");
	ЗаписьJSON.ЗаписатьЗначение("get");
	ЗаписьJSON.ЗаписатьИмяСвойства("params");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("SelectionCriteria");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("FieldNames");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	ЗаписьJSON.ЗаписатьЗначение("Id");
	ЗаписьJSON.ЗаписатьЗначение("Name");
	ЗаписьJSON.ЗаписатьЗначение("StartDate");
	ЗаписьJSON.ЗаписатьЗначение("EndDate");
	ЗаписьJSON.ЗаписатьЗначение("State");
	ЗаписьJSON.ЗаписатьЗначение("Status");
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("TextCampaignFieldNames");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	ЗаписьJSON.ЗаписатьЗначение("CounterIds");
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	json = ЗаписьJSON.Закрыть();
	
	HTTPЗапрос.УстановитьТелоИзСтроки(json, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	ИспользоватьЗащищенноеСоединение = ВРЕГ(Лев(URL, 5)) = ВРЕГ("HTTPS");
	
	Если ИспользоватьЗащищенноеСоединение Тогда
		СоединениеOpenSSL = Новый ЗащищенноеСоединениеOpenSSL();
	Иначе
		СоединениеOpenSSL = Неопределено;
	КонецЕсли;
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Протокол = ?(ИспользоватьЗащищенноеСоединение, "https", "http");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси(Протокол);
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, , , Прокси, 60, СоединениеOpenSSL);
	
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос);
	
	РезультатЗапросаСтрокой = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Кампании = Новый ТаблицаЗначений();
	Кампании.Колонки.Добавить("Идентификатор");
	Кампании.Колонки.Добавить("Наименование");
	Кампании.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Кампании.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Кампании.Колонки.Добавить("Состояние");
	Кампании.Колонки.Добавить("Статус");
	Кампании.Колонки.Добавить("МаркетинговоеМероприятие",
		 Новый ОписаниеТипов("СправочникСсылка.МаркетинговыеМероприятия"));
	Кампании.Колонки.Добавить("ЕстьЗатраты", Новый ОписаниеТипов("Булево"));
	Кампании.Колонки.Добавить("Активна", Новый ОписаниеТипов("Булево"));
	Кампании.Колонки.Добавить("Завершено", Новый ОписаниеТипов("Булево"));
	Кампании.Колонки.Добавить("CRM_СквознаяАналитика", Новый ОписаниеТипов("Булево"));
	Кампании.Колонки.Добавить("CRM_Неограниченно", Новый ОписаниеТипов("Булево"));
	Кампании.Колонки.Добавить("ПВХ", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	Кампании.Колонки.Добавить("Сайт");
		
	Если HTTPОтвет.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(РезультатЗапросаСтрокой);
		РезультатЗапросаJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Если РезультатЗапросаJSON.Свойство("error") Тогда
			Ошибка = РезультатЗапросаJSON.error.error_string + ": " + РезультатЗапросаJSON.error.error_detail;
			ВызватьИсключение Ошибка;
		КонецЕсли;
		
		Если РезультатЗапросаJSON.result.Свойство("Campaigns") Тогда
			Для Каждого Кампания Из РезультатЗапросаJSON.result.Campaigns Цикл
				СтрокаКампании = Кампании.Добавить();
				СтрокаКампании.Идентификатор = Формат(Кампания.Id, "ЧГ=");
				СтрокаКампании.Наименование = Кампания.Name;
				СтрокаКампании.ДатаНачала = Дата(СтрЗаменить(Кампания.StartDate, "-", ""));
				Если ЗначениеЗаполнено(Кампания.EndDate) Тогда
					СтрокаКампании.ДатаОкончания = Дата(СтрЗаменить(Кампания.EndDate, "-", ""));
				КонецЕсли;	
				СтрокаКампании.Состояние = Кампания.State;
				СтрокаКампании.Статус = Кампания.Status;
				СтрокаКампании.Активна = ВРЕГ(Кампания.State) = "ON" И ВРЕГ(Кампания.Status) = "ACCEPTED";
				СтрокаКампании.Завершено = НЕ СтрокаКампании.Активна;
				СтрокаКампании.CRM_СквознаяАналитика = Истина;
				СтрокаКампании.CRM_Неограниченно = НЕ ЗначениеЗаполнено(СтрокаКампании.ДатаОкончания);
				Если НЕ ЗначениеЗаполнено(СтрокаКампании.ДатаОкончания) И СтрокаКампании.Завершено Тогда
					СтрокаКампании.ДатаОкончания = ТекущаяДатаСеанса();
				КонецЕсли;	
				
				СтруктураКомпании = ПолучитьРекламнуюКампаниюПоИД(СтрокаКампании, "");
				СтрокаКампании.МаркетинговоеМероприятие = СтруктураКомпании.ИсточникПервичногоИнтереса;
				
				СтруктураTextCampaign = Кампания.TextCampaign;
				Если Не СтруктураTextCampaign.CounterIds = Неопределено Тогда 
					СтрокаКампании.Сайт = СтруктураTextCampaign.CounterIds.Items[0];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура("Ошибка,Кампании", "", Кампании);
	Возврат СтруктураВозврата;
	
КонецФункции	

Процедура ЗагрузкаЗатрат(СтруктураПараметров)  Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	ПоложениеСобачки = СтрНайти(СтруктураПараметров.YD_Login, "@");
	Если ПоложениеСобачки > 0 Тогда 
		  Логин = Лев(СтруктураПараметров.YD_Login, ПоложениеСобачки - 1);
	Иначе Логин = СтруктураПараметров.YD_Login;
	КонецЕсли;
	
	Токен = СтруктураПараметров.YD_Token;
	
	ЗапросКампаний = ПолучитьКампанииЯндексДирект(Токен, Логин);
	Кампании = ЗапросКампаний.Кампании;
	
	Кодировка = "UTF-8";
	Host = "api.direct.yandex.com";
	
	Данные = Новый Структура;
	params = Новый Структура;
	SelectionCriteria = Новый Структура;
	
	Filter = Новый Массив;
	SelectionCriteria.Вставить("Filter", Filter);
	
	Если СтруктураПараметров.Дозагрузка Тогда
		SelectionCriteria.Вставить("DateFrom", Строка(Формат(СтруктураПараметров.ДатаЗагрузки, "ДФ=yyyy-MM-dd")));
		SelectionCriteria.Вставить("DateTo", Строка(Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-dd")));
	КонецЕсли;
	
	FieldNames = Новый Массив;
	FieldNames.Добавить("AdId"); // Идентификатор объявления.
	FieldNames.Добавить("CampaignId"); // Идентификатор кампании.
	FieldNames.Добавить("CampaignName"); // Название кампании.
	FieldNames.Добавить("Clicks"); // Количество кликов.
	FieldNames.Добавить("Cost"); // Стоимость кликов.
	FieldNames.Добавить("Impressions"); // Количество показов.
	FieldNames.Добавить("Date"); // Дата, за которую приведена статистика.	
	FieldNames.Добавить("Criteria"); // Название или текст условия показа
	
	OrderBy = Новый Массив;
	OrderByValue = Новый Структура;
	OrderByValue.Вставить("Field", "Date");
	OrderBy.Добавить(OrderByValue);
	
	params = Новый Структура;
	params.Вставить("SelectionCriteria", SelectionCriteria);
	params.Вставить("FieldNames", FieldNames);
	params.Вставить("OrderBy", OrderBy);
	params.Вставить("ReportType", "CUSTOM_REPORT");
	
	Если СтруктураПараметров.Дозагрузка Тогда
		params.Вставить("ReportName", "CUSTOM_DATE" + Строка(Формат(СтруктураПараметров.ДатаЗагрузки, "ДФ=yyyy-MM-dd")));
		params.Вставить("DateRangeType", "CUSTOM_DATE");
	Иначе
		params.Вставить("ReportName", "Actual Data");
		params.Вставить("DateRangeType", "AUTO");
	КонецЕсли;
	
	params.Вставить("Format", "TSV");
	params.Вставить("IncludeVAT", "YES");
	params.Вставить("IncludeDiscount", "YES");	
	
	Данные.Вставить("params", params);
	
	СтрокаJSON = СформироватьСтрокуJSONИзСтруктуры(Данные);
	
	Заголовки = Новый Соответствие; 
	Заголовки.Вставить("Authorization", "Bearer " + Токен);
	Заголовки.Вставить("Accept-Language", "ru");
	Заголовки.Вставить("Client-Login", Логин);
	Заголовки.Вставить("returnMoneyInMicros", "false");
	Заголовки.Вставить("Content-Type", "application/json; charset=" + Кодировка);
	
	HttpЗапрос = Новый HTTPЗапрос("/json/v5/reports", Заголовки);
	HttpЗапрос.УстановитьТелоИзСтроки(СтрокаJSON);
	
	имяВыходногоФайла = ПолучитьИмяВременногоФайла();
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	HttpСоединение = Новый HTTPСоединение(Host, , , , Прокси, 300, Новый ЗащищенноеСоединениеOpenSSL);
	
	HttpОтвет = HttpСоединение.ОтправитьДляОбработки(HttpЗапрос, имяВыходногоФайла);
	
	Пока HttpОтвет.КодСостояния = 201 ИЛИ HttpОтвет.КодСостояния = 202 Цикл
		HttpСоединение = Новый HTTPСоединение(Host, , , , Прокси, 300, Новый ЗащищенноеСоединениеOpenSSL);
		HttpОтвет = HttpСоединение.ОтправитьДляОбработки(HttpЗапрос, имяВыходногоФайла);
	КонецЦикла;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяВыходногоФайла, Кодировка);
	
	ОтветЗначение = ТекстовыйДокумент.ПолучитьТекст();	
	ОбработатьКодСостояния(HttpОтвет, "/json/v5/reports", ОтветЗначение);
	
	ЧтениеТекст = Новый ЧтениеТекста(ИмяВыходногоФайла, Кодировка);
	
	Стр = ЧтениеТекст.ПрочитатьСтроку();  // Первая строка с датой
	Стр = ЧтениеТекст.ПрочитатьСтроку();  // Шапка
	
	ТЗДанных = Новый ТаблицаЗначений;
	МассивКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр, Символы.Таб, Истина);
	КЧ = Новый КвалификаторыЧисла(12, 3);
	КС = Новый КвалификаторыСтроки(200);
	ЧД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , , КЧ);
	Массив.Очистить();
	Массив.Добавить(Тип("Дата"));
	ОписаниеТиповД = Новый ОписаниеТипов(Массив, , , ЧД);
	
	Для Каждого Колонка Из МассивКолонок Цикл 
		Если Колонка = "Clicks" ИЛИ Колонка = "Cost" ИЛИ Колонка = "Impressions" Тогда 
			ТЗДанных.Колонки.Добавить(Колонка, ОписаниеТиповЧ);
		ИначеЕсли Колонка = "Date" Тогда 
			ТЗДанных.Колонки.Добавить(Колонка, ОписаниеТиповД);
		Иначе
			ТЗДанных.Колонки.Добавить(Колонка, ОписаниеТиповС);
		КонецЕсли;
	КонецЦикла;
	
	Пока ЗначениеЗаполнено(Стр) Цикл
		
		Стр = ЧтениеТекст.ПрочитатьСтроку();
		МассивЗначений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр, Символы.Таб, Истина);
		
		Если МассивЗначений.Количество() = МассивКолонок.Количество() Тогда
			
			СтрокаТЗ = ТЗДанных.Добавить();
			Инд = 0;
			
			Для Каждого Колонка Из МассивКолонок Цикл
				
				Если Колонка = "Clicks" ИЛИ Колонка = "Cost" ИЛИ Колонка = "Impressions" Тогда 
					СтрокаТЗ[Колонка] = xmlЗначение(тип("Число"), МассивЗначений[Инд]);
				ИначеЕсли Колонка = "Date" Тогда 
					СтрокаТЗ[Колонка] = xmlЗначение(тип("Дата"), МассивЗначений[Инд]);
				Иначе
					СтрокаТЗ[Колонка] = МассивЗначений[Инд];
				КонецЕсли;
				
				Инд = Инд + 1;
				
			КонецЦикла;	
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТЗДанных.Количество() > 0 Тогда
		ТЗФраз = ТЗДанных.Скопировать(, "AdId,Criteria");
		ТЗФраз.Свернуть("AdId,Criteria");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.AdId КАК AdId,
		|	ТЗ.CampaignId КАК CampaignId,
		|	ТЗ.CampaignName КАК CampaignName,
		|	ТЗ.Clicks КАК Clicks,
		|	ТЗ.Cost КАК Cost,
		|	ТЗ.Impressions КАК Impressions,
		|	ТЗ.Date КАК Date
		|ПОМЕСТИТЬ ВТ_ТЗ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТЗ.AdId КАК AdId,
		|	ВТ_ТЗ.CampaignId КАК CampaignId,
		|	ВТ_ТЗ.CampaignName КАК CampaignName,
		|	СУММА(ВТ_ТЗ.Clicks) КАК Clicks,
		|	СУММА(ВТ_ТЗ.Cost) КАК Cost,
		|	СУММА(ВТ_ТЗ.Impressions) КАК Impressions,
		|	ВТ_ТЗ.Date КАК Date
		|ПОМЕСТИТЬ ВТ_Итого
		|ИЗ
		|	ВТ_ТЗ КАК ВТ_ТЗ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТЗ.AdId,
		|	ВТ_ТЗ.CampaignId,
		|	ВТ_ТЗ.CampaignName,
		|	ВТ_ТЗ.Date
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Итого.AdId КАК AdId,
		|	ВТ_Итого.CampaignId КАК CampaignId,
		|	ВТ_Итого.CampaignName КАК CampaignName,
		|	ВТ_Итого.Clicks КАК Clicks,
		|	ВТ_Итого.Cost КАК Cost,
		|	ВТ_Итого.Impressions КАК Impressions,
		|	ВТ_Итого.Date КАК Date,
		|	ВЫБОР
		|		КОГДА ВТ_Итого.Clicks <> 0
		|			ТОГДА ВТ_Итого.Cost / ВТ_Итого.Clicks
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Average
		|ИЗ
		|	ВТ_Итого КАК ВТ_Итого";
		Запрос.УстановитьПараметр("ТЗ", ТЗДанных); 	
		РезультатЗапроса = Запрос.Выполнить();
		
		СтрокаДанных = РезультатЗапроса.Выбрать();
		Пока СтрокаДанных.Следующий() Цикл
			НайденныеСтроки = Кампании.НайтиСтроки(Новый Структура("Идентификатор", СтрокаДанных["CampaignId"]));
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаКампании = Кампании.Добавить();
				СтрокаКампании.Идентификатор = СтрокаДанных["CampaignId"];
				СтрокаКампании.Наименование =  СтрокаДанных["CampaignName"];
				СтрокаКампании.ДатаНачала = ТекущаяДатаСеанса();
				
				СтруктураКомпании = ПолучитьРекламнуюКампаниюПоИД(СтрокаКампании, "");
				СтрокаКампании.МаркетинговоеМероприятие = СтруктураКомпании.ИсточникПервичногоИнтереса;
				
			Иначе
				СтрокаКампании = НайденныеСтроки[0];
			КонецЕсли;
			СтрокаКампании.ЕстьЗатраты = Истина;
						
			ИД = СтрокаДанных["AdId"];
			
			Попытка
				ЧислоИД = Число(ИД);
			
			Исключение ЧислоИД = 0;
			КонецПопытки;
			
			Если ЧислоИД > 0 Тогда
				Спрссылка = Справочники.CRM_ОбъявленияРекламныхКампаний.НайтиПоРеквизиту("id", ИД,
					 СтрокаКампании.МаркетинговоеМероприятие);
				Если ЗначениеЗаполнено(Спрссылка) Тогда
					Объявление = Спрссылка;
					
				Иначе
					Наименование = ПолучитьОбъявление(ИД, СтруктураПараметров);
					
					СпрОбъект = Справочники.CRM_ОбъявленияРекламныхКампаний.СоздатьЭлемент();
					СпрОбъект.Id = ИД;
					СпрОбъект.Наименование = Наименование;
					СпрОбъект.Владелец = СтрокаКампании.МаркетинговоеМероприятие;
					МассивФраз = ТЗФраз.НайтиСтроки(Новый Структура("AdId", ИД)); 
					Для Каждого Фраза Из МассивФраз Цикл 
						НоваяФраза = СпрОбъект.ПоисковыеФразы.Добавить();
						НоваяФраза.Фраза = Фраза["Criteria"];
					КонецЦикла;
					
					СпрОбъект.Записать();
					
					Объявление = СпрОбъект.Ссылка;
				КонецЕсли;
				
			Иначе
				Объявление = Справочники.CRM_ОбъявленияРекламныхКампаний.ПустаяСсылка();
			КонецЕсли;
			
			Набор = РегистрыСведений.CRM_ЗатратыРекламныхКампаний.СоздатьНаборЗаписей();
			Набор.Отбор.Дата.Установить(СтрокаДанных["Date"]);
			Набор.Отбор.ИсточникиКампаний.Установить(СтруктураПараметров.ИсточникиКампаний);
			Набор.Отбор.СценарийАналитики.Установить(СтруктураПараметров.СценарийАналитики);
			Набор.Отбор.CRM_РекламнаяКампания.Установить(СтрокаКампании.МаркетинговоеМероприятие);
			Набор.Отбор.ОбъявленияРекламныхКампаний.Установить(Объявление);
			Набор.Отбор.Валюта.Установить(СтруктураПараметров.YD_Валюта);
						
			Запись = Набор.Добавить();		
			Запись.Дата = СтрокаДанных["Date"];
			Запись.ИсточникиКампаний = СтруктураПараметров.ИсточникиКампаний;
			Запись.СценарийАналитики = СтруктураПараметров.СценарийАналитики;
			Запись.CRM_РекламнаяКампания = СтрокаКампании.МаркетинговоеМероприятие;
			Запись.Валюта = СтруктураПараметров.YD_Валюта; 
			Запись.ОбъявленияРекламныхКампаний = Объявление;
			Запись.Показы = СтрокаДанных["Impressions"];
			Запись.Клики = СтрокаДанных["Clicks"]; 
			Запись.СредняяЦенаКлика = СтрокаДанных["Average"];
			
			Если СтрокаКампании.Сайт <> Неопределено Тогда
				СписокСчетчиков = СтруктураПараметров.СписокСчетчиков;
				Для Каждого СтрСчетчик Из СписокСчетчиков Цикл
					Если Число(СтрСчетчик.id) = СтрокаКампании.Сайт Тогда
						Запись.Сайт = СтрСчетчик.Сайт;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Набор.Записать(Истина);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьОбъявление(ИД, СтруктураПараметров)
	
	Кодировка = "UTF-8";
	Host = "api.direct.yandex.com";
	
	Данные = Новый Структура;
	params = Новый Структура;
	SelectionCriteria = Новый Структура;
	
	Filter = Новый Массив;	
	Filter.Добавить(ИД);
	SelectionCriteria.Вставить("Ids", Filter);
	
	FieldNames = Новый Массив;
	FieldNames.Добавить("AdCategories");
	FieldNames.Добавить("AgeLabel");
	FieldNames.Добавить("AdGroupId");
	FieldNames.Добавить("CampaignId");
	FieldNames.Добавить("Id");
	FieldNames.Добавить("State");
	FieldNames.Добавить("Status");
	FieldNames.Добавить("StatusClarification");
	FieldNames.Добавить("Type");
	FieldNames.Добавить("Subtype");
	
	TextAdFieldNames = Новый Массив;
	TextAdFieldNames.Добавить("Title");
	TextAdFieldNames.Добавить("Title2");
	TextAdFieldNames.Добавить("Text");
	params = Новый Структура;
	params.Вставить("SelectionCriteria", SelectionCriteria);
	params.Вставить("FieldNames", FieldNames);
	params.Вставить("TextAdFieldNames", TextAdFieldNames);
	
	Данные.Вставить("params", params);
	Данные.Вставить("method", "get");
	СтрокаJSON = СформироватьСтрокуJSONИзСтруктуры(Данные);
	
	Заголовки = Новый Соответствие; 
	ПоложениеСобачки = СтрНайти(СтруктураПараметров.YD_Login, "@");
	Если ПоложениеСобачки <> 0 Тогда 
		Login = Лев(СтруктураПараметров.YD_Login, ПоложениеСобачки - 1);
	Иначе
		Login = СтруктураПараметров.YD_Login;
	КонецЕсли;
	
	Заголовки.Вставить("Authorization", "Bearer " + СтруктураПараметров.YD_Token);
	Заголовки.Вставить("Accept-Language", "ru");
	Заголовки.Вставить("Client-Login", Login);
	Заголовки.Вставить("returnMoneyInMicros", "false");
	Заголовки.Вставить("Content-Type", "application/json; charset=" + Кодировка);
	
	HttpЗапрос = Новый HTTPЗапрос("json/v5/ads", Заголовки);
	HttpЗапрос.УстановитьТелоИзСтроки(СтрокаJSON);
	
	имяВыходногоФайла = ПолучитьИмяВременногоФайла();
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	HttpСоединение = Новый HTTPСоединение(Host, , , , Прокси, 60, Новый ЗащищенноеСоединениеOpenSSL);
	HttpОтвет = HttpСоединение.ОтправитьДляОбработки(HttpЗапрос, имяВыходногоФайла);
	ОбработатьКодСостояния(HttpОтвет, "/json/v5/ads");
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяВыходногоФайла, Кодировка);
	
	ОтветЗначение = ТекстовыйДокумент.ПолучитьТекст();
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ОтветЗначение);
	Ответ = ФабрикаXDTO.ПрочитатьJSON(Чтение);
	Свойства = Ответ.Свойства();
	Если Свойства.Получить("error") <> Неопределено Тогда
		error_detail = ПолучитьЗначениеСвойстваXDTO(НайтиУзелРекурсионно("error_detail", Ответ));
		ВызватьИсключение error_detail;
	КонецЕсли;
	
	Type = ПолучитьЗначениеСвойстваXDTO(НайтиУзелРекурсионно("Type", Ответ));
	Если Type = "IMAGE_AD" ИЛИ Type = "MOBILE_APP_AD"  Тогда
		Возврат ИД;
	ИначеЕсли Type = "TEXT_AD" ИЛИ Type = "DYNAMIC_TEXT_AD"  Тогда		
		Возврат ПолучитьЗначениеСвойстваXDTO(НайтиУзелРекурсионно("Text", Ответ));
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначениеСвойстваXDTO(Свойство)
	
	Если ТипЗнч(Свойство) = Тип("СвойствоXDTO") Тогда 
		Возврат Свойство.ОбъектВладелец[Свойство.Имя];
	КонецЕсли;
	
КонецФункции

Функция НайтиУзелРекурсионно(Узел, Данные)
	
	Последовательность = Данные.Последовательность().Владелец;	
	Свойства = Данные.Свойства();
	
	Для Каждого Свойство Из Свойства Цикл
		Если ТипЗнч(Свойство) = Тип("СвойствоXDTO") Тогда 
			Если Свойство.Имя = Узел Тогда 
				Возврат Свойство;
			Иначе
				Если ТипЗнч(Последовательность[Свойство.Имя]) = Тип("ОбъектXDTO") Тогда 
					НайденныйУзел =  НайтиУзелРекурсионно(Узел, Последовательность[Свойство.Имя]);
					Если НайденныйУзел = Неопределено Тогда
						Продолжить;
					Иначе
						Возврат НайденныйУзел;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область ВнешняяОбработка

Процедура ПродолжитьВыполнениеЗаданияВнешняяОбработка(Структура)
	
	Если ЗначениеЗаполнено(Структура.ИсточникиКампаний) Тогда
		Если ТипЗнч(Структура.ИсточникиКампаний) = тип("СправочникСсылка.CRM_ИсточникиРекламныхКампаний") Тогда
			ВыполнитьВнешнуюОбработку(Структура.ИсточникиКампаний.ОбработкаДействия);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьВнешнуюОбработку(ВнешняяОбработка)
	
	Если ЗначениеЗАполнено(ВнешняяОбработка) Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(ВнешняяОбработка.Получить(), Новый УникальныйИдентификатор());
		
		ПараметрыЗащиты = Новый("ОписаниеЗащитыОтОпасныхДействий" + "");
		ПараметрыЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь; 
		
		Обработка =  ВнешниеОбработки.Создать(ВнешниеОбработки.Подключить(АдресХранилища, , Ложь, ПараметрыЗащиты), Ложь);
		Если НЕ Обработка = Неопределено Тогда
			Обработка.ВыполнитьДействие(); // Возвращает Результат.
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Roistat

Функция ПолучитьБизнесРегион(Страна, Регион, Город)
	
	УстановитьПривилегированныйРежим(Истина);
	
	БизнесРегион = Справочники.БизнесРегионы.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Страна) Тогда
		ТекСтрана = Справочники.БизнесРегионы.НайтиПоНаименованию(Страна, Истина, Справочники.БизнесРегионы.ПустаяСсылка());
		Если ТекСтрана.Пустая() Тогда
			ТекОбъект = Справочники.БизнесРегионы.СоздатьЭлемент();
			ТекОбъект.Наименование = Страна;
			ТекОбъект.Записать();
			
			ТекСтрана = ТекОбъект.Ссылка;
		КонецЕсли;
		
		БизнесРегион = ТекСтрана;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Регион) И ВРег(Регион) <> ВРег(Страна) Тогда
		ТекРегион = Справочники.БизнесРегионы.НайтиПоНаименованию(Регион, Истина);
		Если ТекРегион.Пустая() Тогда
			ТекОбъект = Справочники.БизнесРегионы.СоздатьЭлемент();
			ТекОбъект.Наименование = Регион;
			ТекОбъект.Родитель = БизнесРегион;
			ТекОбъект.Записать();
			
			ТекРегион = ТекОбъект.Ссылка;
			
		ИначеЕсли ТекРегион.Родитель <> БизнесРегион Тогда
			ТекОбъект = ТекРегион.ПолучитьОбъект();
			ТекОбъект.Родитель = БизнесРегион;
			ТекОбъект.Записать();
		КонецЕсли;
		
		БизнесРегион = ТекРегион;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Город) И Врег(Город) <> Врег(Страна) И Врег(Город) <> Врег(Регион) Тогда
		ТекГород = Справочники.БизнесРегионы.НайтиПоНаименованию(Город, Истина);
		Если ТекГород.Пустая() Тогда
			ТекОбъект = Справочники.БизнесРегионы.СоздатьЭлемент();
			ТекОбъект.Наименование = Город;
			ТекОбъект.Родитель = БизнесРегион;
			ТекОбъект.Записать();
			
			ТекГород = ТекОбъект.Ссылка;
			
		ИначеЕсли ТекГород.Родитель <> БизнесРегион Тогда
			ТекОбъект = ТекГород.ПолучитьОбъект();
			ТекОбъект.Родитель = БизнесРегион;
			ТекОбъект.Записать();
		КонецЕсли;
		
		БизнесРегион = ТекГород;
	КонецЕсли;
	
	Возврат БизнесРегион;
	
КонецФункции

Функция ПолучитьРекламнуюКомпанию(КампанияИдентификатор, КампанияНаименование, utm_campaign)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Кампания = Справочники.МаркетинговыеМероприятия.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(КампанияИдентификатор) Тогда
		ПВХ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ИДМаркетинговоеМероприятие");
	    Кампания = ПолучитьМаркетинговоеМероприятиеПоИД(КампанияИдентификатор, ПВХ);
		Если Кампания.Пустая() Тогда
			ТекОбъект = Справочники.МаркетинговыеМероприятия.СоздатьЭлемент();
			ТекОбъект.CRM_UTMМетка = utm_campaign;
			ТекОбъект.Наименование = КампанияНаименование;
			ТекОбъект.CRM_СквознаяАналитика = Истина;
			ТекОбъект.CRM_Неограниченно = Истина;
			
			СтрокаРеквизита = ТекОбъект.ДополнительныеРеквизиты.Добавить();
			СтрокаРеквизита.Свойство = ПВХ;
			СтрокаРеквизита.Значение = КампанияИдентификатор;
			
			ТекОбъект.Записать();
			
			Кампания = ТекОбъект.Ссылка;
		КонецЕсли;
		
		Возврат Кампания;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(utm_campaign) Тогда
		Кампания = Справочники.МаркетинговыеМероприятия.НайтиПоРеквизиту("CRM_UTMМетка", utm_campaign);
		Если Кампания.Пустая() Тогда
			ТекОбъект = Справочники.МаркетинговыеМероприятия.СоздатьЭлемент();
			ТекОбъект.CRM_UTMМетка = utm_campaign;
			ТекОбъект.Наименование = utm_campaign;
			ТекОбъект.CRM_СквознаяАналитика = Истина;
			ТекОбъект.CRM_Неограниченно = Истина;
			ТекОбъект.Записать();
			
			Кампания = ТекОбъект.Ссылка;
		КонецЕсли;
		
		Возврат Кампания;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КампанияНаименование) Тогда
		Кампания = Справочники.МаркетинговыеМероприятия.НайтиПоНаименованию(КампанияНаименование, Истина);
		Если Кампания.Пустая() Тогда
			ТекОбъект = Справочники.МаркетинговыеМероприятия.СоздатьЭлемент();
			ТекОбъект.Наименование = КампанияНаименование;
			ТекОбъект.CRM_СквознаяАналитика = Истина;
			ТекОбъект.CRM_Неограниченно = Истина;
			ТекОбъект.Записать();
			
			Кампания = ТекОбъект.Ссылка;
		КонецЕсли;
		
		Возврат Кампания;
	КонецЕсли;
	
	Возврат Кампания;
	
КонецФункции	

Функция ПолучитьРекламноеОбъявление(ОбъявлениеИдентификатор, ОбъявлениеНаименование, Кампания)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объявление = Справочники.CRM_ОбъявленияРекламныхКампаний.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ОбъявлениеИдентификатор) И ЗначениеЗаполнено(Кампания) Тогда
		Объявление = Справочники.CRM_ОбъявленияРекламныхКампаний.НайтиПоРеквизиту("id", ОбъявлениеИдентификатор, Кампания);
		Если Объявление.Пустая() Тогда
			ТекОбъект = Справочники.CRM_ОбъявленияРекламныхКампаний.СоздатьЭлемент();
			ТекОбъект.Id = ОбъявлениеИдентификатор;
			ТекОбъект.Наименование = ОбъявлениеНаименование;
			ТекОбъект.Владелец = Кампания;
			ТекОбъект.Записать();
			
			Объявление = ТекОбъект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Объявление;
	
КонецФункции

Функция ПолучитьУстройство(УстройствоНаименование)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Устройство = Справочники.CRM_Устройства.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(УстройствоНаименование) Тогда
		Устройство = Справочники.CRM_Устройства.НайтиПоНаименованию(УстройствоНаименование, Истина);
		Если Устройство.Пустая() Тогда
			ТекОбъект = Справочники.CRM_Устройства.СоздатьЭлемент();
			ТекОбъект.Наименование = УстройствоНаименование;
			ТекОбъект.Записать();
			
			Устройство = ТекОбъект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Устройство;
	
КонецФункции

Функция ПолучитьСайт(СайтНаименование)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сайт = Справочники.CRM_Сайты.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(СайтНаименование) Тогда
		Сайт = Справочники.CRM_Сайты.НайтиПоНаименованию(СайтНаименование, Истина);
		Если Сайт.Пустая() Тогда
			ТекОбъект = Справочники.CRM_Сайты.СоздатьЭлемент();
			ТекОбъект.Наименование = СайтНаименование;
			ТекОбъект.Записать();
			
			Сайт = ТекОбъект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Сайт;
	
КонецФункции

Функция ПолучитьДанныеПроектаRoistat(Проект, Ключ, Параметры, ДатаЗапроса, Затраты = Ложь)
	
	КоличествоЧасовСутки = 24;
	КоличествоЧасовОтКонцаДня = 3;
	МинутВЧасе = 60;
	СекундВМинуте = 60;
	СдвигСекунда = 1;
	
	ДатаНачалаЗапроса = КонецДня(ДатаЗапроса) - КоличествоЧасовСутки * МинутВЧасе * СекундВМинуте;
	НачПериода = КонецДня(ДатаНачалаЗапроса) - КоличествоЧасовОтКонцаДня * МинутВЧасе * СекундВМинуте + СдвигСекунда;
	НачалоПериода = Формат(НачПериода, "ДФ=yyyy-MM-ddTHH:mm:ss+0000");
	
	КонПериода = КонецДня(ДатаЗапроса) - КоличествоЧасовОтКонцаДня * МинутВЧасе * СекундВМинуте;
	ОкончаниеПериода = Формат(КонПериода, "ДФ=yyyy-MM-ddTHH:mm:ss+0000");
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("dimensions");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	Если Затраты Тогда
		ЗаписьJSON.ЗаписатьЗначение("marker_level_1");
		ЗаписьJSON.ЗаписатьЗначение("marker_level_2");
		ЗаписьJSON.ЗаписатьЗначение("marker_level_3");
		ЗаписьJSON.ЗаписатьЗначение("marker_level_4");
		ЗаписьJSON.ЗаписатьЗначение("host");
		
	Иначе	
		Если Параметры.КаналПервичногоИнтереса Тогда
			ЗаписьJSON.ЗаписатьЗначение("marker_level_1");
		КонецЕсли;
		Если Параметры.РекламнаяКампания Тогда
			ЗаписьJSON.ЗаписатьЗначение("marker_level_2");
			ЗаписьJSON.ЗаписатьЗначение("marker_level_3");
			ЗаписьJSON.ЗаписатьЗначение("utm_campaign");
		КонецЕсли;
		Если Параметры.Source Тогда
			ЗаписьJSON.ЗаписатьЗначение("utm_source");
		КонецЕсли;
		Если Параметры.Medium Тогда
			ЗаписьJSON.ЗаписатьЗначение("utm_medium");
		КонецЕсли;
		Если Параметры.РекламнаяКампания Тогда
			ЗаписьJSON.ЗаписатьЗначение("marker_level_4");
		КонецЕсли;
		ЗаписьJSON.ЗаписатьЗначение("host");
		Если Параметры.Устройства Тогда
			ЗаписьJSON.ЗаписатьЗначение("device_type");
		КонецЕсли;
		Если Параметры.География Тогда
			ЗаписьJSON.ЗаписатьЗначение("city");
			ЗаписьJSON.ЗаписатьЗначение("region");
			ЗаписьJSON.ЗаписатьЗначение("country");
		КонецЕсли;	
		Если Параметры.URL Тогда
			ЗаписьJSON.ЗаписатьЗначение("referrer");
		КонецЕсли;
	КонецЕсли;
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("period");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("from");
	ЗаписьJSON.ЗаписатьЗначение(НачалоПериода);
	ЗаписьJSON.ЗаписатьИмяСвойства("to");
	ЗаписьJSON.ЗаписатьЗначение(ОкончаниеПериода);
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("filters");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("metrics");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("metric");
	ЗаписьJSON.ЗаписатьЗначение("visits");
	ЗаписьJSON.ЗаписатьИмяСвойства("attribution");
	ЗаписьJSON.ЗаписатьЗначение("default");
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("metric");
	ЗаписьJSON.ЗаписатьЗначение("impressions");
	ЗаписьJSON.ЗаписатьИмяСвойства("attribution");
	ЗаписьJSON.ЗаписатьЗначение("default");
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("metric");
	ЗаписьJSON.ЗаписатьЗначение("unique_visits");
	ЗаписьJSON.ЗаписатьИмяСвойства("attribution");
	ЗаписьJSON.ЗаписатьЗначение("default");
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("metric");
	ЗаписьJSON.ЗаписатьЗначение("conversion_visits_to_leads");
	ЗаписьJSON.ЗаписатьИмяСвойства("attribution");
	ЗаписьJSON.ЗаписатьЗначение("default");
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("metric");
	ЗаписьJSON.ЗаписатьЗначение("leads");
	ЗаписьJSON.ЗаписатьИмяСвойства("attribution");
	ЗаписьJSON.ЗаписатьЗначение("default");
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("metric");
	ЗаписьJSON.ЗаписатьЗначение("mc_leads");
	ЗаписьJSON.ЗаписатьИмяСвойства("attribution");
	ЗаписьJSON.ЗаписатьЗначение("default");
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("metric");
	ЗаписьJSON.ЗаписатьЗначение("conversion_leads_to_sales");
	ЗаписьJSON.ЗаписатьИмяСвойства("attribution");
	ЗаписьJSON.ЗаписатьЗначение("default");
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("metric");
	ЗаписьJSON.ЗаписатьЗначение("sales");
	ЗаписьJSON.ЗаписатьИмяСвойства("attribution");
	ЗаписьJSON.ЗаписатьЗначение("default");
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("metric");
	ЗаписьJSON.ЗаписатьЗначение("revenue");
	ЗаписьJSON.ЗаписатьИмяСвойства("attribution");
	ЗаписьJSON.ЗаписатьЗначение("default");
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("metric");
	ЗаписьJSON.ЗаписатьЗначение("average_sale");
	ЗаписьJSON.ЗаписатьИмяСвойства("attribution");
	ЗаписьJSON.ЗаписатьЗначение("default");
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("metric");
	ЗаписьJSON.ЗаписатьЗначение("profit");
	ЗаписьJSON.ЗаписатьИмяСвойства("attribution");
	ЗаписьJSON.ЗаписатьЗначение("default");
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("metric");
	ЗаписьJSON.ЗаписатьЗначение("marketing_cost");
	ЗаписьJSON.ЗаписатьИмяСвойства("attribution");
	ЗаписьJSON.ЗаписатьЗначение("default");
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("metric");
	ЗаписьJSON.ЗаписатьЗначение("roi");
	ЗаписьJSON.ЗаписатьИмяСвойства("attribution");
	ЗаписьJSON.ЗаписатьЗначение("default");
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("metric");
	ЗаписьJSON.ЗаписатьЗначение("calls");
	ЗаписьJSON.ЗаписатьИмяСвойства("attribution");
	ЗаписьJSON.ЗаписатьЗначение("default");
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("metric");
	ЗаписьJSON.ЗаписатьЗначение("net_cost");
	ЗаписьJSON.ЗаписатьИмяСвойства("attribution");
	ЗаписьJSON.ЗаписатьЗначение("default");
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("metric");
	ЗаписьJSON.ЗаписатьЗначение("cpc");
	ЗаписьJSON.ЗаписатьИмяСвойства("attribution");
	ЗаписьJSON.ЗаписатьЗначение("default");
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("settings");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("is_use_all_multichannel_visits");
	ЗаписьJSON.ЗаписатьЗначение("false");
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	json = ЗаписьJSON.Закрыть();
	
	ИмяСервера 	= "cloud.roistat.com/api/v1";	
	АдресРесурса = "/project/analytics/data";
	стрЗапроса = "?project=" + Формат(Проект, "ЧГ=") + "&key=" + Ключ;
	
	Заголовки = Новый Соответствие;
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса + стрЗапроса, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(json, КодировкаТекста.UTF8);
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(ИмяСервера, , , , Прокси, 60, Новый ЗащищенноеСоединениеOpenSSL);
	
	HTTPМетод = "POST";
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос);

	Если HTTPОтвет.КодСостояния <> 200 Тогда
		ВызватьИсключение НСтр("ru='Проблема с получение данных Roistat';en='NTRS'");
	КонецЕсли;

	РезультатЗапроса = HTTPОтвет.ПолучитьТелоКакСтроку();

	ДанныеПроекта = Новый Массив();

	СтрОшибки = "";

	Если ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Попытка
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(РезультатЗапроса);
			РезультатЗапросаJSON = ПрочитатьJSON(ЧтениеJSON,, "dateFrom");
			ЧтениеJSON.Закрыть();

			Если РезультатЗапросаJSON.Свойство("data") Тогда
				ДанныеПроекта = РезультатЗапросаJSON.data;

			Иначе
				Если РезультатЗапросаJSON.Свойство("status") Тогда
					Если РезультатЗапросаJSON.status = "error" Тогда
						СтрОшибки = РезультатЗапросаJSON.error;
					КонецЕсли;
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(СтрОшибки) Тогда
					СтрОшибки = РезультатЗапроса;
				КонецЕсли;
			КонецЕсли;

		Исключение
			СтрОшибки = ОписаниеОшибки() + Символы.ПС + РезультатЗапроса;
		КонецПопытки;

	Иначе
		СтрОшибки = НСтр("ru='Данные отсутствут';en=''");
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрОшибки) Тогда
		ВызватьИсключение НСтр("ru='При обработке данных Roistat произошла ошибка: ';en=''") + СтрОшибки;
	КонецЕсли;

	Возврат ДанныеПроекта;

КонецФункции

Процедура ПолучитьДанныеЗатратRoistat(Параметры, ДатаЗапроса = Неопределено)
	
	Если ДатаЗапроса = Неопределено Тогда
		ДатаЗапроса = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	json = ЗаписьJSON.Закрыть();
	
	ИмяСервера 	= "cloud.roistat.com/api/v1";	
	АдресРесурса = "/user/projects";
	стрЗапроса = "?key=" + Параметры.OAuthТокен;
	
	ВыбранныйПроект = Параметры.НомерПроекта;
	
	Заголовки = Новый Соответствие;
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса + стрЗапроса, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(json, КодировкаТекста.UTF8);
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(ИмяСервера, , , , Прокси, 60, Новый ЗащищенноеСоединениеOpenSSL);
	
	HTTPМетод = "GET";
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос);
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru='Проблема с получение данных roistat';en='NTRS'"),
			 УровеньЖурналаРегистрации.Ошибка, , ,
			 Параметры.ИсточникиКампаний);
	КонецЕсли;
	
	РезультатЗапроса = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(РезультатЗапроса);
	РезультатЗапросаJSON = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Если РезультатЗапросаJSON.Свойство("projects") Тогда
		НаборЗаписей = РегистрыСведений.CRM_ЗатратыРекламныхКампаний.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Дата.Установить(ДатаЗапроса);
		НаборЗаписей.Отбор.ИсточникиКампаний.Установить(Параметры.ИсточникиКампаний);
		НаборЗаписей.Отбор.СценарийАналитики.Установить(Параметры.СценарийАналитики);
		
		ТаблицаЗаписей = НаборЗаписей.Выгрузить();

		Для Каждого ТекПроект Из РезультатЗапросаJSON.projects Цикл
			ИдентификаторПроекта = ТекПроект.id;
			Если ЗначениеЗаполнено(ВыбранныйПроект) И Не (Формат(ВыбранныйПроект, "ЧГ=") = Формат(ИдентификаторПроекта, "ЧГ=")) Тогда
				Продолжить;
			КонецЕсли;
						
			ДанныеПроекта = ПолучитьДанныеПроектаRoistat(ИдентификаторПроекта, Параметры.OAuthТокен,
				 Параметры, ДатаЗапроса,
				 Истина);
			
			Для Каждого СтрокаДаты Из ДанныеПроекта Цикл
				Для Каждого ТекДанные Из СтрокаДаты.items Цикл
					КоличествоКлики = 0;
					КоличествоПоказы = 0;
					СредняяЦенаКлика = 0;
					
					Для Каждого ТекМетрика Из ТекДанные.metrics Цикл
						ИмяМетрики = ТекМетрика.metric_name;
						ЗначениеМетрики = ТекМетрика.value;
						
						Если ИмяМетрики = "visits" Тогда
							КоличествоКлики = ЗначениеМетрики;
						
						ИначеЕсли ИмяМетрики = "impressions" Тогда
							КоличествоПоказы = ЗначениеМетрики;
							
						ИначеЕсли ИмяМетрики = "cpc" Тогда
							СредняяЦенаКлика = ЗначениеМетрики;
							
						ИначеЕсли ИмяМетрики = "marketing_cost" Тогда
						КонецЕсли;	
					КонецЦикла;
					
					Если КоличествоКлики = 0 И КоличествоПоказы = 0 И СредняяЦенаКлика = 0 Тогда
						Продолжить;
					КонецЕсли;	
					
					Если ТекДанные.dimensions.Свойство("marker_level_1") Тогда
						  КаналНаименование = СтрЗаменить(ТекДанные.dimensions.marker_level_1.title, " ", " ");
					Иначе КаналНаименование = "";	
					КонецЕсли;	
					
					Если КаналНаименование = "Прямые визиты" Тогда
						КампанияИдентификатор = "";
						КампанияНаименование = "";
						ОбъявлениеИдентификатор = "";
						ОбъявлениеНаименование = "";
						
					ИначеЕсли КаналНаименование = "Визиты с сайтов" Тогда
						КампанияИдентификатор = "";
						КампанияНаименование = ТекДанные.dimensions.marker_level_2.title;
						ОбъявлениеИдентификатор = "";
						ОбъявлениеНаименование = "";	

					Иначе
						КампанияИдентификатор = ТекДанные.dimensions.marker_level_3.value;
						КампанияИдентификатор = ?(КампанияИдентификатор = "/", "", КампанияИдентификатор);
						Если ЗначениеЗаполнено(КампанияИдентификатор) Тогда
							КампанияНаименование = ТекДанные.dimensions.marker_level_3.title;

						Иначе	
							КампанияНаименование = ТекДанные.dimensions.marker_level_2.title;
						КонецЕсли;
						
						ОбъявлениеИдентификатор = ТекДанные.dimensions.marker_level_4.value;
						ОбъявлениеНаименование = ТекДанные.dimensions.marker_level_4.title;
					КонецЕсли;	
					utm_campaign = "";
					
					РекламнаяКампания = ПолучитьРекламнуюКомпанию(КампанияИдентификатор, КампанияНаименование, utm_campaign);
					РекламноеОбъявление = ПолучитьРекламноеОбъявление(ОбъявлениеИдентификатор,
						 ОбъявлениеНаименование,
						 РекламнаяКампания);
					
					Сайт = ТекДанные.dimensions.host.value;
					Позиция = СтрНайти(Сайт, ".", НаправлениеПоиска.СКонца, , 2);
					Если Позиция > 0 Тогда
						Сайт = Сред(Сайт, Позиция + 1);
					КонецЕсли;	
					
					Сайт = ПолучитьСайт(Сайт);
					
					ТекЗапись = ТаблицаЗаписей.Добавить();
					ТекЗапись.Дата = ДатаЗапроса;
					ТекЗапись.ИсточникиКампаний = Параметры.ИсточникиКампаний;
					ТекЗапись.СценарийАналитики = Параметры.СценарийАналитики;
					ТекЗапись.Валюта = Параметры.YD_Валюта;
					ТекЗапись.CRM_РекламнаяКампания = РекламнаяКампания;
					ТекЗапись.ОбъявленияРекламныхКампаний = РекламноеОбъявление;
					ТекЗапись.Сайт = Сайт;
					ТекЗапись.Клики = КоличествоКлики;
					ТекЗапись.Показы = КоличествоПоказы;
					ТекЗапись.СредняяЦенаКлика = СредняяЦенаКлика;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
						
		ТаблицаЗаписей.Свернуть("Дата,ИсточникиКампаний,СценарийАналитики,Валюта,CRM_РекламнаяКампания,
			|ОбъявленияРекламныхКампаний,Сайт", "Показы,Клики,
			|СредняяЦенаКлика");
		НаборЗаписей.Загрузить(ТаблицаЗаписей);
		
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПолучитьДанныеАналитикиRoistatНаДату(ДатаЗапроса, Параметры)
	
	Если Параметры.YD_ЗагружатьЗатраты Тогда
		ПолучитьДанныеЗатратRoistat(Параметры, ДатаЗапроса);
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	json = ЗаписьJSON.Закрыть();
	
	ИмяСервера 	= "cloud.roistat.com/api/v1";	
	АдресРесурса = "/user/projects";
	стрЗапроса = "?key=" + Параметры.OAuthТокен;
	
	ВыбранныйПроект = Параметры.НомерПроекта;
	
	Заголовки = Новый Соответствие;
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса + стрЗапроса, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(json, КодировкаТекста.UTF8);
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(ИмяСервера, , , , Прокси, 60, Новый ЗащищенноеСоединениеOpenSSL);
	
	HTTPМетод = "GET";
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос);
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru='Проблема с получение данных roistat';en='NTRS'"),
			 УровеньЖурналаРегистрации.Ошибка, , ,
			 Параметры.ИсточникиКампаний);
	КонецЕсли;
	
	РезультатЗапроса = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	СтрОшибки = "";
	
	Если ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Попытка
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(РезультатЗапроса);
			РезультатЗапросаJSON = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();

			Если НЕ РезультатЗапросаJSON.Свойство("projects") Тогда
				Если РезультатЗапросаJSON.Свойство("status") Тогда
					Если РезультатЗапросаJSON.status = "error" Тогда
						СтрОшибки = РезультатЗапросаJSON.error;
					КонецЕсли;
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(СтрОшибки) Тогда
					СтрОшибки = РезультатЗапроса;
				КонецЕсли;
			КонецЕсли;

		Исключение
			СтрОшибки = ОписаниеОшибки() + Символы.ПС + РезультатЗапроса;
		КонецПопытки;

	Иначе
		СтрОшибки = НСтр("ru='Данные отсутствут';en=''");
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрОшибки) Тогда
		ВызватьИсключение НСтр("ru='При получении данных Roistat произошла ошибка: ';en=''") + СтрОшибки;
	КонецЕсли;
	
	Если РезультатЗапросаJSON.Свойство("projects") Тогда
		НаборЗаписей = РегистрыСведений.CRM_ПоказателиКампаний.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПериодДанных.Установить(ДатаЗапроса);
		НаборЗаписей.Отбор.ИсточникиКампаний.Установить(Параметры.ИсточникиКампаний);
		НаборЗаписей.Отбор.СценарийАналитики.Установить(Параметры.СценарийАналитики);
		
		ТаблицаПоказателей = НаборЗаписей.Выгрузить();
		
		Для Каждого ТекПроект Из РезультатЗапросаJSON.projects Цикл
			ИдентификаторПроекта = ТекПроект.id;
			Если ЗначениеЗаполнено(ВыбранныйПроект) И Не (Формат(ВыбранныйПроект, "ЧГ=") = Формат(ИдентификаторПроекта, "ЧГ=")) Тогда
				Продолжить;
			КонецЕсли;
						
			ДанныеПроекта = ПолучитьДанныеПроектаRoistat(ИдентификаторПроекта, Параметры.OAuthТокен,
				 Параметры, ДатаЗапроса,
				 Ложь);
			
			Для Каждого СтрокаДаты Из ДанныеПроекта Цикл
				Для Каждого ТекДанные Из СтрокаДаты.items Цикл
					КоличествоВизиты = 0;
					КоличествоПосетители = 0;
							
					Для Каждого ТекМетрика Из ТекДанные.metrics Цикл
						ИмяМетрики = ТекМетрика.metric_name;
						ЗначениеМетрики = ТекМетрика.value;
						
						Если ИмяМетрики = "visits" Тогда
							КоличествоВизиты = ЗначениеМетрики;
							
						ИначеЕсли ИмяМетрики = "clients" Тогда
							КоличествоПосетители = ЗначениеМетрики;
							
						ИначеЕсли ИмяМетрики = "impressions" Тогда
						ИначеЕсли ИмяМетрики = "marketing_cost" Тогда
						ИначеЕсли ИмяМетрики = "cpc" Тогда
						КонецЕсли;
					КонецЦикла;
					
					Если КоличествоВизиты = 0 И КоличествоПосетители = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Сайт = ТекДанные.dimensions.host.value;
					Позиция = СтрНайти(Сайт, ".", НаправлениеПоиска.СКонца, , 2);
					Если Позиция > 0 Тогда
						Сайт = Сред(Сайт, Позиция + 1);
					КонецЕсли;	
					
					Сайт = ПолучитьСайт(Сайт);
					
					ТипУстройства	= "";
					Если Параметры.Устройства Тогда
						ТипУстройства = ПолучитьУстройство(ТекДанные.dimensions.device_type.title);
					КонецЕсли;
					
					КаналНаименование = СтрЗаменить(ТекДанные.dimensions.marker_level_1.title, " ", " ");
					
					Канал = "";
					Если Параметры.КаналПервичногоИнтереса Тогда
						Канал = ПолучитьДанныеПоКаналамРекламныхВзаимодействий(КаналНаименование);
					КонецЕсли;
					
					РекламнаяКампания = "";
					РекламноеОбъявление = "";
					Если Параметры.РекламнаяКампания Тогда
						Если КаналНаименование = "Прямые визиты" Тогда
							КампанияИдентификатор = "";
							КампанияНаименование = "";
							ОбъявлениеИдентификатор = "";
							ОбъявлениеНаименование = "";
							utm_campaign = "";

						ИначеЕсли КаналНаименование = "Визиты с сайтов" Тогда
							КампанияИдентификатор = "";
							КампанияНаименование = ТекДанные.dimensions.marker_level_2.title;
							ОбъявлениеИдентификатор = "";
							ОбъявлениеНаименование = "";
							utm_campaign = ТекДанные.dimensions.utm_campaign.value;
							
						Иначе
							КампанияИдентификатор = ТекДанные.dimensions.marker_level_3.value;
							КампанияИдентификатор = ?(КампанияИдентификатор = "/", "", КампанияИдентификатор);
							Если ЗначениеЗаполнено(КампанияИдентификатор) Тогда
								КампанияНаименование = ТекДанные.dimensions.marker_level_3.title;

							Иначе	
								КампанияНаименование = ТекДанные.dimensions.marker_level_2.title;
							КонецЕсли;

							ОбъявлениеИдентификатор = ТекДанные.dimensions.marker_level_4.value;
							ОбъявлениеНаименование = ТекДанные.dimensions.marker_level_4.title;
							utm_campaign = ТекДанные.dimensions.utm_campaign.value;
						КонецЕсли;	

						РекламнаяКампания = ПолучитьРекламнуюКомпанию(КампанияИдентификатор, КампанияНаименование, utm_campaign);
						РекламноеОбъявление = ПолучитьРекламноеОбъявление(ОбъявлениеИдентификатор,
							 ОбъявлениеНаименование,
							 РекламнаяКампания);
					КонецЕсли;
					
					URL = "";
					Если Параметры.URL Тогда
						URL = ТекДанные.dimensions.referrer.value;
					КонецЕсли;
					
					utm_medium = "";
					Если Параметры.Medium Тогда
						utm_medium = ТекДанные.dimensions.utm_medium.value;
					КонецЕсли;
					
					utm_source = "";
					Если Параметры.Source Тогда
						utm_source = ТекДанные.dimensions.utm_source.value;
					КонецЕсли;
					
					БизнесРегион = "";
					Если Параметры.География Тогда
						city = ТекДанные.dimensions.city.value;
						region = ТекДанные.dimensions.region.value;
						country = ТекДанные.dimensions.country.value;
						БизнесРегион = ПолучитьБизнесРегион(country, region, city);
					КонецЕсли;
					
					ТекЗапись = ТаблицаПоказателей.Добавить();
					ТекЗапись.ПериодДанных = ДатаЗапроса;
					ТекЗапись.ИсточникиКампаний = Параметры.ИсточникиКампаний;
					ТекЗапись.СценарийАналитики = Параметры.СценарийАналитики;
					ТекЗапись.CRM_Сайт = Сайт;
					ТекЗапись.География = БизнесРегион;
					ТекЗапись.КаналПервичногоИнтереса = Канал;
					ТекЗапись.Medium = utm_medium;
					ТекЗапись.Source = utm_source;
					ТекЗапись.Устройства = ТипУстройства;
					ТекЗапись.CRM_РекламнаяКампания = РекламнаяКампания;
					ТекЗапись.ОбъявлениеРекламнаяКомпания = РекламноеОбъявление;
					ТекЗапись.URL = URL;
					ТекЗапись.Визиты = КоличествоВизиты;
					ТекЗапись.Посетители = КоличествоПосетители;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		ТаблицаПоказателей.Свернуть("ПериодДанных,ИсточникиКампаний,СценарийАналитики,CRM_Сайт,География,
			|КаналПервичногоИнтереса,Medium,Source,Устройства,ВремяНаСайте,CRM_РекламнаяКампания,
			|ОбъявлениеРекламнаяКомпания,URL", "Визиты,Посетители,Отказы,
			|ГлубинаПросмотра");
		НаборЗаписей.Загрузить(ТаблицаПоказателей);
		
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеАналитикиRoistat(Параметры) Экспорт
	
	ТекДата = НачалоДня(ТекущаяДатаСеанса());
	
	Если ЗначениеЗаполнено(Параметры.ДатаЗагрузки) И НачалоДня(Параметры.ДатаЗагрузки) < ТекДата Тогда
		ДатаКонечная = НачалоДня(ТекДата);
		ДатаЗагрузкиМетрик = Параметры.ДатаЗагрузки;
		
		Пока ДатаЗагрузкиМетрик <= ДатаКонечная Цикл
			ПолучитьДанныеАналитикиRoistatНаДату(ДатаЗагрузкиМетрик, Параметры);
			
			ДатаЗагрузкиМетрик = КонецДня(ДатаЗагрузкиМетрик) + 1;
		КонецЦикла;
		
	Иначе
		ПолучитьДанныеАналитикиRoistatНаДату(ТекДата, Параметры);
	КонецЕсли;

	ЗаполнитьКаналИсточникЗаявокRoistat(Параметры);
	
КонецПроцедуры

Процедура ЗаполнитьКаналИсточникЗаявокRoistat(Параметры)

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Объекты.Объект КАК Ссылка,
	|	Объекты.Источник КАК ИсточникПолучения,
	|	Объекты.Источник.CRM_НомерПроекта КАК ИсточникПолученияНомерПроекта,
	|	Объекты.Объект.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса,
	|	Объекты.Объект.ИсточникПервичногоИнтереса КАК ИсточникПервичногоИнтереса,
	|	Объекты.Объект.Комментарий КАК Комментарий,
	|	ЕСТЬNULL(Реквизиты.Значение, """") КАК ИдентификаторСделки,
	|	ЕСТЬNULL(ИсточникиПервичногоИнтереса.CRM_UTM_source, """") КАК UTM_source,
	|	ЕСТЬNULL(ИсточникиПервичногоИнтереса.CRM_UTM_medium, """") КАК UTM_medium,
	|	ЕСТЬNULL(Интерес.Ссылка, ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)) КАК Интерес,
	|	ЕСТЬNULL(Интерес.КаналОбращения, ЗНАЧЕНИЕ(ПланВидовХарактеристик.КаналыРекламныхВоздействий.ПустаяСсылка)) КАК КаналОбращения,
	|	ЕСТЬNULL(Интерес.ИсточникОбращения, НЕОПРЕДЕЛЕНО) КАК ИсточникОбращения
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыОбновленияАналитики КАК Объекты
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Заявка.ДополнительныеРеквизиты КАК Реквизиты
	|	ПО Реквизиты.Ссылка = Объекты.Объект
	|	И Реквизиты.Свойство = &Свойство_Идентификатор
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
	|	ПО ИсточникиПервичногоИнтереса.Сделка = Объекты.Объект
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Интерес КАК Интерес
	|	ПО Интерес.ДокументОснование = Объекты.Объект
	|ГДЕ
	|	Объекты.Источник.Сценарий = ЗНАЧЕНИЕ(Перечисление.CRM_CallTrakingСценарии.Roistat)
	|	И Объекты.Источник.CRM_НомерПроекта <> """"
	|ИТОГИ
	|	МИНИМУМ(ИдентификаторСделки),
	|	МИНИМУМ(ИсточникПолучения),
	|	МИНИМУМ(ИсточникПолученияНомерПроекта),
	|	МИНИМУМ(UTM_source),
	|	МИНИМУМ(UTM_medium)
	|ПО
	|	Объекты.Объект");
		
	Свойство_Идентификатор = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",
		 "ИДСквознаяАналитика");
	Запрос.УстановитьПараметр("Свойство_Идентификатор", Свойство_Идентификатор);
	
	ФиксироватьПервичныйИнтерес = ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес");
	
	ВыборкаЗаявок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаявок.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаЗаявок.ИдентификаторСделки) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеАналитики = ЗапроситьДанныеАналитикиRoistat(ВыборкаЗаявок.ИдентификаторСделки,
			 ВыборкаЗаявок.ИсточникПолученияНомерПроекта,
			 Параметры);
		Если НЕ ЗначениеЗаполнено(ДанныеАналитики.Канал) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеАналитики.Канал <> ВыборкаЗаявок.КаналПервичногоИнтереса
			 ИЛИ ДанныеАналитики.Источник <> ВыборкаЗаявок.ИсточникПервичногоИнтереса Тогда
			ТекОбъект = ВыборкаЗаявок.Ссылка.ПолучитьОбъект();	
			ТекОбъект.КаналПервичногоИнтереса = ДанныеАналитики.Канал;
			ТекОбъект.ИсточникПервичногоИнтереса = ДанныеАналитики.Источник;
			ТекОбъект.Записать();
			
			СтруктураДанных = Новый Структура();
			СтруктураДанных.Вставить("CRM_Сайт", ДанныеАналитики.Сайт);
			СтруктураДанных.Вставить("CRM_UTM_source", ВыборкаЗаявок.UTM_source);
			СтруктураДанных.Вставить("CRM_UTM_medium", ВыборкаЗаявок.UTM_medium);
			СтруктураДанных.Вставить("CRM_UTM_pos", "");
			СтруктураДанных.Вставить("КаналПервичногоИнтереса", ДанныеАналитики.Канал);
			СтруктураДанных.Вставить("ИсточникПервичногоИнтереса", ДанныеАналитики.Источник);
			СтруктураДанных.Вставить("ИсточникПолучения", ВыборкаЗаявок.ИсточникПолучения);
		
			УстановитьСсылкуВИсточникПервичногоИнтересаЗаписатьДопРеквизит(ВыборкаЗаявок.Ссылка,
				 СтруктураДанных);
			
			Если ФиксироватьПервичныйИнтерес Тогда
				ВыборкаИнтересов = ВыборкаЗаявок.Выбрать();
				Пока ВыборкаИнтересов.Следующий() Цикл
					Если НЕ ЗначениеЗаполнено(ВыборкаИнтересов.Интерес) Тогда
						Продолжить;
					КонецЕсли;
					
					Если ДанныеАналитики.Канал <> ВыборкаИнтересов.КаналОбращения
						 ИЛИ ДанныеАналитики.Источник <> ВыборкаИнтересов.ИсточникОбращения Тогда
						ИнтересОбъект = ВыборкаИнтересов.Интерес.ПолучитьОбъект();	
						ИнтересОбъект.КаналОбращения = ДанныеАналитики.Канал;
						ИнтересОбъект.ИсточникОбращения = ДанныеАналитики.Источник;
						ИнтересОбъект.Записать();
						
						НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.Период.Установить(ИнтересОбъект.Дата);
						НаборЗаписей.Отбор.Сделка.Установить(ИнтересОбъект.Ссылка);
						НаборЗаписей.Записать();
						
						Запрос = Новый Запрос("
						|ВЫБРАТЬ Период
						|ИЗ РегистрСведений.ИсточникиПервичногоИнтереса
						|ГДЕ Сделка = &Сделка И Партнер = &Партнер");
						Запрос.УстановитьПараметр("Сделка", ИнтересОбъект.Ссылка);
						Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
							  Запрос.УстановитьПараметр("Партнер", ИнтересОбъект.Партнер);
						Иначе Запрос.УстановитьПараметр("Партнер", ИнтересОбъект.ПотенциальныйКлиент);
						КонецЕсли;	
						
						Выборка = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапрос(Запрос).Выбрать();
						Пока Выборка.Следующий() Цикл
							МенеджерЗаписи = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
							МенеджерЗаписи.Период = Выборка.Период;
							МенеджерЗаписи.Сделка = ИнтересОбъект.Ссылка;
							Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
								  МенеджерЗаписи.Партнер = ИнтересОбъект.Партнер;
							Иначе МенеджерЗаписи.Партнер = ИнтересОбъект.ПотенциальныйКлиент;
							КонецЕсли;
							МенеджерЗаписи.Удалить();
						КонецЦикла;
						
						Запись = НаборЗаписей.Добавить();
						Запись.Период = ИнтересОбъект.Дата;
						Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
							  Запись.Партнер = ИнтересОбъект.Партнер;
						Иначе Запись.Партнер = ИнтересОбъект.ПотенциальныйКлиент;
						КонецЕсли;	
						Запись.Сделка = ИнтересОбъект.Ссылка;
						Запись.КаналПервичногоИнтереса = ДанныеАналитики.Канал;
						Запись.ИсточникПервичногоИнтереса = ДанныеАналитики.Источник;
																						
						НаборЗаписей.Записать();
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.CRM_ОбъектыОбновленияАналитики.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Источник = ВыборкаЗаявок.ИсточникПолучения;
		МенеджерЗаписи.Объект = ВыборкаЗаявок.Ссылка;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ЗапроситьДанныеАналитикиRoistat(ИдентификаторСделки, НомерПроекта, Параметры)
	
	ДанныеАналитики = Новый Структура("Канал,Источник,Сайт",
		ПланыВидовХарактеристик.КаналыРекламныхВоздействий.ПустаяСсылка(),
		Неопределено,
		Справочники.CRM_Сайты.ПустаяСсылка());
		
	Если НЕ ЗначениеЗаполнено(НомерПроекта) Тогда
		ЗаписьЖурналаРегистрации("Сквозная аналитика.Roistat.Обновление Канала и Источника",
			 УровеньЖурналаРегистрации.Ошибка, , ,
			 "Для источника получения заявок не заполнен Номер проекта");
		Возврат ДанныеАналитики;
	КонецЕсли;
	
	ИмяСервера 	= "cloud.roistat.com";
	АдресРесурса = "/api/v1/project/orders/" + ИдентификаторСделки + "/info?project=" + НомерПроекта;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-type", "application/json");
	Заголовки.Вставить("Api-key", Параметры.OAuthТокен);
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(ИмяСервера, , , , Прокси, 60, Новый ЗащищенноеСоединениеOpenSSL);
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("GET", HTTPЗапрос);
    Если HTTPОтвет.КодСостояния <> 200 Тогда
		ВызватьИсключение НСтр("ru='Проблема с получение данных Roistat';en='NTRS'");
	КонецЕсли;

	РезультатЗапроса = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	СтрОшибки = "";
	
	Если ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Попытка
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(РезультатЗапроса);
			РезультатЗапросаJSON = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			Если РезультатЗапросаJSON.Свойство("order") Тогда
				НаименованиеСайта = РезультатЗапросаJSON.order.visit.host;
				Если ЗначениеЗаполнено(НаименованиеСайта) Тогда
					НаименованиеСайта = СтрЗаменить(НаименованиеСайта, "http://", "");		
					НаименованиеСайта = СтрЗаменить(НаименованиеСайта, "https://", "");
					
					Позиция = СтрНайти(НаименованиеСайта, "/");
					Если Позиция > 0 Тогда
						НаименованиеСайта = Лев(НаименованиеСайта, Позиция - 1);
					КонецЕсли;
					
					Позиция = СтрНайти(НаименованиеСайта, ".", НаправлениеПоиска.СКонца, , 2);
					Если Позиция > 0 Тогда
						НаименованиеСайта = Сред(НаименованиеСайта, Позиция + 1);
					КонецЕсли;
					
					// BSLLS:UnusedLocalVariable-off
					Сайт = ПолучитьСайт(НаименованиеСайта);
					// BSLLS:UnusedLocalVariable-on
				КонецЕсли;
				
				ДанныеАналитикиЗаказа = РезультатЗапросаJSON.order.visit.marker_info;
				НаименованиеКанала = СтрЗаменить(ДанныеАналитикиЗаказа[0].alias, " ", " ");
				
				Если (НаименованиеКанала = "Прямые визиты") ИЛИ (ДанныеАналитикиЗаказа.Количество() = 1) Тогда
					ИдентификаторИсточника = "";
					НаименованиеИсточника = "";

				ИначеЕсли (НаименованиеКанала = "Визиты с сайтов") ИЛИ (ДанныеАналитикиЗаказа.Количество() = 2) Тогда
					ИдентификаторИсточника = "";
					НаименованиеИсточника = ДанныеАналитикиЗаказа[1].alias;

				Иначе
					ИдентификаторИсточника = ДанныеАналитикиЗаказа[2].marker;
					ИдентификаторИсточника = ?(ИдентификаторИсточника = "/", "", ИдентификаторИсточника);
					Если ЗначениеЗаполнено(ИдентификаторИсточника) Тогда
						  НаименованиеИсточника = ДанныеАналитикиЗаказа[2].alias;
                    Иначе НаименованиеИсточника = ДанныеАналитикиЗаказа[1].alias;
					КонецЕсли;
                КонецЕсли;
								
				ДанныеАналитики.Канал = ПолучитьДанныеПоКаналамРекламныхВзаимодействий(НаименованиеКанала);
				ДанныеАналитики.Источник = ПолучитьРекламнуюКомпанию(ИдентификаторИсточника, НаименованиеИсточника, "");

			Иначе
				Если РезультатЗапросаJSON.Свойство("status") Тогда
					Если РезультатЗапросаJSON.status = "error" Тогда
						Если РезультатЗапросаJSON.error = "resource_not_found" Тогда
							ЗаписьЖурналаРегистрации("Отладка", , , , "Не найдена сделка: " + ИдентификаторСделки);
							Возврат ДанныеАналитики;
						КонецЕсли;
						
						СтрОшибки = РезультатЗапросаJSON.error;
					КонецЕсли;
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(СтрОшибки) Тогда
					СтрОшибки = АдресРесурса + Символы.ПС + РезультатЗапроса;
				КонецЕсли;
			КонецЕсли;
        Исключение
			СтрОшибки = ОписаниеОшибки() + Символы.ПС + РезультатЗапроса;
		КонецПопытки;
    КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрОшибки) Тогда
		ВызватьИсключение СтрОшибки;
	КонецЕсли;
	
	Возврат ДанныеАналитики;
	
КонецФункции

#КонецОбласти

#КонецОбласти
