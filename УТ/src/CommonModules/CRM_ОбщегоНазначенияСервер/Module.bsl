
////////////////////////////////////////////////////////////////////////////////
// Общего назначения сервер (CRM)
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщиеПроцедурыИФункции

// Функция возвращает структуру выполнения фонового задания.
// 
// Возвращаемое значение:
//  Структура - Структура выполнения фонового задания.
//
Функция НачатьПроверкуОбновленияДемоДанных() Экспорт
	ПараметрыФоновогоЗадания = ДлительныеОперации.ПараметрыВыполненияВФоне();
	ПараметрыФоновогоЗадания.ЗапуститьВФоне = Истина;
	Возврат ДлительныеОперации.ВыполнитьВФоне("CRM_ДемонстрационныйРежим.ПроверкаОбновлениеДемоДанные",
	Неопределено, ПараметрыФоновогоЗадания);
КонецФункции

// Функция возвращает структуру с настройками клиентского приложения.
//
// Возвращаемое значение:
//	Структура - структура с настройками клиентского приложения.
//
Функция ПолучитьНастройкиКлиентскогоПриложения() Экспорт

	Настройки = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения");
	
	СтруктураНастроек = Новый Структура(
	"ВариантИнтерфейсаКлиентскогоПриложения,
	|РежимОткрытияФормВЗакладках,
	|ОтображатьПанелиНавигацииИДействий,
	|ОтображатьПанельРазделов,
	|СкоростьКлиентскогоСоединенияНизкая", Неопределено, Ложь, Истина, Истина, Ложь);
	
	Если ТипЗнч(Настройки) = Тип("НастройкиКлиентскогоПриложения") Тогда
		
		СтруктураНастроек.ВариантИнтерфейсаКлиентскогоПриложения = Настройки.ВариантИнтерфейсаКлиентскогоПриложения;
		СтруктураНастроек.РежимОткрытияФормВЗакладках =
			(Настройки.РежимОткрытияФормПриложения = РежимОткрытияФормПриложения.Закладки);
		СтруктураНастроек.ОтображатьПанелиНавигацииИДействий = Настройки.ОтображатьПанелиНавигацииИДействий;
		СтруктураНастроек.ОтображатьПанельРазделов = Настройки.ОтображатьПанельРазделов;
		СтруктураНастроек.СкоростьКлиентскогоСоединенияНизкая =
			(Настройки.СкоростьКлиентскогоСоединения = СкоростьКлиентскогоСоединения.Низкая);
		
	КонецЕсли;
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Функция проверяет - есть ли панель с переданным именем в данной группе настроек
//  интерфейса Такси текущего сеанса.
//
// Параметры:
//  ГруппаНастройкиИнтерфейса	 - ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения - группа 
//									настроек состава, в которой ищем.
//  ИмяПанели					 - Строка - имя панели, которую ищем.
// 
// Возвращаемое значение:
//  Булево - признак наличия панели в  группе настроек.
//
Функция ЕстьпанельИнтерфейсаВГруппе(ГруппаНастройкиИнтерфейса, ИмяПанели) Экспорт

	ЕстьПанель = Ложь;
	
	Если ТипЗнч(ГруппаНастройкиИнтерфейса) = Тип("ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения") Тогда
		
		Для Каждого ЭлементГруппыНастройкиИнтерфейса Из ГруппаНастройкиИнтерфейса Цикл
			ЕстьПанель = ЕстьпанельИнтерфейсаВГруппе(ЭлементГруппыНастройкиИнтерфейса, ИмяПанели);
			
			Если ЕстьПанель Тогда
				Возврат ЕстьПанель;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Попытка
			ЕстьПанель = (ГруппаНастройкиИнтерфейса.Имя = ИмяПанели);
		Исключение
			ЕстьПанель = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ЕстьПанель;
	
КонецФункции

// Функция проверяет - есть ли панель с переданным именем в интерфейсе текущего сеанса.
// Параметры:
// 	ИмяПанели	- Строка - имя панели, которую ищем.
//
// Возвращаемое значение:
//	Булево - признак наличия панели в интерфейсе.
//
Функция ЕстьпанельИнтерфейса(ИмяПанели) Экспорт
	
	СписокНазванийНастроек = Новый Структура("Верх, Лево, Низ, Право");
	
	ЕстьПанель = Ложь;
	НастройкиИнтерфейсаКлиентскогоПриложения =
		ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения");
	
	Если НастройкиИнтерфейсаКлиентскогоПриложения = Неопределено Тогда
		НастройкиИнтерфейсаКлиентскогоПриложения = Новый НастройкиИнтерфейсаКлиентскогоПриложения;
	КонецЕсли;
	
	Если НастройкиИнтерфейсаКлиентскогоПриложения = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкиСоставаИнтерфейса = НастройкиИнтерфейсаКлиентскогоПриложения.ПолучитьСостав();	
	
	Для Каждого ЭлементСпискаНазваний Из СписокНазванийНастроек Цикл
		
		Для Каждого ГруппаИнтерфейса Из НастройкиСоставаИнтерфейса[ЭлементСпискаНазваний.Ключ] Цикл
			
			Если ГруппаИнтерфейса = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьПанель = ЕстьпанельИнтерфейсаВГруппе(ГруппаИнтерфейса, ИмяПанели);
			
			Если ЕстьПанель Тогда
				Возврат ЕстьПанель;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЕстьПанель;

КонецФункции

// Функция возвращает массив пользователей, входящих в указанную группу.
//
// Параметры:
//  ГруппаПользователей			 - СправочникСсылка.ГруппыПользователей	 - Группа пользователей.
//  ПризнакВыбиратьИерархически	 - Булево								 - Выбирать пользователей подчиненных групп.
// 
// Возвращаемое значение:
//  Массив - массив пользователей.
//
Функция ПолучитьПользователейГруппы(Знач ГруппаПользователей, Знач ПризнакВыбиратьИерархически = Ложь) Экспорт
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.ПометкаУдаления");
	Если ПризнакВыбиратьИерархически Тогда
		Запрос.Текст = Запрос.Текст + " 
		|	И ИСТИНА В
		|				(ВЫБРАТЬ
		|						ИСТИНА
		|					ИЗ
		|						РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|					ГДЕ
		|						СоставыГруппПользователей.Пользователь = Пользователи.Ссылка
		|						И СоставыГруппПользователей.ГруппаПользователей = &ГруппаПользователей)";
	Иначе	
		Запрос.Текст = Запрос.Текст + " 
		|				И ИСТИНА В
		|					(ВЫБРАТЬ
		|						ИСТИНА
		|					ИЗ
		|						Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|					ГДЕ
		|						ГруппыПользователейСостав.Пользователь = Пользователи.Ссылка
		|						И ГруппыПользователейСостав.Ссылка = &ГруппаПользователей)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + " 
		|УПОРЯДОЧИТЬ ПО
		|	Пользователи.Наименование
		|";
	
	Запрос.УстановитьПараметр("ВыбиратьИерархически",	ПризнакВыбиратьИерархически);
	Запрос.УстановитьПараметр("ГруппаПользователей",	ГруппаПользователей);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

// Функция возвращает ссылочный тип по метаданным объекта.
//
// Параметры:
//	МетаданныеОбъекта	- МетаданныеОбъекта	- Метаданные объекта.
//
// Возвращаемое значение:
//	Тип - Ссылочный тип. Если не найден, то Неопределено.
//
Функция ПолучитьСсылочныйТипПоМетаданнымОбъекта(МетаданныеОбъекта) Экспорт
	ИмяБазовогоСсылочногоТипа = Неопределено;
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		ИмяБазовогоСсылочногоТипа = "ДокументСсылка";
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		ИмяБазовогоСсылочногоТипа = "СправочникСсылка";
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(МетаданныеОбъекта) Тогда
		ИмяБазовогоСсылочногоТипа = "ПланОбменаСсылка";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		ИмяБазовогоСсылочногоТипа = "ПланВидовХарактеристикСсылка";
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеОбъекта) Тогда
		ИмяБазовогоСсылочногоТипа = "БизнесПроцессСсылка";
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеОбъекта) Тогда
		ИмяБазовогоСсылочногоТипа = "ЗадачаСсылка";
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеОбъекта) Тогда
		ИмяБазовогоСсылочногоТипа = "ПланСчетовСсылка";
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеОбъекта) Тогда
		ИмяБазовогоСсылочногоТипа = "ПланВидовРасчетаСсылка";
	ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеОбъекта) Тогда
		ИмяБазовогоСсылочногоТипа = "ПеречислениеСсылка";
	КонецЕсли;
	Если ИмяБазовогоСсылочногоТипа = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Тип(ИмяБазовогоСсылочногоТипа + "." + МетаданныеОбъекта.Имя);
	КонецЕсли;
КонецФункции // ПолучитьСсылочныйТипПоМетаданнымОбъекта()

// Процедура вызывается при компоновке результата отчета.
//
// Параметры:
//	ОбъектОтчета			- ОтчетОбъект						- Отчет
//	ДокументРезультат		- ТабличныйДокумент					- Табличный документ отчета.
//	ДанныеРасшифровки		- ДанныеРасшифровкиКомпоновкиДанных	- Данные расшифровки.
//	СтандартнаяОбработка	- Булево							- Флаг стандартной обработки.
//
Процедура ОтчетПриКомпоновкеРезультата(ОбъектОтчета, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка) Экспорт
	Попытка
		ЭлементыПользовательскихНастроек = ОбъектОтчета.ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	Исключение
		ЭлементыПользовательскихНастроек = Неопределено;
	КонецПопытки;
	
	бПользовательскиеНастройкиИзменены = Ложь;
	Если ЭлементыПользовательскихНастроек <> Неопределено Тогда
		ФиксированныеНастройкиЭлементыОтбора = ОбъектОтчета.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы;
		Если ФиксированныеНастройкиЭлементыОтбора.Количество() > 0 Тогда
			// По умолчанию считаем, что создавать элементы отбора нужно в отборе в настройках компоновщика,
			// но если отбор вынесен в пользовательские настройки, то ниже переопределим эту переменную.
			ЭлементыОтбораДляДобавления = ОбъектОтчета.КомпоновщикНастроек.Настройки.Отбор.Элементы;
			Для Каждого ЭлементНастройки Из ЭлементыПользовательскихНастроек Цикл
				Если ТипЗнч(ЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					// Элемент отбора вынесен в пользовательскую настройку в быстрый доступ.
					ЭлементНастройки.Использование = Ложь;
					ОписаниеЭлементаОтбора = НайтиВЭлементахОтбораПоИдентификатору(
						ОбъектОтчета.КомпоновщикНастроек.Настройки.Отбор.Элементы,
						ЭлементНастройки.ИдентификаторПользовательскойНастройки,
						ФиксированныеНастройкиЭлементыОтбора);
					Если ТипЗнч(ОписаниеЭлементаОтбора) = Тип("Структура")
						 И ОписаниеЭлементаОтбора.Свойство("ЭлементФиксированногоОтбора")
						 И ОписаниеЭлементаОтбора.ВидСравнения = ЭлементНастройки.ВидСравнения Тогда
						Если ОписаниеЭлементаОтбора.ЭлементФиксированногоОтбора.Использование Тогда
							ЭлементНастройки.ПравоеЗначение = ОписаниеЭлементаОтбора.ЭлементФиксированногоОтбора.ПравоеЗначение;
							ЭлементНастройки.Использование = Истина;
							ФиксированныеНастройкиЭлементыОтбора.Удалить(ОписаниеЭлементаОтбора.ЭлементФиксированногоОтбора);
						КонецЕсли;
					КонецЕсли;
					бПользовательскиеНастройкиИзменены = Истина;
				ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ОтборКомпоновкиДанных") Тогда
					// Отбор вынесен в пользовательские настройки.
					СброситьОтбор(ЭлементНастройки.Элементы); // Проставляем всем элементам отбора Использование = Ложь.
					// Если отбор вынесен в пользовательские настройки, создавать элементы отбора нужно в нем.
					ЭлементыОтбораДляДобавления = ЭлементНастройки.Элементы;
					бПользовательскиеНастройкиИзменены = Истина;
				КонецЕсли;
			КонецЦикла;
			Если бПользовательскиеНастройкиИзменены Тогда
				Если ФиксированныеНастройкиЭлементыОтбора.Количество() > 0 Тогда
					CRM_ОбщегоНазначенияКлиентСервер.СкопироватьОтборКомпоновкиДанных(ЭлементыОтбораДляДобавления,
						 ФиксированныеНастройкиЭлементыОтбора);
				КонецЕсли;
				// Очистим отбор, который автоматически сгенерировался платформой по параметру формы "Отбор".
				ФиксированныеНастройкиЭлементыОтбора.Очистить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОтчетПриКомпоновкеРезультата()

// Функция возвращает текущего пользователя.
// 
// Возвращаемое значение:
//  СправочникСсылка - Текущий пользователь.
//
Функция ТекущийПользователь() Экспорт
	Возврат Пользователи.АвторизованныйПользователь();
КонецФункции // сфпТекущийПользователь()

// Проверяет физическое наличие записи в информационной базе данных о переданном значении ссылки.
//
// Параметры:
//  ЛюбаяСсылка	 - Ссылка - значение любой ссылки информационной базы данных.
// 
// Возвращаемое значение:
//  Булево - Признак существования ссылки..
//
Функция СсылкаСуществует(ЛюбаяСсылка) Экспорт
	
	Возврат ОбщегоНазначения.СсылкаСуществует(ЛюбаяСсылка);
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
//
// Параметры:
//  Ссылка		 - Ссылка - Ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный - зависит от типа значения прочитанного реквизита.
//
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции // СсылкаСуществует()

// Возвращает булево, если объект метаданных найден.
//
// Параметры:
//  ПутьКОбъектуКоллекции	 - Строка - Путь к объекту коллекции. 
//  Имя						 - Строка - Имя.
// 
// Возвращаемое значение:
//  Булево - Если Истина, то объект метаданных найден, иначе Ложь.
//
Функция НайтиВМетаданныхПоИмени(ПутьКОбъектуКоллекции = "", Имя = "") Экспорт
	
	Возврат CRM_ОбщегоНазначенияПовтИсп.НайтиВМетаданныхПоИмени(ПутьКОбъектуКоллекции, Имя);
	
КонецФункции

// Процедура записывает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - текущий пользователь программы
//  Настройка	 - ПланВидовХарактеристикСсылка.CRM_НастройкиПользователей - признак, 
//					для которого записывается значение по умолчанию
//  Значение	 - Характеристика.CRM_НастройкиПользователей - значение
//
Процедура УстановитьЗначениеНастройки(Пользователь, Настройка, Значение) Экспорт

	СсылкаНастройки = ПланыВидовХарактеристик.CRM_НастройкиПользователей[Настройка];
	МенеджерЗаписи = РегистрыСведений.CRM_НастройкиПользователей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.Настройка = СсылкаНастройки;
	МенеджерЗаписи.Значение = Значение;
	МенеджерЗаписи.Записать();

КонецПроцедуры // УстановитьЗначениеПоУмолчанию()

// Возвращает менеджер объекта по ссылке на объект.
// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
// См. также ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени.
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - объект, менеджер которого требуется получить.
//
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер, ОбработкаМенеджер, РегистрСведенийМенеджер - менеджер объекта.
//
// Пример:
//  МенеджерСправочника = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаНаОрганизацию);
//  ПустаяСсылка = МенеджерСправочника.ПустаяСсылка();
//
Функция МенеджерОбъектаПоСсылке(Ссылка) Экспорт
	
	Возврат ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	
КонецФункции

// <Возвращает ссылку на объект по ключу записи>
//
// Параметры:
//  КлючЗаписи	 - РегистрСведенийКлючЗаписи	 - Ключ записи регистра сведений.
// 
// Возвращаемое значение:
//  Ссылка - Ссылка на объект.
//
Функция ПолучитьРеквизитОбъектПоКлючуЗаписи(КлючЗаписи) Экспорт

	Возврат КлючЗаписи.Объект;

КонецФункции

// Возвращает признак работы в модели сервиса неразделенного сеанса
// 
// Возвращаемое значение:
//  Булево - Признак работы в модели сервиса.
//
Функция РаботаВМоделиСервисаНЕРазделенныйСеанс() Экспорт
	Если Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() Тогда
		Возврат НЕ РаботаВМоделиСервиса.ИспользованиеРазделителяСеанса();
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// Возвращает имя значения объекта метаданных перечисление по ссылке
//
// Параметры:
//  ПеречислениеСсылка - ПеречислениеСсылка - ссылка на перечисление.
//
// Возвращаемое значение:
//  Строка - имя значения перечисления. Если не найдено, то пустая строка
//
Функция ПолучитьИмяЗначенияПеречисления(ПеречислениеСсылка) Экспорт
	
	ИмяЗначения = "";
	
	МетаданныеПеречисления = ПеречислениеСсылка.Метаданные();
	
	ИмяПеречисления = МетаданныеПеречисления.Имя;
	ИндексЗначения = Перечисления[ИмяПеречисления].Индекс(ПеречислениеСсылка);
	
	ИмяЗначения = МетаданныеПеречисления.ЗначенияПеречисления[ИндексЗначения].Имя;
	
	Возврат ИмяЗначения;
	
КонецФункции

// Возвращает объект метаданных общий модуль.
//
// Параметры:
//	Имя - Строка - Имя модуля.
//
// Возвращаемое значение:
//  ОбщийМодуль - общий модуль. Если не найдено, то Неопределено.
//
Функция ОбщийМодуль(Имя) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		// АПК:488-выкл ВычислитьВБезопасномРежиме не используется, чтобы избежать вызова ОбщийМодуль рекурсивно.
		УстановитьБезопасныйРежим(Истина);
		Модуль = Вычислить(Имя);
		// АПК:488-вкл
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

// Возвращает флаг существования общего модуля в конфигурации
//
// Параметры:
//	Имя - Строка - Имя модуля.
//
// Возвращаемое значение:
//  Булево - Истина, если модуль существует.
//
Функция ЕстьОбщийМодуль(Имя) Экспорт
	
	Возврат (Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено);
	
КонецФункции

// Проверяет, является ли текущий или указанный пользователь полноправным.
//  
//  Полноправным считается пользователь, который:
//  а) при непустом списке пользователей информационной базы
//  имеет роль ПолныеПрава и роль для администрирования системы (если ПроверятьПраваАдминистрированияСистемы = Истина);
//  б) при пустом списке пользователей информационной базы
//  основная роль конфигурации не задана или ПолныеПрава.
// 
// Возвращаемое значение:
//  Булево - если Истина, пользователь является полноправным.
//
Функция ЭтоПолноправныйПользователь() Экспорт
	Возврат Пользователи.ЭтоПолноправныйПользователь();
КонецФункции

#КонецОбласти // ОбщиеПроцедурыИФункции

#Область РаботаСПользовательскимиНастройкамиДинамическихСписков

// Функция возвращает структуру со свойствами динамического списка.
//
// Параметры:
//  ЭтаФорма												 - ФормаКлиентскогоПриложения	 - Форма
//  ИмяСписка												 - Строка			 - Имя списка.
//  ИдентификаторСписка										 - Строка			 - Идентификатор списка.
//  ИмяДереваНастроек										 - Строка			 - Имя дерева настроек.
//  ИмяКнопкиПользовательскиеНастройкиСписка				 - Строка			 - Имя кнопки пользовательских настроек.
//  ИмяКнопкиДеревоПользовательскиеНастройкиСпискаОсновная	 - Строка			 - Имя кнопки дерева пользовательских настроек.
//  ИмяЭлементаПодменю										 - Строка			 - Имя элемента подменю.
//  ИмяПеременнойТекущейНастройки							 - Строка			 - Имя переменной текущей настройки.
//  ИмяПроцедурыКоманды										 - Строка			 - Имя процедуры команды.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами динамического списка.
//
Функция ПолучитьСвойстваДинамическогоСписка(ЭтаФорма, ИмяСписка, ИдентификаторСписка, ИмяДереваНастроек = Неопределено,
												ИмяКнопкиПользовательскиеНастройкиСписка = Неопределено,
												ИмяКнопкиДеревоПользовательскиеНастройкиСпискаОсновная = Неопределено,
												ИмяЭлементаПодменю = Неопределено,
												ИмяПеременнойТекущейНастройки = Неопределено,
												ИмяПроцедурыКоманды = Неопределено) Экспорт
	СтруктураРезультат = Новый Структура(
	"ИмяСписка,
	|ДинамическоеСчитываниеДанных,
	|ОсновнаяТаблица,
	|ПроизвольныйЗапрос,
	|ТекстЗапроса,
	|ИдентификаторСписка,
	|ИмяДереваНастроек,
	|ИмяКнопкиПользовательскиеНастройкиСписка,
	|ИмяКнопкиДеревоПользовательскиеНастройкиСпискаОсновная,
	|ИмяЭлементаПодменю,
	|ИмяПеременнойТекущейНастройки,
	|ИмяПроцедурыКоманды");
	СтруктураРезультат.ИмяСписка = ИмяСписка;
	ЗаполнитьЗначенияСвойств(СтруктураРезультат, ЭтаФорма[ИмяСписка]);
	СтруктураРезультат.ИдентификаторСписка										= ИдентификаторСписка;
	СтруктураРезультат.ИмяДереваНастроек										= ИмяДереваНастроек;
	СтруктураРезультат.ИмяКнопкиПользовательскиеНастройкиСписка					= ИмяКнопкиПользовательскиеНастройкиСписка;
	СтруктураРезультат.ИмяКнопкиДеревоПользовательскиеНастройкиСпискаОсновная	=
		ИмяКнопкиДеревоПользовательскиеНастройкиСпискаОсновная;
	СтруктураРезультат.ИмяЭлементаПодменю										= ИмяЭлементаПодменю;
	СтруктураРезультат.ИмяПеременнойТекущейНастройки							= ИмяПеременнойТекущейНастройки;
	СтруктураРезультат.ИмяПроцедурыКоманды										= ИмяПроцедурыКоманды;
	Возврат СтруктураРезультат;
КонецФункции // ПолучитьСвойстваДинамическогоСписка()

// Процедура сохраняет пользовательские настройки динамического списка в хранилище настроек данных форм.
//
// Параметры:
//  ИдентификаторСписка		 - Строка	 - Идентификатор списка.
//  ИдентификаторНастройки	 - Строка	 - Идентификатор настройки.
//  СтруктураНастройки		 - Строка	 - Структура настройки.
//  ИмяПользователя			 - Строка	 - Имя пользователя.
//
Процедура СохранитьПользовательскиеНастройкиДинамическогоСписка(ИдентификаторСписка,
	 ИдентификаторНастройки, СтруктураНастройки,
	 ИмяПользователя = Неопределено) Экспорт
	Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	СтруктураДляСохранения = Новый Структура("Отбор,Группировка,УсловноеОформление");
	Если СтруктураНастройки.Свойство("Отбор") Тогда
		СтруктураДляСохранения.Отбор = Новый ХранилищеЗначения(СтруктураНастройки.Отбор, Новый СжатиеДанных(9));
	КонецЕсли;
	Если СтруктураНастройки.Свойство("Группировка") Тогда
		СтруктураДляСохранения.Группировка = Новый ХранилищеЗначения(СтруктураНастройки.Группировка, Новый СжатиеДанных(9));
	КонецЕсли;
	Если СтруктураНастройки.Свойство("УсловноеОформление") Тогда
		СтруктураДляСохранения.УсловноеОформление = Новый ХранилищеЗначения(СтруктураНастройки.УсловноеОформление,
			 Новый СжатиеДанных(9));
	КонецЕсли;
	CRM_ХранилищеНастроек.Сохранить(ИдентификаторСписка, ИдентификаторНастройки,
		 СтруктураДляСохранения, ,
		 ИмяПользователя);
	
	ОбновитьСписокСуществующихИдентификаторовПользовательскихНастроекДинамическогоСписка(ИдентификаторСписка,
		 ИмяПользователя);
КонецПроцедуры // СохранитьПользовательскиеНастройкиДинамическогоСписка()

// Процедура удаляет пользовательские настройки динамического списка в хранилище настроек данных форм.
//
// Параметры:
//  ИдентификаторСписка		 - Строка	 - Идентификатор списка.
//  ИдентификаторНастройки	 - Строка	 - Идентификатор настройки.
//  ИмяПользователя			 - Строка	 - Имя пользователя.
//
Процедура УдалитьПользовательскиеНастройкиДинамическогоСписка(ИдентификаторСписка,
	 ИдентификаторНастройки,
	 ИмяПользователя = Неопределено) Экспорт
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если ТекущийПользователь <> Неопределено Тогда
		Если ТипЗнч(ИдентификаторНастройки) = Тип("Массив") Тогда
			Для Каждого Идентификатор Из ИдентификаторНастройки Цикл
				CRM_ХранилищеНастроек.Удалить(ИдентификаторСписка, Идентификатор,
					 ?(ИмяПользователя = Неопределено, ТекущийПользователь.Имя,
					 ИмяПользователя));
			КонецЦикла;
		Иначе
			CRM_ХранилищеНастроек.Удалить(ИдентификаторСписка, ИдентификаторНастройки,
				 ?(ИмяПользователя = Неопределено, ТекущийПользователь.Имя,
				 ИмяПользователя));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // УдалитьПользовательскиеНастройкиДинамическогоСписка()

// Функция восстанавливает пользовательские настройки динамического списка из хранилища настроек данных форм.
//
// Параметры:
//  ИдентификаторСписка		 - Строка	 - Идентификатор списка.
//  ИдентификаторНастройки	 - Строка	 - Идентификатор настройки.
//  ИмяПользователя			 - Строка	 - Имя пользователя. 
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами динамического списка.
//
Функция ВосстановитьПользовательскиеНастройкиДинамическогоСписка(ИдентификаторСписка,
	 ИдентификаторНастройки,
	 ИмяПользователя = Неопределено) Экспорт
	СтруктураРезультат = Новый Структура("Отбор,Группировка,УсловноеОформление");
	СохраненныеДанные = CRM_ХранилищеНастроек.Загрузить(ИдентификаторСписка, ИдентификаторНастройки, , ИмяПользователя);
	Если ТипЗнч(СохраненныеДанные) <> Тип("Структура") Тогда
		Возврат СтруктураРезультат;
	КонецЕсли;
	Если СохраненныеДанные.Свойство("Отбор") И ТипЗнч(СохраненныеДанные.Отбор) = Тип("ХранилищеЗначения") Тогда
		СохраненныйОтбор = СохраненныеДанные.Отбор.Получить();
		Если ТипЗнч(СохраненныйОтбор) = Тип("ОтборКомпоновкиДанных") Тогда
			СтруктураРезультат.Отбор = СохраненныйОтбор;
		КонецЕсли;
	КонецЕсли;
	Если СохраненныеДанные.Свойство("Группировка") И ТипЗнч(СохраненныеДанные.Группировка) = Тип("ХранилищеЗначения") Тогда
		СохраненнаяГруппировка = СохраненныеДанные.Группировка.Получить();
		Если ТипЗнч(СохраненнаяГруппировка) = Тип("ПоляГруппировкиКомпоновкиДанных") Тогда
			СтруктураРезультат.Группировка = СохраненнаяГруппировка;
		КонецЕсли;
	КонецЕсли;
	Если СохраненныеДанные.Свойство("УсловноеОформление")
		 И ТипЗнч(СохраненныеДанные.УсловноеОформление) = Тип("ХранилищеЗначения") Тогда
		СохраненноеУсловноеОформление = СохраненныеДанные.УсловноеОформление.Получить();
		Если ТипЗнч(СохраненноеУсловноеОформление) = Тип("УсловноеОформлениеКомпоновкиДанных") Тогда
			СтруктураРезультат.УсловноеОформление = СохраненноеУсловноеОформление;
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураРезультат;
КонецФункции // ВосстановитьПользовательскиеНастройкиДинамическогоСписка()

// Процедура сохраняет дерево пользовательских настроек динамического списка в хранилище настроек данных форм.
//
// Параметры:
//  ИдентификаторСписка	 - Строка	 - Идентификатор списка.
//  ДеревоНастроек		 - ДеревоЗначений	 - Дерево настроек.
//  ИмяПользователя		 - Строка	 - Имя пользователя. 
//
Процедура СохранитьДеревоПользовательскихНастроекДинамическогоСписка(ИдентификаторСписка,
	 Знач ДеревоНастроек,
	 ИмяПользователя = Неопределено) Экспорт
	СохраняемыеКолонки = Новый Массив();
	СохраняемыеКолонки.Добавить("Идентификатор");
	СохраняемыеКолонки.Добавить("Наименование");
	СохраняемыеКолонки.Добавить("ЭтоКорневойЭлемент");
	СохраняемыеКолонки.Добавить("ЭтоОсновнаяНастройка");
	
	КолонкиДляУдаления = Новый Массив();
	Для Каждого Колонка Из ДеревоНастроек.Колонки Цикл
		Если СохраняемыеКолонки.Найти(Колонка.Имя) = Неопределено Тогда
			КолонкиДляУдаления.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемаяКолонка Из КолонкиДляУдаления Цикл
		ДеревоНастроек.Колонки.Удалить(ДеревоНастроек.Колонки[УдаляемаяКолонка]);
	КонецЦикла;
	
	CRM_ХранилищеНастроек.Сохранить(ИдентификаторСписка, "ДеревоНастроек", ДеревоНастроек, , ИмяПользователя);
	
	ОбновитьСписокСуществующихИдентификаторовПользовательскихНастроекДинамическогоСписка(ИдентификаторСписка,
		 ИмяПользователя);
	
	// Синхронизация дерева и сохраненных настроек - что-бы не оставалось "мусорных" настроек, не связанных с деревом.
	НайденныеСтроки = ДеревоНастроек.Строки.НайтиСтроки(Новый Структура("ЭтоКорневойЭлемент", Ложь), Истина);
	СуществующиеИдентификаторы = Новый Массив();
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СуществующиеИдентификаторы.Добавить(НайденнаяСтрока.Идентификатор);
	КонецЦикла;
	
	ИдентификаторыДляУдаления = Новый Массив();
	
	СписокСохраненныхНастроек = CRM_ХранилищеНастроек.ПолучитьСписок(ИдентификаторСписка, ИмяПользователя);
	
	Для Каждого СохраненнаяНастройка Из СписокСохраненныхНастроек Цикл
		Попытка
			// BSLLS:UnusedLocalVariable-off
			ТестовыйУникальныйИдентификатор = Новый УникальныйИдентификатор(СохраненнаяНастройка.Значение);
			// BSLLS:UnusedLocalVariable-on
			бЭтоУникальныйИдентификатор = Истина;
		Исключение 
			бЭтоУникальныйИдентификатор = Ложь;
		КонецПопытки;
		Если Не бЭтоУникальныйИдентификатор Тогда
			Продолжить;
		КонецЕсли;
		
		Если СуществующиеИдентификаторы.Найти(СохраненнаяНастройка.Значение) = Неопределено Тогда
			ИдентификаторыДляУдаления.Добавить(СохраненнаяНастройка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторыДляУдаления.Количество() > 0 Тогда
		УдалитьПользовательскиеНастройкиДинамическогоСписка(ИдентификаторСписка, ИдентификаторыДляУдаления);
	КонецЕсли;
КонецПроцедуры // СохранитьДеревоПользовательскихНастроекДинамическогоСписка()

// Функция восстанавливает дерево пользовательских настроек динамического списка из хранилища настроек данных форм.
//
// Параметры:
//  ИдентификаторСписка	 - Строка	 - Идентификатор списка.
//  ИмяПользователя		 - Строка	 - Имя пользователя.
// 
// Возвращаемое значение:
//  ДеревоЗначение - Дерево настроек динамического списка.
//
Функция ВосстановитьДеревоПользовательскихНастроекДинамическогоСписка(ИдентификаторСписка,
	 ИмяПользователя = Неопределено) Экспорт
	Дерево = CRM_ХранилищеНастроек.Загрузить(ИдентификаторСписка, "ДеревоНастроек", , ИмяПользователя);
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	Если ТипЗнч(Дерево) <> Тип("ДеревоЗначений") Или Дерево.Строки.Количество() = 0
		 Или Дерево.Строки[0].ЭтоКорневойЭлемент <> Истина Тогда
		Дерево = Новый ДеревоЗначений();
		
		Дерево.Колонки.Добавить("Идентификатор",			ОписаниеТиповСтрока);
		Дерево.Колонки.Добавить("Наименование",				ОписаниеТиповСтрока);
		Дерево.Колонки.Добавить("ЭтоКорневойЭлемент",		ОписаниеТиповБулево);
		
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.Идентификатор		= "";
		НоваяСтрока.ЭтоКорневойЭлемент	= Истина;
	КонецЕсли;
	
	Если Дерево.Колонки.Найти("ЭтоОсновнаяНастройка") = Неопределено Тогда
		Дерево.Колонки.Добавить("ЭтоОсновнаяНастройка",	ОписаниеТиповБулево);
	КонецЕсли;
	
	Дерево.Строки[0].Наименование = НСтр("ru='Все';en='All'");
	
	Возврат Дерево;
КонецФункции // ВосстановитьДеревоПользовательскихНастроекДинамическогоСписка()

// Процедура восстанавливает из сохраненных настроек и обновляет на форме дерево настроек списка.
//
// Параметры:
//	ЭтаФорма					- ФормаКлиентскогоПриложения	- Форма
//	СвойстваДинамическогоСписка	- Структура			- Свойства динамического списка.
//
Процедура ПользовательскиеНастройкиСпискаОбновитьДеревоНастроек(ЭтаФорма, СвойстваДинамическогоСписка) Экспорт
	Если СвойстваДинамическогоСписка.ИмяДереваНастроек <> Неопределено Тогда
		Дерево =
			ВосстановитьДеревоПользовательскихНастроекДинамическогоСписка(СвойстваДинамическогоСписка.ИдентификаторСписка);
		Если ТипЗнч(Дерево) = Тип("ДеревоЗначений") Тогда
			ЭлементыДерева = ЭтаФорма[СвойстваДинамическогоСписка.ИмяДереваНастроек].ПолучитьЭлементы();
			ЭлементыДерева.Очистить();
			CRM_ОбщегоНазначенияКлиентСервер.СкопироватьДеревоВРеквизитФормы(Дерево.Строки, ЭлементыДерева);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПользовательскиеНастройкиСпискаОбновитьДеревоНастроек()
	
// Процедура вызывается из обработчика формы ПриСозданииНаСервере для инициализации дерева пользовательских настроек
// списка.
//
// Параметры:
//	ЭтаФорма					- ФормаКлиентскогоПриложения	- Форма
//	СвойстваДинамическогоСписка	- Структура			- Свойства динамического списка.
//
Процедура ПользовательскиеНастройкиСпискаПриСозданииНаСервере(ЭтаФорма, СвойстваДинамическогоСписка) Экспорт
	Если СвойстваДинамическогоСписка.ИмяДереваНастроек <> Неопределено Тогда
		ПользовательскиеНастройкиСпискаОбновитьДеревоНастроек(ЭтаФорма, СвойстваДинамическогоСписка);
		Если СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка <> Неопределено Тогда
			КнопкаНастройкиСпискаПометка = CRM_ХранилищеНастроек.Загрузить(СвойстваДинамическогоСписка.ИдентификаторСписка,
				 "ВидимостьНастроек");
			Если КнопкаНастройкиСпискаПометка = Неопределено Тогда
				КнопкаНастройкиСпискаПометка = Истина;
			КонецЕсли;
			ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка].Пометка =
				КнопкаНастройкиСпискаПометка;
		КонецЕсли;
	ИначеЕсли СвойстваДинамическогоСписка.ИмяЭлементаПодменю <> Неопределено Тогда
		НастройкаПоУмолчанию =
			ПользовательскиеНастройкиСпискаПолучитьНастройкуПоУмолчанию(СвойстваДинамическогоСписка.ИдентификаторСписка);
		Если НастройкаПоУмолчанию <> Неопределено Тогда
			ЭтаФорма[СвойстваДинамическогоСписка.ИмяПеременнойТекущейНастройки] = НастройкаПоУмолчанию.Идентификатор;
			CRM_ОбщегоНазначенияКлиентСервер.ПрименитьПользовательскиеНастройкиКДинамическомуСписку(
				ЭтаФорма[СвойстваДинамическогоСписка.ИмяСписка], ЭтаФорма[СвойстваДинамическогоСписка.ИмяПеременнойТекущейНастройки],
				СвойстваДинамическогоСписка.ИдентификаторСписка);
		КонецЕсли;
		ПользовательскиеНастройкиСпискаЗаполнитьПодменюНастроек(ЭтаФорма, СвойстваДинамическогоСписка);
	КонецЕсли;
КонецПроцедуры // ПользовательскиеНастройкиСпискаПриСозданииНаСервере()

// Процедура сохраняет настройки формы, связанные с пользовательскими настройками списка.
//
// Параметры:
//  ЭтаФорма					 - ФормаКлиентскогоПриложения	 - Форма
//  СвойстваДинамическогоСписка	 - Структура		 - Свойства динамического списка.
//  ИмяПользователя				 - Строка	 - Имя пользователя.
//
Процедура ПользовательскиеНастройкиСпискаСохранитьНастройкиФормы(ЭтаФорма,
	 СвойстваДинамическогоСписка,
	 ИмяПользователя = Неопределено) Экспорт
	Если СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка <> Неопределено Тогда
		КнопкаНастройкиСпискаПометка =
			ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка].Пометка;
		CRM_ХранилищеНастроек.Сохранить(СвойстваДинамическогоСписка.ИдентификаторСписка,
			 "ВидимостьНастроек", КнопкаНастройкиСпискаПометка, ,
			 ИмяПользователя);
	КонецЕсли;
КонецПроцедуры // ПользовательскиеНастройкиСпискаСохранитьНастройкиФормы()

// Функция возвращает список существующих пользовательских настроек для динамического списка.
//
// Параметры:
//  ИдентификаторСписка	 - Строка	 - Идентификатор списка.
//  ИмяПользователя		 - Строка	 - Имя пользователя.
// 
// Возвращаемое значение:
//  СписокЗначений - Список существующих пользовательских настроек для динамического списка.
//
Функция ПользовательскиеНастройкиСпискаПолучитьСписокНастроек(ИдентификаторСписка,
	 ИмяПользователя = Неопределено) Экспорт
	Список = Новый СписокЗначений();
	
	Дерево = ВосстановитьДеревоПользовательскихНастроекДинамическогоСписка(ИдентификаторСписка);
	
	Список.Добавить(Дерево.Строки[0].Идентификатор, Дерево.Строки[0].Наименование, Дерево.Строки[0].ЭтоОсновнаяНастройка);
	
	СписокСохраненныхНастроек = CRM_ХранилищеНастроек.ПолучитьСписок(ИдентификаторСписка, ИмяПользователя);
	
	НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("ЭтоКорневойЭлемент", Ложь), Истина);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если Не ЗначениеЗаполнено(НайденнаяСтрока.Идентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			// BSLLS:UnusedLocalVariable-off
			ТестоваяПеременная = Новый УникальныйИдентификатор(НайденнаяСтрока.Идентификатор);
			// BSLLS:UnusedLocalVariable-on
		Исключение	Продолжить;
		КонецПопытки;
		
		НайденноеЗначение = СписокСохраненныхНастроек.НайтиПоЗначению(НайденнаяСтрока.Идентификатор);
		Если НайденноеЗначение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Наименование = НайденнаяСтрока.Наименование;
		
		Список.Добавить(НайденнаяСтрока.Идентификатор, Наименование, НайденнаяСтрока.ЭтоОсновнаяНастройка);
	КонецЦикла;
	
	Возврат Список;
КонецФункции // ПользовательскиеНастройкиСпискаПолучитьСписокНастроек()

// Функция возвращает идентификатор пользовательской настройки по умолчанию.
//
// Параметры:
//	ИдентификаторСписка	- Строка	- Идентификатор списка.
//
// Возвращаемое значение:
//	Структура	- Структура пользовательской настройки. Если не найдено, Неопределено.
//
Функция ПользовательскиеНастройкиСпискаПолучитьНастройкуПоУмолчанию(ИдентификаторСписка) Экспорт
	ДеревоНастроек = ВосстановитьДеревоПользовательскихНастроекДинамическогоСписка(ИдентификаторСписка);
	НайденныеСтроки = ДеревоНастроек.Строки.НайтиСтроки(Новый Структура("ЭтоОсновнаяНастройка", Истина), Истина);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Новый Структура("Идентификатор,Наименование", НайденныеСтроки[0].Идентификатор,
			 НайденныеСтроки[0].Наименование);
	КонецЕсли;
КонецФункции // ПользовательскиеНастройкиСпискаПолучитьНастройкуПоУмолчанию()

// Функция устанавливает пользовательскую настройку списка по умолчанию по идентификатору.
//
// Параметры:
//	ИдентификаторСписка		- Строка	- Идентификатор списка.
//	ИдентификаторНастройки	- Строка	- Идентификатор настройки.
//
// Возвращаемое значение:
//	Булево	- Признак установки настройки.
//
Функция ПользовательскиеНастройкиСпискаУстановитьНастройкуПоУмолчанию(ИдентификаторСписка,
	 ИдентификаторНастройки) Экспорт
	ДеревоНастроек = ВосстановитьДеревоПользовательскихНастроекДинамическогоСписка(ИдентификаторСписка);
	НайденныеСтроки = ДеревоНастроек.Строки.НайтиСтроки(Новый Структура("ЭтоОсновнаяНастройка", Истина), Истина);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ЭтоОсновнаяНастройка = Ложь;
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИдентификаторНастройки) Тогда
		НайденныеСтроки = ДеревоНастроек.Строки.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторНастройки), Истина);
	Иначе
		НайденныеСтроки = ДеревоНастроек.Строки.НайтиСтроки(Новый Структура("ЭтоКорневойЭлемент", Истина), Истина);
	КонецЕсли;
	бНастройкаНайдена = Ложь;
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныеСтроки[0].ЭтоОсновнаяНастройка = Истина;
		бНастройкаНайдена = Истина;
	КонецЕсли;
	
	СохранитьДеревоПользовательскихНастроекДинамическогоСписка(ИдентификаторСписка, ДеревоНастроек);
	
	Возврат бНастройкаНайдена;
КонецФункции // ПользовательскиеНастройкиСпискаУстановитьНастройкуПоУмолчанию()

// Процедура заполняет подменю пользовательских настроек списка.
//
// Параметры:
//	ЭтаФорма					- ФормаКлиентскогоПриложения	- Форма
//	СвойстваДинамическогоСписка	- Структура			- Свойства динамического списка.
//
Процедура ПользовательскиеНастройкиСпискаЗаполнитьПодменюНастроек(ЭтаФорма, СвойстваДинамическогоСписка) Экспорт
	ИмяЭлементаПодменю				= СвойстваДинамическогоСписка.ИмяЭлементаПодменю;
	ИмяПеременнойТекущейНастройки	= СвойстваДинамическогоСписка.ИмяПеременнойТекущейНастройки;
	ИмяПроцедурыКоманды				= СвойстваДинамическогоСписка.ИмяПроцедурыКоманды;
	
	ПодменюНастроек = ЭтаФорма.Элементы[ИмяЭлементаПодменю];
	
	ПодменюНастроек.Подсказка = НСтр("ru='Список настроенных пользователем отборов и группировок';
		|en='List of user configured filters and groupings'");
	
	Пока ПодменюНастроек.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Элемент = ПодменюНастроек.ПодчиненныеЭлементы.Получить(ПодменюНастроек.ПодчиненныеЭлементы.Количество() - 1);
		ЭтаФорма.Элементы.Удалить(Элемент);
	КонецЦикла;
	
	СписокНастроек =
		ПользовательскиеНастройкиСпискаПолучитьСписокНастроек(СвойстваДинамическогоСписка.ИдентификаторСписка);
	
	ЗаголовокПодменю = "";
	
	ИдентификаторТекущейНастройки = ЭтаФорма[ИмяПеременнойТекущейНастройки];
	
	ИмяКомандыБезНастроек = "КомандаПользовательскиеНастройкиСписка_БезНастроек_" + СвойстваДинамическогоСписка.ИмяСписка;
	КомандаБезНастроек = ЭтаФорма.Команды.Найти(ИмяКомандыБезНастроек);
	Если КомандаБезНастроек = Неопределено Тогда
		КомандаБезНастроек = ЭтаФорма.Команды.Добавить(ИмяКомандыБезНастроек);
		КомандаБезНастроек.Действие = ИмяПроцедурыКоманды;
		КомандаБезНастроек.Заголовок = НСтр("ru='Все';en='All'");
	КонецЕсли;
	
	ГруппаБезНастроек = ЭтаФорма.Элементы.Добавить(
		"ГруппаПользовательскиеНастройкиСписка_БезНастроек_" + СвойстваДинамическогоСписка.ИмяСписка, Тип("ГруппаФормы"), ПодменюНастроек);
	//
	ГруппаБезНастроек.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	КнопкаБезНастроек = ЭтаФорма.Элементы.Добавить(
		"КнопкаПользовательскиеНастройкиСписка_БезНастроек_" + СвойстваДинамическогоСписка.ИмяСписка, Тип("КнопкаФормы"), ГруппаБезНастроек);
	//
	КнопкаБезНастроек.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	КнопкаБезНастроек.Заголовок = НСтр("ru='Все';en='All'");
	КнопкаБезНастроек.Пометка = Не ЗначениеЗаполнено(ИдентификаторТекущейНастройки);
	КнопкаБезНастроек.ИмяКоманды = ИмяКомандыБезНастроек;
	
	бТекущаяНастройкаУстановлена = КнопкаБезНастроек.Пометка;
	
	Для Каждого ЗначениеСписка Из СписокНастроек Цикл
		Попытка
			// BSLLS:UnusedLocalVariable-off
			ТестУникальныйИдентификатор = Новый УникальныйИдентификатор(ЗначениеСписка.Значение);
			// BSLLS:UnusedLocalVariable-on
		Исключение
			Продолжить;
		КонецПопытки;
		
		ИдентификаторБезЗапрещенныхСимволов = СтрЗаменить(ЗначениеСписка.Значение, "-", "_");
		ИмяКнопки = "КнопкаПользовательскиеНастройкиСписка_" + ИдентификаторБезЗапрещенныхСимволов + "_" 
			+ СвойстваДинамическогоСписка.ИмяСписка;
		ИмяКоманды = "КомандаПользовательскиеНастройкиСписка_" + ИдентификаторБезЗапрещенныхСимволов 
			+ "_" 
			+ СвойстваДинамическогоСписка.ИмяСписка;
		
		Заголовок = ?(ЗначениеЗаполнено(ЗначениеСписка.Представление), ЗначениеСписка.Представление, НСтр("ru='[]';en='[]'"));
		
		Команда = ЭтаФорма.Команды.Найти(ИмяКоманды);
		Если Команда = Неопределено Тогда
			Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
			Команда.Действие = ИмяПроцедурыКоманды;
			Команда.Заголовок = Заголовок;
		КонецЕсли;
		
		Кнопка = ЭтаФорма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ПодменюНастроек);
		Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Кнопка.Заголовок = Заголовок;
		Кнопка.Пометка = (ЗначениеСписка.Значение = ИдентификаторТекущейНастройки);
		Кнопка.ИмяКоманды = ИмяКоманды;
		
		Если Не бТекущаяНастройкаУстановлена Тогда
			бТекущаяНастройкаУстановлена = Кнопка.Пометка;
		КонецЕсли;
		
		Если Кнопка.Пометка Тогда
			ЗаголовокПодменю = Кнопка.Заголовок;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЗаголовокПодменю) Тогда
		Если СтрДлина(ЗаголовокПодменю) > 40 Тогда
			ЗаголовокПодменю = Лев(ЗаголовокПодменю, 40 - 3) + "...";
		КонецЕсли;
		ПодменюНастроек.Заголовок = ЗаголовокПодменю;
	Иначе
		ПодменюНастроек.Заголовок = НСтр("ru='Все';en='All'");
	КонецЕсли;
	
	Если Не бТекущаяНастройкаУстановлена Тогда
		КнопкаБезНастроек.Пометка = Истина;
	КонецЕсли;
	
	ГруппаНастройки = ЭтаФорма.Элементы.Добавить(
		"ГруппаПользовательскиеНастройкиСписка_Настройки_" + СвойстваДинамическогоСписка.ИмяСписка, Тип("ГруппаФормы"), ПодменюНастроек);
	//
	ГруппаНастройки.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	ИмяКоманды = "КомандаПользовательскиеНастройкиСписка_Настройки_" + СвойстваДинамическогоСписка.ИмяСписка;
	Команда = ЭтаФорма.Команды.Найти(ИмяКоманды);
	Если Команда = Неопределено Тогда
		Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
		Команда.Действие = ИмяПроцедурыКоманды;
		Команда.Заголовок = НСтр("ru='Настройки...';en='Set up...'"); 
	КонецЕсли;
	ИмяКнопки = "КнопкаПользовательскиеНастройкиСписка_Настройки_" + СвойстваДинамическогоСписка.ИмяСписка;
	Кнопка = ЭтаФорма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ГруппаНастройки);
	Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	Кнопка.Заголовок = НСтр("ru='Настройки...';en='Set up...'");
	Кнопка.ИмяКоманды = ИмяКоманды;
	Кнопка.Картинка = БиблиотекаКартинок.CRM_Настройки;
	Кнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
КонецПроцедуры // ПользовательскиеНастройкиСпискаЗаполнитьПодменюНастроек()

#КонецОбласти // РаботаСПользовательскимиНастройкамиДинамическихСписков

#Область РаботаСПользовательскимиНастройкамиФорм

// Процедура вызывается из обработчика формы ПриСозданииНаСервере для инициализации пользовательских настроек
//  списка.
//
// Параметры:
//  ЭтаФорма		 - ФормаКлиентскогоПриложения	 - Форма
//  СвойстваФормы	 - Структура - Свойства формы.
//
Процедура ПользовательскиеНастройкиФормыПриСозданииНаСервере(ЭтаФорма, СвойстваФормы) Экспорт
	Если СвойстваФормы.ИмяЭлементаПодменю <> Неопределено Тогда
		ПользовательскиеНастройкиФормыЗаполнитьПодменюНастроек(ЭтаФорма, СвойстваФормы);
	КонецЕсли;
КонецПроцедуры 

// Процедура заполняет подменю пользовательских настроек формы.
//
// Параметры:
//	ЭтаФорма		- ФормаКлиентскогоПриложения	- Форма
//  СвойстваФормы	- Структура - Свойства формы.
//
Процедура ПользовательскиеНастройкиФормыЗаполнитьПодменюНастроек(ЭтаФорма, СвойстваФормы) Экспорт
	ИмяЭлементаПодменю				= СвойстваФормы.ИмяЭлементаПодменю;
	ИмяПеременнойТекущейНастройки	= СвойстваФормы.ИмяПеременнойТекущейНастройки;
	ИмяПроцедурыКоманды				= СвойстваФормы.ИмяПроцедурыКоманды;
	
	ПодменюНастроек = ЭтаФорма.Элементы[ИмяЭлементаПодменю];
	
	ПодменюНастроек.Подсказка = НСтр("ru='Список настроенных пользователем отборов и группировок';
		|en='List of user configured filters and groupings'");
	
	СписокНастроек = ХранилищеНастроекДанныхФорм.ПолучитьСписок(ЭтаФорма.ИмяФормы);
	
	СписокУдаленныхНастроек = Новый СписокЗначений;
	Для Каждого Элемент Из ПодменюНастроек.ПодчиненныеЭлементы Цикл
		СписокУдаленныхНастроек.Добавить(Элемент);
	КонецЦикла;
	Для Каждого Элемент Из СписокУдаленныхНастроек Цикл
		ЭтаФорма.Элементы.Удалить(Элемент.Значение);
	КонецЦикла;
	
	ЗаголовокПодменю = "";
	
	ИдентификаторТекущейНастройки = ЭтаФорма[ИмяПеременнойТекущейНастройки];
	
	Для Каждого ЗначениеСписка Из СписокНастроек Цикл
		Попытка
			// BSLLS:UnusedLocalVariable-off
			ТестУникальныйИдентификатор = Новый УникальныйИдентификатор(ЗначениеСписка.Значение);
			// BSLLS:UnusedLocalVariable-on
		Исключение
			Продолжить;
		КонецПопытки;
		
		ИдентификаторБезЗапрещенныхСимволов = СтрЗаменить(ЗначениеСписка.Значение, "-", "_");
		ИмяКнопки = "КнопкаПользовательскиеНастройкиСписка_" + ИдентификаторБезЗапрещенныхСимволов;
		ИмяКоманды = "КомандаПользовательскиеНастройкиФормы_" + ИдентификаторБезЗапрещенныхСимволов;
		
		Заголовок = ?(ЗначениеЗаполнено(ЗначениеСписка.Представление), ЗначениеСписка.Представление, НСтр("ru='[]';en='[]'"));
		
		Команда = ЭтаФорма.Команды.Найти(ИмяКоманды);
		Если Команда = Неопределено Тогда
			Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
			Команда.Действие = ИмяПроцедурыКоманды;
			Команда.Заголовок = Заголовок;
		КонецЕсли;
		
		Кнопка = ЭтаФорма.Элементы.Найти(ИмяКнопки);
		Если Кнопка = Неопределено Тогда
			Кнопка = ЭтаФорма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ПодменюНастроек);
			Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
			Кнопка.Заголовок = Заголовок;
			Кнопка.Пометка = (ЗначениеСписка.Значение = ИдентификаторТекущейНастройки);
			Кнопка.ИмяКоманды = ИмяКоманды;
			Кнопка.ТолькоВоВсехДействиях = Истина;
		КонецЕсли;
		
		// Если Не бТекущаяНастройкаУстановлена Тогда
		//	бТекущаяНастройкаУстановлена = Кнопка.Пометка;
		// КонецЕсли;
		
		Если Кнопка.Пометка Тогда
			ЗаголовокПодменю = Кнопка.Заголовок;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЗаголовокПодменю) Тогда
		Если СтрДлина(ЗаголовокПодменю) > 40 Тогда
			ЗаголовокПодменю = Лев(ЗаголовокПодменю, 40 - 3) + "...";
		КонецЕсли;
		ПодменюНастроек.Заголовок = ЗаголовокПодменю;
	КонецЕсли;
	
КонецПроцедуры // ПользовательскиеНастройкиФормыЗаполнитьПодменюНастроек()

// Сбрасывает настройки положения окна.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, для которой сбрасываются настройки.
//
Процедура СбросНастроекПоложенияОкна(Форма) Экспорт
	МассивКлючейСохраненияПоложенияОкна = ХранилищеНастроекДанныхФорм.Загрузить(Форма.ИмяФормы,
		 "МассивКлючейСохраненияПоложенияОкна");
	Если МассивКлючейСохраненияПоложенияОкна = Неопределено Тогда
		МассивКлючейСохраненияПоложенияОкна = Новый Массив;
	КонецЕсли;
	УдалитьНастройкиПоложенияОкна(Форма.ИмяФормы, МассивКлючейСохраненияПоложенияОкна);
	Форма.КлючСохраненияПоложенияОкна = СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
	МассивКлючейСохраненияПоложенияОкна.Добавить(Форма.КлючСохраненияПоложенияОкна);
	ХранилищеНастроекДанныхФорм.Сохранить(Форма.ИмяФормы, "МассивКлючейСохраненияПоложенияОкна",
		 МассивКлючейСохраненияПоложенияОкна);
КонецПроцедуры // СбросНастроекПоложенияОкна()
 
#КонецОбласти // РаботаСПользовательскимиНастройкамиФорм

#Область РаботаСНастройкамиПолейОтображенияСодержания

// Процедура заполняет настройки по умолчанию из макета для указанного типа объекта.
//
// Параметры:
//  Объект			 - ДокументСсылка.CRM_Взаимодействие - Тип, ОписаниеТипов или Строка,
//						вида "ДокументСсылка.CRM_Взаимодействие".
//  ИмяПользователя	 - Строка - Имя пользователя.
//
Процедура НастройкиПолейОтображенияСодержанияЗаполнитьНастройкиОбъектаПоУмолчанию(Объект, ИмяПользователя) Экспорт
	
	ТаблицаБланк = НастройкиПолейОтображенияСодержанияПолучитьТаблицуНастроекБланк();
	
	НастройкаОбъектаПоУмолчанию = НастройкиПолейОтображенияСодержанияПолучитьНастройки(Объект, Истина);
	Если НастройкаОбъектаПоУмолчанию.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Колонка Из ТаблицаБланк.Колонки Цикл
		Если НастройкаОбъектаПоУмолчанию.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			НастройкаОбъектаПоУмолчанию.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	
	НастройкиТекущие = НастройкиПолейОтображенияСодержанияПолучитьНастройки();
	Для Каждого Колонка Из ТаблицаБланк.Колонки Цикл
		Если НастройкиТекущие.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			НастройкиТекущие.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	
	НайденнаяСтрока = НастройкиТекущие.Найти(Объект, "Объект");
	Если НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока = НастройкиТекущие.Добавить();
		НайденнаяСтрока.Объект = Объект;
		НайденнаяСтрока.ДеревоНастроек = НастройкаОбъектаПоУмолчанию[0].ДеревоНастроек.Скопировать();
	Иначе
		НайденнаяСтрока.ДеревоНастроек = НастройкаОбъектаПоУмолчанию[0].ДеревоНастроек.Скопировать();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НайденнаяСтрока, НастройкаОбъектаПоУмолчанию[0], , "ДеревоНастроек");
	
	НастройкиПолейОтображенияСодержанияСохранитьТаблицуНастроек(НастройкиТекущие, ИмяПользователя);
	
КонецПроцедуры

// Функция возвращает Истина, если тип реквизита считается ссылочным.
//
// Параметры:
//	РеквизитИлиТип	- Произвольный	- Реквизит или тип реквизита.
//
// Возвращаемое значение:
//	Булево	- Признак ссылочного типа реквизита.
//
Функция НастройкиПолейОтображенияСодержанияРеквизитЭтоСсылка(РеквизитИлиТип) Экспорт
	Если ТипЗнч(РеквизитИлиТип) = Тип("Тип") Тогда
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(РеквизитИлиТип);
		ТипЗначения = Новый ОписаниеТипов(МассивТипов);
	ИначеЕсли ТипЗнч(РеквизитИлиТип) = Тип("ОписаниеТипов") Тогда
		ТипЗначения = РеквизитИлиТип;
	Иначе
		ТипЗначения = РеквизитИлиТип.Тип;
	КонецЕсли;
	Типы = ТипЗначения.Типы();
	Для Каждого Тип Из Типы Цикл
		Если	Не Справочники.ТипВсеСсылки().СодержитТип(Тип)
			И	Не Документы.ТипВсеСсылки().СодержитТип(Тип)
			И	Не ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
			И	Не ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
			И	Не ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
			И	Не БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
			И	Не Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции // НастройкиПолейОтображенияСодержанияРеквизитЭтоСсылка()

// Функция возвращает строковое представление ссылочного типа.
//
// Параметры:
//	Тип	- Тип	- Тип реквизита
//
// Возвращаемое значение:
//	Строка	- Строковое представление ссылочного типа.
//
Функция НастройкиПолейОтображенияСодержанияСсылочныйТипСтрокой(Тип) Экспорт
	Попытка
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
	Исключение
		ОбъектМетаданных = Неопределено;
	КонецПопытки;
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Возврат "СправочникСсылка." + ОбъектМетаданных.Имя;
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Возврат "ДокументСсылка." + ОбъектМетаданных.Имя;
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланВидовХарактеристикСсылка." + ОбъектМетаданных.Имя;
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланСчетовСсылка." + ОбъектМетаданных.Имя;
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланВидовРасчетаСсылка." + ОбъектМетаданных.Имя;
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
		Возврат "БизнесПроцессСсылка." + ОбъектМетаданных.Имя;
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		Возврат "ЗадачаСсылка." + ОбъектМетаданных.Имя;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // НастройкиПолейОтображенияСодержанияСсылочныйТипСтрокой()

// Процедура сохраняет настройки полей отображения содержания.
//
// Параметры:
//	Дерево					- ДеревоЗначений	- Дерево с настройками полей отображения содержания.
//	ЗаместитьВсеНастройки	- Булево			- Флаг замены настроек.
//
Процедура НастройкиПолейОтображенияСодержанияСохранитьНастройки(Дерево, ЗаместитьВсеНастройки = Ложь) Экспорт
	ТаблицаНастройки = НастройкиПолейОтображенияСодержанияПреобразоватьДеревоВТаблицу(Дерево);
	Если ЗаместитьВсеНастройки Тогда
		НастройкиПолейОтображенияСодержанияСохранитьТаблицуНастроек(ТаблицаНастройки);
	Иначе
		ТаблицаБланк = НастройкиПолейОтображенияСодержанияПолучитьТаблицуНастроекБланк();
		ТаблицаСохраненная = НастройкиПолейОтображенияСодержанияПолучитьНастройки();
		Для Каждого Колонка Из ТаблицаБланк.Колонки Цикл
			Если ТаблицаСохраненная.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
				ТаблицаСохраненная.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из ТаблицаНастройки Цикл
			НайденнаяСтрока = ТаблицаСохраненная.Найти(СтрокаТаблицы.Объект, "Объект");
			Если НайденнаяСтрока = Неопределено Тогда
				НайденнаяСтрока = ТаблицаСохраненная.Добавить();
				НайденнаяСтрока.Объект = СтрокаТаблицы.Объект;
				НайденнаяСтрока.ДеревоНастроек = СтрокаТаблицы.ДеревоНастроек.Скопировать();
			Иначе
				НайденнаяСтрока.ДеревоНастроек = СтрокаТаблицы.ДеревоНастроек.Скопировать();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаТаблицы, , "ДеревоНастроек");
		КонецЦикла;
		НастройкиПолейОтображенияСодержанияСохранитьТаблицуНастроек(ТаблицаСохраненная);
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры // НастройкиПолейОтображенияСодержанияСохранитьНастройки()

// Функция восстанавливает настройки полей отображения содержания.
//
// Параметры:
//	ПолучитьДляОбъектаИлиТипа		- Произвольный		- Объект или тип.
//	ПолучитьНастройкиПоУмолчанию	- Булево			- Получить настройки по умолчанию.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица настроек полей отображения содержания.
//
Функция НастройкиПолейОтображенияСодержанияПолучитьНастройки(ПолучитьДляОбъектаИлиТипа = Неопределено,
	 ПолучитьНастройкиПоУмолчанию = Ложь) Экспорт
	Если ПолучитьДляОбъектаИлиТипа = Неопределено Тогда
		МассивФильтрПоОбъектам = Неопределено;
	Иначе
		МассивФильтрПоОбъектам = Новый Массив();
		Если ТипЗнч(ПолучитьДляОбъектаИлиТипа) = Тип("Строка") Тогда
			МассивФильтрПоОбъектам.Добавить(ПолучитьДляОбъектаИлиТипа);
		ИначеЕсли ТипЗнч(ПолучитьДляОбъектаИлиТипа) = Тип("ОписаниеТипов") Тогда
			Для Каждого Тип Из ПолучитьДляОбъектаИлиТипа.Типы() Цикл
				Если НЕ НастройкиПолейОтображенияСодержанияРеквизитЭтоСсылка(Тип) Тогда
					Продолжить;
				КонецЕсли;
				ТипСтрокой = НастройкиПолейОтображенияСодержанияСсылочныйТипСтрокой(Тип);
				Если ТипСтрокой <> Неопределено Тогда
					МассивФильтрПоОбъектам.Добавить(ТипСтрокой);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ПолучитьДляОбъектаИлиТипа) = Тип("Тип") Тогда
			Если НастройкиПолейОтображенияСодержанияРеквизитЭтоСсылка(ПолучитьДляОбъектаИлиТипа) Тогда
				ТипСтрокой = НастройкиПолейОтображенияСодержанияСсылочныйТипСтрокой(ПолучитьДляОбъектаИлиТипа);
				Если ТипСтрокой <> Неопределено Тогда
					МассивФильтрПоОбъектам.Добавить(ТипСтрокой);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КлючОбъекта = НастройкиПолейОтображенияСодержанияПолучитьКлючОбъектаДляСохраненияВосстановления();
	
	Если ПолучитьНастройкиПоУмолчанию Тогда
		ТаблицаНастройки = НастройкиПолейОтображенияСодержанияПолучитьНастройкиПоУмолчанию();
	Иначе
		ТаблицаНастройки = CRM_ХранилищеНастроекПовтИсп.Загрузить(КлючОбъекта, "ТаблицаНастройки");
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаНастройки) = Тип("ТаблицаЗначений") Тогда
		ТаблицаНастройки = НастройкиПолейОтображенияСодержанияСкорректироватьВнешнююТаблицу(ТаблицаНастройки);
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаНастройки) <> Тип("ТаблицаЗначений") Тогда
		ТаблицаРезультат = НастройкиПолейОтображенияСодержанияПолучитьТаблицуНастроекБланк();
	ИначеЕсли МассивФильтрПоОбъектам <> Неопределено Тогда
		ТаблицаПоФильтру = НастройкиПолейОтображенияСодержанияПолучитьТаблицуНастроекБланк();
		Для Каждого СтрокаТаблицы Из ТаблицаНастройки Цикл
			Если МассивФильтрПоОбъектам.Найти(СтрокаТаблицы.Объект) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТаблицаПоФильтру.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		ТаблицаРезультат = ТаблицаПоФильтру;
	Иначе
		ТаблицаРезультат = ТаблицаНастройки;
	КонецЕсли;
	
	Возврат ТаблицаРезультат;
КонецФункции // НастройкиПолейОтображенияСодержанияПолучитьНастройки()

// Процедура вызывается из обработчика <ПриСозданииНаСервере> формы, в которой есть поле отображения содержания.
//
// Параметры:
//	ЭтаФорма											- ФормаКлиентскогоПриложения	- Форма
//	ИдентификаторСписка									- Строка			- Идентификатор списка.
//	ИмяГруппыПоляОтображенияСодержания 					- Строка			- Имя группы поля отображения содержания.
//	ИмяКнопкиПоказатьСкрытьПолеОтображенияСодержания	- Строка			- Имя кнопки отображения содержания.
//
Процедура НастройкиПолейОтображенияСодержанияПриСозданииФормыСпискаНаСервере(ЭтаФорма,
																			ИдентификаторСписка = Неопределено,
																			ИмяГруппыПоляОтображенияСодержания = "ГруппаПолеОтображенияСодержания",
																			ИмяКнопкиПоказатьСкрытьПолеОтображенияСодержания = "КнопкаПоказатьСкрытьПолеОтображенияСодержания") Экспорт
	КлючОбъекта = НастройкиПолейОтображенияСодержанияПолучитьКлючОбъектаДляСохраненияВосстановления();
	Если ИдентификаторСписка = Неопределено Тогда
		Попытка
			ИдентификаторСписка = ЭтаФорма.ИмяФормы;
		
		Исключение	ИдентификаторСписка = Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если ИдентификаторСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Попытка
		Кнопка = ЭтаФорма.Элементы[ИмяКнопкиПоказатьСкрытьПолеОтображенияСодержания];
	Исключение
		Кнопка = Неопределено;
	КонецПопытки;
	Если Кнопка = Неопределено Тогда
		бВидимость = Истина;
	Иначе
		Кнопка.Пометка = (CRM_ХранилищеНастроек.Загрузить(КлючОбъекта, ИдентификаторСписка 
			+ "_КнопкаПоказатьСкрытьПолеОтображенияСодержанияПометка") <> Ложь);
		бВидимость = Кнопка.Пометка;
	КонецЕсли;
	Если ЭтаФорма.Элементы[ИмяГруппыПоляОтображенияСодержания].Видимость <> бВидимость Тогда
		ЭтаФорма.Элементы[ИмяГруппыПоляОтображенияСодержания].Видимость = бВидимость;
	КонецЕсли;
КонецПроцедуры // НастройкиПолейОтображенияСодержанияПриСозданииФормыСпискаНаСервере()

// Процедура вызывается из обработчика <ПриЗакрытии> форма,  в которой есть поле отображения содержания.
//
// Параметры:
//	ЭтаФорма											- ФормаКлиентскогоПриложения	- Форма
//	ИдентификаторСписка									- Строка			- Идентификатор списка.
//	ИмяГруппыПоляОтображенияСодержания 					- Строка			- Имя группы поля отображения содержания.
//	ИмяКнопкиПоказатьСкрытьПолеОтображенияСодержания	- Строка			- Имя кнопки отображения содержания.
//
Процедура НастройкиПолейОтображенияСодержанияПриЗакрытииФормыСписка(ЭтаФорма,
																	ИдентификаторСписка = Неопределено,
																	ИмяГруппыПоляОтображенияСодержания = "ГруппаПолеОтображенияСодержания",
																	ИмяКнопкиПоказатьСкрытьПолеОтображенияСодержания = "КнопкаПоказатьСкрытьПолеОтображенияСодержания") Экспорт
	КлючОбъекта = НастройкиПолейОтображенияСодержанияПолучитьКлючОбъектаДляСохраненияВосстановления();
	Если ИдентификаторСписка = Неопределено Тогда
		Попытка
			ИдентификаторСписка = ЭтаФорма.ИмяФормы;
		Исключение
			ИдентификаторСписка = Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если ИдентификаторСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Попытка
		Кнопка = ЭтаФорма.Элементы[ИмяКнопкиПоказатьСкрытьПолеОтображенияСодержания];
	Исключение
		Кнопка = Неопределено;
	КонецПопытки;
	Если Кнопка <> Неопределено Тогда
		CRM_ХранилищеНастроек.Сохранить(КлючОбъекта, ИдентификаторСписка 
			+ "_КнопкаПоказатьСкрытьПолеОтображенияСодержанияПометка", Кнопка.Пометка);
	КонецЕсли;
КонецПроцедуры // НастройкиПолейОтображенияСодержанияПриЗакрытииФормыСписка()

// Функция возвращает описание типов для списка которое можно использовать для фильтрации состава объектов в форме
// настроек.
//
// Параметры:
//	ОсновнаяТаблица	- ТаблицаЗначений	- Таблица данных для запроса.
//
// Возвращаемое значение:
//	ОписаниеТипов	- Описание типов для списка. Если не найдено, Неопределено.
//
Функция НастройкиПолейОтображенияСодержанияПолучитьОписаниеТиповДляСписка(ОсновнаяТаблица) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 0 Таблица.Ссылка КАК Ссылка ИЗ " + ОсновнаяТаблица + " КАК Таблица");
	Попытка
		РезультатТаблица = Запрос.Выполнить().Выгрузить();
		ТипЗначения = РезультатТаблица.Колонки.Ссылка.ТипЗначения;
		Попытка
			ТипЗначенияРезультат = Новый ОписаниеТипов(ТипЗначения, , "NULL");
		Исключение
			ТипЗначенияРезультат = ТипЗначения;
		КонецПопытки;
		Возврат ТипЗначенияРезультат;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции // НастройкиПолейОтображенияСодержанияПолучитьОписаниеТиповДляСписка()

// Функция сохраняет настройки полей отображения содержания в файл.
//
// Параметры:
//	ИмяФайла	- Строка	- Имя файла.
//
// Возвращаемое значение:
//	Строка	- Текст сообщения об ошибке.
//
Функция НастройкиПолейОтображенияСодержанияСохранитьВФайл(ИмяФайла) Экспорт
	Попытка
		ЗаписьXML = Новый ЗаписьXML();
		ЗаписьXML.ОткрытьФайл(ИмяФайла);
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ТаблицаНастроек = НастройкиПолейОтображенияСодержанияПолучитьНастройки();
		ЗаписатьXML(ЗаписьXML, Новый ХранилищеЗначения(ТаблицаНастроек, Новый СжатиеДанных(9)));
		ЗаписьXML.Закрыть();
		Возврат "";
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Возврат CRM_ОбщегоНазначенияКлиентСервер.ПолучитьПредставленияИнформацииОбОшибке(ИнформацияОбОшибке);
	КонецПопытки;
КонецФункции // НастройкиПолейОтображенияСодержанияСохранитьВФайл()

// Функция загружает настройки полей отображения содержания из внешней таблицы значений.
//
// Параметры:
//	ТаблицаИсточник		- ТаблицаЗначений	- Таблица настроек полей отображения содержания.
//	СтрокаОшибкаФормата	- Строка			- Строка для вывода сообщения об ошибке формата.
//
// Возвращаемое значение:
//	Строка	- Текст сообщения об ошибке формата.
//
Функция НастройкиПолейОтображенияСодержанияЗагрузитьИзВнешнейТаблицы(ТаблицаИсточник,
	 СтрокаОшибкаФормата = Неопределено) Экспорт
	Если СтрокаОшибкаФормата = Неопределено Тогда
		СтрокаОшибкаФормата = НСтр("ru='Ошибка формата данных!';en='Error of a format of the data!'");
	КонецЕсли;
	Если ТипЗнч(ТаблицаИсточник) <> Тип("ТаблицаЗначений") Тогда
		Возврат СтрокаОшибкаФормата;
	КонецЕсли;
	Если	ТаблицаИсточник.Колонки.Найти("Объект") = Неопределено
		Или	ТаблицаИсточник.Колонки.Найти("ДеревоНастроек") = Неопределено Тогда
		Возврат СтрокаОшибкаФормата;
	КонецЕсли;
	ТаблицаНастройки = НастройкиПолейОтображенияСодержанияСкорректироватьВнешнююТаблицу(ТаблицаИсточник);
	НастройкиПолейОтображенияСодержанияСохранитьТаблицуНастроек(ТаблицаНастройки);
	Возврат "";
КонецФункции // НастройкиПолейОтображенияСодержанияЗагрузитьИзВнешнейТаблицы()

// Процедура загружает настройки полей отображения содержания из макета.
//
// Параметры:
//  ИмяМакета		 - Строка	 - Имя макета.
//  ИмяПользователя	 - Строка 	 - Имя пользователя.
//
Процедура НастройкиПолейОтображенияСодержанияЗагрузитьИзМакета(ИмяМакета = Неопределено,
	 ИмяПользователя = Неопределено) Экспорт
	Если ИмяМакета = Неопределено Тогда
		ИмяМакета = "CRM_НастройкиПолейОтображенияСодержания";
	КонецЕсли;
	ТаблицаНастройки = НастройкиПолейОтображенияСодержанияПолучитьНастройкиПоУмолчанию(ИмяМакета);
	Если ТаблицаНастройки <> Неопределено Тогда
		НастройкиПолейОтображенияСодержанияСохранитьТаблицуНастроек(ТаблицаНастройки, ИмяПользователя);
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
КонецПроцедуры // НастройкиПолейОтображенияСодержанияЗагрузитьИзМакета()

// Процедура загружает всем пользователям базы настройки полей отображения содержания из макета.
//
// Параметры:
//	ИмяМакета - Строка - Имя макета.
//
Процедура УстановитьВсемПользователямНастройкиОтображенияСодержанияИзМакета(ИмяМакета = Неопределено) Экспорт
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для каждого ПользовательИБ Из ПользователиИБ Цикл
		НастройкиПолейОтображенияСодержанияЗагрузитьИзМакета(ИмяМакета, ПользовательИБ.Имя);
	КонецЦикла;

КонецПроцедуры // УстановитьВсемПользователямНастройкиОтображенияСодержанияИзМакета()

// Функция загружает настройки полей отображения содержания из файла.
//
// Параметры:
//	ИмяФайла										- Строка	- Имя файла.
//	ПоместитьТаблицуВоВременноеХранилищеПоАдресу	- Строка	- Адрес во временном хранилище.
//
// Возвращаемое значение:
//	Строка	- Текст сообщения об ошибке.
//
Функция НастройкиПолейОтображенияСодержанияЗагрузитьИзФайла(ИмяФайла,
	 ПоместитьТаблицуВоВременноеХранилищеПоАдресу = Неопределено) Экспорт
	Попытка
		СтрокаОшибкаФорматаФайла = НСтр("ru='Файл не является файлом сохраненных полей отображения содержания!';
			|en='File is not a file of the saved fields of display of the content!'");
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		Попытка
			Хранилище = ПрочитатьXML(ЧтениеXML);
		Исключение
			ВызватьИсключение СтрокаОшибкаФорматаФайла;
		КонецПопытки;
		ЧтениеXML.Закрыть();
		Если ТипЗнч(Хранилище) <> Тип("ХранилищеЗначения") Тогда
			ВызватьИсключение СтрокаОшибкаФорматаФайла;
		КонецЕсли;
		ТаблицаНастройки = Хранилище.Получить();
		Если ТипЗнч(ТаблицаНастройки) <> Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение СтрокаОшибкаФорматаФайла;
		КонецЕсли;
		Если ПоместитьТаблицуВоВременноеХранилищеПоАдресу = Неопределено Тогда
			РезультатЗагрузки = НастройкиПолейОтображенияСодержанияЗагрузитьИзВнешнейТаблицы(ТаблицаНастройки,
				 СтрокаОшибкаФорматаФайла);
			Если НЕ ПустаяСтрока(РезультатЗагрузки) Тогда
				ВызватьИсключение РезультатЗагрузки;
			КонецЕсли;
		Иначе
			ТаблицаРезультат = НастройкиПолейОтображенияСодержанияСкорректироватьВнешнююТаблицу(ТаблицаНастройки);
			Если ТаблицаРезультат = Неопределено Тогда
				ВызватьИсключение СтрокаОшибкаФорматаФайла;
			Иначе
				Если ЭтоАдресВременногоХранилища(ПоместитьТаблицуВоВременноеХранилищеПоАдресу) Тогда
					ПоместитьВоВременноеХранилище(ТаблицаРезультат, ПоместитьТаблицуВоВременноеХранилищеПоАдресу);
				Иначе
					ВызватьИсключение НСтр("ru='Ошибка при работе с временным хранилищем значений';
						|en='Error by operation with temporary storage of values'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Возврат "";
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Возврат CRM_ОбщегоНазначенияКлиентСервер.ПолучитьПредставленияИнформацииОбОшибке(ИнформацияОбОшибке);
	КонецПопытки;
КонецФункции // НастройкиПолейОтображенияСодержанияЗагрузитьИзФайла()

// Функция возвращает HTML текст содержания по переданным параметрам.
//
// Параметры:
//  СсылкаИлиДеревоНастроекИлиОбъект - Произвольный	 - Ссылка или дерево настроек или объект.
//  ОграниченияТипов				 - ОписаниеТипов - Ограничения типов для кэша.
//  ДополнительныеПараметры			 - Структура	 - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Строка - HTML текст содержания.
//
Функция НастройкиПолейОтображенияСодержанияПолучитьСодержание(СсылкаИлиДеревоНастроекИлиОбъект,
															ОграниченияТипов = Неопределено,
															ДополнительныеПараметры = Неопределено) Экспорт
	Если СсылкаИлиДеревоНастроекИлиОбъект = Неопределено Тогда
		Возврат CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
	Иначе
		Тип = ТипЗнч(СсылкаИлиДеревоНастроекИлиОбъект);
		
		СсылкаНаОбъект = Неопределено;
		
		ШиринаЛевойКолонки				= Неопределено;
		ШиринаЛевойКолонкиАбсолютная	= Неопределено;
		ШиринаПравойКолонки				= Неопределено;
		ШиринаПравойКолонкиАбсолютная	= Неопределено;
		
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			ДополнительныеПараметры.Свойство("ШиринаЛевойКолонки",				ШиринаЛевойКолонки);
			ДополнительныеПараметры.Свойство("ШиринаЛевойКолонкиАбсолютная",	ШиринаЛевойКолонкиАбсолютная);
			ДополнительныеПараметры.Свойство("ШиринаПравойКолонки",				ШиринаПравойКолонки);
			ДополнительныеПараметры.Свойство("ШиринаПравойКолонкиАбсолютная",	ШиринаПравойКолонкиАбсолютная);
		КонецЕсли;
		
		Если Тип = Тип("ДеревоЗначений") Тогда
			ДеревоНастроек = СсылкаИлиДеревоНастроекИлиОбъект;
		Иначе
			Если Тип = Тип("Строка") Или Тип = Тип("Тип") Тогда
				Если ТипЗнч(Тип) = Тип("Тип") Тогда
					ТипСтрокой = НастройкиПолейОтображенияСодержанияСсылочныйТипСтрокой(Тип);
					Если ТипСтрокой = Неопределено Тогда
						Возврат CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
					КонецЕсли;
				Иначе
					ТипСтрокой = СсылкаИлиДеревоНастроекИлиОбъект;
				КонецЕсли;
			Иначе
				// передана ссылка
				СсылкаНаОбъект = СсылкаИлиДеревоНастроекИлиОбъект;
				
				ТипСтрокой = НастройкиПолейОтображенияСодержанияСсылочныйТипСтрокой(Тип);
				Если ТипСтрокой = Неопределено Тогда
					Возврат CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
				КонецЕсли;
				
				// Проверим что есть доступ к тексту письма.
				Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
					Или ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
					
					Попытка
					
						Если Не НайтиПользователяВУчетнойЗаписи(СсылкаНаОбъект.УчетнаяЗапись, Пользователи.ТекущийПользователь())
							И Не СсылкаНаОбъект.УчетнаяЗапись.CRM_РазрешитьПросмотрПисемВсемПользователям
							И Не СсылкаНаОбъект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь() Тогда
							
							СтрокаПараметр =
								НСтр("ru='<P align=center> <FONT color=#ff0000> Недостаточно прав для просмотра писем учетной записи &laquo;
								| %1 &raquo;!</FONT>"
"<br>Текущий пользователь должен быть добавлен в список пользователей учетной записи либо"
"<br>быть Ответственным данного письма либо"
"<br>в учетной записи должен стоять флаг ""Разрешить просмотр писем всем пользователям системы"""
"';en='<P align=center> <FONT color=#ff0000> It is not enough rights to view account emails &laquo; %1 &raquo;!</FONT>"
"<br>Current user must be added to users list of account or"
"<br>be Responsible of this mail or"
"<br>there is a check box ""Allow to view mails to all users of system"" in account"
"'");
							
							СтрокаПараметр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПараметр,
								 СсылкаНаОбъект.УчетнаяЗапись);
							
							Возврат CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание(,
								 СтрокаПараметр);
							
						КонецЕсли;
						
					Исключение
						Возврат CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание(,
							 СтрокаПараметр);
					КонецПопытки;
					
				КонецЕсли;
			КонецЕсли;
			
			ТаблицаНастроек = НастройкиПолейОтображенияСодержанияПолучитьНастройки(?(ОграниченияТипов = Неопределено,
				 ТипСтрокой,
				 ОграниченияТипов));
			//
			Если ТаблицаНастроек.Количество() = 0 Тогда
				Возврат CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
			Иначе
				НайденнаяСтрока = ТаблицаНастроек.Найти(ТипСтрокой, "Объект");
				Если НайденнаяСтрока = Неопределено Тогда
					Возврат CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
				Иначе
					ДеревоНастроек = НайденнаяСтрока.ДеревоНастроек;
					
					Если ШиринаЛевойКолонки = Неопределено Тогда
						Попытка
							ШиринаЛевойКолонки = НайденнаяСтрока.ШиринаЛевойКолонки;
						
						Исключение	ШиринаЛевойКолонки = Неопределено;
						КонецПопытки;
					КонецЕсли;
					Если ШиринаЛевойКолонкиАбсолютная = Неопределено Тогда
						Попытка
							ШиринаЛевойКолонкиАбсолютная = НайденнаяСтрока.ШиринаЛевойКолонкиАбсолютная;
						
						Исключение	ШиринаЛевойКолонкиАбсолютная = Неопределено;
						КонецПопытки;
					КонецЕсли;
					Если ШиринаПравойКолонки = Неопределено Тогда
						Попытка
							ШиринаПравойКолонки = НайденнаяСтрока.ШиринаПравойКолонки;
						
						Исключение	ШиринаПравойКолонки = Неопределено;
						КонецПопытки;
					КонецЕсли;
					Если ШиринаПравойКолонкиАбсолютная = Неопределено Тогда
						Попытка
							ШиринаПравойКолонкиАбсолютная = НайденнаяСтрока.ШиринаПравойКолонкиАбсолютная;
						
						Исключение	ШиринаПравойКолонкиАбсолютная = Неопределено;
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ШиринаЛевойКолонки = Неопределено Или ШиринаЛевойКолонки <= 0 Тогда
			ШиринаЛевойКолонки = 75;
			ШиринаЛевойКолонкиАбсолютная = Ложь;
		КонецЕсли;
		Если ШиринаЛевойКолонкиАбсолютная = Неопределено Тогда
			ШиринаЛевойКолонкиАбсолютная = Ложь;
		КонецЕсли;
		Если ШиринаПравойКолонки = Неопределено Или ШиринаПравойКолонки <= 0 Тогда
			ШиринаПравойКолонки = 25;
			ШиринаПравойКолонкиАбсолютная = Ложь;
		КонецЕсли;
		Если ШиринаПравойКолонкиАбсолютная = Неопределено Тогда
			ШиринаПравойКолонкиАбсолютная = Ложь;
		КонецЕсли;
		
		Описание =
		"<table width=""100%"" border=""0"" cellspacing=""2"">
		|";
		
		ВывестиПримерЗаполнения = (СсылкаНаОбъект = Неопределено);
		
		стрЛеваяКолонка = "";
		стрПраваяКолонка = "";
		Для Каждого СтрокаНастройки Из ДеревоНастроек.Строки Цикл
			ШрифтЭлемента		= Неопределено;
			ЦветТекстаЭлемента	= Неопределено;
			ЦветФонаЭлемента	= Неопределено;
			ТегиЭлемента		= Неопределено;
			Если Не СтрокаНастройки.ЭтоТабличнаяЧасть Тогда
				Попытка
					ШрифтЭлемента = СтрокаНастройки.Шрифт;
				
				Исключение	ШрифтЭлемента = Неопределено;
				КонецПопытки;
				Попытка
					ЦветТекстаЭлемента = СтрокаНастройки.ЦветТекста;
				
				Исключение	ЦветТекстаЭлемента = Неопределено;
				КонецПопытки;
				Попытка
					ЦветФонаЭлемента = ?(СтрокаНастройки.ЭтоРеквизитТабличнойЧасти
					 И СтрокаНастройки.ЦветФона = Новый Цвет(255, 255, 255), Новый Цвет(251, 249, 236), СтрокаНастройки.ЦветФона) ;
				
				Исключение	ЦветФонаЭлемента = Неопределено;
				КонецПопытки;
				
				ТегиЭлемента = НастройкиПолейОтображенияСодержанияПолучитьТегиШрифтаТекстаHTML(ЦветТекстаЭлемента,
					 ЦветФонаЭлемента,
					 ШрифтЭлемента);
			КонецЕсли;
			
			мОписание = "";
			
			Если СтрокаНастройки.ЭтоРазделитель Тогда
				HTMLРазделителя = "<div>";
				
				Если Не ПустаяСтрока(СтрокаНастройки.ПредставлениеРеквизита) Тогда
					HTMLРазделителя = "<div style=""margin-top: 6px;"">"
						+ ТегиЭлемента.ОткрывающийТег + СтрокаНастройки.ПредставлениеРеквизита + ТегиЭлемента.ЗакрывающийТег;
				КонецЕсли;
				
				мОписание = HTMLРазделителя + "<hr class=""spacer""></div>";
			ИначеЕсли СтрокаНастройки.ЭтоТабличнаяЧасть Тогда
				Если ВывестиПримерЗаполнения Тогда	
					мОписание = мОписание 
						+ НастройкиПолейОтображенияСодержанияСформироватьHTMLОписаниеТабличнойЧасти(Неопределено,
							 СтрокаНастройки.Строки,
							 СтрокаНастройки);
				Иначе
					мОписание = мОписание 
						+ НастройкиПолейОтображенияСодержанияСформироватьHTMLОписаниеТабличнойЧасти(СсылкаНаОбъект,
							 СтрокаНастройки.Строки,
							 СтрокаНастройки);
				КонецЕсли;
			Иначе
				Если ВывестиПримерЗаполнения Тогда
					ПримерПредставлениеРеквизита = ?(ЗначениеЗаполнено(СтрокаНастройки.ПредставлениеРеквизита),
						 СтрокаНастройки.ПредставлениеРеквизита,
						 ?(ЗначениеЗаполнено(СтрокаНастройки.ОригинальноеПредставлениеРеквизита),
						 СтрокаНастройки.ОригинальноеПредставлениеРеквизита,
						 НСтр("ru='Реквизит'")));
					
					Если ТегиЭлемента <> Неопределено Тогда
						ПримерПредставлениеРеквизита = ТегиЭлемента.ОткрывающийТег + ПримерПредставлениеРеквизита 
							+ ТегиЭлемента.ЗакрывающийТег;
					КонецЕсли;
					
					мОписание = мОписание + ?(ЗначениеЗаполнено(СтрокаНастройки.ПредставлениеРеквизита),
						 "<%ЗаголовокОткрывающийТег%>" + СтрокаНастройки.ПредставлениеРеквизита + ": " 
						+ "<%ЗаголовокЗакрывающийТег%>", "") + ?(СтрокаНастройки.ТипЗначенияРеквизита = "Строка", "  {" + ПримерПредставлениеРеквизита + "}", "</B>" + "<a href="""">" + "  {" 
						+ ПримерПредставлениеРеквизита 
						+ "}</a>");
				Иначе
					Если СтрНайти(СтрокаНастройки.Реквизит, "Партнеры_") > 0 Тогда
						Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Партнеры") Тогда
							ПартнерСсылка = СсылкаНаОбъект;
						Иначе
							ПартнерСсылка = Неопределено;
							Попытка
								ПартнерСсылка = СсылкаНаОбъект.Партнер;
							Исключение
								Попытка
									ПартнерСсылка = СсылкаНаОбъект.CRM_Партнер;
								Исключение
									ПартнерСсылка = Неопределено;
								КонецПопытки;
							КонецПопытки;
							Если ТипЗнч(ПартнерСсылка) <> Тип("СправочникСсылка.Партнеры") Тогда
								ПартнерСсылка = Неопределено;
							КонецЕсли;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ПартнерСсылка) Тогда
							Если СтрокаНастройки.Реквизит = "Партнеры_СегментКлиентов" Тогда
								ТаблицаСегментов = CRM_СегментыСервер.СписокСегментов(ПартнерСсылка, Ложь);
								Если ТаблицаСегментов.Количество() > 0 Тогда
									ЗначениеРеквизита = ТаблицаСегментов[0].Сегмент;
								Иначе
									ЗначениеРеквизита = "";
								КонецЕсли;
								
							ИначеЕсли СтрокаНастройки.Реквизит = "Партнеры_ABCКласс" Тогда
								ЗначениеРеквизита = CRM_КлиентыСервер.ПолучитьABCXYZКлассПартнера(ПартнерСсылка,
									 Перечисления.ТипыКлассификации.ABC);
							ИначеЕсли СтрокаНастройки.Реквизит = "Партнеры_XYZКласс" Тогда
								ЗначениеРеквизита = CRM_КлиентыСервер.ПолучитьABCXYZКлассПартнера(ПартнерСсылка,
									 Перечисления.ТипыКлассификации.ABC);
							Иначе
								ЗначениеРеквизита = "";
							КонецЕсли;
						Иначе
							ЗначениеРеквизита = "";
						КонецЕсли;
					ИначеЕсли СтрНайти(СтрокаНастройки.Реквизит, "ТекстHTML") > 0 Тогда
						ЗначениеРеквизита = СсылкаНаОбъект[СтрокаНастройки.Реквизит];
						
						Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
							ЗначениеРеквизита = CRM_Взаимодействия.ВставитьКартинкиВТекстHTML(
								ЗначениеРеквизита,
								СсылкаНаОбъект,
								ДополнительныеПараметры.ИдентификаторФормы,
								ДополнительныеПараметры.ИдентификаторыКартинокПисьма);
						КонецЕсли;
						
						ЗначениеРеквизита = СокрЛП(ЗначениеРеквизита);
						
						ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.ПС, "&#010;");
						ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.ВК, "&#013;");
						ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, """", "&quot;");
						
						ЗначениеРеквизита = "<iframe height=""350"" srcdoc=""" + ЗначениеРеквизита + """></iframe>";
					Иначе
						Попытка
							ЗначениеРеквизита = СсылкаНаОбъект[СтрокаНастройки.Реквизит];
						Исключение
							ЗначениеРеквизита = "";
						КонецПопытки;
					КонецЕсли;
					
					Если СтрокаНастройки.ТипЗначенияРеквизита = "Строка" Тогда
						
						Если ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
							ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.ПС, "<BR>");
							ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.Таб, "&nbsp;&nbsp;&nbsp;");
						ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
							ЗначениеРеквизита = Строка(ЗначениеРеквизита);
						ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Дата") Тогда
							Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
								ЗначениеРеквизита = "<%ПредставлениеПустойДаты%>";
							Иначе
								Если ЗначениеРеквизита = НачалоДня(ЗначениеРеквизита) Тогда
									ЗначениеРеквизита = Формат(ЗначениеРеквизита, "ДЛФ=D");
								Иначе
									ЗначениеРеквизита = Строка(ЗначениеРеквизита);
								КонецЕсли;
							КонецЕсли;
						ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Число") Тогда
							НаименованиеРеквизитаНРег = НРег(СтрокаНастройки.Реквизит);
							
							Если СтрНайти(НаименованиеРеквизитаНРег, "сумма") > 0
									Или СтрНайти(НаименованиеРеквизитаНРег, "выручка") > 0 Тогда
								ЗначениеРеквизита = Формат(ЗначениеРеквизита, "ЧДЦ=0");
							КонецЕсли;
						КонецЕсли;
						
						Если СтрокаНастройки.Реквизит = "СтатусВзаимодействия" И ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
							СмещениеКартинкиСостоянийВзаимодействия = "";
							
							Если ЗначениеРеквизита = Справочники.CRM_СостоянияСобытий.ВРаботе Тогда
								СмещениеКартинкиСостоянийВзаимодействия = "background-position: 0px 0px;";
							ИначеЕсли ЗначениеРеквизита = Справочники.CRM_СостоянияСобытий.Завершено Тогда
								СмещениеКартинкиСостоянийВзаимодействия = "background-position: -16px 0px;";
							ИначеЕсли ЗначениеРеквизита = Справочники.CRM_СостоянияСобытий.Запланировано Тогда
								СмещениеКартинкиСостоянийВзаимодействия = "background-position: -32px 0px;";
							ИначеЕсли ЗначениеРеквизита = Справочники.CRM_СостоянияСобытий.Отменено Тогда
								СмещениеКартинкиСостоянийВзаимодействия = "background-position: -48px 0px;";
							КонецЕсли;
							
							HTMLКартинкаВыделенияСтатуса =
								"<div class=""interaction-status-icon"" style=""" + СмещениеКартинкиСостоянийВзаимодействия + """></div>";
							
							ЗначениеРеквизита = HTMLКартинкаВыделенияСтатуса + ЗначениеРеквизита;
						КонецЕсли;
						
						Если ТегиЭлемента <> Неопределено Тогда
							ЗначениеРеквизита = ТегиЭлемента.ОткрывающийТег + ЗначениеРеквизита + ТегиЭлемента.ЗакрывающийТег;
						КонецЕсли;
						
						мОписание = мОписание + ?(ЗначениеЗаполнено(СтрокаНастройки.ПредставлениеРеквизита),
							 "<%ЗаголовокОткрывающийТег%>" + СтрокаНастройки.ПредставлениеРеквизита + ": " 
							+ "<%ЗаголовокЗакрывающийТег%>", "") + ЗначениеРеквизита;
					Иначе
						СтрокаРеквизита = НастройкиПолейОтображенияСодержанияПолучитьОписаниеОбъектаHTML(
							ЗначениеРеквизита, СтрокаНастройки.ПредставлениеРеквизита, Истина, , ТегиЭлемента);
						мОписание = мОписание + СтрокаРеквизита;
					КонецЕсли;
						
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(мОписание) Тогда
				Попытка
					Размещение = СтрокаНастройки.Размещение;
				
				Исключение	Размещение = Неопределено;
				КонецПопытки;
				Если Размещение = "ЛеваяКолонка" Тогда
					Если СтрокаНастройки.Положение = "НоваяСтрока" Тогда
						стрЛеваяКолонка = стрЛеваяКолонка + ?(стрЛеваяКолонка = "", "", " <BR>") + мОписание;
					Иначе
						стрЛеваяКолонка = стрЛеваяКолонка + ?(стрЛеваяКолонка = "", "", "  ") + мОписание;
					КонецЕсли;
				ИначеЕсли Размещение = "ПраваяКолонка" Тогда	
					Если СтрокаНастройки.Положение = "НоваяСтрока" Тогда
						стрПраваяКолонка = стрПраваяКолонка + ?(стрПраваяКолонка = "", "", " <BR>") + мОписание;
					Иначе
						стрПраваяКолонка = стрПраваяКолонка + ?(стрПраваяКолонка = "", "", "  ") + мОписание;
					КонецЕсли;
					
				Иначе
					Если ЗначениеЗаполнено(стрЛеваяКолонка) Или ЗначениеЗаполнено(стрПраваяКолонка) Тогда
						Если ШиринаЛевойКолонкиАбсолютная Тогда
							Описание = Описание + "
							|<tr>
							|
							|<table width=""100%"">
							|
							|<td width=""" + Формат(ШиринаЛевойКолонки, "ЧН=0; ЧГ=") + """ valign=""top"">
							|" + стрЛеваяКолонка + "
							|</td>
							|<td valign=""top"">
							|" + стрПраваяКолонка + "
							|</td>
							|
							|</table>
							|
							|</tr>
							|";
						ИначеЕсли ШиринаПравойКолонкиАбсолютная Тогда
							Описание = Описание + "
							|<tr>
							|
							|<table width=""100%"">
							|
							|<td valign=""top"">
							|" + стрЛеваяКолонка + "
							|</td>
							|<td width=""" + Формат(ШиринаПравойКолонки, "ЧН=0; ЧГ=") + """ valign=""top"">
							|" + стрПраваяКолонка + "
							|</td>
							|
							|</table>
							|
							|</tr>
							|";
						Иначе
							Описание = Описание + "
							|<tr>
							|<td width=""" + Формат(ШиринаЛевойКолонки, "ЧН=0; ЧГ=") + "%"" valign=""top"">
							|" + стрЛеваяКолонка + "
							|</td>
							|<td width=""" + Формат(ШиринаПравойКолонки, "ЧН=0; ЧГ=") + "%"" valign=""top"">
							|" + стрПраваяКолонка + "
							|</td>
							|</tr>
							|";
						КонецЕсли;
					КонецЕсли;
					
					стрЛеваяКолонка = "";
					стрПраваяКолонка = "";
					
					Если СтрокаНастройки.Положение = "НоваяСтрока" Тогда
						Описание = Описание + "<tr><td colspan=2>" + мОписание + "</td></tr>";
					Иначе
						Описание = Описание + ?(Описание = "", "", "  ") + мОписание;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(стрЛеваяКолонка) Или ЗначениеЗаполнено(стрПраваяКолонка) Тогда
			Если ШиринаЛевойКолонкиАбсолютная Тогда
				Описание = Описание + "
				|<tr>
				|
				|<table width=""100%"">
				|
				|<td width=""" + Формат(ШиринаЛевойКолонки, "ЧН=0; ЧГ=") + """ valign=""top"">
				|" + стрЛеваяКолонка + "
				|</td>
				|<td valign=""top"">
				|" + стрПраваяКолонка + "
				|</td>
				|
				|</table>
				|
				|</tr>
				|";
			ИначеЕсли ШиринаПравойКолонкиАбсолютная Тогда
				Описание = Описание + "
				|<tr>
				|
				|<table width=""100%"">
				|
				|<td valign=""top"">
				|" + стрЛеваяКолонка + "
				|</td>
				|<td width=""" + Формат(ШиринаПравойКолонки, "ЧН=0; ЧГ=") + """ valign=""top"">
				|" + стрПраваяКолонка + "
				|</td>
				|
				|</table>
				|
				|</tr>
				|";
			Иначе
				Описание = Описание + "
				|<tr>
				|<td width=""" + Формат(ШиринаЛевойКолонки, "ЧН=0; ЧГ=") + "%"" valign=""top"">
				|" + стрЛеваяКолонка + "
				|</td>
				|<td width=""" + Формат(ШиринаПравойКолонки, "ЧН=0; ЧГ=") + "%"" valign=""top"">
				|" + стрПраваяКолонка + "
				|</td>
				|</tr>
				|";
			КонецЕсли;
		КонецЕсли;
		
		ЕстьИдентификаторФормы =
			(ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ИдентификаторФормы"));
		ИспользуемыйАдресВременногоХранилища =
			?(ЕстьИдентификаторФормы, ДополнительныеПараметры.ИдентификаторФормы, Неопределено);
		
		Если ВывестиПримерЗаполнения Тогда
			ГиперссылкаНастройки = "";
		Иначе
			ГиперссылкаНастройки =
				"<div class=""settings-container"">"
				+ "<hr class=""spacer"">"
				+ "<div class=""settings-wrapper""><a href=""НастройкаПолейОтображения"">"
				+ "<img src=""images/settings.png"">" + НСтр("en = 'Settings'; ru = 'Настройка'") + "</a></div></div>";
			
			ПутьККартинке = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
				БиблиотекаКартинок.CRM_НастройкиРабочегоСтола, ИспользуемыйАдресВременногоХранилища);
			ГиперссылкаНастройки = СтрЗаменить(ГиперссылкаНастройки, "images/settings.png", ПутьККартинке);
		КонецЕсли;
		
		Описание = Описание + "</table>" + ГиперссылкаНастройки;
		
		Описание = СтрЗаменить(Описание, "<%ЗаголовокОткрывающийТег%>",
			"<div class=""info-field""><font style=""font-size: 13px; font-weight: 400; "" face=""Arial"">");
		Описание = СтрЗаменить(Описание, "<%ЗаголовокЗакрывающийТег%>", "</font></div>");
		
		Описание = СтрЗаменить(Описание, "<%ЗаголовокТаблицыОткрывающийТег%>",
			"<div class=""info-field""><font class=""table-field"" style=""font-size: 13px; font-weight: 400; "" face=""Arial""><B>");
		Описание = СтрЗаменить(Описание, "<%ЗаголовокТаблицыЗакрывающийТег%>", "</B></font></div>");
		
		Описание = СтрЗаменить(Описание, "<%ПредставлениеПустойДаты%>", "дата не указана");
		
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.CRM_Интерес")
				Или ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Партнеры")
				Или ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
				Или ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ФизическиеЛица")
				Или ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			ОбъектОбработкиНавигационнаяСсылка = "data-object=""" + ПолучитьНавигационнуюСсылку(СсылкаНаОбъект) + """";
		Иначе
			ОбъектОбработкиНавигационнаяСсылка = "data-object=""""";
		КонецЕсли;
		
		Описание =
		"<html>
		|<head>
		|<style type=""text/css"">
		|	html, body, #main-container {
		|		height: 100%;
		|		width: 100%;
		|		box-sizing: border-box;
		|	}
		|	
		|	body {
		|		margin: 0px;
		|		padding: 8px 12px 16px 12px;
		|		background-color: #FAFAFA;
		|	}
		|	
		|	a {
		|		text-decoration:none;
		|		color: inherit;
		|	}
		|	
		|	iframe {
		|		width: 100%;
		|		background: white;
		|		border: 1px solid #E5E5E5;
		|	}
		|	
		|	#main-container {
		|		display: flex;
		|		flex-direction: column;
		|	}
		|	
		|	.spacer {
		|		border-width: 0 0 1px;
		|		border-style: solid;
		|		border-color: #E5E5E5;
		|	}
		|	
		|	.settings-container {
		|		width: 100%;
		|		margin-top: auto;
		|	}
		|	
		|	.settings-wrapper {
		|		margin-left: auto;
		|		width: fit-content;
		|	}
		|	
		|	.settings-wrapper a {
		|		display: flex;
		|		flex-direction: row;
		|		align-items: center;
		|		justify-content: end;
		|	}
		|	
		|	.settings-wrapper a img {
		|		margin-right: 4px;
		|	}
		|	
		|	.info-field {
		|		margin: 4px 6px 4px 0;
		|		display: inline-block;
		|	}
		|	
		|	.interaction-status-icon {
		|		display: inline-block;
		|		margin-right: 6px;
		|		min-width: 16px;
		|		max-width: 16px;
		|		height: 16px;
		|		background-image: url(""FILES_SPRITE_URL"");
		|		background-repeat: no-repeat;
		|		vertical-align: text-bottom;
		|	}
		|</style>
		|
		|<meta http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8"">
		|<title></title>
		|</head>
		|<body><div id=""main-container"" " + ОбъектОбработкиНавигационнаяСсылка + ">" + Описание + "</div></body>
		|</html>";
		
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
			ПутьККартинкеСтатусовВзаимодействия = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
				БиблиотекаКартинок.CRM_СтатусыВзаимодействия, ИспользуемыйАдресВременногоХранилища);
			
			Описание = СтрЗаменить(Описание, "FILES_SPRITE_URL", ПутьККартинкеСтатусовВзаимодействия);
		КонецЕсли;
		
		Возврат Описание;
	КонецЕсли;
КонецФункции // НастройкиПолейОтображенияСодержанияПолучитьСодержание()

#КонецОбласти // РаботаСНастройкамиПолейОтображенияСодержания

#Область РаботаССохранениемИЗагрузкойРезультатовОтчетов
	
// Функция проверяет сохраненную структуру с результатами отчета на корректность.
//
// Параметры:
//	ПроверяемаяСтруктура	- Структура	- Проверяемая структура.
//
// Возвращаемое значение:
//	Булево	- Результат проверки.
//
Функция СохраненнаяСтруктураРезультатаОтчетаКорректна(ПроверяемаяСтруктура) Экспорт
	Если ТипЗнч(ПроверяемаяСтруктура) <> Тип("Структура")
		ИЛИ	НЕ ПроверяемаяСтруктура.Свойство("СписокНаименований")
		ИЛИ	НЕ ПроверяемаяСтруктура.Свойство("СоответствиеНаименованийСпискам")
		ИЛИ	ТипЗнч(ПроверяемаяСтруктура.СписокНаименований) <> Тип("СписокЗначений")
		ИЛИ ТипЗнч(ПроверяемаяСтруктура.СоответствиеНаименованийСпискам) <> Тип("Соответствие") Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции // СохраненнаяСтруктураРезультатаОтчетаКорректна()

// Функция возвращает сохраненный список с результатами отчета по имени.
//
// Параметры:
//	Наименование	- Строка	- Наименование отчета.
//
// Возвращаемое значение:
//	СписокЗначений	- Список с результатами отчета. Если не найдено, Неопределено.
//
Функция ПолучитьСохраненныйРезультатОтчетаПоНаименованию(Наименование) Экспорт
	Возврат CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
		ПолучитьСохраненныйРезультатОтчетаПоНаименованию(Наименование);
КонецФункции // ПолучитьСохраненныйРезультатОтчетаПоНаименованию()

// Процедура сохраняет список с результатами отчета под указанным именем.
//
// Параметры:
//	Наименование	- Строка			- Наименование отчета.
//	Список			- СписокЗначений	- Список с результатами отчета.
//
Процедура СохранитьРезультатОтчетаВПараметрахСеанса(Наименование, Список) Экспорт
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
		СохранитьРезультатОтчетаВПараметрахСеанса(Наименование, Список);
КонецПроцедуры // СохранитьРезультатОтчетаВПараметрахСеанса()

// Функция возвращает список выбора наименования сохраненного результата отчета.
// 
// Возвращаемое значение:
//  СписокЗначений - Список выбора наименования.
//
Функция ПолучитьСписокВыбораНаименованийСохраненныхРезультатовОтчетов() Экспорт
	Список = Новый СписокЗначений();
	Попытка
		СохраненнаяСтруктура = ПараметрыСеанса.CRM_СохраненныеРезультатыОтчетов.Получить();
	Исключение
		СохраненнаяСтруктура = Неопределено;
	КонецПопытки;
	Если СохраненнаяСтруктураРезультатаОтчетаКорректна(СохраненнаяСтруктура) Тогда
		Список.ЗагрузитьЗначения(СохраненнаяСтруктура.СписокНаименований.ВыгрузитьЗначения());
	КонецЕсли;
	Возврат Список;
КонецФункции // ПолучитьСписокВыбораНаименованийСохраненныхРезультатовОтчетов()

#КонецОбласти // РаботаССохранениемИЗагрузкойРезультатовОтчетов

#Область ЗаполнениеПолучателейПоСКД

// Возвращает список видов контактной информации, отобранной по родителю, для использования в списке выбора.
//
// Параметры:
//	ИмяСправочника	- Строка	- Наименование справочника, по которому устанавливается отбор по родителю.
//  СсылкаНаОбъект - ДокументСсылка - Ссылка на объект, форма которого заполняется данными.
// Возвращаемое значение:
//  СписокЗначений - список СправочникСсылка.ВидыКонтактнойИнформации.
//
Функция ЗаполнениеПоСКД_СписокВидовКИ(ИмяСправочника, СсылкаНаОбъект) Экспорт
	
	Результат = Новый СписокЗначений;
	
	МассивТиповКИ = Новый Массив;
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
		МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
		МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СообщениеSMS") Тогда
		МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	КонецЕсли;
	
	МассивРодителейКИ = Новый Массив;	
	Если ИмяСправочника = "Партнеры" Тогда
		МассивРодителейКИ.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
		МассивРодителейКИ.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо);
		МассивРодителейКИ.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания);
	ИначеЕсли ИмяСправочника = "КонтактныеЛицаПартнеров" Тогда
		МассивРодителейКИ.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров);
	ИначеЕсли ИмяСправочника = "CRM_ПотенциальныеКлиенты" Тогда
		МассивРодителейКИ.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникCRM_ПотенциальныеКлиенты);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
		|	ВидыКонтактнойИнформации.Тип КАК Тип
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Родитель В(&РодителиКИ)
		|	И ВидыКонтактнойИнформации.Тип В (&ТипыКИ)
		|	И НЕ ВидыКонтактнойИнформации.ПометкаУдаления";
	
	Если МассивТиповКИ.Количество() = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВидыКонтактнойИнформации.Тип В (&ТипыКИ)", "");
	КонецЕсли;
	Запрос.УстановитьПараметр("РодителиКИ", МассивРодителейКИ);
	Запрос.УстановитьПараметр("ТипыКИ", МассивТиповКИ);
	
	РезультатЗапросаТЗ = Запрос.Выполнить().Выгрузить();
	
	Результат.ЗагрузитьЗначения(РезультатЗапросаТЗ.ВыгрузитьКолонку("Ссылка"));

	Возврат Результат;
	
КонецФункции

// Возвращает текст запроса, используемый при формировании списка получателей.
//
// Параметры:
//	ИмяСправочника	- Строка	- Наименование справочника, по которому устанавливается отбор в форме "ОбщаяФорма.CRM_ОтборКомпоновкиДанных".
// Возвращаемое значение:
//  Строка - содержит текст запроса.
//
Функция ЗаполнениеПоСКД_ПолучитьТекстЗапроса(ИмяСправочника) Экспорт
	
	СхемаКомпоновкиДанных = Справочники[ИмяСправочника].ПолучитьМакет("CRM_ОсновнаяСхема");
	
	// ВНИМАНИЕ! Поддерживается только один набор данных
	ТекстЗапросаСКД = СхемаКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;
	
	Возврат ТекстЗапросаСКД;
	
КонецФункции

// Возвращает отбор компоновки данных, заданный в макете метаданных справочника. Используется при формировании списка получателей.
//
// Параметры:
//	ИмяСправочника	- Строка	- Наименование справочника, по которому устанавливается отбор в форме "ОбщаяФорма.CRM_ОтборКомпоновкиДанных".
// Возвращаемое значение:
//  ОтборКомпоновкиДанных - содержит отбор по умолчанию.
//
Функция ЗаполнениеПоСКД_ПолучитьОтборПоУмолчанию(ИмяСправочника) Экспорт
	
	СхемаКомпоновкиДанных = Справочники[ИмяСправочника].ПолучитьМакет("CRM_ОсновнаяСхема");
	
	НастройкиПоУмолчанию = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	Возврат НастройкиПоУмолчанию.Отбор;
	
КонецФункции

// Возвращает список получателей, используя запрос СКД и переданный отбор.
//
// Параметры:
//	ДополнительныеПараметры	- Структура	- Дополнительные параметры.
// Возвращаемое значение:
//  СписокЗначений из СправочникСсылка.Партнеры, СправочникСсылка.КонтактныеЛицаПартнеров, 
//  СправочникСсылка.ПотенциальныеКлиенты - Содержит список получателей.
//
Функция СписокПолучателей(ДополнительныеПараметры) Экспорт
			
	ТаблицаПоОтбору = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапросВКомпоновкеДанных(
																				ЗаполнениеПоСКД_ПолучитьТекстЗапроса(ДополнительныеПараметры.ИмяСправочника),
																				ДополнительныеПараметры.ТекОтбор);	
	
	СписокСсылок = Новый СписокЗначений;
	
	ИмяКолонки = "";
	Если ДополнительныеПараметры.ИмяСправочника = "Партнеры" Тогда
		ИмяКолонки = "Партнер";
	ИначеЕсли ДополнительныеПараметры.ИмяСправочника = "КонтактныеЛицаПартнеров" Тогда
		ИмяКолонки = "КонтактноеЛицо";
	ИначеЕсли ДополнительныеПараметры.ИмяСправочника = "CRM_ПотенциальныеКлиенты" Тогда
		ИмяКолонки = "ПотенциальныйКлиент";
	КонецЕсли;
	
	Для Каждого СтрокаТЗ Из ТаблицаПоОтбору Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ[ИмяКолонки]) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокСсылок.Добавить(СтрокаТЗ[ИмяКолонки], , Истина);
		
	КонецЦикла;
	
	Возврат СписокСсылок;
	
КонецФункции

// Вызывается при открытии формы, в которой возможно заполнение по СКД.
// Параметры:
//	Форма	- ФормаКлиентскогоприложения	- форма, в которой возможно заполнение по СКД.
Процедура ЗаполнениеСКД_ПриСозданииНаСервере(Форма) Экспорт

	СтруктураНастроек = Форма.Объект.Ссылка.CRM_ХранилищеНастроекКомпоновкиДанных.Получить();
	
	Если ТипЗнч(СтруктураНастроек) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	Если СтруктураНастроек.Свойство("ОтборДляПартнеров")
		И ТипЗнч(СтруктураНастроек.ОтборДляПартнеров) = Тип("ОтборКомпоновкиДанных") Тогда
		Форма.CRM_АдресОтборДляПартнеров = ПоместитьВоВременноеХранилище(СтруктураНастроек.ОтборДляПартнеров,
			 Форма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если СтруктураНастроек.Свойство("ОтборДляКонтактныхЛиц")
		И ТипЗнч(СтруктураНастроек.ОтборДляКонтактныхЛиц) = Тип("ОтборКомпоновкиДанных") Тогда
		Форма.CRM_АдресОтборДляКонтактныхЛиц = ПоместитьВоВременноеХранилище(СтруктураНастроек.ОтборДляКонтактныхЛиц,
			 Форма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если СтруктураНастроек.Свойство("ОтборДляПотенциальныхКлиентов")
		И ТипЗнч(СтруктураНастроек.ОтборДляПотенциальныхКлиентов) = Тип("ОтборКомпоновкиДанных") Тогда
		Форма.CRM_АдресОтборДляПотенциальныхКлиентов = ПоместитьВоВременноеХранилище(СтруктураНастроек.ОтборДляПотенциальныхКлиентов,
			 Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается перед записью на сервере данных формы, в которой возможно заполнение по СКД.
// Параметры:
//	ТекущийОбъект	- ДокументОбъект.CRM_РассылкаЭлектронныхПисем, ДокументОбъект.CRM_Телемаркетинг, ДокументОбъект.СообщениеSMS	- записываемый объект.
//	Форма	- ФормаКлиентскогоприложения	- форма, в которой возможно заполнение по СКД.
Процедура ЗаполнениеСКД_ПередЗаписьюНаСервере(ТекущийОбъект, Форма) Экспорт

	СтруктураНастроек = Новый Структура("ОтборДляПартнеров, ОтборДляКонтактныхЛиц, ОтборДляПотенциальныхКлиентов");	
	
	Если ЭтоАдресВременногоХранилища(Форма.CRM_АдресОтборДляПартнеров) Тогда
		СтруктураНастроек.ОтборДляПартнеров = ПолучитьИзВременногоХранилища(Форма.CRM_АдресОтборДляПартнеров);
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Форма.CRM_АдресОтборДляКонтактныхЛиц) Тогда
		СтруктураНастроек.ОтборДляКонтактныхЛиц = ПолучитьИзВременногоХранилища(Форма.CRM_АдресОтборДляКонтактныхЛиц);
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Форма.CRM_АдресОтборДляПотенциальныхКлиентов) Тогда
		СтруктураНастроек.ОтборДляПотенциальныхКлиентов =
			ПолучитьИзВременногоХранилища(Форма.CRM_АдресОтборДляПотенциальныхКлиентов);
	КонецЕсли;
	
	ТекущийОбъект["CRM_ХранилищеНастроекКомпоновкиДанных"] = Новый ХранилищеЗначения(СтруктураНастроек);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполненияШапкиДокумента
	
// Процедура предназначена для заполнения реквизитов состояния документов
// вызывается в обработчиках событий "ПриСозданииНаСервере" в модулях форм всех документов.
//
// Параметры:
//  Объект						- ДокументОбъект	- Объект редактируемого документа.
//	СостояниеДокумента			- Строка			- Состояние документа.
//	КартинкаСостоянияДокумента	- Число				- Картинка состояния документа.
//	РазрешеноПроведение			- Булево			- Флаг проведения документа.
//
Процедура ЗаполнитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента,
	 РазрешеноПроведение) Экспорт
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	РазрешеноПроведение = (МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить);
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СостояниеДокумента = НСтр("ru='Новый'");
		КартинкаСостоянияДокумента = 0;
	Иначе
		Если Объект.Проведен Тогда
			СостояниеДокумента = НСтр("ru='Проведен'");
			КартинкаСостоянияДокумента = 1;
		ИначеЕсли РазрешеноПроведение Тогда
			СостояниеДокумента =  НСтр("ru='Не проведен'");
			КартинкаСостоянияДокумента = 0;
		Иначе
			СостояниеДокумента = НСтр("ru='Записан'");
			КартинкаСостоянияДокумента = 3;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ЗаполнитьСостояниеДокумента()

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "обработка заполнения" в модулях объектов документов.
//
// Параметры:
//  Объект				- ДокументОбъект	- Объект редактируемого документа.
//	ДанныеЗаполнения	- Структура			- Данные заполнения.
//	ИсключаемыеРеквизиты	- Структура		- Реквизиты, которые не будут заполнены (неполная реализация).
//
Процедура ЗаполнитьШапкуДокумента(Объект, ДанныеЗаполнения, ИсключаемыеРеквизиты = Неопределено) Экспорт
	ПараметрОснование = Неопределено;
	ЗначенияЗаполнения = Неопределено;
	Если НЕ (ДанныеЗаполнения = Неопределено ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("Структура")) Тогда
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
			 И ЗначениеЗаполнено(ДанныеЗаполнения.БизнесПроцесс) Тогда
			ПараметрОснование = ДанныеЗаполнения.БизнесПроцесс;
		Иначе
			ПараметрОснование = ДанныеЗаполнения;
		КонецЕсли;
	Иначе
		ЗначенияЗаполнения = ДанныеЗаполнения;
	КонецЕсли;
	Пользователь = Пользователи.ТекущийПользователь();
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	Если ЕстьРеквизитДокумента("Автор", МетаданныеДокумента) Тогда
		Объект.Автор = Пользователь;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("CRM_Автор", МетаданныеДокумента) Тогда
		Объект.CRM_Автор = Пользователь;
	КонецЕсли;	
	Если ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента)
		И НЕ (ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Ответственный")
			 И ЗначениеЗаполнено(ЗначенияЗаполнения.Ответственный))
		И НЕ (ЗначениеЗаполнено(ПараметрОснование) И ЗначениеЗаполнено(Объект.Ответственный)) Тогда
			Ответственный = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный");
			Если Не ЗначениеЗаполнено(Ответственный) Тогда
				Ответственный = Пользователь;
			КонецЕсли;
	КонецЕсли;
	Если (ИсключаемыеРеквизиты = Неопределено ИЛИ НЕ ИсключаемыеРеквизиты.Свойство("Организация"))
		И ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
		И НЕ (ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Организация")
			 И ЗначениеЗаполнено(ЗначенияЗаполнения.Организация))
		И НЕ (ЗначениеЗаполнено(ПараметрОснование) И ЗначениеЗаполнено(Объект.Организация)) Тогда
		ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			Если Объект.Организация <> ЗначениеНастройки Тогда
				Объект.Организация = ЗначениеНастройки;
			КонецЕсли;
		Иначе
			Объект.Организация = ПолучитьПредопределеннуюОрганизацию();
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента) 
		И НЕ (ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Подразделение")
			 И ЗначениеЗаполнено(ЗначенияЗаполнения.Подразделение))
		И НЕ (ЗначениеЗаполнено(ПараметрОснование) И ЗначениеЗаполнено(Объект.Подразделение)) Тогда
		ЗначениеНастройки = Пользователи.ТекущийПользователь().Подразделение;
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			Если Объект.Подразделение <> ЗначениеНастройки Тогда
				Объект.Подразделение = ЗначениеНастройки;
			КонецЕсли;
		Иначе
			Объект.Подразделение = ПолучитьПредопределенноеПодразделение();
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента)
		И НЕ (ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Ответственный")
			 И ЗначениеЗаполнено(ЗначенияЗаполнения.Ответственный))
		И НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		ОтветственныйПоУмолчанию = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный");
		Если ЗначениеЗаполнено(ОтветственныйПоУмолчанию) Тогда
			Объект.Ответственный = ОтветственныйПоУмолчанию;
		Иначе
			Объект.Ответственный = Пользователи.ТекущийПользователь();
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("ВидЦен", МетаданныеДокумента)
	   И НЕ (ЗначениеЗаполнено(ПараметрОснование) И ЗначениеЗаполнено(Объект.ВидЦен)) Тогда
		ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойВидЦенПродажи");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			Если Объект.ВидЦен <> ЗначениеНастройки Тогда
				Объект.ВидЦен = ЗначениеНастройки;
			КонецЕсли;
		Иначе
			Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				Объект.ВидЦен = Справочники.ВидыЦен["Оптовая"];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("ВидЦен", МетаданныеДокумента)
		И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		//
		Если ЕстьРеквизитДокумента("ЦенаВключаетНДС", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ПараметрОснование) Тогда
				Попытка
					Объект.ЦенаВключаетНДС = ПараметрОснование.ЦенаВключаетНДС;
				Исключение
					Объект.ЦенаВключаетНДС = Объект.ВидЦен.ЦенаВключаетНДС;
				КонецПопытки;
			Иначе
				Объект.ЦенаВключаетНДС = Объект.ВидЦен.ЦенаВключаетНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("Важность", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(Объект.Важность) Тогда
		Объект.Важность = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("Статус", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(Объект.Статус) Тогда
		Объект.Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано;
	КонецЕсли;
	Если (ИсключаемыеРеквизиты = Неопределено ИЛИ НЕ ИсключаемыеРеквизиты.Свойство("Валюта"))
		И ЕстьРеквизитДокумента("Валюта", МетаданныеДокумента)
		И НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
		Объект.Валюта = Константы.ВалютаУправленческогоУчета.Получить();
		ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ПолучитьТекущуюДатуСеанса(),
			 Новый Структура("Валюта",
			 Объект.Валюта));
		Если ЕстьРеквизитДокумента("Кратность", МетаданныеДокумента) Тогда
			Объект.Кратность = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, ВалютаРасчетовКурсКратность.Кратность);
		КонецЕсли;
		Если ЕстьРеквизитДокумента("Курс", МетаданныеДокумента) Тогда
			Объект.Курс = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("Проект", МетаданныеДокумента) Тогда
		ПроектИзПараметраОснования = Неопределено;
		Если Не ПараметрОснование = Неопределено 
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрОснование, "Проект") Тогда
			
			ПроектИзПараметраОснования = ПараметрОснование.Проект;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПроектИзПараметраОснования) Тогда
			Объект.Проект = ПроектИзПараметраОснования;
		ИначеЕсли НЕ (ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Проект")
			 И ЗначениеЗаполнено(ЗначенияЗаполнения.Проект))
				И НЕ (ЗначениеЗаполнено(ПараметрОснование) И ЗначениеЗаполнено(Объект.Проект)) Тогда
			//
			ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойПроект");
			Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
				Если Объект.Проект <> ЗначениеНастройки Тогда
					Объект.Проект = ЗначениеНастройки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("CRM_Проект", МетаданныеДокумента) Тогда
		ПроектИзПараметраОснования = Неопределено;
		Если Не ПараметрОснование = Неопределено
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрОснование, "Проект") Тогда
			ПроектИзПараметраОснования = ПараметрОснование.Проект;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПроектИзПараметраОснования) Тогда
			Объект.CRM_Проект = ПроектИзПараметраОснования;
		ИначеЕсли НЕ (ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Проект")
			 И ЗначениеЗаполнено(ЗначенияЗаполнения.Проект))
				И НЕ (ЗначениеЗаполнено(ПараметрОснование) И ЗначениеЗаполнено(Объект.CRM_Проект)) Тогда
			//
			ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойПроект");
			Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
				Если Объект.CRM_Проект <> ЗначениеНастройки Тогда
					Объект.CRM_Проект = ЗначениеНастройки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если (ИсключаемыеРеквизиты = Неопределено ИЛИ НЕ ИсключаемыеРеквизиты.Свойство("Партнер"))
		И ЕстьРеквизитДокумента("Партнер", МетаданныеДокумента) Тогда
		Если ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Партнер")
			 И ЗначениеЗаполнено(ЗначенияЗаполнения.Партнер) Тогда
			Объект.Партнер = ЗначенияЗаполнения.Партнер;
		ИначеЕсли ПараметрОснование <> Неопределено Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрОснование, "Партнер") Тогда
				Объект.Партнер = ПараметрОснование.Партнер;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("Договор", МетаданныеДокумента) Тогда
		Если ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Договор")
			 И ЗначениеЗаполнено(ЗначенияЗаполнения.Договор) Тогда
			Объект.Договор = ЗначенияЗаполнения.Договор;
		ИначеЕсли ПараметрОснование <> Неопределено Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрОснование, "Договор") Тогда
				Объект.Договор = ПараметрОснование.Договор;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("КонтактноеЛицо", МетаданныеДокумента) Тогда
		Если ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("КонтактноеЛицо")
			 И ЗначениеЗаполнено(ЗначенияЗаполнения.КонтактноеЛицо) Тогда
			Объект.КонтактноеЛицо = ЗначенияЗаполнения.КонтактноеЛицо;
		ИначеЕсли ПараметрОснование <> Неопределено Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрОснование, "КонтактноеЛицо") Тогда
				Объект.КонтактноеЛицо = ПараметрОснование.КонтактноеЛицо;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("ПодразделениеЗаказчик", МетаданныеДокумента) Тогда
		Если ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("ПодразделениеЗаказчик")
			 И ЗначениеЗаполнено(ЗначенияЗаполнения.ПодразделениеЗаказчик) Тогда
			Объект.ПодразделениеЗаказчик = ЗначенияЗаполнения.ПодразделениеЗаказчик;
		ИначеЕсли ПараметрОснование <> Неопределено Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрОснование, "ПодразделениеЗаказчик") Тогда
				Объект.ПодразделениеЗаказчик = ПараметрОснование.ПодразделениеЗаказчик;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьШапкуДокумента()

// Процедура предназначена для заполнения автора и ответственного документов,
//
// Параметры:
//  Объект				- ДокументОбъект	- Объект редактируемого документа.
//
Процедура ЗаполнитьАвтораИОтветственного(Объект) Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") Тогда
		Объект.Менеджер = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки( "ОсновнойОтветственный");
		Если Не ЗначениеЗаполнено(Объект.Менеджер) Тогда
			Объект.Менеджер = Пользователь;
		КонецЕсли;
	Иначе
		Объект.Ответственный = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки( "ОсновнойОтветственный");
		Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
			Объект.Ответственный = Пользователь;
		КонецЕсли;
	КонецЕсли;
	
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	Если ЕстьРеквизитДокумента("Автор", МетаданныеДокумента) Тогда
		Объект.Автор = Пользователь;
	ИначеЕсли ЕстьРеквизитДокумента("CRM_Автор", МетаданныеДокумента) Тогда
		Объект.CRM_Автор = Пользователь;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьАвтораИОтветственного()

// Функция возвращает предопределенную организацию.
// 
// Возвращаемое значение:
//  СправочникСсылка - Предопределенная организация.
//
Функция ПолучитьПредопределеннуюОрганизацию() Экспорт
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Предопределенный";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Организация;
		Иначе	
			Возврат Справочники.Организации.ПустаяСсылка();
		КонецЕсли;	
		
	Иначе
		
		Возврат Справочники.Организации.ОрганизацияПоУмолчанию();
		
	КонецЕсли;	
		
КонецФункции // ПолучитьПредопределеннуюОрганизацию()

// Функция возвращает предопределенное подразделение.
// 
// Возвращаемое значение:
//  СправочникСсылка - Предопределенное подразделение.
//
Функция ПолучитьПредопределенноеПодразделение() Экспорт
	
	Возврат CRM_ОбщегоНазначенияПовтИсп.ПолучитьПредопределенноеПодразделение();
	
КонецФункции // ПолучитьПредопределенноеПодразделение()

// Функция определяет договор партнера для указанной организации.
// 
// Параметры:
//	Партнер		- СправочникСсылка	- Партнер
//	Организация	- СправочникСсылка	- Организация
//
// Возвращаемое значение:
//	СправочникСсылка	- Договор партнера.
//
Функция ПолучитьДоговорПартнера(Партнер, Организация) Экспорт
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Если ЗначениеЗаполнено(Партнер.ДоговорПоУмолчанию) 
			И (Партнер.ДоговорПоУмолчанию.Организация = Организация) Тогда
			Возврат Партнер.ДоговорПоУмолчанию;
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", 		Партнер);
		Запрос.УстановитьПараметр("Организация",	Организация);
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		               |ГДЕ
		               |	ДоговорыКонтрагентов.Владелец = &Владелец
		               |	И ДоговорыКонтрагентов.Организация = &Организация
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ДоговорыКонтрагентов.ДатаДоговора УБЫВ";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе	
			Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;	
КонецФункции // ПолучитьДоговорПартнера()	

// Процедура заполняет объект бизнес-процесса.
//
// Параметры:
//  Объект			 - ДокументСсылка - Документ источник.
//  БизнесПроцесс	 - БизнесПроцессСылка - Бизнес процесс. 
//  Задача			 - ЗадачаСсылка	 - Задача. 
//
Процедура ЗаполнитьОбъектБизнесПроцесса(Объект, БизнесПроцесс, Задача = Неопределено) Экспорт
	
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	МетаданныеБизнесПроцесса = БизнесПроцесс.Ссылка.Метаданные();
	Пользователь = Пользователи.ТекущийПользователь();
	
	Если ЕстьРеквизитДокумента("Автор", МетаданныеДокумента) Тогда
		Если НЕ Задача = Неопределено Тогда
			Объект.Автор = Задача.Исполнитель;
		ИначеЕсли ЗначениеЗаполнено(БизнесПроцесс.Автор) Тогда
			Объект.Автор = БизнесПроцесс.Автор;
		Иначе
			Объект.Автор = Пользователь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("Важность", МетаданныеДокумента) 
	   И ЕстьРеквизитДокумента("Важность", МетаданныеБизнесПроцесса) Тогда
		Объект.Важность = БизнесПроцесс.Важность;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда
		Объект.Организация = БизнесПроцесс.Организация;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("Партнер", МетаданныеДокумента) Тогда
		Объект.Партнер = БизнесПроцесс.Партнер;
	ИначеЕсли ЕстьРеквизитДокумента("Клиент", МетаданныеДокумента) Тогда
		Объект.Клиент = БизнесПроцесс.Партнер;	
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("КонтактноеЛицо", МетаданныеДокумента) Тогда
		Объект.КонтактноеЛицо = БизнесПроцесс.КонтактноеЛицо;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента) Тогда
		Объект.Подразделение = БизнесПроцесс.Подразделение;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("Проект", МетаданныеДокумента) Тогда
		Объект.Проект = БизнесПроцесс.Проект;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента) 
	   И ЕстьРеквизитДокумента("Ответственный", МетаданныеБизнесПроцесса) Тогда
		Если ЗначениеЗаполнено(БизнесПроцесс.Ответственный) Тогда
			Объект.Ответственный = БизнесПроцесс.Ответственный;
		Иначе
			Объект.Ответственный = Пользователь;
		КонецЕсли;
	КонецЕсли;
	
	// 2. Счет на оплату (CRM)
	Если НайтиВМетаданныхПоИмени("Документы", "CRM_СчетНаОплатуПокупателю") Тогда
		Если ТипЗнч(Объект) = Тип("ДокументОбъект." + "CRM_СчетНаОплатуПокупателю") Тогда
			Если Задача = Неопределено Тогда
				Объект.ДокументОснование = БизнесПроцесс;
			Иначе
				Объект.ДокументОснование = Задача;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// 3. Телемаркетинг
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.CRM_Телемаркетинг") Тогда
		Если Задача = Неопределено Тогда
			Объект.Основание	= БизнесПроцесс;
			Объект.Тема			= НСтр("ru='Бизнес-процесс от'") + " " + Формат(БизнесПроцесс.Дата, "ДЛФ=D") 
				+ "/ " 
				+ БизнесПроцесс.Наименование;
		Иначе
			Объект.Основание	= Задача;
			Объект.Тема			= НСтр("ru='Задача от'") + " " + Формат(Задача.Дата, "ДЛФ=D") + "/ " + Задача.Наименование;
		КонецЕсли;
		
		Если ЕстьРеквизитДокумента("Партнер", МетаданныеБизнесПроцесса) И ЗначениеЗаполнено(БизнесПроцесс.Партнер) Тогда
			НоваяСтрока = Объект.Участники.Добавить();
			НоваяСтрока.Партнер	= БизнесПроцесс.Партнер;
			Если ЗначениеЗаполнено(БизнесПроцесс.КонтактноеЛицо) Тогда
				НоваяСтрока.КонтактноеЛицо	= БизнесПроцесс.КонтактноеЛицо;
			Иначе
				НоваяСтрока.КонтактноеЛицо	= БизнесПроцесс.Партнер.CRM_ОсновноеКонтактноеЛицо;
			КонецЕсли;
			
			Таб = ПолучитьКонтактнуюИнформациюОбъекта(НоваяСтрока.Партнер,
				?(ЗначениеЗаполнено(НоваяСтрока.КонтактноеЛицо), НоваяСтрока.КонтактноеЛицо, Неопределено),
				Перечисления.ТипыКонтактнойИнформации.Телефон, Неопределено);
				
			Если Таб.Количество() > 0  Тогда
				НоваяСтрока.Телефон = Таб[0].Представление;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// 4. Рассылка писем
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.CRM_РассылкаЭлектронныхПисем") Тогда
		Если Задача = Неопределено Тогда
			Объект.Основание = БизнесПроцесс;
		Иначе
			Объект.Основание = Задача;
		КонецЕсли;
		
		Если ЕстьРеквизитДокумента("Партнер", МетаданныеБизнесПроцесса) И ЗначениеЗаполнено(БизнесПроцесс.Партнер) Тогда
			НоваяСтрока = Объект.Получатели.Добавить();
			НоваяСтрока.Партнер	= БизнесПроцесс.Партнер;
			Если ЗначениеЗаполнено(БизнесПроцесс.КонтактноеЛицо) Тогда
				НоваяСтрока.КонтактноеЛицо	= БизнесПроцесс.КонтактноеЛицо;
			Иначе
				НоваяСтрока.КонтактноеЛицо	= БизнесПроцесс.Партнер.CRM_ОсновноеКонтактноеЛицо;
			КонецЕсли;
			
			Таб = ПолучитьКонтактнуюИнформациюОбъекта(НоваяСтрока.Партнер,
				?(ЗначениеЗаполнено(НоваяСтрока.КонтактноеЛицо), НоваяСтрока.КонтактноеЛицо, Неопределено),
				Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Неопределено);
				
			Если Таб.Количество() > 0  Тогда
				НоваяСтрока.Адрес				= Таб[0].АдресЭП;
				НоваяСтрока.ПредставлениеАдреса	= Таб[0].Представление;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// 5. Коммерческое предложение.
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") Тогда
		Если Задача = Неопределено Тогда
			Объект.ДокументОснование	= БизнесПроцесс;
			Объект.CRM_Примечание		= НСтр("ru='Бизнес-процесс от'") + " " + Формат(БизнесПроцесс.Дата,
				 "ДЛФ=D") + "/ " 
				+ БизнесПроцесс.Наименование;
		Иначе
			Объект.ДокументОснование	= Задача;
			Объект.CRM_Примечание		= НСтр("ru='Задача от'") + " " + Формат(Задача.Дата, "ДЛФ=D") + "/ " + Задача.Наименование;
		КонецЕсли;
	КонецЕсли;
	// 6. Исходящее письмо
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
		Если Задача = Неопределено Тогда
			Объект.Тема			= НСтр("ru='Бизнес-процесс от'") + " " + Формат(БизнесПроцесс.Дата, "ДЛФ=D") 
				+ "/ " 
				+ БизнесПроцесс.Наименование;
			Объект.Текст	= БизнесПроцесс.Описание;
		Иначе
			Объект.Тема			= НСтр("ru='Бизнес-процесс от';en='Business Process at'") + " " 
				+ Формат(Задача.Дата, "ДЛФ=D") + "/ " 
				+ Задача.Наименование;
			Объект.Текст	= Задача.Описание;
		КонецЕсли;
		ДокументHTML = Взаимодействия.ПолучитьДокументHTMLИзОбычногоТекста(Объект.Текст);
		ТекстHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		Объект.ТекстHTML = СтрЗаменить(ТекстHTML, "size=""2""", "");
		Если ЕстьРеквизитДокумента("Партнер", МетаданныеБизнесПроцесса) И ЗначениеЗаполнено(БизнесПроцесс.Партнер) Тогда
			
			Таб = ПолучитьКонтактнуюИнформациюОбъекта(БизнесПроцесс.Партнер,
				?(ЗначениеЗаполнено(БизнесПроцесс.КонтактноеЛицо), БизнесПроцесс.КонтактноеЛицо, Неопределено),
				Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Неопределено);
				
			Если Таб.Количество() > 0  Тогда
				Если Объект.ПолучателиПисьма.Найти(Таб[0].АдресЭП, "Адрес") = Неопределено Тогда
					НоваяСтрока						= Объект.ПолучателиПисьма.Добавить();
					НоваяСтрока.Адрес				= Таб[0].АдресЭП;
					НоваяСтрока.Контакт				= Таб[0].Ссылка;
					НоваяСтрока.Представление		= ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(Таб[0].Ссылка.Наименование,
						 Таб[0].АдресЭП,
						 "");
					Объект.СписокПолучателейПисьма	= НоваяСтрока.Представление;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// 7. СМС
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.СообщениеSMS") Тогда
		Если Задача = Неопределено Тогда
			Объект.ВзаимодействиеОснование	= БизнесПроцесс;
		Иначе
			Объект.ВзаимодействиеОснование	= Задача;
		КонецЕсли;
		
		Если ЕстьРеквизитДокумента("Партнер", МетаданныеБизнесПроцесса) И ЗначениеЗаполнено(БизнесПроцесс.Партнер) Тогда
			
			Таб = ПолучитьКонтактнуюИнформациюОбъекта(БизнесПроцесс.Партнер,
				?(ЗначениеЗаполнено(БизнесПроцесс.КонтактноеЛицо), БизнесПроцесс.КонтактноеЛицо, Неопределено),
				Перечисления.ТипыКонтактнойИнформации.Телефон, Неопределено);
				
			Если Таб.Количество() > 0  Тогда
				НоваяСтрока = Объект.Получатели.Добавить();
				НоваяСтрока.Контакт					= Таб[0].Ссылка;
				НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
				НоваяСтрока.КакСвязаться			= Таб[0].Представление;
				НоваяСтрока.НомерДляОтправки		= SMS4B_ОтправкаSMS.ФорматироватьНомер(НоваяСтрока.КакСвязаться);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ЗаполненияШапкиДокумента

#Область ЗкспортныеПроцедурыИФункции 
	
// Процедура выводит сообщение об ошибке заполнения поля.
//
// Параметры:
//  ПроизвольныйОбъект	 - Произвольный	 - Объект. 
//  ТекстСообщения		 - Строка	 - Текст сообщения.
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части.
//  НомерСтроки			 - Число	 - Номер строки табличной части.
//  Поле				 - Строка	 - Поле
//  Отказ				 - Булево	 - Флаг отмены.
//
Процедура СообщитьОбОшибке(ПроизвольныйОбъект, ТекстСообщения, ИмяТабличнойЧасти = Неопределено,
	 НомерСтроки = Неопределено,
	Поле = Неопределено, Отказ = Ложь) Экспорт
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщения;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		Сообщение.Поле = ИмяТабличнойЧасти + "[" + (НомерСтроки - 1) + "]." + Поле;
	ИначеЕсли ЗначениеЗаполнено(Поле) Тогда
		Сообщение.Поле = Поле;
	КонецЕсли;
	Сообщение.УстановитьДанные(ПроизвольныйОбъект);
	Сообщение.Сообщить();
	Отказ = Истина;
КонецПроцедуры // СообщитьОбОшибке()

// Функция позволяет определить, есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//	ИмяРеквизита		- Строка		- Строковое имя искомого реквизита, 
//	МетаданныеДокумента	- Метаданные	- Объект описания метаданных документа, среди реквизитов которого производится
//	                                   поиск.
//
// Возвращаемое значение:
//	Булево - Результат поиска.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт
	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);
КонецФункции // ЕстьРеквизитДокумента()

// Функция позволяет определить, есть ли среди реквизитов ТЧ объекта
// реквизит с переданным именем.
//
// Параметры: 
//	ИмяРеквизита		- Строка		- Строковое имя искомого реквизита, 
//	МетаданныеДокумента	- Метаданные	- Объект описания метаданных документа, среди реквизитов которого производится поиск.
//	ИмяТабличнойЧасти	- Строка	- Имя табличной части объекта, в которой проверяем наличие реквизита.
//
// Возвращаемое значение:
//	Булево - Результат поиска.
//
Функция ЕстьРеквизитТабличнойЧастиОбъекта(ИмяРеквизита, МетаданныеДокумента, ИмяТабличнойЧасти) Экспорт
	Если МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабличнойЧасти) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат НЕ (МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти(ИмяРеквизита) = Неопределено);
	КонецЕсли;
КонецФункции // ЕстьРеквизитТабличнойЧастиОбъекта()

// Процедура удаляет проверяемый реквизит из массива проверяемых реквизитов.
//
// Параметры:
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//  ПроверяемыйРеквизит	 - Строка - Проверяемы реквизит. 
//
Процедура УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, ПроверяемыйРеквизит) Экспорт
	
	НайденныйРеквизит = ПроверяемыеРеквизиты.Найти(ПроверяемыйРеквизит);
	Если НайденныйРеквизит <> Неопределено Тогда
		ПроверяемыеРеквизиты.Удалить(НайденныйРеквизит);
	КонецЕсли;
	
КонецПроцедуры // УдалитьПроверяемыйРеквизит()

// Процедура записывает новую настройку пользователя.
//
// Параметры:
//  ЗначениеНастройки	 - Произвольный - Значение настройки.
//  ИмяНастройки		 - Строка - Имя настройки. 
//  Пользователь		 - СправочникСсылка.Пользователи - Пользователь. 
//
Процедура УстановитьНастройкуПользователя(ЗначениеНастройки, ИмяНастройки, Пользователь = Неопределено) Экспорт
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.CRM_НастройкиПользователей.СоздатьНаборЗаписей() ;
	
	НаборЗаписей.Отбор.Пользователь.Использование 	= Истина;
	НаборЗаписей.Отбор.Пользователь.Значение      	= Пользователь;
	НаборЗаписей.Отбор.Настройка.Использование 		= Истина;
	// +CRM fresh
	Попытка
		НаборЗаписей.Отбор.Настройка.Значение      		= ПланыВидовХарактеристик.CRM_НастройкиПользователей[ИмяНастройки];
	Исключение
		Если ИмяНастройки = "ОсновнойОтветственный" Тогда
			НастройкаПользователей = ПланыВидовХарактеристик.CRM_НастройкиПользователей.СоздатьЭлемент();
			НастройкаПользователей.Наименование = "Основной ответственный";
			НастройкаПользователей.ИмяПредопределенныхДанных = ИмяНастройки;
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка.Пользователи"));
			ОписаниеТиповД = Новый ОписаниеТипов(Массив);
			НастройкаПользователей.ТипЗначения = ОписаниеТиповД;
			НастройкаПользователей.ОбменДанными.Загрузка = Истина;
			НастройкаПользователей.Записать();
		ИначеЕсли ИмяНастройки = "ОсновнаяОрганизация" Тогда
			НастройкаПользователей = ПланыВидовХарактеристик.CRM_НастройкиПользователей.СоздатьЭлемент();
			НастройкаПользователей.Наименование = "Основная организация";
			НастройкаПользователей.ИмяПредопределенныхДанных = ИмяНастройки;
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка.Организации"));
			ОписаниеТиповД = Новый ОписаниеТипов(Массив);
			НастройкаПользователей.ТипЗначения = ОписаниеТиповД;
			НастройкаПользователей.ОбменДанными.Загрузка = Истина;
			НастройкаПользователей.Записать();	
		КонецЕсли;         
		НаборЗаписей.Отбор.Настройка.Значение      		= ПланыВидовХарактеристик.CRM_НастройкиПользователей[ИмяНастройки];
	КонецПопытки;	
	// -CRM fresh
	
	Запись = НаборЗаписей.Добавить();
	
	Запись.Пользователь = Пользователь;
	Запись.Настройка    = ПланыВидовХарактеристик.CRM_НастройкиПользователей[ИмяНастройки];
	Запись.Значение     =
		ПланыВидовХарактеристик.CRM_НастройкиПользователей[ИмяНастройки].ТипЗначения.ПривестиЗначение(ЗначениеНастройки);
	
	НаборЗаписей.Записать();
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры // УстановитьНастройкуПользователя()

// Процедура определяет ситуацию, когда при изменении своей даты документ
//  оказывается в другом периоде нумерации документов, и в это м случае
//  присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументСсылка			 - ДокументСсылка - ссылка на документ,из которого вызвана процедура.
//  НоваяДатаДокумента		 - Дата  - новая дата документа.
//  НачальнаяДатаДокумента	 - Дата	 - начальная дата документа.
// 
// Возвращаемое значение:
//  Число - разность дат.
//
Функция ПроверитьНомерДокумента(ДокументСсылка, НоваяДатаДокумента, НачальнаяДатаДокумента) Экспорт
	
	// Определяем назначенную для данного вида документов периодичность смены номера.
	ПериодСменыНомера = ДокументСсылка.Метаданные().ПериодичностьНомера;
	
	// В зависимости от установленной периодичности смены номеров,
	// определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - НоваяДатаДокумента;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	Возврат РазностьДат;
	
КонецФункции // ПроверитьНомерДокумента()

// Функция определяет. облагается организация НДС или нет.
//
// Параметры:
//  Организация	 - 	СправочникСсылка.Организации - Проверяемая организация.
// 
// Возвращаемое значение:
//  Булево - Облагается организация или нет. 
//
Функция ОрганизацияОблагаетсяНДС(Организация) Экспорт
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() И Организация["СтавкаНДСПоУмолчанию"].НеОблагается Или
		(Не Организация["СтавкаНДСПоУмолчанию"].НеОблагается И Организация["СтавкаНДСПоУмолчанию"].Ставка = 0) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции // ОрганизацияОблагаетсяНДС()

// Функция возвращает информацию об ответственных лицах организации и их
//  должностях.
//
// Параметры:
//  ОрганизационнаяЕдиница	 - СправочникСсылка.Организации	 - Организационная единица.
//  ДатаСреза				 - Дата	 - дата, на которую считываются данные.
// 
// Возвращаемое значение:
//  Структура - Структура с совокупностью данных о физических лицах
//  структурной единицы.
//
Функция ОтветственныеЛицаОрганизационнойЕдиницы(ОрганизационнаяЕдиница, ДатаСреза) Экспорт
	
	Результат = Новый Структура("ФИОРуководителя, РуководительДолжность, ФИОГлавногоБухгалтера,
		| ФИОКассира, ФИОКладовщика,
		| КладовщикДолжность");

	Если ОрганизационнаяЕдиница <> Неопределено Тогда

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
		Запрос.УстановитьПараметр("ОрганизационнаяЕдиница", ОрганизационнаяЕдиница);

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаСрезПоследних.ТипОтветственногоЛица КАК ТипОтветственногоЛица,
		|	ОтветственныеЛицаСрезПоследних.Должность.Наименование КАК НазваниеДолжности,
		|	ОтветственныеЛицаСрезПоследних.Сотрудник.Наименование КАК ФИО
		|ИЗ
		|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, Организация = &ОрганизационнаяЕдиница) КАК ОтветственныеЛицаСрезПоследних";
		
		Выборка = Запрос.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипОтветственногоЛица 	= Перечисления.ТипыОтветственныхЛиц.Руководитель Тогда
				Результат.ФИОРуководителя       = Выборка.ФИО;
				Результат.РуководительДолжность = Выборка.НазваниеДолжности;
			ИначеЕсли Выборка.ТипОтветственногоЛица = Перечисления.ТипыОтветственныхЛиц.ГлавныйБухгалтер Тогда
				Результат.ФИОГлавногоБухгалтера = Выборка.ФИО;
			ИначеЕсли Выборка.ТипОтветственногоЛица = Перечисления.ТипыОтветственныхЛиц.Кассир Тогда
				Результат.ФИОКассира            = Выборка.ФИО;
			ИначеЕсли Выборка.ТипОтветственногоЛица = Перечисления.ТипыОтветственныхЛиц.Кладовщик Тогда
				Результат.ФИОКладовщика			= Выборка.ФИО;
				Результат.КладовщикДолжность    = Выборка.НазваниеДолжности;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОтветственныеЛицаОрганизационнойЕдиницы()

// Функция определяет, сколько файлов прикреплено к объекту.
//
// Параметры:
//  ВладелецФайла	 - СправочникСсылка	 - Владелец файла. 
//  ФайлИсключение	 - СправочникСсылка	 - Файл исключение.
// 
// Возвращаемое значение:
//  Число - Количество прикрепленных файлов.
//
Функция ПолучитьКоличествоПрикрепленныхФайлов(Знач ВладелецФайла, Знач ФайлИсключение = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСправочника = ВладелецФайла.Метаданные().Имя + "ПрисоединенныеФайлы";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПрисоединенныеФайлы.Ссылка) КАК Количество
	|ИЗ
	|	&ИмяСправочника КАК ПрисоединенныеФайлы
	|ГДЕ
	|	ПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
	
	Если ФайлИсключение <> Неопределено Тогда
		ТекстЗапроса =  ТекстЗапроса +
		"
		|	И ПрисоединенныеФайлы.Ссылка <> &Ссылка";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", "Справочник." + ИмяСправочника);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("ВладелецФайла", ВладелецФайла);
	
	Если ФайлИсключение <> Неопределено Тогда
		Запрос.Параметры.Вставить("Ссылка", ФайлИсключение);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Количество, 0);
	
КонецФункции

// Функция возвращает текущую дату сеанса для использования на клиенте
// 
// Возвращаемое значение:
//  Дата - текущая дата сеанса.
//
Функция ПолучитьТекущуюДатуСеанса() Экспорт
	Возврат ТекущаяДатаСеанса();
КонецФункции	

// Получить ссылку на раздел справки.
//
// Параметры:
//  Раздел	 - Строка - Раздел 
// 
// Возвращаемое значение:
//  Строка - Путь к справке.
//
Функция ПолучитьСсылкуНаРазделСправки(Раздел) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("CRM_РаботаВЛокальномРежиме") Тогда
		Если Раздел = "СинхронизацияДанныхЧерезУниверсальныйФормат" Тогда
			ПутьКСправке = "https://1crm.ru/help/Integraciya-s-1c-buhgalteriya-predpriyatiya/";
			
		ИначеЕсли Раздел = "Помощь" Тогда
			ПутьКСправке = "https://1crm.ru/help/";
			
		ИначеЕсли Раздел = "ИнтеграцияСервисРаспознаванияЛиц" Тогда
			ПутьКСправке = "https://1crm.ru/help/Analiz-potoka-posetitelei-meropriyatiya-s-pomoschu-servisa-raspoznavaniya-lict/";
			
		ИначеЕсли Раздел = "УниверсальныйРабочийСтол" Тогда
			ПутьКСправке = "https://1crm.ru/help/Universalny-rabochi-stol/";
			
		ИначеЕсли Раздел = "ИнтеграцияСофтФон" Тогда
			ПутьКСправке = "https://1crm.ru/help/integratsii-softfon/";
			
		ИначеЕсли Раздел = "ИнтеграцияCoMagic" Тогда
			ПутьКСправке = "https://telefon.1crm.ru/help/#/article/3354";
			
		ИначеЕсли Раздел = "ИнтеграцияRoistatКоллтрекинг" Тогда
			ПутьКСправке = "https://roistat.com/ru/features/calltracking/";
			
		ИначеЕсли Раздел = "ИнтеграцияGoogleCalendar" Тогда
			ПутьКСправке = "https://1crm.ru/help/integratsii-google-calendar/";
			
		ИначеЕсли Раздел = "НастройкаСценариевПродажи" Тогда
			ПутьКСправке = "https://1crm.ru/help/Nastrojka-scenariev-raboty-s-interesami-klientov/";
			
		ИначеЕсли Раздел = "ВоронкаПродаж" Тогда
			ПутьКСправке = "https://1crm.ru/help/Voronka-prodag/";
			
		ИначеЕсли Раздел = "АРММоиДела" Тогда
			ПутьКСправке = "https://1crm.ru/help/avtomatizirovannoe-rabochee-mesto-arm-moi-dela/";
			
		ИначеЕсли Раздел = "АРММоиПродажи" Тогда
			ПутьКСправке = "https://1crm.ru/help/avtomatizirovannoe-rabochee-mesto-arm-moi-prodazhi/";
			
		ИначеЕсли Раздел = "ИспользованиеПоказателей" Тогда
			ПутьКСправке = "https://1crm.ru/help/ispolzovanie-pokazateley-dlya-upravleniya-prodazhami";
			
		ИначеЕсли Раздел = "АРМКалендарь" Тогда
			ПутьКСправке = "https://1crm.ru/help/kalendarmenedzhera/";
			
		ИначеЕсли Раздел = "АРМПочта" Тогда
			ПутьКСправке = "https://1crm.ru/help/elektronnaya-pochta/";
			
		ИначеЕсли Раздел = "НастойкаУчетныхЗаписейПочты" Тогда
			ПутьКСправке = "https://1crm.ru/help/nastroyka-uchetnykh-zapisey-elektronnoy-pochty/";
			
		ИначеЕсли Раздел = "АРМПочтаВидео" Тогда
			ПутьКСправке = "https://youtu.be/6kGLqp4fSsA";
			
		ИначеЕсли Раздел = "ШаблоныПисемВидео" Тогда
			ПутьКСправке = "https://youtu.be/Fr2drbvxEjU";
			
		ИначеЕсли Раздел = "АРМДиалоги" Тогда
			ПутьКСправке = "https://1crm.ru/help/arm-dialogi-perepiska-s-klientom-v-onlaynchate/";
			
		ИначеЕсли Раздел = "ЗагрузкаЛидов" Тогда
			ПутьКСправке = "https://1crm.ru/help/nastroyka-zagruzki-lidov-iz-razlichnykh-istochnikov/";
			
		ИначеЕсли Раздел = "ЗагурзкаИОбработкаЗаявок" Тогда
			ПутьКСправке = "https://1crm.ru/help/registractia-i-obrabotka-zayavok-ot-klientov/";
			
		ИначеЕсли Раздел = "ИнтеграцияUnisender" Тогда
			ПутьКСправке = "https://1crm.ru/help/integratsii-unisender/";
			
		ИначеЕсли Раздел = "ИнтеграцияUnione" Тогда
			ПутьКСправке = "https://1crm.ru/help/integratsiya-s-servisom-unione/";
			
		ИначеЕсли Раздел = "ДоступКДанным" Тогда
			ПутьКСправке = "https://1crm.ru/help/dostup-k-dannym-drugikh-polzovateley/";
			
		ИначеЕсли Раздел = "ИнтеграцияMSExchange" Тогда
			ПутьКСправке = "https://1crm.ru/help/sinkhronizatsiya-s-ms-exchange/";
			
		ИначеЕсли Раздел = "ИнтеграцияIcrm" Тогда
			ПутьКСправке = "https://1crm.ru/help/icrm-sales-manager/";
			
		ИначеЕсли Раздел = "ЗагрузкаДанныхИзФайла" Тогда
			ПутьКСправке = "https://1crm.ru/help/Import-klientov/";
			
		ИначеЕсли Раздел = "quick-start" Тогда
			ПутьКСправке = "https://1crm.ru/quick-start/";
			
		ИначеЕсли Раздел = "1crm.ru" Тогда
			ПутьКСправке = "https://1crm.ru/";
			
		ИначеЕсли Раздел = "Торги" Тогда
			ПутьКСправке = "http://www.akam.ru/products/torgi/";
			
		ИначеЕсли Раздел = "СервисОбратнойСвязи" Тогда
			ПутьКСправке = "https://1crm.ru/help/otsenka-kachestva-obsluzhivaniya-klientami/";
			
		ИначеЕсли Раздел = "Viber" Тогда
			ПутьКСправке = "https://1crm.ru/help/Integractiya-s-Viber/";
			
		ИначеЕсли Раздел = "Telegram" Тогда
			ПутьКСправке = "https://1crm.ru/help/integratsiya-s-telegram/";
			
		ИначеЕсли Раздел = "ВКонтакте" Тогда
			ПутьКСправке = "https://1crm.ru/help/integratsiya-s-vkontakte-soobshcheniya/";
			
		ИначеЕсли Раздел = "Facebook" Тогда
			ПутьКСправке = "https://1crm.ru/help/integratsiya-s-facebook-soobshcheniya/";
			
		ИначеЕсли Раздел = "Instagram" Тогда
			ПутьКСправке = "https://1crm.ru/help/integratsiya-s-instagram-kommentarii/";
			
		ИначеЕсли Раздел = "WhatsApp" Тогда
			ПутьКСправке = "https://1crm.ru/help/dialogi-integractiya-s-whatsapp/";
			
		ИначеЕсли Раздел = "JivoSite" Тогда
			ПутьКСправке = "https://1crm.ru/help/integratsiya-s-jivosite/";
			
		ИначеЕсли Раздел = "ИнтеграцииСИнтернетМагазинами" Тогда
			ПутьКСправке = "https://1crm.ru/help/integratsiya-s-magazinom-vkontakte/";
			
		ИначеЕсли Раздел = "АРМ_ЖурналВстреч" Тогда
			ПутьКСправке = "https://1crm.ru/help/zhurnal-vstrech/";

		ИначеЕсли Раздел = "ПланированиеПродаж" Тогда
			ПутьКСправке = "https://1crm.ru/help/formirovanie-plana-prodazh/";
			
		ИначеЕсли Раздел = "ПотенциалПродаж" Тогда
			ПутьКСправке = "https://1crm.ru/help/potentsial-prodazh/";
			
		ИначеЕсли Раздел = "СегментацияКлиентов" Тогда
			ПутьКСправке = "https://1crm.ru/help/segmentatsiya-klientov--ruchnaya-i-avtomaticheskaya/";
			
		КонецЕсли;
	Иначе
		Если Раздел = "Помощь" Тогда
			ПутьКСправке = "https://its.1c.ru/db/crmfreshdoc/";
			
		ИначеЕсли Раздел = "УниверсальныйРабочийСтол" Тогда
			ПутьКСправке = "https://its.1c.ru/db/crmfreshdoc#content:4:1/";
			
		ИначеЕсли Раздел = "ИнтеграцияСофтФон" Тогда
			ПутьКСправке = "https://its.1c.ru/db/crmfreshdoc#content:14:hdoc/";
			
		ИначеЕсли Раздел = "ИнтеграцияGoogleCalendar" Тогда
			ПутьКСправке = "https://its.1c.ru/db/crmfreshdoc#content:13:hdoc/";
			
		ИначеЕсли Раздел = "НастройкаСценариевПродажи" Тогда
			ПутьКСправке = "https://its.1c.ru/db/crmfreshdoc#content:8:hdoc/";
			
		ИначеЕсли Раздел = "ВоронкаПродаж" Тогда
			ПутьКСправке = "https://its.1c.ru/db/crmfreshdoc#content:7:hdoc/";
			
		ИначеЕсли Раздел = "АРММоиДела" Тогда
			ПутьКСправке = "https://its.1c.ru/db/crmfreshdoc#content:9:hdoc/";
			
		ИначеЕсли Раздел = "АРММоиПродажи" Тогда
			ПутьКСправке = "https://its.1c.ru/db/crmfreshdoc#content:5:1/";
			
		ИначеЕсли Раздел = "АРМКалендарь" Тогда
			ПутьКСправке = "https://its.1c.ru/db/crmfreshdoc#content:12:hdoc/";
			
		ИначеЕсли Раздел = "АРМПочта" Тогда
			ПутьКСправке = "https://its.1c.ru/db/crmfreshdoc#content:10:hdoc/";
			
		ИначеЕсли Раздел = "АРМДиалоги" Тогда
			ПутьКСправке = "https://its.1c.ru/db/crmfreshdoc#content:15:hdoc/";
			
		ИначеЕсли Раздел = "ЗагрузкаЛидов" Тогда
			ПутьКСправке = "https://its.1c.ru/db/crmfreshdoc#content:16:hdoc/";
			
		ИначеЕсли Раздел = "ЗагрузкаДанныхИзФайла" Тогда
			ПутьКСправке = "https://its.1c.ru/db/crmfreshdoc/";
			
		// Временно прямые сылки на сайт.
		ИначеЕсли Раздел = "Viber" Тогда
			ПутьКСправке = "https://1crm.ru/help/Integractiya-s-Viber/";
			
		ИначеЕсли Раздел = "Telegram" Тогда
			ПутьКСправке = "https://1crm.ru/help/integratsiya-s-telegram/";
			
		ИначеЕсли Раздел = "ВКонтакте" Тогда
			ПутьКСправке = "https://1crm.ru/help/integratsiya-s-vkontakte-soobshcheniya/";
			
		ИначеЕсли Раздел = "Facebook" Тогда
			ПутьКСправке = "https://1crm.ru/help/integratsiya-s-facebook-soobshcheniya/";
			
		ИначеЕсли Раздел = "Instagram" Тогда
			ПутьКСправке = "https://1crm.ru/help/integratsiya-s-instagram-kommentarii/";
			
		ИначеЕсли Раздел = "WhatsApp" Тогда
			ПутьКСправке = "https://1crm.ru/help/dialogi-integractiya-s-whatsapp/";
			
		ИначеЕсли Раздел = "JivoSite" Тогда
			ПутьКСправке = "https://1crm.ru/help/integratsiya-s-jivosite/";
			
		ИначеЕсли Раздел = "ИнтеграцииСИнтернетМагазинами" Тогда
			ПутьКСправке = "https://1crm.ru/help/integratsiya-s-magazinom-vkontakte/";
			
		ИначеЕсли Раздел = "ИнтеграцияUnisender" Тогда
			ПутьКСправке = "https://1crm.ru/help/integratsii-unisender/";
			
		ИначеЕсли Раздел = "ИнтеграцияUnione" Тогда
			ПутьКСправке = "https://1crm.ru/help/integratsiya-s-servisom-unione/";
			
		Иначе
			ПутьКСправке = "https://its.1c.ru/db/crmfreshdoc/";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПутьКСправке;
	
КонецФункции

// Изменяет реквизиты объекта.
//
// Параметры:
//	Ссылка				- Ссылка - Ссылка на объект.
//	СтруктураРеквизитов - Структура - Структура изменяемых реквизитов.
//
Процедура ИзменитьРеквизитыОбъекта(Ссылка, СтруктураРеквизитов) Экспорт
	
	Объект = Ссылка.ПолучитьОбъект();
	Для каждого Реквизит Из СтруктураРеквизитов Цикл
		Объект[Реквизит.Ключ] = Реквизит.Значение;
	КонецЦикла;
	Объект.Записать();
	
КонецПроцедуры

// Получает ссылку из навигационной.
//
// Параметры:
//	НС - Строка - Навигационная ссылка.
// 
// Возвращаемое значение:
//  Строка - ссылка.
//
Функция ПолучитьСсылкуИзНавигационной(НС) Экспорт
    
	Попытка
		ПерваяТочка = СтрНайти(НС, "e1cib/data/");
	    ВтораяТочка = СтрНайти(НС, "?ref=");
	    
	    ПредставлениеТипа   = Сред(НС, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
	    ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
	    ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(НС, ВтораяТочка + 5));
	    Возврат ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
    
КонецФункции

#КонецОбласти // ЗкспортныеПроцедурыИФункции

#Область ФормированияПечатныхФорм
	
// Функция возвращает представление номенклатуры для печати.
//
// Параметры:
//	Номенклатура	- СправочникСсылка	- Номенклатура
//	Характеристика	- СправочникСсылка	- Характеристика
//	Артикул			- Строка			- Артикул
//
// Возвращаемое значение:
//	Строка	- Представление номенклатуры.
//
Функция ПолучитьПредставлениеНоменклатурыДляПечати(Номенклатура, Характеристика = Неопределено, Артикул = "")  Экспорт
	ДопХарактеристики = "";
	Если Константы.ИспользоватьХарактеристикиНоменклатуры.Получить() И ЗначениеЗаполнено(Характеристика) Тогда
		ДопХарактеристики = ДопХарактеристики + " (" + СокрЛП(Характеристика) + ")";
	КонецЕсли; 
	СтрокаАртикул = СокрЛП(Артикул);
	Если ЗначениеЗаполнено(СтрокаАртикул) Тогда
		СтрокаАртикул = ", " + СтрокаАртикул;
	КонецЕсли;
 	Если ДопХарактеристики <> "" ИЛИ ЗначениеЗаполнено(СтрокаАртикул) Тогда
		Возврат СокрЛП(Номенклатура) + ДопХарактеристики + СтрокаАртикул;
	Иначе
    	Возврат СокрЛП(Номенклатура);
	КонецЕсли;	 
КонецФункции // ПолучитьПредставлениеНоменклатурыДляПечати()

// Функция возвращает структуру данных со сводным описанием контрагента.
//
// Параметры: 
//	СписокСведений	- СписокЗначений	- Список со значениями параметров организации.
//	Список			- СписокЗначений	- Список запрашиваемых параметров организации.
//	СПрефиксом		- Булево			- Признак выводить или нет префикс параметра организации.
//
// Возвращаемое значение:
//	Строка	- Описание организации.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт
	
	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	Иначе
		Список = Список + ?(Прав(Список, 1) = ",", "", ",");
	КонецЕсли;
	
	Результат = "";
	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование",		" ");
	СоответствиеПараметров.Вставить("ИНН",						" ИНН ");
	СоответствиеПараметров.Вставить("КПП",						" КПП ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",			" ");
	СоответствиеПараметров.Вставить("Телефоны",					" тел.: ");
	СоответствиеПараметров.Вставить("НомерСчета",				" р/с ");
	СоответствиеПараметров.Вставить("Банк",               		" в банке ");
	СоответствиеПараметров.Вставить("БИК",                		" БИК ");
	СоответствиеПараметров.Вставить("КоррСчет",           		" к/с ");
	СоответствиеПараметров.Вставить("КодПоОКПО",          		" Код по ОКПО ");
	
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	
	// BSLLS:UnusedLocalVariable-off
	Для Счетчик = 1 По ЧислоПараметров Цикл
	// BSLLS:UnusedLocalVariable-on
		ПозЗапятой = СтрНайти(Список, ",");
		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);
				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;
				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если НЕ ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли; 
				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;
			Исключение
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = СтрЗаменить(НСтр("ru='Не удалось определить значение параметра организации: %Параметр%'"),
					 "%Параметр%",
					 ИмяПараметра);
				Сообщение.Сообщить();
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ОписаниеОрганизации()

// Функция форматирования прописи количества.
//
// Параметры:
//	Количество	- Число	- Число, которое мы хотим форматировать.
//
// Возвращаемое значение:
//	Строка	- Отформатированная должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество) Экспорт
	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);
	Если ДробнаяЧасть = Окр(ДробнаяЧасть, 0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";
   	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, десятая, десятых, десятых, м, 1";
   	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, сотая, сотых, сотых, м, 2";
   	Иначе
		ПараметрыПрописи = "целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3";
    КонецЕсли;
	Возврат ЧислоПрописью(Количество, , ПараметрыПрописи);
КонецФункции // КоличествоПрописью()

// Функция формирует сведения об указанном ЮрФизЛице.
//  К сведениям относятся - наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры:
//  ЮрФизЛицо				 - СправочникСсылка	 - Организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода				 - Дата				 - Дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Булево			 - Для физ. лица выводить только инициалы имени и отчества.
//  БанковскийСчет			 - СправочникСсылка.БанковскиеСчета	 - Ссылка на счет.
// 
// Возвращаемое значение:
//  Структура - Собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина,
	 БанковскийСчет = Неопределено) Экспорт
	
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Партнеры") Тогда
			Возврат Вычислить("ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(ЮрФизЛицо),
				| ДатаПериода)");
		Иначе
			Возврат Вычислить("ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода)");
		КонецЕсли;
	КонецЕсли;

	Сведения = Новый Структура("Представление, ПолноеНаименование, КодПоОКПО, ИНН, КПП, Телефоны,
		| ЮридическийАдрес, Банк, БИК, КоррСчет, НомерСчета,
		| АдресБанка");
	Запрос   = Новый Запрос;
	Данные   = Неопределено;
	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		Возврат Сведения;
	КонецЕсли;
	
	Если БанковскийСчет = Неопределено ИЛИ БанковскийСчет.Пустая() Тогда
		Попытка
			ТекБанковскийСчет = ЮрФизЛицо.БанковскийСчетПоУмолчанию;
		Исключение
			ТекБанковскийСчет = Справочники["БанковскиеСчета"].ПустаяСсылка();
		КонецПопытки;	
	Иначе
		ТекБанковскийСчет = БанковскийСчет;
	КонецЕсли;
	// Выберем основные сведения о контрагентеЮрФизЛицо.ОсновнойБанковскийСчет.БанкРасчетов.Пустая.
	Если ТекБанковскийСчет.БанкРасчетов.Пустая() Тогда
		ИмяРеквизитаБанка = "Банк";
	Иначе
		ИмяРеквизитаБанка = "БанкРасчетов";
	КонецЕсли;
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		ИмяСправочника = "Организации";
		ИмяРеквизитаИНН		  = "ИНН";
		ИмяРеквизитаКПП		  = "КПП";
		ИмяРеквизитаКодПоОКПО = "КодПоОКПО";
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Партнеры") Тогда
		ИмяСправочника = "Партнеры";
		ИмяРеквизитаИНН		  = "CRM_ИНН";
		ИмяРеквизитаКПП		  = "CRM_КПП";
		ИмяРеквизитаКодПоОКПО = "CRM_КодПоОКПО";
	Иначе
		Возврат Сведения;
	КонецЕсли;
	Запрос.УстановитьПараметр("ПарЮрФизЛицо",      ЮрФизЛицо);
	Запрос.УстановитьПараметр("ПарБанковскийСчет", ТекБанковскийСчет);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Представление КАК Наименование,
	|	Организации.НаименованиеПолное КАК ПолноеНаименование,
	|	Организации." + ИмяРеквизитаИНН + " КАК ИНН,
	|	Организации." + ИмяРеквизитаКПП + " КАК КПП,
	|	Организации." + ИмяРеквизитаКодПоОКПО + " КАК КодПоОКПО,";
	Если ЗначениеЗаполнено(ТекБанковскийСчет) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	БанковскиеСчета.НомерСчета                     КАК НомерСчета,
		|	БанковскиеСчета." + ИмяРеквизитаБанка + "          КАК Банк,
		|	БанковскиеСчета." + ИмяРеквизитаБанка + ".Код      КАК БИК,
		|	БанковскиеСчета." + ИмяРеквизитаБанка + ".КоррСчет КАК КоррСчет,
		|	БанковскиеСчета." + ИмяРеквизитаБанка + ".Адрес    КАК АдресБанка
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК Организации,
		|	Справочник.БанковскиеСчета    КАК БанковскиеСчета
		|
		|ГДЕ
		|	Организации.Ссылка       = &ПарЮрФизЛицо
		|	И БанковскиеСчета.Ссылка = &ПарБанковскийСчет";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	""""                          КАК НомерСчета,
		|	""""                          КАК Банк,
		|	""""                          КАК БИК,
		|	""""                          КАК КоррСчет,
		|	""""                          КАК АдресБанка
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК Организации
		|
		|ГДЕ
		|	Организации.Ссылка = &ПарЮрФизЛицо";
	КонецЕсли;
	Данные = Запрос.Выполнить().Выбрать();
	Данные.Следующий();
	Сведения.Вставить("КодПоОКПО", Данные.КодПоОКПО);
	Сведения.Вставить("КПП",       Данные.КПП);
	Сведения.Вставить("Свидетельство",	"");
	Сведения.Вставить("ПолноеНаименование", СокрЛП(Данные.ПолноеНаименование));
	Если Данные <> Неопределено Тогда
		Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
			Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
			ФактАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
		ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Партнеры") Тогда
			Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
			Если ЮрФизЛицо.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
				ЮрАдрес = Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес;
			Иначе
				ЮрАдрес = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
			КонецЕсли;	
			ФактАдрес = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
		Иначе
			Телефон = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			ФактАдрес = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();		
		КонецЕсли; 
		Сведения.Вставить("Представление",    СокрЛП(Данные.Наименование));
		Сведения.Вставить("ИНН",              Данные.ИНН);
		Сведения.Вставить("Телефоны",         ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, Телефон));
		Сведения.Вставить("НомерСчета",       Данные.НомерСчета);
		Сведения.Вставить("Банк",             Данные.Банк);
		Сведения.Вставить("БИК",              Данные.БИК);
		Сведения.Вставить("АдресБанка",       Данные.АдресБанка);
		Сведения.Вставить("КоррСчет",         Данные.КоррСчет);
		Сведения.Вставить("ЮридическийАдрес", ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, ЮрАдрес));
		Сведения.Вставить("ФактическийАдрес", ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, ФактАдрес));
		Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
			Сведения.ПолноеНаименование = Сведения.Представление;
		КонецЕсли;
	КонецЕсли;
	Возврат Сведения;
КонецФункции // СведенияОЮрФизЛице()

// Функция находит актуальное значение адреса в контакной информации.
//
// Параметры:
//	ОбъектКонтактнойИнформации	- СправочникСсылка	- Объект контактной информации.
//	ВидИнформации				- СправочникСсылка	- Вид контактной информации.
//
// Возвращаемое значение:
//	Строка	- Представление найденного адреса.
//                                          
Функция ПолучитьКонтактнуюИнформацию(ОбъектКонтактнойИнформации, ВидИнформации) Экспорт
	Если ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Организации") Тогда 		
		ТаблицаИсточник = "Организации";		
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.ФизическиеЛица") Тогда		
		ТаблицаИсточник = "ФизическиеЛица";
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Партнеры") Тогда		
		ТаблицаИсточник = "Партнеры";
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда		
		ТаблицаИсточник = "КонтактныеЛицаПартнеров";
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Пользователи") Тогда		
		ТаблицаИсточник = "Пользователи";
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда		
		ТаблицаИсточник = "CRM_ПотенциальныеКлиенты";
	Иначе 
		Возврат "";	
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", ОбъектКонтактнойИнформации);
	Запрос.УстановитьПараметр("Вид", ВидИнформации);
	Запрос.Текст = "ВЫБРАТЬ 
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник." + ТаблицаИсточник + ".КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Вид = &Вид
	|	И КонтактнаяИнформация.Ссылка = &Объект";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Представление;
	КонецЕсли;
КонецФункции // ПолучитьАдресИзКонтактнойИнформации()

// Процедура устанавливает условное оформление.
//
// Параметры:
//	ВыбранныйЭлемент	- ЭлементУправления	- Элемент формы.
//	Список				- СписокЗначений	- Список
//	ИмяНастройки		- Строка			- Имя настройки.
//
Процедура ВыделитьЖирнымОсновнойЭлемент(ВыбранныйЭлемент, Список, ИмяНастройки = "ОсновнойЭлемент") Экспорт
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для Каждого ЭлементУсловногоОформления Из Список.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяНастройки Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		Список.УсловноеОформление.Элементы.Удалить(Элемент.Значение);
	КонецЦикла;
	Если НЕ ЗначениеЗаполнено(ВыбранныйЭлемент) Тогда
		Возврат;
	КонецЕсли;
	ЭлементУсловногоОформления = Список.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ВыбранныйЭлемент;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяНастройки;
	ЭлементУсловногоОформления.Представление = "Выделение основного элемента";
КонецПроцедуры // ВыделитьЖирнымОсновнойЭлемент()

#КонецОбласти // ФормированияПечатныхФорм

#Область РаботаСКонтактнойИнформацией
	
// Функция получает контактную информацию объекта.
//
// Параметры:
//	Партнер					- СправочникСсылка		- Объект, для которого получается контактная информация.
//	КонтактноеЛицо			- СправочникСсылка		- Контактное лицо объекта.
//	ТипКонтактнойИнформации	- ПеречислениеСсылка	- Тип контактной информации.
//	ВидКонтактнойИнформации	- СправочникСсылка		- Вид контактной информации.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица контактной информации.
//
Функция ПолучитьКонтактнуюИнформациюОбъекта(Партнер = Неопределено, КонтактноеЛицо = Неопределено,
											ТипКонтактнойИнформации = Неопределено, ВидКонтактнойИнформации = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(Партнер) И Не ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Массив = Новый Массив;
	Массив.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
	Если НЕ Партнер = Неопределено Тогда	
		УстановитьПривилегированныйРежим(Истина);
		Если Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
			Массив.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания);
		Иначе
			Массив.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо);
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	Запрос = Новый Запрос;
	ТекстВремТаблиц	= "";
	ТекстЗапроса	= "";
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		ТекстВремТаблиц = ТекстВремТаблиц + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид.Предопределенный,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид.CRM_ИспользоватьДляОповещений КАК ИспользоватьДляОповещений,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Значение,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.ЗначенияПолей,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Страна,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Регион,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Город,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.ДоменноеИмяСервера,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефонаБезКодов,
        |	КонтактныеЛицаПартнеровКонтактнаяИнформация.CRM_ОсновнойДляСвязи,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК ВидРеквизитДопУпорядочивания,
		|	0 КАК ПорядокВремТаб
		|ПОМЕСТИТЬ КонтактныеЛицаПартнеровКИ
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
		|ГДЕ";
		Если ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ТекстВремТаблиц = ТекстВремТаблиц + "
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = &КонтактноеЛицо";
		Иначе	 
			ТекстВремТаблиц = ТекстВремТаблиц + "
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка В (&КонтактноеЛицо)";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТипКонтактнойИнформации) Тогда
			ТекстВремТаблиц = ТекстВремТаблиц + "
			|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = &Тип";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
			ТекстВремТаблиц = ТекстВремТаблиц + "
			|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид = (&ВидКИ)";
		КонецЕсли;
		ТекстВремТаблиц = ТекстВремТаблиц + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	КонецЕсли;
	Если ЗначениеЗаполнено(Партнер) Тогда
		ТекстВремТаблиц = ТекстВремТаблиц + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка,
		|	ПартнерыКонтактнаяИнформация.Вид КАК Вид,
		|	ПартнерыКонтактнаяИнформация.Тип КАК Тип,
		|	ПартнерыКонтактнаяИнформация.Вид.Предопределенный КАК ВидПредопределенный,
		|	ПартнерыКонтактнаяИнформация.Вид.CRM_ИспользоватьДляОповещений КАК ИспользоватьДляОповещений,
		|	ПартнерыКонтактнаяИнформация.Представление КАК Представление,
		|	ПартнерыКонтактнаяИнформация.Значение КАК Значение,
		|	ПартнерыКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
		|	ПартнерыКонтактнаяИнформация.Страна КАК Страна,
		|	ПартнерыКонтактнаяИнформация.Регион КАК Регион,
		|	ПартнерыКонтактнаяИнформация.Город КАК Город,
		|	ПартнерыКонтактнаяИнформация.АдресЭП КАК АдресЭП,
		|	ПартнерыКонтактнаяИнформация.ДоменноеИмяСервера КАК ДоменноеИмяСервера,
		|	ПартнерыКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
		|	ПартнерыКонтактнаяИнформация.НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
        |	ПартнерыКонтактнаяИнформация.CRM_ОсновнойДляСвязи КАК CRM_ОсновнойДляСвязи,
		|	ПартнерыКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК ВидРеквизитДопУпорядочивания,
		|	1 КАК ПорядокВремТаб
		|ПОМЕСТИТЬ ПартнерыКИ
		|ИЗ
		|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		|ГДЕ
		|	ПартнерыКонтактнаяИнформация.Ссылка = &Партнер
		|	И ПартнерыКонтактнаяИнформация.Вид.Родитель В(&Массив)";
		Если ЗначениеЗаполнено(ТипКонтактнойИнформации) Тогда
			ТекстВремТаблиц = ТекстВремТаблиц + "
			|	И ПартнерыКонтактнаяИнформация.Тип = &Тип";
		КонецЕсли;
		Если ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
			ТекстВремТаблиц = ТекстВремТаблиц + "
			|	И ПартнерыКонтактнаяИнформация.Вид = (&ВидКИ)";
		КонецЕсли;
		ТекстВремТаблиц = ТекстВремТаблиц + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	КонецЕсли;
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	КонтактныеЛицаПартнеровКИ.Ссылка КАК Ссылка,
		|	КонтактныеЛицаПартнеровКИ.Вид КАК Вид,
		|	КонтактныеЛицаПартнеровКИ.Тип КАК Тип,
		|	КонтактныеЛицаПартнеровКИ.ВидПредопределенный КАК ВидПредопределенный,
		|	КонтактныеЛицаПартнеровКИ.ИспользоватьДляОповещений КАК ИспользоватьДляОповещений,
		|	КонтактныеЛицаПартнеровКИ.Представление КАК Представление,
		|	КонтактныеЛицаПартнеровКИ.Значение КАК Значение,
		|	КонтактныеЛицаПартнеровКИ.ЗначенияПолей КАК ЗначенияПолей,
		|	КонтактныеЛицаПартнеровКИ.Страна КАК Страна,
		|	КонтактныеЛицаПартнеровКИ.Регион КАК Регион,
		|	КонтактныеЛицаПартнеровКИ.Город КАК Город,
		|	КонтактныеЛицаПартнеровКИ.АдресЭП КАК АдресЭП,
		|	КонтактныеЛицаПартнеровКИ.ДоменноеИмяСервера КАК ДоменноеИмяСервера,
		|	КонтактныеЛицаПартнеровКИ.НомерТелефона КАК НомерТелефона,
		|	КонтактныеЛицаПартнеровКИ.НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
        |	КонтактныеЛицаПартнеровКИ.CRM_ОсновнойДляСвязи КАК CRM_ОсновнойДляСвязи,
		|	КонтактныеЛицаПартнеровКИ.ВидРеквизитДопУпорядочивания КАК ВидРеквизитДопУпорядочивания,
		|	КонтактныеЛицаПартнеровКИ.ПорядокВремТаб КАК ПорядокВремТаб
		|ИЗ
		|	КонтактныеЛицаПартнеровКИ КАК КонтактныеЛицаПартнеровКИ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Партнер) Тогда
		Если НЕ ТекстЗапроса = "" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ПартнерыКИ.Ссылка КАК Ссылка,
		|	ПартнерыКИ.Вид КАК Вид,
		|	ПартнерыКИ.Тип КАК Тип,
		|	ПартнерыКИ.ВидПредопределенный КАК ВидПредопределенный,
		|	ПартнерыКИ.ИспользоватьДляОповещений КАК ИспользоватьДляОповещений,
		|	ПартнерыКИ.Представление КАК Представление,
		|	ПартнерыКИ.Значение КАК Значение,
		|	ПартнерыКИ.ЗначенияПолей КАК ЗначенияПолей,
		|	ПартнерыКИ.Страна КАК Страна,
		|	ПартнерыКИ.Регион КАК Регион,
		|	ПартнерыКИ.Город КАК Город,
		|	ПартнерыКИ.АдресЭП КАК АдресЭП,
		|	ПартнерыКИ.ДоменноеИмяСервера КАК ДоменноеИмяСервера,
		|	ПартнерыКИ.НомерТелефона КАК НомерТелефона,
		|	ПартнерыКИ.НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
        |	ПартнерыКИ.CRM_ОсновнойДляСвязи КАК CRM_ОсновнойДляСвязи,
		|	ПартнерыКИ.ВидРеквизитДопУпорядочивания КАК ВидРеквизитДопУпорядочивания,
		|	ПартнерыКИ.ПорядокВремТаб КАК ПорядокВремТаб
		|ИЗ
		|	ПартнерыКИ КАК ПартнерыКИ";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокВремТаб,
	|	CRM_ОсновнойДляСвязи УБЫВ,
	|	ИспользоватьДляОповещений УБЫВ,
	|	ВидРеквизитДопУпорядочивания";
	
	Запрос.Текст = ТекстВремТаблиц + ТекстЗапроса;
	Запрос.УстановитьПараметр("Партнер"			, Партнер);
	Запрос.УстановитьПараметр("КонтактноеЛицо"	, КонтактноеЛицо);
	Запрос.УстановитьПараметр("Массив"			, Массив);
	Запрос.УстановитьПараметр("Тип"				, ТипКонтактнойИнформации);
	Запрос.УстановитьПараметр("ВидКИ"			, ВидКонтактнойИнформации);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаКонтактнойИнформации Из Результат Цикл
		Если ПустаяСтрока(СтрокаКонтактнойИнформации.Значение) 
			 И ЗначениеЗаполнено(СтрокаКонтактнойИнформации.ЗначенияПолей) Тогда
			СтрокаКонтактнойИнформации.Значение =
				УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(СтрокаКонтактнойИнформации.ЗначенияПолей);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции // ПолучитьКонтактнуюИнформациюОбъекта()

// Функция преобразовывает строку в структуру полей.
//
// Параметры:
//  Данные	 - Строка - Строка  с данными. 
// 
// Возвращаемое значение:
//  Структура - Структура полей
//
Функция ПреобразоватьСтрокуВСтруктуруПолей(Данные) Экспорт
	
	Возврат УправлениеКонтактнойИнформациейСлужебный.СтрокуJSONВСтруктуру(Данные);
	
КонецФункции

// Разбирает контактную информацию по полям.
//
// Параметры:
//  Значение - Строка - Строка в формате JSON.
//	ТипКонтактнойИнформации - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации.
// 
// Возвращаемое значение:
//  Структура - Структура полей контактной информации.
//
Функция JSONВКонтактнуюИнформациюПоПолям(Значение, ТипКонтактнойИнформации) Экспорт
	
	Возврат УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(Значение, ТипКонтактнойИнформации);
	
КонецФункции

// Собирает контактную информацию из полей в строку.
//
// Параметры:
//  КонтактнаяИнформация - Структура - Структура полей контактной информации.
// 
// Возвращаемое значение:
//  Строка - Строка контактной информации.
//
Функция СтруктураВСтрокуJSON(КонтактнаяИнформация) Экспорт
	
	Возврат УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(КонтактнаяИнформация);
	
КонецФункции
	
// Функция формирует список контактной информации по переданным параметрам.
//
// Параметры:
//  СтруктураДанных	 - Структура -  Структура данных.
//  ТипКИ			 - ПеречислениеСсылка	- Тип контактной информации.
//  ВидКИ			 - ПеречислениеСсылка	- Вид контактной информации.
// 
// Возвращаемое значение:
//  СписокЗначений - Список с контактной информацией.
//
Функция СформироватьСписокКонтактнойИнформации(СтруктураДанных, ТипКИ, ВидКИ = Неопределено) Экспорт
	
	СписокКИ = Новый СписокЗначений;
	
	Если СтруктураДанных.Свойство("Партнер") Тогда
		Если НЕ ЗначениеЗаполнено(СтруктураДанных.Партнер) Тогда
			Возврат СписокКИ;
		Иначе
			Таб = ПолучитьКонтактнуюИнформациюОбъекта(СтруктураДанных.Партнер,
													?(ЗначениеЗаполнено(СтруктураДанных.КонтактноеЛицо), СтруктураДанных.КонтактноеЛицо, Неопределено), ТипКИ, ВидКИ);
		КонецЕсли;
	ИначеЕсли СтруктураДанных.Свойство("ОбъектКонтактнойИнформации") Тогда
		Если НЕ ЗначениеЗаполнено(СтруктураДанных.ОбъектКонтактнойИнформации) Тогда
			Возврат СписокКИ;
		Иначе
			Таб = ПолучитьКонтактнуюИнформациюПоТипуКИ(СтруктураДанных.ОбъектКонтактнойИнформации, ТипКИ);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Таб = Неопределено Тогда
		
		ТекСсылка = "";
		Для Каждого СтрокаТаб Из Таб Цикл
			
			СтруктураКИ = Новый Структура;
			Если НЕ ТекСсылка = СтрокаТаб.Ссылка Тогда
				
				Если (ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон)
					 ИЛИ (ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес) Тогда
					СтруктураКИ = ПреобразоватьСтрокуВСтруктуруПолей(СтрокаТаб.Значение);
				КонецЕсли;
				
				Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					СтруктураКИ.Вставить("Адрес" , СокрЛП(СтрокаТаб.АдресЭП));
				КонецЕсли;
				
				СтруктураКИ.Вставить("Представление"	, СтрокаТаб.Представление);
				СтруктураКИ.Вставить("Объект"			, СтрокаТаб.Ссылка);
				СписокКИ.Добавить(СтруктураКИ, Строка(СтрокаТаб.Ссылка), СтрокаТаб.ИспользоватьДляОповещений);
				ТекСсылка = СтрокаТаб.Ссылка;
			КонецЕсли;
			
			Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон
				 ИЛИ ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
				СтруктураКИ = ПреобразоватьСтрокуВСтруктуруПолей(СтрокаТаб.Значение);
			КонецЕсли;
			Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				СтруктураКИ.Вставить("Адрес" , СокрЛП(СтрокаТаб.АдресЭП));
			КонецЕсли;
			СтруктураКИ.Вставить("Представление"	, СтрокаТаб.Представление);
			СтруктураКИ.Вставить("Объект"			, СтрокаТаб.Ссылка);
			СписокКИ.Добавить(СтруктураКИ, "   " + СокрЛП(СтрокаТаб.Вид) + ": " + СтрокаТаб.Представление,
				 СтрокаТаб.ИспользоватьДляОповещений);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокКИ;
	
КонецФункции

// Функция получает контактную информацию объекта по типу контактной информации.
//
// Параметры:
//	ОбъектКонтактнойИнформации	- СправочникСсылка		- Объект, для которого получается контактная информация.
//	ТипИнформации				- ПеречислениеСсылка	- Тип контактной информации.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица контактной информации.
//
Функция ПолучитьКонтактнуюИнформациюПоТипуКИ(ОбъектКонтактнойИнформации, ТипИнформации) Экспорт
	Если ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Пользователи") Тогда
		ВидРодитель = Справочники.ВидыКонтактнойИнформации.СправочникПользователи;
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ВидРодитель = Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица;
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Организации") Тогда
		ВидРодитель = Справочники.ВидыКонтактнойИнформации.СправочникОрганизации;
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ВидРодитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров;
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		ВидРодитель = Справочники.ВидыКонтактнойИнформации.СправочникCRM_ПотенциальныеКлиенты;		
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Партнеры") Тогда
		ВидРодитель = Новый Массив;
		ВидРодитель.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
		УстановитьПривилегированныйРежим(Истина);
		ЮрФизЛицо = ОбъектКонтактнойИнформации.ЮрФизЛицо;
		УстановитьПривилегированныйРежим(Ложь);
		Если ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
			ВидРодитель.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания);
		Иначе
			ВидРодитель.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо);
		КонецЕсли;
		
	КонецЕсли;
	МетаданныеОбъекта = ОбъектКонтактнойИнформации.Метаданные();
	ИмяСпр = МетаданныеОбъекта.Имя;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель",	ВидРодитель);
	Запрос.УстановитьПараметр("Тип",		ТипИнформации);
	Запрос.УстановитьПараметр("Ссылка",		ОбъектКонтактнойИнформации);
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КонтактнаяИнформация.Ссылка,
	               |	КонтактнаяИнформация.НомерСтроки,
	               |	КонтактнаяИнформация.Тип,
	               |	КонтактнаяИнформация.Вид,
	               |	КонтактнаяИнформация.Вид.CRM_ИспользоватьДляОповещений КАК ИспользоватьДляОповещений,
	               |	КонтактнаяИнформация.Представление,
	               |	КонтактнаяИнформация.Значение,
	               |	КонтактнаяИнформация.ЗначенияПолей,
	               |	КонтактнаяИнформация.Страна,
	               |	КонтактнаяИнформация.Регион,
	               |	КонтактнаяИнформация.Город,
	               |	КонтактнаяИнформация.АдресЭП,
	               |	КонтактнаяИнформация.ДоменноеИмяСервера,
	               |	КонтактнаяИнформация.НомерТелефона,
	               |	КонтактнаяИнформация.НомерТелефонаБезКодов,
	               |	КонтактнаяИнформация.CRM_ОсновнойДляСвязи КАК CRM_ОсновнойДляСвязи,
	               |	КонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК ВидРеквизитДопУпорядочивания
	               |ИЗ
	               |	Справочник." + ИмяСпр + ".КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Вид.Родитель В(&Родитель)
	               |	И КонтактнаяИнформация.Тип = &Тип
	               |	И КонтактнаяИнформация.Ссылка = &Ссылка
	               |	И КонтактнаяИнформация.Представление <> """"
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КонтактнаяИнформация.CRM_ОсновнойДляСвязи УБЫВ,
	               |	ИспользоватьДляОповещений УБЫВ,
	               |	ВидРеквизитДопУпорядочивания";
				   
	Запрос.Текст = ТекстЗапроса;
	Если НЕ ЕстьРеквизитТабличнойЧастиОбъекта("CRM_ОсновнойДляСвязи", МетаданныеОбъекта, "КонтактнаяИнформация") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформация.CRM_ОсновнойДляСвязи УБЫВ,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформация.CRM_ОсновнойДляСвязи", "Ложь");
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаКонтактнойИнформации Из Результат Цикл
		Если ПустаяСтрока(СтрокаКонтактнойИнформации.Значение) 
			 И ЗначениеЗаполнено(СтрокаКонтактнойИнформации.ЗначенияПолей) Тогда
			СтрокаКонтактнойИнформации.Значение =
				УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(СтрокаКонтактнойИнформации.ЗначенияПолей);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьКонтактнуюИнформациюПоТипуКИ()

// Функция формирует список контактной информации заданного типа для переданных пользователей.
//  При передаче параметра ПолучатьПустые = Истина в список будут добавлены незаполненные виды контактной информации.
//
// Параметры:
//  Пользователи			 - СправочникСсылка,Массив - Объекты или объект, для которых получается контактная информация.
//  ТипКонтактнойИнформации	 - ПеречислениеСсылка	 - Тип контактной информации.
//  ПолучатьПустые			 - Булево - Получать пустые.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица контактной информации.
//
Функция ПолучитьКонтактнуюИнформациюПользователей(Пользователи = Неопределено, ТипКонтактнойИнформации,
												ПолучатьПустые = Ложь) Экспорт
	флПризнакСсылки = Истина;
	Если ТипЗнч(Пользователи) = Тип("Массив") Тогда
		флПризнакСсылки = Ложь;
	КонецЕсли;
	ТекстЗапроса = "";
	ТекстВременныхТаблиц = "";
	Если ПолучатьПустые Тогда 
		ТекстВременныхТаблиц = ТекстВременныхТаблиц + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Ссылка КАК Ссылка,
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	КонтактнаяИнформация.Представление КАК Представление
		|ПОМЕСТИТЬ КИ_Пользователи
		|ИЗ
		|	Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка" + ?(флПризнакСсылки, " = &Пользователи", " В(&Пользователи)") + "
		|	И КонтактнаяИнформация.Тип В(&Тип)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка,
		|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
		|	ВидыКонтактнойИнформации.Тип,
		|	ВидыКонтактнойИнформации.Предопределенный,
		|	ВидыКонтактнойИнформации.Родитель.Наименование
		|ПОМЕСТИТЬ ВидыКИ_По_Пользователи
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|		ПО (Пользователи.Ссылка" + ?(флПризнакСсылки, " = &Пользователи", " В(&Пользователи)") + ")
		|ГДЕ
		|	(НЕ ВидыКонтактнойИнформации.ЭтоГруппа)
		|	И (НЕ ВидыКонтактнойИнформации.ПометкаУдаления)
		|	И ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникПользователи)
		|	И ВидыКонтактнойИнформации.Тип В(&Тип)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыКИ.Ссылка,
		|	ВидыКИ.Вид,
		|	ВидыКИ.Тип,
		|	ВидыКИ.Предопределенный,
		|	ВидыКИ.РодительНаименование,
		|	КИ_Пользователи.Представление
		|ПОМЕСТИТЬ КИ_Пользователи_Итоговая
		|ИЗ
		|	ВидыКИ_По_Пользователи КАК ВидыКИ
		|		ЛЕВОЕ СОЕДИНЕНИЕ КИ_Пользователи КАК КИ_Пользователи
		|		ПО ВидыКИ.Ссылка = КИ_Пользователи.Ссылка
		|			И ВидыКИ.Вид = КИ_Пользователи.Вид
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	Иначе
		ТекстВременныхТаблиц = ТекстВременныхТаблиц + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Ссылка КАК Ссылка,
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	КонтактнаяИнформация.Тип КАК Тип,
		|	КонтактнаяИнформация.Вид.Предопределенный КАК Предопределенный,
		|	КонтактнаяИнформация.Представление КАК Представление
		|ПОМЕСТИТЬ КИ_Пользователи_Итоговая
		|ИЗ
		|	Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка" + ?(флПризнакСсылки, " = &Пользователи", " В(&Пользователи)") + "
		|	И КонтактнаяИнформация.Тип В(&Тип)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.Предопределенный КАК Предопределенный,
	|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК Представление,
	|	ВЫБОР
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ТОГДА 0
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ТОГДА 1
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс)
	|			ТОГДА 2
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 3
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница)
	|			ТОГДА 4
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое)
	|			ТОГДА 5
	|	КОНЕЦ КАК ПолеСортировки
	|ИЗ
	|	КИ_Пользователи_Итоговая КАК КонтактнаяИнформация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ПолеСортировки,
	|	Предопределенный УБЫВ";
	ТекстЗапроса = ТекстВременныхТаблиц + ТекстЗапроса;
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Пользователи",	Пользователи);
	Запрос.УстановитьПараметр("Тип",			ТипКонтактнойИнформации);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции // ПолучитьКонтактнуюИнформациюПользователей()

// Функция формирует список контактной информации заданного типа для переданных физ.лиц.
//  При передаче параметра ПолучатьПустые = Истина в список будут добавлены незаполненные виды контактной информации.
//
// Параметры:
//  ФизЛица			 - СправочникСсылка,Массив - Объекты или объект, для которых получается контактная информация.
//  ТипКонтактнойИнформации	 - ПеречислениеСсылка	 - Тип контактной информации.
//  ПолучатьПустые			 - Булево - Получать пустые.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица контактной информации.
//
Функция ПолучитьКонтактнуюИнформациюФизЛиц(ФизЛица = Неопределено, ТипКонтактнойИнформации,
												ПолучатьПустые = Ложь) Экспорт
	флПризнакСсылки = Истина;
	Если ТипЗнч(ФизЛица) = Тип("Массив") Тогда
		флПризнакСсылки = Ложь;
	КонецЕсли;
	ТекстЗапроса = "";
	ТекстВременныхТаблиц = "";
	Если ПолучатьПустые Тогда 
		ТекстВременныхТаблиц = ТекстВременныхТаблиц + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Ссылка КАК Ссылка,
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	КонтактнаяИнформация.Представление КАК Представление
		|ПОМЕСТИТЬ КИ_ФизическиеЛица
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка" + ?(флПризнакСсылки, " = &ФизЛица", " В(&ФизЛица)") + "
		|	И КонтактнаяИнформация.Тип В(&Тип)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Ссылка,
		|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
		|	ВидыКонтактнойИнформации.Тип,
		|	ВидыКонтактнойИнформации.Предопределенный,
		|	ВидыКонтактнойИнформации.Родитель.Наименование
		|ПОМЕСТИТЬ ВидыКИ_По_ФизическиеЛица
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|		ПО (ФизическиеЛица.Ссылка" + ?(флПризнакСсылки, " = &ФизЛица", " В(&ФизЛица)") + ")
		|ГДЕ
		|	(НЕ ВидыКонтактнойИнформации.ЭтоГруппа)
		|	И (НЕ ВидыКонтактнойИнформации.ПометкаУдаления)
		|	И ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникФизическиеЛица)
		|	И ВидыКонтактнойИнформации.Тип В(&Тип)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыКИ.Ссылка,
		|	ВидыКИ.Вид,
		|	ВидыКИ.Тип,
		|	ВидыКИ.Предопределенный,
		|	ВидыКИ.РодительНаименование,
		|	КИ_ФизическиеЛица.Представление
		|ПОМЕСТИТЬ КИ_ФизическиеЛица_Итоговая
		|ИЗ
		|	ВидыКИ_По_ФизическиеЛица КАК ВидыКИ
		|		ЛЕВОЕ СОЕДИНЕНИЕ КИ_ФизическиеЛица КАК КИ_ФизическиеЛица
		|		ПО ВидыКИ.Ссылка = КИ_ФизическиеЛица.Ссылка
		|			И ВидыКИ.Вид = КИ_ФизическиеЛица.Вид
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	Иначе
		ТекстВременныхТаблиц = ТекстВременныхТаблиц + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Ссылка КАК Ссылка,
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	КонтактнаяИнформация.Тип КАК Тип,
		|	КонтактнаяИнформация.Вид.Предопределенный КАК Предопределенный,
		|	КонтактнаяИнформация.Представление КАК Представление
		|ПОМЕСТИТЬ КИ_ФизическиеЛица_Итоговая
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка" + ?(флПризнакСсылки, " = &ФизЛица", " В(&ФизЛица)") + "
		|	И КонтактнаяИнформация.Тип В(&Тип)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.Предопределенный КАК Предопределенный,
	|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК Представление,
	|	ВЫБОР
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ТОГДА 0
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ТОГДА 1
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс)
	|			ТОГДА 2
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 3
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница)
	|			ТОГДА 4
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое)
	|			ТОГДА 5
	|	КОНЕЦ КАК ПолеСортировки
	|ИЗ
	|	КИ_ФизическиеЛица_Итоговая КАК КонтактнаяИнформация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ПолеСортировки,
	|	Предопределенный УБЫВ";
	ТекстЗапроса = ТекстВременныхТаблиц + ТекстЗапроса;
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ФизЛица",		ФизЛица);
	Запрос.УстановитьПараметр("Тип",			ТипКонтактнойИнформации);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции // ПолучитьКонтактнуюИнформациюФизЛиц()

// Функция возвращает контактных лиц контрагента по выбранному контрагенту.
//
// Параметры:
//	Партнер	- СправочникСсылка	- Контрагент, для которого выбираются контактные лица.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица контактных лиц.
//
Функция ПолучитьКонтактныхЛицКонтрагента(Партнер) Экспорт
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КонтактныеЛица.Ссылка КАК КонтактноеЛицо
	               |ИЗ
	               |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛица
	               |ГДЕ
	               |	(НЕ КонтактныеЛица.ПометкаУдаления)
	               |	И КонтактныеЛица.Владелец = &Партнер";
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции // ПолучитьКонтактныхЛицКонтрагента()

// Функция возвращает контактных лиц контрагента по выбранному контрагенту с основными данными.
//
// Параметры:
//	Партнер	- СправочникСсылка	- Контрагент, для которого выбираются контактные лица.
//	ТипыКИ	- Массив - массив типов контактной информации.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица контактных лиц.
//
Функция ПолучитьКонтактныхЛицКонтрагентаПодробно(Партнер, ТипыКИ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо,
	|	КонтактныеЛица.Представление КАК Представление,
	|	КонтактныеЛица.CRM_Должность КАК Должность,
	|	КонтактныеЛица.CRM_Состояние КАК Состояние,
	|	КонтактныеЛица.CRM_РольКонтактногоЛица КАК РольКонтактногоЛица,
	|	КонтактныеЛица.Автор КАК Автор,
	|	ЛОЖЬ КАК Основное,
	|	ЕСТЬNULL(CRM_ПорядокКонтактов.Порядок, 0) КАК Порядок,
	|	КонтактныеЛица.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ПорядокКонтактов КАК CRM_ПорядокКонтактов
	|		ПО КонтактныеЛица.Ссылка = CRM_ПорядокКонтактов.Контакт
	|		И КонтактныеЛица.Владелец = CRM_ПорядокКонтактов.Клиент
	|ГДЕ
	|	КонтактныеЛица.Владелец = &Партнер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА КонтактныеЛица.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен)
	|			ТОГДА 2
	|		КОГДА КонтактныеЛица.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.ВременноНеРаботает)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	КонтактныеЛица.ДатаРегистрацииСвязи";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	ТЗКонтактов = Запрос.Выполнить().Выгрузить();
	Строка500 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
	Для Каждого ТипКИ Из ТипыКИ Цикл
		ИмяТипаКИ = ПолучитьИмяЗначенияПеречисления(ТипКИ);
		ИмяКолонки = "КИТипа" + ИмяТипаКИ;
		ИмяКолонкиТип = "ТипКИ" + ИмяТипаКИ;
		ТЗКонтактов.Колонки.Добавить(ИмяКолонки, Строка500, Строка(ТипКИ));
		ТЗКонтактов.Колонки.Добавить(ИмяКолонкиТип, Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"));
		Для Каждого Контакт Из ТЗКонтактов Цикл
			КонтактнаяИнформация = ПолучитьКонтактнуюИнформациюПоТипуКИ(Контакт.КонтактноеЛицо, ТипКИ);
			Если КонтактнаяИнформация.Количество() > 0 Тогда
				Контакт[ИмяКолонки] = КонтактнаяИнформация[0].Представление;
				Контакт[ИмяКолонкиТип] = КонтактнаяИнформация[0].Тип;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТЗКонтактов;
	
КонецФункции // ПолучитьКонтактныхЛицКонтрагентаПодробно()

// Функция получить контактную информацию объекта для оповещений.
//
// Параметры:
//  ОбъектКонтактнойИнформации	 - СправочникСсылка	 - Объект контактной информации.
//  ВидКИ						 - СправочникСсылка	 - Вид контактой информации.
// 
// Возвращаемое значение:
//  Структура - Контактная информация. 
//
Функция ПолучитьКонтактнуюИнформациюОбъектаДляОповещений(ОбъектКонтактнойИнформации, ВидКИ) Экспорт
	
	МетаданныеОбъекта = ОбъектКонтактнойИнформации.Метаданные();
	ИмяСпр = МетаданныеОбъекта.Имя;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",		ОбъектКонтактнойИнформации);
	ТекстЗапроса = "ВЫБРАТЬ
	               |	КонтактнаяИнформация.Ссылка,
	               |	КонтактнаяИнформация.НомерСтроки,
	               |	КонтактнаяИнформация.Тип,
	               |	КонтактнаяИнформация.Вид,
	               |	КонтактнаяИнформация.Вид.CRM_ИспользоватьДляОповещений КАК ИспользоватьДляОповещений,
	               |	КонтактнаяИнформация.Представление,
	               |	КонтактнаяИнформация.ЗначенияПолей,
	               |	КонтактнаяИнформация.Страна,
	               |	КонтактнаяИнформация.Регион,
	               |	КонтактнаяИнформация.Город,
	               |	КонтактнаяИнформация.АдресЭП,
	               |	КонтактнаяИнформация.ДоменноеИмяСервера,
	               |	КонтактнаяИнформация.НомерТелефона,
	               |	КонтактнаяИнформация.НомерТелефонаБезКодов,
	               |	КонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК ВидРеквизитДопУпорядочивания
	               |ИЗ
	               |	Справочник." + ИмяСпр + ".КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Ссылка = &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КонтактнаяИнформация.CRM_ОсновнойДляСвязи УБЫВ,
	               |	ВидРеквизитДопУпорядочивания,
	               |	ИспользоватьДляОповещений УБЫВ";
	Запрос.Текст = ТекстЗапроса;
	Если НЕ ЕстьРеквизитТабличнойЧастиОбъекта("CRM_ОсновнойДляСвязи", МетаданныеОбъекта, "КонтактнаяИнформация") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформация.CRM_ОсновнойДляСвязи УБЫВ,", "");
	КонецЕсли;
	ТаблицаКИ = Запрос.Выполнить().Выгрузить();
	
	СтруктураВозврата = Новый Структура;
	
	Для Каждого КлючИЗначение Из ВидКИ Цикл
		СтруктураВозврата.Вставить(КлючИЗначение.Ключ, "");
		
		СтрокаКИ = ТаблицаКИ.Найти(КлючИЗначение.Значение, "Вид");
		Если НЕ СтрокаКИ = Неопределено Тогда
			СтруктураВозврата[КлючИЗначение.Ключ] = СтрокаКИ.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Процедура изменяет значение реквизита "CRM_Основной" у вида контактной информации.
//
// Параметры:
//	ВидКИ				- СправочникСсылка	- Вид контактной информации.
//	ЗначениеОсновной	- Булево			- Значение реквизита "CRM_Основной".
//
Процедура ИзменитьПризнакВидаКИОсновной(ВидКИ, ЗначениеОсновной = Ложь) Экспорт
	СправочникОбъект = ВидКИ.ПолучитьОбъект();
	СправочникОбъект.ОтображатьВсегда = ЗначениеОсновной;
	СправочникОбъект.Записать();
КонецПроцедуры	

// Функция получает контактную информацию объекта по типу контактной информации.
//
// Параметры:
//	ОбъектКонтактнойИнформации	- СправочникСсылка		- Объект, для которого получается контактная информация.
//	ТипИнформации				- ПеречислениеСсылка	- Тип контактной информации.
//
// Возвращаемое значение:
//	Массив	- Массив структур контактной информации.
//
Функция ПолучитьМассивКонтактнойИнформацииПоТипуКИ(ОбъектКонтактнойИнформации, ТипИнформации) Экспорт
	Возврат CRM_РабочийСтолСервер.ТаблицаВМассивСтруктур(ПолучитьКонтактнуюИнформациюПоТипуКИ(ОбъектКонтактнойИнформации,
		 ТипИнформации));
КонецФункции // ПолучитьМассивКонтактнойИнформацииПоТипуКИ()

#КонецОбласти // РаботаСКонтактнойИнформацией

#Область ФормированиеПредставленийИОписаний
	
// Функция возвращает представление реквизита Предмет документа.
//
// Параметры:
//  ПредметДокумента	- Ссылка	- Ссылка на предмет документа.
//
// Возвращаемое значение:
//	Строка	- Представление предмета документа.
//
Функция ПолучитьПредставлениеПредметаДокумента(ПредметДокумента) Экспорт
	
	Если (НЕ ПредметДокумента = Неопределено) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПредметДокумента)) Тогда
		бПредметДоступен = ОбщегоНазначения.СсылкаСуществует(ПредметДокумента);
	Иначе
		бПредметДоступен = Ложь;
	КонецЕсли;
	
	Если бПредметДоступен Тогда
		ПредставлениеПредмета = "";
		Если ЗначениеЗаполнено(ПредметДокумента) Тогда
			
			Если ТипЗнч(ПредметДокумента) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
				Если ПредметДокумента.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.Этап Тогда
					ПредставлениеПредмета = НСтр("ru='Задача проекта (""'") + ПредметДокумента.Тема + НСтр("ru='"",
						| с '") + Формат(ПредметДокумента.ПлановаяДатаНачала, "ДФ=dd.MM.yyyy") + НСтр("ru=' по '") 
						+ Формат(ПредметДокумента.ПлановаяДатаОкончания, "ДФ=dd.MM.yyyy") + ")";
				Иначе
					ПредставлениеПредмета = НСтр("ru='Контрольная точка (""'") + ПредметДокумента.Тема 
						+ НСтр("ru='"", на '") + Формат(ПредметДокумента.ПлановаяДатаНачала, "ДФ=dd.MM.yyyy") + ")";
				КонецЕсли;
				Возврат ПредставлениеПредмета;
			КонецЕсли;
			
			МетаданныеПредмета = ПредметДокумента.Метаданные();
			ПолноеИмя = МетаданныеПредмета.ПолноеИмя();
			Если СтрНайти(ПолноеИмя, "Документ.") Или СтрНайти(ПолноеИмя, "Задача.") Тогда
				Если ПустаяСтрока(МетаданныеПредмета.РасширенноеПредставлениеОбъекта) Тогда
					Если ПустаяСтрока(МетаданныеПредмета.ПредставлениеОбъекта) Тогда
						ПредставлениеПредмета = МетаданныеПредмета.Синоним;
					Иначе
						ПредставлениеПредмета = МетаданныеПредмета.ПредставлениеОбъекта;
					КонецЕсли;
				Иначе
					ПредставлениеПредмета = МетаданныеПредмета.РасширенноеПредставлениеОбъекта;
				КонецЕсли;
				ПредставлениеПредмета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 от %2'"),
					 ПредставлениеПредмета,
																								Формат(ПредметДокумента.Дата, "ДФ ='дд.ММ.гггг ЧЧ:мм'"));
				Если ЕстьРеквизитДокумента("Партнер", МетаданныеПредмета) И ЗначениеЗаполнено(ПредметДокумента.Партнер) Тогда
					ПредставлениеПредмета = ПредставлениеПредмета + " / " + СокрЛП(ПредметДокумента.Партнер);		
				КонецЕсли;
				Если ЕстьРеквизитДокумента("КонтактноеЛицо", МетаданныеПредмета)
					 И ЗначениеЗаполнено(ПредметДокумента.КонтактноеЛицо) Тогда
					ПредставлениеПредмета = ПредставлениеПредмета + " (" + СокрЛП(ПредметДокумента.КонтактноеЛицо) + ")";		
				КонецЕсли;
			Иначе
				ПредставлениеПредмета = Строка(ПредметДокумента);
			КонецЕсли;
		КонецЕсли;
	Иначе	
		ПредставлениеПредмета = НСтр("ru='[Предмет недоступен]'");
	КонецЕсли;
	Возврат ПредставлениеПредмета;
КонецФункции // ПолучитьПредставлениеПредметаДокумента()

// Функция возвращает представление реквизита Предмет документа.
//
// Параметры:
//  ПредметДокумента	- Ссылка	- Ссылка на предмет документа.
//
// Возвращаемое значение:
//	Строка	- Представление предмета документа.
//
Функция ПолучитьПредставлениеПредметаДокументаИсходящееПисьмо(ПредметДокумента) Экспорт
	
	ПредставлениеПредмета = "";
	Если ЗначениеЗаполнено(ПредметДокумента) Тогда
		МетаданныеПредмета = ПредметДокумента.Метаданные();
		ПолноеИмя = МетаданныеПредмета.ПолноеИмя();
		Если СтрНайти(ПолноеИмя, "Документ.") Или СтрНайти(ПолноеИмя, "Задача.") Тогда
			Если ПустаяСтрока(МетаданныеПредмета.РасширенноеПредставлениеОбъекта) Тогда
				Если ПустаяСтрока(МетаданныеПредмета.ПредставлениеОбъекта) Тогда
					ПредставлениеПредмета = МетаданныеПредмета.Синоним;
				Иначе
					ПредставлениеПредмета = МетаданныеПредмета.ПредставлениеОбъекта;
				КонецЕсли;
			Иначе
				ПредставлениеПредмета = МетаданныеПредмета.РасширенноеПредставлениеОбъекта;
			КонецЕсли;
			ПредставлениеПредмета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 от %2'"),
				 ПредставлениеПредмета,
			Формат(ПредметДокумента.Дата, "ДФ ='дд.ММ.гггг ЧЧ:мм'"));
			Если ЕстьРеквизитДокумента("Партнер", МетаданныеПредмета) И ЗначениеЗаполнено(ПредметДокумента.Партнер) Тогда
				ПредставлениеПредмета = ПредставлениеПредмета + " / " + СокрЛП(ПредметДокумента.Партнер);		
			КонецЕсли;
			Если ЕстьРеквизитДокумента("КонтактноеЛицо", МетаданныеПредмета)
				 И ЗначениеЗаполнено(ПредметДокумента.КонтактноеЛицо) Тогда
				ПредставлениеПредмета = ПредставлениеПредмета + " (" + СокрЛП(ПредметДокумента.КонтактноеЛицо) + ")";		
			КонецЕсли;
		Иначе
			ПредставлениеПредмета = Строка(ПредметДокумента);
		КонецЕсли;
	КонецЕсли;
	Возврат ПредставлениеПредмета;
	
КонецФункции // ПолучитьПредставлениеПредметаДокумента()

// Функция возвращает заголовок формы документа.
//
// Параметры:
//	Документ 		- ДокументСсылка	- Ссылка на документ.
//	Представление 	- Строка			- Строка представления.
//
// Возвращаемое значение:
//	Строка	- Заголовок формы документа.
//
Функция ПолучитьЗаголовокФормыДокумента(Документ, Представление = "") Экспорт
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")
			И ТипЗнч(Представление) = Тип("Структура") Тогда

		НовоеПисьмо = "";
		Если Документ.Пустая() Тогда
			НовоеПисьмо = НСтр("ru = 'Новое письмо'");
		КонецЕсли;
		
		ЗаписанноеПисьмоБезТемы = ПустаяСтрока(Представление.Тема) И ПустаяСтрока(НовоеПисьмо);
		ТемаПисьма = ?(ЗаписанноеПисьмоБезТемы, НСтр("ru='<Без Темы>'"), Представление.Тема);
		
		УНовогоПисьмаЗаполненаТема = ЗначениеЗаполнено(НовоеПисьмо) И ЗначениеЗаполнено(ТемаПисьма);		
		ЕстьДополнительнаяИнформация = ЗначениеЗаполнено(Представление.УчетнаяЗапись)
										ИЛИ ЗначениеЗаполнено(Представление.Папка);
		ЗаполненаВсяДополнительнаяИнформация = ЗначениеЗаполнено(Представление.УчетнаяЗапись)
												И ЗначениеЗаполнено(Представление.Папка);
		
		// Тема (Учетная запись, Название папки)
		ЗаголовокФормы = НовоеПисьмо
						+ ?(УНовогоПисьмаЗаполненаТема, " ", "") + ТемаПисьма
						+ ?(ЕстьДополнительнаяИнформация, " (", "")
						+ Представление.УчетнаяЗапись
						+ ?(ЗаполненаВсяДополнительнаяИнформация, ", ", "")
						+ Представление.Папка
						+ ?(ЕстьДополнительнаяИнформация, ")", "");
		
	Иначе
		МетаданныеДокумента = Документ.Метаданные();
		Если ПустаяСтрока(МетаданныеДокумента.РасширенноеПредставлениеОбъекта) Тогда
			Если ПустаяСтрока(МетаданныеДокумента.ПредставлениеОбъекта) Тогда
				ЗаголовокФормы = МетаданныеДокумента.Синоним;
			Иначе
				ЗаголовокФормы = МетаданныеДокумента.ПредставлениеОбъекта;
			КонецЕсли;
		Иначе
			ЗаголовокФормы = МетаданныеДокумента.РасширенноеПредставлениеОбъекта;	
		КонецЕсли;
		Если ЗначениеЗаполнено(Документ) Тогда
			ЗаголовокФормы = ЗаголовокФормы + " от " + Формат(Документ.Дата, "ДФ ='дд.ММ.гггг ЧЧ:мм'");
		Иначе
			ЗаголовокФормы = ЗаголовокФормы + " (создание)";
		КонецЕсли;
	КонецЕсли;
	Возврат ЗаголовокФормы;
КонецФункции // ПолучитьЗаголовокФормыДокумента()

// Функция возвращает строку ФИО после склонения в выбранном падеже.
//
// Параметры:
//	ФИО		- Строка			- Фамилия, имя, отчество.
//	Падеж	- Строка			- Падеж склонения.
//	Пол		- ПеречислениеСсылка	- Пол (мужской / женский).
//
// Возвращаемое значение:
//	Строка	- Строка после склонения.
//
Функция Склонение(Знач ФИО, Знач Падеж, Знач Пол = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФИО) Тогда
		Возврат "";
	КонецЕсли;
	
	Попытка
		// Загружаем внешнюю компоненту.
		ПодключитьВнешнююКомпоненту("ОбщийМакет.CRM_NameDecl", "Decl", ТипВнешнейКомпоненты.Native);
		Компонента = Новый("AddIn.Decl.CNameDecl");
	Исключение
		// Не удалось выполнить операции с внешней компонентой.
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка загрузки компоненты для склонения ФИО! Функции склонения недоступны!'"));
		Возврат Неопределено;
	КонецПопытки;
	
	// Преобразуем падеж для передачи в метод внешней компоненты.
	Падеж = ВРег(Лев(СокрЛП(Падеж), 1));
	Если Падеж = "Р" Тогда
		Падеж = 2;
	ИначеЕсли Падеж = "Д" Тогда
		Падеж = 3;
	ИначеЕсли Падеж = "В" Тогда
		Падеж = 4;
	ИначеЕсли Падеж = "Т" Тогда
		Падеж = 5;
	ИначеЕсли Падеж = "П" Тогда
		Падеж = 6;
	Иначе
		Падеж = 1;
	КонецЕсли;
	// Преобразуем пол для передачи в метод внешней компоненты.
	Если Пол = Неопределено Тогда
		Пол = 0;
	Иначе
		Если Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
			Пол = 1;
		ИначеЕсли Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
			Пол = 2;
		Иначе
			Пол = 0;
		КонецЕсли;
	КонецЕсли;
	// Вызываем метод внешней компоненты.
	Попытка
		ФИОПослеСклонения = Компонента.Просклонять(ФИО, Падеж, Пол);
	Исключение
		ФИОПослеСклонения = ФИО;
	КонецПопытки;	
	Возврат ФИОПослеСклонения;
КонецФункции // Склонение()

#КонецОбласти // ФормированиеПредставленийИОписаний

#Область УправлениеПроведением
	
// Процедура выполняет инициализацию дополнительных свойств для проведения документа.
//
// Параметры:
//	ДокументСсылка					- ДокументСсылка	- Документ
//	СтруктураДополнительныеСвойства	- Структура			- Структура дополнительных свойств.
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения",
	// "УчетнаяПолитика".
	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	СтруктураДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);
	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	СтруктураДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении 
	// которого хранится менеджер временных таблиц.
	// Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение 
	// (признак наличия записей во временной таблице).
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы",
		Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента", ДокументСсылка.Метаданные());
	// "УчетнаяПолитика" - структура, содержащая значения всех параметров учетной политики 
	// на момент времени документа
	// и по выбранной в документе организации или по компании (в случае ведения учета по компании).	
	СтруктураДополнительныеСвойства.Вставить("УчетнаяПолитика", Новый Структура);
	// Запрос, получающий данные документа.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Документ_.Ссылка КАК Ссылка,
	|	_Документ_.Номер КАК Номер,
	|	_Документ_.Дата КАК Дата,
	|   " 
		+ ?(СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено,
			 "_Документ_.Организация" , "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)") 
			+ " КАК Организация,
	|	_Документ_.МоментВремени КАК МоментВремени,
	|	_Документ_.Представление КАК Представление
	|ИЗ
	|	Документ." + СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Имя + " КАК _Документ_
	|ГДЕ
	|	_Документ_.Ссылка = &ДокументСсылка");
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	// Формирование ключей, содержащих данные документа.
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СтруктураДополнительныеСвойства.ДляПроведения.Вставить(Колонка.Имя);
	КонецЦикла;
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	// Заполнение значений для ключей, содержащих данные документа.
	ЗаполнитьЗначенияСвойств(СтруктураДополнительныеСвойства.ДляПроведения, ВыборкаИзРезультатаЗапроса);
	// Определение и установка значения момента, на который должен быть выполнен контроль документа.
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("МоментКонтроля", Дата('00010101'));
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ПериодКонтроля", Дата("39991231"));	
	// Установка организации в случае ведения учета по компании.
	// Запрос, получающий данные учетной политики.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Константы.ИспользоватьХарактеристикиНоменклатуры КАК ИспользоватьХарактеристики
	|ИЗ
	|	Константы КАК Константы");
	РезультатЗапроса = Запрос.Выполнить();
	// Формирование ключей, содержащих данные учетной политики.
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СтруктураДополнительныеСвойства.УчетнаяПолитика.Вставить(Колонка.Имя);
	КонецЦикла;
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	// Заполнение значений для ключей, содержащих данные учетной политики.
	ЗаполнитьЗначенияСвойств(СтруктураДополнительныеСвойства.УчетнаяПолитика, ВыборкаИзРезультатаЗапроса);
КонецПроцедуры // ИнициализироватьДополнительныеСвойстваДляПроведения()

// Процедура выполняет подготовку наборов записей документа.
//
//	Параметры:
//	СтруктураОбъект	- Структура	- Структура документа.
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(СтруктураОбъект) Экспорт
	
	Для каждого НаборЗаписей Из СтруктураОбъект.Движения Цикл
		
		Если ТипЗнч(НаборЗаписей) = Тип("КлючИЗначение") Тогда
			
			НаборЗаписей = НаборЗаписей.Значение;
			
		КонецЕсли;
		
		Если НаборЗаписей.Количество() > 0 Тогда
			
			НаборЗаписей.Очистить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивИменРегистров = ПолучитьМассивИменИспользуемыхРегистров(СтруктураОбъект.Ссылка,
		 СтруктураОбъект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента);
	
	Для каждого ИмяРегистра Из МассивИменРегистров Цикл
		
		СтруктураОбъект.Движения[ИмяРегистра].Записывать = Истина;
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьНаборыЗаписейКРегистрацииДвижений()

// Процедура записывает наборы записей документа.
//
//	Параметры:
//	СтруктураОбъект	- Структура	- Структура документа.
//
Процедура ЗаписатьНаборыЗаписей(СтруктураОбъект) Экспорт
	Для Каждого НаборЗаписей Из СтруктураОбъект.Движения Цикл
		Если ТипЗнч(НаборЗаписей) = Тип("КлючИЗначение") Тогда
			НаборЗаписей = НаборЗаписей.Значение;
		КонецЕсли;
		Если НаборЗаписей.Записывать Тогда
			Если НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("ДляПроведения") Тогда
				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
			КонецЕсли;
			Если НЕ НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда
				НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы",
					СтруктураОбъект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы);
			КонецЕсли;
			НаборЗаписей.Записать();
			НаборЗаписей.Записывать = Ложь;
		Иначе
			Если Метаданные.РегистрыНакопления.Содержит(НаборЗаписей.Метаданные()) Тогда
                // BSLLS:MissingCodeTryCatchEx-off
				Попытка
					РегистрыНакопления[НаборЗаписей.Метаданные().Имя].СоздатьПустуюВременнуюТаблицуИзменение(СтруктураОбъект.ДополнительныеСвойства);
				Исключение
				КонецПопытки;
				// BSLLS:MissingCodeTryCatchEx-on
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ЗаписатьНаборыЗаписей()

#КонецОбласти // УправлениеПроведением

#Область ДвиженияРегистров

// Процедура выполняет движения регистра накопления РасчетыСКонтрагентами.
//
// Параметры:
//	ДополнительныеСвойства	- Структура			- Структура дополнительных свойств.
//	Движения				- КоллекцияДвижений - Движения регистра.
//	Отказ					- Булево			- Признак отмены.
//
Процедура ОтразитьРасчетыСПокупателями(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасчетыСПокупателями = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПокупателями;
	
	Если Отказ ИЛИ ТаблицаРасчетыСПокупателями.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРасчетыСПокупателями = Движения.CRM_РасчетыСПокупателями;
	ДвиженияРасчетыСПокупателями.Записывать = Истина;
	ДвиженияРасчетыСПокупателями.Загрузить(ТаблицаРасчетыСПокупателями);
	
КонецПроцедуры // ОтразитьРасчетыСПокупателями()

// Процедура выполняет движения по регистру Продажи.
//
// Параметры:
//	ДополнительныеСвойства	- Структура			- Структура дополнительных свойств.
//	Движения				- КоллекцияДвижений - Движения регистра.
//	Отказ					- Булево			- Признак отмены.
//
Процедура ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаПродажи = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи;
	
	Если Отказ ИЛИ ТаблицаПродажи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПродажи = Движения.CRM_Продажи;
	ДвиженияПродажи.Записывать = Истина;
	ДвиженияПродажи.Загрузить(ТаблицаПродажи);
	
КонецПроцедуры // ОтразитьПродажи()

// Процедура выполняет движения по регистру Предложения.
//
// Параметры:
//	ДополнительныеСвойства	- Структура			- Структура дополнительных свойств.
//	Движения				- КоллекцияДвижений - Движения регистра.
//	Отказ					- Булево			- Флаг отмены.
//
Процедура ОтразитьПредложения(ДополнительныеСвойства, Движения, Отказ) Экспорт
	ТаблицаПредложения = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПредложения;
	Если Отказ ИЛИ ТаблицаПредложения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ДвиженияПредложения = Движения.CRM_Предложения;
	ДвиженияПредложения.Записывать = Истина;
	ДвиженияПредложения.Загрузить(ТаблицаПредложения);
КонецПроцедуры // ОтразитьПродажи()

// Процедура выполняет движения по регистру CRM_РабочееВремя.
//
// Параметры:
//	ДополнительныеСвойства	- Структура			- Структура дополнительных свойств.
//	Движения				- КоллекцияДвижений - Движения регистра.
//	Отказ					- Булево			- Флаг отмены.
//
Процедура ОтразитьРабочееВремя(ДополнительныеСвойства, Движения, Отказ) Экспорт
	ТаблицаРабочееВремя = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРабочееВремя;
	Если Отказ ИЛИ ТаблицаРабочееВремя.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ДвиженияПредложения = Движения.CRM_РабочееВремя;
	ДвиженияПредложения.Записывать = Истина;
	ДвиженияПредложения.Загрузить(ТаблицаРабочееВремя);
КонецПроцедуры // ОтразитьРабочееВремя()

// Процедура выполняет движения по регистру CRM_Планирование.
//
// Параметры:
//	ДополнительныеСвойства	- Структура			- Структура дополнительных свойств.
//	Движения				- КоллекцияДвижений - Движения регистра.
//	Отказ					- Булево			- Флаг отмены.
//
Процедура ОтразитьПланирование(ДополнительныеСвойства, Движения, Отказ) Экспорт
	// ТаблицаПланирование = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПланирование;
	// Если Отказ ИЛИ ТаблицаПланирование.Количество() = 0 Тогда Возврат; КонецЕсли;
	// ДвиженияПредложения = Движения.CRM_Планирование;
	// ДвиженияПредложения.Записывать = Истина;
	// ДвиженияПредложения.Загрузить(ТаблицаПланирование);
КонецПроцедуры // ОтразитьРабочееВремя()

// Процедура выполняет движения по регистру CRM_ПланыПоВоронкамПродаж.
//
// Параметры:
//	ДополнительныеСвойства	- Структура			- Структура дополнительных свойств.
//	Движения				- КоллекцияДвижений - Движения регистра.
//	Отказ					- Булево			- Флаг отмены.
//
Процедура ОтразитьПланированиеВоронкиПродаж(ДополнительныеСвойства, Движения, Отказ) Экспорт
	ТаблицаПланирование = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПланирование;
	Если Отказ ИЛИ ТаблицаПланирование.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ДвиженияПредложения = Движения.CRM_ПланыПоВоронкамПродаж;
	ДвиженияПредложения.Записывать = Истина;
	ДвиженияПредложения.Загрузить(ТаблицаПланирование);
КонецПроцедуры // ОтразитьРабочееВремя()

#КонецОбласти // ДвиженияРегистров

#Область КалендариИКалендарныерафиками
	
// Функция возвращает заданный в настройках системы производственный календарь.
//
// Возвращаемое значение:
//	СправочникСсылка.Календари - основной производственный календарь.
//
Функция ПолучитьОсновнойПроизводственныйКалендарь() Экспорт
	Возврат Константы.ОсновнойКалендарьПредприятия.Получить();
КонецФункции

// Функция возвращает соответствие дат структурам с данными, описывающими календарную дату.
//
// Параметры:
//	ДатаИлиМассивДат			- Дата, Массив					- Дата или массив дат для которых требуется получить описания.
//	ПроизводственныйКалендарь	- СправочникСсылка.Календари	- Используемый календарь.
//	ПользовательИлиОрганизация	- СправочникСсылка				- Пользователи или Организации.
//
// Возвращаемое значение:
//	Соответствие	- Соответствие с ключем Дата и значением Структура.
//
Функция ПолучитьСоответствиеКалендарныхГрафиков(ДатаИлиМассивДат,
	 ПроизводственныйКалендарь = Неопределено,
	 ПользовательИлиОрганизация = Неопределено) Экспорт
	КоличествоСекундВДне = 24 * 60 * 60;
	
	Если ТипЗнч(ДатаИлиМассивДат) = Тип("Массив") Тогда
		МассивДат = ДатаИлиМассивДат;
	Иначе
		МассивДат = Новый Массив();
		МассивДат.Добавить(ДатаИлиМассивДат);
	КонецЕсли;
	
	Если МассивДат.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПроизводственныйКалендарь = Неопределено Тогда
		ПроизводственныйКалендарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПроизводственныйКалендарь) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МинимальнаяДата = Неопределено;
	МаксимальнаяДата = Неопределено;
	Для Каждого ЗначениеДата Из МассивДат Цикл
		Если МинимальнаяДата = Неопределено Тогда
			МинимальнаяДата = ЗначениеДата;
		КонецЕсли;
		Если МаксимальнаяДата = Неопределено Тогда
			МаксимальнаяДата = ЗначениеДата;
		КонецЕсли;
		
		МинимальнаяДата = Мин(МинимальнаяДата, ЗначениеДата);
		МаксимальнаяДата = Макс(МаксимальнаяДата, ЗначениеДата);
	КонецЦикла;
	
	МинимальнаяДата = НачалоДня(МинимальнаяДата);
	МаксимальнаяДата = НачалоДня(МаксимальнаяДата);
	
	СоответствиеРезультат = Новый Соответствие();
	
	МассивДней = Новый Массив();
	ТекДата = НачалоДня(МинимальнаяДата);
	нСчетчикДней = 1;
	Пока ТекДата <= МаксимальнаяДата Цикл
		МассивДней.Добавить(нСчетчикДней);
		нСчетчикДней = нСчетчикДней + 1;
		
		СтруктураОписаниеГрафикаДня = Новый Структура(
		"ДатаДень,
		|ДеньРабочийПоПроизводственномуКалендарю,
		|ДеньРабочийДляРесурса,
		|МассивПериодов");
		
		СтруктураОписаниеГрафикаДня.ДатаДень = ТекДата;
		СтруктураОписаниеГрафикаДня.ДеньРабочийПоПроизводственномуКалендарю = Истина;
		СтруктураОписаниеГрафикаДня.ДеньРабочийДляРесурса = Истина;
		СтруктураОписаниеГрафикаДня.МассивПериодов = Неопределено;
		
		СоответствиеРезультат.Вставить(ТекДата, СтруктураОписаниеГрафикаДня);
		
		ТекДата = ТекДата + КоличествоСекундВДне;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика,
	|	КалендарныеГрафики.ДеньВключенВГрафик КАК ДеньВключенВГрафик
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.ДатаГрафика МЕЖДУ &МинимальнаяДата И &МаксимальнаяДата
	|	И КалендарныеГрафики.Календарь = &ПроизводственныйКалендарь
	|");
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь",	ПроизводственныйКалендарь);
	Запрос.УстановитьПараметр("МинимальнаяДата",			МинимальнаяДата);
	Запрос.УстановитьПараметр("МаксимальнаяДата",			МаксимальнаяДата);
	Выборка = Запрос.Выполнить().Выбрать();
	МассивРабочихДнейПоПроизводственномуГрафику = Новый Массив();
	МассивНеРабочихДнейПоПроизводственномуГрафику = Новый Массив();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ДеньВключенВГрафик Тогда
			МассивРабочихДнейПоПроизводственномуГрафику.Добавить(НачалоДня(Выборка.ДатаГрафика));
		Иначе
			МассивНеРабочихДнейПоПроизводственномуГрафику.Добавить(НачалоДня(Выборка.ДатаГрафика));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючЗначение Из СоответствиеРезультат Цикл
		ДатаДень = КлючЗначение.Ключ;
		
		Если МассивРабочихДнейПоПроизводственномуГрафику.Найти(ДатаДень) <> Неопределено Тогда
			СоответствиеРезультат[ДатаДень].ДеньРабочийПоПроизводственномуКалендарю = Истина;
		ИначеЕсли МассивНеРабочихДнейПоПроизводственномуГрафику.Найти(ДатаДень) <> Неопределено Тогда
			СоответствиеРезультат[ДатаДень].ДеньРабочийПоПроизводственномуКалендарю = Ложь;
		Иначе
			// Если график не заполнен - дни считаются рабочими.
			СоответствиеРезультат[ДатаДень].ДеньРабочийПоПроизводственномуКалендарю = Истина;
		КонецЕсли;
		
		СоответствиеРезультат[ДатаДень].ДеньРабочийДляРесурса =
			СоответствиеРезультат[ДатаДень].ДеньРабочийПоПроизводственномуКалендарю;
	КонецЦикла;
	
	Возврат СоответствиеРезультат;
КонецФункции

// Функция возвращает структуру с рабочим временем пользователя.
//
// Параметры:
//  Пользователь				 - СправочникСсылка	 - Пользователь
//  ПолучитьЗначенияПоУмолчанию	 - Булево			 - Признак получения значения по умолчанию.
//  НеУчитыватьОбеденныйПерерыв	 - Булево			 - Признак не учитывать обеденный перерыв.
// 
// Возвращаемое значение:
//  Структура - Структура с рабочими временами пользователя.
//
Функция ПолучитьСтруктуруРабочихВременПользователя(Пользователь = Неопределено,
	 ПолучитьЗначенияПоУмолчанию = Ложь,
	 НеУчитыватьОбеденныйПерерыв = Ложь) Экспорт
	Если Пользователь = Неопределено И НЕ ПолучитьЗначенияПоУмолчанию Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Результат = Новый Структура("ВремяНачалаРабочегоДня,ВремяОкончанияРабочегоДня,
		|ВремяНачалаОбеденногоПерерыва,
		|ВремяОкончанияОбеденногоПерерыва");
	
	бПолучитьЗначенияПоУмолчанию = (ПолучитьЗначенияПоУмолчанию Или Пользователь = Неопределено);
	
	Если Не бПолучитьЗначенияПоУмолчанию Тогда
		Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			Результат.ВремяНачалаРабочегоДня			= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
				 "ВремяНачалаРабочегоДня");
			Результат.ВремяОкончанияРабочегоДня			= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
				 "ВремяОкончанияРабочегоДня");
			Результат.ВремяНачалаОбеденногоПерерыва		= ?(НеУчитыватьОбеденныйПерерыв, Дата("00010101"),
				 CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
				 "ВремяНачалаОбеденногоПерерыва"));
			Результат.ВремяОкончанияОбеденногоПерерыва	= ?(НеУчитыватьОбеденныйПерерыв, Дата("00010101"),
				 CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
				 "ВремяОкончанияОбеденногоПерерыва"));
			
			Если	Не ЗначениеЗаполнено(Результат.ВремяНачалаРабочегоДня)
				И	Не ЗначениеЗаполнено(Результат.ВремяОкончанияРабочегоДня)
				И	Не ЗначениеЗаполнено(Результат.ВремяНачалаОбеденногоПерерыва)
				И	Не ЗначениеЗаполнено(Результат.ВремяОкончанияОбеденногоПерерыва) Тогда
				//
				бПолучитьЗначенияПоУмолчанию = Истина;
			КонецЕсли;
		Иначе
			бПолучитьЗначенияПоУмолчанию = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если бПолучитьЗначенияПоУмолчанию Тогда
		Результат.ВремяНачалаРабочегоДня			= Константы.CRM_НачалоРабочегоДня.Получить();
		Результат.ВремяОкончанияРабочегоДня			= Константы.CRM_КонецРабочегоДня.Получить();
		Результат.ВремяНачалаОбеденногоПерерыва		= ?(НеУчитыватьОбеденныйПерерыв, Дата("00010101"),
			 Константы.CRM_НачалоОбеда.Получить());
		Результат.ВремяОкончанияОбеденногоПерерыва	= ?(НеУчитыватьОбеденныйПерерыв, Дата("00010101"),
			 Константы.CRM_КонецОбеда.Получить());
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Получить список рабочего времени пользователя
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Ссылка на пользователя.
// 
// Возвращаемое значение:
//  СписокЗначений - Список часов.
//
Функция ПолучитьСписокРабочегоВремениПользователя(Пользователь) Экспорт
	
	ВремяНачалаРабочегоДня 		= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
		 "ВремяНачалаРабочегоДня");
	ВремяОкончанияРабочегоДня	= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
		 "ВремяОкончанияРабочегоДня");
	Если НЕ ЗначениеЗаполнено(ВремяНачалаРабочегоДня) Тогда
		ВремяНачалаРабочегоДня = Константы.CRM_НачалоРабочегоДня.Получить();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВремяОкончанияРабочегоДня) Тогда
		ВремяОкончанияРабочегоДня = Константы.CRM_КонецРабочегоДня.Получить();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВремяОкончанияРабочегоДня) Тогда
		ВремяОкончанияРабочегоДня = Дата(1, 1, 1, 23, 59, 59); 
	КонецЕсли;
	
	СписокЧасов = Новый СписокЗначений();
	ТекВремя = ВремяНачалаРабочегоДня;
	
	Пока ТекВремя <= ВремяОкончанияРабочегоДня Цикл
	
		ПредставлениеВремени = Формат(ТекВремя, "ДФ=HH:mm; ДП=00:00");
		СписокЧасов.Добавить(ТекВремя, ПредставлениеВремени);
		ТекВремя = ТекВремя + 30 * 60;
	
	КонецЦикла;
	Возврат СписокЧасов;
	
КонецФункции

// Функция возвращает продолжительность рабочего периода по календарю.
//
// Параметры:
//  НачПериода					 - Дата							 - Дата начала.
//  КонПериода					 - Дата							 - Дата окончания.
//  ПользовательИлиОрганизация	 - СправочникСсылка.Пользователи - Пользователь, 
//					для которого определяется продолжительность рабочего периода.									
//  Календарь					 - СправочникСсылка.Календари	 - Календарь
//  РабочееВремяПользователя	 - Структура					 - Структура, полученная функцией
//  					ПолучитьСтруктуруРабочихВременПользователя.
// 
// Возвращаемое значение:
//  Структура - Структура со значением продолжительности периода в часах и в днях.
//
Функция ПолучитьПродолжительностьПериода(Знач НачПериода, Знач КонПериода, ПользовательИлиОрганизация = Неопределено,
		Календарь = Неопределено, РабочееВремяПользователя = Неопределено) Экспорт
	//
	Если ПользовательИлиОрганизация = Неопределено Тогда
		ПользовательИлиОрганизация = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Если Календарь = Неопределено Тогда
		Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	КонецЕсли;
	
	Если РабочееВремяПользователя = Неопределено Тогда
		РабочееВремяПользователя = ПолучитьСтруктуруРабочихВременПользователя(ПользовательИлиОрганизация);
	КонецЕсли;
	Если ЗначениеЗаполнено(РабочееВремяПользователя.ВремяОкончанияРабочегоДня) Тогда
		ВСекундах = РабочееВремяПользователя.ВремяОкончанияРабочегоДня - РабочееВремяПользователя.ВремяНачалаРабочегоДня;
		Если ЗначениеЗаполнено(РабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва) Тогда
			ВСекундах =
				ВСекундах - (РабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва - РабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва);
		КонецЕсли;
		Если ВСекундах < 0 Тогда
			ПродолжительностьРабочегоДняВЧасах = 8;
		Иначе
			ПродолжительностьРабочегоДняВЧасах = Цел(ВСекундах / 60 / 60);
		КонецЕсли;
	Иначе
		ПродолжительностьРабочегоДняВЧасах = 8;
	КонецЕсли;
	
	бВычислитьПродолжительностьВРучную = Ложь;
	
	Если ЗначениеЗаполнено(Календарь) Тогда
		Попытка
			Если НачалоДня(НачПериода) = НачалоДня(КонПериода) Тогда
				РазностьДатПоКалендарю = КалендарныеГрафики.РазностьДатПоКалендарю(Календарь,
					 НачалоДня(НачПериода),
					 НачалоДня(НачПериода));
				Если РазностьДатПоКалендарю > 0 Тогда
					РазностьДатПоКалендарю = 1;
				КонецЕсли;
			Иначе
				РазностьДатПоКалендарю = КалендарныеГрафики.РазностьДатПоКалендарю(Календарь, НачалоДня(НачПериода), КонПериода);
			КонецЕсли;
			Возврат Новый Структура("ВДнях,ВЧасах,РассчитаноСУчетомГрафика", РазностьДатПоКалендарю,
				 РазностьДатПоКалендарю * ПродолжительностьРабочегоДняВЧасах,
				 Истина);
		Исключение
			бВычислитьПродолжительностьВРучную = Истина;
		КонецПопытки;
	Иначе
		бВычислитьПродолжительностьВРучную = Истина;
	КонецЕсли;
	
	Если бВычислитьПродолжительностьВРучную Тогда
		ТекДатаПериода = НачПериода;
		Рез = 0;
		
		Пока НачалоДня(ТекДатаПериода) <= НачалоДня(КонПериода) Цикл
			ДеньНеделиЧисло = ДеньНедели(ТекДатаПериода);
			ТекДатаПериода = ТекДатаПериода + 3600 * 24;
			Если ДеньНеделиЧисло = 6 ИЛИ ДеньНеделиЧисло = 7 Тогда
				Продолжить;
			КонецЕсли;
			Рез = Рез + 1;
		КонецЦикла;
		
		Возврат Новый Структура("ВДнях,ВЧасах,РассчитаноСУчетомГрафика", Рез, Рез * ПродолжительностьРабочегоДняВЧасах, Ложь);
	КонецЕсли;
КонецФункции

#КонецОбласти // КалендариИКалендарныерафиками

#Область Трудозатраты

// Функция рассчитывает трудозатраты за период.
//
// Параметры:
//  НачПериода					 - Дата			 - Дата начала.
//  КонПериода					 - Дата			 - Дата окончания.
//  Пользователь				 - СправочникСсылка.Пользователи - Пользователь, 
//  								для которого определяется продолжительность рабочего периода.
//  Организация					 - СправочникСсылка.Организации	 - Организация, 
//									для которой определяется продолжительность рабочего периода.
//  Календарь					 - СправочникСсылка.Календари	 - Календарь
//  НеУчитыватьОбеденныйПерерыв	 - Булево - Если Истина, то учитывать обеденный перерыв.
// 
// Возвращаемое значение:
//  Структура - Структура трудозатрат. Поля:
//	 * ВМинутах								- Число - трудозатраты в минутах.
//	 * ВЧасах								- Число - трудозатраты в часах.
//	 * ПродолжительностьРабочегоДняВМинутах - Число - продолжительность рабочего дня в минутах.
//	 * ПродолжительностьРабочегоДняВЧасах	- Число - продолжительность рабочего дня в часах.
//
Функция ПолучитьТрудозатратыЗаПериод(Знач НачПериода, Знач КонПериода, Пользователь = Неопределено,
	 Организация = Неопределено, Календарь = Неопределено,
	 НеУчитыватьОбеденныйПерерыв = Ложь) Экспорт
	Если Пользователь = Неопределено Тогда
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Пользователь = Пользователи.ТекущийПользователь();
		КонецЕсли;
	КонецЕсли;
	Если Календарь = Неопределено Тогда
		Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	КонецЕсли;
	Если ЗначениеЗаполнено(Пользователь) Тогда
		РабочееВремяПользователя = ПолучитьСтруктуруРабочихВременПользователя(Пользователь, , НеУчитыватьОбеденныйПерерыв);
	ИначеЕсли ЗначениеЗаполнено(Организация) Тогда
		РабочееВремяПользователя = ПолучитьСтруктуруРабочихВременПользователя(Организация, , НеУчитыватьОбеденныйПерерыв);
	Иначе
		РабочееВремяПользователя =  ПолучитьСтруктуруРабочихВременПользователя(, Истина, НеУчитыватьОбеденныйПерерыв);
	КонецЕсли;
	
	Если КонПериода < НачПериода Тогда
		ВремНачПериода = НачПериода;
		НачПериода = КонПериода;
		КонПериода = ВремНачПериода;
	КонецЕсли;
	
	СтруктураРезультат = Новый Структура("ВМинутах,ВЧасах,ПродолжительностьРабочегоДняВМинутах,
		|ПродолжительностьРабочегоДняВЧасах", 0, 0, 0,
		 0);
	
	// Округление до минут
	НачПериода		= НачалоДня(НачПериода) + Цел((НачПериода - НачалоДня(НачПериода)) / 60) * 60;
	КонПериода		= НачалоДня(КонПериода) + Цел((КонПериода - НачалоДня(КонПериода)) / 60) * 60;
	Если НЕ ЗначениеЗаполнено (НачПериода) 
		ИЛИ НЕ ЗначениеЗаполнено (КонПериода) 
		ИЛИ НачалоДня(НачПериода) = '00010101' 
		ИЛИ НачалоДня(КонПериода) = '00010101' Тогда
		 Возврат СтруктураРезультат;
	КонецЕсли;
	МассивРабочихПериодовДня = Новый Массив();
	Если ЗначениеЗаполнено(РабочееВремяПользователя.ВремяОкончанияРабочегоДня) Тогда
		Если ЗначениеЗаполнено(РабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва) Тогда
			МассивРабочихПериодовДня.Добавить(Новый Структура("Начало,Окончание",
				 РабочееВремяПользователя.ВремяНачалаРабочегоДня,
				РабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва));
			МассивРабочихПериодовДня.Добавить(Новый Структура("Начало,Окончание",
				 РабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва,
				РабочееВремяПользователя.ВремяОкончанияРабочегоДня));
		Иначе
			МассивРабочихПериодовДня.Добавить(Новый Структура("Начало,Окончание",
				 РабочееВремяПользователя.ВремяНачалаРабочегоДня,
				РабочееВремяПользователя.ВремяОкончанияРабочегоДня));
		КонецЕсли;
	Иначе
		МассивРабочихПериодовДня.Добавить(Новый Структура("Начало,Окончание", Дата("00010101000000"),
			 Дата("00010101235959")));
	КонецЕсли;
	бВычислитьДляОдногоДня = Ложь;
	ПродолжительностьПериодаВДнях = 0;
	
	ПродолжительностьПолногоРабочегоДняВМинутах = 0;
	Для Каждого РабочийПериод Из МассивРабочихПериодовДня Цикл
		ПродолжительностьПолногоРабочегоДняВМинутах = ПродолжительностьПолногоРабочегоДняВМинутах 
			+ Цел((РабочийПериод.Окончание - РабочийПериод.Начало) / 60);
	КонецЦикла;
	СтруктураРезультат.ПродолжительностьРабочегоДняВМинутах = ПродолжительностьПолногоРабочегоДняВМинутах;
	СтруктураРезультат.ПродолжительностьРабочегоДняВЧасах = Окр(СтруктураРезультат.ПродолжительностьРабочегоДняВМинутах / 60,
		 1);
	
	ПродолжительностьПериодаВДнях = ПолучитьПродолжительностьПериода(НачПериода, КонПериода,
		 Пользователь, Календарь,
		 РабочееВремяПользователя).ВДнях;
	Если ПродолжительностьПериодаВДнях <= 0 Тогда
		Возврат СтруктураРезультат;
	ИначеЕсли НачалоДня(НачПериода) = НачалоДня(КонПериода) Или ПродолжительностьПериодаВДнях = 1 Тогда
		бВычислитьДляОдногоДня = Истина;
	КонецЕсли;
	
	Если бВычислитьДляОдногоДня Тогда
		Если НачалоДня(НачПериода) = НачалоДня(КонПериода) Тогда
			ТрудозатратыВМинутах = ТрудозатратыПродолжительностьВДнеВМинутах(НачПериода, КонПериода, МассивРабочихПериодовДня);
		Иначе
			ТрудозатратыВМинутах = ТрудозатратыПродолжительностьВДнеВМинутах(НачПериода,
				 КонецДня(НачПериода),
				 МассивРабочихПериодовДня);
		КонецЕсли;
	Иначе
		ОбщаяПродолжительностьВМинутахКромеПервогоИПоследнегоДня =
			(ПродолжительностьПериодаВДнях - 2) * ПродолжительностьПолногоРабочегоДняВМинутах;
		ПродолжительностьПервогоДняВМинутах = ТрудозатратыПродолжительностьВДнеВМинутах(НачПериода,
			 КонецДня(НачПериода),
			 МассивРабочихПериодовДня);
		ПродолжительностьПоследнегоДняВМинутах = ТрудозатратыПродолжительностьВДнеВМинутах(НачалоДня(НачПериода),
			 КонПериода,
			 МассивРабочихПериодовДня);
		
		ТрудозатратыВМинутах = ПродолжительностьПервогоДняВМинутах 
			+ ОбщаяПродолжительностьВМинутахКромеПервогоИПоследнегоДня 
			+ ПродолжительностьПоследнегоДняВМинутах;
	КонецЕсли;
	
	СтруктураРезультат.ВМинутах = ТрудозатратыВМинутах;
	СтруктураРезультат.ВЧасах = Окр(СтруктураРезультат.ВМинутах / 60, 1);
	
	Возврат СтруктураРезультат;
КонецФункции // ПолучитьТрудозатратыЗаПериод()

// Функция рассчитывает конечную дату от начальной даты с учетом календаря по переданной длительности.
//
// Параметры:
//  НачПериода				 - Дата	 - Начало периода.
//  СтруктураДлительности	 - Структура	 -  Структура длительности.
//  Пользователь			 - СправочникСсылка.Пользователи - Ссылка на пользователя.
//  Организация				 - СправочникСсылка.Организации	 - Ссылка на организацию.
//  Календарь				 - СправочникСсылка.Календари	 - Ссылка на календарь.
//  КалендарьЗаполнен		 - Булево - Если Истина, то календарь заполнен.
// 
// Возвращаемое значение:
//  Дата - Дата по календар. 
//
Функция ПолучитьДатуПоКалендарю(Знач НачПериода, СтруктураДлительности = Неопределено, Пользователь = Неопределено,
								Организация = Неопределено, Календарь = Неопределено, КалендарьЗаполнен = Истина) Экспорт
	
	ИспользоватьКалендарь = Истина;
	Если НЕ СтруктураДлительности = Неопределено Тогда
		Если СтруктураДлительности.Свойство("УчитыватьПроизводственныйКалендарьПриВыводеОповещений") Тогда
			ИспользоватьКалендарь = СтруктураДлительности.УчитыватьПроизводственныйКалендарьПриВыводеОповещений;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ИспользоватьКалендарь Тогда
		Календарь			= Неопределено;
		КалендарьЗаполнен	= Ложь;
	Иначе
		Если Календарь = Неопределено Тогда
			Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДлительности.Свойство("ВпередПоКалендарю") = Ложь Тогда
		ВпередПоКалендарю = Истина;
	Иначе
		ВпередПоКалендарю = СтруктураДлительности.ВпередПоКалендарю;
	КонецЕсли;
	
	Если НЕ ИспользоватьКалендарь Тогда
		РабочееВремяПользователя = Новый Структура("ВремяНачалаРабочегоДня,ВремяОкончанияРабочегоДня,
			|ВремяНачалаОбеденногоПерерыва,
			|ВремяОкончанияОбеденногоПерерыва");
	Иначе
		РабочееВремяПользователя = ПолучитьСтруктуруРабочихВременПользователя(Организация);
	КонецЕсли;
	
	Если ВпередПоКалендарю = Истина И КалендарьЗаполнен = Истина И ИспользоватьКалендарь = Истина
		 И ЗначениеЗаполнено(Календарь) Тогда
		// Попытка вычислить дату более "экономным" способом.
		бВычислитьУпрощенно = Ложь;
		Попытка
			Если	ТипЗнч(СтруктураДлительности.Дней) = Тип("Число") И СтруктураДлительности.Дней > 0
				И	ТипЗнч(СтруктураДлительности.Часов) = Тип("Число") И СтруктураДлительности.Часов >= 0
				И	ТипЗнч(СтруктураДлительности.Минут) = Тип("Число") И СтруктураДлительности.Минут >= 0 Тогда
				//
				бВычислитьУпрощенно = Истина;
			КонецЕсли;
		Исключение
			бВычислитьУпрощенно = Ложь;
		КонецПопытки;
		
		Если бВычислитьУпрощенно Тогда
			СоответствиеДатПоКалендарюНаГод = CRM_ОбщегоНазначенияПовтИсп.ПолучитьСоответствиеДатПоКалендарюНаГод(Календарь,
				 Год(НачПериода));
			Если СоответствиеДатПоКалендарюНаГод.Количество() > 0 Тогда
				СекундВДне = 24 * 60 * 60;
				СекундВОбеде =
					РабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва - РабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва;
				СекундВРабочемДне =
					(РабочееВремяПользователя.ВремяОкончанияРабочегоДня - РабочееВремяПользователя.ВремяНачалаРабочегоДня) - СекундВОбеде;
				ПустаяДата = Дата("00010101");
				ДлительностьСекунд = СтруктураДлительности.Дней * СекундВРабочемДне +
				СтруктураДлительности.Часов * 3600 + СтруктураДлительности.Минут * 60;
				ТекДата = НачПериода;
				ВремяНачалаРДСек = РабочееВремяПользователя.ВремяНачалаРабочегоДня - ПустаяДата;
				ВремяОкончанияРДСек = РабочееВремяПользователя.ВремяОкончанияРабочегоДня - ПустаяДата;
				ВремяНачалаОбедаСек = РабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва - ПустаяДата;
				ВремяОкончанияОбедаСек = РабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва - ПустаяДата;
				
                // BSLLS:MissingCodeTryCatchEx-off
				Попытка
					Пока ДлительностьСекунд > 0 Цикл
						
						Если СоответствиеДатПоКалендарюНаГод[НачалоДня(ТекДата)] <> Истина Тогда
							ТемпДатаГод = Год(ТекДата);
							ТекДата = НачалоДня(ТекДата + СекундВДне);
							ТекДатаГод = Год(ТекДата);
							Если ТекДатаГод <> ТемпДатаГод Тогда
								СоответствиеДатПоКалендарюНаГод = CRM_ОбщегоНазначенияПовтИсп.ПолучитьСоответствиеДатПоКалендарюНаГод(Календарь,
									 ТекДатаГод);
								Если СоответствиеДатПоКалендарюНаГод.Количество() = 0 Тогда
									СообщениеОбОшибке = НСтр("ru = 'График работы «%1» не заполнен на период %2.'");
									ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке,
										 Календарь,
										 ТекДатаГод);
								КонецЕсли;
							КонецЕсли;
							Продолжить;
						КонецЕсли;
						
						ТекДата00 = НачалоДня(ТекДата);
						ТекДатаНач = ТекДата00 + ВремяНачалаРДСек;
						ТекДатаКон = ТекДата00 + ВремяОкончанияРДСек;
						
						Если ТекДата < ТекДатаНач Тогда
							ТекДата = ТекДатаНач;
						ИначеЕсли ТекДата > ТекДатаКон Тогда
							ТекДата = ТекДата00 + СекундВДне;
							Продолжить;
						КонецЕсли;
						
						Если ТекДата < ТекДата00 + ВремяНачалаОбедаСек И ТекДата + ДлительностьСекунд > ТекДата00 
							+ ВремяНачалаОбедаСек Тогда
							ВключаемыйОбед = СекундВОбеде;
						ИначеЕсли ТекДата > ТекДата00 + ВремяНачалаОбедаСек И ТекДата < ТекДата00 + ВремяОкончанияОбедаСек Тогда
							ВключаемыйОбед = (ТекДата00 + ВремяОкончанияОбедаСек) - ТекДата;
						Иначе	
							ВключаемыйОбед = 0;
						КонецЕсли;
							
						Если ТекДата + ДлительностьСекунд + ВключаемыйОбед > ТекДатаКон Тогда
							ДлительностьСекунд = ДлительностьСекунд - (ТекДатаКон - ТекДата - ВключаемыйОбед);
							ТекДата = НачалоДня(ТекДата + СекундВДне);
						Иначе
							ТекДата = ТекДата + ДлительностьСекунд + ВключаемыйОбед;
							Возврат ТекДата;
						КонецЕсли;
						
					КонецЦикла;
						
					Возврат ТекДата;
				Исключение
				КонецПопытки;
				// BSLLS:MissingCodeTryCatchEx-on
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МассивРабочихПериодовДня = Новый Массив();
	Если ЗначениеЗаполнено(РабочееВремяПользователя.ВремяОкончанияРабочегоДня) Тогда
		Если ЗначениеЗаполнено(РабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва) Тогда
			МассивРабочихПериодовДня.Добавить(Новый Структура("Начало,Окончание",
				 РабочееВремяПользователя.ВремяНачалаРабочегоДня,
				РабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва));
			МассивРабочихПериодовДня.Добавить(Новый Структура("Начало,Окончание",
				 РабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва,
				РабочееВремяПользователя.ВремяОкончанияРабочегоДня));
		Иначе
			МассивРабочихПериодовДня.Добавить(Новый Структура("Начало,Окончание",
				 РабочееВремяПользователя.ВремяНачалаРабочегоДня,
				РабочееВремяПользователя.ВремяОкончанияРабочегоДня));
		КонецЕсли;
	Иначе
		МассивРабочихПериодовДня.Добавить(Новый Структура("Начало,Окончание", Дата("00010101000000"),
			 Дата("00010101235959")));
	КонецЕсли;
	
	Если СтруктураДлительности.Свойство("ВидОповещения") Тогда
		Если СтруктураДлительности.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения 
			Или СтруктураДлительности.ВидОповещения = Справочники.CRM_ВидыОповещений.CRM_ОповещенияОКлючевыхСобытиях Тогда
			НачПериода = НачПериода + (МассивРабочихПериодовДня[0].Начало - Дата("00010101000000"));
		КонецЕсли;
	КонецЕсли;
	
	ПродолжительностьПолногоРабочегоДняВМинутах = 0;
	Для Каждого РабочийПериод Из МассивРабочихПериодовДня Цикл
		ПродолжительностьПолногоРабочегоДняВМинутах = ПродолжительностьПолногоРабочегоДняВМинутах 
			+ Цел((РабочийПериод.Окончание - РабочийПериод.Начало) / 60);
	КонецЦикла;
	
	ДнейВЧасахИМинутах	= ЦЕЛ(((СтруктураДлительности.Часов * 60) 
		+ СтруктураДлительности.Минут) / ПродолжительностьПолногоРабочегоДняВМинутах);
	ОстатокМинут		= ((СтруктураДлительности.Часов * 60) 
		+ СтруктураДлительности.Минут) - (ДнейВЧасахИМинутах * ПродолжительностьПолногоРабочегоДняВМинутах);
	
	ВсегоДней = СтруктураДлительности.Дней + ДнейВЧасахИМинутах;
	
	Если КалендарьЗаполнен Тогда
		Попытка
			КонПериода = CRM_КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, НачПериода, ВсегоДней, ,
				 ?(ВпередПоКалендарю, Истина,
				 Ложь));
		Исключение
			ТекстСообщения = ИнформацияОбОшибке();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения.Описание);
			
			КалендарьЗаполнен = Ложь;
			
			КонПериода = НачалоДня(НачПериода) + (ВсегоДней * 24 * 60 * 60 * ?(ВпередПоКалендарю, 1, -1));
		КонецПопытки;
	Иначе
		КонПериода = НачалоДня(НачПериода) + (ВсегоДней * 24 * 60 * 60 * ?(ВпередПоКалендарю, 1, -1));
	КонецЕсли;
	
	ВремяНачПериодаВСекундах		= НачПериода - НачалоДня(НачПериода);
	
	Если ЗначениеЗаполнено(РабочееВремяПользователя.ВремяОкончанияРабочегоДня) Тогда
		ОкончанияРабочегоДняВСекундах	=
			РабочееВремяПользователя.ВремяОкончанияРабочегоДня - НачалоДня(РабочееВремяПользователя.ВремяОкончанияРабочегоДня);
		НачалаРабочегоДняВСекундах		=
			РабочееВремяПользователя.ВремяНачалаРабочегоДня - НачалоДня(РабочееВремяПользователя.ВремяНачалаРабочегоДня);
		НачалоОбедаВСекундах			=
			РабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва - НачалоДня(РабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва);
		КонецОбедаВСекундах				=
			РабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва - НачалоДня(РабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва);
		ДлительностьОбедаВСекундах		= КонецОбедаВСекундах - НачалоОбедаВСекундах;
	Иначе
		ОкончанияРабочегоДняВСекундах	= (ПродолжительностьПолногоРабочегоДняВМинутах * 60) + 59;
		НачалаРабочегоДняВСекундах		= 0;
		НачалоОбедаВСекундах			= 0;
		КонецОбедаВСекундах				= 0;
		ДлительностьОбедаВСекундах		= 0;
	КонецЕсли;
	
	Если ВремяНачПериодаВСекундах > ОкончанияРабочегоДняВСекундах Тогда
		ВремяНачПериодаВСекундах = ОкончанияРабочегоДняВСекундах;
    ИначеЕсли ВремяНачПериодаВСекундах < НачалаРабочегоДняВСекундах Тогда
		ВремяНачПериодаВСекундах = НачалаРабочегоДняВСекундах;
	КонецЕсли;
	
	ВремяКонПериодаВСекундах = ВремяНачПериодаВСекундах + (ОстатокМинут * 60 * ?(ВпередПоКалендарю, 1, -1));
	
	Если ВпередПоКалендарю Тогда
		Если (ВремяНачПериодаВСекундах <= КонецОбедаВСекундах) И (ВремяКонПериодаВСекундах >= НачалоОбедаВСекундах) Тогда
			ВремяКонПериодаВСекундах = ВремяКонПериодаВСекундах + ДлительностьОбедаВСекундах;
		КонецЕсли;
	Иначе
		Если (ВремяНачПериодаВСекундах >= КонецОбедаВСекундах) И (ВремяКонПериодаВСекундах <= НачалоОбедаВСекундах) Тогда
			ВремяКонПериодаВСекундах = ВремяКонПериодаВСекундах - ДлительностьОбедаВСекундах;
		КонецЕсли;
	КонецЕсли;
	
	Если ВпередПоКалендарю И ВремяКонПериодаВСекундах > ОкончанияРабочегоДняВСекундах Тогда
		
		Если КалендарьЗаполнен Тогда
			Попытка
				КонПериода = CRM_КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, КонПериода, 1);
			Исключение
				ТекстСообщения = ИнформацияОбОшибке();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения.Описание);
				
				КалендарьЗаполнен = Ложь;
				КонПериода = НачалоДня(КонПериода) + (24 * 60 * 60);
			КонецПопытки;
		Иначе
			КонПериода = НачалоДня(КонПериода) + (24 * 60 * 60);
		КонецЕсли;
		
		ВремяНачПериодаВСекундах = НачалаРабочегоДняВСекундах;
		ВремяКонПериодаВСекундах = НачалаРабочегоДняВСекундах + (ВремяКонПериодаВСекундах - ОкончанияРабочегоДняВСекундах);
		
		Если (ВремяНачПериодаВСекундах <= КонецОбедаВСекундах) И (ВремяКонПериодаВСекундах >= НачалоОбедаВСекундах) Тогда
			ВремяКонПериодаВСекундах = ВремяКонПериодаВСекундах + ДлительностьОбедаВСекундах;
		КонецЕсли;
		
	ИначеЕсли НЕ ВпередПоКалендарю И ВремяКонПериодаВСекундах < НачалаРабочегоДняВСекундах Тогда
		
		Если КалендарьЗаполнен Тогда
			Попытка
				КонПериода = CRM_КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, КонПериода, 1, , ВпередПоКалендарю);
			Исключение
				ТекстСообщения = ИнформацияОбОшибке();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения.Описание);
				
				КалендарьЗаполнен = Ложь;
				КонПериода = НачалоДня(КонПериода) - (24 * 60 * 60);
			КонецПопытки;
		Иначе
			КонПериода = НачалоДня(КонПериода) - (24 * 60 * 60);
		КонецЕсли;
		
		ВремяКонПериодаВСекундах = ОкончанияРабочегоДняВСекундах - (НачалаРабочегоДняВСекундах - ВремяКонПериодаВСекундах);
		ВремяНачПериодаВСекундах = ОкончанияРабочегоДняВСекундах;
		
		Если (ВремяНачПериодаВСекундах >= КонецОбедаВСекундах) И (ВремяКонПериодаВСекундах <= НачалоОбедаВСекундах) Тогда
			ВремяКонПериодаВСекундах = ВремяКонПериодаВСекундах - ДлительностьОбедаВСекундах;
		КонецЕсли;
		
	КонецЕсли;
	
	КонПериода = КонПериода + ВремяКонПериодаВСекундах;
	
	Если КалендарьЗаполнен И СтруктураДлительности.Свойство("ВидОповещения") Тогда
		Если СтруктураДлительности.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения 
			Или СтруктураДлительности.ВидОповещения = Справочники.CRM_ВидыОповещений.CRM_ОповещенияОКлючевыхСобытиях Тогда
			СоответствиеГрафиков = ПолучитьСоответствиеКалендарныхГрафиков(КонПериода, Календарь);
			Для Каждого Элемент Из СоответствиеГрафиков Цикл
				ЭтоРабочийДень = Элемент.Значение.ДеньРабочийПоПроизводственномуКалендарю;
				СчетчикМаксимумаДнейДляПоискаРабочегоДня = 1;
				Пока Не ЭтоРабочийДень Цикл
					КонПериода = КонПериода - (24 * 60 * 60);
					Если СчетчикМаксимумаДнейДляПоискаРабочегоДня = 15 Тогда
						Прервать;
					КонецЕсли;
					СоответствиеГрафиков = ПолучитьСоответствиеКалендарныхГрафиков(КонПериода, Календарь);
					Для Каждого Элемент Из СоответствиеГрафиков Цикл
						ЭтоРабочийДень = Элемент.Значение.ДеньРабочийПоПроизводственномуКалендарю;
					КонецЦикла;
					СчетчикМаксимумаДнейДляПоискаРабочегоДня = СчетчикМаксимумаДнейДляПоискаРабочегоДня + 1;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КонПериода;
	
КонецФункции

// Функция формирует текст описания для объекта.
//
// Параметры:
//	Объект	- ЛюбаяСсылка	- Ссылка на объект.
//
// Возвращаемое значение:
//	Строка	- Строка с текстовым описанием объекта.
//
Функция ПолучитьТекстовоеОписанияОбъекта(Объект) Экспорт
	ТипОбъекта = ТипЗнч(Объект.Ссылка);
	Если ТипОбъекта = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
		Текст = "";
		Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
			Текст = Строка(Объект.КонтактноеЛицо);
		Иначе
		   	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Партнер") Тогда
				ИмяРеквизитаПартнер = "Партнер";
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Клиент") Тогда
				ИмяРеквизитаПартнер = "Клиент";
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект[ИмяРеквизитаПартнер]) Тогда
				Текст = Строка(Объект[ИмяРеквизитаПартнер]);
			КонецЕсли;		
		КонецЕсли;
		Текст = Текст + ?(ЗначениеЗаполнено(Текст) И ЗначениеЗаполнено(Объект.Комментарий), ". ", "") + Объект.Комментарий;
		Текст = Текст + ?(ЗначениеЗаполнено(Текст) И ЗначениеЗаполнено(Объект.CRM_Примечание), ". ", "") 
			+ Объект.CRM_Примечание;
		Возврат Текст;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
		Текст = Объект.Тема;
		Текст = Текст + ?(ЗначениеЗаполнено(Текст) И ЗначениеЗаполнено(Объект.Комментарий), ". ", "") + Объект.Комментарий;
		Возврат Текст;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		Возврат Объект.Тема;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		Возврат Объект.Тема;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.СообщениеSMS") Тогда
		Возврат Объект.ТекстСообщения;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.CRM_Заявка") Тогда
		Возврат Объект.Тема;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		Возврат Объект.ТекстСообщения;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
		Текст = Объект.Тема;
		Текст = Текст + ?(ЗначениеЗаполнено(Текст) И ЗначениеЗаполнено(Объект.Комментарий), ". ", "") + Объект.Комментарий;
		Возврат Текст;
		
	ИначеЕсли НайтиВМетаданныхПоИмени("Документы", "CRM_СчетНаОплатуПокупателю")
		  И ТипОбъекта = Тип("ДокументСсылка." + "CRM_СчетНаОплатуПокупателю") Тогда
		Текст = "";
		Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
			Текст = Строка(Объект.КонтактноеЛицо);
		ИначеЕсли ЗначениеЗаполнено(Объект.Партнер) Тогда
			Текст = Строка(Объект.Партнер);
		КонецЕсли;
		Текст = Текст + ?(ЗначениеЗаполнено(Текст) И ЗначениеЗаполнено(Объект.Комментарий), ". ", "") + Объект.Комментарий;
		Возврат Текст;
		
	ИначеЕсли ТипОбъекта = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		Текст = Объект.Наименование;
		Текст = Текст + ?(ЗначениеЗаполнено(Текст) И ЗначениеЗаполнено(Объект.Описание), ". ", "") + Объект.Описание;
		Возврат Текст;
		
	ИначеЕсли  ТипОбъекта = Тип("ДокументСсылка.Анкета") Тогда
		
		Если ЗначениеЗаполнено(Объект.CRM_ШаблонАнкеты) Тогда
			
			ШаблонАнкеты = Объект.CRM_ШаблонАнкеты;
			
		Иначе	
			
			ШаблонАнкеты = Объект.Опрос.ШаблонАнкеты;
			
		КонецЕсли;
		
		Текст = ШаблонАнкеты.Наименование;
		
		Возврат Текст;
	// +СофтФон		
	ИначеЕсли  ТипОбъекта = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		Возврат Объект.Описание;
	// -СофтФон		
	Иначе
		Возврат Строка(Объект);
		
	КонецЕсли;
КонецФункции

// Функция выполняет запрос как набор данных компоновки данных.
//
// Параметры:
//	ТекстЗапроса	- Строка				- Текст запроса.
//	Отбор			- ОтборКомпоновкиДанных	- Отбор компоновки данных.
//	Параметры		- Соответствие			- Соответствие с параметрами запроса.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица с результатом выполнения запроса.
//
Функция ВыполнитьЗапросВКомпоновкеДанных(ТекстЗапроса, Отбор, Параметры = Неопределено) Экспорт
	// Создание и настройка схемы компоновки данных.
	СКДДанные = Новый СхемаКомпоновкиДанных();
	
	ИсточникДанных = СКДДанные.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКДДанные.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	НаборДанных.Запрос = ТекстЗапроса;
	
	Настройки = СКДДанные.НастройкиПоУмолчанию;
	
	ДетальнаяГруппировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальнаяГруппировка.Использование = Истина;
	
	ВыбранноеАвтоПоле = Настройки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеАвтоПоле.Использование = Истина;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКДДанные));
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Для Каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		// Пропускаем системные поля
		Если Лев(Строка(ПолеВыбора.Поле), 13) = "СистемныеПоля" Или Лев(Строка(ПолеВыбора.Поле),
			 12) = "SystemFields" Тогда Продолжить; КонецЕсли;
		Если Лев(Строка(ПолеВыбора.Поле), 15) = "ПараметрыДанных" Или Лев(Строка(ПолеВыбора.Поле),
			 14) = "DataParameters" Тогда Продолжить; КонецЕсли;
		
		ВыбранныеПоляДетальнаяГруппировка =
			ДетальнаяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранныеПоляДетальнаяГруппировка.Поле  = Новый ПолеКомпоновкиДанных(ПолеВыбора.Поле);
	КонецЦикла;
	
	Настройки.ПараметрыДанных.Элементы.Очистить();
	
	Если ТипЗнч(Параметры) = Тип("Соответствие") Тогда
		Для Каждого ПараметрКлючЗначение Из Параметры Цикл
			Параметр = Настройки.ПараметрыДанных.Элементы.Добавить();
			Если ТипЗнч(ПараметрКлючЗначение.Ключ) = Тип("ПараметрКомпоновкиДанных") Тогда
				Параметр.Параметр = ПараметрКлючЗначение.Ключ;
			Иначе
				Параметр.Параметр = Новый ПараметрКомпоновкиДанных(ПараметрКлючЗначение.Ключ);
			КонецЕсли;
			Параметр.Значение = ПараметрКлючЗначение.Значение;
			Параметр.Использование = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Настройки.Отбор.Элементы.Очистить();
	
	Если Отбор <> Неопределено Тогда
		CRM_ОбщегоНазначенияКлиентСервер.СкопироватьОтборКомпоновкиДанных(Настройки.Отбор.Элементы,
			 Отбор.Элементы,
			 КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора);
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКДДанные, Настройки, , ,
		 Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	РезультатТаблица = Новый ТаблицаЗначений();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(РезультатТаблица);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Ложь);
	
	Возврат РезультатТаблица;
КонецФункции

// Функция выполняет запрос и возвращает результат.
//
// Параметры:
//	Запрос	- Запрос - Запрос.
//
// Возвращаемое значение:
//	РезультатЗапроса	- Результат запроса.
//
Функция ВыполнитьЗапрос(Запрос) Экспорт
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;
КонецФункции

#КонецОбласти // Трудозатраты

#Область СохранениеВсстановлениеСртировкиДиническихСисков
	
// Процедура сохраняет сортировку динамического списка.
//
// Параметры:
//  Список				 - ДинамическийСписок	- Список.
//  ИдентификаторСписка	 - Строка	 - Строковый ключ сохранения.
//
Процедура СохранитьСортировкуСписка(Список, ИдентификаторСписка) Экспорт
	МассивПолейСортировки = Новый Массив();
	Для Каждого ГруппаПолеСортировки Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ГруппаПолеСортировки) = Тип("ПорядокКомпоновкиДанных") Тогда
			Для Каждого ПолеСортировки Из ГруппаПолеСортировки.Элементы Цикл
				Если ТипЗнч(ПолеСортировки) = Тип("ЭлементПорядкаКомпоновкиДанных") И ПолеСортировки.Использование Тогда
					МассивПолейСортировки.Добавить(Новый Структура("Поле,ТипУпорядочивания,РежимОтображения",
						Строка(ПолеСортировки.Поле), ПолеСортировки.ТипУпорядочивания, ПолеСортировки.РежимОтображения));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	CRM_ХранилищеНастроек.Сохранить(ИдентификаторСписка, "", МассивПолейСортировки);
КонецПроцедуры

// Процедура восстанавливает сортировку динамического списка.
//
// Параметры:
//  Список				 - ДинамическийСписок	- Список.
//	ИдентификаторСписка	 - Строка				- Строковый ключ сохранения.
Процедура ВосстановитьСортировкуСписка(Список, ИдентификаторСписка) Экспорт
	МассивПолейСортировки = CRM_ХранилищеНастроек.Загрузить(ИдентификаторСписка);
	Если ТипЗнч(МассивПолейСортировки) = Тип("Массив") Тогда
		Список.Порядок.Элементы.Очистить();
		Для Каждого ПолеСортировки Из МассивПолейСортировки Цикл
			Если ТипЗнч(ПолеСортировки) = Тип("Структура") Тогда
				// BSLLS:MissingCodeTryCatchEx-off
				Попытка
					Если Список.Порядок.ДоступныеПоляПорядка.НайтиПоле(Новый ПолеКомпоновкиДанных(ПолеСортировки.Поле)) <> Неопределено Тогда
						НовоеПоле = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
						Если ПолеСортировки.Свойство("Поле") Тогда
							НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеСортировки.Поле);
						КонецЕсли;
						Если ПолеСортировки.Свойство("ТипУпорядочивания") Тогда
							НовоеПоле.ТипУпорядочивания = ПолеСортировки.ТипУпорядочивания;
						Иначе
							НовоеПоле.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
						КонецЕсли;
						Если ПолеСортировки.Свойство("Использование") Тогда
							НовоеПоле.Использование = ПолеСортировки.Использование;
						Иначе
							НовоеПоле.Использование = Истина;
						КонецЕсли;
						Если ПолеСортировки.Свойство("РежимОтображения") Тогда
							НовоеПоле.РежимОтображения = ПолеСортировки.РежимОтображения;
						КонецЕсли;
					КонецЕсли;
				Исключение
				КонецПопытки;
				// BSLLS:MissingCodeTryCatchEx-on
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти // СохранениеВсстановлениеСртировкиДиническихСисков

#Область ОбработчикиПодписокНаСобытия 
	
// ВРЕМЕННЫЙ БЛОК, НУЖНО ДЕЛАТЬ ОТДЕЛЬНЫЙ МОДУЛЬ

// Процедура - обработчик подписки на событие "ПриЗаписи" для справочника Календари.
// TODO: пересмотреть этот код, его размещение именно здесь и вообще все.
//
// Параметры:
//	Источник	- СправочникСсылка	- Источник события.
//	Отказ		- Булево			- Флаг отмены.
//
Процедура Справочник_Календари_ПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Календари") Тогда
		НаименованиеПроизводственногоКалендаряПоУмолчанию = "Производственный календарь";
		Если НЕ Источник.Ссылка.Пустая()
			И Источник.Ссылка.Наименование = НаименованиеПроизводственногоКалендаряПоУмолчанию
			И Источник.Наименование <> НаименованиеПроизводственногоКалендаряПоУмолчанию Тогда
			// Не даем изменять наименования производственного календаря по умолчанию, т.к. в БСП оно определяется по имени.
			Источник.Наименование = НаименованиеПроизводственногоКалендаряПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // Справочник_Календари_ПередЗаписью()

// Функция проверяет заполнение реквизита клиентской базы.
//
// Параметры:
//	Объект		- Ссылка	- Ссылка на объект клиентской базы.
//	Реквизит	- Ссылка	- Ссылка на дополнительный реквизит или видконтактной информации.
//
// Возвращаемое значение:
//	Булево		- Истина если реквизит заполнен.
//
Функция ПроверитьЗаполнениеРеквизитаОбъектаКлиентскойБазы(Объект, Реквизит) Экспорт
	Если ТипЗнч(Реквизит) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		НайденнаяСтрока = Объект.КонтактнаяИнформация.Найти(Реквизит, "Вид");
		Если НайденнаяСтрока = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Возврат ЗначениеЗаполнено(НайденнаяСтрока.Представление);
		КонецЕсли;
	ИначеЕсли	ТипЗнч(Реквизит) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения")
			Или	ТипЗнч(Реквизит) = Тип("ПланВидовХарактеристикСсылка.CRM_ДополнительнаяИнформация")
			Или	ТипЗнч(Реквизит) = Тип("Строка") Тогда
		//
		Если ТипЗнч(Реквизит) = Тип("Строка") Тогда
			Попытка
				Возврат ЗначениеЗаполнено(Объект[Реквизит]);
			
			Исключение	Возврат Истина;
			КонецПопытки;
		ИначеЕсли ТипЗнч(Реквизит) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
			НайденнаяСтрока = Объект.ДополнительныеРеквизиты.Найти(Реквизит, "Свойство");
			Если НайденнаяСтрока = Неопределено Тогда
				Возврат Ложь;
			Иначе
				Возврат ЗначениеЗаполнено(НайденнаяСтрока.Значение);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Реквизит) = Тип("ПланВидовХарактеристикСсылка.CRM_ДополнительнаяИнформация") Тогда
			НайденнаяСтрока = Объект.CRM_ДополнительнаяИнформация.Найти(Реквизит, "Свойство");
			Если НайденнаяСтрока = Неопределено Тогда
				Возврат Ложь;
			Иначе
				Возврат ЗначениеЗаполнено(НайденнаяСтрока.Значение);
			КонецЕсли;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

// Процедура - обработчик подписки на событие "ПриЗаписи" для объектов клиентской базы.
//
// Параметры:
//	Источник	- Ссылка	- Источник события.
//	Отказ		- Булево	- Флаг отмены.
//
Процедура ПриЗаписиОбъектаКлиентскойБазы(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Таблица.БизнесПроцесс КАК БизнесПроцесс,
	|	Таблица.Исполнитель КАК Исполнитель,
	|	Таблица.Контролер КАК Контролер,
	|	Таблица.Партнер КАК Партнер,
	|	Таблица.Завершено КАК Завершено,
	|	Таблица.ВидКонтроля КАК ВидКонтроля,
	|	Таблица.Проект КАК Проект,
	|	
	|	ТаблицаРеквизиты.Реквизит КАК Реквизит
	|ИЗ
	|	РегистрСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазы КАК Таблица
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазыРеквизиты КАК ТаблицаРеквизиты
	|ПО
	|	Таблица.БизнесПроцесс = ТаблицаРеквизиты.БизнесПроцесс
	|	И Таблица.Партнер = ТаблицаРеквизиты.Партнер
	|ГДЕ
	|	Таблица.Партнер = &ИсточникСсылка
	|	И Таблица.ВидКонтроля В (&ВидыКонтроля)
	|ИТОГИ ПО
	|	Таблица.БизнесПроцесс
	|");
	
	ВидыКонтроля = Новый Массив;
	ВидыКонтроля.Добавить(Перечисления.CRM_ВидыМастераПроверкиКлиентскойБазы.ЗаполнениеКонтактнойИнформации);
	ВидыКонтроля.Добавить(Перечисления.CRM_ВидыМастераПроверкиКлиентскойБазы.ЗаполнениеДополнительныхРеквизитов);
	ВидыКонтроля.Добавить(Перечисления.CRM_ВидыМастераПроверкиКлиентскойБазы.КонтрольПотенциалаКлиентов);
	ВидыКонтроля.Добавить(Перечисления.CRM_ВидыМастераПроверкиКлиентскойБазы.КонтрольРегистрацииКлиентов);
	Запрос.УстановитьПараметр("ВидыКонтроля", ВидыКонтроля);
	Запрос.УстановитьПараметр("ИсточникСсылка", Источник.Ссылка);
	ВыборкаБизнесПроцесс = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаБизнесПроцесс.Количество() > 0 Тогда
		Пока ВыборкаБизнесПроцесс.Следующий() Цикл
			БизнесПроцесс = Неопределено;
			Исполнитель = Неопределено;
			Контролер = Неопределено;
			Партнер = Неопределено;
			Проект = Неопределено;
			ВидКонтроля = Неопределено;
			ВсеРеквизитыЗаполнены = Истина;
			
			Выборка = ВыборкаБизнесПроцесс.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если БизнесПроцесс = Неопределено Тогда
					БизнесПроцесс = Выборка.БизнесПроцесс;
				КонецЕсли;
				Если Исполнитель = Неопределено Тогда
					Исполнитель = Выборка.Исполнитель;
				КонецЕсли;
				Если Контролер = Неопределено Тогда
					Контролер = Выборка.Контролер;
				КонецЕсли;
				Если Партнер = Неопределено Тогда
					Партнер = Выборка.Партнер;
				КонецЕсли;
				Если Проект = Неопределено Тогда
					Проект = Выборка.Проект;
				КонецЕсли;
				Если ВидКонтроля = Неопределено Тогда
					ВидКонтроля = Выборка.ВидКонтроля;
				КонецЕсли;
				
				Если ВидКонтроля = Перечисления.CRM_ВидыМастераПроверкиКлиентскойБазы.КонтрольПотенциалаКлиентов Тогда
					ВсеРеквизитыЗаполнены =  ЗначениеЗаполнено(Партнер.CRM_Потенциал);
					Прервать;
				ИначеЕсли ВидКонтроля = Перечисления.CRM_ВидыМастераПроверкиКлиентскойБазы.КонтрольРегистрацииКлиентов Тогда
					Если ТипЗнч(Партнер) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
						ВсеРеквизитыЗаполнены = ЗначениеЗаполнено(Партнер.ОтправительКонтакт)
							 И ТипЗнч(Партнер.ОтправительКонтакт) <> Тип("Строка");
					КонецЕсли;
					Прервать;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Выборка.Реквизит) Тогда
					Продолжить;
				КонецЕсли;
				
				РеквизитЗаполнен = ПроверитьЗаполнениеРеквизитаОбъектаКлиентскойБазы(Источник, Выборка.Реквизит);
				Если ВсеРеквизитыЗаполнены И Не РеквизитЗаполнен Тогда
					ВсеРеквизитыЗаполнены = Ложь;
				КонецЕсли;
				
				Менеджер = РегистрыСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазыРеквизиты.СоздатьМенеджерЗаписи();
				Менеджер.БизнесПроцесс = Выборка.БизнесПроцесс;
				Менеджер.Партнер = Выборка.Партнер;
				Менеджер.Реквизит = Выборка.Реквизит;
				Менеджер.Завершено = РеквизитЗаполнен;
				Менеджер.Записать();
			КонецЦикла;
			
			Менеджер = РегистрыСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазы.СоздатьМенеджерЗаписи();
			Менеджер.БизнесПроцесс = БизнесПроцесс;
			Менеджер.Исполнитель = Исполнитель;
			Менеджер.Партнер = Партнер;
			Менеджер.Проект = Проект;
			Менеджер.ВидКонтроля = ВидКонтроля;
			Менеджер.Контролер = Контролер;
			Менеджер.Завершено = ВсеРеквизитыЗаполнены;
			Менеджер.Записать();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик подписки на событие "ПриЗаписи" для объектов, синхронизируемых с MS Outlook.
//
// Параметры:
//	Источник	- Ссылка	- Источник события.
//	Отказ		- Булево	- Флаг отмены.
//
Процедура ПриЗаписиОбъектаОбменаСMSOutlook(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ТекДата = ПолучитьТекущуюДатуСеанса();
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СоответствиеОбъектовOutlook.ПрограммаOutlook КАК ПрограммаOutlook,
	|	СоответствиеОбъектовOutlook.СобственнаяСсылка КАК СобственнаяСсылка,
	|	СоответствиеОбъектовOutlook.СсылкаВOutlook КАК СсылкаВOutlook,
	|	СоответствиеОбъектовOutlook.ДатаПоследнейМодификации КАК ДатаПоследнейМодификации
	|ИЗ
	|	РегистрСведений.CRM_СоответствиеОбъектовOutlook КАК СоответствиеОбъектовOutlook
	|ГДЕ
	|	СоответствиеОбъектовOutlook.СобственнаяСсылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.CRM_СоответствиеОбъектовOutlook.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПрограммаOutlook = Выборка.ПрограммаOutlook;
		МенеджерЗаписи.СобственнаяСсылка = Выборка.СобственнаяСсылка;
		МенеджерЗаписи.СсылкаВOutlook = Выборка.СсылкаВOutlook;
		МенеджерЗаписи.ДатаПоследнейМодификации = ТекДата;
		МенеджерЗаписи.Записать();
	КонецЦикла;
КонецПроцедуры

// Процедура - обработчик подписки на событие "ПередЗаписью" для документа CRM_РассылкаЭлектронныхПисем.
//
// Параметры:
//	Источник			- Ссылка					- Источник события.
//	Отказ				- Булево					- Флаг отмены.
//	РежимЗаписи			- РежимЗаписиДокумента 		- Режим записи документа.
//	РежимПроведения		- РежимПроведенияДокумента	- Режим проведения документа.
//
Процедура ПередЗаписьюРассылкиЭлектронныхПисем(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПометкаУдаленияИзменена = (ЗначениеЗаполнено(Источник.Ссылка)
		 И Источник.Ссылка.ПометкаУдаления <> Источник.ПометкаУдаления);
	
	Если ПометкаУдаленияИзменена И Не Отказ Тогда
		НоваяПометкаУдаления = Источник.ПометкаУдаления;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ЭлектронноеПисьмоИсходящее.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
		                      |		ПО ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка
		                      |ГДЕ
		                      |	ПредметыПапкиВзаимодействий.Предмет = &Предмет
		                      |	И ЭлектронноеПисьмоИсходящее.ПометкаУдаления <> &НоваяПометкаУдаления");
		Запрос.УстановитьПараметр("Предмет", Источник.Ссылка);
		Запрос.УстановитьПараметр("НоваяПометкаУдаления", НоваяПометкаУдаления);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Попытка
				ДокументОбъект.Заблокировать();
			Исключение
				Продолжить;
			КонецПопытки;
			
			ДокументОбъект.УстановитьПометкуУдаления(НоваяПометкаУдаления);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиПодписокНаСобытия

#Область Печать
	
// Функция получает пользовательские макеты.
//
// Параметры:
//  ПолноеИмяОбъектаМетаданных	 - Строка - Имя объекта метаданных.
// 
// Возвращаемое значение:
//  Массив - Массив структур с макетами. 
//
Функция ПолучитьПользовательскиеМакеты(ПолноеИмяОбъектаМетаданных) Экспорт
	
	МассивСтруктур = Новый Массив;
	
	// +БСП
	Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъектаМетаданных, Ложь);
	Если Владелец = Неопределено Тогда
		Возврат МассивСтруктур;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МакетыПечатныхФорм.Идентификатор КАК Идентификатор,
	|	МакетыПечатныхФорм.Представление КАК Представление,
	|	МакетыПечатныхФорм.УсловиеВидимости КАК УсловияВидимости,
	|	МакетыПечатныхФорм.CRM_ИмяМакета КАК CRM_ИмяМакета
	|ИЗ
	|	Справочник.МакетыПечатныхФорм КАК МакетыПечатныхФорм
	|ГДЕ
	|	МакетыПечатныхФорм.ИсточникДанных = &Владелец
	|	И МакетыПечатныхФорм.Используется
	|	И НЕ МакетыПечатныхФорм.ПометкаУдаления
	|	И НЕ МакетыПечатныхФорм.CRM_ПоставляемыйМакет";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЧастиИмени = СтрРазделить(Выборка.CRM_ИмяМакета, ".");
		СтруктураМакета = Новый Структура;
		СтруктураМакета.Вставить("ИмяМакета", ЧастиИмени[ЧастиИмени.ВГраница()]);
		СтруктураМакета.Вставить("Идентификатор", "ПФ_" + Строка(Выборка.Идентификатор));
		СтруктураМакета.Вставить("Владелец", Владелец);
		СтруктураМакета.Вставить("CRM_Представление", Выборка.Представление);
		СтруктураМакета.Вставить("УсловияВидимости", Выборка.УсловияВидимости);
		
		МассивСтруктур.Добавить(СтруктураМакета);
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

// Процедура получает из текущих настроек пользователя имя кнопки печати,
//  которая определяет макет печатной формы по умолчанию.
//  Если не найдено, то берется первый макет в структуре макетов печатных форм,
//  и сохраняется в настройках пользователя.
//
// Параметры:
//  ПолноеИмяОбъектаМетаданных	 - Строка	 - Имя объекта метаданных.
//  Форма						 - ФормаКлиентскогоПриложения	 - форма редактируемого объекта,
//
Процедура УстановитьКнопкиПечати(ПолноеИмяОбъектаМетаданных, Форма) Экспорт
	
	ЭлементПодменюПечати = Форма.Элементы.Найти("ПодменюПечать");
	Если ЭлементПодменюПечати = Неопределено Тогда
		ЭлементПодменюПечати = Форма.Элементы.ФормаАвтоКнопки.Родитель;
	КонецЕсли;
	Форма.Элементы.Переместить(Форма.Элементы.ФормаАвтоКнопки, ЭлементПодменюПечати);
	
	МассивМакетов = ПолучитьПользовательскиеМакеты(ПолноеИмяОбъектаМетаданных);
	
	Для Каждого СтруктураМакета Из МассивМакетов Цикл
		НоваяКомандаФормы = Форма.Команды.Добавить("Печать_" + СокрЛП(СтруктураМакета.ИмяМакета));
		НоваяКомандаФормы.Заголовок                 = СокрЛП(СтруктураМакета.CRM_Представление);
		НоваяКомандаФормы.Действие                  = "Подключаемый_ПечатьВнешнегоМакета";
		
		НовыйПунктМеню =  Форма.Элементы.Вставить("Кнопка_" + СокрЛП(СтруктураМакета.ИмяМакета),
			 Тип("КнопкаФормы"), Форма.Элементы.ФормаАвтоКнопки);
		НовыйПунктМеню.ИмяКоманды			= "Печать_" + СокрЛП(СтруктураМакета.ИмяМакета);
		НовыйПунктМеню.Заголовок			= СокрЛП(СтруктураМакета.CRM_Представление);
	КонецЦикла;
	
КонецПроцедуры // УстановитьКнопкиПечати()

// Функция возвращает описание областей макета офисного документа.
//
// Параметры:
//	МассивИменТабличныхЧастей	- Массив	- Массив имен табличных частей.
//
// Возвращаемое значение:
//	Структура	- Структура с описаниями областей макета офисного документа.
//
Функция CRM_ПолучитьОписаниеОбластейМакетаОфисногоДокумента(МассивИменТабличныхЧастей) Экспорт
	ОписаниеОбластей = Новый Структура;
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ВерхнийКолонтитул",					"ВерхнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "НижнийКолонтитул",						"НижнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Заголовок",							"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "НижняяЧасть",							"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТаблицыТовары",					"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "СтрокаТаблицаТовары",					"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "СтрокаРазделительТаблицаТовары",		"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "СтрокаИтогиПоРазделуТаблицаТовары",	"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ИтогиТаблицаТовары",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТаблицыТоварыТекст",				"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТоварыНоменклатура",				"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ТоварыНоменклатура",					"Список");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТоварыВсего",						"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ТоварыВсего",							"Список");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ОписаниеВарианта",						"Общая");
	Если НЕ (МассивИменТабличныхЧастей = Неопределено) Тогда
		Для Каждого ИмяТабЧасти Из МассивИменТабличныхЧастей Цикл
			УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТаблицы" + ИмяТабЧасти + "Текст",	"Общая");
			УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТаблицы" + ИмяТабЧасти,			"СтрокаТаблицы");
			УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "СтрокаТаблица" + ИмяТабЧасти,			"СтрокаТаблицы");
			УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ИтогиТаблица" + ИмяТабЧасти,			"Общая");
			УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Шапка" + ИмяТабЧасти + "Номенклатура",	"Общая");
			УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, ИмяТабЧасти + "Номенклатура",			"Список");
			УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Шапка" + ИмяТабЧасти + "Всего",		"Общая");
			УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, ИмяТабЧасти + "Всего",					"Список");
		КонецЦикла;
	КонецЕсли;
	Возврат ОписаниеОбластей;
КонецФункции // CRM_ПолучитьОписаниеОбластейМакетаОфисногоДокумента()

// Функция возвращает данные объекта.
//
// Параметры:
//	СсылкаНаОбъект	- ДокументСсылка	- Ссылка на оъект.
//	НомерВарианта	- Число				- Номер варианта.
//
// Возвращаемое значение:
//	Структура	- Структура с данными объекта.
//
Функция CRM_ПолучитьДанныеОбъекта(СсылкаНаОбъект, Знач НомерВарианта = Неопределено) Экспорт
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.CRM_Интерес")
		 И НомерВарианта = 1 Тогда // НомерВарианта = 1 для идентификации печати.
		ДанныеОбъекта = Новый Соответствие;
		
		ОбъектДокумент = СсылкаНаОбъект.ПолучитьОбъект();
		
		// **************** Получим из Автотекста.
		СтруктураТеговШаблона = CRM_АвтотекстПереопределяемый.ПолучитьСтруктуруТеговШаблона(СсылкаНаОбъект);
		Для Каждого КлючЗначение Из СтруктураТеговШаблона Цикл
			ДанныеОбъекта.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		СтруктураДанных = Новый Структура("Телефон, EmailПользователя", "", "");
		Если ЗначениеЗаполнено(ОбъектДокумент.Ответственный)
			 И ТипЗнч(ОбъектДокумент.Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда
			CRM_МетодыМодулейМенеджеровДокументов.КППолучитьКонтактныеДанные(ОбъектДокумент.Ответственный, СтруктураДанных);
		КонецЕсли;
		ДанныеОбъекта.Вставить("Варианты", Новый Массив);
		ИтогоБезСкидки = 0;
		ИтоговаяСумма	 = 0;
		ИтоговаяСуммаНДС = 0;
		НомерСтрокиПоПорядку = 0;
		ЕстьРазделители = Ложь;
		ТекущийРазделитель = Неопределено;
		ИтогПоРазделу = 0;	
		
		СтруктураВарианта = Новый Структура;
		СтруктураВарианта.Вставить("идВарианта", 1);
		//СтруктураВарианта.Вставить("Утвержден",ЭлементСписка.Пометка);
		//СтруктураВарианта.Вставить("СтрокаВарианта", ЭлементСписка.Представление);
		СтруктураВарианта.Вставить("Товары", Новый Массив);
		
		ИмяТЧ = "Товары";
		Для Каждого СтрокаТабличнойЧасти Из ОбъектДокумент[ИмяТЧ] Цикл
			СтрокаТаблицыТовары = Новый Соответствие;
			НомерСтрокиПоПорядку = НомерСтрокиПоПорядку + 1;
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Ссылка"				, СсылкаНаОбъект);
			ДополнительныеПараметры.Вставить("ИтогПоРазделу"		, ИтогПоРазделу);
			ДополнительныеПараметры.Вставить("НомерСтроки"			, НомерСтрокиПоПорядку);
			ДополнительныеПараметры.Вставить("ТипСтроки"			, "Номенклатура");
			ДополнительныеПараметры.Вставить("ТекущийРазделитель"	, ТекущийРазделитель);
			СтруктураТеговШаблонаЗначениеКолонок = CRM_АвтотекстПереопределяемый.ПолучитьСтруктуруТеговШаблона(СтрокаТабличнойЧасти,
				 ИмяТЧ,
				 ДополнительныеПараметры);
			Для Каждого КлючЗначение Из СтруктураТеговШаблонаЗначениеКолонок Цикл
				СтрокаТаблицыТовары.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
			СуммаБезСкидки	= СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
			ИтогоБезСкидки = ИтогоБезСкидки + СуммаБезСкидки;
			ИтоговаяСумма    = ИтоговаяСумма    + СтрокаТабличнойЧасти.Сумма;
			ИтоговаяСуммаНДС = ИтоговаяСуммаНДС + СтрокаТабличнойЧасти.СуммаНДС;
			ИтогПоРазделу = ИтогПоРазделу + СтрокаТабличнойЧасти.Сумма;
			СтруктураВарианта.Товары.Добавить(СтрокаТаблицыТовары);
		КонецЦикла;
		// Итоги по последнему разделителю не выведены в цикле.
		// Если предусмотрен вывод итогов, добавим строку с итогами в массив.
				
		СтруктураВарианта.Вставить("ЕстьРазделители", Ложь);
		// Выводим итоги
		СтруктураВарианта.Вставить("Всего",	Формат(ИтоговаяСумма, "ЧЦ=15; ЧДЦ=2"));
		Если ИтоговаяСуммаНДС = 0 Тогда
			СтруктураВарианта.Вставить("СтрокаНДС", НСтр("ru='без налога (НДС)'"));
			СтруктураВарианта.Вставить("ВсегоНДС", "");
		Иначе
			СтруктураВарианта.Вставить("СтрокаНДС", ?(ОбъектДокумент.ЦенаВключаетНДС,
				 НСтр("ru='в том числе НДС:'"),
				 НСтр("ru='Сумма НДС:'")));
			СтруктураВарианта.Вставить("ВсегоНДС",  Формат(ИтоговаяСуммаНДС, "ЧЦ=15; ЧДЦ=2"));
		КонецЕсли; 
		СтруктураВарианта.Вставить("ВсегоКОплате",	Формат(ИтоговаяСумма 
			+ ?(ОбъектДокумент.ЦенаВключаетНДС, 0, ИтоговаяСуммаНДС),
			 "ЧЦ=15; ЧДЦ=2"));
		СтруктураВарианта.Вставить("ТелефонОтветственного",	СтруктураДанных.Телефон);
		СтруктураВарианта.Вставить("EmailОтветственного",	СтруктураДанных.EmailПользователя);
		СтруктураВарианта.Вставить("СтоимостьПропись",	НРег(РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтоговаяСумма 
			+ ?(ОбъектДокумент.ЦенаВключаетНДС, 0, ИтоговаяСуммаНДС), ОбъектДокумент.Валюта)));
		ДанныеОбъекта["Варианты"].Добавить(СтруктураВарианта);
		
		ДанныеОбъекта.Вставить("Валюта",		ОбъектДокумент.Валюта);
		ДанныеОбъекта.Вставить("Валюта_1",		ОбъектДокумент.Валюта);
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			ДанныеОбъекта.Вставить("Курс",			Формат(ОбъектДокумент.Курс, "ЧЦ=10; ЧДЦ=4"));
			ДанныеОбъекта.Вставить("Кратность",		Формат(ОбъектДокумент.Кратность, "ЧЦ=10"));
		Иначе
			СтруктураВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ОбъектДокумент.Валюта, ОбъектДокумент.Дата);
			ДанныеОбъекта.Вставить("Курс",			Формат(СтруктураВалюты.Курс, "ЧЦ=10; ЧДЦ=4"));
			ДанныеОбъекта.Вставить("Кратность",		Формат(СтруктураВалюты.Кратность, "ЧЦ=10"));
		КонецЕсли;
		ДанныеОбъекта.Вставить("Комментарий",	"");
		
		Для Каждого ВариантКП Из ДанныеОбъекта["Варианты"] Цикл
			НомерСтрокиВВарианте = 0;
			Для Каждого Строка Из ВариантКП.Товары Цикл
				Если Строка["ТипСтроки"] = "Номенклатура" Тогда
					НомерСтрокиВВарианте = НомерСтрокиВВарианте + 1;
					Строка["НомерСтроки"] = НомерСтрокиВВарианте;
				Иначе	
					НомерСтрокиВВарианте = 0;
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;	
			
		Возврат ДанныеОбъекта;
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
		
		ДанныеОбъекта = Новый Соответствие;
		
		ОбъектДокумент = СсылкаНаОбъект.ПолучитьОбъект();
		Если НомерВарианта = Неопределено Тогда
			// Печатаем утвержденный вариант.
			СтрокаУтвержденного = ОбъектДокумент.Товары.Найти(Истина, "CRM_Утвержден");
			Если СтрокаУтвержденного = Неопределено Тогда
				НомерВарианта = -1;
			Иначе
				НомерВарианта = СтрокаУтвержденного.CRM_ИДВарианта;
			КонецЕсли;
		КонецЕсли;
		
		// **************** Получим из Автотекста.
		СтруктураТеговШаблона = CRM_АвтотекстПереопределяемый.ПолучитьСтруктуруТеговШаблона(СсылкаНаОбъект);
		Для Каждого КлючЗначение Из СтруктураТеговШаблона Цикл
			ДанныеОбъекта.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		СтруктураДанных = Новый Структура("Телефон, EmailПользователя", "", "");
		Если ЗначениеЗаполнено(ОбъектДокумент.Менеджер) Тогда
			CRM_МетодыМодулейМенеджеровДокументов.КППолучитьКонтактныеДанные(ОбъектДокумент.Менеджер, СтруктураДанных);
		КонецЕсли;
		ДанныеОбъекта.Вставить("Варианты", Новый Массив);
		СписокВариантов = CRM_МетодыМодулейМенеджеровДокументов.КППолучитьВарианты(СсылкаНаОбъект);
		Для Каждого ЭлементСписка Из СписокВариантов Цикл
			Если НЕ (НомерВарианта = -1) И НЕ (ЭлементСписка.Значение = НомерВарианта) Тогда
				Продолжить;
			КонецЕсли;
			ИтогоБезСкидки = 0;
			ИтоговаяСумма	 = 0;
			ИтоговаяСуммаНДС = 0;
			НомерСтрокиПоПорядку = 0;
			ЕстьРазделители = Ложь;
			ТекущийРазделитель = Неопределено;
			ИтогПоРазделу = 0;	
			
			СтруктураВарианта = Новый Структура;
			СтруктураВарианта.Вставить("идВарианта", ЭлементСписка.Значение);
			СтруктураВарианта.Вставить("Утвержден", ЭлементСписка.Пометка);
			СтруктураВарианта.Вставить("СтрокаВарианта", ЭлементСписка.Представление);
			СтруктураВарианта.Вставить("Товары", Новый Массив);
			
			Для Каждого СтрокаТабличнойЧасти Из ОбъектДокумент.Товары Цикл
				Если СтрокаТабличнойЧасти.CRM_ИДВарианта = ЭлементСписка.Значение Тогда
					СтрокаТаблицыТовары = Новый Соответствие;
					Если СтрокаТабличнойЧасти.CRM_ЭтоРазделитель Тогда
						Если НЕ (ТекущийРазделитель = Неопределено) И ТекущийРазделитель.Итог Тогда
							ДополнительныеПараметры = Новый Структура;
							ДополнительныеПараметры.Вставить("Ссылка"				, СсылкаНаОбъект);
							ДополнительныеПараметры.Вставить("ИтогПоРазделу"		, ИтогПоРазделу);
							ДополнительныеПараметры.Вставить("НомерСтроки"			, "");
							ДополнительныеПараметры.Вставить("ТипСтроки"			, "ИтогПоРазделу");
							ДополнительныеПараметры.Вставить("ТекущийРазделитель"	, ТекущийРазделитель);
							СтруктураТеговШаблонаЗначениеКолонок = CRM_АвтотекстПереопределяемый.ПолучитьСтруктуруТеговШаблона(СтрокаТабличнойЧасти,
								 "Товары",
								 ДополнительныеПараметры);
							Для Каждого КлючЗначение Из СтруктураТеговШаблонаЗначениеКолонок Цикл
								СтрокаТаблицыТовары.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
							КонецЦикла;
							// Если предусмотрен вывод итогов, добавим строку с итогами в массив.
							СтруктураВарианта.Товары.Добавить(СтрокаТаблицыТовары);
							СтрокаТаблицыТовары = Новый Соответствие;
						КонецЕсли;	
						ДополнительныеПараметры = Новый Структура;
						ДополнительныеПараметры.Вставить("Ссылка"				, СсылкаНаОбъект);
						ДополнительныеПараметры.Вставить("ИтогПоРазделу"		, "");
						ДополнительныеПараметры.Вставить("НомерСтроки"			, "");
						ДополнительныеПараметры.Вставить("ТипСтроки"			, "Разделитель");
						ДополнительныеПараметры.Вставить("ТекущийРазделитель"	, ТекущийРазделитель);
						СтруктураТеговШаблонаЗначениеКолонок = CRM_АвтотекстПереопределяемый.ПолучитьСтруктуруТеговШаблона(СтрокаТабличнойЧасти,
							 "Товары",
							 ДополнительныеПараметры);
						Для Каждого КлючЗначение Из СтруктураТеговШаблонаЗначениеКолонок Цикл
							СтрокаТаблицыТовары.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
						КонецЦикла;
						ЕстьРазделители = Истина;
						ТекущийРазделитель = СтрокаТабличнойЧасти.Номенклатура;
						ИтогПоРазделу = 0;
					Иначе
						НомерСтрокиПоПорядку = НомерСтрокиПоПорядку + 1;
						ДополнительныеПараметры = Новый Структура;
						ДополнительныеПараметры.Вставить("Ссылка"				, СсылкаНаОбъект);
						ДополнительныеПараметры.Вставить("ИтогПоРазделу"		, ИтогПоРазделу);
						ДополнительныеПараметры.Вставить("НомерСтроки"			, НомерСтрокиПоПорядку);
						ДополнительныеПараметры.Вставить("ТипСтроки"			, "Номенклатура");
						ДополнительныеПараметры.Вставить("ТекущийРазделитель"	, ТекущийРазделитель);
						СтруктураТеговШаблонаЗначениеКолонок = CRM_АвтотекстПереопределяемый.ПолучитьСтруктуруТеговШаблона(СтрокаТабличнойЧасти,
							 "Товары",
							 ДополнительныеПараметры);
						Для Каждого КлючЗначение Из СтруктураТеговШаблонаЗначениеКолонок Цикл
							СтрокаТаблицыТовары.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
						КонецЦикла;
						СуммаБезСкидки	= СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
						ИтогоБезСкидки = ИтогоБезСкидки + СуммаБезСкидки;
						ИтоговаяСумма    = ИтоговаяСумма    + СтрокаТабличнойЧасти.Сумма;
						ИтоговаяСуммаНДС = ИтоговаяСуммаНДС + СтрокаТабличнойЧасти.СуммаНДС;
						ИтогПоРазделу = ИтогПоРазделу + СтрокаТабличнойЧасти.Сумма;
					КонецЕсли;
					СтруктураВарианта.Товары.Добавить(СтрокаТаблицыТовары);
				КонецЕсли;
			КонецЦикла;
			// Итоги по последнему разделителю не выведены в цикле.
			// Если предусмотрен вывод итогов, добавим строку с итогами в массив.
			Если НЕ (ТекущийРазделитель = Неопределено) И ТекущийРазделитель.Итог Тогда
				СтрокаТаблицыТовары = Новый Соответствие;
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Ссылка"				, СсылкаНаОбъект);
				ДополнительныеПараметры.Вставить("ИтогПоРазделу"		, ИтогПоРазделу);
				ДополнительныеПараметры.Вставить("НомерСтроки"			, "");
				ДополнительныеПараметры.Вставить("ТипСтроки"			, "ИтогПоРазделу");
				ДополнительныеПараметры.Вставить("ТекущийРазделитель"	, ТекущийРазделитель);
				СтруктураТеговШаблонаЗначениеКолонок = CRM_АвтотекстПереопределяемый.ПолучитьСтруктуруТеговШаблона(СтрокаТабличнойЧасти,
					 "Товары",
					 ДополнительныеПараметры);
				Для Каждого КлючЗначение Из СтруктураТеговШаблонаЗначениеКолонок Цикл
					СтрокаТаблицыТовары.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
				КонецЦикла;
				СтруктураВарианта.Товары.Добавить(СтрокаТаблицыТовары);
			КонецЕсли;
			СтруктураВарианта.Вставить("ЕстьРазделители", ЕстьРазделители);
			// Выводим итоги
			СтруктураВарианта.Вставить("Всего",	Формат(ИтоговаяСумма, "ЧЦ=15; ЧДЦ=2"));
			Если ИтоговаяСуммаНДС = 0 Тогда
				СтруктураВарианта.Вставить("СтрокаНДС", НСтр("ru='без налога (НДС)'"));
				СтруктураВарианта.Вставить("ВсегоНДС", "");
			Иначе
				СтруктураВарианта.Вставить("СтрокаНДС", ?(ОбъектДокумент.ЦенаВключаетНДС,
					 НСтр("ru='в том числе НДС:'"),
					 НСтр("ru='Сумма НДС:'")));
				СтруктураВарианта.Вставить("ВсегоНДС",  Формат(ИтоговаяСуммаНДС, "ЧЦ=15; ЧДЦ=2"));
			КонецЕсли; 
			СтруктураВарианта.Вставить("ВсегоКОплате",	Формат(ИтоговаяСумма 
				+ ?(ОбъектДокумент.ЦенаВключаетНДС, 0, ИтоговаяСуммаНДС),
				 "ЧЦ=15; ЧДЦ=2"));
			СтруктураВарианта.Вставить("ТелефонОтветственного",	СтруктураДанных.Телефон);
			СтруктураВарианта.Вставить("EmailОтветственного",	СтруктураДанных.EmailПользователя);
			СтруктураВарианта.Вставить("СтоимостьПропись",	НРег(РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтоговаяСумма 
				+ ?(ОбъектДокумент.ЦенаВключаетНДС, 0, ИтоговаяСуммаНДС), ОбъектДокумент.Валюта)));
			ДанныеОбъекта["Варианты"].Добавить(СтруктураВарианта);
		КонецЦикла;
		
		ДанныеОбъекта.Вставить("Валюта",		ОбъектДокумент.Валюта);
		ДанныеОбъекта.Вставить("Валюта_1",		ОбъектДокумент.Валюта);
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			ДанныеОбъекта.Вставить("Курс",			Формат(ОбъектДокумент.Курс, "ЧЦ=10; ЧДЦ=4"));
			ДанныеОбъекта.Вставить("Кратность",		Формат(ОбъектДокумент.Кратность, "ЧЦ=10"));
		Иначе
			СтруктураВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ОбъектДокумент.Валюта, ОбъектДокумент.Дата);
			ДанныеОбъекта.Вставить("Курс",			Формат(СтруктураВалюты.Курс, "ЧЦ=10; ЧДЦ=4"));
			ДанныеОбъекта.Вставить("Кратность",		Формат(СтруктураВалюты.Кратность, "ЧЦ=10"));
		КонецЕсли;
		ДанныеОбъекта.Вставить("Комментарий",	ОбъектДокумент.Комментарий);
		
		Для Каждого ВариантКП Из ДанныеОбъекта["Варианты"] Цикл
			НомерСтрокиВВарианте = 0;
			Для Каждого Строка Из ВариантКП.Товары Цикл
				Если Строка["ТипСтроки"] = "Номенклатура" Тогда
					НомерСтрокиВВарианте = НомерСтрокиВВарианте + 1;
					Строка["НомерСтроки"] = НомерСтрокиВВарианте;
				Иначе	
					НомерСтрокиВВарианте = 0;
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;	
			
		Возврат ДанныеОбъекта;
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
		 ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		
		ДанныеОбъекта = Новый Соответствие;
		ОбъектДокумент = СсылкаНаОбъект.ПолучитьОбъект();
		ДанныеОбъекта.Вставить("Тема", ОбъектДокумент.Тема);
		ДанныеОбъекта.Вставить("Дата", ОбъектДокумент.Дата);
		
		ОтправительПредставление = ОбъектДокумент.ОтправительПредставление;
		ОтправительПредставление = СтрЗаменить(ОтправительПредставление, "<", "&lt;");
		ОтправительПредставление = СтрЗаменить(ОтправительПредставление, ">", "&gt;");
		ДанныеОбъекта.Вставить("От", ОтправительПредставление);
		
		СписокПолучателейПисьма = ОбъектДокумент.СписокПолучателейПисьма;
		СписокПолучателейПисьма = СтрЗаменить(СписокПолучателейПисьма, "<", "&lt;");
		СписокПолучателейПисьма = СтрЗаменить(СписокПолучателейПисьма, ">", "&gt;");
		ДанныеОбъекта.Вставить("Кому", СписокПолучателейПисьма);
		
		Если ОбъектДокумент.ТипТекста <> Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
			ТекстПисьма = ОбъектДокумент.ТекстHTML;
			ТекстПисьма = Прав(ТекстПисьма, СтрДлина(ТекстПисьма) - СтрНайти(ТекстПисьма, "<body"));
			ТекстПисьма = Прав(ТекстПисьма, СтрДлина(ТекстПисьма) - СтрНайти(ТекстПисьма, ">"));
			ДанныеОбъекта.Вставить("Формат", "HTML");
		Иначе
			ТекстПисьма = ОбъектДокумент.Текст;
			ДанныеОбъекта.Вставить("Формат", "Текст");
		КонецЕсли;
		ДанныеОбъекта.Вставить("ТекстПисьма", ТекстПисьма);
		Возврат ДанныеОбъекта;
		
	Иначе
		МетаОбъект = Метаданные.НайтиПоТипу(ТипЗнч(СсылкаНаОбъект));
		ДанныеОбъекта = Новый Соответствие;
		
		// **************** Получим из Автотекста.
		СтруктураТеговШаблона = CRM_АвтотекстПереопределяемый.ПолучитьСтруктуруТеговШаблона(СсылкаНаОбъект);
		Для Каждого КлючЗначение Из СтруктураТеговШаблона Цикл
			ДанныеОбъекта.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		// Данные табличных частей объекта.
		ДанныеОбъекта.Вставить("ТабличныеЧасти", Новый Массив);
		Для Каждого ТабличнаяЧасть Из МетаОбъект.ТабличныеЧасти Цикл
			ДанныеОбъекта["ТабличныеЧасти"].Добавить(ТабличнаяЧасть.Имя);
			ДанныеОбъекта.Вставить(ТабличнаяЧасть.Имя, Новый Массив);
			Ном = 0;
			Для Каждого СтрокаТабличнойЧасти Из СсылкаНаОбъект[ТабличнаяЧасть.Имя] Цикл
				Ном = Ном + 1;
				СтрокаТаблицыТовары = Новый Соответствие;
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Ссылка"				, СсылкаНаОбъект);
				ДополнительныеПараметры.Вставить("НомерСтроки"			, Ном);
				СтруктураТеговШаблонаЗначениеКолонок = CRM_АвтотекстПереопределяемый.ПолучитьСтруктуруТеговШаблона(СтрокаТабличнойЧасти,
					 ТабличнаяЧасть.Имя,
					 ДополнительныеПараметры);
				Для Каждого КлючЗначение Из СтруктураТеговШаблонаЗначениеКолонок Цикл
					СтрокаТаблицыТовары.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
				КонецЦикла;
				ДанныеОбъекта[ТабличнаяЧасть.Имя].Добавить(СтрокаТаблицыТовары);
			КонецЦикла;
		КонецЦикла;
		Возврат ДанныеОбъекта;
	КонецЕсли;
	
КонецФункции // CRM_ПолучитьДанныеОбъекта()

// Фукнция возвращает макеты и данные объектов.
//
// Параметры:
//	ИмяМакета			- Строка			- Имя макета.
//	ОбъектыНазначения	- СписокЗначений	- Список объектов.
//	НомерВарианта		- Число				- Номер варианта.
//
// Возвращаемое значение:
//	Структура	- Структура, содержащая макеты и данные.
//
Функция CRM_ПолучитьВнешниеМакетыИДанныеОбъектов(ИмяМакета, ОбъектыНазначения, НомерВарианта = Неопределено) Экспорт
	
	Перем ДвоичныеДанныеМакета;
	
	Если СтрНайти(ИмяМакета, "ПФ_DOC") > 0 Тогда
		ТипМакета = "DOC";
	ИначеЕсли СтрНайти(ИмяМакета, "ПФ_ODT") > 0 Тогда
		ТипМакета = "ODT";
	КонецЕсли;
	
	ЧастиИмени = СтрРазделить(ИмяМакета, "_", Ложь);
	ПутьКМакету = "ПФ_" + ЧастиИмени[ЧастиИмени.ВГраница()];
	ДвоичныеДанныеМакета = УправлениеПечатью.МакетПечатнойФормы(ПутьКМакету);
	
	МассивДокументов = ОбъектыНазначения.ВыгрузитьЗначения();
	ДанныеПоВсемОбъектам = Новый Соответствие;
	МассивИменТабличныхЧастей = Неопределено;
	
	Для Каждого ОбъектСсылка Из МассивДокументов Цикл
		ДанныеОбъектаПоМакетам = Новый Соответствие;
		ПолученныеДанные = CRM_ПолучитьДанныеОбъекта(ОбъектСсылка, НомерВарианта);
		ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, ПолученныеДанные);
		ДанныеПоВсемОбъектам.Вставить(ОбъектСсылка, ДанныеОбъектаПоМакетам);
		Если МассивИменТабличныхЧастей = Неопределено Тогда
			Если ЗначениеЗаполнено(ПолученныеДанные["ТабличныеЧасти"]) Тогда
				МассивИменТабличныхЧастей = ПолученныеДанные["ТабличныеЧасти"];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	
	ДвоичныеДанныеМакетов.Вставить(ИмяМакета, ДвоичныеДанныеМакета);
	ТипыМакетов.Вставить(ИмяМакета, ТипМакета);
	ОписаниеОбластей.Вставить(ИмяМакета, CRM_ПолучитьОписаниеОбластейМакетаОфисногоДокумента(МассивИменТабличныхЧастей));
	МакетыИДанные = Новый Структура("Данные, Макеты", ДанныеПоВсемОбъектам, 
		Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов", ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов));
	МакетыИДанные.Вставить("ЛокальныйКаталогФайловПечати", "");
	Возврат МакетыИДанные;
	
КонецФункции // CRM_ПолучитьВнешниеМакетыИДанныеОбъектов()

// Фукнция возвращает макеты и данные объектов.
//
// Параметры:
//	ИмяМакета			- Строка			- Имя макета.
//	ОбъектыНазначения	- СписокЗначений	- Список объектов.
//	НомерВарианта		- Число				- Номер варианта.
//
// Возвращаемое значение:
//	Структура	- Структура, содержащая макеты и данные.
//
Функция CRM_ПолучитьМакетыИДанныеОбъектов(ИмяМакета, ОбъектыНазначения, НомерВарианта = Неопределено) Экспорт
	
	Перем ДвоичныеДанныеМакета;
	
	Если СтрНайти(ИмяМакета, "ПФ_DOC") > 0 Тогда
		ТипМакета = "DOC";
	ИначеЕсли СтрНайти(ИмяМакета, "ПФ_ODT") > 0 Тогда
		ТипМакета = "ODT";
	КонецЕсли;
	
	МетаОбъект = Метаданные.НайтиПоТипу(ТипЗнч(ОбъектыНазначения[0].Значение));
	
	ПолноеИмя = МетаОбъект.ПолноеИмя();
	
	ДвоичныеДанныеМакета = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмя + "." + ИмяМакета);
	
	МассивДокументов = ОбъектыНазначения.ВыгрузитьЗначения();
	ДанныеПоВсемОбъектам = Новый Соответствие;
	МассивИменТабличныхЧастей = Неопределено;
	
	Для Каждого ОбъектСсылка Из МассивДокументов Цикл
		ДанныеОбъектаПоМакетам = Новый Соответствие;
		ПолученныеДанные = CRM_ПолучитьДанныеОбъекта(ОбъектСсылка, НомерВарианта);
		ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, ПолученныеДанные);
		ДанныеПоВсемОбъектам.Вставить(ОбъектСсылка, ДанныеОбъектаПоМакетам);
		Если МассивИменТабличныхЧастей = Неопределено Тогда
			Если ПолученныеДанные.Получить("ТабличныеЧасти") <> Неопределено Тогда
				МассивИменТабличныхЧастей = ПолученныеДанные.ТабличныеЧасти;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	
	ДвоичныеДанныеМакетов.Вставить(ИмяМакета, ДвоичныеДанныеМакета);
	ТипыМакетов.Вставить(ИмяМакета, ТипМакета);
	ОписаниеОбластей.Вставить(ИмяМакета, CRM_ПолучитьОписаниеОбластейМакетаОфисногоДокумента(МассивИменТабличныхЧастей));
	МакетыИДанные = Новый Структура("Данные, Макеты", ДанныеПоВсемОбъектам, 
		Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов", ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов));
	МакетыИДанные.Вставить("ЛокальныйКаталогФайловПечати", "");
	Возврат МакетыИДанные;
	
КонецФункции // CRM_ПолучитьВнешниеМакетыИДанныеОбъектов()

// Фукнция возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
//  по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  СсылкаНаОбъект	- Произвольный - элемент справочника, документ, ...
//  ИменаРеквизитов	- Строка			- имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//
Функция ПолучитьЗначенияРеквизитов(СсылкаНаОбъект, ИменаРеквизитов) Экспорт
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, ИменаРеквизитов);
КонецФункции // ПолучитьЗначенияРеквизитов()

// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  СсылкаНаОбъект	- Произвольный - элемент справочника, документ, ...
//  ИмяРеквизита	- Строка - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
КонецФункции // ПолучитьЗначениеРеквизита()

#КонецОбласти // Печать

#Область Взаимодействия
	
// Функция заполняет поиск пользователя в учетной записи электронной почты.
//
// Параметры:
//	УчетнаяЗапись	- СправочникСсылка	- Учетная запись электронной почты.
//	Пользователь	- СправочникСсылка	- Текущий пользователь.
//
// Возвращаемое значение:
//	Булево	- Присутствие пользователя в учетной записи электронной почты.
//
Функция НайтиПользователяВУчетнойЗаписи(УчетнаяЗапись, Пользователь) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗапись",	УчетнаяЗапись);
	РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(Пользователь);
	РолиПользователя.Добавить(Пользователь);
	Запрос.УстановитьПараметр("Пользователь", РолиПользователя);
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь КАК Пользователь
	               |ИЗ
	               |	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
	               |ГДЕ
	               |	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись = &УчетнаяЗапись
	               |	И CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь В (&Пользователь)";
	ВыборкаРезультатовЗапроса = Запрос.Выполнить();
	Возврат НЕ ВыборкаРезультатовЗапроса.Пустой();
КонецФункции // НайтиПользователяВУчетнойЗаписи()

// Процедура устанавливает нового ответственного в подчиненных взаимодействиях.
//
// Параметры:
//	ДокументОснование	 - ДокументСсылка - Документ основание.
//	ПрежнийОтветственный - СправочникСсылка	- Прежний ответственный.
//	НовыйОтветственный	 - СправочникСсылка	- Новый ответственный.
//
Процедура УстановитьНовогоОтветственногоВПодчиненныхВзаимодействиях(ДокументОснование,
	 ПрежнийОтветственный,
	 НовыйОтветственный) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Взаимодействие.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.CRM_Взаимодействие КАК Взаимодействие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_СостоянияСобытий КАК СостоянияСобытий
	|		ПО Взаимодействие.СтатусВзаимодействия = СостоянияСобытий.Ссылка
	|ГДЕ
	|	Взаимодействие.Ответственный = &ПрежнийОтветственный
	|	И Взаимодействие.ДокументОснование = &ДокументОснование
	|	И СостоянияСобытий.ТипСостояния В (ЗНАЧЕНИЕ(Перечисление.CRM_ТипыСостоянийСобытий.Запланировано), ЗНАЧЕНИЕ(Перечисление.CRM_ТипыСостоянийСобытий.ВРаботе))");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование); 
	Запрос.УстановитьПараметр("ПрежнийОтветственный", ПрежнийОтветственный); 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ПрежнийОтветственный);
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.CRM_СобытияКалендаря.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ПрежнийОтветственный);
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
		НаборЗаписей.Записать();
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Ответственный	= НовыйОтветственный;
		ДокументОбъект.Подразделение	= НовыйОтветственный.Подразделение;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // Взаимодействия

#Область ПрисоединенныеФайлы
	
// Функция возвращает ТипНомер по типу контактной информации.
//
// Параметры:
//  Тип	 - ПеречислениеСсылка.ТипыКонтактнойИнформации	 - Тип контактной информации.
// 
// Возвращаемое значение:
//  Число - ТипНомер (1 - Адрес, 2 - Телефон или факс, 0 - Все остальные типы).
//
Функция ПоТипуКонтактнойИнформацииПолучитьТипНомер(Тип) Экспорт
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат 1;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
		 ИЛИ Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат 2;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции // ПоТипуКонтактнойИнформацииПолучитьТипНомер()

// Функция возвращает доступно ли редактирование в диалоге по типу контактной информации.
//
// Параметры:
//	Тип	- ПеречислениеСсылка.ТипыКонтактнойИнформации	- Тип контактной информации.
//
// Возвращаемое значение:
//	Булево	- Доступно или нет редактирование в диалоге.
//
Функция ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(Тип) Экспорт
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции // ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге()

#КонецОбласти // ПрисоединенныеФайлы

#Область КонтактнаяИнформация
	
// Функция возвращает номер по типу контактной информации.
//
// Параметры:
//	Тип	- ПеречислениеСсылка.ТипыКонтактнойИнформации	- Тип контактной информации.
//
// Возвращаемое значение:
//	Число	- 1 - Адрес, 2 - Телефон или факс, 0 - Все остальные типы.
//
Функция ПоТипуКонтактнойИнформацииПолучитьНомер(Тип) Экспорт 
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат 1;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
		 ИЛИ Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат 2;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции // ПоТипуКонтактнойИнформацииПолучитьНомер()

// Функция возвращает признак того, хранит ли строка данные XML.
//
// Параметры:
//  Текст	 - Строка	 - Проверяемая строка.
// 
// Возвращаемое значение:
//  Булево - Признак строки XML.
//
Функция ЭтоСтрокаXML(Текст) Экспорт
	
	Возврат ТипЗнч(Текст) = Тип("Строка") И Лев(СокрЛ(Текст), 1) = "<";
	
КонецФункции

// Функция возвращает структуру ("Представление", "ЗначенияПолей"), заполненную строкой и списком.
//
// Параметры:
//  Данные				 - 		 - XDTO контактной информации или строка XML.
//  СтарыйСоставПолей	 - булево	 - необязательный флаг того, что из состава полей будут исключены
//  	поля, отсутствующие в версиях БСП младше 2.1.3.
// 
// Возвращаемое значение:
//  Структура - Структура, содержащая контактную информацию.
//
Функция КонтактнаяИнформацияВСтаруюСтруктуру(Данные, СтарыйСоставПолей = Ложь) Экспорт
	Возврат Обработки.РасширенныйВводКонтактнойИнформации.КонтактнаяИнформацияВСтаруюСтруктуру(Данные);
КонецФункции // КонтактнаяИнформацияВСтаруюСтруктуру()

// Функция преобразует значения полей в XML.
//
// Параметры:
//	КонтактнаяИнформацияСписком	- СписокЗначений	- Список, содержащий контактную информацию.
//	ВидКонтактнойИнформации		- СправочникСсылка	- Вид контактной информации.
//
// Возвращаемое значение:
//	Строка	- Контактная информация в виде XML.
//
Функция ЗначениеПолейВXML(КонтактнаяИнформацияСписком, ВидКонтактнойИнформации) Экспорт
	Возврат CRM_УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXDTOВXML(CRM_УправлениеКонтактнойИнформацией.КонтактнаяИнформацияИзXML(КонтактнаяИнформацияСписком,
		 ВидКонтактнойИнформации));
КонецФункции // ЗначениеПолейВXML()

// Функция преобразует значения полей в JSON.
//
// Параметры:
//	КонтактнаяИнформацияСписком	- СписокЗначений	- Список, содержащий контактную информацию.
//	ВидКонтактнойИнформации		- СправочникСсылка	- Вид контактной информации.
//
// Возвращаемое значение:
//	Строка	- Контактная информация в виде JSON.
//
Функция ЗначениеПолейВJSON(КонтактнаяИнформацияСписком, ВидКонтактнойИнформации) Экспорт
	Возврат УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(CRM_УправлениеКонтактнойИнформацией.КонтактнаяИнформацияИзXML(КонтактнаяИнформацияСписком,
		 ВидКонтактнойИнформации));
КонецФункции // ЗначениеПолейВJSON()

// Функция преобразует строку в XDTO контактную информацию телефона.
//
// Параметры:
//  ЗначенияПолей	 - 	 - строка с сериализованной информацией, значения полей.
//  Представление	 - 	 - представление старший-младший, используется для попытки разбора,
//  	если ЗначенияПолей пусто.
//  ОжидаемыйТип	 - 	 - необязательный тип для контроля.
// 
// Возвращаемое значение:
//  Структура - Структура, содержащая контактную информацию.
//
Функция КонтактнаяИнформацияСлужебный_ДесериализацияТелефона(ЗначенияПолей, Представление = "",
	 ОжидаемыйТип = Неопределено) Экспорт
	XDTOКонтактная = CRM_УправлениеКонтактнойИнформацией.ДесериализацияТелефона(ЗначенияПолей,
		 Представление,
		 ОжидаемыйТип);
	Телефон = XDTOКонтактная.Состав;
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Представление",	XDTOКонтактная.Представление);
	СтруктураВозврата.Вставить("Комментарий",	XDTOКонтактная.Комментарий);
	СтруктураВозврата.Вставить("КодСтраны",		Телефон.КодСтраны);
	СтруктураВозврата.Вставить("КодГорода",		Телефон.КодГорода);
	СтруктураВозврата.Вставить("НомерТелефона",	Телефон.Номер);
	СтруктураВозврата.Вставить("Добавочный",	Телефон.Добавочный);
	Возврат СтруктураВозврата;
КонецФункции // КонтактнаяИнформацияСлужебный_ДесериализацияТелефона()

// Функция возвращает структуру контактной информации.
//
// Параметры:
//	Реквизиты				- Структура				- Структура реквизитов.
//	ТипКонтактнойИнформации	- ПеречислениеСсылка	- Тип контактной информации.
//
// Возвращаемое значение:
//	Структура	- Структура, содержащая контактную информацию.
//
Функция КонтактнаяИнформацияПоЗначениюРеквизитов(Реквизиты, ТипКонтактнойИнформации) Экспорт
	
	Результат = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеНовойКонтактнойИнформации(ТипКонтактнойИнформации);
	
	Результат.CountryCode = Реквизиты.КодСтраны;
	Результат.AreaCode    = Реквизиты.КодГорода;
	Результат.Number      = Реквизиты.НомерТелефона;
	Результат.ExtNumber   = Реквизиты.Добавочный;
	Результат.Value       = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(Реквизиты.КодСтраны,
		 Реквизиты.КодГорода, Реквизиты.НомерТелефона, Реквизиты.Добавочный,
		 "");
	Результат.Comment     = Реквизиты.Комментарий;
	
	Возврат Новый Структура("КонтактнаяИнформация, Представление, Комментарий",
		CRM_УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXDTOВXML(Результат),
		Результат.Value, Результат.Comment);
КонецФункции // КонтактнаяИнформацияПоЗначениюРеквизитов()

// Функция возвращает контактной информации (адрес) в виде списка.
//
// Параметры:
//	СтрокаАдреса - Строка - строка адреса в формате XML или в формате "9 запятых".
//
// Возвращаемое значение:
//	СписокЗначений - список значений полей , содержащих контактную информацию.
//
Функция ПреобразоватьСтрокуВСписокПолей(СтрокаАдреса) Экспорт
	
	 Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(СтрокаАдреса) Тогда
		СписокПолей = КонтактнаяИнформацияВСтаруюСтруктуру(СтрокаАдреса).ЗначенияПолей;
	Иначе 	
		СписокПолей = УправлениеКонтактнойИнформациейСлужебный.ПреобразоватьСтрокуВСписокПолей(СтрокаАдреса);
	КонецЕсли;
	
	Возврат СписокПолей;
	
КонецФункции // ПреобразоватьСтрокуВСписокПолей()

#КонецОбласти // КонтактнаяИнформация

#Область РаботаСИнтересом

// Функция возвращает массив завершенных состояний интереса.
// 
// Возвращаемое значение:
//	Массив - Массив завершенных состояний интереса.
//
Функция ПолучитьМассивЗавершенныхСостоянийИнтереса() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_СостоянияИнтересов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	               |ГДЕ
	               |	CRM_СостоянияИнтересов.Завершено
	               |	И НЕ CRM_СостоянияИнтересов.ПометкаУдаления";
	МассивСостояний = Новый Массив;				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСостояний.Добавить(Выборка.Ссылка);
	КонецЦикла;	
	Возврат МассивСостояний;
КонецФункции // ПолучитьМассивЗавершенныхСостоянийИнтереса()

// Функция возвращает массив интересов клиента по определенному типу услуги.
//
// Параметры:
//	Интерес		- ДокументСсылка	- Текущий интерес.
//	Клиент		- СправочникСсылка	- Клиент
//	ТипУслуги		- СправочникСсылка	- ТипУслуги
//
// Возвращаемое значение:
//	Массив	- массив интересов клиента по определенному типу услуги.
//
Функция ПолучитьМассивИнтересовКлиента(Интерес, Клиент, ТипУслуги) Экспорт
	Запрос = Новый Запрос;
	МассивСостояний	= ПолучитьМассивЗавершенныхСостоянийИнтереса();
	СписокСостояний	= Новый СписокЗначений;
	СписокСостояний.ЗагрузитьЗначения(МассивСостояний);
	Запрос.УстановитьПараметр("Интерес",			Интерес);
	Запрос.УстановитьПараметр("Клиент",				Клиент);
	Запрос.УстановитьПараметр("ТипУслуги",			ТипУслуги);
	Запрос.УстановитьПараметр("СписокСостояний",	СписокСостояний);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Интерес.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.CRM_Интерес КАК Интерес
	               |ГДЕ
	               |	НЕ Интерес.Ссылка = &Интерес
	               |	И НЕ Интерес.ПометкаУдаления
	               |	И Интерес.Партнер = &Клиент
	               |	И Интерес.ТипУслуги = &ТипУслуги
	               |	И НЕ Интерес.СостояниеИнтереса В (&СписокСостояний)
	               |	И НЕ Интерес.Завершен";
	МассивИнтересовКлиента = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		МассивИнтересовКлиента.Добавить(Выборка.Ссылка);
	КонецЦикла;
	Возврат МассивИнтересовКлиента;
КонецФункции // ПолучитьМассивИнтересовКлиента(()	

// Функция возвращает массив интересов потенциального клиента.
//
// Параметры:
//	Интерес		- ДокументСсылка	- Текущий интерес.
//	Клиент		- СправочникСсылка	- Клиент
//
// Возвращаемое значение:
//	Массив	- массив интересов потенциального клиента.
//
Функция ПолучитьМассивИнтересовПотенциальногоКлиента(Интерес, Клиент) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Интерес",	Интерес);
	Запрос.УстановитьПараметр("Клиент",		Клиент);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	CRM_Интерес.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.CRM_Интерес КАК CRM_Интерес
	               |ГДЕ
	               |	НЕ CRM_Интерес.Ссылка = &Интерес
	               |	И НЕ CRM_Интерес.ПометкаУдаления
	               |	И CRM_Интерес.ПотенциальныйКлиент = &Клиент
	               |	И CRM_Интерес.Завершен = ЛОЖЬ";
	МассивИнтересовКлиента = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		МассивИнтересовКлиента.Добавить(Выборка.Ссылка);
	КонецЦикла;
	Возврат МассивИнтересовКлиента;
КонецФункции // ПолучитьМассивИнтересовПотенциальногоКлиента()

// Функция возвращает массив активных интересов клиента
//
// Параметры:
//  Клиент	 - СправочникСсылка	 - Клиент
// 
// Возвращаемое значение:
//  Массив - массив интересов клиента.
//
Функция ПолучитьМассивАктивныхИнтересовКлиента(Клиент) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_Интерес.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.CRM_Интерес КАК CRM_Интерес
	|ГДЕ
	|	CRM_Интерес.Партнер = &Клиент
	|	И НЕ CRM_Интерес.Завершен
	|	И НЕ CRM_Интерес.ПометкаУдаления";

	Если ТипЗнч(Клиент) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Партнер", "КонтактноеЛицо");
	ИначеЕсли ТипЗнч(Клиент) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Партнер", "ПотенциальныйКлиент");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции // ПолучитьМассивАктивныхИнтересовКлиента()

// Процедура вызывается из подписки CRM_ЗадачаПередЗаписью. Предназначена для заполнения
//  общих реквизитов CRM_Интерес и CRM_СостояниеИнтереса в документах, а также для некоторых
//  документов, заполнение на основании документа CRM_Интерес.
//
// Параметры:
//  Источник - ДокументОбъект - Документ источник.
//  Отказ	 - Булево		  - Признак отказа.
//
Процедура ЗаполнитьИнтересСостояниеЗадачи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() И ЗначениеЗаполнено(Источник.БизнесПроцесс) Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ПринятаКИсполнениюПередЗаписью", Источник.Ссылка.ПринятаКИсполнению);
	Источник.ДополнительныеСвойства.Вставить("ВыполненаПередЗаписью", Источник.Ссылка.Выполнена);
	
КонецПроцедуры

// Процедура вызывается из подписки CRM_ОбработкаЗаполнения. Предназначена для заполнения
//  общих реквизитов CRM_Интерес и CRM_СостояниеИнтереса в документах, а также для некоторых
//  документов, заполнение на основании документа CRM_Интерес.
//
// Параметры:
//  Источник			 - ДокументОбъект	 - Источник
//  ДанныеЗаполнения	 - ДокументСсылка	 - Основание заполнения.
//  СтандартнаяОбработка - Булево			 - Признак выполнения стандартной обработки.
//
Процедура ЗаполнитьИнтересСостояние(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ТелефонныйЗвонок") Тогда
		CRM_Взаимодействия.CRM_ЗаполнитьРеквизитыПоУмолчанию(Источник, ДанныеЗаполнения);
		Возврат;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.СообщениеSMS") Тогда
		CRM_Взаимодействия.CRM_ЗаполнитьРеквизитыПоУмолчанию(Источник, ДанныеЗаполнения);
		Возврат;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
		CRM_Взаимодействия.CRM_ЗаполнитьРеквизитыПоУмолчанию(Источник, ДанныеЗаполнения);
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ДанныеЗаполнения") Тогда 
		ДанныеЗаполнения = Источник.ДополнительныеСвойства.ДанныеЗаполнения;
	КонецЕсли;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	// Заполнение Партнера
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.CRM_Интерес") Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Партнер")
			И НЕ ЗначениеЗаполнено(Источник.Партнер) Тогда
			Источник.Партнер = ДанныеЗаполнения.Партнер;
		КонецЕсли;
		
		Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			
			Если ТипЗнч(Источник) = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") Тогда
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Соглашение") Тогда
					Если Не (ЗначениеЗаполнено(Источник["Соглашение"]) 
					   И Источник["Соглашение"] = ДанныеЗаполнения["Соглашение"]) Тогда
						
						Источник["Соглашение"] = ДанныеЗаполнения["Соглашение"];
						
						Источник.ЗаполнитьУсловияПродажПоСоглашению();				
					
					КонецЕсли;
				КонецЕсли;
				
				// Заполним табличные части
				
				ДобавленыСтрокиТовары = Ложь;
				МассивКлючейСвязи = Новый Массив;
	
				Если ДанныеЗаполнения["Товары"].Количество() > 0 Тогда
					Для каждого ДанныеЗаполненияСтрокаТовары Из ДанныеЗаполнения["Товары"] Цикл
						Если ЗначениеЗаполнено(ДанныеЗаполненияСтрокаТовары.Номенклатура)
						   И ЗначениеЗаполнено(ДанныеЗаполненияСтрокаТовары.Количество)
						   И ЗначениеЗаполнено(ДанныеЗаполненияСтрокаТовары.Цена) 
						   И ЗначениеЗаполнено(ДанныеЗаполненияСтрокаТовары.Сумма) Тогда
						   
						    ДобавленыСтрокиТовары = Истина;
							ИсточникТоварыСтрока = Источник["Товары"].Добавить();
							ЗаполнитьЗначенияСвойств(ИсточникТоварыСтрока, ДанныеЗаполненияСтрокаТовары);
							
							Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
								ИсточникТоварыСтрока.CRM_Содержание = ДанныеЗаполненияСтрокаТовары.Содержание;
								ИсточникТоварыСтрока.ЕдиницаИзмерения = ДанныеЗаполненияСтрокаТовары.Упаковка; 
								ИсточникТоварыСтрока.Количество = ДанныеЗаполненияСтрокаТовары.КоличествоУпаковок;
								Если Пустаястрока(ИсточникТоварыСтрока.CRM_Содержание) Тогда
									МодульCRM_Модуль_РаботаСФормамиСервер = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_РаботаСФормамиСервер");
									ИсточникТоварыСтрока.CRM_Содержание = МодульCRM_Модуль_РаботаСФормамиСервер.СформироватьСодержаниеДляПечати(ИсточникТоварыСтрока.Номенклатура,
										 ИсточникТоварыСтрока.Характеристика);
								КонецЕсли;
							КонецЕсли;
							
							ИсточникТоварыСтрока.CRM_ИДВарианта = 1;
							
							Если ДанныеЗаполненияСтрокаТовары.КлючСвязи > 0 
							   И МассивКлючейСвязи.Найти(ДанныеЗаполненияСтрокаТовары.КлючСвязи) = Неопределено Тогда
							   
							   МассивКлючейСвязи.Добавить(ДанныеЗаполненияСтрокаТовары.КлючСвязи);
								
							КонецЕсли;	
							
						КонецЕсли;	
						
					КонецЦикла;	
						
				КонецЕсли;
				
				Если ДобавленыСтрокиТовары Тогда
					
					ДобавленыСкидки = Ложь;
					
					Если ДанныеЗаполнения["СкидкиНаценки"].Количество() > 0 Тогда
						Для каждого ДанныеЗаполненияСтрокаСкидкиНаценки Из ДанныеЗаполнения["СкидкиНаценки"] Цикл
							Если Не МассивКлючейСвязи.Найти(ДанныеЗаполненияСтрокаСкидкиНаценки.КлючСвязи) = Неопределено Тогда
								
								ДобавленыСкидки = Истина;
								ИсточникСкидкиНаценкиСтрока = Источник["СкидкиНаценки"].Добавить();
								ЗаполнитьЗначенияСвойств(ИсточникСкидкиНаценкиСтрока, ДанныеЗаполненияСтрокаСкидкиНаценки);
								
							КонецЕсли;	
						КонецЦикла;	
					КонецЕсли;
					
					Если ДобавленыСкидки Тогда
						Источник["СкидкиРассчитаны"] = ДанныеЗаполнения["СкидкиРассчитаны"];
					КонецЕсли;		
					
				КонецЕсли;		
			КонецЕсли;
		
		КонецЕсли;
		
		Если ДанныеЗаполнения = Неопределено Тогда
			
			ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойПроект");
			Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
				Если Источник.Проект <> ЗначениеНастройки Тогда
					Источник.Проект = ЗначениеНастройки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;		
	
	ИмяРеквизитаОснования = ВернутьИмяРеквизитаОснования(ТипЗнч(Источник.Ссылка));
	
	Если НЕ ИмяРеквизитаОснования = Неопределено Тогда
		
		МетаданныеДокумента = Источник.Метаданные();
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			Если ДанныеЗаполнения.Свойство("ДокументОснование") И ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование) Тогда
				Источник[ИмяРеквизитаОснования] = ДанныеЗаполнения.ДокументОснование;
			КонецЕсли;	
		ИначеЕсли НЕ МетаданныеДокумента.Реквизиты[ИмяРеквизитаОснования].Тип.Типы().Найти(ТипЗнч(ДанныеЗаполнения)) = Неопределено Тогда
			Источник[ИмяРеквизитаОснования] = ДанныеЗаполнения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция получает таблицу баллов по подразделению
//
// Параметры:
//	Подразделение - СправочникСсылка - Ссылка на подразделение.	
//
// Возвращаемое значение:
//	ТаблицаЗначений - Результат выгрузки запроса
//
Функция ПолучитьТаблицуБаллов(Подразделение = Неопределено) Экспорт

	Запрос		 = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Тбл.ВидВзаимодействия КАК ВидВзаимодействия,
		|	Тбл.Балл КАК Балл
		|ИЗ
		|	РегистрСведений.CRM_НастройкиАвтомотиватора КАК Тбл";
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	Тбл.Подразделение = &Подразделение";
	КонецЕсли;			
			
	Запрос.Текст = Запрос.Текст + "	
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидВзаимодействия
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	Запрос.УстановитьПараметр("Подразделение", Подразделение);	
		
	ТзБаллы		= Новый ТаблицаЗначений;
	ТзБаллы		= Запрос.Выполнить().Выгрузить();

	Возврат ТзБаллы;
	
КонецФункции // ПолучитьТаблицуБаллов()

// Процедуры и функции для работы с группой интереса в форме документа.

// Процедура перезаписывает ссылки в документах ЭлектронноеПисьмоВходящее и ЭлектронноеПисьмоИсходящее
//  с потенциального клиента на партнера.
//
// Параметры:
//  ПотенциальныйКлиент	 - СправочникСсылка.CRM_ПотенциальныеКлиенты - Ссылка на потенциального клиента.
//  Партнер				 - СправочникСсылка.Партнеры - Ссылка на партнера.
//  КонтактноеЛицо		 - СправочникСсылка.КонтактныеЛицаПартнеров, Неопределено - Ссылка на контактное лицо.
//
Процедура ПереопределитьПисьмаСПотенциальногоКлиентаНаПартнера(ПотенциальныйКлиент, Партнер,
	 КонтактноеЛицо = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПотенциальныйКлиент) ИЛИ НЕ ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	КИ_КЛ = Неопределено;
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		КИ_КЛ = ПолучитьКонтактнуюИнформациюОбъекта(, КонтактноеЛицо, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ЭлектронноеПисьмоВходящее.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
		|ГДЕ
		|	ЭлектронноеПисьмоВходящее.ПометкаУдаления = ЛОЖЬ
		|	И ЭлектронноеПисьмоВходящее.ОтправительКонтакт = &ОтправительКонтакт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка
		|ИЗ
		|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоИсходящееПолучателиПисьма
		|ГДЕ
		|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт = &ОтправительКонтакт";
	Запрос.УстановитьПараметр("ОтправительКонтакт", ПотенциальныйКлиент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			
			СтруктураПоискаКЛ = Новый Структура("АдресЭП", ДокументОбъект.ОтправительАдрес);
			Если ЗначениеЗаполнено(КонтактноеЛицо)
				И КИ_КЛ.НайтиСтроки(СтруктураПоискаКЛ).Количество() > 0 Тогда
				ДокументОбъект.ОтправительКонтакт = КонтактноеЛицо;
			Иначе
				ДокументОбъект.ОтправительКонтакт = Партнер;
			КонецЕсли;
			
		Иначе
			НужнаяСтрока = ДокументОбъект.ПолучателиПисьма.Найти(ПотенциальныйКлиент, "Контакт");
			Если НужнаяСтрока <> Неопределено Тогда
				
				СтруктураПоискаКЛ = Новый Структура("АдресЭП", НужнаяСтрока.Адрес);
				Если ЗначениеЗаполнено(КонтактноеЛицо)
					И КИ_КЛ.НайтиСтроки(СтруктураПоискаКЛ).Количество() > 0 Тогда					
					НужнаяСтрока.Контакт = КонтактноеЛицо;
				Иначе
					НужнаяСтрока.Контакт = Партнер;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Процедура перезаписывает ссылки в документах ЭлектронноеПисьмоВходящее и ЭлектронноеПисьмоИсходящее
//  с потенциального клиента на партнера.
//
// Параметры:
//  ПотенциальныйКлиент	 - СправочникСсылка.CRM_ПотенциальныеКлиенты - Ссылка на потенциального клиента.
//  Партнер				 - СправочникСсылка.Партнеры - Ссылка на партнера.
//  КонтактноеЛицо		 - СправочникСсылка.КонтактныеЛицаПартнеров, Неопределено - Ссылка на контактное лицо.
//
Процедура ПереопределитьЗвонкиСПотенциальногоКлиентаНаПартнера(ПотенциальныйКлиент, Партнер,
	 КонтактноеЛицо = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПотенциальныйКлиент) ИЛИ НЕ ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	КИ_КЛ = Неопределено;
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		КИ_КЛ = ПолучитьКонтактнуюИнформациюОбъекта(, КонтактноеЛицо, Перечисления.ТипыКонтактнойИнформации.Телефон);
		КИ_КЛ.Колонки.Добавить("ТелефонДляПоиска", Новый ОписаниеТипов("Строка"));
		Для Каждого СтрокаКИ Из КИ_КЛ Цикл
			СтрокаКИ.ТелефонДляПоиска = CRM_ПоискКонтактов.ФорматироватьНомерДляПоиска(СтрокаКИ.Представление);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ТелефонныйЗвонок.Ссылка КАК Ссылка,
		|	ТелефонныйЗвонок.Входящий КАК Входящий
		|ИЗ
		|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
		|ГДЕ
		|	ТелефонныйЗвонок.ПометкаУдаления = ЛОЖЬ
		|	И ТелефонныйЗвонок.АбонентКонтакт = &АбонентКонтакт";
	Запрос.УстановитьПараметр("АбонентКонтакт", ПотенциальныйКлиент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		СтруктураПоискаКЛ = Новый Структура("ТелефонДляПоиска", ДокументОбъект.АбонентКакСвязаться);
		Если ЗначениеЗаполнено(КонтактноеЛицо)
			И КИ_КЛ.НайтиСтроки(СтруктураПоискаКЛ).Количество() > 0 Тогда
			ДокументОбъект.АбонентКонтакт = КонтактноеЛицо;
		Иначе
			ДокументОбъект.АбонентКонтакт = Партнер;
		КонецЕсли;
		
		ДокументОбъект.АбонентПредставление = Строка(ДокументОбъект.АбонентКонтакт);
		
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура перезаписывает ссылки в справочнике CRM_Диалоги и CRM_СообщениеМессенджера
// с потенциального клиента на партнера.
//
// Параметры:
//  ПотенциальныйКлиент	 - СправочникСсылка.CRM_ПотенциальныеКлиенты - Ссылка на потенциального клиента.	
//  Партнер				 - СправочникСсылка.Партнеры - Ссылка на партнера.
//  КонтактноеЛицо		 - СправочникСсылка.КонтактныеЛицаПартнеров - Ссылка на контактное лицо.
//
Процедура ПереопределитьДиалогиСПотенциальногоКлиентаНаПартнера(ПотенциальныйКлиент, Партнер, КонтактноеЛицо) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПотенциальныйКлиент) ИЛИ НЕ ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	CRM_Диалоги.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_Диалоги КАК CRM_Диалоги
		|ГДЕ
		|	CRM_Диалоги.ПометкаУдаления = ЛОЖЬ
		|	И CRM_Диалоги.Контакт = &Контакт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_СообщениеМессенджера.Ссылка
		|ИЗ
		|	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
		|ГДЕ
		|	CRM_СообщениеМессенджера.ПометкаУдаления = ЛОЖЬ
		|	И CRM_СообщениеМессенджера.Контакт = &Контакт";
	
	Запрос.УстановитьПараметр("Контакт", ПотенциальныйКлиент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектКИзменению = Выборка.Ссылка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			ОбъектКИзменению.Контакт = КонтактноеЛицо;
			ОбъектКИзменению.КонтактПредставление = Строка(КонтактноеЛицо);
		Иначе
			ОбъектКИзменению.Контакт = Партнер;
			ОбъектКИзменению.КонтактПредставление = Строка(Партнер);
		КонецЕсли;
		ОбъектКИзменению.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура перезаписывает ссылки в документе CRM_Взаимодействие
// с потенциального клиента на партнера.
//
// Параметры:
//  ПотенциальныйКлиент	 - СправочникСсылка.CRM_ПотенциальныеКлиенты - Ссылка на потенциального клиента.	
//  Партнер				 - СправочникСсылка.Партнеры - Ссылка на партнера.
//  КонтактноеЛицо		 - СправочникСсылка.КонтактныеЛицаПартнеров - Ссылка на контактное лицо.
//
Процедура ПереопределитьВзаимодействияСПотенциальногоКлиентаНаПартнера(ПотенциальныйКлиент, Партнер,
	 КонтактноеЛицо) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПотенциальныйКлиент) ИЛИ НЕ ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	CRM_Взаимодействие.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
		|ГДЕ
		|	CRM_Взаимодействие.ПометкаУдаления = ЛОЖЬ
		|	И CRM_Взаимодействие.ПотенциальныйКлиент = &Контакт";
	
	Запрос.УстановитьПараметр("Контакт", ПотенциальныйКлиент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбъектКИзменению = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектКИзменению.Партнер = Партнер;
		ОбъектКИзменению.КонтактноеЛицо = КонтактноеЛицо;
		ОбъектКИзменению.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Переписать активные интересы с потенциального клиента на партнера
//
// Параметры:
//  ПотенциальныйКлиент	 - СправочникСсылка.CRM_ПотенциальныеКлиенты - Ссылка на потенциального клиента.	
//  Партнер				 - СправочникСсылка.Партнеры - Ссылка на партнера.
//	ТекущийИнтерес		 - ДокументСсылка.CRM_Интерес -Текущий интерес.
//
Процедура ПереписатьАктивныеИнтересыСПотенциальногоКлиентаНаПартнера(ПотенциальныйКлиент, Партнер,
	 ТекущийИнтерес = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПотенциальныйКлиент) ИЛИ НЕ ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	CRM_Интерес.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.CRM_Интерес КАК CRM_Интерес
	|ГДЕ
	|	НЕ CRM_Интерес.ПометкаУдаления
	|	И НЕ CRM_Интерес.Завершен
	|	И НЕ CRM_Интерес.Ссылка = &ТекущийИнтерес
	|	И CRM_Интерес.ПотенциальныйКлиент = &ПотенциальныйКлиент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_БизнесПроцесс.Ссылка
	|ИЗ
	|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	|ГДЕ
	|	CRM_БизнесПроцесс.ПотенциальныйКлиент = &ПотенциальныйКлиент
	|	И НЕ CRM_БизнесПроцесс.Ссылка = &ТекущийИнтерес";
	Запрос.УстановитьПараметр("ПотенциальныйКлиент", ПотенциальныйКлиент);
	Запрос.УстановитьПараметр("ТекущийИнтерес", ТекущийИнтерес);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		ДокументИнтерес = Выборка.Ссылка.ПолучитьОбъект();
		ДокументИнтерес.Партнер = Партнер;
		ДокументИнтерес.КонтактноеЛицо = Партнер.CRM_ОсновноеКонтактноеЛицо;

		ДокументИнтерес.Записать();

	КонецЦикла;
	
КонецПроцедуры

// Процедура копирует Контактную информацию из Потенциального клиента в Клиента или Контактное лицо.
//
// Параметры:
//  ПотенциальныйКлиент		 - СправочникСсылка.CRM_ПотенциальныеКлиенты - Ссылка на потенциального клиента.
//  Партнер					 - СправочникСсылка.Партнеры				 - Ссылка на партнера.
//  КонтактноеЛицо			 - СправочникСсылка.КонтактныеЛицаПартнеров	 - Ссылка на контактное лицо.
//  ПрозвонитьМессенджеры	 - Булево									 - Признак прозвона мессенджеров.
//  ЗаписатьИзменения		 - Булево									 - Признак необходимости записи изменений.
//
Процедура СкопироватьКонтактнуюИнформациюПотенциальногоКлиента(ПотенциальныйКлиент, Партнер,
	 КонтактноеЛицо, ПрозвонитьМессенджеры = Ложь,
	 ЗаписатьИзменения = Истина) Экспорт
	
	Если КонтактноеЛицо <> Неопределено Тогда
		Если ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Приемник = КонтактноеЛицо.ПолучитьОбъект();
		Иначе
			Приемник = КонтактноеЛицо;
		КонецЕсли;
		РодительВидаКИ = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров;
	Иначе
		Если ТипЗнч(Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
			Приемник = Партнер.ПолучитьОбъект();
		Иначе
			Приемник = Партнер;
		КонецЕсли;
		РодительВидаКИ = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
		|	ВидыКонтактнойИнформации.Наименование КАК Наименование,
		|	ВидыКонтактнойИнформации.Тип КАК Тип
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	НЕ ВидыКонтактнойИнформации.ПометкаУдаления
		|	И НЕ ВидыКонтактнойИнформации.ЭтоГруппа
		|	И ВидыКонтактнойИнформации.Используется
		|	И ВидыКонтактнойИнформации.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Родитель", РодительВидаКИ);
	ВидыКИПриемника = Запрос.Выполнить().Выгрузить();
	
	МассивТелефонныхНомеров = Новый Массив;
	МассивИсключаемыхМессенджеров = Новый Массив;
	
	Для Каждого СтрокаКИ Из ПотенциальныйКлиент.КонтактнаяИнформация Цикл
		
		ВидКИ = ОпределитьВидКонтактнойИнформации(СтрокаКИ, Приемник, ВидыКИПриемника);
		ДанныеПоиска = Новый Структура("Тип,Вид,Представление");
		ЗаполнитьЗначенияСвойств(ДанныеПоиска, СтрокаКИ);
		ДанныеПоиска.Вид = ВидКИ;
		НайденныеСтроки = Приемник.КонтактнаяИнформация.НайтиСтроки(ДанныеПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НС = Приемник.КонтактнаяИнформация.Добавить();
		ЗаполнитьЗначенияСвойств(НС, СтрокаКИ, , "CRM_ОсновнойДляСвязи");
		НС.Вид = ВидКИ;
		
		Если ВидКИ = Неопределено Тогда
			ОписаниеКИ = Строка(СтрокаКИ.Вид) + ": " + СтрокаКИ.Представление;
						Приемник.Комментарий = Приемник.Комментарий + ?(ЗначениеЗаполнено(Приемник.Комментарий),
							 Символы.ПС, "") + ОписаниеКИ;
		КонецЕсли;
		
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			Если ЗначениеЗаполнено(СтрокаКИ.Представление) Тогда
				СтруктураНомера = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаКИ.Представление);
				МассивТелефонныхНомеров.Добавить(сфпСофтФонПроСервер.сфпПреобразоватьНомерСУчетомПрефиксов(СтруктураНомера));
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаписатьИзменения Тогда
		Приемник.Записать();
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьИнтеграциюСМессенджерами") И ПрозвонитьМессенджеры Тогда
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("СсылкаНаОбъект", Приемник.Ссылка);
		ПараметрыПроцедуры.Вставить("МассивТелефонныхНомеров", МассивТелефонныхНомеров);
		ПараметрыПроцедуры.Вставить("МассивИсключаемыхМессенджеров", МассивИсключаемыхМессенджеров);
		ПараметрыПроцедуры.Вставить("ИмяРеквизитаКИ", "");
		ПараметрыПроцедуры.Вставить("ЗаполнитьКИВОбъекте");
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Прозвон мессенджеров'");
		
		ДлительныеОперации.ВыполнитьВФоне("CRM_РаботаСМессенджерамиСервер.ПрозвонитьМессенджерыВФоне",
				ПараметрыПроцедуры, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура создаёт новую запись для пользователя по переданному интересу.
//
//  Параметры:
//   Интерес		- ДокументСсылка		- Интерес
//   Пользователь	- СправочникСсылка		- Пользователь
//   Статус			- ПеречислениеСсылка	- Новый статус интереса.
//   Комментарий	- Строка				- Комментарий
//
Процедура CRM_ЗаписатьНовоеСостояниеНаКонтролеДляТекущегоПользователя(Интерес, Пользователь, Статус,
	 Комментарий = "") Экспорт
	
	НоваяЗапись	= РегистрыСведений.CRM_ИнтересыНаКонтроле.СоздатьМенеджерЗаписи();
	НоваяЗапись.Период			= ПолучитьТекущуюДатуСеанса();
	НоваяЗапись.Объект			= Интерес;
	НоваяЗапись.Пользователь	= Пользователь;
	НоваяЗапись.СтатусКонтроля	= Статус;
	НоваяЗапись.Комментарий		= Комментарий;	
	Если ЗначениеЗаполнено(Пользователь.Подразделение) Тогда
		НоваяЗапись.Подразделение = Пользователь.Подразделение;
	КонецЕсли;		
	НоваяЗапись.Записать();
	
КонецПроцедуры	

// Функция возвращает последнее входящее письмо по переданному интересу.
//
// Параметры:
//  Интерес	 - ДокументСсылка.CRM_Интерес	 - Ссылка на документ "Интерес".
// 
// Возвращаемое значение:
//   - Характеристика.CRM_ОбъектыЖурналаДокументов, Неопределено
//
Функция ПоследнееВходящееПисьмоПоИнтересу(Интерес) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Интерес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	Если ЗначениеЗаполнено(Интерес.Партнер) Тогда
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	CRM_ЖурналДокументов.Объект КАК Объект,
		|	CRM_ЖурналДокументов.Дата КАК Дата
		|ИЗ
		|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
		|		ПО CRM_ЖурналДокументов.Объект = ЭлектронноеПисьмоВходящее.Ссылка
		|ГДЕ
		|	CRM_ЖурналДокументов.CRM_Интерес = &Ссылка
		|	И ТИПЗНАЧЕНИЯ(CRM_ЖурналДокументов.Объект) = ТИП(Документ.ЭлектронноеПисьмоВходящее)
		|	И CRM_ЖурналДокументов.Клиент = &Клиент";
		
		Запрос.УстановитьПараметр("Клиент", Интерес.Партнер);
		
	ИначеЕсли ЗначениеЗаполнено(Интерес.ПотенциальныйКлиент) Тогда
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	CRM_ЖурналДокументов.Объект КАК Объект,
		|	CRM_ЖурналДокументов.Дата КАК Дата
		|ИЗ
		|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
		|		ПО CRM_ЖурналДокументов.Объект = ЭлектронноеПисьмоВходящее.Ссылка
		|ГДЕ
		|	CRM_ЖурналДокументов.CRM_Интерес = &Ссылка
		|	И ТИПЗНАЧЕНИЯ(CRM_ЖурналДокументов.Объект) = ТИП(Документ.ЭлектронноеПисьмоВходящее)
		|	И CRM_ЖурналДокументов.Клиент = &ПК";
		
		Запрос.УстановитьПараметр("ПК", Интерес.ПотенциальныйКлиент);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Интерес.КонтактноеЛицо) Тогда
		Если ЗначениеЗаполнено(Запрос.Текст) Тогда
			Запрос.Текст = Запрос.Текст +
			"
			|ОБЪЕДИНИТЬ
			|"
		КонецЕсли;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	CRM_ЖурналДокументов.Объект,
		|	CRM_ЖурналДокументов.Дата
		|ИЗ
		|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
		|		ПО CRM_ЖурналДокументов.Объект = ЭлектронноеПисьмоВходящее.Ссылка
		|ГДЕ
		|	CRM_ЖурналДокументов.CRM_Интерес = &Ссылка
		|	И ТИПЗНАЧЕНИЯ(CRM_ЖурналДокументов.Объект) = ТИП(Документ.ЭлектронноеПисьмоВходящее)
		|	И CRM_ЖурналДокументов.КонтактноеЛицо = &КЛ";
		
		Запрос.УстановитьПараметр("КЛ", Интерес.КонтактноеЛицо);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|УПОРЯДОЧИТЬ ПО
		|	CRM_ЖурналДокументов.Дата УБЫВ";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", Интерес);
	
	РезультатЗапросаТЗ = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапросаТЗ.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапросаТЗ[0].Объект;
	
КонецФункции

// Функция возвращает результат проверки заполненности ТЧ Интереса.
//
// Параметры:
//  Интерес - ДанныеФормыСтруктура, ДокументСсылка.CRM_Интерес, ДокументОбъект.CRM_Интерес - Документ "Интерес".
//  ИмяТЧ - Строка - Имя табличной части.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ТЧИнтересаЗаполнена(Интерес, ИмяТЧ) Экспорт
	
	Результат = Истина;
	
	Если ИмяТЧ = "Товары" Тогда
		
		Результат = (Интерес[ИмяТЧ].Количество() > 0);
		Для Каждого СтрТЧ Из Интерес[ИмяТЧ] Цикл
			Если НЕ (ЗначениеЗаполнено(СтрТЧ["Номенклатура"]) Или ЗначениеЗаполнено(СтрТЧ["Содержание"])) Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // РаботаСИнтересом

#Область ЗаполнениеКоманднойПанелиАтрибутовСобытия

// Заполнить подменю проектов.
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения - Передаваемая форма. 
//  Подразделение	 - СправочникСсылка.СтруктураПредприятия - Ссылка на подразделение. 
//
Процедура КоманднаяПанельАтрибутыСобытияЗаполнитьПодменюПроект(Форма, Подразделение = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Проекты.Ссылка КАК Ссылка,
		|	Проекты.Наименование КАК Наименование,
		|	Проекты.CRM_Подразделение КАК CRM_Подразделение,
		|	Проекты.ЭтоГруппа КАК ЭтоГруппа
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	НЕ Проекты.ПометкаУдаления
		|	И НЕ Проекты.Завершен";
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.Текст = Запрос.Текст + "
		|	 И (НЕ Проекты.ЭтоГруппа И (Проекты.CRM_Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|	ИЛИ Проекты.CRM_Подразделение В ИЕРАРХИИ (&Подразделение))) ИЛИ Проекты.ЭтоГруппа";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	И Проекты.CRM_Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ИЛИ Проекты.ЭтоГруппа";
	КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка ИЕРАРХИЯ";
		
	нИндекс = 2;
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Дерево.Строки.Сортировать("Наименование Возр", Истина);
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		
		ОтрисоватьПодменюПроектов(Форма, СтрокаДерева, Форма.Элементы.ПодменюПроектСобытия, нИндекс);
		
		нИндекс = нИндекс + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФоновымиЗаданиями

// Запускает выполнение процедуры в фоновом задании.
// По аналогии с ДлительныеОперации.ЗапуститьВыполнениеВФоне() БСП 2.2.5. Добавлен параметр "ОжидатьЗавершения".
// 
// Параметры:
//  ИдентификаторФормы     - УникальныйИдентификатор - идентификатор формы, 
//                           из которой выполняется запуск длительной операции. 
//  ИмяЭкспортнойПроцедуры - Строка - имя экспортной процедуры, 
//                           которую необходимо выполнить в фоне.
//  Параметры              - Структура - все необходимые параметры для 
//                           выполнения процедуры ИмяЭкспортнойПроцедуры.
//  НаименованиеЗадания    - Строка - наименование фонового задания. 
//                           Если не задано, то будет равно ИмяЭкспортнойПроцедуры. 
//  ИспользоватьДополнительноеВременноеХранилище - Булево - признак использования
//                           дополнительного временного хранилища для передачи данных
//                           в родительский сеанс из фонового задания. По умолчанию - Ложь.
//  ОжидатьЗавершения       - Булево - признак ожидания завершения задания за время вызова 
//                           (2 сек. для обычной скорости клиентского соединения, 4 сек. для низкой).
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * АдресХранилища  - Строка     - адрес временного хранилища, в которое будет
//                                    помещен результат работы задания;
//   * АдресХранилищаДополнительный - Строка - адрес дополнительного временного хранилища,
//                                    в которое будет помещен результат работы задания (доступно только если 
//                                    установлен параметр ИспользоватьДополнительноеВременноеХранилище);
//   * ИдентификаторЗадания - УникальныйИдентификатор - уникальный идентификатор запущенного фонового задания;
//   * ЗаданиеВыполнено - Булево - Истина если задание было успешно выполнено за время вызова функции.
// 
Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, 
	Знач Параметры, Знач НаименованиеЗадания = "", ИспользоватьДополнительноеВременноеХранилище = Ложь, ОжидатьЗавершения = Истина) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     Ложь);
	Результат.Вставить("ИдентификаторЗадания", Неопределено);
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		АдресХранилищаДополнительный = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
		ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилищаДополнительный);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
		Результат.ЗаданиеВыполнено = Истина;
	Иначе
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
		ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
		Задание = ЗапуститьФоновоеЗаданиеСКонтекстомКлиента(ИмяЭкспортнойПроцедуры,
			ПараметрыЭкспортнойПроцедуры, , НаименованиеЗадания);
		
		Если ОжидатьЗавершения Тогда
			ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
			// BSLLS:MissingCodeTryCatchEx-off
			Попытка
				Задание.ОжидатьЗавершения(ВремяОжидания);
			Исключение
				// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
			КонецПопытки;
			// BSLLS:MissingCodeTryCatchEx-on
		КонецЕсли;
		
		Результат.ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор);
		Результат.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		Результат.Вставить("АдресХранилищаДополнительный", АдресХранилищаДополнительный);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Запуск фонового задания с контекстом клиента. Например, передаются ПараметрыКлиентаНаСервере.
//  Запуск выполняется с помощью процедуры ВыполнитьМетодКонфигурации общего модуля РаботаВБезопасномРежиме.
//
// Параметры:
//  ИмяМетода	 - Строка	 - как в функции Выполнить менеджера фоновых заданий.
//  Параметры	 - Массив	 - как в функции Выполнить менеджера фоновых заданий.
//  Ключ		 - Строка	 - как в функции Выполнить менеджера фоновых заданий.
//  Наименование - Строка	 - как в функции Выполнить менеджера фоновых заданий.
// 
// Возвращаемое значение:
//  ФоновоеЗадание - Запуск фонового задания.
//
Функция ЗапуститьФоновоеЗаданиеСКонтекстомКлиента(ИмяМетода, Параметры = Неопределено, Ключ = "",
	 Наименование = "") Экспорт
	
	Если ТекущийРежимЗапуска() = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Запуск фонового задания с контекстом клиента возможен только при наличии клиента.'");
	КонецЕсли;
	
	ВсеПараметры = Новый Структура;
	ВсеПараметры.Вставить("ИмяМетода",    ИмяМетода);
	ВсеПараметры.Вставить("Параметры",    Параметры);
	ВсеПараметры.Вставить("ПараметрыКлиентаНаСервере", СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере());
	
	ПараметрыПроцедурыФоновогоЗадания = Новый Массив;
	ПараметрыПроцедурыФоновогоЗадания.Добавить(ВсеПараметры);
	
	Возврат ФоновыеЗадания.Выполнить("CRM_ОбщегоНазначенияСервер.ПередЗапускомФоновогоЗаданияСКонтекстомКлиента",
		ПараметрыПроцедурыФоновогоЗадания, Ключ, Наименование);
	
КонецФункции

#КонецОбласти

#Область РаботаСJSON

// Помещает значение в строку JSON.
//
// Параметры:
//  Значение - ЛюбойТип - Значение.
// 
// Возвращаемое значение:
//  Строка - Строка JSON.
//
Функция ЗначениеВСтрокуJSON(Значение) Экспорт 

	ЗаписьJSON = Новый ЗаписьJSON;
	
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Значение);
	
	Возврат ЗаписьJSON.Закрыть();

КонецФункции // ЗначениеВСтрокуJSON()

// Получает значение из строки JSON.
//
// Параметры:
//  СтрокаJSON              - Строка - строка в формате JSON.
//  ПрочитатьВСоответствие		 - Булево - Прочитать в соответствие.
//  ПоляДаты					 - Массив - Имена свойств со значением типа Дата.
//  ИмяФункцииВосстановления	 - Строка - Имя функции восстановления.
//  МодульФункцииВосстановления	 - Строка - Модуль функции восстановления.
// 
// Возвращаемое значение:
//  ЛюбойТип - Значение.
//
Функция ЗначениеИзСтрокиJSON(СтрокаJSON,
							ПрочитатьВСоответствие = Ложь,
							ПоляДаты = Неопределено,
							ИмяФункцииВосстановления = Неопределено,
							МодульФункцииВосстановления = Неопределено) Экспорт

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	Результат = ПрочитатьJSON(ЧтениеJSON,
							ПрочитатьВСоответствие,
							ПоляДаты,
							,
							ИмяФункцииВосстановления,
							МодульФункцииВосстановления);
	
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;

КонецФункции // ЗначениеИзСтрокиXML()

// Функция получает описание объекта из модели json. 
//
// Параметры:
//  СтрJSON - Строка - описание объекта в виде модели json.
//
// Возвращаемое значение:
//  Значение    - Соответствие - соответствие свойств и значений объекта.
//
Функция UnJSON(СтрJSON) Экспорт 
	
	Перем Значение;
	Если ПолучитьЗначениеJSON(СтрJSON, Значение) = 0 Тогда
		Возврат Значение;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции // UnJSON()

#КонецОбласти // РаботаСJSON

#Область ОбработкаРазличныхДанных

// Процедура обработки заполнения.
//
// Параметры:
//  Источник		 - ДокументОбъект - Источник.
//  ДанныеЗаполнения - ДокументСсылка - Данные заполнения.
//
Процедура ОбработкаЗаполнения(Источник, ДанныеЗаполнения) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") Тогда
			// Пока ничего не надо, все что надо заполняется в модуле документа.
			
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_РассылкаЭлектронныхПисем") Тогда
			
			Источник.Тема = ДанныеЗаполнения.Тема;
			
			// Поменяем данные заполнения на структуру с партнером для того чтобы обработка заполнения документа
			// заполнила рассылку на основании структуры.
			// Входящие данные заполнения предварительно сохраним в доп. свойствах объекта
			// и в подписке их вернем назад.
			
			Источник.ДополнительныеСвойства.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
			
			СписокПартнеров = Новый СписокЗначений;
			СписокПартнеров.Добавить(Новый Структура("Партнер,КонтактноеЛицо", ДанныеЗаполнения.Партнер,
				 ДанныеЗаполнения.КонтактноеЛицо));
			
			СтруктрураЗаполнения = Новый Структура("СписокПартнеров", СписокПартнеров);
			ДанныеЗаполнения = СтруктрураЗаполнения;
			
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Взаимодействие") Тогда
			
			// В модуле объекта есть обработка заполнения на основании интереса.
			
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
			
			Источник.Тема = ДанныеЗаполнения.Тема;
			
			// Поменяем данные заполнения на структуру с партнером для того чтобы обработка заполнения документа
			// заполнила рассылку на основании структуры.
			// Входящие данные заполнения предварительно сохраним в доп. свойствах объекта
			// и в подписке их вернем назад.
			
			Источник.ДополнительныеСвойства.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
			
			СтруктураПартнера = Новый Структура("Партнер,КонтактноеЛицо", ДанныеЗаполнения.Партнер,
				 ДанныеЗаполнения.КонтактноеЛицо);
			ДанныеЗаполнения = СтруктураПартнера;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает массив клиентов, входящих в один холдинг с переданным клиентом.
//
// Параметры:
//	Клиент	- СправочникСсылка	- Клиент
//
// Возвращаемое значение:
//	Массив	- Массив клиентов, входящих в один холдинг с переданным клиентом.
//
Функция ПолучитьМассивСвоихКлиентов(Клиент) Экспорт 
	МассивКлиентов	= Новый Массив;
	Если ЗначениеЗаполнено(Клиент) Тогда
		МассивКлиентов.Добавить(Клиент);
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Клиент", Клиент);
		// Получаем подчиненные клиенты, в случае если клиент является холдингом.
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Партнеры.Ссылка КАК Клиент
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ
		|	Партнеры.Родитель = &Клиент";
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Родитель", "CRM_ГоловнаяОрганизация");
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивКлиентов.Добавить(Выборка.Клиент);
		КонецЦикла;	
		
		Холдинг = CRM_МетодыМодулейМенеджеровРегистров.ПолучитьХолдингПартнера(Клиент);
		Если Холдинг <> Неопределено Тогда
			// Получаем всех партнеров, полученных холдингов.
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Партнеры.Ссылка КАК Клиент
			|ИЗ
			|	Справочник.Партнеры КАК Партнеры
			|ГДЕ
			|	Партнеры.Родитель = &Холдинг
			|	И Партнеры.Ссылка <> &Клиент";
			Запрос.УстановитьПараметр("Холдинг", Холдинг);
			Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Родитель", "CRM_ГоловнаяОрганизация");
			КонецЕсли;
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				МассивКлиентов.Добавить(Выборка.Клиент);
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;	
	Возврат МассивКлиентов;
КонецФункции // ПолучитьМассивСвоихКлиентов()	

// Функция возвращает массив контактов клиентов, входящих в один холдинг с владельцем переданного контакта.
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт
//
// Возвращаемое значение:
//	Массив из СправочникСсылка.КонтактныеЛицаПартнеров	- Массив контактов, всех клиентов, входящих в один холдинг с владельцем переданного контакта.
//
Функция ПолучитьМассивСвоихКонтактов(Контакт) Экспорт
	МассивПартнеров	= ПолучитьМассивСвоихКлиентов(Контакт.Владелец);
	// Получаем всех контактов партнеров.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	КонтактныеЛицаПартнеров.Ссылка КАК Контакт
	               |ИЗ
	               |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	               |ГДЕ
	               |	НЕ КонтактныеЛицаПартнеров.ПометкаУдаления
	               |	И КонтактныеЛицаПартнеров.Владелец В(&Клиенты)
	               |	И КонтактныеЛицаПартнеров.Ссылка <> &Контакт";
	Запрос.УстановитьПараметр("Клиенты", МассивПартнеров);
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контакт");
КонецФункции // ПолучитьМассивСвоихКонтактов()	

// Функция возвращает массив типов услуг для данного подразделения.
//
// Параметры:
//	Подразделение	- СправочникСсылка	- Подразделение
//
// Возвращаемое значение:
//	Массив из СправочникСсылка.CRM_ТипУслуги - Массив типов услуг для данного подразделения.
//
Функция ПолучитьМассивДоступныхТиповУслугПодразделения(Подразделение) Экспорт
	МассивСвоихТиповУслуг = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	СтруктураПредприятияCRM_ТипУслуги.ТипУслуги КАК ТипУслуги
	               |ИЗ
	               |	Справочник.СтруктураПредприятия.CRM_ТипУслуги КАК СтруктураПредприятияCRM_ТипУслуги
	               |ГДЕ
	               |	СтруктураПредприятияCRM_ТипУслуги.Ссылка = &Подразделение";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивСвоихТиповУслуг.Добавить(Выборка.ТипУслуги);
		КонецЦикла;	
	Возврат МассивСвоихТиповУслуг;
КонецФункции // ПолучитьМассивДоступныхТиповУслугПодразделения()	

// Добавить запись информации о письме.
//
// Параметры:
//  ПисьмоОбъект - ДокументСсылка	 - Ссылка на письмо.
//
Процедура ДобавитьЗаписьИнформацииОПисьме(ПисьмоОбъект) Экспорт
	
	ВзаимодействиеОснование = ПисьмоОбъект.ВзаимодействиеОснование;
	
	Если Не ЗначениеЗаполнено(ВзаимодействиеОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ТипЗнч(ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
		Или ТипЗнч(ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПисьмоОбъект.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		
		МенеджерЗаписи = РегистрыСведений.CRM_ИнформацияОПисьмах.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = ВзаимодействиеОснование;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Объект = ВзаимодействиеОснование;
		Если ПисьмоОбъект.CRM_ТипОтвета = Перечисления.CRM_ТипыОтвета.ОтветНаПисьмо Тогда
			МенеджерЗаписи.ОтправленОтвет = Истина;
		ИначеЕсли ПисьмоОбъект.CRM_ТипОтвета = Перечисления.CRM_ТипыОтвета.ПересылкаПисьма Тогда
			МенеджерЗаписи.Переслан = Истина;
		КонецЕсли;
		МенеджерЗаписи.Записать();
		
	ИначеЕсли ТипЗнч(ПисьмоОбъект.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		МенеджерЗаписи = РегистрыСведений.CRM_ИнформацияОПисьмах.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = ВзаимодействиеОснование;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Объект = ВзаимодействиеОснование;
		МенеджерЗаписи.ПолученОтвет = Истина;
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет элемент отбора динамического списка.
//
// Параметры:
//  Список	 - ДинамическийСписок - обрабатываемый динамический список,
//  ИмяПоля	 - ПолеКомпоновкиДанных  - имя поля компоновки, отбор по которому нужно удалить.
//
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля) Экспорт
	
	ЭлементыОтбора = Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы;
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	ИндексЭлементаОтбора = 0;
	
	Пока ИндексЭлементаОтбора < ЭлементыОтбора.Количество() Цикл
		
		ЭлементОтбора = ЭлементыОтбора[ИндексЭлементаОтбора];
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") 
		   И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			
			ЭлементыОтбора.Удалить(ЭлементОтбора);
			
		Иначе
			
			ИндексЭлементаОтбора = ИндексЭлементаОтбора + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

// Возвращает фиксированный массив типов объектов журнала документов.
//
// Возвращаемое значение:
//	ФиксированныйМассив из ЛюбаяСсылка
//
Функция ТипыОбъектовЖурналаДокументов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипыОбъектов = Новый Массив;
	
	ЭтоРазделенныйСеанс = РаботаВМоделиСервиса.ИспользованиеРазделителяСеанса();
	Если ОбщегоНазначения.РазделениеВключено() И НЕ ЭтоРазделенныйСеанс Тогда
		Возврат Новый ФиксированныйМассив(ТипыОбъектов);	
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОбъектыЖурнала.ТипЗначения КАК ТипыОписание
	|ИЗ
	|	ПланВидовХарактеристик.CRM_ОбъектыЖурналаДокументов КАК ОбъектыЖурнала");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый ФиксированныйМассив(ТипыОбъектов);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТипыОбъектаЖурнала = Выборка.ТипыОписание.Типы();
		Для Каждого ТипЗначения Из ТипыОбъектаЖурнала Цикл
			Если ТипыОбъектов.Найти(ТипЗначения) = Неопределено Тогда
				ТипыОбъектов.Добавить(ТипЗначения);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(ТипыОбъектов);
	
КонецФункции

#КонецОбласти // ОбработкаРазличныхДанных

#Область КомпоновкаДанных

// Устанавливает параметр схемы компоновки данных
//
// Параметры:
//	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки.
//	Параметр - Строка, ПараметрКомпоновкиДанных - параметр, который требуется установить.
//	Значение - Произвольный - значение, которое требуется установить.
//	Использование - Булево - признак использования параметра КД.
//
// Возвращаемое значение:
//	ПараметрСхемыКомпоновкиДанных - установленный параметр настроек КД. Неопределено, если параметр не найден.
//
Функция УстановитьПараметрСКД(СхемаКомпоновкиДанных, Параметр, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = ПолучитьПараметрСКД(СхемаКомпоновкиДанных, Параметр);
	
	Если ЗначениеПараметра <> Неопределено Тогда
		Если ТипЗнч(СхемаКомпоновкиДанных) <> Тип("СхемаКомпоновкиДанных") Тогда
			ЗначениеПараметра.Использование	= Использование;
		КонецЕсли;
		ЗначениеПараметра.Значение		= Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Возвращает значение параметра схемы компоновки данных
//
// Параметры:
//	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема.
//	Параметр - Строка, ПараметрКомпоновкиДанных - имя параметра КД для которого нужно вернуть значение параметра.
//
// Возвращаемое значение:
//	ПараметрСхемыКомпоновкиДанных, Неопределено - Значение параметра, если параметр не найден.
//
Функция ПолучитьПараметрСКД(СхемаКомпоновкиДанных, Параметр) Экспорт
	
	ЗначениеПараметра = Неопределено;
	ПолеПараметр = ?(ТипЗнч(Параметр) = Тип("Строка"), Новый ПараметрКомпоновкиДанных(Параметр), Параметр);
	
	Если ТипЗнч(СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда
		ЗначениеПараметра = СхемаКомпоновкиДанных.Параметры.Найти(ПолеПараметр);
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Возвращает Истина, если объекте содержит реквизит Ответственный,
// а тип реквизита включает СправочникСсылка.РолиИсполнителей.
//
// Параметры:
//  СсылкаНаОбъект	 - ЛюбаяСсылка - Ссылка на объект
//
// Возвращаемое значение:
//	Булево
//
Функция ОтветственныйПоддерживаетАдресациюНаРоль(СсылкаНаОбъект) Экспорт
	
	Возврат ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.CRM_Интерес");
	
КонецФункции

// Установливает управляемую блокировку по набору записей.
//
// Параметры:
//	Набор - РегистрСведенийНаборЗаписей - Набор записей.
//  Режим - РежимБлокировкиДанных - режим блокировки.
//
Процедура УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Знач Набор, Знач Режим = Неопределено) Экспорт
	
	МетаданныеОбъекта = Набор.Метаданные();
	ПространствоБлокировки = МетаданныеОбъекта.ПолноеИмя();
	
	Поля = Новый Структура;
	Для каждого ЭлементОтбора Из Набор.Отбор Цикл
		Если ЭлементОтбора.Использование Тогда
			Поля.Вставить(ЭлементОтбора.ПутьКДанным, ЭлементОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьУправляемуюБлокировку(ПространствоБлокировки, Поля, , Режим);
	
КонецПроцедуры

// Устанавливает управляемую блокировку по значениям полей.
//
// Параметры:
//  Пространство - Строка - пространство блокировки.
//  Поля - Структура - ключ задает имя поля пространства блокировки, а значение:
//                     1. Источник задан: соответствующее поле источника, содержащее значения для блокировки.
//                     2. Источник не задан: непосредственно значение для блокировки.
//  Источник - РезультатЗапроса, Табличная часть, ТаблицаЗначений  - источник данных.
//  Режим - РежимБлокировкиДанных - режим блокировки.
//        - Неопределено - значение по умолчанию "Исключительный".
//
Процедура УстановитьУправляемуюБлокировку(Знач Пространство, Знач Поля = Неопределено,
	 Знач Источник = Неопределено,
	 Знач Режим = Неопределено) Экспорт
	
	Если Режим = Неопределено Тогда
		Режим = РежимБлокировкиДанных.Исключительный;
	КонецЕсли;
	
	Если Поля = Неопределено Тогда
		Поля = Новый Структура;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(Пространство);
	Если Источник = Неопределено Тогда
		Для каждого КлючЗначение Из Поля Цикл
			ЭлементБлокировки.УстановитьЗначение(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	Иначе
		ЭлементБлокировки.ИсточникДанных = Источник;
		Для каждого КлючЗначение Из Поля Цикл
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	ЭлементБлокировки.Режим = Режим;
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Функция возвращает ширину элемента по длине выводимого им текста.
//
// Параметры:
//	ЗначениеЭлемента	- Произвольный	- Значение элемента формы.
//
// Возвращаемое значение:
//	Число	- Ширина элемента.
//
Функция ПолучитьШиринуЭлементаФормы(ЗначениеЭлемента) Экспорт
	СтрокаЭлемента		= Строка(ЗначениеЭлемента);
	ДлинаПредставления	= СтрДлина(СтрокаЭлемента);
	Если ДлинаПредставления > 30 Тогда
		ШиринаЭлемента	= Окр(ДлинаПредставления / 1.4, 0, РежимОкругления.Окр15как20);
	ИначеЕсли ДлинаПредставления > 15 Тогда
		ШиринаЭлемента	= Окр(ДлинаПредставления / 1.35, 0, РежимОкругления.Окр15как20);
	ИначеЕсли ДлинаПредставления > 10 Тогда
		ШиринаЭлемента	= Окр(ДлинаПредставления / 1.3, 0, РежимОкругления.Окр15как20);
	ИначеЕсли ДлинаПредставления > 5 Тогда
		ШиринаЭлемента	= Окр(ДлинаПредставления / 1.25, 0, РежимОкругления.Окр15как20);
	Иначе	
		ШиринаЭлемента	= ДлинаПредставления;
	КонецЕсли;
	Если ВРег(СтрокаЭлемента) = СтрокаЭлемента Тогда
		ШиринаЭлемента	= ШиринаЭлемента + 2;
	КонецЕсли;	
	Возврат ШиринаЭлемента;
КонецФункции

// Возвращает Истина, если клиентское приложение является мобильным клиентом.
//
// Возвращаемое значение:
//  Булево - если нет клиентского приложения, возвращается Ложь.
//
Функция ЭтоМобильныйКлиент() Экспорт
	
	Возврат ОбщегоНазначения.ЭтоМобильныйКлиент();
	
КонецФункции

// Функция возвращает Истина, если текущая информационная база является демо-базой.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ЭтоДемоБаза() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Наименование В (&ИменаДемонстрационнойОрганизации)
	|	И Организации.ПометкаУдаления = ЛОЖЬ";
	
	ИменаДемонстрационнойОрганизации = Новый Массив();
	ИменаДемонстрационнойОрганизации.Добавить("Торговый дом ""Комплексный""");
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ИменаДемонстрационнойОрганизации.Добавить("Торговый дом");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИменаДемонстрационнойОрганизации", ИменаДемонстрационнойОрганизации);
	Результат = Не Запрос.Выполнить().Пустой();
	Возврат Результат;
	
КонецФункции

// Процедура красит кнопки в зависимости от пометки.
//
// Параметры:
//	КонтекстЭтаФорма	- Форма	- Форма.
//	СтруктураКнопок	- Структура	- Структура, содержащая кнопки.
//
Процедура ПокраситьКнопки(КонтекстЭтаФорма, СтруктураКнопок) Экспорт
	Для каждого СтруктураКнопки Из СтруктураКнопок Цикл
		
		ОписаниеКнопки = СтруктураКнопки.Значение;
		Элемент = КонтекстЭтаФорма.Элементы[ОписаниеКнопки.ИмяКнопки];
		Если ОписаниеКнопки.Свойство("Пометка") Тогда
			Элемент.Пометка = ОписаниеКнопки.Пометка;
			Если ОписаниеКнопки.Пометка Тогда
				Элемент.ЦветФона = ЦветаСтиля.CRM_ОсновнойГолубой;
				Элемент.ЦветТекста = ЦветаСтиля.ЦветФонаПоля;
			Иначе
				Элемент.ЦветФона = ЦветаСтиля.CRM_СерыйДляВторостепенныхФункций;
				Элемент.ЦветТекста = ЦветаСтиля.ЦветФонаПоля;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Функция создает картинку из массива пикселей.
//
// Параметры:
//	МатрицаЦветовRGB	- Массив.
// Возвращаемое значение:
//   - ДвоичныеДанные
//
Функция СоздатьКартинку(МатрицаЦветовRGB) Экспорт
	
	Высота = МатрицаЦветовRGB.Количество();
	Ширина = МатрицаЦветовRGB[0].Количество();
	
	// Для простоты формирования возьемём 24 бита. По 8 бит на каждый канал. Альфаканал не используем. 
	ТекГлубинаЦвета = 3; // Измеряется в байтах. 	
	
	// Каждая строка должна содержать количество байтов кратное 4.
	БайтовДополнение = (4-ТекГлубинаЦвета*Ширина%4)%4; 
	
	РазмерФайла = ТекГлубинаЦвета*Ширина*Высота + Высота*БайтовДополнение;	
	
	///////////////////////////////////////////////////////////////////////////////
		
	ПотокТело = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(ПотокТело);
		
	//BITMAPFILEHEADER
	
	// bfType
	ЗаписьДанных.ЗаписатьЦелое16(16973, ПорядокБайтов.BigEndian); // 0x424D big-endian = 0x4D42 little-endian. Признак формата. Всегда это значение.
	// bfSize
	ЗаписьДанных.ЗаписатьЦелое32(54 + РазмерФайла);
	// bfReserved1
	ЗаписьДанных.ЗаписатьЦелое16(0);
	// bfReserved2
	ЗаписьДанных.ЗаписатьЦелое16(0);
	// bfOffBits
	ЗаписьДанных.ЗаписатьЦелое32(54);
	
	// BITMAPINFOHEADER // версия 3
	// biSize
	ЗаписьДанных.ЗаписатьЦелое32(40); 
	// biWidth
	ЗаписьДанных.ЗаписатьЦелое32(Ширина);			// ширина изображения в пикселах 
	// biHeight
	ЗаписьДанных.ЗаписатьЦелое32(Высота);			// высота изображения в пикселах
	// biPlanes
	ЗаписьДанных.ЗаписатьЦелое16(1);				// содержит единицу
	// biBitCount
	ЗаписьДанных.ЗаписатьЦелое16(ТекГлубинаЦвета*8); // количество бит на пиксел 
	// biCompression
	ЗаписьДанных.ЗаписатьЦелое32(0);				// тип сжатия 
	// biSizeImage
	ЗаписьДанных.ЗаписатьЦелое32(РазмерФайла);		// размер изображения в байтах
	// biXPelsPerMeter
	ЗаписьДанных.ЗаписатьЦелое32(0);				// горизонтальное разрешение в пикселах на метр 
	// biYPelsPerMeter
	ЗаписьДанных.ЗаписатьЦелое32(0); 				// вертикальное разрешение в пикселах на метр 
	// biClrUsed
	ЗаписьДанных.ЗаписатьЦелое32(0);				//  количество используемых цветовых индексов в палитре 
	// biClrImportant
	ЗаписьДанных.ЗаписатьЦелое32(0);				// количество индексов
	
	///////////////////////////////////////////////////////////////////////////////
		
	Для Выс = 1 По Высота Цикл	// строки снизу вверх		
			
		Для Шир = 1 По Ширина Цикл
			
			ЦветаПикселя = МатрицаЦветовRGB[Выс-1][Шир-1];
			ЗаписьДанных.ЗаписатьБайт(ЦветаПикселя.Синий);
			ЗаписьДанных.ЗаписатьБайт(ЦветаПикселя.Зеленый);
			ЗаписьДанных.ЗаписатьБайт(ЦветаПикселя.Красный);
						
		КонецЦикла;
		
		// Забиваем нулями остаток строки. Так как размер строки должен быть кратен 4 байтам.
		Для Доп = 1 По БайтовДополнение Цикл		
			ЗаписьДанных.ЗаписатьБайт(0); 
		КонецЦикла;
		
	КонецЦикла;
		
	ЗаписьДанных.Закрыть();
	
	ДвоичныеДанныеТело = ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
	
	Возврат ДвоичныеДанныеТело;
		
КонецФункции

// Функция создает картинку из строки SVG.
//
// Параметры:
//	ТекстSVG	- Строка.
// Возвращаемое значение:
//   - ДвоичныеДанные
//
Функция СоздатьКартинкуSVG(ТекстSVG) Экспорт
	
	ПотокТело = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(ПотокТело);
		
	ЗаписьДанных.ЗаписатьСтроку(ТекстSVG);
	ЗаписьДанных.Закрыть();
	
	ДвоичныеДанныеТело = ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
	
	Возврат ДвоичныеДанныеТело;
		
КонецФункции

// Функция текст SVG картинки для круга.
//
// Параметры:
//	Цвет	- Цвет.
// Возвращаемое значение:
//   - Строка
//
Функция ТекстSVG_Круг(Цвет) Экспорт
	
	СтрокаЦвета = "" + DecToHex(Цвет.Красный) + DecToHex(Цвет.Зеленый) + DecToHex(Цвет.Синий);
	ТекстSVG = "<svg width=""16"" height=""17"" viewBox=""0 0 16 17"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">";
	ТекстSVG = ТекстSVG + "<circle cx=""8"" cy=""8.5"" r=""8"" fill=""#" + СтрокаЦвета + """/>";
	ТекстSVG = ТекстSVG + "</svg>";
	Возврат ТекстSVG;
	
КонецФункции

// Функция массив пикселей для круга.
//
// Параметры:
//	Диаметр	- Число - диаметр кружка в пикселях.
//	Цвет	- Цвет.
//	Фон		- Цвет.
// Возвращаемое значение:
//   - Массив
//
Функция МатрицаЦветовRGB_Круг(Диаметр, Цвет, Фон) Экспорт
	
	// Устанавливаем размеры матрицы по которой сформируется картинка
	ТекМатрицаЦветовRGB = Новый Массив(Диаметр, Диаметр);
	
	Для Индекс1 = 1 По Диаметр Цикл
		Для Индекс2 = 1 По Диаметр Цикл
			
			// Далее идёт установка цвета пикселя в зависимости от координат.
			// Именно этот код предполагается модифицировать
			#Область Определение_цвета_пикселя

			Радиус = Окр(Диаметр/2, 0, РежимОкругления.Окр15как20);
			Если Sqrt(Pow(Индекс1 - Радиус, 2) + Pow(Индекс2 - Радиус, 2)) <= Радиус Тогда
				ТекЦвет	= Цвет;
			Иначе
				ТекЦвет	= Фон;
			КонецЕсли;			
					
			#КонецОбласти
			
			ТекМатрицаЦветовRGB[Индекс1-1][Индекс2-1] = ТекЦвет;
			
		КонецЦикла;
	КонецЦикла;	
	
	Возврат ТекМатрицаЦветовRGB
	
КонецФункции

// Процедура меняет элементы местами.
//
// Параметры:
//  ПервыйЭлементСсылка						 - СправочникСсылка.CRM_ШаблоныЭтаповПроектов	 - Первый элемент.
//  ВторойЭлементСсылка						 - СправочникСсылка.CRM_ШаблоныЭтаповПроектов	 - Второй элемент.
//  ПорядокПервогоЭлемента					 - Число	 - Порядок первого элемента.
//  ПорядокВторогоЭлемента					 - Число	 - Порядок второго элемента.
//  КлючДополнительныхСвойствПервогоЭлемента - Строка, Неопределено	 - Ключ доп. свойств первого элемента.
//  КлючДополнительныхСвойствВторогоЭлемента - Строка, Неопределено	 - Ключ доп. свойств второго элемента.
//
Процедура ПоменятьЭлементыМестами(ПервыйЭлементСсылка, ВторойЭлементСсылка,
									ПорядокПервогоЭлемента, ПорядокВторогоЭлемента,
									КлючДополнительныхСвойствПервогоЭлемента = Неопределено,
									КлючДополнительныхСвойствВторогоЭлемента = Неопределено) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(ПервыйЭлементСсылка.Метаданные().ПолноеИмя());
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ПервыйЭлементСсылка);
	ЭлементБлокировки = Блокировка.Добавить(ВторойЭлементСсылка.Метаданные().ПолноеИмя());
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ВторойЭлементСсылка);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		ЗаблокироватьДанныеДляРедактирования(ПервыйЭлементСсылка);
		ЗаблокироватьДанныеДляРедактирования(ВторойЭлементСсылка);
		
		ПервыйЭлементОбъект = ПервыйЭлементСсылка.ПолучитьОбъект();
		ВторойЭлементОбъект = ВторойЭлементСсылка.ПолучитьОбъект();
		
		ПервыйЭлементОбъект.ПорядокВШаблоне = ПорядокВторогоЭлемента;
		ВторойЭлементОбъект.ПорядокВШаблоне = ПорядокПервогоЭлемента;
		
		Если ЗначениеЗаполнено(КлючДополнительныхСвойствПервогоЭлемента) Тогда
			ПервыйЭлементОбъект.ДополнительныеСвойства.Вставить(КлючДополнительныхСвойствПервогоЭлемента);
		КонецЕсли;			
		Если ЗначениеЗаполнено(КлючДополнительныхСвойствВторогоЭлемента) Тогда
			ВторойЭлементОбъект.ДополнительныеСвойства.Вставить(КлючДополнительныхСвойствВторогоЭлемента);
		КонецЕсли;
	
		ПервыйЭлементОбъект.Записать();
		ВторойЭлементОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриПериодическомПолученииДанныхКлиентаНаСервере
Процедура ПриПериодическомПолученииДанныхКлиентаНаСервере(Параметры, Результаты) Экспорт
	
	МоментНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Попытка
		CRM_РаботаСМессенджерамиСервер.ПриПериодическомПолученииДанныхКлиентаНаСервере(Параметры, Результаты);
	Исключение
		СерверныеОповещения.ОбработатьОшибку(ИнформацияОбОшибке());
	КонецПопытки;
	СерверныеОповещения.ДобавитьПоказатель(Результаты, МоментНачала,
		"CRM_РаботаСМессенджерамиСервер.ПриПериодическомПолученииДанныхКлиентаНаСервере");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСПользовательскимиНастройкамиДинамическихСписков

// Процедура загружает все пользовательские настройки динамических списков из файла.
//
// Параметры:
//  ИмяМакета		 - Строка	 - Имя общего макета.
//  ИмяПользователя	 - Строка - Имя пользователя. 
// 
// Возвращаемое значение:
//   - 
//
Функция ПользовательскиеНастройкиСпискаЗаполнитьПоУмолчанию(Знач ИмяМакета = Неопределено,
	 Знач ИмяПользователя = Неопределено) Экспорт
	Если ИмяМакета = Неопределено Тогда
		ИмяМакета = "CRM_НастройкиВидаДинамическихСписков";
	КонецЕсли;
	
	ТекстXML = ПолучитьОбщийМакет(ИмяМакета).ПолучитьТекст();
	Если Не ЗначениеЗаполнено(ТекстXML) Тогда
		Возврат "";
	КонецЕсли;
	
	Попытка
		СтрокаОшибкаФормата = СтрЗаменить(НСтр("ru='Ошибка формата данных макета: %ИмяМакета%!'"), "%ИмяМакета%", ИмяМакета);
	
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.УстановитьСтроку(ТекстXML);
		Попытка
			ХранилищеСтруктуры = ПрочитатьXML(ЧтениеXML);
		Исключение
			ВызватьИсключение СтрокаОшибкаФормата;
		КонецПопытки;
		ЧтениеXML.Закрыть();
	
		Если ТипЗнч(ХранилищеСтруктуры) <> Тип("ХранилищеЗначения") Тогда
			ВызватьИсключение СтрокаОшибкаФормата;
		КонецЕсли;
		СтруктураЗаписи = ХранилищеСтруктуры.Получить();
		Если ТипЗнч(СтруктураЗаписи) <> Тип("Структура") Тогда
			ВызватьИсключение СтрокаОшибкаФормата;
		КонецЕсли;
		
		// Проверка обязательных полей структуры.
		Если	НЕ		СтруктураЗаписи.Свойство("МассивДеревьев")
				ИЛИ НЕ	СтруктураЗаписи.Свойство("МассивНастроек") Тогда
			ВызватьИсключение СтрокаОшибкаФормата;
		КонецЕсли;
		
		// Ручная корректировка настроек.
		Для Каждого СтруктураДерево Из СтруктураЗаписи.МассивДеревьев Цикл
			ИдентификаторСписка = СтруктураДерево.ИдентификаторСписка;
			Дерево = СтруктураДерево.Дерево;
			
			НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("ЭтоКорневойЭлемент", Ложь), Истина);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Для Каждого СтруктураНастройка Из СтруктураЗаписи.МассивНастроек Цикл
					ТекИдентификаторСписка = СтруктураНастройка.ИдентификаторСписка;
					ТекИдентификаторНастройки = СтруктураНастройка.ИдентификаторНастройки;
					
					Если ТекИдентификаторСписка = ИдентификаторСписка И ТекИдентификаторНастройки = НайденнаяСтрока.Идентификатор Тогда
						ПользовательскиеНастройкиСпискаСкорректироватьЗагруженнуюНастройку(ИдентификаторСписка,
							 НайденнаяСтрока.Наименование, СтруктураНастройка.СтруктураНастройки,
							 ИмяПользователя);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		// Сохранение
		Для Каждого СтруктураДерево Из СтруктураЗаписи.МассивДеревьев Цикл
			ИдентификаторСписка = СтруктураДерево.ИдентификаторСписка;
			Дерево = СтруктураДерево.Дерево;
			
			СохранитьДеревоПользовательскихНастроекДинамическогоСписка(ИдентификаторСписка, Дерево, ИмяПользователя);
		КонецЦикла;
		
		Для Каждого СтруктураНастройка Из СтруктураЗаписи.МассивНастроек Цикл
			ИдентификаторСписка = СтруктураНастройка.ИдентификаторСписка;
			ИдентификаторНастройки = СтруктураНастройка.ИдентификаторНастройки;
			СтруктураНастройки = СтруктураНастройка.СтруктураНастройки;
			
			СохранитьПользовательскиеНастройкиДинамическогоСписка(ИдентификаторСписка,
				 ИдентификаторНастройки, СтруктураНастройки,
				 ИмяПользователя);
		КонецЦикла;
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПредставлениеИнформацииОбОшибке =
			CRM_ОбщегоНазначенияКлиентСервер.ПолучитьПредставленияИнформацииОбОшибке(ИнформацияОбОшибке);
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ПредставлениеИнформацииОбОшибке);
	КонецПопытки;
	
КонецФункции

#КонецОбласти

Функция ПолучитьСтруктуруТеговШаблона(СсылкаНаОбъект, ИмяТабличнойЧасти = "",
	 ДополнительныеПараметры = Неопределено) Экспорт
	Возврат CRM_АвтотекстПереопределяемый.ПолучитьСтруктуруТеговШаблона(СсылкаНаОбъект,
		 ИмяТабличнойЧасти,
		 ДополнительныеПараметры);
КонецФункции

Процедура СвязатьОбъектСИнтересом(ИсточникОбъект) Экспорт
	
	// Определение способа связи.
	// 0 - не связывать, 1 - по номеру, 2 - по основанию.
	СпособСвязи = 0;
	ПараметрСвязи = Неопределено;
	
	// 1. Попытка обнаружить номер интереса в теме или кратком содержании.
	ТекстДляПоискаНомера = "";
	Если ТипЗнч(ИсточникОбъект) = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") Тогда
		ТекстДляПоискаНомера = ИсточникОбъект.Тема;
	ИначеЕсли ТипЗнч(ИсточникОбъект) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
		ТекстДляПоискаНомера = ИсточникОбъект.Тема;
	ИначеЕсли ТипЗнч(ИсточникОбъект) = Тип("ДокументОбъект.CRM_СообщениеМессенджера") Тогда
		ТекстДляПоискаНомера = ?(ЗначениеЗаполнено(ИсточникОбъект.ТекстHTML),
			ИсточникОбъект.ТекстHTML, ИсточникОбъект.ТекстСообщения);
	ИначеЕсли ТипЗнч(ИсточникОбъект) = Тип("ДокументОбъект.CRM_Заявка") Тогда
		ТекстДляПоискаНомера = ИсточникОбъект.Комментарий;
	КонецЕсли;
	
	НомерИнтереса = НомерДокументаИзТекста(ТекстДляПоискаНомера);
	Если ЗначениеЗаполнено(НомерИнтереса) Тогда
		СпособСвязи = 1;
		ПараметрСвязи = НомерИнтереса;
	КонецЕсли;
	
	// 2. Попытка связи по основанию.
	Если СпособСвязи = 0 Тогда
		
		ДокументОснование = Неопределено;
		Если ТипЗнч(ИсточникОбъект) = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") Тогда
			ДокументОснование = ИсточникОбъект.ВзаимодействиеОснование;
		ИначеЕсли ТипЗнч(ИсточникОбъект) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
			ДокументОснование = ИсточникОбъект.ВзаимодействиеОснование;
		ИначеЕсли ТипЗнч(ИсточникОбъект) = Тип("ДокументОбъект.ТелефонныйЗвонок") Тогда
			ДокументОснование = ИсточникОбъект.ВзаимодействиеОснование;
		ИначеЕсли ТипЗнч(ИсточникОбъект) = Тип("ДокументОбъект.CRM_Заявка") Тогда
			ДокументОснование = ИсточникОбъект.ДокументОснование;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			СпособСвязи = 2;
			ПараметрСвязи = ДокументОснование;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ИсточникОбъект) = Тип("ДокументОбъект.ТелефонныйЗвонок") Тогда
		СвязатьТелефонныйЗвонокСИнтересом(ИсточникОбъект);
	КонецЕсли;
	
	Если СпособСвязи = 0 Тогда
		
		Возврат;
		
	ИначеЕсли СпособСвязи = 1 Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Интерес.Ссылка КАК Ссылка,
		|	Интерес.СостояниеИнтереса КАК СостояниеИнтереса,
		|	ЛОЖЬ КАК ВведенНаОсновании,
		|	ЛОЖЬ КАК ОсновнойИнтерес
		|ИЗ
		|	Документ.CRM_Интерес КАК Интерес
		|ГДЕ
		|	Интерес.Номер = &ПараметрСвязи
		|	И НЕ Интерес.ПометкаУдаления
		|	И НЕ Интерес.Завершен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Интерес.Дата УБЫВ";
		
	ИначеЕсли СпособСвязи = 2 Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЖурналДокументов.CRM_Интерес КАК Ссылка,
		|	ЖурналДокументов.ГлавнаяЗапись КАК ГлавнаяЗапись,
		|	ЖурналДокументов.СостояниеИнтереса КАК СостояниеИнтереса,
		|	ЖурналДокументов.ИнтересЯвляетсяОснованием КАК ВведенНаОсновании,
		|	ЖурналДокументов.ОсновнойИнтерес КАК ОсновнойИнтерес
		|ИЗ
		|	РегистрСведений.CRM_ЖурналДокументов КАК ЖурналДокументов
		|ГДЕ
		|	ЖурналДокументов.Объект = &ПараметрСвязи
		|	И НЕ ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)
		|	И НЕ ЖурналДокументов.CRM_Интерес.Завершен";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПараметрСвязи", ПараметрСвязи);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСвязей = РезультатЗапроса.Выгрузить();
	Если ТипЗнч(ИсточникОбъект) = Тип("ДокументОбъект.CRM_СообщениеМессенджера") Тогда
		Если ЗначениеЗаполнено(ИсточникОбъект.Диалог) Тогда
			ДиалогОбъект = ИсточникОбъект.Диалог.ПолучитьОбъект();
			ДиалогОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов", ТаблицаСвязей);
			ДиалогОбъект.Записать();
		КонецЕсли;
	Иначе
		ИсточникОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов", ТаблицаСвязей);
	КонецЕсли;
	
КонецПроцедуры

Процедура СвязатьТелефонныйЗвонокСИнтересом(Источник)
	
	Если ЗначениеЗаполнено(Источник.ВзаимодействиеОснование) Тогда
		Возврат;
	КонецЕсли;
	
	РежимСвязи = РегистрыСведений.CRM_НастройкиСвязиОбращенийСИнтересами.НастройкиРежимСвязи(Источник);
	СвязыватьСоВсеми = (РежимСвязи.РежимСвязи = Перечисления.CRM_РежимыСвязиОбращенияСИнтересами.СвязыватьСоВсеми);
	СвязыватьСПоследним = (РежимСвязи.РежимСвязи = Перечисления.CRM_РежимыСвязиОбращенияСИнтересами.СвязыватьСПоследним);
	
	Если Источник.Входящий Тогда
		Если (ЗначениеЗаполнено(Источник.АбонентКонтакт)
			И ТипЗнч(Источник.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров"))
			И ЗначениеЗаполнено(Источник.Ответственный) Тогда
			
			ПарамКонтакт = Источник.АбонентКонтакт;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("КонтактноеЛицо",	ПарамКонтакт);
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	CRM_ИнтересКонтакты.Ссылка КАК Ссылка,
			|	CRM_ИнтересКонтакты.Ссылка.СостояниеИнтереса КАК СостояниеИнтереса,
			|	ЛОЖЬ КАК ВведенНаОсновании,
			|	ЛОЖЬ КАК ОсновнойИнтерес
			|ИЗ
			|	Документ.CRM_Интерес.Контакты КАК CRM_ИнтересКонтакты
			|ГДЕ
			|	CRM_ИнтересКонтакты.Контакт = &КонтактноеЛицо
			|	И НЕ CRM_ИнтересКонтакты.Ссылка.ПометкаУдаления
			|	И НЕ CRM_ИнтересКонтакты.Ссылка.Завершен";
			
			Если СвязыватьСПоследним Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1");
				ТекстЗапроса = ТекстЗапроса + "
				|УПОРЯДОЧИТЬ ПО
				|	CRM_ИнтересКонтакты.Ссылка.Дата УБЫВ";
			КонецЕсли;
			
			Запрос.Текст = ТекстЗапроса;
			ТаблицаСвязей = Запрос.Выполнить().Выгрузить();
			
			Если ТаблицаСвязей.Количество() > 0 Тогда
				Если СвязыватьСоВсеми ИЛИ ТаблицаСвязей.Количество() = 1 Тогда
					Источник.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов", ТаблицаСвязей);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли (ЗначениеЗаполнено(Источник.АбонентКонтакт) 
			И ТипЗнч(Источник.АбонентКонтакт) = Тип("СправочникСсылка.Партнеры")) Тогда
			
			ПарамПартнер = Источник.АбонентКонтакт;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Партнер"				, ПарамПартнер);
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_Интерес.Ссылка КАК Ссылка,
			|	CRM_Интерес.СостояниеИнтереса КАК СостояниеИнтереса,
			|	ЛОЖЬ КАК ВведенНаОсновании,
			|	ЛОЖЬ КАК ОсновнойИнтерес
			|ИЗ
			|	Документ.CRM_Интерес КАК CRM_Интерес
			|ГДЕ
			|	CRM_Интерес.Партнер = &Партнер
			|	И НЕ CRM_Интерес.ПометкаУдаления
			|	И НЕ CRM_Интерес.Завершен";
			
			Если СвязыватьСПоследним Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1");
				ТекстЗапроса = ТекстЗапроса + "
				|УПОРЯДОЧИТЬ ПО
				|	CRM_Интерес.Дата УБЫВ";
			КонецЕсли;
			
			Запрос.Текст = ТекстЗапроса;
			ТаблицаСвязей = Запрос.Выполнить().Выгрузить();
			
			Если ТаблицаСвязей.Количество() > 0 Тогда
				Если СвязыватьСоВсеми ИЛИ ТаблицаСвязей.Количество() = 1 Тогда
					Источник.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов", ТаблицаСвязей);
				КонецЕсли;
			КонецЕсли;
			
			// Если у нас не контакт, то надо проверить на потенциального клиента.
		ИначеЕсли (ЗначениеЗаполнено(Источник.АбонентКонтакт) 
			И ТипЗнч(Источник.АбонентКонтакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты"))
			И ЗначениеЗаполнено(Источник.Ответственный) Тогда
			
			ПарамПотенциальныйКлиент = Источник.АбонентКонтакт;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ПотенциальныйКлиент",	ПарамПотенциальныйКлиент);
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_Интерес.Ссылка КАК Ссылка,
			|	CRM_Интерес.СостояниеИнтереса КАК СостояниеИнтереса,
			|	ЛОЖЬ КАК ВведенНаОсновании,
			|	ЛОЖЬ КАК ОсновнойИнтерес
			|ИЗ
			|	Документ.CRM_Интерес КАК CRM_Интерес
			|ГДЕ
			|	CRM_Интерес.ПотенциальныйКлиент = &ПотенциальныйКлиент
			|	И НЕ CRM_Интерес.ПометкаУдаления
			|	И НЕ CRM_Интерес.Завершен";
			
			Если СвязыватьСПоследним Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1");
				ТекстЗапроса = ТекстЗапроса + "
				|УПОРЯДОЧИТЬ ПО
				|	CRM_Интерес.Дата УБЫВ";
			КонецЕсли;
			
			Запрос.Текст = ТекстЗапроса;
			ТаблицаСвязей = Запрос.Выполнить().Выгрузить();
			
			Если ТаблицаСвязей.Количество() > 0 Тогда
				Если СвязыватьСоВсеми ИЛИ ТаблицаСвязей.Количество() = 1 Тогда
					Источник.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов", ТаблицаСвязей);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция НомерДокументаИзТекста(Знач Текст) Экспорт
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат "";
	КонецЕсли;
	
	СимволНачалаНомера = "#";
	
	ПозицияСимволаНачалаНомера = СтрНайти(Текст, СимволНачалаНомера);
	Если ПозицияСимволаНачалаНомера = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ПозицияСимволаКонцаНомера = ПозицияСимволаНачалаНомера;
	
	ДиапазоныДопустимыхКодов = Новый Массив;
	ДиапазоныДопустимыхКодов.Добавить(Новый Структура("Мин,Макс", 48, 57)); 		// цифры
	ДиапазоныДопустимыхКодов.Добавить(Новый Структура("Мин,Макс", 65, 90)); 		// латиница большие
	ДиапазоныДопустимыхКодов.Добавить(Новый Структура("Мин,Макс", 97, 122)); 		// латиница маленькие
	ДиапазоныДопустимыхКодов.Добавить(Новый Структура("Мин,Макс", 1040, 1103)); 	// кириллица
	ДиапазоныДопустимыхКодов.Добавить(Новый Структура("Мин,Макс", 1025, 1025)); 	// символ "Ё"
	ДиапазоныДопустимыхКодов.Добавить(Новый Структура("Мин,Макс", 1105, 1105)); 	// символ "ё"
	ДиапазоныДопустимыхКодов.Добавить(Новый Структура("Мин,Макс", 45, 45)); 		// символ "-"
	
	ДлинаТекста = СтрДлина(Текст);
	Для НомерСимвола = ПозицияСимволаНачалаНомера + 1 По ДлинаТекста Цикл
		
		КодСимвола = КодСимвола(Текст, НомерСимвола);
		
		ЭтоДопустимыйСимвол = Ложь;
		Для Каждого Диапазон Из ДиапазоныДопустимыхКодов Цикл
			Если (КодСимвола >= Диапазон.Мин И КодСимвола <= Диапазон.Макс) Тогда
				ЭтоДопустимыйСимвол = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЭтоДопустимыйСимвол Тогда
			ПозицияСимволаКонцаНомера = НомерСимвола;
			Прервать;
		КонецЕсли;
		
		Если НомерСимвола = ДлинаТекста Тогда
			ПозицияСимволаКонцаНомера = ДлинаТекста + 1;
			Прервать;
		КонецЕсли; 
		
	КонецЦикла;
	
	ДлинаНомера = ПозицияСимволаКонцаНомера - ПозицияСимволаНачалаНомера - 1;
	Если ДлинаНомера = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Сред(Текст, ПозицияСимволаНачалаНомера + 1, ДлинаНомера);
	
КонецФункции

Процедура СвязатьДиалогСИнтересом(Источник, Связывать, РежимСвязи) Экспорт
	
	СвязатьОбъектСИнтересом(Источник);
	
КонецПроцедуры

Процедура ЗаполнитьОтветственногоВходящегоПисьмаПоСвязаннымИнтересам(Источник) Экспорт
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("CRM_ТаблицаИнтересов") Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ТаблицаИнтересов = Источник.ДополнительныеСвойства.CRM_ТаблицаИнтересов;
	
	Если CRM_ТаблицаИнтересов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Если учетная запись - персональная, используется Ответственный из нее
	Если ЗначениеЗаполнено(Источник.УчетнаяЗапись)
		И ЗначениеЗаполнено(Источник.УчетнаяЗапись.ВладелецУчетнойЗаписи) Тогда
		
		Источник.Ответственный = Источник.УчетнаяЗапись.ВладелецУчетнойЗаписи;
		Источник.CRM_РольОтветственного = Справочники.РолиИсполнителей.ПустаяСсылка();
		
		Возврат;
		
	КонецЕсли;
	//
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ТаблицаИнтересов.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаИнтересов
		|ИЗ
		|	&CRM_ТаблицаИнтересов КАК CRM_ТаблицаИнтересов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументCRM_Интерес.Ссылка.Ответственный КАК Ответственный
		|ИЗ
		|	Документ.CRM_Интерес КАК ДокументCRM_Интерес
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИнтересов КАК ТаблицаИнтересов
		|		ПО ДокументCRM_Интерес.Ссылка = ТаблицаИнтересов.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументCRM_Интерес.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("CRM_ТаблицаИнтересов", CRM_ТаблицаИнтересов);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Ответственный) Тогда
			Если ТипЗнч(Выборка.Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда
				Источник.Ответственный = Выборка.Ответственный;
				Источник.CRM_РольОтветственного = Справочники.РолиИсполнителей.ПустаяСсылка();
			ИначеЕсли ТипЗнч(Выборка.Ответственный) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
				Источник.Ответственный = Справочники.Пользователи.ПустаяСсылка();
				Источник.CRM_РольОтветственного = Выборка.Ответственный;				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//
//
Функция ВернутьСостояниеИнтереса(Интерес) Экспорт
	
	Возврат Интерес.СостояниеИнтереса;
	
КонецФункции

//
//
Процедура ДозаписатьСвязьСИнтересами(Источник, ТаблицаЗаписей, CRM_ТаблицаИнтересов) Экспорт
	
	Если CRM_ТаблицаИнтересов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	CRM_ТаблицаИнтересов.ЗаполнитьЗначения(Ложь, "ОсновнойИнтерес");
	CRM_ТаблицаИнтересов[0].ОсновнойИнтерес = Истина;
	
	ИсходныйНабор = ТаблицаЗаписей.Скопировать();
	ТаблицаЗаписей.Очистить();	
		
	Для Каждого СтрокаИнтереса Из CRM_ТаблицаИнтересов Цикл
		
		Для Каждого ТекЗапись Из ИсходныйНабор Цикл		
			
			Если (ТипЗнч(Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
				 ИЛИ ТипЗнч(Источник) = Тип("ЗадачаОбъект.ЗадачаИсполнителя"))
				И НЕ Источник.ПометкаУдаления
				И НЕ Источник.Выполнена Тогда
				ТекЗапись.CRM_Интерес		= СтрокаИнтереса.Ссылка;
				ТекЗапись.СостояниеИнтереса	= СтрокаИнтереса.Ссылка.СостояниеИнтереса;
			Иначе
				ТекЗапись.CRM_Интерес		= СтрокаИнтереса.Ссылка;
				ТекЗапись.СостояниеИнтереса	= СтрокаИнтереса.Ссылка.СостояниеИнтереса;
				//ТекЗапись.ГлавнаяЗапись		= СтрокаИнтереса.ОсновнойИнтерес;
			КонецЕсли;
			
			ТекЗапись.ОсновнойИнтерес			= СтрокаИнтереса.ОсновнойИнтерес;
			ТекЗапись.ИнтересЯвляетсяОснованием	= СтрокаИнтереса.ВведенНаОсновании;	
			
			НоваяЗапись = ТаблицаЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекЗапись);
			
			// Проверим, не было ли ранее записи текущего объекта с этим интересом,
			// если была, то состояние интереса берем из этой записи
			// !!! за исключением не выполненных и не помеченных задач. Для задачи берем текущее состояние интереса;
			Если ТипЗнч(Источник) = Тип("ЗадачаОбъект.ЗадачаИсполнителя")
				И НЕ Источник.ПометкаУдаления
				И НЕ Источник.Выполнена Тогда
				НоваяЗапись.CRM_Интерес			= СтрокаИнтереса.Ссылка;
				НоваяЗапись.СостояниеИнтереса	= СтрокаИнтереса.Ссылка.СостояниеИнтереса;
				
				НоваяЗапись.ОсновнойИнтерес				= СтрокаИнтереса.ОсновнойИнтерес;
				НоваяЗапись.ИнтересЯвляетсяОснованием	= СтрокаИнтереса.ВведенНаОсновании;
				
			Иначе
				НоваяЗапись.CRM_Интерес					= СтрокаИнтереса.Ссылка;
				НоваяЗапись.ОсновнойИнтерес 			= СтрокаИнтереса.ОсновнойИнтерес;
				НоваяЗапись.ИнтересЯвляетсяОснованием	= СтрокаИнтереса.ВведенНаОсновании;
				НоваяЗапись.СостояниеИнтереса			= СтрокаИнтереса.Ссылка.СостояниеИнтереса;
			КонецЕсли;
			
			Если ТипЗнч(Источник) = Тип("ЗадачаОбъект.ЗадачаИсполнителя") 			
				И ЗначениеЗаполнено(НоваяЗапись.Объект.БизнесПроцесс)
				И Метаданные.ПланыВидовХарактеристик.CRM_ОбъектыЖурналаДокументов.Тип.СодержитТип(ТипЗнч(НоваяЗапись.Объект.БизнесПроцесс)) Тогда
				// Добавлена проверка, чтобы не падала запись задач, у которых нет БП.
				// Проверим, есть ли такая связь с интересом у бизнес-процесса задачи
				// если нет, то добавим запись.
				
				ЗаписьРегистраБП = РегистрыСведений.CRM_ЖурналДокументов.СоздатьМенеджерЗаписи();
				ЗаписьРегистраБП.ГлавнаяЗапись	= Истина;
				ЗаписьРегистраБП.Клиент			= НоваяЗапись.Клиент;
				ЗаписьРегистраБП.Объект			= НоваяЗапись.Объект.БизнесПроцесс;
				ЗаписьРегистраБП.CRM_Интерес	= НоваяЗапись.CRM_Интерес;
				ЗаписьРегистраБП.Прочитать();
				Если НЕ ЗаписьРегистраБП.Выбран() Тогда
					
					НоваяЗаписьБизнесПроцесса = РегистрыСведений.CRM_ЖурналДокументов.СоздатьМенеджерЗаписи();
					
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("Объект"		, НоваяЗапись.Объект.БизнесПроцесс);
					Запрос.УстановитьПараметр("Клиент"		, НоваяЗапись.Клиент);
					Запрос.УстановитьПараметр("CRM_Интерес"	, НоваяЗапись.CRM_Интерес);
					Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
					|	CRM_ЖурналДокументов.ГлавнаяЗапись КАК ГлавнаяЗапись,
					|	CRM_ЖурналДокументов.Клиент КАК Клиент,
					|	CRM_ЖурналДокументов.Объект КАК Объект,
					|	CRM_ЖурналДокументов.CRM_Интерес КАК CRM_Интерес,
					|	CRM_ЖурналДокументов.ТипОбъекта КАК ТипОбъекта,
					|	CRM_ЖурналДокументов.Номер КАК Номер,
					|	CRM_ЖурналДокументов.Дата КАК Дата,
					|	CRM_ЖурналДокументов.Организация КАК Организация,
					|	CRM_ЖурналДокументов.Сумма КАК Сумма,
					|	CRM_ЖурналДокументов.Валюта КАК Валюта,
					|	CRM_ЖурналДокументов.Ответственный КАК Ответственный,
					|	CRM_ЖурналДокументов.Автор КАК Автор,
					|	CRM_ЖурналДокументов.Описание КАК Описание,
					|	CRM_ЖурналДокументов.Важность КАК Важность,
					|	CRM_ЖурналДокументов.ВходящееИсходящее КАК ВходящееИсходящее,
					|	CRM_ЖурналДокументов.ВидСобытия КАК ВидСобытия,
					|	CRM_ЖурналДокументов.ПометкаУдаления КАК ПометкаУдаления,
					|	CRM_ЖурналДокументов.Проведен КАК Проведен,
					|	CRM_ЖурналДокументов.КонтактноеЛицо КАК КонтактноеЛицо,
					|	CRM_ЖурналДокументов.СостояниеСобытия КАК СостояниеСобытия,
					|	CRM_ЖурналДокументов.СостояниеИнтереса КАК СостояниеИнтереса,
					|	CRM_ЖурналДокументов.ЕстьПрисоединенныеФайлы КАК ЕстьПрисоединенныеФайлы
					|ИЗ
					|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
					|ГДЕ
					|	CRM_ЖурналДокументов.Объект = &Объект
					|	И CRM_ЖурналДокументов.Клиент = &Клиент
					|	И CRM_ЖурналДокументов.ГлавнаяЗапись";
					
					Выборка = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапрос(Запрос).Выбрать();
					Если Выборка.Следующий() Тогда
						ЗаполнитьЗначенияСвойств(НоваяЗаписьБизнесПроцесса, Выборка);
						НоваяЗаписьБизнесПроцесса.CRM_Интерес		= НоваяЗапись.CRM_Интерес;
						НоваяЗаписьБизнесПроцесса.СостояниеИнтереса	= НоваяЗапись.СостояниеИнтереса;
					Иначе
						ТипИсточника	= ТипЗнч(НоваяЗапись.Объект.БизнесПроцесс);
						ТипОбъекта		= CRM_КлиентыСервер.ПолучитьСсылкуПВХОбъектыЖурналаПоТипу(ТипИсточника);
						
						НоваяЗаписьБизнесПроцесса.ГлавнаяЗапись		= Истина;
						НоваяЗаписьБизнесПроцесса.Клиент			= НоваяЗапись.Клиент;
						НоваяЗаписьБизнесПроцесса.Объект			= НоваяЗапись.Объект.БизнесПроцесс;
						НоваяЗаписьБизнесПроцесса.CRM_Интерес		= НоваяЗапись.CRM_Интерес;
						НоваяЗаписьБизнесПроцесса.ТипОбъекта		= ТипОбъекта;
						НоваяЗаписьБизнесПроцесса.Номер				= НоваяЗапись.Объект.БизнесПроцесс.Номер;
						НоваяЗаписьБизнесПроцесса.Дата				= НоваяЗапись.Объект.БизнесПроцесс.Дата;
						НоваяЗаписьБизнесПроцесса.Автор				= НоваяЗапись.Объект.БизнесПроцесс.Автор;
						НоваяЗаписьБизнесПроцесса.Описание			= ПолучитьТекстовоеОписанияОбъекта(НоваяЗапись.Объект.БизнесПроцесс);
						НоваяЗаписьБизнесПроцесса.Важность			= НоваяЗапись.Объект.БизнесПроцесс.Важность;
						НоваяЗаписьБизнесПроцесса.ПометкаУдаления	= НоваяЗапись.Объект.БизнесПроцесс.ПометкаУдаления;
						НоваяЗаписьБизнесПроцесса.СостояниеИнтереса	= НоваяЗапись.СостояниеИнтереса;
					КонецЕсли;
					
					НоваяЗаписьБизнесПроцесса.ОсновнойИнтерес			= НоваяЗапись.ОсновнойИнтерес;
					НоваяЗаписьБизнесПроцесса.ИнтересЯвляетсяОснованием = НоваяЗапись.ИнтересЯвляетсяОснованием;
					
					НоваяЗаписьБизнесПроцесса.Записать();
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Источник) = Тип("БизнесПроцессОбъект.Задание") Тогда
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("БизнесПроцесс", Источник.Ссылка);
				Запрос.Текст = "ВЫБРАТЬ
				|	ЗадачаИсполнителя.Ссылка КАК Ссылка
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
				|ГДЕ
				|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
				|	И НЕ ЗадачаИсполнителя.Выполнена";
				
				Выборка = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапрос(Запрос).Выбрать();
				Пока Выборка.Следующий() Цикл
					// Проверим, есть ли такая связь с интересом у задачи
					// если нет, то добавим запись.
					
					ЗаписьРегистраЗадача = РегистрыСведений.CRM_ЖурналДокументов.СоздатьМенеджерЗаписи();
					ЗаписьРегистраЗадача.ГлавнаяЗапись	= Истина;
					ЗаписьРегистраЗадача.Клиент			= НоваяЗапись.Клиент;
					ЗаписьРегистраЗадача.Объект			= Выборка.Ссылка;
					ЗаписьРегистраЗадача.CRM_Интерес	= НоваяЗапись.CRM_Интерес;
					ЗаписьРегистраЗадача.Прочитать();
					
					Если НЕ ЗаписьРегистраЗадача.Выбран() Тогда
						
						НоваяЗаписьЗадача = РегистрыСведений.CRM_ЖурналДокументов.СоздатьМенеджерЗаписи();
						
						Запрос = Новый Запрос;
						Запрос.УстановитьПараметр("Объект"		, Выборка.Ссылка);
						Запрос.УстановитьПараметр("Клиент"		, НоваяЗапись.Клиент);
						Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
						|	CRM_ЖурналДокументов.ГлавнаяЗапись КАК ГлавнаяЗапись,
						|	CRM_ЖурналДокументов.Клиент КАК Клиент,
						|	CRM_ЖурналДокументов.Объект КАК Объект,
						|	CRM_ЖурналДокументов.CRM_Интерес КАК CRM_Интерес,
						|	CRM_ЖурналДокументов.ТипОбъекта КАК ТипОбъекта,
						|	CRM_ЖурналДокументов.Номер КАК Номер,
						|	CRM_ЖурналДокументов.Дата КАК Дата,
						|	CRM_ЖурналДокументов.Организация КАК Организация,
						|	CRM_ЖурналДокументов.Сумма КАК Сумма,
						|	CRM_ЖурналДокументов.Валюта КАК Валюта,
						|	CRM_ЖурналДокументов.Ответственный КАК Ответственный,
						|	CRM_ЖурналДокументов.Автор КАК Автор,
						|	CRM_ЖурналДокументов.Описание КАК Описание,
						|	CRM_ЖурналДокументов.Важность КАК Важность,
						|	CRM_ЖурналДокументов.ВходящееИсходящее КАК ВходящееИсходящее,
						|	CRM_ЖурналДокументов.ВидСобытия КАК ВидСобытия,
						|	CRM_ЖурналДокументов.ПометкаУдаления КАК ПометкаУдаления,
						|	CRM_ЖурналДокументов.Проведен КАК Проведен,
						|	CRM_ЖурналДокументов.КонтактноеЛицо КАК КонтактноеЛицо,
						|	CRM_ЖурналДокументов.СостояниеСобытия КАК СостояниеСобытия,
						|	CRM_ЖурналДокументов.СостояниеИнтереса КАК СостояниеИнтереса,
						|	CRM_ЖурналДокументов.ЕстьПрисоединенныеФайлы КАК ЕстьПрисоединенныеФайлы
						|ИЗ
						|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
						|ГДЕ
						|	CRM_ЖурналДокументов.Объект = &Объект
						|	И CRM_ЖурналДокументов.Клиент = &Клиент
						|	И CRM_ЖурналДокументов.ГлавнаяЗапись";
						
						Выборка_1 = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапрос(Запрос).Выбрать();
						Если Выборка_1.Следующий() Тогда
							ЗаполнитьЗначенияСвойств(НоваяЗаписьЗадача, Выборка_1);
							НоваяЗаписьЗадача.CRM_Интерес		= НоваяЗапись.CRM_Интерес;
							НоваяЗаписьЗадача.СостояниеИнтереса	= НоваяЗапись.СостояниеИнтереса;
						Иначе
							ТипИсточника	= ТипЗнч(Выборка.Ссылка);
							ТипОбъекта		= CRM_КлиентыСервер.ПолучитьСсылкуПВХОбъектыЖурналаПоТипу(ТипИсточника);
							
							НоваяЗаписьЗадача.ГлавнаяЗапись		= Истина;
							НоваяЗаписьЗадача.Клиент			= НоваяЗапись.Клиент;
							НоваяЗаписьЗадача.Объект			= НоваяЗапись.Объект.БизнесПроцесс;
							НоваяЗаписьЗадача.CRM_Интерес		= НоваяЗапись.CRM_Интерес;
							НоваяЗаписьЗадача.ТипОбъекта		= ТипОбъекта;
							НоваяЗаписьЗадача.Номер				= Выборка.Ссылка.Номер;
							НоваяЗаписьЗадача.Дата				= Выборка.Ссылка.Дата;
							НоваяЗаписьЗадача.Автор				= Выборка.Ссылка.Автор;
							НоваяЗаписьЗадача.Описание			= Выборка.Ссылка.Описание;
							НоваяЗаписьЗадача.Важность			= Выборка.Ссылка.Важность;
							НоваяЗаписьЗадача.ПометкаУдаления	= Выборка.Ссылка.ПометкаУдаления;
							НоваяЗаписьЗадача.СостояниеИнтереса	= НоваяЗапись.СостояниеИнтереса;
							
							НоваяЗаписьЗадача.ИнтересЯвляетсяОснованием = НоваяЗапись.ИнтересЯвляетсяОснованием;
							
						КонецЕсли;
						
						НоваяЗаписьЗадача.ОсновнойИнтерес		= НоваяЗапись.ОсновнойИнтерес;
						
						НоваяЗаписьЗадача.Записать();
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьАктивныйИнтересПоКлиенту(Клиент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_Интерес.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.CRM_Интерес КАК CRM_Интерес
	|ГДЕ
	|	CRM_Интерес.Партнер = &Клиент
	|	И НЕ CRM_Интерес.Завершен
	|	И НЕ CRM_Интерес.ПометкаУдаления";
	
	Если ТипЗнч(Клиент) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Партнер", "КонтактноеЛицо");
	ИначеЕсли ТипЗнч(Клиент) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Партнер", "ПотенциальныйКлиент");
	КонецЕсли;

	Запрос.УстановитьПараметр("Клиент", Клиент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Рассчитать длительность обращения
//
// Параметры:
//  Обращение	 - РегистрСведений.CRM_СостоянияЛидов.Лид - Ссылка на обращение.
//  ДатаОбработки	 - Дата - Дата обработки обрашения.
// 
// Возвращаемое значение:
//  Дата - Длительность обращения. 
//
Функция РассчитатьДлительностьОбращения(Обращение, ДатаОбработки) Экспорт
	Если ТипЗнч(Обращение) = Тип("СправочникСсылка.CRM_Диалоги") Тогда
		Дата = Обращение.ДатаНачала;
	Иначе
		Дата = Обращение.Дата;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаОбработки) Тогда
		Длительность = ДатаОбработки - Дата;
	Иначе
		Длительность = ТекущаяДатаСеанса() - Дата;
	КонецЕсли;	
	Возврат Длительность;
КонецФункции

Функция ПолучитьРеквизитОтветственного(Ответственный, ИмяРевизита) Экспорт
	
	Если ТипЗнч(Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда
		Возврат Ответственный[ИмяРевизита];
	КонецЕсли;
	
	Если ТипЗнч(Ответственный) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		ДанныеРоли = ПолучитьДанныеРоли(Ответственный);
		
		Если ДанныеРоли.Свойство(ИмяРевизита) Тогда
			Возврат ДанныеРоли[ИмяРевизита];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДанныеРоли(РольИсполнителя)
	
	Результат = Новый Структура;
	Результат.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	
	Если ТипЗнч(РольИсполнителя) <> Тип("СправочникСсылка.РолиИсполнителей") Тогда
		Возврат Результат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителя);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ИсполнителиЗадач.Исполнитель КАК Справочник.Пользователи).Подразделение КАК Подразделение
	               |ПОМЕСТИТЬ ДанныеПользователейПоРоли
	               |ИЗ
	               |	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	               |ГДЕ
	               |	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеПользователейПоРоли.Подразделение КАК Подразделение
	               |ИЗ
	               |	ДанныеПользователейПоРоли КАК ДанныеПользователейПоРоли
	               |ГДЕ
	               |	НЕ ДанныеПользователейПоРоли.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
	
	РезультатЗапросаТЗ = Запрос.Выполнить().Выгрузить();

	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапросаТЗ.Количество() > 0 Тогда
		Результат.Подразделение = РезультатЗапросаТЗ[0].Подразделение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область РаботаCКартами
////////////////////////////////////////////////////////////////////////////////
// Блок процедур и функций для работы с картами.

Функция ПолучитьАдрес(СтруктураАдреса, СайтИнтернетКарты) Экспорт
	
	Возврат CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
		СформироватьСтрокуПоискаДляИнтернетКарты(СтруктураАдреса, СайтИнтернетКарты);
	
КонецФункции

#КонецОбласти // РаботаCКартами

#Область РаботаСПочтой

Функция НайтиОтветственногоПоИмениПользователя(УчетнаяЗапись, МассивСтрокПоиска) Экспорт
	
	МассивПоискаБезПустыхСтрок = Новый Массив;
	Для Каждого СтрокаПоиска Из МассивСтрокПоиска Цикл
		Если ЗначениеЗаполнено(СокрЛП(СтрокаПоиска)) Тогда
			МассивПоискаБезПустыхСтрок.Добавить(СокрЛП(СтрокаПоиска));
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	CRM_ПодписиУчетныхЗаписей.УчетнаяЗапись КАК УчетнаяЗапись,
		|	CRM_ПодписиУчетныхЗаписей.Пользователь КАК Пользователь,
		|	CRM_ПодписиУчетныхЗаписей.ИмяОтправителя КАК ИмяОтправителя
		|ИЗ
		|	РегистрСведений.CRM_ПодписиУчетныхЗаписей КАК CRM_ПодписиУчетныхЗаписей
		|ГДЕ
		|	CRM_ПодписиУчетныхЗаписей.УчетнаяЗапись = &УчетнаяЗапись
		|	И CRM_ПодписиУчетныхЗаписей.ИмяОтправителя В(&МассивПоиска)
		|	И НЕ CRM_ПодписиУчетныхЗаписей.Пользователь.Недействителен
		|	И НЕ CRM_ПодписиУчетныхЗаписей.Пользователь.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("МассивПоиска", МассивПоискаБезПустыхСтрок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Пользователь;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция МассивПубличныхДоменовПоУмолчанию() Экспорт
	
	ПубличныеДомены = Новый Массив;
	
	ПубличныеДомены.Добавить("@mail.ru");
	ПубличныеДомены.Добавить("@inbox.ru");
	ПубличныеДомены.Добавить("@list.ru");
	ПубличныеДомены.Добавить("@internet.ru");
	ПубличныеДомены.Добавить("@bk.ru");
	ПубличныеДомены.Добавить("@gmail.com");
	ПубличныеДомены.Добавить("@gmail.ru");
	ПубличныеДомены.Добавить("@yandex.ru");
	ПубличныеДомены.Добавить("@ya.ru");
	ПубличныеДомены.Добавить("@rambler.ru");
	ПубличныеДомены.Добавить("@pochta.ru");
	ПубличныеДомены.Добавить("@fromru.com");
	ПубличныеДомены.Добавить("@front.ru");
	ПубличныеДомены.Добавить("@hotbox.ru");
	ПубличныеДомены.Добавить("@krovatka.net");
	ПубличныеДомены.Добавить("@land.ru");
	ПубличныеДомены.Добавить("@mail15.com");
	ПубличныеДомены.Добавить("@mail333.com");
	ПубличныеДомены.Добавить("@pisem.net");
	ПубличныеДомены.Добавить("@pochtamt.ru");
	ПубличныеДомены.Добавить("@pop3.ru");
	ПубличныеДомены.Добавить("@rbcmail.ru");
	ПубличныеДомены.Добавить("@smtp.ru");
	
	Возврат ПубличныеДомены;

КонецФункции

Функция МассивПубличныхДоменов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ХранилищеНастроек = Константы.CRM_ПубличныеПочтовыеДомены.Получить();
	Настройки = ХранилищеНастроек.Получить();
	
	Если Настройки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Настройки.МассивДоменов;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецФункции

#КонецОбласти

// Продолжение процедуры ЗапуститьФоновоеЗаданиеСКонтекстомКлиента.
Процедура ПередЗапускомФоновогоЗаданияСКонтекстомКлиента(ВсеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ПравоДоступа("Установка", Метаданные.ПараметрыСеанса.ПараметрыКлиентаНаСервере) Тогда
		ПараметрыСеанса.ПараметрыКлиентаНаСервере = ВсеПараметры.ПараметрыКлиентаНаСервере;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбщегоНазначения.ВыполнитьМетодКонфигурации(ВсеПараметры.ИмяМетода, ВсеПараметры.Параметры);
	
КонецПроцедуры

// Функция осуществляет непосредственный разбор json. 
//
//
Функция ПолучитьЗначениеJSON(СтрJSON, Значение, Позиция = 1, Ключ = "") Экспорт
	Перем Кавычка;

	ЗначениеВСтроке = "";
	Кавычек = 0;
	Комментарий = Ложь;
	Строка = Ложь;

	Пока Позиция <= СтрДлина(СтрJSON) Цикл
		ХХ = Сред(СтрJSON, Позиция, 2);
		Хзнач = Лев(ХХ, 1);
		Позиция = Позиция + 1;

		Если Хзнач > " " ИЛИ Строка Тогда // Отсекаем всякий хлам

			Если Комментарий Тогда
				// Это комментарий. Крутимся в цикле пока не встретится конец комментария.
				Если ХХ = "*/" Тогда
					// Комментарий закончился
					Комментарий = Ложь;
					Позиция = Позиция + 1;
				КонецЕсли;

			ИначеЕсли Хзнач = "\" Тогда
				Позиция = Позиция + 1;
				ХХ = ВРег(ХХ);
				Если ХХ = "\""" Тогда
					ЗначениеВСтроке = ЗначениеВСтроке + """";
				
				ИначеЕсли ХХ = "\\" Тогда ЗначениеВСтроке = ЗначениеВСтроке + "\";
				ИначеЕсли ХХ = "\/" Тогда ЗначениеВСтроке = ЗначениеВСтроке + "/";
				ИначеЕсли ХХ = "\B" Тогда ЗначениеВСтроке = ЗначениеВСтроке + Символ(8);
				ИначеЕсли ХХ = "\F" Тогда ЗначениеВСтроке = ЗначениеВСтроке + Символы.ПФ; // перевод формы (страницы)
				ИначеЕсли ХХ = "\N" Тогда ЗначениеВСтроке = ЗначениеВСтроке + Символы.ПС; // перевод строки
				ИначеЕсли ХХ = "\R" Тогда ЗначениеВСтроке = ЗначениеВСтроке + Символы.ВК; // возврат каретки
				ИначеЕсли ХХ = "\T" Тогда ЗначениеВСтроке = ЗначениеВСтроке + Символы.ВТаб; // символ вертикальной табуляции
				ИначеЕсли ХХ = "\U" Тогда
					ЗначениеВСтроке = ЗначениеВСтроке + Символ(Hex2Число(Сред(СтрJSON, Позиция, 4))); // шестнадцатиричное число
					Позиция = Позиция + 4;
				КонецЕсли;

			ИначеЕсли Строка Тогда
				// Если строка не закончилась - то пропускаем управляющие символы.
				Если Хзнач = Кавычка Тогда
					// Закончилась строка
					Строка = Ложь;
					Кавычек = Кавычек + 1;
				Иначе
					ЗначениеВСтроке = ЗначениеВСтроке + Хзнач;
				КонецЕсли;

			ИначеЕсли ХХ = "/*" Тогда
				// Начался комментарий
				Комментарий = Истина;
				Позиция = Позиция + 1;

			ИначеЕсли СтрНайти("""'{}[]:,", Хзнач) > 0 Тогда
				Если Хзнач = """" ИЛИ Хзнач = "'" Тогда
					// Началась строка
					// Строка - коллекция нуля или больше символов Unicode, заключенная в
					// двойные кавычки, используя "\" в качестве символа экранирования.
					// Символ представляется как односимвольная строка.
					// Похожий синтаксис используется в C и Java.
					Строка = Истина;
					Кавычка = Хзнач;
					Кавычек = Кавычек + 1;

				ИначеЕсли Хзнач = "{" Тогда
					// Начался объект
					// Объект - неупорядоченный набор пар ключ/значение.
					// Объект начинается с "{" и заканчивается "}".
					// Каждое имя сопровождается ":", пары ключ/значение разделяются ",".
					Объект = Новый Соответствие;
					// Объект=Новый Структура;
					Пока Истина Цикл
						// Получим ключ и значение
						Ключ = "";
						Режим = ПолучитьЗначениеJSON(СтрJSON, Значение, Позиция, Ключ);
						// 0 - Есть значение и не конец объекта (запятая)
						// 1 - есть значение и конец объекта
						// 2 - нет значения и не конец объекта (запятая)
						// 3 - нет значения и конец объекта.
						Если Режим = 0 Тогда
							Объект.Вставить(Ключ, Значение);
						ИначеЕсли Режим = 1 Тогда
							Объект.Вставить(Ключ, Значение);
							Прервать;
						ИначеЕсли Режим = 3 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Значение = Объект;
					Возврат 0;

				ИначеЕсли Хзнач = "[" Тогда
					// Начался массив
					// Массив - упорядоченная коллекция значений.
					// Массив начинается с "[" и заканчивается "]".
					// Значения разделены ",".
					Массив = Новый Массив;
					Пока Истина Цикл
						Режим = ПолучитьЗначениеJSON(СтрJSON, Значение, Позиция);
						// 0 - Есть значение и не конец массива (запятая)
						// 1 - есть значение и конец массива
						// 2 - нет значения и не конец массива (запятая)
						// 3 - нет значения и конец массива.
						Если Режим = 0 Тогда
							Массив.Добавить(Значение);
						ИначеЕсли Режим = 1 Тогда
							Массив.Добавить(Значение);
							Прервать;
						ИначеЕсли Режим = 3 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Значение = Массив;
					Возврат 0;

				ИначеЕсли Хзнач = "]" ИЛИ Хзнач = "}" Тогда
					// Закончился массив/объект
					Если ЗначениеВСтроке = "" И Кавычек = 0 Тогда
						Возврат 3; // Нет значения и конец массива/объекта.
					Иначе
						Значение = ПолучитьЗначениеИзСтроки(ЗначениеВСтроке, Кавычек);
						Возврат 1; // Есть значение и конец массива/объекта.
					КонецЕсли;

				ИначеЕсли Хзнач = ":" Тогда
					Ключ = ЗначениеВСтроке;
					Возврат ПолучитьЗначениеJSON(СтрJSON, Значение, Позиция);

				Иначе
					// запятая
					Прервать;
				КонецЕсли;

			Иначе
				ЗначениеВСтроке = ЗначениеВСтроке + Хзнач;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если Кавычек > 0 Тогда
		Значение = ЗначениеВКавычках(ЗначениеВСтроке);
	Иначе
		Если ЗначениеВСтроке = "" Тогда
			Возврат 2;
		Иначе
			Значение = ЗначениеБезКавычек(ЗначениеВСтроке);
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции // ПолучитьЗначениеJSON()

#Область РаботаСДополнительнымиРеквизитами

Процедура ПриЗаписиДопРеквизита(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") И Источник.ДополнительныеСвойства.ЭтоНовый Тогда
		
		ДобавитьНастройкуРеквизита(Источник);
		
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗаполнятьОбязательно") Тогда
		
		ОбновитьНастройкуРеквизита(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюДопРеквизита(Источник, Отказ) Экспорт
	
	Если Источник.НаборСвойств.Родитель = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_CRM_КартыМаршрутов") Тогда
		
		Если Источник.ЭтоНовый() Тогда
			
			Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
			
		ИначеЕсли НЕ Источник.ЗаполнятьОбязательно = Источник.Ссылка.ЗаполнятьОбязательно Тогда
			
			Источник.ДополнительныеСвойства.Вставить("ЗаполнятьОбязательно", Источник.ЗаполнятьОбязательно);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // РаботаСДополнительнымиРеквизитами

#Область РаботаСОбщимЖурналом

// Процедура предназначене для заполнения Интереса и состояния интереса в записях
// регистра сведений CRM_ЖурналДокументов. Вызывается из CRM_КлиентыСервер.ЗарегистрироватьОбъектВОбщемЖурнале.
//
Процедура ЗаполнитьНаличиеПрисоединенногоФайлаВЗаписиОбщегоЖурнала(ВладелецФайла) Экспорт
	
	Если Метаданные.Справочники.Найти(ВладелецФайла.Метаданные().Имя + "ПрисоединенныеФайлы") = Неопределено
		Или Не Метаданные.ПланыВидовХарактеристик.CRM_ОбъектыЖурналаДокументов.Тип.СодержитТип(ТипЗнч(ВладелецФайла)) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СправочникПрисоединенныеФайлы.Ссылка,
	|	СправочникПрисоединенныеФайлы.Наименование КАК ИмяФайла,
	|	СправочникПрисоединенныеФайлы.Размер КАК Размер
	|ИЗ
	|	Справочник." + ВладелецФайла.Метаданные().Имя + "ПрисоединенныеФайлы КАК СправочникПрисоединенныеФайлы
	|ГДЕ
	|	СправочникПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И НЕ СправочникПрисоединенныеФайлы.ПометкаУдаления";
	
	Если Метаданные.Справочники.Найти(ВладелецФайла.Метаданные().Имя + "ПрисоединенныеФайлы").Иерархический = Истина Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И НЕ СправочникПрисоединенныеФайлы.ЭтоГруппа";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ВладелецФайла);
	Попытка
		ТаблицаФайлов = Запрос.Выполнить().Выгрузить();
	Исключение
		Возврат;	
	КонецПопытки;
	
	// Набор записей с отбором по источнику.
	НаборЗаписей = РегистрыСведений.CRM_ЖурналДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ВладелецФайла);
	НаборЗаписей.Прочитать();
	
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		ЗаписьНабора.ЕстьПрисоединенныеФайлы = ТаблицаФайлов.Количество() > 0;
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

//
//
Процедура ОбновитьЗаписиЖурналаДокументов(Объект, Форма) Экспорт
	
	НаборРегистра = РегистрыСведений.CRM_ЖурналДокументов.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Объект.Установить(Объект.Ссылка);
	НаборРегистра.Прочитать();
	
КонецПроцедуры

#КонецОбласти // РаботаСОбщимЖурналом

// Процедура выполняется при записи объекта задач пользователя.
//
Процедура ПриЗаписиОбъектаЗадачПользователя(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// очищаем все записи по данному объекту и заполняем заново
	НаборРегистра = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Объект.Установить(Источник.Ссылка);
	НаборРегистра.Очистить();
	НаборРегистра.Записать();
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Взаимодействие") Тогда
		
		Если Источник.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Отменено Или Источник.ПометкаУдаления Тогда
			Возврат;
		КонецЕсли;
			
		Контакт = "";
		Если ЗначениеЗаполнено(Источник.Партнер) Тогда
			Контакт = Источник.Партнер.Наименование;
		ИначеЕсли ЗначениеЗаполнено(Источник.КонтактноеЛицо) Тогда
			Контакт = Источник.КонтактноеЛицо.Наименование;
		ИначеЕсли ЗначениеЗаполнено(Источник.ПотенциальныйКлиент) Тогда
			Контакт = Источник.ПотенциальныйКлиент.Наименование;
		КонецЕсли;
		
		// Проверяющие по интересу
		ПроверяющийАвтор 			= Ложь;
		ПроверяющийОтветственный 	= Ложь;
		
		Если ЗначениеЗаполнено(Источник.ДокументОснование)
			 И ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			// Очищаем список контролирующих, чтобы его перезаполнить,
			// иначе не удалятся записи для отказавшихся от контроля.
			
			НаборРегистра = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
			НаборРегистра.Отбор.Объект.Установить(Источник.Ссылка);
			НаборРегистра.Прочитать();
			Для каждого ЗаписьНабора Из НаборРегистра Цикл
				Если ЗаписьНабора.Проверяющий = Истина Тогда
					НаборРегистра.Удалить(ЗаписьНабора);
				КонецЕсли;
			КонецЦикла; 
			НаборРегистра.Записать();
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	CRM_ИнтересыНаКонтролеСрезПоследних.Объект КАК Ссылка,
			|	CRM_ИнтересыНаКонтролеСрезПоследних.Пользователь КАК Пользователь
			|ИЗ
			|	РегистрСведений.CRM_ИнтересыНаКонтроле.СрезПоследних(&Период, ) КАК CRM_ИнтересыНаКонтролеСрезПоследних
			|ГДЕ
			|	CRM_ИнтересыНаКонтролеСрезПоследних.Объект = &Интерес
			|	И CRM_ИнтересыНаКонтролеСрезПоследних.СтатусКонтроля = &Статус
			|
			|";
			
			Запрос.УстановитьПараметр("Интерес", Источник.ДокументОснование);
			Запрос.УстановитьПараметр("Период", ПолучитьТекущуюДатуСеанса());
			Запрос.УстановитьПараметр("Статус", ПредопределенноеЗначение("Перечисление.CRM_СтатусыКонтроляИнтереса.НаКонтроле"));
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если ВыборкаДетальныеЗаписи.Пользователь = Источник.Автор Тогда
					ПроверяющийАвтор = Истина;
					Продолжить;
				ИначеЕсли ВыборкаДетальныеЗаписи.Пользователь = Источник.Ответственный Тогда
					ПроверяющийОтветственный = Истина;
					Продолжить;
				КонецЕсли;
				
				НаборРегистра = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
				НаборРегистра.Отбор.Пользователь.Установить(ВыборкаДетальныеЗаписи.Пользователь);
				НаборРегистра.Отбор.Объект.Установить(Источник.Ссылка);
				НаборРегистра.Прочитать();
				
				Если НаборРегистра.Количество() = 1 Тогда
					Если НЕ НаборРегистра[0].Проверяющий Тогда
						НаборРегистра[0].Проверяющий = Истина;
						НаборРегистра.Записать();
					КонецЕсли;
				ИначеЕсли НаборРегистра.Количество() = 0 Тогда
					ЗаписьНабора = НаборРегистра.Добавить();
					ЗаписьНабора.Пользователь		= ВыборкаДетальныеЗаписи.Пользователь;
					ЗаписьНабора.Объект				= Источник.Ссылка;
					ЗаписьНабора.Клиент				= Источник.Партнер;
					ЗаписьНабора.Поставлено			= Источник.Дата;
					ЗаписьНабора.Номер				= Источник.Номер;
					ЗаписьНабора.Автор				= (ВыборкаДетальныеЗаписи.Пользователь = Источник.Автор);
					ЗаписьНабора.Проверяющий		= Истина;
					ЗаписьНабора.Ответственный		= (ВыборкаДетальныеЗаписи.Пользователь = Источник.Ответственный);
					ЗаписьНабора.Важность			= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
					ЗаписьНабора.Закрыта			= Источник.ДатаЗавершенияВзаимодействия;
					ЗаписьНабора.ВключатьВремя		= ?(Формат(Источник.ПлановаяДата, "ДФ=HH:mm:ss") = "00:00:00", Ложь, Истина);
					ЗаписьНабора.КрайнийСрок		= Источник.ПлановаяДата;
					ЗаписьНабора.Наименование		= Контакт + " | " + Источник.Содержание;
					ЗаписьНабора.Статус				= Источник.СтатусВзаимодействия;
					ЗаписьНабора.ЧтоСделать			= ?(ЗначениеЗаполнено(ЗаписьНабора.КрайнийСрок),
						 Строка(Формат(ЗаписьНабора.КрайнийСрок, "ДФ=dd.MM.yyyy")) + " | ",
						 "") 
					+ ?(ЗначениеЗаполнено(Контакт), Контакт + " | ", "")
					+ Источник.Содержание;
					//
					НаборРегистра.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Автор
		НаборРегистра = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
		НаборРегистра.Отбор.Пользователь.Установить(Источник.Автор);
		НаборРегистра.Отбор.Объект.Установить(Источник.Ссылка);
		НаборРегистра.Очистить();
		
		ЗаписьНабора = НаборРегистра.Добавить();
		ЗаписьНабора.Пользователь		= Источник.Автор;
		ЗаписьНабора.Объект				= Источник.Ссылка;
		ЗаписьНабора.Клиент				= Источник.Партнер;
		ЗаписьНабора.Поставлено			= Источник.Дата;
		ЗаписьНабора.Номер				= Источник.Номер;
		ЗаписьНабора.Автор				= Истина;
		ЗаписьНабора.Проверяющий		= ПроверяющийАвтор;
		ЗаписьНабора.Ответственный		= (Источник.Ответственный = Источник.Автор);
		ЗаписьНабора.Важность			= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		ЗаписьНабора.Закрыта			= Источник.ДатаЗавершенияВзаимодействия;
		ЗаписьНабора.ВключатьВремя		= ?(Формат(Источник.ПлановаяДата, "ДФ=HH:mm:ss") = "00:00:00", Ложь, Истина);
		ЗаписьНабора.КрайнийСрок		= Источник.ПлановаяДата;
		ЗаписьНабора.Наименование		= Контакт + " | " + Источник.Содержание;
		ЗаписьНабора.Статус				= Источник.СтатусВзаимодействия;
		ЗаписьНабора.ЧтоСделать			= ?(ЗначениеЗаполнено(ЗаписьНабора.КрайнийСрок),
			 Строка(Формат(ЗаписьНабора.КрайнийСрок, "ДФ=dd.MM.yyyy")) + " | ",
			 "") 
										+ ?(ЗначениеЗаполнено(Контакт), Контакт + " | ", "")
										+ Источник.Содержание;
		//
		НаборРегистра.Записать();
		
		// Ответственный
		Если НЕ ЗаписьНабора.Ответственный Тогда
			
			НаборРегистра = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
			НаборРегистра.Отбор.Пользователь.Установить(Источник.Ответственный);
			НаборРегистра.Отбор.Объект.Установить(Источник.Ссылка);
			НаборРегистра.Очистить();
			
			ЗаписьНабора = НаборРегистра.Добавить();
			ЗаписьНабора.Пользователь		= Источник.Ответственный;
			ЗаписьНабора.Объект				= Источник.Ссылка;
			ЗаписьНабора.Клиент				= Источник.Партнер;
			ЗаписьНабора.Поставлено			= Источник.Дата;
			ЗаписьНабора.Номер				= Источник.Номер;
			ЗаписьНабора.Автор				= Ложь;
			ЗаписьНабора.Проверяющий		= ПроверяющийОтветственный;
			ЗаписьНабора.Ответственный		= Истина;
			ЗаписьНабора.Важность			= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
			ЗаписьНабора.Закрыта			= Источник.ДатаЗавершенияВзаимодействия;
			ЗаписьНабора.ВключатьВремя		= ?(Формат(Источник.ПлановаяДата, "ДФ=HH:mm:ss") = "00:00:00", Ложь, Истина);
			ЗаписьНабора.КрайнийСрок		= Источник.ПлановаяДата;
			ЗаписьНабора.Наименование		= Контакт + " | " + Источник.Содержание;
			ЗаписьНабора.Статус				= Источник.СтатусВзаимодействия;
			ЗаписьНабора.ЧтоСделать			= ?(ЗначениеЗаполнено(ЗаписьНабора.КрайнийСрок),
				 Строка(Формат(ЗаписьНабора.КрайнийСрок, "ДФ=dd.MM.yyyy")) + " | ",
				 "") 
											+ ?(ЗначениеЗаполнено(Контакт), Контакт + " | ", "")
											+ Источник.Содержание;
			//
			НаборРегистра.Записать();
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ЗадачаОбъект.ЗадачаИсполнителя") Тогда
		
		// Для задач, которые связаны с интересом записи делать не надо.
		Если ТипЗнч(Источник.БизнесПроцесс) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
			Если ЗначениеЗаполнено(Источник.БизнесПроцесс.Интерес)
				 И (ТипЗнч(Источник.БизнесПроцесс.Интерес) = Тип("ДокументСсылка.CRM_Интерес"))
			И ЗначениеЗаполнено(Источник.CRM_СостояниеИнтереса)
				 И Источник.Исполнитель = Источник.БизнесПроцесс.Интерес.Ответственный Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Если нет автора, то записать в регистр CRM_ЗадачиПользователей невозможно,
		// так как измерение "Пользователь" обязательное к заполнению.
		Если НЕ ЗначениеЗаполнено(Источник.Автор) Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Источник.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Задание") Тогда
			Проверящющий = Источник.БизнесПроцесс.Проверяющий;
		Иначе
			Проверящющий = Неопределено;
		КонецЕсли;
		
		БизнесПроцесс = Источник.БизнесПроцесс;
		Если Источник.Выполнена Тогда
			СтатусЗадачи = Справочники.CRM_СостоянияСобытий.Завершено;
		ИначеЕсли ЗначениеЗаполнено(БизнесПроцесс) И БизнесПроцесс.Завершен И НЕ Источник.Выполнена Тогда
			СтатусЗадачи = Справочники.CRM_СостоянияСобытий.Отменено;
		ИначеЕсли ЗначениеЗаполнено(БизнесПроцесс) И БизнесПроцесс.Стартован И НЕ БизнесПроцесс.Завершен
			 И НЕ Источник.ПринятаКИсполнению Тогда
			СтатусЗадачи = Справочники.CRM_СостоянияСобытий.Запланировано;
		ИначеЕсли ЗначениеЗаполнено(БизнесПроцесс) И БизнесПроцесс.Стартован И НЕ БизнесПроцесс.Завершен
			 И Источник.ПринятаКИсполнению Тогда
			СтатусЗадачи = Справочники.CRM_СостоянияСобытий.ВРаботе;
		КонецЕсли;
		
		Если СтатусЗадачи = Справочники.CRM_СостоянияСобытий.Отменено Тогда
			Возврат;
		КонецЕсли;
		
		НаборРегистра = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
		НаборРегистра.Отбор.Пользователь.Установить(Источник.Автор);
 		НаборРегистра.Отбор.Объект.Установить(Источник.Ссылка);
		НаборРегистра.Очистить();
		
		ЗаписьНабора = НаборРегистра.Добавить();
		ЗаписьНабора.Пользователь		= Источник.Автор;
		ЗаписьНабора.Объект				= Источник.Ссылка;
		ЗаписьНабора.Клиент				= Источник.CRM_Партнер;
		ЗаписьНабора.Поставлено			= Источник.ДатаНачала;
		ЗаписьНабора.Номер				= Источник.Номер;
		ЗаписьНабора.Автор				= Истина;
		ЗаписьНабора.Проверяющий		= (Проверящющий = Источник.Автор);
		ЗаписьНабора.Ответственный		= (Источник.Исполнитель = Источник.Автор);
		ЗаписьНабора.Важность			= Источник.Важность;
		ЗаписьНабора.Закрыта			= Источник.ДатаИсполнения;
		ЗаписьНабора.ВключатьВремя		= ?(Формат(Источник.СрокИсполнения, "ДФ=HH:mm:ss") = "23:59:59", Ложь, Истина);
		ЗаписьНабора.КрайнийСрок		= Источник.СрокИсполнения;
		ЗаписьНабора.Наименование		= Источник.Наименование;
		ЗаписьНабора.Статус				= СтатусЗадачи;
		ЗаписьНабора.ЧтоСделать			= ?(ЗначениеЗаполнено(ЗаписьНабора.КрайнийСрок),
			 Строка(Формат(ЗаписьНабора.КрайнийСрок, "ДФ=dd.MM.yyyy")) + " | ",
			 "")
										+ ЗаписьНабора.Наименование;
		
		ПроверяющийЗаписан		= ЗаписьНабора.Проверяющий;
		НаборРегистра.Записать();
		
		Если НЕ ЗаписьНабора.Ответственный Тогда
			
			// Возможны 2 варианта: либо задача на конкретном пользователе, либо на определённой роле исполнителя.
			Если ЗначениеЗаполнено(Источник.РольИсполнителя) Тогда
				СписокПользователей = CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРоли(Источник.РольИсполнителя,
					 Источник.Ссылка);
				Для Каждого Исполнитель Из СписокПользователей Цикл
					
					НаборРегистра = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
					НаборРегистра.Отбор.Пользователь.Установить(Исполнитель.Значение);
					НаборРегистра.Отбор.Объект.Установить(Источник.Ссылка);
					НаборРегистра.Очистить();
					
					ЗаписьНабора = НаборРегистра.Добавить();
					ЗаписьНабора.Пользователь		= Исполнитель.Значение;
					ЗаписьНабора.Объект				= Источник.Ссылка;
					ЗаписьНабора.Клиент				= Источник.CRM_Партнер;
					ЗаписьНабора.Поставлено			= Источник.Дата;
					ЗаписьНабора.Номер				= Источник.Номер;
					ЗаписьНабора.Автор				= Ложь;
					ЗаписьНабора.Проверяющий		= ?(ПроверяющийЗаписан, Ложь, Проверящющий = Исполнитель.Значение);
					ЗаписьНабора.Ответственный		= Истина;
					ЗаписьНабора.Важность			= Источник.Важность;
					ЗаписьНабора.Закрыта			= Источник.ДатаИсполнения;
					ЗаписьНабора.ВключатьВремя		= ?(Формат(Источник.СрокИсполнения, "ДФ=HH:mm:ss") = "23:59:59", Ложь, Истина);
					ЗаписьНабора.КрайнийСрок		= Источник.СрокИсполнения;
					ЗаписьНабора.Наименование		= Источник.Наименование;
					ЗаписьНабора.Статус				= СтатусЗадачи;
					ЗаписьНабора.ЧтоСделать			= ?(ЗначениеЗаполнено(ЗаписьНабора.КрайнийСрок),
						 Строка(Формат(ЗаписьНабора.КрайнийСрок, "ДФ=dd.MM.yyyy")) + " | ",
						 "")
					+ ЗаписьНабора.Наименование;
					//
					ПроверяющийЗаписан = (ЗаписьНабора.Проверяющий ИЛИ ПроверяющийЗаписан);
					НаборРегистра.Записать();
					
				КонецЦикла;					
			Иначе
				НаборРегистра = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
				НаборРегистра.Отбор.Пользователь.Установить(Источник.Исполнитель);
				НаборРегистра.Отбор.Объект.Установить(Источник.Ссылка);
				НаборРегистра.Очистить();
				
				ЗаписьНабора = НаборРегистра.Добавить();
				ЗаписьНабора.Пользователь		= Источник.Исполнитель;
				ЗаписьНабора.Объект				= Источник.Ссылка;
				ЗаписьНабора.Клиент				= Источник.CRM_Партнер;
				ЗаписьНабора.Поставлено			= Источник.Дата;
				ЗаписьНабора.Номер				= Источник.Номер;
				ЗаписьНабора.Автор				= Ложь;
				ЗаписьНабора.Проверяющий		= ?(ПроверяющийЗаписан, Ложь, Проверящющий = Источник.Исполнитель);
				ЗаписьНабора.Ответственный		= Истина;
				ЗаписьНабора.Важность			= Источник.Важность;
				ЗаписьНабора.Закрыта			= Источник.ДатаИсполнения;
				ЗаписьНабора.ВключатьВремя		= ?(Формат(Источник.СрокИсполнения, "ДФ=HH:mm:ss") = "23:59:59", Ложь, Истина);
				ЗаписьНабора.КрайнийСрок		= Источник.СрокИсполнения;
				ЗаписьНабора.Наименование		= Источник.Наименование;
				ЗаписьНабора.Статус				= СтатусЗадачи;
				ЗаписьНабора.ЧтоСделать			= ?(ЗначениеЗаполнено(ЗаписьНабора.КрайнийСрок),
					 Строка(Формат(ЗаписьНабора.КрайнийСрок, "ДФ=dd.MM.yyyy")) + " | ",
					 "")
				+ ЗаписьНабора.Наименование;
				//
				ПроверяющийЗаписан = (ЗаписьНабора.Проверяющий ИЛИ ПроверяющийЗаписан);
				НаборРегистра.Записать();
			КонецЕсли;
			
 			Если НЕ ПроверяющийЗаписан И ЗначениеЗаполнено(Проверящющий) Тогда
				
				НаборРегистра = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
				НаборРегистра.Отбор.Пользователь.Установить(Проверящющий);
				НаборРегистра.Отбор.Объект.Установить(Источник.Ссылка);
				НаборРегистра.Очистить();
				
				ЗаписьНабора = НаборРегистра.Добавить();
				ЗаписьНабора.Пользователь		= Проверящющий;
				ЗаписьНабора.Объект				= Источник.Ссылка;
				ЗаписьНабора.Клиент				= Источник.CRM_Партнер;
				ЗаписьНабора.Поставлено			= Источник.Дата;
				ЗаписьНабора.Номер				= Источник.Номер;
				ЗаписьНабора.Автор				= Ложь;
				ЗаписьНабора.Проверяющий		= Истина;
				ЗаписьНабора.Ответственный		= Ложь;
				ЗаписьНабора.Важность			= Источник.Важность;
				ЗаписьНабора.Закрыта			= Источник.ДатаИсполнения;
				ЗаписьНабора.ВключатьВремя		= ?(Формат(Источник.СрокИсполнения, "ДФ=HH:mm:ss") = "23:59:59", Ложь, Истина);
				ЗаписьНабора.КрайнийСрок		= Источник.СрокИсполнения;
				ЗаписьНабора.Наименование		= Источник.Наименование;
				ЗаписьНабора.Статус				= СтатусЗадачи;
				ЗаписьНабора.ЧтоСделать			= ?(ЗначениеЗаполнено(ЗаписьНабора.КрайнийСрок),
					 Строка(Формат(ЗаписьНабора.КрайнийСрок, "ДФ=dd.MM.yyyy")) + " | ",
					 "")
												+ ЗаписьНабора.Наименование;
				//
				ПроверяющийЗаписан = (ЗаписьНабора.Проверяющий ИЛИ ПроверяющийЗаписан);
				НаборРегистра.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик события ПередЗаписью шаблона объекта.
//
Процедура ПередЗаписьюПартнераКонтактногоЛицаКонтагента(Источник, Отказ) Экспорт
	
	// АПК:75-выкл Отсутствует обязательная конструкция "Если ОбменДанными.Загрузка Тогда ..."
	// + Этот код должен отрабатывать и при загрузке!!!
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Партнеры") Тогда
		Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() ИЛИ НЕ Источник.ЭтоГруппа Тогда
			CRM_ОбработкиЗаполненияЗаписиКопированияОбъектов.СкорректироватьТипыОтношенийПоФлагам(Источник);
		КонецЕсли;
	КонецЕсли;
	// - Этот код должен отрабатывать и при загрузке!!!
	// АПК:75-вкл

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	КорректироватьНапоминание = Ложь;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Партнеры") Тогда
		Если Источник.Ссылка.Пустая() Тогда
			КорректироватьНапоминание = Истина;
		Иначе
			Если НЕ Источник.ЮрФизЛицо = Источник.Ссылка.ЮрФизЛицо Тогда
				
				КорректироватьНапоминание = Истина;
				
			ИначеЕсли Источник.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
				Если НЕ Источник.Ссылка.ОсновнойМенеджер = Источник.ОсновнойМенеджер Тогда
					КорректироватьНапоминание = Истина;
				КонецЕсли;
			Иначе
				Если НЕ Источник.Ссылка.CRM_НапоминатьОДнеРождения = Источник.CRM_НапоминатьОДнеРождения
				ИЛИ НЕ Источник.Ссылка.ОсновнойМенеджер = Источник.ОсновнойМенеджер
				ИЛИ НЕ Источник.Ссылка.ДатаРождения	 = Источник.ДатаРождения Тогда
					КорректироватьНапоминание = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если НЕ Источник.ЭтоГруппа Тогда
			СтрокаОтрасль = Источник.CRM_ВидыДеятельности.Найти(Источник.CRM_ОсновнаяОтрасль, "ВидДеятельности");
			Если СтрокаОтрасль = Неопределено И НЕ Источник.CRM_ОсновнаяОтрасль.Пустая() Тогда
				СтрокаОтрасль = Источник.CRM_ВидыДеятельности.Добавить();
				СтрокаОтрасль.ВидДеятельности = Источник.CRM_ОсновнаяОтрасль;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.КонтактныеЛицаПартнеров") Тогда
		Если Источник.Ссылка.Пустая() Тогда
			КорректироватьНапоминание = Истина;
		Иначе
			Если НЕ (Источник.Ссылка.CRM_НапоминатьОДнеРождения = Источник.CRM_НапоминатьОДнеРождения)
				ИЛИ НЕ (Источник.Ссылка.ДатаРождения = Источник.ДатаРождения) Тогда
				КорректироватьНапоминание = Истина;
			КонецЕсли;
		КонецЕсли;
		CRM_СтатусыТемп = "";
		
		Для Каждого Строка Из Источник.CRM_Статусы Цикл
			CRM_СтатусыТемп = CRM_СтатусыТемп  + "; " + Строка.Статус.Наименование;
		КонецЦикла;	
		Если СтрДлина(CRM_СтатусыТемп) > 0 Тогда
			CRM_СтатусыТемп = Сред(CRM_СтатусыТемп, 3);
		КонецЕсли;	
		Источник.CRM_СтатусыПредставление = CRM_СтатусыТемп;
		
		СтрокаРоль = Источник.РолиКонтактногоЛица.Найти(Источник.CRM_РольКонтактногоЛица, "РольКонтактногоЛица");
		Если СтрокаРоль = Неопределено И НЕ Источник.CRM_РольКонтактногоЛица.Пустая() Тогда
			СтрокаРоль = Источник.РолиКонтактногоЛица.Добавить();
			СтрокаРоль.РольКонтактногоЛица = Источник.CRM_РольКонтактногоЛица;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Источник.CRM_Состояние) Тогда
			Источник.CRM_Состояние = Перечисления.CRM_Состояние.Работает;
		КонецЕсли;
		
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("КорректироватьНапоминание", КорректироватьНапоминание);
	
КонецПроцедуры

// Процедура обработчик события ПередЗаписью шаблона объекта.
//
Процедура ПриЗаписиПартнераКонтактногоЛицаКонтагента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.КорректироватьНапоминание Тогда
		CRM_ОповещенияСервер.СформироватьУдалитьНапоминанияОДняхРождения(Источник.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Вернуть имя реквизита основания
//
// Параметры:
//  Тип	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ВернутьИмяРеквизитаОснования(Тип) Экспорт
	
	ИмяРеквизитаОснования = Неопределено;
	
	Если Тип = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		Возврат "CRM_Предмет";
	КонецЕсли;
	
	Если Метаданные.КритерииОтбора.СвязанныеДокументы.Тип.СодержитТип(Тип) Тогда
		
		МетаданныеДокумента = Метаданные.НайтиПоТипу(Тип);
		
		Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
			Если Метаданные.КритерииОтбора.СвязанныеДокументы.Состав.Содержит(Реквизит) Тогда
				ИмяРеквизитаОснования = Реквизит.Имя;
			КонецЕсли;
			Если Не ИмяРеквизитаОснования = Неопределено И СтрНайти(НРег(ИмяРеквизитаОснования), "удалить") = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИмяРеквизитаОснования;
	
КонецФункции

//
//
Функция ПроверитьПринадлежностьОснованияЖурналуДокументов(Источник) Экспорт
	
	Если Метаданные.КритерииОтбора.СвязанныеДокументы.Тип.СодержитТип(ТипЗнч(Источник)) Тогда
		МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Источник));
		
		Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
			Если Метаданные.КритерииОтбора.СвязанныеДокументы.Состав.Содержит(Реквизит) Тогда
				
				Если ЗначениеЗаполнено(Источник[Реквизит.Имя])
				И МетаданныеДокумента.ВводитсяНаОсновании.Содержит(Метаданные.НайтиПоТипу(ТипЗнч(Источник[Реквизит.Имя])))
				И НЕ Метаданные.ПланыВидовХарактеристик.CRM_ОбъектыЖурналаДокументов.Тип.Типы().Найти(ТипЗнч(Источник[Реквизит.Имя])) = Неопределено Тогда
					Возврат Источник[Реквизит.Имя];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЯвляетсяОснованиемИнтереса(ОбъектСсылка) Экспорт
	
	Если ТипЗнч(ОбъектСсылка) = Тип("Тип") Тогда
		ТипОбъекта = ОбъектСсылка;
	Иначе
		ТипОбъекта = ТипЗнч(ОбъектСсылка);
	КонецЕсли;
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта);
	
	ЯвляетсяОснованиемИнтереса = Метаданные.Документы.CRM_Интерес.Реквизиты.ДокументОснование.Тип.СодержитТип(ТипОбъекта);
	ВводитсяНаОснованииИнтереса1 = МетаданныеОбъекта.Реквизиты.Найти("ДокументОснование") <> Неопределено
		И МетаданныеОбъекта.Реквизиты["ДокументОснование"].Тип.СодержитТип(Тип("ДокументСсылка.CRM_Интерес"));
	ВводитсяНаОснованииИнтереса2 = МетаданныеОбъекта.Реквизиты.Найти("ВзаимодействиеОснование") <> Неопределено
		И МетаданныеОбъекта.Реквизиты["ВзаимодействиеОснование"].Тип.СодержитТип(Тип("ДокументСсылка.CRM_Интерес"));
	
	Возврат ЯвляетсяОснованиемИнтереса Или ВводитсяНаОснованииИнтереса1 Или ВводитсяНаОснованииИнтереса2;
	
КонецФункции

#Область ОбновлениеИБ

Процедура CRM_ПрисоединенныеФайлыОбработчик(Источник) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) <> Тип("СправочникОбъект.ВерсииФайлов") Тогда
		Если ТипЗнч(Источник) = Тип("СправочникОбъект.ИдентификаторыОбъектовМетаданных")
			 ИЛИ Источник.ВладелецФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНаличиеПрисоединенногоФайлаВЗаписиОбщегоЖурнала(Источник.ВладелецФайла);
	
КонецПроцедуры

// Процедура обработки заполнения.
//
// Параметры:
//	МодулиПодсистем - массив, перечень имен модулей подсистем
//
Процедура ДополнитьСписокМодулейПодсистем(МодулиПодсистем) Экспорт
	
	// CRM
	Если НайтиВМетаданныхПоИмени("ОбщиеМодули", "CRM_ОбновлениеИнформационнойБазы") Тогда
		МодулиПодсистем.Добавить("CRM_ОбновлениеИнформационнойБазы");
	КонецЕсли;
	
	// Модуль CRM для ERP/КА2/УТ11
	Если НайтиВМетаданныхПоИмени("ОбщиеМодули", "CRM_Модуль_ОбновлениеИнформационнойБазы") Тогда
		МодулиПодсистем.Добавить("CRM_Модуль_ОбновлениеИнформационнойБазы");
	КонецЕсли;
	
	// УТиВсК
	Если НайтиВМетаданныхПоИмени("ОбщиеМодули", "CRM_УТ_ОбновлениеИнформационнойБазы") Тогда
		МодулиПодсистем.Добавить("CRM_УТ_ОбновлениеИнформационнойБазы");
	КонецЕсли;
	
	// Спарка CRM с ERP/КА2/ERP УХ
	Если Прав(Метаданные.Имя, 4) = "_CRM" Тогда
		Если НайтиВМетаданныхПоИмени("ОбщиеМодули", "CRM_ОбновлениеИнформационнойБазыСпаркаУХ") Тогда
			МодулиПодсистем.Добавить("CRM_ОбновлениеИнформационнойБазыСпаркаУХ");
		ИначеЕсли НайтиВМетаданныхПоИмени("ОбщиеМодули", "CRM_ОбновлениеИнформационнойБазыСпарка") Тогда
			МодулиПодсистем.Добавить("CRM_ОбновлениеИнформационнойБазыСпарка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаПараметровСеанса

Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("CRM_НастройкаСоставаРеквизитовМастераРегистрации",
		 "CRM_ОбщегоНазначенияСервер.УстановкаПараметровСеанса");
	
	CRM_ЛицензированиеЭкспортныеМетоды.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	CRM_УправлениеДоступомСервер.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	
	// +Классификаторы
	CRM_КлассификаторыЭкспортныеМетоды.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	// -Классификаторы
	
	CRM_НапоминанияСервер.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	
КонецПроцедуры

Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "CRM_НастройкаСоставаРеквизитовМастераРегистрации" Тогда
		CRM_НастройкаСоставаРеквизитовМастераРегистрации =
			Константы.CRM_НастройкаСоставаРеквизитовМастераРегистрации.Получить();
		Если CRM_НастройкаСоставаРеквизитовМастераРегистрации.Получить() = Неопределено Тогда
			ПараметрыСеанса.CRM_НастройкаСоставаРеквизитовМастераРегистрации =
				Новый ХранилищеЗначения(Обработки.CRM_МастерРегистрацииОбращения.НастройкаСоставаРеквизитовПоУмолчанию());
		Иначе
			ПараметрыСеанса.CRM_НастройкаСоставаРеквизитовМастераРегистрации = CRM_НастройкаСоставаРеквизитовМастераРегистрации;
		КонецЕсли;
		УстановленныеПараметры.Добавить("CRM_НастройкаСоставаРеквизитовМастераРегистрации");
	КонецЕсли;
	
КонецПроцедуры
	
// Позволяет выполнить произвольные действия перед запуском программы.
// Например, настроить начальную страницу и другие параметры интерфейса в зависимости от режима работы.
//
Процедура ПередЗапускомПрограммы() Экспорт
	Если Не (РаботаВМоделиСервисаНЕРазделенныйСеанс() Или Метаданные.Имя = "МодульCRMДляERP"
		Или Метаданные.Имя = "МодульCRMДляУТ11") Тогда
		// +Рабочий стол
		CRM_РабочийСтолСервер.ПодменитьНастройкиНачальнойСтраницы();
		// -Рабочий стол
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

Функция БазоваяДатаПоВариантуИнтервала(Знач ДатаИсточник, Знач ВариантСрока) Экспорт
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(ДатаИсточник) И ЗначениеЗаполнено(ВариантСрока)
		И (ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДень
		Или ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезТриДня
		Или ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезНеделю
		Или ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДвеНедели
		Или ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезМесяц
		Или ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезТриМесяца) Тогда
		
		Результат = ДатаИсточник;
		
		НачалоДня_ДатаИсточник = НачалоДня(ДатаИсточник);
		НачалоДня_ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
		
		Если НачалоДня_ДатаИсточник <> НачалоДня_ТекущаяДата Тогда
			Результат = ДатаИсточник - (НачалоДня_ДатаИсточник - НачалоДня_ТекущаяДата);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДатаПоВариантуИнтервала(Знач БазоваяДата = Неопределено, Знач ВариантСрока,
	 Знач ДлительностьИнтервала = 0) Экспорт

	ТекущаяДата = ТекущаяДатаСеанса() + ДлительностьИнтервала;
	
	Если Не ЗначениеЗаполнено(БазоваяДата) Тогда
		БазоваяДата = ТекущаяДата;
	КонецЕсли;
	
	Если ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.Сейчас Тогда
		ДатаРезультат	= БазоваяДата;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.Через15Минут Тогда
		ДатаРезультат	= БазоваяДата + 900;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезЧас Тогда
		ДатаРезультат	= БазоваяДата + 3600;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.Через4Часа Тогда
		ДатаРезультат	= БазоваяДата + 14400;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.Через8Часов Тогда
		ДатаРезультат	= БазоваяДата + 28800;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДень Тогда
		ДатаРезультат	= БазоваяДата + 86400;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезТриДня Тогда
		ДатаРезультат	= БазоваяДата + 259200;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезНеделю Тогда
		ДатаРезультат	= БазоваяДата + 604800;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДвеНедели Тогда
		ДатаРезультат	= БазоваяДата + 1209600;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезМесяц Тогда
		ДатаРезультат	= ДобавитьМесяц(БазоваяДата, 1);
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезТриМесяца Тогда
		ДатаРезультат	= ДобавитьМесяц(БазоваяДата, 3);
	Иначе
		ДатаРезультат	= БазоваяДата;
	КонецЕсли;
	
	Возврат ДатаРезультат;

КонецФункции

Функция ВернутьКоличествоЭлементовВДинамическомСписке(Форма, ИмяТаблицыСписка) Экспорт
	ТаблицаСписка = Форма.Элементы[ИмяТаблицыСписка];
	
	РезультатКомпоновки = Новый ТаблицаЗначений;
	
	СхемаКомпоновкиДанных = ТаблицаСписка.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	НастройкиКомпоновкиДанных = ТаблицаСписка.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, , ,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(РезультатКомпоновки);
	Процессорвывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат РезультатКомпоновки.Количество();
КонецФункции	

Функция ФункциональнаяОпция(ИмяФО) Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию(ИмяФО);
	
КонецФункции

Процедура ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Настройки,
			ОписаниеНастроек = Неопределено,
			ИмяПользователя = Неопределено,
			ОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта,
		КлючНастроек,
		Настройки,
		ОписаниеНастроек,
		ИмяПользователя,
		ОбновитьПовторноИспользуемыеЗначения);
	
КонецПроцедуры

Процедура ЗакончитьЗамерВремениСозданияФормы(Форма, ВремяНачалаЗамера) Экспорт
	
	ИмяКлючевойОперации = СтрШаблон("ОткрытиеФормы.%1.НаСервере", Форма.ИмяФормы);
	ОценкаПроизводительности.ЗакончитьЗамерВремени(ИмяКлючевойОперации, ВремяНачалаЗамера, 1);
	
КонецПроцедуры

Функция КоличествоДнейСНачалаГодаПоКалендарю(Календарь, Дата) Экспорт
	
	КоличествоДней = 0;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода КАК КоличествоДней
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Календарь = &Календарь
	|	И КалендарныеГрафики.Год = &Год
	|	И КалендарныеГрафики.ДатаГрафика = &ДатаГрафика");
	
	Запрос.Параметры.Вставить("Календарь", Календарь);
	Запрос.Параметры.Вставить("Год", Год(Дата));
	Запрос.Параметры.Вставить("ДатаГрафика", НачалоДня(Дата));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоДней = Выборка.КоличествоДней;
	КонецЕсли;
	
	Возврат КоличествоДней;
	
КонецФункции

#Область Поддержка

Функция ДанныеУровняПоддержки(Знач ПоляФормы) Экспорт
	
	ДанныеОбращения = Справочники.CRM_УровниПоддержки.ОписаниеДанныхОбращения();
	СтрокаНабора = ДанныеОбращения.Добавить();
	
	ЗаполнитьЗначенияСвойств(СтрокаНабора, ПоляФормы);
	
	СтрокаНабора.Ключ          = Строка(Новый УникальныйИдентификатор);
	СтрокаНабора.Дата          = ТекущаяДатаСеанса();
	СтрокаНабора.Подразделение = CRM_ОбщегоНазначенияСервер.ПолучитьРеквизитОтветственного(ПоляФормы.Ответственный,
		 "Подразделение");
	
	ДанныеУровня = Справочники.CRM_УровниПоддержки.ДанныеУровняПоддержки(ДанныеОбращения);
	
	Цвет = ЦветаСтиля.CRM_ОсновнойГолубой;
	Шрифт = Новый Шрифт( , , Истина);
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ДанныеУровня.Уровень);
	
	Описания = Новый Массив;
	Описания.Добавить(НСтр("ru = 'Поддержка'") + ": ");
	Описания.Добавить(Новый ФорматированнаяСтрока(Строка(ДанныеУровня.Уровень), Шрифт, Цвет, , НавигационнаяСсылка));
	Описания.Добавить(" " + НСтр("ru = 'Время реакции'") + ": ");
	Описания.Добавить(Новый ФорматированнаяСтрока(Формат(ДанныеУровня.ВремяРеакции, "ЧФ='Ч ч.'"), Шрифт, Цвет));
	Описания.Добавить(" " + НСтр("ru = 'Время решения'") + ": ");
	Описания.Добавить(Новый ФорматированнаяСтрока(Формат(ДанныеУровня.ВремяРешения, "ЧФ='Ч ч.'"), Шрифт, Цвет));
	
	ДанныеУровня.Вставить("Описание", Новый ФорматированнаяСтрока(Описания));
	
	Возврат ДанныеУровня;
	
КонецФункции

#КонецОбласти

// Функция, используемая в процедуре ОтчетПриКомпоновкеРезультата.
//
// Параметры:
//	ЭлементыОтбора							- КоллекцияЭлементовОтбораКомпоновкиДанных	- Элементы отбора.
//	Идентификатор							- Строка									- Идентификатор пользовательской настройки.
//	ФиксированныеНастройкиЭлементыОтбора	- КоллекцияЭлементовОтбораКомпоновкиДанных	- Фиксированные элементы отбора.
//	СтруктураРезультат						- Структура									- Структура результата.
//
// Возвращаемое значение:
//	Неопределено или Структура	- Структура результата.
//
Функция НайтиВЭлементахОтбораПоИдентификатору(ЭлементыОтбора, Идентификатор,
	 ФиксированныеНастройкиЭлементыОтбора,
	 СтруктураРезультат = Неопределено)
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.ИдентификаторПользовательскойНастройки = Идентификатор Тогда
				Если СтруктураРезультат = Неопределено Тогда
					СтруктураРезультат = Новый Структура();
				КонецЕсли;
				СтруктураРезультат.Вставить("ЭлементОтбора", ЭлементОтбора);
				СтруктураРезультат.Вставить("ВидСравнения", ЭлементОтбора.ВидСравнения);
				Для Каждого ЭлементФиксированногоОтбора Из ФиксированныеНастройкиЭлементыОтбора Цикл
					Если ЭлементФиксированногоОтбора.ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение Тогда
						СтруктураРезультат.Вставить("ЭлементФиксированногоОтбора", ЭлементФиксированногоОтбора);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НайтиВЭлементахОтбораПоИдентификатору(ЭлементОтбора.Элементы, Идентификатор,
				 ФиксированныеНастройкиЭлементыОтбора,
				 СтруктураРезультат);
		КонецЕсли;
	КонецЦикла;
	Возврат СтруктураРезультат;
КонецФункции // НайтиВЭлементахОтбораПоИдентификатору()

// Процедура, используемая в процедуре ОтчетПриКомпоновкеРезультата.
//
// Параметры:
//	ЭлементыОтбора							- КоллекцияЭлементовОтбораКомпоновкиДанных	- Элементы отбора.
//
Процедура СброситьОтбор(ЭлементыОтбора)
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЭлементОтбора.Использование = Ложь;
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СброситьОтбор(ЭлементОтбора.Элементы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // СброситьОтбор()

// Вспомогательная процедура, элементы отбора настроек, вызывается из
// ПользовательскиеНастройкиСпискаСкорректироватьЗагруженнуюНастройку.
//
// Параметры:
//  ЭлементыОтбора				- Элементы отбора компоновки данных	- Элементы отбора.
//  ЭтоОтборУсловногоОформления	- Булево							- Признак что это отбор условного оформления.
//
Процедура ПользовательскиеНастройкиСпискаСкорректироватьОтбор(ЭлементыОтбора,
	 ЭтоОтборУсловногоОформления, ИдентификаторСписка, НаименованиеНастройки,
	 Пользователь)
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Поле = ЭлементОтбора.ЛевоеЗначение;
			
			Если ЭтоОтборУсловногоОформления Тогда
				// Пока в условном оформлении ничего корректировать не нужно.
			Иначе
				Если ИдентификаторСписка = "БизнесПроцесс.CRM_БизнесПроцесс" Тогда
					Если НаименованиеНастройки = "Претензии - Неразобранные" И Поле = Новый ПолеКомпоновкиДанных("КартаМаршрута") Тогда
						ЭлементОтбора.ПравоеЗначение.Очистить();
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("6.1 Разбор претензии"));
						// 6.1 Разбор претензии
						
					ИначеЕсли НаименованиеНастройки = "Претензии - Просроченные"
						 И Поле = Новый ПолеКомпоновкиДанных("КартаМаршрута") Тогда
						ЭлементОтбора.ПравоеЗначение.Очистить();
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("6.1 Разбор претензии"));
						// 6.1 Разбор претензии
						
					ИначеЕсли НаименованиеНастройки = "Поручения - Невыполненные"
						 И Поле = Новый ПолеКомпоновкиДанных("КартаМаршрута") Тогда
						ЭлементОтбора.ПравоеЗначение.Очистить();
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("2.1 Поручение"));
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("2.2 Поручение  (с доработкой)"));
						// 2.1 Поручение
						// 2.2 Поручение  (с доработкой).
						
					ИначеЕсли НаименованиеНастройки = "Поручения - Просроченные"
						 И Поле = Новый ПолеКомпоновкиДанных("КартаМаршрута") Тогда
						ЭлементОтбора.ПравоеЗначение.Очистить();
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("2.1 Поручение"));
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("2.2 Поручение  (с доработкой)"));
						// 2.1 Поручение
						// 2.2 Поручение  (с доработкой).
						
					ИначеЕсли НаименованиеНастройки = "Согласования - Невыполненные"
						 И Поле = Новый ПолеКомпоновкиДанных("КартаМаршрута") Тогда
						ЭлементОтбора.ПравоеЗначение.Очистить();
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("4.1 Согласование"));
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("5.1 Проведение рекламной кампании"));
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("3.1 Заключение договора"));
						// 4.1 Согласование
						// 5.1 Проведение рекламной кампании.
						// 3.1 Заключение договора
						
					ИначеЕсли НаименованиеНастройки = "Согласования - Просроченные"
						 И Поле = Новый ПолеКомпоновкиДанных("КартаМаршрута") Тогда
						ЭлементОтбора.ПравоеЗначение.Очистить();
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("4.1 Согласование"));
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("5.1 Проведение рекламной кампании"));
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("3.1 Заключение договора"));
						// 4.1 Согласование
						// 5.1 Проведение рекламной кампании.
						// 3.1 Заключение договора
						
					ИначеЕсли НаименованиеНастройки = "Продажи - Текущие" И Поле = Новый ПолеКомпоновкиДанных("КартаМаршрута") Тогда
						ЭлементОтбора.ПравоеЗначение.Очистить();
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("1.1 Продажа"));
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("1.2 Продажа (быстрая)"));
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("1.3 Продажа (несколько направлений деятельности)"));
						// 1.1 Продажа
						// 1.2 Продажа (быстрая)
						// 1.3 Продажа (несколько направлений деятельности).
						
					ИначеЕсли НаименованиеНастройки = "Продажи - Просроченные"
						 И Поле = Новый ПолеКомпоновкиДанных("КартаМаршрута") Тогда
						ЭлементОтбора.ПравоеЗначение.Очистить();
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("1.1 Продажа"));
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("1.2 Продажа (быстрая)"));
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("1.3 Продажа (несколько направлений деятельности)"));
						// 1.1 Продажа
						// 1.2 Продажа (быстрая)
						// 1.3 Продажа (несколько направлений деятельности).
						
					КонецЕсли;
				ИначеЕсли ИдентификаторСписка = "Документ.CRM_СчетНаОплатуПокупателю" Тогда
					Если НаименованиеНастройки = "Мои продажи за текущий месяц"
						 И Поле = Новый ПолеКомпоновкиДанных("Ответственный") Тогда
						ЭлементОтбора.ПравоеЗначение = Пользователь;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ПользовательскиеНастройкиСпискаСкорректироватьОтбор(ЭлементОтбора.Элементы,
				 ЭтоОтборУсловногоОформления, ИдентификаторСписка, НаименованиеНастройки,
				 Пользователь);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Вспомогательная процедура, корректирует загруженные настройки, вызывается из
// ПользовательскиеНастройкиСпискаЗаполнитьПоУмолчанию.
//
// Параметры:
//  ИдентификаторСписка		- Строка	- Идентификатор списка.
//  НаименованиеНастройки	- Строка	- Наименование настройки.
//  СтруктураНастройки		- Структура	- Структура настройки.
//
Процедура ПользовательскиеНастройкиСпискаСкорректироватьЗагруженнуюНастройку(ИдентификаторСписка,
	 НаименованиеНастройки, СтруктураНастройки,
	 Знач ИмяПользователя = Неопределено)
	Отбор = СтруктураНастройки.Отбор;
	УсловноеОформление = СтруктураНастройки.УсловноеОформление;
	
	Пользователь = Неопределено;
	ИдентификаторПользователяИБ = Неопределено;
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	Если ПользовательИБ <> Неопределено Тогда
		ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторПользователяИБ) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка КАК Пользователь
		|ИЗ
		|	Справочник.Пользователи
		|ГДЕ
		|	ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ
		|");
		Запрос.УстановитьПараметр("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Пользователь = Выборка.Пользователь;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	// Отбор
	Если ТипЗнч(Отбор) = Тип("ОтборКомпоновкиДанных") Тогда
		ПользовательскиеНастройкиСпискаСкорректироватьОтбор(Отбор.Элементы, Ложь, ИдентификаторСписка,
			 НаименованиеНастройки,
			 Пользователь);
	КонецЕсли;
	
	// Отбор условного оформления
	Если ТипЗнч(УсловноеОформление) = Тип("УсловноеОформлениеКомпоновкиДанных") Тогда
		Для Каждого ЭлементУО Из УсловноеОформление.Элементы Цикл
			ПользовательскиеНастройкиСпискаСкорректироватьОтбор(ЭлементУО.Отбор.Элементы, Истина,
				 ИдентификаторСписка, НаименованиеНастройки, Неопределено );
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Процедура обновляет список существующих идентификаторов пользовательских настроек динамических списков.
//
// Параметры:
//	ИдентификаторСписка		- Строка	- Идентификатор списка.
//
Процедура ОбновитьСписокСуществующихИдентификаторовПользовательскихНастроекДинамическогоСписка(ИдентификаторСписка,
	 ИмяПользователя = Неопределено)
	КлючОбъекта = "Пользовательские_Настройки_Динамических_Списков";
	КлючНастроек = "МассивСуществующихИдентификаторов";
	
	МассивИдентификаторов = CRM_ХранилищеНастроек.Загрузить(КлючОбъекта, КлючНастроек, , ИмяПользователя);
	Если ТипЗнч(МассивИдентификаторов) <> Тип("Массив") Тогда
		МассивИдентификаторов = Новый Массив();
	КонецЕсли;
	
	Если МассивИдентификаторов.Найти(ИдентификаторСписка) = Неопределено Тогда
		МассивИдентификаторов.Добавить(ИдентификаторСписка);
		
		CRM_ХранилищеНастроек.Сохранить(КлючОбъекта, КлючНастроек, МассивИдентификаторов, , ИмяПользователя);
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьНастройкиПоложенияОкна(ИмяФормы, МассивКлючей)
	НастройкиСброшены = Ложь;
	Для каждого КлючСохраненияПоложенияОкна Из МассивКлючей Цикл
		Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
			СтрокаНастройкиОкна = "/Такси/НастройкиОкнаВебКлиента";
		Иначе
			СтрокаНастройкиОкна = "/Такси/НастройкиОкна";
		КонецЕсли;
		Выборка = ХранилищеСистемныхНастроек.Выбрать(Новый Структура("КлючОбъекта, Пользователь",
				ИмяФормы + "/" + КлючСохраненияПоложенияОкна + СтрокаНастройкиОкна, ПользователиИнформационнойБазы.ТекущийПользователь().Имя));
		Пока Выборка.Следующий() Цикл
			НастройкиСброшены = Истина;
			ХранилищеСистемныхНастроек.Удалить(Выборка.КлючОбъекта, Выборка.КлючНастроек, Выборка.Пользователь);
		КонецЦикла;
	КонецЦикла;
	Если НастройкиСброшены Тогда
		МассивКлючей.Очистить();
	КонецЕсли;
КонецПроцедуры // УдалитьНастройкиПоложенияОкна()

// Функция возвращает пустую таблицу-бланк для сохранения / восстановления настроек полей отображения содержания.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Пустая таблица значений.
//
Функция НастройкиПолейОтображенияСодержанияПолучитьТаблицуНастроекБланк()
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Объект", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ШиринаЛевойКолонкиАбсолютная", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ШиринаПравойКолонкиАбсолютная", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ШиринаЛевойКолонки", Новый ОписаниеТипов("Число",
		 Новый КвалификаторыЧисла(10, 0,
		 ДопустимыйЗнак.Неотрицательный)));
	Таблица.Колонки.Добавить("ШиринаПравойКолонки", Новый ОписаниеТипов("Число",
		 Новый КвалификаторыЧисла(10, 0,
		 ДопустимыйЗнак.Неотрицательный)));
	Таблица.Колонки.Добавить("ДеревоНастроек");
	Возврат Таблица;
КонецФункции // НастройкиПолейОтображенияСодержанияПолучитьТаблицуНастроекБланк()

// Функция преобразует дерево с настройками полей отображения содержания в таблицу значений, используемую для
// сохранения настроек.
//
// Параметры:
//	Дерево	- ДеревоЗначений	- Дерево с настройками полей отображения содержания.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица значений для сохранения настроек.
//
Функция НастройкиПолейОтображенияСодержанияПреобразоватьДеревоВТаблицу(Дерево)
	Таблица = НастройкиПолейОтображенияСодержанияПолучитьТаблицуНастроекБланк();
	Для Каждого СтрокаВерхнегоУровня Из Дерево.Строки Цикл
		Для Каждого СтрокаОбъект Из СтрокаВерхнегоУровня.Строки Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаОбъект.Объект) Тогда
				Продолжить;
			КонецЕсли;
			НайденнаяСтрока = Таблица.Найти(СтрокаОбъект.Объект, "Объект");
			Если НайденнаяСтрока <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаОбъект.ДеревоНастроек.Строки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Объект = СтрокаОбъект.Объект;
			НоваяСтрока.ДеревоНастроек = СтрокаОбъект.ДеревоНастроек;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОбъект, , "ДеревоНастроек");
		КонецЦикла;
	КонецЦикла;
	Возврат Таблица;
КонецФункции // НастройкиПолейОтображенияСодержанияПреобразоватьДеревоВТаблицу()

// Функция возвращает ключ для сохранения и восстановления настроек.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Строка	- Ключ для сохранения и восстановления настроек.
//
Функция НастройкиПолейОтображенияСодержанияПолучитьКлючОбъектаДляСохраненияВосстановления()
	Возврат "_НастройкиПолейОтображенияСодержания_";
КонецФункции // НастройкиПолейОтображенияСодержанияПолучитьКлючОбъектаДляСохраненияВосстановления()

// Процедура сохраняет таблицу настроек полей отображения содержания.
//
// Параметры:
//  ТаблицаНастройки - ТаблицаЗначений	 - Таблица настроек полей отображения содержания.
//  ИмяПользователя	 - Строка - Имя пользователя.
//
Процедура НастройкиПолейОтображенияСодержанияСохранитьТаблицуНастроек(ТаблицаНастройки, ИмяПользователя = Неопределено)
	КлючОбъекта = НастройкиПолейОтображенияСодержанияПолучитьКлючОбъектаДляСохраненияВосстановления();
	Если ИмяПользователя = Неопределено Тогда
		CRM_ХранилищеНастроек.Сохранить(КлючОбъекта, "ТаблицаНастройки", ТаблицаНастройки);
	Иначе
		CRM_ХранилищеНастроек.Сохранить(КлючОбъекта, "ТаблицаНастройки", ТаблицаНастройки, , ИмяПользователя);
	КонецЕсли;
КонецПроцедуры // НастройкиПолейОтображенияСодержанияСохранитьТаблицуНастроек()

// Функция корректирует внешнюю таблицу настроек полей отображения содержания по текущим метаданным,
// (проверяет наличие реквизитов объектов метаданных, структуру колонок, и т.д.).
//
// Параметры:
//	ТаблицаИсточник	- ТаблицаЗначений	- Таблица настроек полей отображения содержания.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица настроек полей отображения содержания.
//
Функция НастройкиПолейОтображенияСодержанияСкорректироватьВнешнююТаблицу(ТаблицаИсточник)
	Если ТипЗнч(ТаблицаИсточник) <> Тип("ТаблицаЗначений") Тогда
		Возврат ТаблицаИсточник;
	КонецЕсли;
	ТаблицаНастройки = НастройкиПолейОтображенияСодержанияПолучитьТаблицуНастроекБланк();
	ОбязательныеКолонки = Новый Массив();
	ОбязательныеКолонки.Добавить("Реквизит");
	ОбязательныеКолонки.Добавить("ТипЗначенияРеквизита");
	ОбязательныеКолонки.Добавить("Положение");
	ОбязательныеКолонки.Добавить("Объект");
	ОбязательныеКолонки.Добавить("ЭтоТабличнаяЧасть");
	ОбязательныеКолонки.Добавить("ЭтоРеквизитТабличнойЧасти");
	ОбязательныеКолонки.Добавить("ЭтоРазделитель");
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаИсточник.Объект)
			 Или ТипЗнч(СтрокаИсточник.ДеревоНастроек) <> Тип("ДеревоЗначений") Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			Тип = Тип(СтрокаИсточник.Объект);
		Исключение
			Продолжить;
		КонецПопытки;
		Попытка
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Исключение
			ОбъектМетаданных = Неопределено;
		КонецПопытки;
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Дерево = СтрокаИсточник.ДеревоНастроек;
		бСтруктураДереваКорректна = Истина;
		Для Каждого КолонкаИмя Из ОбязательныеКолонки Цикл
			Если Дерево.Колонки.Найти(КолонкаИмя) = Неопределено Тогда
				бСтруктураДереваКорректна = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ бСтруктураДереваКорректна Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаНастройки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник, , "ДеревоНастроек");
		НоваяСтрока.ДеревоНастроек = Дерево.Скопировать();
		НоваяСтрока.ДеревоНастроек.Строки.Очистить();
		Для Каждого СтрокаДерева Из Дерево.Строки Цикл
			Если СтрокаДерева.ЭтоТабличнаяЧасть = Истина Тогда
				Если ОбъектМетаданных.ТабличныеЧасти.Найти(СтрокаДерева.Реквизит) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				МассивСтандартныеРеквизиты = Новый Массив();
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
						ОбъектМетаданных.ТабличныеЧасти[СтрокаДерева.Реквизит], "СтандартныеРеквизиты") Тогда
					СтандартныеРеквизиты = ОбъектМетаданных.ТабличныеЧасти[СтрокаДерева.Реквизит].СтандартныеРеквизиты;
					Для Каждого СтандартныйРеквизит Из СтандартныеРеквизиты Цикл
						МассивСтандартныеРеквизиты.Добавить(СтандартныйРеквизит.Имя);
					КонецЦикла;
				КонецЕсли;
				Реквизиты = ОбъектМетаданных.ТабличныеЧасти[СтрокаДерева.Реквизит].Реквизиты;
				СтрокаТЧ = НоваяСтрока.ДеревоНастроек.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаДерева);
				СтрокаТЧ.Объект = СтрокаИсточник.Объект;
				
				// BSLLS:MissingCodeTryCatchEx-off
				Попытка
					СтрокаТЧ.ОригинальноеПредставлениеРеквизита =
						ОбъектМетаданных.ТабличныеЧасти[СтрокаДерева.Реквизит].Представление();
					Если Не ЗначениеЗаполнено(СтрокаТЧ.ОригинальноеПредставлениеРеквизита) Тогда
						СтрокаТЧ.ОригинальноеПредставлениеРеквизита = ОбъектМетаданных.ТабличныеЧасти[СтрокаДерева.Реквизит].Имя;
					КонецЕсли;
				Исключение
				КонецПопытки;
				// BSLLS:MissingCodeTryCatchEx-on
				
				Для Каждого СтрокаТЧИсточник Из СтрокаДерева.Строки Цикл
					Если	МассивСтандартныеРеквизиты.Найти(СтрокаТЧИсточник.Реквизит) = Неопределено
						И	Реквизиты.Найти(СтрокаТЧИсточник.Реквизит) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтрокаРеквизит = СтрокаТЧ.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРеквизит, СтрокаТЧИсточник);
					СтрокаРеквизит.Объект = СтрокаИсточник.Объект;
					
					Попытка
						СтрокаРеквизит.ОригинальноеПредставлениеРеквизита = Реквизиты[СтрокаТЧИсточник.Реквизит].Представление();
						Если Не ЗначениеЗаполнено(СтрокаРеквизит.ОригинальноеПредставлениеРеквизита) Тогда
							СтрокаРеквизит.ОригинальноеПредставлениеРеквизита = Реквизиты[СтрокаТЧИсточник.Реквизит].Имя;
						КонецЕсли;
					Исключение
						СтрокаРеквизит.ОригинальноеПредставлениеРеквизита =
							СтандартныеРеквизиты[СтрокаТЧИсточник.Реквизит].Представление();
						Если Не ЗначениеЗаполнено(СтрокаРеквизит.ОригинальноеПредставлениеРеквизита) Тогда
							СтрокаРеквизит.ОригинальноеПредставлениеРеквизита = СтандартныеРеквизиты[СтрокаТЧИсточник.Реквизит].Имя;
						КонецЕсли;
					КонецПопытки;
				КонецЦикла;
				Если СтрокаТЧ.Строки.Количество() = 0 Тогда
					НоваяСтрока.ДеревоНастроек.Строки.Удалить(СтрокаТЧ);
				КонецЕсли;
			Иначе
				Если НЕ СтрокаДерева.ЭтоРазделитель Тогда
					МассивСтандартныеРеквизиты = Новый Массив();
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектМетаданных,
									"СтандартныеРеквизиты") Тогда
						Для Каждого СтандартныйРеквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
							МассивСтандартныеРеквизиты.Добавить(СтандартныйРеквизит.Имя);
						КонецЦикла;
					КонецЕсли;
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектМетаданных,
									"РеквизитыАдресации") Тогда
						Для Каждого СтандартныйРеквизит Из ОбъектМетаданных.РеквизитыАдресации Цикл
							МассивСтандартныеРеквизиты.Добавить(СтандартныйРеквизит.Имя);
						КонецЦикла;
					КонецЕсли;
					МассивСтандартныеРеквизиты.Добавить("Партнеры_СегментКлиентов");
					МассивСтандартныеРеквизиты.Добавить("Партнеры_ABCКласс");
					МассивСтандартныеРеквизиты.Добавить("Партнеры_XYZКласс");
					Реквизиты = ОбъектМетаданных.Реквизиты;
					Если МассивСтандартныеРеквизиты.Найти(СтрокаДерева.Реквизит) = Неопределено
						И Реквизиты.Найти(СтрокаДерева.Реквизит) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				СтрокаРеквизит = НоваяСтрока.ДеревоНастроек.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРеквизит, СтрокаДерева);
				СтрокаРеквизит.Объект = СтрокаИсточник.Объект;
				
				Попытка
					СтрокаРеквизит.ОригинальноеПредставлениеРеквизита =
						ОбъектМетаданных.Реквизиты[СтрокаДерева.Реквизит].Представление();
					Если Не ЗначениеЗаполнено(СтрокаРеквизит.ОригинальноеПредставлениеРеквизита) Тогда
						СтрокаРеквизит.ОригинальноеПредставлениеРеквизита = ОбъектМетаданных.Реквизиты[СтрокаДерева.Реквизит].Имя;
					КонецЕсли;
				Исключение
					Попытка
						СтрокаРеквизит.ОригинальноеПредставлениеРеквизита =
							ОбъектМетаданных.СтандартныеРеквизиты[СтрокаДерева.Реквизит].Представление();
						Если Не ЗначениеЗаполнено(СтрокаРеквизит.ОригинальноеПредставлениеРеквизита) Тогда
							СтрокаРеквизит.ОригинальноеПредставлениеРеквизита =
								ОбъектМетаданных.СтандартныеРеквизиты[СтрокаДерева.Реквизит].Имя;
						КонецЕсли;
					Исключение
						Попытка
							СтрокаРеквизит.ОригинальноеПредставлениеРеквизита =
								ОбъектМетаданных.РеквизитыАдресации[СтрокаДерева.Реквизит].Представление();
							Если Не ЗначениеЗаполнено(СтрокаРеквизит.ОригинальноеПредставлениеРеквизита) Тогда
								СтрокаРеквизит.ОригинальноеПредставлениеРеквизита =
									ОбъектМетаданных.РеквизитыАдресации[СтрокаДерева.Реквизит].Имя;
							КонецЕсли;
						Исключение
							СтрокаРеквизит.ОригинальноеПредставлениеРеквизита = "";
						КонецПопытки;
					КонецПопытки;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат ТаблицаНастройки;
КонецФункции // НастройкиПолейОтображенияСодержанияСкорректироватьВнешнююТаблицу()

// Функция возвращает таблицу настроек по умолчанию.
//
// Параметры:
//	ИмяМакета	- Строка	- Имя макета.
//
// Возвращаемое значение:
//	Неопределено или ТаблицаЗначений	- Таблица настроек по умолчанию.
//
Функция НастройкиПолейОтображенияСодержанияПолучитьНастройкиПоУмолчанию(ИмяМакета = Неопределено)
	Если ИмяМакета = Неопределено Тогда
		ИмяМакета = "CRM_НастройкиПолейОтображенияСодержания";
	КонецЕсли;
	Попытка
		ЧтениеXML = Новый ЧтениеXML();
		Макет = ПолучитьОбщийМакет("CRM_НастройкиПолейОтображенияСодержания");
		ЧтениеXML.УстановитьСтроку(Макет.ПолучитьТекст());
		Хранилище = ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		Если ТипЗнч(Хранилище) <> Тип("ХранилищеЗначения") Тогда
			ВызватьИсключение "";
		КонецЕсли;
		ТаблицаНастройки = Хранилище.Получить();
		Если ТипЗнч(ТаблицаНастройки) <> Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение "";
		КонецЕсли;
		Возврат НастройкиПолейОтображенияСодержанияСкорректироватьВнешнююТаблицу(ТаблицаНастройки);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции // НастройкиПолейОтображенияСодержанияПолучитьНастройкиПоУмолчанию()

// Вспомогательная функция преобразует цвет из формата 1С в формат, пригодный для использования в HTML.
//
// Параметры:
//	ОбъектЦвет	- Цвет - Цвет в формате 1С.
//
// Возвращаемое значение:
//	Строка	- цвет в формате html.
//
Функция НастройкиПолейОтображенияСодержанияПолучитьЦветДляHTMLКода(ОбъектЦвет)
	// Защиту не проверяем, т.к. функция используется только локально как вспомогательная.
	
	Если ОбъектЦвет = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(ОбъектЦвет) = Тип("Строка") Тогда
		Возврат ОбъектЦвет;
	ИначеЕсли ОбъектЦвет.Красный < 0 Или ОбъектЦвет.Зеленый < 0 Или ОбъектЦвет.Синий < 0 Тогда
		Возврат "#000000";
	КонецЕсли;
	
	СтрокаШестнадцатиричныеСимволы = "0123456789abcdef";
	
	Возврат	"#"
			+	Сред(СтрокаШестнадцатиричныеСимволы, Цел(ОбъектЦвет.Красный / 16) + 1, 1) 
				+ Сред(СтрокаШестнадцатиричныеСимволы, Цел(ОбъектЦвет.Красный % 16) + 1,
				 1)
			+	Сред(СтрокаШестнадцатиричныеСимволы, Цел(ОбъектЦвет.Зеленый / 16) + 1, 1) 
				+ Сред(СтрокаШестнадцатиричныеСимволы, Цел(ОбъектЦвет.Зеленый % 16) + 1,
				 1)
			+	Сред(СтрокаШестнадцатиричныеСимволы, Цел(ОбъектЦвет.Синий / 16) + 1, 1) 
				+ Сред(СтрокаШестнадцатиричныеСимволы, Цел(ОбъектЦвет.Синий % 16) + 1,
				 1);
	//
КонецФункции

// Вспомогательная функция, формирует теги для отрисовки текста определенным цветом и шрифтом.
//
// Параметры:
//	ЦветТекста	- Цвет	- Цвет текста в формате 1С.
//	ЦветФона	- Цвет	- Цвет фона в формате 1С.
//	Шрифт		- Шрифт	- Шрифт текста в формате 1С.
//
// Возвращаемое значение:
//	Структура	- структура с открывающимся и закрывающимся тегами.
//
Функция НастройкиПолейОтображенияСодержанияПолучитьТегиШрифтаТекстаHTML(ЦветТекста, ЦветФона, Шрифт)
	// Защиту не проверяем, т.к. функция используется только локально как вспомогательная.
	
	СтруктураРезультат = Новый Структура("ОткрывающийТег,ЗакрывающийТег", "", "");
	
	Если ЦветТекста = Неопределено Тогда
		ЦветТекстаHTML = Неопределено;
	Иначе
		ЦветТекстаHTML = НастройкиПолейОтображенияСодержанияПолучитьЦветДляHTMLКода(ЦветТекста);
	КонецЕсли;
	
	Если ЦветФона = Неопределено Тогда
		ЦветФонаHTML = Неопределено;
	Иначе
		ЦветФонаHTML = НастройкиПолейОтображенияСодержанияПолучитьЦветДляHTMLКода(ЦветФона);
	КонецЕсли;
	
	Если Шрифт = Неопределено Тогда
		ШрифтЭлемента = Неопределено;
	Иначе
		Если Шрифт.Размер < 0 Тогда
			ШрифтЭлемента = Неопределено;
		Иначе
			ШрифтЭлемента = Шрифт;
		КонецЕсли;
	КонецЕсли;
	
	Если ЦветТекстаHTML <> Неопределено Или ЦветФонаHTML <> Неопределено Или ШрифтЭлемента <> Неопределено Тогда
		СтруктураРезультат.ОткрывающийТег = "<FONT style=""";
		
		Если ЦветТекстаHTML <> Неопределено Тогда
			СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "color:" + ЦветТекстаHTML + "; ";
		КонецЕсли;
		Если ЦветФонаHTML <> Неопределено Тогда
			СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "background-color:" + ЦветФонаHTML + "; ";
		КонецЕсли;
		
		Если ШрифтЭлемента <> Неопределено Тогда
			СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "font-size:" 
				+ Формат(ШрифтЭлемента.Размер, "ЧН=0; ЧГ=") + "px; ";
		КонецЕсли;
		
		СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + """";
		
		Если ШрифтЭлемента <> Неопределено Тогда
			Если ЗначениеЗаполнено(ШрифтЭлемента.Имя) Тогда
				СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + " face=""" + ШрифтЭлемента.Имя + """";
			КонецЕсли;
		КонецЕсли;
		
		СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + ">";
		
		Если ШрифтЭлемента <> Неопределено Тогда
			Если ШрифтЭлемента.Полужирный = Истина Тогда
				СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "<B>";
				СтруктураРезультат.ЗакрывающийТег = СтруктураРезультат.ЗакрывающийТег + "</B>";
			КонецЕсли;
			Если ШрифтЭлемента.Наклонный = Истина Тогда
				СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "<I>";
				СтруктураРезультат.ЗакрывающийТег = СтруктураРезультат.ЗакрывающийТег + "</I>";
			КонецЕсли;
			Если ШрифтЭлемента.Подчеркивание = Истина Тогда
				СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "<U>";
				СтруктураРезультат.ЗакрывающийТег = СтруктураРезультат.ЗакрывающийТег + "</U>";
			КонецЕсли;
			Если ШрифтЭлемента.Зачеркивание = Истина Тогда
				СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "<DEL>";
				СтруктураРезультат.ЗакрывающийТег = СтруктураРезультат.ЗакрывающийТег + "</DEL>";
			КонецЕсли;
		КонецЕсли;
		
		СтруктураРезультат.ЗакрывающийТег = СтруктураРезультат.ЗакрывающийТег + "</FONT>";
	КонецЕсли;
		
	Возврат СтруктураРезультат;
КонецФункции

// Вспомогательная функция, возвращает описание объекта в HTML формате.
//
// Параметры:
//	СсылкаНаОбъект	- ЛюбаяСсылка		- Ссылка на объект.
//	Представление	- Строка			- Представление объекта.
//	БезПереноса		- Булево			- Признак переноса строк.
//	ГиперСсылка		- Булево			- Признак отображать объект гиперссылкой.
//	ТегиЭлемента	- Структура			- Структура с описанием тегов элемента.
//	
// Возвращаемое значение:
//	Строка	- HTML текст описания объекта.
//	
Функция НастройкиПолейОтображенияСодержанияПолучитьОписаниеОбъектаHTML(СсылкаНаОбъект,
	 Представление, БезПереноса = Ложь, ГиперСсылка = Истина,
	 ТегиЭлемента = Неопределено)
	// Защиту не проверяем, т.к. функция используется только локально как вспомогательная.
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Если ТипЗнч(СсылкаНаОбъект) = Тип("Дата") Тогда
			ПредставлениеОбъекта = Формат(СсылкаНаОбъект, "ДФ=dd.MM.yyyy");
		Иначе
			ПредставлениеОбъекта = Строка(СсылкаНаОбъект);
			ПредставлениеОбъекта = ?(СтрДлина(ПредставлениеОбъекта) > 50, "<br>", "") + ПредставлениеОбъекта;
		КонецЕсли;
		
		Если ТипЗнч(СсылкаНаОбъект) = Тип("Строка")  Тогда
			Если ТегиЭлемента <> Неопределено Тогда
				ПредставлениеОбъекта = ТегиЭлемента.ОткрывающийТег + ПредставлениеОбъекта + ТегиЭлемента.ЗакрывающийТег;
			КонецЕсли;
			
			стрОписание = ?(ЗначениеЗаполнено(Представление), "<%ЗаголовокОткрывающийТег%>" + Представление + ": " + "<%ЗаголовокЗакрывающийТег%>", "") + ПредставлениеОбъекта + ?(БезПереноса,
				 "",
				 "<BR>");
			
			Возврат стрОписание;
		КонецЕсли;
		
		Если ТегиЭлемента <> Неопределено Тогда
			ПредставлениеОбъекта = ТегиЭлемента.ОткрывающийТег + ПредставлениеОбъекта + ТегиЭлемента.ЗакрывающийТег;
		КонецЕсли;
		
		Если НЕ (ТипЗнч(СсылкаНаОбъект) = Тип("Неопределено"))
			 И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(СсылкаНаОбъект))
			 И ОбщегоНазначения.СсылкаСуществует(СсылкаНаОбъект) Тогда
			Если ГиперСсылка Тогда
				НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект);
				стрОписание = ?(ЗначениеЗаполнено(Представление), "<%ЗаголовокОткрывающийТег%>" + Представление + ": " + "<%ЗаголовокЗакрывающийТег%>", "") + "<a href=" + НавигационнаяСсылка 
					+ ">" 
					+ ПредставлениеОбъекта + "</a>" + ?(БезПереноса, "",
					 "<BR>");
			Иначе
				стрОписание = ?(ЗначениеЗаполнено(Представление), "<%ЗаголовокОткрывающийТег%>" + Представление + ": " + "<%ЗаголовокЗакрывающийТег%>", "") + ПредставлениеОбъекта + "</a>" + ?(БезПереноса,
					 "",
					 "<BR>");
			КонецЕсли;
		Иначе
			стрОписание = ?(ЗначениеЗаполнено(Представление), "<%ЗаголовокОткрывающийТег%>" + Представление + ": " + "<%ЗаголовокЗакрывающийТег%>", "") + НСтр("ru='[Объект недоступен]'") + ?(БезПереноса,
				 "" ,
				 "<BR>");
		КонецЕсли;
	Иначе
		стрОписание = "";
	КонецЕсли;	
	
	Возврат стрОписание;
КонецФункции

// Вспомогательная функция, вызывается из функции НастройкиПолейОтображенияСодержанияПолучитьСодержание,
// формирует строку в формате HTML для Отображения табличной части объекта.
//
// Параметры:
//	СсылкаНаОбъект	- ЛюбаяСсылка				- Ссылка на объект.
//	Реквизиты		- Строки дерева значений	- Строки с описанием реквизитов, которые нужно отобразить.
//	СтрокаНастройки	- Строка дерева значений	- Строка с описанием табличной части.
//	
// Возвращаемое значение:
//	Строка	- HTML текст описания табличной части.
//	
Функция НастройкиПолейОтображенияСодержанияСформироватьHTMLОписаниеТабличнойЧасти(СсылкаНаОбъект,
	 Реквизиты,
	 СтрокаНастройки)
	Описание = "";
	
	Если СтрокаНастройки.Реквизит = "КонтактнаяИнформация" Тогда
		ОбрабатываемКИ = Истина;
	Иначе
		ОбрабатываемКИ = Ложь;
	КонецЕсли;			
	
	Если СсылкаНаОбъект <> Неопределено 
		И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(СсылкаНаОбъект))
		И СсылкаНаОбъект.Метаданные().ТабличныеЧасти.Найти(СтрокаНастройки.Реквизит) <> Неопределено Тогда
			
		ТабличнаяЧасть = СсылкаНаОбъект[СтрокаНастройки.Реквизит];
		Если ТабличнаяЧасть.Количество() = 0 Тогда
			Возврат Описание;
		КонецЕсли;
	КонецЕсли;
	
	ЦветРамки			= "#e5e5e5";
	ЦветФонаЗаголовков	= "#f0f0f0";
	ЦветФонаСтрок		= "#fafafa";
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	
	Если Реквизиты.Количество() > 0 Тогда
		ТаблицаРеквизитов.Колонки.Добавить();
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока[0] = Реквизиты[0];
	КонецЕсли;
	
	ТекущаяКолонка = 0;
	ТекущаяСтрока  = 0;
	
	Для Каждого Реквизит Из Реквизиты Цикл
		Если Реквизит = Реквизиты[0] Тогда
			Продолжить;
		КонецЕсли;
		
		Если Реквизит.Положение = "НоваяСтрока" Тогда
			ТекущаяСтрока = ТекущаяСтрока + 1;
			Если ТаблицаРеквизитов.Количество() < ТекущаяСтрока + 1 Тогда
				НоваяСтрока = ТаблицаРеквизитов.Добавить();
			КонецЕсли;
		Иначе
			ТекущаяКолонка = ТекущаяКолонка + 1;
			ТаблицаРеквизитов.Колонки.Добавить();
			ТекущаяСтрока  = 0;
		КонецЕсли;
		
		ТаблицаРеквизитов.Получить(ТекущаяСтрока)[ТекущаяКолонка] = Реквизит;
	КонецЦикла;
	
	МаксимальныйИндексСтроки = ТаблицаРеквизитов.Количество() - 1;
	Для Каждого Строка Из ТаблицаРеквизитов Цикл
		ТекущаяСтрока =  ТаблицаРеквизитов.Индекс(Строка);
		ОписаниеСтроки = "";
		Для ТекущаяКолонка = 0 По ТаблицаРеквизитов.Колонки.Количество() - 1 Цикл
			КолОбъединяемыхЯчеек = 1;
			Для Сч = ТекущаяСтрока + 1 По  МаксимальныйИндексСтроки Цикл
				Если ТаблицаРеквизитов.Получить(Сч)[ТекущаяКолонка] = Неопределено Тогда
					КолОбъединяемыхЯчеек = КолОбъединяемыхЯчеек + 1;
				 Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Реквизит = ТаблицаРеквизитов.Получить(ТекущаяСтрока)[ТекущаяКолонка]; 
			Если Реквизит <> Неопределено Тогда
				ОписаниеСтроки = ОписаниеСтроки + "<TD align=""center"" rowspan = " 
					+ Строка(КолОбъединяемыхЯчеек) + "><%ЗаголовокТаблицыОткрывающийТег%>" 
					+ Реквизит.ПредставлениеРеквизита 
					+ "<%ЗаголовокТаблицыЗакрывающийТег%></TD>";
			КонецЕсли;
		КонецЦикла;
		Описание = Описание + "<TR bgcolor=" + ЦветФонаЗаголовков + ">" + ОписаниеСтроки + "  </TR>";
	КонецЦикла;
	
	Если СсылкаНаОбъект = Неопределено Тогда
		МаксимальныйИндексСтроки = ТаблицаРеквизитов.Количество() - 1;
		Для Каждого Строка Из ТаблицаРеквизитов Цикл
			ТекущаяСтрока = ТаблицаРеквизитов.Индекс(Строка);
			ОписаниеСтроки = "";
			Для ТекущаяКолонка = 0 По ТаблицаРеквизитов.Колонки.Количество() - 1 Цикл
				КолОбъединяемыхЯчеек = 1;
				Для Сч = ТекущаяСтрока + 1 По  МаксимальныйИндексСтроки Цикл
					Если  ТаблицаРеквизитов.Получить(Сч)[ТекущаяКолонка] = Неопределено Тогда
						КолОбъединяемыхЯчеек = КолОбъединяемыхЯчеек + 1;
					Иначе 
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Реквизит = ТаблицаРеквизитов.Получить(ТекущаяСтрока)[ТекущаяКолонка]; 
				
				ШрифтЭлемента		= Неопределено;
				ЦветТекстаЭлемента	= Неопределено;
				ЦветФонаЭлемента	= Неопределено;
				Попытка
					ШрифтЭлемента = Реквизит.Шрифт;
				
				Исключение	ШрифтЭлемента = Неопределено;
				КонецПопытки;
				Попытка
					ЦветТекстаЭлемента = Реквизит.ЦветТекста;
				
				Исключение	ЦветТекстаЭлемента = Неопределено;
				КонецПопытки;
				Попытка
					ЦветФонаЭлемента = ?(Реквизит.ЭтоРеквизитТабличнойЧасти
					 И Реквизит.ЦветФона = Новый Цвет(255, 255, 255), Новый Цвет(251, 249, 236), Реквизит.ЦветФона) ;
				
				Исключение	ЦветФонаЭлемента = Неопределено;
				КонецПопытки;
				
				Если Реквизит <> Неопределено Тогда
					ТегиЭлемента = НастройкиПолейОтображенияСодержанияПолучитьТегиШрифтаТекстаHTML(ЦветТекстаЭлемента,
						 ЦветФонаЭлемента,
						 ШрифтЭлемента);
					
					ПримерПредставлениеРеквизита = ?(ЗначениеЗаполнено(Реквизит.ПредставлениеРеквизита),
						 Реквизит.ПредставлениеРеквизита, ?(ЗначениеЗаполнено(Реквизит.ОригинальноеПредставлениеРеквизита),
						 Реквизит.ОригинальноеПредставлениеРеквизита,
						 НСтр("ru='Реквизит'")));
					
					ПримерПредставлениеРеквизита = ТегиЭлемента.ОткрывающийТег + ПримерПредставлениеРеквизита 
						+ ТегиЭлемента.ЗакрывающийТег;
					
					ОписаниеРеквизита = ?(Реквизит.ТипЗначенияРеквизита = "Строка", "  {" + ПримерПредставлениеРеквизита + "}", "</B>" + "<a href="""">" 
						+ "  {" 
						+ ПримерПредставлениеРеквизита 
						+ "}</a>");
					
					ОписаниеСтроки = ОписаниеСтроки + "<TD rowspan = " + Строка(КолОбъединяемыхЯчеек) + ">" 
						+ ОписаниеРеквизита 
						+ "</TD>";
				КонецЕсли;
			КонецЦикла;
			Описание = Описание + "<TR bgcolor=" + ЦветФонаСтрок + "> " + ОписаниеСтроки + "  </TR>";
		КонецЦикла;
		
	Иначе
		Попытка
			ТабличнаяЧасть = СсылкаНаОбъект[СтрокаНастройки.Реквизит];
		Исключение
			Возврат "";
		КонецПопытки;
		
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			Если ОбрабатываемКИ Тогда
				Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Тип) Тогда
					Продолжить;
				КонецЕсли;
				
				ОсновнойВидСвязи = СтрокаТабличнойЧасти.CRM_ОсновнойДляСвязи;
			Иначе
				ОсновнойВидСвязи = Ложь;
			КонецЕсли;
			
			МаксимальныйИндексСтроки = ТаблицаРеквизитов.Количество() - 1;
			
			Для каждого Строка Из ТаблицаРеквизитов Цикл
				ТекущаяСтрока = ТаблицаРеквизитов.Индекс(Строка);
				ОписаниеСтроки = "";
				Для ТекущаяКолонка = 0 По ТаблицаРеквизитов.Колонки.Количество() - 1 Цикл
					КолОбъединяемыхЯчеек = 1;
					Для Сч = ТекущаяСтрока + 1 По  МаксимальныйИндексСтроки Цикл
						Если  ТаблицаРеквизитов.Получить(Сч)[ТекущаяКолонка] = Неопределено Тогда
							КолОбъединяемыхЯчеек = КолОбъединяемыхЯчеек + 1;
						Иначе 
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Реквизит = ТаблицаРеквизитов.Получить(ТекущаяСтрока)[ТекущаяКолонка]; 
					
					Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
						ИдКонфы = "v8config://v8cfgHelp";
						ИдКартинки = "id2af07561-6367-4f1a-a268-28a694789a41";
						ДопНули = "/00000000-0000-0000-0000-000000000000";
						ИдПолныйПутьКартинки = ИдКонфы + "/mdpicture/" + ИдКартинки + ДопНули;
						
						Если ОбрабатываемКИ И ТекущаяКолонка = 0 И ОсновнойВидСвязи Тогда
							ТекстHTMLДляДобавления = "<IMG src=" + ИдПолныйПутьКартинки + ">" + "&nbsp;&nbsp;&nbsp;";
						Иначе
							ТекстHTMLДляДобавления = "";
						КонецЕсли;
					Иначе
						ТекстHTMLДляДобавления = "";
					КонецЕсли;
					
					Если Реквизит <> Неопределено Тогда
						ШрифтЭлемента		= Неопределено;
						ЦветТекстаЭлемента	= Неопределено;
						ЦветФонаЭлемента	= Неопределено;
						Попытка
							ШрифтЭлемента = Реквизит.Шрифт;
						
						Исключение	ШрифтЭлемента = Неопределено;
						КонецПопытки;
						Попытка
							ЦветТекстаЭлемента = Реквизит.ЦветТекста;
						
						Исключение	ЦветТекстаЭлемента = Неопределено;
						КонецПопытки;
						Попытка
							ЦветФонаЭлемента = ?(Реквизит.ЭтоРеквизитТабличнойЧасти
							 И Реквизит.ЦветФона = Новый Цвет(255, 255, 255), Новый Цвет(251, 249, 236), Реквизит.ЦветФона) ;
						
						Исключение	ЦветФонаЭлемента = Неопределено;
						КонецПопытки;
						
						ЭтоПредставлениеКИ = (ОбрабатываемКИ И Реквизит.Реквизит = "Представление");
						
						ТегиЭлемента = НастройкиПолейОтображенияСодержанияПолучитьТегиШрифтаТекстаHTML(ЦветТекстаЭлемента,
							 ЦветФонаЭлемента,
							 ШрифтЭлемента);
						
						Попытка
							ЗначениеРеквизита =  СтрокаТабличнойЧасти[Реквизит.Реквизит];
						Исключение
							ЗначениеРеквизита = "";
						КонецПопытки;
						
						Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
							ОписаниеРеквизита = "&nbsp;";
							
							ОписаниеРеквизита = ТегиЭлемента.ОткрывающийТег + ТекстHTMLДляДобавления 
								+ ОписаниеРеквизита + ТегиЭлемента.ЗакрывающийТег;
							
						ИначеЕсли Реквизит.ТипЗначенияРеквизита = "Строка" Тогда
							Если ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
								ОписаниеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.ПС, "<BR>");
								ОписаниеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.Таб, "&nbsp;&nbsp;&nbsp;");
							ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
								ОписаниеРеквизита = Строка(ЗначениеРеквизита);
							ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Дата") Тогда
								Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
									ОписаниеРеквизита = "<%ПредставлениеПустойДаты%>";
								Иначе
									Если ЗначениеРеквизита = НачалоДня(ЗначениеРеквизита) Тогда
										ОписаниеРеквизита = Формат(ЗначениеРеквизита, "ДЛФ=D");
									Иначе
										ОписаниеРеквизита = Строка(ЗначениеРеквизита);
									КонецЕсли;
								КонецЕсли;
							Иначе
								ОписаниеРеквизита = ЗначениеРеквизита;
							КонецЕсли;
							
							Если ЭтоПредставлениеКИ Тогда
								ТипКИВАтрибут = Неопределено;
								
								Если СтрокаТабличнойЧасти.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
									ТипКИВАтрибут = "address";
								ИначеЕсли СтрокаТабличнойЧасти.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
									ТипКИВАтрибут = "telephone";
								ИначеЕсли СтрокаТабличнойЧасти.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
									ТипКИВАтрибут = "email";
								ИначеЕсли СтрокаТабличнойЧасти.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
									ТипКИВАтрибут = "webpage";
								КонецЕсли;
								
								Если ТипКИВАтрибут <> Неопределено Тогда
									ОписаниеРеквизита = "<a href=""НажатиеНаКонтактнуюИнформацию"" data-contact-type="""
										+ ТипКИВАтрибут + """>" + ОписаниеРеквизита + "</a>";
								КонецЕсли;
							КонецЕсли;
							
							ОписаниеРеквизита = ТегиЭлемента.ОткрывающийТег + ТекстHTMLДляДобавления 
								+ ОписаниеРеквизита + ТегиЭлемента.ЗакрывающийТег;
						Иначе
							ПредставлениеОбъекта = Строка(ЗначениеРеквизита);
							ПредставлениеОбъекта = ТегиЭлемента.ОткрывающийТег + ПредставлениеОбъекта + ТегиЭлемента.ЗакрывающийТег;
							
							Если НЕ (ТипЗнч(ЗначениеРеквизита) = Тип("Неопределено"))
								 И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЗначениеРеквизита))
								 И ОбщегоНазначения.СсылкаСуществует(ЗначениеРеквизита) Тогда
								НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗначениеРеквизита);
								ОписаниеРеквизита = ТекстHTMLДляДобавления + "<a href=" + НавигационнаяСсылка + ">" 
									+ ПредставлениеОбъекта 
									+ "</a>&nbsp;";
							Иначе
								ОписаниеРеквизита = НСтр("ru='[Объект недоступен]'");
							КонецЕсли;
						КонецЕсли;
						
						ОписаниеСтроки = ОписаниеСтроки + "<TD rowspan = " + Строка(КолОбъединяемыхЯчеек) + ">" 
							+ ОписаниеРеквизита 
							+ "</TD>";
						
					КонецЕсли;
				КонецЦикла;
				Описание = Описание + "<TR bgcolor=" + ЦветФонаСтрок + "> " + ОписаниеСтроки + "  </TR>";
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат "<TABLE width=""100%"" border=1 cellspacing=0 cellpadding=5 bordercolor=" + ЦветРамки 
		+ "> <CAPTION align = LEFT><%ЗаголовокОткрывающийТег%>" + СтрокаНастройки.ПредставлениеРеквизита 
		+ "<%ЗаголовокЗакрывающийТег%></CAPTION>" +  Описание 
		+ "</TABLE>";
КонецФункции

// Функция формирует массив имен регистров, по которым есть движения документа.
//
// Параметры:
//	Регистратор			- ДокументСсылка	- Документ-регистратор
//	МетаданныеДокумента	- ОбъектМетаданных	- Метаданные документа.
//
// Возвращаемое значение:
//	Массив	- Массив имен регистров.
//
Функция ПолучитьМассивИменИспользуемыхРегистров(Регистратор, МетаданныеДокумента)
	
	МассивРегистров = Новый Массив;
	ТекстЗапроса = "";
	СчетчикТаблиц = 0;
	СчетчикЦикла = 0;
	ВсегоРегистров = МетаданныеДокумента.Движения.Количество();
	
	Для каждого Движение Из МетаданныеДокумента.Движения Цикл
		
		Если СчетчикТаблиц > 0 Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
			
		КонецЕсли;
		
		СчетчикТаблиц = СчетчикТаблиц + 1;
		СчетчикЦикла = СчетчикЦикла + 1;
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|""" + Движение.Имя + """ КАК ИмяРегистра
		|
		|ИЗ " + Движение.ПолноеИмя() + "
		|
		|ГДЕ Регистратор = &Регистратор
		|";
		
		Если СчетчикТаблиц = 256 ИЛИ СчетчикЦикла = ВсегоРегистров Тогда
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;
			
			// BSLLS:CreateQueryInCycle-off
			// Запрос выполняется один раз
			Если МассивРегистров.Количество() = 0 Тогда
				
				МассивРегистров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");
				
			Иначе
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					МассивРегистров.Добавить(Выборка.ИмяРегистра);
					
				КонецЦикла;
				
			КонецЕсли;
			// BSLLS:CreateQueryInCycle-on
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивРегистров;
	
КонецФункции // ПолучитьМассивИменИспользуемыхРегистров()

// Функция возвращает трудозатраты полного дня в минутах.
//
// Параметры:
//	НачПериода					- Дата		- Дата начала.
//	КонПериода					- Дата		- Дата окончания.
//	МассивРабочихПериодовДня	- Массив	- Массив с описанием рабочих часов в течении дня.
//
// Возвращаемое значение:
//	Число	- Трудозатраты полного дня в минутах.
//
Функция ТрудозатратыПродолжительностьВДнеВМинутах(Знач НачПериода, Знач КонПериода, МассивРабочихПериодовДня)
	ПродолжительностьВМинутах = 0;
	ВремяНачалаСобытия = Дата("00010101") + (НачПериода - НачалоДня(НачПериода));
	ВремяОкончанияСобытия = Дата("00010101") + (КонПериода - НачалоДня(КонПериода));
	Для Каждого РабочийПериод Из МассивРабочихПериодовДня Цикл
		Если РабочийПериод.Окончание < ВремяНачалаСобытия Тогда
			Продолжить;
		КонецЕсли;
		Если РабочийПериод.Начало > ВремяОкончанияСобытия Тогда
			Прервать;
		КонецЕсли;
		ВремяНачалоДляВычисления = Макс(ВремяНачалаСобытия, РабочийПериод.Начало);
		ВремяОкончаниеДляВычисления = Мин(ВремяОкончанияСобытия, РабочийПериод.Окончание);
		Если ВремяНачалоДляВычисления > ВремяОкончаниеДляВычисления Тогда
			Продолжить;
		КонецЕсли;
		ПродолжительностьВМинутах = ПродолжительностьВМинутах 
			+ Цел((ВремяОкончаниеДляВычисления - ВремяНачалоДляВычисления) / 60);
	КонецЦикла;
	Возврат ПродолжительностьВМинутах;
КонецФункции // ТрудозатратыПродолжительностьВДнеВМинутах()

Функция ОпределитьВидКонтактнойИнформации(СтрокаКИ, Приемник, ВидыКИПриемника)
	
	НайденныеСтроки = ВидыКИПриемника.НайтиСтроки(Новый Структура("Наименование", Строка(СтрокаКИ.Вид)));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0].Ссылка;
	КонецЕсли;
	
	Если ТипЗнч(Приемник) = Тип("СправочникОбъект.КонтактныеЛицаПартнеров") Тогда
		
		ПредопределенныйАдрес = Неопределено;
		ПредопределенныйТелефон = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		ПредопределенныйТелефонМоб = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица;
		ПредопределенныйАдресЭП = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		ПредопределенныйВебСтраница = Неопределено;
		
	Иначе
		
		ПредопределенныйАдрес = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
		ПредопределенныйТелефон = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
		ПредопределенныйТелефонМоб = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица;
		ПредопределенныйАдресЭП = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
		ПредопределенныйВебСтраница = Справочники.ВидыКонтактнойИнформации.CRM_СайтПартнера;
		
	КонецЕсли;
	
	ТипКи = СтрокаКИ.Тип;
	Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Если ЗначениеЗаполнено(ПредопределенныйАдрес) Тогда
			Возврат ПредопределенныйАдрес;
		КонецЕсли;
	ИначеЕсли ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		
		ЕстьМобильныйТелефон = (ТипЗнч(Приемник) = Тип("СправочникОбъект.КонтактныеЛицаПартнеров") ИЛИ
			ТипЗнч(Приемник) = Тип("СправочникОбъект.Партнеры") И Приемник.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
		
		СтруктураНомера = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаКИ.Представление);
		ДлинаНомера = СтрДлина(СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона);
		ЭтоМобильныйТелефон = (ДлинаНомера = 10 И Лев(СтруктураНомера.КодГорода, 1) = "9");
		Если ЕстьМобильныйТелефон И ЭтоМобильныйТелефон Тогда
			Возврат ПредопределенныйТелефонМоб;
		Иначе
			Возврат ПредопределенныйТелефон;
		КонецЕсли;
		
	ИначеЕсли ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Если ЗначениеЗаполнено(ПредопределенныйАдресЭП) Тогда
			Возврат ПредопределенныйАдресЭП;
		КонецЕсли;
	ИначеЕсли ТипКИ = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Если ЗначениеЗаполнено(ПредопределенныйВебСтраница) Тогда
			Возврат ПредопределенныйВебСтраница;
		КонецЕсли;
	КонецЕсли;
	
	НайденныеСтроки = ВидыКИПриемника.НайтиСтроки(Новый Структура("Тип", ТипКИ));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0].Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ОтрисоватьПодменюПроектов(Форма, СтрокаДерева, Родитель, нИндекс)
	
	Если СтрокаДерева.ЭтоГруппа Тогда
		
		ИмяЭлемента = "ПодменюПроектСобытия" + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		
		ТекущееПодменю				= Форма.Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), Родитель);
		ТекущееПодменю.Вид			= ВидГруппыФормы.Подменю;
		ТекущееПодменю.Заголовок	= СтрокаДерева.Наименование;
		
		нИндекс = нИндекс + 1;
		
		Для Каждого СтрокаСтроки Из СтрокаДерева.Строки Цикл
			ОтрисоватьПодменюПроектов(Форма, СтрокаСтроки, ТекущееПодменю, нИндекс);
			
			нИндекс = нИндекс + 1;
		КонецЦикла;
	Иначе
		ИмяЭлемента			= "КнопкаПодменюПроектСобытия" + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		Команда				= Форма.Команды.Добавить(ИмяЭлемента);
		Команда.Действие	= "Подключаемый_КомандаОбработкаАтрибутаСобытияОбщая";
		Команда.Заголовок	= СтрокаДерева.Наименование;
		Команда.Отображение	= ОтображениеКнопки.КартинкаИТекст;
		Кнопка				= Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Родитель);
		Кнопка.Заголовок	= СтрокаДерева.Наименование;
		Кнопка.ИмяКоманды	= Команда.Имя;
		НоваяСтрока			= Форма.ТаблицаСоответствияЭлементовУправленияСсылкам.Добавить();
		НоваяСтрока.Имя		= Кнопка.Имя;
		НоваяСтрока.Ссылка	= СтрокаДерева.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Вспомогательная функция 
//
//
Функция Hex2Число(Hex) 
	Стр = ВРег(СокрЛП(Hex));
	Dec = 0;
	Для Хзнач = 1 По СтрДлина(Стр) Цикл
		Dec = Dec + СтрНайти("123456789ABCDEF", Сред(Стр, Хзнач, 1)) * Pow(16, СтрДлина(Стр) - Хзнач);
	КонецЦикла;
	Возврат Dec;
КонецФункции

// Вспомогательная функция 
//
//
Функция DecToHex(Знач Значение, Разрядность = 2)

	Результат = "";
	
	Пока Значение > 0 Цикл
		Результат = Сред("0123456789ABCDEF", Значение % 16 + 1, 1) + Результат;
		Значение = Цел(Значение / 16);
	КонецЦикла; 
	
	Результат = Прав("00000000" + Результат, Разрядность);
	
	Возврат Результат;

КонецФункции // DecToHex()

// Вспомогательная функция 
//
//
Функция ПолучитьЗначениеИзСтроки(ЗначениеВСтроке, Кавычек)
	Если Кавычек > 0 Тогда
		Возврат ЗначениеВКавычках(ЗначениеВСтроке);
	ИначеЕсли ЗначениеВСтроке = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ЗначениеБезКавычек(ЗначениеВСтроке);
КонецФункции

// Вспомогательная функция 
//
//
Функция ЗначениеВКавычках(ЗначениеВСтроке)
	Возврат ЗначениеВСтроке;
КонецФункции

// Вспомогательная функция 
//
//
Функция ЗначениеБезКавычек(ЗначениеВСтроке)
	// Это число, булево или null.
	// Хотя здесь могут быть и строки. Например: {Code:123}.
	Стр = ВРег(ЗначениеВСтроке);
	Если Стр = "TRUE" Тогда
		Возврат Истина;
	ИначеЕсли Стр = "FALSE" Тогда
		Возврат Ложь;
	ИначеЕсли Стр = "NULL" Тогда
		Возврат Неопределено;
	КонецЕсли;
	// Пробежимся по предполагаемому "числу".
	Экспонента	= Ложь;
	ХХ			= " ";
	Для Индекс = 1 По СтрДлина(Стр) Цикл
		Хзнач = Сред(Стр, Индекс, 1);
		Если СтрНайти("0123456789.+-", Хзнач) Тогда
			ХХ = ХХ + Хзнач;
		ИначеЕсли Хзнач = "E" Тогда
			#Если ВебКлиент Тогда
				Возврат ЗначениеВСтроке;
			#Иначе
				Экспонента = Истина;
				УУ = XMLЗначение(Тип("Число"), ХХ);
				ХХ = " ";
			#КонецЕсли
		Иначе
			// То точно не число, а строка.
			Возврат ЗначениеВСтроке;
		КонецЕсли;
	КонецЦикла;
	#Если ВебКлиент Тогда
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ХХ) Тогда
			ХХ = Число(ХХ);
		КонецЕсли;	
	#Иначе
		ХХ = XMLЗначение(Тип("Число"), ХХ);
		Если Экспонента Тогда
			ХХ = УУ * Pow(10, ХХ);
		КонецЕсли;
	#КонецЕсли
	Возврат ХХ;
КонецФункции

#Область РаботаСДополнительнымиРеквизитами

Функция ПолучитьЭтапыКарты(КартаМаршрута)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", КартаМаршрута);
	Запрос.УстановитьПараметр("НомерВерсии", КартаМаршрута.НомерВерсии);
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ТочкиМаршрутовВходящиеТочки.ТочкаМаршрута КАК ТочкаМаршрута
	|ПОМЕСТИТЬ Этапы
	|ИЗ
	|	Справочник.CRM_ТочкиМаршрутов.ВходящиеТочки КАК CRM_ТочкиМаршрутовВходящиеТочки
	|ГДЕ
	|	CRM_ТочкиМаршрутовВходящиеТочки.Ссылка.Владелец = &Владелец
	|	И CRM_ТочкиМаршрутовВходящиеТочки.НомерВерсии = &НомерВерсии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута
	|ИЗ
	|	Справочник.CRM_ТочкиМаршрутов.ИсходящиеТочки КАК CRM_ТочкиМаршрутовИсходящиеТочки
	|ГДЕ
	|	CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка.Владелец = &Владелец
	|	И CRM_ТочкиМаршрутовИсходящиеТочки.НомерВерсии = &НомерВерсии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Этапы.ТочкаМаршрута КАК Этап
	|ИЗ
	|	Этапы КАК Этапы
	|ГДЕ
	|	Этапы.ТочкаМаршрута.Вид = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыТочекМаршрута.Действие)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Этапы.ТочкаМаршрута.РеквизитДопУпорядочивания";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Этап");
	
КонецФункции

Процедура ДобавитьНастройкуРеквизита(Свойство)
	
	Если Свойство.НаборСвойств = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_CRM_КартыМаршрутов_Общие") Тогда
	// Тогда добавляем настройку для всех карт маршрута
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_КартыМаршрутов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_КартыМаршрутов КАК CRM_КартыМаршрутов";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ссылка.НомерВерсии = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			МассивЭтапов = ПолучитьЭтапыКарты(Выборка.Ссылка);
			
			ЗаписьРегистра				= РегистрыСведений.bpmДополнительныеРеквизитыНастройки.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Карта		= Выборка.Ссылка;
			ЗаписьРегистра.НомерВерсии	= Выборка.Ссылка.НомерВерсии;
			ЗаписьРегистра.Свойство		= Свойство.Ссылка;
			
			МассивНастроек = Новый Массив;
			
			СтруктураНастройки = Новый Структура("Этап,Видимость,Доступность,Обязательный");
			СтруктураНастройки.Этап			= Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка();
			СтруктураНастройки.Видимость	= Истина;
			СтруктураНастройки.Доступность	= Истина;
			СтруктураНастройки.Обязательный	= Свойство.ЗаполнятьОбязательно;
			
			МассивНастроек.Добавить(СтруктураНастройки);
			
			Для Каждого Этап Из МассивЭтапов Цикл
				СтруктураНастройки = Новый Структура("Этап,Видимость,Доступность,Обязательный");
				СтруктураНастройки.Этап			= Этап;
				СтруктураНастройки.Видимость	= Истина;
				СтруктураНастройки.Доступность	= Истина;
				СтруктураНастройки.Обязательный	= Свойство.ЗаполнятьОбязательно;
				
				МассивНастроек.Добавить(СтруктураНастройки);
			КонецЦикла;
			
			ЗаписьРегистра.Настройки = Новый ХранилищеЗначения(МассивНастроек);
			ЗаписьРегистра.Записать();
		КонецЦикла;
	Иначе
	// Найдем карту и для нее добавим настройку
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НаборСвойств", Свойство.НаборСвойств);
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_КартыМаршрутов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_КартыМаршрутов КАК CRM_КартыМаршрутов
		|ГДЕ
		|	CRM_КартыМаршрутов.НаборСвойств = &НаборСвойств";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			МассивЭтапов = ПолучитьЭтапыКарты(Выборка.Ссылка);
			
			ЗаписьРегистра				= РегистрыСведений.bpmДополнительныеРеквизитыНастройки.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Карта		= Выборка.Ссылка;
			ЗаписьРегистра.НомерВерсии	= Выборка.Ссылка.НомерВерсии;
			ЗаписьРегистра.Свойство		= Свойство.Ссылка;
			
			МассивНастроек = Новый Массив;
			
			СтруктураНастройки = Новый Структура("Этап,Видимость,Доступность,Обязательный");
			СтруктураНастройки.Этап			= Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка();
			СтруктураНастройки.Видимость	= Истина;
			СтруктураНастройки.Доступность	= Истина;
			СтруктураНастройки.Обязательный	= Свойство.ЗаполнятьОбязательно;
			
			МассивНастроек.Добавить(СтруктураНастройки);
			
			Для Каждого Этап Из МассивЭтапов Цикл
				СтруктураНастройки = Новый Структура("Этап,Видимость,Доступность,Обязательный");
				СтруктураНастройки.Этап			= Этап;
				СтруктураНастройки.Видимость	= Истина;
				СтруктураНастройки.Доступность	= Истина;
				СтруктураНастройки.Обязательный	= Свойство.ЗаполнятьОбязательно;
				
				МассивНастроек.Добавить(СтруктураНастройки);
			КонецЦикла;
			
			ЗаписьРегистра.Настройки = Новый ХранилищеЗначения(МассивНастроек);
			ЗаписьРегистра.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьНастройкуРеквизита(Свойство)
	
	Если Свойство.НаборСвойств = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_CRM_КартыМаршрутов_Общие") Тогда
	// Тогда добавляем настройку для всех карт маршрута
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_КартыМаршрутов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_КартыМаршрутов КАК CRM_КартыМаршрутов";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ссылка.НомерВерсии = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НаборНастроек = РегистрыСведений.bpmДополнительныеРеквизитыНастройки.СоздатьНаборЗаписей();
			НаборНастроек.Отбор.Карта.Установить(Выборка.Ссылка);
			НаборНастроек.Отбор.Свойство.Установить(Свойство.Ссылка);
			
			НаборНастроек.Прочитать();
			
			Для Каждого СтрокаНабора Из НаборНастроек Цикл
				МассивНастроек = СтрокаНабора.Настройки.Получить();
				Для Каждого Настройка Из МассивНастроек Цикл
					Настройка.Обязательный = Свойство.ЗаполнятьОбязательно;
				КонецЦикла;
				
				СтрокаНабора.Настройки = Новый ХранилищеЗначения(МассивНастроек);
			КонецЦикла;
			
			НаборНастроек.Записать();
		КонецЦикла;
	Иначе
	// Найдем карту и для нее добавим настройку
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НаборСвойств", Свойство.НаборСвойств);
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_КартыМаршрутов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_КартыМаршрутов КАК CRM_КартыМаршрутов
		|ГДЕ
		|	CRM_КартыМаршрутов.НаборСвойств = &НаборСвойств";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НаборНастроек = РегистрыСведений.bpmДополнительныеРеквизитыНастройки.СоздатьНаборЗаписей();
			НаборНастроек.Отбор.Карта.Установить(Выборка.Ссылка);
			НаборНастроек.Отбор.Свойство.Установить(Свойство.Ссылка);
			
			НаборНастроек.Прочитать();
			
			Для Каждого СтрокаНабора Из НаборНастроек Цикл
				МассивНастроек = СтрокаНабора.Настройки.Получить();
				Для Каждого Настройка Из МассивНастроек Цикл
					Настройка.Обязательный = Свойство.ЗаполнятьОбязательно;
				КонецЦикла;
				
				СтрокаНабора.Настройки = Новый ХранилищеЗначения(МассивНастроек);
			КонецЦикла;
			
			НаборНастроек.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // РаботаСДополнительнымиРеквизитами

#КонецОбласти
