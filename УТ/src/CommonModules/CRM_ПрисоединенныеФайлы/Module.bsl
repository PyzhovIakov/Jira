////////////////////////////////////////////////////////////////////////////////
// Подсистема "Присоединенные файлы".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Создает у Получателя копии присоединенных файлов Источника.
// Источник и Получатель могут быть объектами разного типа.
//
// Параметры:
//  Источник     - Ссылка - объект, имеющий присоединенные файлы для копирования.
//  Получатель   - Ссылка - объект, к которому копируются присоединенные файлы.
//  СписокОтбора - СписокЗначений - список файлов, которые копируем. Если не передан, то копируется все файлы.
//  ОчищатьИДФайлаЭлектронногоПисьма - Булево - признак очистки поля "ИДФайлаЭлектронногоПисьма".
//
Процедура СкопироватьПрисоединенныеФайлы(Знач Источник, Знач Получатель,
	 СписокОтбора = Неопределено,
	 ОчищатьИДФайлаЭлектронногоПисьма = Ложь) Экспорт
	
	ДоступнаЭлектроннаяПодпись = Неопределено;
	МодульЭлектроннаяПодписьСлужебный = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
	КонецЕсли;
	
	КопируемыеФайлы = РаботаСФайламиСлужебный.ПрисоединенныеФайлыКОбъекту(Источник.Ссылка);
	
	Для Каждого КопируемыйФайл Из КопируемыеФайлы Цикл
		
		Если ДоступнаЭлектроннаяПодпись = Неопределено Тогда
			ДоступнаЭлектроннаяПодпись = (МодульЭлектроннаяПодписьСлужебный <> Неопределено) 
				И (МодульЭлектроннаяПодписьСлужебный.ДоступнаЭлектроннаяПодпись(ТипЗнч(КопируемыйФайл)));
		КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КопируемыйФайл, "ПометкаУдаления") Тогда
			Продолжить;
		КонецЕсли;
		// +CRM
		Если НЕ СписокОтбора = Неопределено Тогда
			Если СписокОтбора.НайтиПоЗначению(КопируемыйФайл) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		// -CRM
		НачатьТранзакцию();
		
		Попытка
			// BSLLS:UnusedLocalVariable-off
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(КопируемыйФайл);
			// BSLLS:UnusedLocalVariable-on
			
			// +CRM
			МенеджерПриемника = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник." 
				+ Получатель.Метаданные().Имя 
				+ "ПрисоединенныеФайлы");
			КопияФайла = МенеджерПриемника.СоздатьЭлемент();
			
			СтрокаИсключений = "Родитель" + ?(КопияФайла.Метаданные().Владельцы.Количество() = 0, ",Владелец", "");
			Если ОчищатьИДФайлаЭлектронногоПисьма Тогда
				СтрокаИсключений = СтрокаИсключений + ",ИДФайлаЭлектронногоПисьма";
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(КопияФайла, КопируемыйФайл, , СтрокаИсключений);
			
			КопияФайлаСсылка = МенеджерПриемника.ПолучитьСсылку();
			// -CRM
			КопияФайла.УстановитьСсылкуНового(КопияФайлаСсылка);
			КопияФайла.ВладелецФайла = Получатель.Ссылка;
			КопияФайла.Редактирует = Справочники.Пользователи.ПустаяСсылка();
			
			КопияФайла.ТекстХранилище = Новый ХранилищеЗначения(КопируемыйФайл.ТекстХранилище.Получить());
			КопияФайла.ФайлХранилище =  Новый ХранилищеЗначения(КопируемыйФайл.ФайлХранилище.Получить());
			
			ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(КопируемыйФайл);
			
			ТипХраненияФайла = РаботаСФайламиСлужебный.ТипХраненияФайлов();
			Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
				КопияФайла.ТипХраненияФайла = ТипХраненияФайла;
				РаботаСФайламиСлужебный.ЗаписатьФайлВИнформационнуюБазу(КопияФайлаСсылка, ДвоичныеДанные);
			Иначе
				
				КопияФайла.Том = Неопределено;
				КопияФайла.ПутьКФайлу = Неопределено;
				КопияФайла.ТипХраненияФайла = Неопределено;
				
				РаботаСФайламиВТомахСлужебный.ДобавитьФайл(КопияФайла, ДвоичныеДанные);
				
			КонецЕсли;
			КопияФайла.Записать();
			
			Если ДоступнаЭлектроннаяПодпись Тогда
				УстановленныеПодписи = МодульЭлектроннаяПодпись.УстановленныеПодписи(КопируемыйФайл);
				МодульЭлектроннаяПодпись.ДобавитьПодпись(КопияФайла.Ссылка, УстановленныеПодписи);
				
				СертификатыИсточника = МодульЭлектроннаяПодпись.СертификатыШифрования(КопируемыйФайл);
				МодульЭлектроннаяПодпись.ЗаписатьСертификатыШифрования(КопияФайла, СертификатыИсточника);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет расширение файла и размер (копия функции из ФайловыеФункцииСлужебныйКлиентСервер),
// но проверяет не файлы, загружаемые физически (с жёсткого диска, флешки и т.д.), а
// файлы, загружаемые из присоедин. файлов других объектов.
//
// Параметры:
//  Файл						- СправочникСсылка	- Ссылка на файл.
//  Размер						- Число				- Размер файла в байтах.
//  Расширение					- Строка			- Расширение файла.
//  ВызыватьИсключение			- Булево			- Признак, что файл не подходит.
//  МассивИменФайловСОшибками	- Массив из Структура	- Массив файлов, содержащий список неподходящих для загрузки файлов.
//
// Возвращаемое значение:
//  Булево
//
Функция ПроверитьВозможностьЗагрузкиФайла(Файл,
										  Размер,
										  Расширение,
                                          ВызыватьИсключение = Истина,
                                          МассивИменФайловСОшибками = Неопределено) Экспорт
	
	ОбщиеНастройки = РаботаСФайламиСлужебныйПовтИсп.НастройкиРаботыСФайлами().ОбщиеНастройки;
	
	// Размер файла слишком большой.
	Если Размер > ОбщиеНастройки.МаксимальныйРазмерФайла Тогда
		
		РазмерВМб     = Размер / (1024 * 1024);
		РазмерВМбМакс = ОбщиеНастройки.МаксимальныйРазмерФайла / (1024 * 1024);
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Размер файла ""%1"" (%2 Мб)"
"превышает максимально допустимый размер файла (%3 Мб).';en='Size of file ""%1"" (%2 MB) exceeds maximum"
"allowed file size (%3 MB).'"),
			Файл.Наименование,
			РаботаСФайламиСлужебныйКлиентСервер.ПредставлениеРазмераФайла(РазмерВМб),
			РаботаСФайламиСлужебныйКлиентСервер.ПредставлениеРазмераФайла(РазмерВМбМакс));
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
		Запись = Новый Структура;
		Запись.Вставить("ИмяФайла", Файл.Наименование);
		Запись.Вставить("Ошибка",   ОписаниеОшибки);
		
		МассивИменФайловСОшибками.Добавить(Запись);
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка расширения файла.
	Если Не РаботаСФайламиСлужебный.ПроверитьРасширениеФайлаДляЗагрузки(Расширение, Ложь) Тогда
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Загрузка файлов с расширением ""%1"" запрещена (""%2"")."
"Обратитесь к администратору.'"),
			Расширение,
			Файл.Наименование);			
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
		Запись = Новый Структура;
		Запись.Вставить("ИмяФайла", Файл.Наименование);
		Запись.Вставить("Ошибка",   ОписаниеОшибки);
		
		МассивИменФайловСОшибками.Добавить(Запись);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции    // ПроверитьВозможностьЗагрузкиФайла()

// Формирует представление вложений.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - Форма.
//  Владелец - Ссылка - Владелец.
//
Процедура СформироватьПредставлениеВложений(Форма, Владелец) Экспорт
	
	Если Владелец.Пустая() Тогда
		Форма.ФайлыПредставление = НСтр("ru='Нет файлов...'");				
		Возврат;
	КонецЕсли;		
	
	ФайлыПредставление = "";
	Вложения = ПолучитьВсеПодчиненныеФайлы(Владелец);
	Для Каждого ЭлементТаблицы Из Вложения Цикл
		РазмерВложения = Цел(ЭлементТаблицы.Размер / 1024);
		РазмерСтрокой = ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(ЭлементТаблицы.Размер) + " байт");		
		ФайлыПредставление = ФайлыПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" + РазмерСтрокой + ")";
	КонецЦикла;
	Если ПустаяСтрока(ФайлыПредставление) Тогда
		Форма.ФайлыПредставление = НСтр("ru='Нет файлов...'");				
	Иначе
		Форма.ФайлыПредставление = Сред(ФайлыПредставление, 3);
	КонецЕсли;	
			
КонецПроцедуры // СформироватьПредставлениеВложений()			 

// +CRM
#Область БуферОбмена

// Процедура выплняет копирование файлов в буфер.
//
// Параметры:
//  МассивСсылокНаФайлы	 - Массив	 - массив ссылок на файлы.
//
Процедура СкопироватьФайлыВБуфер(МассивСсылокНаФайлы) Экспорт
		
	ОбщегоНазначения.СкопироватьВБуферОбмена(МассивСсылокНаФайлы, "КопированиеФайловЧерезБуферОбмена");
	
КонецПроцедуры

// Процедура выполняет вставку файлов из буфера.
//
// Параметры:
//  ГруппаФайлов	 - ОпределяемыйТип.ПрисоединенныйФайл - группа справочника с файлами, в которую
//  	будет добавлен новый файл.
//  ВладелецФайла	 - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - объект, к которому
//  	требуется прикрепить добавляемый файл.
//  СсылкаНаПоследнийФайл	 - ОпределяемыйТип.ПрисоединенныйФайл, Неопределено	 - ссылка на последний файл.
//
Процедура ВставитьФайлыИзБуфера(ГруппаФайлов, ВладелецФайла, СсылкаНаПоследнийФайл = Неопределено) Экспорт
	
	Если ОбщегоНазначения.ПустойБуферОбмена("КопированиеФайловЧерезБуферОбмена") Тогда Возврат; КонецЕсли;
	
	СодержимоеБуфера = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	МассивСсылокНаФайлы = СодержимоеБуфера.Данные;
	
	Для Каждого СсылкаНаФайл Из МассивСсылокНаФайлы Цикл
		
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(СсылкаНаФайл);
		
		ПараметрыФайла = РаботаСФайламиСлужебныйКлиентСервер.ПараметрыДобавленияФайла();
		ПараметрыФайла.ИмяБезРасширения = ДанныеФайла.Наименование;
		ПараметрыФайла.РасширениеБезТочки = ДанныеФайла.Расширение;
		ПараметрыФайла.ГруппаФайлов = ГруппаФайлов;
		ПараметрыФайла.ВладелецФайлов = ВладелецФайла;
		
		СсылкаНаПоследнийФайл = РаботаСФайлами.ДобавитьФайл(
			ПараметрыФайла,
			ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает "Истина", если буфер заполнен файлами.
// 
// Возвращаемое значение:
//   - Буфер
//
Функция БуферЗаполненФайлами() Экспорт
	Возврат НЕ ОбщегоНазначения.ПустойБуферОбмена("КопированиеФайловЧерезБуферОбмена");
КонецФункции

// Функция возвращает массив ссылок из буфера.
// 
// Возвращаемое значение:
//   - Массив
//
Функция МассивСсылокИзБуфера() Экспорт
	
	СодержимоеБуфера = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	МассивСсылокНаФайлы = СодержимоеБуфера.Данные;
	
	Возврат МассивСсылокНаФайлы;
	
КонецФункции

// Процедура-обработчик, выполняемый при создании формы списка файлов.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - Форма.
//
Процедура ПриСозданииФормыСпискаФайлов(Форма) Экспорт
	
	КП = Форма.Элементы.Найти("ФормаГруппаКомандОсновные");
	Если КП = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Команда = Форма.Команды.Добавить("CRM_ВставитьФайлИзБуфера");
	Команда.Действие = "Подключаемый_ВыполнитьКоманду";
	Команда.Заголовок = НСтр("ru = 'Вставить файл из буфера'");
	Команда.Картинка = БиблиотекаКартинок.ВставитьИзБуфераОбмена;
	Команда.Отображение = ОтображениеКнопки.Картинка;
	Команда.Подсказка = НСтр("ru = 'Вставить файл из буфера обмена'");

	Команда = Форма.Команды.Добавить("CRM_СкопироватьФайлВБуфер");
	Команда.Действие = "Подключаемый_ВыполнитьКоманду";
	Команда.Заголовок = НСтр("ru = 'Копировать файл в буфер'");
	Команда.Картинка = БиблиотекаКартинок.СкопироватьВБуферОбмена;
	Команда.Отображение = ОтображениеКнопки.Картинка;
	Команда.Подсказка = НСтр("ru = 'Копировать файл в буфер обмена'");
	
	Элемент = Форма.Элементы.Добавить("CRM_ВставитьФайлИзБуфера", Тип("КнопкаФормы"), КП);
	Элемент.ИмяКоманды = "CRM_ВставитьФайлИзБуфера";
			
	Элемент = Форма.Элементы.Добавить("CRM_СкопироватьФайлВБуфер", Тип("КнопкаФормы"), КП);
	Элемент.ИмяКоманды = "CRM_СкопироватьФайлВБуфер";
	
КонецПроцедуры

#КонецОбласти
// -CRM

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьВсеПодчиненныеФайлы(Знач ВладелецФайлов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИменаСправочников = РаботаСФайламиСлужебный.ИменаСправочниковХраненияФайлов(ВладелецФайлов);
	ТекстЗапросов = "";
	
	Для каждого КлючИЗначение Из ИменаСправочников Цикл
		Если ЗначениеЗаполнено(ТекстЗапросов) Тогда
			ТекстЗапросов = ТекстЗапросов + "
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|";
		КонецЕсли;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	ПрисоединенныеФайлы.Наименование КАК ИмяФайла,
		|	ПрисоединенныеФайлы.Размер КАК Размер
		|ИЗ
		|	&ИмяСправочника КАК ПрисоединенныеФайлы
		|ГДЕ
		|	ПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайлов
		|	И НЕ ПрисоединенныеФайлы.ПометкаУдаления";
		
		Если Метаданные.Справочники[КлючИЗначение.Ключ].Иерархический = Истина Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|	И Не ПрисоединенныеФайлы.ЭтоГруппа";
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", "Справочник." + КлючИЗначение.Ключ);
		ТекстЗапросов = ТекстЗапросов + ТекстЗапроса;
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапросов);
	Запрос.УстановитьПараметр("ВладелецФайлов", ВладелецФайлов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

#КонецОбласти
