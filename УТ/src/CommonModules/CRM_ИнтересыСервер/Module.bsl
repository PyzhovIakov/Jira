#Область ПрограммныйИнтерфейс

// Функция проверяет наличие объектов по Интересу.
//
// Параметры:
//  Интерес					 - ДокументСсылка	 - Интерес
//  СписокОбязательныхТипов	 - СписокЗначений	 - Список обязательных типов.
//  ТолькоПроведенные		 - Булево			 - Признак поиска только проведенных
// 
// Возвращаемое значение:
//  Массив - Массив ошибок
//
Функция ПроверкаНаличияОбъектовПоИнтересу(Интерес, СписокОбязательныхТипов, ТолькоПроведенные = Ложь) Экспорт
	РегНабор = РегистрыСведений.CRM_ЖурналДокументов.СоздатьНаборЗаписей();
	РегНабор.Отбор.CRM_Интерес.Установить(Интерес);
	РегНабор.Прочитать();
	МассивОшибок = Новый Массив;
	Для Каждого ЭлементСписка Из СписокОбязательныхТипов Цикл
		Если ТипЗнч(ЭлементСписка.Значение) = Тип("Тип") Тогда
			ИскомыйТип = ЭлементСписка.Значение;
		ИначеЕсли ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
			ИскомыйТип = ТипЗнч(ЭлементСписка.Значение.ЗначениеПустойСсылки);
		Иначе
			Продолжить;
		КонецЕсли;
		ЕстьОбъект = Ложь;
		Для Каждого СтрокаНабора Из РегНабор Цикл
			Если ТипЗнч(СтрокаНабора.Объект) = ИскомыйТип 
				И Не СтрокаНабора.Объект.ПометкаУдаления
				И (Не ТолькоПроведенные
					 Или (СтрокаНабора.Объект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить
					ИЛИ СтрокаНабора.Объект.Проведен)) Тогда
				ЕстьОбъект = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьОбъект Тогда
			МетаДокумента = Метаданные.НайтиПоТипу(ИскомыйТип);
			Синоним = МетаДокумента.Синоним;
			ТекстСообщения = НСтр("ru='Не введен документ %Синоним%. Действие невозможно выполнить!';
				|en='Document %Синоним% not enter. It is impossible to execute action!'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Синоним%", Синоним);
			МассивОшибок.Добавить(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивОшибок;
КонецФункции // ПроверкаНаличияОбъектовПоБизнесПроцессу()

// Функция рассчитывает ожидаемую дату продажи по Интересу.
//
// Параметры:
//  Интерес		- ДокументСсылка, ДокументОбъект	- Интерес
//  ЭтоПереход	- Булево			 				- Признак перехода.
// 
// Возвращаемое значение:
//  Дата - Ожидаемая дата продажи
//
Функция ПлановаяДатаПродажи(Интерес, ЭтоПереход = Истина) Экспорт
	
	ДатаНачала = ТекущаяДатаСеанса();
	Если НЕ ЭтоПереход Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	История.Период КАК Период
		                      |ИЗ
		                      |	РегистрСведений.CRM_ИсторияСостоянийОбращений.СрезПоследних(&ТекДата, Обращение = &Интерес) КАК История");
		Запрос.УстановитьПараметр("ТекДата", ДатаНачала);
		Запрос.УстановитьПараметр("Интерес", Интерес.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаНачала = Выборка.Период;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	CRM_СостоянияИнтересов.Ссылка КАК Состояние,
	                      |	CRM_СостоянияИнтересов.ОжидаемыйСрокНаЭтапе КАК ОжидаемыйСрок,
	                      |	CRM_СостоянияИнтересов.РеквизитДопУпорядочивания КАК Порядок,
	                      |	CRM_СостоянияИнтересов.Завершено КАК Завершено
	                      |ПОМЕСТИТЬ СостоянияБП
	                      |ИЗ
	                      |	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
	                      |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	                      |			ПО CRM_НастройкиЭтаповБизнесПроцессов.Состояние = CRM_СостоянияИнтересов.Ссылка
						  |				И CRM_СостоянияИнтересов.РеквизитДопУпорядочивания >= &Порядок
	                      |		ПО CRM_БизнесПроцесс.Ссылка = CRM_НастройкиЭтаповБизнесПроцессов.Объект
	                      |ГДЕ
	                      |	НЕ CRM_БизнесПроцесс.ПометкаУдаления
	                      |	И НЕ CRM_БизнесПроцесс.Завершен
	                      |	И CRM_БизнесПроцесс.Интерес = &Интерес
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СУММА(СостоянияБП.ОжидаемыйСрок) КАК ОжидаемыйСрок,
	                      |	МАКСИМУМ(СостоянияБП.Порядок) КАК Порядок,
	                      |	МАКСИМУМ(СостоянияБП.Завершено) КАК Завершено
	                      |ИЗ
	                      |	СостоянияБП КАК СостоянияБП");
	Запрос.УстановитьПараметр("Порядок", Интерес.СостояниеИнтереса.РеквизитДопУпорядочивания);
	Запрос.УстановитьПараметр("Интерес", Интерес.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Порядок) Тогда
		Длительность = Выборка.ОжидаемыйСрок;
		Порядок = Выборка.Порядок;
		Завершено = Выборка.Завершено;
	Иначе
		Длительность = Интерес.СостояниеИнтереса.ОжидаемыйСрокНаЭтапе;
		Порядок = Интерес.СостояниеИнтереса.РеквизитДопУпорядочивания;
		Завершено = Интерес.СостояниеИнтереса.Завершено;
	КонецЕсли;
	
	Если Не Завершено Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	СУММА(CRM_СостоянияИнтересов.ОжидаемыйСрокНаЭтапе) КАК ОжидаемыйСрок
		               |ИЗ
		               |	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
		               |ГДЕ
		               |	CRM_СостоянияИнтересов.РеквизитДопУпорядочивания > &Порядок
		               |	И CRM_СостоянияИнтересов.Родитель = &Сценарий
		               |	И CRM_СостоянияИнтересов.Используется
		               |	И НЕ CRM_СостоянияИнтересов.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Порядок", Порядок);
		Запрос.УстановитьПараметр("Сценарий", Интерес.СостояниеИнтереса.Родитель);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ОжидаемыйСрок) Тогда
			Длительность = Длительность + Выборка.ОжидаемыйСрок;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Длительность) Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	СУММА(CRM_СостоянияИнтересов.ОжидаемыйСрокНаЭтапе) КАК ОжидаемыйСрок
		               |ИЗ
		               |	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
		               |ГДЕ
		               |	CRM_СостоянияИнтересов.Родитель = &Сценарий
		               |	И CRM_СостоянияИнтересов.Используется
		               |	И НЕ CRM_СостоянияИнтересов.ПометкаУдаления";
		Запрос.УстановитьПараметр("Сценарий", Интерес.СостояниеИнтереса.Родитель);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ОжидаемыйСрок) Тогда
			Возврат ДатаНачала;
		КонецЕсли;
		Возврат Дата(1, 1, 1);
	КонецЕсли;
	
	Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	ОжидаемаяДатаПродажи = CRM_КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, ДатаНачала,
		 Длительность, Ложь,
		 Истина);
	
	Если ОжидаемаяДатаПродажи = Неопределено Тогда
		ОжидаемаяДатаПродажи = ДатаНачала + Длительность * 86400;
	КонецЕсли;
	
	Возврат ОжидаемаяДатаПродажи;
КонецФункции

// Функция рассчитывает срок нахождения на текущем этапе Интереса.
//
// Параметры:
//  Интерес	- ДокументСсылка	- Интерес
// 
// Возвращаемое значение:
//  Число - Продолжительность нахождения в текущем состоянии в днях
//
Функция СрокНаТекущемЭтапе(Интерес) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КОЛИЧЕСТВО(КалендарныеГрафики.ДатаГрафика) КАК СрокНаЭтапе
	                      |ИЗ
	                      |	РегистрСведений.CRM_ИсторияСостоянийОбращений.СрезПоследних(&ТекущаяДата, Обращение = &Интерес) КАК CRM_ИсторияСостоянийОбращенийСрезПоследних
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	                      |		ПО CRM_ИсторияСостоянийОбращенийСрезПоследних.Период <= КалендарныеГрафики.ДатаГрафика
	                      |			И (КалендарныеГрафики.ДеньВключенВГрафик)
	                      |			И (КалендарныеГрафики.ДатаГрафика <= &ТекущаяДата)
	                      |			И (КалендарныеГрафики.Календарь = &Календарь)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	CRM_ИсторияСостоянийОбращенийСрезПоследних.Состояние.ОжидаемыйСрокНаЭтапе");
	
	Запрос.УстановитьПараметр("Интерес", Интерес);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Календарь", Константы.ОсновнойКалендарьПредприятия.Получить());
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СрокНаЭтапе;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Функция рассчитывает прододжительность нахождения на этапах Интереса в рабочих днях.
//
// Параметры:
//  Интерес	- ДокументСсылка	- Интерес
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица состояний интереса с датой переходя на этап и продолжительностью этапа в рабочих днях.
//
Функция СрокиНаЭтапах(Интерес) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КОЛИЧЕСТВО(КалендарныеГрафики.ДатаГрафика) КАК СрокНаЭтапе,
	                      |	CRM_ИсторияСостоянийОбращений.Состояние КАК Состояние,
	                      |	CRM_ИсторияСостоянийОбращений.Период КАК ДатаПерехода
	                      |ИЗ
	                      |	РегистрСведений.CRM_ИсторияСостоянийОбращений КАК CRM_ИсторияСостоянийОбращений
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	                      |		ПО CRM_ИсторияСостоянийОбращений.Период <= КалендарныеГрафики.ДатаГрафика
	                      |			И (КалендарныеГрафики.ДеньВключенВГрафик)
	                      |			И (ВЫБОР
	                      |				КОГДА CRM_ИсторияСостоянийОбращений.ДатаЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	                      |					ТОГДА КалендарныеГрафики.ДатаГрафика <= CRM_ИсторияСостоянийОбращений.ДатаЗавершения
	                      |				ИНАЧЕ КалендарныеГрафики.ДатаГрафика <= &ТекущаяДата
	                      |			КОНЕЦ)
	                      |			И (КалендарныеГрафики.Календарь = &Календарь)
	                      |ГДЕ
	                      |	CRM_ИсторияСостоянийОбращений.Обращение = &Интерес
	                      |	И НЕ CRM_ИсторияСостоянийОбращений.Состояние.Завершено
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	CRM_ИсторияСостоянийОбращений.Состояние.ОжидаемыйСрокНаЭтапе,
	                      |	CRM_ИсторияСостоянийОбращений.Состояние,
	                      |	CRM_ИсторияСостоянийОбращений.Период
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ДатаПерехода");
	
	Запрос.УстановитьПараметр("Интерес", Интерес);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Календарь", Константы.ОсновнойКалендарьПредприятия.Получить());
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

// Процедура создает автоматические взаимодействия по интересу
//
// Параметры:
//  Интерес							 - ДокументСсылка.CRM_Интерес	 - Ссылка на документ "Интерес".
//  СостояниеИнтереса				 - СправочникСсылка.CRM_СостоянияИнтересов	 - Состояние интереса.
//  Автор							 - СправочникСсылка.Пользователи	 - Автор докумнета.
//  ИсключаемыеВидыВзаимодействия	 - Массив, Неопределено		 - Массив исключаемых видов взаимодействий.
//
Процедура СоздатьАвтоВзаимодействияПоИнтересу(Интерес, СостояниеИнтереса,
		Автор, ИсключаемыеВидыВзаимодействия = Неопределено) Экспорт

		МассивВидовВзаимодействий =
			Справочники.CRM_ВидыВзаимодействий.ПолучитьАвтоСоздаваемыеПоСостояниюИнтереса(СостояниеИнтереса);
		Если МассивВидовВзаимодействий.Количество() > 0 Тогда
			Для каждого ВидНовогоВзаимодействия Из МассивВидовВзаимодействий Цикл
				Если ИсключаемыеВидыВзаимодействия <> Неопределено
					И ИсключаемыеВидыВзаимодействия.Найти(ВидНовогоВзаимодействия) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ПлановаяДата = ТекущаяДатаСеанса() + ВидНовогоВзаимодействия.ПлановыйСрокДней * 60 * 60 * 24;
				НовоеВзаимодействие = Документы.CRM_Взаимодействие.СоздатьДокумент();
				НовоеВзаимодействие.Тема					= ВидНовогоВзаимодействия.Описание;
				НовоеВзаимодействие.ВидВзаимодействия		= ВидНовогоВзаимодействия;
				НовоеВзаимодействие.Тема					= ВидНовогоВзаимодействия.Описание;
				НовоеВзаимодействие.ДокументОснование		= Интерес.Ссылка;
				НовоеВзаимодействие.СтатусВзаимодействия	= Справочники.CRM_СостоянияСобытий.Запланировано;
				НовоеВзаимодействие.Партнер					= Интерес.Партнер;
				НовоеВзаимодействие.КонтактноеЛицо			= Интерес.КонтактноеЛицо;
				НовоеВзаимодействие.Подразделение			= Интерес.Подразделение;
				НовоеВзаимодействие.Автор					= Автор;
				НовоеВзаимодействие.Дата					= ТекущаяДатаСеанса();
				НовоеВзаимодействие.Баллы					= ВидНовогоВзаимодействия.Баллы;
				НовоеВзаимодействие.ПлановаяДата			= ПлановаяДата;
				НовоеВзаимодействие.Ответственный			= Интерес.Ответственный;
				НовоеВзаимодействие.Организация				= Интерес.Организация;
				НовоеВзаимодействие.ПотенциальныйКлиент		= Интерес.ПотенциальныйКлиент;
				НовоеВзаимодействие.НаВесьДень = (НовоеВзаимодействие.ПлановаяДата = НачалоДня(НовоеВзаимодействие.ПлановаяДата));
				НовоеВзаимодействие.Записать();
			КонецЦикла;
		КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
