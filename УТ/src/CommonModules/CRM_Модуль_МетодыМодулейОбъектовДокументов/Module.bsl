
////////////////////////////////////////////////////////////////////////////////
// В данный модуль вынесены методы подсистемы CRM, вызываемые из модулей типовых объектов. 
// Выносить можно только те методы, которые не вызывают стандартные методы типового модуля или обработчики форм. 
// Т.е. вызывают только те методы, что тоже вынесены из типового или не содержат таких вызовов.
// Для каждого объекта необходимо задать свою #Область с именем объекта и модуля, как он называется в метаданных.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область Документ_CRM_Интерес_МодульОбъекта

#Область ПрограммныйИнтерфейс

// Заполняет условия продаж (из коммерческого предложения)
//
// Параметры:
//	ИнтересОбъект	- ДокументОбъект	- Интерес.
//	УсловияПродаж	- Структура 		- Структура для заполнения.
//
Процедура ИнтересЗаполнитьУсловияПродаж(ИнтересОбъект, Знач УсловияПродаж) Экспорт
	
	ИнтересОбъект.ЗаполнитьУсловияПродаж(УсловияПродаж);
		
КонецПроцедуры

// Заполняет условия продаж по умолчанию (из коммерческого предложения)
//
// Параметры:
//	ИнтересОбъект	- ДокументОбъект	- Интерес.
//
Процедура ИнтересЗаполнитьУсловияПродажПоУмолчанию(ИнтересОбъект) Экспорт
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(ИнтересОбъект.Партнер, ИнтересОбъект.КонтактноеЛицо);
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	Партнер = ?(ЗначениеЗаполнено(ИнтересОбъект.Партнер),
	ИнтересОбъект.Партнер, Справочники.Партнеры.РозничныйПокупатель);
	
	УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
	Партнер,
	Новый Структура("УчитыватьГруппыСкладов,ВыбранноеСоглашение,ПустаяСсылкаДокумента", 
	Истина,
	ИнтересОбъект.Соглашение,
	Документы.CRM_Интерес.ПустаяСсылка()));
	
	Если УсловияПродажПоУмолчанию <> Неопределено Тогда
		
		ИнтересОбъект.Соглашение = УсловияПродажПоУмолчанию.Соглашение;
		ИнтересЗаполнитьУсловияПродаж(ИнтересОбъект, УсловияПродажПоУмолчанию);
		
		ПараметрыЗаполнения = CRM_Модуль_МетодыМодулейМенеджеровДокументов.ИнтересПараметрыЗаполненияНалогообложенияНДСПродажи(ИнтересОбъект);
		УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(ИнтересОбъект.НалогообложениеНДС, ПараметрыЗаполнения);
		
		Если ИспользоватьСоглашенияСКлиентами Тогда
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ИнтересОбъект);
			
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("Дата", ИнтересОбъект.Дата);
			ПараметрыЗаполнения.Вставить("Валюта", ИнтересОбъект.Валюта);
			ПараметрыЗаполнения.Вставить("Соглашение", ИнтересОбъект.Соглашение);
			ПараметрыЗаполнения.Вставить("НалогообложениеНДС", ИнтересОбъект.НалогообложениеНДС);
			ПараметрыЗаполнения.Вставить("РассчитыватьНаборы", Истина);
			ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, СтавкаНДС, ВидЦены");
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоУпаковок");
			СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку", Неопределено);
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			
			ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(
			ИнтересОбъект.Товары, // Табличная часть
			, // Массив строк или структура отбора
			ПараметрыЗаполнения,
			СтруктураДействий);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж по соглашению в коммерческом предложении клиенту
//
// Параметры:
//	ИнтересОбъект	- ДокументОбъект	- Интерес.
//
Процедура ИнтересЗаполнитьУсловияПродажПоСоглашению(ИнтересОбъект) Экспорт
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(ИнтересОбъект.Соглашение, Истина);
	ИнтересЗаполнитьУсловияПродаж(ИнтересОбъект, УсловияПродаж);
	МетаданныеОбъекта = ИнтересОбъект.Метаданные();
	Если ЗначениеЗаполнено(УсловияПродаж.Склад) Тогда
		Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Склад", МетаданныеОбъекта) Тогда
			ИнтересОбъект.Склад = УсловияПродаж.Склад;
		КонецЕсли;
		Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитТабличнойЧастиОбъекта("Склад", МетаданныеОбъекта, "Товары") Тогда
			Для Каждого Строка Из ИнтересОбъект.Товары Цикл
				Строка.Склад = УсловияПродаж.Склад;
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;
	ПараметрыЗаполнения = CRM_Модуль_МетодыМодулейМенеджеровДокументов.ИнтересПараметрыЗаполненияНалогообложенияНДСПродажи(ИнтересОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(ИнтересОбъект.НалогообложениеНДС, ПараметрыЗаполнения);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ИнтересОбъект);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата", ИнтересОбъект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", ИнтересОбъект.Валюта);
	ПараметрыЗаполнения.Вставить("Соглашение", ИнтересОбъект.Соглашение);
	ПараметрыЗаполнения.Вставить("НалогообложениеНДС", ИнтересОбъект.НалогообложениеНДС);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, СтавкаНДС, ВидЦены");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку", Неопределено);
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(
		ИнтересОбъект.Товары, // Табличная часть
		, // Массив строк или структура отбора
		ПараметрыЗаполнения, // Массив строк или структура отбора
		СтруктураДействий);
			
	
КонецПроцедуры
	
// Заполняет реквизиты в интересе
//
// Параметры:
//	ИнтересОбъект		- ДокументОбъект	- Интерес.
//	ДанныеЗаполнения	- Структура			- Структура данных для заполнения.
//
Процедура ИнтересИнициализироватьДокумент(ИнтересОбъект, ДанныеЗаполнения = Неопределено) Экспорт
	
	ИнтересОбъект.Валюта = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(ИнтересОбъект.Валюта);
	
	ПараметрыЗаполнения = CRM_Модуль_МетодыМодулейМенеджеровДокументов.ИнтересПараметрыЗаполненияНалогообложенияНДСПродажи(ИнтересОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(ИнтересОбъект.НалогообложениеНДС, ПараметрыЗаполнения);
	
КонецПроцедуры

// Заполняет условия продаж по соглашению в интересе
//
// Параметры:
//	ИнтересОбъект	- ДокументОбъект	- Интерес.
//
Процедура ИнтересИнициализироватьУсловияПродаж(ИнтересОбъект) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		ИнтересЗаполнитьУсловияПродажПоУмолчанию(ИнтересОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты в интересе
//
// Параметры:
//	ИнтересОбъект - ДокументОбъект - Интерес.
//	ЗаполнятьПоУмолчаниюБезСоглашений - Булево - признак заполнения без соглашений
//
Процедура ИнтересЗаполнитьРеквизитыДокумента(ИнтересОбъект, ЗаполнятьПоУмолчаниюБезСоглашений = Истина) Экспорт
	
	Если ЗаполнятьПоУмолчаниюБезСоглашений Тогда
		ИнтересИнициализироватьУсловияПродаж(ИнтересОбъект);
	КонецЕсли;
	
	ИнтересИнициализироватьДокумент(ИнтересОбъект);
	
КонецПроцедуры

// Заполняет организация в документе
//
// Параметры:
//	ДокументОбъект	- ДокументОбъект	- Документ.
//
Процедура ЗаполнитьОрганизацию(ДокументОбъект) Экспорт
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.CRM_Интерес")
		ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДанныеФормыСтруктура")
		ИЛИ ТипЗнч(ДокументОбъект) = Тип("Структура") Тогда
		
		ЗначенияРеквизитовРодителей = Новый Структура("Автор", Пользователи.АвторизованныйПользователь());
		
		ПараметрыСбораСтатистики = Новый Структура;
		ПараметрыСбораСтатистики.Вставить("РазмерВыборки", 5);
		ПараметрыСбораСтатистики.Вставить("ЧастотаИспользованияЗначения", 0.5);
		
		СсылкаНаДокументОбъект = Неопределено;
		ИмяОбъектаМетаданныхДокументОбъект = "";
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "Ссылка") Тогда
			СсылкаНаДокументОбъект = ДокументОбъект.Ссылка;
			ИмяОбъектаМетаданныхДокументОбъект = СсылкаНаДокументОбъект.Метаданные().ПолноеИмя();
		Иначе
			СсылкаНаДокументОбъект = Документы.CRM_Интерес.СоздатьДокумент().Ссылка;
			ИмяОбъектаМетаданныхДокументОбъект = "Документ.CRM_Интерес";
		КонецЕсли;
		
		ДокументОбъект.Организация = ЗаполнениеОбъектовПоСтатистикеСлужебный.ЗначениеРеквизитаПоСтатистике(
			СсылкаНаДокументОбъект, ИмяОбъектаМетаданныхДокументОбъект,
			"Организация", ЗначенияРеквизитовРодителей,
			ПараметрыСбораСтатистики.ЧастотаИспользованияЗначения, ПараметрыСбораСтатистики.РазмерВыборки);
			
	КонецЕсли;
	ДокументОбъект.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(ДокументОбъект.Организация);
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область ОбновлениеНаНовыйИнтерфейс

// Заполняет интерес по ранее созданному интересу
//
// Параметры:
//	ИнтересСсылка	- ДокументСсылка	- Интерес.
//
Процедура ЗаполнитьРанееСозданныйИнтерес(ИнтересСсылка) Экспорт
	
	ИнтересОбъект = ИнтересСсылка.ПолучитьОбъект();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		Если ЗначениеЗаполнено(ИнтересОбъект.Соглашение) Тогда
			ИнтересЗаполнитьУсловияПродажПоСоглашению(ИнтересОбъект);
		Иначе
			ИнтересЗаполнитьУсловияПродажПоУмолчанию(ИнтересОбъект);
		КонецЕсли;
	Иначе
		 ИнтересЗаполнитьУсловияПродажПоУмолчанию(ИнтересОбъект);
	КонецЕсли;
	
	ИнтересИнициализироватьДокумент(ИнтересОбъект);
	
	ИнтересОбъект.Записать();
			
КонецПроцедуры // ЗаполнитьРанееСозданныйИнтерес(ИнтересСсылка) Экспорт
				
#КонецОбласти// ОбновлениеНаНовыйИнтерфейс				

#КонецОбласти // Документ_CRM_Интерес_МодульОбъекта

// Процедура - обработчик события "ПередЗаписью"
//
// Параметры:
//	Источник		- ДокументОбъект			- Документ.
//	Отказ			- Булево					- Признак отказа.
//	РежимЗаписи		- РежимЗаписиДокумента		- Режим записи документа.
//	РежимПроведения	- РежимПроведенияДокумента	- Режим проведения документа.
//
Процедура ДокументыПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	#Область КоммерческоеПредложениеКлиенту
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") Тогда
		
		// заполним итоговый реквизит СуммаДокумента
		
		УтвержденныеТовары = Источник.Товары.Выгрузить(Новый Структура("CRM_Утвержден", Истина));
		
		Если УтвержденныеТовары.Количество() > 0 Тогда
			
			Источник.СуммаДокумента = УтвержденныеТовары.Итог("СуммаСНДС");
		
		Иначе
			
			Источник.СуммаДокумента = 0;
			
		КонецЕсли;	
			
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

// Процедура - обработчик события "ПриКопировании"
//
// Параметры:
//	Источник		- ДокументОбъект			- Документ.
//	ПриКопировании	- Булево					- Признак копирования.
//
Процедура ДокументыПриКопировании(Источник, ПриКопировании) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	#Область КоммерческоеПредложениеКлиенту
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") Тогда
		
//		Источник.Согласован               = Ложь;
		Источник.Статус                   = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Черновик;
		Источник.СрокДействия             = '00010101';
		Источник.ДокументОснование        = Неопределено;
		Источник.УдалитьДокументОснование = Неопределено;
		Источник.СкидкиРассчитаны         = Ложь;
//		СкидкиНаценкиСервер.ОтменитьСкидки(Источник, "Товары", Истина,,Истина);
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

// Функция возвращает последнее соглашение с партнером.
//
// Параметры:
//	Партнер	- СправочникСсылка	- Партнер.
//
// Возвращаемое значение:
//	СправочникСсылка	- Последнее соглашение с партнером. 
//
Функция ВернутьПоследнееСоглашение(Партнер) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	CRM_Интерес.Ссылка КАК Ссылка,
	               |	CRM_Интерес.Дата КАК Дата,
	               |	CRM_Интерес.Соглашение КАК Соглашение
	               |ПОМЕСТИТЬ тмпДок
	               |ИЗ
	               |	Документ.CRM_Интерес КАК CRM_Интерес
	               |ГДЕ
	               |	CRM_Интерес.Партнер = &Партнер
	               |	И НЕ CRM_Интерес.ПометкаУдаления
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказКлиента.Ссылка,
	               |	ЗаказКлиента.Дата,
	               |	ЗаказКлиента.Соглашение
	               |ИЗ
	               |	Документ.ЗаказКлиента КАК ЗаказКлиента
	               |ГДЕ
	               |	ЗаказКлиента.Партнер = &Партнер
	               |	И НЕ ЗаказКлиента.ПометкаУдаления
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Ссылка,
	               |	РеализацияТоваровУслуг.Дата,
	               |	РеализацияТоваровУслуг.Соглашение
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Партнер = &Партнер
	               |	И НЕ РеализацияТоваровУслуг.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	тмпДок.Ссылка КАК Ссылка,
	               |	тмпДок.Дата КАК Дата,
	               |	тмпДок.Соглашение КАК Соглашение
	               |ИЗ
	               |	тмпДок КАК тмпДок
	               |ГДЕ
	               |	тмпДок.Соглашение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата УБЫВ";	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	ТабДокументов = Запрос.Выполнить().Выгрузить();
	ТабДокументов.Сортировать("Дата УБЫВ");
	Если ТабДокументов.Количество() > 0 Тогда
		Возврат ТабДокументов[0].Соглашение;
	Иначе
		Возврат Справочники.СоглашенияСКлиентами.ПустаяСсылка();
	КонецЕсли;	
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс
