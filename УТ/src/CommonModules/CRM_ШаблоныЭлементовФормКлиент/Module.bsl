////////////////////////////////////////////////////////////////////////////////
// Механизм создания элементов форм по шаблону
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает описание формы
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма - владелец
//  ИмяШаблонаЭлементов	 - Строка						 - Имя формы шаблона
//  Параметры			 - Структура					 - Параметры формы
// 
// Возвращаемое значение:
//  Структура - Описание формы
//
Функция ОписаниеФормы(Форма, ИмяШаблонаЭлементов, Параметры) Экспорт
	
	ФормаШаблона = ПолучитьФорму(ИмяШаблонаЭлементов, Параметры, Форма, Истина);
	Отказ = Ложь;
	ФормаШаблона.ПриОткрытии(Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АдресОписанияФормыШаблона = ФормаШаблона.ОписаниеФормы();
	
	Возврат Новый Структура("ФормаШаблона, АдресОписанияФормыШаблона", ФормаШаблона, АдресОписанияФормыШаблона);
	
КонецФункции

// Обновляет элементы формы
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма в которой требуется обновить элементы
//  ИмяГруппыОбновления	 - 	Строка - Имя группы, в которой требуется обновить элементы
//
Процедура ОбновитьЭлементыФормы(Форма, ИмяГруппыОбновления) Экспорт
	ИдентификаторШаблона = Прав(ИмяГруппыОбновления, 37);
	Форма.ШаблоныЭлементов_ОбновитьЭлементы(ИдентификаторШаблона, ИмяГруппыОбновления);
КонецПроцедуры

// Актуализирует данные формы
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма, для которой требуется актуализировать элементы
//  ФормаШаблона - ФормаКлиентскогоПриложения	 - Форма шаблона								 -
//
Процедура АктуализироватьДанныеФормы(Форма, ФормаШаблона) Экспорт
	Если Форма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Для каждого СтрОписания Из Форма["ШаблоныЭлементов_ОписаниеЭлементов" + ФормаШаблона.ИдентификаторФормыСтрокой] Цикл
		Если ЗначениеЗаполнено(СтрОписания.ПутьКДанным) Тогда
			Попытка
				Подстроки = СтрРазделить(СтрОписания.ПутьКДанным, ".");
				Если Подстроки.Количество() = 1 Тогда
					Форма[СтрОписания.ПутьКДанным + ФормаШаблона.ИдентификаторФормыСтрокой] = ФормаШаблона[СтрОписания.ПутьКДанным];
				Иначе
					Форма[Подстроки[0] 
						+ ФормаШаблона.ИдентификаторФормыСтрокой][Подстроки[1]] = ФормаШаблона[Подстроки[0]][Подстроки[1]];
				КонецЕсли;
			Исключение
				// BSLLS:UnusedLocalVariable-off
				ПеременнаяХ = 1; // Отсутствует код в блоке "Исключение"
				// BSLLS:UnusedLocalVariable-on
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Установливает свойство элемента
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  Элемент	 - ЭлементФормы					 - Элемент формы
//  Свойство - Строка						 - имя устанавливаемого свойства элемента формы
//  Значение - Произвольный					 - новое значение свойства элемента формы
//
Процедура УстановитьСвойствоЭлемента(Форма, Элемент, Свойство, Значение) Экспорт
	Элемент[Свойство] = Значение;
	Если Форма.ВладелецФормы <> Неопределено Тогда
		ЭлементФормы = Форма.ВладелецФормы.Элементы.Найти(Элемент.Имя + Форма.ИдентификаторФормыСтрокой);
		Если ЭлементФормы <> Неопределено Тогда
			ЭлементФормы[Свойство] = Значение;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Получает свойство элемента
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  Элемент	 - ЭлементФормы					 - Элемент формы
//  Свойство - Строка						 - имя устанавливаемого свойства элемента формы
// 
// Возвращаемое значение:
//  Произвольный - значение свойства элемента формы
//
Функция СвойствоЭлемента(Форма, Элемент, Свойство) Экспорт
	Если Форма.ВладелецФормы <> Неопределено Тогда
		ЭлементФормы = Форма.ВладелецФормы.Элементы.Найти(Элемент.Имя + Форма.ИдентификаторФормыСтрокой);
		Если ЭлементФормы <> Неопределено Тогда
			Возврат ЭлементФормы[Свойство];
		КонецЕсли;
	КонецЕсли;
	Возврат Элемент[Свойство];
КонецФункции

// Показывает всплывающую группу
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  Элемент	 - ЭлементФормы					 - Элемент формы
//
Процедура ПоказатьВсплывающуюГруппу(Форма, Элемент) Экспорт
	Если Форма.ВладелецФормы <> Неопределено Тогда
		ЭлементФормы = Форма.ВладелецФормы.Элементы.Найти(Элемент.Имя + Форма.ИдентификаторФормыСтрокой);
		Если ЭлементФормы <> Неопределено Тогда
			ЭлементФормы.Показать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Скрывает всплывающую группу
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  Элемент	 - ЭлементФормы					 - Элемент формы
//
Процедура СкрытьВсплывающуюГруппу(Форма, Элемент) Экспорт
	Если Форма.ВладелецФормы <> Неопределено Тогда
		ЭлементФормы = Форма.ВладелецФормы.Элементы.Найти(Элемент.Имя + Форма.ИдентификаторФормыСтрокой);
		Если ЭлементФормы <> Неопределено Тогда
			ЭлементФормы.Скрыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Проверяет скрыта всплывающая группа или нет
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  Элемент	 - ЭлементФормы					 - Элемент формы
// 
// Возвращаемое значение:
//  Булево - Состояние группы
//
Функция СкрытаВсплывающаяГруппа(Форма, Элемент) Экспорт
	
	Если Форма.ВладелецФормы <> Неопределено Тогда
		ЭлементФормы = Форма.ВладелецФормы.Элементы.Найти(Элемент.Имя + Форма.ИдентификаторФормыСтрокой);
		Если ЭлементФормы <> Неопределено Тогда
			Возврат ЭлементФормы.Скрыта();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Устанавливает текущий элемент формы
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  Элемент	 - ЭлементФормы					 - Элемент формы
//
Процедура УстановитьТекущийЭлемент(Форма, Элемент) Экспорт
	Если Форма.ВладелецФормы <> Неопределено Тогда
		ЭлементФормы = Форма.ВладелецФормы.Элементы.Найти(Элемент.Имя + Форма.ИдентификаторФормыСтрокой);
		Если ЭлементФормы <> Неопределено Тогда
			Форма.ВладелецФормы.ТекущийЭлемент = ЭлементФормы;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Перемещает элемент формы
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  Элемент				 - ЭлементФормы					 - Элемент формы
//  Родитель			 - ЭлементФормы					 - Элемент формы
//  МестоРасположения	 - ЭлементФормы					 - Элемент формы
//
Процедура ПереместитьЭлемент(Форма, Элемент, Родитель, МестоРасположения = Неопределено) Экспорт
	Форма.Элементы.Переместить(Элемент, Родитель, МестоРасположения);
	Если Форма.ВладелецФормы <> Неопределено Тогда
		ЭлементФормы = Форма.ВладелецФормы.Элементы.Найти(Элемент.Имя + Форма.ИдентификаторФормыСтрокой);
		ГруппаФормы = Форма.ВладелецФормы.Элементы.Найти(Родитель.Имя + Форма.ИдентификаторФормыСтрокой);
		Место = Неопределено;
		Если МестоРасположения <> Неопределено Тогда
			Место = Форма.ВладелецФормы.Элементы.Найти(Место.Имя + Форма.ИдентификаторФормыСтрокой);
		КонецЕсли;
		Если ЭлементФормы <> Неопределено И ГруппаФормы <> Неопределено Тогда
			Форма.Элементы.Переместить(ЭлементФормы, ГруппаФормы, Место);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	

#Область ДействияЭлементов

// Выполняет обновление значения реквизита 
//
// Параметры:
//  ФормаШаблона - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//  ИмяРеквизита - Строка	 - Имя реквизита формы
//  НовоеЗначение - Произвольный	 - Новое значение реквизита
//
Процедура ОбновитьЗначениеРеквизита(ФормаШаблона, ИмяРеквизита, НовоеЗначение) Экспорт
	
	ФормаШаблона[ИмяРеквизита] = НовоеЗначение;
	
КонецПроцедуры

// Выполняет команду формы
//
// Параметры:
//  Команда		 - КомандаФормы					 - Выполняемая команда
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура ВыполнитьКоманду(Команда, Форма, ФормаШаблона) Экспорт
	
	ИдентификаторФормыСтрокой = ФормаШаблона.ИдентификаторФормыСтрокой;
	ИмяКоманды = СтрЗаменить(Команда.Имя, ИдентификаторФормыСтрокой, "");
	КомандаШаблона = ФормаШаблона.Команды.Найти(ИмяКоманды);
	Если КомандаШаблона = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ФормаШаблона.Подключаемый_ШаблоныЭлементов_ВыполнитьКоманду(Команда, КомандаШаблона.Действие);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ШаблоныЭлементов_ОписаниеЭлементов" 
		+ ИдентификаторФормыСтрокой) Тогда 
		АктуализироватьДанныеФормы(Форма, ФормаШаблона);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "При изменении" элемента формы
//
// Параметры:
//  Элемент		 - ЭлементФормы					 - Элемент формы
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура ПриИзменении(Элемент, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "ПриИзменении");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_ПриИзменении(Элемент, ИмяМетода);
		АктуализироватьДанныеФормы(Форма, ФормаШаблона);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Начало выбора" элемента формы
//
// Параметры:
//  Элемент				 - ЭлементФормы			 - Элемент формы
//  ДанныеВыбора		 - СписокЗначений		 - параметр данных выбора;
//  СтандартнаяОбработка - Булево				 - Признак выполнения стандартной (системной) обработки события
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона		 - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "НачалоВыбора");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Начало выбора из списка" элемента формы
//
// Параметры:
//  Элемент				 - ЭлементФормы			 - Элемент формы
//  СтандартнаяОбработка - Булево				 - Признак выполнения стандартной (системной) обработки события
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона		 - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "НачалоВыбора");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка, ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Очистка" элемента формы
//
// Параметры:
//  Элемент				 - ЭлементФормы			 - Элемент формы
//  СтандартнаяОбработка - Булево				 - Признак выполнения стандартной (системной) обработки события
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона		 - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура Очистка(Элемент, СтандартнаяОбработка, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "Очистка");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_Очистка(Элемент, СтандартнаяОбработка, ИмяМетода);
		АктуализироватьДанныеФормы(Форма, ФормаШаблона);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Регулирование" элемента формы
//
// Параметры:
//  Элемент				 - ЭлементФормы			 - Элемент формы
//  Направление			 - Число				 - Направление регулирования
//  СтандартнаяОбработка - Булево				 - Признак выполнения стандартной (системной) обработки события
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона		 - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура Регулирование(Элемент, Направление, СтандартнаяОбработка, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "Регулирование");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_Регулирование(Элемент, Направление, СтандартнаяОбработка, ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Открытие" элемента формы
//
// Параметры:
//  Элемент				 - ЭлементФормы			 - Элемент формы
//  СтандартнаяОбработка - Булево				 - Признак выполнения стандартной (системной) обработки события
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона		 - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура Открытие(Элемент, СтандартнаяОбработка, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "Открытие");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_Открытие(Элемент, СтандартнаяОбработка, ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Создание" элемента формы
//
// Параметры:
//  Элемент				 - ЭлементФормы			 - Элемент формы
//  СтандартнаяОбработка - Булево				 - Признак выполнения стандартной (системной) обработки события
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона		 - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура Создание(Элемент, СтандартнаяОбработка, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "Создание");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_Создание(Элемент, СтандартнаяОбработка, ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Обработка выбора" элемента формы
//
// Параметры:
//  Элемент				 - ЭлементФормы			 - Элемент формы
//  ВыбранноеЗначение	 - Произвольный			 - Выбранное значение
//  СтандартнаяОбработка - Булево				 - Признак выполнения стандартной (системной) обработки события
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона		 - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "ОбработкаВыбора");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_ОбработкаВыбора(Элемент, ВыбранноеЗначение,
			 СтандартнаяОбработка,
			 ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Изменение текста редактирования" элемента формы
//
// Параметры:
//  Элемент				 - ЭлементФормы			 - Элемент формы
//  Текст				 - Строка				 - Текст редактирования
//  СтандартнаяОбработка - Булево				 - Признак выполнения стандартной (системной) обработки события
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона		 - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура ИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "ИзменениеТекстаРедактирования");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_ИзменениеТекстаРедактирования(Элемент, Текст,
			 СтандартнаяОбработка,
			 ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Авто подбор" элемента формы
//
// Параметры:
//  Элемент					 - ЭлементФормы				 - Элемент формы
//  Текст					 - Строка					 - Текст редактирования
//  ДанныеВыбора			 - СписокЗначений			 - Параметр данных выбора;
//  ПараметрыПолученияДанных - Структура, Неопределено	 - Параметры поиска
//  Ожидание				 - Число					 - Интервал ожидания
//  СтандартнаяОбработка	 - Булево					 - Признак выполнения стандартной (системной) обработки события
//  Форма					 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона			 - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
	 СтандартнаяОбработка, Форма,
	 ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "АвтоПодбор");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_АвтоПодбор(Элемент, Текст, ДанныеВыбора,
			 ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка,
			 ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Окончание ввода текста" элемента формы
//
// Параметры:
//  Элемент					 - ЭлементФормы				 - Элемент формы
//  Текст					 - Строка					 - Текст редактирования
//  ДанныеВыбора			 - СписокЗначений			 - Параметр данных выбора;
//  ПараметрыПолученияДанных - Структура, Неопределено	 - Параметры поиска
//  СтандартнаяОбработка	 - Булево					 - Признак выполнения стандартной (системной) обработки события
//  Форма					 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона			 - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	 СтандартнаяОбработка, Форма,
	 ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "ОкончаниеВводаТекста");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора,
			 ПараметрыПолученияДанных, СтандартнаяОбработка,
			 ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Выбор" таблицы формы
//
// Параметры:
//  Элемент				 - ЭлементФормы					 - Элемент формы
//  ВыбраннаяСтрока		 - СправочникСсылка, ДокументСсылка	 - Значение выбранной строки
//  Поле				 - ПолеФормы						 - Активное поле (колонка)
//  СтандартнаяОбработка - Булево							 - Признак выполнения стандартной (системной) обработки события
//  Форма				 - ФормаКлиентскогоПриложения		 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона		 - ФормаКлиентскогоПриложения		 - Форма шаблона расположения элементов
//
Процедура Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "Выбор");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "При активизации строки" таблицы формы
//
// Параметры:
//  Элемент		 - ЭлементФормы					 - Элемент формы
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура ПриАктивизацииСтроки(Элемент, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "ПриАктивизацииСтроки");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_ПриАктивизацииСтроки(Элемент, ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Выбор значения"
//
// Параметры:
//  Элемент				 - ЭлементФормы			 - Элемент формы
//  Значение			 - Произвольный			 - Выбранное значение
//  СтандартнаяОбработка - Булево				 - Признак выполнения стандартной (системной) обработки события
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона		 - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура ВыборЗначения(Элемент, Значение, СтандартнаяОбработка, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "ВыборЗначения");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_ВыборЗначения(Элемент, Значение, СтандартнаяОбработка, ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "При активизации поля"
//
// Параметры:
//  Элемент		 - ЭлементФормы					 - Элемент формы
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура ПриАктивизацииПоля(Элемент, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "ПриАктивизацииПоля");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_ПриАктивизацииПоля(Элемент, ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "При активизации ячейки"
//
// Параметры:
//  Элемент		 - ЭлементФормы					 - Элемент формы
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура ПриАктивизацииЯчейки(Элемент, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "ПриАктивизацииЯчейки");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_ПриАктивизацииЯчейки(Элемент, ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Перед началом добавления" списка справочника
//
// Параметры:
//  Элемент		 - ЭлементФормы					 - Элемент формы
//  Отказ		 - Булево						 - Признак отказа
//  Копирование	 - Булево						 - Режим копирования
//  Родитель	 - СправочникСсылка				 - Ссылка на элемент, который будет использован при добавлении в качестве родителя
//  Группа		 - Булево						 - Определяет, что добавляется - группа или элемент справочника
//  Параметр	 - Произвольный					 - Дополнительный параметр
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "ПередНачаломДобавления");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_ПередНачаломДобавления(Элемент, Отказ, Копирование,
			 Родитель, Группа, Параметр,
			 ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Перед началом изменения" списка справочника
//
// Параметры:
//  Элемент		 - ЭлементФормы					 - Элемент формы
//  Отказ		 - Булево						 - Признак отказа
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура ПередНачаломИзменения(Элемент, Отказ, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "ПередНачаломИзменения");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_ПередНачаломИзменения(Элемент, Отказ, ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Перед удалением" списка справочника
//
// Параметры:
//  Элемент		 - ЭлементФормы					 - Элемент формы
//  Отказ		 - Булево						 - Признак отказа
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура ПередУдалением(Элемент, Отказ, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "ПередУдалением");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_ПередУдалением(Элемент, Отказ, ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Перед удалением" списка справочника
//
// Параметры:
//  Элемент		 - ЭлементФормы					 - Элемент формы
//  НоваяСтрока	 - Булево						 - Признак редактирования новой строки
//  Копирование	 - Булево						 - Режим копирования
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "ПриНачалеРедактирования");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование, ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Перед окончанием редактирования" списка справочника
//
// Параметры:
//  Элемент				 - ЭлементФормы			 - Элемент формы
//  НоваяСтрока			 - Булево				 - Признак редактирования новой строки
//  ОтменаРедактирования - Булево				 - Признак отмены редактирования
//  Отказ				 - Булево				 - Признак отказа
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона		 - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "ПередОкончаниемРедактирования");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_ПередОкончаниемРедактирования(Элемент, НоваяСтрока,
			 ОтменаРедактирования, Отказ,
			 ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "При окончании редактирования" списка справочника
//
// Параметры:
//  Элемент				 - ЭлементФормы			 - Элемент формы
//  НоваяСтрока			 - Булево				 - Признак редактирования новой строки
//  ОтменаРедактирования - Булево				 - Признак отмены редактирования
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона		 - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "ПриОкончанииРедактирования");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_ПриОкончанииРедактирования(Элемент, НоваяСтрока,
			 ОтменаРедактирования,
			 ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Перед разворачиванием"
//
// Параметры:
//  Элемент		 - ЭлементФормы					 - Элемент формы
//  Строка		 - Произвольный					 - Строка, которая будет развернута
//  Отказ		 - Булево						 - Признак отказа
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура ПередРазворачиванием(Элемент, Строка, Отказ, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "ПередРазворачиванием");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_ПередРазворачиванием(Элемент, Строка, Отказ, ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Перед сворачиванием"
//
// Параметры:
//  Элемент		 - ЭлементФормы					 - Элемент формы
//  Строка		 - Произвольный					 - Строка, которая будет развернута
//  Отказ		 - Булево						 - Признак отказа
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура ПередСворачиванием(Элемент, Строка, Отказ, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "ПередСворачиванием");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_ПередСворачиванием(Элемент, Строка, Отказ, ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "После удаления"
//
// Параметры:
//  Элемент		 - ЭлементФормы					 - Элемент формы
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура ПослеУдаления(Элемент, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "ПослеУдаления");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_ПослеУдаления(Элемент, ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "При смене текущего родителя"
//
// Параметры:
//  Элемент		 - ЭлементФормы					 - Элемент формы
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура ПриСменеТекущегоРодителя(Элемент, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "ПриСменеТекущегоРодителя");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_ПриСменеТекущегоРодителя(Элемент, ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Начало перетаскивания"
//
// Параметры:
//  Элемент					 - ЭлементФормы				 - Элемент формы
//  ПараметрыПеретаскивания	 - ПараметрыПеретаскивания	 - Содержит перетаскиваемое значение, тип действия
	// и возможные действия при перетаскивании
//  Выполнение				 - Булево					 - Управляет выполнением перетаскивания
//  Форма					 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона			 - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура НачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "НачалоПеретаскивания");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_НачалоПеретаскивания(Элемент, ПараметрыПеретаскивания,
			 Выполнение,
			 ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Проверка перетаскивания"
//
// Параметры:
//  Элемент					 - ЭлементФормы				 - Элемент формы
//  ПараметрыПеретаскивания	 - ПараметрыПеретаскивания	 - Содержит перетаскиваемое значение, тип действия
	// и возможные действия при перетаскивании
//  СтандартнаяОбработка	 - Булево					 - Признак выполнения стандартной (системной) обработки события
//  Строка					 - СтрокаТаблицы			 - Строка таблицы, над которой находится курсор
//  Поле					 - ПолеФормы				 - Элемент формы клиентского приложения, с которым связана данная колонка таблицы
//  Форма					 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона			 - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура ПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка,
	 Поле, Форма,
	 ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "ПроверкаПеретаскивания");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_ПроверкаПеретаскивания(Элемент,
			 ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле,
			 ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Окончание перетаскивания"
//
// Параметры:
//  Элемент					 - ЭлементФормы				 - Элемент формы
//  ПараметрыПеретаскивания	 - ПараметрыПеретаскивания	 - Содержит перетаскиваемое значение, тип действия
	// и возможные действия при перетаскивании
//  СтандартнаяОбработка	 - Булево					 - Признак выполнения стандартной (системной) обработки события
//  Форма					 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона			 - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура ОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Форма, ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "ОкончаниеПеретаскивания");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_ОкончаниеПеретаскивания(Элемент,
			 ПараметрыПеретаскивания, СтандартнаяОбработка,
			 ИмяМетода);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Перетаскивание"
//
// Параметры:
//  Элемент					 - ЭлементФормы				 - Элемент формы
//  ПараметрыПеретаскивания	 - ПараметрыПеретаскивания	 - Содержит перетаскиваемое значение, тип действия
	// и возможные действия при перетаскивании
//  СтандартнаяОбработка	 - Булево					 - Признак выполнения стандартной (системной) обработки события
//  Строка					 - СтрокаТаблицы			 - Строка таблицы, над которой находится курсор
//  Поле					 - ПолеФормы				 - Элемент формы клиентского приложения, с которым связана данная колонка таблицы
//  Форма					 - ФормаКлиентскогоПриложения	 - Форма, из обработчика которой происходит вызов процедуры
//  ФормаШаблона			 - ФормаКлиентскогоПриложения	 - Форма шаблона расположения элементов
//
Процедура Перетаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле,
	 Форма,
	 ФормаШаблона) Экспорт
	ИмяМетода = ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, "Перетаскивание");
	Если ИмяМетода <> Неопределено Тогда
		ФормаШаблона.Подключаемый_ШаблоныЭлементов_Перетаскивание(Элемент, ПараметрыПеретаскивания,
			 СтандартнаяОбработка, Строка, Поле,
			 ИмяМетода);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьМетодДействия(Элемент, Форма, ФормаШаблона, Действие)
	
	СтрОписания = Форма["ШаблоныЭлементов_ОписаниеЭлементов" 
		+ ФормаШаблона.ИдентификаторФормыСтрокой].НайтиСтроки(Новый Структура("ИмяЭлемента", Элемент.Имя));
	Если СтрОписания.Количество() > 0 Тогда
		ДанныеЭлемента = СтрОписания[0];
		Если Действие = "ПриИзменении" И ЗначениеЗаполнено(ДанныеЭлемента.ПутьКДанным) Тогда
			Попытка
				Подстроки = СтрРазделить(ДанныеЭлемента.ПутьКДанным, ".");
				Если Подстроки.Количество() = 1 Тогда
					ФормаШаблона[ДанныеЭлемента.ПутьКДанным] = Форма[ДанныеЭлемента.ПутьКДанным 
						+ ФормаШаблона.ИдентификаторФормыСтрокой];
				Иначе
					ФормаШаблона[Подстроки[0]][Подстроки[1]] = Форма[Подстроки[0] 
						+ ФормаШаблона.ИдентификаторФормыСтрокой][Подстроки[1]];
				КонецЕсли;
			Исключение
				// BSLLS:UnusedLocalVariable-off
				ПеременнаяХ = 1; // Отсутствует код в блоке "Исключение"
				// BSLLS:UnusedLocalVariable-on
			КонецПопытки;
		КонецЕсли;
		ЭлементДействие = ДанныеЭлемента.Действия.НайтиПоЗначению(Действие);
		Если ЭлементДействие = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			Возврат ЭлементДействие.Представление;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
