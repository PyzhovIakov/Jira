
#Область СлужебныеПроцедурыИФункции

// Проверяет возможность использования сертификатов пользователя в облачном сервисе.
//
// Возвращаемое значение:
//  Булево - использование сертификатов пользователя в облачном сервисе возможно.
//
Функция ИспользованиеСертификатовОблачногоСервисаВозможно() Экспорт
	
	ИспользованиеВозможно = КриптографияБЭДСлужебный.ИспользованиеСертификатовОблачногоСервисаВозможно();
	
	Возврат ИспользованиеВозможно;
	
КонецФункции

Функция ДоступныеСертификаты(РезультатыПолученияОтпечатков, ОшибкаПолученияОтпечатков = "") Экспорт
	
	ВидОперации = НСтр("ru = 'Получение доступных сертификатов для электронного документооборота'");
	
	РезультатыПолученияОтпечатков = КриптографияБЭД.ПолучитьОтпечаткиСертификатов(ВидОперации, Неопределено,
		РезультатыПолученияОтпечатков);
	
	КриптографияБЭД.ЕстьОшибкаПолученияОтпечатков(РезультатыПолученияОтпечатков, ОшибкаПолученияОтпечатков);
	
	ОтборСертификатов = КриптографияБЭД.НовыйОтборСертификатов();
	ОтборСертификатов.Отпечатки = "&Отпечатки";
	ЗапросСертификатов = КриптографияБЭД.ЗапросДействующихСертификатов("Сертификаты", ОтборСертификатов);
	
	Запросы = Новый Массив;
	Запросы.Добавить(ЗапросСертификатов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Сертификаты.Ссылка
	|ИЗ
	|	Сертификаты КАК Сертификаты";
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	
	ИтоговыйЗапрос.УстановитьПараметр("Отпечатки",
		КриптографияБЭД.ПолучитьВсеОтпечаткиСертификатов(РезультатыПолученияОтпечатков));
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	Сертификаты = Новый Массив;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Сертификаты;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Сертификаты.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат Сертификаты;
	
КонецФункции

Функция ПолучитьДистрибутивCryptoProCSP(Параметры) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение дистрибутива CryptoPro CSP'");
	ПараметрыВыполнения.ДополнительныйРезультат = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("КриптографияБЭДСлужебный.ПолучитьДистрибутивCryptoProCSP",
		Параметры, ПараметрыВыполнения);
	
КонецФункции

Функция РезультатПолученияДистрибутиваКриптопровайдера(ДлительнаяОперация, ИдентификаторФормы) Экспорт
	
	Результат = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
	
	ДанныеДистрибутива = Новый Структура;
	Если Результат.ПараметрыДистрибутива <> Неопределено И Результат.ПараметрыДистрибутива.Свойство("Дистрибутив") Тогда
		ДанныеДистрибутива.Вставить("НомерДистрибутива", "");
		ДанныеДистрибутива.Вставить("Версия", Результат.ПараметрыДистрибутива.Версия);
		ДанныеДистрибутива.Вставить("КонтрольнаяСумма", Результат.ПараметрыДистрибутива.КонтрольнаяСумма);
		
		Если Результат.ПараметрыДистрибутива.Свойство("СерийныйНомер") Тогда
			ДанныеДистрибутива.Вставить("СерийныйНомер", Результат.ПараметрыДистрибутива.СерийныйНомер);
		КонецЕсли;
		
		ОписаниеФайлов = Новый Массив;
		Для каждого Файл Из Результат.ПараметрыДистрибутива.Дистрибутив Цикл
			ОписаниеФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(Файл.Имя,
			ПоместитьВоВременноеХранилище(Файл.ДвоичныеДанные, ИдентификаторФормы)));
		КонецЦикла;
		
		ДанныеДистрибутива.Вставить("Дистрибутив", ОписаниеФайлов);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ДанныеДистрибутива", ДанныеДистрибутива);
	СтруктураВозврата.Вставить("КонтекстДиагностики", Результат.КонтекстДиагностики);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ОписанияПрограммЭлектроннойПодписиИШифрования() Экспорт
	
	Возврат КриптографияБЭД.ОписанияПрограммЭлектроннойПодписиИШифрования();
	
КонецФункции

// Проверяет текст ошибки на принадлежность классификатору ошибок БСП
//
// Параметры:
//  ТекстОшибки - Строка
//
// Возвращаемое значение:
//  Булево - текст ошибки принадлежит классификатору
Функция ТекстОшибкиКриптографииКлассифицирован(ТекстОшибки) Экспорт
	Возврат Не ЭлектроннаяПодпись.ОшибкаПоКлассификатору(ТекстОшибки) = Неопределено;
КонецФункции

//Очищает поля ДанныеСертификата и ДанныеПодписи методом УдалитьИзВременногоХранилища
//
// Параметры:
//  ДанныеСертификата - Строка - Адрес данных во временном хранилище.
//  ДанныеПодписи - Строка - Адрес данных во временном хранилище.
Процедура ОчиститьВременноеХранилищеПослеЗакрытияФормыОшибки(ДанныеСертификата, ДанныеПодписи) Экспорт
	
	Если ЭтоАдресВременногоХранилища(ДанныеПодписи) Тогда
		УдалитьИзВременногоХранилища(ДанныеПодписи);
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ДанныеСертификата) Тогда
		УдалитьИзВременногоХранилища(ДанныеСертификата);
	КонецЕсли;
	
КонецПроцедуры

//Подготавливает переданную структуру для передачи на форму ошибки
//
// Параметры:
//  ДополнительныеДанные - Структура:
//  * ДанныеПодписи - ДвоичныеДанные, Строка, Неопределено - 
//  * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования, Неопределено -
//  * ДанныеСертификата - ДвоичныеДанные, Строка, Неопределено - 
Процедура ПодготовитьДополнительныеДанныеНаСервере(ДополнительныеДанные) Экспорт
	
	Если ЭтоАдресВременногоХранилища(ДополнительныеДанные.ДанныеСертификата) Тогда
		ДанныеСертификата = ПолучитьИзВременногоХранилища(ДополнительныеДанные.ДанныеСертификата);
		Если ДанныеСертификата = Неопределено Тогда
			ДополнительныеДанные.ДанныеСертификата = Неопределено;
		Иначе
			ДополнительныеДанные.ДанныеСертификата = 
				ПоместитьВоВременноеХранилище(ДанныеСертификата, Новый УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ДополнительныеДанные.ДанныеПодписи) Тогда
		ДанныеПодписи = ПолучитьИзВременногоХранилища(ДополнительныеДанные.ДанныеПодписи);
		Если ДанныеПодписи = Неопределено Тогда
			ДополнительныеДанные.ДанныеПодписи = Неопределено;
		Иначе
			ДополнительныеДанные.ДанныеПодписи = 
				ПоместитьВоВременноеХранилище(ДанныеПодписи, Новый УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеДанные.ДанныеСертификата = Неопределено И Не ДополнительныеДанные.ДанныеПодписи = Неопределено Тогда
		СвойстваПодписи = ЭлектроннаяПодпись.СвойстваПодписи(ДополнительныеДанные.ДанныеПодписи, Истина);
		ДополнительныеДанные.ДанныеСертификата = 
			ПоместитьВоВременноеХранилище(СвойстваПодписи.Сертификат, Новый УникальныйИдентификатор());
	КонецЕсли;
		
	Если ДополнительныеДанные.Сертификат = Неопределено И Не ДополнительныеДанные.ДанныеСертификата = Неопределено Тогда
		ДополнительныеДанные.Сертификат = ЭлектроннаяПодпись.СсылкаНаСертификат(ДополнительныеДанные.ДанныеСертификата);
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеДанные.ДанныеСертификата) = Тип("ДвоичныеДанные") Тогда
		ДополнительныеДанные.ДанныеСертификата =
			ПоместитьВоВременноеХранилище(ДополнительныеДанные.ДанныеСертификата, Новый УникальныйИдентификатор());
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеДанные.ДанныеПодписи) = Тип("ДвоичныеДанные") Тогда
		ДополнительныеДанные.ДанныеПодписи = 
			ПоместитьВоВременноеХранилище(ДополнительныеДанные.ДанныеПодписи, Новый УникальныйИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти