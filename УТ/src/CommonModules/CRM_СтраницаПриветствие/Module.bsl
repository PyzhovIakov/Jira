#Область СлужебныеПроцедурыИФункции

Функция ЗначениеНастройкиПоказыватьПриНачалеРаботы() Экспорт
	
	ТекущееИмяПользователя = ИмяПользователя();
	
	Если Не ЗначениеЗаполнено(ТекущееИмяПользователя) Тогда
		Возврат 0; // Всегда
	КонецЕсли;
	
	НастройкаЗапуска = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"CRM_СтраницаПриветствия",
		"ВсегдаПоказыватьПриСтартеПрограммы", , , ИмяПользователя());
	
	Если НастройкаЗапуска = Неопределено Тогда
		Возврат 0; // Всегда
	ИначеЕсли НастройкаЗапуска = Истина Тогда
		ПоказыватьПриОбновлении = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"CRM_СтраницаПриветствия",
			"ПоказПриСтартеТолькоПриИзменении", , , ИмяПользователя());
		Если ПоказыватьПриОбновлении = Истина Тогда
			Возврат 1; // Только при наличии новой информации.
		Иначе
			Возврат 0; // Всегда
		КонецЕсли;
	Иначе
		Возврат 1; // Только при наличии новой информации.
	КонецЕсли;
	
КонецФункции

Функция РолиДоступны(ИменаРолей) Экспорт
	Возврат Пользователи.РолиДоступны(ИменаРолей);
КонецФункции

Процедура ПроверкаВерсииКонфигурации() Экспорт
	
	ТекущееИмяПользователя = ИмяПользователя();
	
	Если Не ЗначениеЗаполнено(ТекущееИмяПользователя) Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияРелизаВХранилище = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"CRM_СтраницаПриветствия",
	"ВерсияРелизаВХранилище", , , ИмяПользователя());
	
	ВерсияРелизаТекущая = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(Метаданные.Версия);
	
	Если ВерсияРелизаВХранилище = Неопределено Тогда
		Возврат;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(ВерсияРелизаТекущая,
		 ВерсияРелизаВХранилище) > 0 Тогда
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"CRM_СтраницаПриветствия",
			"ВсегдаПоказыватьПриСтартеПрограммы",
			Истина, , ИмяПользователя());
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"CRM_СтраницаПриветствия",
			"ПоказПриСтартеТолькоПриИзменении",
			Ложь, , ИмяПользователя());
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"CRM_СтраницаПриветствия",
			"ВерсияРелизаВХранилище",
			ВерсияРелизаТекущая, , ИмяПользователя());
	КонецЕсли;
	
КонецПроцедуры

Функция НачатьПроверкуНаличияНовойИнформации() Экспорт
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.КлючФоновогоЗадания = Строка(Новый УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.ОжидатьЗавершение   = 0;
	ПараметрыВыполненияВФоне.ЗапуститьВФоне      = Истина;
	
	РезультатЗадания = ДлительныеОперации.ВыполнитьВФоне(
		"CRM_СтраницаПриветствие.ПроверитьНаличиеНовойИнформацииВФоне",
		Неопределено,
		ПараметрыВыполненияВФоне);
	
	Если РезультатЗадания.Статус = "Выполнено" Тогда
		
		Результат = ПолучитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);
		УдалитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);
		Возврат Результат;
		
	ИначеЕсли РезультатЗадания.Статус = "Выполняется" Тогда
		
		Возврат Новый Структура("ИдентификаторЗадания, АдресРезультата, ДлительнаяОперация",
			РезультатЗадания.ИдентификаторЗадания,
			РезультатЗадания.АдресРезультата,
			РезультатЗадания);
		
	ИначеЕсли РезультатЗадания.Статус = "Отменено" Тогда
		
		СообщениеЖурнала = НСтр("ru = 'Не удалось проверить изменения информации Страница приветствия 1С:CRM.
				|Задание отменено администратором.'");
		ИмяСобытияЖурнала = НСтр("ru = 'Страница приветствия 1С:CRM'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурнала,
			УровеньЖурналаРегистрации.Информация,
			,
			,
			СообщениеЖурнала);
		Возврат "НетИзменений";
		
	Иначе
		
		СообщениеЖурнала = НСтр("ru = 'Не удалось проверить изменения информации Страница приветствия 1С:CRM.
				|Задание завершено с ошибкой.'");
		ИмяСобытияЖурнала = НСтр("ru = 'Страница приветствия 1С:CRM'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурнала,
			УровеньЖурналаРегистрации.Информация,
			,
			,
			СообщениеЖурнала);
		Возврат "Ошибка";
		
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьНаличиеНовойИнформацииВФоне(ПараметрыМетода, АдресРезультата) Экспорт
	
	РезультатОперации = ДанныеОкнаПриветствия();
	Если ПустаяСтрока(РезультатОперации.ИмяОшибки) Тогда
		
		Если РезультатОперации.ДанныеИзменены = 1 Тогда
			ПоместитьВоВременноеХранилище("ДанныеИзменены", АдресРезультата);
		Иначе
			ПоместитьВоВременноеХранилище("НетИзменений", АдресРезультата);
		КонецЕсли;
		
	Иначе
		
		ПоместитьВоВременноеХранилище("Ошибка", АдресРезультата);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеОкнаПриветствия() Экспорт
	
	Результат = НовыйРезультатВызоваОперации();
	
	Сервер = "files.1crm.ru";
	URL = "files.1crm.ru/api/v1/startPage/version/";
	СтруктураURI = сфпОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	Ответ = Неопределено;
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.АдресРесурса = "/api/v1/startPage/version/";
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(
		Сервер,
		СтруктураURI.Порт, , , Прокси, 30,
		Новый ЗащищенноеСоединениеOpenSSL);
	Попытка
		Ответ = HTTPСоединение.ВызватьHTTPМетод("GET", HTTPЗапрос);
	Исключение
		СообщениеЖурнала = НСтр("ru = 'Не удалось проверить изменения информации Страница приветствия 1С:CRM.
				|Задание завершено с ошибкой: %1'");
		СообщениеЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеЖурнала, ОписаниеОшибки());
		ИмяСобытияЖурнала = НСтр("ru = 'Страница приветствия 1С:CRM'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурнала,
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеЖурнала);
		Результат.ИмяОшибки = "Внутренняя ошибка сервиса";
		Возврат Результат;
	КонецПопытки;
	
	Если Ответ.КодСостояния = 200 Тогда
		ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
		СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(ТекстОтвета);
		СтруктураДанных = СтруктураОтвета.data;
		ВерсияСтраницы = СтруктураДанных.id;
	Иначе
		Результат.ИмяОшибки = "Внутренняя ошибка сервиса";
		Возврат Результат;
	КонецЕсли;
	
	ТекущаяВерсияСтраницы = Константы.CRM_ВерсияСтраницыПриветствия.Получить();

	Если ВерсияСтраницы <> 0 И ВерсияСтраницы > ТекущаяВерсияСтраницы Тогда
		
		АдресФайла = "https://files.1crm.ru/api/v1/startPage/download/";
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		РезультатПолученияФайла = МодульПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(АдресФайла);
		
		Если Не РезультатПолученияФайла.Статус Тогда
			Результат.ИмяОшибки = "Не удалось загрузить файл";
			Возврат Результат;
		КонецЕсли;
		
		Константы.CRM_ВерсияСтраницыПриветствия.Установить(ВерсияСтраницы);
		
		КаталогДляРаспаковки = ПолучитьИмяВременногоФайла();
		Архив = Новый ЧтениеZipФайла(РезультатПолученияФайла.Путь);
		Архив.ИзвлечьВсе(КаталогДляРаспаковки);
		ФайлОписания = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогДляРаспаковки) + "index.html";
		
		ЧтениеТекст = Новый ЧтениеТекста(ФайлОписания, КодировкаТекста.UTF8);
		СтрокаНовая = ЧтениеТекст.Прочитать();
		ЧтениеТекст.Закрыть();
		
		ФайловаяСистема.УдалитьВременныйФайл(КаталогДляРаспаковки);
		ФайловаяСистема.УдалитьВременныйФайл(РезультатПолученияФайла.Путь);
		
		МакетВХранилище = ЗаполнитьМетки(СтрокаНовая);
		ХранилищеВКонстанту = Новый ХранилищеЗначения(МакетВХранилище);
		Константы.CRM_СтраницаПриветствия.Установить(ХранилищеВКонстанту);
		Результат.ДанныеИзменены = 1;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция НовыйРезультатВызоваОперации()
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяОшибки"         , "");
	Результат.Вставить("СообщениеОбОшибке" , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("КодСостояния"      , 0);
	Результат.Вставить("ДанныеИзменены"    , 0);
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьМетки(HTMLстрока) Экспорт
	
	ИмяКонфигурацииДляМетки = ПолучитьИмяКонфигурацииДляМетки();
	Если ЗначениеЗаполнено(ИмяКонфигурацииДляМетки) Тогда
		HTMLстрокаПослеОбработки = СтрЗаменить(HTMLстрока, "pp_unknown", "pp_" + ПолучитьИмяКонфигурацииДляМетки());
	Иначе
		HTMLстрокаПослеОбработки = HTMLстрока;
	КонецЕсли;
	
	Возврат HTMLстрокаПослеОбработки;
	
КонецФункции

Функция ПолучитьИмяКонфигурацииДляМетки()

	ИмяКонфигурации = ВРег(Метаданные.Имя);
	Если ИмяКонфигурации = ВРег("CRM") Тогда
		ЭтоРазделенныйРежимРаботы = Константы.ИспользоватьРазделениеПоОбластямДанных.Получить();
		Если ЭтоРазделенныйРежимРаботы Тогда
			ИмяДляМетки = "crm_fresh";
		Иначе
			ИмяДляМетки = "crm";
		КонецЕсли;
	ИначеЕсли ИмяКонфигурации = ВРег("CRM3Базовая") Тогда
		ИмяДляМетки = "crm_base";
	ИначеЕсли ИмяКонфигурации = ВРег("УправлениеТорговлей") Тогда
		ИмяДляМетки = "module_ut";
	ИначеЕсли ИмяКонфигурации = ВРег("УправлениеПредприятием") Тогда
		ИмяДляМетки = "module_erp";
	ИначеЕсли ИмяКонфигурации = ВРег("КомплекснаяАвтоматизация") Тогда
		ИмяДляМетки = "module_ka";
	ИначеЕсли СтрНайти(ИмяКонфигурации, ВРег("УправлениеТорговлей_CRM")) > 0 Тогда
		ИмяДляМетки = "utvsk";
	ИначеЕсли СтрНайти(ИмяКонфигурации, ВРег("УправлениеПредприятием_CRM")) > 0 Тогда
		ИмяДляМетки = "sparka_erp";
	ИначеЕсли СтрНайти(ИмяКонфигурации, ВРег("КомплекснаяАвтоматизация_CRM")) > 0 Тогда
		ИмяДляМетки = "sparka_ka";
	Иначе
		ИмяДляМетки = "";
	КонецЕсли;
	
	Возврат ИмяДляМетки;
КонецФункции

#КонецОбласти
