////////////////////////////////////////////////////////////////////////////////
// Подсистема "Печать".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

//
//
Функция УпорядочитьИменаТЧПоМакетуMicrosoftWord(МассивИмен, COMСоединение)
	
	СписокИмен = Новый СписокЗначений;
	СписокИмен.ЗагрузитьЗначения(МассивИмен);
	
	Для Каждого ЭлементСписка Из СписокИмен Цикл
		
		Имя = ЭлементСписка.Значение;
		
		ИдентификаторОбласти = "{v8 Область.ШапкаТаблицы" + Имя + "}";
		
		ВесьДокумент = COMСоединение.ActiveDocument.Content;
		ВесьДокумент.Select();
		
		Поиск = COMСоединение.Selection.Find;
		Поиск.Text = ИдентификаторОбласти;
		Поиск.ClearFormatting();
		Поиск.Forward = Истина;
		Поиск.execute();
		
		Если Поиск.Found Тогда
			ПозицияНачалаОбласти = COMСоединение.Selection.End;
			ЭлементСписка.Значение = ПозицияНачалаОбласти;
			//ЭлементСписка.Представление = Строка(ПозицияНачалаОбласти);
		Иначе
			ЭлементСписка.Значение = 999999999999999999;
			//ЭлементСписка.Представление = "999999999999999999";
		КонецЕсли;
		ЭлементСписка.Представление	= Имя;
	КонецЦикла;
	
	СписокИмен.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	Массив = Новый Массив;
	Для Каждого ЭлементСписка Из СписокИмен Цикл
		Массив.Добавить(ЭлементСписка.Представление);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

Функция УпорядочитьИменаТЧПоМакетуOpenOffice(МассивИмен, Handler)
	
	СписокИмен = Новый СписокЗначений;
	СписокИмен.ЗагрузитьЗначения(МассивИмен);
	
	xDocument	= Handler.Document;
	oText		= xDocument.Text.getText().String;
	
	Для Каждого ЭлементСписка Из СписокИмен Цикл
		
		Имя = ЭлементСписка.Значение;
		
		ТекстДляПоиска = "{v8 Область.ШапкаТаблицы" + Имя + "}";
		
		Рез = СтрНайти(oText, ТекстДляПоиска);
		
		ЭлементСписка.Значение		= ?(Рез = 0, 999999999999999999, Рез);
		ЭлементСписка.Представление	= Имя;
		
	КонецЦикла;
	
	СписокИмен.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	Массив = Новый Массив;
	Для Каждого ЭлементСписка Из СписокИмен Цикл
		Массив.Добавить(ЭлементСписка.Представление);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

//
//
Процедура ПечатьВнешнегоМакетаMicrosoftWord(ДокументСсылка, МакетИДанныеОбъекта, ИмяМакета,
	 ЛокальныйКаталогФайловПечати) Экспорт
	
	ТипМакета				= МакетИДанныеОбъекта.Макеты.ТипыМакетов[ИмяМакета];
	ДвоичныеДанныеМакетов	= МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	Области					= МакетИДанныеОбъекта.Макеты.ОписаниеОбластей;
	
	ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ДокументСсылка][ИмяМакета];
	
	Попытка
		Макет		  = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакетов[ИмяМакета],
			 ТипМакета,
			 ИмяМакета);
		ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета,
			 Макет.НастройкиСтраницыМакета,
			 Макет);
		
		Если ПечатнаяФорма <> Неопределено И Макет <> Неопределено Тогда
			
			// Вывод колонтитулов документа.
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ВерхнийКолонтитул"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
			
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижнийКолонтитул"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область);
			
			// Вывод верхней части документа - обычная область с параметрами.
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Заголовок"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
			
			// 1. Печать Коммерческого предложения.
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту")
				 ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			
				// Выведем варианты
				ВыводитьСтрокуВарианта = (ДанныеОбъекта["Варианты"].Количество() > 1);
				
				Для Каждого ДанныеВарианта Из ДанныеОбъекта["Варианты"] Цикл
					Если ВыводитьСтрокуВарианта Тогда
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ОписаниеВарианта"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
					КонецЕсли;
					
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
					УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
					
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
						
					Попытка
						
						ОбластьРазделитель = УправлениеПечатьюКлиент.ОбластьМакета(Макет,
							 Области[ИмяМакета]["СтрокаРазделительТаблицаТовары"]);
						ОбластьИтогиПоРазделу = УправлениеПечатьюКлиент.ОбластьМакета(Макет,
							 Области[ИмяМакета]["СтрокаИтогиПоРазделуТаблицаТовары"]);
						
						ТоварыЕстьРазделители = ДанныеВарианта.ЕстьРазделители;
						
					Исключение
						
						ТоварыЕстьРазделители = Ложь;
						
					КонецПопытки;				
					
					Если ТоварыЕстьРазделители Тогда
						
						// выводим построчно
						КоличествоНеВыведенныхСтрок = ДанныеВарианта.Товары.Количество();
						
						Для Каждого СтрокаТовары Из ДанныеВарианта.Товары Цикл
							
							МассивСтрокиТовары = Новый Массив;
							МассивСтрокиТовары.Добавить(СтрокаТовары);
							
							Если СтрокаТовары["ТипСтроки"] = "Разделитель" Тогда
								
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьРазделитель,
									 МассивСтрокиТовары,
									 КоличествоНеВыведенныхСтрок = 1);
								
							ИначеЕсли СтрокаТовары["ТипСтроки"] = "ИтогПоРазделу" Тогда
								
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма,
									 ОбластьИтогиПоРазделу, МассивСтрокиТовары,
									 КоличествоНеВыведенныхСтрок = 1);
								
							Иначе
								
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область,
									 МассивСтрокиТовары,
									 КоличествоНеВыведенныхСтрок = 1);
								
							КонецЕсли;
							
							КоличествоНеВыведенныхСтрок = КоличествоНеВыведенныхСтрок - 1;
							
						КонецЦикла;
						
					Иначе
						
						УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеВарианта.Товары);
						
					КонецЕсли;
					
					Попытка // Для совместимости с предыдущей версией
						// вывод итогов табличной части.
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблицаТовары"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
					Исключение
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
						
				КонецЦикла;
				
				// Вывод нижней части документа - обычная область с параметрами.
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
				//ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
				УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
				
// 2. Печать всего остального
			Иначе
				Если ДанныеОбъекта.Свойство("ТабличныеЧасти") Тогда
					
					ТабличныеЧасти = УпорядочитьИменаТЧПоМакетуMicrosoftWord(ДанныеОбъекта.ТабличныеЧасти, Макет.COMСоединение);
					Для Каждого ИмяТЧ Из ТабличныеЧасти Цикл
						
						// Вывод коллекции данных из информационной базы в виде таблицы.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицы" + ИмяТЧ + "Текст"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицы" + ИмяТЧ]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблица" + ИмяТЧ]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблица" + ИмяТЧ]);
							УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
						Исключение 
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						// Вывод коллекции данных из информационной базы в виде нумерованного списка.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Шапка" + ИмяТЧ + "Номенклатура"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета][ИмяТЧ + "Номенклатура"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						// Вывод коллекции данных из информационной базы в виде списка.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Шапка" + ИмяТЧ + "Всего"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета][ИмяТЧ + "Всего"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
					КонецЦикла;
				Иначе
					
					// Вывод коллекции данных из информационной базы в виде таблицы.
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТоварыТекст"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
					Исключение
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
					
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
					Исключение
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
					
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
						УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
					Исключение
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
					
					// Вывод коллекции данных из информационной базы в виде нумерованного списка.
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыНоменклатура"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
					Исключение
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
					
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыНоменклатура"]);
						УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
					Исключение
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
					
					// Вывод коллекции данных из информационной базы в виде списка.
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыВсего"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
					Исключение
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
					
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыВсего"]);
						УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
					Исключение
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
					
				КонецЕсли;
				
				// Вывод нижней части документа - обычная область с параметрами.
				Попытка
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
					УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
				Исключение
					ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
			КонецЕсли;
			
			УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма);
		УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
		Возврат;
	КонецПопытки;
	
	УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма, Ложь);
	УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
	
КонецПроцедуры

//
//
Процедура ПечатьВнешнегоМакетаOpenOffice(ДокументСсылка, МакетИДанныеОбъекта, ИмяМакета,
	 ЛокальныйКаталогФайловПечати) Экспорт
	
	ТипМакета				= МакетИДанныеОбъекта.Макеты.ТипыМакетов[ИмяМакета];
	ДвоичныеДанныеМакетов	= МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	Области					= МакетИДанныеОбъекта.Макеты.ОписаниеОбластей;
	
	ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ДокументСсылка][ИмяМакета];
	
	Попытка
		
		Макет		  = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакетов[ИмяМакета],
			 ТипМакета,
			 ИмяМакета);
		ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета, Макет.НастройкиСтраницыМакета);
		
		Если Не ПечатнаяФорма = Неопределено И Не Макет = Неопределено Тогда
			
			// Вывод колонтитулов документа.
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ВерхнийКолонтитул"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта);
			
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижнийКолонтитул"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область);
			
			Попытка
				// Вывод верхней части документа - обычная область с параметрами.
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Заголовок"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
			Исключение
				ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			// 1. Печать Коммерческого предложения.
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту")
				 ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
				
				// Выведем варианты
				ВыводитьСтрокуВарианта = (ДанныеОбъекта["Варианты"].Количество() > 1);
				
				Для Каждого ДанныеВарианта Из ДанныеОбъекта["Варианты"] Цикл
					Если ВыводитьСтрокуВарианта Тогда
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ОписаниеВарианта"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
					КонецЕсли;
					
					// Вывод коллекции данных из информационной базы в виде таблицы.
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
					УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
					
					ТоварыЕстьРазделители = ДанныеВарианта.ЕстьРазделители;
					
					Если ТоварыЕстьРазделители Тогда
						
						Попытка
							
							ОбластьРазделитель = УправлениеПечатьюКлиент.ОбластьМакета(Макет,
								 Области[ИмяМакета]["СтрокаРазделительТаблицаТовары"]);
							ОбластьИтогиПоРазделу = УправлениеПечатьюКлиент.ОбластьМакета(Макет,
								 Области[ИмяМакета]["СтрокаИтогиПоРазделуТаблицаТовары"]);				
							
							//ТоварыЕстьРазделители = ДанныеВарианта.ЕстьРазделители;
							
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							//ТоварыЕстьРазделители = Ложь;
							
						КонецПопытки;				
						
						// выводим построчно
						КоличествоНеВыведенныхСтрок = ДанныеВарианта.Товары.Количество();
						
						Для Каждого СтрокаТовары Из ДанныеВарианта.Товары Цикл
							
							МассивСтрокиТовары = Новый Массив;
							МассивСтрокиТовары.Добавить(СтрокаТовары);
							
							Если СтрокаТовары["ТипСтроки"] = "Разделитель" Тогда
								
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьРазделитель,
									 МассивСтрокиТовары,
									 КоличествоНеВыведенныхСтрок = 1);
								
							ИначеЕсли СтрокаТовары["ТипСтроки"] = "ИтогПоРазделу" Тогда
								
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма,
									 ОбластьИтогиПоРазделу, МассивСтрокиТовары,
									 КоличествоНеВыведенныхСтрок = 1);
								
							Иначе
								
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область,
									 МассивСтрокиТовары,
									 КоличествоНеВыведенныхСтрок = 1);
								
							КонецЕсли;
							
							КоличествоНеВыведенныхСтрок = КоличествоНеВыведенныхСтрок - 1;
							
						КонецЦикла;
					Иначе
						
						УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеВарианта.Товары);
						
					КонецЕсли;
					
					Попытка // Для совместимости с предыдущей версией
						// вывод итогов табличной части.
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблицаТовары"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
					Исключение 
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
				КонецЦикла;
				
				// Вывод нижней части документа - обычная область с параметрами.
				Попытка
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
					//ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
					УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
				Исключение
					ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
// 2. Печать всего остального
			Иначе
			Если ДанныеОбъекта.Свойство("ТабличныеЧасти") Тогда
					
					ТабличныеЧасти = УпорядочитьИменаТЧПоМакетуOpenOffice(ДанныеОбъекта.ТабличныеЧасти, Макет);
					Для Каждого ИмяТЧ Из ТабличныеЧасти Цикл
						
						// Вывод коллекции данных из информационной базы в виде таблицы.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицы" + ИмяТЧ + "Текст"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицы" + ИмяТЧ]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблица" + ИмяТЧ]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблица" + ИмяТЧ]);
							УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						// Вывод коллекции данных из информационной базы в виде нумерованного списка.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Шапка" + ИмяТЧ + "Номенклатура"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета][ИмяТЧ + "Номенклатура"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						// Вывод коллекции данных из информационной базы в виде списка.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Шапка" + ИмяТЧ + "Всего"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета][ИмяТЧ + "Всего"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
					КонецЦикла;
				Иначе
					
					// Вывод коллекции данных из информационной базы в виде таблицы.
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТоварыТекст"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
					Исключение
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
					
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
					Исключение
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
					
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
						УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
					Исключение
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
					
					// Вывод коллекции данных из информационной базы в виде нумерованного списка.
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыНоменклатура"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
					Исключение
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
					
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыНоменклатура"]);
						УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
					Исключение
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
					
					// Вывод коллекции данных из информационной базы в виде списка.
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыВсего"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
					Исключение
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
					
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыВсего"]);
						УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
					Исключение
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
				КонецЕсли;
				
				// Вывод нижней части документа - обычная область с параметрами.
				Попытка
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
					УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
				Исключение
					ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
			КонецЕсли;
			
			УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
		КонецЕсли;
	Исключение
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма);
		УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
		Возврат;
		
	КонецПопытки;
	
	УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма, Ложь);
	УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
	
КонецПроцедуры

//
//
Процедура ПечатьВнешнегоМакета(ИмяМакета, ОбъектыНазначения, НомерВарианта = Неопределено) Экспорт
	
	МакетИДанныеОбъекта = CRM_ОбщегоНазначенияСервер.CRM_ПолучитьВнешниеМакетыИДанныеОбъектов(ИмяМакета,
		 ОбъектыНазначения,
		 НомерВарианта);
	Если СтрНайти(ИмяМакета, "ПФ_DOC") > 0 Тогда
		ТипМакета = "DOC";
	ИначеЕсли СтрНайти(ИмяМакета, "ПФ_ODT") > 0 Тогда
		ТипМакета = "ODT";
	ИначеЕсли СтрНайти(ИмяМакета, "ПФ_HTML") > 0 ИЛИ СтрНайти(ИмяМакета, "ПФ_HTM") > 0 Тогда
		ТипМакета = "HTML";	
	КонецЕсли;
	Для Каждого ЭлементСписка Из ОбъектыНазначения Цикл
		Если ТипМакета = "DOC" Тогда
			ПечатьВнешнегоМакетаMicrosoftWord(ЭлементСписка.Значение, МакетИДанныеОбъекта, ИмяМакета,
				 МакетИДанныеОбъекта.ЛокальныйКаталогФайловПечати);
		ИначеЕсли ТипМакета = "ODT" Тогда
			ПечатьВнешнегоМакетаOpenOffice(ЭлементСписка.Значение, МакетИДанныеОбъекта, ИмяМакета,
				 МакетИДанныеОбъекта.ЛокальныйКаталогФайловПечати);
		ИначеЕсли ТипМакета = "HTML" Тогда
			ЧастиИмени = СтрРазделить(ИмяМакета, "_", Ложь);
			ИмяМакета = "ПФ_" + ЧастиИмени[ЧастиИмени.ВГраница()];
			ПараметрыОткрытия = Новый Структура;
			Если ТипЗнч(ОбъектыНазначения[0].Значение) = Тип("ДокументСсылка.CRM_Интерес") Тогда
				ПараметрыОткрытия.Вставить("CRM_ИмяМакета", "Документ.CRM_Интерес." + ИмяМакета);
			ИначеЕсли ТипЗнч(ОбъектыНазначения[0].Значение) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
				ПараметрыОткрытия.Вставить("CRM_ИмяМакета", "Документ.КоммерческоеПредложениеКлиенту." + ИмяМакета);
			КонецЕсли;
			ПараметрыОткрытия.Вставить("ИмяДокумента", Строка(ЭлементСписка.Значение));
			ПараметрыОткрытия.Вставить("Редактирование", Истина);
			ПараметрыОткрытия.Вставить("Печать", Истина);
			ПараметрыОткрытия.Вставить("ОбъектСсылка", ЭлементСписка.Значение);
			ПараметрыОткрытия.Вставить("НомерВарианта", НомерВарианта);
			ОткрытьФорму("Обработка.CRM_РаботаСHTML.Форма.РедакторМакетаHTML", ПараметрыОткрытия,
				 Неопределено,
				 Строка(Новый УникальныйИдентификатор));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//
//
Процедура ПечатьВстроенногоМакета(ИмяМакета, ОбъектыНазначения, НомерВарианта = Неопределено) Экспорт
	
	МакетИДанныеОбъекта = CRM_ОбщегоНазначенияСервер.CRM_ПолучитьМакетыИДанныеОбъектов(ИмяМакета,
		 ОбъектыНазначения,
		 НомерВарианта);
	Если СтрНайти(ИмяМакета, "ПФ_DOC") > 0 Тогда
		ТипМакета = "DOC";
	ИначеЕсли СтрНайти(ИмяМакета, "ПФ_ODT") > 0 Тогда
		ТипМакета = "ODT";
	КонецЕсли;
	Для Каждого ЭлементСписка Из ОбъектыНазначения Цикл
		Если ТипМакета = "DOC" Тогда
			ПечатьВнешнегоМакетаMicrosoftWord(ЭлементСписка.Значение, МакетИДанныеОбъекта, ИмяМакета,
				 МакетИДанныеОбъекта.ЛокальныйКаталогФайловПечати);
		ИначеЕсли ТипМакета = "ODT" Тогда
			ПечатьВнешнегоМакетаOpenOffice(ЭлементСписка.Значение, МакетИДанныеОбъекта, ИмяМакета,
				 МакетИДанныеОбъекта.ЛокальныйКаталогФайловПечати);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция CRM_ВыполнитьКомандуПечатьВнешнегоМакета(ОписаниеКоманды) Экспорт
	
	ИмяМакета = ОписаниеКоманды.Идентификатор;
	ОбъектыНазначения = Новый СписокЗначений;
	ОбъектыНазначения.ЗагрузитьЗначения(ОписаниеКоманды.ОбъектыПечати);
	
	Если ОписаниеКоманды.Свойство("НомерВарианта") Тогда
		
		НомерВарианта = ОписаниеКоманды.НомерВарианта;
		
	ИначеЕсли ТипЗнч(ОбъектыНазначения[0].Значение) = Тип("ДокументСсылка.CRM_Интерес")
		Или  ТипЗнч(ОбъектыНазначения[0].Значение) = Тип("ДокументСсылка.CRM_ОтсутствиеСотрудника") Тогда
		
		НомерВарианта = 1;
	Иначе
		НомерВарианта = CRM_УправлениеПечатьюВызовСервера.ПолучитьВариантНаПечатьИзХранилища();
	КонецЕсли;
	
	ПечатьВнешнегоМакета(ИмяМакета, ОбъектыНазначения, НомерВарианта);
	
КонецФункции

#Область КоммерческоеПредложение

Функция CRM_ПечатьКоммерческоеПредложениеHTML(ОписаниеКоманды) Экспорт
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
	Если ОписаниеКоманды.Свойство("НомерВарианта") Тогда
		НомерВарианта = ОписаниеКоманды.НомерВарианта;
	Иначе
		НомерВарианта = CRM_УправлениеПечатьюВызовСервера.ПолучитьВариантНаПечатьИзХранилища();
	КонецЕсли;
	
	Для Каждого ОбъектСсылка Из ОписаниеКоманды.ОбъектыПечати Цикл
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("CRM_ИмяМакета",
			 "Документ.КоммерческоеПредложениеКлиенту.CRM_ПФ_HTML_КоммерческоеПредложение");
		ПараметрыОткрытия.Вставить("ИмяДокумента", Строка(ОбъектСсылка));
		ПараметрыОткрытия.Вставить("Редактирование", Истина);
		ПараметрыОткрытия.Вставить("Печать", Истина);
		ПараметрыОткрытия.Вставить("ОбъектСсылка", ОбъектСсылка);
		ПараметрыОткрытия.Вставить("НомерВарианта", НомерВарианта);
		ОткрытьФорму("Обработка.CRM_РаботаСHTML.Форма.РедакторМакетаHTML", ПараметрыОткрытия,
			 Неопределено,
			 Строка(Новый УникальныйИдентификатор));
		//ПечатьВнешнегоМакетаHTML(ОбъектСсылка, МакетыИДанные, "CRM_ПФ_HTML_Договор",
			// МакетыИДанные.ЛокальныйКаталогФайловПечати);
	КонецЦикла;
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
	Возврат Неопределено;
	
КонецФункции

Функция CRM_ПечатьДоговорHTML(ОписаниеКоманды) Экспорт
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
	Если ОписаниеКоманды.Свойство("НомерВарианта") Тогда
		НомерВарианта = ОписаниеКоманды.НомерВарианта;
	Иначе
		НомерВарианта = CRM_УправлениеПечатьюВызовСервера.ПолучитьВариантНаПечатьИзХранилища();
	КонецЕсли;
	
	Для Каждого ОбъектСсылка Из ОписаниеКоманды.ОбъектыПечати Цикл
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("CRM_ИмяМакета", "Документ.КоммерческоеПредложениеКлиенту.CRM_ПФ_HTML_Договор");
		ПараметрыОткрытия.Вставить("ИмяДокумента", Строка(ОбъектСсылка));
		ПараметрыОткрытия.Вставить("Редактирование", Истина);
		ПараметрыОткрытия.Вставить("Печать", Истина);
		ПараметрыОткрытия.Вставить("ОбъектСсылка", ОбъектСсылка);
		ПараметрыОткрытия.Вставить("НомерВарианта", НомерВарианта);
		ОткрытьФорму("Обработка.CRM_РаботаСHTML.Форма.РедакторМакетаHTML", ПараметрыОткрытия,
			 Неопределено,
			 Строка(Новый УникальныйИдентификатор));
		//ПечатьВнешнегоМакетаHTML(ОбъектСсылка, МакетыИДанные, "CRM_ПФ_HTML_Договор",
			// МакетыИДанные.ЛокальныйКаталогФайловПечати);
	КонецЦикла;
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
	Возврат Неопределено;
	
КонецФункции

Функция CRM_ПечатьКоммерческоеПредложениеMicrosoftWord(ОписаниеКоманды) Экспорт
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
	СоставДокументовИВариант = Новый Структура;
	СоставДокументовИВариант.Вставить("СоставДокументов", ОписаниеКоманды.ОбъектыПечати);
	
	Если ОписаниеКоманды.Свойство("НомерВарианта") Тогда
		СоставДокументовИВариант.Вставить("НомерВарианта", ОписаниеКоманды.НомерВарианта);
	Иначе
		СоставДокументовИВариант.Вставить("НомерВарианта",
			 CRM_УправлениеПечатьюВызовСервера.ПолучитьВариантНаПечатьИзХранилища());
	КонецЕсли;
	
	СоставДокументов = ОписаниеКоманды.ОбъектыПечати;
	
	Состояние(НСтр("ru='Выполняется формирование печатных форм';en='Generating print forms'"));
	
	ИмяМакета = "CRM_ПФ_DOC_КоммерческоеПредложение";
	ТипМакета = "doc";
	
	МассивИменМакетов		= СтрРазделить(ИмяМакета, ", ", Ложь);
	МакетИДанныеОбъекта		= CRM_МетодыМодулейМенеджеровДокументовВызовСервера.КП_ПолучитьДанныеПечати(СоставДокументовИВариант,
		 МассивИменМакетов);
	МакетИДанныеОбъекта.Вставить("ЛокальныйКаталогФайловПечати", Неопределено); // Для обратной совместимости.
	
	ДвоичныеДанныеМакетов = МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	
	Области = МакетИДанныеОбъекта.Макеты.ОписаниеОбластей;
	
	Для Каждого ДокументСсылка Из СоставДокументов Цикл
		
		ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ДокументСсылка][ИмяМакета];
		
		Попытка
			Макет		  = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакетов[ИмяМакета],
				 ТипМакета,
				 ИмяМакета);
			ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета,
				 Макет.НастройкиСтраницыМакета,
				 Макет);
			
			Если ПечатнаяФорма <> Неопределено И Макет <> Неопределено Тогда
				
				// Вывод колонтитулов документа.
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ВерхнийКолонтитул"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
				
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижнийКолонтитул"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область);
				
				// Вывод верхней части документа - обычная область с параметрами.
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Заголовок"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
				
				// 1. Печать Коммерческого предложения.
				Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
				
					// Выведем варианты
					ВыводитьСтрокуВарианта = (ДанныеОбъекта["Варианты"].Количество() > 1);
					
					Для Каждого ДанныеВарианта Из ДанныеОбъекта["Варианты"] Цикл
						Если ВыводитьСтрокуВарианта Тогда
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ОписаниеВарианта"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
						КонецЕсли;
						
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
							
						Попытка
							
							ОбластьРазделитель = УправлениеПечатьюКлиент.ОбластьМакета(Макет,
								 Области[ИмяМакета]["СтрокаРазделительТаблицаТовары"]);
							ОбластьИтогиПоРазделу = УправлениеПечатьюКлиент.ОбластьМакета(Макет,
								 Области[ИмяМакета]["СтрокаИтогиПоРазделуТаблицаТовары"]);				
							
							ТоварыЕстьРазделители = ДанныеВарианта.ЕстьРазделители;
							
						Исключение
							
							ТоварыЕстьРазделители = Ложь;
							
						КонецПопытки;				
						
						Если ТоварыЕстьРазделители Тогда
							
							// выводим построчно
							КоличествоНеВыведенныхСтрок = ДанныеВарианта.Товары.Количество();
							
							Для Каждого СтрокаТовары Из ДанныеВарианта.Товары Цикл
								
								МассивСтрокиТовары = Новый Массив;
								МассивСтрокиТовары.Добавить(СтрокаТовары);
								
								Если СтрокаТовары["ТипСтроки"] = "Разделитель" Тогда
									
									УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьРазделитель,
										 МассивСтрокиТовары,
										 КоличествоНеВыведенныхСтрок = 1);
									
								ИначеЕсли СтрокаТовары["ТипСтроки"] = "ИтогПоРазделу" Тогда
									
									УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма,
										 ОбластьИтогиПоРазделу, МассивСтрокиТовары,
										 КоличествоНеВыведенныхСтрок = 1);
									
								Иначе
									
									УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область,
										 МассивСтрокиТовары,
										 КоличествоНеВыведенныхСтрок = 1);
									
								КонецЕсли;
								
								КоличествоНеВыведенныхСтрок = КоличествоНеВыведенныхСтрок - 1;
								
							КонецЦикла;
							
						Иначе
							
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеВарианта.Товары);
							
						КонецЕсли;
						
						Попытка // Для совместимости с предыдущей версией
							// вывод итогов табличной части.
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблицаТовары"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
							
					КонецЦикла;
					
					// Вывод нижней части документа - обычная область с параметрами.
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
					//ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
					УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
					
				// 2. Печать всего остального
				Иначе
					Если ДанныеОбъекта.Свойство("ТабличныеЧасти") Тогда
						
						ТабличныеЧасти = УпорядочитьИменаТЧПоМакетуMicrosoftWord(ДанныеОбъекта.ТабличныеЧасти, Макет.COMСоединение);
						Для Каждого ИмяТЧ Из ТабличныеЧасти Цикл
							
							// Вывод коллекции данных из информационной базы в виде таблицы.
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицы" + ИмяТЧ + "Текст"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицы" + ИмяТЧ]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблица" + ИмяТЧ]);
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
							Исключение 
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблица" + ИмяТЧ]);
								УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							// Вывод коллекции данных из информационной базы в виде нумерованного списка.
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Шапка" + ИмяТЧ + "Номенклатура"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета][ИмяТЧ + "Номенклатура"]);
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							// Вывод коллекции данных из информационной базы в виде списка.
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Шапка" + ИмяТЧ + "Всего"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета][ИмяТЧ + "Всего"]);
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
						КонецЦикла;
					Иначе
						
						// Вывод коллекции данных из информационной базы в виде таблицы.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТоварыТекст"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						// Вывод коллекции данных из информационной базы в виде нумерованного списка.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыНоменклатура"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыНоменклатура"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						// Вывод коллекции данных из информационной базы в виде списка.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыВсего"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыВсего"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
					КонецЕсли;
					
					// Вывод нижней части документа - обычная область с параметрами.
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
					Исключение  
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
					
				КонецЕсли;
				
				УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма);
			УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
			Возврат Ложь;
		КонецПопытки;
		
		УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма, Ложь);
		УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
		
	КонецЦикла;
	
	Состояние(НСтр("ru='Формирование печатных форм завершено';en='Print from generation is completed'"));
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
	Возврат Неопределено;
	
КонецФункции

Функция CRM_ПечатьДоговорMicrosoftWord(ОписаниеКоманды) Экспорт
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
	Состояние(НСтр("ru='Выполняется формирование печатных форм';en='Generating print forms'"));
	
	Если ОписаниеКоманды.Свойство("НомерВарианта") Тогда
		МакетыИДанные = CRM_УправлениеПечатьюВызовСервера.ПолучитьМакетИДанныеОбъектов("CRM_ПФ_DOC_Договор",
			 ОписаниеКоманды.ОбъектыПечати,
			ОписаниеКоманды.НомерВарианта);
	Иначе
		МакетыИДанные = CRM_УправлениеПечатьюВызовСервера.ПолучитьМакетИДанныеОбъектов("CRM_ПФ_DOC_Договор",
			 ОписаниеКоманды.ОбъектыПечати,
			CRM_УправлениеПечатьюВызовСервера.ПолучитьВариантНаПечатьИзХранилища());
	КонецЕсли;
	
	Для Каждого ОбъектСсылка Из ОписаниеКоманды.ОбъектыПечати Цикл
		ПечатьВнешнегоМакетаMicrosoftWord(ОбъектСсылка, МакетыИДанные, "CRM_ПФ_DOC_Договор",
			 МакетыИДанные.ЛокальныйКаталогФайловПечати);
	КонецЦикла;
	
	Состояние(НСтр("ru='Формирование печатных форм завершено';en='Print from generation is completed'"));
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
	Возврат Неопределено;
	
КонецФункции

Функция CRM_ПечатьКоммерческоеПредложениеOpenOfficeOrgWriter(ОписаниеКоманды) Экспорт
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
	СоставДокументовИВариант = Новый Структура;
	СоставДокументовИВариант.Вставить("СоставДокументов", ОписаниеКоманды.ОбъектыПечати);
	
	Если ОписаниеКоманды.Свойство("НомерВарианта") Тогда
		СоставДокументовИВариант.Вставить("НомерВарианта", ОписаниеКоманды.НомерВарианта);
	Иначе
		СоставДокументовИВариант.Вставить("НомерВарианта",
			 CRM_УправлениеПечатьюВызовСервера.ПолучитьВариантНаПечатьИзХранилища());
	КонецЕсли;
	
	СоставДокументов = ОписаниеКоманды.ОбъектыПечати;
	
	Состояние(НСтр("ru='Выполняется формирование печатных форм';en='Generating print forms'"));
	
	ИмяМакета = "CRM_ПФ_ODT_КоммерческоеПредложение";
	ТипМакета = "odt";
	
	МассивИменМакетов		= СтрРазделить(ИмяМакета, ", ", Ложь);
	МакетИДанныеОбъекта		= CRM_МетодыМодулейМенеджеровДокументовВызовСервера.КП_ПолучитьДанныеПечати(СоставДокументовИВариант,
		 МассивИменМакетов);
	МакетИДанныеОбъекта.Вставить("ЛокальныйКаталогФайловПечати", Неопределено); // Для обратной совместимости.
	
	ДвоичныеДанныеМакетов = МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	
	Области = МакетИДанныеОбъекта.Макеты.ОписаниеОбластей;
	
	Для Каждого ДокументСсылка Из СоставДокументов Цикл
		
		ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ДокументСсылка][ИмяМакета];
		
		Попытка
			
			Макет		  = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакетов[ИмяМакета],
				 ТипМакета,
				 ИмяМакета);
			ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета, Макет.НастройкиСтраницыМакета);
			
			Если Не ПечатнаяФорма = Неопределено И Не Макет = Неопределено Тогда
				
				// Вывод колонтитулов документа.
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ВерхнийКолонтитул"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта);
				
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижнийКолонтитул"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область);
				
				Попытка
					// Вывод верхней части документа - обычная область с параметрами.
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Заголовок"]);
					УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
				Исключение
					ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
				// 1. Печать Коммерческого предложения.
				Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
					
					// Выведем варианты
					ВыводитьСтрокуВарианта = (ДанныеОбъекта["Варианты"].Количество() > 1);
					
					Для Каждого ДанныеВарианта Из ДанныеОбъекта["Варианты"] Цикл
						Если ВыводитьСтрокуВарианта Тогда
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ОписаниеВарианта"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
						КонецЕсли;
						
						// Вывод коллекции данных из информационной базы в виде таблицы.
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
						
						Попытка
							
							ОбластьРазделитель = УправлениеПечатьюКлиент.ОбластьМакета(Макет,
								 Области[ИмяМакета]["СтрокаРазделительТаблицаТовары"]);
							ОбластьИтогиПоРазделу = УправлениеПечатьюКлиент.ОбластьМакета(Макет,
								 Области[ИмяМакета]["СтрокаИтогиПоРазделуТаблицаТовары"]);				
							
							//ТоварыЕстьРазделители = ДанныеВарианта.ЕстьРазделители;
							
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							//ТоварыЕстьРазделители = Ложь;
							
						КонецПопытки;				
						
						ТоварыЕстьРазделители = ДанныеВарианта.ЕстьРазделители;
						
						Если ТоварыЕстьРазделители Тогда
							
							// выводим построчно
							КоличествоНеВыведенныхСтрок = ДанныеВарианта.Товары.Количество();
							
							Для Каждого СтрокаТовары Из ДанныеВарианта.Товары Цикл
								
								МассивСтрокиТовары = Новый Массив;
								МассивСтрокиТовары.Добавить(СтрокаТовары);
								
								Если СтрокаТовары["ТипСтроки"] = "Разделитель" Тогда
									
									УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьРазделитель,
										 МассивСтрокиТовары,
										 КоличествоНеВыведенныхСтрок = 1);
									
								ИначеЕсли СтрокаТовары["ТипСтроки"] = "ИтогПоРазделу" Тогда
									
									УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма,
										 ОбластьИтогиПоРазделу, МассивСтрокиТовары,
										 КоличествоНеВыведенныхСтрок = 1);
									
								Иначе
									
									УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область,
										 МассивСтрокиТовары,
										 КоличествоНеВыведенныхСтрок = 1);
									
								КонецЕсли;
								
								КоличествоНеВыведенныхСтрок = КоличествоНеВыведенныхСтрок - 1;
								
							КонецЦикла;
						Иначе
							
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеВарианта.Товары);
							
						КонецЕсли;
						
						Попытка // Для совместимости с предыдущей версией
						// вывод итогов табличной части.
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблицаТовары"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
					Исключение
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
					КонецЦикла;
					
					// Вывод нижней части документа - обычная область с параметрами.
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
						//ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
						УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
					Исключение
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
	// 2. Печать всего остального
				Иначе
				Если ДанныеОбъекта.Свойство("ТабличныеЧасти") Тогда
						
						ТабличныеЧасти = УпорядочитьИменаТЧПоМакетуOpenOffice(ДанныеОбъекта.ТабличныеЧасти, Макет);
						Для Каждого ИмяТЧ Из ТабличныеЧасти Цикл
							
							// Вывод коллекции данных из информационной базы в виде таблицы.
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицы" + ИмяТЧ + "Текст"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицы" + ИмяТЧ]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблица" + ИмяТЧ]);
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблица" + ИмяТЧ]);
								УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							// Вывод коллекции данных из информационной базы в виде нумерованного списка.
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Шапка" + ИмяТЧ + "Номенклатура"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета][ИмяТЧ + "Номенклатура"]);
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							// Вывод коллекции данных из информационной базы в виде списка.
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Шапка" + ИмяТЧ + "Всего"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета][ИмяТЧ + "Всего"]);
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
						КонецЦикла;
					Иначе
						
						// Вывод коллекции данных из информационной базы в виде таблицы.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТоварыТекст"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						// Вывод коллекции данных из информационной базы в виде нумерованного списка.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыНоменклатура"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыНоменклатура"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						// Вывод коллекции данных из информационной базы в виде списка.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыВсего"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыВсего"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
						Исключение    
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
					КонецЕсли;
					
					// Вывод нижней части документа - обычная область с параметрами.
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
					Исключение
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
					
				КонецЕсли;
				
				УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
			КонецЕсли;
		Исключение
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма);
			УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
			Возврат Ложь;
			
		КонецПопытки;

		УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма, Ложь);
		УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
		
	КонецЦикла;
	
	Состояние(НСтр("ru='Формирование печатных форм завершено';en='Print from generation is completed'"));
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
	Возврат Неопределено;
	
КонецФункции

Функция CRM_ПечатьДоговорOpenOfficeOrgWriter(ОписаниеКоманды) Экспорт
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
	Состояние(НСтр("ru='Выполняется формирование печатных форм';en='Generating print forms'"));
	
	Если ОписаниеКоманды.Свойство("НомерВарианта") Тогда
		МакетыИДанные = CRM_УправлениеПечатьюВызовСервера.ПолучитьМакетИДанныеОбъектов("CRM_ПФ_ODT_Договор",
			 ОписаниеКоманды.ОбъектыПечати,
			ОписаниеКоманды.НомерВарианта);
	Иначе
		МакетыИДанные = CRM_УправлениеПечатьюВызовСервера.ПолучитьМакетИДанныеОбъектов("CRM_ПФ_ODT_Договор",
			 ОписаниеКоманды.ОбъектыПечати,
			CRM_УправлениеПечатьюВызовСервера.ПолучитьВариантНаПечатьИзХранилища());
	КонецЕсли;
	
	Для Каждого ОбъектСсылка Из ОписаниеКоманды.ОбъектыПечати Цикл
		ПечатьВнешнегоМакетаOpenOffice(ОбъектСсылка, МакетыИДанные, "CRM_ПФ_ODT_Договор",
			 МакетыИДанные.ЛокальныйКаталогФайловПечати);
	КонецЦикла;
	
	Состояние(НСтр("ru='Формирование печатных форм завершено';en='Print from generation is completed'"));
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
	Возврат Неопределено;
	
КонецФункции

Функция CRM_ПечатьКоммерческоеПредложение(ОписаниеКоманды) Экспорт
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
	Состояние(НСтр("ru='Выполняется формирование печатных форм';en='Generating print forms'"));
		
	ОтображатьСкидки = Истина;
	Если ОписаниеКоманды.ДополнительныеПараметры.Свойство("ОтображатьСкидки") Тогда
		ОтображатьСкидки = ОписаниеКоманды.ДополнительныеПараметры.ОтображатьСкидки;
	КонецЕсли;
		
	Если ОписаниеКоманды.Свойство("НомерВарианта") Тогда
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.КоммерческоеПредложениеКлиенту",
			 "КоммерческоеПредложениеКлиенту",
			ОписаниеКоманды.ОбъектыПечати, Неопределено, Новый Структура("НомерВарианта, ОтображатьСкидки", ОписаниеКоманды.НомерВарианта, ОтображатьСкидки));
	Иначе
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.КоммерческоеПредложениеКлиенту",
			 "КоммерческоеПредложениеКлиенту",
			ОписаниеКоманды.ОбъектыПечати, Неопределено, Новый Структура("НомерВарианта, ОтображатьСкидки", CRM_УправлениеПечатьюВызовСервера.ПолучитьВариантНаПечатьИзХранилища(), ОтображатьСкидки));
	КонецЕсли;
		
	Состояние(НСтр("ru='Формирование печатных форм завершено';en='Print from generation is completed'"));
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Интерес

Функция CRM_Интерес_ПечатьКоммерческоеПредложениеHTML(ОписаниеКоманды) Экспорт
	
	Если НЕ CRM_УправлениеПечатьюВызовСервера.РазрешитьПечатьИнтереса(ОписаниеКоманды.ОбъектыПечати) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
	Если ОписаниеКоманды.Свойство("НомерВарианта") Тогда
		НомерВарианта = ОписаниеКоманды.НомерВарианта;
	Иначе
		НомерВарианта = CRM_УправлениеПечатьюВызовСервера.ПолучитьВариантНаПечатьИзХранилища();
	КонецЕсли;
	
	Для Каждого ОбъектСсылка Из ОписаниеКоманды.ОбъектыПечати Цикл
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("CRM_ИмяМакета", "Документ.CRM_Интерес.CRM_ПФ_HTML_КоммерческоеПредложение");
		ПараметрыОткрытия.Вставить("ИмяДокумента", Строка(ОбъектСсылка));
		ПараметрыОткрытия.Вставить("Редактирование", Истина);
		ПараметрыОткрытия.Вставить("Печать", Истина);
		ПараметрыОткрытия.Вставить("ОбъектСсылка", ОбъектСсылка);
		ПараметрыОткрытия.Вставить("НомерВарианта", НомерВарианта);
		ОткрытьФорму("Обработка.CRM_РаботаСHTML.Форма.РедакторМакетаHTML", ПараметрыОткрытия,
			 Неопределено,
			 Строка(Новый УникальныйИдентификатор));
		//ПечатьВнешнегоМакетаHTML(ОбъектСсылка, МакетыИДанные, "CRM_ПФ_HTML_Договор",
			// МакетыИДанные.ЛокальныйКаталогФайловПечати);
	КонецЦикла;
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
КонецФункции

Функция CRM_Интерес_ПечатьДоговорHTML(ОписаниеКоманды) Экспорт
	
	Если НЕ CRM_УправлениеПечатьюВызовСервера.РазрешитьПечатьИнтереса(ОписаниеКоманды.ОбъектыПечати) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
	Если ОписаниеКоманды.Свойство("НомерВарианта") Тогда
		НомерВарианта = ОписаниеКоманды.НомерВарианта;
	Иначе
		НомерВарианта = CRM_УправлениеПечатьюВызовСервера.ПолучитьВариантНаПечатьИзХранилища();
	КонецЕсли;
	
	Для Каждого ОбъектСсылка Из ОписаниеКоманды.ОбъектыПечати Цикл
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("CRM_ИмяМакета", "Документ.CRM_Интерес.CRM_ПФ_HTML_Договор");
		ПараметрыОткрытия.Вставить("ИмяДокумента", Строка(ОбъектСсылка));
		ПараметрыОткрытия.Вставить("Редактирование", Истина);
		ПараметрыОткрытия.Вставить("Печать", Истина);
		ПараметрыОткрытия.Вставить("ОбъектСсылка", ОбъектСсылка);
		ПараметрыОткрытия.Вставить("НомерВарианта", НомерВарианта);
		ОткрытьФорму("Обработка.CRM_РаботаСHTML.Форма.РедакторМакетаHTML", ПараметрыОткрытия,
			 Неопределено,
			 Строка(Новый УникальныйИдентификатор));
		//ПечатьВнешнегоМакетаHTML(ОбъектСсылка, МакетыИДанные, "CRM_ПФ_HTML_Договор",
			// МакетыИДанные.ЛокальныйКаталогФайловПечати);
	КонецЦикла;
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
КонецФункции

Функция CRM_Интерес_ПечатьКоммерческоеПредложениеMicrosoftWord(ОписаниеКоманды) Экспорт
	
	Если НЕ CRM_УправлениеПечатьюВызовСервера.РазрешитьПечатьИнтереса(ОписаниеКоманды.ОбъектыПечати) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
	СоставДокументовИВариант = Новый Структура;
	СоставДокументовИВариант.Вставить("СоставДокументов", ОписаниеКоманды.ОбъектыПечати);
	
	СоставДокументовИВариант.Вставить("НомерВарианта", 1);
	
	СоставДокументов = ОписаниеКоманды.ОбъектыПечати;
	
	Состояние(НСтр("ru='Выполняется формирование печатных форм';en='Generating print forms'"));
	
	ИмяМакета = "CRM_ПФ_DOC_КоммерческоеПредложение";
	ТипМакета = "doc";
	
	МассивИменМакетов		= СтрРазделить(ИмяМакета, ", ", Ложь);
	МакетИДанныеОбъекта		= CRM_МетодыМодулейМенеджеровДокументовВызовСервера.Интерес_ПолучитьДанныеПечати(СоставДокументовИВариант,
		 МассивИменМакетов);
	МакетИДанныеОбъекта.Вставить("ЛокальныйКаталогФайловПечати", Неопределено); // Для обратной совместимости.
	
	ДвоичныеДанныеМакетов = МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	
	Области = МакетИДанныеОбъекта.Макеты.ОписаниеОбластей;
	
	Для Каждого ДокументСсылка Из СоставДокументов Цикл
		
		ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ДокументСсылка][ИмяМакета];
		
		Попытка
			Макет		  = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакетов[ИмяМакета],
				 ТипМакета,
				 ИмяМакета);
			ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета,
				 Макет.НастройкиСтраницыМакета,
				 Макет);
			
			Если ПечатнаяФорма <> Неопределено И Макет <> Неопределено Тогда
				
				// Вывод колонтитулов документа.
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ВерхнийКолонтитул"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
				
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижнийКолонтитул"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область);
				
				// Вывод верхней части документа - обычная область с параметрами.
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Заголовок"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
				
				// 1. Печать Коммерческого предложения.
				Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
				
					// Выведем варианты
					ВыводитьСтрокуВарианта = (ДанныеОбъекта["Варианты"].Количество() > 1);
					
					Для Каждого ДанныеВарианта Из ДанныеОбъекта["Варианты"] Цикл
						Если ВыводитьСтрокуВарианта Тогда
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ОписаниеВарианта"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
						КонецЕсли;
						
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
							
						Попытка
							
							ОбластьРазделитель = УправлениеПечатьюКлиент.ОбластьМакета(Макет,
								 Области[ИмяМакета]["СтрокаРазделительТаблицаТовары"]);
							ОбластьИтогиПоРазделу = УправлениеПечатьюКлиент.ОбластьМакета(Макет,
								 Области[ИмяМакета]["СтрокаИтогиПоРазделуТаблицаТовары"]);				
							
							ТоварыЕстьРазделители = ДанныеВарианта.ЕстьРазделители;
							
						Исключение
							
							ТоварыЕстьРазделители = Ложь;
							
						КонецПопытки;				
						
						Если ТоварыЕстьРазделители Тогда
							
							// выводим построчно
							КоличествоНеВыведенныхСтрок = ДанныеВарианта.Товары.Количество();
							
							Для Каждого СтрокаТовары Из ДанныеВарианта.Товары Цикл
								
								МассивСтрокиТовары = Новый Массив;
								МассивСтрокиТовары.Добавить(СтрокаТовары);
								
								Если СтрокаТовары["ТипСтроки"] = "Разделитель" Тогда
									
									УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьРазделитель,
										 МассивСтрокиТовары,
										 КоличествоНеВыведенныхСтрок = 1);
									
								ИначеЕсли СтрокаТовары["ТипСтроки"] = "ИтогПоРазделу" Тогда
									
									УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма,
										 ОбластьИтогиПоРазделу, МассивСтрокиТовары,
										 КоличествоНеВыведенныхСтрок = 1);
									
								Иначе
									
									УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область,
										 МассивСтрокиТовары,
										 КоличествоНеВыведенныхСтрок = 1);
									
								КонецЕсли;
								
								КоличествоНеВыведенныхСтрок = КоличествоНеВыведенныхСтрок - 1;
								
							КонецЦикла;
							
						Иначе
							
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеВарианта.Товары);
							
						КонецЕсли;
						
						Попытка // Для совместимости с предыдущей версией
							// вывод итогов табличной части.
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблицаТовары"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
							
					КонецЦикла;
					
					// Вывод нижней части документа - обычная область с параметрами.
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
					//ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
					УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
					
				// 2. Печать всего остального
				Иначе
					Если ДанныеОбъекта.Свойство("ТабличныеЧасти") Тогда
						
						ТабличныеЧасти = УпорядочитьИменаТЧПоМакетуMicrosoftWord(ДанныеОбъекта.ТабличныеЧасти, Макет.COMСоединение);
						Для Каждого ИмяТЧ Из ТабличныеЧасти Цикл
							
							// Вывод коллекции данных из информационной базы в виде таблицы.
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицы" + ИмяТЧ + "Текст"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицы" + ИмяТЧ]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблица" + ИмяТЧ]);
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблица" + ИмяТЧ]);
								УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
							Исключение 
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							// Вывод коллекции данных из информационной базы в виде нумерованного списка.
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Шапка" + ИмяТЧ + "Номенклатура"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета][ИмяТЧ + "Номенклатура"]);
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							// Вывод коллекции данных из информационной базы в виде списка.
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Шапка" + ИмяТЧ + "Всего"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета][ИмяТЧ + "Всего"]);
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
						КонецЦикла;
					Иначе
						
						// Вывод коллекции данных из информационной базы в виде таблицы.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТоварыТекст"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						// Вывод коллекции данных из информационной базы в виде нумерованного списка.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыНоменклатура"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыНоменклатура"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						// Вывод коллекции данных из информационной базы в виде списка.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыВсего"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыВсего"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
					КонецЕсли;
					
					// Вывод нижней части документа - обычная область с параметрами.
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
					Исключение
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
					
				КонецЕсли;
				
				УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма);
			УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
			Возврат Неопределено;
		КонецПопытки;
		
		УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма, Ложь);
		УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
		
	КонецЦикла;
	
	Состояние(НСтр("ru='Формирование печатных форм завершено';en='Print from generation is completed'"));
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
КонецФункции

Функция CRM_Интерес_ПечатьДоговорMicrosoftWord(ОписаниеКоманды) Экспорт
	
	Если НЕ CRM_УправлениеПечатьюВызовСервера.РазрешитьПечатьИнтереса(ОписаниеКоманды.ОбъектыПечати) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
	Состояние(НСтр("ru='Выполняется формирование печатных форм';en='Generating print forms'"));
	
	МакетыИДанные = CRM_УправлениеПечатьюВызовСервера.ПолучитьМакетИДанныеОбъектов("CRM_ПФ_DOC_Договор",
		 ОписаниеКоманды.ОбъектыПечати,
			1);
	
	Для Каждого ОбъектСсылка Из ОписаниеКоманды.ОбъектыПечати Цикл
		ПечатьВнешнегоМакетаMicrosoftWord(ОбъектСсылка, МакетыИДанные, "CRM_ПФ_DOC_Договор",
			 МакетыИДанные.ЛокальныйКаталогФайловПечати);
	КонецЦикла;
	
	Состояние(НСтр("ru='Формирование печатных форм завершено';en='Print from generation is completed'"));
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
КонецФункции

Функция CRM_Интерес_ПечатьКоммерческоеПредложениеOpenOfficeOrgWriter(ОписаниеКоманды) Экспорт
	
	Если НЕ CRM_УправлениеПечатьюВызовСервера.РазрешитьПечатьИнтереса(ОписаниеКоманды.ОбъектыПечати) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
	СоставДокументовИВариант = Новый Структура;
	СоставДокументовИВариант.Вставить("СоставДокументов", ОписаниеКоманды.ОбъектыПечати);
	СоставДокументовИВариант.Вставить("НомерВарианта", 1);
	
	СоставДокументов = ОписаниеКоманды.ОбъектыПечати;
	
	Состояние(НСтр("ru='Выполняется формирование печатных форм';en='Generating print forms'"));
	
	ИмяМакета = "CRM_ПФ_ODT_КоммерческоеПредложение";
	ТипМакета = "odt";
	
	МассивИменМакетов		= СтрРазделить(ИмяМакета, ", ", Ложь);
	МакетИДанныеОбъекта		= CRM_МетодыМодулейМенеджеровДокументовВызовСервера.Интерес_ПолучитьДанныеПечати(СоставДокументовИВариант,
		 МассивИменМакетов);
	МакетИДанныеОбъекта.Вставить("ЛокальныйКаталогФайловПечати", Неопределено); // Для обратной совместимости.
	
	ДвоичныеДанныеМакетов = МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	
	Области = МакетИДанныеОбъекта.Макеты.ОписаниеОбластей;
	
	Для Каждого ДокументСсылка Из СоставДокументов Цикл
		
		ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ДокументСсылка][ИмяМакета];
		
		Попытка
			
			Макет		  = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакетов[ИмяМакета],
				 ТипМакета,
				 ИмяМакета);
			ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета, Макет.НастройкиСтраницыМакета);
			
			Если Не ПечатнаяФорма = Неопределено И Не Макет = Неопределено Тогда
				
				// Вывод колонтитулов документа.
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ВерхнийКолонтитул"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта);
				
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижнийКолонтитул"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область);
				
				Попытка
					// Вывод верхней части документа - обычная область с параметрами.
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Заголовок"]);
					УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
				Исключение
					ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
				// 1. Печать Коммерческого предложения.
				Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
					
					// Выведем варианты
					ВыводитьСтрокуВарианта = (ДанныеОбъекта["Варианты"].Количество() > 1);
					
					Для Каждого ДанныеВарианта Из ДанныеОбъекта["Варианты"] Цикл
						Если ВыводитьСтрокуВарианта Тогда
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ОписаниеВарианта"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
						КонецЕсли;
						
						// Вывод коллекции данных из информационной базы в виде таблицы.
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
						
						Попытка
							
							ОбластьРазделитель = УправлениеПечатьюКлиент.ОбластьМакета(Макет,
								 Области[ИмяМакета]["СтрокаРазделительТаблицаТовары"]);
							ОбластьИтогиПоРазделу = УправлениеПечатьюКлиент.ОбластьМакета(Макет,
								 Области[ИмяМакета]["СтрокаИтогиПоРазделуТаблицаТовары"]);				
							
							//ТоварыЕстьРазделители = ДанныеВарианта.ЕстьРазделители;
							
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							//ТоварыЕстьРазделители = Ложь;
							
						КонецПопытки;				
						
						ТоварыЕстьРазделители = ДанныеВарианта.ЕстьРазделители;
						
						Если ТоварыЕстьРазделители Тогда
							
							// выводим построчно
							КоличествоНеВыведенныхСтрок = ДанныеВарианта.Товары.Количество();
							
							Для Каждого СтрокаТовары Из ДанныеВарианта.Товары Цикл
								
								МассивСтрокиТовары = Новый Массив;
								МассивСтрокиТовары.Добавить(СтрокаТовары);
								
								Если СтрокаТовары["ТипСтроки"] = "Разделитель" Тогда
									
									УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьРазделитель,
										 МассивСтрокиТовары,
										 КоличествоНеВыведенныхСтрок = 1);
									
								ИначеЕсли СтрокаТовары["ТипСтроки"] = "ИтогПоРазделу" Тогда
									
									УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма,
										 ОбластьИтогиПоРазделу, МассивСтрокиТовары,
										 КоличествоНеВыведенныхСтрок = 1);
									
								Иначе
									
									УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область,
										 МассивСтрокиТовары,
										 КоличествоНеВыведенныхСтрок = 1);
									
								КонецЕсли;
								
								КоличествоНеВыведенныхСтрок = КоличествоНеВыведенныхСтрок - 1;
								
							КонецЦикла;
						Иначе
							
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеВарианта.Товары);
							
						КонецЕсли;
						
						Попытка // Для совместимости с предыдущей версией
						// вывод итогов табличной части.
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблицаТовары"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
					Исключение
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
					КонецЦикла;
					
					// Вывод нижней части документа - обычная область с параметрами.
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
						//ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
						УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
					Исключение
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
	// 2. Печать всего остального
				Иначе
				Если ДанныеОбъекта.Свойство("ТабличныеЧасти") Тогда
						
						ТабличныеЧасти = УпорядочитьИменаТЧПоМакетуOpenOffice(ДанныеОбъекта.ТабличныеЧасти, Макет);
						Для Каждого ИмяТЧ Из ТабличныеЧасти Цикл
							
							// Вывод коллекции данных из информационной базы в виде таблицы.
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицы" + ИмяТЧ + "Текст"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицы" + ИмяТЧ]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблица" + ИмяТЧ]);
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблица" + ИмяТЧ]);
								УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							// Вывод коллекции данных из информационной базы в виде нумерованного списка.
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Шапка" + ИмяТЧ + "Номенклатура"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета][ИмяТЧ + "Номенклатура"]);
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							// Вывод коллекции данных из информационной базы в виде списка.
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Шапка" + ИмяТЧ + "Всего"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета][ИмяТЧ + "Всего"]);
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
							Исключение
								ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
						КонецЦикла;
					Иначе
						
						// Вывод коллекции данных из информационной базы в виде таблицы.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТоварыТекст"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						// Вывод коллекции данных из информационной базы в виде нумерованного списка.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыНоменклатура"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыНоменклатура"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						// Вывод коллекции данных из информационной базы в виде списка.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыВсего"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыВсего"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
						Исключение
							ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
					КонецЕсли;
					
					// Вывод нижней части документа - обычная область с параметрами.
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
					Исключение
						ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));					
					КонецПопытки;
					
				КонецЕсли;
				
				УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
			КонецЕсли;
		Исключение
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма);
			УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
			Возврат Неопределено;
			
		КонецПопытки;

		УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма, Ложь);
		УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
		
	КонецЦикла;
	
	Состояние(НСтр("ru='Формирование печатных форм завершено';en='Print from generation is completed'"));
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
КонецФункции

Функция CRM_Интерес_ПечатьДоговорOpenOfficeOrgWriter(ОписаниеКоманды) Экспорт
	
	Если НЕ CRM_УправлениеПечатьюВызовСервера.РазрешитьПечатьИнтереса(ОписаниеКоманды.ОбъектыПечати) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
	Состояние(НСтр("ru='Выполняется формирование печатных форм';en='Generating print forms'"));
	
	МакетыИДанные = CRM_УправлениеПечатьюВызовСервера.ПолучитьМакетИДанныеОбъектов("CRM_ПФ_ODT_Договор",
		 ОписаниеКоманды.ОбъектыПечати,
			1);
	
	Для Каждого ОбъектСсылка Из ОписаниеКоманды.ОбъектыПечати Цикл
		ПечатьВнешнегоМакетаOpenOffice(ОбъектСсылка, МакетыИДанные, "CRM_ПФ_ODT_Договор",
			 МакетыИДанные.ЛокальныйКаталогФайловПечати);
	КонецЦикла;
	
	Состояние(НСтр("ru='Формирование печатных форм завершено';en='Print from generation is completed'"));
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
КонецФункции

Функция CRM_Интерес_ПечатьКоммерческоеПредложение(ОписаниеКоманды) Экспорт
	
	Если НЕ CRM_УправлениеПечатьюВызовСервера.РазрешитьПечатьИнтереса(ОписаниеКоманды.ОбъектыПечати) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
	Состояние(НСтр("ru='Выполняется формирование печатных форм';en='Generating print forms'"));
		
	ОтображатьСкидки = Истина;
	Если ОписаниеКоманды.ДополнительныеПараметры.Свойство("ОтображатьСкидки") Тогда
		ОтображатьСкидки = ОписаниеКоманды.ДополнительныеПараметры.ОтображатьСкидки;
	КонецЕсли;
		
	Если ОписаниеКоманды.Свойство("НомерВарианта") Тогда
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.CRM_Интерес", "КоммерческоеПредложениеКлиенту",
			ОписаниеКоманды.ОбъектыПечати, Неопределено, Новый Структура("НомерВарианта, ОтображатьСкидки", ОписаниеКоманды.НомерВарианта, ОтображатьСкидки));
	Иначе
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.CRM_Интерес", "КоммерческоеПредложениеКлиенту",
			ОписаниеКоманды.ОбъектыПечати, Неопределено, Новый Структура("НомерВарианта, ОтображатьСкидки", CRM_УправлениеПечатьюВызовСервера.ПолучитьВариантНаПечатьИзХранилища(), ОтображатьСкидки));
	КонецЕсли;
	
	Состояние(НСтр("ru='Формирование печатных форм завершено';en='Print from generation is completed'"));
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
КонецФункции

#КонецОбласти

#Область СчетНаОплату
Функция CRM_ПечатьСчетаНаОплату(ОписаниеКоманды) Экспорт
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
	Состояние(НСтр("ru='Выполняется формирование печатных форм';en='Generating print forms'"));
		
	Если ОписаниеКоманды.ОбъектыПечати.Количество() = 1 Тогда
		ЕстьБанковскийСчет = Ложь;
		
		Источник = ОписаниеКоманды.ОбъектыПечати[0];
		
		ЕстьБанковскийСчет = ЗначениеЗаполнено(CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Источник,
			 "БанковскийСчет")); 
		
		Если Не ЕстьБанковскийСчет Тогда
			
			Организация = Строка(CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Источник, "Организация"));
			
			ЗаголовокДиалога = НСтр("ru='Внимание!';en='Warning!'");  
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не выбран банковский счет организации ""%1""!"
					"Продолжить печать?';en='Not selected the organization bank account ""%1""!"
					"Continue printing?'"),
				Организация);
			ОписаниеОповещения = Новый ОписаниеОповещения("CRM_ПечатьСчетаНаОплатуЗавершение", ЭтотОбъект, ОписаниеКоманды);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,
				 КодВозвратаДиалога.Да,
				 ЗаголовокДиалога);
			Возврат Неопределено;
			
		КонецЕсли;
	КонецЕсли;
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.CRM_СчетНаОплатуПокупателю", "СчетНаОплату",
		ОписаниеКоманды.ОбъектыПечати, Неопределено);
	
	Состояние(НСтр("ru='Формирование печатных форм завершено'"));
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
КонецФункции

Процедура CRM_ПечатьСчетаНаОплатуЗавершение(Ответ, ОписаниеКоманды) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.CRM_СчетНаОплатуПокупателю", "СчетНаОплату",
			ОписаниеКоманды.ОбъектыПечати, Неопределено);
	
	Состояние(НСтр("ru='Формирование печатных форм завершено'"));
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Продажи.Печать.ДлительностьСценариев.ВремяПечати");
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаПечатнойФормыЧерезДиалоги

Процедура ОтправитьВДиалогах(Форма) Экспорт
	
	Если CRM_РаботаСМессенджерамиСервер.ЕстьПодходящиеКонтакты(Форма.ОбъектыПечати[0].Значение) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"Подключаемый_ОтправитьВДиалогахЗавершение", Форма);
		
		ОткрытьФорму(
			"ОбщаяФорма.ВыборФорматаВложений", ,
			Форма.Элементы.Найти("CRM_Служебный"), , , ,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ТекстСообщения = НСтр(
			"en = 'No suitable dialog was found: there is no active dialog, or another user has a dialog in progress.';
			|ru = 'Не найдено подходящего диалога: нет активного диалога, либо диалог в работе у другого пользователя.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры // ОтправитьВДиалогах()

Процедура ОтправитьВДиалогахЗавершение(ПараметрыОтправки) Экспорт
	
	ПараметрыДиалога = CRM_УправлениеПечатьюВызовСервера.ПолучитьПараметрыОткрытияДляМессенджера(
		ПараметрыОтправки.Основание);
	
	ПараметрыДиалога.Вставить("Вложения", ПараметрыОтправки.Вложения);
	
	// Идентификатор нужен для того, чтобы была открыта новая форма диалогов
	ОткрытьФорму(
		"Обработка.CRM_Мессенджер.Форма",
		ПараметрыДиалога,
		ЭтотОбъект,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры // ОтправитьВДиалогахЗавершение()

#КонецОбласти

#Область CRM_Почта

Процедура CRM_Почта_ПечатьЭлектронноеПисьмоHTML(ОбъектыПечати) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("CRM_ИмяМакета", "Документ.ЭлектронноеПисьмоВходящее.CRM_ПФ_HTML_ЭлектронноеПисьмо");
	
	Счетчик = 0;
	ИмяДокумента = "";
	Для Каждого Письмо Из ОбъектыПечати Цикл
		ИмяДокумента = ИмяДокумента + " / " + Строка(Письмо.ОбъектСсылка);
		Счетчик = Счетчик + 1;
		ДлинаИмениТекущая = СтрДлина(ИмяДокумента);
		Если Счетчик = 3 Или ДлинаИмениТекущая > 80 Тогда
			ДлинаИмени = Мин(ДлинаИмениТекущая, 80);
			ИмяДокумента = Лев(ИмяДокумента, ДлинаИмени) + "...";
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ПараметрыОткрытия.Вставить("ИмяДокумента", ИмяДокумента);
	
	ПараметрыОткрытия.Вставить("Редактирование", Ложь);
	ПараметрыОткрытия.Вставить("Печать", Истина);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Истина);
	ПараметрыОткрытия.Вставить("ОбъектСсылка", Неопределено);
	ПараметрыОткрытия.Вставить("ОбъектыПечати", ОбъектыПечати);
	
	ОткрытьФорму("Обработка.CRM_РаботаСHTML.Форма.РедакторМакетаHTML", ПараметрыОткрытия, Неопределено, 
		Строка(Новый УникальныйИдентификатор));
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаКП

Процедура ВыполнитьКомандуОтправкиКП(Знач Источник, Знач Форма, ОтправкаВДиалоги) Экспорт
	
	ТекущийДокумент = Источник;
	Если ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") Тогда
		ТекущийДокумент = Источник.Ссылка;
	КонецЕсли;
	
	Если CRM_ОбщегоНазначенияКлиент.ЭтоМобильныйКлиент() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Невозможно отправить Коммерческое предложение (MS Word/OpenOffice) на мобильном устройстве.'"));
		Возврат;
	КонецЕсли;
	
	Если ОтправкаВДиалоги Тогда
		Если Не CRM_РаботаСМессенджерамиСервер.ЕстьПодходящиеКонтакты(ТекущийДокумент) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(
				"en = 'No suitable dialog was found: there is no active dialog, or another user has a dialog in progress.';
				|ru = 'Не найдено подходящего диалога: нет активного диалога, либо диалог в работе у другого пользователя.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущийДокумент",  ТекущийДокумент);
	ДополнительныеПараметры.Вставить("ОтправкаВДиалоги", ОтправкаВДиалоги);
	ДополнительныеПараметры.Вставить("Источник",         Источник);
	ДополнительныеПараметры.Вставить("Форма",            Форма);
	
	Если ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура")
		И (Источник.Ссылка.Пустая() Или Форма.Модифицированность) Тогда
		
		ТекстВопроса = НСтр("ru = 'Документ еще не проведен.
			|Выполнение отправики Коммерческого предложения (MS Word/OpenOffice) возможно только после проведения документа.
			|Документ будет проведен.'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьКомандуОтправкиКППодтверждениеЗаписи",
			CRM_УправлениеПечатьюКлиент, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьКомандуОтправкиКППодтверждениеЗаписи(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры // ВыполнитьКомандуОтправкиКП()

Процедура ВыполнитьКомандуОтправкиКППодтверждениеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Форма                 = ДополнительныеПараметры.Форма;
	Источник              = ДополнительныеПараметры.Источник;
	ТекущийДокумент       = ДополнительныеПараметры.ТекущийДокумент;
	ОтправкаВДиалоги      = ДополнительныеПараметры.ОтправкаВДиалоги;
	КлючУникальностиФормы = Форма.УникальныйИдентификатор;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Форма.Записать();
		Если Источник.Ссылка.Пустая() Или Форма.Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
	КонецЕсли;
	
	СписокВыбораВарианта =
		CRM_УправлениеПечатьюВызовСервера.ПолучитьСписокВариантовКоммерческогоПредложения(ТекущийДокумент);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Варианты", СписокВыбораВарианта);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущийДокумент",       ТекущийДокумент);
	ДопПараметры.Вставить("ОтправкаВДиалоги",      ОтправкаВДиалоги);
	ДопПараметры.Вставить("КлючУникальностиФормы", КлючУникальностиФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыполнитьКомандуОтправкиКППродолжение",
		ЭтотОбъект,
		ДопПараметры);
	
	ОткрытьФорму(
		"Документ.КоммерческоеПредложениеКлиенту.Форма.CRM_ФормаНастройкаПередОправкой",
		ПараметрыФормы, , , , ,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ВыполнитьКомандуОтправкиКППродолжение(НастройкиСохранения, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(НастройкиСохранения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыНазначения = Новый СписокЗначений;
	ОбъектыНазначения.Добавить(ДополнительныеПараметры.ТекущийДокумент);
	
	МассивДокументов = Новый Массив();
	МассивДокументов.Добавить(ДополнительныеПараметры.ТекущийДокумент);
	
	СтруктураДокументыИВариант = Новый Структура("МассивДокументов", МассивДокументов);
	
	СписокИменФайлов = Новый СписокЗначений();
	
	МассивФайлов_ODT = Новый Массив();
	МассивФайлов_DOC = Новый Массив();
	
	Если НастройкиСохранения.ФорматODT Тогда
		СтруктураДокументыИВариант.Вставить("НомерВарианта", НастройкиСохранения.НомерВарианта);
		
		ТекстСообщения = НСтр("ru='Выполняется формирование документа...';en='Formation of the document are fulfill...'");
		
		Состояние(ТекстСообщения);
		
		МакетOpenOffice = НастройкиСохранения.МакетOpenOffice;
		
		Если МакетOpenOffice	= "CRM_ПФ_ODT_КоммерческоеПредложение" Тогда
			МакетИДанныеОбъекта = CRM_ОбщегоНазначенияСервер.CRM_ПолучитьМакетыИДанныеОбъектов(
				МакетOpenOffice, ОбъектыНазначения, НастройкиСохранения.НомерВарианта);
		Иначе
			МакетИДанныеОбъекта = CRM_ОбщегоНазначенияСервер.CRM_ПолучитьВнешниеМакетыИДанныеОбъектов(
				МакетOpenOffice, ОбъектыНазначения, НастройкиСохранения.НомерВарианта);
		КонецЕсли;
		
		СформироватьДокументOpenOffice(
			ДополнительныеПараметры.ТекущийДокумент,
			МакетИДанныеОбъекта,
			"CRM_ПФ_ODT_КоммерческоеПредложение",
			МакетИДанныеОбъекта.ЛокальныйКаталогФайловПечати,
			МассивФайлов_ODT);
		
		#Если Не ВебКлиент Тогда
		Если МассивФайлов_ODT.Количество() > 0 Тогда
			Для Каждого ИмяФайлаСтруктура Из МассивФайлов_ODT Цикл
				Если НастройкиСохранения.ЗапаковатьZIP Тогда
					СписокИменФайлов.Добавить(ИмяФайлаСтруктура.ИмяФайла);
				Иначе
					АдресВХранилище = ПоместитьВоВременноеХранилище(
						Новый ДвоичныеДанные(ИмяФайлаСтруктура.ИмяФайла),
						ДополнительныеПараметры.КлючУникальностиФормы);
					
					СписокИменФайлов.Добавить(АдресВХранилище, НСтр("ru='Коммерческое предложение';en='Quote'") + ".odt");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	
	Если НастройкиСохранения.ФорматDOC Тогда
		СтруктураДокументыИВариант.Вставить("НомерВарианта", НастройкиСохранения.НомерВарианта);
		
		ТекстСообщения = НСтр("ru='Выполняется формирование документа...';en='Formation of the document are fulfill...'");
		
		Состояние(ТекстСообщения);
		
		МакетMS = НастройкиСохранения.МакетMS;
		
		Если МакетMS = "CRM_ПФ_DOC_КоммерческоеПредложение" Тогда
			МакетИДанныеОбъекта = CRM_ОбщегоНазначенияСервер.CRM_ПолучитьМакетыИДанныеОбъектов(
				МакетMS, ОбъектыНазначения, НастройкиСохранения.НомерВарианта);
		Иначе
			МакетИДанныеОбъекта = CRM_ОбщегоНазначенияСервер.CRM_ПолучитьВнешниеМакетыИДанныеОбъектов(
				МакетMS, ОбъектыНазначения, НастройкиСохранения.НомерВарианта);
		КонецЕсли;
		
		СформироватьДокумент(
			ДополнительныеПараметры.ТекущийДокумент,
			МакетИДанныеОбъекта,
			МакетMS,
			МакетИДанныеОбъекта.ЛокальныйКаталогФайловПечати,
			МассивФайлов_DOC);
		
		#Если Не ВебКлиент Тогда
		Если МассивФайлов_DOC.Количество() > 0 Тогда
			Для Каждого ИмяФайлаСтруктура Из МассивФайлов_DOC Цикл
				Если НастройкиСохранения.ЗапаковатьZIP Тогда
					СписокИменФайлов.Добавить(ИмяФайлаСтруктура.ИмяФайла);
				Иначе
					АдресВХранилище = ПоместитьВоВременноеХранилище(
						Новый ДвоичныеДанные(ИмяФайлаСтруктура.ИмяФайла),
						ДополнительныеПараметры.КлючУникальностиФормы);
					
					СписокИменФайлов.Добавить(АдресВХранилище, НСтр("ru='Коммерческое предложение';en='Quote'") + ".doc");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
	Если СписокИменФайлов.Количество() > 0 Тогда
		Если ДополнительныеПараметры.ОтправкаВДиалоги Тогда
			СписокФайловВложений = Новый Массив;
		Иначе
			СписокФайловВложений = Новый СписокЗначений;
		КонецЕсли;
		
		Если НастройкиСохранения.ЗапаковатьZIP Тогда
			СтруктураВложения = ПолучитьАрхив(
				СписокИменФайлов,
				ДополнительныеПараметры.КлючУникальностиФормы);
			
			Если ДополнительныеПараметры.ОтправкаВДиалоги Тогда
				СтруктураВложения = Новый Структура(
					"АдресВоВременномХранилище, Представление",
					СтруктураВложения.ПутьВоВременномХранилище,
					НСтр("ru='Коммерческое предложение';en='Quote'") + ".zip");
				
				СписокФайловВложений.Добавить(СтруктураВложения);
			Иначе
				СписокФайловВложений.Добавить(
					СтруктураВложения.ПутьВоВременномХранилище, НСтр("ru='Коммерческое предложение';en='Quote'") + ".zip");
			КонецЕсли;
		Иначе
			Для Каждого ЭлементСписка Из СписокИменФайлов Цикл
				Если ДополнительныеПараметры.ОтправкаВДиалоги Тогда
					СтруктураВложения = Новый Структура;
					СтруктураВложения.Вставить("АдресВоВременномХранилище", ЭлементСписка.Значение);
					СтруктураВложения.Вставить("Представление", ЭлементСписка.Представление);
					
					СписокФайловВложений.Добавить(СтруктураВложения);
				Иначе
					СписокФайловВложений.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ДополнительныеПараметры.ОтправкаВДиалоги Тогда
			ПараметрыФормы = CRM_УправлениеПечатьюВызовСервера.ПолучитьПараметрыОткрытияДляМессенджера(
				ДополнительныеПараметры.ТекущийДокумент);
			
			ПараметрыФормы.Вставить("Вложения", СписокФайловВложений);
			
			ИмяФормы = "Обработка.CRM_Мессенджер.Форма";
		Иначе
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Основание",	ДополнительныеПараметры.ТекущийДокумент);
			ПараметрыФормы.Вставить("Вложения",		СписокФайловВложений);
			
			ИмяФормы = "Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта";
		КонецЕсли;
		
		ОткрытьФорму(ИмяФормы, ПараметрыФормы, , Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Для НомерСтроки = 0 По МассивФайлов_ODT.ВГраница() Цикл
		Попытка
			УдалитьФайлы(МассивФайлов_ODT[НомерСтроки].ИмяФайла);
		Исключение 
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	Для НомерСтроки = 0 По МассивФайлов_DOC.ВГраница() Цикл
		Попытка
			УдалитьФайлы(МассивФайлов_DOC[НомерСтроки].ИмяФайла);
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	#КонецЕсли
	
КонецПроцедуры // ОбработкаКомандыПродолжение()

Процедура СформироватьДокумент(
		ДокументСсылка,
		МакетИДанныеОбъекта,
		ИмяМакета,
		ЛокальныйКаталогФайловПечати,
		МассивФайлов)
	
	ТипМакета				= МакетИДанныеОбъекта.Макеты.ТипыМакетов[ИмяМакета];
	ДвоичныеДанныеМакетов	= МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	Области					= МакетИДанныеОбъекта.Макеты.ОписаниеОбластей;
	
	ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ДокументСсылка][ИмяМакета];
	
	Попытка
		Макет		  = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакетов[ИмяМакета],
			 ТипМакета,
			 ИмяМакета);
		ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета,
			 Макет.НастройкиСтраницыМакета,
			 Макет);
		ИмяВременногоФайла = КаталогВременныхФайлов() + "Коммерческое предложение.doc";
		
		Если ПечатнаяФорма <> Неопределено И Макет <> Неопределено Тогда
			
			// Вывод колонтитулов документа.
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ВерхнийКолонтитул"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
			
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижнийКолонтитул"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область);
			
			// Вывод верхней части документа - обычная область с параметрами.
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Заголовок"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
			
			// Выведем варианты
			ВыводитьСтрокуВарианта = (ДанныеОбъекта["Варианты"].Количество() > 1);
			
			Для Каждого ДанныеВарианта Из ДанныеОбъекта["Варианты"] Цикл
				Если ВыводитьСтрокуВарианта Тогда
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ОписаниеВарианта"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
					Исключение
						Область = Неопределено;
					КонецПопытки;
				КонецЕсли;
				
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
				
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
				
				Попытка
					
					ОбластьРазделитель = УправлениеПечатьюКлиент.ОбластьМакета(Макет,
						 Области[ИмяМакета]["СтрокаРазделительТаблицаТовары"]);
					ОбластьИтогиПоРазделу = УправлениеПечатьюКлиент.ОбластьМакета(Макет,
						 Области[ИмяМакета]["СтрокаИтогиПоРазделуТаблицаТовары"]);				
					
					ТоварыЕстьРазделители = ДанныеВарианта.ЕстьРазделители;
					
				Исключение
					
					ТоварыЕстьРазделители = Ложь;
					
				КонецПопытки;				
				
				Если ТоварыЕстьРазделители Тогда
					
					// выводим построчно
					КоличествоНеВыведенныхСтрок = ДанныеВарианта.Товары.Количество();
					
					Для Каждого СтрокаТовары Из ДанныеВарианта.Товары Цикл
						
						МассивСтрокиТовары = Новый Массив;
						МассивСтрокиТовары.Добавить(СтрокаТовары);
						
						Если СтрокаТовары["ТипСтроки"] = "Разделитель" Тогда
							
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьРазделитель,
								 МассивСтрокиТовары,
								 КоличествоНеВыведенныхСтрок = 1);
							
						ИначеЕсли СтрокаТовары["ТипСтроки"] = "ИтогПоРазделу" Тогда
							
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьИтогиПоРазделу,
								 МассивСтрокиТовары,
								 КоличествоНеВыведенныхСтрок = 1);
							
						Иначе
							
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область,
								 МассивСтрокиТовары,
								 КоличествоНеВыведенныхСтрок = 1);
							
						КонецЕсли;
						
						КоличествоНеВыведенныхСтрок = КоличествоНеВыведенныхСтрок - 1;
						
					КонецЦикла;
					
				Иначе
					
					УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеВарианта.Товары);
					
				КонецЕсли;
				
				Попытка // Для совместимости с предыдущей версией
					// вывод итогов табличной части.
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблицаТовары"]);
					УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
				Исключение
					Продолжить;
				КонецПопытки;
				
			КонецЦикла;
			
			// Вывод нижней части документа - обычная область с параметрами.
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
			//ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
			УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);

			COMСоединение = ПечатнаяФорма.COMСоединение;
			COMСоединение.Application.Visible = Ложь;
			COMСоединение.Application.Selection.Collapse();
			//COMСоединение.ActiveDocument.Save();
			COMСоединение.ActiveDocument.SaveAs(ИмяВременногоФайла, 0);
			COMСоединение.ActiveDocument.Close();
			COMСоединение.Quit();

			МассивФайлов.Добавить(Новый Структура("ИмяФайла,ДокументСсылка", ИмяВременногоФайла, ДокументСсылка));
			
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма);
		УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
		Возврат;
	КонецПопытки;
	
	УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма, Ложь);
	УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
	
КонецПроцедуры

Процедура СформироватьДокументOpenOffice(
		ДокументСсылка,
		МакетИДанныеОбъекта,
		ИмяМакета,
		ЛокальныйКаталогФайловПечати,
		МассивФайлов)
	
	ТипМакета				= МакетИДанныеОбъекта.Макеты.ТипыМакетов[ИмяМакета];
	ДвоичныеДанныеМакетов	= МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	Области					= МакетИДанныеОбъекта.Макеты.ОписаниеОбластей;
	
	ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ДокументСсылка][ИмяМакета];
	
	Попытка
		Макет = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакетов[ИмяМакета],
			 ТипМакета,
			 ИмяМакета);
		ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета, Макет.НастройкиСтраницыМакета);
		
		ИмяВременногоФайла = КаталогВременныхФайлов() + "Коммерческое предложение.odt";
		
		Если Не ПечатнаяФорма = Неопределено И Не Макет = Неопределено Тогда
			
			// Вывод колонтитулов документа.
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ВерхнийКолонтитул"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта);
			
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижнийКолонтитул"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область);
			
			// Вывод верхней части документа - обычная область с параметрами.
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Заголовок"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
			
			// Выведем варианты
			ВыводитьСтрокуВарианта = (ДанныеОбъекта["Варианты"].Количество() > 1);
			
			Для Каждого ДанныеВарианта Из ДанныеОбъекта["Варианты"] Цикл
				Если ВыводитьСтрокуВарианта Тогда
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ОписаниеВарианта"]);
					УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
				КонецЕсли;
				
				// Вывод коллекции данных из информационной базы в виде таблицы.
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
				
				Попытка
					
					ОбластьРазделитель = УправлениеПечатьюКлиент.ОбластьМакета(Макет,
						 Области[ИмяМакета]["СтрокаРазделительТаблицаТовары"]);
					ОбластьИтогиПоРазделу = УправлениеПечатьюКлиент.ОбластьМакета(Макет,
						 Области[ИмяМакета]["СтрокаИтогиПоРазделуТаблицаТовары"]);
					
					ТоварыЕстьРазделители = ДанныеВарианта.ЕстьРазделители;
					
				Исключение
					
					ТоварыЕстьРазделители = Ложь;
					
				КонецПопытки;
				
				Если ТоварыЕстьРазделители Тогда
					
					// выдим построчно
					КоличествоНеВыведенныхСтрок = ДанныеВарианта.Товары.Количество();
					
					Для Каждого СтрокаТовары Из ДанныеВарианта.Товары Цикл
						
						МассивСтрокиТовары = Новый Массив;
						МассивСтрокиТовары.Добавить(СтрокаТовары);
						
						Если СтрокаТовары["ТипСтроки"] = "Разделитель" Тогда
							
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьРазделитель,
								 МассивСтрокиТовары,
								 КоличествоНеВыведенныхСтрок = 1);
							
						ИначеЕсли СтрокаТовары["ТипСтроки"] = "ИтогПоРазделу" Тогда
							
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьИтогиПоРазделу,
								 МассивСтрокиТовары,
								 КоличествоНеВыведенныхСтрок = 1);
							
						Иначе
							
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область,
								 МассивСтрокиТовары,
								 КоличествоНеВыведенныхСтрок = 1);
							
						КонецЕсли;
						
						КоличествоНеВыведенныхСтрок = КоличествоНеВыведенныхСтрок - 1;
						
					КонецЦикла;
					
				Иначе
					
					УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеВарианта.Товары);
					
				КонецЕсли;
				
				Попытка // Для совместимости с предыдущей версией
				// вывод итогов табличной части.
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблицаТовары"]);
					УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
				Исключение
					Продолжить;
				КонецПопытки;
				
			КонецЦикла;
			
			// Вывод нижней части документа - обычная область с параметрами.
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
			#Если НЕ ВебКлиент И НЕ МобильныйКлиент Тогда
			Args = Новый COMSafeArray("VT_VARIANT", 1);
			ПечатнаяФорма.Document.storeToURL(ПривестиФайлКУРЛ(ИмяВременногоФайла), Args);
			#КонецЕсли
			МассивФайлов.Добавить(Новый Структура("ИмяФайла,ДокументСсылка", ИмяВременногоФайла, ДокументСсылка));
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма);
		УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
		Возврат;
	КонецПопытки;
	
	УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
	ПечатнаяФорма.Document.Close(0);
	ПечатнаяФорма.Desktop.terminate();
	ПечатнаяФорма.Document = Неопределено;
	ПечатнаяФорма.Desktop = Неопределено;
	ПечатнаяФорма.ServiceManager = Неопределено;
	
КонецПроцедуры

Функция ПривестиФайлКУРЛ(Знач ПутьКФайлу = "")
	
	ПутьКФайлу = СтрЗаменить(ПутьКФайлу, " ", "%20");
	ПутьКФайлу = СтрЗаменить(ПутьКФайлу, "\", "/");
	
	Возврат "file:/" + "/localhost/" + ПутьКФайлу;
	
КонецФункции // ПривестиФайлКУРЛ()

Функция ПолучитьАрхив(СписокИменФайлов, Знач Ид)
	
	#Если Не ВебКлиент И Не МобильныйКлиент Тогда
		ИмяАрхива		= ПолучитьИмяВременногоФайла("zip");
		ЗаписьZipФайла	= Новый ЗаписьZipФайла(ИмяАрхива);
		
		Для Каждого ЭлементСписка Из СписокИменФайлов Цикл
			ЗаписьZipФайла.Добавить(ЭлементСписка.Значение);
		КонецЦикла;
		
		ЗаписьZipФайла.Записать();
		
		ФайлАрхива		= Новый Файл(ИмяАрхива);
		ДвоичныеДанные	= Новый ДвоичныеДанные(ИмяАрхива);
		
		ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Ид);
		
		Возврат Новый Структура("ПутьВоВременномХранилище, Имя", ПутьВоВременномХранилище, ФайлАрхива.Имя);
	#Иначе
		Возврат Новый Структура("ПутьВоВременномХранилище, Имя", "", "");
	#КонецЕсли
	
КонецФункции // ПолучитьАрхив()

#КонецОбласти

#КонецОбласти
