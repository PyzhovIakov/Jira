#Область СлужебныйПрограммныйИнтерфейс

// Определяет, встроена ли в конфигурацию подсистема БСП "Обсуждения" и не подключена ли еще система "Взаимодействия".
// 
// Возвращаемое значение:
// 	Булево - Истина, если обсуждения подключены.
Функция ЕстьВозможностьПодключенияОбсуждений() Экспорт
	
	Результат = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Обсуждения") Тогда
		МодульОбсужденияСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбсужденияСлужебный");
		Если Не МодульОбсужденияСлужебный.Подключены() Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Преобразует представление адреса в структуру полей адреса, используемую в форматах ФНС
//
// Параметры:
//   АдресОрганизации - Строка - Представление адреса
//
// Возвращаемое значение:
//  Структура - структура полей адреса:
// * Индекс          - Строка - индекс
// * Регион          - Строка - Регион
// * КодРегиона      - Строка - КодРегиона
// * Район           - Строка - Район
// * Город           - Строка - Город
// * НаселенныйПункт - Строка - НаселенныйПункт
// * Улица           - Строка - Улица
// * Дом             - Строка - Дом
// * Корпус          - Строка - Корпус
// * Квартира        - Строка - Квартира
//
Функция СведенияОбАдресеПоПредставлению(АдресОрганизации) Экспорт
	
	ДанныеОрганизации = Новый Структура;
	ДанныеОрганизации.Вставить("Индекс"         , "");
	ДанныеОрганизации.Вставить("Регион"         , "");
	ДанныеОрганизации.Вставить("КодРегиона"     , "");
	ДанныеОрганизации.Вставить("Район"          , "");
	ДанныеОрганизации.Вставить("Город"          , "");
	ДанныеОрганизации.Вставить("НаселенныйПункт", "");
	ДанныеОрганизации.Вставить("Улица"          , "");
	ДанныеОрганизации.Вставить("Дом"            , "");
	ДанныеОрганизации.Вставить("Корпус"         , "");
	ДанныеОрганизации.Вставить("Квартира"       , "");
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат ДанныеОрганизации;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
	
	ДополнительныеПараметры = Новый Структура("БезПредставлений, ПроверитьАдрес, КодыАдреса", Истина, Истина, Истина);
	ТипыКонтактнойИнформации = Перечисления["ТипыКонтактнойИнформации"];
	АдресXML = МодульУправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
		АдресОрганизации, ТипыКонтактнойИнформации["Адрес"]);
	АдресСтруктурой = МодульРаботаСАдресами.СведенияОбАдресе(АдресXML, ДополнительныеПараметры);
	
	Если АдресСтруктурой.Свойство("Индекс") Тогда
		ДанныеОрганизации.Индекс = АдресСтруктурой.Индекс;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Регион") Тогда
		ДанныеОрганизации.Регион = АдресСтруктурой.Регион;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("КодРегиона") Тогда
		ДанныеОрганизации.КодРегиона = АдресСтруктурой.КодРегиона;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Район") Тогда
		ДанныеОрганизации.Район = АдресСтруктурой.Район;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Город") Тогда
		ДанныеОрганизации.Город = АдресСтруктурой.Город;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("НаселенныйПункт") Тогда
		ДанныеОрганизации.НаселенныйПункт = АдресСтруктурой.НаселенныйПункт;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Улица") Тогда
		ДанныеОрганизации.Улица = АдресСтруктурой.Улица;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Здание") И ЗначениеЗаполнено(АдресСтруктурой.Здание) Тогда
		ДанныеОрганизации.Дом = АдресСтруктурой.Здание.Номер;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Корпуса") И ЗначениеЗаполнено(АдресСтруктурой.Корпуса) Тогда
		ДанныеОрганизации.Корпус = АдресСтруктурой.Корпуса[0].Номер;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Помещения") И ЗначениеЗаполнено(АдресСтруктурой.Помещения) Тогда
		ДанныеОрганизации.Квартира = АдресСтруктурой.Помещения[0].Номер;
	КонецЕсли;
	
	Возврат ДанныеОрганизации;
	
КонецФункции

// Преобразует значение адреса  в структуру полей адреса, используемую в форматах ФНС
// 
// Параметры:
// 	ЗначениеАдреса - Строка - строка JSON или XML контактной информации, соответствующая XDTO-пакету КонтактнаяИнформация.
// Возвращаемое значение:
//  Структура - структура полей адреса:
// * Индекс          - Строка - индекс
// * Регион          - Строка - Регион
// * КодРегиона      - Строка - КодРегиона
// * Район           - Строка - Район
// * Город           - Строка - Город
// * НаселенныйПункт - Строка - НаселенныйПункт
// * Улица           - Строка - Улица
// * Дом             - Строка - Дом
// * Корпус          - Строка - Корпус
// * Квартира        - Строка - Квартира
Функция СведенияОбАдресеПоЗначению(Знач ЗначениеАдреса) Экспорт
	
	ДанныеОрганизации = Новый Структура;
	ДанныеОрганизации.Вставить("Индекс"         , "");
	ДанныеОрганизации.Вставить("Регион"         , "");
	ДанныеОрганизации.Вставить("КодРегиона"     , "");
	ДанныеОрганизации.Вставить("Район"          , "");
	ДанныеОрганизации.Вставить("Город"          , "");
	ДанныеОрганизации.Вставить("НаселенныйПункт", "");
	ДанныеОрганизации.Вставить("Улица"          , "");
	ДанныеОрганизации.Вставить("Дом"            , "");
	ДанныеОрганизации.Вставить("Корпус"         , "");
	ДанныеОрганизации.Вставить("Квартира"       , "");
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат ДанныеОрганизации;
	КонецЕсли;
	
	МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
	
	ДополнительныеПараметры = Новый Структура("БезПредставлений, ПроверитьАдрес, КодыАдреса", Истина, Истина, Истина);
	АдресСтруктурой = МодульРаботаСАдресами.СведенияОбАдресе(ЗначениеАдреса, ДополнительныеПараметры);
	
	Если АдресСтруктурой.Свойство("Индекс") Тогда
		ДанныеОрганизации.Индекс = АдресСтруктурой.Индекс;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Регион") Тогда
		ДанныеОрганизации.Регион = АдресСтруктурой.Регион;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("КодРегиона") Тогда
		ДанныеОрганизации.КодРегиона = АдресСтруктурой.КодРегиона;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Район") Тогда
		ДанныеОрганизации.Район = АдресСтруктурой.Район;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Город") Тогда
		ДанныеОрганизации.Город = АдресСтруктурой.Город;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("НаселенныйПункт") Тогда
		ДанныеОрганизации.НаселенныйПункт = АдресСтруктурой.НаселенныйПункт;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Улица") Тогда
		ДанныеОрганизации.Улица = АдресСтруктурой.Улица;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Здание") И ЗначениеЗаполнено(АдресСтруктурой.Здание) Тогда
		ДанныеОрганизации.Дом = АдресСтруктурой.Здание.Номер;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Корпуса") И ЗначениеЗаполнено(АдресСтруктурой.Корпуса) Тогда
		ДанныеОрганизации.Корпус = АдресСтруктурой.Корпуса[0].Номер;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Помещения") И ЗначениеЗаполнено(АдресСтруктурой.Помещения) Тогда
		ДанныеОрганизации.Квартира = АдресСтруктурой.Помещения[0].Номер;
	КонецЕсли;
	
	Возврат ДанныеОрганизации;
	
КонецФункции

// Получает сведения элемента контактной информации переданного объекта.
// 
// Параметры:
// 	Объект - ЛюбаяСсылка - ссылка на объект, контактную информацию которого нужно получить.
// 	ТипВидКонтактнойИнформацииСтрокой - Строка - строковый идентификатор типа контактной информации или вида.
// Возвращаемое значение:
//  Структура - сведения элемента контактной информации:
// * Значение - Строка - строка JSON или XML контактной информации, соответствующая XDTO-пакету КонтактнаяИнформация.
// * Представление - Строка - представление элемента контактной информации.
Функция КонтактнаяИнформацияОбъекта(Объект, ТипВидКонтактнойИнформацииСтрокой) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Значение",      "");
	Результат.Вставить("Представление", "");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда

		ТипКонтактнойИнформации = Неопределено;
		ВидКонтактнойИнформации = Неопределено;
		
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");

		МетаданныеТипыКонтактнойИнформации = Метаданные.Перечисления.Найти("ТипыКонтактнойИнформации");
		ТипКонтактнойИнформации = МетаданныеТипыКонтактнойИнформации.ЗначенияПеречисления.Найти(
			ТипВидКонтактнойИнформацииСтрокой);
		Если ТипКонтактнойИнформации = Неопределено Тогда
			ВидКонтактнойИнформации = ОбщегоНазначенияБЭД.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации",
				ТипВидКонтактнойИнформацииСтрокой);
		Иначе
			ТипКонтактнойИнформации = Перечисления["ТипыКонтактнойИнформации"][ТипВидКонтактнойИнформацииСтрокой];
		КонецЕсли;		

		Если ЗначениеЗаполнено(ТипКонтактнойИнформации) ИЛИ ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
			МассивОбъектов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект);
			КонтактнаяИнформацияОбъекта = МодульУправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
				МассивОбъектов, ТипКонтактнойИнформации, ВидКонтактнойИнформации, ТекущаяДатаСеанса());

			Если КонтактнаяИнформацияОбъекта.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(Результат, КонтактнаяИнформацияОбъекта[0]);
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет, является ли пользователь недействительным. 
// 
// Параметры:
// 	КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики - если передан, в него будет добавлена ошибка.
// Возвращаемое значение:
// 	Булево - Истина, если пользователь является недействительным.
Функция ПользовательНедействителен(КонтекстДиагностики = Неопределено) Экспорт
	
	ПользовательНедействителен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Пользователи.ТекущийПользователь(), "Недействителен");
	
	Если ПользовательНедействителен И КонтекстДиагностики <> Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Выполнение операции недоступно для недействительного пользователя'");
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(НСтр("ru = 'Обмен с контрагентами'"),
			ИнтеграцияБСПБЭДСлужебныйКлиентСервер.ВидОшибкиНедействительныйПользователь(), ТекстСообщения, ТекстСообщения);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ЭлектронноеВзаимодействие);
	КонецЕсли;
	
	Возврат ПользовательНедействителен;
	
КонецФункции

// Возвращает пустую ссылку справочника Пользователи.
// 
// Возвращаемое значение:
// 	СправочникСсылка.Пользователи - значение ссылки.
Функция ПустаяСсылкаНаПользователя() Экспорт
	Возврат Справочники.Пользователи.ПустаяСсылка();
КонецФункции

// Возвращает пустую ссылку справочника ИдентификаторыОбъектовМетаданных.
// 
// Возвращаемое значение:
// 	СправочникСсылка.ИдентификаторыОбъектовМетаданных - значение ссылки.
Функция ПустойИдентификаторОбъектаМетаданных() Экспорт
	Возврат Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
КонецФункции

// Возвращает описание типа, в которое включен справочник идентификаторов объектов метаданных.
// 
// Возвращаемое значение:
// 	ОписаниеТипов - описание типов.
Функция ОписаниеТипаИдентификатораОбъектаМетаданных() Экспорт
	Возврат Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных");
КонецФункции

// Преобразует номер к виду, допустимому для печати.
// 
// Параметры:
// 	Номер - Строка - номер в исходном виде.
// Возвращаемое значение:
//  Строка - номер, готовый к печати.
Функция ПредставлениеНомераОбъектаУчета(Номер) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрефиксацияОбъектов") Тогда
		МодульПрефиксацияОбъектовКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПрефиксацияОбъектовКлиентСервер");
		Возврат МодульПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер);
	КонецЕсли;
	
	Возврат Номер;
	
КонецФункции

// Возвращает таблицу команд печати, которые имеют менеджеры.
// 
// Параметры:
// 	ОбъектМетаданных - ОбъектМетаданных - объект метаданных, по которому нужно получить команды печати.
// Возвращаемое значение:
// 	ТаблицаЗначений - см. УправлениеПечатью.КомандыПечатиОбъекта.
Функция КомандыПечатиСМенеджерамиПечати(ОбъектМетаданных) Экспорт

	Если УправлениеПечатью.ИсточникиКомандПечати().Найти(ОбъектМетаданных) = Неопределено Тогда
		Возврат УправлениеПечатью.СоздатьКоллекциюКомандПечати();
	КонецЕсли;		
	
	// АПК:277-выкл Не проверять вызов другой подсистемы, вызов вместо КомандыПечатиФормы необходим для получения всех команд
	КомандыПечати = УправлениеПечатью.КомандыПечатиОбъекта(ОбъектМетаданных); 
	// АПК:277-вкл
	
	ДоступныеКомандыПечати = КомандыПечати.Скопировать();
	ДоступныеКомандыПечати.Очистить();
	
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		Если ЗначениеЗаполнено(КомандаПечати.МенеджерПечати) Тогда
			ДоступнаяКомандПечати = ДоступныеКомандыПечати.Добавить();
			ЗаполнитьЗначенияСвойств(ДоступнаяКомандПечати, КомандаПечати);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДоступныеКомандыПечати;
	
КонецФункции

// Команды печати формы объекта.
// 
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных
//  ИмяФормыОбъекта - Строка - Имя формы объекта, для которой необходимо получить команды печати
//                             Если не заполнена, по получает печатные формы для основной формы объекта
// 
// Возвращаемое значение:
//  ТаблицаЗначений -  - см. УправлениеПечатью.КомандыПечатиОбъекта
Функция КомандыПечатиФормыОбъекта(ОбъектМетаданных, ИмяФормыОбъекта) Экспорт
	
	Если УправлениеПечатью.ИсточникиКомандПечати().Найти(ОбъектМетаданных) = Неопределено Тогда
		Возврат УправлениеПечатью.СоздатьКоллекциюКомандПечати();
	КонецЕсли;		
	
	Если Не ЗначениеЗаполнено(ИмяФормыОбъекта) Тогда
		ПолноеИмяФормы = ОбъектМетаданных.ОсновнаяФормаОбъекта.Имя;
	Иначе
		ПолноеИмяФормы = ИмяФормыОбъекта;
	КонецЕсли;
	
	СписокОбъектов = Новый Массив();
	СписокОбъектов.Добавить(ОбъектМетаданных);
	
	КомандыПечати = УправлениеПечатью.КомандыПечатиФормы(ПолноеИмяФормы, СписокОбъектов);
	
	ДоступныеКомандыПечати = КомандыПечати.Скопировать();
	ДоступныеКомандыПечати.Очистить();
	
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		Если ЗначениеЗаполнено(КомандаПечати.МенеджерПечати) Тогда
			ДоступнаяКомандПечати = ДоступныеКомандыПечати.Добавить();
			ЗаполнитьЗначенияСвойств(ДоступнаяКомандПечати, КомандаПечати);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДоступныеКомандыПечати;
	
КонецФункции

// Возвращает данные валюты по классификатору ОКВ.
// 
// Параметры:
// 	КодВалюты - Строка
// Возвращаемое значение:
// 	Структура - данные валюты:
// * КодВалютыЦифровой - Строка 
// * КодВалютыБуквенный - Строка 
// * Наименование - Строка
//  Неопределено - возвращается в случае, если не удалось получить данные классификатора. 
Функция ДанныеВалютыПоКлассификатору(КодВалюты) Экспорт

	Результат = Неопределено;
	
	ДанныеКлассификатора = ИнтеграцияБСПБЭДПовтИсп.ДанныеКлассификатораВалют();
	Если ДанныеКлассификатора <> Неопределено И ДанныеКлассификатора.Количество() Тогда
		СтрокаВалюты = ДанныеКлассификатора.Найти(КодВалюты, "КодВалютыЦифровой");
		
		Если СтрокаВалюты <> Неопределено Тогда
			Результат = Новый Структура("КодВалютыЦифровой, КодВалютыБуквенный, Наименование");
			ЗаполнитьЗначенияСвойств(Результат, СтрокаВалюты);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает список объектов метаданных, в которых внедрена подсистема Печать.
//
// Возвращаемое значение:
//  Массив - список из элементов типа ОбъектМетаданных.
//
Функция ИсточникиКомандПечати() Экспорт
	
	Источники = Новый Массив;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
		Источники = МодульУправлениеПечатью.ИсточникиКомандПечати()
	КонецЕсли;
	
	Возврат Источники;
	
КонецФункции

// Возвращает описание запроса, в результате которого будут содержаться заказанные, но еще не полученные сертификаты.
// Запрос содержит следующие поля:
//   * Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат.
//   * Организация - ОпределяемыйТип.Организация - организация.
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка - таблица, в которую будет помещен результат запроса
// Возвращаемое значение:
// 	см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросНеполученныхСертификатов(ИмяВременнойТаблицы) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сертификаты.Ссылка,
	|	Сертификаты.Организация
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаявленияНаВыпускСертификата КАК ЗаявленияНаВыпускСертификата
	|		ПО Сертификаты.Ссылка = ЗаявленияНаВыпускСертификата.Сертификат
	|ГДЕ
	|	ЗаявленияНаВыпускСертификата.СостояниеЗаявления = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявленияНаВыпускСертификата.Отправлено)";
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса, ИмяВременнойТаблицы, "", "");
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

Функция ЗапросСертификатов(ИмяВременнойТаблицы, ВыбираемыеПоля, ПоляУсловия,
	ТолькоНепомеченныеНаУдаление = Истина, ТолькоДействительные = Истина, ОтборПоПользователям = Неопределено) Экспорт
	
	Если ПоляУсловия = Неопределено Тогда
		ПоляУсловия = Новый Массив;
	КонецЕсли;
	Если ТолькоНепомеченныеНаУдаление Тогда
		ПоляУсловия.Добавить("НЕ Сертификаты.ПометкаУдаления");
	КонецЕсли;
	Если ТолькоДействительные Тогда
		ПоляУсловия.Добавить("НЕ Сертификаты.Отозван");
	КонецЕсли;
	
	ТекстыЗапросов = Новый Массив;
	Если ОтборПоПользователям <> Неопределено
		И (ОтборПоПользователям.ДоступныеТекущемуПользователю <> Неопределено
			Или ЗначениеЗаполнено(ОтборПоПользователям.ДополнительныеПользователиДляОтбора)) Тогда
		ТекстЗапросаПоПользователям = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сертификаты.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ СертификатыПоПользователям
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|ГДЕ
		|	&УсловиеПоПользователям
		|	И НЕ Сертификаты.Пользователи.НомерСтроки > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сертификаты.Ссылка
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователи КАК Сертификаты
		|ГДЕ
		|	&УсловиеПоПользователям";
		Условие = ?(ОтборПоПользователям.ДоступныеТекущемуПользователю <> Ложь,
			"Сертификаты.Пользователь В (&ДоступенПользователям)",
			"НЕ Сертификаты.Пользователь  В (&ДоступенПользователям)");
		ТекстЗапросаПоПользователям = СтрЗаменить(ТекстЗапросаПоПользователям, "&УсловиеПоПользователям", Условие);
		ТекстыЗапросов.Добавить(ТекстЗапросаПоПользователям);
		ПоляУсловия.Добавить("Ссылка В (ВЫБРАТЬ Ссылка ИЗ СертификатыПоПользователям)");
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ВыбираемыеПоля
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаявленияНаВыпускСертификата КАК ЗаявленияНаВыпускСертификата
	|		ПО Сертификаты.Ссылка = ЗаявленияНаВыпускСертификата.Сертификат
	|ГДЕ
	|	&ПоляУсловия";
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ИтоговыйТекстЗапроса = СтрСоединить(ТекстыЗапросов, Символы.ПС + ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ИтоговыйТекстЗапроса = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ИтоговыйТекстЗапроса, ИмяВременнойТаблицы, 
		ВыбираемыеПоля, ПоляУсловия, "Сертификаты");
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ИтоговыйТекстЗапроса;
	
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ТекущаяДата", ТекущаяДатаСеанса());
	Если ОтборПоПользователям <> Неопределено Тогда
		ОписаниеЗапроса.СлужебныеПараметры.Вставить("ДоступенПользователям", ОтборПоПользователям.Пользователи);
	КонецЕсли;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Параметры:
//  Сертификаты - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//
// Возвращаемое значение:
//  Массив из ХранилищеЗначения
Функция ДанныеНеотозванныхСертификатов(Сертификаты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сертификаты.ДанныеСертификата КАК ДанныеСертификата
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|ГДЕ
		|	Сертификаты.Ссылка В (&Сертификаты)
		|	И НЕ Сертификаты.Отозван";
	Запрос.УстановитьПараметр("Сертификаты", Сертификаты);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДанныеСертификата");
	
КонецФункции

// Параметры:
//  Сертификаты - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//
// Возвращаемое значение:
//  Число
Функция КоличествоОтозванныхСертификатов(Сертификаты) Экспорт
	
	Результат = 0;
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Сертификаты.Ссылка) КАК КоличествоСертификатов
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|ГДЕ
		|	Сертификаты.Ссылка В (&Сертификаты)
		|	И Сертификаты.Отозван";
	Запрос.УстановитьПараметр("Сертификаты", Сертификаты);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.КоличествоСертификатов;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ВыбранныеСертификаты - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// 
// Возвращаемое значение:
//	Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
Функция ОтозванныеСертификаты(ВыбранныеСертификаты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Сертификат
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка В(&ВыбранныеСертификаты)
		|	И СертификатыКлючейЭлектроннойПодписиИШифрования.Отозван";
	Запрос.УстановитьПараметр("ВыбранныеСертификаты", ВыбранныеСертификаты);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сертификат");
	
КонецФункции

// Возвращает описания программ криптографии, добавленные в справочник ПрограммыЭлектроннойПодписиИШифрования.
// 
// Возвращаемое значение:
// 	Массив из см. ЭлектроннаяПодпись.НовоеОписаниеПрограммы
Функция ОписанияПрограммЭлектроннойПодписиИШифрования() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрограммыЭлектроннойПодписиИШифрования.ИмяПрограммы КАК ИмяПрограммы,
		|	ПрограммыЭлектроннойПодписиИШифрования.ТипПрограммы КАК ТипПрограммы
		|ИЗ
		|	Справочник.ПрограммыЭлектроннойПодписиИШифрования КАК ПрограммыЭлектроннойПодписиИШифрования
		|ГДЕ
		|	ПрограммыЭлектроннойПодписиИШифрования.ИмяПрограммы <> """"
		|	И НЕ ПрограммыЭлектроннойПодписиИШифрования.ПометкаУдаления";
	
	НаборОписаний = Новый Массив;
	
	Для Каждого Программа Из Запрос.Выполнить().Выгрузить() Цикл
		
		Описание = ЭлектроннаяПодпись.НовоеОписаниеПрограммы();
		ЗаполнитьЗначенияСвойств(Описание, Программа);
		НаборОписаний.Добавить(Описание);
		
	КонецЦикла;
	
	Возврат НаборОписаний;
	
КонецФункции

// Возвращает установленные подписи объектов.
// 
// Параметры:
//  ПодписанныеОбъекты - ОпределяемыйТип.ПодписанныйОбъект
//                     - ТаблицаЗначений:
//                       * ПодписанныйОбъект - ОпределяемыйТип.ПодписанныйОбъект
//                       * ПорядковыйНомер - Число
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.ПодписанныйОбъект
//  * Значение - Массив из см. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  
Функция УстановленныеПодписиОбъектов(ПодписанныеОбъекты) Экспорт
	СвойстваПодписейОбъектов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныеПодписи.ПодписанныйОбъект КАК ПодписанныйОбъект,
		|	ЭлектронныеПодписи.Подпись КАК Подпись,
		|	ЭлектронныеПодписи.ПорядковыйНомер КАК ПорядковыйНомер,
		|	ЭлектронныеПодписи.УстановившийПодпись КАК УстановившийПодпись,
		|	ЭлектронныеПодписи.Комментарий КАК Комментарий,
		|	ЭлектронныеПодписи.ИмяФайлаПодписи КАК ИмяФайлаПодписи,
		|	ЭлектронныеПодписи.ДатаПодписи КАК ДатаПодписи,
		|	ЭлектронныеПодписи.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи,
		|	ЭлектронныеПодписи.ПодписьВерна КАК ПодписьВерна,
		|	ЭлектронныеПодписи.Сертификат КАК Сертификат,
		|	ЭлектронныеПодписи.Отпечаток КАК Отпечаток,
		|	ЭлектронныеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
		|	ЭлектронныеПодписи.ПропуститьПриПродлении КАК ПропуститьПриПродлении,
		|	ЭлектронныеПодписи.ИдентификаторПодписи КАК ИдентификаторПодписи,
		|	ЭлектронныеПодписи.ТипПодписи КАК ТипПодписи,
		|	ЭлектронныеПодписи.СрокДействияПоследнейМеткиВремени КАК СрокДействияПоследнейМеткиВремени
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|ГДЕ
		|	ЭлектронныеПодписи.ПодписанныйОбъект В (&ПодписанныеОбъекты)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПодписанныйОбъект,
		|	ПорядковыйНомер";
	
	Если ТипЗнч(ПодписанныеОбъекты) = Тип("ТаблицаЗначений") Тогда
		ТекстыЗапросов = Новый Массив; // Массив из Строка
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	ПодписанныеОбъекты.ПодписанныйОбъект КАК ПодписанныйОбъект,
			|	ПодписанныеОбъекты.ПорядковыйНомер КАК ПорядковыйНомер
			|ПОМЕСТИТЬ ПодписанныеОбъекты
			|ИЗ
			|	&ПодписанныеОбъекты КАК ПодписанныеОбъекты
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ПодписанныйОбъект");
		ТекстыЗапросов.Добавить(СтрЗаменить(Запрос.Текст,
			"ЭлектронныеПодписи.ПодписанныйОбъект В (&ПодписанныеОбъекты)",
			"(ЭлектронныеПодписи.ПодписанныйОбъект, ЭлектронныеПодписи.ПорядковыйНомер) В
			|	(ВЫБРАТЬ ПодписанныйОбъект, ПорядковыйНомер ИЗ ПодписанныеОбъекты)"));
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПодписанныеОбъекты", ПодписанныеОбъекты);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СвойстваПодписейОбъектов;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СвойстваПодписей = СвойстваПодписейОбъектов[Выборка.ПодписанныйОбъект];
		Если СвойстваПодписей = Неопределено Тогда
			СвойстваПодписей = Новый Массив;
			СвойстваПодписейОбъектов.Вставить(Выборка.ПодписанныйОбъект, СвойстваПодписей);
		КонецЕсли;
		
		СвойстваПодписи = КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи();
		ЗаполнитьЗначенияСвойств(СвойстваПодписи, Выборка);
		СвойстваПодписи.Подпись = СвойстваПодписи.Подпись.Получить();
		СвойстваПодписи.Сертификат = СвойстваПодписи.Сертификат.Получить();
		СвойстваПодписей.Добавить(СвойстваПодписи);
		
	КонецЦикла;
	
	Возврат СвойстваПодписейОбъектов;
	
КонецФункции

// Определяет, являются ли сертификаты облачными.
// 
// Параметры:
// 	Сертификаты - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение:
//   * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//   * Значение - Булево - сертификат облачный
Функция ЭтоСертификатыОблачногоСервиса(Сертификаты) Экспорт
	ВозвращаемоеЗначение = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток КАК Отпечаток,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ПрограммыЭлектроннойПодписиИШифрования.ЭтоВстроенныйКриптопровайдер, ЛОЖЬ)
		|	ИЛИ &ЭтоУчетнаяЗаписьDSS КАК ЭтоПрограммаОблачногоСервиса
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрограммыЭлектроннойПодписиИШифрования КАК ПрограммыЭлектроннойПодписиИШифрования
		|		ПО СертификатыКлючейЭлектроннойПодписиИШифрования.Программа = ПрограммыЭлектроннойПодписиИШифрования.Ссылка
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка В (&Ссылка)";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодписьСервисаDSS") Тогда
		ТекстПоляПрограммыУчетнойЗаписиDSS = "Программа ССЫЛКА Справочник.УчетныеЗаписиDSS";
	Иначе
		ТекстПоляПрограммыУчетнойЗаписиDSS = "ЛОЖЬ";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЭтоУчетнаяЗаписьDSS", ТекстПоляПрограммыУчетнойЗаписиDSS);
	Запрос.УстановитьПараметр("Ссылка", Сертификаты);
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ОтпечаткиВСервисе = КриптографияБЭДСлужебный.ПолучитьОтпечаткиСертификатовВСервисе().Отпечатки;
	
	Пока Выборка.Следующий() Цикл
		
		ЭтоОблачныйСертификат = Ложь;
		
		Если Выборка.ЭтоПрограммаОблачногоСервиса 
			Или ОтпечаткиВСервисе.Найти(Выборка.Отпечаток) <> Неопределено Тогда
			
			ЭтоОблачныйСертификат = Истина;
			
		КонецЕсли;
		
		ВозвращаемоеЗначение.Вставить(Выборка.Ссылка, ЭтоОблачныйСертификат);
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Параметры:
// 	Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// 	Реквизиты  - Строка - имена реквизитов, перечисленные через запятую, в формате требований к свойствам структуры.
//                        Доступные реквизиты прописаны в см.КонтроллируемыеРеквизитыСертификатов .
// Возвращаемое значение:
//  см. ОбщегоНазначения.ЗначенияРеквизитовОбъекта
//
Функция ЗначениеРеквизитовСертификата(Сертификат, Реквизиты) Экспорт
	
	КонтроллируемыеРеквизиты = КонтроллируемыеРеквизитыСертификатов();
	
	Реквизиты = СтрРазделить(Реквизиты, ",", Ложь);
	Для Индекс = 0 По Реквизиты.ВГраница() Цикл
		Если КонтроллируемыеРеквизиты.Найти(ВРег(СокрЛП(Реквизиты[Индекс]))) = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Запрашиваемый реквизит сертификата не найден в списке контроллируемых реквизитов.'");
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сертификат, Реквизиты);
	
КонецФункции

// Параметры:
// 	СтранаМира - СправочникСсылка.СтраныМира
// Возвращаемое значение:
//  см. ОбщегоНазначения.ЗначениеРеквизитаОбъекта
//
Функция КодСтраны(СтранаМира) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтранаМира, "Код");
КонецФункции

// Параметры:
//  НовыйСтатус - Булево
Процедура ИзменитьИспользованиеПроверкиЭлектронныхПодписейНаСервере(НовыйСтатус) Экспорт
	
	Если ЭлектроннаяПодпись.ПроверятьЭлектронныеПодписиНаСервере() <> НовыйСтатус Тогда
		Константы.ПроверятьЭлектронныеПодписиНаСервере.Установить(НовыйСтатус);
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращаемое значение:
//  Массив из Строка - Перечень реквизитов в верхнем регистре, которые читает БЭД из
//                     см. СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//
Функция КонтроллируемыеРеквизитыСертификатов()
	
	Массив = Новый Массив;
	Массив.Добавить(ВРег("Пользователь"));
	Массив.Добавить(ВРег("Организация"));
	
	Возврат Массив;
	
КонецФункции
