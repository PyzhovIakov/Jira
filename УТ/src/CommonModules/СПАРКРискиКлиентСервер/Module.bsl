///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "СПАРК".
// ОбщийМодуль.СПАРКРискиКлиент.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ИндексыСПАРККонтрагента

// Функция по значению индекса выдает цвет.
// Значения цветов должны соответствовать элементам стиля:
//  ЦветГрадацияСПАРКНизкийРиск, ЦветГрадацияСПАРКСреднийРиск, ЦветГрадацияСПАРКВысокийРиск.
//
// Параметры:
//  ЗначениеИндекса - Число, NULL, Неопределено - числовое значение индекса;
//  ИмяИндекса      - Строка - одно из значений:
//                      - ИндексДолжнойОсмотрительности,
//                      - ИндексПлатежнойДисциплины,
//                      - ИндексФинансовогоРиска
//                      - СводныйИндикатор.
//
// Возвращаемое значение:
//   Цвет - цвет текста по значению индекса.
//
Функция ЦветИндекса(ЗначениеИндекса, ИмяИндекса) Экспорт

	// АПК:1346-выкл
	// Для изменения цветов индексов следует использовать методы общего модуля СПАРКРискиКлиентСерверПереопределяемый.

	Результат = Новый Цвет;

	ТипЧисло = Тип("Число");
	
	// Определение интервалов индексов СПАРК Риски.
	Если ТипЗнч(ЗначениеИндекса) = ТипЧисло Тогда
		Если ВРег(ИмяИндекса) = ВРег("ИндексДолжнойОсмотрительности") Тогда
			Если ЗначениеИндекса >= 0 И ЗначениеИндекса <= 40 Тогда
				Результат = Новый Цвет(0, 128, 0); // ЦветаСтиля.ЦветГрадацияСПАРКНизкийРиск.
			ИначеЕсли ЗначениеИндекса >= 41 И ЗначениеИндекса <= 71 Тогда
				Результат = Новый Цвет(255, 128, 0); // ЦветаСтиля.ЦветГрадацияСПАРКСреднийРиск.
			ИначеЕсли ЗначениеИндекса >= 72 И ЗначениеИндекса <= 100 Тогда
				Результат = Новый Цвет(255, 40, 40); // ЦветаСтиля.ЦветГрадацияСПАРКВысокийРиск.
			КонецЕсли;
		ИначеЕсли ВРег(ИмяИндекса) = ВРег("ИндексПлатежнойДисциплины") Тогда
			Если ЗначениеИндекса >= 0 И ЗначениеИндекса <= 49 Тогда
				Результат = Новый Цвет(255, 40, 40); // ЦветаСтиля.ЦветГрадацияСПАРКВысокийРиск.
			ИначеЕсли ЗначениеИндекса >= 50 И ЗначениеИндекса <= 79 Тогда
				Результат = Новый Цвет(255, 128, 0); // ЦветаСтиля.ЦветГрадацияСПАРКСреднийРиск.
			ИначеЕсли ЗначениеИндекса >=80 И ЗначениеИндекса <=100 Тогда
				Результат = Новый Цвет(0, 128, 0); // ЦветаСтиля.ЦветГрадацияСПАРКНизкийРиск.
			КонецЕсли;
		ИначеЕсли ВРег(ИмяИндекса) = ВРег("ИндексФинансовогоРиска") Тогда
			Если ЗначениеИндекса >= 0 И ЗначениеИндекса <= 30 Тогда
				Результат = Новый Цвет(0, 128, 0); // ЦветаСтиля.ЦветГрадацияСПАРКНизкийРиск.
			ИначеЕсли ЗначениеИндекса >= 31 И ЗначениеИндекса <= 70 Тогда
				Результат = Новый Цвет(255, 128, 0); // ЦветаСтиля.ЦветГрадацияСПАРКСреднийРиск.
			ИначеЕсли ЗначениеИндекса >= 71 И ЗначениеИндекса <= 100 Тогда
				Результат = Новый Цвет(255, 40, 40); // ЦветаСтиля.ЦветГрадацияСПАРКВысокийРиск.
			КонецЕсли;
		ИначеЕсли ВРег(ИмяИндекса) = ВРег("СводныйИндикатор") Тогда
			Если ЗначениеИндекса <= 1 Тогда
				Результат = Новый Цвет(0, 128, 0); // ЦветаСтиля.ЦветГрадацияСПАРКНизкийРиск.
			ИначеЕсли ЗначениеИндекса = 2 Тогда
				Результат = Новый Цвет(255, 128, 0); // ЦветаСтиля.ЦветГрадацияСПАРКСреднийРиск.
			ИначеЕсли ЗначениеИндекса = 3 Тогда
				Результат = Новый Цвет(255, 40, 40); // ЦветаСтиля.ЦветГрадацияСПАРКВысокийРиск.
			КонецЕсли;
		КонецЕсли;
	Иначе
		Результат = Новый Цвет(128, 128, 128); // Серый цвет
	КонецЕсли;
	
	// АПК:1346-вкл

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

Функция АдресСтраницыОписанияСервисаСПАРКРиски() Экспорт
	
	Возврат ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыПорталаПоддержки(
		"/app/1spark-risks",
		0);
	
КонецФункции

Функция АдресСтраницыКомпанииНаМониторинге() Экспорт
	
	Возврат ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыПорталаПоддержки(
		"/application/1C-Spark-risks/sub/getMonitoringOrganizations?needAccessToken=true",
		0);
	
КонецФункции

Функция АдресСтраницыТарифовСервисаНаПортале1С() Экспорт
	
	Возврат ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыПорталаПоддержки(
		"/app/1spark-risks#prices");
	
КонецФункции

Функция НовыйСвойстваКонтрагента() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИНН"             , "");
	Результат.Вставить("ПодлежитПроверке", Ложь);
	Результат.Вставить("СвояОрганизация" , Ложь);
	Результат.Вставить("ВидКонтрагента"  , Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваКонтрагентаВОбъекте(КонтрагентОбъект, Форма = Неопределено) Экспорт
	
	Результат = НовыйСвойстваКонтрагента();
	
	СПАРКРискиКлиентСерверПереопределяемый.ПриОпределенииСвойствКонтрагентаВОбъекте(
		КонтрагентОбъект,
		Форма,
		Результат);
	
	Результат.ИНН = СокрЛП(Результат.ИНН);
	
	Если Не ЗначениеЗаполнено(Результат.ВидКонтрагента) Тогда
		Результат.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентовСПАРКРиски.ЮридическоеЛицо");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторСервиса() Экспорт
	
	Возврат "1C-Spark-risks";
	
КонецФункции

#КонецОбласти

#Область ИндексыСПАРККонтрагента

// Возвращает структуру для хранения индексов и других показателей для контрагента.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Структура - Структура возвращаемых данных с ключами:
//     * Контрагент                                          - ОпределяемыеТипы.КонтрагентБИП - контрагент;
//     * ВидКонтрагента                                      - ПеречислениеСсылка.ВидыКонтрагентовСПАРКРиски - виды контрагента в СПАРК;
//     * ИНН                                                 - Строка;
//     * ПодлежитПроверке                                    - Булево;
//     * СводныйИндикатор                                    - Число - Сводный индикатор риска;
//     * ИндексДолжнойОсмотрительности                       - Число - Индекс должной осмотрительности;
//     * ИДОГрадация                                         - ПеречислениеСсылка.ГрадацияИндексовСПАРКРиски - Градация индекса должной осмотрительности;
//     * ИндексФинансовогоРиска                              - Число - Индекс финансового результата;
//     * ИФРГрадация                                         - ПеречислениеСсылка.ГрадацияИндексовСПАРКРиски - Градация индекса финансового результата;
//     * ИндексПлатежнойДисциплины                           - Число - Индекс платежной дисциплины;
//     * ИПДГрадация                                         - ПеречислениеСсылка.ГрадацияИндексовСПАРКРиски - Градация индекса платежной дисциплины;
//     * БухгалтерскаяОтчетность                             - Число - признак выгрузки отчетности в СПАРК. 1 - есть отчетность за последние 400 дней;
//     * СводныйИндикаторАдресКомандыПодсказки               - Строка - адрес команды подсказки;
//     * ИДОАдресКомандыПодсказки                            - Строка - адрес команды подсказки;
//     * ИФРАдресКомандыПодсказки                            - Строка - адрес команды подсказки;
//     * ИПДАдресКомандыПодсказки                            - Строка - адрес команды подсказки;
//     * БухгалтерскаяОтчетностьАдресКомандыПодсказки        - Строка - адрес команды подсказки;
//     * СводныйИндикаторНавигационнаяСсылкаПодсказки        - Строка - навигационная ссылка подсказки;
//     * ИДОНавигационнаяСсылкаПодсказки                     - Строка - навигационная ссылка подсказки;
//     * ИФРНавигационнаяСсылкаПодсказки                     - Строка - навигационная ссылка подсказки;
//     * ИПДНавигационнаяСсылкаПодсказки                     - Строка - навигационная ссылка подсказки;
//     * БухгалтерскаяОтчетностьНавигационнаяСсылкаПодсказки - Строка - навигационная ссылка подсказки;
//     * ПодключитьНавигационнаяСсылкаПодсказки              - Строка - навигационная ссылка подсказки;
//     * ОписаниеСтатусаНавигационнаяСсылкаПодсказки         - Строка - навигационная ссылка подсказки;
//     * НетИнформацииНавигационнаяСсылкаПодсказки           - Строка - навигационная ссылка подсказки;
//     * ПерейтиКПокупкеСервиса                              - Строка - навигационная ссылка для перехода к подсказке;
//     * ПоказатьЗначенияИндексов                            - Строка - навигационная ссылка для перехода к форме просмотра индексов;
//     * Активен                                             - Булево;
//     * ОтображатьСтатус                                    - Булево;
//     * Статус                                              - СправочникСсылка.ТипыСобытийСПАРКРиски;
//     * СтатусНазвание                                      - Строка;
//     * Критичное                                           - Булево;
//     * ДатаСтатуса                                         - Дата;
//     * ВидОшибки                                           - ПеречислениеСсылка.ВидыОшибокСПАРКРиски;
//     * ТекстОшибки                                         - Строка;
//     * ДатаОбновления                                      - Дата;
//     * ДанныеАутентификацииЗаполнены                       - Булево
//     * РаботаВМоделиСервиса                                - Булево
//     * СостояниеВыводаДанных                               - Перечисления.СостоянияВыводаИндексовСПАРКРиски;
//     * СостояниеЗагрузкиДанных                             - Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски;
//     * ИдентификаторФоновогоЗадания                        - Уникальный идентификатор, Неопределено - в случае, если данных нет в кеше,
//                                                             то будет запущено фоновое задание получения данных и вернется идентификатор
//                                                             запущенного фонового задания;
//     * АдресХранилищаФоновогоЗадания                       - Строка - адрес временного хранилища, куда фоновое задание поместит результат;
//     * ДатаЗаполненияКлиентскогоКэша                       - Дата - для хранения маркера времени в клиентском кэше.
//     * Уведомление                                         - Структура, Неопределено - данные уведомления
//                                                             Портала 1С:ИТС по опции.
//
Функция НовыйДанныеИндексов() Экспорт

	Результат = Новый Структура();

	// Основные данные.
	Результат.Вставить("Контрагент", Неопределено);
	Результат.Вставить("ИНН", "");
	Результат.Вставить("ПодлежитПроверке", Ложь);
	// Индексы.
	Результат.Вставить("СводныйИндикатор", -1);
	Результат.Вставить("ИндексДолжнойОсмотрительности", -1);
	Результат.Вставить("ИндексФинансовогоРиска", -1);
	Результат.Вставить("ИндексПлатежнойДисциплины", -1);
	Результат.Вставить("БухгалтерскаяОтчетность", 0);
	Результат.Вставить("Активен", Ложь);
	Результат.Вставить("ОтображатьСтатус", Ложь);
	Результат.Вставить("Статус", ПредопределенноеЗначение("Справочник.ТипыСобытийСПАРКРиски.ПустаяСсылка"));
	Результат.Вставить("Критичное", Ложь);
	Результат.Вставить("СтатусНазвание", "");
	Результат.Вставить("ДатаСтатуса", '00010101');
	// Адреса и навигационные ссылки команд.
	Результат.Вставить("СводныйИндикаторАдресКомандыПодсказки",               "e1cib/command/Обработка.СправкаСПАРКРиски.Команда.ЧтоТакоеСводныйИндикаторРиска");
	Результат.Вставить("ИДОАдресКомандыПодсказки",                            "e1cib/command/Обработка.СправкаСПАРКРиски.Команда.ЧтоТакоеИндексДолжнойОсмотрительности");
	Результат.Вставить("ИФРАдресКомандыПодсказки",                            "e1cib/command/Обработка.СправкаСПАРКРиски.Команда.ЧтоТакоеИндексФинансовогоРиска");
	Результат.Вставить("ИПДАдресКомандыПодсказки",                            "e1cib/command/Обработка.СправкаСПАРКРиски.Команда.ЧтоТакоеИндексПлатежнойДисциплины");
	Результат.Вставить("БухгалтерскаяОтчетностьАдресКомандыПодсказки",        "e1cib/command/Обработка.СправкаСПАРКРиски.Команда.ЧтоТакоеБухгалтерскаяОтчетность");
	Результат.Вставить("СводныйИндикаторНавигационнаяСсылкаПодсказки",        "SPARK:WhatIsCompositeIndex");
	Результат.Вставить("ИДОНавигационнаяСсылкаПодсказки",                     "SPARK:WhatIsIndexOfDueDiligence");
	Результат.Вставить("ИФРНавигационнаяСсылкаПодсказки",                     "SPARK:WhatIsFailureScore");
	Результат.Вставить("ИПДНавигационнаяСсылкаПодсказки",                     "SPARK:WhatIsPaymentIndex");
	Результат.Вставить("БухгалтерскаяОтчетностьНавигационнаяСсылкаПодсказки", "SPARK:WhatIsAccountingStatements");
	Результат.Вставить("ПодключитьНавигационнаяСсылкаПодсказки",              "SPARK:ConnectTrialTariff");
	Результат.Вставить("ОписаниеСтатусаНавигационнаяСсылкаПодсказки",         "SPARK:OpenStatusDescription");
	Результат.Вставить("НетИнформацииНавигационнаяСсылкаПодсказки",           "SPARK:NoInformation");
	Результат.Вставить("ПоказатьЗначенияИндексов",                            "SPARK:ShowIndexValues");
	Результат.Вставить("ПерейтиКПокупкеСервиса",                              "SPARK:BuyService");
	Результат.Вставить("ОткрытьУведомление",                                  "SPARK:Notifications");
	
	// Прочее.
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ИдентификаторФоновогоЗадания",            Неопределено);
	Результат.Вставить("АдресХранилищаФоновогоЗадания",           Неопределено);
	Результат.Вставить("ДатаЗаполненияКлиентскогоКэша",          '00010101');
	Результат.Вставить("ДоступностьПодключенияТестовогоПериода",  "");
	Результат.Вставить("ОшибкаПриПроверкеТестовогоПериода",       Ложь);
	Результат.Вставить("ДанныеАутентификацииЗаполнены",           Ложь);
	Результат.Вставить("РаботаВМоделиСервиса",                    Ложь);
	Результат.Вставить("ВидКонтрагента",                          Неопределено);

	// Индексы.
	Результат.Вставить("СводныйИндикаторГрадация", ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.ПустаяСсылка"));
	Результат.Вставить("ИДОГрадация",              ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.ПустаяСсылка"));
	Результат.Вставить("ИФРГрадация",              ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.ПустаяСсылка"));
	Результат.Вставить("ИПДГрадация",              ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.ПустаяСсылка"));
	
	// Уведомление Монитора Портала 1С:ИТС.
	Результат.Вставить("Уведомление", Неопределено);
	
	// Прочее.
	Результат.Вставить("ВидОшибки",               ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ПустаяСсылка"));
	Результат.Вставить("СостояниеВыводаДанных",   ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПустаяСсылка"));
	Результат.Вставить("СостояниеЗагрузкиДанных", ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка"));

	// После вызова функции необходимо самостоятельно дозаполнить ключ ДатаОбновления:
	//  ТекущаяДатаСеанса() - для сервера или ОбщегоНазначенияКлиент.ДатаСеанса() - для клиента.
	Результат.Вставить("ДатаОбновления", '00010101');

	Возврат Результат;

КонецФункции

// Возвращает структуру для хранения представлений индексов и других показателей для контрагента.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Структура - Структура возвращаемых данных с ключами:
//     * Заголовок                       - ФорматированнаяСтрока - фиксированное значение "1СПАРК Риски";
//     * СводныйИндикатор                - ФорматированнаяСтрока, Неопределено - сводный индикатор риска;
//     * ИндексДолжнойОсмотрительности   - ФорматированнаяСтрока, Неопределено - Индекс должной осмотрительности;
//     * ИндексФинансовогоРиска          - ФорматированнаяСтрока, Неопределено - Индекс финансового результата;
//     * ИндексПлатежнойДисциплины       - ФорматированнаяСтрока, Неопределено - Индекс платежной дисциплины;
//     * БухгалтерскаяОтчетность         - ФорматированнаяСтрока, Неопределено - Бух. отчетность в СПАРК;
//     * Статус                          - ФорматированнаяСтрока, Неопределено - статус контрагента;
//     * Контрагент                      - ОпределяемыеТипы.КонтрагентБИП - контрагент;
//     * ИНН                             - Строка;
//     * ПодлежитПроверке                - Булево;
//     * ТекстОшибки                     - Строка;
//     * ИдентификаторФоновогоЗадания    - Уникальный идентификатор, Неопределено - в случае, если данных нет в кеше,
//                                         то будет запущено фоновое задание получения данных и вернется
//                                         идентификатор запущенного фонового задания;
//     * АдресХранилищаФоновогоЗадания   - Строка - адрес временного хранилища, куда фоновое задание поместит результат;
//     * ДатаЗаполненияКлиентскогоКэша  -  Дата - для хранения маркера времени в клиентском кэше;
//     * ВидОшибки                       - ПеречислениеСсылка.ВидыОшибокСПАРКРиски;
//     * ДатаОбновления                  - Дата;
//     * СостояниеВыводаДанных           - Перечисления.СостоянияВыводаИндексовСПАРКРиски;
//     * СостояниеЗагрузкиДанных         - Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.
//
Функция НовыйПредставленияИндексов() Экспорт

	Результат = Новый Структура;

	// Форматированные строки (представления).
	Результат.Вставить("Заголовок", Новый ФорматированнаяСтрока(НСтр("ru='1СПАРК Риски'")));
	Результат.Вставить("СводныйИндикатор", Неопределено);
	Результат.Вставить("ИндексДолжнойОсмотрительности", Неопределено);
	Результат.Вставить("ИндексФинансовогоРиска", Неопределено);
	Результат.Вставить("ИндексПлатежнойДисциплины", Неопределено);
	Результат.Вставить("БухгалтерскаяОтчетность", Неопределено);
	Результат.Вставить("Статус", Неопределено);
	// Основные данные.
	Результат.Вставить("Контрагент", Неопределено);
	Результат.Вставить("ИНН", "");
	Результат.Вставить("ПодлежитПроверке", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ИдентификаторФоновогоЗадания", Неопределено);
	Результат.Вставить("АдресХранилищаФоновогоЗадания", Неопределено);
	Результат.Вставить("ДатаЗаполненияКлиентскогоКэша", '00010101');
	// Адреса и навигационные ссылки команд.
	Результат.Вставить("СводныйИндикаторАдресКомандыПодсказки",        "e1cib/command/Обработка.СправкаСПАРКРиски.Команда.ЧтоТакоеСводныйИндикаторРиска");
	Результат.Вставить("ИДОАдресКомандыПодсказки",                     "e1cib/command/Обработка.СправкаСПАРКРиски.Команда.ЧтоТакоеИндексДолжнойОсмотрительности");
	Результат.Вставить("ИФРАдресКомандыПодсказки",                     "e1cib/command/Обработка.СправкаСПАРКРиски.Команда.ЧтоТакоеИндексФинансовогоРиска");
	Результат.Вставить("ИПДАдресКомандыПодсказки",                     "e1cib/command/Обработка.СправкаСПАРКРиски.Команда.ЧтоТакоеИндексПлатежнойДисциплины");
	Результат.Вставить("БухгалтерскаяОтчетностьАдресКомандыПодсказки", "e1cib/command/Обработка.СправкаСПАРКРиски.Команда.ЧтоТакоеБухгалтерскаяОтчетность");
	Результат.Вставить("СводныйИндикаторНавигационнаяСсылкаПодсказки",         "SPARK:WhatIsCompositeIndex");
	Результат.Вставить("ИДОНавигационнаяСсылкаПодсказки",                      "SPARK:WhatIsIndexOfDueDiligence");
	Результат.Вставить("ИФРНавигационнаяСсылкаПодсказки",                      "SPARK:WhatIsFailureScore");
	Результат.Вставить("ИПДНавигационнаяСсылкаПодсказки",                      "SPARK:WhatIsPaymentIndex");
	Результат.Вставить("БухгалтерскаяОтчетностьНавигационнаяСсылкаПодсказки", "SPARK:WhatIsAccountingStatements");

	// Прочее.
	Результат.Вставить("ВидОшибки"              , ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ПустаяСсылка"));
	Результат.Вставить("СостояниеВыводаДанных"  , ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПустаяСсылка"));
	Результат.Вставить("СостояниеЗагрузкиДанных", ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка"));
	Результат.Вставить("ДатаОбновления"         , '00010101');

	Возврат Результат;

КонецФункции

// Выводит информацию об индексах СПАРК Риски в элемент управления.
// Эта служебная процедура непосредственно заполняет элементы управления.
//
// Параметры:
//  РезультатИндексыКонтрагента - Структура, Неопределено - результата выполнения функции ИндексыСПАРККонтрагента
//                                 (ключи описаны в СПАРКРискиКлиентСервер.НовыйДанныеИндексов()),
//                                 или Неопределено, если необходимо вызвать эту функцию;
//  КонтрагентОбъект - Объект, Неопределено - заполняется в том случае, если форма - это форма элемента справочника,
//                     а не форма документа.
//  Контрагент - ОпределяемыйТип.КонтрагентБИП, Строка - Контрагент или ИНН контрагента;
//  Форма      - ФормаКлиентскогоПриложения - форма, в которой необходимо вывести информацию об индексах СПАРК Риски.
//               В этой форме должен присутствовать реквизит "ИндексыСПАРКРиски" произвольного типа
//               и (если заполнение будет осуществляться стандартным библиотечным способом), то элементы с именами:
//    * ДекорацияИндексыСПАРКРиски - Декорация текст;
//    * КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски - Декорация картинка;
//  ИспользованиеРазрешено - Булево - разрешено использование;
//  ПараметрыОтображения - Структура - прочие параметры. Возможные ключи:
//    * ВариантОтображения - Строка - вариант отображения надписей в элементе управления. Возможные значения:
//     ** "Многострочный" - выводить данные в несколько строк;
//     ** "Однострочный"  - выводить данные в одну строку.
//
Процедура ОтобразитьИндексыСПАРК(
			РезультатИндексыКонтрагента,
			КонтрагентОбъект,
			Контрагент,
			Форма,
			ИспользованиеРазрешено,
			ПараметрыОтображения = Неопределено) Экспорт
	
	Если ИспользованиеРазрешено Тогда
		Если КонтрагентОбъект <> Неопределено Тогда
			СвойстваКонтрагента = СвойстваКонтрагентаВОбъекте(
				КонтрагентОбъект,
				Форма);
		Иначе
			СвойстваКонтрагента = НовыйСвойстваКонтрагента();
			СвойстваКонтрагента.Вставить("ПодлежитПроверке", Истина);
		КонецЕсли;
		РезультатИндексыКонтрагента.Вставить("ПодлежитПроверке", СвойстваКонтрагента.ПодлежитПроверке);
	КонецЕсли;
	
	// Переопределение.
	
	СтандартнаяОбработка = Истина;
	СПАРКРискиКлиентСерверПереопределяемый.ОтобразитьИндексыСПАРК(
		РезультатИндексыКонтрагента,
		КонтрагентОбъект,
		Контрагент,
		Форма,
		ИспользованиеРазрешено,
		ПараметрыОтображения,
		СтандартнаяОбработка);

	Если СтандартнаяОбработка <> Истина Тогда
		Возврат;
	КонецЕсли;

	Если Не ИспользованиеРазрешено Тогда
		Форма.Элементы.ГруппаИндексыСПАРКРиски.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ТипСтруктура = Тип("Структура");

	Если РезультатИндексыКонтрагента.ПодлежитПроверке <> Истина Тогда
		Форма.Элементы.ДекорацияИндексыСПАРКРиски.Видимость                 = Ложь;
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Видимость = Ложь;
		Возврат;
	Иначе
		Форма.Элементы.ДекорацияИндексыСПАРКРиски.Видимость                 = Истина;
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Видимость = Истина;
	КонецЕсли;

	// В форме имена элементов управления и реквизита - фиксированные.
	// 1. В зависимости от того, загружены данные, или выполнятся фоновое задание, вывести или скрыть картинку ожидания.
	Если РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ЗапущеноФоновоеЗадание") Тогда
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Видимость = Истина;
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Картинка = БиблиотекаКартинок.ДлительнаяОперация16;
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Подсказка = НСтр("ru='Выполняется получение данных из Интернет.'");
	ИначеЕсли РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ОтменаФоновогоЗадания") Тогда
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Видимость = Истина;
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Картинка = БиблиотекаКартинок.Предупреждение;
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Подсказка = НСтр("ru='Получение данных из Интернет отменено.'");
	ИначеЕсли РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ОшибкаФоновогоЗадания") Тогда
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Видимость = Истина;
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Картинка = БиблиотекаКартинок.Предупреждение;
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Подсказка = НСтр("ru='Ошибка получения данных из Интернет.'");
	Иначе // Загрузка завершена или не осуществлялась.
		Форма.Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Видимость = Ложь;
	КонецЕсли;

	МассивСтрок = Новый Массив;

	ВариантОтображения = Неопределено;
	Если ТипЗнч(ПараметрыОтображения) = ТипСтруктура Тогда
		ВариантОтображения = ПараметрыОтображения.ВариантОтображения;
	КонецЕсли;
	
	Если ВариантОтображения = "Однострочный" Тогда
		ВывестиОднострочноеПредставлениеИндексов(
			РезультатИндексыКонтрагента,
			МассивСтрок);
	Иначе // "Многострочный".
		ВывестиМногострочноеПредставлениеИндексов(
			Форма,
			РезультатИндексыКонтрагента,
			МассивСтрок);
	КонецЕсли;

	Результат = Новый ФорматированнаяСтрока(МассивСтрок);
	Форма.Элементы.ДекорацияИндексыСПАРКРиски.Заголовок = Результат;

КонецПроцедуры

Процедура ВывестиОднострочноеПредставлениеИндексов(РезультатИндексыКонтрагента, МассивСтрок)
	
	ЦветаСтилей = СПАРКРискиВызовСервера.ЦветаСтилей();
	Если Не РезультатИндексыКонтрагента.Критичное Тогда
		ЦветСтатуса = ЦветаСтилей.ЦветГрадацияСПАРКНизкийРиск;
	Иначе
		ЦветСтатуса = ЦветаСтилей.ЦветОсобогоТекста;
	КонецЕсли;
	
	ЕстьОшибкаПодключения = Ложь;
	Если РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НеизвестныйИНН") Тогда
		ЕстьОшибкаПодключения = Ложь;
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru='Нет информации о контрагенте'"),
			,
			,
			,
			"SPARK:NoInformation"));
	ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НекорректныйИНН") Тогда
		ЕстьОшибкаПодключения = Ложь;
		МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru='Нет информации о контрагенте'"),
				,
				ЦветаСтилей.ЦветОсобогоТекста,
				,
				"SPARK:NoInformation"));
	Иначе // Пустое поле - ошибок нет.
		ЕстьОшибкаПодключения = ЭтоВидОшибкиПодключения(РезультатИндексыКонтрагента.ВидОшибки);
		ЕстьОшибкаПолученияДанных = Ложь;

		ТекстОшибки = "";
		ЦветТекстаОшибки = ЦветаСтилей.ЦветОсобогоТекста;
		Если РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ВКэшеНетДанных") Тогда
			ЕстьОшибкаПолученияДанных = Истина;
			Если РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ЗапущеноФоновоеЗадание") Тогда
				ТекстОшибки = НСтр("ru='Получение данных...'");
				ЦветТекстаОшибки = Неопределено; // Авто
			ИначеЕсли РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ОтменаФоновогоЗадания") Тогда
				ТекстОшибки = НСтр("ru='Ошибка получения данных (слишком медленное соединение или отменено администратором)'");
			ИначеЕсли РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ОшибкаФоновогоЗадания") Тогда
				ТекстОшибки = НСтр("ru='Ошибка получения данных'");
			Иначе // Загрузка завершена или не осуществлялась.
				ТекстОшибки = НСтр("ru='Ошибка получения данных (данные не получены)'");
			КонецЕсли;
		ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ВКэшеУстаревшиеДанные") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.НеправильныйИНН") Тогда
			ЕстьОшибкаПолученияДанных = Истина;
			ТекстОшибки = Новый ФорматированнаяСтрока(
				НСтр("ru='Нет информации о контрагенте'"),
				,
				,
				,
				"SPARK:NoInformation");
		ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзКэша") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзФоновогоЗадания") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПустаяСсылка") Тогда
		Иначе
			ЕстьОшибкаПолученияДанных = Истина;
			ТекстОшибки = НСтр("ru='Неопределенная ошибка'");
		КонецЕсли;
		
		Если ЕстьОшибкаПолученияДанных = Истина Тогда
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(
					ТекстОшибки,
					,
					ЦветТекстаОшибки));
		Иначе
			
			// Если контрагент не активен, вывести сообщение "Контрагент прекратил деятельность %ДатаСтатуса%".
			Если (РезультатИндексыКонтрагента.Активен <> Истина) Тогда
				МассивСтрок.Добавить(
					Новый ФорматированнаяСтрока(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Контрагент прекратил деятельность %1'"),
							Формат(РезультатИндексыКонтрагента.ДатаСтатуса, "ДЛФ=D")),
						,
						ЦветаСтилей.ЦветОсобогоТекста));
				МассивСтрок.Добавить(Символы.ПС);
			Иначе
				
				Если РезультатИндексыКонтрагента.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентовСПАРКРиски.ЮридическоеЛицо")
					И РезультатИндексыКонтрагента.СводныйИндикатор >= 0
					И РезультатИндексыКонтрагента.СводныйИндикатор <= 100 Тогда
					МассивСтрок.Добавить(
						Новый ФорматированнаяСтрока(
							НСтр("ru='Сводный индикатор:'")));
					МассивСтрок.Добавить(Символы.НПП);
					МассивСтрок.Добавить(
						Новый ФорматированнаяСтрока(
							Строка(РезультатИндексыКонтрагента.СводныйИндикаторГрадация),
							, // Шрифт
							ЦветИндекса(
								РезультатИндексыКонтрагента.СводныйИндикатор,
								"СводныйИндикатор"), // ЦветТекста
							, // ЦветФона
							"SPARK:ShowIndexValues")); // Ссылка
				ИначеЕсли РезультатИндексыКонтрагента.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентовСПАРКРиски.ИндивидуальныйПредприниматель")
					И РезультатИндексыКонтрагента.ОтображатьСтатус
					И ЗначениеЗаполнено(РезультатИндексыКонтрагента.СтатусНазвание)
					И (РезультатИндексыКонтрагента.Критичное
						Или Не (РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины >= 0
						И РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины <= 100)) Тогда
					МассивСтрок.Добавить(
						Новый ФорматированнаяСтрока(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='%1 %2'"),
								РезультатИндексыКонтрагента.СтатусНазвание,
								Формат(РезультатИндексыКонтрагента.ДатаСтатуса, "ДЛФ=D")),
							,
							ЦветСтатуса,
							,
							"SPARK:OpenStatusDescription"));
					МассивСтрок.Добавить(Символы.ПС);
				ИначеЕсли РезультатИндексыКонтрагента.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентовСПАРКРиски.ИндивидуальныйПредприниматель")
					И РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины >= 0
					И РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины <= 100 Тогда
					МассивСтрок.Добавить(
						Новый ФорматированнаяСтрока(
							НСтр("ru='Индекс платежной дисциплины:'")));
					МассивСтрок.Добавить(Символы.НПП);
					МассивСтрок.Добавить(
						Новый ФорматированнаяСтрока(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='%1 (%2)'"),
								РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины,
								НРег(РезультатИндексыКонтрагента.ИПДГрадация)),
							, // Шрифт
							ЦветИндекса(
								РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины,
								"ИндексПлатежнойДисциплины"), // ЦветТекста
							, // ЦветФона
							"SPARK:ShowIndexValues")); // Ссылка
				Иначе
					МассивСтрок.Добавить(
						Новый ФорматированнаяСтрока(
							НСтр("ru='Нет информации о контрагенте'"),
							,
							,
							,
							"SPARK:NoInformation"));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьОшибкаПодключения = Истина Тогда
		МассивСтрок = Новый Массив;
		Если РезультатИндексыКонтрагента.ДоступностьПодключенияТестовогоПериода = "Доступно" Тогда
			МассивСтрок.Добавить(
					Новый ФорматированнаяСтрока(
						НСтр("ru='1СПАРК Риски:'")
						+ " "));
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru='Подключить'"),
					,
					,
					,
					"SPARK:ConnectTrialTariff"));
			МассивСтрок.Добавить(" ");
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru='тестовый период или'")));
			МассивСтрок.Добавить(" ");
			МассивСтрок.Добавить(
					Новый ФорматированнаяСтрока(
						НСтр("ru='купить сервис'"),
						,
						,
						,
						"SPARK:BuyTariff"));
			МассивСтрок.Добавить(" ");
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru='проверки и мониторинга контрагентов'")
					+ " "));
				
		ИначеЕсли РезультатИндексыКонтрагента.ДоступностьПодключенияТестовогоПериода = "Подключение" Тогда
			МассивСтрок.Добавить(
				НСтр("ru = 'Выполняется подключение.'"));
		Иначе
			Если Не РезультатИндексыКонтрагента.ДанныеАутентификацииЗаполнены
				Или РезультатИндексыКонтрагента.РаботаВМоделиСервиса Тогда
					
					МассивСтрок.Добавить(
						Новый ФорматированнаяСтрока(
							НСтр("ru='1СПАРК Риски:'")
							+ " "));
					
					МассивСтрок.Добавить(
						Новый ФорматированнаяСтрока(
							НСтр("ru='Подробнее'"),
							,
							,
							,
							"SPARK:About"));
					
					МассивСтрок.Добавить(" ");
					МассивСтрок.Добавить(
						НСтр("ru='о проверке и мониторинге контрагентов'"));
					
				Иначе
					
					МассивСтрок.Добавить(
						Новый ФорматированнаяСтрока(
							НСтр("ru='1СПАРК Риски:'")
							+ " "));
					
					МассивСтрок.Добавить(
						Новый ФорматированнаяСтрока(
							НСтр("ru='Купить сервис'"),
							,
							,
							,
							"SPARK:BuyService"));
					
					МассивСтрок.Добавить(" ");
					МассивСтрок.Добавить(
						Новый ФорматированнаяСтрока(
							НСтр("ru='проверки и мониторинга контрагентов'")
							+ " "));
					
				КонецЕсли;
			КонецЕсли;
	
	КонецЕсли;
	
	Если РезультатИндексыКонтрагента.Уведомление <> Неопределено Тогда
		
		УведомлениеМонитораПортала = РезультатИндексыКонтрагента.Уведомление;
		МассивСтрок.Добавить(" | ");
		МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(
				УведомлениеМонитораПортала.ОднострочныйТекстУведомления + " ",
				Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее.'"), , , , "SPARK:Notifications")));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиМногострочноеПредставлениеИндексов(Форма, РезультатИндексыКонтрагента, МассивСтрок)
	
	ЦветаСтилей = СПАРКРискиВызовСервера.ЦветаСтилей();
	Если Не РезультатИндексыКонтрагента.Критичное Тогда
		ЦветСтатуса = ЦветаСтилей.ЦветГрадацияСПАРКНизкийРиск;
	Иначе
		ЦветСтатуса = ЦветаСтилей.ЦветОсобогоТекста;
	КонецЕсли;
	
	ЕстьОшибкаПодключения = Ложь;
	
	МассивСтрок.Добавить(
		Новый ФорматированнаяСтрока(
			НСтр("ru='1СПАРК Риски'"),
			Новый Шрифт(Форма.Элементы.ДекорацияИндексыСПАРКРиски.Шрифт, , , Истина))); // Жирный шрифт
	МассивСтрок.Добавить(Символы.ПС);
	
	Если РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НеизвестныйИНН") Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru='Нет информации о контрагенте'"),
			,
			,
			,
			"SPARK:NoInformation"));
		ИнформацияВыведена = Истина;
	ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НекорректныйИНН") Тогда
		МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru='Нет информации о контрагенте'"),
				,
				ЦветаСтилей.ЦветОсобогоТекста,
				,
				"SPARK:NoInformation"));
		ИнформацияВыведена = Истина;
	Иначе
		
		ЕстьОшибкаПодключения = ЭтоВидОшибкиПодключения(РезультатИндексыКонтрагента.ВидОшибки);
		ЕстьОшибкаПолученияДанных = Ложь;

		ТекстОшибки = "";
		ЦветТекстаОшибки = ЦветаСтилей.ЦветОсобогоТекста;
		Если РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ВКэшеНетДанных") Тогда
			ЕстьОшибкаПолученияДанных = Истина;
			Если РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ЗапущеноФоновоеЗадание") Тогда
				ТекстОшибки = НСтр("ru='Получение данных...'");
				ЦветТекстаОшибки = Неопределено; // Авто
			ИначеЕсли РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ОтменаФоновогоЗадания") Тогда
				ТекстОшибки = НСтр("ru='Ошибка получения данных (слишком медленное соединение или отменено администратором)'");
			ИначеЕсли РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ОшибкаФоновогоЗадания") Тогда
				ТекстОшибки = НСтр("ru='Ошибка получения данных'");
			Иначе // Загрузка завершена или не осуществлялась.
				ТекстОшибки = НСтр("ru='Ошибка получения данных (данные не получены)'");
			КонецЕсли;
		ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ВКэшеУстаревшиеДанные") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.НеправильныйИНН") Тогда
			ЕстьОшибкаПолученияДанных = Истина;
			ТекстОшибки = Новый ФорматированнаяСтрока(
				НСтр("ru='Нет информации о контрагенте'"),
				,
				,
				,
				"SPARK:NoInformation");
		ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзКэша") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзФоновогоЗадания") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПустаяСсылка") Тогда
		Иначе
			ЕстьОшибкаПолученияДанных = Истина;
			ТекстОшибки = НСтр("ru='Неопределенная ошибка'");
		КонецЕсли;
		Если ЕстьОшибкаПолученияДанных = Истина Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстОшибки, , ЦветТекстаОшибки));
			МассивСтрок.Добавить(Символы.ПС);
		Иначе
			
			// Если контрагент не активен, вывести сообщение "Контрагент прекратил деятельность %ДатаСтатуса%".
			Если (РезультатИндексыКонтрагента.Активен <> Истина) Тогда
				МассивСтрок.Добавить(
					Новый ФорматированнаяСтрока(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Контрагент прекратил деятельность %1'"),
							Формат(РезультатИндексыКонтрагента.ДатаСтатуса, "ДЛФ=D")),
						,
						ЦветаСтилей.ЦветОсобогоТекста));
				МассивСтрок.Добавить(Символы.ПС);
			Иначе
				ИнформацияВыведена = Ложь;
				// Есть статус не равен "Действующая" необходимо вывести его.
				Если РезультатИндексыКонтрагента.ОтображатьСтатус
					И ЗначениеЗаполнено(РезультатИндексыКонтрагента.Статус) Тогда
					МассивСтрок.Добавить(
						Новый ФорматированнаяСтрока(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='%1 %2'"),
								РезультатИндексыКонтрагента.СтатусНазвание,
								Формат(РезультатИндексыКонтрагента.ДатаСтатуса, "ДЛФ=D")),
							,
							ЦветСтатуса,
							,
							"SPARK:OpenStatusDescription"));
					МассивСтрок.Добавить(Символы.ПС);
					ИнформацияВыведена = Истина;
				КонецЕсли;

				Если (РезультатИндексыКонтрагента.СводныйИндикатор >= 1)
						И (РезультатИндексыКонтрагента.СводныйИндикатор <= 3) Тогда
						МассивСтрок.Добавить(
							Новый ФорматированнаяСтрока(
								НСтр("ru='Сводный индикатор:'")));
						МассивСтрок.Добавить(Символы.НПП);
						МассивСтрок.Добавить(
							Новый ФорматированнаяСтрока(
								Строка(РезультатИндексыКонтрагента.СводныйИндикаторГрадация),
								, // Шрифт
								ЦветИндекса(
									РезультатИндексыКонтрагента.СводныйИндикатор,
									"СводныйИндикатор"), // ЦветТекста
								, // ЦветФона
								"SPARK:WhatIsCompositeIndex")); // Ссылка
						МассивСтрок.Добавить(Символы.ПС);
						ИнформацияВыведена = Истина;
				КонецЕсли;
				
				Если (РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности >= 0)
						И (РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности <= 100) Тогда
					МассивСтрок.Добавить(
						Новый ФорматированнаяСтрока(
							НСтр("ru='Индекс должной осмотрительности:'")));
					МассивСтрок.Добавить(Символы.НПП);
					МассивСтрок.Добавить(
						Новый ФорматированнаяСтрока(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='%1 (%2)'"),
								РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности,
								НРег(РезультатИндексыКонтрагента.ИДОГрадация)),
							, // Шрифт
							ЦветИндекса(
								РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности,
								"ИндексДолжнойОсмотрительности"), // ЦветТекста
							, // ЦветФона
							"SPARK:WhatIsIndexOfDueDiligence")); // Ссылка
					МассивСтрок.Добавить(Символы.ПС);
					ИнформацияВыведена = Истина;
				КонецЕсли;

				Если (РезультатИндексыКонтрагента.ИндексФинансовогоРиска >= 0)
						И (РезультатИндексыКонтрагента.ИндексФинансовогоРиска <= 100) Тогда
					МассивСтрок.Добавить(
						Новый ФорматированнаяСтрока(
							НСтр("ru='Индекс финансового риска:'")));
					МассивСтрок.Добавить(Символы.НПП);
					МассивСтрок.Добавить(
						Новый ФорматированнаяСтрока(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='%1 (%2)'"),
								РезультатИндексыКонтрагента.ИндексФинансовогоРиска,
								НРег(РезультатИндексыКонтрагента.ИФРГрадация)),
							, // Шрифт
							ЦветИндекса(
								РезультатИндексыКонтрагента.ИндексФинансовогоРиска,
								"ИндексФинансовогоРиска"), // ЦветТекста
							, // ЦветФона
							"SPARK:WhatIsFailureScore")); // Ссылка
					МассивСтрок.Добавить(Символы.ПС);
					ИнформацияВыведена = Истина;
				КонецЕсли;

				Если РезультатИндексыКонтрагента.БухгалтерскаяОтчетность = 1 Тогда
					ФорматированнаяСтрокаЗаголовок = Новый ФорматированнаяСтрока(
						НСтр("ru='Передана бух. отчетность в СПАРК'"),
						, // Шрифт
						ЦветаСтилей.ЦветГрадацияСПАРКНизкийРиск,
						, // ЦветФона
						"SPARK:WhatIsAccountingStatements");
					МассивСтрок.Добавить(ФорматированнаяСтрокаЗаголовок);
					МассивСтрок.Добавить(Символы.ПС);
					ИнформацияВыведена = Истина;
				КонецЕсли;

				Если (РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины >= 0)
						И (РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины <= 100) Тогда
					МассивСтрок.Добавить(
						Новый ФорматированнаяСтрока(
							НСтр("ru='Индекс платежной дисциплины:'")));
					МассивСтрок.Добавить(Символы.НПП);
					МассивСтрок.Добавить(
						Новый ФорматированнаяСтрока(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='%1 (%2)'"),
								РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины,
								НРег(РезультатИндексыКонтрагента.ИПДГрадация)),
							, // Шрифт
							ЦветИндекса(
								РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины,
								"ИндексПлатежнойДисциплины"), // ЦветТекста
							, // ЦветФона
							"SPARK:WhatIsPaymentIndex")); // Ссылка
					МассивСтрок.Добавить(Символы.ПС);
					ИнформацияВыведена = Истина;
				КонецЕсли;

				Если ИнформацияВыведена <> Истина Тогда // Ничего не выведено - скрыть декорацию.
					МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
						НСтр("ru='Нет информации о контрагенте'"),
						,
						,
						,
						"SPARK:NoInformation"));
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОшибкаПодключения Тогда
		МассивСтрок = Новый Массив;
		Если РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ТребуетсяОплатаИлиПревышенЛимит")
			И РезультатИндексыКонтрагента.ДоступностьПодключенияТестовогоПериода = "Доступно" Тогда
			
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru='Подключить'"),
					,
					,
					,
					"SPARK:ConnectTrialTariff"));
			
			МассивСтрок.Добавить(" ");
			МассивСтрок.Добавить(НСтр("ru = 'тестовый период'"));
			МассивСтрок.Добавить(Символы.ПС);
			МассивСтрок.Добавить(НСтр("ru = 'или'"));
			МассивСтрок.Добавить(" ");
			
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(
				НСтр("ru='купить сервис'"),
				,
				,
				,
				"SPARK:BuyService"));
			
			МассивСтрок.Добавить(" ");
			МассивСтрок.Добавить(НСтр("ru = 'проверки'"));
			МассивСтрок.Добавить(Символы.ПС);
			МассивСтрок.Добавить(НСтр("ru = 'и мониторинга контрагентов'"));
			
		ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ТребуетсяОплатаИлиПревышенЛимит")
			И РезультатИндексыКонтрагента.ДоступностьПодключенияТестовогоПериода = "Подключение" Тогда
			МассивСтрок.Добавить(
				НСтр("ru = 'Выполняется подключение сервиса.'"));
		Иначе
			
			Если Не РезультатИндексыКонтрагента.ДанныеАутентификацииЗаполнены
				Или РезультатИндексыКонтрагента.РаботаВМоделиСервиса Тогда
				
				МассивСтрок.Добавить(
					Новый ФорматированнаяСтрока(
						НСтр("ru='Подробнее о сервисе'"),
						,
						,
						,
						"SPARK:About"));
				
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(НСтр("ru = 'проверки'"));
				МассивСтрок.Добавить(Символы.ПС);
				МассивСтрок.Добавить(НСтр("ru = 'и мониторинга контрагентов'"));
				
			Иначе
				
				МассивСтрок.Добавить(
					Новый ФорматированнаяСтрока(
						НСтр("ru='Купить сервис'"),
						,
						,
						,
						"SPARK:BuyService"));
				
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(НСтр("ru = 'проверки и'"));
				МассивСтрок.Добавить(Символы.ПС);
				МассивСтрок.Добавить(НСтр("ru = 'мониторинга контрагентов'"));
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатИндексыКонтрагента.Уведомление <> Неопределено Тогда
		
		УведомлениеМонитораПортала = РезультатИндексыКонтрагента.Уведомление;
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(
				УведомлениеМонитораПортала.ТекстУведомления + " ",
				Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее.'"), , , , "SPARK:Notifications")));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоВидОшибкиПодключения(ВидОшибки) Экспорт
	
	Возврат (ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ВнутренняяОшибкаСервиса")
		Или ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ИнтернетПоддержкаНеПодключена")
		Или ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ИспользованиеЗапрещено")
		Или ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НеизвестнаяОшибка")
		Или ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НеПодлежитПроверке")
		Или ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ОшибкаПодключения")
		Или ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ПревышеноКоличествоПопытокАутентификации")
		Или ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ТребуетсяОплатаИлиПревышенЛимит")
		Или ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НекорректныйЗапрос"));
	
КонецФункции

// Возвращает информацию об индексах СПАРК Риски в виде структуры форматированных строк.
// В случае, если информации нет в кэше, то инициируется фоновое задание.
// Если передан ИНН, то информация получается напрямую из веб-сервиса без фонового задания.
//
// Параметры:
//  РезультатИндексыКонтрагента - Структура - результата выполнения функции ИндексыСПАРККонтрагента
//                                 (ключи описаны в СПАРКРискиКлиентСервер.НовыйДанныеИндексов());
//  Контрагент         - ОпределяемыйТип.КонтрагентБИП, Строка - Контрагент или ИНН контрагента;
//  Форма              - ФормаКлиентскогоПриложения - форма, в которой необходимо вывести информацию
//                       об индексах СПАРК Риски;
//  КонтекстВыполнения - Структура - прочие параметры вызова:
//    * ИспользованиеРазрешено - Булево - разрешено использование подсистемы.
//
// Возвращаемое значение:
//   Структура - Структура представлений индексов и других показателей с ключами,
//               как СПАРКРискиКлиентСервер.НовыйПредставленияИндексов.
//
Функция ПолучитьПредставленияИндексов(
			РезультатИндексыКонтрагента,
			Контрагент,
			Форма,
			КонтекстВыполнения) Экспорт

	ЦветаСтилей = СПАРКРискиВызовСервера.ЦветаСтилей();
	Если Не РезультатИндексыКонтрагента.Критичное Тогда
		ЦветСтатуса = ЦветаСтилей.ЦветГрадацияСПАРКНизкийРиск;
	Иначе
		ЦветСтатуса = ЦветаСтилей.ЦветОсобогоТекста;
	КонецЕсли;
	
	Результат = НовыйПредставленияИндексов();
	Результат.Вставить("Контрагент", Контрагент);

	Если НЕ КонтекстВыполнения.ИспользованиеРазрешено Тогда
		РезультатИндексыКонтрагента.Вставить("ВидОшибки", ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ИспользованиеЗапрещено"));
		Возврат Результат;
	КонецЕсли;

	СтандартнаяОбработка = Истина;
	СПАРКРискиКлиентСерверПереопределяемый.ПолучитьПредставленияИндексов(
		Результат,
		РезультатИндексыКонтрагента,
		Контрагент,
		Форма,
		СтандартнаяОбработка);

	Если СтандартнаяОбработка = Истина Тогда

		// Статусы и общая информация.
		ЗаполнитьЗначенияСвойств(
			Результат,
			РезультатИндексыКонтрагента,
			"Контрагент, ИНН, ПодлежитПроверке, ТекстОшибки, ИдентификаторФоновогоЗадания, АдресХранилищаФоновогоЗадания, ДатаЗаполненияКлиентскогоКэша,
				|ВидОшибки, ДатаОбновления, СостояниеВыводаДанных, СостояниеЗагрузкиДанных");

		// Форматированные строки (представления).
		Результат.Вставить("Заголовок", Новый ФорматированнаяСтрока(НСтр("ru='1СПАРК Риски'")));

		Если (РезультатИндексыКонтрагента.СводныйИндикатор >= 1)
			И (РезультатИндексыКонтрагента.СводныйИндикатор <= 3) Тогда

			Результат.Вставить("СводныйИндикатор",
				Новый ФорматированнаяСтрока(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1'"),
						РезультатИндексыКонтрагента.СводныйИндикаторГрадация),
					, // Шрифт
					ЦветИндекса(
						РезультатИндексыКонтрагента.СводныйИндикатор,
						"СводныйИндикатор"), // ЦветТекста
					, // ЦветФона
					"SPARK:WhatIsCompositeIndex")); // Ссылка

		КонецЕсли;
		
		Если (РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности >= 0)
				И (РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности <= 100) Тогда

			Результат.Вставить("ИндексДолжнойОсмотрительности",
				Новый ФорматированнаяСтрока(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 (%2)'"),
						РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности,
						НРег(РезультатИндексыКонтрагента.ИДОГрадация)),
					, // Шрифт
					ЦветИндекса(
						РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности,
						"ИндексДолжнойОсмотрительности"), // ЦветТекста
					, // ЦветФона
					"SPARK:WhatIsIndexOfDueDiligence")); // Ссылка

		КонецЕсли;

		Если (РезультатИндексыКонтрагента.ИндексФинансовогоРиска >= 0)
				И (РезультатИндексыКонтрагента.ИндексФинансовогоРиска <= 100) Тогда

			Результат.Вставить("ИндексФинансовогоРиска",
				Новый ФорматированнаяСтрока(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 (%2)'"),
						РезультатИндексыКонтрагента.ИндексФинансовогоРиска,
						НРег(РезультатИндексыКонтрагента.ИФРГрадация)),
					, // Шрифт
					ЦветИндекса(
						РезультатИндексыКонтрагента.ИндексФинансовогоРиска,
						"ИндексФинансовогоРиска"), // ЦветТекста
					, // ЦветФона
					"SPARK:WhatIsFailureScore")); // Ссылка

		КонецЕсли;

		Если (РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины >= 0)
				И (РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины <= 100) Тогда

			Результат.Вставить("ИндексПлатежнойДисциплины",
				Новый ФорматированнаяСтрока(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 (%2)'"),
						РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины,
						НРег(РезультатИндексыКонтрагента.ИПДГрадация)),
					, // Шрифт
					ЦветИндекса(
						РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины,
						"ИндексПлатежнойДисциплины"), // ЦветТекста
					, // ЦветФона
					"SPARK:WhatIsPaymentIndex")); // Ссылка

		КонецЕсли;

		Если (РезультатИндексыКонтрагента.Активен <> Истина) Тогда
			Результат.Вставить("Статус",
				Новый ФорматированнаяСтрока(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Контрагент прекратил деятельность %1'"),
						Формат(РезультатИндексыКонтрагента.ДатаСтатуса, "ДЛФ=D")),
					,
					ЦветаСтилей.ЦветОсобогоТекста));
		КонецЕсли;

		Если РезультатИндексыКонтрагента.ОтображатьСтатус
			И НЕ ПустаяСтрока(РезультатИндексыКонтрагента.Статус) Тогда
			Результат.Вставить("Статус",
				Новый ФорматированнаяСтрока(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 %2'"),
						РезультатИндексыКонтрагента.СтатусНазвание,
						Формат(РезультатИндексыКонтрагента.ДатаСтатуса, "ДЛФ=D")),
					,
					ЦветСтатуса,
					,
					"SPARK:OpenStatusDescription"));
		КонецЕсли;

		Если РезультатИндексыКонтрагента.БухгалтерскаяОтчетность = 1 Тогда
			Результат.Вставить("БухгалтерскаяОтчетность",
				Новый ФорматированнаяСтрока(
					НСтр("ru='Передана бух. отчетность в СПАРК'"),
					, // Шрифт
					ЦветаСтилей.ЦветГрадацияСПАРКНизкийРиск,
					, // ЦветФона
					"SPARK:WhatIsAccountingStatements"));
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура ВывестиСтатус(ИндексыКонтрагента, Форма, ЦветаСтилей, ИнформацияВыведена) Экспорт
	
	Если ИндексыКонтрагента.Критичное Тогда
		ЦветСтатуса = ЦветаСтилей.ЦветОсобогоТекста;
	Иначе
		ЦветСтатуса = ЦветаСтилей.ЦветГрадацияСПАРКНизкийРиск;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИндексыКонтрагента.Статус) Тогда
		
		Форма.Элементы.ГруппаИндексыСПАРКРискиСтатус.Видимость = Истина;
		Форма.Элементы.ДекорацияИндексыСПАРКРискиСтатусЗначение.Заголовок = Новый ФорматированнаяСтрока(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 %2'"),
				ИндексыКонтрагента.СтатусНазвание,
				Формат(ИндексыКонтрагента.ДатаСтатуса, "ДЛФ=D")),,
			ЦветСтатуса,,
			"SPARK:OpenStatusDescription");
		
		ИнформацияВыведена = Истина;
		
	Иначе
		Форма.Элементы.ГруппаИндексыСПАРКРискиСтатус.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиСводныйИндикатор(ИндексыКонтрагента, Форма, ИнформацияВыведена, ВыведеныИндексы) Экспорт
	
	Если (ИндексыКонтрагента.СводныйИндикатор >= 1)
		И (ИндексыКонтрагента.СводныйИндикатор <= 3) Тогда
			
		ВывестиКартинкуИндекса(
			Форма,
			КартинкаСводныйИндикатор(),
			ИндексыКонтрагента,
			"СводныйИндикатор");
		
		Форма.Элементы.ДекорацияСводныйИндикатор.Заголовок = Новый ФорматированнаяСтрока(
			НРег(ИндексыКонтрагента.СводныйИндикаторГрадация),
			, // Шрифт
			ЦветИндекса(
				ИндексыКонтрагента.СводныйИндикатор,
				"СводныйИндикатор"),
			, // ЦветФона
			"SPARK:WhatIsCompositeIndex");
			
		ИнформацияВыведена = Истина;
		ВыведеныИндексы = Истина;
		Форма.Элементы.ГруппаСводныйИндикатор.Видимость = Истина;
		
	Иначе
		Форма.Элементы.ГруппаСводныйИндикатор.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиИндексДолжнойОсмотрительности(ИндексыКонтрагента, Форма, ИнформацияВыведена, ВыведеныИндексы) Экспорт
	
	Если (ИндексыКонтрагента.ИндексДолжнойОсмотрительности >= 0)
		И (ИндексыКонтрагента.ИндексДолжнойОсмотрительности <= 100) Тогда
		
		ВывестиКартинкуИндекса(
			Форма,
			КартинкаИндексДолжнойОсмотрительности(),
			ИндексыКонтрагента,
			"ИндексДолжнойОсмотрительности");
			
		Форма.Элементы.ДекорацияИДОЗначение.Заголовок = Новый ФорматированнаяСтрока(
			НРег(ИндексыКонтрагента.ИДОГрадация),
			, // Шрифт
			ЦветИндекса(
				ИндексыКонтрагента.ИндексДолжнойОсмотрительности,
				"ИндексДолжнойОсмотрительности"),
			, // ЦветФона
			"SPARK:WhatIsIndexOfDueDiligence");
		
		ИнформацияВыведена = Истина;
		ВыведеныИндексы = Истина;
		Форма.Элементы.ГруппаИДО.Видимость = Истина;
	Иначе
		Форма.Элементы.ГруппаИДО.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиИндексФинансовогоРиска(ИндексыКонтрагента, Форма, ИнформацияВыведена, ВыведеныИндексы) Экспорт
	
	Если (ИндексыКонтрагента.ИндексФинансовогоРиска >= 0)
		И (ИндексыКонтрагента.ИндексФинансовогоРиска <= 100) Тогда
		
		ВывестиКартинкуИндекса(
			Форма,
			КартинкаИндексФинансовогоРиска(),
			ИндексыКонтрагента,
			"ИндексФинансовогоРиска");
		
		Форма.Элементы.ДекорацияИФРЗначение.Заголовок = Новый ФорматированнаяСтрока(
			НРег(ИндексыКонтрагента.ИФРГрадация),
			, // Шрифт
			ЦветИндекса(
				ИндексыКонтрагента.ИндексФинансовогоРиска,
				"ИндексФинансовогоРиска"),
			, // ЦветФона
			"SPARK:WhatIsFailureScore");
		
		ИнформацияВыведена = Истина;
		ВыведеныИндексы = Истина;
		Форма.Элементы.ГруппаИФР.Видимость = Истина;
	Иначе
		Форма.Элементы.ГруппаИФР.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиИндексПлатежнойДисциплины(ИндексыКонтрагента, Форма, ИнформацияВыведена, ВыведеныИндексы) Экспорт
	
	Если (ИндексыКонтрагента.ИндексПлатежнойДисциплины >= 0)
		И (ИндексыКонтрагента.ИндексПлатежнойДисциплины <= 100) Тогда
		
		ВывестиКартинкуИндекса(
			Форма,
			КартинкаИндексПлатежнойДисциплины(),
			ИндексыКонтрагента,
			"ИндексПлатежнойДисциплины");
		
		Форма.Элементы.ДекорацияИПДЗначение.Заголовок = Новый ФорматированнаяСтрока(
			НРег(ИндексыКонтрагента.ИПДГрадация),
			, // Шрифт
			ЦветИндекса(
				ИндексыКонтрагента.ИндексПлатежнойДисциплины,
				"ИндексПлатежнойДисциплины"),
			, // ЦветФона
			"SPARK:WhatIsPaymentIndex");
		ИнформацияВыведена = Истина;
		ВыведеныИндексы = Истина;
		Форма.Элементы.ГруппаИПД.Видимость = Истина;
	Иначе
		Форма.Элементы.ГруппаИПД.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиСкрытыеИндексы(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаИндексыСПАРКРискиСтатус.Видимость = Истина;
	Элементы.ДекорацияИндексыСПАРКРискиСтатусЗначение.Заголовок = Новый ФорматированнаяСтрока(
		НСтр("ru = '░░░░░░░░░░░'"),
		,
		ЦветИндекса(Неопределено,Неопределено),,
		"SPARK:OpenStatusDescription");
	
	
	ИндексыКонтрагента = Новый Структура;
	ИндексыКонтрагента.Вставить("СводныйИндикатор",              "░░");
	ИндексыКонтрагента.Вставить("ИндексДолжнойОсмотрительности", "░░");
	ИндексыКонтрагента.Вставить("ИндексПлатежнойДисциплины",     "░░");
	ИндексыКонтрагента.Вставить("ИндексФинансовогоРиска",        "░░");
	
	ВывестиКартинкуИндекса(
		Форма,
		КартинкаСводныйИндикатор(),
		ИндексыКонтрагента,
		"СводныйИндикатор");
	
	Элементы.ДекорацияСводныйИндикатор.Заголовок = Новый ФорматированнаяСтрока(
		НСтр("ru = '░░░░░  ░░░'"),
		, // Шрифт
		ЦветИндекса(
			ИндексыКонтрагента.СводныйИндикатор,
			"СводныйИндикатор"),
		, // ЦветФона
		"SPARK:WhatIsCompositeIndex");
	
	ВывестиКартинкуИндекса(
		Форма,
		КартинкаИндексДолжнойОсмотрительности(),
		ИндексыКонтрагента,
		"ИндексДолжнойОсмотрительности");
		
	Элементы.ДекорацияИДОЗначение.Заголовок = Новый ФорматированнаяСтрока(
		НСтр("ru = '░░░░░  ░░░'"),
		, // Шрифт
		ЦветИндекса(
			ИндексыКонтрагента.ИндексДолжнойОсмотрительности,
			"ИндексДолжнойОсмотрительности"),
		, // ЦветФона
		"SPARK:WhatIsIndexOfDueDiligence");
	
	ВывестиКартинкуИндекса(
		Форма,
		КартинкаИндексФинансовогоРиска(),
		ИндексыКонтрагента,
		"ИндексФинансовогоРиска");
	
	Элементы.ДекорацияИФРЗначение.Заголовок = Новый ФорматированнаяСтрока(
		НСтр("ru = '░░░░░  ░░░'"),
		, // Шрифт
		ЦветИндекса(
			ИндексыКонтрагента.ИндексФинансовогоРиска,
			"ИндексФинансовогоРиска"),
		, // ЦветФона
		"SPARK:WhatIsFailureScore");
	
	ВывестиКартинкуИндекса(
		Форма,
		КартинкаИндексПлатежнойДисциплины(),
		ИндексыКонтрагента,
		"ИндексПлатежнойДисциплины");

	Элементы.ДекорацияИПДЗначение.Заголовок = Новый ФорматированнаяСтрока(
		НСтр("ru = '░░░░░  ░░░'"),
		, // Шрифт
		ЦветИндекса(
			ИндексыКонтрагента.ИндексПлатежнойДисциплины,
			"ИндексПлатежнойДисциплины"),
		, // ЦветФона
		"SPARK:WhatIsPaymentIndex");
		
	Элементы.ГруппаСводныйИндикатор.Видимость = Истина;
	Элементы.ГруппаИДО.Видимость = Истина;
	Элементы.ГруппаИПД.Видимость = Истина;
	Элементы.ГруппаИФР.Видимость = Истина;
	
	Элементы.ГруппаДанныеИндексыСПАРКРиски.Видимость = Истина;
	Элементы.ГруппаЗначенияИндексов.Видимость  = Истина;
	
КонецПроцедуры

Процедура ВывестиКартинкуИндекса(
	Форма,
	ТекстКартинки,
	РезультатИндексыКонтрагента,
	ИмяИндекса)
	
	ЗначениеИндекса = РезультатИндексыКонтрагента[ИмяИндекса];
	Если ВРег(ИмяИндекса) = ВРег("СводныйИндикатор") Тогда
		Если ЗначениеИндекса = 2 Тогда
			ЦветИндекса1 = ЦветИндекса(
				1,
				ИмяИндекса);
			ЦветИндекса2 = ЦветИндекса(
				3,
				ИмяИндекса);
		Иначе
			ЦветИндекса1 = ЦветИндекса(
				ЗначениеИндекса,
				ИмяИндекса);
			ЦветИндекса2 = ЦветИндекса1;
		КонецЕсли;
		
		ТекстКартинки = СтрЗаменить(ТекстКартинки, "%Цвет1", ЦветSVG(ЦветИндекса1));
		ТекстКартинки = СтрЗаменить(ТекстКартинки, "%Цвет2", ЦветSVG(ЦветИндекса2));
		
	КонецЕсли;
	
	ЦветИндекса = ЦветИндекса(
		ЗначениеИндекса,
		ИмяИндекса);
	ТекстКартинки = СтрЗаменить(ТекстКартинки, "%Цвет", ЦветSVG(ЦветИндекса));
	ТекстКартинки = СтрЗаменить(ТекстКартинки, "%Индекс", ЗначениеИндекса);
	
	#Если ВебКлиент Тогда
		Форма["Картинка" + ИмяИндекса] = СПАРКРискиВызовСервера.АдресКартинки(
			ТекстКартинки,
			Форма.УникальныйИдентификатор);
	#Иначе
		
		Поток = Новый ПотокВПамяти;
		ЗаписьДанных = Новый ЗаписьДанных(Поток);
		ЗаписьДанных.ЗаписатьСтроку(ТекстКартинки, КодировкаТекста.UTF8);
		ЗаписьДанных.Закрыть();
		ДвоичныеДанныеКартинки = Поток.ЗакрытьИПолучитьДвоичныеДанные();
		Картинка = Новый Картинка(ДвоичныеДанныеКартинки);
		Форма["Картинка" + ИмяИндекса] = ПоместитьВоВременноеХранилище(Картинка, Форма.УникальныйИдентификатор);
	
	#КонецЕсли
	
КонецПроцедуры

Функция ЦветSVG(Цвет)
	
	ШаблонСтроки = "rgb(%1,%2,%3)";
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСтроки,
		Цвет.Красный,
		Цвет.Зеленый,
		Цвет.Синий);
	
КонецФункции

Функция КартинкаСводныйИндикатор()
	
	Возврат "<svg version=""1"" xmlns=""http://www.w3.org/2000/svg"" width=""25"" height=""25"">
			|    <defs>
			|        <clipPath id=""cut-off-bottom"">
			|            <rect x=""0"" y=""1"" width=""11.4"" height=""22"" />
			|        </clipPath>
			|        <clipPath id=""cut-off-bottom2"">
			|            <rect x=""12.6"" y=""1"" width=""11.4"" height=""22"" />
			|        </clipPath>
			|    </defs>
			|    <path d=""
			|        M12 4
			|        A 6 6 0 0 1 12 20.8"" stroke=""%Цвет1"" fill=""none"" stroke-width=""4"" clip-path=""url(#cut-off-bottom2)"" />
			|    <path d=""
			|        M12 4
			|        A 6 6 0 0 0 12 20.8"" stroke=""%Цвет2"" fill=""none"" stroke-width=""4"" clip-path=""url(#cut-off-bottom)"" />
			|</svg>";

КонецФункции

Функция КартинкаИндексДолжнойОсмотрительности()
	
	Возврат "<svg version=""1"" xmlns=""http://www.w3.org/2000/svg"" width=""25"" height=""25"">
			|    <text x=""12.5"" y=""15.5"" fill=""%Цвет"" font-size=""10"" text-anchor=""middle"">%Индекс</text>
			|    <circle r=""10"" cx=""12.5"" cy=""12.5"" fill=""none"" stroke=""%Цвет"" stroke-width=""2""/>
			|</svg>";

КонецФункции

Функция КартинкаИндексПлатежнойДисциплины()
	
	Возврат "<svg version=""1"" xmlns=""http://www.w3.org/2000/svg"" width=""30"" height=""25"">
			|    <text x=""14.6"" y=""15"" fill=""%Цвет"" font-size=""10"" text-anchor=""middle"" >%Индекс</text>
			|    <path d=""
			|  M25 17.86
			|  25 6.32
			|  15 1.5 
			|  5 6.32 
			|  5 17.86 
			|  15 22.7 z"" fill=""none"" stroke-width=""2"" stroke=""%Цвет"" />
			|</svg>";

КонецФункции

Функция КартинкаИндексФинансовогоРиска()
	
	Возврат "<svg version=""1"" xmlns=""http://www.w3.org/2000/svg"" width=""25"" height=""25"">
			|    <text x=""12.5"" y=""15.5"" fill=""%Цвет"" font-size=""10"" text-anchor=""middle"">%Индекс</text>
			|    <rect x=""3"" y=""2"" width=""20"" height=""20"" fill=""none"" stroke=""%Цвет"" stroke-width=""2"" />
			|</svg>";

КонецФункции

#КонецОбласти

#Область СобытияМониторингаСПАРК

// Возвращает структуру событий мониторинга СПАРК для контрагентов.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Структура - Структура возвращаемых данных с ключами:
//     * Контрагент                             - ОпределяемыеТипы.КонтрагентБИП - контрагент;
//     * ИНН                                    - Строка;
//     * ПодлежитПроверке                       - Булево;
//     * СобытияМониторинга                     - Массив;
//     * ДоступЗапрещен                         - Булево;
//     * НомерСледующейСтраницы                 - Строка;
//     * ИспользованиеРазрешено                 - Булево
//     * ТекстОшибки                            - Строка;
//     * ВидОшибки                              - ПеречислениеСсылка.ВидыОшибокСПАРКРиски;
//     * ДоступностьПодключенияТестовогоПериода - Строка;
//     * ОшибкаПриПроверкеТестовогоПериода      - Булево;
//     * ДанныеАутентификацииЗаполнены          - Булево
//     * РаботаВМоделиСервиса                   - Булево
//     * ВидКонтрагента                         - ПеречислениеСсылка.ВидыКонтрагентовСПАРКРиски - виды контрагента в СПАРК;
//
Функция НовыйДанныеСобытийМониторингСПАРК() Экспорт

	Результат = Новый Структура();

	// Основные данные.
	Результат.Вставить("Контрагент", Неопределено);
	Результат.Вставить("ИНН", "");
	Результат.Вставить("ПодлежитПроверке", Ложь);
	
	// События.
	Результат.Вставить("СобытияМониторинга", Новый Массив);
	Результат.Вставить("ДоступЗапрещен", Ложь);
	Результат.Вставить("НомерСледующейСтраницы", "");
	
	// Прочее.
	Результат.Вставить("ИспользованиеРазрешено", Истина);
	Результат.Вставить("ТекстОшибки",            "");
	Результат.Вставить(
		"ВидОшибки",
		ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ПустаяСсылка"));
	
	Результат.Вставить("ДоступностьПодключенияТестовогоПериода", "");
	Результат.Вставить("ОшибкаПриПроверкеТестовогоПериода",      Ложь);
	
	Результат.Вставить("ДанныеАутентификацииЗаполнены", Ложь);
	Результат.Вставить("РаботаВМоделиСервиса",          Ложь);
	Результат.Вставить("ВидКонтрагента",                Неопределено);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Тарификация

Функция ИдентификаторУслугиИндикаторыРиска() Экспорт
	
	Возврат "1c-spark-risks-indexes";
	
КонецФункции

#КонецОбласти

#КонецОбласти
