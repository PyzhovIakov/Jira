///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ПоискКонтрагентов".
// ОбщийМодуль.ПоискКонтрагентовСлужебныйКлиентСервер.
//
// Служебные методы, предназначенные для вызова как с клиента, так и с сервера.
//  - Доступные виды сравнение и контрагентов с представлениями.
//  - Списки выводимых в отчет полей по умолчанию.
//  - Описания полей, параметров запроса.
//  - Обработка загруженных критериев отборов и выводимых полей.
//  - Обработка значений веб-справочников.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область Литералы

#Область ВидыСравнений

// Получает все доступные сравнения критериев отбора с представлением.
//
// Возвращаемое значение:
//  Структура - виды сравнений:
//    * Ключ - строковое представление вида сравнения. Может принимать следующие значения: Равно, Больше,
//      БольшеИлиРавно, Меньше, МеньшеИлиРавно, ВСписке, Содержит.
//    * Значение - Структура - Описание вида сравнения. Содержит следующие поля:
//        ** Значение - Строка - идентификатор вида сравнения из веб-сервиса.
//        ** Представление - Строка - представление вида сравнения для вывода пользователю.
//
Функция ВидыСравнений() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить(
		"Равно",
		Новый Структура(
			"Значение, Представление",
			"EQUALS",
			НСтр("ru = 'Равно'")));
		
	Результат.Вставить(
		"Больше",
		Новый Структура(
			"Значение, Представление",
			"MORE",
			НСтр("ru = 'Больше'")));
		
	Результат.Вставить(
		"БольшеИлиРавно",
		Новый Структура(
			"Значение, Представление",
			"MORE_OR_EQUAL",
			НСтр("ru = 'Больше или равно'")));

	Результат.Вставить(
		"Меньше",
		Новый Структура(
			"Значение, Представление",
			"LESS",
			НСтр("ru = 'Меньше'")));

	Результат.Вставить(
		"МеньшеИлиРавно",
		Новый Структура(
			"Значение, Представление",
			"LESS_OR_EQUAL",
			НСтр("ru = 'Меньше или равно'")));
	
	Результат.Вставить(
		"ВСписке",
		Новый Структура(
			"Значение, Представление",
			ВидСравненияВСписке(),
			НСтр("ru = 'В списке'")));
		
	Результат.Вставить(
		"Содержит",
		Новый Структура(
			"Значение, Представление",
			ВидСравненияСодержит(),
			НСтр("ru = 'Содержит'")));
		
	Возврат Результат;
	
КонецФункции

// Формирует связь между идентификатором вида сравнения из веб-сервиса и его представлением пользователю
//
// Параметры:
//  ВсеВидыСравнения - Структура, Неопределено - должна соответствовать результату функции
//    ПоискКонтрагентовСлужебныйКлиентСервер.ВидыСравнений, но может содержать не все значения, если нужно получить
//    только ограниченный набор видов сравнений. Если не задано, то будет возвращено соответствие для всех видов
//    сравнения.
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - связь между идентификатором и его представлением:
//    * Ключ - Строка - идентификатор вида сравнения.
//    * Значение - Строка - представление вида сравнения для вывода пользователю.
//
Функция ПредставленияВидовСравнений(Знач ВсеВидыСравнения = Неопределено) Экспорт
	
	Если ВсеВидыСравнения = Неопределено Тогда
		ВсеВидыСравнения = ВидыСравнений();
	КонецЕсли;
	
	ПредставленияВидов = Новый Соответствие;
	Для Каждого КлючЗначение Из ВсеВидыСравнения Цикл
		ПредставленияВидов.Вставить(
			КлючЗначение.Значение.Значение,
			КлючЗначение.Значение.Представление);
	КонецЦикла;
	
	Возврат ПредставленияВидов;
	
КонецФункции

// Возвращает идентификатор вида сравнения из веб-сервиса, соответствующий виду сравнения "Содержит".
//
// Возвращаемое значение:
//  Строка - идентификатор вида сравнения.
//
Функция ВидСравненияСодержит() Экспорт
	
	Возврат "MATCHES";
	
КонецФункции

// Возвращает идентификатор вида сравнения из веб-сервиса, соответствующий виду сравнения "В списке".
//
// Возвращаемое значение:
//  Строка - идентификатор вида сравнения.
//
Функция ВидСравненияВСписке() Экспорт
	
	Возврат "ONE_OF";
	
КонецФункции

#КонецОбласти

#Область ВидыКонтрагентов

// Возвращает идентификатор вида контрагента из веб-сервиса, соответствующий юридическому лицу.
//
// Возвращаемое значение:
//  Строка - идентификатор вида контрагента.
//
Функция ВидКонтрагентаЮрЛицо() Экспорт
	
	Возврат "CORPORATION";
	
КонецФункции

// Возвращает идентификатор вида контрагента из веб-сервиса, соответствующий индивидуальному предпринимателю.
//
// Возвращаемое значение:
//  Строка - идентификатор вида контрагента.
//
Функция ВидКонтрагентаИП() Экспорт
	
	Возврат "PERSON";
	
КонецФункции

// Возвращает представление вида контрагента на основании его идентификатора.
//
// Параметры:
//  ВидКонтрагента - Строка - идентификатор вида контрагента.
//
// Возвращаемое значение:
//  Строка - представление для вывода пользователю.
//
Функция ПредставлениеКонтрагентаПоВиду(ВидКонтрагента) Экспорт
	
	Если ВидКонтрагента = ВидКонтрагентаЮрЛицо() Тогда
		Возврат НСтр("ru = 'Юридические лица'");
	ИначеЕсли ВидКонтрагента = ВидКонтрагентаИП() Тогда
		Возврат НСтр("ru = 'Индивидуальные предприниматели'");
	Иначе
		Возврат ВидКонтрагента;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПоляИОтборы

// Возвращает правильное описание данных, которые используются для реализации полей быстрого доступа.
//
// Возвращаемое значение:
//  Структура - описание критерия отбора:
//    * ВидКонтрагента - Строка - идентификатор вид контрагента, для которого выводится быстрый отбор.
//    * Реквизит - Строка - имя реквизита формы.
//    * РеквизитСписок - Строка - имя реквизита формы, если значение критерия отбора задано списком.
//    * Представление - Строка - представление критерия (устанавливается в веб-сервисе).
//    * ИдентификаторКритерия - Строка - идентификатор критерия (устанавливается в веб-сервисе).
//    * ЭтоПолеОКВЭД - Булево - Истина, если критерий отбора необходимо заполнять значением из Классификатора ОКВЭД.
//    * ТипЗначения - Строка - тип значение критерия (получается из веб-сервиса).
//    * ТипОбработки - Строка - тип обработки критерия (получается из веб-сервиса).
//    * ВыборИзСправочника - Булево - Истина, если критерий отбора необходимо заполнять значением из вэб-справочника.
//    * Положение - Строка - имя группы быстрого доступа, в которой должны быть расположены элементы формы, связанные
//      с реквизитами, указанными в параметрах Реквизит, РеквизитСписок.
//    * ВидСравнения - Строка - идентификатор текущего вида сравнения, выбранный пользователем для критерия отбора,
//      либо значение по умолчанию (первый в списке доступных видов сравнения).
//    * Значение - Произвольный - текущее значение критерия отбора.
//    * Элемент - Строка - имя элемента, связанного с реквизитом, указанным в параметре Реквизит.
//    * ЭлементСписок - Строка - имя элемента, связанного с реквизитом, указанным в параметре РеквизитСписок.
//    * ПредставлениеЗначения - Произвольный - представление значения для отображения пользователю. Используется для
//      критериев, значение которых необходимо выбирать из веб-справочников.
//    * ПредставлениеЗначенияСписка - Произвольный - представление значения, для отображения пользователю, если оно
//      задано списком. Используется для критериев, значение которых необходимо выбирать из веб-справочников.
//    * Пометка - Булево - Признак того, что критерий участвует в отборе.
//
Функция НовыйОписаниеБыстрогоОтбора() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВидКонтрагента",              "");
	Результат.Вставить("Реквизит",                    "");
	Результат.Вставить("РеквизитСписок",              "");
	Результат.Вставить("Представление",               "");
	Результат.Вставить("ИдентификаторКритерия",       "");
	Результат.Вставить("ЭтоПолеОКВЭД",                Ложь);
	Результат.Вставить("ТипЗначения",                 "");
	Результат.Вставить("ТипОбработки",                "");
	Результат.Вставить("ВыборИзСправочника",          Ложь);
	Результат.Вставить("Положение",                   "");
	Результат.Вставить("ВидСравнения",                "");
	Результат.Вставить("Значение",                    Неопределено);
	Результат.Вставить("Элемент",                     "");
	Результат.Вставить("ЭлементСписок",               "");
	Результат.Вставить("ПредставлениеЗначения",       "");
	Результат.Вставить("ПредставлениеЗначенияСписка", "");
	Результат.Вставить("Пометка",                     Ложь);
	
	Возврат Результат;

КонецФункции

// Формирует правильное описание значения из веб-справочника, заполненное по умолчанию.
//
// Возвращаемое значение:
//  Структура - описание значения:
//    * Представление - Строка - представление, выводимое пользователю.
//    * Данные - Произвольный - произвольные данные, соответствующие значению из веб-справочника. Точный состав
//      задается на стороне веб-сервиса и может быть различным для разных критериев отбора.
//
Функция НовыйОписаниеЗначенияВыбораИзСправочника() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Представление", "");
	Результат.Вставить("Данные", "");
	
	Возврат Результат;
	
КонецФункции

// Формирует правильное описание сохраняемых пользовательских настроек поиска контрагентов, заполненное по умолчанию.
//
// Возвращаемое значение:
//  Структура - настройки для сохранения:
//    * НастройкаПолей - Соответствие Из КлючИЗначение - настройка полей по виду контрагента:
//        ** Ключ - Строка - вид контрагента.
//        ** Значение - Массив Из Структура - настройка полей по определенному виду контрагента.
//           см. ПоискКонтрагентовСлужебныйКлиентСервер.ОбработатьНастройкиПолейПослеЗагрузки.НастройкаПолей
//    * НастройкаОтборов - Соответствие Из КлючИЗначение  - настройка критериев отбора по виду контрагента:
//        ** Ключ - Строка - вид контрагента.
//        ** Значение - Соответствие Из КлючИЗначение  - настройка критериев отбора:
//             *** Ключ - Строка - идентификатор критерия отбора.
//             *** Значение - Структура - описание критерия отбора.
//                 См. ПоискКонтрагентовСлужебныйКлиентСервер.НовыйОписаниеПоляОтбора.
//    * ВидКонтрагента - Строка - вид контрагента, выбранный в форме.
//
Функция НовыйСохраняемыеНастройки() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("НастройкаПолей",   Новый Соответствие);
	Результат.Вставить("НастройкаОтборов", Новый Соответствие);
	Результат.Вставить("ВидКонтрагента",   "");
	
	Возврат Результат;
	
КонецФункции

// Формирует правильное описание доступного поля, заполненное по умолчанию.
//
// Возвращаемое значение:
//  Структура - описание поля:
//    * Наименование - Строка - представление поля для пользователя.
//    * ТипОбработки - Строка - тип обработки поля.
//    * ТипЗначения - Строка - тип значения поля.
//
Функция НовыйДоступноеПоле() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Наименование", "");
	Результат.Вставить("ТипОбработки", "");
	Результат.Вставить("ТипЗначения",  "");
	
	Возврат Результат;
	
КонецФункции

// Выполняет проверку текущих настроек полей, заданных пользователем, после загрузки информации о доступных полях.
// Если в настройках пользователя указаны поля, которые теперь нельзя использовать, то они удаляются.
// Порядок полей, отмеченных пользователем, остается таким, какой был в настройках.
// Поля, которых ранее не было в настройках пользователя, выводятся в конце списка с сортировкой по представлению.
// Если в настройках пользователя вообще не указаны поля, то используется настройка по умолчанию.
//
// Параметры:
//  НастройкаПолей - Массив Из Структура - настройка выводимых полей для определенного вида контрагента. Содержит
//    элементы со следующими свойствами:
//    * Идентификатор - Строка - идентификатор поля в веб-сервисе.
//    * Пометка - Булево - признак того, что поле должно быть выведено в отчет.
//  ДоступныеПоля - Соответствие Из КлючИЗначение - доступные поля по определенному виду контрагента.
//                  См. ПоискКонтрагентовСлужебный.ДоступныеПоля.Поля.
//                - Неопределено - если информация по доступным отборам не загружена.
//  ПоляПоУмолчанию - см. ПоискКонтрагентовСлужебныйКлиентСервер.ПоляПоУмолчанию.
//
Процедура ОбработатьНастройкиПолейПослеЗагрузки(
		НастройкаПолей,
		Знач ДоступныеПоля,
		Знач ПоляПоУмолчанию) Экспорт
	
	Если ДоступныеПоля = Неопределено Тогда
		НастройкаПолей = Новый Массив;
		Возврат;
	КонецЕсли;
	
	ОбработанноеЗначение = Новый Массив;
	
	Если ТипЗнч(НастройкаПолей) <> Тип("Массив") Тогда
		НастройкаПолей = Новый Массив;
	КонецЕсли;
	
	Если НастройкаПолей.Количество() = 0 Тогда
		Для Каждого ИмяПоля Из ПоляПоУмолчанию Цикл
			НастройкаПолей.Добавить(Новый Структура("Идентификатор, Пометка", ИмяПоля, Истина));
		КонецЦикла;
	КонецЕсли;
	
	УчтенныеПоля = Новый Соответствие;
	
	Для Каждого Поле Из НастройкаПолей Цикл
		
		ПравильноеЗначение = Новый Структура("Идентификатор, Пометка", "", Ложь);
		Если ЭтоСтруктура(Поле) Тогда
			ЗаполнитьЗначенияСвойств(ПравильноеЗначение, Поле);
		КонецЕсли;
		
		Если ДоступныеПоля[ПравильноеЗначение.Идентификатор] = Неопределено
			Или УчтенныеПоля[ПравильноеЗначение.Идентификатор] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработанноеЗначение.Добавить(
			Новый Структура(
				"Идентификатор, Пометка",
				ПравильноеЗначение.Идентификатор,
				ПравильноеЗначение.Пометка));
		
		УчтенныеПоля.Вставить(Поле.Идентификатор, Истина);
		
	КонецЦикла;
	
	ДополнитьПоля = Новый СписокЗначений;
	Для Каждого КлючЗначение Из ДоступныеПоля Цикл
		Если УчтенныеПоля[КлючЗначение.Ключ] = Неопределено Тогда
			
			ПравильноеЗначение = НовыйДоступноеПоле();
			Если ЭтоСтруктура(КлючЗначение.Значение) Тогда
				ЗаполнитьЗначенияСвойств(ПравильноеЗначение, КлючЗначение.Значение);
			КонецЕсли;
			
			ДополнитьПоля.Добавить(КлючЗначение.Ключ, ПравильноеЗначение.Наименование);
			
		КонецЕсли;
	КонецЦикла;
	
	Если ДополнитьПоля.Количество() > 0 Тогда
		ДополнитьПоля.СортироватьПоПредставлению();
		Для Каждого Поле Из ДополнитьПоля Цикл
			ОбработанноеЗначение.Добавить(
				Новый Структура(
					"Идентификатор, Пометка",
					Поле.Значение,
					Ложь));
		КонецЦикла;
	КонецЕсли;
	
	НастройкаПолей = ОбработанноеЗначение;
	
КонецПроцедуры

// Выполняет проверку текущих настроек отборов, заданных пользователем, после загрузки информации о доступных критерия.
// Если в настройках пользователя указаны критерии, которые теперь нельзя использовать, то они удаляются.
// Если в настройках пользователя указаны виды сравнения, которые больше нельзя использовать для критерия, то вид
// сравнения заменяется на значение по умолчанию (первый из списка возможных), пользователю выводится уведомление о
// смене вида сравнения. Значение поля приводится к списку значений либо к единственному значению в зависимости от
// исходного и нового вида сравнения.
//
// Параметры:
//  НастройкаОтборов - Соответствие Из КлючИЗначение  - текущая настройка критериев отбора:
//    * Ключ - Строка - идентификатор критерия отбора.
//    * Значение - Структура - описание критерия отбора
//        см. ПоискКонтрагентовСлужебныйКлиентСервер.НовыйОписаниеПоляОтбора.
//  ДоступныеОтборы - Структура - доступные критерии отбора по определенному виду контрагента.
//                    См. ПоискКонтрагентовСлужебный.ДоступныеОтборы.Отбор.
//                  - Неопределено - если информация по доступным отборам не загружена.
//  Информация - Массив Из Строка - дополнительная информация о результатах обработки. В данный параметр будут
//    добавлены строки с сообщениями о замене вида сравнения.
//  ПредставлениеВидаКонтрагента - Строка - представление текущего вида контрагента для вывода в сообщение
//    пользователю.
//
Процедура ОбработатьНастройкиОтборовПослеЗагрузки(
		НастройкаОтборов,
		Знач ДоступныеОтборы,
		Информация,
		Знач ПредставлениеВидаКонтрагента) Экспорт
	
	Если ДоступныеОтборы = Неопределено Тогда
		НастройкаОтборов = Новый Соответствие;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НастройкаОтборов) <> Тип("Соответствие") Тогда
		НастройкаОтборов = Новый Соответствие;
	КонецЕсли;
	
	Если НастройкаОтборов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыДляПроверки = Новый Соответствие;
	Для Каждого ОписаниеОтбора Из ДоступныеОтборы Цикл
		ИдентификаторыДляПроверки.Вставить(
			ОписаниеОтбора.Идентификатор,
			Новый Структура(
				"Представление, ВариантыСравнения",
				ОписаниеОтбора.Представление,
				ОписаниеОтбора.ВариантыСравнения));
	КонецЦикла;
	
	КлючиДляУдаления = Новый Массив;
	
	ПредставленияВидовСравнений = ПредставленияВидовСравнений();
	
	Для Каждого КлючЗначение Из НастройкаОтборов Цикл
		ОписаниеОтбора = ИдентификаторыДляПроверки[КлючЗначение.Ключ];
		Если ОписаниеОтбора = Неопределено Тогда
			КлючиДляУдаления.Добавить(КлючЗначение.Ключ);
			Продолжить;
		КонецЕсли;
		
		ТекущаяНастройка = КлючЗначение.Значение;
		
		// Проверяем что выбранный вид сравнения есть в доступных. Если нет, то меняем на первый в списке.
		ВидСравненияНастройки = ТекущаяНастройка.ВидСравнения;
		Если ЗначениеЗаполнено(ВидСравненияНастройки)
			И ОписаниеОтбора.ВариантыСравнения.Найти(ВидСравненияНастройки) = Неопределено Тогда
			ВидСравненияПоУмолчанию = ОписаниеОтбора.ВариантыСравнения[0];
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Вид сравнения ""%1"" больше недоступен для поля ""%2"". Установлен вид сравнения ""%3"". %4'"),
				ПредставленияВидовСравнений[ВидСравненияНастройки],
				ОписаниеОтбора.Представление,
				ПредставленияВидовСравнений[ВидСравненияПоУмолчанию],
				ПредставлениеВидаКонтрагента);
			Информация.Добавить(ТекстСообщения);
			
			ТекущаяНастройка.ВидСравнения = ВидСравненияПоУмолчанию;
			
			Если ВидСравненияПоУмолчанию = ВидСравненияВСписке() Тогда
				
				Если ТипЗнч(ТекущаяНастройка.Значение) <> Тип("СписокЗначений") Тогда
					НовоеЗначение = Новый СписокЗначений;
					НовоеЗначение.Добавить(ТекущаяНастройка.Значение);
					ТекущаяНастройка.Значение = НовоеЗначение;
				КонецЕсли;
				
			ИначеЕсли ВидСравненияНастройки = ВидСравненияВСписке()
				И ТипЗнч(ТекущаяНастройка.Значение) = Тип("СписокЗначений")
				И ТекущаяНастройка.Значение.Количество() > 0 Тогда
				
				ТекущаяНастройка.Значение = ТекущаяНастройка.Значение[0].Значение;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверяет что после обновления у критериев с типом ВыборИзСправочника и ЭтоПолеОКВЭД
		// осталось допустимое значение.
		Если ТекущаяНастройка.ВыборИзСправочника
			Или ТекущаяНастройка.ЭтоПолеОКВЭД Тогда
			
			Если ТипЗнч(ТекущаяНастройка.Значение) = Тип("СписокЗначений") Тогда
				
				НовыйСписок        = Новый СписокЗначений;
				НовоеПредставление = Новый СписокЗначений;
				
				Для Каждого ЭлементСписка Из ТекущаяНастройка.Значение Цикл
					
					ПравильноеЗначение = ПравильноеЗначениеИзСправочника(ЭлементСписка.Значение);
					Если ПравильноеЗначение <> Неопределено Тогда
						НовыйСписок.Добавить(ПравильноеЗначение, ПравильноеЗначение.Представление);
						НовоеПредставление.Добавить(ПравильноеЗначение.Представление);
					КонецЕсли;
					
				КонецЦикла;
				
				ТекущаяНастройка.Значение              = НовыйСписок;
				ТекущаяНастройка.ПредставлениеЗначения = НовоеПредставление;
				
			Иначе
				
				ТекущаяНастройка.Значение = ПравильноеЗначениеИзСправочника(ТекущаяНастройка.Значение);
				Если ТекущаяНастройка.Значение = Неопределено Тогда
					ТекущаяНастройка.ПредставлениеЗначения = "";
				Иначе
					ТекущаяНастройка.ПредставлениеЗначения = ТекущаяНастройка.Значение.Представление;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекущаяНастройка.Значение) Тогда
			ТекущаяНастройка.Пометка = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Ключ Из КлючиДляУдаления Цикл
		НастройкаОтборов.Удалить(Ключ);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список выводимых по умолчанию полей для каждого вида контрагента.
//
// Параметры:
//  ВидКонтрагента - Строка - идентификатор вида контрагента из веб-сервиса.
//
// Возвращаемое значение:
//  Массив Из Строка - идентификаторы полей, выводимых по умолчанию.
//
Функция ПоляПоУмолчанию(ВидКонтрагента) Экспорт
	
	Результат = Новый Массив;
	
	ВидКонтрагентаПереопределяемые = "";
	
	Если ВидКонтрагента = ВидКонтрагентаЮрЛицо() Тогда
	
		Результат.Добавить("CORP_NAME");
		Результат.Добавить("CORP_INN");
		Результат.Добавить("CORP_OGRN");
		Результат.Добавить("CORP_REGDATE");
		Результат.Добавить("CORP_OKVED");
		
		ВидКонтрагентаПереопределяемые = "ЮрЛицо";
		
	ИначеЕсли ВидКонтрагента = ВидКонтрагентаИП() Тогда
		
		Результат.Добавить("PERS_FULLNAME");
		Результат.Добавить("PERS_INN");
		Результат.Добавить("PERS_OGRN");
		Результат.Добавить("PERS_OKVED");
		
		ВидКонтрагентаПереопределяемые = "ИП";
		
	КонецЕсли;
	
	Возврат ПоискКонтрагентовСлужебныйВызовСервера.ОпределитьПоляПоУмолчанию(
		ВидКонтрагентаПереопределяемые,
		Результат);
	
КонецФункции

#КонецОбласти

#Область ЗначениеИзСправочника

// Проверяет, что переданное значение соответствует значению из веб-справочника и возвращает понятное пользователю
// представление.
// Правильное значение должно содержать либо структуру, описанную в функции
// ПоискКонтрагентовСлужебныйКлиентСервер.ПравильноеЗначениеИзСправочника, либо список значений, содержащий
// аналогичные структуры.
//
// Параметры:
//  НовоеЗначение - Произвольный - значение критерия, которое необходимо проверить.
//
// Возвращаемое значение:
//  - Неопределено - переданное значение не соответствует правильной структуре значения из веб-справочника.
//  - Строка - представление, если передано одно значение.
//  - СписокЗначений Из Строка - список значений, содержащий представление элементов, если в параметре НовоеЗначение
//    передан список значений.
//
Функция ПредставлениеЗначенияИзСправочника(НовоеЗначение) Экспорт
	
	Если ТипЗнч(НовоеЗначение) = Тип("СписокЗначений") Тогда
		
		ЗначениеДляВывода = Новый СписокЗначений;
		
		Для Каждого ЭлементСписка Из НовоеЗначение Цикл
			
			ПравильноеЗначение = ПравильноеЗначениеИзСправочника(ЭлементСписка.Значение);
			Если ПравильноеЗначение <> Неопределено Тогда
				ЗначениеДляВывода.Добавить(ПравильноеЗначение.Представление);
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат ЗначениеДляВывода;
		
	Иначе
		
		ПравильноеЗначение = ПравильноеЗначениеИзСправочника(НовоеЗначение);
		Если ПравильноеЗначение = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			Возврат ПравильноеЗначение.Представление;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Преобразует переданное значение в структуру, описывающую значение из веб-справочника.
// Если в параметр ВыбранноеЗначение передана структура, то она используется для заполнения пустой структуры,
// описывающей значение из веб-справочника.
// Если передан другой тип данных, то всегда возвращается неопределено
//
// Параметры:
//  ВыбранноеЗначение - Произвольный - значение, которое необходимо преобразовать к правильной структуре.
//
// Возвращаемое значение:
//  - Неопределено - результат преобразования.
//  - см. НовыйОписаниеЗначенияВыбораИзСправочника.
//
Функция ПравильноеЗначениеИзСправочника(ВыбранноеЗначение) Экспорт
	
	Если Не ЭтоСтруктура(ВыбранноеЗначение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПравильноеЗначение = НовыйОписаниеЗначенияВыбораИзСправочника();
	ЗаполнитьЗначенияСвойств(ПравильноеЗначение, ВыбранноеЗначение);
	
	Возврат ПравильноеЗначение;
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыИФункции

// Формирует структуру параметров, используемых для получения информации по поиску контрагентов.
//
// Возвращаемое значение:
//  Структура - параметры запроса по умолчанию:
//    * Отбор - Массив Из Структура - описание отборов.
//        См. ПоискКонтрагентовСлужебныйКлиентСервер.НовыйОписаниеПоляОтбора.
//    * Поля - Массив Из Строка - идентификаторы полей, которые необходимо вывести в отчет.
//    * ДоступныеПоля - Соответствие Из КлючИЗначение - доступные поля по соответствующему виду контрагента.
//      См. ПоискКонтрагентовСлужебный.ДоступныеПоля.Поля.
//    * ВидКонтрагента - Строка - идентификатор вида контрагента.
//    * НомерСтраницы - Число - номер страницы, которую необходимо получить из веб-сервиса.
//    * ДобавитьРасшифровку - Булево - если Истина, то в отчет будет выводиться расшифровка, которая включает в себя
//        следующие особенности:
//        - добавляемая расшифровка будет содержать структуру, описанную в методе
//          Отчет.ПоискКонтрагентов.МодульОбъекта.НовыйЗначениеРасшифровки.
//        - для одной из колонок будет добавлена расшифровка, позволяющая открыть данные о контрагенте. Номер колонки
//          определяется методом Отчет.ПоискКонтрагентов.МодульОбъекта.НомерКолонкиГиперссылка.
//        - если в результат выводится поле ОКВЭД, то оно будет заменено кратким представлением, а в расшифровку будет
//          добавлен полный список кодов ОКВЭД контрагента.
//        Если значение параметра ДобавитьРасшифровку равно Ложь, то данные будут выведены в отчет без изменения,
//        расшифровка не будет добавлена ни к одному полю.
//        Предполагается, что ДобавитьРасшифровку равное Истина используется для вывода отчета на экран, а равное Ложь
//        для сохранения информации в файл.
//
Функция НовыйПараметрыЗапроса() Экспорт

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Отбор",               Новый Массив);
	ПараметрыЗапроса.Вставить("Поля",                Новый Массив);
	ПараметрыЗапроса.Вставить("ДоступныеПоля",       Новый Соответствие);
	ПараметрыЗапроса.Вставить("ВидКонтрагента",      "");
	ПараметрыЗапроса.Вставить("НомерСтраницы",       0);
	ПараметрыЗапроса.Вставить("ДобавитьРасшифровку", Ложь);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Проверяет, что переданное значение является структурой или фиксированной структурой.
//
// Параметры:
//  ПроверяемоеЗначение - Произвольный - значение, которое необходимо проверить.
//
// Возвращаемое значение:
//  Булево - Истина, если тип проверяемого значения равен Структура или ФиксированнаяСтруктура, Ложь в противном
//    случае.
//
Функция ЭтоСтруктура(ПроверяемоеЗначение) Экспорт
	
	Возврат (ТипЗнч(ПроверяемоеЗначение) = Тип("Структура")
		Или ТипЗнч(ПроверяемоеЗначение) = Тип("ФиксированнаяСтруктура"));
	
КонецФункции

// Сокращает представление ОКВЭД до 50 символов. Если длина исходного значения менее 50 символов, то оно возвращается
//  без изменений.
//
// Параметры:
//  Представление - Строка - исходное представление.
//
// Возвращаемое значение:
//  Строка - сокращенное представление.
//
Функция КраткоеПредставлениеОКВЭД(Знач Представление) Экспорт
	
	Результат = Представление;
	
	Если СтрДлина(Результат) > 50 Тогда
		Результат = Лев(Результат, 50) + "...";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует правильное описание критерия отбора, заполненное по умолчанию.
//
// Возвращаемое значение:
//  Структура - описание критерия:
//    * Идентификатор - Строка - идентификатор критерия отбора.
//    * ВидСравнения - Строка - идентификатор текущего вида сравнения.
//    * Значение - Произвольный - значение критерия отбора, установленное пользователем.
//    * Представление - Строка - представление критерия отбора, выводимое пользователю.
//    * ВыборИзСправочника - Булево - Истина, если значение критерия должно выбираться из веб-справочника.
//    * ПредставлениеЗначения - Произвольный - Представление значения для критериев, которые задаются значениями из
//      веб-справочников.
//    * Пометка - Булево - признак использования критерия при формировании отчета.
//    * ЭтоПолеОКВЭД - Булево - признак использования критерия для отбора по ОКВЭД.
//    * Порядок - Число - порядковый номер критерия в общем списке.
//    * БыстрыйДоступ - Булево - если Истина, то критерий отбора выводится в шапку отчета.
//
Функция НовыйОписаниеПоляОтбора() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор",         "");
	Результат.Вставить("ВидСравнения",          "");
	Результат.Вставить("Значение",              "");
	Результат.Вставить("Представление",         "");
	Результат.Вставить("ВыборИзСправочника",    Ложь);
	Результат.Вставить("ПредставлениеЗначения", "");
	Результат.Вставить("Пометка",               Ложь);
	Результат.Вставить("ЭтоПолеОКВЭД",          Ложь);
	Результат.Вставить("Порядок",               9999);
	Результат.Вставить("БыстрыйДоступ",         Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти