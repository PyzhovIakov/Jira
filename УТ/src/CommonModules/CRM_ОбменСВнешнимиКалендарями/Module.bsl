///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Общие серверные процедуры для выполнения синхронизации между календарем сотрудника и  календарем внешнего сервиса //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Инициализация узла обмена используемого для выполнения механизма синхронизации между календарями сотрудника
// и календарями внешних сервисов
//
Процедура ИнициализироватьУзелПланаОбменаДляВнешнихКалендарей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтотУзел = ПланыОбмена.CRM_СинхронизацияКалендарей.ЭтотУзел();
	Если ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотУзел, "Код")) Тогда
		Возврат;
	КонецЕсли;
	
	УзелОбъект = ЭтотУзел.ПолучитьОбъект();
	УзелОбъект.ОбменДанными.Загрузка = Истина;
	УзелОбъект.УстановитьНовыйКод();
	УзелОбъект.Наименование = НСтр("ru = 'Этот узел'");
	УзелОбъект.Записать();
	
КонецПроцедуры

// Синхронизация всех календарей для одной учетной записи внешнего сервиса
//  Выгрузка изменений из календаря сотрудника (1С) во внешний календарь
//  Загрузка изменений из внешнего календаря в календарь сотрудника (1С)
//  Удаление событий в календарях сотрудника, которые не были найдены на стороне календарей внешнего сервиса
//  Переименование календаря
// 
// Параметры:
//  ДанныеАвторизации - СправочникСсылка.УчетныеЗаписиВнешнихКалендарей - Ссылка на запись справочника УчетныеЗаписиВнешнихКалендарей
//  Пользователь	 - СправочникСсылка.Пользователи	 - Ссылка на пользователя.
//
Процедура СинхронизироватьDAVКалендарьДляУчетнойЗаписи(ДанныеАвторизации, Пользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ДанныеАвторизации) Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяЗапись = ДанныеАвторизации.УчетнаяЗаписьВнешнегоКалендаря;
	КалендарьДляСинхронизации = 
		CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("КалендарьДляСинхронизации", Пользователь);
	ИдентификаторКалендаря = КалендарьДляСинхронизации.Идентификатор;
	
	ПараметрыПроцедурыСинхронизации = НовыеПараметрыПроцедурыСинхронизации();
	
	СписокКалендарейDAV = CRM_СинхронизацияDAV.СписокКалендарейНаСервереDAV(ДанныеАвторизации);
	ПараметрыОтбора = Новый Структура("Идентификатор", ИдентификаторКалендаря);
	ДанныеКалендаря = СписокКалендарейDAV.Скопировать(ПараметрыОтбора);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	тзДанныеКалендаря.Идентификатор КАК Идентификатор,
	|	тзДанныеКалендаря.Наименование КАК Наименование,
	|	тзДанныеКалендаря.ТипКалендаря КАК ТипКалендаря
	|ПОМЕСТИТЬ ДанныеКалендаря
	|ИЗ
	|	&тзДанныеКалендаря КАК тзДанныеКалендаря
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСинхронизацииСВнешнимиКалендарями.КодВнешнегоКалендаря КАК КодВнешнегоКалендаря,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.УчетнаяЗаписьВнешнегоКалендаря КАК УчетнаяЗаписьВнешнегоКалендаря,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.КалендарьDAVНаименование КАК КалендарьDAVНаименование,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.КалендарьСотрудника КАК КалендарьСотрудника,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.Статус КАК Статус,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.ТокенСинхронизации КАК ТокенСинхронизации,
	|	ДанныеКалендаря.Идентификатор КАК ЗагруженныйКалендарьИдентификатор,
	|	ДанныеКалендаря.Наименование КАК ЗагруженныйКалендарьНаименование,
	|	ДанныеКалендаря.ТипКалендаря КАК ТипКалендаря
	|ИЗ
	|	РегистрСведений.CRM_НастройкиСинхронизацииСВнешнимиКалендарями КАК НастройкиСинхронизацииСВнешнимиКалендарями
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеКалендаря КАК ДанныеКалендаря
	|		ПО НастройкиСинхронизацииСВнешнимиКалендарями.КодВнешнегоКалендаря = ДанныеКалендаря.Идентификатор
	|ГДЕ
	|	НастройкиСинхронизацииСВнешнимиКалендарями.УчетнаяЗаписьВнешнегоКалендаря = &УчетнаяЗаписьВнешнегоКалендаря
	|	И НастройкиСинхронизацииСВнешнимиКалендарями.Статус = ИСТИНА");
	Запрос.УстановитьПараметр("тзДанныеКалендаря", ДанныеКалендаря);
	Запрос.УстановитьПараметр("УчетнаяЗаписьВнешнегоКалендаря", УчетнаяЗапись);
	РезультатЗапроса = Запрос.Выполнить();
	
	СписокВсехИзменений = ПолучитьСписокВсехИзменений(УчетнаяЗапись);
	Синхронизация = РезультатЗапроса.Выбрать();
	Если Синхронизация.Следующий() Тогда
		
		// Синхронизация между календарями осуществляется в следующем порядке:
		// - Выгрузка изменений из календаря сотрудника во внешний календарь
		// - Загрузка изменений из внешнего календаря календарь сотрудника
		// - Удаление событий в Календарях сотрудника, которые не были найдены на стороне Календарей внешнего сервиса
		// - Переименование Календаря, если требуется
			
			ОписаниеКалендаря = НовоеОписаниеКалендаря();
			ОписаниеКалендаря.Идентификатор = Синхронизация.КодВнешнегоКалендаря;
			ОписаниеКалендаря.Наименование = Синхронизация.КалендарьDAVНаименование;
			ОписаниеКалендаря.ТокенСинхронизации = Синхронизация.ТокенСинхронизации;
			ОписаниеКалендаря.КалендарьСотрудника = Синхронизация.КалендарьСотрудника;
			ОписаниеКалендаря.УчетнаяЗаписьВнешнегоКалендаря = Синхронизация.УчетнаяЗаписьВнешнегоКалендаря;
			ОписаниеКалендаря.ТипКалендаря = Синхронизация.ТипКалендаря;
			
			ВсеИзмененияКалендаря = ВыгрузитьВсеИзмененияКалендаря(СписокВсехИзменений, Синхронизация.КодВнешнегоКалендаря, 
				Синхронизация.КалендарьСотрудника);
			ВыгрузитьВсеСобытия(ОписаниеКалендаря, ВсеИзмененияКалендаря);
			ЗагрузитьВсеСобытия(ОписаниеКалендаря, ПараметрыПроцедурыСинхронизации);
			УдалитьСобытияКалендаря(ДанныеАвторизации, ОписаниеКалендаря, ПараметрыПроцедурыСинхронизации);
			ПроверкаНаименованияКалендаря(ДанныеАвторизации, ОписаниеКалендаря);
			СохранитьНастройкиСинхронизации(ДанныеАвторизации, ОписаниеКалендаря);
	
	КонецЕсли;
	
	Если Не УчетнаяЗапись.Пустая() Тогда
		УчетнаяЗаписьОбъект = УчетнаяЗапись.ПолучитьОбъект();
		УчетнаяЗаписьОбъект.Заблокировать();
		УчетнаяЗаписьОбъект.ДатаСинхронизации = ТекущаяДатаСеанса();
		УчетнаяЗаписьОбъект.Записать();
		УчетнаяЗаписьОбъект.Разблокировать();
	КонецЕсли;
	
КонецПроцедуры

// Необходимые действия перед записью источника записи календаря.
//
// Параметры:
//  Объект	 - ДокументСсылка.CRM_ЭтапКалендарногоПлана,
//             ДокументСсылка.CRM_Взаимодействие,
//             ДокументСсылка.CRM_Телемаркетинг,
//             СправочникСсылка.МаркетинговыеМероприятия	 - Событие календаря.
//
Процедура ПередЗаписьюИсточникаЗаписиКалендаря(Объект) Экспорт
	
	Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	Объект.ОбменДанными.Получатели.Очистить();
	
КонецПроцедуры

// Процедура - Записать данные авторизации.
//
// Параметры:
//  ДанныеАвторизации	 - СправочникСсылка.УчетныеЗаписиВнешнихКалендарей - Ссылка на запись справочника
//                                                                           "УчетныеЗаписиВнешнихКалендарей".
//  Пользователь	 - СправочникСсылка.Пользователи	 - Ссылка на пользователя.
//  СервисКалендарей				 - Строка	 - Сервис календарей.
//  УчетнаяЗаписьВнешнегоКалендаря	 - СправочникСсылка.CRM_УчетныеЗаписиВнешнихКалендарей - Учетная запись внешнего календаря.
//  ДанныеВнешнегоКалендаря			 - СтрокаТаблицыЗначений	 - Данные внешнего календаря.
//
Процедура ЗаписатьДанныеАвторизации(ДанныеАвторизации, Пользователь, СервисКалендарей, 
	УчетнаяЗаписьВнешнегоКалендаря, ДанныеВнешнегоКалендаря) Экспорт
	
	Попытка
		
		Если УчетнаяЗаписьВнешнегоКалендаря = Справочники.CRM_УчетныеЗаписиВнешнихКалендарей.ПустаяСсылка() Тогда
			УчетнаяЗаписьОбъект = Справочники.CRM_УчетныеЗаписиВнешнихКалендарей.СоздатьЭлемент();
		Иначе
			УчетнаяЗаписьОбъект = УчетнаяЗаписьВнешнегоКалендаря.ПолучитьОбъект();
		КонецЕсли;
		УчетнаяЗаписьОбъект.Заблокировать();
		УчетнаяЗаписьОбъект.Наименование 		= ДанныеАвторизации.Логин;
		УчетнаяЗаписьОбъект.Сервис 				= СервисКалендарей;
		УчетнаяЗаписьОбъект.Сервер 				= ДанныеАвторизации.Сервер;
		УчетнаяЗаписьОбъект.КаталогКалендарей 	= ДанныеАвторизации.КаталогКалендарей;
		УчетнаяЗаписьОбъект.Статус 				= Истина;
		УчетнаяЗаписьОбъект.Пользователь 		= Пользователь;
		УчетнаяЗаписьОбъект.Записать();
		УчетнаяЗаписьОбъект.Разблокировать();
		
		Если УчетнаяЗаписьВнешнегоКалендаря = Справочники.CRM_УчетныеЗаписиВнешнихКалендарей.ПустаяСсылка() Тогда
			УчетнаяЗаписьВнешнегоКалендаря = УчетнаяЗаписьОбъект.Ссылка;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(УчетнаяЗаписьОбъект.Ссылка, ДанныеАвторизации.Пароль);
		УстановитьПривилегированныйРежим(Ложь);
		
		CRM_ОбменСВнешнимиКалендарями.ИнициализироватьУзелПланаОбменаДляВнешнихКалендарей();
		
	Исключение
		ОбщегоНазначения.СообщитьПользователю(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
		
	Если ДанныеВнешнегоКалендаря.НоваяСинхронизация Тогда
		
		МенеджерЗаписи = РегистрыСведений.CRM_НастройкиСинхронизацииСВнешнимиКалендарями.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.КодВнешнегоКалендаря = ДанныеВнешнегоКалендаря.КодВнешнегоКалендаря;
		МенеджерЗаписи.УчетнаяЗаписьВнешнегоКалендаря = УчетнаяЗаписьВнешнегоКалендаря;
		МенеджерЗаписи.КалендарьDAVНаименование = ДанныеВнешнегоКалендаря.DAVКалендарьНаименование;
		МенеджерЗаписи.КалендарьСотрудника = ДанныеВнешнегоКалендаря.КалендарьСотрудника;
		МенеджерЗаписи.Статус = Истина;
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обрботчик чтения данных авторизации.
//
// Параметры:
//  СервисКалендарей	 - Строка	 - Сервис календарей.
//  ДанныеАвторизации	 - СправочникСсылка.УчетныеЗаписиВнешнихКалендарей - Ссылка на запись справочника
//                                                                           "УчетныеЗаписиВнешнихКалендарей".
//  Пользователь		 - СправочникСсылка.Пользователи	 - Ссылка на пользователя.
//
Процедура ПрочитатьДанныеАвторизации(СервисКалендарей, ДанныеАвторизации, Пользователь) Экспорт
	
	УчетнаяЗаписьВнешнегоКалендаря = УчетнаяЗаписьВнешнегоКалендаря(СервисКалендарей, Пользователь);
	Если УчетнаяЗаписьВнешнегоКалендаря <> Неопределено Тогда
		ДанныеАвторизации = Справочники.CRM_УчетныеЗаписиВнешнихКалендарей.ДанныеАвторизации(УчетнаяЗаписьВнешнегоКалендаря);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обрботчик обновления данных авторизации.
//
// Параметры:
//  СервисКалендарей	 - Строка	 - Сервис календарей.
//  ДанныеАвторизации	 - СправочникСсылка.УчетныеЗаписиВнешнихКалендарей - Ссылка на запись справочника
//                                                                           "УчетныеЗаписиВнешнихКалендарей".
//  Пользователь		 - СправочникСсылка.Пользователи	 - Ссылка на пользователя.
//
Процедура ОбновитьДанныеАвторизации(СервисКалендарей, ДанныеАвторизации, Пользователь) Экспорт
	
	УчетнаяЗаписьВнешнегоКалендаря = УчетнаяЗаписьВнешнегоКалендаря(СервисКалендарей, Пользователь);
	
	Попытка
		
		УчетнаяЗаписьОбъект = УчетнаяЗаписьВнешнегоКалендаря.ПолучитьОбъект();
		УчетнаяЗаписьОбъект.Заблокировать();
		УчетнаяЗаписьОбъект.Наименование 		= ДанныеАвторизации.Логин;
		УчетнаяЗаписьОбъект.Сервис 				= СервисКалендарей;
		УчетнаяЗаписьОбъект.Сервер 				= ДанныеАвторизации.Сервер;
		УчетнаяЗаписьОбъект.КаталогКалендарей 	= ДанныеАвторизации.КаталогКалендарей;
		УчетнаяЗаписьОбъект.Статус 				= Истина;
		УчетнаяЗаписьОбъект.Пользователь 		= Пользователь;
		УчетнаяЗаписьОбъект.Записать();
		УчетнаяЗаписьОбъект.Разблокировать();
		
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(УчетнаяЗаписьОбъект.Ссылка, ДанныеАвторизации.Пароль);
		УстановитьПривилегированныйРежим(Ложь);
		
		CRM_ОбменСВнешнимиКалендарями.ИнициализироватьУзелПланаОбменаДляВнешнихКалендарей();
		
	Исключение
		ОбщегоНазначения.СообщитьПользователю(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

// Функция возвращает "Истина", если данные авторизации заполнены.
//
// Параметры:
//  ДанныеАвторизации	 - СправочникСсылка.УчетныеЗаписиВнешнихКалендарей - Ссылка на запись справочника
//                                                                           "УчетныеЗаписиВнешнихКалендарей".
// 
// Возвращаемое значение:
//   - Булево
//
Функция ДанныеАвторизацииЗаполнены(ДанныеАвторизации) Экспорт
	
	ДанныеАвторизацииЗаполнены = ТипЗнч(ДанныеАвторизации) = Тип("Структура")
		И ДанныеАвторизации.Свойство("Пароль")
		И ЗначениеЗаполнено(ДанныеАвторизации.Пароль);
	Возврат ДанныеАвторизацииЗаполнены;
	
КонецФункции

// Процедура выполняет удаление данных авторизации.
//
// Параметры:
//  СервисКалендарей	 - Строка	 - Сервис календарей.
//  Пользователь		 - СправочникСсылка.Пользователи	 - Ссылка на пользователя.
//
Процедура УдалитьДанныеАвторизации(СервисКалендарей, Пользователь) Экспорт
	
	УчетнаяЗаписьВнешнегоКалендаря = УчетнаяЗаписьВнешнегоКалендаря(СервисКалендарей, Пользователь);
	Если УчетнаяЗаписьВнешнегоКалендаря <> Неопределено Тогда
		РегистрыСведений.CRM_НастройкиСинхронизацииСВнешнимиКалендарями.УдалитьНастройкиПоУчетнойЗаписиВнешнегоКалендаря(
			УчетнаяЗаписьВнешнегоКалендаря);
		УчетнаяЗаписьОбъект = УчетнаяЗаписьВнешнегоКалендаря.ПолучитьОбъект();
		УчетнаяЗаписьОбъект.Удалить();
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УчетнаяЗаписьВнешнегоКалендаря(СервисКалендарей, Пользователь)
	
	УчетныеЗаписиПользователя = 
		Справочники.CRM_УчетныеЗаписиВнешнихКалендарей.УчетныеЗаписиПользователя(Пользователь);
	Если УчетныеЗаписиПользователя.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	УчетнаяЗаписьСтрокаТаблицы = УчетныеЗаписиПользователя.Найти(СервисКалендарей, "Сервис");
	Если УчетнаяЗаписьСтрокаТаблицы <> Неопределено Тогда
		Возврат УчетнаяЗаписьСтрокаТаблицы.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НовыеПараметрыПроцедурыСинхронизации()
	
	СекундВ30Днях = 2592000;
	Результат = Новый Структура;
	Результат.Вставить("Узлы",				Новый Массив);
	Результат.Вставить("ДатаНачала",		НачалоДня(ТекущаяДатаСеанса()) - СекундВ30Днях);
	Результат.Вставить("ДатаОкончания",		НачалоДня(ТекущаяДатаСеанса()) + СекундВ30Днях);
	Возврат Результат;
	
КонецФункции

Функция НовоеОписаниеКалендаря()
	
	ОписаниеКалендаря = Новый Структура;
	ОписаниеКалендаря.Вставить("ТипСинхронизации",					Справочники.CRM_СервисыКалендарей.ПустаяСсылка());
	ОписаниеКалендаря.Вставить("Узел",								ПланыОбмена.CRM_СинхронизацияКалендарей.ПустаяСсылка());
	ОписаниеКалендаря.Вставить("ВремяУведомленийЭкспорт",			0);
	ОписаниеКалендаря.Вставить("ВремяУведомленийИмпорт",			0);
	ОписаниеКалендаря.Вставить("Наименование",						"");
	ОписаниеКалендаря.Вставить("Идентификатор",						"");
	ОписаниеКалендаря.Вставить("ТокенСинхронизации",				"");
	ОписаниеКалендаря.Вставить("КалендарьСотрудника",				Справочники.CRM_КалендариСотрудников.ПустаяСсылка());
	ОписаниеКалендаря.Вставить("УчетнаяЗаписьВнешнегоКалендаря",	
		Справочники.CRM_УчетныеЗаписиВнешнихКалендарей.ПустаяСсылка());
	ОписаниеКалендаря.Вставить("БезОписания",						Ложь);
	ОписаниеКалендаря.Вставить("ТипКалендаря",						Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(6)));
	ОписаниеКалендаря.Вставить("ДатаПервоначальнойСинхронизации", 	Дата(1, 1, 1));
	ОписаниеКалендаря.Вставить("ОбновлениеНастроек",			 	Ложь);
	ОписаниеКалендаря.Вставить("События",							НовоеОписаниеСобытийКалендаря());
	Возврат ОписаниеКалендаря;
	
КонецФункции

Функция НовоеОписаниеСобытийКалендаря()
	
	СписокТипов = Новый Массив;
	СписокТипов.Добавить(Тип("РегистрСведенийЗапись.CRM_СобытияКалендаря"));
	СписокТипов.Добавить(Тип("ДокументСсылка.CRM_Взаимодействие"));
	
	ОписаниеТипаДата = "Дата";
	ОписаниеТипаСтрока = "Строка";
	
	ОписаниеНапоминания = Новый Структура;
	ОписаниеНапоминания.Вставить("СрокНапоминания", Новый ОписаниеТипов(ОписаниеТипаДата, , , 
		Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ОписаниеНапоминания.Вставить("ИнтервалВремениНапоминания", Новый ОписаниеТипов("Число"));
	ОписаниеНапоминания.Вставить("ИмяРеквизитаИсточника", Новый ОписаниеТипов(ОписаниеТипаСтрока));
	ОписаниеНапоминания.Вставить("СпособУстановкиВремениНапоминания", 
		Перечисления.СпособыУстановкиВремениНапоминания.ПустаяСсылка());
	
	ОписаниеСобытий = Новый ТаблицаЗначений;
	ОписаниеСобытий.Колонки.Добавить("ТипОбъекта",				Новый ОписаниеТипов(ОписаниеТипаСтрока));
	ОписаниеСобытий.Колонки.Добавить("Наименование",			Новый ОписаниеТипов(ОписаниеТипаСтрока));
	ОписаниеСобытий.Колонки.Добавить("Описание",				Новый ОписаниеТипов(ОписаниеТипаСтрока));
	ОписаниеСобытий.Колонки.Добавить("ДатаНачала",				Новый ОписаниеТипов(ОписаниеТипаДата, , , 
		Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ОписаниеСобытий.Колонки.Добавить("ДатаОкончания",			Новый ОписаниеТипов(ОписаниеТипаДата, , , 
		Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ОписаниеСобытий.Колонки.Добавить("Идентификатор",			Новый ОписаниеТипов(ОписаниеТипаСтрока, , 
		Новый КвалификаторыСтроки(255)));
	ОписаниеСобытий.Колонки.Добавить("ОтпечатокОбъекта",		Новый ОписаниеТипов(ОписаниеТипаСтрока));
	ОписаниеСобытий.Колонки.Добавить("ПометкаУдаления",			Новый ОписаниеТипов("Булево"));
	ОписаниеСобытий.Колонки.Добавить("Ссылка",					Новый ОписаниеТипов(СписокТипов));
	ОписаниеСобытий.Колонки.Добавить("ИдентификаторПовторения",	Новый ОписаниеТипов(ОписаниеТипаСтрока));
	ОписаниеСобытий.Колонки.Добавить("ДатаИсключения",			Новый ОписаниеТипов(ОписаниеТипаДата));
	ОписаниеСобытий.Колонки.Добавить("ВремяНапоминания",		Новый ОписаниеТипов("Число"));
	ОписаниеСобытий.Колонки.Добавить("Напоминания",				Неопределено);
	ОписаниеСобытий.Колонки.Добавить("Выполнена",				Неопределено);
	ОписаниеСобытий.Колонки.Добавить("Участники",				Неопределено);
	Возврат ОписаниеСобытий;
	
КонецФункции

Процедура СохранитьНастройкиСинхронизации(ДанныеАвторизации, ОписаниеКалендаря)
	
	МенеджерЗаписи = РегистрыСведений.CRM_НастройкиСинхронизацииСВнешнимиКалендарями.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УчетнаяЗаписьВнешнегоКалендаря = ДанныеАвторизации.УчетнаяЗаписьВнешнегоКалендаря;
	МенеджерЗаписи.КодВнешнегоКалендаря = ОписаниеКалендаря.Идентификатор;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.КалендарьDAVНаименование = ОписаниеКалендаря.КалендарьСотрудника.Наименование;
	МенеджерЗаписи.ТокенСинхронизации = ОписаниеКалендаря.ТокенСинхронизации;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура ВыгрузитьВсеСобытия(ОписаниеКалендаря, ВсеИзмененияКалендаря)
	
	Если ОписаниеКалендаря.События.Количество() > 0 Тогда
		ОписаниеКалендаря.События = НовоеОписаниеСобытийКалендаря();
	КонецЕсли;
	
	Если ВсеИзмененияКалендаря.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого ИзменениеКалендаря Из ВсеИзмененияКалендаря Цикл
		ОписаниеКалендаря.Узел = ИзменениеКалендаря.Узел;
		ПодготовкаСобытияКалендаря(ИзменениеКалендаря, ОписаниеКалендаря);
	КонецЦикла;
	
	CRM_СинхронизацияDAV.ВыгрузитьДанныеКалендаря(ОписаниеКалендаря);
	
КонецПроцедуры

Процедура ПодготовкаСобытияКалендаря(ИзменениеКалендаря, ОписаниеКалендаря)
	
	// Заполняем атрибуты события календаря
	Источник = ИзменениеКалендаря.Ссылка;
	Событие = ОписаниеКалендаря.События.Добавить();
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
		Событие.Идентификатор = ИзменениеКалендаря.ИдентификаторСобытия;
		Если ЗначениеЗаполнено(ИзменениеКалендаря.ОтпечатокОбъекта) Тогда
			Событие.ОтпечатокОбъекта = ИзменениеКалендаря.ОтпечатокОбъекта;
		КонецЕсли;
		Событие.Ссылка = Источник;
		Событие.ТипОбъекта = "Событие";
		Событие.Наименование = Источник.Тема;
		Событие.Описание = Источник.Содержание;
		Событие.ДатаНачала = Источник.ПлановаяДата;
		Событие.ДатаОкончания = Источник.ПлановаяДатаЗавершение;
		Событие.Напоминания = Новый Массив;
		Событие.ПометкаУдаления = Источник.ПометкаУдаления;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьВсеСобытия(ОписаниеКалендаря, ПараметрыПроцедурыСинхронизации)
	
	ДатаНачала = ПараметрыПроцедурыСинхронизации.ДатаНачала;
	ДатаОкончания = ПараметрыПроцедурыСинхронизации.ДатаОкончания;
	
	Если ОписаниеКалендаря.События.Количество() > 0 Тогда
		ОписаниеКалендаря.События = НовоеОписаниеСобытийКалендаря();
	КонецЕсли;
	
	CRM_СинхронизацияDAV.ЗаполнитьСобытияКалендаря(ОписаниеКалендаря, ДатаНачала, ДатаОкончания);
	
	ОбновитьЗаписиКалендаря(ОписаниеКалендаря);
	
КонецПроцедуры

Процедура УдалитьСобытияКалендаря(ДанныеАвторизации, ОписаниеКалендаря, ПараметрыПроцедурыСинхронизации)

	ДатаНачала = ПараметрыПроцедурыСинхронизации.ДатаНачала;
	ДатаОкончания = ПараметрыПроцедурыСинхронизации.ДатаОкончания;
	
	// Получение списка событий из Календаря DAV за период ДатаНачала - ДатаОкончания
	CRM_СинхронизацияDAV.ЗагрузитьВсеСобытияКалендаряЗаПериод(ДанныеАвторизации, ОписаниеКалендаря, 
		ДатаНачала, ДатаОкончания);
	
	// Получение списка всех событий Календаря сотрудника за период ДатаНачала - ДатаОкончания
	ТаблицаСписокСобытий = ВыборкаСобытийЗаПериод(ОписаниеКалендаря, ДатаНачала, ДатаОкончания);
	Если ТаблицаСписокСобытий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка данных по событиям
	СписокСобытийНаПроверку = Новый Массив;
	Для каждого Событие Из ТаблицаСписокСобытий Цикл
		Если ЗначениеЗаполнено(Событие.Идентификатор) Тогда
			СобытиеНаПроверку = СтрШаблон("/%1%2/%3.ics", ДанныеАвторизации.КаталогКалендарей, 
				ОписаниеКалендаря.Идентификатор, Событие.Идентификатор);
			СписокСобытийНаПроверку.Добавить(СобытиеНаПроверку);
		КонецЕсли;
	КонецЦикла;
	
	CRM_СинхронизацияDAV.ПолучитьДанныеПоСобытиям(СписокСобытийНаПроверку, ОписаниеКалендаря, ДанныеАвторизации);
	
	// Обновление данные событий календаря найденных во внешнем календаре после проверки (шаг 4)
	// Удаление событий в календаре и в регистре, которые не были найдены во внешнем календаре
	Для каждого Событие Из ОписаниеКалендаря.События  Цикл
		Если Событие.ОтпечатокОбъекта = "" Тогда
			СобытиеКалендаря = РегистрыСведений.CRM_СобытияКалендаря.СобытиеКалендаряПоИдентификатору(Событие.Идентификатор,
				Пользователи.ТекущийПользователь()).Ссылка;
			МенеджерЗаписиДанныеПоСобытию = 
				РегистрыСведений.CRM_СобытияКалендаря.МенеджерЗаписиСобытияКалендаряПоИдентификатору(СобытиеКалендаря,
				Пользователи.ТекущийПользователь());
			СобытиеКалендаря = МенеджерЗаписиДанныеПоСобытию.Объект.ПолучитьОбъект();
			СобытиеКалендаря.ПометкаУдаления = Истина;
			СобытиеКалендаря.ОбменДанными.Загрузка = Истина;
			ПередЗаписьюИсточникаЗаписиКалендаря(СобытиеКалендаря);
			СобытиеКалендаря.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Переименование календаря сотрудника в случае если соответствующий внешний календарь был переименован
Процедура ПроверкаНаименованияКалендаря(ДанныеАвторизации, ОписаниеКалендаря)
	
	НаименованиеКалендаряDAV = CRM_СинхронизацияDAV.ПолучитьИмяКалендаряDAV(ДанныеАвторизации, ОписаниеКалендаря);
	
	Если ОписаниеКалендаря.КалендарьСотрудника.Наименование = НаименованиеКалендаряDAV Тогда
		Возврат;
	КонецЕсли;
	
	КалендарьСотрудника = ОписаниеКалендаря.КалендарьСотрудника.ПолучитьОбъект();
	КалендарьСотрудника.Наименование = НаименованиеКалендаряDAV;
	КалендарьСотрудника.Записать();
	
КонецПроцедуры

Процедура ОбновитьЗаписиКалендаря(ОписаниеКалендаря)
	
	Для каждого ЗаписьКалендаря Из ОписаниеКалендаря.События Цикл
		ДанныеЗаполнения = ДанныеДляЗаполненияВзаимодействия(ЗаписьКалендаря);
		CRM_СинхронизацияКалендарей.ЗаполнитьВзаимодействие(ОписаниеКалендаря.КалендарьСотрудника, ДанныеЗаполнения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПолеДатаВремя(Приемник, ИмяПоляПриемник, Источник, ИмяПоляИсточник, Время = Неопределено)
	
	Если Не ЗначениеЗаполнено(Источник[ИмяПоляИсточник]) Тогда
		Возврат;
	КонецЕсли;
	Если Время <> Неопределено Тогда
		ДатаВремя = Строка(Источник[ИмяПоляИсточник]);
		Позиция = СтрНайти(ДатаВремя, " ");
		ДатаВремя = Лев(ДатаВремя, Позиция - 1);
		ДатаВремя = СтрШаблон("%1 %2", ДатаВремя, Время);
		ЗначениеПоляДатаВремя = ДатаВремя;
	Иначе
		ЗначениеПоляДатаВремя = Источник[ИмяПоляИсточник];
	КонецЕсли;
	ЗначениеПриведенноеКЧасовомуПоясуИБ = МестноеВремя(УниверсальноеВремя(ЗначениеПоляДатаВремя), 
		ПолучитьЧасовойПоясИнформационнойБазы());
	Приемник.Вставить(ИмяПоляПриемник, ЗначениеПриведенноеКЧасовомуПоясуИБ);
	
КонецПроцедуры

Функция ПолучитьСписокВсехИзменений(УчетнаяЗаписьВнешнегоКалендаря)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиСинхронизацииСВнешнимиКалендарями.КодВнешнегоКалендаря КАК КодВнешнегоКалендаря,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.УчетнаяЗаписьВнешнегоКалендаря КАК УчетнаяЗаписьВнешнегоКалендаря,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.КалендарьDAVНаименование КАК КалендарьDAVНаименование,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.КалендарьСотрудника КАК КалендарьСотрудника,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.Статус КАК Статус,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.ТокенСинхронизации КАК ТокенСинхронизации
	|ПОМЕСТИТЬ ВсеНастройкиСинхронизацииУчетнойЗаписи
	|ИЗ
	|	РегистрСведений.CRM_НастройкиСинхронизацииСВнешнимиКалендарями КАК НастройкиСинхронизацииСВнешнимиКалендарями
	|ГДЕ
	|	НастройкиСинхронизацииСВнешнимиКалендарями.УчетнаяЗаписьВнешнегоКалендаря = &УчетнаяЗаписьВнешнегоКалендаря
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаимодействиеИзменения.Узел КАК Узел,
	|	ВзаимодействиеИзменения.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВсеСобытия
	|ИЗ
	|	Документ.CRM_Взаимодействие.Изменения КАК ВзаимодействиеИзменения
	|ГДЕ
	|	ВзаимодействиеИзменения.Узел <> &ЭтотУзел
	|	И ВзаимодействиеИзменения.Узел ССЫЛКА ПланОбмена.CRM_СинхронизацияКалендарей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеСобытия.Узел КАК Узел,
	|	ВсеСобытия.Ссылка КАК Ссылка,
	|	СобытияКалендаря.Объект КАК Объект,
	|	СобытияКалендаря.Идентификатор КАК Идентификатор,
	|	СобытияКалендаря.ETag КАК ОтпечатокОбъекта
	|ПОМЕСТИТЬ ДанныеСобытий
	|ИЗ
	|	ВсеСобытия КАК ВсеСобытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СобытияКалендаря КАК СобытияКалендаря
	|		ПО ВсеСобытия.Ссылка = СобытияКалендаря.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСобытий.Узел КАК Узел,
	|	ДанныеСобытий.Ссылка КАК Ссылка,
	|	ДанныеСобытий.Идентификатор КАК ИдентификаторСобытия,
	|	ДанныеСобытий.ОтпечатокОбъекта КАК ОтпечатокОбъекта,
	|	ВсеНастройкиСинхронизацииУчетнойЗаписи.КодВнешнегоКалендаря КАК КодВнешнегоКалендаря,
	|	ВсеНастройкиСинхронизацииУчетнойЗаписи.КалендарьСотрудника КАК КалендарьСотрудника
	|ИЗ
	|	ДанныеСобытий КАК ДанныеСобытий
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеНастройкиСинхронизацииУчетнойЗаписи КАК ВсеНастройкиСинхронизацииУчетнойЗаписи
	|		ПО ДанныеСобытий.Узел.Календарь = ВсеНастройкиСинхронизацииУчетнойЗаписи.КалендарьСотрудника
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеСобытий.Узел");
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.CRM_СинхронизацияКалендарей.ЭтотУзел());
	Запрос.УстановитьПараметр("УчетнаяЗаписьВнешнегоКалендаря", УчетнаяЗаписьВнешнегоКалендаря);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция ВыгрузитьВсеИзмененияКалендаря(ВсеСобытия, КодВнешнегоКалендаря, КалендарьСотрудника)
	
	Если ВсеСобытия.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВсеСобытия.Узел КАК Узел,
	|	ВсеСобытия.Ссылка КАК Ссылка,
	|	ВсеСобытия.ИдентификаторСобытия КАК ИдентификаторСобытия,
	|	ВсеСобытия.КодВнешнегоКалендаря КАК КодВнешнегоКалендаря,
	|	ВсеСобытия.КалендарьСотрудника КАК КалендарьСотрудника,
	|	ВсеСобытия.ОтпечатокОбъекта КАК ОтпечатокОбъекта
	|ПОМЕСТИТЬ ВсеСобытия
	|ИЗ
	|	&ВсеСобытия КАК ВсеСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеСобытия.Узел КАК Узел,
	|	ВсеСобытия.Ссылка КАК Ссылка,
	|	ВсеСобытия.ИдентификаторСобытия КАК ИдентификаторСобытия,
	|	ВсеСобытия.КодВнешнегоКалендаря КАК КодВнешнегоКалендаря,
	|	ВсеСобытия.КалендарьСотрудника КАК КалендарьСотрудника,
	|	ВсеСобытия.ОтпечатокОбъекта КАК ОтпечатокОбъекта
	|ИЗ
	|	ВсеСобытия КАК ВсеСобытия
	|ГДЕ
	|	ВсеСобытия.КодВнешнегоКалендаря = &КодВнешнегоКалендаря
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВсеСобытия.Узел,
	|	ВсеСобытия.Ссылка,
	|	ВсеСобытия.ИдентификаторСобытия,
	|	ВсеСобытия.КодВнешнегоКалендаря,
	|	ВсеСобытия.КалендарьСотрудника,
	|	ВсеСобытия.ОтпечатокОбъекта
	|ИЗ
	|	ВсеСобытия КАК ВсеСобытия
	|ГДЕ
	|	ВсеСобытия.КодВнешнегоКалендаря ЕСТЬ NULL
	|			И ВсеСобытия.КалендарьСотрудника ЕСТЬ NULL");
		
	Запрос.УстановитьПараметр("ВсеСобытия", ВсеСобытия);
	Запрос.УстановитьПараметр("КодВнешнегоКалендаря", КодВнешнегоКалендаря);
	Запрос.УстановитьПараметр("КалендарьСотрудникаСсылка", КалендарьСотрудника.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция ВыборкаСобытийЗаПериод(ОписаниеКалендаря, ДатаНачала, ДатаОкончания)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СобытияКалендаря.Объект КАК Объект,
	|	СобытияКалендаря.Идентификатор КАК Идентификатор,
	|	СобытияКалендаря.ПериодНачало КАК ПериодНачало,
	|	СобытияКалендаря.ПериодОкончание КАК ПериодОкончание
	|ПОМЕСТИТЬ СобытияЗаПериод
	|ИЗ
	|	РегистрСведений.CRM_СобытияКалендаря КАК СобытияКалендаря
	|ГДЕ
	|	НЕ СобытияКалендаря.ПериодНачало < &ДатаНачала
	|	И НЕ СобытияКалендаря.ПериодОкончание > &ДатаОкончания
	|	И СобытияКалендаря.Пользователь = &Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СобытияВнешнегоКалендаря.Наименование КАК Наименование,
	|	СобытияВнешнегоКалендаря.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ СобытияВнешнегоКалендаряЗаПериод
	|ИЗ
	|	&СобытияВнешнегоКалендаря КАК СобытияВнешнегоКалендаря
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СобытияВнешнегоКалендаряЗаПериод.Наименование КАК Наименование,
	|	СобытияЗаПериод.Идентификатор КАК Идентификатор,
	|	СобытияЗаПериод.Объект КАК Объект
	|ИЗ
	|	СобытияВнешнегоКалендаряЗаПериод КАК СобытияВнешнегоКалендаряЗаПериод
	|		ПРАВОЕ СОЕДИНЕНИЕ СобытияЗаПериод КАК СобытияЗаПериод
	|		ПО СобытияВнешнегоКалендаряЗаПериод.Идентификатор = СобытияЗаПериод.Идентификатор
	|ГДЕ
	|	СобытияВнешнегоКалендаряЗаПериод.Наименование ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("СобытияВнешнегоКалендаря", ОписаниеКалендаря.События);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДанныеДляЗаполненияВзаимодействия(ЗаписьКалендаря)
	
	ДанныеЗаполнения = CRM_СинхронизацияКалендарей.СтруктураДанныхВзаимодействия();
	ДатаНачалаСтрока = "ДатаНачала";
	ДатаОкончанияСтрока = "ДатаОкончания";
	
	ЗаполнитьПолеДатаВремя(ДанныеЗаполнения, ДатаНачалаСтрока,		ЗаписьКалендаря, ДатаНачалаСтрока);
	ЗаполнитьПолеДатаВремя(ДанныеЗаполнения, ДатаОкончанияСтрока,	ЗаписьКалендаря, ДатаОкончанияСтрока);
	
	НаВесьДень = Истина;
	Если ЗначениеЗаполнено(ЗаписьКалендаря[ДатаНачалаСтрока]) Тогда
		НаВесьДень = ЗаписьКалендаря[ДатаНачалаСтрока] = НачалоДня(ЗаписьКалендаря[ДатаНачалаСтрока])
			И ЗаписьКалендаря[ДатаОкончанияСтрока] = НачалоДня(ЗаписьКалендаря[ДатаОкончанияСтрока]);
	КонецЕсли;
	ДанныеЗаполнения.НаВесьДень = НаВесьДень;
	
	Если ЗаписьКалендаря["Наименование"] <> Неопределено Тогда
		ДанныеЗаполнения.Тема = ЗаписьКалендаря["Наименование"];
	КонецЕсли;
	Если ЗаписьКалендаря["Описание"] <> Неопределено Тогда
		ДанныеЗаполнения.Содержание = ЗаписьКалендаря["Описание"];
	КонецЕсли;
	ДанныеЗаполнения.Комментарий = НСтр("ru='Загружено из внешнего календаря';en='Uploaded from external calendar'");
	
	Если ЗаписьКалендаря["Идентификатор"] <> Неопределено Тогда
		ДанныеЗаполнения.Идентификатор = ЗаписьКалендаря["Идентификатор"];
	КонецЕсли;
	
	Если ЗаписьКалендаря["Участники"] <> Неопределено Тогда
		ДанныеЗаполнения.Участники = ЗаписьКалендаря["Участники"];
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

#КонецОбласти