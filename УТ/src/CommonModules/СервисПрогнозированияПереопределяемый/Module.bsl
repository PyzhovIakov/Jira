
#Область СлужебныйПрограммныйИнтерфейс

#Область ПолучениеДанных

// Получить коллекцию.
// 
// Параметры:
//  Коллекция - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж -
//  ИсходнаяКоллекция - Неопределено, Массив из Произвольный - Исходная коллекция
//  НастройкиСервиса - Неопределено, Структура из Произвольный - см. СервисПрогнозирования.ПолучитьНастройкиСервиса
// 
// Возвращаемое значение:
//  см. ОписаниеОтветаПорцииПериодическойКоллекции.
Функция ПолучитьКоллекцию(Коллекция, ИсходнаяКоллекция = Неопределено, НастройкиСервиса = Неопределено) Экспорт
	
	Если НастройкиСервиса = Неопределено Тогда
		НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	КонецЕсли;
	
	Если Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи Тогда
		Возврат ПолучитьКоллекциюПродаж(НастройкиСервиса, Неопределено, Истина);
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары Тогда
		Возврат ПолучитьКоллекциюТоваров(НастройкиСервиса, ИсходнаяКоллекция);
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры Тогда
		Возврат ПолучитьКоллекциюХарактеристикНоменклатуры(ИсходнаяКоллекция);
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели Тогда
		Возврат ПолучитьКоллекциюПокупателей(ИсходнаяКоллекция);
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Склады Тогда
		Возврат ПолучитьКоллекциюСкладов(ИсходнаяКоллекция);
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки Тогда
		Возврат ПолучитьКоллекциюОстатков();
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо Тогда
		Возврат ПолучитьКоллекциюПромоАкций(НастройкиСервиса, Неопределено);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получить исходную коллекцию.
// 
// Параметры:
//  Коллекция - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж - 
// 
// Возвращаемое значение:
//  Массив из Произвольный
Функция ПолучитьИсходнуюКоллекцию(Коллекция) Экспорт
	
	Если Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары Тогда
		Возврат ПолучитьКоллекциюТоваровИсходную();
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры Тогда
		Возврат ПолучитьКоллекциюХарактеристикИсходную();
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели Тогда
		Возврат ПолучитьКоллекциюПокупателейИсходную();
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Склады Тогда
		Возврат ПолучитьКоллекциюСкладовИсходную();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получить сводку по коллекции.
// Выполняет сбор информации о том, что будет выгружено. Эта информация в частности необходима для
// отображения полосы выгрузки коллекций.
// Может отличаться от фактической выгрузки ввиду того, что пользователи могут менять данные в процессе работы.
// 
// Параметры:
//  Коллекция - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж -
//  НастройкиСервиса - Неопределено, Структура из Произвольный - см. СервисПрогнозирования.ПолучитьНастройкиСервиса
// 
// Возвращаемое значение:
//  Неопределено, Структура - Получить сводку по коллекции:
// * КоличествоДанных - Число -
// * ДатаПервойЗаписи - Дата -
// * ДатаПоследнейЗаписи - Дата -
// * Дополнительно - Неопределено -
Функция ПолучитьСводкуПоКоллекции(Коллекция, НастройкиСервиса = Неопределено) Экспорт
	
	Ответ = ОписаниеОтветаСводкиПоКоллекции();
	
	Если НастройкиСервиса = Неопределено Тогда
		НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	КонецЕсли;
	
	Если Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи
		Или Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки
		Или Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо Тогда
		
		Если Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи Тогда
			// Получаем дату начала продаж (с учетом отборов).
			ДатыПродаж = ПолучитьДатыНачалаОкончанияПродаж(НастройкиСервиса, Истина);
			// Дата актуальности - курсор, начиная с которого получаем данные к выгрузке, виртуально (временно)
			// сдвигаем на дату начала продаж.
			ДатаАктуальности = ДатыПродаж.ДатаНачалаПродаж;
		ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки Тогда
			ДатыОстатков = ПолучитьДатыНачалаОкончанияОстатков();
			ДатаАктуальности = ДатыОстатков.ДатаНачалаОстатков;
		ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо Тогда
			ДатыОстатков = ПолучитьДатыНачалаОкончанияПромоАкций();
			ДатаАктуальности = ДатыОстатков.ДатаНачалаПромо;
		КонецЕсли;
		
		Ответ = Неопределено;
		
		Если Не ЗначениеЗаполнено(ДатаАктуальности) Тогда
			Ответ = ОписаниеОтветаСводкиПоКоллекции();
			Возврат Ответ;
		КонецЕсли;
		
		ЕстьОтрицательныеПродажи = Ложь;
		КоличествоРазличныхТоваров = 0;
		Если СервисПрогнозирования.ЕстьНевыгруженныйПериод(Коллекция, ДатаАктуальности) Тогда
			// Взведен флаг игнорирования настроек порционности. Это означает, что будут проанализированы сразу
			// все данные, а не частями по заданным настройками порциям выгрузки.
			ДиапазонДатДляВыгрузки = СервисПрогнозирования.ДиапазонДатДляВыгрузки(Коллекция,
				НастройкиСервиса,
				ДатаАктуальности,
				ДатаАктуальности,
				Истина);
			
			КоллекцияДанных = Неопределено;
			Если Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи Тогда
				ПорцияВыгрузки = ПолучитьКоллекциюПродаж(НастройкиСервиса, ДиапазонДатДляВыгрузки, Ложь, Истина);
				КоллекцияДанных = ПорцияВыгрузки.Коллекция;
				
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = ПорцияВыгрузки.МенеджерВременныхТаблиц;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЕСТЬNULL(СУММА(Набор.КоличествоДанных), 0)                   КАК КоличествоДанных,
				|	ЕСТЬNULL(МИНИМУМ(Набор.ДатаПервойЗаписи), &ПустаяДата)       КАК ДатаПервойЗаписи,
				|	ЕСТЬNULL(МАКСИМУМ(Набор.ДатаПоследнейЗаписи), &ПустаяДата)   КАК ДатаПоследнейЗаписи,
				|	ЕСТЬNULL(СУММА(Набор.КоличествоРазличныхТоваров), 0)         КАК КоличествоРазличныхТоваров,
				|	ЕСТЬNULL(МАКСИМУМ(Набор.ЕстьОтрицательныеПродажи) < 0, ЛОЖЬ) КАК ЕстьОтрицательныеПродажи
				|ИЗ
				|	(ВЫБРАТЬ
				|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Набор.Дата)         КАК КоличествоДанных,
				|		МИНИМУМ(Набор.Дата)                      КАК ДатаПервойЗаписи,
				|		МАКСИМУМ(Набор.Дата)                     КАК ДатаПоследнейЗаписи,
				|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Набор.Номенклатура) КАК КоличествоРазличныхТоваров,
				|		МИНИМУМ(Набор.Количество)                КАК ЕстьОтрицательныеПродажи
				|	ИЗ
				|		ВТКоллекцияПродаж КАК Набор
				|	
				|	СГРУППИРОВАТЬ ПО
				|		Набор.Номенклатура,
				|		Набор.Характеристика,
				|		Набор.Партнер,
				|		Набор.Склад) КАК Набор";
				Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
				
				КоличествоРазличныхТоваров = 0;
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ПорцияВыгрузки.КоличествоДанных = Выборка.КоличествоДанных;
					ПорцияВыгрузки.ДатаПервойЗаписи = Выборка.ДатаПервойЗаписи;
					ПорцияВыгрузки.ДатаПоследнейЗаписи = Выборка.ДатаПоследнейЗаписи;
					КоличествоРазличныхТоваров = Выборка.КоличествоРазличныхТоваров;
					ЕстьОтрицательныеПродажи = Выборка.ЕстьОтрицательныеПродажи;
				КонецЕсли;
				
			ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки Тогда
				ПорцияВыгрузки = ПолучитьКоллекциюОстатков(ДиапазонДатДляВыгрузки);
			ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо Тогда
				ПорцияВыгрузки = ПолучитьКоллекциюПромоАкций(НастройкиСервиса, ДиапазонДатДляВыгрузки);
			КонецЕсли;
			
			ДатаАктуальности = НачалоДня(ПорцияВыгрузки.ДатаОкончанияВыборкиПорции) + 86400;
			
			Если Ответ = Неопределено
				И ПорцияВыгрузки.КоличествоДанных > 0 Тогда
				Ответ = ОписаниеОтветаСводкиПоКоллекции();
				ЗаполнитьЗначенияСвойств(Ответ, ПорцияВыгрузки);
				Ответ.КоллекцияДанных = КоллекцияДанных;
			ИначеЕсли ПорцияВыгрузки.КоличествоДанных > 0 Тогда
				Ответ.КоличествоДанных = Ответ.КоличествоДанных + ПорцияВыгрузки.КоличествоДанных;
				Ответ.ДатаПервойЗаписи = ?(ПорцияВыгрузки.ДатаПервойЗаписи < Ответ.ДатаПервойЗаписи,
					ПорцияВыгрузки.ДатаПервойЗаписи,
					Ответ.ДатаПервойЗаписи);
				Ответ.ДатаПоследнейЗаписи = ?(ПорцияВыгрузки.ДатаПоследнейЗаписи > Ответ.ДатаПоследнейЗаписи,
					ПорцияВыгрузки.ДатаПоследнейЗаписи,
					Ответ.ДатаПоследнейЗаписи);
				Ответ.КоллекцияДанных = КоллекцияДанных;
			КонецЕсли;
			
			Если Коллекция <> Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи Тогда
				Если ПорцияВыгрузки.КоличествоДанных > 0 Тогда
					РазличныеТовары = ПорцияВыгрузки.Коллекция.ВыгрузитьКолонку("КодТовара");
					КоличествоРазличныхТоваров = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РазличныеТовары).Количество();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Ответ = Неопределено Тогда
			Ответ = ОписаниеОтветаСводкиПоКоллекции();
		КонецЕсли;
		
		ШаблонСообщенияТовары = НСтр("ru='Различных товаров: %1'");
		Если Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки
			Или Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо Тогда
			Ответ.Дополнительно = СтрШаблон(ШаблонСообщенияТовары, КоличествоРазличныхТоваров);
		ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи Тогда
			Ответ.Дополнительно = Новый Структура;
			Ответ.Дополнительно.Вставить("РазличныхТоваров", СтрШаблон(ШаблонСообщенияТовары, КоличествоРазличныхТоваров));
			Ответ.Дополнительно.Вставить("ЕстьОтрицательныеПродажи", ЕстьОтрицательныеПродажи);
		КонецЕсли;
		Ответ.КатегориальнаяКоллекция = Ложь;
		
		Возврат Ответ;
		
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары
		Или Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры
		Или Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели
		Или Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Склады Тогда
		
		Ответ = ОписаниеОтветаСводкиПоКоллекции();
		
		Если Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары Тогда
			КоллекцияДанных = ПолучитьКоллекциюТоваровИсходную();
		ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры Тогда
			КоллекцияДанных = ПолучитьКоллекциюХарактеристикИсходную();
		ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели Тогда
			КоллекцияДанных = ПолучитьКоллекциюПокупателейИсходную();
		ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Склады Тогда
			КоллекцияДанных = ПолучитьКоллекциюСкладовИсходную();
		КонецЕсли;
		
		Ответ.КоличествоДанных = КоллекцияДанных.Количество();
		Ответ.КатегориальнаяКоллекция = Истина;
		
		Возврат Ответ;
		
	Иначе
		Возврат Ответ;
	КонецЕсли;
КонецФункции

// Получить даты начала окончания продаж.
//
// Параметры:
//  НастройкиСервиса          - Структура из Произвольный - см. СервисПрогнозирования.ПолучитьНастройкиСервиса.
//  УчитыватьФильтрНаВыгрузку - Булево - Признак получения дат с учетом отбора на выгрузку.
//
// Возвращаемое значение:
//  Структура:
//   * ДатаНачалаПродаж    - Дата -
//   * ДатаОкончанияПродаж - Дата -
Функция ПолучитьДатыНачалаОкончанияПродаж(НастройкиСервиса, УчитыватьФильтрНаВыгрузку) Экспорт
	
	Запрос = Новый Запрос();
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Планы.Период, ДЕНЬ) КАК Дата
	|ПОМЕСТИТЬ ВтДаты
	|ИЗ
	|	РегистрНакопления.ПланыПродаж.Обороты(&ДатаНачала, &ДатаОкончания, ДЕНЬ,
	|	(&ИспользоватьТолькоПланы
	|		ИЛИ &ИспользоватьОстаткиИПланы)
	|	И Сценарий = &СценарийПланов
	|	И &УсловияОтборовНаВыгрузкуПланов) КАК Планы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Факты.Период, ДЕНЬ) КАК Дата
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&ДатаНачала, &ДатаОкончания, РЕГИСТРАТОР,
	|	НЕ &ИспользоватьТолькоПланы
	|	И ХозяйственнаяОперация В (&ОтборПоОперациям)
	|	И &УсловияОтборовНаВыгрузкуФактов) КАК Факты
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Факты.Регистратор) В (&ОтборПоДокументам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(ВтДаты.Дата), ДАТАВРЕМЯ(1, 1, 1))  КАК ДатаНачалаПродаж,
	|	ЕСТЬNULL(МАКСИМУМ(ВтДаты.Дата), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияПродаж
	|ИЗ
	|	ВтДаты КАК ВтДаты";
	
	Если НастройкиСервиса.ВыгружатьОстаткиЗаВсеВремя Тогда
		ДатаНачалаПродаж    = Неопределено;
		ДатаОкончанияПродаж = Неопределено;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНачала", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаОкончания", "");
	Иначе
		ДатаНачалаПродаж    = НастройкиСервиса.ДатаНачалаВыгрузкиОстатковИПродаж;
		ДатаОкончанияПродаж = НастройкиСервиса.ДатаОкончанияВыгрузкиОстатковИПродаж;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	ДиапазонДат = Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачалаПродаж, ДатаОкончанияПродаж);
	УстановитьОтборыДляЗапросовПоРегистрамПродаж(Запрос, НастройкиСервиса, ДиапазонДат, УчитыватьФильтрНаВыгрузку);
	
	УстановитьПривилегированныйРежим(Истина);
	НачалоПродаж = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	НачалоПродаж.Следующий();
	ДатаНачалаПродаж    = НачалоПродаж.ДатаНачалаПродаж;
	ДатаОкончанияПродаж = НачалоПродаж.ДатаОкончанияПродаж;
	
	Ответ = Новый Структура();
	Ответ.Вставить("ДатаНачалаПродаж", ДатаНачалаПродаж);
	Ответ.Вставить("ДатаОкончанияПродаж", ДатаОкончанияПродаж);
	
	Возврат Ответ;
	
КонецФункции

// Получение данных товара, по которому больше всего периодов в истории продаж.
//
// Параметры:
//  НастройкиСервиса    - Структура из Произвольный - см. СервисПрогнозирования.ПолучитьНастройкиСервиса.
//  Периодичность  - ПеречисленияСсылка.Периодичность -
//  ДатаНачалаПродаж    - Дата -
//  ДатаОкончанияПродаж - Дата -
//
// Возвращаемое значение:
//  Структура:
//   * Товар          - Строка -
//   * ПериодовПродаж - Число -
Функция ДанныеТопТовараПоЧастотеПродаж(НастройкиСервиса, Периодичность, ДатаНачалаПродаж, ДатаОкончанияПродаж) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Продажи.Номенклатура       КАК Товар,
	|	Количество(Продажи.Период) КАК ПериодовПродаж
	|ИЗ
	|	РегистрНакопления.ПланыПродаж.Обороты(&ДатаНачала, &ДатаОкончания, ДЕНЬ,
	|	(&ИспользоватьТолькоПланы
	|		ИЛИ &ИспользоватьОстаткиИПланы)
	|	И Сценарий = &СценарийПланов
	|	И &УсловияОтборовНаВыгрузкуПланов) КАК Продажи
	|
	|ГДЕ
	|	Продажи.КоличествоОборот <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Продажи.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Продажи.АналитикаУчетаНоменклатуры.Номенклатура,
	|	Количество(Продажи.Период)
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор,
	|	НЕ &ИспользоватьТолькоПланы
	|	И ХозяйственнаяОперация В (&ОтборПоОперациям)
	|	И &УсловияОтборовНаВыгрузкуФактов) КАК Продажи
	|
	|ГДЕ
	|	Продажи.КоличествоОборот <> 0
	|	И ТИПЗНАЧЕНИЯ(Продажи.Регистратор) В (&ОтборПоДокументам)
	|
	|СГРУППИРОВАТЬ ПО
	|	Продажи.АналитикаУчетаНоменклатуры.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодовПродаж УБЫВ";
	
	// День по умолчанию.
	Если Периодичность = Перечисления.Периодичность.Неделя Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДЕНЬ", "НЕДЕЛЯ");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДЕНЬ", "МЕСЯЦ");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	ДиапазонДат = Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачалаПродаж, ДатаОкончанияПродаж);
	УстановитьОтборыДляЗапросовПоРегистрамПродаж(Запрос, НастройкиСервиса, ДиапазонДат);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Товар          = "";
	ПериодовПродаж = 0;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПериодовПродаж > ПериодовПродаж Тогда
			Товар          = Строка(Выборка.Товар);
			ПериодовПродаж = Выборка.ПериодовПродаж;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Товар, ПериодовПродаж", Товар, ПериодовПродаж);
	
КонецФункции

#КонецОбласти

#Область Разное

// Получает элемент справочника Номенклатура по его идентификатору, либо
// первое вхождение по значению реквизита содержащего идентификатор аналога товара.
//
// Параметры:
//  ЗначениеИдентификатора	 - Строка	 - 
//  НастройкиСервиса		 - Неопределено, Структура из Произвольный - см. СервисПрогнозирования.ПолучитьНастройкиСервиса
// 
// Возвращаемое значение:
//  СправочникСсылка.Номенклатура
Функция ПолучитьНоменклатуруПоИдентификатору(ЗначениеИдентификатора, НастройкиСервиса) Экспорт
	
	Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	ЭтоУИД = СервисПрогнозирования.ЭтоУникальныйИдентификатор(ЗначениеИдентификатора);
	Если ЭтоУИД Тогда
		Идентификатор = Новый УникальныйИдентификатор(ЗначениеИдентификатора);
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
	Иначе
		СобытиеЖурналаРегистрации = ТекстСобытиеЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Документы.ПланПродаж,
			,
			ТекстНеБылСопоставленТоварПоУИД(ЗначениеИдентификатора));
	КонецЕсли;
	
	Возврат Номенклатура;
	
КонецФункции

// Получает элемент справочника ТоварныеКатегории по его идентификатору.
//
// Параметры:
//  ЗначениеИдентификатора - Строка - 
// 
// Возвращаемое значение:
//  СправочникСсылка.ТоварныеКатегории - 
Функция ПолучитьТоварнуюКатегориюПоИдентификаторуКатегории(ЗначениеИдентификатора) Экспорт
	
	ЭтоУИД           = СервисПрогнозирования.ЭтоУникальныйИдентификатор(ЗначениеИдентификатора);
	НеСопоставленУИД = Ложь;
	
	Если ЭтоУИД Тогда
		Идентификатор = Новый УникальныйИдентификатор(ЗначениеИдентификатора);
		ТоварнаяКатегория = Справочники.ТоварныеКатегории.ПолучитьСсылку(Идентификатор);
		Если СтрНайти(ТоварнаяКатегория, "<Объект не найден>") Тогда
			НеСопоставленУИД = Истина;
		КонецЕсли;
	Иначе
		НеСопоставленУИД = Истина;
	КонецЕсли;
	
	Если НеСопоставленУИД Тогда
		ТоварнаяКатегория = Справочники.ТоварныеКатегории.ПустаяСсылка();
		СобытиеЖурналаРегистрации = ТекстСобытиеЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Документы.ПланПродажПоКатегориям,
			,
			ТекстНеБылаСопоставленаТоварнаяКатегорияПоУИД(ЗначениеИдентификатора));
	КонецЕсли;
	
	Возврат ТоварнаяКатегория;
	
КонецФункции

// Найти описание реквизита коллекции по имени в сервисе.
// 
// Параметры:
//  РеквизитыКоллекции - Массив из Структура - 
//  ИмяРеквизита - Строка
// 
// Возвращаемое значение:
//  Неопределено, Структура из Произвольный - см. ОписаниеВыгружаемогоЭлементаДанных.
Функция НайтиОписаниеРеквизитаКоллекцииПоИмениВСервисе(РеквизитыКоллекции, ИмяРеквизита) Экспорт
	
	Для Каждого ОписаниеРеквизита Из РеквизитыКоллекции Цикл
		Если ОписаниеРеквизита.Значение.ИмяВСервисе = ИмяРеквизита Тогда
			Возврат ОписаниеРеквизита.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Получить ссылку по описанию типов идентификатору.
// 
// Параметры:
//  ОписаниеТипа - ОписаниеТипов - Описание типа
//  ТекстИдентификатора - Строка - Текст идентификатора
// 
// Возвращаемое значение:
//  Произвольный
Функция ПолучитьСсылкуПоОписаниюТиповИдентификатору(ОписаниеТипа, ТекстИдентификатора) Экспорт
	
	Идентификатор = Новый УникальныйИдентификатор(ТекстИдентификатора);
	ТипСвойства = ОписаниеТипа.Типы()[0];
	ИмяТипа = Метаданные.НайтиПоТипу(ТипСвойства).ПолноеИмя();
	Возврат ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТипа).ПолучитьСсылку(Идентификатор);
	
КонецФункции

// Последняя известная дата продажи.
// 
// Возвращаемое значение:
//  Дата - Последняя известная дата продажи
Функция ПоследняяИзвестнаяДатаПродажи() Экспорт
	
	ПоследняяИзвестнаяПродажа = Дата(1, 1, 1);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ЕСТЬNULL(Набор.Период, &ПустаяДата)), ДАТАВРЕМЯ(1, 1, 1)) КАК Период
	|ИЗ 
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ПланыПродажОбороты.Период КАК Период
	|	ИЗ
	|		РегистрНакопления.ПланыПродаж.Обороты(, , Регистратор,
	|		(&ИспользоватьТолькоПланы
	|				ИЛИ &ИспользоватьОстаткиИПланы)
	|		И Сценарий = &СценарийПланов
	|		И (НЕ &УстановленОтборПоНоменклатуре
	|				ИЛИ Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|		И (НЕ &УстановленОтборПоПартнерам
	|				ИЛИ Партнер В ИЕРАРХИИ (&ОтборПартнеров))
	|		И (НЕ &УстановленОтборПоСкладам
	|				ИЛИ Склад В ИЕРАРХИИ (&ОтборСкладов))) КАК ПланыПродажОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ВыручкаИСебестоимостьПродажОбороты.Период
	|	ИЗ
	|		РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(, , Регистратор, 
	|		НЕ &ИспользоватьТолькоПланы
	|		И ХозяйственнаяОперация В (&ОтборПоОперациям)
	|		И (НЕ &УстановленОтборПоНоменклатуре
	|				ИЛИ АналитикаУчетаНоменклатуры.Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|		И (НЕ &УстановленОтборПоПартнерам
	|				ИЛИ АналитикаУчетаПоПартнерам.Партнер В ИЕРАРХИИ (&ОтборПартнеров))
	|		И (НЕ &УстановленОтборПоСкладам
	|				ИЛИ АналитикаУчетаНоменклатуры.МестоХранения В ИЕРАРХИИ (&ОтборСкладов))
	|		И (НЕ &УстановленОтборПоОрганизациям
	|				ИЛИ АналитикаУчетаПоПартнерам.Организация В ИЕРАРХИИ (&ОтборОрганизаций))
	|		) КАК ВыручкаИСебестоимостьПродажОбороты
	|	ГДЕ
	|		ТИПЗНАЧЕНИЯ(ВыручкаИСебестоимостьПродажОбороты.Регистратор) В (&ОтборПоДокументам)
	|	УПОРЯДОЧИТЬ ПО
	|		Период УБЫВ
	|	) КАК Набор";
	
	Настройки = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	
	ОтборНоменклатуры = ПолучитьОтборНоменклатуры(НастройкиОтборов, Настройки);
	ОтборПартнеров    = ПолучитьОтборПартнеров(НастройкиОтборов);
	ОтборСкладов      = ПолучитьОтборСкладов(НастройкиОтборов);
	ОтборОрганизаций  = ПолучитьОтборОрганизаций(НастройкиОтборов);
	ОтборДокументов   = ПолучитьОтборДокументов(НастройкиОтборов);
	ОтборОпераций     = ПолучитьОтборОпераций(НастройкиОтборов);
	
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	Запрос.УстановитьПараметр("ОтборНоменклатуры", ОтборНоменклатуры);
	Запрос.УстановитьПараметр("ОтборПартнеров", ОтборПартнеров);
	Запрос.УстановитьПараметр("ОтборСкладов", ОтборСкладов);
	Запрос.УстановитьПараметр("ОтборОрганизаций", ОтборОрганизаций);
	Запрос.УстановитьПараметр("ОтборПоДокументам", ОтборДокументов);
	Запрос.УстановитьПараметр("ОтборПоОперациям", ОтборОпераций);
	Запрос.УстановитьПараметр("УстановленОтборПоНоменклатуре", ЕстьОтборНоменклатуры(НастройкиОтборов));
	Запрос.УстановитьПараметр("УстановленОтборПоПартнерам", ЕстьОтборПартнеров(НастройкиОтборов));
	Запрос.УстановитьПараметр("УстановленОтборПоСкладам", ЕстьОтборСкладов(НастройкиОтборов));
	Запрос.УстановитьПараметр("УстановленОтборПоОрганизациям", ЕстьОтборОрганизаций(НастройкиОтборов));
	
	Запрос.УстановитьПараметр("ИспользоватьТолькоПланы", Настройки.ИспользоватьПлановыеОстаткиИПродажи
		И Не Настройки.ИспользоватьРеальныеОстаткиИПродажи);
	Запрос.УстановитьПараметр("ИспользоватьОстаткиИПланы", Настройки.ИспользоватьПлановыеОстаткиИПродажи
		И Настройки.ИспользоватьРеальныеОстаткиИПродажи);
	Запрос.УстановитьПараметр("СценарийПланов", Настройки.СценарийПрогнозированияФактИПлан);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		ПоследняяИзвестнаяПродажа = Выборка.Период;
	КонецЕсли;
	
	Возврат ПоследняяИзвестнаяПродажа;
	
КонецФункции

// Достаточно данных в информационной базе для прогнозирования.
//
// Параметры:
//  НастройкиСервиса - Неопределено, Структура из Произвольный - см. СервисПрогнозирования.ПолучитьНастройкиСервиса
//
// Возвращаемое значение:
//  Булево
Функция ДостаточноДанныхПродажДляПостроенияПрогноза(НастройкиСервиса) Экспорт
	
	Если НастройкиСервиса = Неопределено Тогда
		НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	КонецЕсли;
	
	// 1.
	ДатыПродаж = ПолучитьДатыНачалаОкончанияПродаж(НастройкиСервиса, Истина);
	
	ПоказательДлинаИсторииПродаж = ПоказательДлинаИсторииПродаж(ДатыПродаж);
	Если ПоказательДлинаИсторииПродаж.Категория = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДиапазонДатДляВыгрузки = Новый Структура();
	ДиапазонДатДляВыгрузки.Вставить("ДатаНачала", ДатыПродаж.ДатаНачалаПродаж);
	ДиапазонДатДляВыгрузки.Вставить("ДатаОкончания", ДатыПродаж.ДатаОкончанияПродаж);
	
	// Получение исходных данных для дальнейших расчетов.
	КоллекцияПродаж = ПолучитьКоллекциюПродаж(НастройкиСервиса, ДиапазонДатДляВыгрузки, Ложь, Истина);
	МенеджерВременныхТаблиц = КоллекцияПродаж.МенеджерВременныхТаблиц;
	
	// 2.
	ДанныеТопПродаж = ПолучитьКоличествоДнейПродажПопулярнейшегоТовара(НастройкиСервиса, МенеджерВременныхТаблиц);
	
	ПоказательКоличествоДнейПродаж = ПоказательКоличествоДнейПродаж(ДанныеТопПродаж.ПериодовПродаж);
	Если ПоказательКоличествоДнейПродаж.Категория = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// 3.
	ПродажПоАналитике = ПолучитьКоличествоПродажПоАналитике(НастройкиСервиса, МенеджерВременныхТаблиц);
	КоличествоПарОбъектов = ПродажПоАналитике.КоличествоПарОбъектов;
	КоличествоПродажОбщее = ПродажПоАналитике.КоличествоПродажОбщее;
	
	РазницаВГодах = (НачалоДня(ДатыПродаж.ДатаОкончанияПродаж) - НачалоДня(ДатыПродаж.ДатаНачалаПродаж))
		/ (60 * 60 * 24 * 365);
	Делитель = (КоличествоПарОбъектов * ?(РазницаВГодах = 0, 1, РазницаВГодах));
	Если Делитель > 0 Тогда
		ЧислоПродажВГод = КоличествоПродажОбщее / Делитель;
	Иначе
		ЧислоПродажВГод = 0;
	КонецЕсли;
	
	ПоказательКоличествоПродажВГод = ПоказательКоличествоПродажВГод(ЧислоПродажВГод, КоличествоПродажОбщее);
	Если ПоказательКоличествоПродажВГод.Категория = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Показатели качества данных информационной базы.
// 
// Возвращаемое значение:
//  Массив из Структура - см.ОписаниеПоказателяКачестваДанныхИнформационнойБазы
Функция ПоказателиКачестваДанныхИнформационнойБазы() Экспорт
	
	КлючеваяОперация = "ОбщийМодуль.СервисПрогнозированияПереопределяемый.ПоказателиКачестваДанныхИнформационнойБазы";
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	Ответ = Новый Массив();
	
	// 1.
	ДатыПродаж = ПолучитьДатыНачалаОкончанияПродаж(НастройкиСервиса, Истина);
	
	ДиапазонДатДляВыгрузки = Новый Структура();
	ДиапазонДатДляВыгрузки.Вставить("ДатаНачала", ДатыПродаж.ДатаНачалаПродаж);
	ДиапазонДатДляВыгрузки.Вставить("ДатаОкончания", ДатыПродаж.ДатаОкончанияПродаж);
	
	РазницаВМесяцах = (НачалоДня(ДатыПродаж.ДатаОкончанияПродаж) - НачалоДня(ДатыПродаж.ДатаНачалаПродаж)) / (60 * 60 * 24 * 30);
	РазницаВГодах = (НачалоДня(ДатыПродаж.ДатаОкончанияПродаж) - НачалоДня(ДатыПродаж.ДатаНачалаПродаж)) / (60 * 60 * 24 * 365);
	
	ПоказательДлинаИсторииПродаж = ПоказательДлинаИсторииПродаж(ДатыПродаж);
	Ответ.Добавить(ПоказательДлинаИсторииПродаж);
	
	// Получение исходных данных для дальнейших расчетов.
	КоллекцияПродаж = ПолучитьКоллекциюПродаж(НастройкиСервиса, ДиапазонДатДляВыгрузки, Ложь, Истина);
	МенеджерВременныхТаблиц = КоллекцияПродаж.МенеджерВременныхТаблиц;
	
	// 2.
	
	ДанныеТопПродаж = ПолучитьКоличествоДнейПродажПопулярнейшегоТовара(НастройкиСервиса, МенеджерВременныхТаблиц);
	
	ПоказательКоличествоДнейПродаж = ПоказательКоличествоДнейПродаж(ДанныеТопПродаж.ПериодовПродаж);
	Ответ.Добавить(ПоказательКоличествоДнейПродаж);
	
	// 3.
	
	ДоляОтрицательныхПродаж = ПолучитьДолюОтрицательныхПродаж(НастройкиСервиса, ДиапазонДатДляВыгрузки);
	
	ПоказательОтрицательныеПродажи = ПоказательОтрицательныеПродажи(ДоляОтрицательныхПродаж.ПроцентОтрицательныхЗаписей);
	Ответ.Добавить(ПоказательОтрицательныеПродажи);
	
	// 4.
	
	ПродажПоАналитике = ПолучитьКоличествоПродажПоАналитике(НастройкиСервиса, МенеджерВременныхТаблиц);
	КоличествоРазличныхТоваров = ПродажПоАналитике.КоличествоРазличныхТоваров;
	КоличествоПродажОбщее = ПродажПоАналитике.КоличествоПродажОбщее;
	
	РазницаВГодах = ?(ЗначениеЗаполнено(РазницаВГодах), РазницаВГодах, 1);
	КоличествоРазличныхТоваров = ?(ЗначениеЗаполнено(КоличествоРазличныхТоваров), КоличествоРазличныхТоваров, 1);
	КоличествоПродажОбщее = ?(ЗначениеЗаполнено(КоличествоПродажОбщее), КоличествоПродажОбщее, 1);
	ЧислоПродажВГод = КоличествоПродажОбщее / (КоличествоРазличныхТоваров * РазницаВГодах);
	
	ПоказательКоличествоПродажВГод = ПоказательКоличествоПродажВГод(ЧислоПродажВГод, КоличествоПродажОбщее);
	Ответ.Добавить(ПоказательКоличествоПродажВГод);
	
	// 5.
	
	АктивныеТовары = ПолучитьКоличествоАктивныхТоваров(НастройкиСервиса,
		МенеджерВременныхТаблиц,
		ДиапазонДатДляВыгрузки);
	КоличествоАктивныхТоваров = АктивныеТовары.АктивныхТоваров;
	
	Если КоличествоРазличныхТоваров > 0 Тогда
		ПроцентАктивныхТоваров = (КоличествоАктивныхТоваров / КоличествоРазличныхТоваров) * 100;
	Иначе
		ПроцентАктивныхТоваров = 0;
	КонецЕсли;
	
	ПоказательАктивностьПродаж = ПоказательАктивностьПродаж(ПроцентАктивныхТоваров, КоличествоАктивныхТоваров);
	Ответ.Добавить(ПоказательАктивностьПродаж);
	
	// 6.
	
	Новинки = ПолучитьКоличествоНовинок(НастройкиСервиса,
		МенеджерВременныхТаблиц,
		ДиапазонДатДляВыгрузки);
	КоличествоНовинок = Новинки.КоличествоНовинок;
	
	Если КоличествоАктивныхТоваров > 0 Тогда
		ПроцентНовинок = (КоличествоНовинок / КоличествоАктивныхТоваров) * 100;
	Иначе
		ПроцентНовинок = ?(КоличествоНовинок > 0, 100, 0);
	КонецЕсли;
	
	ПоказательНовинки = ПоказательНовинки(ПроцентНовинок);
	Ответ.Добавить(ПоказательНовинки);
	
	// 7.
	
	СтатистикаПоЧастотностиПродаж = ПолучитьКоличествоПродажТоваровПомесячно(НастройкиСервиса,
		МенеджерВременныхТаблиц,
		РазницаВМесяцах);
	ЧастоПродаваемыхТоваров = СтатистикаПоЧастотностиПродаж.ЧастоПродаваемыхТоваров;
	ЧастичноПродаваемыхТоваров = СтатистикаПоЧастотностиПродаж.ЧастичноПродаваемыхТоваров;
	РедкоПродаваемыхТоваров = СтатистикаПоЧастотностиПродаж.РедкоПродаваемыхТоваров;
	
	ПоказательЧастыеПродажи = ПоказательЧастыеПродажи(ЧастоПродаваемыхТоваров, ЧастичноПродаваемыхТоваров, РедкоПродаваемыхТоваров);
	Ответ.Добавить(ПоказательЧастыеПродажи);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоПродажОбщее / 100);
	
	Возврат Ответ;
	
КонецФункции

Функция ЗаключениеПоПоказателямКачестваДанныхИнформационнойБазы(ПоказателиКачества, БазаПодключена) Экспорт
	
	Категория = 2;
	ВеличинаКачества = 0;
	Для Каждого ПоказательКачества Из ПоказателиКачества Цикл
		Если ПоказательКачества.Категория = 0 Тогда
			Категория = 0;
		КонецЕсли;
		ВеличинаКачества = ВеличинаКачества + ПоказательКачества.ВеличинаКачества;
	КонецЦикла;
	ВеличинаКачества = ВеличинаКачества / ПоказателиКачества.Количество();
	Если Категория > 0
		И ВеличинаКачества < 80 Тогда
		Категория = 1;
	КонецЕсли;
	
	ТекстПояснения = "";
	
	Если Категория = 0
		И БазаПодключена Тогда
		ТекстПояснения = НСтр("ru = 'В информационной базе недостаточно подходящих данных для работы с сервисом прогнозирования продаж.
			|База подключена, но с имеющимися данными невозможно продолжить работу, перевыгрузка запрещена.'");
	ИначеЕсли Категория = 0
		И Не БазаПодключена Тогда
		ТекстПояснения = НСтр("ru = 'В информационной базе недостаточно подходящих данных для работы с сервисом прогнозирования продаж.
			|Подключение к сервису прогнозирования невозможно.'");
	ИначеЕсли Категория = 1
		И БазаПодключена Тогда
		ТекстПояснения = НСтр("ru = 'Данные в информационной базе подходят для работы с сервисом прогнозирования продаж, но качество прогноза по ним ограничено.
			|База подключена, можно продолжить работу и перевыгрузить данные для прогнозирования.'");
	ИначеЕсли Категория = 1
		И Не БазаПодключена Тогда
		ТекстПояснения = НСтр("ru = 'Данные в информационной базе подходят для работы с сервисом прогнозирования продаж, но качество прогноза по ним ограничено.
			|Рекомендуется продолжить подключение и получить первый прогноз.'");
	ИначеЕсли Категория = 2
		И БазаПодключена Тогда
		ТекстПояснения = НСтр("ru = 'Данные в информационной базе подходят для работы с сервисом прогнозирования продаж.
			|База подключена, можно продолжить работу и перевыгрузить данные для прогнозирования.'");
	ИначеЕсли Категория = 2
		И Не БазаПодключена Тогда
		ТекстПояснения = НСтр("ru = 'Данные в информационной базе подходят для работы с сервисом прогнозирования продаж.
			|Рекомендуется продолжить подключение и получить первый прогноз.'");
	КонецЕсли;
	
	ТекстЗаголовок = НСтр("ru = '<b>Заключение</b>'");
	ТекстЗаголовокФорматированный = СтроковыеФункции.ФорматированнаяСтрока(ТекстЗаголовок);
	Представление = Новый ФорматированнаяСтрока(ТекстЗаголовокФорматированный, Символы.ПС, ТекстПояснения);
	
	Ответ = Новый Структура();
	Ответ.Вставить("Категория", Категория);
	Ответ.Вставить("Представление", Представление);
	Ответ.Вставить("ВеличинаКачества", ВеличинаКачества);
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанных

// Записать прогноз продаж.
// 
// Параметры:
//  СтруктураОтвета - Массив из Структура - 
//  ВидПлана - СправочникСсылка.ВидыПланов - 
//  ИмяМодели - Строка - 
//  ИдОбучения - Строка - 
//  КачествоМодели - Массив из Структура - 
Процедура ЗаписатьПрогнозПродаж(СтруктураОтвета, ВидПлана, ИмяМодели, ИдОбучения, КачествоМодели) Экспорт
	
	КлючеваяОперация = "ОбщийМодуль.СервисПрогнозированияПереопределяемый.ЗаписатьПрогнозПродаж";
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	ТребуемыеРеквизитыВидаПлана = "Владелец, Периодичность, ДеньНеделиНачалаПрогноза, НачалоПрогнозирования, 
		|ДеньНеделиНачалаПрогноза, СтруктураНастроек, ЗаполнятьСкладВТЧ, ЗаполнятьПартнераВТЧ, 
		|ЗаполнятьПоХарактеристикамНоменклатуры, ВидЦены";
	РеквизитыВидаПлана = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана, ТребуемыеРеквизитыВидаПлана);
	
	ТекущийСценарий          = РеквизитыВидаПлана.Владелец;
	ТекущаяПериодичность     = РеквизитыВидаПлана.Периодичность;
	ДеньНеделиНачалаПрогноза = РеквизитыВидаПлана.ДеньНеделиНачалаПрогноза;
	
	// Для оптимальной загрузки требуется пересортировать принимаемые данные.
	ДанныеДляЗагрузки = Новый ТаблицаЗначений();
	ДанныеДляЗагрузки.Колонки.Добавить("Склад",          Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ДанныеДляЗагрузки.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДанныеДляЗагрузки.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ДанныеДляЗагрузки.Колонки.Добавить("Партнер",        Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ДанныеДляЗагрузки.Колонки.Добавить("Дата",           Новый ОписаниеТипов("Дата"));
	ДанныеДляЗагрузки.Колонки.Добавить("Количество",     Новый ОписаниеТипов("Число"));
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	Если НастройкиСервиса.ОкруглятьШтучныеПозиции Тогда
		ЕдиницаИзмеренияКоличестваШтук = Константы.ЕдиницаИзмеренияКоличестваШтук.Получить();
	КонецЕсли;
	
	ПараметрыТекущегоПрогноза = Новый Структура();
	ПараметрыТекущегоПрогноза.Вставить("Периодичность",                  ТекущаяПериодичность);
	ПараметрыТекущегоПрогноза.Вставить("ДеньНеделиНачалаПрогноза",       ДеньНеделиНачалаПрогноза);
	ПараметрыТекущегоПрогноза.Вставить("ЕдиницаИзмеренияКоличестваШтук", ЕдиницаИзмеренияКоличестваШтук);
	
	Для Каждого ТекущийПрогноз Из СтруктураОтвета Цикл
		Если ИмяМодели = "auto" Тогда
			ЗаполнитьДанныеТекущегоПрогнозаСОптимальнойМоделью(ТекущийПрогноз, Истина, ДанныеДляЗагрузки, ПараметрыТекущегоПрогноза,
				НастройкиСервиса);
		Иначе
			ПараметрыТекущегоПрогноза.Вставить("ИмяМодели", ИмяМодели);
			ЗаполнитьДанныеТекущегоПрогнозаСВыбраннойМоделью(ТекущийПрогноз, Истина, ДанныеДляЗагрузки, ПараметрыТекущегоПрогноза,
				НастройкиСервиса);
		КонецЕсли;
	КонецЦикла;
	
	// Требуется загружать не все данные, а только те, которые подходят по заданным настройкам модели (вида плана).
	
	// Планы на даты прогноза перезаписываются. Планы на более ранние даты остаются как есть.
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВходящаяТаблица.Склад КАК Склад,
	|	ВходящаяТаблица.Номенклатура КАК Номенклатура,
	|	ВходящаяТаблица.Характеристика КАК Характеристика,
	|	ВходящаяТаблица.Партнер КАК Партнер,
	// Дата приводится к началу соответствующего периода.
	// Для периодичности "неделя" имеется возможность выбрать день недели, на который будет отнесен прогноз.
	|	ВЫБОР
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВходящаяТаблица.Дата, ДЕНЬ)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВходящаяТаблица.Дата, МЕСЯЦ)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			И &ДеньНачалаНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВходящаяТаблица.Дата, НЕДЕЛЯ)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			И &ДеньНачалаНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВходящаяТаблица.Дата, НЕДЕЛЯ), ДЕНЬ, 1)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			И &ДеньНачалаНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Среда)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВходящаяТаблица.Дата, НЕДЕЛЯ), ДЕНЬ, 2)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			И &ДеньНачалаНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Четверг)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВходящаяТаблица.Дата, НЕДЕЛЯ), ДЕНЬ, 3)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			И &ДеньНачалаНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Пятница)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВходящаяТаблица.Дата, НЕДЕЛЯ), ДЕНЬ, 4)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			И &ДеньНачалаНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВходящаяТаблица.Дата, НЕДЕЛЯ), ДЕНЬ, 5)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			И &ДеньНачалаНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВходящаяТаблица.Дата, НЕДЕЛЯ), ДЕНЬ, 6)
	|		ИНАЧЕ
	|			НАЧАЛОПЕРИОДА(ВходящаяТаблица.Дата, ДЕНЬ)
	|	КОНЕЦ КАК Дата,
	|	ВЫРАЗИТЬ(ВходящаяТаблица.Количество КАК ЧИСЛО(15, 3)) КАК Количество
	|ПОМЕСТИТЬ ВТВходящиеДанные
	|ИЗ
	|	&ВходящаяТаблица КАК ВходящаяТаблица
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад,
	|	Номенклатура,
	|	Характеристика,
	|	Партнер
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВходящиеДанные.Номенклатура КАК Номенклатура,
	|	ВходящиеДанные.Характеристика КАК Характеристика,
	|	ВходящиеДанные.Партнер КАК Партнер,
	|	ВходящиеДанные.Склад КАК Склад,
	|	ВходящиеДанные.Дата КАК Дата,
	|	ВходящиеДанные.Количество КАК Количество
	|ИЗ
	|	ВТВходящиеДанные КАК ВходящиеДанные
	|ГДЕ
	|	ВЫРАЗИТЬ(ВходящиеДанные.Количество КАК ЧИСЛО(15, 3)) > 0
	|	И ВходящиеДанные.Номенклатура <> НЕОПРЕДЕЛЕНО
	|	И ВходящиеДанные.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|УПОРЯДОЧИТЬ ПО
	|	ВходящиеДанные.Дата,
	|	ВходящиеДанные.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланыПродаж.Ссылка КАК Ссылка,
	|	ПланыПродаж.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТВходящиеДанные КАК ВходящиеДанные
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПродаж.Товары КАК ПланыПродаж
	|	ПО ПланыПродаж.Ссылка.Сценарий = &Сценарий
	|		И ПланыПродаж.Ссылка.ВидПлана = &ВидПлана
	|		И ПланыПродаж.Ссылка.НачалоПериода >= &НачалоПрогнозирования
	|		И ПланыПродаж.Ссылка.Проведен
	|		И ПланыПродаж.ДатаОтгрузки = ВходящиеДанные.Дата
	|		И ПланыПродаж.Номенклатура = ВходящиеДанные.Номенклатура
	|		И ПланыПродаж.Характеристика = ВходящиеДанные.Характеристика
	|		И ПланыПродаж.Склад = ВходящиеДанные.Склад
	|		И ПланыПродаж.Партнер = ВходящиеДанные.Партнер
	|ГДЕ
	|	ВЫРАЗИТЬ(ВходящиеДанные.Количество КАК ЧИСЛО(15, 3)) > 0
	|	И ВходящиеДанные.Номенклатура <> НЕОПРЕДЕЛЕНО
	|	И ВходящиеДанные.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|УПОРЯДОЧИТЬ ПО
	|	ПланыПродаж.Ссылка,
	|	ПланыПродаж.НомерСтроки УБЫВ
	|ИТОГИ
	|ПО
	|	ПланыПродаж.Ссылка
	|";
	
	// Все даты сдвигаются к началу текущей периодичности.
	НачалоПрогнозирования = РеквизитыВидаПлана.НачалоПрогнозирования;
	ДеньНеделиНачалаПрогноза = РеквизитыВидаПлана.ДеньНеделиНачалаПрогноза;
	НачалоПрогнозирования = СдвинутьДатуКНачалуПериода(НачалоПрогнозирования, ТекущаяПериодичность, ДеньНеделиНачалаПрогноза);
	
	Запрос.УстановитьПараметр("ВходящаяТаблица",       ДанныеДляЗагрузки);
	Запрос.УстановитьПараметр("Сценарий",              ТекущийСценарий);
	Запрос.УстановитьПараметр("ВидПлана",              ВидПлана);
	Запрос.УстановитьПараметр("НачалоПрогнозирования", НачалоПрогнозирования);
	Запрос.УстановитьПараметр("Периодичность",         ТекущаяПериодичность);
	Запрос.УстановитьПараметр("ДеньНачалаНедели",      ДеньНеделиНачалаПрогноза);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаДляФильтрации = МассивРезультатов[1].Выбрать();
	СуществующиеПланыПродажКОчистке = МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СхемаКомпоновкиДанных = ПолучитьОбщийМакет("СервисПрогнозированияФильтрЗагрузкиПрогноза");
	
	// 1 шаг фильтрации - применение общего фильтра на загрузку.
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ВтВходящиеДанные", ТаблицаДляФильтрации);
	ЗначениеКонстанты = Константы.НастройкиОтборовНаЗагрузкуСервисаПрогнозирования.Получить();
	Если ЗначениеЗаполнено(ЗначениеКонстанты) Тогда
		ФильтрНаЗагрузку = ЗначениеКонстанты.Получить();
		Если ЗначениеЗаполнено(ФильтрНаЗагрузку)
			И ФильтрНаЗагрузку.Свойство("ОбщийОтборЗагрузки") Тогда
			ОтборыСКД = ФильтрНаЗагрузку.ОбщийОтборЗагрузки;
			ТаблицаДляФильтрации = ПолучитьРезультатСКД(СхемаКомпоновкиДанных, ОтборыСКД, Неопределено, ВнешниеНаборы);
		КонецЕсли;
	КонецЕсли;
	
	// 2 шаг фильтрации - применение фильтра на загрузку из вида плана.
	ВнешниеНаборы.Вставить("ВтВходящиеДанные", ТаблицаДляФильтрации);
	СтруктураНастроек = РеквизитыВидаПлана.СтруктураНастроек.Получить();
	Если ЗначениеЗаполнено(СтруктураНастроек) Тогда
		ОтборыСКД = СтруктураНастроек.ОтборНоменклатурыНастройки;
		ТаблицаДляФильтрации = ПолучитьРезультатСКД(СхемаКомпоновкиДанных, ОтборыСКД, Неопределено, ВнешниеНаборы);
	КонецЕсли;
	
	// После прохождения фильтрации через СКД в таблице может появится строка с пустыми значениями (группировочная).
	// Ее следует удалить.
	ПараметрыПоиска = Новый Структура("Номенклатура", Неопределено);
	СтрокиКУдалению = ТаблицаДляФильтрации.НайтиСтроки(ПараметрыПоиска);
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДляФильтрации.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Если ТаблицаДляФильтрации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПерваяСтрока = ТаблицаДляФильтрации[0];
	ПоследняяСтрока = ТаблицаДляФильтрации[ТаблицаДляФильтрации.Количество() - 1];
	
	// Если данные флаги взведены, в один документ может записаться несколько партнеров и складов.
	// В ином случае ожидается, что сервис прогнозирования вернет единственные значения партнера и склада.
	ЗаполнятьНесколькоСкладов   = РеквизитыВидаПлана.ЗаполнятьСкладВТЧ;
	ЗаполнятьНесколькоПартнеров = РеквизитыВидаПлана.ЗаполнятьПартнераВТЧ;
	
	ТекущийДокумент = Документы.ПланПродаж.СоздатьДокумент();
	
	ТекущийДокумент.Склад = ?(ЗаполнятьНесколькоСкладов, Неопределено, ПерваяСтрока.Склад);
	ТекущийДокумент.Партнер = ?(ЗаполнятьНесколькоПартнеров, Неопределено, ПерваяСтрока.Партнер);
	
	ТекущийДокумент.Дата                     = ТекущаяДатаСеанса();
	ТекущийДокумент.НачалоПериода            = ПерваяСтрока.Дата;
	ТекущийДокумент.ОкончаниеПериода         = ПоследняяСтрока.Дата;
	ТекущийДокумент.Статус                   = Перечисления.СтатусыПланов.ВПодготовке;
	ТекущийДокумент.Сценарий                 = ТекущийСценарий;
	ТекущийДокумент.Периодичность            = ТекущаяПериодичность;
	ТекущийДокумент.ВидПлана                 = ВидПлана;
	ТекущийДокумент.ЗаполнятьПоДаннымСервиса = Истина;
	
	ТаблицаДляФильтрации.Колонки.Добавить("ДатаОтгрузки", Новый ОписаниеТипов("Дата"));
	ТаблицаДляФильтрации.ЗагрузитьКолонку(ТаблицаДляФильтрации.ВыгрузитьКолонку("Дата"), "ДатаОтгрузки");
	
	ТекущийДокумент.Товары.Загрузить(ТаблицаДляФильтрации);
	
	ВалютаСценарияПланирования = Неопределено;
	Если ЗначениеЗаполнено(РеквизитыВидаПлана.ВидЦены) Тогда
		ВалютаСценарияПланирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийСценарий, "Валюта");
	КонецЕсли;
	
	ПараметрыЗаполненияЦен = ЦеныПредприятияЗаполнениеСервер.НовыйПараметрыЗаполненияЗаполнитьЦены();
	ПараметрыЗаполненияЦен.ВидЦены = РеквизитыВидаПлана.ВидЦены;
	ПараметрыЗаполненияЦен.Валюта = ВалютаСценарияПланирования;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	
	СтруктураДействийКоличество = Новый Структура;
	СтруктураДействийКоличество.Вставить("ПересчитатьКоличествоУпаковок");
	
	Для Каждого Строка Из ТекущийДокумент.Товары Цикл
		ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокВСтрокеТЧ(
				Строка, СтруктураДействийКоличество, Неопределено);
	КонецЦикла;
	
	Если ТекущийДокумент <> Неопределено Тогда
		НачатьТранзакцию();
		Попытка
			Если ЗначениеЗаполнено(РеквизитыВидаПлана.ВидЦены) Тогда
				ПараметрыЗаполненияЦен.Дата = ТекущийДокумент.Дата;
				ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(ТекущийДокумент.Товары,
					Неопределено,
					ПараметрыЗаполненияЦен,
					СтруктураДействий);
			КонецЕсли;
			
			ТекущийДокумент.Записать(РежимЗаписиДокумента.Проведение);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			СобытиеЖурналаРегистрации = ТекстСобытиеЖурналаРегистрации();
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ПланПродаж,
				,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	// Удалить из прошлых документов прогнозы по совпадающей аналитике.
	Пока СуществующиеПланыПродажКОчистке.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			УстановитьБлокировкуНаПланПродаж(СуществующиеПланыПродажКОчистке.Ссылка);
			ТекущийДокумент = СуществующиеПланыПродажКОчистке.Ссылка.ПолучитьОбъект();
			НомераСтрок = СуществующиеПланыПродажКОчистке.Выбрать();
			Пока НомераСтрок.Следующий() Цикл
				// Номера строк имеют обратную сортировку, поэтому удаление по индексу безопасно.
				ТекущийДокумент.Товары.Удалить(НомераСтрок.НомерСтроки - 1);
			КонецЦикла;
			Если ТекущийДокумент.Товары.Количество() = 0 Тогда
				ТекущийДокумент.ПометкаУдаления = Истина;
				ТекущийДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				ТекущийДокумент.Записать();
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			СобытиеЖурналаРегистрации = ТекстСобытиеЖурналаРегистрации();
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ПланПродаж,
				,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, СтруктураОтвета.Количество() / 100);
	
КонецПроцедуры

// Записать прогноз продаж.
// 
// Параметры:
//  СтруктураОтвета - Массив из Структура - 
//  ВидПлана - СправочникСсылка.ВидыПланов - 
//  ИмяМодели - Строка - 
//  ИдОбучения - Строка - 
//  КачествоМодели - Массив из Структура - 
Процедура ЗаписатьПрогнозПродажПоКатегориям(СтруктураОтвета, ВидПлана, ИмяМодели, ИдОбучения, КачествоМодели) Экспорт
	
	КлючеваяОперация = "ОбщийМодуль.СервисПрогнозированияПереопределяемый.ЗаписатьПрогнозПродажПоКатегориям";
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	ТребуемыеРеквизитыВидаПлана = "Владелец, Периодичность, ДеньНеделиНачалаПрогноза, НачалоПрогнозирования, 
		|ДеньНеделиНачалаПрогноза, СтруктураНастроек, ЗаполнятьСкладВТЧ";
	РеквизитыВидаПлана = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана, ТребуемыеРеквизитыВидаПлана);
	
	ТекущийСценарий          = РеквизитыВидаПлана.Владелец;
	ТекущаяПериодичность     = РеквизитыВидаПлана.Периодичность;
	ДеньНеделиНачалаПрогноза = РеквизитыВидаПлана.ДеньНеделиНачалаПрогноза;
	
	// Для оптимальной загрузки требуется пересортировать принимаемые данные.
	
	ДанныеДляЗагрузки = Новый ТаблицаЗначений();
	ДанныеДляЗагрузки.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ДанныеДляЗагрузки.Колонки.Добавить("ТоварнаяКатегория", Новый ОписаниеТипов("СправочникСсылка.ТоварныеКатегории"));
	ДанныеДляЗагрузки.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ДанныеДляЗагрузки.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	ПараметрыТекущегоПрогноза = Новый Структура();
	ПараметрыТекущегоПрогноза.Вставить("Периодичность",            ТекущаяПериодичность);
	ПараметрыТекущегоПрогноза.Вставить("ДеньНеделиНачалаПрогноза", ДеньНеделиНачалаПрогноза);
	
	Для Каждого ТекущийПрогноз Из СтруктураОтвета Цикл
		Если ИмяМодели = "auto" Тогда
			ЗаполнитьДанныеТекущегоПрогнозаСОптимальнойМоделью(ТекущийПрогноз, Ложь, ДанныеДляЗагрузки, ПараметрыТекущегоПрогноза);
		Иначе
			ПараметрыТекущегоПрогноза.Вставить("ИмяМодели", ИмяМодели);
			ЗаполнитьДанныеТекущегоПрогнозаСВыбраннойМоделью(ТекущийПрогноз, Ложь, ДанныеДляЗагрузки, ПараметрыТекущегоПрогноза);
		КонецЕсли;
	КонецЦикла;
	
	// Требуется загружать не все данные, а только те, которые подходят по заданным настройкам модели (вида плана).
	
	// Планы на даты прогноза перезаписываются. Планы на более ранние даты остаются как есть.
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВходящаяТаблица.Склад КАК Склад,
	|	ВходящаяТаблица.ТоварнаяКатегория КАК ТоварнаяКатегория,
	// Дата приводится к началу соответствующего периода.
	// Для периодичности "неделя" имеется возможность выбрать день недели, на который будет отнесен прогноз.
	|	ВЫБОР
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВходящаяТаблица.Дата, ДЕНЬ)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВходящаяТаблица.Дата, МЕСЯЦ)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			И &ДеньНачалаНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВходящаяТаблица.Дата, НЕДЕЛЯ)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			И &ДеньНачалаНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВходящаяТаблица.Дата, НЕДЕЛЯ), ДЕНЬ, 1)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			И &ДеньНачалаНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Среда)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВходящаяТаблица.Дата, НЕДЕЛЯ), ДЕНЬ, 2)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			И &ДеньНачалаНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Четверг)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВходящаяТаблица.Дата, НЕДЕЛЯ), ДЕНЬ, 3)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			И &ДеньНачалаНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Пятница)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВходящаяТаблица.Дата, НЕДЕЛЯ), ДЕНЬ, 4)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			И &ДеньНачалаНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВходящаяТаблица.Дата, НЕДЕЛЯ), ДЕНЬ, 5)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			И &ДеньНачалаНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВходящаяТаблица.Дата, НЕДЕЛЯ), ДЕНЬ, 6)
	|		ИНАЧЕ
	|			НАЧАЛОПЕРИОДА(ВходящаяТаблица.Дата, ДЕНЬ)
	|	КОНЕЦ КАК Дата,
	|	ВЫРАЗИТЬ(ВходящаяТаблица.Количество КАК ЧИСЛО(15, 3)) КАК Количество
	|ПОМЕСТИТЬ ВТВходящиеДанные
	|ИЗ
	|	&ВходящаяТаблица КАК ВходящаяТаблица
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад,
	|	ТоварнаяКатегория
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВходящиеДанные.Склад КАК Склад,
	|	ВходящиеДанные.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	ВходящиеДанные.Дата КАК Дата,
	|	ВходящиеДанные.Количество КАК Количество
	|ИЗ
	|	ВТВходящиеДанные КАК ВходящиеДанные
	|ГДЕ
	|	ВЫРАЗИТЬ(ВходящиеДанные.Количество КАК ЧИСЛО(15, 3)) > 0
	|	И ВходящиеДанные.ТоварнаяКатегория <> НЕОПРЕДЕЛЕНО
	|	И ВходящиеДанные.ТоварнаяКатегория <> ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВходящиеДанные.Дата,
	|	ВходящиеДанные.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланыПродаж.Ссылка КАК Ссылка,
	|	ПланыПродаж.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТВходящиеДанные КАК ВходящиеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПродажПоКатегориям.ТоварныеКатегории КАК ПланыПродаж
	|		ПО ПланыПродаж.Ссылка.Сценарий = &Сценарий
	|			И ПланыПродаж.Ссылка.ВидПлана = &ВидПлана
	|			И ПланыПродаж.Ссылка.НачалоПериода >= &НачалоПрогнозирования
	|			И ПланыПродаж.Ссылка.Проведен
	|			И ПланыПродаж.ДатаОтгрузки = ВходящиеДанные.Дата
	|			И ПланыПродаж.Склад = ВходящиеДанные.Склад
	|			И ПланыПродаж.ТоварнаяКатегория = ВходящиеДанные.ТоварнаяКатегория
	|ГДЕ
	|	ВЫРАЗИТЬ(ВходящиеДанные.Количество КАК ЧИСЛО(15, 3)) > 0
	|	И ВходящиеДанные.ТоварнаяКатегория <> НЕОПРЕДЕЛЕНО
	|	И ВходящиеДанные.ТоварнаяКатегория <> ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)
	|УПОРЯДОЧИТЬ ПО
	|	ПланыПродаж.Ссылка,
	|	ПланыПродаж.НомерСтроки УБЫВ
	|ИТОГИ
	|ПО
	|	ПланыПродаж.Ссылка
	|";
	
	// Все даты сдвигаются к началу текущей периодичности.
	НачалоПрогнозирования = РеквизитыВидаПлана.НачалоПрогнозирования;
	ДеньНеделиНачалаПрогноза = РеквизитыВидаПлана.ДеньНеделиНачалаПрогноза;
	НачалоПрогнозирования = СдвинутьДатуКНачалуПериода(НачалоПрогнозирования, ТекущаяПериодичность, ДеньНеделиНачалаПрогноза);
	
	Запрос.УстановитьПараметр("ВходящаяТаблица",       ДанныеДляЗагрузки);
	Запрос.УстановитьПараметр("Сценарий",              ТекущийСценарий);
	Запрос.УстановитьПараметр("ВидПлана",              ВидПлана);
	Запрос.УстановитьПараметр("НачалоПрогнозирования", НачалоПрогнозирования);
	Запрос.УстановитьПараметр("Периодичность",         ТекущаяПериодичность);
	Запрос.УстановитьПараметр("НачалоПрогнозирования", НачалоПрогнозирования);
	Запрос.УстановитьПараметр("ДеньНачалаНедели",      ДеньНеделиНачалаПрогноза);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаДляФильтрации = МассивРезультатов[1].Выгрузить();
	СуществующиеПланыПродажКОчистке = МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	// Если данные флаги взведены, в один документ может записаться несколько складов.
	// В ином случае ожидается, что сервис прогнозирования вернет единственные значения склада.
	ЗаполнятьНесколькоСкладов = РеквизитыВидаПлана.ЗаполнятьСкладВТЧ;
	
	Если ТаблицаДляФильтрации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПерваяСтрока = ТаблицаДляФильтрации[0];
	ПоследняяСтрока = ТаблицаДляФильтрации[ТаблицаДляФильтрации.Количество() - 1];
	
	ТекущийДокумент = Документы.ПланПродажПоКатегориям.СоздатьДокумент();
	
	ТекущийДокумент.Склад = ?(ЗаполнятьНесколькоСкладов, Неопределено, ПерваяСтрока.Склад);
	
	ТекущийДокумент.Дата             = ТекущаяДатаСеанса();
	ТекущийДокумент.НачалоПериода    = ПерваяСтрока.Дата;
	ТекущийДокумент.ОкончаниеПериода = ПоследняяСтрока.Дата;
	ТекущийДокумент.Статус           = Перечисления.СтатусыПланов.ВПодготовке;
	ТекущийДокумент.Сценарий         = ТекущийСценарий;
	ТекущийДокумент.Периодичность    = ТекущаяПериодичность;
	ТекущийДокумент.ВидПлана         = ВидПлана;
	
	ТаблицаДляФильтрации.Колонки.Добавить("ДатаОтгрузки", Новый ОписаниеТипов("Дата"));
	ТаблицаДляФильтрации.ЗагрузитьКолонку(ТаблицаДляФильтрации.ВыгрузитьКолонку("Дата"), "ДатаОтгрузки");
	
	ТекущийДокумент.ТоварныеКатегории.Загрузить(ТаблицаДляФильтрации);
	
	Если ТекущийДокумент <> Неопределено Тогда
		НачатьТранзакцию();
		Попытка
			ТекущийДокумент.Записать(РежимЗаписиДокумента.Проведение);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			СобытиеЖурналаРегистрации = ТекстСобытиеЖурналаРегистрации();
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ПланПродажПоКатегориям,
				,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	// Удалить из прошлых документов прогнозы по совпадающей аналитике.
	Пока СуществующиеПланыПродажКОчистке.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			УстановитьБлокировкуНаПланПродажПоКатегориям(СуществующиеПланыПродажКОчистке.Ссылка);
			ТекущийДокумент = СуществующиеПланыПродажКОчистке.Ссылка.ПолучитьОбъект();
			НомераСтрок = СуществующиеПланыПродажКОчистке.Выбрать();
			Пока НомераСтрок.Следующий() Цикл
				// Номера строк имеют обратную сортировку, поэтому удаление по индексу безопасно.
				ТекущийДокумент.ТоварныеКатегории.Удалить(НомераСтрок.НомерСтроки - 1);
			КонецЦикла;
			Если ТекущийДокумент.ТоварныеКатегории.Количество() = 0 Тогда
				ТекущийДокумент.ПометкаУдаления = Истина;
				ТекущийДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				ТекущийДокумент.Записать();
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			СобытиеЖурналаРегистрации = ТекстСобытиеЖурналаРегистрации();
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ПланПродажПоКатегориям,
				,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СоставПередаваемыхДанных

// Коллекции в порядке важности.
// 
// Параметры:
//  ИспользоватьПланированиеПродаж - Булево - 
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж -
Функция КоллекцииПоПорядку(ИспользоватьПланированиеПродаж) Экспорт
	
	Ответ = Новый Массив();
	Ответ.Добавить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи);
	Ответ.Добавить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары);
	Если ИспользоватьПланированиеПродаж Тогда
		Ответ.Добавить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры);
		Ответ.Добавить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели);
	КонецЕсли;
	Ответ.Добавить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Склады);
	Ответ.Добавить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки);
	Ответ.Добавить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо);
	
	Возврат Ответ;
	
КонецФункции

// Получить описание реквизитов коллекций.
// 
// Возвращаемое значение:
//  Соответствие из см. ОписаниеВыгружаемогоЭлементаДанных.
Функция ПолучитьОписаниеРеквизитовВсехКоллекций() Экспорт
	
	Описание          = Новый Соответствие();
	ОсновноеОписание  = ОсновноеОписаниеВыгружаемогоЭлементаДанных();
	ВложенноеОписание = ОсновноеОписаниеВыгружаемогоЭлементаДанных();
	
	// Обязательные коллекции.
	ПродажиКоллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи;
	ОсновноеОписание.Вставить("ИмяВСервисе",   "sales");
	ОсновноеОписание.Вставить("Обязательный",  Истина);
	ОсновноеОписание.Вставить("Выгружать",     Истина);
	ОсновноеОписание.Вставить("ИмяВИсточнике", ПродажиКоллекция);
	ОсновноеОписание.Вставить("ТипДанных",     "dict");
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
		НСтр("ru = 'Продажи'"),
		Ложь, ПолучитьОписаниеРеквизитовКоллекцииПродаж(ВложенноеОписание));
	Описание.Вставить(ПродажиКоллекция, ОписаниеКоллекции);
	
	// Необязательные коллекции.
	Товары = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары;
	ОсновноеОписание.Вставить("ИмяВСервисе",   "products");
	ОсновноеОписание.Вставить("Обязательный",  Ложь);
	ОсновноеОписание.Вставить("Выгружать",     Ложь);
	ОсновноеОписание.Вставить("ИмяВИсточнике", Товары);
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
		НСтр("ru = 'Товары'"),
		Истина, ПолучитьОписаниеРеквизитовКоллекцииТоваров(ВложенноеОписание));
	Описание.Вставить(Товары, ОписаниеКоллекции);
	
	ХарактеристикиНоменклатуры = Перечисления.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры;
	ОсновноеОписание.Вставить("ИмяВСервисе",   "product_variants");
	ОсновноеОписание.Вставить("ИмяВИсточнике", ХарактеристикиНоменклатуры);
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
		НСтр("ru = 'Характеристики номенклатуры'"),
		Истина, ПолучитьОписаниеРеквизитовКоллекцииХарактеристик(ВложенноеОписание));
	Описание.Вставить(ХарактеристикиНоменклатуры, ОписаниеКоллекции);
	
	Покупатели = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели;
	ОсновноеОписание.Вставить("ИмяВСервисе",   "customers");
	ОсновноеОписание.Вставить("ИмяВИсточнике", Покупатели);
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
		НСтр("ru = 'Покупатели'"),
		Истина, ПолучитьОписаниеРеквизитовКоллекцииПокупателей(ВложенноеОписание));
	Описание.Вставить(Покупатели, ОписаниеКоллекции);
	
	Склады = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Склады;
	ОсновноеОписание.Вставить("ИмяВСервисе",   "shops");
	ОсновноеОписание.Вставить("ИмяВИсточнике", Склады);
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
		НСтр("ru = 'Склады/магазины'"),
		Истина, ПолучитьОписаниеРеквизитовКоллекцииСкладов(ВложенноеОписание));
	Описание.Вставить(Склады, ОписаниеКоллекции);
	
	Остатки = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки;
	ОсновноеОписание.Вставить("ИмяВСервисе",   "stock");
	ОсновноеОписание.Вставить("ИмяВИсточнике", Остатки);
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
		НСтр("ru = 'Остатки товаров'"),
		Ложь, ПолучитьОписаниеРеквизитовКоллекцииОстатковТоваров(ВложенноеОписание));
	Описание.Вставить(Остатки, ОписаниеКоллекции);
	
	Промо = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо;
	ОсновноеОписание.Вставить("ИмяВСервисе",   "promo");
	ОсновноеОписание.Вставить("ИмяВИсточнике", Промо);
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
		НСтр("ru = 'Промоакции'"),
		Ложь, ПолучитьОписаниеРеквизитовКоллекцииПромоАкций(ВложенноеОписание));
	Описание.Вставить(Промо, ОписаниеКоллекции);
	
	Возврат Описание;
	
КонецФункции

// Получить описание метаданных по коллекции.
// 
// Параметры:
//  ИмяКоллекции - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж - Имя коллекции
// 
// Возвращаемое значение:
//  Массив из см. ШаблонОписанияМетаданных.
Функция ПолучитьОписаниеМетаданныхПоКоллекции(ИмяКоллекции) Экспорт
	
	Если ИмяКоллекции = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи Тогда
		Описания = Новый Массив();
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.ПланПродаж;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_ПланПродаж";
		ОписаниеОбъекта.ЕстьТаблицаДопРеквизитов = Истина;
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.РеализацияТоваровУслуг;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_РеализацияТоваровУслуг";
		ОписаниеОбъекта.ЕстьТаблицаДопРеквизитов = Истина;
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.КорректировкаРеализации;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_КорректировкаРеализации";
		ОписаниеОбъекта.ЕстьТаблицаДопРеквизитов = Истина;
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.ВозвратТоваровОтКлиента;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_ВозвратТоваровОтКлиента";
		ОписаниеОбъекта.ЕстьТаблицаДопРеквизитов = Истина;
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.ОтчетКомиссионера;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_ОтчетКомиссионера";
		ОписаниеОбъекта.ЕстьТаблицаДопРеквизитов = Истина;
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.ВводОстатков;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_ВводОстатков";
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.ВводОстатковОПродажахЗаПрошлыеПериоды;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_ВводОстатковОПродажахЗаПрошлыеПериоды";
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.ВводОстатковТоваров;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_ВводОстатковТоваров";
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.ОтчетОРозничныхПродажах;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_ОтчетОРозничныхПродажах";
		Описания.Добавить(ОписаниеОбъекта);
		
		Возврат Описания;
	ИначеЕсли ИмяКоллекции = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары Тогда
		Описания = Новый Массив();
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Справочники.Номенклатура;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Справочник_Номенклатура";
		
		Описания.Добавить(ОписаниеОбъекта);
		
		Возврат Описания;
	ИначеЕсли ИмяКоллекции = Перечисления.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры Тогда
		Описания = Новый Массив();
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Справочники.ХарактеристикиНоменклатуры;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Справочник_ХарактеристикиНоменклатуры";
		
		Описания.Добавить(ОписаниеОбъекта);
		
		Возврат Описания;
	ИначеЕсли ИмяКоллекции = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели Тогда
		Описания = Новый Массив();
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Справочники.Партнеры;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Справочник_Партнеры";
		
		Описания.Добавить(ОписаниеОбъекта);
		
		Возврат Описания;
	ИначеЕсли ИмяКоллекции = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Склады Тогда
		Описания = Новый Массив();
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Справочники.Склады;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Справочник_Склады";
		
		Описания.Добавить(ОписаниеОбъекта);
		
		Возврат Описания;
	Иначе
		ВызватьИсключение ТекстНеРеализованаВыгрузкаДопРеквизитов(ИмяКоллекции);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РекламаСервиса

// Получить коллекцию.
// 
// Параметры:
//  ГруппаБаннерСервисаПрогнозирования - ГруппаФормы -
//  ТекстВозможностиИспользованияСервиса - ДекорацияФормы - Надпись текста рекламы
//  ТребуетсяОбновитьИнформациюОВозможностиИспользованияСервисаПрогнозирования - Булево
//
Процедура ПроверитьВозможностьПоказаРекламы(ГруппаБаннерСервисаПрогнозирования,
		ТекстВозможностиИспользованияСервиса,
		ТребуетсяОбновитьИнформациюОВозможностиИспользованияСервисаПрогнозирования) Экспорт
	
	Если Не СервисПрогнозирования.ДоступныПраваИзмененияНастроекСервисаПрогнозированияПродаж() Тогда
		ГруппаБаннерСервисаПрогнозирования.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	НастройкиСервиса    = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	Если ВозможенПоказРекламы(ТекущийПользователь, НастройкиСервиса) Тогда
		
		ТекстВозможностиИспользованияСервиса.Заголовок = ТекстРекламыСервиса();
		ТекущаяДата = ТекущаяДатаСеанса();
		
		ТребуетсяОбновитьИнформациюОВозможностиИспользованияСервисаПрогнозирования =
			Не НастройкиСервиса.ДостаточноДанныхДляПостроенияПрогноза
			И ТекущаяДата = НачалоМесяца(ТекущаяДата)
			И НастройкиСервиса.ДатаОбновленияДостаточностиДанных < НачалоМесяца(ТекущаяДата);
		Если ТребуетсяОбновитьИнформациюОВозможностиИспользованияСервисаПрогнозирования Тогда
			ГруппаБаннерСервисаПрогнозирования.Видимость = Ложь;
		Иначе
			ГруппаБаннерСервисаПрогнозирования.Видимость = НастройкиСервиса.ДостаточноДанныхДляПостроенияПрогноза;
		КонецЕсли;
	Иначе
		ТребуетсяОбновитьИнформациюОВозможностиИспользованияСервисаПрогнозирования = Ложь;
		ГруппаБаннерСервисаПрогнозирования.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Обновление достаточности данных продаж для построения прогноза и возврат результата обновления.
//
// Возвращаемое значение:
//  Булево
Функция ОбновленнаяИнформацияОДостаточностиДанныхДляПостроенияПрогноза() Экспорт
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	Если НастройкиСервиса.ДостаточноДанныхДляПостроенияПрогноза Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДостаточноДанных = ДостаточноДанныхПродажДляПостроенияПрогноза(НастройкиСервиса);
	НастройкиСервиса.ДостаточноДанныхДляПостроенияПрогноза = ДостаточноДанных;
	НастройкиСервиса.ДатаОбновленияДостаточностиДанных     = ТекущаяДатаСеанса();
	СервисПрогнозирования.ОбновитьНастройкиСервиса(НастройкиСервиса);
	
	Возврат ДостаточноДанных;
	
КонецФункции

// Добавить текущего пользователя в список пользователей, отказавшихся от показа рекламы сервиса.
//
Процедура ДобавитьПользователяВЗакрывшиеРекламу() Экспорт
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	НастройкиСервиса.ПользователиЗакрывшиеРекламу.Добавить(ТекущийПользователь);
	СервисПрогнозирования.ОбновитьНастройкиСервиса(НастройкиСервиса);
	
КонецПроцедуры

#КонецОбласти

#Область Тексты

// Текст для события журнала регистрации.
// 
// Возвращаемое значение:
//  Строка
Функция ТекстСобытиеЖурналаРегистрации() Экспорт
	ТекстСобытия = НСтр("ru='Сервис прогнозирования продаж'");
	Возврат ТекстСобытия;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШаблоныИСтруктуры

// Шаблон описания метаданных.
// 
// Возвращаемое значение:
//  Структура - Шаблон описания метаданных:
// * ОбъектМетаданных - Произвольный - 
// * ИмяОбъектаДопРеквизитовСвойств - Строка - 
// * ЕстьТаблицаДопРеквизитов - Булево - 
Функция ШаблонОписанияМетаданных()
	Ответ = Новый Структура();
	Ответ.Вставить("ОбъектМетаданных", Неопределено);
	Ответ.Вставить("ИмяОбъектаДопРеквизитовСвойств", "");
	Ответ.Вставить("ЕстьТаблицаДопРеквизитов", Ложь);
	
	Возврат Ответ;
КонецФункции

// Описание ответа порции периодической коллекции.
// 
// Возвращаемое значение:
//  Структура:
// * Коллекция - ТаблицаЗначений -
// * МенеджерВременныхТаблиц - Неопределено, МенеджерВременныхТаблиц - 
// * КоличествоДанных - Число -
// * ДатаПервойЗаписи - Дата -
// * ДатаПоследнейЗаписи - Дата -
// * ДатаОкончанияВыборкиПорции - Дата -
Функция ОписаниеОтветаПорцииПериодическойКоллекции()
	
	Структура = Новый Структура();
	Структура.Вставить("Коллекция", Новый ТаблицаЗначений);
	Структура.Вставить("МенеджерВременныхТаблиц", Неопределено);
	Структура.Вставить("КоличествоДанных", 0);
	Структура.Вставить("ДатаПервойЗаписи", Дата(1, 1, 1));
	Структура.Вставить("ДатаПоследнейЗаписи", Дата(1, 1, 1));
	Структура.Вставить("ДатаОкончанияВыборкиПорции", Дата(1, 1, 1));
	
	Возврат Структура;
	
КонецФункции

// Сводная информация по коллекции.
// 
// Возвращаемое значение:
//  Структура:
// * КоличествоДанных - Число - 
// * ДатаПервойЗаписи - Дата - 
// * ДатаПоследнейЗаписи - Дата - 
// * Дополнительно - Неопределено, Произвольный - 
// * КатегориальнаяКоллекция - Булево -
// * КоллекцияДанных - Неопределено, Произвольный - 
Функция ОписаниеОтветаСводкиПоКоллекции()
	
	Структура = Новый Структура();
	Структура.Вставить("КоличествоДанных", 0);
	Структура.Вставить("ДатаПервойЗаписи", Дата(1, 1, 1));
	Структура.Вставить("ДатаПоследнейЗаписи", Дата(1, 1, 1));
	Структура.Вставить("Дополнительно", Неопределено);
	Структура.Вставить("КатегориальнаяКоллекция", Ложь);
	Структура.Вставить("КоллекцияДанных", Неопределено);
	
	Возврат Структура;
	
КонецФункции

// Описание показателя качества данных информационной базы.
// 
// Возвращаемое значение:
//   - Структура:
//    * Имя - Строка - 
//    * Представление - Строка - Представление показателя для пользователя.
//    * Категория - Число - 0 - Красная, 1 - Желтая, 2 - Зеленая.
//    * ВеличинаКачества - Число - величина от 0 до 100, в процентах.
//    * ДополнительнаяИнформация - Строка, Структура - 
//
Функция ОписаниеПоказателяКачестваДанныхИнформационнойБазы()
	
	Ответ = Новый Структура();
	Ответ.Вставить("Имя", "");
	Ответ.Вставить("Представление", "");
	Ответ.Вставить("Категория", 0);
	Ответ.Вставить("ВеличинаКачества", 0);
	Ответ.Вставить("ДополнительнаяИнформация", "");
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанных

// Получить даты начала окончания продаж.
// 
// Возвращаемое значение:
//  Структура:
//   * ДатаНачалаПромо - Дата -
//   * ДатаОкончанияПромо - Дата -
Функция ПолучитьДатыНачалаОкончанияПромоАкций()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СкидкиНаценки.Период, ДЕНЬ) КАК Дата
	|ПОМЕСТИТЬ ВтДаты
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|		КОГДА МаркетинговыеМероприятия.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА МаркетинговыеМероприятия.ПлановаяДатаНачала
	|		ИНАЧЕ МаркетинговыеМероприятия.ДатаНачала
	|	КОНЕЦ, ДЕНЬ) КАК Дата
	|ИЗ
	|	Справочник.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	|ГДЕ
	|	НЕ МаркетинговыеМероприятия.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЕСТЬNULL(ВтДаты.Дата, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаНачалаПромо,
	|	МАКСИМУМ(ЕСТЬNULL(ВтДаты.Дата, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаОкончанияПромо
	|ИЗ
	|	ВтДаты КАК ВтДаты";
	
	УстановитьПривилегированныйРежим(Истина);
	НачалоОстатков = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	НачалоОстатков.Следующий();
	ДатаНачалаПромо = НачалоОстатков.ДатаНачалаПромо;
	ДатаОкончанияПромо = НачалоОстатков.ДатаОкончанияПромо;
	
	Возврат Новый Структура("ДатаНачалаПромо, ДатаОкончанияПромо", ДатаНачалаПромо, ДатаОкончанияПромо);
	
КонецФункции

// Получить даты начала окончания продаж.
// 
// Возвращаемое значение:
//  Структура:
//   * ДатаНачалаОстатков - Дата -
//   * ДатаОкончанияОстатков - Дата -
Функция ПолучитьДатыНачалаОкончанияОстатков()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТоварыНаСкладах.Период, ДЕНЬ) КАК Дата
	|ПОМЕСТИТЬ ВтДаты
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Обороты(, , ДЕНЬ, ) КАК ТоварыНаСкладах
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЕСТЬNULL(ВтДаты.Дата, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаНачалаОстатков,
	|	МАКСИМУМ(ЕСТЬNULL(ВтДаты.Дата, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаОкончанияОстатков
	|ИЗ
	|	ВтДаты КАК ВтДаты";
	
	УстановитьПривилегированныйРежим(Истина);
	НачалоОстатков = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	НачалоОстатков.Следующий();
	ДатаНачалаОстатков = НачалоОстатков.ДатаНачалаОстатков;
	ДатаОкончанияОстатков = НачалоОстатков.ДатаОкончанияОстатков;
	
	Возврат Новый Структура("ДатаНачалаОстатков, ДатаОкончанияОстатков", ДатаНачалаОстатков, ДатаОкончанияОстатков);
	
КонецФункции

// Получить коллекцию продаж.
// При помещении результата во временную таблицу предполагается, что получение доп. реквизитов не требуется.
// Это обусловлено сложностью дальнейшего использования временной таблицы содержащей доп. реквизиты, а также тем,
// что нет задачи где это требуется.
// 
// Параметры:
//  НастройкиСервиса - Неопределено, Структура из Произвольный - см. СервисПрогнозирования.ПолучитьНастройкиСервиса
//  ДиапазонДатДляВыгрузки - Неопределено, Структура из Дата - см. СервисПрогнозирования.ДиапазонДатДляВыгрузки
//  ПолучитьДополнительныеРеквизиты - Булево - Получить дополнительные реквизиты
//  ПоместитьРезультатВоВременнуюТаблицу - Булево - Отказ от выгрузки результата в ТЗ.
//  	Запрос будет выполнен, а результат помещен в МенеджерВременныхТаблиц. Вдобавок к полям-гуидам будут получены
//  	поля содержащие ссылочные типы.
// 
// Возвращаемое значение:
//  см. ОписаниеОтветаПорцииПериодическойКоллекции.
Функция ПолучитьКоллекциюПродаж(НастройкиСервиса, ДиапазонДатДляВыгрузки,
	ПолучитьДополнительныеРеквизиты = Истина,
	ПоместитьРезультатВоВременнуюТаблицу = Ложь)

	Запрос = Новый Запрос();
	Если ПоместитьРезультатВоВременнуюТаблицу Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	КонецЕсли;
	
	УчитыватьПотерянныеЗаказы = Не (НастройкиСервиса.УчетПотерянныхПродаж = 0
		Или НастройкиСервиса.УчетПотерянныхПродаж = 1);
	
	ОписаниеДопРеквизитов = ДопРеквизитыКоллекции(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи);
	
	РеквизитыОбъектаВсеТекстом = ОписаниеДопРеквизитов.РеквизитыОбъектаВсеТекстом;
	ВсеДопРеквизитыСвойства = ОписаниеДопРеквизитов.ВсеДопРеквизитыСвойства;
	ВсеДопРеквизитыКлючи = ОписаниеДопРеквизитов.ВсеДопРеквизитыКлючи;
	ДопРеквизитыПоМетаданным = ОписаниеДопРеквизитов.ДопРеквизитыПоМетаданным;
	
	ЕстьДопРеквизиты = ВсеДопРеквизитыКлючи.Количество() > 0 И ПолучитьДополнительныеРеквизиты;
	
	ТекстШаблонаЗапроса1 = ТекстЗапросаКоллекцииПродажШаблонСоединенияСДокументомСДопРеквизитами();
	ТекстШаблонаЗапроса2 = ТекстЗапросаКоллекцииПродажШаблонСоединенияСДокументомБезДопРеквизитов();
	
	ТекстОбъединения = "
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	ТекстРазделительЗапросов = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстыЧастейЗапросаПоДокументам = Новый Массив;
	Для Каждого ОписаниеДопРеквизитовМетаданного Из ДопРеквизитыПоМетаданным Цикл
		ИспользоватьДопРеквизиты = ПолучитьДополнительныеРеквизиты
			И ОписаниеДопРеквизитовМетаданного.Значение.ЕстьТаблицаДопРеквизитов;
		ТекстШаблона = ?(ИспользоватьДопРеквизиты, ТекстШаблонаЗапроса1, ТекстШаблонаЗапроса2);
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "&Документ_ИмяДокумента_Реквизиты,",
			ОписаниеДопРеквизитовМетаданного.Значение.РеквизитыОбъектаТекстом);
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "&ПолноеИмяДокументаДополнительныеРеквизиты",
			ОписаниеДопРеквизитовМетаданного.Значение.ПолноеИмяОбъектаМетаданных + ".ДополнительныеРеквизиты");
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "&ПолноеИмяДокумента",
			ОписаниеДопРеквизитовМетаданного.Значение.ПолноеИмяОбъектаМетаданных);
		Если ТекстыЧастейЗапросаПоДокументам.Количество() = 0 Тогда
			ТекстШаблона = СтрЗаменить(ТекстШаблона,
				"
				|ИЗ",
				"
				|ПОМЕСТИТЬ ВТОстаткиФактическиеСДопРеквизитами
				|ИЗ");
		КонецЕсли;
		ТекстыЧастейЗапросаПоДокументам.Добавить(ТекстШаблона);
	КонецЦикла;
	ТекстЗапросаПоДокументам = СтрСоединить(ТекстыЧастейЗапросаПоДокументам, ТекстОбъединения);
	
	ТекстыЧастейЗапроса = Новый Массив;
	
	// 1. Извлечение потерянных продаж.
	Если УчитыватьПотерянныеЗаказы Тогда
		ТекстЧастьЗапроса = ТекстЗапросаКоллекцииПродажВТНевыполненныхЗаказов();
		ТекстыЧастейЗапроса.Добавить(ТекстЧастьЗапроса);
	КонецЕсли;
	
	// 2. Извлечение данных о продажах (ВыручкаИСебестоимостьПродаж) и подменных продажах (ПланыПродаж).
	ТекстЧастьЗапроса = ТекстЗапросаКоллекцииПродажВТОстатки(УчитыватьПотерянныеЗаказы);
	ТекстЧастьЗапроса = СтрЗаменить(ТекстЧастьЗапроса, "&Документ_ПланПродаж_Реквизиты,",
		ДопРеквизитыПоМетаданным.Документ_ПланПродаж.РеквизитыОбъектаТекстом);
	ТекстыЧастейЗапроса.Добавить(ТекстЧастьЗапроса);
	
	// 3. Извлечение доп. реквизитов из документов-регистраторов.
	ТекстыЧастейЗапроса.Добавить(ТекстЗапросаПоДокументам);
	
	// 4. Финальное объединение данных и группировка.
	ТекстЧастьЗапроса = ТекстЗапросаКоллекцииПродажЗавершение();
	Если ПоместитьРезультатВоВременнуюТаблицу Тогда
		ТекстЧастьЗапроса = ТекстЧастьЗапроса + "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОстаткиФактическиеСДопРеквизитами
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОстаткиПлановыеСДопРеквизитами";
	Иначе
		ТекстЧастьЗапроса = СтрЗаменить(ТекстЧастьЗапроса, "ПОМЕСТИТЬ ВТКоллекцияПродаж", "");
		ТекстЧастьЗапроса = ТекстЧастьЗапроса + 
		"
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Номенклатура,
		|	КодСклада";
	КонецЕсли;
	
	ТекстыЧастейЗапроса.Добавить(ТекстЧастьЗапроса);
	
	ТекстЗапроса = СтрСоединить(ТекстыЧастейЗапроса, ТекстРазделительЗапросов);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитыВсе,", РеквизитыОбъектаВсеТекстом);
	
	НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	
	ОтборНоменклатуры = ПолучитьОтборНоменклатуры(НастройкиОтборов, НастройкиСервиса);
	ОтборПартнеров    = ПолучитьОтборПартнеров(НастройкиОтборов);
	ОтборСкладов      = ПолучитьОтборСкладов(НастройкиОтборов);
	ОтборОрганизаций  = ПолучитьОтборОрганизаций(НастройкиОтборов);
	ОтборДокументов   = ПолучитьОтборДокументов(НастройкиОтборов);
	ОтборОпераций     = ПолучитьОтборОпераций(НастройкиОтборов);
	
	Если ДиапазонДатДляВыгрузки = Неопределено Тогда
		ДатаНачалаПродаж = ПолучитьДатыНачалаОкончанияПродаж(НастройкиСервиса, Ложь).ДатаНачалаПродаж;
		ДиапазонДатДляВыгрузки = СервисПрогнозирования.ДиапазонДатДляВыгрузки(
			Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи, НастройкиСервиса, ДатаНачалаПродаж);
	КонецЕсли;
	
	ИспользоватьТолькоПланы = НастройкиСервиса.ИспользоватьПлановыеОстаткиИПродажи
		И Не НастройкиСервиса.ИспользоватьРеальныеОстаткиИПродажи;
	ИспользоватьОстаткиИПланы = НастройкиСервиса.ИспользоватьПлановыеОстаткиИПродажи
		И НастройкиСервиса.ИспользоватьРеальныеОстаткиИПродажи;
	ПустойИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Запрос.УстановитьПараметр("ДатаНачала",                    ДиапазонДатДляВыгрузки.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",                 ДиапазонДатДляВыгрузки.ДатаОкончания);
	Запрос.УстановитьПараметр("ОтборНоменклатуры",             ОтборНоменклатуры);
	Запрос.УстановитьПараметр("ОтборПартнеров",                ОтборПартнеров);
	Запрос.УстановитьПараметр("ОтборСкладов",                  ОтборСкладов);
	Запрос.УстановитьПараметр("ОтборОрганизаций",              ОтборОрганизаций);
	Запрос.УстановитьПараметр("ОтборПоДокументам",             ОтборДокументов);
	Запрос.УстановитьПараметр("ОтборПоОперациям",              ОтборОпераций);
	Запрос.УстановитьПараметр("УстановленОтборПоНоменклатуре", ЕстьОтборНоменклатуры(НастройкиОтборов));
	Запрос.УстановитьПараметр("УстановленОтборПоПартнерам",    ЕстьОтборПартнеров(НастройкиОтборов));
	Запрос.УстановитьПараметр("УстановленОтборПоСкладам",      ЕстьОтборСкладов(НастройкиОтборов));
	Запрос.УстановитьПараметр("УстановленОтборПоОрганизациям", ЕстьОтборОрганизаций(НастройкиОтборов));
	Запрос.УстановитьПараметр("ИспользоватьТолькоПланы",       ИспользоватьТолькоПланы);
	Запрос.УстановитьПараметр("ИспользоватьОстаткиИПланы",     ИспользоватьОстаткиИПланы);
	Запрос.УстановитьПараметр("СценарийПланов",                НастройкиСервиса.СценарийПрогнозированияФактИПлан);
	Запрос.УстановитьПараметр("ЕстьДопРеквизиты",              ЕстьДопРеквизиты);
	Запрос.УстановитьПараметр("ТребуемыеДопСвойства",          ВсеДопРеквизитыСвойства);
	Запрос.УстановитьПараметр("ПустойИдентификатор",           ПустойИдентификатор);
	Если УчитыватьПотерянныеЗаказы Тогда
		Запрос.УстановитьПараметр("КоэффициентЗаказов", НастройкиСервиса.КоэффициентВосстановленияУчетаПотерянныхПродаж);
	КонецЕсли;
	
	ТекстУпорядочиванияЗапроса = "";
	
	ИнфоОКоллекции = НастройкиСервиса.Коллекции[Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи];
	Если ИнфоОКоллекции.ВложенноеОписание["КодКлиента"].Выгружать Тогда
		ТекстУпорядочиванияЗапроса = ",
			|	Партнер";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Партнер", "Набор.Партнер");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСоединенияСНевыполненнымиЗаказамиПоПартнеру",
			"Продажи.АналитикаУчетаПоПартнерам.Партнер = НевыполненныеЗаказы.Партнер");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УНИКАЛЬНЫЙИДЕНТИФИКАТОР(&Партнер)", "&ПустойИдентификатор");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Партнер", "&ПустойИдентификатор");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСоединенияСНевыполненнымиЗаказамиПоПартнеру", "ИСТИНА");
	КонецЕсли;
	Если ИнфоОКоллекции.ВложенноеОписание["КодХарактеристики"].Выгружать Тогда
		ТекстУпорядочиванияЗапроса = ТекстУпорядочиванияЗапроса + ",
			|	Характеристика";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Характеристика", "Набор.Характеристика");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСоединенияСНевыполненнымиЗаказамиПоХарактеристике",
			"Продажи.АналитикаУчетаНоменклатуры.Характеристика = НевыполненныеЗаказы.Характеристика");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УНИКАЛЬНЫЙИДЕНТИФИКАТОР(&Характеристика)", "&ПустойИдентификатор");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Характеристика", "&ПустойИдентификатор");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСоединенияСНевыполненнымиЗаказамиПоХарактеристике", "ИСТИНА");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстУпорядочиванияЗапроса)
		И Не ПоместитьРезультатВоВременнуюТаблицу Тогда
		ТекстЗапроса = ТекстЗапроса + ТекстУпорядочиванияЗапроса;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Неопределено;
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не ПоместитьРезультатВоВременнуюТаблицу Тогда
		Результат = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Ответ = ОписаниеОтветаПорцииПериодическойКоллекции();
	
	Ответ.ДатаОкончанияВыборкиПорции = ДиапазонДатДляВыгрузки.ДатаОкончания;
	
	Если Не ПоместитьРезультатВоВременнуюТаблицу Тогда
		Ответ.КоличествоДанных = Результат.Количество();
		Если Ответ.КоличествоДанных > 0 Тогда
			Ответ.ДатаПервойЗаписи = Результат[0].Дата;
			Ответ.ДатаПоследнейЗаписи = Результат[Ответ.КоличествоДанных - 1].Дата;
		КонецЕсли;
		
		Если ЕстьДопРеквизиты Тогда
			Ответ.Коллекция = ОбработатьКоллекциюСДопРеквизитами(Результат, ОписаниеДопРеквизитов, Ложь);
		Иначе
			Результат.Колонки.Удалить("Свойство");
			Результат.Колонки.Удалить("Значение");
			Ответ.Коллекция = Результат;
		КонецЕсли;
	Иначе
		Ответ.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Получить коллекцию товаров исходную.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Номенклатура.
Функция ПолучитьКоллекциюТоваровИсходную()
	
	ОтборНоменклатуры = ПолучитьОтборНоменклатуры();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И (НЕ &УстановленОтборПоНоменклатуре
	|		ИЛИ
	|		Номенклатура.Ссылка В ИЕРАРХИИ(&ОтборНоменклатуры))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОтборНоменклатуры", ОтборНоменклатуры);
	Запрос.УстановитьПараметр("УстановленОтборПоНоменклатуре", ОтборНоменклатуры.Количество() > 0);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Получить коллекцию товаров.
// 
// Параметры:
//  НастройкиСервиса - Структура из Произвольный - см. СервисПрогнозирования.ПолучитьНастройкиСервиса
//  ИсходнаяКоллекция - Неопределено, Массив из Произвольный - Исходная коллекция
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
Функция ПолучитьКоллекциюТоваров(НастройкиСервиса, ИсходнаяКоллекция = Неопределено)
	
	Если ИсходнаяКоллекция = Неопределено Тогда
		ИсходнаяКоллекция = ПолучитьКоллекциюТоваровИсходную();
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.Наименование КАК Наименование,
	|	&НеобязательныеРеквизиты
	|ПОМЕСТИТЬ ВТКоллекция
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТоварныеКатегории КАК Категории
	|			ПО &ВыгружатьКатегории
	|				И Категории.Ссылка = Номенклатура.ТоварнаяКатегория
	|ГДЕ
	|	Номенклатура.Ссылка В (&ИсходнаяКоллекция)
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТКоллекция.Номенклатура КАК Ссылка,
	|	ВТКоллекция.Номенклатура КАК Номенклатура,
	|	СокрЛП(ВТКоллекция.Наименование) КАК Наименование,
	|	&НаборНеобязательныхРеквизитов,
	|	&Реквизиты,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ВТКоллекция.Номенклатура) КАК Код,
	|	ДополнительныеРеквизитыОбъекта.Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение
	|ИЗ
	|	ВТКоллекция КАК ВТКоллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаОбъект
	|			ПО ВТКоллекция.Номенклатура = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И ВТКоллекция.Номенклатура = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура";
	
	ОписаниеДопРеквизитов = ДопРеквизитыКоллекции(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары);
	
	РеквизитыОбъектаВсеТекстом = ОписаниеДопРеквизитов.ДопРеквизитыПоМетаданным.Справочник_Номенклатура.РеквизитыОбъектаТекстом;
	ВсеДопРеквизитыСвойства = ОписаниеДопРеквизитов.ВсеДопРеквизитыСвойства;
	ВсеДопРеквизитыКлючи = ОписаниеДопРеквизитов.ВсеДопРеквизитыКлючи;
	
	ЕстьДопРеквизиты = ВсеДопРеквизитыКлючи.Количество() > 0;
	
	ИнфоОКоллекции = НастройкиСервиса.Коллекции[Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары];
	ВыгружатьКодКатегорий          = ИнфоОКоллекции.ВложенноеОписание["КодКатегории"].Выгружать;
	ВыгружатьНаименованиеКатегорий = ИнфоОКоллекции.ВложенноеОписание["НаименованиеКатегории"].Выгружать;
	ВыгружатьВидНоменклатуры       = ИнфоОКоллекции.ВложенноеОписание["КодВидаНоменклатуры"].Выгружать;
	
	Запрос = Новый Запрос();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Реквизиты,", РеквизитыОбъектаВсеТекстом);
	
	СтрокиНеобязательныхРеквизитов      = Новый Массив();
	СтрокиНаборНеобязательныхРеквизитов = Новый Массив();
	
	Если ВыгружатьКодКатегорий Тогда
		ТекстСтрокиРеквизита = "ЕСТЬNULL(Категории.Ссылка, ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)) КАК Категория";
		Если ВыгружатьНаименованиеКатегорий Или ВыгружатьВидНоменклатуры Тогда
			ТекстСтрокиРеквизита = ТекстСтрокиРеквизита + ",";
		КонецЕсли;
		СтрокиНеобязательныхРеквизитов.Добавить(ТекстСтрокиРеквизита);
		СтрокиНаборНеобязательныхРеквизитов.Добавить("ВТКоллекция.Категория,");
		СтрокиНаборНеобязательныхРеквизитов.Добавить("УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ВТКоллекция.Категория) КАК КодКатегории,");
	КонецЕсли;
	Если ВыгружатьНаименованиеКатегорий Тогда
		ТекстСтрокиРеквизита = "ЕСТЬNULL(Категории.Наименование, """") КАК НаименованиеКатегории";
		Если ВыгружатьВидНоменклатуры Тогда
			ТекстСтрокиРеквизита = ТекстСтрокиРеквизита + ",";
		КонецЕсли;
		СтрокиНеобязательныхРеквизитов.Добавить(ТекстСтрокиРеквизита);
		СтрокиНаборНеобязательныхРеквизитов.Добавить("СокрЛП(ВТКоллекция.НаименованиеКатегории) КАК НаименованиеКатегории,");
	КонецЕсли;
	Если ВыгружатьВидНоменклатуры Тогда
		СтрокиНеобязательныхРеквизитов.Добавить(
			"ЕСТЬNULL(Номенклатура.ВидНоменклатуры, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)) КАК ВидНоменклатуры");
		СтрокиНаборНеобязательныхРеквизитов.Добавить("ВТКоллекция.ВидНоменклатуры,");
		СтрокиНаборНеобязательныхРеквизитов.Добавить("УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ВТКоллекция.ВидНоменклатуры) КАК КодВидаНоменклатуры,");
	КонецЕсли;
	
	КоличествоСтрокРеквизитов = СтрокиНеобязательныхРеквизитов.Количество();
	Если КоличествоСтрокРеквизитов = 0 Тогда
		// Удаление лишней запятой последнего стандартного поля выборки.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Наименование КАК Наименование,", "Наименование КАК Наименование");
		ТекстЗапросаНеобязательныеРеквизиты           = "";
		ТекстЗапросаНаборНеобязательныхРеквизитов     = "";
	Иначе
		Если КоличествоСтрокРеквизитов > 1 Тогда
			ТекстЗапросаНеобязательныеРеквизиты       = СтрСоединить(
				СтрокиНеобязательныхРеквизитов, Символы.ПС + Символы.Таб);
		Иначе
			ТекстЗапросаНеобязательныеРеквизиты       = СтрокиНеобязательныхРеквизитов[0];
		КонецЕсли;
		Если СтрокиНаборНеобязательныхРеквизитов.Количество() > 1 Тогда
			ТекстЗапросаНаборНеобязательныхРеквизитов = СтрСоединить(
				СтрокиНаборНеобязательныхРеквизитов, Символы.ПС + Символы.Таб);
		Иначе
			ТекстЗапросаНаборНеобязательныхРеквизитов = СтрокиНаборНеобязательныхРеквизитов[0];
		КонецЕсли;
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НеобязательныеРеквизиты",        ТекстЗапросаНеобязательныеРеквизиты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НаборНеобязательныхРеквизитов,", ТекстЗапросаНаборНеобязательныхРеквизитов);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ПустойИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Запрос.УстановитьПараметр("ВыгружатьКатегории",   ВыгружатьКодКатегорий Или ВыгружатьНаименованиеКатегорий);
	Запрос.УстановитьПараметр("ИсходнаяКоллекция",    ИсходнаяКоллекция);
	Запрос.УстановитьПараметр("ЕстьДопРеквизиты",     ЕстьДопРеквизиты);
	Запрос.УстановитьПараметр("ТребуемыеДопСвойства", ВсеДопРеквизитыСвойства);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЕстьДопРеквизиты Тогда
		Коллекция = ОбработатьКоллекциюСДопРеквизитами(Результат, ОписаниеДопРеквизитов);
	Иначе
		Результат.Колонки.Удалить("Свойство");
		Результат.Колонки.Удалить("Значение");
		Коллекция = Результат;
	КонецЕсли;
	
	Возврат Коллекция;
	
КонецФункции

// Получить коллекцию товаров исходную.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ХарактеристикиНоменклатуры.
Функция ПолучитьКоллекциюХарактеристикИсходную()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	НЕ ХарактеристикиНоменклатуры.ПометкаУдаления";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

// Получить коллекцию товаров.
// 
// Параметры:
//  ИсходнаяКоллекция - Неопределено, Массив из Произвольный - Исходная коллекция
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
Функция ПолучитьКоллекциюХарактеристикНоменклатуры(ИсходнаяКоллекция)
	
	Если ИсходнаяКоллекция = Неопределено Тогда
		ИсходнаяКоллекция = ПолучитьКоллекциюХарактеристикИсходную();
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка          КАК Характеристика,
	|	ХарактеристикиНоменклатуры.Наименование    КАК Наименование,
	|	ХарактеристикиНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ВТКоллекция
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Ссылка В (&ИсходнаяКоллекция)
	|ИНДЕКСИРОВАТЬ ПО
	|	Характеристика
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТКоллекция.Характеристика КАК Ссылка,
	|	ВТКоллекция.Характеристика КАК Характеристика,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ВТКоллекция.Характеристика) КАК Код,
	|	&Реквизиты,
	|	СокрЛП(ВТКоллекция.Наименование) КАК Наименование,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ВТКоллекция.ВидНоменклатуры) КАК КодВидаНоменклатуры,
	|	ДополнительныеРеквизитыОбъекта.Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение
	|ИЗ
	|	ВТКоллекция КАК ВТКоллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ТаблицаОбъект
	|			ПО ВТКоллекция.Характеристика = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И ВТКоллекция.Характеристика = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Характеристика";
	
	ОписаниеДопРеквизитов = ДопРеквизитыКоллекции(Перечисления.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры);
	
	РеквизитыОбъектаВсеТекстом = ОписаниеДопРеквизитов.ДопРеквизитыПоМетаданным.Справочник_ХарактеристикиНоменклатуры.РеквизитыОбъектаТекстом;
	ВсеДопРеквизитыСвойства = ОписаниеДопРеквизитов.ВсеДопРеквизитыСвойства;
	ВсеДопРеквизитыКлючи = ОписаниеДопРеквизитов.ВсеДопРеквизитыКлючи;
	
	ЕстьДопРеквизиты = ВсеДопРеквизитыКлючи.Количество() > 0;
	
	Запрос = Новый Запрос();
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&Реквизиты,", РеквизитыОбъектаВсеТекстом);
	
	Запрос.УстановитьПараметр("ИсходнаяКоллекция", ИсходнаяКоллекция);
	Запрос.УстановитьПараметр("ЕстьДопРеквизиты", ЕстьДопРеквизиты);
	Запрос.УстановитьПараметр("ТребуемыеДопСвойства", ВсеДопРеквизитыСвойства);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЕстьДопРеквизиты Тогда
		Коллекция = ОбработатьКоллекциюСДопРеквизитами(Результат, ОписаниеДопРеквизитов);
	Иначе
		Результат.Колонки.Удалить("Свойство");
		Результат.Колонки.Удалить("Значение");
		Коллекция = Результат;
	КонецЕсли;
	
	Возврат Коллекция;
	
КонецФункции

Функция ПолучитьКоллекциюПокупателейИсходную()
	
	ОтборПартнеров = ПолучитьОтборПартнеров();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Партнеры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	НЕ Партнеры.ПометкаУдаления
	|	И (НЕ &УстановленОтборПоПартнерам
	|		ИЛИ
	|		Партнеры.Ссылка В ИЕРАРХИИ(&ОтборПартнеров))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОтборПартнеров", ОтборПартнеров);
	Запрос.УстановитьПараметр("УстановленОтборПоПартнерам", ОтборПартнеров.Количество() > 0);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьКоллекциюПокупателей(ИсходнаяКоллекция = Неопределено)
	
	Если ИсходнаяКоллекция = Неопределено Тогда
		ИсходнаяКоллекция = ПолучитьКоллекциюПокупателейИсходную();
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Партнеры.Ссылка КАК Партнер
	|ПОМЕСТИТЬ ВТКоллекция
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка В (&ИсходнаяКоллекция)
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТКоллекция.Партнер КАК Ссылка,
	|	ВТКоллекция.Партнер КАК Партнер,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ВТКоллекция.Партнер) КАК КодПокупателя,
	|	&Реквизиты,
	|	ДополнительныеРеквизитыОбъекта.Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение
	|ИЗ
	|	ВТКоллекция КАК ВТКоллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК ТаблицаОбъект
	|			ПО ВТКоллекция.Партнер = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И ВТКоллекция.Партнер = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Партнер";
	
	ОписаниеДопРеквизитов = ДопРеквизитыКоллекции(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели);
	
	РеквизитыОбъектаВсеТекстом = ОписаниеДопРеквизитов.ДопРеквизитыПоМетаданным.Справочник_Партнеры.РеквизитыОбъектаТекстом;
	ВсеДопРеквизитыСвойства = ОписаниеДопРеквизитов.ВсеДопРеквизитыСвойства;
	ВсеДопРеквизитыКлючи = ОписаниеДопРеквизитов.ВсеДопРеквизитыКлючи;
	
	ЕстьДопРеквизиты = ВсеДопРеквизитыКлючи.Количество() > 0;
	
	Запрос = Новый Запрос();
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&Реквизиты,", РеквизитыОбъектаВсеТекстом);
	
	Запрос.УстановитьПараметр("ИсходнаяКоллекция", ИсходнаяКоллекция);
	Запрос.УстановитьПараметр("ЕстьДопРеквизиты", ЕстьДопРеквизиты);
	Запрос.УстановитьПараметр("ТребуемыеДопСвойства", ВсеДопРеквизитыСвойства);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЕстьДопРеквизиты Тогда
		Коллекция = ОбработатьКоллекциюСДопРеквизитами(Результат, ОписаниеДопРеквизитов);
	Иначе
		Результат.Колонки.Удалить("Свойство");
		Результат.Колонки.Удалить("Значение");
		Коллекция = Результат;
	КонецЕсли;
	
	Возврат Коллекция;
	
КонецФункции

Функция ПолучитьКоллекциюСкладовИсходную()
	
	ОтборСкладов = ПолучитьОтборСкладов();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ПометкаУдаления
	|	И (НЕ &УстановленОтборПоСкладам
	|		ИЛИ
	|		Склады.Ссылка В ИЕРАРХИИ(&ОтборСкладов))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОтборСкладов", ОтборСкладов);
	Запрос.УстановитьПараметр("УстановленОтборПоСкладам", ОтборСкладов.Количество() > 0);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьКоллекциюСкладов(ИсходнаяКоллекция = Неопределено)
	
	Если ИсходнаяКоллекция = Неопределено Тогда
		ИсходнаяКоллекция = ПолучитьКоллекциюСкладовИсходную();
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад
	|ПОМЕСТИТЬ ВТКоллекция
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В (&ИсходнаяКоллекция)
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТКоллекция.Склад КАК Ссылка,
	|	ВТКоллекция.Склад КАК Склад,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ВТКоллекция.Склад) КАК КодСклада,
	|	&Реквизиты,
	|	ДополнительныеРеквизитыОбъекта.Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение
	|ИЗ
	|	ВТКоллекция КАК ВТКоллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК ТаблицаОбъект
	|			ПО ВТКоллекция.Склад = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И ВТКоллекция.Склад = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Склад";
	
	ОписаниеДопРеквизитов = ДопРеквизитыКоллекции(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Склады);
	
	РеквизитыОбъектаВсеТекстом = ОписаниеДопРеквизитов.ДопРеквизитыПоМетаданным.Справочник_Склады.РеквизитыОбъектаТекстом;
	ВсеДопРеквизитыСвойства = ОписаниеДопРеквизитов.ВсеДопРеквизитыСвойства;
	ВсеДопРеквизитыКлючи = ОписаниеДопРеквизитов.ВсеДопРеквизитыКлючи;
	
	ЕстьДопРеквизиты = ВсеДопРеквизитыКлючи.Количество() > 0;
	
	Запрос = Новый Запрос();
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&Реквизиты,", РеквизитыОбъектаВсеТекстом);
	
	Запрос.УстановитьПараметр("ИсходнаяКоллекция", ИсходнаяКоллекция);
	Запрос.УстановитьПараметр("ЕстьДопРеквизиты", ЕстьДопРеквизиты);
	Запрос.УстановитьПараметр("ТребуемыеДопСвойства", ВсеДопРеквизитыСвойства);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЕстьДопРеквизиты Тогда
		Коллекция = ОбработатьКоллекциюСДопРеквизитами(Результат, ОписаниеДопРеквизитов);
	Иначе
		Результат.Колонки.Удалить("Свойство");
		Результат.Колонки.Удалить("Значение");
		Коллекция = Результат;
	КонецЕсли;
	
	Возврат Коллекция;
	
КонецФункции

// Получить коллекцию остатков.
// 
// Параметры:
//  ДиапазонДатДляВыгрузки - Неопределено, Структура - Диапазон дат для выгрузки:
// * ДатаНачала - Дата -
// * ДатаОкончания - Дата -
// 
// Возвращаемое значение:
//  см. ОписаниеОтветаПорцииПериодическойКоллекции.
Функция ПолучитьКоллекциюОстатков(ДиапазонДатДляВыгрузки = Неопределено)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ОстаткиИОбороты.ВНаличииКонечныйОстаток) КАК Количество,
	|	ОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ОстаткиИОбороты.Номенклатура) КАК КодТовара,
	|	ОстаткиИОбороты.Склад КАК Склад,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ОстаткиИОбороты.Склад) КАК КодСклада,
	|	НАЧАЛОПЕРИОДА(ОстаткиИОбороты.Период, ДЕНЬ) КАК Дата
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, День, , 
	|		(НЕ &УстановленОтборПоНоменклатуре ИЛИ Номенклатура В (&ОтборНоменклатуры))
	|		И (НЕ &УстановленОтборПоСкладам ИЛИ Склад В (&ОтборСкладов))) КАК ОстаткиИОбороты
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОстаткиИОбороты.Период, ДЕНЬ),
	|	ОстаткиИОбороты.Склад,
	|	ОстаткиИОбороты.Номенклатура
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номенклатура,
	|	Склад";
	
	ОтборНоменклатуры = ПолучитьОтборНоменклатуры();
	ОтборСкладов = ПолучитьОтборСкладов();
	
	Если ДиапазонДатДляВыгрузки = Неопределено Тогда
		ДатыОстатков = ПолучитьДатыНачалаОкончанияОстатков();
		ДиапазонДатДляВыгрузки = СервисПрогнозирования.ДиапазонДатДляВыгрузки(
			Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки, Неопределено, ДатыОстатков.ДатаНачалаОстатков);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДиапазонДатДляВыгрузки.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДиапазонДатДляВыгрузки.ДатаОкончания);
	
	Запрос.УстановитьПараметр("ОтборНоменклатуры", ОтборНоменклатуры);
	Запрос.УстановитьПараметр("УстановленОтборПоНоменклатуре", ОтборНоменклатуры.Количество() > 0);
	Запрос.УстановитьПараметр("ОтборСкладов", ОтборСкладов);
	Запрос.УстановитьПараметр("УстановленОтборПоСкладам", ОтборСкладов.Количество() > 0);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Ответ = ОписаниеОтветаПорцииПериодическойКоллекции();
	Ответ.Коллекция = Результат;
	Ответ.КоличествоДанных = Результат.Количество();
	Ответ.ДатаОкончанияВыборкиПорции = ДиапазонДатДляВыгрузки.ДатаОкончания;
	
	Если Ответ.КоличествоДанных > 0 Тогда
		Ответ.ДатаПервойЗаписи = Результат[0].Дата;
		Ответ.ДатаПоследнейЗаписи = Результат[Ответ.КоличествоДанных - 1].Дата;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьКоллекциюПромоАкций(НастройкиСервиса, ДиапазонДатДляВыгрузки = Неопределено)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДиапазонДат.Дата, ДЕНЬ) КАК Дата
	|ПОМЕСТИТЬ ВТДиапазонДат
	|ИЗ
	|	&ДиапазонСгенерированныхДат КАК ДиапазонДат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА МаркетинговыеМероприятия.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НАЧАЛОПЕРИОДА(МаркетинговыеМероприятия.ПлановаяДатаНачала, ДЕНЬ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(МаркетинговыеМероприятия.ДатаНачала, ДЕНЬ)
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА МаркетинговыеМероприятия.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НАЧАЛОПЕРИОДА(МаркетинговыеМероприятия.ПлановаяДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(МаркетинговыеМероприятия.ДатаОкончания, ДЕНЬ)
	|	КОНЕЦ КАК ДатаОкончания,
	|	СокрЛП(МаркетинговыеМероприятия.Наименование) КАК Наименование,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
	|	ПартнерыСегмента.Партнер КАК Партнер,
	|	НоменклатураСегмента.Номенклатура КАК Номенклатура,
	|	НоменклатураСегмента.Характеристика КАК Характеристика,
	|	0 КАК Скидка,
	|	""activity"" КАК Тип
	|ПОМЕСТИТЬ ВТКоллекцияАкций
	|ИЗ
	|	Справочник.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|		ПО МаркетинговыеМероприятия.СегментНоменклатуры = НоменклатураСегмента.Сегмент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|		ПО МаркетинговыеМероприятия.СегментПартнеров = ПартнерыСегмента.Сегмент
	|ГДЕ
	|	НЕ МаркетинговыеМероприятия.ПометкаУдаления
	|	И (НЕ &УстановленОтборПоНоменклатуре
	|		ИЛИ НоменклатураСегмента.Номенклатура ЕСТЬ NULL
	|		ИЛИ НоменклатураСегмента.Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|	И (НЕ &УстановленОтборПоПартнерам
	|		ИЛИ ПартнерыСегмента.Партнер ЕСТЬ NULL
	|		ИЛИ ПартнерыСегмента.Партнер В ИЕРАРХИИ (&ОтборПартнеров))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(Набор.ДатаНачала) КАК ДатаНачала,
	|	МАКСИМУМ(Набор.ДатаОкончания) КАК ДатаОкончания,
	|	СокрЛП(Набор.СкидкаНаценка.Наименование) КАК Наименование,
	|	ВЫБОР
	|		КОГДА Набор.Источник ССЫЛКА Справочник.Склады
	|			ТОГДА Набор.Источник
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ВЫБОР
	|		КОГДА Набор.Источник ССЫЛКА Справочник.СоглашенияСКлиентами
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Набор.Источник КАК Справочник.СоглашенияСКлиентами).Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|						ТОГДА Набор.Источник
	|					ИНАЧЕ ПартнерыСегмента.Партнер
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|	КОНЕЦ КАК Партнер,
	|	ДействиеСкидокНаценокПоНоменклатуре.Номенклатура КАК Номенклатура,
	|	ДействиеСкидокНаценокПоНоменклатуре.Характеристика КАК Характеристика,
	|	Набор.Скидка КАК Скидка,
	|	""discount"" КАК Тип
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ДействиеСкидокНаценок.Период, ДЕНЬ) КАК ДатаНачала,
	|		НЕОПРЕДЕЛЕНО КАК ДатаОкончания,
	|		ДействиеСкидокНаценок.Источник КАК Источник,
	|		ДействиеСкидокНаценок.СкидкаНаценка КАК СкидкаНаценка,
	|		ДействиеСкидокНаценок.СкидкаНаценка.ЗначениеСкидкиНаценки КАК Скидка,
	|		ДействиеСкидокНаценок.Статус КАК Статус,
	|		ДействиеСкидокНаценок.СегментПартнеров КАК СегментПартнеров
	|	ИЗ
	|		РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
	|	ГДЕ
	|		ДействиеСкидокНаценок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|		И ДействиеСкидокНаценок.СкидкаНаценка.ЗначениеСкидкиНаценки >= 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НЕОПРЕДЕЛЕНО,
	|		НАЧАЛОПЕРИОДА(ДействиеСкидокНаценок.Период, ДЕНЬ),
	|		ДействиеСкидокНаценок.Источник,
	|		ДействиеСкидокНаценок.СкидкаНаценка,
	|		ДействиеСкидокНаценок.СкидкаНаценка.ЗначениеСкидкиНаценки,
	|		ДействиеСкидокНаценок.Статус,
	|		ДействиеСкидокНаценок.СегментПартнеров
	|	ИЗ
	|		РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
	|	ГДЕ
	|		ДействиеСкидокНаценок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.НеДействует)
	|		И ДействиеСкидокНаценок.СкидкаНаценка.ЗначениеСкидкиНаценки >= 0) КАК Набор
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|	ПО (Набор.Источник ССЫЛКА Справочник.СоглашенияСКлиентами)
	|		И (ВЫРАЗИТЬ(Набор.Источник КАК Справочник.СоглашенияСКлиентами).Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
	|		И (ПартнерыСегмента.Сегмент = ВЫРАЗИТЬ(Набор.Источник КАК Справочник.СоглашенияСКлиентами).СегментПартнеров)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеСкидокНаценокПоНоменклатуре КАК ДействиеСкидокНаценокПоНоменклатуре
	|	ПО Набор.СкидкаНаценка = ДействиеСкидокНаценокПоНоменклатуре.Источник
	|ГДЕ
	|	(НЕ &УстановленОтборПоНоменклатуре
	|		ИЛИ ДействиеСкидокНаценокПоНоменклатуре.Номенклатура ЕСТЬ NULL
	|		ИЛИ ДействиеСкидокНаценокПоНоменклатуре.Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|	И (НЕ &УстановленОтборПоПартнерам
	|		ИЛИ (ВЫБОР
	|			КОГДА Набор.Источник ССЫЛКА Справочник.СоглашенияСКлиентами
	|				ТОГДА ВЫБОР
	|						КОГДА ВЫРАЗИТЬ(Набор.Источник КАК Справочник.СоглашенияСКлиентами).Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|							ТОГДА Набор.Источник
	|						ИНАЧЕ ПартнерыСегмента.Партнер
	|					КОНЕЦ
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			КОНЕЦ ЕСТЬ NULL)
	|		ИЛИ (ВЫБОР
	|			КОГДА Набор.Источник ССЫЛКА Справочник.СоглашенияСКлиентами
	|				ТОГДА ВЫБОР
	|						КОГДА ВЫРАЗИТЬ(Набор.Источник КАК Справочник.СоглашенияСКлиентами).Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|							ТОГДА Набор.Источник
	|						ИНАЧЕ ПартнерыСегмента.Партнер
	|					КОНЕЦ
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|		КОНЕЦ В ИЕРАРХИИ (&ОтборПартнеров)))
	|	И (НЕ &УстановленОтборПоСкладам
	|		ИЛИ ПартнерыСегмента.Партнер ЕСТЬ NULL
	|		ИЛИ ПартнерыСегмента.Партнер В ИЕРАРХИИ (&ОтборСкладов))
	|
	|СГРУППИРОВАТЬ ПО
	|	Набор.Источник,
	|	Набор.Статус,
	|	Набор.СкидкаНаценка,
	|	Набор.СегментПартнеров,
	|	ВЫБОР
	|		КОГДА Набор.Источник ССЫЛКА Справочник.Склады
	|			ТОГДА Набор.Источник
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Набор.Источник ССЫЛКА Справочник.СоглашенияСКлиентами
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Набор.Источник КАК Справочник.СоглашенияСКлиентами).Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|						ТОГДА Набор.Источник
	|					ИНАЧЕ ПартнерыСегмента.Партнер
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ДействиеСкидокНаценокПоНоменклатуре.Номенклатура,
	|	ДействиеСкидокНаценокПоНоменклатуре.Характеристика,
	|	Набор.Скидка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДиапазонДат.Дата КАК Дата,
	|	Набор.Наименование КАК Наименование,
	|	Набор.Склад КАК Склад,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Набор.Склад) КАК КодСклада,
	|	&Партнер КАК Партнер,
	|	&КодКлиента КАК КодКлиента,
	|	Набор.Номенклатура КАК Номенклатура,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Набор.Номенклатура) КАК КодТовара,
	|	&Характеристика КАК Характеристика,
	|	&КодХарактеристики КАК КодХарактеристики,
	|	СУММА(Набор.Скидка) КАК Скидка,
	|	Набор.Тип КАК Тип
	|ИЗ
	|	ВТКоллекцияАкций КАК Набор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДиапазонДат КАК ДиапазонДат
	|		ПО Набор.ДатаНачала <= ДиапазонДат.Дата
	|			И Набор.ДатаОкончания >= ДиапазонДат.Дата
	|ГДЕ
	|	ДиапазонДат.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	ДиапазонДат.Дата,
	|	Набор.Наименование,
	|	Набор.Склад,
	|	&Партнер,
	|	Набор.Номенклатура,
	|	&Характеристика,
	|	Набор.Тип
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Тип,
	|	Склад,
	|	Номенклатура
	|";
	
	ОтборНоменклатуры = ПолучитьОтборНоменклатуры(Неопределено, НастройкиСервиса);
	ОтборПартнеров    = ПолучитьОтборПартнеров();
	ОтборСкладов      = ПолучитьОтборСкладов();
	
	ДатыНачалаОкончания = ПолучитьДатыНачалаОкончанияПромоАкций();
	ДатаНачалаПромо     = ДатыНачалаОкончания.ДатаНачалаПромо;
	Если ДиапазонДатДляВыгрузки = Неопределено Тогда
		ДиапазонДатДляВыгрузки = СервисПрогнозирования.ДиапазонДатДляВыгрузки(
			Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо, НастройкиСервиса, ДатаНачалаПромо);
	КонецЕсли;
	
	ДиапазонСгенерированныхДат = Новый ТаблицаЗначений();
	ДиапазонСгенерированныхДат.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ДобавляемаяДатаДиапазона = ДатаНачалаПромо;
	
	НоваяСтрока = ДиапазонСгенерированныхДат.Добавить();
	НоваяСтрока.Дата = ДобавляемаяДатаДиапазона;
	Пока ДобавляемаяДатаДиапазона < ДатыНачалаОкончания.ДатаОкончанияПромо Цикл
		ДобавляемаяДатаДиапазона = КонецДня(ДобавляемаяДатаДиапазона) + 1;
		НоваяСтрока = ДиапазонСгенерированныхДат.Добавить();
		НоваяСтрока.Дата = ДобавляемаяДатаДиапазона;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ДатаНачала",                 ДиапазонДатДляВыгрузки.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",              ДиапазонДатДляВыгрузки.ДатаОкончания);
	Запрос.УстановитьПараметр("ДиапазонСгенерированныхДат", ДиапазонСгенерированныхДат);
	
	Запрос.УстановитьПараметр("ОтборНоменклатуры",             ОтборНоменклатуры);
	Запрос.УстановитьПараметр("ОтборПартнеров",                ОтборПартнеров);
	Запрос.УстановитьПараметр("ОтборСкладов",                  ОтборСкладов);
	Запрос.УстановитьПараметр("УстановленОтборПоНоменклатуре", ОтборНоменклатуры.Количество() > 0);
	Запрос.УстановитьПараметр("УстановленОтборПоПартнерам",    ОтборПартнеров.Количество() > 0);
	Запрос.УстановитьПараметр("УстановленОтборПоСкладам",      ОтборСкладов.Количество() > 0);
	
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.УстановитьПараметр("ПустойИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	ИнфоОКоллекции = НастройкиСервиса.Коллекции[Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи];
	Если ИнфоОКоллекции.ВложенноеОписание["КодКлиента"].Выгружать Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Партнер", "Набор.Партнер");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КодКлиента", "УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Набор.Партнер)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Партнер", "&ПустаяСтрока");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КодКлиента", "&ПустойИдентификатор");
	КонецЕсли;
	Если ИнфоОКоллекции.ВложенноеОписание["КодХарактеристики"].Выгружать Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Характеристика", "Набор.Характеристика");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КодХарактеристики", "УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Набор.Характеристика)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Характеристика", "&ПустаяСтрока");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КодХарактеристики", "&ПустойИдентификатор");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Ответ = ОписаниеОтветаПорцииПериодическойКоллекции();
	Ответ.Коллекция = Результат;
	Ответ.КоличествоДанных = Результат.Количество();
	Ответ.ДатаОкончанияВыборкиПорции = ДиапазонДатДляВыгрузки.ДатаОкончания;
	
	Если Ответ.КоличествоДанных > 0 Тогда
		Ответ.ДатаПервойЗаписи = Результат[0].Дата;
		Ответ.ДатаПоследнейЗаписи = Результат[Ответ.КоличествоДанных - 1].Дата;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Получить количество дней продаж самого популярного товара.
// 
// Параметры:
//  НастройкиСервиса - См. СервисПрогнозирования.ПолучитьНастройкиСервиса.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
// 
// Возвращаемое значение:
//  Структура - Получить максимальную частоту продажи товара:
// * ПериодовПродаж - Число - 
Функция ПолучитьКоличествоДнейПродажПопулярнейшегоТовара(НастройкиСервиса, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ Набор.Дата) КАК ДнейПродаж,
	|	Набор.Номенклатура КАК Номенклатура
	|ИЗ
	|	ВТКоллекцияПродаж КАК Набор
	|СГРУППИРОВАТЬ ПО
	|	Набор.Номенклатура
	|УПОРЯДОЧИТЬ ПО
	|	ДнейПродаж УБЫВ";
	
	ПериодовПродаж = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ПериодовПродаж = ПериодовПродаж + Выборка.ДнейПродаж;
	КонецЦикла;
	
	Ответ = Новый Структура("ПериодовПродаж", ПериодовПродаж);
	
	Возврат Ответ;
	
КонецФункции

// Получить долю отрицательных продаж.
// Под отрицательными продажами подразумеваются Возвраты товаров и движения корректировочных документов.
// 
// Параметры:
//  НастройкиСервиса - См. СервисПрогнозирования.ПолучитьНастройкиСервиса.
//  ДиапазонДатДляВыгрузки - Неопределено, Структура из Дата - см. СервисПрогнозирования.ДиапазонДатДляВыгрузки
// 
// Возвращаемое значение:
//  Структура - Получить максимальную частоту продажи товара:
// * ПроцентОтрицательныхЗаписей - Число - 
Функция ПолучитьДолюОтрицательныхПродаж(НастройкиСервиса, ДиапазонДатДляВыгрузки)
	
	Запрос = Новый Запрос();
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(НаборДанных.КоличествоДнейПродаж) КАК КоличествоДнейПродаж,
	|	НаборДанных.ЭтоВозврат КАК ЭтоВозврат
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК ЭтоПланПродаж,
	|		КОЛИЧЕСТВО(1) КАК КоличествоДнейПродаж,
	|		ЛОЖЬ КАК ЭтоВозврат
	|	ИЗ
	|		РегистрНакопления.ПланыПродаж.Обороты(&ДатаНачала, &ДатаОкончания, РЕГИСТРАТОР, (&ИспользоватьТолькоПланы
	|		ИЛИ &ИспользоватьОстаткиИПланы)
	|		И Сценарий = &СценарийПланов
	|		И &УсловияОтборовНаВыгрузкуПланов) КАК Продажи
	|	ГДЕ
	|		Продажи.КоличествоОборот > 0
	|	СГРУППИРОВАТЬ ПО
	|		Продажи.Номенклатура,
	|		Продажи.Характеристика,
	|		Продажи.Партнер,
	|		Продажи.Склад
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ИСТИНА КАК ЭтоПланПродаж,
	|		КОЛИЧЕСТВО(1) КАК КоличествоДнейПродаж,
	|		ИСТИНА КАК ЭтоВозврат
	|	ИЗ
	|		РегистрНакопления.ПланыПродаж.Обороты(&ДатаНачала, &ДатаОкончания, РЕГИСТРАТОР, (&ИспользоватьТолькоПланы
	|		ИЛИ &ИспользоватьОстаткиИПланы)
	|		И Сценарий = &СценарийПланов
	|		И &УсловияОтборовНаВыгрузкуПланов) КАК Продажи
	|	ГДЕ
	|		Продажи.КоличествоОборот < 0
	|	СГРУППИРОВАТЬ ПО
	|		Продажи.Номенклатура,
	|		Продажи.Характеристика,
	|		Продажи.Партнер,
	|		Продажи.Склад
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЛОЖЬ КАК ЭтоПланПродаж,
	|		КОЛИЧЕСТВО(1) КАК КоличествоДнейПродаж,
	|		ЛОЖЬ КАК ЭтоВозврат
	|	ИЗ
	|		РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&ДатаНачала, &ДатаОкончания, РЕГИСТРАТОР,
	|		НЕ &ИспользоватьТолькоПланы
	|		И ХозяйственнаяОперация В (&ОтборПоОперациям)
	|		И &УсловияОтборовНаВыгрузкуФактов) КАК Продажи
	|	ГДЕ
	|		Продажи.КоличествоОборот > 0
	|		И ТИПЗНАЧЕНИЯ(Продажи.Регистратор) В (&ОтборПоДокументам)
	|	СГРУППИРОВАТЬ ПО
	|		Продажи.АналитикаУчетаНоменклатуры.Номенклатура,
	|		Продажи.АналитикаУчетаНоменклатуры.Характеристика,
	|		Продажи.АналитикаУчетаПоПартнерам.Партнер,
	|		ВЫБОР
	|			КОГДА Продажи.Склад ССЫЛКА Справочник.Склады
	|				ТОГДА Продажи.Склад
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		КОНЕЦ
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЛОЖЬ КАК ЭтоПланПродаж,
	|		КОЛИЧЕСТВО(1) КАК КоличествоДнейПродаж,
	|		ИСТИНА КАК ЭтоВозврат
	|	ИЗ
	|		РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&ДатаНачала, &ДатаОкончания, РЕГИСТРАТОР,
	|		НЕ &ИспользоватьТолькоПланы
	|		И ХозяйственнаяОперация В (&ОтборПоОперациям)
	|		И &УсловияОтборовНаВыгрузкуФактов) КАК Продажи
	|	ГДЕ
	|		Продажи.КоличествоОборот < 0
	|		И ТИПЗНАЧЕНИЯ(Продажи.Регистратор) В (&ОтборПоДокументам)
	|	СГРУППИРОВАТЬ ПО
	|		Продажи.АналитикаУчетаНоменклатуры.Номенклатура,
	|		Продажи.АналитикаУчетаНоменклатуры.Характеристика,
	|		Продажи.АналитикаУчетаПоПартнерам.Партнер,
	|		ВЫБОР
	|			КОГДА Продажи.Склад ССЫЛКА Справочник.Склады
	|				ТОГДА Продажи.Склад
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		КОНЕЦ) КАК НаборДанных
	|СГРУППИРОВАТЬ ПО
	|	НаборДанных.ЭтоВозврат";
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьОтборыДляЗапросовПоРегистрамПродаж(Запрос, НастройкиСервиса, ДиапазонДатДляВыгрузки);
	
	КоличествоДнейПродаж = 0;
	КоличествоДнейВозвратов = 0;
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоВозврат Тогда
			КоличествоДнейВозвратов = КоличествоДнейВозвратов + Выборка.КоличествоДнейПродаж;
		Иначе
			КоличествоДнейПродаж = КоличествоДнейПродаж + Выборка.КоличествоДнейПродаж;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоДнейПродажВозвратов = (КоличествоДнейПродаж + КоличествоДнейВозвратов);
	КоличествоДнейПродажВозвратов = ?(КоличествоДнейПродажВозвратов = 0, 1, КоличествоДнейПродажВозвратов);
	ПроцентОтрицательныхЗаписей = (КоличествоДнейВозвратов
		/ КоличествоДнейПродажВозвратов) * 100;
	
	Ответ = Новый Структура("ПроцентОтрицательныхЗаписей", ПроцентОтрицательныхЗаписей);
	
	Возврат Ответ;
	
КонецФункции

// Получить количество:
// Различных Номенклатур, которые продавались за период, заданный в настройках.
// Различных Складов, с которых отгружался товар за период, заданный в настройках.
// Различных пар Номенклатура + Склад, которые продавались за период, заданный в настройках.
// Общее количество продаж (с учетом доп. аналитики, такой как Партнеры и Характеристики, если они выгружаются).
// 
// Параметры:
//  НастройкиСервиса - См. СервисПрогнозирования.ПолучитьНастройкиСервиса.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
// 
// Возвращаемое значение:
//  Структура - Получить максимальную частоту продажи товара:
// * КоличествоРазличныхТоваров - Число -
// * КоличествоРазличныхСкладов - Число - 
// * КоличествоПарОбъектов - Число - 
// * КоличествоПродажОбщее - Число - 
Функция ПолучитьКоличествоПродажПоАналитике(НастройкиСервиса, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НаборДанных.Номенклатура) КАК КоличествоТоваров
	|ИЗ
	|	ВТКоллекцияПродаж КАК НаборДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НаборДанных.Склад) КАК КоличествоСкладов
	|ИЗ
	|	ВТКоллекцияПродаж КАК НаборДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(1) КАК КоличествоПарОбъектов
	|ИЗ
	|	ВТКоллекцияПродаж КАК НаборДанных
	|СГРУППИРОВАТЬ ПО
	|	НаборДанных.Номенклатура,
	|	НаборДанных.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(НаборДанных.КоличествоПродаж) КАК КоличествоПродажОбщее
	|ИЗ
	|	ВТКоллекцияПродаж КАК НаборДанных";
	
	КоличествоРазличныхТоваров = 0;
	КоличествоРазличныхСкладов = 0;
	КоличествоПарОбъектов = 0;
	КоличествоПродажОбщее = 0;
	УстановитьПривилегированныйРежим(Истина);
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаКоличествоРазличныхТоваров = ПакетРезультатов[0].Выбрать();
	ВыборкаКоличествоРазличныхСкладов = ПакетРезультатов[1].Выбрать();
	ВыборкаКоличествоПарОбъектов      = ПакетРезультатов[2].Выбрать();
	ВыборкаКоличествоПродажОбщее      = ПакетРезультатов[3].Выбрать();
	
	Если ВыборкаКоличествоРазличныхТоваров.Следующий() Тогда
		КоличествоРазличныхТоваров = ВыборкаКоличествоРазличныхТоваров.КоличествоТоваров;
	КонецЕсли;
	Если ВыборкаКоличествоРазличныхСкладов.Следующий() Тогда
		КоличествоРазличныхТоваров = ВыборкаКоличествоРазличныхСкладов.КоличествоСкладов;
	КонецЕсли;
	Если ВыборкаКоличествоПарОбъектов.Следующий() Тогда
		КоличествоПарОбъектов = ВыборкаКоличествоПарОбъектов.КоличествоПарОбъектов;
	КонецЕсли;
	Если ВыборкаКоличествоПродажОбщее.Следующий() Тогда
		КоличествоПродажОбщее = ВыборкаКоличествоПродажОбщее.КоличествоПродажОбщее;
	КонецЕсли;
	
	Ответ = Новый Структура();
	Ответ.Вставить("КоличествоРазличныхТоваров", КоличествоРазличныхТоваров);
	Ответ.Вставить("КоличествоРазличныхСкладов", КоличествоРазличныхСкладов);
	Ответ.Вставить("КоличествоПарОбъектов", КоличествоПарОбъектов);
	Ответ.Вставить("КоличествоПродажОбщее", КоличествоПродажОбщее);
	
	Возврат Ответ;
	
КонецФункции

// Получить количество активных товаров.
// Активными товарами считаются те, которые продавались хотя бы 1 раз за последний год.
// 
// Параметры:
//  НастройкиСервиса - См. СервисПрогнозирования.ПолучитьНастройкиСервиса.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
//  ДиапазонДатДляВыгрузки - Неопределено, Структура из Дата - см. СервисПрогнозирования.ДиапазонДатДляВыгрузки
// 
// Возвращаемое значение:
//  Структура - Получить количество активных товаров:
// * АктивныхТоваров - Число - 
Функция ПолучитьКоличествоАктивныхТоваров(НастройкиСервиса,
	МенеджерВременныхТаблиц,
	ДиапазонДатДляВыгрузки)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НаборДанных.Номенклатура) КАК АктивныхТоваров
	|ИЗ
	|	ВТКоллекцияПродаж КАК НаборДанных
	|ГДЕ
	|	НаборДанных.Дата >= &ДатаНачалаСоСмещением
	|	И НаборДанных.Дата <= &ДатаОкончания";
	
	ДатаНачалаПродажСоСмещением = ДобавитьМесяц(ДиапазонДатДляВыгрузки.ДатаОкончания, -12);
	Если ДатаНачалаПродажСоСмещением < ДиапазонДатДляВыгрузки.ДатаНачала Тогда
		ДатаНачалаПродажСоСмещением = ДиапазонДатДляВыгрузки.ДатаНачала;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачалаСоСмещением", ДатаНачалаПродажСоСмещением);
	Запрос.УстановитьПараметр("ДатаОкончания", ДиапазонДатДляВыгрузки.ДатаОкончания);
	
	АктивныхТоваров = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		АктивныхТоваров = Выборка.АктивныхТоваров;
	КонецЕсли;
	
	Ответ = Новый Структура();
	Ответ.Вставить("АктивныхТоваров", АктивныхТоваров);
	
	Возврат Ответ;
	
КонецФункции

// Получить количество новинок.
// Новинками считаются товары, которые начали продаваться в последние полгода.
// До этого не продавались (за период выгрузки продаж, заданный настройками).
// 
// Параметры:
//  НастройкиСервиса - См. СервисПрогнозирования.ПолучитьНастройкиСервиса.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
//  ДиапазонДатДляВыгрузки - Неопределено, Структура из Дата - см. СервисПрогнозирования.ДиапазонДатДляВыгрузки
// 
// Возвращаемое значение:
//  Структура - Получить максимальную частоту продажи товара:
// * КоличествоНовинок - Число - 
Функция ПолучитьКоличествоНовинок(НастройкиСервиса, МенеджерВременныхТаблиц, ДиапазонДатДляВыгрузки)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	НаборДанных.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТТоварыДоДатыСмещения
	|ИЗ
	|	ВТКоллекцияПродаж КАК НаборДанных
	|ГДЕ
	|	НаборДанных.Дата >= &ДатаНачала
	|	И НаборДанных.Дата <= &ДатаНачалаОкончанияСоСмещением
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	НаборДанных.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТТоварыПослеДатыСмещения
	|ИЗ
	|	ВТКоллекцияПродаж КАК НаборДанных
	|ГДЕ
	|	НаборДанных.Дата > &ДатаНачалаОкончанияСоСмещением
	|	И НаборДанных.Дата <= &ДатаОкончания
	|;
	|
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ НаборДанных.Номенклатура) КАК КоличествоНовинок
	|ИЗ
	|	ВТТоварыПослеДатыСмещения КАК НаборДанных
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТТоварыДоДатыСмещения КАК НаборДанныхДо
	|	ПО НаборДанных.Номенклатура = НаборДанныхДо.Номенклатура
	|ГДЕ
	|	НаборДанныхДо.Номенклатура ЕСТЬ NULL";
	
	ДатаНачалаОкончанияСоСмещением = ДобавитьМесяц(ДиапазонДатДляВыгрузки.ДатаОкончания, -6);
	Если ДатаНачалаОкончанияСоСмещением < ДиапазонДатДляВыгрузки.ДатаНачала Тогда
		ДатаНачалаОкончанияСоСмещением = ДиапазонДатДляВыгрузки.ДатаНачала;
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаНачалаОкончанияСоСмещением", ДатаНачалаОкончанияСоСмещением);
	Запрос.УстановитьПараметр("ДатаНачала", ДиапазонДатДляВыгрузки.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДиапазонДатДляВыгрузки.ДатаОкончания);
	
	КоличествоНовинок = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		КоличествоНовинок = Выборка.КоличествоНовинок;
	КонецЕсли;
	
	Ответ = Новый Структура();
	Ответ.Вставить("КоличествоНовинок", КоличествоНовинок);
	
	Возврат Ответ;
	
КонецФункции

// Классифицирует продажи товаров на 3 класса:
// Часто продаваемые товары - есть хотя бы 1 продажа в большинстве месяцев за всю историю продаж (всех товаров).
// Частично продаваемые товары - есть хотя бы 1 продажа в более чем половине месяцев за всю историю продаж (всех товаров).
// Редко продаваемые товары - продажа меньше, чем в половине месяцев за всю историю продаж (всех товаров).
// Под всей историей продаж подразумевается период выгрузки, заданный в настройках.
// 
// Параметры:
//  НастройкиСервиса - См. СервисПрогнозирования.ПолучитьНастройкиСервиса.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
//  МесяцевИсторииПродаж - Число - 
// 
// Возвращаемое значение:
//  Структура - Получить максимальную частоту продажи товара:
// * ЧастоПродаваемыхТоваров - Число - 
// * ЧастичноПродаваемыхТоваров - Число - 
// * РедкоПродаваемыхТоваров - Число - 
Функция ПолучитьКоличествоПродажТоваровПомесячно(НастройкиСервиса,
	МенеджерВременныхТаблиц,
	МесяцевИсторииПродаж = 1)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|		КОГДА НаборДанных.КоличествоМесяцев / &МесяцевИсторииПродаж >= 0.8 ТОГДА
	|			1
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ),0) КАК ЧастоПродаваемыхТоваров,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|		КОГДА НаборДанных.КоличествоМесяцев / &МесяцевИсторииПродаж >= 0.5
	|			И НаборДанных.КоличествоМесяцев / &МесяцевИсторииПродаж < 0.8 ТОГДА
	|			1
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ),0) КАК ЧастичноПродаваемыхТоваров,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|		КОГДА НаборДанных.КоличествоМесяцев / &МесяцевИсторииПродаж < 0.5 ТОГДА
	|			1
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ),0) КАК РедкоПродаваемыхТоваров
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО (РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(НаборДанных.Дата, МЕСЯЦ)) КАК КоличествоМесяцев
	|	ИЗ ВТКоллекцияПродаж КАК НаборДанных
	|	СГРУППИРОВАТЬ ПО
	|		НаборДанных.Номенклатура) КАК НаборДанных";
	
	МесяцевИсторииПродаж = ?(МесяцевИсторииПродаж = 0, 1, МесяцевИсторииПродаж);
	Запрос.УстановитьПараметр("МесяцевИсторииПродаж", МесяцевИсторииПродаж);
	
	ЧастоПродаваемыхТоваров = 0;
	ЧастичноПродаваемыхТоваров = 0;
	РедкоПродаваемыхТоваров = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		ЧастоПродаваемыхТоваров = Выборка.ЧастоПродаваемыхТоваров;
		ЧастичноПродаваемыхТоваров = Выборка.ЧастичноПродаваемыхТоваров;
		РедкоПродаваемыхТоваров = Выборка.РедкоПродаваемыхТоваров;
	КонецЕсли;
	
	Ответ = Новый Структура();
	Ответ.Вставить("ЧастоПродаваемыхТоваров", ЧастоПродаваемыхТоваров);
	Ответ.Вставить("ЧастичноПродаваемыхТоваров", ЧастичноПродаваемыхТоваров);
	Ответ.Вставить("РедкоПродаваемыхТоваров", РедкоПродаваемыхТоваров);
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьИнформациюОВыгружаемыхПродажах() Экспорт
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи;
	// Методика получения диапазона дат реализована аналогично тому,
	// как это сделано для получения коллекции продаж в методе ПолучитьСводкуПоКоллекции.
	ДатыПродаж = ПолучитьДатыНачалаОкончанияПродаж(НастройкиСервиса, Истина);
	ДатаАктуальности = ДатыПродаж.ДатаНачалаПродаж;
	ДиапазонДатДляВыгрузки = СервисПрогнозирования.ДиапазонДатДляВыгрузки(Коллекция,
		НастройкиСервиса,
		ДатаАктуальности,
		ДатаАктуальности,
		Истина);
	
	КоллекцияПродаж = ПолучитьКоллекциюПродаж(НастройкиСервиса, ДиапазонДатДляВыгрузки, Ложь, Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = КоллекцияПродаж.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ Набор.Дата) КАК ДнейПродаж,
	|	МИНИМУМ(Набор.Дата) КАК ДатаНачалаПродаж,
	|	МАКСИМУМ(Набор.Дата) КАК ДатаОкончанияПродаж,
	|	Набор.КодТовара КАК КодНоменклатуры,
	|	Набор.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(Набор.Номенклатура КАК Справочник.Номенклатура).Артикул КАК Артикул,
	|	Набор.КодХарактеристики КАК КодХарактеристики,
	|	Набор.Характеристика КАК Характеристика,
	|	Набор.КодКлиента КАК КодПартнера,
	|	Набор.Партнер КАК Партнер,
	|	Набор.КодСклада КАК КодСклада,
	|	Набор.Склад КАК Склад
	|ИЗ
	|	ВТКоллекцияПродаж КАК Набор
	|СГРУППИРОВАТЬ ПО
	|	Набор.КодТовара,
	|	Набор.Номенклатура,
	|	Набор.КодХарактеристики,
	|	Набор.Характеристика,
	|	Набор.КодКлиента,
	|	Набор.Партнер,
	|	Набор.КодСклада,
	|	Набор.Склад
	|УПОРЯДОЧИТЬ ПО
	|	ДнейПродаж УБЫВ,
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Партнер";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьОтборыДляЗапросовПоРегистрамПродаж(Запрос, НастройкиСервиса, ДиапазонДатДляВыгрузки, УчитыватьФильтрНаВыгрузку = Истина)
	
	ТекстЗапроса = Запрос.Текст;
	
	ИспользоватьТолькоПланы   = НастройкиСервиса.ИспользоватьПлановыеОстаткиИПродажи
		И Не НастройкиСервиса.ИспользоватьРеальныеОстаткиИПродажи;
	ИспользоватьОстаткиИПланы = НастройкиСервиса.ИспользоватьПлановыеОстаткиИПродажи
		И НастройкиСервиса.ИспользоватьРеальныеОстаткиИПродажи;
	
	Если УчитыватьФильтрНаВыгрузку Тогда
		
		НастройкиОтборов  = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
		
		Если ИспользоватьТолькоПланы
			Или ИспользоватьОстаткиИПланы Тогда
			ТекстЗапросаУсловияОтборовНаВыгрузку = "(НЕ &УстановленОтборПоНоменклатуре
			|		ИЛИ Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
			|	И (НЕ &УстановленОтборПоПартнерам
			|		ИЛИ Партнер В ИЕРАРХИИ (&ОтборПартнеров))
			|	И (НЕ &УстановленОтборПоСкладам
			|		ИЛИ Склад В ИЕРАРХИИ (&ОтборСкладов))";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияОтборовНаВыгрузкуПланов", ТекстЗапросаУсловияОтборовНаВыгрузку);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияОтборовНаВыгрузкуПланов", "ИСТИНА");
		КонецЕсли;
		
		Если Не ИспользоватьТолькоПланы
			Или ИспользоватьОстаткиИПланы Тогда
			ТекстЗапросаУсловияОтборовНаВыгрузку = "(НЕ &УстановленОтборПоНоменклатуре
			|		ИЛИ АналитикаУчетаНоменклатуры.Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
			|	И (НЕ &УстановленОтборПоПартнерам
			|		ИЛИ АналитикаУчетаПоПартнерам.Партнер В ИЕРАРХИИ (&ОтборПартнеров))
			|	И (НЕ &УстановленОтборПоСкладам
			|		ИЛИ АналитикаУчетаНоменклатуры.МестоХранения В ИЕРАРХИИ (&ОтборСкладов))
			|	И (НЕ &УстановленОтборПоОрганизациям
			|		ИЛИ АналитикаУчетаПоПартнерам.Организация В ИЕРАРХИИ (&ОтборОрганизаций))";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияОтборовНаВыгрузкуФактов", ТекстЗапросаУсловияОтборовНаВыгрузку);
			Запрос.УстановитьПараметр("ОтборОрганизаций",              ПолучитьОтборОрганизаций(НастройкиОтборов));
			Запрос.УстановитьПараметр("УстановленОтборПоОрганизациям", ЕстьОтборОрганизаций(НастройкиОтборов));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияОтборовНаВыгрузкуФактов", "ИСТИНА");
		КонецЕсли;
		
		ОтборНоменклатуры = ПолучитьОтборНоменклатуры(НастройкиОтборов, НастройкиСервиса);
		ОтборПартнеров    = ПолучитьОтборПартнеров(НастройкиОтборов);
		ОтборСкладов      = ПолучитьОтборСкладов(НастройкиОтборов);
		
		Запрос.УстановитьПараметр("ОтборНоменклатуры",             ОтборНоменклатуры);
		Запрос.УстановитьПараметр("ОтборПартнеров",                ОтборПартнеров);
		Запрос.УстановитьПараметр("ОтборСкладов",                  ОтборСкладов);
		Запрос.УстановитьПараметр("УстановленОтборПоНоменклатуре", ОтборНоменклатуры.Количество() > 0);
		Запрос.УстановитьПараметр("УстановленОтборПоПартнерам",    ОтборПартнеров.Количество() > 0);
		Запрос.УстановитьПараметр("УстановленОтборПоСкладам",      ОтборСкладов.Количество() > 0);
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияОтборовНаВыгрузкуПланов", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияОтборовНаВыгрузкуФактов", "ИСТИНА");
	КонецЕсли;
	
	// При отсутствии явного отбора по документам и операциям, в отбор будут переданы все документы и 
	// операции, которые были определены как допустимые для работы с сервисом прогнозирования.
	ОтборДокументов = ПолучитьОтборДокументов(НастройкиОтборов);
	ОтборОпераций   = ПолучитьОтборОпераций(НастройкиОтборов);
	Запрос.УстановитьПараметр("ОтборПоДокументам", ОтборДокументов);
	Запрос.УстановитьПараметр("ОтборПоОперациям", ОтборОпераций);
	
	Запрос.УстановитьПараметр("ИспользоватьТолькоПланы",   ИспользоватьТолькоПланы);
	Запрос.УстановитьПараметр("ИспользоватьОстаткиИПланы", ИспользоватьОстаткиИПланы);
	Запрос.УстановитьПараметр("СценарийПланов",            НастройкиСервиса.СценарийПрогнозированияФактИПлан);
	
	Запрос.УстановитьПараметр("ДатаНачала",                ДиапазонДатДляВыгрузки.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",             ДиапазонДатДляВыгрузки.ДатаОкончания);
	
	Запрос.Текст = ТекстЗапроса;
	
КонецПроцедуры

Функция ТекстЗапросаКоллекцииПродажВТНевыполненныхЗаказов()
	
	ТекстВТНевыполненныхЗаказов = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Обороты.Период, ДЕНЬ) КАК Период,
	|	СУММА(ВЫБОР
	|		КОГДА Обороты.ВидДвиженияРегистра = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияНакопления.Приход)
	|			ТОГДА Обороты.ЗаказаноОборот
	|			ИНАЧЕ 0
	|	КОНЕЦ)                              КАК ЗаказаноПриход,
	|	СУММА(ВЫБОР
	|		КОГДА Обороты.ВидДвиженияРегистра = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияНакопления.Расход)
	|			ТОГДА - Обороты.ЗаказаноОборот
	|			ИНАЧЕ 0
	|	КОНЕЦ)                              КАК ЗаказаноРасход,
	|	Обороты.Распоряжение                КАК Распоряжение,
	|	Обороты.Номенклатура                КАК Номенклатура,
	|	Обороты.Характеристика              КАК Характеристика,
	|	Обороты.Склад                       КАК Склад
	|ПОМЕСТИТЬ Обороты
	|ИЗ
	|	РегистрНакопления.РаспоряженияНаОтгрузку.Обороты(&ДатаНачала, &ДатаОкончания, Запись,
	|		(НЕ &УстановленОтборПоНоменклатуре
	|				ИЛИ Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|		И (НЕ &УстановленОтборПоПартнерам
	|				ИЛИ Распоряжение.Партнер В ИЕРАРХИИ (&ОтборПартнеров))
	|		И (НЕ &УстановленОтборПоСкладам
	|				ИЛИ Склад В ИЕРАРХИИ (&ОтборСкладов))) КАК Обороты
	|ГДЕ
	|	Обороты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(Обороты.Период, ДЕНЬ),
	|	Обороты.Распоряжение,
	|	Обороты.Номенклатура,
	|	Обороты.Характеристика,
	|	Обороты.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДанныеЗаказа.Период, ДЕНЬ) КАК Дата,
	|	СУММА(ВЫБОР
	|		КОГДА ДанныеЗаказа.ЗаказаноРасход <> 0
	|			ТОГДА ДанныеЗаказа.ЗаказаноРасход
	|		ИНАЧЕ ДанныеЗаказа.ЗаказаноПриход * -1
	|	КОНЕЦ)                                   КАК КоличествоОтменено,
	|	ДанныеЗаказа.Распоряжение.Партнер        КАК Партнер,
	|	ДанныеЗаказа.Номенклатура                КАК Номенклатура,
	|	ДанныеЗаказа.Характеристика              КАК Характеристика,
	|	ДанныеЗаказа.Склад                       КАК Склад
	|ПОМЕСТИТЬ ВТНевыполненныеЗаказы
	|ИЗ
	|	Обороты КАК ДанныеЗаказа
	|ГДЕ
	|	ДанныеЗаказа.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ДанныеЗаказа.ЗаказаноПриход < 0
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ДанныеЗаказа.Период, ДЕНЬ),
	|	ДанныеЗаказа.Распоряжение.Партнер,
	|	ДанныеЗаказа.Номенклатура,
	|	ДанныеЗаказа.Характеристика,
	|	ДанныеЗаказа.Склад";
	
	Возврат ТекстВТНевыполненныхЗаказов;
	
КонецФункции

Функция ТекстЗапросаКоллекцииПродажВТОстатки(ВключатьСоединениеСНевыполненнымиЗаказами = Ложь)
	
	ТекстВременныхТаблицЗапроса = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Продажи.Период, ДЕНЬ) КАК Дата,
	|	Продажи.Регистратор                 КАК Ссылка,
	|	Продажи.КоличествоОборот            КАК Количество,
	|	Продажи.СуммаОборот                 КАК Сумма,
	|	ВЫБОР
	|		КОГДА Продажи.КоличествоОборот <> 0
	|				И Продажи.СуммаОборот <> 0
	|			ТОГДА ВЫРАЗИТЬ(Продажи.СуммаОборот / Продажи.КоличествоОборот КАК ЧИСЛО(31, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ                               КАК Цена,
	|	Продажи.Номенклатура                КАК Номенклатура,
	|	Продажи.Характеристика              КАК Характеристика,
	|	Продажи.Партнер                     КАК Партнер,
	|	Продажи.Склад                       КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту) КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВТОстаткиПлановые
	|ИЗ
	// Здесь не требуется проверка на хоз. операцию и тип документа, т.к. отбор явно задан по Сценарию.
	|	РегистрНакопления.ПланыПродаж.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор,
	|		(&ИспользоватьТолькоПланы
	|				ИЛИ &ИспользоватьОстаткиИПланы)
	|		И Сценарий = &СценарийПланов
	|		И (НЕ &УстановленОтборПоНоменклатуре
	|				ИЛИ Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|		И (НЕ &УстановленОтборПоПартнерам
	|				ИЛИ Партнер В ИЕРАРХИИ (&ОтборПартнеров))
	|		И (НЕ &УстановленОтборПоСкладам
	|				ИЛИ Склад В ИЕРАРХИИ (&ОтборСкладов))
	|		) КАК Продажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Продажи.Ссылка                          КАК Ссылка,
	|	Продажи.Дата                            КАК Дата,
	|	Продажи.Количество                      КАК Количество,
	|	Продажи.Сумма                           КАК Сумма,
	|	Продажи.Цена                            КАК Цена,
	|	Продажи.Номенклатура                    КАК Номенклатура,
	|	Продажи.Характеристика                  КАК Характеристика,
	|	Продажи.Партнер                         КАК Партнер,
	|	Продажи.Склад                           КАК Склад,
	|	Продажи.ХозяйственнаяОперация           КАК ХозяйственнаяОперация,
	|	&Документ_ПланПродаж_Реквизиты,
	|	ДополнительныеРеквизитыОбъекта.Свойство КАК Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение КАК Значение
	|ПОМЕСТИТЬ ВТОстаткиПлановыеСДопРеквизитами
	|ИЗ
	|	ВТОстаткиПлановые КАК Продажи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПродаж КАК ТаблицаОбъект
	|			ПО Продажи.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланПродаж.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И Продажи.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОстаткиПлановые
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Продажи.Период, ДЕНЬ)               КАК Дата,
	|	Продажи.Регистратор                               КАК Ссылка,
	|	&ПродажиКоличествоОборот                          КАК Количество,
	|	Продажи.СуммаВыручкиОборот                        КАК Сумма,
	|	ВЫБОР
	|		КОГДА Продажи.КоличествоОборот <> 0
	|				И Продажи.СуммаВыручкиОборот <> 0
	|			ТОГДА &ПродажиЦена
	|		ИНАЧЕ 0
	|	КОНЕЦ                                             КАК Цена,
	|	Продажи.АналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
	|	Продажи.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	Продажи.АналитикаУчетаПоПартнерам.Партнер         КАК Партнер,
	|	ВЫБОР
	|		КОГДА Продажи.Склад ССЫЛКА Справочник.Склады
	|			ТОГДА Продажи.Склад
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ                                             КАК Склад,
	|	Продажи.ХозяйственнаяОперация                     КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВТОстаткиФактические
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, 
	|		НЕ &ИспользоватьТолькоПланы
	|		И ХозяйственнаяОперация В (&ОтборПоОперациям)
	|		И (НЕ &УстановленОтборПоНоменклатуре
	|				ИЛИ АналитикаУчетаНоменклатуры.Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|		И (НЕ &УстановленОтборПоПартнерам
	|				ИЛИ АналитикаУчетаПоПартнерам.Партнер В ИЕРАРХИИ (&ОтборПартнеров))
	|		И (НЕ &УстановленОтборПоСкладам
	|				ИЛИ АналитикаУчетаНоменклатуры.МестоХранения В ИЕРАРХИИ (&ОтборСкладов))
	|		И (НЕ &УстановленОтборПоОрганизациям
	|				ИЛИ АналитикаУчетаПоПартнерам.Организация В ИЕРАРХИИ (&ОтборОрганизаций))
	|		)КАК Продажи
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиПлановыеСДопРеквизитами КАК ОстаткиПлановые
	|		ПО (НАЧАЛОПЕРИОДА(Продажи.Период, ДЕНЬ) = ОстаткиПлановые.Дата)
	|			И Продажи.Склад = ОстаткиПлановые.Склад
	|			И Продажи.АналитикаУчетаНоменклатуры.Номенклатура = ОстаткиПлановые.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ &НевыполненныеЗаказы КАК СтрокаПодмены ПО ИСТИНА";
	
	Если ВключатьСоединениеСНевыполненнымиЗаказами Тогда
		ТекстВременныхТаблицЗапроса = СтрЗаменить(ТекстВременныхТаблицЗапроса, "&ПродажиКоличествоОборот",
			"Продажи.КоличествоОборот + ЕСТЬNULL(НевыполненныеЗаказы.КоличествоОтменено, 0) * &КоэффициентЗаказов");
		ТекстВременныхТаблицЗапроса = СтрЗаменить(ТекстВременныхТаблицЗапроса, "&ПродажиЦена",
			"ВЫРАЗИТЬ(Продажи.СуммаВыручкиОборот / (Продажи.КоличествоОборот + ЕСТЬNULL(НевыполненныеЗаказы.КоличествоОтменено, 0) * &КоэффициентЗаказов) КАК ЧИСЛО(31, 2))");
		
		ТекстСоединениеУсловие = "		ЛЕВОЕ СОЕДИНЕНИЕ ВТНевыполненныеЗаказы КАК НевыполненныеЗаказы
		|		ПО НАЧАЛОПЕРИОДА(Продажи.Период, ДЕНЬ) = НевыполненныеЗаказы.Дата
		|			И Продажи.Склад = НевыполненныеЗаказы.Склад
		|			И Продажи.АналитикаУчетаНоменклатуры.Номенклатура = НевыполненныеЗаказы.Номенклатура
		|			И &УсловиеСоединенияСНевыполненнымиЗаказамиПоХарактеристике
		|			И &УсловиеСоединенияСНевыполненнымиЗаказамиПоПартнеру
		|ГДЕ
		|	ОстаткиПлановые.Номенклатура ЕСТЬ NULL
		|	И ТИПЗНАЧЕНИЯ(Продажи.Регистратор) В (&ОтборПоДокументам)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНевыполненныеЗаказы";
		
	Иначе
		ТекстВременныхТаблицЗапроса = СтрЗаменить(ТекстВременныхТаблицЗапроса, "&ПродажиКоличествоОборот",
			"Продажи.КоличествоОборот");
		ТекстВременныхТаблицЗапроса = СтрЗаменить(ТекстВременныхТаблицЗапроса, "&ПродажиЦена",
			"ВЫРАЗИТЬ(Продажи.СуммаВыручкиОборот / Продажи.КоличествоОборот КАК ЧИСЛО(31, 2))");
		ТекстСоединениеУсловие = "ГДЕ
		|	ОстаткиПлановые.Номенклатура ЕСТЬ NULL
		|	И ТИПЗНАЧЕНИЯ(Продажи.Регистратор) В (&ОтборПоДокументам)";
	КонецЕсли;
	ТекстВременныхТаблицЗапроса = СтрЗаменить(ТекстВременныхТаблицЗапроса,
		"ЛЕВОЕ СОЕДИНЕНИЕ &НевыполненныеЗаказы КАК СтрокаПодмены ПО ИСТИНА", ТекстСоединениеУсловие);
	
	Возврат ТекстВременныхТаблицЗапроса;
	
КонецФункции

Функция ТекстЗапросаКоллекцииПродажШаблонСоединенияСДокументомСДопРеквизитами()
	ТекстНаборовЗапросаШаблонСДопРеквизитами = "
	|ВЫБРАТЬ
	|	Коллекция.Ссылка                        КАК Ссылка,
	|	Коллекция.Дата                          КАК Дата,
	|	Коллекция.Количество                    КАК Количество,
	|	Коллекция.Сумма                         КАК Сумма,
	|	Коллекция.Цена                          КАК Цена,
	|	Коллекция.Номенклатура                  КАК Номенклатура,
	|	Коллекция.Характеристика                КАК Характеристика,
	|	Коллекция.Партнер                       КАК Партнер,
	|	Коллекция.Склад                         КАК Склад,
	|	Коллекция.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
	|	&Документ_ИмяДокумента_Реквизиты,
	|	ДополнительныеРеквизитыОбъекта.Свойство КАК Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение КАК Значение
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ПолноеИмяДокумента КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ &ПолноеИмяДокументаДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И Коллекция.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)";
	
	Возврат ТекстНаборовЗапросаШаблонСДопРеквизитами;
	
КонецФункции

Функция ТекстЗапросаКоллекцииПродажШаблонСоединенияСДокументомБезДопРеквизитов()
	ТекстНаборовЗапросаШаблонБезДопРеквизитов = "
	|ВЫБРАТЬ
	|	Коллекция.Ссылка                        КАК Ссылка,
	|	Коллекция.Дата                          КАК Дата,
	|	Коллекция.Количество                    КАК Количество,
	|	Коллекция.Сумма                         КАК Сумма,
	|	Коллекция.Цена                          КАК Цена,
	|	Коллекция.Номенклатура                  КАК Номенклатура,
	|	Коллекция.Характеристика                КАК Характеристика,
	|	Коллекция.Партнер                       КАК Партнер,
	|	Коллекция.Склад                         КАК Склад,
	|	Коллекция.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
	|	&Документ_ИмяДокумента_Реквизиты,
	|	НЕОПРЕДЕЛЕНО                            КАК Свойство,
	|	НЕОПРЕДЕЛЕНО                            КАК Значение
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ПолноеИмяДокумента КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка";
	
	Возврат ТекстНаборовЗапросаШаблонБезДопРеквизитов;
	
КонецФункции

Функция ТекстЗапросаКоллекцииПродажЗавершение()
	
	ТекстНаборовЗапроса = 
	"
	|УНИЧТОЖИТЬ ВТОстаткиФактические
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Набор.Дата                                  КАК Дата,
	|	КОЛИЧЕСТВО(Набор.Ссылка)                    КАК КоличествоПродаж,
	|	СУММА(Набор.Количество)                     КАК Количество,
	|	СУММА(Набор.Сумма)                          КАК Сумма,
	|	СРЕДНЕЕ(Набор.Цена)                         КАК Цена,
	|	Набор.Номенклатура                          КАК Номенклатура,
	|	&Характеристика                             КАК Характеристика,
	|	&Партнер                                    КАК Партнер,
	|	Набор.Склад                                 КАК Склад,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Набор.Номенклатура) КАК КодТовара,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(&Характеристика)    КАК КодХарактеристики,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(&Партнер)           КАК КодКлиента,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Набор.Склад)        КАК КодСклада,
	|	&РеквизитыВсе,
	|	Набор.Свойство                              КАК Свойство,
	|	Набор.Значение                              КАК Значение
	|ПОМЕСТИТЬ ВТКоллекцияПродаж
	|ИЗ
	|	(ВЫБРАТЬ
	|		Набор.Ссылка                КАК Ссылка,
	|		Набор.Дата                  КАК Дата,
	|		Набор.Количество            КАК Количество,
	|		Набор.Сумма                 КАК Сумма,
	|		Набор.Цена                  КАК Цена,
	|		Набор.Номенклатура          КАК Номенклатура,
	|		Набор.Характеристика        КАК Характеристика,
	|		Набор.Партнер               КАК Партнер,
	|		Набор.Склад                 КАК Склад,
	|		&РеквизитыВсе,
	|		Набор.Свойство              КАК Свойство,
	|		Набор.Значение              КАК Значение
	|	ИЗ
	|		ВТОстаткиФактическиеСДопРеквизитами КАК Набор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Набор.Ссылка                КАК Ссылка,
	|		Набор.Дата                  КАК Дата,
	|		Набор.Количество            КАК Количество,
	|		Набор.Сумма                 КАК Сумма,
	|		Набор.Цена                  КАК Цена,
	|		Набор.Номенклатура          КАК Номенклатура,
	|		Набор.Характеристика        КАК Характеристика,
	|		Набор.Партнер               КАК Партнер,
	|		Набор.Склад                 КАК Склад,
	|		&РеквизитыВсе,
	|		Набор.Свойство              КАК Свойство,
	|		Набор.Значение              КАК Значение
	|	ИЗ
	|		ВТОстаткиПлановыеСДопРеквизитами КАК Набор) КАК Набор
	|
	|СГРУППИРОВАТЬ ПО
	|	Набор.Дата,
	|	Набор.Номенклатура,
	|	&Характеристика,
	|	&Партнер,
	|	Набор.Склад,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Набор.Номенклатура),
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(&Характеристика),
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(&Партнер),
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Набор.Склад),
	|	&РеквизитыВсе,
	|	Набор.Свойство,
	|	Набор.Значение
	|
	|ИМЕЮЩИЕ
	|	СУММА(Набор.Количество) <> 0";
	
	Возврат ТекстНаборовЗапроса;
	
КонецФункции

#КонецОбласти

#Область СоставПередаваемыхДанных

// Основное описание выгружаемого элемента данных.
// 
// Возвращаемое значение:
//  Структура:
//  * ИмяВСервисе - Строка - 
//  * Обязательный - Булево -
//  * Выгружать - Булево -  
//  * ИмяВИсточнике - Строка - 
//  * ТипДанных - Строка - 
Функция ОсновноеОписаниеВыгружаемогоЭлементаДанных() Экспорт
	
	Описание = Новый Структура();
	Описание.Вставить("ИмяВСервисе",   "");
	Описание.Вставить("Обязательный",  Ложь);
	Описание.Вставить("Выгружать",     Ложь);
	Описание.Вставить("ИмяВИсточнике", "");
	Описание.Вставить("ТипДанных",     "");
	
	Возврат Описание;
	
КонецФункции

// Описание выгружаемого элемента данных.
// 
// Параметры:
//  ОсновноеОписание - Структура Из Произвольный - см. ОсновноеОписаниеВыгружаемогоЭлементаДанных:
//  * ИмяВСервисе - Строка - 
//  * Обязательный - Булево -
//  * Выгружать - Булево -  
//  * ИмяВИсточнике - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж, Строка - 
//  * ТипДанных - Строка - 
//  Представление - Строка -
//  Категориальный - Булево - 
//  ВложенноеОписание - см. ОписаниеВыгружаемогоЭлементаДанных.
// Возвращаемое значение:
//  Структура:
//  * ИмяВСервисе - Строка - 
//  * Обязательный - Булево -
//  * Выгружать - Булево -  
//  * ИмяВИсточнике - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж, Строка - 
//  * ТипДанных - Строка - 
//  * Представление - Строка -
//  * Категориальный - Булево - 
//  * ВложенноеОписание - см. ОписаниеВыгружаемогоЭлементаДанных.
Функция ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
	Представление = "",
	Категориальный = Истина,
	ВложенноеОписание = Неопределено)
	
	Возврат СервисПрогнозированияПереопределяемыйКлиентСервер.ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
		Представление,
		Категориальный,
		ВложенноеОписание);
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииПродаж(ОсновноеОписание)
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "item_id");
	ОсновноеОписание.Вставить("Обязательный",  Истина);
	ОсновноеОписание.Вставить("Выгружать",     Истина);
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодТовара");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("КодТовара",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код товара'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "shop_id");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодСклада");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("КодСклада",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код склада/магазина'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "quantity");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "Количество");
	ОсновноеОписание.Вставить("ТипДанных",     "number");
	Описание.Вставить("Количество",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Количество'")));
	
	// Необязательные поля.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "price");
	ОсновноеОписание.Вставить("Обязательный",  Ложь);
	ОсновноеОписание.Вставить("Выгружать",     Ложь);
	ОсновноеОписание.Вставить("ИмяВИсточнике", "Цена");
	ОсновноеОписание.Вставить("ТипДанных",     "number");
	Описание.Вставить("Цена",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Цена продажи за единицу'")));

	ОсновноеОписание.Вставить("ИмяВСервисе",   "sum");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "Сумма");
	ОсновноеОписание.Вставить("ТипДанных",     "number");
	Описание.Вставить("Сумма",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Сумма продажи'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "customer_id");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодКлиента");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("КодКлиента",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код покупателя'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "item_variant_id");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодХарактеристики");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("КодХарактеристики",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код характеристики'")));
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииТоваров(ОсновноеОписание)
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "item_id");
	ОсновноеОписание.Вставить("Обязательный",  Истина);
	ОсновноеОписание.Вставить("Выгружать",     Истина);
	ОсновноеОписание.Вставить("ИмяВИсточнике", "Код");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("Код",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код товара'")));
	
	// Необязательные поля.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "item_name");
	ОсновноеОписание.Вставить("Обязательный",  Ложь);
	ОсновноеОписание.Вставить("Выгружать",     Ложь);
	ОсновноеОписание.Вставить("ИмяВИсточнике", "Наименование");
	Описание.Вставить("Наименование",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Наименование'")));
	
	// Дополнительные поля по категориям товаров и виду номенклатуры.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "category_id");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодКатегории");
	Описание.Вставить("КодКатегории",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код категории'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "category_name");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "НаименованиеКатегории");
	Описание.Вставить("НаименованиеКатегории",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Наименование категории'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "item_category_id");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодВидаНоменклатуры");
	Описание.Вставить("КодВидаНоменклатуры",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код вида номенклатуры'")));
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииХарактеристик(ОсновноеОписание)
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "item_variant_id");
	ОсновноеОписание.Вставить("Обязательный",  Истина);
	ОсновноеОписание.Вставить("Выгружать",     Истина);
	ОсновноеОписание.Вставить("ИмяВИсточнике", "Код");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("Код",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код характеристики'")));
	
	// Необязательные поля.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "item_variant_name");
	ОсновноеОписание.Вставить("Обязательный",  Ложь);
	ОсновноеОписание.Вставить("Выгружать",     Ложь);
	ОсновноеОписание.Вставить("ИмяВИсточнике", "Наименование");
	Описание.Вставить("Наименование",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Наименование'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "item_category_id");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодВидаНоменклатуры");
	Описание.Вставить("КодВидаНоменклатуры",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код вида номенклатуры'")));
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииПокупателей(ОсновноеОписание)
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "customer_id");
	ОсновноеОписание.Вставить("Обязательный",  Истина);
	ОсновноеОписание.Вставить("Выгружать",     Истина);
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодПокупателя");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("КодПокупателя",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru='Код покупателя'")));
	
	// Необязательные поля.
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииСкладов(ОсновноеОписание)
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "shop_id");
	ОсновноеОписание.Вставить("Обязательный",  Истина);
	ОсновноеОписание.Вставить("Выгружать",     Истина);
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодСклада");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("КодСклада",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru='Код склада/магазина'")));
	
	// Необязательные поля.
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииОстатковТоваров(ОсновноеОписание)
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "shop_id");
	ОсновноеОписание.Вставить("Обязательный",  Истина);
	ОсновноеОписание.Вставить("Выгружать",     Истина);
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодСклада");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("КодСклада",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код склада/магазина'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "item_id");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодТовара");
	Описание.Вставить("КодТовара",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код товара'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "stock_quantity");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "Количество");
	ОсновноеОписание.Вставить("ТипДанных",     "number");
	Описание.Вставить("Количество",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Количество'")));
	
	// Необязательные поля.
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииПромоАкций(ОсновноеОписание)
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "promo_name");
	ОсновноеОписание.Вставить("Обязательный",  Истина);
	ОсновноеОписание.Вставить("Выгружать",     Истина);
	ОсновноеОписание.Вставить("ИмяВИсточнике", "Наименование");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("Наименование",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Наименование'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "discount");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "Скидка");
	ОсновноеОписание.Вставить("ТипДанных",     "number");
	Описание.Вставить("Скидка",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Сумма скидки'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "item_id");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодТовара");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("КодТовара",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код товара'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "shop_id");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодСклада");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("КодСклада",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код склада/магазина'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "type");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "Тип");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("Тип",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Тип акции'")));
	
	// Необязательные поля.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "customer_id");
	ОсновноеОписание.Вставить("Обязательный",  Ложь);
	ОсновноеОписание.Вставить("Выгружать",     Ложь);
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодКлиента");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("КодКлиента",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код покупателя'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "item_variant_id");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодХарактеристики");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("КодХарактеристики",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код характеристики'")));
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#Область Разное

Функция ДопРеквизитыКоллекции(ИмяКоллекции)
	
	ИмяТаблицыОбъединения = "Набор";
	ИмяТаблицыМетаданного = "ТаблицаОбъект";
	
	// 1. Составление полного списка реквизитов.
	// 2. Составление полного списка доп.реквизитов/свойств.
	
	ВсеРеквизиты = Новый Массив();
	ВсеДопРеквизитыКлючи = Новый Массив();
	ВсеДопРеквизитыСвойства = Новый Массив();
	
	РеквизитыОбъектаВсеТекстом = "";
	
	Настройки = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	ИнфоОКоллекции = Настройки.Коллекции[ИмяКоллекции];
	ДоступныеРеквизиты = ИнфоОКоллекции.ВложенноеОписание;
	Для Каждого КлючЗначение Из ДоступныеРеквизиты Цикл
		ЧастиКлюча = СтрРазделить(КлючЗначение.Ключ, "_");
		Если ЧастиКлюча.Количество() = 1 Тогда
			Продолжить;
		КонецЕсли;
		ТипРеквизита = ЧастиКлюча[0];
		ИмяРеквизита = ЧастиКлюча[1];
		ИмяРеквизитаСТипом = ТипРеквизита + "_" + ИмяРеквизита;
		Если ТипРеквизита = "Реквизит" Тогда
			Если ВсеРеквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
				ВсеРеквизиты.Добавить(ИмяРеквизита);
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(КлючЗначение.Значение.ДополнительноеСвойство) Тогда
			Если ВсеДопРеквизитыКлючи.Найти(ИмяРеквизитаСТипом) = Неопределено Тогда
				ВсеДопРеквизитыКлючи.Добавить(ИмяРеквизитаСТипом);
				ВсеДопРеквизитыСвойства.Добавить(КлючЗначение.Значение.ДополнительноеСвойство);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// 3. Текст выбора всех реквизитов, для запроса - агрегатора подзапросов.
	Для Каждого ИмяРеквизита Из ВсеРеквизиты Цикл
		РеквизитыОбъектаВсеТекстом = РеквизитыОбъектаВсеТекстом
			+ ИмяТаблицыОбъединения + ".Реквизит_" + ИмяРеквизита + ", ";
	КонецЦикла;
	
	// 4. Текст выбора всех реквизитов, для запроса к конкретному объекту метаданных.
	ОписаниеМетаданных = ПолучитьОписаниеМетаданныхПоКоллекции(ИмяКоллекции);
	
	ДопРеквизитыПоМетаданным = Новый Структура();
	Для Каждого ОписаниеМетаданного Из ОписаниеМетаданных Цикл
		
		РеквизитыОбъектаСобираемые = Новый Структура();
		Для Каждого ИмяРеквизита Из ВсеРеквизиты Цикл
			РеквизитыОбъектаСобираемые.Вставить(ИмяРеквизита, Ложь);
		КонецЦикла;
		
		ПоляПоОбъектуМетаданных = Новый Структура();
		ПоляПоОбъектуМетаданных.Вставить("РеквизитыОбъектаТекстом", "");
		ПоляПоОбъектуМетаданных.Вставить("РеквизитыОбъектаСобираемые", РеквизитыОбъектаСобираемые);
		ПоляПоОбъектуМетаданных.Вставить("ПодменяемоеИмяВЗапросе", ОписаниеМетаданного.ИмяОбъектаДопРеквизитовСвойств + "_Реквизиты");
		ПоляПоОбъектуМетаданных.Вставить("ПолноеИмяОбъектаМетаданных", "Документ." + ОписаниеМетаданного.ОбъектМетаданных.Имя);
		ПоляПоОбъектуМетаданных.Вставить("ЕстьТаблицаДопРеквизитов", ОписаниеМетаданного.ЕстьТаблицаДопРеквизитов);
		
		ДопРеквизитыПоМетаданным.Вставить(ОписаниеМетаданного.ИмяОбъектаДопРеквизитовСвойств,
			ПоляПоОбъектуМетаданных);
	КонецЦикла;
	
	Для Каждого ИмяРеквизита Из ВсеРеквизиты Цикл
		Для Каждого ОписаниеМетаданного Из ОписаниеМетаданных Цикл
			ЭтоРеквизитТекущегоМетаданного = ОписаниеМетаданного.ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) <> Неопределено;
			РеквизитыОбъектаСобираемые = ДопРеквизитыПоМетаданным[ОписаниеМетаданного.ИмяОбъектаДопРеквизитовСвойств].РеквизитыОбъектаСобираемые;
			Если ЭтоРеквизитТекущегоМетаданного Тогда
				РеквизитыОбъектаСобираемые[ИмяРеквизита] = Истина;
			КонецЕсли;
			ДопРеквизитыПоМетаданным[ОписаниеМетаданного.ИмяОбъектаДопРеквизитовСвойств].РеквизитыОбъектаСобираемые = РеквизитыОбъектаСобираемые;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого КлючЗначение Из ДопРеквизитыПоМетаданным Цикл
		Ключ = КлючЗначение;
		РеквизитыОбъектаТекстом = ДопРеквизитыПоМетаданным[Ключ.Ключ].РеквизитыОбъектаТекстом;
		Для Каждого ИмяРеквизита Из ВсеРеквизиты Цикл
			Если КлючЗначение.Значение.РеквизитыОбъектаСобираемые[ИмяРеквизита] Тогда
				РеквизитыОбъектаТекстом = РеквизитыОбъектаТекстом
					+ ИмяТаблицыМетаданного + "." + ИмяРеквизита + " КАК Реквизит_" + ИмяРеквизита + ", ";
			Иначе
				РеквизитыОбъектаТекстом = РеквизитыОбъектаТекстом
					+ "НЕОПРЕДЕЛЕНО КАК Реквизит_" + ИмяРеквизита + ", ";
			КонецЕсли;
		КонецЦикла;
		ДопРеквизитыПоМетаданным[Ключ.Ключ].РеквизитыОбъектаТекстом = РеквизитыОбъектаТекстом;
	КонецЦикла;
	
	ВозвращаемаяСтруктура = Новый Структура();
	ВозвращаемаяСтруктура.Вставить("РеквизитыОбъектаВсеТекстом", РеквизитыОбъектаВсеТекстом);
	ВозвращаемаяСтруктура.Вставить("ДопРеквизитыПоМетаданным", ДопРеквизитыПоМетаданным);
	ВозвращаемаяСтруктура.Вставить("ВсеДопРеквизитыСвойства", ВсеДопРеквизитыСвойства);
	ВозвращаемаяСтруктура.Вставить("ВсеДопРеквизитыКлючи", ВсеДопРеквизитыКлючи);
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

Функция ОбработатьКоллекциюСДопРеквизитами(Коллекция, ОписаниеДопРеквизитов, ГруппироватьПоСсылке = Истина)
	
	ВсеДопРеквизитыСвойства = ОписаниеДопРеквизитов.ВсеДопРеквизитыСвойства;
	ВсеДопРеквизитыКлючи = ОписаниеДопРеквизитов.ВсеДопРеквизитыКлючи;
	
	КолонкиКоллекции = "";
	
	ВозвращаемаяТаблица = Коллекция.СкопироватьКолонки();
	Для Каждого ОписаниеКолонки Из ВсеДопРеквизитыКлючи Цикл
		ВозвращаемаяТаблица.Колонки.Добавить(ОписаниеКолонки);
	КонецЦикла;
	
	Если Не ГруппироватьПоСсылке Тогда
		Для Каждого Колонка Из ВозвращаемаяТаблица.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			Если ИмяКолонки <> "Свойство"
				И ИмяКолонки <> "Значение"
				И Не СтрНайти(ИмяКолонки, "ДопРеквизит_")
				И Не СтрНайти(ИмяКолонки, "ДопСвойство_") Тогда
				КолонкиКоллекции = КолонкиКоллекции + ", " + ИмяКолонки;
			КонецЕсли;
		КонецЦикла;
	Иначе
		КолонкиКоллекции = "Ссылка";
	КонецЕсли;
	
	ТекущиеПоля = Новый Структура(КолонкиКоллекции);
	ТекущаяСтрока = Неопределено;
	Для Каждого Строка Из Коллекция Цикл
		Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущиеПоля, Строка) Тогда
			
			ЗаполнитьЗначенияСвойств(ТекущиеПоля, Строка);
			
			ТекущаяСтрока = ВозвращаемаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Строка);
			
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.Свойство)
			И ЗначениеЗаполнено(Строка.Значение) Тогда
			Индекс = ВсеДопРеквизитыСвойства.Найти(Строка.Свойство);
			Если Индекс <> Неопределено Тогда
				ТекущаяСтрока[ВсеДопРеквизитыКлючи[Индекс]] = Строка.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ВозвращаемаяТаблица.Колонки.Удалить("Свойство");
	ВозвращаемаяТаблица.Колонки.Удалить("Значение");
	Возврат ВозвращаемаяТаблица;
	
КонецФункции

Функция СдвинутьДатуКНачалуПериода(Дата, Периодичность, ДеньНеделиНачалаПрогноза)
	
	День = 86400;
	ОбработаннаяДата = Дата;
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		ОбработаннаяДата = НачалоДня(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Если ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.ПустаяСсылка() Тогда
			// Остается как есть.
		ИначеЕсли ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.Понедельник Тогда
			ОбработаннаяДата = НачалоНедели(Дата);
		ИначеЕсли ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.Вторник Тогда
			ОбработаннаяДата = НачалоНедели(Дата) + День;
		ИначеЕсли ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.Среда Тогда
			ОбработаннаяДата = НачалоНедели(Дата) + День * 2;
		ИначеЕсли ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.Четверг Тогда
			ОбработаннаяДата = НачалоНедели(Дата) + День * 3;
		ИначеЕсли ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.Пятница Тогда
			ОбработаннаяДата = НачалоНедели(Дата) + День * 4;
		ИначеЕсли ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.Суббота Тогда
			ОбработаннаяДата = НачалоНедели(Дата) + День * 5;
		ИначеЕсли ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.Воскресенье Тогда
			ОбработаннаяДата = НачалоНедели(Дата) + День * 6;
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ОбработаннаяДата = НачалоМесяца(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ОбработаннаяДата = НачалоКвартала(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		ОбработаннаяДата = НачалоГода(Дата);
	КонецЕсли;
	
	Возврат ОбработаннаяДата;
	
КонецФункции

// Заполнение данных текущей строки прогноза продаж по оптимальной модели.
// 
// Параметры:
//  ТекущийПрогноз - Соответствие из Произвольный - 
//  ПрогнозПоТоварам - Булево - 
//  ДанныеДляЗагрузки - ТаблицаЗначений - 
//  ПараметрыТекущегоПрогноза - Структура из Произвольный - 
//  НастройкиСервиса - Структура - 
Процедура ЗаполнитьДанныеТекущегоПрогнозаСОптимальнойМоделью(ТекущийПрогноз, ПрогнозПоТоварам, ДанныеДляЗагрузки,
	ПараметрыТекущегоПрогноза,
	НастройкиСервиса = Неопределено)
	
	Склад          = Неопределено;
	ДатыКоличества = Новый Соответствие();
	
	// Для полей из дополнительных коллекций, добавляется id коллеции, к примеру "category_id_1635".
	Если ПрогнозПоТоварам Тогда
		
		Номенклатура   = Неопределено;
		Характеристика = Неопределено;
		Партнер        = Неопределено;
		
		Для Каждого КлючЗначение Из ТекущийПрогноз Цикл
			
			Если КлючЗначение.Ключ = "_id" Тогда
				Продолжить; // Уникальный идентификатор документа MongoDB.
			ИначеЕсли КлючЗначение.Ключ = "obj_id" Тогда
				Продолжить; // Внутренний уникальный идентификатор. Не применимо.
			ИначеЕсли КлючЗначение.Ключ = "item_id" Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Номенклатура = ПолучитьНоменклатуруПоИдентификатору(КлючЗначение.Значение, НастройкиСервиса);
				
				Если Номенклатура = Неопределено
					Или Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли КлючЗначение.Ключ = "item_variant_id" Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Идентификатор  = Новый УникальныйИдентификатор(КлючЗначение.Значение);
				Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Идентификатор);
				
			ИначеЕсли КлючЗначение.Ключ = "shop_id" Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Идентификатор = Новый УникальныйИдентификатор(КлючЗначение.Значение);
				Склад         = Справочники.Склады.ПолучитьСсылку(Идентификатор);
				
			ИначеЕсли КлючЗначение.Ключ = "customer_id" Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Идентификатор = Новый УникальныйИдентификатор(КлючЗначение.Значение);
				Партнер       = Справочники.Партнеры.ПолучитьСсылку(Идентификатор);
				
			ИначеЕсли СтрНайти(КлючЗначение.Ключ, "category_id") Тогда
				Продолжить; // Не применимо. Присутствует при "category_processing" = "reduce".
			Иначе
				ДатаПродажи = СервисПрогнозирования.ДатаСервисаВДатуПрограммы(КлючЗначение.Ключ);
				ДатаПродажи = СдвинутьДатуКНачалуПериода(ДатаПродажи,
					ПараметрыТекущегоПрогноза.Периодичность, ПараметрыТекущегоПрогноза.ДеньНеделиНачалаПрогноза);
				Количество  = Число(КлючЗначение.Значение);
				Если НастройкиСервиса.ОкруглятьШтучныеПозиции Тогда
					Если Количество < 0 Тогда
						Количество = 0;
					ИначеЕсли Количество > 0 Тогда
						Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура")
							И ЗначениеЗаполнено(Номенклатура) Тогда
							ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
							Если ЕдиницаИзмерения = ПараметрыТекущегоПрогноза.ЕдиницаИзмеренияКоличестваШтук Тогда
								Количество = Окр(Количество);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ДатыКоличества.Вставить(ДатаПродажи, Количество);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого КлючЗначение Из ДатыКоличества Цикл
			НоваяСтрока = ДанныеДляЗагрузки.Добавить();
			НоваяСтрока.Склад          = Склад;
			НоваяСтрока.Номенклатура   = Номенклатура;
			НоваяСтрока.Характеристика = Характеристика;
			НоваяСтрока.Партнер        = Партнер;
			НоваяСтрока.Дата           = КлючЗначение.Ключ;
			НоваяСтрока.Количество     = КлючЗначение.Значение;
		КонецЦикла;
		
	Иначе // Прогноз по товарным категориям.
		
		ТоварнаяКатегория = Неопределено;
		
		Для Каждого КлючЗначение Из ТекущийПрогноз Цикл
			
			Если КлючЗначение.Ключ = "_id" Тогда
				Продолжить; // Уникальный идентификатор документа MongoDB.
			ИначеЕсли КлючЗначение.Ключ = "obj_id" Тогда
				Продолжить; // Внутренний уникальный идентификатор. Не применимо.
			ИначеЕсли СтрНайти(КлючЗначение.Ключ, "category_id") Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Идентификатор     = Новый УникальныйИдентификатор(КлючЗначение.Значение);
				ТоварнаяКатегория = Справочники.ТоварныеКатегории.ПолучитьСсылку(Идентификатор);
				
			ИначеЕсли КлючЗначение.Ключ = "shop_id" Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Идентификатор = Новый УникальныйИдентификатор(КлючЗначение.Значение);
				Склад         = Справочники.Склады.ПолучитьСсылку(Идентификатор);
				
			ИначеЕсли КлючЗначение.Ключ = "customer_id" Тогда
				Продолжить; // Не применимо.
			ИначеЕсли КлючЗначение.Ключ = "item_variant_id" Тогда
				Продолжить; // Не применимо.
			ИначеЕсли КлючЗначение.Ключ = "item_id" Тогда
				Продолжить; // Не применимо. Присутствует при "category_processing" = "reduce".
			Иначе
				ДатаПродажи = СервисПрогнозирования.ДатаСервисаВДатуПрограммы(КлючЗначение.Ключ);
				ДатаПродажи = СдвинутьДатуКНачалуПериода(ДатаПродажи,
					ПараметрыТекущегоПрогноза.Периодичность, ПараметрыТекущегоПрогноза.ДеньНеделиНачалаПрогноза);
				Количество  = Число(КлючЗначение.Значение);
				ДатыКоличества.Вставить(ДатаПродажи, Количество);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого КлючЗначение Из ДатыКоличества Цикл
			НоваяСтрока                   = ДанныеДляЗагрузки.Добавить();
			НоваяСтрока.Склад             = Склад;
			НоваяСтрока.ТоварнаяКатегория = ТоварнаяКатегория;
			НоваяСтрока.Дата              = КлючЗначение.Ключ;
			НоваяСтрока.Количество        = КлючЗначение.Значение;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнение данных текущей строки прогноза продаж по выбранной модели.
// 
// Параметры:
//  ТекущийПрогноз - Соответствие из Произвольный - 
//  ПрогнозПоТоварам - Булево - 
//  ДанныеДляЗагрузки - ТаблицаЗначений - 
//  ПараметрыТекущегоПрогноза - Структура из Произвольный - 
//  НастройкиСервиса - Структура - 
Процедура ЗаполнитьДанныеТекущегоПрогнозаСВыбраннойМоделью(ТекущийПрогноз, ПрогнозПоТоварам, ДанныеДляЗагрузки,
	ПараметрыТекущегоПрогноза,
	НастройкиСервиса = Неопределено)
	
	Склад       = Неопределено;
	ДатаПродажи = Неопределено;
	Количество  = 0;
	
	// Для полей из дополнительных коллекций, добавляется id коллеции, к примеру "category_id_1635".
	Если ПрогнозПоТоварам Тогда
		
		Номенклатура   = Неопределено;
		Характеристика = Неопределено;
		Партнер        = Неопределено;
		
		Для Каждого КлючЗначение Из ТекущийПрогноз Цикл
			
			Если КлючЗначение.Ключ = "item_id" Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Номенклатура = ПолучитьНоменклатуруПоИдентификатору(КлючЗначение.Значение, НастройкиСервиса);
				
				Если Номенклатура = Неопределено
					Или Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли КлючЗначение.Ключ = "date" Тогда
				
				ДатаПродажи = СервисПрогнозирования.ДатаСервисаВДатуПрограммы(КлючЗначение.Значение);
				ДатаПродажи = СдвинутьДатуКНачалуПериода(ДатаПродажи,
					ПараметрыТекущегоПрогноза.Периодичность, ПараметрыТекущегоПрогноза.ДеньНеделиНачалаПрогноза);
				
			ИначеЕсли КлючЗначение.Ключ = ПараметрыТекущегоПрогноза.ИмяМодели Тогда
				
				Количество = Число(КлючЗначение.Значение);
				Если НастройкиСервиса.ОкруглятьШтучныеПозиции Тогда
					Если Количество < 0 Тогда
						Количество = 0;
					ИначеЕсли Количество > 0 Тогда
						Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура")
							И ЗначениеЗаполнено(Номенклатура) Тогда
							ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
							Если ЕдиницаИзмерения = ПараметрыТекущегоПрогноза.ЕдиницаИзмеренияКоличестваШтук Тогда
								Количество = Окр(Количество);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли КлючЗначение.Ключ = "shop_id" Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Идентификатор = Новый УникальныйИдентификатор(КлючЗначение.Значение);
				Склад         = Справочники.Склады.ПолучитьСсылку(Идентификатор);
				
			ИначеЕсли КлючЗначение.Ключ = "item_variant_id" Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Идентификатор  = Новый УникальныйИдентификатор(КлючЗначение.Значение);
				Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Идентификатор);
				
			ИначеЕсли КлючЗначение.Ключ = "customer_id" Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Идентификатор = Новый УникальныйИдентификатор(КлючЗначение.Значение);
				Партнер       = Справочники.Партнеры.ПолучитьСсылку(Идентификатор);
				
			ИначеЕсли СтрНайти(КлючЗначение.Ключ, "category_id") Тогда
				Продолжить; // Не применимо. Присутствует при "category_processing" = "reduce".
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока = ДанныеДляЗагрузки.Добавить();
		НоваяСтрока.Склад          = Склад;
		НоваяСтрока.Номенклатура   = Номенклатура;
		НоваяСтрока.Характеристика = Характеристика;
		НоваяСтрока.Партнер        = Партнер;
		НоваяСтрока.Дата           = ДатаПродажи;
		НоваяСтрока.Количество     = Количество;
		
	Иначе // Прогноз по товарным категориям.
		
		ТоварнаяКатегория = Неопределено;
		
		Для Каждого КлючЗначение Из ТекущийПрогноз Цикл
			
			// Для полей из дополнительных коллекций, добавляется приставка идентификатора коллеции, к примеру "category_id_1635".
			Если СтрНайти(КлючЗначение.Ключ, "category_id") Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Идентификатор     = Новый УникальныйИдентификатор(КлючЗначение.Значение);
				ТоварнаяКатегория = Справочники.ТоварныеКатегории.ПолучитьСсылку(Идентификатор);
				
			ИначеЕсли КлючЗначение.Ключ = "date" Тогда
				
				ДатаПродажи = СервисПрогнозирования.ДатаСервисаВДатуПрограммы(КлючЗначение.Значение);
				ДатаПродажи = СдвинутьДатуКНачалуПериода(ДатаПродажи,
					ПараметрыТекущегоПрогноза.Периодичность, ПараметрыТекущегоПрогноза.ДеньНеделиНачалаПрогноза);
				
			ИначеЕсли КлючЗначение.Ключ = ПараметрыТекущегоПрогноза.ИмяМодели Тогда
				Количество = Число(КлючЗначение.Значение);
			ИначеЕсли КлючЗначение.Ключ = "shop_id" Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Идентификатор = Новый УникальныйИдентификатор(КлючЗначение.Значение);
				Склад         = Справочники.Склады.ПолучитьСсылку(Идентификатор);
				
			ИначеЕсли КлючЗначение.Ключ = "item_id" Тогда
				Продолжить; // Не применимо. Присутствует при "category_processing" = "reduce".
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока = ДанныеДляЗагрузки.Добавить();
		НоваяСтрока.Склад             = Склад;
		НоваяСтрока.ТоварнаяКатегория = ТоварнаяКатегория;
		НоваяСтрока.Дата              = ДатаПродажи;
		НоваяСтрока.Количество        = Количество;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьБлокировкуНаПланПродаж(СсылкаНаДокумент)
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Документ.ПланПродаж");
	ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", СсылкаНаДокумент);
	ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
	//@skip-check lock-out-of-try
	БлокировкаДанных.Заблокировать(); // Метод гарантированно находится внутри блока попытка-исключение.
КонецПроцедуры

Процедура УстановитьБлокировкуНаПланПродажПоКатегориям(СсылкаНаДокумент)
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Документ.ПланПродажПоКатегориям");
	ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", СсылкаНаДокумент);
	ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
	//@skip-check lock-out-of-try
	БлокировкаДанных.Заблокировать(); // Метод гарантированно находится внутри блока попытка-исключение.
КонецПроцедуры

Функция ПоддерживаемыеОперацииПродаж() Экспорт
	
	// Также см. Доступные значения для соответствующего поля в:
	// Макет ПанельУправленияСервисомПрогнозирования.ФильтрОтправляемыхДанныхОперации
	// Общий макет СервисПрогнозированияФильтрОтправляемыхДанных
	
	Ответ = Новый Массив;
	Ответ.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	Ответ.Добавить(Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности);
	Ответ.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет);
	Ответ.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
	Ответ.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиентаПрошлыхПериодов);
	Ответ.Добавить(Перечисления.ХозяйственныеОперации.СторноРеализации);
	Ответ.Добавить(Перечисления.ХозяйственныеОперации.РеализацияВРозницу);
	Ответ.Добавить(Перечисления.ХозяйственныеОперации.ОприходованиеПоВозврату);
	Ответ.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомиссионера);
	
	Возврат Ответ;
	
КонецФункции

Функция ПоддерживаемыеДокументыПродаж() Экспорт
	
	ИменаДокументов = ПоддерживаемыеДокументыПродажСтрокой();
	
	Ответ = Новый Массив();
	Для Каждого ИмяДокумента Из ИменаДокументов Цикл
		Ответ.Добавить(Тип("ДокументСсылка." + ИмяДокумента));
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

Функция ПоддерживаемыеДокументыПродажСтрокой()
	
	// Также см. Доступные значения для соответствующего поля в:
	// Макет ПанельУправленияСервисомПрогнозирования.ФильтрОтправляемыхДанныхДокументы
	// Общий макет СервисПрогнозированияФильтрОтправляемыхДанных
	
	Ответ = Новый Массив();
	Ответ.Добавить("ПланПродаж");
	Ответ.Добавить("РеализацияТоваровУслуг");
	Ответ.Добавить("КорректировкаРеализации");
	Ответ.Добавить("ВозвратТоваровОтКлиента");
	Ответ.Добавить("ОтчетКомиссионера");
	Ответ.Добавить("ВводОстатков");
	Ответ.Добавить("ВводОстатковОПродажахЗаПрошлыеПериоды");
	Ответ.Добавить("ВводОстатковТоваров");
	Ответ.Добавить("ОтчетОРозничныхПродажах");
	
	Возврат Ответ;
	
КонецФункции

Функция ПоказательДлинаИсторииПродаж(ДатыПродаж)
	
	Ответ = ОписаниеПоказателяКачестваДанныхИнформационнойБазы();
	
	ДатаНачалаПродаж    = ДатыПродаж.ДатаНачалаПродаж;
	ДатаОкончанияПродаж = ДатыПродаж.ДатаОкончанияПродаж;
	
	РазницаВДнях = (НачалоДня(ДатаОкончанияПродаж) - НачалоДня(ДатаНачалаПродаж)) / (60 * 60 * 24);
	
	Категория = 0;
	ВеличинаКачества = 0;
	
	Если РазницаВДнях < 7 Тогда
		Категория = 0;
		ВеличинаКачества = 0;
	ИначеЕсли РазницаВДнях < 365 * 2 Тогда
		Категория = 1;
		// Величина в процентах, где за 100% принимаем 2 года продаж.
		// Целевое значение - от 30 до 100.
		ВеличинаКачества = РазницаВДнях / (365 * 2) * 100;
		ВеличинаКачества = ?(ВеличинаКачества < 30, 30, ВеличинаКачества);
	Иначе
		Категория = 2;
		ВеличинаКачества = 100;
	КонецЕсли;
	
	ТекстПояснения = "";
	
	Если Категория = 0 Тогда
		ТекстПояснения = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='<b>Длина истории продаж</b>: недостаточно продаж для работы сервиса прогнозирования; в расширенном режиме имеется возможность учесть продажи из другой информационной базы.'"));
	ИначеЕсли Категория = 1 Тогда
		ТекстПояснения = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='<b>Длина истории продаж</b>: продажи ведутся менее 2 лет, из-за чего невозможно вычислить сезонность; в расширенном режиме имеется возможность учесть продажи из другой информационной базы.'"));
	ИначеЕсли Категория = 2 Тогда
		ТекстПояснения = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='<b>Длина истории продаж</b>: данных достаточно для построения прогноза и вычисления сезонных коэффициентов.'"));
	КонецЕсли;
	
	ДополнительнаяИнформация = Новый Структура;
	ДополнительнаяИнформация.Вставить("ДатаНачалаПродаж", ДатаНачалаПродаж);
	ДополнительнаяИнформация.Вставить("ДатаОкончанияПродаж", ДатаОкончанияПродаж);
	
	Ответ.Имя = "ДлинаИсторииПродаж";
	Ответ.Категория = Категория;
	Ответ.ВеличинаКачества = ВеличинаКачества;
	Ответ.Представление = ТекстПояснения;
	Ответ.ДополнительнаяИнформация = ДополнительнаяИнформация;
	
	Возврат Ответ;
	
КонецФункции

Функция ПоказательКоличествоДнейПродаж(ПериодовПродаж)
	
	Ответ = ОписаниеПоказателяКачестваДанныхИнформационнойБазы();
	
	Категория = 0;
	ВеличинаКачества = 0;
	
	Если ПериодовПродаж < 7 Тогда
		Категория = 0;
		ВеличинаКачества = 0;
	Иначе
		Категория = 2;
		ВеличинаКачества = 100;
	КонецЕсли;
	
	ТекстПояснения = "";
	
	Если Категория = 0 Тогда
		ТекстПояснения = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='<b>Количество дней продаж потоварно</b>: нет ни одного товара, по которому есть хотя бы 7 дней продаж.'"));
	ИначеЕсли Категория = 2 Тогда
		ТекстПояснения = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='<b>Количество дней продаж потоварно</b>: по самому популярному товару есть 7 или более дней продаж.'"));
	КонецЕсли;
	
	Ответ.Имя = "КоличествоДнейПродаж";
	Ответ.Категория = Категория;
	Ответ.ВеличинаКачества = ВеличинаКачества;
	Ответ.Представление = ТекстПояснения;
	
	Возврат Ответ;
	
КонецФункции

Функция ПоказательКоличествоПродажВГод(ЧислоПродажВГод, КоличествоПродажОбщее)
	
	Категория = 0;
	ВеличинаКачества = 0;
	
	Если ЧислоПродажВГод < 5 Тогда
		Категория = 0;
		ВеличинаКачества = 0;
	ИначеЕсли ЧислоПродажВГод < 50 Тогда
		Категория = 1;
		ВеличинаКачества = ЧислоПродажВГод;
	Иначе
		Категория = 2;
		ВеличинаКачества = ЧислоПродажВГод;
		ВеличинаКачества = ?(ЧислоПродажВГод < 60, 60, ЧислоПродажВГод);
		ВеличинаКачества = ?(ЧислоПродажВГод > 100, 100, ЧислоПродажВГод);
	КонецЕсли;
	
	ТекстПояснения = "";
	
	Если Категория = 0 Тогда
		ТекстПояснения = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='<b>Количество продаж в год</b>: текущей регулярности продаж (менее 5 в год) недостаточно для работы сервиса прогнозирования.'"));
	ИначеЕсли Категория = 1 Тогда
		ТекстПояснения = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='<b>Количество продаж в год</b>: при текущей регулярности продаж (менее 50 в год) не рекомендуется построение прогноза в разрезе дней. Доступно построение прогноза в разрезе недель и месяцев.'"));
	ИначеЕсли Категория = 2 Тогда
		ТекстПояснения = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='<b>Количество продаж в год</b>: высокое количество продаж в год позволяет выбрать любую из доступных детализаций (день, неделя, месяц).'"));
	КонецЕсли;
	
	Ответ = ОписаниеПоказателяКачестваДанныхИнформационнойБазы();
	Ответ.Имя = "КоличествоПродажВГод";
	Ответ.Категория = Категория;
	Ответ.ВеличинаКачества = ВеличинаКачества;
	Ответ.Представление = ТекстПояснения;
	Ответ.ДополнительнаяИнформация = Новый Структура("КоличествоПродажОбщее", КоличествоПродажОбщее);
	
	Возврат Ответ;
	
КонецФункции

Функция ПоказательАктивностьПродаж(ПроцентАктивныхТоваров, КоличествоАктивныхТоваров)
	
	Категория = 0;
	ВеличинаКачества = 0;
	
	Если ПроцентАктивныхТоваров < 60 Тогда
		Категория = 1;
		ВеличинаКачества = 100 - ПроцентАктивныхТоваров;
	Иначе
		Категория = 2;
		ВеличинаКачества = ПроцентАктивныхТоваров;
	КонецЕсли;
	
	ТекстПояснения = "";
	
	Если Категория = 1 Тогда
		ТекстПояснения = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='<b>Активность продаж</b>: недостаточно товаров, которые продавались в течение последнего года.'"));
	ИначеЕсли Категория = 2 Тогда
		ТекстПояснения = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='<b>Активность продаж</b>: имеется большое количество товаров, которые продавались в течение последнего года.'"));
	КонецЕсли;
	
	Ответ = ОписаниеПоказателяКачестваДанныхИнформационнойБазы();
	Ответ.Имя = "АктивностьПродаж";
	Ответ.Категория = Категория;
	Ответ.ВеличинаКачества = ВеличинаКачества;
	Ответ.Представление = ТекстПояснения;
	Ответ.ДополнительнаяИнформация = Новый Структура("КоличествоАктивныхТоваров", КоличествоАктивныхТоваров);
	
	Возврат Ответ;
	
КонецФункции

Функция ПоказательОтрицательныеПродажи(ПроцентОтрицательныхЗаписей)
	
	Категория = 0;
	ВеличинаКачества = 0;
	
	Если ПроцентОтрицательныхЗаписей > 20 Тогда
		Категория = 1;
		ВеличинаКачества = 100 - ПроцентОтрицательныхЗаписей;
	Иначе
		Категория = 2;
		ВеличинаКачества = 100 - (ПроцентОтрицательныхЗаписей / 2);
	КонецЕсли;
	
	ТекстПояснения = "";
	
	Если Категория = 1 Тогда
		ТекстПояснения = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='<b>Отрицательные продажи</b>: есть дни, когда за день вернулось больше товара, чем было продано; отрицательные продажи не будут учитываться сервисом прогнозирования.'"));
	ИначеЕсли Категория = 2 Тогда
		ТекстПояснения = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='<b>Отрицательные продажи</b>: не обнаружены, либо их количество не велико; отрицательные продажи не будут учитываться сервисом прогнозирования.'"));
	КонецЕсли;
	
	Ответ = ОписаниеПоказателяКачестваДанныхИнформационнойБазы();
	Ответ.Имя = "ОтрицательныеПродажи";
	Ответ.Категория = Категория;
	Ответ.ВеличинаКачества = ВеличинаКачества;
	Ответ.Представление = ТекстПояснения;
	
	Возврат Ответ;
	
КонецФункции

Функция ПоказательНовинки(ПроцентНовинок)
	
	Категория = 0;
	ВеличинаКачества = 0;
	
	Если ПроцентНовинок > 30 Тогда
		Категория = 1;
		ВеличинаКачества = 100 - ПроцентНовинок;
	Иначе
		Категория = 2;
		ВеличинаКачества = 100 - (ПроцентНовинок / 2);
	КонецЕсли;
	
	ТекстПояснения = "";
	
	Если Категория = 1 Тогда
		ТекстПояснения = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='<b>Новинки</b>: имеется большое количество товаров, которые продаются менее полугода; качество прогнозирования по ним ограничено.'"));
	ИначеЕсли Категория = 2 Тогда
		ТекстПояснения = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='<b>Новинки</b>: не обнаружены, либо их количество небольшое. Это положительно влияет на качество прогнозирования.'"));
	КонецЕсли;
	
	Ответ = ОписаниеПоказателяКачестваДанныхИнформационнойБазы();
	Ответ.Имя = "Новинки";
	Ответ.Категория = Категория;
	Ответ.ВеличинаКачества = ВеличинаКачества;
	Ответ.Представление = ТекстПояснения;
	
	Возврат Ответ;
	
КонецФункции

Функция ПоказательЧастыеПродажи(ЧастоПродаваемыхТоваров, ЧастичноПродаваемыхТоваров, РедкоПродаваемыхТоваров)
	
	Категория = 0;
	ВеличинаКачества = 0;
	
	ВсегоТоваров = ЧастоПродаваемыхТоваров + ЧастичноПродаваемыхТоваров + РедкоПродаваемыхТоваров;
	Знаменатель = ?(ВсегоТоваров = 0, 1, ВсегоТоваров * 100);
	ЧастоПродаваемыхТоваровВПроцентах = ЧастоПродаваемыхТоваров / Знаменатель;
	
	Если ЧастоПродаваемыхТоваровВПроцентах > 50 Тогда
		Категория = 2;
		ВеличинаКачества = ЧастоПродаваемыхТоваровВПроцентах;
	Иначе
		Категория = 1;
		ВеличинаКачества = 100 - ЧастоПродаваемыхТоваровВПроцентах;
	КонецЕсли;
	
	ТекстПояснения = "";
	
	Если Категория = 1 Тогда
		ТекстПояснения = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='<b>Частота продаж</b>: часто продаваемых товаров менее половины, что может снизить общее качество прогноза продаж.'"));
	ИначеЕсли Категория = 2 Тогда
		ТекстПояснения = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='<b>Частота продаж</b>: имеется большое количество часто продаваемых товаров, что положительно влияет на качество прогнозирования.'"));
	КонецЕсли;
	
	Ответ = ОписаниеПоказателяКачестваДанныхИнформационнойБазы();
	Ответ.Имя = "ЧастотаПродаж";
	Ответ.Категория = Категория;
	Ответ.ВеличинаКачества = ВеличинаКачества;
	Ответ.Представление = ТекстПояснения;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолужирныйШрифт() Экспорт
	Возврат ШрифтыСтиля.ЖирныйШрифт;
КонецФункции

Функция ПолужирныйПодчеркнутыйШрифт() Экспорт
	Возврат ШрифтыСтиля.ЖирныйПодчеркнутыйШрифт;
КонецФункции

#КонецОбласти

#Область Отборы

Функция ПолучитьОтборНоменклатуры(НастройкиОтборов = Неопределено, НастройкиСервиса = Неопределено)
	
	// 1. Отбор по номенклатуре.
	// 2. Отбор по последним месяцам продаж.
	// 3. Отбор по количеству месяцев продаж.
	// 4. Отбор по сегменту номенклатуры.
	
	// Отборы по месяцам продаж реализованы через отбор номенклатуры поскольку они возвращают результат в разрезе номенклатуры.
	
	Ответ = Новый Массив();
	
	Если НастройкиОтборов = Неопределено Тогда
		НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	КонецЕсли;
	Если НастройкиОтборов = Неопределено Тогда
		Возврат Ответ;
	КонецЕсли;
	Если НастройкиСервиса = Неопределено Тогда
		НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Обработки.ПанельУправленияСервисомПрогнозирования.ПолучитьМакет("ФильтрОтправляемыхДанныхНоменклатура");
	
	Если ЕстьОтборНоменклатуры(НастройкиОтборов) Тогда
		
		ИспользоватьТолькоПланы   = НастройкиСервиса.ИспользоватьПлановыеОстаткиИПродажи
			И Не НастройкиСервиса.ИспользоватьРеальныеОстаткиИПродажи;
		ИспользоватьОстаткиИПланы = НастройкиСервиса.ИспользоватьПлановыеОстаткиИПродажи
			И НастройкиСервиса.ИспользоватьРеальныеОстаткиИПродажи;

		ТребуемоеЧислоПоследнихМесяцевПродаж = ЗначениеПоляВОтборе(НастройкиОтборов.Отбор, "ТоварыСПродажамиЗаПоследнееКоличествоМесяцев");
		ТоварыСПродажамиЗаКоличествоМесяцев = ЗначениеПоляВОтборе(НастройкиОтборов.Отбор, "ТоварыСПродажамиЗаКоличествоМесяцев");
		
		ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных[0].Запрос;
		
		ПараметрыДанных = Новый Структура();
		Если ЗначениеЗаполнено(НастройкиСервиса.ДатаНачалаВыгрузкиОстатковИПродаж) Тогда
			
			ПараметрыДанных.Вставить("ДатаНачала", НастройкиСервиса.ДатаНачалаВыгрузкиОстатковИПродаж);
			
			Если ТребуемоеЧислоПоследнихМесяцевПродаж <> Неопределено Тогда
				ДатаНачалаПоПоследнимМесяцамПродаж = ДобавитьМесяц(НастройкиСервиса.ДатаНачалаВыгрузкиОстатковИПродаж, -ТребуемоеЧислоПоследнихМесяцевПродаж);
				// Получаем все товары за последнее ЧислоМесяцев. Важно не запросить месяцев больше, чем доступно учитывая
				// ограничение по ДатаНачалаПродаж.
				Если ДатаНачалаПоПоследнимМесяцамПродаж < НастройкиСервиса.ДатаНачалаВыгрузкиОстатковИПродаж Тогда
					ДатаНачалаПоПоследнимМесяцамПродаж = НастройкиСервиса.ДатаНачалаВыгрузкиОстатковИПродаж;
				КонецЕсли;
				
				ПараметрыДанных.Вставить("ДатаНачалаПоПоследнимМесяцамПродаж", ДатаНачалаПоПоследнимМесяцамПродаж);
			КонецЕсли;
		Иначе
			Если ТребуемоеЧислоПоследнихМесяцевПродаж <> Неопределено Тогда
				ДатаНачалаПоПоследнимМесяцамПродаж = ДобавитьМесяц(ТекущаяДатаСеанса(), -ТребуемоеЧислоПоследнихМесяцевПродаж);
				ПараметрыДанных.Вставить("ДатаНачалаПоПоследнимМесяцамПродаж", ДатаНачалаПоПоследнимМесяцамПродаж);
			КонецЕсли;
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНачала,", ",");
		КонецЕсли;
		Если ЗначениеЗаполнено(НастройкиСервиса.ДатаОкончанияВыгрузкиОстатковИПродаж) Тогда
			ПараметрыДанных.Вставить("ДатаОкончания", НастройкиСервиса.ДатаОкончанияВыгрузкиОстатковИПродаж);
			ПараметрыДанных.Вставить("ДатаОкончанияПоПоследнимМесяцамПродаж", НастройкиСервиса.ДатаОкончанияВыгрузкиОстатковИПродаж);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаОкончания,", ",");
			ПараметрыДанных.Вставить("ДатаОкончанияПоПоследнимМесяцамПродаж", ТекущаяДатаСеанса());
		КонецЕсли;
		ПараметрыДанных.Вставить("ИспользоватьТолькоПланы", ИспользоватьТолькоПланы);
		ПараметрыДанных.Вставить("ИспользоватьОстаткиИПланы", ИспользоватьОстаткиИПланы);
		ПараметрыДанных.Вставить("СценарийПланов", НастройкиСервиса.СценарийПрогнозированияФактИПлан);
		ПараметрыДанных.Вставить("ТребуетсяМесяцевПродаж", ТоварыСПродажамиЗаКоличествоМесяцев);
		ПараметрыДанных.Вставить("ТребуетсяОтборПоПоследнимМесяцамПродаж", ТребуемоеЧислоПоследнихМесяцевПродаж <> Неопределено);
		ПараметрыДанных.Вставить("ТребуетсяОтборПоКоличествуМесяцевПродаж", ТоварыСПродажамиЗаКоличествоМесяцев <> Неопределено);
		
		Для Каждого Параметр Из СхемаКомпоновкиДанных.Параметры Цикл // ПараметрСхемыКомпоновкиДанных.
			Если ПараметрыДанных.Свойство(Параметр.Имя) Тогда
				Параметр.Значение = ПараметрыДанных[Параметр.Имя];
			КонецЕсли;
		КонецЦикла;
		
		СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = ТекстЗапроса;
		
		ИменаОтбираемыхПолей = Новый Массив;
		ИменаОтбираемыхПолей.Добавить("Номенклатура");
		ИменаОтбираемыхПолей.Добавить("ТоварыСПродажамиЗаКоличествоМесяцев");
		ИменаОтбираемыхПолей.Добавить("СегментНоменклатуры");
		
		Если ТребуемоеЧислоПоследнихМесяцевПродаж <> Неопределено Тогда
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НастройкиОтборов, "ТоварПродавалсяВПоследниеМесяцы", Истина, ВидСравненияКомпоновкиДанных.Равно);
			ИменаОтбираемыхПолей.Добавить("ТоварПродавалсяВПоследниеМесяцы");
		КонецЕсли;
		
		Ответ = ПолучитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиОтборов, ИменаОтбираемыхПолей, Неопределено);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьОтборПартнеров(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	КонецЕсли;
	Если НастройкиОтборов = Неопределено Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Обработки.ПанельУправленияСервисомПрогнозирования.ПолучитьМакет("ФильтрОтправляемыхДанныхПартнеры");
	
	Если ЕстьОтборПартнеров(НастройкиОтборов) Тогда
		
		ИменаОтбираемыхПолей = Новый Массив;
		ИменаОтбираемыхПолей.Добавить("Партнер");
		ИменаОтбираемыхПолей.Добавить("СегментКлиентов");
		
		Возврат ПолучитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиОтборов, "Партнер");
	Иначе
		Возврат Новый Массив();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОтборСкладов(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	КонецЕсли;
	Если НастройкиОтборов = Неопределено Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Обработки.ПанельУправленияСервисомПрогнозирования.ПолучитьМакет("ФильтрОтправляемыхДанныхСклады");
	
	Если ЕстьОтборСкладов(НастройкиОтборов) Тогда
		Возврат ПолучитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиОтборов, "Склад");
	Иначе
		Возврат Новый Массив();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОтборОрганизаций(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	КонецЕсли;
	Если НастройкиОтборов = Неопределено Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Обработки.ПанельУправленияСервисомПрогнозирования.ПолучитьМакет("ФильтрОтправляемыхДанныхОрганизации");
	
	Если ЕстьОтборОрганизаций(НастройкиОтборов) Тогда
		Возврат ПолучитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиОтборов, "Организация");
	Иначе
		Возврат Новый Массив();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОтборОпераций(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	КонецЕсли;
	Если НастройкиОтборов = Неопределено Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Обработки.ПанельУправленияСервисомПрогнозирования.ПолучитьМакет("ФильтрОтправляемыхДанныхОперации");
	
	Ответ = Новый Массив();
	Если ЕстьОтборОпераций(НастройкиОтборов) Тогда
		Ответ = ПолучитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиОтборов, "ХозяйственнаяОперация");
	КонецЕсли;
	
	Если Ответ.Количество() = 0 Тогда
		Ответ = ПоддерживаемыеОперацииПродаж();
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьОтборДокументов(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	КонецЕсли;
	Если НастройкиОтборов = Неопределено Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Обработки.ПанельУправленияСервисомПрогнозирования.ПолучитьМакет("ФильтрОтправляемыхДанныхДокументы");
	
	ПромежуточныйРезультат = Новый Массив();
	Если ЕстьОтборДокументов(НастройкиОтборов) Тогда
		
		ПоддерживаемыеДокументы = ПоддерживаемыеДокументыПродажСтрокой();
		ПоддерживаемыеДокументыПродаж = Новый ТаблицаЗначений();
		ПоддерживаемыеДокументыПродаж.Колонки.Добавить("Документ", Новый ОписаниеТипов("Строка"));
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ПоддерживаемыеДокументыПродаж, ПоддерживаемыеДокументы, "Документ");
		
		ВнешниеНаборы = Новый Структура;
		ВнешниеНаборы.Вставить("ВтДокументы", ПоддерживаемыеДокументыПродаж);
		ПромежуточныйРезультат = ПолучитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиОтборов, "Документ", ВнешниеНаборы);
	КонецЕсли;
	
	Ответ = Новый Массив();
	Для Каждого ДокументСтрокой Из ПромежуточныйРезультат Цикл
		Ответ.Добавить(Тип("ДокументСсылка." + ДокументСтрокой.Документ));
	КонецЦикла;
	
	Если Ответ.Количество() = 0 Тогда
		Ответ = ПоддерживаемыеДокументыПродаж();
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ЕстьОтборНоменклатуры(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	КонецЕсли;
	Если НастройкиОтборов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЕстьПолеВОтборе(НастройкиОтборов.Отбор, "Номенклатура")
		Или ЕстьПолеВОтборе(НастройкиОтборов.Отбор, "ТоварыСПродажамиЗаПоследнееКоличествоМесяцев")
		Или ЕстьПолеВОтборе(НастройкиОтборов.Отбор, "ТоварыСПродажамиЗаКоличествоМесяцев")
		Или ЕстьПолеВОтборе(НастройкиОтборов.Отбор, "СегментНоменклатуры");
	
КонецФункции

Функция ЕстьОтборПартнеров(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	КонецЕсли;
	Если НастройкиОтборов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЕстьПолеВОтборе(НастройкиОтборов.Отбор, "Партнер")
		Или ЕстьПолеВОтборе(НастройкиОтборов.Отбор, "СегментКлиентов");
	
КонецФункции

Функция ЕстьОтборСкладов(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	КонецЕсли;
	Если НастройкиОтборов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЕстьПолеВОтборе(НастройкиОтборов.Отбор, "Склад");
	
КонецФункции

Функция ЕстьОтборОрганизаций(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	КонецЕсли;
	Если НастройкиОтборов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЕстьПолеВОтборе(НастройкиОтборов.Отбор, "Организация");
	
КонецФункции

Функция ЕстьОтборОпераций(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	КонецЕсли;
	Если НастройкиОтборов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЕстьПолеВОтборе(НастройкиОтборов.Отбор, "ХозяйственнаяОперация");
	
КонецФункции

Функция ЕстьОтборДокументов(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	КонецЕсли;
	Если НастройкиОтборов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЕстьПолеВОтборе(НастройкиОтборов.Отбор, "Документ");
	
КонецФункции

Функция ЕстьПолеВОтборе(ОтборыНастроек, ИмяПоля)

	Для Каждого ПолеОтбора Из ОтборыНастроек.Элементы Цикл
		ЭтоГруппировка = СервисПрогнозированияПереопределяемыйКлиентСервер.ЭтоГруппировкаКомпоновкиДанных(ПолеОтбора);
		
		Если Не ПолеОтбора.Использование
			Или (Не ЭтоГруппировка
				 И Не ЗначениеЗаполнено(ПолеОтбора.ПравоеЗначение)) Тогда
			Продолжить;
		КонецЕсли;
		Если ЭтоГруппировка Тогда
			Возврат ЕстьПолеВОтборе(ПолеОтбора, ИмяПоля);
		ИначеЕсли СтрНачинаетсяС(Строка(ПолеОтбора.ЛевоеЗначение), ИмяПоля) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗначениеПоляВОтборе(ОтборыНастроек, ИмяПоля)
	
	ИскомоеПоле = Новый ПолеКомпоновкиДанных("ТоварыСПродажамиЗаКоличествоМесяцев");
	Ответ = Неопределено;
	
	Для Каждого ПолеОтбора Из ОтборыНастроек.Элементы Цикл
		ЭтоГруппировка = СервисПрогнозированияПереопределяемыйКлиентСервер.ЭтоГруппировкаКомпоновкиДанных(ПолеОтбора);
		
		Если Не ПолеОтбора.Использование
			Или (Не ЭтоГруппировка
				 И Не ЗначениеЗаполнено(ПолеОтбора.ПравоеЗначение)) Тогда
			Продолжить;
		КонецЕсли;
		Если ЭтоГруппировка Тогда
			Ответ = ЗначениеПоляВОтборе(ПолеОтбора, ИмяПоля);
			Если ЗначениеЗаполнено(Ответ) Тогда
				Прервать;
			КонецЕсли;
		ИначеЕсли ПолеОтбора.ЛевоеЗначение = ИскомоеПоле Тогда
			Ответ = ПолеОтбора.ПравоеЗначение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

Функция ЭлементыОтбораСКДКУдалению(ОтборыНастроек, ПоляКоторыеСледуетОставить)

	КУдалению = Новый Массив();
	Для Каждого ПолеОтбора Из ОтборыНастроек.Элементы Цикл
		ЭтоГруппировка = СервисПрогнозированияПереопределяемыйКлиентСервер.ЭтоГруппировкаКомпоновкиДанных(ПолеОтбора);
		Если ЭтоГруппировка Тогда
			ВложенныйМассивКУдалению = ЭлементыОтбораСКДКУдалению(ПолеОтбора, ПоляКоторыеСледуетОставить);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КУдалению, ВложенныйМассивКУдалению);
		Иначе
			ПолеНайдено = Ложь;
			Для Каждого ИмяОтбираемогоПоля Из ПоляКоторыеСледуетОставить Цикл
				ПолеНайдено = ПолеНайдено Или СтрНачинаетсяС(Строка(ПолеОтбора.ЛевоеЗначение), ИмяОтбираемогоПоля);
			КонецЦикла;
			Если Не ПолеНайдено Тогда
				КУдалению.Добавить(ПолеОтбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КУдалению;
	
КонецФункции

Функция ПолучитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиОтборов,
	ИменаОтбираемыхПолей = Неопределено,
	ВнешниеНаборыДанных = Неопределено)
	
	ПараметрыСКД = КомпоновкаДанныхСервер.ПараметрыВыгрузитьРезультатСКД();
	
	НастройкиСхемы = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(НастройкиСхемы.Отбор, НастройкиОтборов.Отбор);
	
	ЭлементыОтбора = НастройкиСхемы.Отбор.Элементы; // КоллекцияЭлементовОтбораКомпоновкиДанных -
	КУдалению      = Новый Массив();
	
	Если ИменаОтбираемыхПолей <> Неопределено Тогда
		
		ТребуемыеПоля = Новый Массив();
		Если ТипЗнч(ИменаОтбираемыхПолей) = Тип("Массив") Тогда
			ТребуемыеПоля = ИменаОтбираемыхПолей;
		Иначе
			ТребуемыеПоля = СтрРазделить(ИменаОтбираемыхПолей, ", ", Ложь);
		КонецЕсли;
		
		ЭлементыОтбораКУдалению = ЭлементыОтбораСКДКУдалению(НастройкиСхемы.Отбор, ТребуемыеПоля);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КУдалению, ЭлементыОтбораКУдалению);
		
	Иначе // Проверка некорректного заполнения отборов загрузки прогноза и номенклатуры видов планов.
		
		Для Индекс = 0 По ЭлементыОтбора.Количество() - 1 Цикл
			ЭлементОтбора = ЭлементыОтбора[Индекс];
			Если Не ЭлементОтбора.Использование Тогда
				КУдалению.Добавить(ЭлементОтбора);
				Продолжить;
			ИначеЕсли Не ЗначениеЗаполнено(ЭлементОтбора.ЛевоеЗначение)
				Или Не ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
				КУдалению.Добавить(ЭлементОтбора);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого УдаляемыйЭлемент Из КУдалению Цикл
		НастройкиСхемы.Отбор.Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	ПараметрыСКД.СхемаКомпоновки = СхемаКомпоновкиДанных;
	ПараметрыСКД.НастройкиКомпоновки = НастройкиСхемы;
	ПараметрыСКД.ВнешниеНаборыДанных = ВнешниеНаборыДанных;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатСКД = КомпоновкаДанныхСервер.ВыгрузитьРезультатСКД(ПараметрыСКД);
	УстановитьПривилегированныйРежим(Ложь);
	Возврат РезультатСКД;
	
КонецФункции

#КонецОбласти

#Область РекламаСервиса

// Показывать рекламу сервиса прогнозирования.
//
// Параметры:
//  ТекущийПользователь - СправочникСсылка.Пользователи - 
//  НастройкиСервиса - см. СервисПрогнозирования.ПолучитьНастройкиСервиса
//
// Возвращаемое значение:
//  Булево
Функция ВозможенПоказРекламы(ТекущийПользователь, НастройкиСервиса)
	
	ПоказыватьРекламу = Не ЗначениеЗаполнено(НастройкиСервиса.ТокенПриложения)
		И НастройкиСервиса.ПользователиЗакрывшиеРекламу.Найти(ТекущийПользователь) = Неопределено;
	Возврат ПоказыватьРекламу;
	
КонецФункции

// Текст рекламы возможности использования сервиса прогнозирования.
//
// Возвращаемое значение:
//  ФорматированнаяСтрока
Функция ТекстРекламыСервиса()
	
	ТекстРекламы = "На основе данных истории продаж в информационной базе, возможно построение прогнозов продаж для планирования продаж,
		|закупок, производства и оптимизации запасов с помощью сервиса <a href=""ОткрытьМастерПодключения"">1С:Прогнозирование продаж</a>.";
	Возврат СтроковыеФункции.ФорматированнаяСтрока(ТекстРекламы);
	
КонецФункции

#КонецОбласти

#Область Тексты

Функция ТекстНеРеализованаВыгрузкаДопРеквизитов(ИмяКоллекции)
	ТекстШаблона = НСтр("ru='Не реализована настройка выгрузки дополнительных реквизитов для коллекции: %1'");
	Возврат СтрШаблон(ТекстШаблона, ИмяКоллекции);
КонецФункции

Функция ТекстНеБылСопоставленТоварПоУИД(ТекстИдентификатора)
	ТекстШаблона = НСтр("ru='Не найдена позиция номенклатуры соответствующая идентификатору: %1'");
	Возврат СтрШаблон(ТекстШаблона, ТекстИдентификатора);
КонецФункции

Функция ТекстНеБылаСопоставленаТоварнаяКатегорияПоУИД(ТекстИдентификатора)
	
	ТекстШаблона = НСтр("ru='Не найдена позиция товарной категории соответствующая идентификатору: %1'");
	Возврат СтрШаблон(ТекстШаблона, ТекстИдентификатора);
	
КонецФункции

#КонецОбласти

#КонецОбласти