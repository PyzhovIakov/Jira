#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ОблачныйЭДО

// Следующие процедуры и функции предназначены для интеграции подсистемы ОблачныйЭДО.

// Возвращает результат добавления подписей к файлам электронных документов.
// 
// Параметры:
//  ПодписанныеСообщения - Массив из см. НовоеОписаниеПодписанногоСообщения
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  
// Возвращаемое значение:
//  См. НовыйРезультатДействийПоЭДО
Функция ДобавитьПодписиДокументовЭДО(ПодписанныеСообщения, КонтекстДиагностики) Экспорт
	
	РезультатДействий = НовыйРезультатДействийПоЭДО(КонтекстДиагностики);
	
	ЭлектронныеДокументыЭДОСлужебный.ОбработатьПодписанныеСообщения(ПодписанныеСообщения, РезультатДействий);
	
	Возврат РезультатДействий;
	
КонецФункции

// Возвращает данные сообщений электронных документов для подписания.
//
// Параметры:
//  ДокументыЭДО - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ОтпечаткиСертификатов - См. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ОбработатьТолькоИзвещения - Булево
// 
// Возвращаемое значение:
//  См. ЭлектронныеДокументыЭДОСлужебный.ДанныеДокументовДляПодписания
Функция ДанныеДляПодписанияСообщенийПоДокументамЭДО(ДокументыЭДО, ОтпечаткиСертификатов, КонтекстДиагностики, ОбработатьТолькоИзвещения = Ложь) Экспорт
	
	ПараметрыВыполнения = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы = ДокументыЭДО;
	ПараметрыВыполнения.ОтпечаткиСертификатов = ОтпечаткиСертификатов;
	ПараметрыВыполнения.ОбработатьТолькоИзвещения = ОбработатьТолькоИзвещения;
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	ДанныеДляПодписания = ЭлектронныеДокументыЭДОСлужебный.ДанныеДокументовДляПодписания(
		ПараметрыВыполнения, КонтекстДиагностики);
	
	ЭлектронныеДокументыЭДОСлужебный.ОбработатьОшибкиДанныхДляПодписания(
		ДанныеДляПодписания.Ошибки, КонтекстДиагностики, ПараметрыВыполнения);
	
	Возврат ДанныеДляПодписания;
	
КонецФункции

// Возвращает выбранные электронные документы для формирования ответного титула.
//
// Параметры:
//  ОбъектыДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
Функция ВыборкаДокументовДляФормированияОтвета(ОбъектыДействий) Экспорт
	
	Возврат ЭлектронныеДокументыЭДОСлужебный.ВыборкаДокументовДляФормированияОтвета(ОбъектыДействий);
	
КонецФункции

// Формирует ответный титул по электронному документу.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//  ДанныеОбъектаУчета - ДеревоЗначений
//                     - См. ИнтерфейсДокументовЭДОКлиентСервер.ДанныеРучногоФормированияТитула
Процедура СформироватьОтветПоДокументу(ЭлектронныйДокумент, РезультатДействий, ДанныеОбъектаУчета = Неопределено) Экспорт
	
	ЭлектронныеДокументыЭДОСлужебный.СформироватьОтветПоДокументу(ЭлектронныйДокумент, РезультатДействий,
		ДанныеОбъектаУчета);
	
КонецПроцедуры

// Формирует ответные титулы по электронным документам пакета.
//
// Параметры:
//  ПакетДокументов - УникальныйИдентификатор
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//  ДанныеОбъектовУчетаПоДокументам - Соответствие из КлючИЗначение:
//                                    * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//                                    * Значение - ДеревоЗначений
//                                  - См. ИнтерфейсДокументовЭДОКлиентСервер.ДанныеРучногоФормированияТитула
Процедура СформироватьОтветПоДокументамПакета(ПакетДокументов, РезультатДействий, ДанныеОбъектовУчетаПоДокументам = Неопределено) Экспорт
	
	ЭлектронныеДокументыЭДОСлужебный.СформироватьОтветПоДокументамПакета(ПакетДокументов, РезультатДействий,
		ДанныеОбъектовУчетаПоДокументам);
	
КонецПроцедуры

// См. ЭлектронныеДокументыЭДОСлужебный.СоздатьДокументПоФайлу
//
Функция СоздатьДокументПоФайлу(ПараметрыСоздания, ОписаниеФайла) Экспорт
	Возврат ЭлектронныеДокументыЭДОСлужебный.СоздатьДокументПоФайлу(ПараметрыСоздания, ОписаниеФайла);
КонецФункции

// См. ЭлектронныеДокументыЭДОСлужебный.ПереформироватьДокументПоФайлу
//
Функция ПереформироватьДокументПоФайлу(ЭлектронныйДокумент, ПараметрыПереформирования, ОписаниеФайла) Экспорт
	
	Возврат ЭлектронныеДокументыЭДОСлужебный.ПереформироватьДокументПоФайлу(ЭлектронныйДокумент,
		ПараметрыПереформирования, ОписаниеФайла);
		
КонецФункции

// См. ЭлектронныеДокументыЭДОСлужебный.НовыеПараметрыПереформированияДокументаПоФайлу
//
Функция НовыеПараметрыПереформированияДокументаПоФайлу() Экспорт
	
	Возврат ЭлектронныеДокументыЭДОСлужебный.НовыеПараметрыПереформированияДокументаПоФайлу();
	
КонецФункции

// Возвращает ссылку на основной файл информации отправителя.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  					- ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы,Неопределено
// 
Функция ОсновнойФайлИнформацииОтправителя(ЭлектронныйДокумент) Экспорт
	Возврат ЭлектронныеДокументыЭДОСлужебный.ОсновнойФайлИнформацииОтправителя(ЭлектронныйДокумент)
КонецФункции

// Возвращает ссылку на основной файл по типу элемента регламента.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//                      - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
// 
// Возвращаемое значение:
//  СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы,Неопределено
Функция ОсновнойФайлПоТипуЭлементаРегламента(ЭлектронныйДокумент, ТипЭлементаРегламента) Экспорт
	Возврат ЭлектронныеДокументыЭДОСлужебный.ОсновнойФайлПоТипуЭлементаРегламента(
		ЭлектронныйДокумент, ТипЭлементаРегламента);
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбщегоНазначения

// Возвращает свойства сообщения ЭДО.
// 
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
// 
// Возвращаемое значение:
//  См. ЭлектронныеДокументыЭДОСлужебный.СвойстваСообщения
//
Функция СвойстваСообщения(Сообщение) Экспорт
	Возврат ЭлектронныеДокументыЭДОСлужебный.СвойстваСообщения(Сообщение);
КонецФункции

// Определяет, является ли переданная ссылка ссылкой на электронный документ.
// 
// Параметры:
//  Ссылка - ЛюбаяСсылка
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоЭлектронныйДокумент(Ссылка) Экспорт
	
	Возврат ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО")
		Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящийЭДО");
	
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоВходящийЭДО(ЭлектронныйДокумент) Экспорт
	Возврат ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО");
КонецФункции

// Возвращает сообщения электронного документа по переданному отбору.
// 
// Параметры:
//  Документы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  Отбор - см. НовыйОтборСообщенийДокументов
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//    * Ссылка - ДокументСсылка.СообщениеЭДО
//    * Статус - ПеречислениеСсылка.СтатусыСообщенийЭДО
//    * Состояние - ПеречислениеСсылка.СостоянияСообщенийЭДО
//    * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//    * Дата - Дата
//    * Направление - ПеречислениеСсылка.НаправленияЭДО
//    * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//    * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, 
//    						- ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    * ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//    * ОсновнойФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//    * ПолноеИмяФайла - Строка
//    * ДатаИзмененияСтатуса - Дата
//    * ВидСообщения - СправочникСсылка.ВидыДокументовЭДО
//
Функция СообщенияДокументовПоОтбору(Документы, Отбор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", Документы);
	
	Если ЗначениеЗаполнено(Отбор.Состояния) Тогда
		Запрос.УстановитьПараметр("Состояния", Отбор.Состояния);
	КонецЕсли;
	Если ЗначениеЗаполнено(Отбор.ТипыЭлементовРегламента) Тогда
		Запрос.УстановитьПараметр("ТипыЭлементовРегламента", Отбор.ТипыЭлементовРегламента);
	КонецЕсли;
	
	Запрос.Текст = ЭлектронныеДокументыЭДОСлужебный.ТекстЗапросаСообщенийДокументов(Отбор);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ПроверкаПрав

// Возвращает признак наличия прав на чтение электронных документов.
// 
// Возвращаемое значение:
// 	Булево - признак наличия прав на чтение электронных документов.
Функция ЕстьПравоЧтенияДокументов() Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли; 
	
	ЕстьПраво = Истина;
		
	// Основные объекты метаданных, доступ к которым определяет доступ к элементарной функции.
	ОбъектыЭлементарнойФункции = Новый Массив;
	ОбъектыЭлементарнойФункции.Добавить(Метаданные.Документы.СообщениеЭДО);
	
	Для каждого Объект Из ОбъектыЭлементарнойФункции Цикл
		
		Если Не ПравоДоступа("Чтение", Объект) Тогда
			ЕстьПраво = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ЕстьПраво;
	
КонецФункции

// Возвращает признак наличия прав на обработку электронных документов.
// 
// Параметры:
// 	КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
// 	Булево - признак наличия прав на обработку электронных документов.
Функция ЕстьПравоОбработкиДокументов(КонтекстДиагностики = Неопределено) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = Истина;
	
	// Основные объекты метаданных, доступ к которым определяет доступ к элементарной функции.
	ОбъектыЭлементарнойФункции = Новый Массив;
	ОбъектыЭлементарнойФункции.Добавить(Метаданные.Документы.СообщениеЭДО);
	
	Для каждого Объект Из ОбъектыЭлементарнойФункции Цикл
		
		Если Не ПравоДоступа("Изменение", Объект) Тогда
			ЕстьПраво = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьПраво И КонтекстДиагностики <> Неопределено Тогда
		ТекстСообщения = ОбработкаНеисправностейБЭДКлиентСервер.ТекстСообщенияОНарушенииПравДоступа();
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(НСтр("ru = 'Выполнение действий по электронным документам'"),
			ВидОшибкиНетПравНаОбработкуДокументов(), ТекстСообщения, ТекстСообщения);
		ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Булево
Функция ВыполнениеДействийПоЭДОЗапрещено(КонтекстДиагностики = Неопределено) Экспорт
	
	Если Не НастройкиЭДО.ИспользуетсяОбменЭлектроннымиДокументами(КонтекстДиагностики)
		ИЛИ Не ЕстьПравоОбработкиДокументов(КонтекстДиагностики)
		ИЛИ ИнтеграцияБСПБЭД.ПользовательНедействителен(КонтекстДиагностики) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Форматы

// Возвращает структуру отбора сведений по форматам электронных документов.
// 
// Возвращаемое значение:
//  См. ФорматыЭДО.НовыйОтборФорматовЭлектронныхДокументов
//
Функция НовыйОтборФорматовЭлектронныхДокументов() Экспорт
	Возврат ФорматыЭДО.НовыйОтборФорматовЭлектронныхДокументов();
КонецФункции

// Возвращает сведения о форматах электронных документов.
// 
// Параметры:
//  Отбор - Неопределено
//        - См. НовыйОтборФорматовЭлектронныхДокументов
//
// Возвращаемое значение:
//  См. ФорматыЭДО.ФорматыЭлектронныхДокументов
//
Функция ФорматыЭлектронныхДокументов(Отбор = Неопределено) Экспорт
	Возврат ФорматыЭДО.ФорматыЭлектронныхДокументов(Отбор);
КонецФункции

// Возвращает описание запроса актуальных форматов.
// 
// Параметры:
//  ИмяВременнойТаблицы - Строка - имя временной таблице для обращения в основном запросе.
// Возвращаемое значение:
//  См. ФорматыЭДО.ЗапросАктуальныхФорматов
Функция ЗапросАктуальныхФорматов(ИмяВременнойТаблицы) Экспорт
	Возврат ФорматыЭДО.ЗапросАктуальныхФорматов(ИмяВременнойТаблицы);
КонецФункции

// Возвращает описание запроса форматов электронных документов.
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка - имя временной таблице для обращения в основном запросе.
// Возвращаемое значение:
// 	См. ФорматыЭДО.ЗапросФорматовЭлектронныхДокументов
Функция ЗапросФорматовЭлектронныхДокументов(ИмяВременнойТаблицы) Экспорт
	Возврат ФорматыЭДО.ЗапросФорматовЭлектронныхДокументов(ИмяВременнойТаблицы);
КонецФункции

// Обновляет форматы электронных документов по предоставленным данным.
// 
// Параметры:
// 	Форматы - ТаблицаЗначений -
// 	ДатаИзменения - Дата -
Процедура ОбновитьФорматыЭлектронныхДокументов(Форматы, ДатаИзменения) Экспорт
	ФорматыЭДО.ОбновитьФорматыЭлектронныхДокументов(Форматы, ДатаИзменения);
КонецПроцедуры

// Обновляет связи видов и форматов электронных документов по предоставленным данным.
// 
// Параметры:
// 	СвязьВидовИФорматов - ТаблицаЗначений -
// 	ДатаИзменения - Дата -
Процедура ОбновитьСвязьВидовИФорматовЭлектронныхДокументов(СвязьВидовИФорматов, ДатаИзменения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьЗаписи
	|ИЗ
	|	РегистрСведений.СвязьВидовИФорматовДокументовЭДО КАК СвязьВидовИФорматовДокументовЭДО";
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	ЕстьЗаписи = Не РезультатЗапроса.Пустой();
	
	Если СвязьВидовИФорматов.ДатаПоследнегоИзменения <> ДатаИзменения ИЛИ Не ЕстьЗаписи Тогда
		
		ЗагрузитьСвязьВидовИФорматовЭлектронныхДокументов(СвязьВидовИФорматов);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  СвязьВидовИФорматов - Структура:
//  * СвязьВидовИФорматовЭД - ТаблицаЗначений:
//    ** ВидЭлектронногоДокумента - СправочникСсылка.ВидыДокументовЭДО
//    ** ФорматЭлектронногоДокумента - Строка
//    ** Приоритет - Число
Процедура ЗагрузитьСвязьВидовИФорматовЭлектронныхДокументов(СвязьВидовИФорматов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокСвязейСервиса.ВидЭлектронногоДокумента КАК ВидДокумента,
	|	СписокСвязейСервиса.ФорматЭлектронногоДокумента КАК Формат,
	|	СписокСвязейСервиса.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ СписокСвязейСервиса
	|ИЗ
	|	&СписокСвязейСервиса КАК СписокСвязейСервиса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокСвязейСервиса.ВидДокумента КАК ВидДокумента,
	|	ФорматыЭлектронныхДокументов.Формат КАК Формат,
	|	СписокСвязейСервиса.Приоритет КАК Приоритет
	|ИЗ
	|	СписокСвязейСервиса КАК СписокСвязейСервиса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов
	|		ПО ((ВЫРАЗИТЬ(СписокСвязейСервиса.Формат КАК СТРОКА(50))) = ФорматыЭлектронныхДокументов.ИдентификаторСервиса)";
	
	Запрос.УстановитьПараметр("СписокСвязейСервиса", СвязьВидовИФорматов.СвязьВидовИФорматовЭД);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	Набор = РегистрыСведений.СвязьВидовИФорматовДокументовЭДО.СоздатьНаборЗаписей();
	Набор.Загрузить(РезультатЗапроса.Выгрузить());
	
	Набор.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает таблицу с данными для расшифровки формата и вида ЭД в Формат.
//
// Возвращаемое значение:
//  См. ФорматыЭДО.РасшифровкаВариантовЗаполненияФорматовЭДО.
Функция РасшифровкаВариантовЗаполненияФорматовЭДО() Экспорт
	
	Возврат ФорматыЭДО.РасшифровкаВариантовЗаполненияФорматовЭДО();
	
КонецФункции

// Возвращает формат по умолчанию для указанного вида электронного документа
// 
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - Ссылка на вид электронного документа.
// 
// Возвращаемое значение:
//  Строка - Идентификатор формата электронного документа.
Функция ФорматПоУмолчанию(ВидДокумента) Экспорт
	Отбор = НовыйОтборЗапросаФорматовПоУмолчанию();
	Отбор.ВидДокумента = "= &ОтборВидДокумента";
	ОписаниеЗапроса = ЗапросФорматовПоУмолчанию("", Отбор);
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ОтборВидДокумента", ВидДокумента);
	РезультатЗапроса = ОбщегоНазначенияБЭД.ВыполнитьЗапрос(ОписаниеЗапроса);
	ВыборкаФормата = РезультатЗапроса.Выбрать();
	Если ВыборкаФормата.Следующий() Тогда
		Возврат ВыборкаФормата.Формат;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

// Возвращает пустую структуру для отбора форматов по умолчанию.
// 
// Возвращаемое значение:
// 	См. ФорматыЭДО.НовыйОтборЗапросаФорматовПоУмолчанию
Функция НовыйОтборЗапросаФорматовПоУмолчанию() Экспорт
	Возврат ФорматыЭДО.НовыйОтборЗапросаФорматовПоУмолчанию();
КонецФункции

// Возвращает описание запроса, в результате которого будут содержаться форматы по умолчанию.
// Запрос содержит следующие поля:
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  Формат - Строка.
//
// Параметры:
// 	ИмяВременнойТаблицы - Строка - таблица, в которую будет помещен результат запроса
// 	Отбор - См. НовыйОтборЗапросаФорматовПоУмолчанию
// Возвращаемое значение:
// 	См. ФорматыЭДО.ЗапросФорматовПоУмолчанию
Функция ЗапросФорматовПоУмолчанию(ИмяВременнойТаблицы = "", Отбор = Неопределено) Экспорт
	Возврат ФорматыЭДО.ЗапросФорматовПоУмолчанию(ИмяВременнойТаблицы, Отбор);
КонецФункции

// Возвращает поддерживаемые форматы электронных документов.
//
// Возвращаемое значение:
// 	См. ФорматыЭДО.ПоддерживаемыеФорматы
Функция ПоддерживаемыеФорматы() Экспорт
	Возврат ФорматыЭДО.ПоддерживаемыеФорматы();
КонецФункции

// Формирует пустую структура параметров получения данных электронного документа.
//
// Возвращаемое значение:
// 	См. ФорматыЭДО.НовыеПараметрыПолученияДанныхДокумента
Функция НовыеПараметрыПолученияДанныхДокумента() Экспорт
	Возврат ФорматыЭДО.НовыеПараметрыПолученияДанныхДокумента();
КонецФункции

// Параметры:
//  Формат - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоСтандартныйФормат(Формат) Экспорт
	Возврат ФорматыЭДО.ЭтоСтандартныйФормат(Формат);
КонецФункции

// Параметры:
//  ИмяПоля - Строка
//  Формат - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоСлужебноеИмяДополнительногоПоля(ИмяПоля, Формат) Экспорт
	Возврат ФорматыЭДО.ЭтоСлужебноеИмяДополнительногоПоля(ИмяПоля, Формат);
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ПрефиксСлужебныхДополнительныхДанных() Экспорт
	Возврат ФорматыЭДО.ПрефиксДополнительныхДанныхЭлектронныхДокументов();
КонецФункции

// Параметры:
//  ДеревоРегистрационнойИнформации - См. ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента
//  Ошибки - Массив из Строка
Процедура ПроверитьРегистрационныеДанныеДляОператораЭДО(ДеревоРегистрационнойИнформации, Ошибки) Экспорт
	
	ФорматыЭДО.ПроверитьРегистрационныеДанныеДляОператораЭДО(ДеревоРегистрационнойИнформации, Ошибки);
	
КонецПроцедуры

// Параметры:
//  ПараметрыПолучения - см. ДанныеДокументаДляЗагрузкиПросмотра
// 
// Возвращаемое значение:
//  см. ФорматыЭДО.ДанныеЭлектронногоДокумента
Функция ДанныеДокументаДляЗагрузкиПросмотра(ПараметрыПолучения) Экспорт
	Возврат ФорматыЭДО.ДанныеЭлектронногоДокумента(ПараметрыПолучения);
КонецФункции

// см. ОбменСКонтрагентами.ПодключитьИспользованиеФорматаДоговорныхДокументовXML
Процедура ПодключитьИспользованиеФорматаДоговорныхДокументовXML() Экспорт
	
	ФорматыЭДО.ПодключитьИспользованиеФорматаДоговорныхДокументовXML();
	
КонецПроцедуры

// Параметры:
//  СодержаниеСообщения - см. ЭлектронныеДокументыЭДО.СодержаниеСообщения
// 
// Возвращаемое значение:
//  Булево - Загрузка формата поддерживается
Функция ЗагрузкаФорматаПоддерживается(Знач СодержаниеСообщения) Экспорт
	
	Возврат Не (ЗначениеЗаполнено(СодержаниеСообщения) И ЗначениеЗаполнено(СодержаниеСообщения.ТипРегламента)
		И СодержаниеСообщения.ТипРегламента <> Перечисления.ТипыРегламентовЭДО.Неформализованный
		И ЗначениеЗаполнено(СодержаниеСообщения.Формат)
		И Не ЭтоСтандартныйФормат(СодержаниеСообщения.Формат));
		
КонецФункции

#КонецОбласти

#Область Направления

// Возвращаемое значение:
//  Структура:
//  * Внутренний - ПеречислениеСсылка.НаправленияЭДО
//  * Входящий - ПеречислениеСсылка.НаправленияЭДО
//  * Интеркампани - ПеречислениеСсылка.НаправленияЭДО
//  * Исходящий - ПеречислениеСсылка.НаправленияЭДО
Функция ДоступныеНаправленияДокументов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Внутренний", Перечисления.НаправленияЭДО.Внутренний);
	Результат.Вставить("Входящий", Перечисления.НаправленияЭДО.Входящий);
	Результат.Вставить("Интеркампани", Перечисления.НаправленияЭДО.Интеркампани);
	Результат.Вставить("Исходящий", Перечисления.НаправленияЭДО.Исходящий);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ТипыДокументов

// Возвращает типы электронных документов, для которых доступно формирование на основании объекта учета.
// 
// Возвращаемое значение:
// 	Структура:
// * АктВыполненныхРабот - ПеречислениеСсылка.ТипыДокументовЭДО
// * АктНаПередачуПрав - ПеречислениеСсылка.ТипыДокументовЭДО
// * АктОРасхождениях - ПеречислениеСсылка.ТипыДокументовЭДО
// * АктСверкиВзаиморасчетов - ПеречислениеСсылка.ТипыДокументовЭДО
// * ДоговорныйДокумент - ПеречислениеСсылка.ТипыДокументовЭДО
// * ЗаказТовара - ПеречислениеСсылка.ТипыДокументовЭДО
// * ЗапросКоммерческихПредложений - ПеречислениеСсылка.ТипыДокументовЭДО
// * КаталогТоваров - ПеречислениеСсылка.ТипыДокументовЭДО
// * КоммерческоеПредложение - ПеречислениеСсылка.ТипыДокументовЭДО
// * КорректировочныйСчетФактура - ПеречислениеСсылка.ТипыДокументовЭДО
// * ОтветНаЗаказ - ПеречислениеСсылка.ТипыДокументовЭДО
// * ОтчетОПродажахКомиссионногоТовара - ПеречислениеСсылка.ТипыДокументовЭДО
// * ОтчетОСписанииКомиссионногоТовара - ПеречислениеСсылка.ТипыДокументовЭДО
// * ПрайсЛист - ПеречислениеСсылка.ТипыДокументовЭДО
// * СоглашениеОбИзмененииСтоимости - ПеречислениеСсылка.ТипыДокументовЭДО
// * СчетНаОплату - ПеречислениеСсылка.ТипыДокументовЭДО
// * СчетФактура - ПеречислениеСсылка.ТипыДокументовЭДО
// * ТоварнаяНакладная - ПеречислениеСсылка.ТипыДокументовЭДО
// * РеквизитыОрганизации - ПеречислениеСсылка.ТипыДокументовЭДО
// * УПД - ПеречислениеСсылка.ТипыДокументовЭДО
// * УКД - ПеречислениеСсылка.ТипыДокументовЭДО
// * АктПриемкиСтроительныхРаботУслуг - ПеречислениеСсылка.ТипыДокументовЭДО
// * КонтрактЕИС - ПеречислениеСсылка.ТипыДокументовЭДО
// * ДокументПриемкиЕИСУПД - ПеречислениеСсылка.ТипыДокументовЭДО
// * ДокументПриемкиЕИСУКД - ПеречислениеСсылка.ТипыДокументовЭДО
// * РезультатРассмотренияАктаПриемкиЕИСУПД - ПеречислениеСсылка.ТипыДокументовЭДО
// * РезультатРассмотренияАктаПриемкиЕИСУКД - ПеречислениеСсылка.ТипыДокументовЭДО
// * СведенияОРеализацииКомиссионером - ПеречислениеСсылка.ТипыДокументовЭДО
// * СведенияОЗакупкеКомиссионером - ПеречислениеСсылка.ТипыДокументовЭДО
// * КорректировкаСведенийОРеализацииКомиссионером - ПеречислениеСсылка.ТипыДокументовЭДО
// * КорректировкаСведенийОЗакупкеКомиссионером - ПеречислениеСсылка.ТипыДокументовЭДО
// * ВозвратТоваровМеждуОрганизациями - ПеречислениеСсылка.ТипыДокументовЭДО
// * ПередачаТоваровМеждуОрганизациями - ПеречислениеСсылка.ТипыДокументовЭДО
// * МашиночитаемаяДоверенность - ПеречислениеСсылка.ТипыДокументовЭДО
// * ДокументПредприятия - ПеречислениеСсылка.ТипыДокументовЭДО
//
Функция СтандартныеТипыДокументов() Экспорт
	Возврат Перечисления.ТипыДокументовЭДО.СтандартныеТипыДокументов();
КонецФункции

// Возвращает доступные типы для электронного документа произвольного формата.
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ТипыДокументовЭДО - типы электронного документа.
Функция ТипыДокументовПроизвольногоФормата() Экспорт
	Возврат Перечисления.ТипыДокументовЭДО.ТипыДокументовПроизвольногоФормата();
КонецФункции

// Определяет является ли тип документа стандартным.
// 
// Параметры:
// 	ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - Тип электронного документа.
// Возвращаемое значение:
// 	Булево - Тип является стандартным.
//
Функция ЭтоСтандартныйТипДокумента(ТипДокумента) Экспорт
	Возврат Перечисления.ТипыДокументовЭДО.ЭтоСтандартный(ТипДокумента);
КонецФункции

// Определяет является ли тип документа прикладным.
// 
// Параметры:
// 	ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - Тип электронного документа.
// Возвращаемое значение:
// 	Булево - Признак прикладного типа.
//
Функция ЭтоПрикладнойТипДокумента(ТипДокумента) Экспорт
	Возврат Перечисления.ТипыДокументовЭДО.ЭтоПрикладной(ТипДокумента);
КонецФункции

// Определяет является ли тип документа типом документов интеркампани.
// 
// Параметры:
// 	ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - Тип электронного документа.
// Возвращаемое значение:
// 	Булево - Признак типа документа интеркампани.
//
Функция ЭтоТипДокументаИнтеркампани(ТипДокумента) Экспорт
	Возврат Перечисления.ТипыДокументовЭДО.ЭтоИнтеркампани(ТипДокумента);
КонецФункции

// Определяет является ли тип документа типом служебных документов.
// 
// Параметры:
// 	ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - Тип электронного документа.
// Возвращаемое значение:
// 	Булево - Признак типа служебного документа.
//
Функция ЭтоТипДокументаСлужебный(ТипДокумента) Экспорт
	Возврат Перечисления.ТипыДокументовЭДО.ЭтоСлужебный(ТипДокумента);
КонецФункции

// Определяет тип служебного документа по типу элемента регламента.
// 
// Параметры:
// 	ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - Тип элемента регламента.
// Возвращаемое значение:
// 	ПеречислениеСсылка.ТипыДокументовЭДО - Тип электронного документа.
Функция ТипСлужебногоДокумента(ТипЭлементаРегламента) Экспорт
	
	ТипДокумента = Перечисления.ТипыДокументовЭДО.ПустаяСсылка();
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	Если ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИОП
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИОП_ПДП_ИОП
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя_ПДП_ИОП
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДО_ИОП
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДП_ИОП
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ_ИОП
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя_ИОП
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки_ИОП
		Или (МодульОбменСГИСЭПД <> Неопределено И МодульОбменСГИСЭПД.ЭтоИОП(ТипЭлементаРегламента)) Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении;
	ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДО
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДП
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя_ПДП 
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя_ПДО 
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки_ПДП
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки_ПДО
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ_ПДО
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ_ПДП Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.ПодтверждениеОператораЭДО;
	ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ
		Или (МодульОбменСГИСЭПД <> Неопределено И МодульОбменСГИСЭПД.ЭтоУОУ(ТипЭлементаРегламента)) Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении;
	ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.ПредложениеОбАннулировании;
	КонецЕсли;
	
	Возврат ТипДокумента;
	
КонецФункции

// Возвращает наличие регламента обмена для типа документа ЭДО.
// 
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ДляТипаДокументаЕстьФорматНоНетРегламента(ТипДокумента) Экспорт
	
	Если 	ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорныйДокумент
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетНаОплату
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.АктОРасхождениях
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.КоммерческоеПредложение Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Булево - Если истина документа поддерживает загрузку из файла
Функция ТипДокументаПоддерживаетЗагрузкуИзФайлаВФормализованномВиде(ТипДокумента) Экспорт
	Возврат Перечисления.ТипыДокументовЭДО.ПоддерживаетЗагрузкуИзФайлаВФормализованномВиде(ТипДокумента);
КонецФункции

// Возвращает Типы электронных документов по Видам электронных документов.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - СправочникСсылка.ВидыДокументовЭДО - Ссылка на вид электронного документа.
//   * Значение - ПеречислениеСсылка.ТипыДокументовЭДО - Ссылка на тип документа.
//
Функция ТипыДокументовПоВиду() Экспорт
	
	Результат = Новый Соответствие;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВидыДокументовЭДО.Ссылка КАК ВидДокумента,
	|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента
	|ИЗ
	|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ВидДокумента, Выборка.ТипДокумента);
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВидыДокументов

// Возвращает информацию о наличии для вида документа утвержденного формализованного формата ФНС.
// 
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - Вид документа
// 
// Возвращаемое значение:
//  Булево - Для вида документа есть формализованный формат ФНС
//
Функция ДляВидаДокументаЕстьФормализованныйФорматФНС(Знач ВидДокумента) Экспорт
	
	ВидДокументаДляПоиска = ВидДокумента;
	ТипДокументаДляПоиска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокументаДляПоиска, "ТипДокумента");
	
	// Типы документов, для которых есть формат но нет регламента - проверять не будем
	Если ДляТипаДокументаЕстьФорматНоНетРегламента(ТипДокументаДляПоиска) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидДокументаДляПоиска = ВидДокументаФормализованногоФорматаФНС(ВидДокумента);
	
	Если ВидДокументаДляПоиска = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтборФорматов = НовыйОтборФорматовЭлектронныхДокументов();
	ОтборФорматов.ВидыДокументов.Добавить(ВидДокументаДляПоиска);
	ОтборФорматов.Действует = Истина;
	ОтборФорматов.ПоддерживаетсяКонфигурацией = Истина;
	СписокПоддерживаемыхФорматыЭД = ФорматыЭлектронныхДокументов(ОтборФорматов);
	
	ПоддерживаемыеФорматыФНС = ФорматыЭДО_ФНС.ПоддерживаемыеФорматы();
	ВсеИдентификаторыФорматовФНС = Новый Соответствие;
	Для Каждого Элемент Из ПоддерживаемыеФорматыФНС Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			ВсеИдентификаторыФорматовФНС.Вставить(Элемент.Значение, Истина);
		Иначе
			Для Каждого ЭлементВторогоУровня Из Элемент.Значение Цикл
				ВсеИдентификаторыФорматовФНС.Вставить(ЭлементВторогоУровня.Значение, Истина);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Формат Из СписокПоддерживаемыхФорматыЭД Цикл
		Если ВсеИдентификаторыФорматовФНС[Формат.ИдентификаторФормата] <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Определяет вид документа формализованного формата ФНС
// 
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыДокументовЭДО
Функция ВидДокументаФормализованногоФорматаФНС(ВидДокумента) Экспорт
	
	Результат = ВидДокумента;
	
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктСверки); 
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов);
	ВидыДокументовПоТипам = ВидыДокументовПоСтандартнымТипам(ТипыДокументов);
	
	Если ВидДокумента = ВидыДокументовПоТипам[Перечисления.ТипыДокументовЭДО.АктСверки] Тогда
		Результат = ВидыДокументовПоТипам[Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает новые параметры поиска вида документа.
// 
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Структура - Новые параметры поиска вида документа:
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// * ПрикладнойТипДокумента - Произвольный
// * ИдентификаторОбъектаУчета - СправочникСсылка.ИдентификаторыОбъектовМетаданных
// * ИдентификаторКомандыПечати - Строка
// * ПредставлениеКомандыПечати - Строка
// 
Функция НовыеПараметрыПоискаВидаДокумента(ТипДокумента) Экспорт
	Возврат Справочники.ВидыДокументовЭДО.НовыеПараметрыПоискаВидаДокумента(ТипДокумента);
КонецФункции

// Ищет вид документа.
// 
// Параметры:
//  ПараметрыПоиска - см. НовыеПараметрыПоискаВидаДокумента
// 
// Возвращаемое значение:
//  Неопределено,СправочникСсылка.ВидыДокументовЭДО
//  
Функция НайтиВидДокумента(ПараметрыПоиска) Экспорт
	Возврат Справочники.ВидыДокументовЭДО.НайтиВидДокумента(ПараметрыПоиска);
КонецФункции

// Найти создать вид документа.
// 
// Параметры:
//  ПараметрыПоиска - см. НовыеПараметрыПоискаВидаДокумента
// 
// Возвращаемое значение:
//  Неопределено,СправочникСсылка.ВидыДокументовЭДО
Функция НайтиСоздатьВидДокумента(ПараметрыПоиска) Экспорт
	Возврат Справочники.ВидыДокументовЭДО.НайтиСоздатьВидДокумента(ПараметрыПоиска);
КонецФункции

// Параметры:
//  ТипыДокументов - Массив из ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  См. ВидыДокументовПоТипам
Функция НайтиСоздатьВидыДокументов(ТипыДокументов) Экспорт
	Возврат Справочники.ВидыДокументовЭДО.НайтиСоздатьВидыДокументов(ТипыДокументов);
КонецФункции

// Возвращает виды исходящих электронных документов, используемые в конфигурации.
// 
// Возвращаемое значение:
// См. ВидыДокументовДоступныхТипов
Функция ИспользуемыеВидыДокументовИсходящие() Экспорт
	
	ИспользуемыеТипыДокументов = ИнтеграцияЭДО.ИспользуемыеТипыДокументов();
	
	ТипыДокументов = Новый Массив;
	
	Для Каждого ТипДокумента Из ИспользуемыеТипыДокументов Цикл
		Если ТипДокумента.Значение["ИспользоватьДляИсходящих"] Тогда
			ТипыДокументов.Добавить(ТипДокумента.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	ТипыДокументов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ТипыДокументов,
		Перечисления.ТипыДокументовЭДО.ТипыДокументовИнтеркампани());
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыДокументов, ТипыДокументовПроизвольногоФормата(), Истина);
	
	ВидыДокументовПоТипам = Справочники.ВидыДокументовЭДО.НайтиСоздатьВидыДокументов(ТипыДокументов);
	
	ВидыДокументов = Справочники.ВидыДокументовЭДО.ВыгрузитьВидыДокументовПоТипам(ВидыДокументовПоТипам);
	
	Возврат ВидыДокументов;
	
КонецФункции

// Возвращает все виды исходящих электронных документов, включая прикладные, используемые в конфигурации.
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.ВидыДокументовЭДО
Функция ИспользуемыеВидыДокументовИсходящиеПрикладные() Экспорт
	
	ВидыЭлектронныхДокументов = ИспользуемыеВидыДокументовИсходящие();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыЭлектронныхДокументов,	ПрикладныеВидыДокументов());
		
	Возврат ВидыЭлектронныхДокументов;	
	
КонецФункции

// Возвращает виды входящих электронных документов, используемые в конфигурации.
// 
// Возвращаемое значение:
// См. ВидыДокументовДоступныхТипов
Функция ИспользуемыеВидыДокументовВходящие() Экспорт
	
	ИспользуемыеТипыДокументов = ИнтеграцияЭДО.ИспользуемыеТипыДокументов();
	
	ТипыДокументов = Новый Массив;
	
	Для Каждого ТипДокумента Из ИспользуемыеТипыДокументов Цикл
		Если ТипДокумента.Значение["ИспользоватьДляВходящих"] Тогда
			ТипыДокументов.Добавить(ТипДокумента.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	ТипыДокументов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ТипыДокументов,
		Перечисления.ТипыДокументовЭДО.ТипыДокументовИнтеркампани());
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыДокументов, ТипыДокументовПроизвольногоФормата(), Истина);
	
	ВидыДокументовПоТипам = Справочники.ВидыДокументовЭДО.НайтиСоздатьВидыДокументов(ТипыДокументов);
	
	ВидыДокументов = Справочники.ВидыДокументовЭДО.ВыгрузитьВидыДокументовПоТипам(ВидыДокументовПоТипам);
	
	Возврат ВидыДокументов;
	
КонецФункции

// Возвращает все виды входящих электронных документов, включая прикладные, используемые в конфигурации.
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.ВидыДокументовЭДО - Набор видов документов
Функция ИспользуемыеВидыДокументовВходящиеПрикладные() Экспорт
	
	ВидыЭлектронныхДокументов = ИспользуемыеВидыДокументовВходящие();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыЭлектронныхДокументов, ПрикладныеВидыДокументов(), Истина);
		
	Возврат ВидыЭлектронныхДокументов;	
	
КонецФункции

// Возвращает виды электронных документов, используемые в конфигурации, при обмене между организациями.
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.ВидыДокументовЭДО
Функция ИспользуемыеВидыДокументовИнтеркампани() Экспорт
	
	ТипыДокументов = Перечисления.ТипыДокументовЭДО.ТипыДокументовИнтеркампани();
	
	ВидыДокументовПоТипам = Справочники.ВидыДокументовЭДО.НайтиСоздатьВидыДокументов(ТипыДокументов);
	
	ВидыДокументов = Справочники.ВидыДокументовЭДО.ВыгрузитьВидыДокументовПоТипам(ВидыДокументовПоТипам);
	
	Возврат ВидыДокументов;
	
КонецФункции

// Возвращает виды электронных документов, используемые в конфигурации, при прямом обмене.
// 
// Возвращаемое значение:
// См. ВидыДокументовДоступныхТипов
Функция ИспользуемыеВидыДокументовПрямогоОбмена() Экспорт
	
	ТипыДокументов = Перечисления.ТипыДокументовЭДО.ТипыДокументовПрямогоОбмена();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыДокументов, ТипыДокументовПроизвольногоФормата(), Истина);
	
	ВидыДокументовПоТипам = Справочники.ВидыДокументовЭДО.НайтиСоздатьВидыДокументов(ТипыДокументов);
	
	ВидыДокументов = Справочники.ВидыДокументовЭДО.ВыгрузитьВидыДокументовПоТипам(ВидыДокументовПоТипам);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыДокументов, ПрикладныеВидыДокументов(), Истина);
	
	Возврат ВидыДокументов;
	
КонецФункции

// Возвращает прикладные виды электронных документов.
// 
// Возвращаемое значение:
// Массив из СправочникСсылка.ВидыДокументовЭДО - набор видов электронных документов.
Функция ПрикладныеВидыДокументов() Экспорт
	
	ВидыДокументов = Новый Массив;
	ТипыДокументов = ИнтеграцияЭДО.ПрикладныеТипыЭлектронныхДокументов();
	
	Для Каждого ТипДокумента Из ТипыДокументов Цикл
		ВидДокумента = ВидДокументаПоПрикладномуТипу(ТипДокумента);
		ВидыДокументов.Добавить(ВидДокумента);
	КонецЦикла;
	
	Возврат ВидыДокументов;
	
КонецФункции

// Возвращает виды доступные для формирования электронного документа произвольного формата.
// 
// Возвращаемое значение:
// 	Массив из СправочникСсылка.ВидыДокументовЭДО - доступные виды документов.
Функция ВидыДокументовДляПроизвольногоФормата() Экспорт
	
	ТипыДокументов = ТипыДокументовПроизвольногоФормата();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДокументовЭДО.Ссылка
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|ГДЕ
		|	ВидыДокументовЭДО.ТипДокумента В (&ТипыДокументов)";
	
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает вид электронного документа по доступному типу электронного документа.
// 
// Параметры:
// 	ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - Значение элемента структуры СтандартныеТипыДокументов.
// Возвращаемое значение:
// 	СправочникСсылка.ВидыДокументовЭДО - Ссылка на вид электронного документа.
Функция ВидДокументаПоТипу(ТипДокумента) Экспорт
	Возврат Справочники.ВидыДокументовЭДО.ВидДокументаПоТипу(ТипДокумента);
КонецФункции

// Возвращает виды электронных документов по стандартным типам электронных документов.
// Не подходит для поиска по внутренним и прикладным типам документов.
// 
// Параметры:
//  ТипыДокументов - Массив из ПеречислениеСсылка.ТипыДокументовЭДО - Набор прикладных типов электронных документов.
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - ПеречислениеСсылка.ТипыДокументовЭДО - Ссылка на тип документа.
//   * Значение - СправочникСсылка.ВидыДокументовЭДО - Ссылка на вид электронного документа.
//                                                     Для внутреннего и прикладного документа возвращается пустая ссылка.
Функция ВидыДокументовПоСтандартнымТипам(ТипыДокументов) Экспорт
	Возврат Справочники.ВидыДокументовЭДО.ВидыДокументовПоСтандартнымТипам(ТипыДокументов);
КонецФункции

// Возвращает вид электронного документа по прикладному типу электронного документа.
// 
// Параметры:
// 	ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - Значение прикладного типа электронного документа.
// Возвращаемое значение:
// 	СправочникСсылка.ВидыДокументовЭДО - Ссылка на вид электронного документа.
Функция ВидДокументаПоПрикладномуТипу(ПрикладнойТипДокумента) Экспорт
	Возврат Справочники.ВидыДокументовЭДО.ВидДокументаПоПрикладномуТипу(ПрикладнойТипДокумента);
КонецФункции

// Возвращает виды электронных документов по прикладным типам электронных документов.
// 
// Параметры:
//  ПрикладныеТипыДокументов - Массив из ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - набор прикладных типов электронных документов.
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - Ссылка на прикладной тип.
//   * Значение - СправочникСсылка.ВидыДокументовЭДО - Ссылка на вид электронного документа.
Функция ВидыДокументовПоПрикладнымТипам(ПрикладныеТипыДокументов) Экспорт
	Возврат Справочники.ВидыДокументовЭДО.ВидыДокументовПоПрикладнымТипам(ПрикладныеТипыДокументов);
КонецФункции

// Параметры:
//  ИменаТиповДокументов - Массив из Строка
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка
//  * Значение - СправочникСсылка.ВидыДокументовЭДО
Функция ВидыДокументовПоИменамСтандартныхТипов(ИменаТиповДокументов) Экспорт
	Возврат Справочники.ВидыДокументовЭДО.ВидыДокументовПоИменамСтандартныхТипов(ИменаТиповДокументов);
КонецФункции

// Возвращает описание вида электронного документа.
// 
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
// 
// Возвращаемое значение:
//  Структура:
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - Тип электронного документа.
//  * ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - Прикладной тип электронного документа.
//  * ИдентификаторКомандыПечати - Строка - Идентификатор команды печати.
//  * ИдентификаторОбъектаУчета - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Ссылка на идентификатор объекта метаданных.
Функция ОписаниеВидаДокумента(ВидДокумента) Экспорт
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДокумента,
		"ТипДокумента, ПрикладнойТипДокумента, ИдентификаторКомандыПечати, ИдентификаторОбъектаУчета");
КонецФункции

// Возвращает описания видов электронных документов.
// 
// Параметры:
// 	ВидыДокументов - Массив из СправочникСсылка.ВидыДокументовЭДО - Ссылки на виды электронных документов.
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.ВидыДокументовЭДО
//  * Значение - См. ОписаниеВидаДокумента
Функция ОписанияВидовДокументов(ВидыДокументов) Экспорт
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидыДокументов,
		"ТипДокумента, ПрикладнойТипДокумента, ИдентификаторКомандыПечати, ИдентификаторОбъектаУчета");
КонецФункции

// Определяет соответствует ли тип вида документа прикладному типу.
// 
// Параметры:
// 	ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - ссылка на вид документа.
// Возвращаемое значение:
// 	Булево - вид имеет тип документа запрос коммерческих предложений.
Функция ЭтоПрикладнойВидДокумента(ВидДокумента) Экспорт
	Возврат Справочники.ВидыДокументовЭДО.ЭтоПрикладнойВидДокумента(ВидДокумента);
КонецФункции

// Определяет соответствует ли тип вида документа внутреннему типу.
// 
// Параметры:
// 	ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - ссылка на вид документа.
// Возвращаемое значение:
// 	Булево - вид имеет тип документа запрос коммерческих предложений.
Функция ЭтоВнутреннийВидДокумента(ВидДокумента) Экспорт
	Возврат Справочники.ВидыДокументовЭДО.ЭтоВнутреннийВидДокумента(ВидДокумента);
КонецФункции

// Возвращает заменяемые виды документов для видов УПД и УКД.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * УПД - Структура - Описание:
// ** ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - Ссылка на вид документа УПД.
// ** ЗаменяемыеВидыДокументов - Массив из СправочникСсылка.ВидыДокументовЭДО - Ссылки на заменяемые виды УПД.
// * УКД - Структура - Описание:
// ** ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - Ссылка на вид документа УКД.
// ** ЗаменяемыеВидыДокументов - Массив из СправочникСсылка.ВидыДокументовЭДО - Ссылки на заменяемые виды УКД.
Функция ВидыДокументовЗаменяемыеУПДУКД() Экспорт
	
	ЗаменяемыеВиды = Новый Структура;
	ЗаменяемыеВиды.Вставить("УПД", Новый Структура);
	ЗаменяемыеВиды.УПД.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	ЗаменяемыеВиды.УПД.Вставить("ЗаменяемыеВидыДокументов", Новый Массив);
	ЗаменяемыеВиды.Вставить("УКД", Новый Структура);
	ЗаменяемыеВиды.УКД.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	ЗаменяемыеВиды.УКД.Вставить("ЗаменяемыеВидыДокументов", Новый Массив);
	
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.УПД);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.СчетФактура);
	
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.УКД);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура);
	
	ВидыДокументовПоТипам = Справочники.ВидыДокументовЭДО.ВидыДокументовПоТипам(ТипыДокументов);
	
	Для Каждого ТипДокумента Из ТипыДокументов Цикл
		
		Если ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД Тогда
			ЗаменяемыеВиды.УПД.ВидДокумента = ВидыДокументовПоТипам[ТипДокумента];
			МассивВидов = ЗаменяемыеВиды.УПД.ЗаменяемыеВидыДокументов;
		ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Тогда
			ЗаменяемыеВиды.УКД.ВидДокумента = ВидыДокументовПоТипам[ТипДокумента];
			МассивВидов = ЗаменяемыеВиды.УКД.ЗаменяемыеВидыДокументов;
		Иначе
			МассивВидов.Добавить(ВидыДокументовПоТипам[ТипДокумента]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗаменяемыеВиды;
	
КонецФункции

// Определяет дополнительные виды электронных документов по данным файла.
// 
// Параметры:
//  ОписаниеФайла - См. РаботаСФайламиБЭД.НовоеОписаниеФайла
//
// Возвращаемое значение:
//  См. ФорматыЭДО.ДополнительныеВидыДокументовУПД
Функция ДополнительныеВидыДокументовУПД(ОписаниеФайла) Экспорт
	Возврат ФорматыЭДО.ДополнительныеВидыДокументовУПД(ОписаниеФайла);
КонецФункции

// Возвращает пустую структуру для отбора видов документов.
// 
// Возвращаемое значение:
//  Структура:
//  * Ссылка - Строка - Параметр или выражение для отбора по ссылке.
//  * ТипДокумента - Строка
//  * ИдентификаторОбъектаУчета - Строка
Функция НовыйОтборВидовДокументов() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ссылка", "");
	Отбор.Вставить("ТипДокумента", "");
	Отбор.Вставить("ИдентификаторОбъектаУчета", "");
	
	Возврат Отбор;
	
КонецФункции

// Возвращает описание запроса, в результате которого будут содержаться виды документов.
// Запрос содержит следующие поля:
//    Ссылка - СправочникСсылка.ВидыДокументовЭДО
//    Наименование - Строка
//    ИдентификаторОбъектаУчета - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//    ИдентификаторКомандыПечати - Строка.
// 
// Параметры:
//  ИмяВременнойТаблицы - Строка - таблица, в которую будет помещен результат запроса
//  Отбор - см. НовыйОтборВидовДокументов
// 
// Возвращаемое значение:
//  См. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросВидовДокументов(ИмяВременнойТаблицы, Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = НовыйОтборВидовДокументов();
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВидыДокументовЭДО.Ссылка,
	|	ВидыДокументовЭДО.Наименование,
	|	ВидыДокументовЭДО.ТипДокумента,
	|	ВидыДокументовЭДО.ИдентификаторКомандыПечати,
	|	ВидыДокументовЭДО.ИдентификаторОбъектаУчета
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
	|ГДЕ
	|&ПоляУсловия";
	
	ПоляУсловия = Новый Массив;
	Если ЗначениеЗаполнено(Отбор.Ссылка) Тогда
		ПоляУсловия.Добавить(СтрШаблон("ВидыДокументовЭДО.Ссылка В (%1)", Отбор.Ссылка));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отбор.ТипДокумента) Тогда
		ПоляУсловия.Добавить(СтрШаблон("ВидыДокументовЭДО.ТипДокумента В (%1)", Отбор.ТипДокумента));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отбор.ИдентификаторОбъектаУчета) Тогда
		ПоляУсловия.Добавить(СтрШаблон("ВидыДокументовЭДО.ИдентификаторОбъектаУчета В (%1)", Отбор.ИдентификаторОбъектаУчета));
	КонецЕсли;
	
	ТекстЗапроса = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса, ИмяВременнойТаблицы, "", ПоляУсловия);
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ТекстЗапроса;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Возвращает вид внутреннего электронного документа, если документ не найден, создает
// и возвращает ссылку на созданный элемент.
//
// Параметры:
//  ИдентификаторОбъектаУчета - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  КомандаПечати - Структура:
//    * Идентификатор - Строка
//    * Представление - Строка
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыДокументовЭДО
//
Функция НайтиСоздатьВидВнутреннегоДокумента(ИдентификаторОбъектаУчета, КомандаПечати) Экспорт
	
	ПараметрыПоиска = НовыеПараметрыПоискаВидаДокумента(Перечисления.ТипыДокументовЭДО.Внутренний);
	ПараметрыПоиска.ИдентификаторОбъектаУчета  = ИдентификаторОбъектаУчета;
	ПараметрыПоиска.ИдентификаторКомандыПечати = КомандаПечати.Идентификатор;
	ПараметрыПоиска.ПредставлениеКомандыПечати = КомандаПечати.Представление;
	
	Возврат НайтиСоздатьВидДокумента(ПараметрыПоиска);
	
КонецФункции

// Возвращает команды печати доступные для внутреннего ЭДО.
// 
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных
// 
// Возвращаемое значение:
//  См. ИнтеграцияЭДО.КомандыПечатиДляВнутреннегоЭДО
Функция КомандыПечатиДляВнутреннегоЭДО(ОбъектМетаданных) Экспорт
	
	Возврат ИнтеграцияЭДО.КомандыПечатиДляВнутреннегоЭДО(ОбъектМетаданных);
	
КонецФункции

// Изменяет виды сообщений при изменении вида документа.
// 
// Параметры:
// 	ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на входящий электронный документ.
// 	                    - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на исходящий электронный документ.
// 	ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - Устанавливаемый вид электронного документа.
// 	Отказ - Булево - Признак отказа от записи изменения.
Процедура ПриИзмененииВидаДокумента(ЭлектронныйДокумент, ВидДокумента, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	 
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
	ЭлементБлокировки.УстановитьЗначение("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СообщениеЭДО.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.СообщениеЭДО КАК СообщениеЭДО
			|ГДЕ
			|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
			|	И СообщениеЭДО.ТипЭлементаРегламента В (&ТипыЭлементовРегламента)";
		
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		
		ТипыЭлементовРегламента = Новый Массив;
		ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);
		
		Запрос.УстановитьПараметр("ТипыЭлементовРегламента", ТипыЭлементовРегламента);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СообщениеОбъект.ВидСообщения = ВидДокумента;
			СообщениеОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Настройки

// Возвращает ключ настроек отправки по объекту учета.
//
// Параметры:
//  ОписаниеОбъектаУчета - См. ИнтеграцияЭДО.ОписаниеОбъектаУчета
//
// Возвращаемое значение:
//  - Неопределено - если не удалось определить ключ настроек отправки.
//  - См. НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки
//
Функция КлючНастроекОтправкиОбъектаУчета(ОписаниеОбъектаУчета) Экспорт
	
	Если ОписаниеОбъектаУчета.Направление <> Перечисления.НаправленияЭДО.Исходящий Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	
	Если ОписаниеОбъектаУчета.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
		ВидДокумента = ВидДокументаПоПрикладномуТипу(ОписаниеОбъектаУчета.ПрикладнойТипДокумента);
	Иначе
		ВидДокумента = ВидДокументаПоТипу(ОписаниеОбъектаУчета.ТипДокумента);
	КонецЕсли;
	
	КлючНастроек.ВидДокумента = ВидДокумента;
	КлючНастроек.Отправитель = ОписаниеОбъектаУчета.Организация;
	КлючНастроек.Получатель = ОписаниеОбъектаУчета.Контрагент;
	КлючНастроек.Договор = ОписаниеОбъектаУчета.Договор;
	
	Возврат КлючНастроек;
	
КонецФункции

// Параметры:
//  ВидыДокументов - Массив из СправочникСсылка.ВидыДокументовЭДО
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * Формат - Строка
//  * Приоритет - Число
//  * Группа - Строка
//  * ПриоритетГруппы - Число
//  * ДокументУчета - Строка
//  * МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//  * ТребуетсяИзвещениеОПолучении - Булево
//  * ТребуетсяОтветнаяПодпись - Булево
//  * РедактироватьПодпись - Булево
//  * РедактироватьИзвещение - Булево
//  * РедактироватьОтветнуюПодпись - Булево
Функция ШаблоныНастроекОтправкиВидовДокументов(ВидыДокументов) Экспорт
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	ШаблоныНастроек = Новый ТаблицаЗначений;
	ШаблоныНастроек.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	ШаблоныНастроек.Колонки.Добавить("Формат", Новый ОписаниеТипов("Строка"));
	ШаблоныНастроек.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число",,,
		Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ШаблоныНастроек.Колонки.Добавить("Группа", Новый ОписаниеТипов("Строка"));
	ШаблоныНастроек.Колонки.Добавить("ПриоритетГруппы", Новый ОписаниеТипов("Число",,,
		Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ШаблоныНастроек.Колонки.Добавить("ДокументУчета", Новый ОписаниеТипов("Строка"));
	ШаблоныНастроек.Колонки.Добавить("МаршрутПодписания", Новый ОписаниеТипов("СправочникСсылка.МаршрутыПодписания"));
	ШаблоныНастроек.Колонки.Добавить("ТребуетсяИзвещениеОПолучении", ОписаниеТиповБулево);
	ШаблоныНастроек.Колонки.Добавить("ТребуетсяОтветнаяПодпись", ОписаниеТиповБулево);
	ШаблоныНастроек.Колонки.Добавить("РедактироватьПодпись", ОписаниеТиповБулево);
	ШаблоныНастроек.Колонки.Добавить("РедактироватьИзвещение", ОписаниеТиповБулево);
	ШаблоныНастроек.Колонки.Добавить("РедактироватьОтветнуюПодпись", ОписаниеТиповБулево);
	
	ОтборФорматов = НовыйОтборФорматовЭлектронныхДокументов();
	ОтборФорматов.ВидыДокументов = ВидыДокументов;
	ОтборФорматов.Действует = Истина;
	Форматы = ФорматыЭлектронныхДокументов(ОтборФорматов);
	
	ПредставленияОснованийПоТипам = ИнтеграцияЭДО.ПредставленияОснованийПоТипамДокументов();
	
	ОписанияВидовДокументов = ОписанияВидовДокументов(ВидыДокументов);
	
	Для Каждого Элемент Из ОписанияВидовДокументов Цикл
		
		ВидДокумента = Элемент.Ключ;
		ОписаниеВида = Элемент.Значение;
		
		ИдентификаторФормата = "";
		СведенияОФормате = Форматы.Найти(ВидДокумента, "ВидДокумента");
		Если СведенияОФормате <> Неопределено Тогда
			ИдентификаторФормата = СведенияОФормате.ИдентификаторФормата;
		КонецЕсли;
		
		ШаблонНастройкиВида = ШаблоныНастроек.Добавить();
		ШаблонНастройкиВида.ВидДокумента = ВидДокумента;
		ШаблонНастройкиВида.Формат = ИдентификаторФормата;
		ШаблонНастройкиВида.Приоритет = Перечисления.ТипыДокументовЭДО.ПриоритетПриОтображенииВСписке(
			ОписаниеВида.ТипДокумента);
		ПараметрыГруппы = Перечисления.ТипыДокументовЭДО.ПараметрыГруппыПриОтображенииВСписке(ОписаниеВида.ТипДокумента);
		ШаблонНастройкиВида.Группа = ПараметрыГруппы.Группа;
		ШаблонНастройкиВида.ПриоритетГруппы = ПараметрыГруппы.ПриоритетГруппы;
		ШаблонНастройкиВида.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутОднойДоступнойПодписью();
		
		Если ЭтоПрикладнойТипДокумента(ОписаниеВида.ТипДокумента) Тогда
			ТипДокументаДляПредставления = ОписаниеВида.ПрикладнойТипДокумента;
		Иначе
			ТипДокументаДляПредставления = ОписаниеВида.ТипДокумента;
		КонецЕсли;
		
		ПредставлениеОснования = ПредставленияОснованийПоТипам[ТипДокументаДляПредставления];
		Если ПредставлениеОснования = Неопределено Тогда // не задано соответствие
			ШаблонСообщения = НСтр("ru = 'В переопределяемом модуле прикладного решения необходимо указать представление документа ИБ(основания) и хоз. операции для типа документа %1.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, ТипДокументаДляПредставления);
			
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, 
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ЭлектронноеВзаимодействие,
				УровеньЖурналаРегистрации.Предупреждение);
		КонецЕсли;
		ШаблонНастройкиВида.ДокументУчета = ПредставлениеОснования;
		
		НастройкиРегламента = НастройкиРегламента(ОписаниеВида, ИдентификаторФормата);
		ЗаполнитьЗначенияСвойств(ШаблонНастройкиВида, НастройкиРегламента);
		
	КонецЦикла;
	
	ШаблоныНастроек.Сортировать("ПриоритетГруппы, Приоритет");
	
	Возврат ШаблоныНастроек;
	
КонецФункции

// Возвращает настройки регламента ЭДО.
// 
// Параметры:
// 	ОписаниеВидаДокумента - См. ОписаниеВидаДокумента
// 	Формат - Строка - Идентификатор формата электронного документа.
// Возвращаемое значение:
// 	Структура - Описание:
// * РедактироватьОтветнуюПодпись - Булево - Возможность редактирования признака ожидания ответной подписи.
// * РедактироватьИзвещение - Булево - Возможность редактирования признака ожидания извещения.
// * РедактироватьПодпись - Булево - Возможность редактирования признака использования подписи.
// * ТребуетсяОтветнаяПодпись - Булево - Значение признака ожидания ответной подписи по умолчанию.
// * ТребуетсяИзвещениеОПолучении - Булево - Значение признака ожидания извещения по умолчанию.
Функция НастройкиРегламента(ОписаниеВидаДокумента, Формат) Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("ТребуетсяИзвещениеОПолучении", Истина);
	Настройки.Вставить("ТребуетсяОтветнаяПодпись",     Истина);
	Настройки.Вставить("РедактироватьПодпись",         Ложь);
	Настройки.Вставить("РедактироватьИзвещение",       Истина);
	Настройки.Вставить("РедактироватьОтветнуюПодпись", Истина);
	
	ТипДокумента = ОписаниеВидаДокумента.ТипДокумента;
	
	Если ЭтоПрикладнойТипДокумента(ТипДокумента) Тогда
		НастройкиПрикладныхФорматов = ИнтеграцияЭДО.НастройкиРегламентаПрикладногоФормата(
			ОписаниеВидаДокумента.ПрикладнойТипДокумента, Формат);
		ЗаполнитьЗначенияСвойств(Настройки, НастройкиПрикладныхФорматов);
		Возврат Настройки;
	КонецЕсли;
	
	Настройки.ТребуетсяИзвещениеОПолучении = ТребуетсяИзвещениеПоУмолчанию(ТипДокумента);
	Настройки.ТребуетсяОтветнаяПодпись = ТребуетсяОтветнаяПодписьПоУмолчанию(ТипДокумента);
	Настройки.РедактироватьОтветнуюПодпись = РедактироватьОтветнуюПодпись(ТипДокумента);
	
	Возврат Настройки;
	
КонецФункции

// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ДокументооборотНастроен(ОбъектУчета) Экспорт
	
	Результат = Ложь;
	
	Если ТипЗнч(ОбъектУчета) = Тип("Структура") Тогда
		СтрокаОписания = ИнтеграцияЭДОКлиентСервер.НовоеОписаниеОбъектаУчетаСтруктура();
		ЗаполнитьЗначенияСвойств(СтрокаОписания, ОбъектУчета);
		ОписаниеОбъектаУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаОписания);
	Иначе
		ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ОбъектУчета);
		ОписаниеОбъектаУчета = ОбщегоНазначения.ТаблицаЗначенийВМассив(ОписаниеОбъектаУчета);
	КонецЕсли;
	
	Для каждого СтрокаОписания Из ОписаниеОбъектаУчета Цикл
		
		Результат = Ложь;
		
		Если СтрокаОписания.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
			ОтборНастроек = НастройкиЭДО.НовыйОтборНастроекВнутреннегоЭДО();
			ОтборНастроек.Организация = "&Организация";
			ОписаниеЗапроса = НастройкиЭДО.ЗапросНастроекВнутреннегоЭДО("НастройкиВнутреннегоЭДО", ОтборНастроек);
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИСТИНА КАК ЕстьНастройки
				|ИЗ
				|	НастройкиВнутреннегоЭДО КАК НастройкиВнутреннегоЭДО
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
				|		ПО НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента = ВидыДокументовЭДО.Ссылка
				|		И НастройкиВнутреннегоЭДО.Формировать
				|		И ВидыДокументовЭДО.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.Внутренний)
				|		И ВидыДокументовЭДО.ИдентификаторОбъектаУчета = &ИдентификаторОбъектаУчета";
			Запрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеЗапроса));
			
			Если ТипЗнч(ОбъектУчета) = Тип("Структура") Тогда
				ИдентификаторОбъектаУчета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
					Метаданные.НайтиПоПолномуИмени(ОбъектУчета.ПолноеИмяМетаданных));
			Иначе 
				ИдентификаторОбъектаУчета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектУчета.Метаданные());
			КонецЕсли;
			Запрос.УстановитьПараметр("ИдентификаторОбъектаУчета", ИдентификаторОбъектаУчета);
			Запрос.УстановитьПараметр("Организация", СтрокаОписания.Организация);
			РезультатЗапроса = Запрос.Выполнить();
			Результат = Не РезультатЗапроса.Пустой();
		Иначе
			КлючНастроекОтправки = КлючНастроекОтправкиОбъектаУчета(СтрокаОписания);
			Настройки = НастройкиЭДО.НастройкиОтправки(КлючНастроекОтправки);
			Если ЗначениеЗаполнено(Настройки) И Настройки.Формировать Тогда
				Если СтрокаОписания.Направление = Перечисления.НаправленияЭДО.Интеркампани Тогда
					Результат = Истина;
				Иначе
					Результат = СинхронизацияЭДО.ДокументооборотНастроен(Настройки.ИдентификаторОтправителя,
						Настройки.ИдентификаторПолучателя);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Если хотя бы по одному описанию объекта учета документооборот не настроен, возвращаем Ложь.
		Если Не Результат Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает таблицу настроек отправки по переданному набору объектов учета.
// 
// Параметры:
// 	ОбъектыУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - набор объектов учета
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение - настройки переданных объектов учета:
//   * Ключ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на объект учета из переданного массива.
//   * Значение - Неопределено - в случае, если настроек не существует, либо передан объект учета, по которому не могут
//                              быть созданы внешние электронные документы.
//              - Структура - настройки с ключами:
//    ** Отправитель - ОпределяемыйТип.Организация
//    ** Получатель - ОпределяемыйТип.УчастникЭДО
//    ** Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//    ** ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//    ** Формат - Строка
//    ** ИдентификаторОтправителя - Строка
//    ** ИдентификаторПолучателя - Строка
//    ** МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//    ** ТребуетсяОтветнаяПодпись - Булево
//    ** ТребуетсяИзвещениеОПолучении - Булево
//    ** ВыгружатьДополнительныеСведения - Булево
//    ** ВерсияФорматаУстановленаВручную - Булево
//    ** Формировать - Булево
//    ** СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
//    ** ЗаполнениеКодаТовара - Строка
//    ** ОбменБезПодписи - Булево
//    ** ГотовностьКОбмену - Булево
//    ** ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - тип электронного документа
//
Функция НастройкиОтправкиОбъектовУчета(ОбъектыУчета) Экспорт
	
	ОписанияОбъектовУчета = ИнтеграцияЭДО.ОписанияОбъектовУчета(ОбъектыУчета);
	
	Возврат НастройкиОтправкиОбъектовУчетаПоОписаниям(ОписанияОбъектовУчета);
	
КонецФункции

// Параметры:
//  ОписанияОбъектовУчета - См. ИнтеграцияЭДО.ОписанияОбъектовУчета
// 
// Возвращаемое значение:
//  См. НастройкиОтправкиОбъектовУчета
Функция НастройкиОтправкиОбъектовУчетаПоОписаниям(ОписанияОбъектовУчета) Экспорт
	
	Результат = Новый Соответствие(); // См. НастройкиОтправкиОбъектовУчетаПоОписаниям
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОписанияОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
		|	ОписанияОбъектовУчета.Направление КАК Направление,
		|	ОписанияОбъектовУчета.ТипДокумента КАК ТипДокумента,
		|	ОписанияОбъектовУчета.ПрикладнойТипДокумента КАК ПрикладнойТипДокумента,
		|	ОписанияОбъектовУчета.Организация КАК Организация,
		|	ОписанияОбъектовУчета.Контрагент КАК Контрагент,
		|	ОписанияОбъектовУчета.Договор КАК ДоговорКонтрагента
		|ПОМЕСТИТЬ ОписанияОбъектовУчета
		|ИЗ
		|	&ОписанияОбъектовУчета КАК ОписанияОбъектовУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОписанияОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
		|	ОписанияОбъектовУчета.Организация КАК Отправитель,
		|	ОписанияОбъектовУчета.Контрагент КАК Получатель,
		|	ОписанияОбъектовУчета.Направление КАК Направление,
		|	ОписанияОбъектовУчета.ТипДокумента КАК ТипДокумента,
		|	НастройкиОтправки.Договор КАК Договор,
		|	ВидыДокументовЭДО.Ссылка КАК ВидДокумента,
		|	НастройкиОтправки.ВерсияФормата КАК Формат,
		|	НастройкиОтправки.МаршрутПодписания КАК МаршрутПодписания,
		|	НастройкиОтправки.СпособОбменаЭД КАК СпособОбмена,
		|	НастройкиОтправки.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
		|	НастройкиОтправки.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
		|	НастройкиОтправки.ТребуетсяОтветнаяПодпись КАК ТребуетсяОтветнаяПодпись,
		|	НастройкиОтправки.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
		|	НастройкиОтправки.ВыгружатьДополнительныеСведения КАК ВыгружатьДополнительныеСведения,
		|	НастройкиОтправки.ОбменБезПодписи КАК ОбменБезПодписи,
		|	НастройкиОтправки.Формировать КАК Формировать,
		|	НастройкиОтправки.ЗаполнениеКодаТовара КАК ЗаполнениеКодаТовара
		|ИЗ
		|	ОписанияОбъектовУчета КАК ОписанияОбъектовУчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО ОписанияОбъектовУчета.ТипДокумента = ВидыДокументовЭДО.ТипДокумента
		|		И ОписанияОбъектовУчета.ПрикладнойТипДокумента = ВидыДокументовЭДО.ПрикладнойТипДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправки
		|		ПО ОписанияОбъектовУчета.Организация = НастройкиОтправки.Отправитель
		|		И ОписанияОбъектовУчета.Контрагент = НастройкиОтправки.Получатель
		|		И ВидыДокументовЭДО.Ссылка = НастройкиОтправки.ВидДокумента
		|		И НастройкиОтправки.Договор В (ОписанияОбъектовУчета.ДоговорКонтрагента, &ПустойДоговор)
		|ГДЕ
		|	ОписанияОбъектовУчета.Направление В (&НаправленияНастроекОтправки)
		|УПОРЯДОЧИТЬ ПО
		|	Договор УБЫВ";
	
	НаправленияНастроекОтправки = Новый Массив();
	НаправленияНастроекОтправки.Добавить(Перечисления.НаправленияЭДО.Исходящий);
	Если НастройкиЭДО.ОбменЭлектроннымиДокументамиМеждуОрганизациями() Тогда
		НаправленияНастроекОтправки.Добавить(Перечисления.НаправленияЭДО.Интеркампани);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НаправленияНастроекОтправки", НаправленияНастроекОтправки);
	Запрос.УстановитьПараметр("ОписанияОбъектовУчета", ОписанияОбъектовУчета);
	Запрос.УстановитьПараметр("ПустойДоговор", ОбменСКонтрагентамиИнтеграция.ВсеПустыеЗначенияДоговораСКонтрагентомЭДО());

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Результат[Выборка.ОбъектУчета] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Настройка = НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки();
		Настройка.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
		ЗаполнитьЗначенияСвойств(Настройка, Выборка);
		Результат.Вставить(Выборка.ОбъектУчета, Настройка);
		
	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции

#КонецОбласти

#Область СтатусДокумента

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Строка - см. ДоступныеСтатусыДокумента
Функция СтатусДокумента(ЭлектронныйДокумент) Экспорт
	
	Результат = "";
	
	Статусы = ДоступныеСтатусыДокумента();
	
	СостояниеДокумента = СостояниеДокумента(ЭлектронныйДокумент);
	
	Если СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен Тогда
		
		Результат = Статусы.Утвержден;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.Аннулирован
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения Тогда
		
		Результат = Статусы.Отклонен;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание Тогда
		
		Результат = ?(ЭтоВходящийЭДО(ЭлектронныйДокумент), Статусы.УтверждениеВОбработке, Статусы.ВОбработке);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение Тогда
		
		Результат = Статусы.ВОбработке;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение Тогда
		
		Результат = Статусы.Получен;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.НеПолучен
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.НеСформирован Тогда
		
		Результат = Статусы.НеНачат;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования Тогда
		
		Результат = Статусы.ОтклонениеВОбработке;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПовторнаяОтправка Тогда
		
		Результат = Статусы.Ошибка;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Обработка состояний для извещения о получении информации отправителя.
	
	Если НастройкиЭДО.ИспользоватьИнтеграциюОблачногоЭДО() Тогда
		ОбщийМодульЭлектронныеДокументыЭДОИнтеграцияОблака = ОбщегоНазначения.ОбщийМодуль(
			"ЭлектронныеДокументыЭДОИнтеграцияОблака");
		ОбщийМодульЭлектронныеДокументыЭДОИнтеграцияОблака.ОбновитьПолныеДанныеДокументовЭДО(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлектронныйДокумент));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ЭлектронныеДокументыЭДОСлужебный.ТекстЗапросаСостоянияСообщений();
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	СостоянияДокументовЭДО = Запрос.Выполнить().Выгрузить();
	
	ЕстьПодтверждениеИнформацииОтправителя = Ложь;
	ЕстьПредложениеОбАннулировании = Ложь;
	ЕстьУведомлениеОбУточнении = Ложь;
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СостоянияДокументовЭДО Цикл
		
		Если СтрокаТаблицы.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
			И СтрокаТаблицы.Статус = Перечисления.СтатусыСообщенийЭДО.Подтвержден
			ИЛИ СтрокаТаблицы.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя
				И (СтрокаТаблицы.Статус = Перечисления.СтатусыСообщенийЭДО.Отправлен
					ИЛИ СтрокаТаблицы.Статус = Перечисления.СтатусыСообщенийЭДО.Получен) Тогда
			ЕстьПодтверждениеИнформацииОтправителя = Истина;
		ИначеЕсли СтрокаТаблицы.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА Тогда
			ЕстьПредложениеОбАннулировании = Истина;
		ИначеЕсли СтрокаТаблицы.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ
			Или (МодульОбменСГИСЭПД <> Неопределено И МодульОбменСГИСЭПД.ЭтоУОУ(СтрокаТаблицы.ТипЭлементаРегламента)) Тогда
			ЕстьУведомлениеОбУточнении = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьПредложениеОбАннулировании
		ИЛИ ЕстьУведомлениеОбУточнении Тогда
		Результат = Статусы.ОтклонениеВОбработке;
	ИначеЕсли ЕстьПодтверждениеИнформацииОтправителя
		ИЛИ Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ТребуетсяПодтверждение") Тогда
		Результат = Статусы.Утвержден;
	Иначе
		Результат = ?(ЭтоВходящийЭДО(ЭлектронныйДокумент), Статусы.УтверждениеВОбработке, Статусы.ВОбработке);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СостояниеДокумента

// Возвращает начальное состояние исходящего электронного документа.
// 
// Возвращаемое значение:
// 	ПеречислениеСсылка.СостоянияДокументовЭДО - Состояние электронного документа.
Функция НачальноеСостояниеДокумента() Экспорт
	
	Возврат РегламентыЭДО.НачальноеСостояниеДокумента();
	
КонецФункции

// Возвращает текущее состояния документа.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Ссылка на электронный документ.
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияДокументовЭДО
Функция СостояниеДокумента(ЭлектронныйДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияДокументовЭДО.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|ГДЕ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат РегламентыЭДО.НачальноеСостояниеДокумента();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Состояние;
	
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  См. НовоеСостояниеДокументаПодробное
Функция СостояниеДокументаПодробное(ЭлектронныйДокумент) Экспорт
	
	СостояниеПодробное = ЭлектронныеДокументыЭДОСлужебный.НовоеСостояниеДокументаПодробное();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияДокументовЭДО.Состояние КАК Значение,
		|	СостоянияДокументовЭДО.СостояниеДополнение КАК Дополнение,
		|	СостоянияДокументовЭДО.ДатаИзменения КАК ДатаИзменения,
		|	СостоянияДокументовЭДО.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|ГДЕ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СостояниеПодробное, Выборка);
	КонецЕсли;
	
	Возврат СостояниеПодробное;
	
КонецФункции

// Параметры:
//  ИмяВременнойТаблицы - Строка
//  ИмяПараметраЭлектронныйДокумент - Строка
// 
// Возвращаемое значение:
//  См. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросСостоянийДокументов(ИмяВременнойТаблицы, ИмяПараметраЭлектронныйДокумент) Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СостоянияДокументовЭДО.ЭлектронныйДокумент КАК Ссылка,
	|	СостоянияДокументовЭДО.Состояние КАК Состояние,
	|	СостоянияДокументовЭДО.СостояниеДополнение КАК СостояниеДополнение
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
	|ГДЕ
	|	СостоянияДокументовЭДО.ЭлектронныйДокумент В(&ЭлектронныйДокумент)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭлектронныйДокумент", ИмяПараметраЭлектронныйДокумент);
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ТекстЗапроса;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Возвращаемое значение:
//  См. РегламентыЭДО.СостоянияЗавершенногоЭДО
Функция СостоянияЗавершенногоЭДО() Экспорт
	
	Возврат РегламентыЭДО.СостоянияЗавершенногоЭДО();
	
КонецФункции

// Функция возвращает электронные документы (из переданных), по которым не завершен документооборот.
//
// Параметры:
// 	ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// Возвращаемое значение:
//  Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Электронные документы, по которым не завершен документооборот.
//
Функция НезавершенныеДокументы(Знач ЭлектронныеДокументы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	Запрос.УстановитьПараметр("СостоянияЗавершенногоЭДО", РегламентыЭДО.СостоянияЗавершенногоЭДО());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияДокументовЭДО.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
	|ГДЕ
	|	СостоянияДокументовЭДО.ЭлектронныйДокумент В (&ЭлектронныеДокументы)
	|	И СостоянияДокументовЭДО.Состояние НЕ В (&СостоянияЗавершенногоЭДО)";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЭлектронныйДокумент");
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Значение - ПеречислениеСсылка.СостоянияДокументовЭДО
//
Функция СостоянияДокументов(ЭлектронныеДокументы) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СостоянияДокументовЭДО.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|ГДЕ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент В (&ЭлектронныеДокументы)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ЭлектронныйДокумент, Выборка.Состояние);
	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции

#КонецОбласти

#Область СхемаРегламента

// См. РегламентыЭДО.НоваяСхемаРегламента
Функция НоваяСхемаРегламента(НастройкиСхемыРегламента, ДанныеЭлементовСхемы = Неопределено) Экспорт
	
	Возврат РегламентыЭДО.НоваяСхемаРегламента(НастройкиСхемыРегламента, ДанныеЭлементовСхемы);
	
КонецФункции

// См. РегламентыЭДО.ЭлементыСхемыРегламентаБезДанных
Функция ЭлементыСхемыРегламентаБезДанных(СхемаРегламента) Экспорт
	
	Возврат РегламентыЭДО.ЭлементыСхемыРегламентаБезДанных(СхемаРегламента);
	
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  * Сообщение - ДокументСсылка.СообщениеЭДО
//  * ВидСообщения - СправочникСсылка.ВидыДокументовЭДО
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  * Статус - ПеречислениеСсылка.СтатусыСообщенийЭДО
//  * ДатаИзмененияСтатуса - Дата
//  * ДополнительнаяИнформация - Строка
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * НомерДокумента - Строка
//  * ДатаДокумента - Дата
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО
//  * ПрисоединенныйФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * ПолноеИмяФайла - Строка
//
Функция ДанныеЭлементовСхемыРегламента(ЭлектронныйДокумент) Экспорт
	Запрос = Новый Запрос(ТекстЗапросаДанныхЭлементовСхемыРегламента(ЭтоВходящийЭДО(ЭлектронныйДокумент)));
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#КонецОбласти

#Область ПредставлениеДокумента

// Возвращает пустые свойства электронного документа для формирования представления.
// 
// Возвращаемое значение:
//  Структура:
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * НомерДокумента - Строка
//  * ДатаДокумента - Дата
Функция НовыеСвойстваПредставленияДокумента() Экспорт
	Свойства = Новый Структура;
	Свойства.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	Свойства.Вставить("НомерДокумента", "");
	Свойства.Вставить("ДатаДокумента", Дата(1,1,1));
	Возврат Свойства;
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Значение - См. НовыеСвойстваПредставленияДокумента
Функция СвойстваДокументовДляПредставления(ЭлектронныеДокументы) Экспорт
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ЭлектронныеДокументы,
		"ВидДокумента, НомерДокумента, ДатаДокумента");
КонецФункции

// Получение представления по свойствам электронного документа.
//
// Параметры:
//  СвойстваДокумента - Структура - параметры из которых формируется представление документа:
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - вид электронного документа.
//  * НомерДокумента - Строка - номер электронного документа.
//  * ДатаДокумента - Дата - дата электронного документа.
//  ЭтоНовый - Булево
//
// Возвращаемое значение:
//  Строка
Функция ПредставлениеДокументаПоСвойствам(СвойстваДокумента, ЭтоНовый = Ложь) Экспорт
	Возврат ИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеДокументаПоСвойствам(СвойстваДокумента, ЭтоНовый);
КонецФункции

// Параметры:
//  ИмяВременнойТаблицы - Строка
//  ИмяПараметраСообщенияЭДО - Строка
// 
// Возвращаемое значение:
//  См. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросПараметровПредставленияДокументов(ИмяВременнойТаблицы, ИмяПараметраСообщенияЭДО) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.ВидСообщения КАК ВидДокумента,
		|	СообщениеЭДО.ЭлектронныйДокумент.НомерДокумента КАК НомерДокумента,
		|	СообщениеЭДО.ЭлектронныйДокумент.ДатаДокумента КАК ДатаДокумента
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.Ссылка В(&СообщенияЭДО)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СообщенияЭДО", ИмяПараметраСообщенияЭДО);
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ТекстЗапроса;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент
//  Сообщение - ДокументСсылка.СообщениеЭДО
Процедура ДополнитьТабличныйДокументШтампамиПодписей(ТабличныйДокумент, Сообщение) Экспорт
	
	ВизуализацияЭДОСлужебный.ДополнитьТабличныйДокументШтампамиПодписей(ТабличныйДокумент, Сообщение);
	
КонецПроцедуры

#КонецОбласти

#Область ОписаниеОбъектаУчета

// Возвращает описание набора электронных документов по основанию.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ВидДокумента - Неопределено - если отбор по виду документа не требуется.
//               - СправочникСсылка.ВидыДокументовЭДО - значение отбора описаний электронных документов.
// 
// Возвращаемое значение:
//  См. ИнтеграцияЭДО.ОписаниеОбъектаУчета
Функция ОписаниеОбъектаУчета(ОбъектУчета, ВидДокумента = Неопределено) Экспорт
	
	ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ОбъектУчета);
	Если Не ЗначениеЗаполнено(ОписаниеОбъектаУчета)
		ИЛИ Не ЗначениеЗаполнено(ВидДокумента) Тогда
		Возврат ОписаниеОбъектаУчета;
	КонецЕсли;
	
	Отбор = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДокумента, "ТипДокумента, ПрикладнойТипДокумента");
	Возврат ОписаниеОбъектаУчета.Скопировать(Отбор);
	
КонецФункции

#КонецОбласти

#Область ОписаниеСообщения

// Возвращает пустое описание сообщения.
// 
// Возвращаемое значение:
//  Структура:
//  * ВидСообщения - СправочникСсылка.ВидыДокументовЭДО
//  * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  * ДополнительнаяИнформация - Строка - сопроводительная записка к сообщению.
//  * Данные - См. ФорматыЭДО.НовыйРезультатФормированияДокументаПоУчету
//  * УстановленныеПодписи - Массив из см. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  * Ссылка - ДокументСсылка.СообщениеЭДО - ссылка на сообщение
//
Функция НовоеОписаниеСообщения() Экспорт
	Возврат ЭлектронныеДокументыЭДОСлужебный.НовоеОписаниеСообщения();
КонецФункции

// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ДанныеОбъектаУчета - См. ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента
//  НастройкиОтправки - См. НастройкиЭДО.НастройкиОтправки
//  ЗначенияДополнительныхПолей - Неопределено,Произвольный
// 
// Возвращаемое значение:
//  См. ЭлектронныеДокументыЭДОСлужебный.НовоеОписаниеСообщения 
Функция ОписаниеСообщенияОтправителя(ОбъектУчета, ДанныеОбъектаУчета, НастройкиОтправки, ЗначенияДополнительныхПолей = Неопределено) Экспорт
	Возврат ЭлектронныеДокументыЭДОСлужебный.ОписаниеСообщенияОтправителя(ОбъектУчета, ДанныеОбъектаУчета,
		НастройкиОтправки, ЗначенияДополнительныхПолей);
КонецФункции

// Возвращает массив, содержащий описания дополнительных сообщений.
// 
// Параметры:
//  ОбъектУчета - ДокументСсылка
//  ДанныеОбъектаУчета - ДеревоЗначений
//  НастройкиОтправки - см. НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки
//  ПараметрыФормирования - см. ИнтеграцияЭДО.НовыеПараметрыФормированияДанныхОбъектаУчета
// 
// Возвращаемое значение:
//  Массив из см. НовоеОписаниеСообщения
Функция ОписанияДополнительныхСообщений(ОбъектУчета, ДанныеОбъектаУчета, НастройкиОтправки, ПараметрыФормирования) Экспорт
	Возврат ЭлектронныеДокументыЭДОСлужебный.ОписанияДополнительныхСообщений(ОбъектУчета, ДанныеОбъектаУчета,
		НастройкиОтправки, ПараметрыФормирования);
КонецФункции

// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  НастройкиОтправки - См. НастройкиЭДО.НастройкиОтправки
//  ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО
// 
// Возвращаемое значение:
//  См. НовоеОписаниеСообщения 
Функция ОписаниеСообщенияОтправителяПрикладногоДокумента(ОбъектУчета, НастройкиОтправки, ПрикладнойТипДокумента) Экспорт
	Возврат ЭлектронныеДокументыЭДОСлужебный.ОписаниеСообщенияОтправителяПрикладногоДокумента(
		ОбъектУчета, НастройкиОтправки, ПрикладнойТипДокумента);
КонецФункции

// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  НастройкиВнутреннегоЭДО - См. ИнтерфейсДокументовЭДО.НастройкиВнутреннегоЭДО
// 
// Возвращаемое значение:
//  См. НовоеОписаниеСообщения 
Функция ОписаниеСообщенияВнутреннегоЭДО(ОбъектУчета, НастройкиВнутреннегоЭДО) Экспорт
	Возврат ЭлектронныеДокументыЭДОСлужебный.ОписаниеСообщенияВнутреннегоЭДО(ОбъектУчета, НастройкиВнутреннегоЭДО);
КонецФункции

// Возвращаемое значение:
//  См. ФорматыЭДО.НовоеОписаниеФайлаДокумента
Функция НовоеСодержаниеСообщения() Экспорт
	Возврат ФорматыЭДО.НовоеОписаниеФайлаДокумента();
КонецФункции

#КонецОбласти

#Область ДанныеСообщения

// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  ДанныеФайла - ДвоичныеДанные
//  ДанныеФайлаОтвета - ДвоичныеДанные
//  ПараметрыВизуализации - См. ФорматыЭДО.НовыеПараметрыВизуализацииДокумента
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  см. ВизуализацияЭДОСлужебный.ПредставлениеДанныхСообщения
Функция ПредставлениеДанныхСообщения(ВидДокумента, ДанныеФайла, ДанныеФайлаОтвета = Неопределено, 
		ПараметрыВизуализации = Неопределено, КонтекстДиагностики = Неопределено) Экспорт
	
	Возврат ВизуализацияЭДОСлужебный.ПредставлениеДанныхСообщения(ВидДокумента, ДанныеФайла, ДанныеФайлаОтвета, 
		ПараметрыВизуализации, КонтекстДиагностики);
	
КонецФункции

// Формирует представление данных сообщения.
// 
// Параметры:
//	ПараметрыПолученияПредставления - см. ВизуализацияЭДОСлужебный.НовыеПараметрыПолученияПредставленияДанныхСообщенияПоСсылке
//
// Возвращаемое значение:
//  См. ВизуализацияЭДОСлужебный.ПредставлениеДанныхСообщенияПоСсылке
Функция ПредставлениеДанныхСообщенияПоСсылке(ПараметрыПолученияПредставления) Экспорт
	
	Возврат ВизуализацияЭДОСлужебный.ПредставлениеДанныхСообщенияПоСсылке(ПараметрыПолученияПредставления);
	
КонецФункции

// Новые параметры получения представления данных сообщения по ссылке.
// 
// Возвращаемое значение:
//  см. ВизуализацияЭДОСлужебный.НовыеПараметрыПолученияПредставленияДанныхСообщенияПоСсылке
Функция НовыеПараметрыПолученияПредставленияДанныхСообщенияПоСсылке() Экспорт
	
	Возврат ВизуализацияЭДОСлужебный.НовыеПараметрыПолученияПредставленияДанныхСообщенияПоСсылке();
	
КонецФункции

// Параметры:
//  ДвоичныеДанныеАрхива - ДвоичныеДанные
// 
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * ПредставлениеДокумента - Неопределено,ТабличныйДокумент
//  * КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция ПредставлениеДанныхВнутреннегоСообщения(ДвоичныеДанныеАрхива) Экспорт
	
	Возврат ВнутренниеДокументыЭДО.ПредставлениеДанныхВнутреннегоДокумента(ДвоичныеДанныеАрхива);
	
КонецФункции

// Формирует табличный документ карточки электронного документа.
// 
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО - Ссылка на сообщение ЭДО
//  ОтветноеСообщение - ДокументСсылка.СообщениеЭДО, Неопределено - Ответное сообщение ЭДО
// 
// Возвращаемое значение:
//  ТабличныйДокумент - Представление карточки сообщения
Функция ПредставлениеКарточкиСообщения(Сообщение, ОтветноеСообщение = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(СообщениеЭДО.ВидСообщения) КАК ВидДокументаПредставление,
		|	СообщениеЭДО.ЭлектронныйДокумент.Номер КАК НомерДокумента,
		|	СообщениеЭДО.ЭлектронныйДокумент.Дата КАК ДатаДокумента,
		|	СообщениеЭДО.ДополнительнаяИнформация КАК СопроводительнаяЗаписка,
		|	СообщениеЭДО.ЭлектронныйДокумент.Контрагент КАК Контрагент,
		|	СообщениеЭДО.ЭлектронныйДокумент.Организация КАК Организация,
		|	СообщениеЭДО.Направление КАК Направление,
		|	СообщениеЭДО.Ссылка КАК Сообщение,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.ЭлектронныйДокумент.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	СообщениеЭДО.ОсновнойФайл КАК ФайлСсылка,
		|	СообщениеЭДО.ОсновнойФайл.ПолноеИмяФайла КАК ПолноеИмяФайла,
		|	СообщениеЭДО.ОсновнойФайл.Расширение КАК РасширениеФайла
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.Ссылка = &Сообщение";
	
	Запрос.Параметры.Вставить("Сообщение", Сообщение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИмяМакета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ПФ_MXL_КарточкаЭД_%1",
		ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеЭДО.ПолучитьМакет(ИмяМакета);
	Макет.КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Если Выборка.Следующий() Тогда
	
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		
		ОбластьШапка.Параметры.ИмяФайла = Выборка.ПолноеИмяФайла;
		ОбластьШапка.Параметры.НомерДокумента = Выборка.НомерДокумента;
		ОбластьШапка.Параметры.ДатаДокумента = Выборка.ДатаДокумента;
		
		Если Выборка.Направление = Перечисления.НаправленияЭДО.Исходящий
			Или Выборка.Направление = Перечисления.НаправленияЭДО.Интеркампани Тогда
			Отправитель = ИнтеграцияЭДО.ПредставлениеЮрФизЛица(Выборка.Организация);
			Получатель = ИнтеграцияЭДО.ПредставлениеЮрФизЛица(Выборка.Контрагент);
		Иначе
			Отправитель = ИнтеграцияЭДО.ПредставлениеЮрФизЛица(Выборка.Контрагент);
			Получатель = ИнтеграцияЭДО.ПредставлениеЮрФизЛица(Выборка.Организация);
		КонецЕсли;
		
		ОбластьШапка.Параметры.Отправитель = Отправитель;
		ОбластьШапка.Параметры.Получатель = Получатель;
		
		Файл = Новый Файл(Выборка.ПолноеИмяФайла);
		ОбластьШапка.Параметры.Идентификатор = Файл.ИмяБезРасширения;
		ОбластьШапка.Параметры.ВидДокумента = Выборка.ВидДокументаПредставление;

		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент,
			ОбластьШапка, "Шапка");
		
		Если ЗначениеЗаполнено(Выборка.СопроводительнаяЗаписка) Тогда
			ОбластьСопроводительнаяЗаписка = Макет.ПолучитьОбласть("СопроводительнаяЗаписка");
			ОбластьСопроводительнаяЗаписка.Параметры.Заполнить(Выборка);
			ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент,
				ОбластьСопроводительнаяЗаписка, "СопроводительнаяЗаписка");
		КонецЕсли;
		
		ОбластьТребуемыеПодписи = Макет.ПолучитьОбласть("ТребуемыеПодписи");
		
		ПодписьОтправителя = Отправитель;
		ПодписьПолучателя = ?(Выборка.ТребуетсяПодтверждение, Получатель, НСтр("ru = 'Не требуется'"));
			
		ОбластьТребуемыеПодписи.Параметры.ПредставлениеОтправителя = ПодписьОтправителя;
		ОбластьТребуемыеПодписи.Параметры.ПредставлениеПолучателя = ПодписьПолучателя;
		
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент,
			ОбластьТребуемыеПодписи, "ТребуемыеПодписи");

		УстановленныеПодписи = УстановленныеПодписиСУчетомДоверенностей(Сообщение);
		
		Если ЗначениеЗаполнено(ОтветноеСообщение) Тогда
			ОтветныеПодписи = УстановленныеПодписиСУчетомДоверенностей(ОтветноеСообщение);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УстановленныеПодписи, ОтветныеПодписи);
		КонецЕсли;
		
		ЕстьПодписиПоДоверенности = Ложь;
		Для Каждого Подпись Из УстановленныеПодписи Цикл
			ИнтерфейсДокументовЭДО.СкорректироватьДатыПодписиНаЧасовойПоясКлиента(Подпись.СвойстваПодписи);
			Если Подпись.ЭтоПодписьПоДоверенности Тогда
				ЕстьПодписиПоДоверенности = Истина;
			КонецЕсли;
		КонецЦикла;

		ОбластьСертификатыЗаголовок = Макет.ПолучитьОбласть("СертификатыЗаголовок");
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(
			ТабличныйДокумент, ОбластьСертификатыЗаголовок, "СертификатыЗаголовок");
			
		ОбластьСертификаты = Макет.ПолучитьОбласть("Сертификаты");
		Если ЕстьПодписиПоДоверенности Тогда
			ОбластьСертификаты = Макет.ПолучитьОбласть("СертификатыПоДоверенности");
		КонецЕсли;
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьСертификаты, "Сертификаты");
		
		Если ЗначениеЗаполнено(УстановленныеПодписи) Тогда
			
			ОбластьСертификатыСтрока = Макет.ПолучитьОбласть("СертификатыСтрока");
			Если ЕстьПодписиПоДоверенности Тогда
				ОбластьСертификатыСтрока = Макет.ПолучитьОбласть("СертификатыСтрокаПоДоверенности");
			КонецЕсли;
			НомерСтроки = 1;
			
			Для Каждого Подпись Из УстановленныеПодписи Цикл
				
				ОбластьСертификатыСтрока.Параметры.Заполнить(Подпись.СвойстваПодписи);
				ЕстьДоверенность = Ложь;
				
				Если ЕстьПодписиПоДоверенности Тогда
					ОбластьСертификатыСтрока.Параметры.Доверенность = "";
				КонецЕсли;
				 
				Если Подпись.ЭтоПодписьПоДоверенности Тогда 
					ЕстьДоверенность = Подпись.СвойстваДоверенности <> Неопределено;
					Если ЕстьДоверенность Тогда
						ОбластьСертификатыСтрока.Параметры.Доверенность =
							СтрШаблон("%1%2%3-%4",
								Подпись.СвойстваДоверенности.НомерДоверенности,
								Символы.ПС,
								Формат(Подпись.СвойстваДоверенности.ДатаВыдачи, "ДЛФ=D"),
								Формат(Подпись.СвойстваДоверенности.ДатаОкончания, "ДЛФ=D"));
					Иначе
						ОбластьСертификатыСтрока.Параметры.Доверенность = НСтр("ru='Доверенность не найдена'"); 
					КонецЕсли;
				КонецЕсли;
				
				ПроверкаДоверенностиВыполненаВручную = 
					МашиночитаемыеДоверенностиКлиентСервер.ПроверкаДоверенностиВыполненаВручную(
						Подпись.РезультатПроверкиПоМЧД);
						
				Если ПроверкаДоверенностиВыполненаВручную Тогда
					ОбластьСертификатыСтрока.Параметры.Доверенность = 
						МашиночитаемыеДоверенности.ПредставлениеРезультатаРучнойПроверкиМЧД();
				КонецЕсли;
				
				ОбластьСертификатыСтрока.Параметры.КомуВыдан = Подпись.СвойстваПодписи.Владелец;
				ОбластьСертификатыСтрока.Параметры.Сертификат = Подпись.СвойстваПодписи.Владелец;
				ОбластьСертификатыСтрока.Параметры.ДатаПодписи = Подпись.СвойстваПодписи.ДатаПодписи;
				
				ПодписьВерна = Подпись.СвойстваПодписи.ПодписьВерна;
				
				Если Подпись.ЭтоПодписьПоДоверенности Тогда
					
					ПодписьВернаПоДоверенности = Ложь;
					
					Если ЗначениеЗаполнено(Подпись.РезультатПроверкиПоМЧД) Тогда
						ПодписьВернаПоДоверенности = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
							Подпись.РезультатПроверкиПоМЧД, "ПодписьВерна", Ложь);
					КонецЕсли;
					
					ПодписьВерна = ПодписьВерна И ПодписьВернаПоДоверенности;
					
				КонецЕсли;
				
				СтатусПодписи = ?(ПодписьВерна, НСтр("ru = 'Верна'"), НСтр("ru = 'Неверна'"));
				СимволРазделитель = ?(ЕстьДоверенность, Символы.ПС, " ");
				ДатаПроверки = "(" + Формат(Подпись.СвойстваПодписи.ДатаПроверкиПодписи,"ДЛФ=DT") + ")";
				ОбластьСертификатыСтрока.Параметры.Статус = СтатусПодписи + СимволРазделитель + ДатаПроверки;

				ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьСертификатыСтрока,
					"СертификатыСтрока", НомерСтроки);
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьПодпись = Макет.ПолучитьОбласть("Подпись");
		ОбластьПодпись.Параметры.ТекущаяДата = Формат(ТекущаяДатаСеанса(), "ДЛФ=D");
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьПодпись, "Подпись");
		
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Очищает дополнительную информацию (сопроводительную записку) для указанного электронного документа.
// 
// Параметры:
// 	Сообщение - ДокументСсылка.СообщениеЭДО - Ссылка на сообщение ЭДО.
Процедура ОчиститьДополнительнуюИнформациюСообщения(Сообщение) Экспорт
	СообщениеОбъект = Сообщение.ПолучитьОбъект();
	СообщениеОбъект.ДополнительнаяИнформация = "";
	СообщениеОбъект.Записать();
КонецПроцедуры

// Изменяет дополнительную информацию (сопроводительную записку) сообщений при записи исходящего электронного документа.
// 
// Параметры:
// 	ОписанияСообщений - Массив Из См. НовоеОписаниеСообщения
// 	Отказ - Булево
Процедура ПриИзмененииСопроводительнойЗаписки(ОписанияСообщений, Отказ) Экспорт
	
	Если Не ОписанияСообщений.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	Для Каждого ОписаниеСообщения Из ОписанияСообщений Цикл
		ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ОписаниеСообщения.Ссылка);
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();

		Для Каждого ОписаниеСообщения Из ОписанияСообщений Цикл
			СообщениеОбъект = ОписаниеСообщения.Ссылка.ПолучитьОбъект();
			Если СообщениеОбъект.ДополнительнаяИнформация <> ОписаниеСообщения.ДополнительнаяИнформация Тогда
				СообщениеОбъект.ДополнительнаяИнформация = ОписаниеСообщения.ДополнительнаяИнформация;
				СообщениеОбъект.Записать();
			КонецЕсли;
		КонецЦикла;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Получает информацию о товаре из файла электронного документа.
//
// Параметры:
//  ПараметрыПолучения - см. ФорматыЭДО.НовыеПараметрыПолученияДанныхДокумента.
// Возвращаемое значение:
// 	См. ФорматыЭДО.ИнформацияОТовареИзФайла.
Функция ДанныеНоменклатурыДокумента(ПараметрыПолучения) Экспорт

	Возврат ФорматыЭДО.ИнформацияОТовареИзФайла(ПараметрыПолучения);

КонецФункции

// Получает информацию по данным электронного документа.
//
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО - Ссылка на сообщение ЭДО.
// Возвращаемое значение:
// 	См. КонвертацияЭДО.ПараметрыФайлаПроизвольногоДокумента.
Функция РаспознатьСообщение(Сообщение) Экспорт
	
	ДвоичныеДанные = ДвоичныеДанныеСообщения(Сообщение);
	
	Возврат КонвертацияЭДО.ПараметрыФайлаПроизвольногоДокумента(ДвоичныеДанные);
	
КонецФункции

// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоСводныйУПД(ДвоичныеДанные) Экспорт
	Возврат ФорматыЭДО.ЭтоСводныйУПД(ДвоичныеДанные);
КонецФункции

// Возвращает ссылку на электронный документ по сообщению.
//
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
// Возвращаемое значение:
// 	ДокументСсылка.ЭлектронныйДокументИсходящийЭДО, 
//  ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//
Функция ЭлектронныйДокументСообщенияЭДО(Сообщение) Экспорт
	Возврат ЭлектронныеДокументыЭДОСлужебный.ЭлектронныйДокументСообщенияЭДО(Сообщение);
КонецФункции

// Параметры:
//  Статус - ПеречислениеСсылка.СтатусыСообщенийЭДО
// 
// Возвращаемое значение:
//  Булево
Функция СообщениеОтправлено(Статус) Экспорт
	Возврат Статус = Перечисления.СтатусыСообщенийЭДО.Отправлен
		ИЛИ Статус = Перечисления.СтатусыСообщенийЭДО.Подтвержден;
КонецФункции

// Получает описание сообщения по двоичным данным.
//
// Параметры:
//  ОписаниеФайла - См. РаботаСФайламиБЭД.НовоеОписаниеФайла
// Возвращаемое значение:
// 	См. ФорматыЭДО.ПрочитатьСодержаниеДокумента.
Функция СодержаниеСообщения(ОписаниеФайла) Экспорт

	Возврат ФорматыЭДО.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
	
КонецФункции

// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоСлужебныйСообщение(Сообщение) Экспорт
	ТипЭлементаРегламента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ТипЭлементаРегламента");
	Возврат РегламентыЭДО.ЭтоСлужебноеСообщение(ТипЭлементаРегламента);
КонецФункции

// Параметры:
//  Сообщения - Массив из ДокументСсылка.СообщениеЭДО
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.СообщениеЭДО
//  * Значение - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция ДокументыСообщений(Сообщения) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сообщения, "ЭлектронныйДокумент", Истина);
КонецФункции

// Возвращает данные кратких наименованиях типов сообщений ЭДО.
//
// Параметры:
// 	Сообщения - Массив из ДокументСсылка.СообщениеЭДО
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение:
// 	 * Ключ - ДокументСсылка.СообщениеЭДО - Сообщение ЭДО.
// 	 * Значение - Строка - Краткое наименование типа сообщения.
Функция ТипыСообщенийКратко(Сообщения) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сообщения", Сообщения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеЭДО.Ссылка,
	|	СообщениеЭДО.ТипЭлементаРегламента
	|ИЗ
	|	Документ.СообщениеЭДО КАК СообщениеЭДО
	|ГДЕ
	|	СообщениеЭДО.Ссылка В (&Сообщения)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТипСообщенияКратко = ОбщегоНазначения.ИмяЗначенияПеречисления(Выборка.ТипЭлементаРегламента);
		Результат.Вставить(Выборка.Ссылка, ТипСообщенияКратко);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает двоичные данные представления сообщения
// 
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО.
//  ВызыватьИсключение - Булево
// 
// Возвращаемое значение:
//  ДвоичныеДанные, Неопределено - Представление сообщения
//
Функция ДвоичныеДанныеСообщения(Сообщение, ВызыватьИсключение = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.ОсновнойФайл КАК ОсновнойФайл,
		|	СообщениеЭДО.ПометкаУдаления КАК ПометкаУдаления,
		|	ПрисоединенныеФайлы.Расширение КАК Расширение,
		|	ВЫБОР
		|		КОГДА ПрисоединенныеФайлы.Расширение = ""xml""
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Приоритет,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО СообщениеЭДО.ОсновнойФайл = ПрисоединенныеФайлы.Ссылка
		|ГДЕ
		|	СообщениеЭДО.Ссылка = &Ссылка
		|	И ПрисоединенныеФайлы.Расширение В (""xml"", ""zip"", ""pdf"")
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	Запрос.УстановитьПараметр("Ссылка", Сообщение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.ОсновнойФайл, ВызыватьИсключение);
	Если ДвоичныеДанныеФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ВидСообщения.ТипДокумента");
	Если НРег(Выборка.Расширение) = "zip" Тогда
		
		ОписаниеФайла = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
		ОписаниеФайла.ИмяФайла = Выборка.ПолноеИмяФайла;
			ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанныеФайла;
		ДанныеМЧД = МашиночитаемыеДоверенности.ДанныеДоверенностиИзФайлаОбмена(ОписаниеФайла);
		Если ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность И ФорматыЭДО.ЭтоМЧД(ДанныеМЧД) Тогда
			ДвоичныеДанныеФайла = ДанныеМЧД.ДвоичныеДанные;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли  НРег(Выборка.Расширение) = "pdf" Тогда
		
		Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорныйДокумент Тогда
	
			ОписаниеФайла = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
			ОписаниеФайла.ИмяФайла = Выборка.ПолноеИмяФайла;
			ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанныеФайла;
			ДвоичныеДанныеФайла = Обработки.ФорматДоговорныйДокумент101.ДанныеДокументаИзФайлаОбмена(ОписаниеФайла);
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДвоичныеДанныеФайла;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Сумма - Число
//  * СуммаНДС - Число
//  * ПредставлениеВалюты - Строка
//  * ПредставлениеСтавкиНДС - Строка
Функция НовыеИтогиДокументаПоСодержаниюФайла() Экспорт
	
	ИтогиДокумента = Новый Структура;
	ИтогиДокумента.Вставить("Сумма", 0);
	ИтогиДокумента.Вставить("СуммаНДС", 0);
	ИтогиДокумента.Вставить("ПредставлениеВалюты", "");
	ИтогиДокумента.Вставить("ПредставлениеСтавкиНДС", "");
	Возврат ИтогиДокумента;
	
КонецФункции

#КонецОбласти

#Область ДанныеДокумента

// Возвращает имя таблицы документа ЭДО.
// 
// Параметры:
//  ЭтоВходящийЭДО - Булево
// 
// Возвращаемое значение:
//  Строка
Функция ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО) Экспорт
	Возврат ?(ЭтоВходящийЭДО, "Документ.ЭлектронныйДокументВходящийЭДО", "Документ.ЭлектронныйДокументИсходящийЭДО");
КонецФункции

// Параметры:
//  ДанныеДокумента - см. ВизуализацияЭДОСлужебный.НовыеСвойстваДокументаДляФормированияВизуализации
//  ПараметрыВизуализации - См. ВизуализацияЭДОСлужебный.НовыеПараметрыВизуализацииДокумента
// 
// Возвращаемое значение:
//  см. ВизуализацияЭДОСлужебный.ВизуализацияДокумента
Функция ВизуализацияДокумента(ДанныеДокумента, ПараметрыВизуализации) Экспорт
	
	Возврат ВизуализацияЭДОСлужебный.ВизуализацияДокумента(ДанныеДокумента, ПараметрыВизуализации);
	
КонецФункции

// Ищет данные документов для отражения в учете.
// 
// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Массив из см. ОтражениеВУчетеЭДО.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
Функция ДанныеДокументовДляОтраженияВУчете(ЭлектронныеДокументы, КонтекстДиагностики = Неопределено) Экспорт
	
	Если Не ИнтеграцияЭДО.ЕстьПодсистемаОтражениеВУчетеЭДО() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если НастройкиЭДО.ИспользоватьИнтеграциюОблачногоЭДО() Тогда
		ОбщийМодульЭлектронныеДокументыЭДОИнтеграцияОблака = ОбщегоНазначения.ОбщийМодуль(
			"ЭлектронныеДокументыЭДОИнтеграцияОблака");
		ОбщийМодульЭлектронныеДокументыЭДОИнтеграцияОблака.ОбновитьПолныеДанныеДокументовЭДО(ЭлектронныеДокументы);
	КонецЕсли;
	
	ДанныеДокументов = ЭлектронныеДокументыЭДОСлужебный.ДанныеДокументовДляОтраженияВУчете(ЭлектронныеДокументы);
	
	Возврат ДанныеДокументов;
	
КонецФункции

// Сведения сообщения участника ЭДО.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на исходящий электронный документ.
//                      - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на входящий электронный документ.
// 
// Возвращаемое значение:
//  Структура - описание:
//   * ОписаниеВидаДокумента - Структура - описание:
//     ** ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - тип электронного документа.
//     ** ПрикладнойТипДокумента - Неопределено
//     							- ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - тип прикладного электронного документа.
//     ** ИдентификаторКомандыПечати - Строка - идентификатор команды печати.
//   * Подписи- ТаблицаЗначений - таблица подписей с колонками:
//     ** Подписант - СправочникСсылка.Пользователи - пользователь, установивший подпись.
//     ** Дата - Дата - дата и время установки подписи.
//     ** Владелец - Строка - владелец подписи.
//   * ОбъектыУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - массив ссылок на объекты учета.
//   * Актуальный - Булево - признак того, что электронный документ является актуальным для указанных объектов учета.
//   * СодержитМаркируемыеТовары - Булево - Истина, если документ содержит информацию о маркируемых товарах.
//   * Сообщения - Структура - набор сведений об отдельных сообщениях ЭДО по документообороту электронного документа:
//     ** ДанныеОтправителя - Структура - сведения о титуле отправителя:
//       *** ИмяФайлаБезРасширения - Строка - имя файла сообщения без расширения.
//       *** Расширение - Строка - расширение файла без точки.
//     ** ДанныеПолучателя - Неопределено - если титул получателя отсутствует.
//                        - Структура - сведения о титуле получателя:
//       *** ИмяФайлаБезРасширения - Строка - имя файла сообщения без расширения.
//       *** Расширение - Строка - расширение файла без точки.
Функция СведенияСообщенияУчастникаЭДО(ЭлектронныйДокумент) Экспорт
		
	Подписи = Новый ТаблицаЗначений;
	Подписи.Колонки.Добавить("Подписант", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Подписи.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Подписи.Колонки.Добавить("Владелец", Новый ОписаниеТипов("Строка",
		Новый КвалификаторыСтроки(255, ДопустимаяДлина.Переменная)));
	
	Сведения = Новый Структура;
	
	Сведения.Вставить("ОписаниеВидаДокумента", Новый Структура);
	Сведения.ОписаниеВидаДокумента.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	Сведения.ОписаниеВидаДокумента.Вставить("ПрикладнойТипДокумента", Неопределено);
	Сведения.ОписаниеВидаДокумента.Вставить("ИдентификаторКомандыПечати", "");
	
	Сведения.Вставить("Подписи", Подписи);
	Сведения.Вставить("ОбъектыУчета", Новый Массив);
	Сведения.Вставить("Актуальный", Ложь);
	Сведения.Вставить("СодержитМаркируемыеТовары", Ложь);
	
	Сведения.Вставить("Сообщения", Новый Структура);
	Сведения.Сообщения.Вставить("ДанныеОтправителя", Новый Структура);
	Сведения.Сообщения.ДанныеОтправителя.Вставить("ИмяФайлаБезРасширения", "");
	Сведения.Сообщения.ДанныеОтправителя.Вставить("Расширение", "");
	Сведения.Сообщения.Вставить("ДанныеПолучателя", Новый Структура);
	Сведения.Сообщения.ДанныеПолучателя.Вставить("ИмяФайлаБезРасширения", "");
	Сведения.Сообщения.ДанныеПолучателя.Вставить("Расширение", "");
	
	Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Возврат Сведения;
	КонецЕсли;
	
	Если НастройкиЭДО.ИспользоватьИнтеграциюОблачногоЭДО() Тогда
		ОбщийМодульЭлектронныеДокументыЭДОИнтеграцияОблака = ОбщегоНазначения.ОбщийМодуль(
			"ЭлектронныеДокументыЭДОИнтеграцияОблака");
		ОбщийМодульЭлектронныеДокументыЭДОИнтеграцияОблака.ОбновитьПолныеДанныеДокументовЭДО(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлектронныйДокумент));
	КонецЕсли;
	
	ТекстыЗапросов = Новый Массив;
	
	Если ЭтоВходящийЭДО(ЭлектронныйДокумент) Тогда
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента,
			|	ВидыДокументовЭДО.ПрикладнойТипДокумента КАК ПрикладнойТипДокумента,
			|	ВидыДокументовЭДО.ИдентификаторКомандыПечати КАК ИдентификаторКомандыПечати,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная) КАК ВидПодписи,
			|	ЭлектронныйДокументВходящийЭДО.СодержитМаркируемыеТовары КАК СодержитМаркируемыеТовары
			|ИЗ
			|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
			|		ПО ЭлектронныйДокументВходящийЭДО.ВидДокумента = ВидыДокументовЭДО.Ссылка
			|		И ЭлектронныйДокументВходящийЭДО.Ссылка = &ЭлектронныйДокумент");
	Иначе
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента,
			|	ВидыДокументовЭДО.ПрикладнойТипДокумента КАК ПрикладнойТипДокумента,
			|	ВидыДокументовЭДО.ИдентификаторКомандыПечати КАК ИдентификаторКомандыПечати,
			|	ЭлектронныйДокументИсходящийЭДО.ВидПодписи КАК ВидПодписи,
			|	ЭлектронныйДокументИсходящийЭДО.СодержитМаркируемыеТовары КАК СодержитМаркируемыеТовары
			|ИЗ
			|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
			|		ПО ЭлектронныйДокументИсходящийЭДО.ВидДокумента = ВидыДокументовЭДО.Ссылка
			|		И ЭлектронныйДокументИсходящийЭДО.Ссылка = &ЭлектронныйДокумент");
	КонецЕсли;
	
	ТекстыЗапросов.Добавить(ИнтеграцияЭДО.ТекстЗапросаОбъектовУчетаЭлектронныхДокументов());
	
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СообщениеЭДО.ОсновнойФайл КАК Ссылка,
		|	СообщениеЭДО.ОсновнойФайл.ПолноеИмяФайла КАК ПолноеИмяФайла,
		|	СообщениеЭДО.ТипЭлементаРегламента
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И СообщениеЭДО.ТипЭлементаРегламента В (&ТипыЭлементовРегламента)");
	
	ТипыЭлементовРегламента = Новый Массив;
	ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Запрос.УстановитьПараметр("ТипыЭлементовРегламента", ТипыЭлементовРегламента);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатыЗапроса[0].Пустой() Тогда
		Возврат Сведения;
	КонецЕсли;
	
	ВыборкаОписанияВида = РезультатыЗапроса[0].Выбрать();
	ВыборкаОписанияВида.Следующий();
	ЗаполнитьЗначенияСвойств(Сведения.ОписаниеВидаДокумента, ВыборкаОписанияВида);
	ЗаполнитьЗначенияСвойств(Сведения, ВыборкаОписанияВида);
	
	ВыборкаОбъектовУчета = РезультатыЗапроса[1].Выбрать();
	Пока ВыборкаОбъектовУчета.Следующий() Цикл
		Сведения.ОбъектыУчета.Добавить(ВыборкаОбъектовУчета.ОбъектУчета);
		Если ВыборкаОбъектовУчета.Актуальный Тогда
			Сведения.Актуальный = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Сведения.Актуальный = Не РезультатыЗапроса[1].Пустой();
	
	ВыборкаФайлов = РезультатыЗапроса[2].Выбрать();
	Пока ВыборкаФайлов.Следующий() Цикл
		Если ВыборкаОписанияВида.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая Тогда
			ПростыеПодписи = ЭлектронныеДокументыЭДОСлужебный.УстановленныеПростыеПодписи(ВыборкаФайлов.Ссылка);
			Для Каждого СвойстваПодписи Из ПростыеПодписи Цикл
				СтрокаПодписи = Сведения.Подписи.Добавить();
				СтрокаПодписи.Подписант = СвойстваПодписи.УстановившийПодпись;
				СтрокаПодписи.Дата = СвойстваПодписи.ДатаПодписи;
				СтрокаПодписи.Владелец = СвойстваПодписи.ВладелецПодписи;
			КонецЦикла;
		Иначе
			ЭлектронныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ВыборкаФайлов.Ссылка);
			Для Каждого СвойстваПодписи Из ЭлектронныеПодписи Цикл
				СтрокаПодписи = Сведения.Подписи.Добавить();
				СтрокаПодписи.Подписант = СвойстваПодписи.УстановившийПодпись;
				СтрокаПодписи.Дата = СвойстваПодписи.ДатаПодписи;
				СтрокаПодписи.Владелец = СвойстваПодписи.КомуВыданСертификат;
			КонецЦикла;
		КонецЕсли;
		
		// Заполним сведения о сообщениях
		Если ВыборкаФайлов.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			ТипЭлементаРегламента = "ДанныеОтправителя";
		Иначе
			ТипЭлементаРегламента = "ДанныеПолучателя";			
		КонецЕсли;
		
		СведенияОИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыборкаФайлов.ПолноеИмяФайла);
		ЭлементСведений = Сведения.Сообщения[ТипЭлементаРегламента]; 
		ЭлементСведений.ИмяФайлаБезРасширения = СведенияОИмениФайла.ИмяБезРасширения;
		ЭлементСведений.Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СведенияОИмениФайла.Расширение);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Сведения.Сообщения.ДанныеПолучателя.ИмяФайлаБезРасширения) Тогда
		Сведения.Сообщения.ДанныеПолучателя = Неопределено;
	КонецЕсли;
	
	Возврат Сведения;
	
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//                      - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьОтклонениеАннулирования(ЭлектронныйДокумент) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ПОА_УОУ)
		|	И СообщениеЭДО.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Входящий)";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//                      - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// 
// Возвращаемое значение:
//  - Неопределено
//  - ДокументСсылка.СообщениеЭДО
Функция СообщениеОтправителя(ЭлектронныйДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя)";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * СообщениеЭДО - ДокументСсылка.СообщениеЭДО
//  * ПрисоединенныйФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
Функция ПрисоединенныеФайлыЭлектронныхДокументов(ЭлектронныеДокументы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	СообщениеЭДО.Ссылка КАК СообщениеЭДО,
	|	ПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайл
	|ИЗ
	|	Документ.СообщениеЭДО КАК СообщениеЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ПО СообщениеЭДО.Ссылка = ПрисоединенныеФайлы.ВладелецФайла
	|ГДЕ
	|	СообщениеЭДО.ЭлектронныйДокумент В (&ЭлектронныеДокументы)";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Булево - Результат проверки текущего и архивного ОбъектУчета.
Функция ВнутреннийДокументАктуален(ОбъектУчета, ВидДокумента, ЭлектронныйДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.ОсновнойФайл КАК Файл
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя)";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДвоичныеДанныеАрхива = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.Файл);
	
	Возврат ВнутренниеДокументыЭДО.ВнутреннийДокументооборотАктуален(ОбъектУчета,
		ВидДокумента, ДвоичныеДанныеАрхива);
	
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  СвойстваДокумента - Структура:
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * НомерДокумента - Строка
//  * ДатаДокумента - Дата
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  См. ПредставлениеДокументаПоСвойствам
Функция ПредставлениеДокумента(ЭлектронныйДокумент, СвойстваДокумента = Неопределено) Экспорт
	
	Если СвойстваДокумента = Неопределено Тогда
		СвойстваДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
			"ВидДокумента, НомерДокумента, ДатаДокумента, ВидДокумента.ТипДокумента");
	КонецЕсли;
	
	Если СвойстваДокумента.Свойство("ВидДокументаТипДокумента") Тогда
		ТипДокумента = СвойстваДокумента.ВидДокументаТипДокумента;
	ИначеЕсли СвойстваДокумента.Свойство("ТипДокумента") Тогда
		ТипДокумента = СвойстваДокумента.ТипДокумента;
	Иначе
		ВызватьИсключение  НСтр("ru = 'Не определен тип документа'");
	КонецЕсли;
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.Прочее Тогда
		ОсновнойФайл = ОсновнойФайлИнформацииОтправителя(ЭлектронныйДокумент);
		СвойстваДокумента.ВидДокумента = Строка(ОсновнойФайл);
	КонецЕсли;
	
	СвойстваДокумента.Удалить("ВидДокументаТипДокумента");
	
	Возврат ПредставлениеДокументаПоСвойствам(СвойстваДокумента);
	
КонецФункции

// Возвращаемое значение:
//  См. ФорматыЭДО.НовыеПараметрыВизуализацииДокумента
Функция НовыеПараметрыВизуализацииДокумента() Экспорт

	Возврат ФорматыЭДО.НовыеПараметрыВизуализацииДокумента();
	
КонецФункции

// Сформировать данные документов для выгрузки.
// 
// Параметры:
//  ОписанияОбъектовУчета - ТаблицаЗначений из см. ИнтеграцияЭДО.НовоеОписаниеОбъектаУчета
// 
// Возвращаемое значение:
// Структура:
// *ДанныеДокументов - см. СинхронизацияЭДО.НовыеДанныеОбъектов
// *ТекстОшибки - Строка
Функция СформироватьДанныеДокументовДляВыгрузки(ОписанияОбъектовУчета) Экспорт
	
	ДанныеДокументов = СинхронизацияЭДО.НовыеДанныеОбъектов();
	
	ОписанияЗапросов = Новый Массив;
	ОписанияЗапросов.Добавить(ИнтеграцияЭДО.ЗапросСведенийПоОбъектамУчетаИУчастникамЭДО(
		ОписанияОбъектовУчета, "СведенияПоОбъектамУчета"));
	ОписанияЗапросов.Добавить(НастройкиЭДО.ЗапросНастрокиОтправкиЭлектронныхДокументовПоВидамПоОписаниюОбъектовУчета(
		ОписанияОбъектовУчета, "ФорматыПоНастройке"));
	ОписанияЗапросов.Добавить(ЗапросАктуальныхФорматов("АктуальныеФорматы"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияПоОбъектамУчета.ОбъектУчета КАК ОбъектУчета,
		|	СведенияПоОбъектамУчета.Направление КАК Направление,
		|	СведенияПоОбъектамУчета.ТипДокумента КАК ТипДокумента,
		|	СведенияПоОбъектамУчета.ПрикладнойТипДокумента КАК ПрикладнойТипДокумента,
		|	СведенияПоОбъектамУчета.Организация КАК Организация,
		|	СведенияПоОбъектамУчета.Контрагент КАК Контрагент,
		|	СведенияПоОбъектамУчета.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	СведенияПоОбъектамУчета.ОрганизацияИНН КАК ОрганизацияИНН,
		|	СведенияПоОбъектамУчета.ОрганизацияКПП КАК ОрганизацияКПП,
		|	СведенияПоОбъектамУчета.КонтрагентИНН КАК КонтрагентИНН,
		|	СведенияПоОбъектамУчета.КонтрагентКПП КАК КонтрагентКПП,
		|	ВидыДокументовЭДО.Ссылка КАК ВидДокумента,
		|	ВидыДокументовЭДО.Наименование КАК ВидДокументаНаименование,
		|	ВЫБОР
		|		КОГДА ФорматыПоНастройке.Формат ЕСТЬ NULL
		|			ТОГДА АктуальныеФорматы.Формат
		|		ИНАЧЕ ФорматыПоНастройке.Формат
		|	КОНЕЦ КАК Формат
		|ИЗ
		|	СведенияПоОбъектамУчета КАК СведенияПоОбъектамУчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО СведенияПоОбъектамУчета.ТипДокумента = ВидыДокументовЭДО.ТипДокумента
		|			И СведенияПоОбъектамУчета.ПрикладнойТипДокумента = ВидыДокументовЭДО.ПрикладнойТипДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеФорматы КАК АктуальныеФорматы
		|		ПО (ВидыДокументовЭДО.Ссылка = АктуальныеФорматы.ВидДокумента)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ФорматыПоНастройке КАК ФорматыПоНастройке
		|		ПО СведенияПоОбъектамУчета.ОбъектУчета = ФорматыПоНастройке.ОбъектУчета";
	
	Запрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, ОписанияЗапросов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыПредставления = НовыеСвойстваПредставленияДокумента();
	
	ТекстОшибки = "";
	
	Пока Выборка.Следующий() Цикл
		
		Настройки = ФорматыЭДО.НовыеНастройкиФормированияДокументаПоОбъектуУчета();
		Настройки.ТипДокумента = Выборка.ТипДокумента;
		Настройки.Формат = Выборка.Формат;
		Настройки.ОтключитьРассчетДополнительныхПолей = Истина;
		Настройки.Организация = Выборка.Организация;
		Настройки.Контрагент = Выборка.Контрагент;
		Настройки.Договор = Выборка.ДоговорКонтрагента;
		
		Данные = ФорматыЭДО.НовыеДанныеДляФормированияОсновногоТитула();
		Данные.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
		Данные.Участники.ИдентификаторОтправителя = Выборка.ОрганизацияИНН + ?(ПустаяСтрока(Выборка.ОрганизацияКПП),"",
			"_" + Выборка.ОрганизацияКПП);
		Данные.Участники.ИдентификаторПолучателя = Выборка.КонтрагентИНН + ?(ПустаяСтрока(Выборка.КонтрагентКПП),"",
			"_" + Выборка.КонтрагентКПП);
		
		ПараметрыФормирования = ИнтеграцияЭДО.НовыеПараметрыФормированияДанныхОбъектаУчета();
		ЗаполнитьЗначенияСвойств(ПараметрыФормирования, Настройки);
		ПараметрыФормирования.Отправитель = Настройки.Организация;
		ПараметрыФормирования.Получатель = Настройки.Контрагент;
		ОписаниеДанных = ИнтеграцияЭДО.ОписаниеДанныхОбъектаУчета(Выборка.ОбъектУчета,
			ПараметрыФормирования);
		Данные.ДанныеДокумента = ОписаниеДанных.Данные;
		
		РезультатФормирования = ФорматыЭДО.СформироватьДанныеОсновногоТитулаПоОбъектуУчета(
			Выборка.ОбъектУчета, Настройки, Данные);
		
		Если РезультатФормирования.ЕстьОшибки Тогда
			
			Для Каждого ОписаниеОшибки Из РезультатФормирования.Ошибки.ЗаполнениеДанных Цикл
				
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС;
				КонецЕсли;	
				ТекстОшибки = ТекстОшибки + ОписаниеОшибки.ТекстОшибки;
				
			КонецЦикла;
				
			Продолжить;	
		КонецЕсли;
		
		Содержание = РезультатФормирования.Содержание;
		
		НовыеДанные = СинхронизацияЭДО.ДобавитьДанныеОбъекта(ДанныеДокументов);
		НовыеДанные.Объект = Выборка.ОбъектУчета;
		НовыеДанные.СпособОбмена = Перечисления.СпособыОбменаЭД.БыстрыйОбмен;
		НовыеДанные.ИдентификаторДокументооборота = Строка(Новый УникальныйИдентификатор);
		НовыеДанные.ИдентификаторСообщения = Содержание.ИдентификаторДокумента;
		НовыеДанные.ТипРегламента = Содержание.ТипРегламента;
		НовыеДанные.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
		НовыеДанные.ТипДокумента = Выборка.ТипДокумента;
		НовыеДанные.ВидДокумента = Выборка.ВидДокумента;
		НовыеДанные.ИдентификаторОтправителя = Данные.Участники.ИдентификаторОтправителя;
		НовыеДанные.ИдентификаторПолучателя = Данные.Участники.ИдентификаторПолучателя;
		НовыеДанные.Организация = Выборка.Организация;
		НовыеДанные.Контрагент = Выборка.Контрагент;
		НовыеДанные.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
		
		ОписаниеДокумента = СинхронизацияЭДО.НовоеОписаниеДокумента();
		ОписаниеДокумента.Номер = Содержание.НомерДокумента;
		ОписаниеДокумента.Дата = Содержание.ДатаДокумента;
		ОписаниеДокумента.Сумма = Содержание.СуммаДокумента;
		НовыеДанные.ОписаниеДокумента = ОписаниеДокумента;
		
		НовыеДанные.ОписаниеДанных.ИмяФайла = РезультатФормирования.Документ.ИмяФайла;
		НовыеДанные.ОписаниеДанных.ДвоичныеДанные = РезультатФормирования.Документ.ДвоичныеДанные;
		
		ПараметрыПредставления.ВидДокумента = Выборка.ВидДокументаНаименование;
		ПараметрыПредставления.НомерДокумента = Содержание.НомерДокумента;
		ПараметрыПредставления.ДатаДокумента = Содержание.ДатаДокумента;
		НовыеДанные.Представление = ПредставлениеДокументаПоСвойствам(ПараметрыПредставления);
		
	КонецЦикла;
	
	РезультатФормирования = Новый Структура("ДанныеДокументов, ТекстОшибки", 
		ДанныеДокументов, ТекстОшибки);
	Возврат РезультатФормирования;
	
КонецФункции

// Параметры:
//  ДокументОбъект - ДанныеФормыСтруктура
//  СвязанныеОбъектыУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
Процедура ЗагрузитьИдентификаторыСвязанныхОбъектовУчета(ДокументОбъект, СвязанныеОбъектыУчета) Экспорт
	ЭлектронныеДокументыЭДОСлужебный.ЗагрузитьИдентификаторыСвязанныхОбъектовУчета(
		ДокументОбъект, СвязанныеОбъектыУчета);
КонецПроцедуры

// Параметры:
//  Документ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  Свойства - См. ОбщегоНазначения.ЗначенияРеквизитовОбъекта.Реквизиты
// 
// Возвращаемое значение:
//  См. ОбщегоНазначения.ЗначенияРеквизитовОбъекта
Функция СвойстваДокумента(Документ, Свойства) Экспорт
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, Свойства);
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - См. ОбменСКонтрагентами.ДанныеЭлектронногоДокумента.ЭлектронныйДокумент
// 
// Возвращаемое значение:
//  См. ЭлектронныеДокументыЭДОСлужебный.ДанныеЭлектронногоДокумента
Функция ДанныеЭлектронногоДокумента(ЭлектронныйДокумент) Экспорт
	
	Если НастройкиЭДО.ИспользоватьИнтеграциюОблачногоЭДО() Тогда
		ОбщийМодульЭлектронныеДокументыЭДОИнтеграцияОблака = ОбщегоНазначения.ОбщийМодуль(
			"ЭлектронныеДокументыЭДОИнтеграцияОблака");
		ОбщийМодульЭлектронныеДокументыЭДОИнтеграцияОблака.ОбновитьПолныеДанныеДокументовЭДО(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлектронныйДокумент));
	КонецЕсли;

	Результат = ЭлектронныеДокументыЭДОСлужебный.ДанныеЭлектронногоДокумента(ЭлектронныйДокумент);
	
	Возврат Результат;
	
КонецФункции

// Формирует данные файла информации отправителя для предоставления в ФНС.
// 
// Параметры:
// 	ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на входящий электронный документ.
// 	                    - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на исходящий электронный документ.  
// Возвращаемое значение:
// 	Структура - данные файла:
// * ИмяФайла - Строка
// * ДвоичныеДанные - ДвоичныеДанные 
// * Размер - Число
// * КНД - Строка - номер по классификатору налоговых документов.
// * УстановленныеПодписи - см. ЭлектроннаяПодпись.УстановленныеПодписи 
Функция ДанныеФайлаИнформацииОтправителяДляВыгрузкиФНС(ЭлектронныйДокумент) Экспорт

	Возврат ДанныеФайлаДляВыгрузкиФНС(ЭлектронныйДокумент,
		Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);

КонецФункции

// Формирует данные файла информации получателя для предоставления в ФНС.
// 
// Параметры:
// 	ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на входящий электронный документ.
// 	                    - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на исходящий электронный документ.  
// Возвращаемое значение:
// 	Структура - данные файла:
// * ИмяФайла - Строка
// * ДвоичныеДанные - ДвоичныеДанные 
// * Размер - Число
// * КНД - Строка - номер по классификатору налоговых документов.
// * УстановленныеПодписи - см. ЭлектроннаяПодпись.УстановленныеПодписи
Функция ДанныеФайлаИнформацииПолучателяДляВыгрузкиФНС(ЭлектронныйДокумент) Экспорт

	Возврат ДанныеФайлаДляВыгрузкиФНС(ЭлектронныйДокумент, 
		Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);

КонецФункции

// Формирует данные файлов для предоставления в ФНС.
// 
// Параметры:
// 	ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО.
// 
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение:
//   * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО.
//   * Значение - Структура - данные файла:
//    ** ИмяФайла - Строка
//    ** ДвоичныеДанные - ДвоичныеДанные 
//    ** Размер - Число
//    ** КНД - Строка - номер по классификатору налоговых документов.
//    ** УстановленныеПодписи - см. ЭлектроннаяПодпись.УстановленныеПодписи
//
Функция ДанныеФайловДляВыгрузкиФНС(ЭлектронныеДокументы) Экспорт
	
	Отбор = НовыйОтборСообщенийДокументов();
	Отбор.ТипыЭлементовРегламента.Добавить(
		Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	Отбор.ТипыЭлементовРегламента.Добавить(
		Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);
	Отбор.ТипыЭлементовРегламента.Добавить(
		Перечисления.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки);
		
	СообщенияДокумента = СообщенияДокументовПоОтбору(ЭлектронныеДокументы, Отбор);
	ФайлыСообщений = СообщенияДокумента.ВыгрузитьКолонку("ОсновнойФайл"); 
	ДвоичныеДанныеФайлов = РаботаСФайлами.ДвоичныеДанныеФайлов(ФайлыСообщений);
	
	Отбор = Новый Структура("ЭлектронныйДокумент");
	Результат = Новый Соответствие;
	
	Для Каждого ТекущийДокумент Из ЭлектронныеДокументы Цикл
		
		ДанныеФайлов = Новый Массив;
		Отбор.ЭлектронныйДокумент = ТекущийДокумент;
		СообщенияТекущегоДокумента = СообщенияДокумента.НайтиСтроки(Отбор);
		
		Для Каждого ТекущееСообщение Из СообщенияТекущегоДокумента Цикл
			
			Если ТекущееСообщение.Статус = Перечисления.СтатусыСообщенийЭДО.НеСформирован Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеФайла = Новый Структура("ИмяФайла, ДвоичныеДанные, Размер, КНД, УстановленныеПодписи, ТипЭлементаРегламента");
			ДанныеФайла.ДвоичныеДанные = ДвоичныеДанныеФайлов.Получить(ТекущееСообщение.ОсновнойФайл);
			Если ЗначениеЗаполнено(ДанныеФайла.ДвоичныеДанные) Тогда
				ДанныеФайла.Размер = ДанныеФайла.ДвоичныеДанные.Размер();
			КонецЕсли;
			ДанныеФайла.ИмяФайла = ТекущееСообщение.ПолноеИмяФайла;
			ДанныеФайла.УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ТекущееСообщение.ОсновнойФайл);
			ДанныеФайла.ТипЭлементаРегламента = ТекущееСообщение.ТипЭлементаРегламента;
			
			СвойстваДокумента = ФорматыЭДО.НовыйПараметрыПолученияКНД();
			СвойстваДокумента.ТипДокумента = ТекущееСообщение.ТипДокумента;
			СвойстваДокумента.ТипРегламента = ТекущееСообщение.ТипРегламента;
			СвойстваДокумента.ИмяФайла = ДанныеФайла.ИмяФайла;
			СвойстваДокумента.Подтверждение =
				(ТекущееСообщение.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);
			
			ДанныеФайла.КНД = ФорматыЭДО.КНДПоСвойствамДокумента(СвойстваДокумента);
			
			ДанныеФайлов.Добавить(ДанныеФайла);
			
		КонецЦикла;
		
		Результат.Вставить(ТекущийДокумент, ДанныеФайлов);
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Возвращает текст запроса для выгрузки электронных документов для предоставления в ФНС.
//
// Возвращаемое значение:
// 	Строка - Текст запроса.
//
Функция ТекстЗапросаДляВыгрузкиЭДДляФНС() Экспорт
	
	Возврат
	"ВЫБРАТЬ
	|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ЭлектронныйДокумент,
	|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(ЭлектронныйДокументВходящийЭДО.Организация) КАК ОрганизацияПредставление,
	|	ЭлектронныйДокументВходящийЭДО.Контрагент КАК Контрагент,
	|	ЭлектронныйДокументВходящийЭДО.НомерДокумента КАК НомерДокумента,
	|	ЭлектронныйДокументВходящийЭДО.ДатаДокумента КАК ДатаДокумента,
	|	ЭлектронныйДокументВходящийЭДО.ТипРегламента КАК ТипРегламента,
	|	ЭлектронныйДокументВходящийЭДО.ВидДокумента.ТипДокумента КАК ТипДокумента,
	|	ЭлектронныйДокументВходящийЭДО.ВидДокумента.ТипДокумента НЕ В (&ТипыДокументовЭДОВыгрузкиДляФНС) КАК
	|		ТипДокументаНеПодходитДляВыгрузки,
	|	СообщениеЭДО.Направление КАК НаправлениеЭДО,
	|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
	|	СообщениеЭДО.ВидСообщения.ТипДокумента КАК ТипДокументаЭДО
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
	|		ПО ЭлектронныйДокументВходящийЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
	|		И СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя)
	|ГДЕ
	|	ЭлектронныйДокументВходящийЭДО.Ссылка В (&ЭлектронныеДокументы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящийЭДО.Ссылка,
	|	ЭлектронныйДокументИсходящийЭДО.Организация,
	|	ПРЕДСТАВЛЕНИЕ(ЭлектронныйДокументИсходящийЭДО.Организация) КАК ОрганизацияПредставление,
	|	ЭлектронныйДокументИсходящийЭДО.Контрагент,
	|	ЭлектронныйДокументИсходящийЭДО.НомерДокумента,
	|	ЭлектронныйДокументИсходящийЭДО.ДатаДокумента,
	|	ЭлектронныйДокументИсходящийЭДО.ТипРегламента,
	|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента.ТипДокумента,
	|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента.ТипДокумента НЕ В (&ТипыДокументовЭДОВыгрузкиДляФНС),
	|	СообщениеЭДО.Направление,
	|	СообщениеЭДО.ТипЭлементаРегламента,
	|	СообщениеЭДО.ВидСообщения.ТипДокумента
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
	|		ПО ЭлектронныйДокументИсходящийЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
	|		И СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя)
	|ГДЕ
	|	ЭлектронныйДокументИсходящийЭДО.Ссылка В (&ЭлектронныеДокументы)
	|ИТОГИ
	|ПО
	|	Организация";
	
КонецФункции

// Модифицирует структуру ДанныеФайла,
// заменяя СсылкаНаДвоичныеДанныеФайла 
// или добавляя СсылкаНаДвоичныеДанныеВизуализации.
// 
// Параметры:
// 	ДанныеФайла - см. РаботаСФайлами.ДанныеФайла
// 	УникальныйИдентификатор - УникальныйИдентификатор
Процедура ПодменитьФайлНаФайлСВизуализацией(ДанныеФайла, УникальныйИдентификатор) Экспорт
	
	Если ДанныеФайла.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ПроштампованныйФайл = ВизуализацияЭДОСлужебный.ПроштампованныйФайл(ДанныеФайла.Владелец);
	Если Не ПроштампованныйФайл.Успех Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ПроштампованныйФайл.ПредставлениеДокумента) = Тип("Строка") Тогда
		ДанныеФайла.Расширение = "html";
		ПроштампованныйФайл.ПредставлениеДокумента = ПолучитьДвоичныеДанныеИзСтроки(
			ПроштампованныйФайл.ПредставлениеДокумента, КодировкаТекста.UTF8);
	ИначеЕсли ТипЗнч(ПроштампованныйФайл.ПредставлениеДокумента) = Тип("ДвоичныеДанные") Тогда
		ДанныеФайла.Расширение = "pdf";
	Иначе
		Возврат;
	КонецЕсли;
	СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДанныеФайла.ИмяФайла);
	ДанныеФайла.ИмяФайла = СтрШаблон("%1.%2", СтруктураИмениФайла.ИмяБезРасширения, ДанныеФайла.Расширение);
	АдресСоШтампом = ПоместитьВоВременноеХранилище(ПроштампованныйФайл.ПредставлениеДокумента, УникальныйИдентификатор);
	ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = АдресСоШтампом;
	ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге = "";
	
КонецПроцедуры

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * ДатаДокумента - Дата
//  * НомерДокумента - Строка
//  * Контрагент - ОпределяемыйТип.КонтрагентБЭД
//  * Организация - ОпределяемыйТип.Организация
//  * Ответственный - ОпределяемыйТип.Пользователь
//  * СуммаДокумента - Число
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * НаправлениеКратко - Строка
Функция ДанныеДокументовДляРеестраЭлектронныхДокументов(Знач ЭлектронныеДокументы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК Ссылка,
	|	ЭлектронныйДокументВходящийЭДО.ДатаДокумента КАК ДатаДокумента,
	|	ЭлектронныйДокументВходящийЭДО.НомерДокумента КАК НомерДокумента,
	|	ЭлектронныйДокументВходящийЭДО.Контрагент,
	|	ЭлектронныйДокументВходящийЭДО.Организация,
	|	ЭлектронныйДокументВходящийЭДО.Ответственный,
	|	ЭлектронныйДокументВходящийЭДО.СуммаДокумента,
	|	ЭлектронныйДокументВходящийЭДО.ВидДокумента,
	|	ЭлектронныйДокументВходящийЭДО.ВидДокумента.ТипДокумента КАК ТипДокумента,
	|	""Вх."" КАК НаправлениеКратко
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
	|ГДЕ
	|	ЭлектронныйДокументВходящийЭДО.Ссылка В (&ЭлектронныеДокументы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящийЭДО.Ссылка,
	|	ЭлектронныйДокументИсходящийЭДО.ДатаДокумента,
	|	ЭлектронныйДокументИсходящийЭДО.НомерДокумента,
	|	ЭлектронныйДокументИсходящийЭДО.Контрагент,
	|	ЭлектронныйДокументИсходящийЭДО.Организация,
	|	ЭлектронныйДокументИсходящийЭДО.Ответственный,
	|	ЭлектронныйДокументИсходящийЭДО.СуммаДокумента,
	|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента,
	|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента.ТипДокумента,
	|	""Исх.""
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
	|ГДЕ
	|	ЭлектронныйДокументИсходящийЭДО.Ссылка В (&ЭлектронныеДокументы)
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	НомерДокумента,
	|	Ссылка";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Колонки.Добавить("ПредставлениеДокумента", Новый ОписаниеТипов("Строка"));
	
	Для каждого СтрокаДанных Из Результат Цикл
		СвойстваДокумента = Новый Структура("НомерДокумента,ДатаДокумента,ВидДокумента,ТипДокумента");
		ЗаполнитьЗначенияСвойств(СвойстваДокумента, СтрокаДанных);
		СтрокаДанных.ПредставлениеДокумента = ПредставлениеДокумента(СтрокаДанных.Ссылка, СвойстваДокумента);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Дата - Дата
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.УчастникЭДО
//  * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ИдентификаторОрганизации - Строка
//  * ЭтоОблачныйЭДО - Булево
Функция СвойстваДокументовДляОписанияПакетов(ЭлектронныеДокументы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК Ссылка,
		|	ЭлектронныйДокументВходящийЭДО.Дата КАК Дата,
		|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация,
		|	ЭлектронныйДокументВходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументВходящийЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ЭлектронныйДокументВходящийЭДО.ЭтоОблачныйЭДО КАК ЭтоОблачныйЭДО
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка В (&ЭлектронныеДокументы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка КАК Ссылка,
		|	ЭлектронныйДокументИсходящийЭДО.Дата КАК Дата,
		|	ЭлектронныйДокументИсходящийЭДО.Организация КАК Организация,
		|	ЭлектронныйДокументИсходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументИсходящийЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.ЭтоОблачныйЭДО КАК ЭтоОблачныйЭДО
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка В (&ЭлектронныеДокументы)";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоДокументОблачногоЭДО(ЭлектронныйДокумент) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ЭтоОблачныйЭДО");
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Число 
Функция РазмерПрисоединенныхФайловДокументов(ЭлектронныеДокументы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОбщийРазмерПрисоединенныхФайловДокументов();
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныеДокументы);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Размер, 0);
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Состояния - Массив из ПеречислениеСсылка.СостоянияСообщенийЭДО
//  * ТипыЭлементовРегламента - Массив из ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//
Функция НовыйОтборСообщенийДокументов() Экспорт
	Отбор = Новый Структура;
	Отбор.Вставить("Состояния", Новый Массив);
	Отбор.Вставить("ТипыЭлементовРегламента", Новый Массив);
	Возврат Отбор;
КонецФункции

// Параметры:
//  ОписаниеФайла - См. РаботаСФайламиБЭД.НовоеОписаниеФайла 
//  СодержаниеФайла - Неопределено
//                  - См. ЭлектронныеДокументыЭДО.СодержаниеСообщения
//  ПринудительнаяЗагрузка - Булево
// 
// Возвращаемое значение:
//  См. НовыйРезультатПолученияДанныхДокументаДляЗагрузкиПоДаннымФайлаXML
Функция ДанныеДокументаДляЗагрузкиПоДаннымФайлаXML(ОписаниеФайла, СодержаниеФайла = Неопределено,
	ПринудительнаяЗагрузка = Ложь) Экспорт

	Результат = НовыйРезультатПолученияДанныхДокументаДляЗагрузкиПоДаннымФайлаXML();
	
	Если Не ЗначениеЗаполнено(СодержаниеФайла) Тогда
		СодержаниеФайла = СодержаниеСообщения(ОписаниеФайла);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СодержаниеФайла) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТипДокумента = СодержаниеФайла.ТипДокумента;
	
	Если Не ТипДокументаПоддерживаетЗагрузкуИзФайлаВФормализованномВиде(ТипДокумента) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстОшибки = ИнтерфейсДокументовЭДОКлиентСервер.ТекстСообщенияОбОтсутствииВозможностиЗагрузитьФайлXML();
	
	ДанныеРеквизитовИзФайла = ФорматыЭДО.ИдентификаторыДатаНомерДокументаПоДаннымФайла(ОписаниеФайла);
	Если Не ЗначениеЗаполнено(ДанныеРеквизитовИзФайла) Тогда
		Результат.Ошибка = ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ВидДокумента = ВидДокументаПоТипу(ТипДокумента);

	НастройкиОбмена = НастройкиОтправкиЭДО.НастройкиОбменаПоИдентификаторам(ВидДокумента,
		ДанныеРеквизитовИзФайла.ИдентификаторОрганизации, ДанныеРеквизитовИзФайла.ИдентификаторКонтрагента);
	Если НастройкиОбмена = Неопределено И Не ПринудительнаяЗагрузка Тогда
		Возврат Результат;
	ИначеЕсли ПринудительнаяЗагрузка Тогда
		Результат.Успех = Истина;
		Результат.СодержаниеФайла = СодержаниеФайла;
		Возврат Результат;
	КонецЕсли;
	
	КлючНастроекОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	КлючНастроекОтправки.Отправитель = НастройкиОбмена.Организация;
	КлючНастроекОтправки.Получатель = НастройкиОбмена.Контрагент;
	КлючНастроекОтправки.Договор = НастройкиОбмена.ДоговорКонтрагента;
	КлючНастроекОтправки.ВидДокумента = НастройкиОбмена.ВидДокумента;
	
	НастройкиОтправки = НастройкиЭДО.НастройкиОтправки(КлючНастроекОтправки);
	Если НастройкиОтправки = Неопределено Тогда
		Результат.Ошибка = ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Успех = Истина;
	Результат.СодержаниеФайла = СодержаниеФайла;
	Результат.НастройкиОтправки = НастройкиОтправки;
	
	Возврат Результат;

КонецФункции

// Заменяет двоичные данные и имя основного файла электронного документа
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ОписаниеФайла - См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
Процедура ЗаменитьДанныеОсновногоФайлаДокумента(ЭлектронныйДокумент, ОписаниеФайла) Экспорт

	ОсновнойФайлДокумента = ОсновнойФайлИнформацииОтправителя(ЭлектронныйДокумент);
	
	СтруктураИмениВыбранногоФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОписаниеФайла.ИмяФайла);
	
	ДанныеВыбранногоФайла = Новый Структура("АдресФайлаВоВременномХранилище, ИмяБезРасширения", 
		ПоместитьВоВременноеХранилище(ОписаниеФайла.ДвоичныеДанные), СтруктураИмениВыбранногоФайла.ИмяБезРасширения);
		
	РаботаСФайлами.ОбновитьФайл(ОсновнойФайлДокумента, ДанныеВыбранногоФайла);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.СообщениеЭДОПрисоединенныеФайлы");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ОсновнойФайлДокумента);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();

		ФайлОбъект = ОсновнойФайлДокумента.ПолучитьОбъект();
		ФайлОбъект.ПолноеИмяФайла = СтруктураИмениВыбранногоФайла.Имя;
		ФайлОбъект.Записать();

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ЭлектронныеДокументыЭДОСобытия.ПриИзмененииДанныхОсновногоФайлаДокумента(ЭлектронныйДокумент);
	
	ПараметрыЗаписиВЖурналРегистрации = ОбщегоНазначенияБЭД.НовыеПараметрыЗаписиВЖурналРегистрации(); 
	ПараметрыЗаписиВЖурналРегистрации.Данные = ОсновнойФайлДокумента;
	ТекстПредупреждения = СтрШаблон(
		НСтр("ru = 'В исходящем документе %1 был загружен сторонний файл. Имя файла %2'"),
		ЭлектронныйДокумент, СтруктураИмениВыбранногоФайла.Имя);
		
	ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстПредупреждения,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().РаботаСФайлами,
		УровеньЖурналаРегистрации.Предупреждение,
		ПараметрыЗаписиВЖурналРегистрации);
		
КонецПроцедуры

// Параметры:
//  ОписаниеФайла - См. РаботаСФайламиБЭД.НовоеОписаниеФайла
//  ОрганизацияДокумента - ОпределяемыйТип.Организация
// 
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * Уведомление - Строка
Функция УдалитьИзФайлаЭлектронногоДокументаСведенияОПодписанте(ОписаниеФайла, ОрганизацияДокумента) Экспорт
	
	Результат = Новый Структура("Успех, Уведомление", Истина, "");
	
	Если ФорматыЭДО.ФайлСформированВ1С(ОписаниеФайла) = Истина Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеУведомления = "";
		
	Подписант = ФорматыЭДО.СведенияОПодписанте(ОписаниеФайла, ОписаниеУведомления);
	Если Не ФорматыЭДО.ПодписантЗаполнен(Подписант, ОрганизацияДокумента, ОписаниеУведомления)
		Или Не ФорматыЭДО.ВУчетнойЗаписиЕстьСертификатПодписанта(Подписант, ОписаниеУведомления) Тогда
		ФорматыЭДО.СброситьСведенияОПодписанте(ОписаниеФайла);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОписаниеУведомления) Тогда
		Результат.Успех = Ложь;
		Результат.Уведомление = ОписаниеУведомления;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает имена файлов титулов отправителей по электронным документам.
// 
// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Значение - Строка
Функция ИменаФайловОтправителейДокументов(ЭлектронныеДокументы) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаИменФайловОтправителейДокументов());
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ИменаФайловДокументов = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ИменаФайловДокументов.Вставить(Выборка.ЭлектронныйДокумент, Выборка.ПолноеИмяФайла);
	КонецЦикла;
	
	Возврат ИменаФайловДокументов;
	
КонецФункции

// Возвращает состояние подписания (текущий  маршрут подписания) по свойствам электронного документа.
// 
// Параметры:
//  СвойстваДокумента - Структура:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//  * СписокПодписантов - ТаблицаЗначений:
//    ** Подписант - ОпределяемыйТип.Пользователь
//    ** Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  ИзмененМаршрутПодписания - Булево
// 
// Возвращаемое значение:
//  См. МаршрутыПодписанияБЭД.ТаблицаМаршрутаПоСсылке
Функция СостояниеПодписанияИнформацииОтправителя(СвойстваДокумента, ИзмененМаршрутПодписания = Ложь) Экспорт
	
	ЭтоНовыйДокумент = Не ЗначениеЗаполнено(СвойстваДокумента.Ссылка);
	
	Если ЭтоНовыйДокумент Или ИзмененМаршрутПодписания Тогда
		ТребованиеКПодписанию = Неопределено;
		Если ЗначениеЗаполнено(СвойстваДокумента.СписокПодписантов) Тогда
			ТребованиеКПодписанию = Перечисления.ТребованияКПодписаниюЭД.И;
		КонецЕсли;
		СостояниеПодписания = МаршрутыПодписанияБЭД.ТаблицаМаршрутаПоПараметрам(СвойстваДокумента.Ссылка,
			СвойстваДокумента.МаршрутПодписания, ТребованиеКПодписанию, СвойстваДокумента.СписокПодписантов);
	Иначе
		ИсточникМаршрута = СообщениеОтправителя(СвойстваДокумента.Ссылка);
		СостояниеПодписания = МаршрутыПодписанияБЭД.ТаблицаМаршрутаПоСсылке(ИсточникМаршрута);
	КонецЕсли;
	
	Возврат СостояниеПодписания;
	
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьНеформализованныеДокументы(ЭлектронныеДокументы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка В (&ЭлектронныеДокументы)
		|	И ЭлектронныйДокументВходящийЭДО.ТипРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентовЭДО.Неформализованный)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка В (&ЭлектронныеДокументы)
		|	И ЭлектронныйДокументИсходящийЭДО.ТипРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентовЭДО.Неформализованный)";
	
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Параметры:
//  ДанныеДокумента - См. ВизуализацияЭДОСлужебный.НовыеДанныеДокументаДляПроверкиРаспознавания
//
// Возвращаемое значение:
//  см. ВизуализацияЭДОСлужебный.ДокументРаспознан
Функция ДокументРаспознан(ДанныеДокумента) Экспорт
	
	Возврат ВизуализацияЭДОСлужебный.ДокументРаспознан(ДанныеДокумента);
	
КонецФункции

// Возвращаемое значение:
// см. ВизуализацияЭДОСлужебный.НовыеДанныеДокументаДляПроверкиРаспознавания
Функция НовыеДанныеДокументаДляПроверкиРаспознавания() Экспорт
	
	Возврат ВизуализацияЭДОСлужебный.НовыеДанныеДокументаДляПроверкиРаспознавания();
	
КонецФункции

// Возвращаемое значение:
// см. ВизуализацияЭДОСлужебный.НовыеДанныеЗаписанногоДокументаДляПроверкиРаспознавания
Функция НовыеДанныеЗаписанногоДокументаДляПроверкиРаспознавания() Экспорт

	Возврат ВизуализацияЭДОСлужебный.НовыеДанныеЗаписанногоДокументаДляПроверкиРаспознавания();
	
КонецФункции

// Возвращает идентификаторы участников ЭДО по входящему электронному документу.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// 
// Возвращаемое значение:
//  Структура:
//  * ИдентификаторОтправителя - Строка
//  * ИдентификаторПолучателя - Строка
//
Функция ИдентификаторыУчастниковЭДО(ЭлектронныйДокумент) Экспорт
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЭлектронныйДокумент, "ИдентификаторОрганизации, ИдентификаторКонтрагента");
	
	Результат = Новый Структура("ИдентификаторОтправителя, ИдентификаторПолучателя", 
		ЗначенияРеквизитов.ИдентификаторОрганизации, ЗначенияРеквизитов.ИдентификаторКонтрагента);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ПараметрыПредварительнойВизуализации 
//  - См. ВизуализацияЭДОСлужебный.НовыеПараметрыПредварительнойВизуализацииДокумента
// 
// Возвращаемое значение:
//  см. ВизуализацияЭДОСлужебный.ПредварительнаяВизуализацияДокумента
Функция ПредварительнаяВизуализацияДокумента(ПараметрыПредварительнойВизуализации) Экспорт

	Возврат ВизуализацияЭДОСлужебный.ПредварительнаяВизуализацияДокумента(ПараметрыПредварительнойВизуализации);

КонецФункции

// Возвращаемое значение:
//  см. ВизуализацияЭДОСлужебный.НовыеПараметрыПредварительнойВизуализацииДокумента
Функция НовыеПараметрыПредварительнойВизуализацииДокумента() Экспорт
	
	Возврат ВизуализацияЭДОСлужебный.НовыеПараметрыПредварительнойВизуализацииДокумента();

КонецФункции

// Возвращаемое значение:
//  см. ВизуализацияЭДОСлужебный.НовыеСвойстваДокументаДляФормированияВизуализации
Функция НовыеСвойстваДокументаДляФормированияВизуализации() Экспорт
	Возврат ВизуализацияЭДОСлужебный.НовыеСвойстваДокументаДляФормированияВизуализации();
КонецФункции

// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ИД - Строка
//  * Штрихкод - Строка
//  * Наименование - Строка
//  * НаименованиеХарактеристики - Строка 
//  * КодТовара - Строка
//  * Артикул - Строка
//  * БазоваяЕдиницаКод - Строка
//  * БазоваяЕдиницаНаименование - Строка
//  * БазоваяЕдиницаНаименованиеПолное - Строка
//  * БазоваяЕдиницаМеждународноеСокращение - Строка
//  * БазоваяЕдиницаНаименованиеКраткое - Строка
//  * СтавкаНДС - Строка
//  * Описание - Строка
//  * Сопоставление - см. НовыеДанныеДляСопоставленияТоваров
//  * ИсторияИдентификаторов - Неопределено
//                           - Массив из см. СопоставлениеНоменклатурыКонтрагентов.ИдентификаторТовараПоДаннымНоменклатуры
//  * ТипНоменклатурыФНС - Неопределено,ПеречислениеСсылка.ТипыНоменклатурыФНС
//  * КодПоКТРУ - Строка
//  * КодТНВЭД - Строка
//  * СтранаПроисхожденияКод - Строка
//  * ПрослеживаемыйТовар - Булево
//  * МаркируемыйТовар - Булево
Функция НовыеДанныеНоменклатурыДокумента() Экспорт
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("ИД", ОбщегоНазначения.ОписаниеТипаСтрока(300));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод", ОбщегоНазначения.ОписаниеТипаСтрока(300));
	ТаблицаТоваров.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаТоваров.Колонки.Добавить("КодТовара", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("Артикул", ОбщегоНазначения.ОписаниеТипаСтрока(300));
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеКраткое", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("Описание", ОбщегоНазначения.ОписаниеТипаСтрока(3000));
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	ТаблицаТоваров.Колонки.Добавить("ИсторияИдентификаторов", Новый ОписаниеТипов("Массив"));
	ТаблицаТоваров.Колонки.Добавить("ТипНоменклатурыФНС");
	ТаблицаТоваров.Колонки.Добавить("КодПоКТРУ", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("КодТНВЭД", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ТаблицаТоваров.Колонки.Добавить("СтранаПроисхожденияКод", ОбщегоНазначения.ОписаниеТипаСтрока(3));
	ТаблицаТоваров.Колонки.Добавить("ПрослеживаемыйТовар", Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("МаркируемыйТовар", Новый ОписаниеТипов("Булево"));
	Возврат ТаблицаТоваров;
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * Значение - См. НовыеДанныеНоменклатурыДокумента
Функция ДанныеНоменклатурыДокументов(ЭлектронныеДокументы, КонтекстДиагностики) Экспорт
	
	ДанныеНоменклатурыДокументов = ЭлектронныеДокументыЭДОСлужебный.ДанныеНоменклатурыДокументов(
		ЭлектронныеДокументы, КонтекстДиагностики);
	
	Если Не ЕстьИнтеграцияОблачногоЭДО() Тогда
		Возврат ДанныеНоменклатурыДокументов;
	КонецЕсли;
	
	ОбщийМодульЭлектронныеДокументыЭДОИнтеграцияОблака = ОбщегоНазначения.ОбщийМодуль(
		"ЭлектронныеДокументыЭДОИнтеграцияОблака");
	ДанныеНоменклатурыДокументовИнтеграцияОблака =
		ОбщийМодульЭлектронныеДокументыЭДОИнтеграцияОблака.ДанныеНоменклатурыДокументов(
			ЭлектронныеДокументы, КонтекстДиагностики);
	
	Если Не ЗначениеЗаполнено(ДанныеНоменклатурыДокументов) Тогда
		Возврат ДанныеНоменклатурыДокументовИнтеграцияОблака;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		ДанныеНоменклатурыДокументов, ДанныеНоменклатурыДокументовИнтеграцияОблака);
	
	Возврат ДанныеНоменклатурыДокументов;
	
КонецФункции

#КонецОбласти

#Область ПодписиДокумента

// Возвращает структуру результата проверки подписи.
//
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * ПодписиДляПроверки - Массив из См. НовыеПараметрыПроверкиПодписи
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  * ПроверенныеПодписи - Соответствие Из КлючИЗначение:
//  ** Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ** Значение - См. ЭлектроннаяПодпись.УстановленныеПодписи
//
Функция НовыйРезультатПроверкиПодписей() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("ПодписиДляПроверки", Новый Массив);
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	Результат.Вставить("ПроверенныеПодписи", Новый Соответствие);
	Возврат Результат;
	
КонецФункции

// Возвращает установленные подписи по электронному документу.
// 
// Параметры:
// 	Сообщение - ДокументСсылка.СообщениеЭДО - Ссылка на сообщение ЭДО.
// 	ВидПодписи - ПеречислениеСсылка.ВидыЭлектронныхПодписей - вид электронной подписи.
// Возвращаемое значение:
// 	Массив из См. ЭлектронныеДокументыЭДОСлужебный.НовыеДанныеПодписи.
Функция УстановленныеПодписи(Сообщение, ВидПодписи = Неопределено) Экспорт
	
	ПрисоединенныйФайл = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ОсновнойФайл");
	
	Если Не ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Подписи = ЭлектронныеДокументыЭДОСлужебный.УстановленныеПодписиФайла(ПрисоединенныйФайл, ВидПодписи);
	
	Возврат Подписи;
	
КонецФункции

// Возвращает результат проверки подписей электронного документа.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//                      - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  См. НовыйРезультатПроверкиПодписей
//
Функция ПроверитьПодписиДокумента(ЭлектронныйДокумент, КонтекстДиагностики) Экспорт
	
	Если ЭтоДокументОблачногоЭДО(ЭлектронныйДокумент) Тогда
		Возврат ЭлектронныеДокументыЭДОИнтеграцияОблака.ПроверитьПодписиДокумента(
			ЭлектронныйДокумент, КонтекстДиагностики);
	КонецЕсли;
	
	Результат = НовыйРезультатПроверкиПодписей();
	
	ПрисоединенныеФайлыСообщений = ФайлыДляПроверкиПодписейДокумента(ЭлектронныйДокумент);
	
	Результат = ПроверитьПодписиФайлов(ПрисоединенныеФайлыСообщений, КонтекстДиагностики);
	ЭлектронныеДокументыЭДОСобытия.ПослеПроверкиПодписиЭлектронногоДокумента(ЭлектронныйДокумент, КонтекстДиагностики);
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//                      - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
Функция ФайлыДляПроверкиПодписейДокумента(ЭлектронныйДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.ОсновнойФайл КАК ПрисоединенныйФайл
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И СообщениеЭДО.ТипЭлементаРегламента В (&ТипыЭлементовРегламента)";
		
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	ТипыЭлементовРегламента = Новый Массив;
	ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);
	Запрос.УстановитьПараметр("ТипыЭлементовРегламента", ТипыЭлементовРегламента);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПрисоединенныйФайл");
	
КонецФункции

// Возвращает результат проверки подписей сообщения ЭДО.
// 
// Параметры:
//  СообщениеЭДО        - ДокументСсылка.СообщениеЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  См. НовыйРезультатПроверкиПодписей
//
Функция ПроверитьПодписиСообщения(СообщениеЭДО, КонтекстДиагностики) Экспорт
	
	Результат = НовыйРезультатПроверкиПодписей();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.ОсновнойФайл КАК ПрисоединенныйФайл
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.Ссылка = &СообщениеЭДО";
		
	Запрос.УстановитьПараметр("СообщениеЭДО", СообщениеЭДО);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПрисоединенныеФайлыСообщений = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ПрисоединенныйФайл");
	Результат = ПроверитьПодписиФайлов(ПрисоединенныеФайлыСообщений, КонтекстДиагностики);
	ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеЭДО, "ЭлектронныйДокумент");
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		ЭлектронныеДокументыЭДОСобытия.ПослеПроверкиПодписиЭлектронногоДокумента(ЭлектронныйДокумент, 
			КонтекстДиагностики);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Возвращает признак успешной записи результата проверки подписей электронного документа.
// 
// Параметры:
//  ПроверенныеПодписи - Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//
// Возвращаемое значение:
//  Булево - признак успешной записи
Функция ЗаписатьРезультатПроверкиПодписейДокумента(ПроверенныеПодписи) Экспорт
	
	Если Не ЗначениеЗаполнено(ПроверенныеПодписи) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого РезультатПроверкиФайла Из ПроверенныеПодписи Цикл
		
		УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(РезультатПроверкиФайла.Ключ);
		
		Для Каждого СохраненныеСвойстваПодписи Из УстановленныеПодписи Цикл
			СвойстваПодписиПослеПроверки = ПолучитьРезультатПроверкиПодписи(РезультатПроверкиФайла.Значение,
				СохраненныеСвойстваПодписи.Подпись);
			Если СвойстваПодписиПослеПроверки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОбработатьРезультатПроверкиПодписиФайла(РезультатПроверкиФайла.Ключ, СохраненныеСвойстваПодписи,
				СвойстваПодписиПослеПроверки, УстановленныеПодписи.Количество());
		КонецЦикла;
		
	КонецЦикла;
	
	ВизуализацияЭДОСлужебный.ЗапуститьКэшированиеВФоне();
	
	Возврат Истина;
	
КонецФункции

// Возвращает подписи с учетом доверенностей по электронному документу.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  					- ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//
// Возвращаемое значение:
//  Массив из см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеДанныеПодписиСУчетомДоверенности
//
Функция ПодписиПоДокументуСУчетомДоверенностей(ЭлектронныйДокумент) Экспорт
	
	ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлектронныйДокумент);
	
	Отбор = НовыйОтборСообщенийДокументов();
	Отбор.ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ПОА);
	Отбор.ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.УОУ);
	Отбор.ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	Отбор.ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);
		
	СообщенияЭДО = СообщенияДокументовПоОтбору(ЭлектронныеДокументы, Отбор);
	
	ВсеПодписи = Новый Массив;
	Для Каждого Сообщение Из СообщенияЭДО Цикл
		Подписи = УстановленныеПодписиСУчетомДоверенностей(Сообщение.Ссылка);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеПодписи, Подписи);
	КонецЦикла;
	
	Возврат ВсеПодписи;
	
КонецФункции

#КонецОбласти

#Область ДокументыНаПодписи

// Возвращаемое значение:
//  Структура:
//  * Организация - см. ИнтеграцияЭДО.ПустаяСсылкаОрганизации
//  * Контрагент - см. ИнтеграцияЭДО.ПустаяСсылкаУчастникаЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
Функция НовыйОтборДокументовНаПодписи() Экспорт
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", ИнтеграцияЭДО.ПустаяСсылкаОрганизации());
	Отбор.Вставить("Контрагент", ИнтеграцияЭДО.ПустаяСсылкаУчастникаЭДО());
	Отбор.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	Отбор.Вставить("Направление", Перечисления.НаправленияЭДО.ПустаяСсылка());
	Возврат Отбор;
КонецФункции

// Параметры:
//  Отбор - см. НовыйОтборДокументовНаПодписи
// 
// Возвращаемое значение:
//  Запрос
Функция ЗапросДокументовНаПодписи(Отбор) Экспорт
	
	ОтборОбъектовДляПодписания = МаршрутыПодписанияБЭД.НовыйОтборОбъектовДляПодписания();
	ОтборОбъектовДляПодписания.Объект =
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенийЭДО.Подписание)";
	ОписаниеЗапроса = МаршрутыПодписанияБЭД.ЗапросОбъектовДляПодписания("ОбъектыДляПодписания", ОтборОбъектовДляПодписания);
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	ОбъектыДляПодписания.Сертификат КАК Сертификат,
		|	ВЫБОР
		|		КОГДА СообщениеЭДО.ТипЭлементаРегламента <> ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя)
		|				И СообщениеЭДО.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Исходящий)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Входящий)
		|		ИНАЧЕ СообщениеЭДО.Направление
		|	КОНЕЦ КАК Направление
		|ПОМЕСТИТЬ ДокументыДляПодписания
		|ИЗ
		|	ОбъектыДляПодписания КАК ОбъектыДляПодписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ОбъектыДляПодписания.Объект = СообщениеЭДО.Ссылка");
	
	ТекстыЗапросаПоНаправлению = Новый Массив;
	Если Не ЗначениеЗаполнено(Отбор.Направление)
		ИЛИ Отбор.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
		ТекстыЗапросаПоНаправлению.Добавить(
			"ВЫБРАТЬ
			|	ДокументыДляПодписания.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
			|	ДокументыДляПодписания.Сертификат КАК Сертификат,
			|	ДокументыДляПодписания.Направление КАК Направление,
			|	ДокументЭДО.Организация КАК Организация,
			|	ДокументЭДО.ВидДокумента КАК ВидДокумента,
			|	ДокументЭДО.НомерДокумента КАК НомерДокумента,
			|	ДокументЭДО.ДатаДокумента КАК ДатаДокумента,
			|	ДокументЭДО.СуммаДокумента КАК СуммаДокумента
			|ИЗ
			|	ДокументыДляПодписания
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
			|		ПО ДокументыДляПодписания.ЭлектронныйДокумент = ДокументЭДО.Ссылка
			|ГДЕ
			|	&УсловиеОтбора");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Отбор.Направление)
		ИЛИ Отбор.Направление <> Перечисления.НаправленияЭДО.Входящий Тогда
		ТекстыЗапросаПоНаправлению.Добавить(
			"ВЫБРАТЬ
			|	ДокументыДляПодписания.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
			|	ДокументыДляПодписания.Сертификат КАК Сертификат,
			|	ДокументыДляПодписания.Направление КАК Направление,
			|	ДокументЭДО.Организация КАК Организация,
			|	ДокументЭДО.ВидДокумента КАК ВидДокумента,
			|	ДокументЭДО.НомерДокумента КАК НомерДокумента,
			|	ДокументЭДО.ДатаДокумента КАК ДатаДокумента,
			|	ДокументЭДО.СуммаДокумента КАК СуммаДокумента
			|ИЗ
			|	ДокументыДляПодписания
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ДокументЭДО
			|		ПО ДокументыДляПодписания.ЭлектронныйДокумент = ДокументЭДО.Ссылка
			|ГДЕ
			|	&УсловиеОтбора");
	КонецЕсли;
	
	РазделительЗапроса = "
		|ОБЪЕДИНИТЬ ВСЕ
		|";
	
	ТекстыЗапроса.Добавить(СтрСоединить(ТекстыЗапросаПоНаправлению, РазделительЗапроса));
	
	Запрос = Новый Запрос(СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов()));
	Запрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеЗапроса));
		
	УсловиеОтбора = Новый Массив;
	
	ДобавитьУсловиеОтбораДокументовДляПодписания(Запрос, УсловиеОтбора, Отбор, "ДокументЭДО", "Организация");
	ДобавитьУсловиеОтбораДокументовДляПодписания(Запрос, УсловиеОтбора, Отбор, "ДокументЭДО", "Контрагент");
	ДобавитьУсловиеОтбораДокументовДляПодписания(Запрос, УсловиеОтбора, Отбор, "ДокументЭДО", "ВидДокумента");
	ДобавитьУсловиеОтбораДокументовДляПодписания(Запрос, УсловиеОтбора, Отбор, "ДокументыДляПодписания", "Направление");
	
	Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора", СтрСоединить(УсловиеОтбора, " И "));
	Иначе
		Запрос.УстановитьПараметр("УсловиеОтбора", Истина);
	КонецЕсли;

	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область СвязанныеДокументы

// Возвращаемое значение:
//  Структура:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ИдентификаторыСвязи - Массив из Строка
Функция НовыйОтборСвязанныхДокументовВходящегоЭДО() Экспорт
	Отбор = Новый Структура;
	Отбор.Вставить("ЭлектронныйДокумент", Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка());
	Отбор.Вставить("ИдентификаторыСвязи", Новый Массив);
	Возврат Отбор;
КонецФункции

// Параметры:
//  Отбор - См. НовыйОтборСвязанныхДокументовВходящегоЭДО
//  ИмяВременнойТаблицы - Строка
// 
// Возвращаемое значение:
//  См. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросСвязанныхДокументовВходящегоЭДО(Отбор, ИмяВременнойТаблицы = "") Экспорт
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	
	Если Не ЗначениеЗаполнено(Отбор.ЭлектронныйДокумент) Тогда
		Возврат ОписаниеЗапроса;
	КонецЕсли;
	
	МеткаВременнойТаблицы = "ПОМЕСТИТЬ ИмяВременнойТаблицы";
	ЗначениеВременнойТаблицы = "";
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ЗначениеВременнойТаблицы = СтрЗаменить(МеткаВременнойТаблицы, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	КонецЕсли;
	
	ОписаниеЗапроса.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДОИдентификаторыОснований.ИдентификаторСвязи,
		|	ЭлектронныйДокументВходящийЭДОИдентификаторыОснований.ИдентификаторДокументооборота
		|ПОМЕСТИТЬ ВТ_ИдентификаторыОснований
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО.ИдентификаторыОснований КАК
		|		ЭлектронныйДокументВходящийЭДОИдентификаторыОснований
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДОИдентификаторыОснований.Ссылка = &ОтборЭлектронныйДокумент
		|;
		|
		|
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументЭДО.Ссылка КАК ЭлектронныйДокумент
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	ВТ_ИдентификаторыОснований
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
		|		ПО ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота = ДокументЭДО.ИдентификаторДокументооборота
		|		И ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота <> """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументЭДО.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	ВТ_ИдентификаторыОснований КАК ВТ_ИдентификаторыОснований
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
		|		ПО ВТ_ИдентификаторыОснований.ИдентификаторСвязи = ДокументЭДО.ИдентификаторСвязи
		|		И ВТ_ИдентификаторыОснований.ИдентификаторСвязи <> """"
		|		И ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота = """"
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИдентификаторыОснований КАК ВТ_ИдентификаторыДокументооборотов
		|		ПО ДокументЭДО.ИдентификаторДокументооборота = ВТ_ИдентификаторыДокументооборотов.ИдентификаторДокументооборота
		|ГДЕ
		|	ВТ_ИдентификаторыДокументооборотов.ИдентификаторДокументооборота ЕСТЬ NULL";
	
	ОписаниеЗапроса.Текст = СтрЗаменить(ОписаниеЗапроса.Текст, МеткаВременнойТаблицы, ЗначениеВременнойТаблицы);
	
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ОтборЭлектронныйДокумент", Отбор.ЭлектронныйДокумент);
	
	Если ЗначениеЗаполнено(Отбор.ИдентификаторыСвязи) Тогда
		
		ОписаниеЗапроса.СлужебныеПараметры.Вставить("ОтборИдентификаторыСвязи", Отбор.ИдентификаторыСвязи);
		
		ОписаниеЗапроса.Текст = ОписаниеЗапроса.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		
		ОписаниеЗапроса.Текст = ОписаниеЗапроса.Текст
			+ "ВЫБРАТЬ
			|	ДокументЭДО.Ссылка КАК ЭлектронныйДокумент
			|ИЗ
			|	Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИдентификаторыОснований КАК ВТ_ИдентификаторыСвязи
			|		ПО ДокументЭДО.ИдентификаторСвязи = ВТ_ИдентификаторыСвязи.ИдентификаторСвязи
			|ГДЕ
			|	ДокументЭДО.ИдентификаторСвязи В (&ОтборИдентификаторыСвязи)
			|	И ВТ_ИдентификаторыСвязи.ИдентификаторСвязи ЕСТЬ NULL";
			
	КонецЕсли;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Возвращает исходящий документ по идентификатору файла.
// 
// Параметры:
//  ДанныеФайла - Строка - Идентификатор файла (имя файла)
//                       - Структура - данные выбранного файла:
//                           * Хранение  - Строка - расположение данных во временном хранилище.
//                           * Имя       - Строка - путь к файлу \ имя файла
//  ТекущийДокумент - Неопределено, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Исключить проверку документа
// Возвращаемое значение:
//  ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция ИсходящийДокументПоИдентификаторуФайла(ДанныеФайла, ТекущийДокумент = Неопределено) Экспорт
	Ответ = Документы.ЭлектронныйДокументИсходящийЭДО.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(ДанныеФайла) Тогда
		Возврат Ответ;
	КонецЕсли;
	Если ТипЗнч(ДанныеФайла) = Тип("Строка") Тогда
		ИдентификаторФайла = ДанныеФайла;
	Иначе
		РезультатРаспознания = КонвертацияЭДО.ПараметрыФайлаПроизвольногоДокумента(
			ПолучитьИзВременногоХранилища(ДанныеФайла.Хранение),, Истина);
		Если ТипЗнч(РезультатРаспознания) = Тип("Структура") И РезультатРаспознания.Свойство("ИдентификаторДокумента") Тогда
			ИдентификаторФайла = РезультатРаспознания.ИдентификаторДокумента;
		Иначе 
			Возврат Ответ;
		КонецЕсли;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
	               |ПОМЕСТИТЬ СообщенияЭДО
	               |ИЗ
	               |	Справочник.СообщениеЭДОПрисоединенныеФайлы КАК СообщениеЭДОПрисоединенныеФайлы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
	               |		ПО СообщениеЭДОПрисоединенныеФайлы.ВладелецФайла = СообщениеЭДО.Ссылка
	               |			И СообщениеЭДОПрисоединенныеФайлы.Наименование = ВЫРАЗИТЬ(&ИдентификаторФайла КАК СТРОКА(150))
	               |			И ВЫРАЗИТЬ(СообщениеЭДОПрисоединенныеФайлы.ПолноеИмяФайла КАК СТРОКА(1024)) = &ИдентификаторФайла + "".xml""
	               |			И НЕ СообщениеЭДОПрисоединенныеФайлы.ПометкаУдаления
	               |			И НЕ СообщениеЭДО.ЭлектронныйДокумент = &ТекущийДокумент
	               |			И (СообщениеЭДО.ЭлектронныйДокумент ССЫЛКА Документ.ЭлектронныйДокументИсходящийЭДО)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СообщениеЭДО.ЭлектронныйДокумент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СостоянияДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	               |	МАКСИМУМ(СостоянияДокументовЭДО.ДатаИзменения) КАК ДатаИзменения
	               |ПОМЕСТИТЬ СостоянияСообщений
	               |ИЗ
	               |	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СообщенияЭДО КАК СообщенияЭДО
	               |		ПО СообщенияЭДО.ЭлектронныйДокумент = СостоянияДокументовЭДО.ЭлектронныйДокумент
	               |			И НЕ СостоянияДокументовЭДО.Состояние В (&МассивЗакрытых)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СостоянияДокументовЭДО.ЭлектронныйДокумент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	СостоянияСообщений.ЭлектронныйДокумент КАК ЭлектронныйДокумент
	               |ИЗ
	               |	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СостоянияСообщений КАК СостоянияСообщений
	               |		ПО СостоянияСообщений.ЭлектронныйДокумент = СостоянияДокументовЭДО.ЭлектронныйДокумент
	               |			И СостоянияСообщений.ДатаИзменения = СостоянияДокументовЭДО.ДатаИзменения
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СостоянияСообщений.ДатаИзменения";
	
	Запрос.УстановитьПараметр("ИдентификаторФайла", ИдентификаторФайла);
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	СостоянияЗакрытых = Новый Массив;
	СостоянияЗакрытых.Добавить(Перечисления.СостоянияДокументовЭДО.Аннулирован);
	СостоянияЗакрытых.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением);
	СостоянияЗакрытых.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи);
	СостоянияЗакрытых.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно);
	Запрос.УстановитьПараметр("МассивЗакрытых", СостоянияЗакрытых);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Ответ =  Выборка.ЭлектронныйДокумент;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

#КонецОбласти

// Возвращает описание длительной операции выполнения действий по ЭДО.
// 
// Параметры:
//   ПараметрыВыполненияДействий - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//   КонтекстДиагностики - Неопределено
//                       - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//   См. НовыеРезультатыВыполненияДействийПоИнтеграциямЭДО
Функция ВыполнитьДействияПоИнтеграциямЭДО(ПараметрыВыполненияДействий, КонтекстДиагностики = Неопределено) Экспорт
	
	РезультатыПоИнтеграциямЭДО = НовыеРезультатыВыполненияДействийПоИнтеграциямЭДО();
	
	МенеджерыДействийЭДО = МенеджерыДействийЭДО();
	
	Для Каждого МенеджерДействийЭДО Из МенеджерыДействийЭДО Цикл
		РезультатДействийЭДО = МенеджерДействийЭДО.Значение.ВыполнитьДействияЭДО(ПараметрыВыполненияДействий);
		РезультатыПоИнтеграциямЭДО.Вставить(МенеджерДействийЭДО.Ключ, РезультатДействийЭДО);
	КонецЦикла;
	
	Возврат РезультатыПоИнтеграциямЭДО;
	
КонецФункции

#Область ДействияПоЭДО

// Возвращает признак наличия действия в наборе.
// 
// Параметры:
//  НаборДействий - Соответствие из КлючИЗначение:
//  * Ключ - ПеречислениеСсылка.ДействияПоЭДО
//  * Значение - Булево
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьДействие(НаборДействий, Действие) Экспорт
	Возврат ЭлектронныеДокументыЭДОКлиентСервер.ЕстьДействие(НаборДействий, Действие);
КонецФункции

// Возвращает набор действий по указанному состоянию и свойствам электронного документа.
// 
// Параметры:
// 	СостояниеДокумента - ПеречислениеСсылка.СостоянияДокументовЭДО - Состояние электронного документа.
// 	СвойстваДокумента - См. НовыеСвойстваДокументаДляОпределенияДоступныхДействийПоЭДО
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - Набор действий по состоянию ЭДО:
//  * Ключ - ПеречислениеСсылка.ДействияПоЭДО
//  * Значение - Булево
Функция ДействияПоСостояниюДокумента(СостояниеДокумента, СвойстваДокумента) Экспорт
	Возврат ЭлектронныеДокументыЭДОСлужебный.ДоступныеДействияПоЭДО(СостояниеДокумента, СвойстваДокумента);
КонецФункции

// Возвращаемое значение:
//  Структура:
// 	* Ссылка - Неопределено,ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 	* НаОзнакомлении - Булево - Признак необходимости ознакомиться с электронным документом.
// 	* СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД - Способ обмена электронным документом.
// 	* ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ЭтоОблачныйЭДО - Булево
Функция НовыеСвойстваДокументаДляОпределенияДоступныхДействийПоЭДО() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", Неопределено);
	Параметры.Вставить("НаОзнакомлении", Ложь);
	Параметры.Вставить("СпособОбмена", Перечисления.СпособыОбменаЭД.ПустаяСсылка());
	Параметры.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	Параметры.Вставить("ЭтоОблачныйЭДО", Ложь);
	Возврат Параметры;
КонецФункции

// Определяет, доступно ли переформирование для типа документа.
// 
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ПереформированиеЗапрещеноПоТипуДокумента(ТипДокумента) Экспорт
	
	ТипыДокументовПереформированиеЗапрещено = Новый Массив;
	ТипыДокументовПереформированиеЗапрещено.Добавить(Перечисления.ТипыДокументовЭДО.КаталогТоваров);
	ТипыДокументовПереформированиеЗапрещено.Добавить(Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность);
	ТипыДокументовПереформированиеЗапрещено.Добавить(Перечисления.ТипыДокументовЭДО.ДоговорныйДокумент);
	
	Возврат ТипыДокументовПереформированиеЗапрещено.Найти(ТипДокумента) <> Неопределено;
	
КонецФункции

// Параметры:
//  СостоянияЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ВыполнениеДействийДляОтдельногоДокументаПакетаЗапрещеноПоСостоянию(СостоянияЭДО) Экспорт
	
	СостоянияЭДОВыполнениеДействийЗапрещено = Новый Массив;
	СостоянияЭДОВыполнениеДействийЗапрещено.Добавить(Перечисления.СостоянияДокументовЭДО.НеСформирован);
	СостоянияЭДОВыполнениеДействийЗапрещено.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка);
	СостоянияЭДОВыполнениеДействийЗапрещено.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание);
	СостоянияЭДОВыполнениеДействийЗапрещено.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно);
	
	Возврат СостоянияЭДОВыполнениеДействийЗапрещено.Найти(СостоянияЭДО) <> Неопределено;
	
КонецФункции

// Параметры:
//  ДействиеПоЭДО - ПеречислениеСсылка.ДействияПоЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ДействиеДляОтдельногоДокументаПакетаНеЗависитОтЗапретаПоСостоянию(ДействиеПоЭДО) Экспорт
	
	ДоступныеДействия = Новый Массив;
	ДоступныеДействия.Добавить(Перечисления.ДействияПоЭДО.Аннулировать);
	ДоступныеДействия.Добавить(Перечисления.ДействияПоЭДО.Отклонить);
	ДоступныеДействия.Добавить(Перечисления.ДействияПоЭДО.ОтправитьПовторно);
	ДоступныеДействия.Добавить(Перечисления.ДействияПоЭДО.Переформировать);
	ДоступныеДействия.Добавить(Перечисления.ДействияПоЭДО.Перенаправить);
	
	Возврат ДоступныеДействия.Найти(ДействиеПоЭДО) <> Неопределено;

КонецФункции

// Возвращаемое значение:
//  Булево - есть интеграция с клиентом ЭДО
Функция ЕстьИнтеграцияОблачногоЭДО() Экспорт
	Возврат ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.ОбменСКонтрагентами.ИнтеграцияОблачногоЭДО");
КонецФункции

// Заполняет отпечатки сертификатов на сервере.
// 
// Параметры:
//  ПараметрыВыполнения - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ЗаполнитьОтпечаткиСертификатов(ПараметрыВыполнения, КонтекстДиагностики) Экспорт
	
	Если Не ЕстьДействие(ПараметрыВыполнения.НаборДействий, Перечисления.ДействияПоЭДО.Подписать)
		И Не ЕстьДействие(ПараметрыВыполнения.НаборДействий, Перечисления.ДействияПоЭДО.Отправить) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперации = НСтр("ru = 'Выполнение действий по ЭДО'");
	ПараметрыВыполнения.ОтпечаткиСертификатов = КриптографияБЭД.ПолучитьОтпечаткиСертификатов(ВидОперации,
		Неопределено, ПараметрыВыполнения.ОтпечаткиСертификатов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаДействийПоЭДО

// Возвращает пустой результат действий по ЭДО.
// 
// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  Структура:
//  * Итог                      - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  * ОшибкиФормирования        - Массив из см. НовоеОписаниеОшибкиФормирования
//  * КонтекстДиагностики       - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  * ПараметрыПодписания       - см. ПараметрыИнтерактивногоПодписания
//  * ПараметрыПроверкиПодписей - см. ПараметрыПроверкиПодписейНаКлиенте
//  * ЗашифрованныеМаркеры      - см. КриптографияБЭДКлиентСервер.НовыйНаборДанныхДляРасшифровки
//  * РасшифрованныеМаркеры      - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
//  * ДокументыДляОбработкиИзвещений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
//  * ДокументыДляОбработкиДополнительныхСведений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
//  * ПаролиСертификатов - см. КриптографияБЭД.ПаролиСертификатов
Функция НовыйРезультатДействийПоЭДО(КонтекстДиагностики) Экспорт
	Возврат ЭлектронныеДокументыЭДОСлужебный.НовыйРезультатДействийПоЭДО(КонтекстДиагностики);
КонецФункции

// Параметры:
//  НаборДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
Процедура ДобавитьДействие(НаборДействий, Действие) Экспорт
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, Действие);
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция НовыйИдентификаторДокументооборота() Экспорт
	Возврат Строка(Новый УникальныйИдентификатор);
КонецФункции

// Выполняется перед записью исходящего электронного документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЭлектронныйДокументИсходящийЭДО - исходящий документ
//  ОписанияСообщений - Массив из см. НовоеОписаниеСообщения - описания сообщений исходящего документа
//
Процедура ПередЗаписьюНовогоДокумента(ДокументОбъект, ОписанияСообщений) Экспорт
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");	
	КонецЕсли;
	
	Если ТипЗнч(ОписанияСообщений) = Тип("Массив") Тогда
		Для Каждого ТекущийЭлемент Из ОписанияСообщений Цикл
			Если ТекущийЭлемент.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
			Или (МодульОбменСГИСЭПД <> Неопределено 
					И МодульОбменСГИСЭПД.ЭтоТитулОтправителя(ТекущийЭлемент.ТипЭлементаРегламента)) Тогда
				ОписаниеСообщения = ТекущийЭлемент;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
	Иначе
		ОписаниеСообщения = ОписанияСообщений;
	КонецЕсли;
	
	ДокументОбъект.ВидДокумента = ОписаниеСообщения.ВидСообщения;
	ДокументОбъект.ДатаДокумента = ОписаниеСообщения.Данные.Содержание.ДатаДокумента;
	ДокументОбъект.СуммаДокумента = ОписаниеСообщения.Данные.Содержание.СуммаДокумента;
	ДокументОбъект.СодержитМаркируемыеТовары = ОписаниеСообщения.Данные.Содержание.ЕстьМаркировка;
	Если Не ЗначениеЗаполнено(ДокументОбъект.ВидПодписи) Тогда
		ДокументОбъект.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДокументОбъект.НомерДокумента) Тогда
		ДокументОбъект.НомерДокумента = ОписаниеСообщения.Данные.Содержание.НомерДокумента;
	КонецЕсли;
	
	СвойстваДокументовПоФорматам = Неопределено;
	Если ОписаниеСообщения.Данные.Содержание.Свойство("СвойстваДокументовПоФорматам", СвойстваДокументовПоФорматам) Тогда
		АктОРасхождениях = Неопределено;
		Если СвойстваДокументовПоФорматам.Свойство("АктОРасхождениях", АктОРасхождениях) Тогда
			ВариантФормированияИтоговПриемки = "";
			Если АктОРасхождениях.Свойство("ВариантФормированияИтоговПриемки", ВариантФормированияИтоговПриемки)
				И Не ПустаяСтрока(ВариантФормированияИтоговПриемки) Тогда
				ВариантыФормированияИтоговПриемки = ФорматыЭДО.ВариантыФормированияИтоговПриемки();
				ДокументОбъект.ТребуетсяПодтверждение = (ВариантФормированияИтоговПриемки = 
					ВариантыФормированияИтоговПриемки.ПродавцомФормируютсяДопСведенияОСогласииНесогласииСРезультатамиПриемки
					Или ВариантФормированияИтоговПриемки = ВариантыФормированияИтоговПриемки.ПродавцомФормируютсяДопСведенияИные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняется при записи исходящего электронного документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЭлектронныйДокументИсходящийЭДО - исходящий документ
//  ОписанияСообщений - Массив из см. НовоеОписаниеСообщения - описания сообщений исходящего документа
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиентСервер.НовыйКонтекстДиагностики
//  ОбъектыУчета - Массив из см. ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылки на объекта учета
//
Процедура ПриЗаписиНовогоДокумента(ДокументОбъект, ОписанияСообщений, КонтекстДиагностики, ОбъектыУчета = Неопределено) Экспорт
	
	Действие = Перечисления.ДействияПоЭДО.Сформировать;
	
	Если Не ТипЗнч(ОписанияСообщений) = Тип("Массив") Тогда
		ОписанияСообщений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписанияСообщений);	
	КонецЕсли;
	
	СостоянияЭлементовРегламента = РегламентыЭДО.НовыеСостоянияЭлементовРегламента();
	ДополненияСостоянийЭДО = Неопределено;
	
	Для Каждого ОписаниеСообщения Из ОписанияСообщений Цикл
				
		ЭтоИнформацияОтправителя = 
			ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
		
		СообщениеОбъект = ЭлектронныеДокументыЭДОСлужебный.СоздатьСообщение(ОписаниеСообщения, ДокументОбъект.Ссылка, ДокументОбъект);
		ЗаполнитьЗначенияСвойств(СостоянияЭлементовРегламента.Добавить(), СообщениеОбъект);
		
		Если ЗначениеЗаполнено(ДокументОбъект.ИдентификаторыОснований)
			И ЗначениеЗаполнено(ОписаниеСообщения.Данные.Содержание)
			 И ЭтоИнформацияОтправителя Тогда
			ЭлектронныеДокументыЭДОСлужебный.ОбновитьСвязанныеДокументы(ОписаниеСообщения.Данные.Содержание.ТипДокумента,
				ДокументОбъект.ИдентификаторыОснований.Выгрузить(), Действие, КонтекстДиагностики);
		КонецЕсли;
		
		Если ДокументОбъект.ОбменБезПодписи Тогда
			Продолжить;
		КонецЕсли;
		
		Если СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Интеркампани Тогда
			МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании();
			СписокПодписантов = ЭлектронныеДокументыЭДОСлужебный.СписокПодписантовИнтеркампани(
				ДокументОбъект.Организация, ДокументОбъект.Контрагент);
		Иначе
			МаршрутПодписания = ДокументОбъект.МаршрутПодписания;
			СписокПодписантов = ДокументОбъект.СписокПодписантов.Выгрузить();
		КонецЕсли;
		
		Если МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании()
			И Не ЗначениеЗаполнено(СписокПодписантов) Тогда
			ВызватьИсключение НСтр("ru = 'Не заполнен список подписантов'");
		КонецЕсли;
		
		ПараметрыМаршрута = ЭлектронныеДокументыЭДОСлужебный.СформироватьМаршрутПодписания(
			СообщениеОбъект, МаршрутПодписания, СписокПодписантов);
		
		ПараметрыОповещенияПодписантов = Новый Структура("СообщениеОбъект, ТаблицаПодписания",
			СообщениеОбъект, ПараметрыМаршрута.ТаблицаПодписания);
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ПараметрыОповещенияПодписантов",
			ПараметрыОповещенияПодписантов);
		
		Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
			ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная;
		Иначе
			ВидПодписи = ДокументОбъект.ВидПодписи;
		КонецЕсли;
		
		Если ЭтоИнформацияОтправителя Тогда
			ДополненияСостоянийЭДО = ЭлектронныеДокументыЭДОСлужебный.ДополненияСостоянийЭДОПриПодписании(
				СообщениеОбъект, ВидПодписи, ПараметрыМаршрута.ВесМаршрута);
		КонецЕсли;
	
	КонецЦикла;
	
	СостояниеДокумента = ЭлектронныеДокументыЭДОСлужебный.УстановитьСостояниеДокументаПриФормировании(
		ДокументОбъект, СостоянияЭлементовРегламента, ДокументОбъект.Дата, ОбъектыУчета,
		КонтекстДиагностики, ДополненияСостоянийЭДО);
	
	РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Действие, ДокументОбъект, СостояниеДокумента,
		ДокументОбъект.Дата, СообщениеОбъект);
	
КонецПроцедуры

// Параметры:
//  ДокументОбъект - ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиентСервер.НовыйКонтекстДиагностики
Процедура ПослеЗаписиНовогоДокумента(ДокументОбъект, КонтекстДиагностики) Экспорт
	
	ПараметрыОповещенияПодписантов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДокументОбъект.ДополнительныеСвойства, "ПараметрыОповещенияПодписантов");
	
	Если ЗначениеЗаполнено(ПараметрыОповещенияПодписантов) Тогда
		ЭлектронныеДокументыЭДОСлужебный.ОповеститьОДокументеКПодписанию(
			ПараметрыОповещенияПодписантов.СообщениеОбъект, ПараметрыОповещенияПодписантов.ТаблицаПодписания);
	КонецЕсли;
	
	ЭлектронныеДокументыЭДОСобытия.ПослеФормированияЭлектронногоДокумента(ДокументОбъект.Ссылка, КонтекстДиагностики);
	
КонецПроцедуры

// Обновляет маршрут подписания по документу
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
// 	Отказ - Булево - Признак отказа от записи изменения.
Процедура ПриИзмененииМаршрутаПодписания(ДокументОбъект, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	МаршрутПодписания = ДокументОбъект.МаршрутПодписания;
	СписокПодписантов = ДокументОбъект.СписокПодписантов.Выгрузить();
	
	Если МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании()
		И Не ЗначениеЗаполнено(СписокПодписантов) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнен список подписантов'");
	КонецЕсли;
	
	СообщениеОтправителя = СообщениеОтправителя(ДокументОбъект.Ссылка);
	СообщениеОбъект = СообщениеОтправителя.ПолучитьОбъект();
		
	МаршрутыПодписанияБЭД.ОчиститьМаршрутПодписания(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СообщениеОтправителя));
	
	ПараметрыМаршрута = ЭлектронныеДокументыЭДОСлужебный.СформироватьМаршрутПодписания(
		СообщениеОбъект, МаршрутПодписания, СписокПодписантов);
		
	ПараметрыОповещенияПодписантов = Новый Структура("СообщениеОбъект, ТаблицаПодписания",
		СообщениеОбъект, ПараметрыМаршрута.ТаблицаПодписания);
		
	ДокументОбъект.ДополнительныеСвойства.Вставить("ПараметрыОповещенияПодписантов", ПараметрыОповещенияПодписантов);
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * Организация - Неопределено,ОпределяемыйТип.Организация
//  * Контрагент - Неопределено,ОпределяемыйТип.УчастникЭДО
//  * ДоговорКонтрагента - Неопределено,ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторКонтрагента - Строка
//  * СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
//  * ВидПодписи -  ПеречислениеСсылка.ВидыЭлектронныхПодписей
//  * МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//  * Подписанты - Неопределено,Массив из СправочникСсылка.Пользователи
//  * ОбменБезПодписи - Булево
//  * ТребуетсяИзвещение - Булево
//  * ТребуетсяПодтверждение - Булево
//  * ВыгружатьДополнительныеСведения - Булево
//  * Формат - Строка
//  * ИдентификаторДокумента - Строка
//  * СоздатьНомерАвтоматически - Булево
//  * ЭтоОблачныйЭДО - Булево
//
Функция НовыеНастройкиОтправкиДокумента() Экспорт
	
	НастройкиОтправки = Новый Структура;
	НастройкиОтправки.Вставить("Организация", Неопределено);
	НастройкиОтправки.Вставить("Контрагент", Неопределено);
	НастройкиОтправки.Вставить("ДоговорКонтрагента", Неопределено);
	НастройкиОтправки.Вставить("ИдентификаторОрганизации", "");
	НастройкиОтправки.Вставить("ИдентификаторКонтрагента", "");
	НастройкиОтправки.Вставить("СпособОбмена", Перечисления.СпособыОбменаЭД.ПустаяСсылка());
	НастройкиОтправки.Вставить("ВидПодписи", Перечисления.ВидыЭлектронныхПодписей.ПустаяСсылка());
	НастройкиОтправки.Вставить("МаршрутПодписания", Справочники.МаршрутыПодписания.ПустаяСсылка());
	НастройкиОтправки.Вставить("Подписанты", Неопределено);
	НастройкиОтправки.Вставить("ОбменБезПодписи", Ложь);
	НастройкиОтправки.Вставить("ТребуетсяИзвещение", Ложь);
	НастройкиОтправки.Вставить("ТребуетсяПодтверждение", Ложь);
	НастройкиОтправки.Вставить("ВыгружатьДополнительныеСведения", Ложь);
	НастройкиОтправки.Вставить("Формат", "");
	НастройкиОтправки.Вставить("ИдентификаторДокумента", "");
	НастройкиОтправки.Вставить("СоздатьНомерАвтоматически", Ложь);
	НастройкиОтправки.Вставить("ЭтоОблачныйЭДО", Ложь);
	
	Возврат НастройкиОтправки;
	
КонецФункции

// Создает исходящий электронный документ.
//
// Параметры:
//  НастройкиОтправки - см. НовыеНастройкиОтправкиДокумента
//  ОписанияСообщений - Массив из см. НовоеОписаниеСообщения
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  СвязующийОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ОбъектыУчета - Массив из см. ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ИдентификаторыОснований - Массив из См. НовыйЭлементКоллекцииИдентификаторыОснованияДокумента
//
// Возвращаемое значение:
//  ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
//
Функция СоздатьДокументПоОписаниюСообщений(НастройкиОтправки, ОписанияСообщений, КонтекстДиагностики, СвязующийОбъектУчета = Неопределено, ОбъектыУчета = Неопределено, ИдентификаторыОснований = Неопределено) Экспорт
	Возврат ЭлектронныеДокументыЭДОСлужебный.СоздатьИсходящийДокумент(НастройкиОтправки, ОписанияСообщений,
		КонтекстДиагностики, СвязующийОбъектУчета, ОбъектыУчета, ИдентификаторыОснований)
КонецФункции

// Отправляет все документы в соответствующем состоянии для указанных идентификаторов организаций.
// 
// Параметры:
// 	ИдентификаторыОрганизаций - Массив из Строка - набор идентификаторов организаций, по которым производится отправка
// 	ОтпечаткиСертификатов - См. КриптографияБЭДКлиентСервер.НовыйРезультатПолученияОтпечатков
// 	КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
// 	Неопределено - если выполнение действий запрещено.
// 	См. СинхронизацияЭДО.ОтправитьОбъекты
Функция ОтправитьВсеДокументы(ИдентификаторыОрганизаций, ОтпечаткиСертификатов = Неопределено, КонтекстДиагностики = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторыОрганизаций)
		ИЛИ ВыполнениеДействийПоЭДОЗапрещено(КонтекстДиагностики) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыДействийПоЭДО = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыДействийПоЭДО.ОбъектыДействий.ИдентификаторыОрганизаций = ИдентификаторыОрганизаций;
	ПараметрыДействийПоЭДО.ОтпечаткиСертификатов = ОтпечаткиСертификатов;
	ДобавитьДействие(ПараметрыДействийПоЭДО.НаборДействий, Перечисления.ДействияПоЭДО.Отправить);
	
	РезультатОтправки = ЭлектронныеДокументыЭДОСлужебный.ОтправитьСообщения(ПараметрыДействийПоЭДО, КонтекстДиагностики);
	
	Возврат РезультатОтправки;
	
КонецФункции

// Устанавливает ответственного по электронному документу.
// 
// Параметры:
// 	ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Ссылка на электронный документ.
// 	Ответственный - СправочникСсылка.Пользователи - Ссылка на пользователя.
// 	КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	Комментарий - Строка - Описание причины смены ответственного.
// Возвращаемое значение:
// 	Булево - Истина, если ответственный успешно установлен.
Функция УстановитьОтветственногоПоДокументу(ЭлектронныйДокумент, Ответственный, КонтекстДиагностики, Комментарий = "") Экспорт
	
	Если ВыполнениеДействийПоЭДОЗапрещено(КонтекстДиагностики) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЭлектронныеДокументыЭДОСлужебный.ПеренаправитьДокумент(ЭлектронныйДокумент, Ответственный, КонтекстДиагностики, Комментарий);
	
КонецФункции

// Возвращает обработанный результат загрузки.
// 
// Параметры:
//  РезультатЗагрузкиВФоне - См. НовыйРезультатЗагрузкиДокументов
// 
// Возвращаемое значение:
//  Структура:
//  * КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  * ПодписиДляПроверки - Массив из См. НовыеДанныеДляПроверкиПодписейНаКлиенте
//  * РезультатДействийПоЭДО - См. НовыйРезультатДействийПоЭДО
//  * АдресКонтекстаНаСервере - Строка
//
Функция ОбработатьРезультатЗагрузкиВФоне(РезультатЗагрузкиВФоне) Экспорт
	Возврат ЭлектронныеДокументыЭДОСлужебный.ОбработатьРезультатЗагрузкиВФоне(РезультатЗагрузкиВФоне)
КонецФункции

// Возвращает сведения загруженного электронного документа.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// * ИсправленнаяВерсияДокумента - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// * Организация - Неопределено,ОпределяемыйТип.Организация
// * Контрагент  - Неопределено,ОпределяемыйТип.КонтрагентБЭД
// * ИдентификаторОтправителя - Строка
// * ИдентификаторПолучателя - Строка
// * ОписаниеДанных - См. СинхронизацияЭДО.НовоеОписаниеДанныхОбъекта
// * ОписаниеДополнительныхДанных - См. СинхронизацияЭДО.НовоеОписаниеДанныхОбъекта
// * ДополнительныеПараметрыКарточки - Неопределено,Произвольный
// * Формат - Строка
Функция НовыеСведенияЗагруженногоДокумента() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ЭлектронныйДокумент", Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка());
	Результат.Вставить("ИсправленнаяВерсияДокумента",Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка());
	Результат.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("Организация", Неопределено);
	Результат.Вставить("Контрагент",  Неопределено);
	Результат.Вставить("ИдентификаторОтправителя", "");
	Результат.Вставить("ИдентификаторПолучателя", "");
	Результат.Вставить("ОписаниеДанных", СинхронизацияЭДО.НовоеОписаниеДанныхОбъекта());
	Результат.Вставить("ОписаниеДополнительныхДанных", СинхронизацияЭДО.НовоеОписаниеДанныхОбъекта());
	Результат.Вставить("ДополнительныеПараметрыКарточки", Неопределено);
	Результат.Вставить("Формат", "");
	Возврат Результат;
КонецФункции

// Закрывает электронный документ.
// 
// Параметры:
// 	ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Ссылка на электронный документ.
// 	КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	Комментарий - Строка - Описание причины закрытия.
// Возвращаемое значение:
// 	Булево - Истина, если ЭлектронныйДокумент закрыт.
Функция ЗакрытьДокумент(ЭлектронныйДокумент, КонтекстДиагностики, Комментарий = "") Экспорт
	
	Если ВыполнениеДействийПоЭДОЗапрещено(КонтекстДиагностики) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонтекстДиагностики) Тогда
		КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	КонецЕсли;
	
	Возврат ЭлектронныеДокументыЭДОСлужебный.ЗакрытьПринудительно(ЭлектронныйДокумент, КонтекстДиагностики, Комментарий);
	
КонецФункции

// Параметры:
//  ДанныеОбъектов - см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ОтпечаткиСертификатов - см. КриптографияБЭДКлиентСервер.НовыйРезультатПолученияОтпечатков
//  ПаролиСертификатов - см. КриптографияБЭД.ПаролиСертификатов
//  МенеджерКриптографии - Неопределено,МенеджерКриптографии
// 
// Возвращаемое значение:
//  См. ЭлектронныеДокументыЭДОСлужебный.ЗагрузитьОбработатьДанныеОбъектовКонтейнеров
// 
Функция ЗагрузитьОбработатьДанныеОбъектовКонтейнеров(ДанныеОбъектов, КонтекстДиагностики, ОтпечаткиСертификатов,
	ПаролиСертификатов = Неопределено, МенеджерКриптографии = Неопределено) Экспорт
	Возврат ЭлектронныеДокументыЭДОСлужебный.ЗагрузитьОбработатьДанныеОбъектовКонтейнеров(ДанныеОбъектов,
		КонтекстДиагностики, ОтпечаткиСертификатов, ПаролиСертификатов, МенеджерКриптографии);
КонецФункции

// Возвращает пустое описание ошибки формирования.
// 
// Возвращаемое значение:
//  Структура:
// * ОписаниеОбъектаУчета - См. ИнтеграцияЭДОКлиентСервер.НовоеОписаниеОбъектаУчетаСтруктура
// * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
// * ОтсутствуютНастройки - Булево
// * ОтсутствуютПодписанты - Булево
// * ФормированиеЗапрещено - Булево
// * ОсновнойВидНеУстановлен - Булево
// * ПечатнаяФормаНеУказана - Булево
// * ОшибкиДанных - Неопределено
//                - Структура:
//   ** ЗаполнениеДанных - Массив из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//   ** ЗначенияДополнительныхПолей - Структура:
//      *** Формат - Строка
// * ПревышаемыеОграниченияОбъемаПакетаДокументов - Неопределено
//                                                - см. СервисНастроекЭДО.НовыеОграниченияОбъемаПакетаДокументов
// * ОшибкаФормированияВПрикладнойЧасти - Неопределено,Структура:
//   ** ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// * ОтсутствуетФайлДоговорногоДокумента - Неопределено
//                                       - См. НовыеПараметрыПолученияФайлаДоговорногоДокумента
// * ФормированиеНедоступноДляГруппы - Булево
// * ОшибкаПодготовкиДанныхВИнтеграцииОблачногоЭДО - Булево
// * ОшибкиСозданияПоФайлу - Массив Из см. НовыеДанныеОшибкиСозданияПоФайлу
Функция НовоеОписаниеОшибкиФормирования() Экспорт
	ОписаниеОшибки = Новый Структура;
	ОписаниеОшибки.Вставить("ОписаниеОбъектаУчета", ИнтеграцияЭДОКлиентСервер.НовоеОписаниеОбъектаУчетаСтруктура());
	ОписаниеОшибки.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	ОписаниеОшибки.Вставить("ОтсутствуютНастройки", Ложь);
	ОписаниеОшибки.Вставить("ОтсутствуютПодписанты", Ложь);
	ОписаниеОшибки.Вставить("ФормированиеЗапрещено", Ложь);
	ОписаниеОшибки.Вставить("ОсновнойВидНеУстановлен", Ложь);
	ОписаниеОшибки.Вставить("ПечатнаяФормаНеУказана", Ложь);
	ОписаниеОшибки.Вставить("ОшибкиДанных", Неопределено);
	ОписаниеОшибки.Вставить("ПревышаемыеОграниченияОбъемаПакетаДокументов", Неопределено);
	ОписаниеОшибки.Вставить("ОшибкаФормированияВПрикладнойЧасти", Неопределено);
	ОписаниеОшибки.Вставить("ОтсутствуетФайлДоговорногоДокумента", Неопределено);
	ОписаниеОшибки.Вставить("ФормированиеНедоступноДляГруппы", Ложь);
	ОписаниеОшибки.Вставить("ОшибкаПодготовкиДанныхВИнтеграцииОблачногоЭДО", Ложь);
	ОписаниеОшибки.Вставить("ОшибкиСозданияПоФайлу", Новый Массив());
	Возврат ОписаниеОшибки;
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторОшибкиФормированияОтвета() Экспорт
	Возврат "ОшибкаФормированияОтвета";
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ОписаниеОшибки - См. НовоеОписаниеОшибкиФормирования
Процедура ДобавитьОшибкуФормированияОтвета(ЭлектронныйДокумент, Действие, КонтекстДиагностики, ОписаниеОшибки = Неопределено) Экспорт
	
	ПредставлениеДействия = НРег(Действие);
	ВидОперации = ЭлектронныеДокументыЭДОСлужебный.ВидОперацииПриДобавленииОшибки(ПредставлениеДействия);
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки(); 
	ВидОшибки.Идентификатор = ИдентификаторОшибкиФормированияОтвета();
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Ошибка формирования ответа'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = 'Создайте или подберите документы учета'");
	ВидОшибки.ВыводитьСсылкуНаСписокОшибок = Истина;
	
	ТекстОшибки = НСтр("ru = 'Отсутствуют документы учета'");
	
	СвойстваДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
		"ВидДокумента, НомерДокумента, ДатаДокумента, ИдентификаторДокументооборота");
	ПредставлениеДокумента = ПредставлениеДокументаПоСвойствам(СвойстваДокумента);
	КраткоеПредставление = СтрШаблон(НСтр("ru = 'Не удалось %1 %2.'"), ПредставлениеДействия, ПредставлениеДокумента);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(КраткоеПредставление);
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Идентификатор документооборота: %1'"),
		СвойстваДокумента.ИдентификаторДокументооборота));
	МассивСтрок.Добавить(ТекстОшибки);
	ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставление, КраткоеПредставление);
	ЗаписыватьВЖурналРегистрации = Истина;
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Ошибка.ДополнительныеДанные = ОписаниеОшибки;
		ЗаписыватьВЖурналРегистрации = Ложь;
	КонецЕсли;
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами,
		ЗаписыватьВЖурналРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросов

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаСостоянияДокумента() Экспорт
	Возврат ЭлектронныеДокументыЭДОСлужебный.ТекстЗапросаСостоянияДокумента();
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаСостоянийДокументов() Экспорт
	Возврат ЭлектронныеДокументыЭДОСлужебный.ТекстЗапросаСостоянийДокументов();
КонецФункции

// Возвращает текст запроса данных элементов схемы регламента.
// 
// Параметры:
//  ЭтоВходящийЭДО - Булево
// 
// Возвращаемое значение:
//  Строка - текст запроса.
Функция ТекстЗапросаДанныхЭлементовСхемыРегламента(ЭтоВходящийЭДО) Экспорт
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.Ссылка КАК Сообщение,
		|	СообщениеЭДО.ВидСообщения КАК ВидСообщения,
		|	СообщениеЭДО.Направление КАК Направление,
		|	СообщениеЭДО.Статус КАК Статус,
		|	СообщениеЭДО.ДатаИзмененияСтатуса КАК ДатаИзмененияСтатуса,
		|	СообщениеЭДО.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
		|	ДокументЭДО.ВидДокумента КАК ВидДокумента,
		|	ДокументЭДО.НомерДокумента КАК НомерДокумента,
		|	ДокументЭДО.ДатаДокумента КАК ДатаДокумента,
		|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента,
		|	ВидыДокументовЭДО.ПрикладнойТипДокумента КАК ПрикладнойТипДокумента,
		|	ПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайл,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла КАК ПолноеИмяФайла
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИмяТаблицыДокументаЭДО КАК ДокументЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ДокументЭДО.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО СообщениеЭДО.ВидСообщения = ВидыДокументовЭДО.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО СообщениеЭДО.ОсновнойФайл = ПрисоединенныеФайлы.Ссылка
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	СообщениеЭДО.Дата";
	ИмяТаблицыДокументаЭДО = ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО);
	Возврат СтрЗаменить(ТекстЗапроса, "ИмяТаблицыДокументаЭДО", ИмяТаблицыДокументаЭДО);
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаРазмерПрисоединенныхФайловДокументов() Экспорт
	
	Возврат 
		"ВЫБРАТЬ
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	ЕСТЬNULL(СУММА(ПрисоединенныеФайлы.Размер), 0) КАК Размер
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО СообщениеЭДО.ОсновнойФайл = ПрисоединенныеФайлы.Ссылка
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент В (&ЭлектронныйДокумент)
		|СГРУППИРОВАТЬ ПО
		|	СообщениеЭДО.ЭлектронныйДокумент";
	
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаДанныхДокументовДляФормированияПредставления() Экспорт
	Возврат
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ЭлектронныйДокумент,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента КАК ВидДокумента,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента.ТипДокумента КАК ТипДокумента,
		|	ЭлектронныйДокументВходящийЭДО.НомерДокумента КАК НомерДокумента,
		|	ЭлектронныйДокументВходящийЭДО.ДатаДокумента КАК ДатаДокумента,
		|	ЭлектронныйДокументВходящийЭДО.ТипРегламента КАК ТипРегламента,
		|	ЭлектронныйДокументВходящийЭДО.ФорматОсновногоТитула КАК ФорматОсновногоТитула
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка В (&ЭлектронныеДокументы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка,
		|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента.ТипДокумента КАК ТипДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.НомерДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.ДатаДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.ТипРегламента КАК ТипРегламента,
		|	ЭлектронныйДокументИсходящийЭДО.ФорматОсновногоТитула
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка В (&ЭлектронныеДокументы)";
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаИменФайловОтправителейДокументов() Экспорт
	Возврат 
		"ВЫБРАТЬ
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла КАК ПолноеИмяФайла
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО СообщениеЭДО.ОсновнойФайл = ПрисоединенныеФайлы.Ссылка
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент В (&ЭлектронныеДокументы)
		|	И СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя)";
КонецФункции

#КонецОбласти

#Область ДополнительныеПоля

// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  Формат - Строка
// 
// Возвращаемое значение:
//  См. ФорматыЭДО.ВариантыЗаполненияПолейЭлектронныхДокументов
Функция ВариантыЗаполненияПолейЭлектронныхДокументов(ВидДокумента, Формат) Экспорт
	ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "ТипДокумента");
	Возврат ФорматыЭДО.ВариантыЗаполненияПолейЭлектронныхДокументов(ТипДокумента, Формат);
КонецФункции

// Возвращает доступные разделы дополнительных полей по формату.
// 
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  Формат - Строка
//
// Возвращаемое значение:
// 	См. ФорматыЭДО.РазделыДополнительныхПолейФорматаЭлектронногоДокумента
Функция РазделыДополнительныхПолейФорматаЭлектронногоДокумента(ВидДокумента, Формат) Экспорт
	ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "ТипДокумента");
	Возврат ФорматыЭДО.РазделыДополнительныхПолейФорматаЭлектронногоДокумента(ТипДокумента, Формат);
КонецФункции

// Параметры:
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  Формат - Строка
//  ТипРаздела - Строка - См. ЭлектронныеДокументыЭДОКлиентСервер.ТипыРазделовДополнительныхПолей
// 
// Возвращаемое значение:
//  Неопределено,Строка
Функция ЗапросКонструктораДополнительныхПолей(ВидДокумента, Формат, ТипРаздела) Экспорт
	ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "ТипДокумента");
	Возврат ФорматыЭДО.ЗапросКонструктораДополнительныхПолей(ТипДокумента, Формат, ТипРаздела);
КонецФункции

#КонецОбласти

#Область ОбработкаСобытий

// См. СинхронизацияЭДОСобытия.ПослеОтправкиОбъекта
Процедура ПослеОтправкиОбъекта(Объект, ТранспортныйКонтейнер, ОшибкаПередачи, КонтекстДиагностики, Отказ, ДополнительныеПараметры) Экспорт
	ЭлектронныеДокументыЭДОСлужебный.ПослеОтправкиОбъекта(Объект, ТранспортныйКонтейнер, ОшибкаПередачи,
		КонтекстДиагностики, Отказ, ДополнительныеПараметры);
КонецПроцедуры

// См. СинхронизацияЭДОСобытия.ПослеОтправкиОбъектов
Процедура ПослеОтправкиОбъектов(РезультатОтправки, КонтекстДиагностики) Экспорт
	ЭлектронныеДокументыЭДОСлужебный.ПослеОтправкиОбъектов(РезультатОтправки, КонтекстДиагностики);
КонецПроцедуры

// См. СинхронизацияЭДОСобытия.ПослеИзмененияСтатусаПриглашения
Процедура ПослеИзмененияСтатусаПриглашения(ИдентификаторОрганизации, ИдентификаторКонтрагента, Статус, КонтекстДиагностики) Экспорт
	ЭлектронныеДокументыЭДОСлужебный.ПослеИзмененияСтатусаПриглашения(ИдентификаторОрганизации,
		ИдентификаторКонтрагента, Статус, КонтекстДиагностики);
КонецПроцедуры

// См. СинхронизацияЭДОСобытия.ПриИсправленииОшибкиПередачи
Процедура ПриИсправленииОшибкиПередачи(ИдентификаторДокументооборота, КонтекстДиагностики) Экспорт
	ЭлектронныеДокументыЭДОСлужебный.ПриИсправленииОшибкиПередачи(ИдентификаторДокументооборота, КонтекстДиагностики);
КонецПроцедуры

// См. СинхронизацияЭДОСобытия.ПриИзмененииСтатусаТранспортногоКонтейнера
Процедура ПриИзмененииСтатусаТранспортногоКонтейнера(Контейнер, НовыйСтатус, КонтекстДиагностики) Экспорт
	ЭлектронныеДокументыЭДОСлужебный.ПриИзмененииСтатусаТранспортногоКонтейнера(Контейнер, НовыйСтатус,
		КонтекстДиагностики);
КонецПроцедуры

// См. НастройкиЭДОСобытия.ПередИзменениемИспользованияУтверждения
Процедура ПередИзменениемИспользованияУтверждения(ИспользоватьУтверждение, КонтекстДиагностики, Отказ) Экспорт
	ЭлектронныеДокументыЭДОСлужебный.ПередИзменениемИспользованияУтверждения(ИспользоватьУтверждение,
		КонтекстДиагностики, Отказ);
КонецПроцедуры

// Событие возникает при установки /снятии пометки удаления электронного документа.
// 
// Параметры:
// 	ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Ссылка на электронный документ.
// 	ПометкаУдаления - Булево - признак установки / снятия пометки.
// 	Отказ - Булево - признак отказа от установки пометки удаления.
Процедура ПриУстановкеПометкиУдаленияДокумента(ЭлектронныйДокумент, ПометкаУдаления, Отказ) Экспорт
	ЭлектронныеДокументыЭДОСлужебный.ПриУстановкеПометкиУдаленияДокумента(ЭлектронныйДокумент, ПометкаУдаления, Отказ);
КонецПроцедуры

// Событие возникает перед непосредственным удалением электронного документа из базы данных.
// 
// Параметры:
// 	Объект - ДокументОбъект.ЭлектронныйДокументВходящийЭДО,ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
// 	Отказ - Булево - признак отказа от удаления электронного документа.
Процедура ПередУдалениемДокумента(Объект, Отказ) Экспорт
	
	Если Объект.ЭтоОблачныйЭДО Тогда
		МодульЭлектронныеДокументыЭДОИнтеграцияОблака = ОбщегоНазначения.ОбщийМодуль(
			"ЭлектронныеДокументыЭДОИнтеграцияОблака");
		МодульЭлектронныеДокументыЭДОИнтеграцияОблака.ПередУдалениемДокумента(Объект, Отказ);
	КонецЕсли;
	
	ЭлектронныеДокументыЭДОСлужебный.ПередУдалениемДокумента(Объект.Ссылка, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область Интеграция

#Область РаботаСФайлами

// См. РаботаСФайламиПереопределяемый.ПриОпределенииНастроек.
//
Процедура ПриОпределенииНастроекФайлов(Настройки) Экспорт
	
	Настройки.НеОчищатьФайлы.Добавить(Метаданные.Справочники["СообщениеЭДОПрисоединенныеФайлы"]);
	Настройки.НеСинхронизироватьФайлы.Добавить(Метаданные.Справочники["СообщениеЭДОПрисоединенныеФайлы"]);
	Настройки.НеВыводитьВИнтерфейс.Добавить(Метаданные.Справочники["СообщениеЭДОПрисоединенныеФайлы"]);

КонецПроцедуры

// Параметры:
//  ИдентификаторКонтрагента - Строка
//  ИдентификаторОрганизации - Строка
//  Данные - Строка - адрес временного хранилища
//         - ДвоичныеДанные
//
// Возвращаемое значение:
//  см. ПакетыДокументовЭДОКлиентСервер.НовыйРезультатПроверкиПревышения
Функция ПроверкаПревышенияМаксимальногоРазмераФайла(ИдентификаторКонтрагента, ИдентификаторОрганизации, Данные) Экспорт
	
	ИдентификаторОператораКонтрагента = УчетныеЗаписиЭДОКлиентСервер.ИдентификаторОператора(ИдентификаторКонтрагента);
	ИдентификаторОператораОрганизации = УчетныеЗаписиЭДОКлиентСервер.ИдентификаторОператора(ИдентификаторОрганизации);
	ОграниченияОбъемаПакетаДокументовУчастников = ПакетыДокументовЭДО.НовыеОграниченияОбъемаПакетаДокументовУчастников();
	ОграниченияОбъемаПакетаДокументовУчастников.ПоКонтрагенту =
		СервисНастроекЭДО.ОграниченияОбъемаПакетаДокументов(ИдентификаторОператораКонтрагента);
	ОграниченияОбъемаПакетаДокументовУчастников.ПоОрганизации =
		СервисНастроекЭДО.ОграниченияОбъемаПакетаДокументов(ИдентификаторОператораОрганизации);
	ОбъемПакетаДокументов = ПакетыДокументовЭДОКлиентСервер.НовыйОбъемПакетаДокументов();
	РазмерФайла = ?(ТипЗнч(Данные) = Тип("Строка"), ПолучитьИзВременногоХранилища(Данные).Размер(), Данные.Размер());
	РезультатПроверкиПревышения = ПакетыДокументовЭДОКлиентСервер.ПроверкаПревышенияМаксимальногоРазмераПакета(
		ОграниченияОбъемаПакетаДокументовУчастников, ОбъемПакетаДокументов, РазмерФайла);
	
	Возврат РезультатПроверкиПревышения;
	
КонецФункции

#КонецОбласти

#Область УправлениеДоступом

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.ЭлектронныйДокументВходящийЭДО, Истина);
	Списки.Вставить(Метаданные.Документы.ЭлектронныйДокументИсходящийЭДО, Истина);
	Списки.Вставить(Метаданные.Документы.СообщениеЭДО, Истина);
	Списки.Вставить(Метаданные.Справочники.СообщениеЭДОПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.КэшВизуализацииДокументовЭДОПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ЖурналДействийПоЭДО, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СостоянияДокументовЭДО, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.КэшВизуализацииДокументовЭДО, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ОчередьЗапросовВизуализацииЭДО, Истина);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Документ.ЭлектронныйДокументВходящийЭДО.Чтение.Организации
	|Документ.ЭлектронныйДокументВходящийЭДО.Изменение.Организации
	|Документ.ЭлектронныйДокументИсходящийЭДО.Чтение.Организации
	|Документ.ЭлектронныйДокументИсходящийЭДО.Изменение.Организации
	|Документ.СообщениеЭДО.Чтение.Организации
	|Документ.СообщениеЭДО.Изменение.Организации
	|Справочник.СообщениеЭДОПрисоединенныеФайлы.Чтение.Организации
	|Справочник.СообщениеЭДОПрисоединенныеФайлы.Изменение.Организации
	|Справочник.КэшВизуализацииДокументовЭДОПрисоединенныеФайлы.Чтение.Организации
	|Справочник.КэшВизуализацииДокументовЭДОПрисоединенныеФайлы.Изменение.Организации
	|РегистрСведений.ЖурналДействийПоЭДО.Чтение.Организации
	|РегистрСведений.ЖурналДействийПоЭДО.Изменение.Организации
	|РегистрСведений.СостоянияДокументовЭДО.Чтение.Организации
	|РегистрСведений.СостоянияДокументовЭДО.Изменение.Организации
	|РегистрСведений.КэшВизуализацииДокументовЭДО.Чтение.Организации
	|РегистрСведений.КэшВизуализацииДокументовЭДО.Изменение.Организации
	|РегистрСведений.ОчередьЗапросовВизуализацииЭДО.Чтение.Организации
	|РегистрСведений.ОчередьЗапросовВизуализацииЭДО.Изменение.Организации
	|";
	
КонецПроцедуры

#КонецОбласти

#Область ПоставляемыеДанные

// См. ПоставляемыеДанныеПереопределяемый.ПолучитьОбработчикиПоставляемыхДанных 
Процедура ПриРегистрацииОбработчиковПоставляемыхДанных(Обработчики) Экспорт
	
	ФорматыЭДО.ПриРегистрацииОбработчиковПоставляемыхДанных(Обработчики);
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияБРОЭДО

// Возвращает данные файлов основного титула, ответного титула и подписей к ним 
// для указанных объектов учета с завершенным документооборотом. Данные формируются только для документов,
// типы которых определены в методе ЭлектронныеДокументыЭДО.ТипыДокументовЭДОВыгрузкиДляФНС.
//
// Параметры:
//  ОбъектыУчета - Массив из ЛюбаяСсылка - ссылки на объекты учета.
//  УникальныйИдентификатор - УникальныйИдентификатор - для данных помещаемых во временное хранилище.
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Данные файлов по объектам учета:
//    * Ключ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объект учета, переданный в параметре ОбъектыУчета.
//    * Значение - Массив из Структура - Данные файлов:
//     ** Тип - Строка - тип файла. Возможные значения "ОсновнойТитул", "ОтветныйТитул",
//                       "ОсновнаяПодпись", "ОтветнаяПодпись".
//     ** КНД - Строка - КНД документа. Пустая строка для типов "ОсновнаяПодпись" и "ОтветнаяПодпись". 
//     ** Данные - Строка - адрес во временном хранилище с двоичными данными файла.
//     ** Имя - Строка - имя файла с расширением.
//
Функция ДанныеФайловЭлектронныхДокументовДляВыгрузкиВФНС(Знач ОбъектыУчета, Знач УникальныйИдентификатор) Экспорт
	
	ДанныеФайловПоОбъектамУчета = Новый Соответствие;
	
	ТипыДокументовОтбор = ТипыДокументовЭДОВыгрузкиДляФНС();
	
	ТипыЭлементовРегламентаОтбор = Новый Массив;
	ТипыЭлементовРегламентаОтбор.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	ТипыЭлементовРегламентаОтбор.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);
	ТипыЭлементовРегламентаОтбор.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки);
	
	РезультатЗапроса = РезультатЗапросаДанныхДляВыгрузкиВФНС(ОбъектыУчета, ТипыДокументовОтбор, ТипыЭлементовРегламентаОтбор);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ДанныеФайловПоОбъектамУчета;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КНД = ФорматыЭДО.КНДПоИмениФайлаФНС(Выборка.ПолноеИмяФайла);
		Если ПустаяСтрока(КНД) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеФайлов = ДанныеФайловПоОбъектамУчета[Выборка.ОбъектУчета];
		Если ДанныеФайлов = Неопределено Тогда
			ДанныеФайлов = Новый Массив;
			ДанныеФайловПоОбъектамУчета.Вставить(Выборка.ОбъектУчета, ДанныеФайлов);
		КонецЕсли;
		
		ДанныеФайла = НовыеДанныеФайлаДляВыгрузкиВФНС();
		
		Если Выборка.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			ДанныеФайла.Тип = "ОсновнойТитул";
			ТипПодписи = "ОсновнаяПодпись";
		Иначе
			ДанныеФайла.Тип = "ОтветныйТитул";
			ТипПодписи = "ОтветнаяПодпись";
		КонецЕсли;
		
		ДанныеФайла.КНД = КНД;
		ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.Файл);
		ДанныеФайла.Данные = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
		ДанныеФайла.Имя = Выборка.ПолноеИмяФайла;
		ДанныеФайлов.Добавить(ДанныеФайла);
		
		УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(Выборка.Файл);
		Для Каждого СвойстваПодписи Из УстановленныеПодписи Цикл
			ДанныеФайлов = ДанныеФайловПоОбъектамУчета[Выборка.ОбъектУчета];
			ДанныеФайла = НовыеДанныеФайлаДляВыгрузкиВФНС();
			ДанныеФайла.КНД = КНД;
			ДанныеФайла.Тип = ТипПодписи;
			ДанныеФайла.Данные = ПоместитьВоВременноеХранилище(СвойстваПодписи.Подпись, УникальныйИдентификатор);
			Если ЗначениеЗаполнено(СвойстваПодписи.ИмяФайлаПодписи) Тогда
				ДанныеФайла.Имя = СвойстваПодписи.ИмяФайлаПодписи;
			Иначе
				ДанныеФайла.Имя = ЭлектронныеДокументыЭДОСлужебный.ИмяФайлаПодписи(
					Выборка.ПолноеИмяФайла, СвойстваПодписи.ПорядковыйНомер);
			КонецЕсли;
			ДанныеФайлов.Добавить(ДанныеФайла);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеФайловПоОбъектамУчета;
	
КонецФункции

// Возвращает данные файлов информации отправителя и подписей к ним для указанных объектов учета с завершенным
// документооборотом. Данные формируются только для документов, типы которых определены в методе 
// ЭлектронныеДокументыЭДО.ТипыДокументовЭДОВыгрузкиДляФНС. Из выгрузки исключаются документы в формате PDF/A-3,
// т.к. такие документы передаются в ФНС как формализованные (в случае если это Договорный документ), либо как сканы.
//
// Параметры:
//  ОбъектыУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылки на объекты учета
//  УникальныйИдентификатор - УникальныйИдентификатор - для данных помещаемых во временное хранилище
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объект учета, переданный в параметре ОбъектыУчета.
//    * Значение - Массив Из См. НовыеДанныеФайловНеформализованногоДокументаPDFДляФНС
//
Функция ДанныеФайловНеформализованныхДокументовPDFДляВыгрузкиВФНС(ОбъектыУчета, УникальныйИдентификатор) Экспорт
	
	ДанныеФайловПоОбъектамУчета = Новый Соответствие;
	
	ТипыДокументовОтбор = ТипыДокументовЭДОВыгрузкиДляФНС();
	ТипыЭлементовРегламентаОтбор = Новый Массив;
	ТипыЭлементовРегламентаОтбор.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	ТипРегламентаОтбор = Перечисления.ТипыРегламентовЭДО.Неформализованный;
	
	РезультатЗапроса = РезультатЗапросаДанныхДляВыгрузкиВФНС(ОбъектыУчета, ТипыДокументовОтбор, 
		ТипыЭлементовРегламентаОтбор, ТипРегламентаОтбор);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ДанныеФайловПоОбъектамУчета;
	КонецЕсли;
	
	Таблица = РезультатЗапроса.Выгрузить();
	ФайлыДляВыгрузкиВФНС = Таблица.ВыгрузитьКолонку("Файл");
	ДвоичныеДанныеФайлов = РаботаСФайлами.ДвоичныеДанныеФайлов(ФайлыДляВыгрузкиВФНС);
	Для Каждого Строка Из Таблица Цикл

		ДанныеФайловОбъектаУчета = ДанныеФайловПоОбъектамУчета[Строка.ОбъектУчета];
		Если ДанныеФайловОбъектаУчета = Неопределено Тогда
			ДанныеФайловОбъектаУчета = Новый Массив;
			ДанныеФайловПоОбъектамУчета.Вставить(Строка.ОбъектУчета, ДанныеФайловОбъектаУчета);
		КонецЕсли;

		ДвоичныеДанныеФайла = ДвоичныеДанныеФайлов[Строка.Файл];
		РазмерФайла = ДвоичныеДанныеФайла.Размер();
		СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Строка.ПолноеИмяФайла);
		СсылкаНаДвоичныеДанныеФайла = 
			ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
		
		Если Не ДокументПодлежитВыгрузкеВФНСКакНеформализованныйPDF(Строка.ТипДокумента, СсылкаНаДвоичныеДанныеФайла,
			Прав(СтруктураИмениФайла.Расширение, 3)) Тогда
			Продолжить;
		КонецЕсли;
		
		УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(Строка.Файл);
		КоличествоПодписей = УстановленныеПодписи.Количество();
			
		Для Каждого ДанныеПодписи Из УстановленныеПодписи Цикл
			
			ДанныеФайловДокумента = НовыеДанныеФайловНеформализованногоДокументаPDFДляФНС();
			
			Если КоличествоПодписей > 1 Тогда
				ИмяФайла = СтрШаблон("%1_%2%3", СтруктураИмениФайла.ИмяБезРасширения, ДанныеПодписи.ПорядковыйНомер, 
					СтруктураИмениФайла.Расширение);
			Иначе
				ИмяФайла = Строка.ПолноеИмяФайла;
			КонецЕсли;
		
			ДанныеФайловДокумента.Имя = ИмяФайла;
			ДанныеФайловДокумента.Размер = РазмерФайла;
			ДанныеФайловДокумента.АдресДанных = СсылкаНаДвоичныеДанныеФайла;
			
			ДанныеФайловДокумента.ИмяФайлаПодписи = СтрШаблон("%1SGN.sgn", ИмяФайла);
			ДанныеФайловДокумента.АдресФайлаПодписи = ПоместитьВоВременноеХранилище(ДанныеПодписи.Подпись, 
				УникальныйИдентификатор);
				
			ДанныеФайловОбъектаУчета.Добавить(ДанныеФайловДокумента);
		
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеФайловПоОбъектамУчета;
	
КонецФункции

// Возвращает свойства основного титула для объектов учета с завершенным документооборотом.
// Данные формируются только для документов,
// типы которых определены в методе ЭлектронныеДокументыЭДО.ТипыДокументовЭДОВыгрузкиДляФНС.
//
// Параметры:
//  ОбъектыУчета - Массив из ЛюбаяСсылка - ссылки на объекты учета.
//
// Возвращаемое значение:
//  ТаблицаЗначений - свойства документов. Колонки:
//    * ОбъектУчета - ДокументСсылка - объект учета, переданный в параметре ОбъектыУчета.
//    * Тип - ПеречислениеСсылка.ТипыДокументовЭДО - тип документа.
//    * КНД - Строка - КНД основного титула.  
//
Функция СвойстваЭлектронныхДокументовДляВыгрузкиВФНС(Знач ОбъектыУчета) Экспорт
	
	СвойстваДокументов = Новый ТаблицаЗначений;
	СвойстваДокументов.Колонки.Добавить("ОбъектУчета", ИнтеграцияЭДО.ОписаниеТиповОснованийЭлектронныхДокументов());
	СвойстваДокументов.Колонки.Добавить("Тип", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовЭДО"));
	СвойстваДокументов.Колонки.Добавить("КНД", Новый ОписаниеТипов("Строка"));
	
	ТипыДокументовОтбор = ТипыДокументовЭДОВыгрузкиДляФНС();
	
	ТипыЭлементовРегламентаОтбор = Новый Массив;
	ТипыЭлементовРегламентаОтбор.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	
	РезультатЗапроса = РезультатЗапросаДанныхДляВыгрузкиВФНС(ОбъектыУчета, ТипыДокументовОтбор, ТипыЭлементовРегламентаОтбор);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СвойстваДокументов;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КНД = ФорматыЭДО.КНДПоИмениФайлаФНС(Выборка.ПолноеИмяФайла);
		Если ПустаяСтрока(КНД) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СвойстваДокументов.Добавить();
		НоваяСтрока.ОбъектУчета = Выборка.ОбъектУчета;
		НоваяСтрока.Тип = Выборка.ТипДокумента;
		НоваяСтрока.КНД = КНД;
		
	КонецЦикла;
	
	Возврат СвойстваДокументов;
	
КонецФункции

// Возвращает строку во временном хранилище с двоичными данными штампа ЭП сообщения ЭДО.
// 
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
// 
// Возвращаемое значение:
//  см. ВизуализацияЭДОСлужебный.ДанныеШтампаЭППоДаннымСообщенияЭДО
//
Функция ДанныеШтампаЭППоДаннымСообщенияЭДО(Сообщение) Экспорт
	
	Возврат ВизуализацияЭДОСлужебный.ДанныеШтампаЭППоДаннымСообщенияЭДО(Сообщение);
	
КонецФункции

// Возвращает типы документов ЭДО, подходящих для выгрузки для предоставления в ФНС.
//
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.ТипыДокументовЭДО - Типы документов ЭДО, подходящие для выгрузки в ФНС
//
Функция ТипыДокументовЭДОВыгрузкиДляФНС() Экспорт

	ТипыДокументов = Новый Массив;
	
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.СчетФактура);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.УПД);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.УКД);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктОРасхождениях);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктСверки);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктПриемкиСтроительныхРаботУслуг);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ДоговорныйДокумент);
	
	Возврат ТипыДокументов;

КонецФункции

#КонецОбласти

#Область ОбновлениеКонфигурации

// См. ЭлектронноеВзаимодействие.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

#Область Версия_1_9_1

#Область Справочники_СообщениеЭДОПрисоединенныеФайлы_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.3.49";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("02be62d0-c9e3-4f2b-a938-7587178a649c");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.ВидыДокументовЭДО,"
		+ "Справочник.СообщениеЭДОПрисоединенныеФайлы,"
		+ "Документ.СообщениеЭДО,"
		+ "РегистрСведений.СостояниеПодписанияЭД";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ВидыДокументовЭДО,"
		+ "Документ.СообщениеЭДО,"
		+ "Справочник.СообщениеЭДОПрисоединенныеФайлы,"
		+ "РегистрСведений.СостояниеПодписанияЭД";
	Обработчик.БлокируемыеОбъекты = "Справочник.ВидыДокументовЭДО,"
		+ "Справочник.СообщениеЭДОПрисоединенныеФайлы";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: изменение параметров справочника Присоединенные файлы (Электронные документы).
		|Настройка и обмен электронными документами с контрагентами временно невозможен.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументВходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументИсходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СостояниеПодписанияЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ЭлектронноеВзаимодействиеОбработчикиОбновления.Документы_СообщениеОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти


#Область Документы_ЭлектронныйДокументВходящий_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.3.49";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "Документы.ЭлектронныйДокументВходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dcafb44d-22d0-431a-aa23-995aa699a07b");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЭлектронныйДокументВходящийЭДО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЭлектронныйДокументВходящийЭДО,"
		+ "РегистрСведений.УдалитьЖурналСобытийЭД,"
		+ "РегистрСведений.ПростыеЭлектронныеПодписи,"
		+ "РегистрСведений.ЭлектронныеПодписи,"
		+ "РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами,"
		+ "Справочник.УдалитьСоглашенияОбИспользованииЭД,"
		+ "Справочник.СообщениеЭДОПрисоединенныеФайлы,"
		+ "Документ.СообщениеЭДО";
	Обработчик.ИзменяемыеОбъекты = "Документ.ЭлектронныйДокументВходящийЭДО,"
		+ "РегистрСведений.ЖурналДействийПоЭДО,"
		+ "РегистрСведений.СостоянияДокументовЭДО";
	Обработчик.БлокируемыеОбъекты = "Документ.ЭлектронныйДокументВходящийЭДО";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление входящих электронных документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РаботаСФайлами.ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
#КонецОбласти

#Область Документы_ЭлектронныйДокументИсходящийЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.3.49";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "Документы.ЭлектронныйДокументИсходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a98bca9f-e5d2-42b9-9f0f-29a1aa2d4108");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЭлектронныйДокументИсходящийЭДО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЭлектронныйДокументИсходящийЭДО,"
		+ "РегистрСведений.УдалитьЖурналСобытийЭД,"
		+ "РегистрСведений.ОператорыЭДО,"
		+ "РегистрСведений.ПростыеЭлектронныеПодписи,"
		+ "РегистрСведений.ЭлектронныеПодписи,"
		+ "РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами,"
		+ "Справочник.УдалитьПрофилиНастроекЭДО,"
		+ "Справочник.УдалитьСоглашенияОбИспользованииЭД,"
		+ "Справочник.СообщениеЭДОПрисоединенныеФайлы,"
		+ "Документ.СообщениеЭДО";
	Обработчик.ИзменяемыеОбъекты = "Документ.ЭлектронныйДокументИсходящийЭДО,"
		+ "РегистрСведений.ЖурналДействийПоЭДО,"
		+ "РегистрСведений.СостоянияДокументовЭДО";
	Обработчик.БлокируемыеОбъекты = "Документ.ЭлектронныйДокументИсходящийЭДО";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление исходящих электронных документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РаботаСФайлами.ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументВходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ОператорыЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область Версия_1_9_9

#Область Справочники_ВидыДокументовЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.10.13";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "Справочники.ВидыДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("009a7d70-3a90-43f9-87b2-10a776b5298a");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ВидыДокументовЭДО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";

	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ВидыДокументовЭДО.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ВидыДокументовЭДО.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ВидыДокументовЭДО.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: изменение параметров справочника Виды документов ЭДО.
		|Настройка и обмен электронными документами с контрагентами временно невозможен.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументВходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументИсходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлассификаторПолномочийФНСМЧД002.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлассификаторПолномочийМЧД003.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СвязьВидовИФорматовДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
#КонецОбласти

#Область РегистрыСведений_СвязьВидовИФорматовДокументовЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.13.33";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "РегистрыСведений.СвязьВидовИФорматовДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("21bf758a-3393-42d6-9f78-d9e498236c7c");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";

	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.СвязьВидовИФорматовДокументовЭДО.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.ФорматыЭлектронныхДокументов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ВидыДокументовЭДО.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СвязьВидовИФорматовДокументовЭДО.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.ВидыДокументовЭДО.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

	Обработчик.Комментарий = 
		НСтр("ru = '1С:Обмен с контрагентами: обновление связей видов и форматов электронных документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ФорматыЭлектронныхДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = 
		"РегистрыСведений.СвязьВидовИФорматовДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0824dea2-1398-4cfd-96f9-a504682db8ed");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ПроцедураПроверки = "";
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.СвязьВидовИФорматовДокументовЭДО.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.ФорматыЭлектронныхДокументов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ВидыДокументовЭДО.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СвязьВидовИФорматовДокументовЭДО.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.ВидыДокументовЭДО.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = 
		НСтр("ru = '1С:Обмен с контрагентами: обновление связей видов и форматов электронных документов (начальное заполнение).'");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ФорматыЭлектронныхДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение";
	НоваяСтрока.Порядок = "После";
	
#КонецОбласти

#Область РегистрыСведений_ФорматыЭлектронныхДокументов_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.13.33";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "РегистрыСведений.ФорматыЭлектронныхДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e1d44da2-5bec-4bd0-afa4-232aeed30114");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.ФорматыЭлектронныхДокументов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ФорматыЭлектронныхДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление форматов электронных документов.'");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СвязьВидовИФорматовДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "РегистрыСведений.ФорматыЭлектронныхДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3949552a-560d-4633-b79a-be1462f0258e");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ПроцедураПроверки = "";
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.ФорматыЭлектронныхДокументов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ФорматыЭлектронныхДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление форматов электронных документов (начальное заполнение).'");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СвязьВидовИФорматовДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение";
	НоваяСтрока.Порядок = "До";
	
#КонецОбласти

#Область РегистрыСведений_СостоянияДокументовЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.9.33";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "РегистрыСведений.СостоянияДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0e5186a5-67a5-409f-88ff-a3578a30e7aa");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СостоянияДокументовЭДО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.СостоянияДокументовЭДО,
		|Документ.СообщениеЭДО";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СостоянияДокументовЭДО";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.СостоянияДокументовЭДО";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление состояний электронных документов.
		|Настройка и обмен электронными документами с контрагентами временно невозможен.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументВходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументИсходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
#КонецОбласти

#Область РегистрыСведений_ЖурналДействийПоЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.9.33";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "РегистрыСведений.ЖурналДействийПоЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2e3e9634-220c-4d09-b1a1-4b8de94146fc");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ЖурналДействийПоЭДО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.ЖурналДействийПоЭДО,
		|Документ.СообщениеЭДО";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ЖурналДействийПоЭДО";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.ЖурналДействийПоЭДО";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление состояний электронных документов в журнале действий по ЭДО.
		|обмен электронными документами с контрагентами временно невозможен.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументВходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументИсходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
#КонецОбласти

#КонецОбласти

#КонецОбласти
	
	ФорматыЭДО.ПриДобавленииОбработчиковОбновления(Обработчики);	 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Обновление

// Параметры:
//  ТипДокументаДоОбновления - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыДокументовЭДО
Функция Обновление_ТипДокументаПоНовойАрхитектуре(ТипДокументаДоОбновления) Экспорт
	
	ТипДокумента = ТипДокументаДоОбновления;
	Если ТипДокументаДоОбновления = Перечисления.ТипыДокументовЭДО.УдалитьАктЗаказчик
		ИЛИ ТипДокументаДоОбновления = Перечисления.ТипыДокументовЭДО.УдалитьАктИсполнитель Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.ТипыДокументовЭДО.УдалитьСоглашениеОбИзмененииСтоимостиПолучатель Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.ТипыДокументовЭДО.УдалитьТОРГ12
		ИЛИ ТипДокументаДоОбновления = Перечисления.ТипыДокументовЭДО.УдалитьТОРГ12Покупатель Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная;
	КонецЕсли;
	
	Возврат ТипДокумента;
	
КонецФункции

// Параметры:
//  ВыбранныеДанные - См. ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//  * Объект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Сообщение - ДокументСсылка.СообщениеЭДО
Функция Обновление_ВыборкаСообщенийДляЗаменыОбъектовВСостоянииПодписания(ВыбранныеДанные) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВыбранныеДанные.Объект КАК Объект
		|ПОМЕСТИТЬ ВыбранныеДанные
		|ИЗ
		|	&ВыбранныеДанные КАК ВыбранныеДанные
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыбранныеДанные.Объект КАК Объект,
		|	ПрисоединенныеФайлы.ВладелецФайла КАК Сообщение
		|ИЗ
		|	ВыбранныеДанные КАК ВыбранныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО ВыбранныеДанные.Объект = ПрисоединенныеФайлы.Ссылка";
	Запрос.УстановитьПараметр("ВыбранныеДанные", ВыбранныеДанные);
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

// Параметры:
//  СвойстваСообщения - Структура:
//  * Ссылка - ДокументСсылка.СообщениеЭДО
//  * Состояние - ПеречислениеСсылка.СостоянияСообщенийЭДО
Процедура Обновление_СформироватьМаршрутПодписания(СвойстваСообщения) Экспорт
	ЭлектронныеДокументыЭДОСлужебный.СформироватьМаршрутПодписания(СвойстваСообщения);
КонецПроцедуры

#КонецОбласти

#Область ОбменДанными

// Возвращает сводные состояния на нашей стороне и на стороне контрагента в терминах универсального формата.
// 
// Параметры:
//  ВерсияФормата - Строка - версия универсального формата (КомпонентыОбмена.ВерсияФорматаОбмена).
//  СостояниеЭДО  - ПеречислениеСсылка.СостоянияДокументовЭДО
// 
// Возвращаемое значение:
//  Структура - сводные состояния:
//  * НаНашейСтороне - Строка - тип состояния обмена ЭД.
//  * НаСторонеКонтрагента - Строка - тип состояния обмена ЭД.
//
Функция ТипыСводныхСостоянийЭДОУниверсальногоФормата(ВерсияФормата, СостояниеЭДО) Экспорт
	
	СводныеСостояния = Новый Структура;
	СводныеСостояния.Вставить("НаНашейСтороне", "");
	СводныеСостояния.Вставить("НаСторонеКонтрагента", "");
	
	Если СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.Аннулирован
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением Тогда
		
		СводныеСостояния.НаНашейСтороне = "ВсеВыполнено";
		СводныеСостояния.НаСторонеКонтрагента = "ВсеВыполнено";
		
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения Тогда
		
		СводныеСостояния.НаНашейСтороне = "ДействийНеТребуется";
		СводныеСостояния.НаСторонеКонтрагента = "ДействийНеТребуется";
		
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение Тогда
		
		СводныеСостояния.НаНашейСтороне = "ДействийНеТребуется";
		СводныеСостояния.НаСторонеКонтрагента = "ТребуютсяДействия";
		
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление Тогда
		
		СводныеСостояния.НаНашейСтороне = "Отклонен";
		СводныеСостояния.НаСторонеКонтрагента = "ТребуютсяДействия";
		
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора Тогда
		СводныеСостояния.НаНашейСтороне = "ДействийНеТребуется";
		СводныеСостояния.НаСторонеКонтрагента = "ДействийНеТребуется";
		
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеПолучен
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПовторнаяОтправка
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи Тогда
		
		СводныеСостояния.НаНашейСтороне = "ТребуютсяДействия";
		СводныеСостояния.НаСторонеКонтрагента = "ДействийНеТребуется";
		
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеПоОтклонению
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещенияПоОтклонению Тогда
		
		СводныеСостояния.НаНашейСтороне = "ТребуютсяДействия";
		СводныеСостояния.НаСторонеКонтрагента = "Отклонен"
		
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения Тогда
		
		СводныеСостояния.НаНашейСтороне = "ТребуютсяДействия";
		СводныеСостояния.НаСторонеКонтрагента = "ДействийНеТребуется";
		
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаПриглашения Тогда
		
		СводныеСостояния.НаНашейСтороне = "ПригласитьКОбмену";
		СводныеСостояния.НаСторонеКонтрагента = "ТребуютсяДействия";
		
	КонецЕсли;
	
	Возврат СводныеСостояния;
	
КонецФункции

// Возвращает состояние электронного документа в терминах универсального формата.
// 
// Параметры:
//  ВерсияФормата - Строка - версия универсального формата (КомпонентыОбмена.ВерсияФорматаОбмена).
//  СостояниеЭДО  - ПеречислениеСсылка.СостоянияДокументовЭДО
// 
// Возвращаемое значение:
//  Строка - тип состояния электронного документа.
//
Функция ТипСостоянияЭлектронногоДокументаУниверсальногоФормата(ВерсияФормата, СостояниеЭДО) Экспорт
	
	Если ВерсияФорматаЧислом(ВерсияФормата) >= ВерсияФорматаЧислом("1.15") Тогда

		Возврат ТипСостоянияЭлектронногоДокументаУниверсальногоФормата_1_15(СостояниеЭДО);

	Иначе

		Возврат ТипСостоянияЭлектронногоДокументаУниверсальногоФормата_1_10(СостояниеЭДО);

	КонецЕсли;
	
КонецФункции

// Возвращает состояние по значению типа состояния электронного документа универсального формата.
// 
// Параметры:
//  ВерсияФормата - Строка - версия универсального формата (КомпонентыОбмена.ВерсияФорматаОбмена).
//  ТипСостояния  - Строка - тип состояния электронного документа универсального формата.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияДокументовЭДО
//
Функция СостояниеЭДОПоЗначениюУниверсальногоФормата(ВерсияФормата, ТипСостояния) Экспорт
	
	Если ВерсияФорматаЧислом(ВерсияФормата) >= ВерсияФорматаЧислом("1.15") Тогда

		Возврат СостояниеЭДОПоЗначениюУниверсальногоФормата_1_15(ТипСостояния);

	Иначе

		Возврат СостояниеЭДОПоЗначениюУниверсальногоФормата_1_10(ТипСостояния);

	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область КомандыЭДО

// См. ПодключаемыеКомандыЭДОСлужебный.ВыгрузкаДанныхВФайлДоступнаДляОбъектов
Функция ВыгрузкаДанныхВФайлДоступнаДляОбъектов(МассивОбъектов) Экспорт
	
	Возврат ПодключаемыеКомандыЭДОСлужебный.ВыгрузкаДанныхВФайлДоступнаДляОбъектов(МассивОбъектов);
	
КонецФункции

#КонецОбласти

#Область МашиночитаемыеДоверенности

// Возвращает результат проверки на необходимость наличия доверенности на подпись 
//
// Параметры:
//  Доверитель  - ОпределяемыйТип.УчастникЭДО
//  Сертификат  - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования 
//
// Возвращаемое значение:
//  Булево - Истина, если для подписи требуется МЧД
//
Функция ТребуетсяМашиночитаемаяДоверенность(Доверитель, Сертификат) Экспорт
	
	СведенияДоверителя = ИнтеграцияЭДО.ДанныеЮрФизЛица(Доверитель);
	
	ДанныеСертификата = КриптографияБЭД.ДвоичныеДанныеСертификата(Сертификат);
	
	Возврат ЭлектронныеДокументыЭДОСлужебный.ТребуетсяМашиночитаемаяДоверенностьПоДаннымДокумента(
		СведенияДоверителя.ИНН, ДанныеСертификата);
	
КонецФункции

// Параметры:
//  ФайлСообщения - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ПорядковыйНомер - Неопределено
//                  - Число
// 
// Возвращаемое значение:
//  Массив из см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеДанныеПодписиСУчетомДоверенности
Функция УстановленныеПодписиФайлаСУчетомДоверенностей(ФайлСообщения, ПорядковыйНомер = Неопределено) Экспорт
	
	УстановленныеПодписи = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ФайлСообщения) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ХешиПодписей = Новый Массив;
	ДанныеПодписейПоХешам = Новый Соответствие;
	
	УсиленныеКвалифицированныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ФайлСообщения, ПорядковыйНомер);
	СведенияОПодписанномОбъекте = СведенияОПодписанномОбъекте(ФайлСообщения);
	
	Для Каждого СвойстваПодписи Из УсиленныеКвалифицированныеПодписи Цикл
		
		ВходящаяПодпись = ДоверительИНаправлениеПодписи(
			СведенияОПодписанномОбъекте, СвойстваПодписи, УсиленныеКвалифицированныеПодписи.Количество()).ЭтоВходящаяПодпись;
		
		УстановленнаяПодпись = ЭлектронныеДокументыЭДОСлужебный.НовыеДанныеПодписи();
		ЗаполнитьЗначенияСвойств(УстановленнаяПодпись, СвойстваПодписи);
		УстановленнаяПодпись.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная;
		УстановленнаяПодпись.Владелец = СвойстваПодписи.КомуВыданСертификат;
		УстановленнаяПодпись.ХешПодписи = КриптографияБЭД.ХешПодписи(СвойстваПодписи.Подпись);
		УстановленнаяПодпись.ВходящаяПодпись = ВходящаяПодпись;
		
		Если СвойстваПодписи.ТипПодписи = Перечисления.ТипыПодписиКриптографии.СМеткойДоверенногоВремениCAdEST Тогда
			РасширенныеСвойстваПодписи = ЭлектроннаяПодпись.СвойстваПодписи(СвойстваПодписи.Подпись);
			УстановленнаяПодпись.ДатаПодписи = РасширенныеСвойстваПодписи.ДатаПодписиИзМетки;
		КонецЕсли;
		
		ДанныеПодписи = ЭлектронныеДокументыЭДОКлиентСервер.НовыеДанныеПодписиСУчетомДоверенности();
		ДанныеПодписи.СвойстваПодписи = УстановленнаяПодпись;
		ДанныеПодписи.ПодписанныйОбъект = ФайлСообщения;
		УстановленныеПодписи.Добавить(ДанныеПодписи);
		
		ХешиПодписей.Добавить(УстановленнаяПодпись.ХешПодписи);
		ДанныеПодписейПоХешам.Вставить(УстановленнаяПодпись.ХешПодписи, ДанныеПодписи);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ХешиПодписей) Тогда
		
		РезультатыПроверокПодписей = МашиночитаемыеДоверенности.РезультатыПроверокПодписей(ФайлСообщения, ХешиПодписей);
		СвойстваДоверенностей = ЭлектронныеДокументыЭДОСлужебный.СвойстваДоверенностейИзРезультатовПроверокПодписей(
			РезультатыПроверокПодписей);
		
		Для Каждого ХешПодписи Из ХешиПодписей Цикл
			
			РезультатПроверки = РезультатыПроверокПодписей[ХешПодписи];
			Если РезультатПроверки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеПодписи = ДанныеПодписейПоХешам[ХешПодписи];
			Если ДанныеПодписи = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПроверки.ТребуетсяДоверенность = Истина;
			ДанныеПодписи.ЭтоПодписьПоДоверенности = Истина;
			ДанныеПодписи.СвойстваДоверенности = СвойстваДоверенностей[РезультатПроверки.Доверенность];
			ДанныеПодписи.РезультатПроверкиПоМЧД = РезультатПроверки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПростыеПодписи = ЭлектронныеДокументыЭДОСлужебный.УстановленныеПростыеПодписи(ФайлСообщения);
	Для Каждого СвойстваПодписи Из ПростыеПодписи Цикл
		
		УстановленнаяПодпись = ЭлектронныеДокументыЭДОСлужебный.НовыеДанныеПодписи();
		ЗаполнитьЗначенияСвойств(УстановленнаяПодпись, СвойстваПодписи);
		УстановленнаяПодпись.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая;
		УстановленнаяПодпись.Владелец = СвойстваПодписи.ВладелецПодписи;
		УстановленнаяПодпись.Должность = СвойстваПодписи.Должность;
		УстановленнаяПодпись.ПодписьВерна = Истина;
		УстановленнаяПодпись.ДатаПроверкиПодписи = СвойстваПодписи.ДатаПодписи;
		
		ДанныеПодписи = ЭлектронныеДокументыЭДОКлиентСервер.НовыеДанныеПодписиСУчетомДоверенности();
		ДанныеПодписи.ПодписанныйОбъект = ФайлСообщения;
		ДанныеПодписи.СвойстваПодписи = УстановленнаяПодпись;
		УстановленныеПодписи.Добавить(ДанныеПодписи);
		
	КонецЦикла;
	
	ПолноеИмяФайла = СведенияОПодписанномОбъекте.СвойстваФайла.ПолноеИмяФайла;
	Если ФорматыЭДО.ЭтоУПДЕИС(ПолноеИмяФайла)
		Или ФорматыЭДО.ЭтоУКДЕИС(ПолноеИмяФайла) Тогда 
		Для Каждого Подпись Из УстановленныеПодписи Цикл
			СвойстваПодписи = Подпись.СвойстваПодписи;
			СвойстваПодписи.ПодписьВерна = Истина;	
		КонецЦикла;
	КонецЕсли;
	
	Возврат УстановленныеПодписи
	
КонецФункции

// Возвращает установленные подписи с учетом доверенностей.
// 
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
// 
// Возвращаемое значение:
//  Массив из см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеДанныеПодписиСУчетомДоверенности
Функция УстановленныеПодписиСУчетомДоверенностей(Сообщение) Экспорт
	
	ФайлСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ОсновнойФайл");
	
	УстановленныеПодписи = УстановленныеПодписиФайлаСУчетомДоверенностей(ФайлСообщения);
	
	Возврат УстановленныеПодписи;

КонецФункции

// Текст ошибки сертификатом можно подписать только по МЧД.
// 
// Параметры:
//  Сертификаты - Массив Из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификаты,
//                                                                                            по которым требуются МЧД
// 
// Возвращаемое значение:
//  ФорматированнаяСтрока
Функция ТекстОшибкиСертификатомМожноПодписатьТолькоПоМЧД(Сертификаты) Экспорт
	
	МассивСтрокСертификаты = Новый Массив;
	КоличествоСертификатов = Сертификаты.Количество();
	Для Каждого Сертификат Из Сертификаты Цикл
		СтрокаСертификаты = СтрШаблон("<a href = ""%1"">%2</a>", ПолучитьНавигационнуюСсылку(Сертификат), Сертификат);
		МассивСтрокСертификаты.Добавить(СтрокаСертификаты);
	КонецЦикла;
	
	Если КоличествоСертификатов > 1 Тогда
		ШаблонСертификаты = НСтр("ru='Сертификатами %1 можно подписать только по доверенности'");
	Иначе
		ШаблонСертификаты = НСтр("ru='Сертификатом %1 можно подписать только по доверенности'");
	КонецЕсли;
	
	ТекстСертификаты = СтрШаблон(ШаблонСертификаты, СтрСоединить(МассивСтрокСертификаты, ", "));
	
	ТекстОшибки = НСтр("ru='%1
		|
		|Что делать:
		|- оформите подходящую доверенность;
		|- либо передайте документ на подпись руководителю.'");
	
	Возврат СтроковыеФункции.ФорматированнаяСтрока(ТекстОшибки, ТекстСертификаты);
	
КонецФункции

// Сведения необходимые для проверки подписи файла по МЧД
// 
// Параметры:
//  ФайлСообщения - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// 
// Возвращаемое значение:
//  Структура:
//  * Ссылка - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * СообщениеЭДО - ДокументСсылка.СообщениеЭДО
//  * ПолноеИмяФайла - Строка
//
Функция СведенияОПодписанномОбъекте(ФайлСообщения) Экспорт
	
	ФайлыСообщений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФайлСообщения);
	
	Результат = ЭлектронныеДокументыЭДОСлужебный.СведенияОПодписанныхОбъектах(ФайлыСообщений)[ФайлСообщения];
	
	Возврат Результат;
	
КонецФункции

// Определяет доверителя МЧД и направление проверяемой подписи
// 
// Параметры:
//  СведенияОПодписанномОбъекте - См. СведенияОПодписанномОбъекте
//  СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  ВсегоПодписей - Число
// 
// Возвращаемое значение:
//  Структура:
//  * Доверитель - ОпределяемыйТип.УчастникЭДО
//  * ЭтоВходящаяПодпись - Булево
//
Функция ДоверительИНаправлениеПодписи(СведенияОПодписанномОбъекте, СвойстваПодписи, ВсегоПодписей) Экспорт
	Возврат ЭлектронныеДокументыЭДОСлужебный.ДоверительИНаправлениеПодписи(
		СведенияОПодписанномОбъекте, СвойстваПодписи, ВсегоПодписей);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаПрав

// Возвращает ошибку диагностики при отсутствии прав на обработку электронных документов.
// 
// Возвращаемое значение:
// 	Строка - идентификатор ошибки.
Функция ВидОшибкиНетПравНаОбработкуДокументов()
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "НетПравНаОбработкуДокументов";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Не удалось выполнить действие по ЭДО'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Нет прав для выполнения действий по ЭДО'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = 'Обратитесь к администратору'");
	
	Возврат ВидОшибки;
	
КонецФункции

#КонецОбласти

#Область Настройки

// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ТребуетсяОтветнаяПодписьПоУмолчанию(ТипДокумента)
	
	Результат = Ложь;
	
	Если Не (ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура
		Или  ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура
		Или  ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетНаОплату
		Или  ТипДокумента = Перечисления.ТипыДокументовЭДО.КаталогТоваров
		Или  ТипДокумента = Перечисления.ТипыДокументовЭДО.ПрайсЛист
		Или  ТипДокумента = Перечисления.ТипыДокументовЭДО.СведенияОРеализацииКомиссионером
		Или  ТипДокумента = Перечисления.ТипыДокументовЭДО.СведенияОЗакупкеКомиссионером
		Или  ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОРеализацииКомиссионером
		Или  ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОЗакупкеКомиссионером
		Или  ТипДокумента = Перечисления.ТипыДокументовЭДО.АктОРасхождениях
		Или  ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность) Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ТребуетсяИзвещениеПоУмолчанию(ТипДокумента)
	
	Результат = Ложь;
	
	Если Не (ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура) Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Булево
Функция РедактироватьОтветнуюПодпись(ТипДокумента)
	
	Результат = Истина;
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная Тогда
		
		Результат = Ложь;
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура
			Или ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура Тогда
		
		Результат = Ложь;
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОПродажахКомиссионногоТовара
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОСписанииКомиссионногоТовара
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.АктОРасхождениях
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность Тогда
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДанныеДокумента

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Ссылка - ДокументСсылка.СообщениеЭДО
//  * Дата - Дата
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  * Статус - ПеречислениеСсылка.СтатусыСообщенийЭДО
//  * ДатаИзмененияСтатуса - Дата
//  * ДополнительнаяИнформация - Строка
Функция СвойстваСообщенийПросмотраКарточкиДокумента(ЭлектронныйДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка,
		|	СообщениеЭДО.Дата,
		|	СообщениеЭДО.Направление,
		|	СообщениеЭДО.ТипЭлементаРегламента,
		|	СообщениеЭДО.Статус,
		|	СообщениеЭДО.ДатаИзмененияСтатуса,
		|	СообщениеЭДО.ДополнительнаяИнформация
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И СообщениеЭДО.ТипЭлементаРегламента В (&ТипыЭлементовРегламента)";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	ТипыЭлементовРегламента = Новый Массив;
	ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);
	ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки);
	Запрос.УстановитьПараметр("ТипыЭлементовРегламента", ТипыЭлементовРегламента);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * Ошибка - Строка
//  * СодержаниеФайла - Неопределено
//                    - См. ЭлектронныеДокументыЭДО.СодержаниеСообщения
//  * НастройкиОтправки - Неопределено
//                      - См. НастройкиОтправкиЭДО.НастройкиОтправки
Функция НовыйРезультатПолученияДанныхДокументаДляЗагрузкиПоДаннымФайлаXML()
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("Ошибка", "");
	Результат.Вставить("СодержаниеФайла", Неопределено);
	Результат.Вставить("НастройкиОтправки", Неопределено);
	Возврат Результат;
	
КонецФункции

// Возвращает итоги по содержанию файла электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. ИтогиДокументаПоСодержаниюФайла
Функция ИтогиДокументаПоСодержанию(ЭлектронныйДокумент) Экспорт
	
	Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОсновнойФайл = ОсновнойФайлИнформацииОтправителя(ЭлектронныйДокумент);
	
	Если ОсновнойФайл = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвоичныеДанныеФайлов = РаботаСФайлами.ДвоичныеДанныеФайлов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОсновнойФайл));
	ДвоичныеДанныеФайла = ДвоичныеДанныеФайлов[ОсновнойФайл];
	
	ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
	ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанныеФайла;
	ОписаниеФайла.ИмяФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнойФайл, "ПолноеИмяФайла");
	
	Возврат ИтогиДокументаПоСодержаниюФайла(ОписаниеФайла);
	
КонецФункции

// Возвращает итоги по содержанию файла.
//
// Параметры:
//  ОписаниеФайла - См. РаботаСФайламиБЭД.НовоеОписаниеФайла
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. НовыеИтогиДокументаПоСодержаниюФайла
Функция ИтогиДокументаПоСодержаниюФайла(ОписаниеФайла)
	
	СодержаниеСообщения = СодержаниеСообщения(ОписаниеФайла);
	
	Если СодержаниеСообщения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИтогиДокумента = НовыеИтогиДокументаПоСодержаниюФайла();
	
	ИтогиДокумента.Сумма = СодержаниеСообщения.СуммаДокумента;
	ИтогиДокумента.СуммаНДС = СодержаниеСообщения.СуммаНДСДокумента;
	ИтогиДокумента.ПредставлениеВалюты = СодержаниеСообщения.ВалютаДокумента;
	ИтогиДокумента.ПредставлениеСтавкиНДС = СодержаниеСообщения.СтавкаНДСДокумента;
	
	Возврат ИтогиДокумента;
	
КонецФункции

#КонецОбласти

#Область ДанныеСообщения

// Параметры:
//  ИмяСинонима - Строка
// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаОбщийРазмерПрисоединенныхФайловДокументов(ИмяСинонима = "")
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ПрисоединенныеФайлы.Размер), 0) КАК Размер
	|ИЗ
	|	Документ.СообщениеЭДО КАК СообщениеЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ПО СообщениеЭДО.ОсновнойФайл = ПрисоединенныеФайлы.Ссылка
	|ГДЕ
	|	СообщениеЭДО.ЭлектронныйДокумент В (&ЭлектронныйДокумент)";
	
	Если ЗначениеЗаполнено(ИмяСинонима) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК Размер", "КАК " + ИмяСинонима);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Подписи

// Проверить подписи файлов.
// 
// Параметры:
//  ПрисоединенныеФайлы - Массив из СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Структура: См. НовыйРезультатПроверкиПодписей
//
Функция ПроверитьПодписиФайлов(ПрисоединенныеФайлы, КонтекстДиагностики)
	
	Результат = НовыйРезультатПроверкиПодписей();
	Результат.КонтекстДиагностики = КонтекстДиагностики;
	
	ДвоичныеДанныеФайлов = РаботаСФайлами.ДвоичныеДанныеФайлов(ПрисоединенныеФайлы);
	
	ПроверятьЭлектронныеПодписиНаСервере = ЭлектроннаяПодпись.ПроверятьЭлектронныеПодписиНаСервере()
		Или КриптографияБЭД.ДоступнаПроверкаПодписиВОблаке();
	
	Если Не ПроверятьЭлектронныеПодписиНаСервере Тогда
		Результат.ПодписиДляПроверки = ПодписиДокументаДляПроверкиНаКлиенте(ДвоичныеДанныеФайлов);
		Возврат Результат;
	КонецЕсли;
	
	МенеджерКриптографии = Неопределено;
	
	Для Каждого ДанныеФайла Из ДвоичныеДанныеФайлов Цикл
		
		УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ДанныеФайла.Ключ);
		
		Для Каждого СохраненныеСвойстваПодписи Из УстановленныеПодписи Цикл
			РезультатПроверки = КриптографияБЭД.ПроверитьПодпись(МенеджерКриптографии, ДанныеФайла.Значение,
				СохраненныеСвойстваПодписи.Подпись, КонтекстДиагностики);
			ОбработатьРезультатПроверкиПодписиФайла(ДанныеФайла.Ключ, СохраненныеСвойстваПодписи,
				РезультатПроверки.СвойстваПодписи, УстановленныеПодписи.Количество());
		КонецЦикла;

		Результат.ПроверенныеПодписи.Вставить(ДанныеФайла.Ключ, УстановленныеПодписи);
		
	КонецЦикла;
	
	Результат.Успех = Истина;
	
	Возврат Результат;
	
КонецФункции

// Обрабатывает результат проверки подписи присоединенного файла.
// 
// Параметры:
//  ПрисоединенныйФайл - Массив из СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  СохраненныеСвойстваПодписи - см. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  СвойстваПодписиПослеПроверки - см. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  ВсегоПодписей - Число
Процедура ОбработатьРезультатПроверкиПодписиФайла(ПрисоединенныйФайл, СохраненныеСвойстваПодписи,
	СвойстваПодписиПослеПроверки, ВсегоПодписей)
	
	СохраненныеСвойстваПодписи.ПодписьВерна = СвойстваПодписиПослеПроверки.ПодписьВерна;
	СохраненныеСвойстваПодписи.ДатаПроверкиПодписи = СвойстваПодписиПослеПроверки.ДатаПроверкиПодписи;
	СохраненныеСвойстваПодписи.Комментарий = СвойстваПодписиПослеПроверки.Комментарий;
	
	Если ТипЗнч(СохраненныеСвойстваПодписи.Сертификат) = Тип("ХранилищеЗначения") Тогда
		СохраненныеСвойстваПодписи.Сертификат = СохраненныеСвойстваПодписи.Сертификат.Получить();
	КонецЕсли;
	Если СохраненныеСвойстваПодписи.Сертификат = Неопределено Тогда
		СохраненныеСвойстваПодписи.Сертификат = СвойстваПодписиПослеПроверки.Сертификат;
		СохраненныеСвойстваПодписи.Отпечаток = СвойстваПодписиПослеПроверки.Отпечаток;
		СохраненныеСвойстваПодписи.КомуВыданСертификат = СвойстваПодписиПослеПроверки.КомуВыданСертификат;
	КонецЕсли;
	
	РезультатПроверкиПоМЧД = ЭлектронныеДокументыЭДОСлужебный.ПроверитьПодписьФайлаПоМЧД(
		ПрисоединенныйФайл, СохраненныеСвойстваПодписи, ВсегоПодписей);
	
	ЗаписатьРезультатПроверкиПодписиФайла(ПрисоединенныйФайл, СохраненныеСвойстваПодписи, РезультатПроверкиПоМЧД);
	
КонецПроцедуры

// Записывает результат проверки подписи файла.
// 
// Параметры:
//  ФайлСообщения - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  РезультатПроверкиПоМЧД - См. МашиночитаемыеДоверенности.ПроверитьПодпись
// 
// Возвращаемое значение:
//  Булево - признак успешной записи.
Функция ЗаписатьРезультатПроверкиПодписиФайла(ФайлСообщения, СвойстваПодписи, РезультатПроверкиПоМЧД)
	
	Результат = Истина;
	
	НачатьТранзакцию();
	Попытка
		
		КриптографияБЭД.ОбновитьПодпись(ФайлСообщения, СвойстваПодписи);
		
		ХешПодписи = КриптографияБЭД.ХешПодписи(СвойстваПодписи.Подпись);
		
		МашиночитаемыеДоверенности.ЗаписатьРезультатПроверкиПодписи(ФайлСообщения, ХешПодписи, РезультатПроверкиПоМЧД);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Результат = Ложь;
		ТекстСообщения = НСтр("ru = 'Не удалось записать результат проверки подписи по причине:'")
			+ Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПараметрыЗаписи = ОбщегоНазначенияБЭД.НовыеПараметрыЗаписиВЖурналРегистрации();
		ПараметрыЗаписи.Данные = ФайлСообщения;
		ПараметрыЗаписи.ОбъектМетаданных = ФайлСообщения.Метаданные();
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами,
			УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру параметров проверки подписи.
//
// Возвращаемое значение:
// 	Структура - параметры проверки подписи:
//  * ПрисоединенныйФайл           - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * ДвоичныеДанныеФайла          - ДвоичныеДанные
//  * ДвоичныеДанныеПодписи        - ДвоичныеДанные
//
Функция НовыеПараметрыПроверкиПодписи()
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ПрисоединенныйФайл");
	ПараметрыПроверки.Вставить("ДвоичныеДанныеФайла");
	ПараметрыПроверки.Вставить("ДвоичныеДанныеПодписи");
	Возврат ПараметрыПроверки;
	
КонецФункции

// Возвращает массив параметров из параметров проверок подписей.
// 
// Параметры:
//  ДвоичныеДанныеФайлов - Соответствие из КлючИЗначение:
// 	  * Ключ - ОпределяемыйТип.ПрисоединенныйФайл
// 	  * Значение - ДвоичныеДанные
//
// Возвращаемое значение:
//  Массив из Структура: См. НовыеПараметрыПроверкиПодписи
//
Функция ПодписиДокументаДляПроверкиНаКлиенте(ДвоичныеДанныеФайлов)
	
	Результат = Новый Массив;
	
	Для Каждого ДанныеФайла Из ДвоичныеДанныеФайлов Цикл
		
		УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ДанныеФайла.Ключ);
		
		Для Каждого СвойстваПодписи Из УстановленныеПодписи Цикл
			ПараметрыПроверки = НовыеПараметрыПроверкиПодписи();
			ПараметрыПроверки.ПрисоединенныйФайл = ДанныеФайла.Ключ;
			ПараметрыПроверки.ДвоичныеДанныеФайла = ДанныеФайла.Значение;
			ПараметрыПроверки.ДвоичныеДанныеПодписи = СвойстваПодписи.Подпись;
			Результат.Добавить(ПараметрыПроверки);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  РезультатыПроверки - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  Подпись - ДвоичныеДанные
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
Функция ПолучитьРезультатПроверкиПодписи(РезультатыПроверки, Подпись)
	
	РезультатПроверкиПодписи = Неопределено;
	
	Для Каждого РезультатПроверки Из РезультатыПроверки Цикл
		Если РезультатПроверки.Подпись = Подпись Тогда
			РезультатПроверкиПодписи = РезультатПроверки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПроверкиПодписи;
	
КонецФункции

#КонецОбласти

#Область ДокументыНаПодписи

// Параметры:
//  Запрос - Запрос
//  Условие - Массив из Строка
//  Отбор - см. НовыйОтборДокументовНаПодписи
//  ИмяТаблицы - Строка
//  ИмяСвойства - Строка
Процедура ДобавитьУсловиеОтбораДокументовДляПодписания(Запрос, Условие, Отбор, ИмяТаблицы, ИмяСвойства)
	ЗначениеОтбора = Отбор[ИмяСвойства];
	Если Не ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		Возврат;
	КонецЕсли;
	ИмяПараметра = "Отбор" + ИмяСвойства;
	Условие.Добавить(СтрШаблон("%1.%2 = &%3", ИмяТаблицы, ИмяСвойства, ИмяПараметра));
	Запрос.УстановитьПараметр(ИмяПараметра, ЗначениеОтбора);
КонецПроцедуры

#КонецОбласти

#Область СтатусДокумента

// Возвращаемое значение:
//  Структура:
//  * ЭДОНеНастроен - Строка
//  * НеНачат - Строка
//  * ВОбработке - Строка
//  * Получен - Строка
//  * ОтклонениеВОбработке - Строка
//  * Отклонен - Строка
//  * УтверждениеВОбработке - Строка
//  * Утвержден - Строка
//  * Ошибка - Строка
Функция ДоступныеСтатусыДокумента()
	Статусы = Новый Структура;
	Статусы.Вставить("ЭДОНеНастроен", "ЭДОНеНастроен");
	Статусы.Вставить("НеНачат", "НеНачат");
	Статусы.Вставить("ВОбработке", "ВОбработке");
	Статусы.Вставить("Получен", "Получен");
	Статусы.Вставить("ОтклонениеВОбработке", "ОтклонениеВОбработке");
	Статусы.Вставить("Отклонен", "Отклонен");
	Статусы.Вставить("УтверждениеВОбработке", "УтверждениеВОбработке");
	Статусы.Вставить("Утвержден", "Утвержден");
	Статусы.Вставить("Ошибка", "Ошибка");
	Возврат Статусы;
КонецФункции

#КонецОбласти

#Область ДействияПоИнтеграциямЭДО

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор интеграции ЭДО.
//  * Значение - ОбщийМодуль
Функция МенеджерыДействийЭДО()
	
	МенеджерыДействийЭДО = Новый Соответствие; // см. МенеджерыДействийЭДО
	
	ПриОпределенииМенеджеровДействийЭДО(МенеджерыДействийЭДО);
	
	Возврат МенеджерыДействийЭДО;
	
КонецФункции

// Заполнение обработчиков перед выполнением операции интеграцииЭДО.
// Обработчик должен поддерживать методы:
// * ПриОпределенииОбработчиковИнтеграцийЭДО
// * ВыполнитьДействияПоЭДО
// * РезультатДействийПоЭДОДляКлиента
// * РезультатОбработкиДействийПоЭДОДляСервера
// * ПродолжитьВыполнениеДействийПоЭДОПослеОбработкиРезультатов
// .
//
// Параметры:
//  МенеджерыДействийЭДО - см. МенеджерыДействийЭДО
Процедура ПриОпределенииМенеджеровДействийЭДО(МенеджерыДействийЭДО)
	
	ЭлектронныеДокументыЭДОСлужебный.ПриОпределенииМенеджеровДействийЭДО(МенеджерыДействийЭДО);
	
	Если ЕстьИнтеграцияОблачногоЭДО() Тогда
		ОбщийМодульЭлектронныеДокументыЭДОИнтеграцияОблака = 
			ОбщегоНазначения.ОбщийМодуль("ЭлектронныеДокументыЭДОИнтеграцияОблака");
		ОбщийМодульЭлектронныеДокументыЭДОИнтеграцияОблака.ПриОпределенииМенеджеровДействийЭДО(МенеджерыДействийЭДО);
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор интеграции ЭДО.
//  * Значение - Произвольный - результат действий по интеграции ЭДО.
Функция НовыеРезультатыВыполненияДействийПоИнтеграциямЭДО() Экспорт
	Возврат Новый Соответствие;
КонецФункции

// Параметры:
//  РезультатыПоИнтеграциямЭДО - см. ВыполнитьДействияПоИнтеграциямЭДО
// 
// Возвращаемое значение:
//  См. НовыеРезультатыВыполненияДействийПоИнтеграциямЭДО
Функция РезультатыВыполненияДействийПоИнтеграциямЭДОДляКлиента(РезультатыПоИнтеграциямЭДО) Экспорт
	
	РезультатыПоИнтеграциямЭДОДляКлиента = НовыеРезультатыВыполненияДействийПоИнтеграциямЭДО();
	
	МенеджерыДействийЭДО = МенеджерыДействийЭДО();
	
	Для Каждого РезультатПоИнтеграцииЭДО Из РезультатыПоИнтеграциямЭДО Цикл
		ИдентификаторМенеджера = РезультатПоИнтеграцииЭДО.Ключ;
		МодульМенеджера = МенеджерыДействийЭДО[ИдентификаторМенеджера];
		РезультатВыполнения = РезультатПоИнтеграцииЭДО.Значение;
		РезультатВыполненияДляКлиента = МодульМенеджера.РезультатВыполненияДействийЭДОДляКлиента(РезультатВыполнения);
		РезультатыПоИнтеграциямЭДОДляКлиента.Вставить(ИдентификаторМенеджера, РезультатВыполненияДляКлиента);
	КонецЦикла;
	
	Возврат РезультатыПоИнтеграциямЭДОДляКлиента;
	
КонецФункции

// Параметры:
//  ПараметрыПродолженияДействийПоИнтеграциямЭДО - см. ЭлектронныеДокументыЭДОВызовСервера.ПродолжитьВыполнениеДействийПоИнтеграциямЭДОВФоне.ПараметрыПродолженияДействийПоИнтеграциямЭДО
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор менеджера действий интеграции ЭДО.
//  * Значение - Произвольный
Функция ПараметрыПродолженияДействийПоИнтеграциямЭДОВФоне(ПараметрыПродолженияДействийПоИнтеграциямЭДО) Экспорт
	
	ПараметрыПродолженияПоИнтеграциямЭДОВФоне = Новый Соответствие;
	
	МенеджерыДействийЭДО = МенеджерыДействийЭДО();
	
	Для Каждого ПараметрыПродолженияПоИнтеграцииЭДО Из ПараметрыПродолженияДействийПоИнтеграциямЭДО Цикл
		ИдентификаторМенеджера = ПараметрыПродолженияПоИнтеграцииЭДО.Ключ;
		ПараметрыПродолжения = ПараметрыПродолженияПоИнтеграцииЭДО.Значение;
		МодульМенеджера = МенеджерыДействийЭДО[ИдентификаторМенеджера];
		ПараметрыПродолженияВФоне = МодульМенеджера.ПараметрыПродолженияДействийЭДОВФоне(ПараметрыПродолжения);
		ПараметрыПродолженияПоИнтеграциямЭДОВФоне.Вставить(ИдентификаторМенеджера, ПараметрыПродолженияВФоне);
	КонецЦикла;
	
	Возврат ПараметрыПродолженияПоИнтеграциямЭДОВФоне;
	
КонецФункции

// Параметры:
//  ПараметрыПродолженияДействийПоИнтеграциямЭДО - Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор менеджера действий интеграции ЭДО.
//  * Значение - Произвольный
//  ПараметрыВыполненияДействий - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
// 
// Возвращаемое значение:
//  См. НовыеРезультатыВыполненияДействийПоИнтеграциямЭДО
Функция ПродолжитьВыполнениеДействийПоИнтеграциямЭДОПослеОбработкиРезультатов(ПараметрыПродолженияДействийПоИнтеграциямЭДО, ПараметрыВыполненияДействий) Экспорт
	
	РезультатыПоИнтеграциямЭДО = НовыеРезультатыВыполненияДействийПоИнтеграциямЭДО();
	
	МенеджерыДействийЭДО = МенеджерыДействийЭДО();
	
	Для Каждого ПараметрыПродолженияПоИнтеграцииЭДО Из ПараметрыПродолженияДействийПоИнтеграциямЭДО Цикл
		ИдентификаторМенеджера = ПараметрыПродолженияПоИнтеграцииЭДО.Ключ;
		ПараметрыПродолжения = ПараметрыПродолженияПоИнтеграцииЭДО.Значение;
		МодульМенеджера = МенеджерыДействийЭДО[ИдентификаторМенеджера];
		РезультатДействий = МодульМенеджера.ПродолжитьВыполнениеДействийЭДОПослеОбработкиРезультатов(
			ПараметрыПродолжения, ПараметрыВыполненияДействий);
		РезультатыПоИнтеграциямЭДО.Вставить(ИдентификаторМенеджера, РезультатДействий);
	КонецЦикла;
	
	Возврат РезультатыПоИнтеграциямЭДО;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИтогВыполненияДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * ОшибкиФормирования  - Массив из См. НовоеОписаниеОшибкиФормирования
Функция НовыйРезультатОбработкиВыполненияДействийПоЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ИтогВыполненияДействий", ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	Результат.Вставить("ОшибкиФормирования", Новый Массив);
	Возврат Результат;
КонецФункции

// Параметры:
//  РезультатыПоИнтеграциямЭДО - См. НовыеРезультатыВыполненияДействийПоИнтеграциямЭДО
// 
// Возвращаемое значение:
//  См. НовыйРезультатОбработкиВыполненияДействийПоЭДО
Функция ОбработатьРезультатыВыполненияДействийПоИнтеграциямЭДО(РезультатыПоИнтеграциямЭДО) Экспорт
	
	РезультатОбработки = НовыйРезультатОбработкиВыполненияДействийПоЭДО();
	
	МенеджерыДействийЭДО = МенеджерыДействийЭДО();
	
	Для Каждого РезультатПоИнтеграцииЭДО Из РезультатыПоИнтеграциямЭДО Цикл
		ИдентификаторМенеджера = РезультатПоИнтеграцииЭДО.Ключ;
		РезультатДействий = РезультатПоИнтеграцииЭДО.Значение;
		МодульМенеджера = МенеджерыДействийЭДО[ИдентификаторМенеджера];
		РезультатОбработкиПоИнтеграцииЭДО = МодульМенеджера.ОбработатьРезультатВыполненияДействийЭДО(РезультатДействий);
		ЭлектронныеДокументыЭДОКлиентСервер.ДополнитьИтогВыполненияДействийПоЭДО(
			РезультатОбработки.ИтогВыполненияДействий, РезультатОбработкиПоИнтеграцииЭДО.ИтогВыполненияДействий);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			РезультатОбработки.ОшибкиФормирования, РезультатОбработкиПоИнтеграцииЭДО.ОшибкиФормирования);
		ОбработкаНеисправностейБЭДКлиентСервер.ДополнитьКонтекстДиагностики(
			РезультатОбработки.КонтекстДиагностики, РезультатОбработкиПоИнтеграцииЭДО.КонтекстДиагностики);
	КонецЦикла;
	
	Возврат РезультатОбработки;
	
КонецФункции

#КонецОбласти

#Область Обновление

// Параметры:
//  Объект - ДокументОбъект.ЭлектронныйДокументВходящийЭДО,ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
//  ДанныеДляЗаполнения - См. Обновление_ДанныеДляЗаполненияДокументовПоНовойАрхитектуре
//  ЭтоВходящийЭДО - Булево
//  Записать - Булево
Процедура Обновление_ЗаполнитьДокументПоНовойАрхитектуре(Объект, ДанныеДляЗаполнения, ЭтоВходящийЭДО, Записать) Экспорт
	
	Если ЗначениеЗаполнено(Объект.ТипРегламента)
		ИЛИ Не ЗначениеЗаполнено(Объект.УдалитьВидДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		Объект.ВидДокумента = Обновление_ОпределитьВидДокумента(Объект);
	КонецЕсли;
	
	ТипРегламента = ДанныеДляЗаполнения.ТипыРегламентов[Объект.Ссылка];
	Если Не ЗначениеЗаполнено(ТипРегламента) Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось определить тип регламента ЭДО'");
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
			Объект.Метаданные(), Объект.Ссылка, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДокументОтклонен = ДанныеДляЗаполнения.ОтклоненныеДокументы[Объект.Ссылка] <> Неопределено;
	
	Объект.ТипРегламента = ТипРегламента;
	Объект.ПричинаОстановки = Обновление_ПричинаОстановкиПоНовойАрхитектуре(Объект, ЭтоВходящийЭДО, ДокументОтклонен);
	Объект.Остановлен = ЗначениеЗаполнено(Объект.ПричинаОстановки);
	Объект.Исправлен = Объект.УдалитьСостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением;
	Объект.ИдентификаторСвязи = ДанныеДляЗаполнения.ИдентификаторыСвязи[Объект.Ссылка];
	
	Обновление_ЗаполнитьОбъектыУчетаЭлектронногоДокументаПоНовойАрхитектуре(Объект, ЭтоВходящийЭДО);
	
	Отбор = Новый Структура("ЭлектронныйДокумент", Объект.Ссылка);
	ИсторияСобытийПоДокументу = ДанныеДляЗаполнения.ИсторияСобытий.НайтиСтроки(Отбор);
	
	Комментарий = "";
	СостояниеДополнение = "";
	ТекущееСостояние = Перечисления.СостоянияДокументовЭДО.ПустаяСсылка();
	Если Обновление_ДокументооборотЗавершенДоОбновления(Объект.УдалитьСостояниеЭДО) Тогда
		ТекущееСостояние = Объект.УдалитьСостояниеЭДО;
		ДатаИзменения = ?(ЗначениеЗаполнено(ИсторияСобытийПоДокументу),
			ИсторияСобытийПоДокументу[ИсторияСобытийПоДокументу.Количество() - 1].ДатаИзменения, Объект.Дата);
		Если ТекущееСостояние = Перечисления.СостоянияДокументовЭДО.Аннулирован
			ИЛИ ТекущееСостояние = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением Тогда
			Комментарий = Объект.УдалитьПричинаОтклонения;
		КонецЕсли;
	ИначеЕсли СинхронизацияЭДОКлиентСервер.ЭтоОбменЧерезОператора(Объект.СпособОбмена) Тогда
		СтатусПриглашения = ДанныеДляЗаполнения.СтатусыПриглашений.Найти(Объект.Ссылка, "ЭлектронныйДокумент");
		Если СтатусПриглашения = Неопределено Тогда
			ТекущееСостояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаПриглашения;
			СостоянияСообщений = Обновление_СостоянияСообщений(Объект.Ссылка);
			ДатаИзменения = ?(ЗначениеЗаполнено(СостоянияСообщений), СостоянияСообщений[0].ДатаИзмененияСтатуса, Объект.Дата);
		ИначеЕсли СтатусПриглашения.Статус = Перечисления.СтатусыПриглашений.ОжидаемСогласия
			ИЛИ СтатусПриглашения.Статус = Перечисления.СтатусыПриглашений.НастройкаРоуминга Тогда
			ТекущееСостояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение;
			ДатаИзменения = СтатусПриглашения.ДатаИзмененияСтатуса;
		ИначеЕсли СтатусПриглашения.Статус <> Перечисления.СтатусыПриглашений.Принято
			И СтатусПриглашения.Статус <> Перечисления.СтатусыПриглашений.НеТребуется Тогда
			ТекущееСостояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаПриглашения;
			ДатаИзменения = СтатусПриглашения.ДатаИзмененияСтатуса;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущееСостояние) Тогда
		СостоянияСообщений = Обновление_СостоянияСообщений(Объект.Ссылка);
		ТекущееСостояние = РегламентыЭДО.СостояниеДокумента(Объект, СостоянияСообщений, ЭтоВходящийЭДО);
		ДатаИзменения = ?(ЗначениеЗаполнено(СостоянияСообщений), СостоянияСообщений[0].ДатаИзмененияСтатуса, Объект.Дата);
		СостояниеДополнение = Обновление_СостояниеДополнение(Объект, ТекущееСостояние, ЭтоВходящийЭДО, СостоянияСообщений);
	КонецЕсли;
	
	Обновление_ЗаписатьСостояниеДокумент(Объект.Ссылка, ТекущееСостояние, СостояниеДополнение, ДатаИзменения, Комментарий);
	
	Обновление_ЗаполнитьЖурналДействийПоНовойАрхитектуре(Объект, ИсторияСобытийПоДокументу, ТекущееСостояние,
		ЭтоВходящийЭДО, ДокументОтклонен);
	
	Записать = Истина;
	
КонецПроцедуры

// Параметры:
//  СтатусДоОбновления - ПеречислениеСсылка.СтатусыСообщенийЭДО
//  ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  Направление - ПеречислениеСсылка.НаправленияЭДО
//  ОбменБезПодписи - Булево
//  ДокументОтклонен - Булево
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыСообщенийЭДО
Функция Обновление_СтатусСообщенияПоНовойАрхитектуре(СтатусДоОбновления, ТипРегламента, ТипЭлементаРегламента, Направление, ОбменБезПодписи, ДокументОтклонен) Экспорт
	
	Результат = СтатусДоОбновления;
	
	Если СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПолностьюПодписан Тогда
		
		Результат = Перечисления.СтатусыСообщенийЭДО.Подписан
		
	ИначеЕсли СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьОтправкаЗаблокированаОператором
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьОшибкаПередачи Тогда
		// Обмен через оператора возможен только с подписью.
		Результат = Перечисления.СтатусыСообщенийЭДО.Подписан;
		
	ИначеЕсли СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьОтклонен Тогда
		

		Если Направление = Перечисления.НаправленияЭДО.Входящий Тогда
			Результат = Перечисления.СтатусыСообщенийЭДО.Получен;
		ИначеЕсли ДокументОтклонен Тогда
			Результат = Перечисления.СтатусыСообщенийЭДО.Отправлен;
		Иначе
			Результат = Перечисления.СтатусыСообщенийЭДО.Сформирован;
		КонецЕсли;
		
	ИначеЕсли СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьОтправленоУведомление Тогда
		
		Если Направление = Перечисления.НаправленияЭДО.Входящий Тогда
			Результат = Перечисления.СтатусыСообщенийЭДО.Получен;
		Иначе
			Результат = Перечисления.СтатусыСообщенийЭДО.Отправлен;
		КонецЕсли;
		
	ИначеЕсли СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПереданОператору
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПолученоПодтверждениеОператора
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьАннулирован
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьСформированоПредложениеОбАннулировании
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьОтправленоПредложениеОбАннулировании
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПолученоПредложениеОбАннулировании
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьДоставлен
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьДоставленоПодтверждение
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьОтклоненПолучателем
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПодготовленоИзвещение
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьОтправленоИзвещение
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПолученоИзвещение
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПолученоУведомление
		ИЛИ ТипРегламента <> Перечисления.ТипыРегламентовЭДО.Неформализованный
			И (СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПодготовленоПодтверждение
				ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьОтправленоПодтверждение
				ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПолученоПодтверждение) Тогда
		
		Результат = Перечисления.СтатусыСообщенийЭДО.Отправлен;
		
	ИначеЕсли СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПодготовленоПодтверждение
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьОтправленоПодтверждение
		ИЛИ СтатусДоОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПолученоПодтверждение Тогда
		
		Результат = Перечисления.СтатусыСообщенийЭДО.Подтвержден;
		
	КонецЕсли;
	
	Если Результат = Перечисления.СтатусыСообщенийЭДО.Утвержден
		И Не (ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
			ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА
				И Направление = Перечисления.НаправленияЭДО.Входящий) Тогда
		
		Результат = ?(Направление = Перечисления.НаправленияЭДО.Входящий,
			Перечисления.СтатусыСообщенийЭДО.Получен, Перечисления.СтатусыСообщенийЭДО.Сформирован);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  СостояниеДоОбновления - ПеречислениеСсылка.СостоянияДокументовЭДО
// 
// Возвращаемое значение:
//  Булево
Функция Обновление_ДокументооборотЗавершенДоОбновления(СостояниеДоОбновления) Экспорт
	
	Возврат СостояниеДоОбновления = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен
		ИЛИ СостояниеДоОбновления = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением
		ИЛИ СостояниеДоОбновления = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно
		ИЛИ СостояниеДоОбновления = Перечисления.СостоянияДокументовЭДО.Аннулирован
		ИЛИ СостояниеДоОбновления = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением;
	
КонецФункции

// Параметры:
//  ВыбранныеДанные - ТаблицаЗначений:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Структура:
//  * ИсторияСобытий - ТаблицаЗначений:
//    ** Сообщение - ДокументСсылка.СообщениеЭДО
//    ** ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    ** Направление - ПеречислениеСсылка.НаправленияЭДО
//    ** ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//    ** СтатусДоОбновления - ПеречислениеСсылка.СтатусыСообщенийЭДО
//    ** ДатаИзменения - Дата
//    ** Пользователь - ОпределяемыйТип.Пользователь
//    ** Ответственный - ОпределяемыйТип.Пользователь
//    ** Комментарий - Строка
//  * ИдентификаторыСвязи - Соответствие из КлючИЗначение:
//    ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    ** Значение - Строка
//  * СтатусыПриглашений - ТаблицаЗначений:
//    ** ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    ** Статус - ПеречислениеСсылка.СтатусыПриглашений
//    ** ДатаИзмененияСтатуса - Дата
//  * ТипыРегламентов - Соответствие из КлючИЗначение:
//    ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    ** Значение - См. Обновление_ТипРегламентаПоНовойАрхитектуре
//  * ОтклоненныеДокументы - Соответствие из КлючИЗначение:
//    ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    ** Значение - Булево
Функция Обновление_ДанныеДляЗаполненияДокументовПоНовойАрхитектуре(ВыбранныеДанные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВыбранныеДанные.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВыбранныеДанные
		|ИЗ
		|	&ВыбранныеДанные КАК ВыбранныеДанные
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Сообщение,
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СообщениеЭДО.Направление КАК Направление,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	ЖурналСобытийЭД.СтатусЭД КАК СтатусДоОбновления,
		|	ЖурналСобытийЭД.Дата КАК ДатаИзменения,
		|	ЖурналСобытийЭД.Пользователь КАК Пользователь,
		|	ЖурналСобытийЭД.Ответственный КАК Ответственный,
		|	ЖурналСобытийЭД.Комментарий КАК Комментарий
		|ИЗ
		|	ВыбранныеДанные КАК ВыбранныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьЖурналСобытийЭД КАК ЖурналСобытийЭД
		|		ПО ВыбранныеДанные.Ссылка = ЖурналСобытийЭД.ВладелецЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО (ЖурналСобытийЭД.ПрисоединенныйФайл = ПрисоединенныеФайлы.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО (ПрисоединенныеФайлы.ВладелецФайла = СообщениеЭДО.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭлектронныйДокумент,
		|	ДатаИзменения,
		|	ЖурналСобытийЭД.ПрисоединенныйФайл,
		|	ЖурналСобытийЭД.НомерЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыбранныеДанные.Ссылка КАК ЭлектронныйДокумент,
		|	ПрисоединенныеФайлы.УдалитьНомерЭД КАК ИдентификаторСвязи,
		|	ПрисоединенныеФайлы.УдалитьТипЭлементаВерсииЭД КАК УдалитьТипЭлементаВерсииЭД
		|ИЗ
		|	ВыбранныеДанные КАК ВыбранныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ВыбранныеДанные.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
		|			И (СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО (СообщениеЭДО.ОсновнойФайл = ПрисоединенныеФайлы.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыбранныеДанные.Ссылка КАК ЭлектронныйДокумент,
		|	ПриглашенияЭДО.Статус КАК Статус,
		|	ПриглашенияЭДО.ДатаИзмененияСтатуса КАК ДатаИзмененияСтатуса
		|ИЗ
		|	ВыбранныеДанные КАК ВыбранныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
		|		ПО (ДокументЭДО.Ссылка = ВыбранныеДанные.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияЭДО
		|		ПО (ПриглашенияЭДО.ИдентификаторОрганизации = ДокументЭДО.ИдентификаторОрганизации)
		|			И (ПриглашенияЭДО.ИдентификаторКонтрагента = ДокументЭДО.ИдентификаторКонтрагента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВыбранныеДанные.Ссылка КАК ЭлектронныйДокумент,
		|	ПриглашенияЭДО.Статус КАК Статус,
		|	ПриглашенияЭДО.ДатаИзмененияСтатуса КАК ДатаИзмененияСтатуса
		|ИЗ
		|	ВыбранныеДанные КАК ВыбранныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ДокументЭДО
		|		ПО (ДокументЭДО.Ссылка = ВыбранныеДанные.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияЭДО
		|		ПО (ПриглашенияЭДО.ИдентификаторОрганизации = ДокументЭДО.ИдентификаторОрганизации)
		|			И (ПриглашенияЭДО.ИдентификаторКонтрагента = ДокументЭДО.ИдентификаторКонтрагента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыбранныеДанные.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	ВыбранныеДанные КАК ВыбранныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ВыбранныеДанные.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
		|			И (СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.УОУ))
		|ГДЕ
		|	СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.УОУ)";
	
	Запрос.УстановитьПараметр("ВыбранныеДанные", ВыбранныеДанные);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ИсторияСобытий = РезультатыЗапроса[1].Выгрузить();
	ИсторияСобытий.Индексы.Добавить("ЭлектронныйДокумент");
	
	ИдентификаторыСвязи = Новый Соответствие;
	ТипыРегламентов = Новый Соответствие;
	Выборка = РезультатыЗапроса[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		ИдентификаторыСвязи.Вставить(Выборка.ЭлектронныйДокумент, Выборка.ИдентификаторСвязи);
		ТипыРегламентов.Вставить(Выборка.ЭлектронныйДокумент,
			Обновление_ТипРегламентаПоНовойАрхитектуре(Выборка.УдалитьТипЭлементаВерсииЭД));
	КонецЦикла;
	
	СтатусыПриглашений = РезультатыЗапроса[3].Выгрузить();
	ИсторияСобытий.Индексы.Добавить("ЭлектронныйДокумент");
	
	ОтклоненныеДокументы = Новый Соответствие;
	Выборка = РезультатыЗапроса[4].Выбрать();
	Пока Выборка.Следующий() Цикл
		ОтклоненныеДокументы.Вставить(Выборка.ЭлектронныйДокумент, Истина);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ИсторияСобытий", ИсторияСобытий);
	Результат.Вставить("ИдентификаторыСвязи", ИдентификаторыСвязи);
	Результат.Вставить("СтатусыПриглашений", СтатусыПриглашений);
	Результат.Вставить("ТипыРегламентов", ТипыРегламентов);
	Результат.Вставить("ОтклоненныеДокументы", ОтклоненныеДокументы);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ТипЭлементаВерсииЭД - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыРегламентовЭДО
Функция Обновление_ТипРегламентаПоНовойАрхитектуре(ТипЭлементаВерсииЭД) Экспорт
	
	Результат = Перечисления.ТипыРегламентовЭДО.ПустаяСсылка();
	
	Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовРегламентаЭДО.УдалитьДОПУПД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовРегламентаЭДО.УдалитьСЧФУПД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовРегламентаЭДО.УдалитьСЧФДОПУПД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовРегламентаЭДО.УдалитьДИСУКД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовРегламентаЭДО.УдалитьКСЧФУКД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовРегламентаЭДО.УдалитьКСЧФДИСУКД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовРегламентаЭДО.УдалитьЭСФ Тогда
		
		Результат = Перечисления.ТипыРегламентовЭДО.УПД;
		
	ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовРегламентаЭДО.УдалитьДОП Тогда
		
		Результат = Перечисления.ТипыРегламентовЭДО.Формализованный;
		
	ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовРегламентаЭДО.УдалитьПервичныйЭД Тогда
		
		Результат = Перечисления.ТипыРегламентовЭДО.Неформализованный;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  СвойстваДокумента - СтрокаТаблицыЗначений:
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * УдалитьВидДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * УдалитьТипДокумента - ПеречислениеСсылка.УдалитьТипыПроизвольныхДокументовЭДО
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыДокументовЭДО
Функция Обновление_ОпределитьВидДокумента(СвойстваДокумента) Экспорт
	
	Результат = Справочники.ВидыДокументовЭДО.ПустаяСсылка();
	
	Если СвойстваДокумента.УдалитьВидДокумента = Перечисления.ТипыДокументовЭДО.Внутренний Тогда
		Результат = СвойстваДокумента.ВидДокумента;
	ИначеЕсли СвойстваДокумента.УдалитьВидДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
		Результат = ВидДокументаПоПрикладномуТипу(
			СвойстваДокумента.УдалитьВидПрикладногоДокумента);
	ИначеЕсли СвойстваДокумента.УдалитьВидДокумента = Перечисления.ТипыДокументовЭДО.УдалитьПроизвольный Тогда
		ТипДокумента = Обновление_ОпределитьТипДокументаПроизвольногоФормата(СвойстваДокумента.УдалитьТипДокумента);
		Результат = ВидДокументаПоТипу(ТипДокумента);
	Иначе
		ТипДокумента = Обновление_ТипДокументаПоНовойАрхитектуре(
			СвойстваДокумента.УдалитьВидДокумента);
		Если ЗначениеЗаполнено(ТипДокумента) Тогда
			Результат = ВидДокументаПоТипу(ТипДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось определить вид электронного документа'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ТипДокументаДоОбновления - ПеречислениеСсылка.УдалитьТипыПроизвольныхДокументовЭДО
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыДокументовЭДО
Функция Обновление_ОпределитьТипДокументаПроизвольногоФормата(ТипДокументаДоОбновления)
	
	Результат = Перечисления.ТипыДокументовЭДО.Прочее;
	
	Если ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.АктВзаимозачета Тогда
		Результат = Перечисления.ТипыДокументовЭДО.АктВзаимозачета;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.АктВыполненныхРабот Тогда
		Результат = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.АктСверки Тогда
		Результат = Перечисления.ТипыДокументовЭДО.АктСверки;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.Ведомость Тогда
		Результат = Перечисления.ТипыДокументовЭДО.Ведомость;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.ГарантийноеПисьмо Тогда
		Результат = Перечисления.ТипыДокументовЭДО.ГарантийноеПисьмо;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.Договор Тогда
		Результат = Перечисления.ТипыДокументовЭДО.Договор;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.ДополнительноеСоглашение Тогда
		Результат = Перечисления.ТипыДокументовЭДО.ДополнительноеСоглашение;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.КС11 Тогда
		Результат = Перечисления.ТипыДокументовЭДО.КС11;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.КС2 Тогда
		Результат = Перечисления.ТипыДокументовЭДО.КС2;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.КС3 Тогда
		Результат = Перечисления.ТипыДокументовЭДО.КС3;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.Отчет Тогда
		Результат = Перечисления.ТипыДокументовЭДО.Отчет;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.ПлатежноеПоручение Тогда
		Результат = Перечисления.ТипыДокументовЭДО.ПлатежноеПоручение;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.ПриложениеКАкту Тогда
		Результат = Перечисления.ТипыДокументовЭДО.ПриложениеКАкту;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.СоглашениеОбЭДО Тогда
		Результат = Перечисления.ТипыДокументовЭДО.СоглашениеОбЭДО;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.Спецификация Тогда
		Результат = Перечисления.ТипыДокументовЭДО.Спецификация;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.СчетНаОплату Тогда
		Результат = Перечисления.ТипыДокументовЭДО.СчетНаОплату;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.ТоварнаяНакладная Тогда
		Результат = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная;
	ИначеЕсли ТипДокументаДоОбновления = Перечисления.УдалитьТипыПроизвольныхДокументовЭДО.Уведомление Тогда
		Результат = Перечисления.ТипыДокументовЭДО.Уведомление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  Объект - ДокументОбъект.ЭлектронныйДокументВходящийЭДО,ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
//  ЭтоВходящийЭДО - Булево
//  ДокументОтклонен - Булево
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ПричиныОстановкиЭДО
Функция Обновление_ПричинаОстановкиПоНовойАрхитектуре(Объект, ЭтоВходящийЭДО, ДокументОтклонен)
	
	СостояниеДокумента = Объект.УдалитьСостояниеЭДО;
	
	Результат = Перечисления.ПричиныОстановкиЭДО.ПустаяСсылка();
	
	Если СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно Тогда
		
		Результат = Перечисления.ПричиныОстановкиЭДО.ЗакрытПринудительно;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения Тогда
		
		Результат = Перечисления.ПричиныОстановкиЭДО.ОтклонениеПриглашения;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение Тогда
		
		Результат = Перечисления.ПричиныОстановкиЭДО.ОжидаетсяОтветНаПриглашение;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи Тогда
		
		Результат = Перечисления.ПричиныОстановкиЭДО.ОшибкаПередачиБлокирующая;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.УдалитьОтклоненОператором
		И Не ЭтоВходящийЭДО И Объект.УдалитьВидОшибкиПередачи = Перечисления.УдалитьВидыОшибокПередачиЭД.ОграничениеТарификации Тогда
		
		Результат = Перечисления.ПричиныОстановкиЭДО.ОшибкаПередачиНеблокирующая;
		
	ИначеЕсли (СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением)
		И НЕ ДокументОтклонен Тогда
		
		Результат = Перечисления.ПричиныОстановкиЭДО.ОтклонениеПодписания;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  Объект - ДокументОбъект.ЭлектронныйДокументВходящийЭДО,ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
//  ЭтоВходящийЭДО - Булево
Процедура Обновление_ЗаполнитьОбъектыУчетаЭлектронногоДокументаПоНовойАрхитектуре(Объект, ЭтоВходящийЭДО)
	
	Если Не ЗначениеЗаполнено(Объект.УдалитьДокументыОснования) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Объект.УдалитьДокументыОснования Цикл
		НаборЗаписей = РегистрыСведений.ОбъектыУчетаДокументовЭДО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(Объект.Ссылка);
		НаборЗаписей.Отбор.ОбъектУчета.Установить(СтрокаТаблицы.ДокументОснование);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ЭлектронныйДокумент = Объект.Ссылка;
		НоваяЗапись.ОбъектУчета = СтрокаТаблицы.ДокументОснование;
		Если ЭтоВходящийЭДО Тогда
			НоваяЗапись.СпособОбработки = СтрокаТаблицы.СпособОбработки;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Ссылка - ДокументСсылка.СообщениеЭДО
//  * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  * Состояние - ПеречислениеСсылка.СостоянияСообщенийЭДО
//  * ДатаИзмененияСтатуса - Дата
Функция Обновление_СостоянияСообщений(ЭлектронныйДокумент)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
	ЭлементБлокировки.УстановитьЗначение("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.Состояние КАК Состояние,
		|	СообщениеЭДО.ДатаИзмененияСтатуса КАК ДатаИзмененияСтатуса
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|УПОРЯДОЧИТЬ ПО
		|	ДатаИзмененияСтатуса УБЫВ";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Параметры:
//  Объект - ДокументОбъект.ЭлектронныйДокументВходящийЭДО,ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//  ЭтоВходящийЭДО - Булево
//  СостоянияСообщений - См. Обновление_СостоянияСообщений
// 
// Возвращаемое значение:
//  Строка
Функция Обновление_СостояниеДополнение(Объект, Состояние, ЭтоВходящийЭДО, СостоянияСообщений)
	
	Результат = "";
	
	Если ЭтоВходящийЭДО
		ИЛИ Состояние <> Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИнформацияОтправителя = СостоянияСообщений.Найти(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя,
		"ТипЭлементаРегламента");
	
	Если ИнформацияОтправителя = Неопределено Тогда
		Возврат ИнформацияОтправителя;
	КонецЕсли;
	
	Подписи = УстановленныеПодписи(ИнформацияОтправителя.Ссылка, Объект.ВидПодписи);
	
	Возврат МаршрутыПодписанияБЭД.ПредставлениеПрогрессаПодписания(Объект.МаршрутПодписания, Подписи.Количество());
	
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//  СостояниеДополнение - См. Обновление_СостояниеДополнение
//  ДатаИзменения - Дата
//  Комментарий - Строка
Процедура Обновление_ЗаписатьСостояниеДокумент(ЭлектронныйДокумент, Состояние, СостояниеДополнение, ДатаИзменения, Комментарий)
	НаборЗаписей = РегистрыСведений.СостоянияДокументовЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ЭлектронныйДокумент = ЭлектронныйДокумент;
	НоваяЗапись.Состояние = Состояние;
	НоваяЗапись.СостояниеДополнение = СостояниеДополнение;
	НоваяЗапись.ДатаИзменения = ДатаИзменения;
	НоваяЗапись.Комментарий = Комментарий;
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
КонецПроцедуры

// Параметры:
//  Объект - ДокументОбъект.ЭлектронныйДокументВходящийЭДО,ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
//  ИсторияСобытийПоДокументу - Массив из СтрокаТаблицыЗначений:
//  * Сообщение - ДокументСсылка.СообщениеЭДО
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  * СтатусДоОбновления - ПеречислениеСсылка.СтатусыСообщенийЭДО
//  * ДатаИзменения - Дата
//  * Пользователь - ОпределяемыйТип.Пользователь
//  * Ответственный - ОпределяемыйТип.Пользователь
//  * Комментарий - Строка
//  ТекущееСостояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//  ЭтоВходящийЭДО - Булево
//  ДокументОтклонен - Булево
Процедура Обновление_ЗаполнитьЖурналДействийПоНовойАрхитектуре(Объект, ИсторияСобытийПоДокументу, ТекущееСостояние, ЭтоВходящийЭДО, ДокументОтклонен)
	
	Если Не ЗначениеЗаполнено(ИсторияСобытийПоДокументу) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ЖурналДействийПоЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(Объект.Ссылка);
	
	СостоянияЭлементовРегламента = РегламентыЭДО.НовыеСостоянияЭлементовРегламента();
	
	СвойстваСообщения = Новый Структура;
	СвойстваСообщения.Вставить("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка());
	СвойстваСообщения.Вставить("Статус", Перечисления.СтатусыСообщенийЭДО.ПустаяСсылка());
	СвойстваСообщения.Вставить("Направление", Перечисления.НаправленияЭДО.ПустаяСсылка());
	
	Отбор = Новый Структура("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка());
	
	РасчетСостоянияВозможен = Истина;
	
	Счетчик = 1;
	Для Каждого СведенияОСобытии Из ИсторияСобытийПоДокументу Цикл
		
		СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ПустаяСсылка();
		Статус = Перечисления.СтатусыСообщенийЭДО.ПустаяСсылка();
		Действие = Перечисления.ДействияПоЭДО.ПустаяСсылка();
		
		Если Не ЗначениеЗаполнено(СведенияОСобытии.СтатусДоОбновления) Тогда
			РасчетСостоянияВозможен = Ложь;
		ИначеЕсли РасчетСостоянияВозможен Тогда 
			
			СвойстваСообщения.ТипЭлементаРегламента = СведенияОСобытии.ТипЭлементаРегламента;
			СвойстваСообщения.Направление = СведенияОСобытии.Направление;
			СвойстваСообщения.Статус = Обновление_СтатусСообщенияПоНовойАрхитектуре(СведенияОСобытии.СтатусДоОбновления,
				Объект.ТипРегламента, СведенияОСобытии.ТипЭлементаРегламента, СведенияОСобытии.Направление,
				Объект.ОбменБезПодписи, ДокументОтклонен);
			
			СостояниеСообщения = РегламентыЭДО.СостояниеСообщения(СвойстваСообщения, Объект);
			
			Отбор.ТипЭлементаРегламента = СведенияОСобытии.ТипЭлементаРегламента;
			НайденныеСтроки = СостоянияЭлементовРегламента.НайтиСтроки(Отбор);
			КоличествоСтрок = НайденныеСтроки.Количество();
			Если КоличествоСтрок = 0 Тогда
				Элемент = СостоянияЭлементовРегламента.Добавить();
				Элемент.ТипЭлементаРегламента = СведенияОСобытии.ТипЭлементаРегламента;
				Элемент.Состояние = СостояниеСообщения;
			Иначе
				ЭлементРегламента = НайденныеСтроки[КоличествоСтрок - 1];
				Если ЭлементРегламента.Состояние = СостояниеСообщения Тогда
					Продолжить;
				Иначе
					ЭлементРегламента.Состояние = СостояниеСообщения;
				КонецЕсли;
			КонецЕсли;
			
			Статус = СвойстваСообщения.Статус;
			
			СостояниеДокумента = Обновление_СостояниеДокумента(Объект, СостоянияЭлементовРегламента, ЭтоВходящийЭДО);
			
			Действие = Обновление_ДействиеПоСтатусу(СведенияОСобытии.ТипЭлементаРегламента,
				СведенияОСобытии.Направление, СвойстваСообщения.Статус);
			
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.НомерЗаписи = Счетчик;
		НоваяЗапись.Сообщение = СведенияОСобытии.Сообщение;
		НоваяЗапись.ЭлектронныйДокумент = СведенияОСобытии.ЭлектронныйДокумент;
		НоваяЗапись.ДатаИзменения = СведенияОСобытии.ДатаИзменения;
		НоваяЗапись.Ответственный = СведенияОСобытии.Ответственный;
		НоваяЗапись.Пользователь = СведенияОСобытии.Пользователь;
		НоваяЗапись.Комментарий = СведенияОСобытии.Комментарий;
		
		НоваяЗапись.СостояниеДокумента = СостояниеДокумента;
		НоваяЗапись.СтатусСообщения = Статус;
		НоваяЗапись.Действие = Действие;
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Если Счетчик > 1 Тогда
		
		ПоследняяЗапись = НаборЗаписей[Счетчик - 2];
		Если ПоследняяЗапись.СостояниеДокумента <> ТекущееСостояние Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ПоследняяЗапись);
			НоваяЗапись.НомерЗаписи = Счетчик;
			НоваяЗапись.СостояниеДокумента = ТекущееСостояние;
			НоваяЗапись.Комментарий = НСтр("ru = 'Скорректировано автоматически'");
			Если ТекущееСостояние = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно Тогда
				НоваяЗапись.Действие = Перечисления.ДействияПоЭДО.ЗакрытьПринудительно;
				НоваяЗапись.Сообщение = Документы.СообщениеЭДО.ПустаяСсылка();
				НоваяЗапись.СтатусСообщения = Перечисления.СтатусыСообщенийЭДО.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
КонецПроцедуры

// Параметры:
//  Объект - ДокументОбъект.ЭлектронныйДокументВходящийЭДО,ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
//  СостоянияЭлементовРегламента - ТаблицаЗначений:
//  * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  * Состояние - ПеречислениеСсылка.СостоянияСообщенийЭДО
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  * Дата - Дата
//  ЭтоВходящийЭДО - Булево
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияДокументовЭДО
Функция Обновление_СостояниеДокумента(Объект, СостоянияЭлементовРегламента, ЭтоВходящийЭДО)
	
	Если Объект.ТипРегламента = Перечисления.ТипыРегламентовЭДО.УПД Тогда
		МенеджерРегламента =  РегламентыЭДО_УПД;
	ИначеЕсли Объект.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный Тогда
		МенеджерРегламента = РегламентыЭДО_Неформализованный;
	ИначеЕсли Объект.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Формализованный Тогда
		МенеджерРегламента = РегламентыЭДО_Формализованный;
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Некорректный тип регламента ЭДО: %1'"), Объект.ТипРегламента);
	КонецЕсли;
	
	Если ЭтоВходящийЭДО Тогда
		СостояниеДокумента = МенеджерРегламента.СостояниеВходящегоДокумента(Объект, СостоянияЭлементовРегламента);
	Иначе
		СостояниеДокумента = МенеджерРегламента.СостояниеИсходящегоДокумента(Объект, СостоянияЭлементовРегламента);
	КонецЕсли;
	
	Возврат СостояниеДокумента;
	
КонецФункции

// Параметры:
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  Направление - ПеречислениеСсылка.НаправленияЭДО
//  СтатусПослеОбновления - ПеречислениеСсылка.СтатусыСообщенийЭДО
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ДействияПоЭДО
Функция Обновление_ДействиеПоСтатусу(ТипЭлементаРегламента, Направление, СтатусПослеОбновления)
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	Если СтатусПослеОбновления = Перечисления.СтатусыСообщенийЭДО.Сформирован Тогда
		
		Если ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА Тогда
			
			Результат = Перечисления.ДействияПоЭДО.Аннулировать;
			
		ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ
			Или (МодульОбменСГИСЭПД <> Неопределено И МодульОбменСГИСЭПД.ЭтоУОУ(ТипЭлементаРегламента)) Тогда
			
			Результат = Перечисления.ДействияПоЭДО.Отклонить;
			
		ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ Тогда
			
			Результат = Перечисления.ДействияПоЭДО.ОтклонитьАннулирование;
			
		Иначе
			
			Результат = Перечисления.ДействияПоЭДО.Сформировать;
			
		КонецЕсли;
		
	ИначеЕсли СтатусПослеОбновления = Перечисления.СтатусыСообщенийЭДО.Получен Тогда
		
		Результат = Перечисления.ДействияПоЭДО.Загрузить;
		
	ИначеЕсли СтатусПослеОбновления = Перечисления.СтатусыСообщенийЭДО.Утвержден Тогда
		
		Если ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА Тогда
			
			Результат = Перечисления.ДействияПоЭДО.ПринятьАннулирование;
			
		Иначе
			
			Результат = Перечисления.ДействияПоЭДО.Утвердить;
			
		КонецЕсли;
		
	ИначеЕсли СтатусПослеОбновления = Перечисления.СтатусыСообщенийЭДО.ЧастичноПодписан
		ИЛИ СтатусПослеОбновления = Перечисления.СтатусыСообщенийЭДО.Подписан
		ИЛИ СтатусПослеОбновления = Перечисления.СтатусыСообщенийЭДО.УдалитьПолностьюПодписан Тогда
		
		Результат = Перечисления.ДействияПоЭДО.Подписать;
		
	ИначеЕсли СтатусПослеОбновления = Перечисления.СтатусыСообщенийЭДО.ПодготовленКОтправке Тогда 
		
		Результат = Перечисления.ДействияПоЭДО.ПодготовитьКОтправке;
		
	ИначеЕсли СтатусПослеОбновления = Перечисления.СтатусыСообщенийЭДО.Отправлен Тогда 
		
		Результат = Перечисления.ДействияПоЭДО.Отправить;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияБРОЭДО

// Параметры:
//  ОбъектыУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ТипыДокументов - Массив из ПеречислениеСсылка.ТипыДокументовЭДО
//  ТипыЭлементовРегламента - Массив из ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  ТипРегламента - Неопределено,ПеречислениеСсылка.ТипыРегламентовЭДО
// 
// Возвращаемое значение:
//  Неопределено,РезультатЗапроса
Функция РезультатЗапросаДанныхДляВыгрузкиВФНС(ОбъектыУчета, ТипыДокументов, ТипыЭлементовРегламента,
	ТипРегламента = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДокументовЭДО.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВидыДокументов
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|ГДЕ
		|	ВидыДокументовЭДО.ТипДокумента В (&ТипыДокументов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныеДокументыОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
		|	ВидыДокументов.Ссылка.ТипДокумента КАК ТипДокумента,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.ОсновнойФайл КАК Файл,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла КАК ПолноеИмяФайла
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭлектронныеДокументыОбъектовУчета КАК ЭлектронныеДокументыОбъектовУчета
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныеДокументыОбъектовУчета.ЭлектронныйДокумент
		|		И СообщениеЭДО.ТипЭлементаРегламента В (&ТипыЭлементовРегламента)
		|		И (&ОтборПоТипуРегламентаВыключен ИЛИ ЭлектронныеДокументыОбъектовУчета.ТипРегламента = &ТипРегламента)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = СостоянияДокументовЭДО.ЭлектронныйДокумент
		|		И СостоянияДокументовЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОбменЗавершен)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыДокументов КАК ВидыДокументов
		|		ПО СообщениеЭДО.ВидСообщения = ВидыДокументов.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО СообщениеЭДО.ОсновнойФайл = ПрисоединенныеФайлы.Ссылка";
	
	Отбор = ИнтеграцияЭДО.НовыйОтборАктуальныхЭлектронныхДокументов();
	Отбор.ОбъектыУчета = "&ОбъектыУчета";
	ОписаниеЗапроса = ИнтеграцияЭДО.ЗапросАктуальныхЭлектронныхДокументов("ЭлектронныеДокументыОбъектовУчета", Отбор);
	Запрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеЗапроса));
	
	Запрос.УстановитьПараметр("ОбъектыУчета", ОбъектыУчета);
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	Запрос.УстановитьПараметр("ТипыЭлементовРегламента", ТипыЭлементовРегламента);
	Запрос.УстановитьПараметр("ОтборПоТипуРегламентаВыключен", Не ЗначениеЗаполнено(ТипРегламента));
	Запрос.УстановитьПараметр("ТипРегламента", ТипРегламента);
		
	Возврат Запрос.Выполнить();
	
КонецФункции

// Возвращаемое значение:
//  Структура:
// * Тип - Строка
// * КНД - Строка
// * Данные - Строка
// * Имя - Строка
Функция НовыеДанныеФайлаДляВыгрузкиВФНС()
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("Тип", "");
	ДанныеФайла.Вставить("КНД", "");
	ДанныеФайла.Вставить("Данные", "");
	ДанныеФайла.Вставить("Имя", "");
	Возврат ДанныеФайла;
КонецФункции

// Возвращаемое значение:
//  Структура:
//   * Имя - Строка - имя выгружаемого файла.
//   * Размер - Число - размер выгружаемого файла в байтах.
//   * АдресДанных - Строка - адрес временного хранилища с данными файла выгрузки.
//   * ИмяФайлаПодписи - Строка - имя файла подписи выгружаемого файла.
//   * АдресФайлаПодписи - Строка - адрес временного хранилища с данными файла подписи.
Функция НовыеДанныеФайловНеформализованногоДокументаPDFДляФНС()
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("Имя", "");
	ДанныеФайла.Вставить("Размер", 0);
	ДанныеФайла.Вставить("АдресДанных", "");
	ДанныеФайла.Вставить("ИмяФайлаПодписи", "");
	ДанныеФайла.Вставить("АдресФайлаПодписи", "");
	Возврат ДанныеФайла;
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
// 
// Возвращаемое значение:
//  Структура:
//  * ИмяФайла - Строка
//  * ДвоичныеДанные - ДвоичныеДанные
//  * Размер - Число
//  * КНД - См. ФорматыЭДО.КНДПоСвойствамДокумента
//  * УстановленныеПодписи - См. ЭлектроннаяПодпись.УстановленныеПодписи
Функция ДанныеФайлаДляВыгрузкиФНС(ЭлектронныйДокумент, ТипЭлементаРегламента)
	
	Результат = Новый Структура("ИмяФайла, ДвоичныеДанные, Размер, КНД, УстановленныеПодписи");

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.ОсновнойФайл,
		|	СообщениеЭДО.ВидСообщения.ТипДокумента КАК ТипДокумента,
		|	СообщениеЭДО.ЭлектронныйДокумент.ТипРегламента  КАК ТипРегламента,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла КАК ПолноеИмяФайла
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО СообщениеЭДО.ОсновнойФайл = ПрисоединенныеФайлы.Ссылка
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И СообщениеЭДО.ТипЭлементаРегламента = &ТипЭлементаРегламента";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Запрос.УстановитьПараметр("ТипЭлементаРегламента", ТипЭлементаРегламента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ПараметрыДанныхФайла.ПолучатьСсылкуНаДвоичныеДанные = Истина;
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(Выборка.ОсновнойФайл, ПараметрыДанныхФайла);
		Результат.ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		Результат.ИмяФайла = Выборка.ПолноеИмяФайла;
		Результат.Размер = ДанныеФайла.Размер;
		Результат.УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(Выборка.ОсновнойФайл);
		
		СвойстваДокумента = ФорматыЭДО.НовыйПараметрыПолученияКНД();
		СвойстваДокумента.ТипДокумента = Выборка.ТипДокумента;
		СвойстваДокумента.ТипРегламента = Выборка.ТипРегламента;
		СвойстваДокумента.ИмяФайла = ДанныеФайла.ИмяФайла;	
		СвойстваДокумента.Подтверждение = ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя;		
		
		Результат.КНД = ФорматыЭДО.КНДПоСвойствамДокумента(СвойстваДокумента);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает информацию о возможности направить документ в ФНС как неформализованный PDF;
// договорные документы в формате PDF/A-3 предоставляются как формализованные и исключаются из выгрузки;
// файлы, сформированные по стандарту PDF/A-3, не подходят для выгрузки как PDF.
// 
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  СсылкаНаДвоичныеДанныеФайла - Строка
//  РасширениеФайла - Строка
// Возвращаемое значение:
//  Булево
//
Функция ДокументПодлежитВыгрузкеВФНСКакНеформализованныйPDF(ТипДокумента, СсылкаНаДвоичныеДанныеФайла, РасширениеФайла)

	Если Не РаботаСФайламиБЭДКлиентСервер.ЭтоРасширениеФайлаPDF(РасширениеФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтандартPDFA3 = РаботаСФайламиБЭД.ЭтоФайлФорматаPDFА3(СсылкаНаДвоичныеДанныеФайла).Результат;
	
	Если (ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорныйДокумент И СтандартPDFA3)
		Или СтандартPDFA3 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбменДанными

// Параметры:
//  СтрокаВерсии - Строка
// 
// Возвращаемое значение:
//  Число
Функция ВерсияФорматаЧислом(СтрокаВерсии)
	
	ВерсияФорматаЧислом = 0;
	
	РазрядыВерсии = СтрРазделить(СтрокаВерсии, ".");
	Если РазрядыВерсии.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии);
	КонецЕсли;
	
	МножительРазряда = 10000;
	Для ИндексРазрядаОбратный = 0 По 1 Цикл
		ВерсияФорматаЧислом = ВерсияФорматаЧислом + Число(РазрядыВерсии[ИндексРазрядаОбратный]) * МножительРазряда;
		МножительРазряда = МножительРазряда / 100;
	КонецЦикла;
	
	Возврат ВерсияФорматаЧислом;
	
КонецФункции

// Возвращает состояние электронного документа в терминах универсального формата.
// 
// Параметры:
//  СостояниеЭДО  - ПеречислениеСсылка.СостоянияДокументовЭДО
// 
// Возвращаемое значение:
//  Строка
Функция ТипСостоянияЭлектронногоДокументаУниверсальногоФормата_1_10(СостояниеЭДО)
	
	Если СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен Тогда
	
		ТипСостояния = "ОбменЗавершен";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением Тогда
	
		ТипСостояния = "ОбменЗавершенСИсправлениями";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.Аннулирован Тогда
	
		ТипСостояния = "Аннулирован";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно Тогда
	
		ТипСостояния = "ЗакрытПринудительно";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеПоОтклонению
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению Тогда
	
		ТипСостояния = "ИзвещениеНаПодписи";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения Тогда
	
		ТипСостояния = "НаПодписи";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение Тогда
	
		ТипСостояния = "НаУтверждении";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования Тогда
	
		ТипСостояния = "ОжидаетсяАннулирование";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению Тогда
	
		ТипСостояния = "ОжидаетсяИзвещениеОПолучении";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление Тогда
	
		ТипСостояния = "ОжидаетсяИсправление";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПовторнаяОтправка
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаПриглашения Тогда
	
		ТипСостояния = "ОжидаетсяОтправка";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещенияПоОтклонению Тогда
	
		ТипСостояния = "ОжидаетсяОтправкаИзвещения";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение Тогда
	
		ТипСостояния = "ОжидаетсяПодтверждение";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора Тогда
	
		ТипСостояния = "ОжидаетсяПодтверждениеОператора";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения Тогда
	
		ТипСостояния = "Отклонен";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение Тогда
	
		ТипСостояния = "ТребуетсяУточнитьДокумент";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования Тогда
	
		ТипСостояния = "ТребуетсяАннулировать";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи
		Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи Тогда
	
		ТипСостояния = "ОшибкаПередачи";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеПолучен Тогда
	
		ТипСостояния = "НеПолучен";
	
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован Тогда
	
		ТипСостояния = "НеСформирован";
		
	Иначе
		
		ТипСостояния = "";
	
	КонецЕсли;
	
	Возврат ТипСостояния;
	
КонецФункции

// Возвращает состояние электронного документа в терминах универсального формата.
// 
// Параметры:
//  СостояниеЭДО  - ПеречислениеСсылка.СостоянияДокументовЭДО
// 
// Возвращаемое значение:
//  Строка
Функция ТипСостоянияЭлектронногоДокументаУниверсальногоФормата_1_15(СостояниеЭДО)
	
	Если СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.Аннулирован Тогда
		ТипСостояния = "Аннулирован";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно Тогда
		ТипСостояния = "ЗакрытПринудительно";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением Тогда
		ТипСостояния = "ЗакрытСОтклонением";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения Тогда
		ТипСостояния = "ЗакрытСОтклонениемПриглашения";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи Тогда
		ТипСостояния = "ЗакрытСОшибкойПередачи";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеПолучен Тогда
		ТипСостояния = "НеПолучен";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован Тогда
		ТипСостояния = "НеСформирован";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен Тогда
		ТипСостояния = "ОбменЗавершен";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением Тогда
		ТипСостояния = "ОбменЗавершенСИсправлением";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении Тогда
		ТипСостояния = "ОжидаетсяИзвещениеОПолучении";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению Тогда
		ТипСостояния = "ОжидаетсяИзвещениеПоОтклонению";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление Тогда
		ТипСостояния = "ОжидаетсяИсправление";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение Тогда
		ТипСостояния = "ОжидаетсяОтветНаПриглашение";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору Тогда
		ТипСостояния = "ОжидаетсяПередачаОператору";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение Тогда
		ТипСостояния = "ОжидаетсяПодтверждение";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования Тогда
		ТипСостояния = "ОжидаетсяПодтверждениеАннулирования";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора Тогда
		ТипСостояния = "ОжидаетсяПодтверждениеОператора";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении Тогда
		ТипСостояния = "ТребуетсяИзвещениеОПолучении";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеПоОтклонению Тогда
		ТипСостояния = "ТребуетсяИзвещениеПоОтклонению";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи Тогда
		ТипСостояния = "ТребуетсяИсправлениеОшибкиПередачи";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка Тогда
		ТипСостояния = "ТребуетсяОтправка";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования Тогда
		ТипСостояния = "ТребуетсяОтправкаАннулирования";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения Тогда
		ТипСостояния = "ТребуетсяОтправкаИзвещения";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещенияПоОтклонению Тогда
		ТипСостояния = "ТребуетсяОтправкаИзвещенияПоОтклонению";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения Тогда
		ТипСостояния = "ТребуетсяОтправкаОтклонения";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаПриглашения Тогда
		ТипСостояния = "ТребуетсяОтправкаПриглашения";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПовторнаяОтправка Тогда
		ТипСостояния = "ТребуетсяПовторнаяОтправка";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке Тогда
		ТипСостояния = "ТребуетсяПодготовкаКОтправке";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования Тогда
		ТипСостояния = "ТребуетсяПодготовкаКОтправкеАннулирования";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения Тогда
		ТипСостояния = "ТребуетсяПодготовкаКОтправкеИзвещения";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению Тогда
		ТипСостояния = "ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения Тогда
		ТипСостояния = "ТребуетсяПодготовкаКОтправкеОтклонения";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание Тогда
		ТипСостояния = "ТребуетсяПодписание";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования Тогда
		ТипСостояния = "ТребуетсяПодписаниеАннулирования";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения Тогда
		ТипСостояния = "ТребуетсяПодписаниеИзвещения";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению Тогда
		ТипСостояния = "ТребуетсяПодписаниеИзвещенияПоОтклонению";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения Тогда
		ТипСостояния = "ТребуетсяПодписаниеОтклонения";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования Тогда
		ТипСостояния = "ТребуетсяПодтверждениеАннулирования";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение Тогда
		ТипСостояния = "ТребуетсяУтверждение";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение Тогда
		ТипСостояния = "ТребуетсяУточнение";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.УдалитьОжидаетсяВыписка Тогда
		ТипСостояния = "УдалитьОжидаетсяВыписка";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.УдалитьОжидаетсяИзвещение Тогда
		ТипСостояния = "УдалитьОжидаетсяИзвещение";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.УдалитьОжидаетсяИсполнение Тогда
		ТипСостояния = "УдалитьОжидаетсяИсполнение";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.УдалитьОжидаетсяОтзыв Тогда
		ТипСостояния = "УдалитьОжидаетсяОтзыв";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.УдалитьОжидаетсяОтправкаПолучателю Тогда
		ТипСостояния = "УдалитьОжидаетсяОтправкаПолучателю";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.УдалитьОтклоненОператором Тогда
		ТипСостояния = "УдалитьОтклоненОператором";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.УдалитьПлатежИсполнен Тогда
		ТипСостояния = "УдалитьПлатежИсполнен";
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.УдалитьТребуетсяПодтверждение Тогда
		ТипСостояния = "УдалитьТребуетсяПодтверждение";
	Иначе
		ТипСостояния = "";
	КонецЕсли;

	Возврат ТипСостояния;

КонецФункции

// Возвращает состояние по значению типа состояния электронного документа универсального формата.
// 
// Параметры:
//  ТипСостояния  - Строка - тип состояния электронного документа универсального формата.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияДокументовЭДО
Функция СостояниеЭДОПоЗначениюУниверсальногоФормата_1_10(ТипСостояния)
	
	Если ТипСостояния = "ОбменЗавершен" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен;
	
	ИначеЕсли ТипСостояния = "ИзвещениеНаПодписи" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения;
	
	ИначеЕсли ТипСостояния = "НаПодписи" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание;
	
	ИначеЕсли ТипСостояния = "НаУтверждении" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение;
	
	ИначеЕсли ТипСостояния = "ОжидаетсяИзвещениеОПолучении" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении;
	
	ИначеЕсли ТипСостояния = "ОжидаетсяОтправка" Или ТипСостояния = "ОжидаетсяОтправкаПолучателю" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка;
	
	ИначеЕсли ТипСостояния = "ОжидаетсяОтправкаИзвещения" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения;
	
	ИначеЕсли ТипСостояния = "ОжидаетсяПодтверждение" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение;
	
	ИначеЕсли ТипСостояния = "ОжидаетсяПодтверждениеОператора" Или ТипСостояния = "ОжидаетсяОтправкаОператору"
		Или ТипСостояния = "ОжидаетсяПередачаОператору" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора;
	
	ИначеЕсли ТипСостояния = "ОбменЗавершенСИсправлениями" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением;
	
	ИначеЕсли ТипСостояния = "ОжидаетсяИсправление" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление;
	
	ИначеЕсли ТипСостояния = "ЗакрытПринудительно" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно;
	
	ИначеЕсли ТипСостояния = "Аннулирован" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.Аннулирован;
	
	ИначеЕсли ТипСостояния = "ТребуетсяАннулировать" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования;
	
	ИначеЕсли ТипСостояния = "ОжидаетсяАннулирование" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования;
	
	ИначеЕсли ТипСостояния = "Отклонен" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением;
	
	ИначеЕсли ТипСостояния = "ТребуетсяУточнитьДокумент" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение;
	
	ИначеЕсли ТипСостояния = "ОшибкаПередачи" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи;
	
	ИначеЕсли ТипСостояния = "НеПолучен" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.НеПолучен;
	
	ИначеЕсли ТипСостояния = "НеСформирован" Тогда
	
		Состояние = Перечисления.СостоянияДокументовЭДО.НеСформирован;
		
	Иначе
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ПустаяСсылка();
	
	КонецЕсли;
	
	Возврат Состояние;

КонецФункции

// Возвращает состояние по значению типа состояния электронного документа универсального формата.
// 
// Параметры:
//  ТипСостояния - Строка - тип состояния электронного документа универсального формата.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияДокументовЭДО
Функция СостояниеЭДОПоЗначениюУниверсальногоФормата_1_15(ТипСостояния)
	
	Если ТипСостояния = "Аннулирован" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.Аннулирован;
	ИначеЕсли ТипСостояния = "ЗакрытПринудительно" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно;
	ИначеЕсли ТипСостояния = "ЗакрытСОтклонением" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением;
	ИначеЕсли ТипСостояния = "ЗакрытСОтклонениемПриглашения" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения;
	ИначеЕсли ТипСостояния = "ЗакрытСОшибкойПередачи" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи;
	ИначеЕсли ТипСостояния = "НеПолучен" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.НеПолучен;
	ИначеЕсли ТипСостояния = "НеСформирован" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.НеСформирован;
	ИначеЕсли ТипСостояния = "ОбменЗавершен" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен;
	ИначеЕсли ТипСостояния = "ОбменЗавершенСИсправлением" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением;
	ИначеЕсли ТипСостояния = "ОжидаетсяИзвещениеОПолучении" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении;
	ИначеЕсли ТипСостояния = "ОжидаетсяИзвещениеПоОтклонению" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению;
	ИначеЕсли ТипСостояния = "ОжидаетсяИсправление" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление;
	ИначеЕсли ТипСостояния = "ОжидаетсяОтветНаПриглашение" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение;
	ИначеЕсли ТипСостояния = "ОжидаетсяПередачаОператору" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору;
	ИначеЕсли ТипСостояния = "ОжидаетсяПодтверждение" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение;
	ИначеЕсли ТипСостояния = "ОжидаетсяПодтверждениеАннулирования" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования;
	ИначеЕсли ТипСостояния = "ОжидаетсяПодтверждениеОператора" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора;
	ИначеЕсли ТипСостояния = "ТребуетсяИзвещениеОПолучении" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении;
	ИначеЕсли ТипСостояния = "ТребуетсяИзвещениеПоОтклонению" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеПоОтклонению;
	ИначеЕсли ТипСостояния = "ТребуетсяИсправлениеОшибкиПередачи" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи;
	ИначеЕсли ТипСостояния = "ТребуетсяОтправка" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка;
	ИначеЕсли ТипСостояния = "ТребуетсяОтправкаАннулирования" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования;
	ИначеЕсли ТипСостояния = "ТребуетсяОтправкаИзвещения" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения;
	ИначеЕсли ТипСостояния = "ТребуетсяОтправкаИзвещенияПоОтклонению" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещенияПоОтклонению;
	ИначеЕсли ТипСостояния = "ТребуетсяОтправкаОтклонения" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения;
	ИначеЕсли ТипСостояния = "ТребуетсяОтправкаПриглашения" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаПриглашения;
	ИначеЕсли ТипСостояния = "ТребуетсяПовторнаяОтправка" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПовторнаяОтправка;
	ИначеЕсли ТипСостояния = "ТребуетсяПодготовкаКОтправке" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке;
	ИначеЕсли ТипСостояния = "ТребуетсяПодготовкаКОтправкеАннулирования" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования;
	ИначеЕсли ТипСостояния = "ТребуетсяПодготовкаКОтправкеИзвещения" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения;
	ИначеЕсли ТипСостояния = "ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению;
	ИначеЕсли ТипСостояния = "ТребуетсяПодготовкаКОтправкеОтклонения" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения;
	ИначеЕсли ТипСостояния = "ТребуетсяПодписание" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание;
	ИначеЕсли ТипСостояния = "ТребуетсяПодписаниеАннулирования" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования;
	ИначеЕсли ТипСостояния = "ТребуетсяПодписаниеИзвещения" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения;
	ИначеЕсли ТипСостояния = "ТребуетсяПодписаниеИзвещенияПоОтклонению" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению;
	ИначеЕсли ТипСостояния = "ТребуетсяПодписаниеОтклонения" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения;
	ИначеЕсли ТипСостояния = "ТребуетсяПодтверждениеАннулирования" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования;
	ИначеЕсли ТипСостояния = "ТребуетсяУтверждение" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение;
	ИначеЕсли ТипСостояния = "ТребуетсяУточнение" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение;
	ИначеЕсли ТипСостояния = "УдалитьОжидаетсяВыписка" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.УдалитьОжидаетсяВыписка;
	ИначеЕсли ТипСостояния = "УдалитьОжидаетсяИзвещение" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.УдалитьОжидаетсяИзвещение;
	ИначеЕсли ТипСостояния = "УдалитьОжидаетсяИсполнение" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.УдалитьОжидаетсяИсполнение;
	ИначеЕсли ТипСостояния = "УдалитьОжидаетсяОтзыв" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.УдалитьОжидаетсяОтзыв;
	ИначеЕсли ТипСостояния = "УдалитьОжидаетсяОтправкаПолучателю" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.УдалитьОжидаетсяОтправкаПолучателю;
	ИначеЕсли ТипСостояния = "УдалитьОтклоненОператором" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.УдалитьОтклоненОператором;
	ИначеЕсли ТипСостояния = "УдалитьПлатежИсполнен" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.УдалитьПлатежИсполнен;
	ИначеЕсли ТипСостояния = "УдалитьТребуетсяПодтверждение" Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.УдалитьТребуетсяПодтверждение;
	Иначе
		Состояние = Перечисления.СостоянияДокументовЭДО.ПустаяСсылка();
	КонецЕсли;

	Возврат Состояние;

КонецФункции

#КонецОбласти

#КонецОбласти
