
#Область СлужебныеПроцедурыИФункции

#Область КонтрактМенеджераДействийЭДО

// Параметры:
//  МенеджерыДействийЭДО - Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор интеграции ЭДО.
//  * Значение - ОбщийМодуль
Процедура ПриОпределенииМенеджеровДействийЭДО(МенеджерыДействийЭДО) Экспорт
	
	МенеджерыДействийЭДО.Вставить(
		ЭлектронныеДокументыЭДОКлиентСервер.ИдентификаторМенеджераДействийЭДО(),
		ЭлектронныеДокументыЭДОСлужебный);
	
КонецПроцедуры

// Параметры:
//  ПараметрыВыполнения - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  
// Возвращаемое значение:
//  См. НовыйРезультатДействийПоЭДО
Функция ВыполнитьДействияЭДО(ПараметрыВыполнения, КонтекстДиагностики = Неопределено) Экспорт
	
	Если КонтекстДиагностики = Неопределено Тогда
		КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	КонецЕсли;
	
	РезультатДействий = НовыйРезультатДействийПоЭДО(КонтекстДиагностики);
	
	Если НастройкиЭДО.ИспользоватьИнтеграциюОблачногоЭДО() Тогда
		ПараметрыВыполненияДляЛокальногоЭДО = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыВыполнения);
		ПараметрыВыполненияДляЛокальногоЭДО.ОбъектыДействий = ОбъектыДействийЛокальногоЭДО(
			ПараметрыВыполнения.ОбъектыДействий);
	Иначе
		ПараметрыВыполненияДляЛокальногоЭДО = ПараметрыВыполнения;
	КонецЕсли;
	
	Если ЭлектронныеДокументыЭДОКлиентСервер.ОтсутствуютОбъектыДействий(
		ПараметрыВыполненияДляЛокальногоЭДО.ОбъектыДействий) Тогда
		Возврат РезультатДействий;
	КонецЕсли;
	
	ПродолжитьВыполнениеДействийПоЭДО(ПараметрыВыполненияДляЛокальногоЭДО, РезультатДействий);
	
	Возврат РезультатДействий;
	
КонецФункции

// Параметры:
//  РезультатДействий - см. ВыполнитьДействияЭДО
// 
// Возвращаемое значение:
//  См. НовыйРезультатДействийПоЭДО
Функция РезультатВыполненияДействийЭДОДляКлиента(РезультатДействий) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатДействий) Тогда
		Возврат РезультатДействий;
	КонецЕсли;
	
	ПараметрыПодписания = РезультатДействий.ПараметрыПодписания;
	
	Если ЗначениеЗаполнено(ПараметрыПодписания) Тогда
		
		ПоместитьДанныеДляПодписанияВХранилище(ПараметрыПодписания);
		
		ПараметрыПодписания.АдресКонтекстаНаСервере = ПоместитьВоВременноеХранилище(
			ПараметрыПодписания.КонтекстНаСервере, Новый УникальныйИдентификатор);
		
		ПараметрыПодписания.КонтекстНаСервере = Неопределено;
		
	КонецЕсли;
	
	ПараметрыПроверкиПодписей = РезультатДействий.ПараметрыПроверкиПодписей;
	
	Если ЗначениеЗаполнено(ПараметрыПроверкиПодписей) Тогда
		
		ПараметрыПроверкиПодписей.АдресКонтекстаНаСервере = ПоместитьВоВременноеХранилище(
			ПараметрыПроверкиПодписей.КонтекстНаСервере, Новый УникальныйИдентификатор);
		
		ПараметрыПроверкиПодписей.КонтекстНаСервере = Неопределено;
		
	КонецЕсли;
	
	Возврат РезультатДействий;
	
КонецФункции

// Параметры:
//  ПараметрыПродолженияОтКлиента - см. ЭлектронныеДокументыЭДОСлужебныйКлиент.НовыеПараметрыПродолженияВыполненияДействийЭДО
// 
// Возвращаемое значение:
//  См. НовыеПараметрыПродолженияВыполненияДействийЭДОВФоне
Функция ПараметрыПродолженияДействийЭДОВФоне(ПараметрыПродолженияОтКлиента) Экспорт
	
	ПараметрыПродолженияВФоне = НовыеПараметрыПродолженияВыполненияДействийЭДОВФоне();
	ПараметрыПродолженияВФоне.НаборДействий = ПараметрыПродолженияОтКлиента.НаборДействий;
	ПараметрыПродолженияВФоне.РасшифрованныеМаркеры = ПараметрыПродолженияОтКлиента.РасшифрованныеМаркеры;
	
	Если ЗначениеЗаполнено(ПараметрыПродолженияОтКлиента.РезультатОбработкиПодписания) Тогда
		ПараметрыПродолженияВФоне.РезультатОбработкиПодписания = РезультатОбработкиПодписанияДляПродолженияВФоне(
			ПараметрыПродолженияОтКлиента.РезультатОбработкиПодписания);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПродолженияОтКлиента.РезультатОбработкиПроверкиПодписей) Тогда
		ПараметрыПродолженияВФоне.РезультатОбработкиПроверкиПодписей = РезультатОбработкиПроверкиПодписейДляПродолженияВФоне(
			ПараметрыПродолженияОтКлиента.РезультатОбработкиПроверкиПодписей);
	КонецЕсли;
	
	Возврат ПараметрыПродолженияВФоне;
	
КонецФункции

// Параметры:
//  ПараметрыПродолжения - Неопределено
//                       - см. ПараметрыПродолженияДействийЭДОВФоне
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. НовыйРезультатДействийПоЭДО
Функция ПродолжитьВыполнениеДействийЭДОПослеОбработкиРезультатов(ПараметрыПродолжения, ПараметрыВыполнения) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	РезультатДействий = НовыйРезультатДействийПоЭДО(КонтекстДиагностики);
	
	Если Не ЗначениеЗаполнено(ПараметрыПродолжения) Тогда
		Возврат РезультатДействий;
	КонецЕсли;
	
	Если НастройкиЭДО.ИспользоватьИнтеграциюОблачногоЭДО() Тогда
		ПараметрыВыполненияДляЛокальногоЭДО = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыВыполнения);
		ПараметрыВыполненияДляЛокальногоЭДО.ОбъектыДействий = ОбъектыДействийЛокальногоЭДО(
			ПараметрыВыполнения.ОбъектыДействий);
	Иначе
		ПараметрыВыполненияДляЛокальногоЭДО = ПараметрыВыполнения;
	КонецЕсли;
	
	РезультатОбработкиПодписания = ПараметрыПродолжения.РезультатОбработкиПодписания; // См. НовыйРезультатОбработкиПодписания
	
	Если ЗначениеЗаполнено(РезультатОбработкиПодписания) Тогда
		
		ПодписанныеСообщения = РезультатОбработкиПодписания.ПодписанныеСообщения;
		
		ВыбранныеСертификаты = ОбщегоНазначения.ВыгрузитьКолонку(ПодписанныеСообщения, "ВыбранныйСертификат", Истина);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыВыполненияДляЛокальногоЭДО.ВыбранныеСертификаты,
			ВыбранныеСертификаты, Истина);
		
		ОбработатьПодписанныеСообщения(ПодписанныеСообщения, РезультатДействий);
		
	КонецЕсли;
	
	РезультатОбработкиПроверкиПодписей = ПараметрыПродолжения.РезультатОбработкиПроверкиПодписей; // См. НовыйРезультатОбработкиПроверкиПодписей
	
	Если ЗначениеЗаполнено(РезультатОбработкиПроверкиПодписей) Тогда
		
		ПроверенныеПодписи = РезультатОбработкиПроверкиПодписей.ПроверенныеПодписи;
		КонтекстПроверкиПодписей = РезультатОбработкиПроверкиПодписей.КонтекстПроверкиПодписей;
		
		РезультатЗагрузки = ЗагрузитьДанныеОбъектовКонтейнеровПослеПроверкиПодписей(
			КонтекстПроверкиПодписей.ДанныеДокументов, ПроверенныеПодписи, КонтекстДиагностики,
			КонтекстПроверкиПодписей.ОтпечаткиСертификатов, КонтекстПроверкиПодписей.ПаролиСертификатов);
		
		ИнтерфейсДокументовЭДОКлиентСервер.ДополнитьИтогВыполненияДействийПоЭДО(
			РезультатДействий.Итог, РезультатЗагрузки.ИтогДействийПоЭДО);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
			РезультатДействий.ДокументыДляОбработкиИзвещений, РезультатЗагрузки.ДокументыДляОбработкиИзвещений, Истина);
		
	КонецЕсли;
	
	НаборДействийДляПродолжения = ПараметрыПродолжения.НаборДействий;
	
	Если ЗначениеЗаполнено(НаборДействийДляПродолжения) Тогда
		ПараметрыВыполненияПослеОбработки = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
		ЗаполнитьЗначенияСвойств(ПараметрыВыполненияПослеОбработки, ПараметрыВыполненияДляЛокальногоЭДО,,"НаборДействий");
		ПараметрыВыполненияПослеОбработки.НаборДействий = НаборДействийДляПродолжения;
		ПараметрыВыполненияПослеОбработки.РасшифрованныеМаркеры = ПараметрыПродолжения.РасшифрованныеМаркеры;
		ПродолжитьВыполнениеДействийПоЭДО(ПараметрыВыполненияПослеОбработки, РезультатДействий);
	КонецЕсли;
	
	Возврат РезультатДействий;
	
КонецФункции

// Параметры:
//  РезультатВыполненияДействий - см. НовыйРезультатДействийПоЭДО
// 
// Возвращаемое значение:
//  См. ЭлектронныеДокументыЭДО.НовыйРезультатОбработкиВыполненияДействийПоЭДО
Функция ОбработатьРезультатВыполненияДействийЭДО(РезультатВыполненияДействий) Экспорт
	РезультатОбработки = ЭлектронныеДокументыЭДО.НовыйРезультатОбработкиВыполненияДействийПоЭДО();
	РезультатОбработки.ИтогВыполненияДействий = РезультатВыполненияДействий.Итог;
	РезультатОбработки.ОшибкиФормирования = РезультатВыполненияДействий.ОшибкиФормирования;
	РезультатОбработки.КонтекстДиагностики = РезультатВыполненияДействий.КонтекстДиагностики;
	Возврат РезультатОбработки;
КонецФункции

#КонецОбласти

#Область ОбъектыДействий

// Параметры:
//  ОбъектыДействий - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО
//  
// Возвращаемое значение:
//  См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО
Функция ОбъектыДействийЛокальногоЭДО(ОбъектыДействий)
	
	ОбъектыДействийЛокальногоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО();
	
	ЗаполнитьЗначенияСвойств(ОбъектыДействийЛокальногоЭДО, ОбъектыДействий, "ОбъектыУчета, ТранспортныеКонтейнеры");
	
	ЗаполнитьОбъектыДействийПоУчетнымЗаписямЭДО(ОбъектыДействийЛокальногоЭДО,
		ОбъектыДействий.ИдентификаторыОрганизаций);
	
	ЗаполнитьОбъектыДействийПоПакетамДокументовЭДО(ОбъектыДействийЛокальногоЭДО,
		ОбъектыДействий.ПакетыДокументов);
	
	ЗаполнитьОбъектыДействийПоДокументамЭДО(ОбъектыДействийЛокальногоЭДО,
		ОбъектыДействий.ЭлектронныеДокументы);
		
	ЗаполнитьОбъектыДействийПоСообщениямЭДО(ОбъектыДействийЛокальногоЭДО,
		ОбъектыДействий.Сообщения);
	
	ЗаполнитьОбъектыДействийПоОписаниямДокументовЭДО(ОбъектыДействийЛокальногоЭДО,
		ОбъектыДействий.ОписанияДокументовПоФайлам);
	
	Возврат ОбъектыДействийЛокальногоЭДО;
	
КонецФункции

// Параметры:
//  ОбъектыДействий - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО
//  ИдентификаторыОрганизаций - Массив из Строка - Идентификаторы учетных записей ЭДО организаций.
//
Процедура ЗаполнитьОбъектыДействийПоУчетнымЗаписямЭДО(ОбъектыДействий, ИдентификаторыОрганизаций)
	
	Если Не ЗначениеЗаполнено(ИдентификаторыОрганизаций) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыПоИнтеграциямЭДО = УчетныеЗаписиЭДО.ИдентификаторыПоИнтеграциямЭДО(ИдентификаторыОрганизаций);
	
	ОбъектыДействий.ИдентификаторыОрганизаций = ИдентификаторыПоИнтеграциямЭДО.ИдентификаторыДляВстроенногоЭДО;
	
КонецПроцедуры

// Параметры:
//  ОбъектыДействий - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО
//  ПакетыДокументов - Массив из УникальныйИдентификатор
//
Процедура ЗаполнитьОбъектыДействийПоПакетамДокументовЭДО(ОбъектыДействий, ПакетыДокументов)
	
	Если Не ЗначениеЗаполнено(ПакетыДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыДействий.ПакетыДокументов = ПакетыДокументовЭДО.ОтобратьПакетыДокументовПоПризнакуОблачногоЭДО(
		ПакетыДокументов, Ложь);
	
КонецПроцедуры


// Параметры:
//  ОбъектыДействий - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,
//                                   ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
Процедура ЗаполнитьОбъектыДействийПоДокументамЭДО(ОбъектыДействий, ЭлектронныеДокументы)
	
	Если Не ЗначениеЗаполнено(ЭлектронныеДокументы) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыПоДокументам = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ЭлектронныеДокументы, "ЭтоОблачныйЭДО");
	
	Для Каждого РеквизитыПоДокументу Из РеквизитыПоДокументам Цикл
		Если РеквизитыПоДокументу.Значение.ЭтоОблачныйЭДО Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектыДействий.ЭлектронныеДокументы.Добавить(РеквизитыПоДокументу.Ключ);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ОбъектыДействий - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО
//  СообщенияЭДО - Массив из ДокументСсылка.СообщениеЭДО
//
Процедура ЗаполнитьОбъектыДействийПоСообщениямЭДО(ОбъектыДействий, СообщенияЭДО)
	
	Если Не ЗначениеЗаполнено(СообщенияЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСообщений = СвойстваСообщений(СообщенияЭДО);
		
	Для Каждого СвойстваСообщения Из СвойстваСообщений Цикл
		Если СвойстваСообщения.Значение.ЭтоОблачныйЭДО Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектыДействий.Сообщения.Добавить(СвойстваСообщения.Ключ);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ОбъектыДействий - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО
//  ОписанияДокументовПоФайлам - Массив из См. ЭлектронныеДокументыЭДОКлиентСервер.НовоеОписаниеДокументаДляФормированияПоФайлам
//
Процедура ЗаполнитьОбъектыДействийПоОписаниямДокументовЭДО(ОбъектыДействий, ОписанияДокументовПоФайлам)
	
	Если Не ЗначениеЗаполнено(ОписанияДокументовПоФайлам) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыЭДО = Новый Массив; // Массив из Строка
	ОписанияДокументовПоИдентификаторамЭДО = Новый Соответствие;
	
	Для Каждого ОписаниеДокумента Из ОписанияДокументовПоФайлам Цикл
		
		КлючНастройкиОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
		КлючНастройкиОтправки.Отправитель = ОписаниеДокумента.Организация;
		КлючНастройкиОтправки.Получатель = ОписаниеДокумента.Контрагент;
		КлючНастройкиОтправки.Договор = ОписаниеДокумента.Договор;
		КлючНастройкиОтправки.ВидДокумента = ОписаниеДокумента.ВидДокумента;
		
		НастройкиОтправки = НастройкиОтправкиЭДОСлужебныйПовтИспНаВызов.НастройкиОтправки(КлючНастройкиОтправки);
		Если Не ЗначениеЗаполнено(НастройкиОтправки) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторЭДО = НастройкиОтправки.ИдентификаторОтправителя;
		ОписанияДокументовПоИдентификаторуЭДО = ОписанияДокументовПоИдентификаторамЭДО[ИдентификаторЭДО];
		Если ОписанияДокументовПоИдентификаторуЭДО = Неопределено Тогда
			ОписанияДокументовПоИдентификаторуЭДО = Новый Массив;
			ОписанияДокументовПоИдентификаторамЭДО.Вставить(ИдентификаторЭДО, ОписанияДокументовПоИдентификаторуЭДО);
			ИдентификаторыЭДО.Добавить(ИдентификаторЭДО);
		КонецЕсли;
		
		ОписанияДокументовПоИдентификаторуЭДО.Добавить(ОписаниеДокумента);
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторыЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыПоИнтеграциямЭДО = УчетныеЗаписиЭДО.ИдентификаторыПоИнтеграциямЭДО(ИдентификаторыЭДО);
	
	Для Каждого ИдентифкаторИнтеграции Из ИдентификаторыПоИнтеграциямЭДО.ИдентификаторыДляВстроенногоЭДО Цикл
		
		ОписанияДокументовПоИдентификатору = ОписанияДокументовПоИдентификаторамЭДО[ИдентифкаторИнтеграции];
		ОбъектыДействий.ОписанияДокументовПоФайлам.Добавить(ОписанияДокументовПоИдентификатору);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ОбъектыДействий

#Область ОбработкаДействийПоЭДО

#Область ОбщегоНазначения

// Возвращает пустой результат действий по ЭДО.
// 
// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  Структура:
//  * Итог                      - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  * ОшибкиФормирования        - Массив из см. ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования
//  * КонтекстДиагностики       - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  * ПараметрыПодписания       - см. ПараметрыИнтерактивногоПодписания
//  * ПараметрыПроверкиПодписей - см. ПараметрыПроверкиПодписейНаКлиенте
//  * ЗашифрованныеМаркеры      - см. КриптографияБЭДКлиентСервер.НовыйНаборДанныхДляРасшифровки
//  * РасшифрованныеМаркеры      - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
//  * ДокументыДляОбработкиИзвещений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
//  * ДокументыДляОбработкиДополнительныхСведений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
//  * ПаролиСертификатов - см. КриптографияБЭД.ПаролиСертификатов
Функция НовыйРезультатДействийПоЭДО(КонтекстДиагностики) Экспорт
	РезультатДействий = Новый Структура;
	РезультатДействий.Вставить("Итог", ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
	РезультатДействий.Вставить("ОшибкиФормирования", Новый Массив);
	РезультатДействий.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	РезультатДействий.Вставить("ПараметрыПодписания", Новый Структура);
	РезультатДействий.Вставить("ПараметрыПроверкиПодписей", Новый Структура);
	РезультатДействий.Вставить("ЗашифрованныеМаркеры", КриптографияБЭДКлиентСервер.НовыйНаборДанныхДляРасшифровки());
	РезультатДействий.Вставить("РасшифрованныеМаркеры", КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных());
	РезультатДействий.Вставить("ДокументыДляОбработкиИзвещений", Новый Соответствие);
	РезультатДействий.Вставить("ДокументыДляОбработкиДополнительныхСведений", Новый Соответствие);
	РезультатДействий.Вставить("ПаролиСертификатов", Новый Соответствие);
	Возврат РезультатДействий;
КонецФункции

// Возвращает признак наличия действия в наборе.
// 
// Параметры:
//  НаборДействий - Соответствие из КлючИЗначение:
//  * Ключ - ПеречислениеСсылка.ДействияПоЭДО
//  * Значение - Булево
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьДействие(НаборДействий, Действие)
	Возврат ЭлектронныеДокументыЭДОКлиентСервер.ЕстьДействие(НаборДействий, Действие);
КонецФункции

// Параметры:
//  ПараметрыВыполнения - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий   - См. НовыйРезультатДействийПоЭДО
//
Процедура ПродолжитьВыполнениеДействийПоЭДО(ПараметрыВыполнения, РезультатДействий)
	
	Если ЭлектронныеДокументыЭДО.ВыполнениеДействийПоЭДОЗапрещено(РезультатДействий.КонтекстДиагностики) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлектронныеДокументыЭДОКлиентСервер.ОтсутствуютОбъектыДействий(ПараметрыВыполнения.ОбъектыДействий) Тогда
		Для Каждого Действие Из ПараметрыВыполнения.НаборДействий Цикл
			РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Действие.Ключ, 0);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОтпечаткиСертификатов(ПараметрыВыполнения, РезультатДействий.КонтекстДиагностики);
	
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ЗакрытьПринудительно) Тогда
		
		ВыполнитьДействиеЗакрыть(ПараметрыВыполнения, РезультатДействий);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ВернутьВРаботу) Тогда
		
		ВыполнитьДействиеВернутьВРаботу(ПараметрыВыполнения, РезультатДействий);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ОтправитьВАрхив) Тогда
		
		ВыполнитьДействиеОтправитьВАрхив(ПараметрыВыполнения, РезультатДействий);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ОтклонитьПодписание) Тогда
		
		ВыполнитьДействиеОтклонитьПодписание(ПараметрыВыполнения, РезультатДействий);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Сформировать) Тогда
		
		ВыполнитьДействиеСформировать(ПараметрыВыполнения, РезультатДействий);
		
		Если ЗначениеЗаполнено(РезультатДействий.ОшибкиФормирования) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.СформироватьИсправление) Тогда
		
		ВыполнитьДействиеСформироватьИсправление(ПараметрыВыполнения, РезультатДействий);
		
		Если ЗначениеЗаполнено(РезультатДействий.ОшибкиФормирования) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.СформироватьИзвещение) Тогда
		
		ВыполнитьДействиеСформироватьИзвещение(ПараметрыВыполнения, РезультатДействий);
		
		Если ЗначениеЗаполнено(РезультатДействий.ОшибкиФормирования) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Переформировать) Тогда
		
		ВыполнитьДействиеПереформировать(ПараметрыВыполнения, РезультатДействий);
		
		Если ЗначениеЗаполнено(РезультатДействий.ОшибкиФормирования) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Отклонить) Тогда
		
		ВыполнитьДействиеОтклонить(ПараметрыВыполнения, РезультатДействий);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Аннулировать) Тогда
		
		ВыполнитьДействиеАннулировать(ПараметрыВыполнения, РезультатДействий);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ПринятьАннулирование) Тогда
		
		ВыполнитьДействиеПринятьАннулирование(ПараметрыВыполнения, РезультатДействий);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ОтклонитьАннулирование) Тогда
		
		ВыполнитьДействиеОтклонитьАннулирование(ПараметрыВыполнения, РезультатДействий);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Перенаправить) Тогда
		
		ВыполнитьДействиеПеренаправить(ПараметрыВыполнения, РезультатДействий);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Утвердить) Тогда
		
		ВыполнитьДействиеУтвердить(ПараметрыВыполнения, РезультатДействий);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.СформироватьОтвет) Тогда
		
		ВыполнитьДействиеСформироватьОтвет(ПараметрыВыполнения, РезультатДействий);
		
		Если ЗначениеЗаполнено(РезультатДействий.ОшибкиФормирования) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Подписать) Тогда
		
		ВыполнитьДействиеПодписать(ПараметрыВыполнения, РезультатДействий);
		
		Если ЗначениеЗаполнено(РезультатДействий.ПараметрыПодписания) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ОтменитьОтправку) Тогда
		
		ВыполнитьДействиеОтменитьОтправку(ПараметрыВыполнения, РезультатДействий);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ПодготовитьКОтправке) Тогда
		
		ВыполнитьДействиеПодготовитьКОтправке(ПараметрыВыполнения, РезультатДействий);
		
		Если ЗначениеЗаполнено(РезультатДействий.ЗашифрованныеМаркеры) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ЗагрузитьПриглашения) Тогда
		
		ВыполнитьДействиеЗагрузитьПриглашения(ПараметрыВыполнения, РезультатДействий);
		
		Если ЗначениеЗаполнено(РезультатДействий.ЗашифрованныеМаркеры) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ПринятьПриглашения) Тогда
		
		ВыполнитьДействиеПринятьПриглашения(ПараметрыВыполнения, РезультатДействий);
		
		Если ЗначениеЗаполнено(РезультатДействий.ЗашифрованныеМаркеры) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Отправить) Тогда
		
		ВыполнитьДействиеОтправить(ПараметрыВыполнения, РезультатДействий);
		
		Если ЗначениеЗаполнено(РезультатДействий.ЗашифрованныеМаркеры) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Загрузить) Тогда
		
		ВыполнитьДействиеЗагрузить(ПараметрыВыполнения, РезультатДействий);
		
		Если ЗначениеЗаполнено(РезультатДействий.ЗашифрованныеМаркеры) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ИтогДействийПоЭДО - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Процедура ЗаполнитьИтогВыполненияДействияПоЭДО(ИтогДействийПоЭДО, Действие, ЭлектронныйДокумент) Экспорт
	
	ИтогДействийПоЭДО.ОбработанныеДокументы.Вставить(ЭлектронныйДокумент, Истина);
	
	Обработано = ИтогДействийПоЭДО.ОбработаноПоДействиям[Действие];
	ИтогДействийПоЭДО.ОбработаноПоДействиям.Вставить(Действие, ?(Обработано = Неопределено, 1, Обработано + 1));
	
КонецПроцедуры

// Возвращает преобразованный результат действий по ЭДО
// 
// Параметры:
//  РезультатДействийПоЭДОФоне - См. НовыйРезультатДействийПоЭДО
// Возвращаемое значение:
//  См. НовыйРезультатДействийПоЭДО
Функция ОбработатьРезультатДействийПоЭДОФоне(РезультатДействийПоЭДОФоне) Экспорт
	
	КонтекстПодписания = РезультатДействийПоЭДОФоне.КонтекстПодписания;
	
	Если ЗначениеЗаполнено(КонтекстПодписания) Тогда
		
		ПоместитьДанныеДляПодписанияВХранилище(КонтекстПодписания);
		
		КонтекстПодписания.АдресКонтекстаНаСервере = ПоместитьВоВременноеХранилище(
			КонтекстПодписания.КонтекстНаСервере, Новый УникальныйИдентификатор);
		
		КонтекстПодписания.КонтекстНаСервере = Неопределено;
		
	КонецЕсли;
	
	Возврат РезультатДействийПоЭДОФоне;
	
КонецФункции

// Заполнить отпечатки сертификатов.
// 
// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ЗаполнитьОтпечаткиСертификатов(ПараметрыВыполнения, КонтекстДиагностики)
	
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	
	Если Не ЭлектронныеДокументыЭДОКлиентСервер.ТребуютсяОтпечаткиСертификатовДляНабораДействий(НаборДействий) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперации = НСтр("ru = 'Выполнение действий по ЭДО'");
	ПараметрыВыполнения.ОтпечаткиСертификатов = КриптографияБЭД.ПолучитьОтпечаткиСертификатов(ВидОперации,
		Неопределено, ПараметрыВыполнения.ОтпечаткиСертификатов);
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * Состояние - Массив из ПеречислениеСсылка.СостоянияСообщенийЭДО
//  * ВидСообщения - Массив из СправочникСсылка.ВидыДокументовЭДО
//  * ТипЭлементаРегламента - Массив из ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  * ПолучатьСообщенияПоИдентификаторамОрганизаций - Булево
//  * ПолучатьСообщенияПоПакетамДокументов - Булево
Функция НовыйОтборСообщенийДляОбработкиДействия()
	Отбор = Новый Структура;
	Отбор.Вставить("Состояние", Новый Массив);
	Отбор.Вставить("ВидСообщения", Новый Массив);
	Отбор.Вставить("ТипЭлементаРегламента", Новый Массив);
	Отбор.Вставить("ПолучатьСообщенияПоИдентификаторамОрганизаций", Ложь);
	Отбор.Вставить("ПолучатьСообщенияПоПакетамДокументов", Ложь);
	Возврат Отбор;
КонецФункции

// Параметры:
//  ОбъектыДействий - Структура:
//  * ОбъектыУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * ПакетыДокументов - Массив из УникальныйИдентификатор
//  * ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Сообщения - Массив из ДокументСсылка.СообщениеЭДО
//  * ИдентификаторыОрганизаций - Массив из Строка
//  Отбор - см. НовыйОтборСообщенийДляОбработкиДействия
//  ИмяВременнойТаблицы - Строка
//  СвойстваСообщения - Строка
// 
// Возвращаемое значение:
//  См. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросСообщенийДляОбработкиДействия(ОбъектыДействий, Отбор, ИмяВременнойТаблицы = "", СвойстваСообщения = "Ссылка")
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	
	ТекстыЗапросов = Новый Массив;
	ТекстыВспомогательныхЗапросов = Новый Массив;
	
	ИмяТаблицыОбъектаУчета = Неопределено;
	Если ЗначениеЗаполнено(ОбъектыДействий.ОбъектыУчета) Тогда
		
		ИмяПараметраОтбора = "ОтборОбъектыУчета";
		
		ИмяТаблицыОбъектаУчета = "ЭлектронныеДокументыОбъектовУчета";
		
		ОтборДокументов = ИнтеграцияЭДО.НовыйОтборАктуальныхЭлектронныхДокументов();
		ОтборДокументов.ОбъектыУчета = "&ОтборОбъектыУчета";
		ТекстыВспомогательныхЗапросов.Добавить(ИнтеграцияЭДО.ЗапросАктуальныхЭлектронныхДокументов(
			ИмяТаблицыОбъектаУчета, ОтборДокументов).Текст);
		
		ОписаниеЗапроса.СлужебныеПараметры.Вставить(ИмяПараметраОтбора, ОбъектыДействий.ОбъектыУчета);
		
		ТекстЗапроса = ТекстЗапросаСообщенийПоОбъектамУчета(
			?(ЗначениеЗаполнено(ТекстыЗапросов), "", ИмяВременнойТаблицы));
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.ЭлектронныеДокументы) Тогда
		
		ИмяПараметраОтбора = "ОтборЭлектронныеДокументы";
		
		ОписаниеЗапроса.СлужебныеПараметры.Вставить(ИмяПараметраОтбора, ОбъектыДействий.ЭлектронныеДокументы);
		
		ТекстЗапроса = ТекстЗапросаСообщенийПоЭлектроннымДокументам(ИмяПараметраОтбора,
			?(ЗначениеЗаполнено(ТекстыЗапросов), "", ИмяВременнойТаблицы));
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.Сообщения) Тогда
		
		ИмяПараметраОтбора = "ОтборСообщения";
		
		ОписаниеЗапроса.СлужебныеПараметры.Вставить(ИмяПараметраОтбора, ОбъектыДействий.Сообщения);
		
		ТекстЗапроса = ТекстЗапросаСообщенийПоСсылкамСообщений(ИмяПараметраОтбора,
			?(ЗначениеЗаполнено(ТекстыЗапросов), "", ИмяВременнойТаблицы));
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если Отбор.ПолучатьСообщенияПоИдентификаторамОрганизаций
		И ЗначениеЗаполнено(ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		ИмяПараметраОтбора = "ИдентификаторыОрганизаций";
		
		ОписаниеЗапроса.СлужебныеПараметры.Вставить(ИмяПараметраОтбора, ОбъектыДействий.ИдентификаторыОрганизаций);
		
		ТекстЗапроса = ТекстЗапросаСообщенийПоИдентификаторамОрганизаций(ИмяПараметраОтбора,
			?(ЗначениеЗаполнено(ТекстыЗапросов), "", ИмяВременнойТаблицы));
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если Отбор.ПолучатьСообщенияПоПакетамДокументов
		И ЗначениеЗаполнено(ОбъектыДействий.ПакетыДокументов) Тогда
		
		ИмяПараметраОтбора = "ПакетыДокументов";
		
		ОписаниеЗапроса.СлужебныеПараметры.Вставить(ИмяПараметраОтбора, ОбъектыДействий.ПакетыДокументов);
		
		ТекстЗапроса = ТекстЗапросаСообщенийПоПакетамДокументов(ИмяПараметраОтбора,
			?(ЗначениеЗаполнено(ТекстыЗапросов), "", ИмяВременнойТаблицы));
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ОписаниеЗапроса.Текст = СтрСоединить(ТекстыЗапросов, "
		|
		|ОБЪЕДИНИТЬ
		|");
	
	УстановитьПоляВыбораСвойствСообщенийДляОбработкиДействия(ОписаниеЗапроса, СвойстваСообщения, ИмяТаблицыОбъектаУчета);
	
	УстановитьУсловиеОтбораСообщенийДляОбработкиДействия(ОписаниеЗапроса, Отбор);
	
	Если ЗначениеЗаполнено(ТекстыВспомогательныхЗапросов) Тогда
		ТекстыВспомогательныхЗапросов.Добавить(ОписаниеЗапроса.Текст);
		ОписаниеЗапроса.Текст = СтрСоединить(ТекстыВспомогательныхЗапросов,
			ОбщегоНазначения.РазделительПакетаЗапросов());
	КонецЕсли;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Возвращает описание запроса сообщений и пакетов.
// 
// Параметры:
//  ОбъектыДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО
//  Отбор - см. НовыйОтборСообщенийДляОбработкиДействия
// 
// Возвращаемое значение:
//  см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
//
Функция ЗапросСообщенийИПакетовДляОбработкиДействия(ОбъектыДействий, Отбор)
	
	ТекстыЗапросов = Новый Массив;
	ИмяВременнойТаблицы = "ВТ_СообщенияДляОбработки";
	
	ОписаниеЗапросаСообщений = ЗапросСообщенийДляОбработкиДействия(ОбъектыДействий, Отбор, ИмяВременнойТаблицы,
		"Ссылка, ЭлектронныйДокумент, ТипЭлементаРегламента");
	
	ТекстыЗапросов.Добавить(ОписаниеЗапросаСообщений.Текст);
	ТекстЗапросаПакетов = ТекстЗапросаИдентификаторовПакетовПоСообщениямЭДО(ИмяВременнойТаблицы);
	ТекстыЗапросов.Добавить(ТекстЗапросаПакетов);	
	ОписаниеЗапросаСообщений.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());	
	
	Возврат ОписаниеЗапросаСообщений;
	
КонецФункции

// Возвращает текст запроса для получения сообщений по объектам учета.
//
// Параметры:
//  ИмяВременнойТаблицы - Строка - имя временной таблицы в которую будет помещен результат запроса
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаСообщенийПоОбъектамУчета(ИмяВременнойТаблицы = "")
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&СвойстваСообщения
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭлектронныеДокументыОбъектовУчета КАК ЭлектронныеДокументыОбъектовУчета
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныеДокументыОбъектовУчета.ЭлектронныйДокумент
		|		И &УсловиеОтбора";
	
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяВременнойТаблицы", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения сообщений по электронным документам.
//
// Параметры:
//  ИмяПараметраОтбора - Строка - имя параметра для отбора
//  ИмяВременнойТаблицы - Строка - имя временной таблицы в которую будет помещен результат запроса
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаСообщенийПоЭлектроннымДокументам(ИмяПараметраОтбора, ИмяВременнойТаблицы = "")
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&СвойстваСообщения
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент В (&ИмяПараметраОтбора)
		|	И &УсловиеОтбора";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметраОтбора", ИмяПараметраОтбора);
	
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяВременнойТаблицы", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения сообщений по ссылкам на них.
//
// Параметры:
//  ИмяПараметраОтбора - Строка - имя параметра для отбора
//  ИмяВременнойТаблицы - Строка - имя временной таблицы в которую будет помещен результат запроса
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаСообщенийПоСсылкамСообщений(ИмяПараметраОтбора, ИмяВременнойТаблицы = "")
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&СвойстваСообщения
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.Ссылка В (&ИмяПараметраОтбора)
		|	И &УсловиеОтбора";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметраОтбора", ИмяПараметраОтбора);
	
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяВременнойТаблицы", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения сообщений по идентификаторам организаций.
//
// Параметры:
//  ИмяПараметраОтбора - Строка - имя параметра для отбора
//  ИмяВременнойТаблицы - Строка - имя временной таблицы в которую будет помещен результат запроса
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаСообщенийПоИдентификаторамОрганизаций(ИмяПараметраОтбора, ИмяВременнойТаблицы = "")
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&СвойстваСообщения
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ЭлектронныйДокументИсходящийЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
		|		И &УсловиеОтбора
		|ГДЕ
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации В (&ИмяПараметраОтбора)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&СвойстваСообщения
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ЭлектронныйДокументВходящийЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
		|		И &УсловиеОтбора
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации В (&ИмяПараметраОтбора)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметраОтбора", ИмяПараметраОтбора);
	
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяВременнойТаблицы", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения сообщений из пакетов.
//
// Параметры:
//  ИмяПараметраОтбора - Строка - имя параметра для отбора
//  ИмяВременнойТаблицы - Строка - имя временной таблицы в которую будет помещен результат запроса
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаСообщенийПоПакетамДокументов(ИмяПараметраОтбора, ИмяВременнойТаблицы = "")
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&СвойстваСообщения
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО СоставПакетов.ЭлектронныйДокумент = СообщениеЭДО.ЭлектронныйДокумент
		|		И &УсловиеОтбора
		|ГДЕ
		|	СоставПакетов.ИдентификаторПакета В (&ИмяПараметраОтбора)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметраОтбора", ИмяПараметраОтбора);
	
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяВременнойТаблицы", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса идентификаторов пакетов по сообщениям ЭДО
// идентификатор заполняется только для сообщений имеющих тип регламента "информация отправителя".
// 
// Параметры:
//  ИмяВременнойТаблицыСообщений - Строка - имя временной таблицы сообщений.
// 
// Возвращаемое значение:
//  Строка - текст запроса идентификаторов пакетов по сообщениям ЭДО.
//
Функция ТекстЗапросаИдентификаторовПакетовПоСообщениямЭДО(ИмяВременнойТаблицыСообщений)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СообщенияЭДО.Ссылка КАК Ссылка,
	|	СоставПакетовДокументовЭДО.ИдентификаторПакета КАК ИдентификаторПакета
	|ИЗ
	|	&ИмяВременнойТаблицы КАК СообщенияЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
	|		ПО (СообщенияЭДО.ЭлектронныйДокумент = СоставПакетовДокументовЭДО.ЭлектронныйДокумент)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяВременнойТаблицы", ИмяВременнойТаблицыСообщений);
	
	Возврат ТекстЗапроса;
	
КонецФункции	

// Параметры:
//  ОписаниеЗапроса - См. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
//  СвойстваСообщения - Строка
//  ИмяТаблицыОбъектаУчета - Строка
Процедура УстановитьПоляВыбораСвойствСообщенийДляОбработкиДействия(ОписаниеЗапроса, СвойстваСообщения, ИмяТаблицыОбъектаУчета = Неопределено)
	
	ПоляВыбора = Новый Массив;
	СтруктураСвойств = Новый Структура(СвойстваСообщения);
	Разделитель = "," + Символы.ПС;
	Для Каждого Элемент Из СтруктураСвойств Цикл
		ПоляВыбора.Добавить("СообщениеЭДО." + Элемент.Ключ);
	КонецЦикла;
	Если ИмяТаблицыОбъектаУчета <> Неопределено Тогда
		ПоляВыбора.Добавить(ИмяТаблицыОбъектаУчета + ".ОбъектУчета");	
	КонецЕсли;
	ОписаниеЗапроса.Текст = СтрЗаменить(ОписаниеЗапроса.Текст, "&СвойстваСообщения", СтрСоединить(ПоляВыбора, Разделитель));
	
КонецПроцедуры

// Параметры:
//  ОписаниеЗапроса - см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
//  Отбор - см. НовыйОтборСообщенийДляОбработкиДействия
Процедура УстановитьУсловиеОтбораСообщенийДляОбработкиДействия(ОписаниеЗапроса, Отбор)
	
	УсловиеОтбора = Новый Массив;
	
	ДобавитьУсловиеОтбораСообщенийДляОбработкиДействия(ОписаниеЗапроса, УсловиеОтбора, Отбор, "Состояние");
	
	ДобавитьУсловиеОтбораСообщенийДляОбработкиДействия(ОписаниеЗапроса, УсловиеОтбора, Отбор, "ВидСообщения");
	
	ДобавитьУсловиеОтбораСообщенийДляОбработкиДействия(ОписаниеЗапроса, УсловиеОтбора, Отбор, "ТипЭлементаРегламента");
	
	Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
		ОписаниеЗапроса.Текст = СтрЗаменить(ОписаниеЗапроса.Текст, "&УсловиеОтбора", СтрСоединить(УсловиеОтбора, " И "));
	Иначе
		ОписаниеЗапроса.СлужебныеПараметры.Вставить("УсловиеОтбора", Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ОписаниеЗапроса - см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
//  УсловиеОтбора - Массив из Строка
//  Отбор - см. НовыйОтборСообщенийДляОбработкиДействия
//  ИмяСвойства - Строка
Процедура ДобавитьУсловиеОтбораСообщенийДляОбработкиДействия(ОписаниеЗапроса, УсловиеОтбора, Отбор, ИмяСвойства)
	ЗначениеОтбора = Отбор[ИмяСвойства];
	КоличествоЗначений = ЗначениеОтбора.Количество();
	Если КоличествоЗначений = 0 Тогда
		Возврат;
	КонецЕсли;
	ИмяПараметра = "Отбор" + ИмяСвойства;
	ОдноЗначение = КоличествоЗначений = 1;
	УсловиеОтбора.Добавить(СтрШаблон("СообщениеЭДО.%1 %2 (&%3)", ИмяСвойства, ?(ОдноЗначение,"=","В"), ИмяПараметра));
	ОписаниеЗапроса.СлужебныеПараметры.Вставить(ИмяПараметра, ?(ОдноЗначение, ЗначениеОтбора[0], ЗначениеОтбора));
КонецПроцедуры

// Параметры:
//  ОбъектыДействий - см. ЗапросСообщенийДляОбработкиДействия.ОбъектыДействий
//  Отбор - см. ЗапросСообщенийДляОбработкиДействия.Отбор
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//  * Ссылка - ДокументСсылка.СообщениеЭДО
Функция ВыборкаСообщенийДляОбработкиДействия(ОбъектыДействий, Отбор)
	ОписаниеЗапроса = ЗапросСообщенийДляОбработкиДействия(ОбъектыДействий, Отбор);
	Возврат ОбщегоНазначенияБЭД.ВыполнитьЗапрос(ОписаниеЗапроса).Выбрать();
КонецФункции

// Параметры:
//  ОбъектыДействий - см. ЗапросСообщенийДляОбработкиДействия.ОбъектыДействий
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//  * Ссылка - ДокументСсылка.СообщениеЭДО
Функция ВыборкаДокументовДляОбработкиДействия(ОбъектыДействий)
	Отбор = НовыйОтборСообщенийДляОбработкиДействия();
	Отбор.ТипЭлементаРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(Отбор.ТипЭлементаРегламента);	
	КонецЕсли;
	ОписаниеЗапроса = ЗапросСообщенийДляОбработкиДействия(ОбъектыДействий, Отбор,,"ЭлектронныйДокумент");
	Возврат ОбщегоНазначенияБЭД.ВыполнитьЗапрос(ОписаниеЗапроса).Выбрать();
КонецФункции

// Возврашает выборку сообщений и пакетов для обработки действия.
// 
// Параметры:
//  ОбъектыДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО
//  Отбор - см. НовыйОтборСообщенийДляОбработкиДействия
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - Выборка сообщений и пакетов для обработки действия
//
Функция ВыборкаСообщенийИПакетовДляОбработкиДействия(ОбъектыДействий, Отбор)
	ОписаниеЗапроса = ЗапросСообщенийИПакетовДляОбработкиДействия(ОбъектыДействий, Отбор);
	Возврат ОбщегоНазначенияБЭД.ВыполнитьЗапрос(ОписаниеЗапроса).Выбрать();
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Ссылка - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * ПолноеИмяФайла - Строка
//  * ДатаСоздания - Дата
Функция СвойстваФайлаОснованияСлужебногоДокумента()
	Свойства = Новый Структура;
	Свойства.Вставить("Ссылка", Справочники.СообщениеЭДОПрисоединенныеФайлы.ПустаяСсылка());
	Свойства.Вставить("ПолноеИмяФайла", "");
	Свойства.Вставить("ДатаСоздания", Дата(1,1,1));
	Возврат Свойства;
КонецФункции

// Параметры:
//  ПараметрыДокумента - См. НовыеПараметрыДокументаДляЗагрузки
//  СвойстваФайлаОснования - См. СвойстваФайлаОснованияСлужебногоДокумента
//  ДанныеУчастниковЭДО - См. НовыеДанныеУчастниковЭДО
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  Комментарий - Строка
// 
// Возвращаемое значение:
//  ДокументОбъект.СообщениеЭДО
Функция СоздатьСлужебноеСообщение(ПараметрыДокумента, СвойстваФайлаОснования, ДанныеУчастниковЭДО, ТипДокумента, ТипЭлементаРегламента, Комментарий = "")
	
	ОписаниеСообщения = ОписаниеСлужебногоСообщения(ДанныеУчастниковЭДО, СвойстваФайлаОснования,
		ТипДокумента, ТипЭлементаРегламента, Комментарий);
	
	Если ОписаниеСообщения.Данные.ЕстьОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СообщениеОбъект = СоздатьСообщение(ОписаниеСообщения, ПараметрыДокумента.Ссылка, ПараметрыДокумента);
	
	Возврат СообщениеОбъект;
	
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаСвойствОсновногоФайла()
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлы.Ссылка,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла,
		|	ПрисоединенныеФайлы.ДатаСоздания
		|ИЗ
		|	Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|ГДЕ
		|	ПрисоединенныеФайлы.Ссылка = &ОсновнойФайл";
	Возврат ТекстЗапроса;
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаСвойствСообщенияИнформацииОтправителя()
	Возврат
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка,
		|	СообщениеЭДО.Статус
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И СообщениеЭДО.ТипЭлементаРегламента В (&ТитулыОтправителя)";
КонецФункции

// Параметры:
//  ЭтоВходящийЭДО - Булево
// 
// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаУчастниковЭДО(ЭтоВходящийЭДО)
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	УчетныеЗаписиЭДО.Организация КАК Организация,
		|	ПриглашенияЭДО.Контрагент КАК Контрагент
		|ИЗ
		|	&ИмяТаблицыДокументаЭДО КАК ДокументЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияЭДО
		|		ПО ДокументЭДО.ИдентификаторОрганизации = ПриглашенияЭДО.ИдентификаторОрганизации
		|			И ДокументЭДО.ИдентификаторКонтрагента = ПриглашенияЭДО.ИдентификаторКонтрагента
		|			И (ДокументЭДО.ИдентификаторОрганизации <> ДокументЭДО.ИдентификаторКонтрагента)
		|			И (ДокументЭДО.Ссылка = &ЭлектронныйДокумент)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО ДокументЭДО.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
		|ГДЕ
		|	ДокументЭДО.Ссылка = &ЭлектронныйДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УчетныеЗаписиЭДО.Организация,
		|	УчетныеЗаписиЭДО.Организация
		|ИЗ
		|	&ИмяТаблицыДокументаЭДО КАК ДокументЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО ДокументЭДО.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
		|			И (ДокументЭДО.ИдентификаторОрганизации = ДокументЭДО.ИдентификаторКонтрагента)
		|ГДЕ
		|	ДокументЭДО.Ссылка = &ЭлектронныйДокумент";
	Возврат СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыДокументаЭДО",
		ЭлектронныеДокументыЭДО.ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО));
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаУчастниковЭДОПоИдентификаторам()
	Возврат
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭДО.Организация КАК Организация,
	|	ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
	|		ПО ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации
	|			И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента = ЭлектронныйДокументВходящийЭДО.ИдентификаторКонтрагента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	|		ПО ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
	|ГДЕ
	|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокументооборота = &ИдентификаторДокументооборота
	|	И ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчетныеЗаписиЭДО.Организация,
	|	ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент
	|ИЗ
	|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
	|		ПО ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации
	|			И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента = ЭлектронныйДокументИсходящийЭДО.ИдентификаторКонтрагента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	|		ПО ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
	|ГДЕ
	|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокументооборота = &ИдентификаторДокументооборота
	|	И ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации";

КонецФункции

// Параметры:
//  ПараметрыВыполнения - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
// 
// Возвращаемое значение:
//  Строка
Функция КомментарийДействия(ПараметрыВыполнения, Действие)
	Комментарий = "";
	ДополнительныеПараметры = ПараметрыВыполнения.ДополнительныеПараметрыДействий[Действие];
	Если ДополнительныеПараметры <> Неопределено
		И ЗначениеЗаполнено(ДополнительныеПараметры.Комментарий) Тогда
		Комментарий = ДополнительныеПараметры.Комментарий;
	КонецЕсли;
	Возврат Комментарий;
КонецФункции

// Параметры:
//  ПараметрыВыполнения - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
//  ИмяПараметра - Строка
// 
// Возвращаемое значение:
//  Неопределено,Произвольный
Функция ДополнительныйПараметрДействия(ПараметрыВыполнения, Действие, ИмяПараметра)
	Результат = Неопределено;
	ДополнительныеПараметры = ПараметрыВыполнения.ДополнительныеПараметрыДействий[Действие];
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство(ИмяПараметра) Тогда
		Результат = ДополнительныеПараметры[ИмяПараметра];
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ЭтоВходящийЭДО - Булево
Процедура ЗаблокироватьДанныеДокументаДляИзменения(ЭлектронныйДокумент, ЭтоВходящийЭДО)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
	ЭлементБлокировки.УстановитьЗначение("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	ИмяТаблицыДокумента = ЭлектронныеДокументыЭДО.ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО);
	ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицыДокумента);
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлектронныйДокумент);
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ЭтоВходящийЭДО - Булево
Процедура ЗаблокироватьДанныеСообщенияДляИзменения(Сообщение, ЭлектронныйДокумент, ЭтоВходящийЭДО)
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Сообщение);
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
	ЭлементБлокировки.УстановитьЗначение("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	ЭлементБлокировки = Блокировка.Добавить(ЭлектронныеДокументыЭДО.ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО));
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлектронныйДокумент);
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Параметры:
//  ДокументыПакета - См. ПакетыДокументовЭДО.ДокументыПакета
Процедура ЗаблокироватьДокументыПакетаДляИзменения(ДокументыПакета)
	
	Блокировка = Новый БлокировкаДанных;
	ИмяТаблицыДокументаЭДО = "";
	Для Каждого ЭлектронныйДокумент Из ДокументыПакета Цикл
		Если ПустаяСтрока(ИмяТаблицыДокументаЭДО) Тогда
			ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент);
			ИмяТаблицыДокументаЭДО = ЭлектронныеДокументыЭДО.ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО);
		КонецЕсли;
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицыДокументаЭДО);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлектронныйДокумент);
	КонецЦикла;
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Параметры:
//  ДокументыПакета - См. ПакетыДокументовЭДО.ДокументыПакета
Процедура ЗаблокироватьСообщенияПакетаДляИзменения(ДокументыПакета)
	
	Блокировка = Новый БлокировкаДанных;
	ИмяТаблицыДокументаЭДО = "";
	Для Каждого ЭлектронныйДокумент Из ДокументыПакета Цикл
		Если ПустаяСтрока(ИмяТаблицыДокументаЭДО) Тогда
			ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент);
			ИмяТаблицыДокументаЭДО = ЭлектронныеДокументыЭДО.ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО);
		КонецЕсли;
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицыДокументаЭДО);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлектронныйДокумент);
		
		ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
		ЭлементБлокировки.УстановитьЗначение("ЭлектронныйДокумент", ЭлектронныйДокумент);
	КонецЦикла;
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Параметры:
//  ПакетДокументов - УникальныйИдентификатор
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  - Неопределено - если состояния документов пакета неоднородны.
//  - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция ДокументыПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики) Экспорт
	
	ПакетыДокументовЭДО.БлокировкаПакетаДокументов(ПакетДокументов).Заблокировать();
	
	ДокументыПакета = ПакетыДокументовЭДО.ДокументыПакета(ПакетДокументов);
	
	ЗаблокироватьДокументыПакетаДляИзменения(ДокументыПакета);
	
	НаборСостояний = НаборСостоянийДокументов(ДокументыПакета);
	
	СостоянияОднородны = ПакетыДокументовЭДО.СостоянияДокументовПакетаОднородны(НаборСостояний, ПакетДокументов,
		Действие, КонтекстДиагностики);
	
	Если Не СостоянияОднородны Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДокументыПакета;
	
КонецФункции

// Параметры:
//  ПакетДокументов - УникальныйИдентификатор
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  Состояние - ПеречислениеСсылка.СостоянияСообщенийЭДО
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
// 
// Возвращаемое значение:
//  Неопределено,Массив из ДокументСсылка.СообщениеЭДО
Функция СообщенияПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики, Состояние = Неопределено, ТипЭлементаРегламента = Неопределено)
	
	ДокументыПакета = ДокументыПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики);
	Если Не ЗначениеЗаполнено(ДокументыПакета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаблокироватьСообщенияПакетаДляИзменения(ДокументыПакета);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ДокументыПакета);
	
	Отбор = ЭлектронныеДокументыЭДО.НовыйОтборСообщенийДокументов();
	Если ЗначениеЗаполнено(Состояние) Тогда
		Отбор.Состояния.Добавить(Состояние);
		Запрос.УстановитьПараметр("Состояния", Отбор.Состояния);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипЭлементаРегламента) Тогда
		Отбор.ТипыЭлементовРегламента.Добавить(ТипЭлементаРегламента);
		Запрос.УстановитьПараметр("ТипыЭлементовРегламента", Отбор.ТипыЭлементовРегламента);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаСообщенийДокументов(Отбор);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ТекущаяДатаСеанса - Дата
Процедура УстановитьДатуАннулирования(ЭлектронныйДокумент, ТекущаяДатаСеанса)
	
	ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
	ДокументОбъект.ДатаАннулирования = ТекущаяДатаСеанса;
	ДокументОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСМаршрутамиПодписания

// Параметры:
//  Отправитель - ОпределяемыйТип.Организация
//  Получатель - ОпределяемыйТип.Организация
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Подписант - СправочникСсылка.Пользователи
//  * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * Организация - ОпределяемыйТип.Организация
Функция СписокПодписантовИнтеркампани(Отправитель, Получатель) Экспорт
	
	СписокПодписантов = Новый ТаблицаЗначений;
	СписокПодписантов.Колонки.Добавить("Подписант", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	СписокПодписантов.Колонки.Добавить("Сертификат", 
		Новый ОписаниеТипов("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования"));
	СписокПодписантов.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
	
	СписокПодписантов.Добавить().Организация = Отправитель;
	СписокПодписантов.Добавить().Организация = Получатель;
	
	Возврат СписокПодписантов;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ВесМаршрута - Число
//  * ТаблицаПодписания - См.  МаршрутыПодписанияБЭД.СформироватьМаршрутПодписанияЭД
Функция НовыеПараметрыМаршрутаПодписания()
	ПараметрыМаршрута = Новый Структура;
	ПараметрыМаршрута.Вставить("ВесМаршрута", 0);
	ПараметрыМаршрута.Вставить("ТаблицаПодписания", Новый ТаблицаЗначений);
	Возврат ПараметрыМаршрута;
КонецФункции

// Параметры:
//  СвойстваСообщения - Структура:
//  * Ссылка - ДокументСсылка.СообщениеЭДО
//  * Состояние - ПеречислениеСсылка.СостоянияСообщенийЭДО
//  МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//  СписокПодписантов - Массив из СправочникСсылка.Пользователи
// 
// Возвращаемое значение:
//  См. НовыеПараметрыМаршрутаПодписания
Функция СформироватьМаршрутПодписания(СвойстваСообщения, МаршрутПодписания = Неопределено, СписокПодписантов = Неопределено) Экспорт
	
	ПараметрыМаршрута = НовыеПараметрыМаршрутаПодписания();
	
	Если СвойстваСообщения.Состояние <> Перечисления.СостоянияСообщенийЭДО.Подписание Тогда
		Возврат ПараметрыМаршрута;
	КонецЕсли;
	
	Если МаршрутПодписания = Неопределено Тогда
		МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутОднойДоступнойПодписью();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокПодписантов) Тогда
		ПараметрыМаршрута.ТаблицаПодписания = МаршрутыПодписанияБЭД.СформироватьМаршрутПодписанияЭД(
			СвойстваСообщения.Ссылка, МаршрутПодписания, Перечисления.ТребованияКПодписаниюЭД.И,
			СписокПодписантов, ПараметрыМаршрута.ВесМаршрута);
	Иначе
		ПараметрыМаршрута.ТаблицаПодписания = МаршрутыПодписанияБЭД.СформироватьМаршрутПодписанияЭД(
			СвойстваСообщения.Ссылка, МаршрутПодписания,,,ПараметрыМаршрута.ВесМаршрута);
	КонецЕсли;
	
	Возврат ПараметрыМаршрута;
	
КонецФункции

// Обновляет маршрут подписания.
// 
// Параметры:
//  СвойстваДокумента - ДокументОбъект.СообщениеЭДО
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат, используемый при
//  подписании сообщения. 
//  ОрганизацияДляПодписания - СправочникСсылка.Организации - организация, используемая при отсутствии организации 
//  в сертификате. Необязательный: используется для передачи далее по стеку вызовов.
//  
// Возвращаемое значение:
//  См. НовыеПараметрыМаршрутаПодписания
Функция ОбновитьМаршрутПодписания(СвойстваДокумента, Сертификат, ОрганизацияДляПодписания = Неопределено)
	
	ПараметрыМаршрута = НовыеПараметрыМаршрутаПодписания();
	
	Если СвойстваДокумента.Состояние <> Перечисления.СостоянияСообщенийЭДО.Подписание Тогда
		Возврат ПараметрыМаршрута;
	КонецЕсли;
	
	ПараметрыМаршрута.ТаблицаПодписания = МаршрутыПодписанияБЭД.ОбновитьМаршрутПриПодписании(СвойстваДокумента.Ссылка,
		Сертификат, ПараметрыМаршрута.ВесМаршрута, ОрганизацияДляПодписания);
	
	Возврат ПараметрыМаршрута;
	
КонецФункции

// Параметры:
//  СообщениеОбъект - ДокументОбъект.СообщениеЭДО
//  ТаблицаПодписантов - См. МаршрутыПодписанияБЭД.СформироватьМаршрутПодписанияЭД
Процедура ОповеститьОДокументеКПодписанию(СообщениеОбъект, ТаблицаПодписантов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаПодписантов) Тогда
		Возврат;
	КонецЕсли;
	
	ПодписантыДляОповещения = МаршрутыПодписанияБЭД.ПодписантыДляОповещения(ТаблицаПодписантов, СообщениеОбъект.Ссылка);
	Если Не ЗначениеЗаполнено(ПодписантыДляОповещения) Тогда
		Возврат;
	КонецЕсли;
	
	СписокДокументов = Новый СписокЗначений;
	СвойстваДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеОбъект.ЭлектронныйДокумент,
		"ВидДокумента, НомерДокумента, ДатаДокумента");
	СписокДокументов.Добавить(СообщениеОбъект.Ссылка,
		ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(СвойстваДокумента));
	
	ОповещенияОСобытияхЭДО.ОповеститьОДокументахКПодписанию(ПодписантыДляОповещения, СписокДокументов);
	
	Для Каждого Подписант Из ПодписантыДляОповещения Цикл
		МаршрутыПодписанияБЭД.ЗафиксироватьФактОповещенияУчастникаМаршрута(СообщениеОбъект.Ссылка, Подписант);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Сформировать

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ВыполнитьДействиеСформировать(ПараметрыВыполнения, РезультатДействий)
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета) Тогда
		ВыполнитьДействиеСформироватьПоОбъектамУчета(ПараметрыВыполнения, РезультатДействий);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОписанияДокументовПоФайлам) Тогда
		ВыполнитьДействиеСформироватьПоФайлам(ПараметрыВыполнения, РезультатДействий);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ВыполнитьДействиеСформироватьПоОбъектамУчета(ПараметрыВыполнения, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.Сформировать;
	
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Действие, 0);
	
	РезультатПроверки = ИнтеграцияЭДО.ПроверкаГотовностиКДокументообороту(
		ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета);
	
	РезультатыЗапросаНастроек = РезультатыЗапросаНастроекОбъектовУчета(ПараметрыВыполнения, РезультатПроверки.Готовые);
	
	НаборПараметровФормирования = ПараметрыФормированияДокумента(ПараметрыВыполнения,
		РезультатыЗапросаНастроек, РезультатДействий);
		
	Если ЗначениеЗаполнено(РезультатДействий.ОшибкиФормирования) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработанныеОбъектыУчета = Новый ТаблицаЗначений;
	ОбработанныеОбъектыУчета.Колонки.Добавить("ОбъектУчета");
	ОбработанныеОбъектыУчета.Колонки.Добавить("ВидСообщения");
	ОбработанныеОбъектыУчета.Колонки.Добавить("Организация");
	ОбработанныеОбъектыУчета.Колонки.Добавить("Контрагент");
	ОбработанныеОбъектыУчета.Колонки.Добавить("ДоговорКонтрагента");
	
	ИдентификаторыУчетныхЗаписей = Новый Массив;
	Для Каждого ПараметрыФормирования Из НаборПараметровФормирования Цикл
		ИдентификаторыУчетныхЗаписей.Добавить(ПараметрыФормирования.НастройкиДокумента.ИдентификаторОрганизации);
	КонецЦикла;
	ИдентификаторыПоИнтеграциямЭДО = УчетныеЗаписиЭДО.ИдентификаторыПоИнтеграциямЭДО(ИдентификаторыУчетныхЗаписей);
	
	ВидОперации = НСтр("ru = 'Формирование электронных документов.'");
	
	Для Каждого ПараметрыФормирования Из НаборПараметровФормирования Цикл
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось начать новый электронный документ на основании %1.'"),
			ПараметрыФормирования.ОбъектУчета);
		ИдентификаторОрганизации = ПараметрыФормирования.НастройкиДокумента.ИдентификаторОрганизации;
		Если ИдентификаторыПоИнтеграциямЭДО.ИдентификаторыДляОблачногоЭДО.Найти(ИдентификаторОрганизации) <> Неопределено
			И Не НастройкиЭДО.ИспользоватьИнтеграциюОблачногоЭДО() Тогда
			Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
				УчетныеЗаписиЭДОИнтеграцияОблака.ВидОшибкиОтключенаНастройкаИспользоватьОблачныйЭДО(ИдентификаторОрганизации),
				ТекстОшибки, ТекстОшибки);
			ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
			ОбработкаНеисправностейБЭД.ДобавитьОшибку(РезультатДействий.КонтекстДиагностики, Ошибка,
				ПодсистемыБЭД.ОбменСКонтрагентами);
			Продолжить;
		КонецЕсли;
		
		ОписанияСообщений = ПараметрыФормирования.ОписаниеСообщения;
		Если Не ТипЗнч(ОписанияСообщений) = Тип("Массив") Тогда
			ОписанияСообщений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписанияСообщений);
		КонецЕсли;
		ОписаниеСообщения = ОписанияСообщений[0];
		
		СтруктураПоиска = Новый Структура("ОбъектУчета, ВидСообщения, Организация, Контрагент, ДоговорКонтрагента");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ПараметрыФормирования.НастройкиДокумента);
		СтруктураПоиска.ОбъектУчета = ПараметрыФормирования.ОбъектУчета;
		СтруктураПоиска.ВидСообщения = ОписаниеСообщения.ВидСообщения;
		
		Если ОписаниеСообщения.Направление <> Перечисления.НаправленияЭДО.Внутренний
			И ОбработанныеОбъектыУчета.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ДокументОбъект = СоздатьИсходящийДокумент(ПараметрыФормирования.НастройкиДокумента, ОписанияСообщений,
				РезультатДействий.КонтекстДиагностики, ПараметрыФормирования.ОбъектУчета, ПараметрыФормирования.Основания,
				ПараметрыФормирования.ИдентификаторыОснований);
			ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие, ДокументОбъект.Ссылка);
		Исключение
			ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
				ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
				ПодробныйТекстОшибки, ТекстОшибки);
			ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
			ОбработкаНеисправностейБЭД.ДобавитьОшибку(РезультатДействий.КонтекстДиагностики, Ошибка,
				ПодсистемыБЭД.ОбменСКонтрагентами);
		КонецПопытки;
		
		Для Каждого ОбъектУчета Из ПараметрыФормирования.Основания Цикл
			СтрокаОбработанныеОбъектыУчета = ОбработанныеОбъектыУчета.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОбработанныеОбъектыУчета, СтруктураПоиска);
			СтрокаОбработанныеОбъектыУчета.ОбъектУчета = ОбъектУчета;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ВыполнитьДействиеСформироватьПоФайлам(ПараметрыВыполнения, РезультатДействий)
	
	ОписанияДокументовПоФайлам = ПараметрыВыполнения.ОбъектыДействий.ОписанияДокументовПоФайлам;
	
	Действие = Перечисления.ДействияПоЭДО.Сформировать;
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Действие, 0);
	
	Для Каждого ОписаниеДокумента Из ОписанияДокументовПоФайлам Цикл
	
		ПараметрыСоздания = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыСозданияДокументаПоФайлу();
		ПараметрыСоздания.ИдентификаторДокумента = ОписаниеДокумента.Идентификатор;
		ПараметрыСоздания.ВидДокумента = ОписаниеДокумента.ВидДокумента;
		ПараметрыСоздания.Организация = ОписаниеДокумента.Организация;
		ПараметрыСоздания.Контрагент = ОписаниеДокумента.Контрагент;
		ПараметрыСоздания.Договор = ОписаниеДокумента.Договор;
		ПараметрыСоздания.НомерДокумента = ОписаниеДокумента.Номер;
		ПараметрыСоздания.ДатаДокумента = ОписаниеДокумента.Дата;
		ПараметрыСоздания.СуммаДокумента = ОписаниеДокумента.Сумма;
		ПараметрыСоздания.СопроводительнаяЗаписка = ОписаниеДокумента.СопроводительнаяЗаписка;
		ПараметрыСоздания.ОбъектыУчета = ОписаниеДокумента.ОбъектыУчета;
		ПараметрыСоздания.Подписанты = ОписаниеДокумента.Подписанты;
		ПараметрыСоздания.МаршрутПодписания = ОписаниеДокумента.МаршрутПодписания;
	
		ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
		Для Каждого ФайлТитула Из ОписаниеДокумента.ФайлыТитулов Цикл
			Если Не ЗначениеЗаполнено(ФайлТитула.Основной) Тогда
				Продолжить;
			КонецЕсли;
			ОписаниеФайла.ИмяФайла = ФайлТитула.Основной.ИмяФайла;
			ОписаниеФайла.ДвоичныеДанные = ФайлТитула.Основной.ДвоичныеДанные;
		КонецЦикла;
	
		РезультатСоздания = СоздатьДокументПоФайлу(ПараметрыСоздания, ОписаниеФайла);
		Если РезультатСоздания.Успех Тогда
			ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие,
				РезультатСоздания.ЭлектронныйДокумент);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатДействий.ОшибкиФормирования, РезультатСоздания.Ошибки);
		
	КонецЦикла;
	
КонецПроцедуры

// Конвертирует переданные двоичные данные в произвольный электронный документ.
//
// Параметры:
//  ПараметрыСоздания - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыСозданияДокументаПоФайлу
//  ОписаниеФайла - См. РаботаСФайламиБЭД.НовоеОписаниеФайла
//
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * Ошибки - Массив из См. НовоеОписаниеОшибкиФормирования
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
Функция СоздатьДокументПоФайлу(ПараметрыСоздания, ОписаниеФайла) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("Ошибки", Новый Массив);
	Результат.Вставить("ЭлектронныйДокумент", Документы.ЭлектронныйДокументИсходящийЭДО.ПустаяСсылка());
	
	Если ЭлектронныеДокументыЭДО.ВыполнениеДействийПоЭДОЗапрещено() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗапретитьФормированиеФормализованныхЭДИзФайлов = 
		ПолучитьФункциональнуюОпцию("ЗапретитьФормированиеФормализованныхЭДИзФайлов");
	Содержание = ФорматыЭДО.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
	СодержаниеЗаполнено = ЗначениеЗаполнено(Содержание);
	
	Если Не СодержаниеЗаполнено
		Или ЗапретитьФормированиеФормализованныхЭДИзФайлов Тогда
		Содержание = ЭлектронныеДокументыЭДО.НовоеСодержаниеСообщения();
		Содержание.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный;
		Содержание.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прочее;
	ИначеЕсли СодержаниеЗаполнено Тогда
		СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОписаниеФайла.ИмяФайла);
		РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураИмениФайла.Расширение);
		ЭтоXML = РаботаСФайламиБЭДКлиентСервер.ЭтоXML(РасширениеБезТочки);
		Если ЭтоXML И Содержание.Свойство("ИдентификаторДокумента") Тогда
			ОписаниеФайла.ИмяФайла = Содержание.ИдентификаторДокумента + ".xml";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСоздания.НомерДокумента) Тогда
		Содержание.НомерДокумента = ПараметрыСоздания.НомерДокумента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСоздания.ДатаДокумента) Тогда
		Содержание.ДатаДокумента = ПараметрыСоздания.ДатаДокумента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСоздания.СуммаДокумента) Тогда
		Содержание.СуммаДокумента = ПараметрыСоздания.СуммаДокумента;
	КонецЕсли;
	
	ВидДокумента = ПараметрыСоздания.ВидДокумента;
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		ПараметрыПоиска = ЭлектронныеДокументыЭДО.НовыеПараметрыПоискаВидаДокумента(Содержание.ТипДокумента);
		ВидДокумента = ЭлектронныеДокументыЭДО.НайтиСоздатьВидДокумента(ПараметрыПоиска);
	КонецЕсли;
	
	РезультатПроверки = ПроверитьПараметрыСозданияДокумента(ПараметрыСоздания,
		Содержание);
	Если Не РезультатПроверки.ПараметрыКорректны Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Ошибки, РезультатПроверки.ОшибкиПроверки);
		Возврат Результат;
	КонецЕсли;
	
	НастройкиОтправки = НастройкиОтправкиДокументаПоПараметрамДокумента(ПараметрыСоздания, Содержание);
	Если Не ЗначениеЗаполнено(НастройкиОтправки) Тогда
		ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
		ЗаполнитьОписаниеОбъектаУчетаПоПараметрамСозданияДокументаПоФайлу(ОписаниеОшибки.ОписаниеОбъектаУчета,
			ПараметрыСоздания);
		ОписаниеОшибки.ВидДокумента = ВидДокумента;
		ОписаниеОшибки.ОтсутствуютНастройки = Истина;
		Результат.Ошибки.Добавить(ОписаниеОшибки);
		Возврат Результат;
	КонецЕсли;
	
	Если ПараметрыСоздания.СоздатьНомерАвтоматически
		И Не НастройкиОтправки.Формировать Тогда
		ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
		ЗаполнитьОписаниеОбъектаУчетаПоПараметрамСозданияДокументаПоФайлу(ОписаниеОшибки.ОписаниеОбъектаУчета,
			ПараметрыСоздания);
		ОписаниеОшибки.ВидДокумента = ВидДокумента;
		ОписаниеОшибки.ФормированиеЗапрещено = Истина;
		Результат.Ошибки.Добавить(ОписаниеОшибки);
		Возврат Результат;
	КонецЕсли;
	
	Если НастройкиОтправки.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании()
		И Не ЗначениеЗаполнено(ПараметрыСоздания.МаршрутПодписания)
		И Не ЗначениеЗаполнено(ПараметрыСоздания.Подписанты) Тогда
		ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
		ЗаполнитьОписаниеОбъектаУчетаПоПараметрамСозданияДокументаПоФайлу(ОписаниеОшибки.ОписаниеОбъектаУчета,
			ПараметрыСоздания);
		ОписаниеОшибки.ВидДокумента = ВидДокумента;
		ОписаниеОшибки.ОтсутствуютПодписанты = Истина;
		Результат.Ошибки.Добавить(ОписаниеОшибки);
		Возврат Результат;
	КонецЕсли;
	
	РезультатПроверкиОграничения = ЭлектронныеДокументыЭДО.ПроверкаПревышенияМаксимальногоРазмераФайла(
		НастройкиОтправки.ИдентификаторПолучателя, НастройкиОтправки.ИдентификаторОтправителя,
		ОписаниеФайла.ДвоичныеДанные);
	Если РезультатПроверкиОграничения.Превышено Тогда
		ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
		ЗаполнитьОписаниеОбъектаУчетаПоПараметрамСозданияДокументаПоФайлу(ОписаниеОшибки.ОписаниеОбъектаУчета,
			ПараметрыСоздания);
		ОписаниеОшибки.ВидДокумента = ВидДокумента;
		ОписаниеОшибки.ПревышаемыеОграниченияОбъемаПакетаДокументов =
			РезультатПроверкиОграничения.ПревышаемыеОграничения;
		Результат.Ошибки.Добавить(ОписаниеОшибки);
		Возврат Результат;
	КонецЕсли;
	
	НастройкиДокумента = ЭлектронныеДокументыЭДО.НовыеНастройкиОтправкиДокумента();
	НастройкиДокумента.Организация = НастройкиОтправки.Отправитель;
	НастройкиДокумента.Контрагент = НастройкиОтправки.Получатель;
	НастройкиДокумента.ДоговорКонтрагента = НастройкиОтправки.Договор;
	НастройкиДокумента.ИдентификаторОрганизации = НастройкиОтправки.ИдентификаторОтправителя;
	НастройкиДокумента.ИдентификаторКонтрагента = НастройкиОтправки.ИдентификаторПолучателя;
	НастройкиДокумента.СпособОбмена = НастройкиОтправки.СпособОбмена;
	НастройкиДокумента.ОбменБезПодписи = НастройкиОтправки.ОбменБезПодписи;
	НастройкиДокумента.МаршрутПодписания = НастройкиОтправки.МаршрутПодписания;
	НастройкиДокумента.ТребуетсяИзвещение = НастройкиОтправки.ТребуетсяИзвещениеОПолучении;
	НастройкиДокумента.ТребуетсяПодтверждение = НастройкиОтправки.ТребуетсяОтветнаяПодпись;
	НастройкиДокумента.ВыгружатьДополнительныеСведения = НастройкиОтправки.ВыгружатьДополнительныеСведения;
	НастройкиДокумента.СоздатьНомерАвтоматически = ПараметрыСоздания.СоздатьНомерАвтоматически;
	Если ЗначениеЗаполнено(ПараметрыСоздания.Подписанты) Тогда
		НастройкиДокумента.Подписанты = ПараметрыСоздания.Подписанты;
		НастройкиДокумента.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании();
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыСоздания.МаршрутПодписания) Тогда
		НастройкиДокумента.МаршрутПодписания = ПараметрыСоздания.МаршрутПодписания;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыСоздания.ИдентификаторДокумента) Тогда
		НастройкиДокумента.ИдентификаторДокумента = ПараметрыСоздания.ИдентификаторДокумента;
	КонецЕсли;
	НастройкиДокумента.ЭтоОблачныйЭДО = УчетныеЗаписиЭДО.ЭтоУчетнаяЗаписьОблачногоЭДО(
		НастройкиОтправки.ИдентификаторОтправителя);
	НастройкиДокумента.Формат = НастройкиОтправки.Формат;
		
	ОписаниеСообщения = НовоеОписаниеСообщения();
	ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	ОписаниеСообщения.ВидСообщения = ВидДокумента;
	ОписаниеСообщения.Направление = Перечисления.НаправленияЭДО.Исходящий;
	ОписаниеСообщения.Данные.Содержание = Содержание;
	ОписаниеСообщения.Данные.Документ = ОписаниеФайла;
	ОписаниеСообщения.ДополнительнаяИнформация = ПараметрыСоздания.СопроводительнаяЗаписка;
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	ДокументОбъект = СоздатьИсходящийДокумент(
		НастройкиДокумента, ОписаниеСообщения, КонтекстДиагностики, Неопределено, ПараметрыСоздания.ОбъектыУчета);
	
	Результат.ЭлектронныйДокумент = ДокументОбъект.Ссылка;
	Результат.Успех = Истина;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ОписаниеОбъектаУчета - См. ИнтеграцияЭДОКлиентСервер.НовоеОписаниеОбъектаУчетаСтруктура
//  ПараметрыСоздания - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыСозданияДокументаПоФайлу
Процедура ЗаполнитьОписаниеОбъектаУчетаПоПараметрамСозданияДокументаПоФайлу(ОписаниеОбъектаУчета, ПараметрыСоздания)
		
	ЗаполнитьЗначенияСвойств(ОписаниеОбъектаУчета, ПараметрыСоздания);
	
	Если ЗначениеЗаполнено(ПараметрыСоздания.ОбъектыУчета) Тогда
		ОписаниеОбъектаУчета.ОбъектУчета = ПараметрыСоздания.ОбъектыУчета[0];
	КонецЕсли;
		
КонецПроцедуры

// Параметры:
//  ПараметрыВыполнения - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  ОбъектыУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
// 
// Возвращаемое значение:
//  Структура:
//  * НастройкиОтправки - Неопределено,РезультатЗапроса
//  * НастройкиВнутреннегоЭДО - Неопределено,РезультатЗапроса
//  * НастройкиВнутреннегоЭДОПоУмолчанию - Неопределено,РезультатЗапроса
Функция РезультатыЗапросаНастроекОбъектовУчета(ПараметрыВыполнения, ОбъектыУчета)
	
	Результат = Новый Структура;
	Результат.Вставить("НастройкиОтправки");
	Результат.Вставить("НастройкиВнутреннегоЭДО");
	Результат.Вставить("НастройкиВнутреннегоЭДОПоУмолчанию");
	
	Если Не ЗначениеЗаполнено(ОбъектыУчета) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЕстьЭлектронноеАктирование = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		Если МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС()
			ИЛИ МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС() Тогда
			ЕстьЭлектронноеАктирование = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОписанияОбъектовУчета = ИнтеграцияЭДО.ОписанияОбъектовУчета(ОбъектыУчета);
	
	СоставДокументов = Новый Структура;
	СоставДокументов.Вставить("ЕстьДокументыДляОтправки", ЗначениеЗаполнено(ОписанияОбъектовУчета));
	СоставДокументов.Вставить("ЕстьВнутренниеДокументыПоВидам", Ложь);
	СоставДокументов.Вставить("ЕстьВнутренниеДокументыПоУмолчанию", Ложь);
	
	ДополнитьОписанияОбъектовУчетаПоВнутреннемуЭДО(ОписанияОбъектовУчета, ПараметрыВыполнения.КлючиНастроекОбъектов,
		СоставДокументов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОписанияОбъектовУчета", ОписанияОбъектовУчета);
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить( 
		"ВЫБРАТЬ
		|	ОписанияОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
		|	ОписанияОбъектовУчета.Направление КАК Направление,
		|	ОписанияОбъектовУчета.ТипДокумента КАК ТипДокумента,
		|	ОписанияОбъектовУчета.ПрикладнойТипДокумента КАК ПрикладнойТипДокумента,
		|	ОписанияОбъектовУчета.Организация КАК Организация,
		|	ОписанияОбъектовУчета.Контрагент КАК Контрагент,
		|	ОписанияОбъектовУчета.Договор КАК ДоговорКонтрагента,
		|	&ВидВнутреннегоДокумента КАК ВидВнутреннегоДокумента,
		|	&ИдентификаторОбъектаУчета КАК ИдентификаторОбъектаУчета
		|ПОМЕСТИТЬ ОписанияОбъектовУчета
		|ИЗ
		|	&ОписанияОбъектовУчета КАК ОписанияОбъектовУчета");
	
	СтартовыйИндексЗапроса = 1;
	Если СоставДокументов.ЕстьДокументыДляОтправки Тогда
		
		Если ЕстьЭлектронноеАктирование Тогда
			СтартовыйИндексЗапроса = 3;
		КонецЕсли;
		
		ТекстЗапросаНастроекОтправки = ТекстЗапросаНастроекОтправкиОбъектовУчета();
		ТекстыЗапросов.Добавить(ТекстЗапросаНастроекОтправки);
		
		НаправленияНастроекОтправки = Новый Массив();
		НаправленияНастроекОтправки.Добавить(Перечисления.НаправленияЭДО.Исходящий);
		Если НастройкиЭДО.ОбменЭлектроннымиДокументамиМеждуОрганизациями() Тогда
			НаправленияНастроекОтправки.Добавить(Перечисления.НаправленияЭДО.Интеркампани);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ПриПолученииНаправленияНастроекОтправки(ОписанияОбъектовУчета, НаправленияНастроекОтправки);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ПустойДоговор", 
			Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип.ПривестиЗначение());
		Запрос.УстановитьПараметр("НаправленияНастроекОтправки", НаправленияНастроекОтправки);
		Запрос.УстановитьПараметр("ИдентификаторОбъектаУчета", "");
		Запрос.УстановитьПараметр("ВидВнутреннегоДокумента", "");
		
	КонецЕсли;
	
	Если СоставДокументов.ЕстьВнутренниеДокументыПоВидам
		ИЛИ СоставДокументов.ЕстьВнутренниеДокументыПоУмолчанию Тогда
		
		ИндексОсновногоЗапроса = СтартовыйИндексЗапроса - 1;
		ТекстыЗапросов[ИндексОсновногоЗапроса] = СтрЗаменить(
			ТекстыЗапросов[ИндексОсновногоЗапроса],
			"&ВидВнутреннегоДокумента",
			"ОписанияОбъектовУчета.ВидВнутреннегоДокумента");
		ТекстыЗапросов[ИндексОсновногоЗапроса] = СтрЗаменить(
			ТекстыЗапросов[ИндексОсновногоЗапроса],
			"&ИдентификаторОбъектаУчета",
			"ОписанияОбъектовУчета.ИдентификаторОбъектаУчета");
		
		Если СоставДокументов.ЕстьВнутренниеДокументыПоВидам Тогда
			ТекстыЗапросов.Добавить(ТекстЗапросаНастроекВнутреннегоЭДООбъектовУчета());
		КонецЕсли;
		
		Если СоставДокументов.ЕстьВнутренниеДокументыПоУмолчанию Тогда
			ТекстыЗапросов.Добавить(ТекстЗапросаНастроекВнутреннегоЭДООбъектовУчетаПоУмолчанию());
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НаправлениеВнутренний", Перечисления.НаправленияЭДО.Внутренний);
	ПустойДоговор = ОбменСКонтрагентамиИнтеграция.ВсеПустыеЗначенияДоговораСКонтрагентомЭДО();
	Запрос.УстановитьПараметр("ПустойДоговор", ПустойДоговор);
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	СдвигИндексаЗапроса = 0;
	
	Если СоставДокументов.ЕстьДокументыДляОтправки Тогда
		Результат.НастройкиОтправки = РезультатыЗапроса[СтартовыйИндексЗапроса];
		СдвигИндексаЗапроса = СдвигИндексаЗапроса + 1;
	КонецЕсли;
	
	Если СоставДокументов.ЕстьВнутренниеДокументыПоВидам Тогда
		Результат.НастройкиВнутреннегоЭДО = РезультатыЗапроса[СтартовыйИндексЗапроса + СдвигИндексаЗапроса];
		СдвигИндексаЗапроса = СдвигИндексаЗапроса + 1;
	КонецЕсли;
	
	Если СоставДокументов.ЕстьВнутренниеДокументыПоУмолчанию Тогда
		Результат.НастройкиВнутреннегоЭДОПоУмолчанию = РезультатыЗапроса[СтартовыйИндексЗапроса + 1 + СдвигИндексаЗапроса];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ОписанияОбъектовУчета - См. ИнтеграцияЭДО.ОписаниеОбъектаУчета
//  КлючиНастроекОбъектов - Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * Значение - РегистрСведенийКлючЗаписи.НастройкиВнутреннегоЭДО
//  СоставДокументов - Структура:
//  * ЕстьДокументыДляОтправки - Булево
//  * ЕстьВнутренниеДокументыПоВидам - Булево
//  * ЕстьВнутренниеДокументыПоУмолчанию - Булево
Процедура ДополнитьОписанияОбъектовУчетаПоВнутреннемуЭДО(ОписанияОбъектовУчета, КлючиНастроекОбъектов, СоставДокументов)
	
	Если Не НастройкиЭДО.ИспользуютсяВнутренниеДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияОбъектовУчета.Колонки.Добавить("ВидВнутреннегоДокумента", 
		Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	ОписанияОбъектовУчета.Колонки.Добавить("ИдентификаторОбъектаУчета", 
		ИнтеграцияБСПБЭД.ОписаниеТипаИдентификатораОбъектаМетаданных());
	ОписанияОбъектовУчета.Колонки.Добавить("ПолноеИмяОбъектаУчета", Новый ОписаниеТипов("Строка"));
	
	Отбор = Новый Структура("Направление", Перечисления.НаправленияЭДО.Внутренний);
	ОписанияОбъектовУчетаВнутреннегоЭДО = ОписанияОбъектовУчета.НайтиСтроки(Отбор);
	
	Если Не ЗначениеЗаполнено(ОписанияОбъектовУчетаВнутреннегоЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписанияОбъектовУчета.Количество() = ОписанияОбъектовУчетаВнутреннегоЭДО.Количество() Тогда
		СоставДокументов.ЕстьДокументыДляОтправки = Ложь;
	КонецЕсли;
	
	УникальныеИменаОбъектовУчета = Новый Соответствие;
	
	Для Каждого ОписаниеОбъектаУчета Из ОписанияОбъектовУчетаВнутреннегоЭДО Цикл
		
		КлючиНастроек = КлючиНастроекОбъектов[ОписаниеОбъектаУчета.ОбъектУчета];
		Если КлючиНастроек = Неопределено Тогда
			ОписаниеОбъектаУчета.ПолноеИмяОбъектаУчета = ОписаниеОбъектаУчета.ОбъектУчета.Метаданные().ПолноеИмя();
			УникальныеИменаОбъектовУчета.Вставить(ОписаниеОбъектаУчета.ПолноеИмяОбъектаУчета, Истина);
			СоставДокументов.ЕстьВнутренниеДокументыПоУмолчанию = Истина;
			Продолжить;
		КонецЕсли;
		
		ОписаниеОбъектаУчета.ВидВнутреннегоДокумента = КлючиНастроек[0].ВидВнутреннегоДокумента;
		СоставДокументов.ЕстьВнутренниеДокументыПоВидам = Истина;
		
		Количество = КлючиНастроек.Количество();
		Если Количество > 1 Тогда
			Для Счетчик = 1 По Количество - 1 Цикл
				НовоеОписаниеОбъектаУчета = ОписанияОбъектовУчета.Добавить();
				ЗаполнитьЗначенияСвойств(НовоеОписаниеОбъектаУчета, ОписаниеОбъектаУчета);
				НовоеОписаниеОбъектаУчета.ВидВнутреннегоДокумента = КлючиНастроек[Счетчик].ВидВнутреннегоДокумента;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(УникальныеИменаОбъектовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаОбъектовМетаданных = Новый Массив;
	Для Каждого ЭлементКоллекции Из УникальныеИменаОбъектовУчета Цикл
		ИменаОбъектовМетаданных.Добавить(ЭлементКоллекции.Ключ);
	КонецЦикла;
	
	ИдентификаторыОбъектов = ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(ИменаОбъектовМетаданных, Ложь);
	Для Каждого Описание Из ОписанияОбъектовУчетаВнутреннегоЭДО Цикл
		ИдентификаторОбъектаУчета = ИдентификаторыОбъектов[Описание.ПолноеИмяОбъектаУчета];
		Если ИдентификаторОбъектаУчета <> Неопределено Тогда
			Описание.ИдентификаторОбъектаУчета = ИдентификаторОбъектаУчета;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаНастроекОтправкиОбъектовУчета()
	
	ЕстьЭлектронноеАктирование = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		Если МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС()
			ИЛИ МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС() Тогда
			ЕстьЭлектронноеАктирование = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьЭлектронноеАктирование Тогда
		
		Возврат МодульЭлектронноеАктированиеЕИС.
			ТекстЗапросаНастроекОтправкиОбъектовУчета();
		
	Иначе
		
		// При изменение текста запроса нужно делать синхронные изменения в
		// ЭлектронноеАктированиеЕИС.ТекстЗапросаНастроекОтправкиОбъектовУчета().
		ТекстЗапроса = "ВЫБРАТЬ
		|	ОписанияОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
		|	ОписанияОбъектовУчета.Организация КАК Отправитель,
		|	ОписанияОбъектовУчета.Контрагент КАК Получатель,
		|	ЕСТЬNULL(НастройкиОтправкиСДоговором.Договор, НЕОПРЕДЕЛЕНО) КАК Договор,
		|	ОписанияОбъектовУчета.ДоговорКонтрагента КАК ДоговорУчетногоДокумента,
		|	ОписанияОбъектовУчета.Направление КАК Направление,
		|	ОписанияОбъектовУчета.ТипДокумента КАК ТипДокумента,
		|	ОписанияОбъектовУчета.ПрикладнойТипДокумента КАК ПрикладнойТипДокумента,
		|	ВидыДокументовЭДО.Ссылка КАК ВидДокумента,
		|	ЕСТЬNULL(НастройкиОтправкиСДоговором.ВерсияФормата, НастройкиОтправкиБезДоговора.ВерсияФормата) КАК Формат,
		|	ЕСТЬNULL(НастройкиОтправкиСДоговором.МаршрутПодписания, НастройкиОтправкиБезДоговора.МаршрутПодписания) КАК МаршрутПодписания,
		|	ЕСТЬNULL(НастройкиОтправкиСДоговором.СпособОбменаЭД, НастройкиОтправкиБезДоговора.СпособОбменаЭД) КАК СпособОбмена,
		|	ЕСТЬNULL(НастройкиОтправкиСДоговором.ИдентификаторОтправителя, НастройкиОтправкиБезДоговора.ИдентификаторОтправителя) КАК ИдентификаторОтправителя,
		|	ЕСТЬNULL(НастройкиОтправкиСДоговором.ИдентификаторПолучателя, НастройкиОтправкиБезДоговора.ИдентификаторПолучателя) КАК ИдентификаторПолучателя,
		|	ЕСТЬNULL(НастройкиОтправкиСДоговором.ТребуетсяОтветнаяПодпись, НастройкиОтправкиБезДоговора.ТребуетсяОтветнаяПодпись) КАК ТребуетсяОтветнаяПодпись,
		|	ЕСТЬNULL(НастройкиОтправкиСДоговором.ТребуетсяИзвещениеОПолучении, НастройкиОтправкиБезДоговора.ТребуетсяИзвещениеОПолучении) КАК ТребуетсяИзвещениеОПолучении,
		|	ЕСТЬNULL(НастройкиОтправкиСДоговором.ВыгружатьДополнительныеСведения, НастройкиОтправкиБезДоговора.ВыгружатьДополнительныеСведения) КАК ВыгружатьДополнительныеСведения,
		|	ЕСТЬNULL(НастройкиОтправкиСДоговором.ОбменБезПодписи, НастройкиОтправкиБезДоговора.ОбменБезПодписи) КАК ОбменБезПодписи,
		|	ЕСТЬNULL(НастройкиОтправкиСДоговором.Формировать, НастройкиОтправкиБезДоговора.Формировать) КАК Формировать,
		|	ЕСТЬNULL(НастройкиОтправкиСДоговором.ЗаполнениеКодаТовара, НастройкиОтправкиБезДоговора.ЗаполнениеКодаТовара) КАК ЗаполнениеКодаТовара
		|ИЗ
		|	ОписанияОбъектовУчета КАК ОписанияОбъектовУчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО ОписанияОбъектовУчета.ТипДокумента = ВидыДокументовЭДО.ТипДокумента
		|		И ОписанияОбъектовУчета.ПрикладнойТипДокумента = ВидыДокументовЭДО.ПрикладнойТипДокумента
		|		И ОписанияОбъектовУчета.Направление <> &НаправлениеВнутренний
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиСДоговором
		|		ПО ОписанияОбъектовУчета.Организация = НастройкиОтправкиСДоговором.Отправитель
		|		И ОписанияОбъектовУчета.Контрагент = НастройкиОтправкиСДоговором.Получатель
		|		И ВидыДокументовЭДО.Ссылка = НастройкиОтправкиСДоговором.ВидДокумента
		|		И НастройкиОтправкиСДоговором.Договор = ОписанияОбъектовУчета.ДоговорКонтрагента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиБезДоговора
		|		ПО ОписанияОбъектовУчета.Организация = НастройкиОтправкиБезДоговора.Отправитель
		|		И ОписанияОбъектовУчета.Контрагент = НастройкиОтправкиБезДоговора.Получатель
		|		И ВидыДокументовЭДО.Ссылка = НастройкиОтправкиБезДоговора.ВидДокумента
		|		И НастройкиОтправкиБезДоговора.Договор В (&ПустойДоговор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО ОписанияОбъектовУчета.ОбъектУчета = ОбъектыУчетаДокументовЭДО.ОбъектУчета
		|		И ВидыДокументовЭДО.Ссылка = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента
		|		И ОписанияОбъектовУчета.Контрагент = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.Контрагент
		|		И ОбъектыУчетаДокументовЭДО.Актуальный
		|ГДЕ
		|	ОписанияОбъектовУчета.Направление В (&НаправленияНастроекОтправки)
		|	И ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент ЕСТЬ NULL
		|УПОРЯДОЧИТЬ ПО
		|	Договор УБЫВ";
		
	КонецЕсли;
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаНастроекВнутреннегоЭДООбъектовУчета()
	Возврат
		"ВЫБРАТЬ
		|	ОписанияОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
		|	ОписанияОбъектовУчета.Организация КАК Организация,
		|	ОписанияОбъектовУчета.Направление КАК Направление,
		|	ОписанияОбъектовУчета.ВидВнутреннегоДокумента КАК ВидДокумента,
		|	ВидыДокументовЭДО.Наименование КАК НаименованиеВидаДокумента,
		|	ВидыДокументовЭДО.ИдентификаторКомандыПечати КАК ИдентификаторКомандыПечати,
		|	ВидыДокументовЭДО.ИдентификаторОбъектаУчета КАК ИдентификаторОбъектаУчета,
		|	ВидыДокументовЭДО.ИдентификаторОбъектаУчета.Синоним КАК СинонимОбъектаУчета,
		|	НастройкиВнутреннегоЭДО.Формировать КАК Формировать,
		|	НастройкиВнутреннегоЭДО.ВидПодписи КАК ВидПодписи,
		|	НастройкиВнутреннегоЭДО.МаршрутПодписания КАК МаршрутПодписания,
		|	НастройкиВнутреннегоЭДО.ЭтоОсновнойВидДокумента КАК ЭтоОсновнойВидДокумента,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.Внутренний) КАК СпособОбмена
		|ИЗ
		|	ОписанияОбъектовУчета КАК ОписанияОбъектовУчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО ОписанияОбъектовУчета.ВидВнутреннегоДокумента = ВидыДокументовЭДО.Ссылка
		|		И ОписанияОбъектовУчета.Направление = &НаправлениеВнутренний
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВнутреннегоЭДО КАК НастройкиВнутреннегоЭДО
		|		ПО ОписанияОбъектовУчета.Организация = НастройкиВнутреннегоЭДО.Организация
		|		И ОписанияОбъектовУчета.ВидВнутреннегоДокумента = НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО ОписанияОбъектовУчета.ОбъектУчета = ОбъектыУчетаДокументовЭДО.ОбъектУчета
		|		И ОписанияОбъектовУчета.ВидВнутреннегоДокумента = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента
		|		И ОписанияОбъектовУчета.Контрагент = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.Контрагент
		|		И ОписанияОбъектовУчета.ДоговорКонтрагента = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент
		|		И ОбъектыУчетаДокументовЭДО.Актуальный
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДОБезДоговора
		|		ПО ОписанияОбъектовУчета.ОбъектУчета = ОбъектыУчетаДокументовЭДОБезДоговора.ОбъектУчета
		|		И ОписанияОбъектовУчета.ВидВнутреннегоДокумента = ОбъектыУчетаДокументовЭДОБезДоговора.ЭлектронныйДокумент.ВидДокумента
		|		И ОписанияОбъектовУчета.Контрагент = ОбъектыУчетаДокументовЭДОБезДоговора.ЭлектронныйДокумент.Контрагент
		|		И ОписанияОбъектовУчета.ДоговорКонтрагента В (&ПустойДоговор)
		|		И ОбъектыУчетаДокументовЭДОБезДоговора.ЭлектронныйДокумент.ДоговорКонтрагента В (&ПустойДоговор)
		|		И ОбъектыУчетаДокументовЭДОБезДоговора.Актуальный
		|ГДЕ
		|	ОписанияОбъектовУчета.Направление = &НаправлениеВнутренний
		|	И ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент ЕСТЬ NULL
		|	И ОбъектыУчетаДокументовЭДОБезДоговора.ЭлектронныйДокумент ЕСТЬ NULL";
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаНастроекВнутреннегоЭДООбъектовУчетаПоУмолчанию()
	Возврат
		"ВЫБРАТЬ
		|	НастройкиВнутреннегоЭДО.Организация КАК Организация,
		|	НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента КАК ВидВнутреннегоДокумента,
		|	НастройкиВнутреннегоЭДО.Формировать КАК Формировать,
		|	НастройкиВнутреннегоЭДО.ВидПодписи КАК ВидПодписи,
		|	НастройкиВнутреннегоЭДО.МаршрутПодписания КАК МаршрутПодписания,
		|	НастройкиВнутреннегоЭДО.ЭтоОсновнойВидДокумента КАК ЭтоОсновнойВидДокумента,
		|	ВидыДокументовЭДО.Наименование КАК НаименованиеВидаДокумента,
		|	ВидыДокументовЭДО.ИдентификаторКомандыПечати КАК ИдентификаторКомандыПечати,
		|	ВидыДокументовЭДО.ИдентификаторОбъектаУчета КАК ИдентификаторОбъектаУчета,
		|	ВидыДокументовЭДО.ИдентификаторОбъектаУчета.Синоним КАК СинонимОбъектаУчета
		|ПОМЕСТИТЬ НастройкиОсновныхВидовВнутреннегоЭДО
		|ИЗ
		|	РегистрСведений.НастройкиВнутреннегоЭДО КАК НастройкиВнутреннегоЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента = ВидыДокументовЭДО.Ссылка
		|ГДЕ
		|	(НастройкиВнутреннегоЭДО.Организация, ВидыДокументовЭДО.ИдентификаторОбъектаУчета) В
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ОписанияОбъектовУчета.Организация,
		|			ОписанияОбъектовУчета.ИдентификаторОбъектаУчета
		|		ИЗ
		|			ОписанияОбъектовУчета
		|		ГДЕ
		|			ОписанияОбъектовУчета.Направление = &НаправлениеВнутренний
		|			И ОписанияОбъектовУчета.ВидВнутреннегоДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовЭДО.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОписанияОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
		|	ОписанияОбъектовУчета.Организация КАК Организация,
		|	ОписанияОбъектовУчета.Направление КАК Направление,
		|	ОписанияОбъектовУчета.ИдентификаторОбъектаУчета КАК ИдентификаторОбъектаУчета,
		|	НастройкиОсновныхВидовВнутреннегоЭДО.ИдентификаторКомандыПечати КАК ИдентификаторКомандыПечати,
		|	НастройкиОсновныхВидовВнутреннегоЭДО.СинонимОбъектаУчета КАК СинонимОбъектаУчета,
		|	НастройкиОсновныхВидовВнутреннегоЭДО.НаименованиеВидаДокумента КАК НаименованиеВидаДокумента,
		|	НастройкиОсновныхВидовВнутреннегоЭДО.ВидВнутреннегоДокумента КАК ВидДокумента,
		|	НастройкиОсновныхВидовВнутреннегоЭДО.Формировать КАК Формировать,
		|	НастройкиОсновныхВидовВнутреннегоЭДО.ВидПодписи КАК ВидПодписи,
		|	НастройкиОсновныхВидовВнутреннегоЭДО.МаршрутПодписания КАК МаршрутПодписания,
		|	ЕСТЬNULL(НастройкиОсновныхВидовВнутреннегоЭДО.ЭтоОсновнойВидДокумента, ЛОЖЬ) КАК ЭтоОсновнойВидДокумента,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.Внутренний) КАК СпособОбмена,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент ЕСТЬ НЕ NULL
		|	ИЛИ ОбъектыУчетаДокументовЭДОБезДоговора.ЭлектронныйДокумент ЕСТЬ НЕ NULL КАК ЕстьАктуальныйДокумент
		|ИЗ
		|	ОписанияОбъектовУчета КАК ОписанияОбъектовУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиОсновныхВидовВнутреннегоЭДО КАК НастройкиОсновныхВидовВнутреннегоЭДО
		|		ПО ОписанияОбъектовУчета.Организация = НастройкиОсновныхВидовВнутреннегоЭДО.Организация
		|		И ОписанияОбъектовУчета.ИдентификаторОбъектаУчета = НастройкиОсновныхВидовВнутреннегоЭДО.ИдентификаторОбъектаУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО ОписанияОбъектовУчета.ОбъектУчета = ОбъектыУчетаДокументовЭДО.ОбъектУчета
		|		И
		|			НастройкиОсновныхВидовВнутреннегоЭДО.ВидВнутреннегоДокумента = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента
		|		И ОписанияОбъектовУчета.Контрагент = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.Контрагент
		|		И ОписанияОбъектовУчета.ДоговорКонтрагента = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ДоговорКонтрагента
		|		И ОбъектыУчетаДокументовЭДО.Актуальный
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДОБезДоговора
		|		ПО ОписанияОбъектовУчета.ОбъектУчета = ОбъектыУчетаДокументовЭДОБезДоговора.ОбъектУчета
		|		И
		|			НастройкиОсновныхВидовВнутреннегоЭДО.ВидВнутреннегоДокумента = ОбъектыУчетаДокументовЭДОБезДоговора.ЭлектронныйДокумент.ВидДокумента
		|		И ОписанияОбъектовУчета.Контрагент = ОбъектыУчетаДокументовЭДОБезДоговора.ЭлектронныйДокумент.Контрагент
		|		И ОписанияОбъектовУчета.ДоговорКонтрагента В (&ПустойДоговор)
		|		И ОбъектыУчетаДокументовЭДОБезДоговора.ЭлектронныйДокумент.ДоговорКонтрагента В (&ПустойДоговор)
		|		И ОбъектыУчетаДокументовЭДОБезДоговора.Актуальный
		|ГДЕ
		|	ОписанияОбъектовУчета.Направление = &НаправлениеВнутренний
		|	И ОписанияОбъектовУчета.ВидВнутреннегоДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовЭДО.ПустаяСсылка)
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоОсновнойВидДокумента УБЫВ";
КонецФункции

// Параметры:
//  ПараметрыВыполнения - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатыЗапросаНастроек - РезультатЗапроса
//  РезультатДействий - См. НовыйРезультатДействийПоЭДО
// 
// Возвращаемое значение:
//  Массив из см. НовыеПараметрыФормированияДокумента
Функция ПараметрыФормированияДокумента(ПараметрыВыполнения, РезультатыЗапросаНастроек, РезультатДействий)
	
	НаборПараметровФормирования = Новый Массив; // См. ПараметрыФормированияДокумента
	
	Если РезультатыЗапросаНастроек.НастройкиОтправки <> Неопределено Тогда
		ЗаполнитьПараметрыФормированияИсходящихДокументов(ПараметрыВыполнения,
			РезультатыЗапросаНастроек.НастройкиОтправки, НаборПараметровФормирования, РезультатДействий);
	КонецЕсли;
	
	Если РезультатыЗапросаНастроек.НастройкиВнутреннегоЭДО <> Неопределено Тогда
		ЗаполнитьПараметрыФормированияВнутреннихДокументов(ПараметрыВыполнения,
			РезультатыЗапросаНастроек.НастройкиВнутреннегоЭДО, НаборПараметровФормирования, РезультатДействий);
	КонецЕсли;
	
	Если РезультатыЗапросаНастроек.НастройкиВнутреннегоЭДОПоУмолчанию <> Неопределено Тогда
		ЗаполнитьПараметрыФормированияВнутреннихДокументовПоУмолчанию(ПараметрыВыполнения,
			РезультатыЗапросаНастроек.НастройкиВнутреннегоЭДОПоУмолчанию, НаборПараметровФормирования, РезультатДействий);
	КонецЕсли;
	
	Возврат НаборПараметровФормирования;
	
КонецФункции

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатЗапросаНастроек - Структура:
//  * НастройкиОтправки - РезультатЗапроса - см. ТекстЗапросаНастроекОтправкиОбъектовУчета
//  * НастройкиВнутреннегоЭДО - РезультатЗапроса - см. ТекстЗапросаНастроекВнутреннегоЭДООбъектовУчета
//  * НастройкиВнутреннегоЭДОПоУмолчанию - РезультатЗапроса - см. ТекстЗапросаНастроекВнутреннегоЭДООбъектовУчетаПоУмолчанию
//  НаборПараметровФормирования - Массив Из см. НовыеПараметрыФормированияДокумента
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//
Процедура ЗаполнитьПараметрыФормированияИсходящихДокументов(ПараметрыВыполнения, РезультатЗапросаНастроек, НаборПараметровФормирования, РезультатДействий)
	
	Если РезультатЗапросаНастроек.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСвязанныхОбъектовУчета = НоваяТаблицаСвязанныхОбъектовУчета();
	
	ОбработанныеНастройки = Новый ТаблицаЗначений;
	ОбработанныеНастройки.Колонки.Добавить("ОбъектУчета");
	ОбработанныеНастройки.Колонки.Добавить("ВидДокумента");
	ОбработанныеНастройки.Колонки.Добавить("Отправитель");
	ОбработанныеНастройки.Колонки.Добавить("Получатель");
	ОбработанныеНастройки.Колонки.Добавить("Договор");
	
	ВыборкаНастроек = РезультатЗапросаНастроек.Выбрать();
	Пока ВыборкаНастроек.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("ОбъектУчета");
		СтруктураПоиска.Вставить("ВидДокумента");
		СтруктураПоиска.Вставить("Отправитель");
		СтруктураПоиска.Вставить("Получатель");

		Если ЗначениеЗаполнено(ВыборкаНастроек.Договор) Тогда
			СтруктураПоиска.Вставить("Договор");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаНастроек);
				
		Если ОбработанныеНастройки.НайтиСтроки(СтруктураПоиска).Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОбработанныеНастройки = ОбработанныеНастройки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОбработанныеНастройки, СтруктураПоиска);
		ДобавитьПараметрыФормированияИсходящегоДокумента(ПараметрыВыполнения, ВыборкаНастроек,
			НаборПараметровФормирования, ТаблицаСвязанныхОбъектовУчета, РезультатДействий);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТаблицаСвязанныхОбъектовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапросаИдентификаторовДокументоборотовОбъектовУчета(ТаблицаСвязанныхОбъектовУчета);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭлементКоллекции = НовыйЭлементКоллекцииИдентификаторыОснованияДокумента();
		ЗаполнитьЭлементКоллекцииИдентификаторыОснованияДокумента(ЭлементКоллекции, Выборка);
		ПараметрыФормирования = НаборПараметровФормирования[Выборка.ИндексПараметров];
		Если ПараметрыФормирования.ИдентификаторыОснований = Неопределено Тогда
			ПараметрыФормирования.ИдентификаторыОснований = Новый Массив;
		КонецЕсли;
		ПараметрыФормирования.ИдентификаторыОснований.Добавить(ЭлементКоллекции);
	КонецЦикла;
	
КонецПроцедуры

// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ИндексПараметров - Число
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
Функция НоваяТаблицаСвязанныхОбъектовУчета()
	ТаблицаСвязанныхОбъектовУчета = Новый ТаблицаЗначений;
	ТаблицаСвязанныхОбъектовУчета.Колонки.Добавить("ИндексПараметров", Новый ОписаниеТипов("Число",
		Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаСвязанныхОбъектовУчета.Колонки.Добавить("ОбъектУчета", 
		ИнтеграцияЭДО.ОписаниеТиповОснованийЭлектронныхДокументов());
	Возврат ТаблицаСвязанныхОбъектовУчета;
КонецФункции

// Добавляет параметры формирования исходящего документа.
// 
// Параметры:
//  ПараметрыВыполнения - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  ВыборкаНастроек - ВыборкаИзРезультатаЗапроса:
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * Отправитель - ОпределяемыйТип.Организация
//  * Получатель - ОпределяемыйТип.УчастникЭДО
//  * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ДоговорУчетногоДокумента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * Формат - Строка
//  * МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//  * СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
//  * ИдентификаторОтправителя - Строка
//  * ИдентификаторПолучателя - Строка
//  * ТребуетсяОтветнаяПодпись - Булево
//  * ТребуетсяИзвещениеОПолучении - Булево
//  * ВыгружатьДополнительныеСведения - Булево
//  * ОбменБезПодписи - Булево
//  * Формировать - Булево
//  * ЗаполнениеКодаТовара - Строка
//  НаборПараметровФормирования - см. НаборПараметровФормирования
//  ТаблицаСвязанныхОбъектовУчета - см. НоваяТаблицаСвязанныхОбъектовУчета
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ДобавитьПараметрыФормированияИсходящегоДокумента(ПараметрыВыполнения, ВыборкаНастроек, НаборПараметровФормирования, ТаблицаСвязанныхОбъектовУчета, РезультатДействий)
	
	Если ВыборкаНастроек.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорныйДокумент
		И ОбщегоНазначения.ЭтоСправочник(ВыборкаНастроек.ОбъектУчета.Метаданные())
		И ОбщегоНазначения.ОбъектЯвляетсяГруппой(ВыборкаНастроек.ОбъектУчета) Тогда
		ОписаниеОшибки = ДобавитьОшибкуФормированияИсходящегоДокумента(РезультатДействий, ВыборкаНастроек);
		ОписаниеОшибки.ФормированиеНедоступноДляГруппы = Истина;
		Возврат;
	КонецЕсли;
	
	Формировать = ФормироватьДокумент(ВыборкаНастроек, РезультатДействий);
	Если Не Формировать Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	МаршрутПодписанияИзПараметровВыполнения = ПараметрыВыполнения.МаршрутыПодписанияОбъектов[ВыборкаНастроек.ОбъектУчета];
	
	МаршрутПодписания = МаршрутПодписанияИзПараметровВыполнения;
	Если Не ЗначениеЗаполнено(МаршрутПодписания) Тогда
		МаршрутПодписания = ВыборкаНастроек.МаршрутПодписания;
	КонецЕсли;
	
	НастройкиОтправки = ВыборкаНастроек;
	
	НастройкиОбъекта = ПараметрыВыполнения.НастройкиОбъектов[ВыборкаНастроек.ОбъектУчета];
	Если НастройкиОбъекта <> Неопределено Тогда
		НастройкиОтправки = НастройкиОбъекта; // См. НастройкиЭДО.НастройкиОтправки
		ВидДокумента = НастройкиОбъекта.ВидДокумента; // СправочникСсылка.ВидыДокументовЭДО
		ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "ТипДокумента");
		НастройкиОтправки.Вставить("ТипДокумента", ТипДокумента);
		Если Не ЗначениеЗаполнено(МаршрутПодписанияИзПараметровВыполнения) Тогда
			МаршрутПодписания = НастройкиОбъекта.МаршрутПодписания;
		КонецЕсли;
	КонецЕсли;
	
	Подписанты = Неопределено;
	Если МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании() Тогда
		Подписанты = ПараметрыВыполнения.ПодписантыОбъектов[ВыборкаНастроек.ОбъектУчета];
		Если Не ЗначениеЗаполнено(Подписанты) Тогда
			ОписаниеОшибки = ДобавитьОшибкуФормированияИсходящегоДокумента(РезультатДействий, ВыборкаНастроек);
			ОписаниеОшибки.ОтсутствуютПодписанты = Истина;
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеДанные = ПараметрыВыполнения.ДополнительныеДанныеОбъектов[ВыборкаНастроек.ОбъектУчета];
	
	ПараметрыФормирования = ИнтеграцияЭДО.НовыеПараметрыФормированияДанныхОбъектаУчета();
	ЗаполнитьЗначенияСвойств(ПараметрыФормирования, НастройкиОтправки);
	Если ЗначениеЗаполнено(ДополнительныеДанные)
		И ВыборкаНастроек.ТипДокумента = Перечисления.ТипыДокументовЭДО.КаталогТоваров Тогда
		ПараметрыФормирования.ДанныеКаталога = ДополнительныеДанные;
	КонецЕсли; 
	
	ФайлДоговора = ПараметрыВыполнения.ДополнительныеФайлы[ВыборкаНастроек.ОбъектУчета];
	Если ЗначениеЗаполнено(ФайлДоговора) Тогда
		ПараметрыФормирования.ДанныеФайлаДоговора = ФайлДоговора.ДвоичныеДанные;
	КонецЕсли;
	ОписаниеДанных = ИнтеграцияЭДО.ОписаниеДанныхОбъектаУчета(ВыборкаНастроек.ОбъектУчета, ПараметрыФормирования);
	
	Формат = ВыборкаНастроек.Формат;
	Если ИнтерфейсДокументовЭДОКлиентСервер.ЭтоФорматДоговорногоДокументаXML(Формат)
		И ЗначениеЗаполнено(ФайлДоговора)
		И ОписаниеДанных.Данные.ОбъектXDTO = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	ОписанияДополнительныхСообщений = Неопределено;
	Если Не ЗначениеЗаполнено(ВыборкаНастроек.Формат) 
		И Не (МодульОбменСГИСЭПД <> Неопределено И МодульОбменСГИСЭПД.ЭтоДокументЭПД(ВыборкаНастроек.ТипДокумента)) Тогда
		ИдентификаторПечатнойФормы = ПараметрыВыполнения.ИдентификаторыПечатныхФормОбъектов[ВыборкаНастроек.ОбъектУчета];
		ОписаниеФайлаПечатнойФормы = СформироватьДанныеПечатнойФормыОбъектаУчета(РезультатДействий,
			ВыборкаНастроек.ОбъектУчета, ВыборкаНастроек, ИдентификаторПечатнойФормы);
		
		ОписаниеСообщения = ОписаниеСообщенияОтправителяПроизвольногоФормата(ВыборкаНастроек.ОбъектУчета, НастройкиОтправки,
			ОписаниеФайлаПечатнойФормы);
	ИначеЕсли ВыборкаНастроек.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
		ОписаниеСообщения = ОписаниеСообщенияОтправителяПрикладногоДокумента(
			ВыборкаНастроек.ОбъектУчета, НастройкиОтправки, ВыборкаНастроек.ПрикладнойТипДокумента);
	Иначе
		ОписаниеСообщения = ОписаниеСообщенияОтправителя(ВыборкаНастроек.ОбъектУчета, ОписаниеДанных.Данные, НастройкиОтправки,
			ДополнительныеДанные);
		ОписанияДополнительныхСообщений = ОписанияДополнительныхСообщений(ВыборкаНастроек.ОбъектУчета, ОписаниеДанных.Данные,
			НастройкиОтправки, ПараметрыФормирования);
		
		Формат = НастройкиОтправки.Формат;
		Если (ИнтерфейсДокументовЭДОКлиентСервер.ЭтоФорматДоговорногоДокументаПДФ_А3(Формат)
			Или ИнтерфейсДокументовЭДОКлиентСервер.ЭтоФорматДоговорногоДокументаXML(Формат))
			И Не ЗначениеЗаполнено(ФайлДоговора) Тогда
			ОписаниеОшибки = ДобавитьОшибкуФормированияИсходящегоДокумента(РезультатДействий, ВыборкаНастроек);
			ПараметрыВыбораФайла = НовыеПараметрыПолученияФайлаДоговорногоДокумента();
			ПараметрыВыбораФайла.Формат = Формат;
			Если ОписаниеСообщения.Данные <> Неопределено
				И ОписаниеСообщения.Данные.Содержание <> Неопределено Тогда
				ПараметрыВыбораФайла.ИдентификаторОсновногоФайла = ОписаниеСообщения.Данные.Содержание.ИдентификаторДокумента;
			КонецЕсли;
			ОписаниеОшибки.ОтсутствуетФайлДоговорногоДокумента = ПараметрыВыбораФайла;
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОписанияСообщений = Новый Массив;
	ОписанияСообщений.Добавить(ОписаниеСообщения);
	Если ОписанияДополнительныхСообщений <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОписанияСообщений, ОписанияДополнительныхСообщений);
	КонецЕсли;
	
	Для Каждого ОписаниеСообщения Из ОписанияСообщений Цикл
		Если ОписаниеСообщения.Данные.ЕстьОшибки Тогда
			ОписаниеОшибки = ДобавитьОшибкуФормированияИсходящегоДокумента(РезультатДействий, ВыборкаНастроек);
			ОписаниеОшибки.ОшибкиДанных = ОписаниеСообщения.Данные.Ошибки;
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиДокумента = ЭлектронныеДокументыЭДО.НовыеНастройкиОтправкиДокумента();
	НастройкиДокумента.ИдентификаторОрганизации = НастройкиОтправки.ИдентификаторОтправителя;
	НастройкиДокумента.ИдентификаторКонтрагента = НастройкиОтправки.ИдентификаторПолучателя;
	НастройкиДокумента.Организация = НастройкиОтправки.Отправитель;
	НастройкиДокумента.Контрагент = НастройкиОтправки.Получатель;
	НастройкиДокумента.ДоговорКонтрагента = 
		?(ЗначениеЗаполнено(НастройкиОтправки.Договор), НастройкиОтправки.Договор, ВыборкаНастроек.ДоговорУчетногоДокумента);
	НастройкиДокумента.СпособОбмена = НастройкиОтправки.СпособОбмена;
	НастройкиДокумента.ОбменБезПодписи = НастройкиОтправки.ОбменБезПодписи;
	НастройкиДокумента.МаршрутПодписания = МаршрутПодписания;
	НастройкиДокумента.Подписанты = Подписанты;
	НастройкиДокумента.ТребуетсяИзвещение = НастройкиОтправки.ТребуетсяИзвещениеОПолучении;
	НастройкиДокумента.ТребуетсяПодтверждение = НастройкиОтправки.ТребуетсяОтветнаяПодпись;
	НастройкиДокумента.ВыгружатьДополнительныеСведения = НастройкиОтправки.ВыгружатьДополнительныеСведения;
	НастройкиДокумента.ЭтоОблачныйЭДО = УчетныеЗаписиЭДО.ЭтоУчетнаяЗаписьОблачногоЭДО(
		НастройкиОтправки.ИдентификаторОтправителя);
	
	ПараметрыФормирования = НовыеПараметрыФормированияДокумента(
		ОписаниеДанных.СвязующийОбъектУчета, НастройкиДокумента, ОписанияСообщений, ОписаниеДанных.Основания);
	
	НаборПараметровФормирования.Добавить(ПараметрыФормирования);
	
	СвязанныеОбъектыУчета = ОписаниеДанных.СвязанныеОбъектыУчета;
	
	Если Не ЗначениеЗаполнено(СвязанныеОбъектыУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ИндексПараметров = НаборПараметровФормирования.Количество() - 1;
	Для Каждого ОбъектУчета Из СвязанныеОбъектыУчета Цикл
		СтрокаТаблицы = ТаблицаСвязанныхОбъектовУчета.Добавить();
		СтрокаТаблицы.ИндексПараметров = ИндексПараметров;
		СтрокаТаблицы.ОбъектУчета = ОбъектУчета;
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  РезультатДействий - См. НовыйРезультатДействийПоЭДО
//  ВыборкаНастроек - См. ДобавитьПараметрыФормированияИсходящегоДокумента.ВыборкаНастроек
// 
// Возвращаемое значение:
//  См. ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования
Функция ДобавитьОшибкуФормированияИсходящегоДокумента(РезультатДействий, ВыборкаНастроек)
	ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
	ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ВыборкаНастроек);
	ОписаниеОшибки.ОписаниеОбъектаУчета.Организация = ВыборкаНастроек.Отправитель;
	ОписаниеОшибки.ОписаниеОбъектаУчета.Контрагент = ВыборкаНастроек.Получатель;
	ОписаниеОшибки.ВидДокумента = ВыборкаНастроек.ВидДокумента;
	РезультатДействий.ОшибкиФормирования.Добавить(ОписаниеОшибки);
	Возврат ОписаниеОшибки;
КонецФункции

// Параметры:
//  РезультатДействий - См. НовыйРезультатДействийПоЭДО
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ВыборкаНастроек - См. ДобавитьПараметрыФормированияИсходящегоДокумента.ВыборкаНастроек
//  ИдентификаторПечатнойФормы - Строка
// 
// Возвращаемое значение:
//  См. РаботаСФайламиБЭД.НовоеОписаниеФайла
Функция СформироватьДанныеПечатнойФормыОбъектаУчета(РезультатДействий, ОбъектУчета, ВыборкаНастроек, ИдентификаторПечатнойФормы)
	
	ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
	
	КомандаПечати = Неопределено;
	
	НаборКомандПечати = ИнтеграцияЭДО.КомандыПечатиДляВнутреннегоЭДО(ОбъектУчета.Метаданные());
	Если НаборКомандПечати.Количество() = 1 Тогда
		КомандаПечати = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НаборКомандПечати[0]);
	ИначеЕсли НаборКомандПечати.Количество() > 1 Тогда
		СтрокаНабора = НаборКомандПечати.Найти(ИдентификаторПечатнойФормы, "Идентификатор");
		Если СтрокаНабора = Неопределено Тогда
			ОписаниеОшибки = ДобавитьОшибкуФормированияИсходящегоДокумента(РезультатДействий, ВыборкаНастроек);
			ОписаниеОшибки.ПечатнаяФормаНеУказана = Истина;
		Иначе
			КомандаПечати = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаНабора);
		КонецЕсли;
	КонецЕсли;
	
	Если КомандаПечати = Неопределено Тогда
		Возврат ОписаниеФайла;
	КонецЕсли;
	
	МассивОбъектовУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектУчета);
	РезультатПечати = ИнтеграцияЭДО.ПечатныеФормыДокументов(КомандаПечати, МассивОбъектовУчета);
	
	Если ЗначениеЗаполнено(РезультатПечати) Тогда
		ОписаниеФайла.ДвоичныеДанные = РезультатПечати[0].ДвоичныеДанные;
		ОписаниеФайла.ИмяФайла = РезультатПечати[0].ИмяФайла;
	КонецЕсли;
	
	Возврат ОписаниеФайла;
	
КонецФункции

// Параметры:
//  СвязанныеОбъектыУчета - См. НоваяТаблицаСвязанныхОбъектовУчета
// 
// Возвращаемое значение:
//  РезультатЗапроса
Функция РезультатЗапросаИдентификаторовДокументоборотовОбъектовУчета(СвязанныеОбъектыУчета)
	
	ОписанияЗапросов = Новый Массив;
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = 
		"ВЫБРАТЬ
		|	СвязанныеОбъектыУчета.ИндексПараметров КАК ИндексПараметров,
		|	СвязанныеОбъектыУчета.ОбъектУчета КАК ОбъектУчета
		|ПОМЕСТИТЬ СвязанныеОбъектыУчета
		|ИЗ
		|	&ТаблицаОбъектовУчета КАК СвязанныеОбъектыУчета";
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ТаблицаОбъектовУчета", СвязанныеОбъектыУчета);
	ОписанияЗапросов.Добавить(ОписаниеЗапроса);
	
	Отбор = ИнтеграцияЭДО.НовыйОтборАктуальныхЭлектронныхДокументов();
	Отбор.ОбъектыУчета = "ВЫБРАТЬ ОбъектУчета ИЗ СвязанныеОбъектыУчета";
	ОписаниеЗапроса = ИнтеграцияЭДО.ЗапросАктуальныхЭлектронныхДокументов("АктуальныеДокументыЭДООбъектовУчета", Отбор);
	ОписанияЗапросов.Добавить(ОписаниеЗапроса);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязанныеОбъектыУчета.ИндексПараметров КАК ИндексПараметров,
		|	АктуальныеДокументыЭДООбъектовУчета.ОбъектУчета КАК ОбъектУчета,
		|	АктуальныеДокументыЭДООбъектовУчета.ЭлектронныйДокумент.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота
		|ИЗ
		|	АктуальныеДокументыЭДООбъектовУчета КАК АктуальныеДокументыЭДООбъектовУчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвязанныеОбъектыУчета КАК СвязанныеОбъектыУчета
		|		ПО АктуальныеДокументыЭДООбъектовУчета.ОбъектУчета = СвязанныеОбъектыУчета.ОбъектУчета";
	
	Запрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, ОписанияЗапросов);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
// * ИдентификаторСвязи - Строка 
// * ИдентификаторДокументооборота - Строка
Функция НовыйЭлементКоллекцииИдентификаторыОснованияДокумента()
	ИдентификаторыОснований = Новый Структура;
	ИдентификаторыОснований.Вставить("ИдентификаторСвязи", "");
	ИдентификаторыОснований.Вставить("ИдентификаторДокументооборота", "");
	Возврат ИдентификаторыОснований;
КонецФункции

// Параметры:
//  ЭлементКоллекции - СтрокаТабличнойЧасти: См. Документ.ЭлектронныйДокументИсходящийЭДО.ИдентификаторыОснований
//  ВыборкаИдентификаторов - ВыборкаИзРезультатаЗапроса:
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * ИдентификаторДокументооборота - Строка
Процедура ЗаполнитьЭлементКоллекцииИдентификаторыОснованияДокумента(ЭлементКоллекции, ВыборкаИдентификаторов)
	ЭлементКоллекции.ИдентификаторСвязи = Строка(ВыборкаИдентификаторов.ОбъектУчета.УникальныйИдентификатор());
	ЭлементКоллекции.ИдентификаторДокументооборота = ВыборкаИдентификаторов.ИдентификаторДокументооборота;
КонецПроцедуры

// Параметры:
//  ПараметрыВыполнения - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатЗапросаНастроек - РезультатЗапроса
//  НаборПараметровФормирования - Массив Из см. НовыеПараметрыФормированияДокумента
//  РезультатДействий - См. НовыйРезультатДействийПоЭДО
Процедура ЗаполнитьПараметрыФормированияВнутреннихДокументов(ПараметрыВыполнения, РезультатЗапросаНастроек, НаборПараметровФормирования, РезультатДействий)
	
	Если РезультатЗапросаНастроек.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаНастроек = РезультатЗапросаНастроек.Выбрать();
	
	Пока ВыборкаНастроек.Следующий() Цикл
		
		ДобавитьПараметрыФормированияВнутреннегоДокумента(ПараметрыВыполнения,
			ВыборкаНастроек, НаборПараметровФормирования, РезультатДействий);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ПараметрыВыполнения - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатЗапросаНастроек - РезультатЗапроса
//  НаборПараметровФормирования - Массив Из см. НовыеПараметрыФормированияДокумента
//  РезультатДействий - См. НовыйРезультатДействийПоЭДО
Процедура ЗаполнитьПараметрыФормированияВнутреннихДокументовПоУмолчанию(ПараметрыВыполнения, РезультатЗапросаНастроек, НаборПараметровФормирования, РезультатДействий)
	
	Если РезультатЗапросаНастроек.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОбработанныеОбъектыУчета = Новый Соответствие;
	
	ВыборкаНастроек = РезультатЗапросаНастроек.Выбрать();
	
	Пока ВыборкаНастроек.Следующий() Цикл
		
		Если ОбработанныеОбъектыУчета[ВыборкаНастроек.ОбъектУчета] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработанныеОбъектыУчета.Вставить(ВыборкаНастроек.ОбъектУчета, Истина);
		
		Если ВыборкаНастроек.ЭтоОсновнойВидДокумента = Истина Тогда
			Если ВыборкаНастроек.ЕстьАктуальныйДокумент Тогда
				// Основной вид документа указан, но уже есть актуальный документ - формировать нечего.
				Продолжить;
			КонецЕсли;	
		ИначеЕсли ВыборкаНастроек.ЭтоОсновнойВидДокумента = Ложь Тогда
			ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
			ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ВыборкаНастроек);
			ОписаниеОшибки.ОсновнойВидНеУстановлен = Истина;
			РезультатДействий.ОшибкиФормирования.Добавить(ОписаниеОшибки);
			Продолжить;
		КонецЕсли;
		
		ДобавитьПараметрыФормированияВнутреннегоДокумента(ПараметрыВыполнения,
			ВыборкаНастроек, НаборПараметровФормирования, РезультатДействий);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ПараметрыОбъектаУчета - См. ДобавитьПараметрыФормированияИсходящегоДокумента.ВыборкаНастроек
//  РезультатДействий - См. НовыйРезультатДействийПоЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ФормироватьДокумент(ПараметрыОбъектаУчета, РезультатДействий)
	
	Результат = Истина;
	
	Если ПараметрыОбъектаУчета.Формировать = Null Тогда
		
		ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
		ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ПараметрыОбъектаУчета);
		ОписаниеОшибки.ОписаниеОбъектаУчета.Организация = ПараметрыОбъектаУчета.Отправитель;
		ОписаниеОшибки.ОписаниеОбъектаУчета.Контрагент = ПараметрыОбъектаУчета.Получатель;
		ОписаниеОшибки.ВидДокумента = ПараметрыОбъектаУчета.ВидДокумента;
		ОписаниеОшибки.ОтсутствуютНастройки = Истина;
		РезультатДействий.ОшибкиФормирования.Добавить(ОписаниеОшибки);
		Результат = Ложь;
		
	ИначеЕсли Не ПараметрыОбъектаУчета.Формировать Тогда
		
		ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
		ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ПараметрыОбъектаУчета);
		ОписаниеОшибки.ОписаниеОбъектаУчета.Организация = ПараметрыОбъектаУчета.Отправитель;
		ОписаниеОшибки.ОписаниеОбъектаУчета.Контрагент = ПараметрыОбъектаУчета.Получатель;
		ОписаниеОшибки.ВидДокумента = ПараметрыОбъектаУчета.ВидДокумента;
		ОписаниеОшибки.ФормированиеЗапрещено = Истина;
		РезультатДействий.ОшибкиФормирования.Добавить(ОписаниеОшибки);
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ПараметрыОбъектаУчета - См. ДобавитьПараметрыФормированияИсходящегоДокумента.ВыборкаНастроек
//  РезультатДействий - См. НовыйРезультатДействийПоЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ФормироватьВнутреннийДокумент(ПараметрыОбъектаУчета, РезультатДействий)
	
	Результат = Истина;
	
	Если ПараметрыОбъектаУчета.Формировать = Null Тогда
		
		ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
		ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ПараметрыОбъектаУчета);
		ОписаниеОшибки.ОписаниеОбъектаУчета.Организация = ПараметрыОбъектаУчета.Организация;
		ОписаниеОшибки.ВидДокумента = ПараметрыОбъектаУчета.ВидДокумента;
		ОписаниеОшибки.ОтсутствуютНастройки = Истина;
		РезультатДействий.ОшибкиФормирования.Добавить(ОписаниеОшибки);
		Результат = Ложь;
		
	ИначеЕсли Не ПараметрыОбъектаУчета.Формировать Тогда
		
		ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
		ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ПараметрыОбъектаУчета);
		ОписаниеОшибки.ОписаниеОбъектаУчета.Организация = ПараметрыОбъектаУчета.Организация;
		ОписаниеОшибки.ВидДокумента = ПараметрыОбъектаУчета.ВидДокумента;
		ОписаниеОшибки.ФормированиеЗапрещено = Истина;
		РезультатДействий.ОшибкиФормирования.Добавить(ОписаниеОшибки);
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ПараметрыВыполнения - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  ВыборкаНастроек - См. ДобавитьПараметрыФормированияИсходящегоДокумента.ВыборкаНастроек
//  НаборПараметровФормирования - Массив Из см. НовыеПараметрыФормированияДокумента
//  РезультатДействий - См. НовыйРезультатДействийПоЭДО
Процедура ДобавитьПараметрыФормированияВнутреннегоДокумента(ПараметрыВыполнения, ВыборкаНастроек, НаборПараметровФормирования, РезультатДействий)
	
	Формировать = ФормироватьВнутреннийДокумент(ВыборкаНастроек, РезультатДействий);
	Если Не Формировать Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	МаршрутПодписания = ПараметрыВыполнения.МаршрутыПодписанияОбъектов[ВыборкаНастроек.ОбъектУчета];
	Если Не ЗначениеЗаполнено(МаршрутПодписания) Тогда
		МаршрутПодписания = ВыборкаНастроек.МаршрутПодписания;
	КонецЕсли;
	
	Подписанты = Неопределено;
	Если МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании() Тогда
		Подписанты = ПараметрыВыполнения.ПодписантыОбъектов[ВыборкаНастроек.ОбъектУчета];
		Если Не ЗначениеЗаполнено(Подписанты) Тогда
			ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
			ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ВыборкаНастроек);
			ОписаниеОшибки.ВидДокумента = ВыборкаНастроек.ВидДокумента;
			ОписаниеОшибки.ОтсутствуютПодписанты = Истина;
			РезультатДействий.ОшибкиФормирования.Добавить(ОписаниеОшибки);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеСообщения = ОписаниеСообщенияВнутреннегоЭДО(ВыборкаНастроек.ОбъектУчета, ВыборкаНастроек);
	Если ОписаниеСообщения.Данные.ЕстьОшибки Тогда
		ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
		ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ВыборкаНастроек);
		ОписаниеОшибки.ВидДокумента = ВыборкаНастроек.ВидДокумента;
		ОписаниеОшибки.ОшибкиДанных = ОписаниеСообщения.Данные.Ошибки;
		РезультатДействий.ОшибкиФормирования.Добавить(ОписаниеОшибки);
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиДокумента = ЭлектронныеДокументыЭДО.НовыеНастройкиОтправкиДокумента();
	ЗаполнитьЗначенияСвойств(НастройкиДокумента, ВыборкаНастроек);
	НастройкиДокумента.МаршрутПодписания = МаршрутПодписания;
	НастройкиДокумента.Подписанты = Подписанты;
	
	Основания = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыборкаНастроек.ОбъектУчета);
	
	ПараметрыФормирования = НовыеПараметрыФормированияДокумента(ВыборкаНастроек.ОбъектУчета,
		НастройкиДокумента, ОписаниеСообщения, Основания);
	НаборПараметровФормирования.Добавить(ПараметрыФормирования);
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * Формат - Строка
//  * ИдентификаторОсновногоФайла - Строка
Функция НовыеПараметрыПолученияФайлаДоговорногоДокумента() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("Формат", "");
	Параметры.Вставить("ИдентификаторОсновногоФайла", "");
	Возврат Параметры;
КонецФункции

// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  НастройкиДокумента - См. ЭлектронныеДокументыЭДО.НовыеНастройкиОтправкиДокумента
//  ОписаниеСообщения - См. НовоеОписаниеСообщения
//  Основания - Неопределено,Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ИдентификаторыОснований - Массив из см. НовыйЭлементКоллекцииИдентификаторыОснованияДокумента
// 
// Возвращаемое значение:
//  Структура:
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * НастройкиДокумента - См. ЭлектронныеДокументыЭДО.НовыеНастройкиОтправкиДокумента
//  * ОписаниеСообщения - См. НовоеОписаниеСообщения
//  * Основания - Неопределено,Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * ИдентификаторыОснований - Неопределено,Массив из см. НовыйЭлементКоллекцииИдентификаторыОснованияДокумента
Функция НовыеПараметрыФормированияДокумента(ОбъектУчета, НастройкиДокумента, ОписаниеСообщения, Основания = Неопределено, ИдентификаторыОснований = Неопределено)
	Параметры = Новый Структура;
	Параметры.Вставить("ОбъектУчета", ОбъектУчета);
	Параметры.Вставить("НастройкиДокумента", НастройкиДокумента);
	Параметры.Вставить("ОписаниеСообщения", ОписаниеСообщения);
	Параметры.Вставить("Основания", ?(Основания = Неопределено, Новый Массив, Основания));
	Параметры.Вставить("ИдентификаторыОснований", ИдентификаторыОснований);
	Возврат Параметры;
КонецФункции

// Параметры:
//  НастройкиОтправки - см. ЭлектронныеДокументыЭДО.НовыеНастройкиОтправкиДокумента
//  ОписанияСообщений - Массив из см. НовоеОписаниеСообщения
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  СвязующийОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ОбъектыУчета - Массив из см. ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ИдентификаторыОснований - Массив из см. НовыйЭлементКоллекцииИдентификаторыОснованияДокумента
//
// Возвращаемое значение:
//  ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
//
Функция СоздатьИсходящийДокумент(НастройкиОтправки, ОписанияСообщений, КонтекстДиагностики, СвязующийОбъектУчета = Неопределено, ОбъектыУчета = Неопределено, ИдентификаторыОснований = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СвязующийОбъектУчета) Тогда
		ИдентификаторСвязи = Строка(СвязующийОбъектУчета.УникальныйИдентификатор());
	Иначе
		ИдентификаторСвязи = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	ДокументОбъект = НовыйИсходящийДокументОбъект(НастройкиОтправки, ОписанияСообщений, ИдентификаторСвязи, ИдентификаторыОснований);
	
	ЭлектронныеДокументыЭДО.ПередЗаписьюНовогоДокумента(ДокументОбъект, ОписанияСообщений);
	
	Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка заполнения исходящего электронного документа'");
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ДокументОбъект.Записать();
		
		ЭлектронныеДокументыЭДО.ПриЗаписиНовогоДокумента(ДокументОбъект, ОписанияСообщений, КонтекстДиагностики, ОбъектыУчета);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ЭлектронныеДокументыЭДО.ПослеЗаписиНовогоДокумента(ДокументОбъект, КонтекстДиагностики);
	
	Возврат ДокументОбъект;
	
КонецФункции

// Возвращает объект нового исходящего электронного документа.
//
// Параметры:
//  НастройкиОтправки - см. ЭлектронныеДокументыЭДО.НовыеНастройкиОтправкиДокумента
//  ОписанияСообщений - Массив из см. НовоеОписаниеСообщения
//  ИдентификаторСвязи - УникальныйИдентификатор
//  ИдентификаторыОснований - Массив из См. НовыйЭлементКоллекцииИдентификаторыОснованияДокумента
//
// Возвращаемое значение:
//  ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
//
Функция НовыйИсходящийДокументОбъект(НастройкиОтправки, ОписанияСообщений, ИдентификаторСвязи,
	ИдентификаторыОснований = Неопределено)
	
	Если ТипЗнч(ОписанияСообщений) = Тип("Массив") И ОписанияСообщений.Количество() > 0 Тогда
		ОписаниеСообщения = ОписанияСообщений[0];
	Иначе
		ОписаниеСообщения = ОписанияСообщений;
	КонецЕсли;
	
	ДокументОбъект = Документы.ЭлектронныйДокументИсходящийЭДО.СоздатьДокумент();
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	
	Если НастройкиОтправки.СоздатьНомерАвтоматически Тогда
		ДокументОбъект.УстановитьНовыйНомер();
		ДокументОбъект.НомерДокумента = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(
			ДокументОбъект.Номер, "0");
	КонецЕсли;
	
	ЗаполнитьИсходящийДокументОбъект(ДокументОбъект, НастройкиОтправки, ОписаниеСообщения, ИдентификаторСвязи,
		ИдентификаторыОснований);
	
	Возврат ДокументОбъект;
	
КонецФункции

// Параметры:
//  ДокументОбъект - ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
//  НастройкиОтправки - см. ЭлектронныеДокументыЭДО.НовыеНастройкиОтправкиДокумента
//  ОписаниеСообщения - см. НовоеОписаниеСообщения
//  ИдентификаторСвязи - Строка
//  ИдентификаторыОснований - Неопределено
//                          - Массив из См. НовыйЭлементКоллекцииИдентификаторыОснованияДокумента
//
Процедура ЗаполнитьИсходящийДокументОбъект(ДокументОбъект, НастройкиОтправки, ОписаниеСообщения,
	ИдентификаторСвязи = "", ИдентификаторыОснований = Неопределено)

	ДокументОбъект.Организация = НастройкиОтправки.Организация;
	ДокументОбъект.Контрагент = НастройкиОтправки.Контрагент;
	ДокументОбъект.ДоговорКонтрагента = НастройкиОтправки.ДоговорКонтрагента;
	
	ДокументОбъект.ИдентификаторОрганизации = НастройкиОтправки.ИдентификаторОрганизации;
	ДокументОбъект.ИдентификаторКонтрагента = НастройкиОтправки.ИдентификаторКонтрагента;
	ДокументОбъект.ИдентификаторСвязи = ИдентификаторСвязи;
	ДокументОбъект.СпособОбмена = НастройкиОтправки.СпособОбмена;
	ДокументОбъект.ОбменБезПодписи = НастройкиОтправки.ОбменБезПодписи;
	ДокументОбъект.МаршрутПодписания = НастройкиОтправки.МаршрутПодписания;
	ДокументОбъект.ВидПодписи = НастройкиОтправки.ВидПодписи;
	ДокументОбъект.ТребуетсяИзвещение = НастройкиОтправки.ТребуетсяИзвещение;
	ДокументОбъект.ТребуетсяПодтверждение = НастройкиОтправки.ТребуетсяПодтверждение;
	ДокументОбъект.ВыгружатьДополнительныеСведения = НастройкиОтправки.ВыгружатьДополнительныеСведения;
	ДокументОбъект.ФорматОсновногоТитула = НастройкиОтправки.Формат;
	Если ЗначениеЗаполнено(НастройкиОтправки.ИдентификаторДокумента) Тогда
		ДокументОбъект.ИдентификаторДокумента = НастройкиОтправки.ИдентификаторДокумента;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДокументОбъект.ИдентификаторДокументооборота) Тогда
		ДокументОбъект.ИдентификаторДокументооборота = ЭлектронныеДокументыЭДО.НовыйИдентификаторДокументооборота();
	КонецЕсли;
	ДокументОбъект.ЭтоОблачныйЭДО = НастройкиОтправки.ЭтоОблачныйЭДО;

	Содержание = ОписаниеСообщения.Данные.Содержание;
	ДокументОбъект.ТипРегламента = Содержание.ТипРегламента;
	Если ЗначениеЗаполнено(Содержание.Формат) Тогда
		ДокументОбъект.ФорматОсновногоТитула = Содержание.Формат;
	КонецЕсли;
	
	ДокументОбъект.СписокПодписантов.Очистить();
	Если ЗначениеЗаполнено(НастройкиОтправки.Подписанты) Тогда
		Для Каждого Подписант Из НастройкиОтправки.Подписанты Цикл
			ДокументОбъект.СписокПодписантов.Добавить().Подписант = Подписант;
		КонецЦикла;
	КонецЕсли;
	
	ДокументОбъект.ИдентификаторыОснований.Очистить();
	Если ЗначениеЗаполнено(ИдентификаторыОснований) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ИдентификаторыОснований, ДокументОбъект.ИдентификаторыОснований);
	КонецЕсли;

КонецПроцедуры

// Создает сообщение в информационной базе.
// 
// Параметры:
//  ОписаниеСообщения - см. НовоеОписаниеСообщения
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  НастройкиДокумента - Структура:
//  * ТипДокумента           - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ТипРегламента          - ПеречислениеСсылка.ТипыРегламентовЭДО
//  * ТребуетсяПодтверждение - Булево
//  * ОбменБезПодписи        - Булево
//  * СпособОбмена           - ПеречислениеСсылка.СпособыОбменаЭД
//  
// Возвращаемое значение:
//  ДокументОбъект.СообщениеЭДО
Функция СоздатьСообщение(ОписаниеСообщения, ЭлектронныйДокумент, НастройкиДокумента) Экспорт
	
	Если ЗначениеЗаполнено(ОписаниеСообщения.Ссылка) Тогда
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ОписаниеСообщения.Ссылка);
		
		Попытка
			Блокировка.Заблокировать();
			СообщениеОбъект = ОписаниеСообщения.Ссылка.ПолучитьОбъект();
		Исключение
			ВызватьИсключение НСтр("ru = 'Ошибка получения сообщения ЭДО'");
		КонецПопытки;
		
	Иначе
		СообщениеОбъект = Документы.СообщениеЭДО.СоздатьДокумент();
	КонецЕсли;
	СообщениеОбъект.Дата = ТекущаяДатаСеанса();
	СообщениеОбъект.ЭлектронныйДокумент = ЭлектронныйДокумент;
	СообщениеОбъект.ТипЭлементаРегламента = ОписаниеСообщения.ТипЭлементаРегламента;
	СообщениеОбъект.Направление = ОписаниеСообщения.Направление;
	СообщениеОбъект.ДополнительнаяИнформация = ОписаниеСообщения.ДополнительнаяИнформация;
	СообщениеОбъект.ВидСообщения = ОписаниеСообщения.ВидСообщения;
	
	ЭтоЭлектронноеАктированиеЕИС = Ложь;
	МодульЭлектронноеАктированиеЕИС = Неопределено;
	СпособОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "СпособОбмена");
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		Если (МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС()
			ИЛИ МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС())
			И МодульЭлектронноеАктированиеЕИС.ЭтоОбменЧерезСерверЕИС(СпособОбмена) Тогда
			ЭтоЭлектронноеАктированиеЕИС = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеСообщения.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
		СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.Получен;
	Иначе
		СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.Сформирован;
	КонецЕсли;
	
	СообщениеОбъект.ДатаИзмененияСтатуса = СообщениеОбъект.Дата;
	
	ИспользоватьУтверждение = СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Входящий
		И РегламентыЭДО.ЭтоЭлементРегламентаОтправителя(СообщениеОбъект.ТипЭлементаРегламента)
		И НастройкиДокумента.ТипДокумента <> Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность
		И НастройкиЭДО.ОтправлятьВходящиеДокументыНаУтверждение();
	
	СообщениеОбъект.Состояние = РегламентыЭДО.СостояниеСообщения(СообщениеОбъект, НастройкиДокумента,
		ИспользоватьУтверждение);
	
	СообщениеОбъект.ОсновнойФайл = Справочники.СообщениеЭДОПрисоединенныеФайлы.ПолучитьСсылку();
	
	Если Не СообщениеОбъект.ПроверитьЗаполнение() Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка заполнения сообщения ЭДО'");
	КонецЕсли;
	
	СообщениеОбъект.Записать();
	
	ДоступноИнтерактивноеРедактирование = ДоступноИнтерактивноеРедактированиеПрисоединенногоФайла(СообщениеОбъект.ВидСообщения,
		СообщениеОбъект.Направление);	
	
	СоздатьПрисоединенныйФайл(СообщениеОбъект.Ссылка, ОписаниеСообщения.Данные.Документ, СообщениеОбъект.ОсновнойФайл, 
		ДоступноИнтерактивноеРедактирование);
	
	// Создаем объект для приложения к титулу для ЕИС.
	Если ЭтоЭлектронноеАктированиеЕИС
		И (ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
			ИЛИ ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя)
		И ОписаниеСообщения.Направление = Перечисления.НаправленияЭДО.Исходящий Тогда
			
		СообщениеОбъектПриложениеЕИС = МодульЭлектронноеАктированиеЕИС.
			СоздатьСообщениеПриложенияДляЕИС(ОписаниеСообщения, ЭлектронныйДокумент, НастройкиДокумента);
		
		СоздатьПрисоединенныйФайл(СообщениеОбъектПриложениеЕИС.Ссылка,
			ОписаниеСообщения.Данные.ДополнительныйДокумент,
			СообщениеОбъектПриложениеЕИС.ОсновнойФайл);
		
	Иначе
		
		Если ОписаниеСообщения.Данные.ДополнительныйДокумент.ДвоичныеДанные <> Неопределено Тогда
			СоздатьПрисоединенныйФайл(СообщениеОбъект.Ссылка, ОписаниеСообщения.Данные.ДополнительныйДокумент);
		КонецЕсли;
		
	КонецЕсли;
	
	Содержание = ОписаниеСообщения.Данные.Содержание;
	Если ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
		И ОписаниеСообщения.Направление = Перечисления.НаправленияЭДО.Входящий
		И Содержание.ТипРегламента = Перечисления.ТипыРегламентовЭДО.АктОРасхождениях Тогда
		ВариантыФормирования = ФорматыЭДО.ВариантыФормированияИтоговПриемки();
		СвойстваДокументовПоФорматам = Содержание.СвойстваДокументовПоФорматам.АктОРасхождениях;
			
		Если СвойстваДокументовПоФорматам.ФормируютсяИтогиПриемки
			И (СвойстваДокументовПоФорматам.ВариантФормированияИтоговПриемки = 
				ВариантыФормирования.ПродавцомФормируютсяДопСведенияОСогласииНесогласииСРезультатамиПриемки
			Или СвойстваДокументовПоФорматам.ВариантФормированияИтоговПриемки = 
				ВариантыФормирования.ПродавцомФормируютсяДопСведенияИные) Тогда
				
			ДополнительноеСообщениеОбъект = Документы.СообщениеЭДО.СоздатьДокумент();
			ДополнительноеСообщениеОбъект.Дата = ТекущаяДатаСеанса();
			ДополнительноеСообщениеОбъект.ЭлектронныйДокумент = ЭлектронныйДокумент;
			ДополнительноеСообщениеОбъект.ТипЭлементаРегламента =
				Перечисления.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки;
			ДополнительноеСообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Исходящий;
			ДополнительноеСообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.НеСформирован;
			ДополнительноеСообщениеОбъект.Записать();
				
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СообщениеОбъект;
	
КонецФункции

// Создает присоединенный файл в информационной базе.
// 
// Параметры:
//  Владелец - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - объект-владелец - приемник файлов.
//  ОписаниеДанных - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
//  НоваяСсылкаНаФайл - ОпределяемыйТип.ПрисоединенныйФайл - созданный файл.
//  ДоступноИнтерактивноеРедактирование - Булево.
//  
// Возвращаемое значение:
//  ОпределяемыйТип.ПрисоединенныйФайл - ссылка на созданный присоединенный файл.
Функция СоздатьПрисоединенныйФайл(Владелец, ОписаниеДанных, НоваяСсылкаНаФайл = Неопределено, 
	ДоступноИнтерактивноеРедактирование  = Ложь)
	
	ПараметрыДобавленияФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
	ПараметрыДобавленияФайла.ВладелецФайлов = Владелец;
	ПараметрыДобавленияФайла.Служебный = Не ДоступноИнтерактивноеРедактирование;
	ПараметрыДобавленияФайла.Автор = Пользователи.ТекущийПользователь();
	
	Файл = Новый Файл(ОписаниеДанных.ИмяФайла);
	ПараметрыДобавленияФайла.ИмяБезРасширения = Файл.ИмяБезРасширения;
	ПараметрыДобавленияФайла.РасширениеБезТочки = СтрЗаменить(Файл.Расширение,".","");
	ПараметрыДобавленияФайла.Вставить("ПолноеИмяФайла", Файл.ПолноеИмя);
	
	АдресДвоичныхДанных = ПоместитьВоВременноеХранилище(ОписаниеДанных.ДвоичныеДанные);
	
	ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыДобавленияФайла, АдресДвоичныхДанных,,,НоваяСсылкаНаФайл);
	
	УдалитьИзВременногоХранилища(АдресДвоичныхДанных);
	
	Возврат ПрисоединенныйФайл;
	
КонецФункции

// Доступно интерактивное редактирование.
// 
// Параметры:
//  ВидСообщения - СправочникСсылка.ВидыДокументовЭДО - Вид сообщения
//  Направление - ПеречислениеСсылка.НаправленияЭДО - Направление
// 
// Возвращаемое значение:
//  Булево - Доступно интерактивное редактирование
Функция ДоступноИнтерактивноеРедактированиеПрисоединенногоФайла(ВидСообщения, Направление)
	
	ДоступноИнтерактивноеРедактирование = Ложь;	
	
	ВидыДокументовДляПроизвольногоФормата = ЭлектронныеДокументыЭДО.ВидыДокументовДляПроизвольногоФормата();
	
	Если ВидыДокументовДляПроизвольногоФормата.Найти(ВидСообщения) <> Неопределено 
			И Направление = Перечисления.НаправленияЭДО.Исходящий Тогда
		ДоступноИнтерактивноеРедактирование = Истина;	
	КонецЕсли;
	
	Возврат ДоступноИнтерактивноеРедактирование;

КонецФункции

// Параметры:
//  ДокументОбъект - ДанныеФормыСтруктура
//  СвязанныеОбъектыУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
Процедура ЗагрузитьИдентификаторыСвязанныхОбъектовУчета(ДокументОбъект, СвязанныеОбъектыУчета) Экспорт
	
	ДокументОбъект.ИдентификаторыОснований.Очистить();
	
	Если Не ЗначениеЗаполнено(СвязанныеОбъектыУчета) Тогда
		Возврат
	КонецЕсли;
	
	ТаблицаСвязанныхОбъектовУчета = НоваяТаблицаСвязанныхОбъектовУчета();
	
	Для Каждого ОбъектУчета Из СвязанныеОбъектыУчета Цикл
		СтрокаТаблицы = ТаблицаСвязанныхОбъектовУчета.Добавить();
		СтрокаТаблицы.ОбъектУчета = ОбъектУчета;
	КонецЦикла;
	
	РезультатЗапроса = РезультатЗапросаИдентификаторовДокументоборотовОбъектовУчета(ТаблицаСвязанныхОбъектовУчета);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ДокументОбъект.ИдентификаторыОснований.Добавить();
		ЗаполнитьЭлементКоллекцииИдентификаторыОснованияДокумента(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры


// Возвращает настройки отправки ЭДО по переданным параметрам документа
// 
// Параметры:
//  ПараметрыДокумента - см. ОбменСКонтрагентамиКлиент.НовыеПараметрыСозданияЭлектронногоДокументаПоФайлу
//  СодержаниеДокумента - см. НовоеСодержаниеСообщения
// 
// Возвращаемое значение:
//  см. НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки
Функция НастройкиОтправкиДокументаПоПараметрамДокумента(ПараметрыДокумента, СодержаниеДокумента) Экспорт
	
	ВидДокумента = ПараметрыДокумента.ВидДокумента;
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		ПараметрыПоиска = ЭлектронныеДокументыЭДО.НовыеПараметрыПоискаВидаДокумента(СодержаниеДокумента.ТипДокумента);
		ВидДокумента = ЭлектронныеДокументыЭДО.НайтиСоздатьВидДокумента(ПараметрыПоиска);
	КонецЕсли;
	Формат = "";
	Если СодержаниеДокумента.Свойство("Формат") Тогда
		Формат = СодержаниеДокумента.Формат;
	КонецЕсли;
	
	Если ПараметрыДокумента.ПараметрыОбмена = Неопределено Тогда
		
		КлючНастройкиОтправки = НастройкиЭДО.НовоеОписаниеПолейКлючаНастройкиОтправки();
		КлючНастройкиОтправки.Отправитель = ПараметрыДокумента.Организация;
		КлючНастройкиОтправки.Получатель = ПараметрыДокумента.Контрагент;
		КлючНастройкиОтправки.Договор = ПараметрыДокумента.Договор;
		КлючНастройкиОтправки.ВидДокумента = ВидДокумента;
		
		НастройкиОтправки = НастройкиОтправкиЭДОСлужебныйПовтИспНаВызов.НастройкиОтправки(КлючНастройкиОтправки);
		Возврат НастройкиОтправки;
		
	КонецЕсли;
	
	ПараметрыОбмена = ПараметрыДокумента.ПараметрыОбмена; // см. ОбменСКонтрагентамиКлиент.ПараметрыОбменаЭДОДляСозданияДокументаПоФайлу
	
	НастройкиОтправки = НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки();
	НастройкиОтправки.ИдентификаторОтправителя = ПараметрыОбмена.ИдентификаторОтправителя;
	НастройкиОтправки.ИдентификаторПолучателя = ПараметрыОбмена.ИдентификаторПолучателя;
	НастройкиОтправки.Отправитель = ПараметрыДокумента.Организация;
	НастройкиОтправки.Получатель = ПараметрыДокумента.Контрагент;
	НастройкиОтправки.Договор = ПараметрыДокумента.Договор;
	НастройкиОтправки.ВидДокумента = ВидДокумента;
	
	ЗаполненоПоЗаписанным = Ложь;
	
	НастройкиОбмена = НастройкиОтправкиЭДО.НастройкиОбменаПоИдентификаторам(
		ВидДокумента, НастройкиОтправки.ИдентификаторОтправителя, НастройкиОтправки.ИдентификаторПолучателя);
	Если ЗначениеЗаполнено(НастройкиОбмена) Тогда
		
		КлючНастройкиОтправки = НастройкиЭДО.НовоеОписаниеПолейКлючаНастройкиОтправки();
		КлючНастройкиОтправки.Отправитель = НастройкиОбмена.Организация;
		КлючНастройкиОтправки.Получатель = НастройкиОбмена.Контрагент;
		КлючНастройкиОтправки.Договор = НастройкиОбмена.ДоговорКонтрагента;
		КлючНастройкиОтправки.ВидДокумента = ВидДокумента;
		
		НастройкиОтправкиЗаписанные =
			НастройкиОтправкиЭДОСлужебныйПовтИспНаВызов.НастройкиОтправки(КлючНастройкиОтправки);
		
		Если ЗначениеЗаполнено(НастройкиОтправкиЗаписанные) Тогда
			
			ЗаполняемыеПоля = "Формат, МаршрутПодписания, ТребуетсяОтветнаяПодпись, ТребуетсяИзвещениеОПолучении,
				|ВыгружатьДополнительныеСведения, ВерсияФорматаУстановленаВручную, Формировать, СпособОбмена,
				|ЗаполнениеКодаТовара, ОбменБезПодписи, ГотовностьКОбмену";
			ЗаполнитьЗначенияСвойств(НастройкиОтправки, НастройкиОтправкиЗаписанные, ЗаполняемыеПоля);
			
			ЗаполненоПоЗаписанным = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗаполненоПоЗаписанным Тогда
		
		ДанныеУчетнойЗаписи = УчетныеЗаписиЭДО.ДанныеУчетнойЗаписи(ПараметрыОбмена.ИдентификаторОтправителя);
		НастройкиОтправки.СпособОбмена = ДанныеУчетнойЗаписи.СпособОбменаЭД;
		НастройкиОтправки.ОбменБезПодписи = Ложь;
		НастройкиОтправки.ГотовностьКОбмену = Истина;
		
		Если Не ЗначениеЗаполнено(ПараметрыДокумента.МаршрутПодписания)
			И Не ЗначениеЗаполнено(ПараметрыДокумента.Подписанты) Тогда
			НастройкиОтправки.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутОднойДоступнойПодписью();
		Иначе
			НастройкиОтправки.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании();
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиОтправки.ТребуетсяИзвещениеОПолучении = ПараметрыОбмена.ТребуетсяИзвещениеОПолучении;
	НастройкиОтправки.ТребуетсяОтветнаяПодпись = ПараметрыОбмена.ТребуетсяОтветнаяПодпись;
	
	НастройкиОтправки.Формировать = Истина;
	НастройкиОтправки.Формат = Формат;
	
	Возврат НастройкиОтправки;
	
КонецФункции

// Возвращает результат проверки параметров создания документа
// 
// Параметры:
//  ПараметрыСозданияДокумента - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыСозданияДокументаПоФайлу
//  СодержаниеДокумента - см. НовоеСодержаниеСообщения
// 
// Возвращаемое значение:
//  см. НовыйРезультатПроверкиПараметровСозданияФайла
//
Функция ПроверитьПараметрыСозданияДокумента(ПараметрыСозданияДокумента, СодержаниеДокумента) Экспорт
	
	РезультатПроверки = ПроверитьЗаполнениеОрганизацииИКонтрагентаПриСозданииПоФайлу(
		ПараметрыСозданияДокумента, СодержаниеДокумента);
	Если Не РезультатПроверки.ПараметрыКорректны Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	РезультатПроверки = ПроверитьКорректностьУказанияИдентификаторовЭДОПриСозданииПоФайлу(
		ПараметрыСозданияДокумента, СодержаниеДокумента);
	Если Не РезультатПроверки.ПараметрыКорректны Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	РезультатПроверки = ПроверитьСтатусПриглашенияПриСозданииПоФайлу(
		ПараметрыСозданияДокумента, СодержаниеДокумента);
	Если Не РезультатПроверки.ПараметрыКорректны Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	РезультатПроверки = ПроверитьТребованияИзвещенийИОтветнойПодписи(
		ПараметрыСозданияДокумента, СодержаниеДокумента);
	Если Не РезультатПроверки.ПараметрыКорректны Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	РезультатПроверки = НовыйРезультатПроверкиПараметровСозданияФайла();
	РезультатПроверки.ПараметрыКорректны = Истина;
	Возврат РезультатПроверки;
	
КонецФункции

// Возвращает результат проверки заполнения организации и контрагента при создании документа по файлу
// 
// Параметры:
//  ПараметрыСозданияДокумента - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыСозданияДокументаПоФайлу
//  СодержаниеДокумента - см. НовоеСодержаниеСообщения
// 
// Возвращаемое значение:
//  см. НовыйРезультатПроверкиПараметровСозданияФайла
//
Функция ПроверитьЗаполнениеОрганизацииИКонтрагентаПриСозданииПоФайлу(ПараметрыСозданияДокумента, СодержаниеДокумента)
	
	Результат = НовыйРезультатПроверкиПараметровСозданияФайла();
	
	Если Не ЗначениеЗаполнено(ПараметрыСозданияДокумента.Организация) Тогда
		ДанныеОшибки = НовыеДанныеОшибкиСозданияПоФайлу();
		ДанныеОшибки.КраткийТекст = НСтр("ru = 'Не заполнена организация'");
		ДанныеОшибки.ТекстОшибки = НСтр("ru = 'В параметрах создания документа не указана организация документа ЭДО'");
		ДобавитьОшибкуСозданияПоФайлу(Результат, ДанныеОшибки, ПараметрыСозданияДокумента, СодержаниеДокумента);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыСозданияДокумента.Контрагент) Тогда
		ДанныеОшибки = НовыеДанныеОшибкиСозданияПоФайлу();
		ДанныеОшибки.КраткийТекст = НСтр("ru = 'Не заполнен контрагент'");
		ДанныеОшибки.ТекстОшибки = НСтр("ru = 'В параметрах создания документа не указан контрагент документа ЭДО'");
		ДобавитьОшибкуСозданияПоФайлу(Результат, ДанныеОшибки, ПараметрыСозданияДокумента, СодержаниеДокумента);
	КонецЕсли;
	
	Результат.ПараметрыКорректны = (Результат.ОшибкиПроверки.Количество() = 0);
	Возврат Результат;
	
КонецФункции

// Возвращает результат проверки указания идентификаторов ЭДО в параметрах обмена
// 
// Параметры:
//  ПараметрыСозданияДокумента - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыСозданияДокументаПоФайлу
//  СодержаниеДокумента - см. НовоеСодержаниеСообщения
// 
// Возвращаемое значение:
//  см. НовыйРезультатПроверкиПараметровСозданияФайла
//
Функция ПроверитьКорректностьУказанияИдентификаторовЭДОПриСозданииПоФайлу(ПараметрыСозданияДокумента, СодержаниеДокумента)
	
	Результат = НовыйРезультатПроверкиПараметровСозданияФайла();
	
	Если ПараметрыСозданияДокумента.ПараметрыОбмена = Неопределено Тогда
		Результат.ПараметрыКорректны = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыОбмена = ПараметрыСозданияДокумента.ПараметрыОбмена; // см. ОбменСКонтрагентамиКлиент.ПараметрыОбменаЭДОДляСозданияДокументаПоФайлу
	
	Если Не ЗначениеЗаполнено(ПараметрыОбмена.ИдентификаторОтправителя) Тогда
		ДанныеОшибки = НовыеДанныеОшибкиСозданияПоФайлу();
		ДанныеОшибки.КраткийТекст = НСтр("ru = 'Не заполнена учетная запись ЭДО отправителя'");
		ДанныеОшибки.ТекстОшибки = 
			НСтр("ru = 'В параметрах обмена при создании документа не указан идентификатор учетной записи ЭДО организации-отправителя для отправки документа. При заполнении идентификатора ЭДО получателя необходимо указать и идентификатор ЭДО отправителя.'");
		ДобавитьОшибкуСозданияПоФайлу(Результат, ДанныеОшибки, ПараметрыСозданияДокумента, СодержаниеДокумента);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыОбмена.ИдентификаторПолучателя) Тогда
		ДанныеОшибки = НовыеДанныеОшибкиСозданияПоФайлу();
		ДанныеОшибки.КраткийТекст = НСтр("ru = 'Не заполнена учетная запись ЭДО получателя'");
		ДанныеОшибки.ТекстОшибки = 
			НСтр("ru = 'В параметрах обмена при создании документа не указан идентификатор учетной записи ЭДО, на который необходимо отправить документ. При заполнении идентификатора ЭДО отправителя необходимо указать и идентификатор ЭДО получателя.'");
		ДобавитьОшибкуСозданияПоФайлу(Результат, ДанныеОшибки, ПараметрыСозданияДокумента, СодержаниеДокумента);
	КонецЕсли;
	
	Результат.ПараметрыКорректны = (Результат.ОшибкиПроверки.Количество() = 0);
	Возврат Результат;
	
КонецФункции

// Возвращает результат проверки действительности приглашения при создании документа по файлу
// 
// Параметры:
//  ПараметрыСозданияДокумента - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыСозданияДокументаПоФайлу
//  СодержаниеДокумента - см. НовоеСодержаниеСообщения
// 
// Возвращаемое значение:
//  см. НовыйРезультатПроверкиПараметровСозданияФайла
//
Функция ПроверитьСтатусПриглашенияПриСозданииПоФайлу(ПараметрыСозданияДокумента, СодержаниеДокумента)
	
	Результат = НовыйРезультатПроверкиПараметровСозданияФайла();
	
	Если ПараметрыСозданияДокумента.ПараметрыОбмена = Неопределено Тогда
		Результат.ПараметрыКорректны = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыОбмена = ПараметрыСозданияДокумента.ПараметрыОбмена; // см. ОбменСКонтрагентамиКлиент.ПараметрыОбменаЭДОДляСозданияДокументаПоФайлу
	
	ИдентификаторОтправителя = ПараметрыОбмена.ИдентификаторОтправителя;
	ИдентификаторПолучателя = ПараметрыОбмена.ИдентификаторПолучателя;
	
	Если Не СинхронизацияЭДО.ДокументооборотНастроен(ИдентификаторОтправителя, ИдентификаторПолучателя) Тогда
		
		ДанныеОшибки = НовыеДанныеОшибкиСозданияПоФайлу();
		ДанныеОшибки.КраткийТекст = НСтр("ru = 'Не принято приглашение ЭДО'");
		ДанныеОшибки.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Невозможно создать документ ЭДО для отправки, поскольку между учетной записью ЭДО %1 и идентификатором ЭДО получателя %2 не принято приглашение к обмену ЭДО.'"),
			ИдентификаторОтправителя, ИдентификаторПолучателя);
		ДобавитьОшибкуСозданияПоФайлу(Результат, ДанныеОшибки, ПараметрыСозданияДокумента, СодержаниеДокумента);
	Иначе
		Результат.ПараметрыКорректны = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает результат проверки соответствия регламенту требования ответной подписи и извещения о получении
// 
// Параметры:
//  ПараметрыСозданияДокумента - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыСозданияДокументаПоФайлу
//  СодержаниеДокумента - см. НовоеСодержаниеСообщения
// 
// Возвращаемое значение:
//  см. НовыйРезультатПроверкиПараметровСозданияФайла
//
Функция ПроверитьТребованияИзвещенийИОтветнойПодписи(ПараметрыСозданияДокумента, СодержаниеДокумента)
	
	Результат = НовыйРезультатПроверкиПараметровСозданияФайла();
	
	Если ПараметрыСозданияДокумента.ПараметрыОбмена = Неопределено Тогда
		Результат.ПараметрыКорректны = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ВидДокумента = ПараметрыСозданияДокумента.ВидДокумента;
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		ПараметрыПоиска = ЭлектронныеДокументыЭДО.НовыеПараметрыПоискаВидаДокумента(СодержаниеДокумента.ТипДокумента);
		ВидДокумента = ЭлектронныеДокументыЭДО.НайтиСоздатьВидДокумента(ПараметрыПоиска);
	КонецЕсли;
	Формат = "";
	Если СодержаниеДокумента.Свойство("Формат") Тогда
		Формат = СодержаниеДокумента.Формат;
	КонецЕсли;
	
	ОписаниеВидаДокумента = ЭлектронныеДокументыЭДО.ОписаниеВидаДокумента(ВидДокумента);
	НастройкиРегламента = ЭлектронныеДокументыЭДО.НастройкиРегламента(ОписаниеВидаДокумента, Формат);
	
	ПараметрыОбмена = ПараметрыСозданияДокумента.ПараметрыОбмена; // см. ОбменСКонтрагентамиКлиент.ПараметрыОбменаЭДОДляСозданияДокументаПоФайлу
	
	Если Не НастройкиРегламента.РедактироватьИзвещение
		И ПараметрыОбмена.ТребуетсяИзвещениеОПолучении <> НастройкиРегламента.ТребуетсяИзвещениеОПолучении Тогда
		
		ДанныеОшибки = НовыеДанныеОшибкиСозданияПоФайлу();
		ДанныеОшибки.КраткийТекст = НСтр("ru = 'Требование извещения о получении противоречит регламенту'");
		ДанныеОшибки.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'В параметрах создания документа указано требование извещения о получении в %1, однако согласно регламенту обмена значение должно быть %2'"),
			ПараметрыОбмена.ТребоватьИзвещениеОПолучении,
			НастройкиРегламента.ТребуетсяИзвещениеОПолучении);
		ДобавитьОшибкуСозданияПоФайлу(Результат, ДанныеОшибки, ПараметрыСозданияДокумента, СодержаниеДокумента);
	КонецЕсли;
	
	Если Не НастройкиРегламента.РедактироватьОтветнуюПодпись
		И ПараметрыОбмена.ТребуетсяОтветнаяПодпись <> НастройкиРегламента.ТребуетсяОтветнаяПодпись Тогда
		
		ДанныеОшибки = НовыеДанныеОшибкиСозданияПоФайлу();
		ДанныеОшибки.КраткийТекст = НСтр("ru = 'Требование ответной подписи противоречит регламенту'");
		ДанныеОшибки.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'В параметрах создания документа указано требование ответной подписи в %1, однако согласно регламенту обмена значение должно быть %2'"),
			ПараметрыОбмена.ТребуетсяОтветнаяПодпись,
			НастройкиРегламента.ТребуетсяОтветнаяПодпись);
		ДобавитьОшибкуСозданияПоФайлу(Результат, ДанныеОшибки, ПараметрыСозданияДокумента, СодержаниеДокумента);
	КонецЕсли;
	
	Результат.ПараметрыКорректны = (Результат.ОшибкиПроверки.Количество() = 0);
	
	Возврат Результат;
	
КонецФункции

// Добавляет ошибку в результат проверки создания исходящего ЭДО по файлу
// 
// Параметры:
//  РезультатПроверки - см. НовыйРезультатПроверкиПараметровСозданияФайла
//  ДанныеОшибки - см. НовыеДанныеОшибкиСозданияПоФайлу
//  ПараметрыСоздания - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыСозданияДокументаПоФайлу
//  СодержаниеДокумента - см. НовоеСодержаниеСообщения
Процедура ДобавитьОшибкуСозданияПоФайлу(РезультатПроверки, ДанныеОшибки, ПараметрыСоздания, СодержаниеДокумента)
	
	ВидДокумента = ПараметрыСоздания.ВидДокумента;
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		ПараметрыПоиска = ЭлектронныеДокументыЭДО.НовыеПараметрыПоискаВидаДокумента(СодержаниеДокумента.ТипДокумента);
		ВидДокумента = ЭлектронныеДокументыЭДО.НайтиСоздатьВидДокумента(ПараметрыПоиска);
	КонецЕсли;
	
	Ошибка = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
	ЗаполнитьЗначенияСвойств(Ошибка.ОписаниеОбъектаУчета, ПараметрыСоздания);
	Если ПараметрыСоздания.ОбъектыУчета.Количество() > 0 Тогда
		Ошибка.ОписаниеОбъектаУчета.ОбъектУчета = ПараметрыСоздания.ОбъектыУчета[0];
	КонецЕсли;
	Ошибка.ВидДокумента = ВидДокумента;
	Ошибка.ОшибкиСозданияПоФайлу.Добавить(ДанныеОшибки);
	РезультатПроверки.ОшибкиПроверки.Добавить(Ошибка);
	
КонецПроцедуры

// Новый результат проверки параметров создания файла.
// 
// Возвращаемое значение:
//  Структура - Новый результат проверки параметров создания файла:
// * ПараметрыКорректны - Булево
// * ОшибкиПроверки - Массив Из см. ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования
Функция НовыйРезультатПроверкиПараметровСозданияФайла()
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ПараметрыКорректны", Ложь);
	РезультатПроверки.Вставить("ОшибкиПроверки", Новый Массив());
	
	Возврат РезультатПроверки;
	
КонецФункции

// Конструктор данных ошибки создания по файлу
// 
// Возвращаемое значение:
//  Структура:
// * КраткийТекст - Строка
// * ТекстОшибки - Строка
Функция НовыеДанныеОшибкиСозданияПоФайлу()
	
	ДанныеОшибки = Новый Структура;
	ДанныеОшибки.Вставить("КраткийТекст", "");
	ДанныеОшибки.Вставить("ТекстОшибки", "");
	
	Возврат ДанныеОшибки;
	
КонецФункции

#КонецОбласти

#Область СформироватьИсправление

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ВыполнитьДействиеСформироватьИсправление(ПараметрыВыполнения, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.СформироватьИсправление;
	
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Действие, 0);
	
	Выборка = ВыборкаДокументовДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий);
	Пока Выборка.Следующий() Цикл
		
		СформироватьИсправление(Выборка.ЭлектронныйДокумент, ПараметрыВыполнения, РезультатДействий);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//  
// Возвращаемое значение:
//  Булево
Функция СформироватьИсправление(ЭлектронныйДокумент, ПараметрыВыполнения, РезультатДействий)
	
	Результат = Ложь;
	Действие = Перечисления.ДействияПоЭДО.СформироватьИсправление;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	
	Если ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОбъектыУчетаЭлектронныхДокументов = ИнтеграцияЭДО.ОбъектыУчетаЭлектронныхДокументов(ЭлектронныйДокумент);
	Если Не ЗначениеЗаполнено(ОбъектыУчетаЭлектронныхДокументов) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОбъектыУчета = ОбъектыУчетаЭлектронныхДокументов.ВыгрузитьКолонку("ОбъектУчета");
	РезультатПроверки = ИнтеграцияЭДО.ПроверкаГотовностиКДокументообороту(ОбъектыУчета);
	Если Не ЗначениеЗаполнено(РезультатПроверки.Готовые) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Основания = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РезультатПроверки.Готовые[0]);
	РезультатыЗапросаНастроек = РезультатыЗапросаНастроекОбъектовУчета(ПараметрыВыполнения, Основания);
	
	НаборПараметровФормирования = ПараметрыФормированияДокумента(ПараметрыВыполнения,
		РезультатыЗапросаНастроек, РезультатДействий);
	
	Если ЗначениеЗаполнено(РезультатДействий.ОшибкиФормирования)
		ИЛИ Не ЗначениеЗаполнено(НаборПараметровФормирования) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыФормирования = НаборПараметровФормирования[0];
	
	Если ЗначениеЗаполнено(ПараметрыФормирования.ОбъектУчета) Тогда
		ИдентификаторСвязи = Строка(ПараметрыФормирования.ОбъектУчета.УникальныйИдентификатор());
	Иначе
		ИдентификаторСвязи = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	НовыйДокументОбъект = НовыйИсходящийДокументОбъект(ПараметрыФормирования.НастройкиДокумента,
		ПараметрыФормирования.ОписаниеСообщения, ИдентификаторСвязи, ПараметрыФормирования.ИдентификаторыОснований);
	
	ЭлектронныеДокументыЭДО.ПередЗаписьюНовогоДокумента(НовыйДокументОбъект, ПараметрыФормирования.ОписаниеСообщения);
	
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоДокументу(ЭлектронныйДокумент, Действие);
	
	Если Не НовыйДокументОбъект.ПроверитьЗаполнение() Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка заполнения исходящего электронного документа'");
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		Возврат Результат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеДокументаДляИзменения(ЭлектронныйДокумент, Ложь);
		
		ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		
		Если ДокументОбъект.Исправлен Тогда
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(ТекстЗапросаСостоянияДокумента());
		ТекстыЗапроса.Добавить(ТекстЗапросаСостоянияСообщений());
		ТекстыЗапроса.Добавить(ТекстЗапросаСвойствСообщенияИнформацииОтправителя());
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ДокументОбъект.Ссылка);
		
		ТитулыОтправителя = Новый Массив;
		ТитулыОтправителя.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителя);	
		КонецЕсли;
		Запрос.УстановитьПараметр("ТитулыОтправителя", ТитулыОтправителя);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		Если РезультатыЗапроса[0].Пустой()
			ИЛИ РезультатыЗапроса[1].Пустой()
			ИЛИ РезультатыЗапроса[2].Пустой() Тогда
			Результат = Ложь;
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ВыборкаСостояния = РезультатыЗапроса[0].Выбрать();
		ВыборкаСостояния.Следующий();
		
		Если Не ДействиеДоступно(Действие, ВыборкаСостояния.Состояние, ДокументОбъект, КонтекстДиагностики) Тогда
			Результат = Ложь;
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
		
		СвойстваСообщения = РезультатыЗапроса[2].Выбрать();
		СвойстваСообщения.Выбрать();
		
		ДокументОбъект.Исправлен = Истина;
		ДокументОбъект.Записать();
		
		ДатаИзменения = ТекущаяДатаСеанса();
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ДокументОбъект, СостоянияСообщений,
			ДатаИзменения, КонтекстДиагностики);
		
		Комментарий = КомментарийДействия(ПараметрыВыполнения, Действие);
		РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Действие, ДокументОбъект, СостояниеДокумента,
			ДатаИзменения, СвойстваСообщения, Комментарий);
		
		НовыйДокументОбъект.Записать();
		
		ЭлектронныеДокументыЭДО.ПриЗаписиНовогоДокумента(НовыйДокументОбъект, ПараметрыФормирования.ОписаниеСообщения, КонтекстДиагностики,
			ПараметрыФормирования.Основания);
		
		Результат = Истина;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Если Результат Тогда
		ЭлектронныеДокументыЭДО.ПослеЗаписиНовогоДокумента(НовыйДокументОбъект, КонтекстДиагностики);
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.СформироватьИсправление,
			ЭлектронныйДокумент);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СформироватьИзвещение

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ВыполнитьДействиеСформироватьИзвещение(ПараметрыВыполнения, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.СформироватьИзвещение;
	
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Действие, 0);
	
	РезультатЗапроса = РезультатЗапросаДокументовДляФормированияИзвещения(ПараметрыВыполнения.ОбъектыДействий);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СформироватьИзвещение(Выборка.ЭлектронныйДокумент, РезультатДействий);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ОбъектыДействий - Структура:
//  * ОбъектыУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * ПакетыДокументов - Массив из УникальныйИдентификатор
//  * ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Сообщения - Массив из ДокументСсылка.СообщениеЭДО
// 
// Возвращаемое значение:
//  РезультатЗапроса
Функция РезультатЗапросаДокументовДляФормированияИзвещения(ОбъектыДействий)
	
	Запрос = Новый Запрос;
	
	ТекстыЗапросов = Новый Массив;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.ОбъектыУчета) Тогда
		
		ОтборДокументов = ИнтеграцияЭДО.НовыйОтборАктуальныхЭлектронныхДокументов();
		ОтборДокументов.ОбъектыУчета = "&ОтборОбъектыУчета";
		ТекстыЗапросов.Добавить(ИнтеграцияЭДО.ЗапросАктуальныхЭлектронныхДокументов(
			"ЭлектронныеДокументыОбъектовУчета", ОтборДокументов).Текст);
		
		Запрос.УстановитьПараметр("ОтборОбъектыУчета", ОбъектыДействий.ОбъектыУчета);
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЭлектронныеДокументыОбъектовУчета.ЭлектронныйДокумент КАК ЭлектронныйДокумент
			|ИЗ
			|	ЭлектронныеДокументыОбъектовУчета КАК ЭлектронныеДокументыОбъектовУчета
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
			|		ПО ЭлектронныеДокументыОбъектовУчета.ЭлектронныйДокумент = СостоянияДокументовЭДО.ЭлектронныйДокумент
			|ГДЕ
			|	СостоянияДокументовЭДО.Состояние В (&ОтборСостояния)";
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.ЭлектронныеДокументы) Тогда
		
		Запрос.УстановитьПараметр("ОтборЭлектронныеДокументы", ОбъектыДействий.ЭлектронныеДокументы);
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	СостоянияДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
			|ИЗ
			|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
			|ГДЕ
			|	СостоянияДокументовЭДО.ЭлектронныйДокумент В (&ОтборЭлектронныеДокументы)
			|	И СостоянияДокументовЭДО.Состояние В (&ОтборСостояния)";
			
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.Сообщения) Тогда
		
		Запрос.УстановитьПараметр("ОтборСообщения", ОбъектыДействий.Сообщения);
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
			|ИЗ
			|	Документ.СообщениеЭДО КАК СообщениеЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
			|		ПО СообщениеЭДО.ЭлектронныйДокумент = СостоянияДокументовЭДО.ЭлектронныйДокумент
			|ГДЕ
			|	СообщениеЭДО.Ссылка В (&ОтборСообщения)
			|	И СостоянияДокументовЭДО.Состояние В (&ОтборСостояния)";
		
		Если ЗначениеЗаполнено(ТекстыЗапросов) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗЛИЧНЫЕ", "ВЫБРАТЬ");
		КонецЕсли;
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.ПакетыДокументов) Тогда
		
		Запрос.УстановитьПараметр("ОтборПакетыДокументов", ОбъектыДействий.ПакетыДокументов);
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	СоставПакетовДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
			|ИЗ
			|	РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
			|		ПО СоставПакетовДокументовЭДО.ЭлектронныйДокумент = СостоянияДокументовЭДО.ЭлектронныйДокумент
			|ГДЕ
			|	СоставПакетовДокументовЭДО.ИдентификаторПакета В (&ОтборПакетыДокументов)
			|	И СостоянияДокументовЭДО.Состояние В (&ОтборСостояния)";
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ОтборСостояния = Новый Массив;
	ОтборСостояния.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении);
	ОтборСостояния.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеПоОтклонению);
	
	Запрос.УстановитьПараметр("ОтборСостояния", ОтборСостояния);
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, "
		|
		|ОБЪЕДИНИТЬ
		|");
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Параметры:
//  Сообщения - Массив из ДокументСсылка.СообщениеЭДО
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса
Функция ВыборкаСвойствОсновныхФайловСообщений(Сообщения)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Сообщение,
		|	ПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла КАК ПолноеИмяФайла,
		|	ПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО СообщениеЭДО.ОсновнойФайл = ПрисоединенныеФайлы.Ссылка
		|ГДЕ
		|	СообщениеЭДО.Ссылка В (&Сообщения)";
	Запрос.УстановитьПараметр("Сообщения", Сообщения);
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

// Сформировать извещение.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура СформироватьИзвещение(ЭлектронныйДокумент, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.СформироватьИзвещение;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	НаборРезультатов = Новый Массив;
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоДокументу(ЭлектронныйДокумент, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент);
		
		ЗаблокироватьДанныеДокументаДляИзменения(ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(ТекстЗапросаПараметровОбновленияСостоянияДокумента(ЭтоВходящийЭДО));
		ТекстыЗапроса.Добавить(ТекстЗапросаУчастниковЭДО(ЭтоВходящийЭДО));
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		Если РезультатыЗапроса[0].Пустой()
			ИЛИ РезультатыЗапроса[1].Пустой() Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ПараметрыДокумента = РезультатыЗапроса[0].Выбрать();
		ПараметрыДокумента.Следующий();
		
		Если ПараметрыДокумента.Остановлен Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
		
		ОтборСообщений = Новый Массив;
		СообщенияДляОбработки = Новый Соответствие;
		Для Каждого СвойстваСообщения Из СостоянияСообщений Цикл
			ТипИзвещения = РегламентыЭДО.ТипИзвещенияДляЭлементаРегламента(СвойстваСообщения.ТипЭлементаРегламента,
				ПараметрыДокумента, ЭтоВходящийЭДО);
			Если Не ЗначениеЗаполнено(ТипИзвещения) Тогда
				Продолжить;
			КонецЕсли;
			СвойстваИзвещения = СостоянияСообщений.Найти(ТипИзвещения, "ТипЭлементаРегламента");
			Если СвойстваИзвещения = Неопределено Тогда
				СообщенияДляОбработки.Вставить(СвойстваСообщения.Ссылка, ТипИзвещения);
				ОтборСообщений.Добавить(СвойстваСообщения.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(СообщенияДляОбработки) Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ДанныеУчастниковЭДО = НовыеДанныеУчастниковЭДО();
		ЗаполнитьЗначенияСвойств(ДанныеУчастниковЭДО, ПараметрыДокумента);
		Если СинхронизацияЭДОКлиентСервер.ЭтоОбменЧерезОператора(ПараметрыДокумента.СпособОбмена) Тогда
			
			ВыборкаУчастниковЭДО = РезультатыЗапроса[2].Выбрать();
			Если ВыборкаУчастниковЭДО.Следующий() Тогда
				
				ДанныеУчастниковЭДО.Организация = ВыборкаУчастниковЭДО.Организация;
				ДанныеУчастниковЭДО.Контрагент = ВыборкаУчастниковЭДО.Контрагент;
				
				ТекстОшибки = "";
				ПроверитьЗаполнениеДанныхУчастниковЭДО(ДанныеУчастниковЭДО, ТекстОшибки);
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
					ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
				
			Иначе
				ТекстОшибки = НСтр("ru='Не найдены данные участников ЭДО'");
				ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ВыборкаФайлов = ВыборкаСвойствОсновныхФайловСообщений(ОтборСообщений);
		Пока ВыборкаФайлов.Следующий() Цикл

			ТипИзвещения = СообщенияДляОбработки[ВыборкаФайлов.Сообщение];

			ОписаниеСообщения = ОписаниеСлужебногоСообщения(ДанныеУчастниковЭДО, ВыборкаФайлов,
				Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении, ТипИзвещения);

			Если ОписаниеСообщения.Данные.ЕстьОшибки Тогда
				
				Для каждого ОшибкаЗаполнения Из ОписаниеСообщения.Данные.Ошибки.ЗаполнениеДанных Цикл
					ДобавитьОшибкуВыполненияДействия(ОшибкаЗаполнения.ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
				КонецЦикла;
				
				Продолжить;
				
			КонецЕсли;

			ИзвещениеОбъект = СоздатьСообщение(ОписаниеСообщения, ПараметрыДокумента.Ссылка, ПараметрыДокумента);
			
			РезультатФормирования = Новый Структура;
			РезультатФормирования.Вставить("СообщениеОбъект", ИзвещениеОбъект);
			РезультатФормирования.Вставить("ТаблицаПодписания");
			НаборРезультатов.Добавить(РезультатФормирования);
			
			ЗаполнитьЗначенияСвойств(СостоянияСообщений.Добавить(), ИзвещениеОбъект);
			
			ДополненияСостоянийЭДО = Неопределено;
			Если Не ПараметрыДокумента.ОбменБезПодписи Тогда
				
				ПараметрыМаршрута = СформироватьМаршрутПодписания(ИзвещениеОбъект);
				РезультатФормирования.ТаблицаПодписания = ПараметрыМаршрута.ТаблицаПодписания;
				
				ДополненияСостоянийЭДО = ДополненияСостоянийЭДОПриПодписании(ИзвещениеОбъект,
					ПараметрыДокумента.ВидПодписи, ПараметрыМаршрута.ВесМаршрута);
				
			КонецЕсли;
			
			СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияСообщений,
				ИзвещениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики, ДополненияСостоянийЭДО);
			
			РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Действие, ПараметрыДокумента, СостояниеДокумента,
				ИзвещениеОбъект.ДатаИзмененияСтатуса, ИзвещениеОбъект);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Для Каждого РезультатФормирования Из НаборРезультатов Цикл
		ПослеФормированияИзвещения(РезультатФормирования, РезультатДействий);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ДанныеУчастниковЭДО - см. НовыеДанныеУчастниковЭДО
//  ТекстОшибки - Строка
Процедура ПроверитьЗаполнениеДанныхУчастниковЭДО(ДанныеУчастниковЭДО, ТекстОшибки = "")
	
	Если Не ЗначениеЗаполнено(ДанныеУчастниковЭДО.Организация) Тогда	
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найдена организация с идентификатором %1'"), ДанныеУчастниковЭДО.ИдентификаторОрганизации);	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеУчастниковЭДО.Контрагент) Тогда
		
		КонтрагентНайден = Ложь;
		
		Приглашение = ПриглашениеПоИдентификаторамОрганизацииКонтрагента(ДанныеУчастниковЭДО.ИдентификаторОрганизации, ДанныеУчастниковЭДО.ИдентификаторКонтрагента);
		
		Если ЗначениеЗаполнено(Приглашение) Тогда
			
			КонтрагентПриглашенныйКОбмену = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Контрагенты", Приглашение.КонтрагентИНН, Приглашение.КонтрагентКПП);
			
			Если ЗначениеЗаполнено(КонтрагентПриглашенныйКОбмену) Тогда
				
				ПриглашенияЭДО.ИзменитьКонтрагентаВПриглашении(Приглашение, КонтрагентПриглашенныйКОбмену);
				ДанныеУчастниковЭДО.Контрагент = КонтрагентПриглашенныйКОбмену;
				
				КонтрагентНайден = Истина;	
				
			ИначеЕсли НастройкиЭДО.СоздаватьКонтрагентовАвтоматически() Тогда
				
				РеквизитыКонтрагента = Новый Структура;
				РеквизитыКонтрагента.Вставить("Наименование", Приглашение.КонтрагентНаименование);
				РеквизитыКонтрагента.Вставить("ИНН", Приглашение.КонтрагентИНН);
				РеквизитыКонтрагента.Вставить("КПП", Приглашение.КонтрагентКПП);
				
				СозданныйКонтрагент = ИнтеграцияЭДО.СоздатьКонтрагента(РеквизитыКонтрагента);
				ПриглашенияЭДО.ИзменитьКонтрагентаВПриглашении(Приглашение, СозданныйКонтрагент);
				ДанныеУчастниковЭДО.Контрагент = СозданныйКонтрагент;
				
				КонтрагентНайден = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не КонтрагентНайден Тогда
			ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "")
			+ СтрШаблон(НСтр("ru = 'Не найден контрагент с идентификатором %1'"), ДанныеУчастниковЭДО.ИдентификаторКонтрагента);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ИдентификаторОрганизации - Строка -  Идентификатор организации
//  ИдентификаторКонтрагента - Строка -  Идентификатор контрагента
// 
// Возвращаемое значение:
//  Неопределено,Структура:
//  * Ключ - см. РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами.Ключ
//  * КонтрагентИНН - см. РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ИНН
//  * КонтрагентКПП - см. РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами.КПП
//  * КонтрагентНаименование - см. РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами.Наименование
//  * ИдентификаторОрганизации - см. РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации
//  * ИдентификаторКонтрагента - см. РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента
Функция ПриглашениеПоИдентификаторамОрганизацииКонтрагента(ИдентификаторОрганизации, ИдентификаторКонтрагента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриглашенияКОбменуЭлектроннымиДокументами.Ключ КАК Ключ,
	|	ПриглашенияКОбменуЭлектроннымиДокументами.ИНН КАК КонтрагентИНН,
	|	ПриглашенияКОбменуЭлектроннымиДокументами.КПП КАК КонтрагентКПП,
	|	ПриглашенияКОбменуЭлектроннымиДокументами.Наименование КАК КонтрагентНаименование,
	|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента
	|ИЗ
	|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
	|ГДЕ
	|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = &ИдентификаторОрганизации
	|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
	|	И ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято)";
	
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", ИдентификаторКонтрагента);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторОрганизации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Приглашение = Новый Структура("Ключ,КонтрагентИНН,КонтрагентКПП,КонтрагентНаименование,ИдентификаторОрганизации,ИдентификаторКонтрагента");
		ЗаполнитьЗначенияСвойств(Приглашение, Выборка);
		
		Возврат Приглашение;
		
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Параметры:
//  РезультатФормирования - Структура:
//  * СообщениеОбъект - ДокументОбъект.СообщениеЭДО
//  * ТаблицаПодписания - см. МаршрутыПодписанияБЭД.СформироватьМаршрутПодписанияЭД
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ПослеФормированияИзвещения(РезультатФормирования, РезультатДействий)
	
	ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.СформироватьИсправление,
		РезультатФормирования.СообщениеОбъект.ЭлектронныйДокумент);
	
	ОповеститьОДокументеКПодписанию(РезультатФормирования.СообщениеОбъект, РезультатФормирования.ТаблицаПодписания);
	
КонецПроцедуры

#КонецОбласти

#Область Переформировать

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ВыполнитьДействиеПереформировать(ПараметрыВыполнения, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.Переформировать;
	
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Действие, 0);

	Выборка = ВыборкаДокументовДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий);
	Пока Выборка.Следующий() Цикл
		//@skip-check query-in-loop
		ПереформироватьЭлектронныйДокумент(Выборка.ЭлектронныйДокумент, ПараметрыВыполнения, РезультатДействий);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//  
// Возвращаемое значение:
//  Булево
Функция ПереформироватьЭлектронныйДокумент(ЭлектронныйДокумент, ПараметрыВыполнения, РезультатДействий)
	
	Результат = Ложь;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	Действие = Перечисления.ДействияПоЭДО.Переформировать;
	
	ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент);
	Если ЭтоВходящийЭДО Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОбъектыУчетаЭлектронныхДокументов = ИнтеграцияЭДО.ОбъектыУчетаЭлектронныхДокументов(ЭлектронныйДокумент);
	Если Не ЗначениеЗаполнено(ОбъектыУчетаЭлектронныхДокументов) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОбъектыУчета = ОбъектыУчетаЭлектронныхДокументов.ВыгрузитьКолонку("ОбъектУчета");
	РезультатПроверки = ИнтеграцияЭДО.ПроверкаГотовностиКДокументообороту(ОбъектыУчета);
	Если Не ЗначениеЗаполнено(РезультатПроверки.Готовые) Тогда
		Возврат Результат;
	КонецЕсли;
	
	РезультатыЗапросаНастроек = РезультатыЗапросаНастроекОбъектовУчета(ПараметрыВыполнения, РезультатПроверки.Готовые);
	
	НаборПараметровФормирования = ПараметрыФормированияДокумента(ПараметрыВыполнения,
		РезультатыЗапросаНастроек, РезультатДействий);
	
	Если ЗначениеЗаполнено(РезультатДействий.ОшибкиФормирования)
		Или Не ЗначениеЗаполнено(НаборПараметровФормирования) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыФормирования = НаборПараметровФормирования[0];
	ОписаниеСообщения = ПараметрыФормирования.ОписаниеСообщения[0];
	
	Если ЗначениеЗаполнено(ПараметрыФормирования.ОбъектУчета) Тогда
		ИдентификаторСвязи = Строка(ПараметрыФормирования.ОбъектУчета.УникальныйИдентификатор());
	Иначе
		ИдентификаторСвязи = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Комментарий = КомментарийДействия(ПараметрыВыполнения, Действие);
	
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоДокументу(ЭлектронныйДокумент, Действие);
	
	НачатьТранзакцию();

	Попытка
		
		ЗаблокироватьДанныеДокументаДляИзменения(ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		
		ЗаполнитьИсходящийДокументОбъект(ДокументОбъект, ПараметрыФормирования.НастройкиДокумента, ОписаниеСообщения,
			ИдентификаторСвязи, ПараметрыФормирования.ИдентификаторыОснований);
			
		ЭлектронныеДокументыЭДО.ПередЗаписьюНовогоДокумента(ДокументОбъект, ОписаниеСообщения);
		
		Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка заполнения исходящего электронного документа'");
			ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
			Возврат Результат;
		КонецЕсли;
		
		ОтборСообщений = ЭлектронныеДокументыЭДО.НовыйОтборСообщенийДокументов();
		ОтборСообщений.Состояния.Добавить(Перечисления.СостоянияСообщенийЭДО.Подписание);
		ОтборСообщений.Состояния.Добавить(Перечисления.СостоянияСообщенийЭДО.Отправка);
		ОтборСообщений.ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ОтборСообщений.ТипыЭлементовРегламента);
		КонецЕсли;
		
		ДанныеСообщенийДляПереформирования = ЭлектронныеДокументыЭДО.СообщенияДокументовПоОтбору(ЭлектронныйДокумент,
			ОтборСообщений);
		
		Для Каждого ДанныеСообщения Из ДанныеСообщенийДляПереформирования Цикл
			// @skip-check query-in-loop
			ПереформироватьСообщениеЭДО(ДанныеСообщения.Ссылка, ДокументОбъект, ОписаниеСообщения,
				КонтекстДиагностики, Комментарий);
		КонецЦикла;
		
		ДокументОбъект.Записать();
		
		Результат = Истина;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
	
		ОтменитьТранзакцию();
		
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		
		ВызватьИсключение ТекстОшибки;
	
	КонецПопытки;
	
	Если Результат Тогда
		ЭлектронныеДокументыЭДО.ПослеЗаписиНовогоДокумента(ДокументОбъект, КонтекстДиагностики);
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие, ДокументОбъект.Ссылка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  СообщениеЭДО - ДокументСсылка.СообщениеЭДО
//  ДокументОбъект - ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
//  ОписаниеСообщения - См. НовоеОписаниеСообщения
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  Комментарий - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ПереформироватьСообщениеЭДО(СообщениеЭДО, ДокументОбъект, ОписаниеСообщения, КонтекстДиагностики,
	Комментарий = "")
	
	СообщениеОбъект = СообщениеЭДО.ПолучитьОбъект();
	
	ДанныеДляПереформирования = ДанныеДляПереформированияСообщенияЭДО(СообщениеОбъект, ДокументОбъект);
	
	Если ЗначениеЗаполнено(ОписаниеСообщения.Данные.Документ) Тогда
		ОбновитьФайлыДокументаЭДОПриПереформировании(ДанныеДляПереформирования.ФайлыДокумента,
			ОписаниеСообщения.Данные.Документ);
	КонецЕсли;
		
	ОбновитьДанныеСообщенияЭДОПриПереформировании(СообщениеОбъект, ДокументОбъект, ОписаниеСообщения);
	
	ОбновитьДанныеСостоянияДокументаЭДОПриПереформировании(ДокументОбъект, СообщениеОбъект,
		ДанныеДляПереформирования.СостоянияСообщений, КонтекстДиагностики, Комментарий);
	
	СообщениеОбъект.Записать();
	
	Возврат Истина;
	
КонецФункции

// Параметры:
//  СообщениеОбъект - ДокументОбъект.СообщениеЭДО
//  ДокументОбъект - ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Структура:
// * СостоянияСообщений - ТаблицаЗначений:
// ** Ссылка - ДокументСсылка.СообщениеЭДО
// ** Дата - Дата
// ** ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
// ** Состояние - ПеречислениеСсылка.СостоянияСообщенийЭДО
// ** Статус - ПеречислениеСсылка.СтатусыСообщенийЭДО
// ** Направление - ПеречислениеСсылка.НаправленияЭДО
// 
// * ФайлыДокумента - ВыборкаИзРезультатаЗапроса:
// ** Ссылка - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// ** Основной - Булево
// 
// * СвойстваФайлаТитулаОтправителя - Неопределено,Структура:
// ** Ссылка - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// ** ПолноеИмяФайла - Строка
// ** ДатаСоздания - Дата
// 
Функция ДанныеДляПереформированияСообщенияЭДО(СообщениеОбъект, ДокументОбъект)
	
	Результат = Новый Структура;
	Результат.Вставить("СостоянияСообщений");
	Результат.Вставить("ФайлыДокумента");
	Результат.Вставить("СвойстваФайлаТитулаОтправителя", Неопределено);
	
	ТекстыЗапросов = Новый Массив;
	
	ТекстыЗапросов.Добавить(ТекстЗапросаСостоянияСообщений());
	
	ТекстыЗапросов.Добавить(ТекстЗапросаФайловДокумента());
	
	ТекстыЗапросов.Добавить(ТекстЗапросаСвойствОсновногоФайлаИнформацииОтправителя());
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Сообщение", СообщениеОбъект.Ссылка);
	
	ТитулыОтправителя = Новый Массив;
	ТитулыОтправителя.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителя);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТитулыОтправителя", ТитулыОтправителя);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	СостоянияСообщений = РезультатыЗапроса[0].Выгрузить();
	Результат.СостоянияСообщений = СостоянияСообщений;
	
	ФайлыДокумента = РезультатыЗапроса[1].Выбрать();
	Результат.ФайлыДокумента = ФайлыДокумента;
	
	СвойстваФайловТитулаОтправителя = РезультатыЗапроса[2].Выгрузить();
	Для Каждого СвойстваФайла Из СвойстваФайловТитулаОтправителя Цикл
		Результат.СвойстваФайлаТитулаОтправителя = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СвойстваФайла);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Параметры:
// ТекущиеФайлыДокумента - ВыборкаИзРезультатаЗапроса:
// * Ссылка - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// * Основной - Булево
// НовыйФайл - См. РаботаСФайламиБЭД.НовоеОписаниеФайла
Процедура ОбновитьФайлыДокументаЭДОПриПереформировании(ТекущиеФайлыДокумента, НовыйФайл)
	
	ИнформацияОФайле = Новый Структура;
	ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище",
		ПоместитьВоВременноеХранилище(НовыйФайл.ДвоичныеДанные));
	ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
	
	Пока ТекущиеФайлыДокумента.Следующий() Цикл
		
		ТекущийФайл = ТекущиеФайлыДокумента.Ссылка;
		
		Если ТекущиеФайлыДокумента.Основной Тогда
			РаботаСФайлами.ОбновитьФайл(ТекущийФайл, ИнформацияОФайле);
			//@skip-check query-in-loop
			УдалитьПодписи(ТекущийФайл, Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная);
		Иначе
			ФайлОбъект = ТекущийФайл.ПолучитьОбъект();
			ФайлОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  СообщениеОбъект - ДокументОбъект.СообщениеЭДО
//  ДокументОбъект - ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
//  ОписаниеСообщения - См. НовоеОписаниеСообщения
//
Процедура ОбновитьДанныеСообщенияЭДОПриПереформировании(СообщениеОбъект, ДокументОбъект, ОписаниеСообщения)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	ПараметрыСообщения = РегламентыЭДО.НовыеПараметрыСообщенияДляОпределенияСостояния();
	ЗаполнитьЗначенияСвойств(ПараметрыСообщения, СообщениеОбъект, "ТипЭлементаРегламента, Статус, Направление");
	
	ПараметрыДокумента = РегламентыЭДО.НовыеПараметрыДокументаДляОпределенияСостоянияСообщения();
	ЗаполнитьЗначенияСвойств(ПараметрыДокумента, ДокументОбъект, "ТипРегламента, ТребуетсяПодтверждение, 
		|ОбменБезПодписи, СпособОбмена");
		
	ИспользуетсяУтверждение = НастройкиЭДО.ОтправлятьВходящиеДокументыНаУтверждение();
	
	СообщениеОбъект.ДополнительнаяИнформация = ОписаниеСообщения.ДополнительнаяИнформация;
	СообщениеОбъект.ВидСообщения = ДокументОбъект.ВидДокумента;
	СообщениеОбъект.Дата = ТекущаяДата;
	СообщениеОбъект.ДатаИзмененияСтатуса = ТекущаяДата;
	СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.Сформирован;
	СообщениеОбъект.Состояние = РегламентыЭДО.СостояниеСообщения(ПараметрыСообщения, ПараметрыДокумента,
		ИспользуетсяУтверждение);
	
КонецПроцедуры

// Параметры:
//  ДокументОбъект - ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
//  СообщениеОбъект - ДокументОбъект.СообщениеЭДО
//  ТекущиеСостоянияСообщений - ТаблицаЗначений:
//  * Ссылка - ДокументСсылка.СообщениеЭДО
//  * Дата - Дата
//  * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  * Состояние - ПеречислениеСсылка.СостоянияСообщенийЭДО
//  * Статус - ПеречислениеСсылка.СтатусыСообщенийЭДО
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  Комментарий - Строка
Процедура ОбновитьДанныеСостоянияДокументаЭДОПриПереформировании(ДокументОбъект, СообщениеОбъект,
	ТекущиеСостоянияСообщений, КонтекстДиагностики, Комментарий)
	
	Действие = Перечисления.ДействияПоЭДО.Переформировать;
	
	ПараметрыДокументаДляОпределенияСостояния = РегламентыЭДО.НовыеПараметрыДокументаДляОпределенияСостояния();
	ЗаполнитьЗначенияСвойств(ПараметрыДокументаДляОпределенияСостояния, ДокументОбъект, "Ссылка, ТипРегламента, 
		|СпособОбмена, ОбменБезПодписи, ТребуетсяИзвещение, ТребуетсяПодтверждение, Остановлен, 
		|ПричинаОстановки, Исправлен, ИдентификаторОрганизации, ИдентификаторДокумента");
	
	НовыеСостоянияСообщений = РегламентыЭДО.НовыеСостоянияЭлементовРегламента();
	Для Каждого СостояниеСообщения Из ТекущиеСостоянияСообщений Цикл
		НоваяСтрока = НовыеСостоянияСообщений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СостояниеСообщения);
		Если СостояниеСообщения.Ссылка = СообщениеОбъект.Ссылка Тогда
			НоваяСтрока.Состояние = СообщениеОбъект.Состояние;
		КонецЕсли;
	КонецЦикла;
	
	СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокументаДляОпределенияСостояния,
		НовыеСостоянияСообщений, СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики);
	
	РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Действие, ДокументОбъект, СостояниеДокумента,
		СообщениеОбъект.ДатаИзмененияСтатуса, СообщениеОбъект, Комментарий);
	
	ЭлектронныеДокументыЭДОСобытия.ПриИзмененииСостоянияЭлектронногоДокумента(ДокументОбъект.Ссылка,
		СостояниеДокумента, КонтекстДиагностики);
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаФайловДокумента()
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлы.Ссылка,
		|	ПрисоединенныеФайлы.Ссылка = СообщениеЭДО.ОсновнойФайл КАК Основной
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО СообщениеЭДО.Ссылка = ПрисоединенныеФайлы.ВладелецФайла
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент";
	Возврат ТекстЗапроса;
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаСвойствОсновногоФайлаИнформацииОтправителя()
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлы.Ссылка,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла,
		|	ПрисоединенныеФайлы.ДатаСоздания
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО СообщениеЭДО.Ссылка = ПрисоединенныеФайлы.ВладелецФайла
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И СообщениеЭДО.ТипЭлементаРегламента В (&ТитулыОтправителя)";
	Возврат ТекстЗапроса;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Организация - Неопределено,ОпределяемыйТип.Организация
//  * Контрагент - Неопределено,ОпределяемыйТип.КонтрагентБЭД
//  * Договор - Неопределено,ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * НомерДокумента - Строка
//  * ДатаДокумента - Дата
//  * СуммаДокумента - Число
//  * ОбъектыУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * Подписанты - Массив из ОпределяемыйТип.Пользователь
//  * МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//  * СопроводительнаяЗаписка - Строка
Функция НовыеПараметрыПереформированияДокументаПоФайлу() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Организация", Неопределено);
	Параметры.Вставить("Контрагент", Неопределено);
	Параметры.Вставить("Договор", Неопределено);
	Параметры.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	Параметры.Вставить("НомерДокумента", "");
	Параметры.Вставить("ДатаДокумента", Дата(1, 1, 1));
	Параметры.Вставить("СуммаДокумента", 0);
	Параметры.Вставить("ОбъектыУчета", Новый Массив);
	Параметры.Вставить("Подписанты", Новый Массив);
	Параметры.Вставить("МаршрутПодписания", Справочники.МаршрутыПодписания.ПустаяСсылка());
	Параметры.Вставить("СопроводительнаяЗаписка", "");
	Возврат Параметры;
	
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ПараметрыПереформирования - См. НовыеПараметрыПереформированияДокументаПоФайлу
//  ОписаниеФайла - Неопределено
//                - См. РаботаСФайламиБЭД.НовоеОписаниеФайла
//
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * Ошибки - Массив из См. ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования
//
Функция ПереформироватьДокументПоФайлу(ЭлектронныйДокумент, ПараметрыПереформирования, ОписаниеФайла) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("Ошибки", Новый Массив);
	
	Если ЭлектронныеДокументыЭДО.ВыполнениеДействийПоЭДОЗапрещено() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗапретитьФормированиеФормализованныхЭДИзФайлов = 
		ПолучитьФункциональнуюОпцию("ЗапретитьФормированиеФормализованныхЭДИзФайлов");
	Содержание = Неопределено;
	Если ЗначениеЗаполнено(ОписаниеФайла) Тогда
		Содержание = ФорматыЭДО.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
	КонецЕсли;
	СодержаниеЗаполнено = ЗначениеЗаполнено(Содержание);
	
	Если Не СодержаниеЗаполнено
		Или ЗапретитьФормированиеФормализованныхЭДИзФайлов Тогда
		Содержание = ЭлектронныеДокументыЭДО.НовоеСодержаниеСообщения();
		Содержание.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный;
		Содержание.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прочее;
	ИначеЕсли СодержаниеЗаполнено Тогда
		СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОписаниеФайла.ИмяФайла);
		РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураИмениФайла.Расширение);
		ЭтоXML = РаботаСФайламиБЭДКлиентСервер.ЭтоXML(РасширениеБезТочки);
		Если ЭтоXML И Содержание.Свойство("ИдентификаторДокумента") Тогда
			ОписаниеФайла.ИмяФайла = Содержание.ИдентификаторДокумента + ".xml";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПереформирования.НомерДокумента) Тогда
		Содержание.НомерДокумента = ПараметрыПереформирования.НомерДокумента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПереформирования.ДатаДокумента) Тогда
		Содержание.ДатаДокумента = ПараметрыПереформирования.ДатаДокумента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПереформирования.СуммаДокумента) Тогда
		Содержание.СуммаДокумента = ПараметрыПереформирования.СуммаДокумента;
	КонецЕсли;
	
	ВидДокумента = ПараметрыПереформирования.ВидДокумента;
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		ПараметрыПоиска = ЭлектронныеДокументыЭДО.НовыеПараметрыПоискаВидаДокумента(Содержание.ТипДокумента);
		ВидДокумента = ЭлектронныеДокументыЭДО.НайтиСоздатьВидДокумента(ПараметрыПоиска);
	КонецЕсли;
	
	КлючНастройкиОтправки = НастройкиЭДО.НовоеОписаниеПолейКлючаНастройкиОтправки();
	КлючНастройкиОтправки.Отправитель = ПараметрыПереформирования.Организация;
	КлючНастройкиОтправки.Получатель = ПараметрыПереформирования.Контрагент;
	КлючНастройкиОтправки.Договор = ПараметрыПереформирования.Договор;
	КлючНастройкиОтправки.ВидДокумента = ВидДокумента;
	НастройкиОтправки = НастройкиОтправкиЭДОСлужебныйПовтИспНаВызов.НастройкиОтправки(КлючНастройкиОтправки);
	Если Не ЗначениеЗаполнено(НастройкиОтправки) Тогда
		ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
		ЗаполнитьОписаниеОбъектаУчетаПоПараметрамПараметрыПереформированияДокументаПоФайлу(
			ОписаниеОшибки.ОписаниеОбъектаУчета, ПараметрыПереформирования);
		ОписаниеОшибки.ВидДокумента = ВидДокумента;
		ОписаниеОшибки.ОтсутствуютНастройки = Истина;
		Результат.Ошибки.Добавить(ОписаниеОшибки);
		Возврат Результат;
	КонецЕсли;
	
	Если НастройкиОтправки.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании()
		И Не ЗначениеЗаполнено(ПараметрыПереформирования.МаршрутПодписания)
		И Не ЗначениеЗаполнено(ПараметрыПереформирования.Подписанты) Тогда
		ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
		ЗаполнитьОписаниеОбъектаУчетаПоПараметрамПараметрыПереформированияДокументаПоФайлу(
			ОписаниеОшибки.ОписаниеОбъектаУчета, ПараметрыПереформирования);
		ОписаниеОшибки.ВидДокумента = ВидДокумента;
		ОписаниеОшибки.ОтсутствуютПодписанты = Истина;
		Результат.Ошибки.Добавить(ОписаниеОшибки);
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеФайла) Тогда
		РезультатПроверкиОграничения = ЭлектронныеДокументыЭДО.ПроверкаПревышенияМаксимальногоРазмераФайла(
			НастройкиОтправки.ИдентификаторПолучателя, НастройкиОтправки.ИдентификаторОтправителя,
			ОписаниеФайла.ДвоичныеДанные);
		Если РезультатПроверкиОграничения.Превышено Тогда
			ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
			ЗаполнитьОписаниеОбъектаУчетаПоПараметрамПараметрыПереформированияДокументаПоФайлу(
				ОписаниеОшибки.ОписаниеОбъектаУчета, ПараметрыПереформирования);
			ОписаниеОшибки.ВидДокумента = ВидДокумента;
			ОписаниеОшибки.ПревышаемыеОграниченияОбъемаПакетаДокументов =
				РезультатПроверкиОграничения.ПревышаемыеОграничения;
			Результат.Ошибки.Добавить(ОписаниеОшибки);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	НастройкиДокумента = ЭлектронныеДокументыЭДО.НовыеНастройкиОтправкиДокумента();
	НастройкиДокумента.Организация = НастройкиОтправки.Отправитель;
	НастройкиДокумента.Контрагент = НастройкиОтправки.Получатель;
	НастройкиДокумента.ДоговорКонтрагента = НастройкиОтправки.Договор;
	НастройкиДокумента.ИдентификаторОрганизации = НастройкиОтправки.ИдентификаторОтправителя;
	НастройкиДокумента.ИдентификаторКонтрагента = НастройкиОтправки.ИдентификаторПолучателя;
	НастройкиДокумента.СпособОбмена = НастройкиОтправки.СпособОбмена;
	НастройкиДокумента.ОбменБезПодписи = НастройкиОтправки.ОбменБезПодписи;
	НастройкиДокумента.МаршрутПодписания = НастройкиОтправки.МаршрутПодписания;
	НастройкиДокумента.ТребуетсяИзвещение = НастройкиОтправки.ТребуетсяИзвещениеОПолучении;
	НастройкиДокумента.ТребуетсяПодтверждение = НастройкиОтправки.ТребуетсяОтветнаяПодпись;
	НастройкиДокумента.ВыгружатьДополнительныеСведения = НастройкиОтправки.ВыгружатьДополнительныеСведения;
	Если ЗначениеЗаполнено(ПараметрыПереформирования.Подписанты) Тогда
		НастройкиДокумента.Подписанты = ПараметрыПереформирования.Подписанты;
		НастройкиДокумента.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании();
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыПереформирования.МаршрутПодписания) Тогда
		НастройкиДокумента.МаршрутПодписания = ПараметрыПереформирования.МаршрутПодписания;
	КонецЕсли;
	НастройкиДокумента.ЭтоОблачныйЭДО = УчетныеЗаписиЭДО.ЭтоУчетнаяЗаписьОблачногоЭДО(
		НастройкиОтправки.ИдентификаторОтправителя);
		
	ОписаниеСообщения = НовоеОписаниеСообщения();
	ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	ОписаниеСообщения.ВидСообщения = ВидДокумента;
	ОписаниеСообщения.Направление = Перечисления.НаправленияЭДО.Исходящий;
	ОписаниеСообщения.Данные.Содержание = Содержание;
	ОписаниеСообщения.ДополнительнаяИнформация = ПараметрыПереформирования.СопроводительнаяЗаписка;
	ОписаниеСообщения.Данные.Документ = ОписаниеФайла;
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	НачатьТранзакцию();

	Попытка
	
		ЗаблокироватьДанныеДокументаДляИзменения(ЭлектронныйДокумент, Ложь);
		
		ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
			
		ЗаполнитьИсходящийДокументОбъект(ДокументОбъект, НастройкиДокумента, ОписаниеСообщения);
		
		ДокументОбъект.ВидДокумента = ПараметрыПереформирования.ВидДокумента;
		ДокументОбъект.НомерДокумента = ПараметрыПереформирования.НомерДокумента;
		ДокументОбъект.ДатаДокумента = ПараметрыПереформирования.ДатаДокумента;
		ДокументОбъект.СуммаДокумента = ПараметрыПереформирования.СуммаДокумента;
		
		ЭлектронныеДокументыЭДО.ПередЗаписьюНовогоДокумента(ДокументОбъект, ОписаниеСообщения);
		
		Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
			ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
			ЗаполнитьОписаниеОбъектаУчетаПоПараметрамПараметрыПереформированияДокументаПоФайлу(
				ОписаниеОшибки.ОписаниеОбъектаУчета, ПараметрыПереформирования);
			
			ДанныеОшибки = НовыеДанныеОшибкиСозданияПоФайлу();
			ДанныеОшибки.КраткийТекст = НСтр("ru = 'Ошибка заполнения исходящего электронного документа'");
			ОписаниеОшибки.ОшибкиСозданияПоФайлу.Добавить(ДанныеОшибки);
			Результат.Ошибки.Добавить(ОписаниеОшибки);
			Возврат Результат;
		КонецЕсли;
		
		ОтборСообщений = ЭлектронныеДокументыЭДО.НовыйОтборСообщенийДокументов();
		ОтборСообщений.Состояния.Добавить(Перечисления.СостоянияСообщенийЭДО.Подписание);
		ОтборСообщений.Состояния.Добавить(Перечисления.СостоянияСообщенийЭДО.Отправка);
		ОтборСообщений.ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ОтборСообщений.ТипыЭлементовРегламента);
		КонецЕсли;
		
		ДанныеСообщенийДляПереформирования = ЭлектронныеДокументыЭДО.СообщенияДокументовПоОтбору(ЭлектронныйДокумент,
			ОтборСообщений);
		
		Для Каждого ДанныеСообщения Из ДанныеСообщенийДляПереформирования Цикл
			// @skip-check query-in-loop
			ПереформироватьСообщениеЭДО(ДанныеСообщения.Ссылка, ДокументОбъект, ОписаниеСообщения,
				КонтекстДиагностики);
		КонецЦикла;
		
		ДокументОбъект.Записать();

		ЗафиксироватьТранзакцию();

	Исключение
	
		ОтменитьТранзакцию();
		
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ВызватьИсключение ТекстОшибки;
	
	КонецПопытки;

	ЭлектронныеДокументыЭДО.ПослеЗаписиНовогоДокумента(ДокументОбъект, КонтекстДиагностики);

	Результат.Успех = Истина;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ОписаниеОбъектаУчета - См. ИнтеграцияЭДОКлиентСервер.НовоеОписаниеОбъектаУчетаСтруктура
//  ПараметрыПереформирования - См. ЭлектронныеДокументыЭДО.НовыеПараметрыПереформированияДокументаПоФайлу
Процедура ЗаполнитьОписаниеОбъектаУчетаПоПараметрамПараметрыПереформированияДокументаПоФайлу(ОписаниеОбъектаУчета,
	ПараметрыПереформирования)
		
	ЗаполнитьЗначенияСвойств(ОписаниеОбъектаУчета, ПараметрыПереформирования);
	
	Если ЗначениеЗаполнено(ПараметрыПереформирования.ОбъектыУчета) Тогда
		ОписаниеОбъектаУчета.ОбъектУчета = ПараметрыПереформирования.ОбъектыУчета[0];
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область Закрыть

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ВыполнитьДействиеЗакрыть(ПараметрыВыполнения, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.ЗакрытьПринудительно;
	
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Действие, 0);
	
	Комментарий = КомментарийДействия(ПараметрыВыполнения, Действие);
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			ЗакрытьПринудительноДокументыПакета(ПакетДокументов, РезультатДействий, Комментарий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
		Выборка = ВыборкаДокументовДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий);
		Пока Выборка.Следующий() Цикл
			Если ЗакрытьПринудительно(Выборка.ЭлектронныйДокумент, КонтекстДиагностики, Комментарий) Тогда
				ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие, Выборка.ЭлектронныйДокумент);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  Комментарий - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЗакрытьПринудительно(ЭлектронныйДокумент, КонтекстДиагностики, Комментарий = "") Экспорт
	Действие = Перечисления.ДействияПоЭДО.ЗакрытьПринудительно;
	ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ЗакрытПринудительно;
	Результат = ОстановитьДокумент(ЭлектронныйДокумент, ПричинаОстановки, Действие, КонтекстДиагностики, Комментарий);
	Возврат Результат;
КонецФункции

// Параметры:
//  ПакетДокументов - УникальныйИдентификатор
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//  Комментарий - Строка
Процедура ЗакрытьПринудительноДокументыПакета(ПакетДокументов, РезультатДействий, Комментарий)
	
	Действие = Перечисления.ДействияПоЭДО.ЗакрытьПринудительно;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	ОбработанныеДокументы = Новый Массив;
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоПакету(ПакетДокументов, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		ПакетыДокументовЭДО.БлокировкаПакетаДокументов(ПакетДокументов).Заблокировать();
		
		ДокументыПакета = ПакетыДокументовЭДО.ДокументыПакета(ПакетДокументов);
		
		ЗаблокироватьДокументыПакетаДляИзменения(ДокументыПакета);
		
		СостоянияПоДокументам = СостоянияПоДокументам(ДокументыПакета);
		
		НаборСостояний = Новый Массив;
		Для Каждого СостояниеПоДокументу Из СостоянияПоДокументам Цикл
			НаборСостояний.Добавить(СостояниеПоДокументу.Значение);
		КонецЦикла;
		
		СостоянияОднородны = ПакетыДокументовЭДО.СостоянияДокументовПакетаОднородны(НаборСостояний, ПакетДокументов,
			Действие, КонтекстДиагностики);
		
		Если Не СостоянияОднородны Тогда
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Для Каждого СостояниеПоДокументу Из СостоянияПоДокументам Цикл
			
			Если Не ЗакрытьПринудительно(СостояниеПоДокументу.Ключ, КонтекстДиагностики, Комментарий) Тогда
				ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			ОбработанныеДокументы.Добавить(СостояниеПоДокументу.Ключ);
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Для Каждого ЭлектронныйДокумент Из ОбработанныеДокументы Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие, ЭлектронныйДокумент);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ПричинаОстановки - ПеречислениеСсылка.ПричиныОстановкиЭДО
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  Комментарий - Строка
// 
// Возвращаемое значение:
//  Булево -  Остановить документ
Функция ОстановитьДокумент(ЭлектронныйДокумент, ПричинаОстановки, Действие, КонтекстДиагностики, Комментарий = "")
	
	Результат = Ложь;
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоДокументу(ЭлектронныйДокумент, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент);
		
		ЗаблокироватьДанныеДокументаДляИзменения(ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		ДокументОбъект.Остановлен = Истина;
		ДокументОбъект.ПричинаОстановки = ПричинаОстановки;
		
		Если Действие = Перечисления.ДействияПоЭДО.Загрузить
			И ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ОтклонениеПриглашения
			И НастройкиЭДО.ОзнакомлениеСЭлектроннымиДокументами() Тогда
			ДокументОбъект.НаОзнакомлении = Истина;
		КонецЕсли;
		
		ДокументОбъект.Записать();
		
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(ТекстЗапросаСостоянияДокумента());
		ТекстыЗапроса.Добавить(ТекстЗапросаСостоянияСообщений());
		ТекстыЗапроса.Добавить(ТекстЗапросаСвойствСообщенияИнформацииОтправителя());
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ДокументОбъект.Ссылка);
		
		ТитулыОтправителя = Новый Массив;
		ТитулыОтправителя.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителя);	
		КонецЕсли;
		Запрос.УстановитьПараметр("ТитулыОтправителя", ТитулыОтправителя);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		Если РезультатыЗапроса[0].Пустой()
			ИЛИ РезультатыЗапроса[1].Пустой()
			ИЛИ РезультатыЗапроса[2].Пустой() Тогда
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ВыборкаСостояния = РезультатыЗапроса[0].Выбрать();
		ВыборкаСостояния.Следующий();
		
		Если Не ДействиеДоступно(Действие, ВыборкаСостояния.Состояние, ДокументОбъект, КонтекстДиагностики) Тогда
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
		
		СвойстваСообщения = РезультатыЗапроса[2].Выбрать();
		СвойстваСообщения.Выбрать();
		
		ДатаИзменения = ТекущаяДатаСеанса();
		
		УстановитьСостояниеХранение(СостоянияСообщений, ДатаИзменения);
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ДокументОбъект, СостоянияСообщений,
			ДатаИзменения, КонтекстДиагностики,,Комментарий);
		
		РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Действие, ДокументОбъект, СостояниеДокумента,
			ДатаИзменения, СвойстваСообщения, Комментарий);
		
		Результат = Истина;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  Комментарий - Строка -  Комментарий
// 
// Возвращаемое значение:
//  Булево
Функция ВозобновитьДокумент(ЭлектронныйДокумент, Действие, КонтекстДиагностики, Комментарий = "")
	
	Результат = Истина;
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоДокументу(ЭлектронныйДокумент, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент);
		
		ЗаблокироватьДанныеДокументаДляИзменения(ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		Если Не ДокументОбъект.Остановлен Тогда
			ЗафиксироватьТранзакцию();
			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		
		ДокументОбъект.Остановлен = Ложь;
		ДокументОбъект.ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ПустаяСсылка();
		ДокументОбъект.Записать();
		
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(ТекстЗапросаСостоянияДокумента());
		ТекстыЗапроса.Добавить(ТекстЗапросаСостоянияСообщений());
		ТекстыЗапроса.Добавить(ТекстЗапросаСвойствСообщенияИнформацииОтправителя());
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ДокументОбъект.Ссылка);
		
		ТитулыОтправителя = Новый Массив;
		ТитулыОтправителя.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителя);	
		КонецЕсли;
		Запрос.УстановитьПараметр("ТитулыОтправителя", ТитулыОтправителя);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		Если РезультатыЗапроса[0].Пустой()
			ИЛИ РезультатыЗапроса[1].Пустой()
			ИЛИ РезультатыЗапроса[2].Пустой() Тогда
			Результат = Ложь;
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ВыборкаСостояния = РезультатыЗапроса[0].Выбрать();
		ВыборкаСостояния.Следующий();
		
		Если Не ДействиеДоступно(Действие, ВыборкаСостояния.Состояние, ДокументОбъект, КонтекстДиагностики) Тогда
			Результат = Ложь;
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
		
		СвойстваСообщения = РезультатыЗапроса[2].Выбрать();
		СвойстваСообщения.Выбрать();
		
		ПересчитатьСостоянияСообщений(СостоянияСообщений, ДокументОбъект);
		
		ДатаИзменения = ТекущаяДатаСеанса();
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ДокументОбъект, СостоянияСообщений,
			ДатаИзменения, КонтекстДиагностики);
		
		РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Действие, ДокументОбъект, СостояниеДокумента,
			ДатаИзменения, СвойстваСообщения, Комментарий);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВернутьВРаботу

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ВыполнитьДействиеВернутьВРаботу(ПараметрыВыполнения, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.ВернутьВРаботу;
	
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Действие, 0);
	
	Комментарий = КомментарийДействия(ПараметрыВыполнения, Действие);
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			ВернутьВРаботуДокументыПакета(ПакетДокументов, РезультатДействий, Комментарий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
		Выборка = ВыборкаДокументовДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий);
		Пока Выборка.Следующий() Цикл
			Если ВернутьВРаботу(Выборка.ЭлектронныйДокумент, КонтекстДиагностики, Комментарий) Тогда
				ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие, Выборка.ЭлектронныйДокумент);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  Комментарий - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ВернутьВРаботу(ЭлектронныйДокумент, КонтекстДиагностики, Комментарий = "")
	Действие = Перечисления.ДействияПоЭДО.ВернутьВРаботу;
	Результат = ВозобновитьДокумент(ЭлектронныйДокумент, Действие, КонтекстДиагностики, Комментарий);
	Возврат Результат;
КонецФункции

// Параметры:
//  ПакетДокументов - УникальныйИдентификатор
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//  Комментарий - Строка
Процедура ВернутьВРаботуДокументыПакета(ПакетДокументов, РезультатДействий, Комментарий = "")
	
	Действие = Перечисления.ДействияПоЭДО.ВернутьВРаботу;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	ОбработанныеДокументы = Новый Массив;
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоПакету(ПакетДокументов, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		ДокументыПакета = ДокументыПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики);
		Если Не ЗначениеЗаполнено(ДокументыПакета) Тогда
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
			
		Для Каждого ЭлектронныйДокумент Из ДокументыПакета Цикл
			Если Не ВозобновитьДокумент(ЭлектронныйДокумент, Действие, КонтекстДиагностики, Комментарий) Тогда
				ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			ОбработанныеДокументы.Добавить(ЭлектронныйДокумент);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Для Каждого ЭлектронныйДокумент Из ОбработанныеДокументы Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие, ЭлектронныйДокумент);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОтправитьВАрхив

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ВыполнитьДействиеОтправитьВАрхив(ПараметрыВыполнения, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.ОтправитьВАрхив;
	
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Действие, 0);
	
	Комментарий = КомментарийДействия(ПараметрыВыполнения, Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			ОтправитьВАрхивДокументыПакета(ПакетДокументов, РезультатДействий, Комментарий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
		Выборка = ВыборкаДокументовДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий);
		Пока Выборка.Следующий() Цикл
			Если ОтправитьВАрхив(Выборка.ЭлектронныйДокумент, КонтекстДиагностики, Комментарий) Тогда
				ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие, Выборка.ЭлектронныйДокумент);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  Комментарий - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ОтправитьВАрхив(ЭлектронныйДокумент, КонтекстДиагностики, Комментарий = "")
	
	Результат = Истина;
	
	Действие = Перечисления.ДействияПоЭДО.ОтправитьВАрхив;
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоДокументу(ЭлектронныйДокумент, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент);
		
		ЗаблокироватьДанныеДокументаДляИзменения(ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		Если Не ДокументОбъект.НаОзнакомлении Тогда
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(ТекстЗапросаСостоянияДокумента());
		ТекстыЗапроса.Добавить(ТекстЗапросаСвойствСообщенияИнформацииОтправителя());
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ДокументОбъект.Ссылка);
		
		ТитулыОтправителя = Новый Массив;
		ТитулыОтправителя.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителя);	
		КонецЕсли;
		Запрос.УстановитьПараметр("ТитулыОтправителя", ТитулыОтправителя);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		Если РезультатыЗапроса[0].Пустой()
			ИЛИ РезультатыЗапроса[1].Пустой() Тогда
			Результат = Ложь;
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВыборкаСостояния = РезультатыЗапроса[0].Выбрать();
		ВыборкаСостояния.Следующий();
		
		Если Не ДействиеДоступно(Действие, ВыборкаСостояния.Состояние, ДокументОбъект, КонтекстДиагностики) Тогда
			Результат = Ложь;
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
		КонецЕсли;
		
		СвойстваСообщения = РезультатыЗапроса[1].Выбрать();
		СвойстваСообщения.Выбрать();
		
		ДокументОбъект.НаОзнакомлении = Ложь;
		ДокументОбъект.Записать();
		
		СостояниеДокумента = ЭлектронныеДокументыЭДО.СостояниеДокумента(ЭлектронныйДокумент);
		
		РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Действие, ДокументОбъект, СостояниеДокумента,
			ТекущаяДатаСеанса(), СвойстваСообщения, Комментарий);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);	
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ПакетДокументов - УникальныйИдентификатор
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//  Комментарий - Строка
Процедура ОтправитьВАрхивДокументыПакета(ПакетДокументов, РезультатДействий, Комментарий = "")
	
	Действие = Перечисления.ДействияПоЭДО.ОтправитьВАрхив;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	ОбработанныеДокументы = Новый Массив;
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоПакету(ПакетДокументов, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		ДокументыПакета = ДокументыПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики);
		Если Не ЗначениеЗаполнено(ДокументыПакета) Тогда
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
			
		Для Каждого ЭлектронныйДокумент Из ДокументыПакета Цикл
			Если Не ОтправитьВАрхив(ЭлектронныйДокумент, КонтекстДиагностики, Комментарий) Тогда
				ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			ОбработанныеДокументы.Добавить(ЭлектронныйДокумент);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Для Каждого ЭлектронныйДокумент Из ОбработанныеДокументы Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие, ЭлектронныйДокумент);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОтклонитьПодписание

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ВыполнитьДействиеОтклонитьПодписание(ПараметрыВыполнения, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.ОтклонитьПодписание;
	
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Действие, 0);
	
	Комментарий = КомментарийДействия(ПараметрыВыполнения, Действие);
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			ОтклонитьПодписаниеДокументовПакета(ПакетДокументов, РезультатДействий, Комментарий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
		Выборка = ВыборкаДокументовДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий);
		Пока Выборка.Следующий() Цикл
			Если ОтклонитьПодписание(Выборка.ЭлектронныйДокумент, КонтекстДиагностики, Комментарий) Тогда
				ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие, Выборка.ЭлектронныйДокумент);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  Комментарий - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ОтклонитьПодписание(ЭлектронныйДокумент, КонтекстДиагностики, Комментарий = "")
	
	Результат = Ложь;
	
	Если ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Действие = Перечисления.ДействияПоЭДО.ОтклонитьПодписание;
	Причина = Перечисления.ПричиныОстановкиЭДО.ОтклонениеПодписания;
	Возврат ОстановитьДокумент(ЭлектронныйДокумент, Причина, Действие, КонтекстДиагностики, Комментарий);
	
КонецФункции

// Параметры:
//  ПакетДокумента - УникальныйИдентификатор
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//  Комментарий - Строка
Процедура ОтклонитьПодписаниеДокументовПакета(ПакетДокумента, РезультатДействий, Комментарий = "")
	
	Действие = Перечисления.ДействияПоЭДО.ОтклонитьПодписание;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	ОбработанныеДокументы = Новый Массив;
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоПакету(ПакетДокумента, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		ДокументыПакета = ДокументыПакетаДляИзменения(ПакетДокумента, Действие, КонтекстДиагностики);
		Если Не ЗначениеЗаполнено(ДокументыПакета) Тогда
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Для Каждого ЭлектронныйДокумент Из ДокументыПакета Цикл
			Если Не ОтклонитьПодписание(ЭлектронныйДокумент, КонтекстДиагностики, Комментарий) Тогда
				ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			ОбработанныеДокументы.Добавить(ЭлектронныйДокумент);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Для Каждого ЭлектронныйДокумент Из ОбработанныеДокументы Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие, ЭлектронныйДокумент);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Отклонить

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ВыполнитьДействиеОтклонить(ПараметрыВыполнения, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.Отклонить;
	
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Действие, 0);
	
	Комментарий = КомментарийДействия(ПараметрыВыполнения, Действие);
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			ОтклонитьДокументыПакета(ПакетДокументов, РезультатДействий, Комментарий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		Отбор = НовыйОтборСообщенийДляОбработкиДействия();
		Отбор.ТипЭлементаРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		ЭлементДляОтклонения = ДополнительныйПараметрДействия(ПараметрыВыполнения, Действие, "ЭлементДляОтклонения");
		Если ЗначениеЗаполнено(ЭлементДляОтклонения) Тогда
			Отбор.ТипЭлементаРегламента.Добавить(ЭлементДляОтклонения);	
		КонецЕсли;
		ВыборкаСообщений = ВыборкаСообщенийДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий, Отбор);
		Пока ВыборкаСообщений.Следующий() Цикл
			Если ТипЗнч(Комментарий) = Тип("Соответствие") Тогда
				КомментарийКДокументу = Комментарий.Получить(ВыборкаСообщений.ОбъектУчета);	
			Иначе
				КомментарийКДокументу = Комментарий;
			КонецЕсли;
			ОтклонитьДокумент(ВыборкаСообщений.Ссылка, РезультатДействий, КомментарийКДокументу, ЭлементДляОтклонения);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//  Комментарий - Строка
//  ЭлементДляОтклонения - см. ДополнительныйПараметрДействия
Процедура ОтклонитьДокумент(Сообщение, РезультатДействий, Комментарий = "", ЭлементДляОтклонения = Неопределено)
	
	РезультатОтклонения = Отклонить(Сообщение, РезультатДействий.КонтекстДиагностики, Комментарий, ЭлементДляОтклонения);
	
	Если РезультатОтклонения.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПослеОтклонения(РезультатОтклонения, РезультатДействий);
	
КонецПроцедуры

// Параметры:
//  ПакетДокументов - УникальныйИдентификатор
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//  Комментарий - Строка
Процедура ОтклонитьДокументыПакета(ПакетДокументов, РезультатДействий, Комментарий)
	
	Действие = Перечисления.ДействияПоЭДО.Отклонить;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	НаборРезультатов = Новый Массив;
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоПакету(ПакетДокументов, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		СообщенияПакета = СообщенияПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики,,
			Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если Не ЗначениеЗаполнено(СообщенияПакета) Тогда
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Для Каждого Сообщение Из СообщенияПакета Цикл
			Результат = Отклонить(Сообщение, КонтекстДиагностики, Комментарий);
			Если Результат.Отказ Тогда
				ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			НаборРезультатов.Добавить(Результат);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Для Каждого РезультатОтклонения Из НаборРезультатов Цикл
		ПослеОтклонения(РезультатОтклонения, РезультатДействий);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  Комментарий - Строка
//  ЭлементДляОтклонения - Неопределено
//                       - см. ДополнительныйПараметрДействия
// 
// Возвращаемое значение:
//  Структура -  Отклонить:
// * Отказ - Булево - 
// * СообщениеОбъект - Неопределено - 
// * ТаблицаПодписания - Неопределено - 
Функция Отклонить(Сообщение, КонтекстДиагностики, Комментарий = "", ЭлементДляОтклонения = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("СообщениеОбъект", Неопределено);
	Результат.Вставить("ТаблицаПодписания", Неопределено);
	
	Действие = Перечисления.ДействияПоЭДО.Отклонить;
	
	ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ЭлектронныйДокумент");
	ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент);
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоСообщению(Сообщение, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеСообщенияДляИзменения(Сообщение, ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		Если СообщениеОбъект.ЭлектронныйДокумент <> ЭлектронныйДокумент
			Или ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(СообщениеОбъект.ЭлектронныйДокумент) <> ЭтоВходящийЭДО Тогда
			ТекстОшибки = НСтр("ru='не удалось заблокировать данные электронного документа'");
			ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
			Результат.Отказ = Истина;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Если СообщениеОбъект.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
			И (?(ЗначениеЗаполнено(ЭлементДляОтклонения), СообщениеОбъект.ТипЭлементаРегламента <> ЭлементДляОтклонения, Истина)) Тогда
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			Результат.Отказ = Истина;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		СообщениеОбъект.Состояние = Перечисления.СостоянияСообщенийЭДО.Хранение;
		СообщениеОбъект.Записать();
		
		ТекстыЗапросов = Новый Массив;
		ТекстыЗапросов.Добавить(ТекстЗапросаПараметровОбновленияСостоянияДокумента(ЭтоВходящийЭДО));
		ТекстыЗапросов.Добавить(ТекстЗапросаСвойствОсновногоФайла());
		Если СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Исходящий
			ИЛИ СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
			ТекстыЗапросов.Добавить(ТекстЗапросаУчастниковЭДО(ЭтоВходящийЭДО));
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		Запрос.УстановитьПараметр("ОсновнойФайл", СообщениеОбъект.ОсновнойФайл);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ПараметрыДокумента = РезультатыЗапроса[0].Выбрать();
		ПараметрыДокумента.Следующий();
		СостоянияДокументовЭДО = РезультатыЗапроса[1].Выгрузить();
		
		ТипЭлементаРегламентаУОУ = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ;	
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ПриОпределенииТипаРегламентаУОУ(СообщениеОбъект.ТипЭлементаРегламента, ТипЭлементаРегламентаУОУ);
		КонецЕсли;
		
		Если Не РегламентыЭДО.ОтклонениеДоступно(СостоянияДокументовЭДО, ЭтоВходящийЭДО, ТипЭлементаРегламентаУОУ) Тогда
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			Результат.Отказ = Истина;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		СвойстваОсновногоФайла = РезультатыЗапроса[2].Выбрать();
		СвойстваОсновногоФайла.Следующий();
		
		ДанныеУчастниковЭДО = НовыеДанныеУчастниковЭДО();
		ЗаполнитьЗначенияСвойств(ДанныеУчастниковЭДО, ПараметрыДокумента);
		Если СинхронизацияЭДОКлиентСервер.ЭтоОбменЧерезОператора(ПараметрыДокумента.СпособОбмена) Тогда
			
			ВыборкаУчастниковЭДО = РезультатыЗапроса[3].Выбрать();
			Если ВыборкаУчастниковЭДО.Следующий() Тогда
				
				ДанныеУчастниковЭДО.Организация = ВыборкаУчастниковЭДО.Организация;
				ДанныеУчастниковЭДО.Контрагент = ВыборкаУчастниковЭДО.Контрагент;
				
				ТекстОшибки = "";
				ПроверитьЗаполнениеДанныхУчастниковЭДО(ДанныеУчастниковЭДО, ТекстОшибки);
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
					ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
					Результат.Отказ = Истина;
					ОтменитьТранзакцию();
					Возврат Результат;
				КонецЕсли;
				
			Иначе
				ОтменитьТранзакцию();
				ТекстОшибки = НСтр("ru='Не найдены данные участников ЭДО'");
				ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
				Результат.Отказ = Истина;
				Возврат Результат;
			КонецЕсли;
			
		КонецЕсли;
		
		ОписаниеСообщения = ОписаниеСлужебногоСообщения(ДанныеУчастниковЭДО, СвойстваОсновногоФайла,
			Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении, ТипЭлементаРегламентаУОУ, Комментарий);
		
		Если ОписаниеСообщения.Данные.ЕстьОшибки Тогда
			
			ТекстОшибки = НСтр("ru = 'Не удалось сформировать уведомление об уточнении'");
			ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
			
			ТекстОшибки = ОбщегоНазначенияБЭД.СоединитьОшибки(ОписаниеСообщения.Данные.Ошибки.ЗаполнениеДанных);
			ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
			
			Результат.Отказ = Истина;
			ОтменитьТранзакцию();
			
			Возврат Результат;
			
		КонецЕсли;

		СообщениеОбъект = СоздатьСообщение(ОписаниеСообщения, ПараметрыДокумента.Ссылка, ПараметрыДокумента);

		УстановитьСостояниеХранение(СостоянияДокументовЭДО, СообщениеОбъект.ДатаИзмененияСтатуса);
		
		ЗаполнитьЗначенияСвойств(СостоянияДокументовЭДО.Добавить(), СообщениеОбъект);
		
		ДополненияСостоянийЭДО = Неопределено;
		Если Не ПараметрыДокумента.ОбменБезПодписи Тогда
			ПараметрыМаршрута = СформироватьМаршрутПодписания(СообщениеОбъект);
			Результат.ТаблицаПодписания = ПараметрыМаршрута.ТаблицаПодписания;
			ДополненияСостоянийЭДО = ДополненияСостоянийЭДОПриПодписании(СообщениеОбъект, ПараметрыДокумента.ВидПодписи,
				ПараметрыМаршрута.ВесМаршрута);
		КонецЕсли;
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияДокументовЭДО,
			СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики, ДополненияСостоянийЭДО, Комментарий);
		
		РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Действие, ПараметрыДокумента, СостояниеДокумента,
			СообщениеОбъект.ДатаИзмененияСтатуса, СообщениеОбъект, Комментарий);
		
		Результат.СообщениеОбъект = СообщениеОбъект;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  РезультатОтклонения - Структура:
//  * Отказ - Булево
//  * СообщениеОбъект - ДокументОбъект.СообщениеЭДО
//  * ТаблицаПодписания - см. МаршрутыПодписанияБЭД.СформироватьМаршрутПодписанияЭД
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ПослеОтклонения(РезультатОтклонения, РезультатДействий)
	
	ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.Отклонить,
		РезультатОтклонения.СообщениеОбъект.ЭлектронныйДокумент);
	
	ОповеститьОДокументеКПодписанию(РезультатОтклонения.СообщениеОбъект, РезультатОтклонения.ТаблицаПодписания);
	
КонецПроцедуры

#КонецОбласти

#Область Аннулировать

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ВыполнитьДействиеАннулировать(ПараметрыВыполнения, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.Аннулировать;
	
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Действие, 0);
	
	Комментарий = КомментарийДействия(ПараметрыВыполнения, Действие);
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			АннулироватьДокументыПакета(ПакетДокументов, РезультатДействий, Комментарий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		Отбор = НовыйОтборСообщенийДляОбработкиДействия();
		Отбор.ТипЭлементаРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		ВыборкаСообщений = ВыборкаСообщенийДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий, Отбор);
		Пока ВыборкаСообщений.Следующий() Цикл
			АннулироватьДокумент(ВыборкаСообщений.Ссылка, РезультатДействий, Комментарий);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//  Комментарий - Строка
Процедура АннулироватьДокумент(Сообщение, РезультатДействий, Комментарий = "")
	
	Результат = Аннулировать(Сообщение, РезультатДействий.КонтекстДиагностики, Комментарий);
	
	Если Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.Аннулировать,
		Результат.СообщениеОбъект.ЭлектронныйДокумент);
	
	ОповеститьОДокументеКПодписанию(Результат.СообщениеОбъект, Результат.ТаблицаПодписания);
	
	ЭлектронныеДокументыЭДОСобытия.ПослеАннулированияЭлектронногоДокумента(
		Результат.СообщениеОбъект.ЭлектронныйДокумент, РезультатДействий.КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  ПакетДокументов - УникальныйИдентификатор
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//  Комментарий - Строка
Процедура АннулироватьДокументыПакета(ПакетДокументов, РезультатДействий, Комментарий = "")
	
	Действие = Перечисления.ДействияПоЭДО.Аннулировать;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	НаборРезультатов = Новый Массив;
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоПакету(ПакетДокументов, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		СообщенияПакета = СообщенияПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики,,
			Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если Не ЗначениеЗаполнено(СообщенияПакета) Тогда
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Для Каждого Сообщение Из СообщенияПакета Цикл
			Результат = Аннулировать(Сообщение, КонтекстДиагностики, Комментарий);
			Если Результат.Отказ Тогда
				ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			НаборРезультатов.Добавить(Результат);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Для Каждого РезультатОбработки Из НаборРезультатов Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие,
			РезультатОбработки.СообщениеОбъект.ЭлектронныйДокумент);
		ОповеститьОДокументеКПодписанию(РезультатОбработки.СообщениеОбъект, РезультатОбработки.ТаблицаПодписания);
		ЭлектронныеДокументыЭДОСобытия.ПослеАннулированияЭлектронногоДокумента(
			РезультатОбработки.СообщениеОбъект.ЭлектронныйДокумент, КонтекстДиагностики);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  Комментарий - Строка
// 
// Возвращаемое значение:
//  Структура:
//  * Отказ - Булево
//  * СообщениеОбъект - Неопределено
//                    - ДокументОбъект.СообщениеЭДО
//  * ТаблицаПодписания - Неопределено
//                      - см. МаршрутыПодписанияБЭД.СформироватьМаршрутПодписанияЭД
Функция Аннулировать(Сообщение, КонтекстДиагностики, Комментарий = "")
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("СообщениеОбъект", Неопределено);
	Результат.Вставить("ТаблицаПодписания", Неопределено);
	
	Действие = Перечисления.ДействияПоЭДО.Аннулировать;
	
	ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ЭлектронныйДокумент");
	ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент);
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоСообщению(Сообщение, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеСообщенияДляИзменения(Сообщение, ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		Если СообщениеОбъект.ЭлектронныйДокумент <> ЭлектронныйДокумент
			Или ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(СообщениеОбъект.ЭлектронныйДокумент) <> ЭтоВходящийЭДО Тогда
			ТекстОшибки = НСтр("ru='не удалось заблокировать данные электронного документа'");
			ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
			Результат.Отказ = Истина;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Если СообщениеОбъект.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			Результат.Отказ = Истина;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		СообщениеОбъект.Состояние = Перечисления.СостоянияСообщенийЭДО.Хранение;
		СообщениеОбъект.Записать();
		
		ТекстыЗапросов = Новый Массив;
		ТекстыЗапросов.Добавить(ТекстЗапросаПараметровОбновленияСостоянияДокумента(ЭтоВходящийЭДО));
		Если СообщениеОбъект.Направление <> Перечисления.НаправленияЭДО.Внутренний Тогда
			ТекстыЗапросов.Добавить(ТекстЗапросаСвойствОсновногоФайла());
		КонецЕсли;
		Если СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Исходящий
			ИЛИ СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
			ТекстыЗапросов.Добавить(ТекстЗапросаУчастниковЭДО(ЭтоВходящийЭДО));
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		Запрос.УстановитьПараметр("ОсновнойФайл", СообщениеОбъект.ОсновнойФайл);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ПараметрыДокумента = РезультатыЗапроса[0].Выбрать();
		ПараметрыДокумента.Следующий();
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
		
		ЭтоПовторноеАннулирование = СостоянияСообщений.Найти(Перечисления.ТипыЭлементовРегламентаЭДО.ПОА,
			"ТипЭлементаРегламента") <> Неопределено;
		Если ЭтоПовторноеАннулирование Тогда
			ДобавитьОшибкуПовторногоАннулирования(КонтекстДиагностики, Действие, ЭлектронныйДокумент);
			Результат.Отказ = Истина;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		УстановитьСостояниеХранение(СостоянияСообщений, СообщениеОбъект.ДатаИзмененияСтатуса);
		
		Если СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Внутренний 
			Или СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Интеркампани Тогда
			
			ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
			ДокументОбъект.Остановлен = Истина;
			ДокументОбъект.ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.Аннулирован;
			ДокументОбъект.Записать();
			ПараметрыДокумента = ДокументОбъект;
			
		Иначе
			
			СвойстваОсновногоФайла = РезультатыЗапроса[2].Выбрать();
			СвойстваОсновногоФайла.Следующий();
			
			ДанныеУчастниковЭДО = НовыеДанныеУчастниковЭДО();
			ЗаполнитьЗначенияСвойств(ДанныеУчастниковЭДО, ПараметрыДокумента);
			Если СинхронизацияЭДОКлиентСервер.ЭтоОбменЧерезОператора(ПараметрыДокумента.СпособОбмена) Тогда

				ВыборкаУчастниковЭДО = РезультатыЗапроса[3].Выбрать();
				Если ВыборкаУчастниковЭДО.Следующий() Тогда

					ДанныеУчастниковЭДО.Организация = ВыборкаУчастниковЭДО.Организация;
					ДанныеУчастниковЭДО.Контрагент = ВыборкаУчастниковЭДО.Контрагент;

					ТекстОшибки = "";
					ПроверитьЗаполнениеДанныхУчастниковЭДО(ДанныеУчастниковЭДО, ТекстОшибки);
					Если ЗначениеЗаполнено(ТекстОшибки) Тогда
						ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
						Результат.Отказ = Истина;
						ОтменитьТранзакцию();
						Возврат Результат;
					КонецЕсли;

				Иначе
					ТекстОшибки = НСтр("ru='Не найдены данные участников ЭДО'");
					ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
					Результат.Отказ = Истина;
					ОтменитьТранзакцию();
					Возврат Результат;
				КонецЕсли;

			КонецЕсли;

			ОписаниеСообщения = ОписаниеСлужебногоСообщения(ДанныеУчастниковЭДО, СвойстваОсновногоФайла,
				Перечисления.ТипыДокументовЭДО.ПредложениеОбАннулировании, Перечисления.ТипыЭлементовРегламентаЭДО.ПОА,
				Комментарий);

			Если ОписаниеСообщения.Данные.ЕстьОшибки Тогда

				ТекстОшибки = НСтр("ru = 'Не удалось сформировать предложение об аннулировании'");
				ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);

				ТекстОшибки = ОбщегоНазначенияБЭД.СоединитьОшибки(ОписаниеСообщения.Данные.Ошибки.ЗаполнениеДанных);
				ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);

				Результат.Отказ = Истина;
				ОтменитьТранзакцию();
				
				Возврат Результат;

			КонецЕсли;

			СообщениеОбъект = СоздатьСообщение(ОписаниеСообщения, ПараметрыДокумента.Ссылка, ПараметрыДокумента);

			ЗаполнитьЗначенияСвойств(СостоянияСообщений.Добавить(), СообщениеОбъект);

		КонецЕсли;
		
		ДополненияСостоянийЭДО = Неопределено;
		
		Если Не ПараметрыДокумента.ОбменБезПодписи Тогда
			
			ПараметрыМаршрута = СформироватьМаршрутПодписания(СообщениеОбъект);
			
			Результат.ТаблицаПодписания = ПараметрыМаршрута.ТаблицаПодписания;
			
			ДополненияСостоянийЭДО = ДополненияСостоянийЭДОПриПодписании(СообщениеОбъект, ПараметрыДокумента.ВидПодписи,
				ПараметрыМаршрута.ВесМаршрута);
			
		КонецЕсли;
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияСообщений,
			СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики, ДополненияСостоянийЭДО, Комментарий);
		
		РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Действие, ПараметрыДокумента, СостояниеДокумента,
			СообщениеОбъект.ДатаИзмененияСтатуса, СообщениеОбъект, Комментарий);
		
		Если ПараметрыДокумента.НаОзнакомлении Тогда
			ВернутьСОзнакомления(ЭлектронныйДокумент);
		КонецЕсли;
		
		Результат.СообщениеОбъект = СообщениеОбъект;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Процедура ДобавитьОшибкуПовторногоАннулирования(КонтекстДиагностики, Действие, ЭлектронныйДокумент)
	
	ПредставлениеДействия = НРег(Действие);
	ВидОперации = ВидОперацииПриДобавленииОшибки(ПредставлениеДействия);
	
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Аннулирование документа %1 уже производилось.
		|Повторное аннулирование недоступно.'"), ЭлектронныйДокумент);
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибкиПовторноеАннулированиеНедоступно(),
		ТекстСообщения, ТекстСообщения);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

// Возвращаемое значение:
//  См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиПовторноеАннулированиеНедоступно()
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ПовторноеАннулированиеНедоступно";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Повторное аннулирование недоступно'");
	Возврат ВидОшибки;
КонецФункции

#КонецОбласти

#Область ПринятьАннулирование

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ВыполнитьДействиеПринятьАннулирование(ПараметрыВыполнения, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.ПринятьАннулирование;
	
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Действие, 0);
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			ПринятьАннулированиеДокументовПакета(ПакетДокументов, РезультатДействий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		Отбор = НовыйОтборСообщенийДляОбработкиДействия();
		Отбор.Состояние.Добавить(Перечисления.СостоянияСообщенийЭДО.Подтверждение);
		Отбор.ТипЭлементаРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ПОА);
		ВыборкаСообщений = ВыборкаСообщенийДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий, Отбор);
		Пока ВыборкаСообщений.Следующий() Цикл
			ПринятьАннулированиеДокумента(ВыборкаСообщений.Ссылка, РезультатДействий);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ПринятьАннулированиеДокумента(Сообщение, РезультатДействий)
	
	Результат = ПринятьАннулирование(Сообщение, РезультатДействий.КонтекстДиагностики);
	
	Если Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.ПринятьАннулирование,
		Результат.СообщениеОбъект.ЭлектронныйДокумент);
	
	ЭлектронныеДокументыЭДОСобытия.ПослеАннулированияЭлектронногоДокумента(
		Результат.СообщениеОбъект.ЭлектронныйДокумент, РезультатДействий.КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  ПакетДокументов - УникальныйИдентификатор
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ПринятьАннулированиеДокументовПакета(ПакетДокументов, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.ПринятьАннулирование;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	НаборРезультатов = Новый Массив;
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоПакету(ПакетДокументов, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		СообщенияПакета = СообщенияПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики,
			Перечисления.СостоянияСообщенийЭДО.Подтверждение,
			Перечисления.ТипыЭлементовРегламентаЭДО.ПОА);
		Если Не ЗначениеЗаполнено(СообщенияПакета) Тогда
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Для Каждого Сообщение Из СообщенияПакета Цикл
			Результат = ПринятьАннулирование(Сообщение, КонтекстДиагностики);
			Если Результат.Отказ Тогда
				ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			НаборРезультатов.Добавить(Результат);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Для Каждого РезультатОбработки Из НаборРезультатов Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие,
			РезультатОбработки.СообщениеОбъект.ЭлектронныйДокумент);
		ЭлектронныеДокументыЭДОСобытия.ПослеАннулированияЭлектронногоДокумента(
			РезультатОбработки.СообщениеОбъект.ЭлектронныйДокумент, КонтекстДиагностики);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Структура:
//  * Отказ - Булево
//  * СообщениеОбъект - Неопределено
//                    - ДокументОбъект.СообщениеЭДО
//  * ТаблицаПодписания - Неопределено
//                      - см. МаршрутыПодписанияБЭД.СформироватьМаршрутПодписанияЭД
Функция ПринятьАннулирование(Сообщение, КонтекстДиагностики)
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("СообщениеОбъект", Неопределено);
	Результат.Вставить("ТаблицаПодписания", Неопределено);
	
	Действие = Перечисления.ДействияПоЭДО.ПринятьАннулирование;
	
	ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ЭлектронныйДокумент");
	ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент);
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоСообщению(Сообщение, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеСообщенияДляИзменения(Сообщение, ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		Если СообщениеОбъект.ЭлектронныйДокумент <> ЭлектронныйДокумент
			Или ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(СообщениеОбъект.ЭлектронныйДокумент) <> ЭтоВходящийЭДО Тогда
			ТекстОшибки = НСтр("ru='не удалось заблокировать данные электронного документа'");
			ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
			Результат.Отказ = Истина;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ПодписиСОшибкамиМЧД = МашиночитаемыеДоверенности.ПодписиСОшибкамиМЧД(
			Документы.СообщениеЭДО.ОсновнойФайлПоТипуЭлементаРегламента(
				ЭлектронныйДокумент, Перечисления.ТипыЭлементовРегламентаЭДО.ПОА));
		
		Если ПодписиСОшибкамиМЧД.Количество() > 0 Тогда
			
			ДобавитьОшибкуПодписиМЧД(ЭлектронныйДокумент, ПодписиСОшибкамиМЧД, Действие, КонтекстДиагностики);
			Результат.Отказ = Истина;
			ОтменитьТранзакцию();
			Возврат Результат;
			
		КонецЕсли;
		
		Если СообщениеОбъект.Состояние <> Перечисления.СостоянияСообщенийЭДО.Подтверждение
			ИЛИ СообщениеОбъект.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ПОА Тогда
			Результат.Отказ = Истина;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаПараметровОбновленияСостоянияДокумента(ЭтоВходящийЭДО);
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
		ПараметрыДокумента = РезультатыЗапроса[0].Выбрать();
		ПараметрыДокумента.Следующий();
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
		
		СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.Утвержден;
		СообщениеОбъект.ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
		СообщениеОбъект.Состояние = РегламентыЭДО.СостояниеСообщения(СообщениеОбъект, ПараметрыДокумента);
		СообщениеОбъект.Записать();
		
		НайденнаяСтрока = СостоянияСообщений.Найти(СообщениеОбъект.Ссылка, "Ссылка");
		НайденнаяСтрока.Состояние = СообщениеОбъект.Состояние;
		
		ДополненияСостоянийЭДО = Неопределено;
		
		Если Не ПараметрыДокумента.ОбменБезПодписи Тогда
			
			ПараметрыМаршрута = СформироватьМаршрутПодписания(СообщениеОбъект);
			
			Результат.ТаблицаПодписания = ПараметрыМаршрута.ТаблицаПодписания;
			
			ДополненияСостоянийЭДО = ДополненияСостоянийЭДОПриПодписании(СообщениеОбъект, ПараметрыДокумента.ВидПодписи,
				ПараметрыМаршрута.ВесМаршрута);
			
		КонецЕсли;
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияСообщений,
			СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики, ДополненияСостоянийЭДО);
		
		РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Действие, ПараметрыДокумента, СостояниеДокумента,
			СообщениеОбъект.ДатаИзмененияСтатуса, СообщениеОбъект);
		
		Результат.СообщениеОбъект = СообщениеОбъект;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОтклонитьАннулирование

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ВыполнитьДействиеОтклонитьАннулирование(ПараметрыВыполнения, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.ОтклонитьАннулирование;
	
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Действие, 0);
	
	Комментарий = КомментарийДействия(ПараметрыВыполнения, Действие);
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			ОтклонитьАннулированиеДокументовПакета(ПакетДокументов, РезультатДействий, Комментарий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		Отбор = НовыйОтборСообщенийДляОбработкиДействия();
		Отбор.Состояние.Добавить(Перечисления.СостоянияСообщенийЭДО.Подтверждение);
		Отбор.ТипЭлементаРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ПОА);
		ВыборкаСообщений = ВыборкаСообщенийДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий, Отбор);
		Пока ВыборкаСообщений.Следующий() Цикл
			ОтклонитьАннулированиеДокумента(ВыборкаСообщений.Ссылка, РезультатДействий, Комментарий);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//  Комментарий - Строка
Процедура ОтклонитьАннулированиеДокумента(Сообщение, РезультатДействий, Комментарий = "")
	
	Результат = ОтклонитьАннулирование(Сообщение, РезультатДействий.КонтекстДиагностики, Комментарий);
	
	Если Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.ОтклонитьАннулирование,
		Результат.СообщениеОбъект.ЭлектронныйДокумент);
	
	ОповеститьОДокументеКПодписанию(Результат.СообщениеОбъект, Результат.ТаблицаПодписания);
	
	ЭлектронныеДокументыЭДОСобытия.ПослеАннулированияЭлектронногоДокумента(
		Результат.СообщениеОбъект.ЭлектронныйДокумент, РезультатДействий.КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  ПакетДокументов - УникальныйИдентификатор
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//  Комментарий - Строка
Процедура ОтклонитьАннулированиеДокументовПакета(ПакетДокументов, РезультатДействий, Комментарий = "")
	
	Действие = Перечисления.ДействияПоЭДО.ОтклонитьАннулирование;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	НаборРезультатов = Новый Массив;
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоПакету(ПакетДокументов, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		СообщенияПакета = СообщенияПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики,
			Перечисления.СостоянияСообщенийЭДО.Подтверждение,
			Перечисления.ТипыЭлементовРегламентаЭДО.ПОА);
		Если Не ЗначениеЗаполнено(СообщенияПакета) Тогда
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Для Каждого Сообщение Из СообщенияПакета Цикл
			Результат = ОтклонитьАннулирование(Сообщение, КонтекстДиагностики, Комментарий);
			Если Результат.Отказ Тогда
				ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			НаборРезультатов.Добавить(Результат);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Для Каждого РезультатОбработки Из НаборРезультатов Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие,
			РезультатОбработки.СообщениеОбъект.ЭлектронныйДокумент);
		ОповеститьОДокументеКПодписанию(РезультатОбработки.СообщениеОбъект, РезультатОбработки.ТаблицаПодписания);
		ЭлектронныеДокументыЭДОСобытия.ПослеАннулированияЭлектронногоДокумента(
			РезультатОбработки.СообщениеОбъект.ЭлектронныйДокумент, КонтекстДиагностики);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  Комментарий - Строка
// 
// Возвращаемое значение:
//  Структура:
//  * Отказ - Булево
//  * СообщениеОбъект - Неопределено
//                    - ДокументОбъект.СообщениеЭДО
//  * ТаблицаПодписания - Неопределено
//                      - см. МаршрутыПодписанияБЭД.СформироватьМаршрутПодписанияЭД
Функция ОтклонитьАннулирование(Сообщение, КонтекстДиагностики, Комментарий = "")
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("СообщениеОбъект", Неопределено);
	Результат.Вставить("ТаблицаПодписания", Неопределено);
	
	Действие = Перечисления.ДействияПоЭДО.ОтклонитьАннулирование;
	
	ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ЭлектронныйДокумент");
	ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент);
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоСообщению(Сообщение, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеСообщенияДляИзменения(Сообщение, ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		Если СообщениеОбъект.ЭлектронныйДокумент <> ЭлектронныйДокумент
			Или ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(СообщениеОбъект.ЭлектронныйДокумент) <> ЭтоВходящийЭДО Тогда
			ТекстОшибки = НСтр("ru='не удалось заблокировать данные электронного документа'");
			ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
			Результат.Отказ = Истина;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Если СообщениеОбъект.Состояние <> Перечисления.СостоянияСообщенийЭДО.Подтверждение
			ИЛИ СообщениеОбъект.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ПОА Тогда
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			Результат.Отказ = Истина;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ТекстыЗапросов = Новый Массив;
		ТекстыЗапросов.Добавить(ТекстЗапросаПараметровОбновленияСостоянияДокумента(ЭтоВходящийЭДО));
		ТекстыЗапросов.Добавить(ТекстЗапросаСвойствОсновногоФайла());
		Если СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Исходящий
			ИЛИ СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
			ТекстыЗапросов.Добавить(ТекстЗапросаУчастниковЭДО(ЭтоВходящийЭДО));
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		Запрос.УстановитьПараметр("ОсновнойФайл", СообщениеОбъект.ОсновнойФайл);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ПараметрыДокумента = РезультатыЗапроса[0].Выбрать();
		ПараметрыДокумента.Следующий();
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
		СвойстваОсновногоФайла = РезультатыЗапроса[2].Выбрать();
		СвойстваОсновногоФайла.Следующий();
		
		ПересчитатьСостоянияСообщений(СостоянияСообщений, ПараметрыДокумента);
		
		ДанныеУчастниковЭДО = НовыеДанныеУчастниковЭДО();
		ЗаполнитьЗначенияСвойств(ДанныеУчастниковЭДО, ПараметрыДокумента);
		Если СинхронизацияЭДОКлиентСервер.ЭтоОбменЧерезОператора(ПараметрыДокумента.СпособОбмена) Тогда

			ВыборкаУчастниковЭДО = РезультатыЗапроса[3].Выбрать();
			Если ВыборкаУчастниковЭДО.Следующий() Тогда

				ДанныеУчастниковЭДО.Организация = ВыборкаУчастниковЭДО.Организация;
				ДанныеУчастниковЭДО.Контрагент = ВыборкаУчастниковЭДО.Контрагент;

				ТекстОшибки = "";
				ПроверитьЗаполнениеДанныхУчастниковЭДО(ДанныеУчастниковЭДО, ТекстОшибки);
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
					Результат.Отказ = Истина;
					ОтменитьТранзакцию();
					Возврат Результат;
				КонецЕсли;

			Иначе
				ТекстОшибки = НСтр("ru='Не найдены данные участников ЭДО'");
				ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
				Результат.Отказ = Истина;
				ОтменитьТранзакцию();
				Возврат Результат;
			КонецЕсли;

		КонецЕсли;

		ОписаниеСообщения = ОписаниеСлужебногоСообщения(ДанныеУчастниковЭДО, СвойстваОсновногоФайла,
			Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении, Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ,
			Комментарий);

		Если ОписаниеСообщения.Данные.ЕстьОшибки Тогда
			
			ТекстОшибки = НСтр("ru = 'Не удалось сформировать отказ от предложения об аннулировании'");
			ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);

			ТекстОшибки = ОбщегоНазначенияБЭД.СоединитьОшибки(ОписаниеСообщения.Данные.Ошибки.ЗаполнениеДанных);
			ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);

			Результат.Отказ = Истина;
			ОтменитьТранзакцию();
			Возврат Результат;

		КонецЕсли;

		СообщениеОбъект = СоздатьСообщение(ОписаниеСообщения, ПараметрыДокумента.Ссылка, ПараметрыДокумента);

		ЗаполнитьЗначенияСвойств(СостоянияСообщений.Добавить(), СообщениеОбъект);
		
		ДополненияСостоянийЭДО = Неопределено;
		Если Не ПараметрыДокумента.ОбменБезПодписи Тогда
			ПараметрыМаршрута = СформироватьМаршрутПодписания(СообщениеОбъект);
			Результат.ТаблицаПодписания = ПараметрыМаршрута.ТаблицаПодписания;
			ДополненияСостоянийЭДО = ДополненияСостоянийЭДОПриПодписании(СообщениеОбъект, ПараметрыДокумента.ВидПодписи,
				ПараметрыМаршрута.ВесМаршрута);
		КонецЕсли;
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияСообщений,
			СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики, ДополненияСостоянийЭДО, Комментарий);
		
		РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Действие, ПараметрыДокумента, СостояниеДокумента,
			СообщениеОбъект.ДатаИзмененияСтатуса, СообщениеОбъект, Комментарий);
		
		Результат.СообщениеОбъект = СообщениеОбъект;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Перенаправить

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ВыполнитьДействиеПеренаправить(ПараметрыВыполнения, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.Перенаправить;
	
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Действие, 0);
	
	Ответственный = ПараметрыВыполнения.Ответственный;
	Комментарий = КомментарийДействия(ПараметрыВыполнения, Действие);
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			ПеренаправитьДокументыПакета(ПакетДокументов, Ответственный, РезультатДействий, Комментарий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
		Выборка = ВыборкаДокументовДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий);
		Пока Выборка.Следующий() Цикл
			Если ПеренаправитьДокумент(Выборка.ЭлектронныйДокумент, Ответственный, КонтекстДиагностики, Комментарий) Тогда
				ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие, Выборка.ЭлектронныйДокумент);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  Ответственный - ОпределяемыйТип.Пользователь
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  Комментарий - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ПеренаправитьДокумент(ЭлектронныйДокумент, Ответственный, КонтекстДиагностики, Комментарий = "") Экспорт
	
	Результат = Истина;
	
	Действие = Перечисления.ДействияПоЭДО.Перенаправить;
	
	НачатьТранзакцию();
	Попытка
		
		ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент);
		
		ЗаблокироватьДанныеДокументаДляИзменения(ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		ДокументОбъект.Ответственный = Ответственный;
		ДокументОбъект.Записать();
		
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(ТекстЗапросаСостоянияДокумента());
		ТекстыЗапроса.Добавить(ТекстЗапросаСвойствСообщенияИнформацииОтправителя());
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ДокументОбъект.Ссылка);
		
		ТитулыОтправителя = Новый Массив;
		ТитулыОтправителя.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителя);	
		КонецЕсли;
		Запрос.УстановитьПараметр("ТитулыОтправителя", ТитулыОтправителя);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		Если РезультатыЗапроса[0].Пустой()
			ИЛИ РезультатыЗапроса[1].Пустой() Тогда
			Результат = Ложь;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ВыборкаСостояния = РезультатыЗапроса[0].Выбрать();
		ВыборкаСостояния.Следующий();
		
		Если Не ДействиеДоступно(Действие, ВыборкаСостояния.Состояние, ДокументОбъект, КонтекстДиагностики) Тогда
			Результат = Ложь;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		СвойстваСообщения = РезультатыЗапроса[1].Выбрать();
		СвойстваСообщения.Выбрать();
		
		СостояниеДокумента = ЭлектронныеДокументыЭДО.СостояниеДокумента(ЭлектронныйДокумент);
		РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Действие, ДокументОбъект, СостояниеДокумента,
			ТекущаяДатаСеанса(), СвойстваСообщения, Комментарий);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Результат = Ложь;
		
		ПредставлениеДействия = НРег(Действие);
		ВидОперации = ВидОперацииПриДобавленииОшибки(ПредставлениеДействия);
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось установить ответственного по документу: %1.'"),
			ЭлектронныеДокументыЭДО.ПредставлениеДокумента(ЭлектронныйДокумент));
		ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
			ПодробныйТекстОшибки, ТекстОшибки);
		ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ПакетДокументов - УникальныйИдентификатор
//  Ответственный - ОпределяемыйТип.Пользователь
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//  Комментарий - Строка
Процедура ПеренаправитьДокументыПакета(ПакетДокументов, Ответственный, РезультатДействий, Комментарий = "")
	
	Действие = Перечисления.ДействияПоЭДО.Перенаправить;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	ОбработанныеДокументы = Новый Массив;
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоПакету(ПакетДокументов, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		ДокументыПакета = ДокументыПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики);
		Если Не ЗначениеЗаполнено(ДокументыПакета) Тогда
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Для Каждого ЭлектронныйДокумент Из ДокументыПакета Цикл
			Если Не ПеренаправитьДокумент(ЭлектронныйДокумент, КонтекстДиагностики, Комментарий) Тогда
				ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			ОбработанныеДокументы.Добавить(ЭлектронныйДокумент);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Для Каждого ЭлектронныйДокумент Из ОбработанныеДокументы Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие, ЭлектронныйДокумент);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Утвердить

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ВыполнитьДействиеУтвердить(ПараметрыВыполнения, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.Утвердить;
	
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Действие, 0);
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			УтвердитьДокументыПакета(ПакетДокументов, РезультатДействий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		Отбор = НовыйОтборСообщенийДляОбработкиДействия();
		Отбор.Состояние.Добавить(Перечисления.СостоянияСообщенийЭДО.Утверждение);
		Отбор.ТипЭлементаРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Отбор.ТипЭлементаРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки);
		ВыборкаСообщений = ВыборкаСообщенийДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий, Отбор);
		Пока ВыборкаСообщений.Следующий() Цикл
			УтвердитьДокумент(ВыборкаСообщений.Ссылка, РезультатДействий)
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура УтвердитьДокумент(Сообщение, РезультатДействий)
	
	РезультатУтверждения = Утвердить(Сообщение, РезультатДействий.КонтекстДиагностики);
	
	ПослеУтверждения(РезультатУтверждения, РезультатДействий);
	
КонецПроцедуры

// Параметры:
//  ПакетДокументов - УникальныйИдентификатор
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура УтвердитьДокументыПакета(ПакетДокументов, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.Утвердить;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	НаборРезультатов = Новый Массив;
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоПакету(ПакетДокументов, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		ДокументыПакета = ДокументыПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики);
		Если Не ЗначениеЗаполнено(ДокументыПакета) Тогда
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		СообщенияПакета = СообщенияПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики,
			Перечисления.СостоянияСообщенийЭДО.Утверждение,
			Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если Не ЗначениеЗаполнено(СообщенияПакета) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
			
		Для Каждого Сообщение Из СообщенияПакета Цикл
			Результат = Утвердить(Сообщение, КонтекстДиагностики);
			Если Результат.Отказ Тогда
				ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			НаборРезультатов.Добавить(Результат);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Для Каждого РезультатУтверждения Из НаборРезультатов Цикл
		
		ПослеУтверждения(РезультатУтверждения, РезультатДействий);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  НаборОбъектовУчета - Неопределено,Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
// 
// Возвращаемое значение:
//  Структура:
//  * Отказ - Булево
//  * СостояниеДокумента - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * СообщениеОбъект - Неопределено
//                    - ДокументОбъект.СообщениеЭДО
//  * ТаблицаПодписания - Неопределено
//                      - см. МаршрутыПодписанияБЭД.СформироватьМаршрутПодписанияЭД
Функция Утвердить(Сообщение, КонтекстДиагностики, НаборОбъектовУчета = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("СостояниеДокумента", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("СообщениеОбъект", Неопределено);
	Результат.Вставить("ТаблицаПодписания", Неопределено);
	
	Действие = Перечисления.ДействияПоЭДО.Утвердить;
	
	ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ЭлектронныйДокумент");
	ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент);
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоСообщению(Сообщение, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеСообщенияДляИзменения(Сообщение, ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		Если СообщениеОбъект.ЭлектронныйДокумент <> ЭлектронныйДокумент
			Или ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(СообщениеОбъект.ЭлектронныйДокумент) <> ЭтоВходящийЭДО Тогда
			ТекстОшибки = НСтр("ru='не удалось заблокировать данные электронного документа'");
			ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
			Результат.Отказ = Истина;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Если СообщениеОбъект.Состояние <> Перечисления.СостоянияСообщенийЭДО.Утверждение
			ИЛИ ЕстьНевалидныеПодписи(СообщениеОбъект.ОсновнойФайл, КонтекстДиагностики) Тогда
			ЗафиксироватьТранзакцию();
			Результат.Отказ = Истина;
			Возврат Результат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаПараметровОбновленияСостоянияДокумента(ЭтоВходящийЭДО);
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ПараметрыДокумента = РезультатыЗапроса[0].Выбрать();
		ПараметрыДокумента.Следующий();
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
		
		СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.Утвержден;
		СообщениеОбъект.ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
		СообщениеОбъект.Состояние = РегламентыЭДО.СостояниеСообщения(СообщениеОбъект, ПараметрыДокумента);
		СообщениеОбъект.Записать();
		
		НайденнаяСтрока = СостоянияСообщений.Найти(СообщениеОбъект.Ссылка, "Ссылка");
		НайденнаяСтрока.Состояние = СообщениеОбъект.Состояние;
		
		ДополненияСостоянийЭДО = НовыеДополненияСостоянийЭДО();
		
		ДополненияСостоянийЭДО = Неопределено;
		Если ПараметрыДокумента.ТребуетсяПодтверждение
			И Не РегламентыЭДО.ЕстьИнформацияПолучателя(ПараметрыДокумента.ТипРегламента)
			И Не ПараметрыДокумента.ОбменБезПодписи Тогда
			ПараметрыМаршрута = СформироватьМаршрутПодписания(СообщениеОбъект);
			ДополненияСостоянийЭДО = ДополненияСостоянийЭДОПриПодписании(СообщениеОбъект,
				ПараметрыДокумента.ВидПодписи, ПараметрыМаршрута.ВесМаршрута);
			Результат.ТаблицаПодписания = ПараметрыМаршрута.ТаблицаПодписания;
		КонецЕсли;
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияСообщений,
			СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики, ДополненияСостоянийЭДО);
		
		РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Действие, ПараметрыДокумента, СостояниеДокумента,
			СообщениеОбъект.ДатаИзмененияСтатуса, СообщениеОбъект);
		
		Результат.СостояниеДокумента = СостояниеДокумента;
		Результат.СообщениеОбъект = СообщениеОбъект;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  РезультатУтверждения - см. Утвердить
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ПослеУтверждения(РезультатУтверждения, РезультатДействий)
	
	Если РезультатУтверждения.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеОбъект = РезультатУтверждения.СообщениеОбъект;
	
	ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.Утвердить,
		СообщениеОбъект.ЭлектронныйДокумент);
	
	Если ЗначениеЗаполнено(РезультатУтверждения.ТаблицаПодписания) Тогда
		ОповеститьОДокументеКПодписанию(СообщениеОбъект, РезультатУтверждения.ТаблицаПодписания);
	КонецЕсли;
	
	Если СообщениеОбъект.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
		ЭлектронныеДокументыЭДОСобытия.ПослеУтвержденияЭлектронногоДокумента(СообщениеОбъект.ЭлектронныйДокумент,
			РезультатДействий.КонтекстДиагностики);
	КонецЕсли;
	
	Если РезультатУтверждения.СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен
		ИЛИ РезультатУтверждения.СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением Тогда
		ЭлектронныеДокументыЭДОСобытия.ПослеЗавершенияОбменаЭлектроннымДокументом(СообщениеОбъект.ЭлектронныйДокумент,
			РезультатДействий.КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СнятьСУтверждения

// Снимает с утверждения.
// 
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  ИспользоватьУтверждение - Булево
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Булево - Снять с утверждения
Функция СнятьСУтверждения(Сообщение, ИспользоватьУтверждение, КонтекстДиагностики)
	
	Результат = Истина;
	
	Действие = Перечисления.ДействияПоЭДО.СнятьСУтверждения;
	
	ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ЭлектронныйДокумент");
	ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент);
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоСообщению(Сообщение, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеСообщенияДляИзменения(Сообщение, ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		Если СообщениеОбъект.ЭлектронныйДокумент <> ЭлектронныйДокумент
			Или ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(СообщениеОбъект.ЭлектронныйДокумент) <> ЭтоВходящийЭДО Тогда
			ТекстОшибки = НСтр("ru='не удалось заблокировать данные электронного документа'");
			ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
			Результат = Ложь;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Если СообщениеОбъект.Состояние <> Перечисления.СостоянияСообщенийЭДО.Утверждение Тогда
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаПараметровОбновленияСостоянияДокумента(ЭтоВходящийЭДО);
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		Запрос.УстановитьПараметр("Сообщение", Сообщение);
		Запрос.УстановитьПараметр("СтатусСообщения", СообщениеОбъект.Статус);
		Запрос.УстановитьПараметр("ДатаИзменения", СообщениеОбъект.ДатаИзмененияСтатуса);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ПараметрыДокумента = РезультатыЗапроса[0].Выбрать();
		ПараметрыДокумента.Следующий();
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
		
		СообщениеОбъект.Состояние = РегламентыЭДО.СостояниеСообщения(СообщениеОбъект, ПараметрыДокумента,
			ИспользоватьУтверждение);
		СообщениеОбъект.Записать();
		
		НайденнаяСтрока = СостоянияСообщений.Найти(СообщениеОбъект.Ссылка, "Ссылка");
		НайденнаяСтрока.Состояние = СообщениеОбъект.Состояние;
		
		ДополненияСостоянийЭДО = Неопределено;
		Если ПараметрыДокумента.ТребуетсяПодтверждение
			И Не РегламентыЭДО.ЕстьИнформацияПолучателя(ПараметрыДокумента.ТипРегламента)
			И Не ПараметрыДокумента.ОбменБезПодписи Тогда
			ПараметрыМаршрута = СформироватьМаршрутПодписания(СообщениеОбъект);
			ДополненияСостоянийЭДО = ДополненияСостоянийЭДОПриПодписании(СообщениеОбъект,
				ПараметрыДокумента.ВидПодписи, ПараметрыМаршрута.ВесМаршрута);
		КонецЕсли;
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияСообщений,
			СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики, ДополненияСостоянийЭДО);
		
		РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Действие, ПараметрыДокумента, СостояниеДокумента,
			СообщениеОбъект.ДатаИзмененияСтатуса, СообщениеОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Если Не Результат Тогда
		ПослеСнятияСУтверждения(СообщениеОбъект, ПараметрыМаршрута.ТаблицаПодписания, СостояниеДокумента);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  СообщениеОбъект - ДокументОбъект.СообщениеЭДО
//  ТаблицаПодписания - см. МаршрутыПодписанияБЭД.СформироватьМаршрутПодписанияЭД
//  СостояниеДокумента - ПеречислениеСсылка.СостоянияДокументовЭДО
Процедура ПослеСнятияСУтверждения(СообщениеОбъект, ТаблицаПодписания, СостояниеДокумента)
	
	Если (СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.Аннулирован) Тогда
		
		ОтправитьНаОзнакомление(СообщениеОбъект.ЭлектронныйДокумент);
	КонецЕсли;
	
	ОповеститьОДокументеКПодписанию(СообщениеОбъект, ТаблицаПодписания);
	
КонецПроцедуры

#КонецОбласти

#Область СформироватьОтвет

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ВыполнитьДействиеСформироватьОтвет(ПараметрыВыполнения, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.СформироватьОтвет;
	
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Действие, 0);
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			СформироватьОтветПоДокументамПакета(ПакетДокументов, РезультатДействий,
				ПараметрыВыполнения.ДанныеРучногоФормированияТитула);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		Выборка = ВыборкаДокументовДляФормированияОтвета(ПараметрыВыполнения.ОбъектыДействий);
		Пока Выборка.Следующий() Цикл
			СформироватьОтветПоДокументу(Выборка.ЭлектронныйДокумент, РезультатДействий,
				ПараметрыВыполнения.ДанныеРучногоФормированияТитула);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает выбранные электронные документы для формирования ответного титула.
//
// Параметры:
//  ОбъектыДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
Функция ВыборкаДокументовДляФормированияОтвета(ОбъектыДействий) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстыЗапросов = Новый Массив;
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	ОтветныеЭлементыРегламента = Новый Массив;
	ОтветныеЭлементыРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);
	ОтветныеЭлементыРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки);
	Запрос.УстановитьПараметр("ОтветныеЭлементыРегламента", ОтветныеЭлементыРегламента);
	Если ЗначениеЗаполнено(ОбъектыДействий.ОбъектыУчета) Тогда
		
		ОтборДокументов = ИнтеграцияЭДО.НовыйОтборАктуальныхЭлектронныхДокументов();
		ОтборДокументов.ОбъектыУчета = "&ОтборОбъектыУчета";
		
		Запрос.УстановитьПараметр("ОтборОбъектыУчета", ОбъектыДействий.ОбъектыУчета);
		
		ТекстЗапроса = ИнтеграцияЭДО.ЗапросАктуальныхЭлектронныхДокументов(
			"ЭлектронныеДокументыОбъектовУчета", ОтборДокументов).Текст + ";
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЭлектронныеДокументыОбъектовУчета.ЭлектронныйДокумент КАК ЭлектронныйДокумент
			|ИЗ
			|	ЭлектронныеДокументыОбъектовУчета КАК ЭлектронныеДокументыОбъектовУчета
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
			|		ПО ЭлектронныеДокументыОбъектовУчета.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
			|		И ЭлектронныйДокументВходящийЭДО.ТребуетсяПодтверждение
			|		И ЭлектронныйДокументВходящийЭДО.ТипРегламента <> ЗНАЧЕНИЕ(Перечисление.ТипыРегламентовЭДО.Неформализованный)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СформированныеОтветы
			|		ПО СформированныеОтветы.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
			|		И СформированныеОтветы.ТипЭлементаРегламента В (&ОтветныеЭлементыРегламента)
			|		И СформированныеОтветы.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСообщенийЭДО.НеСформирован)
			|		И НЕ СформированныеОтветы.ПометкаУдаления
			|		
			|ГДЕ
			|	ЭлектронныйДокументВходящийЭДО.ТребуетсяПодтверждение
			|	И ЭлектронныйДокументВходящийЭДО.ТипРегламента <> ЗНАЧЕНИЕ(Перечисление.ТипыРегламентовЭДО.Неформализованный)
			|	И СформированныеОтветы.ЭлектронныйДокумент ЕСТЬ NULL
			|	И НЕ ЭлектронныйДокументВходящийЭДО.ЭтоОблачныйЭДО";
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		Если МодульОбменСГИСЭПД <> Неопределено Тогда
			МодульОбменСГИСЭПД.ДополнитьЗапросВыборкиДокументовДляФормированияОтвета(ТекстыЗапросов, Запрос.Параметры);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.ЭлектронныеДокументы) Тогда
		
		Запрос.УстановитьПараметр("ОтборЭлектронныеДокументы", ОбъектыДействий.ЭлектронныеДокументы);
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ЭлектронныйДокумент
			|ИЗ
			|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СформированныеОтветы
			|		ПО СформированныеОтветы.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
			|		И СформированныеОтветы.ТипЭлементаРегламента В (&ОтветныеЭлементыРегламента)
			|		И СформированныеОтветы.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСообщенийЭДО.НеСформирован)
			|		И НЕ СформированныеОтветы.ПометкаУдаления
			|ГДЕ
			|	ЭлектронныйДокументВходящийЭДО.Ссылка В (&ОтборЭлектронныеДокументы)
			|	И ЭлектронныйДокументВходящийЭДО.ТребуетсяПодтверждение
			|	И ЭлектронныйДокументВходящийЭДО.ТипРегламента <> ЗНАЧЕНИЕ(Перечисление.ТипыРегламентовЭДО.Неформализованный)
			|	И СформированныеОтветы.ЭлектронныйДокумент ЕСТЬ NULL
			|	И НЕ ЭлектронныйДокументВходящийЭДО.ЭтоОблачныйЭДО";
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		Если МодульОбменСГИСЭПД <> Неопределено Тогда
			МодульОбменСГИСЭПД.ДополнитьЗапросВыборкиДокументовДляФормированияОтвета(ТекстыЗапросов, Запрос.Параметры, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, "
		|
		|ОБЪЕДИНИТЬ
		|");
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Формирует ответный титул по электронному документу.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//  ДанныеОбъектаУчета - ДеревоЗначений
//                     - См. ИнтерфейсДокументовЭДОКлиентСервер.ДанныеРучногоФормированияТитула
Процедура СформироватьОтветПоДокументу(ЭлектронныйДокумент, РезультатДействий, ДанныеОбъектаУчета = Неопределено) Экспорт
	
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	
	РезультатФормирования = СформироватьОтвет(ЭлектронныйДокумент, КонтекстДиагностики, ДанныеОбъектаУчета);
	
	Если РезультатФормирования.Отказ Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатДействий.ОшибкиФормирования,
			РезультатФормирования.ОшибкиФормирования);
		Возврат;
	КонецЕсли;
	
	Если РезультатФормирования.СообщениеОбъект <> Неопределено Тогда
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.СформироватьОтвет,
			РезультатФормирования.СообщениеОбъект.ЭлектронныйДокумент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатФормирования.ТаблицаПодписания) Тогда
		ОповеститьОДокументеКПодписанию(РезультатФормирования.СообщениеОбъект, РезультатФормирования.ТаблицаПодписания);
	КонецЕсли;
	
КонецПроцедуры

// Формирует ответные титулы по электронным документам пакета.
//
// Параметры:
//  ПакетДокументов - УникальныйИдентификатор
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//  ДанныеОбъектовУчетаПоДокументам - Соответствие из КлючИЗначение:
//                                    * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//                                    * Значение - ДеревоЗначений
//                                  - См. ИнтерфейсДокументовЭДОКлиентСервер.ДанныеРучногоФормированияТитула
Процедура СформироватьОтветПоДокументамПакета(ПакетДокументов, РезультатДействий, ДанныеОбъектовУчетаПоДокументам = Неопределено) Экспорт
	
	Действие = Перечисления.ДействияПоЭДО.СформироватьОтвет;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	НаборРезультатов = Новый Массив;
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоПакету(
		ПакетДокументов, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		ДокументыПакета = ДокументыПакетаДляИзменения(
			ПакетДокументов, Действие, КонтекстДиагностики);
		Если Не ЗначениеЗаполнено(ДокументыПакета) Тогда
			ДобавитьОшибкуОтменыОперации(
				КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Для Каждого ЭлектронныйДокумент Из ДокументыПакета Цикл
			Если ТипЗнч(ДанныеОбъектовУчетаПоДокументам) = Тип("Соответствие") Тогда
				ДанныеОбъектаУчета = ДанныеОбъектовУчетаПоДокументам[ЭлектронныйДокумент];
			ИначеЕсли ТипЗнч(ДанныеОбъектовУчетаПоДокументам) = Тип("Структура") Тогда
				ДанныеОбъектаУчета = ДанныеОбъектовУчетаПоДокументам;
			Иначе
				ДанныеОбъектаУчета = Неопределено;
			КонецЕсли;
			Результат = СформироватьОтвет(ЭлектронныйДокумент, КонтекстДиагностики, ДанныеОбъектаУчета);
			Если Результат.Отказ Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатДействий.ОшибкиФормирования, 
					Результат.ОшибкиФормирования);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			НаборРезультатов.Добавить(Результат);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(
			ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Для Каждого РезультатОбработки Из НаборРезультатов Цикл
		
		Если РезультатОбработки.СообщениеОбъект <> Неопределено Тогда
			ЗаполнитьИтогВыполненияДействияПоЭДО(
				РезультатДействий.Итог, Действие, РезультатОбработки.СообщениеОбъект.ЭлектронныйДокумент);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатОбработки.ТаблицаПодписания) Тогда
			ОповеститьОДокументеКПодписанию(
				РезультатОбработки.СообщениеОбъект, РезультатОбработки.ТаблицаПодписания);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ОписаниеДанныхЭД - ДеревоЗначений - описание данных объекта учета
//                   - См. ИнтерфейсДокументовЭДОКлиентСервер.ДанныеРучногоФормированияТитула
// 
// Возвращаемое значение:
//  Структура:
//  * Отказ - Булево
//  * СостояниеДокумента - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * СообщениеОбъект - Неопределено - если сообщение не создано.
//                    - ДокументОбъект.СообщениеЭДО
//  * ТаблицаПодписания - Неопределено
//                      - см. МаршрутыПодписанияБЭД.ПустаяТаблицаТребованийКПодписанию
//  * ОшибкиФормирования - Массив из см. ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования
Функция СформироватьОтвет(ЭлектронныйДокумент, КонтекстДиагностики, ОписаниеДанныхЭД = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("СостояниеДокумента", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("СообщениеОбъект", Неопределено);
	Результат.Вставить("ТаблицаПодписания", Неопределено);
	Результат.Вставить("ОшибкиФормирования", Новый Массив);
	
	Действие = Перечисления.ДействияПоЭДО.СформироватьОтвет;
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	ПараметрыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
			"Организация, Контрагент, ТипРегламента, ВидДокумента, ВидДокумента.ТипДокумента");
	
	ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент);
	Если Не ЭтоВходящийЭДО
		И НЕ (МодульОбменСГИСЭПД <> Неопределено 
			И МодульОбменСГИСЭПД.ЭтоТипРегламентаЭПД(ПараметрыДокумента.ТипРегламента)) Тогда
		Результат.Отказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеДокументаДляИзменения(ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		ТекстыЗапросов = Новый Массив;
		ТекстыЗапросов.Добавить(ТекстЗапросаПараметровОбновленияСостоянияДокумента(ЭтоВходящийЭДО));
		ТекстыЗапросов.Добавить(ТекстЗапросаСвойствФайлаИнформацииОтправителя());
		ТекстыЗапросов.Добавить(ИнтеграцияЭДО.ТекстЗапросаОбъектовУчетаЭлектронныхДокументов());
	
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		
		ТитулыОтправителей = Новый Массив;
		ТитулыОтправителей.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителей);
		КонецЕсли;
		Запрос.УстановитьПараметр("ТитулыОтправителей", ТитулыОтправителей);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ПараметрыДокумента = РезультатыЗапроса[0].Выбрать();
		ПараметрыДокумента.Следующий();
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
		
		ДополненияСостоянийЭДО = НовыеДополненияСостоянийЭДО();
		
		ЭтоЭлектронноеАктирование = Ложь;
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
			МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
			Если МодульЭлектронноеАктированиеЕИС.ЭтоОбменЧерезСерверЕИС(ПараметрыДокумента.СпособОбмена) Тогда
				ЭтоЭлектронноеАктирование = Истина;
			КонецЕсли;
		КонецЕсли;
		
		МодульОбменСГИСЭПД = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		КонецЕсли;
		
		Если (Не ПараметрыДокумента.ТребуетсяПодтверждение 
				И НЕ (МодульОбменСГИСЭПД <> Неопределено 
					И МодульОбменСГИСЭПД.ЭтоТипРегламентаЭПД(ПараметрыДокумента.ТипРегламента)))
			ИЛИ (Не РегламентыЭДО.ЕстьИнформацияПолучателя(ПараметрыДокумента.ТипРегламента)
					И НЕ ЭтоЭлектронноеАктирование)
			ИЛИ СостоянияСообщений.Найти(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя,
				"ТипЭлементаРегламента") <> Неопределено 
			ИЛИ РегламентыЭДО.ЕстьАктивноеАннулирование(СостоянияСообщений) Тогда
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ВыборкаОсновногоФайла = РезультатыЗапроса[2].Выбрать();
		Если Не ВыборкаОсновногоФайла.Следующий() Тогда
			Результат.Отказ = Истина;
			ДобавитьОшибкуОтсутствияОсновногоФайлаДокумента(КонтекстДиагностики, Действие, ЭлектронныйДокумент);
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		СвойстваОсновногоФайла = НовыеСвойстваОсновногоФайлаДляФормированияОтветного();
		СвойстваОсновногоФайла.Ссылка = ВыборкаОсновногоФайла.Ссылка;
		СвойстваОсновногоФайла.ИмяФайла = ВыборкаОсновногоФайла.ПолноеИмяФайла;
		СвойстваОсновногоФайла.ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаОсновногоФайла.Ссылка);
		СвойстваОсновногоФайла.Содержание = ФорматыЭДО.ПрочитатьСодержаниеДокумента(СвойстваОсновногоФайла);
		
		ПоддерживаемыеФорматыФНС = ФорматыЭДО_ФНС.ПоддерживаемыеФорматы();
		
		ФорматОсновногоФайла = СвойстваОсновногоФайла.Содержание.Формат;
		ЭтоФорматУПДУКД = (ФорматОсновногоФайла = ПоддерживаемыеФорматыФНС.УПД.ИнформацияПродавца 
			Или ФорматОсновногоФайла = ПоддерживаемыеФорматыФНС.УПД2019.ИнформацияПродавца
			Или ФорматОсновногоФайла = ПоддерживаемыеФорматыФНС.УКД.ИнформацияПродавца
			Или ФорматОсновногоФайла = ПоддерживаемыеФорматыФНС.УКД2020.ИнформацияПродавца
			Или ФорматОсновногоФайла = ПоддерживаемыеФорматыФНС.УПД_5_02.ИнформацияПродавца
			Или ФорматОсновногоФайла = ПоддерживаемыеФорматыФНС.УПД_5_03.ИнформацияПродавца);
		
		НаборОбъектовУчета = Новый Массив;
		Если Не РезультатыЗапроса[3].Пустой() Тогда
			
			НаборОбъектовУчета = РезультатыЗапроса[3].Выгрузить().ВыгрузитьКолонку("ОбъектУчета");
			
		ИначеЕсли ПолучитьФункциональнуюОпцию("ЗапретитьФормированиеОтветногоТитулаБезДокументовУчета")
			И ЭтоФорматУПДУКД Тогда
 
			Результат.Отказ = Истина;
			ЭлектронныеДокументыЭДО.ДобавитьОшибкуФормированияОтвета(ЭлектронныйДокумент, Действие, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат Результат;
			
		КонецЕсли;
		
		РезультатПроверки = ФорматыЭДО.ПроверитьДокумент(СвойстваОсновногоФайла);
		
		Если РезультатПроверки.Ошибки Тогда
			
			ТекстОшибки = РезультатПроверки.ТекстОшибки;
			ДобавитьОшибкуФорматаОсновногоФайлаДокумента(КонтекстДиагностики, ЭлектронныйДокумент, ТекстОшибки);
			Результат.Отказ = Истина;
			ОтменитьТранзакцию();
			Возврат Результат;

		КонецЕсли;
		
		Если ПараметрыДокумента.ТипРегламента = Перечисления.ТипыРегламентовЭДО.АктОРасхождениях Тогда
			СвойстваАктОРасхождениях =
				СвойстваОсновногоФайла.Содержание.СвойстваДокументовПоФорматам.АктОРасхождениях;
			Если Не СвойстваАктОРасхождениях.ФормируютсяИтогиПриемки Тогда
				ЗафиксироватьТранзакцию();
				Возврат Результат;
			КонецЕсли;
			
			ВариантыФормирования = ФорматыЭДО.ВариантыФормированияИтоговПриемки();
			Если Не (СвойстваАктОРасхождениях.ВариантФормированияИтоговПриемки =
					ВариантыФормирования.ПродавцомФормируютсяДопСведенияОСогласииНесогласииСРезультатамиПриемки
				Или СвойстваАктОРасхождениях.ВариантФормированияИтоговПриемки =
					ВариантыФормирования.ПродавцомФормируютсяДопСведенияИные) Тогда
				ЗафиксироватьТранзакцию();
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ОписаниеДанныхЭД) = Тип("ДеревоЗначений") Или ФорматыЭДО.ЭтоОбработкаФормата(ОписаниеДанныхЭД) Тогда
			СообщениеОбъект = СоздатьОтветноеСообщениеПоУчетнымДанным(СвойстваОсновногоФайла, ПараметрыДокумента,
				ОписаниеДанныхЭД, Результат.ОшибкиФормирования);
		Иначе
			СообщениеОбъект = СоздатьОтветноеСообщениеПоОбъектамУчета(СвойстваОсновногоФайла, ПараметрыДокумента,
				НаборОбъектовУчета, Результат.ОшибкиФормирования, ОписаниеДанныхЭД);
		КонецЕсли;
		
		Если СообщениеОбъект = Неопределено Тогда
			Результат.Отказ = Истина;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СостоянияСообщений.Добавить(), СообщениеОбъект);
		
		ДополненияСостоянийЭДО = Неопределено;
		Если Не ПараметрыДокумента.ОбменБезПодписи Тогда
			ПараметрыМаршрута = СформироватьМаршрутПодписания(СообщениеОбъект);
			ДополненияСостоянийЭДО = ДополненияСостоянийЭДОПриПодписании(СообщениеОбъект,
				ПараметрыДокумента.ВидПодписи, ПараметрыМаршрута.ВесМаршрута);
			Результат.ТаблицаПодписания = ПараметрыМаршрута.ТаблицаПодписания;
		КонецЕсли;
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияСообщений,
			СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики, ДополненияСостоянийЭДО);
		
		РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Действие, ПараметрыДокумента, СостояниеДокумента,
			СообщениеОбъект.ДатаИзмененияСтатуса, СообщениеОбъект);
		
		Результат.СостояниеДокумента = СостояниеДокумента;
		Результат.СообщениеОбъект = СообщениеОбъект;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоДокументу(ЭлектронныйДокумент, Действие);
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаСвойствФайлаИнформацииОтправителя()
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлы.Ссылка,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла,
		|	ПрисоединенныеФайлы.ДатаСоздания
		|ИЗ
		|	Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ПрисоединенныеФайлы.Ссылка = СообщениеЭДО.ОсновнойФайл
		|		И СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|		И СообщениеЭДО.ТипЭлементаРегламента В (&ТитулыОтправителей)
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И СообщениеЭДО.ТипЭлементаРегламента В (&ТитулыОтправителей)";
	Возврат ТекстЗапроса;
КонецФункции

// Параметры:
//  СвойстваОсновногоФайла - см. НовыеСвойстваОсновногоФайлаДляФормированияОтветного
//  ПараметрыДокумента - ВыборкаИзРезультатаЗапроса:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.УчастникЭДО
//  * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//  НаборОбъектовУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ОшибкиФормирования - Массив из см. ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования
//  ДанныеРучногоФормированияТитула - Неопределено - заполняется в формах ручного формирования титулов
//                                  - См. ИнтерфейсДокументовЭДОКлиентСервер.ДанныеРучногоФормированияТитула
// 
// Возвращаемое значение:
//  - Неопределено
//  - ДокументОбъект.СообщениеЭДО
Функция СоздатьОтветноеСообщениеПоОбъектамУчета(СвойстваОсновногоФайла, ПараметрыДокумента, НаборОбъектовУчета, ОшибкиФормирования,
	ДанныеРучногоФормированияТитула = Неопределено)
	
	СодержаниеДокумента = СвойстваОсновногоФайла.Содержание;
	
	ПараметрыФормирования = ИнтеграцияЭДО.НовыеПараметрыФормированияДанныхОбъектаУчета();
	ЗаполнитьЗначенияСвойств(ПараметрыФормирования, ПараметрыДокумента);
	ПараметрыФормирования.Отправитель = ПараметрыДокумента.Организация;
	ПараметрыФормирования.Получатель = ПараметрыДокумента.Контрагент;
	ПараметрыФормирования.Договор = ПараметрыДокумента.ДоговорКонтрагента;
	ПараметрыФормирования.Формат = ФорматыЭДО.ФорматОтветногоТитула(СодержаниеДокумента.Формат);
	ПараметрыФормирования.ТипДокумента = СодержаниеДокумента.ТипДокумента;
	ПараметрыФормирования.ДанныеРучногоФормированияТитула = ДанныеРучногоФормированияТитула;
	
	ОписаниеДанных = ИнтеграцияЭДО.ОписаниеДанныхОбъектаУчета(НаборОбъектовУчета, ПараметрыФормирования);
	
	Если ОписаниеДанных.ОшибкаФормированияВПрикладнойЧасти Тогда 
		ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
		ОписаниеОшибки.ОписаниеОбъектаУчета.Организация = ПараметрыДокумента.Организация;
		ОписаниеОшибки.ОписаниеОбъектаУчета.ТипДокумента = СодержаниеДокумента.ТипДокумента;
		ОписаниеОшибки.ВидДокумента = ПараметрыДокумента.ВидДокумента;
		
		ОшибкаФормированияВПрикладнойЧасти = Новый Структура;
		ОшибкаФормированияВПрикладнойЧасти.Вставить("ЭлектронныйДокумент", ПараметрыДокумента.Ссылка); 
		ОписаниеОшибки.ОшибкаФормированияВПрикладнойЧасти = ОшибкаФормированияВПрикладнойЧасти;	
		
		ОшибкиФормирования.Добавить(ОписаниеОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	СообщениеОбъект = СоздатьОтветноеСообщениеПоУчетнымДанным(СвойстваОсновногоФайла, ПараметрыДокумента,
		ОписаниеДанных.Данные, ОшибкиФормирования);
	
	Возврат СообщениеОбъект;
	
КонецФункции

// Параметры:
//  СвойстваОсновногоФайла - см. НовыеСвойстваОсновногоФайлаДляФормированияОтветного
//  ПараметрыДокумента - ВыборкаИзРезультатаЗапроса,Структура:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.УчастникЭДО
//  * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторКонтрагента - Строка
//  ДанныеОбъектаУчета - ДеревоЗначений
//  ОшибкиФормирования - Массив из см. ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования
// 
// Возвращаемое значение:
//  - Неопределено
//  - ДокументОбъект.СообщениеЭДО
Функция СоздатьОтветноеСообщениеПоУчетнымДанным(СвойстваОсновногоФайла, ПараметрыДокумента, ДанныеОбъектаУчета, ОшибкиФормирования)
	
	СодержаниеОсновногоФайла = СвойстваОсновногоФайла.Содержание;
	ФорматОтветногоФайла = ФорматыЭДО.ФорматОтветногоТитула(СодержаниеОсновногоФайла.Формат);
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	Если (МодульОбменСГИСЭПД <> Неопределено 
		И МодульОбменСГИСЭПД.ЭтоТипРегламентаЭПД(ПараметрыДокумента.ТипРегламента)) Тогда	
		ОписаниеСообщения = МодульОбменСГИСЭПД.ОписаниеСообщенияОтправителя(ПараметрыДокумента.Ссылка);
	ИначеЕсли ТипЗнч(ДанныеОбъектаУчета) = Тип("ДеревоЗначений") И Не ЗначениеЗаполнено(ДанныеОбъектаУчета.Строки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОписаниеСообщения = Неопределено Тогда
		ОписаниеСообщения = ОписаниеСообщенияПолучателя(ДанныеОбъектаУчета, ПараметрыДокумента,
			СвойстваОсновногоФайла, ФорматОтветногоФайла);
	КонецЕсли;

	СвойстваДокументовПоФорматам = СвойстваОсновногоФайла.Содержание.СвойстваДокументовПоФорматам;
	Если СвойстваДокументовПоФорматам.Свойство("АктОРасхождениях") 
		И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СвойстваДокументовПоФорматам.АктОРасхождениях, 
			"ФормируютсяИтогиПриемки", Ложь) Тогда

		ВариантыФормирования = ФорматыЭДО.ВариантыФормированияИтоговПриемки();
		ВариантФормированияИтоговПриемки = СвойстваДокументовПоФорматам.АктОРасхождениях.ВариантФормированияИтоговПриемки;
		
		Если ВариантФормированияИтоговПриемки = 
				ВариантыФормирования.ПродавцомФормируютсяДопСведенияОСогласииНесогласииСРезультатамиПриемки
				Или ВариантФормированияИтоговПриемки = ВариантыФормирования.ПродавцомФормируютсяДопСведенияИные Тогда
			
			НастройкиОтправки = НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки();
			НастройкиОтправки.ВидДокумента 				= ПараметрыДокумента.ВидДокумента; 
			НастройкиОтправки.ИдентификаторОтправителя 	= ПараметрыДокумента.ИдентификаторОрганизации;
			НастройкиОтправки.ИдентификаторПолучателя 	= ПараметрыДокумента.ИдентификаторКонтрагента;
			НастройкиОтправки.Отправитель 				= ПараметрыДокумента.Организация;
			НастройкиОтправки.Получатель 				= ПараметрыДокумента.Контрагент;
			НастройкиОтправки.СпособОбмена 				= ПараметрыДокумента.СпособОбмена;
			НастройкиОтправки.Договор 					= ПараметрыДокумента.ДоговорКонтрагента;
			
			ФорматыФНС = ФорматыЭДО_ФНС.ПоддерживаемыеФорматы();
			Формат = ФорматыФНС.АктОРасхождениях.ДополнительныеСведения;
			
			ФорматыЭДО_ФНС.ДополнитьДанныеОбъектаУчетаСведениямиФайла(ДанныеОбъектаУчета, СвойстваОсновногоФайла.Ссылка, Формат);
		
			ЭтоОтветноеСообщение = Истина;
			
			ОписаниеСообщения = 
				ОписаниеДополнительногоСообщенияАктОРасхождениях(
					ДанныеОбъектаУчета, НастройкиОтправки, ПараметрыДокумента.Ссылка, ЭтоОтветноеСообщение);
			Если ОписаниеСообщения = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеСообщения.Данные.ЕстьОшибки Тогда
		ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
		ОписаниеОшибки.ОписаниеОбъектаУчета.Организация = ПараметрыДокумента.Организация;
		ОписаниеОшибки.ОписаниеОбъектаУчета.Контрагент = ПараметрыДокумента.Контрагент;
		ОписаниеОшибки.ОписаниеОбъектаУчета.Договор = ПараметрыДокумента.ДоговорКонтрагента;
		ОписаниеОшибки.ОписаниеОбъектаУчета.ТипДокумента = СодержаниеОсновногоФайла.ТипДокумента;
		ОписаниеОшибки.ОписаниеОбъектаУчета.ПрикладнойТипДокумента = СодержаниеОсновногоФайла.ПрикладнойТипДокумента;
		ОписаниеОшибки.ВидДокумента = ПараметрыДокумента.ВидДокумента;
		ОписаниеОшибки.ОшибкиДанных = ОписаниеСообщения.Данные.Ошибки;
		ОшибкиФормирования.Добавить(ОписаниеОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	СообщениеОбъект = СоздатьСообщение(ОписаниеСообщения, ПараметрыДокумента.Ссылка, ПараметрыДокумента);
	
	Возврат СообщениеОбъект;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Ссылка - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * ИмяФайла - Строка
//  * ДвоичныеДанные - Неопределено,ДвоичныеДанные
//  * Содержание - см. ФорматыЭДО.ПрочитатьСодержаниеДокумента
Функция НовыеСвойстваОсновногоФайлаДляФормированияОтветного()
	Свойства = РаботаСФайламиБЭД.НовоеОписаниеФайла();
	Свойства.Вставить("Ссылка", Справочники.СообщениеЭДОПрисоединенныеФайлы.ПустаяСсылка());
	Свойства.Вставить("Содержание", Неопределено);
	Возврат Свойства;
КонецФункции

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ТекстОшибки - Строка
Процедура ДобавитьОшибкуФорматаОсновногоФайлаДокумента(КонтекстДиагностики, ЭлектронныйДокумент, ТекстОшибки)

	ВидОперации = НСтр("ru = 'Проверка информации отправителя'");
	ВидОшибки = ФорматыЭДО_ФНС.ВидОшибкиНекорректныйФорматИнформацииОтправителя();

	НаборДействий = Новый Соответствие;
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Отклонить);
	ПараметрыВыполненияДействийПоЭДО = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы.Добавить(ЭлектронныйДокумент);
	ДополнительныеПараметрыДействий = Новый Соответствие;
	ДополнительныеПараметрыДействий.Вставить(ЭлектронныйДокумент, ТекстОшибки);
	ПараметрыВыполненияДействийПоЭДО.ДополнительныеПараметрыДействий.Вставить(ЭлектронныйДокумент, ТекстОшибки);
	
	ДополнительныеПараметрыОшибки = Новый Структура;
	ДополнительныеПараметрыОшибки.Вставить("СсылкаНаОбъект", ЭлектронныйДокумент);
	ДополнительныеПараметрыОшибки.Вставить("ДополнительныеДанные", ПараметрыВыполненияДействийПоЭДО);

	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(
		ВидОперации, ВидОшибки, ТекстОшибки, ТекстОшибки, ДополнительныеПараметрыОшибки);
	
	ПодсистемаОбменСКонтрагентами = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемаОбменСКонтрагентами);
	
КонецПроцедуры

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Процедура ДобавитьОшибкуОтсутствияОсновногоФайлаДокумента(КонтекстДиагностики, Действие, ЭлектронныйДокумент)
	ПредставлениеДействия = НРег(Действие);
	ВидОперации = ВидОперацииПриДобавленииОшибки(ПредставлениеДействия);
	ПредставлениеДокумента = ЭлектронныеДокументыЭДО.ПредставлениеДокумента(ЭлектронныйДокумент);
	ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось утвердить электронный документ: %1.'"), ПредставлениеДокумента);
	ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС
		+ НСтр("ru = 'Не найден основной файл электронного документа.'");
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
		ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
		ПодробныйТекстОшибки, ТекстОшибки);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
КонецПроцедуры

#КонецОбласти

#Область Подписать

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ВыполнитьДействиеПодписать(ПараметрыВыполнения, РезультатДействий)
	
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Перечисления.ДействияПоЭДО.Подписать, 0);
	
	ДанныеДляПодписания = ДанныеДокументовДляПодписания(ПараметрыВыполнения, РезультатДействий.КонтекстДиагностики);

	ОбработатьОшибкиДанныхДляПодписания(ДанныеДляПодписания.Ошибки, РезультатДействий.КонтекстДиагностики,
		ПараметрыВыполнения);

	Если ЗначениеЗаполнено(ДанныеДляПодписания.ДанныеДляПростойПодписи) Тогда
		ПодписатьПростойПодписью(ДанныеДляПодписания.ДанныеДляПростойПодписи, РезультатДействий);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеДляПодписания.ДанныеДляПодписанияНаСервере) Тогда
		ПодписатьНаСервере(ДанныеДляПодписания.ДанныеДляПодписанияНаСервере, РезультатДействий);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеДляПодписания.ДанныеДляИнтерактивногоПодписания) Тогда
		РезультатДействий.ПараметрыПодписания = ПараметрыИнтерактивногоПодписания(
			ДанныеДляПодписания.ДанныеДляИнтерактивногоПодписания, ПараметрыВыполнения, РезультатДействий.Итог);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(РезультатДействий.ДокументыДляОбработкиДополнительныхСведений,
		ДанныеДляПодписания.ДокументыДляОбработкиДополнительныхСведений, Истина);

КонецПроцедуры

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. ОбработатьРезультатыЗапросаДанныхСообщенийДляПодписания
Функция ДанныеДокументовДляПодписания(ПараметрыВыполнения, КонтекстДиагностики) Экспорт
	
	Запрос = ЗапросДанныхСообщенийДляПодписания(ПараметрыВыполнения, КонтекстДиагностики);
	
	Если Запрос = Неопределено Тогда
		Возврат НовыйРезультатОбработкиДанныхДляПодписания();
	КонецЕсли;
	
	РезультатыЗапроса = РезультатыЗапросаДанныхСообщенийДляПодписания(Запрос);
	
	РезультатОбработки = ОбработатьРезультатыЗапросаДанныхСообщенийДляПодписания(
		ПараметрыВыполнения, РезультатыЗапроса, КонтекстДиагностики);

	Возврат РезультатОбработки;

КонецФункции

// Формирует запрос данных сообщений для подписания.
// 
// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Неопределено, Запрос - Запрос данных сообщений для подписания
Функция ЗапросДанныхСообщенийДляПодписания(ПараметрыВыполнения, КонтекстДиагностики)

	ОписанияЗапросов = Новый Массив;

	ОбъектыДействий = ИнтерфейсДокументовЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО();

	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ОбъектыДействий.Сообщения, ПараметрыВыполнения.ОбъектыДействий.Сообщения);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ОбъектыДействий.ОбъектыУчета, ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ОбъектыДействий.ЭлектронныеДокументы, ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы);

	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		ДокументыПакетов = ДокументыПакетовДляПодписания(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов,
			КонтекстДиагностики);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыДействий.ЭлектронныеДокументы, ДокументыПакетов, Истина);
	КонецЕсли;

	Если ЭлектронныеДокументыЭДОКлиентСервер.ОтсутствуютОбъектыДействий(ОбъектыДействий) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ОписанияЗапросов.Добавить(ЗапросСообщенийДляПодписания("СообщенияДляОбработки", ОбъектыДействий));

	Отбор = КриптографияБЭД.НовыйОтборСертификатов();
	Отбор.Отпечатки = "&ОтпечаткиСертификатов";
	Отбор.ДоступныеТекущемуПользователю = Истина;
	Если Не ПараметрыВыполнения.ОтпечаткиСертификатов.Облако.Доступность Тогда
		Отбор.Облачные = Ложь;
	КонецЕсли;
	ОписанияЗапросов.Добавить(КриптографияБЭД.ЗапросДействующихСертификатов("ДоступныеСертификаты", Отбор));
	
	Отбор = СинхронизацияЭДО.НовыйОтборСертификатовУчетныхЗаписей();
	Отбор.УчетныеЗаписи = "ВЫБРАТЬ РАЗЛИЧНЫЕ ИдентификаторОрганизации ИЗ СообщенияДляОбработки";
	ОписанияЗапросов.Добавить(СинхронизацияЭДО.ЗапросСертификатовУчетныхЗаписей("СертификатыУчетныхЗаписей", Отбор));
	
	Отбор = КриптографияБЭД.НовыйОтборПодписываемыхВидовДокументов();
	Отбор.Сертификаты = "ВЫБРАТЬ Ссылка ИЗ ДоступныеСертификаты";
	Отбор.ВидыДокументов = "ВЫБРАТЬ РАЗЛИЧНЫЕ ВидСообщения ИЗ СообщенияДляОбработки";
	ОписанияЗапросов.Добавить(КриптографияБЭД.ЗапросПодписываемыхВидовДокументов("ПодписываемыеВидыДокументов", Отбор));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоступныеСертификаты.Ссылка КАК Сертификат,
		|	ДоступныеСертификаты.Отпечаток КАК Отпечаток,
		|	ДоступныеСертификаты.Программа КАК Программа,
		|	ДоступныеСертификаты.Организация КАК Организация,
		|	ПодписываемыеВидыДокументов.ВидДокумента КАК ВидДокумента,
		|	ПодписываемыеВидыДокументов.Использовать КАК Использовать,
		|	ЕСТЬNULL(СертификатыУчетныхЗаписей.ИдентификаторЭДО, """") КАК ИдентификаторОрганизации,
		|	ЕСТЬNULL(СертификатыУчетныхЗаписей.Доверенность,
		|		ЗНАЧЕНИЕ(Справочник.МашиночитаемыеДоверенностиОрганизаций.ПустаяСсылка)) КАК Доверенность
		|ИЗ
		|	ДоступныеСертификаты КАК ДоступныеСертификаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодписываемыеВидыДокументов КАК ПодписываемыеВидыДокументов
		|		ПО ДоступныеСертификаты.Ссылка = ПодписываемыеВидыДокументов.Сертификат
		|		ЛЕВОЕ СОЕДИНЕНИЕ СертификатыУчетныхЗаписей КАК СертификатыУчетныхЗаписей
		|		ПО ДоступныеСертификаты.Ссылка = СертификатыУчетныхЗаписей.Сертификат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщенияДляОбработки.Ссылка КАК Ссылка,
		|	СообщенияДляОбработки.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщенияДляОбработки.Направление КАК Направление,
		|	СообщенияДляОбработки.Дата КАК Дата,
		|	СообщенияДляОбработки.ВидСообщения КАК ВидСообщения,
		|	СообщенияДляОбработки.Организация КАК Организация,
		|	СообщенияДляОбработки.Контрагент КАК Контрагент,
		|	СообщенияДляОбработки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	СообщенияДляОбработки.ФорматОсновногоТитула КАК ФорматОсновногоТитула,
		|	&ОрганизацияИНН КАК ОрганизацияИНН,
		|	СообщенияДляОбработки.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	СообщенияДляОбработки.ВидПодписи КАК ВидПодписи,
		|	СообщенияДляОбработки.ВидДокумента КАК ВидДокумента,
		|	СообщенияДляОбработки.НомерДокумента КАК НомерДокумента,
		|	СообщенияДляОбработки.ДатаДокумента КАК ДатаДокумента,
		|	СообщенияДляОбработки.ОсновнойФайл КАК ПрисоединенныйФайл,
		|	ОбъектыДляПодписания.Организация КАК ОрганизацияДляПодписания,
		|	ОбъектыДляПодписания.Подписант КАК Подписант,
		|	ОбъектыДляПодписания.Сертификат КАК Сертификат,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла КАК ПолноеИмяФайла,
		|	ПрисоединенныеФайлы.ПодписанЭП КАК ПодписанЭП,
		|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента,
		|	ВидыДокументовЭДО.ПрикладнойТипДокумента КАК ПрикладнойТипДокумента,
		|	&ЭтоОсновнойВидДокумента КАК ЭтоОсновнойВидДокумента,
		|	&ОрганизацияДляПодписанияИНН КАК ОрганизацияДляПодписанияИНН,
		|	ВЫБОР
		|		КОГДА СообщенияДляОбработки.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПолеСортировки,
		|	СообщенияДляОбработки.ДатаПодписания КАК ДатаПодписания,
		|	СообщенияДляОбработки.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СообщенияДляОбработки.ЭлектронныйДокумент.ТипРегламента КАК ТипРегламента
		|ИЗ
		|	СообщенияДляОбработки КАК СообщенияДляОбработки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеПодписанияЭД КАК ОбъектыДляПодписания
		|		ПО СообщенияДляОбработки.Ссылка = ОбъектыДляПодписания.Объект
		|		И ОбъектыДляПодписания.Текущий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО СообщенияДляОбработки.ОсновнойФайл = ПрисоединенныеФайлы.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО СообщенияДляОбработки.ВидСообщения = ВидыДокументовЭДО.Ссылка";
	
	ИмяРеквизитаИНН = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	ТекстПоляОрганизацииИНН = СтрШаблон("СообщенияДляОбработки.Организация.%1", ИмяРеквизитаИНН);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОрганизацияИНН", ТекстПоляОрганизацииИНН);
	ТекстПоляОрганизацииИНН = СтрШаблон("ОбъектыДляПодписания.Организация.%1", ИмяРеквизитаИНН);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОрганизацияДляПодписанияИНН", ТекстПоляОрганизацииИНН);
	
	Запрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, ОписанияЗапросов);
	
	ВсеОтпечатки = КриптографияБЭД.ПолучитьВсеОтпечаткиСертификатов(ПараметрыВыполнения.ОтпечаткиСертификатов);
	Запрос.УстановитьПараметр("ОтпечаткиСертификатов", ВсеОтпечатки);
		
	ИспользуютсяВнутренниеДокументы = НастройкиЭДО.ИспользуютсяВнутренниеДокументы();
	Если НЕ ИспользуютсяВнутренниеДокументы Тогда
		Запрос.УстановитьПараметр("ЭтоОсновнойВидДокумента", Ложь);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЭтоОсновнойВидДокумента",
			"НЕ НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента ЕСТЬ NULL");
	
		Запрос.Текст = Запрос.Текст + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВнутреннегоЭДО КАК НастройкиВнутреннегоЭДО
			|		ПО СообщенияДляОбработки.Организация = НастройкиВнутреннегоЭДО.Организация
			|		И СообщенияДляОбработки.ВидДокумента = НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента
			|		И НастройкиВнутреннегоЭДО.ЭтоОсновнойВидДокумента";		
	КонецЕсли;
	
	Если ПараметрыВыполнения.ОбработатьТолькоИзвещения Тогда
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|		ВидыДокументовЭДО.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.ИзвещениеОПолучении)";
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Параметры:
//  ИмяВременнойТаблицы - Строка
//  ОбъектыДействий - Структура:
//  * ОбъектыУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Сообщения - Массив из ДокументСсылка.СообщениеЭДО
// 
// Возвращаемое значение:
//  См. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросСообщенийДляПодписания(ИмяВременнойТаблицы, ОбъектыДействий)
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	
	МеткаВременнойТаблицы = "ПОМЕСТИТЬ ИмяВременнойТаблицы";
	ЗначениеВременнойТаблицы = "";
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ЗначениеВременнойТаблицы = СтрЗаменить(МеткаВременнойТаблицы, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	КонецЕсли;
	
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ОтборСостояниеСообщения", Перечисления.СостоянияСообщенийЭДО.Подписание);
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ВидПодписиУсиленнаяКвалифицированная",
		Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная);
	
	ТекстыЗапросов = Новый Массив;
	ТекстыВспомогательныхЗапросов = Новый Массив;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.ОбъектыУчета) Тогда
		
		ОтборДокументов = ИнтеграцияЭДО.НовыйОтборАктуальныхЭлектронныхДокументов();
		ОтборДокументов.ОбъектыУчета = "&ОтборОбъектыУчета";
		ТекстыВспомогательныхЗапросов.Добавить(ИнтеграцияЭДО.ЗапросАктуальныхЭлектронныхДокументов(
			"ЭлектронныеДокументыОбъектовУчета", ОтборДокументов).Текст);
		
		ОписаниеЗапроса.СлужебныеПараметры.Вставить("ОтборОбъектыУчета", ОбъектыДействий.ОбъектыУчета);
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	&ПоляВыбораИсходящийЭДО
			|ПОМЕСТИТЬ ИмяВременнойТаблицы
			|ИЗ
			|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭлектронныеДокументыОбъектовУчета КАК ЭлектронныеДокументыОбъектовУчета
			|		ПО ЭлектронныйДокументИсходящийЭДО.Ссылка = ЭлектронныеДокументыОбъектовУчета.ЭлектронныйДокумент
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
			|		ПО ЭлектронныйДокументИсходящийЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
			|		И СообщениеЭДО.Состояние = &ОтборСостояниеСообщения
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&ПоляВыбораВходящийЭДО
			|ИЗ
			|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭлектронныеДокументыОбъектовУчета КАК ЭлектронныеДокументыОбъектовУчета
			|		ПО ЭлектронныйДокументВходящийЭДО.Ссылка = ЭлектронныеДокументыОбъектовУчета.ЭлектронныйДокумент
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
			|		ПО ЭлектронныйДокументВходящийЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
			|		И СообщениеЭДО.Состояние = &ОтборСостояниеСообщения";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, МеткаВременнойТаблицы, ЗначениеВременнойТаблицы);
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.ЭлектронныеДокументы) Тогда
		
		ОписаниеЗапроса.СлужебныеПараметры.Вставить("ОтборЭлектронныеДокументы", ОбъектыДействий.ЭлектронныеДокументы);
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	&ПоляВыбораИсходящийЭДО
			|ПОМЕСТИТЬ ИмяВременнойТаблицы
			|ИЗ
			|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
			|		ПО ЭлектронныйДокументИсходящийЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
			|		И СообщениеЭДО.Состояние = &ОтборСостояниеСообщения
			|ГДЕ
			|	ЭлектронныйДокументИсходящийЭДО.Ссылка В (&ОтборЭлектронныеДокументы)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&ПоляВыбораВходящийЭДО
			|ИЗ
			|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
			|		ПО ЭлектронныйДокументВходящийЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
			|		И СообщениеЭДО.Состояние = &ОтборСостояниеСообщения
			|ГДЕ
			|	ЭлектронныйДокументВходящийЭДО.Ссылка В (&ОтборЭлектронныеДокументы)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, МеткаВременнойТаблицы,
			?(ЗначениеЗаполнено(ТекстыЗапросов), "", ЗначениеВременнойТаблицы));
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.Сообщения) Тогда
		
		ОписаниеЗапроса.СлужебныеПараметры.Вставить("ОтборСообщения", ОбъектыДействий.Сообщения);
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	&ПоляВыбораИсходящийЭДО
			|ПОМЕСТИТЬ ИмяВременнойТаблицы
			|ИЗ
			|	Документ.СообщениеЭДО КАК СообщениеЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
			|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка
			|		И СообщениеЭДО.Состояние = &ОтборСостояниеСообщения
			|ГДЕ
			|	СообщениеЭДО.Ссылка В (&ОтборСообщения)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&ПоляВыбораВходящийЭДО
			|ИЗ
			|	Документ.СообщениеЭДО КАК СообщениеЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
			|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
			|		И СообщениеЭДО.Состояние = &ОтборСостояниеСообщения
			|ГДЕ
			|	СообщениеЭДО.Ссылка В (&ОтборСообщения)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, МеткаВременнойТаблицы,
			?(ЗначениеЗаполнено(ТекстыЗапросов), "", ЗначениеВременнойТаблицы));
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, "
		|
		|ОБЪЕДИНИТЬ
		|");
		
	ПоляВыбораИсходящийЭДО = 
		"	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.Направление КАК Направление,
		|	СообщениеЭДО.ОсновнойФайл КАК ОсновнойФайл,
		|	СообщениеЭДО.Дата КАК Дата,
		|	СообщениеЭДО.ВидСообщения КАК ВидСообщения,
		|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента КАК ВидДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ЭлектронныйДокументИсходящийЭДО.Организация КАК Организация,
		|	ЭлектронныйДокументИсходящийЭДО.ВидПодписи КАК ВидПодписи,
		|	ЭлектронныйДокументИсходящийЭДО.НомерДокумента КАК НомерДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.ДатаДокумента КАК ДатаДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументИсходящийЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ЭлектронныйДокументИсходящийЭДО.ФорматОсновногоТитула КАК ФорматОсновногоТитула,
		|	ЭлектронныйДокументИсходящийЭДО.ДатаПодписания КАК ДатаПодписания";
	
	ПоляВыбораВходящийЭДО = 
		"	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.Направление КАК Направление,
		|	СообщениеЭДО.ОсновнойФайл КАК ОсновнойФайл,
		|	СообщениеЭДО.Дата КАК Дата,
		|	СообщениеЭДО.ВидСообщения КАК ВидСообщения,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента КАК ВидДокумента,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация,
		|	&ВидПодписиУсиленнаяКвалифицированная КАК ВидПодписи,
		|	ЭлектронныйДокументВходящийЭДО.НомерДокумента КАК НомерДокумента,
		|	ЭлектронныйДокументВходящийЭДО.ДатаДокумента КАК ДатаДокумента,
		|	ЭлектронныйДокументВходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументВходящийЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ЭлектронныйДокументВходящийЭДО.ФорматОсновногоТитула КАК ФорматОсновногоТитула,
		|	ЭлектронныйДокументВходящийЭДО.ДатаПодписания КАК ДатаПодписания";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыбораИсходящийЭДО", ПоляВыбораИсходящийЭДО);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыбораВходящийЭДО", ПоляВыбораВходящийЭДО);
	
	Если ЗначениеЗаполнено(ТекстыВспомогательныхЗапросов) Тогда
		ТекстыВспомогательныхЗапросов.Добавить(ТекстЗапроса);
		ОписаниеЗапроса.Текст = СтрСоединить(ТекстыВспомогательныхЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Иначе
		ОписаниеЗапроса.Текст = ТекстЗапроса;
	КонецЕсли;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Параметры:
//  ПакетыДокументов - Массив из УникальныйИдентификатор 
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция ДокументыПакетовДляПодписания(ПакетыДокументов, КонтекстДиагностики)
	
	ПредставлениеДействия = НРег(Строка(Перечисления.ДействияПоЭДО.Подписать));
	ВидОперации =  СтрШаблон(НСтр("ru = 'Действие %1'"), ПредставлениеДействия);
	Возврат ПакетыДокументовЭДО.ДокументыОднородныхПакетов(ПакетыДокументов, КонтекстДиагностики, ВидОперации);
	
КонецФункции

// Параметры:
//  Запрос - Запрос
// 
// Возвращаемое значение:
//  Структура:
//  * Сертификаты - РезультатЗапроса
//  * ДанныеСообщений - РезультатЗапроса 
Функция РезультатыЗапросаДанныхСообщенийДляПодписания(Запрос)
	МассивРезультатов = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = МассивРезультатов.Количество();
	РезультатыЗапроса = Новый Структура;
	РезультатыЗапроса.Вставить("Сертификаты", МассивРезультатов[КоличествоРезультатов - 2]);
	РезультатыЗапроса.Вставить("ДанныеСообщений", МассивРезультатов[КоличествоРезультатов - 1]);
	Возврат РезультатыЗапроса;
КонецФункции

// Возвращаемое значение:
//  Структура -  Новый результат обработки данных для подписания:
//  * Ошибки - см. НовоеОписаниеОшибокОбработкиДанныхПриПодписании
//  * ДанныеДляПростойПодписи - Массив из см. ДанныеСообщенияДляПростойПодписи
//  * ДанныеДляИнтерактивногоПодписания - Массив из см. ОписаниеНабораДанныхДляИнтерактивногоПодписания 
//  * ДанныеДляПодписанияНаСервере - Массив из см. ОписаниеНабораДанныхДляПодписанияНаСервере
//  * ДокументыДляОбработкиДополнительныхСведений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
Функция НовыйРезультатОбработкиДанныхДляПодписания()
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", НовоеОписаниеОшибокОбработкиДанныхПриПодписании());
	Результат.Вставить("ДанныеДляПростойПодписи", Новый Массив);
	Результат.Вставить("ДанныеДляИнтерактивногоПодписания", Новый Массив);
	Результат.Вставить("ДанныеДляПодписанияНаСервере", Новый Массив);
	Результат.Вставить("ДокументыДляОбработкиДополнительныхСведений", Новый Соответствие);
	Возврат Результат;
КонецФункции

// Извлекает сохраненные пароли для массива сертификатов и устанавливает их для каждого сертификата.
// 
// Параметры:
//  НаборСертификатов - Структура - Набор сертификатов:
// * ИспользоватьНаСервере - Булево - Обработка подписания будет происходить на сервере без запроса пользователя
// * ЕстьОшибки - Булево 
// * ДанныеСертификатов - Массив из Структура:
//     ** Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//     ** Отпечаток - Строка
//     ** Программа - Строка
//     ** Пароль - Строка
//     ** Организация - ОпределяемыйТип.УчастникЭДО
// * ПаролиСертификатов - Соответствие из КлючИЗначение:
//     ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//     ** Значение - Строка - Пароль
// 
Процедура УстановитьПаролиСертификатов(НаборСертификатов)

	ДанныеСертификатов = НаборСертификатов.ДанныеСертификатов;

	Сертификаты = Новый Массив;
	Для Каждого ДанныеСертификата Из ДанныеСертификатов Цикл 
		Сертификаты.Добавить(ДанныеСертификата.Ссылка);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Истина);
	ПаролиСертификатов = КриптографияБЭД.ПаролиСертификатов(Сертификаты);
	УстановитьПривилегированныйРежим(Ложь);
	
	НаборСертификатов.ПаролиСертификатов = ПаролиСертификатов;
	
	Для Каждого ДанныеСертификата Из ДанныеСертификатов Цикл
		Сертификат = ДанныеСертификата.Ссылка;
		Пароль = ПаролиСертификатов[Сертификат];
		Если Пароль <> Неопределено Тогда
			ДанныеСертификата.Пароль = Пароль;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ДанныеСертификатов - Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * Значение - см. СинхронизацияЭДО.НовыеДанныеСертификата
// 
// Возвращаемое значение:
//  см. КриптографияБЭД.ПаролиСертификатов
Функция ПаролиСертификатов(ДанныеСертификатов)
	Результат = КриптографияБЭД.НовыеПаролиСертификатов();
	Для Каждого ДанныеСертификата Из ДанныеСертификатов Цикл

		Если ДанныеСертификата.Значение.ПарольПолучен 
			И ДанныеСертификата.Значение.ПарольПользователя <> Неопределено Тогда
			
			Результат.Вставить(ДанныеСертификата.Ключ, ДанныеСертификата.Значение.ПарольПользователя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Проверят возможность подписания набором сертификатов на сервере без необходимости выбора сертификата пользователем,
// серверное подписание доступно только если пользователю доступен единственный сертификат, 
// который установлен на сервере и пароль для сертификата сохранен
// 
// Параметры:
//  НаборСертификатов - Структура - Набор сертификатов:
// * ИспользоватьНаСервере - Булево - Обработка подписания будет происходить на сервере без запроса пользователя
// * ЕстьОшибки - Булево 
// * ДанныеСертификатов - Массив из Структура:
//     ** Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//     ** Отпечаток - Строка
//     ** Программа - Строка
//     ** Пароль - Строка
//     ** Организация - ОпределяемыйТип.УчастникЭДО
// * ПаролиСертификатов - Соответствие из КлючИЗначение:
//     ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//     ** Значение - Строка - Пароль
//  ОтпечаткиНаСервере - См. КриптографияБЭДСлужебный.ПолучитьОтпечаткиСертификатовНаСервере
//
Функция ИспользоватьНаборСертификатовНаСервере(НаборСертификатов, ОтпечаткиНаСервере)
	
	ДанныеСертификатов = НаборСертификатов.ДанныеСертификатов;
	
	Если ДанныеСертификатов.Количество() = 1 Тогда
		Если ЗначениеЗаполнено(ДанныеСертификатов[0].Пароль)
			И ЗначениеЗаполнено(ОтпечаткиНаСервере) 
			И ОтпечаткиНаСервере.Найти(ДанныеСертификатов[0].Отпечаток) <> Неопределено Тогда
				Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Обрабатывает результаты запроса данных сообщений для подписания.
// 
// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатыЗапроса - см. РезультатыЗапросаДанныхСообщенийДляПодписания
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. НовыйРезультатОбработкиДанныхДляПодписания
//  
Функция ОбработатьРезультатыЗапросаДанныхСообщенийДляПодписания(ПараметрыВыполнения, РезультатыЗапроса, КонтекстДиагностики)
	
	Результат = НовыйРезультатОбработкиДанныхДляПодписания();
	
	Ошибки = Результат.Ошибки;
	ДанныеДляПростойПодписи = Результат.ДанныеДляПростойПодписи;
	
	СертификатыДляПодписания = РезультатыЗапроса.Сертификаты.Выгрузить();
	
	ОтсутствуютСертификаты = Не ЗначениеЗаполнено(СертификатыДляПодписания);
	ОтпечаткиНаСервере = ПараметрыВыполнения.ОтпечаткиСертификатов.Сервер.Отпечатки;
	ЕстьОшибкаПолученияОтпечатков = Ложь;
	Если ОтсутствуютСертификаты Тогда
		ЕстьОшибкаПолученияОтпечатков = КриптографияБЭД.ЕстьОшибкаПолученияОтпечатков(
			ПараметрыВыполнения.ОтпечаткиСертификатов);
	КонецЕсли;
	
	ДанныеСообщений = РезультатыЗапроса.ДанныеСообщений.Выгрузить();
	ДанныеСообщений.Свернуть("ВидДокумента, Организация, Контрагент, ДоговорКонтрагента");
	ИдентификаторыУчастниковОбмена = НастройкиОтправкиЭДО.ИдентификаторыУчастниковОбмена(ДанныеСообщений);
	
	НаборыСертификатов = Новый Соответствие;
	НаборыПараметровСообщенийПоСертификатам = Новый Соответствие;
	КэшПоискаНаборовСертификатов = Новый Соответствие;
	ЕстьСообщенияБезДоступныхСертификатов = Ложь;
	ПрисоединенныеФайлыСообщений = Новый Массив;
	
	ТекущиеПодписанты = Новый Массив(3);
	ТекущиеПодписанты[0] = Пользователи.АвторизованныйПользователь();
	ТекущиеПодписанты[1] = Пользователи.СсылкаНеуказанногоПользователя();
	ТекущиеПодписанты[2] = ИнтеграцияБСПБЭД.ПустаяСсылкаНаПользователя();
	
	ОбработанныеСообщения = Новый Соответствие;
	ТребуетсяПроверкаОбработанныхСообщений = Ложь;
	СоответствияОрганизацийПодписантов = Новый Соответствие();
	
	АктыОРасхожденияхДляПодписания = Новый Массив; // Массив из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
	ДокументыДопСведенияБезПодписейПоАктам = Новый Массив; // Массив из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
	
	Выборка = РезультатыЗапроса.ДанныеСообщений.Выбрать();
	
	СтруктураПоиска = Новый Структура("ТипДокумента", Перечисления.ТипыДокументовЭДО.ВозвратТоваровМеждуОрганизациями);
	Пока Выборка.НайтиСледующий(СтруктураПоиска) Цикл
		Если СоответствияОрганизацийПодписантов.Получить(Выборка.ЭлектронныйДокумент) <> Истина Тогда
			СоответствияОрганизацийПодписантов.Вставить(Выборка.ЭлектронныйДокумент,
				Выборка.Организация = Выборка.ОрганизацияДляПодписания);
		КонецЕсли;
	КонецЦикла;
	Выборка.Сбросить();
	
	Пока Выборка.Следующий() Цикл
		
		СообщениеОбработано = ОбработанныеСообщения[Выборка.Ссылка];
		Если СообщениеОбработано = Истина
			Или Выборка.ТипДокумента = Перечисления.ТипыДокументовЭДО.ВозвратТоваровМеждуОрганизациями
				И СоответствияОрганизацийПодписантов.Получить(Выборка.ЭлектронныйДокумент) = Истина
				И Выборка.Организация <> Выборка.ОрганизацияДляПодписания
			Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки
			И ТипЗнч(Выборка.ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящийЭДО")
			И Не ЗначениеЗаполнено(Выборка.ДатаПодписания) Тогда
			ДокументыДопСведенияБезПодписейПоАктам.Добавить(Выборка.ЭлектронныйДокумент);
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
			И Выборка.Направление = Перечисления.НаправленияЭДО.Исходящий 
			И Выборка.ТипДокумента = Перечисления.ТипыДокументовЭДО.АктОРасхождениях Тогда
			АктыОРасхожденияхДляПодписания.Добавить(Выборка.ЭлектронныйДокумент);
		КонецЕсли;
		
		СообщениеДоступноПользователю = ТекущиеПодписанты.Найти(Выборка.Подписант) <> Неопределено;
		
		Если СообщениеОбработано = Неопределено
			ИЛИ СообщениеДоступноПользователю Тогда
			ОбработанныеСообщения.Вставить(Выборка.Ссылка, СообщениеДоступноПользователю);
		КонецЕсли;
		
		Если Не СообщениеДоступноПользователю Тогда
			ТребуетсяПроверкаОбработанныхСообщений = Истина;
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая Тогда
			ДанныеСообщения = ДанныеСообщенияДляПростойПодписи(Выборка);
			ДанныеДляПростойПодписи.Добавить(ДанныеСообщения);
			Продолжить;
		КонецЕсли;
		
		Если ОтсутствуютСертификаты Тогда
			Если ЕстьОшибкаПолученияОтпечатков Тогда
				Ошибки.ЕстьОшибкаКриптографииПоСообщениямДляПодписания = Истина;
			Иначе
				НоваяСтрока = Ошибки.УчетныеЗаписиБезСертификатов.Добавить();
				НоваяСтрока.ИдентификаторЭДО = Выборка.ИдентификаторОрганизации;
				НоваяСтрока.Сообщение = Выборка.Ссылка;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		НаборСертификатов = НайтиСоздатьНаборСертификатовДляПодписания(Выборка, НаборыСертификатов,
			СертификатыДляПодписания, ОтпечаткиНаСервере, КэшПоискаНаборовСертификатов, Ошибки);
		
		Если Не ЗначениеЗаполнено(НаборСертификатов.ДанныеСертификатов) Тогда
			ЕстьСообщенияБезДоступныхСертификатов = Истина;
			Если Не НаборСертификатов.ЕстьОшибки Тогда
				НоваяСтрока = Ошибки.УчетныеЗаписиБезСертификатов.Добавить();
				НоваяСтрока.ИдентификаторЭДО = Выборка.ИдентификаторОрганизации;
				НоваяСтрока.Сообщение = Выборка.Ссылка;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если (Выборка.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
			И Выборка.Направление = Перечисления.НаправленияЭДО.Входящий)
			ИЛИ (Выборка.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя
			И Выборка.Направление = Перечисления.НаправленияЭДО.Исходящий) Тогда
			
			ЭлектронныйДокумент = ЭлектронныйДокументСообщенияЭДО(Выборка.Ссылка);
			ПодписиСОшибкамиМЧД = МашиночитаемыеДоверенности.ПодписиСОшибкамиМЧД(
				ОсновнойФайлИнформацииОтправителя(ЭлектронныйДокумент));
			
			Если ПодписиСОшибкамиМЧД.Количество() > 0 Тогда
				
				ДобавитьОшибкуПодписиМЧД(Выборка.ЭлектронныйДокумент,
					ПодписиСОшибкамиМЧД, Перечисления.ДействияПоЭДО.Подписать, КонтекстДиагностики);
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выборка.Направление = Перечисления.НаправленияЭДО.Исходящий
			И РегламентыЭДО.ЭтоЭлементРегламентаОтправителя(Выборка.ТипЭлементаРегламента) Тогда
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ВидДокумента", Выборка.ВидДокумента);
			СтруктураОтбора.Вставить("Организация", Выборка.Организация);
			СтруктураОтбора.Вставить("Контрагент", Выборка.Контрагент);
			СтруктураОтбора.Вставить("ДоговорКонтрагента", Выборка.ДоговорКонтрагента);
			НайденныеСтроки = ИдентификаторыУчастниковОбмена.НайтиСтроки(СтруктураОтбора);
			
			Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
				
				НайденнаяСтрока = НайденныеСтроки[0];
				ОператорОтправителя = РаботаСАбонентамиЭДОКлиентСервер.ОператорАбонента(
					НайденнаяСтрока.ИдентификаторОтправителя);
				ОператорПолучателя = РаботаСАбонентамиЭДОКлиентСервер.ОператорАбонента(
					НайденнаяСтрока.ИдентификаторПолучателя);
				
				РезультатПроверки = ФорматыЭДО.ФорматПоддержанОператорами(
					ОператорОтправителя, ОператорПолучателя, Выборка.ФорматОсновногоТитула, Выборка.ТипРегламента);
				Если РезультатПроверки <> Неопределено Тогда
					Если Не РезультатПроверки.ФорматПоддержанОператоромОтправителя 
						Или Не РезультатПроверки.ФорматПоддержанОператоромПолучателя Тогда
							НоваяСтрока = Ошибки.СообщенияВФорматеНеПоддержанномОператором.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатПроверки);
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,
								"НомерДокумента, ДатаДокумента, ВидДокумента, ТипДокумента");
							НоваяСтрока.Сообщение = Выборка.Ссылка;
							Продолжить;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НаборПараметровСообщений = НаборыПараметровСообщенийПоСертификатам[НаборСертификатов];
		Если НаборПараметровСообщений = Неопределено Тогда
			НаборПараметровСообщений = Новый Массив;
			НаборыПараметровСообщенийПоСертификатам.Вставить(НаборСертификатов, НаборПараметровСообщений);
		КонецЕсли;
		
		ПараметрыПодписанияСообщения = ПараметрыПодписанияСообщения(Выборка);
		
		НаборПараметровСообщений.Добавить(ПараметрыПодписанияСообщения);
		
		ПрисоединенныеФайлыСообщений.Добавить(Выборка.ПрисоединенныйФайл);
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(НаборыПараметровСообщенийПоСертификатам)
		И ЕстьСообщенияБезДоступныхСертификатов Тогда
		Ошибки.ОтсутствуютДоступныеСертификаты = Истина;
	КонецЕсли;
	
	Если ТребуетсяПроверкаОбработанныхСообщений Тогда
		Для Каждого ЭлементКоллекции Из ОбработанныеСообщения Цикл
			Если ЭлементКоллекции.Значение Тогда
				Продолжить;
			КонецЕсли;
			Ошибки.НедоступныеСообщения.Добавить(ЭлементКоллекции.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	ДвоичныеДанныеФайлов = РаботаСФайлами.ДвоичныеДанныеФайлов(ПрисоединенныеФайлыСообщений);
	
	Для Каждого ПараметрыСообщенийПоСертификатам Из НаборыПараметровСообщенийПоСертификатам Цикл
		
		Если НаборСертификатов.ИспользоватьНаСервере Тогда
			
			ОписаниеНабораДанных = ОписаниеНабораДанныхДляПодписанияНаСервере(
				ПараметрыСообщенийПоСертификатам, ДвоичныеДанныеФайлов, Ошибки);
			Результат.ДанныеДляПодписанияНаСервере.Добавить(ОписаниеНабораДанных);
			
		Иначе
			
			ОписаниеНабораДанных = ОписаниеНабораДанныхДляИнтерактивногоПодписания(
				ПараметрыСообщенийПоСертификатам, ДвоичныеДанныеФайлов);
			Результат.ДанныеДляИнтерактивногоПодписания.Добавить(ОписаниеНабораДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументыДляОбработкиДополнительныхСведений = Результат.ДокументыДляОбработкиДополнительныхСведений;
	
	Для Каждого ДокументДопСведений Из ДокументыДопСведенияБезПодписейПоАктам Цикл
		Если АктыОРасхожденияхДляПодписания.Найти(ДокументДопСведений) <> Неопределено Тогда
			ДокументыДляОбработкиДополнительныхСведений.Вставить(ДокументДопСведений, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Найти создать набор сертификатов для подписания.
//
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса
//  НаборыСертификатов - Структура:
//    * ИспользоватьНаСервере - Булево
//    * ЕстьОшибки - Булево
//    * ДанныеСертификатов - Массив из Структура:
//     ** Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//     ** Отпечаток - Строка
//     ** Программа - Строка
//     ** Пароль - Строка
//     ** Организация - ОпределяемыйТип.УчастникЭДО
//    * ПаролиСертификатов - Соответствие из КлючИЗначение:
//     ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//     ** Значение - Строка
//  СертификатыДляПодписания - ТаблицаЗначений
//  ОтпечаткиНаСервере - См. КриптографияБЭДСлужебный.ПолучитьОтпечаткиСертификатовНаСервере
//  КэшПоиска - Соответствие из КлючИЗначение:
//     * Ключ - Строка
//     * Значение - Структура:
//      ** ИспользоватьНаСервере - Булево
//      ** ЕстьОшибки - Булево
//      ** ДанныеСертификатов - Массив из Структура:
//       *** Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//       *** Отпечаток - Строка
//       *** Программа - Строка
//       *** Пароль - Строка
//       *** Организация - ОпределяемыйТип.УчастникЭДО
//      ** ПаролиСертификатов - Соответствие из КлючИЗначение:
//       *** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//       *** Значение - Строка
//  Ошибки - См. НовоеОписаниеОшибокОбработкиДанныхПриПодписании
//
// Возвращаемое значение:
//  Структура:
//   * ИспользоватьНаСервере - Булево
//   * ЕстьОшибки - Булево
// * ДанныеСертификатов - Массив из Структура:
//     ** Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//     ** Отпечаток - Строка
//     ** Программа - Строка
//     ** Пароль - Строка
//     ** Организация - ОпределяемыйТип.УчастникЭДО
//   * ПаролиСертификатов - Соответствие из КлючИЗначение:
//       ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//       ** Значение - Строка
//
Функция НайтиСоздатьНаборСертификатовДляПодписания(Выборка, НаборыСертификатов, СертификатыДляПодписания,
	ОтпечаткиНаСервере, КэшПоиска, Ошибки)
	
	НаборСертификатов = НаборСертификатовВКэше(КэшПоиска, Выборка);
	Если НаборСертификатов <> Неопределено Тогда
		Возврат НаборСертификатов;
	КонецЕсли;
	
	НовыйНаборСертификатов = Новый Структура;
	НовыйНаборСертификатов.Вставить("ИспользоватьНаСервере", Ложь);
	НовыйНаборСертификатов.Вставить("ЕстьОшибки", Ложь);
	НовыйНаборСертификатов.Вставить("ДанныеСертификатов", Новый Массив);
	НовыйНаборСертификатов.Вставить("ПаролиСертификатов", Новый Соответствие);
	
	ДанныеСертификатов = НовыйНаборСертификатов.ДанныеСертификатов;
	
	ПостроительДляОтбора = Новый ПостроительЗапроса;
	ИсточникДанныхПостроителя = Новый ОписаниеИсточникаДанных(СертификатыДляПодписания);
	ПостроительДляОтбора.ИсточникДанных = ИсточникДанныхПостроителя;  
	Отбор = ПостроительДляОтбора.Отбор;
	
	ОтборВидДокумента = Отбор.Добавить("ВидДокумента");
	ОтборВидДокумента.ВидСравнения = ВидСравнения.Равно;
	ОтборВидДокумента.Использование = Истина;
	ОтборВидДокумента.Значение = Выборка.ВидСообщения; 
	
	Если Выборка.Направление = Перечисления.НаправленияЭДО.Интеркампани
		Или Выборка.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда

		ОрганизацииПустаяСсылка = ИнтеграцияЭДО.ПолучитьПустуюСсылку("Организации");
		
		СписокОрганизаций = Новый СписокЗначений;
		СписокОрганизаций.Добавить(ОрганизацииПустаяСсылка);
		
		Если Не ЗначениеЗаполнено(Выборка.ОрганизацияДляПодписания) 
			И Выборка.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
				СписокОрганизаций.Добавить(Выборка.Организация);
		Иначе
			СписокОрганизаций.Добавить(Выборка.ОрганизацияДляПодписания);
		КонецЕсли;
		
		ОтборОрганизация = Отбор.Добавить("Организация");
		ОтборОрганизация.ВидСравнения = ВидСравнения.ВСписке;
		ОтборОрганизация.Использование = Истина;
		ОтборОрганизация.Значение = СписокОрганизаций;
	Иначе
		ОтборИдентификаторОрганизации = Отбор.Добавить("ИдентификаторОрганизации");
		ОтборИдентификаторОрганизации.ВидСравнения = ВидСравнения.Равно;
		ОтборИдентификаторОрганизации.Использование = Истина;
		ОтборИдентификаторОрганизации.Значение = Выборка.ИдентификаторОрганизации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.Сертификат) Тогда
		ОтборСертификат = Отбор.Добавить("Сертификат");
		ОтборСертификат.ВидСравнения = ВидСравнения.Равно;
		ОтборСертификат.Использование = Истина;
		ОтборСертификат.Значение = Выборка.Сертификат;
	КонецЕсли;  
	
	ПостроительДляОтбора.Выполнить();
	НайденныеСтроки = ПостроительДляОтбора.Результат.Выгрузить();
	
	ОписаниеТипов = Новый ОписаниеТипов("Булево");
	
	НайденныеСтроки.Колонки.Добавить("ОбезличенныйСертификат", ОписаниеТипов);
	НайденныеСтроки.Колонки.Добавить("ЗаполненоФИО", ОписаниеТипов);
	
	Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
		ДобавитьНаборСертификатовВКэшПоиска(КэшПоиска, Выборка, НовыйНаборСертификатов);
		Возврат НовыйНаборСертификатов;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		
		Если Не СтрокаТаблицы.Использовать Тогда
			Продолжить;
		КонецЕсли;
		
 		СвойстваСубъекта = КриптографияБЭД.СвойстваСубъектаСертификатаПоСсылке(СтрокаТаблицы.Сертификат);
		СтрокаТаблицы.ОбезличенныйСертификат = Не ЗначениеЗаполнено(СвойстваСубъекта.Фамилия);
		СтрокаТаблицы.ЗаполненоФИО = ЗначениеЗаполнено(СтрокаТаблицы.Сертификат.Фамилия)
			И ЗначениеЗаполнено(СтрокаТаблицы.Сертификат.Имя);
		
	КонецЦикла;
	
	ИспользуютсяОбезличенныеСертификаты = НастройкиЭДО.ИспользоватьОбезличенныеСертификаты();
	Если ИспользуютсяОбезличенныеСертификаты
		И (Выборка.ТипДокумента = Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении
			Или Выборка.ТипДокумента = Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении) Тогда
		
		СтрокиОбезличенногоСертификата = НайденныеСтроки.НайтиСтроки(
			Новый Структура("ОбезличенныйСертификат, ЗаполненоФИО", Истина, Истина));
			
		Если СтрокиОбезличенногоСертификата.Количество() > 0 Тогда
			НайденныеСтроки = НайденныеСтроки.Скопировать(СтрокиОбезличенногоСертификата);
		КонецЕсли;
	Иначе	
		НайденныеСтроки = НайденныеСтроки.Скопировать(Новый Структура("ОбезличенныйСертификат", Ложь));
	КонецЕсли;
	
	КлючНабораСертификатов = "";
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		
		Если Не СтрокаТаблицы.Использовать Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваСубъекта = КриптографияБЭД.СвойстваСубъектаСертификатаПоСсылке(СтрокаТаблицы.Сертификат);
		
		Если Выборка.Направление = Перечисления.НаправленияЭДО.Интеркампани
			Или Выборка.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда 
			
			СвойстваИздателя = КриптографияБЭД.СвойстваИздателяСертификатаПоСсылке(СтрокаТаблицы.Сертификат);
			
			ЭтоСертификатФизическогоЛица = 
				КриптографияБЭД.ЭтоВидСертификатаФизическогоЛица(СвойстваСубъекта, СвойстваИздателя);
				
			ОрганизацияДляСравнения = Выборка.ОрганизацияДляПодписания;	
			Если Не ЗначениеЗаполнено(ОрганизацияДляСравнения) 
				И Выборка.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
				ОрганизацияДляСравнения = Выборка.Организация;
			КонецЕсли;
			
			Если Не ЭтоСертификатФизическогоЛица
				И СтрокаТаблицы.Организация <> ОрганизацияДляСравнения Тогда 
				Продолжить;
			КонецЕсли; 
		КонецЕсли;
			
		КлючНабораСертификатов = КлючНабораСертификатов + Строка(СтрокаТаблицы.Сертификат.УникальныйИдентификатор());
		
		ОрганизацияСертификата = Выборка.ОрганизацияДляПодписания;
		Если Не ЗначениеЗаполнено(Выборка.ОрганизацияДляПодписания) 
			И Выборка.Направление <> Перечисления.НаправленияЭДО.Интеркампани Тогда
				ОрганизацияСертификата = Выборка.Организация;
		КонецЕсли;
		
		ДанныеСертификата = Новый Структура;
		ДанныеСертификата.Вставить("Ссылка", СтрокаТаблицы.Сертификат);
		ДанныеСертификата.Вставить("Отпечаток", СтрокаТаблицы.Отпечаток);
		ДанныеСертификата.Вставить("Программа", СтрокаТаблицы.Программа);
		ДанныеСертификата.Вставить("Пароль", "");
		ДанныеСертификата.Вставить("ОрганизацияСертификата", ОрганизацияСертификата);
		
		Если ИспользуютсяОбезличенныеСертификаты
			И СтрокаТаблицы.ОбезличенныйСертификат
			И (Выборка.ТипДокумента = Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении
				Или Выборка.ТипДокумента = Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении) Тогда
			
			Сертификаты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаТаблицы.Сертификат);
			
			УстановитьПривилегированныйРежим(Истина);
			ДанныеПароляСертификата = КриптографияБЭД.ПаролиСертификатов(Сертификаты);
			УстановитьПривилегированныйРежим(Ложь);
			
			ПарольСертификата = ДанныеПароляСертификата.Получить(СтрокаТаблицы.Сертификат);
			ДанныеСертификата.Вставить("Пароль", ПарольСертификата);
			
		КонецЕсли;
		
		ДанныеСертификатов.Добавить(ДанныеСертификата);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ДанныеСертификатов) Тогда
		НовыйНаборСертификатов.ЕстьОшибки = Истина;
		
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			НоваяСтрока = Ошибки.ЗапрещенныеВидыСообщений.Добавить();
			НоваяСтрока.Сертификат = СтрокаТаблицы.Сертификат;
			НоваяСтрока.ВидСообщения = СтрокаТаблицы.ВидДокумента;
		КонецЦикла;
		
		ДобавитьНаборСертификатовВКэшПоиска(КэшПоиска, Выборка, НовыйНаборСертификатов);
		Возврат НовыйНаборСертификатов;
	КонецЕсли;
	
	НаборСертификатов = НаборыСертификатов[КлючНабораСертификатов];
	Если НаборСертификатов <> Неопределено Тогда
		Возврат НаборСертификатов;
	КонецЕсли;
	
	Если ДанныеСертификатов.Количество() > 0 Тогда
		
		УстановитьПаролиСертификатов(НовыйНаборСертификатов);
		
		НовыйНаборСертификатов.ИспользоватьНаСервере = 
			ИспользоватьНаборСертификатовНаСервере(НовыйНаборСертификатов, ОтпечаткиНаСервере);
		
	КонецЕсли;
	
	НаборыСертификатов.Вставить(КлючНабораСертификатов, НовыйНаборСертификатов);
	ДобавитьНаборСертификатовВКэшПоиска(КэшПоиска, Выборка, НовыйНаборСертификатов);
	
	Возврат НовыйНаборСертификатов;
	
КонецФункции

// Параметры:
//  КэшПоиска - Соответствие из КлючИЗначение:
// * Ключ - см. КлючПоискаНабораСертификатовВКэше
// * Значение - см. НайтиСоздатьНаборСертификатовДляПодписания
//  Выборка - см. НайтиСоздатьНаборСертификатовДляПодписания.Выборка
// 
// Возвращаемое значение:
//  см. НайтиСоздатьНаборСертификатовДляПодписания
Функция НаборСертификатовВКэше(КэшПоиска, Выборка)
	Возврат КэшПоиска[КлючПоискаНабораСертификатовВКэше(Выборка)];
КонецФункции

// Параметры:
//  КэшПоиска - см. НаборСертификатовВКэше.КэшПоиска
//  Выборка - ВыборкаИзРезультатаЗапроса
//  НаборСертификатов - см. НаборСертификатовВКэше
Процедура ДобавитьНаборСертификатовВКэшПоиска(КэшПоиска, Выборка, НаборСертификатов)
	КэшПоиска.Вставить(КлючПоискаНабораСертификатовВКэше(Выборка), НаборСертификатов);
КонецПроцедуры

// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса
// 
// Возвращаемое значение:
//  Строка
Функция КлючПоискаНабораСертификатовВКэше(Выборка)
	Возврат Выборка.ИдентификаторОрганизации + Выборка.ВидСообщения.УникальныйИдентификатор();
КонецФункции

// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса:
//  * Ссылка - ДокументСсылка.СообщениеЭДО
//  * Организация - ОпределяемыйТип.Организация
// 
// Возвращаемое значение:
//  Структура:
//  * Ссылка - ДокументСсылка.СообщениеЭДО
//  * Организация - ОпределяемыйТип.Организация
Функция ДанныеСообщенияДляПростойПодписи(Выборка)
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("Ссылка", Выборка.Ссылка);
	ДанныеСообщения.Вставить("Организация", Выборка.Организация);
	Возврат ДанныеСообщения;
КонецФункции

// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса:
//  * Ссылка - ДокументСсылка.СообщениеЭДО
//  * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  * ПрисоединенныйФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * ПолноеИмяФайла - Строка
//  * ПодписанЭП - Булево
//  * Организация - ОпределяемыйТип.Организация
//  * ОрганизацияИНН - Строка
//  * ОрганизацияДляПодписанияИНН - Строка
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - вид электронного документа.
//  * НомерДокумента - Строка - номер электронного документа.
//  * ДатаДокумента - Дата - дата электронного документа.
//  * Дата - Дата
//  * ВидСообщения - СправочникСсылка.ВидыДокументовЭДО
// 
// Возвращаемое значение:
//  Структура -  Параметры подписания сообщения:
// * Ссылка - ДокументСсылка.СообщениеЭДО
// * Представление - Строка
// * ПрисоединенныйФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// * ПолноеИмяФайла - Строка
// * ПодписанЭП - Булево
// * Организация - ОпределяемыйТип.Организация
// * ОрганизацияИНН - Строка
// * ОрганизацияДляПодписанияИНН - Строка
// * ЭтоИнтеркампани - Булево
Функция ПараметрыПодписанияСообщения(Выборка)
	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", Выборка.Ссылка);
	Параметры.Вставить("Представление",
		?(РегламентыЭДО.ЭтоСлужебноеСообщение(Выборка.ТипЭлементаРегламента),
		Документы.СообщениеЭДО.ПредставлениеПоСвойствам(Выборка),
		ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(Выборка)));
	Параметры.Вставить("ПрисоединенныйФайл", Выборка.ПрисоединенныйФайл);
	Параметры.Вставить("ПолноеИмяФайла", Выборка.ПолноеИмяФайла);
	Параметры.Вставить("ПодписанЭП", Выборка.ПодписанЭП);
	Параметры.Вставить("Организация", Выборка.Организация);
	Параметры.Вставить("ОрганизацияИНН", Выборка.ОрганизацияИНН);
	Параметры.Вставить("ОрганизацияДляПодписанияИНН", Выборка.ОрганизацияДляПодписанияИНН);
	Параметры.Вставить("ЭтоИнтеркампани", Выборка.Направление = Перечисления.НаправленияЭДО.Интеркампани);
	Возврат Параметры;
КонецФункции

// Возвращает данные сообщения для интерактивного подписания.
// 
// Параметры:
//  ПараметрыПодписания - см. ПараметрыПодписанияСообщения
//  ДвоичныеДанные - Неопределено,ДвоичныеДанные
//
// Возвращаемое значение:
//  Структура:
//  * Данные - Неопределено,ДвоичныеДанные
//  * Представление - Структура:
//  ** Значение - ДокументСсылка.СообщениеЭДО
//  ** Представление - Строка
//  * ПрисоединенныйФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * ТребуетсяЗаполнитьПодписанта - Булево
//  * ДанныеИзменены - Булево
//  * АдресДанныхДляОбновления - Строка
//  * Организация - ОпределяемыйТип.Организация
//  * ВыбраннаяМЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//                 - Неопределено
//  * ОшибкиПроверкиПолномочий - Соответствие из КлючИЗначение:
//    ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    ** Значение - Соответствие из КлючИЗначение:
//      *** Ключ - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//      *** Значение - см. МашиночитаемыеДоверенности.НоваяОшибкаПроверкиПолномочий
//  * ТребуетсяМЧД - Булево
//  * ИсходныеДвоичныеДанные - Неопределено,ДвоичныеДанные
//  * Доверенности - Соответствие из КлючИЗначение:
//    ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    ** Значение - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций 
//
Функция ДанныеСообщенияДляИнтерактивногоПодписания(ПараметрыПодписания, ДвоичныеДанные)
	
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("Данные", Неопределено);
	ДанныеСообщения.Вставить("Представление", Новый Структура);
	ДанныеСообщения.Представление.Вставить("Значение", ПараметрыПодписания.Ссылка);
	ДанныеСообщения.Представление.Вставить("Представление", ПараметрыПодписания.Представление);
	ДанныеСообщения.Вставить("ПрисоединенныйФайл", ПараметрыПодписания.ПрисоединенныйФайл);
	ДанныеСообщения.Вставить("ТребуетсяЗаполнитьПодписанта", Ложь);
	ДанныеСообщения.Вставить("ДанныеИзменены", Ложь);
	ДанныеСообщения.Вставить("АдресДанныхДляОбновления", "");
	ДанныеСообщения.Вставить("Организация", ПараметрыПодписания.Организация);  
	ДанныеСообщения.Вставить("ТребуетсяМЧД", Ложь);
	ДанныеСообщения.Вставить("ВыбраннаяМЧД", Справочники.МашиночитаемыеДоверенностиОрганизаций.ПустаяСсылка());
	ДанныеСообщения.Вставить("ОшибкиПроверкиПолномочий", Новый Соответствие);
	ДанныеСообщения.Вставить("ИсходныеДвоичныеДанные", ДвоичныеДанные);
	ДанныеСообщения.Вставить("Доверенности", Новый Соответствие());
	
	Возврат ДанныеСообщения;
	
КонецФункции

// Возвращает данные сообщения для подписания на сервере.
// 
// Параметры:
//  ПараметрыПодписания - См. ПараметрыПодписанияМЧД
//  ОписаниеФайла - См. РаботаСФайламиБЭД.НовоеОписаниеФайла
// 
// Возвращаемое значение:
//  Структура:
// * Данные - ДвоичныеДанные
// * ИмяФайла - Строка
// * Ссылка - ДокументСсылка.СообщениеЭДО
// * ПрисоединенныйФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// * ОбновитьДанные - Булево
// * ТребуетсяМЧД - Булево
// * ВыбраннаяМЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// * ОшибкиПроверкиПолномочий - Соответствие из КлючИЗначение:
//   ** Ключ - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//           - СправочникСсылка.МЧД003
//   ** Значение - см. МашиночитаемыеДоверенности.НоваяОшибкаПроверкиПолномочийПриПодписании
// * Доверенности - Соответствие из КлючИЗначение:
//   ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//   ** Значение - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций 
//
Функция ДанныеСообщенияДляПодписанияНаСервере(ПараметрыПодписания, ОписаниеФайла)
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("Данные", ОписаниеФайла.ДвоичныеДанные);
	ДанныеСообщения.Вставить("Ссылка", ПараметрыПодписания.Ссылка);
	ДанныеСообщения.Вставить("ПрисоединенныйФайл", ПараметрыПодписания.ПрисоединенныйФайл);
	ДанныеСообщения.Вставить("ОбновитьДанные", Ложь);
	ДанныеСообщения.Вставить("ТребуетсяМЧД", Ложь);
	ДанныеСообщения.Вставить("ВыбраннаяМЧД", Справочники.МашиночитаемыеДоверенностиОрганизаций.ПустаяСсылка());
	ДанныеСообщения.Вставить("ОшибкиПроверкиПолномочий", Новый Соответствие);
	ДанныеСообщения.Вставить("Доверенности", Новый Соответствие());
	Возврат ДанныеСообщения;
КонецФункции

// Формирует Описание набора данных для подписания на сервере.
// 
// Параметры:
//  ПараметрыСообщенийПоСертификатам - КлючИЗначение - Параметры сообщений по сертификатам
//  ДвоичныеДанныеФайлов - см. РаботаСФайлами.ДвоичныеДанныеФайлов
//  Ошибки - см. НовоеОписаниеОшибокОбработкиДанныхПриПодписании
// 
// Возвращаемое значение:
//	См. КриптографияБЭД.НовоеОписаниеПодписываемыхДанных
// 
Функция ОписаниеНабораДанныхДляПодписанияНаСервере(ПараметрыСообщенийПоСертификатам, ДвоичныеДанныеФайлов, Ошибки)
	
	ДанныеСертификата = ПараметрыСообщенийПоСертификатам.Ключ.ДанныеСертификатов[0];
	НаборДанных = Новый Массив;
	
	Для Каждого ПараметрыСообщения Из ПараметрыСообщенийПоСертификатам.Значение Цикл
		
		ДанныеФайла = ДвоичныеДанныеФайлов[ПараметрыСообщения.ПрисоединенныйФайл];
		
		ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
		ОписаниеФайла.ДвоичныеДанные = ДанныеФайла;
		ОписаниеФайла.ИмяФайла = ПараметрыСообщения.ПолноеИмяФайла;
		
		ОбновитьДанные = Ложь;
		ТребуетсяМЧД = Ложь;
		ВыбраннаяМЧД = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПустаяСсылка();
		СодержаниеДокумента = ФорматыЭДО.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
		
		ИННДоверителя = ?(ПараметрыСообщения.ЭтоИнтеркампани,
			ПараметрыСообщения.ОрганизацияДляПодписанияИНН, ПараметрыСообщения.ОрганизацияИНН);
		Сертификат = ЭлектроннаяПодпись.ПолучитьСертификатПоОтпечатку(ДанныеСертификата.Отпечаток, Истина);
		СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификата(Сертификат);
		СвойстваИздателяСертификата = КриптографияБЭД.СвойстваИздателяСертификата(Сертификат);
		ТребуетсяМЧД = МашиночитаемыеДоверенности.ТребуетсяМашиночитаемаяДоверенность(
			ИННДоверителя, СвойстваСубъектаСертификата, СвойстваИздателяСертификата);
			
		Если ТребуетсяМЧД Тогда
				
			ОтборМЧД = МашиночитаемыеДоверенности.НовыйОтборМЧД();
			ОтборМЧД.Доверитель = ПараметрыСообщения.Организация;
			ОтборМЧД.Сертификат = Сертификат;
			ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ПараметрыСообщения.ПрисоединенныйФайл, "ВладелецФайла.ЭлектронныйДокумент");
			Результат = МашиночитаемыеДоверенности.ПолучитьПоследнююВыданнуюДоверенностьОрганизации(
				ОтборМЧД, ЭлектронныйДокумент);
			ВыбраннаяМЧД = Результат.Доверенность;
			Если СодержаниеДокумента <> Неопределено И ЗначениеЗаполнено(ВыбраннаяМЧД)
				И ФорматыЭДО.ЗаполнениеДанныхДоверенностиДоступно(СодержаниеДокумента)
				И НЕ ПараметрыСообщения.ПодписанЭП Тогда
				Доверенности = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбраннаяМЧД);
				ОписаниеФайла = ФорматыЭДО.ЗаполнитьДанныеДоверенностейДокумента(
					ОписаниеФайла, ПараметрыСообщения.Организация, Доверенности, СодержаниеДокумента);
				ОбновитьДанные = Истина;
			КонецЕсли;
				
		КонецЕсли;
		
		Если СодержаниеДокумента <> Неопределено И НЕ ПараметрыСообщения.ПодписанЭП Тогда
			
			Если ФорматыЭДО.ЗаполнениеДанныхПодписантаДоступно(СодержаниеДокумента) Тогда
				ОписаниеФайла = ФорматыЭДО.ЗаполнитьДанныеПодписантаДокумента(ОписаниеФайла,
					ПараметрыСообщения.Организация, ДанныеСертификата.Ссылка, СодержаниеДокумента);
				ОбновитьДанные = Истина;
			КонецЕсли;
			
			Если ФорматыЭДО.ЗаполнениеЭлектронныхПодписейДоступно(СодержаниеДокумента) Тогда
				ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСообщения.Ссылка, "ЭлектронныйДокумент");
				ОписаниеФайла = ЗаполнитьЭлектронныеПодписи(ОписаниеФайла, ЭлектронныйДокумент);
				ОбновитьДанные = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеСообщения = ДанныеСообщенияДляПодписанияНаСервере(ПараметрыСообщения, ОписаниеФайла);
		ДанныеСообщения.ОбновитьДанные = ОбновитьДанные;
		ДанныеСообщения.ТребуетсяМЧД = ТребуетсяМЧД;
		Если ЗначениеЗаполнено(ВыбраннаяМЧД) Тогда
			ДанныеСообщения.Доверенности.Вставить(ДанныеСертификата.Ссылка, ВыбраннаяМЧД);
		КонецЕсли;
		
		Если ДанныеСообщения.ТребуетсяМЧД И Не ЗначениеЗаполнено(ВыбраннаяМЧД) Тогда
			НоваяСтрока = Ошибки.ЗапрещенныеСообщенияДляПодписанияПоДоверенностиНаСервере.Добавить();
			НоваяСтрока.Сертификат = ДанныеСертификата.Ссылка;
			НоваяСтрока.Сообщение = ДанныеСообщения.Ссылка;
			Если Результат.ОшибкиПроверкиПолномочий.Количество() > 0 Тогда
				НоваяСтрока.ОшибкиПроверкиПолномочий = Результат.ОшибкиПроверкиПолномочий;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ЭтоФайлПДФ_А_3 = Обработки.ФорматДоговорныйДокумент101.ЭтоФайлФормата(ПараметрыСообщения.ПолноеИмяФайла);

		Если ЭтоФайлПДФ_А_3 Тогда
			ДанныеСообщения.Данные = Обработки.ФорматДоговорныйДокумент101.ОбновитьВложениеВФайлеПДФ(
				ДанныеСообщения.ПрисоединенныйФайл, ДанныеСообщения.Данные);
		КонецЕсли;
		
		НаборДанных.Добавить(ДанныеСообщения);
		
	КонецЦикла;
	
	ОписаниеНабораДанных = КриптографияБЭД.НовоеОписаниеПодписываемыхДанных();
	ОписаниеНабораДанных.Сертификат 	= ДанныеСертификата.Ссылка;
	ОписаниеНабораДанных.Отпечаток 		= ДанныеСертификата.Отпечаток;
	ОписаниеНабораДанных.Программа 		= ДанныеСертификата.Программа;
	ОписаниеНабораДанных.Пароль 		= ДанныеСертификата.Пароль;
	ОписаниеНабораДанных.НаборДанных 	= НаборДанных;
	Возврат ОписаниеНабораДанных;
	
КонецФункции

// Возвращает данные для интерактивного подписания.
// 
// Параметры:
//  ПараметрыСообщенийПоСертификатам - КлючИЗначение:
//  * Ключ - См. НайтиСоздатьНаборСертификатовДляПодписания
//  * Значение - См. ПараметрыПодписанияСообщения
//  ДвоичныеДанныеФайлов - Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.ПрисоединенныйФайл
//  * Значение - ДвоичныеДанные
// Возвращаемое значение:
//  Структура:
//  * Сертификаты - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * НаборДанных - Массив из См. ДанныеСообщенияДляИнтерактивногоПодписания
//  * ТребуетсяЗаполнитьПодписантов - Булево
//  * ПаролиСертификатов - Соответствие из КлючИЗначение:
//       ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//       ** Значение - Строка
//  * СертификатыТребующиеДоверенность - Соответствие из КлючИЗначение:
//       ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//       ** Значение - Булево
//
Функция ОписаниеНабораДанныхДляИнтерактивногоПодписания(ПараметрыСообщенийПоСертификатам, ДвоичныеДанныеФайлов) Экспорт
	
	Сертификаты = ОбщегоНазначения.ВыгрузитьКолонку(ПараметрыСообщенийПоСертификатам.Ключ.ДанныеСертификатов, "Ссылка");
	ПаролиСертификатов = ПараметрыСообщенийПоСертификатам.Ключ.ПаролиСертификатов;
	СвойстваСубъектаСертификатов = КриптографияБЭД.СвойстваСубъектаСертификатовПоСсылке(Сертификаты);
	СвойстваИздателяСертификатов = КриптографияБЭД.СвойстваИздателяСертификатовПоСсылке(Сертификаты);
	
	НаборДанных = Новый Массив;
	ТребуетсяЗаполнитьПодписантов = Ложь;
	ДвоичныеДанныеСообщения = Неопределено;
	СертификатыТребующиеДоверенность = Новый Соответствие;
	
	Для Каждого ПараметрыСообщения Из ПараметрыСообщенийПоСертификатам.Значение Цикл
		
		ДанныеИзменены = Ложь;
		
		ДанныеФайла = ДвоичныеДанныеФайлов[ПараметрыСообщения.ПрисоединенныйФайл];
		ДвоичныеДанныеСообщения = ДанныеФайла;
		
		СодержаниеДокумента = Неопределено;
		
		РасширениеФайлаВПроизвольномРегистре = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(
			ПараметрыСообщения.ПолноеИмяФайла).Расширение;
		РасширениеФайла = НРег(РасширениеФайлаВПроизвольномРегистре);
		
		ЭтоФайлПДФ_А_3 = Обработки.ФорматДоговорныйДокумент101.ЭтоФайлФормата(ПараметрыСообщения.ПолноеИмяФайла);
		
		СообщениеНеПодписаноИСоответствуетРасширениям = (ПараметрыСообщения.ПодписанЭП = Ложь
			И (РасширениеФайла = ".xml" ИЛИ ЭтоФайлПДФ_А_3 ));
		
		Если СообщениеНеПодписаноИСоответствуетРасширениям Тогда
			
			ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
			ОписаниеФайла.ДвоичныеДанные = ДанныеФайла;
			ОписаниеФайла.ИмяФайла = ПараметрыСообщения.ПолноеИмяФайла;
			
			СодержаниеДокумента = ФорматыЭДО.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
			
			Если СодержаниеДокумента <> Неопределено Тогда
				
				Если ФорматыЭДО.ЗаполнениеДанныхПодписантаДоступно(СодержаниеДокумента) Тогда
					ТребуетсяЗаполнитьПодписантов = Истина;
				КонецЕсли;
				
				Если ФорматыЭДО.ЗаполнениеЭлектронныхПодписейДоступно(СодержаниеДокумента) Тогда
					ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСообщения.Ссылка, "ЭлектронныйДокумент");
					ОписаниеФайла = ЗаполнитьЭлектронныеПодписи(ОписаниеФайла, ЭлектронныйДокумент);
					ДвоичныеДанныеСообщения = ОписаниеФайла.ДвоичныеДанные;
					ИнформацияОФайле = Новый Структура("АдресВременногоХранилищаТекста, АдресФайлаВоВременномХранилище","",
						ПоместитьВоВременноеХранилище(ДвоичныеДанныеСообщения));
					РаботаСФайлами.ОбновитьФайл(ПараметрыСообщения.ПрисоединенныйФайл, ИнформацияОФайле);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеСообщения = ДанныеСообщенияДляИнтерактивногоПодписания(ПараметрыСообщения, ДвоичныеДанныеСообщения);
		ДанныеСообщения.ТребуетсяЗаполнитьПодписанта = ТребуетсяЗаполнитьПодписантов;
		ДанныеСообщения.ИсходныеДвоичныеДанные = ДвоичныеДанныеСообщения;
		ДанныеСообщения.Данные = ДвоичныеДанныеСообщения;
		ДанныеСообщения.ДанныеИзменены = ДанныеИзменены;
		
		СвойстваСертификатов = КриптографияБЭД.СвойстваСертификатов(Сертификаты);
		
		Для Каждого ДанныеСертификата Из ПараметрыСообщенийПоСертификатам.Ключ.ДанныеСертификатов Цикл
			
			СвойстваСубъектаСертификата = СвойстваСубъектаСертификатов[ДанныеСертификата.Ссылка];
			СвойстваИздателяСертификата = СвойстваИздателяСертификатов[ДанныеСертификата.Ссылка];
			ИННДоверителя = ?(ПараметрыСообщения.ЭтоИнтеркампани,
				ПараметрыСообщения.ОрганизацияДляПодписанияИНН, ПараметрыСообщения.ОрганизацияИНН);
			ТребуетсяДоверенность = МашиночитаемыеДоверенности.ТребуетсяМашиночитаемаяДоверенность(
				ИННДоверителя, СвойстваСубъектаСертификата, СвойстваИздателяСертификата);
			
			Если ТребуетсяДоверенность Тогда
				
				СертификатыТребующиеДоверенность.Вставить(ДанныеСертификата.Ссылка, Истина);
				СвойстваСертификата = СвойстваСертификатов[ДанныеСертификата.Ссылка];
				
				Доверитель = ДанныеСертификата.ОрганизацияСертификата;
				Если Не ЗначениеЗаполнено(Доверитель) Тогда
					Доверитель = СвойстваСертификата.Организация;
				КонецЕсли;
				
				Если Не ПараметрыСообщения.ЭтоИнтеркампани И Не ЗначениеЗаполнено(Доверитель) Тогда
					Доверитель = ПараметрыСообщения.Организация;
				КонецЕсли;
				
				Сертификат = Новый СертификатКриптографии(СвойстваСертификата.ДанныеСертификата);
				
				ОтборМЧД = МашиночитаемыеДоверенности.НовыйОтборМЧД();
				ОтборМЧД.Доверитель = Доверитель;
				ОтборМЧД.Сертификат = Сертификат;
				ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ДанныеСообщения.ПрисоединенныйФайл, "ВладелецФайла.ЭлектронныйДокумент");
				Результат = МашиночитаемыеДоверенности.ПолучитьПоследнююВыданнуюДоверенностьОрганизации(
					ОтборМЧД, ЭлектронныйДокумент);
				
				Если ЗначениеЗаполнено(Результат.Доверенность) Тогда
					ДанныеСообщения.Доверенности.Вставить(ДанныеСертификата.Ссылка, Результат.Доверенность);
				Иначе
					Если Результат.ОшибкиПроверкиПолномочий.Количество() > 0 Тогда
						ДанныеСообщения.ОшибкиПроверкиПолномочий.Вставить(
							ДанныеСертификата.Ссылка, Результат.ОшибкиПроверкиПолномочий);
					КонецЕсли;
				КонецЕсли;
				
				ДанныеСообщения.ТребуетсяМЧД = ТребуетсяДоверенность;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборДанных.Добавить(ДанныеСообщения);
		
	КонецЦикла;
	
	ОписаниеНабораДанных = Новый Структура;
	ОписаниеНабораДанных.Вставить("Сертификаты", Сертификаты);
	ОписаниеНабораДанных.Вставить("ПаролиСертификатов", ПаролиСертификатов);
	ОписаниеНабораДанных.Вставить("НаборДанных", НаборДанных);
	ОписаниеНабораДанных.Вставить("ТребуетсяЗаполнитьПодписантов", ТребуетсяЗаполнитьПодписантов);
	ОписаниеНабораДанных.Вставить("СертификатыТребующиеДоверенность", СертификатыТребующиеДоверенность);
	Возврат ОписаниеНабораДанных;
	
КонецФункции

// Возвращает новую структуру для формирования описания ошибок.
// 
// Возвращаемое значение:
//  Структура:
// * ЕстьОшибкаКриптографииПоСообщениямДляПодписания - Булево
// * ОтсутствуютДоступныеСертификаты - Булево
// * НедоступныеСообщения - Массив Из ДокументСсылка.СообщениеЭДО
// * УчетныеЗаписиБезСертификатов - См. СинхронизацияЭДО.НоваяТаблицаУчетныхЗаписейБезСертификатов
// * ЗапрещенныеВидыСообщений - ТаблицаЗначений:
//  ** Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  ** ВидСообщения - СправочникСсылка.ВидыДокументовЭДО
// * ЗапрещенныеСообщенияДляПодписанияПоДоверенностиНаСервере - ТаблицаЗначений:
//  ** Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  ** Сообщение - ДокументСсылка.СообщениеЭДО
//  ** ОшибкиПроверкиПолномочий - Соответствие из КлючИЗначение:
//   *** Ключ - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//            - СправочникСсылка.МЧД003
//   *** Значение - см. МашиночитаемыеДоверенности.НоваяОшибкаПроверкиПолномочийПриПодписании
// * СообщенияВФорматеНеПоддержанномОператором - см. НовыйНаборСообщенийВФорматеНеПоддержанномОператором
Функция НовоеОписаниеОшибокОбработкиДанныхПриПодписании()
	ОписаниеОшибок = Новый Структура;
	ОписаниеОшибок.Вставить("ЕстьОшибкаКриптографииПоСообщениямДляПодписания", Ложь);
	ОписаниеОшибок.Вставить("ОтсутствуютДоступныеСертификаты", Ложь);
	ОписаниеОшибок.Вставить("НедоступныеСообщения", Новый Массив);
	ОписаниеОшибок.Вставить("УчетныеЗаписиБезСертификатов", СинхронизацияЭДО.НоваяТаблицаУчетныхЗаписейБезСертификатов());
	ОписаниеОшибок.Вставить("ЗапрещенныеВидыСообщений", Новый ТаблицаЗначений());
	ОписаниеОшибок.ЗапрещенныеВидыСообщений.Колонки.Добавить("Сертификат");
	ОписаниеОшибок.ЗапрещенныеВидыСообщений.Колонки.Добавить("ВидСообщения");
	ОписаниеОшибок.Вставить("ЗапрещенныеСообщенияДляПодписанияПоДоверенностиНаСервере", Новый ТаблицаЗначений());
	ОписаниеОшибок.ЗапрещенныеСообщенияДляПодписанияПоДоверенностиНаСервере.Колонки.Добавить("Сертификат", 
		Новый ОписаниеТипов("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования"));
	ОписаниеОшибок.ЗапрещенныеСообщенияДляПодписанияПоДоверенностиНаСервере.Колонки.Добавить("Сообщение",
		Новый ОписаниеТипов("ДокументСсылка.СообщениеЭДО"));
	ОписаниеОшибок.ЗапрещенныеСообщенияДляПодписанияПоДоверенностиНаСервере.Колонки.Добавить("ОшибкиПроверкиПолномочий",
		Новый ОписаниеТипов("Соответствие"));
	ОписаниеОшибок.Вставить("СообщенияВФорматеНеПоддержанномОператором", НовыйНаборСообщенийВФорматеНеПоддержанномОператором());
	Возврат ОписаниеОшибок;
КонецФункции

// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Сообщение - ДокументСсылка.СообщениеЭДО
//  * Формат - Строка
//  * ОператорОтправителя - Строка
//  * ОператорПолучателя - Строка
//  * ФорматПоддержанОператоромОтправителя - Булево
//  * ФорматПоддержанОператоромПолучателя - Булево
//  * НомерДокумента - Строка
//  * ДатаДокумента - Дата
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
Функция НовыйНаборСообщенийВФорматеНеПоддержанномОператором()
	НаборСообщений = Новый ТаблицаЗначений;
	КолонкиНабораСообщений = НаборСообщений.Колонки;
	КолонкиНабораСообщений.Добавить("Сообщение");
	КолонкиНабораСообщений.Добавить("Формат");
	КолонкиНабораСообщений.Добавить("ОператорОтправителя");
	КолонкиНабораСообщений.Добавить("ОператорПолучателя");
	КолонкиНабораСообщений.Добавить("ФорматПоддержанОператоромОтправителя");
	КолонкиНабораСообщений.Добавить("ФорматПоддержанОператоромПолучателя");
	КолонкиНабораСообщений.Добавить("НомерДокумента");
	КолонкиНабораСообщений.Добавить("ДатаДокумента");
	КолонкиНабораСообщений.Добавить("ВидДокумента");
	КолонкиНабораСообщений.Добавить("ТипДокумента");
	Возврат НаборСообщений;
КонецФункции

// Параметры:
//  Ошибки - см. НовоеОписаниеОшибокОбработкиДанныхПриПодписании
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ПараметрыВыполнения - см. ВыполнитьДействиеПодписать.ПараметрыВыполнения
Процедура ОбработатьОшибкиДанныхДляПодписания(Ошибки, КонтекстДиагностики, ПараметрыВыполнения) Экспорт
	
	Действие = Перечисления.ДействияПоЭДО.Подписать;
	
	Если Ошибки.ЕстьОшибкаКриптографииПоСообщениямДляПодписания Тогда
		КриптографияБЭД.ДобавитьОшибкуПолученияОтпечатковСертификатов(КонтекстДиагностики,
			ВидОперацииПриДобавленииОшибки(НРег(Действие)), ПараметрыВыполнения.ОтпечаткиСертификатов);
	КонецЕсли;
	
	Если Ошибки.ОтсутствуютДоступныеСертификаты Тогда
		СинхронизацияЭДО.ДобавитьОшибкуОтсутствияСертификатовДляПодписания(КонтекстДиагностики,
			ВидОперацииПриДобавленииОшибки(НРег(Действие)));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ошибки.УчетныеЗаписиБезСертификатов) Тогда
		СинхронизацияЭДО.ДобавитьОшибкуУчетныхЗаписейБезСертификатов(КонтекстДиагностики,
			Ошибки.УчетныеЗаписиБезСертификатов, СинхронизацияЭДО.ОперацииПомощникаРегистрацииСертификатов().Подписание);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ошибки.НедоступныеСообщения) Тогда
		ДобавитьОшибкуДокументыНедоступныДляПодписания(КонтекстДиагностики, Ошибки.НедоступныеСообщения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ошибки.ЗапрещенныеВидыСообщений) Тогда
		Ошибки.ЗапрещенныеВидыСообщений.Свернуть("Сертификат, ВидСообщения");
		Для Каждого СтрокаТаблицы Из Ошибки.ЗапрещенныеВидыСообщений Цикл
			КриптографияБЭД.ДобавитьОшибкуДляСертификатаНетПодписываемогоВидаДокумента(
				КонтекстДиагностики, ВидОперацииПриДобавленииОшибки(НРег(Действие)), СтрокаТаблицы.Сертификат,
				СтрокаТаблицы.ВидСообщения);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ошибки.ЗапрещенныеСообщенияДляПодписанияПоДоверенностиНаСервере) Тогда
		ДобавитьОшибкуДокументыНедоступныДляПодписанияНаСервереПоДоверенности(КонтекстДиагностики,
			Ошибки.ЗапрещенныеСообщенияДляПодписанияПоДоверенностиНаСервере);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ошибки.СообщенияВФорматеНеПоддержанномОператором) Тогда
		Если Ошибки.СообщенияВФорматеНеПоддержанномОператором.Количество() = 1 Тогда
			СтрокаТаблицы = Ошибки.СообщенияВФорматеНеПоддержанномОператором[0];
			ДобавитьОшибкуДокументВФорматеНеПоддержанномОператором(КонтекстДиагностики, СтрокаТаблицы, Истина);
		Иначе	
			Для Каждого СтрокаТаблицы Из Ошибки.СообщенияВФорматеНеПоддержанномОператором Цикл
				ДобавитьОшибкуДокументВФорматеНеПоддержанномОператором(КонтекстДиагностики, СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  НаборСообщений - Массив из ДокументСсылка.СообщениеЭДО
Процедура ДобавитьОшибкуДокументыНедоступныДляПодписания(КонтекстДиагностики, НаборСообщений)
	
	ПредставлениеДействия = НРег(Перечисления.ДействияПоЭДО.Подписать);
	ВидОперации = ВидОперацииПриДобавленииОшибки(ПредставлениеДействия);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(СообщениеЭДО.ЭлектронныйДокумент) КАК ПредставлениеДокумента
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.Ссылка В (&Ссылки)";
	Запрос.УстановитьПараметр("Ссылки", НаборСообщений);
	
	УстановитьПривилегированныйРежим(Истина);
	ПредставленияДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПредставлениеДокумента");
	УстановитьПривилегированныйРежим(Ложь);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Документы недоступные для подписания:'"));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрок, ПредставленияДокументов);
	ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибкиДокументыНедоступныДляПодписания(),
		ПодробноеПредставление, ПодробноеПредставление);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

// Добавляет ошибки в контекст диагностики по переданной таблице сообщений и сертификатов.
// 
// Параметры:
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  СертификатыИСообщения - ТаблицаЗначений:
//   * Сообщение - ДокументСсылка.СообщениеЭДО
//   * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//
Процедура ДобавитьОшибкуДокументыНедоступныДляПодписанияНаСервереПоДоверенности(КонтекстДиагностики, 
	СертификатыИСообщения)
	
	ПредставлениеДействия = НРег(Перечисления.ДействияПоЭДО.Подписать);
	ВидОперации = ВидОперацииПриДобавленииОшибки(ПредставлениеДействия);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СертификатыИСообщения.Сообщение КАК Сообщение,
		|	СертификатыИСообщения.Сертификат КАК Сертификат
		|ПОМЕСТИТЬ СертификатыИСообщения
		|ИЗ
		|	&СертификатыИСообщения КАК СертификатыИСообщения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(СертификатыИСообщения.Сообщение.ЭлектронныйДокумент) КАК ПредставлениеДокумента,
		|	СертификатыИСообщения.Сертификат КАК Сертификат
		|ИЗ
		|	СертификатыИСообщения КАК СертификатыИСообщения
		|ИТОГИ
		|ПО
		|	Сертификат";
	Запрос.УстановитьПараметр("СертификатыИСообщения", СертификатыИСообщения);
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаСертификатов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УстановитьПривилегированныйРежим(Ложь);

	Сертификаты = СертификатыИСообщения.ВыгрузитьКолонку("Сертификат");
	Сертификаты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Сертификаты);
	
	ВидОшибки = ВидОшибкиДокументыНедоступныДляПодписанияНаСервереПоДоверенности(Сертификаты);
	
	Пока ВыборкаСертификатов.Следующий() Цикл
		МассивСтрок = Новый Массив;
		ЗаголовокОшибки = НСтр("ru = 'Документы недоступные для подписания сертификатом ""%1"":'");
		МассивСтрок.Добавить(СтрШаблон(ЗаголовокОшибки, ВыборкаСертификатов.Сертификат));
		
		ВыборкаСообщений = ВыборкаСертификатов.Выбрать();
		Пока ВыборкаСообщений.Следующий() Цикл
			МассивСтрок.Добавить(ВыборкаСообщений.ПредставлениеДокумента);
		КонецЦикла;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Сертификат", ВыборкаСертификатов.Сертификат);
		
		НайденнаяСтрока = СертификатыИСообщения.Найти(ВыборкаСертификатов.Сертификат, "Сертификат");
		Если НайденнаяСтрока <> Неопределено 
			И НайденнаяСтрока.ОшибкиПроверкиПолномочий.Количество() > 0 Тогда
			
			ВидОшибки = 
				МашиночитаемыеДоверенностиКлиентСервер.ВидОшибкиДокументыНедоступныДляПодписанияНаСервереПоПолномочиямДоверенности();
				
			ОшибкиПроверкиПолномочий = Новый Массив;
			Для Каждого Ошибка Из НайденнаяСтрока.ОшибкиПроверкиПолномочий Цикл
				ОшибкаПроверкиПолномочий = МашиночитаемыеДоверенности.НоваяОшибкаПроверкиПолномочийПриПодписании();
				ОшибкаПроверкиПолномочий.Доверенность = Ошибка.Значение.Доверенность;
				ОшибкаПроверкиПолномочий.ЭлектронныйДокумент = Ошибка.Значение.ЭлектронныйДокумент;
				ОшибкаПроверкиПолномочий.ТекстОшибки = Ошибка.Значение.ТекстОшибки;
				ОшибкиПроверкиПолномочий.Добавить(ОшибкаПроверкиПолномочий);
			КонецЦикла;
			
			ДополнительныеДанные = Новый Структура("ОшибкиПроверкиПолномочий", ОшибкиПроверкиПолномочий);
			ДополнительныеПараметры.Вставить("ДополнительныеДанные", ДополнительныеДанные);
		КонецЕсли;
		
		ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
		
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки,
			ПодробноеПредставление, ПодробноеПредставление, ДополнительныеПараметры);
		
		ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	КонецЦикла;

КонецПроцедуры

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ДанныеСообщения - СтрокаТаблицыЗначений: см. НовыйНаборСообщенийВФорматеНеПоддержанномОператором
//  ИспользоватьОбработчикОшибки - Булево
Процедура ДобавитьОшибкуДокументВФорматеНеПоддержанномОператором(КонтекстДиагностики, ДанныеСообщения,
	ИспользоватьОбработчикОшибки = Ложь)
	
	ПредставлениеДействия = НРег(Перечисления.ДействияПоЭДО.Подписать);
	ВидОперации = ВидОперацииПриДобавленииОшибки(ПредставлениеДействия);
	
	СвойстваДокумента = Новый Структура;
	СвойстваДокумента.Вставить("НомерДокумента");
	СвойстваДокумента.Вставить("ДатаДокумента");
	СвойстваДокумента.Вставить("ВидДокумента");
	СвойстваДокумента.Вставить("ТипДокумента");
	
	ЗаполнитьЗначенияСвойств(СвойстваДокумента, ДанныеСообщения);
	
	ПредставлениеДокумента = ЭлектронныеДокументыЭДО.ПредставлениеДокумента(
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеСообщения.Сообщение, "ЭлектронныйДокумент"),
	    СвойстваДокумента);
	ПредставлениеОшибки = "";
	
	Если Не ДанныеСообщения.ФорматПоддержанОператоромОтправителя Тогда
		ПредставлениеОшибки = 
		    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(

				НСтр("ru = 'Оператор ""%1"" не поддерживает отправку электронных документов в формате ""%2"".'"), 
				ДанныеСообщения.ОператорОтправителя, ДанныеСообщения.Формат) 
				+ Символы.ПС 
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Подписание и отправка электронного документа ""%1"" невозможны.'"), 
				ПредставлениеДокумента);
	КонецЕсли;
	
	Если ПустаяСтрока(ПредставлениеОшибки) И Не ДанныеСообщения.ФорматПоддержанОператоромПолучателя Тогда
		ПредставлениеОшибки = 
		    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Оператор ""%1"" не поддерживает получение электронных документов в формате ""%2"".'"), 
				ДанныеСообщения.ОператорПолучателя, ДанныеСообщения.Формат) 
				+ Символы.ПС 
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Подписание и отправка электронного документа ""%1"" невозможны.'"), 
				ПредставлениеДокумента);
	КонецЕсли;
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, 
		ВидОшибкиДокументыВФорматеНеПоддержанномОператором(ИспользоватьОбработчикОшибки), ПредставлениеОшибки, ПредставлениеОшибки);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

// Возвращаемое значение:
//  См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиДокументыНедоступныДляПодписания()
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ДокументыНедоступныеДляПодписания";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Документы недоступны для подписания'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Некоторые документы недоступны для подписания'");
	
	Возврат ВидОшибки;
	
КонецФункции

// Вид ошибки документы недоступны для подписания на сервере по доверенности.
// 
// Параметры:
//  Сертификаты - Массив Из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификаты, 
//                                                                                            по которым требуются МЧД
// 
// Возвращаемое значение:
//  См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиДокументыНедоступныДляПодписанияНаСервереПоДоверенности(Сертификаты)
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ДокументыНедоступныеДляПодписанияНаСервереПоДоверенности";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Документы недоступны для подписания'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Для подписания требуется доверенность'");
	ВидОшибки.ОписаниеРешения = ЭлектронныеДокументыЭДО.ТекстОшибкиСертификатомМожноПодписатьТолькоПоМЧД(Сертификаты);
	
	ВидОшибки.ВыполнятьОбработчикАвтоматически = Истина;
	ВидОшибки.АвтоматическиВыполняемыйОбработчик = 
		"ЭлектронныеДокументыЭДОКлиент.ВывестиИнформациюОбОтсутствииМЧДДляСертификата";
	
	Возврат ВидОшибки;
	
КонецФункции

// Параметры:
//  ИспользоватьОбработчик - Булево
// 
// Возвращаемое значение:
//  См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиДокументыВФорматеНеПоддержанномОператором(ИспользоватьОбработчик = Ложь)
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ДокументыВФорматеНеПоддержанномОператором";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Документы не поддерживаются оператором ЭДО'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Формат документов не поддержан оператором ЭДО'");
	Если ИспользоватьОбработчик Тогда
		ВидОшибки.ВыполнятьОбработчикАвтоматически = Истина;
		ВидОшибки.АвтоматическиВыполняемыйОбработчик =
			"ЭлектронныеДокументыЭДОКлиент.ВывестиПредупреждениеОДокументеВФорматеНеПоддержанномОператором";
	КонецЕсли;	
		
	Возврат ВидОшибки;
	
КонецФункции

// Возвращает результат заполнения доверенностей и подписантов по сертификату.
// 
// Параметры:
//  ДанныеДляЗаполнения - Соответствие из КлючИЗначение:
//    * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//    * Значение - Структура:
//  	** ТребуетсяЗаполнитьПодписанта         - Булево - Истина, если требуется
//  	** ТребуетсяЗаполнитьДоверенность       - Булево - Истина, если требуется
//  	** НаборМЧД						  - Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  	** Данные						  - Неопределено, Строка, ДвоичныеДанные - данные файлов.
//  Сертификат          - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  РезультатУточненияМЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - Структура:
//    ** Отказ                    - Булево
//    ** АдресДанныхДляОбновления - Строка
//    ** ДанныеДляПодписания      - Неопределено
//                                - Строка
//                                - ДвоичныеДанные
//
Функция ЗаполнитьПодписантовИДоверенностиПоСертификату(ДанныеДляЗаполнения,
	Сертификат, КонтекстДиагностики, РезультатУточненияМЧД) Экспорт

	ФайлыСообщений = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеДляЗаполнения, "Ключ");
	Результат = Новый Соответствие;
	СоздаватьЭлектронныеПодписиНаСервере = ЭлектроннаяПодпись.СоздаватьЭлектронныеПодписиНаСервере();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ПрисоединенныеФайлы.ПодписанЭП КАК ПодписанЭП,
	|	ПрисоединенныеФайлы.ПолноеИмяФайла КАК ПолноеИмяФайла,
	|	СообщениеЭДО.Ссылка КАК Сообщение,
	|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация
	|ИЗ
	|	Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
	|		ПО ПрисоединенныеФайлы.ВладелецФайла = СообщениеЭДО.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
	|		ПО (СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка)
	|ГДЕ
	|	ПрисоединенныеФайлы.Ссылка В(&ПрисоединенныеФайлы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ПрисоединенныеФайлы.ПодписанЭП КАК ПодписанЭП,
	|	ПрисоединенныеФайлы.ПолноеИмяФайла КАК ПолноеИмяФайла,
	|	СообщениеЭДО.Ссылка КАК Сообщение,
	|	ЭлектронныйДокументИсходящийЭДО.Организация КАК Организация
	|ИЗ
	|	Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
	|		ПО ПрисоединенныеФайлы.ВладелецФайла = СообщениеЭДО.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
	|		ПО (СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка)
	|ГДЕ
	|	ПрисоединенныеФайлы.Ссылка В(&ПрисоединенныеФайлы)";
	Запрос.УстановитьПараметр("ПрисоединенныеФайлы", ФайлыСообщений);

	ДвоичныеДанныеФайлов = РаботаСФайлами.ДвоичныеДанныеФайлов(ФайлыСообщений);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		РезультатЗаполненияФайла = Новый Структура;
		РезультатЗаполненияФайла.Вставить("Отказ", Ложь);
		РезультатЗаполненияФайла.Вставить("АдресДанныхДляОбновления", "");
		РезультатЗаполненияФайла.Вставить("ДанныеДляПодписания", Неопределено);

		Результат.Вставить(Выборка.Ссылка, РезультатЗаполненияФайла);

		ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
		ОписаниеФайла.ИмяФайла = Выборка.ПолноеИмяФайла;

		ПараметрыЗаполнения = ДанныеДляЗаполнения.Получить(Выборка.Ссылка);

		Если ТипЗнч(ПараметрыЗаполнения.Данные) = Тип("ДвоичныеДанные") И ЗначениеЗаполнено(ПараметрыЗаполнения.Данные) Тогда
			ОписаниеФайла.ДвоичныеДанные = ПараметрыЗаполнения.Данные;
		Иначе
			ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанныеФайлов[Выборка.Ссылка];
		КонецЕсли;

		СодержаниеДокумента = ФорматыЭДО.ПрочитатьСодержаниеДокумента(ОписаниеФайла);

		Если СодержаниеДокумента <> Неопределено Тогда
			
			Если ПараметрыЗаполнения.ТребуетсяЗаполнитьПодписанта
				И ФорматыЭДО.ЗаполнениеДанныхПодписантаДоступно(СодержаниеДокумента)
				И Не Выборка.ПодписанЭП Тогда
				
				ОписаниеФайла = ФорматыЭДО.ЗаполнитьДанныеПодписантаДокумента(ОписаниеФайла, Выборка.Организация,
					Сертификат, СодержаниеДокумента, РезультатУточненияМЧД);
					
				ЭтоФайлПДФ_А_3 = Обработки.ФорматДоговорныйДокумент101.ЭтоФайлФормата(Выборка.ПолноеИмяФайла);
				Если ЭтоФайлПДФ_А_3 Тогда
					ОписаниеФайла.ДвоичныеДанные = Обработки.ФорматДоговорныйДокумент101.ОбновитьВложениеВФайлеПДФ(
						Выборка.Ссылка, ОписаниеФайла.ДвоичныеДанные);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПараметрыЗаполнения.ТребуетсяДоверенность
				И ФорматыЭДО.ЗаполнениеДанныхДоверенностиДоступно(СодержаниеДокумента)
				И Не Выборка.ПодписанЭП Тогда
				
				ОписаниеФайла = ФорматыЭДО.ЗаполнитьДанныеДоверенностейДокумента(ОписаниеФайла,
					Выборка.Организация, ПараметрыЗаполнения.НаборМЧД, СодержаниеДокумента);
			КонецЕсли;
			
		КонецЕсли;

		АдресДанных = ПоместитьВоВременноеХранилище(ОписаниеФайла.ДвоичныеДанные, Новый УникальныйИдентификатор);

		РезультатЗаполненияФайла.АдресДанныхДляОбновления = АдресДанных;
		РезультатЗаполненияФайла.ДанныеДляПодписания = ?(СоздаватьЭлектронныеПодписиНаСервере, АдресДанных,
			ОписаниеФайла.ДвоичныеДанные);

	КонецЦикла;

	Возврат Результат;

КонецФункции

// Параметры:
//  ДанныеДляПодписания - см. ДанныеСообщенияДляПростойПодписи
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ПодписатьПростойПодписью(ДанныеДляПодписания, РезультатДействий)
	
	Пользователь = Пользователи.ТекущийПользователь();
	ДанныеСотрудникаПоОрганизациям = Новый Соответствие;
	
	Для Каждого ДанныеСообщения Из ДанныеДляПодписания Цикл
		
		Организация = ДанныеСообщения.Организация;
		ДанныеСотрудника = ДанныеСотрудникаПоОрганизациям[Организация];
		Если ДанныеСотрудника = Неопределено Тогда
			ДанныеСотрудника = ИнтеграцияЭДО.СведенияФизЛицаПользователя(Пользователь, Организация);
			ДанныеСотрудникаПоОрганизациям.Вставить(Организация, ДанныеСотрудника);
		КонецЕсли;
		
		УстановитьПростуюПодпись(ДанныеСообщения, Пользователь, ДанныеСотрудника, РезультатДействий);
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает простую подпись.
// 
// Параметры:
//  ДанныеСообщения - См. ДанныеСообщенияДляПростойПодписи
//  Пользователь - ОпределяемыйТип.Пользователь
//  ДанныеСотрудника - См. ИнтеграцияЭДО.СведенияФизЛицаПользователя
//  РезультатДействий - См. НовыйРезультатДействийПоЭДО
//
Процедура УстановитьПростуюПодпись(ДанныеСообщения, Пользователь, ДанныеСотрудника, РезультатДействий)
	
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ДанныеСообщения.Ссылка);
	
	ОрганизацияДляПодписания = Неопределено;
	ДанныеСообщения.Свойство("Организация", ОрганизацияДляПодписания);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		ДатаПодписи = ТекущаяУниверсальнаяДата();
		ДатаИзменения = ТекущаяДатаСеанса();
		
		СообщениеОбъект = ДанныеСообщения.Ссылка.ПолучитьОбъект();
		
		РезультатПодписания = ОбновитьСостояниеСообщенияПриПодписании(СообщениеОбъект, ДатаИзменения,
			КонтекстДиагностики,, ОрганизацияДляПодписания);
		
		Если Не ЗначениеЗаполнено(РезультатПодписания.СостояниеДокумента) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ЗаписатьДанныеПростойПодписи(СообщениеОбъект.ОсновнойФайл, Пользователь, ДанныеСотрудника, ДатаПодписи);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru = 'Ошибка установки простой подписи.'") + Символы.ПС
			+ ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(НСтр("ru = 'Установка подписи'"),
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
		Возврат;
	КонецПопытки;
	
	ПослеПодписания(СообщениеОбъект, РезультатПодписания, РезультатДействий);
	
КонецПроцедуры

// Записывает данные простой подписи.
// 
// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  Пользователь - ОпределяемыйТип.Пользователь
//  ДанныеСотрудника - Структура:
//  * ИмяПолное - Строка
//  * Должность - Строка
//  ДатаПодписи - Дата - универсальная дата компьютера
//
Процедура ЗаписатьДанныеПростойПодписи(ПодписанныйОбъект, Пользователь, ДанныеСотрудника, ДатаПодписи)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоПодписей
		|ИЗ
		|	РегистрСведений.ПростыеЭлектронныеПодписи КАК ПростыеЭлектронныеПодписи
		|ГДЕ
		|	ПростыеЭлектронныеПодписи.ПодписанныйОбъект = &ПодписанныйОбъект";
	
	Запрос.УстановитьПараметр("ПодписанныйОбъект", ПодписанныйОбъект);
	
	ПорядковыйНомер = 1;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПорядковыйНомер = Выборка.КоличествоПодписей + 1;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ПростыеЭлектронныеПодписи.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ПодписанныйОбъект = ПодписанныйОбъект;
	МенеджерЗаписи.ПорядковыйНомер = ПорядковыйНомер;
	МенеджерЗаписи.ДатаПодписи = ДатаПодписи;
	МенеджерЗаписи.ВладелецПодписи = ДанныеСотрудника.ИмяПолное;
	МенеджерЗаписи.Должность = ДанныеСотрудника.Должность;
	МенеджерЗаписи.Пользователь = Пользователь;
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Параметры:
//  ДанныеДляПодписания - Массив из см. ОписаниеНабораДанныхДляПодписанияНаСервере
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ПодписатьНаСервере(ДанныеДляПодписания, РезультатДействий)
	
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	
	ПодписанныеДокументы = Новый Массив;
	
	Для Каждого ОписаниеДанных Из ДанныеДляПодписания Цикл
		
		МенеджерКриптографии = КриптографияБЭД.МенеджерКриптографии(,,ОписаниеДанных.Программа);
		
		РезультатПодписания = КриптографияБЭД.Подписать(ОписаниеДанных, КонтекстДиагностики,, МенеджерКриптографии);
		Если РезультатПодписания = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ДанныеНабора Из РезультатПодписания.НаборДанных Цикл
			
			СвойстваПодписи = Неопределено;
			Если Не ДанныеНабора.Свойство("СвойстваПодписи", СвойстваПодписи) Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПроверки = КриптографияБЭД.ПроверитьПодпись(МенеджерКриптографии, ДанныеНабора.Данные,
				СвойстваПодписи.Подпись, КонтекстДиагностики);
			
			СвойстваПодписи.ПодписьВерна = РезультатПроверки.СвойстваПодписи.ПодписьВерна;
			СвойстваПодписи.ДатаПроверкиПодписи = РезультатПроверки.СвойстваПодписи.ДатаПроверкиПодписи;
			
			ПодписанныеДокументы.Добавить(ДанныеНабора);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОбработатьПодписанныеСообщения(ПодписанныеДокументы, РезультатДействий);
	
КонецПроцедуры

// Обрабатывает подписанные сообщения.
// 
// Параметры:
//  ПодписанныеСообщения - Массив из см. НовоеОписаниеПодписанногоСообщения
//  РезультатДействий - См. НовыйРезультатДействийПоЭДО
Процедура ОбработатьПодписанныеСообщения(ПодписанныеСообщения, РезультатДействий) Экспорт
	
	РезультатыПроверокПодписей = ПроверитьПодписиПоМЧДИсходящихСообщений(ПодписанныеСообщения, РезультатДействий);
	
	ПроверитьСНИЛСПодписантаМЧД(ПодписанныеСообщения, РезультатДействий);
	
	Для Каждого ПодписанноеСообщение Из ПодписанныеСообщения Цикл
		
		ОбновитьДанныеПриПодписании(ПодписанноеСообщение, РезультатыПроверокПодписей, РезультатДействий);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает пустое описание подписанного сообщения.
// 
// Возвращаемое значение:
//  Структура - Описание:
//  * Ссылка - ДокументСсылка.СообщениеЭДО
//  		 - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  * ПрисоединенныйФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// 						 - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  * СвойстваПодписи - Неопределено
//                    - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  * ВыбранныйСертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * Данные - Неопределено
//           - ДвоичныеДанные
//  * ОбновитьДанные - Булево
//  * ВыбраннаяМЧД   - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций 
//                   - Неопределено
//  * ТребуетсяМЧД   - Булево
//
Функция НовоеОписаниеПодписанногоСообщения()
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Ссылка", Документы.СообщениеЭДО.ПустаяСсылка());
	ОписаниеДанных.Вставить("ПрисоединенныйФайл", Справочники.СообщениеЭДОПрисоединенныеФайлы.ПустаяСсылка());
	ОписаниеДанных.Вставить("СвойстваПодписи", Неопределено);
	ОписаниеДанных.Вставить("ВыбранныйСертификат", Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка());
	ОписаниеДанных.Вставить("Данные", Неопределено);
	ОписаниеДанных.Вставить("ОбновитьДанные", Ложь);
	ОписаниеДанных.Вставить("ВыбраннаяМЧД", Неопределено);
	ОписаниеДанных.Вставить("ТребуетсяМЧД", Ложь);
	Возврат ОписаниеДанных;
КонецФункции

// Проверить подписи по МЧДИсходящих сообщений.
// 
// Параметры:
//  ПодписанныеСообщения - Массив из см. НовоеОписаниеПодписанногоСообщения
//  РезультатДействий - См. НовыйРезультатДействийПоЭДО
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - См. НовыйРезультатПроверкиПодписиПоМЧД
Функция ПроверитьПодписиПоМЧДИсходящихСообщений(ПодписанныеСообщения, РезультатДействий)
	
	РезультатыПроверокПодписей = Новый Соответствие;
	НаборСведенийОСтатусахМЧД = Новый Соответствие;
	
	ФайлыСообщений = Новый Массив;
	ВыбранныеМЧД = Новый Массив;
	Сообщения = Новый Массив;
	
	Для Каждого ПодписанноеСообщение Из ПодписанныеСообщения Цикл
		
		Если ПодписанноеСообщение.ТребуетсяМЧД И НЕ ЗначениеЗаполнено(ПодписанноеСообщение.ВыбраннаяМЧД)
			И ПодписанноеСообщение.Свойство("Доверенности") Тогда
			ВыбраннаяМЧД = ПодписанноеСообщение.Доверенности.Получить(ПодписанноеСообщение.ВыбранныйСертификат);
			Если ЗначениеЗаполнено(ВыбраннаяМЧД) Тогда
				ПодписанноеСообщение.ВыбраннаяМЧД = ВыбраннаяМЧД;
			КонецЕсли;
		КонецЕсли;
		
		Сообщения.Добавить(ПодписанноеСообщение.Ссылка);
		ФайлыСообщений.Добавить(ПодписанноеСообщение.ПрисоединенныйФайл);
		Если ЗначениеЗаполнено(ПодписанноеСообщение.ВыбраннаяМЧД)
			И ВыбранныеМЧД.Найти(ПодписанноеСообщение.ВыбраннаяМЧД) = Неопределено Тогда
			ВыбранныеМЧД.Добавить(ПодписанноеСообщение.ВыбраннаяМЧД);
		КонецЕсли;
	КонецЦикла;
	
	ИменаФайловСообщенийДляПроверки = ИменаФайловСообщенийДляПроверкиПоМЧД(ФайлыСообщений);
	
	НомераПоДоверенностям = МашиночитаемыеДоверенности.ПолучитьНомераДоверенностей(ВыбранныеМЧД);
	
	СведенияОрганизаций = СведенияОрганизацийПоСообщениямИнформацииОтправителя(Сообщения);
	
	Индекс = ПодписанныеСообщения.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		
		ПодписанноеСообщение = ПодписанныеСообщения[Индекс];
		ВыбраннаяМЧД = ПодписанноеСообщение.ВыбраннаяМЧД;

		Если ПодписанноеСообщение.Данные = Неопределено 
			ИЛИ НЕ ЗначениеЗаполнено(ВыбраннаяМЧД) Тогда
			Продолжить;
		КонецЕсли;
			
		ИННДоверителя = "";
		ИННДоверителяИзСодержанияМЧД = 
			МашиночитаемыеДоверенности.ИННДоверителя(ВыбраннаяМЧД);
		
		СведенияОДоверителе = СведенияОрганизаций[ПодписанноеСообщение.Ссылка];
		Если СведенияОДоверителе <> Неопределено Тогда
			ИННДоверителя = СведенияОДоверителе.ИНН;
		КонецЕсли;
		
		ИмяФайла = ИменаФайловСообщенийДляПроверки[ПодписанноеСообщение.ПрисоединенныйФайл];
		ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
		ОписаниеФайла.ДвоичныеДанные = ПодписанноеСообщение.Данные;
		Если ЗначениеЗаполнено(ИмяФайла) Тогда
			ОписаниеФайла.ИмяФайла = ИмяФайла;
		КонецЕсли;
		
		СодержаниеФайла = ФорматыЭДО.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
		Если СодержаниеФайла <> Неопределено Тогда
			
			ИННДоверителяИзСодержания = "";
			СвойстваСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПодписанноеСообщение.Ссылка, "Направление");
			
			ЭтоСведенияОЗакупкеКомиссионером = 
				СодержаниеФайла.ТипДокумента = Перечисления.ТипыДокументовЭДО.СведенияОЗакупкеКомиссионером;
			
			Если СодержаниеФайла.Свойство("Получатель")
				И СвойстваСообщения.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
					ИННДоверителяИзСодержания = СодержаниеФайла.Получатель.ИНН;
			ИначеЕсли СодержаниеФайла.Свойство("Отправитель") 
				И СвойстваСообщения.Направление = Перечисления.НаправленияЭДО.Исходящий Тогда
					ИННДоверителяИзСодержания = СодержаниеФайла.Отправитель.ИНН;
					Если ЭтоСведенияОЗакупкеКомиссионером Тогда
						ИННДоверителяИзСодержания = СодержаниеФайла.Получатель.ИНН;
					КонецЕсли;
			ИначеЕсли СвойстваСообщения.Направление = Перечисления.НаправленияЭДО.Интеркампани Тогда 
					ИННДоверителяИзСодержания = ИННДоверителяИзСодержанияМЧД;
			КонецЕсли;
			
			Если Не ПустаяСтрока(ИННДоверителяИзСодержания) Тогда
				ИННДоверителя = ИННДоверителяИзСодержания;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыбраннаяМЧД.НомерРодительскойДоверенности) Тогда
			ИННДоверителя = ИННДоверителяИзСодержанияМЧД;
		КонецЕсли;
		
		СвойстваПодписи = ПодписанноеСообщение.СвойстваПодписи;
		Если Не ТребуетсяМашиночитаемаяДоверенностьПоДаннымДокумента(ИННДоверителя, СвойстваПодписи.Сертификат) Тогда
			Продолжить;
		КонецЕсли;
		
		НомераМЧД = Новый Массив;
		СоответствиеИННДоверителяСНомерамиМЧД = Новый Соответствие();
		Если СодержаниеФайла <> Неопределено
			И ФорматыЭДО.ЗаполнениеДанныхДоверенностиДоступно(СодержаниеФайла) Тогда
			НомераМЧД = ФорматыЭДО.НомераМашиночитаемыхДоверенностей(ОписаниеФайла, СодержаниеФайла.Формат);
			СоответствиеИННДоверителяСНомерамиМЧД = ФорматыЭДО.ИННДоверителяМашиночитаемойДоверенности(ОписаниеФайла,
				СодержаниеФайла.Формат);
		КонецЕсли;
		
		НомерВыбраннойМЧД = НомераПоДоверенностям[ПодписанноеСообщение.ВыбраннаяМЧД];
		Если НомерВыбраннойМЧД <> Неопределено 
			И НомераМЧД.Найти(НомерВыбраннойМЧД) = Неопределено Тогда
				НомераМЧД.Добавить(НомерВыбраннойМЧД);
		КонецЕсли;
		
		Для Каждого НомерМЧД Из НомераМЧД Цикл
			Если СоответствиеИННДоверителяСНомерамиМЧД.Получить(НомерМЧД) = Неопределено Тогда
				СоответствиеИННДоверителяСНомерамиМЧД.Вставить(НомерМЧД, ИННДоверителя);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыПроверки = ПараметрыПроверкиПодписиПоМЧД(НомераМЧД,
			СвойстваПодписи, СоответствиеИННДоверителяСНомерамиМЧД, НаборСведенийОСтатусахМЧД, Ложь);
			
		ПараметрыПроверки.ЭлектронныйДокумент = ЭлектронныйДокументСообщенияЭДО(ПодписанноеСообщение.Ссылка);
		
		РезультатПроверки = МашиночитаемыеДоверенности.ПроверитьПодпись(ПараметрыПроверки);
		
		Если РезультатПроверки.ПодписьВерна Тогда
			РезультатыПроверокПодписей.Вставить(ПодписанноеСообщение.ПрисоединенныйФайл, РезультатПроверки);
		Иначе
			ПараметрыОшибки = НовыеПараметрыОшибкиПроверкиПодписиПоМЧД();
			ПараметрыОшибки.СвойстваПодписи = ПараметрыПроверки.СвойстваПодписи;
			СвойстваДоверенности = МашиночитаемыеДоверенности.ОбщиеСвойстваДоверенности(РезультатПроверки.Доверенность);
			ПараметрыОшибки.СвойстваДоверенности = СвойстваДоверенности;
			ЭтоМЧД = МашиночитаемыеДоверенностиКлиентСервер.ЭтоСсылкаНаДоверенность(ПодписанноеСообщение.Ссылка);
			ПараметрыОшибки.РезультатПроверки = РезультатПроверки;
			Если ЗначениеЗаполнено(ПодписанноеСообщение.Ссылка) И Не ЭтоМЧД Тогда
				ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ПодписанноеСообщение.Ссылка, "ЭлектронныйДокумент");
				Если Не ПустаяСтрока(ПараметрыПроверки.ТекстОшибки) Тогда
					ТекстОшибки = ПараметрыПроверки.ТекстОшибки;
				Иначе
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Электронная подпись документа %1 не верна.'"),
						ЭлектронныеДокументыЭДО.ПредставлениеДокумента(ЭлектронныйДокумент));
				КонецЕсли;
			Иначе
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Электронная подпись файла документа %1 не верна.'"),
					ПодписанноеСообщение.ПрисоединенныйФайл);
			КонецЕсли;
			ПараметрыОшибки.ТекстОшибки = ТекстОшибки;
			ДобавитьОшибкуПроверкиПодписиПоМЧД(РезультатДействий.КонтекстДиагностики, ПараметрыОшибки);
			ПодписанныеСообщения.Удалить(Индекс);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатыПроверокПодписей;
	
КонецФункции

// Проверяет СНИЛС подписанта МЧД
// 
// Параметры:
//  ПодписанныеСообщения - Массив из см. НовоеОписаниеПодписанногоСообщения
//  РезультатДействий - См. НовыйРезультатДействийПоЭДО
Процедура ПроверитьСНИЛСПодписантаМЧД(ПодписанныеСообщения, РезультатДействий)
	
	МассивМЧД = Новый Массив;
	МассивСертификатов = Новый Массив;
	
	Для Каждого ПодписанноеСообщение Из ПодписанныеСообщения Цикл
		Если МашиночитаемыеДоверенностиКлиентСервер.ЭтоСсылкаНаДоверенность(ПодписанноеСообщение.Ссылка) Тогда
			Если ЗначениеЗаполнено(ПодписанноеСообщение.ВыбранныйСертификат)
				И ЗначениеЗаполнено(ПодписанноеСообщение.Ссылка) Тогда
				МассивМЧД.Добавить(ПодписанноеСообщение.Ссылка);
				МассивСертификатов.Добавить(ПодписанноеСообщение.ВыбранныйСертификат);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивМЧД.Количество() = 0 Тогда
		Возврат
	КонецЕсли;

	ДанныеДоверенностей = МашиночитаемыеДоверенности.ДанныеСнилсПодписантов(МассивМЧД);
	СвойстваСертификатов = КриптографияБЭД.СвойстваСубъектаСертификатовПоСсылке(МассивСертификатов);
	
	Индекс = ПодписанныеСообщения.Количество();
	
	Пока Индекс > 0 Цикл
		
		Индекс = Индекс - 1;
		ПодписанноеСообщение = ПодписанныеСообщения[Индекс];
		
		Если ПодписанноеСообщение.Данные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СнилсИзМЧД = ДанныеДоверенностей[ПодписанноеСообщение.Ссылка];
		СвойстваСертификата = СвойстваСертификатов[ПодписанноеСообщение.ВыбранныйСертификат];
		
		Если СнилсИзМЧД = Неопределено ИЛИ СвойстваСертификата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СнилсИзСертификата = СвойстваСертификата.СНИЛС;
		
		Если СнилсИзСертификата = СнилсИзМЧД Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстОшибки = НСтр("ru = 'Различаются СНИЛС физического лица доверителя и сертификата'");
		ДобавитьОшибкуПроверкиСнилсПодписантаМЧД(РезультатДействий.КонтекстДиагностики, ТекстОшибки);
		ПодписанныеСообщения.Удалить(Индекс);
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет данные подписанных сообщений.
// 
// Параметры:
//  ПодписанноеСообщение - См. НовоеОписаниеПодписанногоСообщения
//  РезультатыПроверокПодписей - См. ПроверитьПодписиПоМЧДИсходящихСообщений
//  РезультатДействий - См. НовыйРезультатДействийПоЭДО
//
// Возвращаемое значение:
//  Булево
Функция ОбновитьДанныеПриПодписании(ПодписанноеСообщение, РезультатыПроверокПодписей, РезультатДействий)
	
	Если ТипЗнч(ПодписанноеСообщение.Ссылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций")
		Или ТипЗнч(ПодписанноеСообщение.Ссылка) = Тип("СправочникСсылка.МЧД003") Тогда
		СообщениеОбъект = ПодписанноеСообщение.Ссылка.ПолучитьОбъект();
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.Подписать,
			ПодписанноеСообщение.Ссылка);
		РезультатДействий.Вставить("СвойстваПодписи", ПодписанноеСообщение.СвойстваПодписи);
		РезультатДействий.Вставить("ПодписанныеДанные", ПодписанноеСообщение.Данные);
		Возврат Истина;
	КонецЕсли;
	
	Результат = Истина;
	Действие = Перечисления.ДействияПоЭДО.Подписать;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	АдресДанныхДляОбновления = "";
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ПодписанноеСообщение.Ссылка);
	
	ОрганизацияДляПодписания = Неопределено;
	Если ЗначениеЗаполнено(ПодписанноеСообщение.ВыбраннаяМЧД) Тогда
		НаправлениеЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодписанноеСообщение.Ссылка, "Направление");
		Если НаправлениеЭДО = Перечисления.НаправленияЭДО.Интеркампани Тогда
			СправочникМЧД = МашиночитаемыеДоверенности.СправочникМЧД(ПодписанноеСообщение.ВыбраннаяМЧД);
			СведенияМЧД = СправочникМЧД.СведенияМЧД(ПодписанноеСообщение.ВыбраннаяМЧД);	
			ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации", СведенияМЧД.ИННДоверителя, 
				СведенияМЧД.КППДоверителя, ОрганизацияДляПодписания, СведенияМЧД.ДатаВыдачи);
		Иначе
			ОрганизацияДляПодписания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ПодписанноеСообщение.Ссылка, "ЭлектронныйДокумент.Организация");
		КонецЕсли;
	КонецЕсли;
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоСообщению(ПодписанноеСообщение.Ссылка, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка.Заблокировать();
		
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		
		СообщениеОбъект = ПодписанноеСообщение.Ссылка.ПолучитьОбъект();
		
		РезультатПодписания = ОбновитьСостояниеСообщенияПриПодписании(СообщениеОбъект, ТекущаяДатаСеанса,
			КонтекстДиагностики, ПодписанноеСообщение.ВыбранныйСертификат, ОрганизацияДляПодписания);
		
		Если Не ЗначениеЗаполнено(РезультатПодписания.СостояниеДокумента) Тогда
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		УстановитьКлючевыеДатыПриПодписанииСообщения(СообщениеОбъект, ТекущаяДатаСеанса, РезультатПодписания);
		
		Если ПодписанноеСообщение.ОбновитьДанные Тогда
			АдресДанныхДляОбновления = ПоместитьВоВременноеХранилище(ПодписанноеСообщение.Данные);
			ИнформацияОФайле = Новый Структура;
			ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресДанныхДляОбновления);
			ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
			РаботаСФайлами.ОбновитьФайл(ПодписанноеСообщение.ПрисоединенныйФайл, ИнформацияОФайле);
		КонецЕсли;
		
		ЭлектроннаяПодпись.ДобавитьПодпись(ПодписанноеСообщение.ПрисоединенныйФайл, ПодписанноеСообщение.СвойстваПодписи);
		
		РезультатПроверки = РезультатыПроверокПодписей[ПодписанноеСообщение.ПрисоединенныйФайл];
		Если РезультатПроверки <> Неопределено Тогда
			ХешПодписи = КриптографияБЭД.ХешПодписи(ПодписанноеСообщение.СвойстваПодписи.Подпись);
			МашиночитаемыеДоверенности.ЗаписатьРезультатПроверкиПодписи(ПодписанноеСообщение.ПрисоединенныйФайл,
				ХешПодписи, РезультатПроверки);
		КонецЕсли;
		
		Если ПодписанноеСообщение.Свойство("ВыбраннаяМЧД") Тогда
			МЧД = ПодписанноеСообщение.ВыбраннаяМЧД;
			Если ЗначениеЗаполнено(МЧД) Тогда
				МашиночитаемыеДоверенности.ДобавитьДоверенностьОрганизации(ПодписанноеСообщение.ПрисоединенныйФайл, МЧД);			
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(АдресДанныхДляОбновления) Тогда
		УдалитьИзВременногоХранилища(АдресДанныхДляОбновления);
	КонецЕсли;
	
	Если Результат Тогда
		ПослеПодписания(СообщениеОбъект, РезультатПодписания, РезультатДействий);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обновляет состояние сообщения при установке подписи.
// 
// Параметры:
//  СообщениеОбъект - ДокументОбъект.СообщениеЭДО
//  ДатаИзменения - Дата - универсальная дата компьютера
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ВыбранныйСертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат, используемый при
//  подписании сообщения. Необязательный: если не указана, то будет использована пустая ссылка на справочник.
//  ОрганизацияДляПодписания - Неопределено,ОпределяемыйТип.Организация
//
// Возвращаемое значение:
//  Структура:
//  * СостояниеДокумента - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * ТаблицаПодписания - Неопределено
//                      - См. МаршрутыПодписанияБЭД.ОбновитьМаршрутПриПодписании
Функция ОбновитьСостояниеСообщенияПриПодписании(СообщениеОбъект, ДатаИзменения, КонтекстДиагностики, 
	ВыбранныйСертификат = Неопределено, ОрганизацияДляПодписания = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("СостояниеДокумента", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("ТаблицаПодписания", Неопределено);
	
	Действие = Перечисления.ДействияПоЭДО.Подписать;
	
	Если СообщениеОбъект.Состояние <> Перечисления.СостоянияСообщенийЭДО.Подписание Тогда
		ДобавитьОшибкуСостоянияСообщенияПриПодписании(Действие, СообщениеОбъект, КонтекстДиагностики);
		Возврат Результат;
	КонецЕсли;
	
	Если ВыбранныйСертификат = Неопределено Тогда
		ВыбранныйСертификат = КриптографияБЭД.ПустойСертификат();
	КонецЕсли;
	
	ОписанияЗапросов = Новый Массив;
	Отбор = МаршрутыПодписанияБЭД.НовыйОтборПроверкиТекущегоОбъектаДляПодписания();
	Отбор.Объект = "&Сообщение";
	ОписанияЗапросов.Добавить(МаршрутыПодписанияБЭД.ЗапросПроверкиТекущегоОбъектаДляПодписания(Отбор));
	
	ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(СообщениеОбъект.ЭлектронныйДокумент);
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(ТекстЗапросаПараметровОбновленияСостоянияДокумента(ЭтоВходящийЭДО));
	ТекстыЗапросов.Добавить(ТекстЗапросаПараметровСостоянияДокумента());
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, ОписанияЗапросов);
	Запрос.УстановитьПараметр("Сообщение", СообщениеОбъект.Ссылка);
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", СообщениеОбъект.ЭлектронныйДокумент);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатыЗапроса[0].Пустой() Тогда
		ДобавитьОшибкуМаршрутаПриПодписании(Действие, СообщениеОбъект, КонтекстДиагностики);
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыДокумента = РезультатыЗапроса[1].Выбрать();
	ПараметрыДокумента.Следующий();
	СостоянияСообщений = РезультатыЗапроса[2].Выгрузить();
	
	ПараметрыМаршрута = ОбновитьМаршрутПодписания(СообщениеОбъект, ВыбранныйСертификат, ОрганизацияДляПодписания);
	Результат.ТаблицаПодписания = ПараметрыМаршрута.ТаблицаПодписания;
	
	СообщениеОбъект.Статус = ?(МаршрутыПодписанияБЭД.ПодписаниеЗавершено(ПараметрыМаршрута.ТаблицаПодписания),
		Перечисления.СтатусыСообщенийЭДО.Подписан, Перечисления.СтатусыСообщенийЭДО.ЧастичноПодписан);
	
	СообщениеОбъект.ДатаИзмененияСтатуса = ДатаИзменения;
	СообщениеОбъект.Состояние = РегламентыЭДО.СостояниеСообщения(СообщениеОбъект, ПараметрыДокумента);
	СообщениеОбъект.Записать();
	
	НайденнаяСтрока = СостоянияСообщений.Найти(СообщениеОбъект.Ссылка, "Ссылка");
	НайденнаяСтрока.Состояние = СообщениеОбъект.Состояние;
	
	ДополненияСостоянийЭДО = ДополненияСостоянийЭДОПриПодписании(СообщениеОбъект, ПараметрыДокумента.ВидПодписи,
		ПараметрыМаршрута.ВесМаршрута);
	
	Комментарий = КомментарийКСостояниюДокумента(РезультатыЗапроса[3]);
	
	Результат.СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияСообщений,
		СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики, ДополненияСостоянийЭДО, Комментарий);
	
	РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Действие, ПараметрыДокумента, Результат.СостояниеДокумента, 
		СообщениеОбъект.ДатаИзмененияСтатуса, СообщениеОбъект);
	
	Возврат Результат;
	
КонецФункции

// Возвращает контекст интерактивного подписания.
// 
// Параметры:
//  ДанныеДляПодписания - Массив из См. ОписаниеНабораДанныхДляИнтерактивногоПодписания
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  ИтогДействийПоЭДО - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//
// Возвращаемое значение:
//  Структура:
//  * АдресКонтекстаНаСервере - Строка
//  * ДанныеДляПодписания - Массив из См. ОписаниеНабораДанныхДляИнтерактивногоПодписания
//  * КонтекстНаСервере - См. КонтекстИнтерактивногоПодписанияНаСервере
//
Функция ПараметрыИнтерактивногоПодписания(ДанныеДляПодписания, ПараметрыВыполнения, ИтогДействийПоЭДО)
	Контекст = Новый Структура;
	Контекст.Вставить("АдресКонтекстаНаСервере", "");
	Контекст.Вставить("ДанныеДляПодписания", ДанныеДляПодписания);
	Контекст.Вставить("КонтекстНаСервере", КонтекстИнтерактивногоПодписанияНаСервере(
		ПараметрыВыполнения, ИтогДействийПоЭДО));
	Возврат Контекст;
КонецФункции

// Возвращает структура контекста на сервере при интерактивном подписании документа.
// 
// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  ИтогДействийПоЭДО - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//
// Возвращаемое значение:
//  Структура:
//  * ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  * ИтогДействийПоЭДО - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  * АдресаДанныхДляОчистки - Массив из Строка
Функция КонтекстИнтерактивногоПодписанияНаСервере(ПараметрыВыполнения, ИтогДействийПоЭДО)
	КонтекстНаСервере = Новый Структура;
	КонтекстНаСервере.Вставить("ПараметрыВыполнения", ПараметрыВыполнения);
	КонтекстНаСервере.Вставить("ИтогДействийПоЭДО", ИтогДействийПоЭДО);
	КонтекстНаСервере.Вставить("АдресаДанныхДляОчистки", Новый Массив);
	Возврат КонтекстНаСервере;
КонецФункции

// Параметры:
//  КонтекстПодписания - см. КонтекстИнтерактивногоПодписанияНаСервере
Процедура ПоместитьДанныеДляПодписанияВХранилище(КонтекстПодписания)
	
	СоздаватьЭлектронныеПодписиНаСервере = ЭлектроннаяПодпись.СоздаватьЭлектронныеПодписиНаСервере();
	
	АдресаДанныхДляОчистки = КонтекстПодписания.КонтекстНаСервере.АдресаДанныхДляОчистки;
	
	Для Каждого ОписаниеДанных Из КонтекстПодписания.ДанныеДляПодписания Цикл
		
		Для Каждого ДанныеСообщения Из ОписаниеДанных.НаборДанных Цикл
			
			ДвоичныеДанныеСообщения = ?(ДанныеСообщения.Данные = Неопределено,
				ДанныеСообщения.ИсходныеДвоичныеДанные, ДанныеСообщения.Данные);
			
			Если ДвоичныеДанныеСообщения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			АдресДанных = "";
			
			Если ДанныеСообщения.ДанныеИзменены Тогда
				АдресДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСообщения, Новый УникальныйИдентификатор);
				ДанныеСообщения.АдресДанныхДляОбновления = АдресДанных;
			КонецЕсли;
			
			Если СоздаватьЭлектронныеПодписиНаСервере Тогда
				Если ПустаяСтрока(АдресДанных) Тогда
					АдресДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСообщения, Новый УникальныйИдентификатор);
					АдресаДанныхДляОчистки.Добавить(АдресДанных);
				КонецЕсли;
				ДанныеСообщения.Данные = АдресДанных;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
//  СообщениеОбъект - ДокументОбъект.СообщениеЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ДобавитьОшибкуСостоянияСообщенияПриПодписании(Действие, СообщениеОбъект, КонтекстДиагностики)
	ПредставлениеДействия = НРег(Действие);
	ВидОперации = ВидОперацииПриДобавленииОшибки(ПредставлениеДействия);
	КраткоеПредставлениеОшибки = НСтр("ru = 'Состояние документа изменено в процессе подписания.'");
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(КраткоеПредставлениеОшибки);
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Документ: %1'"), СообщениеОбъект.Ссылка));
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Состояние: %1'"), СообщениеОбъект.Состояние));
	ПодробноеПредставлениеОшибки = СтрСоединить(МассивСтрок, Символы.ПС);
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
		ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
		ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
КонецПроцедуры

// Параметры:
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
//  СообщениеОбъект - ДокументОбъект.СообщениеЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ДобавитьОшибкуМаршрутаПриПодписании(Действие, СообщениеОбъект, КонтекстДиагностики)
	ПредставлениеДействия = НРег(Действие);
	ВидОперации = ВидОперацииПриДобавленииОшибки(ПредставлениеДействия);
	КраткоеПредставлениеОшибки = НСтр("ru = 'Маршрут изменен в процессе подписания.'");
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(КраткоеПредставлениеОшибки);
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Документ: %1'"), СообщениеОбъект.Ссылка));
	ПодробноеПредставлениеОшибки = СтрСоединить(МассивСтрок, Символы.ПС);
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
		ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
		ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
КонецПроцедуры

// Параметры:
//  СообщениеОбъект - ДокументОбъект.СообщениеЭДО
//  РезультатПодписания - см. ОбновитьСостояниеСообщенияПриПодписании
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ПослеПодписания(СообщениеОбъект, РезультатПодписания, РезультатДействий)
	
	ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.Подписать,
		СообщениеОбъект.ЭлектронныйДокумент);
	
	ОповеститьОДокументеКПодписанию(СообщениеОбъект, РезультатПодписания.ТаблицаПодписания);
	
	Если СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.Подписан
		И (СообщениеОбъект.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
			ИЛИ СообщениеОбъект.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя) Тогда
		ЭлектронныеДокументыЭДОСобытия.ПослеПодписанияЭлектронногоДокумента(СообщениеОбъект.ЭлектронныйДокумент,
			РезультатДействий.КонтекстДиагностики);
	КонецЕсли;
	
	Если РезультатПодписания.СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен
		ИЛИ РезультатПодписания.СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением Тогда
		ЭлектронныеДокументыЭДОСобытия.ПослеЗавершенияОбменаЭлектроннымДокументом(СообщениеОбъект.ЭлектронныйДокумент,
			РезультатДействий.КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  СообщениеОбъект - ДокументОбъект.СообщениеЭДО
//  ТекущаяДатаСеанса - Дата
//  РезультатПодписания - см. ОбновитьСостояниеСообщенияПриПодписании
Процедура УстановитьКлючевыеДатыПриПодписанииСообщения(СообщениеОбъект, ТекущаяДатаСеанса, РезультатПодписания)
	
	ЭлектронныйДокумент = СообщениеОбъект.ЭлектронныйДокумент;
	ТипЭлементаРегламента = СообщениеОбъект.ТипЭлементаРегламента;
	
	ЭтоВходящийДокумент = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент);
	
	ЭтоИнформацияОтправителя = ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	ЭтоОтветныйТитул = ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя;
	
	Если (ЭтоВходящийДокумент И (ЭтоИнформацияОтправителя Или ЭтоОтветныйТитул))
		Или (Не ЭтоВходящийДокумент И ЭтоИнформацияОтправителя) Тогда
		
		УстановитьДатуПодписания(ЭлектронныйДокумент, ТекущаяДатаСеанса);
		
	КонецЕсли;
	
	ЭтоВходящееПредложениеОбАннулировании =
		ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА
		И СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Входящий;
	
	Если ЭтоВходящееПредложениеОбАннулировании Тогда
		
		УстановитьДатуАннулирования(ЭлектронныйДокумент, ТекущаяДатаСеанса);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ТекущаяДатаСеанса - Дата
Процедура УстановитьДатуПодписания(ЭлектронныйДокумент, ТекущаяДатаСеанса)
	
	ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
	ДокументОбъект.ДатаПодписания = ТекущаяДатаСеанса;
	ДокументОбъект.Записать();
	
КонецПроцедуры

// Выполняет заполнение в файле переданного сообщения сведения о подписях информации отправителя.
// 
// Параметры:
//  ОписаниеФайла - см. РаботаСФайламиБЭД.НовоеОписаниеФайла
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//                      - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
// Возвращаемое значение:
//  см. ФорматыЭДО.ЗаполнитьЭлектронныеПодписи
//
Функция ЗаполнитьЭлектронныеПодписи(ОписаниеФайла, ЭлектронныйДокумент) Экспорт
	
	ОсновнойФайл = ОсновнойФайлИнформацииОтправителя(ЭлектронныйДокумент);
	Если ОсновнойФайл = Неопределено Тогда
		Возврат ОписаниеФайла;
	КонецЕсли;
	
	МассивФайловИнформацииОтправителя = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОсновнойФайл);
	УстановленныеПодписиОбъектов = КриптографияБЭД.УстановленныеПодписиОбъектов(МассивФайловИнформацииОтправителя);
		
	УстановленныеПодписи = УстановленныеПодписиОбъектов.Получить(ОсновнойФайл);
	
	Если УстановленныеПодписи = Неопределено Тогда
		Возврат ОписаниеФайла;
	КонецЕсли;
	
	НовоеОписаниеДанных = ФорматыЭДО.ЗаполнитьЭлектронныеПодписи(ОписаниеФайла, УстановленныеПодписи);
	Возврат НовоеОписаниеДанных;
	
КонецФункции

#КонецОбласти

#Область ПодготовитьКОтправке

// Выполняет действие подготовить к отправке для документов и пакетов документов.
// 
// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
//
Процедура ВыполнитьДействиеПодготовитьКОтправке(ПараметрыВыполнения, РезультатДействий)
	
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, 0);
	
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	
	ПакетыДокументов = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПакетыДокументов, ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов);
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		СообщенияДляОбработки = Новый Соответствие;
		
		Отбор = НовыйОтборСообщенийДляОбработкиДействия();
		Отбор.Состояние.Добавить(Перечисления.СостоянияСообщенийЭДО.ПодготовкаКОтправке);
		Отбор.ПолучатьСообщенияПоИдентификаторамОрганизаций = Истина;
		
		Если ПараметрыВыполнения.ОбработатьТолькоИзвещения Тогда
			ИзвещениеОПолучении = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении);
			Отбор.ВидСообщения.Добавить(ИзвещениеОПолучении);
		КонецЕсли;
		
		ВыборкаСообщенийИПакетов = ВыборкаСообщенийИПакетовДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий, Отбор);
		Пока ВыборкаСообщенийИПакетов.Следующий() Цикл
			ЭтоИДПакета = ЗначениеЗаполнено(ВыборкаСообщенийИПакетов.ИдентификаторПакета);
			Если ЭтоИДПакета И ПакетыДокументов.Найти(ВыборкаСообщенийИПакетов.ИдентификаторПакета) = Неопределено Тогда
				
				СостоянияДокументовПакета = ПакетыДокументовЭДО.СостоянияДокументовПакета(ВыборкаСообщенийИПакетов.ИдентификаторПакета);
				ДоступнаПодокументнаяРаботаСПакетом = ПакетыДокументовЭДО.ДоступнаПодокументнаяРаботаСПакетом(СостоянияДокументовПакета);
				Если ДоступнаПодокументнаяРаботаСПакетом Тогда
					СообщенияДляОбработки.Вставить(ВыборкаСообщенийИПакетов.Ссылка, Ложь);
				Иначе
					ПакетыДокументов.Добавить(ВыборкаСообщенийИПакетов.ИдентификаторПакета);
				КонецЕсли;
				
			КонецЕсли;
			Если НЕ ЭтоИДПакета Тогда
				СообщенияДляОбработки.Вставить(ВыборкаСообщенийИПакетов.Ссылка, Ложь);
			КонецЕсли;
		КонецЦикла;
	
		Для Каждого СообщениеОбработано Из СообщенияДляОбработки Цикл
			Если СообщениеОбработано.Значение Тогда
				Продолжить;
			КонецЕсли;
			ОбработанныеСообщения = Новый Массив;
			Результат = ПодготовитьКОтправкеДокумент(СообщениеОбработано.Ключ, КонтекстДиагностики, СообщенияДляОбработки,
				ОбработанныеСообщения);
			Если Не Результат Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого СообщениеОбъект Из ОбработанныеСообщения Цикл
				СообщенияДляОбработки.Вставить(СообщениеОбъект.Ссылка, Истина);
				ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.ПодготовитьКОтправке,
					СообщениеОбъект.ЭлектронныйДокумент);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ПакетДокументов Из ПакетыДокументов Цикл
		ПодготовитьКОтправкеДокументыПакета(ПакетДокументов, РезультатДействий);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ТекстОшибки - Строка
//
// Возвращаемое значение:
//  Булево
Функция РазмерДокументовНеПревышаетОграничений(ИдентификаторПакета, ЭлектронныйДокумент, ТекстОшибки)
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИдентификаторПакета", ИдентификаторПакета);
	Параметры.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
	ОграниченияИОбъемПакета = ПакетыДокументовЭДО.ОграниченияИОбъемПакета(Параметры);
	ПредставлениеДокумента = Строка(ЭлектронныйДокумент);
	
	РезультатПроверкиПревышения = ПакетыДокументовЭДОКлиентСервер.ПроверкаПревышенияМаксимальногоКоличестваДокументовВПакете(
		ОграниченияИОбъемПакета.ОграниченияОбъемаПакетаДокументов, ОграниченияИОбъемПакета.ОбъемПакетаДокументов, 0);
	Если РезультатПроверкиПревышения.Превышено Тогда
		
		ТекстОшибки = ПакетыДокументовЭДО.ТекстОПревышенииМаксимальногоКоличестваДокументовПередОтправкой(
			ПредставлениеДокумента, РезультатПроверкиПревышения.ПревышаемыеОграничения);
		Возврат Ложь;
		
	КонецЕсли;
	
	РезультатПроверкиПревышения = ПакетыДокументовЭДОКлиентСервер.ПроверкаПревышенияМаксимальногоРазмераПакета(
		ОграниченияИОбъемПакета.ОграниченияОбъемаПакетаДокументов, ОграниченияИОбъемПакета.ОбъемПакетаДокументов, 0);
	Если РезультатПроверкиПревышения.Превышено Тогда
		
		ТекстОшибки = ?(ОграниченияИОбъемПакета.ОбъемПакетаДокументов.КоличествоДокументов = 1,
			ПакетыДокументовЭДО.ТекстОПревышенииМаксимальногоРазмераДокументаПередОтправкой(
				ПредставлениеДокумента, РезультатПроверкиПревышения.ПревышаемыеОграничения),
			ПакетыДокументовЭДО.ТекстОПревышенииМаксимальногоРазмераПакетаПередОтправкой(
				ПредставлениеДокумента, РезультатПроверкиПревышения.ПревышаемыеОграничения));
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Подготовить к отправке документ.
// 
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  СообщенияДляОбработки - Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.СообщениеЭДО
//  * Значение - Булево
//  ОбработанныеСообщения - Массив из ДокументОбъект.СообщениеЭДО
//  ИдентификаторПакета - Неопределено,УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Булево - Признак успешного выполнения.
Функция ПодготовитьКОтправкеДокумент(Сообщение, КонтекстДиагностики, СообщенияДляОбработки, ОбработанныеСообщения,
	ИдентификаторПакета = Неопределено)
	
	Результат = Ложь;
	
	Действие = Перечисления.ДействияПоЭДО.ПодготовитьКОтправке;
	
	ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ЭлектронныйДокумент");
	ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент);
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоСообщению(Сообщение, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		ТекстОшибки = "";
		Если Не ЭтоВходящийЭДО И Не РазмерДокументовНеПревышаетОграничений(ИдентификаторПакета, ЭлектронныйДокумент,
			ТекстОшибки) Тогда
			
			ДобавитьОшибкуОграниченияДокумента(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат Результат;
			
		КонецЕсли;
		
		ЗаблокироватьДанныеСообщенияДляИзменения(Сообщение, ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		Если СообщениеОбъект.ЭлектронныйДокумент <> ЭлектронныйДокумент
			Или ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(СообщениеОбъект.ЭлектронныйДокумент) <> ЭтоВходящийЭДО Тогда
			ТекстОшибки = НСтр("ru='не удалось заблокировать данные электронного документа'");
			ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Если СообщениеОбъект.Состояние <> Перечисления.СостоянияСообщенийЭДО.ПодготовкаКОтправке Тогда
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(ТекстЗапросаДанныхДляПодготовкиКОтправке(ЭтоВходящийЭДО));
		Запрос.УстановитьПараметр("Сообщение", Сообщение);
		ТекстыЗапроса.Добавить(ТекстЗапросаПараметровСостоянияДокумента());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		
		ТитулыОтправителей = Новый Массив;
		ТитулыОтправителей.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителей);
		КонецЕсли;
		Запрос.УстановитьПараметр("ТитулыОтправителей", ТитулыОтправителей);
		
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		Если РезультатыЗапроса[1].Пустой()
			ИЛИ РезультатыЗапроса[2].Пустой()
			ИЛИ РезультатыЗапроса[3].Пустой()
			ИЛИ РезультатыЗапроса[4].Пустой() Тогда
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ТребуетсяПоискПакета = Не ЭтоВходящийЭДО
			И СообщениеОбъект.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
			И ИдентификаторПакета = Неопределено;
		
		Если ТребуетсяПоискПакета Тогда
			ПакетыДокументовЭДО.БлокировкаСоставаПакетаДокумента(ЭлектронныйДокумент).Заблокировать();
			ИдентификаторПакета = ПакетыДокументовЭДО.ИдентификаторПакетаДокумента(ЭлектронныйДокумент);
			Если ЗначениеЗаполнено(ИдентификаторПакета) Тогда
				Подготовлены = ПодготовитьСообщенияПакетаКОтправке(ИдентификаторПакета, Сообщение,
					СообщенияДляОбработки, ОбработанныеСообщения, КонтекстДиагностики);
				Если Не Подготовлены Тогда
					ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
					ОтменитьТранзакцию();
					Возврат Результат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СвойстваДокумента = РезультатыЗапроса[1].Выбрать();
		СвойстваДокумента.Следующий();
		ТипыСообщений = РезультатыЗапроса[2].Выбрать();
		ТипыСообщений.Следующий();
		ФайлыСообщения = РезультатыЗапроса[3].Выгрузить();
		СостоянияСообщений = РезультатыЗапроса[4].Выгрузить();
		ИдентификаторыОснований = РезультатыЗапроса[5].Выгрузить();
		
		ДанныеОбъектов = СинхронизацияЭДО.НовыеДанныеОбъектов();
		ДанныеОбъекта = СинхронизацияЭДО.ДобавитьДанныеОбъекта(ДанныеОбъектов);
		
		ЗаполнитьДанныеОбъектаДляПодготовкиКОтправке(ДанныеОбъекта, СвойстваДокумента, СообщениеОбъект,
			ТипыСообщений.ТипСообщения, ФайлыСообщения, ИдентификаторыОснований, КонтекстДиагностики);
		
		Если ДанныеОбъекта.Отказ Тогда
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		РезультатПодготовки = СинхронизацияЭДО.ПодготовитьОбъектыКОтправке(ДанныеОбъектов, КонтекстДиагностики);
		
		ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ПустаяСсылка();
		
		Если РезультатПодготовки.Отказ Тогда
			Если ДанныеОбъекта.ТипОшибкиОтправки = СинхронизацияЭДО.ТипыОшибокОтправки().ОжидаетсяОтветНаПриглашение Тогда
				ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ОжидаетсяОтветНаПриглашение;
			Иначе
				ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
				ОтменитьТранзакцию();
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
		Комментарий = КомментарийКСостояниюДокумента(РезультатыЗапроса[6]);
		
		Если ЗначениеЗаполнено(ПричинаОстановки) Тогда
			ОстановитьДокументПриПодготовкиКОтправке(СообщениеОбъект, ПричинаОстановки, СостоянияСообщений,
				КонтекстДиагностики, Комментарий);
		Иначе
			ОтметитьПодготовкуСообщенияКОтправке(СообщениеОбъект, СвойстваДокумента, СостоянияСообщений,
				КонтекстДиагностики, Комментарий);
		КонецЕсли;
		
		ОбработанныеСообщения.Добавить(СообщениеОбъект);
		
		Результат = Истина;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Подготавливает документы пакета к отправке.
// 
// Параметры:
//  ПакетДокументов - УникальныйИдентификатор
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ПодготовитьКОтправкеДокументыПакета(ПакетДокументов, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.ПодготовитьКОтправке;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	ДокументыПакета = Новый Массив;
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоПакету(ПакетДокументов, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		ПакетыДокументовЭДО.БлокировкаПакетаДокументов(ПакетДокументов).Заблокировать();
		
		ДокументыПакета = ПакетыДокументовЭДО.ДокументыПакета(ПакетДокументов);
		
		ЗаблокироватьСообщенияПакетаДляИзменения(ДокументыПакета);
		
		ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ДокументыПакета[0]);
		
		ТекстОшибки = "";
		Если Не ЭтоВходящийЭДО И Не РазмерДокументовНеПревышаетОграничений(ПакетДокументов, ДокументыПакета[0],
			ТекстОшибки) Тогда
			
			ДобавитьОшибкуОграниченияПакета(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат;
			
		КонецЕсли;
		
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(ТекстЗапросаДанныхДляПодготовкиКОтправке(ЭтоВходящийЭДО, Истина));
		ТекстыЗапроса.Добавить(ТекстЗапросаСостоянийДокументов());
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныеДокументы", ДокументыПакета);
		
		ТитулыОтправителей = Новый Массив;
		ТитулыОтправителей.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителей);
		КонецЕсли;
		Запрос.УстановитьПараметр("ТитулыОтправителей", ТитулыОтправителей);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		Если РезультатыЗапроса[1].Пустой()
			ИЛИ РезультатыЗапроса[2].Пустой()
			ИЛИ РезультатыЗапроса[3].Пустой()
			ИЛИ РезультатыЗапроса[4].Пустой()
			ИЛИ РезультатыЗапроса[6].Пустой() Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		СостоянияДокументовЭДО = РезультатыЗапроса[6].Выгрузить();
		
		НаборСостояний = СостоянияДокументовЭДО.ВыгрузитьКолонку("Состояние");
		СостоянияОднородны = ПакетыДокументовЭДО.СостоянияДокументовПакетаОднородны(НаборСостояний, ПакетДокументов,
			Действие, КонтекстДиагностики);
		Если Не СостоянияОднородны Тогда
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		СвойстваДокументаСообщения = РезультатыЗапроса[1].Выбрать();
		ТипыСообщений = РезультатыЗапроса[2].Выгрузить();
		ФайлыСообщений = РезультатыЗапроса[3].Выгрузить();
		ИдентификаторыОснованийДокументов = РезультатыЗапроса[5].Выгрузить();
		
		СостоянияСообщенийДокументов = Новый Соответствие;
		ВыборкаСостоянийСообщений = РезультатыЗапроса[4].Выбрать();
		Пока ВыборкаСостоянийСообщений.Следующий() Цикл
			СостоянияСообщений = СостоянияСообщенийДокументов[ВыборкаСостоянийСообщений.ЭлектронныйДокумент];
			Если СостоянияСообщений = Неопределено Тогда
				СостоянияСообщений = РегламентыЭДО.НовыеСостоянияЭлементовРегламента();
				СостоянияСообщений.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.СообщениеЭДО"));
				СостоянияСообщенийДокументов.Вставить(ВыборкаСостоянийСообщений.ЭлектронныйДокумент, СостоянияСообщений);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СостоянияСообщений.Добавить(), ВыборкаСостоянийСообщений);
		КонецЦикла;
		
		РезультатПодготовки = Неопределено;
		ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ПустаяСсылка();
		
		ДанныеОсновныхОбъектов = СинхронизацияЭДО.НовыеДанныеОбъектов();
		
		ОбъектыСообщений = Новый Соответствие();
		
		Пока СвойстваДокументаСообщения.Следующий() Цикл
			
			СообщениеОбъект = СвойстваДокументаСообщения.Сообщение.ПолучитьОбъект();
			Если СообщениеОбъект.Состояние <> Перечисления.СостоянияСообщенийЭДО.ПодготовкаКОтправке Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектыСообщений.Вставить(СвойстваДокументаСообщения.Сообщение, СообщениеОбъект);
			
			Если ЗначениеЗаполнено(ПричинаОстановки) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоОсновнойОбъект = Не ЭтоВходящийЭДО
				И СообщениеОбъект.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
			ДанныеОбъектов = ?(ЭтоОсновнойОбъект, ДанныеОсновныхОбъектов, СинхронизацияЭДО.НовыеДанныеОбъектов());
			ДанныеОбъекта = СинхронизацияЭДО.ДобавитьДанныеОбъекта(ДанныеОбъектов);
			
			Отбор = Новый Структура("Сообщение", СообщениеОбъект.Ссылка);
			ФайлыСообщения = ФайлыСообщений.НайтиСтроки(Отбор);
			
			ТипСообщения = ТипыСообщений.Найти(СообщениеОбъект.Ссылка, "Сообщение").ТипСообщения;
			
			Отбор = Новый Структура("ЭлектронныйДокумент", СообщениеОбъект.ЭлектронныйДокумент);
			ИдентификаторыОснований = ИдентификаторыОснованийДокументов.НайтиСтроки(Отбор);
			
			ЗаполнитьДанныеОбъектаДляПодготовкиКОтправке(ДанныеОбъекта, СвойстваДокументаСообщения, СообщениеОбъект,
				ТипСообщения, ФайлыСообщения, ИдентификаторыОснований, КонтекстДиагностики);
			
			Если ДанныеОбъекта.Отказ Тогда
				ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			Если ЭтоОсновнойОбъект Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПодготовки = СинхронизацияЭДО.ПодготовитьОбъектыКОтправке(ДанныеОбъектов, КонтекстДиагностики);
			
			Если РезультатПодготовки.Отказ Тогда
				ПричинаОстановки = ПричинаОстановкиПодготовкиОбъектаКОтправке(ДанныеОбъектов);
				Если Не ЗначениеЗаполнено(ПричинаОстановки) Тогда
					ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ПричинаОстановки)
			И ЗначениеЗаполнено(ДанныеОсновныхОбъектов) Тогда
			
			НеподходящиеДокументы = Новый Массив;
			СвойстваСообщений = СвойстваОсновныхСообщенийДокументовПакета(ДокументыПакета);
			Если Не ПроверитьСостоянияОсновныхСообщенийПакета(СвойстваСообщений, НеподходящиеДокументы) Тогда
				Если Не ЕстьДействияПоДокументамПакета(РезультатДействий.Итог.ОбработанныеДокументы, ДокументыПакета) Тогда
					ДобавитьОшибкуОжиданияДругихДокументовПакета(ПакетДокументов, НеподходящиеДокументы, КонтекстДиагностики);
				КонецЕсли;
				ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			РезультатПодготовки = СинхронизацияЭДО.ПодготовитьОбъектыКОтправке(ДанныеОсновныхОбъектов, КонтекстДиагностики);
			
			Если РезультатПодготовки.Отказ Тогда
				ПричинаОстановки = ПричинаОстановкиПодготовкиОбъектаКОтправке(ДанныеОсновныхОбъектов);
				Если Не ЗначениеЗаполнено(ПричинаОстановки) Тогда
					ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		СвойстваДокументаСообщения.Сбросить();
		
		Пока СвойстваДокументаСообщения.Следующий() Цикл
			
			СообщениеОбъект = ОбъектыСообщений[СвойстваДокументаСообщения.Сообщение];
			Если СообщениеОбъект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СостоянияСообщений = СостоянияСообщенийДокументов[СообщениеОбъект.ЭлектронныйДокумент];
			Если СостоянияСообщений = Неопределено Тогда
				ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			Комментарий = "";
			ПараметрыСостояния = СостоянияДокументовЭДО.Найти(СообщениеОбъект.ЭлектронныйДокумент, "ЭлектронныйДокумент");
			Если ПараметрыСостояния <> Неопределено Тогда
				Комментарий = ПараметрыСостояния.Комментарий;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПричинаОстановки) Тогда
				ОстановитьДокументПриПодготовкиКОтправке(СообщениеОбъект, ПричинаОстановки, СостоянияСообщений,
					КонтекстДиагностики, Комментарий);
			Иначе
				ОтметитьПодготовкуСообщенияКОтправке(СообщениеОбъект, СвойстваДокументаСообщения, СостоянияСообщений,
					КонтекстДиагностики, Комментарий);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Для Каждого ЭлектронныйДокумент Из ДокументыПакета Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие, ЭлектронныйДокумент);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ЭтоВходящийЭДО - Булево
//  ОтборПоДокументамПакета - Булево
// 
// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаДанныхДляПодготовкиКОтправке(ЭтоВходящийЭДО, ОтборПоДокументамПакета = Ложь)
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СообщениеЭДО.ВидСообщения КАК ВидСообщения,
		|	СообщениеЭДО.ОсновнойФайл КАК ОсновнойФайл
		|ПОМЕСТИТЬ СообщенияДляОтправки
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенийЭДО.ПодготовкаКОтправке)
		|	И &УсловиеОтбора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Сообщение,
		|	ДокументЭДО.Ссылка КАК Ссылка,
		|	ДокументЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ДокументЭДО.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота,
		|	ДокументЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ДокументЭДО.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ДокументЭДО.ИдентификаторСвязи КАК ИдентификаторСвязи,
		|	ДокументЭДО.Организация КАК Организация,
		|	ДокументЭДО.Контрагент КАК Контрагент,
		|	ДокументЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ДокументЭДО.СпособОбмена КАК СпособОбмена,
		|	ДокументЭДО.ТипРегламента КАК ТипРегламента,
		|	ДокументЭДО.ТребуетсяИзвещение КАК ТребуетсяИзвещение,
		|	ДокументЭДО.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	ДокументЭДО.ОбменБезПодписи КАК ОбменБезПодписи,
		|	ДокументЭДО.Остановлен КАК Остановлен,
		|	ДокументЭДО.ПричинаОстановки КАК ПричинаОстановки,
		|	ДокументЭДО.Исправлен КАК Исправлен,
		|	ДокументЭДО.ВидДокумента КАК ВидДокумента,
		|	ДокументЭДО.НомерДокумента КАК НомерДокумента,
		|	ДокументЭДО.ДатаДокумента КАК ДатаДокумента,
		|	ДокументЭДО.СуммаДокумента КАК СуммаДокумента,
		|	ДокументЭДО.СодержитМаркируемыеТовары КАК СодержитМаркируемыеТовары,
		|	ДокументЭДО.Ответственный КАК Ответственный
		|ИЗ
		|	СообщенияДляОтправки КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИмяТаблицыДокументаЭДО КАК ДокументЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ДокументЭДО.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Сообщение,
		|	ВидыДокументовЭДО.ТипДокумента КАК ТипСообщения
		|ИЗ
		|	СообщенияДляОтправки КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО СообщениеЭДО.ВидСообщения = ВидыДокументовЭДО.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Сообщение,
		|	СообщениеЭДО.ОсновнойФайл = ПрисоединенныеФайлы.Ссылка КАК ЭтоОсновнойФайл,
		|	ПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла КАК ПолноеИмяФайла,
		|	ПрисоединенныеФайлы.Расширение КАК Расширение,
		|	ПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания
		|ИЗ
		|	СообщенияДляОтправки КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО СообщениеЭДО.Ссылка = ПрисоединенныеФайлы.ВладелецФайла
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.Дата КАК Дата,
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СообщениеЭДО.Состояние КАК Состояние,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.Направление КАК Направление
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент В
		|		(ВЫБРАТЬ
		|			ЭлектронныйДокумент
		|		ИЗ
		|			СообщенияДляОтправки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщенияДляОтправки.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	ИдентификаторыОснованийДокументаЭДО.ИдентификаторСвязи,
		|	ИдентификаторыОснованийДокументаЭДО.ИдентификаторДокументооборота
		|ИЗ
		|	СообщенияДляОтправки КАК СообщенияДляОтправки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО.ИдентификаторыОснований КАК
		|			ИдентификаторыОснованийДокументаЭДО
		|		ПО СообщенияДляОтправки.ЭлектронныйДокумент = ИдентификаторыОснованийДокументаЭДО.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ДокументЭДОСообщенияДляОтправки
		|		ПО СообщенияДляОтправки.ЭлектронныйДокумент = ДокументЭДОСообщенияДляОтправки.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ДокументЭДО
		|		ПО ИдентификаторыОснованийДокументаЭДО.ИдентификаторДокументооборота = ДокументЭДО.ИдентификаторДокументооборота
		|		И ДокументЭДОСообщенияДляОтправки.ИдентификаторОрганизации = ДокументЭДО.ИдентификаторОрганизации
		|		И ДокументЭДОСообщенияДляОтправки.ИдентификаторКонтрагента = ДокументЭДО.ИдентификаторКонтрагента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ДокументЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
		|		И СообщениеЭДО.ТипЭлементаРегламента В (&ТитулыОтправителей)
		|		И СообщениеЭДО.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыСообщенийЭДО.Отправлен),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыСообщенийЭДО.Подтвержден))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", ?(ОтборПоДокументамПакета,
		"СообщениеЭДО.ЭлектронныйДокумент В (&ЭлектронныеДокументы)",
		"СообщениеЭДО.Ссылка = &Сообщение"));
	
	ИмяТаблицыДокументаЭДО = ЭлектронныеДокументыЭДО.ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыДокументаЭДО", ИмяТаблицыДокументаЭДО);
	Возврат ТекстЗапроса;
КонецФункции

// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
//  ТекущееСообщение - ДокументСсылка.СообщениеЭДО
//  СообщенияДляОбработки - Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.СообщениеЭДО
//  * Значение - Булево
//  ОбработанныеСообщения - Массив из ДокументОбъект.СообщениеЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Булево
Функция ПодготовитьСообщенияПакетаКОтправке(ИдентификаторПакета, ТекущееСообщение, СообщенияДляОбработки, ОбработанныеСообщения, КонтекстДиагностики)
	
	ПакетыДокументовЭДО.БлокировкаПакетаДокументов(ИдентификаторПакета).Заблокировать();
	
	СвойстваСообщений = СвойстваОсновныхСообщенийПакетаДляПодготовкиКОтправке(ИдентификаторПакета);
	
	Если Не СообщенияПакетаПереданыДляОбработки(СвойстваСообщений, СообщенияДляОбработки)
		ИЛИ Не ПроверитьСостоянияОсновныхСообщенийПакета(СвойстваСообщений) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого СвойстваСообщения Из СвойстваСообщений Цикл
		
		Если СвойстваСообщения.Ссылка = ТекущееСообщение Тогда
			Продолжить;
		КонецЕсли;
		
		Подготовлен = ПодготовитьКОтправкеДокумент(СвойстваСообщения.Ссылка, КонтекстДиагностики,
			СообщенияДляОбработки, ОбработанныеСообщения, ИдентификаторПакета);
		
		Если Не Подготовлен Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Ссылка - ДокументСсылка.СообщениеЭДО
//  * Состояние - ПеречислениеСсылка.СостоянияСообщенийЭДО
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция СвойстваОсновныхСообщенийПакетаДляПодготовкиКОтправке(ИдентификаторПакета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.Состояние КАК Состояние,
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = СоставПакетовДокументовЭДО.ЭлектронныйДокумент
		|		И СоставПакетовДокументовЭДО.ИдентификаторПакета = &ИдентификаторПакета
		|		И СообщениеЭДО.ТипЭлементаРегламента = &ТипЭлементаРегламента";
	Запрос.УстановитьПараметр("ИдентификаторПакета", ИдентификаторПакета);
	Запрос.УстановитьПараметр("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Параметры:
//  СвойстваСообщений - см. СвойстваОсновныхСообщенийПакетаДляПодготовкиКОтправке
//  НеподходящиеДокументы - Неопределено,Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ПроверитьСостоянияОсновныхСообщенийПакета(СвойстваСообщений, НеподходящиеДокументы = Неопределено)
	
	Если НеподходящиеДокументы = Неопределено Тогда
		НеподходящиеДокументы = Новый Массив;
	КонецЕсли;
	
	Для Каждого СвойстваСообщения Из СвойстваСообщений Цикл
		Если СвойстваСообщения.Состояние <> Перечисления.СостоянияСообщенийЭДО.ПодготовкаКОтправке Тогда
			НеподходящиеДокументы.Добавить(СвойстваСообщения.ЭлектронныйДокумент);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НеподходящиеДокументы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Параметры:
//  СвойстваСообщений - см. СвойстваОсновныхСообщенийПакетаДляПодготовкиКОтправке
//  СообщенияДляОбработки - Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.СообщениеЭДО
//  * Значение - Булево
// 
// Возвращаемое значение:
//  Булево
Функция СообщенияПакетаПереданыДляОбработки(СвойстваСообщений, СообщенияДляОбработки)
	
	Результат = Истина;
	
	Для Каждого СвойстваСообщения Из СвойстваСообщений Цикл
		Если СообщенияДляОбработки[СвойстваСообщения.Ссылка] = Неопределено Тогда
			Результат = Ложь;
		Иначе
			СообщенияДляОбработки[СвойстваСообщения.Ссылка] = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ДанныеОбъекта - см. СинхронизацияЭДО.ДобавитьДанныеОбъекта
//  СвойстваДокумента - ВыборкаИзРезультатаЗапроса
//  СвойстваСообщения - ДокументОбъект.СообщениеЭДО,Структура:
//  * Ссылка - ДокументСсылка.СообщениеЭДО
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  * ДополнительнаяИнформация - Строка
//  ТипСообщения - ПеречислениеСсылка.ТипыДокументовЭДО
//  ФайлыСообщения - ТаблицаЗначений:
//  * Сообщение - ДокументСсылка.СообщениеЭДО
//  * ЭтоОсновнойФайл - Булево
//  * Ссылка - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * ПолноеИмяФайла - Строка
//  * Расширение - Строка
//  * ДатаСоздания - Дата
//  ИдентификаторыОснований - ТаблицаЗначений:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * ИдентификаторСвязи - Строка
//  * ИдентификаторДокументооборота - Строка
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ЗаполнитьДанныеОбъектаДляПодготовкиКОтправке(ДанныеОбъекта, СвойстваДокумента, СвойстваСообщения, ТипСообщения, ФайлыСообщения, ИдентификаторыОснований, КонтекстДиагностики)
	
	Для Каждого СвойстваФайла Из ФайлыСообщения Цикл
		Если СвойстваФайла.ЭтоОсновнойФайл Тогда
			ДанныеОбъекта.ДатаСоздания = СвойстваФайла.ДатаСоздания;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ДатаСоздания) Тогда
		ДанныеОбъекта.Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта.Объект = СвойстваСообщения.Ссылка;
	ДанныеОбъекта.ТипДокумента = ТипСообщения;
	ДанныеОбъекта.ТипЭлементаРегламента = СвойстваСообщения.ТипЭлементаРегламента;
	ДанныеОбъекта.СопроводительнаяЗаписка = СвойстваСообщения.ДополнительнаяИнформация;
	ДанныеОбъекта.ЭтоОтветнаяПодпись = СвойстваСообщения.Направление = Перечисления.НаправленияЭДО.Входящий;
	
	ДанныеОбъекта.Представление = ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(СвойстваДокумента);
	ДанныеОбъекта.ИдентификаторДокументооборота = СвойстваДокумента.ИдентификаторДокументооборота;
	ДанныеОбъекта.ИдентификаторСообщения = СвойстваДокумента.ИдентификаторСвязи;
	ДанныеОбъекта.ИдентификаторОтправителя = СвойстваДокумента.ИдентификаторОрганизации;
	ДанныеОбъекта.ИдентификаторПолучателя = СвойстваДокумента.ИдентификаторКонтрагента;
	ДанныеОбъекта.Организация = СвойстваДокумента.Организация;
	ДанныеОбъекта.Контрагент = СвойстваДокумента.Контрагент;
	ДанныеОбъекта.ДоговорКонтрагента = СвойстваДокумента.ДоговорКонтрагента;
	ДанныеОбъекта.ВидДокумента = СвойстваДокумента.ВидДокумента;
	ДанныеОбъекта.ТипРегламента = СвойстваДокумента.ТипРегламента;
	ДанныеОбъекта.ТребуетсяИзвещение = СвойстваДокумента.ТребуетсяИзвещение;
	ДанныеОбъекта.ТребуетсяПодтверждение = СвойстваДокумента.ТребуетсяПодтверждение;
	ДанныеОбъекта.СодержитМаркируемыеТовары = СвойстваДокумента.СодержитМаркируемыеТовары;
	ДанныеОбъекта.СпособОбмена = СвойстваДокумента.СпособОбмена;
	
	Если Не ЗаполнитьОписанияДанныхОбъектовДляПодготовкиКОтправке(ДанныеОбъекта, ФайлыСообщения, КонтекстДиагностики) Тогда
		ДанныеОбъекта.Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОписаниеДокумента = СинхронизацияЭДО.НовоеОписаниеДокумента();
	
	Если СвойстваСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
		
		ОписаниеДокумента.Номер = СвойстваДокумента.НомерДокумента;
		ОписаниеДокумента.Дата = СвойстваДокумента.ДатаДокумента;
		Если ЗначениеЗаполнено(СвойстваДокумента.СуммаДокумента) Тогда
			ОписаниеДокумента.Сумма = СвойстваДокумента.СуммаДокумента;
		КонецЕсли;
		ДанныеОбъекта.ОписаниеДокумента = ОписаниеДокумента;
		
		ЗаполнитьИдентификаторыОснованийДляПодготовкиКОтправке(ДанныеОбъекта, ИдентификаторыОснований);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДанныеОбъекта - См. СинхронизацияЭДО.ДобавитьДанныеОбъекта
//  ФайлыСообщения - См. ЗаполнитьДанныеОбъектаДляПодготовкиКОтправке.ФайлыСообщения
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Булево
Функция ЗаполнитьОписанияДанныхОбъектовДляПодготовкиКОтправке(ДанныеОбъекта, ФайлыСообщения, КонтекстДиагностики)
	
	Если Не ЗначениеЗаполнено(ФайлыСообщения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПрисоединенныеФайлыСообщений = Новый Массив;
	Для Каждого СвойстваФайла Из ФайлыСообщения Цикл
		ПрисоединенныеФайлыСообщений.Добавить(СвойстваФайла.Ссылка);
	КонецЦикла;
	
	ДвоичныеДанныеФайлов = РаботаСФайлами.ДвоичныеДанныеФайлов(ПрисоединенныеФайлыСообщений);
	
	Для Каждого СвойстваФайла Из ФайлыСообщения Цикл
		
		ДвоичныеДанные = ДвоичныеДанныеФайлов[СвойстваФайла.Ссылка];
		Если ДвоичныеДанные = Неопределено Тогда
			Если СвойстваФайла.ЭтоОсновнойФайл Тогда
				Возврат Ложь;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ОписаниеДанныхФайла = СинхронизацияЭДО.НовоеОписаниеДанныхОбъекта();
		ОписаниеДанныхФайла.ИмяФайла = СвойстваФайла.ПолноеИмяФайла;
		ОписаниеДанныхФайла.ДвоичныеДанные = ДвоичныеДанные;
		
		ДанныеПодписей = Новый Массив;
		Если СвойстваФайла.ЭтоОсновнойФайл Тогда
			УстановленныеПодписи = ЭлектронныеДокументыЭДО.УстановленныеПодписиСУчетомДоверенностей(
				СвойстваФайла.Сообщение);
			Если ДанныеОбъекта.ЭтоОтветнаяПодпись Тогда
				КоличествоПодписей = УстановленныеПодписи.Количество();
				Если КоличествоПодписей > 1 Тогда
					Подпись = УстановленныеПодписи[КоличествоПодписей - 1];
					ДобавитьОписаниеДанныхПодписи(ДанныеПодписей, ДанныеОбъекта, Подпись, СвойстваФайла);
				КонецЕсли;
			Иначе
				Для Каждого Подпись Из УстановленныеПодписи Цикл
					ДобавитьОписаниеДанныхПодписи(ДанныеПодписей, ДанныеОбъекта, Подпись, СвойстваФайла);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если СвойстваФайла.ЭтоОсновнойФайл Тогда
			ДанныеОбъекта.ОписаниеДанных = ОписаниеДанныхФайла;
			ДанныеОбъекта.ПодписиОсновныхДанных = ДанныеПодписей;
		Иначе
			ДанныеОбъекта.ОписаниеДополнительныхДанных = ОписаниеДанныхФайла;
			ДанныеОбъекта.ПодписиДополнительныхДанных = ДанныеПодписей;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Параметры:
//  ДанныеПодписей - Массив из см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  ДанныеОбъекта - СтрокаТаблицыЗначений из см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  Подпись - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеДанныеПодписиСУчетомДоверенности
//  СвойстваФайла - СтрокаТаблицыЗначений
Процедура ДобавитьОписаниеДанныхПодписи(ДанныеПодписей, ДанныеОбъекта, Подпись, СвойстваФайла)
	
	ОписаниеДанныхПодписи = РаботаСФайламиБЭД.НовоеОписаниеФайла();
	СвойстваПодписи = Подпись.СвойстваПодписи;
	ОписаниеДанныхПодписи.ДвоичныеДанные = СвойстваПодписи.Подпись;
	ОписаниеДанныхПодписи.ИмяФайла = СвойстваПодписи.ИмяФайлаПодписи;
	Если ПустаяСтрока(ОписаниеДанныхПодписи.ИмяФайла) Тогда
		ОписаниеДанныхПодписи.ИмяФайла = ИмяФайлаПодписи(СвойстваФайла.ПолноеИмяФайла, СвойстваПодписи.ПорядковыйНомер);
	КонецЕсли;

	ДанныеПодписей.Добавить(ОписаниеДанныхПодписи);
	
	Если НЕ Подпись.ЭтоПодписьПоДоверенности Тогда
		Возврат;
	КонецЕсли;

	СвойстваДоверенности = Подпись.СвойстваДоверенности;
	ПроверкаДоверенности = Подпись.РезультатПроверкиПоМЧД;

	Если ЗначениеЗаполнено(СвойстваДоверенности) И ЗначениеЗаполнено(ПроверкаДоверенности) Тогда
		
		ДанныеДоверенности =
			МашиночитаемыеДоверенности.ДанныеДоверенностиДляКонтейнера(ПроверкаДоверенности.Доверенность);
		ХешПодписи = КриптографияБЭД.ХешПодписи(ОписаниеДанныхПодписи.ДвоичныеДанные);
		ДанныеОбъекта.Доверенности.Вставить(ХешПодписи, ДанныеДоверенности);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДанныеОбъекта - См. СинхронизацияЭДО.ДобавитьДанныеОбъекта
//  ИдентификаторыОснований - ТаблицаЗначений:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * ИдентификаторСвязи - Строка
//  * ИдентификаторДокументооборота - Строка
Процедура ЗаполнитьИдентификаторыОснованийДляПодготовкиКОтправке(ДанныеОбъекта, ИдентификаторыОснований)
	
	Если Не ЗначениеЗаполнено(ИдентификаторыОснований) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ИдентификаторыОснований Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторСвязи) Тогда
			ДанныеОбъекта.ИдентификаторыСообщенийОснований.Добавить(СтрокаТаблицы.ИдентификаторСвязи);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторДокументооборота) Тогда
			ДанныеОбъекта.ИдентификаторыДокументооборотовОснований.Добавить(СтрокаТаблицы.ИдентификаторДокументооборота);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  СообщениеОбъект - ДокументОбъект.СообщениеЭДО
//  СвойстваДокумента - ВыборкаИзРезультатаЗапроса:
//  * Сообщение - ДокументСсылка.СообщениеЭДО
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * ИдентификаторДокумента - Строка
//  * ИдентификаторДокументооборота - Строка
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторКонтрагента - Строка
//  * ИдентификаторСвязи -Строка
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.КонтрагентБЭД
//  * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
//  * ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//  * ТребуетсяИзвещение - Булево
//  * ТребуетсяПодтверждение - Булево
//  * ОбменБезПодписи - Булево
//  * Остановлен - Булево
//  * ПричинаОстановки - ПеречислениеСсылка.ПричиныОстановкиЭДО
//  * Исправлен - Булево
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * НомерДокумента - Строка
//  * ДатаДокумента - Дата
//  * СуммаДокумента - Число
//  * СодержитМаркируемыеТовары - Булево
//  * Ответственный - ОпределяемыйТип.Пользователь
//  СостоянияСообщений - ТаблицаЗначений:
//  * Ссылка - ДокументСсылка.СообщениеЭДО
//  * Дата - Дата
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Состояние - ПеречислениеСсылка.СостоянияСообщенийЭДО
//  * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  Комментарий - Строка
Процедура ОтметитьПодготовкуСообщенияКОтправке(СообщениеОбъект, СвойстваДокумента, СостоянияСообщений, КонтекстДиагностики, Комментарий = "")
		
	СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.ПодготовленКОтправке;
	СообщениеОбъект.ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
	СообщениеОбъект.Состояние = РегламентыЭДО.СостояниеСообщения(СообщениеОбъект, СвойстваДокумента);
	СообщениеОбъект.Записать();
	
	НайденнаяСтрока = СостоянияСообщений.Найти(СообщениеОбъект.Ссылка, "Ссылка");
	НайденнаяСтрока.Состояние = СообщениеОбъект.Состояние;
	
	СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(СвойстваДокумента, СостоянияСообщений,
		СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики,,Комментарий);
	
	РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке,
		СвойстваДокумента, СостояниеДокумента, СообщениеОбъект.ДатаИзмененияСтатуса, СообщениеОбъект);
	
КонецПроцедуры

// Параметры:
//  СообщениеОбъект - ДокументОбъект.СообщениеЭДО
//  ПричинаОстановки - ПеречислениеСсылка.ПричиныОстановкиЭДО
//  СостоянияСообщений - ТаблицаЗначений:
//  * Ссылка - ДокументСсылка.СообщениеЭДО
//  * Дата - Дата
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Состояние - ПеречислениеСсылка.СостоянияСообщенийЭДО
//  * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  Комментарий - Строка
Процедура ОстановитьДокументПриПодготовкиКОтправке(СообщениеОбъект, ПричинаОстановки, СостоянияСообщений, КонтекстДиагностики, Комментарий = "")
	
	ДатаИзменения = ТекущаяДатаСеанса();
	
	ДокументОбъект = СообщениеОбъект.ЭлектронныйДокумент.ПолучитьОбъект();
	ДокументОбъект.Остановлен = Истина;
	ДокументОбъект.ПричинаОстановки = ПричинаОстановки;
	ДокументОбъект.Записать();
	
	УстановитьСостояниеХранение(СостоянияСообщений, ДатаИзменения);
	
	СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ДокументОбъект, СостоянияСообщений,
		ДатаИзменения, КонтекстДиагностики,, Комментарий);
	
	РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке,
		ДокументОбъект, СостояниеДокумента, ДатаИзменения, СообщениеОбъект);
	
КонецПроцедуры

// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
//  ДокументыПакета - См. ПакетыДокументовЭДО.ДокументыПакета
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ДобавитьОшибкуОжиданияДругихДокументовПакета(ИдентификаторПакета, ДокументыПакета, КонтекстДиагностики)
	
	ВидОперации = НСтр("ru = 'Подготовка к отправке.'");
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка();
	
	КраткоеПредставление = НСтр("ru = 'Не удалось подготовить пакет электронных документов к отправке.'");
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(КраткоеПредставление);
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Идентификатор пакета: %1'"), ИдентификаторПакета));
	МассивСтрок.Добавить(НСтр("ru = 'В пакете есть документы, которые не могут быть подготовлены к отправке:'"));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрок, ДокументыПакета);
	ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставление, КраткоеПредставление);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

// Параметры:
//  ДокументыПакета - См. ПакетыДокументовЭДО.ДокументыПакета
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Ссылка - ДокументСсылка.СообщениеЭДО
//  * Состояние - ПеречислениеСсылка.СостоянияСообщенийЭДО
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция СвойстваОсновныхСообщенийДокументовПакета(ДокументыПакета)
	Запрос = Новый Запрос(ТекстЗапросаСвойствОсновныхСообщенийДокументовПакета());
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ДокументыПакета);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаСвойствОсновныхСообщенийДокументовПакета()
	Возврат
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка,
		|	СообщениеЭДО.Состояние,
		|	СообщениеЭДО.ЭлектронныйДокумент
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент В (&ЭлектронныеДокументы)
		|	И СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя)";
КонецФункции

// Параметры:
//  ДанныеОбъектов - См. СинхронизацияЭДО.НовыеДанныеОбъектов
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ПричиныОстановкиЭДО
Функция ПричинаОстановкиПодготовкиОбъектаКОтправке(ДанныеОбъектов)
	
	ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ПустаяСсылка();
	
	Если ДанныеОбъектов.Найти(СинхронизацияЭДО.ТипыОшибокОтправки().ОжидаетсяОтветНаПриглашение,
		"ТипОшибкиОтправки") <> Неопределено Тогда
		ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ОжидаетсяОтветНаПриглашение;
	КонецЕсли;
	
	Возврат ПричинаОстановки;
	
КонецФункции

// Параметры:
//  ОбработанныеДокументы - Соответствие из КлючИЗначение:
//  * Ключ     - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Значение - Булево
//  ДокументыПакета - См. ПакетыДокументовЭДО.ДокументыПакета
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьДействияПоДокументамПакета(ОбработанныеДокументы, ДокументыПакета)
	Для Каждого ЭлектронныйДокумент Из ДокументыПакета Цикл
		Если ОбработанныеДокументы[ЭлектронныйДокумент] <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область ОтменитьОтправку

// Параметры:
//  ПараметрыВыполнения - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - См. НовыйРезультатДействийПоЭДО
Процедура ВыполнитьДействиеОтменитьОтправку(ПараметрыВыполнения, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.ОтменитьОтправку;
	
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Действие, 0);
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов) Тогда
		
		Для Каждого ПакетДокументов Из ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов Цикл
			ОтменитьОтправкуПакета(ПакетДокументов, РезультатДействий);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.Сообщения)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета)
		Или ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций) Тогда
		
		Отбор = НовыйОтборСообщенийДляОбработкиДействия();
		Отбор.Состояние.Добавить(Перечисления.СостоянияСообщенийЭДО.Отправка);
		ВыборкаСообщений = ВыборкаСообщенийДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий, Отбор);
		Пока ВыборкаСообщений.Следующий() Цикл
			ОтменитьОтправкуСообщения(ВыборкаСообщений.Ссылка, РезультатДействий);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ПакетДокументов - УникальныйИдентификатор
//  РезультатДействий - См. НовыйРезультатДействийПоЭДО
Процедура ОтменитьОтправкуПакета(ПакетДокументов, РезультатДействий)
	
	Действие = Перечисления.ДействияПоЭДО.ОтменитьОтправку;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	ОбъектыСообщений = Новый Массив;
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоПакету(ПакетДокументов, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		СообщенияПакета = СообщенияПакетаДляИзменения(ПакетДокументов, Действие, КонтекстДиагностики,,
			Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Если Не ЗначениеЗаполнено(СообщенияПакета) Тогда
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Для Каждого Сообщение Из СообщенияПакета Цикл
			Результат = ОтменитьОтправкуКонтейнера(Сообщение, КонтекстДиагностики);
			Если Результат.Отказ Тогда
				ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыСообщений, Результат.ОбъектыСообщений);;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Для Каждого СообщениеОбъект Из ОбъектыСообщений Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Действие, СообщениеОбъект.ЭлектронныйДокумент);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  РезультатДействий - См. НовыйРезультатДействийПоЭДО
Процедура ОтменитьОтправкуСообщения(Сообщение, РезультатДействий)
	
	РезультатОтменыОтправки = ОтменитьОтправкуКонтейнера(Сообщение, РезультатДействий.КонтекстДиагностики);
	
	Если РезультатОтменыОтправки.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СообщениеОбъект Из РезультатОтменыОтправки.ОбъектыСообщений Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатДействий.Итог, Перечисления.ДействияПоЭДО.Отправить,
			СообщениеОбъект.ЭлектронныйДокумент);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. ОтменитьОтправку
Функция ОтменитьОтправкуКонтейнера(Сообщение, КонтекстДиагностики)
	
	ТранспортныйКонтейнер = СинхронизацияЭДО.ТранспортныйКонтейнерОбъекта(Сообщение);
	
	НаборСообщений = СинхронизацияЭДО.ОбъектыТранспортногоКонтейнера(ТранспортныйКонтейнер);
	
	Возврат ОтменитьОтправку(НаборСообщений, КонтекстДиагностики);
	
КонецФункции

// Параметры:
//  НаборСообщений - Массив из ДокументСсылка.СообщениеЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Структура:
//  * Отказ - Булево
//  * ОбъектыСообщений - Массив из ДокументОбъект.СообщениеЭДО
Функция ОтменитьОтправку(НаборСообщений, КонтекстДиагностики)
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("ОбъектыСообщений", Новый Массив);
	
	Действие = Перечисления.ДействияПоЭДО.ОтменитьОтправку;
	
	Блокировка = Новый БлокировкаДанных;
	Для Каждого Сообщение Из НаборСообщений Цикл
		ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Сообщение);
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос(ТекстЗапросаДанныхДляОтменыОтправки());
		Запрос.УстановитьПараметр("НаборСообщений", НаборСообщений);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		Если РезультатыЗапроса[1].Пустой()
			ИЛИ РезультатыЗапроса[2].Пустой() Тогда
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		СвойстваДокументаСообщения = РезультатыЗапроса[1].Выбрать();
		
		СостоянияСообщенийДокументов = Новый Соответствие;
		ВыборкаСостоянийСообщений = РезультатыЗапроса[2].Выбрать();
		Пока ВыборкаСостоянийСообщений.Следующий() Цикл
			СостоянияСообщений = СостоянияСообщенийДокументов[ВыборкаСостоянийСообщений.ЭлектронныйДокумент];
			Если СостоянияСообщений = Неопределено Тогда
				СостоянияСообщений = РегламентыЭДО.НовыеСостоянияЭлементовРегламента();
				СостоянияСообщений.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.СообщениеЭДО"));
				СостоянияСообщенийДокументов.Вставить(ВыборкаСостоянийСообщений.ЭлектронныйДокумент, СостоянияСообщений);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СостоянияСообщений.Добавить(), ВыборкаСостоянийСообщений);
		КонецЦикла;
		
		ПодписанныеСообщения = РезультатыЗапроса[3].Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Пока СвойстваДокументаСообщения.Следующий() Цикл
			
			СостоянияСообщений = СостоянияСообщенийДокументов[СвойстваДокументаСообщения.Ссылка];
			
			СообщениеОбъект = СвойстваДокументаСообщения.Сообщение.ПолучитьОбъект();
			СообщениеОбъект.Статус =
				?(ПодписанныеСообщения.Найти(СвойстваДокументаСообщения.Сообщение) = Неопределено,
					Перечисления.СтатусыСообщенийЭДО.Сформирован, Перечисления.СтатусыСообщенийЭДО.Подписан);
			
			СообщениеОбъект.Состояние = РегламентыЭДО.СостояниеСообщения(СообщениеОбъект, СвойстваДокументаСообщения);
			СообщениеОбъект.Записать();
			
			НайденнаяСтрока = СостоянияСообщений.Найти(СообщениеОбъект.Ссылка, "Ссылка");
			НайденнаяСтрока.Состояние = СообщениеОбъект.Состояние;
			
			СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(СвойстваДокументаСообщения, СостоянияСообщений,
				СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики);
			
			РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Действие, СвойстваДокументаСообщения,
				СостояниеДокумента, СообщениеОбъект.ДатаИзмененияСтатуса, СообщениеОбъект);
			
			Результат.ОбъектыСообщений.Добавить(СообщениеОбъект);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Результат.Отказ = Истина;
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаДанныхДляОтменыОтправки()
	Возврат
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СообщениеЭДО.ОсновнойФайл КАК ОсновнойФайл
		|ПОМЕСТИТЬ СообщенияДляОбработки
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.Ссылка В (&НаборСообщений)
		|	И СообщениеЭДО.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Исходящий)
		|	И СообщениеЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенийЭДО.Отправка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Сообщение,
		|	ДокументЭДО.Ссылка КАК Ссылка,
		|	ДокументЭДО.ТипРегламента КАК ТипРегламента,
		|	ДокументЭДО.СпособОбмена КАК СпособОбмена,
		|	ДокументЭДО.ОбменБезПодписи КАК ОбменБезПодписи,
		|	ДокументЭДО.ТребуетсяИзвещение КАК ТребуетсяИзвещение,
		|	ДокументЭДО.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	ДокументЭДО.Остановлен КАК Остановлен,
		|	ДокументЭДО.ПричинаОстановки КАК ПричинаОстановки,
		|	ДокументЭДО.Исправлен КАК Исправлен,
		|	ДокументЭДО.Ответственный КАК Ответственный
		|ИЗ
		|	СообщенияДляОбработки КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ДокументЭДО.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Сообщение,
		|	ДокументЭДО.Ссылка КАК Ссылка,
		|	ДокументЭДО.ТипРегламента КАК ТипРегламента,
		|	ДокументЭДО.СпособОбмена КАК СпособОбмена,
		|	ДокументЭДО.ОбменБезПодписи КАК ОбменБезПодписи,
		|	ДокументЭДО.ТребуетсяИзвещение КАК ТребуетсяИзвещение,
		|	ДокументЭДО.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	ДокументЭДО.Остановлен КАК Остановлен,
		|	ДокументЭДО.ПричинаОстановки КАК ПричинаОстановки,
		|	ДокументЭДО.Исправлен КАК Исправлен,
		|	ДокументЭДО.Ответственный КАК Ответственный
		|ИЗ
		|	СообщенияДляОбработки КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ДокументЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ДокументЭДО.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.Дата КАК Дата,
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СообщениеЭДО.Состояние КАК Состояние,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.Направление КАК Направление
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент В
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			СообщенияДляОбработки.ЭлектронныйДокумент
		|		ИЗ
		|			СообщенияДляОбработки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	СообщенияДляОбработки КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО СообщениеЭДО.ОсновнойФайл = ПрисоединенныеФайлы.Ссылка
		|		И ПрисоединенныеФайлы.ПодписанЭП";
КонецФункции

#КонецОбласти

#Область Отправить

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ВыполнитьДействиеОтправить(ПараметрыВыполнения, РезультатДействий)
	
	РезультатОтправки = ОтправитьСообщения(ПараметрыВыполнения, РезультатДействий.КонтекстДиагностики);
	Если РезультатОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	РезультатДействий.ПаролиСертификатов = ПаролиСертификатов(
		РезультатОтправки.ДанныеДляСинхронизации.ДанныеСертификатов);
	
	ИтогДействийПоЭДО = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатОтправки.ДополнительныеПараметры,
		"ИтогДействийПоЭДО");
	Если ЗначениеЗаполнено(ИтогДействийПоЭДО) Тогда
		ИнтерфейсДокументовЭДОКлиентСервер.ДополнитьИтогВыполненияДействийПоЭДО(
			РезультатДействий.Итог, ИтогДействийПоЭДО);
	КонецЕсли;
	
	УчетныеЗаписиЭДО.ОбработатьОшибкиСинхронизации(РезультатОтправки.ДанныеДляСинхронизации,
		РезультатДействий.Итог.ОбработанныеУчетныеЗаписи);
	
	ИнтерфейсДокументовЭДОКлиентСервер.ДополнитьРезультатыОтправкиПолучения(
		РезультатДействий.Итог.РезультатыОтправкиПолучения,
		РезультатОтправки.РезультатыОтправкиПолучения);
	
	Если РезультатОтправки.ТребуетсяОбработкаНаКлиенте
		И ПараметрыВыполнения.РасшифрованныеМаркеры = Неопределено Тогда
		КлючиСинхронизации = РезультатОтправки.КонтекстОтправки.КлючиСинхронизации;
		РезультатДействий.ЗашифрованныеМаркеры = СинхронизацияЭДО.ЗашифрованныеМаркерыИзКлючейСинхронизации(
			КлючиСинхронизации);
		Возврат;
	КонецЕсли;
	
	Действие = Перечисления.ДействияПоЭДО.Отправить;
	ОбработаноПоДействиям = РезультатДействий.Итог.ОбработаноПоДействиям;
	Если ОбработаноПоДействиям[Действие] = Неопределено Тогда
		ОбработаноПоДействиям.Вставить(Действие, 0);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. СинхронизацияЭДО.ОтправитьОбъекты
Функция ОтправитьСообщения(ПараметрыВыполнения, КонтекстДиагностики) Экспорт
	
	ОписаниеЗапроса = ЗапросСообщенийДляОтправки(ПараметрыВыполнения, "ОбъектыДляОтправки");
	
	ДополнительныеПараметры = Новый Структура("ИтогДействийПоЭДО",
		ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
	
	РезультатОтправки = СинхронизацияЭДО.ОтправитьОбъекты(ОписаниеЗапроса, КонтекстДиагностики,
		ПараметрыВыполнения.ОтпечаткиСертификатов, ПараметрыВыполнения.ВыбранныеСертификаты, ДополнительныеПараметры,
		ПараметрыВыполнения.РасшифрованныеМаркеры);

	УчетныеЗаписиБезДоступныхСертификатов = Новый Массив;
	Для Каждого УчетнаяЗапись Из РезультатОтправки.ДанныеДляСинхронизации.УчетныеЗаписиБезДоступныхСертификатов Цикл
		Если ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций.Найти(УчетнаяЗапись) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		УчетныеЗаписиБезДоступныхСертификатов.Добавить(УчетнаяЗапись);
	КонецЦикла;
	РезультатОтправки.ДанныеДляСинхронизации.УчетныеЗаписиБезДоступныхСертификатов = УчетныеЗаписиБезДоступныхСертификатов;
	Возврат РезультатОтправки;
	
КонецФункции

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  ИмяВременнойТаблицы - Строка
// 
// Возвращаемое значение:
//  См. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросСообщенийДляОтправки(ПараметрыВыполнения, ИмяВременнойТаблицы)
	
	Отбор = НовыйОтборСообщенийДляОбработкиДействия();
	Отбор.Состояние.Добавить(Перечисления.СостоянияСообщенийЭДО.Отправка);
	Отбор.ПолучатьСообщенияПоИдентификаторамОрганизаций = Истина;
	Отбор.ПолучатьСообщенияПоПакетамДокументов = Истина;
	
	Если ПараметрыВыполнения.ОбработатьТолькоИзвещения Тогда
		ИзвещениеОПолучении = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении);
		Отбор.ВидСообщения.Добавить(ИзвещениеОПолучении);
	КонецЕсли;
	
	ИмяТаблицыСообщений = "ВсеСообщенияДляОтправки";
	СвойстваСообщения = "Ссылка, ЭлектронныйДокумент, ТипЭлементаРегламента";
	ОписаниеЗапроса = ЗапросСообщенийДляОбработкиДействия(ПараметрыВыполнения.ОбъектыДействий, Отбор, ИмяТаблицыСообщений, СвойстваСообщения);
	
	ДополнитьЗапросДляОтправкиУсловиемПоАктамОРасхождениях(ОписаниеЗапроса, ИмяТаблицыСообщений, ИмяВременнойТаблицы);
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Параметры:
//  ОписаниеЗапроса - см. ЗапросСообщенийДляОбработкиДействия
//  ИмяТаблицыСообщений - Строка
//  ИмяИтоговойТаблицы - Строка
//
Процедура ДополнитьЗапросДляОтправкиУсловиемПоАктамОРасхождениях(ОписаниеЗапроса, ИмяТаблицыСообщений, ИмяИтоговойТаблицы)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеСообщенияДляОтправки.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ИмяИтоговойТаблицы
		|ИЗ
		|	ИмяТаблицыСообщений КАК ВсеСообщенияДляОтправки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК Сообщения_ИнформацияОтправителя
		|		ПО (ВсеСообщенияДляОтправки.ЭлектронныйДокумент = Сообщения_ИнформацияОтправителя.ЭлектронныйДокумент)
		|			И (Сообщения_ИнформацияОтправителя.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя))
		|			И (Сообщения_ИнформацияОтправителя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСообщенийЭДО.Отправлен))
		|			И (НЕ Сообщения_ИнформацияОтправителя.ПометкаУдаления)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВсеСообщенияДляОтправки.ЭлектронныйДокумент ССЫЛКА Документ.ЭлектронныйДокументИсходящийЭДО
		|					И ВсеСообщенияДляОтправки.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки)
		|				ТОГДА НЕ Сообщения_ИнформацияОтправителя.Ссылка ЕСТЬ NULL
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыСообщений", ИмяТаблицыСообщений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяИтоговойТаблицы", ИмяИтоговойТаблицы);
	
	ОписаниеЗапроса.Текст = ОписаниеЗапроса.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() + ТекстЗапроса;
	
КонецПроцедуры

// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  ОшибкаПередачи - Неопределено
//                 - см. СинхронизацияЭДО.НоваяОшибкаПередачи
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  Отказ - Булево
//  ИтогДействийПоЭДО - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
Процедура ОбработатьОтправленноеСообщение(Сообщение, ОшибкаПередачи, КонтекстДиагностики, Отказ, ИтогДействийПоЭДО)
	
	Действие = Перечисления.ДействияПоЭДО.Отправить;
	ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ЭлектронныйДокумент");
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоСообщению(Сообщение, Действие);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
		ЭлементБлокировки.УстановитьЗначение("ЭлектронныйДокумент", ЭлектронныйДокумент);
		Блокировка.Заблокировать();
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		
		Если СообщениеОбъект.ЭлектронныйДокумент <> ЭлектронныйДокумент Тогда
			
			Отказ = Истина;
			ТекстОшибки = НСтр("ru='Не удалось заблокировать электронный документ'");
			ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			
			Возврат;
			
		КонецЕсли;
		
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		
		ПрокинутьКомментарий = СообщениеОбъект.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ;
		
		ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(СообщениеОбъект.ЭлектронныйДокумент);
		
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(ТекстЗапросаПараметровОбновленияСостоянияДокумента(ЭтоВходящийЭДО));
		Если ПрокинутьКомментарий Тогда
			ТекстыЗапроса.Добавить(ТекстЗапросаПараметровСостоянияДокумента());
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", СообщениеОбъект.ЭлектронныйДокумент);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ПараметрыДокумента = РезультатыЗапроса[0].Выбрать();
		ПараметрыДокумента.Следующий();
		СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
		
		СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.Отправлен;
		СообщениеОбъект.ДатаИзмененияСтатуса = ТекущаяДатаСеанса;
		СообщениеОбъект.Состояние = РегламентыЭДО.СостояниеСообщения(СообщениеОбъект, ПараметрыДокумента);
		СообщениеОбъект.Записать();
		
		НайденнаяСтрока = СостоянияСообщений.Найти(СообщениеОбъект.Ссылка, "Ссылка");
		НайденнаяСтрока.Состояние = СообщениеОбъект.Состояние;
		
		Комментарий = "";
		Если ПрокинутьКомментарий Тогда
			Комментарий = КомментарийКСостояниюДокумента(РезультатыЗапроса[2]);
		КонецЕсли;
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияСообщений,
			СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики,,Комментарий);
			
		Если СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен Тогда
			ОтправитьНаОзнакомление(СообщениеОбъект.ЭлектронныйДокумент);
		КонецЕсли;
		
		УстановитьКлючевыеДатыПриОтправкеСообщения(СообщениеОбъект, ТекущаяДатаСеанса);
		
		РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Действие, ПараметрыДокумента, СостояниеДокумента,
			СообщениеОбъект.ДатаИзмененияСтатуса, СообщениеОбъект);
		
		ЗаполнитьИтогВыполненияДействияПоЭДО(ИтогДействийПоЭДО, Действие, СообщениеОбъект.ЭлектронныйДокумент);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Записывает ошибку передачи.
// 
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
//  Блокирующая - Булево
//  ОписаниеОшибки - Строка
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Булево - Признак успешного выполнения.
Функция ЗафиксироватьОшибкуПередачи(Сообщение, Действие, Блокирующая, ОписаниеОшибки, КонтекстДиагностики)
	
	Результат = Истина;
	
	ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ЭлектронныйДокумент");
	ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент);
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоСообщению(Сообщение, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеСообщенияДляИзменения(Сообщение, ЭлектронныйДокумент, ЭтоВходящийЭДО);
		
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		Если СообщениеОбъект.ЭлектронныйДокумент <> ЭлектронныйДокумент
			Или ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(СообщениеОбъект.ЭлектронныйДокумент) <> ЭтоВходящийЭДО Тогда
			ТекстОшибки = НСтр("ru='не удалось заблокировать данные электронного документа'");
			ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
			Результат = Ложь;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		ДокументОбъект.Остановлен = Истина;
		ДокументОбъект.ПричинаОстановки = ?(Блокирующая,
			Перечисления.ПричиныОстановкиЭДО.ОшибкаПередачиБлокирующая,
			Перечисления.ПричиныОстановкиЭДО.ОшибкаПередачиНеблокирующая);
		ДокументОбъект.Записать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаСостоянияСообщений();
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		
		СостоянияСообщений = Запрос.Выполнить().Выгрузить();
		
		СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.ПодготовленКОтправке;
		СообщениеОбъект.ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
		СообщениеОбъект.Состояние = Перечисления.СостоянияСообщенийЭДО.Хранение;
		СообщениеОбъект.Записать();
		
		НайденнаяСтрока = СостоянияСообщений.Найти(СообщениеОбъект.Ссылка, "Ссылка");
		НайденнаяСтрока.Состояние = СообщениеОбъект.Состояние;
		НайденнаяСтрока.Статус = СообщениеОбъект.Статус;
		
		УстановитьСостояниеХранение(СостоянияСообщений, СообщениеОбъект.ДатаИзмененияСтатуса);
		
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ДокументОбъект, СостоянияСообщений,
			СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики,,ОписаниеОшибки);
		
		РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Действие, ДокументОбъект, СостояниеДокумента,
			СообщениеОбъект.ДатаИзмененияСтатуса, СообщениеОбъект, ОписаниеОшибки);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  СообщениеОбъект - ДокументОбъект.СообщениеЭДО
//  ТекущаяДатаСеанса - Дата
Процедура УстановитьКлючевыеДатыПриОтправкеСообщения(СообщениеОбъект, ТекущаяДатаСеанса)
	
	ЭлектронныйДокумент = СообщениеОбъект.ЭлектронныйДокумент;
	ТипЭлементаРегламента = СообщениеОбъект.ТипЭлементаРегламента;
	
	ЭтоВходящийДокумент = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент);
	
	ЭтоИнформацияОтправителя = ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	
	Если Не (Не ЭтоВходящийДокумент И ЭтоИнформацияОтправителя) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
	ДокументОбъект.ДатаОтправки = ТекущаяДатаСеанса;
	ДокументОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Загрузить

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ВыполнитьДействиеЗагрузить(ПараметрыВыполнения, РезультатДействий)
	
	ОтпечаткиСертификатов = ПараметрыВыполнения.ОтпечаткиСертификатов;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	ТранспортныеКонтейнеры = ПараметрыВыполнения.ОбъектыДействий.ТранспортныеКонтейнеры;
	ИтогДействийЭДО = РезультатДействий.Итог;
	РезультатыОтправкиПолучения = ИтогДействийЭДО.РезультатыОтправкиПолучения;
	ОбработаноКонтейнеров = РезультатДействий.Итог.ОбработаноПоДействиям[Перечисления.ДействияПоЭДО.Загрузить];
	Если ОбработаноКонтейнеров <> Неопределено Тогда
		ИтогДействийЭДО.ОбработаноКонтейнеров = ИтогДействийЭДО.ОбработаноКонтейнеров + ОбработаноКонтейнеров;
	КонецЕсли;
	
	Если ПараметрыВыполнения.РасшифрованныеМаркеры = Неопределено Тогда
		
		ДанныеДляСинхронизации = СинхронизацияЭДО.ДанныеДляСинхронизации(ОтпечаткиСертификатов,
			КонтекстДиагностики, ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций,
			ПараметрыВыполнения.ВыбранныеСертификаты);
		
		КлючиСинхронизации = ДанныеДляСинхронизации.КлючиСинхронизации;
		
		РезультатДействий.ПаролиСертификатов = ПаролиСертификатов(
			ДанныеДляСинхронизации.ДанныеСертификатов);
			
		РезультатДействий.РасшифрованныеМаркеры = СинхронизацияЭДО.РасшифрованныеМаркерыИзКлючейСинхронизации(
			КлючиСинхронизации);
		
		РезультатДействий.ЗашифрованныеМаркеры = СинхронизацияЭДО.ЗашифрованныеМаркерыИзКлючейСинхронизации(
			КлючиСинхронизации);
		
		УчетныеЗаписиЭДО.ОбработатьОшибкиСинхронизации(ДанныеДляСинхронизации,
			РезультатДействий.Итог.ОбработанныеУчетныеЗаписи);
		
		Если ЗначениеЗаполнено(РезультатДействий.ЗашифрованныеМаркеры) Тогда
			Возврат;
		ИначеЕсли ЗначениеЗаполнено(РезультатДействий.РасшифрованныеМаркеры) Тогда
			ПараметрыВыполнения.РасшифрованныеМаркеры = РезультатДействий.РасшифрованныеМаркеры;
		КонецЕсли;
		
	КонецЕсли;
	
	ТребуетсяЗагрузкаИзЕИС = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		МодульПодсистемы.ПриВыполненииДействияЗагрузить(ТранспортныеКонтейнеры, ТребуетсяЗагрузкаИзЕИС);
	КонецЕсли;
	
	ЕстьПрямойОбмен = НастройкиЭДО.ИспользуетсяПрямойОбменЭлектроннымиДокументами();
	
	ДанныеКонтейнеров = Неопределено;
	РезультатПолучения = Неопределено;
	Если ЗначениеЗаполнено(ТранспортныеКонтейнеры) Тогда
		
		ДанныеКонтейнеров = ТранспортныеКонтейнерыЭДО.РаспаковатьКонтейнеры(ТранспортныеКонтейнеры,
			ОтпечаткиСертификатов, КонтекстДиагностики);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.РасшифрованныеМаркеры)
		ИЛИ ТребуетсяЗагрузкаИзЕИС
		ИЛИ ЕстьПрямойОбмен Тогда
		
		КлючиСинхронизации = СинхронизацияЭДО.КлючиСинхронизацииИзРасшифрованныхМаркеров(
			ПараметрыВыполнения.РасшифрованныеМаркеры);
		
		РезультатПолучения = СинхронизацияЭДО.ПолучитьКонтейнеры(КлючиСинхронизации, ОтпечаткиСертификатов,
			КонтекстДиагностики, РезультатыОтправкиПолучения);
		
		Если ЗначениеЗаполнено(ДанныеКонтейнеров) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеКонтейнеров, РезультатПолучения.ДанныеКонтейнеров);
		Иначе
			ДанныеКонтейнеров = РезультатПолучения.ДанныеКонтейнеров;
		КонецЕсли;
		
		ИтогДействийЭДО.ПолученоКонтейнеров = ИтогДействийЭДО.ПолученоКонтейнеров + РезультатПолучения.ПолученоКонтейнеров;
		
	КонецЕсли;
	
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Перечисления.ДействияПоЭДО.Загрузить, 0);
	
	Если Не ЗначениеЗаполнено(ДанныеКонтейнеров) Тогда
		Если ЗначениеЗаполнено(РезультатПолучения)
			И РезультатПолучения.РезультатПолучения.ТребуетсяОбработкаНаКлиенте Тогда
			
			РезультатДействий.Итог.ОбработаноПоДействиям.Удалить(Перечисления.ДействияПоЭДО.Загрузить);
			ПараметрыВыполнения.РасшифрованныеМаркеры = Неопределено;
			ВыполнитьДействиеЗагрузить(ПараметрыВыполнения, РезультатДействий);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РезультатЗагрузки = ЗагрузитьОбработатьДанныеОбъектовКонтейнеров(ДанныеКонтейнеров, КонтекстДиагностики,
		ОтпечаткиСертификатов);
	
	ИнтерфейсДокументовЭДОКлиентСервер.ДополнитьИтогВыполненияДействийПоЭДО(
		РезультатДействий.Итог, РезультатЗагрузки.ИтогДействийПоЭДО);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		РезультатДействий.ДокументыДляОбработкиИзвещений, РезультатЗагрузки.ДокументыДляОбработкиИзвещений, Истина);
	
	РезультатДействий.ПараметрыПроверкиПодписей = ПараметрыПроверкиПодписейНаКлиенте(РезультатЗагрузки);
	Если ЗначениеЗаполнено(РезультатПолучения)
		И РезультатПолучения.РезультатПолучения.ТребуетсяОбработкаНаКлиенте Тогда
		ОбработаноКонтейнеров = РезультатДействий.Итог.ОбработаноПоДействиям[Перечисления.ДействияПоЭДО.Загрузить];
		ИтогДействийЭДО.ОбработаноКонтейнеров = ИтогДействийЭДО.ОбработаноКонтейнеров + ОбработаноКонтейнеров;
		РезультатДействий.Итог.ОбработаноПоДействиям.Удалить(Перечисления.ДействияПоЭДО.Загрузить);
		ПараметрыВыполнения.РасшифрованныеМаркеры = Неопределено;
		
		ВыполнитьДействиеЗагрузить(ПараметрыВыполнения, РезультатДействий);
	КонецЕсли;
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * ИтогДействийПоЭДО - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  * ДокументыДляОбработкиИзвещений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
//  * КонтекстПроверкиПодписей - Неопределено
//                             - см. НовыйКонтекстПроверкиПодписей
//
Функция НовыйРезультатЗагрузкиДокументов()
	Результат = Новый Структура;
	Результат.Вставить("ИтогДействийПоЭДО", ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
	Результат.Вставить("ДокументыДляОбработкиИзвещений", Новый Соответствие);
	Результат.Вставить("КонтекстПроверкиПодписей", Неопределено);
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//  Структура - Описание:
//  * ДанныеДокументов - См. СинхронизацияЭДО.НовыеДанныеОбъектов
//  * ОтпечаткиСертификатов - См. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
//  * ПаролиСертификатов - См. КриптографияБЭД.НовыеПаролиСертификатов
//  * ИсключитьДиагностику - Булево
//
Функция НовыйКонтекстПроверкиПодписей()
	Контекст = Новый Структура;
	Контекст.Вставить("ДанныеДокументов", СинхронизацияЭДО.НовыеДанныеОбъектов());
	Контекст.Вставить("ОтпечаткиСертификатов", КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков());
	Контекст.Вставить("ПаролиСертификатов", КриптографияБЭД.НовыеПаролиСертификатов());
	Контекст.Вставить("ИсключитьДиагностику", Ложь);
	Возврат Контекст;
КонецФункции

// Возвращаемое значение:
//  Структура -  Новые данные для проверки подписей на клиенте:
//  * ИдентификаторДанныхДокумента - Строка
//  * ДвоичныеДанныеФайла - Неопределено,ДвоичныеДанные
//  * ДвоичныеДанныеПодписи - Неопределено,ДвоичныеДанные
//  * ЭтоОсновныеДанные - Булево
Функция НовыеДанныеДляПроверкиПодписейНаКлиенте()
	ДанныеПодписи = Новый Структура;
	ДанныеПодписи.Вставить("ИдентификаторДанныхДокумента", "");
	ДанныеПодписи.Вставить("ДвоичныеДанныеФайла", Неопределено);
	ДанныеПодписи.Вставить("ДвоичныеДанныеПодписи", Неопределено);
	ДанныеПодписи.Вставить("ЭтоОсновныеДанные", Ложь);
	Возврат ДанныеПодписи;
КонецФункции

// Параметры:
//  РезультатЗагрузки - См. НовыйРезультатЗагрузкиДокументов
// 
// Возвращаемое значение:
//  - Неопределено
//  - Структура:
//  * ПодписиДляПроверки - Массив из См. НовыеДанныеДляПроверкиПодписейНаКлиенте
//  * КонтекстНаСервере - см. НовыйКонтекстПроверкиПодписей
//  * АдресКонтекстаНаСервере - Строка
//  * ИсключитьДиагностику - Булево
//
Функция ПараметрыПроверкиПодписейНаКлиенте(РезультатЗагрузки)
	
	Если Не ЗначениеЗаполнено(РезультатЗагрузки.КонтекстПроверкиПодписей) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ПодписиДляПроверки", Новый Массив);
	Результат.Вставить("КонтекстНаСервере", Новый Структура);
	Результат.Вставить("АдресКонтекстаНаСервере", "");
	Результат.Вставить("ИсключитьДиагностику", Ложь);
	
	Результат.КонтекстНаСервере = РезультатЗагрузки.КонтекстПроверкиПодписей;
	Результат.ИсключитьДиагностику = РезультатЗагрузки.КонтекстПроверкиПодписей.ИсключитьДиагностику;
	
	ПодписиДляПроверки = Новый Массив;
	
	Для Каждого ДанныеДокумента Из РезультатЗагрузки.КонтекстПроверкиПодписей.ДанныеДокументов Цикл
		
		Если ЕстьОсновныеДанныеДляПроверкиПодписи(ДанныеДокумента) Тогда
			
			Для Каждого ОписаниеДанныхПодписи Из ДанныеДокумента.ПодписиОсновныхДанных Цикл
				ПараметрыПроверки = НовыеДанныеДляПроверкиПодписейНаКлиенте();
				ПараметрыПроверки.ИдентификаторДанныхДокумента = ДанныеДокумента.ИдентификаторСтроки;
				ПараметрыПроверки.ДвоичныеДанныеФайла = ДанныеДокумента.ОписаниеДанных.ДвоичныеДанные;
				ПараметрыПроверки.ДвоичныеДанныеПодписи = ОписаниеДанныхПодписи.ДвоичныеДанные;
				ПараметрыПроверки.ЭтоОсновныеДанные = Истина;
				ПодписиДляПроверки.Добавить(ПараметрыПроверки);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЕстьДополнительныеДанныеДляПроверкиПодписи(ДанныеДокумента) Тогда
			
			Для Каждого ОписаниеДанныхПодписи Из ДанныеДокумента.ПодписиДополнительныхДанных Цикл
				ПараметрыПроверки = НовыеДанныеДляПроверкиПодписейНаКлиенте();
				ПараметрыПроверки.ИдентификаторДанныхДокумента = ДанныеДокумента.ИдентификаторСтроки;
				ПараметрыПроверки.ДвоичныеДанныеФайла = ДанныеДокумента.ОписаниеДополнительныхДанных.ДвоичныеДанные;
				ПараметрыПроверки.ДвоичныеДанныеПодписи = ОписаниеДанныхПодписи.ДвоичныеДанные;
				ПараметрыПроверки.ЭтоОсновныеДанные = Ложь;
				ПодписиДляПроверки.Добавить(ПараметрыПроверки);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.ПодписиДляПроверки = ПодписиДляПроверки;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ДанныеОбъекта - СтрокаТаблицыЗначений: см. СинхронизацияЭДО.НовыеДанныеОбъектов
// 
// Возвращаемое значение:
//  Булево
//
Функция ЕстьОсновныеДанныеДляПроверкиПодписи(ДанныеОбъекта)
	
	Возврат ЗначениеЗаполнено(ДанныеОбъекта.ОписаниеДанных)
			И ДанныеОбъекта.ОписаниеДанных.ДвоичныеДанные <> Неопределено
			И ЗначениеЗаполнено(ДанныеОбъекта.ПодписиОсновныхДанных);
КонецФункции 

// Параметры:
//  ДанныеОбъекта - СтрокаТаблицыЗначений: см. СинхронизацияЭДО.НовыеДанныеОбъектов
// 
// Возвращаемое значение:
//  Булево
//
Функция ЕстьДополнительныеДанныеДляПроверкиПодписи(ДанныеОбъекта)
	
	Возврат ЗначениеЗаполнено(ДанныеОбъекта.ОписаниеДополнительныхДанных)
			И ДанныеОбъекта.ОписаниеДополнительныхДанных.ДвоичныеДанные <> Неопределено
			И ЗначениеЗаполнено(ДанныеОбъекта.ПодписиДополнительныхДанных);
КонецФункции

// Параметры:
//  ДанныеОбъектов - см. СинхронизацияЭДО.НовыеДанныеОбъектов
Процедура ДополнитьДанныеОбъектовДляЗагрузки(ДанныеОбъектов)
	
	ДанныеОбъектов.Колонки.Добавить("Содержание");
	ДанныеОбъектов.Колонки.Добавить("ПрикладнойТипДокумента", ИнтеграцияЭДО.ОписаниеТиповПрикладныхЭлектронныхДокументов());
	ДанныеОбъектов.Колонки.Добавить("КомментарийСообщения", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ДанныеОбъектов.Колонки.Добавить("ПредыдущийДокумент", 
		Новый ОписаниеТипов("ДокументСсылка.ЭлектронныйДокументВходящийЭДО"));
	ДанныеОбъектов.Колонки.Добавить("НомераМЧД", Новый ОписаниеТипов("Массив"));
	ДанныеОбъектов.Колонки.Добавить("НомерДокумента", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(30, ДопустимаяДлина.Переменная)));
	
	ЕстьОтветнаяПодпись = Ложь;
	ЕстьИнформацияОтправителя = Ложь;
	
	Для Каждого СтрокаТаблицы Из ДанныеОбъектов Цикл
		
		Если СтрокаТаблицы.ЭтоОтветнаяПодпись Тогда
			ЕстьОтветнаяПодпись = Истина;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			ЕстьИнформацияОтправителя = Истина;
		КонецЕсли;
		
		ДополнитьДанныеОбъектаСодержаниемИнформацииОтправителя(СтрокаТаблицы);
		
		ДополнитьДанныеОбъектаКомментариемКОтклонениюАннулированию(СтрокаТаблицы);
		
		ДополнитьДанныеОбъектаНомерамиМЧДПоДоверителям(СтрокаТаблицы);
		
	КонецЦикла;
	
	ПоляВыбора = 
		"ИдентификаторСтроки,
		|ТипДокумента,
		|ПрикладнойТипДокумента";
	
	Если ЕстьОтветнаяПодпись Тогда
		ПоляВыбора = ПоляВыбора + ",
			|ЭтоОтветнаяПодпись,
			|ИдентификаторДокументооборота,
			|ИдентификаторПолучателя,
			|ТипЭлементаРегламента";
	КонецЕсли;
	
	Если ЕстьИнформацияОтправителя Тогда
		ПоляВыбора = ПоляВыбора + ",
			|ИдентификаторСообщения,
			|ИдентификаторОтправителя,
			|НомерДокумента";
		Если Не ЕстьОтветнаяПодпись Тогда
			ПоляВыбора = ПоляВыбора + ",
				|ИдентификаторПолучателя,
				|ТипЭлементаРегламента";
		КонецЕсли;
	КонецЕсли;
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(СтрЗаменить(ТекстЗапросаДанныхОбъектовДляОбработки(), "&ПоляВыбора", ПоляВыбора));
	ТекстыЗапросов.Добавить(ТекстЗапросаДополненияДанныхОбъектовВидамиДокументов());
	
	Если ЕстьОтветнаяПодпись Тогда
		ТекстыЗапросов.Добавить(ТекстЗапросаДополненияДанныхДляПроверкиОтветнойПодписи());
	КонецЕсли;
	
	Если ЕстьИнформацияОтправителя Тогда
		ТекстыЗапросов.Добавить(ТекстЗапросаДополненияДанныхОбъектовПредыдущимиДокументами());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("ДанныеДляОбработки", ДанныеОбъектов.Скопировать(, ПоляВыбора));
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДополнитьДанныеОбъектовВидамиДокументов(ДанныеОбъектов, РезультатыЗапроса[1]);
	
	Если ЕстьОтветнаяПодпись Тогда
		ДополнитьДанныеОбъектовДляПроверкиОтветнойПодписи(ДанныеОбъектов, РезультатыЗапроса[2]);
	КонецЕсли;
	
	Если ЕстьИнформацияОтправителя Тогда
		ДополнитьДанныеОбъектовПредыдущимиВерсиямиДокументов(ДанныеОбъектов, РезультатыЗапроса[2 + ЕстьОтветнаяПодпись]);
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаДанныхОбъектовДляОбработки()
	Возврат
		"ВЫБРАТЬ
		|	&ПоляВыбора
		|ПОМЕСТИТЬ ДанныеОбъектов
		|ИЗ
		|	&ДанныеДляОбработки КАК ДанныеОбъектов";
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаДополненияДанныхОбъектовВидамиДокументов()
	Возврат
		"ВЫБРАТЬ
		|	ДанныеОбъектов.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВидыДокументовЭДО.Ссылка КАК ВидДокумента
		|ИЗ
		|	ДанныеОбъектов КАК ДанныеОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО ДанныеОбъектов.ТипДокумента = ВидыДокументовЭДО.ТипДокумента
		|		И ДанныеОбъектов.ПрикладнойТипДокумента = ВидыДокументовЭДО.ПрикладнойТипДокумента
		|ГДЕ
		|	ДанныеОбъектов.ТипДокумента <> ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.ПустаяСсылка)";
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаДополненияДанныхДляПроверкиОтветнойПодписи()
	Возврат
		"ВЫБРАТЬ
		|	ДанныеОбъектов.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.ОсновнойФайл КАК ОсновнойФайл
		|ИЗ
		|	ДанныеОбъектов КАК ДанныеОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
		|		ПО ДанныеОбъектов.ИдентификаторДокументооборота = ДокументЭДО.ИдентификаторДокументооборота
		|		И ДанныеОбъектов.ИдентификаторПолучателя = ДокументЭДО.ИдентификаторОрганизации
		|		И ДанныеОбъектов.ЭтоОтветнаяПодпись
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ДокументЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
		|		И ДанныеОбъектов.ТипЭлементаРегламента = СообщениеЭДО.ТипЭлементаРегламента
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеОбъектов.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.ОсновнойФайл КАК ОсновнойФайл
		|ИЗ
		|	ДанныеОбъектов КАК ДанныеОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ДокументЭДО
		|		ПО ДанныеОбъектов.ИдентификаторДокументооборота = ДокументЭДО.ИдентификаторДокументооборота
		|		И ДанныеОбъектов.ИдентификаторПолучателя = ДокументЭДО.ИдентификаторОрганизации
		|		И ДанныеОбъектов.ЭтоОтветнаяПодпись
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ДокументЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
		|		И ДанныеОбъектов.ТипЭлементаРегламента = СообщениеЭДО.ТипЭлементаРегламента";
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаДополненияДанныхОбъектовПредыдущимиДокументами()
	Возврат
		"ВЫБРАТЬ
		|	ДанныеОбъектов.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ДокументЭДО.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	ДанныеОбъектов КАК ДанныеОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
		|		ПО ДанныеОбъектов.ИдентификаторСообщения = ДокументЭДО.ИдентификаторСвязи
		|		И ДанныеОбъектов.ИдентификаторПолучателя = ДокументЭДО.ИдентификаторОрганизации
		|		И ДанныеОбъектов.ИдентификаторОтправителя = ДокументЭДО.ИдентификаторКонтрагента
		|		И ДанныеОбъектов.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя)
		|		И ДанныеОбъектов.ИдентификаторСообщения <> """"
		|		И ДанныеОбъектов.НомерДокумента = ДокументЭДО.НомерДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО ДокументЭДО.ВидДокумента = ВидыДокументовЭДО.Ссылка
		|		И ДанныеОбъектов.ТипДокумента = ВидыДокументовЭДО.ТипДокумента
		|		И ДанныеОбъектов.ПрикладнойТипДокумента = ВидыДокументовЭДО.ПрикладнойТипДокумента
		|УПОРЯДОЧИТЬ ПО
		|	ЭлектронныйДокумент УБЫВ";
КонецФункции

// Параметры:
//  ДанныеОбъекта - СтрокаТаблицыЗначений: см. СинхронизацияЭДО.НовыеДанныеОбъектов
Процедура ДополнитьДанныеОбъектаСодержаниемИнформацииОтправителя(ДанныеОбъекта)
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	Если ДанныеОбъекта.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
		И НЕ (МодульОбменСГИСЭПД <> Неопределено 
			И МодульОбменСГИСЭПД.ЭтоТитулОтправителя(ДанныеОбъекта.ТипЭлементаРегламента)) Тогда
		Возврат;
	КонецЕсли;
	
	Содержание = ФорматыЭДО.ПрочитатьСодержаниеДокумента(ДанныеОбъекта.ОписаниеДанных);
	
	Если ЗначениеЗаполнено(Содержание) Тогда
		Если ЗначениеЗаполнено(Содержание.ТипДокумента) Тогда
			Если ДанныеОбъекта.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСерверЕИС
				И ОбщегоНазначения.ПодсистемаСуществует(
					"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
				// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
				МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
				МодульЭлектронноеАктированиеЕИС.ПриЗаполненииТипаДокументаИзСодержания(ДанныеОбъекта, Содержание);
				// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
			Иначе
				ДанныеОбъекта.ТипДокумента = Содержание.ТипДокумента;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Содержание.ПрикладнойТипДокумента) Тогда
			ДанныеОбъекта.ПрикладнойТипДокумента = Содержание.ПрикладнойТипДокумента;
		КонецЕсли;
		Если ЗначениеЗаполнено(Содержание.Получатель.ИНН) И Не ЗначениеЗаполнено(ДанныеОбъекта.Организация) Тогда
			Организация = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Организации",
				Содержание.Получатель.ИНН, Содержание.Получатель.КПП, Содержание.ДатаДокумента);
			Если ЗначениеЗаполнено(Организация) Тогда
				ДанныеОбъекта.Организация = Организация;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Содержание.Отправитель.ИНН) Тогда
			
			ПараметрыПриглашения = ПриглашенияЭДОКлиентСервер.КлючПриглашения();
			ПараметрыПриглашения.ИдентификаторОрганизации = ДанныеОбъекта.ИдентификаторПолучателя;
			ПараметрыПриглашения.ИдентификаторКонтрагента = ДанныеОбъекта.ИдентификаторОтправителя;
			
			СоздаватьКонтрагентовАвтоматическиБЭД = НастройкиЭДО.СоздаватьКонтрагентовАвтоматически();
			ОбменМеждуСобственнымиОрганизациями = Неопределено;
			ОбменПоПриглашению = СинхронизацияЭДОКлиентСервер.ЭтоОбменЧерезОператора(ДанныеОбъекта.СпособОбмена);
			
			Если ОбменПоПриглашению Тогда
				КлючКонтрагента = ПриглашенияЭДО.НовыйКлючУчастникаЭДО();
				КлючКонтрагента.ИНН = Содержание.Отправитель.ИНН;
				КлючКонтрагента.КПП = Содержание.Отправитель.КПП;
				КлючКонтрагента.ДатаСведений = Содержание.ДатаДокумента;
				СтруктураУчастникаЭДО = ПриглашенияЭДО.УчастникЭДОПоКлючуИПриглашению(ПараметрыПриглашения, КлючКонтрагента);
				КонтрагентИзСодержания = СтруктураУчастникаЭДО.Ссылка;
				ОбменМеждуСобственнымиОрганизациями = СтруктураУчастникаЭДО.ЭтоОрганизация;
			Иначе
				ОбменМеждуСобственнымиОрганизациями = 
					СинхронизацияЭДО.ЭтоИнтеркампани(ПараметрыПриглашения.ИдентификаторОрганизации);
				ТипОбъектаОтправителя = ?(ОбменМеждуСобственнымиОрганизациями, "Организации", "Контрагенты");
				КонтрагентИзСодержания = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП(ТипОбъектаОтправителя, Содержание.Отправитель.ИНН,
				Содержание.Отправитель.КПП,  Содержание.ДатаДокумента);
			КонецЕсли;

			Если Не ЗначениеЗаполнено(КонтрагентИзСодержания)
				И СоздаватьКонтрагентовАвтоматическиБЭД
				И Не ОбменМеждуСобственнымиОрганизациями = Истина Тогда
					
				РеквизитыКонтрагента = Новый Структура;
				РеквизитыКонтрагента.Вставить("ИНН", Содержание.Отправитель.ИНН);
				РеквизитыКонтрагента.Вставить("КПП", Содержание.Отправитель.КПП);
				РеквизитыКонтрагента.Вставить("Наименование", Содержание.Отправитель.Наименование);
				КонтрагентИзСодержания = ИнтеграцияЭДО.СоздатьКонтрагента(РеквизитыКонтрагента);
			КонецЕсли;

			Если ЗначениеЗаполнено(КонтрагентИзСодержания) Тогда
				ДанныеОбъекта.Контрагент = КонтрагентИзСодержания;
			КонецЕсли;

		КонецЕсли;
		ДанныеОбъекта.НомерДокумента = Содержание.НомерДокумента;
	Иначе
		Содержание = ЭлектронныеДокументыЭДО.НовоеСодержаниеСообщения();
		Если ЗначениеЗаполнено(ДанныеОбъекта.ОписаниеДокумента) Тогда
			Содержание.НомерДокумента = ДанныеОбъекта.ОписаниеДокумента.Номер;
			Содержание.ДатаДокумента = ДанныеОбъекта.ОписаниеДокумента.Дата;
			Содержание.СуммаДокумента = ДанныеОбъекта.ОписаниеДокумента.Сумма;
		КонецЕсли;
		Содержание.ТипДокумента = ДанныеОбъекта.ТипДокумента;
		Содержание.ТипРегламента = ДанныеОбъекта.ТипРегламента;
		ДанныеОбъекта.НомерДокумента = Содержание.НомерДокумента;
	КонецЕсли;
	ДанныеОбъекта.Содержание = Содержание;
	Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.ТипДокумента) И ЗначениеЗаполнено(Содержание.ОтражениеВУчете) Тогда
		Если Содержание.ОтражениеВУчете.ВариантЗаполнения = "СвРК" Тогда
			ДанныеОбъекта.ТипДокумента = Перечисления.ТипыДокументовЭДО.СведенияОРеализацииКомиссионером;
		ИначеЕсли Содержание.ОтражениеВУчете.ВариантЗаполнения = "СвИСРК" Тогда
			ДанныеОбъекта.ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОРеализацииКомиссионером;				
		ИначеЕсли Содержание.ОтражениеВУчете.ВариантЗаполнения = "СвЗК" Тогда
			ДанныеОбъекта.ТипДокумента = Перечисления.ТипыДокументовЭДО.СведенияОЗакупкеКомиссионером;				
		ИначеЕсли Содержание.ОтражениеВУчете.ВариантЗаполнения = "СвИСЗК" Тогда
			ДанныеОбъекта.ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОЗакупкеКомиссионером;				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДанныеОбъекта - СтрокаТаблицыЗначений: см. СинхронизацияЭДО.НовыеДанныеОбъектов
Процедура ДополнитьДанныеОбъектаКомментариемКОтклонениюАннулированию(ДанныеОбъекта)
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	Если ДанныеОбъекта.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.УОУ
		И ДанныеОбъекта.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ПОА
		И ДанныеОбъекта.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ
		И НЕ (МодульОбменСГИСЭПД <> Неопределено И МодульОбменСГИСЭПД.ЭтоУОУ(ДанныеОбъекта.ТипЭлементаРегламента)) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта.КомментарийСообщения = ФорматыЭДО.ТекстУточнения(ДанныеОбъекта.ОписаниеДанных);
	
КонецПроцедуры

// Параметры:
//  ДанныеОбъекта - СтрокаТаблицыЗначений: см. СинхронизацияЭДО.НовыеДанныеОбъектов
Процедура ДополнитьДанныеОбъектаНомерамиМЧДПоДоверителям(ДанныеОбъекта)
	
	Если ДанныеОбъекта.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
		ИЛИ Не ЗначениеЗаполнено(ДанныеОбъекта.Содержание) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта.НомераМЧД = ФорматыЭДО.НомераМашиночитаемыхДоверенностей(
		ДанныеОбъекта.ОписаниеДанных, ДанныеОбъекта.Содержание.Формат);
	
КонецПроцедуры

// Параметры:
//  ДанныеОбъектов - см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  РезультатЗапроса - РезультатЗапроса
Процедура ДополнитьДанныеОбъектовВидамиДокументов(ДанныеОбъектов, РезультатЗапроса)
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеОбъекта = СинхронизацияЭДО.ДанныеОбъектаПоИдентификатору(ДанныеОбъектов, Выборка.ИдентификаторСтроки);
		Если ЗначениеЗаполнено(Выборка.ВидДокумента) Тогда
			ДанныеОбъекта.ВидДокумента = Выборка.ВидДокумента;
		Иначе
			ПараметрыПоиска = Справочники.ВидыДокументовЭДО.НовыеПараметрыПоискаВидаДокумента(ДанныеОбъекта.ТипДокумента);
			Если ЗначениеЗаполнено(ДанныеОбъекта.ПрикладнойТипДокумента) Тогда
				ПараметрыПоиска.ПрикладнойТипДокумента = ДанныеОбъекта.ПрикладнойТипДокумента;
			КонецЕсли;
			ДанныеОбъекта.ВидДокумента = Справочники.ВидыДокументовЭДО.СоздатьВидДокумента(ПараметрыПоиска);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ДанныеОбъектов - см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  РезультатЗапроса - РезультатЗапроса
Процедура ДополнитьДанныеОбъектовДляПроверкиОтветнойПодписи(ДанныеОбъектов, РезультатЗапроса)
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыСообщений = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПрисоединенныеФайлыСообщений.Добавить(Выборка.ОсновнойФайл);
	КонецЦикла;
	
	ДвоичныеДанныеФайлов = РаботаСФайлами.ДвоичныеДанныеФайлов(ПрисоединенныеФайлыСообщений);
	
	Выборка.Сбросить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДвоичныеДанные = ДвоичныеДанныеФайлов[Выборка.ОсновнойФайл];
		Если ДвоичныеДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеОбъекта = СинхронизацияЭДО.ДанныеОбъектаПоИдентификатору(ДанныеОбъектов, Выборка.ИдентификаторСтроки);
		ДанныеОбъекта.ОписаниеДанных = РаботаСФайламиБЭД.НовоеОписаниеФайла();
		ДанныеОбъекта.ОписаниеДанных.ДвоичныеДанные = ДвоичныеДанные;
		ДанныеОбъекта.Объект = Выборка.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ДанныеОбъектов - см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  РезультатЗапроса - РезультатЗапроса
Процедура ДополнитьДанныеОбъектовПредыдущимиВерсиямиДокументов(ДанныеОбъектов, РезультатЗапроса)
	
	ОбработанныеСтроки = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ОбработанныеСтроки[Выборка.ИдентификаторСтроки] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеОбъекта = СинхронизацияЭДО.ДанныеОбъектаПоИдентификатору(ДанныеОбъектов, Выборка.ИдентификаторСтроки);
		ДанныеОбъекта.ПредыдущийДокумент = Выборка.ЭлектронныйДокумент;
		
		ОбработанныеСтроки.Вставить(Выборка.ИдентификаторСтроки, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ДанныеОбъектов - см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  МенеджерКриптографии - МенеджерКриптографии
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор строки данных контейнеров.
//  * Значение - см. ПроверитьПодписиДанныхДокумента
Функция ПроверитьПодписиПоОбъектамКонтейнеров(ДанныеОбъектов, МенеджерКриптографии, КонтекстДиагностики)
	
	Результат = Новый Соответствие;
	
	Для Каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
		
		ПодписиОсновныхДанных = ПроверитьПодписиДанныхДокумента(ДанныеОбъекта.ОписаниеДанных.ДвоичныеДанные,
			ДанныеОбъекта.ПодписиОсновныхДанных, МенеджерКриптографии, КонтекстДиагностики);
		
		ПодписиДополнительныхДанных = ПроверитьПодписиДанныхДокумента(
			ДанныеОбъекта.ОписаниеДополнительныхДанных.ДвоичныеДанные,
			ДанныеОбъекта.ПодписиДополнительныхДанных, МенеджерКриптографии, КонтекстДиагностики);
		
		ПроверенныеПодписи = Новый Структура;
		ПроверенныеПодписи.Вставить("ПодписиОсновныхДанных", ПодписиОсновныхДанных);
		ПроверенныеПодписи.Вставить("ПодписиДополнительныхДанных", ПодписиДополнительныхДанных);
		
		Результат.Вставить(ДанныеОбъекта.ИдентификаторСтроки, ПроверенныеПодписи);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИсходныеДанные - ДвоичныеДанные
//  ДанныеПодписей - Массив из см. СинхронизацияЭДО.НовоеОписаниеДанныхОбъекта
//  МенеджерКриптографии - МенеджерКриптографии
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Массив из см. КриптографияБЭД.НовыеСвойстваПодписи
Функция ПроверитьПодписиДанныхДокумента(ИсходныеДанные, ДанныеПодписей, МенеджерКриптографии, КонтекстДиагностики)
	
	ПроверенныеПодписи = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ДанныеПодписей) Тогда
		Возврат ПроверенныеПодписи;
	КонецЕсли;
	
	Для Каждого ДанныеПодписи Из ДанныеПодписей Цикл
		РезультатПроверки = КриптографияБЭД.ПроверитьПодпись(МенеджерКриптографии, ИсходныеДанные,
			ДанныеПодписи.ДвоичныеДанные, КонтекстДиагностики);
		СвойстваПодписи = РезультатПроверки.СвойстваПодписи;
		СвойстваПодписи.Подпись = ДанныеПодписи.ДвоичныеДанные;
		СвойстваПодписи.ИмяФайлаПодписи = ДанныеПодписи.ИмяФайла;
		СвойстваПодписи.Вставить("ОписаниеОшибки", РезультатПроверки.ОписаниеОшибки);
		ПроверенныеПодписи.Добавить(СвойстваПодписи);
	КонецЦикла;
	
	Возврат ПроверенныеПодписи;
	
КонецФункции

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ТекстОшибки - Строка
Процедура ДобавитьОшибкуПроверкиПодписи(КонтекстДиагностики, ТекстОшибки)
	
	ВидОперации = НСтр("ru = 'Распаковка транспортных контейнеров ЭДО'");
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
		КриптографияБЭДКлиентСервер.ВидОшибкиКриптография(), ТекстОшибки,
		НСтр("ru = 'Ошибка при получении отпечатков сертификатов.'"));
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().Криптография);
	
КонецПроцедуры

// Параметры:
//  Отпечатки - см. КриптографияБЭДКлиентСервер.НовыйРезультатПолученияОтпечатков
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ОбработатьОшибкиПроверкиПодписей(Отпечатки, КонтекстДиагностики)
	
	Если Отпечатки.Клиент.Доступность Или Отпечатки.Сервер.Доступность Или Отпечатки.Облако.Доступность Тогда
		Возврат;
	КонецЕсли;	
	
	Если Отпечатки.Клиент.Ошибка Тогда
		ДобавитьОшибкуПроверкиПодписи(КонтекстДиагностики, Отпечатки.Клиент.ТекстОшибки);
	КонецЕсли;	
		
	Если Отпечатки.Сервер.Ошибка Тогда
		ДобавитьОшибкуПроверкиПодписи(КонтекстДиагностики, Отпечатки.Сервер.ТекстОшибки);
	КонецЕсли;	
		
	Если Отпечатки.Облако.Ошибка Тогда
		ДобавитьОшибкуПроверкиПодписи(КонтекстДиагностики, Отпечатки.Облако.ТекстОшибки);
	КонецЕсли;	
	
КонецПроцедуры

// Параметры:
//  ДанныеОбъектов - см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ОтпечаткиСертификатов - см. КриптографияБЭДКлиентСервер.НовыйРезультатПолученияОтпечатков
//  ПаролиСертификатов - Неопределено
//                     - см. КриптографияБЭД.НовыеПаролиСертификатов
//  МенеджерКриптографии - МенеджерКриптографии
// 
// Возвращаемое значение:
//  См. ЗагрузитьДанныеОбъектовКонтейнеровПослеПроверкиПодписей
Функция ЗагрузитьОбработатьДанныеОбъектовКонтейнеров(ДанныеОбъектов, КонтекстДиагностики, ОтпечаткиСертификатов,
	ПаролиСертификатов = Неопределено, МенеджерКриптографии = Неопределено) Экспорт

	Результат = НовыйРезультатЗагрузкиДокументов();
	
	Если Не ЗначениеЗаполнено(ДанныеОбъектов)
		ИЛИ ЭлектронныеДокументыЭДО.ВыполнениеДействийПоЭДОЗапрещено(КонтекстДиагностики) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДополнитьДанныеОбъектовДляЗагрузки(ДанныеОбъектов);
	
	БезПроверкиПодписей = Истина;
	Для Каждого СтрокаДанных Из ДанныеОбъектов Цикл
		Если ЕстьОсновныеДанныеДляПроверкиПодписи(СтрокаДанных)
			ИЛИ ЕстьДополнительныеДанныеДляПроверкиПодписи(СтрокаДанных) Тогда
			
			БезПроверкиПодписей = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если БезПроверкиПодписей Тогда
		ПроверенныеПодписи = Новый Соответствие;
		Результат = ЗагрузитьДанныеОбъектовКонтейнеровПослеПроверкиПодписей(ДанныеОбъектов,
			ПроверенныеПодписи, КонтекстДиагностики, ОтпечаткиСертификатов, ПаролиСертификатов);
		Возврат Результат;
	КонецЕсли;
	
	ТребуетсяПроверкаПодписейНаКлиенте = Истина;
	
	Если (ЭлектроннаяПодпись.ПроверятьЭлектронныеПодписиНаСервере()
		И ОтпечаткиСертификатов.Сервер.Доступность)
		Или КриптографияБЭД.ДоступнаПроверкаПодписиВОблаке() Тогда
		
		ТребуетсяПроверкаПодписейНаКлиенте = Ложь;
	КонецЕсли;
	
	Если ТребуетсяПроверкаПодписейНаКлиенте Тогда
		КонтекстПроверки = НовыйКонтекстПроверкиПодписей();
		КонтекстПроверки.ОтпечаткиСертификатов = ОтпечаткиСертификатов;
		КонтекстПроверки.ПаролиСертификатов = ПаролиСертификатов;
		КонтекстПроверки.ДанныеДокументов = ДанныеОбъектов;
		КонтекстПроверки.ИсключитьДиагностику = Истина;
		Результат.КонтекстПроверкиПодписей = КонтекстПроверки;
		Возврат Результат;
	КонецЕсли;
	
	Если МенеджерКриптографии = Неопределено
		И ОтпечаткиСертификатов.Сервер.Доступность Тогда
		МенеджерКриптографии = КриптографияБЭД.МенеджерКриптографии();
	КонецЕсли;
	
	ПроверенныеПодписи = ПроверитьПодписиПоОбъектамКонтейнеров(ДанныеОбъектов, МенеджерКриптографии,
		КонтекстДиагностики);
	
	Результат = ЗагрузитьДанныеОбъектовКонтейнеровПослеПроверкиПодписей(ДанныеОбъектов,
		ПроверенныеПодписи, КонтекстДиагностики, ОтпечаткиСертификатов, ПаролиСертификатов);
	
	ВизуализацияЭДОСлужебный.ЗапуститьКэшированиеВФоне();
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ДанныеОбъектов - см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  ПроверенныеПодписи - Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ОтпечаткиСертификатов - см. КриптографияБЭДКлиентСервер.НовыйРезультатПолученияОтпечатков
//  ПаролиСертификатов - Неопределено
//                     - см. КриптографияБЭД.НовыеПаролиСертификатов
// 
// Возвращаемое значение:
//  См. ЗагрузитьДанныеОбъектовКонтейнеров
Функция ЗагрузитьДанныеОбъектовКонтейнеровПослеПроверкиПодписей(ДанныеОбъектов, ПроверенныеПодписи, 
	КонтекстДиагностики, ОтпечаткиСертификатов, ПаролиСертификатов = Неопределено)
	
	ОбработатьОшибкиПроверкиПодписей(ОтпечаткиСертификатов, КонтекстДиагностики);
	
	РезультатЗагрузки = ЗагрузитьДанныеОбъектовКонтейнеров(ДанныеОбъектов, ПроверенныеПодписи, КонтекстДиагностики);
	
	ПроверитьПодписиПоМЧДПослеЗагрузкиДанных(КонтекстДиагностики);
	
	Возврат РезультатЗагрузки;
	
КонецФункции

// Параметры:
//  ДанныеОбъектов - см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  ПроверенныеПодписи - Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  См. НовыйРезультатЗагрузкиДокументов
Функция ЗагрузитьДанныеОбъектовКонтейнеров(ДанныеОбъектов, ПроверенныеПодписи, КонтекстДиагностики)
	
	РезультатЗагрузкиДанных = НовыйРезультатЗагрузкиДокументов();
	
	ДанныеОбъектовПоПакетам = Новый Соответствие;
	ДанныеОбъектовБезПакетов = Новый Массив;
	
	Для Каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
		
		Если ЗначениеЗаполнено(ДанныеОбъекта.ИдентификаторПакета)
			И ДанныеОбъекта.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			ДанныеОбъектовПакета = ДанныеОбъектовПоПакетам[ДанныеОбъекта.ИдентификаторПакета];
			Если ДанныеОбъектовПакета = Неопределено Тогда
				ДанныеОбъектовПакета = Новый Массив;
				ДанныеОбъектовПоПакетам.Вставить(ДанныеОбъекта.ИдентификаторПакета, ДанныеОбъектовПакета);
			КонецЕсли;
			ДанныеОбъектовПакета.Добавить(ДанныеОбъекта);
		Иначе
			ДанныеОбъектовБезПакетов.Добавить(ДанныеОбъекта);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеОбъектовПоПакетам) Тогда
		
		Для Каждого ДанныеОбъектовПакета Из ДанныеОбъектовПоПакетам Цикл
			
			ЗагрузитьДанныеОбъектовПакета(ДанныеОбъектовПакета, ПроверенныеПодписи,
				КонтекстДиагностики, РезультатЗагрузкиДанных);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъектовБезПакетов) Тогда
		
		Для Каждого ДанныеОбъекта Из ДанныеОбъектовБезПакетов Цикл
			
			ЗагрузитьДанныеОбъекта(ДанныеОбъекта, ПроверенныеПодписи, КонтекстДиагностики, РезультатЗагрузкиДанных);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РезультатЗагрузкиДанных;
	
КонецФункции

// Параметры:
//  ДанныеОбъекта - СтрокаТаблицыЗначений: см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  ПроверенныеПодписи - Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  РезультатЗагрузкиДанных - см. НовыйРезультатЗагрузкиДокументов
//
Процедура ЗагрузитьДанныеОбъекта(ДанныеОбъекта, ПроверенныеПодписи, КонтекстДиагностики, РезультатЗагрузкиДанных)
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеДокументаПриЗагрузке(ДанныеОбъекта);
		
		РезультатЗагрузкиСообщения = ЗагрузитьСообщениеПоДаннымОбъекта(ДанныеОбъекта, ПроверенныеПодписи,
			КонтекстДиагностики, РезультатЗагрузкиДанных);
		
		Если ДанныеОбъекта.Отказ Тогда
			ОтменитьТранзакцию();
			ТранспортныеКонтейнерыЭДО.ИзменитьСтатусКонтейнера(
			ДанныеОбъекта.ТранспортныйКонтейнер,
			Перечисления.СтатусыТранспортныхСообщенийБЭД.Неизвестный,
			КонтекстДиагностики);
			Возврат;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ДанныеОбъекта.Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Не удалось загрузить электронный документ по причине:'")
			+ Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СинхронизацияЭДО.ОбработатьОшибкуЗагрузкиОбъекта(ДанныеОбъекта, КонтекстДиагностики, ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	Если ДанныеОбъекта.ЭтоПовторноЗагружаемоеСообщение Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатЗагрузкиДанных.ИтогДействийПоЭДО, Перечисления.ДействияПоЭДО.Загрузить,
		РезультатЗагрузкиСообщения.ПараметрыДокумента.Ссылка);
	
	ПослеЗагрузкиСообщения(РезультатЗагрузкиСообщения, КонтекстДиагностики);
	
КонецПроцедуры

// Загружает данные объектов пакета в информационную базу
// 
// Параметры:
// 
//  ДанныеОбъектовПакета - Соответствие из КлючИЗначение:
//    * Ключ - Строка
//    * Значение - Массив из СтрокаТаблицыЗначений: см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  ПроверенныеПодписи - Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  РезультатЗагрузки - см. НовыйРезультатЗагрузкиДокументов
//
Процедура ЗагрузитьДанныеОбъектовПакета(ДанныеОбъектовПакета, ПроверенныеПодписи, КонтекстДиагностики, РезультатЗагрузки)
	
	РезультатыЗагрузкиСообщенийПакета = Новый Массив;
	Действие = Перечисления.ДействияПоЭДО.Загрузить;
	Отказ = Ложь;
	ЭтоПовторноЗагружаемоеСообщение = Ложь;
	КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоПакету(ДанныеОбъектовПакета.Ключ, Действие);
	
	НачатьТранзакцию();
	Попытка
		
		СвойстваДокументовДляОписанияПакета = НовыеСвойстваДокументовДляОписанияПакетов();
		
		Для Каждого ДанныеОбъекта Из ДанныеОбъектовПакета.Значение Цикл
			
			Если ДанныеОбъекта.Распакован Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатЗагрузкиСообщения = ЗагрузитьСообщениеПоДаннымОбъекта(ДанныеОбъекта, ПроверенныеПодписи,
				КонтекстДиагностики, РезультатЗагрузки);
				
			Если ДанныеОбъекта.ЭтоПовторноЗагружаемоеСообщение Тогда
				ЭтоПовторноЗагружаемоеСообщение = Истина;
			КонецЕсли;
				
			Если ДанныеОбъекта.Отказ Тогда
				Отказ = Истина;
				Прервать;
			КонецЕсли;
			
			РезультатыЗагрузкиСообщенийПакета.Добавить(РезультатЗагрузкиСообщения);
			
			ТипЭлементаРегламента = ?(РезультатЗагрузкиСообщения.СообщениеОбъект = Неопределено, Неопределено,
				РезультатЗагрузкиСообщения.СообщениеОбъект.ТипЭлементаРегламента);
			Если ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
				ЗаполнитьЗначенияСвойств(СвойстваДокументовДляОписанияПакета.Добавить(),
					РезультатЗагрузкиСообщения.ПараметрыДокумента);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Отказ Тогда
			ДобавитьОшибкуОтменыОперации(КонтекстВыполненияДействия, КонтекстДиагностики);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ПакетыДокументовЭДО.ЗагрузитьДокументыПакета(СвойстваДокументовДляОписанияПакета);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Отказ = Истина;
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Если ЭтоПовторноЗагружаемоеСообщение Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Для Каждого ДанныеОбъекта Из ДанныеОбъектовПакета.Значение Цикл
			ДанныеОбъекта.Отказ = Истина;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Для Каждого РезультатЗагрузкиСообщения Из РезультатыЗагрузкиСообщенийПакета Цикл
		ЗаполнитьИтогВыполненияДействияПоЭДО(РезультатЗагрузки.ИтогДействийПоЭДО, Действие,
		РезультатЗагрузкиСообщения.ПараметрыДокумента.Ссылка);
		ПослеЗагрузкиСообщения(РезультатЗагрузкиСообщения, КонтекстДиагностики);
	КонецЦикла;
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * ЭтоНовыйДокумент - Булево
//  * СостояниеДокумента - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * ПараметрыДокумента - Неопределено
//                       - см. НовыеПараметрыДокументаДляЗагрузки
//  * СообщениеОбъект - Неопределено
//                    - ДокументОбъект.СообщениеЭДО
//  * ИзвещениеОПолучении - ДокументСсылка.СообщениеЭДО
//  * СообщенияПоДокументу - ТаблицаЗначений:
//  ** Ссылка - ДокументСсылка.СообщениеЭДО
//  ** Дата - Дата
//  ** ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  ** Состояние - ПеречислениеСсылка.СостоянияСообщенийЭДО
//  ** Статус - ПеречислениеСсылка.СтатусыСообщенийЭДО
//  ** Направление - ПеречислениеСсылка.НаправленияЭДО
//  * ИсправленнаяВерсияДокумента - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ОписаниеДанных - Неопределено
//                   - см. СинхронизацияЭДО.НовоеОписаниеДанныхОбъекта
//  * ОписаниеДополнительныхДанных - Неопределено
//                                 - см. СинхронизацияЭДО.НовоеОписаниеДанныхОбъекта
//  * ДополнительныеПараметрыКарточки - Неопределено,Произвольный
//  * Формат - Строка
//
Функция НовыйРезультатЗагрузкиСообщения()
	Результат = Новый Структура;
	Результат.Вставить("ЭтоНовыйДокумент", Ложь);
	Результат.Вставить("СостояниеДокумента", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("ПараметрыДокумента", Неопределено);
	Результат.Вставить("СообщениеОбъект", Неопределено);
	Результат.Вставить("ИзвещениеОПолучении", Документы.СообщениеЭДО.ПустаяСсылка());
	Результат.Вставить("СообщенияПоДокументу", Новый ТаблицаЗначений);
	Результат.Вставить("ИсправленнаяВерсияДокумента", Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка());
	Результат.Вставить("ОписаниеДанных", Неопределено);
	Результат.Вставить("ОписаниеДополнительныхДанных", Неопределено);
	Результат.Вставить("ДополнительныеПараметрыКарточки", Неопределено);
	Результат.Вставить("Формат", "");
	Возврат Результат;
КонецФункции

// Загружает сообщение в информационную базу по данным объекта
// 
// Параметры:
//  ДанныеОбъекта - СтрокаТаблицыЗначений из см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  ПроверенныеПодписи - Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  РезультатЗагрузкиДанных - см. НовыйРезультатЗагрузкиДокументов
//
// Возвращаемое значение:
//  См. НовыйРезультатЗагрузкиСообщения
//
Функция ЗагрузитьСообщениеПоДаннымОбъекта(ДанныеОбъекта, ПроверенныеПодписи, КонтекстДиагностики, РезультатЗагрузкиДанных)
	
	СодержаниеФайла = ДанныеОбъекта.Содержание;
	Если Не ЭлектронныеДокументыЭДО.ЗагрузкаФорматаПоддерживается(СодержаниеФайла) Тогда
		
		Результат = НовыйРезультатЗагрузкиСообщения();
		ДанныеОбъекта.Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Формат ""%1"" не поддерживается текущей версией конфигурации.
		|Необходимо обновить конфигурацию до актуальной версии.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", СодержаниеФайла.Формат);
		СинхронизацияЭДО.ОбработатьОшибкуЗагрузкиОбъекта(ДанныеОбъекта, КонтекстДиагностики, ТекстОшибки); 
		Возврат Результат;
		
	КонецЕсли;
	
	Если ДанныеОбъекта.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.Ошибка Тогда
		
		Результат = ЗагрузитьОшибкуПередачи(ДанныеОбъекта, КонтекстДиагностики);
		
	ИначеЕсли ДанныеОбъекта.ЭтоОтветнаяПодпись Тогда
		
		Результат = ЗагрузитьОтветнуюПодпись(ДанныеОбъекта, ПроверенныеПодписи, КонтекстДиагностики);
		
	Иначе
		
		Результат = ЗагрузитьСообщениеДокумента(ДанныеОбъекта, ПроверенныеПодписи, КонтекстДиагностики);
		
	КонецЕсли;
	
	Если ДанныеОбъекта.Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ДанныеОбъекта.ЭтоПовторноЗагружаемоеСообщение Тогда
		
		ШаблонСообщения = 
			НСтр("ru = 'Распаковка транспортного контейнера отменена, %1 уже существует в документообороте %2'");
		
		ПредставлениеЭлементаРегламента = ДанныеОбъекта.ТипЭлементаРегламента;
		Если ДанныеОбъекта.ЭтоОтветнаяПодпись Тогда
			ПредставлениеЭлементаРегламента = НСтр("ru = 'Ответная подпись'");
		КонецЕсли;
	
		Комментарий = СтрШаблон(
			ШаблонСообщения, 
			ПредставлениеЭлементаРегламента, 
			ДанныеОбъекта.ИдентификаторДокументооборота);
		
		ТранспортныеКонтейнерыЭДО.ИзменитьСтатусКонтейнера(
			ДанныеОбъекта.ТранспортныйКонтейнер,
			Перечисления.СтатусыТранспортныхСообщенийБЭД.Отменен,
			КонтекстДиагностики,
			Комментарий);
			
		Возврат Результат;
			
	КонецЕсли;
	
	ТребуетсяПереопределитьДанныеСообщенияОператораПоУчастникамЭДО = Не ЗначениеЗаполнено(ДанныеОбъекта.Контрагент);	

	Если ТребуетсяПереопределитьДанныеСообщенияОператораПоУчастникамЭДО Тогда
		ДанныеОбъекта.Контрагент = Результат.ПараметрыДокумента.Контрагент; 
		ДанныеОбъекта.Организация = Результат.ПараметрыДокумента.Организация;
		ДанныеОбъекта.ДоговорКонтрагента = Результат.ПараметрыДокумента.ДоговорКонтрагента;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ИдентификаторОтправителя) Тогда
		ДанныеОбъекта.ИдентификаторОтправителя = Результат.ПараметрыДокумента.ИдентификаторКонтрагента;
	КонецЕсли;
	
	Если (Результат.СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен
		ИЛИ Результат.СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением
		ИЛИ Результат.СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.Аннулирован) Тогда
		
		ОтправитьНаОзнакомление(Результат.ПараметрыДокумента.Ссылка);
		
	ИначеЕсли Результат.ПараметрыДокумента.НаОзнакомлении Тогда
		
		ВернутьСОзнакомления(Результат.ПараметрыДокумента.Ссылка);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ИзвещениеОПолучении) Тогда
		РезультатЗагрузкиДанных.ДокументыДляОбработкиИзвещений.Вставить(
			Результат.СообщениеОбъект.ЭлектронныйДокумент, Истина);
	КонецЕсли;
	
	Сообщение = Документы.СообщениеЭДО.ПустаяСсылка();
	Если Результат.СообщениеОбъект <> Неопределено Тогда
		Сообщение = Результат.СообщениеОбъект.Ссылка;
	КонецЕсли;
	
	ЭлектронныеДокументыЭДОСобытия.ПриЗагрузкеСообщения(Сообщение, ДанныеОбъекта, КонтекстДиагностики);
	
	Результат.ДополнительныеПараметрыКарточки = ДанныеОбъекта.Карточка.ДополнительныеПараметры;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ДанныеОбъекта - СтрокаТаблицыЗначений: см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  
// Возвращаемое значение:
//  См. НовыйРезультатЗагрузкиСообщения
Функция ЗагрузитьОшибкуПередачи(ДанныеОбъекта, КонтекстДиагностики)
	
	Результат = НовыйРезультатЗагрузкиСообщения();
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ОшибкаПередачи) Тогда
		ДанныеОбъекта.Отказ = Истина;
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Отсутствует информация об ошибке по документообороту с идентификатором %1'"),
			ДанныеОбъекта.ИдентификаторДокументооборота);
		СинхронизацияЭДО.ОбработатьОшибкуЗагрузкиОбъекта(ДанныеОбъекта, КонтекстДиагностики, ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
			
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПараметровОбновленияСостоянияПоИдентификатору();
	Запрос.УстановитьПараметр("ИдентификаторДокументооборота", ДанныеОбъекта.ИдентификаторДокументооборота);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ДанныеОбъекта.ИдентификаторПолучателя);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ПараметрыДокумента = РезультатыЗапроса[0].Выбрать();
	Если Не ПараметрыДокумента.Следующий() Тогда
		
		ДанныеОбъекта.Отказ = Истина;
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найден электронный документ владелец по документообороту с идентификатором %1'"),
			ДанныеОбъекта.ИдентификаторДокументооборота);
		СинхронизацияЭДО.ОбработатьОшибкуЗагрузкиОбъекта(ДанныеОбъекта, КонтекстДиагностики, ТекстОшибки);
		
		Если Не ЗначениеЗаполнено(ДанныеОбъекта.Контрагент) Тогда
			Если ЗначениеЗаполнено(ДанныеОбъекта.ОшибкаПередачи.Описание) Тогда
				ТекстОшибки =  ДанныеОбъекта.ОшибкаПередачи.Описание;
			Иначе
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не удалось определить контрагента по идентификатору: %1'"),
					ДанныеОбъекта.ИдентификаторПолучателя);
			КонецЕсли;
			СинхронизацияЭДО.ОбработатьОшибкуЗагрузкиОбъекта(ДанныеОбъекта, КонтекстДиагностики, ТекстОшибки);
		КонецЕсли;
				
		Возврат Результат;
		
	КонецЕсли;
	
	СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
	
	ДокументОбъект = ПараметрыДокумента.Ссылка.ПолучитьОбъект();
	ДокументОбъект.Остановлен = Истина;
	ДокументОбъект.ПричинаОстановки = ?(ДанныеОбъекта.ОшибкаПередачи.Блокирующая,
		Перечисления.ПричиныОстановкиЭДО.ОшибкаПередачиБлокирующая, 
		Перечисления.ПричиныОстановкиЭДО.ОшибкаПередачиНеблокирующая);
	
	ДатаИзменения = ТекущаяДатаСеанса();
	
	НайденноеСообщение = СостоянияСообщений.Найти(ДанныеОбъекта.ТипЭлементаРегламента, "ТипЭлементаРегламента");
	Если НайденноеСообщение <> Неопределено Тогда
		СообщениеОбъект = НайденноеСообщение.Ссылка.ПолучитьОбъект();
		СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.ПодготовленКОтправке;
		СообщениеОбъект.ДатаИзмененияСтатуса = ДатаИзменения;
		СообщениеОбъект.Состояние = Перечисления.СостоянияСообщенийЭДО.Хранение;
		СообщениеОбъект.Записать();
		
		НайденноеСообщение.Статус = СообщениеОбъект.Статус;
		НайденноеСообщение.Состояние = СообщениеОбъект.Состояние;
	Иначе
		НайденноеСообщение = СостоянияСообщений.Найти(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя,
			"ТипЭлементаРегламента");
	КонецЕсли;
	
	УстановитьСостояниеХранение(СостоянияСообщений, ДатаИзменения);
	
	Комментарий = ДанныеОбъекта.ОшибкаПередачи.Описание;
	
	СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ДокументОбъект, СостоянияСообщений,
		ДатаИзменения, КонтекстДиагностики,,Комментарий);
	
	РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Перечисления.ДействияПоЭДО.Загрузить, ДокументОбъект,
		СостояниеДокумента, ДатаИзменения, НайденноеСообщение, Комментарий);
	
	Результат.СостояниеДокумента = СостояниеДокумента;
	Результат.ПараметрыДокумента = ПараметрыДокумента;
	Результат.СообщенияПоДокументу = СостоянияСообщений;
	Результат.ОписаниеДанных = ДанныеОбъекта.ОписаниеДанных;
	Результат.ОписаниеДополнительныхДанных = ДанныеОбъекта.ОписаниеДополнительныхДанных;
	
	Возврат Результат;
	
КонецФункции

// Загружает ответную подпись в информационную базу.
// 
// Параметры:
//  ДанныеОбъекта - СтрокаТаблицыЗначений из см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  ПроверенныеПодписи - Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  См. НовыйРезультатЗагрузкиСообщения
//
Функция ЗагрузитьОтветнуюПодпись(ДанныеОбъекта, ПроверенныеПодписи, КонтекстДиагностики)
	
	Результат = НовыйРезультатЗагрузкиСообщения();
	
	Сообщение = ДанныеОбъекта.Объект;
	
	Если Не ЗначениеЗаполнено(Сообщение) Тогда
		ДанныеОбъекта.Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Отсутствует электронный документ для загрузки ответной подписи.'");
		СинхронизацияЭДО.ОбработатьОшибкуЗагрузкиОбъекта(ДанныеОбъекта, КонтекстДиагностики, ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ОтветныеПодписи = ПроверенныеПодписи[ДанныеОбъекта.ИдентификаторСтроки];
	Если ОтветныеПодписи = Неопределено Тогда
		ДанныеОбъекта.Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Отсутствует ответные подписи для загрузки.'");
		СинхронизацияЭДО.ОбработатьОшибкуЗагрузкиОбъекта(ДанныеОбъекта, КонтекстДиагностики, ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ЭлектронныйДокумент");
	ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент);
	
	ЗаблокироватьДанныеСообщенияДляИзменения(Сообщение, ЭлектронныйДокумент, ЭтоВходящийЭДО);
	
	СообщениеОбъект = Сообщение.ПолучитьОбъект();
	Если СообщениеОбъект.ЭлектронныйДокумент <> ЭлектронныйДокумент
		Или ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(СообщениеОбъект.ЭлектронныйДокумент) <> ЭтоВходящийЭДО Тогда
		ТекстОшибки = НСтр("ru='не удалось заблокировать данные электронного документа'");
		Действие = Перечисления.ДействияПоЭДО.Загрузить;
		
		КонтекстВыполненияДействия = СоздатьКонтекстВыполненияДействияПоСообщению(Сообщение, Действие);
		ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполненияДействия, КонтекстДиагностики);
		
		Результат.Отказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Если СообщениеОбъект.Направление <> Перечисления.НаправленияЭДО.Исходящий Тогда
		ДанныеОбъекта.Отказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ЕстьНовыеПодписи = Ложь;
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(СообщениеОбъект.ОсновнойФайл);
	Для Каждого СвойстваПодписи Из ОтветныеПодписи.ПодписиОсновныхДанных Цикл
		Если ЭтоНоваяПодпись(УстановленныеПодписи, СвойстваПодписи) Тогда
			ЕстьНовыеПодписи = Истина;
			ЭлектроннаяПодпись.ДобавитьПодпись(СообщениеОбъект.ОсновнойФайл, СвойстваПодписи);
			
			Доверитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "Контрагент");
			СведенияОДоверителе = ИнтеграцияЭДО.ДанныеЮрФизЛица(Доверитель);
			
			Если ТребуетсяМашиночитаемаяДоверенностьПоДаннымДокумента(
				СведенияОДоверителе.ИНН, СвойстваПодписи.Сертификат) Тогда
				ХешПодписи = КриптографияБЭД.ХешПодписи(СвойстваПодписи.Подпись);
				МашиночитаемыеДоверенности.ВключитьПроверкуПодписи(СообщениеОбъект.ОсновнойФайл, ХешПодписи);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьНовыеПодписи Тогда
		ДанныеОбъекта.ЭтоПовторноЗагружаемоеСообщение = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаПараметровОбновленияСостоянияПоИдентификатору());
	ТекстыЗапроса.Добавить(ТекстЗапросаПараметровСостоянияДокумента());
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("ИдентификаторДокументооборота", ДанныеОбъекта.ИдентификаторДокументооборота);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ДанныеОбъекта.ИдентификаторПолучателя);
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ПараметрыДокумента = РезультатыЗапроса[0].Выбрать();
	ПараметрыДокумента.Следующий();
	СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
	
	СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.Подтвержден;
	СообщениеОбъект.ДатаИзмененияСтатуса = ТекущаяДатаСеанса;
	СообщениеОбъект.Состояние = РегламентыЭДО.СостояниеСообщения(СообщениеОбъект, ПараметрыДокумента);
	СообщениеОбъект.Записать();
	
	ПодписиПоДаннымОбъекта = ПроверенныеПодписи[ДанныеОбъекта.ИдентификаторСтроки];
	
	ДобавитьМашиночитаемыеДоверенности(СообщениеОбъект.ОсновнойФайл,
		ДанныеОбъекта.Содержание, ДанныеОбъекта.НомераМЧД, ДанныеОбъекта.Доверенности, ПодписиПоДаннымОбъекта);
	
	НайденнаяСтрока = СостоянияСообщений.Найти(СообщениеОбъект.Ссылка, "Ссылка");
	НайденнаяСтрока.Состояние = СообщениеОбъект.Состояние;
	
	Комментарий = КомментарийКСостояниюДокумента(РезультатыЗапроса[2]);
	
	СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияСообщений,
		СообщениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики,,Комментарий);
	
	УстановитьКлючевыеДатыПриЗагрузкеОтветнойПодписи(СообщениеОбъект, ТекущаяДатаСеанса);
	
	РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Перечисления.ДействияПоЭДО.Загрузить,
		ПараметрыДокумента, СостояниеДокумента, СообщениеОбъект.ДатаИзмененияСтатуса, СообщениеОбъект);
	
	Результат.СостояниеДокумента = СостояниеДокумента;
	Результат.ПараметрыДокумента = ПараметрыДокумента;
	Результат.СообщениеОбъект = СообщениеОбъект;
	Результат.СообщенияПоДокументу = СостоянияСообщений;
	Результат.ОписаниеДанных = ДанныеОбъекта.ОписаниеДанных;
	Результат.ОписаниеДополнительныхДанных = ДанныеОбъекта.ОписаниеДополнительныхДанных;
	
	Возврат Результат;
	
КонецФункции

// Загружает сообщение в информационную базу.
// 
// Параметры:
//  ДанныеОбъекта - СтрокаТаблицыЗначений из см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  ПроверенныеПодписи - Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  см. НовыйРезультатЗагрузкиСообщения
//
Функция ЗагрузитьСообщениеДокумента(ДанныеОбъекта, ПроверенныеПодписи, КонтекстДиагностики)
	
	Результат = НовыйРезультатЗагрузкиСообщения();
	
	ПараметрыЗагрузки = ПараметрыЗагрузкиСообщения(ДанныеОбъекта, ПроверенныеПодписи, КонтекстДиагностики);
	
	Если ДанныеОбъекта.Отказ
		Или ДанныеОбъекта.ЭтоПовторноЗагружаемоеСообщение Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеСообщения = ПараметрыЗагрузки.ОписаниеСообщения;
	ПараметрыДокумента = ПараметрыЗагрузки.ПараметрыДокумента;
	
	Если ПараметрыЗагрузки.ЭтоНовыйДокумент Тогда
		ПроверитьДанныеДокументаПередЗагрузкой(ПараметрыДокумента, ОписаниеСообщения);
		
		ДокументОбъект = СоздатьВходящийДокумент(ПараметрыДокумента, ОписаниеСообщения,
			ПараметрыЗагрузки.ИдентификаторыОснований);
		ПараметрыДокумента.Ссылка = ДокументОбъект.Ссылка;
		ПараметрыДокумента.Дата = ДокументОбъект.Дата;
		ДатаИзмененияСостояния = ДокументОбъект.Дата;
	Иначе
		ДатаИзмененияСостояния = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СообщениеОбъект = СоздатьСообщение(ОписаниеСообщения, ПараметрыДокумента.Ссылка, ПараметрыДокумента);
	
	ДобавитьПодписиПриЗагрузкеСообщения(СообщениеОбъект, ПараметрыЗагрузки, ДанныеОбъекта);
	
	ПодписиПоДаннымОбъекта = ПроверенныеПодписи[ДанныеОбъекта.ИдентификаторСтроки];
	
	ДобавитьМашиночитаемыеДоверенности(СообщениеОбъект.ОсновнойФайл,
		ДанныеОбъекта.Содержание, ДанныеОбъекта.НомераМЧД, ДанныеОбъекта.Доверенности, ПодписиПоДаннымОбъекта);
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	ЕстьАктивноеАннулирование = РегламентыЭДО.ЕстьАктивноеАннулирование(ПараметрыЗагрузки.СостоянияСообщений);
	УстановитьСостояниеХранение = ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА
		ИЛИ (ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ
			И Не ЕстьАктивноеАннулирование)
		ИЛИ (МодульОбменСГИСЭПД <> Неопределено
			И МодульОбменСГИСЭПД.ЭтоПрерывающееУОУ(ОписаниеСообщения.ТипЭлементаРегламента));
	
	Если УстановитьСостояниеХранение Тогда
		УстановитьСостояниеХранение(ПараметрыЗагрузки.СостоянияСообщений, СообщениеОбъект.ДатаИзмененияСтатуса);
	ИначеЕсли (МодульОбменСГИСЭПД <> Неопределено 
		И МодульОбменСГИСЭПД.ЭтоНеПрерывающееУОУ(ОписаниеСообщения.ТипЭлементаРегламента)) Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			МодульОбменСГИСЭПД.ОтметитьИсправлениеДокумента(ПараметрыДокумента.Ссылка, Ложь);
			ПараметрыДокумента.Исправлен = Ложь;			
	ИначеЕсли ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ Тогда
		ПересчитатьСостоянияСообщений(ПараметрыЗагрузки.СостоянияСообщений, ПараметрыДокумента);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗагрузки.СостоянияСообщений.Добавить(), СообщениеОбъект);
	
	Если ЗначениеЗаполнено(ПараметрыЗагрузки.ТипИзвещения) Тогда
		ИзвещениеОбъект = СоздатьИзвещениеОПолучении(СообщениеОбъект, ПараметрыЗагрузки, КонтекстДиагностики,
			ДанныеОбъекта.КомментарийСообщения);
		Если ИзвещениеОбъект <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыЗагрузки.СостоянияСообщений.Добавить(), ИзвещениеОбъект);
			Результат.ИзвещениеОПолучении = ИзвещениеОбъект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗагрузки.ЭтоНовыйДокумент Тогда
		
		Если ЗначениеЗаполнено(ДокументОбъект.ИдентификаторыОснований)
			И ЗначениеЗаполнено(ОписаниеСообщения.Данные.Содержание) Тогда
			ОбновитьСвязанныеДокументы(ОписаниеСообщения.Данные.Содержание.ТипДокумента,
				ДокументОбъект.ИдентификаторыОснований.Выгрузить(), ПараметрыЗагрузки.Действие,
				КонтекстДиагностики, ПараметрыЗагрузки.ЭтоВходящийЭДО);
		КонецЕсли;
		
		ДополненияСостоянийЭДО = Неопределено;
		Если СообщениеОбъект.Состояние = Перечисления.СостоянияСообщенийЭДО.Подписание Тогда
			ПараметрыМаршрута = СформироватьМаршрутПодписания(СообщениеОбъект);
			ДополненияСостоянийЭДО = ДополненияСостоянийЭДОПриПодписании(СообщениеОбъект,
				ПараметрыДокумента.ВидПодписи, ПараметрыМаршрута.ВесМаршрута);
			ПараметрыОповещенияПодписантов = Новый Структура("СообщениеОбъект, ТаблицаПодписания",
				СообщениеОбъект, ПараметрыМаршрута.ТаблицаПодписания);
			ПараметрыЗагрузки.ОповещенияПодписантов.Добавить(ПараметрыОповещенияПодписантов);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеОбъекта.ПредыдущийДокумент) Тогда
			РезультатИсправления = ИсправитьПредыдущуюВерсиюДокумента(ДанныеОбъекта.ПредыдущийДокумент,
				ПараметрыДокумента, КонтекстДиагностики);
			Если РезультатИсправления Тогда 
				Результат.ИсправленнаяВерсияДокумента = ДанныеОбъекта.ПредыдущийДокумент;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыДокумента.ТипРегламента = Перечисления.ТипыРегламентовЭДО.АктОРасхождениях Тогда
			Отбор = ЭлектронныеДокументыЭДО.НовыйОтборСообщенийДокументов();
			Отбор.ТипыЭлементовРегламента.Добавить(
				Перечисления.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки);
				
			СообщенияДокумента = ЭлектронныеДокументыЭДО.СообщенияДокументовПоОтбору(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыДокумента.Ссылка), Отбор);
				
			Если ЗначениеЗаполнено(СообщенияДокумента) Тогда
				ЗаполнитьЗначенияСвойств(ПараметрыЗагрузки.СостоянияСообщений.Добавить(), СообщенияДокумента[0]);
			КонецЕсли;
		КонецЕсли;
		
		СостояниеДокумента = ОбновитьСостояниеДокумента(ПараметрыДокумента, ПараметрыЗагрузки.СостоянияСообщений,
			ДополненияСостоянийЭДО, ДатаИзмененияСостояния, КонтекстДиагностики);
		
		ЭлектронныеДокументыЭДОСобытия.ПриЗагрузкеНовогоЭлектронногоДокумента(ПараметрыДокумента.Ссылка, 
			ПараметрыДокумента.ВидДокумента, СостояниеДокумента, Результат.ИсправленнаяВерсияДокумента,
			КонтекстДиагностики);
		
	Иначе
		Комментарий = "";
		Если СообщениеОбъект.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ Тогда
			Комментарий = ДанныеОбъекта.КомментарийСообщения;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Комментарий) И ЗначениеЗаполнено(ПараметрыЗагрузки.КомментарийСостояния) Тогда
			Комментарий = ПараметрыЗагрузки.КомментарийСостояния;
		КонецЕсли;
		СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента,
			ПараметрыЗагрузки.СостоянияСообщений, ДатаИзмененияСостояния, КонтекстДиагностики,, Комментарий);
	КонецЕсли;
	
	РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(ПараметрыЗагрузки.Действие,
		ПараметрыДокумента, СостояниеДокумента, СообщениеОбъект.ДатаИзмененияСтатуса,
		СообщениеОбъект, ДанныеОбъекта.КомментарийСообщения);
	
	ДанныеОбъекта.Объект = СообщениеОбъект.Ссылка;
	
	Результат.ЭтоНовыйДокумент = ПараметрыЗагрузки.ЭтоНовыйДокумент;
	Результат.СостояниеДокумента = СостояниеДокумента;
	Результат.ПараметрыДокумента = ПараметрыДокумента;
	Результат.СообщениеОбъект = СообщениеОбъект;
	Результат.СообщенияПоДокументу = ПараметрыЗагрузки.СостоянияСообщений;
	Результат.ОписаниеДанных = ДанныеОбъекта.ОписаниеДанных;
	Результат.ОписаниеДополнительныхДанных = ДанныеОбъекта.ОписаниеДополнительныхДанных;
	
	Если ЗначениеЗаполнено(ОписаниеСообщения.Данные.Содержание) Тогда
		Результат.Формат = ОписаниеСообщения.Данные.Содержание.Формат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Структура - Новые параметры документа для загрузки:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Дата - Дата
//  * ИдентификаторДокументооборота - Строка
//  * ИдентификаторДокумента - Строка
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторКонтрагента - Строка
//  * ИдентификаторСвязи - Строка
//  * Организация - Неопределено,ОпределяемыйТип.Организация
//  * Контрагент - Неопределено,ОпределяемыйТип.УчастникЭДО
//  * ДоговорКонтрагента - Неопределено,ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
//  * ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//  * ОбменБезПодписи - Булево
//  * ТребуетсяИзвещение - Булево
//  * ТребуетсяПодтверждение - Булево
//  * Исправлен - Булево
//  * НаОзнакомлении - Булево
//  * Остановлен - Булево
//  * ПричинаОстановки - ПеречислениеСсылка.ПричиныОстановкиЭДО
//  * ВидПодписи - ПеречислениеСсылка.ВидыЭлектронныхПодписей
//  * Ответственный - Неопределено,ОпределяемыйТип.Пользователь
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * СвойстваДокументовПоФорматам - см. ФорматыЭДО.НовоеОписаниеСвойствДокументовПоФорматам.
//
Функция НовыеПараметрыДокументаДляЗагрузки()
	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка());
	Параметры.Вставить("Дата", '00010101');
	Параметры.Вставить("ИдентификаторДокументооборота", "");
	Параметры.Вставить("ИдентификаторДокумента", "");
	Параметры.Вставить("ИдентификаторОрганизации", "");
	Параметры.Вставить("ИдентификаторКонтрагента", "");
	Параметры.Вставить("ИдентификаторСвязи", "");
	Параметры.Вставить("Организация", Неопределено);
	Параметры.Вставить("Контрагент", Неопределено);
	Параметры.Вставить("ДоговорКонтрагента", Неопределено);
	Параметры.Вставить("СпособОбмена", Перечисления.СпособыОбменаЭД.ПустаяСсылка());
	Параметры.Вставить("ТипРегламента", Перечисления.ТипыРегламентовЭДО.ПустаяСсылка());
	Параметры.Вставить("ОбменБезПодписи", Ложь);
	Параметры.Вставить("ТребуетсяИзвещение", Ложь);
	Параметры.Вставить("ТребуетсяПодтверждение", Ложь);
	Параметры.Вставить("Исправлен", Ложь);
	Параметры.Вставить("НаОзнакомлении", Ложь);
	Параметры.Вставить("Остановлен", Ложь);
	Параметры.Вставить("ПричинаОстановки", Перечисления.ПричиныОстановкиЭДО.ПустаяСсылка());
	Параметры.Вставить("ВидПодписи", Перечисления.ВидыЭлектронныхПодписей.ПустаяСсылка());
	Параметры.Вставить("Ответственный", Неопределено);
	Параметры.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	Параметры.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	Параметры.Вставить("СвойстваДокументовПоФорматам",
		ФорматыЭДО.НовоеОписаниеСвойствДокументовПоФорматам());
	Возврат Параметры;
КонецФункции

// Создает типизированную таблицу значений по состояниям сообщений ЭДО
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица состояний сообщений из колонок:
// 	 * Ссылка - ДокументСсылка.СообщениеЭДО
// 	 * Дата - Дата
// 	 * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
// 	 * Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
// 	 * Статус - ПеречислениеСсылка.СтатусыСообщенийЭДО
// 	 * Направление - ПеречислениеСсылка.НаправленияЭДО
Функция НовыйСостоянияСообщений()
	
	ТаблицаЗначений = Новый ТаблицаЗначений();
	ТаблицаЗначений.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.СообщениеЭДО"));
	ТаблицаЗначений.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаЗначений.Колонки.Добавить("ТипЭлементаРегламента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО"));
	ТаблицаЗначений.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияДокументовЭДО"));
	ТаблицаЗначений.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыСообщенийЭДО"));
	ТаблицаЗначений.Колонки.Добавить("Направление", Новый ОписаниеТипов("ПеречислениеСсылка.НаправленияЭДО"));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Параметры:
//  ДанныеОбъекта - СтрокаТаблицыЗначений: см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  ПроверенныеПодписи - Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
// 	Структура:
// 	* Действие - ПеречислениеСсылка.ДействияПоЭДО
// 	* ОписаниеСообщения - см. НовоеОписаниеСообщения
// 	* ПодписиОсновныхДанных - Массив Из Структура см. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
// 	* ПодписиДополнительныхДанных - Массив Из Структура см. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
// 	* ЭтоНовыйДокумент - Булево
// 	* ЭтоВходящийЭДО - Булево
// 	* ПараметрыДокумента - см. НовыеПараметрыДокументаДляЗагрузки
// 	* СостоянияСообщений - См. НовыйСостоянияСообщений
// 	* ТипИзвещения - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
// 	* СостояниеДокумента - ПеречислениеСсылка.СостоянияДокументовЭДО
// 	* КомментарийСостояния - Строка
// 	* ОповещенияПодписантов - Массив Из Структура:
// 	  ** СообщениеОбъект - см. СоздатьСообщение
// 	  ** ТаблицаПодписания - см. МаршрутыПодписанияБЭД.СформироватьМаршрутПодписанияЭД
// 	* ИдентификаторыОснований - см. ИдентификаторыОснованийПоДаннымСообщения
// 	* ДанныеУчастниковЭДО - см. НовыеДанныеУчастниковЭДО 
//
Функция ПараметрыЗагрузкиСообщения(ДанныеОбъекта, ПроверенныеПодписи, КонтекстДиагностики)
	
	ОписаниеСообщения = НовоеОписаниеСообщения();
	ПараметрыДокумента = НовыеПараметрыДокументаДляЗагрузки();
	
	Результат = Новый Структура;
	Результат.Вставить("Действие", Перечисления.ДействияПоЭДО.Загрузить);
	Результат.Вставить("ОписаниеСообщения", ОписаниеСообщения);
	Результат.Вставить("ПодписиОсновныхДанных");
	Результат.Вставить("ПодписиДополнительныхДанных");
	Результат.Вставить("ЭтоНовыйДокумент", Ложь);
	Результат.Вставить("ЭтоВходящийЭДО", Ложь);
	Результат.Вставить("ПараметрыДокумента", ПараметрыДокумента);
	Результат.Вставить("СостоянияСообщений", НовыйСостоянияСообщений());
	Результат.Вставить("ТипИзвещения", Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка());
	Результат.Вставить("СостояниеДокумента", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("КомментарийСостояния", "");
	Результат.Вставить("ОповещенияПодписантов", Новый Массив);
	Результат.Вставить("ИдентификаторыОснований");
	Результат.Вставить("ДанныеУчастниковЭДО", НовыеДанныеУчастниковЭДО());
	
	Запрос = Новый Запрос;
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаПараметровОбновленияСостоянияПоИдентификатору());
	Запрос.УстановитьПараметр("ИдентификаторДокументооборота", ДанныеОбъекта.ИдентификаторДокументооборота);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ДанныеОбъекта.ИдентификаторПолучателя);
	
	ТекстыЗапроса.Добавить(ТекстЗапросаУчастниковЭДОПоИдентификаторам());
	
	ИдентификаторыОснований = ИдентификаторыОснованийПоДаннымСообщения(ДанныеОбъекта);
	Если ЗначениеЗаполнено(ИдентификаторыОснований) Тогда
		ТекстыЗапроса.Добавить(ТекстЗапросаСверткиИдентификаторовОснований());
		Запрос.УстановитьПараметр("ИдентификаторыОснований", ИдентификаторыОснований);
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Результат.ЭтоНовыйДокумент = РезультатыЗапроса[0].Пустой();
	
	Результат.СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
	ЭтоДубль = Результат.СостоянияСообщений.Найти(ДанныеОбъекта.ТипЭлементаРегламента,
		"ТипЭлементаРегламента") <> Неопределено;
	
	Если ЭтоДубль
		И (ДанныеОбъекта.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА
		ИЛИ ДанныеОбъекта.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ)
		И ЗначениеЗаполнено(ДанныеОбъекта.ОписаниеДанных.ИмяФайла) Тогда
		
		СообщенияДокумента = Результат.СостоянияСообщений.ВыгрузитьКолонку("Ссылка");
		ЕстьСообщенияПоИмениФайла = ЕстьСообщенияПоИмениФайла(СообщенияДокумента, ДанныеОбъекта.ОписаниеДанных.ИмяФайла);
		Если Не ЕстьСообщенияПоИмениФайла Тогда
			ЭтоДубль = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
		
	// Для ЭПД исправления титулов - не дубли
	Если ЭтоДубль И (МодульОбменСГИСЭПД <> Неопределено 
		И МодульОбменСГИСЭПД.ЭтоТипРегламентаЭПД(ДанныеОбъекта.ТипРегламента)) Тогда
		ЭтоДубль = Ложь;
	КонецЕсли;
	
	Если ЭтоДубль Тогда
		ДанныеОбъекта.ЭтоПовторноЗагружаемоеСообщение = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеСообщения.ТипЭлементаРегламента = ДанныеОбъекта.ТипЭлементаРегламента;
	ОписаниеСообщения.Направление = Перечисления.НаправленияЭДО.Входящий;
	ОписаниеСообщения.ВидСообщения = ДанныеОбъекта.ВидДокумента;
	ОписаниеСообщения.ДополнительнаяИнформация = ДанныеОбъекта.СопроводительнаяЗаписка;
	ОписаниеСообщения.Данные.Документ = ДанныеОбъекта.ОписаниеДанных;
	Если ЗначениеЗаполнено(ДанныеОбъекта.ОписаниеДополнительныхДанных) Тогда
		ОписаниеСообщения.Данные.ДополнительныйДокумент = ДанныеОбъекта.ОписаниеДополнительныхДанных;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторыОснований) Тогда
		Результат.ИдентификаторыОснований = РезультатыЗапроса[4].Выгрузить();
	КонецЕсли;
	
	ПодписиОбъекта = ПроверенныеПодписи[ДанныеОбъекта.ИдентификаторСтроки];
	Если ПодписиОбъекта <> Неопределено Тогда
		Результат.ПодписиОсновныхДанных = ПодписиОбъекта.ПодписиОсновныхДанных;
		Результат.ПодписиДополнительныхДанных = ПодписиОбъекта.ПодписиДополнительныхДанных;
	Иначе
		Результат.ПодписиОсновныхДанных = СвойстваПодписейДанныхДокумента(ДанныеОбъекта.ПодписиОсновныхДанных);
		Результат.ПодписиДополнительныхДанных = СвойстваПодписейДанныхДокумента(
			ДанныеОбъекта.ПодписиДополнительныхДанных);
	КонецЕсли;
	
	Если ДанныеОбъекта.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
		Или (МодульОбменСГИСЭПД <> Неопределено 
			И МодульОбменСГИСЭПД.ЭтоТитулОтправителя(ДанныеОбъекта.ТипЭлементаРегламента)) Тогда
		
		ОписаниеСообщения.Данные.Содержание = ДанныеОбъекта.Содержание;
		
		Если Не Результат.ЭтоНовыйДокумент Тогда
			Выборка = РезультатыЗапроса[0].Выбрать();
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(ПараметрыДокумента, Выборка);
		КонецЕсли;
		
		ПараметрыДокумента.ИдентификаторДокумента = ЭлектронныеДокументыЭДОКлиентСервер.НовыйИдентификаторДокумента();
		ПараметрыДокумента.ИдентификаторДокументооборота = ДанныеОбъекта.ИдентификаторДокументооборота;
		ПараметрыДокумента.ИдентификаторОрганизации = ДанныеОбъекта.ИдентификаторПолучателя;
		ПараметрыДокумента.ИдентификаторКонтрагента = ДанныеОбъекта.ИдентификаторОтправителя;
		ПараметрыДокумента.ИдентификаторСвязи = ДанныеОбъекта.ИдентификаторСообщения;
		ПараметрыДокумента.Организация = ДанныеОбъекта.Организация;
		ПараметрыДокумента.Контрагент = ДанныеОбъекта.Контрагент;
		ПараметрыДокумента.ДоговорКонтрагента = ДанныеОбъекта.ДоговорКонтрагента;
		ПараметрыДокумента.СпособОбмена = ДанныеОбъекта.СпособОбмена;
		ПараметрыДокумента.ВидДокумента = ДанныеОбъекта.ВидДокумента;
		ПараметрыДокумента.ТипДокумента = ДанныеОбъекта.ТипДокумента;
		ПараметрыДокумента.ТипРегламента = ДанныеОбъекта.ТипРегламента;
		ПараметрыДокумента.ОбменБезПодписи = Не ЗначениеЗаполнено(ДанныеОбъекта.ПодписиОсновныхДанных);
		ПараметрыДокумента.ТребуетсяИзвещение = ДанныеОбъекта.ТребуетсяИзвещение;
		СвойстваДокументовПоФорматам = Неопределено;
		Если ДанныеОбъекта.Содержание.Свойство("СвойстваДокументовПоФорматам", СвойстваДокументовПоФорматам) Тогда
			ПараметрыДокумента.СвойстваДокументовПоФорматам = СвойстваДокументовПоФорматам;
		КонецЕсли;
		
		Если ПараметрыДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура 
			ИЛИ ПараметрыДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура Тогда
			ПараметрыДокумента.ТребуетсяПодтверждение = Ложь;		
		ИначеЕсли ПараметрыДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.АктОРасхождениях
			И ПараметрыДокумента.ТипРегламента = Перечисления.ТипыРегламентовЭДО.АктОРасхождениях Тогда
			ПараметрыДокумента.ТребуетсяПодтверждение = ТребуетсяПодтверждениеДляАктОРасхождениях(
				ПараметрыДокумента, ДанныеОбъекта.ТребуетсяПодтверждение);			
		Иначе
			ПараметрыДокумента.ТребуетсяПодтверждение = ДанныеОбъекта.ТребуетсяПодтверждение;
		КонецЕсли;
		
		Если МодульОбменСГИСЭПД <> Неопределено 
			И МодульОбменСГИСЭПД.ЭтоТитулОтправителя(ДанныеОбъекта.ТипЭлементаРегламента) Тогда
			Выборка = РезультатыЗапроса[0].Выбрать();
			Выборка.Следующий();
			Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
				ЗаполнитьЗначенияСвойств(ПараметрыДокумента, Выборка);
			КонецЕсли;	
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
			МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
			Если МодульЭлектронноеАктированиеЕИС.ЭтоОбменЧерезСерверЕИС(ДанныеОбъекта.СпособОбмена) Тогда
				МодульЭлектронноеАктированиеЕИС.ПриЗаполненииПараметровДокументаИнформацииОтправителя(
					ПараметрыДокумента);
			КонецЕсли;
		КонецЕсли;
		
		Результат.ЭтоВходящийЭДО = Истина;
		
	Иначе
		
		Если Результат.ЭтоНовыйДокумент Тогда
			ДанныеОбъекта.Отказ = Истина;
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найден электронный документ по идентификатору %1'"),
				ДанныеОбъекта.ИдентификаторДокументооборота);
			СинхронизацияЭДО.ОбработатьОшибкуЗагрузкиОбъекта(ДанныеОбъекта, КонтекстДиагностики, ТекстОшибки);
			Возврат Результат;
		КонецЕсли;
		
		Выборка = РезультатыЗапроса[0].Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ПараметрыДокумента, Выборка);
		Результат.ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(Выборка.Ссылка);
		Результат.КомментарийСостояния = Выборка.КомментарийСостояния;

		Если ДанныеОбъекта.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя Тогда
			ОписаниеСообщения.ВидСообщения = Выборка.ВидДокумента;
		ИначеЕсли Не ЗначениеЗаполнено(ОписаниеСообщения.ВидСообщения) Тогда
			ПараметрыПоиска = ЭлектронныеДокументыЭДО.НовыеПараметрыПоискаВидаДокумента(ДанныеОбъекта.ТипДокумента);
			ОписаниеСообщения.ВидСообщения = ЭлектронныеДокументыЭДО.НайтиСоздатьВидДокумента(ПараметрыПоиска);
		КонецЕсли;
		
		РегламентыЭДО.СкорректироватьОписаниеСообщения(Выборка.ТипРегламента, ОписаниеСообщения);
		
		Если Выборка.ТипРегламента = Перечисления.ТипыРегламентовЭДО.АктОРасхождениях Тогда
			
			СообщениеОтправителя = ЭлектронныеДокументыЭДО.СообщениеОтправителя(Выборка.Ссылка);
			
			Если СообщениеОтправителя <> Неопределено Тогда
				
				ПараметрыСообщенияОтправителя = Неопределено;
				
				Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС")
					И Выборка.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСерверЕИС Тогда
					МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
					ПараметрыСообщенияОтправителя =
						МодульЭлектронноеАктированиеЕИС.РаспознатьСообщение(СообщениеОтправителя);
				Иначе
					ПараметрыСообщенияОтправителя = ЭлектронныеДокументыЭДО.РаспознатьСообщение(СообщениеОтправителя);
				КонецЕсли;
				
				Если ПараметрыСообщенияОтправителя <> Неопределено Тогда
					СвойстваДокументовПоФорматам = Неопределено;
					Если ПараметрыСообщенияОтправителя.Свойство(
						"СвойстваДокументовПоФорматам", СвойстваДокументовПоФорматам) Тогда
						ЗаполнитьЗначенияСвойств(
							ПараметрыДокумента.СвойстваДокументовПоФорматам, СвойстваДокументовПоФорматам);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.ТипИзвещения = РегламентыЭДО.ТипИзвещенияДляЭлементаРегламента(
		ОписаниеСообщения.ТипЭлементаРегламента, ПараметрыДокумента, Результат.ЭтоВходящийЭДО);
	
	ЗаполнитьЗначенияСвойств(Результат.ДанныеУчастниковЭДО, ПараметрыДокумента);
	Если СинхронизацияЭДОКлиентСервер.ЭтоОбменЧерезОператора(ПараметрыДокумента.СпособОбмена) Тогда
		ВыборкаУчастниковЭДО = РезультатыЗапроса[2].Выбрать();
		Если ВыборкаУчастниковЭДО.Следующий() Тогда
			Результат.ДанныеУчастниковЭДО.Организация = ВыборкаУчастниковЭДО.Организация;
			Результат.ДанныеУчастниковЭДО.Контрагент = ВыборкаУчастниковЭДО.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	Если МодульОбменСГИСЭПД <> Неопределено 
		И МодульОбменСГИСЭПД.ЭтоТипРегламентаЭПД(ДанныеОбъекта.ТипРегламента) Тогда
		МодульОбменСГИСЭПД.УточнитьПараметрыЗагрузкиСообщения(Результат, ДанныеОбъекта);	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  СообщениеОбъект - ДокументОбъект.СообщениеЭДО
//  ПараметрыЗагрузки - См. ПараметрыЗагрузкиСообщения
//  ДанныеОбъекта - См. СинхронизацияЭДО.НовыеДанныеОбъектов
Процедура ДобавитьПодписиПриЗагрузкеСообщения(СообщениеОбъект, ПараметрыЗагрузки, ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ПараметрыЗагрузки.ПодписиОсновныхДанных) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.Содержание)
		И ЗначениеЗаполнено(ДанныеОбъекта.Содержание.Отправитель) Тогда
		ИННДоверителя = ДанныеОбъекта.Содержание.Отправитель.ИНН;
	Иначе
		СведенияОДоверителе = ИнтеграцияЭДО.ДанныеЮрФизЛица(ПараметрыЗагрузки.ПараметрыДокумента.Контрагент);
		ИННДоверителя = СведенияОДоверителе.ИНН;
	КонецЕсли;
	
	Для Каждого СвойстваПодписи Из ПараметрыЗагрузки.ПодписиОсновныхДанных Цикл
		
		СвойстваПодписи.ПодписанныйОбъект = СообщениеОбъект.ОсновнойФайл;
		
		ЭлектроннаяПодпись.ДобавитьПодпись(СообщениеОбъект.ОсновнойФайл, СвойстваПодписи);
		
		Если ДанныеОбъекта.ДоверенностьВерна <> Неопределено Тогда
			МашиночитаемыеДоверенности.ЗаписатьРезультатПроверкиМЧД(
				СообщениеОбъект.ОсновнойФайл, СвойстваПодписи.Отпечаток,
				ДанныеОбъекта.Карточка.ДоверенностьВерна);
		КонецЕсли;
		
		Если ТребуетсяМашиночитаемаяДоверенностьПоДаннымДокумента(ИННДоверителя, СвойстваПодписи.Сертификат) Тогда
			ХешПодписи = КриптографияБЭД.ХешПодписи(СвойстваПодписи.Подпись);
			МашиночитаемыеДоверенности.ВключитьПроверкуПодписи(СообщениеОбъект.ОсновнойФайл, ХешПодписи);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  РезультатЗагрузкиСообщения - см. ЗагрузитьСообщениеПоДаннымОбъекта
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ПослеЗагрузкиСообщения(РезультатЗагрузкиСообщения, КонтекстДиагностики)
	
	СостояниеДокумента = РезультатЗагрузкиСообщения.СостояниеДокумента;
	ПараметрыДокумента = РезультатЗагрузкиСообщения.ПараметрыДокумента;
	
	Если СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением Тогда
		
		ЭлектронныеДокументыЭДОСобытия.ПослеЗавершенияОбменаЭлектроннымДокументом(
			ПараметрыДокумента.Ссылка, КонтекстДиагностики);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.Аннулирован Тогда
		
		ЭлектронныеДокументыЭДОСобытия.ПослеАннулированияЭлектронногоДокумента(
			ПараметрыДокумента.Ссылка, КонтекстДиагностики);
		
	КонецЕсли;
	
	Если РезультатЗагрузкиСообщения.СообщениеОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗагрузкиСообщения.ЭтоНовыйДокумент Тогда
		ЗагруженныйДокумент = ЭлектронныеДокументыЭДО.НовыеСведенияЗагруженногоДокумента();
		ЗаполнитьСведенияЗагруженногоДокумента(ЗагруженныйДокумент, РезультатЗагрузкиСообщения);
		ЭлектронныеДокументыЭДОСобытия.ПослеЗагрузкиНовогоЭлектронногоДокумента(ЗагруженныйДокумент, КонтекстДиагностики);
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");	
		Если МодульОбменСГИСЭПД.ЭтоДокументЭПД(ПараметрыДокумента.ТипДокумента) Тогда
			ЗагруженныйДокумент = ЭлектронныеДокументыЭДО.НовыеСведенияЗагруженногоДокумента();
			ЗаполнитьСведенияЗагруженногоДокумента(ЗагруженныйДокумент, РезультатЗагрузкиСообщения);
			ЭлектронныеДокументыЭДОСобытия.ПослеЗагрузкиНовогоЭлектронногоДокумента(ЗагруженныйДокумент, КонтекстДиагностики);
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	ТипДокумента = ПараметрыДокумента.ТипДокумента;
	ТипЭлементаРегламента = РезультатЗагрузкиСообщения.СообщениеОбъект.ТипЭлементаРегламента;
	
	Если (ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД
			ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура)
		И (ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДП
			ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДО
			ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИОП
			ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИОП_ПДП) Тогда
		
		ДокументыПодтверждения = Новый ТаблицаЗначений;
		ДокументыПодтверждения.Колонки.Добавить("ТипЭлементаРегламента",
			Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО"));
		ДокументыПодтверждения.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата", , ,
			Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		ДокументыПодтверждения.Колонки.Добавить("Текущий", Новый ОписаниеТипов("Булево"));
		
		Для Каждого СтрокаТаблицы Из РезультатЗагрузкиСообщения.СообщенияПоДокументу Цикл
			
			Если СтрокаТаблицы.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДП
				ИЛИ СтрокаТаблицы.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДО
				ИЛИ СтрокаТаблицы.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИОП
				ИЛИ СтрокаТаблицы.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИОП_ПДП Тогда
				
				НоваяСтрока = ДокументыПодтверждения.Добавить();
				НоваяСтрока.ТипЭлементаРегламента = СтрокаТаблицы.ТипЭлементаРегламента;
				НоваяСтрока.Дата = СтрокаТаблицы.Дата;
				НоваяСтрока.Текущий = ТипЭлементаРегламента = СтрокаТаблицы.ТипЭлементаРегламента;
			КонецЕсли;
			
		КонецЦикла;
		
		ЭлектронныеДокументыЭДОСобытия.ПослеЗагрузкиПодтвержденияПоСчетуФактуре(ПараметрыДокумента.Ссылка,
			ДокументыПодтверждения, КонтекстДиагностики);
			
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов
			И ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя Тогда
			
		ЭлектронныеДокументыЭДОСобытия.ПослеЗагрузкиИнформацииПолучателяПоАктуСверкиВзаиморасчетов(
			ПараметрыДокумента.Ссылка, РезультатЗагрузкиСообщения.ОписаниеДанных, КонтекстДиагностики);		
	
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктОРасхождениях
			И ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки Тогда
			
		ЭлектронныеДокументыЭДОСобытия.ПослеЗагрузкиДополнительныхСведенийПоАктуОРасхождениях(
			ПараметрыДокумента.Ссылка, РезультатЗагрузкиСообщения.ОписаниеДанных, КонтекстДиагностики);
			
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДанныеПодписей - Массив из см. СинхронизацияЭДО.НовыеДанныеОбъектов
//
// Возвращаемое значение:
//  См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
Функция СвойстваПодписейДанныхДокумента(ДанныеПодписей)
	
	Результат = Новый Массив;
	Если Не ЗначениеЗаполнено(ДанныеПодписей) Тогда 
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ДанныеПодписи Из ДанныеПодписей Цикл
		СвойстваПодписи = КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи();
		СвойстваПодписи.Подпись = ДанныеПодписи.ДвоичныеДанные;
		СвойстваПодписи.ИмяФайлаПодписи = ДанныеПодписи.ИмяФайла;
		Результат.Добавить(СвойстваПодписи);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ДанныеСообщения - СтрокаТаблицыЗначений: см. СинхронизацияЭДО.НовыеДанныеОбъектов
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ИдентификаторСвязи - Строка
//  * ИдентификаторДокументооборота - Строка
Функция ИдентификаторыОснованийПоДаннымСообщения(ДанныеСообщения)
	
	Если ДанныеСообщения.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
		ИЛИ Не ЗначениеЗаполнено(ДанныеСообщения.ИдентификаторыСообщенийОснований)
			И Не ЗначениеЗаполнено(ДанныеСообщения.ИдентификаторыДокументооборотовОснований) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеТиповСТрока100 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	ИдентификаторыОснований = Новый ТаблицаЗначений;
	ИдентификаторыОснований.Колонки.Добавить("ИдентификаторСвязи", ОписаниеТиповСТрока100);
	ИдентификаторыОснований.Колонки.Добавить("ИдентификаторДокументооборота", ОписаниеТиповСТрока100);
	
	Если ЗначениеЗаполнено(ДанныеСообщения.ИдентификаторыСообщенийОснований) Тогда
		Для Каждого ИдентификаторСообщения Из ДанныеСообщения.ИдентификаторыСообщенийОснований Цикл
			ИдентификаторыОснований.Добавить().ИдентификаторСвязи = ИдентификаторСообщения;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСообщения.ИдентификаторыДокументооборотовОснований) Тогда
		Для Каждого ИдентификаторДокументооборота Из ДанныеСообщения.ИдентификаторыДокументооборотовОснований Цикл
			ИдентификаторыОснований.Добавить().ИдентификаторДокументооборота = ИдентификаторДокументооборота;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИдентификаторыОснований;
	
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаСверткиИдентификаторовОснований()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ИдентификаторыОснований.ИдентификаторСвязи КАК ИдентификаторСвязи,
		|	ИдентификаторыОснований.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота
		|ПОМЕСТИТЬ ВТ_ИдентификаторыОснований
		|ИЗ
		|	&ИдентификаторыОснований КАК ИдентификаторыОснований
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ДокументЭДО.ИдентификаторСвязи, ВТ_ИдентификаторыОснований.ИдентификаторСвязи) КАК ИдентификаторСвязи,
		|	ЕСТЬNULL(ДокументЭДО.ИдентификаторДокументооборота, ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота) КАК
		|		ИдентификаторДокументооборота
		|ИЗ
		|	ВТ_ИдентификаторыОснований КАК ВТ_ИдентификаторыОснований
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
		|		ПО ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота = ДокументЭДО.ИдентификаторДокументооборота
		|		И ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота <> """"
		|ГДЕ
		|	ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота <> """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ДокументЭДО.ИдентификаторСвязи, ВТ_ИдентификаторыОснований.ИдентификаторСвязи) КАК ИдентификаторСвязи,
		|	ЕСТЬNULL(ДокументЭДО.ИдентификаторДокументооборота, ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота) КАК
		|		ИдентификаторДокументооборота
		|ИЗ
		|	ВТ_ИдентификаторыОснований КАК ВТ_ИдентификаторыОснований
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
		|		ПО ВТ_ИдентификаторыОснований.ИдентификаторСвязи = ДокументЭДО.ИдентификаторСвязи
		|		И ВТ_ИдентификаторыОснований.ИдентификаторСвязи <> """"
		|		И ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота = """"
		|ГДЕ
		|	ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота = """"
		|	И ВЫБОР
		|		КОГДА ДокументЭДО.ИдентификаторДокументооборота ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ
		|			НЕ ДокументЭДО.ИдентификаторДокументооборота В
		|				(ВЫБРАТЬ
		|					ИдентификаторДокументооборота
		|				ИЗ
		|					ВТ_ИдентификаторыОснований
		|				ГДЕ
		|					ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота <> """")
		|	КОНЕЦ";
		
	Возврат ТекстЗапроса;
		
КонецФункции

// Параметры:
//  ПараметрыФормирования - см. НовыеПараметрыДокументаДляЗагрузки
//  ОписаниеСообщения - см. НовоеОписаниеСообщения
//  ИдентификаторыОснований - Неопределено
//                          - см. ИдентификаторыОснованийПоДаннымСообщения
//
// Возвращаемое значение:
//  ДокументОбъект.ЭлектронныйДокументВходящийЭДО
Функция СоздатьВходящийДокумент(ПараметрыФормирования, ОписаниеСообщения, ИдентификаторыОснований = Неопределено)
	
	ДокументОбъект = Документы.ЭлектронныйДокументВходящийЭДО.СоздатьДокумент();
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	ДокументОбъект.ДатаПолучения = ДокументОбъект.Дата;
	ДокументОбъект.ИдентификаторДокументооборота = ПараметрыФормирования.ИдентификаторДокументооборота;
	ДокументОбъект.ИдентификаторОрганизации = ПараметрыФормирования.ИдентификаторОрганизации;
	ДокументОбъект.ИдентификаторКонтрагента = ПараметрыФормирования.ИдентификаторКонтрагента;
	ДокументОбъект.ИдентификаторСвязи = ПараметрыФормирования.ИдентификаторСвязи;
	ДокументОбъект.Организация = ПараметрыФормирования.Организация;
	ДокументОбъект.Контрагент = ПараметрыФормирования.Контрагент;
	ДокументОбъект.ДоговорКонтрагента = ПараметрыФормирования.ДоговорКонтрагента;
	ДокументОбъект.СпособОбмена = ПараметрыФормирования.СпособОбмена;
	ДокументОбъект.ТипРегламента = ПараметрыФормирования.ТипРегламента;
	ДокументОбъект.ОбменБезПодписи = ПараметрыФормирования.ОбменБезПодписи;
	ДокументОбъект.ТребуетсяИзвещение = ПараметрыФормирования.ТребуетсяИзвещение;
	ДокументОбъект.ТребуетсяПодтверждение = ПараметрыФормирования.ТребуетсяПодтверждение;
	ДокументОбъект.Ответственный = ИнтеграцияЭДО.ОтветственныйВходящегоДокументаЭДО(
		ДокументОбъект.Организация, ДокументОбъект.Контрагент, ДокументОбъект.ДоговорКонтрагента);
	ДокументОбъект.ИдентификаторДокумента = ПараметрыФормирования.ИдентификаторДокумента;
	
	ДокументОбъект.ВидДокумента = ОписаниеСообщения.ВидСообщения;
	Если ЗначениеЗаполнено(ОписаниеСообщения.Данные.Содержание) Тогда
		СодержаниеСообщения = ОписаниеСообщения.Данные.Содержание;
		ДокументОбъект.НомерДокумента = СодержаниеСообщения.НомерДокумента;
		ДокументОбъект.ДатаДокумента = СодержаниеСообщения.ДатаДокумента;
		ДокументОбъект.СуммаДокумента = СодержаниеСообщения.СуммаДокумента;
		ДокументОбъект.СодержитМаркируемыеТовары = СодержаниеСообщения.ЕстьМаркировка;
		ДокументОбъект.ФорматОсновногоТитула = СодержаниеСообщения.Формат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторыОснований) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ИдентификаторыОснований, ДокументОбъект.ИдентификаторыОснований);
	КонецЕсли;
	
	Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка заполнения входящего электронного документа'");
	КонецЕсли;
	
	ДокументОбъект.Записать();
	
	Возврат ДокументОбъект;
	
КонецФункции

// Параметры:
//  Сведения - см. НовыеСведенияЗагруженногоДокумента
//  РезультатЗагрузкиСообщения - см. НовыйРезультатЗагрузкиСообщения
Процедура ЗаполнитьСведенияЗагруженногоДокумента(Сведения, РезультатЗагрузкиСообщения)
	ПараметрыДокумента = РезультатЗагрузкиСообщения.ПараметрыДокумента;
	Сведения.ЭлектронныйДокумент = ПараметрыДокумента.Ссылка;
	Сведения.ИсправленнаяВерсияДокумента = РезультатЗагрузкиСообщения.ИсправленнаяВерсияДокумента;
	Сведения.ВидДокумента = ПараметрыДокумента.ВидДокумента;
	Сведения.ТипДокумента = ПараметрыДокумента.ТипДокумента;
	Сведения.Организация = ПараметрыДокумента.Организация;
	Сведения.Контрагент = ПараметрыДокумента.Контрагент;
	Сведения.ИдентификаторОтправителя = ПараметрыДокумента.ИдентификаторКонтрагента;
	Сведения.ИдентификаторПолучателя = ПараметрыДокумента.ИдентификаторОрганизации;
	Сведения.ОписаниеДанных = РезультатЗагрузкиСообщения.ОписаниеДанных;
	Сведения.ОписаниеДополнительныхДанных = РезультатЗагрузкиСообщения.ОписаниеДополнительныхДанных;
	Сведения.ДополнительныеПараметрыКарточки = РезультатЗагрузкиСообщения.ДополнительныеПараметрыКарточки;
	Сведения.Формат = РезультатЗагрузкиСообщения.Формат;
КонецПроцедуры

// Параметры:
//  Основание - ДокументОбъект.СообщениеЭДО
//  ПараметрыЗагрузки - см. ПараметрыЗагрузкиСообщения
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  КомментарийСостояния - Строка
// 
// Возвращаемое значение:
//  Неопределено,ДокументОбъект.СообщениеЭДО
Функция СоздатьИзвещениеОПолучении(Основание, ПараметрыЗагрузки, КонтекстДиагностики, КомментарийСостояния = "")
	
	СвойстваОсновногоФайла = СвойстваФайлаОснованияСлужебногоДокумента();
	СвойстваОсновногоФайла.Ссылка = Основание.ОсновнойФайл;
	СвойстваОсновногоФайла.ПолноеИмяФайла = ПараметрыЗагрузки.ОписаниеСообщения.Данные.Документ.ИмяФайла;
	СвойстваОсновногоФайла.ДатаСоздания = Основание.Дата;
	
	ИзвещениеОбъект = СоздатьСлужебноеСообщение(ПараметрыЗагрузки.ПараметрыДокумента, СвойстваОсновногоФайла,
		ПараметрыЗагрузки.ДанныеУчастниковЭДО, Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении,
		ПараметрыЗагрузки.ТипИзвещения);
	
	Если ИзвещениеОбъект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗагрузки.СостоянияСообщений.Добавить(), ИзвещениеОбъект);
	
	ДополненияСостоянийЭДО = Неопределено;
	Если Не ПараметрыЗагрузки.ПараметрыДокумента.ОбменБезПодписи Тогда
		
		ПараметрыМаршрута = СформироватьМаршрутПодписания(ИзвещениеОбъект);
		
		Если ЗначениеЗаполнено(ПараметрыМаршрута.ТаблицаПодписания) Тогда
			ПараметрыОповещенияПодписантов = Новый Структура("СообщениеОбъект, ТаблицаПодписания",
				ИзвещениеОбъект, ПараметрыМаршрута.ТаблицаПодписания);
			ПараметрыЗагрузки.ОповещенияПодписантов.Добавить(ПараметрыОповещенияПодписантов);
		КонецЕсли;
		
		ДополненияСостоянийЭДО = ДополненияСостоянийЭДОПриПодписании(ИзвещениеОбъект,
			ПараметрыЗагрузки.ПараметрыДокумента.ВидПодписи, ПараметрыМаршрута.ВесМаршрута);
		
	КонецЕсли;
	
	СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ПараметрыЗагрузки.ПараметрыДокумента,
		ПараметрыЗагрузки.СостоянияСообщений, ИзвещениеОбъект.ДатаИзмененияСтатуса, КонтекстДиагностики,
		ДополненияСостоянийЭДО, КомментарийСостояния);
	
	РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(ПараметрыЗагрузки.Действие,
		ПараметрыЗагрузки.ПараметрыДокумента, СостояниеДокумента,
		ИзвещениеОбъект.ДатаИзмененияСтатуса, ИзвещениеОбъект);
	
	Возврат ИзвещениеОбъект;
	
КонецФункции

// Параметры:
//  ДанныеСообщения - СтрокаТаблицыЗначений: см. СинхронизацияЭДО.НовыеДанныеОбъектов
Процедура ЗаблокироватьДанныеДокументаПриЗагрузке(ДанныеСообщения)
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЭлектронныйДокументВходящийЭДО");
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторДокументооборота",
		ДанныеСообщения.ИдентификаторДокументооборота);
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЭлектронныйДокументИсходящийЭДО");
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторДокументооборота",
		ДанныеСообщения.ИдентификаторДокументооборота);
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  ПараметрыНовогоДокумента - см. НовыеПараметрыДокументаДляЗагрузки
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  Булево
Функция ИсправитьПредыдущуюВерсиюДокумента(ЭлектронныйДокумент, ПараметрыНовогоДокумента, КонтекстДиагностики)
	
	ЭтоВходящийЭДО = Истина;
	
	ЗаблокироватьДанныеДокументаДляИзменения(ЭлектронныйДокумент, ЭтоВходящийЭДО);
	
	ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
	
	Если ДокументОбъект.ИдентификаторСвязи <> ПараметрыНовогоДокумента.ИдентификаторСвязи
		ИЛИ ДокументОбъект.ВидДокумента <> ПараметрыНовогоДокумента.ВидДокумента
		ИЛИ ДокументОбъект.Исправлен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДокументОбъект.Исправлен = Истина;
	ДокументОбъект.Записать();
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаПараметровСостоянияДокумента());
	ТекстыЗапроса.Добавить(ТекстЗапросаСостоянияСообщений());
	ТекстыЗапроса.Добавить(ТекстЗапросаСвойствСообщенияИнформацииОтправителя());
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	ТитулыОтправителя = Новый Массив;
	ТитулыОтправителя.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителя);	
	КонецЕсли;
	Запрос.УстановитьПараметр("ТитулыОтправителя", ТитулыОтправителя);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатыЗапроса[0].Пустой()
		ИЛИ РезультатыЗапроса[1].Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыСостояния = РезультатыЗапроса[0].Выбрать();
	ПараметрыСостояния.Следующий();
	
	СостоянияСообщений = РезультатыЗапроса[1].Выгрузить();
	
	СвойстваСообщения = РезультатыЗапроса[2].Выбрать();
	СвойстваСообщения.Следующий();
	
	Действие = Перечисления.ДействияПоЭДО.Загрузить;
	ДатаИзменения = ТекущаяДатаСеанса();
	
	СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ДокументОбъект, СостоянияСообщений,
		ДатаИзменения, КонтекстДиагностики);
	
	РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Действие, ДокументОбъект, СостояниеДокумента, ДатаИзменения,
		СвойстваСообщения, ПараметрыСостояния.Комментарий);
	
	Возврат Истина;
	
КонецФункции

// Параметры:
//  СообщениеОбъект - ДокументОбъект.СообщениеЭДО
//  ТекущаяДатаСеанса - Дата
Процедура УстановитьКлючевыеДатыПриЗагрузкеОтветнойПодписи(СообщениеОбъект, ТекущаяДатаСеанса)
	
	ЭлектронныйДокумент = СообщениеОбъект.ЭлектронныйДокумент;
	ТипЭлементаРегламента = СообщениеОбъект.ТипЭлементаРегламента;
	
	ЭтоИсходящееПредложениеОбАннулировании =
		ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА
		И СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Исходящий;
	
	Если ЭтоИсходящееПредложениеОбАннулировании Тогда
		УстановитьДатуАннулирования(ЭлектронныйДокумент, ТекущаяДатаСеанса);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ПараметрыЗагрузки - см. НовыеПараметрыДокументаДляЗагрузки
//  ОписаниеСообщения - см. НовоеОписаниеСообщения
Процедура ПроверитьДанныеДокументаПередЗагрузкой(ПараметрыЗагрузки, ОписаниеСообщения)
	
	Если Не ЗначениеЗаполнено(ПараметрыЗагрузки.Контрагент) Тогда
		
		СтрокиОшибки = Новый Массив;
		
		СтрокиОшибки.Добавить(НСтр("ru = 'Не удалось определить контрагента документа.'"));
		
		СодержаниеДокумента = ОписаниеСообщения.Данные.Содержание;
		
		Если ТипЗнч(СодержаниеДокумента) = Тип("Структура") Тогда
			
			ИНН = Неопределено;
			КПП = Неопределено;
			
			Если СодержаниеДокумента.Свойство("Отправитель")
				И ТипЗнч(СодержаниеДокумента.Отправитель) = Тип("Структура")
				И ЗначениеЗаполнено(СодержаниеДокумента.Отправитель.ИНН) Тогда
				
				ИНН = СодержаниеДокумента.Отправитель.ИНН;
			КонецЕсли;
			
			Если СодержаниеДокумента.Свойство("Отправитель")
				И ТипЗнч(СодержаниеДокумента.Отправитель) = Тип("Структура")
				И ЗначениеЗаполнено(СодержаниеДокумента.Отправитель.КПП) Тогда
				
				КПП = СодержаниеДокумента.Отправитель.КПП;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИНН) И ЗначениеЗаполнено(КПП) Тогда
				СтрокиОшибки.Добавить(СтрШаблон(
					НСтр("ru = 'Проверьте существование контрагента с ИНН %1 и КПП %2'"),
					ИНН, КПП));
			ИначеЕсли ЗначениеЗаполнено(ИНН) Тогда
				СтрокиОшибки.Добавить(СтрШаблон(
					НСтр("ru = 'Проверьте существование контрагента с ИНН %1'"),
					ИНН));
			КонецЕсли;
			
		КонецЕсли;
		
		ВызватьИсключение СтрСоединить(СтрокиОшибки, Символы.ПС);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ОсновнойФайлСообщения - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  СодержаниеФайла - См. ФорматыЭДО.ПрочитатьСодержаниеДокумента
//  НомераМЧД - См. ФорматыЭДО.НомераМашиночитаемыхДоверенностей
//  Доверенности - см. ТранспортныеКонтейнерыЭДО.ПрочитатьКарточкуМЧД
//  Подписи - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//
Процедура ДобавитьМашиночитаемыеДоверенности(ОсновнойФайлСообщения, СодержаниеФайла, НомераМЧД, Доверенности, Подписи)
	
	МашиночитаемыеДоверенности.ДобавитьДоверенностиСообщений(ОсновнойФайлСообщения, Доверенности);
	
	Если Не ЗначениеЗаполнено(СодержаниеФайла)
		И (НЕ ЗначениеЗаполнено(Доверенности)
		ИЛИ Не ЗначениеЗаполнено(НомераМЧД)) Тогда
		Возврат;
	КонецЕсли;
	
	ИННДоверителя = СодержаниеФайла.Отправитель.ИНН;
	
	ИННПредставителей = Новый Массив;
	Для Каждого ПодписьОсновныхДанных Из Подписи.ПодписиОсновныхДанных Цикл
		Если ПодписьОсновныхДанных.Сертификат = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СертификатКриптографии = Новый СертификатКриптографии(ПодписьОсновныхДанных.Сертификат);
		ИННПредставителяИзПодписи = КриптографияБЭД.ИННСубъектаСертификата(СертификатКриптографии);
		ИННПредставителей.Добавить(ИННПредставителяИзПодписи);
	КонецЦикла;
	
	Для Каждого НомерМЧД Из НомераМЧД Цикл
		
		СведенияПолучены = Ложь;
		Для Каждого ИННПредставителя Из ИННПредставителей Цикл
			
			СведенияДоверенности = МашиночитаемыеДоверенностиВызовСервера.ПолучитьСведенияДоверенностиНаСервереМЧД(
				НомерМЧД, ИННДоверителя, ИННПредставителя);
			
			СведенияПолучены = Не ЗначениеЗаполнено(СведенияДоверенности.ТекстОшибки);	
			Если СведенияПолучены Тогда
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		Если Не СведенияПолучены Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДляЗагрузки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД();
		ДанныеДляЗагрузки.ДанныеДоверенности = СведенияДоверенности.ПолныеДанные.ДанныеВыгрузки;
		ДанныеДляЗагрузки.ДанныеПодписи = СведенияДоверенности.ПолныеДанные.ДанныеПодписи;
		ДанныеДляЗагрузки.ДанныеПодписиЗаявленияНаОтмену = СведенияДоверенности.ПолныеДанные.ДанныеПодписиЗаявленияНаОтмену;
		
		ДатаЗагрузки = СведенияДоверенности.ДатаЗагрузкиИзРеестра;
		СтатусВРеестреФНС = МашиночитаемыеДоверенностиКлиентСервер.СтатусВРеестреФНС(
			СведенияДоверенности.ЧастичныеДанные.СтатусДоверенности);
		
		ДополнительныеСведения = МашиночитаемыеДоверенностиКлиентСервер.ДополнительныеСведенияПоЗагрузкеМЧД();
		ДополнительныеСведения.СтатусВРеестреФНС = СтатусВРеестреФНС;
		ДополнительныеСведения.ДатаЗагрузки = ДатаЗагрузки;
		
		МашиночитаемыеДоверенности.ЗагрузитьМЧДИзФайла(ДанныеДляЗагрузки,,, ДополнительныеСведения);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  СообщенияДокумента - Массив из ДокументСсылка.СообщениеЭДО
//  ИмяФайла - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьСообщенияПоИмениФайла(СообщенияДокумента, ИмяФайла)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Выбран
		|ИЗ
		|	Справочник.СообщениеЭДОПрисоединенныеФайлы КАК СообщениеЭДОПрисоединенныеФайлы
		|ГДЕ
		|	СообщениеЭДОПрисоединенныеФайлы.ВладелецФайла В (&ВладельцыФайлов)
		|	И СообщениеЭДОПрисоединенныеФайлы.ПолноеИмяФайла ПОДОБНО &ПолноеИмяФайла";
	
	Запрос.УстановитьПараметр("ВладельцыФайлов", СообщенияДокумента);
	Запрос.УстановитьПараметр("ПолноеИмяФайла", ИмяФайла);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает признак необходимости формирования подтверждения для актов о расхождениях.
//
// Параметры:
//  ПараметрыДокумента - см. НовыеПараметрыДокументаДляЗагрузки
//  ЗначениеПоУмолчанию - Булево - значение признака по умолчанию
// Возвращаемое значение:
// 	Булево
//
Функция ТребуетсяПодтверждениеДляАктОРасхождениях(ПараметрыДокумента, ЗначениеПоУмолчанию)
	
	ТребуетсяПодтверждение = ЗначениеПоУмолчанию;
	СвойстваДокументовПоФорматам = ПараметрыДокумента.СвойстваДокументовПоФорматам.АктОРасхождениях;
	
	Если СвойстваДокументовПоФорматам.ФормируютсяИтогиПриемки Тогда
		
		ВариантыФормирования = ФорматыЭДО.ВариантыФормированияИтоговПриемки();
			
		ВариантыФормированияПродавца = Новый Массив;
		ВариантыФормированияПродавца.Добавить(
			ВариантыФормирования.ПродавцомФормируютсяДопСведенияОСогласииНесогласииСРезультатамиПриемки);
		ВариантыФормированияПродавца.Добавить(
			ВариантыФормирования.ПродавцомФормируютсяДопСведенияИные);
		
		НайденныйВариантФормирования = ВариантыФормированияПродавца.Найти(
			СвойстваДокументовПоФорматам.ВариантФормированияИтоговПриемки);
		ТребуетсяПодтверждение = (НайденныйВариантФормирования <> Неопределено);
			
	КонецЕсли;
	
	Возврат ТребуетсяПодтверждение;
	
КонецФункции

// Возвращает обработанный результат загрузки.
// 
// Параметры:
//  РезультатЗагрузкиВФоне - См. НовыйРезультатЗагрузкиДокументов
// 
// Возвращаемое значение:
//  Структура:
//  * КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  * ПодписиДляПроверки - Массив из См. НовыеДанныеДляПроверкиПодписейНаКлиенте
//  * РезультатДействийПоЭДО - См. НовыйРезультатДействийПоЭДО
//  * АдресКонтекстаНаСервере - Строка
//
Функция ОбработатьРезультатЗагрузкиВФоне(РезультатЗагрузкиВФоне) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КонтекстДиагностики", РезультатЗагрузкиВФоне.КонтекстДиагностики);
	Результат.Вставить("ПодписиДляПроверки", Новый Массив);
	Результат.Вставить("РезультатДействийПоЭДО", Новый Структура);
	Результат.Вставить("АдресКонтекстаНаСервере", "");
	
	Если ЗначениеЗаполнено(РезультатЗагрузкиВФоне.РезультатДействийПоЭДО) Тогда
		Результат.РезультатДействийПоЭДО = РезультатВыполненияДействийЭДОДляКлиента(
			РезультатЗагрузкиВФоне.РезультатДействийПоЭДО);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатЗагрузкиВФоне.КонтекстПроверкиПодписей) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.АдресКонтекстаНаСервере = ПоместитьВоВременноеХранилище(
		РезультатЗагрузкиВФоне.КонтекстПроверкиПодписей, Новый УникальныйИдентификатор);
	
	ПодписиДляПроверки = Новый Массив;
	
	Для Каждого ДанныеДокумента Из РезультатЗагрузкиВФоне.КонтекстПроверкиПодписей.ДанныеДокументов Цикл
		
		Если ЕстьОсновныеДанныеДляПроверкиПодписи(ДанныеДокумента) Тогда
			
			Для Каждого ОписаниеДанныхПодписи Из ДанныеДокумента.ПодписиОсновныхДанных Цикл
				ПараметрыПроверки = НовыеДанныеДляПроверкиПодписейНаКлиенте();
				ПараметрыПроверки.ИдентификаторДанныхДокумента = ДанныеДокумента.ИдентификаторСтроки;
				ПараметрыПроверки.ДвоичныеДанныеФайла = ДанныеДокумента.ОписаниеДанных.ДвоичныеДанные;
				ПараметрыПроверки.ДвоичныеДанныеПодписи = ОписаниеДанныхПодписи.ДвоичныеДанные;
				ПараметрыПроверки.ЭтоОсновныеДанные = Истина;
				ПодписиДляПроверки.Добавить(ПараметрыПроверки);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЕстьДополнительныеДанныеДляПроверкиПодписи(ДанныеДокумента) Тогда
			
			Для Каждого ОписаниеДанныхПодписи Из ДанныеДокумента.ПодписиДополнительныхДанных Цикл
				ПараметрыПроверки = НовыеДанныеДляПроверкиПодписейНаКлиенте();
				ПараметрыПроверки.ИдентификаторДанныхДокумента = ДанныеДокумента.ИдентификаторСтроки;
				ПараметрыПроверки.ДвоичныеДанныеФайла = ДанныеДокумента.ОписаниеДополнительныхДанных.ДвоичныеДанные;
				ПараметрыПроверки.ДвоичныеДанныеПодписи = ОписаниеДанныхПодписи.ДвоичныеДанные;
				ПараметрыПроверки.ЭтоОсновныеДанные = Ложь;
				ПодписиДляПроверки.Добавить(ПараметрыПроверки);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.ПодписиДляПроверки = ПодписиДляПроверки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗагрузитьПриглашения

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ВыполнитьДействиеЗагрузитьПриглашения(ПараметрыВыполнения, РезультатДействий)
	
	ОтпечаткиСертификатов = ПараметрыВыполнения.ОтпечаткиСертификатов;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	
	КлючиСинхронизации = СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации();
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.РасшифрованныеМаркеры) Тогда
		
		КлючиСинхронизации = СинхронизацияЭДО.КлючиСинхронизацииИзРасшифрованныхМаркеров(ПараметрыВыполнения.РасшифрованныеМаркеры);
		
	ИначеЕсли ПараметрыВыполнения.РасшифрованныеМаркеры = Неопределено Тогда
		
		ДанныеДляСинхронизации = СинхронизацияЭДО.ДанныеДляСинхронизации(ОтпечаткиСертификатов,
			КонтекстДиагностики, ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций,
			ПараметрыВыполнения.ВыбранныеСертификаты);
		
		КлючиСинхронизации = ДанныеДляСинхронизации.КлючиСинхронизации;
		
		РезультатДействий.ПаролиСертификатов = ПаролиСертификатов(
			ДанныеДляСинхронизации.ДанныеСертификатов);
		
		РезультатДействий.РасшифрованныеМаркеры = СинхронизацияЭДО.РасшифрованныеМаркерыИзКлючейСинхронизации(
			КлючиСинхронизации);
		
		РезультатДействий.ЗашифрованныеМаркеры = СинхронизацияЭДО.ЗашифрованныеМаркерыИзКлючейСинхронизации(
			КлючиСинхронизации);
		
		Если ЗначениеЗаполнено(РезультатДействий.ЗашифрованныеМаркеры) Тогда
			Возврат;
		ИначеЕсли ЗначениеЗаполнено(РезультатДействий.РасшифрованныеМаркеры) Тогда
			ПараметрыВыполнения.РасшифрованныеМаркеры = РезультатДействий.РасшифрованныеМаркеры;
		КонецЕсли;
		
	КонецЕсли;
	
	ПриглашенийПолучено = 0;
	
	Если ЗначениеЗаполнено(КлючиСинхронизации) Тогда
		ПриглашенийПолучено = ПриглашенияЭДО.ПолучитьПриглашения(КлючиСинхронизации, КонтекстДиагностики);
	КонецЕсли;
	
	ДействиеЗагрузитьПриглашения = Перечисления.ДействияПоЭДО.ЗагрузитьПриглашения;
	ОбработаноПоДействию = РезультатДействий.Итог.ОбработаноПоДействиям[ДействиеЗагрузитьПриглашения];
	Если ЗначениеЗаполнено(ОбработаноПоДействию) Тогда
		ОбработаноПоДействию = ОбработаноПоДействию + ПриглашенийПолучено;
	Иначе
		ОбработаноПоДействию = ПриглашенийПолучено;
	КонецЕсли;
	
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(ДействиеЗагрузитьПриглашения, ОбработаноПоДействию);
	
КонецПроцедуры

#КонецОбласти

#Область ПринятьПриглашения

// Параметры:
//  ПараметрыВыполнения - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  РезультатДействий - см. НовыйРезультатДействийПоЭДО
Процедура ВыполнитьДействиеПринятьПриглашения(ПараметрыВыполнения, РезультатДействий)
	
	ОтпечаткиСертификатов = ПараметрыВыполнения.ОтпечаткиСертификатов;
	КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	
	КлючиСинхронизации = СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации();
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.РасшифрованныеМаркеры) Тогда
		
		КлючиСинхронизации = СинхронизацияЭДО.КлючиСинхронизацииИзРасшифрованныхМаркеров(ПараметрыВыполнения.РасшифрованныеМаркеры);
		
	ИначеЕсли ПараметрыВыполнения.РасшифрованныеМаркеры = Неопределено Тогда
		
		ДанныеДляСинхронизации = СинхронизацияЭДО.ДанныеДляСинхронизации(ОтпечаткиСертификатов,
			КонтекстДиагностики, ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций,
			ПараметрыВыполнения.ВыбранныеСертификаты);
		
		КлючиСинхронизации = ДанныеДляСинхронизации.КлючиСинхронизации;
		
		РезультатДействий.ПаролиСертификатов = ПаролиСертификатов(
			ДанныеДляСинхронизации.ДанныеСертификатов);
		
		РезультатДействий.РасшифрованныеМаркеры = СинхронизацияЭДО.РасшифрованныеМаркерыИзКлючейСинхронизации(
			КлючиСинхронизации);
		
		РезультатДействий.ЗашифрованныеМаркеры = СинхронизацияЭДО.ЗашифрованныеМаркерыИзКлючейСинхронизации(
			КлючиСинхронизации);
		
		Если ЗначениеЗаполнено(РезультатДействий.ЗашифрованныеМаркеры) Тогда
			Возврат;
		ИначеЕсли ЗначениеЗаполнено(РезультатДействий.РасшифрованныеМаркеры) Тогда
			ПараметрыВыполнения.РасшифрованныеМаркеры = РезультатДействий.РасшифрованныеМаркеры;
		КонецЕсли;
		
	КонецЕсли;
	
	ПриглашенийПринято = 0;
	
	Если ЗначениеЗаполнено(КлючиСинхронизации) Тогда
		РезультатПринятия = ПриглашенияЭДОСлужебный.ПринятьПриглашенияПоУчетнымЗаписям(КлючиСинхронизации,
			КонтекстДиагностики);
			
		ПриглашенийПринято = РезультатПринятия.Обработано;
	КонецЕсли;
	
	ДействиеПринятьПриглашения = Перечисления.ДействияПоЭДО.ПринятьПриглашения;
	ОбработаноПоДействию = РезультатДействий.Итог.ОбработаноПоДействиям[ДействиеПринятьПриглашения];
	Если ЗначениеЗаполнено(ОбработаноПоДействию) Тогда
		ОбработаноПоДействию = ОбработаноПоДействию + ПриглашенийПринято;
	Иначе
		ОбработаноПоДействию = ПриглашенийПринято;
	КонецЕсли;
	
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(ДействиеПринятьПриглашения, ОбработаноПоДействию);
	
КонецПроцедуры

#КонецОбласти

#Область Ознакомление

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Процедура ОтправитьНаОзнакомление(ЭлектронныйДокумент)
	
	Если НастройкиЭДО.ОзнакомлениеСЭлектроннымиДокументами() Тогда
		ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		ДокументОбъект.НаОзнакомлении = Истина;
		ДокументОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Процедура ВернутьСОзнакомления(ЭлектронныйДокумент)
	ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
	ДокументОбъект.НаОзнакомлении = Ложь;
	ДокументОбъект.Записать();
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОшибок

// Параметры:
//  ПредставлениеДействия - Строка
// 
// Возвращаемое значение:
//  Строка
Функция ВидОперацииПриДобавленииОшибки(ПредставлениеДействия) Экспорт
	Возврат СтрШаблон(НСтр("ru = 'Действие %1'"), ПредставлениеДействия);
КонецФункции

// Параметры:
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
//  КраткоеПредставление - Строка
//  ПодробноеПредставление - Строка
// 
// Возвращаемое значение:
//  Структура:
//  * ВидОперации - Строка
//  * КраткоеПредставление - Строка
//  * ПодробноеПредставление - Строка
Функция СоздатьКонтекстВыполненияДействия(Действие, КраткоеПредставление, ПодробноеПредставление)
	
	ПредставлениеДействия = НРег(Действие);
	ВидОперации = ВидОперацииПриДобавленииОшибки(ПредставлениеДействия);
	
	КонтекстВыполнения = Новый Структура;
	КонтекстВыполнения.Вставить("ВидОперации", ВидОперации);
	КонтекстВыполнения.Вставить("КраткоеПредставление", КраткоеПредставление);
	КонтекстВыполнения.Вставить("ПодробноеПредставление", ПодробноеПредставление);
	
	Возврат КонтекстВыполнения;
	
КонецФункции
	
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
// 
// Возвращаемое значение:
//  См. СоздатьКонтекстВыполненияДействия
Функция СоздатьКонтекстВыполненияДействияПоДокументу(ЭлектронныйДокумент, Действие)
	
	СвойстваДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
		"ВидДокумента, НомерДокумента, ДатаДокумента, ИдентификаторДокументооборота");
	
	ПредставлениеДокумента = ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(СвойстваДокумента);
	ПредставлениеДействия = НРег(Действие);
	
	Шаблон = НСтр("ru = 'Не удалось %1 %2.'");
	КраткоеПредставление = СтрШаблон(Шаблон, ПредставлениеДействия, ПредставлениеДокумента);
	
	Шаблон = НСтр("ru = 'Идентификатор документооборота: %1'");
	ИдентификаторДокументооборота = СтрШаблон(Шаблон, СвойстваДокумента.ИдентификаторДокументооборота);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(КраткоеПредставление);
	МассивСтрок.Добавить(ИдентификаторДокументооборота);
	
	ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
	
	КонтекстВыполнения = СоздатьКонтекстВыполненияДействия(Действие, КраткоеПредставление, ПодробноеПредставление);
	
	Возврат КонтекстВыполнения;
	
КонецФункции

// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
// 
// Возвращаемое значение:
//  См. СоздатьКонтекстВыполненияДействия
Функция СоздатьКонтекстВыполненияДействияПоСообщению(Сообщение, Действие)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.ВидСообщения КАК ВидСообщения,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.ЭлектронныйДокумент.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота,
		|	СообщениеЭДО.ЭлектронныйДокумент.ВидДокумента КАК ВидДокумента,
		|	СообщениеЭДО.ЭлектронныйДокумент.ДатаДокумента КАК ДатаДокумента,
		|	СообщениеЭДО.ЭлектронныйДокумент.НомерДокумента КАК НомерДокумента
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Сообщение);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка.Следующий();
	
	ПредставлениеДокумента = ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(Выборка);
	ПредставлениеДействия = НРег(Действие);
	
	Шаблон = НСтр("ru = 'Не удалось %1 %2.'");
	КраткоеПредставление = СтрШаблон(Шаблон, ПредставлениеДействия, ПредставлениеДокумента);
	
	Шаблон = НСтр("ru = 'Идентификатор документооборота: %1'");
	ИдентификаторДокументооборота = СтрШаблон(Шаблон, Выборка.ИдентификаторДокументооборота);
	
	Шаблон = НСтр("ru = 'Тип сообщения: %1'");
	ТипСообщения = СтрШаблон(Шаблон, Выборка.ТипЭлементаРегламента);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(КраткоеПредставление);
	МассивСтрок.Добавить(ИдентификаторДокументооборота);
	МассивСтрок.Добавить(ТипСообщения);
	
	ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
	
	КонтекстВыполнения = СоздатьКонтекстВыполненияДействия(Действие, КраткоеПредставление, ПодробноеПредставление);
	
	Возврат КонтекстВыполнения;
	
КонецФункции

// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
// 
// Возвращаемое значение:
//  См. СоздатьКонтекстВыполненияДействия
Функция СоздатьКонтекстВыполненияДействияПоПакету(ИдентификаторПакета, Действие) Экспорт
	
	ПредставлениеДействия = НРег(Действие);
	
	Шаблон = НСтр("ru = 'Не удалось %1 документы пакета.'");
	КраткоеПредставление = СтрШаблон(Шаблон, ПредставлениеДействия);
	
	Шаблон = НСтр("ru = 'Идентификатор пакета: %1'");
	ПредставлениеИдентификатораПакета = СтрШаблон(Шаблон, ИдентификаторПакета);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(КраткоеПредставление);
	МассивСтрок.Добавить(ПредставлениеИдентификатораПакета);
	
	ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
	
	КонтекстВыполнения = СоздатьКонтекстВыполненияДействия(Действие, КраткоеПредставление, ПодробноеПредставление);
	
	Возврат КонтекстВыполнения;
	
КонецФункции

// Параметры:
//  ТекстОшибки - Строка
//  КонтекстВыполнения - См. СоздатьКонтекстВыполненияДействия
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ДобавитьОшибкуВыполненияДействия(ТекстОшибки, КонтекстВыполнения, КонтекстДиагностики) Экспорт
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка();
	ПодробноеПредставлениеОшибки = КонтекстВыполнения.ПодробноеПредставление + Символы.ПС + ТекстОшибки;
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(
		КонтекстВыполнения.ВидОперации,
		ВидОшибки,
		ПодробноеПредставлениеОшибки,
		КонтекстВыполнения.КраткоеПредставление);
	
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

// Параметры:
//  КонтекстВыполнения - См. СоздатьКонтекстВыполненияДействия
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ДобавитьОшибкуОтменыОперации(КонтекстВыполнения, КонтекстДиагностики) Экспорт
	
	ТекстОшибки = НСтр("ru = 'Отмена операции'");
	
	ДобавитьОшибкуВыполненияДействия(
		ТекстОшибки,
		КонтекстВыполнения,
		КонтекстДиагностики);
	
КонецПроцедуры

// Добавляет в контекст ошибку проверки МЧД.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  ПодписиСОшибкамиМЧД - Массив из Структура:
//  * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * ХешПодписи - Строка
//  Действие - ПеречислениеСсылка.ДействияПоЭДО - Действие
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  
Процедура ДобавитьОшибкуПодписиМЧД(ЭлектронныйДокумент, ПодписиСОшибкамиМЧД, Действие, КонтекстДиагностики)
	
	ПодписиСОшибкамиПолномочийМЧД = Новый Массив;
	ПодписиСПрочимиОшибкамиМЧД = Новый Массив;
	Для Каждого Подпись Из ПодписиСОшибкамиМЧД Цикл
		Если Подпись.ОшибкаПроверкиПолномочий Тогда 
			ПодписиСОшибкамиПолномочийМЧД.Добавить(Подпись);
		Иначе
			ПодписиСПрочимиОшибкамиМЧД.Добавить(Подпись);
		КонецЕсли;
	КонецЦикла;
	
	Если ПодписиСОшибкамиПолномочийМЧД.Количество() Тогда 
		КраткийТекстОшибки = НСтр("ru = 'Имеются документы с доверенностями, нуждающимися в ручной проверке полномочий'");
		ПодробныйТекстОшибки = КраткийТекстОшибки + Символы.ПС
			+ НСтр("ru = 'Для утверждения документов проверьте полномочия подписантов'");
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("СсылкаНаОбъект", ЭлектронныйДокумент);
		ДополнительныеПараметры.Вставить("ДополнительныеДанные", ПодписиСОшибкамиПолномочийМЧД);
		
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(
			НСтр("ru = 'Подписание электронных документов'"),
		МашиночитаемыеДоверенностиКлиентСервер.ВидОшибкиЕстьПодписиСНепровереннымиПолномочиямиМЧД(),
			КраткийТекстОшибки,
			ПодробныйТекстОшибки,
			ДополнительныеПараметры);
			ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
	КонецЕсли;
	
	Если ПодписиСПрочимиОшибкамиМЧД.Количество() Тогда 
		КраткийТекстОшибки = НСтр("ru = 'Не удалось подписать документ, который подписан подписью физического лица'");
		ПодробныйТекстОшибки = КраткийТекстОшибки + Символы.ПС
			+ НСтр("ru = 'Подпись контрагента должна сопровождаться доверенностью, но подходящей доверенности в программе нет'");
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("СсылкаНаОбъект", ЭлектронныйДокумент);
		ДополнительныеПараметры.Вставить("ДополнительныеДанные", ПодписиСПрочимиОшибкамиМЧД);
		
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(
			НСтр("ru = 'Подписание электронных документов'"),
		МашиночитаемыеДоверенностиКлиентСервер.ВидОшибкиЕстьПодписиСМЧДДоверенностьНеНайдена(),
			КраткийТекстОшибки,
			ПодробныйТекстОшибки,
			ДополнительныеПараметры);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
	КонецЕсли;
		
КонецПроцедуры

// Параметры:
//  ТекстОшибки - Строка
//  КонтекстВыполнения - см. СоздатьКонтекстВыполненияДействия
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ДобавитьОшибкуОграниченияДокумента(ТекстОшибки, КонтекстВыполнения, КонтекстДиагностики)
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки(); 
	ВидОшибки.Идентификатор = "ОшибкаПодготовкиКОтправкеДокумента";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Ошибка подготовки к отправке документов'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Невозможно отправить документы из-за ограничений оператора ЭДО'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = 'Переформируйте документ меньшим размером'");
	
	ВидОперации = НСтр("ru = 'Действие подготовить к отправке'");
	КраткоеПредставление = ТекстОшибки;
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ТекстОшибки, КраткоеПредставление);
	
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

// Параметры:
//  ТекстОшибки - Строка
//  КонтекстВыполнения - см. СоздатьКонтекстВыполненияДействия
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ДобавитьОшибкуОграниченияПакета(ТекстОшибки, КонтекстВыполнения, КонтекстДиагностики)
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки(); 
	ВидОшибки.Идентификатор = "ОшибкаПодготовкиКОтправкеПакета";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Ошибка подготовки к отправке пакета документов'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Невозможно отправить документы из-за ограничений оператора ЭДО'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = 'Удалите документы из пакета'");
	
	ВидОперации = НСтр("ru = 'Действие подготовить к отправке'");
	КраткоеПредставление = ТекстОшибки;
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ТекстОшибки, КраткоеПредставление);
	
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыПродолженияВФоне

// Возвращаемое значение:
//  Структура:
//  * НаборДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО
//  * РасшифрованныеМаркеры - Неопределено
//                          - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
//  * РезультатОбработкиПодписания - Неопределено
//                                 - см. НовыйРезультатОбработкиПодписания
//  * РезультатОбработкиПроверкиПодписей - Неопределено
//                                       - см. НовыйРезультатОбработкиПроверкиПодписей
Функция НовыеПараметрыПродолженияВыполненияДействийЭДОВФоне()
	Параметры = Новый Структура;
	Параметры.Вставить("НаборДействий", ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО());
	Параметры.Вставить("РасшифрованныеМаркеры", Неопределено);
	Параметры.Вставить("РезультатОбработкиПодписания", Неопределено);
	Параметры.Вставить("РезультатОбработкиПроверкиПодписей", Неопределено);
	Возврат Параметры;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ПодписанныеСообщения - Массив из см. НовоеОписаниеПодписанногоСообщения
Функция НовыйРезультатОбработкиПодписания()
	Результат = Новый Структура;
	Результат.Вставить("ПодписанныеСообщения", Новый Массив);
	Возврат Результат;
КонецФункции

// Параметры:
//  РезультатОбработкиПодписанияНаКлиенте - см. ЭлектронныеДокументыЭДОСлужебныйКлиент.НовыйРезультатОбработкиПодписания
// 
// Возвращаемое значение:
//  См. НовыйРезультатОбработкиПодписания
Функция РезультатОбработкиПодписанияДляПродолженияВФоне(РезультатОбработкиПодписанияНаКлиенте)
	
	РезультатОбработкиПодписания = НовыйРезультатОбработкиПодписания();
	
	АдресКонтекстаНаСервере = РезультатОбработкиПодписанияНаКлиенте.АдресКонтекстаНаСервере;
	
	Если ЗначениеЗаполнено(АдресКонтекстаНаСервере) Тогда
		
		КонтекстНаСервере = ПолучитьИзВременногоХранилища(АдресКонтекстаНаСервере); // см. КонтекстИнтерактивногоПодписанияНаСервере
		УдалитьИзВременногоХранилища(АдресКонтекстаНаСервере);
		
		Если ЗначениеЗаполнено(КонтекстНаСервере.АдресаДанныхДляОчистки) Тогда
			Для Каждого АдресДанных Из КонтекстНаСервере.АдресаДанныхДляОчистки Цикл
				УдалитьИзВременногоХранилища(АдресДанных);
			КонецЦикла;
		КонецЕсли;
	
	КонецЕсли;
	
	ПодписанныеСообщения = РезультатОбработкиПодписания.ПодписанныеСообщения;
	
	Для Каждого ОписаниеДанныхКлиент Из РезультатОбработкиПодписанияНаКлиенте.ПодписанныеСообщения Цикл
		
		ОписаниеДанных = НовоеОписаниеПодписанногоСообщения();
		ОписаниеДанных.Ссылка = ОписаниеДанныхКлиент.Ссылка;
		ОписаниеДанных.ПрисоединенныйФайл = ОписаниеДанныхКлиент.ПрисоединенныйФайл;
		ОписаниеДанных.ВыбранныйСертификат = ОписаниеДанныхКлиент.ВыбранныйСертификат;
		ОписаниеДанных.ВыбраннаяМЧД = ОписаниеДанныхКлиент.ВыбраннаяМЧД;
		
		Если ТипЗнч(ОписаниеДанныхКлиент.СвойстваПодписи) = Тип("Строка") Тогда
			СвойстваПодписи = ПолучитьИзВременногоХранилища(ОписаниеДанныхКлиент.СвойстваПодписи); // См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
			УдалитьИзВременногоХранилища(ОписаниеДанныхКлиент.СвойстваПодписи);
			ОписаниеДанных.СвойстваПодписи = СвойстваПодписи;
		Иначе
			ОписаниеДанных.СвойстваПодписи = ОписаниеДанныхКлиент.СвойстваПодписи;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДанныхКлиент.АдресДанныхДляОбновления) Тогда
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ОписаниеДанныхКлиент.АдресДанныхДляОбновления);
			УдалитьИзВременногоХранилища(ОписаниеДанныхКлиент.АдресДанныхДляОбновления);
			ОписаниеДанных.Данные = ДвоичныеДанные;
			ОписаниеДанных.ОбновитьДанные = Истина;
		Иначе 
			ОписаниеДанных.Данные = ОписаниеДанныхКлиент.Данные;
		КонецЕсли;
		
		ПодписанныеСообщения.Добавить(ОписаниеДанных);
		
	КонецЦикла;
	
	Возврат РезультатОбработкиПодписания;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ПроверенныеПодписи - Соответствие из КлючИЗначение:
//    ** Ключ - Число - идентификатор данных документа
//    ** Значение - Структура:
//       *** ПодписиДополнительныхДанных - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//       *** ПодписиОсновныхДанных - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  * КонтекстПроверкиПодписей - см. НовыйКонтекстПроверкиПодписей
Функция НовыйРезультатОбработкиПроверкиПодписей()
	Результат = Новый Структура;
	Результат.Вставить("ПроверенныеПодписи", Новый Соответствие);
	Результат.Вставить("КонтекстПроверкиПодписей", Новый Структура);
	Возврат Результат;
КонецФункции

// Параметры:
//  РезультатОбработкиПроверкиПодписейНаКлиенте - см. ЭлектронныеДокументыЭДОКлиент.НовыйРезультатОбработкиПроверкиПодписей
// 
// Возвращаемое значение:
//  См. НовыйРезультатОбработкиПроверкиПодписей
Функция РезультатОбработкиПроверкиПодписейДляПродолженияВФоне(РезультатОбработкиПроверкиПодписейНаКлиенте)
	
	РезультатОбработкиПроверкиПодписей = НовыйРезультатОбработкиПроверкиПодписей();
	
	АдресКонтекстаНаСервере = РезультатОбработкиПроверкиПодписейНаКлиенте.АдресКонтекстаНаСервере;
	
	Если ЗначениеЗаполнено(АдресКонтекстаНаСервере) Тогда
		
		РезультатОбработкиПроверкиПодписей.КонтекстПроверкиПодписей =
			ПолучитьИзВременногоХранилища(АдресКонтекстаНаСервере); // см. НовыйКонтекстПроверкиПодписей
		УдалитьИзВременногоХранилища(АдресКонтекстаНаСервере);
	
	КонецЕсли;
	
	РезультатОбработкиПроверкиПодписей.ПроверенныеПодписи = РезультатОбработкиПроверкиПодписейНаКлиенте.ПроверенныеПодписи;
	
	Возврат РезультатОбработкиПроверкиПодписей;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработкаСобытий

// См. СинхронизацияЭДОСобытия.ПослеОтправкиОбъекта
Процедура ПослеОтправкиОбъекта(Объект, ТранспортныйКонтейнер, ОшибкаПередачи, КонтекстДиагностики, Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОшибкаПередачи)
		ИЛИ СинхронизацияЭДО.ЭтоОшибкаПовторнойОтправки(ОшибкаПередачи) Тогда
		Если ДополнительныеПараметры = Неопределено Тогда
			ДополнительныеПараметры = Новый Структура;
		КонецЕсли;
		Если Не ДополнительныеПараметры.Свойство("ИтогДействийПоЭДО") Тогда
			ДополнительныеПараметры.Вставить("ИтогДействийПоЭДО",
				ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
		КонецЕсли;
		ОбработатьОтправленноеСообщение(Объект, ОшибкаПередачи, КонтекстДиагностики, Отказ,
			ДополнительныеПараметры.ИтогДействийПоЭДО);
		Возврат;
	КонецЕсли;
	
	Если Не ЗафиксироватьОшибкуПередачи(Объект, Перечисления.ДействияПоЭДО.Отправить,
		ОшибкаПередачи.Блокирующая, ОшибкаПередачи.Описание, КонтекстДиагностики) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// См. СинхронизацияЭДОСобытия.ПослеОтправкиОбъектов
Процедура ПослеОтправкиОбъектов(РезультатОтправки, КонтекстДиагностики) Экспорт
	
	Сообщения = Новый Массив;
	Для Каждого РезультатОтправкиОбъекта Из РезультатОтправки.ОтправленныеОбъекты Цикл
		Если РезультатОтправкиОбъекта.Значение Тогда
			Сообщения.Добавить(РезультатОтправкиОбъекта.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Сообщения) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = СостоянияДокументовЭДО.ЭлектронныйДокумент
		|		И СостоянияДокументовЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОбменЗавершен)
		|ГДЕ
		|	СообщениеЭДО.Ссылка В (&Сообщения)";
	
	Запрос.УстановитьПараметр("Сообщения", Сообщения);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭлектронныеДокументыЭДОСобытия.ПослеЗавершенияОбменаЭлектроннымДокументом(
			Выборка.ЭлектронныйДокумент, КонтекстДиагностики);
	КонецЦикла;
	
КонецПроцедуры

// См. СинхронизацияЭДОСобытия.ПослеИзмененияСтатусаПриглашения
Процедура ПослеИзмененияСтатусаПриглашения(ИдентификаторОрганизации, ИдентификаторКонтрагента, Статус, КонтекстДиагностики) Экспорт
	
	Если Статус = Перечисления.СтатусыПриглашений.Принято Тогда
		ВозобновитьДокументыПослеПолученияСогласияПоПриглашению(ИдентификаторОрганизации, ИдентификаторКонтрагента,
			КонтекстДиагностики);
		Возврат;
	КонецЕсли;
	
	ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ПустаяСсылка();
	
	Если Статус = Перечисления.СтатусыПриглашений.ОжидаемСогласия Тогда
		
		ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ОжидаетсяОтветНаПриглашение;
		
	ИначеЕсли Статус = Перечисления.СтатусыПриглашений.Отклонено Тогда
		
		ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ОтклонениеПриглашения;
		
	ИначеЕсли Статус = Перечисления.СтатусыПриглашений.ТребуетсяОтправить
		ИЛИ Статус = Перечисления.СтатусыПриглашений.Ошибка Тогда
		
		ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ТребуетсяОтправкаПриглашения;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПричинаОстановки) Тогда
		ОстановитьДокументыПослеИзмененияПриглашения(ИдентификаторОрганизации, ИдентификаторКонтрагента,
			ПричинаОстановки, КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

// См. СинхронизацияЭДОСобытия.ПриИсправленииОшибкиПередачи
Процедура ПриИсправленииОшибкиПередачи(ИдентификаторДокументооборота, КонтекстДиагностики) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокументооборота = &ИдентификаторДокументооборота
		|	И ЭлектронныйДокументВходящийЭДО.Остановлен
		|	И ЭлектронныйДокументВходящийЭДО.ПричинаОстановки = &ПричинаОстановки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокументооборота = &ИдентификаторДокументооборота
		|	И ЭлектронныйДокументИсходящийЭДО.Остановлен
		|	И ЭлектронныйДокументИсходящийЭДО.ПричинаОстановки = &ПричинаОстановки";
	
	Запрос.УстановитьПараметр("ИдентификаторДокументооборота", ИдентификаторДокументооборота);
	Запрос.УстановитьПараметр("ПричинаОстановки", Перечисления.ПричиныОстановкиЭДО.ОшибкаПередачиНеблокирующая);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Действие = Перечисления.ДействияПоЭДО.Загрузить;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВозобновитьДокумент(Выборка.ЭлектронныйДокумент, Действие, КонтекстДиагностики);
	КонецЦикла;
	
КонецПроцедуры

// См. СинхронизацияЭДОСобытия.ПриИзмененииСтатусаТранспортногоКонтейнера
Процедура ПриИзмененииСтатусаТранспортногоКонтейнера(Контейнер, НовыйСтатус, КонтекстДиагностики) Экспорт
	
	Если НовыйСтатус <> Перечисления.СтатусыТранспортныхСообщенийБЭД.Отменен
		ИЛИ ЭлектронныеДокументыЭДО.ВыполнениеДействийПоЭДОЗапрещено(КонтекстДиагностики) Тогда
		Возврат;
	КонецЕсли;
	
	НаборСообщений = СинхронизацияЭДО.ОбъектыТранспортногоКонтейнера(Контейнер);
	
	ОтменитьОтправку(НаборСообщений, КонтекстДиагностики);
	
КонецПроцедуры

// См. НастройкиЭДОСобытия.ПередИзменениемИспользованияУтверждения
Процедура ПередИзменениемИспользованияУтверждения(ИспользоватьУтверждение, КонтекстДиагностики, Отказ) Экспорт
	
	Если ИспользоватьУтверждение Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.Состояние = &СостояниеУтверждение";
	Запрос.УстановитьПараметр("СостояниеУтверждение", Перечисления.СостоянияСообщенийЭДО.Утверждение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не СнятьСУтверждения(Выборка.Ссылка, ИспользоватьУтверждение, КонтекстДиагностики) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Событие возникает при установки /снятии пометки удаления электронного документа.
// 
// Параметры:
// 	ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Ссылка на электронный документ.
// 	ПометкаУдаления - Булево - признак установки / снятия пометки.
// 	Отказ - Булево - признак отказа от установки пометки удаления.
Процедура ПриУстановкеПометкиУдаленияДокумента(ЭлектронныйДокумент, ПометкаУдаления, Отказ) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеЭДО");
	ЭлементБлокировки.УстановитьЗначение("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Сообщение
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СообщениеОбъект = Выборка.Сообщение.ПолучитьОбъект();
		Если СообщениеОбъект.ПометкаУдаления <> ПометкаУдаления Тогда
			СообщениеОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		КонецЕсли;
	КонецЦикла;
	
	ЭлектронныеДокументыЭДОСобытия.ПриУстановкеПометкиУдаленияДокумента(ЭлектронныйДокумент, ПометкаУдаления, Отказ);
	
КонецПроцедуры

// Событие возникает перед непосредственным удалением электронного документа из базы данных.
// 
// Параметры:
// 	ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Ссылка на электронный документ.
// 	Отказ - Булево - признак отказа от удаления электронного документа.
Процедура ПередУдалениемДокумента(ЭлектронныйДокумент, Отказ) Экспорт
	
	ЭлектронныеДокументыЭДОСобытия.ПередУдалениемДокумента(ЭлектронныйДокумент, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПриглашениями

// Параметры:
//  ИдентификаторОрганизации - Строка
//  ИдентификаторКонтрагента - Строка
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ВозобновитьДокументыПослеПолученияСогласияПоПриглашению(ИдентификаторОрганизации, ИдентификаторКонтрагента, КонтекстДиагностики)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|	И ЭлектронныйДокументВходящийЭДО.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
		|	И ЭлектронныйДокументВходящийЭДО.Остановлен
		|	И ЭлектронныйДокументВходящийЭДО.ПричинаОстановки В (&ПричиныОстановки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|	И ЭлектронныйДокументИсходящийЭДО.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
		|	И ЭлектронныйДокументИсходящийЭДО.Остановлен
		|	И ЭлектронныйДокументИсходящийЭДО.ПричинаОстановки В (&ПричиныОстановки)";
	
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторОрганизации);
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", ИдентификаторКонтрагента);
	
	ПричиныОстановки = Новый Массив; // Массив из ПеречислениеСсылка.ПричиныОстановкиЭДО
	ПричиныОстановки.Добавить(Перечисления.ПричиныОстановкиЭДО.ТребуетсяОтправкаПриглашения);
	ПричиныОстановки.Добавить(Перечисления.ПричиныОстановкиЭДО.ОжидаетсяОтветНаПриглашение);
	ПричиныОстановки.Добавить(Перечисления.ПричиныОстановкиЭДО.ОтклонениеПриглашения);
	Запрос.УстановитьПараметр("ПричиныОстановки", ПричиныОстановки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	
	Действие = Перечисления.ДействияПоЭДО.Загрузить;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ВозобновитьДокумент(Выборка.ЭлектронныйДокумент, Действие, КонтекстДиагностики) Тогда
			ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы.Добавить(Выборка.ЭлектронныйДокумент);
		КонецЕсли;
	КонецЦикла;
	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(
		ПараметрыВыполнения.НаборДействий, Перечисления.ДействияПоЭДО.ПодготовитьКОтправке);
	ВыполнитьДействияЭДО(ПараметрыВыполнения, КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  ИдентификаторОрганизации - Строка
//  ИдентификаторКонтрагента - Строка
//  ПричинаОстановки - ПеречислениеСсылка.ПричиныОстановкиЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ОстановитьДокументыПослеИзмененияПриглашения(ИдентификаторОрганизации, ИдентификаторКонтрагента, ПричинаОстановки, КонтекстДиагностики)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|		И ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|		И ЭлектронныйДокументВходящийЭДО.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
		|		И НЕ ЭлектронныйДокументВходящийЭДО.Остановлен
		|		И СообщениеЭДО.Состояние = &СостояниеДокумента
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ЭлектронныйДокументИсходящийЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
		|		И ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|		И ЭлектронныйДокументИсходящийЭДО.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
		|		И НЕ ЭлектронныйДокументИсходящийЭДО.Остановлен
		|		И СообщениеЭДО.Состояние = &СостояниеДокумента
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|	И ЭлектронныйДокументВходящийЭДО.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
		|	И ЭлектронныйДокументВходящийЭДО.Остановлен
		|	И ЭлектронныйДокументВходящийЭДО.ПричинаОстановки В (&ПричиныОстановки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|	И ЭлектронныйДокументИсходящийЭДО.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
		|	И ЭлектронныйДокументИсходящийЭДО.Остановлен
		|	И ЭлектронныйДокументИсходящийЭДО.ПричинаОстановки В (&ПричиныОстановки)";
	
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторОрганизации);
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", ИдентификаторКонтрагента);
	Запрос.УстановитьПараметр("СостояниеДокумента", Перечисления.СостоянияСообщенийЭДО.Отправка);
	
	ПричиныОстановки = Новый Массив; // Массив из ПеречислениеСсылка.ПричиныОстановкиЭДО
	ПричиныОстановки.Добавить(Перечисления.ПричиныОстановкиЭДО.ТребуетсяОтправкаПриглашения);
	ПричиныОстановки.Добавить(Перечисления.ПричиныОстановкиЭДО.ОжидаетсяОтветНаПриглашение);
	ПричиныОстановки.Добавить(Перечисления.ПричиныОстановкиЭДО.ОтклонениеПриглашения);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПричиныОстановки, ПричинаОстановки);
	Запрос.УстановитьПараметр("ПричиныОстановки", ПричиныОстановки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Действие = Перечисления.ДействияПоЭДО.Загрузить;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОстановитьДокумент(Выборка.ЭлектронныйДокумент, ПричинаОстановки, Действие, КонтекстДиагностики);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеДокументов

// Параметры:
//  ЭлектронныйДокумент - См. ОбменСКонтрагентами.ДанныеЭлектронногоДокумента.ЭлектронныйДокумент
// 
// Возвращаемое значение:
//  Структура:
//  * ДанныеОтправителя - Неопределено,Структура - структура данных, описывающая данные отправителя:
//    ** Формат - Строка
//    ** Содержание - Неопределено - в случае, если у документ имеет неформализованный формат.
//                  - см. ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента
//    ** ФорматРазбора - Неопределено,Строка
//  * ДанныеПолучателя - Неопределено,Структура- структура данных, описывающая данные получателя:
//    ** Формат - Строка
//    ** Содержание - Неопределено - в случае, если у документа нет титула получателя
//                  - см. ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента
//    ** ФорматРазбора - Неопределено,Строка
Функция ДанныеЭлектронногоДокумента(ЭлектронныйДокумент) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеОтправителя");
	Результат.Вставить("ДанныеПолучателя");
	
	ТипыЭлементовРегламента = Новый Массив;
	ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Запрос.УстановитьПараметр("ТипыЭлементовРегламента", ТипыЭлементовРегламента);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СообщениеЭДО.ОсновнойФайл,
	|	СообщениеЭДО.ТипЭлементаРегламента,
	|	СообщениеЭДО.Направление
	|ИЗ
	|	Документ.СообщениеЭДО КАК СообщениеЭДО
	|ГДЕ
	|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|	И СообщениеЭДО.ТипЭлементаРегламента В (&ТипыЭлементовРегламента)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(Выборка.ОсновнойФайл);
		ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.ОсновнойФайл);
		
		Если НРег(ДанныеФайла.Расширение) = "xml" Тогда
			ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
			ОписаниеФайла.ИмяФайла       = ДанныеФайла.ИмяФайла;
			ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанныеФайла;
			
			ПараметрыПолученияДанных = ФорматыЭДО.НовыеПараметрыПолученияДанныхДокумента();
			ПараметрыПолученияДанных.Направление = Выборка.Направление;
			ПараметрыПолученияДанных.ОсновнойФайл = ОписаниеФайла;
			ДанныеСообщения = ФорматыЭДО.ДанныеЭлектронногоДокумента(ПараметрыПолученияДанных);
			
			// Для информации отправителя заполним информацию по сопоставлению.
			Если Выборка.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
				И ДанныеСообщения <> Неопределено Тогда
				
				Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "Контрагент");
				ИнтеграцияЭДО.ЗаполнитьНоменклатуруИБВДеревеДокумента(Контрагент, ДанныеСообщения.НовыйЭД);
			КонецЕсли;
						
			СодержаниеСообщения = ФорматыЭДО.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
			
			Если ДанныеСообщения <> Неопределено И СодержаниеСообщения <> Неопределено Тогда
				ИмяКлюча = ?(Выборка.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя,
					"ДанныеОтправителя", "ДанныеПолучателя");
				
				Данные = Новый Структура;
				Данные.Вставить("Формат", СодержаниеСообщения.Формат);
				Данные.Вставить("Содержание", ДанныеСообщения.НовыйЭД.ЗначениеРеквизита);
				Данные.Вставить("ФорматРазбора", ДанныеСообщения.НовыйЭД.ФорматРазбора);
				Результат[ИмяКлюча] = Данные;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьСвязанныеДокументы(ТипДокумента, ИдентификаторыОснований, Действие, КонтекстДиагностики, ЭтоВходящийЭДО = Ложь) Экспорт
	
	ЭтоИсправляющийТипДокумента = Перечисления.ТипыДокументовЭДО.ЭтоИсправляющий(ТипДокумента);
	
	ЭтоКорректирующийТипДокумента = Перечисления.ТипыДокументовЭДО.ЭтоКорректирующий(ТипДокумента);
	
	Если Не ЭтоИсправляющийТипДокумента
		И Не ЭтоКорректирующийТипДокумента Тогда
		Возврат;
	КонецЕсли;
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ИдентификаторыОснований.ИдентификаторСвязи КАК ИдентификаторСвязи,
		|	ИдентификаторыОснований.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота
		|ПОМЕСТИТЬ ВТ_ИдентификаторыОснований
		|ИЗ
		|	&ИдентификаторыОснований КАК ИдентификаторыОснований");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.Дата КАК Дата,
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.Состояние КАК Состояние,
		|	СообщениеЭДО.Статус КАК Статус,
		|	СообщениеЭДО.Направление КАК Направление,
		|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента
		|ИЗ
		|	ВТ_ИдентификаторыОснований
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИмяТаблицыДокумента КАК ДокументЭДО
		|		ПО ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота = ДокументЭДО.ИдентификаторДокументооборота
		|		И ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота <> """"
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ДокументЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО СообщениеЭДО.ВидСообщения = ВидыДокументовЭДО.Ссылка";
	
	ИмяТаблицыДокументаЭДО = ЭлектронныеДокументыЭДО.ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО);
	ТекстЗапросаДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		СтрЗаменить(ТекстЗапроса, "ИмяТаблицыДокумента", ИмяТаблицыДокументаЭДО));
	
	Если ЭтоВходящийЭДО Тогда
		ТекстЗапросаДокументов.Добавить("
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|");
		
		ТекстЗапросаДокументов.Добавить(
			"ВЫБРАТЬ
			|	СообщениеЭДО.Ссылка КАК Ссылка,
			|	СообщениеЭДО.Дата КАК Дата,
			|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
			|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
			|	СообщениеЭДО.Состояние КАК Состояние,
			|	СообщениеЭДО.Статус КАК Статус,
			|	СообщениеЭДО.Направление КАК Направление,
			|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента
			|ИЗ
			|	ВТ_ИдентификаторыОснований КАК ВТ_ИдентификаторыОснований
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
			|		ПО ВТ_ИдентификаторыОснований.ИдентификаторСвязи = ДокументЭДО.ИдентификаторСвязи
			|		И ВТ_ИдентификаторыОснований.ИдентификаторСвязи <> """"
			|		И ВТ_ИдентификаторыОснований.ИдентификаторДокументооборота = """"
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
			|		ПО ДокументЭДО.Ссылка = СообщениеЭДО.ЭлектронныйДокумент
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
			|		ПО СообщениеЭДО.ВидСообщения = ВидыДокументовЭДО.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИдентификаторыОснований КАК ИдентификаторыДокументооборотов
			|		ПО ДокументЭДО.ИдентификаторДокументооборота = ИдентификаторыДокументооборотов.ИдентификаторДокументооборота
			|ГДЕ
			|	ИдентификаторыДокументооборотов.ИдентификаторДокументооборота ЕСТЬ NULL");
	КонецЕсли;
	
	ТекстЗапросаДокументов.Добавить("
		|ИТОГИ
		|ПО
		|	ЭлектронныйДокумент");
	
	ТекстыЗапросов.Добавить(СтрСоединить(ТекстЗапросаДокументов));
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("ИдентификаторыОснований", ИдентификаторыОснований);
	
	Блокировка = Новый БлокировкаДанных;
	Для Каждого СтрокаТаблицы Из ИдентификаторыОснований Цикл
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицыДокументаЭДО);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторДокументооборота) Тогда
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторДокументооборота",
				СтрокаТаблицы.ИдентификаторДокументооборота);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторСвязи) Тогда
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторСвязи", СтрокаТаблицы.ИдентификаторСвязи);
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
	
		КорректируемыеТипыДокументов = Перечисления.ТипыДокументовЭДО.КорректируемыеТипыДокументов();
		
		СвойстваСообщения = Новый Структура("Ссылка, Статус");
		
		ВыборкаДокументов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокументов.Следующий() Цикл
			
			ПропуститьДокумент = Ложь;
			СостоянияЭлементовРегламента = РегламентыЭДО.НовыеСостоянияЭлементовРегламента();
			Выборка = ВыборкаДокументов.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(СостоянияЭлементовРегламента.Добавить(), Выборка);
				Если Выборка.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
					Если ЭтоИсправляющийТипДокумента И ТипДокумента <> Выборка.ТипДокумента
						ИЛИ ЭтоКорректирующийТипДокумента
							И ТипДокумента <> КорректируемыеТипыДокументов[Выборка.ТипДокумента] Тогда
						ПропуститьДокумент = Истина;
						Прервать;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(СвойстваСообщения, Выборка);
				КонецЕсли;
			КонецЦикла;
			
			Если ПропуститьДокумент Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОбъектов = ВыборкаДокументов.ЭлектронныйДокумент.ПолучитьОбъект();
			ДокументОбъектов.Исправлен = Истина;
			ДокументОбъектов.Записать();
			
			ДатаИзменения = ТекущаяДатаСеанса();
			
			СостояниеДокумента = УстановитьСостояниеДокументаПриИзменении(ДокументОбъектов, СостоянияЭлементовРегламента,
				ДатаИзменения, КонтекстДиагностики);
			
			РегистрыСведений.ЖурналДействийПоЭДО.ЗаписатьДействие(Действие, ДокументОбъектов, СостояниеДокумента,
				ДатаИзменения, СвойстваСообщения);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращаемое значение:
//  ТаблицаЗначений - Новые свойства документов для описания пакетов:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Дата - Дата
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.УчастникЭДО
//  * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторДокумента - Строка
//  * ЭтоОблачныйЭДО - Булево
Функция НовыеСвойстваДокументовДляОписанияПакетов()
	
	ОписаниеТипаОрганизация  = Метаданные.ОпределяемыеТипы.Организация.Тип;
	ОписаниеТипаКонтрагент = Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип;
	ОписаниеТипаДоговорКонтрагента = Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип;
	
	СвойстваДокументов = Новый ТаблицаЗначений;
	СвойстваДокументов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(
		"ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО"));
	СвойстваДокументов.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	СвойстваДокументов.Колонки.Добавить("Организация", ОписаниеТипаОрганизация);
	СвойстваДокументов.Колонки.Добавить("Контрагент", ОписаниеТипаКонтрагент);
	СвойстваДокументов.Колонки.Добавить("ДоговорКонтрагента", ОписаниеТипаДоговорКонтрагента);
	СвойстваДокументов.Колонки.Добавить("ИдентификаторОрганизации", ОбщегоНазначения.ОписаниеТипаСтрока(70));
	СвойстваДокументов.Колонки.Добавить("ИдентификаторДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СвойстваДокументов.Колонки.Добавить("ЭтоОблачныйЭДО", Новый ОписаниеТипов("Булево"));
	
	Возврат СвойстваДокументов;
	
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. ЭлектронныеДокументыЭДО.ДанныеНоменклатурыДокументов
Функция ДанныеНоменклатурыДокументов(ЭлектронныеДокументы, КонтекстДиагностики) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Сообщение,
		|	СообщениеЭДО.Направление,
		|	СообщениеЭДО.ЭлектронныйДокумент,
		|	СообщениеЭДОПрисоединенныеФайлы.Ссылка КАК ПрисоединенныеФайл,
		|	СообщениеЭДОПрисоединенныеФайлы.ПолноеИмяФайла,
		|	СообщениеЭДО.ОсновнойФайл = СообщениеЭДОПрисоединенныеФайлы.Ссылка КАК ЭтоОсновнойФайл
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК СообщениеЭДОПрисоединенныеФайлы
		|		ПО СообщениеЭДО.Ссылка = СообщениеЭДОПрисоединенныеФайлы.ВладелецФайла
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент В (&ЭлектронныеДокументы)";
	
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	ФайлыДокументов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ФайлыДокументов.Добавить(Выборка.ПрисоединенныеФайл);
	КонецЦикла;
	
	ДвоичныеДанныеФайлов = РаботаСФайлами.ДвоичныеДанныеФайлов(ФайлыДокументов);
	
	Выборка.Сбросить();
	ПараметрыПолученияДокументов = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ДвоичныеДанныеФайла = ДвоичныеДанныеФайлов[Выборка.ПрисоединенныеФайл];
		Если ДвоичныеДанныеФайла = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПолучения = ПараметрыПолученияДокументов[Выборка.ЭлектронныйДокумент];
		Если ПараметрыПолучения = Неопределено Тогда
			ПараметрыПолучения = ФорматыЭДО.НовыеПараметрыПолученияДанныхДокумента();
			ПараметрыПолученияДокументов.Вставить(Выборка.ЭлектронныйДокумент, ПараметрыПолучения);
		КонецЕсли;
		
		ПараметрыПолучения.Направление = Выборка.Направление;
		ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
		ОписаниеФайла.ИмяФайла = Выборка.ПолноеИмяФайла;
		ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанныеФайла;
		Если Выборка.ЭтоОсновнойФайл Тогда
			ПараметрыПолучения.ОсновнойФайл = ОписаниеФайла;
		Иначе
			ПараметрыПолучения.ДополнительныйФайл = ОписаниеФайла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПараметрыПолученияДокумента Из ПараметрыПолученияДокументов Цикл
		ЭлектронныйДокумент = ПараметрыПолученияДокумента.Ключ;
		ПараметрыПолучения = ПараметрыПолученияДокумента.Значение; // См. ФорматыЭДО.НовыеПараметрыПолученияДанныхДокумента
		ИнформацияОТоваре = ФорматыЭДО.ИнформацияОТовареИзФайла(ПараметрыПолучения);
		Результат.Вставить(ЭлектронныйДокумент, ИнформацияОТоваре);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Массив из см. ОтражениеВУчетеЭДО.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
Функция ДанныеДокументовДляОтраженияВУчете(ЭлектронныеДокументы) Экспорт
	
	ОбщийМодульОтражениеВУчетеЭДО = ИнтеграцияЭДО.ОбщийМодульОтражениеВУчетеЭДО();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныеДокументы.Ссылка,
		|	ЭлектронныеДокументы.Представление,
		|	ЭлектронныеДокументы.ВидДокумента,
		|	ВЫБОР
		|		КОГДА ЭлектронныеДокументы.ВидДокумента.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.Прикладной)
		|			ТОГДА ЭлектронныеДокументы.ВидДокумента.ПрикладнойТипДокумента
		|		ИНАЧЕ ЭлектронныеДокументы.ВидДокумента.ТипДокумента
		|	КОНЕЦ КАК ТипДокумента,
		|	ЭлектронныеДокументы.Контрагент КАК Отправитель,
		|	ЭлектронныеДокументы.Организация КАК Получатель,
		|	ЭлектронныеДокументы.ИдентификаторКонтрагента КАК ИдентификаторОтправителя,
		|	ЭлектронныеДокументы.ИдентификаторОрганизации КАК ИдентификаторПолучателя,
		|	ЭлектронныеДокументы.ФорматОсновногоТитула,
		|	ЭлектронныеДокументы.ОтключитьКонтрольОтраженияВУчете,
		|	СостоянияЭДО.Состояние КАК СостояниеДокумента
		|ПОМЕСТИТЬ ВТ_ЭлектронныеДокументы
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|		ПО ЭлектронныеДокументы.Ссылка = СостоянияЭДО.ЭлектронныйДокумент
		|ГДЕ
		|	ЭлектронныеДокументы.Ссылка В (&ЭлектронныеДокументы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныеДокументы.Ссылка,
		|	ЭлектронныеДокументы.Представление,
		|	ЭлектронныеДокументы.ВидДокумента,
		|	ВЫБОР
		|		КОГДА ЭлектронныеДокументы.ВидДокумента.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.Прикладной)
		|			ТОГДА ЭлектронныеДокументы.ВидДокумента.ПрикладнойТипДокумента
		|		ИНАЧЕ ЭлектронныеДокументы.ВидДокумента.ТипДокумента
		|	КОНЕЦ КАК ТипДокумента,
		|	ЭлектронныеДокументы.Организация КАК Отправитель,
		|	ЭлектронныеДокументы.Контрагент КАК Получатель,
		|	ЭлектронныеДокументы.ИдентификаторОрганизации,
		|	ЭлектронныеДокументы.ИдентификаторКонтрагента,
		|	ЭлектронныеДокументы.ФорматОсновногоТитула,
		|	ЛОЖЬ КАК ОтключитьКонтрольОтраженияВУчете,
		|	СостоянияЭДО.Состояние КАК СостояниеДокумента
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|		ПО ЭлектронныеДокументы.Ссылка = СостоянияЭДО.ЭлектронныйДокумент
		|ГДЕ
		|	ЭлектронныеДокументы.Ссылка В (&ЭлектронныеДокументы)
		|;
		|
		|ВЫБРАТЬ
		|	Сообщения.Ссылка,
		|	Сообщения.ЭлектронныйДокумент,
		|	Сообщения.Представление,
		|	Сообщения.ОсновнойФайл,
		|	Сообщения.Направление,
		|	Сообщения.ТипЭлементаРегламента В (&ТитулыОтправителя) КАК ЭтоТитулОтправителя
		|ПОМЕСТИТЬ ВТ_Сообщения
		|ИЗ
		|	Документ.СообщениеЭДО КАК Сообщения
		|ГДЕ
		|	Сообщения.ЭлектронныйДокумент В (&ЭлектронныеДокументы)
		|	И Сообщения.ТипЭлементаРегламента В (&ТитулыОтправителя, &ДополнительныеТитулы)
		|;
		|
		|ВЫБРАТЬ
		|	ПрисоединенныеФайлы.Ссылка,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла,
		|	ПрисоединенныеФайлы.ВладелецФайла,
		|	ПрисоединенныеФайлы.Ссылка = Сообщения.ОсновнойФайл КАК ЭтоОсновнойФайл
		|ПОМЕСТИТЬ ВТ_ПрисоединенныеФайлы
		|ИЗ
		|	Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Сообщения КАК Сообщения
		|		ПО ПрисоединенныеФайлы.ВладелецФайла = Сообщения.Ссылка
		|;
		|
		|ВЫБРАТЬ
		|	ЭлектронныеДокументы.Ссылка КАК ЭлектронныйДокумент,
		|	ЭлектронныеДокументы.ВидДокумента КАК ВидДокумента,
		|	ЭлектронныеДокументы.ТипДокумента,
		|	СообщенияОтправителя.Представление КАК Представление,
		|	ЭлектронныеДокументы.Отправитель,
		|	ЭлектронныеДокументы.Получатель,
		|	ЭлектронныеДокументы.ИдентификаторОтправителя,
		|	ЭлектронныеДокументы.ИдентификаторПолучателя,
		|	ЭлектронныеДокументы.ФорматОсновногоТитула,
		|	ЭлектронныеДокументы.ОтключитьКонтрольОтраженияВУчете,
		|	ОсновныеФайлы.Ссылка КАК ОсновнойФайл,
		|	ОсновныеФайлы.ПолноеИмяФайла КАК ИмяОсновногоФайла,
		|	ДополнительныеФайлы.Ссылка КАК ДополнительныйФайл,
		|	ДополнительныеФайлы.ПолноеИмяФайла КАК ИмяДополнительногоФайла,
		|	ОсновныеФайлыДополнительногоТитула.Ссылка КАК ОсновнойФайлДополнительногоТитула,
		|	ОсновныеФайлыДополнительногоТитула.ПолноеИмяФайла КАК ИмяОсновногоФайлаДополнительногоТитула,
		|	ДополнительныеФайлыДополнительногоТитула.Ссылка КАК ДополнительныйФайлДополнительногоТитула,
		|	ДополнительныеФайлыДополнительногоТитула.ПолноеИмяФайла КАК ИмяДополнительногоФайлаДополнительногоТитула,
		|	ЭлектронныеДокументы.СостояниеДокумента КАК СостояниеДокумента,
		|	СообщенияОтправителя.Направление КАК Направление,
		|	ЭлектронныеДокументы.Представление КАК ПредставлениеДокумента
		|ИЗ
		|	ВТ_ЭлектронныеДокументы КАК ЭлектронныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Сообщения КАК СообщенияОтправителя
		|		ПО ЭлектронныеДокументы.Ссылка = СообщенияОтправителя.ЭлектронныйДокумент
		|		И СообщенияОтправителя.ЭтоТитулОтправителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПрисоединенныеФайлы КАК ОсновныеФайлы
		|		ПО ОсновныеФайлы.ВладелецФайла = СообщенияОтправителя.Ссылка
		|		И ОсновныеФайлы.ЭтоОсновнойФайл
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПрисоединенныеФайлы КАК ДополнительныеФайлы
		|		ПО ДополнительныеФайлы.ВладелецФайла = СообщенияОтправителя.Ссылка
		|		И НЕ ДополнительныеФайлы.ЭтоОсновнойФайл
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сообщения КАК СообщенияДополнительныхТитулов
		|		ПО ЭлектронныеДокументы.Ссылка = СообщенияДополнительныхТитулов.ЭлектронныйДокумент
		|		И НЕ СообщенияДополнительныхТитулов.ЭтоТитулОтправителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПрисоединенныеФайлы КАК ОсновныеФайлыДополнительногоТитула
		|		ПО ОсновныеФайлыДополнительногоТитула.ВладелецФайла = СообщенияДополнительныхТитулов.Ссылка
		|		И ОсновныеФайлыДополнительногоТитула.ЭтоОсновнойФайл
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПрисоединенныеФайлы КАК ДополнительныеФайлыДополнительногоТитула
		|		ПО ДополнительныеФайлыДополнительногоТитула.ВладелецФайла = СообщенияДополнительныхТитулов.Ссылка
		|		И НЕ ДополнительныеФайлыДополнительногоТитула.ЭтоОсновнойФайл
		|";
	
	Запрос.Параметры.Вставить("ЭлектронныеДокументы", ЭлектронныеДокументы);
	
	ТитулыОтправителя = Новый Массив;
	ТитулыОтправителя.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителя);	
	КонецЕсли;
	Запрос.Параметры.Вставить("ТитулыОтправителя", ТитулыОтправителя);
	
	ДополнительныеТитулы = Новый Массив;
	ДополнительныеТитулы.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки);
	Запрос.Параметры.Вставить("ДополнительныеТитулы", ДополнительныеТитулы);
	
	НаборДанных = Новый Массив;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат НаборДанных;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	КонтейнерыДвоичныхДанныхПоФайлам = ОбщегоНазначенияБЭДКлиентСервер.НовоеМножественноеСоответствие();
	Файлы = Новый Массив;

	ДанныеБезФормата = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		Данные = ОбщийМодульОтражениеВУчетеЭДО.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете();
		ЗаполнитьЗначенияСвойств(Данные, Выборка);
		Данные.ДанныеОсновногоФайла.ИмяФайла = Выборка.ИмяОсновногоФайла;
		ОбщегоНазначенияБЭДКлиентСервер.ВставитьВоМножественноеСоответствие(КонтейнерыДвоичныхДанныхПоФайлам,
			Выборка.ОсновнойФайл, Данные.ДанныеОсновногоФайла);
		Файлы.Добавить(Выборка.ОсновнойФайл);
		Если ЗначениеЗаполнено(Выборка.ДополнительныйФайл) Тогда
			Данные.ДанныеДополнительногоФайла.ИмяФайла = Выборка.ИмяДополнительногоФайла;
			ОбщегоНазначенияБЭДКлиентСервер.ВставитьВоМножественноеСоответствие(КонтейнерыДвоичныхДанныхПоФайлам,
				Выборка.ДополнительныйФайл, Данные.ДанныеДополнительногоФайла);
			Файлы.Добавить(Выборка.ДополнительныйФайл);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ОсновнойФайлДополнительногоТитула) Тогда
			Данные.ДанныеДополнительногоТитула.ОсновнойФайл.ИмяФайла = Выборка.ИмяОсновногоФайлаДополнительногоТитула;
			ОбщегоНазначенияБЭДКлиентСервер.ВставитьВоМножественноеСоответствие(КонтейнерыДвоичныхДанныхПоФайлам,
				Выборка.ОсновнойФайлДополнительногоТитула, Данные.ДанныеДополнительногоТитула.ОсновнойФайл);
			Файлы.Добавить(Выборка.ОсновнойФайлДополнительногоТитула);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ДополнительныйФайлДополнительногоТитула) Тогда
			Данные.ДанныеДополнительногоТитула.ДополнительныйФайл.ИмяФайла = Выборка.ИмяДополнительногоФайлаДополнительногоТитула;
			ОбщегоНазначенияБЭДКлиентСервер.ВставитьВоМножественноеСоответствие(КонтейнерыДвоичныхДанныхПоФайлам,
				Выборка.ДополнительныйФайлДополнительногоТитула, Данные.ДанныеДополнительногоТитула.ДополнительныйФайл);
			Файлы.Добавить(Выборка.ДополнительныйФайлДополнительногоТитула);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ФорматОсновногоТитула) Тогда
			Данные.Формат = Выборка.ФорматОсновногоТитула;
		Иначе
			ДанныеБезФормата.Добавить(Данные);
		КонецЕсли;
		
		НаборДанных.Добавить(Данные);
		
	КонецЦикла;
	
	ДвоичныеДанныеПоФайлам = РаботаСФайлами.ДвоичныеДанныеФайлов(Файлы);
	
	Для Каждого ДвоичныеДанныеПоФайлу Из ДвоичныеДанныеПоФайлам Цикл
		КонтейнерыДвоичныхДанных = ОбщегоНазначенияБЭДКлиентСервер.ПолучитьИзМножественногоСоответствия(
			КонтейнерыДвоичныхДанныхПоФайлам, ДвоичныеДанныеПоФайлу.Ключ);
		Для Каждого КонтейнерДвоичныхДанных Из КонтейнерыДвоичныхДанных Цикл
			КонтейнерДвоичныхДанных.ДвоичныеДанные = ДвоичныеДанныеПоФайлу.Значение;
		КонецЦикла;
	КонецЦикла;

	Для Каждого Данные Из ДанныеБезФормата Цикл
		Если ЗначениеЗаполнено(Данные.ДанныеОсновногоФайла.ДвоичныеДанные) Тогда
			Содержание = ФорматыЭДО.ПрочитатьСодержаниеДокумента(Данные.ДанныеОсновногоФайла);
			Если ЗначениеЗаполнено(Содержание) Тогда
				Данные.Формат = Содержание.Формат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НаборДанных;
	
КонецФункции

#КонецОбласти

#Область СостояниеДокумента

// Возвращаемое значение:
//  Структура:
//  * Значение - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * Дополнение - Строка
//  * ДатаИзменения - Дата
//  * Комментарий - Строка
Функция НовоеСостояниеДокументаПодробное() Экспорт
	СостояниеПодробное = Новый Структура;
	СостояниеПодробное.Вставить("Значение", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	СостояниеПодробное.Вставить("Дополнение", "");
	СостояниеПодробное.Вставить("ДатаИзменения", '00010101');
	СостояниеПодробное.Вставить("Комментарий", "");
	Возврат СостояниеПодробное
КонецФункции

// Параметры:
//  ЭтоВходящийЭДО - См. ЭтоВходящийЭДО
// 
// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаПараметровОбновленияСостоянияДокумента(ЭтоВходящийЭДО)
	
	ТекстыЗапросов = Новый Массив;
	
	Если ЭтоВходящийЭДО Тогда
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК Ссылка,
			|	ЭлектронныйДокументВходящийЭДО.ВидДокумента КАК ВидДокумента,
			|	ЭлектронныйДокументВходящийЭДО.ВидДокумента.ТипДокумента КАК ТипДокумента,
			|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация,
			|	ЭлектронныйДокументВходящийЭДО.Контрагент КАК Контрагент,
			|	ЭлектронныйДокументВходящийЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента,
			|	ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
			|	ЭлектронныйДокументВходящийЭДО.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
			|	ЭлектронныйДокументВходящийЭДО.ТипРегламента КАК ТипРегламента,
			|	ЭлектронныйДокументВходящийЭДО.ТребуетсяИзвещение КАК ТребуетсяИзвещение,
			|	ЭлектронныйДокументВходящийЭДО.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
			|	ЭлектронныйДокументВходящийЭДО.ОбменБезПодписи КАК ОбменБезПодписи,
			|	ЭлектронныйДокументВходящийЭДО.СпособОбмена КАК СпособОбмена,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная) КАК ВидПодписи,
			|	ЭлектронныйДокументВходящийЭДО.Остановлен КАК Остановлен,
			|	ЭлектронныйДокументВходящийЭДО.ПричинаОстановки КАК ПричинаОстановки,
			|	ЭлектронныйДокументВходящийЭДО.Исправлен КАК Исправлен,
			|	ЭлектронныйДокументВходящийЭДО.НаОзнакомлении КАК НаОзнакомлении,
			|	ЭлектронныйДокументВходящийЭДО.Ответственный КАК Ответственный
			|ИЗ
			|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
			|ГДЕ
			|	ЭлектронныйДокументВходящийЭДО.Ссылка = &ЭлектронныйДокумент");
	Иначе
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	ЭлектронныйДокументИсходящийЭДО.Ссылка КАК Ссылка,
			|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента КАК ВидДокумента,
			|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента.ТипДокумента КАК ТипДокумента,
			|	ЭлектронныйДокументИсходящийЭДО.Организация КАК Организация,
			|	ЭлектронныйДокументИсходящийЭДО.Контрагент КАК Контрагент,
			|	ЭлектронныйДокументИсходящийЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента,
			|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
			|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
			|	ЭлектронныйДокументИсходящийЭДО.ТипРегламента КАК ТипРегламента,
			|	ЭлектронныйДокументИсходящийЭДО.ТребуетсяИзвещение КАК ТребуетсяИзвещение,
			|	ЭлектронныйДокументИсходящийЭДО.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
			|	ЭлектронныйДокументИсходящийЭДО.ОбменБезПодписи КАК ОбменБезПодписи,
			|	ЭлектронныйДокументИсходящийЭДО.СпособОбмена КАК СпособОбмена,
			|	ЭлектронныйДокументИсходящийЭДО.ВидПодписи КАК ВидПодписи,
			|	ЭлектронныйДокументИсходящийЭДО.Остановлен КАК Остановлен,
			|	ЭлектронныйДокументИсходящийЭДО.ПричинаОстановки КАК ПричинаОстановки,
			|	ЭлектронныйДокументИсходящийЭДО.Исправлен КАК Исправлен,
			|	ЭлектронныйДокументИсходящийЭДО.НаОзнакомлении КАК НаОзнакомлении,
			|	ЭлектронныйДокументИсходящийЭДО.Ответственный КАК Ответственный
			|ИЗ
			|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
			|ГДЕ
			|	ЭлектронныйДокументИсходящийЭДО.Ссылка = &ЭлектронныйДокумент");
	КонецЕсли;
	
	ТекстыЗапросов.Добавить(ТекстЗапросаСостоянияСообщений());
	
	Возврат СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаПараметровОбновленияСостоянияПоИдентификатору()
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК Ссылка,
		|	ЭлектронныйДокументВходящийЭДО.Дата КАК Дата,
		|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация,
		|	ЭлектронныйДокументВходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументВходящийЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ЭлектронныйДокументВходящийЭДО.ТипРегламента КАК ТипРегламента,
		|	ЭлектронныйДокументВходящийЭДО.ТребуетсяИзвещение КАК ТребуетсяИзвещение,
		|	ЭлектронныйДокументВходящийЭДО.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	ЭлектронныйДокументВходящийЭДО.ОбменБезПодписи КАК ОбменБезПодписи,
		|	ЭлектронныйДокументВходящийЭДО.СпособОбмена КАК СпособОбмена,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная) КАК ВидПодписи,
		|	ЭлектронныйДокументВходящийЭДО.Остановлен КАК Остановлен,
		|	ЭлектронныйДокументВходящийЭДО.ПричинаОстановки КАК ПричинаОстановки,
		|	ЭлектронныйДокументВходящийЭДО.Исправлен КАК Исправлен,
		|	ЭлектронныйДокументВходящийЭДО.НаОзнакомлении КАК НаОзнакомлении,
		|	ЭлектронныйДокументВходящийЭДО.Ответственный КАК Ответственный,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента КАК ВидДокумента,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента.ТипДокумента КАК ТипДокумента,
		|	ЕСТЬNULL(СостоянияДокументовЭДО.Комментарий, """") КАК КомментарийСостояния
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|		ПО (СостоянияДокументовЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка)
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокументооборота = &ИдентификаторДокументооборота
		|	И ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота,
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка КАК Ссылка,
		|	ЭлектронныйДокументИсходящийЭДО.Дата КАК Дата,
		|	ЭлектронныйДокументИсходящийЭДО.Организация КАК Организация,
		|	ЭлектронныйДокументИсходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументИсходящийЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ЭлектронныйДокументИсходящийЭДО.ТипРегламента КАК ТипРегламента,
		|	ЭлектронныйДокументИсходящийЭДО.ТребуетсяИзвещение КАК ТребуетсяИзвещение,
		|	ЭлектронныйДокументИсходящийЭДО.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	ЭлектронныйДокументИсходящийЭДО.ОбменБезПодписи КАК ОбменБезПодписи,
		|	ЭлектронныйДокументИсходящийЭДО.СпособОбмена КАК СпособОбмена,
		|	ЭлектронныйДокументИсходящийЭДО.ВидПодписи КАК ВидПодписи,
		|	ЭлектронныйДокументИсходящийЭДО.Остановлен КАК Остановлен,
		|	ЭлектронныйДокументИсходящийЭДО.ПричинаОстановки КАК ПричинаОстановки,
		|	ЭлектронныйДокументИсходящийЭДО.Исправлен КАК Исправлен,
		|	ЭлектронныйДокументИсходящийЭДО.НаОзнакомлении КАК НаОзнакомлении,
		|	ЭлектронныйДокументИсходящийЭДО.Ответственный КАК Ответственный,
		|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента КАК ВидДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента.ТипДокумента КАК ТипДокумента,
		|	ЕСТЬNULL(СостоянияДокументовЭДО.Комментарий, """") КАК КомментарийСостояния
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|		ПО (СостоянияДокументовЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка)
		|ГДЕ
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокументооборота = &ИдентификаторДокументооборота
		|	И ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.Дата КАК Дата,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.Состояние КАК Состояние,
		|	СообщениеЭДО.Статус КАК Статус,
		|	СообщениеЭДО.Направление КАК Направление
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|		И ЭлектронныйДокументВходящийЭДО.ИдентификаторДокументооборота = &ИдентификаторДокументооборота
		|		И ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.Дата КАК Дата,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.Состояние КАК Состояние,
		|	СообщениеЭДО.Статус КАК Статус,
		|	СообщениеЭДО.Направление КАК Направление
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка
		|		И ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокументооборота = &ИдентификаторДокументооборота
		|		И ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации";
	Возврат ТекстЗапроса;
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаПараметровСостоянияДокумента()
	Возврат
		"ВЫБРАТЬ
		|	СостоянияДокументовЭДО.Состояние КАК Состояние,
		|	СостоянияДокументовЭДО.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|ГДЕ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент";
КонецФункции

// Параметры:
//  РезультатЗапроса - РезультатЗапроса
// 
// Возвращаемое значение:
//  Строка
Функция КомментарийКСостояниюДокумента(РезультатЗапроса)
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Комментарий;
	КонецЕсли;
	Возврат ""
КонецФункции

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * Значение - Строка
Функция НовыеДополненияСостоянийЭДО()
	Возврат Новый Соответствие;
КонецФункции

// Параметры:
//  СвойстваДокумента - Структура:
//  * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  * ОсновнойФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ВидПодписи - ПеречислениеСсылка.ВидыЭлектронныхПодписей
//  ВесМаршрута - Число
// 
// Возвращаемое значение:
//  См. НовыеДополненияСостоянийЭДО
Функция ДополненияСостоянийЭДОПриПодписании(СвойстваДокумента, ВидПодписи, ВесМаршрута) Экспорт
	
	ДополненияСостоянийЭДО = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(ВесМаршрута) Тогда
		Возврат ДополненияСостоянийЭДО;
	КонецЕсли;
	
	Если СвойстваДокумента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
		ИЛИ СвойстваДокумента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя Тогда
		
		Подписи = УстановленныеПодписиФайла(СвойстваДокумента.ОсновнойФайл);
		ПрогрессПодписания = СтрШаблон("%1 / %2", Подписи.Количество(), ВесМаршрута);
		ДополненияСостоянийЭДО.Вставить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание, ПрогрессПодписания);
		
	КонецЕсли;
	
	Возврат ДополненияСостоянийЭДО;
	
КонецФункции

// Параметры:
//  ДополненияСостоянийЭДО - См. НовыеДополненияСостоянийЭДО
//  СостояниеДокумента - ПеречислениеСсылка.СостоянияДокументовЭДО
// 
// Возвращаемое значение:
//  Строка
Функция ДополнениеСостоянияЭДО(ДополненияСостоянийЭДО, СостояниеДокумента)
	
	Если Не ЗначениеЗаполнено(ДополненияСостоянийЭДО) Тогда
		Возврат "";
	КонецЕсли;
	
	Дополнение = ДополненияСостоянийЭДО[СостояниеДокумента];
	Если Дополнение = Неопределено Тогда
		Дополнение = "";
	КонецЕсли;
	
	Возврат Дополнение;
	
КонецФункции

// Параметры:
//  ДокументОбъект - ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
//  СостоянияЭлементовРегламента - См. ОбновитьСостояниеДокумента.СостоянияЭлементовРегламента
//  ДатаИзменения - См. ОбновитьСостояниеДокумента.ДатаИзменения
//  НаборОбъектовУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  КонтекстДиагностики - См. ОбновитьСостояниеДокумента.КонтекстДиагностики
//  ДополненияСостоянийЭДО - См. ОбновитьСостояниеДокумента.ДополненияСостоянийЭДО
// 
// Возвращаемое значение:
//  См. ОбновитьСостояниеДокумента
Функция УстановитьСостояниеДокументаПриФормировании(ДокументОбъект, СостоянияЭлементовРегламента, ДатаИзменения, НаборОбъектовУчета, КонтекстДиагностики, ДополненияСостоянийЭДО = Неопределено) Экспорт
	
	СостояниеДокумента = ОбновитьСостояниеДокумента(ДокументОбъект, СостоянияЭлементовРегламента,
		ДополненияСостоянийЭДО, ДатаИзменения, КонтекстДиагностики);
	
	ЭлектронныеДокументыЭДОСобытия.ПриФормированииЭлектронногоДокумента(ДокументОбъект.Ссылка,
		СостояниеДокумента, НаборОбъектовУчета, КонтекстДиагностики);
	
	Возврат СостояниеДокумента;
	
КонецФункции

// Параметры:
//  ПараметрыДокумента - См. ОбновитьСостояниеДокумента.ПараметрыДокумента
//  СостоянияЭлементовРегламента - См. ОбновитьСостояниеДокумента.СостоянияЭлементовРегламента
//  ДатаИзменения - См. ОбновитьСостояниеДокумента.ДатаИзменения
//  КонтекстДиагностики - См. ОбновитьСостояниеДокумента.КонтекстДиагностики
//  ДополненияСостоянийЭДО - См. ОбновитьСостояниеДокумента.ДополненияСостоянийЭДО
//  Комментарий - См. ОбновитьСостояниеДокумента.Комментарий
// 
// Возвращаемое значение:
//  См. ОбновитьСостояниеДокумента
Функция УстановитьСостояниеДокументаПриИзменении(ПараметрыДокумента, СостоянияЭлементовРегламента, ДатаИзменения, КонтекстДиагностики, ДополненияСостоянийЭДО = Неопределено, Комментарий = "")
	
	СостояниеДокумента = ОбновитьСостояниеДокумента(ПараметрыДокумента, СостоянияЭлементовРегламента,
		ДополненияСостоянийЭДО, ДатаИзменения, КонтекстДиагностики, Комментарий);
	
	ЭлектронныеДокументыЭДОСобытия.ПриИзмененииСостоянияЭлектронногоДокумента(ПараметрыДокумента.Ссылка, СостояниеДокумента,
		КонтекстДиагностики);
	
	Возврат СостояниеДокумента;
	
КонецФункции

// Параметры:
//  ПараметрыДокумента - Структура:
//  * ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО - Тип регламента ЭДО.
//  * СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД - Способ обмена электронными документами.
//  * ОбменБезПодписи - Булево - Обмен без подписи (прямой обмен).
//  * ТребуетсяПодтверждение - Булево - Необходимость формирования ответного титула или ответной подписи.
//  * ТребуетсяИзвещение - Булево - необходимость формирования извещения о получении.
//  * Остановлен - Булево - признак остановленного документа.
//  * ПричинаОстановки - ПеречислениеСсылка.ПричиныОстановкиЭДО - причина остановки документа.
//  * Исправлен - Булево - признак того, что создан документ исправление.
//  * ИдентификаторОрганизации - Строка
//  СостоянияЭлементовРегламента - См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
//  ДополненияСостоянийЭДО - См. НовыеДополненияСостоянийЭДО
//  ДатаИзменения - Дата
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  Комментарий - Строка
// 
// Возвращаемое значение:
//  См. РегламентыЭДО.СостояниеДокумента
Функция ОбновитьСостояниеДокумента(ПараметрыДокумента, СостоянияЭлементовРегламента, ДополненияСостоянийЭДО, ДатаИзменения, КонтекстДиагностики, Комментарий = "")
	
	ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ПараметрыДокумента.Ссылка); 
	
	СостояниеДокумента = РегламентыЭДО.СостояниеДокумента(ПараметрыДокумента,
		СостоянияЭлементовРегламента, ЭтоВходящийЭДО);
	
	ДополнительныеПараметры = РегистрыСведений.СостоянияДокументовЭДО.НовыеДополнительныеПараметрыУстановкиСостояния();
	ДополнительныеПараметры.СостояниеДополнение = ДополнениеСостоянияЭДО(ДополненияСостоянийЭДО, СостояниеДокумента);
	ДополнительныеПараметры.ДатаИзменения = ДатаИзменения;
	ДополнительныеПараметры.Комментарий = Комментарий;
	ДополнительныеПараметры.ИдентификаторОрганизации = ПараметрыДокумента.ИдентификаторОрганизации;
	ДополнительныеПараметры.ИдентификаторДокумента = ПараметрыДокумента.ИдентификаторДокумента;
	
	РегистрыСведений.СостоянияДокументовЭДО.УстановитьСостояние(ПараметрыДокумента.Ссылка, СостояниеДокумента,
		ДополнительныеПараметры);
	
	Возврат СостояниеДокумента;
	
КонецФункции

// Параметры:
//  НаборДокументов - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Значение - ПеречислениеСсылка.СостоянияДокументовЭДО
Функция СостоянияПоДокументам(НаборДокументов)
	Результат = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент,
		|	СостоянияДокументовЭДО.Состояние
		|ИЗ
		|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|ГДЕ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент В (&НаборДокументов)";
	Запрос.УстановитьПараметр("НаборДокументов", НаборДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ЭлектронныйДокумент, Выборка.Состояние);
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаНабораСостоянийДокументов()
	Возврат 
		"ВЫБРАТЬ
		|	СостоянияДокументовЭДО.Состояние
		|ИЗ
		|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|ГДЕ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент В (&ЭлектронныеДокументы)";
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СостоянияДокументовЭДО
Функция НаборСостоянийДокументов(ЭлектронныеДокументы)
	Запрос = Новый Запрос(ТекстЗапросаНабораСостоянийДокументов());
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Состояние")
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаСостоянияДокумента() Экспорт
	Возврат
		"ВЫБРАТЬ
		|	СостоянияДокументовЭДО.Состояние,
		|	СостоянияДокументовЭДО.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|ГДЕ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент";
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаСостоянийДокументов() Экспорт
	Возврат
		"ВЫБРАТЬ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СостоянияДокументовЭДО.Состояние КАК Состояние,
		|	СостоянияДокументовЭДО.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|ГДЕ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент В (&ЭлектронныеДокументы)";
КонецФункции

#КонецОбласти

#Область ДействияПоСостояниюДокумента

// Параметры:
//  СостояниеДокумента - ПеречислениеСсылка.СостоянияДокументовЭДО
//  СвойстваДокумента - См. ЭлектронныеДокументыЭДО.НовыеСвойстваДокументаДляОпределенияДоступныхДействийПоЭДО
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ПеречислениеСсылка.ДействияПоЭДО
//  * Значение - Булево
Функция ДоступныеДействияПоЭДО(СостояниеДокумента, СвойстваДокумента) Экспорт
	
	Действия = Новый Соответствие;
	
	Если СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.НеСформирован Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Сформировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание Тогда
		
		Если ДействиеПодписатьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
			Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
			Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
				Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
			КонецЕсли;
			Действия.Вставить(Перечисления.ДействияПоЭДО.ОтклонитьПодписание, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(СвойстваДокумента.Ссылка) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
			Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьОтвет, Истина);
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отклонить, Истина);
		КонецЕсли;
		Если ЭлектронныеДокументыЭДО.ЭтоВнутреннийВидДокумента(СвойстваДокумента.ВидДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
		КонецЕсли;
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаПриглашения Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка Тогда
		
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Утвердить, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отклонить, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьОтвет, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения Тогда
		
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПринятьАннулирование, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.ОтклонитьАннулирование, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования Тогда
		
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьИзвещение, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения Тогда
		
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеПоОтклонению Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьИзвещение, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещенияПоОтклонению Тогда
		
		Если ДействиеОтправитьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
		КонецЕсли;
		Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьИсправление, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьИсправление, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПовторнаяОтправка Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.ВернутьВРаботу, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
	
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		Если ДействиеЗакрытьДоступно(СвойстваДокумента) Тогда
			Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
		КонецЕсли;
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.ВернутьВРаботу, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.Аннулирован Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
		
	КонецЕсли;
	
	Если СвойстваДокумента.НаОзнакомлении Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.ОтправитьВАрхив, Истина);
		
	КонецЕсли;
	
	Если НЕ ДействиеАннулироватьДоступно(СвойстваДокумента) Тогда
		Действия.Удалить(Перечисления.ДействияПоЭДО.Аннулировать);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		МодульЭлектронноеАктированиеЕИС.ПриОпределенииДоступныхДействийПоЭДО(
			Действия, СостояниеДокумента, СвойстваДокумента);
	КонецЕсли;
	
	Возврат Действия;
	
КонецФункции

// Параметры:
//  СвойстваДокумента - См. ДоступныеДействияПоЭДО.СвойстваДокумента
// 
// Возвращаемое значение:
//  Булево
Функция ДействиеАннулироватьДоступно(СвойстваДокумента)
	
	ВидДокумента = СвойстваДокумента.ВидДокумента;
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "ТипДокумента");
		Возврат ТипДокумента <> Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Параметры:
//  СвойстваДокумента - См. ЭлектронныеДокументыЭДО.НовыеСвойстваДокументаДляОпределенияДоступныхДействийПоЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ДействиеПодписатьДоступно(СвойстваДокумента)
	
	Если ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(СвойстваДокумента.Ссылка)
		Или СвойстваДокумента.ЭтоОблачныйЭДО Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОписанияЗапросов = Новый Массив;
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = 
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ СообщенияДляОбработки
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ОтборЭлектронныйДокумент
		|	И СообщениеЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенийЭДО.Подписание)
		|	И СообщениеЭДО.ТипЭлементаРегламента В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя))";
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ОтборЭлектронныйДокумент", СвойстваДокумента.Ссылка);
	ОписанияЗапросов.Добавить(ОписаниеЗапроса);
	
	Отбор = МаршрутыПодписанияБЭД.НовыйОтборОбъектовДляПодписания();
	Отбор.Объект = "ВЫБРАТЬ Ссылка ИЗ СообщенияДляОбработки";
	ОписанияЗапросов.Добавить(МаршрутыПодписанияБЭД.ЗапросОбъектовДляПодписания("ОбъектыДляПодписания", Отбор));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыДляПодписания.Объект
		|ИЗ
		|	ОбъектыДляПодписания";
	
	Запрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, ОписанияЗапросов);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Параметры:
//  СвойстваДокумента - См. ДоступныеДействияПоЭДО.СвойстваДокумента
// 
// Возвращаемое значение:
//  Булево
Функция ДействиеОтправитьДоступно(СвойстваДокумента)
	Возврат Не СинхронизацияЭДО.ЭтоВнутреннийОбмен(СвойстваДокумента.СпособОбмена)
КонецФункции

// Параметры:
//  СвойстваДокумента - См. ДоступныеДействияПоЭДО.СвойстваДокумента
// 
// Возвращаемое значение:
//  Булево
Функция ДействиеЗакрытьДоступно(СвойстваДокумента)
	Возврат Не СинхронизацияЭДО.ЭтоВнутреннийОбмен(СвойстваДокумента.СпособОбмена);
КонецФункции

// Параметры:
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
//  СостояниеДокумента - См. ДоступныеДействияПоЭДО.СостояниеДокумента
//  СвойстваДокумента - См. ДоступныеДействияПоЭДО.СвойстваДокумента
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Булево
Функция ДействиеДоступно(Действие, СостояниеДокумента, СвойстваДокумента, КонтекстДиагностики)
	Возврат Действие = Перечисления.ДействияПоЭДО.Загрузить
		ИЛИ ДоступныеДействияПоЭДО(СостояниеДокумента, СвойстваДокумента)[Действие] <> Неопределено;
КонецФункции

#КонецОбласти

#Область СостояниеСообщения

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаСостоянияСообщений() Экспорт
	Возврат
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.Дата КАК Дата,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.Состояние КАК Состояние,
		|	СообщениеЭДО.Статус КАК Статус,
		|	СообщениеЭДО.Направление КАК Направление
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент";
КонецФункции

// Параметры:
//  СостоянияСообщений - См. СостоянияСообщений
//  ДатаИзмененияСтатуса - Дата
Процедура УстановитьСостояниеХранение(СостоянияСообщений, ДатаИзмененияСтатуса)
	
	Для Каждого СвойстваСообщения Из СостоянияСообщений Цикл
		
		Если СвойстваСообщения.Состояние = Перечисления.СостоянияСообщенийЭДО.Хранение Тогда
			Продолжить;
		КонецЕсли;
		
		СообщениеОбъект = СвойстваСообщения.Ссылка.ПолучитьОбъект();
		СообщениеОбъект.Состояние = Перечисления.СостоянияСообщенийЭДО.Хранение;
		СообщениеОбъект.ДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
		СообщениеОбъект.Записать();
		СвойстваСообщения.Состояние = СообщениеОбъект.Состояние;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  СостоянияСообщений - См. СостоянияСообщений
//  ПараметрыДокумента - См. РегламентыЭДО.СостояниеСообщения.ПараметрыДокумента
Процедура ПересчитатьСостоянияСообщений(СостоянияСообщений, ПараметрыДокумента)
	ИспользоватьУтверждение = НастройкиЭДО.ОтправлятьВходящиеДокументыНаУтверждение();
	Для Каждого СвойстваСообщения Из СостоянияСообщений Цикл
		СообщениеОбъект = СвойстваСообщения.Ссылка.ПолучитьОбъект();
		СообщениеОбъект.Состояние = РегламентыЭДО.СостояниеСообщения(
			СвойстваСообщения, ПараметрыДокумента, ИспользоватьУтверждение);
		СообщениеОбъект.Записать();
		СвойстваСообщения.Состояние = СообщениеОбъект.Состояние;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОписаниеСообщения

// Возвращает пустое описание сообщения.
// 
// Возвращаемое значение:
//  Структура:
//  * ВидСообщения - СправочникСсылка.ВидыДокументовЭДО
//  * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  * ДополнительнаяИнформация - Строка - сопроводительная записка к сообщению.
//  * Данные - См. ФорматыЭДО.НовыйРезультатФормированияДокументаПоУчету
//  * УстановленныеПодписи - Массив из см. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  * Ссылка - ДокументСсылка.СообщениеЭДО - ссылка на сообщение
//
Функция НовоеОписаниеСообщения() Экспорт
	ОписаниеСообщения = Новый Структура;
	ОписаниеСообщения.Вставить("ВидСообщения", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	ОписаниеСообщения.Вставить("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка());
	ОписаниеСообщения.Вставить("Направление", Перечисления.НаправленияЭДО.ПустаяСсылка());
	ОписаниеСообщения.Вставить("ДополнительнаяИнформация", "");
	ОписаниеСообщения.Вставить("Данные", ФорматыЭДО.НовыйРезультатФормированияДокументаПоУчету());
	ОписаниеСообщения.Вставить("УстановленныеПодписи", Новый Массив);
	ОписаниеСообщения.Вставить("Ссылка", Документы.СообщениеЭДО.ПустаяСсылка());
	Возврат ОписаниеСообщения;
КонецФункции

// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ДанныеОбъектаУчета - См. ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента
//  НастройкиОтправки - См. НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки
//  ЗначенияДополнительныхПолей - Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * Значение - Произвольный
// 
// Возвращаемое значение:
//  См. НовоеОписаниеСообщения
Функция ОписаниеСообщенияОтправителя(ОбъектУчета, ДанныеОбъектаУчета, НастройкиОтправки, ЗначенияДополнительныхПолей = Неопределено) Экспорт
	
	ЭтоИнтеркампани = СинхронизацияЭДО.ЭтоИнтеркампани(НастройкиОтправки.СпособОбмена);
	
	ЭтоЭлектронноеАктированиеЕИС = Ложь;
	МодульЭлектронноеАктированиеЕИС = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		Если МодульЭлектронноеАктированиеЕИС.ЭтоОбменЧерезСерверЕИС(НастройкиОтправки.СпособОбмена) Тогда
			ЭтоЭлектронноеАктированиеЕИС = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		ОписаниеВидаДокумента = ЭлектронныеДокументыЭДО.ОписаниеВидаДокумента(НастройкиОтправки.ВидДокумента);
		Если МодульОбменСГИСЭПД.ЭтоДокументЭПД(ОписаниеВидаДокумента.ТипДокумента) Тогда
			Возврат МодульОбменСГИСЭПД.ОписаниеСообщенияОтправителя(ОбъектУчета, НастройкиОтправки);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДляФормирования = ФорматыЭДО.НовыеДанныеДляФормированияОсновногоТитула();
	
	ДанныеДляФормирования.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	ДанныеДляФормирования.ДанныеДокумента = ДанныеОбъектаУчета;
	ДанныеДляФормирования.ЗначенияДополнительныхПолей = ЗначенияДополнительныхПолей;
	
	Если ДанныеДляФормирования.Свойство("Участники") Тогда
		
		ДанныеДляФормирования.Участники.ИдентификаторОтправителя = НастройкиОтправки.ИдентификаторОтправителя;
		ДанныеДляФормирования.Участники.ИдентификаторПолучателя = НастройкиОтправки.ИдентификаторПолучателя;
		
		Если ЭтоЭлектронноеАктированиеЕИС Тогда
			
			СведенияОбОператоре = МодульЭлектронноеАктированиеЕИС.ОператорЭДОФедеральногоКазначейства();
			ДанныеДляФормирования.Участники.Оператор.Наименование = СведенияОбОператоре.Наименование;
			ДанныеДляФормирования.Участники.Оператор.ИНН = СведенияОбОператоре.ИНН;
			ДанныеДляФормирования.Участники.Оператор.Идентификатор = СведенияОбОператоре.Идентификатор;
			
		Иначе
			
			Если Не ЭтоИнтеркампани И ДанныеДляФормирования.Участники.Свойство("Оператор") Тогда
				
				СведенияОбОператоре = СинхронизацияЭДО.СведенияОбОператоре(НастройкиОтправки.ИдентификаторОтправителя);
				ДанныеДляФормирования.Участники.Оператор.Наименование = СведенияОбОператоре.Наименование;
				ДанныеДляФормирования.Участники.Оператор.ИНН = СведенияОбОператоре.ИНН;
				ДанныеДляФормирования.Участники.Оператор.Идентификатор = СведенияОбОператоре.Идентификатор;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеВидаДокумента = ЭлектронныеДокументыЭДО.ОписаниеВидаДокумента(НастройкиОтправки.ВидДокумента);
	
	НастройкиФормирования = ФорматыЭДО.НовыеНастройкиФормированияДокументаПоОбъектуУчета();
	НастройкиФормирования.ТипДокумента = ОписаниеВидаДокумента.ТипДокумента;
	НастройкиФормирования.Формат = НастройкиОтправки.Формат;
	НастройкиФормирования.Организация = НастройкиОтправки.Отправитель;
	НастройкиФормирования.Контрагент = НастройкиОтправки.Получатель;
	НастройкиФормирования.Договор = НастройкиОтправки.Договор;
	
	ДанныеСообщения = ФорматыЭДО.СформироватьДанныеОсновногоТитулаПоОбъектуУчета(ОбъектУчета,
		НастройкиФормирования, ДанныеДляФормирования);
	
	ОписаниеСообщения = НовоеОписаниеСообщения();
	ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	ОписаниеСообщения.ВидСообщения = НастройкиОтправки.ВидДокумента;
	ОписаниеСообщения.Направление = ?(ЭтоИнтеркампани, Перечисления.НаправленияЭДО.Интеркампани,
		Перечисления.НаправленияЭДО.Исходящий);
	ОписаниеСообщения.Данные = ДанныеСообщения;
	
	Возврат ОписаниеСообщения;
	
КонецФункции

// Возвращает массив, содержащий описания дополнительных сообщений.
// 
// Параметры:
//  ОбъектУчета - ДокументСсылка
//  ДанныеОбъектаУчета - См. ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента
//  НастройкиОтправки - см. НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки
//  ПараметрыФормирования - см. ИнтеграцияЭДО.НовыеПараметрыФормированияДанныхОбъектаУчета
// 
// Возвращаемое значение:
//  Массив из см. НовоеОписаниеСообщения
Функция ОписанияДополнительныхСообщений(ОбъектУчета, ДанныеОбъектаУчета, НастройкиОтправки, ПараметрыФормирования) Экспорт
	
	ОписанияСообщений = Новый Массив;
	
	Если ПараметрыФормирования.ТипДокумента = Перечисления.ТипыДокументовЭДО.АктОРасхождениях Тогда
		ОписаниеСообщения = ОписаниеДополнительногоСообщенияАктОРасхождениях(ДанныеОбъектаУчета, НастройкиОтправки);
		Если ЗначениеЗаполнено(ОписаниеСообщения) Тогда
			ОписанияСообщений.Добавить(ОписаниеСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписанияСообщений;
	
КонецФункции

// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  НастройкиОтправки - См. НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки
//  ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО
// 
// Возвращаемое значение:
//  См. НовоеОписаниеСообщения
Функция ОписаниеСообщенияОтправителяПрикладногоДокумента(ОбъектУчета, НастройкиОтправки, ПрикладнойТипДокумента) Экспорт
	
	Данные = ФорматыЭДО.НовыеДанныеДляФормированияПрикладногоДокумента();	
	
	Данные.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	Данные.ИдентификаторОтправителя = НастройкиОтправки.ИдентификаторОтправителя;
	Данные.ИдентификаторПолучателя = НастройкиОтправки.ИдентификаторПолучателя;
	Данные.ПрикладнойТипДокумента = ПрикладнойТипДокумента;
	
	ДанныеСообщения = ФорматыЭДО.СформироватьДанныеПрикладногоДокумента(
		ОбъектУчета, Данные);
	
	ОписаниеСообщения = НовоеОписаниеСообщения();
	ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	ОписаниеСообщения.ВидСообщения = НастройкиОтправки.ВидДокумента;
	ОписаниеСообщения.Направление = Перечисления.НаправленияЭДО.Исходящий;
	ОписаниеСообщения.Данные = ДанныеСообщения;
	
	Возврат ОписаниеСообщения;
	
КонецФункции

// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  НастройкиВнутреннегоЭДО - Структура,ВыборкаИзРезультатаЗапроса:
//  * Организация - ОпределяемыйТип.Организация
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
// 
// Возвращаемое значение:
//  См. НовоеОписаниеСообщения
Функция ОписаниеСообщенияВнутреннегоЭДО(ОбъектУчета, НастройкиВнутреннегоЭДО) Экспорт
	
	ОписаниеСообщения = НовоеОписаниеСообщения();
	ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	ОписаниеСообщения.Направление = Перечисления.НаправленияЭДО.Внутренний;
	ОписаниеСообщения.ВидСообщения = НастройкиВнутреннегоЭДО.ВидДокумента;
	ОписаниеСообщения.Данные = ВнутренниеДокументыЭДО.СформироватьДанныеВнутреннегоДокумента(
		ОбъектУчета, НастройкиВнутреннегоЭДО);
	
	Возврат ОписаниеСообщения;
	
КонецФункции

// Возвращает описание сообщения отправителя произвольного формата.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  НастройкиОтправки - См. НастройкиЭДО.НастройкиОтправки
//  ОписаниеФайлаДанных - См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
// 
// Возвращаемое значение:
//  См. НовоеОписаниеСообщения
Функция ОписаниеСообщенияОтправителяПроизвольногоФормата(ОбъектУчета, НастройкиОтправки, ОписаниеФайлаДанных)
	
	ЭтоИнтеркампани = СинхронизацияЭДО.ЭтоИнтеркампани(НастройкиОтправки.СпособОбмена);
	
	ОписаниеСообщения = НовоеОписаниеСообщения();
	ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	ОписаниеСообщения.ВидСообщения = НастройкиОтправки.ВидДокумента;
	ОписаниеСообщения.Направление = ?(ЭтоИнтеркампани, Перечисления.НаправленияЭДО.Интеркампани,
		Перечисления.НаправленияЭДО.Исходящий);
	ОписаниеСообщения.Данные = ФорматыЭДО.НовыйРезультатФормированияДокументаПоУчету();
	ОписаниеСообщения.Данные.Документ = ОписаниеФайлаДанных;
	
	ОписаниеВидаДокумента = ЭлектронныеДокументыЭДО.ОписаниеВидаДокумента(НастройкиОтправки.ВидДокумента);
	ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОснованияЭлектронногоДокумента(ОбъектУчета);
	
	Содержание = ФорматыЭДО.НовоеОписаниеФайлаДокумента();
	ОписаниеСообщения.Данные.Содержание = Содержание;
	
	Содержание.ИдентификаторДокумента =  Строка(Новый УникальныйИдентификатор);
	Содержание.ТипДокумента = ОписаниеВидаДокумента.ТипДокумента; 
	Содержание.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный;
	Содержание.НомерДокумента = ИнтеграцияБСПБЭД.ПредставлениеНомераОбъектаУчета(ОписаниеОбъектаУчета.Номер);
	Содержание.ДатаДокумента  = ОписаниеОбъектаУчета.Дата;
	Содержание.СуммаДокумента = ОписаниеОбъектаУчета.СуммаДокумента;
	
	Возврат ОписаниеСообщения;
	
КонецФункции

// Параметры:
//  ДанныеОбъектаУчета - ДеревоЗначений
//  ПараметрыДокумента - ВыборкаИзРезультатаЗапроса,Структура:
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторКонтрагента - Строка
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  СвойстваОсновногоФайла - см. НовыеСвойстваОсновногоФайлаДляФормированияОтветного
//  Формат - Строка
// 
// Возвращаемое значение:
//  См. НовоеОписаниеСообщения
Функция ОписаниеСообщенияПолучателя(ДанныеОбъектаУчета, ПараметрыДокумента, СвойстваОсновногоФайла, Формат)
	
	ФорматыЭДО_ФНС.ДополнитьДанныеОбъектаУчетаСведениямиФайла(ДанныеОбъектаУчета, СвойстваОсновногоФайла.Ссылка, Формат);
	
	ДанныеДляФормирования = ФорматыЭДО.НовыеДанныеДляФормированияОтветногоТитула();
	ДанныеДляФормирования.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	ДанныеДляФормирования.ДанныеДокумента = ДанныеОбъектаУчета;
	ДанныеДляФормирования.Участники.ИдентификаторОтправителя = ПараметрыДокумента.ИдентификаторОрганизации;
	ДанныеДляФормирования.Участники.ИдентификаторПолучателя = ПараметрыДокумента.ИдентификаторКонтрагента;
	ДанныеДляФормирования.Участники.Оператор = СинхронизацияЭДО.СведенияОбОператоре(
		ПараметрыДокумента.ИдентификаторОрганизации);
	Файл = Новый Файл(СвойстваОсновногоФайла.ИмяФайла);
	ДанныеДляФормирования.Основание.ИмяБезРасширения = Файл.ИмяБезРасширения;
	ДанныеДляФормирования.Основание.ДвоичныеДанные = СвойстваОсновногоФайла.ДвоичныеДанные;
	
	Подписи = ЭлектроннаяПодпись.УстановленныеПодписи(СвойстваОсновногоФайла.Ссылка);
	
	Если ЗначениеЗаполнено(Подписи) Тогда
		Для Каждого СвойстваПодписи Из Подписи Цикл
			ПодписьСтрокой = КриптографияБЭД.ДанныеПодписиВСтрокуБезПереносов(СвойстваПодписи.Подпись);
			ДанныеДляФормирования.ПодписиОснования.Добавить(ПодписьСтрокой);
		КонецЦикла;
	КонецЕсли;
	ДанныеСообщения = ФорматыЭДО.СформироватьДанныеОтветногоТитула(Формат, ДанныеДляФормирования);
	
	ОписаниеСообщения = НовоеОписаниеСообщения();
	ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя;
	ОписаниеСообщения.ВидСообщения = ПараметрыДокумента.ВидДокумента;
	ОписаниеСообщения.Направление = Перечисления.НаправленияЭДО.Исходящий;
	ОписаниеСообщения.Данные = ДанныеСообщения;
	
	Возврат ОписаниеСообщения;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Организация - Неопределено,ОпределяемыйТип.Организация
//  * Контрагент - Неопределено,ОпределяемыйТип.КонтрагентБЭД
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторКонтрагента - Строка
Функция НовыеДанныеУчастниковЭДО()
	ДанныеУчастниковЭДО = Новый Структура;
	ДанныеУчастниковЭДО.Вставить("Организация", Неопределено);
	ДанныеУчастниковЭДО.Вставить("Контрагент", Неопределено);
	ДанныеУчастниковЭДО.Вставить("ИдентификаторОрганизации", "");
	ДанныеУчастниковЭДО.Вставить("ИдентификаторКонтрагента", "");
	Возврат ДанныеУчастниковЭДО;
КонецФункции

// Параметры:
//  ДанныеУчастниковЭДО - См. НовыеДанныеУчастниковЭДО
//  СвойстваФайлаОснования - См. СвойстваФайлаОснованияСлужебногоДокумента
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  Комментарий - Строка
// 
// Возвращаемое значение:
//  См. НовоеОписаниеСообщения
Функция ОписаниеСлужебногоСообщения(ДанныеУчастниковЭДО, СвойстваФайлаОснования, ТипДокумента, ТипЭлементаРегламента, Комментарий = "")
	
	ДанныеДляФормирования = ФорматыЭДО.НовыеДанныеДляФормированияСлужебногоСообщения();
	ДанныеДляФормирования.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	ДанныеДляФормирования.ТекстУточнения = Комментарий;
	ДанныеДляФормирования.Участники.Отправитель.Идентификатор = ДанныеУчастниковЭДО.ИдентификаторОрганизации;
	ДанныеДляФормирования.Участники.Отправитель.Ссылка = ДанныеУчастниковЭДО.Организация;
	
	Если ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя_ПДП_ИОП
		ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИОП_ПДП_ИОП
		ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДО_ИОП
		ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДП_ИОП Тогда
		
		ДанныеДляФормирования.Участники.Получатель.Тип = "Оператор";
		ДанныеДляФормирования.Участники.Получатель.Оператор = СинхронизацияЭДО.СведенияОбОператоре(
			ДанныеУчастниковЭДО.ИдентификаторОрганизации);
		ДанныеДляФормирования.Участники.Получатель.Абонент.Идентификатор = ДанныеУчастниковЭДО.ИдентификаторКонтрагента;
	Иначе
		ДанныеДляФормирования.Участники.Получатель.Тип = "Абонент";
		ДанныеДляФормирования.Участники.Получатель.Абонент.Идентификатор = ДанныеУчастниковЭДО.ИдентификаторКонтрагента;
		ДанныеДляФормирования.Участники.Получатель.Абонент.Ссылка = ДанныеУчастниковЭДО.Контрагент;
	КонецЕсли;
	
	Файл = Новый Файл(СвойстваФайлаОснования.ПолноеИмяФайла);
	ДанныеДляФормирования.Основание.ИмяБезРасширения = Файл.ИмяБезРасширения;
	ДанныеДляФормирования.Основание.ДатаВремяПолучения = СвойстваФайлаОснования.ДатаСоздания;
	
	Подписи = ЭлектроннаяПодпись.УстановленныеПодписи(СвойстваФайлаОснования.Ссылка);
	
	Если ЗначениеЗаполнено(Подписи) Тогда
		Для Каждого СвойстваПодписи Из Подписи Цикл
			ПодписьСтрокой = КриптографияБЭД.ДанныеПодписиВСтрокуБезПереносов(СвойстваПодписи.Подпись);
			ДанныеДляФормирования.ПодписиОснования.Добавить(ПодписьСтрокой);
		КонецЦикла;
	КонецЕсли;
	
	ДанныеСообщения = ФорматыЭДО.СформироватьДанныеСлужебногоСообщения(ТипДокумента, ДанныеДляФормирования);
	
	ОписаниеСообщения = НовоеОписаниеСообщения();
	ОписаниеСообщения.ТипЭлементаРегламента = ТипЭлементаРегламента;
	ОписаниеСообщения.Направление = Перечисления.НаправленияЭДО.Исходящий;
	ОписаниеСообщения.Данные = ДанныеСообщения;
	
	ПараметрыПоиска = ЭлектронныеДокументыЭДО.НовыеПараметрыПоискаВидаДокумента(ТипДокумента);
	ОписаниеСообщения.ВидСообщения = ЭлектронныеДокументыЭДО.НайтиСоздатьВидДокумента(ПараметрыПоиска);
	
	Возврат ОписаниеСообщения;
	
КонецФункции

// Возвращает описание сообщения дополнительных сведений акта о расхождениях.
// 
// Параметры:
//  ДанныеОбъектаУчета - ДеревоЗначений
//  НастройкиОтправки - см. НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки
//  ЭлектронныйДокумент - Неопределено,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  ЭтоОтветноеСообщение - Булево
// 
// Возвращаемое значение:
//  - Неопределено - если дополнительные сведения не формируются.
//  - см. НовоеОписаниеСообщения
Функция ОписаниеДополнительногоСообщенияАктОРасхождениях(ДанныеОбъектаУчета, НастройкиОтправки,
	ЭлектронныйДокумент = Неопределено, ЭтоОтветноеСообщение = Ложь)

	ФормированиеДополнительныхСведений = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДанныеОбъектаУчета, "ФормированиеДополнительныхСведений");
	ВариантыФормированияИтоговПриемки = ФорматыЭДО.ВариантыФормированияИтоговПриемки();	
		
	Если ПустаяСтрока(ФормированиеДополнительныхСведений)
		Или ФормированиеДополнительныхСведений =
			ВариантыФормированияИтоговПриемки.НеФормируются
		Или ФормированиеДополнительныхСведений =
			ВариантыФормированияИтоговПриемки.ПеревозчикомФормируютсяДопСведенияОСогласииНесогласииСРезультатамиПриемки
		Или ФормированиеДополнительныхСведений =
			ВариантыФормированияИтоговПриемки.ПеревозчикомФормируютсяДопСведенияИные Тогда
		Возврат Неопределено;
	ИначеЕсли Не ЭтоОтветноеСообщение
		И (ФормированиеДополнительныхСведений =
				ВариантыФормированияИтоговПриемки.ПродавцомФормируютсяДопСведенияОСогласииНесогласииСРезультатамиПриемки
				Или ФормированиеДополнительныхСведений =
					ВариантыФормированияИтоговПриемки.ПродавцомФормируютсяДопСведенияИные) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоИнтеркампани = СинхронизацияЭДО.ЭтоИнтеркампани(НастройкиОтправки.СпособОбмена);
	ПоддерживаемыеФорматыФНС = ФорматыЭДО_ФНС.ПоддерживаемыеФорматы();
	
	ДанныеДляФормирования = ФорматыЭДО.НовыеДанныеДляФормированияОсновногоТитула();
	ДанныеДляФормирования.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	ДанныеДляФормирования.ДанныеДокумента = ДанныеОбъектаУчета;
			
	Если ДанныеДляФормирования.Свойство("Участники") Тогда
		
		ДанныеДляФормирования.Участники.ИдентификаторОтправителя = НастройкиОтправки.ИдентификаторОтправителя;
		ДанныеДляФормирования.Участники.ИдентификаторПолучателя = НастройкиОтправки.ИдентификаторПолучателя;
		
		Если Не ЭтоИнтеркампани И ДанныеДляФормирования.Участники.Свойство("Оператор") Тогда
			
			СведенияОбОператоре = СинхронизацияЭДО.СведенияОбОператоре(НастройкиОтправки.ИдентификаторОтправителя);
			ДанныеДляФормирования.Участники.Оператор.Наименование = СведенияОбОператоре.Наименование;
			ДанныеДляФормирования.Участники.Оператор.ИНН = СведенияОбОператоре.ИНН;
			ДанныеДляФормирования.Участники.Оператор.Идентификатор = СведенияОбОператоре.Идентификатор;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	НастройкиФормирования = ФорматыЭДО.НовыеНастройкиФормированияДокументаПоОбъектуУчета();
	НастройкиФормирования.ТипДокумента = Перечисления.ТипыДокументовЭДО.АктОРасхождениях;
	НастройкиФормирования.Формат = ПоддерживаемыеФорматыФНС.АктОРасхождениях.ДополнительныеСведения;
	НастройкиФормирования.Организация = НастройкиОтправки.Отправитель;
	НастройкиФормирования.Контрагент = НастройкиОтправки.Получатель;
	НастройкиФормирования.Договор = НастройкиОтправки.Договор;
	
	ДанныеСообщения = ФорматыЭДО.СформироватьДанныеДополнительногоТитулаПоДаннымОбъектаУчета(
		НастройкиФормирования, ДанныеДляФормирования);
	
	ОписаниеСообщения = НовоеОписаниеСообщения();
	ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки;
	ОписаниеСообщения.ВидСообщения = НастройкиОтправки.ВидДокумента;
	ОписаниеСообщения.Направление = ?(ЭтоИнтеркампани, Перечисления.НаправленияЭДО.Интеркампани,
		Перечисления.НаправленияЭДО.Исходящий);
	ОписаниеСообщения.Данные = ДанныеСообщения;
	
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		
		Отбор = ЭлектронныеДокументыЭДО.НовыйОтборСообщенийДокументов();
		Отбор.ТипыЭлементовРегламента.Добавить(
			Перечисления.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки);
			
		СообщенияДокумента = ЭлектронныеДокументыЭДО.СообщенияДокументовПоОтбору(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлектронныйДокумент), Отбор);
		Если Не ЗначениеЗаполнено(СообщенияДокумента) Тогда
			Возврат ОписаниеСообщения;	
		КонецЕсли;
			
		НайденнаяСтрока = СообщенияДокумента.Найти(Перечисления.СтатусыСообщенийЭДО.НеСформирован, "Статус");
		Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
			ОписаниеСообщения.Ссылка = НайденнаяСтрока.Ссылка;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеСообщения;
	
КонецФункции

#КонецОбласти

#Область ДанныеСообщений

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// 
Функция ОсновнойФайлИнформацииОтправителя(ЭлектронныйДокумент) Экспорт
	Возврат Документы.СообщениеЭДО.ОсновнойФайлИнформацииОтправителя(ЭлектронныйДокумент);
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//                      - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
// 
// Возвращаемое значение:
//  СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы,Неопределено
Функция ОсновнойФайлПоТипуЭлементаРегламента(ЭлектронныйДокумент, ТипЭлементаРегламента) Экспорт
	Возврат Документы.СообщениеЭДО.ОсновнойФайлПоТипуЭлементаРегламента(ЭлектронныйДокумент, ТипЭлементаРегламента);
КонецФункции

// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
// Возвращаемое значение:
//  ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
Функция ЭлектронныйДокументСообщенияЭДО(Сообщение) Экспорт
	Возврат Документы.СообщениеЭДО.ЭлектронныйДокумент(Сообщение);
КонецФункции

// Текст запроса сообщений документов.
// 
// Параметры:
//  Отбор - Неопределено - отбор не задан.
//        - см. ЭлектронныеДокументыЭДО.НовыйОтборСообщенийДокументов
// 
// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаСообщенийДокументов(Отбор = Неопределено) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.Статус КАК Статус,
		|	СообщениеЭДО.ДатаИзмененияСтатуса КАК ДатаИзмененияСтатуса,
		|	СообщениеЭДО.Состояние КАК Состояние,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	СообщениеЭДО.Дата КАК Дата,
		|	СообщениеЭДО.Направление КАК Направление,
		|	СообщениеЭДО.ВидСообщения.ТипДокумента КАК ТипДокумента,
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СообщениеЭДО.ЭлектронныйДокумент.ТипРегламента КАК ТипРегламента,
		|	СообщениеЭДО.ОсновнойФайл КАК ОсновнойФайл,
		|	СообщениеЭДО.ОсновнойФайл.ПолноеИмяФайла КАК ПолноеИмяФайла,
		|	СообщениеЭДО.ВидСообщения КАК ВидСообщения
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент В (&ЭлектронныеДокументы)
		|	И &УсловиеОтбора
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭлектронныйДокумент,
		|	Ссылка";
	
	Если ТекстЗапроса = Неопределено Тогда
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	УсловиеОтбора = Новый Массив;
	Если ЗначениеЗаполнено(Отбор) Тогда
		Если ЗначениеЗаполнено(Отбор.Состояния) Тогда
			УсловиеОтбора.Добавить("СообщениеЭДО.Состояние В (&Состояния)");
		КонецЕсли;
		Если ЗначениеЗаполнено(Отбор.ТипыЭлементовРегламента) Тогда
			УсловиеОтбора.Добавить("СообщениеЭДО.ТипЭлементаРегламента В (&ТипыЭлементовРегламента)");
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", СтрСоединить(УсловиеОтбора, " И "));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", "ИСТИНА");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает сведения организаций по сообщениям информации отправителя исходящих документов.
// 
// Параметры:
//  Сообщения - Массив из ДокументСсылка.СообщениеЭДО
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.СообщениеЭДО
//  * Значение - См. ИнтеграцияЭДО.ДанныеЮрФизЛица
Функция СведенияОрганизацийПоСообщениямИнформацииОтправителя(Сообщения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Сообщение,
		|	ЭлектронныйДокументИсходящийЭДО.Организация КАК Организация
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка
		|ГДЕ
		|	СообщениеЭДО.Ссылка В(&Сообщения)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Сообщение,
		|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|ГДЕ
		|	СообщениеЭДО.Ссылка В(&Сообщения)";
	
	Запрос.УстановитьПараметр("Сообщения", Сообщения);
	
	Результат = Новый Соответствие;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	СведенияПоОрганизациям = Новый Соответствие; 
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Сведения = СведенияПоОрганизациям[Выборка.Организация];
		Если Сведения = Неопределено Тогда
			Сведения = ИнтеграцияЭДО.ДанныеЮрФизЛица(Выборка.Организация);
			СведенияПоОрганизациям.Вставить(Выборка.Организация, Сведения);
		КонецЕсли;
		
		Результат.Вставить(Выборка.Сообщение, Сведения);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Инициализирует свойства сообщения.
// 
// Возвращаемое значение:
//  Структура:
//  * Ссылка - ДокументСсылка.СообщениеЭДО
//  * ВидСообщения - СправочникСсылка.ВидыДокументовЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  * Статус - ПеречислениеСсылка.СтатусыСообщенийЭДО
//  * ОсновнойФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Состояние - ПеречислениеСсылка.СостоянияСообщенийЭДО
//  * ПолноеИмяФайла - Строка
//  * ЭтоОблачныйЭДО - Булево
//
Функция НовыеСвойстваСообщения()
	
	Результат = Новый Структура();
	Результат.Вставить("Ссылка", Документы.СообщениеЭДО.ПустаяСсылка());
	Результат.Вставить("ВидСообщения", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("ЭлектронныйДокумент", Документы.ЭлектронныйДокументИсходящийЭДО.ПустаяСсылка());
	Результат.Вставить("Направление", Перечисления.НаправленияЭДО.ПустаяСсылка());
	Результат.Вставить("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка());
	Результат.Вставить("Статус", Перечисления.СтатусыСообщенийЭДО.ПустаяСсылка());
	Результат.Вставить("ОсновнойФайл", Справочники.СообщениеЭДОПрисоединенныеФайлы.ПустаяСсылка());
	Результат.Вставить("Состояние", Перечисления.СостоянияСообщенийЭДО.ПустаяСсылка());
	Результат.Вставить("ПолноеИмяФайла", "");
	Результат.Вставить("ЭтоОблачныйЭДО", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает свойства сообщения ЭДО.
// 
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
// 
// Возвращаемое значение:
//  См. НовыеСвойстваСообщения
//
Функция СвойстваСообщения(Сообщение) Экспорт
	
	Результат = НовыеСвойстваСообщения();
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сообщение, 
		"Ссылка, ВидСообщения, ВидСообщения.ТипДокумента, ЭлектронныйДокумент, Направление, 
		|ТипЭлементаРегламента, Статус, Состояние, ОсновнойФайл, ОсновнойФайл.ПолноеИмяФайла, 
		|ЭлектронныйДокумент.ЭтоОблачныйЭДО");
	
	Результат.Ссылка = ЗначенияРеквизитов.Ссылка;
	Результат.ВидСообщения = ЗначенияРеквизитов.ВидСообщения;
	Результат.ТипДокумента = ЗначенияРеквизитов.ВидСообщенияТипДокумента;
	Результат.ЭлектронныйДокумент = ЗначенияРеквизитов.ЭлектронныйДокумент;
	Результат.Направление = ЗначенияРеквизитов.Направление;
	Результат.ТипЭлементаРегламента = ЗначенияРеквизитов.ТипЭлементаРегламента;
	Результат.Статус = ЗначенияРеквизитов.Статус;
	Результат.Состояние = ЗначенияРеквизитов.Состояние;
	Результат.ОсновнойФайл = ЗначенияРеквизитов.ОсновнойФайл;
	Результат.ПолноеИмяФайла = ЗначенияРеквизитов.ОсновнойФайлПолноеИмяФайла;
	Результат.ЭтоОблачныйЭДО = ЗначенияРеквизитов.ЭлектронныйДокументЭтоОблачныйЭДО;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  Сообщения - Массив из ДокументСсылка.СообщениеЭДО
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.СообщениеЭДО
//  * Значение - См. НовыеСвойстваСообщения
Функция СвойстваСообщений(Сообщения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.ВидСообщения,
		|	СообщениеЭДО.ВидСообщения.ТипДокумента КАК ТипДокумента,
		|	СообщениеЭДО.ЭлектронныйДокумент,
		|	СообщениеЭДО.Направление,
		|	СообщениеЭДО.ТипЭлементаРегламента,
		|	СообщениеЭДО.Статус,
		|	СообщениеЭДО.Состояние,
		|	СообщениеЭДО.ОсновнойФайл,
		|	СообщениеЭДО.ОсновнойФайл.ПолноеИмяФайла КАК ПолноеИмяФайла,
		|	СообщениеЭДО.ЭлектронныйДокумент.ЭтоОблачныйЭДО КАК ЭтоОблачныйЭДО
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка
		|ГДЕ
		|	СообщениеЭДО.Ссылка В (&Сообщения)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.ВидСообщения,
		|	СообщениеЭДО.ВидСообщения.ТипДокумента,
		|	СообщениеЭДО.ЭлектронныйДокумент,
		|	СообщениеЭДО.Направление,
		|	СообщениеЭДО.ТипЭлементаРегламента,
		|	СообщениеЭДО.Статус,
		|	СообщениеЭДО.Состояние,
		|	СообщениеЭДО.ОсновнойФайл,
		|	СообщениеЭДО.ОсновнойФайл.ПолноеИмяФайла,
		|	СообщениеЭДО.ЭлектронныйДокумент.ЭтоОблачныйЭДО
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|ГДЕ
		|	СообщениеЭДО.Ссылка В (&Сообщения)";
	
	Запрос.УстановитьПараметр("Сообщения", Сообщения);
	
	Результат = Новый Соответствие; // См. СвойстваСообщений
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СвойстваСообщения = НовыеСвойстваСообщения();
		ЗаполнитьЗначенияСвойств(СвойстваСообщения, Выборка);
		Результат.Вставить(Выборка.Ссылка, СвойстваСообщения);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Подписи

// Возвращаемое значение:
// 	Структура - данные подписи:
//   * Подпись             - ДвоичныеДанные - результат подписания.
//   * УстановившийПодпись - СправочникСсылка.Пользователи - пользователь, который
//                           подписал объект информационной базы.
//   * ВидПодписи          - ПеречислениеСсылка.ВидыЭлектронныхПодписей - вид подписи.
//   * Комментарий         - Строка - комментарий, если он был введен при подписании.
//   * ИмяФайлаПодписи     - Строка - если подпись добавлена из файла.
//   * ДатаПодписи         - Дата - дата, когда подпись была сделана. Имеет смысл для случаев,
//                           когда дату невозможно извлечь из данных подписи.
//   * ДатаПроверкиПодписи - Дата - дата последней проверки подписи.
//   * ПодписьВерна        - Булево - результат последней проверки подписи.
//   * ПорядковыйНомер     - Число - идентификатор подписи, по которому можно упорядочивать их в списке.
//   * Сертификат          - ХранилищеЗначения - содержит выгрузку сертификата,
//                           который использовался для подписания (содержится в подписи).
//   * Отпечаток           - Строка - отпечаток сертификата в формате строки Base64.
//   * КомуВыданСертификат - Строка - представление субъекта, полученное из двоичных данных сертификата.
//   * Владелец - Строка   - ФИО лица, установившего подпись.
//   * Должность - Строка - Должность лица, установившего подпись.
//   * ХешПодписи - Строка
//   * ВходящаяПодпись - Булево
//
Функция НовыеДанныеПодписи() Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("Подпись", ОбщегоНазначенияБЭДКлиентСервер.ПустыеДвоичныеДанные());
	Данные.Вставить("УстановившийПодпись", Справочники.Пользователи.ПустаяСсылка());
	Данные.Вставить("ВидПодписи", Перечисления.ВидыЭлектронныхПодписей.ПустаяСсылка());
	Данные.Вставить("Комментарий", "");
	Данные.Вставить("ИмяФайлаПодписи", "");
	Данные.Вставить("ДатаПодписи", '00010101');
	Данные.Вставить("ДатаПроверкиПодписи", '00010101');
	Данные.Вставить("ПодписьВерна", Ложь);
	Данные.Вставить("ПорядковыйНомер", 0);
	Данные.Вставить("Сертификат",  Новый ХранилищеЗначения(Неопределено));
	Данные.Вставить("Отпечаток", "");
	Данные.Вставить("КомуВыданСертификат", "");
	Данные.Вставить("Владелец", "");
	Данные.Вставить("Должность", "");
	Данные.Вставить("ХешПодписи", "");
	Данные.Вставить("ВходящаяПодпись", Ложь);
	
	Возврат Данные;
	
КонецФункции

// Параметры:
//  УстановленныеПодписи - См. ЭлектроннаяПодпись.УстановленныеПодписи
//  СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоНоваяПодпись(УстановленныеПодписи, СвойстваПодписи)
	
	Если НЕ ЗначениеЗаполнено(УстановленныеПодписи) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого СвойстваУстановленнойПодписи Из УстановленныеПодписи Цикл
		Если СвойстваУстановленнойПодписи.Подпись = СвойстваПодписи.Подпись Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Параметры:
//  ПрисоединенныйФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ВидПодписи - ПеречислениеСсылка.ВидыЭлектронныхПодписей
// 
// Возвращаемое значение:
//  Массив из см. НовыеДанныеПодписи
Функция УстановленныеПодписиФайла(ПрисоединенныйФайл, ВидПодписи = Неопределено) Экспорт
	
	Подписи = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ВидПодписи)
		ИЛИ ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная Тогда
		
		УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);
		Для Каждого Подпись Из УстановленныеПодписи Цикл
			УстановленнаяПодпись = НовыеДанныеПодписи();
			ЗаполнитьЗначенияСвойств(УстановленнаяПодпись, Подпись);
			УстановленнаяПодпись.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная;
			УстановленнаяПодпись.Владелец = Подпись.КомуВыданСертификат;
			УстановленнаяПодпись.ХешПодписи = КриптографияБЭД.ХешПодписи(Подпись.Подпись);
			Подписи.Добавить(УстановленнаяПодпись);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидПодписи)
		ИЛИ ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая Тогда
		
		УстановленныеПростыеПодписи = УстановленныеПростыеПодписи(ПрисоединенныйФайл);
		Для Каждого Подпись Из УстановленныеПростыеПодписи Цикл
			УстановленнаяПодпись = НовыеДанныеПодписи();
			ЗаполнитьЗначенияСвойств(УстановленнаяПодпись, Подпись);
			УстановленнаяПодпись.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая;
			УстановленнаяПодпись.Владелец = Подпись.ВладелецПодписи;
			УстановленнаяПодпись.Должность = Подпись.Должность;
			УстановленнаяПодпись.ПодписьВерна = Истина;
			УстановленнаяПодпись.ДатаПроверкиПодписи = Подпись.ДатаПодписи;
			Подписи.Добавить(УстановленнаяПодпись);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Подписи;
	
КонецФункции

// Параметры:
//  Ссылка - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ПорядковыйНомер - См. РегистрСведений.ПростыеЭлектронныеПодписи.ПорядковыйНомер
//  * ДатаПодписи - См. РегистрСведений.ПростыеЭлектронныеПодписи.ДатаПодписи
//  * ВладелецПодписи - См. РегистрСведений.ПростыеЭлектронныеПодписи.ВладелецПодписи
//  * Должность - См. РегистрСведений.ПростыеЭлектронныеПодписи.Должность
//  * УстановившийПодпись - См. РегистрСведений.ПростыеЭлектронныеПодписи.Пользователь
//
Функция УстановленныеПростыеПодписи(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПростыеЭлектронныеПодписи.ПорядковыйНомер КАК ПорядковыйНомер,
		|	ПростыеЭлектронныеПодписи.ДатаПодписи КАК ДатаПодписи,
		|	ПростыеЭлектронныеПодписи.ВладелецПодписи КАК ВладелецПодписи,
		|	ПростыеЭлектронныеПодписи.Должность КАК Должность,
		|	ПростыеЭлектронныеПодписи.Пользователь КАК УстановившийПодпись
		|ИЗ
		|	РегистрСведений.ПростыеЭлектронныеПодписи КАК ПростыеЭлектронныеПодписи
		|ГДЕ
		|	ПростыеЭлектронныеПодписи.ПодписанныйОбъект = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядковыйНомер";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Параметры:
//  ФайлДокумента - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ВидПодписи - ПеречислениеСсылка.ВидыЭлектронныхПодписей
Процедура УдалитьПодписи(ФайлДокумента, ВидПодписи)
	
	Подписи = УстановленныеПодписиФайла(ФайлДокумента, ВидПодписи);
	
	Если ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая Тогда
		НаборЗаписей = РегистрыСведений.ПростыеЭлектронныеПодписи.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПодписанныйОбъект.Установить(ФайлДокумента);
		НаборЗаписей.Записать();
		Возврат;
	КонецЕсли;
	
	Для Каждого СвойстваПодписи Из Подписи Цикл
		ЭлектроннаяПодпись.УдалитьПодпись(ФайлДокумента, СвойстваПодписи.ПорядковыйНомер);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ПолноеИмяФайла - Строка
//  ПорядковыйНомерПодписи - Число
// 
// Возвращаемое значение:
//  Строка
Функция ИмяФайлаПодписи(ПолноеИмяФайла, ПорядковыйНомерПодписи) Экспорт
	Файл = Новый Файл(ПолноеИмяФайла);
	Возврат СтрШаблон("%1-%2.p7s", Файл.ИмяБезРасширения, ПорядковыйНомерПодписи);
КонецФункции

// Параметры:
//  ФайлДокумента - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьНевалидныеПодписи(ФайлДокумента, КонтекстДиагностики = Неопределено)
	
	Результат = Ложь;
	
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ФайлДокумента);
	Для Каждого СвойстваПодписи Из УстановленныеПодписи Цикл
		Если Не СвойстваПодписи.ПодписьВерна Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Результат И КонтекстДиагностики <> Неопределено Тогда
		ШаблонТекста = НСтр("ru = 'Обработка электронного документа %1.
			|Документ не обработан, так как содержит невалидные подписи.'");
		Текст = СтрШаблон(ШаблонТекста, ФайлДокумента);
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(НСтр("ru = 'Определение валидности электронных подписей'"),
			КриптографияБЭД.ВидОшибкиПодписьНеверна(), Текст, Текст);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, Ложь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область МашиночитаемыеДоверенности

// Определяет доверителя МЧД и направление проверяемой подписи
// 
// Параметры:
//  СведенияОПодписанномОбъекте - См. СведенияОПодписанномОбъекте
//  СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  ВсегоПодписей - Число
// 
// Возвращаемое значение:
//  Структура:
//  * Доверитель - ОпределяемыйТип.УчастникЭДО
//  * ЭтоВходящаяПодпись - Булево
//
Функция ДоверительИНаправлениеПодписи(СведенияОПодписанномОбъекте, СвойстваПодписи, ВсегоПодписей) Экспорт
	
	Результат = Новый Структура("Доверитель, ЭтоВходящаяПодпись", Неопределено, Ложь);
	
	Если СведенияОПодписанномОбъекте.СвойстваСообщения.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
		Результат.Доверитель = СведенияОПодписанномОбъекте.СвойстваДокумента.Организация;
		Возврат Результат;
	КонецЕсли;
	
	ИсходящееНаправление = СведенияОПодписанномОбъекте.СвойстваСообщения.Направление
		= Перечисления.НаправленияЭДО.Исходящий;
	МеждуОрганизациями = СведенияОПодписанномОбъекте.СвойстваСообщения.Направление
		= Перечисления.НаправленияЭДО.Интеркампани;
	СвойстваСообщения = СведенияОПодписанномОбъекте.СвойстваСообщения;
	
	Если СообщениеМожетПодписыватьсяТолькоОднойСтороной(СведенияОПодписанномОбъекте) Тогда
		Если ИсходящееНаправление Тогда
			Результат.Доверитель = СведенияОПодписанномОбъекте.СвойстваДокумента.Организация;
		Иначе
			Результат.Доверитель = СведенияОПодписанномОбъекте.СвойстваДокумента.Контрагент;
			Результат.ЭтоВходящаяПодпись = Истина;
		КонецЕсли;
	Иначе // у ПОА и регламентов без ответного титула ответная подпись связана с тем же файлом
	
		// Пока исходим из следующего правила, все подписи, кроме последней относятся к отправляющей стороне
		// (в зависимости от направления), под вопросом только последняя подпись, которая в зависимости от
		// статуса и состояния сообщения может относится как к отправляющей, так и к принимающей стороне.
		ЭтоПоследняяПодпись = СвойстваПодписи.ПорядковыйНомер > 1 И СвойстваПодписи.ПорядковыйНомер = ВсегоПодписей;
		Если МеждуОрганизациями Тогда
			Если ЭтоПоследняяПодпись Тогда
				Результат.Доверитель = СведенияОПодписанномОбъекте.СвойстваДокумента.Контрагент;
				Результат.ЭтоВходящаяПодпись = Истина;
			Иначе
				Результат.Доверитель = СведенияОПодписанномОбъекте.СвойстваДокумента.Организация;
			КонецЕсли;
		ИначеЕсли ИсходящееНаправление Тогда
			ОтветнаяСторонаПодписалаСообщение = СвойстваСообщения.Статус = Перечисления.СтатусыСообщенийЭДО.Подтвержден;
			Если ОтветнаяСторонаПодписалаСообщение И ЭтоПоследняяПодпись Тогда
				Результат.Доверитель = СведенияОПодписанномОбъекте.СвойстваДокумента.Контрагент;
				Результат.ЭтоВходящаяПодпись = Истина;
			Иначе
				Результат.Доверитель = СведенияОПодписанномОбъекте.СвойстваДокумента.Организация;
			КонецЕсли;
		Иначе
			ОтветнаяСторонаПодписалаСообщение = 
				Не СвойстваСообщения.Состояние = Перечисления.СостоянияСообщенийЭДО.Подписание
				И Не СвойстваСообщения.Состояние = Перечисления.СостоянияСообщенийЭДО.Утверждение;
			Если ОтветнаяСторонаПодписалаСообщение И ЭтоПоследняяПодпись Тогда
				Результат.Доверитель = СведенияОПодписанномОбъекте.СвойстваДокумента.Организация;
			Иначе
				Результат.Доверитель = СведенияОПодписанномОбъекте.СвойстваДокумента.Контрагент;
				Результат.ЭтоВходящаяПодпись = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Возвращает результат проверки на необходимость наличия доверенности на подпись 
//
// Параметры:
//  ИННДоверителя - Строка
//  ДанныеСертификата - ДвоичныеДанные
//
// Возвращаемое значение:
//  Булево - Истина, если для подписи требуется МЧД
//
Функция ТребуетсяМашиночитаемаяДоверенностьПоДаннымДокумента(ИННДоверителя, ДанныеСертификата) Экспорт
	
	Результат = Ложь;
	
	Если Не ЗначениеЗаполнено(ДанныеСертификата) Тогда
		Возврат Результат;
	КонецЕсли;
	
	СертификатКриптографии = Новый СертификатКриптографии(ДанныеСертификата);
	
	СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификата(СертификатКриптографии);
	
	СвойстваИздателяСертификата = КриптографияБЭД.СвойстваИздателяСертификата(СертификатКриптографии);
	
	Результат = МашиночитаемыеДоверенности.ТребуетсяМашиночитаемаяДоверенность(
		ИННДоверителя, СвойстваСубъектаСертификата, СвойстваИздателяСертификата);
	
	Возврат Результат;
	
КонецФункции

// Добавляет ошибку проверки подписи по МЧД.
// 
// Параметры:
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ПараметрыОшибки - См. НовыеПараметрыОшибкиПроверкиПодписиПоМЧД
Процедура ДобавитьОшибкуПроверкиПодписиПоМЧД(КонтекстДиагностики, ПараметрыОшибки) Экспорт

	ВидОперации = НСтр("ru = 'Проверка подписей по МЧД'");
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ПодписьПоМЧДНеВерна";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Электронная подпись не верна.'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Проверка электронной подписи с учетом машиночитаемой доверенности завершена неуспешно.'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = '<a href = ""Посмотреть"">Посмотреть</a> результат проверки подписи по МЧД'");
	ОбработчикНажатия = "ЭлектронныеДокументыЭДОКлиентСобытия.ПриПросмотреРезультатаПроверкиПодписиПоМЧД";
	ВидОшибки.ОбработчикиНажатия.Вставить("Посмотреть", ОбработчикНажатия);
	ВидОшибки.ПараметрыОбработчиков.Вставить("Посмотреть", ПараметрыОшибки);
	
	КраткоеПредставление = ПараметрыОшибки.ТекстОшибки;
	ПодробноеПредставление = ПараметрыОшибки.ТекстОшибки;

	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставление, КраткоеПредставление);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

// Добавляет ошибку проверки СНИЛС подписанта МЧД.
// 
// Параметры:
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ТекстОшибки - Строка
Процедура ДобавитьОшибкуПроверкиСнилсПодписантаМЧД(КонтекстДиагностики, ТекстОшибки)

	ВидОперации = НСтр("ru = 'Проверка СНИЛС подписанта МЧД'");
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "СнилсПодписантаИДоверителяРазличны";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Электронная подпись не верна.'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Проверка СНИЛС подписанта машиночитаемой доверенности завершена неуспешно.'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = 'Проверьте реквизиты машиночитаемой доверенности'");
	
	КраткоеПредставление = ТекстОшибки;
	ПодробноеПредставление = ТекстОшибки;

	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставление, КраткоеПредставление);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

// Возвращает параметры проверки подписей файла сообщения электронного документа по МЧД при подписании.
// 
// Параметры:
//  НомераМЧД - Массив из строка
//  СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  СоответствиеИННДоверителяСНомерамиМЧД - Соответствие из КлючИЗначение
//  НаборСведенийОСтатусахМЧД - См. МашиночитаемыеДоверенности.СведенияОСтатусахДоверенностейОрганизаций
//  ЭтоМЧДКонтрагента - Булево
// 
// Возвращаемое значение:
//  См. МашиночитаемыеДоверенности.НовыеПараметрыПроверкиПодписи
Функция ПараметрыПроверкиПодписиПоМЧД(НомераМЧД,
		СвойстваПодписи, СоответствиеИННДоверителяСНомерамиМЧД, НаборСведенийОСтатусахМЧД, ЭтоМЧДКонтрагента)
	
	ПараметрыПроверки = МашиночитаемыеДоверенности.НовыеПараметрыПроверкиПодписи();
	ПараметрыПроверки.СвойстваПодписи = СвойстваПодписи;
	
	Если Не ЗначениеЗаполнено(НомераМЧД) Тогда
		ПараметрыПроверки.ТекстОшибки = НСтр("ru = 'Не найдена МЧД для файла электронного документа'");
		Возврат ПараметрыПроверки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СвойстваПодписи.Сертификат) Тогда
		ПараметрыПроверки.ТекстОшибки = НСтр("ru = 'Не удалось извлечь сертификат из подписи файла электронного документа'");
		Возврат ПараметрыПроверки;
	КонецЕсли;
	
	СертификатКриптографии = Новый СертификатКриптографии(СвойстваПодписи.Сертификат);
	ИННПредставителя = КриптографияБЭД.ИННСубъектаСертификата(СертификатКриптографии);
	
	НаборДанныхМЧД = 
		НаборДанныхМЧДДляЗапросаСведенийОСтатусах(СоответствиеИННДоверителяСНомерамиМЧД, НомераМЧД, ИННПредставителя);
	
	ДополнитьСведенияОСтатусахМЧДОрганизаций(НаборСведенийОСтатусахМЧД, НаборДанныхМЧД, ЭтоМЧДКонтрагента);
	
	СведенияОСтатусеМЧД = СведенияОСтатусеМЧДПоПредставителю(НаборСведенийОСтатусахМЧД, НомераМЧД, ИННПредставителя);
	
	Если СведенияОСтатусеМЧД = Неопределено Тогда
		ПараметрыПроверки.ТекстОшибки =
			НСтр("ru = 'Произошла неизвестная ошибка при получении статуса МЧД из распределенного реестра'");
		Возврат ПараметрыПроверки;
	КонецЕсли;
			
	Если СведенияОСтатусеМЧД.Ошибка Тогда
		ПараметрыПроверки.ТекстОшибки = СведенияОСтатусеМЧД.ОписаниеОшибки;
	КонецЕсли;
	
	Если СведенияОСтатусеМЧД.ОшибкаПолученияДанныхСРРФНС Тогда
		ПараметрыПроверки.ОшибкаПолученияДанныхСРРФНС = Истина;
		ПараметрыПроверки.ТекстОшибки = СведенияОСтатусеМЧД.ОписаниеОшибки;
	КонецЕсли;
	
	ПараметрыПроверки.СведенияМЧД = СведенияОСтатусеМЧД.Сведения;
	
	ПараметрыПроверки.ИННДоверителя = 
		?(ЗначениеЗаполнено(СведенияОСтатусеМЧД.Сведения.ИННДоверителяРодительскойДоверенности),
			СведенияОСтатусеМЧД.Сведения.ИННДоверителяРодительскойДоверенности,
			СведенияОСтатусеМЧД.Сведения.ИННДоверителя);
	
	Если Не ЗначениеЗаполнено(ПараметрыПроверки.ИННДоверителя) Тогда
		ПараметрыПроверки.ТекстОшибки = НСтр("ru = 'Не удалось получить ИНН продавца'");
		Если ЗначениеЗаполнено(СведенияОСтатусеМЧД.ОписаниеОшибки) Тогда
			ПараметрыПроверки.ТекстОшибки = 
				ПараметрыПроверки.ТекстОшибки + Символы.ПС + СведенияОСтатусеМЧД.ОписаниеОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Определяет признак возможного наличия ответной подписи в сообщении ЭДО
// 
// Параметры:
//  ДополнительныйКонтекстПроверки - См. СведенияОПодписанномОбъекте
// 
// Возвращаемое значение:
//  Булево
Функция СообщениеМожетПодписыватьсяТолькоОднойСтороной(ДополнительныйКонтекстПроверки)
	Возврат РегламентыЭДО.ЕстьИнформацияПолучателя(ДополнительныйКонтекстПроверки.СвойстваДокумента.ТипРегламента)
		И Не ДополнительныйКонтекстПроверки.СвойстваСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА
		И Не ДополнительныйКонтекстПроверки.СвойстваСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ
		И Не ДополнительныйКонтекстПроверки.СвойстваСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ;
КонецФункции

// Возвращает результат проверки подписи по МЧД.
// 
// Параметры:
//  ФайлСообщения - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  ВсегоПодписей - Число
// 
// Возвращаемое значение:
//  - Неопределено - если для подписи не требуется проверка по МЧД.
//  - См. ПроверитьПодписьПоМЧД
Функция ПроверитьПодписьФайлаПоМЧД(ФайлСообщения, СвойстваПодписи, ВсегоПодписей) Экспорт
	
	СведенияОПодписанномОбъекте = ЭлектронныеДокументыЭДО.СведенияОПодписанномОбъекте(ФайлСообщения);
	Доверитель = ДоверительИНаправлениеПодписи(
		СведенияОПодписанномОбъекте, СвойстваПодписи, ВсегоПодписей).Доверитель;

	ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
	ОписаниеФайла.ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлСообщения);
	ОписаниеФайла.ИмяФайла = СведенияОПодписанномОбъекте.СвойстваФайла.ПолноеИмяФайла;
	
	ФайлыСообщений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФайлСообщения);
	ПроверкиОператоромЭДО = МашиночитаемыеДоверенности.РезультатыПроверокМЧДОператоромЭДО(ФайлыСообщений);
	
	РезультатПроверки = ПроверитьПодписьПоМЧД(ФайлСообщения, СведенияОПодписанномОбъекте.СвойстваСообщения.Направление,
		ОписаниеФайла, СвойстваПодписи, Доверитель, ПроверкиОператоромЭДО);
	
	Возврат РезультатПроверки;
	
КонецФункции

// Проверяет подписи по МЧД после загрузки данных контейнеров.
// 
// Параметры:
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ПроверитьПодписиПоМЧДПослеЗагрузкиДанных(КонтекстДиагностики)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийФайлСообщения = Справочники.СообщениеЭДОПрисоединенныеФайлы.ПустаяСсылка();
	РазмерПорции = 1000;
	
	Пока Истина Цикл
		
		СведенияОПодписяхДляПроверки = МашиночитаемыеДоверенности.ПорцияСведенийОПодписяхДляПроверки(
			ТекущийФайлСообщения, РазмерПорции);
		
		Количество = СведенияОПодписяхДляПроверки.Количество();
		Если Количество = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ПроверитьПодписиФайловПоМЧДПослеЗагрузкиДанных(СведенияОПодписяхДляПроверки, КонтекстДиагностики);
		
		Если Количество < РазмерПорции Тогда
			Возврат;
		Иначе
			ТекущийФайлСообщения = СведенияОПодписяхДляПроверки[Количество - 1].ПодписанныйОбъект;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет подписи файлов по МЧД после загрузки данных.
// 
// Параметры:
//  СведенияОПодписяхПоМЧД - См. МашиночитаемыеДоверенности.ПорцияСведенийОПодписяхДляПроверки
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ПроверитьПодписиФайловПоМЧДПослеЗагрузкиДанных(СведенияОПодписяхПоМЧД, КонтекстДиагностики)
	
	ФайлыСообщений = ОбщегоНазначения.ВыгрузитьКолонку(СведенияОПодписяхПоМЧД, "ПодписанныйОбъект", Истина);
	
	СвойстваПодписейФайлов = КриптографияБЭД.УстановленныеПодписиОбъектов(ФайлыСообщений);
	
	ОписанияФайлов = ОписанияФайлов(ФайлыСообщений, КонтекстДиагностики);
	
	ПроверкиОператоромЭДО = МашиночитаемыеДоверенности.РезультатыПроверокМЧДОператоромЭДО(ФайлыСообщений);
	
	СведенияОПодписанныхОбъектах = СведенияОПодписанныхОбъектах(ФайлыСообщений);
	
	НаборСведенийОСтатусахМЧД = Новый Соответствие;
	
	Для Каждого СведенияОПодписиПоМЧД Из СведенияОПодписяхПоМЧД Цикл
		
		ФайлСообщения = СведенияОПодписиПоМЧД.ПодписанныйОбъект;
		СвойстваПодписейФайла = СвойстваПодписейФайлов[ФайлСообщения];
		Если Не ЗначениеЗаполнено(СвойстваПодписейФайла) Тогда
			Продолжить;
		КонецЕсли;
		СвойстваПодписи = КриптографияБЭД.НайтиСвойстваПодписиПоХешу(СвойстваПодписейФайла,
			СведенияОПодписиПоМЧД.ХешПодписи);
		Если Не ЗначениеЗаполнено(СвойстваПодписи) Тогда
			Продолжить;
		КонецЕсли;
		
		ХешПодписи = КриптографияБЭД.ХешПодписи(СвойстваПодписи.Подпись);	
		
		СведенияОПодписанномОбъекте = СведенияОПодписанныхОбъектах[ФайлСообщения];
		СвойстваДокумента = СведенияОПодписанномОбъекте.СвойстваДокумента;
		
		РезультатПроверки = МашиночитаемыеДоверенности.НовыйРезультатПроверкиПодписи();
		Если ЗначениеЗаполнено(СвойстваДокумента.Ссылка) И ЗначениеЗаполнено(СвойстваДокумента.ТипРегламента) Тогда
			
			Доверитель = ДоверительИНаправлениеПодписи(
				СведенияОПодписанномОбъекте, СвойстваПодписи, СвойстваПодписейФайла.Количество()).Доверитель;
			
			ОписаниеФайла = ОписанияФайлов.Получить(ФайлСообщения);
			Если ОписаниеФайла = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПроверки = ПроверитьПодписьПоМЧД(ФайлСообщения, СведенияОПодписанномОбъекте.СвойстваСообщения.Направление, 
				ОписаниеФайла, СвойстваПодписи, Доверитель, ПроверкиОператоромЭДО, НаборСведенийОСтатусахМЧД);
		Иначе
			РезультатПроверки.ПроверкаВыполнена = Истина;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		МашиночитаемыеДоверенности.ЗаписатьРезультатПроверкиПодписи(ФайлСообщения, ХешПодписи, РезультатПроверки);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает результат проверки подписи по МЧД..
// 
// Параметры:
//  ФайлСообщения - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  НаправлениеСообщения - ПеречислениеСсылка.НаправленияЭДО
//  ОписаниеФайла - См. РаботаСФайламиБЭД.НовоеОписаниеФайла
//  СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  Доверитель - ОпределяемыйТип.УчастникЭДО
//  ПроверкиОператоромЭДО - См. МашиночитаемыеДоверенности.РезультатыПроверокМЧДОператоромЭДО
//  КэшСведенийОСтатусахМЧД - Неопределено, Соответствие
// 
// Возвращаемое значение:
//  См. МашиночитаемыеДоверенности.НовыйРезультатПроверкиПодписи 
Функция ПроверитьПодписьПоМЧД(ФайлСообщения, НаправлениеСообщения, ОписаниеФайла, СвойстваПодписи,
	Доверитель, ПроверкиОператоромЭДО, КэшСведенийОСтатусахМЧД = Неопределено)
	
	ХешПодписи = КриптографияБЭД.ХешПодписи(СвойстваПодписи.Подпись);
	РегистрационныеДанныеДоверителя = МашиночитаемыеДоверенности.НовыеРеквизитыОтбора();
	РезультатПроверки = МашиночитаемыеДоверенности.НовыйРезультатПроверкиПодписи();
	
	ЗначениеРеквизитовСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлСообщения, 
		"ВладелецФайла.ТипЭлементаРегламента, ВладелецФайла.ЭлектронныйДокумент");
		
	ТипЭлементаРегламента = ЗначениеРеквизитовСообщения.ВладелецФайлаТипЭлементаРегламента;
		
	Если Не РегламентыЭДО.ЭтоИнформацияУчастникаЭДО(ТипЭлементаРегламента) 
		И ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ПОА
		И ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.УОУ
		И ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ Тогда
		РезультатПроверки.ПроверкаВыполнена = Истина;
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если НаправлениеСообщения = Перечисления.НаправленияЭДО.Интеркампани Тогда
		
		// В этом случае обе подписи "исходящие" и нет возможности однозначно связать их с конкретными сторонами ЭДО,
		// следовательно ищем сведения о доверителе в регистре ЭлектронныеПодписиПоМЧД, поскольку записи этого регистра
		// формировались в момент подписания, когда сторона ЭДО была однозначно идентифицирована
		ИННКППДоверителяПодписи = МашиночитаемыеДоверенности.ИННКППДоверителяЭлектроннойПодписиПоМЧД(ХешПодписи,
			СвойстваПодписи.ПодписанныйОбъект);
		ЗаполнитьЗначенияСвойств(РегистрационныеДанныеДоверителя, ИННКППДоверителяПодписи);
			
		Если Не ЗначениеЗаполнено(РегистрационныеДанныеДоверителя.ИНН) Тогда
			РезультатПроверки.ПроверкаВыполнена = Истина;
			Возврат РезультатПроверки;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоМЧДКонтрагента = НаправлениеСообщения = Перечисления.НаправленияЭДО.Входящий;
	
	Если Не ЗначениеЗаполнено(РегистрационныеДанныеДоверителя.ИНН) Тогда
		СведенияОбУчастникеЭДО = ИнтеграцияЭДО.ДанныеЮрФизЛица(Доверитель);
		ЗаполнитьЗначенияСвойств(РегистрационныеДанныеДоверителя, СведенияОбУчастникеЭДО);
		ЭтоМЧДКонтрагента = Не ИнтеграцияЭДО.ЭтоОрганизация(Доверитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РегистрационныеДанныеДоверителя.ИНН)
		И Не ТребуетсяМашиночитаемаяДоверенностьПоДаннымДокумента(РегистрационныеДанныеДоверителя.ИНН,
			СвойстваПодписи.Сертификат) Тогда
				
		РезультатПроверки.ПроверкаВыполнена = Истина;
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ОшибкиПроверкиПолномочий = Новый Массив;	
	СертификатКриптографии = Новый СертификатКриптографии(СвойстваПодписи.Сертификат);
	РегистрационныеДанныеПредставителя = МашиночитаемыеДоверенности.НовыеРеквизитыОтбора();
	РегистрационныеДанныеПредставителя.ИНН = КриптографияБЭД.ИННСубъектаСертификата(СертификатКриптографии);
	
	НомераМЧД = Новый Массив;
	СодержаниеФайла = ФорматыЭДО.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
	СоответствиеИННДоверителяСНомерамиМЧД = Новый Соответствие();
	Если ЗначениеЗаполнено(ОписаниеФайла) И ЗначениеЗаполнено(СодержаниеФайла) Тогда 
		НомераМЧД = ФорматыЭДО.НомераМашиночитаемыхДоверенностей(ОписаниеФайла, СодержаниеФайла.Формат);
		СоответствиеИННДоверителяСНомерамиМЧД = ФорматыЭДО.ИННДоверителяМашиночитаемойДоверенности(ОписаниеФайла,
			СодержаниеФайла.Формат);
	КонецЕсли;

	НомераМЧДСИННДоверителяИзСообщений = 
		МашиночитаемыеДоверенности.НомераМЧДСИННДоверителяИзСообщений(ФайлСообщения, ХешПодписи);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		СоответствиеИННДоверителяСНомерамиМЧД, НомераМЧДСИННДоверителяИзСообщений, Истина);
		
	Для Каждого НомерМЧДСИННДоверителя Из НомераМЧДСИННДоверителяИзСообщений Цикл
		Если НомераМЧД.Найти(НомерМЧДСИННДоверителя.Ключ) = Неопределено Тогда
			НомераМЧД.Добавить(НомерМЧДСИННДоверителя.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Если КэшСведенийОСтатусахМЧД = Неопределено Тогда
		КэшСведенийОСтатусахМЧД = Новый Соответствие;
	КонецЕсли;

	ЭлектронныйДокумент = ЗначениеРеквизитовСообщения.ВладелецФайлаЭлектронныйДокумент;
	
	ПараметрыПроверки = ПараметрыПроверкиПодписиПоМЧД(НомераМЧД,
		СвойстваПодписи, СоответствиеИННДоверителяСНомерамиМЧД, КэшСведенийОСтатусахМЧД, ЭтоМЧДКонтрагента);

	МЧДИзДокументаСоответствуетПредставителю = 
		ПараметрыПроверки.СведенияМЧД.ИННПредставителей.Найти(РегистрационныеДанныеПредставителя.ИНН) <> Неопределено;
	
	Если Не МЧДИзДокументаСоответствуетПредставителю Тогда
		
		НомераМЧД = Новый Массив;
		Для Каждого НомерМЧДСИННДоверителя Из НомераМЧДСИННДоверителяИзСообщений Цикл
			НомераМЧД.Добавить(НомерМЧДСИННДоверителя.Ключ);
		КонецЦикла;
		
		Результат = МашиночитаемыеДоверенности.НомераДоверенностейСИННДоверителейПоУчастникам(
			РегистрационныеДанныеДоверителя,
			РегистрационныеДанныеПредставителя,
			СвойстваПодписи.ДатаПодписи,
			ЭлектронныйДокумент);
		
		Для Каждого НомерМЧД Из Результат.НомераМЧДСИННДоверителей Цикл
			Если НомераМЧД.Найти(НомерМЧД.Ключ) = Неопределено Тогда
				НомераМЧД.Добавить(НомерМЧД.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		РезультатПроверкиПодписиСДаннымиДоверенности = 
			РезультатПроверкиПодписиСДаннымиДоверенности(ФайлСообщения, СвойстваПодписи, НаправлениеСообщения);
		
		Если РезультатПроверкиПодписиСДаннымиДоверенности <> Неопределено Тогда
			
			ДанныеДоверенности = 
				РезультатПроверкиПодписиСДаннымиДоверенности.ДанныеДоверенности;
			
			ДанныеДоверенностиЗаполнены = 
				ЗначениеЗаполнено(ДанныеДоверенности.ИННДоверителя)
					И ЗначениеЗаполнено(ДанныеДоверенности.НомерДоверенности);
			
			Если ДанныеДоверенностиЗаполнены Тогда 
				Если НомераМЧД.Найти(ДанныеДоверенности.НомерДоверенности) <> Неопределено Тогда
					НомераМЧД.Очистить();
				КонецЕсли;
				НомераМЧД.Вставить(0, ДанныеДоверенности.НомерДоверенности);
				РегистрационныеДанныеДоверителя.ИНН = ДанныеДоверенности.ИННДоверителя;
				РезультатПроверки = РезультатПроверкиПодписиСДаннымиДоверенности.РезультатПроверки;
			КонецЕсли;
		КонецЕсли;
		
		Если НомераМЧД.Количество() = 0 Тогда
			ОшибкиПроверкиПолномочий = Результат.ОшибкиПроверкиПолномочий;
		КонецЕсли;
		
		СоответствиеИННДоверителяСНомерамиМЧД = Новый Соответствие;
		Для Каждого НомерМЧД Из НомераМЧД Цикл
			
			ИННДоверителей = Результат.НомераМЧДСИННДоверителей.Получить(НомерМЧД);
			
			Если НомераМЧДСИННДоверителяИзСообщений[НомерМЧД] <> Неопределено Тогда
				
				Если ИННДоверителей <> Неопределено 
					И НомераМЧДСИННДоверителяИзСообщений[НомерМЧД] = ИННДоверителей.ИННДоверителяРодительскойДоверенности Тогда 
					СоответствиеИННДоверителяСНомерамиМЧД.Вставить(НомерМЧД, ИННДоверителей.ИННДоверителя);
					Продолжить;
				КонецЕсли;
				
				Если НомераМЧДСИННДоверителяИзСообщений[НомерМЧД] = РегистрационныеДанныеДоверителя.ИНН Тогда
					СоответствиеИННДоверителяСНомерамиМЧД.Вставить(
						НомерМЧД, НомераМЧДСИННДоверителяИзСообщений[НомерМЧД]);
					Продолжить;
				КонецЕсли;
			
			КонецЕсли;
			
			Если ИННДоверителей <> Неопределено Тогда
				Если РегистрационныеДанныеДоверителя.ИНН = ИННДоверителей.ИННДоверителяРодительскойДоверенности Тогда
					СоответствиеИННДоверителяСНомерамиМЧД.Вставить(НомерМЧД, ИННДоверителей.ИННДоверителя);
				Иначе
					СоответствиеИННДоверителяСНомерамиМЧД.Вставить(НомерМЧД, РегистрационныеДанныеДоверителя.ИНН);
				КонецЕсли;
			Иначе
				СоответствиеИННДоверителяСНомерамиМЧД.Вставить(НомерМЧД, РегистрационныеДанныеДоверителя.ИНН);
			КонецЕсли;
			
		КонецЦикла;
		
		КэшСведенийОСтатусахМЧДИзСправочника = Новый Соответствие;
		ПараметрыПроверки = ПараметрыПроверкиПодписиПоМЧД(НомераМЧД, СвойстваПодписи, 
			СоответствиеИННДоверителяСНомерамиМЧД, КэшСведенийОСтатусахМЧДИзСправочника, ЭтоМЧДКонтрагента);
			
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
			КэшСведенийОСтатусахМЧД, КэшСведенийОСтатусахМЧДИзСправочника, Истина); 
		
		Если ЗначениеЗаполнено(ПараметрыПроверки.ТекстОшибки)
			И Не ПараметрыПроверки.ОшибкаПолученияДанныхСРРФНС 
			И РезультатПроверки <> Неопределено
			И РезультатПроверки.ПроверкаВыполнена
			И ЗначениеЗаполнено(РезультатПроверки.Доверенность)
			И ДанныеДоверенностиЗаполнены Тогда
			
			РезультатПроверки.ТребуетсяДоверенность = Истина;
			Возврат РезультатПроверки;
		КонецЕсли;
	КонецЕсли;
		
	ПараметрыОтбора = Новый Структура("ПодписанныйОбъект, Отпечаток", ФайлСообщения, СвойстваПодписи.Отпечаток);
	НайденныеСтроки = ПроверкиОператоромЭДО.НайтиСтроки(ПараметрыОтбора);
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		ПараметрыПроверки.ПроверкаОператором.ДоверенностьДействительна = НайденныеСтроки[0].ДоверенностьВерна;
		ПараметрыПроверки.ПроверкаОператором.ДоверенностьПроверенаОператором = Истина;
	КонецЕсли;
	
	ПараметрыПроверки.ЭлектронныйДокумент = ЭлектронныйДокумент;
	
	РезультатПроверки = МашиночитаемыеДоверенности.ПроверитьПодпись(ПараметрыПроверки);
	
	Если ОшибкиПроверкиПолномочий.Количество() > 0 Тогда
		РезультатПроверки.ПротоколПроверки.ОшибкиПроверкиПолномочий = ОшибкиПроверкиПолномочий;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Возвращает результаты проверки подписей с данными доверенности.
// 
// Параметры:
//  ФайлСообщения - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  НаправлениеСообщения - ПеречислениеСсылка.НаправленияЭДО
// 
// Возвращаемое значение:
//  - Неопределено
//  - Структура:
//  * РезультатПроверки - См. МашиночитаемыеДоверенности.НовыйРезультатПроверкиПодписи
//  * ДанныеДоверенности - См. МашиночитаемыеДоверенности.НовыеДанныеДоверенности
//
Функция РезультатПроверкиПодписиСДаннымиДоверенности(ФайлСообщения, СвойстваПодписи, НаправлениеСообщения)
	
	ХешПодписи = КриптографияБЭД.ХешПодписи(СвойстваПодписи.Подпись);
	РезультатПроверки = МашиночитаемыеДоверенности.РезультатПроверкиПодписи(ФайлСообщения, ХешПодписи);
	
	Доверенность = 
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПроверки, "Доверенность");
	
	Если Не ЗначениеЗаполнено(Доверенность) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеДоверенности = МашиночитаемыеДоверенности.НовыеДанныеДоверенности();
	ДанныеДоверенности.НомерДоверенности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Доверенность, "НомерДоверенности");
	
	ЭтоМЧДВерсии003 = МашиночитаемыеДоверенности.ЭтоМЧД003(Доверенность);
	Если ЭтоМЧДВерсии003 Тогда
		ИННДоверителей = Справочники.МЧД003.ПолучитьИННКППДоверителей(Доверенность);
		ДанныеДоверенности.ИННДоверителя = ?(ИННДоверителей.Количество(), ИННДоверителей[0].ИНН, "");
	Иначе
		
		ЭтоМЧДКонтрагента = 
			МашиночитаемыеДоверенности.ЭтоМЧДКонтрагента(Доверенность);
		
		ЗначениеРеквизитовСообщения = 
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлСообщения, 
			"ВладелецФайла.ЭлектронныйДокумент.Контрагент, 
			|	ВладелецФайла.ЭлектронныйДокумент.Организация");
		
		УчастникЭДО = ЗначениеРеквизитовСообщения.ВладелецФайлаЭлектронныйДокументКонтрагент;
		Если НЕ ЭтоМЧДКонтрагента И НаправлениеСообщения <> Перечисления.НаправленияЭДО.Интеркампани Тогда
			УчастникЭДО = ЗначениеРеквизитовСообщения.ВладелецФайлаЭлектронныйДокументОрганизация;
		КонецЕсли;
		
		СведенияОбУчастникеЭДО = ИнтеграцияЭДО.ДанныеЮрФизЛица(УчастникЭДО);
		ДанныеДоверенности.ИННДоверителя = СведенияОбУчастникеЭДО.ИНН;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатПроверки", РезультатПроверки);
	Результат.Вставить("ДанныеДоверенности", ДанныеДоверенности);
	
	Возврат Результат;
	
КонецФункции

// Возвращает описания файлов по переданным ссылкам.
// 
// Параметры:
//  ФайлыСообщений - Массив из СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - См. РаботаСФайламиБЭД.НовоеОписаниеФайла
Функция ОписанияФайлов(ФайлыСообщений, КонтекстДиагностики)
	
	ОписанияФайлов = Новый Соответствие;
	
	ИменаФайлов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ФайлыСообщений, "ПолноеИмяФайла");
	
	ДвоичныеДанныеФайлов = РаботаСФайлами.ДвоичныеДанныеФайлов(ФайлыСообщений, Ложь);
	
	Для Каждого ФайлСообщения Из ФайлыСообщений Цикл
		
		ИмяФайла = ИменаФайлов[ФайлСообщения];
		ДвоичныеДанные = ДвоичныеДанныеФайлов[ФайлСообщения];
		
		Если ИмяФайла = Неопределено ИЛИ ДвоичныеДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
		ОписаниеФайла.ИмяФайла = ИмяФайла;
		ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанные;
		
		ОписанияФайлов.Вставить(ФайлСообщения, ОписаниеФайла);
		
	КонецЦикла;
	
	Возврат ОписанияФайлов;
	
КонецФункции

// Свойства доверенностей из результатов проверок подписей.
// 
// Параметры:
//  РезультатыПроверок - См. РезультатыПроверокПодписейФайлаПоМЧД
// 
// Возвращаемое значение:
//  См. МашиночитаемыеДоверенности.ОбщиеСвойстваДоверенностей
Функция СвойстваДоверенностейИзРезультатовПроверокПодписей(РезультатыПроверок) Экспорт
	
	СвойстваДоверенности = МашиночитаемыеДоверенности.НовыеОбщиеСвойстваДоверенности();
	
	// При отсутствии доверенности, проверки будут осуществляться по пустой ссылке из структуры, определяя ее наличие
	СвойстваДоверенностей = Новый Соответствие;
	СвойстваДоверенностей.Вставить(Справочники.МашиночитаемыеДоверенностиКонтрагентов.ПустаяСсылка(),
		СвойстваДоверенности);
	СвойстваДоверенностей.Вставить(Справочники.МашиночитаемыеДоверенностиОрганизаций.ПустаяСсылка(),
		СвойстваДоверенности);
	СвойстваДоверенностей.Вставить(Справочники.МЧД003.ПустаяСсылка(), СвойстваДоверенности);
	
	Если Не ЗначениеЗаполнено(РезультатыПроверок) Тогда
		Возврат СвойстваДоверенностей;
	КонецЕсли;
	
	Доверенности = Новый Массив;
	
	Для Каждого РезультатПроверки Из РезультатыПроверок Цикл
		Доверенность = РезультатПроверки.Значение.Доверенность;
		Если ЗначениеЗаполнено(Доверенность) Тогда
			Доверенности.Добавить(Доверенность);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Доверенности) Тогда
		Возврат СвойстваДоверенностей;
	КонецЕсли;
	
	СвойстваДоверенностей = МашиночитаемыеДоверенности.ОбщиеСвойстваДоверенностей(Доверенности);
	
	Возврат СвойстваДоверенностей;
	
КонецФункции

// Возвращает набор данных МЧД для запроса сведений о статусах.
// 
// Параметры:
//  СоответствиеИННДоверителяСНомерамиМЧД - Соответствие Из КлючИЗначение
//  НомераМЧД - Массив из Строка
//  ИННПредставителя - Строка
// 
// Возвращаемое значение:
//  Массив из См. МашиночитаемыеДоверенности.НовыеДанныеДоверенности
Функция НаборДанныхМЧДДляЗапросаСведенийОСтатусах(СоответствиеИННДоверителяСНомерамиМЧД, НомераМЧД, ИННПредставителя)
	
	НаборДанныхМЧД = Новый Массив;
	
	Для Каждого НомерМЧД Из НомераМЧД Цикл
		
		ДанныеМЧД = МашиночитаемыеДоверенности.НовыеДанныеДоверенности();
		ДанныеМЧД.ИННДоверителя = СоответствиеИННДоверителяСНомерамиМЧД.Получить(НомерМЧД);
		ДанныеМЧД.ИННПредставителя = ИННПредставителя;
		ДанныеМЧД.НомерДоверенности = НомерМЧД;
		
		НаборДанныхМЧД.Добавить(ДанныеМЧД);
		
	КонецЦикла;
	
	Возврат НаборДанныхМЧД;
	
КонецФункции

// Дополняет сведения о статусах МЧД организаций.
// 
// Параметры:
//  СведенияОСтатусахМЧД - См. МашиночитаемыеДоверенности.СведенияОСтатусахДоверенностейОрганизаций
//  НаборДанныхМЧД - Массив из См. МашиночитаемыеДоверенности.НовыеДанныеДоверенности
//  ЭтоМЧДКонтрагента - Булево
//
Процедура ДополнитьСведенияОСтатусахМЧДОрганизаций(СведенияОСтатусахМЧД, НаборДанныхМЧД, ЭтоМЧДКонтрагента)
	
	Индекс = НаборДанныхМЧД.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		
		ДанныеМЧД = НаборДанныхМЧД[Индекс];
		Если СведенияОСтатусахМЧД[ДанныеМЧД.НомерДоверенности] <> Неопределено Тогда
			НаборДанныхМЧД.Удалить(Индекс);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоМЧДКонтрагента Тогда
		НовыеСведенияОСтатусахМЧД = МашиночитаемыеДоверенности.СведенияОСтатусахДоверенностейКонтрагентов(НаборДанныхМЧД);
	Иначе
		НовыеСведенияОСтатусахМЧД = МашиночитаемыеДоверенности.СведенияОСтатусахДоверенностейОрганизаций(НаборДанныхМЧД);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(СведенияОСтатусахМЧД, НовыеСведенияОСтатусахМЧД);
	
КонецПроцедуры

// Возвращает результат получения сведений о статусе МЧД по представителю.
// 
// Параметры:
//  СведенияОСтатусахМЧД - См. МашиночитаемыеДоверенности.СведенияОСтатусахДоверенностейОрганизаций
//  НомераМЧД - Массив из Строка
//  ИННПредставителя - Строка
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. МашиночитаемыеДоверенности.НовыеДанныеСтатусаМЧД
Функция СведенияОСтатусеМЧДПоПредставителю(СведенияОСтатусахМЧД, НомераМЧД, ИННПредставителя)
	
	Если НомераМЧД.Количество() = 1 Тогда
		Возврат СведенияОСтатусахМЧД[НомераМЧД[0]];
	КонецЕсли;
	
	Для Каждого НомерМЧД Из НомераМЧД Цикл
		Результат = СведенияОСтатусахМЧД[НомерМЧД];
		Если НЕ Результат.Ошибка
			И Результат.Сведения <> Неопределено
			И Результат.Сведения.ИННПредставителей.Найти(ИННПредставителя) <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает новые параметры ошибки проверки подписи по МЧД.
// 
// Возвращаемое значение:
//  Структура:
// * СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
// * СвойстваДоверенности - См. МашиночитаемыеДоверенности.ОбщиеСвойстваДоверенности
// * РезультатПроверки - См. НовыйРезультатПроверкиПодписиПоМЧД
// * ТекстОшибки - Строка
Функция НовыеПараметрыОшибкиПроверкиПодписиПоМЧД()
	Параметры = Новый Структура;
	Параметры.Вставить("СвойстваПодписи", Новый Структура);
	Параметры.Вставить("СвойстваДоверенности", Новый Структура);
	Параметры.Вставить("РезультатПроверки", Новый Структура);
	Параметры.Вставить("ТекстОшибки", "");
	Возврат Параметры;
КонецФункции

// Возвращает результаты проверок подписей по МЧД при регистрации сертификатов.
//
// Параметры:
//  НаборПараметровПроверок - Массив из См. ЭлектронныеДокументыЭДОКлиент.НовыеПараметрыПроверкиПодписиПоМЧДПриРегистрацииСертификата
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * Значение - См. МашиночитаемыеДоверенности.НовыеПараметрыПроверкиПодписи
Функция ПроверитьПодписиПоМЧДПриРегистрацииСертификатов(НаборПараметровПроверок, КонтекстДиагностики) Экспорт
	
	ПараметрыПроверок = Новый Соответствие;
	НаборСведенийОСтатусахМЧД = Новый Соответствие;
	
	НаборДоверенностей = Новый Массив;
	Для Каждого ПараметрыПроверки Из НаборПараметровПроверок Цикл
		Если НаборДоверенностей.Найти(ПараметрыПроверки.Доверенность) = Неопределено Тогда
			НаборДоверенностей.Добавить(ПараметрыПроверки.Доверенность);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(НаборДоверенностей, "Подписана, СтатусВРеестреФНС");
	
	НереестровыеМЧД = Новый Массив;
	НаборДоверенностей = Новый Массив;
	Для Каждого ЭлементСоответствия Из ДанныеМЧД Цикл
		МЧД = ЭлементСоответствия.Значение;
		ЭтоНереестроваяМЧД = МЧД.Подписана И НЕ ЗначениеЗаполнено(МЧД.СтатусВРеестреФНС);
		Если ЭтоНереестроваяМЧД Тогда
			НереестровыеМЧД.Добавить(ЭлементСоответствия.Ключ);
		Иначе
			НаборДоверенностей.Добавить(ЭлементСоответствия.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	НомераПоМЧД = МашиночитаемыеДоверенности.ПолучитьНомераДоверенностей(НаборДоверенностей);
	
	Для Каждого ПараметрыПроверкиСертификата Из НаборПараметровПроверок Цикл
		
		ПараметрыПроверки = МашиночитаемыеДоверенности.НовыеПараметрыПроверкиПодписи();
		
		Если Не ЗначениеЗаполнено(ПараметрыПроверкиСертификата.СвойстваПодписи.Сертификат) Тогда
			ПараметрыПроверки.ТекстОшибки = НСтр("ru = 'Не удалось извлечь сертификат из подписи файла заявления на регистрацию'");
		Иначе

			СертификатКриптографии = Новый СертификатКриптографии(ПараметрыПроверкиСертификата.СвойстваПодписи.Сертификат);
			ИННПредставителя = КриптографияБЭД.ИННСубъектаСертификата(СертификатКриптографии);
			ИННДоверителя = ПараметрыПроверкиСертификата.ИННДоверителя;
				
			Если НереестровыеМЧД.Найти(ПараметрыПроверкиСертификата.Доверенность) = Неопределено Тогда
				
				НомерМЧД = НомераПоМЧД[ПараметрыПроверкиСертификата.Доверенность];
				НомераМЧД = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НомерМЧД);
				
				СоответствиеИННДоверителяСНомерамиМЧД = Новый Соответствие();
				СоответствиеИННДоверителяСНомерамиМЧД.Вставить(НомерМЧД, ИННДоверителя);
				
				НаборДанныхМЧД = 
					НаборДанныхМЧДДляЗапросаСведенийОСтатусах(
						СоответствиеИННДоверителяСНомерамиМЧД, НомераМЧД, ИННПредставителя);
				
				ДополнитьСведенияОСтатусахМЧДОрганизаций(НаборСведенийОСтатусахМЧД, НаборДанныхМЧД, Ложь);
				
				СведенияОСтатусеМЧД = 
					СведенияОСтатусеМЧДПоПредставителю(НаборСведенийОСтатусахМЧД, НомераМЧД, ИННПредставителя);
					
				ПараметрыПроверки.ТребуетсяПроверкаМЧДНаКлиенте = СведенияОСтатусеМЧД.ТребуетсяПроверкаМЧДНаКлиенте; 
				
				ДанныеФайлаДоверенностиИПодписи = 
					МашиночитаемыеДоверенности.ДанныеФайлаДоверенностиИПодписи(ПараметрыПроверкиСертификата.Доверенность);
				
				ДанныеДляПроверки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД();
				ДанныеДляПроверки.ДанныеДоверенности = ДанныеФайлаДоверенностиИПодписи.ДанныеФайла;
				ДанныеДляПроверки.ДанныеПодписи = ДанныеФайлаДоверенностиИПодписи.ДанныеПодписи;
				
				ПараметрыПроверки.ДанныеДляПроверки = ДанныеДляПроверки;

				Если СведенияОСтатусеМЧД = Неопределено Тогда
					ПараметрыПроверки.ТекстОшибки =
						НСтр("ru = 'Произошла неизвестная ошибка при получении статуса МЧД из распределенного реестра'");
				
				ИначеЕсли СведенияОСтатусеМЧД.ОшибкаПолученияДанныхСРРФНС Тогда
					ПараметрыПроверки.ОшибкаПолученияДанныхСРРФНС = СведенияОСтатусеМЧД.ОшибкаПолученияДанныхСРРФНС;
					ПараметрыПроверки.ТекстОшибки = СведенияОСтатусеМЧД.ОписаниеОшибки;
					ПараметрыПроверки.СведенияМЧД = СведенияОСтатусеМЧД.Сведения;
				
				ИначеЕсли СведенияОСтатусеМЧД.Ошибка Тогда
					ПараметрыПроверки.ТекстОшибки =
						НСтр("ru = 'Не удалось получить статус МЧД из распределенного реестра по причине:'")
							+ Символы.ПС + СведенияОСтатусеМЧД.ОписаниеОшибки;
					ПараметрыПроверки.СведенияМЧД = СведенияОСтатусеМЧД.Сведения;
				Иначе
					ПараметрыПроверки.СведенияМЧД = СведенияОСтатусеМЧД.Сведения;
				КонецЕсли;
				
			Иначе
				
				СправочникМЧД = МашиночитаемыеДоверенности.СправочникМЧД(ПараметрыПроверкиСертификата.Доверенность);
				ПараметрыПроверки.СведенияМЧД = СправочникМЧД.СведенияМЧД(ПараметрыПроверкиСертификата.Доверенность);
				
			КонецЕсли;
			
			ПараметрыПроверки.ИННДоверителя = ИННДоверителя;
			
			Если ИННДоверителя = ПараметрыПроверки.СведенияМЧД.ИННДоверителяРодительскойДоверенности Тогда
				ПараметрыПроверки.ИННДоверителя = ПараметрыПроверки.СведенияМЧД.ИННДоверителя;
			КонецЕсли;
			
			ПараметрыПроверки.СвойстваПодписи = ПараметрыПроверкиСертификата.СвойстваПодписи;
			
		КонецЕсли;
		
		ПараметрыПроверок.Вставить(ПараметрыПроверкиСертификата.Сертификат, ПараметрыПроверки);
				
	КонецЦикла;
	
	Возврат ПараметрыПроверок;
	
КонецФункции

// Продолжает проверку подписей по МЧД при регистрации сертификатов, с дальнейшей обработкой результатов
//
// Параметры:
//  РезультатыПроверокПодписейПоМЧД - см. ПроверитьПодписиПоМЧДПриРегистрацииСертификатов
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * Значение - См. МашиночитаемыеДоверенности.ПроверитьПодпись
Функция ПроверитьПодписиПоМЧДПриРегистрацииСертификатовПродолжение(РезультатыПроверокПодписейПоМЧД, 
	КонтекстДиагностики) Экспорт

	РезультатПроверки = Новый Соответствие;
	
	Для Каждого ЭлементНабора Из РезультатыПроверокПодписейПоМЧД Цикл
		
		Сертификат = ЭлементНабора.Ключ;
		ПараметрыПроверки = ЭлементНабора.Значение;
		
		РезультатПроверкиПодписи = МашиночитаемыеДоверенности.ПроверитьПодпись(ПараметрыПроверки);
		РезультатПроверки.Вставить(Сертификат, РезультатПроверкиПодписи);
		
		СвойстваДоверенности = 
			МашиночитаемыеДоверенности.ОбщиеСвойстваДоверенности(РезультатПроверкиПодписи.Доверенность);
			
		ПараметрыОшибки = НовыеПараметрыОшибкиПроверкиПодписиПоМЧД();
		ПараметрыОшибки.СвойстваПодписи = ПараметрыПроверки.СвойстваПодписи;
		ПараметрыОшибки.СвойстваДоверенности = СвойстваДоверенности;
		ПараметрыОшибки.РезультатПроверки = РезультатПроверкиПодписи;
			
		Если Не РезультатПроверкиПодписи.ПодписьВерна Тогда
			ПараметрыОшибки.ТекстОшибки = 
				НСтр("ru = 'Электронная подпись заявления на регистрацию сертификата не верна.'");
			ДобавитьОшибкуПроверкиПодписиПоМЧД(КонтекстДиагностики, ПараметрыОшибки);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПараметрыПроверки.ТекстОшибки) Тогда
			ПараметрыОшибки.ТекстОшибки = ПараметрыПроверки.ТекстОшибки;
			ДобавитьОшибкуПроверкиПодписиПоМЧД(КонтекстДиагностики, ПараметрыОшибки);
			Продолжить;
		КонецЕсли;
		
		МЧД = ПараметрыПроверки.СведенияМЧД.Ссылка;
		МашиночитаемыеДоверенности.ОтразитьРезультатПроверкиМЧД(МЧД, ПараметрыПроверки.СведенияМЧД.Верна, 
			ПараметрыПроверки.ТекстОшибки);
		
	КонецЦикла; 

	Возврат РезультатПроверки;
	
КонецФункции

// Возвращает имена файлов сообщений для проверки по МЧД.
// 
// Параметры:
//  ФайлыСообщений - Массив из СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * Значение - Строка - Имя файла
Функция ИменаФайловСообщенийДляПроверкиПоМЧД(ФайлыСообщений)
	
	ИменаФайловСообщений = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщениеЭДОПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	СообщениеЭДОПрисоединенныеФайлы.ПолноеИмяФайла КАК ПолноеИмяФайла
		|ИЗ
		|	Справочник.СообщениеЭДОПрисоединенныеФайлы КАК СообщениеЭДОПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО СообщениеЭДОПрисоединенныеФайлы.ВладелецФайла = СообщениеЭДО.Ссылка
		|ГДЕ
		|	СообщениеЭДОПрисоединенныеФайлы.Ссылка В (&ФайлыСообщений)
		|	И СообщениеЭДОПрисоединенныеФайлы.Расширение В (""xml"", ""zip"")
		|	И СообщениеЭДО.ТипЭлементаРегламента = &ТипЭлементаРегламента";
	
	Запрос.УстановитьПараметр("ФайлыСообщений", ФайлыСообщений);
	Запрос.УстановитьПараметр("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ИменаФайловСообщений;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ИменаФайловСообщений.Вставить(Выборка.Ссылка, Выборка.ПолноеИмяФайла);
	КонецЦикла;
	
	Возврат ИменаФайловСообщений;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
// * СвойстваФайла - см. НовыеСвойстваФайла
// * СвойстваСообщения - см. НовыеСвойстваСообщения
// * СвойстваДокумента - см. НовыеСвойстваФайла
//
Функция НовыеСведенияОПодписанныхОбъектах()
	Сведения = Новый Структура;
	Сведения.Вставить("СвойстваФайла", НовыеСвойстваФайла());
	Сведения.Вставить("СвойстваСообщения", НовыеСвойстваСообщения());
	Сведения.Вставить("СвойстваДокумента", НовыеСвойстваДокумента());
	Возврат Сведения;
КонецФункции

// Возвращаемое значение:
// 	Структура:
//  * Ссылка - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * СообщениеЭДО - ДокументСсылка.СообщениеЭДО
//  * ПолноеИмяФайла - Строка
//
Функция НовыеСвойстваФайла()
	Свойства = Новый Структура;
	Свойства.Вставить("Ссылка", Справочники.СообщениеЭДОПрисоединенныеФайлы.ПустаяСсылка());
	Свойства.Вставить("СообщениеЭДО", Документы.СообщениеЭДО.ПустаяСсылка());
	Свойства.Вставить("ПолноеИмяФайла", "");
	Возврат Свойства;
КонецФункции

// Возвращаемое значение:
// 	Структура:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//           - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.КонтрагентБЭД
//  * ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//
Функция НовыеСвойстваДокумента()
	Свойства = Новый Структура;
	Свойства.Вставить("Ссылка", Документы.ЭлектронныйДокументИсходящийЭДО.ПустаяСсылка());
	Свойства.Вставить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип.ПривестиЗначение());
	Свойства.Вставить("Контрагент", Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип.ПривестиЗначение());
	Свойства.Вставить("ТипРегламента", Перечисления.ТипыРегламентовЭДО.ПустаяСсылка());
	Возврат Свойства;
КонецФункции

// Сведения необходимые для проверки подписи файлов по МЧД
// 
// Параметры:
//  ФайлыСообщений - Массив Из СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы - проверяемый файл
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//   * Значение - См. НовыеСведенияОПодписанныхОбъектах
//
Функция СведенияОПодписанныхОбъектах(ФайлыСообщений) Экспорт
	
	Запрос = Новый Запрос;
	МенеджерТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ссылка,
	|	ВладелецФайла КАК СообщениеЭДО,
	|	ПолноеИмяФайла
	|ПОМЕСТИТЬ СвойстваФайла
	|ИЗ
	|	Справочник.СообщениеЭДОПрисоединенныеФайлы КАК СвойстваФайла
	|ГДЕ
	|	Ссылка В (&ФайлыСообщений)
	|;
	|
	|ВЫБРАТЬ
	|	СвойстваФайла.СообщениеЭДО КАК Ссылка,
	|	СвойстваФайла.Ссылка КАК Файл,
	|	СвойстваФайла.СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	СвойстваФайла.СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
	|	СвойстваФайла.СообщениеЭДО.Направление КАК Направление,
	|	СвойстваФайла.СообщениеЭДО.Состояние КАК Состояние,
	|	СвойстваФайла.СообщениеЭДО.Статус КАК Статус
	|ПОМЕСТИТЬ СвойстваСообщения
	|ИЗ
	|	СвойстваФайла КАК СвойстваФайла
	|;
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокумент КАК Ссылка,
	|	ЭлектронныйДокумент.Организация КАК Организация,
	|	ЭлектронныйДокумент.Контрагент КАК Контрагент,
	|	ЭлектронныйДокумент.ТипРегламента КАК ТипРегламента,
	|	Файл КАК Файл
	|ПОМЕСТИТЬ СвойстваДокумента
	|ИЗ
	|	СвойстваСообщения КАК СвойстваСообщения
	|";
	
	Запрос.УстановитьПараметр("ФайлыСообщений", ФайлыСообщений);
	Запрос.Выполнить();
	
	Результат = Новый Соответствие;
	
	ВыборкаСвойстваФайла = МенеджерТаблиц.Таблицы.Получить("СвойстваФайла").ПолучитьДанные().Выбрать();
	Пока ВыборкаСвойстваФайла.Следующий() Цикл
		Сведения = Результат.Получить(ВыборкаСвойстваФайла.Ссылка);
		Если Сведения = Неопределено Тогда
			Сведения = НовыеСведенияОПодписанныхОбъектах();
			Результат.Вставить(ВыборкаСвойстваФайла.Ссылка, Сведения);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Сведения.СвойстваФайла, ВыборкаСвойстваФайла);
	КонецЦикла; 
		
	ВыборкаСвойстваСообщения = МенеджерТаблиц.Таблицы.Получить("СвойстваСообщения").ПолучитьДанные().Выбрать();
	Пока ВыборкаСвойстваСообщения.Следующий() Цикл
		Сведения = Результат.Получить(ВыборкаСвойстваСообщения.Файл);
		Если Сведения = Неопределено Тогда
			Сведения = НовыеСведенияОПодписанныхОбъектах();
			Результат.Вставить(ВыборкаСвойстваСообщения.Файл, Сведения);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Сведения.СвойстваСообщения, ВыборкаСвойстваСообщения);
	КонецЦикла;
	
	ВыборкаСвойстваДокумента = МенеджерТаблиц.Таблицы.Получить("СвойстваДокумента").ПолучитьДанные().Выбрать();
	Пока ВыборкаСвойстваДокумента.Следующий() Цикл
		Сведения = Результат.Получить(ВыборкаСвойстваДокумента.Файл);
		Если Сведения = Неопределено Тогда
			Сведения = НовыеСведенияОПодписанныхОбъектах();
			Результат.Вставить(ВыборкаСвойстваДокумента.Файл, Сведения);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Сведения.СвойстваДокумента, ВыборкаСвойстваДокумента);
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
