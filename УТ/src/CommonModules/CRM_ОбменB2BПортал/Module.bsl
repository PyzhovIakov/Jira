
#Область ПрограммныйИнтерфейс

#Область ВыполнениеОбмена

// Процедура выполняет подготовку изменений перед записью документа.
//
// Параметры:
//  Источник		 - ДокументСсылка	 - Ссылка на документ.
//  Отказ			 - Булево	 - Отказ
//  РежимЗаписи		 - РежимЗаписиДокумента	 - Режим записи.
//  РежимПроведения	 - РежимПроведенияДокумента	 - Режим проведения.
//
Процедура ПодготовитьИзмененияПередЗаписью(Источник, Отказ, РежимЗаписи = Неопределено,
	 РежимПроведения = Неопределено) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НеРегистрироватьИзменения") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("CRM_ИспользоватьОбменB2BПортал") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНовый = Источник.ЭтоНовый();
	
	Если Не Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый);
	КонецЕсли;
	
	ТипОбъекта = ТипЗнч(Источник);
	Если ТипОбъекта = Тип("СправочникОбъект.КонтактныеЛицаПартнеров") Тогда
		Если ЭтоНовый Тогда
			ПодключенКB2BПорталу = Ложь;
		Иначе
			ПодключенКB2BПорталу = Источник.Ссылка.CRM_ПодключенКB2BПорталу;
		КонецЕсли;
		Источник.ДополнительныеСвойства.Вставить("ПодключенКB2BПорталу", ПодключенКB2BПорталу);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет регистрацию изменений при записи.
//
// Параметры:
//  Источник - ДокументСсылка	 - Источник.
//  Отказ	 - Булево	 - Отказ.
//
Процедура ЗарегистрироватьИзмененияПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НеРегистрироватьИзменения") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("CRM_ИспользоватьОбменB2BПортал") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РегистрироватьОбъект(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Узел = ПланыОбмена.CRM_ОбменB2BПортал.НайтиПоКоду("01");
	Если Не ЗначениеЗаполнено(Узел) Тогда
		ТекстОшибки = НСтр("ru = 'Не обнаружен узел плана обмена с B2B порталом.'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ПланыОбмена.ЗарегистрироватьИзменения(Узел, Источник.Ссылка);
	
	ТипОбъекта = ТипЗнч(Источник);
	Если ТипОбъекта = Тип("СправочникОбъект.КонтактныеЛицаПартнеров") Тогда
		
		ПодключенКB2BПорталуПрежний = Источник.ДополнительныеСвойства.ПодключенКB2BПорталу;
		ПодключенКB2BПорталуНовый = Источник.CRM_ПодключенКB2BПорталу;
		
		Если ПодключенКB2BПорталуНовый И Не ПодключенКB2BПорталуПрежний Тогда
			// Подключение
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, Источник.Владелец);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - выполнение обмена.
//
Процедура ВыполнитьОбмен() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.CRM_ОбменB2BПортал);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("CRM_ИспользоватьОбменB2BПортал") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбмена = ПараметрыОбмена();
	Если ПараметрыОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеОбмена = ПолучитьДанныеПоHTTP(ПараметрыОбмена);
	ПрочитатьСообщениеОбмена(СообщениеОбмена);
	
	СообщениеОбмена = СоздатьСообщениеОбмена();
	ОтправитьДанныеПоHTTP(СообщениеОбмена, ПараметрыОбмена);
	
КонецПроцедуры

// Функция создает сообщение обмена в формате JSON.
// 
// Возвращаемое значение:
//   - ЗаписьJSON
//
Функция СоздатьСообщениеОбмена() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Узел = ПланыОбмена.CRM_ОбменB2BПортал.НайтиПоКоду("01");
	Если Не ЗначениеЗаполнено(Узел) Тогда
		ТекстОшибки = НСтр("ru = 'Не обнаружен узел плана обмена с B2B порталом.'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат "";
	КонецЕсли;
	
	Данные = Новый Массив;
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, Узел);
	НомерСообщения = ЗаписьСообщения.НомерСообщения;
	
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Узел, НомерСообщения);
	Пока ВыборкаИзменений.Следующий() Цикл
		Данные.Добавить(ВыборкаИзменений.Получить());
	КонецЦикла;
	
	ЗаписьСообщения.ЗакончитьЗапись();
	
	ВерсияФормата = ВерсияФорматаОбмена();
	ЗаголовокСообщения = СтрЗаменить(ЗаписьXML.Закрыть(), "CRM_ОбменB2BПортал", "УзлыОбмена");
	ТелоСообщения = СформироватьТелоСообщения(Данные);
	
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("Version",	ВерсияФормата);
	ДанныеСообщения.Вставить("Header",	ЗаголовокСообщения);
	ДанныеСообщения.Вставить("Body",	ТелоСообщения);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, ДанныеСообщения);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Процедура выполняет чтения сообщения обмена.
//
// Параметры:
//  СообщениеОбмена	 - Строка	 - Сообщение обмена.
//
Процедура ПрочитатьСообщениеОбмена(СообщениеОбмена) Экспорт
	
	Если Не ЗначениеЗаполнено(СообщениеОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СообщениеОбмена);
	ДанныеСообщения = ПрочитатьJSON(ЧтениеJSON, , , ФорматДатыJSON.ISO);
	Если Не ПроверитьПолученноеСообщение(ДанныеСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокСообщения = СтрЗаменить(ДанныеСообщения.Header, "УзлыОбмена", "CRM_ОбменB2BПортал");
	
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ЗаголовокСообщения);
	
	НачатьТранзакцию();
	
	Попытка
		
		ЧтениеСообщения.НачатьЧтение(ЧтениеXML, ДопустимыйНомерСообщения.Больший);
		ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
		
		ЗаписатьДанныеТелаСообщения(ДанныеСообщения.Body);
		ЧтениеСообщения.ЗакончитьЧтение();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		ЧтениеСообщения.ПрерватьЧтение();
		
	КонецПопытки;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

// Функция возвращает версия формата обмена.
// 
// Возвращаемое значение:
//   - Строка
//
Функция ВерсияФорматаОбмена() Экспорт
	Возврат "1";
КонецФункции

// Функция выполняет необходимые действия при включении обмена.
// 
// Возвращаемое значение:
//   - Нет
//
Функция ДействияПриВключенииОбмена() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Настройка узлов обмена
	ЭтотУзел = ПланыОбмена.CRM_ОбменB2BПортал.ЭтотУзел();
	Если Не ЗначениеЗаполнено(ЭтотУзел.Код) Тогда
		
		УзелОбъект = ЭтотУзел.ПолучитьОбъект();
		УзелОбъект.ОбменДанными.Загрузка = Истина;
		УзелОбъект.Код = "00";
		УзелОбъект.Наименование = НСтр("ru = 'Этот узел'");
		УзелОбъект.Записать();
		
	КонецЕсли;
	
	УзелПортал = ПланыОбмена.CRM_ОбменB2BПортал.НайтиПоКоду("01");
	Если Не ЗначениеЗаполнено(УзелПортал) Тогда
		
		УзелОбъект = ПланыОбмена.CRM_ОбменB2BПортал.СоздатьУзел();
		УзелОбъект.ОбменДанными.Загрузка = Истина;
		УзелОбъект.Код = "01";
		УзелОбъект.Наименование = НСтр("ru = 'Портал B2B'");
		УзелОбъект.Записать();
		
	КонецЕсли;
	
	// Регистрация начальных данных.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТипыОбращений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_ТипыОбращений КАК ТипыОбращений
	|ГДЕ
	|	НЕ ТипыОбращений.Ссылка = ЗНАЧЕНИЕ(Справочник.CRM_ТипыОбращений.Интерес)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		ПодготовитьИзмененияПередЗаписью(Объект, Ложь);
		ЗарегистрироватьИзмененияПриЗаписи(Объект, Ложь);
	КонецЦикла;
	
	// Включение мессенджера.
	УчетнаяЗаписьОбъект = Справочники.CRM_УчетныеЗаписиМессенджеров.B2BПортал.ПолучитьОбъект();
	УчетнаяЗаписьОбъект.Включена = Истина;
	УчетнаяЗаписьОбъект.Записать();
	
КонецФункции

// Функция выполняет необходимые действия при выключении обмена.
// 
// Возвращаемое значение:
//   - Нет
//
Функция ДействияПриВыключенииОбмена() Экспорт
	// Выключение мессенджера.
	УчетнаяЗаписьОбъект = Справочники.CRM_УчетныеЗаписиМессенджеров.B2BПортал.ПолучитьОбъект();
	УчетнаяЗаписьОбъект.Включена = Ложь;
	УчетнаяЗаписьОбъект.Записать();
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область УправлениеПорталом
// Сбрасывает пароль пользователя портала. Пользователь получит письмо с новым случайнвм паролем
//
// Параметры:
//  КонтактноеЛицоПартнера	 - Справочник.КонтактныеЛицаПартнеров	 - контактное лицо партнера
//  ОписаниеОшибки			 - Строка - возвращаемое описание ошибки										 - 
// 
// Возвращаемое значение:
//  Булево - рещультат выполнения функции
//
Функция СброситьПарольПользователя(КонтактноеЛицоПартнера, ОписаниеОшибки = "") Экспорт 
	
	ПараметрыОбмена = CRM_ОбменB2BПортал.ПараметрыОбмена();
	
	Если ПараметрыОбмена = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Соединение = CRM_ОбменB2BПортал.ЗащищенноеСоединение(ПараметрыОбмена);
	Если Соединение = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Токен = CRM_ОбменB2BПортал.ПолучитьТокенАвторизации(Соединение, ПараметрыОбмена);
	Если ПустаяСтрока(Токен) Тогда
		Возврат "";
	КонецЕсли;
	
	ТелоЗапроса = ПолучитьТелоЗапросаСбросаПароля(КонтактноеЛицоПартнера);
	ИмяМетода = "api/crmintegration/users/resetpassword";
	HTTPЗапрос = CRM_ОбменB2BПортал.ПодготовитьHTTPЗапрос(
	ПараметрыОбмена.ПутьНаСервере + "/" + ИмяМетода, , ТелоЗапроса, Токен);
	
	Попытка
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Ошибка, ,	,
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат "";
	КонецПопытки;
	
	ТекстОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		
		ТекстОшибки = НСтр("ru = 'Запрос ""%1"" не выполнен. Код состояния: %2.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстОшибки, ИмяМетода, HTTPОтвет.КодСостояния) + Символы.ПС + ТекстОтвета;
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
		ОписаниеОшибки = ТекстОшибки;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции
#КонецОбласти

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбменЧерезHTTPСервис

Функция ПараметрыОбмена() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Узел = ПланыОбмена.CRM_ОбменB2BПортал.НайтиПоКоду("01");
	Если Не ЗначениеЗаполнено(Узел) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("URL",			"");
	Параметры.Вставить("Схема",			"https");
	Параметры.Вставить("Хост",			"");
	Параметры.Вставить("Порт",			Неопределено);
	Параметры.Вставить("ПутьНаСервере",	"");
	Параметры.Вставить("Логин",			"");
	Параметры.Вставить("Пароль",		"");
	Параметры.Вставить("Таймаут",		0);
	
	ЗаполнитьЗначенияСвойств(Параметры, Узел);
	
	ДанныеURL = ОбщегоНазначенияКлиентСервер.СтруктураURI(Параметры.URL);
	ЗаполнитьЗначенияСвойств(Параметры, ДанныеURL, , "Логин,Пароль");
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьДанныеПоHTTP(ПараметрыОбмена) Экспорт
	
	Соединение = ЗащищенноеСоединение(ПараметрыОбмена);
	Если Соединение = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Токен = ПолучитьТокенАвторизации(Соединение, ПараметрыОбмена);
	Если ПустаяСтрока(Токен) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроверитьВерсиюФормата(Соединение, Токен, ПараметрыОбмена) Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяМетода = "api/crmexchange/getchanges";
	HTTPЗапрос = ПодготовитьHTTPЗапрос(ПараметрыОбмена.ПутьНаСервере + "/" + ИмяМетода, , , Токен);
	
	Попытка
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат "";
	КонецПопытки;
	
	ТекстОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		
		ТекстОшибки = НСтр("ru = 'Запрос ""%1"" не выполнен. Код состояния: %2.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстОшибки, ИмяМетода, HTTPОтвет.КодСостояния) + Символы.ПС + ТекстОтвета;
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ТекстОтвета;
	
КонецФункции

Процедура ОтправитьДанныеПоHTTP(СообщениеОбмена, ПараметрыОбмена) Экспорт
	
	Если Не ЗначениеЗаполнено(СообщениеОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Соединение = ЗащищенноеСоединение(ПараметрыОбмена);
	Если Соединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Токен = ПолучитьТокенАвторизации(Соединение, ПараметрыОбмена);
	Если ПустаяСтрока(Токен) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьВерсиюФормата(Соединение, Токен, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяМетода = "api/crmexchange/putchanges";
	HTTPЗапрос = ПодготовитьHTTPЗапрос(ПараметрыОбмена.ПутьНаСервере + "/" + ИмяМетода, , СообщениеОбмена, Токен);
	
	Попытка
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	ТекстОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		
		ТекстОшибки = НСтр("ru = 'Запрос ""%1"" не выполнен. Код состояния: %2.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстОшибки, ИмяМетода, HTTPОтвет.КодСостояния) + Символы.ПС + ТекстОтвета;
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьВерсиюФормата(Соединение, ТокенАвторизации, ПараметрыОбмена) Экспорт
	
	ИмяМетода = "api/crmexchange/version";
	HTTPЗапрос = ПодготовитьHTTPЗапрос(ПараметрыОбмена.ПутьНаСервере + "/" + ИмяМетода, , , ТокенАвторизации);
	
	Попытка
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	ТекстОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		
		ТекстОшибки = НСтр("ru = 'Запрос ""%1"" не выполнен. Код состояния: %2.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки, ИмяМетода, HTTPОтвет.КодСостояния) + Символы.ПС + ТекстОтвета;
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	ВерсияФормата = ВерсияФорматаОбмена();
	Если ТекстОтвета <> ВерсияФормата Тогда
		ТекстОшибки = НСтр("ru = 'Несовпадение версий формата обмена: в текущей базе %1, в приемнике %2.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки, ВерсияФормата, ТекстОтвета);
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьТокенАвторизации(Соединение, ПараметрыОбмена) Экспорт
	
	ИмяМетода = "sys/token";
	ДанныеБазовойАвторизации = ЗакодироватьСтрокуВBase64(ПараметрыОбмена.Логин + ":" + ПараметрыОбмена.Пароль);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Authorization", "Basic " + ДанныеБазовойАвторизации);
	
	HTTPЗапрос = ПодготовитьHTTPЗапрос(ПараметрыОбмена.ПутьНаСервере + "/" + ИмяМетода,
		Заголовки, "grant_type=CLIENT_CREDENTIALS");
	
	Попытка
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат "";
	КонецПопытки;
	
	ТекстОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		
		ТекстОшибки = НСтр("ru = 'Запрос ""%1"" не выполнен. Код состояния: %2.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки, ИмяМетода, HTTPОтвет.КодСостояния) + Символы.ПС + ТекстОтвета;
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат "";
		
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
	ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON);
	
	Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("id_token") Тогда
		Возврат ДанныеОтвета.id_token;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ЗащищенноеСоединение(ПараметрыОбмена) Экспорт
	
	Соединение = Неопределено;
	
	Попытка
		
		ЗащищенноеСоединение = Неопределено;
		Если ПараметрыОбмена.Схема = "https" Тогда
			ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		КонецЕсли;
		
		Соединение = Новый HTTPСоединение(
			ПараметрыОбмена.Хост,
			ПараметрыОбмена.Порт,
			ПараметрыОбмена.Логин,
			ПараметрыОбмена.Пароль,
			ПолучениеФайловИзИнтернета.ПолучитьПрокси(ПараметрыОбмена.Схема),
			ПараметрыОбмена.Таймаут,
			ЗащищенноеСоединение);
		
	Исключение
		
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

Функция ПодготовитьHTTPЗапрос(АдресРесурса,
	ЗаголовкиЗапроса = Неопределено, ТелоЗапроса = Неопределено, ТокенАвторизации = Неопределено) Экспорт
	
	Если ЗаголовкиЗапроса <> Неопределено Тогда
		Заголовки = ЗаголовкиЗапроса;
	Иначе
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
	КонецЕсли;
	
	Если ТокенАвторизации <> Неопределено Тогда
		Заголовки.Вставить("Authorization", "Bearer " + ТокенАвторизации);
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Если ТелоЗапроса <> Неопределено Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	КонецЕсли;
	
	Возврат HTTPЗапрос;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Сериализует переданное значение в строку в формате JSON.
// Преобразование выполняется на базе метода ЗаписатьJSON.
// В случае ошибки сериализации генерирует исключение.
//
// Параметры:
//  Значение - Произвольный - Любое значение поддерживающее сериализацию в JSON.
// 
// Возвращаемое значение:
//  Строка - Строка в формате JSON.
// 
// BSLLS:Typo-off
Функция СериализоватьJSON(Значение) Экспорт
// BSLLS:Typo-on

	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(
		ПереносСтрокJSON.Авто,
		"    ",
		Истина,
		ЭкранированиеСимволовJSON.Нет,
		Ложь, // ЭкранироватьУгловыеСкобки
		Ложь, // ЭкранироватьРазделителиСтрок
		Истина); // ЭкранироватьАмперсанд
		
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	ЗаписатьJSON(ЗаписьJSON, Значение);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции  

// Десериализует переданное значение в строку в формате JSON.
// Преобразование выполняется на базе метода ЗаписатьJSON.
// В случае ошибки сериализации генерирует исключение.
//
// Параметры:
//  Значение - Произвольный - Любое значение поддерживающее сериализацию в JSON.
// 
// Возвращаемое значение:
//  Строка - Строка в формате JSON.
//
Функция ДесериализоватьJSON(Значение) Экспорт

    ЧтениеJSON = Новый ЧтениеJSON;
    ЧтениеJSON.УстановитьСтроку(Значение);
    
    Возврат ПрочитатьJSON(ЧтениеJSON);

КонецФункции

// Функция определяет, подключен партнер к порталу или нет.
//
// Параметры:
//  Партнер	 - Справочники.Партнеры.Ссылка	 -   партнер, для которого выполняется проверка
// 
// Возвращаемое значение:
//  Булево - результат функции
//
Функция ПартнерПодключенКПорталу(Партнер) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	                      |ГДЕ
	                      |	КонтактныеЛицаПартнеров.Владелец = &Партнер
	                      |	И КонтактныеЛицаПартнеров.CRM_ПодключенКB2BПорталу");
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Прверяет наличие диалога B2B портала у обращения
//
// Параметры:
//  Обращение  - Документы.CRM_Интерес - ссылка на обращение
//
// Возвращаемое значение:
//   Булево   - признак наличия диалога
//
Функция ЕстьДиалогОбращения(Обращение) Экспорт  
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВЫРАЗИТЬ(CRM_ЖурналДокументов.Объект КАК Справочник.CRM_Диалоги) КАК Объект
	                      |ИЗ
	                      |	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
	                      |ГДЕ
	                      |	CRM_ЖурналДокументов.CRM_Интерес = &Интерес
	                      |	И CRM_ЖурналДокументов.Объект.УчетнаяЗапись = &УчетнаяЗапись");
	Запрос.УстановитьПараметр("Интерес", Обращение);
	Запрос.УстановитьПараметр("УчетнаяЗапись", Справочники.CRM_УчетныеЗаписиМессенджеров.B2BПортал);
	
	Результат = Запрос.Выполнить();
	
	Возврат ?(Результат.Пустой(), Ложь, Истина);
	
КонецФункции // () 

#КонецОбласти

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьПолученноеСообщение(ДанныеСообщения)
	
	Если ТипЗнч(ДанныеСообщения) <> Тип("Структура") Тогда
		ТекстОшибки = НСтр("ru = 'Неправильная структура сообщения обмена.'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ДанныеСообщения.Свойство("Version") Тогда
		ТекстОшибки = НСтр("ru = 'В сообщении обмена отсутствуют данные версии формата обмена.'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ДанныеСообщения.Свойство("Header") Тогда
		ТекстОшибки = НСтр("ru = 'В сообщении обмена отсутствуют данные заголовка.'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ДанныеСообщения.Свойство("Body") Тогда
		ТекстОшибки = НСтр("ru = 'В сообщении обмена отсутствуют данные объектов.'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ВерсияФормата = ВерсияФорматаОбмена();
	Если ВерсияФормата <> ДанныеСообщения.Version Тогда
		ТекстОшибки = НСтр("ru = 'Несовпадение версий формата обмена: в текущей базе %1, в источнике %2.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки, ВерсияФормата, ДанныеСообщения.Version);
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеСообщения.Body) <> Тип("Массив") Тогда
		ТекстОшибки = НСтр("ru = 'Неправильная структура сообщения обмена.'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СформироватьТелоСообщения(Данные)
	
	Настройки = НастройкиСоответствия();
	ТелоСообщения = Новый Массив;
	
	Для Каждого ДанныеОбъекта Из Данные Цикл
		
		Объект = Новый Структура;
		
		МетаданныеОбъекта = ДанныеОбъекта.Метаданные();
		ИмяОбъекта = МетаданныеОбъекта.Имя;
		
		Если Настройки.ИменаОбъектов.Получить(ИмяОбъекта) = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Сериализация объекта %1 не реализована.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
			МетаданныеОбъекта.ПолноеИмя);
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		Объект.Вставить("Имя", Настройки.ИменаОбъектов[ИмяОбъекта]);
		Объект.Вставить("Ид", Строка(ДанныеОбъекта.Ссылка.УникальныйИдентификатор()));
		Объект.Вставить("Свойства", Новый Массив);
		Объект.Вставить("Параметры", Новый Массив);
		
		СформироватьСвойстваОбъекта(Объект, ИмяОбъекта, ДанныеОбъекта, Настройки);
		СформироватьПараметрыОбъекта(Объект, ИмяОбъекта, ДанныеОбъекта, Настройки);
		
		Если ЭтоПрисоединенныйФайл(ИмяОбъекта) Тогда
			ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ДанныеОбъекта.Ссылка, Ложь);
			Если ДвоичныеДанные <> Неопределено Тогда
				Объект.Вставить("ДвоичныеДанные", Base64Строка(ДвоичныеДанные));
			КонецЕсли;
		КонецЕсли;
		
		ТелоСообщения.Добавить(Объект);
		
	КонецЦикла;
	
	Возврат ТелоСообщения;
	
КонецФункции

Процедура СформироватьСвойстваОбъекта(Объект, ИмяОбъекта, ДанныеОбъекта, Настройки)
	
	СвойстваОбъекта = Настройки.СвойстваОбъектов[ИмяОбъекта];
	ТипыСвойствОбъекта = Настройки.ТипыСвойствОбъектов[ИмяОбъекта];
	
	Для Каждого КлючИЗначение Из СвойстваОбъекта Цикл
		
		Значение = ДанныеОбъекта[КлючИЗначение.Ключ];
		Если Не ЗначениеЗаполнено(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяВИсточнике = КлючИЗначение.Ключ;
		ИмяВПриемнике = КлючИЗначение.Значение;
		Тип = ТипыСвойствОбъекта[ИмяВИсточнике];
		
		Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Значение) Тогда
			
			МетаданныеЗначения = Значение.Метаданные();
			Если ОбщегоНазначения.ЭтоПеречисление(МетаданныеЗначения) Тогда
				Значение = ОбщегоНазначения.ИмяЗначенияПеречисления(Значение);
			Иначе
				Если Настройки.ИменаОбъектов.Получить(МетаданныеЗначения.Имя) = Неопределено Тогда
					Значение = Строка(Значение);
				Иначе
					Значение = Строка(Значение.УникальныйИдентификатор());
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеСвойства = Новый Структура("Имя, Тип, Значение", ИмяВПриемнике, Тип, Значение);
		Объект.Свойства.Добавить(ДанныеСвойства);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьПараметрыОбъекта(Объект, ИмяОбъекта, ДанныеОбъекта, Настройки)
	
	ПараметрыОбъекта = Настройки.ПараметрыОбъектов[ИмяОбъекта];
	ТипыПараметровОбъекта = Настройки.ТипыПараметровОбъектов[ИмяОбъекта];
	
	Для Каждого КлючИЗначение Из ПараметрыОбъекта Цикл
		
		ИмяВИсточнике = КлючИЗначение.Ключ;
		ИмяВПриемнике = КлючИЗначение.Значение;
		Тип = ТипыПараметровОбъекта[ИмяВИсточнике];
		
		Значение = ПолучитьПараметрОбъекта(ИмяВИсточнике, ИмяОбъекта, ДанныеОбъекта);
		Если ЗначениеЗаполнено(Значение) Тогда
			ДанныеСвойства = Новый Структура("Имя, Тип, Значение", ИмяВПриемнике, Тип, Значение);
			Объект.Параметры.Добавить(ДанныеСвойства);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьДанныеТелаСообщения(ТелоСообщения)
	
	Настройки = НастройкиСоответствия(Ложь);
	
	Для Каждого ДанныеОбъекта Из ТелоСообщения Цикл
		
		ИмяОбъектаВИсточнике = ДанныеОбъекта.Имя;
		Если ИмяОбъектаВИсточнике = "ObjectDeletion" Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбъектаВПриемнике = Настройки.ИменаОбъектов[ИмяОбъектаВИсточнике];
		ТипОбъекта = Настройки.ТипыОбъектов[ИмяОбъектаВИсточнике];
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТипОбъекта + "." + ИмяОбъектаВПриемнике);
		СсылкаОбъекта = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеОбъекта.Ид));
		
		Если ЭтоПрисоединенныйФайл(ИмяОбъектаВПриемнике) Тогда
			
			ДвоичныеДанные = Base64Значение(ДанныеОбъекта.ДвоичныеДанные);
			АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			СвойстваФайла = СвойстваФайла(ДанныеОбъекта, Настройки);
			
			Если ОбщегоНазначения.СсылкаСуществует(СсылкаОбъекта) Тогда
				
				Объект = СсылкаОбъекта.Получитьобъект();
				//Объект.ДополнительныеСвойства.Вставить("НеРегистрироватьИзменения", Истина);
				
				ОбновитьДанныеФайла(Объект, ДвоичныеДанные, СвойстваФайла);
				
			Иначе
				
				ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла(СвойстваФайла);
				ПараметрыФайла.Вставить("ДополнительныеСвойства", Новый Структура("НеРегистрироватьИзменения", Истина));
				РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВХранилище, , , СсылкаОбъекта);
				
			КонецЕсли;
			
		Иначе
			
			Если ОбщегоНазначения.СсылкаСуществует(СсылкаОбъекта) Тогда
				Объект = СсылкаОбъекта.Получитьобъект();
			Иначе
				Если ТипОбъекта = "Справочник" Тогда
					Объект = МенеджерОбъекта.СоздатьЭлемент();
					Объект.УстановитьСсылкуНового(СсылкаОбъекта);
				ИначеЕсли ТипОбъекта = "Документ" Тогда
					Объект = МенеджерОбъекта.СоздатьДокумент();
					Объект.УстановитьСсылкуНового(СсылкаОбъекта);
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ЗаписатьСвойстваОбъекта(Объект, ИмяОбъектаВИсточнике, ДанныеОбъекта, Настройки);
			ЗаписатьПараметрыОбъекта(Объект, ИмяОбъектаВИсточнике, ДанныеОбъекта, Настройки);
			
			ПередЗаписьюОбъекта(ИмяОбъектаВПриемнике, Объект);
			
			Объект.ДополнительныеСвойства.Вставить("НеРегистрироватьИзменения", Истина);
			Объект.Записать();
			
			ПослеЗаписиОбъекта(ИмяОбъектаВПриемнике, Объект);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьСвойстваОбъекта(Объект, ИмяОбъекта, ДанныеОбъекта, Настройки)
	
	СвойстваОбъекта = Настройки.СвойстваОбъектов[ИмяОбъекта];
	ТипыСвойствОбъекта = Настройки.ТипыСвойствОбъектов[ИмяОбъекта];
	
	Для Каждого ДанныеСвойства Из ДанныеОбъекта.Свойства Цикл
		
		ИмяСвойстваВИсточнике = ДанныеСвойства.Имя;
		ИмяСвойстваВПриемнике = СвойстваОбъекта[ИмяСвойстваВИсточнике];
		ТипСвойстваВИсточнике = ДанныеСвойства.Тип;
		ТипСвойстваВПриемнике = ТипыСвойствОбъекта[ИмяСвойстваВИсточнике];
		
		ЗначениеСвойства = ДанныеСвойства.Значение;
		
		Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
			ИмяОбъектаСвойства = Настройки.ИменаОбъектов.Получить(ТипСвойстваВИсточнике);
			Если ИмяОбъектаСвойства <> Неопределено Тогда
				
				ТипОбъектаСвойства = Настройки.ТипыОбъектов.Получить(ТипСвойстваВИсточнике);
				МенеджерСвойства = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТипОбъектаСвойства + "." + ИмяОбъектаСвойства);
				ЗначениеСвойства = МенеджерСвойства.ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеСвойства));
				
			Иначе
				
				МетаданныеПеречисления = Метаданные.Перечисления.Найти(ТипСвойстваВПриемнике);
				Если МетаданныеПеречисления <> Неопределено Тогда
					ЗначениеСвойства = Перечисления[ТипСвойстваВПриемнике][ЗначениеСвойства];
				ИначеЕсли ТипСвойстваВПриемнике = "Дата" И ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
					ЗначениеСвойства = ПрочитатьДатуJSON(ЗначениеСвойства, ФорматДатыJSON.ISO);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Объект[ИмяСвойстваВПриемнике] = ЗначениеСвойства;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьПараметрыОбъекта(Объект, ИмяОбъекта, ДанныеОбъекта, Настройки)
	
	ПараметрыОбъекта = Настройки.ПараметрыОбъектов[ИмяОбъекта];
	ТипыПараметровОбъекта = Настройки.ТипыПараметровОбъектов[ИмяОбъекта];
	
	ИмяОбъектаВПриемнике = Настройки.ИменаОбъектов[ИмяОбъекта];
	
	Для Каждого ДанныеПараметра Из ДанныеОбъекта.Параметры Цикл
		
		ИмяПараметраВИсточнике = ДанныеПараметра.Имя;
		ИмяПараметраВПриемнике = ПараметрыОбъекта[ИмяПараметраВИсточнике];
		ТипПараметраВПриемнике = ТипыПараметровОбъекта[ИмяПараметраВИсточнике];
		
		ЗначениеПараметра = ДанныеПараметра.Значение;
		
		Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ИмяОбъектаПараметра = Настройки.ИменаОбъектов.Получить(ИмяПараметраВИсточнике);
			Если ИмяОбъектаПараметра <> Неопределено Тогда
				
				ТипОбъектаПараметра = Настройки.ТипыОбъектов.Получить(ИмяПараметраВИсточнике);
				МенеджерПараметра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТипОбъектаПараметра + "." + ИмяОбъектаПараметра);
				ЗначениеПараметра = МенеджерПараметра.ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеПараметра));
				
			Иначе
				
				МетаданныеПеречисления = Метаданные.Перечисления.Найти(ТипПараметраВПриемнике);
				Если МетаданныеПеречисления <> Неопределено Тогда
					ЗначениеПараметра = Перечисления[ТипПараметраВПриемнике][ЗначениеПараметра];
				ИначеЕсли ТипПараметраВПриемнике = "Дата" И ТипЗнч(ЗначениеПараметра) = Тип("Строка") Тогда
					ЗначениеПараметра = ПрочитатьДатуJSON(ЗначениеПараметра, ФорматДатыJSON.ISO);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		ЗаписатьПараметрОбъекта(ИмяПараметраВПриемнике, ЗначениеПараметра, ИмяОбъектаВПриемнике, Объект);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НастройкиСоответствия(ДляВыгрузки = Истина)
	
	ИменаОбъектов = Новый Соответствие;
	ТипыОбъектов = Новый Соответствие;
	СвойстваОбъектов = Новый Соответствие;
	ПараметрыОбъектов = Новый Соответствие;
	ТипыСвойствОбъектов = Новый Соответствие;
	ТипыПараметровОбъектов = Новый Соответствие;
	
	ТекущийОбъект = Неопределено;
	
	Макет = ПланыОбмена.CRM_ОбменB2BПортал.ПолучитьМакет("СоответствиеОбъектов");
	Для Сч = 2 По Макет.ВысотаТаблицы Цикл
		
		Вид				= СокрЛП(Макет.Область(Сч, 1).Текст);
		ИмяВИсточнике	= СокрЛП(Макет.Область(Сч, ?(ДляВыгрузки, 2, 4)).Текст);
		ИмяВПриемнике	= СокрЛП(Макет.Область(Сч, ?(ДляВыгрузки, 4, 2)).Текст);
		ТипСвойства		= СокрЛП(Макет.Область(Сч, ?(ДляВыгрузки, 5, 3)).Текст);
		
		Если Вид = "Справочник" Или Вид = "Документ" Тогда
			
			ИменаОбъектов.Вставить(ИмяВИсточнике, ИмяВПриемнике);
			ТипыОбъектов.Вставить(ИмяВИсточнике, Вид);
			СвойстваОбъектов.Вставить(ИмяВИсточнике, Новый Соответствие);
			ПараметрыОбъектов.Вставить(ИмяВИсточнике, Новый Соответствие);
			ТипыСвойствОбъектов.Вставить(ИмяВИсточнике, Новый Соответствие);
			ТипыПараметровОбъектов.Вставить(ИмяВИсточнике, Новый Соответствие);
			
			ТекущийОбъект = ИмяВИсточнике;
			
		ИначеЕсли Вид = "Реквизит" Тогда
			
			СвойстваОбъектов[ТекущийОбъект].Вставить(ИмяВИсточнике, ИмяВПриемнике);
			ТипыСвойствОбъектов[ТекущийОбъект].Вставить(ИмяВИсточнике, ТипСвойства);
			
		ИначеЕсли Вид = "Параметр" Тогда
			
			ПараметрыОбъектов[ТекущийОбъект].Вставить(ИмяВИсточнике, ИмяВПриемнике);
			ТипыПараметровОбъектов[ТекущийОбъект].Вставить(ИмяВИсточнике, ТипСвойства);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Настройки = Новый Структура;
	Настройки.Вставить("ИменаОбъектов", ИменаОбъектов);
	Настройки.Вставить("ТипыОбъектов", ТипыОбъектов);
	Настройки.Вставить("СвойстваОбъектов", СвойстваОбъектов);
	Настройки.Вставить("ПараметрыОбъектов", ПараметрыОбъектов);
	Настройки.Вставить("ТипыСвойствОбъектов", ТипыСвойствОбъектов);
	Настройки.Вставить("ТипыПараметровОбъектов", ТипыПараметровОбъектов);
	
	Возврат Настройки;
	
КонецФункции

#Область РаботаСПрисоединеннымиФайлами

Функция ЭтоПрисоединенныйФайл(ИмяОбъекта)
	
	Возврат (СтрНайти(ИмяОбъекта, "ПрисоединенныеФайлы") > 0);
	
КонецФункции

Функция СвойстваФайла(ДанныеОбъекта, Настройки)
	
	СвойстваФайла = Новый Структура;
	
	Наименование = "";
	Для Каждого ОписаниеСвойства Из ДанныеОбъекта.Свойства Цикл
		
		Если ОписаниеСвойства.Имя = "ВладелецФайла" Тогда
			
			ИмяОбъектаСвойства = Настройки.ИменаОбъектов.Получить(ОписаниеСвойства.Тип);
			ТипОбъектаВладельца = Настройки.ТипыОбъектов.Получить(ОписаниеСвойства.Тип);
			МенеджерВладельца = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТипОбъектаВладельца + "." + ИмяОбъектаСвойства);
			Значение = МенеджерВладельца.ПолучитьСсылку(Новый УникальныйИдентификатор(ОписаниеСвойства.Значение));
			СвойстваФайла.Вставить("ВладелецФайлов", Значение);
			
		КонецЕсли;
		
		Если ОписаниеСвойства.Имя = "Наименование" Тогда
			Наименование = ОписаниеСвойства.Значение;
		КонецЕсли;
		
		Если ОписаниеСвойства.Имя = "Расширение" Тогда
			Расширение = СтрЗаменить(ОписаниеСвойства.Значение, ".", "");
		КонецЕсли;
		
		Если ОписаниеСвойства.Имя = "ДатаСоздания" Тогда
			
			Значение = ПрочитатьДатуJSON(ОписаниеСвойства.Значение, ФорматДатыJSON.ISO);
			СвойстваФайла.Вставить("ДатаСоздания", Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Расширение) Тогда
		Наименование = СтрЗаменить(Наименование, "." + Расширение, "");
	Иначе
		
		ЧастиИмени = СтрРазделить(Наименование, ".", Ложь);
		Если ЧастиИмени.Количество() > 1 Тогда
			Наименование = ЧастиИмени[0];
			Расширение = ЧастиИмени[1];
		КонецЕсли;
		
	КонецЕсли;
	
	СвойстваФайла.Вставить("ИмяБезРасширения", Наименование);
	СвойстваФайла.Вставить("РасширениеБезТочки", Расширение);
	
	Возврат СвойстваФайла;
	
КонецФункции

Процедура ОбновитьДанныеФайла(ФайлОбъект, ДвоичныеДанные, Реквизиты)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Контекст = РаботаСФайламиСлужебный.КонтекстОбновленияФайла(ФайлОбъект, ДвоичныеДанные);
	МенеджерФайла = РаботаСФайламиСлужебный.МенеджерФайлов(ФайлОбъект);
	МенеджерФайла.ПередОбновлениемДанныхФайла(Контекст);
	
	НачатьТранзакцию();
	Попытка
		
		ФайлОбъект.Изменил = Пользователи.АвторизованныйПользователь();
		
		ФайлОбъект.Наименование = Реквизиты.ИмяБезРасширения;
		ФайлОбъект.Расширение = Реквизиты.РасширениеБезТочки;
		ФайлОбъект.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		
		МенеджерФайла.ПередЗаписьюДанныхФайла(Контекст, ФайлОбъект);
		ФайлОбъект.Записать();
		МенеджерФайла.ПриОбновленииДанныхФайла(Контекст, ФайлОбъект.Ссылка);
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		МенеджерФайла.ПослеОбновленияДанныхФайла(Контекст, Ложь);
		ВызватьИсключение;
	КонецПопытки;
	
	МенеджерФайла.ПослеОбновленияДанныхФайла(Контекст, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСОбъектамКонфигурации

Функция РегистрироватьОбъект(Объект)
	
	ТипОбъекта = ТипЗнч(Объект);
	Регистрировать = Ложь;
	
	Если ТипОбъекта = Тип("СправочникОбъект.Партнеры") Тогда
		
		НастройкиОбмена = НастройкиОбмена();
		Если ЗначениеЗаполнено(НастройкиОбмена) Тогда
			
			ПараметрыОтбора = Новый Структура("ТипОтношений", НастройкиОбмена.ТипОтношенийПартнеров);
			НайденныеСтроки = Объект.CRM_ТипыОтношений.НайтиСтроки(ПараметрыОтбора);
			
			Регистрировать = (НайденныеСтроки.Количество() > 0);
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.КонтактныеЛицаПартнеров") Тогда
		
		Регистрировать = Объект.CRM_ПодключенКB2BПорталу;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.CRM_ИнтересПрисоединенныеФайлы") Тогда
		
		Интерес = Объект.ВладелецФайла;
		Регистрировать = Интерес.ЭтоПоддержка
			И ЗначениеЗаполнено(Интерес.КонтактноеЛицо)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Интерес.КонтактноеЛицо, "CRM_ПодключенКB2BПорталу");
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.CRM_СообщениеМессенджераПрисоединенныеФайлы") Тогда
		
		Обращение = СвязанноеОбращениеОбъекта(Объект.ВладелецФайла.Диалог);
		Регистрировать = ЗначениеЗаполнено(Обращение);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.CRM_ТипыОбращений") Тогда
		
		Регистрировать = Истина;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.CRM_Интерес") Тогда
		
		Регистрировать = Объект.ЭтоПоддержка
			И ЗначениеЗаполнено(Объект.КонтактноеЛицо)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "CRM_ПодключенКB2BПорталу");
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.CRM_СообщениеМессенджера") Тогда
		
		Обращение = СвязанноеОбращениеОбъекта(Объект.Диалог);
		Регистрировать = ЗначениеЗаполнено(Обращение);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.CRM_Заявка") Тогда
		
		Регистрировать = Ложь;
		
	КонецЕсли;
	
	Возврат Регистрировать;
	
КонецФункции

Функция ПолучитьПараметрОбъекта(ИмяПараметра, ИмяОбъекта, Объект)
	
	ЗначениеПараметра = Неопределено;
	
	Если ИмяОбъекта = "КонтактныеЛицаПартнеров" Тогда
		
		Если ИмяПараметра = "ДатаРегистрацииСвязи" Тогда
			ЗначениеПараметра = Объект[ИмяПараметра];
		ИначеЕсли ИмяПараметра = "ДатаПрекращенияСвязи" Тогда
			ЗначениеПараметра = Объект[ИмяПараметра];
		ИначеЕсли ИмяПараметра = "Почта" Тогда
			НастройкиОбмена = НастройкиОбмена();
			Если ЗначениеЗаполнено(НастройкиОбмена) Тогда
				ЗначениеПараметра = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
					Объект, НастройкиОбмена.EmailКонтактов);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяОбъекта = "CRM_Интерес" Тогда
		
		Если ИмяПараметра = "Статус" Тогда
			
			КатегорияСостояния = Объект.СостояниеИнтереса.КатегорияСостояния;
			Если ЗначениеЗаполнено(КатегорияСостояния) Тогда
				ЗначениеПараметра = ОбщегоНазначения.ИмяЗначенияПеречисления(КатегорияСостояния);
			КонецЕсли;
		ИначеЕсли ИмяПараметра = "НомерОбращения" Тогда
			
			ЗначениеПараметра = СокрЛП(Объект.Номер);
	
		КонецЕсли;
		
	ИначеЕсли ИмяОбъекта = "CRM_СообщениеМессенджера" Тогда
		
		Если ИмяПараметра = "Обращение" Тогда
			
			СвязанноеОбращение = СвязанноеОбращениеОбъекта(Объект.Диалог);
			Если ЗначениеЗаполнено(СвязанноеОбращение) Тогда
				ЗначениеПараметра = Строка(СвязанноеОбращение.УникальныйИдентификатор());
			КонецЕсли;
			
		ИначеЕсли ИмяПараметра = "ВидСообщения" Тогда
			
			Если Объект.ВидСообщения = Перечисления.CRM_ВидыСообщенияМессенджера.Входящее Тогда
				ЗначениеПараметра = "Исходящее";
			Иначе
				ЗначениеПараметра = "Входящее";
			КонецЕсли;
			
		ИначеЕсли ИмяПараметра = "Ответственный" Тогда
			
			ЗначениеПараметра = Строка(Объект.Ответственный);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

Процедура ЗаписатьПараметрОбъекта(ИмяПараметра, ЗначениеПараметра, ИмяОбъекта, Объект)
	
	Если ИмяОбъекта = "КонтактныеЛицаПартнеров" Тогда
		
		Если ИмяПараметра = "ДатаРегистрацииСвязи" Тогда
			Объект[ИмяПараметра] = ЗначениеПараметра;
		ИначеЕсли ИмяПараметра = "ДатаПрекращенияСвязи" Тогда
			Объект[ИмяПараметра] = ЗначениеПараметра;
		ИначеЕсли ИмяПараметра = "Почта" Тогда
			НастройкиОбмена = НастройкиОбмена();
			Если ЗначениеЗаполнено(НастройкиОбмена) Тогда
				УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
					Объект, ЗначениеПараметра, НастройкиОбмена.EmailКонтактов);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяОбъекта = "CRM_Интерес" Тогда
		
		Если ИмяПараметра = "Статус" Тогда
			
			НастройкиОбмена = НастройкиОбмена();
			Если ЗначениеЗаполнено(НастройкиОбмена) Тогда
				
				Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	СостоянияИнтересов.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.CRM_СостоянияИнтересов КАК СостоянияИнтересов
				|ГДЕ
				|	СостоянияИнтересов.Родитель = &СценарийПоддержки
				|	И СостоянияИнтересов.КатегорияСостояния = &КатегорияСостояния
				|
				|УПОРЯДОЧИТЬ ПО
				|	СостоянияИнтересов.РеквизитДопУпорядочивания");
				
				Запрос.Параметры.Вставить("СценарийПоддержки", НастройкиОбмена.СценарийПоддержки);
				Запрос.Параметры.Вставить("КатегорияСостояния", ЗначениеПараметра);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Объект.СостояниеИнтереса = Выборка.Ссылка;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяОбъекта = "CRM_СообщениеМессенджера" Тогда
		
		Если ИмяПараметра = "Обращение" Тогда
			Объект.ДополнительныеСвойства.Вставить("Обращение", ЗначениеПараметра);
		ИначеЕсли ИмяПараметра = "ОбращениеПредставление" Тогда
			Объект.ДополнительныеСвойства.Вставить("ОбращениеПредставление", ЗначениеПараметра);
		ИначеЕсли ИмяПараметра = "КонтактПредставление" Тогда
			Объект.ДополнительныеСвойства.Вставить("КонтактПредставление", ЗначениеПараметра);
		ИначеЕсли ИмяПараметра = "ВидСообщения" Тогда
			Объект.ВидСообщения = ЗначениеПараметра;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюОбъекта(ИмяОбъекта, Объект)
	
	ЭтоНовый = Объект.ЭтоНовый();
	Объект.ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый);
	
	Если ИмяОбъекта = "Партнеры" Тогда
		
		Если ЭтоНовый Тогда
			Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
			НастройкиОбмена = НастройкиОбмена();
			Если ЗначениеЗаполнено(НастройкиОбмена) Тогда
				НоваяСтрока = Объект.CRM_ТипыОтношений.Добавить();
				НоваяСтрока.ТипОтношений = НастройкиОбмена.ТипОтношенийПартнеров;
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли ИмяОбъекта = "КонтактныеЛицаПартнеров" Тогда
		
		Если ЭтоНовый Тогда
			Объект.CRM_ПодключенКB2BПорталу = Истина;
			Объект.CRM_СтатусНаB2BПортале = Перечисления.CRM_СтатусыПользователейB2BПортала.Пользователь;
		КонецЕсли;
		
	ИначеЕсли ИмяОбъекта = "CRM_Интерес" Тогда
		
		Если ЭтоНовый Тогда
			
			НоваяСтрока = Объект.Контакты.Добавить();
			НоваяСтрока.Контакт = Объект.КонтактноеЛицо;
			НоваяСтрока.Роль = НоваяСтрока.Контакт.CRM_РольКонтактногоЛица;
			
			НастройкиОбмена = НастройкиОбмена();
			Если ЗначениеЗаполнено(НастройкиОбмена) Тогда
				Объект.ТипУслуги = НастройкиОбмена.ТипУслуги;
				Объект.Организация = НастройкиОбмена.Организация;
			КонецЕсли;
			Объект.Ответственный = Справочники.CRM_УчетныеЗаписиМессенджеров.B2BПортал.Ответственный;

			ЗаполнитьЗначенияСвойств(Объект, СрокиПоОбращению(Объект));
			
			// Канал
			// Источник
			
			// Подразделение
			// Офис
			
			Если Справочники.CRM_УчетныеЗаписиМессенджеров.B2BПортал.CRM_ОбрабатыватьОбращения Тогда
				Правило = Справочники.CRM_УчетныеЗаписиМессенджеров.B2BПортал.CRM_ПравилаОбработки[0].ПравилоОбработки;
				
				Если ЗначениеЗаполнено(Правило) Тогда
					Справочники.CRM_ПравилаОбработкиОбращений.ЗаполнитьОтветственного(Объект, Правило);
				КонецЕсли;
			КонецЕсли;
			Объект.Подразделение = CRM_ОбщегоНазначенияСервер.ПолучитьРеквизитОтветственного(Объект.Ответственный,
				 "Подразделение");

		КонецЕсли;
		
	ИначеЕсли ИмяОбъекта = "CRM_СообщениеМессенджера" Тогда
		
		Объект.УчетнаяЗапись = Справочники.CRM_УчетныеЗаписиМессенджеров.B2BПортал;
		
		Обращение = Объект.ДополнительныеСвойства.Обращение;
		ОбращениеПредставление = Объект.ДополнительныеСвойства.ОбращениеПредставление;
		КонтактПредставление = Объект.ДополнительныеСвойства.КонтактПредставление;
		
		ПараметрыДиалога = Новый Структура;
		ПараметрыДиалога.Вставить("ID_Пользователя", "");
		ПараметрыДиалога.Вставить("Группа", Строка(Обращение.УникальныйИдентификатор()));
		ПараметрыДиалога.Вставить("ГруппаПредставление", ОбращениеПредставление);
		ПараметрыДиалога.Вставить("Контакт", Объект.Контакт);
		ПараметрыДиалога.Вставить("КонтактПредставление", КонтактПредставление);
		ПараметрыДиалога.Вставить("УчетнаяЗапись", Справочники.CRM_УчетныеЗаписиМессенджеров.B2BПортал);
		
		Объект.Диалог = ПолучитьДиалог(ПараметрыДиалога);
		Объект.КонтактПредставление = КонтактПредставление;
		
	ИначеЕсли ИмяОбъекта = "CRM_Заявка" Тогда
		
		Объект.Статус = Справочники.CRM_СтатусыЗаявок.Принята;
		
		НастройкиОбмена = НастройкиОбмена();
			Если ЗначениеЗаполнено(НастройкиОбмена) Тогда
				Объект.ИсточникПолучения = НастройкиОбмена.ИсточникПолученияЗаявок;
				Объект.КаналПервичногоИнтереса = НастройкиОбмена.КаналРекламногоВоздействия;
				Объект.ИсточникПервичногоИнтереса = НастройкиОбмена.ИсточникРекламногоВоздействия; 
			КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписиОбъекта(ИмяОбъекта, Объект)
	
	ЭтоНовый = Объект.ДополнительныеСвойства.ЭтоНовый;
	
	Если ИмяОбъекта = "CRM_Интерес" Тогда
		
		ПараметрыДиалога = Новый Структура;
		ПараметрыДиалога.Вставить("ID_Пользователя", "");
		ПараметрыДиалога.Вставить("Группа", Строка(Объект.Ссылка.УникальныйИдентификатор()));
		ПараметрыДиалога.Вставить("ГруппаПредставление", Строка(Объект.Ссылка));
		ПараметрыДиалога.Вставить("Контакт", Объект.КонтактноеЛицо);
		ПараметрыДиалога.Вставить("КонтактПредставление", Строка(Объект.КонтактноеЛицо));
		ПараметрыДиалога.Вставить("УчетнаяЗапись", Справочники.CRM_УчетныеЗаписиМессенджеров.B2BПортал);
		
		Диалог = ПолучитьДиалог(ПараметрыДиалога);
		Если Не Справочники.CRM_Диалоги.СвязанСИнтересом(Диалог, Объект.Ссылка) Тогда
			
			ПривязатьДиалогКОбращению(Диалог, Объект.Ссылка);

		КонецЕсли;
		
	ИначеЕсли ИмяОбъекта = "CRM_СообщениеМессенджера" Тогда
		
		Если ЭтоНовый Тогда
			ЗаписьСвязиПосл = РегистрыСведений.CRM_СообщенияДиалоговПоследние.СоздатьМенеджерЗаписи();
			ЗаписьСвязиПосл.Диалог = Объект.Диалог;
			ЗаписьСвязиПосл.Сообщение = Объект.Ссылка;
			ЗаписьСвязиПосл.ВидСообщения = Объект.ВидСообщения;
			ЗаписьСвязиПосл.Дата = Объект.Дата;
			ТекстСообщения = СокрЛП(Объект.ТекстСообщения);
			Если СтрНайти(ТекстСообщения, Символы.ПС) Тогда
				МассивСтр = СтрРазделить(ТекстСообщения, Символы.ПС, Ложь);
				Если МассивСтр.Количество() = 0 Тогда
					ТекстСообщения = "";
				Иначе
					ТекстСообщения = МассивСтр[0];
				КонецЕсли;
			КонецЕсли;
			Если ТекстСообщения = "" Тогда
				ТекстСообщения = Нстр("ru = 'Файл...'; en = 'File...'");
			КонецЕсли;
			ЗаписьСвязиПосл.ТекстСокр = ТекстСообщения;
			ЗаписьСвязиПосл.Записать();
			
			// Если Обращение создано в 1С, а первое сообщение клиент пишет на портале,
			// то нужно привязать Диалог к Обращению
			Если Не Справочники.CRM_Диалоги.СвязанСИнтересом(Объект.Диалог, Объект.ДополнительныеСвойства.Обращение) Тогда
				ПривязатьДиалогКОбращению(Объект.Диалог, Объект.ДополнительныеСвойства.Обращение);
			КонецЕсли;

		КонецЕсли;
		
	ИначеЕсли ИмяОбъекта = "CRM_Диалоги" Тогда
		
	КонецЕсли;
КонецПроцедуры

Функция СвязанноеОбращениеОбъекта(СсылкаНаОбъект)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖурналДокументов.CRM_Интерес КАК Ссылка,
	|	ЖурналДокументов.Дата КАК Дата,
	|	ЖурналДокументов.ОсновнойИнтерес КАК ОсновнойИнтерес,
	|	ЖурналДокументов.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ЖурналДокументов.ГлавнаяЗапись КАК ГлавнаяЗапись
	|ПОМЕСТИТЬ СвязанныеИнтересы
	|ИЗ
	|	РегистрСведений.CRM_ЖурналДокументов КАК ЖурналДокументов
	|ГДЕ
	|	ЖурналДокументов.Объект = &Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвязанныеИнтересы.Ссылка КАК Ссылка
	|ИЗ
	|	СвязанныеИнтересы КАК СвязанныеИнтересы
	|ГДЕ
	|	НЕ СвязанныеИнтересы.Ссылка = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)
	|	И СвязанныеИнтересы.ГлавнаяЗапись
	|	И СвязанныеИнтересы.Ссылка.ЭтоПоддержка
	|	И СвязанныеИнтересы.КонтактноеЛицо.CRM_ПодключенКB2BПорталу
	|
	|УПОРЯДОЧИТЬ ПО
	|	СвязанныеИнтересы.ОсновнойИнтерес УБЫВ,
	|	СвязанныеИнтересы.Дата УБЫВ");
	
	Запрос.Параметры.Вставить("Объект", СсылкаНаОбъект);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция СрокиПоОбращению(ОбращениеОбъект)
	
	ПоляОбращения = Новый Структура;
	ПоляОбращения.Вставить("КонтактноеЛицо");
	ПоляОбращения.Вставить("Организация");
	ПоляОбращения.Вставить("Ответственный");
	ПоляОбращения.Вставить("Партнер");
	ПоляОбращения.Вставить("ТипУслуги");
	ПоляОбращения.Вставить("ТипОбращения");
	ПоляОбращения.Вставить("Проект");
	ЗаполнитьЗначенияСвойств(ПоляОбращения, ОбращениеОбъект);
	
	ДанныеОбращения = Справочники.CRM_УровниПоддержки.ОписаниеДанныхОбращения();
	СтрокаНабора = ДанныеОбращения.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаНабора, ПоляОбращения);
	
	СтрокаНабора.Ключ			= Строка(Новый УникальныйИдентификатор);
	СтрокаНабора.Дата			= ОбращениеОбъект.Дата;
	СтрокаНабора.Подразделение	= CRM_ОбщегоНазначенияСервер.ПолучитьРеквизитОтветственного(ПоляОбращения.Ответственный,
		 "Подразделение");
	
	ДанныеУровня = Справочники.CRM_УровниПоддержки.ДанныеУровняПоддержки(ДанныеОбращения);
	СрокиПоОбращению = Справочники.CRM_УровниПоддержки.СрокиПоУровнюПоддержки(ОбращениеОбъект.Дата, ДанныеУровня.Уровень);
	СрокиПоОбращению.Вставить("УровеньПоддержки", ДанныеУровня.Уровень);
	
	Возврат СрокиПоОбращению;
	
КонецФункции

Функция ПолучитьДиалог(Параметры)
	
	// Поиск выполняется без учета Контакта,
	// так как сообщения от всех пользователей в рамках обращения на портале долдны собираться в один диалог.
	// При создании нового диалога  - он привязывается к
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Диалоги.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_Диалоги КАК Диалоги
	|ГДЕ
	|	Диалоги.ID_Пользователя = &ID_Пользователя
	|	И Диалоги.Группа = &Группа
	|	И Диалоги.УчетнаяЗапись = &УчетнаяЗапись
	|	И НЕ Диалоги.Служебный");
	
	Запрос.УстановитьПараметр("ID_Пользователя", Параметры.ID_Пользователя);
	Запрос.УстановитьПараметр("Группа", Параметры.Группа);
	Запрос.УстановитьПараметр("УчетнаяЗапись", Параметры.УчетнаяЗапись);
	Запрос.УстановитьПараметр("Контакт", Параметры.Контакт);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.CRM_Диалоги.СоздатьДиалог(Параметры);
	КонецЕсли;
	
КонецФункции

// Процедура - Привязать диалог к обращению
//
// Параметры:
//  Диалог		 - СправочникСсылка.Диалоги	 - Диалог порбтала
//  Обращение	 - ДокументСсылка.Интерес	 - Обращение
//
Процедура ПривязатьДиалогКОбращению(Диалог, Обращение)
	
	ТаблицаСвязей = Новый ТаблицаЗначений;
	ТаблицаСвязей.Колонки.Добавить("Ссылка");
	ТаблицаСвязей.Колонки.Добавить("СостояниеИнтереса");
	ТаблицаСвязей.Колонки.Добавить("ВведенНаОсновании");
	ТаблицаСвязей.Колонки.Добавить("ОсновнойИнтерес");
	
	НоваяСтрока = ТаблицаСвязей.Добавить();
	НоваяСтрока.Ссылка = Обращение.Ссылка;
	НоваяСтрока.СостояниеИнтереса = Обращение.СостояниеИнтереса;
	НоваяСтрока.ВведенНаОсновании = Ложь;
	НоваяСтрока.ОсновнойИнтерес = Истина;
	
	ДиалогОбъект = Диалог.ПолучитьОбъект(); 
	ДиалогОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов", ТаблицаСвязей);
	ДиалогОбъект.Записать();
	
КонецПроцедуры // ПривязатьДиалогКОбращению()

Функция НастройкиОбмена()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.CRM_НастройкиОбменаСB2BПорталом.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Прочитать();
	Если Не МенеджерЗаписи.Выбран() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("EmailКонтактов",				Неопределено);
	Настройки.Вставить("ТипОтношенийПартнеров",			Неопределено);
	Настройки.Вставить("ШаблонУведомленияОРегистрации",	Неопределено);
	Настройки.Вставить("ШаблонУведомленияОбИзменениях",	Неопределено);
	Настройки.Вставить("СценарийПоддержки",				Неопределено);
	Настройки.Вставить("ТипУслуги",						Неопределено);
	Настройки.Вставить("Организация",					Неопределено);
	Настройки.Вставить("ИсточникПолученияЗаявок", Неопределено);
	Настройки.Вставить("КаналРекламногоВоздействия", Неопределено);
    	Настройки.Вставить("ИсточникРекламногоВоздействия", Неопределено);
	
	ЗаполнитьЗначенияСвойств(Настройки, МенеджерЗаписи);
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область УправлениеПорталом

Функция ПолучитьТелоЗапросаСбросаПароля(КонтактноеЛицо)
	
	ТранспортныйОбъект = Новый Структура("КонтактноеЛицо, Почта", Строка(КонтактноеЛицо.УникальныйИдентификатор()), "");
	
	ТелоЗапроса = СериализоватьJSON(ТранспортныйОбъект); 
	
	Возврат ТелоЗапроса;
	
КонецФункции

#КонецОбласти

Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Обмен с B2B порталом'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция ЗакодироватьСтрокуВBase64(Строка)
	
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(Строка);
	ЗакодированнаяСтрока = ПолучитьBase64СтрокуИзДвоичныхДанных(ДвоичныеДанные);
	Возврат СтрЗаменить(ЗакодированнаяСтрока, Символы.ВК + Символы.ПС, "");
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
