///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.БазоваяФункциональностьСБП".
// ОбщийМодуль.СистемаБыстрыхПлатежейСлужебный.
//
// Серверные процедуры обмена данными с Системой быстрых платежей:
//  - инициализация параметров подключения;
//  - обработчики обновления;
//  - обработчики интеграции с Библиотекой стандартных подсистем;
//  - обработчики интеграции с Библиотекой технологии сервиса;
//  - настройка форм подключения к СБП;
//  - работа с настройками оплаты;
//  - обработка ошибок сервиса;
//  - формирование и настройка шаблонов сообщений;
//  - алгоритмы настройки формы "Интернет-поддержка и сервисы".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область СтандартныеПодсистемыБазоваяФункциональность

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	
	Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		ХостСервисаОбменаДанными(),
		443,
		НСтр("ru = 'Сервис интеграции с Системой быстрых платежей'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(
		МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемыПечать

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииНастроекПечати
//
Процедура ПриОпределенииНастроекПечати(НастройкиПечати) Экспорт
	
	НастройкиПечати.ОбъектыПечати.Добавить(
		Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей);
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемыОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
// 
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "2.6.1.3";
	Обработчик.Идентификатор      = Новый УникальныйИдентификатор("50df7c1c-d88d-4293-bea2-ca4b97cd3d32");
	Обработчик.Процедура          = "СистемаБыстрыхПлатежейСлужебный.ОбработатьНастройкиПлатежныхСистем";
	Обработчик.РежимВыполнения    = "Отложенно";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.БлокируемыеОбъекты = "Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей";
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий        = НСтр("ru = 'Обновление настроек подключения к Системе быстрых платежей.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "";
	Обработчик.Процедура           = "СистемаБыстрыхПлатежейСлужебный.УстановитьДлительностьОпераций";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = НСтр("ru='Заполнение настроек подключения к Системе быстрых платежей'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "2.6.2.53";
	Обработчик.Идентификатор      = Новый УникальныйИдентификатор("1ff5b903-f14e-4d16-89c9-c46e6094b2dd");
	Обработчик.Процедура          = "СистемаБыстрыхПлатежейСлужебный.ОбновитьНастройкиПодключения";
	Обработчик.РежимВыполнения    = "Отложенно";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.БлокируемыеОбъекты = "Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей";
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий        = НСтр("ru = 'Установка пометки на удаление для настроек SWiP и обновление настроек СБП.'");
	
	Если Не ОбщегоНазначения.РазделениеВключено()
		И ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия             = "2.6.2.63";
		Обработчик.Идентификатор      = Новый УникальныйИдентификатор("4af739e4-f403-4fb2-91ce-abe04ec46acd");
		Обработчик.Процедура          = "СистемаБыстрыхПлатежейСлужебный.ДобавитьЗаданиеОбновленияНастроек";
		Обработчик.РежимВыполнения    = "Отложенно";
		Обработчик.ОбщиеДанные         = Ложь;
		Обработчик.НачальноеЗаполнение = Ложь;
		Обработчик.Комментарий        = НСтр("ru = 'Добавление задания загрузки настроек участников Системы быстрых платежей.'");
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "2.6.3.27";
	Обработчик.Идентификатор      = Новый УникальныйИдентификатор("cedeea13-ddf7-472f-aa18-46e231259102");
	Обработчик.Процедура          = "СистемаБыстрыхПлатежейСлужебный.ЗаменитьЗначениеПеречисленияУдалитьСБП_Промсвязьбанк";
	Обработчик.РежимВыполнения    = "Отложенно";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.БлокируемыеОбъекты = "Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей";
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий        = НСтр("ru = 'Обновление настроек подключения с СБП.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "2.7.1.13";
	Обработчик.Идентификатор      = Новый УникальныйИдентификатор("347776dc-1c3d-460a-9c0d-7b17553e15dd");
	Обработчик.Процедура          = "СистемаБыстрыхПлатежейСлужебный.УстановитьИдентификаторУчастникаСБП";
	Обработчик.РежимВыполнения    = "Отложенно";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.БлокируемыеОбъекты = "Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей";
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий        = НСтр("ru = 'Установка идентификатора участника СБП в настройках.'"); 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "2.7.1.66";
	Обработчик.Процедура          = "СистемаБыстрыхПлатежейСлужебный.ОбновитьНастройкиУчастниковСБП";
	Обработчик.РежимВыполнения    = "Монопольно";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.Комментарий        = НСтр("ru = 'Обновление настроек участников СБП.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "2.7.1.71";
	Обработчик.Идентификатор      = Новый УникальныйИдентификатор("2017dd4e-c40f-44be-9b47-a295db700b03");
	Обработчик.Процедура          = "СистемаБыстрыхПлатежейСлужебный.УстановитьНовоеИмя1ССБП";
	Обработчик.РежимВыполнения    = "Отложенно";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.БлокируемыеОбъекты = "Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей";
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий        = НСтр("ru = 'Установка нового имени родительской настройки 1С:СБП.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "2.7.5.10";
	Обработчик.Идентификатор      = Новый УникальныйИдентификатор("3030d021-90b4-4b8d-8a4b-09a1504d5c45");
	Обработчик.Процедура          = "СистемаБыстрыхПлатежейСлужебный.ОбновитьДанныеАутентификации";
	Обработчик.РежимВыполнения    = "Отложенно";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.БлокируемыеОбъекты = "Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей";
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий        = НСтр("ru = 'Обновление структуры хранимых данных аутентификации.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "2.8.1.5";
	Обработчик.Процедура          = "СистемаБыстрыхПлатежейСлужебный.ЗаполнитьВариантыНастройки";
	Обработчик.РежимВыполнения    = "Оперативно";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;;
	Обработчик.Комментарий        = НСтр("ru = 'Заполнение вариантов настройки СБП.'");
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемыПодключаемыеКоманды

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд.
//
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя = "СБП";
	Вид.ИмяПодменю = "ПодменюСБП";
	Вид.Заголовок = НСтр("ru = 'СБП'");
	Вид.Картинка = БиблиотекаКартинок.ЛоготипСБПКнопка;
	Вид.Отображение = ОтображениеКнопки.Картинка;
	Вид.ВидГруппыФормы = ВидГруппыФормы.Подменю;
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииСоставаНастроекПодключаемыхОбъектов.
//
Процедура ПриОпределенииСоставаНастроекПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса) Экспорт
	
	Настройка = НастройкиПрограммногоИнтерфейса.Добавить();
	Настройка.Ключ = "ДобавитьКомандыСБП";
	Настройка.ОписаниеТипов = Новый ОписаниеТипов("Булево");
	Настройка.ВидыПодключаемыхОбъектов = "Отчет, Обработка";
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(
		НастройкиФормы,
		Источники,
		ПодключенныеОтчетыИОбработки,
		Команды) Экспорт
	
	ПереводыДоступны = Ложь;
	СистемаБыстрыхПлатежейСобытия.ПриОпределенииДоступностиПереводов(
		ПереводыДоступны);
	Если Не ПереводыДоступны Тогда
		Возврат;
	КонецЕсли;
	
	ИменаОбъектов = ИменаДокументовСКомандой();
	
	Настройки = НастройкиОтображенияКоманд();
	УдалитьСтроки = Новый Массив;
	
	Для Каждого ИмяОбъекта Из ИменаОбъектов Цикл
		Если Не КомандаСБПИспользуется(ИмяОбъекта, Настройки) Тогда
			УдалитьСтроки.Добавить(ИмяОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из УдалитьСтроки Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(
			ИменаОбъектов,
			Строка);
	КонецЦикла;
	
	ТипыОбъектов = Новый Массив;
	Для Каждого ПолноеИмя Из ИменаОбъектов Цикл
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		ТипыОбъектов.Добавить(ТипЗнч(Менеджер.ПустаяСсылка()));
	КонецЦикла;
	Если Не ЗначениеЗаполнено(ТипыОбъектов) Тогда
		Возврат;
	КонецЕсли;
	ТипПараметра = Новый ОписаниеТипов(ТипыОбъектов);
	
	Команда = Команды.Добавить();
	Команда.Вид = "СБП";
	Команда.Идентификатор = "СБП";
	Команда.Представление = НСтр("ru = 'Оплата через СБП'");
	Команда.Важность = "Обычное";
	Команда.Порядок = 49;
	Команда.ОтображениеКнопки = ОтображениеКнопки.Картинка;
	Команда.Картинка = БиблиотекаКартинок.ЛоготипСБПКнопка;
	Команда.ТипПараметра = ТипПараметра;
	Команда.Назначение = "ДляОбъекта";
	Команда.ИзменяетВыбранныеОбъекты = Ложь;
	Команда.МножественныйВыбор = Ложь;
	Команда.РежимЗаписи = "Записывать";
	Команда.Обработчик = "СистемаБыстрыхПлатежейКлиент.Подключаемый_ОткрытьФормуПлатежнойСсылкиСБП";
	
КонецПроцедуры

#КонецОбласти

#Область ТехнологияСервисаПоставляемыеДанные

// См. ПоставляемыеДанныеПереопределяемый.ПолучитьОбработчикиПоставляемыхДанных.
//
Процедура ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ВидДанных      = ВидПоставляемыхДанныхСБП();
	Обработчик.КодОбработчика = ВидПоставляемыхДанныхСБП();
	Обработчик.Обработчик     = ОбщегоНазначения.ОбщийМодуль("СистемаБыстрыхПлатежейСлужебный");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ВидДанных = ВидПоставляемыхДанныхМакетыСБП();
	Обработчик.КодОбработчика = ВидПоставляемыхДанныхМакетыСБП();
	Обработчик.Обработчик = ОбщегоНазначения.ОбщийМодуль("СистемаБыстрыхПлатежейСлужебный");
	
КонецПроцедуры

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению,
//  и если ДА - установить флажок Загружать.
// 
// Параметры:
//   Дескриптор - ОбъектXDTO - Descriptor.
//   Загружать - Булево - признак загрузки.
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	Если Дескриптор.DataType = ВидПоставляемыхДанныхСБП()
		Или Дескриптор.DataType = ВидПоставляемыхДанныхМакетыСБП() Тогда
		Загружать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//   Дескриптор - ОбъектXDTO - Дескриптор.
//   ПутьКФайлу - Строка - полное имя извлеченного файла. Файл будет автоматически удален 
//    после завершения процедуры.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	Если Дескриптор.DataType <> ВидПоставляемыхДанныхСБП()
			И Дескриптор.DataType <> ВидПоставляемыхДанныхМакетыСБП() Тогда
		Возврат;
	КонецЕсли;
	
	Если  Дескриптор.DataType = ВидПоставляемыхДанныхСБП() Тогда
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ПутьКФайлу);
		Результат = ПрочитатьJSON(ЧтениеJSON);
		
		ЗаписатьНастройкиУчастниковСБП(
			Результат);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполнена обработка поставляемых данных.
					|Поставляемые данные:
					|%1'"),
				ВидПоставляемыхДанныхСБП()),
			Ложь);
	КонецЕсли;
	
	Если Дескриптор.DataType = ВидПоставляемыхДанныхМакетыСБП() Тогда
		
		КаталогМакетов = ФайловаяСистема.СоздатьВременныйКаталог() + "v8_SBPTemplates\";
		ЧтениеZIP = Новый ЧтениеZipФайла(ПутьКФайлу);
		ЧтениеZIP.ИзвлечьВсе(КаталогМакетов, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		ЧтениеZIP.Закрыть();
		
		ФайлыМакетов = НайтиФайлы(КаталогМакетов, "*.mxl");
		
		Для Каждого ФайлМакета Из ФайлыМакетов Цикл
			
			ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
			ХешированиеДанных.ДобавитьФайл(ФайлМакета.ПолноеИмя);
			КонтрольнаяСуммаМакета = НРег(СтрЗаменить(ХешированиеДанных.ХешСумма, " ", ""));
			
			Макет = Новый ТабличныйДокумент;
			Макет.Прочитать(ФайлМакета.ПолноеИмя);
			
			Запись = РегистрыСведений.КэшМакетовСБП.СоздатьМенеджерЗаписи();
			Запись.Идентификатор = ФайлМакета.ИмяБезРасширения;
			Запись.КонтрольнаяСумма = КонтрольнаяСуммаМакета;
			Запись.Макет = Новый ХранилищеЗначения(Макет);
			Запись.ДатаОбновления = ТекущаяДатаСеанса();
			Запись.Заполнить(Неопределено);
			Запись.Записать();
			
		КонецЦикла;
		
		УдалитьФайлы(КаталогМакетов);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполнена обработка поставляемых данных.
					|Поставляемые данные:
					|%1'"),
				ВидПоставляемыхДанныхМакетыСБП()),
			Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя
//
// Параметры:
//   Дескриптор - ОбъектXDTO - Дескриптор.
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обработка поставляемых данных не выполнена.
				|Поставляемые данные:
				|%1'"),
			?(Дескриптор.DataType = ВидПоставляемыхДанныхСБП(),
				ВидПоставляемыхДанныхСБП(),
				ВидПоставляемыхДанныхМакетыСБП()),
		Ложь));
	
КонецПроцедуры

#КонецОбласти

#Область ТехнологияСервисаОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(
		Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОперацийСБП.ИмяМетода);
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияПодсистемИнтернетПоддержкиПользователей

#Область БазоваяФункциональностьБИП

// Вызывается при изменении логина и пароля пользователя ИПП в
// информационной базе из всех контекстов использования библиотеки.
//
Процедура ПриИзмененииДанныхАутентификации(Логин) Экспорт
	
	Если ЗначениеЗаполнено(Логин) Тогда
		ДобавитьЗаданиеОбновлениеНастроекУчастниковСБП();
		Если Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей.ЕстьНастройкиПодключения() Тогда
			ДобавитьЗаданиеЗагрузкаСтатусовОперацийСБП();
		КонецЕсли;
	Иначе
		УдалитьЗаданияОбновленияНастроек();
		УдалитьЗаданияЗагрузкаСтатусовОперацийСБП();
	КонецЕсли;
	
КонецПроцедуры

// Заполняет описание используемых в подсистеме хостов сервисов Интернет-поддержки.
//
// Параметры:
//  ХостыСервисовИнтернетПоддержки - Соответствие - хост и название используемого сервиса.
//
Процедура ПриЗаполненииХостовСервисовИнтернетПоддержки(
		ХостыСервисовИнтернетПоддержки) Экспорт
	
	ХостыСервисовИнтернетПоддержки.Вставить(
		ХостСервисаОбменаДанными(),
		НСтр("ru = 'Система быстрых платежей'"));
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиПрограммы

// Возвращает параметры окружения панели администрирования БИП.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма панели настроек.
//
// Возвращаемое значение:
//  Структура:
//    * НастройкаИнтеграцияДоступна - Булево
//    * ДлительностьОперацииСистемыБыстрыхПлатежей - Неопределено - настройка подключения не доступна.
//                                         - Число
//
Функция ПараметрыОкруженияФормыИнтернетПоддержкаИСервисы(Форма) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("НастройкаИнтеграцияДоступна" , СистемаБыстрыхПлатежей.НастройкаПодключенияДоступна());
	Результат.Вставить("ДлительностьОперацииСистемыБыстрыхПлатежей", Неопределено);
	
	Если Не Результат.НастройкаИнтеграцияДоступна Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ДлительностьОперацииСистемыБыстрыхПлатежей = Константы.ДлительностьОперацииСистемыБыстрыхПлатежей.Получить();
	
	ИменаДокументов = ИменаДокументовСКомандой();
	Форма.Элементы.НастройкаОтображенияКоманд.Видимость = (ИменаДокументов.Количество() <> 0);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

// Создает описание настроек длительного вызова. Настройки необходимо
// использовать для вызова функции СистемаБыстрыхПлатежейСлужебный.ВозможенВызовОперации.
//
// Параметры:
//  ДлительностьОперации - Число - количество секунд отведенных на выполнение операции.
//
// Возвращаемое значение:
//  Структура - результат итеративного вызова:
//    * Длительность - Число - длительность вызова операции;
//    * НачалоОперации  - Дата - период отчета длительности вызова;
//    * Ожидание - Число - частота выполнения операций;
//    * МаксимальноеКоличествоЗапросов - Число - ограничение на максимально возможное количество запросов;
//    * НакопленноеЗначениеВремени - Число - общее накопленное время за длительную операцию;
//    * КоличествоИтераций - Число - текущее количество выполненных запросов.
//
Функция НовыйИтеративныйВызовОперации(ДлительностьОперации = 0) Экспорт
	
	ДлительностьОперации = ?(
		ДлительностьОперации = 0,
		Константы.ДлительностьОперацииСистемыБыстрыхПлатежей.Получить(),
		ДлительностьОперации);
	
	НастройкиВызова = Новый Структура;
	НастройкиВызова.Вставить("Длительность",                   ДлительностьОперации);
	НастройкиВызова.Вставить("НачалоОперации",                 ТекущаяДатаСеанса());
	НастройкиВызова.Вставить("Ожидание",                       3);
	НастройкиВызова.Вставить("МаксимальноеКоличествоЗапросов", 300);
	НастройкиВызова.Вставить("НакопленноеЗначениеВремени",     НастройкиВызова.НачалоОперации - НастройкиВызова.Ожидание);
	НастройкиВызова.Вставить("КоличествоИтераций",             0);
	
	// Для небольшого значения длительности будет выполнен единственный
	// вызов операции.
	Если НастройкиВызова.Длительность < 3 Тогда
		НастройкиВызова.МаксимальноеКоличествоЗапросов = 1;
	КонецЕсли;
	
	Возврат НастройкиВызова;
	
КонецФункции

// Создает описание результат создания заказа на оплату.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату:
//    * ПлатежнаяСсылка - Строка - идентификатор, по которому выполняется оплата;
//    * ПлатежнаяСсылкаСБП - Неопределено - документ платежной ссылки;
//    * СуммаОплаты - Число - сумма оплаты;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция НовыйРезультатПлатежнаяСсылка() Экспорт
	
	РезультатОперации = НовыйРезультатОперации();
	РезультатОперации.Вставить("ПлатежнаяСсылка", "");
	РезультатОперации.Вставить("СуммаОплаты", "");
	РезультатОперации.Вставить("ПлатежнаяСсылкаСБП", Неопределено);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует новую таблицу идентификаторов, которую необходимо использовать
// для проверки статусов.
//
// Возвращаемое значение:
//  ТаблицаЗначений - данные для проверки статуса:
//    * Идентификатор - Строка - идентификатор QR-кода СБП;
//    * ДатаЗапросаСтатуса - Дата - дата последнего запроса статуса;
//
Функция НовыйИдентификаторыПроверкиНаличияСтатуса() Экспорт
	
	Идентификаторы = Новый ТаблицаЗначений;
	Идентификаторы.Колонки.Добавить(
		"Идентификатор",
		ОбщегоНазначения.ОписаниеТипаСтрока(36));
	Идентификаторы.Колонки.Добавить(
		"ДатаЗапросаСтатуса",
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Возврат Идентификаторы;
	
КонецФункции

// Проверяет доступность вызова операции в рамках длительного вызова.
//
// Параметры:
//  НастройкиВызова - Структура - см. СистемаБыстрыхПлатежейСлужебный.НовыйИтеративныйВызовОперации
//
Функция ВозможенВызовОперации(НастройкиВызова) Экспорт
	
	// Прервать вызовы в случае превышения максимального
	// количества запросов.
	Если НастройкиВызова.МаксимальноеКоличествоЗапросов <= НастройкиВызова.КоличествоИтераций Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Прервать вызовы в случае превышения длительности.
	Если (НастройкиВызова.НачалоОперации + НастройкиВызова.Длительность) < ТекущаяДатаСеанса() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Для первой итерации время ожидания необходимо увеличить
	// т.к. маловероятно, что при первом вызове будет получен
	// терминальный статус операции.
	Ожидание = НастройкиВызова.Ожидание;
	Если НастройкиВызова.КоличествоИтераций = 0 Тогда
		Ожидание = Ожидание + 1;
	КонецЕсли;
	
	// Ожидание истечения времени задержки между вызовами.
	// Если запросы выполнять без ограничения, возрастет нагрузка на сервис,
	// при этом пользователи не почувствуют существенного изменения времени
	// выполнения операции.
	ИнтернетПоддержкаПользователей.Пауза(Ожидание);
	
	НастройкиВызова.НакопленноеЗначениеВремени = ТекущаяДатаСеанса();
	НастройкиВызова.КоличествоИтераций         = НастройкиВызова.КоличествоИтераций + 1;
	
	Возврат Истина;
	
КонецФункции

// Создает описание результат длительной операции в сервисе.
//
// Возвращаемое значение:
//  Структура - результат длительной операции:
//    * СтатусОперации - Строка - текущее состояние операции оплаты:
//       - "Выполняется" - подтверждение оплаты не получено;
//       - "Отменена" - оплата по оплата по ранее сформированному QR-коду не возможна;
//       - "Выполнена" - участник СБП подтвердил оплату;
//       - "ТребуетсяПодтверждение" - необходимо подтвердить действие;
//       - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки.
//    * ПараметрыОперации - Структура - содержит дополнительные данные по операции:
//        ** ДатаОперации - Дата - фактическая дата оплаты в UTC;
//        ** СуммаОперации - Число - фактическая суммы оплаты по документу;
//        ** ИдентификаторОперации - Строка - ключ контроля загрузки.
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция НовыйРезультатДлительнойОперации() Экспорт
	
	РезультатОперации = НовыйРезультатОперации();
	РезультатОперации.Вставить("СтатусОперации", "");
	
	Возврат РезультатОперации;
	
КонецФункции

// Создает описание результат операции в сервисе.
//
// Возвращаемое значение:
//  Структура - результат операции:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция НовыйРезультатОперации() Экспорт
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке", "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	
	Возврат РезультатОперации;
	
КонецФункции

// Создает описание идентификаторов оплаты СБП.
//
// Параметры:
//  ИдентификаторОплаты - Строка - идентификатор оплаты в СБП;
//  ИдентификаторОперации - Строка - идентификатор оплаты в Системе быстрых платежей.
//  
// Возвращаемое значение:
//  Структура - идентификаторы:
//   * ИдентификаторОплаты - Строка - идентификатор оплаты в СБП;
//   * ИдентификаторОперации - Строка - идентификатор оплаты в Системе быстрых платежей.
//
Функция НовыйИдентификаторыОперацииСБП(
		ИдентификаторОплаты,
		ИдентификаторОперации) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторОплаты", ИдентификаторОплаты);
	Результат.Вставить("ИдентификаторОперации", ИдентификаторОперации);
	
	Возврат Результат;
	
КонецФункции

// Формирует настройки подключения для выполнения запросов.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//   настройка выполнения оплаты.
//
// Возвращаемое значение:
//  Структура - см. СистемаБыстрыхПлатежейСлужебный.НовыйПараметрыНастройкиПодключения.
//
Функция ПараметрыНастройкиПодключения(НастройкаПодключения) Экспорт
	
	ВариантНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		НастройкаПодключения,
		"ВариантНастройки");
	
	// Заполнение настроек проведения оплаты.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ИдентификаторМерчанта КАК ИдентификаторМерчанта,
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ИдентификаторУчастника КАК ИдентификаторУчастника,
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК НастройкаПодключения,
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Используется КАК Используется,
		|	ЕСТЬNULL(НастройкиУчастниковСБП.%1, ""UNKNOW"") КАК ТипАутентификации,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НастройкиУчастниковСБП.ПеренаправлениеПоСсылке, ЛОЖЬ)
		|			ТОГДА НастройкиПодключенияКСистемеБыстрыхПлатежей.СсылкаПеренаправления
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК СсылкаПеренаправления
		|ИЗ
		|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
		|		ПО НастройкиПодключенияКСистемеБыстрыхПлатежей.ИдентификаторУчастника = НастройкиУчастниковСБП.Идентификатор
		|ГДЕ
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка = &НастройкаПодключения";
	
	Запрос.УстановитьПараметр("НастройкаПодключения", НастройкаПодключения);
	
	ИмяПоля = "";
	СистемаБыстрыхПлатежейСобытия.ПриОпределенииИмениПоляТипаАутентификации(
		ВариантНастройки,
		ИмяПоля);
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ИмяПоля);
		
	Возврат НовыйПараметрыНастройкиПодключения(
		Запрос,
		"Справочник");
	
КонецФункции

// Определяет прикладные настройки подключения к сервису.
//
// Возвращаемое значение:
//  Настройки - Структура - настройки подключения:
//    * c2b Структура - настройки переводов c2b
//      ** ОбъектМетаданных - Метаданные.РегистрыСведений - объект метаданных регистр сведений,
//        в котором хранятся настройки выполнения оплат. Регистр определяет
//        связь мерчанта и аналитики ведения учета
//        в программах 1С. На основании данных регистра должен выполняется
//        поиск настройки подключения при выполнении оплат и возвратов;
//      ** ИсключаемыеПоля - Массив Из Строка - наименования измерений, ресурсов или реквизитов, которые
//        необходимо скрыть на форме настройки подключения.
//      ** ИспользоватьЧастичныеОплаты - Булево - признак использования функциональности частичных оплат.
//      ** ИспользоватьНастройкуКассовыхСсылок - Булево - признак использования функциональности
//           добавления кассовых ссылок в мастере настройки подключения к СБП.
//      ** ШаблоныНазначений - ТаблицаЗначений - см. НовыйШаблоныНазначений.
//
Функция НастройкиПодключенияПрограммы() Экспорт
	
	Настройки = Неопределено;
	СистемаБыстрыхПлатежейСобытия.ПриОпределенииНастроекПодключенияПрограммы(
		Настройки);
	ИнтеграцияПодсистемБИП.ПриОпределенииНастроекПодключения(
		Настройки);
	СистемаБыстрыхПлатежейПереопределяемый.ПриОпределенииНастроекПодключения(
		Настройки);
	СистемаБыстрыхПлатежейСобытия.ПриПроверкеНастройкиПодключенияПрограммы(
		Настройки);
	
	Возврат Настройки;
	
КонецФункции

// Преобразует текущую локальную дату в UTC.
//
// Параметры:
//  Значение - Дата - исходная дата.
//
// Возвращаемое значение:
//  Дата - результат преобразования.
//
Функция ДатаВUTC(Значение) Экспорт
	
	Возврат Значение - СмещениеСтандартногоВремени(ЧасовойПоясСеанса(), Значение);
	
КонецФункции 

// Добавляет запись в журнал регистрации.
//
// Параметры:
//  СообщениеОбОшибке - Строка - комментарий к записи журнала регистрации;
//  Ошибка - Булево - если истина будет установлен уровень журнала регистрации "Ошибка".
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(
		СообщениеОбОшибке,
		Ошибка = Истина) Экспорт
	
	УровеньЖР = ?(Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖР,
		,
		,
		Лев(СообщениеОбОшибке, 5120));
	
КонецПроцедуры

// Определяет идентификатор группы платежных систем СБП.
//
// Возвращаемое значение:
//  Строка - внутренний идентификатор СБП.
//
Функция ИдентификаторСБП() Экспорт
	
	Возврат "sbp";
	
КонецФункции

// Обрабатывает значение для отправки в службу тех поддержки.
//
// Параметры:
//  Значение - Строка, Дата - данные для обработки.
//
// Возвращаемое значение:
//  Строка - подготовленные данные.
//
Функция ОбработатьЗначениеДляТехническойПоддержки(Значение) Экспорт
	
	Возврат ?(ЗначениеЗаполнено(Значение), " " + Значение, " " + НСтр("ru = '<не заполнено>'"));
	
КонецФункции

// Переводит число в систему счисления hex.
//
// Параметры:
//  Значение - Число - исходное значения для преобразования;
//
// Возвращаемое значение:
//  Строка - результат преобразования
//
Функция ПреобразоватьЧислоВHEX(Знач Значение) Экспорт
	
	Если Значение <= 0 Тогда
		ЧислоHEX = "0";
	Иначе
		Значение = Цел(Значение);
		ЧислоHEX = "";
		Пока Значение > 0 Цикл
			ЧислоHEX = Сред("0123456789ABCDEF", Значение % 16 + 1, 1) + ЧислоHEX;
			Значение = Цел(Значение / 16);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЧислоHEX;
	
КонецФункции

// Формирует настройки подключения для выполнения запросов.
//
// Параметры:
//  Запрос - Запрос - запрос значений полей из соответствующих таблиц базы данных.
//
// Возвращаемое значение:
//  Структура - настройки выполнения запросов к платежным системам:
//   * ИдентификаторМерчанта    - Строка - идентификатор мерчанта в Системе быстрых платежей;
//   * ИдентификаторУчастника - Строка - идентификатор участника Системы быстрых платежей;
//   * СсылкаПеренаправления - Строка - ссылка перенаправления для настройки подключения;
//   * НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//       настройка подключения к участнику СБП.
//   * Используется - Булево - признак активности настройки;
//   * ТипАутентификации - ПеречислениеСсылка.ТипыАутентификацииСБП - способ авторизации в сервисе участника СБП.
//
Функция НовыйПараметрыНастройкиПодключения(Запрос, РежимПоиска) Экспорт
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	// Проверка на пустое значение в тех случаях, когда обработчик обновления еще не успел выполниться.
	// При необходимости получаем параметры по настройке подключения.
	Если ПустаяСтрока(ВыборкаДетальныеЗаписи.ИдентификаторУчастника)
		И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НастройкаПодключения) Тогда
		
		Если РежимПоиска = "Справочник" Тогда
			ВызватьИсключение НСтр(
				"ru = 'Не удалось определить идентификатор участника Системы быстрых платежей. Обработка прервана.'");
		Иначе
			Возврат ПараметрыНастройкиПодключения(ВыборкаДетальныеЗаписи.НастройкаПодключения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыборкаДетальныеЗаписи.ИдентификаторУчастника = СистемаБыстрыхПлатежейКлиентСервер.ИдентификаторНеизвестногоУчастника() Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не определен идентификатор участника Системы быстрых платежей для мерчанта %1.
				|Для продолжения работы необходимо перейти к настройкам подключения и выбрать участника Системы быстрых платежей.'"),
			ВыборкаДетальныеЗаписи.ИдентификаторМерчанта);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИдентификаторУчастника) Тогда
		УстановитьИдентификаторУчастникаСБП();
	КонецЕсли;
	
	ПараметрыНастройкиПодключения = Новый Структура;
	ПараметрыНастройкиПодключения.Вставить(
		"ИдентификаторМерчанта",
		ВыборкаДетальныеЗаписи.ИдентификаторМерчанта);
	ПараметрыНастройкиПодключения.Вставить(
		"ИдентификаторУчастника",
		ВыборкаДетальныеЗаписи.ИдентификаторУчастника);
	ПараметрыНастройкиПодключения.Вставить(
		"СсылкаПеренаправления",
		ВыборкаДетальныеЗаписи.СсылкаПеренаправления);
	ПараметрыНастройкиПодключения.Вставить(
		"НастройкаПодключения",
		ВыборкаДетальныеЗаписи.НастройкаПодключения);
	ПараметрыНастройкиПодключения.Вставить(
		"Используется",
		ВыборкаДетальныеЗаписи.Используется);
	ПараметрыНастройкиПодключения.Вставить(
		"ТипАутентификации",
		ВыборкаДетальныеЗаписи.ТипАутентификации);
	
	Возврат ПараметрыНастройкиПодключения;
	
КонецФункции

// Определяет доступность использования функциональности чтения настроек
// в на основании прав доступа пользователя.
//
// Возвращаемое значение:
//  Булево - если Истина, чтение операций доступно.
//
Функция ЧтениеНастроекДоступно() Экспорт
	
	Возврат ПравоДоступа("Чтение", Метаданные.Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей);
	
КонецФункции

// Определяет доступность использования функциональности добавление ссылок
// в на основании прав доступа пользователя.
//
// Возвращаемое значение:
//  Булево - если Истина, чтение операций доступно.
//
Функция ДобавлениеПлатежныхСсылокДоступно() Экспорт
	
	Возврат ПравоДоступа("Добавление", Метаданные.Документы.ПлатежнаяСсылкаСБП);
	
КонецФункции

// Формирует идентификатор операции наличия терминального статуса при длительной оплате.
//
// Возвращаемое значение:
//  Строка - идентификатор операции.
//
Функция ИдентификаторОперацииПроверкиДлительнойОплаты() Экспорт
	
	Возврат "LONG_PAY";
	
КонецФункции

// Формирует идентификатор операции наличия терминального статуса при оплате.
//
// Возвращаемое значение:
//  Строка - идентификатор операции.
//
Функция ИдентификаторОперацииПроверкиОплаты() Экспорт
	
	Возврат "PAY";
	
КонецФункции

// Формирует представление технической информации об ошибке.
//
// Параметры:
//  URLОперации - Строка - URL метода сервиса;
//  КодОшибки - Строка - код ошибки сервиса;
//  Заголовки - Соответствие - заголовки запроса;
//  ИнформацияОбОшибке - Строка - подробная информация об ошибке.
//
// Возвращаемое значение:
//  Строка - техническая информация об ошибке.
//
Функция ТехническаяИнформацияОбОшибке(
		URLОперации,
		КодОшибки,
		Заголовки,
		ИнформацияОбОшибке) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Техническая информация об ошибке:
				|URL: %1
				|Код ошибки: %2
				|X-Correlation-ID: %3
				|Подробная информация:
				|%4'"),
			URLОперации,
			КодОшибки,
			Заголовки.Получить("X-Correlation-ID"),
			ИнформацияОбОшибке);
	
КонецФункции

// Определяет максимальное количество идентификатор ссылок для проверки наличия статусов.
//
// Возвращаемое значение:
//  Число - максимальное количество идентификаторов.
//
Функция ДопустимоеКоличествоИдентификаторов() Экспорт
	
	Возврат 19;
	
КонецФункции

// Определяет максимальное количество попыток запроса статуса
// для отложенных операций.
//
// Параметры:
//  Оплата - Булево - признак операции оплаты.
//
// Возвращаемое значение:
//  Число - максимальное количество попыток.
//
Функция МаксимальноеКоличествоПопытокЗапросаСтатуса(Оплата) Экспорт
	
	Если Оплата Тогда
		Возврат 400;
	Иначе
		Возврат 10;
	КонецЕсли;
	
КонецФункции

// Удаляет в свойствах результат данные частичных оплат.
//
// Параметры:
//  РезультатОперации - Структура - результат выполнения операции.
//
Процедура УдалитьСвойстваЧастичныхОплат(РезультатОперации) Экспорт
	
	Если РезультатОперации.ПараметрыОперации.Свойство("ДокументОснование") Тогда // АПК:1415 Универсальная механика обработки частичных оплат.
		РезультатОперации.ПараметрыОперации.Удалить("ДокументОснование")
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Устанавливает идентификатор с участника Системы быстрых платежей при переходе на версию 2.7.1.
//
// Параметры:
// Параметры - Структура - параметры обновления.
//
Процедура УстановитьИдентификаторУчастникаСБП(Параметры = Неопределено) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей");
		Блокировка.Добавить("РегистрСведений.НастройкиУчастниковСБП");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка,
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Родитель.УдалитьПлатежнаяСистема КАК УдалитьПлатежнаяСистема,
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Родитель КАК Родитель
			|ИЗ
			|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
			|ГДЕ
			|	НЕ НастройкиПодключенияКСистемеБыстрыхПлатежей.ЭтоГруппа
			|	И НЕ НастройкиПодключенияКСистемеБыстрыхПлатежей.ПометкаУдаления
			|	И НастройкиПодключенияКСистемеБыстрыхПлатежей.ИдентификаторУчастника = """"
			|ИТОГИ
			|	МАКСИМУМ(УдалитьПлатежнаяСистема)
			|ПО
			|	Родитель";
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаРодитель = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаРодитель.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаРодитель.Родитель) Тогда
				Продолжить;
			КонецЕсли;
			
			НастройкаОбъектРодитель = ВыборкаРодитель.Родитель.ПолучитьОбъект();
			НастройкаОбъектРодитель.Заблокировать();
			
			ОбъектМетаданных = ВыборкаРодитель.УдалитьПлатежнаяСистема.Метаданные();
			Если ЗначениеЗаполнено(ВыборкаРодитель.УдалитьПлатежнаяСистема) Тогда
				Индекс = Перечисления[ОбъектМетаданных.Имя].Индекс(ВыборкаРодитель.УдалитьПлатежнаяСистема);
				НастройкаОбъектРодитель.Наименование = ОбъектМетаданных.ЗначенияПеречисления[Индекс].Синоним;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НастройкаОбъектРодитель);
			
			ВыборкаДетальныеЗаписи = ВыборкаРодитель.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				НастройкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				НастройкаОбъект.Заблокировать();
				НастройкаОбъект.ИдентификаторУчастника = ИдентификаторУчастникаСБП(ВыборкаРодитель.УдалитьПлатежнаяСистема);
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НастройкаОбъект);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьИнформациюВЖурналРегистрации(
			ИнформацияОбОшибке,
			Истина);
		
		ВызватьИсключение НСтр("ru = 'Не удалось обновить идентификаторы участников СБП.'");
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область КодыОшибок

// Возвращает код ошибки "ОшибкаПодключения".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиОшибкаПодключения() Экспорт
	
	Возврат "ОшибкаПодключения";
	
КонецФункции

// Возвращает код ошибки "НеизвестнаяОшибка".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеизвестнаяОшибка() Экспорт
	
	Возврат "НеизвестнаяОшибка";
	
КонецФункции

// Возвращает код ошибки "НеверныйФорматЗапроса".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеверныйФорматЗапроса() Экспорт
	
	Возврат "НеверныйФорматЗапроса";
	
КонецФункции

// Возвращает код ошибки "УжеОплачен".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиУжеОплачен() Экспорт
	
	Возврат "УжеОплачен";
	
КонецФункции

// Возвращает код ошибки "НеверныйЛогинИлиПароль".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеверныйЛогинИлиПароль() Экспорт
	
	Возврат "НеверныйЛогинИлиПароль";
	
КонецФункции

// Возвращает код ошибки "ФайлНеЗагружен".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиФайлНеЗагружен() Экспорт
	
	Возврат "ФайлНеЗагружен";
	
КонецФункции

#КонецОбласти

#Область ИдентификаторыСтатусовСервиса

// Определяет статус операции по ее идентфикатору
//
// Параметры:
//  ИдентификаторСтатусаОперации - Строка - идентификатор статуса операции;
//
// Возвращаемое значение:
//  Структура - результат создания динамической ссылки в Системе быстрых платежей:
//    * СтатусОперации - Строка - текущее состояние операции оплаты. Возможные значения:
//      - "Выполняется" - подтверждение оплаты не получено;
//      - "Отменена" - оплата по ранее сформированному QR-коду невозможна;
//      - "Выполнена" - участник СБП подтвердил оплату;
//      - "Отклонена" - оплата по ранее сформированному QR-коду невозможна;
//      - "Ошибка" - неизвестный статус операции.
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - статус успешно определен;
//        - "НеизвестныйСтатус" - неизвестный идентификатор статуса;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//
Функция ПолучитьСтатусОперацииПоИдентификатору(
		ИдентификаторСтатусаОперации) Экспорт
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("СтатусОперации", Неопределено);
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке", "");
	
	Если ИдентификаторСтатусаОперации = ИдентификаторСтатусаВПроцессе() Тогда
		РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполняется();
	ИначеЕсли ИдентификаторСтатусаОперации = ИдентификаторСтатусаВыполнена() Тогда
		РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена();
	ИначеЕсли ИдентификаторСтатусаОперации = ИдентификаторСтатусаОтменена() Тогда
		РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтменена();
	ИначеЕсли ИдентификаторСтатусаОперации = ИдентификаторСтатусаОтклонена() Тогда
		РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтклонена();
	Иначе
		РезультатОперации.КодОшибки = "НеизвестныйСтатус";
		РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Не удалось определить статус операции.'");
		РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует идентификатор статуса отмененной операции.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаОтменена() Экспорт
	
	Возврат "REJECTED";
	
КонецФункции

// Формирует идентификатор статуса в процессе.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаВПроцессе() Экспорт
	
	Возврат "IN_PROGRESS";
	
КонецФункции

// Формирует идентификатор статуса выполненной операции.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаВыполнена() Экспорт
	
	Возврат "SUCCESS";
	
КонецФункции

// Формирует идентификатор статуса отклоненной операции.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаОтклонена() Экспорт
	
	Возврат "DECLINED";
	
КонецФункции

// Формирует идентификатор статуса ошибка.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаОшибка() Экспорт
	
	Возврат "ERROR";
	
КонецФункции

// Формирует идентификатор статуса превышения суммы.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаПревышение() Экспорт
	
	Возврат "EXCEEDED";
	
КонецФункции

// Формирует идентификатор статуса нет информации.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаНетИнформации() Экспорт
	
	Возврат "NO_INFO";
	
КонецФункции

// Формирует идентификатор статуса не оплачен.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаНеОплачен() Экспорт
	
	Возврат "NOT_PAID";
	
КонецФункции

// Формирует идентификатор статуса требуется подтверждение.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаТребуетсяПодтверждение() Экспорт
	
	Возврат "CONFIRMATION_REQUIRED";
	
КонецФункции

#КонецОбласти

#Область ОбработкаЗапросовСервиса

// Определяет URL для вызова сервиса Системы быстрых платежей.
//
// Параметры:
//  Операция - Строка - путь к ресурсу;
//  ИдентификаторURL - Строка - идентификатор сценария в URL.
//
// Возвращаемое значение:
//  Строка - URL операции.
//
Функция URLОперацииСервиса(Операция, ИдентификаторURL = "") Экспорт
	
	Возврат "https://"
		+ ХостСервисаОбменаДанными()
		+ "/api/program1c/sbp"
		+ ИдентификаторURL + "/v1"
		+ Операция;
	
КонецФункции

// Добавляет в запись JSON параметры клиента.
//
// Параметры:
//  ЗаписьДанныхСообщения  - ЗаписьJSON - запись, в которую необходимо
//    добавить данные аутентификации.
//
Процедура ЗаписатьПараметрыКлиента(ЗаписьДанныхСообщения) Экспорт
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("clientInfo");
	
	ИмяПрограммы = ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы();
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИмяПрограммы);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

// Добавляет в запись JSON данные аутентификации.
//
// Параметры:
//  ЗаписьДанныхСообщения  - ЗаписьJSON - запись, в которую необходимо
//    добавить данные аутентификации;
//  ДанныеАутентификации   - Структура - параметры аутентификации пользователя
//    Интернет-поддержки. См. ДанныеАутентификации().
//
Процедура ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации) Экспорт
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authenticationInfo");
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authToken");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Тикет);
		
	Иначе
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Логин);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Пароль);
		
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

// Добавляет в запись JSON данные аутентификации.
//
// Параметры:
//  ЗаписьДанныхСообщения - ЗаписьJSON - запись, в которую необходимо
//    добавить данные аутентификации;
//  Аутентификация - Структура - параметры аутентификации мерчанта.
//  ИдентификаторМерчанта - Строка - идентификатор торговой точки.
//
Процедура ЗаписатьДанныеАутентификацииУчастникаСБП(
		ЗаписьДанныхСообщения,
		Аутентификация,
		ИдентификаторМерчанта) Экспорт
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sbpMemberRequestHeaders");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authorization");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Аутентификация);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("xmerchantId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторМерчанта);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

// Создает структуру настроек подключения к сервису Системы быстрых платежей.
//
// Возвращаемое значение:
//  Структура - см. СистемаБыстрыхПлатежейПовтИсп.ИнициализироватьПараметрыПодключения.
//
Функция ИнициализироватьПараметрыПодключения() Экспорт
	
	Возврат СистемаБыстрыхПлатежейПовтИсп.ИнициализироватьПараметрыПодключения();
	
КонецФункции

// Определяет по коду состояния и коду ошибки сервиса тип ошибки для потребителей.
//
// Параметры:
//  КодСостояния - Число - код состояния ответа сервиса;
//
// Возвращаемое значение:
//  Строка - код ошибки сервиса.
//
Функция ПереопределитьКодОшибкиСервиса(КодСостояния) Экспорт
	
	Если КодСостояния = 200 Тогда
		Возврат "";
	ИначеЕсли КодСостояния = 400
		Или КодСостояния = 404
		Или КодСостояния = 422 Тогда
		Возврат КодОшибкиНеверныйФорматЗапроса();
	ИначеЕсли КодСостояния = 401 Тогда
		Возврат КодОшибкиНеверныйЛогинИлиПароль();
	ИначеЕсли КодСостояния = 402 Тогда
		Возврат "ТребуетсяОплата";
	ИначеЕсли КодСостояния = 403 Тогда
		Возврат "ОтсутствуетДоступКСервису";
	ИначеЕсли КодСостояния = 429 Тогда
		Возврат "ПревышеноКоличествоПопыток";
	ИначеЕсли КодСостояния = 503 Тогда
		Возврат "СервисВременноНеДоступен";
	ИначеЕсли КодСостояния = 500
		Или КодСостояния = 501
		Или КодСостояния = 502
		Или КодСостояния > 503 Тогда
		Возврат "ОшибкаСервиса";
	ИначеЕсли КодСостояния = 0 Тогда
		Возврат КодОшибкиОшибкаПодключения();
	Иначе
		Возврат КодОшибкиНеизвестнаяОшибка();
	КонецЕсли;
	
КонецФункции

// Определяет по коду ошибки сообщение пользователю.
//
// Параметры:
//  КодОшибки - Строка - ошибка сервиса см. функцию
//   ПереопределитьКодОшибкиСервиса.
//  ТелоJSON  - Строка - содержимое ответа сервиса.
//
// Возвращаемое значение:
//  Строка - сообщение пользователю.
//
Функция ПереопределитьСообщениеПользователю(КодОшибки, ТелоJSON = "") Экспорт
	
	КодОшибкиСервиса = "";
	Если ЗначениеЗаполнено(ТелоJSON) Тогда
		КодОшибкиСервиса = ОпределитьКодОшибкиСервиса(ТелоJSON);
	КонецЕсли;
	
	Если КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "BAD_REQUEST_1C" Тогда
		Возврат НСтр("ru = 'Неверный набор параметров или формат запроса к сервису Портала 1С:ИТС.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "BAD_REQUEST" Тогда
		Возврат НСтр("ru = 'Неверный набор параметров или формат запроса к сервису банка.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "LOW_AMOUNT_PAYMENT" Тогда
		Возврат НСтр("ru = 'Сумма оплаты меньше допустимой.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "HIGH_AMOUNT_PAYMENT" Тогда
		Возврат НСтр("ru = 'Сумма оплаты превышает допустимую.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "UNKNOWN_PROGRAM" Тогда
		Возврат НСтр("ru = 'Неизвестный идентификатор программы. Обратитесь к администратору.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "INTEGRATION_IS_NOT_SUPPORTED_1C" Тогда
		Возврат НСтр("ru = 'Интеграция с банком не поддерживается. Обратитесь к администратору.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "UNKNOWN_MERCHANT" Тогда
		Возврат НСтр("ru = 'Идентификатор мерчанта не обнаружен. Проверьте настройки подключения.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса() Тогда
		Возврат НСтр("ru = 'Неверный набор параметров или формат запроса. Обратитесь к администратору.'");
	КонецЕсли;
	
	Если КодОшибки = КодОшибкиНеверныйЛогинИлиПароль()
		И КодОшибкиСервиса = "USER_AUTHENTICATION_EXCEPTION_1C" Тогда
		Возврат НСтр("ru = 'Ошибка аутентификации на Портале 1С:ИТС.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйЛогинИлиПароль()
		И КодОшибкиСервиса = "BAD_CREDENTIALS" Тогда
		Возврат НСтр("ru = 'Ошибка аутентификации в сервисе банка.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйЛогинИлиПароль() Тогда
			Возврат НСтр("ru = 'Ошибка авторизации. Обратитесь к администратору.'");
	КонецЕсли;
	
	Если КодОшибки = "ОтсутствуетДоступКСервису"
		И КодОшибкиСервиса = "USER_AUTHORISATION_EXCEPTION_1С" Тогда
		Возврат НСтр("ru = 'Отсутствует доступ к сервису на Портале 1С:ИТС.'");
	ИначеЕсли КодОшибки = "ОтсутствуетДоступКСервису"
		И КодОшибкиСервиса = "AUTHORIZATION_EXCEPTION" Тогда
		Возврат НСтр("ru = 'Отсутствует доступ к сервису участника СБП.'");
	ИначеЕсли КодОшибки = "ОтсутствуетДоступКСервису"
		И КодОшибкиСервиса = "MERCHANT_NOT_ACTIVE" Тогда
		Возврат НСтр("ru = 'Настройка подключения  не активна или находится в процессе регистрации в Системе быстрых платежей. Статус подключения необходимо уточнить у банка или платежного агрегатора, с которым заключен договор.'");
	ИначеЕсли КодОшибки = "ОтсутствуетДоступКСервису" Тогда
		Возврат НСтр("ru = 'Отсутствует доступ к сервису. Обратитесь к администратору.'");
	КонецЕсли;
	
	Если КодОшибки = "ПревышеноКоличествоПопыток"
		И КодОшибкиСервиса = "TOO_MANY_REQUESTS_1C" Тогда
		Возврат НСтр("ru = 'Превышено количество попыток обращения к сервису 1С с не верными данными авторизации.'")
			+ " "
			+ НСтр("ru = 'Проверьте правильность данных авторизации и повторите попытку через 30 минут.'");
	ИначеЕсли КодОшибки = "ПревышеноКоличествоПопыток"
		И КодОшибкиСервиса = "TOO_MANY_REQUESTS" Тогда
		Возврат НСтр("ru = 'Превышено количество попыток обращения к сервису участника СБП с не верными данными авторизации.'")
			+ " "
			+ НСтр("ru = 'Проверьте правильность данных авторизации и повторите попытку через 30 минут.'");
	КонецЕсли;
	
	Если КодОшибки = "СервисВременноНеДоступен"
		И КодОшибкиСервиса = "SERVICE_UNAVAILABLE_PAYMENT" Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису участника СБП.
			|Сервис временно недоступен. Повторите попытку подключения позже.'");
	ИначеЕсли КодОшибки = "СервисВременноНеДоступен" Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису Портала 1С:ИТС. Сервис временно недоступен.
			|Повторите попытку подключения позже.'");
	КонецЕсли;
	
	Если КодОшибки = "ТребуетсяОплата" 
		И КодОшибкиСервиса = "PAYMENT_REQUIRED" Тогда
		Возврат НСтр("ru = 'Требуется оплата сервиса. Обратитесь к обсуживающему партнеру.'");
	ИначеЕсли КодОшибки = "ТребуетсяОплата" Тогда
		Возврат НСтр("ru = 'Требуется оплата сервиса. Обратитесь к администратору.'");
	КонецЕсли;
	
	Если КодОшибки = "ОшибкаСервиса"
		И КодОшибкиСервиса = "UNKNOWN_EXCEPTION" Тогда
		Возврат НСтр("ru = 'Сервис банка вернул неизвестную ошибки при выполнении операции. Обратитесь к администратору.'");
	ИначеЕсли КодОшибки = "ОшибкаСервиса"
		И КодОшибкиСервиса = "UNKNOWN_EXCEPTION_1С" Тогда
		Возврат НСтр("ru = 'Сервис вернул неизвестную ошибки при выполнении операции. Обратитесь к администратору.'");
	ИначеЕсли КодОшибки = "ОшибкаСервиса"
		И КодОшибкиСервиса = "BACKEND_CONNECTION_ERROR" Тогда
		Возврат НСтр("ru = 'Сервис банка не ответил в установленное время. Повторите операцию или обратитесь в техническую поддержку банка.'");
	ИначеЕсли КодОшибки = "ОшибкаСервиса" Тогда
		Возврат НСтр("ru = 'Ошибка работы с сервисом Системы быстрых платежей.'");
	ИначеЕсли КодОшибки = "ОшибкаПодключения" Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису Системы быстрых платежей.'");
	Иначе
		Возврат НСтр("ru = 'Неизвестная ошибка при подключении к сервису.'");
	КонецЕсли;
	
КонецФункции

// Формирует стандартные заголовки для вызова операции.
//
// Возвращаемое значение:
//  Соответствие - заголовки операции.
//
Функция НовыйЗаголовкиВызоваОперации() Экспорт
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Correlation-ID", Строка(Новый УникальныйИдентификатор));
	
	Возврат Заголовки;
	
КонецФункции

// Восстанавливает значение даты из JSON, если значение не равно Неопределено.
//
// Параметры:
//  Свойство - Строка - имя свойства;
//  Значение - Строка, Неопределено - значение свойства;
//  ДополнительныеПараметры - Структура, Неопределено - параметры восстановления.
//
// Возвращаемое значение:
//  Дата, Неопределено - результат восстановления.
//
Функция ВосстановитьДатуJSON(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Если Значение <> Неопределено Тогда
		
		Результат = ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
		
		// Свойство operationDate необходимо обрабатывать
		// и хранить в формате UTC, для того чтобы при
		// проведении сверки взаиморасчетов из разных
		// часовых поясов получать единые выборки операций.
		Если Свойство = "operationDate" Тогда
			Результат = ДатаВUTC(Результат);
		КонецЕсли;
		
		Возврат Результат;
		
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

// Производит преобразование число в формат JSON.
//
// Параметры:
//  Значение - Число - значения для преобразования.
//
// Возвращаемое значение:
//   Строка - преобразованное число.
//
Функция ПреобразоватьЧислоВФорматJSON(Знач Значение) Экспорт
	
	Возврат СтрЗаменить(
		СтрЗаменить(
			"" + Значение,
			",",
			"."),
		Символы.НПП,
		"");
	
КонецФункции

// Удаляет служебные символы из идентификатора.
//
// Параметры:
//  Идентификатор - Число - идентификатор операции.
//
// Возвращаемое значение:
//   Строка - обработанный идентификатор.
//
Функция ИдентификаторОперацииБезСлужебныхСимволов(Идентификатор) Экспорт
	
	Возврат СтрЗаменить("" + Идентификатор,
		Символы.НПП,
		"");
	
КонецФункции

// Определяет идентификатор валюты рубль РФ.
//
// Возвращаемое значение:
//  Строка - идентификатор валюты по ISO.
//
Функция ИдентификаторВалютыРоссийскийРубль() Экспорт
	
	Возврат "RUB";
	
КонецФункции

#КонецОбласти

#Область ОнлайнЗаказы

// Выполняет заполнение параметров оплат СБП документа операции.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, для которого
//    формируются параметры оплат.
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения к СБП.
//  ПараметрыОплат - Структура - Содержит описание параметров оплат по способам:
//   *c2b - Структура, Неопределено - Параметры оплат c2b,
//   Неопределено если подсистема ПереводыСБПc2b не используется.
//
Процедура ПараметрыОплаты(
	ДокументОперации,
	НастройкаПодключения,
	ПараметрыОплат) Экспорт
	
	СистемаБыстрыхПлатежейСобытия.ПриФормированииПараметровОплат(
		ДокументОперации,
		НастройкаПодключения,
		ПараметрыОплат);
	
КонецПроцедуры

// Выполняет подготовку параметров оплаты заказа для записи в соответствующие подсистемы.
//
// Параметры:
//  ДанныеЗаказа - Структура - Содержит данные заказа
//    * ИдентификаторЗаказа - Строка - Идентификатор онлайн-заказа;
//    * Статус - Строка - Статус онлайн-заказа;
//    * СуммаЗаказа - Число - Сумма онлайн-заказа;
//    * СпособОплаты - Перечисление.СпособыОплатыОнлайнЗаказов - Способ оплаты онлайн-заказа;
//    * ДатаОплаты - дата получения данных об оплате сервисом;
//    * КонтрольнаяСумма - Строка - Значение контрольной суммы заказа;
//    * ВерсияКонтрольнойСуммы - Число - Версия расчета контрольной суммы заказа;
//    * ОплатаСБП - Структура, Неопределено - Содержит данные операции СБП, в том случае когда
//      значение Свойства СпособОплаты = Перечисления.СпособыОплатыОнлайнЗаказов.СБПc2b:
//      ***Идентификатор - Строка - идентификатор операции;
//      ***ИдентификаторОплаты - Строка - идентификатор оплаты в СБП;
//      ***ИдентификаторПлатежнойСистемы - Строка - идентификатор оплаты в Системе быстрых платежей;
//      ***ДатаОперации - Дата - фактическая дата оплаты в UTC;
//      ***ИдентификаторМерчанта - Строка - идентификатор мерчанта в Системе быстрых платежей;
//      ***НазначениеПлатежа - Строка - назначение платежа;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей, Неопределено - Настройка подключения к СБП,
//    указанная в настройке страницы онлайн-заказов, Неопределено в том случае, если настройка не определена.
//  ПараметрыОплаты - Соответствие - Содержит параметры оплат в разрезе ее способов
//  ПараметрыНастройкиОплаты - Структура - Содержит параметры настройки вида оплаты
//  ИдентификаторВариантаНастройки - Строка- идентификатор варианта настройки СБП.
//
Процедура ЗаполнитьПараметрыОплаты(
	ДанныеЗаказа,
	НастройкаПодключения,
	ПараметрыОплаты,
	ПараметрыНастройкиОплаты,
	ИдентификаторВариантаНастройки) Экспорт
	
	ПараметрыНастройкиОплаты = ДанныеНастройкиОперацииПоДаннымОплаты(
		НастройкаПодключения,
		ДанныеЗаказа.ОплатаСБП.ИдентификаторМерчанта);
	
	СистемаБыстрыхПлатежейСобытия.ПриЗаполненииПараметровОплаты(
		ДанныеЗаказа,
		ПараметрыНастройкиОплаты,
		ПараметрыОплаты,
		ВариантНастройкиПоИдентификатору(ИдентификаторВариантаНастройки));
	
КонецПроцедуры

// Выполняет подготовку параметров оплаты заказа для записи в соответствующие подсистемы.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, для которого
//  выполняется запись данных оплаты
//  ПараметрыОплаты - Соответствие - Содержит параметры оплат в разрезе ее способов;
//  ПараметрыНастройкиОплаты - Структура - параметры настройки:
//    * НастройкаПодключения - Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей
//      - настройка подключения к системе быстрых платежей.
//    * ИдентификаторУчастника - Строка - идентификатор участника системы быстрых платежей;
//  ИдентификаторВариантаНастройки - Строка- Идентификатор варианта настройки СБП.
//
Процедура ЗаписатьДанныеОплаты(
	ДокументОперации,
	ПараметрыОплаты,
	ПараметрыНастройкиОплаты,
	ИдентификаторВариантаНастройки) Экспорт
	
	СистемаБыстрыхПлатежейСобытия.ПриЗаписиДанныхОплаты(
		ДокументОперации,
		ПараметрыОплаты,
		ПараметрыНастройкиОплаты,
		ВариантНастройкиПоИдентификатору(ИдентификаторВариантаНастройки));
	
КонецПроцедуры

// Выполняет получение данных оплат по переданным документам операций.
//
// Параметры:
// ДанныеОпераций  - Структура 
//  ДокументыОпераций - Массив Из ОпределяемыйТип.ДокументОперацииСБП - перечень документов,
//  по которым необходимо получить данные оплат.
//  ДанныеОпераций - Соответствие - см.ПереводыСБПc2bСлужебный.ДанныеОпераций
//  ИдентификаторВариантаНастройки - Строка- Идентификатор варианта настройки СБП.
//
Процедура ДанныеОплаты(
	ДокументыОпераций,
	ДанныеОпераций,
	ИдентификаторВариантаНастройки) Экспорт
	
	СистемаБыстрыхПлатежейСобытия.ПриПолученииДанныхОплат(
		ДокументыОпераций,
		ДанныеОпераций,
		ВариантНастройкиПоИдентификатору(ИдентификаторВариантаНастройки));
	
КонецПроцедуры

// Выполняет обработку назначения платежа при подготовке онлайн-заказа.
//
// Параметры:
//  НазначениеПлатежа - Строка - Назначение платежа;
//  ИдентификаторВариантаНастройки - Строка - Идентификатор варианта настройки СБП.
//
Процедура ПодготовитьНазначениеПлатежа(
	НазначениеПлатежа,
	ИдентификаторВариантаНастройки) Экспорт
	
	СистемаБыстрыхПлатежейСобытия.ПриПодготовкеНазначенияПлатежа(
		НазначениеПлатежа,
		ВариантНастройкиПоИдентификатору(ИдентификаторВариантаНастройки));
	
КонецПроцедуры

// Выполняет проверку параметров оплат.
//
// Параметры:
//  ПараметрыОплаты - Структура - Содержит параметры оплат онлайн-заказа;
//  РезультатОперации - Структура - результат выполнения операции;
//  ИдентификаторВариантаНастройки - Строка - Идентификатор варианта настройки СБП.
//
Процедура ПроверитьПараметрыОплат(
		ПараметрыОплаты,
		РезультатОперации,
		ИдентификаторВариантаНастройки) Экспорт
	
	СистемаБыстрыхПлатежейСобытия.ПриПроверкеПараметровОплат(
		ПараметрыОплаты,
		РезультатОперации,
		ВариантНастройкиПоИдентификатору(ИдентификаторВариантаНастройки));
	
КонецПроцедуры

// Получает данные шаблонов из настройки подключения СБП.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения к СБП.
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    оплату в информационной базе.
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. СистемаБыстрыхПлатежейСлужебный.НовыйШаблоныНазначений.
//
Функция ПриОпределенииШаблоновНазначенияЗаказаСБП(
		НастройкаПодключения,
		ДокументОперации,
		ВариантНастройки) Экспорт
	
	Возврат РегистрыСведений.ШаблоныНазначенийПлатежейСБП.ШаблоныНазначенийДокументаОперации(
		НастройкаПодключения,
		ДокументОперации,
		ВариантНастройки);
	
КонецФункции

#КонецОбласти

#Область ОперацииСТокенамиСервиса

// Получает токен сервиса для переданной настройки подключения.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения к СБП.
//  ИмяСервиса - Строка - имя сервиса в котором будет использоваться токен.
//
// Возвращаемое значение:
//  Структура - данные сверке взаиморасчетов:
//    * Токен - Строка - токен сервиса.
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//     может быть обработан вызывающим методом;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ТокенСпособаОплаты(
	НастройкаПодключения,
	РезультатОперации,
	ИмяСервиса) Экспорт
	
	Если Не ЗначениеЗаполнено(НастройкаПодключения) Тогда
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Не заполнена настройка подключения к СБП.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Не заполнена настройка подключения к СБП.'");
		Возврат РезультатОперации;
	КонецЕсли;
	
	ИдентификаторСервиса = ИдентификаторСервисаПоИмени(ИмяСервиса);
	
	Если ИдентификаторСервиса = Неопределено Тогда
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Передано неизвестное имя сервиса.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Передано неизвестное имя сервиса.'");
		Возврат РезультатОперации;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ИдентификаторУчастника КАК ИдентификаторУчастника,
	|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ИдентификаторМерчанта КАК ИдентификаторМерчанта,
	|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ВариантНастройки КАК ВариантНастройки,
	|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Используется КАК Используется,
	|	ЕСТЬNULL(НастройкиУчастниковСБП.%1, ""UNKNOW"") КАК ТипАутентификации
	|ИЗ
	|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
	|		ПО (НастройкиПодключенияКСистемеБыстрыхПлатежей.ИдентификаторУчастника = НастройкиУчастниковСБП.Идентификатор)
	|ГДЕ
	|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка = &НастройкаПодключения";
	
	ИмяПоля = "";
	СистемаБыстрыхПлатежейСобытия.ПриОпределенииИмениПоляТипаАутентификации(
		Перечисления.ВариантыНастройкиСБП.c2b,
		ИмяПоля);
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ИмяПоля);
	
	Запрос.УстановитьПараметр("НастройкаПодключения", НастройкаПодключения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Не Выборка.Используется Тогда
			Возврат РезультатОперации;
		КонецЕсли;
		ПараметрыНастройки = Новый Структура;
		ПараметрыНастройки.Вставить("ИдентификаторУчастника", Выборка.ИдентификаторУчастника);
		ПараметрыНастройки.Вставить("ИдентификаторМерчанта",  Выборка.ИдентификаторМерчанта);
		ПараметрыНастройки.Вставить("ТипАутентификации",      Выборка.ТипАутентификации);
		ПараметрыНастройки.Вставить("ВариантНастройки",       Выборка.ВариантНастройки);
	Иначе
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Не удалось получить данные по настройке подключения к СБП.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Не удалось получить данные по настройке подключения к СБП.'");
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеХранилища = ПрочитатьПараметрыАутентификации(
		НастройкаПодключения,
		ПараметрыНастройки.ИдентификаторУчастника);
	
	ПараметрыАутентификации = ДанныеХранилища.Получить(ПараметрыНастройки.ИдентификаторУчастника);
	
	ДанныеТокенов = НовыйОписаниеТокеновСервиса();
	ЗаполнитьЗначенияСвойств(ДанныеТокенов, ПараметрыАутентификации);
	
	ДанныеТокенаСервиса = ДанныеТокенов.consumers[ИдентификаторСервиса];
	
	Если Не ПустаяСтрока(ДанныеТокенаСервиса.Токен) Тогда
		РезультатОперации.Токен = ДанныеТокенаСервиса.Токен;
		Возврат РезультатОперации;
	Иначе
		
		ИдентификаторТокена = Строка(Новый УникальныйИдентификатор);
		
		РезультатВызова = СистемаБыстрыхПлатежейСервис.ОперацияЗапросТокенаАутентификацииСервиса(
			ПараметрыНастройки,
			ПараметрыАутентификации,
			ИдентификаторТокена,
			ИмяСервиса);
		
		Если Не ПустаяСтрока(РезультатВызова.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатВызова, , "КодОшибки");
			Возврат РезультатОперации;
		КонецЕсли;
		
		ДанныеТокенаСервиса.Токен = РезультатВызова.Токен;
		ДанныеТокенаСервиса.Идентификатор = ИдентификаторТокена;
		
		ПараметрыАутентификации.Вставить("consumers", ДанныеТокенов.consumers);
		
		ДанныеХранилища.Вставить(ПараметрыНастройки.ИдентификаторУчастника, ПараметрыАутентификации);
		
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			НастройкаПодключения,
			ДанныеХранилища);
		УстановитьПривилегированныйРежим(Ложь);
		
		РезультатОперации.Токен = РезультатВызова.Токен;
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Отзывает токены сервиса для переданной настройки подключения.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения к СБП.
//  ИмяСервиса - Строка - имя сервиса в котором использовались токены.
//
// Возвращаемое значение:
//  Структура - данные сверке взаиморасчетов:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//     может быть обработан вызывающим методом;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Процедура ОтозватьТокенСпособаОплаты(
	НастройкаПодключения,
	РезультатОперации,
	ИмяСервиса) Экспорт
	
	Если Не ЗначениеЗаполнено(НастройкаПодключения) Тогда
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Не заполнена настройка подключения к СБП.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Не заполнена настройка подключения к СБП.'");
		Возврат;
	КонецЕсли;
	
	ИдентификаторСервиса = ИдентификаторСервисаПоИмени(ИмяСервиса);
	
	Если ИдентификаторСервиса = Неопределено Тогда
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Передано неизвестное имя сервиса.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Передано неизвестное имя сервиса.'");
		Возврат;
	КонецЕсли;
	
	ИдентификаторУчастника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаПодключения, "ИдентификаторУчастника");
	
	Если Не ЗначениеЗаполнено(ИдентификаторУчастника) Тогда
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Не удалось получить идентификатор участника.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Не удалось получить идентификатор участника.'");
		Возврат;
	КонецЕсли;
	
	ДанныеХранилища = ПрочитатьПараметрыАутентификации(
		НастройкаПодключения,
		ИдентификаторУчастника);
		
	ИдентификаторыТокенов = Новый Массив;
		
	Для Каждого ДанныеАутентификации Из ДанныеХранилища Цикл
		
		ТокеныСервисов = Новый Структура;
		ТокеныСервисов.Вставить("consumers", Неопределено);
		ЗаполнитьЗначенияСвойств(ТокеныСервисов, ДанныеАутентификации.Значение);
		
		Если ТокеныСервисов.consumers = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеТокенаСервиса = ДанныеАутентификации.Значение.consumers[ИдентификаторСервиса];
		
		Если ПустаяСтрока(ДанныеТокенаСервиса.Идентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторыТокенов.Добавить(ДанныеТокенаСервиса.Идентификатор);
		
		ДанныеТокенаСервиса.Идентификатор = "";
		ДанныеТокенаСервиса.Токен = "";
		
	КонецЦикла;
	
	Если ИдентификаторыТокенов.Количество() > 0 Тогда
		
		РезультатВызова = СистемаБыстрыхПлатежейСервис.ОперацияОтзывТокеновАутентификацииСервиса(
			ИдентификаторыТокенов,
			ИмяСервиса);
			
		Если Не ПустаяСтрока(РезультатВызова.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатВызова, , "КодОшибки");
			Возврат;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			НастройкаПодключения,
			ДанныеХранилища);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СверкаВзаиморасчетовСБПc2b

// Определяет список настроек подключения, для которых доступна сверка взаиморасчетов.
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройки подключения, для которых доступна
//  сверка взаиморасчетов.
//
Функция НастройкиСверкиВзаиморасчетов() Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
		|		ПО НастройкиПодключенияКСистемеБыстрыхПлатежей.ИдентификаторУчастника = НастройкиУчастниковСБП.Идентификатор
		|			И (НастройкиУчастниковСБП.СверкаВзаиморасчетовc2b)";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область МакетыСБП

// Возвращает табличный документ для печати макета СБП.
//
// Параметры:
//  ИдентификаторМакета - Строка - Идентификатор макета СБП для печати.
//
// Возвращаемое значение:
//  ТабличныйДокумент - макет СБП.
//
Функция ПолучитьМакетСБП(ИдентификаторМакета) Экспорт
	
	МакетВКэше = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КэшМакетовСБП.Макет КАК Макет,
	|	КэшМакетовСБП.ДатаОбновления КАК ДатаОбновления
	|ИЗ
	|	РегистрСведений.КэшМакетовСБП КАК КэшМакетовСБП
	|ГДЕ
	|	КэшМакетовСБП.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторМакета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		МакетВКэше = Выборка.Макет.Получить();
		
		Если Выборка.ДатаОбновления > ДобавитьМесяц(ТекущаяДатаСеанса(), -2) Тогда
			Возврат МакетВКэше;
		КонецЕсли;
		
	КонецЕсли;
	
	// Макет не найден или устарел
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Данные обновляются через поставляемые данные.
		Если МакетВКэше.ВысотаТаблицы = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Поставляемые макеты СБП не загружены, обратитесь к администратору.'"));
		КонецЕсли;
		Возврат МакетВКэше;
	Иначе
		// Выполним процедуру обновления макетов.
		РезультатОбновления = ОбновитьКэшМакетов();
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОбновления.КодОшибки) Тогда
		Возврат МакетВКэше;
	КонецЕсли;
	
	ОбновленныйМакет = Новый Структура;
	ОбновленныйМакет.Вставить(ИдентификаторМакета, Неопределено);
	
	ЗаполнитьЗначенияСвойств(ОбновленныйМакет, РезультатОбновления.ОбновленныеМакеты);
	
	Если ОбновленныйМакет[ИдентификаторМакета] = Неопределено Тогда
		Возврат МакетВКэше;
	Иначе
		Возврат ОбновленныйМакет[ИдентификаторМакета];
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область НастройкиУчастников

// Определяет необходимость расчета HAMC.
//
// Параметры:
//  ТипАутентификации - ПеречислениеСсылка.ТипыАутентификацииСБП - способ авторизации в сервисе участника СБП.
//
// Возвращаемое значение:
//  Булево - если Истина, необходимо подготовить данные для расчета HMAC.
//
Функция УчастникСБПИспользуетHMAC(ТипАутентификации) Экспорт
	
	Возврат (ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA1
		Или ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256);
	
КонецФункции

// Определяет необходимость получения токена аутентификации.
//
// Параметры:
//  ТипАутентификации - ПеречислениеСсылка.ТипыАутентификацииСБП - способ авторизации в сервисе участника СБП.
//
// Возвращаемое значение:
//  Булево - если Истина, необходимо получить токен аутентификации.
//
Функция УчастникСБПИспользуетPasswordCredentialsGrant(ТипАутентификации) Экспорт
	
	Возврат (ТипАутентификации = Перечисления.ТипыАутентификацииСБП.RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT);
	
КонецФункции

// Формирует заголовок аутентификации для запроса в платежную систему.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ДанныеАутентификации - Структура - настройки аутентификации в сервисе;
//  ДанныеДляПодписи - Массив из Строка  - данные шифрования;
//  ТребуетсяОбновление - Булево - признак необходимости обновления устаревших данных.
//
// Возвращаемое значение:
//  Строка - заголовок аутентификации.
//
Функция ЗаголовокАвторизацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ДанныеДляПодписи,
		ТребуетсяОбновление) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Аутентификация",     Неопределено);
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("Ошибка",             Ложь);
	
	Если ПараметрыНастройкиПодключения.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT Тогда
		
		// Данные токена должны быть удалены из ИБ
		// в принудительном порядке, для получения
		// обновленной информации.
		Если ТребуетсяОбновление Тогда
			
			ДанныеАутентификации.accessToken = Неопределено;
			ДанныеАутентификации.tokenType = Неопределено;
			ДанныеАутентификации.expiresDate = Неопределено;
			
			ДанныеХранилища = ПрочитатьПараметрыАутентификации(
				ПараметрыНастройкиПодключения.НастройкаПодключения,
				ПараметрыНастройкиПодключения.ИдентификаторУчастника);
			
			ДанныеХранилища.Вставить(
				ПараметрыНастройкиПодключения.ИдентификаторУчастника,
				ДанныеАутентификации);
			
			УстановитьПривилегированныйРежим(Истина);
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				ПараметрыНастройкиПодключения.НастройкаПодключения,
				ДанныеХранилища);
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
		ДатаТокена = ДанныеАутентификации.expiresDate;
		СформироватьЗаголовокАутентификацииPasswordCredentialsGrant(
			ДанныеАутентификации,
			ПараметрыНастройкиПодключения.ИдентификаторУчастника,
			Результат);
		
		// Обновление данных аутентификации.
		Если ЗначениеЗаполнено(ПараметрыНастройкиПодключения.НастройкаПодключения)
			И ДатаТокена <> ДанныеАутентификации.expiresDate Тогда
			
			ДанныеХранилища = ПрочитатьПараметрыАутентификации(
				ПараметрыНастройкиПодключения.НастройкаПодключения,
				ПараметрыНастройкиПодключения.ИдентификаторУчастника);
			
			ДанныеХранилища.Вставить(
				ПараметрыНастройкиПодключения.ИдентификаторУчастника,
				ДанныеАутентификации);
			
			УстановитьПривилегированныйРежим(Истина);
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				ПараметрыНастройкиПодключения.НастройкаПодключения,
				ДанныеХранилища);
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыНастройкиПодключения.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BASIC Тогда
		Результат.Аутентификация = ИнтернетПоддержкаПользователей.ЗаголовокБазовойСхемыАутентификации(
			ДанныеАутентификации.login,
			ДанныеАутентификации.password);
	ИначеЕсли ПараметрыНастройкиПодключения.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER Тогда
		Результат.Аутентификация = ИнтернетПоддержкаПользователей.ЗаголовокBearerАутентификации(
			ДанныеАутентификации.token);
	ИначеЕсли ПараметрыНастройкиПодключения.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256 Тогда
		Результат.Аутентификация = ЗаголовокHMACАутентификации(
			ДанныеАутентификации.key,
			ДанныеДляПодписи,
			ХешФункция.SHA256); 
	ИначеЕсли ПараметрыНастройкиПодключения.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA1 Тогда
		Результат.Аутентификация = ЗаголовокHMACАутентификации(
			ДанныеАутентификации.key,
			ДанныеДляПодписи,
			ХешФункция.SHA1);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип авторизации.'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет обновление данных аутентификации по настройке подключения.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операций.
//  ИдентификаторУчастника - Строка - идентификатор участника.
//  ДанныеХранилища - Структура - данные аутентификации.
//
Процедура ОбновитьВерсиюДанныхАутентификации(
	НастройкаПодключения,
	ИдентификаторУчастника,
	ВызыватьИсключение = Истина) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", НастройкаПодключения);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		УстановитьПривилегированныйРежим(Истина);
		
		ДанныеХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			НастройкаПодключения);
			
		Если ТипЗнч(ДанныеХранилища) = Тип("Структура") Тогда
			
			ОбновленныеДанные = Новый Соответствие;
			ОбновленныеДанные.Вставить(ИдентификаторУчастника, ДанныеХранилища);
			
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				НастройкаПодключения,
				ОбновленныеДанные);
			
		ИначеЕсли ВызыватьИсключение Тогда
			
			ОтменитьТранзакцию();
			ВызватьИсключение НСтр("ru = 'Не удалось выполнить обновление данных аутентификации:
				|в безопасном хранилище тип данных не является структурой'");;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить обновление данных аутентификации:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецПроцедуры

// Получает список участников, в которые возможно вернуть денежные средства
// в рамках оплаты. Метод следует вызывать только в том случае, если
// УчастникСБПВозврата имеет значение Истина,
// см. СистемаБыстрыхПлатежей.НастройкиПодключения.
//
// Возвращаемое значение:
//  Соответствие - идентификатор и наименование участника СБП:
//    *Ключ - Строка - идентификатор участника СБП, который необходимо
//            передать в метод д ПереводыСБПc2b.ВозвратОплаты
//            при выполнении возврата;
//    *Значение - Строка - наименование участника СБП для отображения в пользовательских
//                интерфейсах.
//
Функция УчастникиСБПДляВозврата() Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиУчастниковСБП.Идентификатор КАК Идентификатор,
		|	НастройкиУчастниковСБП.Наименование КАК Наименование
		|ИЗ
		|	РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
		|ГДЕ
		|	НЕ НастройкиУчастниковСБП.ЗапрещенВыборУчастникаc2b";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.Вставить(
			ВыборкаДетальныеЗаписи.Идентификатор,
			ВыборкаДетальныеЗаписи.Наименование);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Определяет настройки возврата оплаты покупателю по идентификатору участника СБП.
//
// Параметры:
//  ИдентификаторУчастника - Строка - идентификатор участника СБП.
//
// Возвращаемое значение:
//  Структура, Неопределено - настройки для возврата оплаты покупателю.
//  Неопределено если данные по документу не найдены:
//    * УчастникСБПВозврата - Булево - признак доступности возврата оплаты
//      на счет отличный отчета оплаты;
//    * УчастникиСБПДляВозврата - Соответствие - список участников, в которые возможно вернуть денежные средства
//      в рамках возврата.Заполняется только в случаях когда УчастникСБПВозврата имеет значение Истина:
//      ** Ключ - Строка - идентификатор участника СБП, который необходимо передать в метод ПереводыСБПc2b.ВозвратОплаты
//         при выполнении возврата;
//      **Значение - Строка - наименование участника СБП для отображения в пользовательских интерфейсах.
//
Функция НастройкиВозвратаОплаты(ИдентификаторУчастника) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("УчастникСБПВозврата", Ложь);
	Результат.Вставить("УчастникиСБПДляВозврата", Новый Соответствие);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиУчастниковСБП.ЗапрещенВыборУчастникаc2b КАК ЗапрещенВыборУчастникаc2b
		|ИЗ
		|	РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
		|ГДЕ
		|	НастройкиУчастниковСБП.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторУчастника);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат.УчастникСБПВозврата = Выборка.ЗапрещенВыборУчастникаc2b;
	Если Результат.УчастникСБПВозврата Тогда
		Результат.УчастникиСБПДляВозврата = УчастникиСБПДляВозврата();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроверкаНастроекПодключения

// Производит валидацию общих параметров оплаты.
//
// Параметры:
//  Документ - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    операцию в информационной базе;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка выполнения оплаты;
//  ПараметрыНастройкиПодключения - Структура - см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  РезультатОперации  - Структура - результат создания заказа на оплату в Системе быстрых платежей:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Процедура ПроверитьОбщиеНастройкиПодключения(
		Документ,
		НастройкаПодключения,
		ПараметрыНастройкиПодключения,
		РезультатОперации) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		
		РезультатОперации.КодОшибки = КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Документ для выполнения операции неопределен. Обратитесь к администратору.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Для выполнения операции необходимо записать документ.'");
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	КонецЕсли;
	
	ПроверитьОбщиеНастройкиПодключенияБезДокументаОперации(
		НастройкаПодключения,
		ПараметрыНастройкиПодключения,
		РезультатОперации);
	
КонецПроцедуры

// Производит валидацию общих параметров оплаты.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка выполнения оплаты;
//  ПараметрыНастройкиПодключения - Структура - см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  РезультатОперации  - Структура - результат создания заказа на оплату в Системе быстрых платежей:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Процедура ПроверитьОбщиеНастройкиПодключенияБезДокументаОперации(
		НастройкаПодключения,
		ПараметрыНастройкиПодключения,
		РезультатОперации) Экспорт
	
	Если Не ЗначениеЗаполнено(НастройкаПодключения) Тогда
		
		РезультатОперации.КодОшибки = КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Не выполнена настройка подключения к Системе быстрых платежей. Обратитесь к администратору.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Для выполнения операции в Системе быстрых платежей необходимо выполнить настройку подключения.'");
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	КонецЕсли;
	
	Если Не ПараметрыНастройкиПодключения.Используется Тогда
		
		РезультатОперации.КодОшибки = "ИнтеграцияНеИспользуется";
		РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Настройка подключения не используется. Обратитесь к администратору.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Настройка подключения не используется.'");
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрикладныеОперации

// Получает настройки подключения по документам операций.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ отражающий операцию СБП
//    в информационной базе;
//  ИмяРегистра - Строка - имя регистра к которому необходимо выполнить запрос.
//
// Возвращаемое значение:
//  Массив Из СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - используемые в
//   документах настройки подключения.
//
Функция НастройкиПодключенияПоДокументуОперации(ДокументОперации, ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлатежнаяСсылкаСБП.Ссылка КАК ДокументОперации
	|ПОМЕСТИТЬ ВТ_ДокументыОперации
	|ИЗ
	|	Документ.ПлатежнаяСсылкаСБП КАК ПлатежнаяСсылкаСБП
	|ГДЕ
	|	ПлатежнаяСсылкаСБП.ОснованиеПлатежа = &ДокументОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ДокументОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИдентификаторыОпераций.НастройкаПодключения КАК НастройкаПодключения
	|ИЗ
	|	ВТ_ДокументыОперации КАК ВТ_ДокументыОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.%1 КАК ИдентификаторыОпераций
	|		ПО ВТ_ДокументыОперации.ДокументОперации = ИдентификаторыОпераций.ДокументОперации";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ИмяРегистра);
	Запрос.УстановитьПараметр("ДокументОперации", ДокументОперации);
	Выборка = Запрос.Выполнить().Выбрать();
	
	НастройкиПодключения = Новый Массив;
	Пока Выборка.Следующий() Цикл
		НастройкиПодключения.Добавить(Выборка.НастройкаПодключения);
	КонецЦикла;
	
	Возврат НастройкиПодключения;
	
КонецФункции

// Выполняет проверку статуса оплаты в Системе быстрых платежей по ранее
// сформированному идентификатору оплаты.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    продажу в информационной базе;
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройки
//   подключения к Системе быстрых платежей;
//  ПараметрыНастройкиПодключения - Структура - см. НовыйПараметрыНастройкиПодключения;
//  ПараметрыСтатуса - Структура - идентификаторы оплаты в Системе быстрых платежей;
//  ДлительныйВызов - Булево - если Истина, получение статуса оплаты будет выполнятся
//   в цикле. Длительность выполнения операции определяется на основании
//   данных константы ДлительностьОперацииСистемыБыстрыхПлатежей;
//  ПараметрыОперации - Структура - дополнительные данные по оплаты.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в Системе быстрых платежей:
//    * СтатусОперации - Строка - текущее состояние операции оплаты. Для проверки статуса
//      операции, необходимо функции программного интерфейса общего модуля
//      СистемаБыстрыхПлатежейКлиентСервер. Возможные значения:
//        - "Выполняется" - подтверждение оплаты не получено;
//        - "Отменена" - оплата по ранее сформированному QR-коду невозможна;
//        - "Выполнена" - участник СБП подтвердил оплату;
//        - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки;
//    * ПараметрыОперации - Структура - дополнительные данные по оплаты.
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - оплата успешно проведена;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к Системе быстрых платежей;
//        - "ТребуетсяОплата" - требуется оплата сервиса;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//        обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция СтатусОплаты(
		ДокументОплаты,
		ВариантНастройки,
		ПараметрыНастройкиПодключения,
		ПараметрыСтатуса,
		ДлительныйВызов,
		ПараметрыОперации) Экспорт
	
	РезультатОперации = НовыйРезультатДлительнойОперации();
	РезультатОперации.Вставить("ПараметрыОперации", ПараметрыОперации);
	
	Если ПараметрыСтатуса = Неопределено Тогда
		РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
		РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Идентификатор оплаты по документу не обнаружен.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Идентификатор оплаты по документу не обнаружен.'");
		Возврат РезультатОперации;
	КонецЕсли;
	
	Оплачен = Ложь;
	Отменен = Ложь;
	
	Если ПараметрыСтатуса.СтатусОперации = ИдентификаторСтатусаВыполнена() Тогда
		Оплачен = Истина;
		ЗаполнитьЗначенияСвойств(
			РезультатОперации.ПараметрыОперации,
			ПараметрыСтатуса);
		РезультатОперации.ПараметрыОперации.ИдентификаторОперации = ПараметрыСтатуса.ИдентификаторОперации;
		РезультатОперации.ПараметрыОперации.ИдентификаторОплаты = ПараметрыСтатуса.ИдентификаторОплаты;
	ИначеЕсли ПараметрыСтатуса.СтатусОперации = ИдентификаторСтатусаОтклонена() Тогда
		Отменен = Истина;
		ЗаполнитьЗначенияСвойств(
			РезультатОперации.ПараметрыОперации,
			ПараметрыСтатуса);
		РезультатОперации.ПараметрыОперации.ИдентификаторОперации = ПараметрыСтатуса.ИдентификаторОперации;
		РезультатОперации.ПараметрыОперации.ИдентификаторОплаты = ПараметрыСтатуса.ИдентификаторОплаты;
	ИначеЕсли (ПараметрыСтатуса.ПериодИспользования + 600) < ТекущаяДатаСеанса() Тогда
		
		// При окончании срока действия QR-кода, выполняется проверка статуса оплаты
		// и регистрация отмены QR-кода в ИБ, если оплата так и не была совершена.
		РезультатПроверки = Неопределено;
		СистемаБыстрыхПлатежейСобытия.ПриПолученииСтатусаОплаты(
			ВариантНастройки,
			ПараметрыСтатуса,
			ПараметрыНастройкиПодключения,
			РезультатПроверки);
		
		Если РезультатПроверки = Неопределено Тогда
			РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Не удалось определить сценарий определения статуса операции.'");
			РезультатОперации.ИнформацияОбОшибке = РезультатОперации.СообщениеОбОшибке;
			РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
			Возврат РезультатОперации;
		ИначеЕсли ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				РезультатПроверки,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
			РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
			Возврат РезультатОперации;
		КонецЕсли;
		
		Отменен = (РезультатПроверки.СтатусОперации = ИдентификаторСтатусаВПроцессе()
			Или РезультатПроверки.СтатусОперации = ИдентификаторСтатусаОтклонена());
		Оплачен = (РезультатПроверки.СтатусОперации = ИдентификаторСтатусаВыполнена());
		
		Если РезультатПроверки.СтатусОперации = ИдентификаторСтатусаВПроцессе() Тогда
			РезультатПроверки.СтатусОперации = ИдентификаторСтатусаОтклонена();
		КонецЕсли;
		
		СистемаБыстрыхПлатежейСобытия.ПриЗаписиСтатусаСтатуса(
			ВариантНастройки,
			ДокументОплаты,
			ПараметрыСтатуса,
			РезультатПроверки);
		
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатПроверки);
		
	Иначе
		Если ДлительныйВызов Тогда
			
			НастройкиВызова = НовыйИтеративныйВызовОперации();
			Пока ВозможенВызовОперации(НастройкиВызова) Цикл
				
				РезультатПроверки = Неопределено;
				СистемаБыстрыхПлатежейСобытия.ПриПолученииСтатусаОплаты(
					ВариантНастройки,
					ПараметрыСтатуса,
					ПараметрыНастройкиПодключения,
					РезультатПроверки);
				
				Если РезультатПроверки = Неопределено Тогда
					РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Не удалось определить сценарий определения статуса операции.'");
					РезультатОперации.ИнформацияОбОшибке = РезультатОперации.СообщениеОбОшибке;
					РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
					Возврат РезультатОперации;
				ИначеЕсли ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
					ЗаполнитьЗначенияСвойств(
						РезультатОперации,
						РезультатПроверки,
						"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
					РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
					Возврат РезультатОперации;
				КонецЕсли;
				
				Если РезультатПроверки.ОбновитьДатуЗапросаСтатуса Тогда
					ПараметрыСтатуса.ДатаЗапросаСтатуса = ТекущаяДатаСеанса();
				КонецЕсли;
				
				Оплачен = (РезультатПроверки.СтатусОперации = ИдентификаторСтатусаВыполнена());
				Отменен = (РезультатПроверки.СтатусОперации = ИдентификаторСтатусаОтклонена());
				Если Оплачен Или Отменен Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			РезультатПроверки = Неопределено;
			СистемаБыстрыхПлатежейСобытия.ПриПолученииСтатусаОплаты(
				ВариантНастройки,
				ПараметрыСтатуса,
				ПараметрыНастройкиПодключения,
				РезультатПроверки);
			
			Если РезультатПроверки = Неопределено Тогда
				РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Не удалось определить сценарий определения статуса операции.'");
				РезультатОперации.ИнформацияОбОшибке = РезультатОперации.СообщениеОбОшибке;
				РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
				Возврат РезультатОперации;
			ИначеЕсли ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
				ЗаполнитьЗначенияСвойств(
					РезультатОперации,
					РезультатПроверки,
					"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
				РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
				Возврат РезультатОперации;
			КонецЕсли;
			
			Оплачен = (РезультатПроверки.СтатусОперации = ИдентификаторСтатусаВыполнена());
			Отменен = (РезультатПроверки.СтатусОперации = ИдентификаторСтатусаОтклонена());
			
		КонецЕсли;
		
		СистемаБыстрыхПлатежейСобытия.ПриЗаписиСтатусаСтатуса(
			ВариантНастройки,
			ДокументОплаты,
			ПараметрыСтатуса,
			РезультатПроверки);
		
		ЗаполнитьЗначенияСвойств(
			РезультатОперации.ПараметрыОперации,
			РезультатПроверки.ПараметрыОперации);
		
	КонецЕсли;
	
	Если Оплачен Тогда
		РезультатОперации.СтатусОперации
			= СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена();
	ИначеЕсли Отменен Тогда
		РезультатОперации.СтатусОперации
			= СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтменена();
	Иначе
		РезультатОперации.СтатусОперации
			= СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполняется();
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Возвращает данные оплат по документу основанию платежа.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ операции;
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройки
//   подключения к Системе быстрых платежей.
//
// Возвращаемое значение:
//  Структура - данные оплат по документу в Системе быстрых платежей:
//    * ДокументОснование - ОпределяемыйТип.ДокументОперацииСБП - документ,
//      который отражает продажу в информационной базе;
//    * Сумма - Число - сумма выполненных оплат по документу;
//    * ДанныеОпераций - Массив Из Структура - содержит перечень данных оплат по документу основанию:
//        ** ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ операции в СБП
//        ** СуммаОперации - Число - Сумма оплаты в СБП
//        ** СтатусОперации - Строка - текущее состояние операции оплаты. Возможные значения:
//           - "Выполняется" - подтверждение оплаты не получено;
//           - "Отменена" - оплата по ранее сформированному QR-коду невозможна;
//           - "Выполнена" - участник СБП подтвердил оплату;
//           - "Отклонена" - оплата по ранее сформированному QR-коду невозможна;
//           - "Ошибка" - неизвестный статус операции.
//        ** ДатаОперации - Дата - фактическая дата оплаты в UTC;
//        ** ИдентификаторОперации - Строка - идентификатор выполненной операции;
//        ** ИдентификаторОплаты - Строка - идентификатор оплаты;
//        ** Оплата - Булево - если Истина, была выполнена оплата.
//
Функция ОперацииПоДокументу(
		ДокументОперации,
		ВариантНастройки) Экспорт
	
	СуммаВыполненныхОплат = 0;
	ДанныеОпераций        = Новый Массив;
	
	ДанныеОперацийПоДокументу = Новый Структура;
	ДанныеОперацийПоДокументу.Вставить("ДокументОснование", Неопределено);
	ДанныеОперацийПоДокументу.Вставить("Сумма",             0);
	ДанныеОперацийПоДокументу.Вставить("ДанныеОпераций",    Новый Массив);
	
	ИспользоватьЧастичныеОплаты = Ложь;
	СистемаБыстрыхПлатежейСобытия.ПриОпределенииИспользованияЧастичныхОплат(
		ИспользоватьЧастичныеОплаты,
		ВариантНастройки,
		НастройкиПодключенияПрограммы());
	
	Если ИспользоватьЧастичныеОплаты
		И ТипЗнч(ДокументОперации) <> Тип("ДокументСсылка.ПлатежнаяСсылкаСБП") Тогда
	
		ДанныеЧастичныхОплат = Документы.ПлатежнаяСсылкаСБП.ПолучитьДанныеЧастичныхОплат(ДокументОперации);
		
		Для Каждого ЧастичнаяОплата Из ДанныеЧастичныхОплат Цикл
			
			РезультатПолученияСтатуса = ПолучитьСтатусОперацииПоИдентификатору(
				ЧастичнаяОплата.СтатусОперации);
			
			ОперацияСБП = НовыйОписаниеОперации();
			ОперацияСБП.ДокументОперации = ЧастичнаяОплата.ПлатежнаяСсылкаСБП;
			ОперацияСБП.Оплата = Истина;
			ОперацияСБП.СтатусОперации = РезультатПолученияСтатуса.СтатусОперации;
			ОперацияСБП.СуммаОперации = ЧастичнаяОплата.СуммаОплаты;
			ЗаполнитьЗначенияСвойств(
				ОперацияСБП,
				ЧастичнаяОплата,
				"ДатаОперации, ИдентификаторОперации, ИдентификаторОплаты");
			
			ДанныеОпераций.Добавить(ОперацияСБП);
			
			Если ЧастичнаяОплата.СтатусОперации = ИдентификаторСтатусаВыполнена() Тогда
				СуммаВыполненныхОплат = СуммаВыполненныхОплат + ЧастичнаяОплата.СуммаОплаты;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеОперации = Неопределено;
	СистемаБыстрыхПлатежейСобытия.ПриОпределенииДанныхОперации(
		ВариантНастройки,
		ДокументОперации,
		ДанныеОперации);
	
	Если ДанныеОперации <> Неопределено Тогда
		
		РезультатПолученияСтатуса = ПолучитьСтатусОперацииПоИдентификатору(
			ДанныеОперации.СтатусОперации);
		
		ОперацияСБП = НовыйОписаниеОперации();
		ОперацияСБП.ДокументОперации = ДокументОперации;
		ОперацияСБП.СуммаОперации = ДанныеОперации.СуммаОперации;
		ОперацияСБП.СтатусОперации = РезультатПолученияСтатуса.СтатусОперации;
		ОперацияСБП.ДатаОперации = ДанныеОперации.ДатаОперации;
		ОперацияСБП.ИдентификаторОперации = ДанныеОперации.ИдентификаторОперации;
		ОперацияСБП.ИдентификаторОплаты = ДанныеОперации.ИдентификаторОплаты;
		ОперацияСБП.Оплата = ДанныеОперации.Оплата;
		
		Если ДанныеОперации.СтатусОперации = ИдентификаторСтатусаВыполнена() Тогда
			СуммаВыполненныхОплат = СуммаВыполненныхОплат + ДанныеОперации.СуммаОперации;
		КонецЕсли;
		
		ДанныеОпераций.Добавить(ОперацияСБП);
		
	КонецЕсли;
	
	Если ТипЗнч(ДокументОперации) = Тип("ДокументСсылка.ПлатежнаяСсылкаСБП") Тогда
		ПараметрыОплатыПлатежнойСсылки = Документы.ПлатежнаяСсылкаСБП.ПараметрыОплатыПлатежнойСсылки(ДокументОперации);
		ДанныеОперацийПоДокументу.ДокументОснование = ПараметрыОплатыПлатежнойСсылки.ДокументОснование;
	Иначе
		ДанныеОперацийПоДокументу.ДокументОснование = ДокументОперации;
	КонецЕсли;
	
	ДанныеОперацийПоДокументу.Сумма = СуммаВыполненныхОплат;
	ДанныеОперацийПоДокументу.ДанныеОпераций = ДанныеОпераций;
	
	Возврат ДанныеОперацийПоДокументу;
	
КонецФункции

// Производит поиск идентификатора заказа на оплату или заказа на возврат в Системе быстрых платежей.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ отражающий операцию
//  в информационной базе;
//  ИмяРегистра - Строка - имя регистра сведений для выполнения запроса.
//
// Возвращаемое значение:
//   Структура, Неопределено - идентификаторы оплаты в Системе быстрых платежей.
//
Функция ИдентификаторыОперацииСБП(
		ДокументОперации,
		ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИдентификаторыОперацийСБП.ИдентификаторОплаты КАК ИдентификаторОплаты,
		|	ИдентификаторыОперацийСБП.ИдентификаторОперации КАК ИдентификаторОперации
		|ИЗ
		|	&РегистрСведенийИдентификаторыОпераций КАК ИдентификаторыОперацийСБП
		|ГДЕ
		|	ИдентификаторыОперацийСБП.ДокументОперации = &ДокументОперации";
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&РегистрСведенийИдентификаторыОпераций",
		"РегистрСведений." + ИмяРегистра);
	Запрос.УстановитьПараметр("ДокументОперации", ДокументОперации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат НовыйИдентификаторыОперацииСБП(
			ВыборкаДетальныеЗаписи.ИдентификаторОплаты,
			ВыборкаДетальныеЗаписи.ИдентификаторОперации);
	КонецЕсли;
	
КонецФункции

// Выполняет установку признака загрузки статуса регламентным заданием, если
// ранее под документу была сгенерирован идентификатор оплаты СБП .
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    продажу в информационной базе;
//  Значение - Булево - если Истина, данные статуса будут загружены регламентным заданием;
//  ИмяРегистра - Строка - имя регистра сведений для установки значения.
//
// Возвращаемое значение:
//  Булево - Истина, если признак отложенной загрузки статуса установлен,
//   Ложь если операция не найдена.
//
Функция УстановитьОтложенноеПолучениеСтатуса(
		ДокументОперации,
		Значение,
		ИмяРегистра) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений." + ИмяРегистра);
		ЭлементБлокировки.УстановитьЗначение("ДокументОперации", ДокументОперации);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запись = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
		Запись.ДокументОперации = ДокументОперации;
		Запись.Прочитать();
		
		// Если записи нет, обновление данных не имеет смысла.
		Если Не ЗначениеЗаполнено(Запись.ИдентификаторОплаты) Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		// Включать отложенную загрузку имеет смысл только для операций,
		// которые не находятся в терминальном состоянии.
		Если Значение И Запись.СтатусОперации <> ИдентификаторСтатусаВПроцессе() Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		Запись.ОтложенноеПолучениеСтатуса = Значение;
		Если Запись.ОтложенноеПолучениеСтатуса Тогда
			Запись.КоличествоПопыток = 0;
		КонецЕсли;
		
		Запись.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При записи идентификатора СБП возникли ошибки:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьИнформациюВЖурналРегистрации(
			ТекстИсключения,
			Истина);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Производит поиск идентификатора заказа на оплату или возврата.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ отражающий операцию
//   в информационной базе;
//  ИмяРегистра - Строка - имя регистра сведений для выполнения запроса.
//
// Возвращаемое значение:
//   Строка - идентификатор оплаты в Системе быстрых платежей.
//
Функция ИдентификаторОперации(
		ДокументОперации,
		ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыОперацийСБП.Идентификатор КАК Идентификатор
		|ИЗ
		|	&РегистрСведенийИдентификаторыОпераций КАК ИдентификаторыОперацийСБП
		|ГДЕ
		|	ИдентификаторыОперацийСБП.ДокументОперации = &ДокументОперации";
	
		Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&РегистрСведенийИдентификаторыОпераций",
		"РегистрСведений." + ИмяРегистра);
	Запрос.УстановитьПараметр("ДокументОперации", ДокументОперации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Идентификатор;
	КонецЕсли;
	
КонецФункции

// Увеличивает значение количества попыток запроса статуса.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    операцию в информационной базе;
//  ИмяРегистра - Строка - имя регистра сведений для выполнения запроса.
//
Процедура УвеличитьКоличествоПопытокЗапросаСтатуса(
		ДокументОперации,
		ИмяРегистра) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений." + ИмяРегистра);
		ЭлементБлокировки.УстановитьЗначение("ДокументОперации", ДокументОперации);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запись = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
		Запись.ДокументОперации = ДокументОперации;
		Запись.Прочитать();
		
		Если Не ЗначениеЗаполнено(Запись.ДокументОперации) Тогда
			ВызватьИсключение НСтр("ru = 'Информация о документе оплаты не обнаружена, не возможно записать данные.'");
		КонецЕсли;
		
		Запись.КоличествоПопыток = Запись.КоличествоПопыток + 1;
		МаксимальноеКоличествоПопыток = МаксимальноеКоличествоПопытокЗапросаСтатуса(
			ЗначениеЗаполнено(Запись.ПериодИспользования));
		Если Запись.КоличествоПопыток > МаксимальноеКоличествоПопыток Тогда
			Запись.ОтложенноеПолучениеСтатуса = Ложь;
		КонецЕсли;
		
		Запись.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При записи данных возникли ошибки:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьИнформациюВЖурналРегистрации(
			ТекстИсключения,
			Истина);
		
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
КонецПроцедуры

// Производит поиск функциональная ссылка операции в Системе быстрых платежей.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ отражающий операцию
//   в информационной базе;
//  ИмяРегистра - Строка - имя регистра сведений для выполнения запроса.
//
// Возвращаемое значение:
//   Строка - QR-код в Системе быстрых платежей.
//
Функция ПлатежнаяСсылкаОперации(
		ДокументОперации,
		ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыОперацийСБП.ПлатежнаяСсылка КАК ПлатежнаяСсылка
		|ИЗ
		|	&РегистрСведенийИдентификаторыОпераций КАК ИдентификаторыОперацийСБП
		|ГДЕ
		|	ИдентификаторыОперацийСБП.ДокументОперации = &ДокументОперации";
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&РегистрСведенийИдентификаторыОпераций",
		"РегистрСведений." + ИмяРегистра);
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ИмяРегистра);
	Запрос.УстановитьПараметр("ДокументОперации", ДокументОперации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ПлатежнаяСсылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет необходимость создания идентификатора операции
// или его обновления.
//
// Параметры:
//  Идентификатор - УникальныйИдентификатор - текущий идентификатор операции;
//  СтатусОперации - Строка - текущий статус операции.
//
// Возвращаемое значение:
//  Булево  - если Истина, необходимо создать новый идентификатор.
//
Функция ТребуетсяГенерацияНовогоИдентификатора(
		Идентификатор,
		СтатусОперации) Экспорт
	
	// Если еще не был создан необходимо
	// сгенерировать новый.
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если операция находится в терминальном статусе
	// и результат по этой операции отрицательный, необходимо
	// обновить идентификатор.
	Если СтатусОперации = ИдентификаторСтатусаПревышение()
		Или СтатусОперации = ИдентификаторСтатусаНеОплачен()
		Или СтатусОперации = ИдентификаторСтатусаНетИнформации()
		Или СтатусОперации = ИдентификаторСтатусаОтклонена()
		Или СтатусОперации = ИдентификаторСтатусаОтменена() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Производит поиск идентификаторы заказов на оплату или возврат в Системе быстрых платежей.
//
// Параметры:
//  ДокументыОпераций - Массив Из ОпределяемыйТип.ДокументОперацииСБП - документы отражающий операцию
//  в информационной базе;
//  СтатусыОпераций - Массив Из Строка - идентификаторы статусов операций (фильтруют возвращаемую коллекцию);
//  ИмяРегистра - Строка - имя регистра сведений для выполнения запроса.
//
// Возвращаемое значение:
//  Соответствие - данные платежных ссылок по документам операций:
//    *Ключ - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//      оплату в информационной базе.
//    *Значение - Строка - платежная ссылка по документу операции.
//
Функция ПлатежныеСсылкиПоДокументамОпераций(
		ДокументыОпераций,
		СтатусыОпераций,
		ИмяРегистра) Экспорт
	
	ИдентификаторыСтатусов = Новый Массив;
	Для Каждого СтатусОперации Из СтатусыОпераций Цикл
		Результат = ПолучитьИдентификаторПоСтатусуОперации(
			СтатусОперации);
		Если Не ПустаяСтрока(Результат.КодОшибки) Тогда
			ВызватьИсключение Результат.СообщениеОбОшибке;
		Иначе
			ИдентификаторыСтатусов.Добавить(Результат.СтатусОперации);
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИдентификаторыОперацийСБП.ДокументОперации КАК ДокументОперации,
		|	ИдентификаторыОперацийСБП.ПлатежнаяСсылка КАК ПлатежнаяСсылка
		|ИЗ
		|	&РегистрСведенийИдентификаторыОпераций КАК ИдентификаторыОперацийСБП
		|ГДЕ
		|	ИдентификаторыОперацийСБП.ДокументОперации В(&ДокументыОперации)
		|	И ИдентификаторыОперацийСБП.СтатусОперации В(&ИдентификаторыСтатусов)";
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&РегистрСведенийИдентификаторыОпераций",
		"РегистрСведений." + ИмяРегистра);
	Запрос.УстановитьПараметр(
		"ДокументыОперации",
		ДокументыОпераций);
	Запрос.УстановитьПараметр(
		"ИдентификаторыСтатусов",
		ИдентификаторыСтатусов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Результат.Вставить(
			ВыборкаДетальныеЗаписи.ДокументОперации,
			ВыборкаДетальныеЗаписи.ПлатежнаяСсылка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиРегламентныхЗаданий

// Обработчик регламентного задания "ОбновлениеНастроекУчастниковСБП".
//
Процедура ОбновлениеНастроекУчастниковСБП() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеНастроекУчастниковСБП);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ВызватьИсключение НСтр("ru = 'Обновление настроек участников СБП в модели сервиса
			|выполняется через поставляемые данные'");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Тогда
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегламентныеЗадания.ОбновлениеНастроекУчастниковСБП,
			,
			НСтр("ru = 'Обновление данные участников СБП при работе в автономном рабочем месте не предусмотрено.'"));
		Возврат;
	КонецЕсли;
	
	РезультатВызова = СистемаБыстрыхПлатежейСервис.ОперацияНастройкиУчастниковСБП();
	Если Не ЗначениеЗаполнено(РезультатВызова.КодОшибки) Тогда
		ЗаписатьНастройкиУчастниковСБП(
			РезультатВызова.Настройки);
	КонецЕсли;
	
	ОбновитьКэшМакетов();
	
КонецПроцедуры

// Создает регламентное задание "ОбновлениеНастроекУчастниковСБП".
//
Процедура ДобавитьЗаданиеОбновлениеНастроекУчастниковСБП()
	
	Если Не ОбщегоНазначения.РазделениеВключено()
		И Не ОбщегоНазначения.ЭтоАвтономноеРабочееМесто()Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбновлениеНастроекУчастниковСБП);
		ЗаданияОбновления = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		
		Если ЗаданияОбновления.Количество() = 0 Тогда
			
			// Чтобы не создавать пиковых нагрузок на сервис,
			// время обновления будет выбрано случайным образом
			// между 00:00 и 09:00.
			Генератор = Новый ГенераторСлучайныхЧисел;
			Расписание = Новый РасписаниеРегламентногоЗадания;
			Расписание.ВремяНачала       = Дата("00010101") + Генератор.СлучайноеЧисло(0, 32400);
			Расписание.ПериодПовтораДней = 1;
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("Использование", Истина);
			ПараметрыЗадания.Вставить("Метаданные",    Метаданные.РегламентныеЗадания.ОбновлениеНастроекУчастниковСБП);
			ПараметрыЗадания.Вставить("Расписание",    Расписание);
			ПараметрыЗадания.Вставить("Наименование",  НСтр("ru = 'Обновление настроек участников СБП'"));
			
			Попытка
				РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
			Исключение
				ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ЗаписатьИнформациюВЖурналРегистрации(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось создать регламентное задание Обновление настроек участников СБП по причине:
								|%1'"),
							ИнформацияОбОшибке),
						Истина);
				ВызватьИсключение ИнформацияОбОшибке;
			КонецПопытки;
			
			ЗаписатьИнформациюВЖурналРегистрации(
				НСтр("ru = 'Создано регламентное задание Обновление платежных систем СБП.'"),
				Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет все задания "ОбновлениеНастроекУчастниковСБП".
//
Процедура УдалитьЗаданияОбновленияНастроек()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбновлениеНастроекУчастниковСБП);
		Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		Если Задания.Количество() <> 0 Тогда
			Для каждого Задание Из Задания Цикл
				РегламентныеЗаданияСервер.УдалитьЗадание(Задание);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Создает регламентное задание "ЗагрузкаСтатусовОперацийСБП" 
// при создании новой настройки подключения.
//
Процедура ДобавитьЗаданиеЗагрузкаСтатусовОперацийСБП() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОперацийСБП);
	ЗаданияОбновления = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Если ЗаданияОбновления.Количество() = 0 Тогда
		
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.ПериодПовтораВТечениеДня = 60 * 60 * 3; // Попытка получения статуса выполняется каждые 3 часа.
		Расписание.ПериодПовтораДней = 1;
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", Истина);
		ПараметрыЗадания.Вставить("Метаданные",    Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОперацийСБП);
		ПараметрыЗадания.Вставить("Расписание",    Расписание);
		ПараметрыЗадания.Вставить("Наименование",  НСтр("ru = 'Загрузка статусов операций СБП'"));
		
		Попытка
			РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		Исключение
			ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписатьИнформациюВЖурналРегистрации(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось создать регламентное задание Загрузка статусов операций СБП по причине:
							|%1'"),
						ИнформацияОбОшибке),
					Истина);
			ВызватьИсключение ИнформацияОбОшибке;
		КонецПопытки;
		
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Создано регламентное задание Загрузка статусов операций СБП.'"),
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет все задания "ЗагрузкаСтатусовОперацийСБП".
//
Процедура УдалитьЗаданияЗагрузкаСтатусовОперацийСБП()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОперацийСБП);
		Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		Если Задания.Количество() <> 0 Тогда
			Для каждого Задание Из Задания Цикл
				РегламентныеЗаданияСервер.УдалитьЗадание(Задание);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик регламентного задания "ЗагрузкаСтатусовОперацийСБП".
//
Процедура ЗагрузкаСтатусовОперацийСБП() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОперацийСБП);
	
	ОбработанныеОперации = СтатусыОпераций();
	
	Если ОбработанныеОперации.Количество() <> 0 Тогда
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Загружены терминальные статусы %1 операций СБП.'"),
				ОбработанныеОперации.Количество()),
				Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Заполняет новые реквизиты справочника "НастройкиПодключенияКСистемеБыстрыхПлатежей"
// при переходе на версию 2.6.1.
//
// Параметры:
//  Параметры - Структура - параметры обновления.
//
Процедура ОбработатьНастройкиПлатежныхСистем(Параметры) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	Если Константы.ДлительностьОперацииСистемыБыстрыхПлатежей.Получить() = 0 Тогда
		УстановитьДлительностьОпераций();
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка,
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ЭтоГруппа КАК ЭтоГруппа
			|ИЗ
			|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей";
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НастройкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			НастройкаОбъект.Заблокировать();
			НастройкаОбъект.ПометкаУдаления = Истина;
			Если ВыборкаДетальныеЗаписи.ЭтоГруппа Тогда
				НастройкаОбъект.УдалитьПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.SWiP;
				НастройкаОбъект.УдалитьИдентификатор = "swip";
			Иначе
				НастройкаОбъект.ИдентификаторУчастника = "swip";
			КонецЕсли;
			
			НастройкаОбъект.ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(
				НастройкаОбъект,
				Ложь,
				Истина);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

// Устанавливает значение константы ДлительностьОперацииСистемыБыстрыхПлатежей.
//
Процедура УстановитьДлительностьОпераций() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	УстановитьДлительностьОперации(60);
	
КонецПроцедуры

// Устанавливает пометки на удаления для элементов настроек SWiP
// при переходе на версию 2.6.2.
//
// Параметры:
//  Параметры - Структура - параметры обновления.
//
Процедура ОбновитьНастройкиПодключения(Параметры) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей");
		Блокировка.Заблокировать();
		
		// 1. Пометить на удаление настройки SWiP
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
			|ГДЕ
			|	(НастройкиПодключенияКСистемеБыстрыхПлатежей.УдалитьИдентификатор = ""swip""
			|			ИЛИ НастройкиПодключенияКСистемеБыстрыхПлатежей.УдалитьПлатежнаяСистема = ЗНАЧЕНИЕ(Перечисление.УдалитьПлатежныеСистемы.SWiP)
			|			ИЛИ НастройкиПодключенияКСистемеБыстрыхПлатежей.Родитель.УдалитьПлатежнаяСистема = ЗНАЧЕНИЕ(Перечисление.УдалитьПлатежныеСистемы.SWiP))
			|	И НЕ НастройкиПодключенияКСистемеБыстрыхПлатежей.ПометкаУдаления";
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НастройкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			НастройкаОбъект.Заблокировать();
			НастройкаОбъект.ПометкаУдаления = Истина;
			НастройкаОбъект.ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(
				НастройкаОбъект);
		КонецЦикла;
		
		// 2. Заменить родителя в настройках СБП
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ВТ_ГруппаСБП
			|ИЗ
			|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
			|ГДЕ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Родитель = ЗНАЧЕНИЕ(Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей.ПустаяСсылка)
			|	И НастройкиПодключенияКСистемеБыстрыхПлатежей.УдалитьИдентификатор = ""sbp"";
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка
			|ИЗ
			|	ВТ_ГруппаСБП КАК ВТ_ГруппаСБП
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
			|		ПО ВТ_ГруппаСБП.Ссылка = НастройкиПодключенияКСистемеБыстрыхПлатежей.Родитель;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ГруппаСБП.Ссылка КАК Ссылка
			|ИЗ
			|	ВТ_ГруппаСБП КАК ВТ_ГруппаСБП";
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НастройкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			НастройкаОбъект.Заблокировать();
			НастройкаОбъект.Родитель = Неопределено;
			НастройкаОбъект.ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(
				НастройкаОбъект);
		КонецЦикла;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса[2].Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НастройкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			НастройкаОбъект.Заблокировать();
			НастройкаОбъект.ПометкаУдаления = Истина;
			НастройкаОбъект.ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(
				НастройкаОбъект);
		КонецЦикла;
		
		// 3. Обработать группы с отсутствием элементов
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Группы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК Группы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК Элементы
			|		ПО Группы.Ссылка = Элементы.Родитель
			|ГДЕ
			|	Элементы.Ссылка ЕСТЬ NULL
			|	И Группы.ЭтоГруппа
			|	И НЕ Группы.ПометкаУдаления";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НастройкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			НастройкаОбъект.Заблокировать();
			НастройкаОбъект.ПометкаУдаления = Истина;
			НастройкаОбъект.ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(
				НастройкаОбъект);
		КонецЦикла;
	
		// 4. Установить признак использования настроек СБП
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
			|ГДЕ
			|	НЕ НастройкиПодключенияКСистемеБыстрыхПлатежей.ЭтоГруппа
			|	И НЕ НастройкиПодключенияКСистемеБыстрыхПлатежей.ПометкаУдаления";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НастройкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			НастройкаОбъект.Заблокировать();
			НастройкаОбъект.Используется = Истина;
			НастройкаОбъект.ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(
				НастройкаОбъект);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
		ВызватьИсключение НСтр("ru = 'Не удалось установить пометки на удаление для настроек SWiP и обновить настройки СБП.'");
		
	КонецПопытки;
	
КонецПроцедуры

// Добавление регламентного задания обновления настроек участников СБП
// при переходе на версию 2.6.2.
//
// Параметры:
//  Параметры - Структура - параметры обновления.
//
Процедура ДобавитьЗаданиеОбновленияНастроек(Параметры) Экспорт
	
	УдалитьЗаданияОбновленияНастроек();
	ДобавитьЗаданиеОбновлениеНастроекУчастниковСБП();
	
	Попытка
		ОбновлениеНастроекУчастниковСБП();
	Исключение
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Не удалось загрузить настройки участников СБП.'"),
			Истина);
	КонецПопытки;
	
КонецПроцедуры

// Заменяет значение перечисления УдалитьСБП_Промсвязьбанк на СБП_Промсвязьбанк
// в настройках подключения с Системой быстрых платежей при переходе на версию 2.6.3.
//
// Параметры:
//  Параметры - Структура - параметры обновления.
//
Процедура ЗаменитьЗначениеПеречисленияУдалитьСБП_Промсвязьбанк(Параметры) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
			|ГДЕ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.УдалитьПлатежнаяСистема = ЗНАЧЕНИЕ(Перечисление.УдалитьПлатежныеСистемы.УдалитьСБП_Промсвязьбанк)";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НастройкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			НастройкаОбъект.Заблокировать();
			НастройкаОбъект.УдалитьПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Промсвязьбанк;
			НастройкаОбъект.ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НастройкаОбъект);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
		ВызватьИсключение НСтр("ru = 'Не удалось обновить настройки участников с СБП.'");
		
	КонецПопытки;
	
КонецПроцедуры

// Устанавливает тип аутентификации и обновляет настройки.
//
Процедура ОбновитьНастройкиУчастниковСБП() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработанныеИдентификаторы = Новый Массив;
	НаборЗаписей = РегистрыСведений.НастройкиУчастниковСБП.СоздатьНаборЗаписей();
	НаборЗаписей.Заполнить(Неопределено);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Otkrytie";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT;
	Запись.Наименование = "Банк ""Открытие""";
	Запись.КассовыеСсылкиc2b = Ложь;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "SKB";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BASIC;
	Запись.Наименование = "ПАО Банк Синара";
	Запись.КассовыеСсылкиc2b = Ложь;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Ложь;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "YUMani";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BASIC;
	Запись.Наименование = "ЮKassa (ООО НКО «ЮМани»)";
	Запись.КассовыеСсылкиc2b = Ложь;
	Запись.ИНН = "7750005725";
	Запись.ПлатежныйАгрегатор = Истина;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "RusskijStandart";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BASIC;
	Запись.Наименование = "Банк Русский Стандарт";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Истина;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "PayMaster";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "PayMaster (ООО ""Пэймастер"")";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "7723887394";
	Запись.ПлатежныйАгрегатор = Истина;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Истина;
	Запись.ЗапрещенВыборУчастникаc2b = Истина;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "1C-SBP";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "1С:СБП (Другие банки)";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "7706249306";
	Запись.ПлатежныйАгрегатор = Истина;
	Запись.СверкаВзаиморасчетовc2b = Ложь;
	Запись.ПодключениеКассовойСсылкиc2b = Истина;
	Запись.ЗапрещенВыборУчастникаc2b = Истина;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Raiffeisen";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Райффайзен Банк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Ложь;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	Запись.ЗапрещенВыборУчастникаc2b = Истина;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "GENBANK";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "ГЕНБАНК";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Ложь;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	Запись.ЗапрещенВыборУчастникаc2b = Истина;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Tinkoff";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Тинькофф";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Ложь;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	Запись.ЗапрещенВыборУчастникаc2b = Истина;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "YUGInvestbank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "ЮГ-Инвестбанк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Sovkombank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Совкомбанк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Ekspobank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Экспобанк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "AbsolyutBank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Абсолют Банк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Levoberezhnyj";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Банк Левобережный";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Blanc";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Бланк банк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "KBHlynov";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "КБ Хлынов";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "VLADBIZNESBANK";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "ВЛАДБИЗНЕСБАНК";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "NOKSSBANK";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "НОКССБАНК";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "ZemskijBank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Земский банк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "NSBank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "НС Банк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Forshtadt";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Форштадт";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Primsoczbank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Примсоцбанк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "KBRostFinans";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "КБ РостФинанс";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "ABCBank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Эс-Би-Ай Банк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "AKIBANK";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "АКИБАНК";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "AlefBank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Алеф-Банк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "NIKOBANK";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "НИКО-БАНК";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "AGROPROMKREDIT";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "АГРОПРОМКРЕДИТ";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BANKORENBURG";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "БАНК ОРЕНБУРГ";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BankSaratov";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Банк Саратов";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "HakasskijMunicipalny";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Хакасский муниципальный банк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Aresbank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Аресбанк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Avtogradbank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Автоградбанк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BankAkcept";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Банк Акцепт";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "TojotaBank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Тойота Банк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Energotransbank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Энерготрансбанк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BankVenecz";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Банк Венец";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "ITURUP";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Банк ИТУРУП";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Sibsocbank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Сибсоцбанк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BankMirPrivilegij";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Банк Мир Привилегий";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BankInteza";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Банк Интеза";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "MORSKOJBANK";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "МОРСКОЙ БАНК";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BankRazvitieStolica";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Банк Развитие-Столица";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "TavricheskijBank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Таврический Банк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "PervyjInvesticionnyjBank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Первый Инвестиционный Банк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "MOSKOMBANK";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "МОСКОМБАНК";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "GTbank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Газтрансбанк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Nacinvestprombank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Нацинвестпромбанк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "RESOKredit";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "РЕСО Кредит";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "RUSNARBANK";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "РУСНАРБАНК";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Kuzneckbiznesbank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Кузнецкбизнесбанк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BankKremlevski";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Банк Кремлевский";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "MezhdunarodnyFinansovyClub";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "МЕЖДУНАРОДНЫЙ ФИНАНСОВЫЙ КЛУБ";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Tomskpromstrojbank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Томскпромстройбанк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BankAleksandrovskij";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Банк Александровский";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "JAndTBank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Джей энд Ти Банк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Novobank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Новобанк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "AKBPrimore";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "АКБ Приморье";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "SolidBank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Солид Банк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "RealistBank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Реалист Банк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "AKBDerzhava";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "АКБ Держава";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "NacionalnyjStandart";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Национальный стандарт";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "AKBLantaBank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "АКБ Ланта Банк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "RNBANK";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "РН БАНК";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "EnisejskijObdinennyjbank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "АИКБ Енисейский объединенный банк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BankBZHF";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "КБ Долинск";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Altajkapitalbank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Алтайкапиталбанк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BankSIAB";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Банк СИАБ";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "MTSBank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "МТС-Банк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BANKURALSIB";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "БАНК УРАЛСИБ";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Modulbank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Модульбанк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "SDMBank";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "СДМ-Банк";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "PSB";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256;
	Запись.Наименование = "Промсвязьбанк";
	Запись.КассовыеСсылкиc2b = Ложь;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Ложь;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "SDEKFinance";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256;
	Запись.Наименование = "CDEK Pay";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ИНН = "5406810975";
	Запись.ПлатежныйАгрегатор = Истина;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	Запись.ЗапрещенВыборУчастникаc2b = Истина;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Tochka";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.ТипАутентификацииb2b = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Точка Банк";
	Запись.КассовыеСсылкиc2b = Ложь;
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	Запись.ЗапрещенВыборУчастникаc2b = Истина;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "KubanKredit";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BASIC;
	Запись.Наименование = "Кубань Кредит";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "FORABANK";
	Запись.ТипАутентификацииc2b = Перечисления.ТипыАутентификацииСБП.BASIC;
	Запись.Наименование = "АКБ ""ФОРА-БАНК"" (АО)";
	Запись.КассовыеСсылкиc2b = Истина;
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетовc2b = Истина;
	Запись.ПодключениеКассовойСсылкиc2b = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиУчастниковСБП.Идентификатор КАК Идентификатор,
		|	НастройкиУчастниковСБП.Наименование КАК Наименование,
		|	НастройкиУчастниковСБП.КассовыеСсылкиc2b КАК КассовыеСсылкиc2b,
		|	НастройкиУчастниковСБП.ИНН КАК ИНН,
		|	НастройкиУчастниковСБП.ПлатежныйАгрегатор КАК ПлатежныйАгрегатор,
		|	НастройкиУчастниковСБП.СверкаВзаиморасчетовc2b КАК СверкаВзаиморасчетовc2b,
		|	НастройкиУчастниковСБП.ТипАутентификацииc2b КАК ТипАутентификацииc2b,
		|	НастройкиУчастниковСБП.ПодключениеКассовойСсылкиc2b КАК ПодключениеКассовойСсылкиc2b
		|ИЗ
		|	РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
		|ГДЕ
		|	НЕ НастройкиУчастниковСБП.Идентификатор В (&Идентификаторы)";
	
	Запрос.УстановитьПараметр("Идентификаторы", ОбработанныеИдентификаторы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(
			НаборЗаписей.Добавить(),
			ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(
		НаборЗаписей);
	
КонецПроцедуры

// Устанавливает новое имя 1С:СБП.
//
// Параметры:
//  Параметры - Структура, Неопределено - параметры обновления.
//
Процедура УстановитьНовоеИмя1ССБП(Параметры = Неопределено) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
		|ГДЕ
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ЭтоГруппа
		|	И НастройкиПодключенияКСистемеБыстрыхПлатежей.Наименование = ""1С:СБП""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НастройкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		НастройкаОбъект.Заблокировать();
		НастройкаОбъект.Наименование = "1С:СБП (Другие банки)";
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НастройкаОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет структуру данных аутентификации.
//
// Параметры:
//  Параметры - Структура, Неопределено - параметры обновления.
//
Процедура ОбновитьДанныеАутентификации(Параметры = Неопределено) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК НастройкаПодключения,
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ИдентификаторУчастника КАК ИдентификаторУчастника
		|ИЗ
		|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
		|ГДЕ
		|	НЕ НастройкиПодключенияКСистемеБыстрыхПлатежей.ЭтоГруппа";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ОбновитьВерсиюДанныхАутентификации(
			ВыборкаДетальныеЗаписи.НастройкаПодключения,
			ВыборкаДетальныеЗаписи.ИдентификаторУчастника,
			Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет варианты настройки Системы быстрых платежей.
//
Процедура ЗаполнитьВариантыНастройки() Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка,
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ЭтоГруппа КАК ЭтоГруппа
			|ИЗ
			|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ВариантОплаты = Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей.ГруппаВариантНастройки(
				Перечисления.ВариантыНастройкиСБП.c2b,
				Истина);
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.Ссылка <> ВариантОплаты Тогда
					НастройкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					НастройкаОбъект.Заблокировать();
					НастройкаОбъект.ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b;
					Если ВыборкаДетальныеЗаписи.ЭтоГруппа Тогда
						НастройкаОбъект.Родитель = ВариантОплаты;
					КонецЕсли;
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(
						НастройкаОбъект);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	ПреобразоватьШаблоныСообщений();
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиАутентификацииНаФормах

// Добавляет настройки аутентификации на переданную форму.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, на которую необходимо добавить настройки;
//  Группа - ГруппаФормы - группа для добавления настроек;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения
//    к Системе быстрых платежей;
//  ИдентификаторУчастника - Строка - идентификатор участника СБП;
//  ПараметрыПодсказки - Структура - см. НовыйПараметрПодсказки;
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей.
//
Процедура ДобавитьНастройкиАутентификации(
		Форма,
		Группа,
		НастройкаПодключения,
		ИдентификаторУчастника,
		ПараметрыПодсказки,
		ВариантНастройки) Экспорт
	
	Если Форма.Настройки = Неопределено Тогда
		Форма.Настройки = Новый Структура;
	КонецЕсли;
	
	НастройкиУчастника = НастройкиАвторизацииУчастникаСБП(
		ИдентификаторУчастника,
		ВариантНастройки);
	
	Если НастройкиУчастника = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не определенны настройки участника СБП.'");
	КонецЕсли;

	Настройки = НовыйНастройкиАутентификации(
		ИдентификаторУчастника,
		НастройкиУчастника,
		ПараметрыПодсказки);
	НовыеРеквизиты = Новый Массив;
	
	Для Каждого ОписаниеРеквизита Из Настройки.Реквизиты Цикл
		НовыеРеквизиты.Добавить(
			Новый РеквизитФормы(
				ОписаниеРеквизита.Имя,
				ОписаниеРеквизита.Тип,
				,
				ОписаниеРеквизита.Синоним,
				ЗначениеЗаполнено(НастройкаПодключения)));
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(НовыеРеквизиты);
	Форма.Настройки.Вставить("НастройкиАутентификации",  Настройки.Реквизиты);
	
	Если ПараметрыПодсказки.ОтобразитьПодсказку Тогда
		Форма.Элементы.ДекорацияПодсказка.Заголовок = Настройки.Подсказка;
	КонецЕсли;
	
	Для Каждого ОписаниеРеквизита Из Настройки.Реквизиты Цикл
		
		НовыйЭлемент = Форма.Элементы.Добавить(
			ОписаниеРеквизита.Имя,
			Тип("ПолеФормы"),
			Группа);
		
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок = ОписаниеРеквизита.Синоним;
		НовыйЭлемент.ПутьКДанным = ОписаниеРеквизита.Имя;
		НовыйЭлемент.РежимПароля = ОписаниеРеквизита.РежимПароля;
		НовыйЭлемент.АвтоОтметкаНезаполненного = ОписаниеРеквизита.ПроверкаЗаполнения;
		НовыйЭлемент.Подсказка = ОписаниеРеквизита.Подсказка;
		НовыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		
		Если ОписаниеРеквизита.РежимПароля = Истина Тогда
			НовыйЭлемент.УстановитьДействие(
				"ПриИзменении",
				"Подключаемый_ПриИзмененииНастройкиАутентификации");
			НовыйЭлемент.УстановитьДействие(
				"НачалоВыбора",
				"Подключаемый_НачалоВыбораНастройкиАутентификации");
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НастройкаПодключения) Тогда
		ЗначенияНастроек = ЗначениеНастроекАутентификации(
			НастройкаПодключения,
			ИдентификаторУчастника,
			НастройкиУчастника);
		Для Каждого КлючЗначение Из ЗначенияНастроек Цикл
			Форма[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Удаляет настройки аутентификации на переданной форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, на которой необходимо удалить настройки.
//
Процедура УдалитьНастройкиАутентификации(Форма) Экспорт
	
	// Если настройки не сформированы, удалять
	// ничего не нужно.
	Если Форма.Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.Настройки.Свойство("НастройкиАутентификации") Тогда // АПК:1415 Реквизиты добавляются программно.
		Возврат;
	КонецЕсли;
	
	УдаляемыеРеквизиты = Новый Массив;
	Для Каждого НастройкиАутентификации Из Форма.Настройки.НастройкиАутентификации Цикл
		УдаляемыеРеквизиты.Добавить(НастройкиАутентификации.Имя);
		Форма.Элементы.Удалить(Форма.Элементы[НастройкиАутентификации.Имя]);
	КонецЦикла;
	Форма.ИзменитьРеквизиты(Новый Массив, УдаляемыеРеквизиты);
	
КонецПроцедуры

// Формирует декларативное описание настроек аутентификации.
//
// Параметры:
//  ИдентификаторУчастника - Строка - идентификатор участника СБП;
//  НастройкиУчастника - Структура - см. НастройкиУчастникаСБП;
//  ПараметрыПодсказки - Структура - см. НовыйПараметрПодсказки;
//
// Возвращаемое значение:
//  Структура - декларативное описание настроек.
//
Функция НовыйНастройкиАутентификации(
		ИдентификаторУчастника,
		НастройкиУчастника,
		ПараметрыПодсказки)
	
	Реквизиты = Новый Массив;
	Подсказка = "";
	
	НастройкиАутентификации(
		ИдентификаторУчастника,
		НастройкиУчастника,
		Реквизиты,
		Подсказка,
		ПараметрыПодсказки);
	
	Настройки = Новый Структура;
	Настройки.Вставить("Реквизиты", Реквизиты);
	Настройки.Вставить("Подсказка", Подсказка);
	
	Возврат Настройки;
	
КонецФункции

// Производит проверку заполнения данных аутентификации.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для проверки настроек;
//  Отказ - Булево - если Истина, запись данные не производится.
//
Процедура ПроверитьНастройкиАутентификации(Форма, Отказ) Экспорт
	
	Для каждого ОписаниеРеквизита Из Форма.Настройки.НастройкиАутентификации Цикл
		Если ОписаниеРеквизита.ПроверкаЗаполнения И Не ЗначениеЗаполнено(Форма[ОписаниеРеквизита.Имя]) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Поле %1 не заполнено.'"),
					ОписаниеРеквизита.Синоним),
				,
				,
				ОписаниеРеквизита.Имя,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Производит получение данных аутентификации из формы настройки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для получения настроек;
//
// Возвращаемое значение:
//  Структура - данные аутентификации.
//
Функция НастройкиАутентификацииПоДаннымФормы(Форма) Экспорт
	
	ПараметрыАутентификации = Новый Соответствие;
	Для Каждого ОписаниеРеквизита Из Форма.Настройки.НастройкиАутентификации Цикл
		// Обработка ошибки ввода данных аутентификации пользователем.
		Если Форма[ОписаниеРеквизита.Имя] <> УдалитьНечитаемыеСимволы(Форма[ОписаниеРеквизита.Имя]) Тогда
			Форма[ОписаниеРеквизита.Имя] = УдалитьНечитаемыеСимволы(Форма[ОписаниеРеквизита.Имя]);
		КонецЕсли;
		ПараметрыАутентификации.Вставить(ОписаниеРеквизита.Имя, Форма[ОписаниеРеквизита.Имя]);
	КонецЦикла;
	
	Возврат ПараметрыАутентификации;
	
КонецФункции

#КонецОбласти

#Область НастройкаФормаПодключения

// Создает описание параметров подсказки настройки подключения.
//
// Возвращаемое значение:
//  Структура - результат создания параметров подсказки:
//   * ОтобразитьПодсказку - Булево - признак отображения подсказки;
//   * АдресЛичногоКабинета - Строка - ссылка для перехода в личный кабинет;
//   * ПартнерАгентаСБП - Булево - признак партнера Агента СБП;
//   * АдресСтраницыЗаявки - Строка - адрес страницы отправки заявки;
//   * ИдентификаторУчастника - Строка - идентификатор участника СБП.
//
Функция НовыйПараметрПодсказки() Экспорт
	
	ПараметрыПодсказки = Новый Структура;
	ПараметрыПодсказки.Вставить("ОтобразитьПодсказку", Ложь);
	ПараметрыПодсказки.Вставить("АдресЛичногоКабинета", "");
	ПараметрыПодсказки.Вставить("ПартнерАгентаСБП", Ложь);
	ПараметрыПодсказки.Вставить("АдресСтраницыЗаявки", "");
	ПараметрыПодсказки.Вставить("ИдентификаторУчастника", "");
	
	Возврат ПараметрыПодсказки;
	
КонецФункции

// Определяет имя атрибута, в котором хранится настройка подключения.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданныхРегистрСведений - объект для обработки.
//
// Возвращаемое значение:
//  Строка - имя атрибута.
//
Функция АтрибутНастройкаПодключения(ОбъектМетаданных) Экспорт
	
	ТипНастройка = Новый ОписаниеТипов("СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей");
	Для Каждого Изменение Из ОбъектМетаданных.Измерения Цикл
		Если Изменение.Тип = ТипНастройка Тогда
			Возврат Изменение.Имя;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Ресурс Из ОбъектМетаданных.Ресурсы Цикл
		Если Ресурс.Тип = ТипНастройка Тогда
			Возврат Ресурс.Имя;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		Если Реквизит.Тип = ТипНастройка Тогда
			Возврат Реквизит.Имя;
		КонецЕсли;
	КонецЦикла;
КонецФункции

// Формирует идентификатор для отображения скрытых символов на форме.
//
//
// Возвращаемое значение:
//  Строка - служебный идентификатор.
//
Функция СтрокаСекретныхДанныхПоУмолчанию()
	
	Возврат "be9a7ce7-5c24-413a-98aa-e0b370ca7e9d";
	
КонецФункции

// Формирует таблица шаблонов назначений платежей.
//
// Возвращаемое значение:
//  ТаблицаЗначений - настройки заполнения шаблонов платежей:
//   * ОбъектМетаданных - Строка - имя объекта метаданных операции.
//   * Идентификатор - Строка - идентификатор шаблона.
//   * Наименование - Строка - наименование шаблона для пользователя.
//   * Параметры - Структура - параметры заполнения шаблона:
//   * Параметры - Структура - параметры заполнения шаблона:
//     ** Наименование - Строка - наименование параметра для пользователя.
//     ** Идентификатор - Строка - идентификатор параметра для заполнения.
//
Функция НовыйШаблоныНазначений() Экспорт
	
	ШаблоныНазначений = Новый ТаблицаЗначений;
	ШаблоныНазначений.Колонки.Добавить("ОбъектМетаданных", ОбщегоНазначения.ОписаниеТипаСтрока(80));
	ШаблоныНазначений.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ШаблоныНазначений.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ШаблоныНазначений.Колонки.Добавить("Параметры", Новый ОписаниеТипов("Массив"));
	
	Возврат ШаблоныНазначений;
	
КонецФункции

// Удаляет настройки на переданной форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, на которой необходимо удалить настройки
//   подключения к Системе быстрых платежей;
//  ИмяНастройки - Строка - имя настройки для удаления.
//
Процедура УдалитьНастройкиФормы(Форма, ИмяНастройки) Экспорт
	
	// Если настройки не сформированы, удалять
	// ничего не нужно.
	Если Форма.Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.Настройки.Свойство(ИмяНастройки) Тогда // АПК:1415 Реквизиты добавляются программно.
		Возврат;
	КонецЕсли;
	
	УдаляемыеРеквизиты = Новый Массив;
	Для Каждого Настройка Из Форма.Настройки[ИмяНастройки] Цикл
		Если Форма.Элементы.Найти(Настройка.Имя) <> Неопределено Тогда
			Форма.Элементы.Удалить(Форма.Элементы[Настройка.Имя]);
			УдаляемыеРеквизиты.Добавить(Настройка.Имя);
		КонецЕсли;
	КонецЦикла;
	Форма.ИзменитьРеквизиты(Новый Массив, УдаляемыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиОплатыНаФормах

// Добавляет настройки оплат на переданную форму.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, на которую необходимо добавить настройки;
//  Группа - ГруппаФормы - группа для добавления настроек;
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей.
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения к сервису;
//  Подключение - Булево - признак новой настройки подключения к сервису.
//
Процедура ДобавитьНастройкиОплаты(
		Форма,
		Группа,
		ВариантНастройки,
		НастройкаПодключения,
		ДокументОперации = Неопределено,
		Подключение = Ложь) Экспорт
	
	Если Форма.Настройки = Неопределено Тогда
		Форма.Настройки = Новый Структура;
	КонецЕсли;
	
	НастройкиПодключения = Неопределено;
	СистемаБыстрыхПлатежейСобытия.ПриОпределенииНастроекОплаты(
		Форма,
		ВариантНастройки,
		НастройкиПодключения);
	
	Реквизиты = НовыйНастройкиОплаты(НастройкиПодключения);
	НовыеРеквизиты = Новый Массив;
	
	Для Каждого ОписаниеРеквизита Из Реквизиты Цикл
		Если ОписаниеРеквизита.НастройкаПодключения Тогда
			Продолжить;
		КонецЕсли;
		НовыеРеквизиты.Добавить(
			Новый РеквизитФормы(
				ОписаниеРеквизита.Имя,
				ОписаниеРеквизита.Тип,
				,
				ОписаниеРеквизита.Синоним,
				ЗначениеЗаполнено(НастройкаПодключения)));
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(НовыеРеквизиты);
	
	Для Каждого ОписаниеРеквизита Из Реквизиты Цикл
		
		Если ОписаниеРеквизита.НастройкаПодключения Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлемент = Форма.Элементы.Добавить(
			ОписаниеРеквизита.Имя,
			Тип("ПолеФормы"),
			Группа);
		
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок = ОписаниеРеквизита.Синоним;
		НовыйЭлемент.ПутьКДанным = ОписаниеРеквизита.Имя;
		НовыйЭлемент.АвтоОтметкаНезаполненного = ОписаниеРеквизита.ПроверкаЗаполнения;
		
		// АПК:280 -выкл
		Попытка
			НовыйЭлемент.ПараметрыВыбора = ОписаниеРеквизита.ПараметрыВыбора;
		Исключение
			// Дополнительной обработки не требуется. Исключение может возникнуть, если настройка
			// функциональных опций конфликтует с настройкой параметров выбора.
		КонецПопытки;
		
		Попытка
			НовыйЭлемент.СвязиПараметровВыбора = ОписаниеРеквизита.СвязиПараметровВыбора;
		Исключение
			// Дополнительной обработки не требуется. Исключение может возникнуть, если настройка
			// функциональных опций конфликтует с настройкой связи параметров выбора.
		КонецПопытки;
		// АПК:280 -вкл.
		
		НовыйЭлемент.УстановитьДействие(
			"ПриИзменении",
			"Подключаемый_ПриИзмененииНастройкиОплаты");
		
		Если ЗначениеЗаполнено(ДокументОперации) Тогда
			УникальноеЗначение = Новый УникальныйИдентификатор;
			ДанныеРеквизита = Новый Структура(ОписаниеРеквизита.Имя, УникальноеЗначение);
			ЗаполнитьЗначенияСвойств(ДанныеРеквизита, ДокументОперации);
			Если ДанныеРеквизита[ОписаниеРеквизита.Имя] <> УникальноеЗначение
				И ОписаниеРеквизита.Тип.СодержитТип(ТипЗнч(ДанныеРеквизита[ОписаниеРеквизита.Имя]))
				И ЗначениеЗаполнено(ДанныеРеквизита[ОписаниеРеквизита.Имя]) Тогда
					Форма[ОписаниеРеквизита.Имя] = ДанныеРеквизита[ОписаниеРеквизита.Имя];
					НовыйЭлемент.ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Значения в структуре затираются, чтобы не провоцировать ошибку
		// сериализации значений формы.
		ПустойМассив = Новый Массив;
		ОписаниеРеквизита.СвязиПараметровВыбора = Новый ФиксированныйМассив(ПустойМассив);
		ОписаниеРеквизита.ПараметрыВыбора = Новый ФиксированныйМассив(ПустойМассив);
		
	КонецЦикла;
	
	Форма.Настройки.Вставить("НастройкиОплаты", Реквизиты);
	
	Если ЗначениеЗаполнено(НастройкаПодключения) Тогда
		ЗначенияНастроек = ЗначенияНастроекОплаты(
			Реквизиты,
			НастройкиПодключения.ОбъектМетаданных,
			НастройкаПодключения);
		Для Каждого КлючЗначение Из ЗначенияНастроек Цикл
			Форма[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Формирует декларативное описание настроек оплат.
//
// Параметры:
//  НастройкиПодключения - Структура - настройки подключения:
//    * ОбъектМетаданных - ОбъектМетаданныхРегистрСведений - объект метаданных регистр сведений,
//      в котором хранятся настройки выполнения оплат. Регистр определяет
//      связь мерчанта и аналитики ведения учета
//      в программах 1С. На основании данных регистра должен выполняется
//      поиск настройки подключения при выполнении оплат и возвратов;
//    * ИсключаемыеПоля - Массив Из Строка - наименования измерений, ресурсов или реквизитов, которые
//      необходимо скрыть на форме настройки подключения.
//
// Возвращаемое значение:
//  Структура - декларативное описание настроек.
//
Функция НовыйНастройкиОплаты(НастройкиПодключения)
	
	Настройки = Новый Массив;
	
	Для Каждого Изменение Из НастройкиПодключения.ОбъектМетаданных.Измерения Цикл
		Если Не СтрНачинаетсяС(Изменение.Имя, "Удалить")
			И НастройкиПодключения.ИсключаемыеПоля.Найти(Изменение.Имя) = Неопределено Тогда
			Настройки.Добавить(
				НовыйРасширенноеОписаниеРеквизита(
					Изменение.Имя,
					Изменение.Тип,
					Изменение.Синоним,
					(Изменение.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку),
					Изменение.ПараметрыВыбора,
					Изменение.СвязиПараметровВыбора));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ресурс Из НастройкиПодключения.ОбъектМетаданных.Ресурсы Цикл
		Если Не СтрНачинаетсяС(Ресурс.Имя, "Удалить")
			И НастройкиПодключения.ИсключаемыеПоля.Найти(Ресурс.Имя) = Неопределено Тогда
			Настройки.Добавить(
				НовыйРасширенноеОписаниеРеквизита(
					Ресурс.Имя,
					Ресурс.Тип,
					Ресурс.Синоним,
					(Ресурс.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку),
					Ресурс.ПараметрыВыбора,
					Ресурс.СвязиПараметровВыбора));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит Из НастройкиПодключения.ОбъектМетаданных.Реквизиты Цикл
		Если Не СтрНачинаетсяС(Реквизит.Имя, "Удалить")
			И НастройкиПодключения.ИсключаемыеПоля.Найти(Реквизит.Имя) = Неопределено Тогда
			Настройки.Добавить(
				НовыйРасширенноеОписаниеРеквизита(
					Реквизит.Имя,
					Реквизит.Тип,
					Реквизит.Синоним,
					(Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку),
					Реквизит.ПараметрыВыбора,
					Реквизит.СвязиПараметровВыбора));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции

// Формирует декларативное описание реквизита настройки оплат.
//
// Параметры:
//  Имя - Строка - имя реквизита;
//  Тип - Строка - тип реквизита;
//  Синоним - Строка - синоним реквизита;
//  ПроверкаЗаполнения - Строка - режим проверки заполнения;
//  РежимПароля - Булево - признак использования режима пароля;
//  Подсказка - Строка - подсказка для поля формы.
//
// Возвращаемое значение:
//  Структура - декларативное описание реквизита метаданных.
//
Функция НовыйОписаниеРеквизита(
		Имя,
		Тип,
		Синоним,
		ПроверкаЗаполнения,
		РежимПароля = Ложь,
		Подсказка = "")
	
	ОписаниеПоля = Новый Структура;
	ОписаниеПоля.Вставить("Тип",                Тип);
	ОписаниеПоля.Вставить("Имя",                Имя);
	ОписаниеПоля.Вставить("Синоним",            Синоним);
	ОписаниеПоля.Вставить("ПроверкаЗаполнения", ПроверкаЗаполнения);
	ОписаниеПоля.Вставить("РежимПароля",        РежимПароля);
	ОписаниеПоля.Вставить("Подсказка",          Подсказка);
	Если Тип = Новый ОписаниеТипов("СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей") Тогда
		ОписаниеПоля.Вставить("НастройкаПодключения", Истина);
	Иначе
		ОписаниеПоля.Вставить("НастройкаПодключения", Ложь);
	КонецЕсли;
	
	Возврат ОписаниеПоля;
	
КонецФункции

// Формирует декларативное описание реквизита настройки оплат.
//
// Параметры:
//  Имя - Строка - имя реквизита;
//  Тип - Строка - тип реквизита;
//  Синоним - Строка - синоним реквизита;
//  ПроверкаЗаполнения - Строка - режим проверки заполнения;
//  ПараметрыВыбора - Строка - параметры выбора;
//  СвязиПараметровВыбора - Строка - связи параметров;
//  РежимПароля - Строка - признак использования режима пароля.
//
// Возвращаемое значение:
//  Структура - декларативное описание реквизита метаданных.
//
Функция НовыйРасширенноеОписаниеРеквизита(
		Имя,
		Тип,
		Синоним,
		ПроверкаЗаполнения,
		ПараметрыВыбора,
		СвязиПараметровВыбора,
		РежимПароля = Ложь)
	
	ОписаниеПоля = Новый Структура;
	ОписаниеПоля.Вставить("Тип", Тип);
	ОписаниеПоля.Вставить("Имя", Имя);
	ОписаниеПоля.Вставить("Синоним", Синоним);
	ОписаниеПоля.Вставить("ПроверкаЗаполнения", ПроверкаЗаполнения);
	ОписаниеПоля.Вставить("ПараметрыВыбора", ПараметрыВыбора);
	ОписаниеПоля.Вставить("СвязиПараметровВыбора", СвязиПараметровВыбора);
	ОписаниеПоля.Вставить("РежимПароля", РежимПароля);
	Если Тип = Новый ОписаниеТипов("СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей") Тогда
		ОписаниеПоля.Вставить("НастройкаПодключения", Истина);
	Иначе
		ОписаниеПоля.Вставить("НастройкаПодключения", Ложь);
	КонецЕсли;
	
	Возврат ОписаниеПоля;
	
КонецФункции

// Определяет настройки оплат для торговой точки.
//
// Параметры:
//  НастройкиОплаты - Структура - см. НовыйНастройкиОплаты;
//  ОбъектМетаданных - ОбъектМетаданныхРегистрСведений - объект метаданных, который отвечает за хранение настроек;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//   настройка подключения к сервису.
//
// Возвращаемое значение:
//  Соответствие - содержит значения настроек оплат.
//
Функция ЗначенияНастроекОплаты(
		НастройкиОплаты,
		ОбъектМетаданных,
		НастройкаПодключения)
	
	Результат  = Новый Соответствие;
	ВыборПолей = "";
	Отбор      = "";
	
	Для Каждого ОписаниеПоля Из НастройкиОплаты Цикл
		
		Если Не ОписаниеПоля.НастройкаПодключения Тогда
			Если ВыборПолей <> "" Тогда
				ВыборПолей = ВыборПолей
					+ ","
					+ Символы.ПС;
			КонецЕсли;
			
			ВыборПолей = ВыборПолей
				+ ОбъектМетаданных.Имя
				+ "."
				+ ОписаниеПоля.Имя
				+ " КАК "
				+ ОписаниеПоля.Имя;
		Иначе
			Отбор = ОбъектМетаданных.Имя + "." + ОписаниеПоля.Имя + " = &НастройкаПодключения";
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	%1
		|ИЗ
		|	РегистрСведений.%2 КАК %3 
		|ГДЕ
		|	%4";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ВыборПолей,
		ОбъектМетаданных.Имя,
		ОбъектМетаданных.Имя,
		Отбор);
	
	Запрос.УстановитьПараметр("НастройкаПодключения", НастройкаПодключения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого ОписаниеПоля Из НастройкиОплаты Цикл
			Если ОписаниеПоля.НастройкаПодключения Тогда
				Продолжить;
			КонецЕсли;
			Результат.Вставить(ОписаниеПоля.Имя, ВыборкаДетальныеЗаписи[ОписаниеПоля.Имя]);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Обновляет настройки оплаты для торговой точки.
//
// Параметры:
//  ПараметрыОплатыНастройки - Структура - см. ЗначенияНастроекОплаты;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения к сервису.
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей.
//
// Возвращаемое значение:
//  Структура - результат обновления.
//
Функция ЗаписатьНастройкиОплаты(
		ПараметрыОплатыНастройки,
		НастройкаПодключения,
		ВариантНастройки) Экспорт
	
	ПараметрыОплаты = Новый Структура;
	СистемаБыстрыхПлатежейСобытия.ПриФормированииПараметровОплатыПередЗаписью(
		ВариантНастройки,
		ПараметрыОплаты,
		ПараметрыОплатыНастройки,
		НастройкаПодключения);
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ",             Ложь);
	Результат.Вставить("СообщениеОбОшибке", "");
	
	Попытка
		ИнтеграцияПодсистемБИП.ПриЗаписиНастроекПодключения(
			ПараметрыОплаты,
			Результат.Отказ,
			Результат.СообщениеОбОшибке);
		СистемаБыстрыхПлатежейПереопределяемый.ПриЗаписиНастроекПодключения(
			ПараметрыОплаты,
			Результат.Отказ,
			Результат.СообщениеОбОшибке);
	Исключение
		ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		Результат.Отказ             = Истина;
		Результат.СообщениеОбОшибке = ОбработкаОшибок.КраткоеПредставлениеОшибки(
			ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Проверяет заполнения настройки оплаты для торговой точки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо выполнить проверку;
//  Отказ - Булево - если Истина, при проверке возникли ошибки.
//
Процедура ПроверитьНастройкиОплаты(Форма, Отказ) Экспорт
	
	Для каждого ОписаниеРеквизита Из Форма.Настройки.НастройкиОплаты Цикл
		
		Если ОписаниеРеквизита.НастройкаПодключения Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеРеквизита.ПроверкаЗаполнения И Не ЗначениеЗаполнено(Форма[ОписаниеРеквизита.Имя]) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Поле %1 не заполнено.'"),
					ОписаниеРеквизита.Синоним),
				,
				,
				ОписаниеРеквизита.Имя,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает настройки оплат из формы торговой точки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для получения настроек оплат.
//
// Возвращаемое значение:
//  Структура - настройки оплат.
//
Функция НастройкиОплатыПоДаннымФормы(Форма) Экспорт
	
	ПараметрыОплаты = Новый Соответствие;
	Для каждого ОписаниеРеквизита Из Форма.Настройки.НастройкиОплаты Цикл
		Если ОписаниеРеквизита.НастройкаПодключения Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыОплаты.Вставить(ОписаниеРеквизита.Имя, Форма[ОписаниеРеквизита.Имя]);
	КонецЦикла;
	
	Возврат ПараметрыОплаты;
	
КонецФункции

// Позволяет настроить элементы настройки приема оплат на формах подключения
// к Системе быстрых платежей.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма настройки подключения;
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей;
//  ИдентификаторУчастника - Строка - идентификатор участника СБП для которого выполняется настройка;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей, Неопределено - передается
//   ссылка на настройку подключения, в случае создания новой настройки передается Неопределено.
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные параметры настройки подключения к
//    Системе быстрых платежей, которые передаются в методе СистемаБыстрыхПлатежейКлиент.ПодключитьСистемуБыстрыхПлатежей.
//
Процедура НастроитьЭлементыФормыПодключения(
		Форма,
		ВариантНастройки,
		ИдентификаторУчастника,
		НастройкаПодключения = Неопределено,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	ПроверитьВариантНастройки(
		ВариантНастройки);
	
	ОбщиеЭлементы = Новый Структура;
	ОбщиеЭлементы.Вставить("Наименование", Форма.Элементы["Наименование"]);
	ОбщиеЭлементы.Вставить("ДекорацияДополнительнаяИнформация", Форма.Элементы["ДекорацияДополнительнаяИнформация"]);
	
	ЭлементыНастроекОплаты = Новый Структура;
	ЗначенияНастроекОплаты = Новый Структура;
	Для Каждого ЭлементНастройки Из Форма.Настройки.НастройкиОплаты Цикл
		Если ЭлементНастройки.НастройкаПодключения Тогда
			Продолжить;
		КонецЕсли;
		ЭлементыНастроекОплаты.Вставить(ЭлементНастройки.Имя, Форма.Элементы[ЭлементНастройки.Имя]);
		ЗначенияНастроекОплаты.Вставить(ЭлементНастройки.Имя, Форма[ЭлементНастройки.Имя]);
	КонецЦикла;
	
	НастройкиЭлементов = Новый Структура;
	НастройкиЭлементов.Вставить("ЭлементыНастроекОплаты", ЭлементыНастроекОплаты);
	НастройкиЭлементов.Вставить("ЗначенияНастроекОплаты", ЗначенияНастроекОплаты);
	
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("ОбщиеЭлементы", ОбщиеЭлементы);
	НастройкиФормы.Вставить("НастройкаПодключения", НастройкаПодключения);
	НастройкиФормы.Вставить("ИдентификаторУчастника", ИдентификаторУчастника);
	
	СистемаБыстрыхПлатежейСобытия.ПриФормированииНастроекЭлементовФормы(
		ВариантНастройки,
		НастройкиЭлементов,
		НастройкиФормы);
	
	ИнтеграцияПодсистемБИП.ПриНастройкеЭлементовФормыПодключения(
		НастройкиФормы,
		ДополнительныеПараметры);
	СистемаБыстрыхПлатежейПереопределяемый.ПриНастройкеЭлементовФормыПодключения(
		НастройкиФормы,
		ДополнительныеПараметры);
	
КонецПроцедуры

// Позволяет предзаполнить настройки приема платежей на формах подключения
// к Системе быстрых платежей.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма настройки подключения;
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей;
//  ИдентификаторУчастника - Строка - идентификатор участника СБП;
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные параметры настройки подключения с
//    Системой быстрых платежей, которые передаются в методе СистемаБыстрыхПлатежейКлиент.ПодключитьСистемуБыстрыхПлатежей.
//
Функция НастроитьПараметрыПодключения(
		Форма,
		ВариантНастройки,
		ИдентификаторУчастника,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	ПроверитьВариантНастройки(
		ВариантНастройки);
	
	ОбщиеНастройки = Новый Структура;
	ОбщиеНастройки.Вставить("Наименование", Неопределено);
	
	НастройкиОплатыСБПc2b = Новый Структура;
	Для Каждого ЭлементНастройки Из Форма.Настройки.НастройкиОплаты Цикл
		Если ЭлементНастройки.НастройкаПодключения Тогда
			Продолжить;
		КонецЕсли;
		НастройкиОплатыСБПc2b.Вставить(ЭлементНастройки.Имя, Неопределено);
	КонецЦикла;
	
	НастройкиРегистр = НастройкиУчастникаСБП(ИдентификаторУчастника);
	
	НастройкиУчастникаСБП = Новый Структура;
	НастройкиУчастникаСБП.Вставить("Наименование", "");
	НастройкиУчастникаСБП.Вставить("ИНН", "");
	НастройкиУчастникаСБП.Вставить("ПлатежныйАгрегатор", Ложь);
	НастройкиУчастникаСБП.Вставить("ИдентификаторУчастника", ИдентификаторУчастника);
	
	ЗаполнитьЗначенияСвойств(
		НастройкиУчастникаСБП,
		НастройкиРегистр,
		"Наименование, ИНН, ПлатежныйАгрегатор");
	
	НастройкиУчастникаСБП.Вставить(
		"БИК",
		БИКУчастникаСБП(ИдентификаторУчастника));
	
	НастройкиОплаты = Новый Структура;
	ИмяСвойства = "";
	СистемаБыстрыхПлатежейСобытия.ПриФормированииПараметровПодключения(
		ВариантНастройки,
		НастройкиОплаты,
		НастройкиОплатыСБПc2b,
		ИмяСвойства);
	
	b2b = Новый Структура;
	b2b.Вставить("ВидПоступления", НастройкиРегистр.ВидПоступленияb2b);
	
	ДополнительныеНастройки = Новый Структура;
	ДополнительныеНастройки.Вставить("b2b", b2b);
	
	Настройки = Новый Структура;
	Настройки.Вставить("ОбщиеНастройки", ОбщиеНастройки);
	Настройки.Вставить("НастройкиОплаты", НастройкиОплаты);
	Настройки.Вставить("НастройкиУчастникаСБП", НастройкиУчастникаСБП);
	Настройки.Вставить("ДополнительныеНастройки", ДополнительныеНастройки);
	
	ИнтеграцияПодсистемБИП.ПриЗаполненииФормыНастройкиПодключения(
		Настройки,
		ДополнительныеПараметры);
	СистемаБыстрыхПлатежейПереопределяемый.ПриЗаполненииФормыНастройкиПодключения(
		Настройки,
		ДополнительныеПараметры);
	
	Форма.Наименование = Настройки.ОбщиеНастройки.Наименование;
	Для Каждого КлючЗначение Из Настройки.НастройкиОплаты[ИмяСвойства] Цикл
		Если ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
			Форма[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Заполняет настройки отображения шаблонов назначений платежей.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, на которую необходимо добавить настройки;
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения к сервису.
//  НастройкиПодключения - Структура - см. НастройкиПодключенияПрограммы.
//
Процедура ЗаполнитьДекорацияНастройкиШаблонов(
		Форма,
		ВариантНастройки,
		НастройкаПодключения,
		НастройкиПодключения) Экспорт
	
	Если Не ЗначениеЗаполнено(НастройкаПодключения) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВариантНастройки(ВариантНастройки);
	
	ШаблоныНазначений = Неопределено;
	СистемаБыстрыхПлатежейСобытия.ПриОпределенииШаблоновНазначений(
		ВариантНастройки,
		НастройкиПодключения,
		ШаблоныНазначений);
	
	Если ШаблоныНазначений.Количество() = 0 Тогда
		Форма.Элементы.ДекорацияНастройкиШаблонов.Видимость = Ложь;
	КонецЕсли;
	
	Шаблоны = РегистрыСведений.ШаблоныНазначенийПлатежейСБП.ШаблоныНазначенийПлатежей(
		НастройкаПодключения);
	
	Если Шаблоны.Количество() <> 0 Тогда
		ПредставлениеСсылки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Настроить (%1)'"),
			Шаблоны.Количество());
	Иначе
		ПредставлениеСсылки = НСтр("ru = 'Настроить'")
	КонецЕсли;
	
	Форма.Элементы.ДекорацияНастройкиШаблонов.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Шаблоны назначения: <a href = ""open:paymentPurpose"">%1</a>'"),
			ПредставлениеСсылки));
	
КонецПроцедуры

// Заполняет настройки отображения кассовых ссылок.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, на которую необходимо добавить настройки;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения к
//   сервису.
//
Процедура ЗаполнитьДекорацияКассовыеСсылки(Форма, НастройкаПодключения) Экспорт
	
	СистемаБыстрыхПлатежейСобытия.ПриЗаполненииЗаполнитьДекорацияКассовыеСсылки(
		Форма,
		НастройкаПодключения);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиПодключения

// Получает актуальный список участников Системы быстрых платежей.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - данные для выполнения запроса;
//  АдресРезультата - Строка - адрес хранилища результат обновления.
//
Процедура ПолучитьУчастниковСБПВФоне(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	РезультатОперации = ПолучитьУчастниковСБП();
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Получает актуальный список участников Системы быстрых платежей.
//
// Возвращаемое значение:
//  Структура - результат получения участников.
//
Функция ПолучитьУчастниковСБП() Экспорт
	
	РезультатОперации = НовыйРезультатОперации();
	РезультатОперации.Вставить("ДанныеУчастников", Новый Соответствие);
	
	РезультатВызова = СистемаБыстрыхПлатежейСервис.ОперацияНастройкиУчастниковСБП();
	Если ЗначениеЗаполнено(РезультатВызова.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатВызова,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Получение слияние настроек сервиса и программы.
	ИдентификаторыУчастников = Новый ТаблицаЗначений;
	ИдентификаторыУчастников.Колонки.Добавить(
		"Идентификатор",
		ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ИдентификаторыУчастников.Колонки.Добавить(
		"c2b",
		Новый ОписаниеТипов("Булево"));
	ИдентификаторыУчастников.Колонки.Добавить(
		"b2b",
		Новый ОписаниеТипов("Булево"));
	
	Для Каждого НастройкаСервис Из РезультатВызова.Настройки Цикл
		Если НастройкаСервис.c2bIntegrationSupported
			Или НастройкаСервис.b2bIntegrationEnabled Тогда
			
			Настройка = Новый Структура;
			Настройка.Вставить(
				"АдресСтраницыПодключенияc2b",
				НастройкаСервис.personalAccountPageUrl);
			Настройка.Вставить(
				"АдресСтраницыЗаявкиc2b",
				АдресСтраницыПодключенияКСБП(
					НастройкаСервис.memberId,
					"c2b"));
			Настройка.Вставить(
				"ТекстПредупрежденияc2b",
				НастройкаСервис.attentionText);
			Настройка.Вставить(
				"ПорядокОтображенияc2b",
				?(НастройкаСервис.sortingOrder <> Неопределено,
					НастройкаСервис.sortingOrder,
					0));
			Настройка.Вставить(
				"АдресСтраницыПодключенияb2b",
				НастройкаСервис.b2bPersonalAccountPageUrl);
			Настройка.Вставить(
				"АдресСтраницыЗаявкиb2b",
				АдресСтраницыПодключенияКСБП(
					НастройкаСервис.memberId,
					"b2b"));
			Настройка.Вставить(
				"ТекстПредупрежденияb2b",
				НастройкаСервис.b2bAttentionText);
			Настройка.Вставить(
				"ПорядокОтображенияb2b",
				?(НастройкаСервис.b2bSortingOrder <> Неопределено,
					НастройкаСервис.b2bSortingOrder,
					0));
			Настройка.Вставить(
				"ИНН",
				НастройкаСервис.inn);
			Настройка.Вставить(
				"БИК",
				?(НастройкаСервис.biks = Неопределено,
					Новый Массив,
					НастройкаСервис.biks));
			Настройка.Вставить(
				"Представление",
				НастройкаСервис.memberName);
			Настройка.Вставить(
				"ПартнерАгентаСБП",
				НастройкаСервис.c2bSbpAgentPartner);
			Настройка.Вставить(
				"c2b",
				НастройкаСервис.c2bIntegrationSupported);
			Настройка.Вставить(
				"b2b",
				НастройкаСервис.b2bIntegrationEnabled);
			
			ИдентификаторУчастника = ИдентификаторыУчастников.Добавить();
			ИдентификаторУчастника.Идентификатор = НастройкаСервис.memberId;
			ЗаполнитьЗначенияСвойств(
				ИдентификаторУчастника,
				Настройка,
				"b2b, c2b");
			
			РезультатОперации.ДанныеУчастников.Вставить(
				НастройкаСервис.memberId,
				Настройка);
			
		КонецЕсли;
	КонецЦикла;
	
	// Обработать настройки участников по которым еще не была выполнена загрузка настроек.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыУчастников.Идентификатор КАК Идентификатор,
		|	ИдентификаторыУчастников.c2b КАК c2b,
		|	ИдентификаторыУчастников.b2b КАК b2b
		|ПОМЕСТИТЬ ВТ_ИдентификаторыУчастников
		|ИЗ
		|	&ИдентификаторыУчастников КАК ИдентификаторыУчастников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиУчастниковСБП.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИдентификаторыУчастников КАК ВТ_ИдентификаторыУчастников
		|		ПО НастройкиУчастниковСБП.Идентификатор = ВТ_ИдентификаторыУчастников.Идентификатор
		|ГДЕ
		|	НастройкиУчастниковСБП.ТипАутентификацииc2b = ЗНАЧЕНИЕ(Перечисление.ТипыАутентификацииСБП.ПустаяСсылка)
		|	И ВТ_ИдентификаторыУчастников.c2b
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НастройкиУчастниковСБП.Идентификатор
		|ИЗ
		|	РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИдентификаторыУчастников КАК ВТ_ИдентификаторыУчастников
		|		ПО НастройкиУчастниковСБП.Идентификатор = ВТ_ИдентификаторыУчастников.Идентификатор
		|ГДЕ
		|	НастройкиУчастниковСБП.ТипАутентификацииb2b = ЗНАЧЕНИЕ(Перечисление.ТипыАутентификацииСБП.ПустаяСсылка)
		|	И ВТ_ИдентификаторыУчастников.b2b
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ИдентификаторыУчастников.Идентификатор
		|ИЗ
		|	ВТ_ИдентификаторыУчастников КАК ВТ_ИдентификаторыУчастников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
		|		ПО ВТ_ИдентификаторыУчастников.Идентификатор = НастройкиУчастниковСБП.Идентификатор
		|ГДЕ
		|	НастройкиУчастниковСБП.Идентификатор ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ИдентификаторыУчастников", ИдентификаторыУчастников);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ОбновитьНастройки = Ложь;
	Для Каждого ИдентификаторУчастника Из ИдентификаторыУчастников Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", ИдентификаторУчастника.Идентификатор);
		ВыборкаДетальныеЗаписи.Сбросить();
		Если ВыборкаДетальныеЗаписи.НайтиСледующий(Отбор) Тогда
			Если ОбщегоНазначения.РазделениеВключено() Тогда
				РезультатОперации.ДанныеУчастников.Удалить(ИдентификаторУчастника.Идентификатор);
			Иначе
				ЗаписатьНастройкиУчастниковСБП(РезультатВызова.Настройки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатОперации;
	
КонецФункции

// Производит проверку настроек подключения к СБП для новой настройки подключения.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - данные для регистрации новой настройки подключения;
//  АдресРезультата - Строка - адрес хранилища результат обновления.
//
Процедура ПроверитьПараметрыПодключенияВФоне(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	РезультатОперации = ПроверитьПараметрыПодключения(
		ПараметрыПроцедуры.ИдентификаторУчастника,
		ПараметрыПроцедуры.ПараметрыАутентификации,
		ПараметрыПроцедуры.ВариантНастройки);
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Производит проверку настроек подключения к СБП для новой настройки подключения.
//
// Параметры:
//  ИдентификаторУчастника - Строка - идентификатор участника СБП;
//  ПараметрыАутентификации - Соответствие - данные аутентификации;
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей.
//
Функция ПроверитьПараметрыПодключения(
		ИдентификаторУчастника,
		ПараметрыАутентификации,
		ВариантНастройки) Экспорт
	
	ПроверитьВариантНастройки(
		ВариантНастройки);
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки",         "");
	Результат.Вставить("СообщениеОбОшибке", "");
	
	НастройкиУчастника = НастройкиАвторизацииУчастникаСБП(
		ИдентификаторУчастника,
		ВариантНастройки);
	
	ДанныеАутентификации = ПреобразоватьНастройкиАутентификации(
		ИдентификаторУчастника,
		ПараметрыАутентификации,
		НастройкиУчастника.ТипАутентификации);
	
	ПараметрыНастройкиПодключения = Новый Структура;
	ПараметрыНастройкиПодключения.Вставить(
		"ИдентификаторМерчанта",
		ИдентификаторМерчантаПоДаннымАутентификации(ПараметрыАутентификации));
	ПараметрыНастройкиПодключения.Вставить(
		"ИдентификаторУчастника",
		ИдентификаторУчастника);
	ПараметрыНастройкиПодключения.Вставить(
		"НастройкаПодключения",
		Неопределено);
	ПараметрыНастройкиПодключения.Вставить(
		"Используется",
		Истина);
	ПараметрыНастройкиПодключения.Вставить(
		"ТипАутентификации",
		НастройкиУчастника.ТипАутентификации);
	
	РезультатПроверки = НовыйРезультатОперации();
	СистемаБыстрыхПлатежейСобытия.ПриПроверкеПараметровАутентификации(
		ВариантНастройки,
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		РезультатПроверки);
	
	ЗаполнитьЗначенияСвойств(Результат, РезультатПроверки);
	
	Возврат Результат;
	
КонецФункции

// Производит проверку настроек подключения к СБП для существующей настройки подключения.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - данные для регистрации новой настройки подключения;
//  АдресРезультата - Строка - адрес хранилища результат обновления.
//
Процедура ПроверитьПараметрыПодключенияОбъект(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки",         "");
	Результат.Вставить("СообщениеОбОшибке", "");
	
	ПараметрыАутентификации = ПрочитатьПараметрыАутентификацииУчастника(
		ПараметрыПроцедуры.НастройкаПодключения,
		ПараметрыПроцедуры.ИдентификаторУчастника);
	
	РезультатПроверки = НовыйРезультатОперации();
	СистемаБыстрыхПлатежейСобытия.ПриПроверкеПараметровАутентификации(
		ПараметрыПроцедуры.ВариантНастройки,
		ПараметрыНастройкиПодключения(
			ПараметрыПроцедуры.НастройкаПодключения),
		ПараметрыАутентификации,
		РезультатПроверки);
	
	ЗаполнитьЗначенияСвойств(Результат, РезультатПроверки);
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Формирует представление подсказки для поля настроек Merchant Id.
//
// Возвращаемое значение:
//  Строка - подсказка поля формы.
//
Функция ПодсказкаПоляИдентификаторМерчантаПоУмолчанию()
	
	Возврат НСтр("ru = 'Идентификатор торговой точки в Системе быстрых платежей.'");
	
КонецФункции

// Устанавливает значение константы ДлительностьОперацииСистемыБыстрыхПлатежей.
//
// Параметры:
//  Значение - Число - количество секунд.
//
Процедура УстановитьДлительностьОперации(Значение) Экспорт
	
	Константы.ДлительностьОперацииСистемыБыстрыхПлатежей.Установить(Значение);
	
КонецПроцедуры

// См. СистемаБыстрыхПлатежей.ПараметрыПодключенияПоУчастникуСБП
//
Функция ПараметрыПодключенияПоУчастникуСБП(
		ИдентификаторУчастника,
		ВариантНастройки) Экспорт
	
	КоллекцияРеквизитов = Метаданные.Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей.Реквизиты;
	ПараметрыНастройкиПодключения = Новый Массив;
	
	Для Каждого Реквизит Из КоллекцияРеквизитов Цикл
		
		Если Реквизит.Имя = "УдалитьИдентификатор"
			Или Реквизит.Имя = "УдалитьПлатежнаяСистема"
			Или Реквизит.Имя = "ИдентификаторМерчанта"
			Или Реквизит.Имя = "ВариантНастройки" Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеРеквизита = НовыйРасширенноеОписаниеРеквизита(
			Реквизит.Имя,
			Реквизит.Тип,
			Реквизит.Синоним,
			(Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку),
			Реквизит.ПараметрыВыбора,
			Реквизит.СвязиПараметровВыбора);
		
		Если Реквизит.Имя = "ИдентификаторУчастника" Тогда
			ОписаниеРеквизита.Вставить("Значение", ИдентификаторУчастника);
		Иначе
			ОписаниеРеквизита.Вставить("Значение", Реквизит.Тип.ПривестиЗначение());
		КонецЕсли;
		
		ОписаниеРеквизита.Вставить(
			"ДляГруппы",
			?(Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы, Истина, Ложь));
		
		ПараметрыНастройкиПодключения.Добавить(ОписаниеРеквизита);
		
	КонецЦикла;
	
	РеквизитНаименование = НовыйРасширенноеОписаниеРеквизита(
		"Наименование",
		Новый ОписаниеТипов(
			"Строка",
			Новый КвалификаторыСтроки(Метаданные.Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей.ДлинаНаименования)),
		НСтр("ru = 'Наименование'"),
		Истина,
		Неопределено,
		Неопределено);
	РеквизитНаименование.Вставить("Значение", "");
	РеквизитНаименование.Вставить("ДляГруппы", Ложь);
	
	ПараметрыНастройкиПодключения.Добавить(РеквизитНаименование);
	
	// Параметры оплат
	НастройкиПодключения = НастройкиПодключенияПрограммы();
	Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b Тогда
		АтрибутыОплат = НовыйНастройкиОплаты(НастройкиПодключения.c2b);
	Иначе
		АтрибутыОплат = НовыйНастройкиОплаты(НастройкиПодключения.b2b);
	КонецЕсли;
	
	ПараметрыОплаты = Новый Массив;
	
	Для Каждого АтрибутОплаты Из АтрибутыОплат Цикл
		Если АтрибутОплаты.НастройкаПодключения Тогда
			Продолжить;
		КонецЕсли;
		
		АтрибутОплаты.Вставить("Значение", АтрибутОплаты.Тип.ПривестиЗначение());
		
		// Значения в структуре затираются, чтобы не провоцировать ошибку
		// сериализации значений формы.
		ПустойМассив = Новый Массив;
		АтрибутОплаты.СвязиПараметровВыбора = Новый ФиксированныйМассив(ПустойМассив);
		АтрибутОплаты.ПараметрыВыбора = Новый ФиксированныйМассив(ПустойМассив);
		
		ПараметрыОплаты.Добавить(АтрибутОплаты);
		
	КонецЦикла;
	
	НастройкиУчастника = НастройкиАвторизацииУчастникаСБП(
		ИдентификаторУчастника,
		ВариантНастройки);
	
	Если НастройкиУчастника = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не определенны настройки участника СБП.'");
	КонецЕсли;
	
	// Параметры аутентификации
	ПараметрыАутентификации = Новый Массив;
	НастройкиАутентификации = НовыйНастройкиАутентификации(
		ИдентификаторУчастника,
		НастройкиУчастника,
		НовыйПараметрПодсказки());
	
	Для Каждого Реквизит Из НастройкиАутентификации.Реквизиты Цикл
		
		ОписаниеРеквизита = НовыйОписаниеРеквизита(
			Реквизит.Имя,
			Реквизит.Тип,
			Реквизит.Синоним,
			Реквизит.ПроверкаЗаполнения,
			Реквизит.РежимПароля,
			Реквизит.Подсказка);
			
		ОписаниеРеквизита.Вставить("Значение", Реквизит.Тип.ПривестиЗначение());
		ПараметрыАутентификации.Добавить(ОписаниеРеквизита);
		
	КонецЦикла;
	
	Возврат Новый Структура(
		"ПараметрыНастройкиПодключения,
		|ПараметрыОплаты,
		|ПараметрыАутентификации",
		ПараметрыНастройкиПодключения,
		Новый Структура(
			ИдентификаторВариантаНастройки(ВариантНастройки),
			ПараметрыОплаты),
		ПараметрыАутентификации)
	
КонецФункции

// См. СистемаБыстрыхПлатежей.ПараметрыПодключенияПоНастройке
//
Функция ПараметрыПодключенияПоНастройке(НастройкаПодключения) Экспорт
	
	Если Не ЗначениеЗаполнено(НастройкаПодключения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Параметры подключения
	ЗапросЗначенийРеквизитов = Новый Запрос;
	ЗапросЗначенийРеквизитов.Текст = 
	"ВЫБРАТЬ
	|	*,
	|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ИдентификаторУчастника КАК ИдентификаторУчастника,
	|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Родитель КАК УчетнаяЗапись
	|ИЗ
	|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
	|ГДЕ
	|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка = &Ссылка";
	
	ЗапросЗначенийРеквизитов.УстановитьПараметр("Ссылка", НастройкаПодключения);
	
	ВыборкаЗначенийРеквизитов = ЗапросЗначенийРеквизитов.Выполнить().Выбрать();
	
	Если ВыборкаЗначенийРеквизитов.Следующий() Тогда
		ПараметрыПодключения = ПараметрыПодключенияПоУчастникуСБП(
			ВыборкаЗначенийРеквизитов.ИдентификаторУчастника,
			Перечисления.ВариантыНастройкиСБП.c2b);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВыборкаЗначенийРеквизитов.ВариантНастройки <> Перечисления.ВариантыНастройкиСБП.c2b Тогда
		ВызватьИсключение НСтр("ru = 'Метод поддерживает только настройку оплаты c2b. Проверьте внедрение подсистемы'");
	КонецЕсли;
	
	Для Каждого ПараметрПодключения Из ПараметрыПодключения.ПараметрыНастройкиПодключения Цикл
		ПараметрПодключения.Значение = ВыборкаЗначенийРеквизитов[ПараметрПодключения.Имя];
	КонецЦикла;
	
	// Параметры оплат.
	НастройкиОплаты = НастройкиПодключенияПрограммы().c2b;
	АтрибутыОплат = НовыйНастройкиОплаты(НастройкиОплаты);
	
	ЗначенияНастроек = ЗначенияНастроекОплаты(
		АтрибутыОплат,
		НастройкиОплаты.ОбъектМетаданных,
		НастройкаПодключения);
		
	Для Каждого ПараметрОплаты Из ПараметрыПодключения.ПараметрыОплаты.c2b Цикл
		ПараметрОплаты.Значение = ЗначенияНастроек[ПараметрОплаты.Имя];
	КонецЦикла;
	
	// Параметры аутентификации.
	НастройкиУчастника = НастройкиАвторизацииУчастникаСБП(
		ВыборкаЗначенийРеквизитов.ИдентификаторУчастника,
		Перечисления.ВариантыНастройкиСБП.c2b);
	Если НастройкиУчастника = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не определенны настройки участника СБП.'");
	КонецЕсли;
	
	ЗначениеПараметровАутентификации = ЗначениеНастроекАутентификации(
		НастройкаПодключения,
		ВыборкаЗначенийРеквизитов.ИдентификаторУчастника,
		НастройкиУчастника);
		
	Если ЗначениеЗаполнено(ЗначениеПараметровАутентификации) Тогда
		Для Каждого ПараметрАутентификации Из ПараметрыПодключения.ПараметрыАутентификации Цикл
			ПараметрАутентификации.Значение = 
				ЗначениеПараметровАутентификации.Получить(ПараметрАутентификации.Имя);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыПодключения;
	
КонецФункции

// Возвращает параметры оплаты переданного по ссылке элемента справочника
// "НастройкиПодключенияКСистемеБыстрыхПлатежей".
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - ссылка на элемент справочника 
//    для которого нужно получить параметры оплаты.
//
// Возвращаемое значение:
//  Соответствие - содержит имена и значения полей регистра сведений,
//      хранящего данные о настройках оплат.
//
Функция ПараметрыОплатыПоНастройке(НастройкаПодключения) Экспорт
	
	Если Не ЗначениеЗаполнено(НастройкаПодключения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Параметры оплат.
	НастройкиОплаты = НастройкиПодключенияПрограммы().c2b;
	АтрибутыОплат = НовыйНастройкиОплаты(НастройкиОплаты);
	
	Возврат ЗначенияНастроекОплаты(
		АтрибутыОплат,
		НастройкиОплаты.ОбъектМетаданных,
		НастройкаПодключения);
	
КонецФункции

#КонецОбласти

#Область НастройкиУчастниковСБП

// Определяет идентификатор мерчанта на основании данных
// аутентификации.
//
// Параметры:
//  НастройкиАутентификации - Соответствие - данные аутентификации.
//
// Возвращаемое значение:
//  Строка - идентификатор торговой точки.
//
Функция ИдентификаторМерчантаПоДаннымАутентификации(НастройкиАутентификации) Экспорт
	
	Возврат НастройкиАутентификации.Получить("ИдентификаторМерчанта");
	
КонецФункции

// Формирует декларативное описание настроек аутентификации.
//
// Параметры:
//  ИдентификаторУчастника - Строка - идентификатор участника СБП;
//  НастройкиУчастника - Структура - см. НастройкиУчастникаСБП;
//  Реквизиты - Массив из Структура - декларативное описание настройки;
//  Подсказка - Строка - инструкции по заполнению данных аутентификации;
//  ПараметрыПодсказки - Структура - см. НовыйПараметрПодсказки.
//
Процедура НастройкиАутентификации(
		ИдентификаторУчастника,
		НастройкиУчастника,
		Реквизиты,
		Подсказка,
		ПараметрыПодсказки)
	
	Если НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BASIC
		Или НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT Тогда
		Реквизиты.Добавить(
			НовыйОписаниеРеквизита(
				"ИдентификаторМерчанта",
				ОбщегоНазначения.ОписаниеТипаСтрока(100),
				НСтр("ru = 'Merchant Id'"),
				Истина,
				Ложь,
				ПодсказкаПоляИдентификаторМерчантаПоУмолчанию()));
		Реквизиты.Добавить(
			НовыйОписаниеРеквизита(
				"Логин",
				ОбщегоНазначения.ОписаниеТипаСтрока(100),
				НСтр("ru = 'Логин'"),
				Истина));
		Реквизиты.Добавить(
			НовыйОписаниеРеквизита(
				"Пароль",
				ОбщегоНазначения.ОписаниеТипаСтрока(100),
				НСтр("ru = 'Пароль'"),
				Истина,
				Истина));
	ИначеЕсли НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA1
		Или НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256 Тогда
		Реквизиты.Добавить(
			НовыйОписаниеРеквизита(
				"ИдентификаторМерчанта",
				ОбщегоНазначения.ОписаниеТипаСтрока(100),
				НСтр("ru = 'Merchant Id'"),
				Истина,
				Ложь,
				ПодсказкаПоляИдентификаторМерчантаПоУмолчанию()));
		Реквизиты.Добавить(
			НовыйОписаниеРеквизита(
				"Ключ",
				ОбщегоНазначения.ОписаниеТипаСтрока(100),
				НСтр("ru = 'Ключ'"),
				Истина,
				Истина));
	ИначеЕсли НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER Тогда
		Реквизиты.Добавить(
			НовыйОписаниеРеквизита(
				"ИдентификаторМерчанта",
				ОбщегоНазначения.ОписаниеТипаСтрока(100),
				НСтр("ru = 'Merchant Id'"),
				Истина,
				Ложь,
				ПодсказкаПоляИдентификаторМерчантаПоУмолчанию()));
		Реквизиты.Добавить(
			НовыйОписаниеРеквизита(
				"Токен",
				ОбщегоНазначения.ОписаниеТипаСтрока(1000),
				НСтр("ru = 'Токен'"),
				Истина,
				Истина));
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип авторизации участника СБП.'");
	КонецЕсли;
	
	Подсказка = СтроковыеФункции.ФорматированнаяСтрока(
		СистемаБыстрыхПлатежейКлиентСервер.ТекстПодсказкиПодключенияБезФорматирования(
			НастройкиУчастника.Наименование,
			ПараметрыПодсказки));
	
КонецПроцедуры

// Определяет идентификатор в СБП.
//
// Параметры:
//  ПлатежнаяСистема - УдалитьПеречислениеСсылка.ПлатежныеСистемы - участник СБП,
//    для которой выполняется операция.
//
// Возвращаемое значение:
//  Строка - идентификатор участника СБП.
//
// Определяет идентификатор в СБП.
//
// Параметры:
//  ПлатежнаяСистема - ПеречислениеСсылка.УдалитьПлатежныеСистемы - участник СБП,
//    для которой выполняется операция.
//
// Возвращаемое значение:
//  Строка - идентификатор участника СБП.
//
Функция ИдентификаторУчастникаСБП(ПлатежнаяСистема)
	
	Если ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Открытие Тогда
		Возврат "Otkrytie";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_СКБ Тогда
		Возврат "SKB";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Webmoney Тогда
		Возврат "Webmoney";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_PayMaster Тогда
		Возврат "PayMaster";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_1ССБП Тогда
		Возврат "1C-SBP";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Промсвязьбанк
		Или ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.УдалитьСБП_Промсвязьбанк Тогда
		Возврат "PSB";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_РусскийСтандарт Тогда
		Возврат "RusskijStandart";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Райффайзенбанк Тогда
		Возврат "Raiffeisen";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ГЕНБАНК Тогда
		Возврат "GENBANK";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Тинькофф Тогда
		Возврат "Tinkoff";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ТочкаБанк Тогда
		Возврат "Tochka";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_КубаньКредит Тогда
		Возврат "KubanKredit";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ФОРАБАНК Тогда
		Возврат "FORABANK";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_CDEKPay Тогда
		Возврат "SDEKFinance";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ЮгИнвестбанк Тогда
		Возврат "YUGInvestbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ЮМани Тогда
		Возврат "YUMani";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Совкомбанк Тогда
		Возврат "Sovkombank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БАНКУРАЛСИБ Тогда
		Возврат "BANKURALSIB";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Экспобанк Тогда
		Возврат "Ekspobank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_АбсолютБанк Тогда
		Возврат "AbsolyutBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкЛевобережный Тогда
		Возврат "Levoberezhnyj";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БланкБанк Тогда
		Возврат "Blanc";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_КБХлынов Тогда
		Возврат "KBHlynov";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ВЛАДБИЗНЕСБАНК Тогда
		Возврат "VLADBIZNESBANK";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_НОКССБАНК Тогда
		Возврат "NOKSSBANK";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ЗемскийБанк Тогда
		Возврат "ZemskijBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_НСБанк Тогда
		Возврат "NSBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Форштадт Тогда
		Возврат "Forshtadt";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_СКБПримсоцбанк Тогда
		Возврат "Primsoczbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_КБРостФинанс Тогда
		Возврат "KBRostFinans";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ЭсБиАйБанк Тогда
		Возврат "ABCBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_АКИБАНК Тогда
		Возврат "AKIBANK";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_АлефБанк Тогда
		Возврат "AlefBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_НИКОБАНК Тогда
		Возврат "NIKOBANK";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_КБАГРОПРОМКРЕДИТ Тогда
		Возврат "AGROPROMKREDIT";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БАНКОРЕНБУРГ Тогда
		Возврат "BANKORENBURG";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкСаратов Тогда
		Возврат "BankSaratov";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ХакасскийМуниципальныйБанк Тогда
		Возврат "HakasskijMunicipalny";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_КБАРЕСБАНК Тогда
		Возврат "Aresbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Автоградбанк Тогда
		Возврат "Avtogradbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкАкцепт Тогда
		Возврат "BankAkcept";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ТойотаБанк Тогда
		Возврат "TojotaBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_КБЭНЕРГОТРАНСБАНК Тогда
		Возврат "Energotransbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкВенец Тогда
		Возврат "BankVenecz";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкИТУРУП Тогда
		Возврат "ITURUP";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_СИБСОЦБАНК Тогда
		Возврат "Sibsocbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_МирПривилегий Тогда
		Возврат "BankMirPrivilegij";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкИнтеза Тогда
		Возврат "BankInteza";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_МОРСКОЙБАНК Тогда
		Возврат "MORSKOJBANK";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкРазвитиеСтолица Тогда
		Возврат "BankRazvitieStolica";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ТаврическийБанк Тогда
		Возврат "TavricheskijBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ПервыйИнвестиционныйБанк Тогда
		Возврат "PervyjInvesticionnyjBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_МОСКОМБАНК Тогда
		Возврат "MOSKOMBANK";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_КБДолинск Тогда
		Возврат "GTbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Нацинвестпромбанк Тогда
		Возврат "Nacinvestprombank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкРЕСОКредит Тогда
		Возврат "RESOKredit";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_РУСНАРБАНК Тогда
		Возврат "RUSNARBANK";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Кузнецкбизнесбанк Тогда
		Возврат "Kuzneckbiznesbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкКремлевский Тогда
		Возврат "BankKremlevski";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_МеждународныйФинансовыйКлуб Тогда
		Возврат "MezhdunarodnyFinansovyClub";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Томскпромстройбанк Тогда
		Возврат "Tomskpromstrojbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкАЛЕКСАНДРОВСКИЙ Тогда
		Возврат "BankAleksandrovskij";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ДжейЭндТиБанк Тогда
		Возврат "JAndTBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Новобанк Тогда
		Возврат "Novobank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкПриморье Тогда
		Возврат "AKBPrimore";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_СолидБанк Тогда
		Возврат "SolidBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_РеалистБанк Тогда
		Возврат "RealistBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_АКБДержава Тогда
		Возврат "AKBDerzhava";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкНациональныйСтандарт Тогда
		Возврат "NacionalnyjStandart";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_АКБЛантаБанк Тогда
		Возврат "AKBLantaBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_РНБАНК Тогда
		Возврат "RNBANK";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_АИКБЕнисейскийОбъединенныйБанк Тогда
		Возврат "EnisejskijObdinennyjbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкБЖФ Тогда
		Возврат "BankBZHF";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_КБДолинск Тогда
		Возврат "KBDolinsk";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Алтайкапиталбанк Тогда
		Возврат "Altajkapitalbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкСИАБ Тогда
		Возврат "BankSIAB";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_МТСБанк Тогда
		Возврат "MTSBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Модульбанк Тогда
		Возврат "Modulbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_СДМБанк Тогда
		Возврат "SDMBank";
	Иначе
		Возврат СистемаБыстрыхПлатежейКлиентСервер.ИдентификаторНеизвестногоУчастника();
	КонецЕсли;
	
КонецФункции

// Выполняет преобразование параметров аутентификации в формат
// хранения и выполнения запросов к сервису.
//
// Параметры:
//  ИдентификаторУчастника - Строка - идентификатор участника СБП;
//  ПараметрыАутентификации - Соответствие - настройки аутентификации в сервисе;
//  Сохранение - Булево - признак обработки сохранения данных;
//  ТипАутентификации - ПеречислениеСсылка.ТипыАутентификацииСБП - тип аутентификации в СБП.
//
// Возвращаемое значение:
//  Структура - преобразованные настройки аутентификации.
//
Функция ПреобразоватьНастройкиАутентификации(
		ИдентификаторУчастника,
		ПараметрыАутентификации,
		ТипАутентификации,
		Сохранение = Ложь)
	
	Если ТипАутентификации = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не определенны настройки участника СБП.'");
	КонецЕсли;
	
	ДанныеАутентификации = Новый Структура;
	Если ТипАутентификации = Перечисления.ТипыАутентификацииСБП.RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT Тогда
		ДанныеАутентификации.Вставить("login", ПараметрыАутентификации.Получить("Логин"));
		ДанныеАутентификации.Вставить("password", ПараметрыАутентификации.Получить("Пароль"));
		ДанныеАутентификации.Вставить("merchantId", ПараметрыАутентификации.Получить("ИдентификаторМерчанта"));
		ДанныеАутентификации.Вставить("accessToken", Неопределено);
		ДанныеАутентификации.Вставить("tokenType", Неопределено);
		ДанныеАутентификации.Вставить("expiresDate", Неопределено);
	ИначеЕсли ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BASIC Тогда
		ДанныеАутентификации.Вставить("login", ПараметрыАутентификации.Получить("Логин"));
		ДанныеАутентификации.Вставить("password", ПараметрыАутентификации.Получить("Пароль"));
		ДанныеАутентификации.Вставить("merchantId", ПараметрыАутентификации.Получить("ИдентификаторМерчанта"));
	ИначеЕсли ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER Тогда
		ДанныеАутентификации.Вставить("token", ПараметрыАутентификации.Получить("Токен"));
		ДанныеАутентификации.Вставить("merchantId", ПараметрыАутентификации.Получить("ИдентификаторМерчанта"));
	ИначеЕсли ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256
		Или ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA1 Тогда
		ДанныеАутентификации.Вставить("key", ?(Сохранение,
			ПараметрыАутентификации.Получить("Ключ"),
			ПолучитьДвоичныеДанныеИзHexСтроки(ПараметрыАутентификации.Получить("Ключ"))));
		ДанныеАутентификации.Вставить("merchantId", ПараметрыАутентификации.Получить("ИдентификаторМерчанта"));
		ДанныеАутентификации.Вставить("ХешФункция", ХешФункция.SHA256);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип авторизации.'");
	КонецЕсли;
	
	Возврат ДанныеАутентификации;
	
КонецФункции

// Выполняет сохранение настроек аутентификации в безопасном хранилище.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения
//    к Системе быстрых платеже;
//  ПараметрыАутентификации - Соответствие - настройки аутентификации;
//  ИдентификаторУчастника - Строка - идентификатор участника СБП;
//  ТипАутентификации - ПеречислениеСсылка.ТипыАутентификацииСБП - тип аутентификации в СБП.
//
Процедура СохранитьНастройкиАутентификации(
		НастройкаПодключения,
		Знач ПараметрыАутентификации,
		Знач ИдентификаторУчастника,
		ТипАутентификации,
		ПараметрыАутентификацииИзменены = Ложь) Экспорт
		
	// Обработка ошибки ввода данных аутентификации пользователем.
	Для Каждого ПараметрАутентификации Из ПараметрыАутентификации Цикл
		ПараметрыАутентификации.Вставить(
			ПараметрАутентификации.Ключ,
			УдалитьНечитаемыеСимволы(
				ПараметрАутентификации.Значение));
	КонецЦикла;
	
	Если ТипАутентификации = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не определенны настройки участника СБП.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		НастройкаПодключения);
	
	Если ДанныеХранилища = Неопределено Тогда
		ДанныеХранилища = Новый Соответствие;
	КонецЕсли;
	
	// Проверим необходимость обновления сохраненных данных аутентификации
	Если ТипЗнч(ДанныеХранилища) = Тип("Структура") Тогда
		
		ОбновитьВерсиюДанныхАутентификации(
			НастройкаПодключения,
			ИдентификаторУчастника);
		
		ДанныеХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			НастройкаПодключения);
		
	КонецЕсли;
	
	ДанныеУчастника = ДанныеХранилища.Получить(ИдентификаторУчастника);
	
	Если ТипАутентификации = Перечисления.ТипыАутентификацииСБП.RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT
		Или ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BASIC Тогда
		
		Если ПараметрыАутентификации.Получить("Пароль") = СтрокаСекретныхДанныхПоУмолчанию() Тогда
			ПараметрыАутентификации.Вставить("Пароль", ДанныеУчастника.password);
		КонецЕсли;
	
	ИначеЕсли ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER Тогда
		
		Если ПараметрыАутентификации.Получить("Токен") = СтрокаСекретныхДанныхПоУмолчанию() Тогда
			ПараметрыАутентификации.Вставить("Токен", ДанныеУчастника.token);
		КонецЕсли;
		
	ИначеЕсли ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256
		Или ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA1 Тогда
		
		Если ПараметрыАутентификации.Получить("Ключ") = СтрокаСекретныхДанныхПоУмолчанию() Тогда
			ПараметрыАутентификации.Вставить("Ключ", ДанныеУчастника.key);
		Иначе
			ПараметрыАутентификации.Вставить("Ключ",
				ПолучитьДвоичныеДанныеИзHexСтроки(
					ПараметрыАутентификации.Получить("Ключ")));
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип авторизации.'");
	КонецЕсли;
	
	ПараметрыАутентификации = ПреобразоватьНастройкиАутентификации(
		ИдентификаторУчастника,
		ПараметрыАутентификации,
		ТипАутентификации,
		Истина);
	
	Если ДанныеУчастника <> Неопределено Тогда
		
		ПараметрыАутентификацииИзменены = ПараметрыАутентификацииИзменены(
			ПараметрыАутентификации,
			ДанныеУчастника);
		
		ТокеныСервисов = Новый Структура;
		ТокеныСервисов.Вставить("consumers", Неопределено);
		ЗаполнитьЗначенияСвойств(ТокеныСервисов, ДанныеУчастника);
		
		Если ТокеныСервисов.consumers <> Неопределено Тогда
			ПараметрыАутентификации.Вставить("consumers", ТокеныСервисов.consumers);
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеХранилища.Вставить(ИдентификаторУчастника, ПараметрыАутентификации);
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
		НастройкаПодключения,
		ДанныеХранилища);
	
КонецПроцедуры

// Производит получение данных аутентификации
// из безопасного хранилища.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения
//    к Системе быстрых платежей;
//  ИдентификаторУчастника - Строка - идентификатор участника СБП.
//  НастройкиУчастника - Структура - см. НастройкиУчастникаСБП.
//
// Возвращаемое значение:
//  Структура - данные аутентификации.
//
Функция ЗначениеНастроекАутентификации(
		НастройкаПодключения,
		ИдентификаторУчастника,
		НастройкиУчастника)
	
	Результат = Новый Соответствие;
	
	ПараметрыАутентификации = ПрочитатьПараметрыАутентификацииУчастника(НастройкаПодключения, ИдентификаторУчастника);
	
	// При переходе в облако или в АРМ данные из безопасного хранилища не мигрируют.
	// Пользователь должен самостоятельно заполнить информацию в настройках.
	Если НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BASIC
		Или НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT Тогда
		Если ЗначениеЗаполнено(ПараметрыАутентификации) Тогда
			Результат.Вставить("Логин", ПараметрыАутентификации.login);
			Результат.Вставить("Пароль", СтрокаСекретныхДанныхПоУмолчанию()); // Забивание данных *.
			Результат.Вставить("ИдентификаторМерчанта", ПараметрыАутентификации.merchantId);
		Иначе
			Результат.Вставить("Логин", "");
			Результат.Вставить("Пароль", "");
			Результат.Вставить("ИдентификаторМерчанта", "");
		КонецЕсли;
	ИначеЕсли НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA1
		Или НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256 Тогда
		Если ЗначениеЗаполнено(ПараметрыАутентификации) Тогда
			Результат.Вставить("Ключ", СтрокаСекретныхДанныхПоУмолчанию()); // Забивание данных *.
			Результат.Вставить("ИдентификаторМерчанта", ПараметрыАутентификации.merchantId);
		Иначе
			Результат.Вставить("Ключ", "");
			Результат.Вставить("ИдентификаторМерчанта", "");
		КонецЕсли;
	ИначеЕсли НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER Тогда
		Если ЗначениеЗаполнено(ПараметрыАутентификации) Тогда
			Результат.Вставить("Токен", СтрокаСекретныхДанныхПоУмолчанию()); // Забивание данных *.
			Результат.Вставить("ИдентификаторМерчанта", ПараметрыАутентификации.merchantId);
		Иначе
			Результат.Вставить("Токен", "");
			Результат.Вставить("ИдентификаторМерчанта", "");
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип авторизации участника СБП.'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив участников СБП, которые поддерживают заданную функциональность.
//
// Параметры:
//  КлючиПоиска  - Структура, ФиксированнаяСтруктура, Соответствие, ФиксированноеСоответствие - Ключи поиска
//   по которым необходимо отобрать участников СБП, поиск работает по логическому "И".
//    * Ключ - Строка - имя реквизита настройки участников СБП.
//    * Значение - Произвольный - значение отбора.
//
// Возвращаемое значение:
//  Массив из Строка - список участников СБП с поддержкой функциональности.
//
Функция УчастникиСБППоНастройкам(КлючиПоиска) Экспорт
	
	УчастникиСБП = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиУчастниковСБП.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
		|ГДЕ
		|	&Условия";
	
	Если КлючиПоиска.Количество()>0 Тогда
		
		МассивУсловий = Новый Массив;
		Для Каждого КлючПоиска Из КлючиПоиска Цикл
			
			МассивУсловий.Добавить("НастройкиУчастниковСБП." + КлючПоиска.Ключ + " = &" +КлючПоиска.Ключ);
			Запрос.УстановитьПараметр(КлючПоиска.Ключ, КлючПоиска.Значение);
			
		КонецЦикла;
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"&Условия",
			СтрСоединить(МассивУсловий, Символы.ПС + "И" +" "));
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условия", "ИСТИНА");
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		УчастникиСБП.Добавить(ВыборкаДетальныеЗаписи.Идентификатор);
	КонецЦикла;
	
	Возврат УчастникиСБП;
	
КонецФункции

// Возвращает настройки участника СБП.
//
// Параметры:
//  ИдентификаторУчастника - Строка - идентификатор участника СБП;
//
// Возвращаемое значение:
//  Структура, Неопределено - данные настроек участника СБП:
//    * Наименование - Строка - наименование участника СБП;
//    * ИНН - Строка - ИНН участника СБП;
//    * ПлатежныйАгрегатор - Булево - признак того, что данный участник является платежным агрегатором;
//    * КассовыеСсылки - Булево - признак поддержки участником кассовых ссылок;
//    * СверкаВзаиморасчетовc2b - Булево - признак поддержки участником сверки взаиморасчетов;
//    * ПодключениеКассовойСсылкиc2b - Булево - определяет доступность подключения кассовой ссылки;
//    * ПеренаправлениеПоСсылке - Булево - определяет доступность использования перенаправления по ссылке
//    * ВидПоступленияb2b - Строка - идентификатор вида поступления.
//
Функция НастройкиУчастникаСБП(ИдентификаторУчастника) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиУчастниковСБП.Наименование КАК Наименование,
		|	НастройкиУчастниковСБП.КассовыеСсылкиc2b КАК КассовыеСсылкиc2b,
		|	НастройкиУчастниковСБП.ИНН КАК ИНН,
		|	НастройкиУчастниковСБП.ПлатежныйАгрегатор КАК ПлатежныйАгрегатор,
		|	НастройкиУчастниковСБП.СверкаВзаиморасчетовc2b КАК СверкаВзаиморасчетовc2b,
		|	НастройкиУчастниковСБП.ПодключениеКассовойСсылкиc2b КАК ПодключениеКассовойСсылкиc2b,
		|	НастройкиУчастниковСБП.ЗапрещенВыборУчастникаc2b КАК ЗапрещенВыборУчастникаc2b,
		|	НастройкиУчастниковСБП.ПеренаправлениеПоСсылке КАК ПеренаправлениеПоСсылке,
		|	НастройкиУчастниковСБП.ВидПоступленияb2b КАК ВидПоступленияb2b
		|ИЗ
		|	РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
		|ГДЕ
		|	НастройкиУчастниковСБП.Идентификатор = &ИдентификаторУчастника";
	
	Запрос.УстановитьПараметр("ИдентификаторУчастника", ИдентификаторУчастника);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Настройки = Новый Структура;
	Настройки.Вставить("Наименование", ВыборкаДетальныеЗаписи.Наименование);
	Настройки.Вставить("КассовыеСсылкиc2b", ВыборкаДетальныеЗаписи.КассовыеСсылкиc2b);
	Настройки.Вставить("ИНН", ВыборкаДетальныеЗаписи.ИНН);
	Настройки.Вставить("ПлатежныйАгрегатор", ВыборкаДетальныеЗаписи.ПлатежныйАгрегатор);
	Настройки.Вставить("СверкаВзаиморасчетовc2b", ВыборкаДетальныеЗаписи.СверкаВзаиморасчетовc2b);
	Настройки.Вставить("ПодключениеКассовойСсылкиc2b", ВыборкаДетальныеЗаписи.ПодключениеКассовойСсылкиc2b);
	Настройки.Вставить("ЗапрещенВыборУчастникаc2b", ВыборкаДетальныеЗаписи.ЗапрещенВыборУчастникаc2b);
	Настройки.Вставить("ПеренаправлениеПоСсылке", ВыборкаДетальныеЗаписи.ПеренаправлениеПоСсылке);
	Настройки.Вставить("ВидПоступленияb2b", ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ВидПоступленияb2b),
		ВыборкаДетальныеЗаписи.ВидПоступленияb2b,
		Неопределено));
	
	Возврат Настройки;
	
КонецФункции

// Возвращает настройки авторизации участника СБП.
//
// Параметры:
//  ИдентификаторУчастника - Строка - идентификатор участника СБП;
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей.
//
// Возвращаемое значение:
//  Структура, Неопределено - данные настроек участника СБП:
//    * Наименование - Строка - наименование участника СБП;
//    * ТипАутентификации - ПеречислениеСсылка.ТипыАутентификацииСБП - способ авторизации в сервисе участника СБП;
//
Функция НастройкиАвторизацииУчастникаСБП(
		ИдентификаторУчастника,
		ВариантНастройки) Экспорт
	
	Настройки = Неопределено;
	СистемаБыстрыхПлатежейСобытия.ПриОпределенииНастроекАвторизации(
		ИдентификаторУчастника,
		ВариантНастройки,
		Настройки);
	
	Возврат Настройки;
	
КонецФункции

// Определяет участника СБП по БИК банка.
//
// Параметры:
//  БИК - Строка - идентификатор банка;
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей.
//
// Возвращаемое значение:
//  Строка, Неопределено - интегрированный участник СБП.
//
Функция ИнтегрированныйУчастникСБППоБИК(
		БИК,
		ВариантНастройки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БИКУчастниковСБП.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.БИКУчастниковСБП КАК БИКУчастниковСБП
		|ГДЕ
		|	БИКУчастниковСБП.БИК = &БИК";
	
	Запрос.УстановитьПараметр("БИК", БИК);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	ИдентификаторУчастника = ВыборкаДетальныеЗаписи.Идентификатор;
	Если Не ЗначениеЗаполнено(ИдентификаторУчастника)
			Или Не ЗначениеЗаполнено(ВариантНастройки) Тогда
		Возврат ИдентификаторУчастника;
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиУчастниковСБП.%1 КАК ТипАутентификации
		|ИЗ
		| РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
		|ГДЕ
		|	НастройкиУчастниковСБП.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторУчастника);
	
	ИмяПоля = "";
	СистемаБыстрыхПлатежейСобытия.ПриОпределенииИмениПоляТипаАутентификации(
		ВариантНастройки,
		ИмяПоля);
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ИмяПоля);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ТипАутентификации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИдентификаторУчастника;
	
КонецФункции

// Возвращает перечень БИК участника СБП.
//
// Параметры:
//  Идентификатор - Строка - идентификатор участника СБП.
//
// Возвращаемое значение:
//  Массив из Строка - перечень БИК участника СБП.
//
Функция БИКУчастникаСБП(Идентификатор)
	
	БИКУчастника = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БИКУчастниковСБП.БИК КАК БИК
	|ИЗ
	|	РегистрСведений.БИКУчастниковСБП КАК БИКУчастниковСБП
	|ГДЕ
	|	БИКУчастниковСБП.Идентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		БИКУчастника.Добавить(Выборка.БИК);
	КонецЦикла;
	
	Возврат БИКУчастника;
	
КонецФункции

// Обновляет настройки участников СБП.
//
// Параметры:
//  Настройки - Массив из Структура - см. ОперацияНастройкиУчастниковСБП.
//
Процедура ЗаписатьНастройкиУчастниковСБП(Настройки)
	
	Если Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписейНастройкиУчастниковСБП = РегистрыСведений.НастройкиУчастниковСБП.СоздатьНаборЗаписей();
	НаборЗаписейБИК = РегистрыСведений.БИКУчастниковСБП.СоздатьНаборЗаписей();
	Для Каждого Настройка Из Настройки Цикл
		
		Запись = НаборЗаписейНастройкиУчастниковСБП.Добавить();
		Запись.Идентификатор = Настройка.memberId;
		Запись.Наименование = Настройка.memberName;
		Запись.ИНН = Настройка.inn;
		Запись.ПлатежныйАгрегатор = Настройка.paymentAggregator;
		Запись.КассовыеСсылкиc2b = Настройка.c2bCashRegisterPaymentSupported;
		Запись.СверкаВзаиморасчетовc2b = Настройка.reconciliationOfSettlementsSupported;
		Запись.ПодключениеКассовойСсылкиc2b = Настройка.c2bCashRegisterReservedQrIdSupported;
		Запись.ЗапрещенВыборУчастникаc2b = Настройка.b2cDisableChoosingOfRefundDestinationBank;
		Запись.ПеренаправлениеПоСсылке = Настройка.redirectUrlSupported;
		Запись.ТипАутентификацииc2b = ТипАутентификации(Настройка.authorizationType);
		Запись.ТипАутентификацииb2b = ТипАутентификации(Настройка.b2bAuthorizationType);
		Запись.ВидПоступленияb2b = Настройка.b2bTypeOfReceipt;
		
		Если Настройка.biks <> Неопределено Тогда
			Для Каждого БИК Из Настройка.biks Цикл
				ЗаписьБИК = НаборЗаписейБИК.Добавить();
				ЗаписьБИК.БИК = БИК;
				ЗаписьБИК.Идентификатор = Настройка.memberId;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписейНастройкиУчастниковСБП.Записать();
		НаборЗаписейБИК.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьИнформациюВЖурналРегистрации(
			ИнформацияОбОшибке,
			Истина);
		ВызватьИсключение ИнформацияОбОшибке;
	КонецПопытки;
	
КонецПроцедуры

// Определяет тип аутентификации по значению переданному из сервиса.
//
// Параметры:
//  Значение - Строка - тип аутентификации переданный из сервиса.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыАутентификацииСБП, Неопределено - тип аутентификации.
//
Функция ТипАутентификации(Значение)
	
	Если Значение = "BASIC" Тогда
		Возврат Перечисления.ТипыАутентификацииСБП.BASIC;
	ИначеЕсли Значение = "BEARER" Тогда
		Возврат Перечисления.ТипыАутентификацииСБП.BEARER;
	ИначеЕсли Значение = "RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT" Тогда
		Возврат Перечисления.ТипыАутентификацииСБП.RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT;
	ИначеЕсли Значение = "HMAC_SHA256" Тогда
		Возврат Перечисления.ТипыАутентификацииСБП.HMAC_SHA256;
	ИначеЕсли Значение = "HMAC_SHA1" Тогда
		Возврат Перечисления.ТипыАутентификацииСБП.HMAC_SHA1;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаПлатежнойСсылки

// Определяет объекты, которые могут выступать в качестве оснований платежа через СБП.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, по данным которого
//    необходимо проверить доступность настройки подключения СБП.
//
// Возвращаемое значение:
//  Структура - результат определения доступности СБП:
//    * ИнтеграцияДоступна - Булево - признак доступности подключения СБП.
//    * СообщениеОбОшибке - Строка - текст сообщения ошибки для пользователя.
//
Функция ПриОпределенииДоступностиПодключенияПоДокументуОперации(ДокументОперации) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИнтеграцияДоступна", Истина);
	Результат.Вставить("СообщениеОбОшибке", "");
	
	ИнтеграцияПодсистемБИП.ПриОпределенииДоступностиПодключенияПоДокументуОперации(
		ДокументОперации,
		Результат);
	СистемаБыстрыхПлатежейПереопределяемый.ПриОпределенииДоступностиПодключенияПоДокументуОперации(
		ДокументОперации,
		Результат);
	
	Возврат Результат;
	
КонецФункции

// Определяет объекты, которые могут выступать в качестве оснований платежа через СБП.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, по данным которого
//    необходимо получить перечень возможных настроек подключения.
//
// Возвращаемое значение:
// Структура:
//    * НастройкиПодключения - Массив Из СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//      настройка подключения к СБП.
//    * НастройкиПодключения - Структура - дополнительные настройки подключения СБП
//      ** БИК - Строка, Неопределено - идентификатор банка. Используется для автоматического
//         выбора участника СБП.
//      ** ДополнительныеПараметры - Структура, Неопределено - дополнительные параметры подключения.
//         Значение будет передано в переопределяемые методы:
//           - СистемаБыстрыхПлатежейПереопределяемый.ПриНастройкеЭлементовФормыПодключения;
//           - СистемаБыстрыхПлатежейПереопределяемый.ПриЗаполненииФормыНастройкиПодключения.
//      ** ОтборУчастников - Строка, Неопределено - Параметры отбора участников СБП.
//         Допустимые значения - "Банки", "ПлатежныеАгрегаторы", "КассовыеСсылки", Неопределено.
//         Неопределено по умолчанию.
//      ** МаксимальнаяСуммаОплаты - Строка, Неопределено - Параметры отбора участников СБП.
//         Допустимые значения - "Банки", "ПлатежныеАгрегаторы", "КассовыеСсылки", Неопределено.
//         Неопределено по умолчанию.
//    * ТекстВопроса - Строка, Неопределено - текст вопроса, который будет выведен пользователю
//         перед началом формирования платежной ссылки или началом подключения к СБП.
//         Вопрос не выводится, если параметр имеет значение Неопределено;
//     * НастройкаНайдена - Булево - определяет доступность формирования ссылки;
//     * ВариантНастройки - Строка, Неопределено - вариант настройки подключения к Системе быстрых платежей
//       для случаев когда требуется подключение настройки.
//       Возможные значения:
//         c2b - подключение приема оплат от физических лиц;
//         b2b - подключение приема оплат от юридических лиц.
//
Функция ПриОпределенииПараметровПодключенияДокументаОперации(ДокументОперации) Экспорт
	
	ДополнительныеНастройки = Новый Структура;
	ДополнительныеНастройки.Вставить("БИК", Неопределено);
	ДополнительныеНастройки.Вставить("ОтборУчастников", Неопределено);
	ДополнительныеНастройки.Вставить("ДополнительныеПараметры", Неопределено);
	ДополнительныеНастройки.Вставить("МаксимальнаяСуммаОплаты", 0);
	ДополнительныеНастройки.Вставить("ВариантНастройки", Неопределено);
	
	ПараметрыВопроса = Новый Структура;
	ПараметрыВопроса.Вставить("ТекстВопроса", Неопределено);
	
	НастройкиПодключения = Новый Структура;
	НастройкиПодключения.Вставить("c2b", Новый Массив);
	НастройкиПодключения.Вставить("b2b", Новый Массив);
	
	Результат = Новый Структура;
	Результат.Вставить("НастройкиПодключения", НастройкиПодключения);
	Результат.Вставить("ДополнительныеНастройки", ДополнительныеНастройки);
	Результат.Вставить("ПараметрыВопроса", ПараметрыВопроса);
	Результат.Вставить("НастройкаНайдена", Ложь);
	
	ИнтеграцияПодсистемБИП.ПриОпределенииПараметровПодключенияДокументаОперации(
		ДокументОперации,
		Результат.НастройкиПодключения,
		Результат.ДополнительныеНастройки,
		Результат.ПараметрыВопроса);
	СистемаБыстрыхПлатежейПереопределяемый.ПриОпределенииПараметровПодключенияДокументаОперации(
		ДокументОперации,
		Результат.НастройкиПодключения,
		Результат.ДополнительныеНастройки,
		Результат.ПараметрыВопроса);
	
	Результат.НастройкаНайдена = (Результат.НастройкиПодключения.c2b.Количество() <> 0
		Или Результат.НастройкиПодключения.b2b.Количество());
	
	Возврат Результат;
	
КонецФункции

// Возвращает полные имена объектов метаданных, которые могут выступать
// в качестве оснований платежа через СБП.
//
// Возвращаемое значение:
//  Массив Из Строка - имена объектов метаданных оснований платежа.
//
Функция ИменаДокументовСКомандой() Экспорт
	
	ИменаОбъектов = Новый Массив;
	ИнтеграцияПодсистемБИП.ПриОпределенииОбъектовСКомандамиСБП(
		ИменаОбъектов);
	СистемаБыстрыхПлатежейПереопределяемый.ПриОпределенииОбъектовСКомандамиСБП(
		ИменаОбъектов);
	
	Возврат ИменаОбъектов;
	
КонецФункции

// Создает новый заказ на оплату и получает
// идентификатор оплаты для формирования QR-кода.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    оплату в информационной базе;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операции.
//  ДанныеЧастичнойОплаты - Структура - описание данных частичной оплаты.
//
// Возвращаемое значение:
//  Структура - результат создания динамической ссылки в Системе быстрых платежей:
//    * ПлатежнаяСсылка - Строка - идентификатор, по которому выполняется оплата;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "УжеОплачен" - документ уже оплачен;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к участнику СБП;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ДинамическаяСсылкаЧастичнойОплаты(
		НастройкаПодключения,
		ДанныеЧастичнойОплаты) Экспорт
	
	РезультатОперации = НовыйРезультатПлатежнаяСсылка();
	
	ЗаписатьДокумент = Ложь;
	ПлатежнаяСсылкаСБП = Неопределено;
	Если Не ЗначениеЗаполнено(ДанныеЧастичнойОплаты.ПлатежнаяСсылкаСБП) Тогда
		ДанныеДокумента = Документы.ПлатежнаяСсылкаСБП.НовыйДокументПлатежнаяСсылка(
			ДанныеЧастичнойОплаты.ОснованиеПлатежа,
			ДанныеЧастичнойОплаты.СуммаОплаты,
			ДанныеЧастичнойОплаты.СуммаНДС,
			ДанныеЧастичнойОплаты.ОблагаетсяНДС);
		ДанныеЧастичнойОплаты.Вставить("ПлатежнаяСсылкаСБП", ДанныеДокумента.НовыйПлатежнаяСсылкаСБП);
		ДанныеЧастичнойОплаты.Вставить("ДатаОплаты", ДанныеДокумента.ПлатежнаяСсылкаСБП.Дата);
		ЗаписатьДокумент = Истина;
		ПлатежнаяСсылкаСБП = ДанныеДокумента.НовыйПлатежнаяСсылкаСБП;
	Иначе
		ПлатежнаяСсылкаСБП = ДанныеЧастичнойОплаты.ПлатежнаяСсылкаСБП;
	КонецЕсли;
	
	СистемаБыстрыхПлатежейСобытия.ПриФормированииДинамическойСсылки(
		ПлатежнаяСсылкаСБП,
		НастройкаПодключения,
		Неопределено,
		Истина,
		ДанныеЧастичнойОплаты,
		РезультатОперации);
	
	Если Не ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Если ЗаписатьДокумент Тогда
			ДанныеДокумента.ПлатежнаяСсылкаСБП.Записать();
		КонецЕсли;
		РезультатОперации.ПлатежнаяСсылкаСБП = ПлатежнаяСсылкаСБП;
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Создает новый заказ на оплату и получает
// идентификатор оплаты для формирования QR-кода.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    оплату в информационной базе;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операции.
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные настройки формирования
//    заказа на оплату.
//
// Возвращаемое значение:
//  Структура - результат создания динамической ссылки в Системе быстрых платежей:
//    * ПлатежнаяСсылка - Строка - идентификатор, по которому выполняется оплата;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "УжеОплачен" - документ уже оплачен;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к участнику СБП;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ДинамическаяСсылка(
		ДокументОперации,
		НастройкаПодключения,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатОперации = НовыйРезультатПлатежнаяСсылка();
	СистемаБыстрыхПлатежейСобытия.ПриФормированииДинамическойСсылки(
		ДокументОперации,
		НастройкаПодключения,
		ДополнительныеПараметры,
		Ложь,
		Неопределено,
		РезультатОперации);
	
	Возврат РезультатОперации;
	
КонецФункции

// Определяет статусы операций по переданному списку.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения оплаты;
//  Операции - Массив из Структура - оплаты для которых необходимо определить статус.
//
// Возвращаемое значение:
//  Массив из Структура - результат получения статуса.
//
Функция АктуализироватьСтатусыОплат(НастройкаПодключения, Операции) Экспорт
	
	РезультатыОпераций = Новый Массив;
	
	Для Каждого Операция Из Операции Цикл
		РезультатыОпераций.Добавить(
			АктуализироватьСтатусОплаты(
				Операция.ОснованиеПлатежа,
				НастройкаПодключения,
				Операция.ПараметрыОперации,
				Операция.ДанныеЧастичнойОплаты));
	КонецЦикла;
		
	Возврат РезультатыОпераций;
	
КонецФункции

// Выполняет актуализацию статуса оплаты по ранее
// сформированному идентификатору оплаты (QR-коду).
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    продажу в информационной базе;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения оплаты;
//  ПараметрыОперации - Структура - дополнительные данные по оплате:
//    * ДатаОперации - Дата - фактическая дата оплаты в UTC;
//    * СуммаОперации - Число - фактическая суммы операции по документу;
//    * ИдентификаторОперации - Строка - ключ контроля загрузки;
//  ДанныеЧастичнойОплаты - Структура - параметры частичной оплаты.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в Системе быстрых платежей:
//    * СтатусОперации - Строка - текущее состояние операции оплаты. Для проверки статуса
//      операции, необходимо функции программного интерфейса общего модуля
//      СистемаБыстрыхПлатежейКлиентСервер. Возможные значения:
//        - "Выполняется" - подтверждение оплаты не получено;
//        - "Отменена" - оплата по ранее сформированному QR-коду невозможна;
//        - "Выполнена" - участник СБП подтвердил оплату;
//        - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки;
//    * ПараметрыОперации - Структура - дополнительные данные по оплате:
//        ** ПлатежнаяСсылка- Строка - идентификатор, по которому выполняется оплата;
//        ** ДатаОперации - Дата - фактическая дата оплаты в UTC;
//        ** Идентификатор - Строка - идентификатор операции в Системе быстрых платежей;
//        ** НазначениеПлатежа - Строка - информация о платеже, которая будет отображена пользователю
//             в момент сканирования QR-кода в мобильном приложении;
//        ** СтатусОперации - Строка - текущий статус операции;
//        ** СуммаОперации - Число - фактическая суммы оплаты по документу;
//        ** ИдентификаторОплаты - Строка - ключ контроля загрузки;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - оплата успешно проведена;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к сервису участника СБП;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//        обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция АктуализироватьСтатусОплаты(
		ДокументОплаты,
		НастройкаПодключения,
		ПараметрыОперации,
		ДанныеЧастичнойОплаты) Экспорт
	
	РезультатОперации = НовыйРезультатОперации();
	РезультатОперации.Вставить("НеобходимоАктуализировать", Ложь);
	РезультатОперации.Вставить("СуммаОплаты", 0);
	
	СистемаБыстрыхПлатежейСобытия.ПриАктуализацииСтатусаОплаты(
		ДокументОплаты,
		НастройкаПодключения,
		ПараметрыОперации,
		ДанныеЧастичнойОплаты,
		РезультатОперации);
	
	Возврат РезультатОперации;
	
КонецФункции

// Сохраняет настройки отображения команд.
//
// Параметры:
//  Настройки - Соответствие - настройки отображения команд в объектах.
//
Процедура УстановитьНастройкиОтображенияКоманд(Настройки) Экспорт
	
	Константы.НастройкиОтображенияКомандСБП.Установить(
		Новый ХранилищеЗначения(
			Новый ФиксированноеСоответствие(Настройки)));
	
КонецПроцедуры

// Получает настройки отображения команд.
//
// Возвращаемое значение:
//  Соответствие - настройки отображения команд в объектах.
//
Функция НастройкиОтображенияКоманд() Экспорт
	
	Возврат Константы.НастройкиОтображенияКомандСБП.Получить().Получить();
	
КонецФункции

// Определяет доступность команды СБП в объекте.
//
// Параметры:
//  ИмяОбъекта - Строка - идентификатор объекта;
//  Настройки - Соответствие - настройки отображения команд в объектах.
//
// Возвращаемое значение:
//  Булево - признак доступности команды в объекте.
//
Функция КомандаСБПИспользуется(ИмяОбъекта, Настройки) Экспорт
	
	Используется = Истина;
	Если Настройки <> Неопределено И Настройки.Получить(ИмяОбъекта) <> Неопределено Тогда
		Используется = Настройки.Получить(ИмяОбъекта);
	КонецЕсли;
	
	Возврат Используется;
	
КонецФункции

#КонецОбласти

#Область ПрикладныеОперации

// См. СистемаБыстрыхПлатежей.СтатусыОпераций.
//
Функция СтатусыОпераций() Экспорт
	
	ОбработанныеОперации = Новый Массив;
	СистемаБыстрыхПлатежейСобытия.ПриЗагрузкеСтатусовОпераций(
		ОбработанныеОперации);
	
	Возврат ОбработанныеОперации;
	
КонецФункции

#КонецОбласти

#Область НастройкиШаблоновСообщений

// Возвращает соответствие, содержащее сохраненные предопределенные шаблоны сообщений подсистемы по типу отправки.
//
// Возвращаемое значение:
//  Структура - шаблоны сообщений подсистем:
//    c2b - Соответствие - определения шаблонов для приема оплат от физических лиц:
//      * Ключ - Строка - признак принадлежности шаблонов для отправки посредством письма или СМС.
//      * Значение - Соответствие - настройки выполнения запросов к платежным системам:
//         ** Ключ - Строка - содержит полное имя типа назначения шаблона;
//         ** Значение - УникальныйИдентификатор - представление ссылки на элемент справочника ШаблоныСообщений;
//    b2b - Соответствие - определения шаблонов для приема оплат от юридических лиц:
//      * Ключ - Строка - признак принадлежности шаблонов для отправки посредством письма или СМС.
//      * Значение - Соответствие - настройки выполнения запросов к платежным системам:
//         ** Ключ - Строка - содержит полное имя типа назначения шаблона;
//         ** Значение - УникальныйИдентификатор - представление ссылки на элемент справочника ШаблоныСообщений.
//
Функция ШаблоныСообщенийДокументовОперации() Экспорт
	
	Шаблоны = Константы.ПредопределенныеШаблоныСообщенийСБП.Получить().Получить();
	
	Если Шаблоны = Неопределено Тогда
		Шаблоны = Новый Структура;
		СистемаБыстрыхПлатежейСобытия.ПриФормированииОписанияШаблонов(
			Шаблоны);
	ИначеЕсли ТипЗнч(Шаблоны) = Тип("Соответствие") Тогда
		ПреобразоватьШаблоныСообщений();
		Шаблоны = Константы.ПредопределенныеШаблоныСообщенийСБП.Получить().Получить();
	КонецЕсли;
	
	Возврат Шаблоны;
	
КонецФункции

// Записывает соответствие предопределенных шаблонов подсистемы в соответствующую константу.
//
// Параметры:
//  Шаблоны - Соответствие - описание предопределенных шаблонов подсистемы
//    * Ключ - Строка - признак принадлежности шаблонов для отправки посредством письма или СМС.
//    * Значение - Соответствие - настройки выполнения запросов к платежным системам:
//       ** Ключ    - Строка - содержит полное имя типа назначения шаблона;
//       ** Значение - УникальныйИдентификатор - представление ссылки на элемент справочника ШаблоныСообщений.
//
Процедура УстановитьСоответствиеШаблоновДокументамОперации(
		Шаблоны) Экспорт
	
	Константы.ПредопределенныеШаблоныСообщенийСБП.Установить(
		Новый ХранилищеЗначения(Шаблоны));
	
КонецПроцедуры

// Формирует структуру с настройками создания шаблонов сообщений.
//
// Возвращаемое значение:
// Структура - настройки шаблонов для различных сценариев оплаты СБП:
//    * СоздатьШаблоныПисем - Булево - признак создания шаблонов писем.
//    * СоздатьШаблоныSMS - Булево - признак создания шаблонов SMS.
//
Функция НовыйНастройкаСозданияШаблонов(
		СоздатьШаблоныПисем,
		СоздатьШаблоныSMS) Экспорт
	
	Настройка = Новый Структура;
	Настройка.Вставить("СоздатьШаблоныПисем", СоздатьШаблоныПисем);
	Настройка.Вставить("СоздатьШаблоныSMS", СоздатьШаблоныSMS);
	
	Возврат Настройка;
	
КонецФункции

// Формирует пустую структуру с настройками шаблонов сообщений.
//
// Возвращаемое значение:
// Структура, Неопределено - настройки шаблонов для различных сценариев оплаты СБП:
//    * c2b - Массив из Структура - Массив структур данных, описывающих предопределенные шаблоны сообщения
//     для приема оплат от физических лиц.
//    * b2b - Массив из Структура - Массив структур данных, описывающих предопределенные шаблоны сообщения
//     для приема оплат от физических лиц.
//
Функция НовыйНастройкиШаблоновСообщений() Экспорт
	
	НастройкиШаблонов = Неопределено;
	СистемаБыстрыхПлатежейСобытия.ПриФормированииНастроекШаблоновСообщений(
		НастройкиШаблонов);
	
	Возврат НастройкиШаблонов;
	
КонецФункции

// Создает предопределенные шаблоны сообщений после проверки существования соответствующих подсистем.
//
// Параметры:
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей.
//  НастройкиШаблонов - Структура - см. НовыйНастройкаСозданияШаблонов.
//
// Возвращаемое значение:
//  Массив из Структура - Массив созданных предопределенных шаблонов,
//    элементами массива являются ссылки на справочник ШаблоныСообщений.
//
Функция СоздатьПредопределенныеШаблоныСообщений(
		ВариантНастройки,
		НастройкиШаблонов) Экспорт
	
	СозданныеШаблоны = Неопределено;
	СистемаБыстрыхПлатежейСобытия.ПриСозданииШаблоновСообщений(
		ВариантНастройки,
		СозданныеШаблоны,
		НастройкиШаблонов);
	
	Возврат СозданныеШаблоны;
	
КонецФункции

// Возвращает признак создания всех описанных шаблонов.
//
// Параметры:
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей.
//
// Возвращаемое значение:
//  Булево - Истина, если все описанные шаблоны созданы.
//
Функция ШаблоныСозданы(ВариантНастройки) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВсеШаблоны", Истина);
	Результат.Вставить("Письмо", Истина);
	Результат.Вставить("SMS", Истина);
	Результат.Вставить("Шаблоны", Новый Массив);
	
	ПодсистемаСМС= ОбщегоНазначения.ПодсистемаСуществует(
		"СтандартныеПодсистемы.ОтправкаSMS");
	ПодсистемаПочта = ОбщегоНазначения.ПодсистемаСуществует(
		"СтандартныеПодсистемы.РаботаСПочтовымиСообщениями");
	
	ШаблоныДокументов = Неопределено;
	ПредопределенныеШаблоны = Неопределено;
	
	СистемаБыстрыхПлатежейСобытия.ПриОпределенииШаблоновСообщений(
		ВариантНастройки,
		ПредопределенныеШаблоны,
		ШаблоныДокументов);
	
	Если ШаблоныДокументов = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось определить шаблоны сообщений для документов, проверьте внедрение подсистемы.'");
	КонецЕсли;
	
	Если ПредопределенныеШаблоны = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось определить стандартные шаблоны сообщений, проверьте внедрение подсистемы.'");
	КонецЕсли;
	
	Для Каждого Шаблон Из ПредопределенныеШаблоны Цикл 
		
		ДанныеШаблона = Новый Структура;
		ДанныеШаблона.Вставить("ПолноеИмяТипаНазначения", Шаблон.ПолноеИмяТипаНазначения);
		ДанныеШаблона.Вставить("ТипШаблона", Шаблон.ТипШаблона);
		
		СозданныйШаблон = НайтиПредопределенныйШаблонСообщений(
			ДанныеШаблона,
			ШаблоныДокументов);
		Если СозданныйШаблон.Пустая() Тогда
			Если (Шаблон.ТипШаблона = "SMS" И ПодсистемаСМС)
				Или (Шаблон.ТипШаблона = "Письмо" И ПодсистемаПочта) Тогда
				Результат.ВсеШаблоны = Ложь;
			КонецЕсли;
			Результат[Шаблон.ТипШаблона] = Ложь;
		Иначе
			Результат.Шаблоны.Добавить(СозданныйШаблон);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает ссылку на элемент справочника ШаблоныСообщений по переданным параметрам.
//
// Параметры:
//  Шаблон - Структура - описание искомого шаблона:
//    * ПолноеИмяТипаНазначения - Строка - содержит полное имя типа назначения шаблона;
//    * ТипШаблона - Строка - признак принадлежности шаблонов для отправки посредством письма или СМС.
//       ** Ключ    - Строка - содержит полное имя типа назначения шаблона;
//  ШаблоныДокументамОперации - Соответствие - описание предопределенных шаблонов подсистемы
//    * Ключ - Строка - признак принадлежности шаблонов для отправки посредством письма или СМС.
//    * Значение - Соответствие - настройки выполнения запросов к платежным системам:
//       ** Ключ    - Строка - содержит полное имя типа назначения шаблона;
//       ** Значение - УникальныйИдентификатор - представление ссылки на элемент справочника ШаблоныСообщений.
//
// Возвращаемое значение:
//  СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - результат поиска, 
//    пустая ссылка, если по данной структуре шаблон не найден.
//
Функция НайтиПредопределенныйШаблонСообщений(
		Шаблон,
		ШаблоныДокументамОперации) Экспорт
	
	МенеджерШаблоновСообщений = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
		"Справочник.ШаблоныСообщений");
	
	ШаблонСсылка = МенеджерШаблоновСообщений.ПустаяСсылка();
	
	ИдентификаторШаблона = ШаблоныДокументамОперации[Шаблон.ТипШаблона]
		.Получить(Шаблон.ПолноеИмяТипаНазначения);
		
	Если Не ТипЗнч(ИдентификаторШаблона) = Тип("УникальныйИдентификатор") Тогда
		Возврат ШаблонСсылка;
	КонецЕсли;
	
	НайденныйШаблон = МенеджерШаблоновСообщений.ПолучитьСсылку(ИдентификаторШаблона);
	Если НайденныйШаблон.Пустая() Тогда
		Возврат ШаблонСсылка;
	КонецЕсли;
	
	ДанныеШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НайденныйШаблон,
		"ПометкаУдаления, ПолноеИмяТипаПараметраВводаНаОсновании, ПредназначенДляЭлектронныхПисем");
	
	Если ДанныеШаблона.ПометкаУдаления = Неопределено Тогда
		Возврат ШаблонСсылка;
	ИначеЕсли ДанныеШаблона.ПометкаУдаления Тогда 
		Возврат ШаблонСсылка;
	ИначеЕсли Не ДанныеШаблона.ПолноеИмяТипаПараметраВводаНаОсновании = Шаблон.ПолноеИмяТипаНазначения Тогда
		Возврат ШаблонСсылка;
	КонецЕсли;
	
	ШаблонСсылка = НайденныйШаблон;
	
	Возврат ШаблонСсылка;
	
КонецФункции

// См. СистемаБыстрыхПлатежей.ШаблоныСообщенийПоТипам.
//
Функция ШаблоныСообщенийПоТипам() Экспорт
	
	Результат = Новый Структура;
	ШаблоныДокументов = ШаблоныСообщенийДокументовОперации();
	
	Шаблоны = НовыйНастройкиШаблоновСообщений();
	ПриОпределенииПредопределенныхШаблоновСообщений(
		Шаблоны);
	
	Для Каждого ВариантНастройки Из Шаблоны Цикл
		
		ШаблоныЭлектронныхПисем = Новый Массив;
		ШаблоныSMS = Новый Массив;
		
		Для Каждого Шаблон Из ВариантНастройки.Значение Цикл
			
			ДанныеШаблона = Новый Структура;
			ДанныеШаблона.Вставить(
				"ПолноеИмяТипаНазначения",
				Шаблон.ПолноеИмяТипаНазначения);
			ДанныеШаблона.Вставить(
				"ТипШаблона",
				Шаблон.ТипШаблона);
			
			СозданныйШаблон = НайтиПредопределенныйШаблонСообщений(
				ДанныеШаблона,
				ШаблоныДокументов[ВариантНастройки.Ключ]);
			Если СозданныйШаблон.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			Если Шаблон.ТипШаблона = "Письмо" Тогда
				ШаблоныЭлектронныхПисем.Добавить(СозданныйШаблон);
			ИначеЕсли Шаблон.ТипШаблона = "SMS" Тогда
				ШаблоныSMS.Добавить(СозданныйШаблон);
			КонецЕсли;
		КонецЦикла;
		
		ШаблоныВарианта = Новый Структура;
		ШаблоныВарианта.Вставить("Письмо", ШаблоныЭлектронныхПисем);
		ШаблоныВарианта.Вставить("SMS", ШаблоныSMS);
		
		Результат.Вставить(
			ВариантНастройки.Ключ,
			ШаблоныВарианта);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// См. СистемаБыстрыхПлатежейПереопределяемый.ПриОпределенииПредопределенныхШаблоновСообщений
//
Процедура ПриОпределенииПредопределенныхШаблоновСообщений(
		ПредопределенныеШаблоны) Экспорт
	
	ИнтеграцияПодсистемБИП.ПриОпределенииПредопределенныхШаблоновСообщений(
		ПредопределенныеШаблоны);
	СистемаБыстрыхПлатежейПереопределяемый.ПриОпределенииПредопределенныхШаблоновСообщений(
		ПредопределенныеШаблоны);
	
КонецПроцедуры

// Включает функциональные опции необходимые для работы с шаблонами сообщений.
//
Процедура УстановитьИспользованиеШаблоновСообщений() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
		ИнтернетПоддержкаПользователей.УстановитьИспользованиеSMS();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		ИнтернетПоддержкаПользователей.УстановитьИспользованиеЭлектроннойПочты();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
		ИнтернетПоддержкаПользователей.УстановитьОтправкуПисемВФорматеHTML();
	КонецЕсли;
	
	ИнтернетПоддержкаПользователей.УстановитьИспользованиеШаблоновСообщений();
	
КонецПроцедуры

// Проверяет корректность заполнения шаблонов назначений платежей.
//
// Параметры:
//  ШаблоныНазначений - ТаблицаЗначений - см. НовыйШаблоныНазначений.
//
Процедура ПроверитьЗаполнениеШаблоновНазначений(ШаблоныНазначений) Экспорт
	
	Для Каждого ДанныеНазначения Из ШаблоныНазначений Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеНазначения.ОбъектМетаданных) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не указан объект метаданных в шаблоне назначения %1.'"),
				ДанныеНазначения.Наименование);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеНазначения.Идентификатор) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не указан идентификатор в шаблоне назначения %1.'"),
				ДанныеНазначения.Наименование);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеНазначения.Наименование) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не указано наименование в шаблоне назначения %1.'"),
				ДанныеНазначения.ОбъектМетаданных);
		КонецЕсли;
		
		Для Каждого ДанныеПараметра Из ДанныеНазначения.Параметры Цикл
			
			Если Не ЗначениеЗаполнено(ДанныеПараметра.Наименование) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не указано наименование параметра в шаблоне назначения %1.'"),
					ДанныеНазначения.ОбъектМетаданных);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеПараметра.Идентификатор) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не указан идентификатор параметра в шаблоне назначения %1.'"),
					ДанныеНазначения.ОбъектМетаданных);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет структуру хранения данных шаблонов сообщений.
//
Процедура ПреобразоватьШаблоныСообщений()
	
	ДанныеШаблонов = Константы.ПредопределенныеШаблоныСообщенийСБП.Получить().Получить();
	
	Если ТипЗнч(ДанныеШаблонов) = Тип("Соответствие") Тогда
	
		Шаблоныb2b = Новый Соответствие;
		Шаблоныb2b.Вставить("Письмо", Новый Соответствие);
		Шаблоныb2b.Вставить("SMS", Новый Соответствие);
		
		Шаблоны = Новый Структура;
		Шаблоны.Вставить("c2b", ДанныеШаблонов);
		Шаблоны.Вставить("b2b", Шаблоныb2b);
		
		УстановитьСоответствиеШаблоновДокументамОперации(
			Шаблоны);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// См. ШаблоныСообщенийПереопределяемый.ПриПодготовкеШаблонаСообщения.
//
Процедура ПриПодготовкеШаблонаСообщения(
		Реквизиты,
		Вложения,
		НазначениеШаблона,
		ДополнительныеПараметры) Экспорт
	
	Если ПустаяСтрока(НазначениеШаблона) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоДокументОперацииСБП(НазначениеШаблона) Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыОтправкиСообщений = НовыйПараметрыОтправкиСообщений();
	ПриОпределенииПараметровОтправкиСообщений(ПараметрыОтправкиСообщений);
	
	НовыйРеквизит = Реквизиты.Добавить();
	НовыйРеквизит.Имя = "ПредставлениеСсылкиСБП";
	НовыйРеквизит.Представление = НСтр("ru = 'Ссылка для оплаты через СБП'");
	
	НовыйРеквизит = Реквизиты.Добавить();
	НовыйРеквизит.Имя = "СуммаСсылкиСБП";
	НовыйРеквизит.Представление = НСтр("ru = 'Сумма платежной ссылки СБП'");
	
	Если ДополнительныеПараметры.ТипШаблона = "Письмо"
		И ОтправлятьПисьмаВФорматеHTML(ПараметрыОтправкиСообщений) Тогда
		
		НовыйРеквизит = Реквизиты.Добавить();
		НовыйРеквизит.Имя = "ПредставлениеСсылкиСБПQRКод";
		НовыйРеквизит.Представление = НСтр("ru = 'Ссылка для оплаты через СБП (QR-код)'");
		
	КонецЕсли;
	
КонецПроцедуры

// См. ШаблоныСообщенийПереопределяемый.ПриФормированииСообщения.
//
Процедура ПриФормированииСообщения(
		Сообщение,
		НазначениеШаблона,
		ПредметСообщения,
		ПараметрыШаблона) Экспорт
	
	Если ПустаяСтрока(НазначениеШаблона) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоДокументОперацииСБП(НазначениеШаблона) Тогда
		Возврат;
	КонецЕсли;
	
	Если Сообщение.ЗначенияРеквизитов["СуммаСсылкиСБП"] = Неопределено
		И Сообщение.ЗначенияРеквизитов["ПредставлениеСсылкиСБП"] = Неопределено
		И Сообщение.ЗначенияРеквизитов["ПредставлениеСсылкиСБПQRКод"] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСообщения = ОпределитьДанныеЗаполненияШаблона(
		ПредметСообщения,
		Сообщение);
	
	Если Сообщение.ЗначенияРеквизитов["СуммаСсылкиСБП"] <> Неопределено
			И ПараметрыСообщения.СуммаСсылкиСБП <> Неопределено Тогда
		Сообщение.ЗначенияРеквизитов["СуммаСсылкиСБП"] = ПараметрыСообщения.СуммаСсылкиСБП;
	КонецЕсли;
	
	Если ПараметрыСообщения.ПлатежнаяСсылка <> Неопределено Тогда
		ЗаполнитьПредставлениеСсылки(
			Сообщение,
			ПараметрыШаблона,
			ПараметрыСообщения.ПлатежнаяСсылка);
	КонецЕсли;
	
КонецПроцедуры

// Формирует данные для заполнения шаблона сообщения.
//
// Параметры:
//  ПредметСообщения - - ОпределяемыйТип.ДокументОперацииСБП - документ, по данным которого
//    необходимо сформировать сообщение;
//  Сообщение - сообщение для отправки.
//
// Возвращаемое значение:
//  Структура - данные для заполнения.
//
Функция ОпределитьДанныеЗаполненияШаблона(
		ПредметСообщения,
		Сообщение)
	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("ПлатежнаяСсылка", Неопределено);
	ПараметрыСообщения.Вставить("СуммаСсылкиСБП", Неопределено);
	
	// АПК:1416-выкл Обработка различных сценариев отправки.
	// АПК:1415-выкл Обработка различных сценариев отправки.
	
	Если Сообщение.ДополнительныеПараметры.Свойство("ПараметрыСообщения")
		И ЗначениеЗаполнено(Сообщение.ДополнительныеПараметры.ПараметрыСообщения) Тогда
		
		Сообщение.ДополнительныеПараметры.ПараметрыСообщения.Свойство(
			"ПлатежнаяСсылка",
			ПараметрыСообщения.ПлатежнаяСсылка);
		Сообщение.ДополнительныеПараметры.ПараметрыСообщения.Свойство(
			"СуммаПлатежнойСсылки",
			ПараметрыСообщения.СуммаСсылкиСБП);
	Иначе
		Сообщение.ДополнительныеПараметры.Свойство(
			"ПлатежнаяСсылка",
			ПараметрыСообщения.ПлатежнаяСсылка);
		Сообщение.ДополнительныеПараметры.Свойство(
			"СуммаПлатежнойСсылки",
			ПараметрыСообщения.СуммаСсылкиСБП);
	КонецЕсли;
	
	// АПК:1416-вкл
	// АПК:1415-вкл
	
	Если Не ЗначениеЗаполнено(ПараметрыСообщения.ПлатежнаяСсылка) Тогда
		
		ПараметрыНастройки = Новый Структура;
		ПараметрыНастройки.Вставить("НастройкаПодключения", Неопределено);
		ПараметрыНастройки.Вставить("ВариантНастройки", Неопределено);
		
		СистемаБыстрыхПлатежейСобытия.ПриОпределенииНастройкиПоДокументуОперации(
			ПредметСообщения,
			ПараметрыНастройки);
		
		Если Не ЗначениеЗаполнено(ПараметрыНастройки.НастройкаПодключения) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не удалось определить настройку подключения к Системе быстрых платежей.'"));
			Возврат ПараметрыСообщения;
		КонецЕсли;
		
		НастройкиПодключенияПрограммы = НастройкиПодключенияПрограммы();
		ИспользоватьЧастичныеОплаты = Ложь;
		СистемаБыстрыхПлатежейСобытия.ПриОпределенииИспользованияЧастичныхОплат(
			ИспользоватьЧастичныеОплаты,
			ПараметрыНастройки.ВариантНастройки,
			НастройкиПодключенияПрограммы);
		
		ЧастичнаяОплата = Неопределено;
		Если ИспользоватьЧастичныеОплаты Тогда
			ДанныеЧастичныхОплат = Документы.ПлатежнаяСсылкаСБП.ПолучитьДанныеЧастичныхОплат(ПредметСообщения);
			Если ДанныеЧастичныхОплат.Количество() > 0 Тогда
				ЧастичнаяОплата = ДанныеЧастичныхОплат[ДанныеЧастичныхОплат.Количество()-1];
			КонецЕсли;
		КонецЕсли;
		
		Если ЧастичнаяОплата <> Неопределено Тогда
			РезультатОперации = ДинамическаяСсылкаЧастичнойОплаты(
				ЧастичнаяОплата.НастройкаПодключения,
				ЧастичнаяОплата);
		Иначе
			РезультатОперации = ДинамическаяСсылка(
				ПредметСообщения,
				ПараметрыНастройки.НастройкаПодключения);
		КонецЕсли;
		
		ПараметрыСообщения.ПлатежнаяСсылка = РезультатОперации.ПлатежнаяСсылка;
		ПараметрыСообщения.СуммаСсылкиСБП = РезультатОперации.СуммаОплаты;
		
	КонецЕсли;
	
	Возврат ПараметрыСообщения;
	
КонецФункции

// Заполнение представление ссылки в шаблоне сообщения.
//
// Параметры:
//  Сообщение - Структура - сообщение для отправки;
//  ПараметрыШаблона - Структура- параметры сообщения;
//  ПлатежнаяСсылка - Строка - платежная ссылка для заполнения в сообщении.
//
Процедура ЗаполнитьПредставлениеСсылки(
		Сообщение,
		ПараметрыШаблона,
		ПлатежнаяСсылка)
	
	ПараметрыОтправкиСообщений = НовыйПараметрыОтправкиСообщений();
	ПриОпределенииПараметровОтправкиСообщений(ПараметрыОтправкиСообщений);
	
	Если ПараметрыШаблона.ТипШаблона = "Письмо"
		И ПараметрыШаблона.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML
		И ОтправлятьПисьмаВФорматеHTML(ПараметрыОтправкиСообщений) Тогда
		
		Если Сообщение.ЗначенияРеквизитов["ПредставлениеСсылкиСБПQRКод"] <> Неопределено Тогда
			
			Результат = СистемаБыстрыхПлатежей.ИзображениеQRКодаСБП(
				ПлатежнаяСсылка,
				200,
				0);
			
			Base64 = Base64Строка(Результат);
			Base64 = СтрЗаменить(Base64, Символы.ПС, "");
			Base64 = СтрЗаменить(Base64, Символы.ВК, "");
			
			Сообщение.ЗначенияРеквизитов["ПредставлениеСсылкиСБПQRКод"] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '<p><img alt="""" src=""data:image/png;base64,%1""></p>'"),
				Base64);
			
		КонецЕсли;
		
		Если Сообщение.ЗначенияРеквизитов["ПредставлениеСсылкиСБП"] <> Неопределено Тогда
			Сообщение.ЗначенияРеквизитов["ПредставлениеСсылкиСБП"] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '<p>Оплатить счет: <a href=""%1"">%1</a></p>'"),
				ПлатежнаяСсылка);
		КонецЕсли;
		
	Иначе
		Сообщение.ЗначенияРеквизитов["ПредставлениеСсылкиСБП"] = ?(ПараметрыШаблона.ТипШаблона = "SMS",
			ПлатежнаяСсылка,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Оплатить счет:
					|%1'"),
			ПлатежнаяСсылка));
	КонецЕсли;
	
КонецПроцедуры

// Создает описание параметров отправки сообщений.
//
// Возвращаемое значение:
//  Структура - описание параметров отправки сообщений:
//    * ПараметрыОтправкиПисем - Структура - описание отправки электронных писем:
//       ** ОтправлятьПисьмаВФорматеHTML - Булево, Неопределено - признак отправки электронных писем в формате HTML.
//
Функция НовыйПараметрыОтправкиСообщений()
	
	ПараметрыОтправкиСообщений = Новый Структура;
	
	ПараметрыОтправкиПисем = Новый Структура;
	ПараметрыОтправкиПисем.Вставить("ОтправлятьПисьмаВФорматеHTML", Неопределено);
	
	ПараметрыОтправкиСообщений.Вставить("ПараметрыОтправкиПисем", ПараметрыОтправкиПисем);
	
	Возврат ПараметрыОтправкиСообщений;
	
КонецФункции

// См. СистемаБыстрыхПлатежейПереопределяемый.ПриОпределенииПараметровОтправкиСообщений.
//
Процедура ПриОпределенииПараметровОтправкиСообщений(
		ПараметрыОтправкиСообщений)
	
	ИнтеграцияПодсистемБИП.ПриОпределенииПараметровОтправкиСообщенийСБП(
		ПараметрыОтправкиСообщений);
	СистемаБыстрыхПлатежейПереопределяемый.ПриОпределенииПараметровОтправкиСообщений(
		ПараметрыОтправкиСообщений);
	
КонецПроцедуры

// Возвращает признак отправки писем с использованием шаблонов СБП в формате HTML.
//
// Возвращаемое значение:
//  Булево - признак отправки писем с использованием шаблонов СБП в формате HTML.
//
Функция ОтправлятьПисьмаВФорматеHTML(
		ПараметрыОтправкиСообщений)
	
	Попытка
		ОтправлятьПисьмаВФорматеHTML = ПараметрыОтправкиСообщений.ПараметрыОтправкиПисем.ОтправлятьПисьмаВФорматеHTML;
	Исключение
		ВызватьИсключение НСтр("ru = 'Нарушение структуры параметров отправки сообщений в переопределяемом методе
			|СистемаБыстрыхПлатежейПереопределяемый.ПриОпределенииПараметровОтправкиСообщений'");
	КонецПопытки;
	
	Если ОтправлятьПисьмаВФорматеHTML = Неопределено Тогда
		Возврат ИнтернетПоддержкаПользователей.ОтправлятьПисьмаВФорматеHTML();
	Иначе
		Возврат ОтправлятьПисьмаВФорматеHTML;
	КонецЕсли;
	
КонецФункции

// Возвращает описание настроек использования подсистемы ШаблоныСообщений.
//
// Возвращаемое значение:
//  Структура - содержит описание настроек использования подсистемы ШаблоныСообщений:
//   * Существует - Булево - признак существования подсистемы ШаблоныСообщений в составе конфигурации;
//   * Используется - Булево - признак включения функциональной опции использования шаблонов сообщений.
//
Функция НастройкиШаблоновСообщений() Экспорт
	
	Настройки = Новый Структура;
	
	ЕстьШаблоныСообщений = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений");
	ИспользуютсяШаблоныСообщений = Ложь;
	Если ЕстьШаблоныСообщений Тогда
		МодульШаблоныСообщений = ОбщегоНазначения.ОбщийМодуль("ШаблоныСообщений");
		ИспользуютсяШаблоныСообщений = МодульШаблоныСообщений.ИспользуютсяШаблоныСообщений();
	КонецЕсли;
	
	Настройки.Вставить("Существует", ЕстьШаблоныСообщений);
	Настройки.Вставить("Используется", ИспользуютсяШаблоныСообщений);
	
	Возврат Настройки;
	
КонецФункции

// Включает функциональные опции необходимые для работы с шаблонами сообщений.
//
Процедура УстановитьИспользованиеШаблонов() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
		ИнтернетПоддержкаПользователей.УстановитьИспользованиеSMS();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		ИнтернетПоддержкаПользователей.УстановитьИспользованиеЭлектроннойПочты();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
		ИнтернетПоддержкаПользователей.УстановитьОтправкуПисемВФорматеHTML();
	КонецЕсли;
	
	ИнтернетПоддержкаПользователей.УстановитьИспользованиеШаблоновСообщений();
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Проверяет является ли объект основанием платежа через СБП.
//
// Параметры:
//  Объект - ЛюбаяСсылка, Строка - ссылка на объект или полное имя объекта метаданных для проверки.
//
// Возвращаемое значение:
//  Булево - Истина, если объект является основанием платежа, иначе Ложь.
//
Функция ЭтоДокументОперацииСБП(Знач Объект)
	
	ПолноеИмя = Неопределено;
	
	Если ТипЗнч(Объект) = Тип("Строка") Тогда
		
		ПолноеИмя = Объект;
		
	Иначе
		
		МетаданныеОбъекта = Объект.Метаданные();
		ПолноеИмя = МетаданныеОбъекта.ПолноеИмя();
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолноеИмя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИменаДокументовОперации = ИменаДокументовСКомандой();
	
	Возврат (ИменаДокументовОперации.Найти(ПолноеИмя) <> Неопределено);
	
КонецФункции

#КонецОбласти

#Область МакетыСБП

// Возвращаемое значение:
//  Структура - данные сверке взаиморасчетов:
//    * ОбновленныеМакеты - Структура - Описание обновленных макетов СБП:
//      ** Ключ    - Строка - Идентификатор макета СБП.
//      **Значение - ТабличныйДокумент - обновленный макет.
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//     может быть обработан вызывающим методом;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОбновитьКэшМакетов()
	
	РезультатОперации = НовыйРезультатОперации();
	РезультатОперации.Вставить("ОбновленныеМакеты", Новый Структура);
	
	РезультатВызова = СистемаБыстрыхПлатежейСервис.ОперацияОписаниеМакетов();
	
	Если ЗначениеЗаполнено(РезультатВызова.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатВызова);
		Возврат РезультатОперации;
	КонецЕсли;
	
	ОбновляемыеМакетов = МакетыДляОбновления(
		РезультатВызова.Описание);
	
	Если ОбновляемыеМакетов.Количество() = 0 Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОбновления = СистемаБыстрыхПлатежейСервис.ОперацияОбновлениеМакетов(
		ОбновляемыеМакетов);
	ЗаполнитьЗначенияСвойств(
		РезультатОперации,
		РезультатОбновления);
	
	Возврат РезультатОперации;
	
КонецФункции

// Определяет макеты, которые необходимо обновить.
//
// Параметры:
//  АктуальныеМакеты - ТаблицаЗначений - данные макетов загруженные из сервиса.
//
// Возвращаемое значение:
//  Массив из Структура - данные макетов для обновления.
//
Функция МакетыДляОбновления(АктуальныеМакеты)
	
	ОбновляемыеМакеты = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	АктуальныеМакеты.Идентификатор КАК Идентификатор,
		|	АктуальныеМакеты.КонтрольнаяСумма КАК КонтрольнаяСумма,
		|	АктуальныеМакеты.URLЗагрузки КАК URLЗагрузки
		|ПОМЕСТИТЬ ВТ_АктуальныеМакеты
		|ИЗ
		|	&АктуальныеМакеты КАК АктуальныеМакеты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_АктуальныеМакеты.Идентификатор КАК Идентификатор,
		|	ВТ_АктуальныеМакеты.КонтрольнаяСумма КАК КонтрольнаяСумма,
		|	ВТ_АктуальныеМакеты.URLЗагрузки КАК URLЗагрузки,
		|	ВЫБОР
		|		КОГДА ВТ_АктуальныеМакеты.КонтрольнаяСумма <> ЕСТЬNULL(КэшМакетовСБП.КонтрольнаяСумма, """")
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеобходимаЗагрузка
		|ИЗ
		|	ВТ_АктуальныеМакеты КАК ВТ_АктуальныеМакеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшМакетовСБП КАК КэшМакетовСБП
		|		ПО ВТ_АктуальныеМакеты.Идентификатор = КэшМакетовСБП.Идентификатор";
	
	Запрос.УстановитьПараметр("АктуальныеМакеты", АктуальныеМакеты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеобходимаЗагрузка Тогда
			
			ОбновляемыйМакет = Новый Структура;
		
			ОбновляемыйМакет.Вставить("Идентификатор",    Выборка.Идентификатор);
			ОбновляемыйМакет.Вставить("КонтрольнаяСумма", Выборка.КонтрольнаяСумма);
			ОбновляемыйМакет.Вставить("URLЗагрузки",      Выборка.URLЗагрузки);
			
			ОбновляемыеМакеты.Добавить(ОбновляемыйМакет);
			
		Иначе
			
			Запись = РегистрыСведений.КэшМакетовСБП.СоздатьМенеджерЗаписи();
			Запись.Идентификатор = Выборка.Идентификатор;
			Запись.Прочитать();
			Запись.ДатаОбновления = ТекущаяДатаСеанса();
			Запись.Заполнить(Неопределено);
			Запись.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбновляемыеМакеты;
	
КонецФункции

#КонецОбласти

#Область Аутентификация

// Формирует заголовок для способа аутентификации hmac.
//
// Параметры:
//  СекретныйКлюч - ДвоичныеДанные - секретный ключ для выполнения аутентификации;
//  ДанныеДляПодписи - Массив из Строка  - данные шифрования;
//  ЗначениеХешФункция - Строка - способ вычисления хеш-суммы.
//
// Возвращаемое значение:
//  Строка - заголовок аутентификации.
//
Функция ЗаголовокHMACАутентификации(СекретныйКлюч, Знач ДанныеДляПодписи, ЗначениеХешФункция)
	
	Данные = "";
	Для Каждого Значение Из ДанныеДляПодписи Цикл
		
		Если Не ЗначениеЗаполнено(Значение) И Значение <> 0 Тогда
			Данные = Данные + "-";
		ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
			ЗначениеДата = ЗаписатьДатуJSON(
				Значение,
				ФорматДатыJSON.ISO,
				ВариантЗаписиДатыJSON.УниверсальнаяДата);
			Данные = Данные + СтрДлина(ЗначениеДата) + ЗначениеДата;
		ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
			ЗначениеЧисло = СтрЗаменить("" + Значение, ",", ".");
			ЗначениеЧисло = СтрЗаменить(ЗначениеЧисло, Символы.НПП, "");
			Данные = Данные + СтрДлина(ЗначениеЧисло) + ЗначениеЧисло;
		Иначе
			Данные = Данные + СтрДлина("" + Значение) + Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	СлучайноеЧислоHex = ДлинноеСлучайноеЧислоHEX();
	Данные = Данные + СтрДлина(СлучайноеЧислоHex) + СлучайноеЧислоHex;
	
	Хеш = РассчитатьHmac(
		СекретныйКлюч,
		ПолучитьДвоичныеДанныеИзСтроки(
			Данные,
			КодировкаТекста.UTF8),
		ЗначениеХешФункция);
		
	Префикс = ?(ЗначениеХешФункция = ХешФункция.SHA256, "HMACSHA256", "HMACSHA1");
	Возврат Префикс + " " + СлучайноеЧислоHex + "." + НРег(Хеш);
	
КонецФункции

// Формирует заголовок для способа аутентификации
// Resource Owner Password Credentials Grant (https://tools.ietf.org/html/rfc6749#section-4.3).
//
// Параметры:
//  ДанныеАутентификации - Структура - данные аутентификации для получения заголовка;
//  ИдентификаторУчастника - Строка - идентификатор участника СБП;
//  Результат - Структура - результат получения заголовка.
//
Процедура СформироватьЗаголовокАутентификацииPasswordCredentialsGrant(
		ДанныеАутентификации,
		ИдентификаторУчастника,
		Результат)
	
	Если ДанныеАутентификации.expiresDate = Неопределено
		Или ДанныеАутентификации.tokenType = Неопределено
		Или ДанныеАутентификации.accessToken = Неопределено
		Или ТекущаяУниверсальнаяДатаВМиллисекундах() > ДанныеАутентификации.expiresDate Тогда
		РезультатОперации = СистемаБыстрыхПлатежейСервис.ОперацияПредоставлениеУчетныхДанных(
			ДанныеАутентификации.login,
			ДанныеАутентификации.password,
			ИдентификаторУчастника);
		Если Не ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			ДанныеАутентификации.accessToken = РезультатОперации.Токен;
			ДанныеАутентификации.tokenType   = РезультатОперации.ТипТокена;
			ДанныеАутентификации.expiresDate = ТекущаяУниверсальнаяДатаВМиллисекундах()
				+ РезультатОперации.ИстеченияСрока * 1000;
		Иначе
			Результат.Ошибка = Истина;
			Результат.ИнформацияОбОшибке = РезультатОперации.СообщениеОбОшибке;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Аутентификация = ""
		+ ДанныеАутентификации.tokenType
		+ " "
		+ ДанныеАутентификации.accessToken;
	
КонецПроцедуры

#КонецОбласти

#Область HMAC

// Формирование подписи для аутентификации (HMAC).
// См. RFC 2104 https://www.ietf.org/rfc/rfc2104.txt.
//
// Параметры:
//  СекретныйКлюч - ДвоичныеДанные - секретный ключ шифрования.
//  Данные - ДвоичныеДанные  - данные шифрования.
//  ХешФункция - ХешФункция  - хеш функция, например ХешФункция.SHA256.
// 
// Возвращаемое значение:
//  Строка - сформированный hmac.
//
Функция РассчитатьHmac(Знач СекретныйКлюч, Знач Данные, Знач ХешФункция)
	
	РазмерБлока = 64;
	
	Если СекретныйКлюч.Размер() > РазмерБлока Тогда
		СекретныйКлюч = Хешировать(СекретныйКлюч, ХешФункция);
	КонецЕсли;
	
	ПустыеДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки("");
	СекретныйКлюч = ОбрезатьДвоичныеДанныеСлева(СекретныйКлюч, РазмерБлока);
	
	КлючВБлоке1 = ЗабитьДвоичныеДанныеСправа(СекретныйКлюч, РазмерБлока, "00");
	
	Блок0x36 = ЗабитьДвоичныеДанныеСправа(ПустыеДвоичныеДанные, РазмерБлока, "36");
	КлючВБлоке2 = ОбъединитьДвоичныеДанныеXOR(КлючВБлоке1, Блок0x36);
	
	Блок0x5C = ЗабитьДвоичныеДанныеСправа(ПустыеДвоичныеДанные, РазмерБлока, "5C");
	КлючВБлоке3 = ОбъединитьДвоичныеДанныеXOR(КлючВБлоке1, Блок0x5C);
	
	КлючИДанные = СоединитьДвоичныеДанныеПоЗначениям(КлючВБлоке2, Данные);
	ДанныеХеш = СоединитьДвоичныеДанныеПоЗначениям(КлючВБлоке3, Хешировать(КлючИДанные, ХешФункция));
	Результат = Хешировать(ДанныеХеш, ХешФункция);
	
	Возврат ПолучитьHexСтрокуИзДвоичныхДанных(Результат);
	
КонецФункции

// Применяет хеш функцию к переданным данным.
//
// Параметры:
//  Значение - ДвоичныеДанные  - данные хеширования;
//  ХешФункция - ХешФункция  - хеш функция, например ХешФункция.SHA256.
//
// Возвращаемое значение:
//  ДвоичныеДанные  - хеш сумма;
//
Функция Хешировать(Знач Значение, Знач ХешФункция)
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция);
	ХешированиеДанных.Добавить(Значение);
	Возврат ХешированиеДанных.ХешСумма;
	
КонецФункции

// Объединяет несколько объектов типа ДвоичныеДанные в один.
//
// Параметры:
//  ДвоичныеДанные1 - ДвоичныеДанные - первое значение;
//  ДвоичныеДанные2 - ДвоичныеДанные - второе значение.
//
// Возвращаемое значение:
//  ДвоичныеДанные - результат соединения.
//
Функция СоединитьДвоичныеДанныеПоЗначениям(Знач ДвоичныеДанные1, Знач ДвоичныеДанные2)
	
	Массив = Новый Массив;
	Массив.Добавить(ДвоичныеДанные1);
	Массив.Добавить(ДвоичныеДанные2);
	
	Возврат СоединитьДвоичныеДанные(Массив);
	
КонецФункции

// Дополняет двоичные данные переданным блоком.
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные - значение для обработки;
//  Длина - Число - длина дополнения;
//  Строка16 - Строка - строка дополнения;
//
// Возвращаемое значение:
//  ДвоичныеДанные - результат обработки.
//
Функция ЗабитьДвоичныеДанныеСправа(Знач ДвоичныеДанные, Знач Длина, Знач Строка16)
	
	Значение = ПолучитьДвоичныеДанныеИзHexСтроки(Строка16);
	РазмерБлока = Длина - ДвоичныеДанные.Размер();
	
	Блок = Значение;
	МассивБлока = Новый Массив;
	МассивБлока.Добавить(Значение);
	Пока Блок.Размер() < РазмерБлока Цикл
		МассивБлока.Добавить(Блок);
		Блок = СоединитьДвоичныеДанные(МассивБлока);
	КонецЦикла;
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(ДвоичныеДанные);
	МассивБлоков = РазделитьДвоичныеДанные(Блок, РазмерБлока);
	Если МассивБлоков.Количество() > 0 Тогда
		МассивДанных.Добавить(МассивБлоков[0]);
	КонецЕсли;
	Результат = СоединитьДвоичныеДанные(МассивДанных);
	
	Возврат Результат;
	
КонецФункции

// Производит операцию исключающего ИЛИ для двоичных данных.
//
// Параметры:
//  ДвоичныеДанные1 - ДвоичныеДанные - первое значение;
//  ДвоичныеДанные2 - ДвоичныеДанные - второе значение.
//
// Возвращаемое значение:
//  ДвоичныеДанные - результат операции.
//
Функция ОбъединитьДвоичныеДанныеXOR(Знач ДвоичныеДанные1, Знач ДвоичныеДанные2)
	
	ПотокВПамяти = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(ПотокВПамяти);
	
	ЧтениеДанных1 = Новый ЧтениеДанных(ДвоичныеДанные1);
	ЧтениеДанных2 = Новый ЧтениеДанных(ДвоичныеДанные2);
	
	Буфер1 = ЧтениеДанных1.ПрочитатьВБуферДвоичныхДанных();
	Буфер2 = ЧтениеДанных2.ПрочитатьВБуферДвоичныхДанных();
	
	Если Буфер1.Размер > Буфер2.Размер Тогда
		Буфер1.ЗаписатьПобитовоеИсключительноеИли(0, Буфер2, Буфер2.Размер);
		ЗаписьДанных.ЗаписатьБуферДвоичныхДанных(Буфер1);
	Иначе 
		Буфер2.ЗаписатьПобитовоеИсключительноеИли(0, Буфер1, Буфер1.Размер);
		ЗаписьДанных.ЗаписатьБуферДвоичныхДанных(Буфер2);
	КонецЕсли;
	
	Результат = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	
	Возврат Результат;
	
КонецФункции

// Выполняет удаление заданного количества байт из двоичных данных.
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные - значение для обработки;
//  КоличествоБайт - Число - количество байт для удаления.
//
// Возвращаемое значение:
//  ДвоичныеДанные - результат операции.
//
Функция ОбрезатьДвоичныеДанныеСлева(Знач ДвоичныеДанные, Знач КоличествоБайт)
	
	ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанные);
	
	ПотокВПамяти = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(ПотокВПамяти);
	
	Буфер = ЧтениеДанных.ПрочитатьВБуферДвоичныхДанных(КоличествоБайт);
	ЗаписьДанных.ЗаписатьБуферДвоичныхДанных(Буфер);
	
	Возврат ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

// Создает случайное число длиной 16-32 разряда
// и переводит его в hex систему счисления.
//
// Возвращаемое значение:
//  Строка - случайное число в hex.
//
Функция ДлинноеСлучайноеЧислоHEX()
	
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел();
	ДлинаЧисла = ГенераторСлучайныхЧисел.СлучайноеЧисло(16, 32);
	
	// Для инициализации первого разряда исключается 0.
	СлучайноеЧисло = "" + ГенераторСлучайныхЧисел.СлучайноеЧисло(1, 9);
	
	// Последовательное формирование случайного числа по разрядам.
	Сч = 1;
	Пока Сч < ДлинаЧисла Цикл
		СлучайноеЧисло = СлучайноеЧисло + ГенераторСлучайныхЧисел.СлучайноеЧисло(0, 9);
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат ПреобразоватьЧислоВHEX(Число(СлучайноеЧисло));
	
КонецФункции

#КонецОбласти

#Область ОбработкаОшибок

// Производит чтение кода ошибки сервиса из тела ответа.
//
// Параметры:
//  ТелоJSON - Строка - тело ответа сервиса.
//
// Возвращаемое значение:
//  Строка - код ошибки сервиса.
//
Функция ОпределитьКодОшибкиСервиса(ТелоJSON)
	
	// Ответ сервиса:
	//
	//  {
	//  "type": "string",
	//  "title": "string",
	//  "status": "string",
	//  "detail": "string",
	//  "instance": "string"
	// }
	
	// Определение ошибки выполняется через попытку, т.к. в случае ошибки сервиса
	// есть вероятность получить не формализованное сообщение.
	Попытка
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
		Результат = ПрочитатьJSON(ЧтениеОтвета);
		Возврат Результат.type;
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ТехническаяПоддержка

// Формирует информацию для тех. поддержки, которую можно
// использовать для оперативного расследования ошибок.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    продажу в информационной базе;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операций.
//
// Возвращаемое значение:
//  Строка - информация для технической поддержки.
//
Функция ИнформацияДляТехническойПоддержки(ДокументОплаты, НастройкаПодключения) Экспорт
	
	ТекстСообщения = НСтр("ru = 'Настройки подключения'")
		+ Символы.ПС
		+ Символы.ПС;
	
	РеквизитыНастройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаПодключения,
		"ИдентификаторУчастника, ИдентификаторМерчанта, Родитель.Наименование");
	
	ТекстСообщения = ТекстСообщения
		+ НСтр("ru = 'Участник СБП:'")
		+ РеквизитыНастройки.РодительНаименование
		+ Символы.ПС;
	ТекстСообщения = ТекстСообщения
		+ НСтр("ru = 'Идентификатор участника СБП:'")
		+ РеквизитыНастройки.ИдентификаторУчастника
		+ Символы.ПС;
	ТекстСообщения = ТекстСообщения
		+ НСтр("ru = 'Идентификатор мерчанта:'")
		+ РеквизитыНастройки.ИдентификаторМерчанта
		+ Символы.ПС
		+ Символы.ПС;
	
	СистемаБыстрыхПлатежейСобытия.ПриФормированииИнформацииДляТехническойПоддержки(
		ДокументОплаты,
		НастройкаПодключения,
		ТекстСообщения);
	
	Возврат ТекстСообщения;
	
КонецФункции

#КонецОбласти

#Область ПараметрыПодключения

// Определяет хост для вызова сервиса Системы быстрых платежей.
//
// Возвращаемое значение:
//  Строка - хост подключения.
//
Функция ХостСервисаОбменаДанными()
	
	
	Возврат "payment-gateway.1c.ru";
	
КонецФункции

#КонецОбласти

#Область ПолучениеТокена

// Создает описание структуры с данными токенов сервисов - потребителей.
//
// Возвращаемое значение:
//  Структура - данные токенов сервисов - потребителей:
//    * consumers - Структура - содержит перечень потребителей токенов:
//      ** orders - Структура - содержит данные токена для сервиса "orders.1c.ru":
//        *** Идентификатор - Строка - идентификатор токена,
//        *** Токен - Строка - Значение токена.
//
Функция НовыйОписаниеТокеновСервиса()
	
	ОписаниеТокена = Новый Структура;
	ОписаниеТокена.Вставить("Идентификатор", "");
	ОписаниеТокена.Вставить("Токен",         "");
	
	ОписаниеСервисов = Новый Структура;
	ОписаниеСервисов.Вставить("orders", ОписаниеТокена);
	
	ОписаниеТокеновСервиса = Новый Структура;
	ОписаниеТокеновСервиса.Вставить("consumers", ОписаниеСервисов);
	
	Возврат ОписаниеТокеновСервиса;
	
КонецФункции

// Возвращает идентификатор сервиса по его имени.
//
// Параметры:
//  ИмяСервиса - Строка - имя сервиса.
//
// Возвращаемое значение:
//  Строка - Идентификатор сервиса.
//
Функция ИдентификаторСервисаПоИмени(ИмяСервиса)
	
	Если ИмяСервиса = "orders.1c.ru" Тогда
		Возврат "orders";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОнлайнЗаказы

// Определяет данные настройки подключения к Системе быстрых платежей.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей, Неопределено - Настройка подключения к СБП,
//    указанная в настройке страницы онлайн-заказов, Неопределено в том случае, если настройка не определена.
//  ИдентификаторМерчанта - Строка - идентификатор мерчанта в Системе быстрых платежей;
//
// Возвращаемое значение:
//  Структура - параметры настройки:
//    * НастройкаПодключения - Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей
//      - настройка подключения к системе быстрых платежей.
//    * ИдентификаторУчастника - Строка - идентификатор участника системы быстрых платежей.
//
//
Функция ДанныеНастройкиОперацииПоДаннымОплаты(НастройкаПодключения, ИдентификаторМерчанта)
	
	Результат = Новый Структура;
	Результат.Вставить(
		"НастройкаПодключения",
		Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей.ПустаяСсылка());
	Результат.Вставить("ИдентификаторУчастника", "");
	
	Если ЗначениеЗаполнено(НастройкаПодключения) Тогда
		
		ДанныеНастройкиПодключения = Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей.ДанныеНастройкиПодключения(
			НастройкаПодключения);
		
		Если ДанныеНастройкиПодключения.ИдентификаторМерчанта = ИдентификаторМерчанта Тогда
			Результат.НастройкаПодключения = НастройкаПодключения;
			Результат.ИдентификаторУчастника = ДанныеНастройкиПодключения.ИдентификаторУчастника;
			Возврат Результат;
		КонецЕсли;
			
		ДанныеХранилища = ПрочитатьПараметрыАутентификации(
			НастройкаПодключения,
			ДанныеНастройкиПодключения.ИдентификаторУчастника);
		
		Для Каждого ДанныеАутентификации Из ДанныеХранилища Цикл
			Если ДанныеАутентификации.Значение.merchantId = ИдентификаторМерчанта Тогда
				Результат.НастройкаПодключения = НастройкаПодключения;
				Результат.ИдентификаторУчастника = ДанныеАутентификации.Ключ;
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей.ДанныеНастройкиПодключенияПоИдентификаторуМерчанта(
		ИдентификаторМерчанта);
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Определяет идентификатор статуса операции
//
// Параметры:
//  СтатусОпераций - Строка - статус операции.
//    Список статусов:
//      см. СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена - операция успешно выполнена.
//      см. СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполняется - операция выполняется.
//      см. СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтклонена - операция отклонена.
//
// Возвращаемое значение:
//  Структура - результат создания динамической ссылки в Системе быстрых платежей:
//    * СтатусОперации - Строка - текущее состояние операции оплаты. Возможные значения:
//      - "Выполняется" - подтверждение оплаты не получено;
//      - "Отменена" - оплата по ранее сформированному QR-коду невозможна;
//      - "Выполнена" - участник СБП подтвердил оплату;
//      - "Отклонена" - оплата по ранее сформированному QR-коду невозможна;
//      - "Ошибка" - неизвестный статус операции.
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - статус успешно определен;
//        - "НеизвестныйСтатус" - неизвестный идентификатор статуса;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//
Функция ПолучитьИдентификаторПоСтатусуОперации(ИдентификаторСтатусаОперации)
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("СтатусОперации", Неопределено);
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке", "");

	Если ИдентификаторСтатусаОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполняется() Тогда
		РезультатОперации.СтатусОперации = ИдентификаторСтатусаВПроцессе();
	ИначеЕсли ИдентификаторСтатусаОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена() Тогда
		РезультатОперации.СтатусОперации = ИдентификаторСтатусаВыполнена();
	ИначеЕсли ИдентификаторСтатусаОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтклонена() Тогда
		РезультатОперации.СтатусОперации = ИдентификаторСтатусаОтклонена();
	Иначе
		РезультатОперации.КодОшибки = "НеизвестныйСтатус";
		РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Не удалось определить статус операции.'");
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Создает описание операции СБП.
//
// Возвращаемое значение:
//  Структура - описание операции СБП:
//    * ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП, ДокументСсылка.ПлатежнаяСсылкаСБП, Неопределено - документ
//      операции СБП.
//    * СуммаОперации - Число - сумма операции СБП.
//    * СтатусОперации - Строка - статус операции СБП.
//
Функция НовыйОписаниеОперации()
	
	Операция = Новый Структура;
	Операция.Вставить("ДокументОперации",      Неопределено);
	Операция.Вставить("СуммаОперации",         0);
	Операция.Вставить("СтатусОперации",        "");
	Операция.Вставить("ДатаОперации",          Дата(1, 1, 1));
	Операция.Вставить("ИдентификаторОперации", "");
	Операция.Вставить("ИдентификаторОплаты",   "");
	Операция.Вставить("Оплата",                Ложь); 
	
	Возврат Операция;
	
КонецФункции

// Формирует описание доступных сценариев работы подсистемы.
//
// Возвращаемое значение:
//  Структура - сценарии работы подсистемы:
//    * КассовыеСсылки - Булево - признак доступности настройки кассовой ссылки;
//    * СверкаВзаиморасчетов - Булево - признак доступности настройки кассовой ссылки;
//
Функция НовыйСценарииРаботыПодсистемы() Экспорт
	
	Возврат Новый Структура(
		"КассовыеСсылки, СверкаВзаиморасчетов",
		Ложь,
		Ложь);
	
КонецФункции

// Определяет идентификатор поставляемых данных.
//
// Возвращаемое значение:
//  Строка - идентификатор поставляемых данных.
//
Функция ВидПоставляемыхДанныхСБП()
	
	Возврат "SBPMemebersSettings";
	
КонецФункции

// Определяет идентификатор поставляемых данных.
//
// Возвращаемое значение:
//  Строка - идентификатор поставляемых данных.
//
Функция ВидПоставляемыхДанныхМакетыСБП()
	
	Возврат "SBPTemplates";
	
КонецФункции

// Возвращает имя события для журнала регистрации, которое используется
// для записи событий загрузки данных из внешних систем.
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Переводы СБП'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Удаляет нечитаемые символы из строки.
//
// Параметры:
//  ИсходнаяСтрока - Строка - данные аутентификации, которые необходимо обработать.
//
// Возвращаемое значение:
//  Строка - результат обработки.
//
Функция УдалитьНечитаемыеСимволы(Знач ИсходнаяСтрока) Экспорт
	
	НечитаемыеСимволы = Новый Массив();
	НечитаемыеСимволы.Добавить(Символы.ВК);
	НечитаемыеСимволы.Добавить(Символы.ВТаб);
	НечитаемыеСимволы.Добавить(Символы.НПП);
	НечитаемыеСимволы.Добавить(Символы.ПС);
	НечитаемыеСимволы.Добавить(Символы.ПФ);
	НечитаемыеСимволы.Добавить(Символы.Таб);
	НечитаемыеСимволы.Добавить(Символ(182)); // символ параграфа
	НечитаемыеСимволы.Добавить(Символ(176)); // символ градуса
	НечитаемыеСимволы.Добавить(" ");
	
	Для Каждого НечитаемыйСимвол Из НечитаемыеСимволы Цикл
		ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, НечитаемыйСимвол, "");
	КонецЦикла;
	
	Возврат ИсходнаяСтрока;
	
КонецФункции

// Формирует URL страницы подключения к Системе быстрых платежей.
//
// Параметры:
//  Идентификатор - Строка - идентификатор участника.
//  ИдентификаторНастройки - Строка - Идентификатор варианта настройки СБП.
//
// Возвращаемое значение:
//  Строка - адрес страницы подключения к СБП.
//
Функция АдресСтраницыПодключенияКСБП(
		Идентификатор,
		ИдентификаторНастройки)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"https://its.1c.ru/sbp?memberId=%1&useCase=%2",
		Идентификатор,
		ИдентификаторНастройки);
	
КонецФункции

// Выполняет чтение (и при необходимости обновление) данных аутентификации по настройке подключения
// и идентификатору участника.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операций.
//  ИдентификаторУчастника - Строка - идентификатор участника.
//
// Возвращаемое значение:
//  Структура - данные аутентификации.
//
Функция ПрочитатьПараметрыАутентификацииУчастника(
		НастройкаПодключения,
		ИдентификаторУчастника)
	
	ДанныеХранилища = ПрочитатьПараметрыАутентификации(
		НастройкаПодключения,
		ИдентификаторУчастника);
	
	Возврат ДанныеХранилища.Получить(ИдентификаторУчастника);
	
КонецФункции

// Выполняет чтение (и при необходимости обновление) данных аутентификации по настройке подключения.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операций.
//  ИдентификаторУчастника - Строка - идентификатор участника.
//
// Возвращаемое значение:
//  Структура - данные аутентификации.
//
Функция ПрочитатьПараметрыАутентификации(
		НастройкаПодключения,
		ИдентификаторУчастника)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		НастройкаПодключения);
	
	Если ДанныеХранилища = Неопределено Тогда
		ДанныеХранилища = Новый Соответствие;
	КонецЕсли;
	
	// Проверим необходимость обновления сохраненных данных аутентификации
	Если ТипЗнч(ДанныеХранилища) = Тип("Структура") Тогда
		
		ОбновитьВерсиюДанныхАутентификации(
			НастройкаПодключения,
			ИдентификаторУчастника);
		
		ДанныеХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			НастройкаПодключения);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДанныеХранилища;
	
КонецФункции

// Проверяет корректность переданного варианта настройки и возвращает исключение, если
// он не входит в список допустимых.
//
// Параметры:
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей.
//
Процедура ПроверитьВариантНастройки(
		ВариантНастройки) Экспорт
	
	Если Не ЗначениеЗаполнено(ВариантНастройки) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Передан не заполненный вариант настройки.'"),
				ВариантНастройки);
	КонецЕсли;
	
КонецПроцедуры

// Определяет идентификатор на основании варианта настройки.
//
// Параметры:
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройки Системы быстрых платежей.//
//
// Возвращаемое значение:
//  Строка - идентификатор сценария.
//
Функция ИдентификаторВариантаНастройки(
		ВариантНастройки) Экспорт
	
	Для Каждого ЗначенияПеречисления Из Метаданные.Перечисления.ВариантыНастройкиСБП.ЗначенияПеречисления Цикл
		Если Перечисления.ВариантыНастройкиСБП[ЗначенияПеречисления.Имя] = ВариантНастройки Тогда
			Возврат ЗначенияПеречисления.Имя;
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение НСтр("ru = 'Не удалось определить идентификатор сценария по идентификатору варианта настройки'");
	
КонецФункции

// Определяет идентификатор на основании варианта настройки.
//
// Параметры:
//  ИдентификаторНастройки - Строка - Идентификатор варианта настройки СБП.
//  Может принимать следующие значения: "c2b", "b2b".
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройки Системы быстрых платежей.
//
Функция ВариантНастройкиПоИдентификатору(
		ИдентификаторНастройки)
	
	Если ИдентификаторНастройки = "c2b" Тогда
		Возврат Перечисления.ВариантыНастройкиСБП.c2b;
	ИначеЕсли ИдентификаторНастройки = "b2b" Тогда
		Возврат Перечисления.ВариантыНастройкиСБП.b2b;
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru = 'Не удалось определить идентификатор сценария по идентификатору варианта настройки'");
	
КонецФункции

// Определяет признак изменения данных аутентификации.
//
// Параметры:
//  ПараметрыАутентификации - Структура - записываемые данные аутентификации.
//  ДанныеХранилища - Структура - сохраненные данные аутентификации.
//
// Возвращаемое значение:
//  Булева -  Истина, если данные изменены.
//
Функция ПараметрыАутентификацииИзменены(
		ПараметрыАутентификации,
		ДанныеХранилища)
	
	Для Каждого ПараметрАутентификации Из ПараметрыАутентификации Цикл
		Если ПараметрАутентификации.Значение <> ДанныеХранилища[ПараметрАутентификации.Ключ] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти
