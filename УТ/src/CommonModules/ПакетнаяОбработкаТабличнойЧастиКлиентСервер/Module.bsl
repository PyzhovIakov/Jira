
#Область ПрограммныйИнтерфейс

#Область ПолученияСтруктурКэшируемыхЗначений

// Возвращает структуру, содержащую поля кэшируемых значений.
//
// Возвращаемое значение:
//	Структура - структура кэшируемых значений со следующими полями:
//		* КоэффициентыУпаковок - Соответствие - используется для хранения значений коэффициентов упаковок товара.
//		* ОбъемУпаковок - Соответствие - используется для хранения значений объема упаковок товара.
//		* ВесУпаковок - Соответствие - используется для хранения значений веса упаковок товара.
//		* Штрихкоды - Соответствие - используется для хранения значений штрихкодов упаковок товара.
//		* КонтролироватьЗаполнениеАналитикиРасходов - Соответствие - используется для хранения значений коэффициентов упаковок товара.
//		* РаспределятьНДСпоСтатьеРасходов - Соответствие - используется для хранения признаков распределения НДС по 
//			статьям расходов.
//		* КонтролироватьЗаполнениеАналитикиДоходов - Соответствие - используется для хранения признаков контроля заполнения 
//			по аналитике доходов.
//		* ИспользоватьРучныеСкидкиВПродажах - Неопределено, Булево - Истина - в продажах используется расчет скидок вручную.
//		* ИспользоватьАвтоматическиеСкидкиВПродажах - Неопределено, Булево - Истина - в продажах используется 
//			автоматический расчет скидок.
//		* ПравоРегистрацииШтрихкодовНоменклатурыДоступно - Неопределено, Булево - Истина - пользователю разрешено 
//			регистрировать штрихкоды номенклатуры.
//		* ПринимаетсяКНУ - Соответствие - используется для хранения признаков контроля принятия статей расходов к
//			налоговому учету.
//		* ПризнакиСоглашений - Соответствие из СправочникСсылка.СоглашенияСКлиентами - используется для хранения типа
//			соглашений в строках, где значение - булево (истина - типовое, ложь - индивидуальное).
//		* ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//		* КолонкиКоллекции - КоллекцияКолонокТаблицыЗначений - Описание всех полей обрабатываемой коллекции.
//
Функция ПолучитьСтруктуруКэшируемыеЗначения() Экспорт
	
	КэшированныеЗначения = Новый Структура;
	КэшированныеЗначения.Вставить("КоллекцияСКоллекцияССоставнымТипом",	Истина);
	КэшированныеЗначения.Вставить("КоэффициентыУпаковок",	Новый Соответствие);
	КэшированныеЗначения.Вставить("ОбъемУпаковок",			Новый Соответствие);
	КэшированныеЗначения.Вставить("ВесУпаковок",			Новый Соответствие);
	КэшированныеЗначения.Вставить("Штрихкоды",				Новый Соответствие);
	КэшированныеЗначения.Вставить("СвойстваНазначений",		Новый Соответствие);
	КэшированныеЗначения.Вставить("СвойстваСкладов",		Новый Соответствие);
	КэшированныеЗначения.Вставить("РеквизитыНоменклатуры",	Новый Соответствие); // Справочники.Номенклатура.ЗначенияРеквизитовНоменклатуры()
	КэшированныеЗначения.Вставить("ТипыНоменклатуры",		Новый Соответствие);
	КэшированныеЗначения.Вставить("КонтролироватьЗаполнениеАналитикиРасходов",	Новый Соответствие);
	КэшированныеЗначения.Вставить("РаспределятьНДСпоСтатьеРасходов",			Новый Соответствие);
	КэшированныеЗначения.Вставить("КонтролироватьЗаполнениеАналитикиДоходов",	Новый Соответствие);
	КэшированныеЗначения.Вставить("ИспользоватьАналитикуАктивовПассивов",		Новый Соответствие);
	КэшированныеЗначения.Вставить("ИспользоватьРучныеСкидкиВПродажах",			Неопределено);
	КэшированныеЗначения.Вставить("ИспользоватьАвтоматическиеСкидкиВПродажах",	Неопределено);
	КэшированныеЗначения.Вставить("ИспользоватьРучныеСкидкиВЗакупках",			Неопределено);
	КэшированныеЗначения.Вставить("ПравоРегистрацииШтрихкодовНоменклатурыДоступно",	Неопределено);
	КэшированныеЗначения.Вставить("ПринимаетсяКНУ", Новый Соответствие);
	КэшированныеЗначения.Вставить("КоэффициентыРНПТ", Новый Соответствие);
	КэшированныеЗначения.Вставить("АктуальныеСтавкиНДС", Неопределено);
	КэшированныеЗначения.Вставить("ОписаниеЗапроса", Неопределено); // Используется только на сервере

	
	КэшированныеЗначения.Вставить("ОбработанныеСтроки", Новый Массив);
	
	КэшированныеЗначения.Вставить("ПризнакиКатегорииЭксплуатации", Новый Соответствие);
	СтруктураПустойКатегории = Новый Структура;
	СтруктураПустойКатегории.Вставить("СрокЭксплуатации", 0);
	СтруктураПустойКатегории.Вставить("СтатьяРасходов", ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка"));
	КэшированныеЗначения.ПризнакиКатегорииЭксплуатации.Вставить(ПредопределенноеЗначение("Справочник.КатегорииЭксплуатации.ПустаяСсылка"), СтруктураПустойКатегории);
	
	КэшированныеЗначения.Вставить("ПризнакиСоглашений", Новый Соответствие);
	
	Возврат КэшированныеЗначения;
	
КонецФункции // ПолучитьСтруктуруКэшируемыеЗначения()

// Возвращает структуру, содержащую поля кэшируемой информации, получаемой по штрихкоду товара.
//
// Возвращаемое значение:
//	Структура - структура кэшируемых данных товара, получаемая по штрихкоду товара, со следующими полями:
//		* Номенклатура - СправочникСсылка.Номенклатура - информация о товаре.
//		* ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - тип товара.
//		* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика товара.
//		* Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка товара.
//		* ПредставлениеНоменклатуры - Строка - представление номенклатуры.
//		* ПодакцизныйТовар - Булево - Истина - товар является подакцизным.
//		* МаркируемаяПродукция - Булево - Истина - товар является маркируемой продукцией.
//		* ХарактеристикиИспользуются - Булево - Истина - признак использования характеристик.
//		* Коэффициент - Число - коэффициент упаковки.
//		* ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица измерения товара.
//		* ЕдиничнаяУпаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - единичная упаковка товара.
//		* НесколькоЕдиничныхУпаковок - Булево - Истина - товар имеет несколько видов единичных упаковок.
//		* УпаковочныйЛист - ДокументСсылка.УпаковочныйЛист - упаковочный лист.
//		* НеизвестныйШтрихкод - Булево - Истина - в информационной базе отсутствуют данные по штрихкоду.
//		* Штрихкод - Строка - штрихкод товара.
//		* КоличествоПоШтрихкоду - Число - количество товара (в единицах хранения) по штрихкоду.
//		* КоличествоУпаковок - Число - количество упаковок товара.
//		* ШтрихкодНеИзКэша - Неопределено, Булево - Истина - штрихкод не из кэша памяти.
//		* НоменклатураНабора - СправочникСсылка.Номенклатура - информация по набору.
//		* ХарактеристикаНабора - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика набора.
//		* ВариантРасчетаЦеныНабора - ПеречислениеСсылка.ВариантыРасчетаЦенНаборов - вариант расчета цены набора.
//		* ВыполненныеДействия - Структура - структура действий, произведенных со строкой товара в табличной части документа:
//			** Добавлено - Булево - Истина - строка по товару добавлена.
//			** Изменено - Булево - Истина - строка по товару изменена.
//		* Назначения - Неопределено, СправочникСсылка.Назначения - назначение товара.
//
Функция СтруктураКешируемойИнформацииПоШтрихкоду() Экспорт
	
	ИнформацияПоШтрихкоду = Новый Структура;
	
	ИнформацияПоШтрихкоду.Вставить("Номенклатура");
	ИнформацияПоШтрихкоду.Вставить("ТипНоменклатуры");
	ИнформацияПоШтрихкоду.Вставить("Характеристика");
	ИнформацияПоШтрихкоду.Вставить("Упаковка");
	ИнформацияПоШтрихкоду.Вставить("ПредставлениеНоменклатуры", "");
	ИнформацияПоШтрихкоду.Вставить("ПодакцизныйТовар");
	ИнформацияПоШтрихкоду.Вставить("МаркируемаяПродукция", Ложь);
	ИнформацияПоШтрихкоду.Вставить("ХарактеристикиИспользуются");
	ИнформацияПоШтрихкоду.Вставить("Коэффициент",              1);
	ИнформацияПоШтрихкоду.Вставить("ЕдиницаИзмерения");
	ИнформацияПоШтрихкоду.Вставить("ЕдиничнаяУпаковка");
	ИнформацияПоШтрихкоду.Вставить("НесколькоЕдиничныхУпаковок");
	ИнформацияПоШтрихкоду.Вставить("УпаковочныйЛист",          ПредопределенноеЗначение("Документ.УпаковочныйЛист.ПустаяСсылка"));
	ИнформацияПоШтрихкоду.Вставить("НеизвестныйШтрихкод",      Истина);
	ИнформацияПоШтрихкоду.Вставить("Штрихкод",                 "");
	ИнформацияПоШтрихкоду.Вставить("КоличествоПоШтрихкоду",    0);
	ИнформацияПоШтрихкоду.Вставить("КоличествоУпаковок",       1);
	ИнформацияПоШтрихкоду.Вставить("ШтрихкодНеИзКэша",         Неопределено);
	ИнформацияПоШтрихкоду.Вставить("НоменклатураНабора",       ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	ИнформацияПоШтрихкоду.Вставить("ХарактеристикаНабора",     ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	ИнформацияПоШтрихкоду.Вставить("ВариантРасчетаЦеныНабора", ПредопределенноеЗначение("Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка"));
	ИнформацияПоШтрихкоду.Вставить("ВыполненныеДействия",      Новый Структура("Добавлено, Изменено", Ложь, Ложь));
	ИнформацияПоШтрихкоду.Вставить("Назначения",               Неопределено);
	ИнформацияПоШтрихкоду.Вставить("ИспользоватьУпаковки");
	
	Возврат ИнформацияПоШтрихкоду;
	
КонецФункции

// Возвращает структуру, содержащую поля кэшируемых значений услуги.
//
// Возвращаемое значение:
//	Структура - структура кэшируемых данных услуг, со следующими полями:
//		* ПроцентыСтавокНДС - Соответствие - используется для хранения процентов ставок НДС.
//		* Штрихкоды - Соответствие - используется для хранения значений штрихкодов услуг.
//		* ИспользоватьРучныеСкидкиВПродажах - Неопределено, Булево - Истина - в продажах используется расчет скидок вручную.
//		* ИспользоватьАвтоматическиеСкидкиВПродажах - Неопределено, Булево - Истина - в продажах используется 
//			автоматический расчет скидок.
//		* ИспользоватьРучныеСкидкиВЗакупках - Неопределено, Булево - Истина - в закупках используется расчет скидок вручную.
//
Функция ПолучитьСтруктуруКэшируемыеЗначенияУслуг() Экспорт
	
	КэшированныеЗначения = Новый Структура;
	КэшированныеЗначения.Вставить("ПроцентыСтавокНДС",    Новый Соответствие);
	КэшированныеЗначения.Вставить("Штрихкоды",            Новый Соответствие);
	КэшированныеЗначения.Вставить("ИспользоватьРучныеСкидкиВПродажах",         Неопределено);
	КэшированныеЗначения.Вставить("ИспользоватьАвтоматическиеСкидкиВПродажах", Неопределено);
	КэшированныеЗначения.Вставить("ИспользоватьРучныеСкидкиВЗакупках",         Неопределено);
	
	Возврат КэшированныеЗначения;
	
КонецФункции // ПолучитьСтруктуруКэшируемыеЗначенияУслуг()

#КонецОбласти

#Область ПолучениеСтруктурПараметровДляОбработкиТабличнойЧастиТовары

// Возвращает структуру, содержащую поля значений, используемых для заполнения цен в строках табличной части документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - данные документа.
//	ВидЦеныВШапке - Булево - Истина - признак указания вида цены в шапке документа.
//
// Возвращаемое значение:
//	Структура - структура, используемая для заполнения цен в табличной части документа:
//		* Дата - Дата - дата документа.
//		* Валюта - СправочникСсылка.Валюты - валюта документа.
//		* ВидЦены - СправочникСсылка.ВидыЦен - Вид цены (может не быть, зависит от того есть ли вид цены в шапке документа или нет).
//
Функция ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект, ВидЦеныВШапке = Ложь) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",   Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта", Объект.Валюта);
	
	Если ВидЦеныВШапке Тогда
		СтруктураЗаполненияЦены.Вставить("ВидЦены", Объект.ВидЦены);
	КонецЕсли;
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для пересчета сумм НДС в строках табличной части 
// документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - данные документа.
//
// Возвращаемое значение:
//	Структура - структура, используемая для пересчета сумм НДС в табличной части документа:
//		* ЦенаВключаетНДС - Булево - Истина - НДС включен в цену товара.
//		* НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - налогообложение документа.
//
Функция ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект,"НалогообложениеНДС") Тогда
		СтруктураЗаполненияЦены.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	КонецЕсли;
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Возвращает структуру, содержащую параметры для заполнения ставки НДС
// документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура, ДокументОбъект - данные документа.
//	ПоДатеОтгрузки - Булево - Признак того, что ставки необходимо получать на дату отгрузки
//	ВернутьМногооборотнуюТару - Булево - 
//
// Возвращаемое значение:
//	Структура - структура, используемая для пересчета сумм НДС в табличной части документа:
//		* НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Налогообложение документа.
//		* Организация - СправочникСсылка.Организации - Организация документа
//		* Дата - Дата - Дата документа
//		* ПоДатеОтгрузки - Булево - Признак того, что ставки необходимо получать на дату отгрузки
//		* ВернутьМногооборотнуюТару - Булево - Признак необходимости возврата многооборотной тары.
//		* ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
//		* ИмяПоляНоменклатура - Строка - Имя поля номенклатуры для получения ставки.
//
Функция ПараметрыЗаполненияСтавкиНДС(Объект = Неопределено, ПоДатеОтгрузки = Ложь, ВернутьМногооборотнуюТару = Ложь) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Дата");
	Параметры.Вставить("Организация");
	Параметры.Вставить("НалогообложениеНДС", ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС"));
	Параметры.Вставить("ПоДатеОтгрузки", ПоДатеОтгрузки);
	Параметры.Вставить("ВернутьМногооборотнуюТару", ВернутьМногооборотнуюТару);
	Параметры.Вставить("Суффикс", "");
	Параметры.Вставить("ИнициализацияВходящегоДокумента", Ложь);
	Параметры.Вставить("ЗаполнениеНаОснованииКопирование", Ложь);
	Параметры.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПустаяСсылка"));
	Параметры.Вставить("ИмяПоляНоменклатура", "");
	Параметры.Вставить("НалогообложениеНДСВТабличнойЧасти", Ложь);
	Параметры.Вставить("УказаннаяСтавкаНДС");
	
	Если Объект <> Неопределено Тогда
		
		Параметры.Дата = Объект.Дата;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Организация") Тогда
			Параметры.Организация = Объект.Организация;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "НалогообложениеНДС") Тогда
			Параметры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		КонецЕсли;
		
		Если Не ВернутьМногооборотнуюТару И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ВернутьМногооборотнуюТару") Тогда
			Параметры.Вставить("ВернутьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ХозяйственнаяОперация") Тогда
			Параметры.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для заполнения количества по РНПТ в строках табличной
// части документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - данные формы объекта.
//	ИмяПоляМестоХранения - Строка - имя поля Склад, находящегося в шапке объекта или табличной части.
//	МестоХраненияВТабличнойЧасти - Булево - признак наличия поля Склад в табличной части объекта.
//
// Возвращаемое значение:
//	см. УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ПараметрыПолученияКоэффициентаРНПТ.
//
Функция ПараметрыПолученияКоэффициентаРНПТ(Объект, ИмяПоляМестоХранения = "Склад", МестоХраненияВТабличнойЧасти = Ложь) Экспорт
	
	Возврат УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ПараметрыПолученияКоэффициентаРНПТ(Объект,
																								ИмяПоляМестоХранения,
																								МестоХраненияВТабличнойЧасти);
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для заполнения цен закупки в строках табличной части 
// документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - данные документа.
//	ИмяПоляВидЦены - Строка, Неопределено - Имя реквизита шапки вида цены, если имя не "ВидЦеныПоставщика".
//
// Возвращаемое значение:
//	Структура - структура, используемая для заполнения цен закупки в строках табличной части документа:
//		* Соглашение - СправочникСсылка.СоглашенияСКлиентами - соглашение по документу.
//		* Партнер - СправочникСсылка.Партнеры - партнер по документу.
//		* Дата - Дата - дата документа.
//		* Валюта - СправочникСсылка.Валюты - валюта документа.
//		* ВидЦеныПоставщика - СправочникСсылка.ВидыЦенПоставщиков - валюта документа.
//		* ИмяПоля - Строка - имя поля, в которое необходимо поместить полученную цену
//
Функция ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект, ИмяПоляВидЦены = Неопределено) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура(
		"Соглашение, Партнер, Дата, Организация, Валюта,
		|НалогообложениеНДС, ВернутьМногооборотнуюТару,
		|Партнер, Дата, Валюта, ВидЦеныПоставщика");
	
	ЗаполнитьЗначенияСвойств(СтруктураЗаполненияЦены,Объект);
	
	Если ИмяПоляВидЦены <> Неопределено Тогда
		СтруктураЗаполненияЦены.ВидЦеныПоставщика = Объект[ИмяПоляВидЦены];
	КонецЕсли;

	// Оставляем только для документов, у которых ВидЦеныПоставщика в шапке и заполнен
	Если Не ЗначениеЗаполнено(СтруктураЗаполненияЦены.ВидЦеныПоставщика) Тогда
		СтруктураЗаполненияЦены.Удалить("ВидЦеныПоставщика");
	КонецЕсли;
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для заполнения условий продаж в строках табличной части 
// документа.
// 
// Параметры:
//	Объект - ДанныеФормыСтруктура - данные документа.
//
// Возвращаемое значение:
//	Структура - структура, используемая для заполнения условий продаж в строках табличной части документа:
//		* Дата - Дата - дата документа.
//		* Валюта - СправочникСсылка.Валюты - валюта документа.
//		* Соглашение - СправочникСсылка.СоглашенияСКлиентами - соглашение по документу.
//		* Ссылка - ДокументСсылка - ссылка документа.
//
Функция ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",       Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта",     Объект.Валюта);
	СтруктураЗаполненияЦены.Вставить("Соглашение", Объект.Соглашение);
	СтруктураЗаполненияЦены.Вставить("Партнер",    Объект.Партнер);
	СтруктураЗаполненияЦены.Вставить("Ссылка",     Объект.Ссылка);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для заполнения цен розницы в строках табличной части 
// документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - данные документа.
//
// Возвращаемое значение:
//	Структура - структура, используемая для заполнения цен розницы в строках табличной части документа:
//		* Дата - Дата - дата документа.
//		* Валюта - СправочникСсылка.Валюты - валюта документа.
//		* ВидЦены - СправочникСсылка.ВидыЦен - вид цен по документу.
//
Функция ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",    Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта",  Объект.Валюта);
	СтруктураЗаполненияЦены.Вставить("ВидЦены", Объект.ВидЦены);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для заполнения цен по ассортименту в строках табличной 
// части документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - данные документа.
//
// Возвращаемое значение:
//	Структура - структура, используемая для заполнения цен по ассортименту в строках табличной части документа:
//		* Дата - Дата - дата документа.
//		* Валюта - СправочникСсылка.Валюты - валюта документа.
//		* Склад - СправочникСсылка.Склады - склад по документу.
//
Функция ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",    Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта",  Объект.Валюта);
	СтруктураЗаполненияЦены.Вставить("Склад", 	Объект.Склад);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для заполнения цен по ассортименту в строках табличной 
// части документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - данные документа.
//	ОбъектХраненияУсловийПродаж - Строка, СправочникСсылка.ФорматыМагазинов, СправочникСсылка.Склады - 
//
// Возвращаемое значение:
//	Структура - структура, используемая для заполнения цен по ассортименту в строках табличной части документа:
//		* Дата - Дата - дата документа.
//		* Валюта - СправочникСсылка.Валюты - валюта документа.
//		* ОбъектХраненияУсловийПродаж - Строка, СправочникСсылка.ФорматыМагазинов, СправочникСсылка.Склады -
//
Функция ПолучитьСтруктуруЗаполненияУсловийРозничныхПродажВСтрокеТЧ(Объект, ОбъектХраненияУсловийПродаж) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата", Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта", Объект.Валюта);
	СтруктураЗаполненияЦены.Вставить("ОбъектХраненияУсловийПродаж", ОбъектХраненияУсловийПродаж);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для пересчета цены скидки продажи в строках
//  табличной части документа.
//
// Параметры:
//  Объект				 - ДанныеФормыСтруктура	 - данные документа.
//  ПередачаНаКомиссию	 - Булево				 - Истина если осуществляется передача на комиссию.
//  ИмяКоличества		 - Строка				 - имя поля количества в табличной части документа.
// 
// Возвращаемое значение:
//  Структура - структура, используемая для пересчета цены скидки продажи в строках табличной части документа:
//  * ИспользоватьРучныеСкидки - Булево - Истина - в продажах расчет скидок осуществляется вручную.
//  * ИспользоватьАвтоматическиеСкидки - Булево - Истина если в продажах используется автоматический расчет скидок.
//  * ИспользоватьБонусныеБаллы - Булево - Истина если в продажах используются бонусные баллы.
//  * ИмяКоличества - Строка - имя поля количества в табличной части документа.
//
Функция ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект, ПередачаНаКомиссию = Ложь, ИмяКоличества = "КоличествоУпаковок") Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	
	Если Не ПередачаНаКомиссию Тогда
		СтруктураЗаполненияЦены.Вставить("ИспользоватьРучныеСкидки");
		СтруктураЗаполненияЦены.Вставить("ИспользоватьАвтоматическиеСкидки");
		СтруктураЗаполненияЦены.Вставить("ИспользоватьБонусныеБаллы");
	КонецЕсли;
	
	СтруктураЗаполненияЦены.Вставить("ИмяКоличества", ИмяКоличества);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для пересчета цены скидки закупки в строках
//  табличной части документа.
//
// Параметры:
//  Объект			 - ДанныеФормыСтруктура	 - данные документа.
//  ПриемНаКомиссию	 - Булево				 - Истина если осуществляется прием на комиссию.
// 
// Возвращаемое значение:
//  Структура - структура, используемая для пересчета цены скидки закупки в строках табличной части документа:
//  * ИспользоватьРучныеСкидки - Булево - Истина если расчет скидок осуществляется вручную.
//
Функция ПолучитьСтруктуруПересчетаЦеныСкидкиВЗакупкахВТЧ(Объект, ПриемНаКомиссию) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	
	Если Не ПриемНаКомиссию Тогда
		СтруктураЗаполненияЦены.Вставить("ИспользоватьРучныеСкидки");
	КонецЕсли;
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для проверки сопоставленной номенклатуры поставщика с
//  номенклатурой склада в строках табличной части документа.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - данные документа:
//  	* Ссылка - ДокументСсылка
//  НеВыполнятьПроверкуДляПользователя - Булево - Истина если не нужно проверку для текущего пользователя.
// 
// Возвращаемое значение:
//  Структура - структура, используемая для проверки сопоставленной номенклатуры поставщика с номенклатурой склада в строках табличной части документа:
//  * Ссылка - ДокументСсылка - ссылка на документ.
//  * Партнер - СправочникСсылка.Партнеры - партнер по документу.
//  * НеВыполнятьПроверкуДляПользователя - Булево - Истина если не осуществлять проверку для текущего пользователя.
//
Функция ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(Объект, НеВыполнятьПроверкуДляПользователя) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ссылка",                             Объект.Ссылка);
	СтруктураПараметров.Вставить("Партнер",                            Объект.Партнер);
	СтруктураПараметров.Вставить("НеВыполнятьПроверкуДляПользователя", НеВыполнятьПроверкуДляПользователя);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для заполнения сведений о складе в строках
//  табличной части документа.
// 
// Параметры:
// 	Объект - ДанныеФормыСтруктура	 - данные документа.
// 	СкладГруппа - Булево - Истина, если склад является иерархическим.
// 	ИмяПоляСкладОбъекта - Строка
// 	ИмяПоляСклад - Строка
// 	
// Возвращаемое значение:
// 	Структура - Описание:
// * ИмяПоляСклад - Строка
// * СкладПоУмолчанию - СправочникСсылка.Склады
// * СкладГруппа - Булево
// * СкладГруппаСсылка - СправочникСсылка.Склады
//
Функция ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа, ИмяПоляСкладОбъекта = "Склад", ИмяПоляСклад = "Склад") Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяПоляСклад",      ИмяПоляСклад);
	СтруктураПараметров.Вставить("СкладПоУмолчанию",  Объект[ИмяПоляСкладОбъекта]);
	СтруктураПараметров.Вставить("СкладГруппа",       СкладГруппа);
	
	СтруктураПараметров.Вставить(
		"СкладГруппаСсылка",
		?(СкладГруппа, Объект[ИмяПоляСкладОбъекта], ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка")));
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для заполнения сведений об услугах в строках
//  табличной части документа.
//
// Параметры:
//  Объект					 - ДанныеФормыСтруктура	 - данные документа.
//  ЗаполнятьДляВсехУслуг	 - Булево				 - Если Истина, то заполнять сведения об услугах во всей табличной части документа.
// 
// Возвращаемое значение:
//  Структура - структура, используемая для заполнения сведений об услугах в строках табличной части документа:
//  * ЗаполнятьДляВсехУслуг - Булево - Истина - заполнять сведения об услугах во всей табличной части документа.
//  * УслугиПоПереработкеДавальческогоСырья - Булево - Истина - осуществляется предоставление услуг по переработке
//  давальческого сырья.
//
Функция ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, ЗаполнятьДляВсехУслуг) Экспорт
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ЗаполнятьДляВсехУслуг", ЗаполнятьДляВсехУслуг);
	
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для пересчета суммы НДС по товару в строках
//  табличной части документа.
//
// Параметры:
//  Объект	 - ДанныеФормыСтруктура	 - данные документа.
// 
// Возвращаемое значение:
//  Структура - структура, используемая для пересчета суммы НДС по товару в строках табличной части документа:
//		* ЦенаВключаетНДС - Булево - Истина - сумма по НДС включена в цену товара.
//		* НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - налогообложение документа.
//
Функция ПараметрыПересчетаСуммыНДСВТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект,"НалогообложениеНДС") Тогда
		СтруктураЗаполненияЦены.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	КонецЕсли;
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для заполнения ставки НДС в строках 
// табличной части документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - данные документа.
//
// Возвращаемое значение:
//	Структура - структура, используемая для заполнения ставки НДС в строках табличной части документа:
//		* Дата - Дата - дата документа.
//		* Организация - СправочникСсылка.Организации - организация по документу, осуществляющая хозяйственную операцию.
//
Функция ПолучитьСтруктуруЗаполненияСтавкиНДС(Объект) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Дата"       , Объект.Дата);
	Результат.Вставить("Организация", Объект.Организация);
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, содержащую поля значений, используемых для заполнения признаков идентификации безвозвратной
//  многооборотной тары в строках табличной части документа.
//
// Параметры:
//  Объект	 - ДанныеФормыСтруктура	 - данные документа:
//	 * ВернутьМногооборотнуюТару - Булево - Истина - осуществлять возврат многооборотной тары.
// 
// Возвращаемое значение:
//  Структура - структура, используемая для заполнения признаков идентификации безвозвратной многооборотной тары в
//  строках табличной части документа:
//  * ВернутьМногооборотнуюТару - Булево - Истина - осуществлять возврат многооборотной тары.
//
Функция ПолучитьСтруктуруЗаполненияПризнакаБезВозвратнойТары(Объект) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВернутьМногооборотнуюТару" , Объект.ВернутьМногооборотнуюТару);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры, используемые при заполнении страны происхождения номенклатуры в табличной части объекта.
//
// Возвращаемое значение:
//	Структура - коллекция, содержащая следующие свойства:
//		* Номенклатура - Строка - имя поля номенклатура табличной части объекта.
//		* НомерГТД - Строка - имя поля номера ГТД товара табличной части объекта.
//
Функция ПараметрыЗаполненияСтраныПроисхождения() Экспорт
	
	ПараметрыЗаполненияСтраныПроисхождения = Новый Структура;
	ПараметрыЗаполненияСтраныПроисхождения.Вставить("Номенклатура",	"Номенклатура");
	ПараметрыЗаполненияСтраныПроисхождения.Вставить("НомерГТД",		"НомерГТД");
	
	Возврат ПараметрыЗаполненияСтраныПроисхождения;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыПересчетаИЗаполненияКлиентСервер

// Заполняет поля, используемые для отражения расхождений, в текущей строке табличной 
// части документа "АктОРасхожденияхПослеПеремещения".
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьРасхождения(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Если НЕ СтруктураДействий.Свойство("ПересчитатьРасхождения") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущаяСтрока.КоличествоУпаковокРасхождения = ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.КоличествоУпаковокПоДокументу;
	ТекущаяСтрока.ЕстьРасхождения               = (ТекущаяСтрока.КоличествоУпаковокРасхождения <> 0);
	
	Если ТекущаяСтрока.КоличествоУпаковокРасхождения = 0 Тогда
		ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка");
	ИначеЕсли ТекущаяСтрока.КоличествоУпаковокРасхождения < 0 
		И (ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ОприходоватьСейчас")) Тогда
		
		ТекущаяСтрока.Действие    = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка");
		
	ИначеЕсли ТекущаяСтрока.КоличествоУпаковокРасхождения > 0 
		И (ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ОтгрузитьСейчас")) Тогда
		
		ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет поля, используемые для отражения расхождений, в текущей строке табличной 
// части документа "АктОРасхожденияхПослеОтгрузки".
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьРасхожденияПослеОтгрузки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Если НЕ СтруктураДействий.Свойство("ПересчитатьРасхожденияПослеОтгрузки") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьРасхожденияВСтрокеАкта(ТекущаяСтрока);
	
	Если ТекущаяСтрока.КоличествоУпаковокРасхождения = 0 Тогда
		ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка");
	ИначеЕсли ТекущаяСтрока.КоличествоУпаковокРасхождения < 0 
		И (ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ОприходоватьСейчас")) Тогда
		
		ТекущаяСтрока.Действие    = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка");
		
	ИначеЕсли ТекущаяСтрока.КоличествоУпаковокРасхождения > 0 
		И (ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ОтгрузитьСейчас")) Тогда
		
		ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет поля, используемые для отражения расхождений, в текущей строке табличной 
// части документа "АктОРасхожденияхПослеПриемки".
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьРасхожденияПослеПриемки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Если НЕ СтруктураДействий.Свойство("ПересчитатьРасхожденияПослеПриемки") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьРасхожденияВСтрокеАкта(ТекущаяСтрока);
	
	Если ТекущаяСтрока.КоличествоУпаковокРасхождения = 0 Тогда
		ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ПустаяСсылка");
	ИначеЕсли ТекущаяСтрока.КоличествоУпаковокРасхождения > 0 
		И (ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОжидатьДопоставкуБезОформления")) Тогда
		
		ТекущаяСтрока.Действие    = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ПустаяСсылка");
		ТекущаяСтрока.ПоВинеСтороннейКомпании = Ложь;
		
	ИначеЕсли ТекущаяСтрока.КоличествоУпаковокРасхождения < 0 
		И (ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ВернутьПерепоставленноеБезОформления")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть")) Тогда
		
		ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет поля признаков использования комментариев в текущей строке табличной 
// части документа "АктОРасхожденияхПослеПриемки".
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьПризнакНаличияКомментарияПриемка(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт

	Если НЕ СтруктураДействий.Свойство("ПризнакНаличиеКомментарияПриемка") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущаяСтрока.ЕстьКомментарийПоставщика = НЕ ПустаяСтрока(ТекущаяСтрока.КомментарийПоставщика);
	ТекущаяСтрока.ЕстьКомментарийМенеджера = НЕ ПустаяСтрока(ТекущаяСтрока.КомментарийМенеджера);

КонецПроцедуры

// Заполняет поля признаков использования комментариев в текущей строке табличной 
// части документа "АктОРасхожденияхПослеОтгрузки".
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьПризнакНаличияКомментарияОтгрузка(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт

	Если НЕ СтруктураДействий.Свойство("ПризнакНаличиеКомментарияОтгрузка") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущаяСтрока.ЕстьКомментарийКлиента = НЕ ПустаяСтрока(ТекущаяСтрока.КомментарийКлиента);
	ТекущаяСтрока.ЕстьКомментарийМенеджера = НЕ ПустаяСтрока(ТекущаяСтрока.КомментарийМенеджера);

КонецПроцедуры

// Заполняет поля признаков использования комментариев в текущей строке табличной 
// части документа "АктОРасхожденияхПослеПеремещения".
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьПризнакНаличияКомментария(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт

	Если НЕ СтруктураДействий.Свойство("ПризнакНаличиеКомментария") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущаяСтрока.ЕстьКомментарийПолучателя = НЕ ПустаяСтрока(ТекущаяСтрока.КомментарийПолучателя);
	ТекущаяСтрока.ЕстьКомментарийМенеджера = НЕ ПустаяСтрока(ТекущаяСтрока.КомментарийМенеджера);

КонецПроцедуры

// Заполняет признак необходимости обработки строки табличной части документа "ПриходныйОрдерНаТовары".
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьПризнакТоварногоМестаТребуетсяОбработка(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьПризнакТовМестаТребуетсяОбработка") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекущаяСтрока.Штрихкод)
			И ТекущаяСтрока.ШтрихкодНеОпределен
			И (ТекущаяСтрока.ЭтоУпаковочныйЛист И Не ЗначениеЗаполнено(ТекущаяСтрока.УпаковочныйЛист)
				Или Не ТекущаяСтрока.ЭтоУпаковочныйЛист И Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура))
		Или ТекущаяСтрока.ЭтоУпаковочныйЛист
			И ТекущаяСтрока.КоличествоЗаполненныхПодчиненныхПозиций = 0
		Или ТекущаяСтрока.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста Тогда
		ТекущаяСтрока.ТребуетсяОбработка = 1;
	Иначе
		ТекущаяСтрока.ТребуетсяОбработка = 0;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, содержащую поля для пересчета суммы в табличной части документа.
//
// Параметры:
//  Реквизиты - Строка - Содержит имена полей, заданных через запятую,
//  ИмяПоляКоличество     - Строка - Имя поля, по которому считается коэффициент пропорциональности.
//  РазрядностиОкругления - Структура - структура, в формате ИмяПоля => Количество знаков дробной части, которая будет
//                                      использоваться при пересчете реквизитов.
//
// Возвращаемое значение:
//  Структура:
//            * Поля - Структура - содержит поля для пересчета суммы в табличной части документа
//            * Строки - Массив из ДанныеФормыЭлементКоллекции - содержит элементы типа, ссылки нас строки для пересчета сумм.
//            * ИтогКоличество - Число - сумма значений в поле "Количество" в строках переданных в параметре "Строки"
//            * ИмяПоляКоличество - Строка
//            * РазрядностиОкругления - Структура
//
Функция СтруктураПересчетаСуммы(Реквизиты, ИмяПоляКоличество = "Количество", РазрядностиОкругления = Неопределено) Экспорт

	Поля = Новый Структура(Реквизиты);
	
	Результат = Новый Структура;
	Результат.Вставить("Поля", Поля);
	Результат.Вставить("Строки", Новый Массив());
	Результат.Вставить("ИтогКоличество", 0);
	Результат.Вставить("ИмяПоляКоличество", ИмяПоляКоличество);
	Результат.Вставить("РазрядностиОкругления", РазрядностиОкругления);

	Возврат Результат;

КонецФункции

// Инициализирует структуру для пересчета суммы в табличной части документа
//
// Параметры:
//  СтруктураПересчетаСуммы - см. СтруктураПересчетаСуммы.
//  ДанныеЗаполнения - ДанныеФормыЭлементКоллекции - строка, содержащая значения суммовых показателей,
//                     которые необходимо будет распределить между строками при пересчете сумм.
//
// Возвращаемое значение
//  Структура - Структура со следующими полями:
//              Поля - Структура - содержит поля для пересчета суммы в табличной части документа,
//              Строки - Массив - содержит элементы типа ДанныеФормыЭлементКоллекции, ссылки нас строки для пересчета сумм,
//              ИтогКоличество - Число - сумма значений в поле "Количество" в строках переданных в параметре "Строки".
//
Процедура ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ДанныеЗаполнения) Экспорт

	ЗаполнитьЗначенияСвойств(СтруктураПересчетаСуммы.Поля, ДанныеЗаполнения);

	СтруктураПересчетаСуммы.ИтогКоличество = 0;
	СтруктураПересчетаСуммы.Строки.Очистить();

КонецПроцедуры

// Добавляет строку для пересчета суммы в структуру пересчета суммы, описание см. функция
// СтруктураПересчетаСуммы.
//
// Параметры:
//  СтруктураПересчетаСуммы - см. СтруктураПересчетаСуммы
//  Строка - ДанныеФормыЭлементКоллекции - строка, для которой необходимо рассчитать значения сумм.
//
Процедура ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, Строка) Экспорт

	СтруктураПересчетаСуммы.Строки.Добавить(Строка);
	СтруктураПересчетаСуммы.ИтогКоличество = СтруктураПересчетаСуммы.ИтогКоличество + Строка[СтруктураПересчетаСуммы.ИмяПоляКоличество];

КонецПроцедуры

// Пересчитывает суммы в строках, добавленных в структуру пересчета суммы, описание см. функция
// СтруктураПересчетаСуммы.
//
// Параметры:
//  СтруктураПересчетаСуммы - см. СтруктураПересчетаСуммы
//
Процедура ПересчитатьСуммы(СтруктураПересчетаСуммы) Экспорт
	
	РазрядностиОкругления = Неопределено;
	Если СтруктураПересчетаСуммы.Свойство("РазрядностиОкругления") Тогда
		РазрядностиОкругления = СтруктураПересчетаСуммы.РазрядностиОкругления;
	КонецЕсли;
	
	Для Каждого Строка Из СтруктураПересчетаСуммы.Строки Цикл
		
		Если СтруктураПересчетаСуммы.ИтогКоличество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Коэффициент = Строка[СтруктураПересчетаСуммы.ИмяПоляКоличество] / СтруктураПересчетаСуммы.ИтогКоличество;
		СтруктураПересчетаСуммы.ИтогКоличество = СтруктураПересчетаСуммы.ИтогКоличество - Строка[СтруктураПересчетаСуммы.ИмяПоляКоличество];

		Для Каждого Поле Из СтруктураПересчетаСуммы.Поля Цикл
			
			НовоеЗначение = Поле.Значение * Коэффициент;
			
			Если РазрядностиОкругления <> Неопределено Тогда
				Строка[Поле.Ключ] = Окр(НовоеЗначение, РазрядностиОкругления[Поле.Ключ]);
			Иначе
				Строка[Поле.Ключ] = НовоеЗначение;
			КонецЕсли;
			
			СтруктураПересчетаСуммы.Поля[Поле.Ключ] = Поле.Значение - Строка[Поле.Ключ];

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

// Пересчитывает количество неотгружаемых упаковок товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьКоличествоНеОтгружатьСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоНеОтгружать") Тогда
		Если ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.КоличествоУпаковокНеОтгружать > ТекущаяСтрока.КоличествоУпаковокВДокументе - ТекущаяСтрока.КоличествоУпаковокВДокументеНеотгружаемые Тогда
			ТекущаяСтрока.КоличествоУпаковокНеОтгружать = ТекущаяСтрока.КоличествоУпаковок - (ТекущаяСтрока.КоличествоУпаковокВДокументе - ТекущаяСтрока.КоличествоУпаковокВДокументеНеотгружаемые);
		ИначеЕсли ТекущаяСтрока.КоличествоУпаковокНеОтгружать > ТекущаяСтрока.КоличествоУпаковок Тогда
			ТекущаяСтрока.КоличествоУпаковокНеОтгружать = ТекущаяСтрока.КоличествоУпаковок;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает реквизиты в измененных строках. 
// 
// Параметры:
//  ИзмененныеСтроки - Массив из Структура:
//  * Идентификатор - Число - идентификатор группы измененных строк,
//  * Строка - ДанныеФормыЭлементКоллекции,СтрокаТабличнойЧасти - строка, в которой нужно выполнить пересчет.
//  СтруктураПересчета - см. СтруктураПересчетаСуммы.
//
Процедура ПересчитатьРеквизитыВИзмененныхСтроках(ИзмененныеСтроки, СтруктураПересчета) Экспорт
	
	Идентификатор = Неопределено;
	Для Каждого Изменение Из ИзмененныеСтроки Цикл
		Если Идентификатор <> Изменение.Идентификатор Тогда
			Идентификатор = Изменение.Идентификатор;
			ПересчитатьСуммы(СтруктураПересчета);
			ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчета, Изменение.Строка);
		КонецЕсли;
		ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчета, Изменение.Строка);
	КонецЦикла;
	ПересчитатьСуммы(СтруктураПересчета);
	
КонецПроцедуры

// Вычисляет количество упаковок товара в текущей строке табличной части документа
// по формуле: Продано = Остаток (учет) - Остаток (факт).
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьКоличествоУпаковокПоФактуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоФакту") Тогда
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковокУчет - ТекущаяСтрока.КоличествоУпаковокФакт;
	КонецЕсли;

КонецПроцедуры

// Вычисляет фактическое количество упаковок товара в текущей строке табличной части документа
// по формуле: Остаток (факт) = Остаток (учет) - Продано.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьКоличествоУпаковокФактПоУпаковкамВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокФактПоУпаковкам") Тогда
		
		ТекущаяСтрока.КоличествоУпаковокФакт = ТекущаяСтрока.КоличествоУпаковокУчет - ТекущаяСтрока.КоличествоУпаковок;
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает количество товара (в единицах хранения) в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьКоличествоЕдиницВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 

	Перем УпаковкаНоменклатура;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц", УпаковкаНоменклатура) Тогда
		ПараметрыПересчета = НормализоватьПараметрыПересчетаЕдиниц(ТекущаяСтрока, УпаковкаНоменклатура);
		Если ЗначениеЗаполнено(ПараметрыПересчета.Номенклатура) Тогда
			ДанныеУпаковки = ПолучитьКоэффициентУпаковки(ПараметрыПересчета.Упаковка, КэшированныеЗначения, ПараметрыПересчета.Номенклатура);
			Количество = ТекущаяСтрока.КоличествоУпаковок * ДанныеУпаковки.Коэффициент;
		
			Если ДанныеУпаковки.НужноОкруглятьКоличество
				И ПараметрыПересчета.НужноОкруглять Тогда
				ТекущаяСтрока.Количество = Окр(Количество, 0 ,РежимОкругления.Окр15как20);
			Иначе
				ТекущаяСтрока.Количество = Количество;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КоличествоУпаковок") Тогда
			ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоУпаковок;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет колонку "Количество по РНПТ" в текущей строке. Расчет основывается на:
// 1. Значении колонки "Количество".
// 2. Коэффициента пересчета, который вычисляется в разрезе:
//		А. Организации.
//		Б. Аналитики учета номенклатуры: Номенклатуре, Характеристике, Складу (Месту хранения).
//		В. Номеру ГТД (РНПТ).
// По указанному разрезу ищутся записи в:
//		А. РН Товары организации,
//		Б. РН Товары переданные на комиссию,
//		В. РН Товары к оформлению отчетов комитенту,
//		Г. РН Товары к оформлению отчетов комитенту о закупках.
// По найденным записям выполняется расчет:
// Коэффициент = КоличествоПоРНПТ / Количество;
// Если записи нет, и/или Номер ГТД (РНПТ) передан пустым - коэффициент устанавливается в "1",
// т.е. "Количество по РНПТ" приравнивается к "Количество".
//
// Типичный сценарий:
// Поступило 10 шт товара, пользователь указал номер ГТД (РНПТ)
// и изменил значение в поле "Количество по РНПТ" с 10 на 20.
// Пользователь вводит следующий документ с тем же товаром и ГТД (РНПТ), вводит количество.
// Система прочла из памяти, что коэффициент = 2, и автоматически устанавливает
// в колонке "Количество по РНПТ" значение как "Количество" * 2.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьКоличествоПоРНПТВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 

	Перем ПараметрыПересчета;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоПоРНПТ", ПараметрыПересчета) Тогда
		
		ИмяПоляКоличество = "Количество";
		ИмяПоляКоличествоПоРНПТ = "КоличествоПоРНПТ";
		Если ПараметрыПересчета.Свойство("ИменаПолейССуффиксом")
			И ЗначениеЗаполнено(ПараметрыПересчета.ИменаПолейССуффиксом) Тогда
			
			Если ПараметрыПересчета.ИменаПолейССуффиксом.Свойство("Количество") Тогда
				ИмяПоляКоличество = ПараметрыПересчета.ИменаПолейССуффиксом.Количество;
			КонецЕсли;
			Если ПараметрыПересчета.ИменаПолейССуффиксом.Свойство("КоличествоПоРНПТ") Тогда
				ИмяПоляКоличествоПоРНПТ = ПараметрыПересчета.ИменаПолейССуффиксом.КоличествоПоРНПТ;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущаяСтрока.ВедетсяУчетПоРНПТ Тогда
			Если СтруктураДействий.Свойство("ЗаполнитьТипНомераГТД") Тогда
				Если ТекущаяСтрока.ТипНомераГТД = ПредопределенноеЗначение("Перечисление.ТипыНомеровГТД.НомерРНПТКомплекта") Тогда
					ТекущаяСтрока[ИмяПоляКоличествоПоРНПТ] = ТекущаяСтрока[ИмяПоляКоличество];
				КонецЕсли;
			Иначе
				Коэффициент = ПолучитьКоэффициентРНПТ(ПараметрыПересчета, ТекущаяСтрока, КэшированныеЗначения);
				
				ТекущаяСтрока[ИмяПоляКоличествоПоРНПТ] = ТекущаяСтрока[ИмяПоляКоличество] * Коэффициент;
			КонецЕсли;
		Иначе
			ТекущаяСтрока[ИмяПоляКоличествоПоРНПТ] = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет колонку "Количество по РНПТ" (поддерживается иное наименование колонки) в текущей строке.
// Расчет основывается на:
// 1. Значении колонки "Количество" (поддерживается иное наименование колонки).
// 2. Коэффициента пересчета, который вычисляется в разрезе:
//		А. Организации.
//		Б. Аналитики учета номенклатуры: Номенклатуре, Характеристике, Складу (Месту хранения).
//		В. Номеру ГТД (РНПТ).
// По указанному разрезу ищутся записи в:
//		А. РН Товары организации,
//		Б. РН Товары переданные на комиссию,
//		В. РН Товары к оформлению отчетов комитенту,
//		Г. РН Товары к оформлению отчетов комитенту о закупках.
// По найденным записям выполняется расчет:
// Коэффициент = КоличествоПоРНПТ / Количество;
// Если записи нет, и/или Номер ГТД (РНПТ) передан пустым - коэффициент устанавливается в "1",
// т.е. "Количество по РНПТ" приравнивается к "Количество".
//
// Типичный сценарий:
// Поступило 10 шт товара, пользователь указал номер ГТД (РНПТ)
// и изменил значение в поле "Количество по РНПТ" с 10 на 20.
// Пользователь вводит следующий документ с тем же товаром и ГТД (РНПТ), вводит количество.
// Система прочла из памяти, что коэффициент = 2, и автоматически устанавливает
// в колонке "Количество по РНПТ" значение как "Количество" * 2.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьКоличествоПоРНПТСуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 

	Перем ПараметрыПересчета;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоПоРНПТСуффикс", ПараметрыПересчета) Тогда
		
		ИмяПоляКоличество = "Количество";
		ИмяПоляКоличествоПоРНПТ = "КоличествоПоРНПТ";
		Если ПараметрыПересчета.Свойство("ИменаПолейССуффиксом")
			И ЗначениеЗаполнено(ПараметрыПересчета.ИменаПолейССуффиксом) Тогда
			
			Если ПараметрыПересчета.ИменаПолейССуффиксом.Свойство("Количество") Тогда
				ИмяПоляКоличество = ПараметрыПересчета.ИменаПолейССуффиксом.Количество;
			КонецЕсли;
			Если ПараметрыПересчета.ИменаПолейССуффиксом.Свойство("КоличествоПоРНПТ") Тогда
				ИмяПоляКоличествоПоРНПТ = ПараметрыПересчета.ИменаПолейССуффиксом.КоличествоПоРНПТ;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущаяСтрока.ВедетсяУчетПоРНПТ Тогда
			Если СтруктураДействий.Свойство("ЗаполнитьТипНомераГТД") Тогда
				Если ТекущаяСтрока.ТипНомераГТД = ПредопределенноеЗначение("Перечисление.ТипыНомеровГТД.НомерРНПТКомплекта") Тогда
					ТекущаяСтрока[ИмяПоляКоличествоПоРНПТ] = ТекущаяСтрока[ИмяПоляКоличество];
				КонецЕсли;
			Иначе
				Коэффициент = ПолучитьКоэффициентРНПТ(ПараметрыПересчета, ТекущаяСтрока, КэшированныеЗначения);
				
				ТекущаяСтрока[ИмяПоляКоличествоПоРНПТ] = ТекущаяСтрока[ИмяПоляКоличество] * Коэффициент;
			КонецЕсли;
		Иначе
			ТекущаяСтрока[ИмяПоляКоличествоПоРНПТ] = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает количество товара (в единицах хранения), имеющего заданный признак, в текущей строке табличной 
// части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьКоличествоЕдиницСуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем ПараметрыПересчетаСуффикс;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницСуффикс", ПараметрыПересчетаСуффикс) Тогда
		
		ПараметрыПересчета = НормализоватьПараметрыПересчетаЕдиницСуффикс(ТекущаяСтрока, ПараметрыПересчетаСуффикс);
		КоличествоССуффиксом = КоличествоССуффиксом(ПараметрыПересчета.Суффикс);
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			ДанныеУпаковки = ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения, ТекущаяСтрока.Номенклатура);
			Количество = ТекущаяСтрока[КоличествоССуффиксом.КоличествоУпаковок] * ДанныеУпаковки.Коэффициент;
			
			Если ДанныеУпаковки.НужноОкруглятьКоличество
				И ПараметрыПересчета.НужноОкруглять Тогда
				ТекущаяСтрока[КоличествоССуффиксом.Количество] = Окр(Количество, 0 ,РежимОкругления.Окр15как20);
			Иначе
				ТекущаяСтрока[КоличествоССуффиксом.Количество] = Количество;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, КоличествоССуффиксом.КоличествоУпаковок) Тогда
			ТекущаяСтрока[КоличествоССуффиксом.Количество] = ТекущаяСтрока[КоличествоССуффиксом.КоличествоУпаковок];
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает количество упаковок товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьКоличествоУпаковокВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		Если ТекущаяСтрока.Количество = 0 Тогда
			ТекущаяСтрока.КоличествоУпаковок = 0;
		Иначе
			Коэффициент = ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения, ТекущаяСтрока.Номенклатура).Коэффициент;
			Если Коэффициент <> 0 Тогда
				ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.Количество / Коэффициент;
			Иначе
				ТекстИсключения = НСтр("ru = 'При попытке пересчета количества в %ЕдИзмерения% превышена допустимая разрядность.'");
				ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ЕдИзмерения%", ТекущаяСтрока.Упаковка);
				
				ТекущаяСтрока.Количество = 0;
				ТекущаяСтрока.КоличествоУпаковок = 0;
				ТекущаяСтрока.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
				
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Пересчитывает количество упаковок товара, имеющего заданный признак, в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьКоличествоУпаковокСуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 
	
	Перем ПараметрыПересчетаСуффикс;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффикс",ПараметрыПересчетаСуффикс) Тогда
		ПараметрыПересчета = НормализоватьПараметрыПересчетаЕдиницСуффикс(ТекущаяСтрока, ПараметрыПересчетаСуффикс);
		КоличествоССуффиксом = КоличествоССуффиксом(ПараметрыПересчета.Суффикс);
		Если ТекущаяСтрока[КоличествоССуффиксом.Количество] = 0 Тогда
			ТекущаяСтрока[КоличествоССуффиксом.КоличествоУпаковок] = 0;
		Иначе
			Коэффициент = ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения, ТекущаяСтрока.Номенклатура).Коэффициент;
			Если Коэффициент <> 0 Тогда
				ТекущаяСтрока[КоличествоССуффиксом.КоличествоУпаковок] = ТекущаяСтрока[КоличествоССуффиксом.Количество] / Коэффициент;
			Иначе
				ТекстИсключения = НСтр("ru = 'При попытке пересчета количества в %ЕдИзмерения% превышена допустимая разрядность.'");
				ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ЕдИзмерения%", ТекущаяСтрока.Упаковка);
				
				ТекущаяСтрока[КоличествоССуффиксом.Количество] = 0;
				ТекущаяСтрока[КоличествоССуффиксом.КоличествоУпаковок] = 0;
				ТекущаяСтрока.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
				
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает отклонения по количеству упаковок товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьКоличествоОтклонение(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 

	Перем ЕстьУпаковки;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоОтклонение", ЕстьУпаковки) Тогда
		ТекущаяСтрока.КоличествоОтклонение = ТекущаяСтрока.КоличествоФакт - ТекущаяСтрока.Количество;
		Если ЕстьУпаковки Тогда
			ТекущаяСтрока.КоличествоУпаковокОтклонение = ТекущаяСтрока.КоличествоУпаковокФакт - ТекущаяСтрока.КоличествоУпаковок;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Пересчитывает отклонения по количеству упаковок товара, имеющего заданный признак, в текущей строке 
// табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьКоличествоУпаковокСуффиксИзОтклоненияВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт 
	
	Суффикс = Неопределено;

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффиксИзОтклонения",Суффикс) Тогда
		Если Суффикс = Неопределено Тогда
			Суффикс = "";
		КонецЕсли;
		ТекущаяСтрока[КоличествоССуффиксом(Суффикс).КоличествоУпаковок] = ТекущаяСтрока["КоличествоУпаковок"]
																		+ ТекущаяСтрока["КоличествоУпаковокОтклонение"];
	КонецЕсли;

КонецПроцедуры

// Заполняет вид цен в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьВидЦеныВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВидЦены", СтруктураПараметровДействия) Тогда
		
		ИмяПоляВидЦены = "ВидЦены";
		Если СтруктураПараметровДействия.Свойство("ИмяПоляВидЦены") Тогда
			ИмяПоляВидЦены = СтруктураПараметровДействия.ИмяПоляВидЦены
		КонецЕсли;
		
		ТекущаяСтрока[ИмяПоляВидЦены] = СтруктураПараметровДействия.ВидЦены;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВидЦеныВСтрокеТЧ()

// Пересчитывает цену за упаковку товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьЦенуЗаУпаковкуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем КоличествоЕдиницДоПересчета;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку", КоличествоЕдиницДоПересчета)
	   И КоличествоЕдиницДоПересчета <> 0 Тогда
		ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Цена
		   / КоличествоЕдиницДоПересчета
		   * ТекущаяСтрока.Количество, 2, РежимОкругления.Окр15как20);
	КонецЕсли;

КонецПроцедуры

// Пересчитывает цену за упаковку товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьЦенуЗаУпаковкуСуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем ПараметрыПересчета;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковкуСуффикс", ПараметрыПересчета) Тогда
		Суффикс = ПараметрыПересчета.Суффикс;
		КоличествоЕдиницДоПересчета = ПараметрыПересчета.Количество;
		Если КоличествоЕдиницДоПересчета <> 0 Тогда
			ТекущаяСтрока[ЦенаССуффиксом(Суффикс)] = Окр(ТекущаяСтрока[ЦенаССуффиксом(Суффикс)]
			   / КоличествоЕдиницДоПересчета
			   * ТекущаяСтрока[КоличествоССуффиксом(Суффикс).Количество], 2, РежимОкругления.Окр15как20);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Пересчитывает цену заказа за упаковку товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьЦенуЗаказаЗаУпаковкуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем КоличествоЕдиницДоПересчета;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаказаЗаУпаковку", КоличествоЕдиницДоПересчета)
	   И КоличествоЕдиницДоПересчета <> 0 Тогда
		ТекущаяСтрока.ЦенаЗаказа = Окр(ТекущаяСтрока.ЦенаЗаказа
		   / КоличествоЕдиницДоПересчета
		   * ТекущаяСтрока.Количество, 2, РежимОкругления.Окр15как20);
	КонецЕсли;

КонецПроцедуры

// Заполняет значение ставки НДС возвратной тары в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьСтавкуНДСВозвратнойТарыВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ЭтоВозвратнаяТара;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСВозвратнойТары", ЭтоВозвратнаяТара)
		И ЭтоВозвратнаяТара И ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда
		ТекущаяСтрока.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС");
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает процент ручной скидки от стоимости товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьПроцентРучнойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьПроцентРучнойСкидки", ИмяКоличества) Тогда
		Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок";
		КонецЕсли;
		Если ТекущаяСтрока[ИмяКоличества] * ТекущаяСтрока.Цена <> 0 Тогда
			ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / (ТекущаяСтрока[ИмяКоличества] *ТекущаяСтрока.Цена), 2);
		Иначе
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает сумму ручной скидки на товар в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьСуммуРучнойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяКоличества = Неопределено;
		
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРучнойСкидки", ИмяКоличества) Тогда
		
		Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок"; 
		КонецЕсли;
			
		ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока[ИмяКоличества] *ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентРучнойСкидки / 100, 2);
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает сумму товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьСуммуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСумму", ИмяКоличества) Тогда
		Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок";
		КонецЕсли;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКоличества];
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Пересчитывает сумму товара, имеющего заданный признак, в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьСуммуСуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ПараметрыПересчета = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСуффикс", ПараметрыПересчета) Тогда
		Если ТипЗнч(ПараметрыПересчета) = Тип("Структура") Тогда
			ИмяКоличества = ПараметрыПересчета.ИмяКоличества;
			Суффикс = ПараметрыПересчета.Суффикс;
		Иначе
			ИмяКоличества = "КоличествоУпаковок";
			Суффикс = ПараметрыПересчета;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Суффикс) Тогда
			Суффикс = ""
		КонецЕсли;
		
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущаяСтрока[СуммаССуффиксом(Суффикс).Сумма] = ТекущаяСтрока[ЦенаССуффиксом(Суффикс)] * ТекущаяСтрока[КоличествоССуффиксом(Суффикс)[ИмяКоличества]];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму товара, имеющего заданный признак, в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьСуммуНДССуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем СтруктураПараметровДействия;
	Перем СтавкаНДС;
		
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДССуффикс", СтруктураПараметровДействия) Тогда
	
		НалогообложениеНДС = Неопределено;
		СтруктураПараметровДействия.Свойство("НалогообложениеНДС", НалогообложениеНДС);
		
		Суффикс = "";
		
		Если СтруктураПараметровДействия.Свойство("Суффикс", Суффикс)
			И Не ЗначениеЗаполнено(Суффикс) Тогда
			Суффикс = "";
		КонецЕсли;
		
		СуммаССуффиксом = СуммаССуффиксом(Суффикс);
		СтавкаССуффиксом = СтавкаССуффиксом(Суффикс);
		
		Если Не (СтруктураПараметровДействия <> Неопределено
				И СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС)) Тогда
			
			СтавкаНДС = ТекущаяСтрока[СтавкаССуффиксом.СтавкаНДС];
			
		КонецЕсли;
		
		Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
			ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[СтавкаНДС];
		Иначе
			ТекПроцентНДС = Неопределено;
			
			КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
		КонецЕсли;
		
		Если ТекПроцентНДС = Неопределено Тогда
			
			ТекПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
			КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(СтавкаНДС, ТекПроцентНДС);
			
		КонецЕсли;
		
		ТекущаяСтрока[СуммаССуффиксом.СуммаНДС] = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
			ТекущаяСтрока[СуммаССуффиксом.Сумма],
			ТекПроцентНДС,
			СтруктураПараметровДействия.ЦенаВключаетНДС,
			НалогообложениеНДС);
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает сумму товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьСуммуВСтрокеТЧРасхождения(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ПересчитатьСуммуРасхождения") Тогда
		Если ТекущаяСтрока <> Неопределено Тогда
			Если ТекущаяСтрока.КоличествоУпаковокПоДокументу = 0 Тогда
				ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
			Иначе
				ДоляРасхождения = ТекущаяСтрока.КоличествоУпаковок / ТекущаяСтрока.КоличествоУпаковокПоДокументу;
				ТекущаяСтрока.Сумма = ТекущаяСтрока.СуммаПоДокументу * ДоляРасхождения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Формирует названия идентификаторов цены с суффиксом
//
// Параметры:
//  Суффикс - Строка
//
// Возвращаемое значение:
//  Строка - имя поля цена.
//
Функция ЦенаССуффиксом(Суффикс) Экспорт
	
	Если Суффикс = "Забаланс" Тогда
		ИмяПоляЦена = "ЦенаЗабаланс";
	ИначеЕсли Суффикс = "После" Тогда
		ИмяПоляЦена = "ЦенаПосле";
	Иначе
		ИмяПоляЦена = "Цена";
	КонецЕсли;
	
	Возврат ИмяПоляЦена;
	
КонецФункции

// Формирует названия идентификаторов суммы с суффиксом
// 
// Параметры:
// 	Суффикс - Строка - суффикс
// 
// Возвращаемое значение:
// 	Структура - набор названий идентификаторов. Описание:
// * Сумма - Строка - "Сумма" + суффикс
// * СуммаНДС - Строка - "СуммаНДС" + суффикс
// * СуммаСНДС - Строка - "СуммаСНДС" + суффикс
//
Функция СуммаССуффиксом(Суффикс) Экспорт
	
	СтруктураВозврата = Новый Структура("Сумма, СуммаНДС, СуммаСНДС, СуммаВзаиморасчетов, СуммаБезНДСРегл, СуммаБезНДСУпр");
	
	Если Не ЗначениеЗаполнено(Суффикс) Тогда
		СтруктураВозврата.Сумма = "Сумма";
		СтруктураВозврата.СуммаНДС = "СуммаНДС";
		СтруктураВозврата.СуммаСНДС = "СуммаСНДС";
		СтруктураВозврата.СуммаВзаиморасчетов = "СуммаВзаиморасчетов";
		СтруктураВозврата.СуммаБезНДСРегл = "СуммаБезНДСРегл";
		СтруктураВозврата.СуммаБезНДСУпр = "СуммаБезНДСУпр";
	ИначеЕсли Суффикс = "ПоДокументу" Тогда
		СтруктураВозврата.Сумма = "СуммаПоДокументу";
		СтруктураВозврата.СуммаНДС = "СуммаНДСПоДокументу";
		СтруктураВозврата.СуммаСНДС = "СуммаСНДСПоДокументу";
		СтруктураВозврата.СуммаВзаиморасчетов = "";
		СтруктураВозврата.СуммаБезНДСРегл = "";
		СтруктураВозврата.СуммаБезНДСУпр = "";		
	ИначеЕсли Суффикс = "После" Тогда
		СтруктураВозврата.Сумма = "СуммаПосле";
		СтруктураВозврата.СуммаНДС = "СуммаНДСПосле";
		СтруктураВозврата.СуммаСНДС = "СуммаСНДСПосле";
		СтруктураВозврата.СуммаВзаиморасчетов = "СуммаВзаиморасчетовПосле";
		СтруктураВозврата.СуммаБезНДСРегл = "СуммаБезНДСРеглПосле";
		СтруктураВозврата.СуммаБезНДСУпр = "СуммаБезНДСУпрПосле";
	ИначеЕсли Суффикс = "Забаланс" Тогда
		СтруктураВозврата.Сумма     = "СуммаЗабаланс";
		СтруктураВозврата.СуммаНДС  = "";
		СтруктураВозврата.СуммаСНДС = "";
		СтруктураВозврата.СуммаВзаиморасчетов = "";
		СтруктураВозврата.СуммаБезНДСРегл = "";
		СтруктураВозврата.СуммаБезНДСУпр = "";
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный суффикс для суммы:'") + " " + Суффикс;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Формирует названия идентификаторов ставки НДС с суффиксом
// 
// Параметры:
// 	Суффикс - Строка - суффикс
// Возвращаемое значение:
// 	Структура - набор названий идентификаторов. Описание:
// * СтавкаНДС - Строка - "СтавкаНДС" + суффикс
Функция СтавкаССуффиксом(Суффикс) Экспорт
	
	СтруктураВозврата = Новый Структура("СтавкаНДС");
	
	Если Не ЗначениеЗаполнено(Суффикс) Тогда
		СтруктураВозврата.СтавкаНДС = "СтавкаНДС";
	ИначеЕсли Суффикс = "ПоДокументу" Тогда
		СтруктураВозврата.СтавкаНДС = "СтавкаНДС";
	ИначеЕсли Суффикс = "После" Тогда
		СтруктураВозврата.СтавкаНДС = "СтавкаНДСПосле";
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный суффикс для ставки:'") + " " + Суффикс;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции


// Пересчитывает цену скидки в текущей строке.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПараметровДействия) Тогда
		
		ИспользоватьРучныеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИспользоватьАвтоматическиеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьАвтоматическиеСкидки") Тогда
				ИспользоватьАвтоматическиеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИспользоватьБонусныеБаллы = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьБонусныеБаллы") Тогда
				ИспользоватьБонусныеБаллы = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИмяКоличества = "КоличествоУпаковок";
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если НЕ СтруктураПараметровДействия.Свойство("ИмяКоличества",ИмяКоличества) Тогда
				ИмяКоличества = "КоличествоУпаковок";
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах = Неопределено Тогда
			КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах = 
				ОбщегоНазначенияУТВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьРучныеСкидкиВПродажах");
		КонецЕсли;
		
		Если ИспользоватьАвтоматическиеСкидки И КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах = Неопределено Тогда
			КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах = 
				ОбщегоНазначенияУТВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьАвтоматическиеСкидкиВПродажах");
		КонецЕсли;
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену.
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах Тогда
			
			Если ТекущаяСтрока.Сумма = 0 Или ТекущаяСтрока[ИмяКоличества] = 0 Тогда
				
				ТекущаяСтрока.Цена                = 0;
				ТекущаяСтрока.СуммаРучнойСкидки   = 0;
				
			Иначе
				Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) И ТекущаяСтрока.Цена = 0 Тогда
					ТекущаяСтрока.СуммаРучнойСкидки = 0;
					ТекущаяСтрока.ПроцентРучнойСкидки = 0;
				ИначеЕсли ТекущаяСтрока.Цена = 0 Тогда
					Если ИспользоватьБонусныеБаллы Тогда
						Если ЗначениеЗаполнено(ТекущаяСтрока.ПроцентРучнойСкидки) Тогда
							ТекущаяСтрока.СуммаРучнойСкидки = ((ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаБонусныхБалловКСписаниюВВалюте) * ТекущаяСтрока.ПроцентРучнойСкидки)  / (100 - ТекущаяСтрока.ПроцентРучнойСкидки);
						КонецЕсли;
						ТекущаяСтрока.Цена = Окр((ТекущаяСтрока.Сумма + ТекущаяСтрока.СуммаРучнойСкидки + ТекущаяСтрока.СуммаБонусныхБалловКСписаниюВВалюте) / ТекущаяСтрока[ИмяКоличества], 2);
					Иначе
						Если ЗначениеЗаполнено(ТекущаяСтрока.ПроцентРучнойСкидки) Тогда
							ТекущаяСтрока.СуммаРучнойСкидки = (ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентРучнойСкидки)  / (100 - ТекущаяСтрока.ПроцентРучнойСкидки);
						КонецЕсли;
						ТекущаяСтрока.Цена = Окр((ТекущаяСтрока.Сумма + ТекущаяСтрока.СуммаРучнойСкидки) / ТекущаяСтрока[ИмяКоличества], 2);
					КонецЕсли;
				Иначе
					СуммаБезСкидки = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКоличества];
					Если ИспользоватьБонусныеБаллы Тогда
						ТекущаяСтрока.СуммаРучнойСкидки   = СуммаБезСкидки - ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаБонусныхБалловКСписаниюВВалюте;
					Иначе
						ТекущаяСтрока.СуммаРучнойСкидки   = СуммаБезСкидки - ТекущаяСтрока.Сумма;
					КонецЕсли;
					ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / СуммаБезСкидки, 2);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ТекущаяСтрока.Сумма = 0 Или ТекущаяСтрока[ИмяКоличества] = 0 Тогда
				ТекущаяСтрока.Цена = 0;
			Иначе
				Если ИспользоватьБонусныеБаллы Тогда
					ТекущаяСтрока.Цена = Окр((ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаБонусныхБалловКСписаниюВВалюте) / ТекущаяСтрока[ИмяКоличества], 2);
				Иначе
					ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока[ИмяКоличества], 2);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьАвтоматическиеСкидки Тогда
			Если КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
				ТекущаяСтрока.СуммаАвтоматическойСкидки   = 0;
				ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает цену и сумму ручной скидки от стоимости товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", СтруктураПараметровДействия) Тогда
		
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену.
		ИспользоватьРучныеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИмяКоличества = "КоличествоУпаковок";
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если НЕ СтруктураПараметровДействия.Свойство("ИмяКоличества",ИмяКоличества) Тогда
				ИмяКоличества = "КоличествоУпаковок";
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках = Неопределено Тогда
			КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках =
				ОбщегоНазначенияУТВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьРучныеСкидкиВЗакупках");
		КонецЕсли;
		
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену.
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках Тогда
			
			Если ТекущаяСтрока.Сумма = 0 Или ТекущаяСтрока[ИмяКоличества] = 0 Тогда
				
				ТекущаяСтрока.Цена                = 0;
				ТекущаяСтрока.СуммаРучнойСкидки   = 0;
				
			Иначе
				
				Если ТекущаяСтрока.Цена = 0 Тогда
					Если ЗначениеЗаполнено(ТекущаяСтрока.ПроцентРучнойСкидки) Тогда
						ТекущаяСтрока.СуммаРучнойСкидки = (ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентРучнойСкидки)  / (100 - ТекущаяСтрока.ПроцентРучнойСкидки);
					КонецЕсли;
					ТекущаяСтрока.Цена = Окр((ТекущаяСтрока.Сумма + ТекущаяСтрока.СуммаРучнойСкидки) / ТекущаяСтрока[ИмяКоличества], 2);
				Иначе
					СуммаБезСкидки = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКоличества];
					ТекущаяСтрока.СуммаРучнойСкидки   = СуммаБезСкидки - ТекущаяСтрока.Сумма;
					ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / СуммаБезСкидки, 2);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ТекущаяСтрока.Сумма = 0 Или ТекущаяСтрока[ИмяКоличества] = 0 Тогда
				ТекущаяСтрока.Цена = 0;
			Иначе
				ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока[ИмяКоличества], 2);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает цену от стоимости товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьЦенуПоСуммеВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПоСумме", ИмяКоличества) Тогда
		Если Не ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок";
		КонецЕсли;
		Если ТекущаяСтрока[ИмяКоличества] = 0 Тогда
			ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
		Иначе
			ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока[ИмяКоличества], 2);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


// Пересчитывает цену продажи товара от суммы продажи в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьЦенуПродажиПоСуммеПродажиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПродажиПоСуммеПродажи") Тогда
		
		ТекущаяСтрока.ЦенаПродажи = ?(ТекущаяСтрока.КоличествоУпаковок <> 0, Окр(ТекущаяСтрока.СуммаПродажи / ТекущаяСтрока.КоличествоУпаковок, 2, 1), 0);
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает стоимость товара с учетом скидки в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки", СтруктураПараметровДействия) Тогда
		
		Очищать = Неопределено;
		СтруктураПараметровДействия.Свойство("Очищать", Очищать);
		
		Если Очищать Тогда
			
			ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
			ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
			
		КонецЕсли;
		
		Скидка = ТекущаяСтрока.СуммаАвтоматическойСкидки;
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - Скидка;
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает стоимость товара с учетом ручной скидки в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки", СтруктураПараметровДействия) Тогда
		
		Очищать = Неопределено;
		ПересчитыватьСуммуРучнойСкидки = Неопределено;
		ИмяКоличества = Неопределено;
		
		Если СтруктураПараметровДействия <> Неопределено Тогда
			
			СтруктураПараметровДействия.Свойство("Очищать", Очищать);
			СтруктураПараметровДействия.Свойство("ПересчитыватьСуммуРучнойСкидки", ПересчитыватьСуммуРучнойСкидки);
			СтруктураПараметровДействия.Свойство("ИмяКоличества", ИмяКоличества);
			
			Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
				ИмяКоличества = "КоличествоУпаковок";
			КонецЕсли;
			
			Если Очищать = Истина Тогда
				
				ТекущаяСтрока.СуммаРучнойСкидки = 0;
				ТекущаяСтрока.ПроцентРучнойСкидки = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПересчитыватьСуммуРучнойСкидки = Ложь Тогда
			
		Иначе
			ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока[ИмяКоличества] *ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентРучнойСкидки / 100, 2);
		КонецЕсли;
			
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаРучнойСкидки;
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает стоимость товара с учетом скидки по бонусным баллам в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьСуммуСУчетомСкидкиБонуснымиБалламиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами", СтруктураПараметровДействия) Тогда
		
		ПересчитыватьСуммуБонусныхБалловПоСтроке = Неопределено;
		
		Если СтруктураПараметровДействия <> Неопределено Тогда
			
			СтруктураПараметровДействия.Свойство("ПересчитыватьСуммуБонусныхБалловПоСтроке", ПересчитыватьСуммуБонусныхБалловПоСтроке);
			
		КонецЕсли;
		
		Если ПересчитыватьСуммуБонусныхБалловПоСтроке = Истина Тогда
			
			ИмяКоличества = "КоличествоУпаковок";
			ИмяКоличестваИсходное = "КоличествоУпаковокВЗаказе";
			
			ПарыРеквизитовДляПересчета = Новый Соответствие;
			ПарыРеквизитовДляПересчета.Вставить("СуммаБонусныхБалловКСписанию",
												"СуммаБонусныхБалловКСписаниюПоЗаказу");
			ПарыРеквизитовДляПересчета.Вставить("СуммаБонусныхБалловКСписаниюВВалюте",
												"СуммаБонусныхБалловКСписаниюВВалютеПоЗаказу");
			
			КолвоУпаковок = ТекущаяСтрока[ИмяКоличества];
			КолвоУпаковокИсходное = ТекущаяСтрока[ИмяКоличестваИсходное];
			Если КолвоУпаковок < КолвоУпаковокИсходное Тогда
				Для Каждого Элем Из ПарыРеквизитовДляПересчета Цикл
					ТекущаяСтрока[Элем.Ключ] = ТекущаяСтрока[Элем.Значение]*КолвоУпаковок/КолвоУпаковокИсходное;
				КонецЦикла;
			Иначе
				Для Каждого Элем Из ПарыРеквизитовДляПересчета Цикл
					ТекущаяСтрока[Элем.Ключ] = ТекущаяСтрока[Элем.Значение];
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеДляПересчета = Неопределено;
		ИмяКоличества = Неопределено;

		Если СтруктураПараметровДействия <> Неопределено Тогда
			
			СтруктураПараметровДействия.Свойство("ПересчитыватьСумму", ДанныеДляПересчета);
			СтруктураПараметровДействия.Свойство("ИмяКоличества", ИмяКоличества);
			
			Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
				ИмяКоличества = "КоличествоУпаковок";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеДляПересчета) Тогда
				ТекущаяСтрока.СуммаБонусныхБалловКСписаниюВВалюте =  Мин(Окр(
													ДанныеДляПересчета.СуммаБонусныхБалловКСписаниюВВалюте 
													* ТекущаяСтрока[ИмяКоличества] 
													/ ДанныеДляПересчета[ИмяКоличества], 2, РежимОкругления.Окр15как20),
													ДанныеДляПересчета.СуммаБонусныхБалловКСписаниюВВалюте);
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаБонусныхБалловКСписаниюВВалюте;
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает стоимость товара с НДС в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьСуммуСНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС", СтруктураПараметровДействия) Тогда
		
		ТекущаяСтрока.СуммаСНДС = ТекущаяСтрока.Сумма + ?(СтруктураПараметровДействия.ЦенаВключаетНДС, 0, ТекущаяСтрока.СуммаНДС);
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает стоимость товара с НДС, имеющего заданный признак, в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьСуммуСНДССуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Суффикс = "";
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДССуффикс", СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.Свойство("Суффикс", Суффикс)
			И Не ЗначениеЗаполнено(Суффикс) Тогда
			
			Суффикс = "";
			
		КонецЕсли;
		
		СуммаССуффиксом = СуммаССуффиксом(Суффикс);
		
		ТекущаяСтрока[СуммаССуффиксом.СуммаСНДС] = Окр(ТекущаяСтрока[СуммаССуффиксом.Сумма]
			+ ?(СтруктураПараметровДействия.ЦенаВключаетНДС, 0, ТекущаяСтрока[СуммаССуффиксом.СуммаНДС]), 2, РежимОкругления.Окр15как20);
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает стоимость товара без НДС в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьСуммуБезНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДС") Тогда
		
	    ТекущаяСтрока.СуммаБезНДС = Окр(ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаНДС, 2, РежимОкругления.Окр15как20);
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает стоимость товара в валюте регламентированного учета в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьСуммуРеглВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем КоэффициентПересчетаИзВалютыУпрВРегл;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРегл", КоэффициентПересчетаИзВалютыУпрВРегл) Тогда
		ТекущаяСтрока.СуммаРегл = Окр(ТекущаяСтрока.СуммаБезНДС * КоэффициентПересчетаИзВалютыУпрВРегл, 2, 1);
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму постоянной разницы в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьСуммуПРВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПР") И НЕ ТекущаяСтрока.ПринимаетсяКНУ Тогда
		ТекущаяСтрока.СуммаПР = ТекущаяСтрока.СуммаРегл;
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму НДС в валюте регламентированного учета в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьНДСРеглВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьНДСРегл", СтруктураПараметровДействия) Тогда
		
		НалогообложениеНДС = Неопределено;
		СтруктураПараметровДействия.Свойство("НалогообложениеНДС", НалогообложениеНДС);
		
		СтавкаНДС = Неопределено;
		Если Не СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС) Тогда
			СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		КонецЕсли;
		
		Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
			ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[СтавкаНДС];
		Иначе
			КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
			ТекПроцентНДС = Неопределено;
		КонецЕсли;
		
		Если ТекПроцентНДС = Неопределено Тогда
			
			ТекПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
			КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(СтавкаНДС, ТекПроцентНДС);
			
		КонецЕсли;
		
		ТекущаяСтрока.НДСРегл = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
			ТекущаяСтрока.СуммаРегл,
			ТекПроцентНДС,
			Ложь,
			НалогообложениеНДС);
			
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает стоимость товара без НДС в валюте регламентированного учета в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьСуммуБезНДСРеглВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДСРегл", СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.ЦенаВключаетНДС Тогда
			ТекущаяСтрока.СуммаБезНДСРегл = ТекущаяСтрока.СуммаСНДС - ТекущаяСтрока.СуммаНДС;
		Иначе
			ТекущаяСтрока.СуммаБезНДСРегл = ТекущаяСтрока.Сумма;
		КонецЕсли;
		Если Не СтруктураПараметровДействия.ПоСуммеДокумента Тогда
			ТекущаяСтрока.СуммаБезНДСРегл = Окр(ТекущаяСтрока.СуммаБезНДСРегл * СтруктураПараметровДействия.КоэффициентПересчетаИзВалютыДокумента + 0.005, 2, 1);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает стоимость товара без НДС в валюте регламентированного учета в текущей строке табличной части документа с суффиксом.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьСуммуБезНДСРеглСуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДСРеглСуффикс", СтруктураПараметровДействия) Тогда
		
		Суффикс = "";
		
		Если СтруктураПараметровДействия.Свойство("Суффикс", Суффикс)
			И Не ЗначениеЗаполнено(Суффикс) Тогда
			Суффикс = "";
		КонецЕсли;
		
		СуммаССуффиксом = СуммаССуффиксом(Суффикс);

		Если СтруктураПараметровДействия.ЦенаВключаетНДС Тогда
			ТекущаяСтрока[СуммаССуффиксом.СуммаБезНДСРегл] = ТекущаяСтрока[СуммаССуффиксом.СуммаСНДС] - ТекущаяСтрока[СуммаССуффиксом.СуммаНДС];
		Иначе
			ТекущаяСтрока[СуммаССуффиксом.СуммаБезНДСРегл] = ТекущаяСтрока[СуммаССуффиксом.Сумма];
		КонецЕсли;
		Если Не СтруктураПараметровДействия.ПоСуммеДокумента Тогда
			ТекущаяСтрока[СуммаССуффиксом.СуммаБезНДСРегл] = Окр(ТекущаяСтрока[СуммаССуффиксом.СуммаБезНДСРегл] * СтруктураПараметровДействия.КоэффициентПересчетаИзВалютыДокумента + 0.005, 2, 1);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает стоимость товара без НДС в валюте управленческого учета в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьСуммуБезНДСУпрВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДСУпр", СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.ЦенаВключаетНДС Тогда
			ТекущаяСтрока.СуммаБезНДСУпр = ТекущаяСтрока.СуммаСНДС - ТекущаяСтрока.СуммаНДС;
		Иначе
			ТекущаяСтрока.СуммаБезНДСУпр = ТекущаяСтрока.Сумма;
		КонецЕсли;
		Если Не СтруктураПараметровДействия.ПоСуммеДокумента Тогда
			ТекущаяСтрока.СуммаБезНДСУпр = Окр(ТекущаяСтрока.СуммаБезНДСУпр * СтруктураПараметровДействия.КоэффициентПересчетаИзВалютыДокумента + 0.005, 2, 1);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает стоимость товара без НДС в валюте управленческого учета в текущей строке табличной части документа с суффиксом.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьСуммуБезНДСУпрСуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДСУпрСуффикс", СтруктураПараметровДействия) Тогда
		
		Суффикс = "";
		
		Если СтруктураПараметровДействия.Свойство("Суффикс", Суффикс)
			И Не ЗначениеЗаполнено(Суффикс) Тогда
			Суффикс = "";
		КонецЕсли;
		
		СуммаССуффиксом = СуммаССуффиксом(Суффикс);

		Если СтруктураПараметровДействия.ЦенаВключаетНДС Тогда
			ТекущаяСтрока[СуммаССуффиксом.СуммаБезНДСУпр] = ТекущаяСтрока[СуммаССуффиксом.СуммаСНДС] - ТекущаяСтрока[СуммаССуффиксом.СуммаНДС];
		Иначе
			ТекущаяСтрока[СуммаССуффиксом.СуммаБезНДСУпр] = ТекущаяСтрока[СуммаССуффиксом.Сумма];
		КонецЕсли;
		Если Не СтруктураПараметровДействия.ПоСуммеДокумента Тогда
			ТекущаяСтрока[СуммаССуффиксом.СуммаБезНДСУпр] = Окр(ТекущаяСтрока[СуммаССуффиксом.СуммаБезНДСУпр] * СтруктураПараметровДействия.КоэффициентПересчетаИзВалютыДокумента + 0.005, 2, 1);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму продажи товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьСуммуПродажиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажи", СтруктураПараметровДействия) Тогда
	
		ТекущаяСтрока.СуммаПродажи = ТекущаяСтрока.ЦенаПродажи * ТекущаяСтрока.КоличествоУпаковок;
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает сумму продажи НДС товара в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьСуммуПродажиНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажиНДС", СтруктураПараметровДействия) Тогда
		
		НалогообложениеНДС = Неопределено;
		Если СтруктураПараметровДействия <> Неопределено 
			И СтруктураПараметровДействия.Свойство("НалогообложениеНДС", НалогообложениеНДС) Тогда
			Если НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя") 
				Или НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДССМежценовойРазницы") Тогда
				// Пересчет не требуется 
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		СтавкаНДС = Неопределено;
		Если СтруктураПараметровДействия = Неопределено Или Не СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС) Тогда
			СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		КонецЕсли;
		
		Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
			ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[СтавкаНДС];
		Иначе
			КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
			ТекПроцентНДС = Неопределено;
		КонецЕсли;
		
		Если ТекПроцентНДС = Неопределено Тогда
			
			ТекПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
			КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(СтавкаНДС, ТекПроцентНДС);
			
		КонецЕсли;
		
		ТекущаяСтрока.СуммаПродажиНДС = Окр(ТекущаяСтрока.СуммаПродажи * ТекПроцентНДС / (100 + ТекПроцентНДС), 2, РежимОкругления.Окр15как20);
	КонецЕсли;

КонецПроцедуры

// Устанавливает признак активности строки в табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура УстановитьАктивностьСтроки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("УстановитьАктивность") Тогда
		ТекущаяСтрока.Активность = Истина;
	КонецЕсли;
	
КонецПроцедуры


// Заполняет поле назначения товара (услуги) в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПроверитьЗаполнитьНазначениеВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Назначение = Неопределено;
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьНазначение", Назначение) Тогда
		
		ТекущаяСтрока.Назначение = ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка");
		
		Если Назначение <> Неопределено Тогда
			
			Если ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
				Или ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
				
				ТекущаяСтрока.Назначение = Назначение;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет поле назначения товара (услуги) в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьФлагОбособленноПоНазначению(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ИмяРеквизитаОтгружатьОбособленно = Неопределено;
	Если СтруктураДействий.Свойство("ЗаполнитьФлагОбособленноПоНазначению", ИмяРеквизитаОтгружатьОбособленно) Тогда
		
		ТекущаяСтрока[ИмяРеквизитаОтгружатьОбособленно] = ЗначениеЗаполнено(ТекущаяСтрока.Назначение);
		
	КонецЕсли;

КонецПроцедуры

// Заполняет поля, используемые для отражения расхождений и излишков по товару в текущей строке табличной 
// части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьФлагРасхождение(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагРасхождение") Тогда
		ТекущаяСтрока.Расхождение = (ТекущаяСтрока.КоличествоУпаковок <> ТекущаяСтрока.КоличествоУпаковокФакт);		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет поля, используемые для отражения расхождений и излишков по товару в текущей строке табличной 
// части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьКоличествоУпаковокОтклонение(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокОтклонение") Тогда
		ТекущаяСтрока.КоличествоУпаковокОтклонение 
			= ТекущаяСтрока.КоличествоУпаковокФакт - ТекущаяСтрока.КоличествоУпаковок;
	КонецЕсли;
		
КонецПроцедуры

// Заполняет поля, используемые для отражения расхождений и излишков по товару в текущей строке табличной 
// части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьФлагИзлишекПорча(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда
		ТекущаяСтрока.ИзлишекПорча = Истина;		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает нулевое значение в поле суммы взаиморасчетов по товару в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ОчиститьСуммуВзаиморасчетовВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВзаиморасчетов") Тогда
		
		ТекущаяСтрока.СуммаВзаиморасчетов = 0;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает нулевое значение в поле суммы взаиморасчетов (с суффиксом) по товару в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ОчиститьСуммуВзаиморасчетовСуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Суффикс = Неопределено;
	Если СтруктураДействий.Свойство("ОчиститьСуммуВзаиморасчетовСуффикс", Суффикс) Тогда
	
		Если ЗначениеЗаполнено(Суффикс) Тогда
			ТекущаяСтрока[СуммаССуффиксом(Суффикс).СуммаВзаиморасчетов] = 0;
		Иначе
			ТекущаяСтрока.СуммаВзаиморасчетов = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает нулевые значения в полях Сумма НДС (регл.) и Сумма НДС (упр.)
// в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ОчиститьСуммуНДСРеглУпрВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуНДСРеглУпр") Тогда
		
		ТекущаяСтрока.СуммаНДСРегл = 0;
		ТекущаяСтрока.СуммаНДСУпр = 0;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает нулевое значение для процента и суммы скидки по товару в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ОчиститьАвтоматическуюСкидкуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Если СтруктураДействий.Свойство("ОчиститьАвтоматическуюСкидку") Тогда
		
		ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
		ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает нулевое значение для суммы вознаграждения по товару в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ОчиститьСуммуВознагражденияВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВознаграждения", СтруктураПараметровДействия) Тогда
	
		ТекущаяСтрока.СуммаВознаграждения = 0;
		
	КонецЕсли;

КонецПроцедуры

// Заполняет поле партнера предопределенным значением в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьПартнера(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьПартнера") Тогда
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Партнер) Тогда
			ТекущаяСтрока.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.РозничныйПокупатель");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет признак безвозвратной тары в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьПризнакБезВозвратнойТары(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем ВернутьМногооборотнуюТару;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакБезВозвратнойТары", ВернутьМногооборотнуюТару) Тогда
	
		ТекущаяСтрока.БезВозвратнойТары = Не (ВернутьМногооборотнуюТару
			И ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	
	КонецЕсли;
	
КонецПроцедуры

// Заполняет признак отмены заказа по безвозвратной таре в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьПризнакОтмененоБезВозвратнойТары(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем ВернутьМногооборотнуюТару;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОтмененоБезВозвратнойТары", ВернутьМногооборотнуюТару) Тогда
	
		ТекущаяСтрока.ОтмененоБезВозвратнойТары = Не (ВернутьМногооборотнуюТару
			И ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара")) И ТекущаяСтрока.Отменено;
	
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак активности строки безвозвратной тары в табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьПризнакАктивностьБезВозвратнойТары(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем ВернутьМногооборотнуюТару;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАктивностьБезВозвратнойТары", ВернутьМногооборотнуюТару) Тогда
	
		ТекущаяСтрока.АктивностьБезВозвратнойТары = Не (ВернутьМногооборотнуюТару
			И ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара")) И ТекущаяСтрока.Активность;
	
	КонецЕсли;
	
КонецПроцедуры

// Заполняет поля дубликатов зависимых реквизитов в табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьДубликатыЗависимыхРеквизитов(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем ПараметрСтруктурыДействий;
	Если Не СтруктураДействий.Свойство("ЗаполнитьДубликатыЗависимыхРеквизитов", ПараметрСтруктурыДействий)
		Или Не ЗначениеЗаполнено(ПараметрСтруктурыДействий) Тогда
		Возврат;
	КонецЕсли;
	
	// ПараметрСтруктурыДействий - Структура
	// 		Ключ: Имя реквизита флага активности
	// 		Значение: Строка с перечислением через запятую имен зависимых реквизитов.
	
	Для Каждого ПолеСтруктуры Из ПараметрСтруктурыДействий Цикл
		
		ИмяФлагаАктивности = ПолеСтруктуры.Ключ;
		ЗначениеФлагаАктивности = ТекущаяСтрока[ИмяФлагаАктивности];
		
		ЗависимыеРеквизиты = Новый Структура(ПолеСтруктуры.Значение);
		Для Каждого Реквизит Из ЗависимыеРеквизиты Цикл
			ТекущаяСтрока[Реквизит.Ключ+ИмяФлагаАктивности] = ?(
				ЗначениеФлагаАктивности,
				ТекущаяСтрока[Реквизит.Ключ],
				0);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Пересчитывает сумму сверх заказа по товару в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьСуммуСверхЗаказаВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСверхЗаказа", СтруктураПараметровДействия) Тогда
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ТекущаяСтрока, "СуммаСверхЗаказа") Тогда
			Если СтруктураПараметровДействия.РеализацияПоступлениеПоЗаказу И ТекущаяСтрока.КодСтроки = 0 Тогда
				Если СтруктураПараметровДействия.Свойство("ТребуетсяЗалогЗаТару")
					И СтруктураПараметровДействия.ТребуетсяЗалогЗаТару Тогда
					ТекущаяСтрока.СуммаСверхЗаказа = ТекущаяСтрока.СуммаСНДС;
				Иначе
					ТекущаяСтрока.СуммаСверхЗаказа = ТекущаяСтрока.СуммаСНДСБезВозвратнойТары;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.СуммаСверхЗаказа = 0;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// Заполняет поле варианта отражения корректировки реализации в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьВариантОтраженияКорректировкиРеализации(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем Операция;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВариантОтраженияКорректировкиРеализации", Операция) Тогда
		
		Если (ТекущаяСтрока.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
			И ТекущаяСтрока.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"))
			ИЛИ ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
			
			Если Операция = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияПерепоставленногоТовара") Тогда
				ТекущаяСтрока.ВариантОтражения = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УвеличитьРеализацию");
			ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара") Тогда
				ТекущаяСтрока.ВариантОтражения = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализациюСписатьНаРасходы");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует названия идентификаторов количества с суффиксом
// 
// Параметры:
// 	Суффикс - Строка - суффикс
// Возвращаемое значение:
// 	Структура - набор названий идентификаторов. Описание:
// * Количество - Строка - "Количество" + суффикс
// * КоличествоУпаковок - Строка - "КоличествоУпаковок" + суффикс
// * КоличествоПоРНПТ - Строка - "КоличествоПоРНПТ" + суффикс
//
Функция КоличествоССуффиксом(Знач Суффикс) Экспорт
	
	Если ТипЗнч(Суффикс) = Тип("Структура") Тогда
		Суффикс = Суффикс.Суффикс;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура();
	
	СтруктураВозврата.Вставить("Количество", "");
	СтруктураВозврата.Вставить("КоличествоУпаковок", "");
	СтруктураВозврата.Вставить("КоличествоПоРНПТ", "");
	
	Если Не ЗначениеЗаполнено(Суффикс) Тогда
		СтруктураВозврата.Количество = "Количество";
		СтруктураВозврата.КоличествоУпаковок = "КоличествоУпаковок";
		СтруктураВозврата.КоличествоПоРНПТ = "КоличествоПоРНПТ";
	ИначеЕсли Суффикс = "Подобрано" Тогда
		СтруктураВозврата.Количество = "КоличествоПодобрано";
		СтруктураВозврата.КоличествоУпаковок = "КоличествоУпаковокПодобрано";
		СтруктураВозврата.КоличествоПоРНПТ = "";
	ИначеЕсли Суффикс = "План" Тогда
		СтруктураВозврата.Количество = "КоличествоПлан";
		СтруктураВозврата.КоличествоУпаковок = "КоличествоУпаковокПлан";
		СтруктураВозврата.КоличествоПоРНПТ = "";
	ИначеЕсли Суффикс = "ПоДокументу" Тогда
		СтруктураВозврата.Количество = "КоличествоПоДокументу";
		СтруктураВозврата.КоличествоУпаковок = "КоличествоУпаковокПоДокументу";
		СтруктураВозврата.КоличествоПоРНПТ = "";
	ИначеЕсли Суффикс = "Факт" Тогда
		СтруктураВозврата.Количество = "КоличествоФакт";
		СтруктураВозврата.КоличествоУпаковок = "КоличествоУпаковокФакт";
		СтруктураВозврата.КоличествоПоРНПТ = "";
	ИначеЕсли Суффикс = "Отклонение" Тогда
		СтруктураВозврата.Количество = "КоличествоОтклонение";
		СтруктураВозврата.КоличествоУпаковок = "КоличествоУпаковокОтклонение";
		СтруктураВозврата.КоличествоПоРНПТ = "";
	ИначеЕсли Суффикс = "Отобрано" Тогда
		СтруктураВозврата.Количество = "КоличествоОтобрано";
		СтруктураВозврата.КоличествоУпаковок = "КоличествоУпаковокОтобрано";
		СтруктураВозврата.КоличествоПоРНПТ = "";
	ИначеЕсли Суффикс = "Размещено" Тогда
		СтруктураВозврата.Количество = "КоличествоРазмещено";
		СтруктураВозврата.КоличествоУпаковок = "КоличествоУпаковокРазмещено";
		СтруктураВозврата.КоличествоПоРНПТ = "";
	ИначеЕсли Суффикс = "Заказать" Тогда
		СтруктураВозврата.Количество = "КоличествоЗаказать";
		СтруктураВозврата.КоличествоУпаковок = "КоличествоУпаковокЗаказать";
		СтруктураВозврата.КоличествоПоРНПТ = "";
	ИначеЕсли Суффикс = "КВозврату" Тогда
		СтруктураВозврата.Количество = "КоличествоКВозврату";
		СтруктураВозврата.КоличествоУпаковок = "КоличествоУпаковокКВозврату";
		СтруктураВозврата.КоличествоПоРНПТ = "";
	ИначеЕсли Суффикс = "ВЗаказе" Тогда
		СтруктураВозврата.Количество = "КоличествоВЗаказе";
		СтруктураВозврата.КоличествоУпаковок = "КоличествоУпаковокВЗаказе";
		СтруктураВозврата.КоличествоПоРНПТ = "";
	ИначеЕсли Суффикс = "Собирается" Тогда
		СтруктураВозврата.Количество = "КоличествоСобирается";
		СтруктураВозврата.КоличествоУпаковок = "КоличествоУпаковокСобирается";
		СтруктураВозврата.КоличествоПоРНПТ = "";
	ИначеЕсли Суффикс = "ВОрдере" Тогда
		СтруктураВозврата.Количество = "КоличествоВОрдере";
		СтруктураВозврата.КоличествоУпаковок = "КоличествоУпаковокВОрдере";
		СтруктураВозврата.КоличествоПоРНПТ = "";
	ИначеЕсли Суффикс = "Норматив" Тогда
		СтруктураВозврата.Количество = "КоличествоНорматив";
		СтруктураВозврата.КоличествоУпаковок = "КоличествоУпаковокНорматив";
		СтруктураВозврата.КоличествоПоРНПТ = "";
	ИначеЕсли Суффикс = "Прогноз" Тогда
		СтруктураВозврата.Количество = "КоличествоПрогноз";
		СтруктураВозврата.КоличествоУпаковок = "КоличествоУпаковокПрогноз";
		СтруктураВозврата.КоличествоПоРНПТ = "";
	ИначеЕсли Суффикс = "После" Тогда
		СтруктураВозврата.Количество = "КоличествоПосле";
		СтруктураВозврата.КоличествоУпаковок = "КоличествоУпаковокПосле";
		СтруктураВозврата.КоличествоПоРНПТ = "КоличествоПоРНПТПосле";
	ИначеЕсли Суффикс = "Забаланс" Тогда
		СтруктураВозврата.Количество         = "";
		СтруктураВозврата.КоличествоУпаковок = "КоличествоУпаковок";
		СтруктураВозврата.КоличествоПоРНПТ   = "";
	ИначеЕсли Суффикс = "Оприходовано" Тогда
		СтруктураВозврата.Количество         = "Количество";
		СтруктураВозврата.КоличествоУпаковок = "КоличествоОприходование";
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный суффикс для количества:'") + " " + Суффикс;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции


// Заполняет способ определения себестоимости строкой
//
// Параметры:
//  ТекущаяСтрока		 - Структура - данные обрабатываемой строки.
//  СтруктураДействий	 - Структура - описывает действия, где Ключ - наименование действия, Значение - Структура - параметры действия.
//  КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьСпособОпределенияСебестоимостиСтрокой(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем СтруктураПараметров;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСпособОпределенияСебестоимостиСтрокой", СтруктураПараметров)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СпособОпределенияСебестоимостиСтрокой") Тогда
		
		Если ТекущаяСтрока.СпособОпределенияСебестоимости = ПредопределенноеЗначение("Перечисление.СпособыОпределенияСебестоимостиВозврата.ИзТекущегоДокумента") Тогда
			Представление = НСтр("ru = 'Равна сумме в данной строке'");
		ИначеЕсли ТекущаяСтрока.СпособОпределенияСебестоимости = ПредопределенноеЗначение("Перечисление.СпособыОпределенияСебестоимостиВозврата.ИзДокументаПродажи") Тогда
			Представление = НСтр("ru = 'Определяется из документа продажи'");
		ИначеЕсли ТекущаяСтрока.СпособОпределенияСебестоимости = ПредопределенноеЗначение("Перечисление.СпособыОпределенияСебестоимостиВозврата.ИзДокументаПередачи") Тогда
			Представление = НСтр("ru = 'Определяется из документа передачи'");
		ИначеЕсли ТекущаяСтрока.СпособОпределенияСебестоимости = ПредопределенноеЗначение("Перечисление.СпособыОпределенияСебестоимостиВозврата.Вручную") Тогда
			Если СтруктураПараметров.ВалютаУправленческогоУчета = СтруктураПараметров.ВалютаРегламентированногоУчета Тогда
				Если СтруктураПараметров.ИспользоватьРеглУчет Тогда
					Если СтруктураПараметров.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС") Тогда
						Представление = НСтр("ru='Себестоимость с НДС: %1% (%2%), Себестоимость без НДС: %3% (%4%)'");
					Иначе
						Представление = НСтр("ru='Себестоимость: %1% (%2%)'");
					КонецЕсли;
				Иначе
					Если СтруктураПараметров.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС") Тогда
						Представление = НСтр("ru='Себестоимость с НДС: %1% (%2%)'");
					Иначе
						Представление = НСтр("ru='Себестоимость: %1% (%2%)'");
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если СтруктураПараметров.ИспользоватьРеглУчет Тогда
					Если СтруктураПараметров.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС") Тогда
						Представление = НСтр("ru='Упр. с НДС: %1% (%2%), Регл. без НДС: %3% (%4%)'");
					Иначе
						Представление = НСтр("ru='Упр.: %1% (%2%), Регл.: %3% (%4%)'");
					КонецЕсли;
				Иначе
					Если СтруктураПараметров.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС") Тогда
						Представление = НСтр("ru='Упр. с НДС: %1% (%2%)'");
					Иначе
						Представление = НСтр("ru='Упр.: %1% (%2%)'");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Представление = СтрЗаменить(Представление, "%1%", Формат(ТекущаяСтрока.Себестоимость, "ЧДЦ=2; ЧН=0"));
			Представление = СтрЗаменить(Представление, "%3%", Формат(ТекущаяСтрока.СебестоимостьРегл, "ЧДЦ=2; ЧН=0"));
			Если Не СтруктураПараметров.Свойство("ВалютаРегламентированногоУчетаПредставление") Тогда
				СтруктураПараметров.Вставить("ВалютаРегламентированногоУчетаПредставление", 
					Строка(СтруктураПараметров.ВалютаРегламентированногоУчета));
			КонецЕсли;
			
			Если Не СтруктураПараметров.Свойство("ВалютаУправленческогоУчетаПредставление") Тогда
				СтруктураПараметров.Вставить("ВалютаУправленческогоУчетаПредставление", 
					Строка(СтруктураПараметров.ВалютаУправленческогоУчета));
			КонецЕсли;
			
			Представление = СтрЗаменить(Представление, "%2%",
				СтруктураПараметров.ВалютаУправленческогоУчетаПредставление);
				
			Представление = СтрЗаменить(Представление, "%4%",
				СтруктураПараметров.ВалютаРегламентированногоУчетаПредставление);
		КонецЕсли;
		ТекущаяСтрока.СпособОпределенияСебестоимостиСтрокой = Представление;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет способ определения себестоимости строкой
//
// Параметры:
//  ТекущаяСтрока		 - Структура - данные обрабатываемой строки.
//  СтруктураДействий	 - Структура - описывает действия, где Ключ - наименование действия, Значение - Структура - параметры действия.
//  КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьСпособОпределенияСебестоимости(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем СпособОпределенияСебестоимости;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСпособОпределенияСебестоимости", СпособОпределенияСебестоимости)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СпособОпределенияСебестоимости") Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ДокументРеализации") И ЗначениеЗаполнено(ТекущаяСтрока.ДокументРеализации) Тогда
			ТекущаяСтрока.СпособОпределенияСебестоимости = ПредопределенноеЗначение("Перечисление.СпособыОпределенияСебестоимостиВозврата.ИзДокументаПродажи");
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ДокументПередачи") И ЗначениеЗаполнено(ТекущаяСтрока.ДокументПередачи) Тогда
			ТекущаяСтрока.СпособОпределенияСебестоимости = ПредопределенноеЗначение("Перечисление.СпособыОпределенияСебестоимостиВозврата.ИзДокументаПередачи");
		Иначе
			ТекущаяСтрока.СпособОпределенияСебестоимости = СпособОпределенияСебестоимости;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму налогового учета в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьСуммуНУВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНУ") Тогда
		ТекущаяСтрока.СуммаНУ = ТекущаяСтрока.СуммаРегл - ТекущаяСтрока.СуммаПР
			- ?(СтруктураДействий.Свойство("ПересчитатьСуммуВР"), 0, ТекущаяСтрока.СуммаВР);
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму временной разницы в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьСуммуВРВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуВР") Тогда
		ТекущаяСтрока.СуммаВР = ТекущаяСтрока.СуммаРегл - ТекущаяСтрока.СуммаНУ - ТекущаяСтрока.СуммаПР;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, содержащую поля для пересчета количества упаковок в табличной части документа.
//
// Параметры:
//  ИмяПоляКоличество         - Строка - Имя поля, по которому считается количество упаковок.
//  ИмяПоляКоличествоУпаковок - Строка - Имя поля, в которое подставляется рассчитанное количество упаковок.
//
// Возвращаемое значение:
//  Структура - содержит поля для пересчета количества упаковок в табличной части документа,
//              Строки - Массив - содержит элементы типа ДанныеФормыЭлементКоллекции, ссылки нас строки для пересчета сумм,
//              ИтогКоличество - Число - сумма значений в поле "Количество" в строках переданных в параметре "Строки".
//
Функция СтруктураПересчетаКоличестваУпаковок(ИмяПоляКоличество = "Количество", ИмяПоляКоличествоУпаковок = "КоличествоУпаковок") Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Номенклатура");
	Результат.Вставить("Упаковка");
	Результат.Вставить(ИмяПоляКоличество, ИмяПоляКоличествоУпаковок);
	
	Возврат Результат;

КонецФункции

// Заполняет место хранения в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока        - Структура - Структура со свойствами строки документа.
//	СтруктураДействий    - Структура - Структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьТипМестаХраненияПоУмолчанию(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыЗаполнения;
	
	Если Не СтруктураДействий.Свойство("ЗаполнитьТипМестаХраненияПоУмолчанию", ПараметрыЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.ТипМестаХранения = ПредопределенноеЗначение(ПараметрыЗаполнения.ТипМестаХранения);
	
КонецПроцедуры



// Выполняет пересчет количества упаковок в строках табличной части при подборе номера ГТД комплекта.
//
// Параметры:
//	ТекущаяСтрока - ДанныеФормыСтруктура, Структура - текущая строка, для которой выполнен подбор номера ГТД комплекта.
//	НоваяСтрока - ДанныеФормыСтруктура, Структура - новая строка, для которой подобрался остаточный Номер ГТД комплекта.
//	ИмяПоляКоличествоУпаковок - Строка - имя поля количества упаковок, для которого осуществляется пересчет.
//
Процедура ПересчитатьКоличествоУпаковокПриПодбореНомераГТД(ТекущаяСтрока,
															НоваяСтрока,
															ИмяПоляКоличествоУпаковок = "КоличествоУпаковок") Экспорт
	
	КоличествоУпаковокВСтроке	= ТекущаяСтрока[ИмяПоляКоличествоУпаковок];
	ЦелоеКоличествоУпаковок		= ТекущаяСтрока[ИмяПоляКоличествоУпаковок]
									- Цел(ТекущаяСтрока[ИмяПоляКоличествоУпаковок]) = 0;
	
	Если ЦелоеКоличествоУпаковок Тогда
		Если ТекущаяСтрока[ИмяПоляКоличествоУпаковок] > 1 Тогда
			ТекущаяСтрока[ИмяПоляКоличествоУпаковок]	= ТекущаяСтрока[ИмяПоляКоличествоУпаковок] - 1;
			НоваяСтрока[ИмяПоляКоличествоУпаковок]		= 1;
		Иначе
			ТекущаяСтрока[ИмяПоляКоличествоУпаковок]	= ТекущаяСтрока[ИмяПоляКоличествоУпаковок] / 2;
			НоваяСтрока[ИмяПоляКоличествоУпаковок]		= ТекущаяСтрока[ИмяПоляКоличествоУпаковок];
		КонецЕсли;
	Иначе
		Если ТекущаяСтрока[ИмяПоляКоличествоУпаковок] > 1 Тогда
			ТекущаяСтрока[ИмяПоляКоличествоУпаковок] = Цел(ТекущаяСтрока[ИмяПоляКоличествоУпаковок]);
		Иначе
			ТекущаяСтрока[ИмяПоляКоличествоУпаковок] = ТекущаяСтрока[ИмяПоляКоличествоУпаковок] / 2;
		КонецЕсли;
		
		НоваяСтрока[ИмяПоляКоличествоУпаковок] = КоличествоУпаковокВСтроке - ТекущаяСтрока[ИмяПоляКоличествоУпаковок];
	КонецЕсли;
	
КонецПроцедуры

// Выполняет заполнение поля 'ТипНомераГТД' значением по умолчанию.
//
// Параметры:
//	ТекущаяСтрока - ДанныеФормыСтруктура, Структура - строка, для которой требуется заполнить поле 'ТипНомераГТД'.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ЗаполнитьТипНомераГТДПоУмолчанию(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьТипНомераГТД") Тогда
		ТекущаяСтрока.ТипНомераГТД = ПредопределенноеЗначение("Перечисление.ТипыНомеровГТД.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет заполнение поля 'СтранаПроисхождения' значением по умолчанию.
//
// Параметры:
//	ТекущаяСтрока - ДанныеФормыСтруктура, Структура - строка, для которой требуется заполнить поле 'ТипНомераГТД'.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ЗаполнитьСтрануПроисхожденияДляНомераГТДПоУмолчанию(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтрануПроисхожденияДляНомераГТД") Тогда
		ТекущаяСтрока.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

// Получить коэффициент упаковки номенклатуры для пересчета количества.
// 
// Параметры:
//  ТекУпаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - Упаковка, по которой требуется получить коэффициент упаковки.
//  КэшированныеЗначения см. ПолучитьСтруктуруКэшируемыеЗначения
//  ТекНоменклатура - Неопределено - Тек номенклатура
// 
// Возвращаемое значение:
//  Структура - Получить коэффициент упаковки:
// * Коэффициент - Число - Коэффициент пересчета.
// * НужноОкруглятьКоличество - Булево - Признак необходимости округлять количество.
//
Функция ПолучитьКоэффициентУпаковки(ТекУпаковка, КэшированныеЗначения, ТекНоменклатура = Неопределено) Экспорт
	
	Результат = Новый Структура("Коэффициент,НужноОкруглятьКоличество");
	
	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		КлючКоэффициента = КлючКэшаУпаковки(ТекНоменклатура, ТекУпаковка); 
		Кэш = КэшированныеЗначения.КоэффициентыУпаковок[КлючКоэффициента];
		Если Кэш = Неопределено Тогда
			ЗначенияРеквизитов = ПакетнаяОбработкаТабличнойЧастиВызовСервера.ДанныеОбУпаковке(
				ТекНоменклатура, ТекУпаковка, КэшированныеЗначения);
			Результат.Коэффициент    		   =  ЗначенияРеквизитов.Коэффициент;
			Результат.НужноОкруглятьКоличество =  ЗначенияРеквизитов.НужноОкруглятьКоличество;
		Иначе
			Результат = Кэш;
		КонецЕсли;
	Иначе
		Результат.Коэффициент = 1;
		Результат.НужноОкруглятьКоличество = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ДополнительныеПараметрыЗаполнения = Неопределено) Экспорт
	
	СтруктураПолейТЧ = ПоляСтрокиПоДействиям(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ДополнительныеПараметрыЗаполнения);
	
	ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ, ТекущаяСтрока);
	
	Если Не ДополнительныеПараметрыЗаполнения = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ, ДополнительныеПараметрыЗаполнения);
	КонецЕсли;
	
	Возврат СтруктураПолейТЧ;
	
КонецФункции

Функция ПоляСтрокиПоДействиям(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ДополнительныеПараметрыЗаполнения = Неопределено) Экспорт

	Перем СтруктураПараметровДействия;
	
	КэшированныеЗначения.Вставить("СтруктураПолейТЧПолная", Новый Структура);
	КэшированныеЗначения.Вставить("ОписаниеПолейПоДействию", Новый Структура);
	КэшированныеЗначения.Вставить("ИзменяемыеПоля", Новый Структура);
	КэшированныеЗначения.Вставить("ЧитаемыеПоля", Новый Структура);
	
	ДействияТМЦВЭксплуатации = ТМЦВЭксплуатацииКлиентСервер.ПоляСтрокиПоДействиям(
		ТекущаяСтрока,
		СтруктураДействий,
		КэшированныеЗначения,
		ДополнительныеПараметрыЗаполнения);
		
	Для Каждого Действие Из ДействияТМЦВЭксплуатации Цикл
		ДополнитьОписаниеПолей(Действие.Имя, Действие.ЧитаемыеПоля, Действие.ИзменяемыеПоля, КэшированныеЗначения);
	КонецЦикла;
	
	РетроБонусыКлиентСервер.ПоляСтрокиПоДействиям(
		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ДополнительныеПараметрыЗаполнения);
	
	ПакетнаяОбработкаТабличнойЧастиКлиентСерверЛокализация.ПоляСтрокиПоДействиям(
		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ДополнительныеПараметрыЗаполнения);
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = ОбеспечениеВДокументахКлиентСервер.ПакетнаяОбработкаСтруктураПолейТекущейСтроки(
			СтруктураПараметровДействия);
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ВариантОбеспечения");
		ИзменяемыеПоля.Вставить("Обособленно");
		
		ДополнитьОписаниеПолей("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = ОбеспечениеВДокументахКлиентСервер.ПакетнаяОбработкаСтруктураПолейТекущейСтроки(
			СтруктураПараметровДействия);
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ДатаОтгрузкиОбязательна");
		ИзменяемыеПоля.Вставить("СкладОбязателен");
		
		ДополнитьОписаниеПолей("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьОбновленияКолонкиДоступно")
			Или СтруктураДействий.Свойство("ОбновитьКэшНоменклатура") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля = ОбеспечениеВДокументахКлиентСервер.СтруктураПолейПроверитьНеобходимостьОбновленияКолонкиДоступно();
		
		ИзменяемыеПоля = Новый Структура();
		
		ДополнитьОписаниеПолей("ПроверитьНеобходимостьОбновленияКолонкиДоступно,ОбновитьКэшНоменклатура",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьКолонкуДоступно", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = ОбеспечениеВДокументахКлиентСервер.ПакетнаяОбработкаСтруктураПолейТекущейСтроки(
			СтруктураПараметровДействия);
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Доступно");
		ИзменяемыеПоля.Вставить("ПерераспределятьЗапасы");
		ИзменяемыеПоля.Вставить("ОтгружатьЕслиДоступно");
		
		ДополнитьОписаниеПолей("ЗаполнитьКолонкуДоступно",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
			
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОтгрузитьДляВариантаОформленияЗаказПлюсРеализация") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("ВариантОформления");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ВариантОбеспечения");
		
		ДополнитьОписаниеПолей("ЗаполнитьОтгрузитьДляВариантаОформленияЗаказПлюсРеализация",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Обособленно");
		ЧитаемыеПоля.Вставить("Производится");
		ЧитаемыеПоля.Вставить("ТипНоменклатуры");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("НазначениеОбеспечения");
		ИзменяемыеПоля.Вставить("Назначение");
		
		ДополнитьОписаниеПолей("ЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНазначениеВЭтапеПроизводства") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Обособленно");
		ЧитаемыеПоля.Вставить("НазначениеОбеспечения");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Назначение");
		
		ДополнитьОписаниеПолей("ЗаполнитьНазначениеВЭтапеПроизводства",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Характеристика");
		ИзменяемыеПоля.Вставить("ХарактеристикиИспользуются");
		
		ДополнитьОписаниеПолей("ПроверитьХарактеристикуПоВладельцу",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Упаковка");
		
		ДополнитьОписаниеПолей("ПроверитьЗаполнитьУпаковкуПоВладельцу",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСтатьюАналитикуРасходов", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить(СтруктураПараметровДействия.СтатьяРасходов);
		ИзменяемыеПоля.Вставить(СтруктураПараметровДействия.АналитикаРасходов);
		Для Каждого Колонка Из СтруктураПараметровДействия.ДополнительныеКолонки Цикл
			ИзменяемыеПоля.Вставить(Колонка);
		КонецЦикла;
		
		ДополнитьОписаниеПолей("ОчиститьСтатьюАналитикуРасходов",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		ИзменяемыеПоля = Новый Структура();
		Для Каждого Колонка Из СтруктураПараметровДействия.КолонкиТабличнойЧасти Цикл
			ИзменяемыеПоля.Вставить(Колонка);
		КонецЦикла;
		
		ДополнитьОписаниеПолей("ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНастройкуСчетовУчетаПоУмолчанию", СтруктураПараметровДействия) Тогда
		
		ДанныеНастройкиСчетовУчета = СтруктураПараметровДействия.ДанныеНастройкиСчетовУчета;
	
		ЧитаемыеПоля = Новый Структура();
		ИзменяемыеПоля = Новый Структура();
		
		Для Каждого ПараметрыНастройки Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
			ЧитаемыеПоля.Вставить(ПараметрыНастройки.СтатьяАктивовПассивов);
			ЧитаемыеПоля.Вставить(ПараметрыНастройки.АналитикаАктивовПассивов);
			Если Не ПустаяСтрока(ПараметрыНастройки.ТипСтатьи) Тогда
				ЧитаемыеПоля.Вставить(ПараметрыНастройки.ТипСтатьи);
			КонецЕсли;
			
			ИзменяемыеПоля.Вставить(ПараметрыНастройки.НастройкаСчетовУчета);
			ИзменяемыеПоля.Вставить(ПараметрыНастройки.АналитикаАктивовПассивов);
			ИзменяемыеПоля.Вставить(ПараметрыНастройки.Представление);
		КонецЦикла;
		
		ДополнитьОписаниеПолей("ЗаполнитьНастройкуСчетовУчетаПоУмолчанию",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПредставлениеНастройкиСчетовУчета", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		ИзменяемыеПоля = Новый Структура();
		Для каждого Колонка Из СтруктураПараметровДействия.КолонкиТабличнойЧасти Цикл
			ИзменяемыеПоля.Вставить(Колонка);
		КонецЦикла;
		
		ДополнитьОписаниеПолей("ЗаполнитьПредставлениеНастройкиСчетовУчета",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Упаковка");
		ЧитаемыеПоля.Вставить("КоличествоУпаковок", 0);
		
		Если  СтруктураПараметровДействия <> Неопределено 
			И СтруктураПараметровДействия.Свойство("НужноОкруглять")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "НужноОкруглять") Тогда
				ЧитаемыеПоля.Вставить("НужноОкруглять");
		КонецЕсли;
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Количество", 0);
		
		ДополнитьОписаниеПолей("ПересчитатьКоличествоЕдиниц",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Упаковка");
		ЧитаемыеПоля.Вставить("Количество", 0);
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("КоличествоУпаковок", 0);
		
		ДополнитьОписаниеПолей("ПересчитатьКоличествоУпаковок",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоПоРНПТ") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Характеристика",
			ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
			
		ЧитаемыеПоля.Вставить("НомерГТД");
		ЧитаемыеПоля.Вставить("ВедетсяУчетПоРНПТ");
		ЧитаемыеПоля.Вставить("Склад", ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"));
		Если СтруктураДействий.ПересчитатьКоличествоПоРНПТ.МестоХраненияВТабличнойЧасти Тогда
			ЧитаемыеПоля.Вставить(СтруктураДействий.ПересчитатьКоличествоПоРНПТ.ИмяПоляМестоХранения);
		КонецЕсли;
		ИмяПоляКоличество = "Количество";
		Если СтруктураДействий.ПересчитатьКоличествоПоРНПТ.Свойство("ИменаПолейССуффиксом")
			И ЗначениеЗаполнено(СтруктураДействий.ПересчитатьКоличествоПоРНПТ.ИменаПолейССуффиксом) Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураДействий.ПересчитатьКоличествоПоРНПТ.ИменаПолейССуффиксом, "Количество") Тогда
				ИмяПоляКоличество = СтруктураДействий.ПересчитатьКоличествоПоРНПТ.ИменаПолейССуффиксом.Количество;
			КонецЕсли;
			
		КонецЕсли;
		ЧитаемыеПоля.Вставить(ИмяПоляКоличество);
		
		ИзменяемыеПоля = Новый Структура();
		Если СтруктураДействий.ПересчитатьКоличествоПоРНПТ.Свойство("ИменаПолейССуффиксом")
			И ЗначениеЗаполнено(СтруктураДействий.ПересчитатьКоличествоПоРНПТ.ИменаПолейССуффиксом) Тогда
			ИзменяемыеПоля.Вставить(СтруктураДействий.ПересчитатьКоличествоПоРНПТ.ИменаПолейССуффиксом.КоличествоПоРНПТ);
		Иначе
			ИзменяемыеПоля.Вставить("КоличествоПоРНПТ");
		КонецЕсли;
		
		ДополнитьОписаниеПолей("ПересчитатьКоличествоПоРНПТ",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоПоРНПТСуффикс", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Характеристика",
			ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
			
		ЧитаемыеПоля.Вставить("НомерГТД");
		ЧитаемыеПоля.Вставить("ВедетсяУчетПоРНПТ");
		ЧитаемыеПоля.Вставить("Склад", ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"));
		Если СтруктураДействий.ПересчитатьКоличествоПоРНПТСуффикс.МестоХраненияВТабличнойЧасти Тогда
			ЧитаемыеПоля.Вставить(СтруктураДействий.ПересчитатьКоличествоПоРНПТСуффикс.ИмяПоляМестоХранения);
		КонецЕсли;
		ИмяПоляКоличество = "Количество";
		Если СтруктураПараметровДействия.Свойство("ИменаПолейССуффиксом")
			И ЗначениеЗаполнено(СтруктураПараметровДействия.ИменаПолейССуффиксом) Тогда
			
			Если СтруктураПараметровДействия.ИменаПолейССуффиксом.Свойство("Количество") Тогда
				ИмяПоляКоличество = СтруктураПараметровДействия.ИменаПолейССуффиксом.Количество;
			КонецЕсли;
			
		КонецЕсли;
		ЧитаемыеПоля.Вставить(ИмяПоляКоличество);
		
		ИзменяемыеПоля = Новый Структура();
		ИмяПоляКоличествоПоРНПТ = "КоличествоПоРНПТ";
		Если СтруктураПараметровДействия.Свойство("ИменаПолейССуффиксом")
			И ЗначениеЗаполнено(СтруктураПараметровДействия.ИменаПолейССуффиксом) Тогда
			
			Если СтруктураПараметровДействия.ИменаПолейССуффиксом.Свойство("КоличествоПоРНПТ") Тогда
				ИмяПоляКоличествоПоРНПТ = СтруктураПараметровДействия.ИменаПолейССуффиксом.КоличествоПоРНПТ;
			КонецЕсли;
			
		КонецЕсли;
		ИзменяемыеПоля.Вставить(ИмяПоляКоличествоПоРНПТ);
		
		ДополнитьОписаниеПолей("ПересчитатьКоличествоПоРНПТСуффикс",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакРасхождениеЗаказ") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("КодСтроки");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("РасхождениеЗаказ");
		
		ДополнитьОписаниеПолей("ЗаполнитьПризнакРасхождениеЗаказ",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьGTINВСтроке", СтруктураПараметровДействия)  Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Характеристика");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("GTIN");
		
		ДополнитьОписаниеПолей("ЗаполнитьGTINВСтроке",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
			
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДССуффикс", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		СуммаССуффиксом = СуммаССуффиксом(
			СуффиксДействия(СтруктураПараметровДействия).Суффикс);
		ЧитаемыеПоля.Вставить(СуммаССуффиксом.Сумма, 0);
		ЧитаемыеПоля.Вставить(СуммаССуффиксом.СуммаНДС, 0);
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить(СуммаССуффиксом.СуммаСНДС, 0);
		
		ДополнитьОписаниеПолей("ПересчитатьСуммуСНДССуффикс",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницСуффикс", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Упаковка");
		КоличествоССуффиксом = КоличествоССуффиксом(
			СуффиксДействия(СтруктураПараметровДействия).Суффикс);
			
		ЧитаемыеПоля.Вставить(КоличествоССуффиксом.КоличествоУпаковок, 0);
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить(КоличествоССуффиксом.Количество, 0);
		
		ДополнитьОписаниеПолей("ПересчитатьКоличествоЕдиницСуффикс",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффикс", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Упаковка");
		КоличествоССуффиксом = КоличествоССуффиксом(
			СуффиксДействия(СтруктураПараметровДействия).Суффикс);
			
		ЧитаемыеПоля.Вставить(КоличествоССуффиксом.Количество, 0);
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить(КоличествоССуффиксом.КоличествоУпаковок, 0);
		
		ДополнитьОписаниеПолей("ПересчитатьКоличествоУпаковокСуффикс",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоОтклонение") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Упаковка");
		ЧитаемыеПоля.Вставить("КоличествоФакт", 0);
		ЧитаемыеПоля.Вставить("КоличествоУпаковокФакт", 0);
		ЧитаемыеПоля.Вставить("Количество", 0);
		ЧитаемыеПоля.Вставить("КоличествоУпаковок", 0);
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("КоличествоОтклонение", 0);
		ИзменяемыеПоля.Вставить("КоличествоУпаковокОтклонение", 0);
		
		ДополнитьОписаниеПолей("ПересчитатьКоличествоОтклонение",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли; 
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффиксИзОтклонения", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("КоличествоУпаковокОтклонение", 0);
		ЧитаемыеПоля.Вставить("КоличествоУпаковок", 0);
		
		ИзменяемыеПоля = Новый Структура();
		КоличествоССуффиксом = КоличествоССуффиксом(
			СуффиксДействия(СтруктураПараметровДействия).Суффикс);
		ИзменяемыеПоля.Вставить(КоличествоССуффиксом.КоличествоУпаковок, 0);
		
		ДополнитьОписаниеПолей("ПересчитатьКоличествоУпаковокСуффиксИзОтклонения",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьВесОбъем", СтруктураПараметровДействия) Тогда
		
 		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("ВесУпаковки", 0);
		ЧитаемыеПоля.Вставить("ОбъемУпаковки", 0);
		КоличествоССуффиксом = КоличествоССуффиксом(
			СуффиксДействия(СтруктураПараметровДействия).Суффикс);
		ЧитаемыеПоля.Вставить(КоличествоССуффиксом.КоличествоУпаковок, 0);
		ЧитаемыеПоля.Вставить("ЕдиницаИзмеренияВеса");
		ЧитаемыеПоля.Вставить("ЕдиницаИзмеренияОбъема");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Вес", 0);
		ИзменяемыеПоля.Вставить("Объем", 0);
		
		ДополнитьОписаниеПолей("ПересчитатьВесОбъем",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
			
	КонецЕсли;
	
	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоВесу", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("ВесУпаковки", 0);
		ЧитаемыеПоля.Вставить("ОбъемУпаковки", 0);
		ЧитаемыеПоля.Вставить("Вес", 0);
		ЧитаемыеПоля.Вставить("Упаковка");
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("ЕдиницаИзмеренияВеса");
		ЧитаемыеПоля.Вставить("ЕдиницаИзмеренияОбъема");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Объем", 0);
		КоличествоССуффиксом = КоличествоССуффиксом(
			СуффиксДействия(СтруктураПараметровДействия).Суффикс);
		ИзменяемыеПоля.Вставить(КоличествоССуффиксом.КоличествоУпаковок, 0);
		ИзменяемыеПоля.Вставить(КоличествоССуффиксом.Количество, 0);
		
		ДополнитьОписаниеПолей("ПересчитатьКоличествоУпаковокПоВесу",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоОбъему", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("ВесУпаковки", 0);
		ЧитаемыеПоля.Вставить("ОбъемУпаковки", 0);
		ЧитаемыеПоля.Вставить("Объем", 0);
		ЧитаемыеПоля.Вставить("Упаковка");
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("ЕдиницаИзмеренияВеса");
		ЧитаемыеПоля.Вставить("ЕдиницаИзмеренияОбъема");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Вес", 0);
		КоличествоССуффиксом = КоличествоССуффиксом(
			СуффиксДействия(СтруктураПараметровДействия).Суффикс);
		ИзменяемыеПоля.Вставить(КоличествоССуффиксом.КоличествоУпаковок, 0);
		ИзменяемыеПоля.Вставить(КоличествоССуффиксом.Количество, 0);
		
		ДополнитьОписаниеПолей("ПересчитатьКоличествоУпаковокПоОбъему",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВидЦены") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		ИзменяемыеПоля = Новый Структура();
		Если СтруктураДействий.ЗаполнитьВидЦены.Свойство("ИмяПоляВидЦены") Тогда
			ИзменяемыеПоля.Вставить(СтруктураДействий.ЗаполнитьВидЦены.ИмяПоляВидЦены);
		Иначе
			ИзменяемыеПоля.Вставить("ВидЦены");
		КонецЕсли;
		
		ДополнитьОписаниеПолей("ЗаполнитьВидЦены",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Характеристика");
		ЧитаемыеПоля.Вставить("Серия", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));
		
		Если СтруктураДействий.ЗаполнитьЦенуПродажи.Свойство("ИмяКолонкиУпаковка") Тогда
			ЧитаемыеПоля.Вставить(СтруктураДействий.ЗаполнитьЦенуПродажи.ИмяКолонкиУпаковка);
		Иначе
			ЧитаемыеПоля.Вставить("Упаковка");
		КонецЕсли;
		
		ИзменяемыеПоля = Новый Структура();
		Если СтруктураДействий.ЗаполнитьЦенуПродажи.Свойство("ИмяКолонкиВидЦены") Тогда
			ИзменяемыеПоля.Вставить(СтруктураДействий.ЗаполнитьЦенуПродажи.ИмяКолонкиВидЦены);
		Иначе
			ИзменяемыеПоля.Вставить("ВидЦены");
		КонецЕсли;
		
		Если СтруктураДействий.ЗаполнитьЦенуПродажи.Свойство("ИмяПоляЦена") Тогда
			ИзменяемыеПоля.Вставить(СтруктураДействий.ЗаполнитьЦенуПродажи.ИмяПоляЦена, 0);
		Иначе
			ИзменяемыеПоля.Вставить("Цена", 0);
		КонецЕсли;
		
		ДополнитьОписаниеПолей("ЗаполнитьЦенуПродажи",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиПоАссортименту") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Характеристика");
		ЧитаемыеПоля.Вставить("Серия", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));
		ЧитаемыеПоля.Вставить("Упаковка");
		ЧитаемыеПоля.Вставить("ВидЦены", ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка"));
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Цена", 0);
		
		ДополнитьОписаниеПолей("ЗаполнитьЦенуПродажиПоАссортименту",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Характеристика");
		ЧитаемыеПоля.Вставить("Серия", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			ТекущаяСтрока,
			"Упаковка") Тогда
			ЧитаемыеПоля.Вставить("Упаковка");
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			ТекущаяСтрока,
			"ВидЦеныПоставщика") Тогда
			ЧитаемыеПоля.Вставить("ВидЦеныПоставщика");
		КонецЕсли;
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Цена", 0);
		
		ДополнитьОписаниеПолей("ЗаполнитьЦенуЗакупки",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияЗакупок") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Характеристика");
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			ТекущаяСтрока,
			"Упаковка") Тогда
			ЧитаемыеПоля.Вставить("Упаковка");
		КонецЕсли;
		
		ИзменяемыеПоля = Новый Структура();
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			ТекущаяСтрока,
			"ВидЦеныПоставщика") Тогда
			ИзменяемыеПоля.Вставить("ВидЦеныПоставщика");
		КонецЕсли;
		
		ИзменяемыеПоля.Вставить("Цена", 0);
		
		ДополнитьОписаниеПолей("ЗаполнитьУсловияЗакупок",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоНоменклатуреПартнера") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("НоменклатураПартнера");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Номенклатура");
		ИзменяемыеПоля.Вставить("Характеристика");
		ИзменяемыеПоля.Вставить("Упаковка");
		ИзменяемыеПоля.Вставить("ХарактеристикиИспользуются");
		
		ДополнитьОписаниеПолей("ЗаполнитьНоменклатуруПоНоменклатуреПартнера",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПартнераПоНоменклатуре") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Характеристика");
		ЧитаемыеПоля.Вставить("Упаковка");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("НоменклатураПартнера");
		
		ДополнитьОписаниеПолей("ЗаполнитьНоменклатуруПартнераПоНоменклатуре",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСопоставленнуюНоменклатуруПартнера") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("НомерСтроки");
		ЧитаемыеПоля.Вставить("НоменклатураПартнера");
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Характеристика");
		ЧитаемыеПоля.Вставить("Упаковка");
		
		ИзменяемыеПоля = Новый Структура();
		
		ДополнитьОписаниеПолей("ПроверитьСопоставленнуюНоменклатуруПартнера",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Период");

		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ДатаОтгрузки") Тогда
			ЧитаемыеПоля.Вставить("ДатаОтгрузки");
		КонецЕсли;
		
		Если СтруктураПараметровДействия.Свойство("НалогообложениеНДСВТабличнойЧасти")
			И СтруктураПараметровДействия.НалогообложениеНДСВТабличнойЧасти Тогда
				ЧитаемыеПоля.Вставить("НалогообложениеНДС");
		КонецЕсли;
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СтавкаНДС");
		
		ДополнитьОписаниеПолей("ЗаполнитьСтавкуНДС",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСПоНоменклатуре", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Период");
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ДатаОтгрузки") Тогда
			ЧитаемыеПоля.Вставить("ДатаОтгрузки");
		КонецЕсли;
		
		Если СтруктураПараметровДействия.Свойство("НалогообложениеНДСВТабличнойЧасти")
			И СтруктураПараметровДействия.НалогообложениеНДСВТабличнойЧасти Тогда
				ЧитаемыеПоля.Вставить("НалогообложениеНДС");
		КонецЕсли;
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СтавкаНДС");
		
		ДополнитьОписаниеПолей("ЗаполнитьСтавкуНДСПоНоменклатуре",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
			
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("СкорректироватьСтавкуНДС") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Период");
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ДатаОтгрузки") Тогда
			ЧитаемыеПоля.Вставить("ДатаОтгрузки");
		КонецЕсли;
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СтавкаНДС");
		
		ДополнитьОписаниеПолей("СкорректироватьСтавкуНДС",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССуффикс", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		
		ИзменяемыеПоля = Новый Структура();
		СтавкаССуффиксом = СтавкаССуффиксом(
			СуффиксДействия(СтруктураПараметровДействия).Суффикс);
		ИзменяемыеПоля.Вставить(СтавкаССуффиксом.СтавкаНДС);
		
		ДополнитьОписаниеПолей("ЗаполнитьСтавкуНДССуффикс",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьКодТНВЭД") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("КодТНВЭД");
		
		ДополнитьОписаниеПолей("ЗаполнитьКодТНВЭД",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСВозвратнойТары") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("ТипНоменклатуры");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СтавкаНДС");
		
		ДополнитьОписаниеПолей("ЗаполнитьСтавкуНДСВозвратнойТары",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Сумма", 0);
		ЧитаемыеПоля.Вставить("СтавкаНДС", 0);
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СуммаНДС", 0);
		
		ДополнитьОписаниеПолей("ПересчитатьСуммуНДС",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения)
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Сумма", 0);
		ЧитаемыеПоля.Вставить("СуммаНДС", 0);
		
		ИзменяемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("СуммаСНДС", 0);
		
		ДополнитьОписаниеПолей("ПересчитатьСуммуСНДС",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДС") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Сумма", 0);
		ЧитаемыеПоля.Вставить("СуммаНДС", 0);
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СуммаБезНДС", 0);
		
		ДополнитьОписаниеПолей("ПересчитатьСуммуБезНДС",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуРегл") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("СуммаБезНДС", 0);
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СуммаРегл", 0);
		
		ДополнитьОписаниеПолей("ПересчитатьСуммуРегл",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьНДСРегл") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("СуммаНДС" , 0);
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("НДСРегл", 0);
		
		ДополнитьОписаниеПолей("ПересчитатьНДСРегл",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСумму") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Цена", 0);
		ЧитаемыеПоля.Вставить(?(ПустаяСтрока(СтруктураДействий.ПересчитатьСумму),
			"КоличествоУпаковок", СтруктураДействий.ПересчитатьСумму), 0);
			
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Сумма", 0);
		
		ДополнитьОписаниеПолей("ПересчитатьСумму",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСуффикс", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();

		СуффиксДействия = СуффиксДействия(СтруктураПараметровДействия);
		
		КоличествоССуффиксом = КоличествоССуффиксом(
			СуффиксДействия.Суффикс);
			
		ЧитаемыеПоля.Вставить(?(ПустаяСтрока(СуффиксДействия.ИмяКоличества), 
									КоличествоССуффиксом.КоличествоУпаковок,
									КоличествоССуффиксом[СуффиксДействия.ИмяКоличества]), 0);

		ИмяПоляЦена = ЦенаССуффиксом(СуффиксДействия.Суффикс);
		ЧитаемыеПоля.Вставить(ИмяПоляЦена, 0);

		ИзменяемыеПоля = Новый Структура();
		СуммаССуффиксом = СуммаССуффиксом(СуффиксДействия.Суффикс);
		ИзменяемыеПоля.Вставить(СуммаССуффиксом.Сумма, 0);

		ДополнитьОписаниеПолей("ПересчитатьСуммуСуффикс",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДССуффикс", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		Суффикс = СуффиксДействия(СтруктураПараметровДействия).Суффикс;
	
		СуммаССуффиксом = СуммаССуффиксом(Суффикс);
		ЧитаемыеПоля.Вставить(СуммаССуффиксом.Сумма, 0);
		
		СтавкаССуффиксом = СтавкаССуффиксом(Суффикс);
		ЧитаемыеПоля.Вставить(СтавкаССуффиксом.СтавкаНДС , 0);
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить(СуммаССуффиксом.СуммаНДС, 0);
		
		ДополнитьОписаниеПолей("ПересчитатьСуммуНДССуффикс",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки", СтруктураПараметровДействия) Тогда
		
		ИзменяемыеПоля = Новый Структура();
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Количество", 0);
		ЧитаемыеПоля.Вставить("СуммаРучнойСкидки", 0);
		
		ПересчитыватьСуммуРучнойСкидки = Неопределено;
		ИмяКоличества = Неопределено;
		
		Если СтруктураПараметровДействия <> Неопределено Тогда
			
			СтруктураПараметровДействия.Свойство("ПересчитыватьСуммуРучнойСкидки", ПересчитыватьСуммуРучнойСкидки);
			СтруктураПараметровДействия.Свойство("ИмяКоличества", ИмяКоличества);
			
			Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
				ИмяКоличества = "КоличествоУпаковок";
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПересчитыватьСуммуРучнойСкидки = Ложь Тогда
			
		Иначе
			ЧитаемыеПоля.Вставить(ИмяКоличества, 0);
			ЧитаемыеПоля.Вставить("ПроцентРучнойСкидки", 0);
			ЧитаемыеПоля.Вставить("Цена", 0);
			
			ИзменяемыеПоля.Вставить("СуммаРучнойСкидки", 0);
		КонецЕсли;
		
		ИзменяемыеПоля.Вставить("Сумма", 0);

		ИзменяемыеПоля.Вставить("ПроцентРучнойСкидки", 0);
		
		ДополнитьОписаниеПолей("ПересчитатьСуммуСУчетомРучнойСкидки",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Сумма", 0);
		ИзменяемыеПоля.Вставить("СуммаАвтоматическойСкидки", 0);
		ИзменяемыеПоля.Вставить("ПроцентАвтоматическойСкидки", 0);
		
		ДополнитьОписаниеПолей("ПересчитатьСуммуСУчетомАвтоматическойСкидки",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("КоличествоУпаковок", 0);
		ЧитаемыеПоля.Вставить("КоличествоУпаковокВЗаказе", 0);
		ЧитаемыеПоля.Вставить("СуммаБонусныхБалловКСписаниюПоЗаказу", 0);
		ЧитаемыеПоля.Вставить("СуммаБонусныхБалловКСписаниюВВалютеПоЗаказу", 0);
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Сумма", 0);
		ИзменяемыеПоля.Вставить("СуммаБонусныхБалловКСписанию", 0);
		ИзменяемыеПоля.Вставить("СуммаБонусныхБалловКСписаниюВВалюте", 0);
		
		Если СтруктураПараметровДействия <> Неопределено
				И СтруктураПараметровДействия.Свойство("ПересчитыватьСуммуБонусныхБалловПоСтроке") Тогда
			ИзменяемыеПоля.Вставить("СуммаБонусныхБалловКСписанию", 0);
		КонецЕсли;
		
		ДополнитьОписаниеПолей("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Количество", 0);
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Цена", 0);
		
		ДополнитьОписаниеПолей("ПересчитатьЦенуЗаУпаковку",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаказаЗаУпаковку") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Количество", 0);
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ЦенаЗаказа", 0);
		
		ДополнитьОписаниеПолей("ПересчитатьЦенуЗаказаЗаУпаковку",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуСверхЗаказа") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("СуммаСНДС", 0);
		ЧитаемыеПоля.Вставить("КодСтроки", 1);
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СуммаСверхЗаказа", 0);
		
		ДополнитьОписаниеПолей("ПересчитатьСуммуСверхЗаказа",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Сумма", 0);
		ЧитаемыеПоля.Вставить("СуммаАвтоматическойСкидки", 0);
		ЧитаемыеПоля.Вставить("ПроцентАвтоматическойСкидки", 0);
		ЧитаемыеПоля.Вставить("КоличествоУпаковок", 0);
		ЧитаемыеПоля.Вставить("Количество", 0);
		ЧитаемыеПоля.Вставить("ВидЦены");
		Если СтруктураПараметровДействия <> Неопределено
			И СтруктураПараметровДействия.Свойство("ИспользоватьБонусныеБаллы") Тогда
			ЧитаемыеПоля.Вставить("СуммаБонусныхБалловКСписаниюВВалюте", 0);
		КонецЕсли;
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Цена", 0);
		ИзменяемыеПоля.Вставить("СуммаРучнойСкидки", 0);
		ИзменяемыеПоля.Вставить("ПроцентРучнойСкидки", 0);
		ИзменяемыеПоля.Вставить("СуммаАвтоматическойСкидки", 0);
		ИзменяемыеПоля.Вставить("ПроцентАвтоматическойСкидки", 0);
		
		ДополнитьОписаниеПолей("ПересчитатьЦенуСкидкуПоСуммеВПродажах",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Сумма", 0);
		ЧитаемыеПоля.Вставить("КоличествоУпаковок", 0);
		ЧитаемыеПоля.Вставить("Количество", 0);
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Цена", 0);
		ИзменяемыеПоля.Вставить("СуммаРучнойСкидки", 0);
		ИзменяемыеПоля.Вставить("ПроцентРучнойСкидки", 0);
		
		ДополнитьОписаниеПолей("ПересчитатьЦенуСкидкуПоСуммеВЗакупках",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьСклад", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("ТипНоменклатуры");
		
		ИзменяемыеПоля = Новый Структура();
		ИмяПоляСклад = "Склад";
		Если ТипЗнч(СтруктураПараметровДействия) = Тип("Структура")
			И СтруктураПараметровДействия.Свойство("ИмяПоляСклад") Тогда
			ИмяПоляСклад = СтруктураПараметровДействия.ИмяПоляСклад;
		КонецЕсли;
		ИзменяемыеПоля.Вставить(ИмяПоляСклад);
		
		ДополнитьОписаниеПолей("ПроверитьЗаполнитьСклад",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОрдерногоСклада", СтруктураПараметровДействия) Тогда
		
 		ЧитаемыеПоля = Новый Структура();
		ИмяПоляСклад    = "Склад";
		
		Если ТипЗнч(СтруктураПараметровДействия) = Тип("Структура")
			И СтруктураПараметровДействия.Свойство("ИмяПоляСклад") Тогда
			ИмяПоляСклад = СтруктураПараметровДействия.ИмяПоляСклад;
		КонецЕсли;
		ЧитаемыеПоля.Вставить(ИмяПоляСклад);
		
		ИзменяемыеПоля = Новый Структура();
		ИмяПоляПризнака = "ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач";
		Если ТипЗнч(СтруктураПараметровДействия) = Тип("Структура")
			И СтруктураПараметровДействия.Свойство("ИмяПоляПризнака") Тогда
			ИмяПоляПризнака = СтруктураПараметровДействия.ИмяПоляПризнака;
		КонецЕсли;
		ИзменяемыеПоля.Вставить(ИмяПоляПризнака);
		
		ДополнитьОписаниеПолей("ЗаполнитьПризнакОрдерногоСклада",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Характеристика");
		ЧитаемыеПоля.Вставить("Серия");
		ЧитаемыеПоля.Вставить("Упаковка");
		ЧитаемыеПоля.Вставить("СтавкаНДС");
		ЧитаемыеПоля.Вставить("СрокПоставки");
		ЧитаемыеПоля.Вставить("ВидЦены", ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка"));
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Цена", 0);
		ИзменяемыеПоля.Вставить("ВидЦены", ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка"));
		
		ДополнитьОписаниеПолей("ЗаполнитьУсловияПродаж",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияРозничныхПродаж") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Характеристика");
		ЧитаемыеПоля.Вставить("Серия");
		ЧитаемыеПоля.Вставить("Упаковка");
		ЧитаемыеПоля.Вставить("СтавкаНДС");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Цена", 0);
		ИзменяемыеПоля.Вставить("ВидЦены", ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка"));
		
		ДополнитьОписаниеПолей("ЗаполнитьУсловияРозничныхПродаж",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Характеристика");
		ЧитаемыеПоля.Вставить("СтавкаНДС");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Цена", 0);
		ИзменяемыеПоля.Вставить("ВидЦены", ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка"));
		
		ДополнитьОписаниеПолей("ЗаполнитьУсловияПродажУслуги",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ВестиУчетПоГТД");
		ИзменяемыеПоля.Вставить("ЭтоУслуга");
		
		ДополнитьОписаниеПолей("ЗаполнитьРеквизитыПоНоменклатуре",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		ДополнитьПоляПоКлючуИЗначению("ЗаполнитьПризнакТипНоменклатуры",
			СтруктураПараметровДействия, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВидНоменклатуры", СтруктураПараметровДействия) Тогда
		
		ДополнитьПоляПоКлючуИЗначению("ЗаполнитьПризнакВидНоменклатуры",
			СтруктураПараметровДействия, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакКод", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		ДополнитьПоляПоКлючуИЗначению("ЗаполнитьПризнакКод",
			СтруктураПараметровДействия, КэшированныеЗначения);
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОписание", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		ДополнитьПоляПоКлючуИЗначению("ЗаполнитьПризнакОписание",
			СтруктураПараметровДействия, КэшированныеЗначения);
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЕдиницаИзмерения", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		ДополнитьПоляПоКлючуИЗначению("ЗаполнитьПризнакЕдиницаИзмерения",
			СтруктураПараметровДействия, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипИзмеряемойВеличины", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		ДополнитьПоляПоКлючуИЗначению("ЗаполнитьПризнакТипИзмеряемойВеличины",
			СтруктураПараметровДействия, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВесУпаковки", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		ДополнитьПоляПоКлючуИЗначению("ЗаполнитьВесУпаковки",
			СтруктураПараметровДействия, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемУпаковки", СтруктураПараметровДействия) Тогда
		
		ДополнитьПоляПоКлючуИЗначению("ЗаполнитьОбъемУпаковки",
			СтруктураПараметровДействия, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияВеса", СтруктураПараметровДействия) Тогда
		
		ДополнитьПоляПоКлючуИЗначению("ЗаполнитьЕдиницуИзмеренияВеса",
			СтруктураПараметровДействия, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияОбъема", СтруктураПараметровДействия) Тогда
		
		ДополнитьПоляПоКлючуИЗначению("ЗаполнитьЕдиницуИзмеренияОбъема",
			СтруктураПараметровДействия, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакСерииИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		ДополнитьПоляПоКлючуИЗначению("ЗаполнитьПризнакСерииИспользуются",
			СтруктураПараметровДействия, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		ДополнитьПоляПоКлючуИЗначению("ЗаполнитьПризнакХарактеристикиИспользуются",
			СтруктураПараметровДействия, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		ДополнитьПоляПоКлючуИЗначению("ЗаполнитьПризнакВедетсяУчетПоГТД",
			СтруктураПараметровДействия, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияТНВЭД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		ДополнитьПоляПоКлючуИЗначению("ЗаполнитьЕдиницуИзмеренияТНВЭД",
			СтруктураПараметровДействия, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтрануПроисхожденияНоменклатуры", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("ВедетсяУчетПоГТД");
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			ЧитаемыеПоля.Вставить(Поле.Значение);
		КонецЦикла;
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СтранаПроисхождения");
		
		ДополнитьОписаниеПолей("ЗаполнитьСтрануПроисхожденияНоменклатуры",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоРНПТ", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		ДополнитьПоляПоКлючуИЗначению("ЗаполнитьПризнакВедетсяУчетПоРНПТ",
			СтруктураПараметровДействия, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьТипНомераГТД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("НомерГТД");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ТипНомераГТД");
		
		ДополнитьОписаниеПолей("ЗаполнитьТипНомераГТД",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		ДополнитьПоляПоКлючуИЗначению("ЗаполнитьПризнакЭтоУслуга",
			СтруктураПараметровДействия, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("УстановитьАктивность") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("ИндексКартинки");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Активность");
		
		ДополнитьОписаниеПолей("УстановитьАктивность",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьХарактеристикуНекачественногоТовара") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Характеристика");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Характеристика");
		ИзменяемыеПоля.Вставить("ХарактеристикиИспользуются");
		
		ДополнитьОписаниеПолей("ЗаполнитьХарактеристикуНекачественногоТовара",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьУпаковкуНекачественногоТовара") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Упаковка");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Упаковка");
		
		ДополнитьОписаниеПолей("ЗаполнитьУпаковкуНекачественногоТовара",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Характеристика");
		ЧитаемыеПоля.Вставить("ХарактеристикиИспользуются");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ВариантКомплектации");
		
		ДополнитьОписаниеПолей("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);

	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагРасхождение") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("КоличествоУпаковок");
		ЧитаемыеПоля.Вставить("КоличествоУпаковокФакт");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Расхождение");
		
		ДополнитьОписаниеПолей("ЗаполнитьФлагРасхождение",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРасхождения") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Цена");
		ЧитаемыеПоля.Вставить("КоличествоУпаковок");
		ЧитаемыеПоля.Вставить("КоличествоУпаковокПоДокументу");
		ЧитаемыеПоля.Вставить("СуммаПоДокументу");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Сумма");
		
		ДополнитьОписаниеПолей("ПересчитатьСуммуРасхождения",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокОтклонение") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("КоличествоУпаковок");
		ЧитаемыеПоля.Вставить("КоличествоУпаковокФакт");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("КоличествоУпаковокОтклонение");
		
		ДополнитьОписаниеПолей("ПересчитатьКоличествоУпаковокОтклонение",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ИзлишекПорча");
		
		ДополнитьОписаниеПолей("ЗаполнитьФлагИзлишекПорча",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВзаиморасчетов") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СуммаВзаиморасчетов");
		
		ДополнитьОписаниеПолей("ОчиститьСуммуВзаиморасчетов",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ОчиститьСуммуВзаиморасчетовСуффикс", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		ИзменяемыеПоля = Новый Структура();

		СуммаССуффиксом = СуммаССуффиксом(
			СуффиксДействия(СтруктураПараметровДействия).Суффикс);
		ИзменяемыеПоля.Вставить(СуммаССуффиксом.СуммаВзаиморасчетов);
		
		ДополнитьОписаниеПолей("ОчиститьСуммуВзаиморасчетовСуффикс",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуНДСРеглУпр") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СуммаНДСРегл");
		ИзменяемыеПоля.Вставить("СуммаНДСУпр");
		
		ДополнитьОписаниеПолей("ОчиститьСуммуНДСРеглУпр",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьАвтоматическуюСкидку") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ПроцентАвтоматическойСкидки");
		ИзменяемыеПоля.Вставить("СуммаАвтоматическойСкидки");
		
		ДополнитьОписаниеПолей("ОчиститьАвтоматическуюСкидку",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСодержание") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Характеристика");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Содержание");
		
		ДополнитьОписаниеПолей("ЗаполнитьСодержание",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДубликатыЗависимыхРеквизитов", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ИзменяемыеПоля = Новый Структура();
		
		Для Каждого ПолеСтруктуры Из СтруктураПараметровДействия Цикл
			ЧитаемыеПоля.Вставить(ПолеСтруктуры.Ключ);
			ЗависимыеРеквизиты = Новый Структура(ПолеСтруктуры.Значение);
			Для Каждого Реквизит Из ЗависимыеРеквизиты Цикл
				ИзменяемыеПоля.Вставить(Реквизит.Ключ + ПолеСтруктуры.Ключ, 0);
				ЧитаемыеПоля.Вставить(Реквизит.Ключ, 0);
			КонецЦикла;
		КонецЦикла;
		
		ДополнитьОписаниеПолей("ЗаполнитьДубликатыЗависимыхРеквизитов",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВознаграждения") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СуммаВознаграждения");
		
		ДополнитьОписаниеПолей("ОчиститьСуммуВознаграждения",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтатьюАналитикуРасходовНоменклатуры", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Характеристика") Тогда
			ЧитаемыеПоля.Вставить("Характеристика");
		КонецЕсли;
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить(СтруктураПараметровДействия.СтатьяРасходов);
		ИзменяемыеПоля.Вставить(СтруктураПараметровДействия.АналитикаРасходов);
		Для Каждого Колонка Из СтруктураПараметровДействия.ДополнительныеКолонки Цикл
			ИзменяемыеПоля.Вставить(Колонка);
		КонецЦикла;
		
		ДополнитьОписаниеПолей("ЗаполнитьСтатьюАналитикуРасходовНоменклатуры",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВариантОформленияПродажи", СтруктураПараметровДействия) Тогда
		
		ДополнитьПоляПоКлючуИЗначению("ЗаполнитьПризнакВариантОформленияПродажи",
			СтруктураПараметровДействия, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакПодакцизныйТовар", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ИзменяемыеПоля = Новый Структура();
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			ЧитаемыеПоля.Вставить(Поле.Ключ);
			ИзменяемыеПоля.Вставить(Поле.Значение);
		КонецЦикла;
		
		ДополнитьОписаниеПолей("ЗаполнитьПризнакПодакцизныйТовар",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоНеОтгружать") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("КоличествоУпаковок");
		ЧитаемыеПоля.Вставить("КоличествоУпаковокВДокументе");
		ЧитаемыеПоля.Вставить("КоличествоУпаковокВДокументеНеотгружаемые");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("КоличествоУпаковокНеОтгружать");
		
		ДополнитьОписаниеПолей("ПересчитатьКоличествоНеОтгружать",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажи") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("ЦенаПродажи");
		ЧитаемыеПоля.Вставить("СуммаПродажиНДС");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СуммаПродажи");
		
		ДополнитьОписаниеПолей("ПересчитатьСуммуПродажи",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	
	Если СтруктураДействий.Свойство("ПересчитатьУчетноеКоличествоНоменклатуры") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("КоличествоУпаковокФакт");
		ИзменяемыеПоля.Вставить("КоличествоУпаковокУчет");
		
		ДополнитьОписаниеПолей("ПересчитатьУчетноеКоличествоНоменклатуры",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоФакту") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("КоличествоУпаковокФакт");
		ЧитаемыеПоля.Вставить("КоличествоУпаковокУчет");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("КоличествоУпаковок");
		
		ДополнитьОписаниеПолей("ПересчитатьКоличествоУпаковокПоФакту",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокФактПоУпаковкам") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("КоличествоУпаковок");
		ЧитаемыеПоля.Вставить("КоличествоУпаковокУчет");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("КоличествоУпаковокФакт");
		
		ДополнитьОписаниеПолей("ПересчитатьКоличествоУпаковокФактПоУпаковкам",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУчетноеКоличествоНоменклатуры") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Характеристика");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("КоличествоУпаковокФакт");
		ИзменяемыеПоля.Вставить("КоличествоУпаковокУчет");
		
		ДополнитьОписаниеПолей("ЗаполнитьУчетноеКоличествоНоменклатуры",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("Характеристика");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ИндексСовместноПродаваемыеТовары");
		
		ДополнитьОписаниеПолей("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьАссортиментСтроки") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("НомерСтроки");
		ЧитаемыеПоля.Вставить("НоменклатураНабора");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Номенклатура");
		
		ДополнитьОписаниеПолей("ПроверитьАссортиментСтроки",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("ТипНоменклатуры");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("БезВозвратнойТары");
		
		ДополнитьОписаниеПолей("ЗаполнитьПризнакБезВозвратнойТары",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОтмененоБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("ТипНоменклатуры");
		ЧитаемыеПоля.Вставить("Отменено");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ОтмененоБезВозвратнойТары");
		
		ДополнитьОписаниеПолей("ЗаполнитьПризнакОтмененоБезВозвратнойТары",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАктивностьБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("ТипНоменклатуры");
		ЧитаемыеПоля.Вставить("Активность");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("АктивностьБезВозвратнойТары");
		
		ДополнитьОписаниеПолей("ЗаполнитьПризнакАктивностьБезВозвратнойТары",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАртикул", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		ДополнитьПоляПоКлючуИЗначению("ЗаполнитьПризнакАртикул", СтруктураПараметровДействия, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакКод", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		ДополнитьПоляПоКлючуИЗначению("ЗаполнитьПризнакКод", СтруктураПараметровДействия, КэшированныеЗначения);
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОписание", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		ДополнитьПоляПоКлючуИЗначению("ЗаполнитьПризнакОписание", СтруктураПараметровДействия, КэшированныеЗначения);
		
	КонецЕсли;
	

	
	Если СтруктураДействий.Свойство("ЗаполнитьПомещение", СтруктураПараметровДействия)  Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Помещение");
		
		ДополнитьОписаниеПолей("ЗаполнитьПомещение",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПродавца", СтруктураПараметровДействия)  Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Продавец");
		
		ДополнитьОписаниеПолей("ЗаполнитьПродавца",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ИзменяемыеПоля = Новый Структура();
		// В некоторых случаях есть поле УказыватьСерии, анализ, когда оно есть не выполняется.
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
			ЧитаемыеПоля.Вставить("Номенклатура");
			ЧитаемыеПоля.Вставить("Характеристика");
			ИзменяемыеПоля.Вставить("СтатусУказанияСерий");
			ИзменяемыеПоля.Вставить("Серия");
		Иначе
			Для Каждого ИмяПоляСтатус Из СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
				ИменаПолей = ИменаПолейПоСтатусуУказанияСерий(ИмяПоляСтатус);
				ИзменяемыеПоля.Вставить(ИмяПоляСтатус);
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, ИменаПолей.Серия) Тогда
					ИзменяемыеПоля.Вставить(ИменаПолей.Серия);
					ЧитаемыеПоля.Вставить(ИменаПолей.Номенклатура);
					ЧитаемыеПоля.Вставить(ИменаПолей.Характеристика);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрМас Из СтруктураПараметровДействия.ПараметрыУказанияСерий.ПоляСвязи Цикл
			ЧитаемыеПоля.Вставить(СтрМас);
		КонецЦикла;
		
		Для Каждого СтрМас Из СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейДополнительные Цикл
			ЧитаемыеПоля.Вставить(СтрМас);
		КонецЦикла;
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ЭтоЗаказ Тогда
			ЧитаемыеПоля.Вставить("Отменено");
			ЧитаемыеПоля.Вставить("ВариантОбеспечения");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметровДействия.ПараметрыУказанияСерий.ИмяПоляКоличество) Тогда
			ЧитаемыеПоля.Вставить(СтруктураПараметровДействия.ПараметрыУказанияСерий.ИмяПоляКоличество, 0);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Назначение") Тогда
			ЧитаемыеПоля.Вставить("Назначение");
		КонецЕсли;
		
		ДополнитьОписаниеПолей("ПроверитьСериюРассчитатьСтатус",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхожденияПослеОтгрузки") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("КоличествоУпаковок");
		ЧитаемыеПоля.Вставить("Сумма");
		ЧитаемыеПоля.Вставить("СуммаНДС");
		ЧитаемыеПоля.Вставить("СуммаСНДС");
		
		ЧитаемыеПоля.Вставить("КоличествоУпаковокРасхождения");
		ЧитаемыеПоля.Вставить("СуммаРасхождения");
		ЧитаемыеПоля.Вставить("СуммаНДСРасхождения");
		ЧитаемыеПоля.Вставить("СуммаСНДСРасхождения");
		
		ЧитаемыеПоля.Вставить("КоличествоУпаковокПоДокументу");
		ЧитаемыеПоля.Вставить("КоличествоПоДокументу");
		ЧитаемыеПоля.Вставить("СуммаПоДокументу");
		ЧитаемыеПоля.Вставить("СуммаНДСПоДокументу");
		ЧитаемыеПоля.Вставить("СуммаСНДСПоДокументу");
		ЧитаемыеПоля.Вставить("ЕстьРасхождения");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Действие");
		
		ДополнитьОписаниеПолей("ПересчитатьРасхожденияПослеОтгрузки",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхожденияПослеПриемки") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("КоличествоУпаковокРасхождения");
		ЧитаемыеПоля.Вставить("СуммаРасхождения");
		ЧитаемыеПоля.Вставить("СуммаНДСРасхождения");
		ЧитаемыеПоля.Вставить("СуммаСНДСРасхождения");
		
		ЧитаемыеПоля.Вставить("Цена");
		ЧитаемыеПоля.Вставить("СтавкаНДС");
		
		ЧитаемыеПоля.Вставить("КоличествоУпаковокПоДокументу");
		ЧитаемыеПоля.Вставить("КоличествоУпаковок");
		ЧитаемыеПоля.Вставить("КоличествоПоДокументу");
		ЧитаемыеПоля.Вставить("Количество");
		ЧитаемыеПоля.Вставить("СуммаПоДокументу");
		ЧитаемыеПоля.Вставить("Сумма");
		ЧитаемыеПоля.Вставить("СуммаНДСПоДокументу");
		ЧитаемыеПоля.Вставить("СуммаНДС");
		ЧитаемыеПоля.Вставить("СуммаСНДСПоДокументу");
		ЧитаемыеПоля.Вставить("СуммаСНДС");
		ЧитаемыеПоля.Вставить("ЕстьРасхождения");
		ЧитаемыеПоля.Вставить("ПоВинеСтороннейКомпании");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Действие");
		
		ДополнитьОписаниеПолей("ПересчитатьРасхожденияПослеПриемки",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхождения") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("КоличествоУпаковокРасхождения");
		ЧитаемыеПоля.Вставить("КоличествоУпаковокПоДокументу");
		ЧитаемыеПоля.Вставить("КоличествоПоДокументу");
		ЧитаемыеПоля.Вставить("ЕстьРасхождения");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Действие");
		
		ДополнитьОписаниеПолей("ПересчитатьРасхождения",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТовМестаТребуетсяОбработка") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Штрихкод");
		ЧитаемыеПоля.Вставить("ШтрихкодНеОпределен");
		ЧитаемыеПоля.Вставить("ЭтоУпаковочныйЛист");
		ЧитаемыеПоля.Вставить("УпаковочныйЛист");
		ЧитаемыеПоля.Вставить("Номенклатура");
		ЧитаемыеПоля.Вставить("КоличествоЗаполненныхПодчиненныхПозиций");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ТребуетсяОбработка");
		
		ДополнитьОписаниеПолей("ЗаполнитьПризнакТовМестаТребуетсяОбработка",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьНазначение") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("ТипНоменклатуры");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Назначение");
		
		ДополнитьОписаниеПолей("ПроверитьЗаполнитьНазначение",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	ИмяРеквизитаОтгружатьОбособленно = Неопределено;
	Если СтруктураДействий.Свойство("ЗаполнитьФлагОбособленноПоНазначению", ИмяРеквизитаОтгружатьОбособленно) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Назначение");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить(ИмяРеквизитаОтгружатьОбособленно);
		
		ДополнитьОписаниеПолей("ЗаполнитьФлагОбособленноПоНазначению",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПриИзмененииНазначения") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Назначение");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("НазначениеОтправителя");
		
		ДополнитьОписаниеПолей("ПриИзмененииНазначения",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакДвиженияПоСкладскимРегистрам", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить(СтруктураДействий.ЗаполнитьПризнакНазначения);
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить(СтруктураПараметровДействия);
		
		ДополнитьОписаниеПолей("ЗаполнитьПризнакДвиженияПоСкладскимРегистрам",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	ПризнакНазначения = Неопределено;
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакНазначения", ПризнакНазначения) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить(ПризнакНазначения);
		
		ДополнитьОписаниеПолей("ЗаполнитьПризнакНазначения",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатуры") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("ТипНоменклатуры");
		ЧитаемыеПоля.Вставить("Отменено");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СкладОбязателен");
		
		ДополнитьОписаниеПолей("ПриИзмененииТипаНоменклатуры",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуУслугиЗаказДавальца") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Цена", 0);
		ЧитаемыеПоля.Вставить(?(ПустаяСтрока(СтруктураДействий.ПересчитатьСуммуЗаказДавальца),
			"КоличествоУпаковок", СтруктураДействий.ПересчитатьСуммуЗаказДавальца), 0);
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СуммаУслуги", 0);
		
		ДополнитьОписаниеПолей("ПересчитатьСуммуУслугиЗаказДавальца",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуЗаказДавальца") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("СуммаУслуги", 0);
		ЧитаемыеПоля.Вставить("СуммаСобственныхМатериалов", 0);
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Сумма", 0);
		
		ДополнитьОписаниеПолей("ПересчитатьСуммуЗаказДавальца",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВариантОтраженияКорректировкиРеализации") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ВариантОтражения");
		
		ДополнитьОписаниеПолей("ЗаполнитьВариантОтраженияКорректировкиРеализации",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьСтрануПроисхожденияДляНомераГТД") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СтранаПроисхождения");
		
		ДополнитьОписаниеПолей("ЗаполнитьСтрануПроисхожденияДляНомераГТД",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	
	

	
	
	Если СтруктураДействий.Свойство("ЗаполнитьТипМестаХраненияПоУмолчанию") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ТипМестаХранения");
		
		ДополнитьОписаниеПолей("ЗаполнитьТипМестаХраненияПоУмолчанию",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	

	Если СтруктураДействий.Свойство("ЗаполнитьНаправлениеДеятельности", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Назначение");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("НаправлениеДеятельности");
		
		ДополнитьОписаниеПолей("ЗаполнитьНаправлениеДеятельности",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСлужебныеРеквизитыПоНазначению", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура;
		ЧитаемыеПоля.Вставить("Назначение");
		
		ИзменяемыеПоля = Новый Структура;
		ИзменяемыеПоля.Вставить("ТипНазначения");

		Если Не (ТипЗнч(СтруктураПараметровДействия) = Тип("Структура")
			И СтруктураПараметровДействия.Свойство("ТолькоТипНазначения")
			И СтруктураПараметровДействия.ТолькоТипНазначения = Истина) Тогда
				ИзменяемыеПоля.Вставить("Заказ");
				ИзменяемыеПоля.Вставить("Партнер");
				ИзменяемыеПоля.Вставить("Договор");
				ИзменяемыеПоля.Вставить("НаправлениеДеятельности");
		КонецЕсли;
		
		ДополнитьОписаниеПолей(
			"ЗаполнитьСлужебныеРеквизитыПоНазначению", ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДанныеПоДокументуПриобретенияВОтчетеКомитентуОЗакупках") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Поставщик");
		ИзменяемыеПоля.Вставить("ТипДокументаПриобретения");
		
		ДополнитьОписаниеПолей("ЗаполнитьДанныеПоДокументуПриобретенияВОтчетеКомитентуОЗакупках",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПодразделениеВСтрокеТЧ") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Подразделение");
		
		ДополнитьОписаниеПолей("ЗаполнитьПодразделениеВСтрокеТЧ",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакПринимаетсяКНУ") Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ПолеСтатьяРасходов = ?(ЗначениеЗаполнено(СтруктураДействий.ЗаполнитьПризнакПринимаетсяКНУ),
								СтруктураДействий.ЗаполнитьПризнакПринимаетсяКНУ,
								"СтатьяРасходов");
		
		ЧитаемыеПоля.Вставить(ПолеСтатьяРасходов);
		ЧитаемыеПоля.Вставить("ПринятиеКНалоговомуУчету");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ПринимаетсяКНУ");
		
		ДополнитьОписаниеПолей("ЗаполнитьПризнакПринимаетсяКНУ",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
			
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковкуСуффикс", СтруктураПараметровДействия) Тогда
		
		Суффикс = СтруктураПараметровДействия.Суффикс;
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить(КоличествоССуффиксом(Суффикс).Количество);
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить(ЦенаССуффиксом(Суффикс));
		
		ДополнитьОписаниеПолей("ПересчитатьЦенуЗаУпаковкуСуффикс",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьВидЦены", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		Если ТипЗнч(СтруктураПараметровДействия.ВидЦены) = Тип("Строка")
				И ЗначениеЗаполнено(СтруктураПараметровДействия.ВидЦены) Тогда
			ЧитаемыеПоля.Вставить(СтруктураПараметровДействия.ВидЦены);
		КонецЕсли;
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ВидЦены");
		
		ДополнитьОписаниеПолей("ПроверитьЗаполнитьВидЦены",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСНДС", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Цена");
		
		ДополнитьОписаниеПолей("ПересчитатьЦенуСНДС",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРучнойСкидки", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Цена");
		ЧитаемыеПоля.Вставить("ПроцентРучнойСкидки");
		ИмяКоличества = "КоличествоУпаковок";
		Если ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
			ИмяКоличества = СтруктураПараметровДействия;
		КонецЕсли;
		ЧитаемыеПоля.Вставить("ИмяКоличества");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СуммаРучнойСкидки");
		
		ДополнитьОписаниеПолей("ПересчитатьСуммуРучнойСкидки",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуАвтоматическойСкидки", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Цена");
		ЧитаемыеПоля.Вставить("ПроцентАвтоматическойСкидки");
		ИмяКоличества = "КоличествоУпаковок";
		Если ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
			ИмяКоличества = СтруктураПараметровДействия;
		КонецЕсли;
		ЧитаемыеПоля.Вставить("ИмяКоличества");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СуммаАвтоматическойСкидки");
		
		ДополнитьОписаниеПолей("ПересчитатьСуммуАвтоматическойСкидки",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьПроцентРучнойСкидки", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Цена");
		ЧитаемыеПоля.Вставить("СуммаРучнойСкидки");
		ИмяКоличества = "КоличествоУпаковок";
		Если ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
			ИмяКоличества = СтруктураПараметровДействия;
		КонецЕсли;
		ЧитаемыеПоля.Вставить("ИмяКоличества");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ПроцентРучнойСкидки");
		
		ДополнитьОписаниеПолей("ПересчитатьПроцентРучнойСкидки",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПоСумме", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Сумма");
		ИмяКоличества = "КоличествоУпаковок";
		Если ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
			ИмяКоличества = СтруктураПараметровДействия;
		КонецЕсли;
		ЧитаемыеПоля.Вставить("ИмяКоличества");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Цена");
		
		ДополнитьОписаниеПолей("ПересчитатьЦенуПоСумме",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажиПоСуммеСНДС", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("СуммаСНДС");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СуммаПродажи");
		
		ДополнитьОписаниеПолей("ПересчитатьСуммуПродажиПоСуммеСНДС",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПродажиПоСуммеПродажи", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("КоличествоУпаковок");
		ЧитаемыеПоля.Вставить("СуммаПродажи");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ЦенаПродажи");
		
		ДополнитьОписаниеПолей("ПересчитатьЦенуПродажиПоСуммеПродажи",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомПогрешностиОкругления", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Сумма");
		
		ДополнитьОписаниеПолей("ПересчитатьСуммуСУчетомПогрешностиОкругления",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажиНДС", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("СуммаПродажи");
		Если СтруктураПараметровДействия = Неопределено
				Или Не СтруктураПараметровДействия.Свойство("СтавкаНДС") Тогда
			ЧитаемыеПоля.Вставить("СтавкаНДС");
		КонецЕсли;
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СуммаПродажиНДС");
		
		ДополнитьОписаниеПолей("ПересчитатьСуммуПродажиНДС",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("УстановитьПризнакДляЗаполненияТекстовогоОписания", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Номенклатура");
			
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ДляЗаполненияТекстовогоОписания");
		
		ДополнитьОписаниеПолей("УстановитьПризнакДляЗаполненияТекстовогоОписания",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАдресногоХранения", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Склад");
		ЧитаемыеПоля.Вставить("Помещение");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ИспользоватьАдресноеХранение");
		
		ДополнитьОписаниеПолей("ЗаполнитьПризнакАдресногоХранения",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакИспользованияПомещений", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("Склад");
			
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ИспользоватьСкладскиеПомещения");
		
		ДополнитьОписаниеПолей("ЗаполнитьПризнакИспользованияПомещений",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПризнакНаличиеКомментарияПриемка", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("КомментарийПоставщика");
		ЧитаемыеПоля.Вставить("КомментарийМенеджера");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ЕстьКомментарийПоставщика");
		ИзменяемыеПоля.Вставить("ЕстьКомментарийМенеджера");
		
		ДополнитьОписаниеПолей("ПризнакНаличиеКомментарияПриемка",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПризнакНаличиеКомментарияОтгрузка", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("КомментарийКлиента");
		ЧитаемыеПоля.Вставить("КомментарийМенеджера");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ЕстьКомментарийКлиента");
		ИзменяемыеПоля.Вставить("ЕстьКомментарийМенеджера");
		
		ДополнитьОписаниеПолей("ПризнакНаличиеКомментарияОтгрузка",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПризнакНаличиеКомментария", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("КомментарийПолучателя");
		ЧитаемыеПоля.Вставить("КомментарийМенеджера");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ЕстьКомментарийПолучателя");
		ИзменяемыеПоля.Вставить("ЕстьКомментарийМенеджера");
		
		ДополнитьОписаниеПолей("ПризнакНаличиеКомментария",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПартнера", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("Партнер");
		
		ДополнитьОписаниеПолей("ЗаполнитьПартнера",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСпособОпределенияСебестоимости", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			ТекущаяСтрока, "СпособОпределенияСебестоимости") Тогда
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ДокументРеализации") Тогда
					ЧитаемыеПоля.Вставить("ДокументРеализации");
				КонецЕсли;
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ДокументПередачи") Тогда
					ЧитаемыеПоля.Вставить("ДокументПередачи");
				КонецЕсли;
		КонецЕсли;
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СпособОпределенияСебестоимости");
		
		ДополнитьОписаниеПолей("ЗаполнитьСпособОпределенияСебестоимости",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСпособОпределенияСебестоимостиСтрокой", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("СпособОпределенияСебестоимости");
			
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СпособОпределенияСебестоимостиСтрокой");
		
		ДополнитьОписаниеПолей("ЗаполнитьСпособОпределенияСебестоимостиСтрокой",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДСРегл", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("СуммаСНДС");
		ЧитаемыеПоля.Вставить("СуммаНДС");
		ЧитаемыеПоля.Вставить("Сумма");
		ЧитаемыеПоля.Вставить("СуммаБезНДСРегл");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СуммаБезНДСРегл");
		
		ДополнитьОписаниеПолей("ПересчитатьСуммуБезНДСРегл",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
		
	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДСУпр", СтруктураПараметровДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить("СуммаСНДС");
		ЧитаемыеПоля.Вставить("СуммаНДС");
		ЧитаемыеПоля.Вставить("Сумма");
		ЧитаемыеПоля.Вставить("СуммаБезНДСУпр");
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("СуммаБезНДСУпр");
		
		ДополнитьОписаниеПолей("ПересчитатьСуммуБезНДСУпр",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
		
	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДСРеглСуффикс", СтруктураПараметровДействия) Тогда
		
		Суффикс = "";
		
		Если СтруктураПараметровДействия.Свойство("Суффикс", Суффикс)
			И Не ЗначениеЗаполнено(Суффикс) Тогда
			Суффикс = "";
		КонецЕсли;
		
		СуммаССуффиксом = СуммаССуффиксом(Суффикс);
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить(СуммаССуффиксом.СуммаСНДС);
		ЧитаемыеПоля.Вставить(СуммаССуффиксом.СуммаНДС);
		ЧитаемыеПоля.Вставить(СуммаССуффиксом.Сумма);
		ЧитаемыеПоля.Вставить(СуммаССуффиксом.СуммаБезНДСРегл);
			
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить(СуммаССуффиксом.СуммаБезНДСРегл);
		
		ДополнитьОписаниеПолей("ПересчитатьСуммуБезНДСРеглСуффикс",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
		
	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДСУпрСуффикс", СтруктураПараметровДействия) Тогда
		
		Суффикс = "";
		
		Если СтруктураПараметровДействия.Свойство("Суффикс", Суффикс)
			И Не ЗначениеЗаполнено(Суффикс) Тогда
			Суффикс = "";
		КонецЕсли;
		
		СуммаССуффиксом = СуммаССуффиксом(Суффикс);
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить(СуммаССуффиксом.СуммаСНДС);
		ЧитаемыеПоля.Вставить(СуммаССуффиксом.СуммаНДС);
		ЧитаемыеПоля.Вставить(СуммаССуффиксом.Сумма);
		ЧитаемыеПоля.Вставить(СуммаССуффиксом.СуммаБезНДСУпр);
			
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить(СуммаССуффиксом.СуммаБезНДСУпр);
		
		ДополнитьОписаниеПолей("ПересчитатьСуммуБезНДСУпрСуффикс",
			ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
		
	КонецЕсли;
	
	ПакетнаяОбработкаТабличнойЧастиКлиентСерверЛокализация.ПоляСтрокиПоДействиям(
		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ДополнительныеПараметрыЗаполнения);

	СтруктураПолейТЧПолная = КэшированныеЗначения.СтруктураПолейТЧПолная;

	СтруктураПолейТЧПолная.Вставить("НомерСтроки", 0);
	
	ЗаполнитьЗначенияСвойств(СтруктураПолейТЧПолная, ТекущаяСтрока);
	
	Если Не ДополнительныеПараметрыЗаполнения = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПолейТЧПолная, ДополнительныеПараметрыЗаполнения);
	КонецЕсли;
	
	Возврат СтруктураПолейТЧПолная;
	
КонецФункции

Процедура ДополнитьОписаниеПолей(Действия, ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(КэшированныеЗначения.СтруктураПолейТЧПолная, ЧитаемыеПоля, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(КэшированныеЗначения.СтруктураПолейТЧПолная, ИзменяемыеПоля, Истина);

	СписокДействий = СтрРазделить(Действия, ",");
	Для Каждого Действие Из СписокДействий Цикл
		КэшированныеЗначения.ИзменяемыеПоля.Вставить(Действие, ИзменяемыеПоля);
		КэшированныеЗначения.ЧитаемыеПоля.Вставить(Действие, ЧитаемыеПоля);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьПоляПоКлючуИЗначению(ИмяДействия, ПараметрыДействия, КэшированныеЗначения) Экспорт
	
	ЧитаемыеПоля = Новый Структура();
	ИзменяемыеПоля = Новый Структура();
	
	Для Каждого Поле Из ПараметрыДействия Цикл
		ЧитаемыеПоля.Вставить(Поле.Ключ);
		Если ЗначениеЗаполнено(Поле.Значение) Тогда
			ИзменяемыеПоля.Вставить(Поле.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ДополнитьОписаниеПолей(ИмяДействия, ЧитаемыеПоля, ИзменяемыеПоля, КэшированныеЗначения);
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПрочиеПроцедуры

Процедура ЗаполнитьРасхожденияВСтрокеАкта(ТекущаяСтрока)
	
	ТекущаяСтрока.КоличествоУпаковокРасхождения = ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.КоличествоУпаковокПоДокументу;
	ТекущаяСтрока.СуммаРасхождения              = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаПоДокументу;
	ТекущаяСтрока.СуммаНДСРасхождения           = ТекущаяСтрока.СуммаНДС - ТекущаяСтрока.СуммаНДСПоДокументу;
	ТекущаяСтрока.СуммаСНДСРасхождения          = ТекущаяСтрока.СуммаСНДС - ТекущаяСтрока.СуммаСНДСПоДокументу;
	ТекущаяСтрока.ЕстьРасхождения               = (ТекущаяСтрока.КоличествоУпаковокРасхождения <> 0);
	
КонецПроцедуры

Функция НормализоватьПараметрыПересчетаЕдиниц(ТекущаяСтрока, УпаковкаНоменклатура) Экспорт
	
	Если УпаковкаНоменклатура = Неопределено Тогда
		
		Номенклатура   = ТекущаяСтрока.Номенклатура;
		Упаковка       = ТекущаяСтрока.Упаковка;
		НужноОкруглять = Истина;
		
	ИначеЕсли ТипЗнч(УпаковкаНоменклатура) = Тип("Структура") Тогда
		
		Если УпаковкаНоменклатура.Свойство("Упаковка") Тогда
			Упаковка = УпаковкаНоменклатура.Упаковка;
		ИначеЕсли УпаковкаНоменклатура.Свойство("ЕдиницаИзмеренияВЕТИС") Тогда
			Если ЗначениеЗаполнено(УпаковкаНоменклатура.ЕдиницаИзмеренияВЕТИС) Тогда
				Упаковка = УпаковкаНоменклатура.ЕдиницаИзмеренияВЕТИС;
			Иначе
				Упаковка = ТекущаяСтрока.ЕдиницаИзмеренияВЕТИС;
			КонецЕсли;
		Иначе
			Упаковка = ТекущаяСтрока.Упаковка;
		КонецЕсли;
		
		Если УпаковкаНоменклатура.Свойство("Номенклатура") Тогда
			Номенклатура = УпаковкаНоменклатура.Номенклатура;
		Иначе
			Номенклатура = ТекущаяСтрока.Номенклатура;
		КонецЕсли;
		
		Если УпаковкаНоменклатура.Свойство("НужноОкруглять") Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "НужноОкруглять") Тогда
				НужноОкруглять = ТекущаяСтрока.НужноОкруглять;
			Иначе
				НужноОкруглять = УпаковкаНоменклатура.НужноОкруглять;
			КонецЕсли;
		Иначе
			НужноОкруглять = Истина;
		КонецЕсли;
		
	Иначе
		Упаковка       = УпаковкаНоменклатура;
		Номенклатура   = ТекущаяСтрока.Номенклатура;
		НужноОкруглять = Истина;
	КонецЕсли;
	
	Возврат Новый Структура("Номенклатура,Упаковка,НужноОкруглять", Номенклатура, Упаковка, НужноОкруглять);
	
КонецФункции

Функция НормализоватьПараметрыПересчетаЕдиницСуффикс(ТекущаяСтрока, ПараметрыПересчета) Экспорт
	
	Суффикс = "";
	НужноОкруглять = Истина;
	
	Если ТипЗнч(ПараметрыПересчета) = Тип("Структура") Тогда
		
		Если ПараметрыПересчета.Свойство("Суффикс") Тогда
			Суффикс = ПараметрыПересчета.Суффикс;
		КонецЕсли;
		
		Если ПараметрыПересчета.Свойство("НужноОкруглять") Тогда
			НужноОкруглять = ПараметрыПересчета.НужноОкруглять;
		КонецЕсли;
	Иначе
		Суффикс = ПараметрыПересчета;
	КонецЕсли;

	Если Суффикс = Неопределено Тогда
		Суффикс = "";
	КонецЕсли;
	
	Возврат Новый Структура("Суффикс,НужноОкруглять", Суффикс, НужноОкруглять); 
	
КонецФункции

Функция ПолучитьКоэффициентРНПТ(ПараметрыПересчета, ТекущаяСтрока, КэшированныеЗначения) Экспорт
	
	Возврат УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ПолучитьКоэффициентРНПТ(ПараметрыПересчета,
																					ТекущаяСтрока,
																					КэшированныеЗначения);
	
КонецФункции

Процедура ПересчитатьВесОбъемВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 

	Суффикс = Неопределено;

	Если СтруктураДействий.Свойство("ПересчитатьВесОбъем", Суффикс) Тогда
		
		КоличествоССуффиксом = КоличествоССуффиксом(Суффикс);
		
		ВесЕдиницыИзмерения = ПолучитьКоэффициентУпаковки(ТекущаяСтрока.ЕдиницаИзмеренияВеса, КэшированныеЗначения).Коэффициент;
		Если ВесЕдиницыИзмерения * ТекущаяСтрока.ВесУпаковки <> 0 Тогда
			ТекущаяСтрока.Вес =	ТекущаяСтрока[КоличествоССуффиксом.КоличествоУпаковок]
				* 1/Окр(ВесЕдиницыИзмерения/ТекущаяСтрока.ВесУпаковки, 7, РежимОкругления.Окр15как20);
		КонецЕсли;
		
		ОбъемЕдиницыИзмерения = ПолучитьКоэффициентУпаковки(ТекущаяСтрока.ЕдиницаИзмеренияОбъема, КэшированныеЗначения).Коэффициент;
		Если ОбъемЕдиницыИзмерения * ТекущаяСтрока.ОбъемУпаковки<>0 Тогда
			ТекущаяСтрока.Объем =ТекущаяСтрока[КоличествоССуффиксом.КоличествоУпаковок]
				* 1/Окр(ОбъемЕдиницыИзмерения/ТекущаяСтрока.ОбъемУпаковки, 7, РежимОкругления.Окр15как20);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция КлючКэшаУпаковки(Номенклатура, Упаковка) Экспорт
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		КлючНоменклатура = Строка(Номенклатура.УникальныйИдентификатор());
	Иначе
		КлючНоменклатура = "ПустоеЗначение";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Упаковка) Тогда
		КлючУпаковка = Строка(Упаковка.УникальныйИдентификатор());
	Иначе
		КлючУпаковка = "ПустоеЗначение";
	КонецЕсли;
	
	Возврат КлючНоменклатура + КлючУпаковка;
	
КонецФункции

Функция КлючКэшаКоэффициентРНПТ(ТекущаяСтрока, ПараметрыПересчета) Экспорт
	
	Возврат УчетПрослеживаемыхТоваровКлиентСерверЛокализация.КлючКэшаКоэффициентРНПТ(ТекущаяСтрока, ПараметрыПересчета);
	
КонецФункции

Процедура ПриИзмененииНазначенияВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ПриИзмененииНазначения") Тогда
		
		ТекущаяСтрока.НазначениеОтправителя = ТекущаяСтрока.Назначение;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму автоматической скидки на товар в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - см. ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ПересчитатьСуммуАвтоматическойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяКоличества = Неопределено;
		
	Если СтруктураДействий.Свойство("ПересчитатьСуммуАвтоматическойСкидки", ИмяКоличества) Тогда
		
		Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок"; 
		КонецЕсли;
			
		ТекущаяСтрока.СуммаАвтоматическойСкидки = Окр(ТекущаяСтрока[ИмяКоличества] *ТекущаяСтрока.Цена
		                                              * ТекущаяСтрока.ПроцентАвтоматическойСкидки / 100, 2);
		
	КонецЕсли;

КонецПроцедуры


Функция ИменаПолейПоСтатусуУказанияСерий(ИмяПоляСтатус)
	
	СтруктураВозврата = Новый Структура("Серия, Номенклатура, Характеристика");
	
	Если ИмяПоляСтатус = "СтатусУказанияСерий" Тогда
		СтруктураВозврата.Серия = "Серия";
		СтруктураВозврата.Номенклатура = "Номенклатура"; 
		СтруктураВозврата.Характеристика = "Характеристика";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийОтправитель" Тогда
		СтруктураВозврата.Серия = "СерияОтправитель";
		СтруктураВозврата.Номенклатура = "НоменклатураОтправитель";
		СтруктураВозврата.Характеристика = "ХарактеристикаОтправитель";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийПолучатель" Тогда
		СтруктураВозврата.Серия = "СерияПолучатель";
		СтруктураВозврата.Номенклатура = "НоменклатураПолучатель";
		СтруктураВозврата.Характеристика = "ХарактеристикаПолучатель";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийОприходование" Тогда
		СтруктураВозврата.Серия = "СерияОприходование";
		СтруктураВозврата.Номенклатура = "НоменклатураОприходование";
		СтруктураВозврата.Характеристика = "ХарактеристикаОприходование";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийНаСкладах" Тогда
		СтруктураВозврата.Серия = "СерияНаСкладах";
		СтруктураВозврата.Номенклатура = "НоменклатураНаСкладах";
		СтруктураВозврата.Характеристика = "ХарактеристикаНаСкладах";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийТоварыУПартнеров" Тогда
		СтруктураВозврата.Серия = "СерияТоварыУПартнеров";
		СтруктураВозврата.Номенклатура = "НоменклатураТоварыУПартнеров";
		СтруктураВозврата.Характеристика = "ХарактеристикаТоварыУПартнеров";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийПереданныхТоваров" Тогда
		СтруктураВозврата.Серия = "СерияПереданныхТоваров";
		СтруктураВозврата.Номенклатура = "НоменклатураПереданныхТоваров";
		СтруктураВозврата.Характеристика = "ХарактеристикаПереданныхТоваров";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийСписываемаяСерия" Тогда
		СтруктураВозврата.Серия = "СерияСписываемаяСерия";
		СтруктураВозврата.Номенклатура = "НоменклатураСписываемаяСерия";
		СтруктураВозврата.Характеристика = "ХарактеристикаСписываемаяСерия";
	КонецЕсли;
	
	Возврат СтруктураВозврата
	
КонецФункции

Функция СуффиксДействия(Параметры)
	
	ИмяКоличества = "";
	
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Суффикс = Параметры.Суффикс;
		Если Параметры.Свойство("ИмяКоличества") Тогда
			ИмяКоличества = Параметры.ИмяКоличества;
		КонецЕсли;
	Иначе
		Суффикс = Параметры;
	КонецЕсли;

	
	Возврат Новый Структура("Суффикс, ИмяКоличества", Суффикс, ИмяКоличества);

КонецФункции

#КонецОбласти

#КонецОбласти
