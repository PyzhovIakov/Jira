// @strict-types
#Область СлужебныйПрограммныйИнтерфейс

#Область КэшВизуализации

// Регистрация документов на визуализацию.
// 
// Параметры:
//  ДокументыЭДО - Массив из ОпределяемыйТип.ВладелецФайлаВизуализацииЭДО
Процедура ЗарегистрироватьДокументыНаВизуализацию(ДокументыЭДО) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого ДокументЭДО Из ДокументыЭДО Цикл
		ЗарегистрироватьДокументЭДОВОчередьНаВизуализацию(ДокументЭДО);
	КонецЦикла;
	ЗапуститьКэшированиеВФоне();
КонецПроцедуры

// Запустить кэширование в фоне.
Процедура ЗапуститьКэшированиеВФоне() Экспорт
	КлючФоновогоЗадания = "ПолучениеВизуализацииЭлектронныхДокументовЭДО";
	Отбор = Новый Структура("Ключ, Состояние", КлючФоновогоЗадания, СостояниеФоновогоЗадания.Активно);
	АктивныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	КоличествоАктивных = АктивныеФоновыеЗадания.Количество();
	Если КоличествоАктивных > 0 Тогда
		Для Каждого ФоновоеЗадание Из АктивныеФоновыеЗадания Цикл
			Если ФоновоеЗадание.РегламентноеЗадание <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗадание.УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Получение визуализации электронного документа'");
	ВыполняемыйМетод = "ВизуализацияЭДОСлужебный.ПолучениеВизуализацииЭлектронныхДокументовЭДО";
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.КлючФоновогоЗадания = КлючФоновогоЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ВыполняемыйМетод);
КонецПроцедуры

// Получить визуализацию из кэша.
// 
// Параметры:
//  ДокументЭДО - ОпределяемыйТип.ВладелецФайлаВизуализацииЭДО - Электронные документы ЭДО
//  НастройкиПредставления - см. ВизуализацияЭДО.НовыеНастройкиПредставления
// 
// Возвращаемое значение:
// см. ВизуализацияЭДО.НовыеСвойстваВизуализации
Функция ПолучитьВизуализациюИзКэша(ДокументЭДО, НастройкиПредставления) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	РезультатыВизуализации.ФайлВизуализации КАК ФайлВизуализации,
	|	РезультатыВизуализации.ПросмотрДоступен КАК ПросмотрДоступен,
	|	РезультатыВизуализации.ОшибкаСервиса КАК ТекстОшибки,
	|	РезультатыВизуализации.ДатаВыполнения КАК ДатаВыполнения,
	|	РезультатыВизуализации.ТипДанных КАК ТипДанных,
	|	РезультатыВизуализации.РазмерФайла КАК РазмерФайла,
	|	РезультатыВизуализации.ИмяФайла КАК ИмяФайла,
	|	РезультатыВизуализации.РасширениеФайла КАК РасширениеФайла,
	|	РезультатыВизуализации.ТребуетсяОбновить КАК ТребуетсяОбновить
	|ИЗ
	|	РегистрСведений.КэшВизуализацииДокументовЭДО КАК РезультатыВизуализации
	|ГДЕ
	|	РезультатыВизуализации.ВладелецФайла = &ВладелецФайла
	|	И РезультатыВизуализации.ЕстьДополнительныеДанные = &ЕстьДополнительныеДанные
	|	И РезультатыВизуализации.ЕстьБанковскиеРеквизиты = &ЕстьБанковскиеРеквизиты
	|	И РезультатыВизуализации.ЕстьКопияВерна = &ЕстьКопияВерна
	|	И РезультатыВизуализации.ЕстьИдДокумента = &ЕстьИдДокумента
	|	И РезультатыВизуализации.ЕстьQRКод = &ЕстьQRКод";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ДокументЭДО);
	Запрос.УстановитьПараметр("ЕстьДополнительныеДанные", НастройкиПредставления.ЕстьНастройкаВыводаДополнительныхДанных);
	Запрос.УстановитьПараметр("ЕстьБанковскиеРеквизиты", НастройкиПредставления.ЕстьНастройкаВыводаБанковскихРеквизитов);
	Запрос.УстановитьПараметр("ЕстьКопияВерна", НастройкиПредставления.ЕстьНастройкаВыводаКопияВерна);
	Запрос.УстановитьПараметр("ЕстьИдДокумента", НастройкиПредставления.ЕстьИдДокумента);
	Запрос.УстановитьПараметр("ЕстьQRКод", НастройкиПредставления.ЕстьQRКод);

	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ДанныеВизуализации = ВизуализацияЭДО.НовыеСвойстваВизуализации();
	ЗаполнитьЗначенияСвойств(ДанныеВизуализации.НастройкиПредставления, НастройкиПредставления);

	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеВизуализации, Выборка);
		РасширениеИзИмени = Прав(ДанныеВизуализации.ИмяФайла, СтрДлина(ДанныеВизуализации.РасширениеФайла));
		Если РасширениеИзИмени <> ДанныеВизуализации.РасширениеФайла Тогда
			ДанныеВизуализации.ИмяФайла = СтрШаблон("%1.%2", ДанныеВизуализации.ИмяФайла, ДанныеВизуализации.РасширениеФайла);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ФайлВизуализации) Тогда
			ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.ФайлВизуализации, Ложь);
			
			Если ДвоичныеДанныеФайла = Неопределено Тогда
				ДанныеВизуализации.ПредставлениеДокумента = Неопределено;
			ИначеЕсли Выборка.ТипДанных = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.ТабличныйДокумент Тогда
				ДанныеВизуализации.ПредставлениеДокумента = ОбщегоНазначенияБЭД.ТабличныйДокументИзДвоичныхДанных(
					ДвоичныеДанныеФайла);
			ИначеЕсли Выборка.ТипДанных = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.HTMLДокумент Тогда
				ДанныеВизуализации.ПредставлениеДокумента = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеФайла,
					КодировкаТекста.UTF8);
			Иначе
				ДанныеВизуализации.ПредставлениеДокумента = ДвоичныеДанныеФайла;
			КонецЕсли;
			ДанныеВизуализации.ПолученИзКэша = Истина;
		Иначе
			ДанныеВизуализации.ПросмотрДоступен = Ложь;
		КонецЕсли;
		Если ДанныеВизуализации.ПредставлениеДокумента = Неопределено Тогда
			ДанныеВизуализации.ПросмотрДоступен = Ложь;
			ДанныеВизуализации.ТребуетсяОбновить = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат ДанныеВизуализации;
КонецФункции

// После записи нового документа.
// 
// Параметры:
//  ДокументЭДО - ОпределяемыйТип.ВладелецФайлаВизуализацииЭДО
Процедура ОбновитьКэшВизуализации(ДокументЭДО) Экспорт
	//@skip-check bsl-legacy-check-string-literal
	ЭтоОблачныйЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЭДО, "ЭтоОблачныйЭДО");
	Если ЭтоОблачныйЭДО Тогда
		Возврат;
	КонецЕсли;
	ОсновнойФайл = ЭлектронныеДокументыЭДО.ОсновнойФайлИнформацииОтправителя(ДокументЭДО);
	СвойстваОсновнойФайл = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОсновнойФайл, "Расширение, Размер");
	
	Если РегистрироватьДокументЭДОДляКэшированияВФоне(СвойстваОсновнойФайл.Расширение, СвойстваОсновнойФайл.Размер) Тогда
		ЗарегистрироватьДокументЭДОВОчередьНаВизуализацию(ДокументЭДО);
		ЗапуститьКэшированиеВФоне();
	ИначеЕсли РаботаСФайламиБЭДКлиентСервер.ЭтоРасширениеФайлаPDF(СвойстваОсновнойФайл.Расширение) Тогда
		ОбновитьВизуализациюФайлаPDFСПомощьюПлатформы(ДокументЭДО, ОсновнойФайл);
	Иначе
		НаборЗаписейКэшаВизуализации = РегистрыСведений.КэшВизуализацииДокументовЭДО.СоздатьНаборЗаписей();
		НачатьТранзакцию();
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных();
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.КэшВизуализацииДокументовЭДО");
			ЭлементБлокировки.УстановитьЗначение("ВладелецФайла", ДокументЭДО);
			БлокировкаДанных.Заблокировать();
			НаборЗаписейКэшаВизуализации.Отбор.ВладелецФайла.Установить(ДокументЭДО);
			УстановитьПривилегированныйРежим(Истина);
			НаборЗаписейКэшаВизуализации.Прочитать();
			Для Каждого ЗаписьКэша Из НаборЗаписейКэшаВизуализации Цикл
				ЗаписьКэша.ТребуетсяОбновить = Истина;
			КонецЦикла;
			
			НаборЗаписейКэшаВизуализации.Записать();
			УстановитьПривилегированныйРежим(Ложь);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обновить кэш визуализации по причине:'")
				+ Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ПараметрыЗаписи = ОбщегоНазначенияБЭД.НовыеПараметрыЗаписиВЖурналРегистрации();
			ПараметрыЗаписи.Данные = ДокументЭДО;
			ПараметрыЗаписи.ОбъектМетаданных = ДокументЭДО.Метаданные();
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения,
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами,
				УровеньЖурналаРегистрации.Ошибка);
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

// Зарегистрировать документ ЭДО в РС.ОчередьЗапросовВизуализацииЭДО на визуализацию.
// 
// Параметры:
//  ДокументЭДО - ОпределяемыйТип.ВладелецФайлаВизуализацииЭДО - Документ ЭДО
Процедура ЗарегистрироватьДокументЭДОВОчередьНаВизуализацию(ДокументЭДО) Экспорт
	МенеджерЗаписиОчереди = РегистрыСведений.ОчередьЗапросовВизуализацииЭДО.СоздатьМенеджерЗаписи();
	НачатьТранзакцию();
	Попытка
		МенеджерЗаписиОчереди.ВладелецФайла = ДокументЭДО;
		МенеджерЗаписиОчереди.НомерПопытки = 0;
		МенеджерЗаписиОчереди.ПлановаяДатаСледующейПопытки = ТекущаяУниверсальнаяДата();
		УстановитьПривилегированныйРежим(Истина);
		МенеджерЗаписиОчереди.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
КонецПроцедуры

// @skip-check query-in-loop
// Получение визуализации электронных документов ЭДО.
Процедура ПолучениеВизуализацииЭлектронныхДокументовЭДО() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ПолучитьДанныеВизуализацииЭДО);

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 100
	|	ОчередьЗапросовВизуализации.ВладелецФайла КАК ДокументЭДО,
	|	СообщениеЭДО.Ссылка КАК СообщениеОтправителя,
	|	СообщениеЭДО.ОсновнойФайл КАК ОсновнойФайл,
	|	СообщениеЭДО.ОсновнойФайл.Расширение КАК РасширениеОсновногоФайла,
	|	СообщениеЭДО.ОсновнойФайл.Размер КАК РазмерОсновногоФайла,
	|	СообщениеЭДО.ОсновнойФайл.ПолноеИмяФайла КАК ИмяФайла
	|ИЗ
	|	РегистрСведений.ОчередьЗапросовВизуализацииЭДО КАК ОчередьЗапросовВизуализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
	|		ПО СообщениеЭДО.ЭлектронныйДокумент = ОчередьЗапросовВизуализации.ВладелецФайла
	|		И СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя)
	|ГДЕ
	|	ОчередьЗапросовВизуализации.ПлановаяДатаСледующейПопытки <= &ТекущаяУниверсальнаяДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОчередьЗапросовВизуализации.ПлановаяДатаСледующейПопытки";
	
	Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата", ТекущаяУниверсальнаяДата());
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	Пока Не Результат.Пустой() Цикл
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			ПараметрыВыполнения = Новый Структура;
			ПараметрыВыполнения.Вставить("ДокументЭДО");
			ПараметрыВыполнения.Вставить("СообщениеОтправителя");
			ПараметрыВыполнения.Вставить("ОсновнойФайл");
			ПараметрыВыполнения.Вставить("РасширениеОсновногоФайла");
			ПараметрыВыполнения.Вставить("РазмерОсновногоФайла");
			ПараметрыВыполнения.Вставить("ИмяФайла");
			ЗаполнитьЗначенияСвойств(ПараметрыВыполнения, Выборка);
			ОбновитьВизуализациюДокументаЭДОИзОчереди(ПараметрыВыполнения);
		КонецЦикла;
		Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата", ТекущаяУниверсальнаяДата());
		Результат = Запрос.Выполнить();
	КонецЦикла;
	
КонецПроцедуры

// Возвращает проштампованный файл.
//
// Параметры:
//  СообщениеЭДО - ДокументСсылка.СообщениеЭДО
// 
// Возвращаемое значение:
//  Структура - Структура результата получения проштампованного файла:
//  * ПредставлениеДокумента - ДвоичныеДанные - Данные проштампованного файла.
//                           - Неопределено - Если файл не удалось получить.
//                           - Строка - если html документ
//  * Успех                  - Булево - Истина, если удалось получить двоичные данные, иначе - Ложь.
//  * ТекстОшибки            - Строка - Текст ошибки.
//
Функция ПроштампованныйФайл(СообщениеЭДО) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех", Ложь);
	СтруктураВозврата.Вставить("ПредставлениеДокумента", Неопределено);
	СтруктураВозврата.Вставить("ТекстОшибки", "");
	Если Не ЗначениеЗаполнено(СообщениеЭДО) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеЭДО, "ЭлектронныйДокумент");
	НастройкиПредставления = ВизуализацияЭДО.НовыеНастройкиПредставления();
	КэшВизуализации = ПолучитьВизуализациюИзКэша(ЭлектронныйДокумент, НастройкиПредставления);
	Если КэшВизуализации.ТребуетсяОбновить Тогда
		ОбновитьКэшВизуализации(ЭлектронныйДокумент);
		КэшВизуализации = ПолучитьВизуализациюИзКэша(ЭлектронныйДокумент, НастройкиПредставления);
	КонецЕсли;
	СтруктураВозврата.Успех = КэшВизуализации.ПросмотрДоступен;
	СтруктураВозврата.ПредставлениеДокумента = КэшВизуализации.ПредставлениеДокумента;
	СтруктураВозврата.ТекстОшибки = КэшВизуализации.ТекстОшибки;
	Возврат СтруктураВозврата;
	
КонецФункции

// Параметры:
//  ДокументЭДО - ОпределяемыйТип.ВладелецФайлаВизуализацииЭДО
//  ФайлыВизуализации - Массив Из СправочникСсылка.КэшВизуализацииДокументовЭДОПрисоединенныеФайлы
//
Процедура УдалитьКэшВизуализацииДокументаЭДО(ДокументЭДО, ФайлыВизуализации) Экспорт
	
	НаборЗаписейКэшаВизуализации = РегистрыСведений.КэшВизуализацииДокументовЭДО.СоздатьНаборЗаписей();
	НачатьТранзакцию();
	
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.КэшВизуализацииДокументовЭДО");
		ЭлементБлокировки.УстановитьЗначение("ВладелецФайла", ДокументЭДО);
		БлокировкаДанных.Заблокировать();
		
		НаборЗаписейКэшаВизуализации.Отбор.ВладелецФайла.Установить(ДокументЭДО);
		УстановитьПривилегированныйРежим(Истина);
		
		Если ЗначениеЗаполнено(ФайлыВизуализации) Тогда
			
			ЗаписиВизуализацийКУдалению = Новый Массив; // Массив Из РегистрСведенийЗапись
			НаборЗаписейКэшаВизуализации.Прочитать();
			Для Каждого ЗаписьКэша Из НаборЗаписейКэшаВизуализации Цикл
				Если ФайлыВизуализации.Найти(ЗаписьКэша.ФайлВизуализации) <> Неопределено Тогда
					ЗаписиВизуализацийКУдалению.Добавить(ЗаписьКэша);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ЗаписьКУдалению Из ЗаписиВизуализацийКУдалению Цикл
				НаборЗаписейКэшаВизуализации.Удалить(ЗаписьКУдалению);
			КонецЦикла;
			
		КонецЕсли;
		
		НаборЗаписейКэшаВизуализации.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Не удалось удалить кэш визуализации по причине:'")
			+ Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		ПараметрыЗаписи = ОбщегоНазначенияБЭД.НовыеПараметрыЗаписиВЖурналРегистрации();
		ПараметрыЗаписи.Данные = ДокументЭДО;
		ПараметрыЗаписи.ОбъектМетаданных = ДокументЭДО.Метаданные();
		
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами,
				УровеньЖурналаРегистрации.Ошибка);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Визуализация

// Результат представления данных для визуализации
// 
// Возвращаемое значение:
//  Структура:
//   * Успех - Булево - Представление сформировано
//   * ПредставлениеДокумента - ТабличныйДокумент, Строка, ДвоичныеДанные, Неопределено - Представление данных
//   * ИмяФайла - Строка
//   * РасширениеФайла - Строка
//   * РазмерФайла - Число
//   * ТипДанных - ПеречислениеСсылка.ТипыДанныхВизуализацииДокументаЭДО
//   * НастройкиПредставления - См. ВизуализацияЭДО.НовыеНастройкиПредставления
//   * ПользовательскиеНастройкиПредставления - См. ВизуализацияЭДО.НовыеНастройкиПредставления
//   * ПолученИзКэша - Булево
Функция НовыйРезультатПредставленияДанныхСообщения() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("ПредставлениеДокумента", Неопределено);
	Результат.Вставить("ИмяФайла", "");
	Результат.Вставить("РасширениеФайла", "");
	Результат.Вставить("РазмерФайла", 0);
	Результат.Вставить("ТипДанных", Перечисления.ТипыДанныхВизуализацииДокументаЭДО.ПустаяСсылка());
	Результат.Вставить("НастройкиПредставления", ВизуализацияЭДО.НовыеНастройкиПредставления());
	Результат.Вставить("ПользовательскиеНастройкиПредставления",
		ВизуализацияЭДО.ПользовательскиеНастройкиПредставления());
	Результат.Вставить("ПолученИзКэша", Ложь);
	Возврат Результат;
	
КонецФункции

// Свойства для формирования визуализации
//
// Возвращаемое значение:
// Структура:
//  * Ссылка - Неопределено
//           - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//           - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ПометкаУдаления - Булево
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
Функция НовыеСвойстваДокументаДляФормированияВизуализации() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Ссылка", Неопределено);
	Результат.Вставить("ПометкаУдаления", Ложь);
	Результат.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка());
	Возврат Результат;
КонецФункции

// Данные записанного документа для проверки распознавания
//
// Возвращаемое значение:
// Структура:
//  * Ссылка - Неопределено
//           - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//           - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ПометкаУдаления - Булево
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
Функция НовыеДанныеЗаписанногоДокументаДляПроверкиРаспознавания() Экспорт
	
	ПроверкаЗаписанногоДокумента = Новый Структура;
	ПроверкаЗаписанногоДокумента.Вставить("Ссылка", Неопределено);
	ПроверкаЗаписанногоДокумента.Вставить("ПометкаУдаления", Ложь);
	ПроверкаЗаписанногоДокумента.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	ПроверкаЗаписанногоДокумента.Вставить("ТипЭлементаРегламента",
		Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка());
	Возврат ПроверкаЗаписанногоДокумента;
	
КонецФункции

// Данные нового документа для проверки распознавания
//
// Возвращаемое значение:
// Структура:
//  * ИмяФайла - Строка
//  * РасширениеФайла - Строка
//  * ДвоичныеДанныеФайла - Неопределено
//                        - ДвоичныеДанные
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  * ФорматОсновногоТитула - Строка
Функция НовыеДанныеНовогоДокументаДляПроверкиРаспознавания() Экспорт
	
	ПроверкаНовогоДокумента = Новый Структура;
	ПроверкаНовогоДокумента.Вставить("ИмяФайла", "");
	ПроверкаНовогоДокумента.Вставить("РасширениеФайла", "");
	ПроверкаНовогоДокумента.Вставить("ДвоичныеДанныеФайла", Неопределено);
	ПроверкаНовогоДокумента.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	ПроверкаНовогоДокумента.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	ПроверкаНовогоДокумента.Вставить("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка());
	ПроверкаНовогоДокумента.Вставить("ФорматОсновногоТитула", "");
	Возврат ПроверкаНовогоДокумента;
	
КонецФункции

// Данные документа для проверки распознавания
//
// Возвращаемое значение:
// Структура:
//  * ПроверкаЗаписанногоДокумента - см. НовыеДанныеЗаписанногоДокументаДляПроверкиРаспознавания
//  * ПроверкаНовогоДокумента - см. НовыеДанныеНовогоДокументаДляПроверкиРаспознавания
Функция НовыеДанныеДокументаДляПроверкиРаспознавания() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПроверкаЗаписанногоДокумента", НовыеДанныеЗаписанногоДокументаДляПроверкиРаспознавания());
	Результат.Вставить("ПроверкаНовогоДокумента", НовыеДанныеНовогоДокументаДляПроверкиРаспознавания());
	Возврат Результат;
	
КонецФункции

// Конструктор параметров визуализации документа.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ВыводитьДопДанные - Булево - признак включения режима вывода дополнительных данных.
// 	* ВыводитьБанковскиеРеквизиты - Булево - признак включения режима вывода банковских реквизитов.
// 	* ВыводитьКопияВерна - Булево - признак включения режима вывода отметки "Копия верна".
// 	* ВыводитьШапкуСИдДокумента - Булево - признак, позволяющий отключить в шапке вывод идентификатора документа.
// 	* ПодсказкаQRКода - Строка - текст подсказки QR кода.
// 	* ПубличнаяСсылкаQRКода - Строка - текст публичной ссылки QR кода.
//
Функция НовыеПараметрыВизуализацииДокумента() Экспорт
	
	ПараметрыВизуализацииДокумента = Новый Структура;
	ПараметрыВизуализацииДокумента.Вставить("ВыводитьДопДанные", Истина);
	ПараметрыВизуализацииДокумента.Вставить("ВыводитьБанковскиеРеквизиты", Истина);
	ПараметрыВизуализацииДокумента.Вставить("ВыводитьКопияВерна", Истина);
	ПараметрыВизуализацииДокумента.Вставить("ВыводитьШапкуСИдДокумента", Истина);
	ПараметрыВизуализацииДокумента.Вставить("ПодсказкаQRКода", "");
	ПараметрыВизуализацииДокумента.Вставить("ПубличнаяСсылкаQRКода", "");
	
	Возврат ПараметрыВизуализацииДокумента;
	
КонецФункции

// Конструктор параметров предварительной визуализации
//
// Возвращаемое значение:
//  Структура:
// * ПараметрыВизуализации - См. НовыеПараметрыВизуализацииДокумента
// * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// * ДвоичныеДанныеФайла - Неопределено,ДвоичныеДанные
// * ИмяФайла - Строка
// * ДвоичныеДанныеФайлаОтвета - Неопределено,ДвоичныеДанные
// * ФорматОсновногоТитула - Строка
Функция НовыеПараметрыПредварительнойВизуализацииДокумента() Экспорт
	
	ПараметрыПредварительнойВизуализации = Новый Структура;
	ПараметрыПредварительнойВизуализации.Вставить("ПараметрыВизуализации", НовыеПараметрыВизуализацииДокумента());
	ПараметрыПредварительнойВизуализации.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	ПараметрыПредварительнойВизуализации.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	ПараметрыПредварительнойВизуализации.Вставить("ДвоичныеДанныеФайла", Неопределено);
	ПараметрыПредварительнойВизуализации.Вставить("ИмяФайла", "");
	ПараметрыПредварительнойВизуализации.Вставить("ДвоичныеДанныеФайлаОтвета", Неопределено);
	ПараметрыПредварительнойВизуализации.Вставить("ФорматОсновногоТитула", "");
	Возврат ПараметрыПредварительнойВизуализации;

КонецФункции

// Новые параметры получения представления данных сообщения по ссылке.
// 
// Возвращаемое значение:
//  Структура:
// * Сообщение - ДокументСсылка.СообщениеЭДО - Сообщение для которого формируется представление.
// * СообщениеОтвета - Неопределено, ДокументСсылка.СообщениеЭДО, Массив из ДокументСсылка.СообщениеЭДО -
// 			Информация получателя для сообщения, переданного первым параметром,
// 				или массив сообщений для извлечения параметров.
// * СообщениеЗапроса - Неопределено, ДокументСсылка.СообщениеЭДО - Информация отправителя для сообщения
// * ПараметрыВизуализации - см. НовыеПараметрыВизуализацииДокумента
// * ВыводитьШтампыПодписей - Булево
// * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция НовыеПараметрыПолученияПредставленияДанныхСообщенияПоСсылке() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Сообщение", Документы.СообщениеЭДО.ПустаяСсылка());
	Результат.Вставить("СообщениеОтвета", Неопределено);
	Результат.Вставить("СообщениеЗапроса", Неопределено);
	Результат.Вставить("ПараметрыВизуализации", НовыеПараметрыВизуализацииДокумента());
	Результат.Вставить("ВыводитьШтампыПодписей", Истина);
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	
	Возврат Результат;
КонецФункции

// Документ распознан
//
// Параметры:
//  ДанныеДокумента - См. НовыеДанныеДокументаДляПроверкиРаспознавания
//
// Возвращаемое значение:
//  Булево
Функция ДокументРаспознан(ДанныеДокумента) Экспорт
	
	РезультатРаспознавания = ПриРаспознаванииДокумента(ДанныеДокумента);
	
	Если РезультатРаспознавания.РаспознаниеВыполнено Тогда
		Возврат РезультатРаспознавания.Распознан;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДокумента.ПроверкаЗаписанногоДокумента) 
		И ЗначениеЗаполнено(ДанныеДокумента.ПроверкаЗаписанногоДокумента.Ссылка) Тогда
		Возврат ЗаписанныйДокументРаспознан(ДанныеДокумента.ПроверкаЗаписанногоДокумента);
	ИначеЕсли ЗначениеЗаполнено(ДанныеДокумента.ПроверкаНовогоДокумента) Тогда
		Возврат НовыйДокументРаспознан(ДанныеДокумента.ПроверкаНовогоДокумента);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Готовит визуализацию документа и возвращает результат
//  Параметры:
//  ДанныеДокумента - См. НовыеСвойстваДокументаДляФормированияВизуализации
//  ПараметрыВизуализации - См. НовыеПараметрыВизуализацииДокумента
//  ТребуетсяОбновитьКэш - Булево
// 
// Возвращаемое значение:
//  См. НовыйРезультатПредставленияДанныхСообщения
Функция ВизуализацияДокумента(ДанныеДокумента, ПараметрыВизуализации, ТребуетсяОбновитьКэш = Ложь) Экспорт
	НастройкиПредставления = ВизуализацияЭДО.НовыеНастройкиПредставления();
	НастройкиПредставления.ЕстьНастройкаВыводаБанковскихРеквизитов = ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты;
	НастройкиПредставления.ЕстьНастройкаВыводаДополнительныхДанных = ПараметрыВизуализации.ВыводитьДопДанные;
	НастройкиПредставления.ЕстьНастройкаВыводаКопияВерна = ПараметрыВизуализации.ВыводитьКопияВерна;
	НастройкиПредставления.ЕстьИдДокумента = ПараметрыВизуализации.ВыводитьШапкуСИдДокумента;
	НастройкиПредставления.ЕстьQRКод = ЗначениеЗаполнено(ПараметрыВизуализации.ПубличнаяСсылкаQRКода);
	
	КэшВизуализации = ПолучитьВизуализациюИзКэша(ДанныеДокумента.Ссылка, НастройкиПредставления);
	Если ТребуетсяОбновитьКэш Тогда
		КэшВизуализации.ТребуетсяОбновить = ТребуетсяОбновитьКэш;
	КонецЕсли;
	Если КэшВизуализации.ПросмотрДоступен И Не КэшВизуализации.ТребуетсяОбновить Тогда
		Результат = НовыйРезультатПредставленияДанныхСообщения();
		ЗаполнитьЗначенияСвойств(Результат, КэшВизуализации);
		Результат.Успех = Истина;
		ЗаполнитьДоступностьПользовательскихНастроекПредставленияДокумента(
			Результат.ПользовательскиеНастройкиПредставления, Результат.ТипДанных, ДанныеДокумента.ТипДокумента);
		Возврат Результат;
	КонецЕсли;
	ДанныеДокументаДляПроверкиРаспознавания = НовыеДанныеДокументаДляПроверкиРаспознавания();
	ЗаполнитьЗначенияСвойств(ДанныеДокументаДляПроверкиРаспознавания.ПроверкаЗаписанногоДокумента, ДанныеДокумента);
	ДанныеДокументаДляПроверкиРаспознавания.ПроверкаЗаписанногоДокумента.ТипЭлементаРегламента = 
		Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	Если Не ДокументРаспознан(ДанныеДокументаДляПроверкиРаспознавания) Тогда
		Если Не ЗначениеЗаполнено(КэшВизуализации.ТекстОшибки) Тогда
			ОбновитьКэшВизуализации(ДанныеДокумента.Ссылка);
			Возврат ПредставлениеДанныхСообщенияПоФайлу(ДанныеДокумента.Ссылка);
		Иначе
			Результат = НовыйРезультатПредставленияДанныхСообщения();
			ЗаполнитьЗначенияСвойств(Результат, КэшВизуализации);
			Результат.Успех = Истина;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПолученияПредставления = НовыеПараметрыПолученияПредставленияДанныхСообщенияПоСсылке();
	ПараметрыПолученияПредставления.ПараметрыВизуализации = ПараметрыВизуализации;
	
	СвойстваСообщений = ЭлектронныеДокументыЭДОПовтИспНаВызов.СвойстваСообщенийПросмотраКарточкиДокумента(
		ДанныеДокумента.Ссылка);
	
	ВизуализацияСтроитсяПоОтветномуТитулу = 
		ДляТипаДокументаВизуализацияСтроитсяПоОтветномуТитулу(ДанныеДокумента.ТипДокумента) 
		И СвойстваСообщений.Количество() > 1;
	
	Для Каждого СвойстваСообщения Из СвойстваСообщений Цикл
		
		Если СвойстваСообщения.Статус = Перечисления.СтатусыСообщенийЭДО.НеСформирован Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВизуализацияСтроитсяПоОтветномуТитулу
			И СвойстваСообщения.ТипЭлементаРегламента =
			Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
				
			ПараметрыПолученияПредставления.СообщениеЗапроса = СвойстваСообщения.Ссылка;
		
		ИначеЕсли СвойстваСообщения.ТипЭлементаРегламента =
			Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			
			ПараметрыПолученияПредставления.Сообщение = СвойстваСообщения.Ссылка;
			
		ИначеЕсли ВизуализацияСтроитсяПоОтветномуТитулу
			И СвойстваСообщения.ТипЭлементаРегламента =
			Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя Тогда
			
			ПараметрыПолученияПредставления.Сообщение = СвойстваСообщения.Ссылка;
			
		Иначе
			
			ПараметрыПолученияПредставления.СообщениеОтвета = СвойстваСообщения.Ссылка;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПредставлениеДанных = ПредставлениеДанныхСообщенияПоСсылке(ПараметрыПолученияПредставления);
	
	Возврат ПредставлениеДанных;
	
КонецФункции

// Дополняет табличный документ штампом по сообщению ЭДО
//
//  Параметры:
//  ТабличныйДокумент - ТабличныйДокумент
//  Сообщение - ДокументСсылка.СообщениеЭДО
Процедура ДополнитьТабличныйДокументШтампамиПодписей(ТабличныйДокумент, Сообщение) Экспорт
	
	Штамп = ШтампЭлектроннойПодписиДляВизуализацииЭД(Сообщение);
	
	Если Штамп = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, Штамп, "Штамп");
	
	СвойстваСообщения = ЭлектронныеДокументыЭДО.СвойстваСообщения(Сообщение);
	Если СвойстваСообщения.ТипДокумента = Перечисления.ТипыДокументовЭДО.АктОРасхождениях
		И СвойстваСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
		ДанныеЭлементовСхемыРегламента = ЭлектронныеДокументыЭДО.ДанныеЭлементовСхемыРегламента(
			СвойстваСообщения.ЭлектронныйДокумент);
		ДанныеДопСведенийПоРезультатамПриемки = ДанныеЭлементовСхемыРегламента.Найти(
			Перечисления.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки, "ТипЭлементаРегламента");
		Если ЗначениеЗаполнено(ДанныеДопСведенийПоРезультатамПриемки) Тогда
			ДополнитьТабличныйДокументШтампамиПодписей(ТабличныйДокумент,
				ДанныеДопСведенийПоРезультатамПриемки.Сообщение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// @skip-check invocation-parameter-type-intersect, typed-value-adding-to-untyped-collection
// Формирует представление данных сообщения.
// 
// Параметры:
//	ПараметрыПолученияПредставления - См. НовыеПараметрыПолученияПредставленияДанныхСообщенияПоСсылке
//
// Возвращаемое значение:
//  См. НовыйРезультатПредставленияДанныхСообщения
Функция ПредставлениеДанныхСообщенияПоСсылке(ПараметрыПолученияПредставления) Экспорт
	
	Результат = НовыйРезультатПредставленияДанныхСообщения();
	
	Сообщение = ПараметрыПолученияПредставления.Сообщение;
	СообщениеОтвета = ПараметрыПолученияПредставления.СообщениеОтвета;
	СообщениеЗапроса = ПараметрыПолученияПредставления.СообщениеЗапроса;
	ПараметрыВизуализации = ПараметрыПолученияПредставления.ПараметрыВизуализации;
	КонтекстДиагностики = ПараметрыПолученияПредставления.КонтекстДиагностики;
	
	СвойстваСообщения = ЭлектронныеДокументыЭДО.СвойстваСообщения(Сообщение);
	НастройкиПредставления = ВизуализацияЭДО.НовыеНастройкиПредставления();
	НастройкиПредставления.ЕстьНастройкаВыводаБанковскихРеквизитов = ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты;
	НастройкиПредставления.ЕстьНастройкаВыводаДополнительныхДанных = ПараметрыВизуализации.ВыводитьДопДанные;
	НастройкиПредставления.ЕстьНастройкаВыводаКопияВерна = ПараметрыВизуализации.ВыводитьКопияВерна;
	НастройкиПредставления.ЕстьИдДокумента = ПараметрыВизуализации.ВыводитьШапкуСИдДокумента;
	НастройкиПредставления.ЕстьQRКод = ЗначениеЗаполнено(ПараметрыВизуализации.ПубличнаяСсылкаQRКода);
	Если ПараметрыПолученияПредставления.ВыводитьШтампыПодписей
		И РегламентыЭДО.ЭтоЭлементРегламентаОтправителя(СвойстваСообщения.ТипЭлементаРегламента) Тогда
		КэшВизуализации = ПолучитьВизуализациюИзКэша(СвойстваСообщения.ЭлектронныйДокумент, НастройкиПредставления);
	Иначе
		КэшВизуализации = ВизуализацияЭДО.НовыеСвойстваВизуализации();
	КонецЕсли;
	
	ОписаниеВида = ЭлектронныеДокументыЭДО.ОписаниеВидаДокумента(СвойстваСообщения.ВидСообщения);
	
	Если КэшВизуализации.ПросмотрДоступен И Не КэшВизуализации.ТребуетсяОбновить Тогда
		ЗаполнитьЗначенияСвойств(Результат, КэшВизуализации);
		Результат.Успех = Истина;
		ЗаполнитьДоступностьПользовательскихНастроекПредставленияДокумента(
			Результат.ПользовательскиеНастройкиПредставления, Результат.ТипДанных, ОписаниеВида.ТипДокумента);
		Возврат Результат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(СвойстваСообщения.ОсновнойФайл);
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ИмяФайла = СвойстваСообщения.ПолноеИмяФайла;
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	Результат.ИмяФайла = ИмяФайла;
	Результат.РазмерФайла = ДанныеФайла.Размер;
	Результат.РасширениеФайла = ДанныеФайла.Расширение;
	ПредставлениеДанных = Неопределено;
	
	Если ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
		ПараметрыПредставления = ИнтеграцияЭДО.НовыеПараметрыПредставленияПроизвольногоДокумента();
		Если ЗначениеЗаполнено(ПараметрыВизуализации) Тогда
			ПараметрыПредставления.ВыводитьДопДанные = ПараметрыВизуализации.ВыводитьДопДанные;
			ПараметрыПредставления.ВыводитьБанковскиеРеквизиты = ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты;
		КонецЕсли;
		ПараметрыПредставления.ПрикладнойТипДокумента = ОписаниеВида.ПрикладнойТипДокумента;
		ПараметрыПредставления.ЭлектронныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(
			СвойстваСообщения.ОсновнойФайл);
		
		ПредставлениеДанных = ИнтеграцияЭДО.ПредставлениеФайлаПрикладногоЭлектронногоДокумента(
			ДвоичныеДанныеФайла, ПараметрыПредставления);
		
	ИначеЕсли (ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.КонтрактЕИС
		Или ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.ПриложениеДляЕИС
		Или ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.ИзвещениеОбОшибкеЕИС
		Или ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.КвитанцияЕИС)
		И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		ПараметрыПредставления = ИнтеграцияЭДО.НовыеПараметрыПредставленияПроизвольногоДокумента();
		Если ЗначениеЗаполнено(ПараметрыВизуализации) Тогда
			ПараметрыПредставления.ВыводитьДопДанные = ПараметрыВизуализации.ВыводитьДопДанные;
			ПараметрыПредставления.ВыводитьБанковскиеРеквизиты = ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты;
		КонецЕсли;
		ПараметрыПредставления.ПрикладнойТипДокумента = ОписаниеВида.ТипДокумента;
		ПараметрыПредставления.ЭлектронныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(
			СвойстваСообщения.ОсновнойФайл);
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИСПолучениеВходящих");
		ПредставлениеДанных = МодульПодсистемы.СоздатьРезультатПредставленияДокументаЕИС(
			ДвоичныеДанныеФайла, ПараметрыПредставления);
		
	ИначеЕсли ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность
		Или ФорматыЭДО_ФНС.ЭтоПространствоИменМЧД(ИмяФайла) Тогда
		
		ДвоичныеДанныеФайла = ЭлектронныеДокументыЭДО.ДвоичныеДанныеСообщения(Сообщение);
		
		ПредставлениеДанных = МашиночитаемыеДоверенности.ТабличныйДокументМЧД(ДвоичныеДанныеФайла, Истина);
	
	ИначеЕсли ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов
		Или ФорматыЭДО_ФНС.ЭтоПространствоИменАктСверкиВзаиморасчетов(ИмяФайла) Тогда
		
		ДвоичныеДанныеФайлаЗапроса = Неопределено;

		Если ЗначениеЗаполнено(СообщениеЗапроса) Тогда
			СвойстваСообщения = ЭлектронныеДокументыЭДО.СвойстваСообщения(СообщениеЗапроса);
			ДвоичныеДанныеФайлаЗапроса = РаботаСФайлами.ДвоичныеДанныеФайла(СвойстваСообщения.ОсновнойФайл);
		КонецЕсли;

		ПредставлениеДанных = ВизуализацияЭлектронногоДокумента(ДвоичныеДанныеФайла, ДвоичныеДанныеФайлаЗапроса, 
			ПараметрыВизуализации, КонтекстДиагностики);
	
	ИначеЕсли МодульОбменСГИСЭПД <> Неопределено 
		И МодульОбменСГИСЭПД.ЭтоДокументЭПД(ОписаниеВида.ТипДокумента) Тогда
		
		ПредставлениеДанных = МодульОбменСГИСЭПД.ПредставлениеФайлаПрикладногоЭлектронногоДокумента(ДвоичныеДанныеФайла);
			
	ИначеЕсли ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.Внутренний Тогда	
		
		ПредставлениеДанных = ВнутренниеДокументыЭДО.ПредставлениеДанныхВнутреннегоДокумента(ДвоичныеДанныеФайла);
		
	ИначеЕсли ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорныйДокумент
		И Обработки.ФорматДоговорныйДокументИнформацияОтправителяЭДО.ЭтоФайлФормата(ИмяФайла) Тогда
			
		ПредставлениеДанных = Обработки.ФорматДоговорныйДокументИнформацияОтправителяЭДО.ПредставлениеДанныхДокумента(
			ДвоичныеДанныеФайла);
		
	Иначе
		ДвоичныеДанныеФайлаОтвета = Неопределено;

		Если ЗначениеЗаполнено(СообщениеОтвета) Тогда
			Если ТипЗнч(СообщениеОтвета) = Тип("Массив") Тогда
				ДвоичныеДанныеФайлаОтвета = Новый Массив;
				ФалыСообщений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СообщениеОтвета, "ОсновнойФайл");
				Для Каждого ФайлСообщения Из ФалыСообщений Цикл
					ДанныеФайлаСообщения = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлСообщения.Значение);
					ДвоичныеДанныеФайлаОтвета.Добавить(ДанныеФайлаСообщения);
				КонецЦикла;	
			Иначе	
				СвойстваСообщения = ЭлектронныеДокументыЭДО.СвойстваСообщения(СообщениеОтвета);
				ДвоичныеДанныеФайлаОтвета = РаботаСФайлами.ДвоичныеДанныеФайла(СвойстваСообщения.ОсновнойФайл);
			КонецЕсли;
		КонецЕсли;

		ПредставлениеДанных = ВизуализацияЭлектронногоДокумента(ДвоичныеДанныеФайла, ДвоичныеДанныеФайлаОтвета,
			ПараметрыВизуализации, КонтекстДиагностики);
		
	КонецЕсли;
	
	Если ТипЗнч(ПредставлениеДанных.ПредставлениеДокумента) = Тип("Строка") Тогда
		Результат.ТипДанных = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.HTMLДокумент;
	ИначеЕсли ТипЗнч(ПредставлениеДанных.ПредставлениеДокумента) = Тип("ТабличныйДокумент") Тогда
		Результат.ТипДанных = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.ТабличныйДокумент;
	Иначе
		Результат.ТипДанных = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.PdfДокумент;
	КонецЕсли;

	Если Не ПараметрыВизуализации.ВыводитьШапкуСИдДокумента 
		И Результат.ТипДанных = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.ТабличныйДокумент Тогда
		УбратьИдентификаторИзШапкиТабличногоДокумента(ПредставлениеДанных.ПредставлениеДокумента,
			ОписаниеВида.ТипДокумента);
	КонецЕсли;
	
	Если ПараметрыПолученияПредставления.ВыводитьШтампыПодписей Тогда
		Если Результат.ТипДанных = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.ТабличныйДокумент Тогда
			ДополнитьТабличныйДокументШтампамиПодписей(ПредставлениеДанных.ПредставлениеДокумента, Сообщение);
		ИначеЕсли Результат.ТипДанных = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.HTMLДокумент Тогда
			ДополнитьСтрокуHTMLШтампамиПодписей(ПредставлениеДанных.ПредставлениеДокумента, Сообщение);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, ПредставлениеДанных, "ПредставлениеДокумента, Успех");
	ЗаполнитьЗначенияСвойств(Результат.НастройкиПредставления, НастройкиПредставления);
	ЗаполнитьДоступностьПользовательскихНастроекПредставленияДокумента(Результат.ПользовательскиеНастройкиПредставления,
		Результат.ТипДанных, ОписаниеВида.ТипДокумента);
	
	Если ПараметрыПолученияПредставления.ВыводитьШтампыПодписей
		И РегламентыЭДО.ЭтоЭлементРегламентаОтправителя(СвойстваСообщения.ТипЭлементаРегламента) Тогда
		
		ЗаполнитьЗначенияСвойств(КэшВизуализации, Результат);
		КэшВизуализации.ПросмотрДоступен = Результат.ПредставлениеДокумента <> Неопределено;
		КэшВизуализации.ДатаВыполнения = ТекущаяУниверсальнаяДата();
		КэшВизуализации.ТребуетсяОбновить = Ложь;
		ВизуализацияЭДО.СохранитьКэшВизуализацииДокумента(СвойстваСообщения.ЭлектронныйДокумент, КэшВизуализации, Ложь);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// @skip-check property-return-type, statement-type-change
// 
// Формирует представление данных сообщения в виде табличного документа.
// Если представление имеет другой тип, то возвращается неопределено.
// 
// Параметры:
// 	Сообщение - ДокументСсылка.СообщениеЭДО - Сообщение для которого формируется представление.
// 	СообщениеОтвета - ДокументСсылка.СообщениеЭДО - Информация получателя для сообщения, переданного первым параметром.
// 	ПараметрыПечати - См. НовыеПараметрыВизуализацииДокумента.
//	ВыводитьШтампыПодписей - Булево - Определяет необходимость вывода штампа с подписями.
//
// Возвращаемое значение:
//  ТабличныйДокумент, Неопределено - Представление.
//
Функция ПредставлениеСообщения(Сообщение, СообщениеОтвета = Неопределено, ПараметрыПечати = Неопределено,
	ВыводитьШтампыПодписей = Истина) Экспорт
	
	ПараметрыПолученияПредставления = НовыеПараметрыПолученияПредставленияДанныхСообщенияПоСсылке();

	ПараметрыПолученияПредставления.Сообщение = Сообщение;
	ПараметрыПолученияПредставления.СообщениеОтвета = СообщениеОтвета;
	ПараметрыПолученияПредставления.СообщениеЗапроса = Сообщение;
	Если ПараметрыПечати <> Неопределено Тогда
		ПараметрыПолученияПредставления.ПараметрыВизуализации = ПараметрыПечати;
	КонецЕсли;
	ПараметрыПолученияПредставления.ВыводитьШтампыПодписей = ВыводитьШтампыПодписей;
	
	РезультатФормирования = ПредставлениеДанныхСообщенияПоСсылке(
		ПараметрыПолученияПредставления);
	ТабличныйДокумент = РезультатФормирования.ПредставлениеДокумента; 
	
	Если Не ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
		ТабличныйДокумент = Неопределено;
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Возвращает предварительную визуализацию формализованного документа до записи
// 
//  Параметры:
//  ПараметрыПредварительнойВизуализации - см. НовыеПараметрыПредварительнойВизуализацииДокумента
// 
// Возвращаемое значение:
//  См. НовыйРезультатПредставленияДанныхСообщения
Функция ПредварительнаяВизуализацияДокумента(ПараметрыПредварительнойВизуализации) Экспорт

	Результат = НовыйРезультатПредставленияДанныхСообщения();
	
	ДанныеДокументаДляПроверкиРаспознавания = НовыеДанныеДокументаДляПроверкиРаспознавания();
	ПроверкаНовогоДокумента = НовыеДанныеНовогоДокументаДляПроверкиРаспознавания();
	ДанныеДокументаДляПроверкиРаспознавания.ПроверкаНовогоДокумента = ПроверкаНовогоДокумента;
	ЗаполнитьЗначенияСвойств(ПроверкаНовогоДокумента, ПараметрыПредварительнойВизуализации);
	ПроверкаНовогоДокумента.ТипЭлементаРегламента = 
		Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	РасширениеФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(
		ПараметрыПредварительнойВизуализации.ИмяФайла);
	ПроверкаНовогоДокумента.РасширениеФайла = РасширениеФайла;
	
	ДвоичныеДанныеФайла = ПараметрыПредварительнойВизуализации.ДвоичныеДанныеФайла;
	ТипДокумента = ПараметрыПредварительнойВизуализации.ТипДокумента;
	ВидДокумента = ПараметрыПредварительнойВизуализации.ВидДокумента;
	ПараметрыВизуализации = ПараметрыПредварительнойВизуализации.ПараметрыВизуализации;
	ДвоичныеДанныеФайлаОтвета = ПараметрыПредварительнойВизуализации.ДвоичныеДанныеФайлаОтвета;
		
	Результат.ИмяФайла = ПараметрыПредварительнойВизуализации.ИмяФайла;
	Результат.РазмерФайла = ДвоичныеДанныеФайла.Размер();
	
	Если Не ДокументРаспознан(ДанныеДокументаДляПроверкиРаспознавания) Тогда
		Результат.ТипДанных = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.PdfДокумент;
		Результат.ПредставлениеДокумента = ДвоичныеДанныеФайла;
		Возврат Результат;
	КонецЕсли;
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.Внутренний Тогда
		ПредставлениеДанных = ВнутренниеДокументыЭДО.ПредставлениеДанныхВнутреннегоДокумента(ДвоичныеДанныеФайла);
	Иначе
		ПредставлениеДанных = ПредставлениеДанныхСообщения(ВидДокумента, ДвоичныеДанныеФайла, ДвоичныеДанныеФайлаОтвета,
			ПараметрыВизуализации);
	КонецЕсли;
	
	Если ТипЗнч(ПредставлениеДанных.ПредставлениеДокумента) = Тип("Строка") Тогда
		Результат.ТипДанных = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.HTMLДокумент;
	ИначеЕсли ТипЗнч(ПредставлениеДанных.ПредставлениеДокумента) = Тип("ТабличныйДокумент") Тогда
		Результат.ТипДанных = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.ТабличныйДокумент;
	Иначе
		Результат.ТипДанных = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.PdfДокумент;
	КонецЕсли;

	Если Не ПараметрыВизуализации.ВыводитьШапкуСИдДокумента 
		И Результат.ТипДанных = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.ТабличныйДокумент Тогда
		УбратьИдентификаторИзШапкиТабличногоДокумента(ПредставлениеДанных.ПредставлениеДокумента, ТипДокумента);
	КонецЕсли;

	Если ЗначениеЗаполнено(ПредставлениеДанных) Тогда
		ЗаполнитьЗначенияСвойств(Результат, ПредставлениеДанных, "ПредставлениеДокумента, Успех");
	КонецЕсли;
	
	ЗаполнитьДоступностьПользовательскихНастроекПредставленияДокумента(Результат.ПользовательскиеНастройкиПредставления,
		Результат.ТипДанных, ТипДокумента);
	
	Возврат Результат;

КонецФункции

//  Готовит визуальное представление данных сообщения по виду документа ЭДО и файлу xml
//
//  Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  ДанныеФайла - ДвоичныеДанные
//  ДанныеФайлаОтвета - ДвоичныеДанные
//  ПараметрыВизуализации - См. ФорматыЭДО.НовыеПараметрыВизуализацииДокумента
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  см. НовыйРезультатПредставленияДанныхСообщения
Функция ПредставлениеДанныхСообщения(ВидДокумента, ДанныеФайла, ДанныеФайлаОтвета = Неопределено, 
		ПараметрыВизуализации = Неопределено, КонтекстДиагностики = Неопределено) Экспорт
	
	ОписаниеВида = ЭлектронныеДокументыЭДО.ОписаниеВидаДокумента(ВидДокумента);
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");	
	КонецЕсли;
	
	Если ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
		ПараметрыПредставления = ИнтеграцияЭДО.НовыеПараметрыПредставленияПроизвольногоДокумента();
		ПараметрыПредставления.ВыводитьДопДанные = ПараметрыВизуализации.ВыводитьДопДанные;
		ПараметрыПредставления.ВыводитьБанковскиеРеквизиты = ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты;
		ПараметрыПредставления.ПрикладнойТипДокумента = ОписаниеВида.ПрикладнойТипДокумента;
		Возврат ИнтеграцияЭДО.ПредставлениеФайлаПрикладногоЭлектронногоДокумента(ДанныеФайла, ПараметрыПредставления);
		
	ИначеЕсли МодульОбменСГИСЭПД <> Неопределено 
		И МодульОбменСГИСЭПД.ЭтоДокументЭПД(ОписаниеВида.ТипДокумента) Тогда
			ПредставлениеФайлаПрикладногоЭлектронногоДокумента = НовыйРезультатПредставленияДанныхСообщения();
		ЗаполнитьЗначенияСвойств(ПредставлениеФайлаПрикладногоЭлектронногоДокумента,
			МодульОбменСГИСЭПД.ПредставлениеФайлаПрикладногоЭлектронногоДокумента(ДанныеФайла));
		Возврат ПредставлениеФайлаПрикладногоЭлектронногоДокумента;
		
	ИначеЕсли ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорныйДокумент
		И Обработки.ФорматДоговорныйДокументИнформацияОтправителяЭДО.ЭтоДвоичныеДанныеФайлаФормата(ДанныеФайла) Тогда
			
			//@skip-check constructor-function-return-section
			Возврат Обработки.ФорматДоговорныйДокументИнформацияОтправителяЭДО.ПредставлениеДанныхДокумента(ДанныеФайла);
		
	ИначеЕсли ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность Тогда
		ПредставлениеФайлаМЧД = НовыйРезультатПредставленияДанныхСообщения();
		ЗаполнитьЗначенияСвойств(ПредставлениеФайлаМЧД,
			МашиночитаемыеДоверенности.ТабличныйДокументМЧД(ДанныеФайла, Истина));
		Возврат ПредставлениеФайлаМЧД;
			
	Иначе
		
		Возврат ВизуализацияЭлектронногоДокумента(ДанныеФайла, ДанныеФайлаОтвета, ПараметрыВизуализации,
			КонтекстДиагностики);
	КонецЕсли;
	
КонецФункции

// Возвращает строку во временном хранилище с двоичными данными штампа ЭП сообщения ЭДО.
// 
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
// 
// Возвращаемое значение:
//  Картинка
//
Функция ДанныеШтампаЭППоДаннымСообщенияЭДО(Сообщение) Экспорт
	
	ДанныеДляШтампа = ДанныеДляШтампаЭлектроннойПодписи(Сообщение);
	Штамп = КриптографияБЭД.ШтампЭлектроннойПодписиКартинкой(ДанныеДляШтампа);
	Возврат Штамп;
	
КонецФункции

// @skip-check property-return-type, invocation-parameter-type-intersect
// Определяет, можно ли использовать предварительный просмотр в pdf для сообщения ЭДО.
//
// Параметры:
//  СообщениеЭДО - ДокументСсылка.СообщениеЭДО
//  ПроверятьДоступностьВыводаПДФ_А3 - Булево - Проверять версию платформы для работы с просмотром файлов формата
//                                     PDF/A3. Требуется для того, чтобы не получать ошибку обновления динамического
//                                     списка. Следует передавать Истина, если проверка требуется.
// 
// Возвращаемое значение:
//  Булево - можно ли использовать предварительный просмотр в pdf.
//
Функция ИспользоватьПросмотрPDF(СообщениеЭДО, ПроверятьДоступностьВыводаПДФ_А3 = Ложь) Экспорт
	
	Если СообщениеЭДО = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Не используем просмотр, если отключена константа.
	Если Не НастройкиЭДО.ИспользуетсяПросмотрPDFДокументов() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Не используем просмотр для помеченных на удаление.
	РеквизитыОсновногоФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеЭДО,
		"ОсновнойФайл, ОсновнойФайл.Расширение, ЭлектронныйДокумент.ПометкаУдаления, ОсновнойФайл.ПодписанЭП");
	
	Если РеквизитыОсновногоФайла.ЭлектронныйДокументПометкаУдаления = Неопределено
		Или РеквизитыОсновногоФайла.ЭлектронныйДокументПометкаУдаления
		Или Не ЗначениеЗаполнено(РеквизитыОсновногоФайла.ОсновнойФайл) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(РеквизитыОсновногоФайла.ОсновнойФайлРасширение) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	// Не используем просмотр для PDF с вероятностью ошибки платформы.
	ЭтоPDF = РаботаСФайламиБЭДКлиентСервер.ЭтоРасширениеФайлаPDF(РеквизитыОсновногоФайла.ОсновнойФайлРасширение);
	Если ЭтоPDF И ПроверятьДоступностьВыводаПДФ_А3 И Не ДоступенВыводФайлаФорматаПДФ_А3() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Не используем просмотр для файлов кроме PDF, если подписи отсутствуют.
	Если Не ЭтоPDF И Не РеквизитыОсновногоФайла.ОсновнойФайлПодписанЭП Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Используем просмотр только для форматов, которые умеем визуализировать с помощью платформы или сервиса 1С:Штамп.
	РасширениеОсновногоФайлаПоддерживается = 
		Интеграция1СШтампКлиентСервер.РасширениеОсновногоФайлаПоддерживается(
			НРег(РеквизитыОсновногоФайла.ОсновнойФайлРасширение));
	Если ЭтоPDF ИЛИ (НастройкиЭДО.ИспользуетсяСервис1СШтамп() И РасширениеОсновногоФайлаПоддерживается) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает печатную форму электронного документа по двоичным данным файла.
// 
// Параметры:
// 		ДанныеЭлектронногоДокумента - ДвоичныеДанные - двоичные данные визуализируемого электронного документа.
// 		ДанныеЭлектронногоДокументаДляИзвлеченияПараметров - ДвоичныеДанные, Массив из ДвоичныеДанные - двоичные данные
// 		электронного документа (или их массив) из которого необходимо извлечь параметры для визуализируемого документа.
// 		ПараметрыВизуализации - Структура - параметры визуализации электронного документа
// 		КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 		 
// Возвращаемое значение:
//  см. НовыйРезультатПредставленияДанныхСообщения
Функция ВизуализацияЭлектронногоДокумента(ДанныеЭлектронногоДокумента,
											ДанныеЭлектронногоДокументаДляИзвлеченияПараметров = Неопределено, 
											ПараметрыВизуализации = Неопределено, 
											КонтекстДиагностики = Неопределено) Экспорт
	ПараметрыФайла = Новый Структура;
	ПараметрыФайлаИзXML = КонвертацияЭДО.ПараметрыФайлаПроизвольногоДокумента(ДанныеЭлектронногоДокумента,
		КонтекстДиагностики);
	
	Если ТипЗнч(ПараметрыФайлаИзXML) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФайла, ПараметрыФайлаИзXML, Истина);
	Иначе
		Возврат НовыйРезультатПредставленияДанныхСообщения();
	КонецЕсли;
	
	ДополнительныеПараметрыПредставления = Новый Структура;
	
	Если ЗначениеЗаполнено(ДанныеЭлектронногоДокументаДляИзвлеченияПараметров) Тогда
		Если ТипЗнч(ДанныеЭлектронногоДокументаДляИзвлеченияПараметров) = Тип("Массив") Тогда
			Для Каждого ТекущиеДанные Из ДанныеЭлектронногоДокументаДляИзвлеченияПараметров Цикл
				ПараметрыФайлаИзвлеченияПараметров = 
					КонвертацияЭДО.ПолучитьПараметрыЭлектронногоДокумента(ТекущиеДанные, КонтекстДиагностики);
				Если ТипЗнч(ПараметрыФайлаИзвлеченияПараметров) = Тип("Структура") Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДополнительныеПараметрыПредставления, 
						ПараметрыФайлаИзвлеченияПараметров, Ложь);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ПараметрыФайлаИзвлеченияПараметров = КонвертацияЭДО.ПолучитьПараметрыЭлектронногоДокумента(
				ДанныеЭлектронногоДокументаДляИзвлеченияПараметров, КонтекстДиагностики);
			Если ТипЗнч(ПараметрыФайлаИзвлеченияПараметров) = Тип("Структура") Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДополнительныеПараметрыПредставления, 
					ПараметрыФайлаИзвлеченияПараметров);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВизуализации <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДополнительныеПараметрыПредставления, ПараметрыВизуализации);
	КонецЕсли;
	
	Если ПараметрыФайла.Свойство("ПараметрыПредставления") Тогда
		//@skip-check invocation-parameter-type-intersect, property-return-type
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФайла.ПараметрыПредставления,
			ДополнительныеПараметрыПредставления);
	Иначе
		ПараметрыФайла.Вставить("ПараметрыПредставления", ДополнительныеПараметрыПредставления);
	КонецЕсли;
		
	Возврат ПредставлениеПроизвольногоДокумента(ДанныеЭлектронногоДокумента, ПараметрыФайла, КонтекстДиагностики);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КэшВизуализации

// Сохранить данные в файл кэша.
// 
// Параметры:
//  ДокументЭДО - ОпределяемыйТип.ВладелецФайлаВизуализацииЭДО
//  СвойстваВизуализации - см. ВизуализацияЭДО.НовыеСвойстваВизуализации
Процедура СохранитьДанныеВФайлКэша(ДокументЭДО, СвойстваВизуализации) Экспорт
	РасширениеБезТочки = "pdf";
	Если ТипЗнч(СвойстваВизуализации.ПредставлениеДокумента) = Тип("ДвоичныеДанные") Тогда
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(СвойстваВизуализации.ПредставлениеДокумента);
	ИначеЕсли ТипЗнч(СвойстваВизуализации.ПредставлениеДокумента) = Тип("ТабличныйДокумент") Тогда
		ПотокВПамяти = Новый ПотокВПамяти();
		СвойстваВизуализации.ПредставлениеДокумента.Записать(ПотокВПамяти);
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные());
		РасширениеБезТочки = "mxl";
	ИначеЕсли ТипЗнч(СвойстваВизуализации.ПредставлениеДокумента) = Тип("Строка") Тогда
		Если СвойстваВизуализации.ТипДанных = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.HTMLДокумент Тогда
			ПотокВПамяти = Новый ПотокВПамяти();
			ТекстовыйДокумент = Новый ТекстовыйДокумент();
			ТекстовыйДокумент.УстановитьТекст(СвойстваВизуализации.ПредставлениеДокумента);
			ТекстовыйДокумент.Записать(ПотокВПамяти, КодировкаТекста.UTF8);
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(
				ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные());
			РасширениеБезТочки = "html";
		Иначе
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(
				Base64Значение(СвойстваВизуализации.ПредставлениеДокумента));
		КонецЕсли;
	ИначеЕсли  СвойстваВизуализации.ПредставлениеДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(СвойстваВизуализации.ФайлВизуализации) Тогда
		ПараметрыОбновленияФайла = Новый Структура;
		ПараметрыОбновленияФайла.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
		ПараметрыОбновленияФайла.Вставить("АдресВременногоХранилищаТекста", "");
		РаботаСФайлами.ОбновитьФайл(СвойстваВизуализации.ФайлВизуализации, ПараметрыОбновленияФайла);
	Иначе
		ПараметрыДобавленияФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
		ПараметрыДобавленияФайла.ВладелецФайлов = ДокументЭДО;
		ПараметрыДобавленияФайла.ИмяБезРасширения = СвойстваВизуализации.ИмяФайла;
		ПараметрыДобавленияФайла.РасширениеБезТочки = РасширениеБезТочки;
		СвойстваВизуализации.ФайлВизуализации = РаботаСФайлами.ДобавитьФайл(ПараметрыДобавленияФайла,
			АдресФайлаВоВременномХранилище);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Удалить регистрацию документа ЭДО из РС.ОчередьЗапросовВизуализацииЭДО.
// 
// Параметры:
//  ДокументЭДО - ОпределяемыйТип.ВладелецФайлаВизуализацииЭДО - Документ ЭДО
Процедура УдалитьРегистрациюДокументаЭДОИзОчереди(ДокументЭДО)
	МенеджерЗаписиОчереди = РегистрыСведений.ОчередьЗапросовВизуализацииЭДО.СоздатьМенеджерЗаписи();
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОчередьЗапросовВизуализацииЭДО");
		ЭлементБлокировки.УстановитьЗначение("ВладелецФайла", ДокументЭДО);
		БлокировкаДанных.Заблокировать();
		МенеджерЗаписиОчереди.ВладелецФайла = ДокументЭДО;
		МенеджерЗаписиОчереди.Прочитать();
		МенеджерЗаписиОчереди.Удалить();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
КонецПроцедуры

//@skip-check doc-comment-ref-link
// Возвращает печатную форму электронного документа по двоичным данным файла.
// 
// Параметры:
//  ДокументЭДО - ОпределяемыйТип.ВладелецФайлаВизуализацииЭДО
//  
// Возвращаемое значение:
//  Структура:
//  * ФайлВизуализации - см. РегистрыСведений.КэшВизуализацииДокументовЭДО.ФайлВизуализации
//  * ХешШтампа - см. РегистрыСведений.КэшВизуализацииДокументовЭДО.ХешШтампа
Функция ДанныеКэшаВизуализацииПоДокументуЭДО(ДокументЭДО)
	
	МенеджерЗаписиКэшаВизуализации = РегистрыСведений.КэшВизуализацииДокументовЭДО.СоздатьМенеджерЗаписи();
	МенеджерЗаписиКэшаВизуализации.ВладелецФайла = ДокументЭДО;
	МенеджерЗаписиКэшаВизуализации.Прочитать();
	
	Структура = Новый Структура;
	Структура.Вставить("ФайлВизуализации", МенеджерЗаписиКэшаВизуализации.ФайлВизуализации);
	Структура.Вставить("ХешШтампа", МенеджерЗаписиКэшаВизуализации.ХешШтампа);
	
	Возврат Структура;
	
КонецФункции

// Кэшировать визуализацию по электронному документу ЭДО.
// 
// Параметры:
//  ПараметрыВыполнения - Структура - Параметры выполнения:
// * ДокументЭДО - ОпределяемыйТип.ВладелецФайлаВизуализацииЭДО
// * СообщениеОтправителя - ДокументСсылка.СообщениеЭДО
// * ОсновнойФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// * РасширениеОсновногоФайла - Строка
// * РазмерОсновногоФайла - Число
// * ИмяФайла - Строка
Процедура ОбновитьВизуализациюДокументаЭДОИзОчереди(ПараметрыВыполнения)
	
	КартинкаШтампа = ЭлектронныеДокументыЭДО.ДанныеШтампаЭППоДаннымСообщенияЭДО(ПараметрыВыполнения.СообщениеОтправителя);
	ДанныеТекущегоКэшаВизуализации = ДанныеКэшаВизуализацииПоДокументуЭДО(ПараметрыВыполнения.ДокументЭДО);
	
	НовыйХешШтампа = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(КартинкаШтампа);
	
	Если Не КартинкаШтампа.Вид = ВидКартинки.Пустая
		И НовыйХешШтампа = ДанныеТекущегоКэшаВизуализации.ХешШтампа Тогда
		УдалитьРегистрациюДокументаЭДОИзОчереди(ПараметрыВыполнения.ДокументЭДО);
		Возврат;
	КонецЕсли;
	
	ЭтоPdf = РаботаСФайламиБЭДКлиентСервер.ЭтоРасширениеФайлаPDF(ПараметрыВыполнения.РасширениеОсновногоФайла);
	ДвоичныеДанныеФайла = Неопределено;
	ТекстОшибки = "";
	
	Если ЭтоPdf И КартинкаШтампа.Вид = ВидКартинки.Пустая
		И Не ЗначениеЗаполнено(ДанныеТекущегоКэшаВизуализации.ФайлВизуализации)Тогда
		
		ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ПараметрыВыполнения.ОсновнойФайл, Ложь);
		
	ИначеЕсли ФайлПодходитДляОбработкиЧерезСервис1СШтамп(
		ПараметрыВыполнения.РасширениеОсновногоФайла, ПараметрыВыполнения.РазмерОсновногоФайла) Тогда
		
		ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ПараметрыВыполнения.ОсновнойФайл, Ложь);
		Если ДвоичныеДанныеФайла <> Неопределено Тогда
			
			РезультатШтампования = ВизуализацияДокументаЭДОСПомощьюСервиса1СШтамп(
				ДвоичныеДанныеФайла, ПараметрыВыполнения.РасширениеОсновногоФайла, КартинкаШтампа);
			
			Если Не РезультатШтампования.ЕстьОшибки Тогда
				ДвоичныеДанныеФайла = РезультатШтампования.ДвоичныеДанные;
			Иначе
				ТекстОшибки = РезультатШтампования.ИнформацияОбОшибках.ТекстОшибки;
				ПодсистемаРегистрацииОшибок = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
				Шаблон = НСтр("ru = '%1Не удалось подготовить данные с помощью сервиса 1С:Штамп по причине:
									 |%2'");
				ТекстДополнительнойИнформации = "";
				Если ЭтоPdf Тогда
					ТекстДополнительнойИнформации =
						НСтр("ru = 'Представление документа сформировано платформой 1С:Предприятие.'");
				КонецЕсли;
				ТекстСообщения = СтрШаблон(Шаблон, ТекстДополнительнойИнформации, ТекстОшибки);
				ПараметрыЗаписиВЖурналРегистрации = ОбщегоНазначенияБЭД.НовыеПараметрыЗаписиВЖурналРегистрации();
				ПараметрыЗаписиВЖурналРегистрации.Данные = "ЭлектронныеДокументыЭДО.ПредставлениеДанныхДокумента";
	
				ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, ПодсистемаРегистрацииОшибок,
					УровеньЖурналаРегистрации.Ошибка, ПараметрыЗаписиВЖурналРегистрации);
				
				// Если не смогли подготовить файл через сервис, то делаем это платформой
				Если ЭтоPdf Тогда
					ДвоичныеДанныеФайла = РаботаСФайламиБЭД.ДобавитьШтампЭПВФайлPDF(ДвоичныеДанныеФайла, КартинкаШтампа,
						Новый УникальныйИдентификатор(), Ложь);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстОшибки = НСтр("ru = 'Не удалось подготовить представление документа. Двоичные данные файла отсутствуют.'");
		КонецЕсли;
		
	Иначе
		УдалитьРегистрациюДокументаЭДОИзОчереди(ПараметрыВыполнения.ДокументЭДО);
		Возврат;
	КонецЕсли;

	СвойстваВизуализации = ПолучитьВизуализациюИзКэша(ПараметрыВыполнения.ДокументЭДО, 
		ВизуализацияЭДО.НовыеНастройкиПредставления());
	СвойстваВизуализации.ПредставлениеДокумента = ДвоичныеДанныеФайла;
	СвойстваВизуализации.ПросмотрДоступен = ТипЗнч(ДвоичныеДанныеФайла) = Тип("ДвоичныеДанные");
	СвойстваВизуализации.ТекстОшибки = ТекстОшибки;
	СвойстваВизуализации.ТипДанных = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.PdfДокумент;
	СвойстваВизуализации.ИмяФайла = ПараметрыВыполнения.ИмяФайла;
	СвойстваВизуализации.РазмерФайла = ПараметрыВыполнения.РазмерОсновногоФайла;
	СвойстваВизуализации.РасширениеФайла = ПараметрыВыполнения.РасширениеОсновногоФайла;
	СвойстваВизуализации.ХешШтампа = НовыйХешШтампа;
	ВизуализацияЭДО.СохранитьКэшВизуализацииДокумента(ПараметрыВыполнения.ДокументЭДО, СвойстваВизуализации, Истина);
	
КонецПроцедуры

// Параметры:
//  ДвоичныеДанныеФайла - ДвоичныеДанные
//  РасширениеФайла - Строка 
//  КартинкаШтампа - Картинка - Картинка штампа
// 
// Возвращаемое значение:
//  см. Интеграция1СШтамп.РезультатДобавленияШтамповВДокумент
Функция ВизуализацияДокументаЭДОСПомощьюСервиса1СШтамп(ДвоичныеДанныеФайла, РасширениеФайла, КартинкаШтампа)
	
	ПараметрыДобавленияШтампов = Интеграция1СШтампКлиентСервер.НовыеПараметрыДобавленияШтамповВДокумент();
	
	ПараметрыДобавленияШтампов.ПараметрыДокумента.ДвоичныеДанные = ДвоичныеДанныеФайла;
	ПараметрыДобавленияШтампов.ПараметрыДокумента.Расширение = РасширениеФайла;
	
	ПараметрыШтампа = Интеграция1СШтампКлиентСервер.НовыеПараметрыШтампа();
	Если КартинкаШтампа.Вид = ВидКартинки.Пустая Тогда
		ПараметрыШтампа.ПараметрыШтампа.ДвоичныеДанные = БиблиотекаКартинок.Пустая.ПолучитьДвоичныеДанные();
	Иначе
		ПараметрыШтампа.ПараметрыШтампа.ДвоичныеДанные = КартинкаШтампа.ПолучитьДвоичныеДанные();
	КонецЕсли;
	ПараметрыШтампа.ПараметрыШтампа.Расширение = "png";
	ПравилоРасположения = Интеграция1СШтампКлиентСервер.ПравилоРасположенияНаПоследнейСтранице();
	ПараметрыШтампа.ПравилаРасположения.ПравилоРасположения = ПравилоРасположения;
	ПараметрыШтампа.КоэффициентИзмененияРазмера = 0.12;
	ПараметрыШтампа.ОтступОтГраниц = 30;
	
	ПараметрыДобавленияШтампов.ПараметрыШтампов.Добавить(ПараметрыШтампа);
	
	РезультатШтампования = Интеграция1СШтамп.РезультатДобавленияШтамповВДокумент(ПараметрыДобавленияШтампов,
		"БЭД.ВизуализацияПроштампованногоЭлектронногоДокумента");
	
	Возврат РезультатШтампования;
	
КонецФункции

// Параметры:
//  ДокументЭДО - ОпределяемыйТип.ВладелецФайлаВизуализацииЭДО
//  ОсновнойФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
Процедура ОбновитьВизуализациюФайлаPDFСПомощьюПлатформы(ДокументЭДО, ОсновнойФайл)
	
	СообщениеОтправителя = ЭлектронныеДокументыЭДО.СообщениеОтправителя(ДокументЭДО);
	КартинкаШтампа = ЭлектронныеДокументыЭДО.ДанныеШтампаЭППоДаннымСообщенияЭДО(СообщениеОтправителя);
	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ОсновнойФайл, Ложь);
	
	Если Не КартинкаШтампа.Вид = ВидКартинки.Пустая Тогда
		ДвоичныеДанныеФайла = РаботаСФайламиБЭД.ДобавитьШтампЭПВФайлPDF(ДвоичныеДанныеФайла, КартинкаШтампа,
			Новый УникальныйИдентификатор(), Ложь);
	КонецЕсли;
	
	СвойстваОсновногоФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОсновнойФайл,
		"ПолноеИмяФайла, Расширение, Размер");
	
	СвойстваВизуализации = ПолучитьВизуализациюИзКэша(ДокументЭДО,
		ВизуализацияЭДО.НовыеНастройкиПредставления());
	СвойстваВизуализации.ПредставлениеДокумента = ДвоичныеДанныеФайла;
	СвойстваВизуализации.ПросмотрДоступен = ТипЗнч(ДвоичныеДанныеФайла) = Тип("ДвоичныеДанные");
	СвойстваВизуализации.ТекстОшибки = "";
	СвойстваВизуализации.ТипДанных = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.PdfДокумент;
	СвойстваВизуализации.ИмяФайла = СвойстваОсновногоФайла.ПолноеИмяФайла;
	СвойстваВизуализации.РазмерФайла = СвойстваОсновногоФайла.Размер;
	СвойстваВизуализации.РасширениеФайла = СвойстваОсновногоФайла.Расширение;
	ВизуализацияЭДО.СохранитьКэшВизуализацииДокумента(ДокументЭДО, СвойстваВизуализации, Истина);
	
КонецПроцедуры

// Параметры:
//  РасширениеФайла - Строка
//  РазмерФайла - Число
//  
// Возвращаемое значение:
//  Булево - Истина, если требуется кэширование в фоне
Функция РегистрироватьДокументЭДОДляКэшированияВФоне(РасширениеФайла, РазмерФайла)
	
	Возврат ФайлПодходитДляОбработкиЧерезСервис1СШтамп(РасширениеФайла, РазмерФайла);
	
КонецФункции

// Параметры:
//  РасширениеФайла - Строка
//  РазмерФайла - Число
//  
// Возвращаемое значение:
//  Булево - Истина, если требуется кэширование в фоне с помощью сервиса 1С:Штамп
Функция ФайлПодходитДляОбработкиЧерезСервис1СШтамп(РасширениеФайла, РазмерФайла)
	
	Если Не НастройкиЭДО.ИспользуетсяСервис1СШтамп() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДопустимыйРазмерФайла = Интеграция1СШтампСлужебныйКлиентСервер.ДопустимыйРазмерИсходящегоТелаЗапроса();
	Если Интеграция1СШтампКлиентСервер.РасширениеОсновногоФайлаПоддерживается(РасширениеФайла)
		И РазмерФайла < ДопустимыйРазмерФайла Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Визуализация

// @skip-check statement-type-change 
// @skip-check invocation-parameter-type-intersect
// При распознавании документа.
// 
// Параметры:
//  ДанныеДокумента - См. НовыеДанныеДокументаДляПроверкиРаспознавания
//  
// Возвращаемое значение:
//  Структура:
//  * ФормированиеПоОбъектуУчета - Булево
//  * РаспознаниеВыполнено - Булево
//  * Распознан - Булево
Функция ПриРаспознаванииДокумента(ДанныеДокумента)
	
	РезультатРаспознавания = Новый Структура("ФормированиеПоОбъектуУчета, РаспознаниеВыполнено, Распознан",
		Ложь, Ложь, Ложь);
	Если ЗначениеЗаполнено(ДанныеДокумента.ПроверкаЗаписанногоДокумента)
		И ДанныеДокумента.ПроверкаЗаписанногоДокумента.ПометкаУдаления Тогда
		РезультатРаспознавания.РаспознаниеВыполнено = Истина;
		РезультатРаспознавания.Распознан = Ложь;
		Возврат РезультатРаспознавания;
	ИначеЕсли ЗначениеЗаполнено(ДанныеДокумента.ПроверкаЗаписанногоДокумента) 
		И ЗначениеЗаполнено(ДанныеДокумента.ПроверкаЗаписанногоДокумента.Ссылка) Тогда
		ВидДокумента = ДанныеДокумента.ПроверкаЗаписанногоДокумента.ВидДокумента;
	ИначеЕсли ЗначениеЗаполнено(ДанныеДокумента.ПроверкаНовогоДокумента) Тогда
		ВидДокумента = ДанныеДокумента.ПроверкаНовогоДокумента.ВидДокумента;
	Иначе
		Возврат РезультатРаспознавания;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИСПолучениеВходящих");
		МодульПодсистемы.ПриРаспознанииДокумента(ВидДокумента, РезультатРаспознавания);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульПодсистемы.ПриРаспознанииДокумента(ВидДокумента, РезультатРаспознавания);
	КонецЕсли;
	Возврат РезультатРаспознавания;
КонецФункции

// Параметры:
//  ДанныеЗаписанногоДокумента - См. НовыеДанныеЗаписанногоДокументаДляПроверкиРаспознавания
// 
// Возвращаемое значение:
//  Булево
Функция ЗаписанныйДокументРаспознан(ДанныеЗаписанногоДокумента)

	Если ЭлектронныеДокументыЭДО.ЭтоВнутреннийВидДокумента(ДанныеЗаписанногоДокумента.ВидДокумента) 
		Или ЭлектронныеДокументыЭДО.ЭтоПрикладнойВидДокумента(ДанныеЗаписанногоДокумента.ВидДокумента) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаписанногоДокумента.ТипЭлементаРегламента =
		Перечисления.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки Тогда
		Возврат Истина;
	КонецЕсли;
	
	СообщениеОтправителя = ЭлектронныеДокументыЭДО.СообщениеОтправителя(ДанныеЗаписанногоДокумента.Ссылка);
	
	Если Не ЗначениеЗаполнено(СообщениеОтправителя) Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаписанногоДокумента.Ссылка,
			"ЭтоОблачныйЭДО, ФорматОсновногоТитула");
		Если РеквизитыДокумента.ЭтоОблачныйЭДО И ЗначениеЗаполнено(РеквизитыДокумента.ФорматОсновногоТитула) Тогда
		Возврат Истина;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	РезультатРаспознаванияПоСообщению = ЭлектронныеДокументыЭДО.РаспознатьСообщение(СообщениеОтправителя);
	
	Возврат ЗначениеЗаполнено(РезультатРаспознаванияПоСообщению);
	
КонецФункции

// Параметры:
//  ДанныеНовогоДокумента - См. НовыеДанныеНовогоДокументаДляПроверкиРаспознавания
// 
// Возвращаемое значение:
//  Булево
Функция НовыйДокументРаспознан(ДанныеНовогоДокумента)
	
	Если ЭлектронныеДокументыЭДО.ЭтоВнутреннийВидДокумента(ДанныеНовогоДокумента.ВидДокумента) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеНовогоДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорныйДокумент
		И Обработки.ФорматДоговорныйДокументИнформацияОтправителяЭДО.ЭтоФайлФормата(
		ДанныеНовогоДокумента.ИмяФайла) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не РаботаСФайламиБЭДКлиентСервер.ЭтоXML(ДанныеНовогоДокумента.РасширениеФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФормированиеФормализованныхДокументовИзФайловРазрешено = 
		Не ПолучитьФункциональнуюОпцию("ЗапретитьФормированиеФормализованныхЭДИзФайлов");
	
	Если ЗначениеЗаполнено(ДанныеНовогоДокумента.ФорматОсновногоТитула) Тогда
	
		Возврат Истина;
	
	ИначеЕсли ФормированиеФормализованныхДокументовИзФайловРазрешено Тогда
	
		ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
		ОписаниеФайла.ИмяФайла = ДанныеНовогоДокумента.ИмяФайла;
		ОписаниеФайла.ДвоичныеДанные = ДанныеНовогоДокумента.ДвоичныеДанныеФайла;
		РезультатРаспознаванияПоСодержаниюФайла = 
			ЭлектронныеДокументыЭДО.ДанныеДокументаДляЗагрузкиПоДаннымФайлаXML(ОписаниеФайла);
		Возврат РезультатРаспознаванияПоСодержаниюФайла.Успех;
			
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// 
// Возвращаемое значение:
//  См. НовыйРезультатПредставленияДанныхСообщения
Функция ПредставлениеДанныхСообщенияПоФайлу(ЭлектронныйДокумент)
	
	Результат = НовыйРезультатПредставленияДанныхСообщения();
	Результат.ТипДанных = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.PdfДокумент;
	
	ОсновнойФайл = ЭлектронныеДокументыЭДО.ОсновнойФайлИнформацииОтправителя(ЭлектронныйДокумент);
	
	Если Не ЗначениеЗаполнено(ОсновнойФайл) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыДанныхФайла.ВызыватьИсключение = Ложь;
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ОсновнойФайл, ПараметрыДанныхФайла);
	
	Если ДанныеФайла = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	Если ДвоичныеДанныеФайла = Неопределено И Не ДанныеФайла.ПометкаУдаления Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Успех = Истина;
	Результат.ПредставлениеДокумента = ДвоичныеДанныеФайла;
	Результат.ИмяФайла = ДанныеФайла.ИмяФайла;
	Результат.РазмерФайла = ДанныеФайла.Размер;
	Результат.РасширениеФайла = ДанныеФайла.Расширение;
	Возврат Результат;
	
КонецФункции

// @skip-check typed-value-adding-to-untyped-collection
// 
// Возвращает признак необходимости формирования визуализации по ответному титулу.
// 
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ДляТипаДокументаВизуализацияСтроитсяПоОтветномуТитулу(ТипДокумента) 
	
	ТипыДокументов = Новый Массив;
	
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов);
	
	Возврат ТипыДокументов.Найти(ТипДокумента) <> Неопределено;
	
КонецФункции

// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
// 
// Возвращаемое значение:
//  ТабличныйДокумент, Неопределено - данные сформированного штампа.
//
Функция ШтампЭлектроннойПодписиДляВизуализацииЭД(Сообщение)
	
	Если Не ЗначениеЗаполнено(Сообщение) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ДанныеДляШтампа = ДанныеДляШтампаЭлектроннойПодписи(Сообщение);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		СпособОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ЭлектронныйДокумент.СпособОбмена");
		Если МодульЭлектронноеАктированиеЕИС.ЭтоОбменЧерезСерверЕИС(СпособОбмена) Тогда
			МодульЭлектронноеАктированиеЕИС.ПриФормированииШтампаЭлектроннойПодписи(ДанныеДляШтампа);
		КонецЕсли;
	КонецЕсли;
	
	Штамп = КриптографияБЭД.ШтампЭлектроннойПодписи(ДанныеДляШтампа);
	Если Штамп.ВысотаТаблицы = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Штамп;
	
КонецФункции

// Дополняет строку HTML штампом подписи
// Параметры:
//  СтрокаHTML - Строка
//  Сообщение - ДокументСсылка.СообщениеЭДО
Процедура ДополнитьСтрокуHTMLШтампамиПодписей(СтрокаHTML, Сообщение)
	
	Штамп = ШтампЭлектроннойПодписиДляВизуализацииЭД(Сообщение);
	
	Если Штамп = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияБЭД.ВывестиТабличныйДокументВДокументHTML(СтрокаHTML, Штамп);
	
КонецПроцедуры

// @skip-check invocation-parameter-type-intersect, property-return-type, typed-value-adding-to-untyped-collection
// Возвращает заполненные данные  штампа электронной подписи.
// 
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
// 
// Возвращаемое значение:
//  Структура: см. КриптографияБЭД.НовыеДанныеДляФормированияШтампа
//
Функция ДанныеДляШтампаЭлектроннойПодписи(Сообщение)
	
	ДанныеДляФормированияШтампа = КриптографияБЭД.НовыеДанныеДляФормированияШтампа();
	
	СвойстваСообщения = ЭлектронныеДокументыЭДО.СвойстваСообщения(Сообщение);
	ЭлектронныйДокумент = СвойстваСообщения.ЭлектронныйДокумент;
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "Организация");
	Если СвойстваСообщения.ТипЭлементаРегламента =
		Перечисления.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки Тогда
		
		Файл = Новый Файл(СвойстваСообщения.ПолноеИмяФайла);
		ИдентификаторДокумента = Файл.ИмяБезРасширения;
		
	Иначе
		Сведения = ЭлектронныеДокументыЭДО.СведенияСообщенияУчастникаЭДО(ЭлектронныйДокумент);
		ИдентификаторДокумента = Сведения.Сообщения.ДанныеОтправителя.ИмяФайлаБезРасширения;
	КонецЕсли;
	СтатусСообщенияЭДО = СвойстваСообщения.Статус;
		
	ДанныеДляФормированияШтампа.ИдентификаторДокумента = ИдентификаторДокумента;
	ДанныеДляФормированияШтампа.ЭтоИнформацияОтправителя = 
		СвойстваСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	ДанныеДляФормированияШтампа.Организация = Организация;
	ЭтоИсходящийДокумент = ТипЗнч(ЭлектронныйДокумент)
		 = Тип("ДокументСсылка.ЭлектронныйДокументИсходящийЭДО");
	ДанныеДляФормированияШтампа.ЭтоИсходящийДокумент = ЭтоИсходящийДокумент;
	
	ОсновноеСостояние = КриптографияБЭД.ОсновныеСостоянияДокументов().Подписан;
	Если СтатусСообщенияЭДО = Перечисления.СтатусыСообщенийЭДО.Подписан
		Или СтатусСообщенияЭДО = Перечисления.СтатусыСообщенийЭДО.ПодготовленКОтправке
		Или СтатусСообщенияЭДО = Перечисления.СтатусыСообщенийЭДО.ЧастичноПодписан Тогда
		ОсновноеСостояние = КриптографияБЭД.ОсновныеСостоянияДокументов().Подписан;
	ИначеЕсли СтатусСообщенияЭДО = Перечисления.СтатусыСообщенийЭДО.Отправлен
		Или СтатусСообщенияЭДО = Перечисления.СтатусыСообщенийЭДО.Подтвержден Тогда 
		ОсновноеСостояние = КриптографияБЭД.ОсновныеСостоянияДокументов().Отправлен;
	ИначеЕсли СтатусСообщенияЭДО = Перечисления.СтатусыСообщенийЭДО.Получен Тогда 
		ОсновноеСостояние = КриптографияБЭД.ОсновныеСостоянияДокументов().Получен;
	КонецЕсли;
	
	ДанныеДляФормированияШтампа.ОсновноеСостояние = ОсновноеСостояние;
	
	СостояниеДокумента = ЭлектронныеДокументыЭДО.СостояниеДокумента(ЭлектронныйДокумент);
	Если СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно Тогда
		ПараметрыДокументаДляОпределенияСостояния = РегламентыЭДО.НовыеПараметрыДокументаДляОпределенияСостояния();
		ЗаполнитьЗначенияСвойств(ПараметрыДокументаДляОпределенияСостояния, ЭлектронныйДокумент);

		ПараметрыДокументаДляОпределенияСостояния.Остановлен = Ложь;
		ПараметрыДокументаДляОпределенияСостояния.ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ПустаяСсылка();
		Запрос = Новый Запрос;
		Запрос.Текст = ЭлектронныеДокументыЭДОСлужебный.ТекстЗапросаСостоянияСообщений();
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		СостоянияСообщений = РегламентыЭДО.НовыеСостоянияЭлементовРегламента();
		Выборка = Запрос.Выполнить().Выбрать();
		ИспользоватьУтверждение = НастройкиЭДО.ОтправлятьВходящиеДокументыНаУтверждение();
		Пока Выборка.Следующий() Цикл
			СостояниеСообщения = СостоянияСообщений.Добавить();
			ЗаполнитьЗначенияСвойств(СостояниеСообщения, Выборка);
			ПараметрыСостоянияСообщения = РегламентыЭДО.НовыеПараметрыСообщенияДляОпределенияСостояния();
			ЗаполнитьЗначенияСвойств(ПараметрыСостоянияСообщения, Выборка);
			СостояниеСообщения.Состояние = РегламентыЭДО.СостояниеСообщения(
				ПараметрыСостоянияСообщения, ПараметрыДокументаДляОпределенияСостояния, ИспользоватьУтверждение);
		КонецЦикла;
		СостояниеДокумента = РегламентыЭДО.СостояниеДокумента(ПараметрыДокументаДляОпределенияСостояния, 
			СостоянияСообщений, Не ЭтоИсходящийДокумент);
	КонецЕсли;
	
	ДополнительноеСостояние = Неопределено;
	Если СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования
		Или СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования Тогда
		ДополнительноеСостояние = КриптографияБЭД.ДополнительныеСостоянияДокументов().ВПроцессеАннулирования;
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.Аннулирован Тогда
		ДополнительноеСостояние = КриптографияБЭД.ДополнительныеСостоянияДокументов().Аннулирован;
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление
		Или СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение Тогда
		ДополнительноеСостояние = КриптографияБЭД.ДополнительныеСостоянияДокументов().Отклонен;
	КонецЕсли;
	
	ДанныеДляФормированияШтампа.ДополнительноеСостояние = ДополнительноеСостояние;
	
	Если ДанныеДляФормированияШтампа.ЭтоИнформацияОтправителя Тогда
		
		ЭлектронныеПодписиОтправителя = Новый Массив;
		ЭлектронныеПодписиПолучателя = Новый Массив;
		ДанныеЭлементовСхемыРегламента = ЭлектронныеДокументыЭДО.ДанныеЭлементовСхемыРегламента(ЭлектронныйДокумент);
		
		ДанныеОтправителя = ДанныеЭлементовСхемыРегламента.Найти(
			Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя, "ТипЭлементаРегламента");
		
		ДанныеПолучателя = ДанныеЭлементовСхемыРегламента.Найти(
			Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя, "ТипЭлементаРегламента");
		
		Если ЗначениеЗаполнено(ДанныеОтправителя) И ЗначениеЗаполнено(ДанныеПолучателя) Тогда
			
			ЭлектронныеПодписиОтправителя =
				ЭлектронныеДокументыЭДО.УстановленныеПодписиСУчетомДоверенностей(ДанныеОтправителя.Сообщение);
			
			ЭлектронныеПодписиПолучателя =
				ЭлектронныеДокументыЭДО.УстановленныеПодписиСУчетомДоверенностей(ДанныеПолучателя.Сообщение);
			
		Иначе
			
			СведенияОПодписанномОбъекте = 
				ЭлектронныеДокументыЭДО.СведенияОПодписанномОбъекте(СвойстваСообщения.ОсновнойФайл);
				
			Подписи = Новый Массив;
			
			Если ЗначениеЗаполнено(ДанныеОтправителя) Тогда
				ПодписиОтправителя = 
					ЭлектронныеДокументыЭДО.УстановленныеПодписиСУчетомДоверенностей(ДанныеОтправителя.Сообщение);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подписи, ПодписиОтправителя);
			КонецЕсли;
				
			Если ЗначениеЗаполнено(ДанныеПолучателя) Тогда
				ПодписиПолучателя = 
					ЭлектронныеДокументыЭДО.УстановленныеПодписиСУчетомДоверенностей(ДанныеПолучателя.Сообщение); 
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подписи, ПодписиПолучателя);
			КонецЕсли;
				
			ВсегоПодписей = Подписи.Количество();
			
			Для Каждого Подпись Из Подписи Цикл 
				
				ДоверительИНаправлениеПодписи = ЭлектронныеДокументыЭДО.ДоверительИНаправлениеПодписи(
					СведенияОПодписанномОбъекте, Подпись.СвойстваПодписи, ВсегоПодписей);
					
				Если (ДанныеДляФормированияШтампа.ЭтоИсходящийДокумент
					И ДоверительИНаправлениеПодписи.ЭтоВходящаяПодпись)
					Или (Не ДанныеДляФормированияШтампа.ЭтоИсходящийДокумент 
					И Не ДоверительИНаправлениеПодписи.ЭтоВходящаяПодпись) Тогда
					ЭлектронныеПодписиПолучателя.Добавить(Подпись);
				ИначеЕсли (ДанныеДляФормированияШтампа.ЭтоИсходящийДокумент 
					И Не ДоверительИНаправлениеПодписи.ЭтоВходящаяПодпись)
					Или (Не ДанныеДляФормированияШтампа.ЭтоИсходящийДокумент
					И ДоверительИНаправлениеПодписи.ЭтоВходящаяПодпись) Тогда
					ЭлектронныеПодписиОтправителя.Добавить(Подпись);
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;
	
		ДанныеДляФормированияШтампа.ПодписиОтправителя = ЭлектронныеПодписиОтправителя;
		ДанныеДляФормированияШтампа.ПодписиПолучателя = ЭлектронныеПодписиПолучателя;
		
	Иначе
		
		ЭлектронныеПодписи = ЭлектронныеДокументыЭДО.УстановленныеПодписиСУчетомДоверенностей(Сообщение);
		ДанныеДляФормированияШтампа.ПодписиОтправителя = ЭлектронныеПодписи;
		
	КонецЕсли;
	
	ДанныеДляФормированияШтампа.ЕстьОтветнаяПодпись = ЗначениеЗаполнено(ДанныеДляФормированияШтампа.ПодписиОтправителя)
		Или (СвойстваСообщения.Направление = Перечисления.НаправленияЭДО.Входящий
			И (СвойстваСообщения.Статус = Перечисления.СтатусыСообщенийЭДО.Подписан
			Или СвойстваСообщения.Статус = Перечисления.СтатусыСообщенийЭДО.Отправлен));
	
	РасширениеФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(СвойстваСообщения.ПолноеИмяФайла);
	Если РаботаСФайламиБЭДКлиентСервер.ЭтоРасширениеФайлаPDF(РасширениеФайла) Тогда
		ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(СвойстваСообщения.ОсновнойФайл, Ложь);
		ДанныеДляФормированияШтампа.КоэффициентыРазмераШтампа =
			РаботаСФайламиБЭД.КоэффициентыРазмерностиШтампаДляФайла(ДвоичныеДанныеФайла);
	КонецЕсли;
	
	Возврат ДанныеДляФормированияШтампа;
	
КонецФункции

// Удаляет область R1:R2 для некоторых типов документов
// 
// Параметры:
//  ПредставлениеДокумента - ТабличныйДокумент
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
Процедура УбратьИдентификаторИзШапкиТабличногоДокумента(ПредставлениеДокумента, ТипДокумента)

	ТипДокументаБезИдентификатора = ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.Внутренний
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность;
		
	Если ПредставлениеДокумента.ВысотаТаблицы = 0 Или ТипДокументаБезИдентификатора Тогда
		Возврат;
	КонецЕсли;
	
	ТипДокументаИмеетДвеСтрокиИдентификатора = ТипДокументаИмеетДвеСтрокиИдентификатора(ТипДокумента);
		
	Если ТипДокументаИмеетДвеСтрокиИдентификатора Тогда
		УдаляемаяОбласть = ПредставлениеДокумента.Область("R1:R2");
	Иначе
		УдаляемаяОбласть = ПредставлениеДокумента.Область("R1:R1");
	КонецЕсли;

	ПредставлениеДокумента.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);

КонецПроцедуры

// Тип документа имеет две строки идентификатора.
// 
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Булево - Тип документа имеет две строки идентификатора
Функция ТипДокументаИмеетДвеСтрокиИдентификатора(ТипДокумента)
	Возврат ТипДокумента <> Перечисления.ТипыДокументовЭДО.СчетНаОплату
		И ТипДокумента <> Перечисления.ТипыДокументовЭДО.КаталогТоваров
		И ТипДокумента <> Перечисления.ТипыДокументовЭДО.ЗаказТовара
		И ТипДокумента <> Перечисления.ТипыДокументовЭДО.ОтчетОПродажахКомиссионногоТовара
		И ТипДокумента <> Перечисления.ТипыДокументовЭДО.ОтчетОСписанииКомиссионногоТовара
		И ТипДокумента <> Перечисления.ТипыДокументовЭДО.АктОРасхождениях
		И ТипДокумента <> Перечисления.ТипыДокументовЭДО.КонтрактЕИС;
КонецФункции

// Параметры:
//  ПользовательскиеНастройкиПредставления - См. ВизуализацияЭДО.ПользовательскиеНастройкиПредставления
//  ТипДанныхПредставления - ПеречислениеСсылка.ТипыДанныхВизуализацииДокументаЭДО
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
Процедура ЗаполнитьДоступностьПользовательскихНастроекПредставленияДокумента(ПользовательскиеНастройкиПредставления,
	ТипДанныхПредставления, ТипДокумента)
	
	Если ТипДанныхПредставления <> Перечисления.ТипыДанныхВизуализацииДокументаЭДО.ТабличныйДокумент
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.Внутренний
		Или ЭлектронныеДокументыЭДО.ЭтоПрикладнойТипДокумента(ТипДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетНаОплату Тогда

		ПользовательскиеНастройкиПредставления.ЕстьНастройкаВыводаДополнительныхДанных = Истина;
		ПользовательскиеНастройкиПредставления.ЕстьНастройкаВыводаКопияВерна = Истина;
	
	ИначеЕсли ТипДокумента <> Перечисления.ТипыДокументовЭДО.ДоговорныйДокумент
		И ТипДокумента <> Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность
		И ТипДокумента <> Перечисления.ТипыДокументовЭДО.Прочее Тогда
		
		ПользовательскиеНастройкиПредставления.ЕстьНастройкаВыводаБанковскихРеквизитов = Истина;
		ПользовательскиеНастройкиПредставления.ЕстьНастройкаВыводаДополнительныхДанных = Истина;
		ПользовательскиеНастройкиПредставления.ЕстьНастройкаВыводаКопияВерна = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

// Проверяет отсутствие ошибок при выводе файла формата PDF/A3 из-за платформы
// 
// Возвращаемое значение:
//  Булево - Истина, если функционал доступен.
//
Функция ДоступенВыводФайлаФорматаПДФ_А3()
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;
	
	Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияПлатформы, "8.3.22.1000") > 0;
	
КонецФункции

// Представление произвольного документа.
// 
// Параметры:
//  ФайлXML - ДвоичныеДанные, Строка - Двоичные данные, Адрес или путь к файлу XML
//  ПараметрыДокумента - Структура:
//  * ИсходныйФормат - Строка
//  * ПараметрыПредставления - Структура
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  см. НовыйРезультатПредставленияДанныхСообщения
Функция ПредставлениеПроизвольногоДокумента(ФайлXML, ПараметрыДокумента, КонтекстДиагностики = Неопределено)
	
	РезультатФормирования = НовыйРезультатПредставленияДанныхСообщения();
	
	Если ЗначениеЗаполнено(ПараметрыДокумента.ИсходныйФормат)
		И ФорматыЭДО_ФНС.ЭтоПространствоИменМЧД(ПараметрыДокумента.ИсходныйФормат) Тогда
		Возврат РезультатФормирования;
	КонецЕсли;
	
	ПараметрыПреобразования = Новый Структура;
	ПараметрыПреобразования.Вставить("ИтоговыйФормат", "ТабличныйДокумент");
	ПараметрыПреобразования.Вставить("ИсходныйФормат", ПараметрыДокумента.ИсходныйФормат);
	ВариантЗаполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыДокумента, "ВариантЗаполнения", "");
	ПараметрыПреобразования.Вставить("ВариантЗаполнения", ВариантЗаполнения);
	Если ПараметрыДокумента.Свойство("ПараметрыПредставления") Тогда
		ПараметрыПреобразования.Вставить("ПараметрыXSL", ПараметрыДокумента.ПараметрыПредставления);
	КонецЕсли;
	
	Если ТипЗнч(ФайлXML) = Тип("Строка") Тогда
		Если ЭтоАдресВременногоХранилища(ФайлXML) Тогда
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ФайлXML);
		Иначе
			ДвоичныеДанные = Новый ДвоичныеДанные(ФайлXML);
		КонецЕсли;
		ПотокИсходногоXML = ДвоичныеДанные.ОткрытьПотокДляЧтения();
	ИначеЕсли ТипЗнч(ФайлXML) = Тип("ДвоичныеДанные") Тогда
		ПотокИсходногоXML = ФайлXML.ОткрытьПотокДляЧтения();
	Иначе
		Возврат РезультатФормирования;
	КонецЕсли;
	
	ТабличныйДокумент = КонвертацияЭДО.ПреобразоватьФорматЭД(ПотокИсходногоXML, ПараметрыПреобразования);
	
	ПотокИсходногоXML.Закрыть();
	
	РезультатФормирования.ПредставлениеДокумента = ТабличныйДокумент;
	РезультатФормирования.Успех = (ТабличныйДокумент <> Неопределено);
	
	Возврат РезультатФормирования;
	
КонецФункции

#КонецОбласти

#КонецОбласти