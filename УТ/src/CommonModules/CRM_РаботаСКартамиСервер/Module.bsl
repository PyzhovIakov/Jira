////////////////////////////////////////////////////////////////////////////////
// Модуль "CRM_РаботаСКартамиСервер": содержит процедуры и функции для работы с онлайн-
// картами и координатами.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС   

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ РАБОТЫ С КАРТАМИ

// Проверяет константу.
// Если она не задана, то находит первую подходящую карту из справочника с признаком использования "Для отчета"
//
//  Возвращаемое значение:
//   Карта - СправочникСсылка.апОнлайнКарты - ссылка на карту
//   Неопределено - если в справочнике не удалось найти карту нужного назначения
//
Функция ПолучитьОсновнуюКартуДляСистемы() Экспорт
	
	Карта = Неопределено;	
	//
	//ОсновнаяОнлайнКарта = Константы.апОсновнаяОнлайнКартаДляПК.Получить();	
	// Если Не ОсновнаяОнлайнКарта.Пустая() Тогда
	//	Карта = ОсновнаяОнлайнКарта;
	// Иначе
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	//	               |	ОнлайнКарты.Ссылка
	//	               |ИЗ
	//	               |	Справочник.апОнлайнКарты КАК ОнлайнКарты
	//	               |ГДЕ
	//	               |	ОнлайнКарты.Назначение.Ссылка = ЗНАЧЕНИЕ(Перечисление.апНазначенияОнлайнКарт.ПК)
	//	               |	И НЕ ОнлайнКарты.ПометкаУдаления";	
	//	Результат = Запрос.Выполнить();		
	//	Если Результат.Пустой() Тогда
	//		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В справочнике ""%1"" не найдено ни одной карты с назначением использования в ПК! Работа с отчетом (обработкой) невозможна';uk='У довіднику ""%1"" не знайдено жодної карти з призначенням використання в ПК! Робота зі звітом (обробкою) неможлива'"),
		//
	//																					Метаданные.Справочники.апОнлайнКарты.Синоним);
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//		Возврат Неопределено;
	//	КонецЕсли;
	//	
	//	Выборка = Результат.Выбрать();				
	//	Выборка.Следующий();		
	//	Карта = Выборка[0].Ссылка;
	//		
	//	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не задана константа ""%1"". Рекомендуется задать ее значение!';
		//|uk='Не задана константа ""%1"". Рекомендується поставити її значення!'"),
		//
	//																					Метаданные.Константы.апОсновнаяОнлайнКартаДляПК.Синоним);		
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	//КонецЕсли; //Если Не ОсновнаяОнлайнКарта.Пустая() Тогда
	МакетКарты = Справочники.CRM_АдресаОфисовКомпании.ПолучитьМакет("Яндекс");
	Карта = МакетКарты.ПолучитьТекст();
	Возврат Карта;
	
КонецФункции

// Формирует параметр "Режим редактора" (режим + координаты центра карты - при их наличии)
//
//  Параметры:
//   РежимРедактора - Строка - режим редактора
//   КартаСсылка    - СправочникСсылка.апОнлайнКарты - ссылка на карту
//   Широта 		- широта для позиционирования центра карты
//   Долгота    	- долгота для позиционирования центра карты
//  		Если параметры Широта и Долгота не указаны, 
//			то центр карты берется из атрибутов КартаСсылка.Широта и КартаСсылка.Долгота.
//
//  Возвращаемое значение:
//   РежимРедактора - Строка - режим редактора с координатами центра карты (при их наличии)  
//
Функция СформироватьПараметрРежимРедактора(РежимРедактора, КартаСсылка, Знач Широта = 0, Знач Долгота = 0) Экспорт
	
	Результат = "";
	Если Не ПустаяСтрока(РежимРедактора) И ЗначениеЗаполнено(КартаСсылка) Тогда
		//Если Широта = 0 И Долгота = 0 Тогда
		//	Широта  = КартаСсылка.Широта;
		//	Долгота = КартаСсылка.Долгота;
			Если Широта = 0 И Долгота = 0 Тогда
				ПолучитьКоординатыЦентраКартыПоУмолчанию( , Широта, Долгота);
			КонецЕсли;	
		//КонецЕсли;
		// Если Широта <> 0 И Долгота <> 0 Тогда //Gri+
		// + 14.03.16 убрано	- иначе если у карты был пустой центр координат, то не включался режим редактора меток.
			ШиротаСтр  = СтрЗаменить(Строка(CRM_РаботаСКартамиКлиентСервер.КонвертироватьNMEAWGS84(Широта)) , ",", ".");
			ДолготаСтр = СтрЗаменить(Строка(CRM_РаботаСКартамиКлиентСервер.КонвертироватьNMEAWGS84(Долгота)), ",", ".");
			Результат  = ШиротаСтр + "@" + ДолготаСтр + "@" + РежимРедактора;	
		//КонецЕсли;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Возвращает координаты центра онлайн-карты "По умолчанию". Приоритетными являются координаты подразделения сотрудника.
// Если координаты подразделения сотрудника не заданы, ищется вышестоящее подразделение с непустыми координатами.
//
//  Параметры:
//   Подразделение  - подразделение, которое желательно показать в центре карты.
//   Широта 	    - (возвращаемое значение) найденная широта.
//   Долгота		- (возвращаемое значение) найденная долгота.
//  Возвращаемое значение:
//   Истина - если координаты найдены (при этом в параметрах Ширина и Долгота возвращаются координаты);
//   Ложь   - координаты найдены (значения в параметрах Ширина и Долгота не меняются).
//
Функция ПолучитьКоординатыЦентраКартыПоУмолчанию(Подразделение = Неопределено, Широта, Долгота) Экспорт
	//Возврат апОбщегоНазначенияС.ПолучитьКоординатыПодразделенияВИерархии(Подразделение, Широта, Долгота);
КонецФункции

// Возвращает текст макета (JavaScript-оболочку) для работы с онлайн-картой в поле браузера. 
//
//  Параметры:
//   КартаСсылка - СправочникСсылка.апОнлайнКарты - карта из справочника, для которой извлекается текст макета.
//
//  Возвращаемое значение:
//   ТекстМакета - текст (скрипт) оболочки для работы с картой (на языке JavaScript).
//
Функция ПолучитьТекстМакета(КартаСсылка) Экспорт
	
#Область Релиз
	//ДвоичныеДанные = КартаСсылка.Значение.Получить();
	//Если ДвоичныеДанные = Неопределено Тогда
	//	ТекстМакета = "";
	// Иначе	
	//	ИмяФайлаСкриптов = ПолучитьИмяВременногоФайла();
	//	ДвоичныеДанные.Записать(ИмяФайлаСкриптов);
	//	
	//	ТекстДок = Новый ТекстовыйДокумент();
	//	ТекстДок.Прочитать(ИмяФайлаСкриптов);
	//	
	//	ТекстМакета = ТекстДок.ПолучитьТекст();
	//	УдалитьФайлы(ИмяФайлаСкриптов);
	//КонецЕсли;
#КонецОбласти

// Отладка!!!
#Область Отладка
	// ФайлОписания = "c:\Bak\JScripts\ScriptName.txt"; // файл с названием файла скрипта
	//ТекстДок = Новый ТекстовыйДокумент;
	//ТекстДок.Прочитать(ФайлОписания);
	//ИмяФайлаСкрипта = ТекстДок.ПолучитьСтроку(1);
	// Если ПустаяСтрока(ИмяФайлаСкрипта) Тогда
	//	ВызватьИсключение("Файл описания должен включать название загружаемого скрипта. (Файл - " 
	//		+ ФайлОписания + "). Не удалось загрузить скрипт!");
	//КонецЕсли;
	//ФайлСкрипта = "c:\Bak\JScripts\" + ИмяФайлаСкрипта;
	// Если Не апОбщегоНазначенияКС.ФайлСуществует(ФайлСкрипта) Тогда
	//	ВызватьИсключение("Не найден файл скрипта. (Файл - " + ФайлСкрипта + "). Не удалось загрузить скрипт!");
	//КонецЕсли;
	//ТекстДок.Прочитать(ФайлСкрипта);
	//ТекстМакета = ТекстДок.ПолучитьТекст();
#КонецОбласти

	Возврат КартаСсылка;

КонецФункции

// Возвращает адрес элемента справочника из контактной информации
//
//  Параметры:
//   ОбъектСсылка - СправочникСсылка.<ОбъектСсылка> - ссылка на элемент справочника для которого нужно получить адрес из контактной информации
//
//  Возвращаемое значение:
//   Адрес - Строка - адрес объекта из контактной информации
//
Функция ПолучитьКонтактныйАдресОбъекта(ОбъектСсылка, ВыбВидАдреса = Неопределено) Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает телефон элемента справочника из контактной информации
//
//  Параметры:
//   ОбъектСсылка - СправочникСсылка.<ОбъектСсылка> - ссылка на элемент справочника для которого нужно получить адрес из контактной информации
//
//  Возвращаемое значение:
//   Адрес - Строка - адрес объекта из контактной информации
//
Функция ПолучитьКонтактныйТелефонОбъекта(ОбъектСсылка) Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает контактное лицо элемента справочника из контактной информации
//
//  Параметры:
//   ОбъектСсылка - СправочникСсылка.<ОбъектСсылка> - ссылка на элемент справочника для которого нужно получить адрес из контактной информации
//
//  Возвращаемое значение:
//   Адрес - Строка - адрес объекта из контактной информации
//
Функция ПолучитьКонтактноеЛицоОбъекта(ОбъектСсылка) Экспорт
	
	Возврат "";
	
КонецФункции

Функция ПолучитьКонтактныйАдресОпорнойТочкиМаршрута(ВариантТочки, Подразделение, Агент) Экспорт
	//Если ВариантТочки = Перечисления.апВариантыТочкиМаршрута.Офис Тогда
	//	Возврат ПолучитьКонтактныйАдресОбъекта(Подразделение);
	//ИначеЕсли ВариантТочки = Перечисления.апВариантыТочкиМаршрута.ДомашнийАдресАгента Тогда
	//	Возврат ПолучитьКонтактныйАдресОбъекта(Агент.ФизическоеЛицо);
	// Иначе
		Возврат "";
	//КонецЕсли;
КонецФункции

Функция ПолучитьМакетРаботыСМаршрутами() Экспорт
	Возврат ПолучитьОбщийМакет("CRM_ПоискМаршрутаVBScript");
КонецФункции

Функция КонвертироватьКоординаты(ОтветСервера) Экспорт
	
	ТаблицаАдресов = Новый ТаблицаЗначений;
	ТаблицаАдресов.Колонки.Добавить("Координаты", Новый ОписаниеТипов("Строка"));
	ТаблицаАдресов.Колонки.Добавить("Область", Новый ОписаниеТипов("Строка"), "Область");
	ТаблицаАдресов.Колонки.Добавить("НаселенныйПункт", Новый ОписаниеТипов("Строка"), "Населенный пункт");
	ТаблицаАдресов.Колонки.Добавить("Район", Новый ОписаниеТипов("Строка"), "Район");
	ТаблицаАдресов.Колонки.Добавить("Улица", Новый ОписаниеТипов("Строка"), "Улица");
	ТаблицаАдресов.Колонки.Добавить("Дом", Новый ОписаниеТипов("Строка"), "Дом");
	
	// Разбор XML ответа
	ЧтениеОтвета = Новый ЧтениеXML;
	ЧтениеОтвета.УстановитьСтроку(ОтветСервера);
	
	// Чтение XML строки
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда // для ускорения чтения
			Продолжить;
		КонецЕсли;
				
		Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеОтвета.Имя = "AdministrativeAreaName" Тогда
			ЧтениеОтвета.Прочитать();
			НоваяСтрока = ТаблицаАдресов.Добавить();
			НоваяСтрока.Область = СокрЛП(ЧтениеОтвета.Значение);			
		КонецЕсли;
		
		Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеОтвета.Имя = "LocalityName" Тогда
			ЧтениеОтвета.Прочитать();
			НоваяСтрока.НаселенныйПункт = СокрЛП(ЧтениеОтвета.Значение);			
		КонецЕсли;
		
		Если ЧтениеОтвета.Имя = "DependentLocalityName" Тогда
		Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеОтвета.Имя = "DependentLocalityName" Тогда
			ЧтениеОтвета.Прочитать();
			НоваяСтрока.Район = СокрЛП(ЧтениеОтвета.Значение);			
		КонецЕсли;
		КонецЕсли;
		
		Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеОтвета.Имя = "ThoroughfareName" Тогда
			ЧтениеОтвета.Прочитать();
			НоваяСтрока.Улица = СокрЛП(ЧтениеОтвета.Значение);			
		КонецЕсли;
		
		Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеОтвета.Имя = "PremiseNumber" Тогда
			ЧтениеОтвета.Прочитать();
			НоваяСтрока.Дом = СокрЛП(ЧтениеОтвета.Значение);			
		КонецЕсли;
		
		Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеОтвета.Имя = "pos" Тогда
			ЧтениеОтвета.Прочитать();
			НоваяСтрока.Координаты = СокрЛП(ЧтениеОтвета.Значение);
			
			// конвертируем в NMEA
			НоваяСтрока.Координаты = CRM_РаботаСКартамиКлиентСервер.КонвертироватьWGS84NMEA(НоваяСтрока.Координаты);
		КонецЕсли;
		
	КонецЦикла;
	ЧтениеОтвета.Закрыть();
	
	СписокЗначенийОтвета = Новый СписокЗначений;
	Для Каждого Строка Из ТаблицаАдресов Цикл
		СтрокаАдреса = Строка.Область + ", "
		+ ?(ПустаяСтрока(Строка.НаселенныйПункт)	, "", " " + Строка.НаселенныйПункт + ",")
		+ ?(ПустаяСтрока(Строка.Район)			, "", " " + Строка.Район + ",")
		+ ?(ПустаяСтрока(Строка.Улица)			, "", " " + Строка.Улица + ",")
		+ ?(ПустаяСтрока(Строка.Дом)				, "", " " + Строка.Дом);
		
		СтрокаАдреса = ?(Прав(СтрокаАдреса, 1) = ",", Лев(СтрокаАдреса, СтрДлина(СтрокаАдреса) - 1), СтрокаАдреса);
		
		СписокЗначенийОтвета.Добавить(Строка.Координаты, СтрокаАдреса);
	КонецЦикла;
	
	Возврат СписокЗначенийОтвета;
КонецФункции

Функция ВыполнитьЗапросКВебСервисуНаСервере(Знач url = Неопределено, ВебЗапрос,
	 ВернутьJSONСтруктуру = Ложь,
	 ИспользоватьSSL = Истина) Экспорт
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	Если url = Неопределено Тогда
		url = "geocode-maps.yandex.ru";
	КонецЕсли;
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Протокол = ?(ИспользоватьSSL, "https", "http");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси(Протокол);
	КонецЕсли;
	
	Если ИспользоватьSSL Тогда
		Соединение = Новый HTTPСоединение(url, , , , Прокси, 30, ssl);
	Иначе
		Соединение = Новый HTTPСоединение(url, , , , Прокси, 30);
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(ВебЗапрос);	
	
	ОписаниеОшибки = "";
	Попытка 
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Ошибка обращения к веб-сервису: '") 
			+ Символы.ПС 
			+ ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецЕсли;

	Если Не ВернутьJSONСтруктуру Тогда
		Возврат HTTPОтвет.ПолучитьТелоКакСтроку();
	Иначе
		Возврат CRM_РаботаСКартамиСервер.ПреобразоватьСтрокуВJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
	КонецЕсли; 
	
КонецФункции

Функция ВыполнитьHTTPЗапрос(ПреобразованныйАдрес) Экспорт
	СертификатКлиентаWindows = Новый СертификатКлиентаWindows();
	СертификатыУдостоверяющихЦентровWindows = Новый СертификатыУдостоверяющихЦентровWindows();
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	СертификатКлиентаWindows,
	СертификатыУдостоверяющихЦентровWindows);
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение("geocode-maps.yandex.ru", , , , Прокси, 30, ssl);
	
	Возврат Соединение.Получить(Новый HTTPЗапрос(ПреобразованныйАдрес)).ПолучитьТелоКакСтроку();
КонецФункции

Функция ПолучитьВебКаталогИконок() Экспорт

	Возврат "http://www.agentplus.ru/tmp/configs/map/"; // "http://www.agentplus.ru/download/1CModules/8/8.2/11/icons/";

КонецФункции

Функция ПредставлениеКоординатNMEA(Широта, Долгота) Экспорт

	Если Широта = 0 И Долгота = 0 Тогда
		Возврат "";
	Иначе
		Возврат Строка(Широта) + "; " + Строка(Долгота);			
	КонецЕсли; 

КонецФункции 

// Функция возвращает Истина, если будет строиться замкнутый маршрут при планировании посещений агента.
Функция ЭтоЗамкнутыйМаршрут(ВариантНачальнойТочкиМаршрута, ВариантКонечнойТочкиМаршрута) Экспорт
	
	Если Не ЗначениеЗаполнено(ВариантНачальнойТочкиМаршрута) Или Не ЗначениеЗаполнено(ВариантКонечнойТочкиМаршрута) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Если     ВариантНачальнойТочкиМаршрута = Перечисления.апВариантыТочкиМаршрута.НеЗадано 
	//	 Или ВариантКонечнойТочкиМаршрута  = Перечисления.апВариантыТочкиМаршрута.НеЗадано
	//	 Или ВариантНачальнойТочкиМаршрута = Перечисления.апВариантыТочкиМаршрута.ТорговаяТочка
	//	 Или ВариантКонечнойТочкиМаршрута  = Перечисления.апВариантыТочкиМаршрута.ТорговаяТочка
	// Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	
	Возврат (ВариантНачальнойТочкиМаршрута = ВариантКонечнойТочкиМаршрута);
	
КонецФункции

Функция ПолучитьКоординатыОпорнойТочкиМаршрута(ВариантТочкиМаршрута, СтррПараметры) Экспорт
	
	СтррРезультат = Новый Структура("Широта,Долгота", Неопределено, Неопределено);
	
	Если Не ЗначениеЗаполнено(ВариантТочкиМаршрута) Тогда
		// Ничего не делаем
	//ИначеЕсли ВариантТочкиМаршрута = Перечисления.апВариантыТочкиМаршрута.НеЗадано Тогда
	//	// Ничего не делаем
	//ИначеЕсли ВариантТочкиМаршрута = Перечисления.апВариантыТочкиМаршрута.Офис Тогда
	//	апОбщегоНазначенияС.ПолучитьРеквизитыПоИерархииПодразделений(СтррРезультат, СтррПараметры.Подразделение);
	//ИначеЕсли ВариантТочкиМаршрута = Перечисления.апВариантыТочкиМаршрута.ДомашнийАдресАгента Тогда
	//	ФизЛицо = СтррПараметры.Агент.ФизическоеЛицо;
	//	СтррРезультат.Широта  = ФизЛицо.Широта;
	//	СтррРезультат.Долгота = ФизЛицо.Долгота;
	//ИначеЕсли ВариантТочкиМаршрута = Перечисления.апВариантыТочкиМаршрута.ТорговаяТочка Тогда
		// значение можно получить из самого документа плана посещений - по первой и последней точке маршрута
	КонецЕсли;
	
	Возврат СтррРезультат;
	
КонецФункции

Функция ПолучитьСпособПоискаОптимальногоМаршрута() Экспорт
	
	//Результат = Константы.апАлгоритмОптимизацииМаршрутов.Получить();
	// Если ПустаяСтрока(Результат) Тогда
		Результат = "1S";
	//КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаданВариантСКоординатами(Вариант) Экспорт
	
	Если Не ЗначениеЗаполнено(Вариант) Тогда
		Возврат Ложь;
	//ИначеЕсли Вариант = Перечисления.апВариантыТочкиМаршрута.НеЗадано Тогда
	//	Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПараметрыМаршрута(СтррДанные, ДляПоказаНаКарте) Экспорт
	
	//СтррПараметры = Новый Структура("Способ,МаксКоличествоВариантов,ТипМаршрута,МинКоличествоТочек", 
	//	ПолучитьСпособПоискаОптимальногоМаршрута(), Неопределено, "Разомкнутый", 3);
	// // МинКоличествоТочек - минимально допустимое количество выбранных точек для прокладки маршрута
	// // ТипМаршрута Варианты значения: "Разомкнутый", "МеждуДвумяТочками", "Замкнутый", "ОднаТочка"
	//
	//ЕстьОшибки = Ложь;
	//
	//
	// Если Не ЭтоЗамкнутыйМаршрут(СтррДанные.ВариантНачальнойТочкиМаршрута, СтррДанные.ВариантКонечнойТочкиМаршрута) Тогда
	//	
	//	КоординатыНачальнойТочки = ПолучитьКоординатыОпорнойТочкиМаршрута(СтррДанные.ВариантНачальнойТочкиМаршрута,
		// СтррДанные);
	//	КоординатыКонечнойТочки  = ПолучитьКоординатыОпорнойТочкиМаршрута(СтррДанные.ВариантКонечнойТочкиМаршрута,
		// СтррДанные);
	//	
	//	Если ДляПоказаНаКарте Тогда
	//		Адрес = ПолучитьКонтактныйАдресОпорнойТочкиМаршрута(СтррДанные.ВариантНачальнойТочкиМаршрута, 
	//			СтррДанные.Подразделение, СтррДанные.Агент);
	//		КоординатыНачальнойТочки.Вставить("Адрес", Адрес);
	//		Адрес = ПолучитьКонтактныйАдресОпорнойТочкиМаршрута(СтррДанные.ВариантКонечнойТочкиМаршрута, 
	//			СтррДанные.Подразделение, СтррДанные.Агент);
	//		КоординатыКонечнойТочки.Вставить("Адрес", Адрес);	
	//	КонецЕсли;
	//	
	//	Если  СтррДанные.ВариантНачальнойТочкиМаршрута = Перечисления.апВариантыТочкиМаршрута.ТорговаяТочка 
	//		И СтррДанные.ВариантКонечнойТочкиМаршрута <> Перечисления.апВариантыТочкиМаршрута.ТорговаяТочка
	//	Тогда
	//	
	//		Если ЗначениеЗаполнено(КоординатыКонечнойТочки.Широта) Тогда
	//			СтррПараметры.ТипМаршрута = "МеждуДвумяТочками"; // Направление из заданной торговой точки в конечную точку (офис
		// или адрес агента)
	//			СтррПараметры.Вставить("КоординатыКонечнойТочки", КоординатыКонечнойТочки);
	//			СтррПараметры.МинКоличествоТочек = 1;
	//		Иначе
	//			СтррПараметры.ТипМаршрута = "ОднаТочка"; // Направление из заданной торговой точки в любую точку. 
	//			СтррПараметры.МинКоличествоТочек = 2;    
	//		КонецЕсли;
	//		
	//	ИначеЕсли СтррДанные.ВариантКонечнойТочкиМаршрута = Перечисления.апВариантыТочкиМаршрута.ТорговаяТочка 
	//		    И СтррДанные.ВариантНачальнойТочкиМаршрута <> Перечисления.апВариантыТочкиМаршрута.ТорговаяТочка
	//	Тогда
	//	
	//		Если ЗначениеЗаполнено(КоординатыНачальнойТочки.Широта) Тогда
	//			СтррПараметры.ТипМаршрута = "МеждуДвумяТочками"; // Направление из заданной точки (офис
		// или адрес агента) в конечную торговую точку 
	//			СтррПараметры.Вставить("КоординатыНачальнойТочки", КоординатыНачальнойТочки);
	//			СтррПараметры.МинКоличествоТочек = 1;
	//		Иначе
	//			СтррПараметры.ТипМаршрута = "ОднаТочка"; // Направление в заданную торговую точку из любой точки.
	//			СтррПараметры.МинКоличествоТочек = 2;    
	//			СтррПараметры.Вставить("ЗакончитьВТочке", Неопределено); // признак, что нужно закончить маршрут в заданной точке
	//			СтррПараметры.Вставить("НомерКонечнойТочки",
		// Неопределено); // признак, что нужно указать номер конечной точки маршрута (из массива маршрута)
	//		КонецЕсли;
	//		
	//	ИначеЕсли СтррДанные.ВариантКонечнойТочкиМаршрута = Перечисления.апВариантыТочкиМаршрута.НеЗадано
	//			Или Не ЗначениеЗаполнено(СтррДанные.ВариантКонечнойТочкиМаршрута) Тогда
	//		Если ЗначениеЗаполнено(КоординатыНачальнойТочки.Широта) Тогда // Заданы координаты начальной точки, координаты конечной точки не заданы.
	//			КоординатыОпорнойТочки = КоординатыНачальнойТочки;        // Направление из заданной точки в любую точку.
	//			СтррПараметры.ТипМаршрута = "ОднаТочка";
	//			СтррПараметры.МинКоличествоТочек = 1;
	//			СтррПараметры.Вставить("КоординатыОпорнойТочки", КоординатыОпорнойТочки);
	//		КонецЕсли;
	//		
	//	ИначеЕсли СтррДанные.ВариантНачальнойТочкиМаршрута = Перечисления.апВариантыТочкиМаршрута.НеЗадано 
	//			 Или Не ЗначениеЗаполнено(СтррДанные.ВариантНачальнойТочкиМаршрута) Тогда
	//		Если ЗначениеЗаполнено(КоординатыКонечнойТочки.Широта) Тогда // Заданы координаты конечной точки, координаты начальной точки не заданы.
	//			КоординатыОпорнойТочки = КоординатыКонечнойТочки;		 // Направление в заданную точку из любой точки.
	//			СтррПараметры.ТипМаршрута = "ОднаТочка";
	//			СтррПараметры.МинКоличествоТочек = 1;
	//			СтррПараметры.Вставить("КоординатыОпорнойТочки", КоординатыОпорнойТочки);
	//			СтррПараметры.Вставить("ЗакончитьВТочке", Неопределено); // признак, что нужно закончить маршрут в заданной точке
	//		КонецЕсли;
	//		
	//	Иначе // маршрут между офисом и домом или наоборот домом и офисом
	//		
	//		Если КоординатыНачальнойТочки.Свойство("Ошибка") Тогда // не удалось получить координаты начальной точки
	//			ТекстСообщения = НСтр("ru='Не удалось определить координаты начальной точки маршрута по причине: ';
		//|uk='Не вдалося визначити координати початкової точки маршруту через: '")
	//															 + КоординатыНачальнойТочки.Ошибка;
	//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//			ЕстьОшибки = Истина;
	//		КонецЕсли;
	//		Если КоординатыКонечнойТочки.Свойство("Ошибка") Тогда // не удалось получить координаты конечной точки	
	//			ТекстСообщения = НСтр("ru='Не удалось определить координаты конечной точки маршрута по причине: ';
		//|uk='Не вдалося визначити координати кінцевої точки маршруту через: '")
	//															+ КоординатыКонечнойТочки.Ошибка;
	//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//			ЕстьОшибки = Истина;
	//		КонецЕсли;
	//		
	//		Если Не ЕстьОшибки Тогда
	//			Если  СтррДанные.ВариантНачальнойТочкиМаршрута = Перечисления.апВариантыТочкиМаршрута.ТорговаяТочка
	//				И СтррДанные.ВариантКонечнойТочкиМаршрута = Перечисления.апВариантыТочкиМаршрута.ТорговаяТочка
	//			Тогда
	//				СтррПараметры.МинКоличествоТочек = 2;
	//			Иначе
	//				СтррПараметры.МинКоличествоТочек = 1;
	//			КонецЕсли;
	//			СтррПараметры.ТипМаршрута = "МеждуДвумяТочками";
	//			Если СтррДанные.ВариантНачальнойТочкиМаршрута <> Перечисления.апВариантыТочкиМаршрута.ТорговаяТочка 
	//				И ЗначениеЗаполнено(КоординатыНачальнойТочки.Широта) 
	//			Тогда
	//				СтррПараметры.Вставить("КоординатыНачальнойТочки", КоординатыНачальнойТочки);
	//			КонецЕсли;
	//			Если СтррДанные.ВариантКонечнойТочкиМаршрута <> Перечисления.апВариантыТочкиМаршрута.ТорговаяТочка
	//				И ЗначениеЗаполнено(КоординатыКонечнойТочки.Широта) 
	//			Тогда
	//				СтррПараметры.Вставить("КоординатыКонечнойТочки", КоординатыКонечнойТочки);
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	// Иначе
	//	
	//	СтррПараметры.ТипМаршрута = "Замкнутый";
	//	КоординатыОпорнойТочки = ПолучитьКоординатыОпорнойТочкиМаршрута(СтррДанные.ВариантНачальнойТочкиМаршрута,
		// СтррДанные);
	//	
	//	Если ДляПоказаНаКарте Тогда
	//		Адрес = ПолучитьКонтактныйАдресОпорнойТочкиМаршрута(СтррДанные.ВариантНачальнойТочкиМаршрута, 
	//			СтррДанные.Подразделение, СтррДанные.Агент);
	//		КоординатыОпорнойТочки.Вставить("Адрес", Адрес);
	//	КонецЕсли;
	//	
	//	Если КоординатыОпорнойТочки.Свойство("Ошибка") Тогда // не удалось получить координаты замыкающей точки	
	//		ТекстСообщения = НСтр("ru='Не удалось определить координаты замыкающей точки маршрута по причине: ';
		//|uk='Не вдалося визначити координати замикає точки маршруту через: '")
	//															+ КоординатыОпорнойТочки.Ошибка;
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//		ЕстьОшибки = Истина;
	//	Иначе
	//		СтррПараметры.МинКоличествоТочек = 2;
	//		СтррПараметры.Вставить("КоординатыОпорнойТочки", КоординатыОпорнойТочки);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	// Если Не ЕстьОшибки Тогда
	//	Возврат СтррПараметры;
	// Иначе
		Возврат Неопределено;
	//КонецЕсли;							
	
КонецФункции

Процедура ДополнитьМассивТочками(МассивТочек, СтррПараметры, ФТекст = Ложь) Экспорт
	
	Если СтррПараметры.ТипМаршрута = "Замкнутый" Тогда // кольцевую точку добавляем последней
		Если СтррПараметры.Свойство("КоординатыОпорнойТочки") Тогда
			CRM_РаботаСКартамиКлиентСервер.ДобавитьТочкуВМассив(МассивТочек, СтррПараметры.КоординатыОпорнойТочки);
		КонецЕсли;
	ИначеЕсли СтррПараметры.ТипМаршрута = "МеждуДвумяТочками" Тогда // начальную точку добавляем первой, конечную - последней
		Если СтррПараметры.Свойство("КоординатыНачальнойТочки") Тогда
			CRM_РаботаСКартамиКлиентСервер.ДобавитьТочкуВМассив(МассивТочек, СтррПараметры.КоординатыНачальнойТочки, Истина);
		КонецЕсли;
		Если СтррПараметры.Свойство("КоординатыКонечнойТочки") Тогда
			CRM_РаботаСКартамиКлиентСервер.ДобавитьТочкуВМассив(МассивТочек, СтррПараметры.КоординатыКонечнойТочки);
		КонецЕсли;
	ИначеЕсли СтррПараметры.ТипМаршрута = "ОднаТочка" Тогда // опорную точку (т.е. стартовую
															// или конечную) добавляем последней
		Если СтррПараметры.Свойство("КоординатыОпорнойТочки") Тогда
			CRM_РаботаСКартамиКлиентСервер.ДобавитьТочкуВМассив(МассивТочек, СтррПараметры.КоординатыОпорнойТочки, Истина);
		КонецЕсли;
		Если СтррПараметры.Свойство("НомерКонечнойТочки")
			 И НЕ ФТекст Тогда // нужно указать номер конечной точки маршрута (из массива маршрута)
			СтррПараметры.НомерКонечнойТочки = МассивТочек.Количество() / 2; // в массиве пары элементов - широта
															// и долгота, номер последней точки - кол-во элементов / 2. 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьАдресПоКоординатамОтВебСервиса(стррКоординаты) Экспорт
	
	КлючAPI = Константы.CRM_КлючAPIКарт.Получить();
	Если Не ЗначениеЗаполнено(КлючAPI) Тогда 
		ТекстСообщения = НСтр("ru='Для работы с сервисом геокодирования Yandex в соответствии с условиями их использования необходимо ввести ключ для доступа к API Яндекс.Карт. (Раздел Настройки - Клиенты и продажи - Планирование встреч)'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
		ОтветСервера = Неопределено;
	Иначе
		ВебЗапрос  = "1.x/?" + "apikey=" + КлючAPI + "&geocode=" 
			+ CRM_РаботаСКартамиКлиентСервер.ЧислоВСтроку(стррКоординаты.Долгота) 
		+ "," + CRM_РаботаСКартамиКлиентСервер.ЧислоВСтроку(стррКоординаты.Широта);
		ОтветСервера = ВыполнитьЗапросКВебСервисуНаСервере(, ВебЗапрос);
	КонецЕсли;
	
	Если ОтветСервера = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	// для ускорения циклов
	ТипУзлаНачалоЭлемента = ТипУзлаXML.НачалоЭлемента;
	
	// Разбор XML ответа
	ЧтениеОтвета = Новый ЧтениеXML;
	ЧтениеОтвета.УстановитьСтроку(ОтветСервера);
	
	Результат = Неопределено;

	// Чтение XML строки
	Пока ЧтениеОтвета.Прочитать() Цикл
		ИмяПараметра = ЧтениеОтвета.Имя;
		ТипУзла = ЧтениеОтвета.ТипУзла;
		Если ТипУзла <> ТипУзлаНачалоЭлемента Тогда
			Продолжить;
		КонецЕсли;
		Если ИмяПараметра = "text" Тогда
			ЧтениеОтвета.Прочитать();
			Результат = СокрЛП(ЧтениеОтвета.Значение);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ЧтениеОтвета.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучтьКоординатыОтВебСервиса(Знач Адрес, ВернутьОдинАдрес, РегионГеокодера = Неопределено,
	 ЗначениеБезТочности = 99) Экспорт
	
	Если ПустаяСтрока(Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	КлючAPI = Константы.CRM_КлючAPIКарт.Получить();
	Если Не ЗначениеЗаполнено(КлючAPI) Тогда 
		ТекстСообщения = НСтр("ru='Для работы с сервисом геокодирования Yandex в соответствии с условиями их использования необходимо ввести ключ для доступа к API Яндекс.Карт. (Раздел Настройки - Клиенты и продажи - Планирование встреч)'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	Иначе
		ВебЗапрос = "1.x/?" + "apikey=" + КлючAPI + "&geocode=" 
			+ CRM_РаботаСКартамиКлиентСервер.ПреобразоватьСтрокуВУТФ8(Адрес) 
			+ РегионГеокодера;
		ОтветСервера = ВыполнитьЗапросКВебСервисуНаСервере(, ВебЗапрос);
	КонецЕсли;
	
	Если ОтветСервера = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 

	// для ускорения циклов
	ТипУзлаНачалоЭлемента = ТипУзлаXML.НачалоЭлемента;
	БезТочности = ЗначениеБезТочности;		
	
	СписокАдресов = Новый СписокЗначений;
	
	// Разбор XML ответа
	ЧтениеОтвета = Новый ЧтениеXML;
	ЧтениеОтвета.УстановитьСтроку(ОтветСервера);
	
	Адрес = ""; 
	СтрТочность = "";
	Точность = БезТочности;
	Координаты = Неопределено;
	
	// Чтение XML строки
	Пока ЧтениеОтвета.Прочитать() Цикл
		ИмяПараметра = ЧтениеОтвета.Имя;
		ТипУзла = ЧтениеОтвета.ТипУзла;
		Если ТипУзла <> ТипУзлаНачалоЭлемента Тогда
			Продолжить;
		КонецЕсли;
		Если ИмяПараметра = "text" Тогда
			Если ЗначениеЗаполнено(Адрес) Тогда
				СписокАдресов.Добавить(Координаты + " " + Точность, Адрес + СтрТочность);
				Если ВернутьОдинАдрес И СписокАдресов.Количество() > 1 Тогда // возвращаем первый найденный адрес
					Прервать;
				КонецЕсли; 
			КонецЕсли; 
			ЧтениеОтвета.Прочитать();
			Адрес = СокрЛП(ЧтениеОтвета.Значение);
			Точность = БезТочности;
		ИначеЕсли ИмяПараметра = "precision" Тогда
			ЧтениеОтвета.Прочитать();
			Значение = СокрЛП(ЧтениеОтвета.Значение);
			Если Значение = "exact" Тогда
				Точность = 1;
				СтрТочность = "";
			ИначеЕсли Значение = "number" Тогда
				Точность = 2;
				СтрТочность = " *";
			ИначеЕсли Значение = "street" Тогда
				Точность = 3;
				СтрТочность = " **";
			Иначе
				Точность = 4;
				СтрТочность = " ***";
			КонецЕсли; 
		ИначеЕсли ИмяПараметра = "pos" Тогда
			ЧтениеОтвета.Прочитать();
			Координаты = СокрЛП(ЧтениеОтвета.Значение);
		ИначеЕсли ИмяПараметра = "status" Тогда
			ЧтениеОтвета.Прочитать();
			Значение = ЧтениеОтвета.Значение; 
			Если Значение = "429" Тогда
				ТекстСообщения = НСтр("ru='Превышен лимит запросов бесплатного использования API. Попробуйте позднее,
					| пожалуйста.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	ЧтениеОтвета.Закрыть();

	Если ЗначениеЗаполнено(Адрес) Тогда	
		СписокАдресов.Добавить(Координаты, Адрес + СтрТочность);
		Если ВернутьОдинАдрес Тогда // возвращаем первый найденный адрес
			ЭлементСписка = СписокАдресов[0];
			КоординатыИТочность = ЭлементСписка.Значение;
			Возврат Новый Структура("Координаты,Адрес", КоординатыИТочность, ЭлементСписка.Представление);
		КонецЕсли;
	КонецЕсли; 
	
	Возврат ?(ВернутьОдинАдрес Или СписокАдресов.Количество() = 0, Неопределено, СписокАдресов);
	
КонецФункции

Функция СохранитьЦентрКарты(стррЦентр) Экспорт
	
	Если ТипЗнч(стррЦентр) = Тип("Структура") Тогда
		КартаЦентр = стррЦентр;
		ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить("апПоддержкаКарт", "КартаЦентр", КартаЦентр);
	Иначе
		КартаЦентр = Новый Структура("Широта,
			| Долгота"); // Неопределенный ЦК сохранять не будем, но вернем хоть какие-то координаты
	КонецЕсли; 
	
	Возврат КартаЦентр;
КонецФункции

Функция ПолучитьМаршрутПоДорогам(СтрТочек) Экспорт
	РезультатФункции = Новый Структура("Геометрия,Сегменты");		
	Если Не ЗначениеЗаполнено(СтрТочек) Тогда
		Возврат 0;
	КонецЕсли;
	КлючAPI = CRM_РаботаСКартамиКлиентСервер.ПолучитьКлючApiOpenrouteservice(); // В данном случае передаем ключ API	
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение("api.openrouteservice.org", , , , Прокси, 30, Новый ЗащищенноеСоединениеOpenSSL());
	ТекстЗапроса = "/directions?api_key=" + КлючAPI + "&coordinates=" + стрТочек 
		+ "&profile=driving-car&language=ru&geometry=true&instructions=true&options=%7B%7D&id=";
	
	Запрос = Новый HTTPЗапрос(ТекстЗапроса);
	Результат = Соединение.Получить(Запрос);
	
	Если Результат.КодСостояния = 200 Тогда
		ОтветСервера = Результат.ПолучитьТелоКакСтроку();			
		
		ЧтениеJSON = Новый ЧтениеJSON;
		Попытка
			ЧтениеJSON.УстановитьСтроку(ОтветСервера);
			СтруктРезультат = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
		Исключение         
			Возврат РезультатФункции;
		КонецПопытки;
		Маршрут = СтруктРезультат.routes[0];	
		Геометрия = Маршрут.geometry;
		Сегменты = Маршрут.segments;
		РезультатФункции = Новый Структура("Геометрия,Сегменты", Геометрия, Сегменты);		
	ИначеЕсли Результат.КодСостояния = 413 Тогда
		ТекстСообщения = НСтр("ru='Превышено лимит количества обрабатываемых точек в запросе. '");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);		
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка при построении оптимального маршрута. Код ошибки: %1'"),
			 Результат.КодСостояния);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;
	
	Возврат РезультатФункции;

КонецФункции

// ((аа_20180601
Функция ПолучитьРасстояниеМаршрута(СтрТочек, ВозвращатьГеометрию = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(СтрТочек) Тогда
		Возврат 0;
	КонецЕсли;
	
	ВозвращатьГеометрию = ?(ВозвращатьГеометрию, "true", "false");
	
	КлючAPI = CRM_РаботаСКартамиКлиентСервер.ПолучитьКлючApiOpenrouteservice(); // В данном случае передаем ключ API	
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение("api.openrouteservice.org", , , , Прокси, 30, Новый ЗащищенноеСоединениеOpenSSL());
	Расстояние = 0;
	ПромежуточныеРасстояния = Новый Массив;
	стррРасстояние = Новый Структура ("Расстояние,МассивРасстояний", Расстояние, ПромежуточныеРасстояния) ;
	ТекстЗапроса = "/directions?api_key=" + КлючAPI + "&coordinates=" + стрТочек 
		+ "&profile=driving-car&preference=fastest&format=json&units=m&language=ru&geometry=" 
		+ ВозвращатьГеометрию 
		+ "&geometry_format=encodedpolyline&geometry_simplify=&instructions=true&instructions_format&options=%7B%7D&id=";
	
	Запрос = Новый HTTPЗапрос(ТекстЗапроса);
	Результат = Соединение.Получить(Запрос);
	
	Если Результат.КодСостояния = 200 Тогда
		ОтветСервера = Результат.ПолучитьТелоКакСтроку();			
		
		ЧтениеJSON = Новый ЧтениеJSON;
		Попытка
			ЧтениеJSON.УстановитьСтроку(ОтветСервера);
			СтруктРезультат = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
		Исключение         
			Возврат стррРасстояние;
		КонецПопытки;
		Маршрут = СтруктРезультат.routes[0];	
		стрМаршрута = Маршрут.summary;
		стрМаршрута.Свойство("distance", Расстояние);
		
		Если ВозвращатьГеометрию Тогда
			СегментыМаршрута = Маршрут.Segments;
			Для Каждого Сегмент Из СегментыМаршрута Цикл
				ПромежуточныеРасстояния.Добавить(Сегмент.distance);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Результат.КодСостояния = 413 Тогда
		ТекстСообщения = НСтр("ru='Превышено лимит количества обрабатываемых точек в запросе. '");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
		Расстояние = -1;
	ИначеЕсли Результат.КодСостояния = 429 Тогда
		ТекстСообщения = НСтр("ru='Ошибка при построении оптимального маршрута. Превышен лимит частоты запросов. '");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Расстояние = -1;
	ИначеЕсли Результат.КодСостояния = 400 Тогда 
		Расстояние = 0;
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка при расчете расстояния. Код ошибки: %1'"),
			 Результат.КодСостояния);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
		Расстояние = -1;
	КонецЕсли;
	
	стррРасстояние.Вставить("Расстояние", Расстояние);
	стррРасстояние.Вставить("ПромежуточныеРасстояния", ПромежуточныеРасстояния);
	
	Возврат стррРасстояние;
	
КонецФункции
// ))аа_20180601
Функция ПреобразоватьСтрокуВJSON(Строка) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(Строка);
		ПромРезультат = ПрочитатьJSON(ЧтениеJSON);
		Если ТипЗнч(ПромРезультат) <> Тип("Структура") И ПромРезультат <> Неопределено Тогда
			Результат = Новый Структура("JSON", ПромРезультат);
		Иначе
			Результат = ПромРезультат;
		КонецЕсли;
		ЧтениеJSON.Закрыть();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
