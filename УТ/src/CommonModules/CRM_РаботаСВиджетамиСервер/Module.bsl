////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции для работы с виджетами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция для добавления виджета на форму.
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения            - Форма, на которой будет добавляться виджет.
//  ВариантВиджета  - СправочникСсылка.CRM_ВариантыВиджетов - Вариант виджета для добавления.
//  ГруппаВиджета   - Строка                                - Группа, где будет создаваться виджет.
//
// Возвращаемое значение:
//   Строка  - Идентификатор строки добавленного варианта виджета.
//
Функция ДобавитьВиджет(Форма, ВариантВиджета, ГруппаВиджета = "") Экспорт
	
	// --------------
	// Проверка на наличие такого же варианта.
	//
	// Если такой вариант виджета уже есть в таблице
	// убирается флаг скрытия этого виджета.
	
	ПараметрыПоиска = Новый Структура("ВариантВиджета", ВариантВиджета);
	НайденныеСтроки = Форма.ВариантыВиджетовФормы.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ДанныеВиджета = НайденныеСтроки[0];
		
		Если Форма.ВариантРаботыВиджетов = "РабочийСтол" Тогда
			ПоследнийИндекс = ПолучитьМаксимальныйПорядокВиджетов(Форма);
			
			ДанныеВиджета.ИндексВертикальный = ПоследнийИндекс + 1;
			
			МенеджерЗаписи = РегистрыСведений.CRM_ПорядокВиджетов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ВариантРаботыВиджетов	= "РабочийСтол";
			МенеджерЗаписи.ВариантВиджета			= ВариантВиджета;
			МенеджерЗаписи.Пользователь				= Пользователи.ТекущийПользователь();
			МенеджерЗаписи.ИндексВертикальный		= ДанныеВиджета.ИндексВертикальный;
			МенеджерЗаписи.Записать(Истина);
			
			ЭлементВиджета = Форма.Элементы[ДанныеВиджета.ИмяДанных];
			ЭлементВиджета.Видимость = Истина;
			
			Форма.Элементы.Переместить(ЭлементВиджета, Форма.Элементы["ГруппаЭлементыВиджетов"]);
		КонецЕсли;
		
		ДанныеВиджета.Скрыт = Ложь;
		
		Возврат ДанныеВиджета.ПолучитьИдентификатор();
		
	КонецЕсли;
	
	// --------------
	// Проверка на скрытые виджеты.
	//
	// Если есть скрытый виджет - то используем
	// его реквизит и элемент формы.
	
	ПараметрыПоиска = Новый Структура("Скрыт", Истина);
	НайденныеСтроки = Форма.ВариантыВиджетовФормы.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ДанныеВиджета = НайденныеСтроки[0];
		ДанныеВиджета.Скрыт = Ложь;
		
		ОбработатьБазовуюЗаписьОВиджете(Форма, ВариантВиджета, ДанныеВиджета);
		
		Если Форма.ВариантРаботыВиджетов = "РабочийСтол" Тогда
			
			ЭлементВиджета = Форма.Элементы[ДанныеВиджета.ИмяДанных];
			ЭлементВиджета.Видимость = Истина;
			
			Форма.Элементы.Переместить(ЭлементВиджета, Форма.Элементы["ГруппаЭлементыВиджетов"]);
			
		КонецЕсли;
		
		ИдентификаторСтрокиДанных = ДанныеВиджета.ПолучитьИдентификатор();
		
		ОбновитьВиджет(Форма, ИдентификаторСтрокиДанных);
		
		Возврат ИдентификаторСтрокиДанных;
		
	КонецЕсли;
	
	// --------------
	// Создание нового.
	
	Если Форма.ВариантРаботыВиджетов = "РабочийСтол" Тогда
		
		ПоследнийИндекс = ПолучитьМаксимальныйПорядокВиджетов(Форма);
		
		// --------------
		// Запись о виджете.
		
		ДанныеВиджета = ОбработатьБазовуюЗаписьОВиджете(Форма, ВариантВиджета);
		
		ДанныеВиджета.ИндексВертикальный	= ПоследнийИндекс + 1;
		ДанныеВиджета.ИмяДанных				= СтрШаблон("Виджет_%1", Форма.ВариантыВиджетовФормы.Количество());
		
		// --------------
		// Пометка использования.
		
		МенеджерЗаписи = РегистрыСведений.CRM_ПорядокВиджетов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ВариантРаботыВиджетов	= "РабочийСтол";
		МенеджерЗаписи.ВариантВиджета			= ВариантВиджета;
		МенеджерЗаписи.Пользователь				= Пользователи.ТекущийПользователь();
		МенеджерЗаписи.ИндексВертикальный		= Форма.ВариантыВиджетовФормы.Количество();
		МенеджерЗаписи.Записать(Истина);
		
		// --------------
		// Инициализация виджета.
		
		СоздатьРеквизитыВиджета(Форма, ДанныеВиджета);
		
		КлючевыеПоказатели_СоздатьВиджет(Форма, ДанныеВиджета, "ГруппаЭлементыВиджетов");
		
	ИначеЕсли Форма.ВариантРаботыВиджетов = "МониторРуководителя" Тогда
		
		// --------------
		// Запись о виджете.
		
		ДанныеВиджета = ОбработатьБазовуюЗаписьОВиджете(Форма, ВариантВиджета);
		ДанныеВиджета.ИмяДанных = СтрШаблон("Виджет_%1", Форма.ВариантыВиджетовФормы.Количество());
		
		// --------------
		// Инициализация виджета.
		
		СоздатьРеквизитыВиджета(Форма, ДанныеВиджета);
		
		ОбновитьВиджет(Форма, ДанныеВиджета.ПолучитьИдентификатор());
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
	Возврат ДанныеВиджета.ПолучитьИдентификатор();
	
КонецФункции // ДобавитьВиджет()

// Функция-обработчик автообновления виджетов.
// Анализирует виджеты, время которых пришло для обновления, обновляет виджеты.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - Форма, на которой будет добавляться виджет.
//
// Возвращаемое значение:
//   Массив  - Массив идентификаторов виджетов, которые были обновлены.
//
Функция ОбработатьАвтообновлениеВиджетов(Форма) Экспорт
	
	ОбновленныеВиджеты = Новый Массив;
	
	ТекущаяДатаОбновления = ТекущаяДатаСеанса();
	
	Для Каждого ТекущийВиджетОбновления Из Форма.ВариантыВиджетовФормы Цикл
		
		Если ТекущийВиджетОбновления.Скрыт Тогда
			Продолжить;
		КонецЕсли;
		
		ПлановаяДатаОбновленияВиджета = ТекущийВиджетОбновления.ПоследнееОбновлениеВиджета
			+ ТекущийВиджетОбновления.ПериодОбновления;
		
		Если ТекущаяДатаОбновления >= ПлановаяДатаОбновленияВиджета Тогда
			
			ОбновитьВиджет(Форма, ТекущийВиджетОбновления.ПолучитьИдентификатор());
			
			ТекущийВиджетОбновления.ПоследнееОбновлениеВиджета = ТекущаяДатаОбновления;
			
			ОбновленныеВиджеты.Добавить(ТекущийВиджетОбновления.ИмяДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбновленныеВиджеты;
	
КонецФункции // ОбработатьАвтообновлениеВиджетов()

// Процедура для удаления виджета на форме.
//
// Параметры:
//  Форма                      - ФормаКлиентскогоПриложения - Форма, на которой будет удаляться виджет.
//  ИдентификаторСтрокиДанных  - Строка                     - Идентификатор строки таблицы виджетов формы.
//                                                            Виджет, который будет удаляться на форме.
//
Процедура УдалитьВиджет(Форма, ИдентификаторСтрокиДанных) Экспорт
	
	ДанныеВиджета = Форма.ВариантыВиджетовФормы.НайтиПоИдентификатору(
		ИдентификаторСтрокиДанных);
	
	Если ДанныеВиджета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// --------------
	
	ДанныеВиджета.Скрыт = Истина;
	
	Если Форма.ВариантРаботыВиджетов = "РабочийСтол" Тогда
		
		МенеджерЗаписи = РегистрыСведений.CRM_ПорядокВиджетов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ВариантРаботыВиджетов	= "РабочийСтол";
		МенеджерЗаписи.ВариантВиджета			= ДанныеВиджета.ВариантВиджета;
		МенеджерЗаписи.Пользователь				= Пользователи.ТекущийПользователь();
		МенеджерЗаписи.Удалить();
		
		Форма.Элементы[ДанныеВиджета.ИмяДанных].Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УдалитьВиджет()

// Процедура для обновления содержимого виджета на форме.
//
// Параметры:
//  Форма                      - ФормаКлиентскогоПриложения - Форма, на которой будет обновляться виджет.
//  ИдентификаторСтрокиДанных  - Строка                     - Идентификатор строки таблицы виджетов формы.
//                                                            Виджет, который будет обновляться на форме.
//
Процедура ОбновитьВиджет(Форма, ИдентификаторСтрокиДанных) Экспорт
	
	ДанныеВиджета = Форма.ВариантыВиджетовФормы.НайтиПоИдентификатору(
		ИдентификаторСтрокиДанных);
	
	Если ДанныеВиджета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// --------------
	
	Если ДанныеВиджета.ТипВиджета = Перечисления.CRM_ТипыИсточниковДанныхВиджетов.КлючевойПоказатель Тогда
		
		КлючевыеПоказатели_ОбновитьВиджет(Форма, ДанныеВиджета);
		
	ИначеЕсли ДанныеВиджета.ТипВиджета = Перечисления.CRM_ТипыИсточниковДанныхВиджетов.ВоронкаПродаж Тогда
		
		ВоронкаПродаж_ОбновитьВиджет(Форма, ДанныеВиджета);
		
	ИначеЕсли ДанныеВиджета.ТипВиджета = Перечисления.CRM_ТипыИсточниковДанныхВиджетов.ДинамикаПродаж Тогда
		
		ДинамикаПродаж_ОбновитьВиджет(Форма, ДанныеВиджета);
		
	ИначеЕсли ДанныеВиджета.ТипВиджета = Перечисления.CRM_ТипыИсточниковДанныхВиджетов.ДебиторскаяЗадолженность Тогда
		
		ДебиторскаяЗадолженность_ОбновитьВиджет(Форма, ДанныеВиджета);
		
	ИначеЕсли ДанныеВиджета.ТипВиджета = Перечисления.CRM_ТипыИсточниковДанныхВиджетов.ДинамикаСтатусовКлиентов Тогда
		
		ДинамикаСтатусовКлиентов_ОбновитьВиджета(Форма, ДанныеВиджета);
		
	ИначеЕсли ДанныеВиджета.ТипВиджета = Перечисления.CRM_ТипыИсточниковДанныхВиджетов.СтатистикаТелефонныхЗвонков Тогда
		
		СтатистикаТелефонныхЗвонков_ОбновитьВиджета(Форма, ДанныеВиджета);
		
	ИначеЕсли ДанныеВиджета.ТипВиджета = Перечисления.CRM_ТипыИсточниковДанныхВиджетов.ТрудозатратыВремениПоВидамРабот Тогда
		
		ТрудозатратыВремениПоВидамРабот_ОбновитьВиджета(Форма, ДанныеВиджета);
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьВиджет()

// Процедура для обновления содержимого виджета всех виджетов на форме.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - Форма, на которой будут обновляться все виджеты.
//
Процедура ОбновитьВсеВиджеты(Форма) Экспорт
	
	Для Каждого ТекущийВиджетФормы Из Форма.ВариантыВиджетовФормы Цикл
		
		ОбновитьВиджет(Форма, ТекущийВиджетФормы.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьВсеВиджеты()

// --------------

// Используется для получения настроек варианта виджета.
//
// Параметры:
//  ВариантВиджета  - СправочникСсылка.CRM_ВариантыВиджетов - Вариант виджета, по которому
//                                                            необходимо получить настройки.
//
// Возвращаемое значение:
//   Структура | Неопределено  - Настройки варианта виджета.
//
Функция ПолучитьНастройкиВариантаВиджета(ВариантВиджета) Экспорт
	
	Возврат ВариантВиджета.НастройкиВарианта.Получить();
	
КонецФункции // ПолучитьНастройкиВариантаВиджета()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Процедура для создания необходимых реквизитов для работы механизма виджетов.
//
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - Форма, на которой будет удаляться виджет.
//  ВариантРаботыВиджетов  - Строка                     - Вариант работы виджетов.
//
Процедура ПриСозданииНаСервере(Форма, ВариантРаботыВиджетов) Экспорт
	
	МассивДобавляемыйРеквизитов = Новый Массив;
	
	///////////////////////////////////////////////
	// Создание необходимых реквизитов для работы с виджетами.
	
	// ВариантыВиджетовФормы
	НовыйРеквизитФормы = Новый РеквизитФормы(
		"ВариантыВиджетовФормы",
		Новый ОписаниеТипов("ТаблицаЗначений"));
	
	МассивДобавляемыйРеквизитов.Добавить(НовыйРеквизитФормы);
	
	// ВариантыВиджетовФормы.ВариантВиджета
	НовыйРеквизитФормы = Новый РеквизитФормы(
		"ВариантВиджета",
		Новый ОписаниеТипов("СправочникСсылка.CRM_ВариантыВиджетов"),
		"ВариантыВиджетовФормы");
	
	МассивДобавляемыйРеквизитов.Добавить(НовыйРеквизитФормы);
	
	// ВариантыВиджетовФормы.Виджет
	НовыйРеквизитФормы = Новый РеквизитФормы(
		"Виджет",
		Новый ОписаниеТипов("СправочникСсылка.CRM_Виджеты"),
		"ВариантыВиджетовФормы");
	
	МассивДобавляемыйРеквизитов.Добавить(НовыйРеквизитФормы);
	
	// ВариантыВиджетовФормы.ТипВиджета
	НовыйРеквизитФормы = Новый РеквизитФормы(
		"ТипВиджета",
		Новый ОписаниеТипов("ПеречислениеСсылка.CRM_ТипыИсточниковДанныхВиджетов"),
		"ВариантыВиджетовФормы");
	
	МассивДобавляемыйРеквизитов.Добавить(НовыйРеквизитФормы);
	
	// ВариантыВиджетовФормы.Переопределяемый
	НовыйРеквизитФормы = Новый РеквизитФормы(
		"Переопределяемый",
		Новый ОписаниеТипов("Булево"),
		"ВариантыВиджетовФормы");
	
	МассивДобавляемыйРеквизитов.Добавить(НовыйРеквизитФормы);
	
	// ВариантыВиджетовФормы.ИмяДанных
	НовыйРеквизитФормы = Новый РеквизитФормы(
		"ИмяДанных",
		Новый ОписаниеТипов("Строка"),
		"ВариантыВиджетовФормы");
	
	МассивДобавляемыйРеквизитов.Добавить(НовыйРеквизитФормы);
	
	// ВариантыВиджетовФормы.ИндексВертикальный
	НовыйРеквизитФормы = Новый РеквизитФормы(
		"ИндексВертикальный",
		Новый ОписаниеТипов("Число"),
		"ВариантыВиджетовФормы");
	
	МассивДобавляемыйРеквизитов.Добавить(НовыйРеквизитФормы);
	
	// ВариантыВиджетовФормы.ИндексГоризонтальный
	НовыйРеквизитФормы = Новый РеквизитФормы(
		"ИндексГоризонтальный",
		Новый ОписаниеТипов("Число"),
		"ВариантыВиджетовФормы");
	
	МассивДобавляемыйРеквизитов.Добавить(НовыйРеквизитФормы);
	
	// ВариантыВиджетовФормы.Настройки
	НовыйРеквизитФормы = Новый РеквизитФормы(
		"Настройки",
		Новый ОписаниеТипов(),
		"ВариантыВиджетовФормы");
	
	МассивДобавляемыйРеквизитов.Добавить(НовыйРеквизитФормы);
	
	// ВариантыВиджетовФормы.Контекст
	НовыйРеквизитФормы = Новый РеквизитФормы(
		"Контекст",
		Новый ОписаниеТипов(),
		"ВариантыВиджетовФормы");
	
	МассивДобавляемыйРеквизитов.Добавить(НовыйРеквизитФормы);
	
	// ВариантыВиджетовФормы.ПериодОбновления
	НовыйРеквизитФормы = Новый РеквизитФормы(
		"ПериодОбновления",
		Новый ОписаниеТипов("Число"),
		"ВариантыВиджетовФормы");
	
	МассивДобавляемыйРеквизитов.Добавить(НовыйРеквизитФормы);
	
	// ВариантыВиджетовФормы.ПоследнееОбновлениеВиджета
	НовыйРеквизитФормы = Новый РеквизитФормы(
		"ПоследнееОбновлениеВиджета",
		Новый ОписаниеТипов("Дата"),
		"ВариантыВиджетовФормы");
	
	МассивДобавляемыйРеквизитов.Добавить(НовыйРеквизитФормы);
	
	// ВариантыВиджетовФормы.Скрыт
	НовыйРеквизитФормы = Новый РеквизитФормы(
		"Скрыт",
		Новый ОписаниеТипов("Булево"),
		"ВариантыВиджетовФормы");
	
	МассивДобавляемыйРеквизитов.Добавить(НовыйРеквизитФормы);
	
	///////////////////////////////////////////////
	
	// ВариантРаботыВиджетов
	НовыйРеквизитФормы = Новый РеквизитФормы(
		"ВариантРаботыВиджетов",
		Новый ОписаниеТипов("Строка"));
	
	МассивДобавляемыйРеквизитов.Добавить(НовыйРеквизитФормы);
	
	///////////////////////////////////////////////
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыйРеквизитов);
	
	///////////////////////////////////////////////
	// Получение вариантов виджетов для формы.
	
	ПользовательОтбора = Пользователи.ТекущийПользователь();
	
	Если ВариантРаботыВиджетов = "РабочийСтол" Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	CRM_ПорядокВиджетов.ВариантВиджета КАК ВариантВиджета,
			|	CRM_ПорядокВиджетов.ВариантВиджета.Виджет КАК Виджет,
			|	CRM_ПорядокВиджетов.ВариантВиджета.Виджет.ТипИсточникаДанных КАК ТипВиджета,
			|	CRM_ПорядокВиджетов.ВариантВиджета.НастройкиВарианта КАК НастройкиВарианта,
			|	CRM_ПорядокВиджетов.ВариантВиджета.ПериодОбновления КАК ПериодОбновления,
			|	CRM_ПорядокВиджетов.ИндексВертикальный КАК ИндексВертикальный,
			|	CRM_ПорядокВиджетов.ИндексГоризонтальный КАК ИндексГоризонтальный
			|ИЗ
			|	РегистрСведений.CRM_ПорядокВиджетов КАК CRM_ПорядокВиджетов
			|ГДЕ
			|	CRM_ПорядокВиджетов.Пользователь = &Пользователь
			|	И CRM_ПорядокВиджетов.ВариантВиджета.Используется = ИСТИНА
			|	И CRM_ПорядокВиджетов.ВариантРаботыВиджетов = ""РабочийСтол""
			|
			|УПОРЯДОЧИТЬ ПО
			|	CRM_ПорядокВиджетов.ИндексВертикальный");
		
		Запрос.УстановитьПараметр("Пользователь", ПользовательОтбора);
		
	ИначеЕсли ВариантРаботыВиджетов = "МониторРуководителя" Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	CRM_ПорядокВиджетов.ВариантВиджета КАК ВариантВиджета,
			|	CRM_ПорядокВиджетов.ВариантВиджета.Виджет КАК Виджет,
			|	CRM_ПорядокВиджетов.ВариантВиджета.Виджет.ТипИсточникаДанных КАК ТипВиджета,
			|	CRM_ПорядокВиджетов.ВариантВиджета.НастройкиВарианта КАК НастройкиВарианта,
			|	CRM_ПорядокВиджетов.ВариантВиджета.ПериодОбновления КАК ПериодОбновления,
			|	CRM_ПорядокВиджетов.ИндексВертикальный КАК ИндексВертикальный,
			|	CRM_ПорядокВиджетов.ИндексГоризонтальный КАК ИндексГоризонтальный
			|ИЗ
			|	РегистрСведений.CRM_ПорядокВиджетов КАК CRM_ПорядокВиджетов
			|ГДЕ
			|	CRM_ПорядокВиджетов.Пользователь = &Пользователь
			|	И CRM_ПорядокВиджетов.ВариантВиджета.Используется = ИСТИНА
			|	И CRM_ПорядокВиджетов.ВариантРаботыВиджетов = ""МониторРуководителя""");
		
		Запрос.УстановитьПараметр("Пользователь", ПользовательОтбора);
		
	КонецЕсли;
	
	///////////////////////////////////////////////
	// Заполнение созданных реквизитов для работы с виджетами.
	
	ТекущаяДатаОбновленияВиджета = ТекущаяДатаСеанса();
	
	ВыборкаВиджетов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаВиджетов.Следующий() Цикл
		
		НоваяСтрока = Форма.ВариантыВиджетовФормы.Добавить();
		
		НоваяСтрока.ВариантВиджета		= ВыборкаВиджетов.ВариантВиджета;
		НоваяСтрока.Виджет				= ВыборкаВиджетов.Виджет;
		НоваяСтрока.ТипВиджета			= ВыборкаВиджетов.ТипВиджета;
		НоваяСтрока.Настройки			= ВыборкаВиджетов.НастройкиВарианта.Получить();
		НоваяСтрока.Переопределяемый	= ЭтоПереопределяемыйВиджет(ВыборкаВиджетов.Виджет);
		НоваяСтрока.ИмяДанных			= СтрШаблон("Виджет_%1", Форма.ВариантыВиджетовФормы.Количество());
		
		НоваяСтрока.ИндексВертикальный		= ВыборкаВиджетов.ИндексВертикальный;
		НоваяСтрока.ИндексГоризонтальный	= ВыборкаВиджетов.ИндексГоризонтальный;
		
		НоваяСтрока.ПериодОбновления			= ВыборкаВиджетов.ПериодОбновления;
		НоваяСтрока.ПоследнееОбновлениеВиджета	= ТекущаяДатаОбновленияВиджета;
		
		// --------------
		
		СоздатьРеквизитыВиджета(Форма, НоваяСтрока);
		
		// --------------
		
		Если ВариантРаботыВиджетов = "РабочийСтол" Тогда
			
			КлючевыеПоказатели_СоздатьВиджет(Форма, НоваяСтрока, "ГруппаЭлементыВиджетов");
			
		ИначеЕсли ВариантРаботыВиджетов = "МониторРуководителя" Тогда
			
			Форма[НоваяСтрока.ИмяДанных] = ПолучитьСодержимоеHTMLВиджета(НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	///////////////////////////////////////////////
	
	Форма.ВариантРаботыВиджетов = ВариантРаботыВиджетов;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Функция для определения переопределяемого виджета.
//
// Параметры:
//  Виджет  - СправочникСсылка.CRM_Виджеты - Виджет для определения, переопределяемый ли он.
//
// Возвращаемое значение:
//   Булево  - Признак переопределяемого виджета.
//
Функция ЭтоПереопределяемыйВиджет(Виджет) Экспорт
	
	Возврат (Справочники.CRM_Виджеты.ПолучитьПереопределяемыеВиджеты().Найти(Виджет) <> Неопределено);
	
КонецФункции // ЭтоПереопределяемыйВиджет()

// Функция для содержимого виджета HTML.
//
// Параметры:
//  ДанныеВиджета  - ДанныеФормыКоллекции - данные виджета для получения его содержимого.
//
// Возвращаемое значение:
//   Строка  - Содержимое виджета.
//
Функция ПолучитьСодержимоеHTMLВиджета(ДанныеВиджета) Экспорт
	
	///////////////////////////////////////////////
	// Проверка наличия настроек виджета.
	
	НастройкиВиджета = ДанныеВиджета.Настройки;
	
	Если НастройкиВиджета = Неопределено Тогда
		Возврат ПолучитьHTMLПустогоВиджета(
			ДанныеВиджета, "Нет настроек виджета");
	КонецЕсли;
	
	///////////////////////////////////////////////
	// Получение верстки.
	
	ВерсткаHTML = "";
	
	Если ДанныеВиджета.ТипВиджета = Перечисления.CRM_ТипыИсточниковДанныхВиджетов.КлючевойПоказатель Тогда
		
		ВерсткаHTML = ?(
			ДанныеВиджета.Переопределяемый,
			КлючевыеПоказатели_ПолучитьСодержимоеHTMLПереопределяемогоВиджета(ДанныеВиджета),
			КлючевыеПоказатели_ПолучитьСодержимоеHTMLВиджета(ДанныеВиджета));
		
	ИначеЕсли ДанныеВиджета.ТипВиджета = Перечисления.CRM_ТипыИсточниковДанныхВиджетов.ВоронкаПродаж Тогда
		
		ВерсткаHTML = ВоронкаПродаж_ПолучитьСодержимоеHTMLВиджета(ДанныеВиджета);
		
	ИначеЕсли ДанныеВиджета.ТипВиджета = Перечисления.CRM_ТипыИсточниковДанныхВиджетов.ДинамикаПродаж Тогда
		
		ВерсткаHTML = ДинамикаПродаж_ПолучитьСодержимоеHTMLВиджета(ДанныеВиджета);
		
	ИначеЕсли ДанныеВиджета.ТипВиджета = Перечисления.CRM_ТипыИсточниковДанныхВиджетов.ДебиторскаяЗадолженность Тогда
		
		ВерсткаHTML = ДебиторскаяЗадолженность_ПолучитьСодержимоеHTMLВиджета(ДанныеВиджета);
		
	ИначеЕсли ДанныеВиджета.ТипВиджета = Перечисления.CRM_ТипыИсточниковДанныхВиджетов.ДинамикаСтатусовКлиентов Тогда
		
		ВерсткаHTML = ДинамикаСтатусовКлиентов_ПолучитьСодержимоеHTMLВиджета(ДанныеВиджета);
		
	ИначеЕсли ДанныеВиджета.ТипВиджета = Перечисления.CRM_ТипыИсточниковДанныхВиджетов.СтатистикаТелефонныхЗвонков Тогда
		
		ВерсткаHTML = СтатистикаТелефонныхЗвонков_ПолучитьСодержимоеHTMLВиджета(ДанныеВиджета);
		
	ИначеЕсли ДанныеВиджета.ТипВиджета = Перечисления.CRM_ТипыИсточниковДанныхВиджетов.ТрудозатратыВремениПоВидамРабот Тогда
		
		ВерсткаHTML = ТрудозатратыВремениПоВидамРабот_ПолучитьСодержимоеHTMLВиджета(ДанныеВиджета);
		
	КонецЕсли;
	
	ВерсткаHTML = СтрЗаменить(ВерсткаHTML, "{{CRM:WIDGET_ID}}", ДанныеВиджета.ИмяДанных);
	
	Возврат ВерсткаHTML;
	
КонецФункции // ПолучитьСодержимоеHTMLВиджета()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

// Процедура для создания необходимым реквизитов для виджета.
//
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - Форма, в которой идет работа с виджетами.
//  ДанныеВиджета  - ДанныеФормыКоллекция       - Данные виджета, по которому будут создаваться реквизиты.
//
Процедура СоздатьРеквизитыВиджета(Форма, ДанныеВиджета)
	
	ПрефиксВиджета = ДанныеВиджета.ИмяДанных + "_";
	
	///////////////////////////////////////////////
	
	// ВариантРаботыВиджетов
	НовыйРеквизитФормы = Новый РеквизитФормы(
		ДанныеВиджета.ИмяДанных,
		Новый ОписаниеТипов("Строка"));
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизитФормы);
	
	///////////////////////////////////////////////
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
КонецПроцедуры // СоздатьРеквизитыВиджета()

// Функция для создания и заполнения записи о виджете стандартными данными.
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения            - Форма, в которой идет работа с виджетами.
//  ВариантВиджета  - СправочникСсылка.CRM_ВариантыВиджетов - Вариант виджета для которого делается запись.
//  ДанныеСтроки    - ДанныеФормыКоллекция                  - Базовая запись, если создана заранее.
//
// Возвращаемое значение:
//   ДанныеФормыКоллекция  - Обработанная запись о виджете.
//
Функция ОбработатьБазовуюЗаписьОВиджете(Форма, ВариантВиджета, ДанныеСтроки = Неопределено)
	
	Если ДанныеСтроки = Неопределено Тогда
		НоваяСтрока = Форма.ВариантыВиджетовФормы.Добавить();
	Иначе
		НоваяСтрока = ДанныеСтроки;
	КонецЕсли;
	
	НоваяСтрока.ВариантВиджета		= ВариантВиджета.Ссылка;
	НоваяСтрока.Виджет				= ВариантВиджета.Виджет;
	НоваяСтрока.ТипВиджета			= ВариантВиджета.Виджет.ТипИсточникаДанных;
	НоваяСтрока.Настройки			= ВариантВиджета.НастройкиВарианта.Получить();
	НоваяСтрока.Переопределяемый	= ЭтоПереопределяемыйВиджет(ВариантВиджета.Виджет);
	
	НоваяСтрока.ПериодОбновления			= ВариантВиджета.ПериодОбновления;
	НоваяСтрока.ПоследнееОбновлениеВиджета	= ТекущаяДатаСеанса();
	
	// --------------
	
	Возврат НоваяСтрока;
	
КонецФункции // ОбработатьБазовуюЗаписьОВиджете()

// Функция для получения HTML верстки пустого виджета.
//
// Параметры:
//  ДанныеВиджета  - ДанныеФормыКоллекция - Данные виджета, по которому будет получать верстку HTML.
//  Сообщение      - Строка               - Сообщение пустого виджета в верстке.
//
// Возвращаемое значение:
//   Строка  - Верстка HTML виджета.
//
Функция ПолучитьHTMLПустогоВиджета(ДанныеВиджета, Сообщение)
	
	HTMLСообщение =
		"<table height=""100%"" width=""100%""><tr><td style=""text-align: center; color: #687583; font-size: 12px;"">
		|	" + Сообщение + "
		|</tr></td></table>";
	
	HTMLВиджета = Справочники.CRM_Виджеты.ПолучитьМакет("HTML_ВиджетТело").ПолучитьТекст();
	
	HTMLВиджета = СтрЗаменить(HTMLВиджета, "{{CRM:WIDGET_TITLE}}", Строка(ДанныеВиджета.ВариантВиджета));
	HTMLВиджета = СтрЗаменить(HTMLВиджета, "{{CRM:WIDGET_CONTENT}}", HTMLСообщение);
	
	// Скрыть кнопку "Подробнее".
	Если ДанныеВиджета.Виджет = Справочники.CRM_Виджеты.СтатистикаТелефонныхЗвонков Тогда
		HTMLТелоВиджета = СтрЗаменить(HTMLТелоВиджета, "class=""widget-block-footer""", "class=""hidden""");
	КонецЕсли;
	
	Возврат HTMLВиджета;
	
КонецФункции // ПолучитьHTMLПустогоВиджета()

// Функция для оборачивания содержимого виджета в базовую верстку виджета.
//
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - Форма, в которой идет работа с виджетами.
//  HTMLСодержаниеВиджета  - Строка                     - HTML верстка содержимого виджета.
//
// Возвращаемое значение:
//   Строка  - Полная верстка виджета HTML.
//
Функция ОбернутьСодержимоеHTMLВВерсткуВиджета(Форма, HTMLСодержаниеВиджета)
	
	/////////////////////////////
	// Верстка.
	
	HTMLВиджета = Справочники.CRM_Виджеты.ПолучитьМакет("HTML_Виджет").ПолучитьТекст();
	HTMLВиджета = СтрЗаменить(HTMLВиджета, "{{CRM::WIDGET_BODY}}", HTMLСодержаниеВиджета);
	
	/////////////////////////////
	// Внешние библиотеки - вставка скриптов.
	
	Если Форма.ВариантРаботыВиджетов <> "МониторРуководителя" Тогда
		
		HTMLСкриптИнтеграцииБиблиотеки = CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ПолучитьБлокИнтеграцииВнешнейБиблиотеки(
			Справочники.CRM_ВнешниеБиблиотеки.БиблиотекаОтображенияГрафиков, Форма.ФлагСовместимостиВнешнихБиблиотек);
		
		HTMLВиджета = СтрЗаменить(HTMLВиджета, "<!-- {{CRM:PATH_TO_LIBRARY}} -->", HTMLСкриптИнтеграцииБиблиотеки);
		
		/////////////////////////////
		// Скрипт диаграмм.
		
		СкриптПостроенияДиаграммHTML = Справочники.CRM_Виджеты.ПолучитьМакет("HTML_Диаграммы").ПолучитьТекст();
		СкриптПостроенияДиаграммHTML = СтрЗаменить(
			СкриптПостроенияДиаграммHTML, "<CRM::CURRENT_CURRENCY>", Строка(Константы.ВалютаУправленческогоУчета.Получить()));
		
		HTMLВиджета = СтрЗаменить(HTMLВиджета, "<!-- {{CRM:PLOT_SCRIPT}} -->", СкриптПостроенияДиаграммHTML);
		
		HTMLВиджета = CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ЗаменитьПутиВызоваБиблиотек(
			Форма.ИсточникиВнешнихБиблиотек, HTMLВиджета);
		
	КонецЕсли;
	
	Возврат HTMLВиджета;
	
КонецФункции // ОбернутьСодержимоеHTMLВВерсткуВиджета()

// Функция для получение максимального индекса виджета. Применяется для виджетов ключевых показателей в режим <РабочийСтол>.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - Форма, в которой идет работа с виджетами.
//
// Возвращаемое значение:
//   Число  - Максимальный вертикальный индекс виджета.
//
Функция ПолучитьМаксимальныйПорядокВиджетов(Форма)
	
	Если Форма.ВариантыВиджетовФормы.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Форма.ВариантыВиджетовФормы.Сортировать("ИндексВертикальный");
	
	ПоследняяСтрокаТаблицы = Форма.ВариантыВиджетовФормы[Форма.ВариантыВиджетовФормы.Количество() - 1];
	
	Возврат ПоследняяСтрокаТаблицы.ИндексВертикальный;
	
КонецФункции // ПолучитьМаксимальныйПорядокВиджетов()

// --------------

#Область КлючевыеПоказатели

// Процедура для создания виджета по ключевым показателям.
//
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - Форма, в которой идет работа с виджетами.
//  ДанныеВиджета  - ДанныеФормыКоллекция       - Данные виджета, по которому будет создаваться виджет.
//  ГруппаВиджета  - Строка                     - Группа, куда будет создаваться виджет.
//
Процедура КлючевыеПоказатели_СоздатьВиджет(Форма, ДанныеВиджета, ГруппаВиджета)
	
	///////////////////////////////////////////////
	// Тело виджета.
	
	НовыйЭлемент = Форма.Элементы.Добавить(
		ДанныеВиджета.ИмяДанных,
		Тип("ПолеФормы"),
		Форма.Элементы[ГруппаВиджета]);
	
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеHTMLДокумента;
	НовыйЭлемент.Высота = 6;
	НовыйЭлемент.Ширина = 25;
	НовыйЭлемент.РастягиватьПоВертикали = Ложь;
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	НовыйЭлемент.ПутьКДанным = ДанныеВиджета.ИмяДанных;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.ЦветРамки = ЦветаСтиля.CRM_СерыйДляПодложек;
	НовыйЭлемент.УстановитьДействие("ПриНажатии", "Подключаемый_HTMLВиджетаПриНажатии");
	
	///////////////////////////////////////////////
	// Инициализация виджета.
	
	КлючевыеПоказатели_ОбновитьВиджет(Форма, ДанныеВиджета);
	
КонецПроцедуры // КлючевыеПоказатели_СоздатьВиджет()

// Процедура для обновления виджета по ключевым показателям.
//
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - Форма, в которой идет работа с виджетами.
//  ДанныеВиджета  - ДанныеФормыКоллекция       - Данные виджета, по которым будет обновляться виджет.
//
Процедура КлючевыеПоказатели_ОбновитьВиджет(Форма, ДанныеВиджета)
	
	Форма[ДанныеВиджета.ИмяДанных] = ПолучитьСодержимоеHTMLВиджета(ДанныеВиджета);
	
	Если Форма.ВариантРаботыВиджетов <> "МониторРуководителя" Тогда
		
		Форма[ДанныеВиджета.ИмяДанных] = ОбернутьСодержимоеHTMLВВерсткуВиджета(
			Форма, Форма[ДанныеВиджета.ИмяДанных]);
		
	КонецЕсли;
	
КонецПроцедуры // КлючевыеПоказатели_ОбновитьВиджет()

// Функция для получения содержимого виджета версткой HTML.
//
// Параметры:
//  ДанныеВиджета  - ДанныеФормыКоллекция - Данные виджета для получения верстки.
//
// Возвращаемое значение:
//   Строка  - Содержимое HTML виджета.
//
Функция КлючевыеПоказатели_ПолучитьСодержимоеHTMLВиджета(ДанныеВиджета)
	
	НастройкиВиджета = ДанныеВиджета.Настройки;
	
	Если НастройкиВиджета = Неопределено Тогда
		Возврат ПолучитьHTMLПустогоВиджета(
			ДанныеВиджета, "Нет настроек виджета");
	КонецЕсли;
	
	КлючевойПоказательВиджета = ДанныеВиджета.Виджет.КлючевойПоказатель;
	
	ЕдиницаВиджета				= КлючевойПоказательВиджета.ЕдиницаИзмерения;
	КонтролируемыйПоказатель	= КлючевойПоказательВиджета.КонтролируемыйПоказатель;
	
	Если КонтролируемыйПоказатель = "" Тогда
		Возврат ПолучитьHTMLПустогоВиджета(
			ДанныеВиджета, "Нет контрольного показателя виджета");
	КонецЕсли;
	
	///////////////////////////////////////////////
	// Параметры отбора данных.
	
	ЗначениеАналитики = CRM_РаботаСВиджетамиКлиентСервер.ПолучитьАктуальноеЗначениеАналитики(НастройкиВиджета);
	
	Если НастройкиВиджета.ТипАналитики = Перечисления.CRM_ВидыРазверткиПоказателей.ПоМенеджеру Тогда
		Менеджер = ЗначениеАналитики;
	ИначеЕсли НастройкиВиджета.ТипАналитики = Перечисления.CRM_ВидыРазверткиПоказателей.ПоПодразделению Тогда
		Подразделение = ЗначениеАналитики;
	КонецЕсли;
	
	ТекущийПользователь		= Пользователи.ТекущийПользователь();
	ДатаРасчетаПоказателя	= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	
	///////////////////////////////////////////////
	// Данные для виджета.
	
	ТаблицаФакт = CRM_УправлениеЦелевымиПоказателямиСервер.ПолучитьТаблицуПоказателя(
		КлючевойПоказательВиджета,
		ДатаРасчетаПоказателя,
		Менеджер,
		Подразделение,
		Истина);
	
	ТаблицаПлан = CRM_УправлениеЦелевымиПоказателямиСервер.ПолучитьТаблицуПланаПоказателя(
		КлючевойПоказательВиджета,
		ДатаРасчетаПоказателя,
		Менеджер,
		Подразделение,
		Ложь);
	
	ПланНеУстановлен = (ТаблицаПлан.Количество() = 0);
	
	///////////////////////////////////////////////
	// Подсчет данных.
	
	ОбщийПоказательПроцент	= 0;
	ОбщийПоказательФакт		= 0;
	
	Если ТаблицаФакт.Колонки.Найти(КонтролируемыйПоказатель) = Неопределено Тогда
		
		ЦветПоказателя = 0;
		
		ЗначениеФакт = 0;
		ЗначениеПлан = 0;
		
		ДинамикаПоказателя = Новый Структура();
		ДинамикаПоказателя.Вставить("Тренд", 0);
		
	Иначе
		
		// Проверка на отображение по "По подразделению" или "По компании в целом".
		ВозможностьПодсчетаСреднего = (НастройкиВиджета.ТипАналитики = Перечисления.CRM_ВидыРазверткиПоказателей.ПоПодразделению
			Или НастройкиВиджета.ТипАналитики = Перечисления.CRM_ВидыРазверткиПоказателей.ПоВсейКомпании);
		
		ИспользуемыйМетодГруппировкиПоказателя = КлючевойПоказательВиджета.МетодГруппировкиЗначений;
		
		ИспользоватьСреднее = (ВозможностьПодсчетаСреднего
			И ИспользуемыйМетодГруппировкиПоказателя = Перечисления.CRM_МетодыГруппировкиЗначенийПоказателей.Среднее);
		
		// --------------
		
		// Если выбран вариант подсчета через среднее, тогда считаем по количество выбранных строк (менеджеров).
		// Количество менеджеров = количество планов показателей.
		Если ИспользоватьСреднее Тогда
			КоличествоДляСреднегоПлан = ?(ТаблицаПлан.Количество() > 0, ТаблицаПлан.Количество(), 1);
			КоличествоДляСреднегоФакт = ?(ТаблицаФакт.Количество() > 0, ТаблицаФакт.Количество(), 1);
			
			ЗначениеПлан = ТаблицаПлан.Итог("ЗначениеПоказателя") / КоличествоДляСреднегоПлан;
			ЗначениеФакт = ТаблицаФакт.Итог(КонтролируемыйПоказатель) / КоличествоДляСреднегоФакт;
		Иначе
			ЗначениеПлан = ТаблицаПлан.Итог("ЗначениеПоказателя");
			ЗначениеФакт = ТаблицаФакт.Итог(КонтролируемыйПоказатель);
		КонецЕсли;
		
		// --------------
		
		ЦветПоказателя = CRM_УправлениеЦелевымиПоказателямиСервер.ПолучитьЦветПоказателя(
			КлючевойПоказательВиджета,
			ДатаРасчетаПоказателя,
			ТекущийПользователь,
			Неопределено,
			ТаблицаФакт);
		
		ДинамикаПоказателя = CRM_УправлениеЦелевымиПоказателямиСервер.ПолучитьДинамикуПоказателя(
			КлючевойПоказательВиджета,
			ДатаРасчетаПоказателя,
			ТекущийПользователь);
		
		// --------------
		
		Если НастройкиВиджета.ОтображатьОбщиеРезультаты Тогда
			
			// Если ранее данные были не по компании в целом, получаем по компании для отображения общих итогов.
			Если НастройкиВиджета.ТипАналитики <> Перечисления.CRM_ВидыРазверткиПоказателей.ПоВсейКомпании Тогда
				ТаблицаФакт = CRM_УправлениеЦелевымиПоказателямиСервер.ПолучитьТаблицуПоказателя(
					КлючевойПоказательВиджета,
					ДатаРасчетаПоказателя,
					Неопределено,
					Неопределено,
					Истина);
				
				ТаблицаПлан = CRM_УправлениеЦелевымиПоказателямиСервер.ПолучитьТаблицуПланаПоказателя(
					КлючевойПоказательВиджета,
					ДатаРасчетаПоказателя,
					Неопределено,
					Неопределено,
					Ложь);
			КонецЕсли;
			
			// При общих результатах на выбранный вариант отображения не смотрим.
			Если ИспользуемыйМетодГруппировкиПоказателя = Перечисления.CRM_МетодыГруппировкиЗначенийПоказателей.Среднее Тогда
				КоличествоДляСреднегоПлан = ?(ТаблицаПлан.Количество() > 0, ТаблицаПлан.Количество(), 1);
				КоличествоДляСреднегоФакт = ?(ТаблицаФакт.Количество() > 0, ТаблицаФакт.Количество(), 1);
				
				ОбщийПоказательПлан = ТаблицаПлан.Итог("ЗначениеПоказателя") / КоличествоДляСреднегоПлан;
				ОбщийПоказательФакт = ТаблицаФакт.Итог(КонтролируемыйПоказатель) / КоличествоДляСреднегоФакт;
			Иначе
				ОбщийПоказательПлан = ТаблицаПлан.Итог("ЗначениеПоказателя");
				ОбщийПоказательФакт = ТаблицаФакт.Итог(КонтролируемыйПоказатель);
			КонецЕсли;
			
			ОбщийПоказательПроцент = ?(ОбщийПоказательПлан <> 0, ОбщийПоказательФакт / ОбщийПоказательПлан, 0) * 100;
			
		КонецЕсли;
		
	КонецЕсли;
	
	///////////////////////////////////////////////
	// Формирование HTML виджета.
	
	РезультатОкругленияФакт = ОкруглитьЗначениеДляВиджета(
		ЗначениеФакт);
	
	РезультатОкругленияПлан = ОкруглитьЗначениеДляВиджета(
		ЗначениеПлан, РезультатОкругленияФакт.ДлинаЗначения);
	
	РезультатОкругленияОбщий = ОкруглитьЗначениеДляВиджета(
		ОбщийПоказательФакт);
	
	// --------------
	
	ЕдиницаФорматированная = ?(
		ЕдиницаВиджета <> "",
		" " + Лев(ЕдиницаВиджета, 3) + ".",
		"");
	
	ЕдиницаФорматированная = НРег(ЕдиницаФорматированная);
	
	ВставляемоеЗначениеПорядка = ?(
		РезультатОкругленияФакт.ЗначениеПорядок <> "",
		РезультатОкругленияФакт.ЗначениеПорядок + ".",
		"");
	
	ЕдиницаИзмеренияСтрокой = ВставляемоеЗначениеПорядка + ЕдиницаФорматированная;
	
	// --------------
	
	ВыбранныйСтильДинамикиПоказателя = "hidden";
	
	Если Не ПланНеУстановлен Тогда
		
		Если ДинамикаПоказателя.Тренд = -1 Тогда
			ВыбранныйСтильДинамикиПоказателя = "widget-plan-dynamic__down";
		ИначеЕсли ДинамикаПоказателя.Тренд = 0 Тогда
			ВыбранныйСтильДинамикиПоказателя = "widget-plan-dynamic__flat";
		ИначеЕсли ДинамикаПоказателя.Тренд = 1 Тогда
			ВыбранныйСтильДинамикиПоказателя = "widget-plan-dynamic__up";
		КонецЕсли;
		
	КонецЕсли;
	
	// --------------
	
	Если НастройкиВиджета.ОтображатьОбщиеРезультаты Тогда
		Если ОбщийПоказательПроцент < 50 Тогда
			ИндексЦвета = 0;
		ИначеЕсли ОбщийПоказательПроцент < 100 Тогда
			ИндексЦвета = 1;
		Иначе
			ИндексЦвета = 2;
		КонецЕсли;
		
		ВставляемоеЗначениеПорядка = ?(
			РезультатОкругленияОбщий.ЗначениеПорядок <> "",
			РезультатОкругленияОбщий.ЗначениеПорядок + ".",
			"");
		
		ОбщийПланКомпанииСтрокой = РезультатОкругленияОбщий.ЗначениеСтрокой + " " + ВставляемоеЗначениеПорядка;
		ОбщийПланКомпанииПроцентСтрокой = Формат(ОбщийПоказательПроцент, "ЧДЦ=2; ЧРД=,; ЧН=0; ЧГ=0");
		
		ЦветПланаКомпании = ПолучитьЦветТренда(ИндексЦвета);
	КонецЕсли;
	
	// --------------
	
	СтильОтображенияПлановогоЗначения	= ?(НастройкиВиджета.ОтображатьПлановыеЗначения, "", "hidden");
	СтильОтображенияОбщихРезультатов	= ?(НастройкиВиджета.ОтображатьОбщиеРезультаты, "", "hidden");
	
	///////////////////////////////////////////////
	// Содержимое верстки виджета.
	
	HTMLСодержаниеВиджета = Справочники.CRM_Виджеты.ПолучитьМакет("HTML_КлючевойПоказатель").ПолучитьТекст();
	
	// Фактические значения виджета.
	HTMLСодержаниеВиджета = СтрЗаменить(HTMLСодержаниеВиджета, "{{CRM:WIDGET_FACT_VALUE}}",	РезультатОкругленияФакт.ЗначениеСтрокой);
	HTMLСодержаниеВиджета = СтрЗаменить(HTMLСодержаниеВиджета, "{{CRM:WIDGET_DYNAMIC}}",	ВыбранныйСтильДинамикиПоказателя);
	
	// Цвета.
	HTMLСодержаниеВиджета = СтрЗаменить(HTMLСодержаниеВиджета, "{{CRM:WIDGET_FACT_COLOR}}",		ПолучитьЦветТренда(?(ПланНеУстановлен, -1, ЦветПоказателя)));
	HTMLСодержаниеВиджета = СтрЗаменить(HTMLСодержаниеВиджета, "{{CRM:DYNAMIC_LINE_COLOR}}",	ЦветПланаКомпании);
	
	// Плановое значение.
	HTMLСодержаниеВиджета = СтрЗаменить(HTMLСодержаниеВиджета, "{{CRM:WIDGET_PLAN_FLAG}}",	СтильОтображенияПлановогоЗначения);
	HTMLСодержаниеВиджета = СтрЗаменить(HTMLСодержаниеВиджета, "{{CRM:WIDGET_PLAN_VALUE}}",	РезультатОкругленияПлан.ЗначениеСтрокой);
	
	// Общие результаты.
	HTMLСодержаниеВиджета = СтрЗаменить(HTMLСодержаниеВиджета, "{{CRM:WIDGET_COMPANY_FLAG}}",		СтильОтображенияОбщихРезультатов);
	HTMLСодержаниеВиджета = СтрЗаменить(HTMLСодержаниеВиджета, "{{CRM:WIDGET_COMPANY_VALUE}}",		ОбщийПланКомпанииСтрокой);
	HTMLСодержаниеВиджета = СтрЗаменить(HTMLСодержаниеВиджета, "{{CRM:WIDGET_COMPANY_VALUE_PER}}",	ОбщийПланКомпанииПроцентСтрокой);
	
	// Тело виджета.
	HTMLТелоВиджета = Справочники.CRM_Виджеты.ПолучитьМакет("HTML_ВиджетТело").ПолучитьТекст();
	HTMLТелоВиджета = СтрЗаменить(HTMLТелоВиджета, "{{CRM:WIDGET_TITLE}}",		Строка(ДанныеВиджета.ВариантВиджета));
	HTMLТелоВиджета = СтрЗаменить(HTMLТелоВиджета, "{{CRM:WIDGET_CONTENT}}",	HTMLСодержаниеВиджета);
	
	Возврат HTMLТелоВиджета;
	
КонецФункции // КлючевыеПоказатели_ПолучитьСодержимоеHTMLВиджета()

#Область ПереопределяемыеВиджеты

// Процедура для добавления данных диаграммы HTML виджета плана продаж.
//
// Параметры:
//  Данные     - Массив - Данные диаграммы.
//  Заголовок  - Строка - Наименование данных.
//  Значение   - Число  - Значение данных.
//
Процедура КлючевыеПоказатели_ДобавитьДанныеДиаграммыHTMLПланаПродаж(Данные, Заголовок, Значение)
	
	НоваяТочкаДиаграммы = Новый Структура;
	НоваяТочкаДиаграммы.Вставить("title", Заголовок);
	НоваяТочкаДиаграммы.Вставить("value", Значение);
	
	Данные.Добавить(НоваяТочкаДиаграммы);
	
КонецПроцедуры // ДобавитьДанныеДиаграммыHTMLПланаПродаж()

// Функция для получения содержимого виджета версткой HTML.
//
// Параметры:
//  ДанныеВиджета  - ДанныеФормыКоллекция - Данные виджета для получения верстки.
//
// Возвращаемое значение:
//   Строка  - Содержимое HTML виджета.
//
Функция КлючевыеПоказатели_ПолучитьСодержимоеHTMLПереопределяемогоВиджета(ДанныеВиджета)
	
	НастройкиВиджета = ДанныеВиджета.Настройки;
	
	Если НастройкиВиджета = Неопределено Тогда
		Возврат ПолучитьHTMLПустогоВиджета(
			ДанныеВиджета, "Нет настроек виджета");
	КонецЕсли;
	
	Если ДанныеВиджета.Виджет = Справочники.CRM_Виджеты.ВыполнениеПланаПродаж
			Или ДанныеВиджета.Виджет = Справочники.CRM_Виджеты.ВыполнениеПланаПродажКол Тогда
		
		/////////////////////////////
		// Данные виджета
		
		ЗначениеАналитики = CRM_РаботаСВиджетамиКлиентСервер.ПолучитьАктуальноеЗначениеАналитики(НастройкиВиджета);
		
		Если НастройкиВиджета.ТипАналитики = Перечисления.CRM_ВидыРазверткиПоказателей.ПоМенеджеру Тогда
			Менеджер = ЗначениеАналитики;
		ИначеЕсли НастройкиВиджета.ТипАналитики = Перечисления.CRM_ВидыРазверткиПоказателей.ПоПодразделению Тогда
			Подразделение = ЗначениеАналитики;
		КонецЕсли;
		
		ДанныеПланаПродаж = КлючевыеПоказатели_ДанныеВиджетаПланПродаж(
			ДанныеВиджета.Виджет, Подразделение, Менеджер, НастройкиВиджета);
		
		ЕстьДанныеДиаграммы = Не ДанныеПланаПродаж.Свойство("Сообщение");
		
		Если Не ЕстьДанныеДиаграммы Тогда
			Возврат ПолучитьHTMLПустогоВиджета(
				ДанныеВиджета, ДанныеПланаПродаж.Сообщение);
		КонецЕсли;
		
		/////////////////////////////
		// Реквизиты виджета.
		
		ДанныеВиджета.Контекст = Новый Структура;
		ДанныеВиджета.Контекст.Вставить("Период", ДанныеПланаПродаж.Период);
		
		/////////////////////////////
		// Содержание виджета.
		
		ДанныеДиаграммы = Новый Массив;
		
		КлючевыеПоказатели_ДобавитьДанныеДиаграммыHTMLПланаПродаж(ДанныеДиаграммы, "План",		ДанныеПланаПродаж.План);
		КлючевыеПоказатели_ДобавитьДанныеДиаграммыHTMLПланаПродаж(ДанныеДиаграммы, "Прогноз",	ДанныеПланаПродаж.Прогноз);
		КлючевыеПоказатели_ДобавитьДанныеДиаграммыHTMLПланаПродаж(ДанныеДиаграммы, "Факт",		ДанныеПланаПродаж.Факт);
		
		ДанныеДиаграммыСтрокой	= CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(ДанныеДиаграммы);
		ФлагДенежнойЕдиницы		= ?(ДанныеВиджета.Виджет = Справочники.CRM_Виджеты.ВыполнениеПланаПродаж, "true", "false");
		
		// Верстка.
		HTMLСодержаниеВиджета = Справочники.CRM_Виджеты.ПолучитьМакет("HTML_ДиаграммаПланаПродаж").ПолучитьТекст();
		
		// Содержание.
		HTMLСодержаниеВиджета = СтрЗаменить(HTMLСодержаниеВиджета, "'{{CRM:PLOT_DATA}}'", ДанныеДиаграммыСтрокой);
		HTMLСодержаниеВиджета = СтрЗаменить(HTMLСодержаниеВиджета, "'{{CRM:PLOT_IS_MONEY}}'", ФлагДенежнойЕдиницы);
		
		// Прочее.
		HTMLСодержаниеВиджета = СтрЗаменить(HTMLСодержаниеВиджета, "href=""Расшифровать""", "href=""Переопределяемый_Расшифровать""");
		
		// Тело виджета.
		HTMLТелоВиджета = Справочники.CRM_Виджеты.ПолучитьМакет("HTML_ВиджетТело").ПолучитьТекст();
		HTMLТелоВиджета = СтрЗаменить(HTMLТелоВиджета, "{{CRM:WIDGET_TITLE}}",		Строка(ДанныеВиджета.ВариантВиджета) + ДанныеПланаПродаж.ЧастьЗаголовокаПоказателя);
		HTMLТелоВиджета = СтрЗаменить(HTMLТелоВиджета, "{{CRM:WIDGET_CONTENT}}",	HTMLСодержаниеВиджета);
		
		Возврат HTMLТелоВиджета;
	КонецЕсли;
	
	Возврат ПолучитьHTMLПустогоВиджета(
		ДанныеВиджета, "Ошибка переопределяемого виджета");
	
КонецФункции // КлючевыеПоказатели_ПолучитьСодержимоеHTMLПереопределяемогоВиджета()

// Функция для получения содержимого виджета версткой HTML.
//
// Параметры:
//  Виджет         - СправочникСсылка.Виджет               - Виджет получения данных.
//  Подразделение  - СправочникСсылка.СтруктураПредприятия - Отбор по подразделению.
//  Пользователь   - СправочникСсылка.Пользователи         - Отбор по пользователю.
//  Фильтры        - Структура                             - Отборы - настройки виджета.
//
// Возвращаемое значение:
//   Структура  - Данные виджета по планам продаж.
//
Функция КлючевыеПоказатели_ДанныеВиджетаПланПродаж(Виджет, Подразделение, Пользователь, Фильтры)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоДня",				НачалоДня(ТекущаяДата)); 
	Запрос.УстановитьПараметр("НачалоНедели",			НачалоНедели(ТекущаяДата)); 
	Запрос.УстановитьПараметр("НачалоМесяца",			НачалоМесяца(ТекущаяДата)); 
	Запрос.УстановитьПараметр("НачалоКвартала",			НачалоКвартала(ТекущаяДата)); 
	Запрос.УстановитьПараметр("НачалоГода",				НачалоГода(ТекущаяДата)); 
	Запрос.УстановитьПараметр("Пользователь",			Пользователь); 
	Запрос.УстановитьПараметр("Подразделение",			Подразделение);
	Запрос.УстановитьПараметр("ПодразделениеНеЗадано",	Не ЗначениеЗаполнено(Подразделение));
	
	ОтветСтруктура = Новый Структура;
	
	Если (ТипЗнч(Фильтры) = Тип("Структура") И Фильтры.Свойство("ПланПродаж")
			И ЗначениеЗаполнено(Фильтры.ПланПродаж)) Тогда
		
		ПланПродаж = Фильтры.ПланПродаж;
		
	Иначе
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	CRM_ПланПродаж.ПланПродаж КАК ПланПродаж
			|ИЗ
			|	РегистрСведений.CRM_ПланПродаж КАК CRM_ПланПродаж
			|ГДЕ
			|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Менеджер = &Пользователь
			|	И ВЫБОР
			|			КОГДА CRM_ПланПродаж.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
			|				ТОГДА CRM_ПланПродаж.ПериодПлана = &НачалоДня
			|			КОГДА CRM_ПланПродаж.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
			|				ТОГДА CRM_ПланПродаж.ПериодПлана = &НачалоНедели
			|			КОГДА CRM_ПланПродаж.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
			|				ТОГДА CRM_ПланПродаж.ПериодПлана = &НачалоМесяца
			|			КОГДА CRM_ПланПродаж.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
			|				ТОГДА CRM_ПланПродаж.ПериодПлана = &НачалоКвартала
			|			КОГДА CRM_ПланПродаж.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
			|				ТОГДА CRM_ПланПродаж.ПериодПлана = &НачалоГода
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	И CRM_ПланПродаж.Согласовано
			|	И НЕ CRM_ПланПродаж.ЭтоПрогноз";

		Если ЗначениеЗаполнено(Подразделение) Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Менеджер = &Пользователь", "Подразделение = &Подразделение");
			
		ИначеЕсли Не ЗначениеЗаполнено(Пользователь) Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Менеджер = &Пользователь", "ИСТИНА");
			
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 1 Тогда
			
			ОтветСтруктура.Вставить("Сообщение", НСтр("ru = 'Не выбран план продаж!'"));
			Возврат ОтветСтруктура;
			
		ИначеЕсли Выборка.Количество() = 1 И Выборка.Следующий() Тогда
			
			ПланПродаж = Выборка.ПланПродаж;
			
		Иначе
			
			ОтветСтруктура.Вставить("Сообщение", НСтр("ru = 'Нет планов продаж!'"));
			Возврат ОтветСтруктура;
			
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеАналитики = CRM_ПланированиеПродаж.ДополнительныеАналитикиСхемы(ПланПродаж);
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ПоляФакт = ",
			|	СУММА(ЕСТЬNULL(CRM_ПродажиОбороты.КоличествоОборот, 0)) КАК КоличествоФакт,
			|	СУММА(ВЫБОР
			|			КОГДА &ВариантПолученияФакта = ЗНАЧЕНИЕ(Перечисление.CRM_ВариантыПолученияФактаПродажи.ПоВыручке)
			|				ТОГДА ЕСТЬNULL(CRM_ПродажиОбороты.СтоимостьОборот, 0)
			|			КОГДА &ВариантПолученияФакта = ЗНАЧЕНИЕ(Перечисление.CRM_ВариантыПолученияФактаПродажи.ПоОплате)
			|				ТОГДА ЕСТЬNULL(CRM_Расчеты.СуммаРасход, 0)
			|			КОГДА &ВариантПолученияФакта = ЗНАЧЕНИЕ(Перечисление.CRM_ВариантыПолученияФактаПродажи.Меньшее)
			|				ТОГДА ВЫБОР
			|						КОГДА ЕСТЬNULL(CRM_ПродажиОбороты.СтоимостьОборот, 0) < ЕСТЬNULL(CRM_Расчеты.СуммаРасход, 0)
			|							ТОГДА ЕСТЬNULL(CRM_ПродажиОбороты.СтоимостьОборот, 0)
			|						ИНАЧЕ ЕСТЬNULL(CRM_Расчеты.СуммаРасход, 0)
			|					КОНЕЦ
			|		КОНЕЦ) КАК СуммаФакт";
		
		СоединениеФакт = "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.CRM_Продажи.Обороты(
			|				&НачалоПериода,
			|				,
			|				Период) КАК CRM_ПродажиОбороты
			|		ПО (ТаблицаПланы.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
			|				ИЛИ ТаблицаПланы.Подразделение = CRM_ПродажиОбороты.Подразделение
			|				ИЛИ ТаблицаПланы.Подразделение = CRM_ПродажиОбороты.Подразделение.Родитель
			|				ИЛИ ТаблицаПланы.Подразделение = CRM_ПродажиОбороты.Подразделение.Родитель.Родитель
			|				ИЛИ ТаблицаПланы.Подразделение = CRM_ПродажиОбороты.Подразделение.Родитель.Родитель.Родитель)
			|			И (CRM_ПродажиОбороты.Партнер = ТаблицаПланы.Партнер
			|				ИЛИ ТаблицаПланы.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
			|			И (CRM_ПродажиОбороты.Номенклатура = ТаблицаПланы.Номенклатура
			|				ИЛИ ТаблицаПланы.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))";
		
		НомАналитики = 1;
		Для Каждого ДопАналитика Из ДополнительныеАналитики Цикл
			СоединениеФакт = СоединениеФакт + "
			|			И CRM_ПродажиОбороты." + ДопАналитика.ПутьКРеквизиту + " = ТаблицаПланы.Аналитика" + Строка(НомАналитики);
			НомАналитики = НомАналитики + 1;
		КонецЦикла;
		
		СоединениеФакт = СоединениеФакт + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.CRM_РасчетыСПокупателями.Обороты(&НачалоПериода, , Период, ) КАК CRM_Расчеты
			|		ПО (&ВариантПолученияФакта <> ЗНАЧЕНИЕ(Перечисление.CRM_ВариантыПолученияФактаПродажи.ПоВыручке))
			|			И (CRM_Расчеты.Контрагент = ТаблицаПланы.Партнер)";
	Иначе
		ПоляФакт = ",
			|	СУММА(ЕСТЬNULL(ВыручкаИСебестоимостьПродаж.КоличествоОборот, 0)) КАК КоличествоФакт,
			|	СУММА(ВЫБОР
			|			КОГДА &ВариантПолученияФакта = ЗНАЧЕНИЕ(Перечисление.CRM_ВариантыПолученияФактаПродажи.ПоВыручке)
			|				ТОГДА ЕСТЬNULL(ВыручкаИСебестоимостьПродаж.СуммаВыручкиОборот, 0)
			|			КОГДА &ВариантПолученияФакта = ЗНАЧЕНИЕ(Перечисление.CRM_ВариантыПолученияФактаПродажи.ПоОплате)
			|				ТОГДА ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.ДолгРасход, 0) + ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.ПредоплатаПриход, 0)
			|			КОГДА &ВариантПолученияФакта = ЗНАЧЕНИЕ(Перечисление.CRM_ВариантыПолученияФактаПродажи.Меньшее)
			|				ТОГДА ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.ДолгРасход, 0)
			|	КОНЕЦ) КАК СуммаФакт";
		
		СоединениеФакт = "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериода, , Период, &ПодразделениеНеЗадано ИЛИ Подразделение В ИЕРАРХИИ(&Подразделение)) КАК ВыручкаИСебестоимостьПродаж
			|		ПО (&ВариантПолученияФакта = ЗНАЧЕНИЕ(Перечисление.CRM_ВариантыПолученияФактаПродажи.ПоВыручке))
			|			И (ТаблицаПланы.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
			|				ИЛИ ТаблицаПланы.Подразделение = ВыручкаИСебестоимостьПродаж.Подразделение
			|				ИЛИ ТаблицаПланы.Подразделение = ВыручкаИСебестоимостьПродаж.Подразделение.Родитель
			|				ИЛИ ТаблицаПланы.Подразделение = ВыручкаИСебестоимостьПродаж.Подразделение.Родитель.Родитель
			|				ИЛИ ТаблицаПланы.Подразделение = ВыручкаИСебестоимостьПродаж.Подразделение.Родитель.Родитель.Родитель)
			|			И (ВыручкаИСебестоимостьПродаж.АналитикаУчетаПоПартнерам.Партнер = ТаблицаПланы.Партнер
			|				ИЛИ ТаблицаПланы.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
			|			И (ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры.Номенклатура = ТаблицаПланы.Номенклатура
			|				ИЛИ ТаблицаПланы.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))";
		
		НомАналитики = 1;
		Для Каждого ДопАналитика Из ДополнительныеАналитики Цикл
			СоединениеФакт = СоединениеФакт + "
				|			И ВыручкаИСебестоимостьПродаж." + ДопАналитика.ПутьКРеквизиту + " = ТаблицаПланы.Аналитика" + Строка(НомАналитики);
			НомАналитики = НомАналитики + 1;
		КонецЦикла;
		
		СоединениеФакт = СоединениеФакт + "
			|			И (ВыручкаИСебестоимостьПродаж.Склад = ТаблицаПланы.Склад
			|				ИЛИ ТаблицаПланы.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам.Обороты(&НачалоПериода, , Период,
			|			ДатаВозникновения >= &НачалоПериода) КАК РасчетыСКлиентамиПоСрокам
			|		ПО (&ВариантПолученияФакта <> ЗНАЧЕНИЕ(Перечисление.CRM_ВариантыПолученияФактаПродажи.ПоВыручке))
			|			И РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Партнер = ТаблицаПланы.Партнер";
	КонецЕсли;

	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	Запрос.Текст =
		"ВЫБРАТЬ
		|	CRM_ПланПродаж.ПланПродаж КАК ПланПродаж,
		|	МАКСИМУМ(CRM_ПланПродаж.УровеньИерархии) КАК УровеньИерархии
		|ПОМЕСТИТЬ МаксУровни
		|ИЗ
		|	РегистрСведений.CRM_ПланПродаж КАК CRM_ПланПродаж
		|ГДЕ
		|	CRM_ПланПродаж.ПланПродаж = &ПланПродаж
		|	И (CRM_ПланПродаж.Сумма > 0
		|			ИЛИ CRM_ПланПродаж.Количество > 0)
		|	И НЕ CRM_ПланПродаж.ЭтоПрогноз
		|	И CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Менеджер = &Пользователь
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_ПланПродаж.ПланПродаж
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(CRM_ПланПродаж.Количество) КАК КоличествоПлан,
		|	СУММА(CRM_ПланПродаж.Сумма) КАК СуммаПлан,
		|	СУММА(CRM_ПланПродаж.КоличествоПрогноз) КАК КоличествоПрогноз,
		|	СУММА(CRM_ПланПродаж.СуммаПрогноз) КАК СуммаПрогноз,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Подразделение КАК Подразделение,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Менеджер КАК Менеджер,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Партнер КАК Партнер,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Номенклатура КАК Номенклатура,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Аналитика1 КАК Аналитика1,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Аналитика2 КАК Аналитика2,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Аналитика3 КАК Аналитика3,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Склад КАК Склад
		|ПОМЕСТИТЬ ТаблицаПланы
		|ИЗ
		|	РегистрСведений.CRM_ПланПродаж КАК CRM_ПланПродаж
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксУровни КАК МаксУровни
		|		ПО (МаксУровни.ПланПродаж = CRM_ПланПродаж.ПланПродаж)
		|			И (МаксУровни.УровеньИерархии = CRM_ПланПродаж.УровеньИерархии)
		|ГДЕ
		|	CRM_ПланПродаж.ПериодПлана = &НачалоПериода
		|	И CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Менеджер = &Пользователь
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Подразделение,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Менеджер,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Партнер,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Номенклатура,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Аналитика1,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Аналитика2,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Аналитика3,
		|	CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ТаблицаПланы.СуммаПлан) КАК План,
		|	СУММА(ТаблицаПланы.СуммаПрогноз) КАК Прогноз" + ПоляФакт + "
		|ИЗ
		|	ТаблицаПланы КАК ТаблицаПланы" + СоединениеФакт;
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	
	Запрос.УстановитьПараметр("ПланПродаж", ПланПродаж);
	Запрос.УстановитьПараметр("ВариантПолученияФакта", ПланПродаж.ВариантПолученияФакта);
	
	Периодичность = Справочники.CRM_СхемаПланаПродаж.ПериодичностьУровняСхемы(ПланПродаж.СхемаПланаПродаж, 1);
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ТекущаяДата));
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Запрос.УстановитьПараметр("НачалоПериода", НачалоНедели(ТекущаяДата));
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ТекущаяДата));
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(ТекущаяДата));
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(ТекущаяДата));
	КонецЕсли;
	
	Если Виджет = Справочники.CRM_Виджеты.ВыполнениеПланаПродажКол Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "CRM_ПланПродаж.СуммаПрогноз", "CRM_ПланПродаж.КоличествоПрогноз");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "CRM_ПланПродаж.Сумма", "CRM_ПланПродаж.Количество");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Менеджер = &Пользователь", "Подразделение = &Подразделение");
		ОтветСтруктура.Вставить("ЗначениеАналитики", Подразделение);
	ИначеЕсли ЗначениеЗаполнено(Пользователь) Тогда
		ОтветСтруктура.Вставить("ЗначениеАналитики", Пользователь);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"CRM_ПланПродаж.АналитикаУчетаПланаПродаж.Менеджер = &Пользователь", "ИСТИНА");
		ОтветСтруктура.Вставить("ЗначениеАналитики", "");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Выборка.Следующий() Тогда
		
		ОтветСтруктура.Вставить("Период", Новый СтандартныйПериод(
			ПланПродаж.НачалоПериода, ПланПродаж.ОкончаниеПериода));
		
		Если ЗначениеЗаполнено(Выборка.План) Тогда
			
			Если Виджет = Справочники.CRM_Виджеты.ВыполнениеПланаПродажКол Тогда
				Кратность = 1;
				КратностьСтр = "";
				ЧастьЗаголовокаПоказателя = ", " + Строка(ПланПродаж.ЕдиницаИзмерения);
			Иначе
				Если ПланПродаж.КратностьЗначений = "НеИзменять" Тогда
					Кратность = 1;
					КратностьСтр = "";
				ИначеЕсли ПланПродаж.КратностьЗначений = "Тысячи" Тогда
					Кратность = 1000;
					КратностьСтр = "тыс.";
				ИначеЕсли ПланПродаж.КратностьЗначений = "Миллионы" Тогда
					Кратность = 1000000;
					КратностьСтр = "млн.";
				КонецЕсли;
				
				ЧастьЗаголовокаПоказателя = ", " + КратностьСтр + Строка(Константы.ВалютаУправленческогоУчета.Получить());
			КонецЕсли;
			
			ОтветСтруктура.Вставить("ЧастьЗаголовокаПоказателя", ЧастьЗаголовокаПоказателя);
			ОтветСтруктура.Вставить("План", Выборка.План / Кратность);
			ОтветСтруктура.Вставить("ПланПредставление", Формат((Выборка.План / Кратность), "ЧДЦ=1") + " " + КратностьСтр);
			
			Если ЗначениеЗаполнено(Выборка.Прогноз) Тогда
				ОтветСтруктура.Вставить("Прогноз", Выборка.Прогноз / Кратность);
				ОтветСтруктура.Вставить("ПрогнозПредставление", Формат((Выборка.Прогноз / Кратность), "ЧДЦ=1") + " " 
					+ КратностьСтр);
			Иначе
				ОтветСтруктура.Вставить("Прогноз", 0);
				ОтветСтруктура.Вставить("ПрогнозПредставление", "");
			КонецЕсли;
			
			Если Виджет = Справочники.CRM_Виджеты.ВыполнениеПланаПродаж Тогда
				ОтветСтруктура.Вставить("Факт", Выборка.СуммаФакт / Кратность);
				ОтветСтруктура.Вставить("ФактПредставление", Формат((Выборка.СуммаФакт / Кратность), "ЧДЦ=1") + " " + КратностьСтр);
			Иначе
				ОтветСтруктура.Вставить("Факт", Выборка.КоличествоФакт);
				ОтветСтруктура.Вставить("ФактПредставление", Формат((Выборка.КоличествоФакт), "ЧДЦ=1") + " " + КратностьСтр);
			КонецЕсли;
			
			ОтветСтруктура.Вставить("КратностьСтр", КратностьСтр);
			
			Возврат ОтветСтруктура;
			
		КонецЕсли;
	КонецЕсли;
	
	ОтветСтруктура.Вставить("ЧастьЗаголовокаПоказателя", "");
	ОтветСтруктура.Вставить("Сообщение", НСтр("ru = 'Нет данных'"));
	
	Возврат ОтветСтруктура;
	
КонецФункции

#КонецОбласти

#КонецОбласти

// --------------

#Область ВоронкаПродаж

// Процедура для обновления виджета по воронке продаж.
//
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - Форма, в которой идет работа с виджетами.
//  ДанныеВиджета  - ДанныеФормыКоллекция       - Данные виджета, по которым будет обновляться виджет.
//
Процедура ВоронкаПродаж_ОбновитьВиджет(Форма, ДанныеВиджета)
	
	Форма[ДанныеВиджета.ИмяДанных] = ПолучитьСодержимоеHTMLВиджета(ДанныеВиджета);
	
	Если Форма.ВариантРаботыВиджетов <> "МониторРуководителя" Тогда
		
		Форма[ДанныеВиджета.ИмяДанных] = ОбернутьСодержимоеHTMLВВерсткуВиджета(
			Форма, Форма[ДанныеВиджета.ИмяДанных]);
		
	КонецЕсли;
	
КонецПроцедуры // ВоронкаПродаж_ОбновитьВиджет()

// Функция для получения содержимого виджета версткой HTML.
//
// Параметры:
//  ДанныеВиджета  - ДанныеФормыКоллекция - Данные виджета для получения верстки.
//
// Возвращаемое значение:
//   Строка  - Содержимое HTML виджета.
//
Функция ВоронкаПродаж_ПолучитьСодержимоеHTMLВиджета(ДанныеВиджета)
	
	НастройкиВиджета = ДанныеВиджета.Настройки;
	
	/////////////////////////////
	// Запрос - Данные виджета.
	
	РезультатТаблица = Отчеты.CRM_ВоронкаПродаж.ПолучитьДанныеВоронкиПродаж(НастройкиВиджета, "", Ложь);
	
	Если РезультатТаблица.Количество() = 0 Тогда
		Возврат ПолучитьHTMLПустогоВиджета(
			ДанныеВиджета, "Нет данных");
	КонецЕсли;
	
	Показатель		= НастройкиВиджета.Показатель;
	РежимВоронки	= НастройкиВиджета.РежимВоронки;
	
	/////////////////////////////
	// Запрос - Данные виджета для верстки.
	
	ДанныеДиаграммыHTML = Новый Массив;
	ЦветаСерийДиаграммы = Новый Соответствие;
	
	Для Каждого СтрокаСерия Из РезультатТаблица Цикл
		
		ЕдиницаДанныхДиаграммы = ВоронкаПродаж_ПолучитьТочкуДиаграммы();
		ЕдиницаДанныхДиаграммы["stageRef"]	= Строка(СтрокаСерия.Этап.УникальныйИдентификатор());
		ЕдиницаДанныхДиаграммы["stageView"]	= Строка(СтрокаСерия.Этап);
		ЕдиницаДанныхДиаграммы["metric"]	= РежимВоронки;
		
		ПоказательДостроенных = 0;
		Если РежимВоронки = "Активные" Тогда
			
			ЕдиницаДанныхДиаграммы["value"] = СтрокаСерия[Показатель + "Активных"];
			
			ПоказательДостроенных = СтрокаСерия[Показатель + "Пропущенных"]
				+ СтрокаСерия[Показатель + "Успешных"];
			
		ИначеЕсли РежимВоронки = "Закрытые" Тогда
			
			ЕдиницаДанныхДиаграммы["value"] = СтрокаСерия[Показатель + "Успешных"]
				+ СтрокаСерия[Показатель + "Пропущенных"];
			
		Иначе
			
			ЕдиницаДанныхДиаграммы["value"] = СтрокаСерия[Показатель + "Успешных"]
				+ СтрокаСерия[Показатель + "Пропущенных"]
				+ СтрокаСерия[Показатель + "Активных"];
			
		КонецЕсли;
		
		ДанныеДиаграммыHTML.Добавить(ЕдиницаДанныхДиаграммы);
		
		Если ПоказательДостроенных > 0 Тогда
			
			ЕдиницаДанныхДиаграммы = ВоронкаПродаж_ПолучитьТочкуДиаграммы();
			ЕдиницаДанныхДиаграммы["stageRef"]	= Строка(СтрокаСерия.Этап.УникальныйИдентификатор());
			ЕдиницаДанныхДиаграммы["stageView"]	= Строка(СтрокаСерия.Этап);
			ЕдиницаДанныхДиаграммы["metric"]	= "Достроенные";
			ЕдиницаДанныхДиаграммы["value"]		= ПоказательДостроенных;
			
			ДанныеДиаграммыHTML.Добавить(ЕдиницаДанныхДиаграммы);
			
			// Серия.Цвет = WebЦвета.Бежевый;
		КонецЕсли;
		
		Если СтрокаСерия[Показатель + "Неудачных"] > 0 Тогда
			
			ЕдиницаДанныхДиаграммы = ВоронкаПродаж_ПолучитьТочкуДиаграммы();
			ЕдиницаДанныхДиаграммы["stageRef"]	= Строка(СтрокаСерия.Этап.УникальныйИдентификатор());
			ЕдиницаДанныхДиаграммы["stageView"]	= Строка(СтрокаСерия.Этап);
			ЕдиницаДанныхДиаграммы["metric"]	= "Неудачно";
			ЕдиницаДанныхДиаграммы["value"]		= СтрокаСерия[Показатель + "Неудачных"];
			
			ДанныеДиаграммыHTML.Добавить(ЕдиницаДанныхДиаграммы);
			
			// Серия.Цвет = WebЦвета.СеребристоСерый;
		КонецЕсли;
		
		ЦветСерии = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьЦветПоКлючу(СтрокаСерия.Этап.ИндексЦвета).Цвет;
		
		ЦветаСерийДиаграммы.Вставить(
			ЕдиницаДанныхДиаграммы["stageRef"],
			СтрШаблон("rgb(%1,%2,%3)", ЦветСерии.Красный, ЦветСерии.Зеленый, ЦветСерии.Синий));
		
		//Серия.Цвет = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьЦветПоКлючу(СтрокаСерия.Этап.ИндексЦвета).Цвет;
	КонецЦикла;
	
	// WebЦвета.Бежевый
	ЦветаСерийДиаграммы.Вставить("Достроенные", СтрШаблон("rgb(%1,%2,%3)", 245, 245, 220));
	
	// WebЦвета.СеребристоСерый
	ЦветаСерийДиаграммы.Вставить("Неудачно", СтрШаблон("rgb(%1,%2,%3)", 220, 220, 220));
	
	/////////////////////////////
	// Содержание виджета.
	
	ДанныеВиджетаСтрокой	= CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(ДанныеДиаграммыHTML);
	ЦветаДиаграммыСтрокой	= CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(ЦветаСерийДиаграммы);
	ВариантЗначенийСтрокой	= Формат(Показатель = "Сумма", "БЛ=false; БИ=true");
	
	// Верстка.
	HTMLСодержаниеВиджета = Справочники.CRM_Виджеты.ПолучитьМакет("HTML_ДиаграммаВоронкиПродаж").ПолучитьТекст();
	
	// Содержимое виджета.
	HTMLСодержаниеВиджета = СтрЗаменить(HTMLСодержаниеВиджета, "'{{CRM:PLOT_DATA}}'",		ДанныеВиджетаСтрокой);
	HTMLСодержаниеВиджета = СтрЗаменить(HTMLСодержаниеВиджета, "'{{CRM:PLOT_COLORS}}'",		ЦветаДиаграммыСтрокой);
	HTMLСодержаниеВиджета = СтрЗаменить(HTMLСодержаниеВиджета, "'{{CRM:PLOT_IS_MONEY}}'",	ВариантЗначенийСтрокой);
	
	// Тело виджета.
	HTMLТелоВиджета = Справочники.CRM_Виджеты.ПолучитьМакет("HTML_ВиджетТело").ПолучитьТекст();
	HTMLТелоВиджета = СтрЗаменить(HTMLТелоВиджета, "{{CRM:WIDGET_TITLE}}",		Строка(ДанныеВиджета.ВариантВиджета));
	HTMLТелоВиджета = СтрЗаменить(HTMLТелоВиджета, "{{CRM:WIDGET_CONTENT}}",	HTMLСодержаниеВиджета);
	
	Возврат HTMLТелоВиджета;
	
КонецФункции // ВоронкаПродаж_ПолучитьСодержимоеHTMLВиджета()

// Функция для получения шаблона данных диаграммы виджета.
//
// Возвращаемое значение:
//   Структура  - шаблон данныз диаграммы.
//
Функция ВоронкаПродаж_ПолучитьТочкуДиаграммы()
	
	Возврат Новый Структура("stageView, stageRef, value, metric");
	
КонецФункции // ВоронкаПродаж_ПолучитьТочкуДиаграммы()

#КонецОбласти

// --------------

#Область ДинамикаПродаж

// Процедура для обновления виджета по динамике продаж.
//
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - Форма, в которой идет работа с виджетами.
//  ДанныеВиджета  - ДанныеФормыКоллекция       - Данные виджета, по которым будет обновляться виджет.
//
Процедура ДинамикаПродаж_ОбновитьВиджет(Форма, ДанныеВиджета)
	
	Форма[ДанныеВиджета.ИмяДанных] = ПолучитьСодержимоеHTMLВиджета(ДанныеВиджета);
	
	Если Форма.ВариантРаботыВиджетов <> "МониторРуководителя" Тогда
		
		Форма[ДанныеВиджета.ИмяДанных] = ОбернутьСодержимоеHTMLВВерсткуВиджета(
			Форма, Форма[ДанныеВиджета.ИмяДанных]);
		
	КонецЕсли;
	
КонецПроцедуры // ДинамикаПродаж_ОбновитьВиджет()

// Функция для получения содержимого виджета версткой HTML.
//
// Параметры:
//  ДанныеВиджета  - ДанныеФормыКоллекция - Данные виджета для получения верстки.
//
// Возвращаемое значение:
//   Строка  - Содержимое HTML виджета.
//
Функция ДинамикаПродаж_ПолучитьСодержимоеHTMLВиджета(ДанныеВиджета) Экспорт
	
	НастройкиВиджета = ДанныеВиджета.Настройки;
	
	///////////////////////////////////////////////
	// Данные диаграммы для виджета.
	
	// +CRM_Модуль
	//ПараметрыЗапроса = Новый Структура;
	//
	//Если НастройкиВиджета.Свойство("СтандартныйПериод") Тогда
	//	ПараметрыЗапроса.Вставить("ПериодОтчета", НастройкиВиджета.СтандартныйПериод);
	//КонецЕсли;
	//
	//Если НастройкиВиджета.Свойство("Периодичность") Тогда
	//	ПараметрыЗапроса.Вставить("ГруппировкаПериода", НастройкиВиджета.Периодичность);
	//КонецЕсли;
	//
	//Если НастройкиВиджета.Свойство("ТипАналитики") И НастройкиВиджета.Свойство("ЗначениеАналитики") Тогда
	//	ЗначениеАналитики = CRM_РаботаСВиджетамиКлиентСервер.ПолучитьАктуальноеЗначениеАналитики(НастройкиВиджета);
	//	
	//	ПараметрыЗапроса.Вставить("ТипАналитики", НастройкиВиджета.ТипАналитики);
	//	ПараметрыЗапроса.Вставить("ЗначениеАналитики", ЗначениеАналитики);
	//КонецЕсли;
	Если НастройкиВиджета.Периодичность = Перечисления.Периодичность.Год Тогда
		КлючГруппировкиДанных = "ПериодГод";
	ИначеЕсли НастройкиВиджета.Периодичность = Перечисления.Периодичность.Квартал Тогда
		КлючГруппировкиДанных = "ПериодКвартал";
	ИначеЕсли НастройкиВиджета.Периодичность = Перечисления.Периодичность.Месяц Тогда
		КлючГруппировкиДанных = "ПериодМесяц";
	ИначеЕсли НастройкиВиджета.Периодичность = Перечисления.Периодичность.Неделя Тогда
		КлючГруппировкиДанных = "ПериодНеделя";
	Иначе
		КлючГруппировкиДанных = "ПериодДень";
	КонецЕсли;
	// -CRM_Модуль
	
	/////////////////////////////
	// Запрос - Получение данных.
	
	// +CRM_Модуль
	//ТаблицаРезультат = ВыполнитьСКДДиаграммыДляВиджета(Отчеты.CRM_АнализПродажПланФакт, ПараметрыЗапроса);
	ТаблицаРезультат = ВыполнитьСКДПоКомпоновщикуНастроек(Отчеты["ВыручкаИСебестоимостьПродаж"], ДанныеВиджета);
	// -CRM_Модуль
	
	Если ТаблицаРезультат = Неопределено Тогда
		Возврат ПолучитьHTMLПустогоВиджета(
			ДанныеВиджета, "Ошибка выполнения");
	КонецЕсли;
	
	/////////////////////////////
	// Запрос - Проверка на наличие данных.
	
	Если ТаблицаРезультат.Количество() = 0 Тогда
		Возврат ПолучитьHTMLПустогоВиджета(
			ДанныеВиджета, "Нет данных");
	КонецЕсли;
	
	/////////////////////////////
	// Запрос - Данные виджета для верстки.
	
	ДанныеДиаграммыHTML = Новый Массив;
	
	Для Каждого ТекущийРезультат Из ТаблицаРезультат Цикл
		
		ЕдиницаДанныхДиаграммы = ДинамикаПродаж_ПолучитьТочкуДиаграммы();
		
		// +CRM_Модуль
		//ЕдиницаДанныхДиаграммы["period"] = ПолучитьФорматДатыДляГрафикаПоПериодичности(
		//	НастройкиВиджета.Периодичность, ТекущийРезультат.НачалоПериодаПродажи);
		//ЕдиницаДанныхДиаграммы["value"] = ТекущийРезультат.ФактПродажи;
		ЕдиницаДанныхДиаграммы["period"] = ПолучитьФорматДатыДляГрафикаПоПериодичности(
			НастройкиВиджета.Периодичность, ТекущийРезультат[КлючГруппировкиДанных]);
		ЕдиницаДанныхДиаграммы["value"] = ТекущийРезультат.Выручка;
		// -CRM_Модуль
		
		ДанныеДиаграммыHTML.Добавить(ЕдиницаДанныхДиаграммы);
		
	КонецЦикла;
	
	/////////////////////////////
	// Содержание виджета.
	
	// Данные в JSON.
	ДанныеВиджетаСтрокой = CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(ДанныеДиаграммыHTML);
	
	// Верстка.
	HTMLСодержаниеВиджета = Справочники.CRM_Виджеты.ПолучитьМакет("HTML_ДиаграммаДинамикиПродаж").ПолучитьТекст();
	
	// Содержимое виджета.
	HTMLСодержаниеВиджета = СтрЗаменить(HTMLСодержаниеВиджета, "'{{CRM:PLOT_DATA}}'", ДанныеВиджетаСтрокой);
	
	// Тело виджета.
	HTMLТелоВиджета = Справочники.CRM_Виджеты.ПолучитьМакет("HTML_ВиджетТело").ПолучитьТекст();
	HTMLТелоВиджета = СтрЗаменить(HTMLТелоВиджета, "{{CRM:WIDGET_TITLE}}",		Строка(ДанныеВиджета.ВариантВиджета));
	HTMLТелоВиджета = СтрЗаменить(HTMLТелоВиджета, "{{CRM:WIDGET_CONTENT}}",	HTMLСодержаниеВиджета);
	
	Возврат HTMLТелоВиджета;
	
КонецФункции // ДинамикаПродаж_ПолучитьСодержимоеHTMLВиджета()

// Функция для получения шаблона данных диаграммы виджета.
//
// Возвращаемое значение:
//   Структура  - шаблон данныз диаграммы.
//
Функция ДинамикаПродаж_ПолучитьТочкуДиаграммы()
	
	Возврат Новый Структура("period, value");
	
КонецФункции // ДинамикаПродаж_ПолучитьТочкуДиаграммы()

#КонецОбласти

// --------------

#Область ДебиторскаяЗадолженность

// Процедура для обновления виджета по дебиторской задолженности.
//
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - Форма, в которой идет работа с виджетами.
//  ДанныеВиджета  - ДанныеФормыКоллекция       - Данные виджета, по которым будет обновляться виджет.
//
Процедура ДебиторскаяЗадолженность_ОбновитьВиджет(Форма, ДанныеВиджета)
	
	Форма[ДанныеВиджета.ИмяДанных] = ПолучитьСодержимоеHTMLВиджета(ДанныеВиджета);
	
	Если Форма.ВариантРаботыВиджетов <> "МониторРуководителя" Тогда
		
		Форма[ДанныеВиджета.ИмяДанных] = ОбернутьСодержимоеHTMLВВерсткуВиджета(
			Форма, Форма[ДанныеВиджета.ИмяДанных]);
		
	КонецЕсли;
	
КонецПроцедуры // ДебиторскаяЗадолженность_ОбновитьВиджет()

// Функция для получения содержимого виджета версткой HTML.
//
// Параметры:
//  ДанныеВиджета  - ДанныеФормыКоллекция - Данные виджета для получения верстки.
//
// Возвращаемое значение:
//   Строка  - Содержимое HTML виджета.
//
Функция ДебиторскаяЗадолженность_ПолучитьСодержимоеHTMLВиджета(ДанныеВиджета)
	
	НастройкиВиджета = ДанныеВиджета.Настройки;
	
	///////////////////////////////////////////////
	// Данные диаграммы для виджета.
	
	// +CRM_Модуль
	//ПараметрыЗапроса = Новый Структура;
	//
	//Если НастройкиВиджета.Свойство("Период") Тогда
	//	ПараметрыЗапроса.Вставить("Период", НастройкиВиджета.Период.Дата);
	//КонецЕсли;
	//
	//Если НастройкиВиджета.Свойство("Периодичность") Тогда
	//	ПараметрыЗапроса.Вставить("ГруппировкаПериода", НастройкиВиджета.Периодичность);
	//КонецЕсли;
	//
	//Если НастройкиВиджета.Свойство("ТипАналитики") И НастройкиВиджета.Свойство("ЗначениеАналитики") Тогда
	//	ЗначениеАналитики = CRM_РаботаСВиджетамиКлиентСервер.ПолучитьАктуальноеЗначениеАналитики(НастройкиВиджета);
	//	
	//	ПараметрыЗапроса.Вставить("ТипАналитики", НастройкиВиджета.ТипАналитики);
	//	ПараметрыЗапроса.Вставить("ЗначениеАналитики", ЗначениеАналитики);
	//КонецЕсли;
	// -CRM_Модуль
	
	/////////////////////////////
	// Запрос - Получение данных.
	
	// +CRM_Модуль
	//ТаблицаРезультат = ВыполнитьСКДДиаграммыДляВиджета(Отчеты.CRM_ДебиторскаяЗадолженностьПоСрокамДолга., ПараметрыЗапроса);
	ТаблицаРезультат = ВыполнитьСКДПоКомпоновщикуНастроек(Отчеты["ЗадолженностьКлиентовПоСрокам"], ДанныеВиджета);
	// -CRM_Модуль
	
	Если ТаблицаРезультат = Неопределено Тогда
		Возврат ПолучитьHTMLПустогоВиджета(
			ДанныеВиджета, "Ошибка выполнения");
	КонецЕсли;
	
	/////////////////////////////
	// Запрос - Проверка на наличие данных.
	
	Если ТаблицаРезультат.Количество() = 0 Тогда
		Возврат ПолучитьHTMLПустогоВиджета(
			ДанныеВиджета, "Нет данных");
	КонецЕсли;
	
	/////////////////////////////
	// Запрос - Данные виджета для верстки.
	
	ДанныеДиаграммыHTML = Новый Массив;
	
	Для Каждого ТекущийРезультат Из ТаблицаРезультат Цикл
		
		ЕдиницаДанныхДиаграммы = ДебиторскаяЗадолженность_ПолучитьТочкуДиаграммы();
		
		// +CRM_Модуль
		//ЕдиницаДанныхДиаграммы["period"] = ПолучитьФорматДатыДляГрафикаПоПериодичности(
		//	НастройкиВиджета.Периодичность, ТекущийРезультат.НачалоЗадолженности);
		//ЕдиницаДанныхДиаграммы["value"] = ТекущийРезультат.Задолженность;
		ЕдиницаДанныхДиаграммы["period"] = ТекущийРезультат.НаименованиеИнтервала;
		ЕдиницаДанныхДиаграммы["value"] = ТекущийРезультат.ДолгКлиента;
		// -CRM_Модуль
		
		ДанныеДиаграммыHTML.Добавить(ЕдиницаДанныхДиаграммы);
		
	КонецЦикла;
	
	/////////////////////////////
	// Содержание виджета.
	
	// Данные в JSON.
	ДанныеВиджетаСтрокой = CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(ДанныеДиаграммыHTML);
	
	// Верстка.
	HTMLСодержаниеВиджета = Справочники.CRM_Виджеты.ПолучитьМакет("HTML_ДиаграммаДебиторскаяЗадолженность").ПолучитьТекст();
	
	// Содержимое виджета.
	HTMLСодержаниеВиджета = СтрЗаменить(HTMLСодержаниеВиджета, "'{{CRM:PLOT_DATA}}'", ДанныеВиджетаСтрокой);
	
	// Тело виджета.
	HTMLТелоВиджета = Справочники.CRM_Виджеты.ПолучитьМакет("HTML_ВиджетТело").ПолучитьТекст();
	HTMLТелоВиджета = СтрЗаменить(HTMLТелоВиджета, "{{CRM:WIDGET_TITLE}}",		Строка(ДанныеВиджета.ВариантВиджета));
	HTMLТелоВиджета = СтрЗаменить(HTMLТелоВиджета, "{{CRM:WIDGET_CONTENT}}",	HTMLСодержаниеВиджета);
	
	Возврат HTMLТелоВиджета;
	
КонецФункции // ДебиторскаяЗадолженность_ПолучитьСодержимоеHTMLВиджета()

// Функция для получения шаблона данных диаграммы виджета.
//
// Возвращаемое значение:
//   Структура  - шаблон данныз диаграммы.
//
Функция ДебиторскаяЗадолженность_ПолучитьТочкуДиаграммы()
	
	Возврат Новый Структура("period, value");
	
КонецФункции // ДебиторскаяЗадолженность_ПолучитьТочкуДиаграммы()

#КонецОбласти

// --------------

#Область ДинамикаСтатусовКлиентов

// Процедура для обновления виджета по динамике статусов клиентов.
//
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - Форма, в которой идет работа с виджетами.
//  ДанныеВиджета  - ДанныеФормыКоллекция       - Данные виджета, по которым будет обновляться виджет.
//
Процедура ДинамикаСтатусовКлиентов_ОбновитьВиджета(Форма, ДанныеВиджета)
	
	Форма[ДанныеВиджета.ИмяДанных] = ПолучитьСодержимоеHTMLВиджета(ДанныеВиджета);
	
	Если Форма.ВариантРаботыВиджетов <> "МониторРуководителя" Тогда
		
		Форма[ДанныеВиджета.ИмяДанных] = ОбернутьСодержимоеHTMLВВерсткуВиджета(
			Форма, Форма[ДанныеВиджета.ИмяДанных]);
		
	КонецЕсли;
	
КонецПроцедуры // ДинамикаСтатусовКлиентов_ОбновитьВиджета()

// Функция для получения содержимого виджета версткой HTML.
//
// Параметры:
//  ДанныеВиджета  - ДанныеФормыКоллекция - Данные виджета для получения верстки.
//
// Возвращаемое значение:
//   Строка  - Содержимое HTML виджета.
//
Функция ДинамикаСтатусовКлиентов_ПолучитьСодержимоеHTMLВиджета(ДанныеВиджета)
	
	НастройкиВиджета = ДанныеВиджета.Настройки;
	
	///////////////////////////////////////////////
	// Данные диаграммы для виджета.
	
	ПараметрыЗапроса = Новый Структура;
	
	Если НастройкиВиджета.Свойство("СтандартныйПериод") Тогда
		ПараметрыЗапроса.Вставить("ПериодОтчета", НастройкиВиджета.СтандартныйПериод);
	КонецЕсли;
	
	Если НастройкиВиджета.Свойство("Периодичность") Тогда
		ПараметрыЗапроса.Вставить("Периодичность", НастройкиВиджета.Периодичность);
	КонецЕсли;
	
	Если НастройкиВиджета.Свойство("ТипАналитики") И НастройкиВиджета.Свойство("ЗначениеАналитики") Тогда
		ЗначениеАналитики = CRM_РаботаСВиджетамиКлиентСервер.ПолучитьАктуальноеЗначениеАналитики(НастройкиВиджета);
		
		ПараметрыЗапроса.Вставить("ТипАналитики", НастройкиВиджета.ТипАналитики);
		ПараметрыЗапроса.Вставить("ЗначениеАналитики", ЗначениеАналитики);
	КонецЕсли;
	
	/////////////////////////////
	// Запрос - Получение данных.
	
	ТаблицаРезультат = ВыполнитьСКДДиаграммыДляВиджета(Отчеты.CRM_ДинамикаСтатусовКлиентов, ПараметрыЗапроса);
	
	Если ТаблицаРезультат = Неопределено Тогда
		Возврат ПолучитьHTMLПустогоВиджета(
			ДанныеВиджета, "Ошибка выполнения");
	КонецЕсли;
	
	/////////////////////////////
	// Запрос - Проверка на наличие данных.
	
	Если ТаблицаРезультат.Количество() = 0 Тогда
		Возврат ПолучитьHTMLПустогоВиджета(
			ДанныеВиджета, "Нет данных");
	КонецЕсли;
	
	/////////////////////////////
	// Запрос - Данные виджета для верстки.
	
	ДанныеДиаграммыHTML = Новый Массив;
	
	Для Каждого ТекущийРезультат Из ТаблицаРезультат Цикл
		
		ЕдиницаДанныхДиаграммы = ДинамикаСтатусовКлиентов_ПолучитьТочкуДиаграммы();
		
		ЕдиницаДанныхДиаграммы["period"] = ПолучитьФорматДатыДляГрафикаПоПериодичности(
			НастройкиВиджета.Периодичность, ТекущийРезультат.ДатаРасчета);
		ЕдиницаДанныхДиаграммы["statusRef"] = Строка(ТекущийРезультат.Статус.УникальныйИдентификатор());
		ЕдиницаДанныхДиаграммы["statusView"] = Строка(ТекущийРезультат.Статус);
		ЕдиницаДанныхДиаграммы["value"] = ?(ТекущийРезультат.Количество <> Null, ТекущийРезультат.Количество, 0);
		
		ДанныеДиаграммыHTML.Добавить(ЕдиницаДанныхДиаграммы);
		
	КонецЦикла;
	
	/////////////////////////////
	// Содержание виджета.
	
	// Данные в JSON.
	ДанныеВиджетаСтрокой = CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(ДанныеДиаграммыHTML);
	
	// Верстка.
	HTMLСодержаниеВиджета = Справочники.CRM_Виджеты.ПолучитьМакет("HTML_ДиаграммаДинамикаСтатусовКлиентов").ПолучитьТекст();
	
	// Содержимое виджета.
	HTMLСодержаниеВиджета = СтрЗаменить(HTMLСодержаниеВиджета, "'{{CRM:PLOT_DATA}}'", ДанныеВиджетаСтрокой);
	
	// Тело виджета.
	HTMLТелоВиджета = Справочники.CRM_Виджеты.ПолучитьМакет("HTML_ВиджетТело").ПолучитьТекст();
	HTMLТелоВиджета = СтрЗаменить(HTMLТелоВиджета, "{{CRM:WIDGET_TITLE}}",		Строка(ДанныеВиджета.ВариантВиджета));
	HTMLТелоВиджета = СтрЗаменить(HTMLТелоВиджета, "{{CRM:WIDGET_CONTENT}}",	HTMLСодержаниеВиджета);
	
	Возврат HTMLТелоВиджета;
	
КонецФункции // ДинамикаСтатусовКлиентов_ПолучитьСодержимоеHTMLВиджета()

// Функция для получения шаблона данных диаграммы виджета.
//
// Возвращаемое значение:
//   Структура  - шаблон данныз диаграммы.
//
Функция ДинамикаСтатусовКлиентов_ПолучитьТочкуДиаграммы()
	
	Возврат Новый Структура("statusRef, statusView, period, value");
	
КонецФункции // ДинамикаСтатусовКлиентов_ПолучитьТочкуДиаграммы()

#КонецОбласти

// --------------

#Область СтатистикаТелефонныхЗвонков

// Процедура для обновления виджета по статистике телефонных звонков.
//
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - Форма, в которой идет работа с виджетами.
//  ДанныеВиджета  - ДанныеФормыКоллекция       - Данные виджета, по которым будет обновляться виджет.
//
Процедура СтатистикаТелефонныхЗвонков_ОбновитьВиджета(Форма, ДанныеВиджета)
	
	Форма[ДанныеВиджета.ИмяДанных] = ПолучитьСодержимоеHTMLВиджета(ДанныеВиджета);
	
	Если Форма.ВариантРаботыВиджетов <> "МониторРуководителя" Тогда
		
		Форма[ДанныеВиджета.ИмяДанных] = ОбернутьСодержимоеHTMLВВерсткуВиджета(
			Форма, Форма[ДанныеВиджета.ИмяДанных]);
		
	КонецЕсли;
	
КонецПроцедуры // СтатистикаТелефонныхЗвонков_ОбновитьВиджета()

// Функция для получения содержимого виджета версткой HTML.
//
// Параметры:
//  ДанныеВиджета  - ДанныеФормыКоллекция - Данные виджета для получения верстки.
//
// Возвращаемое значение:
//   Строка  - Содержимое HTML виджета.
//
Функция СтатистикаТелефонныхЗвонков_ПолучитьСодержимоеHTMLВиджета(ДанныеВиджета)
	
	НастройкиВиджета = ДанныеВиджета.Настройки;
	
	///////////////////////////////////////////////
	// Данные для виджета.
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(сфпИсторияЗвонков.Звонок), 0) КАК ОбщееКоличествоЗвонков,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА сфпИсторияЗвонков.Звонок.сфпСостояниеЗвонка = ЗНАЧЕНИЕ(Перечисление.сфпСостоянияЗвонков.Пропущенный)
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК КоличествоПропущенных,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА сфпИсторияЗвонков.Звонок.сфпДлительностьЗвонка < 60
		|						И сфпИсторияЗвонков.Звонок.сфпСостояниеЗвонка = ЗНАЧЕНИЕ(Перечисление.сфпСостоянияЗвонков.Отвеченный)
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ДлительностьЗвонкаМеньшеМинуты,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА сфпИсторияЗвонков.Звонок.сфпДлительностьЗвонка >= 60
		|						И сфпИсторияЗвонков.Звонок.сфпСостояниеЗвонка = ЗНАЧЕНИЕ(Перечисление.сфпСостоянияЗвонков.Отвеченный)
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ДлительностьЗвонкаБольшеМинуты
		|ИЗ
		|	РегистрСведений.сфпИсторияЗвонков КАК сфпИсторияЗвонков
		|ГДЕ
		|	НЕ сфпИсторияЗвонков.НецелевойЗвонок
		|	И НЕ сфпИсторияЗвонков.Звонок.ПометкаУдаления
		|	И сфпИсторияЗвонков.Звонок.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ВЫБОР
		|			КОГДА &Менеджер = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ сфпИсторияЗвонков.Звонок.Ответственный = &Менеджер
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ сфпИсторияЗвонков.Звонок.Ответственный.Подразделение = &Подразделение
		|		КОНЕЦ");
	
	ЗначениеАналитики = CRM_РаботаСВиджетамиКлиентСервер.ПолучитьАктуальноеЗначениеАналитики(НастройкиВиджета);
	
	МенеджерОтбор		= Справочники.Пользователи.ПустаяСсылка();
	ПодразделениеОтбор	= Справочники.СтруктураПредприятия.ПустаяСсылка();
	
	Если НастройкиВиджета.ТипАналитики = Перечисления.CRM_ВидыРазверткиПоказателей.ПоМенеджеру Тогда
		МенеджерОтбор = ЗначениеАналитики;
	ИначеЕсли НастройкиВиджета.ТипАналитики = Перечисления.CRM_ВидыРазверткиПоказателей.ПоПодразделению Тогда
		ПодразделениеОтбор = ЗначениеАналитики;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Менеджер", МенеджерОтбор);
	Запрос.УстановитьПараметр("Подразделение", ПодразделениеОтбор);
	
	Запрос.УстановитьПараметр("НачалоПериода",	НастройкиВиджета.СтандартныйПериод.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода",	НастройкиВиджета.СтандартныйПериод.ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ДанныеЗвонков = РезультатЗапроса[0];
	
	/////////////////////////////
	// Содержание виджета.
	
	// Верстка.
	HTMLСодержаниеВиджета = Справочники.CRM_Виджеты.ПолучитьМакет("HTML_СтатистикаЗвонков").ПолучитьТекст();
	
	// Содержимое виджета.
	HTMLСодержаниеВиджета = СтрЗаменить(HTMLСодержаниеВиджета, "{{CRM:WIDGET_ALL_CALLS}}",			Строка(ДанныеЗвонков.ОбщееКоличествоЗвонков));
	HTMLСодержаниеВиджета = СтрЗаменить(HTMLСодержаниеВиджета, "{{CRM:WIDGET_MISSED_CALLS}}",		Строка(ДанныеЗвонков.КоличествоПропущенных));
	HTMLСодержаниеВиджета = СтрЗаменить(HTMLСодержаниеВиджета, "{{CRM:WIDGET_LESS_MINUTE_CALLS}}",	Строка(ДанныеЗвонков.ДлительностьЗвонкаМеньшеМинуты));
	HTMLСодержаниеВиджета = СтрЗаменить(HTMLСодержаниеВиджета, "{{CRM:WIDGET_MORE_MINUTE_CALLS}}",	Строка(ДанныеЗвонков.ДлительностьЗвонкаБольшеМинуты));

	// Тело виджета.
	HTMLТелоВиджета = Справочники.CRM_Виджеты.ПолучитьМакет("HTML_ВиджетТело").ПолучитьТекст();
	HTMLТелоВиджета = СтрЗаменить(HTMLТелоВиджета, "{{CRM:WIDGET_TITLE}}",		Строка(ДанныеВиджета.ВариантВиджета));
	HTMLТелоВиджета = СтрЗаменить(HTMLТелоВиджета, "{{CRM:WIDGET_CONTENT}}",	HTMLСодержаниеВиджета);
	
	// Скрыть кнопку "Подробнее".
	HTMLТелоВиджета = СтрЗаменить(HTMLТелоВиджета, "class=""widget-block-footer""", "class=""hidden""");
	
	Возврат HTMLТелоВиджета;
	
КонецФункции // СтатистикаТелефонныхЗвонков_ПолучитьСодержимоеHTMLВиджета()

#КонецОбласти

// --------------

#Область ТрудозатратыВремениПоВидамРабот

// Процедура для обновления виджета по трудозатратам времени по видам работ.
//
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - Форма, в которой идет работа с виджетами.
//  ДанныеВиджета  - ДанныеФормыКоллекция       - Данные виджета, по которым будет обновляться виджет.
//
Процедура ТрудозатратыВремениПоВидамРабот_ОбновитьВиджета(Форма, ДанныеВиджета)
	
	Форма[ДанныеВиджета.ИмяДанных] = ПолучитьСодержимоеHTMLВиджета(ДанныеВиджета);
	
	Если Форма.ВариантРаботыВиджетов <> "МониторРуководителя" Тогда
		
		Форма[ДанныеВиджета.ИмяДанных] = ОбернутьСодержимоеHTMLВВерсткуВиджета(
			Форма, Форма[ДанныеВиджета.ИмяДанных]);
		
	КонецЕсли;
	
КонецПроцедуры // ТрудозатратыВремениПоВидамРабот_ОбновитьВиджета()

// Функция для получения содержимого виджета версткой HTML.
//
// Параметры:
//  ДанныеВиджета  - ДанныеФормыКоллекция - Данные виджета для получения верстки.
//
// Возвращаемое значение:
//   Строка  - Содержимое HTML виджета.
//
Функция ТрудозатратыВремениПоВидамРабот_ПолучитьСодержимоеHTMLВиджета(ДанныеВиджета)
	
	НастройкиВиджета = ДанныеВиджета.Настройки;
	
	///////////////////////////////////////////////
	// Данные диаграммы для виджета.
	
	ПараметрыЗапроса = Новый Структура;
	
	Если НастройкиВиджета.Свойство("СтандартныйПериод") Тогда
		ПараметрыЗапроса.Вставить("ПериодОтчета", НастройкиВиджета.СтандартныйПериод);
	КонецЕсли;
	
	Если НастройкиВиджета.Свойство("ТипАналитики") И НастройкиВиджета.Свойство("ЗначениеАналитики") Тогда
		ЗначениеАналитики = CRM_РаботаСВиджетамиКлиентСервер.ПолучитьАктуальноеЗначениеАналитики(НастройкиВиджета);
		
		ПараметрыЗапроса.Вставить("ТипАналитики", НастройкиВиджета.ТипАналитики);
		ПараметрыЗапроса.Вставить("ЗначениеАналитики", ЗначениеАналитики);
	КонецЕсли;
	
	/////////////////////////////
	// Запрос - Получение данных.
	
	ТаблицаРезультат = ВыполнитьСКДДиаграммыДляВиджета(Отчеты.CRM_АнализТрудозатрат, ПараметрыЗапроса);
	
	Если ТаблицаРезультат = Неопределено Тогда
		Возврат ПолучитьHTMLПустогоВиджета(
			ДанныеВиджета, "Ошибка выполнения");
	КонецЕсли;
	
	/////////////////////////////
	// Запрос - Проверка на наличие данных.
	
	Если ТаблицаРезультат.Количество() = 0 Тогда
		Возврат ПолучитьHTMLПустогоВиджета(
			ДанныеВиджета, "Нет данных");
	КонецЕсли;
	
	/////////////////////////////
	// Запрос - Данные виджета для верстки.
	
	ДанныеДиаграммыHTML = Новый Массив;
	
	Для Каждого ТекущийРезультат Из ТаблицаРезультат Цикл
		
		ЕдиницаДанныхДиаграммы = ТрудозатратыВремениПоВидамРабот_ПолучитьТочкуДиаграммы();
		
		ЕдиницаДанныхДиаграммы["typeRef"] = Строка(ТекущийРезультат.ВидРабот.УникальныйИдентификатор());
		ЕдиницаДанныхДиаграммы["typeView"] = Строка(ТекущийРезультат.ВидРабот);
		ЕдиницаДанныхДиаграммы["value"] = ?(ТекущийРезультат.ТрудозатратыДляДиаграммы <> Null, ТекущийРезультат.ТрудозатратыДляДиаграммы, 0);
		
		ДанныеДиаграммыHTML.Добавить(ЕдиницаДанныхДиаграммы);
		
	КонецЦикла;
	
	/////////////////////////////
	// Содержание виджета.
	
	// Данные в JSON.
	ДанныеВиджетаСтрокой = CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(ДанныеДиаграммыHTML);
	
	// Верстка.
	HTMLСодержаниеВиджета = Справочники.CRM_Виджеты.ПолучитьМакет("HTML_ДиаграммаТрудозатратыВремениПоВидамРабот").ПолучитьТекст();
	
	// Содержимое виджета.
	HTMLСодержаниеВиджета = СтрЗаменить(HTMLСодержаниеВиджета, "'{{CRM:PLOT_DATA}}'", ДанныеВиджетаСтрокой);
	
	// Тело виджета.
	HTMLТелоВиджета = Справочники.CRM_Виджеты.ПолучитьМакет("HTML_ВиджетТело").ПолучитьТекст();
	HTMLТелоВиджета = СтрЗаменить(HTMLТелоВиджета, "{{CRM:WIDGET_TITLE}}",		Строка(ДанныеВиджета.ВариантВиджета));
	HTMLТелоВиджета = СтрЗаменить(HTMLТелоВиджета, "{{CRM:WIDGET_CONTENT}}",	HTMLСодержаниеВиджета);
	
	Возврат HTMLТелоВиджета;
	
КонецФункции // ТрудозатратыВремениПоВидамРабот_ПолучитьСодержимоеHTMLВиджета()

// Функция для получения шаблона данных диаграммы виджета.
//
// Возвращаемое значение:
//   Структура  - шаблон данныз диаграммы.
//
Функция ТрудозатратыВремениПоВидамРабот_ПолучитьТочкуДиаграммы()
	
	Возврат Новый Структура("typeRef, typeView, value");
	
КонецФункции // ТрудозатратыВремениПоВидамРабот_ПолучитьТочкуДиаграммы()

#КонецОбласти

// --------------

#Область Прочее

// Процедура используется для установки параметра в СКД.
//
// Параметры:
//  Настройки  - ЗначенияПараметровДанныхКомпоновкиДанных - Параметры СКД.
//  Параметр   - Структура                                - Ключ и Значение структуры.
//
Процедура УстановитьПараметрСКД(Настройки, Параметр)
	
	ПараметрКомпоновки = Новый ПараметрКомпоновкиДанных(Параметр.Ключ);
	ПараметрЭлемент = Настройки.НайтиЗначениеПараметра(ПараметрКомпоновки);
	
	Если ПараметрЭлемент <> Неопределено Тогда
		
		ПараметрЭлемент.Использование = Истина;
		ПараметрЭлемент.Значение = Параметр.Значение;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрСКД()

// Используется для выполнение СКД отчета для получения данных виджета.
// Берется вариант отчета <ДанныеВиджета>
//
// Параметры:
//  Отчет      - ОтчетМенеджер.<Имя отчета> - Отчет для выполнения.
//  Параметры  - Структура                  - Параметры для СКД.
//
// Возвращаемое значение:
//   ТаблицаЗначений | Неопределено  - Результат выполнения СКД.
//
Функция ВыполнитьСКДДиаграммыДляВиджета(Отчет, Параметры)
	
	///////////////////////////////////////////////
	// Данные для виджета.
	
	СКД = Отчет.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД.ВариантыНастроек.ДанныеВиджета.Настройки);
	
	НастройкиКомпоновщика = КомпоновщикНастроек.Настройки;
	ПараметрыНастройки = НастройкиКомпоновщика.ПараметрыДанных;
	
	///////////////////////////////////////////////
	// Параметр - аналитика.
	
	Если Параметры.ТипАналитики <> Перечисления.CRM_ВидыРазверткиПоказателей.ПоВсейКомпании Тогда
		
		Если Отчет = Отчеты.CRM_АнализТрудозатрат Тогда
			
			КлючАналитики = ?(
				Параметры.ТипАналитики = Перечисления.CRM_ВидыРазверткиПоказателей.ПоПодразделению,
				"Менеджер", "Подразделение");
			
			ЗначениеАналитики = Параметры.ЗначениеАналитики;
			
		Иначе
			
			КлючАналитики = ?(
				Параметры.ТипАналитики = Перечисления.CRM_ВидыРазверткиПоказателей.ПоМенеджеру,
				"Менеджеры", "Подразделения");
			
			ЗначениеАналитики = Новый Массив;
			ЗначениеАналитики.Добавить(Параметры.ЗначениеАналитики);
			
		КонецЕсли;
		
		ПараметрСКД = Новый Структура;
		ПараметрСКД.Вставить("Ключ", КлючАналитики);
		ПараметрСКД.Вставить("Значение", ЗначениеАналитики);
		
		УстановитьПараметрСКД(ПараметрыНастройки, ПараметрСКД);
		
	КонецЕсли;
	
	///////////////////////////////////////////////
	// Параметр - все.
	
	Для Каждого ТекущийПараметрКлючЗначение Из Параметры Цикл
		
		Если ТекущийПараметрКлючЗначение.Ключ = "ТипАналитики"
				Или ТекущийПараметрКлючЗначение.Ключ = "ЗначениеАналитики" Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьПараметрСКД(ПараметрыНастройки, ТекущийПараметрКлючЗначение);
		
	КонецЦикла;
	
	///////////////////////////////////////////////
	// Внешние наборы данных.
	
	ВнешниеНаборыДанных = Новый Структура;
	
	Если Отчет = Отчеты.CRM_ДинамикаСтатусовКлиентов Тогда
		
		НастройкаПериодОтчета = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьПараметр(
			КомпоновщикНастроек, "ПериодОтчета");
		
		НастройкаПериодичностьОтчета = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьПараметр(
			КомпоновщикНастроек, "Периодичность");
		
		ТаблицаПериодов = Отчеты.CRM_ДинамикаСтатусовКлиентов.ПериодыСДатойНаКонецПериода(
			НастройкаПериодОтчета.Значение.ДатаНачала,
			НастройкаПериодОтчета.Значение.ДатаОкончания,
			НастройкаПериодичностьОтчета.Значение);
		
		ВнешниеНаборыДанных.Вставить("ТаблицаПериодов", ТаблицаПериодов);
		
	КонецЕсли;
	
	///////////////////////////////////////////////
	// Запрос - выполнение.
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
		СКД, НастройкиКомпоновщика, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешниеНаборыДанных, , Истина);
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	
	Попытка
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ТаблицаРезультат;
	
КонецФункции // ВыполнитьСКДДиаграммыДляВиджета()

// Используется для огрукления значения для виджета.
//
// Параметры:
//  ЗначениеДляОкругления  - Число - Значение для округления.
//  ДлинаЗначения          - Число - Длина значения.
//
// Возвращаемое значение:
//   Структура  - Результат округления.
//
Функция ОкруглитьЗначениеДляВиджета(ЗначениеДляОкругления, ДлинаЗначения = 0)
	
	ЗначениеПорядок = "";
	ЗначениеСтрокой = Формат(ЗначениеДляОкругления, "ЧДЦ=0; ЧРД=,; ЧН=0; ЧГ=0");
	
	Если ДлинаЗначения = 0 Тогда
		ДлинаЗначения = СтрДлина(ЗначениеСтрокой);
	КонецЕсли;
	
	Если ДлинаЗначения > 3 И ДлинаЗначения <= 6 Тогда
		ЗначениеСтрокой = Формат(Окр(ЗначениеДляОкругления / 1000), "ЧДЦ=; ЧН=0; ЧГ=0");
		ЗначениеПорядок = НСтр("ru=' тыс';en=' thousand'");
	ИначеЕсли ДлинаЗначения > 6 И ДлинаЗначения <= 9 Тогда
		ЗначениеОкругления = ЗначениеДляОкругления / 1000000;
		
		//Если ЗначениеОкругления >= 1 и ЗначениеОкругления < 10 Тогда
		//	ЗначениеСтрокой = Формат(ЗначениеОкругления, "ЧДЦ=3; ЧН=0; ЧГ=0");
		Если ЗначениеОкругления >= 1 и ЗначениеОкругления < 100 Тогда
			ЗначениеСтрокой = Формат(ЗначениеОкругления, "ЧДЦ=2; ЧРД=,; ЧН=0; ЧГ=0");
		Иначе
			ЗначениеСтрокой = Формат(ЗначениеОкругления, "ЧДЦ=1; ЧРД=,; ЧН=0; ЧГ=0");
		КонецЕсли;
		
		ЗначениеПорядок = НСтр("ru=' млн';en=' million'");
	ИначеЕсли ДлинаЗначения > 9 И ДлинаЗначения <= 12 Тогда
		ЗначениеСтрокой = Формат(Окр(ЗначениеДляОкругления / 1000000000), "ЧДЦ=; ЧН=0; ЧГ=0");
		ЗначениеПорядок = НСтр("ru=' млрд';en=' billion'");
	ИначеЕсли ДлинаЗначения > 12 И ДлинаЗначения <= 15 Тогда
		ЗначениеСтрокой = Формат(Окр(ЗначениеДляОкругления / 1000000000000), "ЧДЦ=; ЧН=0; ЧГ=0");
		ЗначениеПорядок = НСтр("ru=' блн';en=' bln'");
	ИначеЕсли ДлинаЗначения > 15 И ДлинаЗначения <= 18 Тогда
		ЗначениеСтрокой = Формат(Окр(ЗначениеДляОкругления / 1000000000000000), "ЧДЦ=; ЧН=0; ЧГ=0");
		ЗначениеПорядок = НСтр("ru=' блрд';en=' blrd'");
	ИначеЕсли ДлинаЗначения > 18 И ДлинаЗначения <= 21 Тогда
		ЗначениеСтрокой = Формат(Окр(ЗначениеДляОкругления / 1000000000000000000), "ЧДЦ=; ЧН=0; ЧГ=0");
		ЗначениеПорядок = НСтр("ru=' трн';en=' trn'");
	ИначеЕсли ДлинаЗначения > 21 И ДлинаЗначения <= 24 Тогда
		ЗначениеСтрокой = Формат(Окр(ЗначениеДляОкругления / 1000000000000000000000), "ЧДЦ=; ЧН=0; ЧГ=0");
		ЗначениеПорядок = НСтр("ru=' тррд';en=' trrd'");
	ИначеЕсли ДлинаЗначения > 24 И ДлинаЗначения <= 27 Тогда
		ЗначениеСтрокой = Формат(Окр(ЗначениеДляОкругления / 1000000000000000000000000), "ЧДЦ=; ЧН=0; ЧГ=0");
		ЗначениеПорядок = НСтр("ru=' кван';en=' quan'");
	ИначеЕсли ДлинаЗначения > 27 И ДлинаЗначения <= 30 Тогда
		ЗначениеСтрокой = Формат(Окр(ЗначениеДляОкругления / 1000000000000000000000000000), "ЧДЦ=; ЧН=0; ЧГ=0");
		ЗначениеПорядок = НСтр("ru=' квард';en=' kvard'");
	ИначеЕсли ДлинаЗначения > 30 И ДлинаЗначения <= 33 Тогда
		ЗначениеСтрокой = Формат(Окр(ЗначениеДляОкругления / 1000000000000000000000000000000), "ЧДЦ=; ЧН=0; ЧГ=0");
		ЗначениеПорядок = НСтр("ru=' квин';en=' quin'");
	ИначеЕсли ДлинаЗначения > 33 И ДлинаЗначения <= 36 Тогда
		ЗначениеСтрокой = Формат(Окр(ЗначениеДляОкругления / 1000000000000000000000000000000000), "ЧДЦ=; ЧН=0; ЧГ=0");
		ЗначениеПорядок = НСтр("ru=' квирд';en=' quird'");
	Иначе
		ЗначениеСтрокой = Формат(Окр(ЗначениеДляОкругления), "ЧДЦ=; ЧН=0; ЧГ=0");
	КонецЕсли;
	
	РезультатОкругления = Новый Структура;
	
	РезультатОкругления.Вставить("ДлинаЗначения",	ДлинаЗначения);
	РезультатОкругления.Вставить("ЗначениеСтрокой",	ЗначениеСтрокой);
	РезультатОкругления.Вставить("ЗначениеПорядок",	ЗначениеПорядок);
	
	Возврат РезультатОкругления;
	
КонецФункции // ОкруглитьЗначениеДляВиджета()

// Используется для получения цвета тренда для ключевого показателя.
//
// Параметры:
//  ИндексЦвета  - Число - Индекс цвета тренда.
//
// Возвращаемое значение:
//   Строка  - Цвет тренда в формате HEX.
//
Функция ПолучитьЦветТренда(ИндексЦвета)
	
	Если ИндексЦвета = 0 Тогда
		Возврат "#CC5A5A";
	ИначеЕсли ИндексЦвета = 1 Тогда
		Возврат "#E1800E";
	ИначеЕсли ИндексЦвета = 2 Тогда
		Возврат "#009646";
	КонецЕсли;
	
	Возврат "#888888";
	
КонецФункции // ПолучитьЦветТренда()

// Используется для получения формата даты для графика с периодичностью.
//
// Параметры:
//  Периодичность   - ПеречислениеСсылка.Периодичность - Переодичность даты.
//  ДатаДляГрафика  - Дата                             - Дата для приведение к формату по переодичности
//
// Возвращаемое значение:
//   Строка  - Отформатированная дата.
//
Функция ПолучитьФорматДатыДляГрафикаПоПериодичности(Периодичность, ДатаДляГрафика)
	
	ЕдиницаДанныхДиаграммы = ДинамикаПродаж_ПолучитьТочкуДиаграммы();
	
	Если Периодичность = Перечисления.Периодичность.День
			Или Периодичность = Перечисления.Периодичность.Неделя Тогда
		
		НаименованиеПериода = Формат(ДатаДляГрафика, "ДФ=dd.MM.yyyy");
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		
		НаименованиеПериода = Формат(ДатаДляГрафика, "ДФ='ММММ, гггг'");
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		
		НомерКвартала = Цел((Месяц(ДатаДляГрафика) - 1) / 3) + 1;
		НаименованиеПериода = "Квартал - " + Строка(НомерКвартала) + СтрШаблон(" (%1)", Формат(ДатаДляГрафика, "ДФ='гггг'"));
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		
		НаименованиеПериода = Формат(ДатаДляГрафика, "ДФ='гггг'");
		
	Иначе
		
		НаименованиеПериода = Строка(ДатаДляГрафика);
		
	КонецЕсли;
	
	Возврат НаименованиеПериода;
	
КонецФункции // ПолучитьФорматДатыДляГрафикаПоПериодичности()

#КонецОбласти

// --------------

// +CRM_Модуль
Функция ВыполнитьСКДПоКомпоновщикуНастроек(Отчет, ДанныеВиджета)
	
	///////////////////////////////////////////////
	// Данные для виджета.
	
	СКД = Отчет.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	КомпоновщикНастроек.ЗагрузитьНастройки(CRM_РаботаСВиджетамиВызовСервера.ПолучитьНастройкиКомпоновщикаДанныхДляВариантаВиджета(ДанныеВиджета, Ложь));
	
	КомпоновщикНастроек.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра(
		"ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	КомпоновщикНастроек.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра(
		"ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	Если Отчет = Отчеты.ВыручкаИСебестоимостьПродаж Тогда
		
		СКД.НаборыДанных.ВыручкаИСебестоимостьПродажСДетализацией.Запрос = Отчет.Создать().Виджеты_ПолучитьЗапрос();
		
		СКД.НаборыДанных.ВыручкаИСебестоимостьПродажСДетализацией.Запрос = СтрЗаменить(
			СКД.НаборыДанных.ВыручкаИСебестоимостьПродажСДетализацией.Запрос, 
			"&ТекстЗапросаВесНоменклатуры1", 
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("Таблица.Номенклатура.ЕдиницаИзмерения", "Таблица.Номенклатура"));
		
		ТекстЗапроса = СтрЗаменить(
			СКД.НаборыДанных.ВыручкаИСебестоимостьПродажСДетализацией.Запрос, 
			"&ТекстЗапросаОбъемНоменклатуры1", 
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("Таблица.Номенклатура.ЕдиницаИзмерения", "Таблица.Номенклатура"));
		
		КомпоновкаДанныхСервер.НастроитьДинамическийПериод(СКД, КомпоновщикНастроек, Истина);
		
	ИначеЕсли Отчет = Отчеты.ЗадолженностьКлиентовПоСрокам Тогда
		
		СКД.НаборыДанных.НаборДанных.Запрос = Отчет.Создать().Виджеты_ПолучитьЗапрос();
		
	КонецЕсли;
	
	///////////////////////////////////////////////
	// Запрос - выполнение.
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
		СКД, КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	
	Попытка
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ТаблицаРезультат;
	
КонецФункции // ВыполнитьСКДПоКомпоновщикуНастроек()
// -CRM_Модуль

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
