///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b".
// ОбщийМодуль.ПереводыСБПc2bСлужебный.
//
// Серверные процедуры обмена данными выполнения оплат:
//  - обработчики обновления подсистемы;
//  - полученные служебных данных оплат;
//  - подготовка платежных ссылок к отправке.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

#Область СтандартныеПодсистемыБазоваяФункциональность

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных.
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"2.7.1.1",
		"Роль.ОплатаВПлатежнойСистеме",
		"Роль.ПереводыСБПc2b",
		"ИнтернетПоддержкаПользователей");
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемыОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
// 
// Параметры:
//  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.7.5.10";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9bfd37a5-e47e-46de-94b5-904f90279423");
	Обработчик.Процедура = "ПереводыСБПc2bСлужебный.ЗаполнитьИдентификаторУчастника";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ОбщиеДанные = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.ИдентификаторыОперацийСБПc2b";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение идентификатора участника СБП по данным документов операции.'");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтеграцияПодсистемИнтернетПоддержкиПользователей

#Область БазоваяФункциональностьСБП

// Возвращает список использованных для создания платежной ссылки настроек подключения по документу,
// включая частичные оплаты.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, по данным которого
//  необходимо получить список настроек.
//
// Возвращаемое значение:
//  Массив Из СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - используемые
//   в документах настройки подключения.
//
Функция НастройкиПодключенияПоДокументуОперации(ДокументОперации) Экспорт
	
	Возврат СистемаБыстрыхПлатежейСлужебный.НастройкиПодключенияПоДокументуОперации(
		ДокументОперации,
		Метаданные.РегистрыСведений.ИдентификаторыОперацийСБПc2b.Имя);
	
КонецФункции

// Формирует структуру данных для формы платежной ссылки в Системе быстрых платежей.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ отражающий операцию
//    в информационной базе;
//
// Возвращаемое значение:
//  Структура, Неопределено - данные для формы платежной ссылки в Системе быстрых платежей.
//
Функция ДанныеПлатежнойСсылки(ДокументОперации) Экспорт
	
	Возврат РегистрыСведений.ИдентификаторыОперацийСБПc2b.ДанныеПлатежнойСсылки(
		ДокументОперации);
	
КонецФункции

// Определяет данные кассовых ссылок.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения к сервису.
//
// Возвращаемое значение:
//  Структура - данные ссылок:
//   * Количество - Число - количество созданных ссылок.
//
Функция ДанныеКассовыхСсылок(НастройкаПодключения) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Количество", 0);
	
	Если Не ЗначениеЗаполнено(НастройкаПодключения) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыНастройки = Новый Структура;
	ПараметрыНастройки.Вставить("НастройкаПодключения", НастройкаПодключения);
	
	ИнтеграцияПодсистемБИП.ПриОпределенииДанныхКассовыхСсылок(
		ПараметрыНастройки,
		Результат);
	ПереводыСБПc2bПереопределяемый.ПриОпределенииДанныхКассовыхСсылок(
		ПараметрыНастройки,
		Результат);
	
	Возврат Результат;
	
КонецФункции

// Получает данные по документу операции.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ отражающий оплату
//    в информационной базе;
//
// Возвращаемое значение:
//  Структура, Неопределено - данные операции.
//
Функция ДанныеОперации(ДокументОперации) Экспорт
	
	Возврат РегистрыСведений.ИдентификаторыОперацийСБПc2b.ДанныеОперации(ДокументОперации);
	
КонецФункции

// Выполняет актуализацию статуса оплаты по ранее
// сформированному идентификатору оплаты (QR-коду).
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    продажу в информационной базе;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения оплаты;
//  ПараметрыОперации - Структура - дополнительные данные по оплате:
//    * ДатаОперации - Дата - фактическая дата оплаты в UTC;
//    * СуммаОперации - Число - фактическая суммы операции по документу;
//    * ИдентификаторОперации - Строка - ключ контроля загрузки;
//  ДанныеЧастичнойОплаты - Структура - параметры частичной оплаты.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в Системе быстрых платежей:
//    * СтатусОперации - Строка - текущее состояние операции оплаты. Для проверки статуса
//      операции, необходимо функции программного интерфейса общего модуля
//      СистемаБыстрыхПлатежейКлиентСервер. Возможные значения:
//        - "Выполняется" - подтверждение оплаты не получено;
//        - "Отменена" - оплата по ранее сформированному QR-коду невозможна;
//        - "Выполнена" - участник СБП подтвердил оплату;
//        - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки;
//    * ПараметрыОперации - Структура - дополнительные данные по оплате:
//        ** ПлатежнаяСсылка- Строка - идентификатор, по которому выполняется оплата;
//        ** ДатаОперации - Дата - фактическая дата оплаты в UTC;
//        ** Идентификатор - Строка - идентификатор операции в Системе быстрых платежей;
//        ** НазначениеПлатежа - Строка - информация о платеже, которая будет отображена пользователю
//             в момент сканирования QR-кода в мобильном приложении;
//        ** СтатусОперации - Строка - текущий статус операции;
//        ** СуммаОперации - Число - фактическая суммы оплаты по документу;
//        ** ИдентификаторОплаты - Строка - ключ контроля загрузки;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - оплата успешно проведена;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к сервису участника СБП;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//        обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция АктуализироватьСтатусОплаты(
		ДокументОплаты,
		НастройкаПодключения,
		ПараметрыОперации,
		ДанныеЧастичнойОплаты) Экспорт
	
	РезультатОперации = ПереводыСБПc2b.СтатусОплаты(
		ДокументОплаты,
		НастройкаПодключения,
		Ложь);
	РезультатОперации.Вставить("НеобходимоАктуализировать", Ложь);
	РезультатОперации.Вставить("СуммаОплаты", РезультатОперации.ПараметрыОперации.СуммаОперации);
	
	Если РезультатОперации.СтатусОперации <> СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполняется()
			И РезультатОперации.СтатусОперации <> СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка() Тогда
		
		// Изменился статус операции, необходима обработка, выполним в попытке
		Попытка
			
			СтатусОперации = РезультатОперации.СтатусОперации;
			Если СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена() Тогда
				СтатусОперацииСервиса = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена();
			ИначеЕсли СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтменена() Тогда
				СтатусОперацииСервиса = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтменена();
			Иначе
				РезультатОперации.КодОшибки = "НеизвестнаяОшибка";
				РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Неизвестный статус операции сервиса'");
				РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Неизвестный статус операции сервиса'");
			КонецЕсли;
			
			ОписаниеПараметровОперации = НовыйОписаниеПараметровОперации();
			ЗаполнитьЗначенияСвойств(
				ОписаниеПараметровОперации,
				РезультатОперации.ПараметрыОперации);
			
			Если ТипЗнч(ДокументОплаты) = Тип("ДокументСсылка.ПлатежнаяСсылкаСБП") Тогда
				ОписаниеПараметровОперации.ДокументОснование = ДанныеЧастичнойОплаты.ОснованиеПлатежа;
			КонецЕсли;
			
			ПереводыСБПc2bСервис.ПриЗагрузкеСтатусаОперации(
				ДокументОплаты,
				НастройкаПодключения,
				ОписаниеПараметровОперации,
				СтатусОперацииСервиса,
				РезультатОперации.СообщениеОбОшибке,
				Новый Массив);
			
		Исключение
			// Исключение не обрабатываем, ожидаем что документы прикладной логики обработаются методом СтатусыОперацийC2B
			СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				Истина);
		КонецПопытки;
		
		РезультатОперации.Вставить("ПлатежнаяСсылка", ПараметрыОперации.ПлатежнаяСсылка);
		
	ИначеЕсли РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполняется() Тогда
		
		// Проверка изменился ли документ оплаты
		ЗаказНаОплату = ПереводыСБПc2bСервис.ЗаказНаОплату(
			ДокументОплаты,
			НастройкаПодключения,
			Неопределено,
			РезультатОперации,
			ДанныеЧастичнойОплаты);
			
		Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			Возврат РезультатОперации;
		КонецЕсли;
		
		ПараметрыНастройкиПодключения = СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения(
			НастройкаПодключения);
		ПараметрыОперации.Вставить(
			"ИдентификаторМерчанта",
			ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
		ПараметрыОперации.Вставить(
			"ИдентификаторУчастника",
			ПараметрыНастройкиПодключения.ИдентификаторУчастника);
		
		АнализИсторическихДанных = ПереводыСБПc2bСервис.АнализИсторическихДанныхОплаты(
			ДокументОплаты,
			ЗаказНаОплату,
			"",
			ПараметрыОперации.Идентификатор,
			ПараметрыОперации);
			
		Если Не АнализИсторическихДанных.ДанныеИдентичны Тогда
			РезультатОперации.Вставить("НеобходимоАктуализировать", Истина);
		КонецЕсли;
		
		РезультатОперации.Вставить("ПлатежнаяСсылка", ПараметрыОперации.ПлатежнаяСсылка);
		РезультатОперации.Вставить("СуммаОплаты", ЗаказНаОплату.СуммаОплаты);
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Создает новый заказ на оплату и получает
// идентификатор оплаты для формирования QR-кода.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    оплату в информационной базе;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операции.
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные настройки формирования
//    заказа на оплату;
//  ДанныеЧастичнойОплаты - Структура - описание данных частичной оплаты;
//
// Возвращаемое значение:
//  Структура - результат создания динамической ссылки в Системе быстрых платежей:
//    * ПлатежнаяСсылка - Строка - идентификатор, по которому выполняется оплата;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "УжеОплачен" - документ уже оплачен;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к участнику СБП;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция СлужебныйДинамическаяСсылка(
		ДокументОперации,
		НастройкаПодключения,
		ДополнительныеПараметры = Неопределено,
		ДанныеЧастичнойОплаты = Неопределено) Экспорт
	
	ПроверитьПраваНаВыполнениеОперации();
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатПлатежнаяСсылка();
	
	// Подготовка параметров настройки подключения.
	ПараметрыНастройкиПодключения = СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения(
		НастройкаПодключения);
	
	// Проверка общих параметров подключения.
	СистемаБыстрыхПлатежейСлужебный.ПроверитьОбщиеНастройкиПодключения(
		ДокументОперации,
		НастройкаПодключения,
		ПараметрыНастройкиПодключения,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Создание нового заказа на оплату.
	Возврат ПереводыСБПc2bСервис.ДинамическаяСсылка(
		ДокументОперации,
		ПараметрыНастройкиПодключения,
		ДополнительныеПараметры,
		ДанныеЧастичнойОплаты);
	
КонецФункции

#КонецОбласти

#Область СверкаВзаиморасчетовСБПc2b

// Определяет документы оплат для проведения сверки взаиморасчетов за период.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения к сервису;
//  НачалоПериода - Дата - начало периода отбора;
//  КонецПериода - Дата - окончание периода отбора;
//
// Возвращаемое значение:
//  Массив из ДокументОперацииСБП - документы оплат за период.
//
Функция ДокументыНастройкиПодключенияЗаПериод(
		НастройкаПодключения,
		НачалоПериода,
		КонецПериода) Экспорт
	
	Если Не ПереводыСБПc2b.ПереводыСБПДоступны() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в Системе быстрых платежей.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	Возврат РегистрыСведений.ИдентификаторыОперацийСБПc2b.ДокументНастройкиПодключенияЗаПериод(
		НастройкаПодключения,
		НачалоПериода,
		КонецПериода);
	
КонецФункции

// Определяет параметры документов оплат для проведения сверки взаиморасчетов за период.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения к сервису;
//  НачалоПериода - Дата - начало периода отбора;
//  КонецПериода - Дата - окончание периода отбора;
//
// Возвращаемое значение:
//  Структура - данные документов оплат за период.
//
Функция ОперацииНастройкиПодключенияЗаПериод(
		НастройкаПодключения,
		НачалоПериода,
		КонецПериода) Экспорт
	
	Если Не ПереводыСБПc2b.ЧтениеПереводовСБПДоступно() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено чтение операций в Системе быстрых платежей.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	Возврат РегистрыСведений.ИдентификаторыОперацийСБПc2b.ОперацииНастройкиПодключенияЗаПериод(
			НастройкаПодключения,
			НачалоПериода,
			КонецПериода);
	
КонецФункции

#КонецОбласти

#Область ОнлайнЗаказы

// Возвращает параметры оплат СБП c2b документа операции.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения к СБП.
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, для которого
//    формируются параметры оплат.
//
// Возвращаемое значение:
//  Структура - параметры оплат c2b:
//    * ШаблоныНазначения - ТаблицаЗначений - см. СистемаБыстрыхПлатежейСлужебный.НовыйШаблоныНазначений.
//    * НазначениеПлатежа - Строка - Назначение платежа.
//
Функция ПараметрыОплаты(НастройкаПодключения, ДокументОперации) Экспорт
	
	ПараметрыОплатыСБПc2b = Новый Структура;
	ПараметрыОплатыСБПc2b.Вставить("ШаблоныНазначения", Неопределено);
	ПараметрыОплатыСБПc2b.Вставить("НазначениеПлатежа", "");
	
	ПараметрыОплатыСБПc2b.ШаблоныНазначения = СистемаБыстрыхПлатежейСлужебный.ПриОпределенииШаблоновНазначенияЗаказаСБП(
		НастройкаПодключения,
		ДокументОперации,
		Перечисления.ВариантыНастройкиСБП.c2b);
		
	Возврат ПараметрыОплатыСБПc2b;
	
КонецФункции

// Возвращает данные оплат по документам платежей.
//
// Параметры:
//  ДокументОперации - Массив Из ОпределяемыйТип.ДокументОперацииСБП - документы операций;
//
// Возвращаемое значение:
//  Соответствие - данные оплат по документам в Системе быстрых платежей:
//   * Ключ - ОпределяемыйТип.ДокументОперацииСБП - документ операции в СБП
//   * Значение - Структура - содержит описание данных оплаты по документу операции:
//     ** НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения к СБП.
//     ** РезультатОбработки - Структура - содержит результаты обработки статуса операции
//       *** СтатусОперации - Строка - текущее состояние операции оплаты. Возможные значения:
//           - "Выполняется" - подтверждение оплаты не получено;
//           - "Отменена" - оплата по ранее сформированному QR-коду невозможна;
//           - "Выполнена" - участник СБП подтвердил оплату;
//           - "Отклонена" - оплата по ранее сформированному QR-коду невозможна;
//           - "Ошибка" - неизвестный статус операции.
//       *** ПараметрыОперации - Структура - Содержит данные операции:
//         **** ДатаОперации - Дата - фактическая дата оплаты в UTC;
//         **** СуммаОперации - Число - Сумма оплаты в СБП
//         **** ИдентификаторОперации - Строка - идентификатор выполненной операции;
//         **** ДокументЧастичнойОплаты - ДокументСсылка.ПлатежнаяСсылкаСБП - документ частичной оплаты.
//         **** ИдентификаторОплаты - Строка - идентификатор оплаты;
//
Функция ДанныеОпераций(ДокументыОпераций) Экспорт
	
	ДанныеОпераций = РегистрыСведений.ИдентификаторыОперацийСБПc2b.ДанныеОпераций(ДокументыОпераций);
	
	Результат = Новый Соответствие;
	
	Для Каждого ДанныеОперации Из ДанныеОпераций Цикл
		
		Если ДанныеОперации.Значение = Неопределено Тогда
			Результат.Вставить(
				ДанныеОперации.Ключ,
				Неопределено);
		Иначе
			Результат.Вставить(
				ДанныеОперации.Ключ,
				ЗаполнитьПараметрыОперации(ДанныеОперации.Значение));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Подготавливает описание параметров оплаты по переданным данным заказа и настройке подключения,
// для дальнейшей записи в подсистему.
//
// Параметры:
//  ДанныеЗаказа - Структура - Содержит данные заказа
//    * ИдентификаторЗаказа - Строка - Идентификатор онлайн-заказа;
//    * Статус - Строка - Статус онлайн-заказа;
//    * СуммаЗаказа - Число - Сумма онлайн-заказа;
//    * СпособОплаты - Перечисление.СпособыОплатыОнлайнЗаказов - Способ оплаты онлайн-заказа;
//    * ДатаОплаты - дата получения данных об оплате сервисом;
//    * КонтрольнаяСумма - Строка - Значение контрольной суммы заказа;
//    * ВерсияКонтрольнойСуммы - Число - Версия расчета контрольной суммы заказа;
//    * ОплатаСБП - Структура, Неопределено - Содержит данные операции СБП, в том случае когда
//      значение Свойства СпособОплаты = Перечисления.СпособыОплатыОнлайнЗаказов.СБПc2b:
//      ***Идентификатор - Строка - идентификатор операции;
//      ***ИдентификаторОплаты - Строка - идентификатор оплаты в СБП;
//      ***ИдентификаторПлатежнойСистемы - Строка - идентификатор оплаты в Системе быстрых платежей;
//      ***ИдентификаторМерчанта - Строка - идентификатор мерчанта в Системе быстрых платежей;
//      ***НазначениеПлатежа - Строка - назначение платежа;
//      ***ДатаОперации - Дата - фактическая дата оплаты в UTC;
//  ПараметрыНастройкиОплаты - Соответствие - Содержит параметры настройки вида оплаты;
//
// Возвращаемое значение:
//  Структура - параметры оплаты.
//
Функция ЗаполнитьПараметрыОплаты(ДанныеЗаказа, ПараметрыНастройкиОплаты) Экспорт
	
	ПараметрыОперации = НовыйПараметрыОперации();
	
	ПараметрыОперации.ДатаОперации          = ДанныеЗаказа.ОплатаСБП.ДатаОперации;
	ПараметрыОперации.СуммаОперации         = ДанныеЗаказа.СуммаЗаказа;
	ПараметрыОперации.Идентификатор         = ДанныеЗаказа.ОплатаСБП.Идентификатор;
	ПараметрыОперации.ИдентификаторОперации = ДанныеЗаказа.ОплатаСБП.ИдентификаторПлатежнойСистемы;
	ПараметрыОперации.ИдентификаторОплаты   = ДанныеЗаказа.ОплатаСБП.ИдентификаторОплаты;
	ПараметрыОперации.ИдентификаторМерчанта = ДанныеЗаказа.ОплатаСБП.ИдентификаторМерчанта;
	ПараметрыОперации.НазначениеПлатежа     = ДанныеЗаказа.ОплатаСБП.НазначениеПлатежа;
	
	Результат = Новый Структура;
	
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("ПараметрыОперации", ПараметрыОперации);
	РезультатОбработки.Вставить("СообщениеОбОшибке", "");
	РезультатОбработки.Вставить(
		"СтатусОперации",
		СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена());
	
	Результат.Вставить("НастройкаПодключения", ПараметрыНастройкиОплаты.НастройкаПодключения);
	Результат.Вставить("РезультатОбработки",   РезультатОбработки);
	
	Возврат Результат;
	
КонецФункции

// Выполняет запись данных оплаты заказа.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ по которому была выполнена оплата;
//  ПараметрыОплаты - Структура - Содержит параметры оплаты  см.ПереводыСБПc2bСлужебный.ПриЗаполненииПараметровОплаты;
//  ПараметрыНастройкиОплаты - Соответствие - параметры настройки оплаты.
//
Процедура ЗаписатьДанныеОплаты(
		ДокументОперации,
		ПараметрыОплаты,
		ПараметрыНастройкиОплаты) Экспорт
	
	ПараметрыОперацииСБП = ПараметрыОплаты.РезультатОбработки.ПараметрыОперации;
	
	РегистрыСведений.ИдентификаторыОперацийСБПc2b.ЗаписатьНовыеДанныеОплаты(
		ДокументОперации,
		ПараметрыОперацииСБП.СуммаОперации,
		ПараметрыНастройкиОплаты,
		ПараметрыОперацииСБП);
	
	ДанныеОплаты = Новый Структура;
	ДанныеОплаты.Вставить("ДатаОплаты",        ПараметрыОперацииСБП.ДатаОперации);
	ДанныеОплаты.Вставить("СуммаОплаты",       ПараметрыОперацииСБП.СуммаОперации);
	ДанныеОплаты.Вставить("НазначениеПлатежа", ПараметрыОперацииСБП.НазначениеПлатежа);
	
	РегистрыСведений.ДанныеОперацийСБПc2b.СохранитьДанныеОплаты(
		ПараметрыОперацииСБП.Идентификатор,
		ДанныеОплаты,
		"",
		ДокументОперации,
		ПараметрыОперацииСБП.ИдентификаторМерчанта);
	
КонецПроцедуры

// Выполняет обработку назначения платежа.
//
// Параметры:
//  НазначениеПлатежа - Строка - Назначение платежа.
//
Процедура ПодготовитьНазначениеПлатежа(НазначениеПлатежа) Экспорт
	
	Если СтрДлина(НазначениеПлатежа) > 140 Тогда
		НазначениеПлатежа = Лев(НазначениеПлатежа, 140);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку параметров оплат.
//
// Параметры:
//  ПараметрыОплаты - Структура - Содержит параметры оплат онлайн-заказа;
//  РезультатОперации - Структура - результат выполнения операции.
//
Процедура ПроверитьПараметрыОплат(ПараметрыОплаты, РезультатОперации) Экспорт
	
	ПроверитьНазначениеПлатежа(ПараметрыОплаты.НазначениеПлатежа, РезультатОперации);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

// Формирует новое описание параметров операции, используется в длительных операциях и переопределяемых методах.
//
// Возвращаемое значение:
//  Структура - содержит описание параметров операции:
//    * ДатаОперации - Дата - фактическая дата операции в UTC;
//    * СуммаОперации - Число - фактическая суммы возврата по документу;
//    * ИдентификаторОперации -  - Строка - ключ контроля загрузки;
//    * ДокументОснование - ОпределяемыйТип.ДокументОперацииСБП - документ основание платежа.
//
Функция НовыйОписаниеПараметровОперации() Экспорт
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ДатаОперации", Дата(1, 1, 1));
	ПараметрыОперации.Вставить("СуммаОперации", Неопределено);
	ПараметрыОперации.Вставить("ИдентификаторОперации", "");
	ПараметрыОперации.Вставить("ИдентификаторОплаты", "");
	ПараметрыОперации.Вставить("ДокументОснование", Неопределено);
	
	Возврат ПараметрыОперации;
	
КонецФункции

// Создает описание результат длительной операции в сервисе.
//
// Возвращаемое значение:
//  Структура - результат длительной операции:
//    * СтатусОперации - Строка - текущее состояние операции оплаты:
//       - "Выполняется" - подтверждение оплаты не получено;
//       - "Отменена" - оплата по оплата по ранее сформированному QR-коду не возможна;
//       - "Выполнена" - участник СБП подтвердил оплату;
//       - "ТребуетсяПодтверждение" - необходимо подтвердить действие;
//       - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки.
//    * ПараметрыОперации - Структура - содержит дополнительные данные по операции:
//        ** ДатаОперации - Дата - фактическая дата оплаты в UTC;
//        ** СуммаОперации - Число - фактическая суммы оплаты по документу;
//        ** ИдентификаторОперации - Строка - ключ контроля загрузки.
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция НовыйРезультатДлительнойОперации() Экспорт
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатДлительнойОперации();
	РезультатОперации.Вставить("ПараметрыОперации", НовыйОписаниеПараметровОперации());
	
	Возврат РезультатОперации;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Выполняет заполнение идентификатора участника в исторических данных при переходе на версию 2.7.4
//
// Параметры:
//  Параметры - Структура, Неопределено - параметры обновления.
//
Процедура ЗаполнитьИдентификаторУчастника(Параметры = Неопределено) Экспорт
	
	РеквизитыРегистра = Метаданные.РегистрыСведений.ИдентификаторыОперацийСБПc2b.Реквизиты;
	
	Если РеквизитыРегистра.Найти("НастройкаПодключения") = Неопределено
		Или РеквизитыРегистра.Найти("ИдентификаторУчастника") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пока Истина Цикл
		
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1000
			|	ИдентификаторыОперацийСБПc2b.ДокументОперации КАК ДокументОперации
			|ПОМЕСТИТЬ ВТ_ДокументыОпераций
			|ИЗ
			|	РегистрСведений.ИдентификаторыОперацийСБПc2b КАК ИдентификаторыОперацийСБПc2b
			|ГДЕ
			|	ИдентификаторыОперацийСБПc2b.ИдентификаторУчастника = """"
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ДокументыОпераций.ДокументОперации КАК ДокументОперации
			|ИЗ
			|	ВТ_ДокументыОпераций КАК ВТ_ДокументыОпераций";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИдентификаторыОперацийСБПc2b");
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДокументОперации", "ДокументОперации");
			Блокировка.Заблокировать();
			
			ЗапросДанныхЗаписей = Новый Запрос;
			ЗапросДанныхЗаписей.МенеджерВременныхТаблиц = МенеджерВТ;
			ЗапросДанныхЗаписей.Текст =
				"ВЫБРАТЬ
				|	*,
				|	ИдентификаторыОперацийСБПc2b.НастройкаПодключения.ИдентификаторУчастника КАК ИдентификаторУчастникаПоНастройке
				|ИЗ
				|	РегистрСведений.ИдентификаторыОперацийСБПc2b КАК ИдентификаторыОперацийСБПc2b
				|ГДЕ
				|	ИдентификаторыОперацийСБПc2b.ДокументОперации В
				|			(ВЫБРАТЬ
				|				ВТ_ДокументыОпераций.ДокументОперации
				|			ИЗ
				|				ВТ_ДокументыОпераций КАК ВТ_ДокументыОпераций)";
			
			ВыборкаДанныхЗаписей = ЗапросДанныхЗаписей.Выполнить().Выбрать();
			
			Пока ВыборкаДанныхЗаписей.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(ВыборкаДанныхЗаписей.ИдентификаторУчастникаПоНастройке) Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Для документа операции %1 в в регистре сведений ИдентификаторыОперацийСБПc2b не заполнена настройка подключения.'"),
						ВыборкаДанныхЗаписей.ДокументОперации);
				КонецЕсли;
				
				НаборЗаписей = РегистрыСведений.ИдентификаторыОперацийСБПc2b.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ДокументОперации.Установить(ВыборкаДанныхЗаписей.ДокументОперации);
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаДанныхЗаписей);
				Запись.ИдентификаторУчастника = ВыборкаДанныхЗаписей.ИдентификаторУчастникаПоНастройке;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось выполнить заполнение идентификатора участника (с2b) в обработчике обновления по причине:
						|%1'"),
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
			СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
				ТекстОшибки,
				Истина);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОнлайнЗаказы

// Возвращает новое описание параметров операции
//
// Возвращаемое значение:
//  Структура - параметры операции.
//
Функция НовыйПараметрыОперации()
	
	Результат = Новый Структура;
	Результат.Вставить("ДатаОперации",            Дата(1, 1, 1));
	Результат.Вставить("СуммаОперации",           0);
	Результат.Вставить("Идентификатор",           "");
	Результат.Вставить("ИдентификаторОперации",   "");
	Результат.Вставить("ИдентификаторОплаты",     "");
	Результат.Вставить("ИдентификаторМерчанта",   "");
	Результат.Вставить("ДокументЧастичнойОплаты", Документы.ПлатежнаяСсылкаСБП.ПустаяСсылка());
	Результат.Вставить("НастройкаПодключения",    Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей.ПустаяСсылка());
	Результат.Вставить("НазначениеПлатежа",       "");
	
	Возврат Результат;
	
КонецФункции

// Подготавливает и возвращает параметры операции для передачи в отложенный обработчик.
//
// Параметры:
//  ДанныеОперации - Структура - данные операции, хранящиеся в кэше подсистемы;
//
// Возвращаемое значение:
// Структура - содержит заполненные параметры операции
//   * НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения к СБП.
//   * РезультатОбработки - Структура - содержит результаты обработки статуса операции
//     ** СтатусОперации - Строка - текущее состояние операции оплаты. Возможные значения:
//        - "Выполняется" - подтверждение оплаты не получено;
//        - "Отменена" - оплата по ранее сформированному QR-коду невозможна;
//        - "Выполнена" - участник СБП подтвердил оплату;
//        - "Отклонена" - оплата по ранее сформированному QR-коду невозможна;
//        - "Ошибка" - неизвестный статус операции.
//     ** ПараметрыОперации - Структура - Содержит данные операции:
//       *** ДатаОперации - Дата - фактическая дата оплаты в UTC;
//       *** СуммаОперации - Число - Сумма оплаты в СБП
//       *** ИдентификаторОперации - Строка - идентификатор выполненной операции;
//       *** ДокументЧастичнойОплаты - ДокументСсылка.ПлатежнаяСсылкаСБП - документ частичной оплаты.
//       *** ИдентификаторОплаты - Строка - идентификатор оплаты;
//
Функция ЗаполнитьПараметрыОперации(ДанныеОперации)
	
	Результат = Новый Структура;
	
	ПараметрыОперацииСБП = Новый Структура;
	ПараметрыОперацииСБП.Вставить("ДатаОперации",            ДанныеОперации.ДатаОперации);
	ПараметрыОперацииСБП.Вставить("СуммаОперации",           ДанныеОперации.СуммаОперации);
	ПараметрыОперацииСБП.Вставить("ИдентификаторОперации",   ДанныеОперации.ИдентификаторОперации);
	ПараметрыОперацииСБП.Вставить("ДокументЧастичнойОплаты", Документы.ПлатежнаяСсылкаСБП.ПустаяСсылка());
	ПараметрыОперацииСБП.Вставить("ИдентификаторОплаты",     ДанныеОперации.ИдентификаторОплаты);
	
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("ПараметрыОперации", ПараметрыОперацииСБП);
	РезультатОбработки.Вставить("СообщениеОбОшибке", "");
	РезультатОбработки.Вставить(
		"СтатусОперации",
		СистемаБыстрыхПлатежейСлужебный.ПолучитьСтатусОперацииПоИдентификатору(ДанныеОперации.СтатусОперации));
	
	Результат.Вставить("НастройкаПодключения", ДанныеОперации.НастройкаПодключения);
	Результат.Вставить("РезультатОбработки",   РезультатОбработки);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаПлатежнойСсылки

// Регистрирует новую кассовую ссылку и получает
// идентификатор оплаты для формирования QR-кода.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения оплаты.
//  ИдентификаторОплаты - Строка, Неопределено - идентификатор зарегистрированной ссылки.
//
// Возвращаемое значение:
//  Структура - результат создания кассовый ссылки в Системе быстрых платежей:
//    * ДанныеСсылки - Структура - данные кассовой ссылки:
//      ** КассоваяСсылка - Строка - ссылка, по которой будет выполнятся оплата;
//      ** ИдентификаторОплаты - Строка - идентификатор зарегистрированной ссылки;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к Системе быстрых платежей;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция СлужебныйКассоваяСсылка(
		НастройкаПодключения,
		ИдентификаторОплаты) Экспорт
	
	ПроверитьПраваНаВыполнениеОперации();
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("ИдентификаторОплаты", "");
	РезультатОперации.Вставить("КассоваяСсылка", "");
	РезультатОперации.Удалить("ПлатежнаяСсылкаСБП");
	
	// Подготовка параметров настройки подключения.
	ПараметрыНастройкиПодключения = СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения(
		НастройкаПодключения);
	
	// Проверка общих параметров подключения.
	СистемаБыстрыхПлатежейСлужебный.ПроверитьОбщиеНастройкиПодключенияБезДокументаОперации(
		НастройкаПодключения,
		ПараметрыНастройкиПодключения,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Создание новой кассовой ссылки.
	Возврат ПереводыСБПc2bСервис.КассоваяСсылка(
		ПараметрыНастройкиПодключения,
		ИдентификаторОплаты);
	
КонецФункции

// Формирует настройки подключения для выполнения запросов.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, по данным которого
//    необходимо получить список настроек.
//
// Возвращаемое значение:
//  Структура - см. СистемаБыстрыхПлатежейСлужебный.НовыйПараметрыНастройкиПодключения.
//
Функция ПараметрыНастройкиПодключенияПоДокументу(ДокументОперации) Экспорт
	
	// Заполнение настроек проведения оплаты.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыОперацийСБПc2b.ИдентификаторМерчанта КАК ИдентификаторМерчанта,
	|	ВЫБОР
	|		КОГДА ИдентификаторыОперацийСБПc2b.ИдентификаторУчастника <> """"
	|			ТОГДА ИдентификаторыОперацийСБПc2b.ИдентификаторУчастника
	|		ИНАЧЕ ИдентификаторыОперацийСБПc2b.НастройкаПодключения.ИдентификаторУчастника
	|	КОНЕЦ КАК ИдентификаторУчастника,
	|	ИдентификаторыОперацийСБПc2b.НастройкаПодключения.Ссылка КАК НастройкаПодключения,
	|	ИдентификаторыОперацийСБПc2b.НастройкаПодключения.Используется КАК Используется,
	|	ИдентификаторыОперацийСБПc2b.НастройкаПодключения.Ссылка КАК НастройкаПодключенияСсылка,
	|	ЕСТЬNULL(НастройкиУчастниковСБП.%1, ""UNKNOW"") КАК ТипАутентификации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НастройкиУчастниковСБП.ПеренаправлениеПоСсылке, ЛОЖЬ)
	|			ТОГДА ИдентификаторыОперацийСБПc2b.НастройкаПодключения.СсылкаПеренаправления
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СсылкаПеренаправления
	|ИЗ
	|	РегистрСведений.ИдентификаторыОперацийСБПc2b КАК ИдентификаторыОперацийСБПc2b
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
	|		ПО (ВЫБОР
	|				КОГДА ИдентификаторыОперацийСБПc2b.ИдентификаторУчастника <> """"
	|					ТОГДА ИдентификаторыОперацийСБПc2b.ИдентификаторУчастника
	|				ИНАЧЕ ИдентификаторыОперацийСБПc2b.НастройкаПодключения.ИдентификаторУчастника
	|			КОНЕЦ = НастройкиУчастниковСБП.Идентификатор)
	|ГДЕ
	|	ИдентификаторыОперацийСБПc2b.ДокументОперации = &ДокументОперации";
	
	Запрос.УстановитьПараметр("ДокументОперации", ДокументОперации);
	
	ИмяПоля = "";
	СистемаБыстрыхПлатежейСобытия.ПриОпределенииИмениПоляТипаАутентификации(
		Перечисления.ВариантыНастройкиСБП.c2b,
		ИмяПоля);
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ИмяПоля);
	
	Возврат СистемаБыстрыхПлатежейСлужебный.НовыйПараметрыНастройкиПодключения(
		Запрос,
		"РегистрСведений");
	
КонецФункции

// Формирует настройки подключения для выполнения запросов.
//
// Параметры:
//  ДокументыОперации - Массив Из ОпределяемыйТип.ДокументОперацииСБП - документы, по данным которого
//    необходимо получить список настроек.
//
// Возвращаемое значение:
//  Соответствие - Описывает настройки подключения для переданных документов
//    * Ключ - ОпределяемыйТип.ДокументОперацииСБП - документ по которому получен список настроек.
//    * Значение - Структура - см. СистемаБыстрыхПлатежейСлужебный.НовыйПараметрыНастройкиПодключения.
//
Функция ПараметрыНастроекПодключенияПоДокументам(ДокументыОперации) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыОперацийСБПc2b.ДокументОперации КАК ДокументОперации,
	|	ИдентификаторыОперацийСБПc2b.ИдентификаторМерчанта КАК ИдентификаторМерчанта,
	|	ВЫБОР
	|		КОГДА ИдентификаторыОперацийСБПc2b.ИдентификаторУчастника <> """"
	|			ТОГДА ИдентификаторыОперацийСБПc2b.ИдентификаторУчастника
	|		ИНАЧЕ ИдентификаторыОперацийСБПc2b.НастройкаПодключения.ИдентификаторУчастника
	|	КОНЕЦ КАК ИдентификаторУчастника,
	|	ИдентификаторыОперацийСБПc2b.НастройкаПодключения.Ссылка КАК НастройкаПодключения,
	|	ИдентификаторыОперацийСБПc2b.НастройкаПодключения.Используется КАК Используется,
	|	ЕСТЬNULL(НастройкиУчастниковСБП.ТипАутентификацииc2b, ""UNKNOW"") КАК ТипАутентификации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НастройкиУчастниковСБП.ПеренаправлениеПоСсылке, ЛОЖЬ)
	|			ТОГДА ИдентификаторыОперацийСБПc2b.НастройкаПодключения.СсылкаПеренаправления
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СсылкаПеренаправления
	|ИЗ
	|	РегистрСведений.ИдентификаторыОперацийСБПc2b КАК ИдентификаторыОперацийСБПc2b
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
	|		ПО (ВЫБОР
	|				КОГДА ИдентификаторыОперацийСБПc2b.ИдентификаторУчастника <> """"
	|					ТОГДА ИдентификаторыОперацийСБПc2b.ИдентификаторУчастника
	|				ИНАЧЕ ИдентификаторыОперацийСБПc2b.НастройкаПодключения.ИдентификаторУчастника
	|			КОНЕЦ = НастройкиУчастниковСБП.Идентификатор)
	|ГДЕ
	|	ИдентификаторыОперацийСБПc2b.ДокументОперации В(&ДокументыОперации)";
	
	Запрос.УстановитьПараметр("ДокументыОперации", ДокументыОперации);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.ИдентификаторУчастника = СистемаБыстрыхПлатежейКлиентСервер.ИдентификаторНеизвестногоУчастника() Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не определен идентификатор участника Системы быстрых платежей для мерчанта %1.
					|Для продолжения работы необходимо перейти к настройкам подключения и выбрать участника Системы быстрых платежей.'"),
				ВыборкаДетальныеЗаписи.ИдентификаторМерчанта);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИдентификаторУчастника) Тогда
			СистемаБыстрыхПлатежейСлужебный.УстановитьИдентификаторУчастникаСБП();
		КонецЕсли;
		
		ПараметрыНастройкиПодключения = Новый Структура;
		ПараметрыНастройкиПодключения.Вставить("ИдентификаторМерчанта", ВыборкаДетальныеЗаписи.ИдентификаторМерчанта);
		ПараметрыНастройкиПодключения.Вставить("ИдентификаторУчастника", ВыборкаДетальныеЗаписи.ИдентификаторУчастника);
		ПараметрыНастройкиПодключения.Вставить("НастройкаПодключения", ВыборкаДетальныеЗаписи.НастройкаПодключения);
		ПараметрыНастройкиПодключения.Вставить("Используется", ВыборкаДетальныеЗаписи.Используется);
		ПараметрыНастройкиПодключения.Вставить("ТипАутентификации", ВыборкаДетальныеЗаписи.ТипАутентификации);
		ПараметрыНастройкиПодключения.Вставить("СсылкаПеренаправления", ВыборкаДетальныеЗаписи.СсылкаПеренаправления);
		
		Результат.Вставить(ВыборкаДетальныеЗаписи.ДокументОперации, ПараметрыНастройкиПодключения);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункцииПрикладныхОпераций

// Проверяет права на вызов прикладных операций Системы быстрых платежей
// в случае отсутствия прав, вызывается исключение.
//
Процедура ПроверитьПраваНаВыполнениеОперации() Экспорт
	
	Если Не ПереводыСБПc2b.ПереводыСБПДоступны() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в Системе быстрых платежей.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку назначения платежа
//
// Параметры:
//  НазначениеПлатежа - Строка - назначение платежа;
//  РезультатОперации - Структура - результат выполнения операции.
//
Процедура ПроверитьНазначениеПлатежа(НазначениеПлатежа, РезультатОперации) Экспорт
	
	ЗапрещенныеСимволы = СистемаБыстрыхПлатежейКлиентСервер.ЗапрещенныеСимволыНазначенияПлатежа(
		НазначениеПлатежа);
		
	Если ЗапрещенныеСимволы.Количество() <> 0 Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В назначение присутствуют запрещенные символы: %1. Обратитесь к администратору.'"),
			СтрСоединить(ЗапрещенныеСимволы, ","));
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В назначение присутствуют запрещенные символы: %1. Необходимо обновить назначения платежей в настройках подключения.'"),
			СтрСоединить(ЗапрещенныеСимволы, ","));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

