////////////////////////////////////////////////////////////////////////////////
// Подсистема "Сервис доставки".
// ОбщийМодуль.СервисДоставкиКлиент.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДлительныеОперации

// Обработка после завершения длительной операции.
// 
// Параметры:
//  Результат - Структура, Неопределено - Результат
//  ПараметрыОперации - Структура - Параметры операции
Процедура ПослеЗавершенияДлительнойОперации(Результат, ПараметрыОперации) Экспорт
	
	Если Результат <> Неопределено И Не ПараметрыОперации.ОбработкаРезультатаНаСервере Тогда
		УдалитьИзВременногоХранилища(Результат.АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Открыть форму сервиса доставки.
// 
// Параметры:
//  ПараметрыФормы -  Структура - Параметры формы.
//  См. описание НовыйПараметрыОткрытьФормуСервисаДоставки.
//  См. описание НовыйПараметрыОткрытьФормуСпискаЗаказовНаДоставку.
//	ДополнительныеПараметры - Структура, Неопределено - данные владельца формы. Свойства:
//	 * Форма - ФормаКлиентскогоПриложения - форма, из которой происходит вызов формы сервиса доставки
//	 * Элемент - ДекорацияФормы, ПолеФормы - элемент формы, при нажатии на который происходит вызов формы сервиса доставки
Процедура ОткрытьФормуСервисаДоставки(Знач ПараметрыФормы, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	// Дозаполнение обязательных параметров. Проверка доступности сервиса
	СервисДоставкиВызовСервера.ПараметрыСервисаДоставки(ПараметрыФормы);
	
	Если ЗначениеЗаполнено(ПараметрыФормы.ТипГрузоперевозки) Тогда
		Если ПараметрыФормы.ПараметрыСервисаДоставки.ИнтернетПоддержкаПодключена Тогда
			ОткрытьФормуСервисаДоставкиЗавершение(Истина, ПараметрыФормы);
		Иначе
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ОткрытьФормуСервисаДоставкиЗавершение", ЭтотОбъект, ПараметрыФормы);
			ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОповещениеОЗавершении , ЭтотОбъект);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДоступныеСервисы = ПараметрыФормы.ПараметрыСервисаДоставки.ДоступныеСервисыДоставки;
	КоличествоДоступныхСервисов = ДоступныеСервисы.Количество();
	Если КоличествоДоступныхСервисов = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нет доступных сервисов доставки.'"));
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ОписаниеОЗавершении = Новый ОписаниеОповещения("ПослеВыбораГрузоперевозчика", ЭтотОбъект, ПараметрыФормы);
		// Откроем список выбора грузоперевозчика и разместим его на экране рядом с элементом-источником
		СписокДоступныхСервисов = Новый СписокЗначений;
		Для Каждого Сервис Из ДоступныеСервисы Цикл
			СписокДоступныхСервисов.Добавить(Сервис, СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(Сервис));
		КонецЦикла;
		ДополнительныеПараметры.Форма.ПоказатьВыборИзМеню(ОписаниеОЗавершении, СписокДоступныхСервисов, ДополнительныеПараметры.Элемент);
	Иначе
		ОписаниеОЗавершении = Новый ОписаниеОповещения("ПослеВыбораГрузоперевозчика", ЭтотОбъект, ПараметрыФормы);
		ОткрытьФорму("Обработка.СервисДоставки.Форма.ВыборТипаГрузоперевозки",
			Новый Структура("ДоступныеСервисы", ДоступныеСервисы), ЭтотОбъект, , , , ОписаниеОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

// Открыть форму сервиса доставки из основания.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма клиентского приложения
//  Основание - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки - Документ-основание
Процедура ОткрытьФормуСервисаДоставкиИзОснования(Знач Форма, Знач Основание) Экспорт
	
	ПараметрыФормы = НовыеПараметрыОткрытьФормуСпискаЗаказовНаДоставку();
	
	Если Форма.ТекущийЭлемент.Имя = "ДекорацияСервисДоставкиСписокЗаказов" Тогда
		ПараметрыФормы.ДокументыОснования.Добавить(Основание);
		ПараметрыФормы.ОрганизацияБизнесСети = Форма.Объект.Организация;
	ИначеЕсли ЗначениеЗаполнено(Основание) Тогда
		ПараметрыФормы.ДокументыОснования.Добавить(Основание);
		ПараметрыФормы.ОрганизацияБизнесСети = Форма.Объект.Организация;
		ПараметрыФормы.РежимВыбора = Истина;
		ПараметрыФормы.ОбработкаВыбора = СервисДоставкиКлиентСервер.ИмяПроцедурыДобавитьДокументОснованиеВВыбранныйЗаказНаДоставку();
	КонецЕсли;
	
	Если ПараметрыФормы.ДокументыОснования.Количество() = 1 Тогда
		ПараметрыФормы.Вставить("ДокументОснование", ПараметрыФормы.ДокументыОснования[0].Значение);
	КонецЕсли;
	
	ДанныеВладельцаФормы = Новый Структура;
	ДанныеВладельцаФормы.Вставить("Форма", Форма);
	ДанныеВладельцаФормы.Вставить("Элемент", Форма.ТекущийЭлемент);
	
	ОткрытьФормуСервисаДоставки(ПараметрыФормы, ДанныеВладельцаФормы);
	
КонецПроцедуры

// Открывает форму подчиненных Заказов на доставку.
//
// Параметры:
//  Параметры - Структура - Параметры открытия формы
Процедура ОткрытьФормуПодчиненныхЗаказовНаДоставку(Параметры) Экспорт
	
	ВладелецФормы = Параметры.Форма;
	Параметры.Удалить("Форма");
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.ПодчиненныеЗаказы",
		Параметры,
		ВладелецФормы, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму общих настроек из обработки "СервисДоставки".
//
// Параметры:
//  Параметры - Структура - Параметры открытия формы
//
Процедура ОткрытьФормуОбщиеНастройкиСервисаДоставки(Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	ВладелецФормы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ВладелецФормы");
	Параметры.Удалить("ВладелецФормы");
	
	ОписаниеОповещенияОЗакрытии = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ОписаниеОповещенияОЗакрытии");
	Параметры.Удалить("ОписаниеОповещенияОЗакрытии");
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.ОбщиеНастройки",
		Параметры,
		ВладелецФормы, , , ,
		ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Создать шаблон по заказу на доставку.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Значение - Строка - Данные заказа на доставку в формате СтрокаВнутр
Процедура СоздатьШаблонПоЗаказуНаДоставку(Форма, Значение) Экспорт
	
	Если ПустаяСтрока(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	ПараметрыШаблона = СервисДоставкиКлиентСервер.НовыеПараметрыШаблона();
	
	ЗаполнитьЗначенияСвойств(ПараметрыШаблона, Форма);
	
	ПараметрыШаблона.Значение = Значение;
	
	МассивПредставление = Новый Массив;
	ЗначенияСпискаВыбора = Элементы.ТипЗаказа.СписокВыбора.НайтиПоЗначению(Форма.ТипЗаказа);
	Если ЗначенияСпискаВыбора <> Неопределено Тогда
		МассивПредставление.Добавить(ЗначенияСпискаВыбора.Представление);
	КонецЕсли;
	ЗначенияСпискаВыбора = Элементы.ОтправительСпособОтгрузки.СписокВыбора.НайтиПоЗначению(Форма.СпособОтгрузки);
	Если ЗначенияСпискаВыбора <> Неопределено Тогда
		Если Форма.СпособОтгрузки = 1 И Не ПустаяСтрока(Форма.ПунктПриемаГрузаНаименование) Тогда
			МассивПредставление.Добавить(СтрШаблон("%1 (%2)", ЗначенияСпискаВыбора.Представление, Форма.ПунктПриемаГрузаНаименование));
		ИначеЕсли Форма.СпособОтгрузки = 2 И Не ПустаяСтрока(Форма.ОтправительАдресПредставление) Тогда
			МассивПредставление.Добавить(СтрШаблон("%1 (%2)", ЗначенияСпискаВыбора.Представление, Форма.ОтправительАдресПредставление));
		Иначе
			МассивПредставление.Добавить(СтрШаблон("%1", ЗначенияСпискаВыбора.Представление));
		КонецЕсли;
	КонецЕсли;
	ЗначенияСпискаВыбора = Элементы.ПолучательСпособДоставки.СписокВыбора.НайтиПоЗначению(Форма.СпособДоставки);
	Если ЗначенияСпискаВыбора <> Неопределено Тогда
		Если Форма.СпособДоставки = 1 И Не ПустаяСтрока(Форма.ПунктВыдачиГрузаНаименование) Тогда
			МассивПредставление.Добавить(СтрШаблон("%1 (%2)", ЗначенияСпискаВыбора.Представление, Форма.ПунктВыдачиГрузаНаименование));
		ИначеЕсли Форма.СпособДоставки = 2 И Не ПустаяСтрока(Форма.ПолучательАдресПредставление) Тогда
			МассивПредставление.Добавить(СтрШаблон("%1 (%2)", ЗначенияСпискаВыбора.Представление, Форма.ПолучательАдресПредставление));
		Иначе
			МассивПредставление.Добавить(СтрШаблон("%1", ЗначенияСпискаВыбора.Представление));
		КонецЕсли;
	КонецЕсли;
	ПараметрыШаблона.Представление = СтрСоединить(МассивПредставление, ", ");
	
	ПараметрыФормы = НовыеПараметрыОткрытьФормуОбщиеНастройки();
	ПараметрыФормы.Вставить("ВариантОтображения", "Шаблоны");
	ПараметрыФормы.Вставить("ТипГрузоперевозки", ПараметрыШаблона.ТипГрузоперевозки);
	ПараметрыФормы.Вставить("ПараметрыШаблона", ПараметрыШаблона);
	
	ОткрытьФормуОбщиеНастройкиСервисаДоставки(ПараметрыФормы);
	
КонецПроцедуры

// Обработать выбор документов оснований автоматически.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма клиентского приложения
//  ВыбранныеДокументы - СписокЗначений Из ОпределяемыйТип.ОснованиеЗаказаСервисДоставки - Выбранные документы
// 
// Возвращаемое значение:
//  Булево - Обработать выбор документов оснований автоматически
Функция ОбработатьВыборДокументовОснованийАвтоматически(Форма, ВыбранныеДокументы) Экспорт;
	
	Результат = Истина;
	
	ДобавляемыеДокументы = Новый Массив;
	Для Каждого ДобавляемыйДокумент Из ВыбранныеДокументы Цикл
		Если Форма.ДокументыОснования.НайтиПоЗначению(ДобавляемыйДокумент) = Неопределено Тогда
			ДобавляемыеДокументы.Добавить(ДобавляемыйДокумент);
		КонецЕсли;
	КонецЦикла;
	
	Результаты = СервисДоставкиВызовСервера.КоличествоЗаказовПоОснованиям(ДобавляемыеДокументы);
	
	Тексты = Новый Массив;
	
	Для Каждого Элемент Из Результаты Цикл
		Если Элемент.Значение > 0 Тогда
			Результат = Ложь;
			Тексты.Добавить(СтрШаблон(НСтр("ru = 'На основании %1 введено заказов на доставку: %2.'"),
				Элемент.Представление, Элемент.Значение));
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат Тогда
		
		Тексты.Добавить(НСтр("ru = 'Продолжить?'"));
		
		Событие = "ОбработатьВыборДокументовОснований";
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(Событие, Форма, ВыбранныеДокументы);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, СтрСоединить(Тексты, Символы.ПС), Кнопки);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область Конструкторы

// Параметры открываемой формы.
// 
// Возвращаемое значение:
//  Структура - Параметры формы. Содержит свойства:
//   * ИмяФормы - Строка - имя открываемой формы
//   * ТипГрузоперевозки - Число, ПеречислениеСсылка.ТипыГрузоперевозки - тип грузоперевозки
//   * ОрганизацияБизнесСети - ОпределяемыйТип.ОрганизацияСервисДоставки, Неопределено - организация-заказчик перевозки
//   * ДокументыОснования - СписокЗначений из ДокументСсылка - документы-основания заказа на доставку
//   * РежимМастера - число - определяет режим работы с карточкой заказа на доставку
//   * ИдентификаторЗаказа - строка - идентификатор заказа на доставку. Ключевой параметр карточки заказа на доставку
//   * ПараметрыСервисаДоставки - См. СервисДоставки.ПараметрыСервисаДоставки
//   * Уникальность - Строка, Произвольный - значение ключа уникальности формы
//   * РежимОткрытияОкнаФормы - РежимОткрытияОкнаФормы - Режим открытия окна формы
Функция НовыйПараметрыОткрытьФормуСервисаДоставки() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИмяФормы", "");
	Результат.Вставить("ТипГрузоперевозки", 0);
	Результат.Вставить("ОрганизацияБизнесСети", Неопределено);
	Результат.Вставить("ДокументыОснования", Новый СписокЗначений);
	Результат.Вставить("РежимМастера", 0);
	Результат.Вставить("ИдентификаторЗаказа", "");
	Результат.Вставить("ПараметрыСервисаДоставки", Новый Структура);
	Результат.Вставить("Уникальность", "");
	Результат.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.Независимый);
	
	Возврат Результат;
	
КонецФункции

// Новые параметры для открытия формы ОбщиеНастройки.
// 
// Возвращаемое значение:
//  Структура - Новые параметры формы общие настройки:
//   * ВариантОтображения - Строка - 
//   * ТипГрузоперевозки - Число - 
//   * ПараметрыШаблона - Неопределено
//   * РежимВыбора - Булево - 
Функция НовыеПараметрыОткрытьФормуОбщиеНастройки() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВариантОтображения", "");
	Результат.Вставить("ТипГрузоперевозки", 0);
	Результат.Вставить("ПараметрыШаблона", Неопределено);
	Результат.Вставить("РежимВыбора", Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Открыть форму сервиса доставки завершение.
// 
// Параметры:
//  Результат - Структура - Результат
//  ПараметрыФормы - Структура, Неопределено - Параметры формы:
// * ИмяФормы - Строка - 
// * ПараметрыСервисаДоставки - Структура - :
// ** ДоступныеСервисыДоставки - Массив Из Число - 
// ** ИнтернетПоддержкаПодключена - Булево - 
// ** ОрганизацияПодключена - Булево - 
// * ТипГрузоперевозки - Неопределено, Произвольный - 
Процедура ОткрытьФормуСервисаДоставкиЗавершение(Результат, ПараметрыФормы) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыФормы.ОрганизацияБизнесСети) Тогда
		
		ИдентификаторТипаГрузоперевозки = СервисДоставкиКлиентСервер.ЧисловойИдентификаторГрузоперевозчика(ПараметрыФормы.ТипГрузоперевозки);
		ПараметрыГрузоперевозчика = ПараметрыФормы.ПараметрыСервисаДоставки.ПараметрыГрузоперевозчиков[ИдентификаторТипаГрузоперевозки];
		Если ПараметрыГрузоперевозчика <> Неопределено Тогда
			ПараметрыФормы.ОрганизацияБизнесСети = ПараметрыГрузоперевозчика.ОрганизацияБизнесСети;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыФормы.ОрганизацияБизнесСети) Тогда
			ПараметрыФормы.ОрганизацияБизнесСети = ПараметрыФормы.ПараметрыСервисаДоставки.ЕдинственнаяПодключеннаяОрганизацияБизнесСети;
			Если Не ЗначениеЗаполнено(ПараметрыФормы.ОрганизацияБизнесСети) Тогда
				ОткрытьФормуВыбора("ОрганизацияСервисДоставки", ПараметрыФормы, "ВыборОрганизацииПродолжение");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ОрганизацияБизнесСетиСсылка", ПараметрыФормы.ОрганизацияБизнесСети);
	
	ОткрытьФормуСервисаДоставкиСВопросом(ПараметрыФормы, ПараметрыФормы.ИмяФормы, ПараметрыФормы.ТипГрузоперевозки);
	
КонецПроцедуры

Процедура ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Отказ = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		// Фоновое задание отменено пользователем.
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ВыводитьОкноОжидания = Неопределено
		ИЛИ Не ДополнительныеПараметры.ВыводитьОкноОжидания Тогда
		Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Сообщения") Тогда
			
			Для каждого ЭлементКоллекции Из Результат.Сообщения Цикл
				ОбщегоНазначенияКлиент.СообщитьПользователю(ЭлементКоллекции.Текст,
					ЭлементКоллекции.КлючДанных, ЭлементКоллекции.Поле, ЭлементКоллекции.ПутьКДанным);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Статус") И Результат.Статус = "Ошибка" Тогда
		
		Если ЗначениеЗаполнено(Результат.ПодробноеПредставлениеОшибки) Тогда
			ТекстСообщения = Результат.ПодробноеПредставлениеОшибки;
		ИначеЕсли ЗначениеЗаполнено(Результат.КраткоеПредставлениеОшибки) Тогда
			ТекстСообщения = Результат.КраткоеПредставлениеОшибки;
		Иначе
			ТекстСообщения = НСтр("ru = 'Ошибка выполнения операции'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередОткрытиемФормыВыбора(Параметры, ИмяСправочника) Экспорт
	
	Если ИмяСправочника = "АдресКонтрагентаСервисДоставки" Тогда
		Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Контрагент") Тогда
			Параметры.Вставить("Контрагент", Параметры.Отбор.Контрагент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВыборЗначения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыборОрганизацииПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Поддержка различного названия реквизита в формах
	ДополнительныеПараметры.Вставить("Организация", Результат);
	ДополнительныеПараметры.Вставить("ОрганизацияБизнесСети", Результат);
	ДополнительныеПараметры.Вставить("ОрганизацияБизнесСетиСсылка", Результат);
	
	НастройкиФормы = Новый Соответствие;
	НастройкиФормы.Вставить("ОрганизацияБизнесСетиСсылка", Результат);
	СервисДоставкиВызовСервера.СохранитьНастройкиФормыСпискаЗаказов(НастройкиФормы);
	
	ОткрытьФормуСервисаДоставкиСВопросом(ДополнительныеПараметры, ДополнительныеПараметры.ИмяФормы,
		ДополнительныеПараметры.ТипГрузоперевозки);
	
КонецПроцедуры

Процедура ПроверитьОрганизациюБизнесСетиСВопросом(Параметры, Отказ) Экспорт
	
	ОрганизацияБизнесСетиСсылка = Неопределено;
	Параметры.Свойство("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	Если Не СервисДоставкиВызовСервера.ОрганизацияПодключена(ОрганизацияБизнесСетиСсылка) Тогда
		ТекстВопроса = НСтр("ru='Организация ""%1"" не подключена в сервисе 1С:Бизнес-сеть. Подключить сейчас?'") + Символы.ПС + Символы.ПС
		+ НСтр("ru='При нажатии ""Да"" откроется форма подключения организации,'") + Символы.ПС
		+ НСтр("ru='при нажатии ""Нет"" откроется форма выбора подключенной организации,'") + Символы.ПС
		+ НСтр("ru='при нажатии ""Отмена"" текущее действие будет отменено.'");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ОрганизацияБизнесСетиСсылка);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьОрганизациюПослеВопроса", ЭтотОбъект, Параметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключитьОрганизациюПослеВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПодключитьОрганизациюЗавершение", ЭтотОбъект, Параметры);
		БизнесСетьСлужебныйКлиент.ОткрытьФормуПодключенияОрганизации(Параметры.ОрганизацияБизнесСетиСсылка, ЭтотОбъект, ОписаниеОповещенияОЗакрытии);
	Иначе
		ОткрытьФормуВыбора("ОрганизацияСервисДоставки", Параметры, "ВыборОрганизацииПродолжение");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключитьОрганизациюЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ИмяФормы") Тогда
		
		Уникальность = Неопределено;
		
		Параметры.Свойство("Уникальность", Уникальность);
		
		ОткрытьФорму("Обработка.СервисДоставки.Форма." + Параметры.ИмяФормы,
			Параметры,,
			Уникальность,
			,
			,
			,
			?(Параметры.Свойство("ПараметрыЗаказа") И Параметры.ПараметрыЗаказа.Свойство("РежимОткрытияОкнаФормы"),
				Параметры.ПараметрыЗаказа.РежимОткрытияОкнаФормы,
				РежимОткрытияОкнаФормы.Независимый));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьБлокОшибок(Результат, ОперацияВыполнена) Экспорт
	
	Ошибки = Результат.Ошибки;
	
	Если Ошибки.Количество() > 0 Тогда
		Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекущаяОшибка);
		КонецЦикла;
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// См. СервисДоставкиКлиентСервер.ПредставлениеЗаказаНаДоставку
Функция ПредставлениеЗаказаНаДоставку(Параметры, ПолноеНаименование = Ложь) Экспорт
	
	Возврат СервисДоставкиКлиентСервер.ПредставлениеЗаказаНаДоставку(Параметры, ПолноеНаименование);
	
КонецФункции

Процедура ПодключитьТестовыйПериодКурьерика() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьТестовыйПериодЗавершениеКурьерика", ЭтотОбъект);
    ПодключениеСервисовСопровожденияКлиент.ПодключитьТестовыйПериод(
       	СервисДоставкиКлиентСервер.ИмяСервисаСопровождения1СКурьерика(),
       	ЭтотОбъект,
        ОписаниеОповещения);
		
КонецПроцедуры

Процедура ПодключитьТестовыйПериодЗавершениеКурьерика(Результат, ДополнительныеПараметры) Экспорт
	
	Оповестить("ПодключениеТестовогоПериодаКурьерика", Результат);
	
КонецПроцедуры

// Авто подбор из списка выбора элемента.
// 
// Параметры:
//  Элемент - ЭлементыФормы - Элемент формы со списком выбора при включенном режиме выбора из списка
//  Текст - Строка - Строка поиска
//  ДанныеВыбора - СписокЗначений Из Произвольный, Неопределено - Если текст заполнен, будут сформированы данные выбора 
//  из списка выбора элемента.
//  СтандартнаяОбработка - Булево - Истина, если текст заполнен.
//  ПоискСНачалаСтроки - Булево - Поиск с начала строки
Процедура АвтоПодборИзСпискаВыбораЭлемента(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, ПоискСНачалаСтроки = Ложь) Экспорт
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ДанныеВыбора.Количество() > 0 Тогда
		Источник = ДанныеВыбора;
	Иначе
		Источник = Элемент.СписокВыбора;
	КонецЕсли;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	НрегТекст = Нрег(Текст);
	
	Для Каждого ЭлементСписка Из Источник Цикл
		Если СтрНайти(НРег(ЭлементСписка.Представление), НРег(Текст)) > 0 Тогда
			
			Результат = СтрНайтиИВыделитьОформлением(ЭлементСписка.Представление, Текст);
			Если Результат <> Неопределено Тогда
				ДанныеВыбора.Добавить(ЭлементСписка.Значение, Результат);
				Продолжить;
			КонецЕсли;
			
			Если ПоискСНачалаСтроки Тогда
				Представление = ЭлементСписка.Представление;
			Иначе
				ФорматированноеПредставление = Новый Массив;
				Представление = СтрЗаменить(ЭлементСписка.Представление, Текст, "|" + НрегТекст + "|");
				ЧастиПредставления = СтрРазделить(Представление, "|", Ложь);
				Для Каждого ЧастьПредставления Из ЧастиПредставления Цикл
					Результат = СтрНайтиИВыделитьОформлением(ЧастьПредставления, НрегТекст);
					ФорматированноеПредставление.Добавить(?(Результат = Неопределено, ЧастьПредставления, Результат));
				КонецЦикла;
				Представление = Новый ФорматированнаяСтрока(ФорматированноеПредставление);
			КонецЕсли;
			
			ДанныеВыбора.Добавить(ЭлементСписка.Значение, Представление);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область НаложенныеПлатежи

// Этот документ доступен для наложенного платежа.
// 
// Параметры:
//  ДокументОснование - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки - Документ основание
// 
// Возвращаемое значение:
//  Булево - Этот документ доступен для наложенного платежа
Функция ЭтотДокументДоступенДляНаложенногоПлатежа(Знач ДокументОснование) Экспорт
	
	Результат = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДоступныеТипыДок = Новый Массив; // Массив из Тип
	СервисДоставкиКлиентПереопределяемый.ТипыОснованийДляНаложенногоПлатежа(ДоступныеТипыДок);
	
	Результат = ДоступныеТипыДок.Найти(ТипЗнч(ДокументОснование)) <> Неопределено;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОткрытьФормуВыбора(ИмяСправочника, ПараметрыОтбора = Неопределено, ИмяПроцедурыОбработки = "ОбработатьВыборЗначения")
	
	ИмяФормыВыбора = СервисДоставкиВызовСервера.ИмяФормыВыбораПоОпределяемомуТипу(ИмяСправочника);
	
	Если ИмяФормыВыбора <> "" Тогда
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		
		ПередОткрытиемФормыВыбора(ПараметрыОткрытия, ИмяСправочника);
		ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедурыОбработки, ЭтотОбъект, ПараметрыОтбора);
		ОткрытьФорму(
			ИмяФормыВыбора,
			ПараметрыОткрытия,
			,,,,ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры

// После выбора грузоперевозчика.
// 
// Параметры:
//  Результат - ЭлементСпискаЗначений из Число, Неопределено - Результат выбора грузоперевозчика
//  ДополнительныеПараметры - См. НовыйПараметрыОткрытьФормуСервисаДоставки
Процедура ПослеВыбораГрузоперевозчика(Результат, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			ДополнительныеПараметры.ТипГрузоперевозки = Результат.ТипГрузоперевозки;
		Иначе
			ДополнительныеПараметры.ТипГрузоперевозки = Результат.Значение;
		КонецЕсли;
		ОткрытьФормуСервисаДоставки(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуСервисаДоставкиСВопросом(ПараметрыФормы, Знач ИмяФормы, Знач Уникальность)
	
	Если ПустаяСтрока(ИмяФормы) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыФормы.ПараметрыСервисаДоставки.ОрганизацияПодключена Тогда
		Отказ = Ложь;
		ПроверитьОрганизациюБизнесСетиСВопросом(ПараметрыФормы, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Уникальность = ?(ЗначениеЗаполнено(ПараметрыФормы.Уникальность), ПараметрыФормы.Уникальность, Уникальность);
	РежимОткрытия = ПараметрыФормы.РежимОткрытияОкнаФормы;
	
	Если СтрНачинаетсяС(ИмяФормы, "КарточкаЗаказа") Тогда
		
		Если ПараметрыФормы.РежимМастера = 0 Тогда
			
			ЕстьДокументыОснования = ПараметрыФормы.ДокументыОснования.Количество() > 0;
			
			ОснованиеУникальныйИдентификатор = ?(ЕстьДокументыОснования,
				ПараметрыФормы.ДокументыОснования[0].Значение.УникальныйИдентификатор(), "");
			Уникальность = "" + Уникальность + ОснованиеУникальныйИдентификатор;
			
			Шаблон = "ОбщийМодуль.СервисДоставкиКлиент.ОткрытьФормуНовогоЗаказа%1.%2";
			КлючеваяОперация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
				?(ЕстьДокументыОснования, "НаОсновании", ""), ИмяФормы);
			// Замер производительности
			ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
			
		Иначе
			
			Уникальность = ПараметрыФормы.ИдентификаторЗаказа;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПолноеИмяФормы = "Обработка.СервисДоставки.Форма." + ИмяФормы;
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, , Уникальность, , , , РежимОткрытия);
	
КонецПроцедуры

// Параметры открываемой формы списка заказов на доставку.
// 
// Возвращаемое значение:
//  Структура - Параметры формы. Содержит свойства:
//   *ИмяФормы - Строка - имя открываемой формы
//   *ТипГрузоперевозки - Число, ПеречислениеСсылка.ТипыГрузоперевозки - тип грузоперевозки
//   *ОрганизацияБизнесСети - ОпределяемыйТип.ОрганизацияСервисДоставки, Неопределено - организация-заказчик перевозки
//   *ДокументыОснования - СписокЗначений из ДокументСсылка - документы-основания заказа на доставку
//   *РежимВыбора - Булево - Истина - форма открывается в режиме выбора элемента списка
//   *ОбработкаВыбора - Строка - Имя процедуры обработки выбора строки в форме выбора.
//     В форме уже есть библиотечная процедура обработки выбора - 
//     "СервисДоставкиКлиентСервер.ИмяПроцедурыДобавитьДокументОснованиеВВыбранныйЗаказНаДоставку()".
//     Можно указать свою, тогда при выборе строки заказа в переопределяемую процедуру
//     "ОбработатьРезультатВыбораЗаказаНаДоставку" будет передано имя этой процедуры.
//   *ПараметрыСервисаДоставки - См. СервисДоставки.ПараметрыСервисаДоставки
//   *Уникальность - Строка, Произвольный - значение ключа уникальности формы
//   *РежимОткрытияОкнаФормы - РежимОткрытияОкнаФормы - Режим открытия окна формы
//
Функция НовыеПараметрыОткрытьФормуСпискаЗаказовНаДоставку()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИмяФормы", "СписокЗаказов");
	Результат.Вставить("ТипГрузоперевозки", 0);
	Результат.Вставить("ОрганизацияБизнесСети", Неопределено);
	Результат.Вставить("ДокументыОснования", Новый СписокЗначений);
	Результат.Вставить("РежимВыбора", Ложь);
	Результат.Вставить("ОбработкаВыбора", "");
	Результат.Вставить("ПараметрыСервисаДоставки", Новый Структура);
	Результат.Вставить("Уникальность", "");
	Результат.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.Независимый);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
