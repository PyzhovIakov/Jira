
#Область СлужебныеПроцедурыИФункции

#Область Новые

////////////////////////////////////////////////////////////////////
// Загрузка вложений.

// Процедура сохраняет вложение.
//
Процедура СохранитьВложение(Ссылка, УникальныйИдентификаторФормы) Экспорт
	
	Попытка
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификаторФормы);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Данный формат файлов не поддерживается!';
			|en='This file format is not supported!'"));
		Возврат;
	КонецПопытки;
	
	РаботаСФайламиКлиент.СохранитьФайлКак(ДанныеФайла);
	
КонецПроцедуры

Процедура ЗагрузитьВложения(Письмо, ФормаПисьма, ОповещениеОЗавершении) Экспорт
	
	ДлительнаяОперация = CRM_УправлениеЭлектроннойПочтой.ЗапуститьЗагрузкуВложенийВФоне(Письмо,
		ФормаПисьма.УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ФормаПисьма);
	
	//ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузитьВложенияЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

// Сохраняет письмо на диск.
//
// Параметры:
//  Письмо                  - ДокументСсылка.ЭлектронноеПисьмоВходящее
//                          - ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо, которое будет сохранено.
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы, из которой была вызвана команда сохранения.
//
Процедура СохранитьПисьмоНаДиск(Письмо, УникальныйИдентификатор) Экспорт
	
	ДанныеФайла = CRM_УправлениеЭлектроннойПочтой.ДанныеПисьмаДляСохраненияКакФайл(Письмо, УникальныйИдентификатор);
	
	Если ДанныеФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.СохранитьФайлКак(ДанныеФайла);

КонецПроцедуры

////////////////////////////////////////////////////////////////////
// Работа с папками электронных писем.

// Функция задает вопрос, если включена соответствующая настройка, и возвращает папку в которую нужно переносить письмо
// в противном случае возвращается пустая ссылка (перенос не выполняется).
//
Процедура ВопросПеренестиПисьмоВПапкуОбработанные(УчетнаяЗапись, ТекущаяПапкаПисьма = Неопределено,
	 ОписаниеОповещенияОЗавершении) Экспорт
	
	ПапкаОтработанные = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(УчетнаяЗапись, "Обработанные");
	ПустаяСсылка = ПредопределенноеЗначение("Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка");
	Если НЕ ПапкаОтработанные = ПустаяСсылка Тогда
		Если (ТекущаяПапкаПисьма = Неопределено) ИЛИ (НЕ ТекущаяПапкаПисьма = ПапкаОтработанные) Тогда
			ДополнительныеПараметры = Новый Структура("ПапкаОтработанные, ПустаяСсылка,
				| ОписаниеОповещенияОЗавершении", ПапкаОтработанные, ПустаяСсылка,
				 ОписаниеОповещенияОЗавершении);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПеренестиПисьмоВПапкуОбработанныеЗавершения",
				 CRM_УправлениеЭлектроннойПочтойКлиент,
				 ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения,
				 НСтр("ru='Перенести письмо в папку ""Обработанные""?';
				|en='Transfer the letter to a folder ""Process""?'"),
				 РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, ПустаяСсылка);
	
КонецПроцедуры

Процедура ВопросПеренестиПисьмоВПапкуОбработанныеЗавершения(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении,
			 ДополнительныеПараметры.ПапкаОтработанные);
	Иначе	
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении,
			 ДополнительныеПараметры.ПустаяСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Измененные

// Выполнить получение почты по всем доступным учетным записям.
// Параметры:
//  ЭлементСписок - ЭлементФормы - элемент формы, который необходимо обновить, после получения писем.
//
Процедура ОтправитьЗагрузитьПочтуПользователя(УникальныйИдентификатор, Форма,
	 ЭлементСписок = Неопределено, ВыводитьПрогресс = Истина, УчетныеЗаписиПользователя) Экспорт
	
	// +CRM
	//ДлительнаяОперация =  ВзаимодействияВызовСервера.ОтправитьПолучитьПочтуПользователяВФоне(УникальныйИдентификатор);
	ДлительнаяОперация =  CRM_ВзаимодействияВызовСервера.ОтправитьПолучитьПочтуПользователяВФоне(УникальныйИдентификатор,
		 УчетныеЗаписиПользователя);
	// -CRM
	Если ДлительнаяОперация = Неопределено Тогда
		// +CRM
		ПоказатьОповещениеПользователя(НСтр("ru='Отправка и получение почты'"), ,
			НСтр("ru='Отправка и получение почты уже выполняется. Пожалуйста, подождите...'"));
		// -CRM
		Возврат;
	КонецЕсли;
	
	Форма.ОтправкаПолучениеПисемВыполняется = Истина;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭлементСписок",       ЭлементСписок);
	ДополнительныеПараметры.Вставить("НавигационнаяСсылка", Неопределено);
	ДополнительныеПараметры.Вставить("Форма",               Форма);
	ДополнительныеПараметры.Вставить("ВыводитьПрогресс",    ВыводитьПрогресс);
	Если Форма.Окно <> Неопределено Тогда
		ДополнительныеПараметры.НавигационнаяСсылка = Форма.Окно.ПолучитьНавигационнуюСсылку();
	КонецЕсли;	
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	Если ВыводитьПрогресс Тогда
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	Иначе
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	КонецЕсли;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОтправитьЗагрузитьПочтуПользователяЗавершение",
		 ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

// Обработка завершения загрузки почты пользователя
// 
// Параметры:
//  Результат - Структура:
//   * КраткоеПредставлениеОшибки     - Строка - информация о возникшей ошибке
//   * АдресДополнительногоРезультата - Строка - адрес, временного хранилища с дополнительной информацией о результатах выполнения.
//   * Статус                         - Строка - статус выполненной операции.
//  ДополнительныеПараметры - Структура:
//   * ЭлементСписок - ТаблицаФормы - элемент, содержащий динамический список.
//
Процедура ОтправитьЗагрузитьПочтуПользователяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.ОтправкаПолучениеПисемВыполняется = Ложь;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		СтандартныеПодсистемыКлиент.ВывестиИнформациюОбОшибке(
			Результат.ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		Если ДополнительныеПараметры.ЭлементСписок <> Неопределено
			 И ДополнительныеПараметры.ЭлементСписок.Видимость
			 И ДополнительныеПараметры.ЭлементСписок.ТекущиеДанные <> Неопределено Тогда
			// +CRM
			CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(ДополнительныеПараметры.ЭлементСписок);
			// -CRM
		КонецЕсли;
		
		ДополнительныеПараметры.Форма.ДатаПредыдущегоПолученияОтправкиПочты = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Если ДополнительныеПараметры.ВыводитьПрогресс Тогда
			
			Заголовок = НСтр("ru = 'Отправка и получение почты'");
			РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
			Если РезультатВыполнения.ЕстьОшибки Тогда
				ПоказатьОповещениеПользователя(Заголовок, "e1cib/app/Обработка.ЖурналРегистрации", 
					НСтр("ru = 'Не удалось выполнить все действия. Технические подробности для администратора в журнале регистрации.'"), 
					БиблиотекаКартинок.Предупреждение, СтатусОповещенияПользователя.Важное);
			Иначе
				ПоказатьОповещениеПользователя(Заголовок, ДополнительныеПараметры.НавигационнаяСсылка,
					РезультатОтправкиПолученияПисем(РезультатВыполнения));
			КонецЕсли;
			
		КонецЕсли;
		
		Оповестить("ВыполненаОтправкаПолучениеПисем");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Типовые

// Функция возвращает сообщение в зависиости от результата отправки/получения писем.
//
// Параметры:
//  РезультатВыполнения	 - Структура	 - Результат выполнения отправки/получения писем.
// 
// Возвращаемое значение:
//   - Строка
//
Функция РезультатОтправкиПолученияПисем(РезультатВыполнения) Экспорт
	
	Если РезультатВыполнения.ПолученоПисем > 0 И РезультатВыполнения.ОтправленоПисем > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Получено: %1, отправлено: %2'"), 
			РезультатВыполнения.ПолученоПисем, РезультатВыполнения.ОтправленоПисем);
	ИначеЕсли РезультатВыполнения.ПолученоПисем > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Получено: %1'"), 
			РезультатВыполнения.ПолученоПисем);
	ИначеЕсли РезультатВыполнения.ОтправленоПисем > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отправлено: %1'"), 
			РезультатВыполнения.ОтправленоПисем);
	Иначе
		ТекстСообщения = НСтр("ru = 'Нет новых писем'");
	КонецЕсли;	
	Если РезультатВыполнения.ДоступноУчетныхЗаписей > 1 Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС  
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '(учетных записей: %1)'"),
				РезультатВыполнения.ДоступноУчетныхЗаписей);
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

#КонецОбласти

#КонецОбласти
