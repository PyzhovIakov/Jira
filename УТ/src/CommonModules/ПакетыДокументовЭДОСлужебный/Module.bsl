// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - Неопределено - если контекст не инициализирован.
//                      - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  см. ПакетыДокументовЭДО.НовыйРезультатДействийСПакетом
Функция УдалитьДокументИзПакета(ИдентификаторПакета, ЭлектронныйДокумент, КонтекстДиагностики = Неопределено) Экспорт
	
	Результат = ПакетыДокументовЭДО.НовыйРезультатДействийСПакетом();
	Результат.КонтекстДиагностики = КонтекстДиагностики;
	
	ВидОперации = НСтр("ru = 'Удаление электронного документа из пакета'");
	
	Если ВыполнениеДействийПоЭДОЗапрещено(КонтекстДиагностики) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент) Тогда
		ДобавитьОшибкуИзмененияСоставаПакетаВходящегоЭДО(КонтекстДиагностики, ВидОперации, ЭлектронныйДокумент);
		Возврат Результат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ПакетыДокументовЭДО.БлокировкаПакетаДокументов(ИдентификаторПакета).Заблокировать();
		
		ДокументыПакета = ПакетыДокументовЭДО.ДокументыПакета(ИдентификаторПакета);
		
		СостоянияДокументовПоЭДО = ЭлектронныеДокументыЭДО.СостоянияДокументов(ДокументыПакета);
		
		Если Не ЗначениеЗаполнено(СостоянияДокументовПоЭДО)
			ИЛИ СостоянияДокументовПоЭДО[ЭлектронныйДокумент] = Неопределено Тогда
			Результат.Успех = Истина;
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		ИначеЕсли ИзменениеСоставаПакетаНедоступно(СостоянияДокументовПоЭДО, КонтекстДиагностики) Тогда
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Если СостоянияДокументовПоЭДО.Количество() > 2 Тогда
			РегистрыСведений.СоставПакетовДокументовЭДО.Удалить(ЭлектронныйДокумент);
			
			ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ДокументыПакета, ЭлектронныйДокумент);
			
			СвойстваДокументов = ЭлектронныеДокументыЭДО.СвойстваДокументовДляОписанияПакетов(ДокументыПакета);
			
			Если ЗначениеЗаполнено(СвойстваДокументов) Тогда
				РегистрыСведений.ПакетыДокументовЭДО.ОбновитьОписание(ИдентификаторПакета, СвойстваДокументов);
			КонецЕсли;
		Иначе
			РегистрыСведений.ПакетыДокументовЭДО.Удалить(ИдентификаторПакета);
			Для Каждого СостояниеДокумента Из СостоянияДокументовПоЭДО Цикл
				РегистрыСведений.СоставПакетовДокументовЭДО.Удалить(СостояниеДокумента.Ключ);
			КонецЦикла; 
		КонецЕсли;
		
		Результат.Успех = Истина;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = ОбщегоНазначенияБЭД.ПодробноеПредставлениеИнформацииОбОшибке(ИнформацияОбОшибке());
		ДобавитьОшибкуИзмененияСоставаПакетаИсходящегоЭДО(КонтекстДиагностики, ВидОперации,
			ИдентификаторПакета, ЭлектронныйДокумент, ТекстОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
//  ЭлектронныеДокументы - Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - Неопределено - если контекст не инициализирован.
//                      - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. ПакетыДокументовЭДО.НовыйРезультатДействийСПакетом
Функция ДобавитьДокументыВПакет(ИдентификаторПакета, ЭлектронныеДокументы, КонтекстДиагностики = Неопределено) Экспорт
	
	Результат = ПакетыДокументовЭДО.НовыйРезультатДействийСПакетом();
	Результат.КонтекстДиагностики = КонтекстДиагностики;
	
	ВидОперации = НСтр("ru = 'Добавление электронного документа в пакет'");
	
	Если ВыполнениеДействийПоЭДОЗапрещено(КонтекстДиагностики) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ЭлектронныйДокумент Из ЭлектронныеДокументы Цикл
		Если Не ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент) Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьОшибкуИзмененияСоставаПакетаВходящегоЭДО(КонтекстДиагностики, ВидОперации, ЭлектронныйДокумент);
		Возврат Результат;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		
		ПакетыДокументовЭДО.БлокировкаПакетаДокументов(ИдентификаторПакета).Заблокировать();
		
		ДокументыПакета = ПакетыДокументовЭДО.ДокументыПакета(ИдентификаторПакета);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыПакета, ЭлектронныеДокументы);
		
		СостоянияДокументовПоЭДО = ЭлектронныеДокументыЭДО.СостоянияДокументов(ДокументыПакета);
		
		Если ЗначениеЗаполнено(СостоянияДокументовПоЭДО)
			И ИзменениеСоставаПакетаНедоступно(СостоянияДокументовПоЭДО, КонтекстДиагностики) Тогда
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		СвойстваДокументов = ЭлектронныеДокументыЭДО.СвойстваДокументовДляОписанияПакетов(ДокументыПакета);
		
		Если ЗначениеЗаполнено(СвойстваДокументов) Тогда
			РегистрыСведений.ПакетыДокументовЭДО.ОбновитьОписание(ИдентификаторПакета, СвойстваДокументов);
		КонецЕсли;
		
		Для Каждого ЭлектронныйДокумент Из ЭлектронныеДокументы Цикл
			СвойстваДокумента = СвойстваДокументов.Найти(ЭлектронныйДокумент, "Ссылка");
			РегистрыСведений.СоставПакетовДокументовЭДО.Записать(ИдентификаторПакета, ЭлектронныйДокумент,
				СвойстваДокумента);
		КонецЦикла;
		
		Результат.Успех = Истина;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ВидОперации = НСтр("ru = 'Добавление электронного документа из пакета'");
		ТекстОшибки = ОбщегоНазначенияБЭД.ПодробноеПредставлениеИнформацииОбОшибке(ИнформацияОбОшибке());
		ДобавитьОшибкуИзмененияСоставаПакетаИсходящегоЭДО(КонтекстДиагностики, ВидОперации,
			ИдентификаторПакета, ЭлектронныйДокумент, ТекстОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  Идентификатор - Неопределено,УникальныйИдентификатор - если не передан - документам будет присвоен новый идентификатор пакета
// 
// Возвращаемое значение:
//  См. ПакетыДокументовЭДО.НовыйРезультатДействийСПакетом
Функция СоздатьПакетДокументов(ЭлектронныеДокументы, КонтекстДиагностики, Идентификатор = Неопределено) Экспорт
	
	Результат = ПакетыДокументовЭДО.НовыйРезультатДействийСПакетом();
	Результат.КонтекстДиагностики = КонтекстДиагностики;
	
	Если ЭлектронныеДокументы.Количество() < 2 Тогда
		Возврат Результат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ЭтоВходящийЭДО = Неопределено;
		
		Блокировка = Новый БлокировкаДанных;
		Для Каждого ЭлектронныйДокумент Из ЭлектронныеДокументы Цикл
			Если ЭтоВходящийЭДО = Неопределено Тогда
				ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент);
			ИначеЕсли ЭтоВходящийЭДО Тогда
				ОтменитьТранзакцию();
				Возврат Результат;
			КонецЕсли;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СоставПакетовДокументовЭДО");
			ЭлементБлокировки.УстановитьЗначение("ЭлектронныйДокумент", ЭлектронныйДокумент);
		КонецЦикла;
		Блокировка.Заблокировать();
		
		ИдентификаторыПакетовДокументов = ИдентификаторыПакетовДокументов(ЭлектронныеДокументы);
		
		Если ЗначениеЗаполнено(ИдентификаторыПакетовДокументов) Тогда
			ОтменитьТранзакцию();
			ДокументыВСоставеДругогоПакета = ОбщегоНазначения.ВыгрузитьКолонку(ИдентификаторыПакетовДокументов, "Ключ");
			ДобавитьОшибкуДокументыВСоставеДругогоПакета(ДокументыВСоставеДругогоПакета, КонтекстДиагностики);
			Возврат Результат;
		КонецЕсли;
		
		СостоянияДокументовПоЭДО = ЭлектронныеДокументыЭДО.СостоянияДокументов(ЭлектронныеДокументы);
		
		Если ИзменениеСоставаПакетаНедоступно(СостоянияДокументовПоЭДО, КонтекстДиагностики) Тогда
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Идентификатор) Тогда
			Результат.ИдентификаторПакета = Идентификатор;
		Иначе
			Результат.ИдентификаторПакета = НовыйИдентификаторПакета();
		КонецЕсли;
		
		СвойстваДокументовДляОписанияПакетов = ЭлектронныеДокументыЭДО.СвойстваДокументовДляОписанияПакетов(
			ЭлектронныеДокументы);
		Если ЗначениеЗаполнено(СвойстваДокументовДляОписанияПакетов) Тогда
			РегистрыСведений.ПакетыДокументовЭДО.ОбновитьОписание(Результат.ИдентификаторПакета,
				СвойстваДокументовДляОписанияПакетов);
		Иначе
			ОтменитьТранзакцию();
			Результат.ИдентификаторПакета = Неопределено;
			Возврат Результат;
		КонецЕсли;
		
		Для Каждого ЭлектронныйДокумент Из ЭлектронныеДокументы Цикл
			СвойстваДокумента = СвойстваДокументовДляОписанияПакетов.Найти(ЭлектронныйДокумент, "Ссылка");
			РегистрыСведений.СоставПакетовДокументовЭДО.Записать(Результат.ИдентификаторПакета, ЭлектронныйДокумент,
				СвойстваДокумента);
		КонецЦикла;
		
		Результат.Успех = Истина;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Результат.ИдентификаторПакета = Неопределено;
		
		ВидОперации = НСтр("ru = 'Создание пакета документов'");
		ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка();
		
		ЗаголовокОшибки = НСтр("ru = 'Не удалось создать пакет документов'");
		
		КраткоеПредставление = ЗаголовокОшибки + Символы.ПС
			+ ОбщегоНазначенияБЭД.КраткоеПредставлениеИнформацииОбОшибке(ИнформацияОбОшибке());
		
		СвойстваДокументовДляПредставления = ЭлектронныеДокументыЭДО.СвойстваДокументовДляПредставления(
			ЭлектронныеДокументы);
		
		ПредставленияДокументов = Новый Массив; // Массив из Строка
		Для Каждого СвойстваДокументаДляПредставления Из СвойстваДокументовДляПредставления Цикл
			ПредставленияДокументов.Добавить(ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(
				СвойстваДокументаДляПредставления.Значение));
		КонецЦикла;
	
		МассивСтрок = Новый Массив; // Массив из Строка
		МассивСтрок.Добавить(ЗаголовокОшибки);
		МассивСтрок.Добавить(СтрСоединить(ПредставленияДокументов, ", "));
		МассивСтрок.Добавить(ОбщегоНазначенияБЭД.ПодробноеПредставлениеИнформацииОбОшибке(ИнформацияОбОшибке()));
		ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
		
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставление, КраткоеПредставление);
		ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  СвойстваДокументовДляОписанияПакета - см. ЭлектронныеДокументыЭДО.СвойстваДокументовДляОписанияПакетов
Процедура ЗагрузитьДокументыПакета(СвойстваДокументовДляОписанияПакета) Экспорт
	
	ЭлектронныеДокументы = СвойстваДокументовДляОписанияПакета.ВыгрузитьКолонку("Ссылка"); // Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
	
	НачатьТранзакцию();
	Попытка
		
		БлокировкаСоставаПакетаДокументов(СвойстваДокументовДляОписанияПакета, "Ссылка").Заблокировать();
		
		ИдентификаторыПакетовДокументов = ИдентификаторыПакетовДокументов(ЭлектронныеДокументы);
		
		ИдентификаторПакета = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
		НовыеДокументыПакета = Новый Массив; // Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
		
		Для Каждого ЭлектронныйДокумент Из ЭлектронныеДокументы Цикл
			ИдентификаторПакетаДокумента = ИдентификаторыПакетовДокументов[ЭлектронныйДокумент];
			Если ЗначениеЗаполнено(ИдентификаторПакетаДокумента) Тогда
				ИдентификаторПакета = ИдентификаторПакетаДокумента;
			Иначе
				НовыеДокументыПакета.Добавить(ЭлектронныйДокумент);
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ИдентификаторПакета) Тогда
			ИдентификаторПакета = НовыйИдентификаторПакета();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СвойстваДокументовДляОписанияПакета) Тогда
			СвойстваДокументовДляОписанияПакета.Сортировать("Дата");
			СвойстваПервогоДокумента = СвойстваДокументовДляОписанияПакета[0];
			
			НоваяЗаписьПакета = РегистрыСведений.ПакетыДокументовЭДО.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗаписьПакета, СвойстваПервогоДокумента);
			НоваяЗаписьПакета.ИдентификаторПакета = ИдентификаторПакета;
			НоваяЗаписьПакета.Записать();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НовыеДокументыПакета) Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Для Каждого ЭлектронныйДокумент Из НовыеДокументыПакета Цикл
			СвойстваДокумента = СвойстваДокументовДляОписанияПакета.Найти(ЭлектронныйДокумент, "Ссылка");
			РегистрыСведений.СоставПакетовДокументовЭДО.Записать(ИдентификаторПакета, ЭлектронныйДокумент,
				СвойстваДокумента);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Значение - УникальныйИдентификатор
Функция ИдентификаторыПакетовДокументов(ЭлектронныеДокументы) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставПакетовДокументовЭДО.ИдентификаторПакета,
		|	СоставПакетовДокументовЭДО.ЭлектронныйДокумент
		|ИЗ
		|	РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|ГДЕ
		|	СоставПакетовДокументовЭДО.ЭлектронныйДокумент В (&ЭлектронныеДокументы)";
	
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ЭлектронныйДокумент, Выборка.ИдентификаторПакета);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИдентификаторыПакетов - Массив из УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - УникальныйИдентификатор
//  * Значение - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция ДокументыПакетов(ИдентификаторыПакетов) Экспорт
	
	ДокументыПакетов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставПакетовДокументовЭДО.ЭлектронныйДокумент,
		|	СоставПакетовДокументовЭДО.ИдентификаторПакета
		|ИЗ
		|	РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|ГДЕ
		|	СоставПакетовДокументовЭДО.ИдентификаторПакета В (&ИдентификаторыПакетов)";
	
	Запрос.УстановитьПараметр("ИдентификаторыПакетов", ИдентификаторыПакетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ДокументыПакетов;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументыПакета = ДокументыПакетов[Выборка.ИдентификаторПакета]; // Неопределено,Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
		Если ДокументыПакета = Неопределено Тогда
			ДокументыПакета = Новый Массив;
			ДокументыПакетов.Вставить(Выборка.ИдентификаторПакета, ДокументыПакета);
		КонецЕсли;
		
		ЭлектронныйДокумент = Выборка.ЭлектронныйДокумент; // ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
		ДокументыПакета.Добавить(ЭлектронныйДокумент);
		
	КонецЦикла;
	
	Возврат ДокументыПакетов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  КонтекстДиагностики - Неопределено - если контекст не инициализирован.
//                      - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Булево
Функция ВыполнениеДействийПоЭДОЗапрещено(КонтекстДиагностики = Неопределено)
	Возврат ЭлектронныеДокументыЭДО.ВыполнениеДействийПоЭДОЗапрещено(КонтекстДиагностики);
КонецФункции

// Параметры:
//  КонтекстДиагностики - Неопределено - ошибка не добавляется в контекст.
//                      - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ВидОперации - Строка - текстовое описание операции.
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Процедура ДобавитьОшибкуИзмененияСоставаПакетаВходящегоЭДО(КонтекстДиагностики, ВидОперации, ЭлектронныйДокумент)
		
	Если КонтекстДиагностики = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидОшибки = ВидОшибкиИзменениеСоставаПакетаНедоступно();
	
	КраткоеПредставление = СтрШаблон(НСтр("ru = 'Не удалось выполнить %1 для %2.'"),
		НРег(ВидОперации), ЭлектронныеДокументыЭДО.ПредставлениеДокумента(ЭлектронныйДокумент));
	
	МассивСтрок = Новый Массив; // Массив из Строка
	МассивСтрок.Добавить(КраткоеПредставление);
	МассивСтрок.Добавить(НСтр("ru = 'Изменение состава пакета входящих документов недоступно.'"));
	ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставление, КраткоеПредставление);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

// Параметры:
//  СостоянияДокументовПоЭДО - Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Значение - ПеречислениеСсылка.СостоянияДокументовЭДО
//  КонтекстДиагностики - Неопределено - если контекст не инициализирован.
//                      - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Булево - Изменение состава пакета недоступно
Функция ИзменениеСоставаПакетаНедоступно(СостоянияДокументовПоЭДО, КонтекстДиагностики = Неопределено)
	
	Результат = Ложь;
	
	СостоянияИзмененияПакета = СостоянияДокументовДляИзмененияПакета();
	
	БлокирующиеДокументы = Новый Массив; // Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
	
	Для Каждого СостояниеДокумента Из СостоянияДокументовПоЭДО Цикл
		Если СостоянияИзмененияПакета.Найти(СостояниеДокумента.Значение) = Неопределено Тогда
			Результат = Истина;
			БлокирующиеДокументы.Добавить(СостояниеДокумента.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Если КонтекстДиагностики <> Неопределено И Результат Тогда
		СвойстваДокументов = ЭлектронныеДокументыЭДО.СвойстваДокументовДляПредставления(БлокирующиеДокументы);
		ПредставленияДокументов = Новый Массив; // Массив из Строка
		Для Каждого СвойстваДокумента Из СвойстваДокументов Цикл
			ПредставленияДокументов.Добавить(ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(
				СвойстваДокумента.Значение));
		КонецЦикла;
		ВидОперации = НСтр("ru = 'Изменение состава пакета документов'");
		КраткоеПредставление = НСтр("ru = 'Изменение состава пакета недоступно.'");
		ПодробноеПредставление = СтрШаблон(
			НСтр("ru = 'Изменение состава пакета доступно для документов в состоянии: %1.
			|Документы %2 находятся в другом состоянии.'"),
			СтрСоединить(СостоянияИзмененияПакета, ", "),
			СтрСоединить(ПредставленияДокументов, ", "));
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибкиИзменениеСоставаПакетаНедоступно(),
			ПодробноеПредставление, КраткоеПредставление);
		ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  КонтекстДиагностики - Неопределено
//                      - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ВидОперации - Строка
//  ИдентификаторПакета - УникальныйИдентификатор
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ТекстОшибки - Строка
Процедура ДобавитьОшибкуИзмененияСоставаПакетаИсходящегоЭДО(КонтекстДиагностики, ВидОперации, ИдентификаторПакета, ЭлектронныйДокумент, ТекстОшибки)
	
	Если КонтекстДиагностики = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка();
	
	СвойстваДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
		"ВидДокумента, НомерДокумента, ДатаДокумента, ИдентификаторДокументооборота, Номер");
	КраткоеПредставление = СтрШаблон(НСтр("ru = 'Не удалось выполнить %1 для %2.'"),
		НРег(ВидОперации), ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(СвойстваДокумента));
	
	МассивСтрок = Новый Массив; // Массив из Строка
	МассивСтрок.Добавить(КраткоеПредставление);
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Идентификатор пакета: %1'"), ИдентификаторПакета));
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Внутренний номер документа: %1'"), СвойстваДокумента.Номер));
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Идентификатор документооборота: %1'"),
		СвойстваДокумента.ИдентификаторДокументооборота));
	МассивСтрок.Добавить(ТекстОшибки);
	ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставление, КраткоеПредставление);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

// Параметры:
//  ДокументыВСоставеДругогоПакета - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ДобавитьОшибкуДокументыВСоставеДругогоПакета(ДокументыВСоставеДругогоПакета, КонтекстДиагностики)
	
	ВидОперации = НСтр("ru = 'Создание пакета документов'");
	
	ВидОшибки = ВидОшибкиДокументыВСоставеДругогоПакета();
	
	КраткоеПредставление = НСтр("ru = 'Не удалось создать пакет документов по причине:
		|электронные документы входят в состав другого пакета.'");
	
	СвойстваПоДокументам = ЭлектронныеДокументыЭДО.СвойстваДокументовДляПредставления(ДокументыВСоставеДругогоПакета);
	
	ПредставленияДокументов = Новый Массив; // Массив из Строка
	Для Каждого СвойстваПоДокументу Из СвойстваПоДокументам Цикл
		ПредставлениеДокумента = ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(СвойстваПоДокументу.Значение);
		ПредставленияДокументов.Добавить(ПредставлениеДокумента);
	КонецЦикла;
	
	МассивСтрок = Новый Массив; // Массив из Строка
	МассивСтрок.Добавить(КраткоеПредставление);
	МассивСтрок.Добавить(СтрСоединить(ПредставленияДокументов, ", "));
	ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставление, КраткоеПредставление);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

// Возвращаемое значение:
//  УникальныйИдентификатор
Функция НовыйИдентификаторПакета()
	Возврат Новый УникальныйИдентификатор;
КонецФункции

// Параметры:
//  ИсточникДанных - ТаблицаЗначений
//  ПолеИсточника - Строка - Имя колонки с электронными документами.
// 
// Возвращаемое значение:
//  БлокировкаДанных
Функция БлокировкаСоставаПакетаДокументов(ИсточникДанных, ПолеИсточника)
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СоставПакетовДокументовЭДО");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ИсточникДанных;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ЭлектронныйДокумент", ПолеИсточника);
	Возврат Блокировка;
КонецФункции

// Возвращаемое значение:
//  См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиИзменениеСоставаПакетаНедоступно()
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ИзменениеСоставаПакетаНедоступно";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Изменение пакета недоступно'");
	Возврат ВидОшибки;
КонецФункции

// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СостоянияДокументовЭДО
Функция СостоянияДокументовДляИзмененияПакета()
	СостоянияИзмененияПакета = Новый Массив; //  Массив из ПеречислениеСсылка.СостоянияДокументовЭДО
	СостоянияИзмененияПакета.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание);
	СостоянияИзмененияПакета.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке);
	Возврат СостоянияИзмененияПакета;
КонецФункции

// Возвращаемое значение:
//  См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиДокументыВСоставеДругогоПакета()
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ДокументыВСоставеДругогоПакета";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Документы в составе другого пакета'");
	Возврат ВидОшибки;
КонецФункции

#КонецОбласти
