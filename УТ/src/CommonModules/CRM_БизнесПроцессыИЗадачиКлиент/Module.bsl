////////////////////////////////////////////////////////////////////////////////
// Подсистема "Бизнес-процессы и задачи".
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Процедура ВыбораАдресации(Знач Результат, Знач Параметры) Экспорт
	
	Если Результат = "Отмена" Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = "Пользователь" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
		// ПараметрыФормы.Вставить("ВставатьНаТекущегоПользователя", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ПользователиКлиентСервер.ТекущийПользователь());
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбораАдресацииЗавершение", ЭтотОбъект,
			 Новый Структура("ВариантВыбора, Параметры", Результат,
			 Параметры));
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Параметры.ВладелецФорма, , , ,
			 ОписаниеОповещения);
	
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбораАдресацииЗавершение", ЭтотОбъект,
			 Новый Структура("ВариантВыбора, Параметры", Результат,
			 Параметры));
		ОткрытьФорму("Справочник.РолиИсполнителей.ФормаВыбора", ПараметрыФормы, Параметры.ВладелецФорма, ,
			 , ,
			 ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбораАдресацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ВариантВыбора = "Пользователь" Тогда
		
		МассивПеренаправленныхЗадач = Неопределено;
		CRM_БизнесПроцессыИЗадачиВызовСервера.ПеренаправитьЗадачи(
			ДополнительныеПараметры.Параметры.МассивЗадач, Результат, Ложь, МассивПеренаправленныхЗадач);
	Иначе
		
		Если Результат = ПредопределенноеЗначение("Справочник.РолиИсполнителей.CRM_ДинамическаяАдресация") Тогда
			ТекстОшибки = НСтр("ru='Это служебная роль. Переадресация на нее не предусмотрена.'");
			ПоказатьПредупреждение(, ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		МассивПеренаправленныхЗадач = Неопределено;
		CRM_БизнесПроцессыИЗадачиВызовСервера.ПеренаправитьЗадачи(
			ДополнительныеПараметры.Параметры.МассивЗадач, Результат, Ложь, МассивПеренаправленныхЗадач);
	КонецЕсли;
	Оповестить("ЗадачаИзменена"			, Новый Структура("МассивЗадач, ОбновлятьКалендарь",
		 ДополнительныеПараметры.Параметры.МассивЗадач,
			?(ДополнительныеПараметры.Параметры.ВладелецФорма.Параметры.Свойство("ОбновлятьКалендарь"), ДополнительныеПараметры.Параметры.ВладелецФорма.Параметры.ОбновлятьКалендарь, 0)));
	Оповестить("ЗадачаПеренаправлена"	, Новый Структура("МассивЗадач, ОбновлятьКалендарь",
		 ДополнительныеПараметры.Параметры.МассивЗадач,
		 2));
	Оповестить("Запись_ЗадачаИсполнителя");
	
КонецПроцедуры

// Открыть форму для перенаправления одной или нескольких задач другому исполнителю.
//
// Параметры:
//  ПеренаправляемыеЗадачи  - Массив - список задач, которые необходимо перенаправить.
//  ФормаВладелец - ФормаКлиентскогоПриложения - форма, которая должна быть владельцем для открываемой
//                                     формы перенаправления задач.
//
Процедура ПеренаправитьЗадачи(ПеренаправляемыеЗадачи, ФормаВладелец, Исполнитель = Неопределено) Экспорт
	
	Если ПеренаправляемыеЗадачи = Неопределено Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Не выбраны задачи.'"));
		Возврат;
	КонецЕсли;
	
	// +CRM
	//ЗадачиМогутБытьПеренаправлены = БизнесПроцессыИЗадачиВызовСервера.ПеренаправитьЗадачи(
	//	ПеренаправляемыеЗадачи, Неопределено, Истина);
	ЗадачиМогутБытьПеренаправлены = CRM_БизнесПроцессыИЗадачиВызовСервера.ПеренаправитьЗадачи(
		ПеренаправляемыеЗадачи, Неопределено, Истина);
	// -CRM
	Если НЕ ЗадачиМогутБытьПеренаправлены И ПеренаправляемыеЗадачи.Количество() = 1 Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Невозможно перенаправить уже выполненную задачу или направленную другому исполнителю.'"));
		Возврат;
	КонецЕсли;
	
	// +CRM
	Если Исполнитель = Неопределено Тогда
		
		ТекстВопроса = НСтр("ru = 'Перенаправить задачу на:'");
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Пользователь", "Пользователя");
		СписокКнопок.Добавить("Роль",         "Роль исполнителя");
		СписокКнопок.Добавить("Отмена",       "Отмена");
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("МассивЗадач",   ПеренаправляемыеЗадачи);
		ПараметрыОповещения.Вставить("ВладелецФорма", ФормаВладелец);
		
		Оповещение = Новый ОписаниеОповещения("ВыбораАдресации", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, , "Пользователь", НСтр("ru = 'Адресация задачи'"));
	Иначе
		Результат = Исполнитель;
		
		Если ПеренаправляемыеЗадачи.Количество() > 10 Тогда
			Состояние(НСтр("ru = 'Перенаправление задач'"),, 
				НСтр("ru = 'Выполняется перенаправление задач...'"));
		КонецЕсли;
		МассивПеренаправленныхЗадач = Неопределено;
		ЗадачиПеренаправлены = CRM_БизнесПроцессыИЗадачиВызовСервера.ПеренаправитьЗадачи(
			ПеренаправляемыеЗадачи, Результат, Ложь, МассивПеренаправленныхЗадач);
		Если ПеренаправляемыеЗадачи.Количество() > 1 Тогда
			Если ЗадачиПеренаправлены Тогда
				Состояние(НСтр("ru = 'Перенаправление задач'"),, 
					НСтр("ru = 'Задачи перенаправлены.'"));
			Иначе
				Состояние(НСтр("ru = 'Перенаправление задач'"),,
					НСтр("ru = 'Не все задачи перенаправлены. Пропущены задачи, отмеченные как выполненные.'"));
			КонецЕсли;
		Иначе
			Задача = МассивПеренаправленныхЗадач[0];
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Задача перенаправлена'"),
				ПолучитьНавигационнуюСсылку(Задача),
				Строка(Задача));
		КонецЕсли;
		Оповестить("ЗадачаИзменена", Новый Структура("ПеренаправляемыеЗадачи, ОбновлятьКалендарь", ПеренаправляемыеЗадачи, ФормаВладелец.Параметры.ОбновлятьКалендарь));
		Оповестить("ЗадачаПеренаправлена", Новый Структура("ПеренаправляемыеЗадачи, ОбновлятьКалендарь", ПеренаправляемыеЗадачи, 2));
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

// Открыть форму для ввода новой задачи.
//
// Параметры:
//  ФормаВладелец  - ФормаКлиентскогоПриложения - форма, которая должна быть владельцем для открываемой.
//  ПараметрыФормы - Структура - параметры открываемой формы.
//
Процедура СоздатьЛичнуюЗадачу(Знач ФормаВладелец = Неопределено, Знач ПараметрыФормы = Неопределено) Экспорт
	ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаЛичнойЗадачи", ПараметрыФормы, ФормаВладелец);
КонецПроцедуры	

Процедура ОбработкаКомандыПеренаправить(ПараметрКоманды, ПараметрыВыполненияКоманды,
	 ТипОтветственного = Неопределено,
	 МассивКлиентовКонтактов = Неопределено) Экспорт
	
	Если ПараметрКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрКоманды[0]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")  Тогда
		Если CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ПараметрКоманды[0], "Выполнена") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нельзя перенаправить выполненную задачу!';
				|en='You can not redirect the completed task!'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаКомандыЗавершение", ЭтотОбъект,
		Новый Структура("ПараметрКоманды, ПараметрыВыполненияКоманды, МассивКлиентовКонтактов", ПараметрКоманды, ПараметрыВыполненияКоманды, МассивКлиентовКонтактов));
	
	Если ЗначениеЗаполнено(ТипОтветственного) Тогда
		Если ТипОтветственного = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			ОткрытьФорму("Справочник.РолиИсполнителей.ФормаВыбора", , ЭтотОбъект, , , , ОписаниеОповещения);
		КонецЕсли;
	Иначе // предоставляем выбор:
	    
		СписокВыбора = CRM_БизнесПроцессыИЗадачиСервер.ПолучитьИзбранныхПолучателей(ПараметрКоманды[0]);
		СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"),
			 НСтр("ru='Выбрать пользователя ...';en='Select user ...'"), ,
			 БиблиотекаКартинок.Лупа);
		Если CRM_БизнесПроцессыИЗадачиСервер.ИспользуетсяРолеваяАдресацияОбъекта(ПараметрКоманды[0]) Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.РолиИсполнителей.ПустаяСсылка"),
				 НСтр("ru='Выбрать роль исполнителя ...';en='Select executor role ...'"), ,
				 БиблиотекаКартинок.Лупа);
		КонецЕсли;
		Если СписокВыбора.Количество() > 1 Тогда
			Элемент = ПараметрыВыполненияКоманды.Источник.ТекущийЭлемент;
			Если ТипЗнч(Элемент) <> Тип("КнопкаФормы") Тогда
				Кнопка = ПараметрыВыполненияКоманды.Источник.Элементы.Найти("Перенаправить");
				Если Кнопка <> Неопределено Тогда
					Если Кнопка.Вид <> ВидКнопкиФормы.КнопкаКоманднойПанели Тогда
						Элемент = Кнопка;
					Иначе
						Элемент = Кнопка.Родитель;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИзМенюЗавершение", ЭтотОбъект, 
				Новый Структура("ОписаниеОповещения, Источник", ОписаниеОповещения, ПараметрыВыполненияКоманды.Источник));
			ПараметрыВыполненияКоманды.Источник.ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбора, Элемент);
		Иначе
			ПоказатьОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ОписаниеОповещения, ПараметрыВыполненияКоманды.Источник);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьОткрытьФорму(ИмяФормы, ОписаниеОповещения, Источник)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ПользователиКлиентСервер.ТекущийПользователь());
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Объект") 
		И Источник.Объект <> Неопределено Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник.Объект, "CRM_Партнер") Тогда
			ПараметрыФормы.Вставить("Партнер", Источник.Объект.CRM_Партнер);
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник.Объект, "Партнер") Тогда
			ПараметрыФормы.Вставить("Партнер", Источник.Объект.Партнер);
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник.Объект, "CRM_КонтактноеЛицо") Тогда
			ПараметрыФормы.Вставить("КонтактноеЛицо", Источник.Объект.CRM_КонтактноеЛицо);
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник.Объект, "КонтактноеЛицо") Тогда
			ПараметрыФормы.Вставить("КонтактноеЛицо", Источник.Объект.КонтактноеЛицо);
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник.Объект, "АбонентКонтакт") Тогда
			Если ТипЗнч(Источник.Объект.АбонентКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
				ПараметрыФормы.Вставить("Партнер", Источник.Объект.АбонентКонтакт);
			ИначеЕсли ТипЗнч(Источник.Объект.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ПараметрыФормы.Вставить("Партнер",
					 CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Источник.Объект.АбонентКонтакт,
					 "Владелец"));
				ПараметрыФормы.Вставить("КонтактноеЛицо", Источник.Объект.АбонентКонтакт);
			КонецЕсли;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник.Объект, "ОтправительКонтакт") Тогда
			Если ТипЗнч(Источник.Объект.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
				ПараметрыФормы.Вставить("Партнер", Источник.Объект.ОтправительКонтакт);
			ИначеЕсли ТипЗнч(Источник.Объект.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ПараметрыФормы.Вставить("Партнер",
					 CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Источник.Объект.ОтправительКонтакт,
					 "Владелец"));
				ПараметрыФормы.Вставить("КонтактноеЛицо", Источник.Объект.ОтправительКонтакт);
			КонецЕсли;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник.Объект, "Контакт") Тогда
			Если ТипЗнч(Источник.Объект.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
				ПараметрыФормы.Вставить("Партнер", Источник.Объект.Контакт);
			ИначеЕсли ТипЗнч(Источник.Объект.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ПараметрыФормы.Вставить("Партнер",
					 CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Источник.Объект.Контакт,
					 "Владелец"));
				ПараметрыФормы.Вставить("КонтактноеЛицо", Источник.Объект.Контакт);
			КонецЕсли;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник.Объект, "ПолучателиПисьма") Тогда
			Если Источник.Объект.ПолучателиПисьма.Количество() > 0 Тогда
				Получатель = Источник.Объект.ПолучателиПисьма[0].Контакт;	
				Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Партнеры") Тогда
					ПараметрыФормы.Вставить("Партнер", Получатель);
				ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					ПараметрыФормы.Вставить("Партнер", CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Получатель, "Владелец"));
					ПараметрыФормы.Вставить("КонтактноеЛицо", Получатель);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ОткрытьФорму(ИмяФормы, ПараметрыФормы, , , , , ОписаниеОповещения);
КонецПроцедуры

Процедура ОбработкаКомандыЗавершение(Ответственный, ДополнительныеПараметры) Экспорт
	
	Если Ответственный = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры.МассивКлиентовКонтактов) = Тип("Массив")
		 И ДополнительныеПараметры.МассивКлиентовКонтактов.Количество() > 0 Тогда		
		Если CRM_ОбщегоНазначенияСервер.ЕстьОбщийМодуль("CRM_УправлениеДоступомУровниДоступа") Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
			ЗапрещенныеКлиентыКонтакты = Модуль.ЗапрещенныеКлиентыКонтакты(ДополнительныеПараметры.МассивКлиентовКонтактов,
				 Ответственный);
			Если ЗапрещенныеКлиентыКонтакты.Количество() > 0 Тогда
				
				ПараметрыОповещения = Новый Структура("ЗапрещенныеКлиентыКонтакты, Ответственный, ДополнительныеПараметры",
					ЗапрещенныеКлиентыКонтакты, Ответственный, ДополнительныеПараметры);
				ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаКомандыПеренаправитьПродолжение",
					 ЭтотОбъект,
					 ПараметрыОповещения); 
				ПоказатьВопрос(ОписаниеОповещения,
					 СтрЗаменить(НСтр("ru = 'У выбранного пользователя нет доступа к %1 партнерам/контактам документа!
                                                        |Выдать ему доступ ко всем клиентам/контактам документа?'"), "%1", 
														Строка(ЗапрещенныеКлиентыКонтакты.Количество())), РежимДиалогаВопрос.ОКОтмена);
				Возврат;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответственный = ПредопределенноеЗначение("Справочник.РолиИсполнителей.CRM_ДинамическаяАдресация") Тогда
		ТекстОшибки = НСтр("ru='Это служебная роль. Переадресация на нее не предусмотрена.'");
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры.ПараметрКоманды[0]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Попытка
			CRM_БизнесПроцессыИЗадачиВызовСервера.ПеренаправитьЗадачи(
			ДополнительныеПараметры.ПараметрКоманды, Ответственный, Ложь);
			ТекстОшибки = "";
		Исключение
			ТекстОшибки = ОписаниеОшибки();
		КонецПопытки;
		
	Иначе
		ТекстОшибки = CRM_БизнесПроцессыИЗадачиСервер.УстановитьНовогоОтветственного(ДополнительныеПараметры.ПараметрКоманды,
			 Ответственный);
	КонецЕсли;
	
	Если ТекстОшибки <> "" Тогда
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;
	Попытка
		ИмяФормы = ДополнительныеПараметры.ПараметрыВыполненияКоманды.Источник.ИмяФормы;
		Если СтрНайти(ИмяФормы, "ЭлектронноеПисьмо") <> 0 
			Или СтрНайти(ИмяФормы, "CRM_МенеджерПочты") <> 0 Тогда
			Если СтрНайти(ИмяФормы, "ЭлектронноеПисьмо") <> 0 Тогда
				ФормаДокумента = ДополнительныеПараметры.ПараметрыВыполненияКоманды.Источник;
				ФормаДокумента.Закрыть();
			КонецЕсли;
			ПараметрОповещения = Новый Массив;
			ПараметрОповещения.Добавить(Ответственный);
			ПараметрОповещения.Добавить(ПользователиКлиент.ТекущийПользователь());
			Оповестить("УстановленНовыйОтветственный", ПараметрОповещения);
		ИначеЕсли СтрНайти(ИмяФормы, "ФормаСписка") = 0 
			И СтрНайти(ИмяФормы, "ФормаМессенджера") = 0 
			И СтрНайти(ИмяФормы, "CRM_ФормаМоиЗадачи") = 0 Тогда
			ФормаДокумента = ДополнительныеПараметры.ПараметрыВыполненияКоманды.Источник;
			ФормаДокумента.Закрыть();
			Если ФормаДокумента.ВладелецФормы <> Неопределено Тогда
				ФормаДокумента.ВладелецФормы.Обновить();
			Иначе
				Оповестить("УстановленНовыйОтветственный", ДополнительныеПараметры.ПараметрКоманды[0]);
			КонецЕсли;
		ИначеЕсли СтрНайти(ИмяФормы, "ФормаСписка") <> 0 
			Или СтрНайти(ИмяФормы, "CRM_ФормаМоиЗадачи") <> 0 Тогда
			ДополнительныеПараметры.ПараметрыВыполненияКоманды.Источник.Элементы.Список.Обновить();
		Иначе	
			Оповестить("УстановленНовыйОтветственный", ДополнительныеПараметры.ПараметрКоманды[0]);
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;

КонецПроцедуры

Процедура ОбработкаВыбораИзМенюЗавершение(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Ответственный = ВыбранныйЭлемент.Значение;
	Если Ответственный = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Ответственный = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка") Тогда	
		ПоказатьОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ДопПараметры.ОписаниеОповещения, ДопПараметры.Источник);
	ИначеЕсли Ответственный = ПредопределенноеЗначение("Справочник.РолиИсполнителей.ПустаяСсылка") Тогда	
		ПоказатьОткрытьФорму("Справочник.РолиИсполнителей.ФормаВыбора", ДопПараметры.ОписаниеОповещения,
			 ДопПараметры.Источник);
	Иначе
		ОбработкаКомандыЗавершение(Ответственный, ДопПараметры.ОписаниеОповещения.ДополнительныеПараметры);		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаКомандыПеренаправитьПродолжение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
		Если Модуль.УстановитьОбъектамУровеньДоступаПользователя(
			ДопПараметры.ЗапрещенныеКлиентыКонтакты, ДопПараметры.Ответственный) Тогда
			ОбработкаКомандыЗавершение(ДопПараметры.Ответственный, ДопПараметры.ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Записать и закрыть форму выполнения задачи.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма выполнения задачи.
//  ВыполнитьЗадачу  - Булево - задача записывается в режиме выполнения.
//  ПараметрыОповещения - Структура - дополнительные параметры оповещения.
//
// Возвращаемое значение:
//   Булево   - Истина, если запись прошла успешно.
//
Функция ЗаписатьИЗакрытьВыполнить(Форма, ВыполнитьЗадачу = Ложь, ПараметрыОповещения = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	НовыйОбъект = Форма.Объект.Ссылка.Пустая();
	ТекстОповещения = "";
	Если ПараметрыОповещения = Неопределено Тогда
		ПараметрыОповещения = Новый Структура;
	КонецЕсли;
	Если НЕ Форма.НачальныйПризнакВыполнения И ВыполнитьЗадачу Тогда
		Если НЕ Форма.Записать(Новый Структура("ВыполнитьЗадачу", Истина)) Тогда
			Возврат Ложь;
		КонецЕсли;
		ТекстОповещения = НСтр("ru = 'Задача выполнена'");
	Иначе
		Если НЕ Форма.Записать() Тогда
			Возврат Ложь;
		КонецЕсли;
		ТекстОповещения = ?(НовыйОбъект, НСтр("ru = 'Задача создана'"), НСтр("ru='Задача изменена'"));
	КонецЕсли;
	
	// +CRM
	Если Форма.Параметры.Свойство("ОбновлятьКалендарь") Тогда
		ПараметрыОповещения.Вставить("ОбновлятьКалендарь", Форма.Параметры.ОбновлятьКалендарь);
	КонецЕсли;
	// -CRM
	
	Оповестить("Запись_ЗадачаИсполнителя", ПараметрыОповещения, Форма.Объект.Ссылка);
	ПоказатьОповещениеПользователя(ТекстОповещения,
		ПолучитьНавигационнуюСсылку(Форма.Объект.Ссылка),
		Строка(Форма.Объект.Ссылка),
		БиблиотекаКартинок.ДиалогИнформация);
	Форма.Закрыть();
	Возврат Истина;
	
КонецФункции

// Отмечает указанные задачи как принятые к исполнению.
//
// Параметры:
//  МассивЗадач	- Массив - Массив задач.
//
Процедура ПринятьЗадачиКИсполнению(Знач МассивЗадач) Экспорт
	
	// +CRM
	Если МассивЗадач.Количество() = 1 Тогда
		
		Задача = МассивЗадач[0];
		
		Если ТипЗнч(Задача) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			
			МассивЗадач = Новый Массив;
			
		Иначе
			
			ЗадачаПринятаКИсполнению = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Задача, "ПринятаКИсполнению");
			
			Если ЗадачаПринятаКИсполнению Тогда
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ПринятьЗадачиКИсполнениюОтменаПослеВопроса",
					 БизнесПроцессыИЗадачиКлиент,
					 МассивЗадач);
				ПоказатьВопрос(ОписаниеОповещения,
					 НСтр("ru='Задача уже принята к исполнению. Отменить?';
					|en='The task are already accept to execution. Cancel?'"),
					 РежимДиалогаВопрос.ДаНет);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	//БизнесПроцессыИЗадачиВызовСервера.ПринятьЗадачиКИсполнению(МассивЗадач);
	CRM_БизнесПроцессыИЗадачиВызовСервера.ПринятьЗадачиКИсполнению(МассивЗадач);
	// -CRM
	
	Если МассивЗадач.Количество() = 0 Тогда
		ПоказатьПредупреждение( , НСтр("ru ='Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	ТипЗначенияЗадачи = Неопределено;
	Для каждого Задача Из МассивЗадач Цикл
		Если ТипЗнч(Задача) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
			ТипЗначенияЗадачи = ТипЗнч(Задача);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ТипЗначенияЗадачи <> Неопределено Тогда
		ОповеститьОбИзменении(ТипЗначенияЗадачи);
	КонецЕсли;
	
КонецПроцедуры

// Отменяет принятие задачи к исполнению.
//
// Параметры:
//  Ответ		 - КодВозвратаДиалога - Ответ.
//  МассивЗадач	 - Массив - Массив задач.
//
Процедура ПринятьЗадачиКИсполнениюОтменаПослеВопроса(Ответ, МассивЗадач) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		БизнесПроцессыИЗадачиКлиент.ОтменитьПринятиеЗадачКИсполнению(МассивЗадач);
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьПоручение(ОписаниеКоманды, ДопПараметры = Неопределено) Экспорт
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка",
			 ОписаниеКоманды,
			 Новый УникальныйИдентификатор);
		
		ПараметрКоманды = ОписаниеКоманды;
		СтруктураОснования = Новый Структура("Основание,КартаМаршрута", ПараметрКоманды,
			 ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.Поручение"));
		ПараметрыФормы = Новый Структура("Основание", СтруктураОснования);
		Если ТипЗнч(ПараметрКоманды) = Тип("СправочникСсылка.Пользователи") Тогда
			ПараметрыФормы.Вставить("Исполнитель", ПараметрКоманды);
		КонецЕсли;
	Иначе	
		ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
		ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
		
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
		СтруктураОснования = Новый Структура("Основание,КартаМаршрута", ПараметрКоманды,
			 ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.Поручение"));
		ПараметрыФормы = Новый Структура("Основание", СтруктураОснования);
		Если ТипЗнч(ПараметрКоманды) = Тип("СправочникСсылка.Пользователи") Тогда
			ПараметрыФормы.Вставить("Исполнитель", ПараметрКоманды);
		КонецЕсли;	
	КонецЕсли;
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения", ПараметрыФормы,
		 ПараметрыВыполненияКоманды.Источник,
		 ПараметрыВыполненияКоманды.Уникальность);

КонецФункции // CRM_СоздатьПоручение()

#Область ВыполнениеЗадачи

Процедура ВыполнитьЗадачуПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	МассивОшибок =
		CRM_БизнесПроцессыСервер.ПроверкаНаличияОбъектовПоБизнесПроцессу(ОповещениеЗавершения.ДополнительныеПараметры.ЗадачаИсполнителя);
	Если МассивОшибок.Количество() > 0 Тогда
		Для Индекс = 0 По МассивОшибок.ВГраница() Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(МассивОшибок[Индекс]);
		КонецЦикла;
		ГруппаОбъектыПоЗадаче = Форма.Элементы.Найти("ГруппаОбъектыПоЗадаче");
		Если ГруппаОбъектыПоЗадаче <> Неопределено
			И ТипЗнч(ГруппаОбъектыПоЗадаче) = Тип("ГруппаФормы") Тогда
			ГруппаОбъектыПоЗадаче.Показать();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Если бизнес-процесс далее завершается неудачно, то возможно надо указать причину.
	Если CRM_БизнесПроцессыСервер.ПриведетКНеудачномуЗавершению(ОповещениеЗавершения.ДополнительныеПараметры.ЗадачаИсполнителя_БизнесПроцесс,
																ОповещениеЗавершения.ДополнительныеПараметры.ЗадачаИсполнителя_ТочкаМаршрута,
																ОповещениеЗавершения.ДополнительныеПараметры.ЗадачаИсполнителя_ВариантВыполнения) Тогда
		
		ПараметрыФормы = Новый Структура("ДосрочноеЗавершение", Ложь);														
		ФормаДосрочногоЗавершения = ПолучитьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаДосрочногоЗавершения",
			 ПараметрыФормы,
			 ЭтотОбъект);
		ФормаДосрочногоЗавершения.Заголовок = НСтр("ru='Неудачное завершение бизнес-процесса';
			|en='Unsuccessful business process termination'");
		ФормаДосрочногоЗавершения.Элементы.ПричинаНеудачногоЗавершения.Заголовок = НСтр("ru='Причина неудачного завершения';
			|en='Reason of unsuccessful completion'");
		ФормаДосрочногоЗавершения.ОписаниеОповещенияОЗакрытии = ОповещениеЗавершения;
		ФормаДосрочногоЗавершения.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаДосрочногоЗавершения.Открыть();
		Возврат;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Истина);

КонецПроцедуры

Процедура ВыполнениеЗадачиЗавершение(Результат, Форма) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("ЗавершенДосрочно") И Результат.ЗавершенДосрочно Тогда
			Результат.Вставить("Задача"					, Форма.ЗадачаИсполнителя);
			Результат.Вставить("ЭтапДосрочногоЗавершения"	,
				 ПредопределенноеЗначение("Справочник.CRM_ТочкиМаршрутов.ПустаяСсылка"));
			CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(Результат);
			Форма.Прочитать();
			Возврат;
		Иначе
			ПричинаДосрочногоЗавершения = Результат.ПричинаДосрочногоЗавершения;
		КонецЕсли;
	Иначе	
		ПричинаДосрочногоЗавершения = Неопределено;
	КонецЕсли;
	
	ПродолжитьВыполнение = Истина;
	Если ЗначениеЗаполнено(Форма.ЗадачаИсполнителя_БизнесПроцесс) Тогда
		// Проверим не работате ли кто-то с ведущей задачей если она есть
		Результат = CRM_БизнесПроцессыИЗадачиВызовСервера.ЗаблокироватьДанныеДляРедактированияВедущейЗадачи(Форма.ЗадачаИсполнителя_БизнесПроцесс,
			 ПродолжитьВыполнение);
		Если НЕ ПродолжитьВыполнение Тогда
			ТекстПредупреждения = НСтр("ru='Невозможно выполнить,
				| так как задача: ';en='It is impossible to execute because task:'") 
				+ Результат.ПредставлениеЗадачи + НСтр("ru=' редактируется '") 
				+ Результат.ТекстОшибки;
			
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
	Если ПродолжитьВыполнение Тогда
		ДопПараметры = Новый Структура("Форма", Форма);
		Если ЗначениеЗаполнено(ПричинаДосрочногоЗавершения) Тогда
			ДопПараметры.Вставить("ПричинаДосрочногоЗавершения", ПричинаДосрочногоЗавершения);
		КонецЕсли;
		НастройкиЭтапа = CRM_БизнесПроцессыИЗадачиВызовСервера.ПолучитьНастройкиЭтапа(Форма.ЗадачаИсполнителя);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводРезультатаВыполненияПродолжение", ЭтотОбъект, ДопПараметры);
		Если (CRM_БизнесПроцессыСервер.ПриведетКНеудачномуЗавершению(Форма.ЗадачаИсполнителя_БизнесПроцесс,
																Форма.ЗадачаИсполнителя_ТочкаМаршрута,
																Форма.ЗадачаИсполнителя_ВариантВыполнения, Ложь) И Форма.ИмяФормы = "Документ.CRM_Интерес.Форма.ФормаДокументаНовая")
			ИЛИ НастройкиЭтапа.ЗапрашиватьРезультатВыполненияПриЗавершении Тогда
			ПараметрыФормы = Новый Структура("Задача, ПредставлениеВариантаВыполнения, ОтложитьНаДату,
				| НастройкиЭтапа", Форма.ЗадачаИсполнителя, Форма.ЗадачаИсполнителя_ВариантВыполнения,
				 Форма.ЗадачаИсполнителя_ОтложитьНаДату,
				 НастройкиЭтапа);
			Если Форма.ИмяФормы = "Документ.CRM_Интерес.Форма.ФормаДокументаНовая" Тогда
				ОткрытьФорму("Обработка.CRM_АРМ_МоиПродажи.Форма.ФормаПереносаИнтереса", ПараметрыФормы,
					 ЭтотОбъект, , , , ОписаниеОповещения,
					 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе
				ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачиРезультатВыполнения",
					 ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения,
					 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
		Иначе
			РезультатВыполнения = Новый Структура("Отказ, РезультатВыполнения, ОтложитьНаДату,
				| ДатаИсполнения", Ложь, "", Форма.ЗадачаИсполнителя_ОтложитьНаДату,
				 ОбщегоНазначенияКлиент.ДатаСеанса());
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВыполнениеЗадачиПоУсловию()

Процедура ВводРезультатаВыполненияПродолжение(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат = Неопределено И НЕ Результат.Отказ Тогда
		
		Форма = ДопПараметры.Форма;
		Если ДопПараметры.Свойство("ПричинаДосрочногоЗавершения") Тогда
			Результат.Вставить("ПричинаДосрочногоЗавершения", ДопПараметры.ПричинаДосрочногоЗавершения);
		КонецЕсли;
		
		Форма.ЗадачаИсполнителя_ОтложитьНаДату = Результат.ОтложитьНаДату;
		// ДатаСтрокой = CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(ВернутьДату());
		//
		// Объект.CRM_ПоследнееДействиеСтрокой = ДатаСтрокой+" "
			//+НСтр("ru='Выполнена -> ';en='Done -> '") 
			//+ Строка(Объект.Исполнитель);
		//
		// Объект.РезультатВыполнения = "
		//|"+ДатаСтрокой+" "+НСтр("ru='Выполнена -> ';en='Done -> '") + Строка(Объект.Исполнитель)+"
		//|"+?(НЕ ПустаяСтрока(Результат.РезультатВыполнения),Результат.РезультатВыполнения,"")+"
		// |
		//|" +  Объект.РезультатВыполнения;
		//
		// Записать();
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ВариантВыполнения"		, Форма.ЗадачаИсполнителя_ВариантВыполнения);
		ПараметрыВыполнения.Вставить("ВариантВыполненияСтрокой"	, Форма.ЗадачаИсполнителя_ВариантВыполненияСтрокой);
		
		Если CRM_БизнесПроцессыСервер.ЗафиксироватьРезультатВыполненияЗадачи(Форма.ЗадачаИсполнителя,
			 Результат,
			 ПараметрыВыполнения) Тогда
			
			CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Форма.ЗадачаИсполнителя, ,
				 ?(ЗначениеЗаполнено(Форма.ЗадачаИсполнителя_ОтложитьНаДату),
				 Форма.ЗадачаИсполнителя_ОтложитьНаДату, Неопределено), ,
				 Результат);
			
		КонецЕсли;
		
		// ??? ЗАПРОС НА ПЕРЕНОС СРОКОВ
		
		// // Если был отправлен запрос на перенос срока исполнения,
		// // то надо автоматически завершить задачу по запросу. т.к. она стала  неактуальной.
		// Если ЗначениеЗаполнено(Объект.CRM_ПеренестиСрокИсполненияНа) Тогда
		//	CRM_БизнесПроцессыСервер.ПолучитьЗадачиПоЗапросуВыполнить(Объект.Ссылка);
		// Конецесли;
		
		ПоказатьОповещениеПользователя(
		НСтр("ru='Задача выполнена';en='Task is executed'"),
		ПолучитьНавигационнуюСсылку(Форма.ЗадачаИсполнителя),
		Строка(Форма.ЗадачаИсполнителя));
		
		Форма.Прочитать();
		Оповестить("ЗадачаВыполнена", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь", Форма.ЗадачаИсполнителя, Истина));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтложитьСледующуюЗадачу

Процедура ОтложитьСледующуюЗадачуЗавершение(Результат, Форма) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Форма.ЗадачаИсполнителя_ОтложитьНаДату = Результат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ЗадачаИсполнителя_Выполнено_ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	бГрупповаяОбработка = (ПараметрКоманды.Количество() > 1);
	
	ОчиститьСообщения();
	Для Каждого Задача Из ПараметрКоманды Цикл
	
		Если Не ЗначениеЗаполнено(Задача) Или ТипЗнч(Задача) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанных = CRM_БизнесПроцессыИЗадачиВызовСервера.ОпределитьПринадлежностьЗадачи(Задача);
		Если СтруктураДанных.Свойство("ЕстьПодчиненныеЗадачи") Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='У задачи';en='At the task'") + " """ + Строка(Задача) + """ "
				+ НСтр("ru='есть подчиненные задачи,
					| задача не будет выполнена!';en='there was subordinate tasks,
					| the task will not be fulfill!'");
			Сообщение.Сообщить();
			Продолжить;
		КонецЕсли;
		
		Если СтруктураДанных.Тип = 1 И НЕ СтруктураДанных.Выполнена Тогда
			// Получим варианты выполнения задачи, если они есть (когда после точки действия задачи идет точка выбора варианта
			// или условия).
			СтруктураВариантовВыполнения = CRM_БизнесПроцессыСервер.ПолучитьВариантыВыполненияЗадачи(Задача);
			Если СтруктураВариантовВыполнения.СписокВариантов.Количество() > 0 Тогда
				Если бГрупповаяОбработка Тогда
					ПоказатьОповещениеПользователя(
						НСтр("ru='Задача пропущена';en='The task are pass'"),
						ПолучитьНавигационнуюСсылку(Задача),
						НСтр("ru='Невозможна групповая обработка: ';en='Group processing impossible: '") + Строка(Задача));
					Продолжить;
				Иначе
					ПараметрыФормы = Новый Структура("Ключ", Задача);
					ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачи", ПараметрыФормы,
						 ПараметрыВыполненияКоманды.Источник);
					Продолжить; 
				КонецЕсли;
			КонецЕсли;
			
			СтруктураДанных.Вставить("Задача", Задача);
			СтруктураДанных.Вставить("ПараметрКоманды", ПараметрКоманды);
			СтруктураДанных.Вставить("Источник", ПараметрыВыполненияКоманды.Источник);
			СписокТочекМаршрута = CRM_БизнесПроцессыСервер.ПроверитьНаличиеСледующегоИсполнителя(Задача);
			Если СписокТочекМаршрута.Количество() > 0 Тогда
				Если бГрупповаяОбработка Тогда
					ПоказатьОповещениеПользователя(
					НСтр("ru='Задача пропущена';en='The task are pass'"),
					ПолучитьНавигационнуюСсылку(Задача),
					НСтр("ru='Невозможна групповая обработка: ';en='Group processing impossible: '") + Строка(Задача));
					//
					Продолжить;
				Иначе
					ПараметрыФормы = Новый Структура("БизнесПроцесс, СписокТочекМаршрута",
						 СтруктураДанных.БизнесПроцесс,
						 СписокТочекМаршрута);
					ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаКомандыПродолжение", ЭтотОбъект, СтруктураДанных);
					ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаВыбораИсполнителя", ПараметрыФормы,
						 ПараметрыВыполненияКоманды.Источник, , , , ОписаниеОповещения,
						 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			ОбработкаКомандыПродолжение(Истина, СтруктураДанных);
			Возврат;
		ИначеЕсли СтруктураДанных.Тип = 0 Тогда
			БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Задача, Истина);
			ПоказатьОповещениеПользователя(
				НСтр("ru='Задача выполнена';en='Task is executed'"),
				ПолучитьНавигационнуюСсылку(Задача),
				Строка(Задача));
				
			Если ЗначениеЗаполнено(СтруктураДанных.Предмет)
				 И ТипЗнч(СтруктураДанных.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
				
				УчетнаяЗапись = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтруктураДанных.Предмет, "УчетнаяЗапись");
				ФормаПисьма = ПолучитьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента",
					 Новый Структура("Ключ",
					 СтруктураДанных.Предмет)); 
				Если НЕ (ФормаПисьма = Неопределено) Тогда
					ДополнительныеПараметры = Новый Структура("СтруктураДанных, ПараметрКоманды, ФормаПисьма",
						 СтруктураДанных, ПараметрКоманды,
						 ФормаПисьма);
					ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьТипОснованияЗавершение", ЭтотОбъект,
						 ДополнительныеПараметры);
					CRM_УправлениеЭлектроннойПочтойКлиент.ВопросПеренестиПисьмоВПапкуОбработанные(УчетнаяЗапись,
						 ФормаПисьма.Папка,
						 ОписаниеОповещения);
					Возврат;
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Предмет)
				 И ТипЗнч(СтруктураДанных.Предмет) = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
				ФормаСправочник = ПолучитьФорму("Справочник.МаркетинговыеМероприятия.ФормаОбъекта",
					 Новый Структура("Ключ",
					 СтруктураДанных.Предмет)); 
				Если ФормаСправочник.Открыта() Тогда
					ФормаСправочник.Объект.Завершено = Истина;
					Попытка
						ФормаСправочник.Записать();
						ФормаСправочник.Закрыть();
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось изменить состояние,
							| вероятно событие заблокировано: ';en='Failed to change state may be event is blocked: '") 
							+ Строка(СтруктураДанных.Предмет));
					КонецПопытки;
				Иначе
					CRM_БизнесПроцессыИЗадачиВызовСервера.ИзменитьМаркетинговоеМероприятие(СтруктураДанных.Предмет);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	Оповестить("Запись_ЗадачаИсполнителя", Новый Структура("Выполнена, ОбновлятьКалендарь", Истина, 1), ПараметрКоманды);
	
КонецПроцедуры

Процедура ОбработкаКомандыПродолжение(Результат, СтруктураДанных) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Проверим не требуется ли создать что-либо, для завершения задачи.
	МассивОшибок = CRM_БизнесПроцессыСервер.ПроверкаНаличияОбъектовПоБизнесПроцессу(СтруктураДанных.Задача);
	Если МассивОшибок.Количество() > 0 Тогда
		Для Индекс = 0 По МассивОшибок.ВГраница() Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(МассивОшибок[Индекс]);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	// Если бизнес-процесс далее завершается неудачно, то возможно надо указать причину.
	Если CRM_БизнесПроцессыСервер.ПриведетКНеудачномуЗавершению(СтруктураДанных.БизнесПроцесс,
		 СтруктураДанных.ТочкаМаршрута,
		 СтруктураДанных.ВариантВыполнения) Тогда
		
		ФормаДосрочногоЗавершения = ПолучитьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаДосрочногоЗавершения", ,
			 СтруктураДанных.Источник);
		ФормаДосрочногоЗавершения.Заголовок = НСтр("ru='Неудачное завершение бизнес-процесса';
			|en='Unsuccessful business process termination'");
		ФормаДосрочногоЗавершения.Элементы.ПричинаНеудачногоЗавершения.Заголовок = НСтр("ru='Причина неудачного завершения';
			|en='Reason of unsuccessful completion'");
		ФормаДосрочногоЗавершения.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗадачаИсполнителя_Выполнено_ОбработкаКомандыЗавершение",
			 ЭтотОбъект,
			 СтруктураДанных);
		ФормаДосрочногоЗавершения.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаДосрочногоЗавершения.Открыть();
		Возврат;
	КонецЕсли;
	ОбработкаКомандыЗавершение(Истина, СтруктураДанных);
	
КонецПроцедуры

Процедура ЗадачаИсполнителя_Выполнено_ОбработкаКомандыЗавершение(Результат, СтруктураДанных) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		Если СтруктураДанных.Свойство("ЗавершенДосрочно") Тогда
			Результат.ЗавершенДосрочно = СтруктураДанных.ЗавершенДосрочно;
		Иначе
			Результат.ЗавершенДосрочно = Ложь;
		КонецЕсли;
		Результат.Вставить("Задача", СтруктураДанных.Задача);
		Результат.Вставить("ЭтапДосрочногоЗавершения"	,
			 ПредопределенноеЗначение("Справочник.CRM_ТочкиМаршрутов.ПустаяСсылка"));
		CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(Результат);
	КонецЕсли;
	
	// Выполним задачу
	CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(СтруктураДанных.Задача);

	СтруктураДанных.Источник.Прочитать();
	ПоказатьОповещениеПользователя(
		НСтр("ru='Задача выполнена';en='Task is executed'"),
		ПолучитьНавигационнуюСсылку(СтруктураДанных.Задача),
		Строка(СтруктураДанных.Задача));
	Оповестить("Запись_ЗадачаИсполнителя", Новый Структура("Выполнена, ОбновлятьКалендарь", Истина, 1),
		 СтруктураДанных.ПараметрКоманды);
	
КонецПроцедуры

#КонецОбласти

#Область ПеренаправлениеЗадачи

Процедура ЗадачаПеренаправитьЗавершение(Результат, Форма) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		МассивЗадач = Новый Массив;
		МассивЗадач.Добавить(Форма.ЗадачаИсполнителя);
		
		Если CRM_БизнесПроцессыСервер.ЗафиксироватьРезультатПеренаправления(Форма.ЗадачаИсполнителя, Результат) Тогда
			
			МассивПеренаправленныхЗадач = Новый Массив;
			CRM_БизнесПроцессыИЗадачиВызовСервера.ПеренаправитьЗадачи(МассивЗадач,
				 ?(Результат.Исполнитель = Неопределено, Результат.Роль, Результат.Исполнитель), Ложь,
				 МассивПеренаправленныхЗадач);
			
			Оповестить("ПереопределяемаяКоманда_ЗадачаИсполнителя_Перенаправить", Форма.ЗадачаИсполнителя,
				 ?(Результат.Исполнитель = Неопределено, Результат.Роль,
				 Результат.Исполнитель));
			Форма.ЗадачаИсполнителя = МассивПеренаправленныхЗадач[0];
			//Форма.ОтобразитьИзменениеДанных(Форма.ЗадачаИсполнителя, ВидИзмененияДанных.Изменение);
			
			Если ТипЗнч(Результат.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				Если Форма.ЗадачаИсполнителя_ТекущийПользователь = Результат.Исполнитель Тогда
					Форма.Элементы.ПанельСтраницАвтоКнопки.ТекущаяСтраница = Форма.Элементы.СтраницаЗадачиНеПринята;
				Иначе
					Форма.Элементы.ПанельСтраницАвтоКнопки.ТекущаяСтраница = Форма.Элементы.СтраницаЗадачиЧужая;
				КонецЕсли;
				Форма.Элементы.ПолеИсполнительЗадачи.Видимость = Истина;
				Форма.Элементы.ПолеРольИсполнителяЗадачи.Видимость = Ложь;
				Форма.Элементы.ГруппаАвтоКнопки.ТолькоПросмотр =
					Не (Форма.ЗадачаИсполнителя_ТекущийПользователь = Результат.Исполнитель);
			ИначеЕсли ТипЗнч(Результат.Роль) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
				Если CRM_БизнесПроцессыСервер.ПользовательУчастникРоли(Форма.ЗадачаИсполнителя_ТекущийПользователь,
					 Результат.Роль) Тогда
					Форма.Элементы.ПанельСтраницАвтоКнопки.ТекущаяСтраница = Форма.Элементы.СтраницаЗадачиНеПринята;
				Иначе
					Форма.Элементы.ПанельСтраницАвтоКнопки.ТекущаяСтраница = Форма.Элементы.СтраницаЗадачиЧужая;
				КонецЕсли;
				Форма.Элементы.ПолеИсполнительЗадачи.Видимость = Ложь;
				Форма.Элементы.ПолеРольИсполнителяЗадачи.Видимость = Истина;
				Форма.Элементы.ГруппаАвтоКнопки.ТолькоПросмотр = Не CRM_БизнесПроцессыСервер.ПользовательУчастникРоли(Форма.ЗадачаИсполнителя_ТекущийПользователь,
					 Результат.Роль);
			Иначе
				Форма.Закрыть();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийИзФормДокументов

Процедура ВвестиОбъект(ПолноеИмяОбъекта, Форма)
	
	Если СтрНайти(ПолноеИмяОбъекта, "Документ.") > 0 Тогда
		
		Если СтрНайти(ПолноеИмяОбъекта, ".ЭлектронноеПисьмоВходящее") > 0 Тогда
			ПоказатьПредупреждение(,
				 НСтр("ru='Создание Входящих писем запрещено. Воспользуйтесь кнопкой ""Выбрать документ""';
				|en='Incoming mail is not allowed. Use the ""Select document"" button'"));
			Возврат;
		КонецЕсли;
		
		ИмяДокумента = СтрЗаменить(ПолноеИмяОбъекта, "Документ.", "");
		Если ИмяДокумента = "ТелефонныйЗвонок" Тогда
			#Если ВебКлиент Тогда
				ИспользоватьОблачнуюТелефонию =
					сфпОбщегоНазначенияПовтИсп.ПолучитьЗначениеКонстанты("сфпИспользоватьОблачнуюТелефонию");
				Если Не ИспользоватьОблачнуюТелефонию Тогда
					Состояние(Нстр("ru='Работа СофтФона невозможна в web-клиенте!';
						|en='Operation of SoftPhone is impossible in a web client!'"));
					Возврат;
				КонецЕсли;
			#КонецЕсли
			Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда
				Возврат;
			КонецЕсли;
			СписокОбъектов =
				CRM_БизнесПроцессыИЗадачиВызовСервера.УчастникиБизнесПроцесса(Форма.ЗадачаИсполнителя_БизнесПроцесс);
			Если СписокОбъектов.Количество() > 0 Тогда
				сфпСофтФонПроКлиент.сфпПозвонитьВыбравТелефон(СписокОбъектов, Новый Структура("Основание",
					 Форма.ЗадачаИсполнителя));
			КонецЕсли;
		Иначе
			
			ДанныеТиповОбъектов = Новый Массив;
			Для Каждого Строка Из Форма.ТипыОбъектовПоБизнесПроцессам Цикл
				ДанныеТиповОбъектов.Добавить(Новый Структура("ВидОбъекта,ЭтапОснования", Строка.ВидОбъекта, Строка.ЭтапОснования));
			КонецЦикла;
			
			ПараметрыФормы = CRM_БизнесПроцессыИЗадачиВызовСервера.ПроверитьНаличиеОснования(ИмяДокумента,
				Форма.ЗадачаИсполнителя_БизнесПроцесс, ДанныеТиповОбъектов);
			Если ПараметрыФормы.СписокСсылок.Количество() > 0 Тогда
				
				Если ЗначениеЗаполнено(Форма.ЗадачаИсполнителя_БизнесПроцесс) Тогда
					ПараметрыФормы.Вставить("БизнесПроцесс", Форма.ЗадачаИсполнителя_БизнесПроцесс);
				КонецЕсли;							
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Форма", Форма);
				ДополнительныеПараметры.Вставить("ИмяДокумента", ИмяДокумента);
				ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиОбъектЗавершение",
					 CRM_БизнесПроцессыИЗадачиКлиент,
					 ДополнительныеПараметры);
				ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаВыбораОснования", ПараметрыФормы,
					 Форма, , , , ОписаниеОповещения,
					 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе
				ПараметрыФормы = Новый Структура("Основание", Форма.ЗадачаИсполнителя);
				Если ПолноеИмяОбъекта = "Документ.CRM_Взаимодействие" Тогда
					ПараметрыФормы.Вставить("ОткрыватьФорму", Истина);
				КонецЕсли;	
				ОткрытьФорму(ПолноеИмяОбъекта + ".ФормаОбъекта", ПараметрыФормы, Форма);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти(ПолноеИмяОбъекта, "Справочник.") > 0 Тогда
		
		ПараметрыФормы = Новый Структура("Основание", Форма.ЗадачаИсполнителя);
		ОткрытьФорму(ПолноеИмяОбъекта + ".ФормаОбъекта", ПараметрыФормы, Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик завершения вывода объекта.
//
// Параметры:
//  ВыбЗнач					 - ДокументСсылка, СправочникСсылка, Неопределено	 - Выбранное значение.
//  ДополнительныеПараметры	 - Произвольный	 - Доплонительные параметры.
//
Процедура ВвестиОбъектЗавершение(ВыбЗнач, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ИмяДокумента = ДополнительныеПараметры.ИмяДокумента;
	
	Если НЕ ВыбЗнач = Неопределено Тогда
		ПараметрыФормы = Новый Структура("Основание", ВыбЗнач);
		ПараметрыФормы.Вставить("СозданИзЭтапаСделки", Истина);
		Если ИмяДокумента = "CRM_Взаимодействие" Тогда
			ПараметрыФормы.Вставить("ОткрыватьФорму", Истина);
		КонецЕсли;
		ИмяФормы = "Документ." + ИмяДокумента + ".ФормаОбъекта";
		Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			ТипЗаказКлиента = "ДокументСсылка.ЗаказКлиента";
			
			МассивИменЗаказов = Новый Массив();
			МассивИменЗаказов.Добавить("ЗаказПоставщику");
			МассивИменЗаказов.Добавить("ДвижениеПродукцииИМатериалов");
			МассивИменЗаказов.Добавить("ЗаказНаПеремещение");
			МассивИменЗаказов.Добавить("ЗаказНаСборку");
			МассивИменЗаказов.Добавить("ЗаказПереработчику");
			
			Если CRM_ОбщегоНазначенияСервер.ЕстьОбщийМодуль("ПроизводствоВызовСервера") Тогда
				МодульПроизводствоВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроизводствоВызовСервера");
				// ++Устарело_Производство21
				Если МодульПроизводствоВызовСервера.ИспользуетсяПроизводство22() Тогда
					// --Устарело_Производство21
					МассивИменЗаказов.Добавить("ЗаказНаПроизводство2_2");
					// ++Устарело_Производство21
				Иначе
					МассивИменЗаказов.Добавить("ЗаказНаПроизводство");
				КонецЕсли;
				// --Устарело_Производство21
			КонецЕсли;
			
			Если ТипЗнч(ВыбЗнач) = Тип(ТипЗаказКлиента) И Не (МассивИменЗаказов.Найти(ИмяДокумента) = Неопределено) Тогда
				ДополнительныеПараметрыОписания = Новый Структура;
				ДополнительныеПараметрыОписания.Вставить("ИмяМенеджераДокумента", ИмяДокумента);
				ДополнительныеПараметрыОписания.Вставить("ИмяФормы", ИмяФормы);
				ДополнительныеПараметрыОписания.Вставить("ПараметрыОписаныВОбщемМодуле", Ложь);
				
				ОписаниеКоманды = Новый Структура;
				ОписаниеКоманды.Вставить("МножественныйВыбор", Ложь);
				ОписаниеКоманды.Вставить("ДополнительныеПараметры", ДополнительныеПараметрыОписания);
				
				ПараметрыВыполнения = Новый Структура;
				ПараметрыВыполнения.Вставить("Форма", Форма);
				ПараметрыВыполнения.Вставить("ОписаниеКоманды", ОписаниеКоманды);
				
				МодульСозданиеНаОснованииУТКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СозданиеНаОснованииУТКлиент");
				МодульСозданиеНаОснованииУТКлиент.СоздатьОбеспечивающийЗаказ(ВыбЗнач, ПараметрыВыполнения);
			Иначе
				ОткрытьФорму(ИмяФормы, ПараметрыФормы, Форма.Элементы.ОбъектыПоБизнесПроцессам);
			КонецЕсли;
		Иначе
			ОткрытьФорму(ИмяФормы, ПараметрыФормы, Форма.Элементы.ОбъектыПоБизнесПроцессам);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьОбъект(ПолноеИмяОбъекта, Форма)
	
	ДополнительныеПараметры = Новый Структура("Форма", Форма);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьОбъектЗавершение",
		 CRM_БизнесПроцессыИЗадачиКлиент,
		 ДополнительныеПараметры);
	
	Если СтрНайти(ПолноеИмяОбъекта, "Документ.") > 0 Тогда
		
		ИмяДокумента = СтрЗаменить(ПолноеИмяОбъекта, "Документ.", "");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		
		Если СтрНайти(ИмяДокумента, "Событие") > 0 Тогда
			Партнер = CRM_БизнесПроцессыИЗадачиВызовСервера.ПартнерБизнесПроцесса(Форма.ЗадачаИсполнителя_БизнесПроцесс);
			ПараметрыФормы.Вставить("ПартнерБП", Партнер);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ПолучитьИмяРеквизитаСписка");
		
		ФормаВыбора = ПолучитьФорму("Документ." + ИмяДокумента + ".ФормаВыбора", ПараметрыФормы, Форма);
		
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			СписокИмяРеквизитаФормы = "Список";
		Иначе
			Попытка
				СписокИмяРеквизитаФормы = ФормаВыбора["ИмяРеквизитаСписка"];
			Исключение
				СписокИмяРеквизитаФормы = "Список";	
			КонецПопытки;
			Попытка
				// BSLLS:UnusedLocalVariable-off
				РеквизитФормыСписок = ФормаВыбора[СписокИмяРеквизитаФормы];
				// BSLLS:UnusedLocalVariable-on
			Исключение
				СписокИмяРеквизитаФормы = "";
			КонецПопытки;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СписокИмяРеквизитаФормы) Тогда
		
			Если Форма.ОбъектыПоБизнесПроцессам.Количество() > 0 Тогда
				
				СписокОтбора = Новый СписокЗначений();
				Для Каждого Строка Из Форма.ОбъектыПоБизнесПроцессам Цикл
					СписокОтбора.Добавить(Строка.Объект);
				КонецЦикла;
				
				ЭлементОтбора					=
					ФормаВыбора[СписокИмяРеквизитаФормы].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеВСписке;
				ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Ссылка");
				ЭлементОтбора.ПравоеЗначение	= СписокОтбора;
				ЭлементОтбора.Использование		= Истина;
				
			КонецЕсли;
			
			// Для документа "ЗаказНаПроизводство2_2" отбор не устанавливаем, так как реквизит "Партнер" запоняется только,
			// если документ был создан на основании "Заказа давальца".
			ЕстьРеквизитПартнера = CRM_БизнесПроцессыИЗадачиВызовСервера.ЕстьРеквизитПартнера(ИмяДокумента);
			Если Не ИмяДокумента = "ЗаказНаПроизводство2_2" И ЕстьРеквизитПартнера Тогда
				Партнер = CRM_БизнесПроцессыИЗадачиВызовСервера.ПартнерБизнесПроцесса(Форма.ЗадачаИсполнителя_БизнесПроцесс);
				Если НЕ Партнер = Неопределено Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФормаВыбора[СписокИмяРеквизитаФормы],
																							"Партнер",
																							Партнер,
																							ВидСравненияКомпоновкиДанных.Равно,
																							,
																							Истина,
																							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
																							
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;	
		
		ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбора.Открыть();
		
	КонецЕсли;
	
	Если СтрНайти(ПолноеИмяОбъекта, "Справочник.") > 0 Тогда
		
		ИмяСправочника = СтрЗаменить(ПолноеИмяОбъекта, "Справочник.", "");
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		
		Если Форма.ОбъектыПоБизнесПроцессам.Количество() > 0 Тогда
			СписокОтбора = Новый СписокЗначений();
			Для Каждого Строка Из Форма.ОбъектыПоБизнесПроцессам Цикл
				СписокОтбора.Добавить(Строка.Объект);
			КонецЦикла;
			
			ФормаВыбора = ПолучитьФорму("Справочник." + ИмяСправочника + ".ФормаВыбора", ПараметрыФормы, Форма);
			
			ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеВСписке;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Ссылка");
			ЭлементОтбора.ПравоеЗначение	= СписокОтбора;
			ЭлементОтбора.Использование		= Истина;
			
			ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
			ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ФормаВыбора.Открыть();
		Иначе
			ОткрытьФорму("Справочник." + ИмяСправочника + ".ФормаВыбора", ПараметрыФормы, Форма, , , ,
				 ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик завершения выбора объекта.
//
// Параметры:
//  Результат				 - Характеристика.CRM_ВидыОбъектовБизнесПроцессов	 - Реультат выбора.
//  ДополнительныеПараметры	 - Произвольный	 - Дополнительные параметры.
//
Процедура ВыбратьОбъектЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	НоваяСтрока					= Форма.ОбъектыПоБизнесПроцессам.Добавить();
	НоваяСтрока.БизнесПроцесс	= Форма.ЗадачаИсполнителя_БизнесПроцесс;
	НоваяСтрока.Задача			= Форма.ЗадачаИсполнителя;
	НоваяСтрока.ТочкаМаршрута	= Форма.ЗадачаИсполнителя_ТочкаМаршрута;
	НоваяСтрока.Объект			= Результат;
	НоваяСтрока.ДатаРегистрации	= ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Для Каждого СтрокаТипа Из Форма.ТипыОбъектовПоБизнесПроцессам Цикл
		Если СтрокаТипа.ТипЗначения.СодержитТип(ТипЗнч(Результат)) Тогда
			НоваяСтрока.ВидОбъекта = СтрокаТипа.ВидОбъекта;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	CRM_БизнесПроцессыИЗадачиВызовСервера.ДобавитьЗаписьПоОбъекту(Результат,
		Форма.ЗадачаИсполнителя,
		Форма.ЗадачаИсполнителя_БизнесПроцесс,
		Форма.ЗадачаИсполнителя_ТочкаМаршрута,
		НоваяСтрока.ДатаРегистрации,
		НоваяСтрока.ВидОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Открыть форму выполнения задачи, которую предоставляет бизнес-процесс.  
//
// Параметры:
//  ЗадачаСсылка  - ЗадачаИсполнителяСсылка  - задача.
//  ИзКалендаря   - Число - признак обновления календаря.
//
// Возвращаемое значение:
//   Булево   - Истина, если форма выполнения задачи была найдена и открыта.
//
Функция ОткрытьФормуВыполненияЗадачи(Знач ЗадачаСсылка, Знач ИзКалендаря = 0) Экспорт
	
	ПараметрыФормы = CRM_БизнесПроцессыИЗадачиВызовСервера.ФормаВыполненияЗадачи(ЗадачаСсылка, ИзКалендаря);
	ИмяФормыВыполненияЗадачи = "";
	Результат = ПараметрыФормы.Свойство("ИмяФормы", ИмяФормыВыполненияЗадачи);
	Если Результат Тогда
		Если ИмяФормыВыполненияЗадачи = "Документ.CRM_ЖурналыВстреч.ФормаОбъекта" Тогда
			ИмяФормыВыполненияЗадачи = "Обработка.CRM_АРМПланированияВстреч.Форма.ФормаАРМ";
		КонецЕсли;	
		ОткрытьФорму(ИмяФормыВыполненияЗадачи, ПараметрыФормы.ПараметрыФормы);
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции

// Отмечает указанную задачу как принятую к исполнению.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения	- Передаваемая форма. 
//  ТекущийПользователь	 - СправочникСсылка.Пользователи - Текущий пользователь. 
//
Процедура ПринятьЗадачуКИсполнению(Форма, ТекущийПользователь) Экспорт
	
	// +CRM
	Если ТипЗнч(Форма) = Тип("Структура") И Форма.Свойство("Ссылка")
		И ТипЗнч(Форма.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Форма.Объект.ПринятаКИсполнению = Истина;
		
		// ДатаПринятияКИсполнению устанавливается пустой - она будет проинициализирована 
		// текущей датой сеанса перед записью самой  задачи.
		// Форма.Объект.ДатаПринятияКИсполнению = Дата('00010101');
		Форма.Объект.ДатаПринятияКИсполнению = ОбщегоНазначенияКлиент.ДатаСеанса();
		// Условие закомментировано по задаче В000195413
		// Если НЕ ЗначениеЗаполнено(Форма.Объект.Исполнитель) Тогда
			Форма.Объект.Исполнитель = ТекущийПользователь;
		// КонецЕсли;
		
		ОчиститьСообщения();
		Форма.Записать();
		// ОбновитьДоступностьКомандПринятияКИсполнению(Форма);
		ОповеститьОбИзменении(Форма.Объект.Ссылка);
		
		CRM_БизнесПроцессыСервер.ЗафиксироватьИсполнителяЭтапаПоручения(Форма.Ссылка, ТекущийПользователь);
	Иначе
		
		Форма.Объект.ПринятаКИсполнению = Истина;
		Форма.Объект.ДатаПринятияКИсполнению = ОбщегоНазначенияКлиент.ДатаСеанса();
		// Условие закомментировано по задаче В000195413
		// Если НЕ ЗначениеЗаполнено(Форма.Объект.Исполнитель) Тогда
			Форма.Объект.Исполнитель = ТекущийПользователь;
		// КонецЕсли;
		
		ДатаПринятияКИсполнениюСтрокой =
			CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(Форма.Объект.ДатаПринятияКИсполнению);
		
		Форма.Объект.CRM_ПоследнееДействиеСтрокой = ДатаПринятияКИсполнениюСтрокой + " " 
			+ НСтр("ru='Принята к исполнению -> ';en='Accepted for Execution ->'") 
			+ Строка(ТекущийПользователь);
		
		Если НЕ Форма.Объект.РезультатВыполнения = "" Тогда
			Форма.Объект.РезультатВыполнения = "
			|" + ДатаПринятияКИсполнениюСтрокой + " " 
				+ НСтр("ru='Принята к исполнению -> ';en='Accepted for Execution ->'") 
				+ Строка(ТекущийПользователь) 
				+ "
			|
			|" + Форма.Объект.РезультатВыполнения;
		Иначе
			Форма.Объект.РезультатВыполнения = ДатаПринятияКИсполнениюСтрокой + " " 
				+ НСтр("ru='Принята к исполнению -> ';en='Accepted for Execution ->'") 
				+ Строка(ТекущийПользователь);
		КонецЕсли;
		
		ОчиститьСообщения();
		Форма.Записать();
		ОповеститьОбИзменении(Форма.Объект.Ссылка);
		
		CRM_БизнесПроцессыСервер.ЗафиксироватьИсполнителяЭтапаПоручения(Форма.Объект.Ссылка, ТекущийПользователь);
	КонецЕсли;
	
	CRM_ОповещенияСервер.УдалитьОповещенияСозданныеПриАдресацииНаРоль(Форма.Объект.Ссылка);
	// -CRM
	
КонецПроцедуры

// Отмечает указанную задачу как не принятую к исполнению.
//
// Параметры:
//  Форма - Форма - Обрабатываемая форма.
// 
Процедура ОтменитьПринятиеЗадачиКИсполнению(Форма) Экспорт
	
	// +CRM
	Если ТипЗнч(Форма) = Тип("Структура") И Форма.Свойство("Ссылка")
		И ТипЗнч(Форма.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
	// -CRM
		Форма.Объект.ПринятаКИсполнению = Ложь;
		Форма.Объект.ДатаПринятияКИсполнению = "00010101000000";
		Если Не Форма.Объект.РольИсполнителя.Пустая() Тогда
			Форма.Объект.Исполнитель = Неопределено;
		КонецЕсли;
		
		ОчиститьСообщения();
		Форма.Записать();
		// +CRM
		// ОбновитьДоступностьКомандПринятияКИсполнению(Форма);
		// -CRM
		ОповеститьОбИзменении(Форма.Объект.Ссылка);
	// +CRM
	Иначе
		ТекущийПользователь = Форма.Объект.Исполнитель;
		
		Форма.Объект.ПринятаКИсполнению = Ложь;
		Форма.Объект.ДатаПринятияКИсполнению = "00010101000000";
		Если Не Форма.Объект.РольИсполнителя.Пустая() Тогда
			Форма.Объект.Исполнитель = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		КонецЕсли;
		
		ДатаПринятияКИсполнениюСтрокой = 
			CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(ОбщегоНазначенияКлиент.ДатаСеанса());
		
		Форма.Объект.CRM_ПоследнееДействиеСтрокой = ДатаПринятияКИсполнениюСтрокой + " " 
			+ НСтр("ru='Отмена принятия к исполнению -> ';en='Cancel acceptance ->'") + Строка(ТекущийПользователь);
		
		Если НЕ Форма.Объект.РезультатВыполнения = "" Тогда
			Форма.Объект.РезультатВыполнения = "
			|" + ДатаПринятияКИсполнениюСтрокой + " " 
				+ НСтр("ru='Отмена принятия к исполнению -> ';en='Cancel acceptance ->'") + Строка(ТекущийПользователь) 
				+ "
			|
			|" + Форма.Объект.РезультатВыполнения;
		Иначе
			Форма.Объект.РезультатВыполнения = ДатаПринятияКИсполнениюСтрокой + " " 
				+ НСтр("ru='Отмена принятия к исполнению -> ';en='Cancel acceptance ->'") + Строка(ТекущийПользователь);
		КонецЕсли;
		
		ОчиститьСообщения();
		Форма.Записать();
		ОповеститьОбИзменении(Форма.Объект.Ссылка);
	КонецЕсли;
	// +CRM
		
КонецПроцедуры

#Область ДополнительныеПроцедурыИФункции

// Стандартный обработчик Выбор для списков задач.
//  Для вызова из обработчика события таблицы формы Выбор.
//
// Параметры:
//  Элемент				 - ЭлементФормы - Элемент формы. 
//  ВыбраннаяСтрока		 - ЗадачаСсылка.ЗадачаИсполнителя - Значение выбранной строки.
//  Поле				 - ПолеФормы - Активное поле (колонка). 
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной 
//									(системной) обработки события.
//
Процедура СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ВыбраннаяСтрока) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Возврат;	
	КонецЕсли;
	СтандартнаяОбработка = НЕ ОткрытьФормуВыполненияЗадачи(ВыбраннаяСтрока);
	
КонецПроцедуры

// Стандартный обработчик ПередНачаломИзменения для списков задач.
//  Для вызова из обработчика события таблицы формы ПередНачаломИзменения.
//
// Параметры:
//  Элемент	 - ЭлементФормы - Элемент формы. 
//  Отказ	 - Булево - Признак отказа от редактирования объекта.
//
Процедура СписокЗадачПередНачаломИзменения(Элемент, Отказ) Экспорт
	
	Если ТипЗнч(Элемент.ТекущаяСтрока) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Возврат;	
	КонецЕсли;
	
	Если ОткрытьФормуВыполненияЗадачи(Элемент.ТекущаяСтрока) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийИзФормДокументов

// Процедура - проверка действия формы
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - Форма.
//  Параметр - КомандаФормы	 - Команда формы.
//
Процедура ПроверитьДействиеФормы(Форма, Параметр) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ОбъектыПоБизнесПроцессам")
		И Форма.ТекущийЭлемент.Имя = "ГиперссылкаВвести" Тогда
		
		ДополнительныеПараметры = Новый Структура("Форма", Форма);
		ВыбратьОбъектЗавершение(Параметр, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в формах при выборе команды, которая добавлена программно
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - форма в которой расположена команда
//  Команда					 - КомандаФормы - выбранная команда
//  ДополнительныеПараметры	 - Структура - дополнительные параметры
//
Процедура ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры) Экспорт
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЗадачаИсполнителя") Тогда
		Возврат;
	КонецЕсли;
	
	Если Команда.Имя = "Команда_ПринятьКИсполнению" Тогда
		
		Если НЕ Форма.ЗадачаИсполнителя_ПринятаКИсполнению Тогда
			
			Если CRM_БизнесПроцессыСервер.ПринятьЗадачуКИсполнениюИзФормыДокумента(Форма.ЗадачаИсполнителя,
				 Форма.ЗадачаИсполнителя_ТекущийПользователь) Тогда
				
				Оповестить("ПереопределяемаяКоманда_ЗадачаИсполнителя_ПринятаКИсполнению",
					 Форма.ЗадачаИсполнителя,
					 Форма.ЗадачаИсполнителя_ТекущийПользователь);
				
				Форма.Элементы.ПанельСтраницАвтоКнопки.ТекущаяСтраница = Форма.Элементы.СтраницаЗадачиПринята;
				Форма.ЗадачаИсполнителя_УсловияВыполнены = CRM_БизнесПроцессыСервер.ПолучитьУсловиеЭтапаПроверитьПрименимость(Форма.ЗадачаИсполнителя,
					 Форма.ЗадачаИсполнителя_ПринятаКИсполнению);
				Форма.ЗадачаИсполнителя_ПринятаКИсполнению = Истина;
				Если Форма.Элементы.Найти("ПолеИсполнительЗадачи") <> Неопределено
					 И НЕ Форма.Элементы.ПолеИсполнительЗадачи.Видимость Тогда
					Форма.Элементы.ПолеИсполнительЗадачи.Видимость = Истина;
					Форма.Элементы.ПолеРольИсполнителяЗадачи.Видимость = Ложь;
				КонецЕсли;
				Форма.ОтобразитьИзменениеДанных(Форма.ЗадачаИсполнителя, ВидИзмененияДанных.Изменение);
			КонецЕсли;
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтменитьПринятиеКИсполнению", ЭтотОбъект, Форма);
			ПоказатьВопрос(ОписаниеОповещения,
				 НСтр("ru='Задача уже принята к исполнению. Отменить?';
				|en='The task are already accept to execution. Cancel?'"),
				 РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	ИначеЕсли Команда.Имя = "Команда_КартаМаршрута" Тогда
		
		ОткрытьФорму("Обработка.CRM_КартаМаршрутаБизнесПроцесса.Форма", 
					 Новый Структура("БизнесПроцесс",
					 Форма.ЗадачаИсполнителя_БизнесПроцесс),
					 Форма, Ложь, Неопределено);
					 
	ИначеЕсли Команда.Имя = "Команда_ОписаниеБизнесПроцесса" Тогда
					 
		ОткрытьФорму("ОбщаяФорма.CRM_ОписаниеБизнесПроцесса",
					 Новый Структура("ОбъектОтбора", Форма.ЗадачаИсполнителя_БизнесПроцесс),
					 Форма, Ложь, Неопределено);
					 
	ИначеЕсли Команда.Имя = "Команда_ПеренестиСрок" Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтложитьСледующуюЗадачуЗавершение", ЭтотОбъект, Форма);
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаОтложитьСледующуюЗадачу", , , , , ,
			 ОписаниеОповещения,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Команда.Имя = "Команда_Перенаправить" Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗадачаПеренаправитьЗавершение", ЭтотОбъект, Форма);
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачаПеренаправить", , , , , ,
			 ОписаниеОповещения,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Команда.Имя = "Команда_ОписаниеЗадачи" Тогда
		
		Форма.Элементы.Кнопка_ОписаниеЗадачи_СтраницаЗадачиПринята.Пометка =
			НЕ Форма.Элементы.Кнопка_ОписаниеЗадачи_СтраницаЗадачиПринята.Пометка;
		Форма.Элементы.Кнопка_ОписаниеЗадачи_СтраницаЗадачиНеПринята.Пометка =
			НЕ Форма.Элементы.Кнопка_ОписаниеЗадачи_СтраницаЗадачиНеПринята.Пометка;
		Форма.Элементы.Кнопка_ОписаниеЗадачи_СтраницаЗадачиЧужая.Пометка =
			НЕ Форма.Элементы.Кнопка_ОписаниеЗадачи_СтраницаЗадачиЧужая.Пометка;
		
		Форма.Элементы.ГруппаОписаниеЗадачи.Показать();
		
	ИначеЕсли Команда.Имя = "Команда_ПередвинутьЭтап" Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", Форма.ЗадачаИсполнителя_БизнесПроцесс);
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПеремещенияЭтапа", ПараметрыФормы, Форма,
			 , , , ,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли СтрНайти(Команда.Имя, "Команда_ВыполнитьЗадачу_") > 0 Тогда
		
		ВариантПоКнопке	= СтрЗаменить(Команда.Имя, "Команда_ВыполнитьЗадачу_", "");
		ВариантВыполнения = Число(ВариантПоКнопке);
		
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.CRM_Интерес")
			 И НЕ CRM_БизнесПроцессыИЗадачиВызовСервера.ПроверитьВозможностьПереходаБПИнтереса(Форма.Объект,
			 	 Форма.ЗадачаИсполнителя, ВариантВыполнения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Переход в следующую точку маршрута невозможен.';
				|en='Prcessing to the next route point is impossible.'"));
			Возврат;
		КонецЕсли;
			
		Если Форма.Модифицированность Тогда  
			Если НЕ Форма.Записать() Тогда  
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось записать объект! Запишите объект и повторите действие.';
					|en='Failed to write object! Write down the object and repeat the action.'"));
				Возврат;
			КонецЕсли;
			Форма.РазблокироватьДанныеФормыДляРедактирования();
		КонецЕсли;
		
		Если Форма.ЗадачаИсполнителя_УсловияВыполнены = 3 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выполнены все условия для выполнения задачи!';
				|en='All conditions for the task are not met!'"));
			Возврат;
		КонецЕсли;
			
		Форма.ЗадачаИсполнителя_ВариантВыполнения = ВариантВыполнения;
		Если Форма.ЗадачаИсполнителя_НесколькоВариантовВыполнения Тогда
			Форма.ЗадачаИсполнителя_ВариантВыполненияСтрокой	= CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(Форма.ЗадачаИсполнителя_ТочкаМаршрута,
				 Форма.ЗадачаИсполнителя_ВариантВыполнения,
				 Форма.ЗадачаИсполнителя_НомерВерсииКартыМаршрута);
		КонецЕсли;
		
		СписокТочекМаршрута = CRM_БизнесПроцессыСервер.ПроверитьНаличиеСледующегоИсполнителя(Форма.ЗадачаИсполнителя, 
			ВариантВыполнения);
		
		ОповещениеЗавершения = Новый ОписаниеОповещения("ВыполнениеЗадачиЗавершение", ЭтотОбъект, Форма);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
		
		Если СписокТочекМаршрута.Количество() > 0 Тогда
			ПараметрыФормы = Новый Структура("БизнесПроцесс, СписокТочекМаршрута",
				 Форма.ЗадачаИсполнителя_БизнесПроцесс,
				 СписокТочекМаршрута);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗадачуПродолжение", ЭтотОбъект,
				 ДополнительныеПараметры);
			ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаВыбораИсполнителя", ПараметрыФормы,
				 ЭтотОбъект, , , , ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;
		КонецЕсли;
		
		ВыполнитьЗадачуПродолжение(Истина, ДополнительныеПараметры);
		
	ИначеЕсли Команда.Имя = "Команда_ДосрочноеЗавершениеБП" Тогда
		
		СтруктураДанных = CRM_БизнесПроцессыИЗадачиВызовСервера.ОпределитьПринадлежностьЗадачи(Форма.ЗадачаИсполнителя);
		СтруктураДанных.Вставить("Задача", Форма.ЗадачаИсполнителя);
		СтруктураДанных.Вставить("ПараметрКоманды", Форма.ЗадачаИсполнителя);
		СтруктураДанных.Вставить("Источник", Форма);
		СтруктураДанных.Вставить("ЗавершенДосрочно", Истина);
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			ПараметрыФормы = Новый Структура("Задача, ПредставлениеВариантаВыполнения, ОтложитьНаДату,
				| ДосрочноеЗавершение", Форма.ЗадачаИсполнителя, Форма.ЗадачаИсполнителя_ВариантВыполнения,
				 Форма.ЗадачаИсполнителя_ОтложитьНаДату,
				 Истина);
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗадачаИсполнителя_Выполнено_ОбработкаКомандыЗавершение",
				 ЭтотОбъект,
				 СтруктураДанных);
			ОткрытьФорму("Обработка.CRM_АРМ_МоиПродажи.Форма.ФормаПереносаИнтереса", ПараметрыФормы,
				 ЭтотОбъект, , , , ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе	
			ФормаДосрочногоЗавершения = ПолучитьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаДосрочногоЗавершения", ,
				 Форма);
			ФормаДосрочногоЗавершения.Заголовок = НСтр("ru='Неудачное завершение бизнес-процесса';
				|en='Unsuccessful business process termination'");
			ФормаДосрочногоЗавершения.Элементы.ПричинаНеудачногоЗавершения.Заголовок = НСтр("ru='Причина неудачного завершения';
				|en='Reason of unsuccessful completion'");
			ФормаДосрочногоЗавершения.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗадачаИсполнителя_Выполнено_ОбработкаКомандыЗавершение",
				 ЭтотОбъект,
				 СтруктураДанных);
			ФормаДосрочногоЗавершения.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ФормаДосрочногоЗавершения.Открыть();
		КонецЕсли;
		
	ИначеЕсли Команда.Имя = "ПолеСрокИсполненияЗадачи" Тогда
		
		CRM_ОбщегоНазначенияСервер.ИзменитьРеквизитыОбъекта(Форма.ЗадачаИсполнителя,
			 Новый Структура("СрокИсполнения",
			 Форма.ЗадачаИсполнителя_СрокИсполнения));
		Оповестить("ЛентаСобытий_Обновить");
		
	ИначеЕсли Команда.Имя = "Команда_ПоказатьОбъекты" Тогда
		
		Форма.Элементы.ГруппаОбъектыПоЗадаче.Показать();
		
	ИначеЕсли Команда.Имя = "ГиперссылкаВвести" Тогда
		
		ДополнительныеПараметры = Новый Структура("Форма", Форма);
		ОповещениеЗавершения = Новый ОписаниеОповещения("ГиперссылкаВвестиВыполнитьПослеВыбора",
			CRM_БизнесПроцессыИЗадачиКлиент, ДополнительныеПараметры);
		Форма.ПоказатьВыборИзСписка(ОповещениеЗавершения, Форма.ТипыОбъектовПоБизнесПроцессамСписок,
			 Форма.Элементы.ГиперссылкаВвести);
		
	ИначеЕсли Команда.Имя = "ГиперссылкаВыбрать" Тогда
		
		ДополнительныеПараметры = Новый Структура("Форма", Форма);
		ОповещениеЗавершения = Новый ОписаниеОповещения("ГиперссылкаВыбратьПослеВыбора",
			CRM_БизнесПроцессыИЗадачиКлиент, ДополнительныеПараметры);
		Форма.ПоказатьВыборИзСписка(ОповещениеЗавершения, Форма.ТипыОбъектовПоБизнесПроцессамСписок,
			 ФОрма.Элементы.ГиперссылкаВыбрать);
		
	ИначеЕсли Команда.Имя = "ГиперссылкаУдалить" Тогда
		
		ТекущиеДанные = Форма.Элементы.ОбъектыПоБизнесПроцессам.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			CRM_БизнесПроцессыИЗадачиВызовСервера.УдалитьЗаписьПоОбъекту(ТекущиеДанные.Объект,
				ТекущиеДанные.Задача,
				ТекущиеДанные.БизнесПроцесс,
				ТекущиеДанные.ТочкаМаршрута);
			Форма.ОбъектыПоБизнесПроцессам.Удалить(ТекущиеДанные);
		КонецЕсли;
		
	ИначеЕсли Команда.Имя = "ОбъектыПоБизнесПроцессам" Тогда
		
		ТекущиеДанные = Команда.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ПоказатьЗначение(, ТекущиеДанные.Объект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в формах при завершении выбора команды, которая добавлена программно
//
// Параметры:
//  Результат	 - ЭлементСписка - Выбранный элемент списка.
//  ДополнительныеПараметры	 - Структура - Дополнительные параметры.
//
Процедура ГиперссылкаВвестиВыполнитьПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ВвестиОбъект(Результат.Значение, ДополнительныеПараметры.Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в формах при завершении выбора команды, которая добавлена программно
//
// Параметры:
//  Результат	 - ЭлементСписка - Выбранный элемент списка.
//  ДополнительныеПараметры	 - Структура - Дополнительные параметры.
//
Процедура ГиперссылкаВыбратьПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ВыбратьОбъект(Результат.Значение, ДополнительныеПараметры.Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение выполнения ВыполнитьПереопределяемуюКоманду
//
// Параметры:
//  Ответ - КодВозвратаДиалога - Ответ.
//  Форма - ФормаКлиентскогоПриложения - форма, в которой расположена команда.
//
Процедура ОтменитьПринятиеКИсполнению(Ответ, Форма) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		CRM_БизнесПроцессыСервер.ОтменитьПринятиеЗадачиКИсполнениюИзФормыДокумента(Форма.ЗадачаИсполнителя);
		Форма.Элементы.ПанельСтраницАвтоКнопки.ТекущаяСтраница = Форма.Элементы.СтраницаЗадачиНеПринята;
		Форма.ЗадачаИсполнителя_УсловияВыполнены = CRM_БизнесПроцессыСервер.ПолучитьУсловиеЭтапаПроверитьПрименимость(Форма.ЗадачаИсполнителя,
			 Форма.ЗадачаИсполнителя_ПринятаКИсполнению);
		Форма.ЗадачаИсполнителя_ПринятаКИсполнению = Ложь;
		Если Форма.Элементы.Найти("ПолеРольИсполнителяЗадачи") <> Неопределено
			 И НЕ Форма.Элементы.ПолеРольИсполнителяЗадачи.Видимость Тогда
			Форма.Элементы.ПолеИсполнительЗадачи.Видимость = Ложь;
			Форма.Элементы.ПолеРольИсполнителяЗадачи.Видимость = Истина;
		КонецЕсли;
		Форма.ОтобразитьИзменениеДанных(Форма.ЗадачаИсполнителя, ВидИзмененияДанных.Изменение);
		Оповестить("ПереопределяемаяКоманда_ЗадачаИсполнителя_ПринятаКИсполнению",
			 Форма.ЗадачаИсполнителя,
			 Форма.ЗадачаИсполнителя_ТекущийПользователь);
	КонецЕсли;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма					- ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//  ИмяСобытия				- Строка - идентификатор сообщения принимающей формой (см. метод Оповестить)
//	Параметр				- Произвольный - параметр сообщения (см. метод Оповестить)
//	Источник				- Произвольный - источник события (см. метод Оповестить)
//  ДополнительныеПараметры	- Структура - дополнительные параметры
//
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры) Экспорт
	
	Если ИмяСобытия = "ПереопределяемаяКоманда_ЗадачаИсполнителя_ВыполнитьЗадачу"
		 И Форма.ЗадачаИсполнителя = Параметр Тогда
		
		Форма.ЗадачаИсполнителя_Выполнена = Истина;
		Форма.Записать();
		
	ИначеЕсли ИмяСобытия = "ВыполненаСменаЭтапаБизнесПроцесса" И Форма.ЗадачаИсполнителя_БизнесПроцесс = Параметр Тогда
		
		Форма.ЗадачаИсполнителя_Выполнена = Истина;
		Форма.Прочитать();
		Форма.Записать();
		
	ИначеЕсли ИмяСобытия = "ВыполненОткатБизнесПроцесса" И Форма.ЗадачаИсполнителя_БизнесПроцесс = Параметр Тогда
		
		КлючФормы = Форма.Параметры.Ключ;
		Форма.Закрыть();
		ПоказатьЗначение(, КлючФормы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
