// @strict-types


#Область СлужебныйПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// См. ОбщегоНазначенияКлиентПереопределяемый.ПередПериодическойОтправкойДанныхКлиентаНаСервер
//
Процедура ПередПериодическойОтправкойДанныхКлиентаНаСервер(Параметры) Экспорт
	
	ПараметрыОжидания = ПараметрыОжидания();
	
	Если ПараметрыОжидания.Включено = Ложь
		Или Не ПериодОжиданияЗавершен(ПараметрыОжидания.ДатаПолучения) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСобытия = НовыеПараметрыСобытияПередПолучением();
	Оповестить(ИмяСобытияПередПолучением(), ПараметрыСобытия);
	
	Если Не ПараметрыСобытия.ЕстьОткрытыеФормы Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОжидания.Включено = Неопределено
		И ИнтеграцияБСПБЭДКлиентСервер.УведомленияКлиентаДоступны() Тогда
		МенеджерУведомлений = Вычислить("УведомленияКлиента");
		Обработчик = Новый ОписаниеОповещения("ОповеститьОПолученииЭДО", АвтоматическоеПолучениеЭДОКлиент);
		//@skip-check dynamic-access-method-not-found
		МенеджерУведомлений.ПодключитьОбработчик(
			АвтоматическоеПолучениеЭДОКлиентСервер.КлючУведомленийКлиента(), Обработчик);
		ПараметрыОжидания.ИспользоватьУведомленияКлиента = Истина;
	КонецЕсли;
	
	ПараметрыОжидания.ДатаПолучения = ОбщегоНазначенияКлиент.ДатаСеанса();
	ПараметрыОтправки = НовыеПараметрыПериодическойОтправкиДанных();
	ПараметрыОтправки.Включено = ПараметрыОжидания.Включено;
	ПараметрыОтправки.ИспользоватьУведомленияКлиента = ПараметрыОжидания.ИспользоватьУведомленияКлиента;
	Параметры.Вставить(АвтоматическоеПолучениеЭДОКлиентСервер.КлючПараметраПериодическойОтправкиДанных(),
		ПараметрыОтправки);
	
КонецПроцедуры

// См. ОбщегоНазначенияКлиентПереопределяемый.ПослеПериодическогоПолученияДанныхКлиентаНаСервере
//
Процедура ПослеПериодическогоПолученияДанныхКлиентаНаСервере(Результаты) Экспорт
	
	Результат = Результаты[АвтоматическоеПолучениеЭДОКлиентСервер.КлючРезультатаПериодическойОтправкиДанных()]; // См. АвтоматическоеПолучениеЭДО.НовыйРезультатПериодическойОтправкиДанных
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ПараметрыОжидания();
	
	Если ПараметрыОжидания.ИспользоватьУведомленияКлиента
		И Не Результат.Включено И Результат.Включено <> ПараметрыОжидания.Включено Тогда
		МенеджерУведомлений = Вычислить("УведомленияКлиента");
		//@skip-check dynamic-access-method-not-found
		МенеджерУведомлений.ОтключитьОбработчик(АвтоматическоеПолучениеЭДОКлиентСервер.КлючУведомленийКлиента());
	КонецЕсли;
	
	ПараметрыОжидания.Включено = Результат.Включено;
	РезультатПолучения = Результат.РезультатПолучения; // См. АвтоматическоеПолучениеЭДО.ПолучитьЧерезИнтервал
	
	Если ПараметрыОжидания.ИспользоватьУведомленияКлиента Тогда
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(РезультатПолучения) Тогда
		ОповеститьОПолученииЭДО(РезультатПолучения);
	ИначеЕсли ЗначениеЗаполнено(Результат.ДлительнаяОперация) Тогда
		ДлительнаяОперация = Результат.ДлительнаяОперация; // См. ДлительныеОперации.ВыполнитьФункцию
		Оповещение = Новый ОписаниеОповещения("ОповеститьОПолученииЭДОПослеДлительнойОперации",
			АвтоматическоеПолучениеЭДОКлиент);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КлючДоступаКСервисуЭДО

// Возвращаемое значение:
//  Структура:
//  * ИдентификаторыЭДО - Массив из Строка 
//  * ФормаВладелец - Неопределено,ФормаКлиентскогоПриложения
//  * ПаролиСертификатов - см. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  * ВыводитьОкноОжидания - Булево 
Функция НовыеПараметрыВключенияИспользованияКлючаДоступаКСервисуЭДО() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИдентификаторыЭДО", Новый Массив);
	Параметры.Вставить("ФормаВладелец", Неопределено);
	Параметры.Вставить("ПаролиСертификатов", КриптографияБЭДКлиент.НовыеПаролиСертификатов());
	Параметры.Вставить("ВыводитьОкноОжидания", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
//  ПараметрыВключения - см. НовыеПараметрыВключенияИспользованияКлючаДоступаКСервисуЭДО
Процедура ВключитьИспользованиеКлючаДоступаКСервисуЭДО(ОповещениеОЗавершении, ПараметрыВключения) Экспорт
	
	КонтекстПодключения = НовыйКонтекстВключения();
	КонтекстПодключения.ОповещениеОЗавершении = ОповещениеОЗавершении;
	КонтекстПодключения.ПараметрыВключения = ПараметрыВключения;
	
	Оповещение = Новый ОписаниеОповещения("ВключитьИспользованиеКлючаДоступаПослеПолученияОтпечатков",
		АвтоматическоеПолучениеЭДОКлиент, КонтекстПодключения);
	КриптографияБЭДКлиент.ПолучитьОтпечаткиСертификатов(Оповещение);
	
КонецПроцедуры

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
//  ФормаВладелец - Неопределено,ФормаКлиентскогоПриложения
Процедура ОтключитьИспользованиеКлючаДоступаКСервисуЭДО(ОповещениеОЗавершении, ФормаВладелец = Неопределено) Экспорт
	
	РезультатОтключения = Новый Структура;
	РезультатОтключения.Вставить("Успех", Истина);
	РезультатОтключения.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	
	АвтоматическоеПолучениеЭДОВызовСервера.Отключить();
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатОтключения);
	
КонецПроцедуры

#КонецОбласти

#Область СобытияОповещения

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ИмяСобытия - Строка
//  Параметр - Неопределено,Структура
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр) Экспорт
	Если ИмяСобытия = ИмяСобытияПередПолучением() Тогда
		ОбработкаСобытияПередПолучением(Форма, Параметр);
	ИначеЕсли ИмяСобытия = ИмяСобытияПослеПолучения() Тогда 
		ОбработкаСобытияПослеПолучения(Форма, Параметр);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Предупреждение

// Параметры:
//  Форма                - ФормаКлиентскогоПриложения
//  Элемент              - Надпись
//  НавигационнаяСсылка  - Строка
//  СтандартнаяОбработка - Булево
Процедура ОбработкаНавигационнойСсылки(Форма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Параметры  = ПараметрыРеквизитаФормы(Форма);
	Если Не ЗначениеЗаполнено(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если НавигационнаяСсылка = "ОткрытьУчетныеЗаписиЭДО" Тогда
		УчетныеЗаписиЭДОКлиент.ОткрытьСписокУчетныхЗаписей();
	ИначеЕсли Не ЗначениеЗаполнено(Параметры.ИдентификаторЭДО) Тогда
		Возврат;
	ИначеЕсли НавигационнаяСсылка = "ОткрытьЖурналРегистрации" Тогда
		Отбор = АвтоматическоеПолучениеЭДОВызовСервера.ОтборЖурналаРегистрации(Параметры.ИдентификаторЭДО);
		ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(Отбор, Форма);
	ИначеЕсли НавигационнаяСсылка = "ВключитьИспользованиеКлючаДоступаКСервисуЭДО" Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("Форма", Форма);
		Контекст.Вставить("ИдентификаторЭДО", Параметры.ИдентификаторЭДО);
		Оповещение = Новый ОписаниеОповещения("УстановитьВидимостьПредупрежденияПослеПодключенияКлючаДоступа",
			АвтоматическоеПолучениеЭДОКлиент, Контекст);
		ПараметрыВключения = НовыеПараметрыВключенияИспользованияКлючаДоступаКСервисуЭДО();
		ПараметрыВключения.ИдентификаторыЭДО.Добавить(Параметры.ИдентификаторЭДО);
		ПараметрыВключения.ФормаВладелец = Форма;
		ВключитьИспользованиеКлючаДоступаКСервисуЭДО(Оповещение, ПараметрыВключения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КлючДоступаКСервисуЭДО

// Возвращаемое значение:
//  Структура:
//  * ОповещениеОЗавершении - см. ВключитьИспользованиеКлючаДоступаКСервисуЭДО.ОповещениеОЗавершении
//  * ПараметрыВключения - см. НовыеПараметрыВключенияИспользованияКлючаДоступаКСервисуЭДО
//  * РасшифрованныеМаркеры - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Функция НовыйКонтекстВключения() Экспорт
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Контекст.Вставить("ПараметрыВключения", НовыеПараметрыВключенияИспользованияКлючаДоступаКСервисуЭДО());
	Контекст.Вставить("РасшифрованныеМаркеры", КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных());
	Контекст.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Возврат Контекст;
КонецФункции

// Параметры:
//  РезультатыПолученияОтпечатков - см. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
//  КонтекстВключения - см. НовыйКонтекстВключения
Процедура ВключитьИспользованиеКлючаДоступаПослеПолученияОтпечатков(РезультатыПолученияОтпечатков, КонтекстВключения) Экспорт
	
	ПараметрыВключения = КонтекстВключения.ПараметрыВключения;
	ИдентификаторФормы = Неопределено;
	Если ПараметрыВключения.ФормаВладелец <> Неопределено Тогда
		ИдентификаторФормы = ПараметрыВключения.ФормаВладелец.УникальныйИдентификатор;
	КонецЕсли;
	
	ДлительнаяОперация = АвтоматическоеПолучениеЭДОВызовСервера.ДанныеАутентификацииВключенияИспользованияКлючаДоступаВФоне(
		РезультатыПолученияОтпечатков, ПараметрыВключения.ИдентификаторыЭДО, ИдентификаторФормы);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ПараметрыВключения.ФормаВладелец);
	ПараметрыОжидания.ВыводитьОкноОжидания = ПараметрыВключения.ВыводитьОкноОжидания;
	
	Оповещение = Новый ОписаниеОповещения("ВключитьИспользованиеКлючаДоступаПослеПолученияПараметров",
		АвтоматическоеПолучениеЭДОКлиент, КонтекстВключения);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - см. ДлительныеОперации.ВыполнитьФункцию
//  КонтекстВключения - см. НовыйКонтекстВключения
Процедура ВключитьИспользованиеКлючаДоступаПослеПолученияПараметров(ДлительнаяОперация, КонтекстВключения) Экспорт
	
	АдресРезультата = АдресРезультатаДлительнойОперацииПодключенияИспользованияКлючаДоступа(
		ДлительнаяОперация, КонтекстВключения.КонтекстДиагностики);
	Если ПустаяСтрока(АдресРезультата) Тогда
		ВключитьИспользованиеКлючаДоступаЗавершение(Неопределено, КонтекстВключения);
		Возврат;
	КонецЕсли;
	
	ДанныеАутентификации = ПолучитьИзВременногоХранилища(АдресРезультата); // См. АвтоматическоеПолучениеЭДО.ДанныеАутентификацииВключенияИспользованияКлючаДоступаКСервисуЭДО
	
	ОбработкаНеисправностейБЭДКлиент.ДополнитьКонтекстДиагностики(КонтекстВключения.КонтекстДиагностики,
		ДанныеАутентификации.КонтекстДиагностики);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(КонтекстВключения.РасшифрованныеМаркеры,
		ДанныеАутентификации.РасшифрованныеМаркеры, Истина);
		
	Если Не ЗначениеЗаполнено(ДанныеАутентификации.ЗашифрованныеМаркеры) Тогда
		ИтогРасшифровки = КриптографияБЭДКлиент.НовыйИтогРасшифровкиНабораДанных();
		ВключитьИспользованиеКлючаДоступаПослеРасшифровки(ИтогРасшифровки, КонтекстВключения);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВключитьИспользованиеКлючаДоступаПослеРасшифровки",
		АвтоматическоеПолучениеЭДОКлиент, КонтекстВключения);
	
	КриптографияБЭДКлиент.НачатьРасшифровкуНабораДанных(Оповещение, ДанныеАутентификации.ЗашифрованныеМаркеры,
		КонтекстВключения.ПараметрыВключения.ПаролиСертификатов, КонтекстВключения.КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  ИтогРасшифровки - см. КриптографияБЭДКлиент.НовыйИтогРасшифровкиНабораДанных
//  КонтекстВключения - см. НовыйКонтекстВключения
Процедура ВключитьИспользованиеКлючаДоступаПослеРасшифровки(ИтогРасшифровки, КонтекстВключения) Экспорт
	
	ПараметрыВключения = КонтекстВключения.ПараметрыВключения;
	
	ИдентификаторФормы = Неопределено;
	Если ПараметрыВключения.ФормаВладелец <> Неопределено Тогда
		ИдентификаторФормы = ПараметрыВключения.ФормаВладелец.УникальныйИдентификатор;
	КонецЕсли;
	
	РасшифрованныеМаркеры = КонтекстВключения.РасшифрованныеМаркеры;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(КонтекстВключения.РасшифрованныеМаркеры,
		ИтогРасшифровки.НаборРасшифрованныхДанных, Истина);
	
	ДлительнаяОперация = АвтоматическоеПолучениеЭДОВызовСервера.ВключитьИспользованиеКлючаДоступаКСервисуЭДОВФоне(
		ПараметрыВключения.ИдентификаторыЭДО, РасшифрованныеМаркеры, ИдентификаторФормы);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ПараметрыВключения.ФормаВладелец);
	ПараметрыОжидания.ВыводитьОкноОжидания = ПараметрыВключения.ВыводитьОкноОжидания;
	
	Оповещение = Новый ОписаниеОповещения("ВключитьИспользованиеКлючаДоступаЗавершение",
		АвтоматическоеПолучениеЭДОКлиент, КонтекстВключения);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - Неопределено
//                     - см. ДлительныеОперации.ВыполнитьФункцию
//  КонтекстВключения - см. НовыйКонтекстВключения
Процедура ВключитьИспользованиеКлючаДоступаЗавершение(ДлительнаяОперация, КонтекстВключения) Экспорт
	
	ИтогПодключения = Новый Структура;
	ИтогПодключения.Вставить("СостояниеПоИдентификаторамЭДО", Новый Соответствие);
	ИтогПодключения.Вставить("КонтекстДиагностики", КонтекстВключения.КонтекстДиагностики);
	
	АдресРезультата = АдресРезультатаДлительнойОперацииПодключенияИспользованияКлючаДоступа(
		ДлительнаяОперация, КонтекстВключения.КонтекстДиагностики);
	
	Если Не ЗначениеЗаполнено(АдресРезультата) Тогда
		ВыполнитьОбработкуОповещения(КонтекстВключения.ОповещениеОЗавершении, ИтогПодключения);
		Возврат;
	КонецЕсли;
	
	РезультатВключения = ПолучитьИзВременногоХранилища(АдресРезультата); // См. АвтоматическоеПолучениеЭДО.ВключитьИспользованиеКлючаДоступаКСервисуЭДО
	ИтогПодключения.СостояниеПоИдентификаторамЭДО = РезультатВключения.СостояниеПоИдентификаторамЭДО;
	ОбработкаНеисправностейБЭДКлиент.ДополнитьКонтекстДиагностики(ИтогПодключения.КонтекстДиагностики,
		РезультатВключения.КонтекстДиагностики);
	
	Если ЗначениеЗаполнено(РезультатВключения.СостояниеПоИдентификаторамЭДО) Тогда
		ПодключитьПолучениеЧерезИнтервал();
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(КонтекстВключения.ОповещениеОЗавершении, ИтогПодключения);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - см. ДлительныеОперации.ВыполнитьФункцию
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  Строка - адрес временного хранилища
Функция АдресРезультатаДлительнойОперацииПодключенияИспользованияКлючаДоступа(ДлительнаяОперация, КонтекстДиагностики)
		
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат "";
	ИначеЕсли ДлительнаяОперация.Статус <> "Выполнено" Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось включить автоматическое получение данных ЭДО.'");
		ПодробныйТекстОшибки = ТекстОшибки;
		Если ЗначениеЗаполнено(ДлительнаяОперация.ПодробноеПредставлениеОшибки) Тогда
			ПодробныйТекстОшибки = ПодробныйТекстОшибки + Символы.ПС + ДлительнаяОперация.ПодробноеПредставлениеОшибки;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДлительнаяОперация.КраткоеПредставлениеОшибки) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + ДлительнаяОперация.КраткоеПредставлениеОшибки;
		КонецЕсли;
		Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(НСтр("ru = 'Включение автоматического получения данных ЭДО.'"),
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ПодробныйТекстОшибки, ТекстОшибки);
		ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
		ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ПодсистемыБЭД.ИнтеграцияОблачногоЭДО);
		Возврат "";
	КонецЕсли;
	
	Возврат ДлительнаяОперация.АдресРезультата;
	
КонецФункции

#КонецОбласти

#Область СобытияОповещения

// Возвращаемое значение:
//  Строка
Функция ИмяСобытияПередПолучением()
	Возврат АвтоматическоеПолучениеЭДОКлиентСервер.ПолноеИмяПодсистемы() + ".ПередПолучением";
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ЕстьОткрытыеФормы - Булево
Функция НовыеПараметрыСобытияПередПолучением()
	Параметры = Новый Структура;
	Параметры.Вставить("ЕстьОткрытыеФормы", Ложь);
	Возврат Параметры;
КонецФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  Параметр - См. НовыеПараметрыСобытияПередПолучением
Процедура ОбработкаСобытияПередПолучением(Форма, Параметр)
	Если Форма.Открыта() Тогда
		Параметр.ЕстьОткрытыеФормы = Истина;
	КонецЕсли;
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИмяСобытияПослеПолучения()
	Возврат АвтоматическоеПолучениеЭДОКлиентСервер.ПолноеИмяПодсистемы() + ".ПослеПолучения";
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * СостояниеПоИдентификаторамЭДО - См. РегистрыСведений.СостоянияАвтоматическогоПолученияЭДО.СостояниеПоИдентификаторамЭДО
Функция НовыеПараметрыСобытияПослеПолучения()
	Параметры = Новый Структура;
	Параметры.Вставить("СостояниеПоИдентификаторамЭДО", Новый Соответствие);
	Возврат Параметры;
КонецФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Параметр - См. НовыеПараметрыСобытияПослеПолучения
Процедура ОбработкаСобытияПослеПолучения(Форма, Параметр)
	УстановитьВидимостьПредупреждения(Форма, Параметр.СостояниеПоИдентификаторамЭДО);
КонецПроцедуры

#КонецОбласти

#Область Получение

Процедура ПодключитьПолучениеЧерезИнтервал() Экспорт
	ПараметрыОжидания().Включено = Неопределено;
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция КлючПараметровОжидания()
	Возврат АвтоматическоеПолучениеЭДОКлиентСервер.ПолноеИмяПодсистемы();
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Включено - Неопределено,Булево
//  * ДатаПолучения - Дата
//  * ИспользоватьУведомленияКлиента - Булево
Функция НовыеПараметрыОжидания()
	Параметры = Новый Структура;
	Параметры.Вставить("Включено", Неопределено);
	Параметры.Вставить("ДатаПолучения", '00010101');
	Параметры.Вставить("ИспользоватьУведомленияКлиента", Ложь);
	Возврат Параметры;
КонецФункции

// Возвращаемое значение:
//  См. НовыеПараметрыОжидания
Функция ПараметрыОжидания()
	ПараметрыПолучения = ПараметрыПриложения[КлючПараметровОжидания()]; // См. НовыеПараметрыОжидания
	Если ПараметрыПолучения = Неопределено Тогда
		ПараметрыПолучения = НовыеПараметрыОжидания();
		//@skip-check dynamic-access-method-not-found
		ПараметрыПриложения.Вставить(КлючПараметровОжидания(), ПараметрыПолучения);
	КонецЕсли;
	Возврат ПараметрыПолучения;
КонецФункции

// Параметры:
//  Дата - Дата
// 
// Возвращаемое значение:
//  Булево
Функция ПериодОжиданияЗавершен(Дата)
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	Интервал = АвтоматическоеПолучениеЭДОКлиентСервер.Интервал();
	Если ЗначениеЗаполнено(Дата)
		И Интервал > ТекущаяДата - Дата Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Включено - Неопределено,Булево
//  * ИспользоватьУведомленияКлиента - Булево
Функция НовыеПараметрыПериодическойОтправкиДанных() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("Включено", Неопределено);
	Параметры.Вставить("ИспользоватьУведомленияКлиента", Ложь);
	Возврат Параметры;
КонецФункции

// Параметры:
//  РезультатПолучения - см. АвтоматическоеПолучениеЭДО.НовыйРезультатПолучения
//  Контекст - Неопределено
Процедура ОповеститьОПолученииЭДО(РезультатПолучения, Контекст = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатПолучения) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ПараметрыОжидания();
	
	Если ЗначениеЗаполнено(РезультатПолучения.СостояниеПоИдентификаторамЭДО) Тогда
		ПараметрыСобытия = НовыеПараметрыСобытияПослеПолучения();
		ПараметрыСобытия.СостояниеПоИдентификаторамЭДО = РезультатПолучения.СостояниеПоИдентификаторамЭДО;
		Оповестить(ИмяСобытияПослеПолучения(), ПараметрыСобытия);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатПолучения.ИтогДействийПоЭДО.ОбработанныеДокументы) Тогда
		Результат = Новый Структура;
		Результат.Вставить("Итог", РезультатПолучения.ИтогДействийПоЭДО);
		Результат.Вставить("ОшибкиФормирования", Новый Массив);
		Результат.Вставить("КонтекстДиагностики", РезультатПолучения.КонтекстДиагностики);
		ИнтерфейсДокументовЭДОКлиент.ЗавершитьОтправкуПолучениеДокументовЭДО(Результат, Новый ОписаниеОповещения);
	ИначеЕсли Не ПараметрыОжидания.ИспользоватьУведомленияКлиента Тогда 
		Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияТекущихДелЭДО());
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - См. ДлительныеОперации.ВыполнитьФункцию
//  Контекст - Неопределено
Процедура ОповеститьОПолученииЭДОПослеДлительнойОперации(ДлительнаяОперация, Контекст = Неопределено) Экспорт
	
	Если ДлительнаяОперация = Неопределено
		Или ДлительнаяОперация.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПолучения = АвтоматическоеПолучениеЭДОВызовСервера.РезультатПолученияЧерезИнтервал(
		ДлительнаяОперация.АдресРезультата);
	
	ОповеститьОПолученииЭДО(РезультатПолучения);
	
КонецПроцедуры

#КонецОбласти

#Область Предупреждение

// Возвращаемое значение:
//  Строка
Функция ИмяРеквизитаПараметровФормы()
	Возврат "ПараметрыАвтоматическогоПолученияЭДО";
КонецФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. АвтоматическоеПолучениеЭДО.НовыеПараметрыРеквизитаФормы
Функция ПараметрыРеквизитаФормы(Форма)
	Реквизиты = Новый Структура(ИмяРеквизитаПараметровФормы());
	ЗаполнитьЗначенияСвойств(Реквизиты, Форма);
	Возврат Реквизиты[ИмяРеквизитаПараметровФормы()];
КонецФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  СостояниеПоИдентификаторамЭДО - См. РегистрыСведений.СостоянияАвтоматическогоПолученияЭДО.СостояниеПоИдентификаторамЭДО
Процедура УстановитьВидимостьПредупреждения(Форма, СостояниеПоИдентификаторамЭДО)
	
	Параметры = ПараметрыРеквизитаФормы(Форма);
	Если Не ЗначениеЗаполнено(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ИдентификаторЭДО) Тогда
		Состояние = СостояниеПоИдентификаторамЭДО[Параметры.ИдентификаторЭДО];
		АвтоматическоеПолучениеЭДОКлиентСервер.УстановитьВидимостьПредупрежденияВФормеЭлемента(
			Форма, Состояние, Параметры);
	Иначе
		АвтоматическоеПолучениеЭДОКлиентСервер.УстановитьВидимостьПредупрежденияВФормеСписка(
			Форма, СостояниеПоИдентификаторамЭДО, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ИтогиПодключения - см. АвтоматическоеПолучениеЭДО.ВключитьИспользованиеКлючаДоступаКСервисуЭДО
//  Контекст - Структура:
//  * Форма - ФормаКлиентскогоПриложения
//  * ИдентификаторЭДО - Строка
Процедура УстановитьВидимостьПредупрежденияПослеПодключенияКлючаДоступа(ИтогиПодключения, Контекст) Экспорт
	
	Если ИтогиПодключения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСобытия = НовыеПараметрыСобытияПослеПолучения();
	ПараметрыСобытия.СостояниеПоИдентификаторамЭДО = ИтогиПодключения.СостояниеПоИдентификаторамЭДО;
	Оповестить(ИмяСобытияПослеПолучения(), ПараметрыСобытия);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
