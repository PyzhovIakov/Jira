// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  ПараметрыЗаполнения - см. ПриглашенияЭДО.НовыеПараметрыДанныхЗаполненияНастройкиОтправкиПриглашений
//  
// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДО.НовыеДанныеЗаполненияНастройкиОтправкиПриглашений
Функция ДанныеЗаполненияНастройкиОтправкиПриглашений(ПараметрыЗаполнения) Экспорт
	
	Результат = ПриглашенияЭДО.НовыеДанныеЗаполненияНастройкиОтправкиПриглашений();
	КонтекстДиагностики = Результат.КонтекстДиагностики;
	
	Организация = ПараметрыЗаполнения.Организация;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИдентификаторыОрганизации = Новый Массив; // Массив из Строка
	
	ЗаполнитьПараметрыСвязей = Ложь; 
	ПараметрыПолученияСвязиИдентификаторов = ПараметрыЗаполнения.ПараметрыПолученияСвязиИдентификаторов;
	Если ЗначениеЗаполнено(ПараметрыПолученияСвязиИдентификаторов) Тогда
		ЗаполнитьПараметрыСвязей = Истина;
		ИдентификаторыОрганизации = ПараметрыПолученияСвязиИдентификаторов.ИдентификаторыОрганизации;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторыОрганизации) Тогда
		ИдентификаторыОрганизации = УчетныеЗаписиЭДО.ИдентификаторыЭДОПоОрганизации(Организация, Истина);
	КонецЕсли;
	
	УчетныеЗаписиОблачногоЭДО = РегистрыСведений.НастройкиОблачногоЭДО.УчетныеЗаписиОблачногоЭДО(
		ИдентификаторыОрганизации);
	
	ПакетМетодов = ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса();
	
	ИдентификаторМетодаПолученияСпискаОператоровЭДО = "Операторы";
	ИдентификаторМетодаПолученияСвязиИдентификаторовЭДО = "СвязиИдентификаторов";
		
	Если ПараметрыЗаполнения.ЗаполнитьОператоровЭДО Тогда
		ОписаниеМетодаПолученияСпискаОператоровЭДО =
			ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса("СписокОператоровЭДО");
		ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов,
			ОписаниеМетодаПолученияСпискаОператоровЭДО,
			ИдентификаторМетодаПолученияСпискаОператоровЭДО);
	КонецЕсли;
	
	Если ЗаполнитьПараметрыСвязей Тогда
		Контрагенты = ?(ТипЗнч(ПараметрыПолученияСвязиИдентификаторов.Контрагент) = Тип("Массив"),
			ПараметрыПолученияСвязиИдентификаторов.Контрагент,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыПолученияСвязиИдентификаторов.Контрагент));
		ДанныеКонтрагентов = ДанныеКонтрагентовДляПриглашения(Контрагенты);

		ПараметрыПолученияВФорматСервиса = ПараметрыПолученияСвязиИдентификаторовВФорматСервиса(
			ПараметрыПолученияСвязиИдентификаторов, ДанныеКонтрагентов);

		ОписаниеМетодаПолученияСвязиИдентификаторовЭДО =  ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
			"НаборПараметровСвязиИдентификаторовАбонентовЭДО",
			ПараметрыПолученияВФорматСервиса);
			
		ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов,
			ОписаниеМетодаПолученияСвязиИдентификаторовЭДО,
			ИдентификаторМетодаПолученияСвязиИдентификаторовЭДО);	
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ОператорыЭДО = Новый СписокЗначений;
	ПараметрыСвязиИдентификаторовЭДО = ПриглашенияЭДО.НовыеПараметрыСвязиИдентификаторов();
	
	Для Каждого УчетнаяЗаписьОблачногоЭДО Из УчетныеЗаписиОблачногоЭДО Цикл
		
		ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
			УчетнаяЗаписьОблачногоЭДО, ТекущийПользователь);
			
		РезультатыПакета = ИнтеграцияОблачногоЭДО.ВыполнитьПакетМетодовСервиса(ПараметрыВыполнения, ПакетМетодов,
			КонтекстДиагностики);
		СписокОператоровЭДОВФорматеСервиса = РезультатыПакета[ИдентификаторМетодаПолученияСпискаОператоровЭДО]; // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.СписокОператоровЭДО
		ПараметрыСвязиВФорматеСервиса = РезультатыПакета[ИдентификаторМетодаПолученияСвязиИдентификаторовЭДО]; // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.НаборПараметровСвязиИдентификаторовАбонентовЭДО
		
		Если ЗначениеЗаполнено(СписокОператоровЭДОВФорматеСервиса) Тогда
			ОператорыЭДОПоУчетнойЗаписи = СписокОператоровЭДОИзФорматаСервиса(СписокОператоровЭДОВФорматеСервиса);
			ОбщегоНазначенияКлиентСервер.ДополнитьСписок(ОператорыЭДО, ОператорыЭДОПоУчетнойЗаписи);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыСвязиВФорматеСервиса) Тогда
			ПараметрыСвязиПоУчетнойЗаписи = ПараметрыСвязиИзФорматаСервиса(ПараметрыСвязиВФорматеСервиса,
				ДанныеКонтрагентов);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПараметрыСвязиПоУчетнойЗаписи, ПараметрыСвязиИдентификаторовЭДО);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОператорыЭДО) Тогда
		Результат.ОператорыЭДО = ОператорыЭДО;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСвязиИдентификаторовЭДО) Тогда
		Результат.ПараметрыСвязиИдентификаторовЭДО = ПараметрыСвязиИдентификаторовЭДО;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ПараметрыПолучения - см. ПриглашенияЭДО.НовыеПараметрыПолученияСвязиИдентификаторов
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. ПриглашенияЭДО.НовыеПараметрыСвязиИдентификаторов
Функция ПараметрыСвязиИдентификаторов(ПараметрыПолучения, КонтекстДиагностики = Неопределено) Экспорт
	
	ИдентификаторыОрганизации = ПараметрыПолучения.ИдентификаторыОрганизации;
	Если Не ЗначениеЗаполнено(ИдентификаторыОрганизации) Тогда
		ИдентификаторыОрганизации = УчетныеЗаписиЭДО.ИдентификаторыЭДОПоОрганизации(
			ПараметрыПолучения.Организация, Истина);
	КонецЕсли;
	
	УчетныеЗаписиОблачногоЭДО = РегистрыСведений.НастройкиОблачногоЭДО.УчетныеЗаписиОблачногоЭДО(
		ИдентификаторыОрганизации);
	
	Если Не ЗначениеЗаполнено(УчетныеЗаписиОблачногоЭДО) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Контрагент = ПараметрыПолучения.Контрагент;
	
	Если Контрагент = Неопределено
		И ТипЗнч(ПараметрыПолучения.ИдентификаторыКонтрагента) = Тип("ТаблицаЗначений") Тогда
		НаборКонтрагентов = ПараметрыПолучения.ИдентификаторыКонтрагента.ВыгрузитьКолонку("Контрагент");
	ИначеЕсли ТипЗнч(Контрагент) = Тип("Массив") Тогда
		НаборКонтрагентов = Контрагент;
	Иначе
		НаборКонтрагентов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контрагент);
	КонецЕсли;
	
	ДанныеКонтрагентов = ДанныеКонтрагентовДляПриглашения(НаборКонтрагентов);
	
	ПараметрыПолученияВФорматСервиса = ПараметрыПолученияСвязиИдентификаторовВФорматСервиса(
		ПараметрыПолучения, ДанныеКонтрагентов);
	
	ОписаниеМетода =  ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"НаборПараметровСвязиИдентификаторовАбонентовЭДО",
		ПараметрыПолученияВФорматСервиса);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ПараметрыСвязиИдентификаторовЭДО = ПриглашенияЭДО.НовыеПараметрыСвязиИдентификаторов();
	
	Для Каждого УчетнаяЗаписьОблачногоЭДО Из УчетныеЗаписиОблачногоЭДО Цикл
		
		ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
			УчетнаяЗаписьОблачногоЭДО, ТекущийПользователь);
		
		ПараметрыСвязиВФорматеСервиса = ИнтеграцияОблачногоЭДО.ВыполнитьМетодСервиса(ПараметрыВыполнения,
			ОписаниеМетода, КонтекстДиагностики); // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.НаборПараметровСвязиИдентификаторовАбонентовЭДО
		
		Если ЗначениеЗаполнено(ПараметрыСвязиВФорматеСервиса) Тогда
			ПараметрыСвязиПоУчетнойЗаписи = ПараметрыСвязиИзФорматаСервиса(ПараметрыСвязиВФорматеСервиса,
				ДанныеКонтрагентов);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПараметрыСвязиПоУчетнойЗаписи, ПараметрыСвязиИдентификаторовЭДО);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыПолучения.ПолучатьПочтовыеАдреса Тогда
		ЗаполнитьПочтовыеАдресаКонтрагентовВПараметрахСвязиИдентификаторов(ПараметрыСвязиИдентификаторовЭДО);
	КонецЕсли;
	
	Возврат ПараметрыСвязиИдентификаторовЭДО;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Обработано - Число
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция НовыйРезультатДействияСПриглашениями() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Обработано", 0);
	Результат.Вставить("КонтекстДиагностики", Новый Структура);
	Возврат Результат;
КонецФункции

// Параметры:
//  Приглашения - Массив из см. ПриглашенияЭДОКлиентСервер.НовоеИсходящееПриглашение
//  РасшифрованныеМаркеры - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
// 
// Возвращаемое значение:
//  См. НовыйРезультатДействияСПриглашениями
Функция ОтправитьПриглашения(Приглашения, РасшифрованныеМаркеры) Экспорт
	Результат = НовыйРезультатДействияСПриглашениями();
	Результат.КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	ДанныеПриглашенийДляОтправки = ДанныеПриглашенийДляОтправки(Приглашения);
	
	// См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ОтправитьПриглашенияЭДО
	РезультатыДействияОтправитьПриглашенияВФорматеСервиса = ВыполнитьДействиеОтправитьПриглашенияВСервисе(
		ДанныеПриглашенийДляОтправки, РасшифрованныеМаркеры, Результат.КонтекстДиагностики);
	
	Результат.Обработано = ОбновитьПриглашенияПоРезультатамДействия(Приглашения,
		РезультатыДействияОтправитьПриглашенияВФорматеСервиса);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  Приглашения - Массив из см. ПриглашенияЭДОКлиентСервер.НовоеВходящееПриглашение
//  РасшифрованныеМаркеры - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
// 
// Возвращаемое значение:
//  См. НовыйРезультатДействияСПриглашениями
Функция ПринятьПриглашения(Приглашения, РасшифрованныеМаркеры) Экспорт
	Результат = НовыйРезультатДействияСПриглашениями();
	Результат.КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	ДанныеПриглашенийДляПринятия = ДанныеПриглашенийДляПринятия(Приглашения);
	
	СтатусыПриглашенийВФорматеСервиса = ВыполнитьДействиеСПриглашениямиВСервисе(
		"ПринятьПриглашенияЭДО", ДанныеПриглашенийДляПринятия, РасшифрованныеМаркеры, Результат.КонтекстДиагностики);
	
	Результат.Обработано = ОбновитьСтатусыПриглашенийПоРезультатамДействия(СтатусыПриглашенийВФорматеСервиса);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  Приглашения - Массив из см. ПриглашенияЭДОКлиентСервер.НовоеВходящееПриглашение
//  РасшифрованныеМаркеры - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
// 
// Возвращаемое значение:
//  См. НовыйРезультатДействияСПриглашениями
Функция ОтклонитьПриглашения(Приглашения, РасшифрованныеМаркеры) Экспорт
	Результат = НовыйРезультатДействияСПриглашениями();
	Результат.КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	ДанныеПриглашенийДляОтклонения = ДанныеПриглашенийДляОтклонения(Приглашения);
		
	СтатусыПриглашенийВФорматеСервиса = ВыполнитьДействиеСПриглашениямиВСервисе(
		"ОтклонитьПриглашенияЭДО", ДанныеПриглашенийДляОтклонения, РасшифрованныеМаркеры, Результат.КонтекстДиагностики);
	
	Результат.Обработано =  ОбновитьСтатусыПриглашенийПоРезультатамДействия(СтатусыПриглашенийВФорматеСервиса);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ПакетМетодов - См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
//  ПараметрыОперации - См. ЭлектронныеДокументыЭДОИнтеграцияОблака.НовыеПараметрыОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаДанныеПриглашенийЭДОСОшибками(ПакетМетодов, ПараметрыОперации) Экспорт
	
	ТипДанных = Перечисления.ТипыСинхронизацииОблачногоЭДО.ДокументыЭДО;
	МеткиВремениПоИдентификаторамЭДО = ПараметрыОперации.ОбъектыОперации.МеткиВремениТиповСинхронизации[
		ТипДанных];
	ИдентификаторыЭДО = ОбщегоНазначения.ВыгрузитьКолонку(МеткиВремениПоИдентификаторамЭДО, "ИдентификаторЭДО");
	ИдентификаторыПриглашенийЭДО = РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.ОбъектыСОшибками(
		ТипДанных, ИдентификаторыЭДО);
		
	Если ЗначениеЗаполнено(ИдентификаторыПриглашенийЭДО) Тогда
		ОписаниеМетода = ОписаниеМетодаДанныеПриглашенийЭДО(ИдентификаторыПриглашенийЭДО);
		ИдентификаторМетода = ИдентификаторМетодаДанныеПриглашенийЭДО();
		ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, ИдентификаторМетода);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ПакетМетодов - См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
//  ПараметрыОперации - См. ЭлектронныеДокументыЭДОИнтеграцияОблака.НовыеПараметрыОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаПорцияДанныхПриглашенийЭДОПоМеткамВремени(ПакетМетодов, ПараметрыОперации) Экспорт
	МеткиВремениПоИдентификаторамЭДО = ПараметрыОперации.ОбъектыОперации.МеткиВремениТиповСинхронизации[
		Перечисления.ТипыСинхронизацииОблачногоЭДО.ПриглашенияЭДО];
	Если ЗначениеЗаполнено(МеткиВремениПоИдентификаторамЭДО) Тогда
		ОписаниеМетода = ОписаниеМетодаПорцияДанныхПриглашенийЭДОПоМеткамВремени(МеткиВремениПоИдентификаторамЭДО);
		ИдентификаторМетода = ИдентификаторМетодаПорцияДанныхПриглашенийЭДОПоМеткамВремени();
		ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, ИдентификаторМетода);
	КонецЕсли;
КонецПроцедуры

// Параметры:
//  ИдентификаторМетода - Строка
//  РезультатМетода - Структура,Массив из Структура
//  РезультатДействий - см. ЭлектронныеДокументыЭДОИнтеграцияОблака.НовыйРезультатДействийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ПакетМетодовПовторно - см. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
Процедура ОбработатьРезультатМетодаПоДействиямЭДО(ИдентификаторМетода, РезультатМетода,
	РезультатДействий, КонтекстДиагностики, ПакетМетодовПовторно) Экспорт
	
	Если ИдентификаторМетода = ИдентификаторМетодаПорцияДанныхПриглашенийЭДОПоМеткамВремени() Тогда
		
		ОбработатьРезультатМетодаПорцияДанныхПриглашенийЭДОПоМеткамВремени(
			РезультатМетода, РезультатДействий, КонтекстДиагностики, ПакетМетодовПовторно);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаДанныеПриглашенийЭДО() Тогда
		
		ОбработатьРезультатМетодаДанныеПриглашенийЭДО(РезультатМетода, РезультатДействий, КонтекстДиагностики);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОтправкаПриглашений

// Параметры:
//  Приглашения - Массив из см. ПриглашенияЭДОКлиентСервер.НовоеИсходящееПриглашение
// 
// Возвращаемое значение:
//  Массив из см. НовыеДанныеПриглашенийДляОтправки
Функция ДанныеПриглашенийДляОтправки(Приглашения)
	
	ДанныеПриглашений = Новый Массив; // Массив из см. НовыеДанныеПриглашенийДляОтправки
	
	Организации = Новый Массив; // Массив из ОпределяемыйТип.Организация
	Контрагенты = Новый Массив; // Массив из ОпределяемыйТип.КонтрагентБЭД
	
	Для Каждого Приглашение Из Приглашения Цикл
		ОбщегоНазначенияБЭД.ДобавитьУникальноеЗначение(Организации, Приглашение.Организация);
		ОбщегоНазначенияБЭД.ДобавитьУникальноеЗначение(Контрагенты, Приглашение.Контрагент);
	КонецЦикла;
	
	КлючиПриглашений = КлючиПриглашений(Приглашения);
	СтатусыПриглашений = ПриглашенияЭДО.СтатусыПриглашений(КлючиПриглашений);
	
	КлючевыеРеквизитыОрганизаций = ИнтеграцияЭДО.КлючевыеРеквизитыОрганизаций(Организации);
	ДанныеКонтрагентов = ДанныеКонтрагентовДляПриглашения(Контрагенты);
	
	Для Каждого Приглашение Из Приглашения Цикл
		
		ДанныеПриглашения = НовыеДанныеПриглашенийДляОтправки();
		ДанныеПриглашения.ЭтоНовоеПриглашение = ЭтоНовоеПриглашение(Приглашение.КлючПриглашения, СтатусыПриглашений);
		ДанныеПриглашения.Идентификатор = Приглашение.КлючПриглашения;
		ДанныеПриглашения.ИдентификаторОрганизации = Приглашение.ИдентификаторОрганизации;
		ДанныеПриглашения.EmailОрганизации = Приглашение.EmailОрганизации;
		ДанныеПриглашения.ПолучательИНН = Приглашение.ПолучательИНН;
		ДанныеПриглашения.ПолучательКПП = Приглашение.ПолучательКПП;
		ДанныеПриглашения.ТекстПриглашения = Приглашение.ТекстПриглашения;
		
		ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Приглашение, "ИдентификаторКонтрагента", ""); // Строка
		ДанныеПриглашения.ИдентификаторКонтрагента = ИдентификаторКонтрагента;
		EmailКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Приглашение, "EmailКонтрагента", ""); // Строка
		ДанныеПриглашения.EmailКонтрагента = EmailКонтрагента;
		ИдентификаторОператора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Приглашение, "ОператорЭДО", ""); // Строка
		ДанныеПриглашения.ИдентификаторОператора = ИдентификаторОператора;
		
		РеквизитыОрганизации = КлючевыеРеквизитыОрганизаций.Найти(Приглашение.Организация, "Ссылка");
		Если ЗначениеЗаполнено(РеквизитыОрганизации) Тогда
			ЗаполнитьЗначенияСвойств(ДанныеПриглашения.Организация, РеквизитыОрганизации);
		КонецЕсли;
		
		ДанныеКонтрагента = ДанныеКонтрагентов.Найти(Приглашение.Контрагент, "Ссылка");
		Если ЗначениеЗаполнено(ДанныеКонтрагента) Тогда
			ДанныеПриглашения.Контрагент = НовыеДанныеКонтрагентаДляПриглашенияВФорматеСервиса();
			ЗаполнитьЗначенияСвойств(ДанныеПриглашения.Контрагент, ДанныеКонтрагента);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Приглашение.АдресПисьмаОВыбореОператора) Тогда
			ФайлПисьма = ПолучитьИзВременногоХранилища(Приглашение.АдресПисьмаОВыбореОператора); // См. РаботаСФайламиБЭД.НовоеОписаниеФайла
			ФайлПисьмаВФорматеСервиса = Новый Структура("ИмяФайла, Данные","","");
			ФайлПисьмаВФорматеСервиса.ИмяФайла = ФайлПисьма.ИмяФайла;
			ФайлПисьмаВФорматеСервиса.Данные = Base64Строка(ФайлПисьма.ДвоичныеДанные);
			ДанныеПриглашения.ПисьмоОВыбореОператора = ФайлПисьмаВФорматеСервиса;
		КонецЕсли;
		
		ДанныеПриглашений.Добавить(ДанныеПриглашения);
		
	КонецЦикла;
	
	Возврат ДанныеПриглашений;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ЭтоНовоеПриглашение - Булево
//  * Идентификатор - Строка - заполняется только при повторной отправке приглашения.
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторКонтрагента - Строка
//  * ИдентификаторОператора - Строка
//  * ПолучательИНН - Строка
//  * ПолучательКПП - Строка
//  * Организация - Структура:
//  ** ИНН - Строка
//  ** КПП - Строка
//  * Контрагент - Неопределено
//               - см. НовыеДанныеКонтрагентаДляПриглашенияВФорматеСервиса
//  * EmailОрганизации - Строка
//  * EmailКонтрагента - Строка
//  * ТекстПриглашения - Строка
//  * ПисьмоОВыбореОператора - Неопределено,Структура:
//  ** ИмяФайла - Строка
//  ** Данные - Строка - ДвоичныеДанные в формате base64.
Функция НовыеДанныеПриглашенийДляОтправки()
	ДанныеПриглашения = Новый Структура;
	ДанныеПриглашения.Вставить("ЭтоНовоеПриглашение", Ложь);
	ДанныеПриглашения.Вставить("Идентификатор", "");
	ДанныеПриглашения.Вставить("ИдентификаторОрганизации", "");
	ДанныеПриглашения.Вставить("ИдентификаторКонтрагента", "");
	ДанныеПриглашения.Вставить("ИдентификаторОператора", "");
	ДанныеПриглашения.Вставить("ПолучательИНН", "");
	ДанныеПриглашения.Вставить("ПолучательКПП", "");
	ДанныеПриглашения.Вставить("Организация", Новый Структура);
	ДанныеПриглашения.Организация.Вставить("ИНН", "");
	ДанныеПриглашения.Организация.Вставить("КПП", "");
	ДанныеПриглашения.Вставить("Контрагент", Неопределено);
	ДанныеПриглашения.Вставить("EmailОрганизации", "");
	ДанныеПриглашения.Вставить("EmailКонтрагента", "");
	ДанныеПриглашения.Вставить("ТекстПриглашения", "");
	ДанныеПриглашения.Вставить("ПисьмоОВыбореОператора", Неопределено);
	Возврат ДанныеПриглашения;
КонецФункции

// Параметры:
//  Приглашения - Массив из см. ПриглашенияЭДОКлиентСервер.НовоеИсходящееПриглашение
// 
// Возвращаемое значение:
//  см. ПриглашенияЭДО.НовыеКлючиПриглашений
Функция КлючиПриглашений(Приглашения)
	
	КлючиПриглашений = ПриглашенияЭДО.НовыеКлючиПриглашений();
	Для Каждого ДанныеПриглашения Из Приглашения Цикл
		НовыйКлючПриглашения = КлючиПриглашений.Добавить();
		НовыйКлючПриглашения.Идентификатор = ДанныеПриглашения.КлючПриглашения;
		НовыйКлючПриглашения.ИдентификаторОрганизации = ДанныеПриглашения.ИдентификаторОрганизации;
	КонецЦикла;
	
	Возврат КлючиПриглашений;
	
КонецФункции

// Параметры:
//  ДанныеПриглашений - См. ДанныеПриглашенийДляОтправки
//  РасшифрованныеМаркеры - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  
// Возвращаемое значение:
//  Массив из Структура:
//  * Идентификатор - Строка
//  * ИдентификаторОрганизации - Строка
//  * Статус - Строка
//  * ДатаИзмененияСтатуса - См. ОбщегоНазначенияБЭД.ДатаВФорматеISO
//  * ОписаниеОшибки - Строка
Функция ВыполнитьДействиеОтправитьПриглашенияВСервисе(ДанныеПриглашений, РасшифрованныеМаркеры, КонтекстДиагностики)
	
	ИмяМетодаФормированияПриглашений = "СформироватьПриглашенияЭДО";
	ИмяМетодаОтправкиПриглашений = "ОтправитьПриглашенияЭДО";
	
	ЕстьНовыеПриглашения = Ложь;
	Для Каждого ДанныеПриглашения Из ДанныеПриглашений Цикл
		Если ДанныеПриглашения.ЭтоНовоеПриглашение Тогда
			ЕстьНовыеПриглашения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	РезультатыДействийСПриглашениями = Новый Массив; // См. ВыполнитьДействиеОтправитьПриглашенияВСервисе
		
	ПараметрыДействияПоУчетнымЗаписям = ПараметрыДействияСПриглашениямиПоУчетнымЗаписямОблачногоЭДО(
		ДанныеПриглашений, РасшифрованныеМаркеры, ИмяМетодаОтправкиПриглашений, КонтекстДиагностики);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Для Каждого ПараметрыДействияПоУчетнойЗаписи Из ПараметрыДействияПоУчетнымЗаписям Цикл
		
		УчетнаяЗаписьОблачногоЭДО = ПараметрыДействияПоУчетнойЗаписи.Ключ;
		ПараметрыДействия = ПараметрыДействияПоУчетнойЗаписи.Значение;
		
		ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
			УчетнаяЗаписьОблачногоЭДО, ТекущийПользователь);
		
		ПакетМетодов = ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса();
		
		Если ЕстьНовыеПриглашения Тогда
			ОписаниеМетодаФормированияПриглашений = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
				ИмяМетодаФормированияПриглашений, ПараметрыДействия.ДанныеПриглашений,
				ПараметрыДействия.МаркерыАвторизации);
			ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетодаФормированияПриглашений,
				ИмяМетодаФормированияПриглашений);
		КонецЕсли;
		
		ОписаниеМетодаОтправкиПриглашений = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(ИмяМетодаОтправкиПриглашений,
			ПараметрыДействия.ДанныеПриглашений, ПараметрыДействия.МаркерыАвторизации);
		ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетодаОтправкиПриглашений,
			ИмяМетодаОтправкиПриглашений);
		
		РезультатыПакета = ИнтеграцияОблачногоЭДО.ВыполнитьПакетМетодовСервиса(ПараметрыВыполнения, ПакетМетодов,
			КонтекстДиагностики);
		
		РезультатОтправкиПриглашений = РезультатыПакета[ИмяМетодаОтправкиПриглашений]; // Массив
		
		Если ЗначениеЗаполнено(РезультатОтправкиПриглашений) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатыДействийСПриглашениями, РезультатОтправкиПриглашений);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатыДействийСПриглашениями;
	
КонецФункции

// Параметры:
//  Приглашения - Массив из см. ПриглашенияЭДОКлиентСервер.НовоеИсходящееПриглашение
//  РезультатыДействияОтправитьПриглашенияВФорматеСервиса - см. ВыполнитьДействиеОтправитьПриглашенияВСервисе
// 
// Возвращаемое значение:
//  Число - Количество обработанных приглашений
//
Функция ОбновитьПриглашенияПоРезультатамДействия(Приглашения, РезультатыДействияОтправитьПриглашенияВФорматеСервиса)
	
	Результат = НовыйРезультатДействияСПриглашениями();
	Результат.КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	СтатусыПриглашений = СтатусыПриглашенийИзФорматаСервиса(РезультатыДействияОтправитьПриглашенияВФорматеСервиса);
	
	ОбновитьПриглашенияЛокально(Приглашения, СтатусыПриглашений);
	
	Обработано = 0;
	Для Каждого СтатусПриглашения Из СтатусыПриглашений Цикл
		Если СтатусПриглашения.Статус <> Перечисления.СтатусыПриглашений.Ошибка Тогда
			Обработано = Обработано + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Обработано;
	
КонецФункции

// Параметры:
//  Идентификатор - Строка
//  СтатусыПриглашений - см. ПриглашенияЭДО.СтатусыПриглашений
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоНовоеПриглашение(Идентификатор, СтатусыПриглашений)
	
	Отбор = Новый Структура("Идентификатор", Идентификатор);
	Возврат Не ЗначениеЗаполнено(СтатусыПриглашений.НайтиСтроки(Отбор));
	
КонецФункции

// Параметры:
//  Приглашения - Массив из см. ПриглашенияЭДОКлиентСервер.НовоеИсходящееПриглашение
//  СтатусыПриглашений - Массив из см. ПриглашенияЭДОСлужебный.НовыйСтатусПриглашения
//
Процедура ОбновитьПриглашенияЛокально(Приглашения, СтатусыПриглашений)
	
	Для Каждого Приглашение Из Приглашения Цикл
		СтатусПриглашения = СтатусПриглашенияПоКлючу(Приглашение.КлючПриглашения, СтатусыПриглашений);
		ПриглашенияЭДО.ОбновитьПриглашение(Приглашение, СтатусПриглашения);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  КлючПриглашения - Строка
//  СтатусыПриглашений - Массив из см. ПриглашенияЭДОСлужебный.НовыйСтатусПриглашения
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыПриглашений
//
Функция СтатусПриглашенияПоКлючу(КлючПриглашения, СтатусыПриглашений)
	
	Результат = Перечисления.СтатусыПриглашений.ПустаяСсылка();
	
	Для Каждого СтатусПриглашения Из СтатусыПриглашений Цикл
		Если СтатусПриглашения.Идентификатор = КлючПриглашения Тогда
			Результат = СтатусПриглашения.Статус;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

#КонецОбласти // ОтправкаПриглашений

#Область ОбновлениеСтатусов

// Параметры:
//  СтатусыПриглашенийВФорматеСервиса - см. ВыполнитьДействиеСПриглашениямиВСервисе
// 
// Возвращаемое значение:
//  Число - Количество обработанных приглашений
Функция ОбновитьСтатусыПриглашенийПоРезультатамДействия(СтатусыПриглашенийВФорматеСервиса)
	
	СтатусыПриглашений = СтатусыПриглашенийИзФорматаСервиса(СтатусыПриглашенийВФорматеСервиса);
	
	ОбновитьСтатусыПриглашений(СтатусыПриглашений);
	
	Обработано = 0;
	Для Каждого СтатусПриглашения Из СтатусыПриглашений Цикл
		Если СтатусПриглашения.Статус <> Перечисления.СтатусыПриглашений.Ошибка Тогда
			Обработано = Обработано + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Обработано;
	
КонецФункции

// Параметры:
//  СтатусыПриглашенийВФорматеСервиса - Массив из Структура:
//  * Идентификатор - Строка
//  * ИдентификаторОрганизации - Строка
//  * Статус - Строка
//  * ДатаИзмененияСтатуса - Строка - дата в формате ISO.
//  * ОписаниеОшибки - Строка
// 
// Возвращаемое значение:
//  Массив из см. ПриглашенияЭДОСлужебный.НовыйСтатусПриглашения
Функция СтатусыПриглашенийИзФорматаСервиса(СтатусыПриглашенийВФорматеСервиса)
	
	СтатусыПриглашений = Новый Массив; // См. СтатусыПриглашенийИзФорматаСервиса
	
	МетаданныеПеречисленияСтатусыПриглашений = Метаданные.Перечисления.СтатусыПриглашений;
	
	Для Каждого СтатусПриглашенияВФорматеСервиса Из СтатусыПриглашенийВФорматеСервиса Цикл
		
		СтатусПриглашения = ПриглашенияЭДО.НовыйСтатусПриглашения();
		СтатусПриглашения.Идентификатор = СтатусПриглашенияВФорматеСервиса.Идентификатор;
		СтатусПриглашения.ИдентификаторОрганизации = СтатусПриглашенияВФорматеСервиса.ИдентификаторОрганизации;
		СтатусПриглашения.Статус = СтатусИзФорматаСервиса(СтатусПриглашенияВФорматеСервиса.Статус,
			МетаданныеПеречисленияСтатусыПриглашений);
		СтатусПриглашения.ДатаИзмененияСтатуса = ОбщегоНазначенияБЭД.ДатаИзФорматаISO(
			СтатусПриглашенияВФорматеСервиса.ДатаИзмененияСтатуса);
		СтатусПриглашения.ОписаниеОшибки = СтатусПриглашенияВФорматеСервиса.ОписаниеОшибки;
		СтатусыПриглашений.Добавить(СтатусПриглашения);
		
	КонецЦикла;
	
	Возврат СтатусыПриглашений;
	
КонецФункции

// Параметры:
//  СтатусыПриглашений - Массив из см. ПриглашенияЭДОСлужебный.НовыйСтатусПриглашения
Процедура ОбновитьСтатусыПриглашений(СтатусыПриглашений)
	
	Для Каждого СтатусПриглашения Из СтатусыПриглашений Цикл
		
		ПриглашенияЭДО.ОбновитьСтатусПриглашения(СтатусПриглашения);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ОбновлениеСтатусов

#Область ПринятиеИОтклонениеПриглашений

// Параметры:
//  ИмяМетода - Строка
//  ДанныеПриглашений - Массив из Структура:
//  * ИдентификаторОрганизации - Строка
//  РасшифрованныеМаркеры - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  
// Возвращаемое значение:
//  Массив из Структура:
//  * Идентификатор - Строка
//  * ИдентификаторОрганизации - Строка
//  * Статус - Строка
//  * ДатаИзмененияСтатуса - Строка
//  * ОписаниеОшибки - Строка
Функция ВыполнитьДействиеСПриглашениямиВСервисе(ИмяМетода, ДанныеПриглашений, РасшифрованныеМаркеры, КонтекстДиагностики)
	
	РезультатыДействийСПриглашениями = Новый Массив; // См. ВыполнитьДействиеСПриглашениямиВСервисе
	
	ПараметрыДействияПоУчетнымЗаписям = ПараметрыДействияСПриглашениямиПоУчетнымЗаписямОблачногоЭДО(
		ДанныеПриглашений, РасшифрованныеМаркеры, ИмяМетода, КонтекстДиагностики);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Для Каждого ПараметрыДействияПоУчетнойЗаписи Из ПараметрыДействияПоУчетнымЗаписям Цикл
		
		УчетнаяЗаписьОблачногоЭДО = ПараметрыДействияПоУчетнойЗаписи.Ключ;
		ПараметрыДействия = ПараметрыДействияПоУчетнойЗаписи.Значение;
		
		ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
			УчетнаяЗаписьОблачногоЭДО, ТекущийПользователь);
		
		ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(ИмяМетода,
			ПараметрыДействия.ДанныеПриглашений, ПараметрыДействия.МаркерыАвторизации);
		
		РезультатыДействийСПриглашениямиПоУчетнойЗаписи = ИнтеграцияОблачногоЭДО.ВыполнитьМетодСервиса(
			ПараметрыВыполнения, ОписаниеМетода, КонтекстДиагностики); // См. ВыполнитьДействиеСПриглашениямиВСервисе
		
		Если ЗначениеЗаполнено(РезультатыДействийСПриглашениямиПоУчетнойЗаписи) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатыДействийСПриглашениями,
				РезультатыДействийСПриглашениямиПоУчетнойЗаписи);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатыДействийСПриглашениями;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Идентификатор - Строка
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторКонтрагента - Строка
Функция НовыеДанныеПриглашенияДляПринятия()
	ДанныеПриглашения = Новый Структура;
	ДанныеПриглашения.Вставить("Идентификатор", "");
	ДанныеПриглашения.Вставить("ИдентификаторОрганизации", "");
	ДанныеПриглашения.Вставить("ИдентификаторКонтрагента", "");
	Возврат ДанныеПриглашения;
КонецФункции

// Параметры:
//  Приглашения - Массив из см. ПриглашенияЭДОКлиент.НовоеВходящееПриглашение
// 
// Возвращаемое значение:
//  Массив из см. НовыеДанныеПриглашенияДляПринятия
Функция ДанныеПриглашенийДляПринятия(Приглашения)
	
	ДанныеПриглашений = Новый Массив; // См. ДанныеПриглашенийДляПринятия
	
	Для Каждого Приглашение Из Приглашения Цикл
		ДанныеПриглашения = НовыеДанныеПриглашенияДляПринятия();
		ДанныеПриглашения.Идентификатор = Приглашение.КлючПриглашения;
		ДанныеПриглашения.ИдентификаторОрганизации = Приглашение.ИдентификаторОрганизации;
		ДанныеПриглашения.ИдентификаторКонтрагента = Приглашение.ИдентификаторКонтрагента;
		ДанныеПриглашений.Добавить(ДанныеПриглашения);
	КонецЦикла;
	
	Возврат ДанныеПриглашений;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Идентификатор - Строка
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторКонтрагента - Строка
//  * ПричинаОтказа - Строка
Функция НовыеДанныеПриглашенияДляОтклонения()
	ДанныеПриглашения = Новый Структура;
	ДанныеПриглашения.Вставить("Идентификатор", "");
	ДанныеПриглашения.Вставить("ИдентификаторОрганизации", "");
	ДанныеПриглашения.Вставить("ИдентификаторКонтрагента", "");
	ДанныеПриглашения.Вставить("ПричинаОтказа", "");
	Возврат ДанныеПриглашения;
КонецФункции

// Параметры:
//  Приглашения - Массив из см. ПриглашенияЭДОКлиент.НовоеВходящееПриглашение
// 
// Возвращаемое значение:
//  Массив из см. НовыеДанныеПриглашенияДляОтклонения
Функция ДанныеПриглашенийДляОтклонения(Приглашения)
	
	ДанныеПриглашений = Новый Массив; // См. ДанныеПриглашенийДляОтклонения
	
	Для Каждого Приглашение Из Приглашения Цикл
		ДанныеПриглашения = НовыеДанныеПриглашенияДляОтклонения();
		ДанныеПриглашения.Идентификатор = Приглашение.КлючПриглашения;
		ДанныеПриглашения.ИдентификаторОрганизации = Приглашение.ИдентификаторОрганизации;
		ДанныеПриглашения.ИдентификаторКонтрагента = Приглашение.ИдентификаторКонтрагента;
		ДанныеПриглашения.ПричинаОтказа = Приглашение.ПричинаОтказа;
		ДанныеПриглашений.Добавить(ДанныеПриглашения);
	КонецЦикла;
	
	Возврат ДанныеПриглашений;
	
КонецФункции

#КонецОбласти // ПринятиеИОтклонениеПриглашений

// Возвращаемое значение:
//  Структура:
//  * Контрагенты - Массив из См. НовыеДанныеКонтрагентаДляПриглашенияВФорматеСервиса
//  * ИдентификаторыКонтрагента - Массив из Строка
//  * ИдентификаторыОрганизации - Массив из Строка
//  * ФормироватьСписокВыбора - Булево
//  * ПриоритетПодключенные - Булево
Функция НовыеПараметрыПолученияСвязиИдентификаторовАбонентовВФорматеСервиса()
	Параметры = Новый Структура;
	Параметры.Вставить("Контрагенты", Новый Массив);
	Параметры.Вставить("ИдентификаторыКонтрагента", Новый Массив);
	Параметры.Вставить("ИдентификаторыОрганизации", Новый Массив);
	Параметры.Вставить("ФормироватьСписокВыбора", Ложь);
	Параметры.Вставить("ПриоритетПодключенные", Ложь);
	Возврат Параметры;
КонецФункции

// Параметры:
//  ПараметрыПолученияСвязи - см. ИнтерфейсДокументовЭДО.НовыеПараметрыПолученияСвязиИдентификаторов
//  ДанныеКонтрагентов - См. ДанныеКонтрагентовДляПриглашения
// 
// Возвращаемое значение:
//  См. НовыеПараметрыПолученияСвязиИдентификаторовАбонентовВФорматеСервиса
Функция ПараметрыПолученияСвязиИдентификаторовВФорматСервиса(ПараметрыПолученияСвязи, ДанныеКонтрагентов)
	
	ПараметрыВФорматеСервиса = НовыеПараметрыПолученияСвязиИдентификаторовАбонентовВФорматеСервиса();
	ПараметрыВФорматеСервиса.ФормироватьСписокВыбора = Истина;
	ПараметрыВФорматеСервиса.ИдентификаторыОрганизации = ПараметрыПолученияСвязи.ИдентификаторыОрганизации;
	ПараметрыВФорматеСервиса.ИдентификаторыКонтрагента = ПараметрыПолученияСвязи.ИдентификаторыКонтрагента;
	ПараметрыВФорматеСервиса.Контрагенты = ДанныеКонтрагентовДляПриглашенияВФорматеСервиса(ДанныеКонтрагентов);
	Возврат ПараметрыВФорматеСервиса;
	
КонецФункции

// Параметры:
//  СписокОператоровЭДОВФорматеСервиса - См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.СписокОператоровЭДО
// 
// Возвращаемое значение:
//  СписокЗначений из Строка
Функция СписокОператоровЭДОИзФорматаСервиса(СписокОператоровЭДОВФорматеСервиса)
	
	СписокОператоровЭДО = Новый СписокЗначений; // См. СписокОператоровЭДОИзФорматаСервиса
	
	Для Каждого ОператорВФорматеСервиса Из СписокОператоровЭДОВФорматеСервиса Цикл
		СписокОператоровЭДО.Добавить(ОператорВФорматеСервиса.Идентификатор, ОператорВФорматеСервиса.Наименование);
	КонецЦикла;
	
	Возврат СписокОператоровЭДО;
	
КонецФункции

// Параметры:
//  ПараметрыСвязиВФорматеСервиса - См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.НаборПараметровСвязиИдентификаторовАбонентовЭДО
//  ДанныеКонтрагентов - См. ДанныеКонтрагентовДляПриглашения
// 
// Возвращаемое значение:
//  См. ПриглашенияЭДО.НовыеПараметрыСвязиИдентификаторов
Функция ПараметрыСвязиИзФорматаСервиса(ПараметрыСвязиВФорматеСервиса, ДанныеКонтрагентов)
	
	ПараметрыСвязи = ИнтерфейсДокументовЭДО.НовыеПараметрыСвязиИдентификаторов();
	
	МетаданныеВариантыПотребностиСоглашения = Метаданные.Перечисления.ВариантыПотребностиСоглашенияНаРоуминг;
	МетаданныеСтатусыПриглашений = Метаданные.Перечисления.СтатусыПриглашений;
	
	Для Каждого ЭлементСвязиВФорматеСервиса Из ПараметрыСвязиВФорматеСервиса Цикл
		СтрокаПараметров = ПараметрыСвязи.Добавить();
		СтрокаПараметров.ЭтоОблачныйЭДО = Истина;
		КлючевыеРеквизитыКонтрагента = ЭлементСвязиВФорматеСервиса.Контрагент;
		СтрокаПараметров.Контрагент = КонтрагентИзДанныхКонтрагентовДляПриглашения(ДанныеКонтрагентов,
			КлючевыеРеквизитыКонтрагента);
		СтрокаПараметров.КонтрагентИНН = ЭлементСвязиВФорматеСервиса.Контрагент.ИНН;
		СтрокаПараметров.КонтрагентКПП = ЭлементСвязиВФорматеСервиса.Контрагент.КПП;
		СтрокаПараметров.ИдентификаторКонтрагента = ЭлементСвязиВФорматеСервиса.ИдентификаторКонтрагента;
		СтрокаПараметров.ИдентификаторКонтрагентаПредставление = ЭлементСвязиВФорматеСервиса.ИдентификаторКонтрагентаПредставление;
		СтрокаПараметров.ИдентификаторКонтрагентаОписание = ЭлементСвязиВФорматеСервиса.ИдентификаторКонтрагентаОписание;
		СтрокаПараметров.ОператорКонтрагента = ЭлементСвязиВФорматеСервиса.ОператорКонтрагента;
		СтрокаПараметров.ОператорКонтрагентаПредставление = ЭлементСвязиВФорматеСервиса.ОператорКонтрагентаПредставление;
		СтрокаПараметров.АбонентВХабе1С = ЭлементСвязиВФорматеСервиса.АбонентВХабе1С;
		СтрокаПараметров.ИдентификаторОрганизации = ЭлементСвязиВФорматеСервиса.ИдентификаторОрганизации;
		СтрокаПараметров.ИдентификаторОрганизацииПредставление = ЭлементСвязиВФорматеСервиса.ИдентификаторОрганизацииПредставление;
		СтрокаПараметров.ОператорОрганизации = ЭлементСвязиВФорматеСервиса.ОператорОрганизации;
		СтрокаПараметров.ИмяФайлаСоглашенияНаРоуминг = ЭлементСвязиВФорматеСервиса.ИмяФайлаСоглашенияНаРоуминг;
		СтрокаПараметров.РекомендацияПоНастройке = ЭлементСвязиВФорматеСервиса.РекомендацияПоНастройке;
		СтрокаПараметров.АбонентАктивен = ЭлементСвязиВФорматеСервиса.АбонентАктивен;
		СтрокаПараметров.СертификатДействителен = ЭлементСвязиВФорматеСервиса.СертификатДействителен;
		СтрокаПараметров.СтатусПодключения = ЭлементСвязиВФорматеСервиса.СтатусПодключения;
		СтрокаПараметров.ОператорыСовпадают = ЭлементСвязиВФорматеСервиса.ОператорыСовпадают;
		СтрокаПараметров.СвязьДоступна = ЭлементСвязиВФорматеСервиса.СвязьДоступна;
		СтрокаПараметров.ОтправкаТолькоНаИдентификаторЭДО = ЭлементСвязиВФорматеСервиса.ОтправкаТолькоНаИдентификаторЭДО;
		СтрокаПараметров.ТребуетсяСоглашение = ЭлементСвязиВФорматеСервиса.ТребуетсяСоглашение;
		СтрокаПараметров.ТребуетсяСоглашениеПриПервомПодключении = ЭлементСвязиВФорматеСервиса.ТребуетсяСоглашениеПриПервомПодключении;
		СтрокаПараметров.ОбязательнаяОтправкаЗаявкиНаРоуминг = ЭлементСвязиВФорматеСервиса.ОбязательнаяОтправкаЗаявкиНаРоуминг;
		СтрокаПараметров.ЗаявкаНаРоумингПринята = ЭлементСвязиВФорматеСервиса.ЗаявкаНаРоумингПринята;
		СтрокаПараметров.ПриглашениеОтправлено = ЭлементСвязиВФорматеСервиса.ПриглашениеОтправлено;
		
		СтрокаПараметров.СтатусПриглашенияПредставление = ЭлементСвязиВФорматеСервиса.СтатусПриглашенияПредставление;
		
		СтрокаПараметров.СписокВыбора = СписокВыбораИдентификаторовКонтрагентаИзФорматаСервиса(
			ЭлементСвязиВФорматеСервиса.СписокВыбора);
		
		СтрокаПараметров.Абоненты = АбонентыПараметровСвязиИдентификаторовИзФорматаСервиса(
			ЭлементСвязиВФорматеСервиса.Абоненты);
		
		Если ЗначениеЗаполнено(ЭлементСвязиВФорматеСервиса.ВариантПотребностиСоглашения) Тогда
			ВариантПотребностиСоглашения = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(
				ЭлементСвязиВФорматеСервиса.ВариантПотребностиСоглашения, МетаданныеВариантыПотребностиСоглашения); // ПеречислениеСсылка.ВариантыПотребностиСоглашенияНаРоуминг
			СтрокаПараметров.ВариантПотребностиСоглашения = ВариантПотребностиСоглашения;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементСвязиВФорматеСервиса.СтатусПриглашенияНаИдентификатор) Тогда
			СтрокаПараметров.СтатусПриглашенияНаИдентификатор = СтатусИзФорматаСервиса(
				ЭлементСвязиВФорматеСервиса.СтатусПриглашенияНаИдентификатор, МетаданныеСтатусыПриглашений);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементСвязиВФорматеСервиса.СтатусШироковещательногоПриглашения) Тогда
			СтрокаПараметров.СтатусШироковещательногоПриглашения = СтатусИзФорматаСервиса(
				ЭлементСвязиВФорматеСервиса.СтатусШироковещательногоПриглашения, МетаданныеСтатусыПриглашений);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементСвязиВФорматеСервиса.СтатусЗаявкиНаРоуминг) Тогда
			СтрокаПараметров.СтатусЗаявкиНаРоуминг = СтатусИзФорматаСервиса(
				ЭлементСвязиВФорматеСервиса.СтатусЗаявкиНаРоуминг, МетаданныеСтатусыПриглашений);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыСвязи;
	
КонецФункции

// Параметры:
//  СписокВыбораВФорматеСервисе - Массив из Структура:
//  * Идентификатор - Строка
//  * Наименование - Строка
//  * СтатусПодключения - Число
// 
// Возвращаемое значение:
//  - Неопределено
//  - СписокЗначений из Строка
Функция СписокВыбораИдентификаторовКонтрагентаИзФорматаСервиса(СписокВыбораВФорматеСервисе)
	
	Если Не ЗначениеЗаполнено(СписокВыбораВФорматеСервисе) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений; // СписокЗначений из Строка
	
	Для Каждого ЭлементСпискаВФорматеСервиса Из СписокВыбораВФорматеСервисе Цикл
		СписокВыбора.Добавить(ЭлементСпискаВФорматеСервиса.Идентификатор, ЭлементСпискаВФорматеСервиса.Наименование,,
			СинхронизацияЭДО.КартинкаСтатусаПодключенияАбонента(ЭлементСпискаВФорматеСервиса.СтатусПодключения));
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

// Параметры:
//  АбонентыВФорматеСервиса - Массив из Структура:
//  * Идентификатор - Строка
//  * Наименование - Строка
//  * ИНН - Строка
//  * КПП - Строка
// 
// Возвращаемое значение:
//  - Неопределено
//  - СписокЗначений из Структура:
//    * Идентификатор - Строка
//    * ИНН - Строка
//    * КПП - Строка
Функция АбонентыПараметровСвязиИдентификаторовИзФорматаСервиса(АбонентыВФорматеСервиса)
	
	Если Не ЗначениеЗаполнено(АбонентыВФорматеСервиса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Абоненты = Новый СписокЗначений; // СписокЗначений из Структура
	
	Для Каждого ЭлементСпискаВФорматеСервиса Из АбонентыВФорматеСервиса Цикл
		СвойстваАбонента = Новый Структура;
		СвойстваАбонента.Вставить("Идентификатор", ЭлементСпискаВФорматеСервиса.Идентификатор);
		СвойстваАбонента.Вставить("ИНН", ЭлементСпискаВФорматеСервиса.ИНН);
		СвойстваАбонента.Вставить("КПП", ЭлементСпискаВФорматеСервиса.КПП);
		Абоненты.Добавить(СвойстваАбонента, ЭлементСпискаВФорматеСервиса.Наименование);
	КонецЦикла;
	
	Возврат Абоненты;
	
КонецФункции

// Параметры:
//  ПараметрыСвязиИдентификаторов - см. ПараметрыСвязиИдентификаторов
// 
// Возвращаемое значение:
//  См. ПараметрыСвязиИдентификаторов
Функция ЗаполнитьПочтовыеАдресаКонтрагентовВПараметрахСвязиИдентификаторов(ПараметрыСвязиИдентификаторов)
	
	Если Не ЗначениеЗаполнено(ПараметрыСвязиИдентификаторов) Тогда
		Возврат ПараметрыСвязиИдентификаторов;
	КонецЕсли;
	
	Контрагенты = Новый Массив; // Массив из ОпределяемыйТип.УчастникЭДО
	Для Каждого СтрокаПараметров Из ПараметрыСвязиИдентификаторов Цикл
		ОбщегоНазначенияБЭД.ДобавитьУникальноеЗначение(Контрагенты, СтрокаПараметров.Контрагент);
	КонецЦикла;
	
	КонтактнаяИнформацияОбъектов = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		Контрагенты, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,, ТекущаяДатаСеанса());
	
	Если Не ЗначениеЗаполнено(КонтактнаяИнформацияОбъектов) Тогда
		Возврат ПараметрыСвязиИдентификаторов;
	КонецЕсли;
	
	ОтборКонтрагента = Новый Структура("Объект", Неопределено);
	
	Для Каждого СтрокаПараметров Из ПараметрыСвязиИдентификаторов Цикл
		
		ОтборКонтрагента.Объект = СтрокаПараметров.Контрагент;
		КонтактнаяИнформацияОбъекта = КонтактнаяИнформацияОбъектов.НайтиСтроки(ОтборКонтрагента);
		Если Не ЗначениеЗаполнено(КонтактнаяИнформацияОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ЭлектроннаяПочта Из КонтактнаяИнформацияОбъекта Цикл
			
			Если ЗначениеЗаполнено(ЭлектроннаяПочта.Представление)
				Или Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(
					ЭлектроннаяПочта.Представление) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаПараметров.ЭлектроннаяПочта) Тогда
				СтрокаПараметров.ЭлектроннаяПочта = ЭлектроннаяПочта.Представление;
			КонецЕсли;
			
			СтрокаПараметров.СписокВыбора.Добавить(ЭлектроннаяПочта.Представление);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПараметрыСвязиИдентификаторов;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ДанныеПриглашений - См. ВыполнитьДействиеСПриглашениямиВСервисе.ДанныеПриглашений
//  * МаркерыАвторизации - См. УчетныеЗаписиЭДОИнтеграцияОблака.МаркерыАвторизацииИзРасшифрованныхМаркеров
Функция НовыеПараметрыДействияСПриглашениями()
	Возврат Новый Структура("ДанныеПриглашений, МаркерыАвторизации", Новый Массив, Новый Массив);
КонецФункции

// Параметры:
//  ДанныеПриглашений - См. ВыполнитьДействиеСПриглашениямиВСервисе.ДанныеПриглашений
//  РасшифрованныеМаркеры - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
//  ВидОперации - Строка
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  * Значение - См. НовыеПараметрыДействияСПриглашениями
Функция ПараметрыДействияСПриглашениямиПоУчетнымЗаписямОблачногоЭДО(ДанныеПриглашений, РасшифрованныеМаркеры, ВидОперации, КонтекстДиагностики)
	
	ПараметрыДействияПоУчетнымЗаписям = Новый Соответствие;
	
	ИдентификаторыЭДО = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеПриглашений, "ИдентификаторОрганизации", Истина);
	
	УчетныеЗаписиОблачногоЭДО = РегистрыСведений.НастройкиОблачногоЭДО.УчетныеЗаписиПоИдентификаторамЭДО(ИдентификаторыЭДО);
	
	МаркерыАвторизации = УчетныеЗаписиЭДОИнтеграцияОблака.МаркерыАвторизацииИзРасшифрованныхМаркеров(
		РасшифрованныеМаркеры);
	МаркерыПоИдентификаторамЭДО = Новый Соответствие;
	Для Каждого МаркерАвторизации Из МаркерыАвторизации Цикл
		МаркерыПоИдентификаторамЭДО.Вставить(МаркерАвторизации.ИдентификаторУчетнойЗаписиЭДО, МаркерАвторизации);
	КонецЦикла;
	
	ОбработанныеМаркеры = Новый Массив; // Массив из Строка
	
	Для Каждого ДанныеПриглашения Из ДанныеПриглашений Цикл
		
		ИдентификаторОрганизации = ДанныеПриглашения.ИдентификаторОрганизации;
		УчетнаяЗаписьОблачногоЭДО = УчетныеЗаписиОблачногоЭДО[ИдентификаторОрганизации];
		Если УчетнаяЗаписьОблачногоЭДО = Неопределено Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Отсутствует учетная запись облачного ЭДО для идентификатора организации %1'"),
				ИдентификаторОрганизации);
			ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации, ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		МаркерАвторизации = МаркерыПоИдентификаторамЭДО[ИдентификаторОрганизации];
		Если МаркерАвторизации = Неопределено Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Отсутствует маркер авторизации для идентификатора организации %1'"),
				ИдентификаторОрганизации);
			ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации, ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		ПараметрыДействия = ПараметрыДействияПоУчетнымЗаписям[УчетнаяЗаписьОблачногоЭДО];
		Если ПараметрыДействия = Неопределено Тогда
			ПараметрыДействия = НовыеПараметрыДействияСПриглашениями();
			ПараметрыДействияПоУчетнымЗаписям.Вставить(УчетнаяЗаписьОблачногоЭДО, ПараметрыДействия);
		КонецЕсли;
		
		ПараметрыДействия.ДанныеПриглашений.Добавить(ДанныеПриглашения);
		
		Если ОбработанныеМаркеры.Найти(ИдентификаторОрганизации) = Неопределено Тогда
			ПараметрыДействия.МаркерыАвторизации.Добавить(МаркерАвторизации);
			ОбработанныеМаркеры.Добавить(ИдентификаторОрганизации);
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ПараметрыДействияПоУчетнымЗаписям;
	
КонецФункции

// Параметры:
//  Контрагенты - Массив Из ОпределяемыйТип.КонтрагентБЭД
// 
// Возвращаемое значение:
//  См. НовыйНаборДанныхКонтрагентовДляПриглашения
Функция ДанныеКонтрагентовДляПриглашения(Контрагенты)

	ДанныеКонтрагентов = НовыйНаборДанныхКонтрагентовДляПриглашения();
	
	Для Каждого Контрагент Из Контрагенты Цикл
		ДанныеЮрФизЛица = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(Контрагент);
		
		ДанныеКонтрагента = ДанныеКонтрагентов.Добавить();
		ДанныеКонтрагента.Ссылка = Контрагент;
		ДанныеКонтрагента.ИНН = ДанныеЮрФизЛица.ИНН;
		ДанныеКонтрагента.КПП = ДанныеЮрФизЛица.КПП;
		ДанныеКонтрагента.НаименованиеПолное = ДанныеЮрФизЛица.ПолноеНаименование;
		ДанныеКонтрагента.НаименованиеСокращенное = ДанныеЮрФизЛица.СокращенноеНаименование;
		ДанныеКонтрагента.ОГРН = ДанныеЮрФизЛица.ОГРН;
		ДанныеКонтрагента.ЮридическийАдрес = ДанныеЮрФизЛица.ЮридическийАдрес;
	КонецЦикла;
	
	Возврат ДанныеКонтрагентов;

КонецФункции

// Возвращаемое значение:
//  ТаблицаЗначений:
// * Ссылка - Неопределено,ОпределяемыйТип.КонтрагентБЭД
// * НаименованиеСокращенное - Строка
// * НаименованиеПолное - Строка
// * ИНН - Строка
// * КПП - Строка
// * ОГРН - Строка
// * ЮридическийАдрес - Строка
Функция НовыйНаборДанныхКонтрагентовДляПриглашения()
	ДанныеКонтрагентов = Новый ТаблицаЗначений();
	ДанныеКонтрагентов.Колонки.Добавить("Ссылка", Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип);
	ДанныеКонтрагентов.Колонки.Добавить("НаименованиеСокращенное", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ДанныеКонтрагентов.Колонки.Добавить("НаименованиеПолное", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ДанныеКонтрагентов.Колонки.Добавить("ИНН", ОбщегоНазначения.ОписаниеТипаСтрока(12));
	ДанныеКонтрагентов.Колонки.Добавить("КПП", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	ДанныеКонтрагентов.Колонки.Добавить("ОГРН", ОбщегоНазначения.ОписаниеТипаСтрока(15));
	ДанныеКонтрагентов.Колонки.Добавить("ЮридическийАдрес", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Возврат ДанныеКонтрагентов;
КонецФункции

// Параметры:
//  ДанныеКонтрагентов - См. ДанныеКонтрагентовДляПриглашения
//  КлючевыеРеквизитыКонтрагента - Структура:
//  * ИНН - Строка
//  * КПП - Строка
// 
// Возвращаемое значение:
//  Неопределено,ОпределяемыйТип.КонтрагентБЭД
Функция КонтрагентИзДанныхКонтрагентовДляПриглашения(ДанныеКонтрагентов, КлючевыеРеквизитыКонтрагента)
	НайденныеСтроки = ДанныеКонтрагентов.НайтиСтроки(КлючевыеРеквизитыКонтрагента);
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат НайденныеСтроки[0].Ссылка;
	Иначе
		Возврат Неопределено
	КонецЕсли;
КонецФункции

// Параметры:
//  ДанныеКонтрагентов - См. ДанныеКонтрагентовДляПриглашения
// 
// Возвращаемое значение:
//  Массив Из См. НовыеДанныеКонтрагентаДляПриглашенияВФорматеСервиса
Функция ДанныеКонтрагентовДляПриглашенияВФорматеСервиса(ДанныеКонтрагентов)

	ДанныеКонтрагентовВФорматеСервиса = Новый Массив; // Массив Из См. НовыеДанныеКонтрагентаДляПриглашенияВФорматеСервиса
	
	Для Каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
		ДанныеКонтрагентаВФорматеСервиса = НовыеДанныеКонтрагентаДляПриглашенияВФорматеСервиса();
		ЗаполнитьЗначенияСвойств(ДанныеКонтрагентаВФорматеСервиса, ДанныеКонтрагента);
		ДанныеКонтрагентовВФорматеСервиса.Добавить(ДанныеКонтрагентаВФорматеСервиса);
	КонецЦикла;
	
	Возврат ДанныеКонтрагентовВФорматеСервиса;

КонецФункции

// Возвращаемое значение:
//  Структура:
// * НаименованиеСокращенное - Строка
// * НаименованиеПолное - Строка
// * ИНН - Строка
// * КПП - Строка
// * ОГРН - Строка
// * ЮридическийАдрес - Строка
Функция НовыеДанныеКонтрагентаДляПриглашенияВФорматеСервиса()
	ДанныеКонтрагента = Новый Структура;
	ДанныеКонтрагента.Вставить("НаименованиеСокращенное", "");
	ДанныеКонтрагента.Вставить("НаименованиеПолное", "");
	ДанныеКонтрагента.Вставить("ИНН", "");
	ДанныеКонтрагента.Вставить("КПП", "");
	ДанныеКонтрагента.Вставить("ОГРН", "");
	ДанныеКонтрагента.Вставить("ЮридическийАдрес", "");
	Возврат ДанныеКонтрагента;
КонецФункции

// Параметры:
//  ИдентификаторыПриглашенийЭДО - см. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ДанныеСинхронизацииПриглашенийЭДО.ИдентификаторыПриглашенийЭДО
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаДанныеПриглашенийЭДО(ИдентификаторыПриглашенийЭДО)
	Возврат ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ДанныеСинхронизацииПриглашенийЭДО", ИдентификаторыПриглашенийЭДО);
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаДанныеПриглашенийЭДО()
	Возврат "ПолучитьПриглашенияПоКлючам";
КонецФункции

// Параметры:
//  ДанныеПриглашенийВФорматеСервиса - См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ДанныеСинхронизацииПриглашенийЭДО
//  РезультатДействий - см. ЭлектронныеДокументыЭДОИнтеграцияОблака.НовыйРезультатДействийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ОбработатьРезультатМетодаДанныеПриглашенийЭДО(ДанныеПриглашенийВФорматеСервиса,
	РезультатДействий, КонтекстДиагностики)
	
	Если Не ЗначениеЗаполнено(ДанныеПриглашенийВФорматеСервиса) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПриглашений = ДанныеСинхронизацииПриглашенийЭДОИзФорматаСервиса(ДанныеПриглашенийВФорматеСервиса);
	
	ОбновитьПриглашенияЭДОПоДаннымСинхронизацииПриЗагрузке(ДанныеПриглашений, РезультатДействий,
		КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  МеткиВремениПоИдентификаторамЭДО - см. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ПорцияДанныхСинхронизацииПриглашенийЭДОПоМеткамВремени.МеткиВремениПоИдентификаторамЭДО
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаПорцияДанныхПриглашенийЭДОПоМеткамВремени(МеткиВремениПоИдентификаторамЭДО)
	Возврат ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ПорцияДанныхСинхронизацииПриглашенийЭДОПоМеткамВремени",
		МеткиВремениПоИдентификаторамЭДО);
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаПорцияДанныхПриглашенийЭДОПоМеткамВремени()
	Возврат "ПолучитьПриглашенияПоМеткамВремени";
КонецФункции

// Параметры:
//  ПорцияДанных - см. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ПорцияДанныхСинхронизацииПриглашенийЭДОПоМеткамВремени
//  РезультатДействий - см. ОбработатьРезультатМетодаПоДействиямЭДО.РезультатДействий
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ПакетМетодовПовторно - см. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
Процедура ОбработатьРезультатМетодаПорцияДанныхПриглашенийЭДОПоМеткамВремени(
		ПорцияДанных, РезультатДействий, КонтекстДиагностики, ПакетМетодовПовторно)
	
	Если Не ЗначениеЗаполнено(ПорцияДанных) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСинхронизацииПриглашенийЭДО = ДанныеСинхронизацииПриглашенийЭДОИзФорматаСервиса(ПорцияДанных.НаборДанных);
	
	РезультатОбновления = ОбновитьПриглашенияЭДОПоДаннымСинхронизацииПриЗагрузке(
		ДанныеСинхронизацииПриглашенийЭДО, РезультатДействий, КонтекстДиагностики);
		
	МеткиВремениПоИдентификаторамЭДО = РезультатОбновления.МеткиВремениПоИдентификаторамЭДО;
	
	Для Каждого МеткаВремениПоИдентификаторуЭДО Из МеткиВремениПоИдентификаторамЭДО Цикл
		
		ИдентификаторЭДО = МеткаВремениПоИдентификаторуЭДО.Ключ;
		МеткаВремени = МеткаВремениПоИдентификаторуЭДО.Значение;
		ТипДанных = Перечисления.ТипыСинхронизацииОблачногоЭДО.ПриглашенияЭДО;
		
		Попытка
			РегистрыСведений.СостоянияСинхронизацииОблачногоЭДО.Записать(ИдентификаторЭДО, ТипДанных, МеткаВремени);
		Исключение
			ВидОперации = НСтр("ru = 'Синхронизация приглашений с облачным ЭДО'");
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось зафиксировать состояние синхронизации облачного ЭДО
				|для типа данных %1 по идентификатору ЭДО %2'"), ТипДанных, ИдентификаторЭДО);
			ТекстОшибкиПодробно = ТекстОшибки + Символы.ПС
				+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации,
				ТекстОшибки, ТекстОшибкиПодробно);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ПорцияДанных.ЭтоПоследний Тогда
		Возврат;
	КонецЕсли;
	
	МеткиВремениИдентификаторовЭДО =
		РегистрыСведений.СостоянияСинхронизацииОблачногоЭДО.МеткиВремениИдентификаторовЭДОПоРезультатуОбработки(
			РезультатОбновления);
	
	Если Не ЗначениеЗаполнено(МеткиВремениИдентификаторовЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеМетода = ОписаниеМетодаПорцияДанныхПриглашенийЭДОПоМеткамВремени(МеткиВремениИдентификаторовЭДО);
	ИдентификаторМетода = ИдентификаторМетодаПорцияДанныхПриглашенийЭДОПоМеткамВремени();
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодовПовторно, ОписаниеМетода, ИдентификаторМетода);
	
КонецПроцедуры

// Параметры:
//  НаборДанныхВФорматеСервиса - Массив из Структура:
//  * Идентификатор - Строка
//  * Состояние - Неопределено,Структура:
//    ** ИдентификаторЭДО - Строка 
//    ** МеткаВремени - Число
//    ** Удаление - Булево
//  * Описание - Неопределено,Структура:
//    ** Ключ - Строка
//    ** Тип - Строка
//    ** ИдентификаторОрганизации - Строка
//    ** ИдентификаторКонтрагента - Строка
//    ** ПолучательИНН - Строка
//    ** ПолучательКПП - Строка
//    ** ИдентификаторОператора - Строка
//    ** Организация - Структура:
//       *** ИНН - Строка
//       *** КПП - Строка
//    ** Контрагент - Структура:
//       *** Наименование - Строка
//       *** ИНН - Строка
//       *** КПП - Строка
//    ** EmailОрганизации - Строка
//    ** EmailКонтрагента - Строка
//    ** ТекстПриглашения - Строка
//    ** ПричинаОтказа - Строка
//    ** Статус - Строка
//    ** ДатаИзмененияСтатуса - См. ОбщегоНазначенияБЭД.ДатаВФорматеISO
//    ** ОписаниеОшибки - Строка
// 
// Возвращаемое значение:
//  Массив из см. ПриглашенияЭДОСлужебный.НовыеЗначенияСвойствПриглашенияДляОбновления
Функция ДанныеСинхронизацииПриглашенийЭДОИзФорматаСервиса(НаборДанныхВФорматеСервиса)
	
	НаборДанных = Новый Массив; // см. ДанныеСинхронизацииПриглашенийЭДОИзФорматаСервиса
	Если Не ЗначениеЗаполнено(НаборДанныхВФорматеСервиса) Тогда
		Возврат НаборДанных;
	КонецЕсли;
	
	РеквизитыОрганизаций = Новый Массив; // Массив из см. ИнтеграцияЭДО.НовыеКлючевыеРеквизитыУчастникаЭДО
	РеквизитыКонтрагентов = Новый Массив; // Массив из Структура
	
	Для Каждого ДанныеСинхронизацииВФорматеСервиса Из НаборДанныхВФорматеСервиса Цикл
		ПриглашениеВФорматеСервиса = ДанныеСинхронизацииВФорматеСервиса.Описание;
		Если Не ЗначениеЗаполнено(ПриглашениеВФорматеСервиса) Тогда
			Продолжить;
		КонецЕсли;
		ОбщегоНазначенияБЭД.ДобавитьЗаполненноеЗначение(РеквизитыОрганизаций, ПриглашениеВФорматеСервиса.Организация);
		ОбщегоНазначенияБЭД.ДобавитьЗаполненноеЗначение(РеквизитыКонтрагентов, ПриглашениеВФорматеСервиса.Контрагент);
	КонецЦикла;
	
	ОрганизацииПоРеквизитам = ИнтеграцияЭДО.ОрганизацииПоКлючевымРеквизитам(РеквизитыОрганизаций);
	КонтрагентыПоРеквизитам = НайтиСоздатьКонтрагентовЛокально(РеквизитыКонтрагентов);
	
	МетаданныеПеречисленияТипыПриглашений = Метаданные.Перечисления.ТипыПриглашений;
	МетаданныеПеречисленияСтатусыПриглашений = Метаданные.Перечисления.СтатусыПриглашений;
	
	Для Каждого ДанныеСинхронизацииВФорматеСервиса Из НаборДанныхВФорматеСервиса Цикл
		СостояниеСинхронизацииВФорматеСервиса = ДанныеСинхронизацииВФорматеСервиса.Состояние;
		ПриглашениеВФорматеСервиса = ДанныеСинхронизацииВФорматеСервиса.Описание;
		
		Если Не ЗначениеЗаполнено(СостояниеСинхронизацииВФорматеСервиса) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСинхронизации = НовыеДанныеСинхронизацииПриглашенияЭДО();
		НаборДанных.Добавить(ДанныеСинхронизации);
		
		СостояниеСинхронизации = ДанныеСинхронизации.Состояние;
		СостояниеСинхронизации.ИдентификаторОбъекта = ДанныеСинхронизацииВФорматеСервиса.Идентификатор;
		СостояниеСинхронизации.ИдентификаторЭДО = СостояниеСинхронизацииВФорматеСервиса.ИдентификаторЭДО;
		СостояниеСинхронизации.МеткаВремени = СостояниеСинхронизацииВФорматеСервиса.МеткаВремени;
		СостояниеСинхронизации.Удаление = СостояниеСинхронизацииВФорматеСервиса.Удаление;
		
		Если Не ЗначениеЗаполнено(ПриглашениеВФорматеСервиса) Тогда
			Продолжить;
		КонецЕсли;
		
		Приглашение = ПриглашенияЭДО.НовыеЗначенияСвойствПриглашенияДляОбновления();
		ДанныеСинхронизации.Описание = Приглашение;
		
		Приглашение.Ключ = ПриглашениеВФорматеСервиса.Ключ;
		Приглашение.Тип = ТипПриглашенияИзФорматаСервиса(ПриглашениеВФорматеСервиса.Тип,
			МетаданныеПеречисленияТипыПриглашений);
		Приглашение.ИдентификаторОрганизации = ПриглашениеВФорматеСервиса.ИдентификаторОрганизации;
		Приглашение.ИдентификаторКонтрагента = ПриглашениеВФорматеСервиса.ИдентификаторКонтрагента;
		Приглашение.EmailОрганизации = ПриглашениеВФорматеСервиса.EmailОрганизации;
		Приглашение.EmailКонтрагента = ПриглашениеВФорматеСервиса.EmailКонтрагента;
		Приглашение.ИНН = ПриглашениеВФорматеСервиса.ПолучательИНН;
		Приглашение.КПП = ПриглашениеВФорматеСервиса.ПолучательКПП;
		Приглашение.ИдентификаторОператора = ПриглашениеВФорматеСервиса.ИдентификаторОператора;
		Приглашение.ТекстПриглашения = ПриглашениеВФорматеСервиса.ТекстПриглашения;
		Приглашение.ОписаниеОшибки = ПриглашениеВФорматеСервиса.ОписаниеОшибки;
		Приглашение.Статус = СтатусИзФорматаСервиса(ПриглашениеВФорматеСервиса.Статус,
			МетаданныеПеречисленияСтатусыПриглашений);
		Приглашение.ДатаИзмененияСтатуса = ОбщегоНазначенияБЭД.ДатаИзФорматаISO(
			ПриглашениеВФорматеСервиса.ДатаИзмененияСтатуса);
		
		Приглашение.Организация = ИнтеграцияЭДО.ОрганизацияИзОтбораПоКлючевымРеквизитам(ОрганизацииПоРеквизитам,
			ПриглашениеВФорматеСервиса.Организация);
			
		ОтборДляПоискаКонтрагента = Новый Структура("ИНН, КПП", ПриглашениеВФорматеСервиса.Контрагент.ИНН,
			ПриглашениеВФорматеСервиса.Контрагент.КПП);
		НайденныеКонтрагенты = КонтрагентыПоРеквизитам.НайтиСтроки(ОтборДляПоискаКонтрагента);
		Если ЗначениеЗаполнено(НайденныеКонтрагенты) Тогда
			Приглашение.Контрагент = НайденныеКонтрагенты[0].Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаборДанных;
	
КонецФункции

// Параметры:
//  ДанныеКонтрагентов - Массив из Структура:
//  * Наименование - Строка
//  * ИНН - Строка
//  * КПП - Строка
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * Ссылка - ОпределяемыйТип.КонтрагентБЭД
//   * ИНН - Строка
//   * КПП - Строка
//
Функция НайтиСоздатьКонтрагентовЛокально(ДанныеКонтрагентов)
	
	Результат = Новый ТаблицаЗначений(); // См. НайтиСоздатьКонтрагентовЛокально
	Результат.Колонки.Добавить("Ссылка", Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип);
	Результат.Колонки.Добавить("ИНН", ОбщегоНазначения.ОписаниеТипаСтрока(12));
	Результат.Колонки.Добавить("КПП", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	
	КонтрагентыПоРеквизитам = ИнтеграцияЭДО.КонтрагентыПоКлючевымРеквизитам(ДанныеКонтрагентов);
	
	Для Каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеКонтрагента.ИНН) Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("ИНН, КПП", ДанныеКонтрагента.ИНН, ДанныеКонтрагента.КПП);
		
		ОбработанныеКонтрагенты = Результат.НайтиСтроки(Отбор);
		Если ОбработанныеКонтрагенты.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеСтроки = КонтрагентыПоРеквизитам.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() И ЗначениеЗаполнено(НайденныеСтроки[0].Ссылка) Тогда
			Контрагент = НайденныеСтроки[0].Ссылка;
		Иначе
			Контрагент = ИнтеграцияЭДО.СоздатьКонтрагента(ДанныеКонтрагента);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Ссылка = Контрагент;
			НоваяСтрока.ИНН = ДанныеКонтрагента.ИНН;
			НоваяСтрока.КПП = ДанныеКонтрагента.КПП;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Состояние - см. НовоеСостояниеСинхронизацииПриглашенияЭДО
//  * Описание - Неопределено
//             - см. ПриглашенияЭДО.НовыеЗначенияСвойствПриглашенияДляОбновления
Функция НовыеДанныеСинхронизацииПриглашенияЭДО()
	Данные = Новый Структура;
	Данные.Вставить("Состояние", НовоеСостояниеСинхронизацииПриглашенияЭДО());
	Данные.Вставить("Описание", Неопределено);
	Возврат Данные;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИдентификаторОбъекта - Строка
//  * ИдентификаторЭДО - Строка
//  * МеткаВремени - Число
//  * Удаление - Булево
Функция НовоеСостояниеСинхронизацииПриглашенияЭДО()
	Состояние = Новый Структура;
	Состояние.Вставить("ИдентификаторОбъекта", "");
	Состояние.Вставить("ИдентификаторЭДО", "");
	Состояние.Вставить("МеткаВремени", 0);
	Состояние.Вставить("Удаление", Ложь);
	Возврат Состояние;
КонецФункции

// Параметры:
//  СтатусВФорматеСервиса - Строка
//  МетаданныеПеречисления - ОбъектМетаданныхПеречисление
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыПриглашений
Функция СтатусИзФорматаСервиса(СтатусВФорматеСервиса, МетаданныеПеречисления = Неопределено)
	Если МетаданныеПеречисления = Неопределено Тогда
		МетаданныеПеречисления = Метаданные.Перечисления.СтатусыПриглашений;
	КонецЕсли;
	Возврат ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(СтатусВФорматеСервиса, МетаданныеПеречисления);
КонецФункции

// Параметры:
//  ТипПриглашенияВФорматеСервиса - Строка
//  МетаданныеПеречисления - ОбъектМетаданныхПеречисление
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыПриглашений
Функция ТипПриглашенияИзФорматаСервиса(ТипПриглашенияВФорматеСервиса, МетаданныеПеречисления)
	Если МетаданныеПеречисления = Неопределено Тогда
		МетаданныеПеречисления = Метаданные.Перечисления.ТипыПриглашений;
	КонецЕсли;
	Возврат ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(ТипПриглашенияВФорматеСервиса, МетаданныеПеречисления);
КонецФункции

// Параметры:
//  ДанныеСинхронизации - Массив из см. НовыеДанныеСинхронизацииПриглашенияЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. ОбновитьПриглашенияЭДОПоДаннымСинхронизации
Функция ОбновитьПриглашенияЭДОПоДаннымСинхронизацииПриЗагрузке(ДанныеСинхронизации, РезультатДействий, КонтекстДиагностики) Экспорт
	
	РезультатОбновления = ОбновитьПриглашенияЭДОПоДаннымСинхронизации(ДанныеСинхронизации, КонтекстДиагностики);
	
	КлючиПриглашений = РезультатОбновления.КлючиПриглашений;
	
	Итог = РезультатДействий.Итог;
	Обработано = Итог.ОбработаноПоДействиям[Перечисления.ДействияПоЭДО.ЗагрузитьПриглашения];
	Если Обработано = Неопределено Тогда
		Обработано = 0;
	КонецЕсли;
	
	Обработано = Обработано + КлючиПриглашений.Количество();
	
	Итог.ОбработаноПоДействиям.Вставить(Перечисления.ДействияПоЭДО.ЗагрузитьПриглашения, Обработано);
	
	Возврат РезультатОбновления;
	
КонецФункции

// Параметры:
//  ДанныеСинхронизацииПриглашенийЭДО - Массив из см. НовыеДанныеСинхронизацииПриглашенияЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Структура:
//  * КлючиПриглашений - Массив из Строка
//  * МеткиВремениПоИдентификаторамЭДО - Соответствие из КлючИЗначение:
//    ** Ключ - Строка
//    ** Значение - Число
//  * ФиксированныеМеткиВремени - Соответствие из КлючИЗначение:
//    ** Ключ - Строка - идентификатор ЭДО.
//    ** Значение - Булево
Функция ОбновитьПриглашенияЭДОПоДаннымСинхронизации(ДанныеСинхронизацииПриглашенийЭДО, КонтекстДиагностики)
	
	Результат = Новый Структура;
	Результат.Вставить("КлючиПриглашений", Новый Массив);
	Результат.Вставить("МеткиВремениПоИдентификаторамЭДО", Новый Соответствие);
	Результат.Вставить("ФиксированныеМеткиВремени", Новый Соответствие);
	
	Если Не ЗначениеЗаполнено(ДанныеСинхронизацииПриглашенийЭДО) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВидОперации = НСтр("ru = 'Синхронизация приглашений с облачным ЭДО'");
	КлючиПриглашений = Результат.КлючиПриглашений; // Массив из Строка
	МеткиВремениПоИдентификаторамЭДО = Результат.МеткиВремениПоИдентификаторамЭДО;
	ФиксированныеМеткиВремени = Результат.ФиксированныеМеткиВремени;
	ТипДанных = Перечисления.ТипыСинхронизацииОблачногоЭДО.ПриглашенияЭДО;
	
	Для Каждого ДанныеСинхронизацииПриглашенияЭДО Из ДанныеСинхронизацииПриглашенийЭДО Цикл
		
		СостояниеСинхронизации = ДанныеСинхронизацииПриглашенияЭДО.Состояние; // См. НовоеСостояниеСинхронизацииПриглашенияЭДО
		ИдентификаторЭДО = СостояниеСинхронизации.ИдентификаторЭДО;
		
		Попытка
			
			РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.ЗаписатьСостояние(
				ТипДанных, СостояниеСинхронизации);
			
			Если СостояниеСинхронизации.Удаление Тогда
				РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.УдалитьПоКлючу(
					СостояниеСинхронизации.ИдентификаторОбъекта, ИдентификаторЭДО);
			Иначе
				СвойстваПриглашения = ДанныеСинхронизацииПриглашенияЭДО.Описание; // См. ПриглашенияЭДО.НовыеЗначенияСвойствПриглашенияДляОбновления
				ПриглашенияЭДО.ОбновитьСвойстваПриглашения(СвойстваПриглашения);
			КонецЕсли;
			
			МеткаВремени = МеткиВремениПоИдентификаторамЭДО[ИдентификаторЭДО];
			Если ФиксированныеМеткиВремени[ИдентификаторЭДО] = Неопределено
				И (МеткаВремени = Неопределено
				Или МеткаВремени < СостояниеСинхронизации.МеткаВремени) Тогда
				МеткиВремениПоИдентификаторамЭДО.Вставить(ИдентификаторЭДО,
					СостояниеСинхронизации.МеткаВремени);
			КонецЕсли;
			
			КлючиПриглашений.Добавить(СостояниеСинхронизации.ИдентификаторОбъекта);
			
			Продолжить;
			
		Исключение
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось синхронизировать приглашение с идентификатором %1'"),
				СостояниеСинхронизации.ИдентификаторОбъекта);
			ТекстОшибкиПодробно = ТекстОшибки + Символы.ПС
				+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации,
				ТекстОшибки, ТекстОшибкиПодробно);
		КонецПопытки;
		
		Попытка
			РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.ЗаписатьОшибку(
				ТипДанных, ДанныеСинхронизацииПриглашенияЭДО.Состояние, ТекстОшибкиПодробно);
		Исключение
			ФиксированныеМеткиВремени.Вставить(ИдентификаторЭДО, Истина);
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось зафиксировать ошибку при синхронизации приглашения с идентификатором %1'"),
				СостояниеСинхронизации.ИдентификаторОбъекта);
			ТекстОшибкиПодробно = ТекстОшибки + Символы.ПС
				+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации,
				ТекстОшибки, ТекстОшибкиПодробно);
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти