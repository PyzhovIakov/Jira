///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ПоискКонтрагентов".
// ОбщийМодуль.ПоискКонтрагентовСлужебный.
//
// Служебные серверные методы для работы с сервисом поиска контрагентов.
//  - Запись в журнал регистрации;
//  - Взаимодействие с сервисом поиска контрагентов: формирование строки запроса, параметров запроса к сервису,
//    разбор ответа от сервиса.
//  - Описание типов данных, получаемых из сервиса.
//  - Получение служебных структур для параметров и возвращаемых значений методов.
//  - Обновление доступных критериев отбора и выводимых полей.
//  - Сохранение настроек в базу данных и их обратная загрузка.
//  - Загрузка данных для сохранения отчета в файл.
//  - Подбор данных из веб-справочника.
//  - Параметры работы с видами контрагентов.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область ЖурналРегистрации

// Добавляет запись в журнал регистрации.
//
// Параметры:
//  СообщениеОбОшибке - Строка - комментарий к записи журнала регистрации.
//  Ошибка - Булево - если Истина, будет установлен уровень журнала регистрации "Ошибка".
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(
		СообщениеОбОшибке,
		Ошибка = Истина) Экспорт
	
	УровеньЖР = ?(Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖР,
		,
		,
		Лев(СообщениеОбОшибке, 5120));
	
КонецПроцедуры

// Возвращает имя события для журнала регистрации, которое используется для записи событий поиска контрагентов.
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Поиск контрагентов'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции
	
#КонецОбласти

#Область ВидыКонтрагентов

// Возвращает структуру, содержащую все виды контрагентов, доступные для выбора.
//
// Возвращаемое значение:
//  Структура - виды контрагентов:
//    * ЮрЛицо - Строка - идентификатор Юр. лиц в веб-сервисе.
//    * ИП - Строка - идентификатор ИП в веб-сервисе.
//
Функция ВидыКонтрагентов() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить(
		"ЮрЛицо",
		ПоискКонтрагентовСлужебныйКлиентСервер.ВидКонтрагентаЮрЛицо());
	Результат.Вставить(
		"ИП",
		ПоискКонтрагентовСлужебныйКлиентСервер.ВидКонтрагентаИП());
	
	Возврат Результат;
	
КонецФункции

// Возвращает имя поля, в котором хранится ИНН контрагента в зависимости от его вида.
//
// Параметры:
//  ВидКонтрагента - Строка - идентификатор вида контрагента.
//
// Возвращаемое значение:
//  Строка - имя поля, в котором храниться ИНН, либо пустая строка, если указан недопустимый вид контрагента.
//
Функция ИмяПоляИННПоВидуКонтрагента(ВидКонтрагента)
	
	Если ВидКонтрагента = ПоискКонтрагентовСлужебныйКлиентСервер.ВидКонтрагентаЮрЛицо() Тогда
		Возврат "CORP_INN";
	ИначеЕсли ВидКонтрагента = ПоискКонтрагентовСлужебныйКлиентСервер.ВидКонтрагентаИП() Тогда
		Возврат "PERS_INN";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ВзаимодействиеСВебСервисом

// Определяет URL для вызова сервиса поиска контрагентов.
//
// Параметры:
//  Операция - Строка - путь к ресурсу.
//
// Возвращаемое значение:
//  Строка - URL операции.
//
Функция URLОперацииСервиса(Операция)
	
	Возврат АдресСервисаПоискаКонтрагентов()
		+ "/" + Операция;
	
КонецФункции

// Определяет адрес сервиса поиска контрагентов.
//
// Возвращаемое значение:
//  Строка - адрес подключения.
//
Функция АдресСервисаПоискаКонтрагентов()
	
	Возврат РаботаСКонтрагентами.БазовыйURLСервиса();
	
КонецФункции

// Формирует адрес страницы с описанием сервиса 1С:Контрагент.
//
// Возвращаемое значение:
//  Строка - адрес страницы.
//
Функция АдресСтраницыОписанияСервисаПоискаКонтрагентов()
	
	Возврат ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыПорталаПоддержки(
		"/applications/1C-Counteragent",
		0);
	
КонецФункции

// Возвращает логин и пароль Интернет-поддержки или тикет аутентификации.
//
// Параметры:
//  АдресСервиса - Строка - URL операции, для которой получаются данные аутентификации.
//  ИмяМетода - Строка - http метод: "GET", "POST" или "PUT".
//  ПользовательФреш - Булево - Истина, если для аутентификации необходимо использовать пару fresh/fresh.
//
// Возвращаемое значение:
//  Структура - структура, содержащая результаты определения параметров аутентификации пользователя Интернет-поддержки:
//    * Ошибка - Булево - Истина, если в процессе выполнения метода возникли ошибки.
//    * ВидОшибки - Строка - вид возникшей ошибки, либо пустая строка, если ошибок нет.
//    * ИнформацияОбОшибке - Строка - описание ошибки, либо пустая строка, если ошибок нет.
//    * ОписаниеОшибкиСервиса - Структура, Неопределено - подробное описание ошибки веб-сервиса, либо Неопределено,
//      если ошибок нет, либо ошибка не связана с запросом к веб-сервису.
//      См. НовыйОписаниеОшибкиСервиса.
//    * Аутентификация - Произвольный, Неопределено - данные аутентификации, если она выполнена успешно, либо
//      Неопределено в случае ошибок. См. ИнтернетПоддержкаПользователей.ЗаголовокBearerАутентификации и
//      ИнтернетПоддержкаПользователей.ЗаголовокБазовойСхемыАутентификации.
//
Функция ДанныеАутентификации(
		АдресСервиса,
		ИмяМетода,
		ПользовательФреш = Ложь)
	
	Результат = НовыйРезультатОперации();
	Результат.Вставить("Аутентификация", Неопределено);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		Если ПользовательФреш Тогда
			
			Результат.Аутентификация = ИнтернетПоддержкаПользователей.ЗаголовокБазовойСхемыАутентификации(
				"fresh",  // Пользователь
				"fresh"); // Пароль
			
		Иначе
			
			МодульИнтернетПоддержкаПользователейВМоделиСервиса =
			ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
			РезультатПолученияТикета =
				МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
					АдресСервиса + "#" + ИмяМетода);
			
			Если ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
				Результат.Аутентификация = ИнтернетПоддержкаПользователей.ЗаголовокБазовойСхемыАутентификации(
					"AUTH_TOKEN",
					РезультатПолученияТикета.Тикет);
			Иначе
				Результат.Аутентификация = ИнтернетПоддержкаПользователей.ЗаголовокБазовойСхемыАутентификации(
					"fresh",    // Пользователь
					"fresh");   // Пароль
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		Если ДанныеАутентификации = Неопределено Тогда
			Результат.Ошибка             = Истина;
			Результат.ВидОшибки          = "ИнтернетПоддержкаНеПодключена";
			Результат.ИнформацияОбОшибке =
				НСтр("ru = 'Необходимо подключить Интернет-поддержку пользователей.'");
				
			ЗаписатьИнформациюВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		Иначе
			Результат.Аутентификация = ИнтернетПоддержкаПользователей.ЗаголовокБазовойСхемыАутентификации(
				ДанныеАутентификации.Логин,
				ДанныеАутентификации.Пароль);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает сообщение пользователю по данным об ошибке, полученным от сервиса.
//
// Параметры:
//  РезультатОтправки - Структура - результат метода ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет.
//
// Возвращаемое значение:
//  см. НовыйОписаниеОшибкиСервиса
//
Функция ОписаниеОшибкиСервиса(РезультатОтправки)
	
	Результат = НовыйОписаниеОшибкиСервиса();
	
	ПравильныйРезультат = Новый Структура(
		"КодОшибки, КодСостояния, Содержимое");
	ЗаполнитьЗначенияСвойств(ПравильныйРезультат, РезультатОтправки);
	
	КодСостояния = ПравильныйРезультат.КодСостояния;
	
	ТипОшибки = ОпределитьТипОшибкиСервиса(
		КодСостояния,
		ПравильныйРезультат.Содержимое);

	Если КодСостояния = 200 Или КодСостояния = 201 Тогда
		Возврат Результат;
		
	ИначеЕсли КодСостояния = 400 Тогда
		
		Результат.ВидОшибки           = "НекорректныйЗапрос";
		Результат.ПредставлениеОшибки = НСтр("ru = 'Некорректный запрос.'");
		
		Если ТипОшибки = "BAD_REQUEST" Тогда
			Возврат Результат;
			
		ИначеЕсли ТипОшибки = "DYNAMIC_SEARCH_BAD_CRITERIA" Тогда
			Результат.Сообщение = НСтр("ru = 'Обновите критерии отбора и повторите попытку.'");
			Результат.СообщениеАдминистратор = Результат.Сообщение;
			
		ИначеЕсли ТипОшибки = "DYNAMIC_SEARCH_BAD_FIELD" Тогда
			Результат.Сообщение = НСтр("ru = 'Обновите список доступных полей и повторите попытку.'");
			Результат.СообщениеАдминистратор = Результат.Сообщение;
			
		ИначеЕсли ТипОшибки = "DYNAMIC_SEARCH_BAD_PAGE" Тогда
			Результат.Сообщение = НСтр("ru = 'Переход на несуществующую страницу. Обратитесь к администратору.'");
			Результат.СообщениеАдминистратор = НСтр("ru = 'Переход на несуществующую страницу. См. журнал регистрации.'");
			
		ИначеЕсли ТипОшибки = "DYNAMIC_SEARCH_PAGE_OUT_OF_LIMIT" Тогда
			Результат.Сообщение = НСтр("ru = 'Переход на указанную страницу не поддерживается. Уточните параметры поиска, чтобы сократить количество организаций в выводимом результате.'");
			Результат.СообщениеАдминистратор = Результат.Сообщение;
			
		Иначе
			Результат.ВидОшибки           = "НеизвестнаяОшибка";
			Результат.ПредставлениеОшибки = НСтр("ru = 'Неизвестная ошибка.'");
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли КодСостояния = 401
		И ТипОшибки = "UNAUTHORIZED_ERROR" Тогда
		
		Результат.ПредставлениеОшибки = НСтр("ru = 'Ошибка авторизации на Портале 1С:ИТС.'");
		Результат.ВидОшибки           = "ОшибкаАутентификации";
		
	ИначеЕсли КодСостояния = 402 Тогда
		
		Результат.ПредставлениеОшибки = НСтр("ru = 'Сервис не подключен (402).'");
		Результат.ВидОшибки           = "СервисНеПодключен";

	ИначеЕсли КодСостояния = 403
		И ТипОшибки = "ACCESS_DENIED_ERROR" Тогда
		
		Результат.ПредставлениеОшибки = НСтр("ru = 'Отсутствует доступ к сервису.'");
		Результат.ВидОшибки           = "ОтсутствуетДоступКСервису";
		
	ИначеЕсли КодСостояния = 404 Тогда
		
		Результат.ПредставлениеОшибки = НСтр("ru = 'Сервис недоступен (404).'");
		Результат.ВидОшибки           = "ОшибкаПодключения";
		
	ИначеЕсли КодСостояния = 429
		И ТипОшибки = "REQUEST_LIMIT_EXCEEDING_ERROR" Тогда
		
		Результат.ПредставлениеОшибки = НСтр("ru = 'Превышено количество попыток. Повторите попытку позже.'");
		Результат.ВидОшибки           = "ТребуетсяОплатаИлиПревышенЛимит";

	Иначе
		Результат.ВидОшибки           = "НеизвестнаяОшибка";
		Результат.ПредставлениеОшибки = НСтр("ru = 'Неизвестная ошибка.'");
		
	КонецЕсли;

	Если Результат.ВидОшибки <> "НеизвестнаяОшибка" Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Если не нашли конкретную ошибку
	КодОшибки = ПравильныйРезультат.КодОшибки;
	
	Если КодОшибки = "ConnectError" Тогда
		Результат.ВидОшибки           = "ОшибкаПодключения";
		Результат.ПредставлениеОшибки = НСтр("ru = 'Ошибка при подключении к серверу.'");
	
	ИначеЕсли КодОшибки = "ClientError" Тогда
		Результат.ВидОшибки           = "НекорректныйЗапрос";
		Результат.ПредставлениеОшибки = НСтр("ru = 'Некорректный запрос.'");
	
	ИначеЕсли КодОшибки = "LoginError" Тогда
		Результат.ВидОшибки           = "ОшибкаАутентификации";
		Результат.ПредставлениеОшибки = НСтр("ru = 'Ошибка аутентификации.'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует описание ошибки формирования отчета и помещает его в табличный документ.
//
// Параметры:
//  ДокументРезультат - ТабличныйДокумент - табличный документ, в который будет выведен результат.
//  РезультатФункции - Структура - результат выполнения функции. См. ПоискКонтрагентовСлужебный.НовыйРезультатОперации.
//
Процедура ЗаполнитьОписаниеОшибкиФормированияОтчета(
		ДокументРезультат,
		Знач РезультатФункции) Экспорт
	
	ОписаниеОшибкиСервиса = НовыйОписаниеОшибкиСервиса();
	Если ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(РезультатФункции.ОписаниеОшибкиСервиса) Тогда
		ЗаполнитьЗначенияСвойств(
			ОписаниеОшибкиСервиса,
			РезультатФункции.ОписаниеОшибкиСервиса);
	КонецЕсли;
	
	Макет = ПолучитьОбщийМакет("ОшибкиПоискКонтрагентов");
	
	ЗаголовокПоУмолчанию = НСтр("ru = 'Не удалось получить информацию.'");
	ВидОшибки            = РезультатФункции.ВидОшибки;
	
	Если ЗначениеЗаполнено(ОписаниеОшибкиСервиса.ПредставлениеОшибки) Тогда
		Заголовок = ОписаниеОшибкиСервиса.ПредставлениеОшибки;
	Иначе
		Заголовок = РезультатФункции.ИнформацияОбОшибке;
	КонецЕсли;
	
	ИмяОбласти     = "ОшибкаСервиса";
	ТекстОшибки    = "";
	ТекстСообщения = "";
	
	Если ВидОшибки = "НекорректныйЗапрос" Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка в параметрах запроса'");
		Если Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
			ТекстСообщения = ОписаниеОшибкиСервиса.СообщениеАдминистратор;
		Иначе
			ТекстСообщения = ОписаниеОшибкиСервиса.Сообщение;
		КонецЕсли;
		
	ИначеЕсли ВидОшибки = "ОшибкаАутентификации" Тогда
		
		ТекстОшибки = НСтр("ru = 'Ошибка аутентификации в сервисе поиска контрагентов'");
		Если Не Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
			ТекстСообщения = НСтр("ru = 'Обратитесь к администратору.'");
		КонецЕсли;
		
	ИначеЕсли ВидОшибки = "НедостаточноПрав" Тогда
		
		ТекстОшибки = НСтр("ru = 'Недостаточно прав для работы с сервисом поиска контрагентов.'");
		Если Не Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
			ТекстСообщения = НСтр("ru = 'Обратитесь к администратору.'");
		КонецЕсли;
		
	ИначеЕсли ВидОшибки = "СервисНеПодключен" Тогда
		Если Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
			ИмяОбласти = "СервисНеПодключенКупитьСервис";
		Иначе
			ИмяОбласти = "СервисНеПодключенПодробнее";
		КонецЕсли;

	ИначеЕсли ВидОшибки = "ОтсутствуетДоступКСервису" Тогда
		ТекстОшибки = НСтр("ru = 'Отсутствует доступ к сервису поиска контрагентов.'");
		Если Не Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
			ТекстСообщения = НСтр("ru = 'Обратитесь к администратору.'");
		КонецЕсли;
	
	ИначеЕсли ВидОшибки = "ТребуетсяОплатаИлиПревышенЛимит" Тогда
		ТекстОшибки = НСтр("ru = 'Исчерпан лимит запросов, требуется оплата, либо пользователь заблокирован'");
		
	ИначеЕсли ВидОшибки = "ИнтернетПоддержкаНеПодключена" Тогда
		Если Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
			ИмяОбласти = "ИППНеПодключена";
		Иначе
			ИмяОбласти = "ИППНеПодключенаОбычныйПользователь";
		КонецЕсли;
		
	ИначеЕсли ВидОшибки = "ОшибкаПодключения" Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка при подключении к сервису поиска контрагентов.'");
		Если Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
			ТекстСообщения = НСтр("ru = 'Возможные причины:
				|• Нет подключения к Интернету;
				|• На веб-узле возникли неполадки;
				|• Брандмауэр или другое промежуточное ПО (антивирусы и т.п.) блокируют
				|  попытки программы подключиться к Интернету;
				|• Подключение к Интернету выполняется через прокси-сервер, но параметры прокси-сервера не заданы в программе.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Обратитесь к администратору.'");
		КонецЕсли;

	ИначеЕсли ВидОшибки = "ВнутренняяОшибкаСервиса" Тогда
		ЗаголовокПоУмолчанию = НСтр("ru = 'Сервис временно недоступен.'");
		ТекстОшибки          = НСтр("ru = 'Сервис поиска контрагентов временно недоступен.'");
		ТекстСообщения       = НСтр("ru = 'Повторите попытку позже.'");
		
	Иначе
		ТекстОшибки = НСтр("ru = 'При подключении к сервису возникла ошибка.'");
		Если Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
			ТекстСообщения = НСтр("ru = 'Подробнее см. в журнале регистрации.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Обратитесь к администратору.'");
		КонецЕсли;
		
	КонецЕсли;
		
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	Если Заголовок = "" Тогда
		Заголовок = ЗаголовокПоУмолчанию;
	КонецЕсли;
	Область.Параметры.ЗаголовокСообщения = Заголовок;
	
	Если ИмяОбласти = "СервисНеПодключенПодробнее" Тогда
		Область.Параметры.АдресОписаниеСервисаПоискКонтрагентов = АдресСтраницыОписанияСервисаПоискаКонтрагентов();
		
	ИначеЕсли ИмяОбласти = "СервисНеПодключенКупитьСервис" Тогда
		Область.Параметры.ПереходКПокупкеСервиса = "ПереходКПокупкеСервиса";
		
	ИначеЕсли ИмяОбласти = "ИППНеПодключена" Тогда
		Область.Параметры.ПодключитьИнтернетПоддержкуПользователей =
			"ПодключитьИнтернетПоддержкуПользователей";
		
	ИначеЕсли ИмяОбласти = "ОшибкаСервиса" Тогда
		
		Область.Параметры.ТекстОшибки = ТекстОшибки;
		Область.Параметры.Сообщение   = ТекстСообщения;
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(Область);
	
КонецПроцедуры

// Производит чтение типа ошибки сервиса из тела ответа.
//
// Параметры:
//  КодСостояния - Число - код состояния http, который вернул сервер;
//  ТелоJSON - Строка - тело ответа сервиса.
//
// Возвращаемое значение:
//  Строка - тип ошибки сервиса.
//
Функция ОпределитьТипОшибкиСервиса(КодСостояния, ТелоJSON)
	
	// Ответ сервиса:
	//
	//{
	//  "errors": [
	//    {
	//      "timestamp",
	//      "status",
	//      "error",
	//      "exception",
	//      "type",
	//      "message",
	//      "path"
	//    }
	//  ]
	//}
	
	ТипОшибки = "";
	
	ОбъектИзСтроки = ТелоОтветаОбъектИзСтроки(ТелоJSON, Истина);
	
	Если ОбъектИзСтроки.Ошибка
		Или ТипЗнч(ОбъектИзСтроки.Результат) <> Тип("Соответствие") Тогда
		Возврат ТипОшибки;
	КонецЕсли;
	
	ДанныеОшибок = ОбъектИзСтроки.Результат["errors"];
	
	Если ТипЗнч(ДанныеОшибок) <> Тип("Массив") Тогда
		Возврат ТипОшибки;
	КонецЕсли;
	
	Для Каждого ДанныеОшибки Из ДанныеОшибок Цикл
		Если ТипЗнч(ДанныеОшибки) = Тип("Соответствие")
			И КодСостояния = ДанныеОшибки["status"] Тогда
			ТипОшибки = ДанныеОшибки["type"];
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	Возврат ТипОшибки;
	
КонецФункции

// Преобразует строку JSON из ответа сервиса в структуру или соответствие.
// Если в функцию будет передано значение, которое невозможно преобразовать, то будет сгенерировано исключение.
//
// Параметры:
//  ТелоОтвета - Строка - тело ответа веб-сервиса.
//  ВСоответствие - Булево - если Истина, то тело ответа будет преобразовано в Соответствие; если Ложь, то в Структуру.
//
// Возвращаемое значение:
//  Структура - результат загрузки, либо описание ошибки.
//    * См. НовыйОписаниеОшибкиСервиса.
//    * Результат - Соответствие, Структура, Неопределено - Результат преобразования, либо Неопределено, если в
//      процессе преобразования возникли ошибки
//
Функция ТелоОтветаОбъектИзСтроки(ТелоОтвета, ВСоответствие = Ложь)
	
	Результат = НовыйРезультатОперации();
	Результат.Вставить("Результат", Неопределено);
	
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
		Результат.Результат = ПрочитатьJSON(ЧтениеJSON, ВСоответствие);
		ЧтениеJSON.Закрыть();
		
	Исключение
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при разборе ответа сервиса:
					|%1'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),
			Истина);
			
		Результат.Ошибка             = Истина;
		Результат.ВидОшибки          = "ВнутренняяОшибкаСервиса";
		Результат.ИнформацияОбОшибке = НСтр("ru = 'Сервис вернул недопустимое значение.'");
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Получает данные для авторизации, дополняет параметры запроса заголовками, и выполняет запрос к веб-сервису.
// Если на каком-то из этапов возникает ошибка, то формирует информацию об ошибке.
//
// Параметры:
//  URLОперации - Строка - URL вызываемой операции.
//  ПараметрыЗапроса - Структура - уточняющие параметры запроса.
//    См. ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет
//  ТипСодержимого - Строка - тип содержимого для заголовка запроса.
//  ПользовательФреш - Булево - Истина, если для аутентификации необходимо использовать пару fresh/fresh.
//
// Возвращаемое значение:
//  Структура - результат выполнения запроса к сервису:
//    * Ошибка - Булево - Истина, если в процессе выполнения метода возникли ошибки.
//    * ВидОшибки - Строка - вид возникшей ошибки, либо пустая строка, если ошибок нет.
//    * ИнформацияОбОшибке - Строка - описание ошибки, либо пустая строка, если ошибок нет.
//    * ОписаниеОшибкиСервиса - Структура, Неопределено - подробное описание ошибки веб-сервиса, либо Неопределено,
//      если ошибок нет, либо ошибка не связана с запросом к веб-сервису.
//      См. НовыйОписаниеОшибкиСервиса.
//    * Содержимое - Строка, ДвоичныеДанные, Неопределено - тело ответа, если запрос выполнен успешно.
//
Функция ВыполнитьЗапросКСервису(
		URLОперации,
		Знач ПараметрыЗапроса,
		ПользовательФреш = Ложь)
	
	Результат = НовыйРезультатОперации();
	Результат.Вставить("Содержимое", Неопределено);
	
	Если Не ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(ПараметрыЗапроса) Тогда
		ПараметрыЗапроса = Новый Структура;
	КонецЕсли;
	
	Метод = Новый Структура("Метод", "GET");
	ЗаполнитьЗначенияСвойств(Метод, ПараметрыЗапроса);
	
	ДанныеАутентификации = ДанныеАутентификации(URLОперации, Метод.Метод, ПользовательФреш);
	
	Если ДанныеАутентификации.Ошибка Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, ДанныеАутентификации);
		ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ИнформацияОбОшибке,
			Истина);
		
		Возврат Результат;
		
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type",     "application/json");
	Заголовки.Вставить("Authorization",    ДанныеАутентификации.Аутентификация);
	Заголовки.Вставить("X-Correlation-ID", Строка(Новый УникальныйИдентификатор));
	
	ПараметрыЗапроса.Вставить("Заголовки" , Заголовки);
	
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		"",
		"",
		ПараметрыЗапроса);
		
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		ОписаниеОшибки = ОписаниеОшибкиСервиса(РезультатОтправки);
		
		Результат.Ошибка                = Истина;
		Результат.ВидОшибки             = ОписаниеОшибки.ВидОшибки;
		Результат.ИнформацияОбОшибке    = ОписаниеОшибки.ПредставлениеОшибки;
		Результат.ОписаниеОшибкиСервиса = ОписаниеОшибки;
		
		ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию из сервиса.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При получении информации сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Результат.ИнформацияОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ЗаписатьИнформациюВЖурналРегистрации(ИнформацияОбОшибке, Истина);
			
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.Содержимое = РезультатОтправки.Содержимое;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ТипыДанных

// Возвращает информацию о доступных в текущей версии типах значений полей и критериев отбора.
//
// Возвращаемое значение:
//  Структура - идентификаторы типов данных из веб-сервиса:
//    * Строка - Строка - идентификатор типа данных Строка.
//    * Дата - Строка - идентификатор типа данных Дата.
//    * Булево - Строка - идентификатор типа данных Булево.
//    * Число - Строка - идентификатор типа данных Число.
//
Функция ТипыЗначений() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Строка", "TEXT");
	Результат.Вставить("Дата",   "DATE");
	Результат.Вставить("Булево", "BOOL");
	Результат.Вставить("Число",  "NUMBER");
	
	Возврат Результат;
	
КонецФункции

// Возвращает информацию о всех типах обработки полей.
//
// Возвращаемое значение:
//  Структура - типы обработки:
//    * ПустаяСтрока - Строка - всегда пустая строка.
//    * Неопределено - Неопределено - всегда Неопределено.
//    * ОКВЭД - Строка - идентификатор типа обработки для критериев и полей, содержащих ОКВЭД.
//    * ПоУмолчанию - Строка - идентификатор типа обработки для критериев и полей, обрабатываемых по умолчанию.
//
Функция ТипыОбработкиПолей() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПустаяСтрока", "");
	Результат.Вставить("Неопределено", Неопределено);
	Результат.Вставить("ОКВЭД",        "OKVED");
	Результат.Вставить("ПоУмолчанию",  "DEFAULT");
	
	Возврат Результат;
	
КонецФункции

// Возвращает связь идентификатора типа значения из веб-сервиса и описания соответствующего типа.
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение- связь идентификатора и описания типа:
//    * Ключ - Строка - идентификатор типа данных в веб-сервисе.
//    * Значение - ОписаниеТипов - описание типа данных.
//
Функция ОписаниеТиповПоИдентификатору() Экспорт
	
	Результат = Новый Соответствие;
	
	ТипыЗначений = ТипыЗначений();
	Результат.Вставить(ТипыЗначений.Строка, Новый ОписаниеТипов("Строка"));
	Результат.Вставить(ТипыЗначений.Булево, Новый ОписаниеТипов("Булево"));
	Результат.Вставить(ТипыЗначений.Число,  Новый ОписаниеТипов("Число"));
	Результат.Вставить(ТипыЗначений.Дата,
		Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	Возврат Результат;
	
КонецФункции

// Возвращает информацию о всех доступных в текущей версии типах обработки полей.
//
// Возвращаемое значение:
//  Массив из Произвольный - доступные типы обработки.
//    См. ТипыОбработкиПолей.
//
Функция ДоступныеТипыОбработкиПолей()
	
	Результат = Новый Массив;
	
	Для Каждого КлючЗначение Из ТипыОбработкиПолей() Цикл
		Результат.Добавить(КлючЗначение.Значение);
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

// Возвращает информацию о всех доступных в текущей версии типах обработки полей.
//
// Возвращаемое значение:
//  Массив из Строка - доступные типы обработки.
//
Функция ДоступныеТипыДанных()

	Результат = Новый Массив;
	
	Для Каждого КлючЗначение Из ТипыЗначений() Цикл
		Результат.Добавить(КлючЗначение.Значение);
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаСтруктур

// Возвращает структуру, содержащую описание типового результата выполнения метода.
//
// Возвращаемое значение:
//  Структура - результат выполнения:
//    * Ошибка - Булево - Истина, если в процессе выполнения метода возникли ошибки.
//    * ВидОшибки - Строка - вид возникшей ошибки, либо пустая строка, если ошибок нет.
//    * ИнформацияОбОшибке - Строка - описание ошибки, либо пустая строка, если ошибок нет.
//    * ОписаниеОшибкиСервиса - Структура, Неопределено - подробное описание ошибки веб-сервиса, либо Неопределено,
//      если ошибок нет, либо ошибка не связана с запросом к веб-сервису.
//      См. НовыйОписаниеОшибкиСервиса.
//
Функция НовыйРезультатОперации() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка",                Ложь);
	Результат.Вставить("ВидОшибки",             "");
	Результат.Вставить("ИнформацияОбОшибке",    "");
	Результат.Вставить("ОписаниеОшибкиСервиса", Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, содержащую описание ошибки ответа веб-сервиса.
//
// Возвращаемое значение:
//  Структура - подробное описание ошибки:
//    * ВидОшибки - Строка - вид возникшей ошибки, либо пустая строка, если не удалось сопоставить ошибку веб-сервиса с
//      типовыми значениями.
//    * ПредставлениеОшибки - Строка - строковое представление ошибки.
//    * Сообщение - Строка - дополнительное пояснение к ошибке для пользователя с обычными правами.
//    * СообщениеАдминистратор - Строка - дополнительное пояснение к ошибке для пользователя с полными правами.
//
Функция НовыйОписаниеОшибкиСервиса()
	
	Результат = Новый Структура;
	Результат.Вставить("ВидОшибки",              "");
	Результат.Вставить("ПредставлениеОшибки",    "");
	Результат.Вставить(
		"Сообщение",
		НСтр("ru = 'Обратитесь к администратору.'"));
	Результат.Вставить(
		"СообщениеАдминистратор",
		НСтр("ru = 'См. журнал регистрации'"));
		
	Возврат Результат;
	
КонецФункции

// Возвращает пустую структуру с описанием критерия отбора из веб-сервиса. Используется загрузке значений и для
// сохранения в базу.
//
// Возвращаемое значение:
//  Структура - описание критерия:
//    * Идентификатор - Строка - идентификатор критерия отбора.
//    * Представление - Строка - представление критерия отбора, выводимое пользователю.
//    * Порядок - Число - порядок критерия в общем списке.
//    * ТипЗначения - Строка - Тип значения критерия.
//    * ТипОбработки - Строка - Тип обработки критерия.
//    * ВариантыСравнения - Строка - допустимые варианты сравнения, перечисленные через ";".
//    * ВыборИзСправочника - Булево - Истина, если значение критерия должно выбираться из веб-справочника.
//
Функция НовыйПолеОтбора() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор",      "");
	Результат.Вставить("Представление",      "");
	Результат.Вставить("Порядок",            0);
	Результат.Вставить("ТипЗначения",        "");
	Результат.Вставить("ТипОбработки",       "");
	Результат.Вставить("ВариантыСравнения",  "");
	Результат.Вставить("ВыборИзСправочника", Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДоступныеПоляИОтборы

// Выполняет обновление доступных критериев отбора и выводимых полей.
//
// Возвращаемое значение:
//  Структура - новое описание доступных критериев отбора и полей, а так же описание возникших при обновлении ошибок:
//    * Ошибка - Булево - Истина, если в процессе выполнения метода возникли ошибки.
//    * ВидОшибки - Строка - вид возникшей ошибки, либо пустая строка, если ошибок нет.
//    * ИнформацияОбОшибке - Строка - описание ошибки, либо пустая строка, если ошибок нет.
//    * ОписаниеОшибкиСервиса - Структура, Неопределено - подробное описание ошибки веб-сервиса, либо Неопределено,
//      если ошибок нет, либо ошибка не связана с запросом к веб-сервису.
//      См. НовыйОписаниеОшибкиСервиса.
//    * ДоступныеОтборы - Соответствие Из КлючИЗначение - содержит описание доступных критериев отбора:
//        ** Ключ - Строка - вид контрагента.
//        ** Значение - Массив Из Структура - см. ДоступныеОтборы.Отбор
//    * ДоступныеПоля - Соответствие Из КлючИЗначение - содержит описание доступных для вывода полей:
//        ** Ключ - Строка - вид контрагента.
//        ** Значение - Соответствие Из КлючИЗначение - см. ДоступныеПоля.Поля.
//    * КритическаяОшибка - Булево - Истина, если при обновлении возникли ошибки, из-за которых не удалось обновить ни
//      одного параметра ни по одному виду контрагента. Ложь, если выполнено обновление хотя бы одного параметра.
//    * ПредставлениеОшибки - Неопределено, ТабличныйДокумент - Представление критической ошибки в виде табличного
//      документа, либо Неопределено, если не было критических ошибок.
//
Функция ОбновитьДоступныеОтборыИПоля() Экспорт
	
	Результат = НовыйРезультатОперации();
	Результат.Вставить("ДоступныеОтборы",     Новый Соответствие);
	Результат.Вставить("ДоступныеПоля",       Новый Соответствие);
	Результат.Вставить("КритическаяОшибка",   Ложь);
	Результат.Вставить("ПредставлениеОшибки", Неопределено);
	
	Ошибки = Новый Массив;
	РезультатыФункции = Новый Соответствие;

	ВидыКонтрагентов = ВидыКонтрагентов();
	ПараметрыДляСохранения = НовыйСохраняемыеДоступныеОтборыИПоля();
	ПараметрыПроверкиТипаОбработки = НовыйПараметрыПроверкиТипаОбработки();
	
	Для Каждого КлючЗначение Из ВидыКонтрагентов Цикл
		
		ТекущийВидКонтрагента = КлючЗначение.Значение;
		ПараметрыДляСохранения.ДоступныеОтборы.Вставить(
			ТекущийВидКонтрагента,
			Новый Массив);
		ПараметрыДляСохранения.ДоступныеПоля.Вставить(
			ТекущийВидКонтрагента,
			Новый Соответствие);
		
		ПредставлениеВидаКонтрагента = ПоискКонтрагентовСлужебныйКлиентСервер.ПредставлениеКонтрагентаПоВиду(
			ТекущийВидКонтрагента);
		
		// Доступные поля
		ЗапросДоступныхПолей = ДоступныеПоля(
			ТекущийВидКонтрагента,
			ПараметрыПроверкиТипаОбработки);
		Если ЗапросДоступныхПолей.Ошибка Тогда
			
			Ошибки.Добавить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось получить информацию о доступных полях (%1)'"),
					ПредставлениеВидаКонтрагента));
			
			РезультатыФункции.Вставить(
				ЗапросДоступныхПолей.ВидОшибки,
				ЗапросДоступныхПолей);
			
		Иначе
			Результат.ДоступныеПоля.Вставить(
				ТекущийВидКонтрагента,
				ЗапросДоступныхПолей.Поля);
				
			ПараметрыДляСохранения.ДоступныеПоля.Вставить(
				ТекущийВидКонтрагента,
				ЗапросДоступныхПолей.Поля);
		КонецЕсли;
		
		// Доступные отборы
		ЗапросДоступныхОтборов = ДоступныеОтборы(
			ТекущийВидКонтрагента,
			ПараметрыПроверкиТипаОбработки);
		Если ЗапросДоступныхОтборов.Ошибка Тогда
			
			Ошибки.Добавить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось получить информацию о доступных критериях отбора (%1)'"),
					ПредставлениеВидаКонтрагента));
			
			РезультатыФункции.Вставить(ЗапросДоступныхОтборов.ВидОшибки, ЗапросДоступныхПолей);
			
		Иначе
			Результат.ДоступныеОтборы.Вставить(
				ТекущийВидКонтрагента,
				ЗапросДоступныхОтборов.Отбор);
			ПараметрыДляСохранения.ДоступныеОтборы.Вставить(
				ТекущийВидКонтрагента,
				ЗапросДоступныхОтборов.Отбор);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Ошибки.Количество() = 0 Тогда
		Попытка
			ЗаписатьДоступныеОтборыИПоля(ПараметрыДляСохранения);
		Исключение
			Ошибки.Добавить(
				НСтр("ru = 'Информация успешно получена из сервиса, но возникли ошибки при ее записи в базу.'"));
		КонецПопытки;
	КонецЕсли;
	
	Результат.ИнформацияОбОшибке = СтрСоединить(Ошибки, Символы.ПС);
	Результат.Ошибка = Ошибки.Количество() > 0;
	
	Если Результат.ДоступныеОтборы.Количество() = 0
		И Результат.ДоступныеПоля.Количество() = 0
		И РезультатыФункции.Количество() <> 0 Тогда
		
		Результат.КритическаяОшибка = Истина;
		ПредставлениеОшибки = Новый ТабличныйДокумент;
		
		Для Каждого КлючЗначение Из РезультатыФункции Цикл
			ЗаполнитьОписаниеОшибкиФормированияОтчета(
				ПредставлениеОшибки,
				КлючЗначение.Значение);
		КонецЦикла;
			
		Результат.ПредставлениеОшибки = ПредставлениеОшибки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет обновление доступных для вывода полей по указанному виду контрагента.
//
// Параметры:
//  ВидКонтрагента - Строка - идентификатор вида контрагента, для которого выполняется получение доступных полей.
//  ПараметрыПроверкиТипаОбработки - см. НовыйПараметрыПроверкиТипаОбработки.
//
// Возвращаемое значение:
//  Структура - описание доступных для вывода полей, а так же описание возникших при обновлении ошибок:
//    * Ошибка - Булево - Истина, если в процессе выполнения метода возникли ошибки.
//    * ВидОшибки - Строка - вид возникшей ошибки, либо пустая строка, если ошибок нет.
//    * ИнформацияОбОшибке - Строка - описание ошибки, либо пустая строка, если ошибок нет.
//    * ОписаниеОшибкиСервиса - Структура, Неопределено - подробное описание ошибки веб-сервиса, либо Неопределено,
//      если ошибок нет, либо ошибка не связана с запросом к веб-сервису.
//      См. НовыйОписаниеОшибкиСервиса.
//    * Поля - Соответствие Из КлючИЗначение - описание поля:
//        ** Ключ - Строка - идентификатор поля.
//        ** Значение - Структура - описание поля.
//           см. ПоискКонтрагентовСлужебныйКлиентСервер.НовыйДоступноеПоле
//
Функция ДоступныеПоля(ВидКонтрагента, ПараметрыПроверкиТипаОбработки)
	
	Результат = НовыйРезультатОперации();
	Результат.Вставить("Поля", Новый Соответствие);
	
	URLОперации = URLОперацииСервиса(
		"rest/dynamic/v1/available/fields/" + НРег(ВидКонтрагента));
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Метод",        "GET");
	ПараметрыЗапроса.Вставить("ФорматОтвета", 1);
	
	РезультатОтправки = ВыполнитьЗапросКСервису(
		URLОперации,
		ПараметрыЗапроса,
		Истина);
	
	Если РезультатОтправки.Ошибка Тогда
		
		ЗаполнитьЗначенияСвойств(
			Результат,
			РезультатОтправки);
		ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ИнформацияОбОшибке,
			Истина);
		
		Возврат Результат;
		
	КонецЕсли;
	
	ОтветСервиса = ТелоОтветаОбъектИзСтроки(
		РезультатОтправки.Содержимое);
		
	Если ОтветСервиса.Ошибка
		Или ТипЗнч(ОтветСервиса.Результат) <> Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Результат, ОтветСервиса);
		Возврат Результат;
	КонецЕсли;
		
	// Формат ответа сервиса
	// {
	//   "availableFields": [
	//     {
	//       "id": "string",
	//       "name": "string"
	//       "dataType": "string"
	//       "processingType": "DEFAULT"
	//     }
	//   ]
	// }
	
	Эталон = Новый Структура("availableFields", Неопределено);
	ЗаполнитьЗначенияСвойств(Эталон, ОтветСервиса.Результат);
	
	Если ТипЗнч(Эталон.availableFields) <> Тип("Массив") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ОписаниеПоля Из Эталон.availableFields Цикл
		
		Если Не ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(ОписаниеПоля) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭталонноеПоле = Новый Структура;
		ЭталонноеПоле.Вставить("id",             "");
		ЭталонноеПоле.Вставить("name",           "");
		ЭталонноеПоле.Вставить("dataType",       "");
		ЭталонноеПоле.Вставить("processingType", "");
		
		ЗаполнитьЗначенияСвойств(ЭталонноеПоле, ОписаниеПоля);
		
		Если Не ЭтоДоступноеДляОбработкиПоле(ЭталонноеПоле, ПараметрыПроверкиТипаОбработки) Тогда
			Продолжить;
		КонецЕсли;
		
		ДоступноеПоле = ПоискКонтрагентовСлужебныйКлиентСервер.НовыйДоступноеПоле();
		ДоступноеПоле.Наименование = ЭталонноеПоле.name;
		ДоступноеПоле.ТипОбработки = ЭталонноеПоле.processingType;
		ДоступноеПоле.ТипЗначения  = ЭталонноеПоле.dataType;
		Результат.Поля.Вставить(ОписаниеПоля.id, ДоступноеПоле);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выполняет обновление доступных критериев отбора по указанному виду контрагента.
//
// Параметры:
//  ВидКонтрагента - Строка - идентификатор вида контрагента, для которого выполняется получение критериев отбора.
//  ПараметрыПроверкиТипаОбработки - см. НовыйПараметрыПроверкиТипаОбработки.
//
// Возвращаемое значение:
//  Структура - описание доступных критериев отбора, а так же описание возникших при обновлении ошибок:
//    * Ошибка - Булево - Истина, если в процессе выполнения метода возникли ошибки.
//    * ВидОшибки - Строка - вид возникшей ошибки, либо пустая строка, если ошибок нет.
//    * ИнформацияОбОшибке - Строка - описание ошибки, либо пустая строка, если ошибок нет.
//    * ОписаниеОшибкиСервиса - Структура, Неопределено - подробное описание ошибки веб-сервиса, либо Неопределено,
//      если ошибок нет, либо ошибка не связана с запросом к веб-сервису.
//      См. НовыйОписаниеОшибкиСервиса.
//    * Отбор - Массив из Структура - описание критерия отбора. См. НовыйПолеОтбора.
//
Функция ДоступныеОтборы(ВидКонтрагента, ПараметрыПроверкиТипаОбработки)
	
	Результат = НовыйРезультатОперации();
	Результат.Вставить("Отбор", Новый Массив);
	
	URLОперации = URLОперацииСервиса(
		"rest/dynamic/v1/available/criterias/" + НРег(ВидКонтрагента));
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Метод",        "GET");
	ПараметрыЗапроса.Вставить("ФорматОтвета", 1);
	
	РезультатОтправки = ВыполнитьЗапросКСервису(
		URLОперации,
		ПараметрыЗапроса,
		Истина);
	
	Если РезультатОтправки.Ошибка Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, РезультатОтправки);
		ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ИнформацияОбОшибке,
			Истина);
		
		Возврат Результат;
		
	КонецЕсли;
	
	ОтветСервиса = ТелоОтветаОбъектИзСтроки(РезультатОтправки.Содержимое);
	
	Если ОтветСервиса.Ошибка
		Или ТипЗнч(ОтветСервиса.Результат) <> Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Результат, ОтветСервиса);
		Возврат Результат;
	КонецЕсли;
	
	// Формат ответа сервиса
	// {
	//   "availableCriterias": [
	//     {
	//       "comparisonTypes": [
	//         "EQUALS"
	//       ],
	//       "hasCatalog": true,
	//       "id": "string",
	//       "name": "string",
	//       "order": 0,
	//       "dataType": "TEXT"
	//       "processingType": "DEFAULT"
	//     }
	//   ]
	// }
	
	Эталон = Новый Структура("availableCriterias");
	ЗаполнитьЗначенияСвойств(Эталон, ОтветСервиса.Результат);
	
	Если ТипЗнч(Эталон.availableCriterias) <> Тип("Массив") Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеОтбора = НовыйПолеОтбора();
	ТаблицаОтборов = Новый ТаблицаЗначений;
	
	Для Каждого КлючЗначение Из ОписаниеОтбора Цикл
		ТаблицаОтборов.Колонки.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Для Каждого ОписаниеПоля Из Эталон.availableCriterias Цикл
		
		Если Не ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(ОписаниеПоля) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭталонноеПоле = Новый Структура;
		ЭталонноеПоле.Вставить("order",           0);
		ЭталонноеПоле.Вставить("comparisonTypes", "");
		ЭталонноеПоле.Вставить("hasCatalog",      Ложь);
		ЭталонноеПоле.Вставить("id",              "");
		ЭталонноеПоле.Вставить("name",            "");
		ЭталонноеПоле.Вставить("dataType",        "");
		ЭталонноеПоле.Вставить("processingType",  "");
		
		ЗаполнитьЗначенияСвойств(ЭталонноеПоле, ОписаниеПоля);
		
		Если Не ЭтоДоступноеДляОбработкиПоле(ЭталонноеПоле, ПараметрыПроверкиТипаОбработки) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаОтборов.Добавить();
		НоваяСтрока.Идентификатор      = ЭталонноеПоле.id;
		НоваяСтрока.Представление      = ЭталонноеПоле.name;
		НоваяСтрока.Порядок            = ЭталонноеПоле.order;
		НоваяСтрока.ТипЗначения        = ЭталонноеПоле.dataType;
		НоваяСтрока.ТипОбработки       = ЭталонноеПоле.processingType;
		НоваяСтрока.ВариантыСравнения  = ЭталонноеПоле.comparisonTypes;
		НоваяСтрока.ВыборИзСправочника = ЭталонноеПоле.hasCatalog;
		
	КонецЦикла;
	
	ТаблицаОтборов.Сортировать("Порядок");
	
	Для каждого Стр Из ТаблицаОтборов Цикл
		
		ОписаниеОтбора = НовыйПолеОтбора();
		ЗаполнитьЗначенияСвойств(ОписаниеОтбора, Стр);
		Результат.Отбор.Добавить(ОписаниеОтбора);
	
	КонецЦикла;
	
	ТаблицаОтборов.Очистить();
	
	Возврат Результат;
	
КонецФункции

// Возвращает служебные параметры, необходимые для проверки возможности обработки поля или критерия отбора.
//
// Возвращаемое значение:
//  Структура - параметры проверки:
//    * ТипыОбработкиПолей - Структура - все типы обработки. См. ТипыОбработкиПолей;
//    * ДоступныеТипыОбработки - Массив Из Произвольный- доступные в текущей версии типы обработки.
//      См. ДоступныеТипыОбработкиПолей.
//    * ТипыЗначений - Массив Из Строка - идентификаторы типов данных из веб-сервиса.
//
Функция НовыйПараметрыПроверкиТипаОбработки()
	
	Результат = Новый Структура;
	Результат.Вставить("ДоступныеТипыОбработки", ДоступныеТипыОбработкиПолей());
	Результат.Вставить("ТипыОбработкиПолей",     ТипыОбработкиПолей());
	Результат.Вставить("ТипыЗначений",           ДоступныеТипыДанных());
	
	Возврат Результат;
	
КонецФункции

// Выполняет проверку возможности обработки поля в текущей версии.
//
// Параметры:
//  ОписаниеПоля - Структура - Описание поля из веб-сервиса. Должна содержать следующие поля:
//    * id - Строка - идентификатор поля.
//    * dataType - Строка - идентификатор типа значения поля.
//    * processingType - Строка - идентификатор типа обработки поля.
//  ПараметрыПроверки - см. НовыйПараметрыПроверкиТипаОбработки
//
// Возвращаемое значение:
//  Булево - Истина, если поле доступно для обработки в текущей версии, Ложь в противном случае.
//
Функция ЭтоДоступноеДляОбработкиПоле(ОписаниеПоля, ПараметрыПроверки)
	
	Если Не ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(ОписаниеПоля) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОписаниеПоля.id) Тогда
		Возврат Ложь;
	КонецЕсли;
			
	Если ПараметрыПроверки.ДоступныеТипыОбработки.Найти(ОписаниеПоля.processingType) = Неопределено Тогда
		// Пропускаем поле с недоступным типом обработки.
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыПроверки.ТипыЗначений.Найти(ОписаниеПоля.dataType) = Неопределено Тогда
		// Пропускаем поле с недоступным типом данных.
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает представление доступного поля на основе его описания.
// Если в параметр ОписаниеПоля передано значение, отличное от структуры (фиксированной структуры), либо состав его
// свойств отличается от правильного описания доступного поля, то возвращается пустая строка.
//
// Параметры:
//  ОписаниеПоля - Структура, ФиксированнаяСтруктура - описание доступного поля, из которого нужно получить
//    представление. См. ПоискКонтрагентовСлужебныйКлиентСервер.НовыйДоступноеПоле.
//
// Возвращаемое значение:
//  Строка - представление поля.
//
Функция ПредставлениеДоступногоПоля(ОписаниеПоля) Экспорт
	
	Если Не ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(ОписаниеПоля) Тогда
		Возврат "";
	КонецЕсли;
	
	ДоступноеПоле = ПоискКонтрагентовСлужебныйКлиентСервер.НовыйДоступноеПоле();
	ЗаполнитьЗначенияСвойств(
		ДоступноеПоле,
		ОписаниеПоля);
		
	Возврат ДоступноеПоле.Наименование;
	
КонецФункции

#КонецОбласти

#Область СохранениеЗагрузкаНастроек

// Формирует структуру для сохранения или загрузки доступных критериев отбора и полей в базу.
//
// Возвращаемое значение:
//  Структура - описание доступных критерием и полей:
//    * ДатаОбновления - Дата - дата последней загрузки описания критериев отбора и полей из веб-сервиса.
//    * ДоступныеПоля - Соответствие Из КлючИЗначение - доступные для вывода поля по виду контрагента:
//        ** Ключ - Строка - вид контрагента.
//        ** Значение - Соответствие Из КлючИЗначение - доступные поля.
//             См. ДоступныеПоля.Поля.
//    * ДоступныеОтборы - Соответствие Из КлючИЗначение - доступные критерии отбора по виду контрагента:
//        ** Ключ - Строка - вид контрагента
//        ** Значение - Массив из Структура - доступные критерии.
//           См. ДоступныеОтборы.Отбор.
//
Функция НовыйСохраняемыеДоступныеОтборыИПоля() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДатаОбновления",  Дата(1, 1, 1));
	Результат.Вставить("ДоступныеПоля",   Новый Соответствие);
	Результат.Вставить("ДоступныеОтборы", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

// Выполняет запись доступных критериев отбора и полей в базу.
//
// Параметры:
//  СохраняемыеДанные - Структура - данные для сохранения.
//    см. ПоискКонтрагентовСлужебный.НовыйСохраняемыеДоступныеОтборыИПоля
//    Если поле ДатаОбновления не заполнено, то устанавливается значение, равное началу текущего дня.
//
Процедура ЗаписатьДоступныеОтборыИПоля(Знач СохраняемыеДанные) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
	
		СохраняемыеПараметры = НовыйСохраняемыеДоступныеОтборыИПоля();
		ЗаполнитьЗначенияСвойств(СохраняемыеПараметры, СохраняемыеДанные);
		
		Если Не ЗначениеЗаполнено(СохраняемыеПараметры.ДатаОбновления) Тогда
			СохраняемыеПараметры.ДатаОбновления  = НачалоДня(ТекущаяДатаСеанса());
		КонецЕсли;
		
		Константы.ПараметрыПоискаКонтрагентов.Установить(Новый ХранилищеЗначения(СохраняемыеПараметры));
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при сохранении параметров поиска контрагентов в базу.
					|
					|%1'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьИнформациюВЖурналРегистрации(
			ИнформацияОбОшибке,
			Истина);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет загрузку доступных критериев отбора из базы и приводит их в соответствие с текущей версией.
//
// Возвращаемое значение:
//  см. НовыйСохраняемыеДоступныеОтборыИПоля.
//
Функция ДоступныеОтборыИПоля() Экспорт
	
	Результат = НовыйСохраняемыеДоступныеОтборыИПоля();
	
	СохраненныеПараметры = Константы.ПараметрыПоискаКонтрагентов.Получить().Получить();
	
	Если ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(СохраненныеПараметры) Тогда
		ЗаполнитьЗначенияСвойств(Результат, СохраненныеПараметры);
	КонецЕсли;
	
	Если ТипЗнч(Результат.ДоступныеПоля) <> Тип("Соответствие") Тогда
		Результат.ДоступныеПоля = Новый Соответствие;
	КонецЕсли;
	
	Если ТипЗнч(Результат.ДоступныеОтборы) <> Тип("Соответствие") Тогда
		Результат.ДоступныеОтборы = Новый Соответствие;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Очищает сохраненную в базе информацию по доступным критериям отбора и полям.
//
Процедура ОчиститьДоступныеОтборыИПоля() Экспорт
	
	Константы.ПараметрыПоискаКонтрагентов.Установить(Неопределено);
	
КонецПроцедуры

// Возвращает ключ объекта для хранилища общих настроек пользователя.
//
// Возвращаемое значение:
//  Строка - ключ объекта настроек
//
Функция КлючОбъектаОбщихНастроек()
	
	Возврат "ИнтернетПоддержкаПользователей_ПоискКонтрагентов";
	
КонецФункции

// Возвращает ключ сохраняемых настроек.
//
// Возвращаемое значение:
//  Строка - ключ сохраняемых настроек
//
Функция КлючНастроекОбщихНастроек()
	
	Возврат "ИнтернетПоддержкаПользователей_ПоискКонтрагентов_НастройкиОтборовИПолей";
	
КонецФункции

// Загружает настройки доступных критериев отбора и полей из базы. Если в сохраненных данных есть критерии отбора или
// поля, которые более недоступны, то они убираются из настроек. Если ранее выбранный вид сравнения больше недоступен
// для конкретного критерия отбора, то он заменяется на первый вид сравнения из списка доступных.
//
// Параметры:
//  ДоступныеПоля - Соответствие Из КлючИЗначение - Текущие доступные для вывода поля по виду контрагента:
//    * Ключ - Строка - вид контрагента.
//    * Значение - Соответствие Из КлючИЗначение - доступные поля. См. ДоступныеПоля.Поля
//  ДоступныеОтборы - Соответствие Из КлючИЗначение - Текущие доступные критерии отбора по виду контрагента:
//    * Ключ - Строка - вид контрагента.
//    * Значение - Массив из Структура - доступные критерии. См. ДоступныеОтборы.Отбор.
//
// Возвращаемое значение:
//  Структура - Результат загрузки данных из базы:
//    * Ошибка - Булево - Истина, если в процессе выполнения метода возникли ошибки.
//    * ВидОшибки - Строка - вид возникшей ошибки, либо пустая строка, если ошибок нет.
//    * ИнформацияОбОшибке - Строка - описание ошибки, либо пустая строка, если ошибок нет.
//    * ОписаниеОшибкиСервиса - Структура, Неопределено - подробное описание ошибки веб-сервиса, либо Неопределено,
//      если ошибок нет, либо ошибка не связана с запросом к веб-сервису.
//      См. НовыйОписаниеОшибкиСервиса.
//    * НастройкаПолей - Соответствие Из КлючИЗначение - настройка полей по виду контрагента:
//        ** Ключ - Строка - вид контрагента.
//        ** Значение - Массив Из Структура - настройка полей по определенному виду контрагента.
//           см. ПоискКонтрагентовСлужебныйКлиентСервер.ОбработатьНастройкиПолейПослеЗагрузки.НастройкаПолей
//    * НастройкаОтборов - Соответствие Из КлючИЗначение - настройка критериев отбора по виду контрагента:
//        ** Ключ - Строка - вид контрагента.
//        ** Значение - Соответствие Из КлючИЗначение - настройка критериев отбора:
//             *** Ключ - Строка - идентификатор критерия отбора.
//             *** Значение - Структура - описание критерия отбора.
//                 См. ПоискКонтрагентовСлужебныйКлиентСервер.НовыйОписаниеПоляОтбора.
//    * ВидКонтрагента - Строка - вид контрагента, по которому было выполнено последнее формирование отчета.
//    * Информация - Строка - дополнительная информация.
//      См. ПоискКонтрагентовСлужебныйКлиентСервер.ОбработатьНастройкиОтборовПослеЗагрузки
//
Функция ЗагрузитьНастройкиОтбораИПолей(Знач ДоступныеПоля, Знач ДоступныеОтборы) Экспорт
	
	Результат = НовыйРезультатОперации();
	Результат.Вставить("НастройкаПолей",     Новый Соответствие);
	Результат.Вставить("НастройкаОтборов",   Новый Соответствие);
	Результат.Вставить("ВидКонтрагента",     "");
	Результат.Вставить("Информация",         "");
	
	ВидыКонтрагентов = ВидыКонтрагентов();
	Для Каждого КлючЗначение Из ВидыКонтрагентов Цикл
		Результат.НастройкаПолей.Вставить(КлючЗначение.Значение,   Новый Массив);
		Результат.НастройкаОтборов.Вставить(КлючЗначение.Значение, Новый Соответствие);
	КонецЦикла;
	
	Настройки = ПоискКонтрагентовСлужебныйКлиентСервер.НовыйСохраняемыеНастройки();
	
	Попытка
		СохраненныеНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				КлючОбъектаОбщихНастроек(),
				КлючНастроекОбщихНастроек());
		
		Если ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(СохраненныеНастройки) Тогда
			
			ЗаполнитьЗначенияСвойств(
				Настройки,
				СохраненныеНастройки);
			
			Если ТипЗнч(Настройки.НастройкаПолей) = Тип("Соответствие") Тогда
				Для Каждого КлючЗначение Из Настройки.НастройкаПолей Цикл
					Результат.НастройкаПолей.Вставить(
						КлючЗначение.Ключ,
						КлючЗначение.Значение);
				КонецЦикла;
			КонецЕсли;
			
			Если ТипЗнч(Настройки.НастройкаОтборов) = Тип("Соответствие") Тогда
				Для Каждого КлючЗначение Из Настройки.НастройкаОтборов Цикл
					Результат.НастройкаОтборов.Вставить(
						КлючЗначение.Ключ,
						КлючЗначение.Значение);
				КонецЦикла;
			КонецЕсли;
			
			Результат.ВидКонтрагента = Настройки.ВидКонтрагента;
			
		КонецЕсли;
		
		Информация = Новый Массив;
		
		Для Каждого КлючЗначение Из ВидыКонтрагентов Цикл
			
			ТекущийВидКонтрагента = КлючЗначение.Значение;
			
			ПоискКонтрагентовСлужебныйКлиентСервер.ОбработатьНастройкиПолейПослеЗагрузки(
				Результат.НастройкаПолей[ТекущийВидКонтрагента],
				ДоступныеПоля[ТекущийВидКонтрагента],
				ПоискКонтрагентовСлужебныйКлиентСервер.ПоляПоУмолчанию(ТекущийВидКонтрагента));
				
			ПоискКонтрагентовСлужебныйКлиентСервер.ОбработатьНастройкиОтборовПослеЗагрузки(
				Результат.НастройкаОтборов[ТекущийВидКонтрагента],
				ДоступныеОтборы[ТекущийВидКонтрагента],
				Информация,
				ПоискКонтрагентовСлужебныйКлиентСервер.ПредставлениеКонтрагентаПоВиду(
					ТекущийВидКонтрагента));
			
		КонецЦикла;
		
		Результат.Информация = СтрСоединить(Информация, Символы.ПС);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось загрузить пользовательские настройки полей и отборов из хранилища настроек:
					|%1'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)),
			Истина);
		
		Результат.Ошибка = Истина;
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось загрузить настройки пользователя:
				|%1'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Выполняет сохранение настроек в хранилище настроек пользователя.
//
// Параметры:
//  СохраняемыеНастройки - Структура, Неопределено - данные для сохранения. Если Неопределено, то сохранения настроек
//    не происходит. См. ПоискКонтрагентовСлужебныйКлиентСервер.НовыйСохраняемыеНастройки
//
// Возвращаемое значение:
//  Строка - описание ошибки, либо пустая строка, если сохранение настроек выполнено успешно.
//
Функция СохранитьНастройкиОтбораИПолей(СохраняемыеНастройки) Экспорт
	
	Если СохраняемыеНастройки = Неопределено Тогда
		Возврат "";
	КонецЕсли;
		
	Попытка
	
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			КлючОбъектаОбщихНастроек(),
			КлючНастроекОбщихНастроек(),
			СохраняемыеНастройки);
	
	Исключение
		
		ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось сохранить пользовательские настройки в хранилище:
				|%1'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		ЗаписатьИнформациюВЖурналРегистрации(
			ИнформацияОбОшибке,
			Истина);
		
		Возврат НСтр("ru = 'Не удалось сохранить текущие настройки. Подробную информацию смотрите в журнале регистрации'");
		
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

// Очищает сохраненные настройки отборов и полей для текущего пользователя.
//
Процедура ОчиститьСохраненныеНастройкиПользователя() Экспорт
	
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(
		КлючОбъектаОбщихНастроек(),
		КлючНастроекОбщихНастроек(),
		ТекущийПользователь.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеОтчетаВФайл

// Выполняет последовательную загрузку всех страниц при сохранении отчета в файл.
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры отчета:
//    * ПараметрыЗапроса -см. ПоискКонтрагентовСлужебныйКлиентСервер.НовыйПараметрыЗапроса.
//
// Возвращаемое значение:
//  Структура - Результат загрузки информации из вэб-сервиса:
//    * Ошибка - Булево - Истина, если в процессе выполнения метода возникли ошибки.
//    * ВидОшибки - Строка - вид возникшей ошибки, либо пустая строка, если ошибок нет.
//    * ИнформацияОбОшибке - Строка - описание ошибки, либо пустая строка, если ошибок нет.
//    * ОписаниеОшибкиСервиса - Структура, Неопределено - подробное описание ошибки веб-сервиса, либо Неопределено,
//      если ошибок нет, либо ошибка не связана с запросом к веб-сервису.
//      См. НовыйОписаниеОшибкиСервиса.
//    * Результат - Неопределено, ТабличныйДокумент - Результат загрузки информации, либо представление ошибки в виде
//      табличного документа, если в процессе загрузки возникли ошибки.
//
Функция ЗагрузкаДанныхДляСохранения(ПараметрыОтчета) Экспорт
	
	Результат = НовыйРезультатОперации();
	Результат.Вставить("Результат", Неопределено);
	
	УИДХранилища = Новый УникальныйИдентификатор;

	РезультатОтчета = Новый ТабличныйДокумент;
	
	// Создаем объект, получаем первую страницу и данные об общем количестве страниц
	Отчет = Отчеты.ПоискКонтрагентов.Создать();
	Отчет.АдресХранилищаНастроек = ПоместитьВоВременноеХранилище(
		ПараметрыОтчета,
		УИДХранилища);
	Отчет.СкомпоноватьРезультат(РезультатОтчета);
	
	Если Отчет.ОшибкаПриФормированииОтчета Тогда
		Результат.Ошибка             = Истина;
		Результат.ИнформацияОбОшибке = Отчет.ИнформацияОбОшибке;
		Результат.Результат          = РезультатОтчета;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Результат                    = Новый ТабличныйДокумент;
	Результат.Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Результат.Результат.АвтоМасштаб        = Истина;
	
	Результат.Результат.Вывести(РезультатОтчета);

	// Если всего одна страница, то сразу возвращаем результат
	ВсегоСтраниц = Отчет.ВсегоСтраниц;
	Если ВсегоСтраниц <= 1 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Отчет.ДоступноСтраниц < Отчет.ВсегоСтраниц Тогда
		ВсегоСтраниц = Отчет.ДоступноСтраниц;
	КонецЕсли;
	
	// Если больше 1 страницы, то загружаем остальные
	Для НомерСтраницы = 2 По ВсегоСтраниц Цикл
		
		ПараметрыОтчета.ПараметрыЗапроса.НомерСтраницы = НомерСтраницы;
		РезультатОтчета.Очистить();
		
		Отчет.АдресХранилищаНастроек = ПоместитьВоВременноеХранилище(
			ПараметрыОтчета,
			УИДХранилища);
		Отчет.СкомпоноватьРезультат(РезультатОтчета);
		
		Если Отчет.ОшибкаПриФормированииОтчета Тогда
			
			Результат.Ошибка              = Истина;
			Результат.Результат           = РезультатОтчета;
			Результат.ИнформацияОбОшибке  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Загрузка страницы %1 из %2.
				|%3'"),
				НомерСтраницы,
				ВсегоСтраниц,
				Отчет.ИнформацияОбОшибке);
			Возврат Результат;
			
		Иначе
			
			Если РезультатОтчета.ВысотаТаблицы >= 2 Тогда
				// Удаляем шапку
				РезультатОтчета.УдалитьОбласть(
					РезультатОтчета.Область("R1"),
					ТипСмещенияТабличногоДокумента.ПоВертикали);
			КонецЕсли;
			
			Результат.Результат.Вывести(РезультатОтчета);
			
			Процент = Окр((НомерСтраницы / ВсегоСтраниц) * 100, 0);
			ДлительныеОперации.СообщитьПрогресс(Процент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПодборИзСправочника

// Выполняет подбор информации из справочника в веб-сервисе при срабатывании события АвтоПодбор.
//
// Параметры:
//  Текст - Строка - введенный пользователем текст.
//  ИдентификаторКритерия - Строка - идентификатор критерия, значение которого должно быть подобрано.
//
// Возвращаемое значение:
//  Структура - данные полученные из веб-сервиса:
//    * Ошибка - Булево - Истина, если в процессе выполнения метода возникли ошибки.
//    * ВидОшибки - Строка - вид возникшей ошибки, либо пустая строка, если ошибок нет.
//    * ИнформацияОбОшибке - Строка - описание ошибки, либо пустая строка, если ошибок нет.
//    * ОписаниеОшибкиСервиса - Структура, Неопределено - подробное описание ошибки веб-сервиса, либо Неопределено,
//      если ошибок нет, либо ошибка не связана с запросом к веб-сервису.
//      См. НовыйОписаниеОшибкиСервиса.
//    * Данные - СписокЗначений Из Соответствие - список доступных для выбора значений из веб-справочника:
//        ** Значение - Соответствие Из КлючИЗначение - значение будет возвращено в веб-сервис при формировании отчета.
//          Точный состав полей определяется на стороне веб-сервиса и может иметь различную структуру в зависимости от
//          конкретного критерия отбора.
//        ** Представление - Строка - понятное пользователю представление доступного значения.
//
Функция ПодборВСправочникеСервиса(
		Знач Текст,
		Знач ИдентификаторКритерия) Экспорт
	
	Результат = НовыйРезультатОперации();
	Результат.Вставить("Данные", Новый СписокЗначений);

	Если Не ЗначениеЗаполнено(ИдентификаторКритерия)
		Или Не ЗначениеЗаполнено(Текст) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДанныеИзСервиса = ДанныеСправочникаСервиса(
		Текст,
		ИдентификаторКритерия);
	
	Если ДанныеИзСервиса.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(Результат, ДанныеИзСервиса);
		Возврат Результат;
	КонецЕсли;
	
	// Структура ответа
	// {
	//   "availableValues": [
	//     {
	//       "representation": {},
	//       "data": {}
	//     }
	//   ]
	// }
	
	// Если дошли до сюда, значит сервис отработал корректно
	Если ДанныеИзСервиса.ОтветСервиса.Количество() = 0 Тогда
		// Пустой ответ
		Возврат Результат;
	КонецЕсли;
	
	ДоступныеЗначения = ДанныеИзСервиса.ОтветСервиса["availableValues"];
	Если ТипЗнч(ДоступныеЗначения) <> Тип("Массив") Тогда
		// Ответ не пустой, но нет нужного значения, либо тип значения другой;
		Результат.ИнформацияОбОшибке = НСтр("ru = 'Структура ответа сервиса отличается от ожидаемой'");
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ДоступноеЗначение Из ДоступныеЗначения Цикл
		
		Представление = ДоступноеЗначение["representation"];
		
		ЗначениеДляВыбора = ПоискКонтрагентовСлужебныйКлиентСервер.НовыйОписаниеЗначенияВыбораИзСправочника();
		ЗначениеДляВыбора.Представление = Представление;
		ЗначениеДляВыбора.Данные        = ДоступноеЗначение["data"];
		
		Если ЗначениеЗаполнено(ЗначениеДляВыбора.Представление) Тогда
			Результат.Данные.Добавить(
				ЗначениеДляВыбора,
				Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выполняет запрос к веб-сервису для получения доступных значений критерия отбора, который должен заполняться из
// веб-справочника.
//
// Параметры:
//  Текст - Строка - введенный пользователем текст.
//  ИдентификаторКритерия - Строка - идентификатор критерия, значение которого должно быть подобрано.
//
// Возвращаемое значение:
//  Структура - Результат обращения к веб-сервису:
//    * Ошибка - Булево - Истина, если в процессе выполнения метода возникли ошибки.
//    * ВидОшибки - Строка - вид возникшей ошибки, либо пустая строка, если ошибок нет.
//    * ИнформацияОбОшибке - Строка - описание ошибки, либо пустая строка, если ошибок нет.
//    * ОписаниеОшибкиСервиса - Структура, Неопределено - подробное описание ошибки веб-сервиса, либо Неопределено,
//      если ошибок нет, либо ошибка не связана с запросом к веб-сервису.
//      См. НовыйОписаниеОшибкиСервиса.
//    * ОтветСервиса - Соответствие Из КлючИЗначение - Результат преобразования ответа сервиса в соответствие.
//
Функция ДанныеСправочникаСервиса(
		Текст,
		ИдентификаторКритерия)

	// Структура запроса
	// rest/dynamic/v1/available/values
	// {
	//   "criteriaId": "string",
	//   "filterValue": {}
	// }

	Результат = НовыйРезультатОперации();
	Результат.Вставить("ОтветСервиса", Новый Соответствие);

	URLОперации = URLОперацииСервиса("rest/dynamic/v1/available/values");
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("criteriaId", ИдентификаторКритерия);
	ПараметрыМетода.Вставить("filterValue", Текст);

	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON();
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписатьJSON(ЗаписьДанныхСообщения, ПараметрыМетода, НастройкиСериализации);
	
	ДанныеДляОбработки = ЗаписьДанныхСообщения.Закрыть();
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Метод",                    "POST");
	ПараметрыЗапроса.Вставить("ФорматОтвета",             1);
	ПараметрыЗапроса.Вставить("ДанныеДляОбработки",       ДанныеДляОбработки);
	ПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыЗапроса.Вставить("Таймаут",                  10);
	
	РезультатОтправки = ВыполнитьЗапросКСервису(URLОперации, ПараметрыЗапроса, Истина);
	
	Если РезультатОтправки.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(Результат, РезультатОтправки);
		Возврат Результат;
	КонецЕсли;
	
	// Помещаем в соответствие, так как в имени параметров в value могут быть недопустимые символы
	ОтветСервиса = ТелоОтветаОбъектИзСтроки(РезультатОтправки.Содержимое, Истина);
	
	Если ОтветСервиса.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(Результат, ОтветСервиса);
		Возврат Результат;
	КонецЕсли;
	
	Результат.ОтветСервиса = ОтветСервиса.Результат;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПолучениеРезультатаПоиска

// Выполняет получение информации для отчета из веб-сервиса.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры получения информации.
//    см. ПоискКонтрагентовСлужебныйКлиентСервер.НовыйПараметрыЗапроса.
//
// Возвращаемое значение:
//  Структура - загруженные данные, либо информация об ошибке:
//    * Ошибка - Булево - Истина, если в процессе выполнения метода возникли ошибки.
//    * ВидОшибки - Строка - вид возникшей ошибки, либо пустая строка, если ошибок нет.
//    * ИнформацияОбОшибке - Строка - описание ошибки, либо пустая строка, если ошибок нет.
//    * ОписаниеОшибкиСервиса - Структура, Неопределено - подробное описание ошибки веб-сервиса, либо Неопределено,
//      если ошибок нет, либо ошибка не связана с запросом к веб-сервису.
//      См. НовыйОписаниеОшибкиСервиса.
//    * ВнешниеДанные - Структура, Неопределено - ответ сервиса, преобразованный в структуру.
//    * см. РазборВнешнихДанных.
//
Функция ВнешниеДанныеДляОтчета(Знач ПараметрыЗапроса) Экспорт
	
	Результат = НовыйРезультатОперации();
	Результат.Вставить("ВнешниеДанные", Неопределено);
	
	Если Не ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(ПараметрыЗапроса) Тогда
		
		Результат.Ошибка = Истина;
		Результат.ВидОшибки = "НекорректныйЗапрос";
		Результат.ИнформацияОбОшибке = НСтр("ru = 'Недостаточно параметров.'");
		
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'В функцию ВнешниеДанныеДляОтчета переданы ошибочные параметры.'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
			
		Возврат Результат;
		
	КонецЕсли;
	
	URLОперации = URLОперацииСервиса("rest/dynamic/v1/search");
	
	ПравильныеПараметры = ПоискКонтрагентовСлужебныйКлиентСервер.НовыйПараметрыЗапроса();
	ЗаполнитьЗначенияСвойств(ПравильныеПараметры, ПараметрыЗапроса);
	
	ИмяПоляИНН = ИмяПоляИННПоВидуКонтрагента(ПравильныеПараметры.ВидКонтрагента);
	
	ВыходныеПоля = ОбщегоНазначения.СкопироватьРекурсивно(ПравильныеПараметры.Поля);
	Если ВыходныеПоля.Найти(ИмяПоляИНН) = Неопределено Тогда
		ВыходныеПоля.Добавить(ИмяПоляИНН);
	КонецЕсли;
	
	// {
	//  "criterias": [
	//    {
	//      "comparisonType": "EQUALS",
	//      "id": "string",
	//      "value": {}
	//    }
	//  ],
	//  "fields": [
	//    "string"
	//  ],
	//  "page": 0,
	//  "scope": "CORPORATION"
	// }
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("criterias", Новый Массив);
	ПараметрыМетода.Вставить("fields",    ВыходныеПоля);
	ПараметрыМетода.Вставить("page",      ПравильныеПараметры.НомерСтраницы);
	ПараметрыМетода.Вставить("scope",     ПравильныеПараметры.ВидКонтрагента);
	
	Для Каждого ОписаниеОтбора Из ПравильныеПараметры.Отбор Цикл
		
		ПараметрыМетода.criterias.Добавить(
			Новый Структура(
				"comparisonType, id, value",
				ОписаниеОтбора.ВидСравнения,
				ОписаниеОтбора.Идентификатор,
				ОписаниеОтбора.Значение));
		
	КонецЦикла;
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON();
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписатьJSON(ЗаписьДанныхСообщения, ПараметрыМетода, НастройкиСериализации);
	
	ДанныеДляОбработки = ЗаписьДанныхСообщения.Закрыть();
	
	ПараметрыЗапросаСервиса = Новый Структура;
	ПараметрыЗапросаСервиса.Вставить("Метод",                    "POST");
	ПараметрыЗапросаСервиса.Вставить("ФорматОтвета",             1);
	ПараметрыЗапросаСервиса.Вставить("ДанныеДляОбработки",       ДанныеДляОбработки);
	ПараметрыЗапросаСервиса.Вставить("ФорматДанныхДляОбработки", 1);
	
	РезультатОтправки = ВыполнитьЗапросКСервису(URLОперации, ПараметрыЗапросаСервиса);
	
	Если РезультатОтправки.Ошибка Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, РезультатОтправки);
		ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ИнформацияОбОшибке,
			Истина);
		
		Возврат Результат;
		
	КонецЕсли;
	
	ОтветСервиса = ТелоОтветаОбъектИзСтроки(РезультатОтправки.Содержимое);
	
	Если ОтветСервиса.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(Результат, ОтветСервиса);
		Возврат Результат;
	КонецЕсли;
	
	Результат.ВнешниеДанные = ОтветСервиса.Результат;
	
	Возврат РазборВнешнихДанных(
		Результат.ВнешниеДанные,
		ПараметрыЗапроса);
	
КонецФункции

// Преобразовывает ответ сервиса в таблицу значений для использования во внешних данных СКД.
//
// Параметры:
//  ОтветСервиса - Структура - загруженные данные, либо информация об ошибке.
//    См. ПоискКонтрагентовСлужебный.ВнешниеДанныеДляОтчета.
//  ПараметрыЗапроса - Структура - параметры выполнения запроса к веб-сервису.
//    См. ПоискКонтрагентовСлужебныйКлиентСервер.НовыйПараметрыЗапроса.
//
// Возвращаемое значение:
//  Структура - результат разбора ответа веб-сервиса, либо описание ошибки:
//    * Ошибка - Булево - Истина, если в процессе выполнения метода возникли ошибки.
//    * ВидОшибки - Строка - вид возникшей ошибки, либо пустая строка, если ошибок нет.
//    * ИнформацияОбОшибке - Строка - описание ошибки, либо пустая строка, если ошибок нет.
//    * ОписаниеОшибкиСервиса - Структура, Неопределено - подробное описание ошибки веб-сервиса, либо Неопределено,
//      если ошибок нет, либо ошибка не связана с запросом к веб-сервису.
//      См. НовыйОписаниеОшибкиСервиса.
//    * Данные - ТаблицаЗначений - непосредственно результат разбора ответа сервиса. Всегда содержит колонки, описанные
//      в функции НовыйТаблицаВнешнегоИсточника. Наличие и порядок других колонок зависит от настроек выводимых полей. 
//      см. НовыйТаблицаВнешнегоИсточника.
//    * ВсегоЗаписей - Число - всего записей в результате запроса.
//    * ВсегоСтраниц - Число - всего страниц в результате запроса.
//    * ДоступноСтраниц - Число - максимальный номер страницы, на которую возможен переход.
//    * ТекущаяСтраница - Число - номер страницы, информация с которой возвращена в текущем запросе.
//    * ДоступныеПоля - Соответствие Из КлючИЗначение - доступные поля по соответствующему виду контрагента.
//      См. ДоступныеПоля.Поля.
//    * Поля - Массив Из Строка - идентификаторы полей, которые необходимо вывести в отчет.
//    * ДобавитьРасшифровку - Булево - признак того, что в отчет необходимо добавить расшифровку контрагентов.
//    * РасшифровкаПолей - Соответствие Из КлючИЗначение - данные для расшифровки отчета:
//        * Ключ - Строка - идентификатор колонки. Всегда содержит значение со специальным ключом
//          "РасшифровкаКонтрагента", которое используется для открытия отчета ПроверкаКонтрагента или ДосьеКонтрагента.
//        * Значение - Соответствие Из КлючИЗначение - данные расшифровки колонки:
//            ** Ключ - Число - номер строки отчета.
//            ** Значение - Произвольный - Данные расшифровки.
//
Функция РазборВнешнихДанных(ОтветСервиса, ПараметрыЗапроса)

	Результат = НовыйРезультатОперации();
	Результат.Вставить("Данные",                 НовыйТаблицаВнешнегоИсточника());
	Результат.Вставить("ВсегоЗаписей",           0);
	Результат.Вставить("ВсегоСтраниц",           0);
	Результат.Вставить("ДоступноСтраниц",        0);
	Результат.Вставить("ТекущаяСтраница",        0);
	Результат.Вставить("ДоступныеПоля",          ПараметрыЗапроса.ДоступныеПоля);
	Результат.Вставить("Поля",                   ПараметрыЗапроса.Поля);
	Результат.Вставить("ДобавитьРасшифровку",    ПараметрыЗапроса.ДобавитьРасшифровку);
	Результат.Вставить("РасшифровкаПолей",       Новый Соответствие);
	
	// Структура ответа
	// {
	//   "counterAgents": [
	//     {
	//       "criteriaResults": [
	//         {
	//           "actualValue": {},
	//           "id": "string"
	//         }
	//       ],
	//       "fieldResults": [
	//         {
	//           "actualValue": {},
	//           "id": "string"
	//         }
	//       ]
	//     }
	//   ],
	//   "currentPage": 0,
	//   "totalPages": 0,
	//   "totalRecords": 0
	// }
	
	Если Не ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(ОтветСервиса) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Эталон = Новый Структура;
	Эталон.Вставить("counterAgents", Новый Массив);
	Эталон.Вставить("currentPage",   0);
	Эталон.Вставить("totalPages",    0);
	Эталон.Вставить("totalRecords",  0);
	Эталон.Вставить("maxPage",       0);
	
	ЗаполнитьЗначенияСвойств(Эталон, ОтветСервиса);
	
	Результат.ВсегоЗаписей    = Эталон.totalRecords;
	Результат.ВсегоСтраниц    = Эталон.totalPages;
	Результат.ТекущаяСтраница = Эталон.currentPage;
	Результат.ДоступноСтраниц = Эталон.maxPage;
	
	ВыводимыеПоля = Новый Соответствие;
	
	Колонки = Результат.Данные.Колонки;
	
	НомерПП = 2;
	Для Каждого ИмяПоля Из ПараметрыЗапроса.Поля Цикл
		Колонки.Добавить(ИмяПоля);
		ВыводимыеПоля.Вставить(ИмяПоля, Истина);
		НомерПП = НомерПП + 1;
	КонецЦикла;
	
	НомерПП = 1 + (Эталон.currentPage - 1) * 100;
	
	ИмяПоляИНН = ИмяПоляИННПоВидуКонтрагента(ПараметрыЗапроса.ВидКонтрагента);
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыводимыеПоля",          ВыводимыеПоля);
	ДополнительныеПараметры.Вставить("ИмяПоляИНН",             ИмяПоляИНН);
	ДополнительныеПараметры.Вставить("ДоступныеПоля",          ПараметрыЗапроса.ДоступныеПоля);
	ДополнительныеПараметры.Вставить("ДобавлятьРасшифровку",   ПараметрыЗапроса.ДобавитьРасшифровку);
	ДополнительныеПараметры.Вставить("РасшифровкаПолей",       Новый Соответствие);
	ДополнительныеПараметры.Вставить("ТипыОбработкиПолей",     ТипыОбработкиПолей());
	ДополнительныеПараметры.Вставить("ДоступныеТипыОбработки", ДоступныеТипыОбработкиПолей());
	ДополнительныеПараметры.Вставить("ТипыЗначений",           ТипыЗначений());
	ДополнительныеПараметры.Вставить(
		"КодыОКВЭДВОтборе",
		КодыОКВЭДВОтборе(
			ПараметрыЗапроса.Отбор,
			ПараметрыЗапроса.ДобавитьРасшифровку));
		
	ДополнительныеПараметры.РасшифровкаПолей.Вставить("РасшифровкаКонтрагента", Новый Соответствие);
		
	Для Каждого ОписаниеКонтрагента Из Эталон.counterAgents Цикл
		ПравильноеОписание = Новый Структура("fieldResults", Новый Массив);
		
		Если ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(ОписаниеКонтрагента) Тогда
			ЗаполнитьЗначенияСвойств(ПравильноеОписание, ОписаниеКонтрагента);
		КонецЕсли;
		
		НоваяСтрока = Результат.Данные.Добавить();
		НоваяСтрока.НомерПП = НомерПП;
		
		ДобавитьСтрокуПоискаВТаблицу(НоваяСтрока, ПравильноеОписание.fieldResults, ДополнительныеПараметры);
		
		НомерПП = НомерПП + 1;
		
	КонецЦикла;
	
	Результат.РасшифровкаПолей = ДополнительныеПараметры.РасшифровкаПолей;
	
	Возврат Результат;
	
КонецФункции

// Создает таблицу значений для использования в качестве внешнего источника данных в СКД с колонками, которые должны
// присутствовать в не зависимости от выбранных пользователем выводимых полей.
// Остальные колонки зависят от настроек пользователя и создаются динамически в функции
// ПоискКонтрагентовСлужебный.РазборВнешнихДанных.
//
// Возвращаемое значение;
//  ТаблицаЗначений - пустая таблица для загрузки результата запроса к веб-сервису:
//    * НомерПП - Число (7) - номер записи по порядку.
//
Функция НовыйТаблицаВнешнегоИсточника()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить(
		"НомерПП",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7)));
		
	Возврат Результат;
	
КонецФункции

// Добавляет строку из результата запроса к веб-сервису в таблицу значений и заполняет данные для расшифровки.
//
// Параметры:
//  НоваяСтрока - СтрокаТаблицыЗначений - строка, которую необходимо заполнить загруженными значениями.
//    см. НовыйТаблицаВнешнегоИсточника.
//  РезультатПоиска - Массив из Структура - данных из веб-сервиса:
//    * id - Строка - идентификатор поля.
//    * actualValue - Произвольный - значение поля.
//  ДополнительныеПараметры - Структура - параметры, используемые при заполнении строки:
//    * ИмяПоляИНН - Строка - имя поля, в котором храниться ИНН контрагента.
//      см. ИмяПоляИННПоВидуКонтрагента.
//    * ВыводимыеПоля - Соответствие Из КлючИЗначение - идентификаторы полей, которые необходимо вывести в отчет.
//      Используется для исключения полей, которые не нужно выводить, но которые используются для получения
//      вспомогательных данных. Например, поле ИНН используется для создания расшифровки, но пользователь может
//      отключить его вывод:
//        ** Ключ - Строка - идентификатор поля
//        ** Значение - Булево - всегда Истина.
//    * ДоступныеПоля - Соответствие Из КлючИЗначение - доступные поля по соответствующему виду контрагента.
//      См. ДоступныеПоля.Поля.
//    * ТипыОбработкиПолей - Структура - все типы обработки полей.
//      См. ПоискКонтрагентовСлужебный.ТипыОбработкиПолей.
//    * ДоступныеТипыОбработки - Массив из Строка - доступных в текущей версии библиотеки типы обработки полей
//      См. ДоступныеТипыОбработкиПолей.
//    * ТипыЗначений - Структура - допустимые в текущей версии типы значений полей.
//      См. ТипыЗначений.
//    * ДобавлятьРасшифровку - Булево - Истина, если в отчете должна выводиться расшифровка.
//    * КодыОКВЭДВОтборе - См. КодыОКВЭДВОтборе.
//    * РасшифровкаПолей - Соответствие Из КлючИЗначение - данные для расшифровки полей:
//        * Ключ - Строка - идентификатор колонки. Обязательно должно быть значение со специальным ключом
//            "РасшифровкаКонтрагента" для открытия отчета "Проверки контрагента" или "Досье контрагента".
//        * Значение - Соответствие Из КлючИЗначение - данные расшифровки колонки:
//            ** Ключ - Число - номер строки отчета.
//            ** Значение - Произвольный - Данные расшифровки.
//
Процедура ДобавитьСтрокуПоискаВТаблицу(
		НоваяСтрока,
		РезультатПоиска,
		ДополнительныеПараметры)
	
	РасшифровкаКонтрагента = "";
	
	ДобавлятьРасшифровку   = ДополнительныеПараметры.ДобавлятьРасшифровку;
	ТипыОбработкиПолей     = ДополнительныеПараметры.ТипыОбработкиПолей;
	ДоступныеТипыОбработки = ДополнительныеПараметры.ДоступныеТипыОбработки;
	ТипыЗначений           = ДополнительныеПараметры.ТипыЗначений;
	КодыОКВЭДВОтборе       = ДополнительныеПараметры.КодыОКВЭДВОтборе;
	
	Для Каждого ОписаниеПоля Из РезультатПоиска Цикл
		ПравильноеОписаниеПоля = Новый Структура(
			"id, actualValue",
			"",
			"");
		
		Если ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(ОписаниеПоля) Тогда
			ЗаполнитьЗначенияСвойств(ПравильноеОписаниеПоля, ОписаниеПоля);
		КонецЕсли;
		
		ИДПоля = ПравильноеОписаниеПоля.id;
		Если Не ЗначениеЗаполнено(ИДПоля) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИДПоля = ДополнительныеПараметры.ИмяПоляИНН Тогда
			РасшифровкаКонтрагента = ПравильноеОписаниеПоля.actualValue;
		КонецЕсли;
		
		Если ДополнительныеПараметры.ВыводимыеПоля[ИДПоля] <> Неопределено Тогда
			
			ОписаниеДоступногоПоля = ДополнительныеПараметры.ДоступныеПоля[ИДПоля];
			Если Не ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(ОписаниеДоступногоПоля) Тогда
				Продолжить;
			КонецЕсли;
			
			ДоступноеПоле = ПоискКонтрагентовСлужебныйКлиентСервер.НовыйДоступноеПоле();
			ЗаполнитьЗначенияСвойств(ДоступноеПоле, ОписаниеДоступногоПоля);
			
			ТипОбработки = ДоступноеПоле.ТипОбработки;
			
			Если ДоступныеТипыОбработки.Найти(ТипОбработки) = Неопределено Тогда
				// Способ обработки поля неизвестен в текущей версии.
				Продолжить;
			КонецЕсли;
			
			ЗначениеДляВывода = "";
			ЗначениеИзСервиса = ПравильноеОписаниеПоля.actualValue;
			
			Если ТипОбработки = ""
				Или ТипОбработки = Неопределено
				Или ТипОбработки = ТипыОбработкиПолей.ПоУмолчанию Тогда
				
				Если ДоступноеПоле.ТипЗначения = ТипыЗначений.Дата Тогда
					ЗначениеДляВывода = ПолучитьДатуИзОтветаСервиса(ЗначениеИзСервиса);
				Иначе
					Если ТипЗнч(ЗначениеИзСервиса) = Тип("Массив") Тогда
						ЗначениеДляВывода = СтрСоединить(ЗначениеИзСервиса, ";" + Символы.ПС);
					Иначе
						ЗначениеДляВывода = ЗначениеИзСервиса;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТипОбработки = ТипыОбработкиПолей.ОКВЭД Тогда
				
				ДанныеОКВЭД = ОбработатьПолеОКВЭД(
					ЗначениеИзСервиса,
					ДобавлятьРасшифровку,
					КодыОКВЭДВОтборе);
				
				ЗначениеДляВывода = ДанныеОКВЭД.Представление;
				
				ДобавитьРасшифровкуПоля(
					ДополнительныеПараметры.РасшифровкаПолей,
					ИДПоля,
					НоваяСтрока.НомерПП,
					ДанныеОКВЭД.Расшифровка,
					ДобавлятьРасшифровку)
				
			КонецЕсли;
			
			НоваяСтрока[ИДПоля] = ЗначениеДляВывода;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Расшифровка = НовыйЗначениеРасшифровки();
	Расшифровка.Действие = "ОткрытьКонтрагента";
	Расшифровка.Значение = РасшифровкаКонтрагента;
	
	ДобавитьРасшифровкуПоля(
		ДополнительныеПараметры.РасшифровкаПолей,
		"РасшифровкаКонтрагента",
		НоваяСтрока.НомерПП,
		Расшифровка,
		ДобавлятьРасшифровку);
	
КонецПроцедуры

// Преобразует значение, полученное из веб-сервиса в дату.
//
// Параметры:
//  ЗначениеИзСервиса - Произвольный - значение, которое необходимо преобразовать.
//
// Возвращаемое значение:
//  Произвольный - результат преобразования:
//    - Дата - если в параметре ЗначениеИзСервиса передано единичное значение, которое получилось успешно преобразовать
//        к дате. Если ЗначениеИзСервиса не заполнено, то возвращается пустая дата.
//    - Строка - если в параметре ЗначениеИзСервиса передан массив значений, то выполняется попытка преобразовать
//        каждое значение к дате, а его, в свою очередь к строке в формате "ДЛФ=D". Если преобразование не удалось, то
//        значение элемента приводится к строке без преобразования в дату. После обхода всего массива его элементы
//        соединяются в одну строку с разделителем ";".
//    - Произвольный - если в ЗначениеИзСервиса передан не массив и преобразование к дате выполнено с ошибками, то
//        возвращается исходное значение.
//
Функция ПолучитьДатуИзОтветаСервиса(ЗначениеИзСервиса)
	
	Если Не ЗначениеЗаполнено(ЗначениеИзСервиса) Тогда
		Возврат Дата(1,1,1);
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеИзСервиса) = Тип("Массив") Тогда
		
		Результат = Новый Массив;
		
		Для Каждого ДатаИзСообщения Из ЗначениеИзСервиса Цикл
			
			Если Не ЗначениеЗаполнено(ДатаИзСообщения) Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				НовоеЗначение = Формат(
					ПрочитатьДатуJSON(
						ДатаИзСообщения,
						ФорматДатыJSON.ISO),
					"ДЛФ=D");
			Исключение
				НовоеЗначение = Строка(ДатаИзСообщения);
			КонецПопытки;
			
			Результат.Добавить(НовоеЗначение);
			
		КонецЦикла;
		
		Возврат СтрСоединить(Результат, ";");
		
	Иначе
		
		Попытка
			НовоеЗначение = ПрочитатьДатуJSON(
				ЗначениеИзСервиса,
				ФорматДатыJSON.ISO);
		Исключение
			НовоеЗначение = ЗначениеИзСервиса;
		КонецПопытки;
		
		Возврат НовоеЗначение;
		
	КонецЕсли;
	
КонецФункции

// Добавляет расшифровку ячейки в отчет, если в параметрах отчета указана такая необходимость.
//
// Параметры:
//   РасшифровкаПолей - Соответствие Из КлючИЗначение - данные для расшифровки отчета:
//     См. РазборВнешнихДанных.РасшифровкаПолей
//   ИдентификаторПоля - Строка - идентификатор колонки для которой добавляется расшифровка.
//   НомерСтроки - Число - идентификатор строки отчета, для которой добавляется расшифровка.
//   ЗначениеРасшифровки - см. НовыйЗначениеРасшифровки.
//   ДобавлятьРасшифровку - Булево - признак необходимости добавления расшифровки в отчет.
//
Процедура ДобавитьРасшифровкуПоля(
		РасшифровкаПолей,
		ИдентификаторПоля,
		НомерСтроки,
		ЗначениеРасшифровки,
		ДобавлятьРасшифровку)
	
	Если Не ДобавлятьРасшифровку Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаСтрок = РасшифровкаПолей[ИдентификаторПоля];
	Если РасшифровкаСтрок = Неопределено Тогда
		РасшифровкаСтрок = Новый Соответствие;
		РасшифровкаПолей.Вставить(ИдентификаторПоля, РасшифровкаСтрок);
	КонецЕсли;
	РасшифровкаСтрок.Вставить(НомерСтроки, ЗначениеРасшифровки);
	
КонецПроцедуры

// Формирует пустую структуру расшифровки поля отчета.
//
// Возвращаемое значение:
//  Структура - значения по умолчанию:
//    * Действие - Строка - действие, которое необходимо выполнить для расшифровки ячейки.
//        - "ОткрытьКонтрагента" - открыть карточку контрагента из подсистемы "Проверка контрагента".
//        - "РасшифровкаОКВЭД" - открыть список всех ОКВЭД с наименованиями.
//        - Любое другое значение - расшифровка игнорируется.
//    * Значение - Произвольный, Неопределено - любое значение, необходимое для реализации расшифровки.
//
Функция НовыйЗначениеРасшифровки()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Действие", "");
	Результат.Вставить("Значение", Неопределено);
	
	Возврат Результат;
	
КонецФункции

#Область ОбработкаОКВЭД

// Формирует список кодов ОКВЭД, которые пользователь указал в качестве критериев отбора.
// Коды указываются в том порядке, в котором они перечислены в значении критерия отбора.
// Если в запросе используется несколько критериев с типом ОКВЭД, то их последовательность определяется значением
// свойства Порядок.
// Поскольку список кодов из критерия отбора используется только при формировании представления расшифровки, то,
// если параметр ДобавитьРасшифровку равен Ложь, метод сразу возвращает пустой результат без обработки.
//
// Параметры:
//  Отбор - Массив Из Структура - описание отборов. см. ПоискКонтрагентовСлужебныйКлиентСервер.НовыйОписаниеПоляОтбора
//  ДобавитьРасшифровку - Булево - Истина, если в отчете нужна расшифровка.
//
// Возвращаемое значение:
//  Массив Из Строка - список кодов ОКВЭД, которые пользователь указал в критериях отбора.
//
Функция КодыОКВЭДВОтборе(
		Отбор,
		ДобавитьРасшифровку)
	
	Если Не ДобавитьРасшифровку Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Результат = Новый Массив;
	
	ОтборОКВЭД = Новый ТаблицаЗначений;
	ОтборОКВЭД.Колонки.Добавить("Порядок", ОбщегоНазначения.ОписаниеТипаЧисло(4));
	ОтборОКВЭД.Колонки.Добавить("Значение");
	
	Для Каждого ЭлементОтбора Из Отбор Цикл
		
		// Структура ЭлементОтбора определяется в методе ПоискКонтрагентовСлужебныйКлиентСервер.НовыйОписаниеПоляОтбора
		Если ЭлементОтбора.ЭтоПолеОКВЭД <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Строка") Тогда
			
			ЗначениеДляДобавления = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
				ЭлементОтбора.Значение);
			
		ИначеЕсли ТипЗнч(ЭлементОтбора.Значение) = Тип("Массив") Тогда
			
			ЗначениеДляДобавления = ЭлементОтбора.Значение;
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		НоваяСтр = ОтборОКВЭД.Добавить();
		НоваяСтр.Порядок = ЭлементОтбора.Порядок;
		НоваяСтр.Значение = ЗначениеДляДобавления;
		
	КонецЦикла;
	
	Если ОтборОКВЭД.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОтборОКВЭД.Сортировать("Порядок");
	
	Для Каждого СтрокаОтбора Из ОтборОКВЭД Цикл
		Для Каждого ОКВЭД Из СтрокаОтбора.Значение Цикл
			Результат.Добавить(ОКВЭД);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выполняет обработку поля, в котором содержится список ОКВЭД контрагента.
//   * Если параметр ДобавлятьРасшифровку имеет значение Истина, то предполагается, то отчет будет выводиться на экран.
//     Если Ложь - сохранение в файл.
//   * Если ДобавлятьРасшифровку = Истина, то в поле выводится только первые 3 значения, обрезанные до 50 символов.
//     Если в поле хранится больше 3 значений, то дополнительно в него выводится общее количество невыведенных значений
///    в виде текста "(еще Х значений)". Остальные значения выводятся только в расшифровку поля.
//   * Если ДобавлятьРасшифровку = Ложь, то в поле выводятся все значения, разделенные ";". Каждое значение выводится
//     полностью и с новой строки. Поле Расшифровка результата не заполняется.
//   * Если значение параметра ЗначениеИзСервиса не соответствует ожидаемому для поля ОКВЭД, то это значение
//     выводится в поле без изменений, а расшифровка не добавляется. При этом, оформление поля в любом случае остается
//     в виде гиперссылки.
//
// Параметры:
//  ЗначениеИзСервиса - Произвольный - значение, которое необходимо преобразовать.
//  ДобавлятьРасшифровку - Булево - признак того, что необходима расшифровка поля.
//  КодыОКВЭДВОтборе - Массив из Строка - коды ОКВЭД, которые пользователь указал для отбора.
//    См. КодыОКВЭДВОтборе.
//
// Возвращаемое значение:
//  Структура - результат обработки входящего значения:
//    * Представление - Произвольный - значение, которое будет выведено в ячейку отчета.
//    * Расшифровка - Неопределено - если выводить расшифровку не нужно, либо если значение параметра ЗначениеИзСервиса
//                    не соответствует ожидаемому для поля.
//                  - Структура - расшифровка поля см. НовыйЗначениеРасшифровки
//
Функция ОбработатьПолеОКВЭД(
		Знач ЗначениеИзСервиса,
		ДобавлятьРасшифровку,
		КодыОКВЭДВОтборе)
	
	Результат = Новый Структура;
	Результат.Вставить("Представление", "");
	Результат.Вставить("Расшифровка", Неопределено);
	
	Если Не ЗначениеЗаполнено(ЗначениеИзСервиса) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеИзСервиса) <> Тип("Массив") Тогда
		Если ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(ЗначениеИзСервиса) Тогда
			ЗначениеИзСервиса = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗначениеИзСервиса);
		Иначе
			Результат.Представление = ЗначениеИзСервиса;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеИзСервиса.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	РасшифровкаОКВЭД           = Новый СписокЗначений;
	ПредставлениеДляСохранения = Новый СписокЗначений;
	
	Для Каждого ОписаниеОКВЭД Из ЗначениеИзСервиса Цикл
		
		ДанныеОКВЭД = ДанныеОКВЭД(ОписаниеОКВЭД, ДобавлятьРасшифровку);
		
		Если ДобавлятьРасшифровку Тогда
			РасшифровкаОКВЭД.Добавить(
				ДанныеОКВЭД.Значение,
				ДанныеОКВЭД.Представление);
		Иначе
			ПредставлениеДляСохранения.Добавить(ДанныеОКВЭД.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДобавлятьРасшифровку Тогда
		
		РасшифровкаОКВЭД.СортироватьПоПредставлению();
		
		Результат.Представление = ПредставлениеОКВЭДДляВыводаНаЭкран(
			РасшифровкаОКВЭД,
			КодыОКВЭДВОтборе);
			
		Расшифровка = НовыйЗначениеРасшифровки();
		Расшифровка.Действие = "РасшифровкаОКВЭД";
		Расшифровка.Значение = РасшифровкаОКВЭД.ВыгрузитьЗначения();
		
		Результат.Расшифровка = Расшифровка;
		
		РасшифровкаОКВЭД.Очистить();
		
	Иначе
		
		ПредставлениеДляСохранения.СортироватьПоЗначению();
		
		Результат.Представление = СтрСоединить(
			ПредставлениеДляСохранения.ВыгрузитьЗначения(),
			";" + Символы.ПС);
		
		ПредставлениеДляСохранения.Очистить();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Преобразует данные ОКВЭД, полученные из веб-сервиса в значение, пригодное для обработки.
// Если полученное значение отличается от ожидаемого, то оно возвращается без изменения.
//
// Параметры:
//  ЗначениеОКВЭД - Произвольный - значение, полученное из веб-сервиса.
//  СократитьПредставление - Булево - если Истина, то представление будет обрезано до количества символов, указанных в
//    методе ПоискКонтрагентовСлужебныйКлиентСервер.КраткоеПредставлениеОКВЭД.
//
// Возвращаемое значение:
//  Структура - результат преобразования:
//    * Представление - Строка - код и наименование, если получено правильное значение ОКВЭД
//                    - Произвольный - исходное значение, если его тип не соответствует ожидаемому.
//    * Значение - Структура - отдельные элементы описывающие значение ОКВЭД:
//        ** Код - Строка - код ОКВЭД, если получено правильное значение ОКВЭД.
//               - Неопределено - если полученное значение ОКВЭД не соответствует ожиданию.
//        ** Наименование - Строка - наименование ОКВЭД, если получено правильное значение ОКВЭД.
//                        - Неопределено - если полученное значение ОКВЭД не соответствует ожиданию.
//
Функция ДанныеОКВЭД(
		ЗначениеОКВЭД,
		СократитьПредставление)
	
	Результат = Новый Структура;
	
	Результат.Вставить("Представление", "");
	
	РезультатЗначение = Новый Структура("Код, Наименование");
	Результат.Вставить("Значение", РезультатЗначение);
	
	Если Не ПоискКонтрагентовСлужебныйКлиентСервер.ЭтоСтруктура(ЗначениеОКВЭД) Тогда
		Результат.Представление = ЗначениеОКВЭД;
		Возврат Результат;
	КонецЕсли;
	
	ПравильноеЗначение = Новый Структура("code, name");
	ЗаполнитьЗначенияСвойств(ПравильноеЗначение, ЗначениеОКВЭД);
	
	РезультатЗначение.Код          = ПравильноеЗначение.code;
	РезультатЗначение.Наименование = ПравильноеЗначение.name;
	
	Результат.Представление = РезультатЗначение.Код + " " + РезультатЗначение.Наименование;
	
	Если СократитьПредставление Тогда
		Результат.Представление = ПоискКонтрагентовСлужебныйКлиентСервер.КраткоеПредставлениеОКВЭД(
			Результат.Представление);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует краткое представление ОКВЭД для вывода на экран.
// Правила формирования представления:
//  - В поле выводится максимум 3 значения. Если значений больше, то в конце представления добавляется текст
//    "(еще ХХ значений)".
//  - Представление каждого отдельного кода урезается до количества символов, указанных в методе
//    ПоискКонтрагентовСлужебныйКлиентСервер.КраткоеПредставлениеОКВЭД.
//  - Если в критериях отбора задан отбор по ОКВЭД, то в представление в первую очередь выводятся те значения, которые
//    входят в список указанных пользователем. Остальные значения всегда выводятся в порядке возрастания кода.
//
// Параметры:
//  РасшифровкаОКВЭД - СписокЗначений Из Структура - данные расшифровки поля, содержащего ОКВЭД:
//    * Значение - Структура - отдельные элементы описывающие значение ОКВЭД.
//      См. ДанныеОКВЭД.Значение.
//    * Представление - Строка - представление значения ОКВЕД.
//      См. ДанныеОКВЭД.Представление.
//  КодыОКВЭДВОтборе - Массив из Строка - коды ОКВЭД, которые пользователь указал для отбора.
//    См. КодыОКВЭДВОтборе.
//
// Возвращаемое значение:
//  Строка - представление списка ОКВЭД контрагента для вывода на экран.
//
Функция ПредставлениеОКВЭДДляВыводаНаЭкран(
		РасшифровкаОКВЭД,
		КодыОКВЭДВОтборе)
	
	Результат = "";
	
	ПредставлениеПоля = Новый Массив;
	ОбработанныеКоды  = Новый Массив;
	
	КоличествоОтбор = КодыОКВЭДВОтборе.ВГраница();
	КоличествоОтборМаксимум = ?(КоличествоОтбор > 2, 2, КоличествоОтбор);
	
	КоличествоЭлементов = РасшифровкаОКВЭД.Количество();
	
	КоличествоЭлементовДляВывода = 3;
	
	КоличествоВывести = ?(КоличествоЭлементов > КоличествоЭлементовДляВывода,
		КоличествоЭлементовДляВывода,
		КоличествоЭлементов);
			
	КоличествоОтборМаксимум = ?(КоличествоВывести - 1 < КоличествоОтборМаксимум,
		КоличествоВывести - 1,
		КоличествоОтборМаксимум);
		
	Если КодыОКВЭДВОтборе.Количество() > 0 Тогда
		
		ИндексПоКоду = Новый Соответствие;
		
		Для Каждого ЭлементСписка Из РасшифровкаОКВЭД Цикл
			ИндексПоКоду.Вставить(
				ЭлементСписка.Значение.Код,
				РасшифровкаОКВЭД.Индекс(ЭлементСписка));
		КонецЦикла;
			
		ВыведеноИзОтбора = 0;
		Для НомерОтбор = 0 По КоличествоОтбор Цикл
			
			КодОКВЭД = КодыОКВЭДВОтборе[НомерОтбор];
			ИдентификаторСтроки = ИндексПоКоду[КодОКВЭД];
			Если ИдентификаторСтроки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПредставлениеПоля.Добавить(
				РасшифровкаОКВЭД[ИдентификаторСтроки].Представление);
			
			ОбработанныеКоды.Добавить(КодОКВЭД);
			КоличествоВывести = КоличествоВывести - 1;
			
			ВыведеноИзОтбора = ВыведеноИзОтбора + 1;
			Если ВыведеноИзОтбора >= КоличествоОтборМаксимум Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если КоличествоВывести > 0 Тогда
		
		Для Каждого ЭлементРасшифровки Из РасшифровкаОКВЭД Цикл
			
			Если ОбработанныеКоды.Найти(ЭлементРасшифровки.Значение.Код) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПредставлениеПоля.Добавить(ЭлементРасшифровки.Представление);
			
			КоличествоВывести = КоличествоВывести - 1;
			Если КоличествоВывести <= 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Результат = СтрСоединить(ПредставлениеПоля, ";" + Символы.ПС);
	
	КоличествоДополнить = РасшифровкаОКВЭД.Количество() - ПредставлениеПоля.Количество();
	Если КоличествоДополнить > 0 Тогда
		
		ПредставлениеКоличества = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru=';(еще %1 значение);(еще %1 значения);(еще %1 значения);(еще %1 значений);'"),
			КоличествоДополнить,
			,
			"ЧДЦ=0; ЧН=0");
		
		Результат = "" + Результат + " " + ПредставлениеКоличества;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти