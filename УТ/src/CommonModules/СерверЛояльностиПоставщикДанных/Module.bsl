///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверяет блокировку бонусов клиента
//
// Параметры:
//  ДисконтнаяКарта - ОпределяемыйТип.КартаЛояльностиСерверЛояльности - карта клиента.
//
// Возвращаемое значение:
//  Булево - Истина - если есть блокировка бонусов, Ложь, если нет блокировки.
//
Функция БонусыЗаблокированы(ДисконтнаяКарта) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостояниеБонусовСерверЛояльности.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	СостояниеБонусовСерверЛояльности.ДатаБлокировки КАК ДатаБлокировки
		|ИЗ
		|	РегистрСведений.СостояниеБонусовСерверЛояльности КАК СостояниеБонусовСерверЛояльности
		|ГДЕ
		|	СостояниеБонусовСерверЛояльности.ДисконтнаяКарта = &ДисконтнаяКарта";
	
	Запрос.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Блокирует бонусы клиента после ответа Сервиса Лояльности для предотвращения двойного списания
//
// Параметры:
//  ДисконтнаяКарта - ОпределяемыйТип.КартаЛояльностиСерверЛояльности - карта клиента.
//  ДатаБлокировки  - Дата - дата и время блокировки бонусов.
//
Процедура ЗаблокироватьБонусы(ДисконтнаяКарта, ДатаБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостояниеБонусовСерверЛояльности");
	ЭлементБлокировки.УстановитьЗначение("ДисконтнаяКарта", ДисконтнаяКарта);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей = РегистрыСведений.СостояниеБонусовСерверЛояльности.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДисконтнаяКарта.Установить(ДисконтнаяКарта);
		ЗаписьРегистра = НаборЗаписей.Добавить();
		ЗаписьРегистра.ДисконтнаяКарта = ДисконтнаяКарта;
		ЗаписьРегистра.ДатаБлокировки = ДатаБлокировки;
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Разблокирует бонусы клиента
//
// Параметры: 
//  ДисконтнаяКарта - ОпределяемыйТип.КартаЛояльностиСерверЛояльности - карта клиента
//
Процедура РазблокироватьБонусы(ДисконтнаяКарта) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостояниеБонусовСерверЛояльности");
	ЭлементБлокировки.УстановитьЗначение("ДисконтнаяКарта", ДисконтнаяКарта);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей = РегистрыСведений.СостояниеБонусовСерверЛояльности.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДисконтнаяКарта.Установить(ДисконтнаяКарта);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Списывает бонусы клиента
//
// Параметры: 
//  ДисконтнаяКарта 		  - ОпределяемыйТип.КартаЛояльностиСерверЛояльности - карта клиента.
//  КоличествоБонусныхБаллов  - Число
//
Процедура СписатьБонусы(ДисконтнаяКарта, КоличествоБонусныхБаллов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	БонуснаяПрограммаЛояльности = Неопределено;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ЗаполнитьБонуснуюПрограммуПоДисконтнойКарте(ДисконтнаяКарта, БонуснаяПрограммаЛояльности);
	БонусныеБаллыРезерв = ПолучитьБонусныеБаллыРезерв(ДисконтнаяКарта);
	
	МенеджерЗаписи = РегистрыСведений.БонусныеБаллыКСписанию.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ДисконтнаяКарта = ДисконтнаяКарта;
	МенеджерЗаписи.БонуснаяПрограммаЛояльности = БонуснаяПрограммаЛояльности;
	МенеджерЗаписи.КСписанию = КоличествоБонусныхБаллов + БонусныеБаллыРезерв;
	МенеджерЗаписи.Записать(Истина);
	
	РазблокироватьБонусы(ДисконтнаяКарта);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#Область ПараметрыРасчета
// Возвращает структуру параметров поиска дисконтной карты из http запроса
//
// Параметры:
//  Запрос		 - Структура - Параметры http-запроса.
//  Результат	 - Структура - содержит в себе набор параметров, которые могут быть переданы через http-запрос:
//  * ИдентификаторКартыКлиента 	- Строка - Номер дисконтной карты.
//  * УникальныйИдентификаторКарты 	- Строка - Уникальный идентификатор дисконтной карты.
//  * НомерТелефона 				- Строка - Номер телефона владельца дисконтной карты.
//  * АдресЭП 						- Строка - Электронная почта владельца дисконтной карты.
//
Процедура ПараметрыДанныхКартыКлиента(Запрос, Результат) Экспорт
	
	ПараметрыМетода = Новый Структура;
	
	ПараметрыМетода.Вставить("ИдентификаторКартыКлиента"	,	Запрос["ПараметрыЗапроса"].Получить("ClientCardID"));
	ПараметрыМетода.Вставить("УникальныйИдентификаторКарты"	, 	Запрос["ПараметрыЗапроса"].Получить("CardGUID"));
	ПараметрыМетода.Вставить("НомерТелефона"				,	Запрос["ПараметрыЗапроса"].Получить("Phone"));
	ПараметрыМетода.Вставить("АдресЭП"						, 	Запрос["ПараметрыЗапроса"].Получить("Email"));
	ПараметрыМетода.Вставить("ТребуетсяБлокировкаБонусов"	, 	Истина);
	
	Результат = ПараметрыМетода;
	
КонецПроцедуры

// Процедура дополняет параметры выполнения метода дополнительными параметрами расчета
//
// Параметры:
//  Запрос			 - Структура - Параметры http-запроса.
//  ПараметрыМетода	 - Структура - Параметры выполнения метода.
//   см. ПараметрыДанныхКартыКлиента()
//
Процедура ДополнитьСтруктураПараметрамиМетодаСписатьБонусы(Запрос, ПараметрыМетода) Экспорт
	ПараметрыМетода.Вставить("КоличествоБонусныхБаллов"	, 		ПреобразоватьПараметрМетодаВЧисло(Запрос["ПараметрыЗапроса"].Получить("BonusesCount")));
КонецПроцедуры

// Процедура дополняет параметры выполнения метода дополнительными параметрами расчета
//
// Параметры:
//  Запрос			 - Структура - Параметры http-запроса.
//  ПараметрыМетода	 - Структура - Параметры выполнения метода.
//   см. ПараметрыДанныхКартыКлиента()
//
Процедура ДополнитьСтруктураПараметрамиМетодаВыдатьКарту(Запрос, ПараметрыМетода) Экспорт
	ПараметрыМетода.Вставить("Магазин"					, Запрос["ПараметрыЗапроса"].Получить("Store"));
	ПараметрыМетода.Вставить("ГУИДВидаКарты"			, Запрос["ПараметрыЗапроса"].Получить("ClientCardTypeUID"));
	ПараметрыМетода.Вставить("Клиент"					, Запрос["ПараметрыЗапроса"].Получить("Client"));
	ПараметрыМетода.Вставить("ДатаРождения"				, Запрос["ПараметрыЗапроса"].Получить("DateOfBirth"));
КонецПроцедуры

// Процедура заполняет параметры метода информация о запретах продаж.
//
// Параметры:
//  Запрос			 - Структура - Параметры http-запроса.
//  ПараметрыМетода	 - Структура - Параметры выполнения метода.
//
Процедура ПараметрыМетодаЗапретыПродаж(Запрос, ПараметрыМетода) Экспорт
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Магазин"					, Запрос["ПараметрыЗапроса"].Получить("Store"));
КонецПроцедуры

// Процедура заполняет параметры метода получить данные подарочного сертификата
//
// Параметры:
//  Запрос			 - Структура - Параметры http-запроса.
//  ПараметрыМетода	 - Структура - Параметры выполнения метода.
//
Процедура ПараметрыПодарочногоСертификата(Запрос, ПараметрыМетода) Экспорт
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("НомерСертификата"			, Запрос["ПараметрыЗапроса"].Получить("GiftCardNumber"));
	ПараметрыМетода.Вставить("ГУИДСертификата"			, Запрос["ПараметрыЗапроса"].Получить("GiftCardUID"));
КонецПроцедуры

// Процедура дополняет параметры выполнения метода списать подарочный сертификат
//
// Параметры:
//  Запрос			 - Структура - Параметры http-запроса.
//  ПараметрыМетода	 - Структура - Параметры выполнения метода.
//   см. ПараметрыДанныхКартыКлиента()
//
Процедура ДополнитьСтруктураПараметрамиМетодаСписатьПодарочныйСертификат(Запрос, ПараметрыМетода) Экспорт
	ПараметрыМетода.Вставить("СуммаСписания"			, ПреобразоватьПараметрМетодаВЧисло(Запрос["ПараметрыЗапроса"].Получить("GiftCardWriteOffAmount")));
КонецПроцедуры

// Процедура заполняет параметры метода получить список управляемых скидок
//
// Параметры:
//  Запрос			 - Структура - Параметры http-запроса.
//  ПараметрыМетода	 - Структура - Параметры выполнения метода.
//
Процедура ПараметрыЗапросаУправляемыеСкидки(Запрос, ПараметрыМетода) Экспорт
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("УникальныйИдентификаторКарты"	, Запрос["ПараметрыЗапроса"].Получить("CardGUID"));
	ПараметрыМетода.Вставить("ИдентификаторКартыКлиента"	, Запрос["ПараметрыЗапроса"].Получить("ClientCardID"));
	ПараметрыМетода.Вставить("МаксимальныйПроцентСкидки"	, ПреобразоватьПараметрМетодаВЧисло(Запрос["ПараметрыЗапроса"].Получить("MaxSale")));
	ПараметрыМетода.Вставить("МаксимальныйПроцентНаценки"	, ПреобразоватьПараметрМетодаВЧисло(Запрос["ПараметрыЗапроса"].Получить("MaxMarkup")));
	ПараметрыМетода.Вставить("ИспользоватьОтборы"			, ПреобразоватьПараметрМетодаВБулево(Запрос["ПараметрыЗапроса"].Получить("UseSelection")));
	ПараметрыМетода.Вставить("Клиент"						, Запрос["ПараметрыЗапроса"].Получить("Client"));
	ПараметрыМетода.Вставить("Магазин"						, Запрос["ПараметрыЗапроса"].Получить("Store"));
КонецПроцедуры

// Процедура заполняет параметры метода получить данные промокода
//
// Параметры:
//  Запрос			 - Структура - Параметры http-запроса.
//  ПараметрыМетода	 - Структура - Параметры выполнения метода.
//
Процедура ПараметрыЗапросаПромокода(Запрос, ПараметрыМетода) Экспорт
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Промокод"					, Запрос["ПараметрыЗапроса"].Получить("Promocode"));
КонецПроцедуры

// Процедура заполняет параметры метода получить виды дисконтных карт
//
// Параметры:
//  Запрос			 - Структура - Параметры http-запроса.
//  ПараметрыМетода	 - Структура - Параметры выполнения метода.
//
Процедура ПараметрыЗапросаВидыДисконтныхКарт(Запрос, ПараметрыМетода) Экспорт
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Магазин"						, Запрос["ПараметрыЗапроса"].Получить("Store"));
КонецПроцедуры

// Процедура заполняет параметры метода получить список продавцов
//
// Параметры:
//  Запрос			 - Структура - Параметры http-запроса.
//  ПараметрыМетода	 - Структура - Параметры выполнения метода.
//
Процедура ПараметрыЗапросаСпискаПродавцов(Запрос, ПараметрыМетода) Экспорт
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Магазин"						, Запрос["ПараметрыЗапроса"].Получить("Store"));
КонецПроцедуры

// Процедура заполняет параметры метода получить список серий
//
// Параметры:
//  Запрос			 - Структура - Параметры http-запроса.
//  ПараметрыМетода	 - Структура - Параметры выполнения метода.
//
Процедура ПараметрыЗапросаСпискаСерий(Запрос, ПараметрыМетода) Экспорт
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ГУИДНоменклатуры"			, Запрос["ПараметрыЗапроса"].Получить("Product"));
	ПараметрыМетода.Вставить("Характеристика"			, Запрос["ПараметрыЗапроса"].Получить("Characteristic"));
	ПараметрыМетода.Вставить("ВидНоменклатуры"			, Запрос["ПараметрыЗапроса"].Получить("TypeProduct"));
	ПараметрыМетода.Вставить("Магазин"					, Запрос["ПараметрыЗапроса"].Получить("Store"));
	ПараметрыМетода.Вставить("Продажа"					, ПреобразоватьПараметрМетодаВБулево(Запрос["ПараметрыЗапроса"].Получить("TypeOperationSale")));
КонецПроцедуры

// Процедура заполняет параметры метода получить данные серии
//
// Параметры:
//  Запрос			 - Структура - Параметры http-запроса.
//  ПараметрыМетода	 - Структура - Параметры выполнения метода.
//
Процедура ПараметрыЗапросаДанныеСерии(Запрос, ПараметрыМетода) Экспорт
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ГУИДСерии"				, Запрос["ПараметрыЗапроса"].Получить("BatchUID"));
КонецПроцедуры

// Процедура заполняет параметры метода получить актуальную цену
//
// Параметры:
//  Запрос			 - Структура - Параметры http-запроса.
//  ПараметрыМетода	 - Структура - Параметры выполнения метода.
//
Процедура ПараметрыЗапросаАктуальнойЦены(Запрос, ПараметрыМетода) Экспорт
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ГУИДВидЦены"				, Запрос["ПараметрыЗапроса"].Получить("TypePriceUID"));
	ПараметрыМетода.Вставить("Характеристика"			, Запрос["ПараметрыЗапроса"].Получить("Characteristic"));
	ПараметрыМетода.Вставить("ГУИДНоменклатуры"			, Запрос["ПараметрыЗапроса"].Получить("Product"));
	ПараметрыМетода.Вставить("ГУИДСерии"				, Запрос["ПараметрыЗапроса"].Получить("BatchUID"));
	
КонецПроцедуры

// Возвращает структуру параметров из http запроса поиска карты клиента
//
// Параметры:
//  Запрос - Структура - Параметры http-запроса.
//  Результат - Структура - содержит в себе набор параметров, которые могут быть переданы через http-запрос:
//    * ИдентификаторКартыКлиента 						- Строка
//    * НомерТелефона 									- Строка
//    * АдресЭП 										- Строка
//    * БлокироватьКарту 								- Булево
//    * УникальныйИдентификаторВладельцаКарты 			- Строка
//
Процедура ПараметрыМетодаИзЗапросаНайтиКартуКлиента(Запрос, Результат) Экспорт
	
	ПараметрыМетода = Новый Структура;
	
	ПараметрыМетода.Вставить("ИдентификаторКартыКлиента"			, Запрос["ПараметрыЗапроса"].Получить("ClientCardID"));
	ПараметрыМетода.Вставить("НомерТелефона"						, Запрос["ПараметрыЗапроса"].Получить("Phone"));
	ПараметрыМетода.Вставить("АдресЭП"								, Запрос["ПараметрыЗапроса"].Получить("Email"));
	ПараметрыМетода.Вставить("БлокироватьКарту"						, Запрос["ПараметрыЗапроса"].Получить("BlockBonuses"));
	ПараметрыМетода.Вставить("УникальныйИдентификаторВладельцаКарты", Запрос["ПараметрыЗапроса"].Получить("ClientGUID"));
	ПараметрыМетода.Вставить("УникальныйИдентификаторКарты" 		, Запрос["ПараметрыЗапроса"].Получить("CardGUID"));
	
	Результат = ПараметрыМетода;
	
КонецПроцедуры
#КонецОбласти

#Область СтруктураОтвета
// Возвращает структуру параметров ответа http-сервиса
//
// Параметры:
//  ВариантОтвета - Строка - в зависимости от указанного варианта будет возвращаться та или иная структура ответа
//  Результат - Структура - содержит в себе набор параметров ответа http-сервиса "Сервис лояльности":
//    * Error 					- Булево
//    * ErrorMessage 			- Строка
//    * AllowControl 			- Булево
//    * RestrictionsList 		- Массив
//    * GiftCardName 			- Строка
//    * GiftCardRef 			- Строка
//    * GiftCard 				- Структура
//    * GiftCardNumber 			- Строка
//    * GiftCardValue 			- Число
//    * GiftCardBalance 		- Число
//    * Blocked 				- Булево
//    * UseAutomaticDiscounts 	- Булево
//    * BonusCount 				- Число
//    * BonusRate 				- Число
//    * BonusCurrency 			- Строка
//    * PaymentPercent 			- Число
//    * EndDate 				- Число
//    * ClientNotFound 			- Дата
//    * ExistingCard 			- Булево
//    * CardID 					- Строка
//    * Client 					- Строка
//    * PhoneNumber 			- Строка
//    * Email 					- Строка
//
Процедура ПолучитьСтруктуруОтвета(ВариантОтвета = "ЗапросКоличестваБонусов", Результат = Неопределено) Экспорт
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Error", Ложь);
	СтруктураОтвета.Вставить("ErrorMessage", "");
	СтруктураОтвета.Вставить("Version", ОбщегоНазначенияСерверЛояльностиКлиентСервер.ВерсияБиблиотеки());
	
	Если ВариантОтвета = "ИнформацияОЗапретахПродаж" Тогда
		
		СтруктураОтвета.Вставить("AllowControl", Истина);
		СтруктураОтвета.Вставить("RestrictionsList", Новый Массив);
		
	ИначеЕсли ВариантОтвета = "ПроверкаПодарочногоСертификата" Тогда
		
		СтруктураОтвета.Вставить("GiftCardUsed", Ложь);
		
	ИначеЕсли ВариантОтвета = "ЗапросДанныхПодарочногоСертификата" Тогда
		
		СтруктураСертификата = Новый Структура;
		СтруктураСертификата.Вставить("GiftCardName", "");
		СтруктураСертификата.Вставить("GiftCardRef", "");
		
		СтруктураОтвета.Вставить("GiftCard", СтруктураСертификата);
		СтруктураОтвета.Вставить("GiftCardNumber", "");
		СтруктураОтвета.Вставить("GiftCardValue", 0);
		СтруктураОтвета.Вставить("GiftCardBalance", 0);
		СтруктураОтвета.Вставить("GiftCardLimit", Ложь);
		СтруктураОтвета.Вставить("GiftCardAvailable", 0);
		СтруктураОтвета.Вставить("Blocked", Ложь);
		СтруктураОтвета.Вставить("BalanceBurnout", Ложь);
		
	ИначеЕсли ВариантОтвета = "ЗапросСостоянияПромокода" Тогда
		
		СтруктураОтвета.Вставить("PromocodeIsAvalible", Ложь);
		СтруктураОтвета.Вставить("PromocodeStatus", "");
		СтруктураОтвета.Вставить("PromocodeDiscountDescription", "");
		СтруктураОтвета.Вставить("PromocodeDiscount", "");
		
	ИначеЕсли ВариантОтвета = "ЗапросИспользованияАвтоматическихСкидок" Тогда
		
		СтруктураОтвета.Вставить("UseAutomaticDiscounts", Ложь);
		СтруктураОтвета.Вставить("UseCounterpartyBonuses", Ложь);
		
	ИначеЕсли ВариантОтвета = "ПолучитьОстатки" Тогда
		
		СтруктураОтвета.Вставить("LeftoversList", Новый Массив);
		
	ИначеЕсли ВариантОтвета = "ЗапросКартЛояльности" Тогда
		
		СтруктураОтвета.Вставить("LoyaltyCardsList", Новый Массив);
		
	ИначеЕсли ВариантОтвета = "ЗапросОборотовПродажи" Тогда
		
		СтруктураОтвета.Вставить("CardRef", "");
		СтруктураОтвета.Вставить("SellCount", 0);
		СтруктураОтвета.Вставить("Barcode", "");
		СтруктураОтвета.Вставить("MagneticCode", "");
		СтруктураОтвета.Вставить("ClientNotFound", Истина);
		
	ИначеЕсли ВариантОтвета = "ПолучитьДанныеСерии" Тогда
		
		СтруктураОтвета.Вставить("NameBatch", "");
		СтруктураОтвета.Вставить("BatchUsed", Ложь);
		
	ИначеЕсли ВариантОтвета = "СтруктураПолученияЦены" Тогда
		
		СтруктураОтвета.Вставить("Price", 0);
		
	ИначеЕсли ВариантОтвета = "ПроверкаСоединения" Тогда
		
		СтруктураОтвета.Вставить("Connection", Ложь);
		
	ИначеЕсли ВариантОтвета = "ТекстовоеСообщение" Тогда
		
		СтруктураОтвета.Вставить("TextMessage", "");
		
	ИначеЕсли ВариантОтвета <> "" Тогда
		
		КодВалюты = "";
		СерверЛояльностиПоставщикДанныхПереопределяемый.ПолучитьКодВалюты(КодВалюты);
		
		СтруктураОтвета.Вставить("BonusCount", 0);
		СтруктураОтвета.Вставить("BonusRate", 1);
		СтруктураОтвета.Вставить("BonusCurrency", КодВалюты);
		СтруктураОтвета.Вставить("PaymentPercent", 0);
		
		Если ВариантОтвета = "ЗапросКоличестваБонусов" Тогда
			
			СтруктураОтвета.Вставить("CardRef", "");
			СтруктураОтвета.Вставить("Barcode", "");
			СтруктураОтвета.Вставить("MagneticCode", "");
			СтруктураОтвета.Вставить("EndDate", Дата(1, 1, 1));
			СтруктураОтвета.Вставить("ClientNotFound", Истина);
			
		ИначеЕсли ВариантОтвета = "КартаКлиента" Тогда
			
			СтруктураОтвета.Вставить("ExistingCard", Истина);
			СтруктураОтвета.Вставить("CardRef", "");
			СтруктураОтвета.Вставить("CardID", "");
			СтруктураОтвета.Вставить("Client", "");
			СтруктураОтвета.Вставить("PhoneNumber", "");
			СтруктураОтвета.Вставить("Email", "");
			СтруктураОтвета.Вставить("DateOfBirth", Дата(1, 1, 1));
			СтруктураОтвета.Вставить("ElseClient", Ложь);
			
		КонецЕсли;
	КонецЕсли;
	
	Результат = СтруктураОтвета;
	
КонецПроцедуры

// Возвращает структуру параметров ответа соединение с сервером лояльности
//
// Параметры:
//  СтруктураОтвета - Структура - содержит в себе набор параметров ответа http-сервиса "Сервис лояльности":
//    * Error 					- Булево
//    * ErrorMessage 			- Строка
//    * Version 				- Строка
//    * Connection 				- Булево
//
Процедура ПолучитьСтруктуруОтветаПроверкаСоединения(СтруктураОтвета) Экспорт
	
	СтруктураОтвета = Новый Структура;
	ПолучитьСтруктуруОтветаОбщиеПараметры(СтруктураОтвета);
	СтруктураОтвета.Вставить("Connection", Ложь);
	
КонецПроцедуры

// Возвращает структуру параметров ответа получить бонусы клиента
//
// Параметры:
//  ВариантОтвета - Строка - в зависимости от указанного варианта будет возвращаться та или иная структура ответа
//  Результат - Структура - содержит в себе набор параметров ответа http-сервиса "Сервис лояльности":
//    * Error 					- Булево
//    * ErrorMessage 			- Строка
//    * Version 				- Строка
//    * BonusCount 				- Число
//    * BonusRate		 		- Число
//    * BonusCurrency			- Строка
//    * PaymentPercent 			- Число
//    * CardRef					- Строка
//    * Barcode					- Строка
//    * MagneticCode 			- Строка
//    * EndDate			 		- Дата
//    * ClientNotFound 			- Булево
//
Процедура ПолучитьСтруктуруОтветаБонусыКлиента(СтруктураОтвета) Экспорт
	
	СтруктураОтвета = Новый Структура;
	ПолучитьСтруктуруОтветаОбщиеПараметры(СтруктураОтвета);
	КодВалюты = "";
	СерверЛояльностиПоставщикДанныхПереопределяемый.ПолучитьКодВалюты(КодВалюты);
	СтруктураОтвета.Вставить("BonusCount", 0);
	СтруктураОтвета.Вставить("BonusRate", 1);
	СтруктураОтвета.Вставить("BonusCurrency", КодВалюты);
	СтруктураОтвета.Вставить("PaymentPercent", 0);
	СтруктураОтвета.Вставить("CardRef", "");
	СтруктураОтвета.Вставить("Barcode", "");
	СтруктураОтвета.Вставить("MagneticCode", "");
	СтруктураОтвета.Вставить("EndDate", Дата(1, 1, 1));
	СтруктураОтвета.Вставить("ClientNotFound", Истина);
	
КонецПроцедуры

// Возвращает структуру параметров ответа текстового сообщения
//
// Параметры:
//  СтруктураОтвета - Структура - содержит в себе набор параметров ответа http-сервиса "Сервис лояльности":
//    * Error 					- Булево
//    * ErrorMessage 			- Строка
//    * Version 				- Строка
//    * TextMessage 			- Строка
//
Процедура ПолучитьСтруктуруОтветаТекстовоеСообщение(СтруктураОтвета) Экспорт
	
	СтруктураОтвета = Новый Структура;
	ПолучитьСтруктуруОтветаОбщиеПараметры(СтруктураОтвета);
	СтруктураОтвета.Вставить("TextMessage", "");
	
КонецПроцедуры

// Возвращает структуру параметров ответа по данным карты лояльности
//
// Параметры:
//  СтруктураОтвета - Структура - содержит в себе набор параметров ответа http-сервиса "Сервис лояльности":
//    * Error 					- Булево
//    * ErrorMessage 			- Строка
//    * Version 				- Строка
//    * BonusCount 				- Число
//    * BonusRate		 		- Число
//    * BonusCurrency			- Строка
//    * PaymentPercent 			- Число
//    * ExistingCard 			- Булево
//    * CardRef 				- Строка
//    * CardID 					- Строка
//    * Client 					- Строка
//    * PhoneNumber 			- Строка
//    * Email 					- Строка
//    * DateOfBirth 			- Дата
//    * ElseClient 				- Булево
//
Процедура ПолучитьСтруктуруОтветаКартаКлиента(СтруктураОтвета) Экспорт
	
	СтруктураОтвета = Новый Структура;
	ПолучитьСтруктуруОтветаОбщиеПараметры(СтруктураОтвета);
	КодВалюты = "";
	СерверЛояльностиПоставщикДанныхПереопределяемый.ПолучитьКодВалюты(КодВалюты);
		
	СтруктураОтвета.Вставить("BonusCount", 0);
	СтруктураОтвета.Вставить("BonusRate", 1);
	СтруктураОтвета.Вставить("BonusCurrency", КодВалюты);
	СтруктураОтвета.Вставить("PaymentPercent", 0);
	СтруктураОтвета.Вставить("ExistingCard", Истина);
	СтруктураОтвета.Вставить("CardRef", "");
	СтруктураОтвета.Вставить("CardID", "");
	СтруктураОтвета.Вставить("Client", "");
	СтруктураОтвета.Вставить("PhoneNumber", "");
	СтруктураОтвета.Вставить("Email", "");
	СтруктураОтвета.Вставить("DateOfBirth", Дата(1, 1, 1));
	СтруктураОтвета.Вставить("ElseClient", Ложь);
	
КонецПроцедуры

// Возвращает структуру параметров ответа по данным запрета продаж
//
// Параметры:
//  СтруктураОтвета - Структура - содержит в себе набор параметров ответа http-сервиса "Сервис лояльности":
//    * Error 					- Булево
//    * ErrorMessage 			- Строка
//    * Version 				- Строка
//    * AllowControl 			- Булево
//    * RestrictionsList		- Массив
//
Процедура ПолучитьСтруктуруОтветаИнформацияОЗапретеПродаж(СтруктураОтвета) Экспорт
	
	СтруктураОтвета = Новый Структура;
	ПолучитьСтруктуруОтветаОбщиеПараметры(СтруктураОтвета);
	СтруктураОтвета.Вставить("AllowControl", Истина);
	СтруктураОтвета.Вставить("RestrictionsList", Новый Массив);
	
КонецПроцедуры

// Возвращает структуру параметров ответа данные подарочного сертификата
//
// Параметры:
//  СтруктураОтвета - Структура - содержит в себе набор параметров ответа http-сервиса "Сервис лояльности":
//    * Error 					- Булево
//    * ErrorMessage 			- Строка
//    * Version 				- Строка
//    * GiftCard	 			- Структура
//      ** GiftCardName			- Строка
//      ** GiftCardRef			- Строка
//    * GiftCardNumber			- Строка
//    * GiftCardValue			- Число
//    * GiftCardBalance			- Число
//    * GiftCardLimit			- Булево
//    * GiftCardAvailable		- Число
//    * Blocked					- Булево
//    * BalanceBurnout			- Булево
//
Процедура ПолучитьСтруктуруОтветаДанныеПодарочногоСертификата(СтруктураОтвета) Экспорт
	
	СтруктураОтвета = Новый Структура;
	ПолучитьСтруктуруОтветаОбщиеПараметры(СтруктураОтвета);
	
	СтруктураСертификата = Новый Структура;
	СтруктураСертификата.Вставить("GiftCardName", "");
	СтруктураСертификата.Вставить("GiftCardRef", "");
		
	СтруктураОтвета.Вставить("GiftCard", СтруктураСертификата);
	СтруктураОтвета.Вставить("GiftCardNumber", "");
	СтруктураОтвета.Вставить("GiftCardValue", 0);
	СтруктураОтвета.Вставить("GiftCardBalance", 0);
	СтруктураОтвета.Вставить("GiftCardLimit", Ложь);
	СтруктураОтвета.Вставить("GiftCardAvailable", 0);
	СтруктураОтвета.Вставить("Blocked", Ложь);
	СтруктураОтвета.Вставить("BalanceBurnout", Ложь);
КонецПроцедуры

// Возвращает структуру параметров ответа использовать автоматические скидки
//
// Параметры:
//  СтруктураОтвета - Структура - содержит в себе набор параметров ответа http-сервиса "Сервис лояльности":
//    * Error 					- Булево
//    * ErrorMessage 			- Строка
//    * Version 				- Строка
//    * UseAutomaticDiscounts	- Булево
//    * UseCounterpartyBonuses	- Булево
//
Процедура ПолучитьСтруктуруОтветаИспользоватьАвтоматическиеСкидки(СтруктураОтвета) Экспорт
	
	СтруктураОтвета = Новый Структура;
	ПолучитьСтруктуруОтветаОбщиеПараметры(СтруктураОтвета);
	СтруктураОтвета.Вставить("UseAutomaticDiscounts", Ложь);
	СтруктураОтвета.Вставить("UseCounterpartyBonuses", Ложь);

КонецПроцедуры

// Возвращает структуру параметров ответа расчет скидок
//
// Параметры:
//  СтруктураОтвета - Структура - содержит в себе набор параметров ответа http-сервиса "Сервис лояльности":
//    * Error 					- Булево
//    * ErrorMessage 			- Строка
//    * Version 				- Строка
//
Процедура ПолучитьСтруктуруОтветаРасчетСкидок(СтруктураОтвета) Экспорт
	
	СтруктураОтвета = Новый Структура;
	ПолучитьСтруктуруОтветаОбщиеПараметры(СтруктураОтвета);
	
КонецПроцедуры

// Возвращает структуру параметров ответа проверка использования серии подарочного сертификата
//
// Параметры:
//  СтруктураОтвета - Структура - содержит в себе набор параметров ответа http-сервиса "Сервис лояльности":
//    * Error 					- Булево
//    * ErrorMessage 			- Строка
//    * Version 				- Строка
//    * GiftCardUsed 			- Булево
//
Процедура ПолучитьСтруктуруОтветаПроверкаПодарочногоСертификат(СтруктураОтвета) Экспорт
	
	СтруктураОтвета = Новый Структура;
	ПолучитьСтруктуруОтветаОбщиеПараметры(СтруктураОтвета);
	СтруктураОтвета.Вставить("GiftCardUsed", Ложь);
	
КонецПроцедуры

// Возвращает структуру параметров ответа состояние промокода
//
// Параметры:
//  СтруктураОтвета - Структура - содержит в себе набор параметров ответа http-сервиса "Сервис лояльности":
//    * Error 								- Булево
//    * ErrorMessage 						- Строка
//    * Version 							- Строка
//    * PromocodeIsAvalible					- Булево
//    * PromocodeStatus						- Строка
//    * PromocodeDiscountDescription		- Строка
//    * PromocodeDiscount					- Строка
//
Процедура ПолучитьСтруктуруОтветаДанныеПромокода(СтруктураОтвета) Экспорт
	
	СтруктураОтвета = Новый Структура;
	ПолучитьСтруктуруОтветаОбщиеПараметры(СтруктураОтвета);
	СтруктураОтвета.Вставить("PromocodeIsAvalible", Ложь);
	СтруктураОтвета.Вставить("PromocodeStatus", "");
	СтруктураОтвета.Вставить("PromocodeDiscountDescription", "");
	СтруктураОтвета.Вставить("PromocodeDiscount", "");

	
КонецПроцедуры

// Возвращает структуру параметров ответа по получению остатков
//
// Параметры:
//  СтруктураОтвета - Структура - содержит в себе набор параметров ответа http-сервиса "Сервис лояльности":
//    * Error 								- Булево
//    * ErrorMessage 						- Строка
//    * Version 							- Строка
//    * LeftoversList						- Массив
//
Процедура ПолучитьСтруктуруОтветаОстатки(СтруктураОтвета) Экспорт
	
	СтруктураОтвета = Новый Структура;
	ПолучитьСтруктуруОтветаОбщиеПараметры(СтруктураОтвета);
	СтруктураОтвета.Вставить("LeftoversList", Новый Массив);

	
КонецПроцедуры

// Возвращает структуру параметров ответа по получению списка карт лояльности
//
// Параметры:
//  СтруктураОтвета - Структура - содержит в себе набор параметров ответа http-сервиса "Сервис лояльности":
//    * Error 								- Булево
//    * ErrorMessage 						- Строка
//    * Version 							- Строка
//    * LoyaltyCardsList					- Массив
//
Процедура ПолучитьСтруктуруОтветаСписокКартЛояльности(СтруктураОтвета) Экспорт
	
	СтруктураОтвета = Новый Структура;
	ПолучитьСтруктуруОтветаОбщиеПараметры(СтруктураОтвета);
	СтруктураОтвета.Вставить("LoyaltyCardsList", Новый Массив);
	
КонецПроцедуры

// Возвращает структуру параметров ответа по получению оборота продаж карты лояльности.
//
// Параметры:
//  СтруктураОтвета - Структура - содержит в себе набор параметров ответа http-сервиса "Сервис лояльности":
//    * Error 								- Булево
//    * ErrorMessage 						- Строка
//    * Version 							- Строка
//    * CardRef								- Строка
//    * SellCount							- Число
//    * Barcode								- Строка
//    * MagneticCode						- Строка
//    * ClientNotFound						- Булево
//
Процедура ПолучитьСтруктуруОтветаОборотыПродаж(СтруктураОтвета) Экспорт
	
	СтруктураОтвета = Новый Структура;
	ПолучитьСтруктуруОтветаОбщиеПараметры(СтруктураОтвета);
	СтруктураОтвета.Вставить("CardRef", "");
	СтруктураОтвета.Вставить("SellCount", 0);
	СтруктураОтвета.Вставить("Barcode", "");
	СтруктураОтвета.Вставить("MagneticCode", "");
	СтруктураОтвета.Вставить("ClientNotFound", Истина);
	
КонецПроцедуры

// Возвращает структуру параметров ответа данных серии
//
// Параметры:
//  СтруктураОтвета - Структура - содержит в себе набор параметров ответа http-сервиса "Сервис лояльности":
//    * Error 								- Булево
//    * ErrorMessage 						- Строка
//    * Version 							- Строка
//    * NameBatch							- Строка
//    * BatchUsed							- Булево
//
Процедура ПолучитьСтруктуруОтветаДанныеСерии(СтруктураОтвета) Экспорт
	
	СтруктураОтвета = Новый Структура;
	ПолучитьСтруктуруОтветаОбщиеПараметры(СтруктураОтвета);
	СтруктураОтвета.Вставить("NameBatch", "");
	СтруктураОтвета.Вставить("BatchUsed", Ложь);
	
КонецПроцедуры

// Возвращает структуру параметров ответа актуальной цены
//
// Параметры:
//  СтруктураОтвета - Структура - содержит в себе набор параметров ответа http-сервиса "Сервис лояльности":
//    * Error 								- Булево
//    * ErrorMessage 						- Строка
//    * Version 							- Строка
//    * Price								- Число
//
Процедура ПолучитьСтруктуруОтветаЗапросаЦены(СтруктураОтвета) Экспорт
	
	СтруктураОтвета = Новый Структура;
	ПолучитьСтруктуруОтветаОбщиеПараметры(СтруктураОтвета);
	СтруктураОтвета.Вставить("Price", 0);
	
КонецПроцедуры

#КонецОбласти

// Возвращает количество зарезервированных бонусных баллов
//
// Параметры:
//  ДисконтнаяКарта - ОпределяемыйТип.КартаЛояльностиСерверЛояльности
//
// Возвращаемое значение:
//  Число - количество бонусных баллов, находящихся в резерве
//
Функция ПолучитьБонусныеБаллыРезерв(ДисконтнаяКарта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(БонусныеБаллыКСписанию.КСписанию) КАК КСписанию,
		|	БонусныеБаллыКСписанию.ДисконтнаяКарта КАК ДисконтнаяКарта
		|ИЗ
		|	РегистрСведений.БонусныеБаллыКСписанию КАК БонусныеБаллыКСписанию
		|ГДЕ
		|	БонусныеБаллыКСписанию.ДисконтнаяКарта = &ДисконтнаяКарта
		|
		|СГРУППИРОВАТЬ ПО
		|	БонусныеБаллыКСписанию.ДисконтнаяКарта";
	
	Запрос.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	БонусныеБаллыРезерв = 0;
	
	Если Выборка.Следующий() Тогда
		БонусныеБаллыРезерв = Выборка.КСписанию;
	КонецЕсли;
	
	Возврат БонусныеБаллыРезерв;
	
КонецФункции

// Выполняет корректировку регистра сведений "Бонусные баллы к списанию"
//
// Параметры:
//  Объект - ДокументОбъект.ЧекККМ
//
Процедура СкорректироватьРегистрСведенийБонусныеБаллыКСписанию(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИменаРеквизитов = Неопределено;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ЗаполнитьИменаРеквизитовПоставщикаДанных(ИменаРеквизитов);
	
	Если ИменаРеквизитов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеИсточника = Объект.Метаданные();
	Если МетаданныеИсточника.Реквизиты.Найти(ИменаРеквизитов.ИмяРеквизитаДисконтнаяКарта) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДисконтнаяКарта = Объект[ИменаРеквизитов.ИмяРеквизитаДисконтнаяКарта];
	
	БонуснаяПрограммаЛояльности = Неопределено;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ЗаполнитьБонуснуюПрограммуПоДисконтнойКарте(ДисконтнаяКарта, БонуснаяПрограммаЛояльности);
	
	СуммаБаллов = 0;
	Если МетаданныеИсточника.ТабличныеЧасти.Найти(ИменаРеквизитов.ИмяРеквизитаТаблицаОплата) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТаблицаОплат = Объект[ИменаРеквизитов.ИмяРеквизитаТаблицаОплата];
	Для каждого СтрокаОплаты Из ТаблицаОплат Цикл
		СуммаБаллов = СуммаБаллов + СтрокаОплаты[ИменаРеквизитов.ИмяРеквизитаСуммаБонусов];
	КонецЦикла;
	
	Если СуммаБаллов > 0 Тогда
		МенеджерЗаписи = РегистрыСведений.БонусныеБаллыКСписанию.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.ДисконтнаяКарта = ДисконтнаяКарта;
		МенеджерЗаписи.БонуснаяПрограммаЛояльности = БонуснаяПрограммаЛояльности;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.КСписанию > СуммаБаллов Тогда
			МенеджерЗаписи.КСписанию = МенеджерЗаписи.КСписанию - СуммаБаллов;
			МенеджерЗаписи.Записать(Истина);
		Иначе
			МенеджерЗаписи.Удалить();
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Выполняет корректировку регистра сведений "Бонусные баллы к списанию"
//
// Параметры:
//  Объект - ДокументОбъект.ЧекККМ
//
Процедура СкорректироватьРегистрСведенийПодарочныеСертификатыКСписанию(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИменаРеквизитов = Неопределено;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ЗаполнитьИменаРеквизитовПоставщикаДанных(ИменаРеквизитов);
	
	Если ИменаРеквизитов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеИсточника = Объект.Метаданные();
	Если МетаданныеИсточника.ТабличныеЧасти.Найти(ИменаРеквизитов.ИмяРеквизитаТаблицаПогашенияСертификатов) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПогашенияСертификатов = Объект[ИменаРеквизитов.ИмяРеквизитаТаблицаПогашенияСертификатов];
	Для Каждого СтрокаПогашенияСертификата Из ТаблицаПогашенияСертификатов Цикл
		
		СуммаПогашенияСертификата = СтрокаПогашенияСертификата[ИменаРеквизитов.ИмяРеквизитаСуммаПогашенияСертификата];
		Если ЗначениеЗаполнено(СуммаПогашенияСертификата) Тогда
		
			МенеджерЗаписи = РегистрыСведений.ПодарочныеСертификатыКСписаниюСерверЛояльности.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПодарочныйСертификат = СтрокаПогашенияСертификата[ИменаРеквизитов.ИмяРеквизитаПодарочныйСертификат];
			МенеджерЗаписи.СерийныйНомер = СтрокаПогашенияСертификата[ИменаРеквизитов.ИмяРеквизитаСерийныйНомер];
			МенеджерЗаписи.Прочитать();
			
			Если МенеджерЗаписи.КСписанию > СуммаПогашенияСертификата Тогда
				МенеджерЗаписи.КСписанию = МенеджерЗаписи.КСписанию - СуммаПогашенияСертификата;
				МенеджерЗаписи.Записать(Истина);
			Иначе
				МенеджерЗаписи.Удалить();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет корректировку регистра сведений "Промокоды к списанию"
//
// Параметры:
//  Объект - ДокументОбъект.ЧекККМ
//
Процедура СкорректироватьРегистрСведенийПромокодыКСписанию(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивПромокодов = Новый Массив;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ПолучитьТаблицуИспользованныхПромокодов(Объект, МассивПромокодов);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПромокодыКСписаниюСерверЛояльности.УникальныйИдентификатор КАК УникальныйИдентификатор,
	|	ПромокодыКСписаниюСерверЛояльности.Промокод КАК Промокод
	|ИЗ
	|	РегистрСведений.ПромокодыКСписаниюСерверЛояльности КАК ПромокодыКСписаниюСерверЛояльности
	|ГДЕ
	|	ПромокодыКСписаниюСерверЛояльности.Промокод В (&МассивПромокодов)";
	Запрос = Новый Запрос (ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивПромокодов", МассивПромокодов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.ПромокодыКСписаниюСерверЛояльности.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

// Разблокирует подарочный сертификат
//
// Параметры: 
//  ДанныеСертификата - Структура - содержит ссылки на подарочный сертификат и его серийный номер.
//
Процедура РазблокироватьПодарочныйСертификат(ДанныеСертификата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ДанныеСертификата.СерийныйНомер) Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостояниеПодарочныхСертификатовСерверЛояльности");
	ЭлементБлокировки.УстановитьЗначение("СерийныйНомер", ДанныеСертификата.СерийныйНомер);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей = РегистрыСведений.СостояниеПодарочныхСертификатовСерверЛояльности.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПодарочныйСертификат.Установить(ДанныеСертификата.ПодарочныйСертификат);
		НаборЗаписей.Отбор.СерийныйНомер.Установить(ДанныеСертификата.СерийныйНомер);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Списывает баланс подарочного сертификата
//
// Параметры: 
//  ДанныеСертификата - Структура - Содержит данные подарочного сертификата: ПодарочныйСертификат, СерийныйНомер
//  СуммаСписания	  - Число 	  - Сумма списания которая будет списана с баланса подарочного сертификата
//
Процедура СписатьБалансПодарочногоСертификата(ДанныеСертификата, СуммаСписания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СуммаПодарочногоСертификатаРезерв = ПолучитьСуммуПодарочногоСертификатаРезерв(ДанныеСертификата);
	МенеджерЗаписи = РегистрыСведений.ПодарочныеСертификатыКСписаниюСерверЛояльности.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.ПодарочныйСертификат = ДанныеСертификата.ПодарочныйСертификат;
	МенеджерЗаписи.СерийныйНомер 		= ДанныеСертификата.СерийныйНомер;
	МенеджерЗаписи.КСписанию 			= СуммаСписания + СуммаПодарочногоСертификатаРезерв;
	МенеджерЗаписи.Записать(Истина);
	
	РазблокироватьПодарочныйСертификат(ДанныеСертификата);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает зарезервированную сумму подарочного сертификата
//
// Параметры:
//	ДанныеСертификата - Структура - Содержит данные подарочного сертификата: ПодарочныйСертификат, СерийныйНомер
//
// Возвращаемое значение:
//  Число - сумма, находящаяся в резерве
//
Функция ПолучитьСуммуПодарочногоСертификатаРезерв(ДанныеСертификата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ПодарочныеСертификатыКСписаниюСерверЛояльности.КСписанию), 0) КАК КСписанию
		|ИЗ
		|	РегистрСведений.ПодарочныеСертификатыКСписаниюСерверЛояльности КАК ПодарочныеСертификатыКСписаниюСерверЛояльности
		|ГДЕ
		|	ПодарочныеСертификатыКСписаниюСерверЛояльности.ПодарочныйСертификат = &ПодарочныйСертификат
		|	И ПодарочныеСертификатыКСписаниюСерверЛояльности.СерийныйНомер = &СерийныйНомер";
	
	Запрос.УстановитьПараметр("ПодарочныйСертификат", ДанныеСертификата.ПодарочныйСертификат);
	Запрос.УстановитьПараметр("СерийныйНомер"		, ДанныеСертификата.СерийныйНомер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СуммаПодарочногоСертификатаРезерв = 0;
	
	Если Выборка.Следующий() Тогда
		СуммаПодарочногоСертификатаРезерв = Выборка.КСписанию;
	КонецЕсли;
	
	Возврат СуммаПодарочногоСертификатаРезерв;
	
КонецФункции

// Блокирует подарочный сертификат после ответа Сервиса Лояльности с целью предотвращения двойного списания баланса
//
// Параметры:
//  ДанныеСертификата - Структура - содержит ссылки на подарочный сертификат и его серийный номер
//  ДатаБлокировки    - Дата
//
Процедура ЗаблокироватьПодарочныйСертификат(ДанныеСертификата, ДатаБлокировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостояниеПодарочныхСертификатовСерверЛояльности");
	ЭлементБлокировки.УстановитьЗначение("СерийныйНомер", ДанныеСертификата.СерийныйНомер);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей = РегистрыСведений.СостояниеПодарочныхСертификатовСерверЛояльности.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПодарочныйСертификат.Установить(ДанныеСертификата.ПодарочныйСертификат);
		НаборЗаписей.Отбор.СерийныйНомер.Установить(ДанныеСертификата.СерийныйНомер);
		ЗаписьРегистра = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ДанныеСертификата);
		ЗаписьРегистра.ДатаБлокировки = ДатаБлокировки;
		НаборЗаписей.Записать(); 
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Резервирует одно применение промокода после ответа Сервиса Лояльности с целью предотвращения двойного применения
// конечного промокода.
//
// Параметры:
//  Промокод - ОпределяемыйТип.ПромокодСерверЛояльности - Строка содержащая промокод
//
Процедура ЗарезервироватьПрименениеПромокода(Промокод) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПромокодыКСписаниюСерверЛояльности");
	ЭлементБлокировки.УстановитьЗначение("Промокод", Промокод);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		МенеджерЗаписи = РегистрыСведений.ПромокодыКСписаниюСерверЛояльности.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.УникальныйИдентификатор = Новый УникальныйИдентификатор;
		МенеджерЗаписи.Промокод = Промокод;
		МенеджерЗаписи.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Отменяет резерв применения конечного промокода
//
// Параметры: 
//  Промокод - ОпределяемыйТип.ПромокодСерверЛояльности - Строка содержащая промокод.
//
Процедура СнятьРезервПримененияПромокода(Промокод) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПромокодыКСписаниюСерверЛояльности");
	ЭлементБлокировки.УстановитьЗначение("Промокод", Промокод);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПромокодыКСписаниюСерверЛояльности.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	ПромокодыКСписаниюСерверЛояльности.Промокод КАК Промокод
		|ИЗ
		|	РегистрСведений.ПромокодыКСписаниюСерверЛояльности КАК ПромокодыКСписаниюСерверЛояльности
		|ГДЕ
		|	ПромокодыКСписаниюСерверЛояльности.Промокод В(&Промокод)";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Промокод", Промокод);
		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			МенеджерЗаписи = РегистрыСведений.ПромокодыКСписаниюСерверЛояльности.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Удалить();
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Фиксирует ошибку Сервиса Лояльности в журнале регистрации
// 
// Параметры:
//  ОписаниеОшибки - Строка - текстовое описание возникшей ошибки
//  ИмяФункции     - Строка - наименование функции Сервиса лояльности
//
// Возвращаемое значение:
//  HTTPСервисОтвет
//
Функция ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки, ИмяФункции) Экспорт
	
	ИмяСобытия = СтрШаблон(НСтр("ru = 'Сервер лояльности, ошибка в %1.'", ОбщегоНазначения.КодОсновногоЯзыка()), ИмяФункции);
		
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
	
	#Если ВнешнееСоединение Тогда
		Ответ = Неопределено;
	#Иначе
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки, КодировкаТекста.UTF8);
	#КонецЕсли
	
	Возврат Ответ;

КонецФункции

// Выполняет обработку состояния бонусов и подарочных сертификатов клиентов
// Происходит проверка наличия заблокированных бонусов и подарочных сертификатов клиентов
// Если такие найдены и время экспирации для них истекло - происходит разблокировка
Процедура ОбработкаСостоянияБонусовИПодарочныхСертификатов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СерверЛояльностиОбработкаСостоянияБонусовПодарочныхСертификатов);
	
	Отбор = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.СерверЛояльностиОбработкаСостоянияБонусовПодарочныхСертификатов);
	ТекущиеЗадания	= РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	РегламентРазблокировки = Неопределено;
	Для Каждого ТекущееЗадание Из ТекущиеЗадания Цикл
		РегламентРазблокировки = ТекущееЗадание;
		Прервать;
	КонецЦикла;
	ВремяЭкспирации = РегламентРазблокировки.Расписание.ПериодПовтораВТечениеДня;
	
	Если Не РегламентРазблокировки.Использование И ВремяЭкспирации = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СостояниеБонусовСерверЛояльности.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	СостояниеБонусовСерверЛояльности.ДатаБлокировки КАК ДатаБлокировки,
		|	NULL КАК ПодарочныйСертификат,
		|	NULL КАК СерийныйНомер
		|ИЗ
		|	РегистрСведений.СостояниеБонусовСерверЛояльности КАК СостояниеБонусовСерверЛояльности
		|ГДЕ
		|	СостояниеБонусовСерверЛояльности.ДатаБлокировки <= &ДатаЭкспирации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	СостояниеПодарочныхСертификатовСерверЛояльности.ДатаБлокировки,
		|	СостояниеПодарочныхСертификатовСерверЛояльности.ПодарочныйСертификат,
		|	СостояниеПодарочныхСертификатовСерверЛояльности.СерийныйНомер
		|ИЗ
		|	РегистрСведений.СостояниеПодарочныхСертификатовСерверЛояльности КАК СостояниеПодарочныхСертификатовСерверЛояльности
		|ГДЕ
		|	СостояниеПодарочныхСертификатовСерверЛояльности.ДатаБлокировки <= &ДатаЭкспирации";
	
	ДатаЭкспирации = ТекущаяДатаСеанса() - ВремяЭкспирации;
	Запрос.УстановитьПараметр("ДатаЭкспирации", ДатаЭкспирации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Попытка
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ДисконтнаяКарта) Тогда 
				РазблокироватьБонусы(Выборка.ДисконтнаяКарта);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ПодарочныйСертификат) Тогда
				ДанныеСертификата = Новый Структура;
				ДанныеСертификата.Вставить("ПодарочныйСертификат", Выборка.ПодарочныйСертификат);
				ДанныеСертификата.Вставить("СерийныйНомер", Выборка.СерийныйНомер);
				РазблокироватьПодарочныйСертификат(ДанныеСертификата);
			КонецЕсли;
			
		КонецЦикла;
	Исключение
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяФункции = "СерверЛояльностиПоставщикДанных.ОбработкаСостоянияБонусовИПодарочныхСертификатов";
		ИмяСобытия = СтрШаблон(НСтр("ru = 'Сервер лояльности, ошибка в %1.'", ОбщегоНазначения.КодОсновногоЯзыка()), ИмяФункции);
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, , , , ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Возвращает структуру элемента справочника "Контроль продаж" для передачи потребителю.
//
// Возвращаемое значение:
//  Структура - структура, содержащая данные контроля продаж:
//    *Ref - Строка - уникальный идентификатор элемента "Контроль Продаж" строкой,
//    *Name - Строка - наименование элемента "Контроль Продаж",
//    *Description - Строка - значение реквизита "Описание" элемента "Контроль Продаж",
//    *Active - Булево - значение реквизита "Использование" элемента "Контроль Продаж",
//    *AllStores - Булево - значение реквизита "ДляВсехТорговыхОбъектов" элемента "Контроль Продаж",
//    *AllGoods - Булево - значение реквизита "ДляВсейНоменклатуры" элемента "Контроль Продаж",
//    *GoodsGroupDescription - Строка - значение реквизита "НаименованиеГруппыТоваров" элемента "Контроль Продаж",
//    *GoodsSetRef - Строка - уникальный идентификатор элемента из реквизита "Палитра" элемента "Контроль Продаж",
//    *DeletionMark - Булево - признак пометки на удаление элемента "Контроль Продаж",
//    *IncludedGoodsSets - Массив - список уникальных идентификаторов элементов справочника "Палитра" 
//									из табличной части "ПалитрыКонтроляПродаж"
//    *IncludedGoods - Массив - список уникальных идентификаторов элементов справочника "Номенклатура" 
//									из табличной части "Номенклатура"
//    *StoreRef - Строка - уникальный идентификатор Торгового объекта, для которого запрашивается контроль продаж,
//							Не заполняется, если в табличной части "ТорговыеОбъекты" нет запрашиваемого торгового объекта,
//    *ControlElements - Массив - список структур с описанием строки контроля продаж
//								из табличной части "Контроль Продаж".
//
Функция ПолучитьСтруктуруЭлементаКонтроляПродаж() Экспорт
	
	РезультатФункции = Новый Структура();
	
	РезультатФункции.Вставить("Ref", "");
	РезультатФункции.Вставить("Name", "");
	РезультатФункции.Вставить("Description", "");
	РезультатФункции.Вставить("Active", Ложь);
	РезультатФункции.Вставить("AllStores", Ложь);
	РезультатФункции.Вставить("AllGoods", Ложь);
	РезультатФункции.Вставить("GoodsGroupDescription", "");
	РезультатФункции.Вставить("GoodsSetRef", "");
	РезультатФункции.Вставить("DeletionMark", Ложь);
	РезультатФункции.Вставить("IncludedGoodsSets", Новый Массив);
	РезультатФункции.Вставить("IncludedGoods", Новый Массив);
	РезультатФункции.Вставить("StoreRef", "");
	РезультатФункции.Вставить("ControlElements", Новый Массив);
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает структуру строки табличной части "Контроль Продаж"
// справочника "Контроль продаж" для передачи потребителю.
//
// Возвращаемое значение:
//  Структура - структура, содержащая данные строки контроля продаж:
//    *RestrictionKindName - Строка - имя предопределенного элемента справочника "Виды Контроля",
//    *RestrictionKindRef - Строка - уникальный идентификатор элемента справочника "Виды Контроля" строкой.
//									Заполняется только для не предопределенных элементов.
//    *PeriodStart - Дата - дата начала действия ограничения,
//    *PeriodEnd - Дата - дата окончания действия ограничения,
//    *WeekDayNumber - Число - номер дня недели. 0 - не заполнено, все дни недели,
//    *TimeStart - Дата - время начала действия ограничения,
//    *TimeEnd - Дата - время окончания действия ограничения
//
Функция ПолучитьСтруктуруСтрокиКонтроляПродаж() Экспорт
	
	РезультатФункции = Новый Структура();
	ПустаяДата = Дата(1, 1, 1, 0, 0, 0);
	
	РезультатФункции.Вставить("RestrictionKindName", "");
	РезультатФункции.Вставить("RestrictionKindRef", "");
	РезультатФункции.Вставить("PeriodStart", ПустаяДата);
	РезультатФункции.Вставить("PeriodEnd", ПустаяДата);
	РезультатФункции.Вставить("WeekDayNumber", 0);
	РезультатФункции.Вставить("TimeStart", ПустаяДата);
	РезультатФункции.Вставить("TimeEnd", ПустаяДата);
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает структуру элемента справочника "Виды Контроля" для передачи потребителю.
//
// Возвращаемое значение:
//  Структура - структура, содержащая данные вида контроля
//    *PredefinedName - Строка - имя предопределенного элемента справочника "Виды Контроля",
//    *Ref - Строка - уникальный идентификатор элемента справочника "Виды Контроля" строкой.
//						Заполняется только для не предопределенных элементов,
//    *Name - Строка - наименование вида контроля,
//    *RestrictionTypeName - Строка - имя значения перечисления из реквизита "Тип Контроля",
//    *PatternTextForUser - Строка - значение реквизита "ТекстШаблонаПредупреждения",
//    *Parameters - Массив - список структур с описанием строки параметров вида контроля.
//
Функция ПолучитьСтруктуруВидаКонтроляПродаж() Экспорт
	
	РезультатФункции = Новый Структура();
	
	РезультатФункции.Вставить("PredefinedName", "");
	РезультатФункции.Вставить("Ref", "");
	РезультатФункции.Вставить("Name", "");
	РезультатФункции.Вставить("RestrictionTypeName", "");
	РезультатФункции.Вставить("PatternTextForUser", "");
	РезультатФункции.Вставить("Parameters", Новый Массив);
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает структуру строки табличной части "Параметры Контроля"
// справочника "Виды Контроля" для передачи потребителю.
//
// Возвращаемое значение:
//  Структура - структура, содержащая данные строки параметров вида контроля
//    *Parameter - Строка - имя значения перечисления "ПараметрыКонтроляПродаж",
//    *Value - Строка - значение параметра строкой.
//
Функция ПолучитьСтруктуруСтрокиПараметровВидаКонтроляПродаж() Экспорт
	
	РезультатФункции = Новый Структура();
	
	РезультатФункции.Вставить("Parameter", "");
	РезультатФункции.Вставить("Value", "");
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает структуру элемента справочника "Палитра товаров РМК" для передачи потребителю.
//
// Возвращаемое значение:
//  Структура - структура, содержащая данные палитры товаров
//    *Ref - Строка - уникальный идентификатор элемента справочника "Палитра Товаров РМК" строкой,
//    *Name - Строка - наименование палитры товаров,
//    *NumberOfElementsInRow - Число - значение реквизита "КоличествоЭлементовВРяду" палитры товаров,
//    *ElementHeight - Число - значение реквизита "ВысотаЭлемента" палитры товаров,
//    *NumberOfRows - Число - значение реквизита "КоличествоРядов" палитры товаров,
//    *Service - Булево - значение реквизита "Служебная" палитры товаров,
//    *GoodsContent - Массив - список структур с описанием строки состава палитры товаров.
//
Функция ПолучитьСтруктуруПалитрыТоваров() Экспорт
	
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("Ref", "");
	РезультатФункции.Вставить("Name", "");
	РезультатФункции.Вставить("NumberOfElementsInRow", 0);
	РезультатФункции.Вставить("ElementHeight", 0);
	РезультатФункции.Вставить("NumberOfRows", 0);
	РезультатФункции.Вставить("Service", Ложь);
	РезультатФункции.Вставить("GoodsContent", Новый Массив);
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает структуру строки табличной части "Состав"
// справочника "Палитра товаров РМК" для передачи потребителю.
//
// Возвращаемое значение:
//  Структура - структура, содержащая данные строки состава палитры товаров
//    *IsFolder - Булево - значение колонки "ЭтоКатегория",
//    *FolderNumber - Число - значение колонки "НомерКатегории",
//    *ParentFolderNumber - Число - значение колонки "НомерКатегорииРазмещения",
//    *PositionIndex - Число - значение колонки "ИндексПозиции",
//    *ElementName - Строка - значение колонки "ИмяЭлемента",
//    *NomenclatureRef - Строка - уникальный идентификатор номенклатуры строкой,
//    *CharacteristicRef - Строка - уникальный идентификатор характеристики,
//    *ElementTitle - Строка - значение колонки "ЗаголовокЭлемента",
//    *CharacteristicsAreUsed - Булево - значение колонки "ХарактеристикиИспользуются",
//    *HasIncludedElements - Булево - значение колонки "ИмеетсяВложенность",
//    *ModificatorName - Строка - имя значения перечисления "ВидыМодификаторовРМК",
//    *PackageRef - Строка - уникальный идентификатор упаковки строкой,
//    *HideAmount - Булево - значение колонки "СкрыватьОстаток",
//    *GoodsSetRef - Строка - уникальный идентификатор палитры строкой.
//
Функция ПолучитьСтруктуруСтрокиСоставаПалитры() Экспорт
	
	РезультатФункции = Новый Структура();
	
	РезультатФункции.Вставить("IsFolder", Ложь);
	РезультатФункции.Вставить("FolderNumber", 0);
	РезультатФункции.Вставить("ParentFolderNumber", 0);
	РезультатФункции.Вставить("PositionIndex", 0);
	РезультатФункции.Вставить("ElementName", "");
	РезультатФункции.Вставить("NomenclatureRef", "");
	РезультатФункции.Вставить("CharacteristicRef", "");
	РезультатФункции.Вставить("ElementTitle", "");
	РезультатФункции.Вставить("CharacteristicsAreUsed", Ложь);
	РезультатФункции.Вставить("HasIncludedElements", Ложь);
	РезультатФункции.Вставить("ModificatorName", "");
	РезультатФункции.Вставить("PackageRef", "");
	РезультатФункции.Вставить("HideAmount", Ложь);
	РезультатФункции.Вставить("GoodsSetRef", "");
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает структуру запрета продаж
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация.
//  Магазин 	- СправочникСсылка.Магазины - магазин.
//
// Возвращаемое значение:
//  Структура - структура, содержащая в себе данные о запретах продаж:
//    * StartDate - Дата -дата начала действия запрета продаж.
//    * EndDate - Дата -дата окончания действия запрета продаж.
//    * SalesPromotionID - Строка -тестовое значение ГУИД маркетинговой акции/скидки, в которое содержатся данные
//                         запрета продаж.
//    * SalesPromotionName - Строка - наименование маркетинговой акции/скидки, в которое содержатся данные запрета продаж.
//    * Organisation - Структура - данные организации:
//      ** Name - Строка - наименование организации.
//      ** Ref - Строка - текстовое значение ГУИД организации.
//      ** ID - Строка - код организации.
//      ** TIN - Строка - ИНН организации.
//    * Store - Структура - данные магазина:
//       ** Name - Строка - наименование магазина.
//       ** Ref - Строка - текстовое значение ГУИД магазина.
//       ** ID - Строка - код магазина.
//    * DaysOfWeek - Массив из Строка - массив дней недели, на которые распространяется запрет продаж.
//   *  TypesOfGoods - Массив из Строка - массив видов номенклатуры, на которые распространяется запрет продаж.
//
Функция ПолучитьСтруктуруЗапретаПродаж(Организация = Неопределено, Магазин = Неопределено) Экспорт
	
	ДанныеОрганизации = Новый Структура;
	ДанныеОрганизации.Вставить("Name", ?(ЗначениеЗаполнено(Организация), Организация.Наименование, ""));
	ДанныеОрганизации.Вставить("Ref" , ?(ЗначениеЗаполнено(Организация), XMLСтрока(Организация)  , ""));
	ДанныеОрганизации.Вставить("ID"  , ?(ЗначениеЗаполнено(Организация), Организация.Код		 , ""));
	ДанныеОрганизации.Вставить("TIN" , ?(ЗначениеЗаполнено(Организация), Организация.ИНН		 , ""));
	
	ДанныеМагазина = Новый Структура;
	ДанныеМагазина.Вставить("Name", ?(ЗначениеЗаполнено(Магазин), Магазин.Наименование, ""));
	ДанныеМагазина.Вставить("Ref" , ?(ЗначениеЗаполнено(Магазин), XMLСтрока(Магазин)  , ""));
	ДанныеМагазина.Вставить("ID"  , ?(ЗначениеЗаполнено(Магазин), Магазин.Код		  , ""));
	
	СтруктураЗапретаПродаж = Новый Структура;
	СтруктураЗапретаПродаж.Вставить("StartDate"			, "");
	СтруктураЗапретаПродаж.Вставить("EndDate"			, "");
	
	СтруктураЗапретаПродаж.Вставить("SalesPromotionID"	, "");
	СтруктураЗапретаПродаж.Вставить("SalesPromotionName", "");
 	СтруктураЗапретаПродаж.Вставить("Organisation"		, ДанныеОрганизации);
	СтруктураЗапретаПродаж.Вставить("Store"				, ДанныеМагазина);
	СтруктураЗапретаПродаж.Вставить("DaysOfWeek"		, Новый Массив);
	СтруктураЗапретаПродаж.Вставить("TypesOfGoods"		, Новый Массив);
	
	Возврат СтруктураЗапретаПродаж;

КонецФункции

// Возвращает структуру содержащую сведенья об остатках
//
// Возвращаемое значение:
//  Структура - структура, содержащая в себе данные об остатках:
//    * LeftoverLocation - Строка - Место хранения остатков.
//    * Variant - Строка - Характеристика.
//    * Leftover - Число - Остаток.
//    * Reserved - Число - Зарезервировано.
//    * FreeLeftover - Число - Свободный остаток.
//
Функция ПолучитьСтруктуруОстатков() Экспорт
	
	СтруктураОстатков = Новый Структура;
	СтруктураОстатков.Вставить("LeftoverLocation", "");
	СтруктураОстатков.Вставить("Variant", "");
	СтруктураОстатков.Вставить("Leftover", "");
	СтруктураОстатков.Вставить("Reserved", "");
	СтруктураОстатков.Вставить("FreeLeftover", "");
	
	Возврат СтруктураОстатков;

КонецФункции

// Возвращает текст запроса
// 
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаБалансПодарочногоСертификата() Экспорт
	
	ТекстЗапроса = "";
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает десериализованное значение в виде ГУИД
//
// Параметры:
//  ВходящиеДанные - Структура - структура, содержащая в себе набор параметров из http-запроса.
//  ИмяПараметра - Строка - имя десериализуемого параметра.
//  ТипЗначения - Строка - имя типа значения, например: "Справочники.Номенклатура".
//
// Возвращаемое значение:
//  ЛюбаяСсылка - полученное значение параметра.
//
Функция ПолучитьДесериализованноеСсылочноеЗначение(ВходящиеДанные, ИмяПараметра, ТипЗначения) Экспорт
	
	ПараметрыБезопасногоРежима = Новый Структура;
	ПараметрыБезопасногоРежима.Вставить("ЗначениеПараметра");
	ПараметрыБезопасногоРежима.Вставить("ГУИД", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());

	Попытка
		СтроковоеЗначениеПараметра = ВходящиеДанные[ИмяПараметра].Ref;
		ГУИД = Новый УникальныйИдентификатор(СтроковоеЗначениеПараметра);
		
		ПараметрыБезопасногоРежима.Вставить("ГУИД", Новый УникальныйИдентификатор(СтроковоеЗначениеПараметра));
		ОбщегоНазначения.ВыполнитьВБезопасномРежиме("Параметры.ЗначениеПараметра = " + ТипЗначения + ".ПолучитьСсылку(Параметры.ГУИД)", ПараметрыБезопасногоРежима);
		Если ПараметрыБезопасногоРежима.ЗначениеПараметра.ПолучитьОбъект() = Неопределено Тогда 
			ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецЕсли;
	Исключение
		ОбщегоНазначения.ВыполнитьВБезопасномРежиме("Параметры.ЗначениеПараметра = " + ТипЗначения + ".ПустаяСсылка()", ПараметрыБезопасногоРежима);
	КонецПопытки;
	
	Возврат ПараметрыБезопасногоРежима.ЗначениеПараметра;
	
КонецФункции

// Заполняет структуру ответа списком управляемых скидок
//
// Параметры:
//  СтруктураОтвета - Массив - массив структур, содержащий в себе параметры ответа:
//   * ЗначениеСкидки - Число - значение скидки.
//   * Представление - Строка - представление скидки.
//   * ТипСкидки - Строка - тип скидки.
//   * ОбластьДействия - Строка - область действия скидки.
//   * ИдентификаторСкидки - Строка - уникальный идентификатор скидки.
//   * СкидкаНаценка - Строка - наименование скидки.
//  ПараметрыРасчета - -Структура - структура, содержащая в себе набор параметров из http-запроса.
//
Процедура СписокУправляемыхСкидок(СтруктураОтвета, ПараметрыРасчета) Экспорт
	
	ТаблицаУправляемыхСкидок = ТаблицаУправляемыхСкидок();
	СерверЛояльностиПоставщикДанныхПереопределяемый.ЗаполнитьТаблицуУправляемыхСкидок(ТаблицаУправляемыхСкидок, ПараметрыРасчета);
	СтруктураОтвета = СериализоватьТаблицуУправляемыхСкидок(ТаблицаУправляемыхСкидок);
	
КонецПроцедуры

// Инициализирует структуру карты лояльности.
// 
// Возвращаемое значение:
//  Структура -  Структура карты лояльности:
// * ClientName - Строка
// * IsPerson - Булево
// * DateOfBirth - Строка
// * Phone - Строка
// * Email - Строка
// * Barcode - Строка
// * MagneticCode - Строка
// * CardGUID - Строка
// * ClientGUID - Строка
// * IsBlocked - Строка
// * BonusData - Структура:
//  ** PaymentPercent - Число
//  ** BonusCount - Число
//  ** BonusRate - Число
//  ** BonusCurrency - Строка
// * SellCount - Число
// * SearchType - Строка
//
Функция СтруктураКартыЛояльности() Экспорт
	
	КодВалюты = "";
	СерверЛояльностиПоставщикДанныхПереопределяемый.ПолучитьКодВалюты(КодВалюты);
	
	ДанныеБонусов = Новый Структура();
	ДанныеБонусов.Вставить("PaymentPercent", 0);
	ДанныеБонусов.Вставить("BonusCount", 0);
	ДанныеБонусов.Вставить("BonusRate", 1);
	ДанныеБонусов.Вставить("BonusName", "");
	ДанныеБонусов.Вставить("BonusGUID", "");
	ДанныеБонусов.Вставить("BonusCurrency", КодВалюты);
	
	СтруктураКарты = Новый Структура();
	СтруктураКарты.Вставить("ClientName", "");
	СтруктураКарты.Вставить("IsPerson", Ложь);
	СтруктураКарты.Вставить("DateOfBirth", "");
	СтруктураКарты.Вставить("Phone", "");
	СтруктураКарты.Вставить("Email", "");
	СтруктураКарты.Вставить("Barcode", "");
	СтруктураКарты.Вставить("MagneticCode", "");
	СтруктураКарты.Вставить("CardGUID", "");
	СтруктураКарты.Вставить("ClientGUID", "");
	СтруктураКарты.Вставить("IsBlocked", "");
	СтруктураКарты.Вставить("BonusData", ДанныеБонусов);
	СтруктураКарты.Вставить("SellCount", 0);
	СтруктураКарты.Вставить("SearchType", "");
	СтруктураКарты.Вставить("Valid", Истина);
	СтруктураКарты.Вставить("TypeCard", "");
	
	Возврат СтруктураКарты;
	
КонецФункции

// Заполняет структуру ответа списком видов дисконтных карт
//
// Параметры:
//  СтруктураОтвета - Массив - массив структур, содержащий в себе параметры ответа:
//   * Идентификатор - Строка - уникальный идентификатор вида дисконтной карты.
//   * Наименование - Строка - наименование вида дисконтной карты.
//   * ЭтоИменнаяКарта - Булево - признак того что вид дисконтной карты именной.
//  ПараметрыРасчета - -Структура - структура, содержащая в себе набор параметров из http-запроса.
//
Процедура СписокВидовДисконтныхКарт(СтруктураОтвета, ПараметрыРасчета) Экспорт
	
	ТаблицаВидовДисконтныхКарт = ТаблицаВидовКарт();
	СерверЛояльностиПоставщикДанныхПереопределяемый.ЗаполнитьТаблицуВидовКарт(ТаблицаВидовДисконтныхКарт, ПараметрыРасчета);
	СтруктураОтвета = СериализоватьТаблицуВидовКарт(ТаблицаВидовДисконтныхКарт);
	
КонецПроцедуры

// Заполняет список сотрудников
//
// Параметры:
//  ПараметрыРасчета - -Структура - структура, содержащая в себе набор параметров из http-запроса.
//  СтруктураОтвета - Массив - массив структур, содержащий в себе параметры ответа:
//   * СотрудникПредставление - Строка - Наименование сотрудника.
//   * КодСотрудника - Строка - Код сотрудника для входа в РМК.
//   * ИдентификаторСотрудника - Строка - УИД сотрудника.
//
Процедура СписокСотрудников(ПараметрыРасчета, СтруктураОтвета) Экспорт
	
	ТаблицаСотрудников = СтруктураТаблицыСотрудников();
	СерверЛояльностиПоставщикДанныхПереопределяемый.ЗаполнитьТаблицуСотрудников(ПараметрыРасчета, ТаблицаСотрудников);
	СтруктураОтвета = СериализоватьТаблицуСотрудников(ТаблицаСотрудников);
	
КонецПроцедуры

// Заполняет список серий
//
// Параметры:
//  ПараметрыРасчета - Структура - структура, содержащая в себе набор параметров из http-запроса.
//  СтруктураОтвета - Массив - массив структур, содержащий в себе параметры ответа:
//   * СерияПредставление - Строка - Наименование серии.
//   * ИдентификаторСерий - Строка - УИД серии.
//
Процедура ЗаполнитьСписокСерий(ПараметрыРасчета, СтруктураОтвета) Экспорт
	
	ТаблицаСерий = СтруктураТаблицыСерий();
	СерверЛояльностиПоставщикДанныхПереопределяемый.ЗаполнитьСписокСерий(ПараметрыРасчета, ТаблицаСерий);
	СтруктураОтвета = СериализоватьТаблицуСерий(ТаблицаСерий);
	
КонецПроцедуры

// Заполняет структуру ответа списком управляемых скидок
//
// Параметры:
//  СтруктураОтвета - Массив - массив структур, содержащий в себе параметры ответа:
//   * ЗначениеСкидки - Число - значение скидки.
//   * Представление - Строка - представление скидки.
//   * ТипСкидки - Строка - тип скидки.
//   * ОбластьДействия - Строка - область действия скидки.
//   * ИдентификаторСкидки - Строка - уникальный идентификатор скидки.
//   * СкидкаНаценка - Строка - наименование скидки.
//
Процедура СписокСкидокПоВидамОплаты(СтруктураОтвета) Экспорт
	
	Результат = Неопределено;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ЗаполнитьТаблицуСкидокЗависящихОтВидаОплаты(Результат);
	СтруктураОтвета = СериализоватьТаблицуСкидокЗаВидОплаты(Результат);
	
КонецПроцедуры

// Процедура заполняет ответ отключенный сервер лояльности
//
// Параметры:
//  СтруктураОтвета	 - Структура - Структура ответа с сервера лояльности.
//  Ответ			 - HTTPСервисОтвет - Ответ сервера лояльности.
//
Процедура ЗаполнитьОтветОтключенныйСерверЛояльности(СтруктураОтвета, Ответ) Экспорт
	
	СтруктураОтвета.Error = Истина;
	СтруктураОтвета.ErrorMessage = НСтр("ru = 'Использование сервера лояльности отключено в настройках программы.'");
	// Возвращаем структуру ответа
	СтруктураОтветаJSON = Новый ЗаписьJSON;
	СтруктураОтветаJSON.УстановитьСтроку();
	ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
		
	Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
КонецПроцедуры

// Процедура заполняет ответ не используются автоматические скидки
//
// Параметры:
//  СтруктураОтвета	 - Структура - Структура ответа с сервера лояльности.
//  Ответ			 - HTTPСервисОтвет - Ответ сервера лояльности.
//
Процедура ЗаполнитьОтветАвтоматическиеСкидки(СтруктураОтвета, Ответ) Экспорт
	
	СтруктураОтвета.Error = Истина;
	СтруктураОтвета.ErrorMessage = НСтр("ru = 'Использование автоматических скидок отключено в настройках программы.'");
	// Возвращаем структуру ответа
	СтруктураОтветаJSON = Новый ЗаписьJSON;
	СтруктураОтветаJSON.УстановитьСтроку();
	ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
		
	Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПреобразоватьПараметрМетодаВЧисло(ЗначениеПараметра)
	
	ЧисловоеЗначение = 0;
	Если ЗначениеПараметра <> Неопределено Тогда 
		Попытка
			ЧисловоеЗначение = Число(ЗначениеПараметра);
		Исключение
			ЧисловоеЗначение = 0;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ЧисловоеЗначение;
	
КонецФункции

Функция ТаблицаУправляемыхСкидок()
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 2));
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	
	ТаблицаУправляемыхСкидок = Новый ТаблицаЗначений;
	ТаблицаУправляемыхСкидок.Колонки.Добавить("ЗначениеСкидки", ОписаниеТипаЧисло);
	ТаблицаУправляемыхСкидок.Колонки.Добавить("Представление", ОписаниеТипаСтрока);
	ТаблицаУправляемыхСкидок.Колонки.Добавить("ТипСкидки", ОписаниеТипаСтрока);
	ТаблицаУправляемыхСкидок.Колонки.Добавить("ОбластьДействия", ОписаниеТипаСтрока);
	ТаблицаУправляемыхСкидок.Колонки.Добавить("ИдентификаторСкидки", ОписаниеТипаСтрока);
	ТаблицаУправляемыхСкидок.Колонки.Добавить("СкидкаНаценка", ОписаниеТипаСтрока);
	ТаблицаУправляемыхСкидок.Колонки.Добавить("ПриВозврате", ОписаниеТипаБулево);
	ТаблицаУправляемыхСкидок.Колонки.Добавить("ЭтоПравилоНачисленияБонусов", ОписаниеТипаБулево);
	
	Возврат ТаблицаУправляемыхСкидок;
	
КонецФункции

Функция СериализоватьТаблицуУправляемыхСкидок(ТаблицаУправляемыхСкидок)
	
	МассивУправляемыхСкидок = Новый Массив;
	
	Для каждого СтрокаТаблицы Из ТаблицаУправляемыхСкидок Цикл
		
		СтруктураСтрокиУправляемыхСкидок = Новый Структура;
		СтруктураСтрокиУправляемыхСкидок.Вставить("DiscountValue", СтрокаТаблицы.ЗначениеСкидки);
		СтруктураСтрокиУправляемыхСкидок.Вставить("DiscountDescription", СтрокаТаблицы.Представление);
		СтруктураСтрокиУправляемыхСкидок.Вставить("DiscoutType", СтрокаТаблицы.ТипСкидки);
		СтруктураСтрокиУправляемыхСкидок.Вставить("ApplicationArea", СтрокаТаблицы.ОбластьДействия);
		СтруктураСтрокиУправляемыхСкидок.Вставить("DiscountID", СтрокаТаблицы.ИдентификаторСкидки);
		СтруктураСтрокиУправляемыхСкидок.Вставить("DiscountRef", СтрокаТаблицы.СкидкаНаценка);
		СтруктураСтрокиУправляемыхСкидок.Вставить("Return", СтрокаТаблицы.ПриВозврате);
		СтруктураСтрокиУправляемыхСкидок.Вставить("Bonuses", СтрокаТаблицы.ЭтоПравилоНачисленияБонусов);
		
		// Для обратной совместимости
		СтруктураСтрокиУправляемыхСкидок.Вставить("ЗначениеСкидки", СтрокаТаблицы.ЗначениеСкидки);
		СтруктураСтрокиУправляемыхСкидок.Вставить("Представление", СтрокаТаблицы.Представление);
		СтруктураСтрокиУправляемыхСкидок.Вставить("ТипСкидки", СтрокаТаблицы.ТипСкидки);
		СтруктураСтрокиУправляемыхСкидок.Вставить("ОбластьДействия", СтрокаТаблицы.ОбластьДействия);
		СтруктураСтрокиУправляемыхСкидок.Вставить("ИдентификаторСкидки", СтрокаТаблицы.ИдентификаторСкидки);
		СтруктураСтрокиУправляемыхСкидок.Вставить("СкидкаНаценка", СтрокаТаблицы.СкидкаНаценка);
		СтруктураСтрокиУправляемыхСкидок.Вставить("ПриВозврате", СтрокаТаблицы.ПриВозврате);
		СтруктураСтрокиУправляемыхСкидок.Вставить("ЭтоПравилоНачисленияБонусов", СтрокаТаблицы.ЭтоПравилоНачисленияБонусов);
		
		МассивУправляемыхСкидок.Добавить(СтруктураСтрокиУправляемыхСкидок);
		
	КонецЦикла;
	
	Возврат МассивУправляемыхСкидок;
	
КонецФункции

Функция ТаблицаВидовКарт()
	
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
	
	ТаблицаВидовКарт = Новый ТаблицаЗначений;
	ТаблицаВидовКарт.Колонки.Добавить("Идентификатор", ОписаниеТипаСтрока);
	ТаблицаВидовКарт.Колонки.Добавить("Наименование", ОписаниеТипаСтрока);
	ТаблицаВидовКарт.Колонки.Добавить("ЭтоИменнаяКарта", ОписаниеТипаБулево);
	ТаблицаВидовКарт.Колонки.Добавить("ГенерироватьНомер", ОписаниеТипаБулево);
	ТаблицаВидовКарт.Колонки.Добавить("ПрисваиватьНомерКартыКНомеруТелефона", ОписаниеТипаБулево);
	ТаблицаВидовКарт.Колонки.Добавить("ПредставлениеШаблона", ОписаниеТипаСтрока);
	ТаблицаВидовКарт.Колонки.Добавить("НачалоДиапазона", ОписаниеТипаСтрока);
	ТаблицаВидовКарт.Колонки.Добавить("КонецДиапазона", ОписаниеТипаСтрока);
	ТаблицаВидовКарт.Колонки.Добавить("ДлинаДиапазона", ОписаниеТипаЧисло);
	
	Возврат ТаблицаВидовКарт;
	
КонецФункции

Функция СериализоватьТаблицуВидовКарт(ТаблицаВидовКарт)
	
	МассивУправляемыхСкидок = Новый Массив;
	
	Для каждого СтрокаТаблицы Из ТаблицаВидовКарт Цикл
		
		СтруктураСтрокиВидовКарт = Новый Структура;
		СтруктураСтрокиВидовКарт.Вставить("CardTypeID", СтрокаТаблицы.Идентификатор);
		СтруктураСтрокиВидовКарт.Вставить("CardTypeDescription", СтрокаТаблицы.Наименование);
		СтруктураСтрокиВидовКарт.Вставить("IsPerson", СтрокаТаблицы.ЭтоИменнаяКарта);
		СтруктураСтрокиВидовКарт.Вставить("GenerateNumer", СтрокаТаблицы.ГенерироватьНомер);
		СтруктураСтрокиВидовКарт.Вставить("NumberToPhone", СтрокаТаблицы.ПрисваиватьНомерКартыКНомеруТелефона);
		СтруктураСтрокиВидовКарт.Вставить("TemplateRepresentation", СтрокаТаблицы.ПредставлениеШаблона);
		СтруктураСтрокиВидовКарт.Вставить("BeginRange", СтрокаТаблицы.НачалоДиапазона);
		СтруктураСтрокиВидовКарт.Вставить("EndRange", СтрокаТаблицы.КонецДиапазона);
		СтруктураСтрокиВидовКарт.Вставить("LengthRange", СтрокаТаблицы.ДлинаДиапазона);
		
		
		// Для обратной совместимости
		СтруктураСтрокиВидовКарт.Вставить("Идентификатор", СтрокаТаблицы.Идентификатор);
		СтруктураСтрокиВидовКарт.Вставить("Наименование", СтрокаТаблицы.Наименование);
		СтруктураСтрокиВидовКарт.Вставить("ЭтоИменнаяКарта", СтрокаТаблицы.ЭтоИменнаяКарта);
		СтруктураСтрокиВидовКарт.Вставить("ГенерироватьНомер", СтрокаТаблицы.ГенерироватьНомер);
		СтруктураСтрокиВидовКарт.Вставить("ПрисваиватьНомерКартыКНомеруТелефона", СтрокаТаблицы.ПрисваиватьНомерКартыКНомеруТелефона);
		СтруктураСтрокиВидовКарт.Вставить("ПредставлениеШаблона", СтрокаТаблицы.ПредставлениеШаблона);
		СтруктураСтрокиВидовКарт.Вставить("НачалоДиапазона", СтрокаТаблицы.НачалоДиапазона);
		СтруктураСтрокиВидовКарт.Вставить("КонецДиапазона", СтрокаТаблицы.КонецДиапазона);
		СтруктураСтрокиВидовКарт.Вставить("ДлинаДиапазона", СтрокаТаблицы.ДлинаДиапазона);
		
		МассивУправляемыхСкидок.Добавить(СтруктураСтрокиВидовКарт);
		
	КонецЦикла;
	
	Возврат МассивУправляемыхСкидок;
	
КонецФункции

Функция СтруктураТаблицыСотрудников()
	
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("СотрудникПредставление", ОписаниеТипаСтрока);
	ТаблицаСотрудников.Колонки.Добавить("КодСотрудника", ОписаниеТипаСтрока);
	ТаблицаСотрудников.Колонки.Добавить("ИдентификаторСотрудника", ОписаниеТипаСтрока);
	
	Возврат ТаблицаСотрудников;
	
КонецФункции

Функция СтруктураТаблицыСерий()
	
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	
	ТаблицаСерий = Новый ТаблицаЗначений;
	ТаблицаСерий.Колонки.Добавить("СерияПредставление", ОписаниеТипаСтрока);
	ТаблицаСерий.Колонки.Добавить("ИдентификаторСерий", ОписаниеТипаСтрока);
	
	Возврат ТаблицаСерий;
	
КонецФункции

Функция СериализоватьТаблицуСотрудников(ТаблицаСотрудников)
	
	МассивСотрудников = Новый Массив;
	
	Для каждого СтрокаТаблицы Из ТаблицаСотрудников Цикл
		
		СтруктураСтрокиСотрудник = Новый Структура;
		СтруктураСтрокиСотрудник.Вставить("EmployeeDescription", СтрокаТаблицы.СотрудникПредставление);
		СтруктураСтрокиСотрудник.Вставить("EmployeeCode", СтрокаТаблицы.КодСотрудника);
		СтруктураСтрокиСотрудник.Вставить("EmployeeID", СтрокаТаблицы.ИдентификаторСотрудника);
		
		МассивСотрудников.Добавить(СтруктураСтрокиСотрудник);
		
	КонецЦикла;
	
	Возврат МассивСотрудников;
	
КонецФункции

Функция СериализоватьТаблицуСерий(ТаблицаСерий)
	
	МассивСерий = Новый Массив;
	
	Для каждого СтрокаТаблицы Из ТаблицаСерий Цикл
		
		СтруктураСтрокиСерия = Новый Структура;
		СтруктураСтрокиСерия.Вставить("BatchDescription", СтрокаТаблицы.СерияПредставление);
		СтруктураСтрокиСерия.Вставить("BatchID", СтрокаТаблицы.ИдентификаторСерий);
		
		МассивСерий.Добавить(СтруктураСтрокиСерия);
		
	КонецЦикла;
	
	Возврат МассивСерий;
	
КонецФункции

Функция СериализоватьТаблицуСкидокЗаВидОплаты(ТаблицаСкидокЗаВидОплаты)
	
	МассивСкидокЗаВидОплаты = Новый Массив;
	
	Если ТаблицаСкидокЗаВидОплаты = Неопределено Тогда
		Возврат МассивСкидокЗаВидОплаты;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаСкидокЗаВидОплаты Цикл
				
		СтруктураСтрокискидкиЗаВидОплаты = Новый Структура;
		ИДСкидки = Строка(СтрокаТаблицы.СкидкаНаценка.УникальныйИдентификатор());
		СтруктураСтрокискидкиЗаВидОплаты.Вставить("DiscountID", ИДСкидки);
		СтруктураСтрокискидкиЗаВидОплаты.Вставить("PayType", XMLстрока(СтрокаТаблицы.ВидОплаты));
				
		МассивСкидокЗаВидОплаты.Добавить(СтруктураСтрокискидкиЗаВидОплаты);
		
	КонецЦикла;
	
	Возврат МассивСкидокЗаВидОплаты;
	
КонецФункции 

Функция ПреобразоватьПараметрМетодаВБулево(ЗначениеПараметра)
	
	ЗначениеБулево = Ложь;
	Если ЗначениеПараметра <> Неопределено Тогда 
		Попытка
			ЗначениеБулево = Булево(ЗначениеПараметра);
		Исключение
			ЗначениеБулево = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ЗначениеБулево;
	
КонецФункции

Процедура ПолучитьСтруктуруОтветаОбщиеПараметры(СтруктураОтвета)
	
	СтруктураОтвета.Вставить("Error", Ложь);
	СтруктураОтвета.Вставить("ErrorMessage", "");
	СтруктураОтвета.Вставить("Version", ОбщегоНазначенияСерверЛояльностиКлиентСервер.ВерсияБиблиотеки());
	
КонецПроцедуры
#КонецОбласти