
////////////////////////////////////////////////////////////////////////////////
// Клиенты сервер
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ПАРТНЕРАМИ И КЛ

// Функция отделяет часть наименования физического лица (обращение и ФИО).
//
// Параметры:
//  ИсходнаяСтрока	- Строка	- Строка наименования, у которого надо отделить часть.
//
// Возвращаемое значение:
//	Строка	- Выделенная часть наименования. 
//
Функция ВыделитьЧастьНаименованияКонтактногоЛица(ИсходнаяСтрока) Экспорт
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = СтрНайти(Буфер, " ");
	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	Возврат ВыделенноеСлово;
КонецФункции // ВыделитьЧастьНаименованияКонтактногоЛица()

// Функция приводит ФИО "иВаНов    ИВАН  иванович" к виду "Иванов Иван Иванович".
//
// Параметры:
//  ИсходнаяСтрока	- ФИО	- Строка для обработки.
//
// Возвращаемое значение:
//	Строка	- Приведенное к стандартному виду ФИО. 
//
Функция ПривестиФИОКСтандартномуВиду(ИсходнаяСтрока) Экспорт
	ФИОКЛ = СокрЛП(ИсходнаяСтрока);
	ФамилияКЛ = ВыделитьЧастьНаименованияКонтактногоЛица(ФИОКЛ);
	ФИОКЛ = СокрЛП(ФИОКЛ);
	ПервыйСимвол = ВРег(Лев(ФамилияКЛ, 1));
	ФамилияКЛ = ПервыйСимвол + НРег(Прав(ФамилияКЛ, СтрДлина(ФамилияКЛ) - 1));
	ИмяКЛ = ВыделитьЧастьНаименованияКонтактногоЛица(ФИОКЛ);
	ФИОКЛ = СокрЛП(ФИОКЛ);
	ПервыйСимвол = ВРег(Лев(ИмяКЛ, 1));
	ИмяКЛ = ПервыйСимвол + НРег(Прав(ИмяКЛ, СтрДлина(ИмяКЛ) - 1));
	ОтчествоКЛ = ВыделитьЧастьНаименованияКонтактногоЛица(ФИОКЛ);
	ПервыйСимвол = ВРег(Лев(ОтчествоКЛ, 1));
	ОтчествоКЛ = ПервыйСимвол + НРег(Прав(ОтчествоКЛ, СтрДлина(ОтчествоКЛ) - 1));
	Возврат СокрЛП(ФамилияКЛ + " " + ИмяКЛ + " " + ОтчествоКЛ + " " + СокрЛП(ФИОКЛ));
КонецФункции

// Функция определяет пол человека по его имени.
//
// Параметры:
//  Имя	– Строка	– Имя, по последней букве которого пытаемся определить пол.
//
// Возвращаемое значение:
//  ПеречислениеСсылка	– Пол человека, определенный по его имени.
//
Функция ОпределитьПол(Имя) Экспорт
	СписокМужскихИсключений = Новый СписокЗначений;
	СписокМужскихИсключений.Добавить("ИЛЬЯ");
	СписокМужскихИсключений.Добавить("НИКОЛА");
	СписокМужскихИсключений.Добавить("САВВА");
	СписокМужскихИсключений.Добавить("КУЗЬМА");
	СписокМужскихИсключений.Добавить("НИКИТА");
	СписокМужскихИсключений.Добавить("ДАНИЛА");
	СписокМужскихИсключений.Добавить("ЕМЕЛЯ");
	СписокЖенскихИсключений = Новый СписокЗначений;
	СписокЖенскихИсключений.Добавить("ЛЮБОВЬ");
	Окончание = ВРег(Прав(СокрП(Имя), 1));
	Если (СтрНайти("АЯ", Окончание) И СписокМужскихИсключений.НайтиПоЗначению(ВРег(Имя)) = Неопределено) Или
		СписокЖенскихИсключений.НайтиПоЗначению(ВРег(Имя)) <> Неопределено Тогда // Вероятно женщина
		Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский");
	Иначе
		Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской");
	КонецЕсли; 
	Возврат Пол;
КонецФункции // ОпределитьПол()

// Фукнция возвращает вид партнера Компания/Частное лицо.
Функция ПолучитьВидПартнера(Партнер) Экспорт
	Если ТипЗнч(Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
		Возврат Партнер.ЮрФизЛицо;
	Иначе
		Возврат Перечисления.КомпанияЧастноеЛицо.ПустаяСсылка();
	КонецЕсли;	
КонецФункции

// Функция возвращает список выбора ФИО.
//
// Параметры:
//  СтрокаПоиска - Строка	 - Строка поиска.
//  ЭтоФамилия	 - Булево	 - Признак поиска фамилии.
//  ЭтоИмя		 - Булево	 - Признак поиска имени.
// 
// Возвращаемое значение:
//   - СписокЗначчений
//
Функция ПолучитьДанныеВыбораФИО(СтрокаПоиска, ЭтоФамилия = Ложь, ЭтоИмя = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 15
	               |	CRM_ВысокочастотныеФИО.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.CRM_ВысокочастотныеФИО КАК CRM_ВысокочастотныеФИО
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &ЭтоФамилия
	               |				ТОГДА CRM_ВысокочастотныеФИО.Фамилия
	               |			КОГДА &ЭтоИмя
	               |				ТОГДА CRM_ВысокочастотныеФИО.Имя
	               |			ИНАЧЕ CRM_ВысокочастотныеФИО.Отчество
	               |		КОНЕЦ
	               |	И CRM_ВысокочастотныеФИО.Наименование ПОДОБНО &СтрокаПоиска
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
	
	Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска + "%");
	Запрос.УстановитьПараметр("ЭтоФамилия", ЭтоФамилия);
	Запрос.УстановитьПараметр("ЭтоИмя", ЭтоИмя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокФИО = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		СписокФИО.Добавить(Выборка.Наименование, СокрЛП(Выборка.Наименование));
	КонецЦикла;
	
	Возврат СписокФИО;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛНОТЕКСТОВОГО ПОИСКА

// Процедура проверяет и добавляет обязательные элементы списка выбора поля поиска.
//
// Параметры:
//	СписокВыбора	- СписокЗначений	- Список выбора поля поиска.
//
Процедура СкорректироватьСоставСпискаВыбораПоляПоиска(СписокВыбора) Экспорт
	МассивУдалить = Новый Массив();
	МассивУдалить.Добавить("[Поиск по полному названию]");
	МассивУдалить.Добавить("[ПоискПоПолномуНазванию]");
	МассивУдалить.Добавить("[Поиск]");
	МассивУдалить.Добавить("[Поиск по подстроке]");
	МассивУдалить.Добавить("[ПоискПоПодстроке]");
	
	Для Каждого ЗначениеУдалить Из МассивУдалить Цикл
		Пока СписокВыбора.НайтиПоЗначению(ЗначениеУдалить) <> Неопределено Цикл
			СписокВыбора.Удалить(СписокВыбора.НайтиПоЗначению(ЗначениеУдалить));
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Процедура сохраняет настройки полнотекстового поиска.
//
Процедура ПолнотекстовыйПоискПриЗакрытииНаСервере(Форма, ИмяНастройкиПоискПоПодстроке) Экспорт
	Попытка
		CRM_ХранилищеНастроек.Сохранить(ИмяНастройкиПоискПоПодстроке, , Форма.ПоискПоПодстроке);
	Исключение
		Возврат;
	КонецПопытки;
КонецПроцедуры

// Процедура определяет доступность полнотекстового поиска в формах списка и выбора справочника.
//
// Параметры:
//	Форма							- ФормаКлиентскогоПриложения	- Форма, для которой определяется доступность.
//	ИмяНастройкиИсторияПоиска		- Строка			- Идентификатор настройки истории поиска.
//	ИмяНастройкиПоискПоПодстроке	- Строка			- Идентификатор настройки флага поиска по подстроке.
//
Процедура ДоступностьПолнотекстовыйПоискСписок(Форма, ИмяНастройкиИсторияПоиска, ИмяНастройкиПоискПоПодстроке) Экспорт
	// Настроим видимость элементов.
	Форма.РасширенныйПоиск = Ложь;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПолнотекстовыйПоиск")
		 И ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПоискПоПодстроке") Тогда
			ПоискПоПодстрокеСохр = CRM_ХранилищеНастроек.Загрузить(ИмяНастройкиПоискПоПодстроке);
			Если ТипЗнч(ПоискПоПодстрокеСохр) = Тип("Булево") Тогда
				Форма.ПоискПоПодстроке = ПоискПоПодстрокеСохр;
			КонецЕсли;
			
			Элемент = Форма.Элементы.Найти("СтрокаПоиска");
			Если Элемент <> Неопределено Тогда
				Если Форма.ПоискПоПодстроке Тогда
					Форма.Элементы.СтрокаПоиска.ПодсказкаВвода = НСтр("ru='[Поиск по подстроке]';en='[Search]'");
				Иначе
					Форма.Элементы.СтрокаПоиска.ПодсказкаВвода = НСтр("ru='[Поиск по полному названию]';en='[Search by Full Name]'");
				КонецЕсли;
				Форма.Элементы.СтрокаПоиска.Подсказка = Форма.Элементы.СтрокаПоиска.ПодсказкаВвода;
			КонецЕсли;
		КонецЕсли;
		
		ИсторияПоиска = ХранилищеОбщихНастроек.Загрузить(ИмяНастройкиИсторияПоиска);
		Если ИсторияПоиска <> Неопределено Тогда
			Попытка
				Форма.СтрокаПоискаСписокВыбора.ЗагрузитьЗначения(ИсторияПоиска);
			
			Исключение	Форма.Элементы.СтрокаПоиска.СписокВыбора.ЗагрузитьЗначения(ИсторияПоиска);
			КонецПопытки;
		КонецЕсли;
		
		Попытка
			СкорректироватьСоставСпискаВыбораПоляПоиска(Форма.СтрокаПоискаСписокВыбора);
		
		Исключение	СкорректироватьСоставСпискаВыбораПоляПоиска(Форма.Элементы.СтрокаПоиска.СписокВыбора);
		КонецПопытки;
		
		Форма.ИндексППДАктуален = ПолнотекстовыйПоиск.ИндексАктуален();
		
	Иначе
		Элемент = Форма.Элементы.Найти("СтрокаПоиска");
		Если Элемент <> Неопределено Тогда
			Форма.Элементы.СтрокаПоиска.Видимость = Ложь;
		КонецЕсли;
		
		Элемент = Форма.Элементы.Найти("ГруппаПоиск");
		Если Элемент <> Неопределено Тогда
			Форма.Элементы.ГруппаПоиск.Видимость = Ложь;
		КонецЕсли;
		Элемент = Форма.Элементы.Найти("ФормаНайти");
		Если Элемент <> Неопределено Тогда
			Форма.Элементы.ФормаНайти.Видимость = Истина;
		КонецЕсли;
		Элемент = Форма.Элементы.Найти("ФормаОтменитьПоиск");
		Если Элемент <> Неопределено Тогда
			Форма.Элементы.ФормаОтменитьПоиск.Видимость = Истина;
		КонецЕсли;
		Элемент = Форма.Элементы.Найти("Найти");
		Если Элемент <> Неопределено Тогда
			Форма.Элементы.Найти.Видимость = Истина;
		КонецЕсли;
		Элемент = Форма.Элементы.Найти("ОтменаПоиска");
		Если Элемент <> Неопределено Тогда
			Форма.Элементы.ОтменаПоиска.Видимость = Истина;
		КонецЕсли;
		Элемент = Форма.Элементы.Найти("ОтменитьПоиск");
		Если Элемент <> Неопределено Тогда
			Форма.Элементы.ОтменитьПоиск.Видимость = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДоступностьПолнотекстовыйПоискСписок()

// Процедура определяет доступность полнотекстового поиска в формах списка и выбора справочника "Партнеры".
//
// Параметры:
//	Форма	- ФормаКлиентскогоПриложения	- Форма, для которой определяется доступность.
//
Процедура ДоступностьПолнотекстовыйПоискСписокПартнеры(Форма) Экспорт
	ДоступностьПолнотекстовыйПоискСписок(Форма, "ИсторияПоискаПартнеров", "ПартнерыФормаСпискаПоискПоПодстроке");
КонецПроцедуры // ДоступностьПолнотекстовыйПоискСписокПартнеры()

// Процедура определяет доступность полнотекстового поиска в формах списка Бизнес-процессов.
//
// Параметры:
//	Форма	- ФормаКлиентскогоПриложения	- Форма, для которой определяется доступность.
//
Процедура ДоступностьПолнотекстовыйПоискСписокБизнесПроцессы(Форма) Экспорт
	ДоступностьПолнотекстовыйПоискСписок(Форма, "ИсторияПоискаБизнесПроцессов",
		 "БизнесПроцессыФормаСпискаПоискПоПодстроке");
КонецПроцедуры // ДоступностьПолнотекстовыйПоискСписокБизнесПроцессы()

// Функция находит партнеров по заданным условиям.
//
// Параметры:
//	Форма	- ФормаКлиентскогоПриложения	- Форма, на которой выполняется поиск.
//
// Возвращаемое значение:
//	Строка	- Текст ошибки
//
Функция НайтиПартнеровПолнотекстовыйПоиск(Форма) Экспорт
	ТаблицаОснований = Форма.РеквизитФормыВЗначение("Основания");
	// Получим результаты поиска
	Попытка
		СтрокаДляПоиска = ?(Форма.ПоискПоПодстроке, "" + Форма.СтрокаПоиска + "*", Форма.СтрокаПоиска);
	Исключение
		СтрокаДляПоиска = Форма.СтрокаПоиска;
	КонецПопытки;
	ТекстОшибки = CRM_МетодыМодулейОбъектовСправочников.НайтиПартнеров(СтрокаДляПоиска, ТаблицаОснований);
	Если ТекстОшибки = Неопределено Тогда
		// Удалим элемент из истории поиска если он там был.
		НомерНайденногоЭлементаСписка = Форма.СтрокаПоискаСписокВыбора.НайтиПоЗначению(Форма.СтрокаПоиска);
		Пока НомерНайденногоЭлементаСписка <> Неопределено Цикл
			Форма.СтрокаПоискаСписокВыбора.Удалить(НомерНайденногоЭлементаСписка);
			НомерНайденногоЭлементаСписка = Форма.СтрокаПоискаСписокВыбора.НайтиПоЗначению(Форма.СтрокаПоиска);
		КонецЦикла;	
		// Поставим элемент на первое место.
		Форма.СтрокаПоискаСписокВыбора.Вставить(0, Форма.СтрокаПоиска);
		Пока Форма.СтрокаПоискаСписокВыбора.Количество() > 100 Цикл
			Форма.СтрокаПоискаСписокВыбора.Удалить(Форма.СтрокаПоискаСписокВыбора.Количество() - 1);
		КонецЦикла;	
		ХранилищеОбщихНастроек.Сохранить("ИсторияПоискаПартнеров", , Форма.СтрокаПоискаСписокВыбора.ВыгрузитьЗначения());
		// Возвращаем таблицу оснований.
		Форма.ЗначениеВРеквизитФормы(ТаблицаОснований, "Основания");
		// Устанавливаем отбор по списку найденных партнеров.
		#Если НЕ ВнешнееСоединение Тогда
			CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Форма.Список, "Ссылка",
			ТаблицаОснований.ВыгрузитьКолонку("Партнер"), Истина, ВидСравненияКомпоновкиДанных.ВСписке);
		#КонецЕсли
		Форма.Элементы.СтрокаПоиска.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		
		СкорректироватьСоставСпискаВыбораПоляПоиска(Форма.СтрокаПоискаСписокВыбора);
		
		Возврат Неопределено;
	КонецЕсли;
	Форма.Элементы.СтрокаПоиска.ЦветФона = ЦветаСтиля.ОшибкаПолнотекстовыйПоискФон;
	
	СкорректироватьСоставСпискаВыбораПоляПоиска(Форма.СтрокаПоискаСписокВыбора);
	
	Возврат ТекстОшибки;
КонецФункции // НайтиПартнеровПолнотекстовыйПоиск()

// Функция находит партнеров по заданным условиям.
//
// Параметры:
//	Форма	- ФормаКлиентскогоПриложения	- Форма, на которой выполняется поиск.
//
// Возвращаемое значение:
//	Строка	- Текст ошибки
//
Функция НайтиБизнесПроцессыПолнотекстовыйПоиск(Форма) Экспорт
	ТаблицаОснований = Форма.РеквизитФормыВЗначение("Основания");
	// Получим результаты поиска
	Попытка
		СтрокаДляПоиска = ?(Форма.ПоискПоПодстроке, "" + Форма.СтрокаПоиска + "*", Форма.СтрокаПоиска);
	Исключение
		СтрокаДляПоиска = Форма.СтрокаПоиска;
	КонецПопытки;
	ТекстОшибки = БизнесПроцессы.CRM_БизнесПроцесс.НайтиБизнесПроцессы(СтрокаДляПоиска, ТаблицаОснований);
	Если ТекстОшибки = Неопределено Тогда
		// Удалим элемент из истории поиска если он там был.
		НомерНайденногоЭлементаСписка = Форма.СтрокаПоискаСписокВыбора.НайтиПоЗначению(Форма.СтрокаПоиска);
		Пока НомерНайденногоЭлементаСписка <> Неопределено Цикл
			Форма.СтрокаПоискаСписокВыбора.Удалить(НомерНайденногоЭлементаСписка);
			НомерНайденногоЭлементаСписка = Форма.СтрокаПоискаСписокВыбора.НайтиПоЗначению(Форма.СтрокаПоиска);
		КонецЦикла;	
		// Поставим элемент на первое место.
		Форма.СтрокаПоискаСписокВыбора.Вставить(0, Форма.СтрокаПоиска);
		Пока Форма.СтрокаПоискаСписокВыбора.Количество() > 100 Цикл
			Форма.СтрокаПоискаСписокВыбора.Удалить(Форма.СтрокаПоискаСписокВыбора.Количество() - 1);
		КонецЦикла;	
		ХранилищеОбщихНастроек.Сохранить("ИсторияПоискаБизнесПроцессов", ,
			 Форма.СтрокаПоискаСписокВыбора.ВыгрузитьЗначения());
		// Возвращаем таблицу оснований.
		Форма.ЗначениеВРеквизитФормы(ТаблицаОснований, "Основания");
		Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
		// Устанавливаем отбор по списку найденных партнеров.
		#Если НЕ ВнешнееСоединение Тогда
			CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Форма.Список, "Ссылка",
			ТаблицаОснований.ВыгрузитьКолонку("БизнесПроцесс"), Истина, ВидСравненияКомпоновкиДанных.ВСписке);
		#КонецЕсли
		Форма.Элементы.СтрокаПоиска.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		Возврат Неопределено;
	КонецЕсли;
	Форма.Элементы.СтрокаПоиска.ЦветФона = ЦветаСтиля.ОшибкаПолнотекстовыйПоискФон;
	Возврат ТекстОшибки;
КонецФункции // НайтиПартнеровПолнотекстовыйПоиск()

// Процедура создает регламентное задание для оповещения о дне рождения.
//
// Параметры:
//	Нет.
//
Процедура СоздатьЗадачиПоздравленияСДнемРождения() Экспорт
	
	Возврат;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.CRM_ФормированиеПоздравленийСДнемРождения);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата",	НачалоДня(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()));
	Запрос.УстановитьПараметр("ПустаяДата",	'00010101');
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Партнеры.Ссылка КАК Ссылка,
	|	Партнеры.Наименование КАК Наименование,
	|	Партнеры.ДатаРождения КАК ДатаРождения,
	|	Партнеры.ОсновнойМенеджер КАК ОсновнойМенеджер,
	|	""Партнер"" КАК ВидСправочника,
	|	NULL КАК РольКонтактногоЛица,
	|	NULL КАК Должность,
	|	NULL КАК Владелец
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.ДатаРождения <> &ПустаяДата
	|	И Партнеры.ОсновнойМенеджер <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	И ДОБАВИТЬКДАТЕ(Партнеры.ДатаРождения, ГОД, ГОД(&ТекДата) - ГОД(Партнеры.ДатаРождения)) = &ТекДата
	|	И Партнеры.CRM_НапоминатьОДнеРождения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактныеЛицаПартнеров.Ссылка,
	|	КонтактныеЛицаПартнеров.Наименование,
	|	КонтактныеЛицаПартнеров.ДатаРождения,
	|	КонтактныеЛицаПартнеров.Владелец.ОсновнойМенеджер,
	|	""КЛ"",
	|	КонтактныеЛицаПартнеров.CRM_РольКонтактногоЛица,
	|	КонтактныеЛицаПартнеров.CRM_Должность,
	|	КонтактныеЛицаПартнеров.Владелец
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.ДатаРождения <> &ПустаяДата
	|	И КонтактныеЛицаПартнеров.Владелец.ОсновнойМенеджер <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	И ДОБАВИТЬКДАТЕ(КонтактныеЛицаПартнеров.ДатаРождения, ГОД, ГОД(&ТекДата) - ГОД(КонтактныеЛицаПартнеров.ДатаРождения)) = &ТекДата
	|	И КонтактныеЛицаПартнеров.CRM_НапоминатьОДнеРождения";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТемаНапоминания = НСтр("ru='Поздравить с днем рождения: ';en='Congratulate happy birthday: '") + Строка(Выборка.Ссылка) 
			+ ?(Выборка.ВидСправочника = "КЛ",
			 " (" 
		+ Строка(Выборка.Владелец) + ")", "");		
		ОписаниеНапоминания = ?(Выборка.ВидСправочника = "КЛ", ?(НЕ ЗначениеЗаполнено(Выборка.РольКонтактногоЛица), "",
		"Роль: " + Выборка.РольКонтактногоЛица + Символы.ПС) + ?(НЕ ЗначениеЗаполнено(Выборка.Должность), "", "Должность: "
		+ Выборка.Должность + Символы.ПС), "");
		Исполняется =
			Строка(Окр((CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса() - Выборка.ДатаРождения) / (60 * 60 * 24 * 365)));
		ОписаниеНапоминания = ТемаНапоминания + Символы.ПС + ОписаниеНапоминания 
			+ НСтр("ru='Дата рождения: ';en='Birth Date: '")
		+ Формат(Выборка.ДатаРождения, "ДФ=dd.MM.yyyy") + Символы.ПС + НСтр("ru='Исполняется лет: ';en='Turns years: '") 
			+ Исполняется;
		Менеджер = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		Менеджер.Предмет			= Выборка.Ссылка;
		Менеджер.Пользователь		= Выборка.ОсновнойМенеджер;
		Менеджер.ДатаНачала			= НачалоДня(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
		Менеджер.ДатаОповещения		= НачалоДня(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
		Менеджер.ДатаАктуальности	= НачалоДня(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()) + 60 * 60 * 24;
		Менеджер.Содержание			= ОписаниеНапоминания;
		Менеджер.Важность			= Перечисления.ВариантыВажностиВзаимодействия.Высокая;
		Менеджер.Записать();
		
	КонецЦикла;
КонецПроцедуры // СоздатьЗадачиПоздравленияСДнемРождения()

////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ЖУРНАЛОМ ОБЪЕКТОВ КЛИЕНТА

// Функция возвращает упорядоченный массив со всеми корректными элемента ПВХ.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив	- Упорядоченный массив со всеми корректными элемента ПВХ.
//
Функция ПолучитьВсеЭлементыПВХОбъектыЖурнала(ПроверятьПрава = Ложь) Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОбъектыЖурнала.Ссылка					КАК Ссылка,
	|	ОбъектыЖурнала.Наименование				КАК Наименование,
	|	ОбъектыЖурнала.ТипЗначения				КАК ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.CRM_ОбъектыЖурналаДокументов КАК ОбъектыЖурнала
	|ГДЕ
	|	НЕ ОбъектыЖурнала.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	Наименование ВОЗР
	|");
	Если ПроверятьПрава Тогда
		МассивОбъектов = Новый Массив();
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЗначения.Типы().Количество() > 0 Тогда
				Попытка
					ОбъектМетаданных = Метаданные.НайтиПоТипу(Выборка.ТипЗначения.Типы()[0]);
				Исключение
					ОбъектМетаданных = Неопределено;
				КонецПопытки;
				Если ОбъектМетаданных <> Неопределено Тогда
					Если Не ПравоДоступа("Чтение", ОбъектМетаданных) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			МассивОбъектов.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
		Возврат МассивОбъектов;
	Иначе
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
КонецФункции // ПолучитьВсеЭлементыПВХОбъектыЖурнала()

// Функция возвращает имя метаданных типа "Документ.CRM_Взаимодействие" по ссылке на элемент ПВХ.
//
// Параметры:
//	ПВХСсылка	- ПланВидовХарактеристикСсылка	- Ссылка на элемент ПВХ.
//
// Возвращаемое значение:
//	Неопределено или Строка	- Имя метаданных типа "Документ.CRM_Взаимодействие".
//
Функция ПолучитьПолноеИмяМетаданныхОбъектаПоСсылкеНаПВХОбъектыЖурнала(ПВХСсылка) Экспорт
	Если НЕ ЗначениеЗаполнено(ПВХСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Тип = ПВХСсылка.ТипЗначения.Типы()[0];
		МетаданныеПоТипу = Метаданные.НайтиПоТипу(Тип);
		Если МетаданныеПоТипу = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Попытка
			ИмяБазовогоТипаПоОбъектуМетаданных = ОбщегоНазначения.ВидОбъектаПоТипу(Тип);
		Исключение
			ИмяБазовогоТипаПоОбъектуМетаданных = Неопределено;
		КонецПопытки;
		Если НЕ ЗначениеЗаполнено(ИмяБазовогоТипаПоОбъектуМетаданных) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат ИмяБазовогоТипаПоОбъектуМетаданных + "." + МетаданныеПоТипу.Имя;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции // ПолучитьПолноеИмяМетаданныхОбъектаПоСсылкеНаПВХОбъектыЖурнала()

// Функция возвращает ссылку на элемент ПВХ по метаданным объекта или по полному имени метаданных объекта.
//
// Параметры:
//	МетаданныеОбъектаИлиПолноеИмяМетаданныхОбъекта	- МетаданныеОбъекта или Строка	- Метаданные объекта 
//																						или полное имя метаданных объекта.
//
// Возвращаемое значение:
//	Неопределено или Массив	- Массив ссылок на элемент ПВХ.
//
Функция ПолучитьСсылкуПВХОбъектыЖурналаПоМетаданнымОбъекта(МетаданныеОбъектаИлиПолноеИмяМетаданныхОбъекта) Экспорт
	МетаданныеОбъекта = Неопределено;
	Если ТипЗнч(МетаданныеОбъектаИлиПолноеИмяМетаданныхОбъекта) = Тип("Строка") Тогда
		Попытка
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(МетаданныеОбъектаИлиПолноеИмяМетаданныхОбъекта);
		
		Исключение	МетаданныеОбъекта = Неопределено;
		КонецПопытки;
	Иначе
		МетаданныеОбъекта = МетаданныеОбъектаИлиПолноеИмяМетаданныхОбъекта;
	КонецЕсли;
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	СсылочныйТипПоМетаданным = CRM_ОбщегоНазначенияСервер.ПолучитьСсылочныйТипПоМетаданнымОбъекта(МетаданныеОбъекта);
	Если СсылочныйТипПоМетаданным = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ПолучитьСсылкуПВХОбъектыЖурналаПоТипу(СсылочныйТипПоМетаданным);
	КонецЕсли;
КонецФункции // ПолучитьСсылкуПВХОбъектыЖурналаПоМетаданнымОбъекта()

// Функция возвращает массив элементов ПВХ по описанию типов.
//
// Параметры:
//	ОписаниеТипов					- ОписаниеТипов	- Описание типов.
//	ПолучатьПомеченныеНаУдаление	- Булево		- Признак получения помеченных на удаление.
//
// Возвращаемое значение:
//	Неопределено или Массив	- Массив элементов ПВХ.
//
Функция ПолучитьМассивЭлементовПВХОбъектыЖурналаПоОписаниюТипов(ОписаниеТипов,
	 ПолучатьПомеченныеНаУдаление = Ложь) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Результат = Новый Массив();
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОбъектыЖурнала.Ссылка					КАК Ссылка,
	|	ОбъектыЖурнала.Наименование				КАК Наименование,
	|	ОбъектыЖурнала.ТипЗначения				КАК ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.CRM_ОбъектыЖурналаДокументов КАК ОбъектыЖурнала
	|" + ?(ПолучатьПомеченныеНаУдаление, "", "
	|ГДЕ
	|	НЕ ОбъектыЖурнала.ПометкаУдаления") + "
	|");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
			Если Выборка.ТипЗначения.СодержитТип(Тип) Тогда
				Результат.Добавить(Выборка.Ссылка);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Результат;
КонецФункции // ПолучитьМассивЭлементовПВХОбъектыЖурналаПоОписаниюТипов()

// Функция возвращает ссылку ПВХ по типу.
//
// Параметры:
//	Тип                             - ОписаниеТипов	- Тип элемента ПВХ.
//	ПолучатьПомеченныеНаУдаление	- Булево		- Признак получения помеченных на удаление.
//	МассивСсылок					- Массив		- Массив элементов ПВХ.
//
// Возвращаемое значение:
//	Неопределено или Массив	- Массив ссылок на элемент ПВХ.
//
Функция ПолучитьСсылкуПВХОбъектыЖурналаПоТипу(Тип, ПолучатьПомеченныеНаУдаление = Ложь,
	 МассивСсылок = Неопределено) Экспорт
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип);
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	МассивСсылок = ПолучитьМассивЭлементовПВХОбъектыЖурналаПоОписаниюТипов(ОписаниеТипов, ПолучатьПомеченныеНаУдаление);
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат МассивСсылок[0];
	КонецЕсли;
КонецФункции // ПолучитьСсылкуПВХОбъектыЖурналаПоТипу()

// Процедура заполняет и проверяет корректность элементов ПВХ CRM_ОбъектыЖурналаДокументов,
// вызывается при обновлении конфигурации.
//
// Параметры:
//	ПерезаписыватьНаименования	- Булево	- Признак перезаписи наименования.
//
Процедура ЗаполнитьПроверитьПВХОбъектыЖурнала(ПерезаписыватьНаименования = Ложь) Экспорт
	Типы = Метаданные.ПланыВидовХарактеристик.CRM_ОбъектыЖурналаДокументов.Тип.Типы();
	Запрос = Новый Запрос(
	"ВЫБРАТЬ  
	|	ОбъектыЖурнала.Ссылка		КАК Ссылка,
	|	ОбъектыЖурнала.ТипЗначения	КАК ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.CRM_ОбъектыЖурналаДокументов КАК ОбъектыЖурнала
	|ГДЕ
	|	НЕ ОбъектыЖурнала.ПометкаУдаления
	|");
	ТаблицаВсеЭлементы = Запрос.Выполнить().Выгрузить();
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ТаблицаВсеЭлементы.Колонки.Добавить("НеОбрабатывать", ОписаниеТиповБулево);
	// Пометим на удаление заведомо неверные ссылки.
	Для Каждого СтрокаТаблицы Из ТаблицаВсеЭлементы Цикл
		Если СтрокаТаблицы.ТипЗначения.Типы().Количество() = 0 Или СтрокаТаблицы.ТипЗначения.Типы().Количество() > 1 Тогда
			Объект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
			Объект.УстановитьПометкуУдаления(Истина);
			СтрокаТаблицы.НеОбрабатывать = Истина;
		КонецЕсли;
	КонецЦикла;
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	МассивТиповДляСоздания		= Новый Массив();
	МассивДублирующихсяТипов	= Новый Массив();
	Для Каждого Тип Из Типы Цикл
		СчетчикНайденныхТипов = 0;
		Для Каждого СтрокаТаблицы Из ТаблицаВсеЭлементы Цикл
			Если СтрокаТаблицы.НеОбрабатывать Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаТаблицы.ТипЗначения.СодержитТип(Тип) Тогда
				СчетчикНайденныхТипов = СчетчикНайденныхТипов + 1;
				
				Если ПерезаписыватьНаименования Тогда
					Объект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
					Объект.Наименование = Строка(Тип);
					Объект.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если СчетчикНайденныхТипов = 0 Тогда
			Если СтрНайти(ВРег(Метаданные.НайтиПоТипу(Тип).Имя), Врег("Удалить")) = 0 Тогда
				МассивТиповДляСоздания.Добавить(Тип);
			КонецЕсли;
		ИначеЕсли СчетчикНайденныхТипов > 1 Тогда
			МассивДублирующихсяТипов.Добавить(Тип);
		КонецЕсли;
	КонецЦикла;
	// Создаем элементы
	Если МассивТиповДляСоздания.Количество() > 0 Тогда
		Для Каждого Тип Из МассивТиповДляСоздания Цикл
			Попытка
				МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
			
			Исключение	МетаданныеТипа = Неопределено;
			КонецПопытки;
			Если МетаданныеТипа = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МассивТипов = Новый Массив();
			МассивТипов.Добавить(Тип);
			ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
			Объект = ПланыВидовХарактеристик.CRM_ОбъектыЖурналаДокументов.СоздатьЭлемент();
			Объект.Наименование = МетаданныеТипа.Синоним;
			Объект.ТипЗначения = ОписаниеТипов;
			Объект.Записать();
		КонецЦикла;
	КонецЕсли;
	// Обработаем дублирующиеся типы.
	Для Каждого Тип Из МассивДублирующихсяТипов Цикл
		МассивДублирующихсяСсылок = Новый Массив();
		ПолучитьСсылкуПВХОбъектыЖурналаПоТипу(Тип, , МассивДублирующихсяСсылок);
		Для Каждого ДублирующаясяСсылка Из МассивДублирующихсяСсылок Цикл
			Массив = Новый Массив();
			Массив.Добавить(ДублирующаясяСсылка);
			ТаблицаСсылок = НайтиПоСсылкам(Массив);
			Если ТаблицаСсылок.Количество() = 0 Тогда
				// Если на элемент ПВХ нет ссылок - ставим ему пометку удаления.
				Объект = ДублирующаясяСсылка.ПолучитьОбъект();
				Объект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	// Удаляем записи регистра сведений, связанные с помечаемыми на удаление элементами.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОбъектыЖурнала.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.CRM_ОбъектыЖурналаДокументов КАК ОбъектыЖурнала
	|ГДЕ
	|	ОбъектыЖурнала.ПометкаУдаления
	|");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЖурналОбъектов.Клиент	КАК Клиент,
		|	ЖурналОбъектов.Объект	КАК Объект
		|ИЗ
		|	РегистрСведений.CRM_ЖурналДокументов КАК ЖурналОбъектов
		|ГДЕ
		|	ЖурналОбъектов.ТипОбъекта = &ТипОбъекта
		|");
		Запрос.УстановитьПараметр("ТипОбъекта", Выборка.Ссылка);
		Выборка = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапрос(Запрос).Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.CRM_ЖурналДокументов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Клиент = Выборка.Клиент;
			МенеджерЗаписи.Объект = Выборка.Объект;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры // ЗаполнитьПроверитьПВХОбъектыЖурнала()

// Процедура - обработчик подписки на событие "CRM_ОбъектЖурналаПередЗаписью".
//
// Параметры:
//	Источник		- Произвольный				- Источник подписки.
//	Отказ			- Булево					- Флаг отказа от подписки.
//	РежимЗаписи		- РежимЗаписиДокумента		- Режим записи документа.
//	РежимПроведения	- РежимПроведенияДокумента	- Режим проведения документа.
//
Процедура ПередЗаписьюОбъектаОбщегоЖурнала(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипИсточника = ТипЗнч(Источник.Ссылка);
	
	// Связывание нового лида с интересами.
	Если Источник.ЭтоНовый()
		И Не Источник.ДополнительныеСвойства.Свойство("CRM_ТаблицаИнтересов")
		И РегистрыСведений.CRM_НастройкиСвязиОбращенийСИнтересами.СвязыватьСИнтересом(Источник) Тогда
		CRM_ОбщегоНазначенияСервер.СвязатьОбъектСИнтересом(Источник);
		Если ТипИсточника = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			CRM_ОбщегоНазначенияСервер.ЗаполнитьОтветственногоВходящегоПисьмаПоСвязаннымИнтересам(Источник);
		КонецЕсли;
	КонецЕсли;
	
	// Если Это исход. электронное письмо или СообщениеSMS и оно помечено на удаление
	// то удалим связанные с ним записи оповещений, если они есть.
	//
	Если (ТипЗнч(Источник) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.СообщениеSMS")) И НЕ Источник.ЭтоНовый() Тогда
		Если НЕ (Источник.ПометкаУдаления = Источник.Ссылка.ПометкаУдаления) И Источник.ПометкаУдаления Тогда
			CRM_ОповещенияСервер.УдалитьОповещенияПоДокументу(Источник.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	// Получение элемента ПВХ, соответствующего источнику.
	ТипОбъекта = ПолучитьСсылкуПВХОбъектыЖурналаПоТипу(ТипИсточника);
	// Если не найдено элемента ПВХ, соответствующего записываемому объекту - ничего больше не делаем.
	Если ТипОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Источник.ЭтоНовый() И НЕ Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Взаимодействие") Тогда
		Если Источник.ЭтоНовый() Тогда
			Источник.ДополнительныеСвойства.ЭтоНовый = Истина;
			Если Источник.СостояниеИнтереса.Завершено Тогда
				
				Источник.ДополнительныеСвойства.Вставить("ИнтересЗавершен", Истина);
				
			ИначеЕсли ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес")
				 И Источник.ДокументОснование.СостояниеИнтереса <> Источник.СостояниеИнтереса Тогда
				Источник.ДополнительныеСвойства.Вставить("ИзмененоСостояниеИнтереса", Истина);
			КонецЕсли;
		Иначе
			// Поменяли состояние интереса
			Если НЕ Источник.СостояниеИнтереса = Источник.Ссылка.СостояниеИнтереса Тогда
				
				// Поменялся статус взаимодействия
				Если НЕ Источник.СтатусВзаимодействия = Источник.Ссылка.СтатусВзаимодействия Тогда
					
					// Завершили взаимодествие
					Если Источник.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено Тогда
						
						// Интерес закрыт или Потерян
						Если Источник.СостояниеИнтереса.Завершено Тогда
							
							Источник.ДополнительныеСвойства.Вставить("ИнтересЗавершен", Истина);
							
							// Просто изменилось состояние интереса
						Иначе
							Источник.ДополнительныеСвойства.Вставить("ИзмененоСостояниеИнтереса", Истина);
						КонецЕсли;
						
						// Отменили завершение взаимодествия
					ИначеЕсли Источник.Ссылка.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено Тогда
						
						Источник.ДополнительныеСвойства.Вставить("ИзмененоСостояниеИнтереса", Истина);
						
					КонецЕсли;
					
				Иначе
					Если Источник.СостояниеИнтереса.Завершено Тогда
						
						Источник.ДополнительныеСвойства.Вставить("ИнтересЗавершен", Истина);
						
					Иначе
						
						Источник.ДополнительныеСвойства.Вставить("ИнтересОтменаЗавершения", Истина);
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Проверим следующее: если это событие, не новое и изменен ответственный,
	// то в доп. свойства добавим свойство "ИзмененОтветственный".
	Если НЕ Источник.ЭтоНовый() И ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Взаимодействие")
		 И (НЕ Источник.Ответственный = Источник.Ссылка.Ответственный) Тогда
		Источник.ДополнительныеСвойства.Вставить("ИзмененОтветственный", Истина);
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюОбъектаОбщегоЖурнала()

// Процедура - обработчик подписки на событие "CRM_ПриЗаписиОбъектаКлиента".
//
// Параметры:
//	Источник	- Произвольный	- Источник подписки.
//	Отказ		- Булево		- Флаг отказа от подписки.
//
Процедура ЗарегистрироватьОбъектВОбщемЖурнале(Источник, Отказ) Экспорт
	
	// АПК:75-выкл Отсутствует обязательная конструкция "Если ОбменДанными.Загрузка Тогда ..."
	Если Источник.ДополнительныеСвойства.Свойство("ОтключитьПроверкуЗагрузки") Тогда
	Иначе
	// АПК:75-вкл
		Если Источник.ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НеРегистрироватьВЖурнале")
		 И Источник.ДополнительныеСвойства.НеРегистрироватьВЖурнале Тогда
		Возврат;
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипИсточника = ТипЗнч(Источник.Ссылка);
	// Получение элемента ПВХ, соответствующего источнику.
	ТипОбъекта = ПолучитьСсылкуПВХОбъектыЖурналаПоТипу(ТипИсточника);
	// Если не найдено элемента ПВХ, соответствующего записываемому объекту - ничего больше не делаем.
	Если ТипОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ЛентаСобытий.ПриЗаписиОбъектаЛенты(Источник);
	
	МетаданныеИсточника = Источник.Метаданные();
	// Набор записей с отбором по источнику.
	НаборЗаписей = РегистрыСведений.CRM_ЖурналДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
	ТаблицаЗаписей = НаборЗаписей.Выгрузить(); // Только для создания пустой таблицы с нужными колонками.
	ЭтоДокумент = Метаданные.Документы.Содержит(МетаданныеИсточника);
	Если ЭтоДокумент Тогда
		ПроведениеДокументаРазрешено = (МетаданныеИсточника.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить);
	Иначе
		ПроведениеДокументаРазрешено = Ложь;
	КонецЕсли;
	
	Попытка
		ЭтоНовый = Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") И Источник.ДополнительныеСвойства.ЭтоНовый;
	Исключение
		ЭтоНовый = Ложь;
	КонецПопытки;
	
	Если ТипИсточника = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
		ГлавнаяЗапись = ТаблицаЗаписей.Добавить();
		ГлавнаяЗапись.ГлавнаяЗапись = Истина;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Партнер") Тогда
			ГлавнаяЗапись.Клиент = Источник.Партнер;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Клиент") Тогда
			ГлавнаяЗапись.Клиент = Источник.Клиент;
		КонецЕсли;
		ГлавнаяЗапись.Описание = CRM_ОбщегоНазначенияСервер.ПолучитьТекстовоеОписанияОбъекта(Источник);
		ЗаполнитьЗначенияСвойств(ГлавнаяЗапись, Источник, "Организация");
		ГлавнаяЗапись.Ответственный = Источник.Менеджер;
		ГлавнаяЗапись.Автор = Источник.Автор;
		ГлавнаяЗапись.Подразделение = Источник.CRM_Подразделение;
		ГлавнаяЗапись.Проект = Источник.CRM_Проект;
		ГлавнаяЗапись.Валюта = Источник.Валюта;
		ГлавнаяЗапись.Сумма = Источник.СуммаДокумента;
		// Если КП создали в результате мастера конвертации, то пропишем связь с интересом.
		Если Источник.Проведен И СтрНайти(Источник.Комментарий, Нстр("ru='#Конвертация';en='#Conversion'")) > 0 Тогда
			Если ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") 
				И СтрНайти(Строка(Источник.ДокументОснование), НСтр("ru='<Объект не найден>';en='<Object not found>'")) = 0 Тогда
				ГлавнаяЗапись.CRM_Интерес				= Источник.ДокументОснование;
				ГлавнаяЗапись.СостояниеИнтереса			= Источник.ДокументОснование.СостояниеИнтереса;
				ГлавнаяЗапись.ИнтересЯвляетсяОснованием = Истина;
				ГлавнаяЗапись.ОсновнойИнтерес			= Истина;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
		ГлавнаяЗапись = ТаблицаЗаписей.Добавить();
		ГлавнаяЗапись.ГлавнаяЗапись = Истина;
		ГлавнаяЗапись.Описание = CRM_ОбщегоНазначенияСервер.ПолучитьТекстовоеОписанияОбъекта(Источник);
		ЗаполнитьЗначенияСвойств(ГлавнаяЗапись, Источник, "Важность,Ответственный,Подразделение,Автор,Проект");
		Для Каждого СтрокаТаблицы Из Источник.Получатели Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Партнер) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись = ТаблицаЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ГлавнаяЗапись, , "ГлавнаяЗапись");
			НоваяЗапись.Клиент = СтрокаТаблицы.Партнер;
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ГлавнаяЗапись = ТаблицаЗаписей.Добавить();
		ГлавнаяЗапись.ГлавнаяЗапись = Истина;
		Если ТипЗнч(Источник.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры")
			Или ТипЗнч(Источник.ОтправительКонтакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты")
				 И ЗначениеЗаполнено(Источник.ОтправительКонтакт) Тогда
			ГлавнаяЗапись.Клиент = Источник.ОтправительКонтакт;
		ИначеЕсли ТипЗнч(Источник.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
			 И ЗначениеЗаполнено(Источник.ОтправительКонтакт) Тогда
			ГлавнаяЗапись.Клиент = Источник.ОтправительКонтакт.Владелец;
			ГлавнаяЗапись.КонтактноеЛицо = Источник.ОтправительКонтакт;
		КонецЕсли;
		ГлавнаяЗапись.Описание = CRM_ОбщегоНазначенияСервер.ПолучитьТекстовоеОписанияОбъекта(Источник);
		
		// Для Входящих писем заполняем ресурс "СписокУчастников" на основе реквизитов письма "СписокПолучателейКопий" И
		// "СписокПолучателейПисьма".
		ГлавнаяЗапись.СписокУчастников = "" + Источник.СписокПолучателейПисьма +
		?(ПустаяСтрока(Источник.СписокПолучателейКопий), "", ", " + Источник.СписокПолучателейКопий); 
		
		//////
		ЗаполнитьЗначенияСвойств(ГлавнаяЗапись, Источник, "Важность,Ответственный");
		ГлавнаяЗапись.Дата = Источник.ДатаПолучения;

	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ГлавнаяЗапись = ТаблицаЗаписей.Добавить();
		ГлавнаяЗапись.ГлавнаяЗапись = Истина;
		Если ТипЗнч(Источник.CRM_ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры")
			 И ЗначениеЗаполнено(Источник.CRM_ОтправительКонтакт) Тогда
			ГлавнаяЗапись.Клиент = Источник.CRM_ОтправительКонтакт;
		ИначеЕсли ТипЗнч(Источник.CRM_ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
			 И ЗначениеЗаполнено(Источник.CRM_ОтправительКонтакт) Тогда
			ГлавнаяЗапись.Клиент = Источник.CRM_ОтправительКонтакт.Владелец;
			ГлавнаяЗапись.КонтактноеЛицо = Источник.CRM_ОтправительКонтакт;
		КонецЕсли;
		ГлавнаяЗапись.Описание = CRM_ОбщегоНазначенияСервер.ПолучитьТекстовоеОписанияОбъекта(Источник);
		
		// Для Исходящих писем заполняем ресурс "СписокУчастников" на основе реквизитов письма 
		//	"СписокПолучателейКопий", "СписокПолучателейПисьма" И "СписокПолучателейСкрытыхКопий"
		ГлавнаяЗапись.СписокУчастников = "" + Источник.СписокПолучателейПисьма +
		?(ПустаяСтрока(Источник.СписокПолучателейКопий), "", ", " + Источник.СписокПолучателейКопий) +
		?(ПустаяСтрока(Источник.СписокПолучателейСкрытыхКопий), "", ", " + Источник.СписокПолучателейСкрытыхКопий); 
		
		/////
		ЗаполнитьЗначенияСвойств(ГлавнаяЗапись, Источник, "Автор,Важность,Ответственный");
		МассивТабличныхЧастей = Новый Массив();
		МассивТабличныхЧастей.Добавить("ПолучателиПисьма");
		МассивТабличныхЧастей.Добавить("ПолучателиКопий");
		МассивТабличныхЧастей.Добавить("ПолучателиОтвета");
		МассивТабличныхЧастей.Добавить("ПолучателиСкрытыхКопий");
		Для Каждого ИмяТабличнойЧасти Из МассивТабличныхЧастей Цикл
			Для Каждого СтрокаТаблицы Из Источник[ИмяТабличнойЧасти] Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Или 
					(ТипЗнч(СтрокаТаблицы.Контакт) <> Тип("СправочникСсылка.Партнеры") 
						И ТипЗнч(СтрокаТаблицы.Контакт) <> Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
						И ТипЗнч(СтрокаТаблицы.Контакт) <> Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты")) Тогда
					Продолжить;
				КонецЕсли;
				НоваяЗапись = ТаблицаЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ГлавнаяЗапись, , "ГлавнаяЗапись, СписокУчастников");
				Если ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					НоваяЗапись.КонтактноеЛицо = СтрокаТаблицы.Контакт;
					НоваяЗапись.Клиент = СтрокаТаблицы.Контакт.Владелец;
				Иначе
					НоваяЗапись.Клиент = СтрокаТаблицы.Контакт;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СообщениеSMS") Тогда
		ГлавнаяЗапись = ТаблицаЗаписей.Добавить();
		ГлавнаяЗапись.ГлавнаяЗапись = Истина;
		ГлавнаяЗапись.Описание = CRM_ОбщегоНазначенияСервер.ПолучитьТекстовоеОписанияОбъекта(Источник);
		ЗаполнитьЗначенияСвойств(ГлавнаяЗапись, Источник, "Автор,Ответственный,СписокУчастников");
		Для Каждого СтрокаТаблицы Из Источник.Адресаты Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контакт) 
				ИЛИ (ТипЗнч(СтрокаТаблицы.Контакт) <> Тип("СправочникСсылка.Партнеры") 
				И ТипЗнч(СтрокаТаблицы.Контакт) <> Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
				И ТипЗнч(СтрокаТаблицы.Контакт) <> Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты")) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись = ТаблицаЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ГлавнаяЗапись, , "ГлавнаяЗапись, СписокУчастников");
			НоваяЗапись.Клиент = ?(ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка.Партнеры"),
				 СтрокаТаблицы.Контакт,
				 СтрокаТаблицы.Контакт.Владелец);
			Если ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				НоваяЗапись.КонтактноеЛицо = СтрокаТаблицы.Контакт;
				НоваяЗапись.Клиент = СтрокаТаблицы.Контакт.Владелец;
			Иначе
				НоваяЗапись.Клиент = СтрокаТаблицы.Контакт;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = Тип("СправочникСсылка.CRM_Диалоги") Тогда
		ГлавнаяЗапись = ТаблицаЗаписей.Добавить();
		ГлавнаяЗапись.ГлавнаяЗапись = Истина;
		ГлавнаяЗапись.Описание = CRM_ОбщегоНазначенияСервер.ПолучитьТекстовоеОписанияОбъекта(Источник);
		ЗаполнитьЗначенияСвойств(ГлавнаяЗапись, Источник, "Ответственный");
		Если (ТипЗнч(Источник.Контакт) = Тип("СправочникСсылка.Партнеры")
			Или ТипЗнч(Источник.Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты")) И ЗначениеЗаполнено(Источник.Контакт) Тогда
			ГлавнаяЗапись.Клиент = Источник.Контакт;
		ИначеЕсли ТипЗнч(Источник.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
			 И ЗначениеЗаполнено(Источник.Контакт) Тогда
			ГлавнаяЗапись.Клиент = Источник.Контакт.Владелец;
			ГлавнаяЗапись.КонтактноеЛицо = Источник.Контакт;
		КонецЕсли;
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		ГлавнаяЗапись = ТаблицаЗаписей.Добавить();
		ГлавнаяЗапись.ГлавнаяЗапись = Истина;
		ГлавнаяЗапись.Описание = CRM_ОбщегоНазначенияСервер.ПолучитьТекстовоеОписанияОбъекта(Источник);
		Диалог = Источник.Диалог;
		ЗаполнитьЗначенияСвойств(ГлавнаяЗапись, Диалог, "Ответственный");
		Если (ТипЗнч(Диалог.Контакт) = Тип("СправочникСсылка.Партнеры")
			Или ТипЗнч(Диалог.Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты")) И ЗначениеЗаполнено(Диалог.Контакт) Тогда
			ГлавнаяЗапись.Клиент = Диалог.Контакт;
		ИначеЕсли ТипЗнч(Диалог.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
			 И ЗначениеЗаполнено(Диалог.Контакт) Тогда
			ГлавнаяЗапись.Клиент = Диалог.Контакт.Владелец;
			ГлавнаяЗапись.КонтактноеЛицо = Диалог.Контакт;
		КонецЕсли;
		Если Источник.ВидСообщения = Перечисления.CRM_ВидыСообщенияМессенджера.Входящее Тогда
			ГлавнаяЗапись.ВходящееИсходящее = Перечисления.CRM_ВходящееИсходящееСобытие.Входящее;
		Иначе
			ГлавнаяЗапись.ВходящееИсходящее = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.CRM_Заявка") Тогда
		ГлавнаяЗапись = ТаблицаЗаписей.Добавить();
		ГлавнаяЗапись.ГлавнаяЗапись = Истина;
		ГлавнаяЗапись.Описание = CRM_ОбщегоНазначенияСервер.ПолучитьТекстовоеОписанияОбъекта(Источник);
		ЗаполнитьЗначенияСвойств(ГлавнаяЗапись, Источник, "Ответственный");
		Если ЗначениеЗаполнено(Источник.Контакт) Тогда
			Если ТипЗнч(Источник.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ГлавнаяЗапись.Клиент = Источник.Контакт.Владелец;
				ГлавнаяЗапись.КонтактноеЛицо = Источник.Контакт;
			Иначе
				ГлавнаяЗапись.Клиент = Источник.Контакт;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.CRM_Интерес") Тогда
		ГлавнаяЗапись = ТаблицаЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ГлавнаяЗапись, Источник);
		ГлавнаяЗапись.ГлавнаяЗапись = Истина;
		ГлавнаяЗапись.СостояниеСобытия = ?(Источник.Завершен,
			 ?(Источник.СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение,
			Справочники.CRM_СостоянияСобытий.Отменено, Справочники.CRM_СостоянияСобытий.Завершено), Справочники.CRM_СостоянияСобытий.ВРаботе);
		ГлавнаяЗапись.CRM_Интерес = Источник.Ссылка;
		ГлавнаяЗапись.Сумма = Источник.ОжидаемаяВыручка;
		ГлавнаяЗапись.Валюта = Константы.ВалютаУправленческогоУчета.Получить();
		ГлавнаяЗапись.Описание = Источник.Тема;
		ГлавнаяЗапись.ОсновнойИнтерес = Истина;
		Если ЗначениеЗаполнено(Источник.Партнер) Тогда
			ГлавнаяЗапись.Клиент = Источник.Партнер;
		ИначеЕсли ЗначениеЗаполнено(Источник.ПотенциальныйКлиент) Тогда
			ГлавнаяЗапись.Клиент = Источник.ПотенциальныйКлиент;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из Источник.Контакты Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись = ТаблицаЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ГлавнаяЗапись, , "ГлавнаяЗапись, Клиент, КонтактноеЛицо");
			НоваяЗапись.Клиент = СтрокаТаблицы.Контакт.Владелец;
			НоваяЗапись.КонтактноеЛицо = СтрокаТаблицы.Контакт;
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
		
		ГлавнаяЗапись = ТаблицаЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ГлавнаяЗапись, Источник);
		ГлавнаяЗапись.ГлавнаяЗапись = Истина;
		ГлавнаяЗапись.СостояниеСобытия = Источник.СтатусВзаимодействия;
		Если ЗначениеЗаполнено(Источник.ДокументОснование)
			 И ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			ГлавнаяЗапись.CRM_Интерес = Источник.ДокументОснование;
			ГлавнаяЗапись.СостояниеИнтереса = Источник.ДокументОснование.СостояниеИнтереса;
			ГлавнаяЗапись.ОсновнойИнтерес = Истина;
		КонецЕсли;
		ГлавнаяЗапись.Сумма = Источник.ОжидаемаяВыручка;
		ГлавнаяЗапись.Валюта = Константы.ВалютаУправленческогоУчета.Получить();
		ГлавнаяЗапись.Описание = Источник.Тема;
		Если ЗначениеЗаполнено(Источник.ВидВзаимодействия) Тогда
			ГлавнаяЗапись.ВходящееИсходящее = Источник.ВидВзаимодействия.Направление;
			ГлавнаяЗапись.ВидСобытия = Источник.ВидВзаимодействия.ВидСобытия;
		КонецЕсли;
		
		ЗаполнятьПартнераКонтактноеЛицоГлавнойЗаписиИзТаблицы = Ложь;
		Если ЗначениеЗаполнено(Источник.Партнер) Тогда
			ГлавнаяЗапись.Клиент = Источник.Партнер;
		ИначеЕсли ЗначениеЗаполнено(Источник.ПотенциальныйКлиент) Тогда
			ГлавнаяЗапись.Клиент = Источник.ПотенциальныйКлиент;
		ИначеЕсли Источник.ВидВзаимодействия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча Тогда // пока только у Встречи выводится ТЧ участников 	
			ЗаполнятьПартнераКонтактноеЛицоГлавнойЗаписиИзТаблицы = Истина;
		КонецЕсли;
		ГлавнаяЗапись.КонтактноеЛицо = Источник.КонтактноеЛицо;
		ГлавнаяЗапись.СписокУчастников = Источник.СписокКлиентов;

		Для Каждого СтрокаТаблицы Из Источник.СторонниеЛица Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Партнер) Тогда
				Продолжить;
			КонецЕсли;
			Если ЗаполнятьПартнераКонтактноеЛицоГлавнойЗаписиИзТаблицы Тогда
				ГлавнаяЗапись.Клиент = СтрокаТаблицы.Партнер;
				ГлавнаяЗапись.КонтактноеЛицо = СтрокаТаблицы.КонтактноеЛицо;
				ЗаполнятьПартнераКонтактноеЛицоГлавнойЗаписиИзТаблицы = Ложь;
			Иначе
				НоваяЗапись = ТаблицаЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ГлавнаяЗапись, , "ГлавнаяЗапись");
				НоваяЗапись.Клиент = СтрокаТаблицы.Партнер;
				НоваяЗапись.КонтактноеЛицо = СтрокаТаблицы.КонтактноеЛицо;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
		ГлавнаяЗапись = ТаблицаЗаписей.Добавить();
		ГлавнаяЗапись.ГлавнаяЗапись = Истина;
		ГлавнаяЗапись.Описание = CRM_ОбщегоНазначенияСервер.ПолучитьТекстовоеОписанияОбъекта(Источник);
		ЗаполнитьЗначенияСвойств(ГлавнаяЗапись, Источник, "Автор,Важность,Ответственный");
		Для Каждого СтрокаТаблицы Из Источник.Участники Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Партнер) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись = ТаблицаЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ГлавнаяЗапись, , "ГлавнаяЗапись");
			НоваяЗапись.Клиент = СтрокаТаблицы.Партнер;
			НоваяЗапись.КонтактноеЛицо = СтрокаТаблицы.КонтактноеЛицо;
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		ГлавнаяЗапись = ТаблицаЗаписей.Добавить();
		ГлавнаяЗапись.ГлавнаяЗапись = Истина;
		Если ЗначениеЗаполнено(Источник.Партнер) Тогда
			ГлавнаяЗапись.Клиент = Источник.Партнер;
		ИначеЕсли ЗначениеЗаполнено(Источник.ПотенциальныйКлиент) Тогда
			ГлавнаяЗапись.Клиент = Источник.ПотенциальныйКлиент;
		КонецЕсли;
		Если ТипЗнч(Источник.Предмет) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			ГлавнаяЗапись.CRM_Интерес = Источник.Предмет;
		КонецЕсли;	
		ГлавнаяЗапись.Описание = CRM_ОбщегоНазначенияСервер.ПолучитьТекстовоеОписанияОбъекта(Источник);
		ЗаполнитьЗначенияСвойств(ГлавнаяЗапись, Источник, "Автор,Важность,Организация,Подразделение,
			|Ответственный,Проект,
			|Сумма");
		ГлавнаяЗапись.Проведен = (Источник.Стартован);
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.Анкета") Тогда
		
		Если ТипЗнч(Источник.Респондент) = Тип("СправочникСсылка.Пользователи") Тогда
			
			ГлавнаяЗапись = ТаблицаЗаписей.Добавить();
			
			ГлавнаяЗапись.ГлавнаяЗапись = Истина;
			ГлавнаяЗапись.Описание = CRM_ОбщегоНазначенияСервер.ПолучитьТекстовоеОписанияОбъекта(Источник);
			
		Иначе
			
			Если ТипЗнч(Источник.Респондент) = Тип("СправочникСсылка.Партнеры") Тогда
				
				АнкетаКлиент = Источник.Респондент;
				
			Иначе // контактное лицо
				
				АнкетаКлиент = Источник.Респондент.Владелец;
				
			КонецЕсли;	
			
			ГлавнаяЗапись = ТаблицаЗаписей.Добавить();
			
			ГлавнаяЗапись.ГлавнаяЗапись = Истина;
			ГлавнаяЗапись.Клиент = АнкетаКлиент;
			ГлавнаяЗапись.Описание = CRM_ОбщегоНазначенияСервер.ПолучитьТекстовоеОписанияОбъекта(Источник);
			
		КонецЕсли;
		
	// +СофтФон	
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		ГлавнаяЗапись				= ТаблицаЗаписей.Добавить();
		ГлавнаяЗапись.ГлавнаяЗапись	= Истина;
		ГлавнаяЗапись.ВидСобытия			= Перечисления.CRM_ВидыСобытий.ТелефонныйЗвонок;
		ГлавнаяЗапись.СостояниеСобытия		= Справочники.CRM_СостоянияСобытий.Завершено;
		ЗаполнитьЗначенияСвойств(ГлавнаяЗапись, Источник);
		Если ЗначениеЗаполнено(Источник.ВзаимодействиеОснование)
			И ТипЗнч(Источник.ВзаимодействиеОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			ГлавнаяЗапись.CRM_Интерес = Источник.ВзаимодействиеОснование;
			ГлавнаяЗапись.ОсновнойИнтерес = Истина;
		КонецЕсли;
		Если Источник.Входящий Тогда
			ГлавнаяЗапись.ВходящееИсходящее	= Перечисления.CRM_ВходящееИсходящееСобытие.Входящее;
		Иначе
			ГлавнаяЗапись.ВходящееИсходящее	= Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее;
		КонецЕсли;		
		Если ТипЗнч(Источник.АбонентКонтакт) = Тип("СправочникСсылка.Партнеры")
			Или ТипЗнч(Источник.АбонентКонтакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			ГлавнаяЗапись.Клиент		= Источник.АбонентКонтакт;
		ИначеЕсли ТипЗнч(Источник.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ГлавнаяЗапись.Клиент		= Источник.АбонентКонтакт.Владелец;
			ГлавнаяЗапись.КонтактноеЛицо		= Источник.АбонентКонтакт;
		Иначе
			Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				ТипКонтрагенты = "СправочникСсылка.Контрагенты";
				Если ТипЗнч(Источник.АбонентКонтакт) = Тип(ТипКонтрагенты) Тогда
					ГлавнаяЗапись.Клиент = Источник.АбонентКонтакт.Партнер;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	// -СофтФон	
		
	ИначеЕсли ТипИсточника = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ГлавнаяЗапись = ТаблицаЗаписей.Добавить();
		ГлавнаяЗапись.ГлавнаяЗапись = Истина;
		ГлавнаяЗапись.Описание = Источник.Наименование;
		ЗаполнитьЗначенияСвойств(ГлавнаяЗапись, Источник, "Автор,Важность,Дата");
		
		ЕстьПредметУБизнесПроцесса = Ложь;
		Если Не (Источник.БизнесПроцесс = Неопределено) Тогда
			ЕстьПредметУБизнесПроцесса = (Не Источник.CRM_Личная)
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник.БизнесПроцесс, "Предмет");
		КонецЕсли;
		
		Если Источник.CRM_Личная И ЗначениеЗаполнено(Источник.Предмет)
			 И ТипЗнч(Источник.Предмет) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			
			ГлавнаяЗапись.CRM_Интерес = Источник.Предмет;
			ГлавнаяЗапись.ОсновнойИнтерес = Истина;
			
		ИначеЕсли ЗначениеЗаполнено(Источник.БизнесПроцесс) И ЕстьПредметУБизнесПроцесса
				И ТипЗнч(Источник.БизнесПроцесс.Предмет) = Тип("ДокументСсылка.CRM_Интерес") Тогда 
				
			ГлавнаяЗапись.CRM_Интерес = Источник.БизнесПроцесс.Предмет;
			ГлавнаяЗапись.ОсновнойИнтерес = Истина;
			
		ИначеЕсли ЗначениеЗаполнено(Источник.БизнесПроцесс) И ЗначениеЗаполнено(Источник.БизнесПроцесс.ВедущаяЗадача) 
				И ЗначениеЗаполнено(Источник.БизнесПроцесс.ВедущаяЗадача.БизнесПроцесс)
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник.БизнесПроцесс.ВедущаяЗадача.БизнесПроцесс,
					 "Предмет")
				И ТипЗнч(Источник.БизнесПроцесс.ВедущаяЗадача.БизнесПроцесс.Предмет) = Тип("ДокументСсылка.CRM_Интерес") Тогда
				
			ГлавнаяЗапись.CRM_Интерес = Источник.БизнесПроцесс.ВедущаяЗадача.БизнесПроцесс.Предмет;
			ГлавнаяЗапись.ОсновнойИнтерес = Истина;
			
		ИначеЕсли ЗначениеЗаполнено(Источник.БизнесПроцесс) И ЕстьПредметУБизнесПроцесса 
				И ЗначениеЗаполнено(Источник.БизнесПроцесс.Предмет) Тогда
				
			ГлавнаяЗаписьПредмета = ПолучитьГлавнуюЗаписьПоОбъекту(Источник.БизнесПроцесс.Предмет);
			
			Если ЗначениеЗаполнено(ГлавнаяЗаписьПредмета.CRM_Интерес) Тогда
				ГлавнаяЗапись.CRM_Интерес = ГлавнаяЗаписьПредмета.CRM_Интерес;
				ГлавнаяЗапись.ОсновнойИнтерес = Истина;
				
			ИначеЕсли ЕстьПредметУБизнесПроцесса
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник.БизнесПроцесс.Предмет, "ДокументОснование")
					И ТипЗнч(Источник.БизнесПроцесс.Предмет.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") 
					И ЗначениеЗаполнено(Источник.БизнесПроцесс.Предмет.ДокументОснование) Тогда

				ГлавнаяЗапись.CRM_Интерес = Источник.БизнесПроцесс.Предмет.ДокументОснование;
				ГлавнаяЗапись.ОсновнойИнтерес = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.CRM_Партнер) Тогда
			ГлавнаяЗапись.Клиент = Источник.CRM_Партнер;
			ГлавнаяЗапись.КонтактноеЛицо = Источник.CRM_КонтактноеЛицо;
			
		ИначеЕсли ЗначениеЗаполнено(Источник.CRM_ПотенциальныйКлиент) Тогда
			
			ГлавнаяЗапись.Клиент = Источник.CRM_ПотенциальныйКлиент;

		КонецЕсли;
		
		ГлавнаяЗапись.Ответственный = Источник.Исполнитель;
	Иначе
		// "универсальная" регистрация документа в журнале.
		ГлавнаяЗапись = ТаблицаЗаписей.Добавить();
		ГлавнаяЗапись.ГлавнаяЗапись = Истина;
		
		ЗаполнитьЗначенияСвойств(ГлавнаяЗапись, Источник);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Тема") Тогда
			ГлавнаяЗапись.Описание = Источник.Тема;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Наименование") Тогда
			ГлавнаяЗапись.Описание = Источник.Наименование;
		Иначе
			ГлавнаяЗапись.Описание = Строка(Источник.Ссылка);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ГлавнаяЗапись.Дата) Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Дата") Тогда
				ГлавнаяЗапись.Дата = Источник.Дата;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "ДатаНачала") Тогда
				ГлавнаяЗапись.Дата = Источник.ДатаНачала;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ГлавнаяЗапись.Номер) Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Номер") Тогда
				ГлавнаяЗапись.Номер = Источник.Номер;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Код") Тогда
				ГлавнаяЗапись.Номер = Источник.Код;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ГлавнаяЗапись.Ответственный) Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Менеджер") Тогда
				ГлавнаяЗапись.Ответственный = Источник.Менеджер;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ГлавнаяЗапись.Клиент) Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Партнер") Тогда
				ГлавнаяЗапись.Клиент = Источник.Партнер;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Контрагент") Тогда
				ГлавнаяЗапись.Клиент = Источник.Контрагент;
				Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Источник.Контрагент)
					 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник.Контрагент, "Партнер") Тогда
					ГлавнаяЗапись.Клиент = Источник.Контрагент.Партнер;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ГлавнаяЗапись.Сумма) Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "СуммаДокумента") Тогда
				ГлавнаяЗапись.Сумма = Источник.СуммаДокумента;
			КонецЕсли;
			
		КонецЕсли;
		
		// Попытка найти реквизиты "Партнер" в табличных частях объекта.
		ИсточникМетаданные = Источник.Метаданные();
		Попытка
			ТабличныеЧастиИтератор = ИсточникМетаданные.ТабличныеЧасти;
		
		Исключение	ТабличныеЧастиИтератор = Неопределено;
		КонецПопытки;
		Если ТабличныеЧастиИтератор <> Неопределено Тогда
			Для Каждого ТабЧасть Из ТабличныеЧастиИтератор Цикл
				ИмяРеквизитаПартнерИлиКонтрагент = Неопределено;
				Для Каждого РеквизитТЧ Из ТабЧасть.Реквизиты Цикл
					Если РеквизитТЧ.Тип.СодержитТип(Тип("СправочникСсылка.Партнеры")) Тогда
						ИмяРеквизитаПартнерИлиКонтрагент = РеквизитТЧ.Имя;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ИмяРеквизитаПартнерИлиКонтрагент <> Неопределено Тогда
					Для Каждого СтрокаТаблицы Из Источник[ТабЧасть.Имя] Цикл
						ПартнерВТЧ = Неопределено;
						Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяРеквизитаПартнерИлиКонтрагент])
							 И ТипЗнч(СтрокаТаблицы[ИмяРеквизитаПартнерИлиКонтрагент]) = Тип("СправочникСсылка.Партнеры") Тогда
							ПартнерВТЧ = СтрокаТаблицы[ИмяРеквизитаПартнерИлиКонтрагент];
						КонецЕсли;
						Если ЗначениеЗаполнено(ПартнерВТЧ) Тогда
							Если ТаблицаЗаписей.Найти(ПартнерВТЧ, "Клиент") = Неопределено Тогда
								НоваяЗапись = ТаблицаЗаписей.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяЗапись, ГлавнаяЗапись, , "ГлавнаяЗапись");
								НоваяЗапись.Клиент = ПартнерВТЧ;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Источник.Метаданные().Реквизиты.Найти("КонтактноеЛицо") <> Неопределено Тогда
		ГлавнаяЗапись.КонтактноеЛицо = Источник.КонтактноеЛицо;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Если ТаблицаЗаписей.Количество() > 0 Тогда
			// Удаление неуникальных записей.
			ТаблицаЗаписейКопия = ТаблицаЗаписей.Скопировать();
			ТаблицаЗаписей.Очистить();
			СтруктураПоиска = Новый Структура("Клиент,ГлавнаяЗапись");
			Для Каждого СтрокаТаблицы Из ТаблицаЗаписейКопия Цикл
				бДобавлятьСтроку = Истина;
				Если НЕ СтрокаТаблицы.ГлавнаяЗапись Тогда
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
					
					НайденныеСтроки = ТаблицаЗаписей.НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтроки.Количество() > 0 Тогда
						бДобавлятьСтроку = Ложь;
					КонецЕсли;
				КонецЕсли;
				Если бДобавлятьСтроку Тогда
					НоваяСтрока = ТаблицаЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				КонецЕсли;
			КонецЦикла;
			ТаблицаЗаписейКопия = Неопределено;
			
			// Заполнение обязательных полей.
			Для Каждого СтрокаТаблицы Из ТаблицаЗаписей Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Объект) Тогда
					СтрокаТаблицы.Объект = Источник.Ссылка;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ТипОбъекта) Тогда
					СтрокаТаблицы.ТипОбъекта = ТипОбъекта;
				КонецЕсли;
				Если ЭтоДокумент Тогда
					Если ПроведениеДокументаРазрешено Тогда
						СтрокаТаблицы.Проведен = Источник.Проведен;
					Иначе
						// Если проведение документа запрещено, ставим всегда "Проведен" -
						// это нужно для вычисления индекса картинки в списке,
						// чтобы отображение картинки соответствовало стандартному поведению платформы -
						// документы, которые не проводятся, всегда отображать как проведенные.
						СтрокаТаблицы.Проведен = Истина;
					КонецЕсли;
				КонецЕсли;
				// Номер, если он есть
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Номер") Тогда
					СтрокаТаблицы.Номер = Строка(Источник.Номер);
				КонецЕсли;
				// Дата, если она есть
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Дата") Тогда
					Если ТипЗнч(Источник.Дата) = Тип("Дата") Тогда
						// Для входящего письма нужно использовать не "Дата" документа, а "ДатаПолучения".
						Если ТипЗнч(СтрокаТаблицы.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
							СтрокаТаблицы.Дата = Источник.ДатаПолучения;
						ИначеЕсли ТипЗнч(СтрокаТаблицы.Объект) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
							СтрокаТаблицы.Дата = Источник.ПлановаяДата;
						Иначе	
							СтрокаТаблицы.Дата = Источник.Дата;
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли;
				СтрокаТаблицы.ПометкаУдаления = Источник.ПометкаУдаления;
			КонецЦикла;
			
			// Если НЕ ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Интерес") Тогда
			// Это пишем из формы документа.
			Если Источник.ДополнительныеСвойства.Свойство("CRM_ТаблицаИнтересов") Тогда
				CRM_ОбщегоНазначенияСервер.ДозаписатьСвязьСИнтересами(Источник, ТаблицаЗаписей,
					 Источник.ДополнительныеСвойства.CRM_ТаблицаИнтересов);
			Иначе
				// Пишем программно
				// Проверим не было ли связей с интересами.
				Если ТипЗнч(Источник) = Тип("ЗадачаОбъект.ЗадачаИсполнителя")
					И Источник.ДополнительныеСвойства.Свойство("ЭтоНовый")
					И Источник.ДополнительныеСвойства.ЭтоНовый Тогда
					
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("Объект", Источник.БизнесПроцесс);
					Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
					               |	CRM_ЖурналДокументов.CRM_Интерес КАК Ссылка,
					               |	CRM_ЖурналДокументов.СостояниеИнтереса КАК СостояниеИнтереса,
					               |	CRM_ЖурналДокументов.ОсновнойИнтерес КАК ОсновнойИнтерес,
					               |	CRM_ЖурналДокументов.ИнтересЯвляетсяОснованием КАК ВведенНаОсновании
					               |ИЗ
					               |	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
					               |ГДЕ
					               |	CRM_ЖурналДокументов.Объект = &Объект
					               |	И НЕ CRM_ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)
								   |	И НЕ CRM_ЖурналДокументов.CRM_Интерес.Завершен
					               |
					               |УПОРЯДОЧИТЬ ПО
					               |	ОсновнойИнтерес УБЫВ";
					
					ТаблицаСвязей	= Запрос.Выполнить().Выгрузить();
					
					Если ТаблицаСвязей.Количество() > 0 Тогда
						CRM_ОбщегоНазначенияСервер.ДозаписатьСвязьСИнтересами(Источник, ТаблицаЗаписей, ТаблицаСвязей);
					КонецЕсли;
				Иначе
					Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") И Источник.ДополнительныеСвойства.ЭтоНовый Тогда
						Основание = CRM_ОбщегоНазначенияСервер.ПроверитьПринадлежностьОснованияЖурналуДокументов(Источник.Ссылка);
						
						Если Основание = Неопределено 
							И НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM()
							И ТипЗнч(Источник) = Тип("ДокументОбъект." + "СчетНаОплатуКлиенту") Тогда
						
							ИмяРеквизитаОснования = "ДокументОснование";
							Основание = Источник[ИмяРеквизитаОснования];
						ИначеЕсли Основание = Неопределено 
							И (ТипЗнч(Источник) = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") 
							Или ТипЗнч(Источник) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее")) Тогда
							
							Основание = Источник.ВзаимодействиеОснование;
						КонецЕсли;
						
						Если НЕ Основание = Неопределено ИЛИ CRM_ОбщегоНазначенияСервер.ЯвляетсяОснованиемИнтереса(Источник.Ссылка) Тогда
							
							Запрос = Новый Запрос;
							Запрос.УстановитьПараметр("Объект", Основание);
							
							ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
							               |	CRM_ЖурналДокументов.CRM_Интерес КАК Ссылка,
							               |	CRM_ЖурналДокументов.СостояниеИнтереса КАК СостояниеИнтереса,
							               |	CRM_ЖурналДокументов.ОсновнойИнтерес КАК ОсновнойИнтерес,
							               |	CRM_ЖурналДокументов.ИнтересЯвляетсяОснованием КАК ВведенНаОсновании,
							               |	CRM_ЖурналДокументов.ГлавнаяЗапись КАК ГлавнаяЗапись
							               |ИЗ
							               |	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
							               |ГДЕ
							               |	CRM_ЖурналДокументов.Объект = &Объект
							               |	И НЕ CRM_ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)
							               |
							               |УПОРЯДОЧИТЬ ПО
							               |	ОсновнойИнтерес УБЫВ";
							
							Запрос.Текст	= ТекстЗапроса;
							ТаблицаСвязей	= Запрос.Выполнить().Выгрузить();
							
							Если ТаблицаСвязей.Количество() = 0 
								И (ТипЗнч(Источник) = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") 
								Или ТипЗнч(Источник) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее")) 
								И ЗначениеЗаполнено(Источник.ИдентификаторыОснований) Тогда 
								
								МассивИдентификаторов = CRM_УправлениеЭлектроннойПочтой.МассивИдентификаторовОснованийПисьма(Источник.Ссылка);
								Запрос.УстановитьПараметр("ИдентификаторыОснований", МассивИдентификаторов);
							
								ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
								               |	ЭлектронноеПисьмоВходящее.Ссылка КАК Ссылка
								               |ПОМЕСТИТЬ втПисьмаЦепочки
								               |ИЗ
								               |	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
								               |ГДЕ
								               |	ЭлектронноеПисьмоВходящее.ИдентификаторСообщения В(&ИдентификаторыОснований)
								               |
								               |ОБЪЕДИНИТЬ ВСЕ
								               |
								               |ВЫБРАТЬ
								               |	ЭлектронноеПисьмоИсходящее.Ссылка
								               |ИЗ
								               |	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
								               |ГДЕ
								               |	ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения В(&ИдентификаторыОснований)
								               |
								               |ИНДЕКСИРОВАТЬ ПО
								               |	Ссылка
								               |;
								               |
								               |////////////////////////////////////////////////////////////////////////////////
								               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
								               |	CRM_ЖурналДокументов.CRM_Интерес КАК Ссылка,
								               |	CRM_ЖурналДокументов.СостояниеИнтереса КАК СостояниеИнтереса,
								               |	CRM_ЖурналДокументов.ОсновнойИнтерес КАК ОсновнойИнтерес,
								               |	CRM_ЖурналДокументов.ИнтересЯвляетсяОснованием КАК ВведенНаОсновании,
								               |	CRM_ЖурналДокументов.ГлавнаяЗапись КАК ГлавнаяЗапись
								               |ИЗ
								               |	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
								               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПисьмаЦепочки КАК втПисьмаЦепочки
								               |		ПО CRM_ЖурналДокументов.Объект = втПисьмаЦепочки.Ссылка
								               |ГДЕ
								               |	НЕ CRM_ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)
								               |
								               |УПОРЯДОЧИТЬ ПО
								               |	ОсновнойИнтерес УБЫВ";
								
								Запрос.Текст	= ТекстЗапроса;
								ТаблицаСвязей	= Запрос.Выполнить().Выгрузить();
							КонецЕсли;
								
							Если ТаблицаСвязей.Количество() > 0 Тогда 
								CRM_ОбщегоНазначенияСервер.ДозаписатьСвязьСИнтересами(Источник, ТаблицаЗаписей, ТаблицаСвязей);
							КонецЕсли;
						Иначе
							// попробуем связать по табличной части
							
							// Попытка найти реквизиты "Заказ" в табличных частях объекта.
							ИсточникМетаданные = Источник.Метаданные();
							Попытка
								ТабличныеЧастиИтератор = ИсточникМетаданные.ТабличныеЧасти;
							
							Исключение	ТабличныеЧастиИтератор = Неопределено;
							КонецПопытки;
							
							Если ТабличныеЧастиИтератор <> Неопределено Тогда
								
								МассивОснованийВТабличнойЧасти = Новый Массив;
								
								Для Каждого ТабЧасть Из ТабличныеЧастиИтератор Цикл
									ИмяТабличнойЧасти = ТабЧасть.Имя;
									Если СтрНайти(ТабЧасть.Имя, "РасшифровкаПлатежа") <> 1
									   И СтрНайти(ТабЧасть.Имя, "Товары") <> 1
									   И СтрНайти(ТабЧасть.Имя, "ДокументыОснования") <> 1 Тогда
										Продолжить;
									КонецЕсли;
									
									ТабличнаяЧастьИсточника = Источник[ИмяТабличнойЧасти];
									
									МассивИменРеквизитовТЧ = Новый Массив;
									МассивИменРеквизитовТЧ.Добавить("Заказ");
									МассивИменРеквизитовТЧ.Добавить("ОснованиеПлатежа");
									МассивИменРеквизитовТЧ.Добавить("ЗаказКлиента");
									МассивИменРеквизитовТЧ.Добавить("ДокументОснование");
									МассивИменРеквизитовТЧ.Добавить("Распоряжение");
									
									Для Каждого ИмяРеквизитаОснование Из МассивИменРеквизитовТЧ Цикл
									
										Если ТабЧасть.Реквизиты.Найти(ИмяРеквизитаОснование) <> Неопределено Тогда
											
											Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьИсточника Цикл
												
												ЗначениеРеквизитаТабличнойЧасти = СтрокаТабличнойЧасти[ИмяРеквизитаОснование];
												
												Если ЗначениеЗаполнено(ЗначениеРеквизитаТабличнойЧасти) 
												   И МассивОснованийВТабличнойЧасти.Найти(ЗначениеРеквизитаТабличнойЧасти) = Неопределено Тогда
													МассивОснованийВТабличнойЧасти.Добавить(ЗначениеРеквизитаТабличнойЧасти);
												КонецЕсли;
											КонецЦикла;
										КонецЕсли;
										
									КонецЦикла;
								КонецЦикла;
								
								Если МассивОснованийВТабличнойЧасти.Количество() > 0 Тогда
									
									Запрос = Новый Запрос;
									Запрос.УстановитьПараметр("МассивОбъектов", МассивОснованийВТабличнойЧасти);
									
									ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
									               |	CRM_ЖурналДокументов.CRM_Интерес КАК Ссылка,
									               |	CRM_ЖурналДокументов.СостояниеИнтереса КАК СостояниеИнтереса,
									               |	CRM_ЖурналДокументов.ОсновнойИнтерес КАК ОсновнойИнтерес,
									               |	CRM_ЖурналДокументов.ИнтересЯвляетсяОснованием КАК ВведенНаОсновании,
									               |	CRM_ЖурналДокументов.ГлавнаяЗапись КАК ГлавнаяЗапись
									               |ИЗ
									               |	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
									               |ГДЕ
									               |	CRM_ЖурналДокументов.Объект В (&МассивОбъектов)
									               |	И НЕ CRM_ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)
									               |
									               |УПОРЯДОЧИТЬ ПО
									               |	ОсновнойИнтерес УБЫВ";
									
									Запрос.Текст	= ТекстЗапроса;
									ТаблицаСвязей	= Запрос.Выполнить().Выгрузить();
									Если ТаблицаСвязей.Количество() > 0 Тогда
										
										ГлавнаяЗапись = ТаблицаЗаписей[0];
										
										// создаём дополнительные записи журнала для отображения нескольких объектов
										
										Для Каждого СтрокаТаблицаСвязей Из ТаблицаСвязей Цикл
											
											ВведенныеСтроки = ТаблицаЗаписей.НайтиСтроки(Новый Структура("ГлавнаяЗапись,
												| CRM_Интерес", Ложь,
												 СтрокаТаблицаСвязей.Ссылка));
											
											Если ВведенныеСтроки.Количество() > 0 Тогда
												Продолжить;
											КонецЕсли;	
											
											НоваяЗапись = ТаблицаЗаписей.Добавить();
											ЗаполнитьЗначенияСвойств(НоваяЗапись, ГлавнаяЗапись, , "ГлавнаяЗапись");
											
											НоваяЗапись.CRM_Интерес					= СтрокаТаблицаСвязей.Ссылка;
											НоваяЗапись.ОсновнойИнтерес 			= СтрокаТаблицаСвязей.ОсновнойИнтерес;
											НоваяЗапись.ИнтересЯвляетсяОснованием	= СтрокаТаблицаСвязей.ВведенНаОсновании;
											НоваяЗапись.СостояниеИнтереса			= СтрокаТаблицаСвязей.Ссылка.СостояниеИнтереса;											
										
										КонецЦикла;
									КонецЕсли;
								КонецЕсли;		
							КонецЕсли;
						КонецЕсли;
					Иначе
						
						Основание = CRM_ОбщегоНазначенияСервер.ПроверитьПринадлежностьОснованияЖурналуДокументов(Источник.Ссылка);
						
						ЯвляетсяОснованиемИнтереса = CRM_ОбщегоНазначенияСервер.ЯвляетсяОснованиемИнтереса(Источник.Ссылка);
						Если НЕ Основание = Неопределено ИЛИ ЯвляетсяОснованиемИнтереса Тогда
							
							Запрос = Новый Запрос;
							Если ЯвляетсяОснованиемИнтереса Тогда
								Запрос.УстановитьПараметр("Объект", Источник.Ссылка);
							Иначе
								Запрос.УстановитьПараметр("Объект", Основание);
							КонецЕсли;
							
							ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
							               |	CRM_ЖурналДокументов.CRM_Интерес КАК Ссылка,
							               |	CRM_ЖурналДокументов.СостояниеИнтереса КАК СостояниеИнтереса,
							               |	CRM_ЖурналДокументов.ОсновнойИнтерес КАК ОсновнойИнтерес,
							               |	CRM_ЖурналДокументов.ИнтересЯвляетсяОснованием КАК ВведенНаОсновании,
							               |	CRM_ЖурналДокументов.ГлавнаяЗапись КАК ГлавнаяЗапись
							               |ИЗ
							               |	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
							               |ГДЕ
							               |	CRM_ЖурналДокументов.Объект = &Объект
							               |	И НЕ CRM_ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)
							               |
							               |УПОРЯДОЧИТЬ ПО
							               |	ОсновнойИнтерес УБЫВ";
							
							Запрос.Текст	= ТекстЗапроса;
							ТаблицаСвязей	= Запрос.Выполнить().Выгрузить();
							Если ТаблицаСвязей.Количество() > 0 Тогда 
								CRM_ОбщегоНазначенияСервер.ДозаписатьСвязьСИнтересами(Источник, ТаблицаЗаписей, ТаблицаСвязей);
							ИначеЕсли НЕ ЯвляетсяОснованиемИнтереса Тогда
								Запрос.УстановитьПараметр("Объект", Источник.Ссылка);
								ТаблицаСвязей	= Запрос.Выполнить().Выгрузить();
								Если ТаблицаСвязей.Количество() > 0 Тогда 
									CRM_ОбщегоНазначенияСервер.ДозаписатьСвязьСИнтересами(Источник, ТаблицаЗаписей, ТаблицаСвязей);
								КонецЕсли;
							КонецЕсли;
							
						Иначе
							// попробуем связать по табличной части
							
							// Попытка найти реквизиты "Заказ" в табличных частях объекта.
							ИсточникМетаданные = Источник.Метаданные();
							Попытка
								ТабличныеЧастиИтератор = ИсточникМетаданные.ТабличныеЧасти;
							
							Исключение	ТабличныеЧастиИтератор = Неопределено;
							КонецПопытки;
							
							Если ТабличныеЧастиИтератор <> Неопределено Тогда
								
								МассивОснованийВТабличнойЧасти = Новый Массив;
								
								Для Каждого ТабЧасть Из ТабличныеЧастиИтератор Цикл
									ИмяТабличнойЧасти = ТабЧасть.Имя;
									Если СтрНайти(ТабЧасть.Имя, "РасшифровкаПлатежа") <> 1
									   И СтрНайти(ТабЧасть.Имя, "Товары") <> 1
									   И СтрНайти(ТабЧасть.Имя, "ДокументыОснования") <> 1 Тогда
										Продолжить;
									КонецЕсли;
									
									ТабличнаяЧастьИсточника = Источник[ИмяТабличнойЧасти];
									
									МассивИменРеквизитовТЧ = Новый Массив;
									МассивИменРеквизитовТЧ.Добавить("Заказ");
									МассивИменРеквизитовТЧ.Добавить("ОснованиеПлатежа");
									МассивИменРеквизитовТЧ.Добавить("ЗаказКлиента");
									МассивИменРеквизитовТЧ.Добавить("ДокументОснование");
									МассивИменРеквизитовТЧ.Добавить("Распоряжение");
									
									Для Каждого ИмяРеквизитаОснование Из МассивИменРеквизитовТЧ Цикл
									
										Если ТабЧасть.Реквизиты.Найти(ИмяРеквизитаОснование) <> Неопределено Тогда
											
											Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьИсточника Цикл
												
												ЗначениеРеквизитаТабличнойЧасти = СтрокаТабличнойЧасти[ИмяРеквизитаОснование];
												
												Если ЗначениеЗаполнено(ЗначениеРеквизитаТабличнойЧасти) 
												   И МассивОснованийВТабличнойЧасти.Найти(ЗначениеРеквизитаТабличнойЧасти) = Неопределено Тогда
													МассивОснованийВТабличнойЧасти.Добавить(ЗначениеРеквизитаТабличнойЧасти);
												КонецЕсли;
											КонецЦикла;
										КонецЕсли;
										
									КонецЦикла;
								КонецЦикла;
								
								Если МассивОснованийВТабличнойЧасти.Количество() > 0 Тогда
									
									Запрос = Новый Запрос;
									Запрос.УстановитьПараметр("МассивОбъектов", МассивОснованийВТабличнойЧасти);
									
									ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
									               |	CRM_ЖурналДокументов.CRM_Интерес КАК Ссылка,
									               |	CRM_ЖурналДокументов.СостояниеИнтереса КАК СостояниеИнтереса,
									               |	CRM_ЖурналДокументов.ОсновнойИнтерес КАК ОсновнойИнтерес,
									               |	CRM_ЖурналДокументов.ИнтересЯвляетсяОснованием КАК ВведенНаОсновании,
									               |	CRM_ЖурналДокументов.ГлавнаяЗапись КАК ГлавнаяЗапись
									               |ИЗ
									               |	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
									               |ГДЕ
									               |	CRM_ЖурналДокументов.Объект В (&МассивОбъектов)
									               |	И НЕ CRM_ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)
									               |
									               |УПОРЯДОЧИТЬ ПО
									               |	ОсновнойИнтерес УБЫВ";
									
									Запрос.Текст	= ТекстЗапроса;
									ТаблицаСвязей	= Запрос.Выполнить().Выгрузить();
									Если ТаблицаСвязей.Количество() > 0 Тогда
										
										ГлавнаяЗапись = ТаблицаЗаписей[0];
										
										// создаём дополнительные записи журнала для отображения нескольких объектов
										
										Для Каждого СтрокаТаблицаСвязей Из ТаблицаСвязей Цикл
											
											ВведенныеСтроки = ТаблицаЗаписей.НайтиСтроки(Новый Структура("ГлавнаяЗапись,
												| CRM_Интерес", Ложь,
												 СтрокаТаблицаСвязей.Ссылка));
											
											Если ВведенныеСтроки.Количество() > 0 Тогда
												Продолжить;
											КонецЕсли;	
											
											НоваяЗапись = ТаблицаЗаписей.Добавить();
											ЗаполнитьЗначенияСвойств(НоваяЗапись, ГлавнаяЗапись, , "ГлавнаяЗапись");
											
											НоваяЗапись.CRM_Интерес					= СтрокаТаблицаСвязей.Ссылка;
											НоваяЗапись.ОсновнойИнтерес 			= СтрокаТаблицаСвязей.ОсновнойИнтерес;
											НоваяЗапись.ИнтересЯвляетсяОснованием	= СтрокаТаблицаСвязей.ВведенНаОсновании;
											НоваяЗапись.СостояниеИнтереса			= СтрокаТаблицаСвязей.Ссылка.СостояниеИнтереса;											
										
										КонецЦикла;
									КонецЕсли;
								КонецЕсли;	
							КонецЕсли;	
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// удалим возможные дубли
			Если ТаблицаЗаписей.Количество() > 1 Тогда
				
				КопияТаблицыЗаписей = ТаблицаЗаписей.Скопировать();
				ТаблицаЗаписей.Очистить();
				
				Для Каждого СтрокаТаблицаКопия Из КопияТаблицыЗаписей Цикл
					
					ВведенныеСтроки = ТаблицаЗаписей.НайтиСтроки(Новый Структура("ГлавнаяЗапись, Клиент, Объект,
						| CRM_Интерес", СтрокаТаблицаКопия.ГлавнаяЗапись, СтрокаТаблицаКопия.Клиент,
						 СтрокаТаблицаКопия.Объект,
						 СтрокаТаблицаКопия.CRM_Интерес));
					
					Если ВведенныеСтроки.Количество() = 0 Тогда
						СтрокаТаблицаЗаписей = ТаблицаЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицаЗаписей, СтрокаТаблицаКопия); 
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;	
			// Если ТипИсточника = Тип("ДокументСсылка.CRM_Интерес") Тогда  // Закомментировано до переделки регистра
			//	Для Каждого СтрокаТаблицы Из Источник.Контакты Цикл
			//		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
			//			Продолжить;
			//		КонецЕсли;
			//		Если ТаблицаЗаписей.Найти(СтрокаТаблицы.Контакт, "КонтактноеЛицо") = Неопределено Тогда
			//			НоваяЗапись = ТаблицаЗаписей.Добавить();
			//			ЗаполнитьЗначенияСвойств(НоваяЗапись, ТаблицаЗаписей[0],, "ГлавнаяЗапись, Клиент, КонтактноеЛицо");
			//			НоваяЗапись.Клиент = СтрокаТаблицы.Контакт.Владелец;
			//			НоваяЗапись.КонтактноеЛицо = СтрокаТаблицы.Контакт;
			//		КонецЕсли;
			//	КонецЦикла;
			// КонецЕсли;	
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
	ТипПоддерживается =
		Метаданные.ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Тип.СодержитТип(ТипЗнч(Источник.Ссылка));
	Если ТипПоддерживается Тогда
		ГлавнаяЗапись = ТаблицаЗаписей.Найти(Истина, "ГлавнаяЗапись");
		Если ГлавнаяЗапись <> Неопределено И ЗначениеЗаполнено(ГлавнаяЗапись.CRM_Интерес) Тогда
			МассивЗадачПоОбъекту = CRM_БизнесПроцессыСервер.ПолучитьНеВыполненныеЗадачи(ГлавнаяЗапись.CRM_Интерес, Ложь);
			Если МассивЗадачПоОбъекту.Количество() > 0 Тогда
				ЗаписьРегистра = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьМенеджерЗаписи();
				ЗаписьРегистра.БизнесПроцесс	= МассивЗадачПоОбъекту[0].БизнесПроцесс;
				ЗаписьРегистра.Объект			= Источник.Ссылка;
				ЗаписьРегистра.Задача			= МассивЗадачПоОбъекту[0].Ссылка;
				ЗаписьРегистра.ТочкаМаршрута	= МассивЗадачПоОбъекту[0].CRM_ТочкаМаршрута;
				ЗаписьРегистра.ДатаРегистрации	= Источник.Дата;
				
				Выборка = ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если Выборка.ТипЗначения.СодержитТип(ТипЗнч(Источник.Ссылка)) Тогда
						ЗаписьРегистра.ВидОбъекта = Выборка.Ссылка;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ЗаписьРегистра.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если ЭтоНовый И Не Источник.ПометкаУдаления Тогда
			МенеджерЗаписи = РегистрыСведений.CRM_ОбъектыДляРегламентногоФормированияОповещений.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект = Источник.Ссылка;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если ТипИсточника = Тип("ДокументСсылка.CRM_Взаимодействие")
			 И Источник.ДополнительныеСвойства.Свойство("ИзмененОтветственный") Тогда
			Если Источник.ДополнительныеСвойства.ИзмененОтветственный Тогда
				CRM_ОповещенияСервер.ПриСменеОтвественногоСобытия(Источник.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("БизнесПроцессОбъект.CRM_БизнесПроцесс") Тогда
		Если Источник.ЗавершенДосрочно Тогда
			CRM_БизнесПроцессыСервер.ОбработкаДосрочногоЗавершенияБизнесПроцесса(Источник);
		КонецЕсли;
	КонецЕсли;
	
	Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Источник.Ссылка) 
			Или РегистрыСведений.CRM_СостоянияЛидов.СсылкаОтмеченаКакОбращениеВручную(Источник.Ссылка) Тогда
		Если Источник.ДополнительныеСвойства.Свойство("НеОбрабатыватьКакНовое") Тогда
			РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Источник.Ссылка,
				 Справочники.CRM_СостоянияЛидов.ПустаяСсылка()); 
		ИначеЕсли Источник.CRM_СкрытьВАРМ Тогда
			Если Источник.ДополнительныеСвойства.Свойство("ОтклонитьОбращение") Тогда
				РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Источник.Ссылка,
					 Справочники.CRM_СостоянияЛидов.Отклонен,
					 НСтр("ru='Внутренняя переписка';en='Internal correspondence'"),
					 Справочники.CRM_ПричиныОтклоненияОбращений.СотрудникКомпании); 
			Иначе
				СостояниеЛида = РегистрыСведений.CRM_СостоянияЛидов.ПолучитьТекущееСостояниеЛида(Источник.Ссылка);
						
				Если СостояниеЛида <> Неопределено 
					И (СостояниеЛида.Состояние = Справочники.CRM_СостоянияЛидов.Новый
						Или СостояниеЛида.Состояние = Справочники.CRM_СостоянияЛидов.Повторный) Тогда
					РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Источник.Ссылка,
						Справочники.CRM_СостоянияЛидов.ПовторныйОбработанный,
						СостояниеЛида.СконвертированВОбъект); 
				КонецЕсли;
				
			КонецЕсли;	
		Иначе	
			ДанныеПовторногоОбращения = ПолучитьДанныеПовторногоОбращения(Источник.Ссылка, Источник.ДополнительныеСвойства);
			Если НаборЗаписей.Количество() > 0 Тогда
				СвязанСКлиентом = ЗначениеЗаполнено(НаборЗаписей[0].Клиент);
			Иначе
				СвязанСКлиентом = Ложь;
			КонецЕсли;
			Если (РегистрыСведений.CRM_СостоянияЛидов.ПолучитьТекущееСостояниеЛида(Источник.Ссылка) = Неопределено)
				 ИЛИ НЕ (ДанныеПовторногоОбращения = Неопределено) Тогда
				РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Источник.Ссылка, , , , ,
					 СвязанСКлиентом,
					 ДанныеПовторногоОбращения);
			Иначе // в случае, если источник является лидом, но не выполняются условия выше для всеобъемлющей записи, отдельно пишем описание,
					// а также обновляем флаг СвязанСКлиентом:
				РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьВспомогательныеДанныеОбращения(Источник.Ссылка, СвязанСКлиентом);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПоддержку") Тогда
		РегистрыСведений.CRM_СведенияПоддержки.ЗарегистрироватьОтветПоОбращению(Источник, НаборЗаписей);
	КонецЕсли;
	
	CRM_ОбщегоНазначенияСервер.ЗаполнитьНаличиеПрисоединенногоФайлаВЗаписиОбщегоЖурнала(Источник.ссылка);
	
КонецПроцедуры // ЗарегистрироватьОбъектВОбщемЖурнале()

// Определяет, является ли переданное обращение повторным
//
// Параметры:
//  Обращение - РегистрСведений.CRM_СостоянияЛидов.Лид - Ссылка на обращение.
//
// Возвращаемое значение
//  Булево - признак повторности обращения.
Функция ПолучитьДанныеПовторногоОбращения(Обращение, ДополнительныеСвойства) Экспорт
	
	Результат = Неопределено;
	
	ИнтересИзменен = ДополнительныеСвойства.Свойство("ИнтересИзменен") И ДополнительныеСвойства.ИнтересИзменен;
	
	// Анализ состояния обращения:
	СостояниеЛидаСоответствуетПовторномуОбращению = Ложь;
	
	СостояниеЛида = РегистрыСведений.CRM_СостоянияЛидов.ПолучитьТекущееСостояниеЛида(Обращение);
	
	СостояниеПовторный = Справочники.CRM_СостоянияЛидов.Повторный;
	СостояниеПовторныйОбработанный = Справочники.CRM_СостоянияЛидов.ПовторныйОбработанный;
	
	Если СостояниеЛида = Неопределено 
		ИЛИ СостояниеЛида.Состояние = Справочники.CRM_СостоянияЛидов.Новый
		ИЛИ СостояниеЛида.Состояние = СостояниеПовторный
		ИЛИ СостояниеЛида.Состояние = СостояниеПовторныйОбработанный
		ИЛИ ИнтересИзменен Тогда // Интерактивное изменение интереса пользователем
								 // трактуется как связывание с интересом
								 // в мастере регистрации обращения.
		СостояниеЛидаСоответствуетПовторномуОбращению = Истина;
	КонецЕсли;
	
	// Анализ наличия интереса
	СуществуетПривязанныйИнтерес = Ложь;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ЖурналДокументов.CRM_Интерес КАК CRM_Интерес
	                      |ИЗ
	                      |	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
	                      |ГДЕ
	                      |	CRM_ЖурналДокументов.Объект = &Объект
	                      |	И CRM_ЖурналДокументов.CRM_Интерес <> ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)");
	
	Запрос.УстановитьПараметр("Объект", Обращение);
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаИзЗапроса.Количество() > 0 Тогда
		СуществуетПривязанныйИнтерес = Истина;
	КонецЕсли;
	
	Если СостояниеЛидаСоответствуетПовторномуОбращению И СуществуетПривязанныйИнтерес Тогда
		
		Результат = Новый Структура;
		
		ВыборкаИзЗапроса.Следующий();
		Результат.Вставить("CRM_Интерес", ВыборкаИзЗапроса.CRM_Интерес);
		
		ЭтоПовторныйОбработанный = (СостояниеЛида <> Неопределено
									И СостояниеЛида.Состояние = СостояниеПовторныйОбработанный)
									ИЛИ ИнтересИзменен;
		Результат.Вставить("Состояние", ?(ЭтоПовторныйОбработанный,
											СостояниеПовторныйОбработанный,
											СостояниеПовторный));
											
		Если ВыборкаИзЗапроса.CRM_Интерес.Завершен И (СостояниеЛида = Неопределено) Тогда
			Результат.Состояние	= Справочники.CRM_СостоянияЛидов.Новый;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Функция возвращает структура значений главной записи журнала по объекту.
//
// Параметры:
//	Объект - Характеристика.CRM_ОбъектыЖурналаДокументов	- Объект журнала документов
//
// Возвращаемое значение:
//	Структура	- Значения реквизитов главной записи.
//
Функция ПолучитьГлавнуюЗаписьПоОбъекту(Объект) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	*
	                      |ИЗ
	                      |	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
	                      |ГДЕ
	                      |	CRM_ЖурналДокументов.ГлавнаяЗапись
	                      |	И CRM_ЖурналДокументов.Объект = &Объект");
	
	Запрос.УстановитьПараметр("Объект", Объект);
	ТЗГлавнаяЗапись = Запрос.Выполнить().Выгрузить();
	СтруктураСтрокой = "";
    НужнаЗапятая = Ложь;
    Для Каждого Колонка Из ТЗГлавнаяЗапись.Колонки Цикл
        Если НужнаЗапятая Тогда
            СтруктураСтрокой = СтруктураСтрокой + ",";
        КонецЕсли;
        СтруктураСтрокой = СтруктураСтрокой + Колонка.Имя;
        НужнаЗапятая = Истина;
    КонецЦикла;
    ГлавнаяЗапись = Новый Структура(СтруктураСтрокой);
	Если ТЗГлавнаяЗапись.Количество() > 0 Тогда
        ЗаполнитьЗначенияСвойств(ГлавнаяЗапись, ТЗГлавнаяЗапись[0]);
	КонецЕсли;
	Возврат ГлавнаяЗапись;
	
КонецФункции

// Процедура анализирует документы, в которых введен телефон/e-mail, но не указан партнер/контактное лицо
// и при наличии у партнер/контактного лица этих контактных данных прописывает ссылку на него в документ.
//
// Параметры:
//  ПартнерИлиМассив			- Массив, СправочникСсылка.Партнеры, СправочникСсылка.КонтактныеЛицаПартнеров - партнеры
//  							  или контактные лица анализа.
//  СтрокаСообщения				- Строка - строка, в которую возвращается результат выполнения процедуры.
//  МассивПривязанныхДокументов	- Массив, в который возвращаются привязанные документы.
//
Процедура ПривязатьВзаимодействияПоКлиенту(ПартнерИлиМассив, СтрокаСообщения = "",
	 МассивПривязанныхДокументов = Неопределено) Экспорт
	Если ТипЗнч(ПартнерИлиМассив) = Тип("Массив") Тогда
		МассивПартнеров = ПартнерИлиМассив;
	Иначе
		МассивПартнеров = Новый Массив();
		МассивПартнеров.Добавить(ПартнерИлиМассив);
	КонецЕсли;
	
	ТаблицаПартнеров = Новый ТаблицаЗначений();
	ТаблицаПартнеров.Колонки.Добавить("Партнер");
	ТаблицаПартнеров.Колонки.Добавить("НомерТелефона", Новый ОписаниеТипов("Строка"));
	ТаблицаПартнеров.Колонки.Добавить("НомерТелефонаБезКодов", Новый ОписаниеТипов("Строка"));
	ТаблицаПартнеров.Колонки.Добавить("ПредставлениеТелефона", Новый ОписаниеТипов("Строка"));
	ТаблицаПартнеров.Колонки.Добавить("АдресЭП", Новый ОписаниеТипов("Строка"));
	ТаблицаПартнеров.Колонки.Добавить("ПредставлениеЭП", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Партнер Из МассивПартнеров Цикл
		Если	((ТипЗнч(Партнер) <> Тип("СправочникСсылка.Партнеры") Или Партнер.ЭтоГруппа)
			И ТипЗнч(Партнер) <> Тип("СправочникСсылка.КонтактныеЛицаПартнеров"))
			Или	Не ЗначениеЗаполнено(Партнер) Тогда
			//
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из Партнер.КонтактнаяИнформация Цикл
			Если СтрокаТаблицы.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты И
				(ЗначениеЗаполнено(СтрокаТаблицы.АдресЭП) Или ЗначениеЗаполнено(СтрокаТаблицы.Представление)) Тогда
				//
				Если ЗначениеЗаполнено(СтрокаТаблицы.АдресЭП) Тогда
					НоваяСтрока = ТаблицаПартнеров.Добавить();
					НоваяСтрока.Партнер = Партнер;
					НоваяСтрока.АдресЭП = ВРег(СокрЛП(СтрокаТаблицы.АдресЭП));
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТаблицы.Представление) Тогда
					НоваяСтрока = ТаблицаПартнеров.Добавить();
					НоваяСтрока.Партнер = Партнер;
					НоваяСтрока.ПредставлениеЭП = ВРег(СокрЛП(СтрокаТаблицы.Представление));
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицы.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон И
				(ЗначениеЗаполнено(СтрокаТаблицы.НомерТелефона)
					 Или ЗначениеЗаполнено(СтрокаТаблицы.НомерТелефонаБезКодов)
					 Или ЗначениеЗаполнено(СтрокаТаблицы.Представление)) Тогда
				//
				НоваяСтрока = ТаблицаПартнеров.Добавить();
				НоваяСтрока.Партнер = Партнер;
				Если ЗначениеЗаполнено(СтрокаТаблицы.НомерТелефона) Тогда
					НомерТлф = СокрЛП(СтрокаТаблицы.НомерТелефона);
					НомерТлф = СтрЗаменить(НомерТлф, "(", "");
					НомерТлф = СтрЗаменить(НомерТлф, ")", "");
					НомерТлф = СтрЗаменить(НомерТлф, " ", "");
					НоваяСтрока.НомерТелефона = НомерТлф;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТаблицы.НомерТелефонаБезКодов) Тогда
					НомерТлф = СокрЛП(СтрокаТаблицы.НомерТелефонаБезКодов);
					НомерТлф = СтрЗаменить(НомерТлф, "(", "");
					НомерТлф = СтрЗаменить(НомерТлф, ")", "");
					НомерТлф = СтрЗаменить(НомерТлф, " ", "");
					НоваяСтрока.НомерТелефонаБезКодов = НомерТлф;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТаблицы.Представление) Тогда
					НомерТлф = СокрЛП(СтрокаТаблицы.Представление);
					НомерТлф = СтрЗаменить(НомерТлф, "(", "");
					НомерТлф = СтрЗаменить(НомерТлф, ")", "");
					НомерТлф = СтрЗаменить(НомерТлф, " ", "");
					НоваяСтрока.ПредставлениеТелефона = SMS4B_ОтправкаSMS.ФорматироватьНомер(НомерТлф);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТаблицаПартнеров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Таблица.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоВходящее КАК Таблица
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(Таблица.ОтправительКонтакт) = ТИП(СТРОКА)
	               |	И Таблица.ОтправительКонтакт <> """"
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Таблица.Ссылка
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоВходящее КАК Таблица
	               |ГДЕ
	               |	Таблица.ОтправительКонтакт = НЕОПРЕДЕЛЕНО
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Таблица.Ссылка
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоВходящее.ПолучателиПисьма КАК Таблица
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(Таблица.Контакт) = ТИП(СТРОКА)
	               |	И Таблица.Контакт <> """"
	               |	И Таблица.Адрес <> """"
	               |	И НЕ Таблица.Ссылка.ПометкаУдаления
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Таблица.Ссылка
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоВходящее.ПолучателиПисьма КАК Таблица
	               |ГДЕ
	               |	Таблица.Контакт = НЕОПРЕДЕЛЕНО
	               |	И Таблица.Адрес <> """"
	               |	И НЕ Таблица.Ссылка.ПометкаУдаления
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Таблица.Ссылка
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоВходящее.ПолучателиКопий КАК Таблица
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(Таблица.Контакт) = ТИП(СТРОКА)
	               |	И Таблица.Контакт <> """"
	               |	И Таблица.Адрес <> """"
	               |	И НЕ Таблица.Ссылка.ПометкаУдаления
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Таблица.Ссылка
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоВходящее.ПолучателиКопий КАК Таблица
	               |ГДЕ
	               |	Таблица.Контакт = НЕОПРЕДЕЛЕНО
	               |	И Таблица.Адрес <> """"
	               |	И НЕ Таблица.Ссылка.ПометкаУдаления
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Таблица.Ссылка
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоВходящее.ПолучателиОтвета КАК Таблица
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(Таблица.Контакт) = ТИП(СТРОКА)
	               |	И Таблица.Контакт <> """"
	               |	И Таблица.Адрес <> """"
	               |	И НЕ Таблица.Ссылка.ПометкаУдаления
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Таблица.Ссылка
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоВходящее.ПолучателиОтвета КАК Таблица
	               |ГДЕ
	               |	Таблица.Контакт = НЕОПРЕДЕЛЕНО
	               |	И Таблица.Адрес <> """"
	               |	И НЕ Таблица.Ссылка.ПометкаУдаления
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Таблица.Ссылка
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоИсходящее КАК Таблица
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(Таблица.CRM_ОтправительКонтакт) = ТИП(СТРОКА)
	               |	И Таблица.CRM_ОтправительКонтакт <> """"
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Таблица.Ссылка
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоИсходящее КАК Таблица
	               |ГДЕ
	               |	Таблица.CRM_ОтправительКонтакт = НЕОПРЕДЕЛЕНО
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Таблица.Ссылка
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК Таблица
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(Таблица.Контакт) = ТИП(СТРОКА)
	               |	И Таблица.Контакт <> """"
	               |	И Таблица.Адрес <> """"
	               |	И НЕ Таблица.Ссылка.ПометкаУдаления
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Таблица.Ссылка
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК Таблица
	               |ГДЕ
	               |	Таблица.Контакт = НЕОПРЕДЕЛЕНО
	               |	И Таблица.Адрес <> """"
	               |	И НЕ Таблица.Ссылка.ПометкаУдаления
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Таблица.Ссылка
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиКопий КАК Таблица
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(Таблица.Контакт) = ТИП(СТРОКА)
	               |	И Таблица.Контакт <> """"
	               |	И Таблица.Адрес <> """"
	               |	И НЕ Таблица.Ссылка.ПометкаУдаления
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Таблица.Ссылка
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиКопий КАК Таблица
	               |ГДЕ
	               |	Таблица.Контакт = НЕОПРЕДЕЛЕНО
	               |	И Таблица.Адрес <> """"
	               |	И НЕ Таблица.Ссылка.ПометкаУдаления
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Таблица.Ссылка
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиОтвета КАК Таблица
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(Таблица.Контакт) = ТИП(СТРОКА)
	               |	И Таблица.Контакт <> """"
	               |	И Таблица.Адрес <> """"
	               |	И НЕ Таблица.Ссылка.ПометкаУдаления
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Таблица.Ссылка
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиОтвета КАК Таблица
	               |ГДЕ
	               |	Таблица.Контакт = НЕОПРЕДЕЛЕНО
	               |	И Таблица.Адрес <> """"
	               |	И НЕ Таблица.Ссылка.ПометкаУдаления
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Таблица.Ссылка
	               |ИЗ
	               |	Документ.СообщениеSMS.Адресаты КАК Таблица
	               |ГДЕ
	               |	Таблица.Контакт = НЕОПРЕДЕЛЕНО
	               |	И Таблица.КакСвязаться <> """"
	               |	И НЕ Таблица.Ссылка.ПометкаУдаления
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Таблица.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ВыборкаСсылки = Запрос.Выполнить().Выбрать();
	КоличествоПривязанныхВзаимодействий = 0;
	Пока ВыборкаСсылки.Следующий() Цикл
		ДокументСсылка = ВыборкаСсылки.Ссылка;
		Попытка
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Исключение
			ИнфОбОшибке = ИнформацияОбОшибке();
			
			СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС);
			СтрокаСообщения = СтрокаСообщения
			+ НСтр("ru='Ошибка при получении объекта документа';en='Error when obtaining object of the document'")
			+ " """ + Строка(ДокументСсылка) + """: "
			+ ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнфОбОшибке);
			//
			Продолжить;
		КонецПопытки;
		
		бБылиИзменения = Ложь;
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее")
			 Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
			Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") Тогда
				Если (Не ЗначениеЗаполнено(ДокументОбъект.ОтправительКонтакт)
					 Или ТипЗнч(ДокументОбъект.ОтправительКонтакт) = Тип("Строка"))
					 И ЗначениеЗаполнено(ДокументОбъект.ОтправительАдрес) Тогда
					НайденныеСтроки = ТаблицаПартнеров.НайтиСтроки(Новый Структура("АдресЭП",
						 ВРег(СокрЛп(ДокументОбъект.ОтправительАдрес))));
				Иначе
					НайденныеСтроки = Новый Массив;
				КонецЕсли;
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ТаблицаПартнеров.НайтиСтроки(Новый Структура("ПредставлениеЭП",
						 ВРег(СокрЛп(ДокументОбъект.ОтправительАдрес))));
				КонецЕсли;
				Если НайденныеСтроки.Количество() > 0 Тогда
					ДокументОбъект.ОтправительКонтакт = НайденныеСтроки[0].Партнер;
					бБылиИзменения = Истина;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
				Если (Не ЗначениеЗаполнено(ДокументОбъект.CRM_ОтправительКонтакт)
					 Или ТипЗнч(ДокументОбъект.CRM_ОтправительКонтакт) = Тип("Строка"))
					 И ЗначениеЗаполнено(ДокументОбъект.CRM_ОтправительАдрес) Тогда
					НайденныеСтроки = ТаблицаПартнеров.НайтиСтроки(Новый Структура("АдресЭП",
						 ВРег(СокрЛп(ДокументОбъект.CRM_ОтправительАдрес))));
				Иначе
					НайденныеСтроки = Новый Массив;
				КонецЕсли;
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ТаблицаПартнеров.НайтиСтроки(Новый Структура("ПредставлениеЭП",
						 ВРег(СокрЛп(ДокументОбъект.CRM_ОтправительАдрес))));
				КонецЕсли;
				Если НайденныеСтроки.Количество() > 0 Тогда
					ДокументОбъект.CRM_ОтправительКонтакт = НайденныеСтроки[0].Партнер;
					бБылиИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
			Для Каждого СтрокаТаблицы Из ДокументОбъект.ПолучателиПисьма Цикл
				Если (Не ЗначениеЗаполнено(СтрокаТаблицы.Контакт)
					 Или ТипЗнч(СтрокаТаблицы.Контакт) = Тип("Строка"))
					 И ЗначениеЗаполнено(СтрокаТаблицы.Адрес) Тогда
					НайденныеСтроки = ТаблицаПартнеров.НайтиСтроки(Новый Структура("АдресЭП", ВРег(СокрЛп(СтрокаТаблицы.Адрес))));
					Если НайденныеСтроки.Количество() = 0 Тогда
						НайденныеСтроки = ТаблицаПартнеров.НайтиСтроки(Новый Структура("ПредставлениеЭП",
							 ВРег(СокрЛп(СтрокаТаблицы.Адрес))));
					КонецЕсли;
					Если НайденныеСтроки.Количество() > 0 Тогда
						СтрокаТаблицы.Контакт = НайденныеСтроки[0].Партнер;
						бБылиИзменения = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаТаблицы Из ДокументОбъект.ПолучателиКопий Цикл
				Если (Не ЗначениеЗаполнено(СтрокаТаблицы.Контакт)
					 Или ТипЗнч(СтрокаТаблицы.Контакт) = Тип("Строка"))
					 И ЗначениеЗаполнено(СтрокаТаблицы.Адрес) Тогда
					НайденныеСтроки = ТаблицаПартнеров.НайтиСтроки(Новый Структура("АдресЭП", ВРег(СокрЛп(СтрокаТаблицы.Адрес))));
					Если НайденныеСтроки.Количество() = 0 Тогда
						НайденныеСтроки = ТаблицаПартнеров.НайтиСтроки(Новый Структура("ПредставлениеЭП",
							 ВРег(СокрЛп(СтрокаТаблицы.Адрес))));
					КонецЕсли;
					Если НайденныеСтроки.Количество() > 0 Тогда
						СтрокаТаблицы.Контакт = НайденныеСтроки[0].Партнер;
						бБылиИзменения = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаТаблицы Из ДокументОбъект.ПолучателиОтвета Цикл
				Если (Не ЗначениеЗаполнено(СтрокаТаблицы.Контакт)
					 Или ТипЗнч(СтрокаТаблицы.Контакт) = Тип("Строка"))
					 И ЗначениеЗаполнено(СтрокаТаблицы.Адрес) Тогда
					НайденныеСтроки = ТаблицаПартнеров.НайтиСтроки(Новый Структура("АдресЭП", ВРег(СокрЛп(СтрокаТаблицы.Адрес))));
					Если НайденныеСтроки.Количество() = 0 Тогда
						НайденныеСтроки = ТаблицаПартнеров.НайтиСтроки(Новый Структура("ПредставлениеЭП",
							 ВРег(СокрЛп(СтрокаТаблицы.Адрес))));
					КонецЕсли;
					Если НайденныеСтроки.Количество() > 0 Тогда
						СтрокаТаблицы.Контакт = НайденныеСтроки[0].Партнер;
						бБылиИзменения = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СообщениеSMS") Тогда
			Для Каждого СтрокаТаблицы Из ДокументОбъект.Адресаты Цикл
				Если (Не ЗначениеЗаполнено(СтрокаТаблицы.Контакт)
					 Или ТипЗнч(СтрокаТаблицы.Контакт) = Тип("Строка"))
					 И ЗначениеЗаполнено(СтрокаТаблицы.НомерДляОтправки) Тогда
					НомерТлф = СокрЛП(СтрокаТаблицы.НомерДляОтправки);
					НомерТлф = СтрЗаменить(НомерТлф, "(", "");
					НомерТлф = СтрЗаменить(НомерТлф, ")", "");
					НомерТлф = СтрЗаменить(НомерТлф, " ", "");
					НайденныеСтроки = ТаблицаПартнеров.НайтиСтроки(Новый Структура("НомерТелефона", НомерТлф));
					Если НайденныеСтроки.Количество() = 0 Тогда
						НайденныеСтроки = ТаблицаПартнеров.НайтиСтроки(Новый Структура("НомерТелефонаБезКодов", НомерТлф));
					КонецЕсли;
					Если НайденныеСтроки.Количество() = 0 Тогда
						НайденныеСтроки = ТаблицаПартнеров.НайтиСтроки(Новый Структура("ПредставлениеТелефона", НомерТлф));
					КонецЕсли;
					Если НайденныеСтроки.Количество() > 0 Тогда
						СтрокаТаблицы.Контакт				= НайденныеСтроки[0].Партнер;
						СтрокаТаблицы.ПредставлениеКонтакта	= СтрокаТаблицы.Контакт.Наименование;
						бБылиИзменения = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если бБылиИзменения Тогда
			Попытка
				// ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ДокументОбъект.Записать();
				КоличествоПривязанныхВзаимодействий = КоличествоПривязанныхВзаимодействий + 1;
				Если ТипЗнч(МассивПривязанныхДокументов) = Тип("Массив")
					 И МассивПривязанныхДокументов.Найти(ДокументСсылка) = Неопределено Тогда
					МассивПривязанныхДокументов.Добавить(ДокументСсылка);
				КонецЕсли;
				ДокументОбъект = Неопределено;
			Исключение
				ИнфОбОшибке = ИнформацияОбОшибке();
				
				СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС);
				СтрокаСообщения = СтрокаСообщения
				+ НСтр("ru='Ошибка при записи документа';en='Error at record of the document'")
				+ " """ + Строка(ДокументСсылка) + """: "
				+ ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнфОбОшибке);
				//
				
				ДокументОбъект = Неопределено;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает ABC/XYZ класс клиента.
//
// Параметры:
//	Партнер						- СправочникСсылка.Партнеры				- Партнер
//	ТипКлассификации			- ПеречислениеСсылка.ТипыКлассификации	- Тип классификации.
//	ТипПараметраКлассификации	- ТипПараметраКлассификации				- Тип параметра классификации.
//	Дата						- Дата									- Дата на которую нужно получить значение класса.
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ABCКлассификация, ПеречислениеСсылка.СтадииВзаимоотношенийСКлиентами,
//	ПеречислениеСсылка.XYZКлассификация	- ABC/XYZ класс партнера.
//
Функция ПолучитьABCXYZКлассПартнера(Партнер, Знач ТипКлассификации,
	 Знач ТипПараметраКлассификации = Неопределено,
	 Знач Дата = Неопределено) Экспорт
	Если Партнер.ЭтоГруппа Тогда
		Если ТипКлассификации = Перечисления.ТипыКлассификации.ABC Тогда
			КлассПартнера = Перечисления.ABCКлассификация.НеКлассифицирован;
		Иначе
			КлассПартнера = Перечисления.XYZКлассификация.НеКлассифицирован;
		КонецЕсли;
		Возврат КлассПартнера;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипПараметраКлассификации) Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоКоличествуПродаж") Тогда
			ТипПараметраКлассификации = Перечисления.ТипыПараметровКлассификации.Количество;
		КонецЕсли;
		Если ТипПараметраКлассификации = Неопределено Тогда
			Если ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоВыручке") Тогда
				ТипПараметраКлассификации = Перечисления.ТипыПараметровКлассификации.Выручка;
			КонецЕсли;
		КонецЕсли;
		Если ТипПараметраКлассификации = Неопределено Тогда
			ТипПараметраКлассификации = Перечисления.ТипыПараметровКлассификации.Количество;
		КонецЕсли;
	КонецЕсли;
	
	КлассПартнера = Неопределено;
	Если Не ЗначениеЗаполнено(Дата) Тогда
		СрезПоследних = РегистрыСведений.ABCXYZКлассификацияКлиентов.СрезПоследних(,
			 Новый Структура("Партнер,ТипПараметраКлассификации,ТипКлассификации", Партнер,
			 ТипПараметраКлассификации,
			 ТипКлассификации));
	Иначе
		СрезПоследних = РегистрыСведений.ABCXYZКлассификацияКлиентов.СрезПоследних(Дата,
			 Новый Структура("Партнер,ТипПараметраКлассификации,ТипКлассификации", Партнер,
			 ТипПараметраКлассификации,
			 ТипКлассификации));
	КонецЕсли;
	Если СрезПоследних.Количество() = 0 Тогда
		Если ТипПараметраКлассификации = Перечисления.ТипыПараметровКлассификации.Количество Тогда
			ТипПараметраКлассификации = Перечисления.ТипыПараметровКлассификации.Выручка;
		Иначе
			ТипПараметраКлассификации = Перечисления.ТипыПараметровКлассификации.Количество;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Дата) Тогда
			СрезПоследних = РегистрыСведений.ABCXYZКлассификацияКлиентов.СрезПоследних(,
				 Новый Структура("Партнер,ТипПараметраКлассификации,ТипКлассификации", Партнер,
				 ТипПараметраКлассификации,
				 ТипКлассификации));
		Иначе
			СрезПоследних = РегистрыСведений.ABCXYZКлассификацияКлиентов.СрезПоследних(Дата,
				 Новый Структура("Партнер,ТипПараметраКлассификации,ТипКлассификации", Партнер,
				 ТипПараметраКлассификации,
				 ТипКлассификации));
		КонецЕсли;
		Если СрезПоследних.Количество() > 0 Тогда
			КлассПартнера = СрезПоследних[0].Класс;
		КонецЕсли;
	Иначе
		КлассПартнера = СрезПоследних[0].Класс;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КлассПартнера) Тогда
		Если ТипКлассификации = Перечисления.ТипыКлассификации.ABC Тогда
			КлассПартнера = Перечисления.ABCКлассификация.НеКлассифицирован;
		Иначе
			КлассПартнера = Перечисления.XYZКлассификация.НеКлассифицирован;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КлассПартнера;
КонецФункции

// Обработчик подписки на событие CRM_ПриЗаписиРегистраИсторииРеквизитовПартнера.
//
Процедура ПриЗаписиРегистраИсторииРеквизитовПартнера(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Если ПолучитьФункциональнуюОпцию("CRM_ВестиИсториюРеквизитовКлиентов") Тогда
		Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ABCXYZКлассификацияКлиентов") Тогда
			
			НовыеЗначенияКлассификации = Источник.Выгрузить();
			СтарыеЗначенияКлассификации = Источник.ДополнительныеСвойства.СтарыеЗначенияКлассификации;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтарыеЗначенияКлассификации.Партнер КАК Партнер,
			|	СтарыеЗначенияКлассификации.ТипКлассификации КАК ТипКлассификации,
			|	СтарыеЗначенияКлассификации.ТипПараметраКлассификации КАК ТипПараметраКлассификации,
			|	СтарыеЗначенияКлассификации.Класс КАК Класс
			|ПОМЕСТИТЬ СтарыеЗначенияКлассификации
			|ИЗ
			|	&СтарыеЗначенияКлассификации КАК СтарыеЗначенияКлассификации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НовыеЗначенияКлассификации.Партнер КАК Партнер,
			|	НовыеЗначенияКлассификации.ТипКлассификации КАК ТипКлассификации,
			|	НовыеЗначенияКлассификации.ТипПараметраКлассификации КАК ТипПараметраКлассификации,
			|	НовыеЗначенияКлассификации.Класс КАК Класс
			|ПОМЕСТИТЬ НовыеЗначенияКлассификации
			|ИЗ
			|	&НовыеЗначенияКлассификации КАК НовыеЗначенияКлассификации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НовыеЗначенияКлассификации.Партнер КАК Партнер,
			|	НовыеЗначенияКлассификации.ТипКлассификации КАК ТипКлассификации,
			|	НовыеЗначенияКлассификации.ТипПараметраКлассификации КАК ТипПараметраКлассификации,
			|	НовыеЗначенияКлассификации.Класс КАК НовоеЗначение,
			|	ЕСТЬNULL(СтарыеЗначенияКлассификации.Класс, НЕОПРЕДЕЛЕНО) КАК СтароеЗначение
			|ИЗ
			|	НовыеЗначенияКлассификации КАК НовыеЗначенияКлассификации
			|		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеЗначенияКлассификации КАК СтарыеЗначенияКлассификации
			|		ПО НовыеЗначенияКлассификации.Партнер = СтарыеЗначенияКлассификации.Партнер
			|			И НовыеЗначенияКлассификации.ТипКлассификации = СтарыеЗначенияКлассификации.ТипКлассификации
			|			И НовыеЗначенияКлассификации.ТипПараметраКлассификации = СтарыеЗначенияКлассификации.ТипПараметраКлассификации
			|ГДЕ
			|	СтарыеЗначенияКлассификации.Класс ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СтарыеЗначенияКлассификации.Партнер КАК Партнер,
			|	СтарыеЗначенияКлассификации.ТипКлассификации КАК ТипКлассификации,
			|	СтарыеЗначенияКлассификации.ТипПараметраКлассификации КАК ТипПараметраКлассификации,
			|	ЕСТЬNULL(НовыеЗначенияКлассификации.Класс, НЕОПРЕДЕЛЕНО) КАК НовоеЗначение,
			|	СтарыеЗначенияКлассификации.Класс КАК СтароеЗначение
			|ИЗ
			|	СтарыеЗначенияКлассификации КАК СтарыеЗначенияКлассификации
			|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеЗначенияКлассификации КАК НовыеЗначенияКлассификации
			|		ПО СтарыеЗначенияКлассификации.Партнер = НовыеЗначенияКлассификации.Партнер
			|			И СтарыеЗначенияКлассификации.ТипКлассификации = НовыеЗначенияКлассификации.ТипКлассификации
			|			И СтарыеЗначенияКлассификации.ТипПараметраКлассификации = НовыеЗначенияКлассификации.ТипПараметраКлассификации
			|ГДЕ
			|	НовыеЗначенияКлассификации.Класс ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НовыеЗначенияКлассификации.Партнер КАК Партнер,
			|	НовыеЗначенияКлассификации.ТипКлассификации КАК ТипКлассификации,
			|	НовыеЗначенияКлассификации.ТипПараметраКлассификации КАК ТипПараметраКлассификации,
			|	СтарыеЗначенияКлассификации.Класс КАК СтароеЗначение,
			|	НовыеЗначенияКлассификации.Класс КАК НовоеЗначение
			|ИЗ
			|	СтарыеЗначенияКлассификации КАК СтарыеЗначенияКлассификации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НовыеЗначенияКлассификации КАК НовыеЗначенияКлассификации
			|		ПО СтарыеЗначенияКлассификации.Партнер = НовыеЗначенияКлассификации.Партнер
			|			И СтарыеЗначенияКлассификации.ТипКлассификации = НовыеЗначенияКлассификации.ТипКлассификации
			|			И СтарыеЗначенияКлассификации.ТипПараметраКлассификации = НовыеЗначенияКлассификации.ТипПараметраКлассификации
			|ГДЕ
			|	СтарыеЗначенияКлассификации.Класс <> НовыеЗначенияКлассификации.Класс";
			
			Запрос.УстановитьПараметр("СтарыеЗначенияКлассификации", СтарыеЗначенияКлассификации);
			Запрос.УстановитьПараметр("НовыеЗначенияКлассификации", НовыеЗначенияКлассификации);
			
			УстановитьПривилегированныйРежим(Истина);
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			РезультатДобавленные = РезультатЗапроса[2].Выгрузить();
			РезультатУдаленные = РезультатЗапроса[3].Выгрузить();
			РезультатИзмененные = РезультатЗапроса[4].Выгрузить();
			УстановитьПривилегированныйРежим(Ложь);
			
			Если РезультатДобавленные.Количество() = 0 И РезультатУдаленные.Количество() = 0
				 И РезультатИзмененные.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			Если РезультатЗапроса.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			Период = ТекущаяДатаСеанса();
			Автор = Пользователи.АвторизованныйПользователь();
			
			ТаблицаЗаписейABC = РегистрыСведений.CRM_ИсторияРеквизитовОбъектов.СоздатьНаборЗаписей();
			ТаблицаЗаписейABC.Отбор.Период.Установить(Период);
			ТаблицаЗаписейABC.Отбор.Реквизит.Установить("ABCКласс");
			
			ТаблицаЗаписейXYZ = РегистрыСведений.CRM_ИсторияРеквизитовОбъектов.СоздатьНаборЗаписей();
			ТаблицаЗаписейXYZ.Отбор.Период.Установить(Период);
			ТаблицаЗаписейXYZ.Отбор.Реквизит.Установить("XYZКласс");
			
			Партнер = Источник.Отбор.Партнер.Значение;
			Если ЗначениеЗаполнено(Партнер) Тогда
				ТаблицаЗаписейABC.Отбор.Объект.Установить(Партнер);
				ТаблицаЗаписейXYZ.Отбор.Объект.Установить(Партнер);
			КонецЕсли;
			
			ПериодABCКлассификации = Константы.ПериодABCКлассификацииПартнеров.Получить();
			КоличествоПериодовABCКлассификации = Константы.КоличествоПериодовABCКлассификацииПартнеров.Получить();
			ПериодXYZКлассификацииПартнеров = Константы.ПериодXYZКлассификацииПартнеров.Получить();
			КоличествоПериодовXYZКлассификацииПартнеров = Константы.КоличествоПериодовXYZКлассификацииПартнеров.Получить();
			
			Для Каждого Строка Из РезультатДобавленные Цикл
				Если Строка.ТипКлассификации = Перечисления.ТипыКлассификации.ABC Тогда
					НоваяСтрока = ТаблицаЗаписейABC.Добавить();
					НоваяСтрока.Реквизит				= "ABCКласс";
					ПериодКлассификации = Строка(ПериодABCКлассификации) + НСтр("ru=', количество периодов '") 
						+ Строка(КоличествоПериодовABCКлассификации);
				ИначеЕсли Строка.ТипКлассификации = Перечисления.ТипыКлассификации.XYZ Тогда
					НоваяСтрока = ТаблицаЗаписейXYZ.Добавить();
					НоваяСтрока.Реквизит				= "XYZКласс";
					ПериодКлассификации = Строка(ПериодXYZКлассификацииПартнеров) + НСтр("ru=',
						| количество периодов '") 
						+ Строка(КоличествоПериодовXYZКлассификацииПартнеров);
				Иначе
					Продолжить;
				КонецЕсли;
				НоваяСтрока.Период						= Период;
				НоваяСтрока.Объект						= Строка.Партнер;
				НоваяСтрока.КлючУникальности 			= Строка(Новый УникальныйИдентификатор);
				НоваяСтрока.ЗначениеСтрока 				= Строка(Строка.НовоеЗначение) + НСтр("ru=' по параметру '") 
					+ Строка(Строка.ТипПараметраКлассификации)
														+ НСтр("ru=' за период '") + ПериодКлассификации;
				НоваяСтрока.Автор						= Автор;
				НоваяСтрока.ВидЗаписи 					= Перечисления.CRM_ВидыЗаписейИстории.ЗаполнениеРеквизита;
			КонецЦикла;
			
			Для Каждого Строка Из РезультатУдаленные Цикл
				Если Строка.ТипКлассификации = Перечисления.ТипыКлассификации.ABC Тогда
					НоваяСтрока = ТаблицаЗаписейABC.Добавить();
					НоваяСтрока.Реквизит				= "ABCКласс";
					ПериодКлассификации = Строка(ПериодABCКлассификации) + НСтр("ru=', количество периодов '") 
						+ Строка(КоличествоПериодовABCКлассификации);
				ИначеЕсли Строка.ТипКлассификации = Перечисления.ТипыКлассификации.XYZ Тогда
					НоваяСтрока = ТаблицаЗаписейXYZ.Добавить();
					НоваяСтрока.Реквизит				= "XYZКласс";
					ПериодКлассификации = Строка(ПериодXYZКлассификацииПартнеров) + НСтр("ru=',
						| количество периодов '") 
						+ Строка(КоличествоПериодовXYZКлассификацииПартнеров);
				Иначе
					Продолжить;
				КонецЕсли;
				НоваяСтрока.Период						= Период;
				НоваяСтрока.Объект						= Строка.Партнер;
				НоваяСтрока.КлючУникальности 			= Строка(Новый УникальныйИдентификатор);
				НоваяСтрока.СтароеЗначениеСтрока 		= Строка(Строка.СтароеЗначение) 
					+ НСтр("ru=' по параметру '") 
					+ Строка(Строка.ТипПараметраКлассификации);
				НоваяСтрока.Автор						= Автор;
				НоваяСтрока.ВидЗаписи 					= Перечисления.CRM_ВидыЗаписейИстории.ОчисткаРеквизита;
			КонецЦикла;
			
			Для Каждого Строка Из РезультатИзмененные Цикл
				Если Строка.ТипКлассификации = Перечисления.ТипыКлассификации.ABC Тогда
					НоваяСтрока = ТаблицаЗаписейABC.Добавить();
					НоваяСтрока.Реквизит				= "ABCКласс";
					ПериодКлассификации = Строка(ПериодABCКлассификации) + НСтр("ru=', количество периодов '") 
						+ Строка(КоличествоПериодовABCКлассификации);
				ИначеЕсли Строка.ТипКлассификации = Перечисления.ТипыКлассификации.XYZ Тогда
					НоваяСтрока = ТаблицаЗаписейXYZ.Добавить();
					НоваяСтрока.Реквизит				= "XYZКласс";
					ПериодКлассификации = Строка(ПериодXYZКлассификацииПартнеров) + НСтр("ru=',
						| количество периодов '") 
						+ Строка(КоличествоПериодовXYZКлассификацииПартнеров);
				Иначе
					Продолжить;
				КонецЕсли;
				НоваяСтрока.Период						= Период;
				НоваяСтрока.Объект						= Строка.Партнер;
				НоваяСтрока.КлючУникальности 			= Строка(Новый УникальныйИдентификатор);
				НоваяСтрока.ЗначениеСтрока 				= Строка(Строка.НовоеЗначение) + НСтр("ru=' по параметру '") 
					+ Строка(Строка.ТипПараметраКлассификации)
														+ НСтр("ru=' за период '") + ПериодКлассификации;
				НоваяСтрока.СтароеЗначениеСтрока 		= Строка(Строка.СтароеЗначение);
				НоваяСтрока.Автор						= Автор;
				НоваяСтрока.ВидЗаписи 					= Перечисления.CRM_ВидыЗаписейИстории.ИзменениеРеквизита;
			КонецЦикла;
			
			Если ТаблицаЗаписейABC.Количество() > 0 Тогда
				ТаблицаЗаписейABC.Записать();
			КонецЕсли;
			
			Если ТаблицаЗаписейXYZ.Количество() > 0 Тогда
				ТаблицаЗаписейXYZ.Записать();
			КонецЕсли;
		
		ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ПартнерыСегмента") Тогда
			
			НовыеЗначенияСегментов = Источник.Выгрузить();
			СтарыеЗначенияСегментов = Источник.ДополнительныеСвойства.СтарыеЗначенияСегментов;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтарыеЗначенияСегментов.Партнер КАК Партнер,
			|	СтарыеЗначенияСегментов.Сегмент КАК Сегмент
			|ПОМЕСТИТЬ СтарыеЗначенияСегментов
			|ИЗ
			|	&СтарыеЗначенияСегментов КАК СтарыеЗначенияСегментов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НовыеЗначенияСегментов.Партнер КАК Партнер,
			|	НовыеЗначенияСегментов.Сегмент КАК Сегмент
			|ПОМЕСТИТЬ НовыеЗначенияСегментов
			|ИЗ
			|	&НовыеЗначенияСегментов КАК НовыеЗначенияСегментов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СтарыеЗначенияСегментов.Партнер КАК Партнер,
			|	СтарыеЗначенияСегментов.Сегмент КАК Сегмент
			|ИЗ
			|	СтарыеЗначенияСегментов КАК СтарыеЗначенияСегментов
			|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеЗначенияСегментов КАК НовыеЗначенияСегментов
			|		ПО СтарыеЗначенияСегментов.Партнер = НовыеЗначенияСегментов.Партнер
			|			И СтарыеЗначенияСегментов.Сегмент = НовыеЗначенияСегментов.Сегмент
			|ГДЕ
			|	НовыеЗначенияСегментов.Сегмент ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НовыеЗначенияСегментов.Партнер КАК Партнер,
			|	НовыеЗначенияСегментов.Сегмент КАК Сегмент
			|ИЗ
			|	НовыеЗначенияСегментов КАК НовыеЗначенияСегментов
			|		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеЗначенияСегментов КАК СтарыеЗначенияСегментов
			|		ПО НовыеЗначенияСегментов.Партнер = СтарыеЗначенияСегментов.Партнер
			|			И НовыеЗначенияСегментов.Сегмент = СтарыеЗначенияСегментов.Сегмент
			|ГДЕ
			|	СтарыеЗначенияСегментов.Сегмент ЕСТЬ NULL";
			
			Запрос.УстановитьПараметр("СтарыеЗначенияСегментов", СтарыеЗначенияСегментов);
			Запрос.УстановитьПараметр("НовыеЗначенияСегментов", НовыеЗначенияСегментов);
			
			УстановитьПривилегированныйРежим(Истина);
			
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			РезультатУдаленные = РезультатЗапроса[2].Выгрузить();
			РезультатДобавленные = РезультатЗапроса[3].Выгрузить();
			
			УстановитьПривилегированныйРежим(Ложь);
			
			Если РезультатДобавленные.Количество() = 0 И РезультатУдаленные.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			ТекДата = ТекущаяДатаСеанса();
			ТипСегмент = Тип("СправочникСсылка.СегментыПартнеров");
			Автор = Пользователи.АвторизованныйПользователь();
			
			ТаблицаЗаписей = РегистрыСведений.CRM_ИсторияРеквизитовОбъектов.СоздатьНаборЗаписей();
			ТаблицаЗаписей.Отбор.Период.Установить(ТекДата);
			ТаблицаЗаписей.Отбор.Реквизит.Установить("Сегмент");
			
			Для Каждого Строка Из РезультатУдаленные Цикл
				НоваяСтрока = ТаблицаЗаписей.Добавить();
				НоваяСтрока.Период						= ТекДата;
				НоваяСтрока.Объект						= Строка.Партнер;
				НоваяСтрока.Реквизит					= "Сегмент";
				НоваяСтрока.КлючУникальности 			= Строка(Новый УникальныйИдентификатор);
				НоваяСтрока.РеквизитТип					= ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипСегмент);
				НоваяСтрока.СтароеЗначениеСтрока 		= Строка.Сегмент;
				НоваяСтрока.СтароеЗначениеИдентификатор = Строка.Сегмент.УникальныйИдентификатор();
				НоваяСтрока.Автор						= Автор;
				НоваяСтрока.ВидЗаписи 					= Перечисления.CRM_ВидыЗаписейИстории.УдалениеЗначенияИзСписка;
			КонецЦикла;
			
			Для Каждого Строка Из РезультатДобавленные Цикл
				НоваяСтрока = ТаблицаЗаписей.Добавить();
				НоваяСтрока.Период						= ТекДата;
				НоваяСтрока.Объект						= Строка.Партнер;
				НоваяСтрока.Реквизит					= "Сегмент";
				НоваяСтрока.КлючУникальности 			= Строка(Новый УникальныйИдентификатор);
				НоваяСтрока.РеквизитТип					= ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипСегмент);
				НоваяСтрока.ЗначениеСтрока 				= Строка.Сегмент;
				НоваяСтрока.ЗначениеИдентификатор 		= Строка.Сегмент.УникальныйИдентификатор();
				НоваяСтрока.Автор						= Автор;
				НоваяСтрока.ВидЗаписи 					= Перечисления.CRM_ВидыЗаписейИстории.ДобавлениеЗначенияВСписок;
			КонецЦикла;
			
			ТаблицаЗаписей.Записать();
			
		КонецЕсли;
		
	// КонецЕсли;
	
КонецПроцедуры

// Возвращает текст сообщения в случае, если отключена константа "CRM_ПланироватьПродажи" (Планирование продаж,
	// контактов)
//
Функция ТекстСообщенияОНевозможностиПланирования() Экспорт
	
	Возврат (НСтр("ru='Возможность планирования продаж и контактов отключена в настройках параметров учета CRM.';
		|en='The ability to plan sales and contacts is disabled in the CRM account settings.'"));
	
КонецФункции

// Процедура делает записи о изменениях в реквизитах партнера.
//
// Параметры:
//	ПартнерИлиКонтактноеЛицоПартнера	- СправочникСсылка.Партнеры, СправочникСсылка.КонтактныеЛицаПартнеров	- Ссылка на
//	                                   партнера или КЛ партнера.
//	СтруктураОбрабатываемыеРеквизиты	- Структура	- Структура в которой указано, какие реквизиты обрабатывать.
//	НаДату								- Дата		- Если передан, то используется как дата в истории вместо текущей даты.
//	АвторИзменений						- СправочникСсылка.Пользователи	- ссылка на пользователя, делающего изменения.
//
Процедура ЗаписатьИсториюРеквизитовПартнера(ПартнерИлиКонтактноеЛицоПартнера,
	 СтруктураОбрабатываемыеРеквизиты, СтарыеЗначения = Неопределено,
											НаДату = Неопределено, АвторИзменений = Неопределено, ЭтоНовый = Ложь, СтарыеУровниДоступа = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(ПартнерИлиКонтактноеЛицоПартнера) Тогда
		Возврат;
	КонецЕсли;
	
	Если  CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM()
		 И ТипЗнч(ПартнерИлиКонтактноеЛицоПартнера) = Тип("СправочникСсылка.Партнеры") Тогда
		Если ПартнерИлиКонтактноеЛицоПартнера.ЭтоГруппа Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Настройка = РегистрыСведений.CRM_НастройкаВерсионированияРеквизитовПартнеров.ПолучитьНастройку();
	Если ТипЗнч(Настройка) = Тип("Структура") И Настройка.Свойство("СтруктураНастройки") Тогда
		Если ТипЗнч(Настройка.СтруктураНастройки) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Реквизиты = Неопределено;
	РеквизитыКонтактногоЛица = Неопределено;
	РеквизитыИнтереса = Неопределено;
	РеквизитыПотенциальногоКлиента = Неопределено;

	Настройка.СтруктураНастройки.Свойство("Реквизиты", Реквизиты);
	Настройка.СтруктураНастройки.Свойство("РеквизитыКонтактногоЛица", РеквизитыКонтактногоЛица);
	Настройка.СтруктураНастройки.Свойство("РеквизитыИнтереса", РеквизитыИнтереса);
	Настройка.СтруктураНастройки.Свойство("РеквизитыПотенциальногоКлиента", РеквизитыПотенциальногоКлиента);
	
	Если ТипЗнч(Реквизиты) <> Тип("Массив") 
		И ТипЗнч(РеквизитыКонтактногоЛица) <> Тип("Массив") 
		И ТипЗнч(РеквизитыИнтереса) <> Тип("Массив") 
		И ТипЗнч(РеквизитыПотенциальногоКлиента) <> Тип("Массив") Тогда 
		Возврат; 
	КонецЕсли;
	
	Если СтарыеЗначения = Неопределено Тогда
		СтарыеЗначения = Новый Соответствие;
	КонецЕсли;
	
	ТекДата = ?(ЗначениеЗаполнено(НаДату), НаДату, ТекущаяДатаСеанса());
	Автор = ?(ЗначениеЗаполнено(АвторИзменений), АвторИзменений, Пользователи.АвторизованныйПользователь());
	
	НаборЗаписей = РегистрыСведений.CRM_ИсторияРеквизитовОбъектов.СоздатьНаборЗаписей();
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	
	Если ТипЗнч(ПартнерИлиКонтактноеЛицоПартнера) = Тип("СправочникСсылка.Партнеры") Тогда
		ИтераторРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(ПартнерИлиКонтактноеЛицоПартнера) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ИтераторРеквизитов = РеквизитыКонтактногоЛица;
	ИначеЕсли ТипЗнч(ПартнерИлиКонтактноеЛицоПартнера) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		ИтераторРеквизитов = РеквизитыИнтереса;	
	ИначеЕсли ТипЗнч(ПартнерИлиКонтактноеЛицоПартнера) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		ИтераторРеквизитов = РеквизитыПотенциальногоКлиента;	
	Иначе
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ИтераторРеквизитов) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Реквизит Из ИтераторРеквизитов Цикл
		
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() И Реквизит = "CRM_УровниДоступа" Тогда
			
			СтарыеУровниДоступа = СтарыеЗначения.Получить(Реквизит);
			Если СтарыеУровниДоступа = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НовыеУровниДоступа = ПартнерИлиКонтактноеЛицоПартнера.CRM_УровниДоступа.Выгрузить();
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СтарыеУровни.УровеньДоступа КАК УровеньДоступа,
			|	СтарыеУровни.ТолькоЧтение КАК ТолькоЧтение
			|ПОМЕСТИТЬ СтарыеУровни
			|ИЗ
			|	&СтарыеУровни КАК СтарыеУровни
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НовыеУровни.УровеньДоступа КАК УровеньДоступа,
			|	НовыеУровни.ТолькоЧтение КАК ТолькоЧтение
			|ПОМЕСТИТЬ НовыеУровни
			|ИЗ
			|	&НовыеУровни КАК НовыеУровни
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НовыеУровни.УровеньДоступа КАК УровеньДоступа,
			|	НовыеУровни.ТолькоЧтение КАК ТолькоЧтение
			|ИЗ
			|	НовыеУровни КАК НовыеУровни
			|		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеУровни КАК СтарыеУровни
			|		ПО НовыеУровни.УровеньДоступа = СтарыеУровни.УровеньДоступа
			|ГДЕ
			|	СтарыеУровни.УровеньДоступа ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СтарыеУровни.УровеньДоступа КАК УровеньДоступа,
			|	СтарыеУровни.ТолькоЧтение КАК ТолькоЧтение
			|ИЗ
			|	СтарыеУровни КАК СтарыеУровни
			|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеУровни КАК НовыеУровни
			|		ПО СтарыеУровни.УровеньДоступа = НовыеУровни.УровеньДоступа
			|ГДЕ
			|	НовыеУровни.УровеньДоступа ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НовыеУровни.УровеньДоступа КАК УровеньДоступа,
			|	НовыеУровни.ТолькоЧтение КАК ТолькоЧтениеНовый,
			|	СтарыеУровни.ТолькоЧтение КАК ТолькоЧтениеСтарый
			|ИЗ
			|	НовыеУровни КАК НовыеУровни
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтарыеУровни КАК СтарыеУровни
			|		ПО НовыеУровни.УровеньДоступа = СтарыеУровни.УровеньДоступа
			|ГДЕ
			|	НовыеУровни.ТолькоЧтение <> СтарыеУровни.ТолькоЧтение");
			
			Запрос.Параметры.Вставить("СтарыеУровни", СтарыеУровниДоступа);
			Запрос.Параметры.Вставить("НовыеУровни", НовыеУровниДоступа);
			
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			
			РезультатДобавленные = РезультатЗапроса[2];
			Если Не РезультатДобавленные.Пустой() Тогда
				ВыборкаДобавленные = РезультатДобавленные.Выбрать();
				Пока ВыборкаДобавленные.Следующий() Цикл
					НоваяСтрока = ТаблицаЗаписей.Добавить();
					НоваяСтрока.Период		= ТекДата;
					НоваяСтрока.Объект		= ПартнерИлиКонтактноеЛицоПартнера;
					НоваяСтрока.Реквизит	= НСтр("ru = 'Уровни доступа'");
					НоваяСтрока.КлючУникальности	= Новый УникальныйИдентификатор();
					ЧтениеИзменение = ?(ВыборкаДобавленные.ТолькоЧтение, НСтр("ru = 'Просмотр'"), НСтр("ru = 'Просмотр и изменение'"));
					НоваяСтрока.ЗначениеСтрока	= Строка(ВыборкаДобавленные.УровеньДоступа) + " (" + ЧтениеИзменение + ")";
					НоваяСтрока.ВидЗаписи	= Перечисления.CRM_ВидыЗаписейИстории.ДобавлениеЗначенияВСписок;
					НоваяСтрока.Автор		= Автор;
					НоваяСтрока.ЭтоНовый	= ЭтоНовый;
				КонецЦикла;
			КонецЕсли;
			
			РезультатУдаленные = РезультатЗапроса[3];
			Если Не РезультатУдаленные.Пустой() Тогда
				ВыборкаУдаленные = РезультатУдаленные.Выбрать();
				Пока ВыборкаУдаленные.Следующий() Цикл
					НоваяСтрока = ТаблицаЗаписей.Добавить();
					НоваяСтрока.Период		= ТекДата;
					НоваяСтрока.Объект		= ПартнерИлиКонтактноеЛицоПартнера;
					НоваяСтрока.Реквизит	= НСтр("ru = 'Уровни доступа'");
					НоваяСтрока.КлючУникальности	= Новый УникальныйИдентификатор();
					ЧтениеИзменение = ?(ВыборкаУдаленные.ТолькоЧтение, НСтр("ru = 'Просмотр'"), НСтр("ru = 'Просмотр и изменение'"));
					НоваяСтрока.СтароеЗначениеСтрока	= Строка(ВыборкаУдаленные.УровеньДоступа) + " (" + ЧтениеИзменение + ")";
					НоваяСтрока.ВидЗаписи	= Перечисления.CRM_ВидыЗаписейИстории.УдалениеЗначенияИзСписка;
					НоваяСтрока.Автор		= Автор;
					НоваяСтрока.ЭтоНовый	= ЭтоНовый;
				КонецЦикла;
			КонецЕсли;
			
			РезультатИзмененные = РезультатЗапроса[4];
			Если Не РезультатИзмененные.Пустой() Тогда
				ВыборкаИзмененные = РезультатИзмененные.Выбрать();
				Пока ВыборкаИзмененные.Следующий() Цикл
					НоваяСтрока = ТаблицаЗаписей.Добавить();
					НоваяСтрока.Период		= ТекДата;
					НоваяСтрока.Объект		= ПартнерИлиКонтактноеЛицоПартнера;
					НоваяСтрока.Реквизит	= НСтр("ru = 'Уровни доступа'");
					НоваяСтрока.КлючУникальности	= Новый УникальныйИдентификатор();
					ЧтениеИзменениеСтарый 	= ?(ВыборкаИзмененные.ТолькоЧтениеСтарый, НСтр("ru = 'Просмотр'"),
						 НСтр("ru = 'Просмотр и изменение'"));
					ЧтениеИзменениеНовый 	= ?(ВыборкаИзмененные.ТолькоЧтениеНовый, НСтр("ru = 'Просмотр'"),
						 НСтр("ru = 'Просмотр и изменение'"));
					НоваяСтрока.СтароеЗначениеСтрока	= Строка(ВыборкаИзмененные.УровеньДоступа) + " (" + ЧтениеИзменениеСтарый + ")";
					НоваяСтрока.ЗначениеСтрока	= Строка(ВыборкаИзмененные.УровеньДоступа) + " (" + ЧтениеИзменениеНовый + ")";
					НоваяСтрока.ВидЗаписи	= Перечисления.CRM_ВидыЗаписейИстории.ИзменениеЗначенияВСписке;
					НоваяСтрока.Автор		= Автор;
					НоваяСтрока.ЭтоНовый	= ЭтоНовый;
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли СтруктураОбрабатываемыеРеквизиты.Свойство("Партнер")
			 Или СтруктураОбрабатываемыеРеквизиты.Свойство("КонтактноеЛицоПартнера")
			Или СтруктураОбрабатываемыеРеквизиты.Свойство("ПотенциальныйКлиент") Тогда
			бСохранять = Ложь;
			
			СтароеЗначение = СтарыеЗначения.Получить(Реквизит);
			
			Если ТипЗнч(Реквизит) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
				
				СтрокаНовогоЗначения = ПартнерИлиКонтактноеЛицоПартнера.КонтактнаяИнформация.Найти(Реквизит, "Вид");
				Если СтрокаНовогоЗначения = Неопределено Тогда
					Если СтароеЗначение = Неопределено Тогда
						Продолжить;
					Иначе
						ЗначениеРеквизита = "";
						бСохранять = Истина;
						ВидЗаписи = Перечисления.CRM_ВидыЗаписейИстории.ОчисткаРеквизита;
					КонецЕсли;
				Иначе
					ЗначениеРеквизита = СтрокаНовогоЗначения.Представление;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Реквизит) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
				
				СтрокаНовогоЗначения = ПартнерИлиКонтактноеЛицоПартнера.ДополнительныеРеквизиты.Найти(Реквизит, "Свойство");
				Если СтрокаНовогоЗначения = Неопределено Тогда
					Если Не ЗначениеЗаполнено(СтароеЗначение) Тогда
						Продолжить;
					Иначе
						// Значение доп. реквизита было очищено.
						Попытка
							ЗначениеРеквизита = Реквизит.ТипЗначения.ПривестиЗначение(Неопределено);
						
						Исключение	ЗначениеРеквизита = Неопределено;
						КонецПопытки;
						бСохранять = Истина;
						ВидЗаписи = Перечисления.CRM_ВидыЗаписейИстории.ОчисткаРеквизита;
					КонецЕсли;
				Иначе
					ЗначениеРеквизита = СтрокаНовогоЗначения.Значение;
				КонецЕсли;
				
			Иначе
				Попытка
					ЗначениеРеквизита = ПартнерИлиКонтактноеЛицоПартнера[Реквизит];
				
				Исключение	Продолжить;
				КонецПопытки;
			КонецЕсли;
			
			Если Не бСохранять Тогда
				Если ЗначениеЗаполнено(СтароеЗначение) Тогда
					Если СтароеЗначение <> ЗначениеРеквизита Тогда
						бСохранять = Истина;
						Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
							ВидЗаписи = Перечисления.CRM_ВидыЗаписейИстории.ИзменениеРеквизита;
						Иначе
							ВидЗаписи = Перечисления.CRM_ВидыЗаписейИстории.ОчисткаРеквизита;
						КонецЕсли;
					КонецЕсли;
				Иначе
					бСохранять = ЗначениеЗаполнено(ЗначениеРеквизита);
					Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						ВидЗаписи = Перечисления.CRM_ВидыЗаписейИстории.ЗаполнениеРеквизита;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если бСохранять Тогда
				НоваяСтрока = ТаблицаЗаписей.Добавить();
				НоваяСтрока.Период				= ТекДата;
				НоваяСтрока.Объект				= ПартнерИлиКонтактноеЛицоПартнера;
				НоваяСтрока.Реквизит			= Реквизит;
				НоваяСтрока.КлючУникальности	= Новый УникальныйИдентификатор();
				
				Если ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Или ТипЗнч(ЗначениеРеквизита) = Тип("Дата")
					 Или ТипЗнч(ЗначениеРеквизита) = Тип("Число") Тогда
					НоваяСтрока.Значение 					= ЗначениеРеквизита;
					НоваяСтрока.СтароеЗначение 				= СтароеЗначение;
				ИначеЕсли ОбщегоНазначения.ЗначениеСсылочногоТипа(ЗначениеРеквизита) Тогда
					НоваяСтрока.ЗначениеСтрока 				= ЗначениеРеквизита;
					НоваяСтрока.СтароеЗначениеСтрока 		= СтароеЗначение;
					Если ОбщегоНазначения.ВидОбъектаПоСсылке(ЗначениеРеквизита) <> "Перечисление" Тогда
						НоваяСтрока.РеквизитТип 		= ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ЗначениеРеквизита));
						НоваяСтрока.ЗначениеИдентификатор 		= ?(ЗначениеЗаполнено(ЗначениеРеквизита),
							 ЗначениеРеквизита.УникальныйИдентификатор(),
							 "");
						НоваяСтрока.СтароеЗначениеИдентификатор = ?(ЗначениеЗаполнено(СтароеЗначение),
							 СтароеЗначение.УникальныйИдентификатор(),
							 "");
					КонецЕсли;
				Иначе
					НоваяСтрока.ЗначениеСтрока 				= Строка(ЗначениеРеквизита);
					НоваяСтрока.СтароеЗначениеСтрока 		= Строка(СтароеЗначение);
				КонецЕсли;
				
				НоваяСтрока.ВидЗаписи 	= ВидЗаписи;
				НоваяСтрока.Автор		= Автор;
				НоваяСтрока.ЭтоНовый	= ЭтоНовый;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураОбрабатываемыеРеквизиты.Свойство("ABCКласс")
		 И ТипЗнч(ПартнерИлиКонтактноеЛицоПартнера) = Тип("СправочникСсылка.Партнеры") Тогда
		НоваяСтрока = ТаблицаЗаписей.Добавить();
		НоваяСтрока.Период		= ТекДата;
		НоваяСтрока.Объект		= ПартнерИлиКонтактноеЛицоПартнера;
		НоваяСтрока.Реквизит	= "ABCКласс";
		НоваяСтрока.КлючУникальности = Новый УникальныйИдентификатор();
		НоваяСтрока.Автор		= Автор;
	ИначеЕсли СтруктураОбрабатываемыеРеквизиты.Свойство("XYZКласс")
		 И ТипЗнч(ПартнерИлиКонтактноеЛицоПартнера) = Тип("СправочникСсылка.Партнеры") Тогда
		НоваяСтрока = ТаблицаЗаписей.Добавить();
		НоваяСтрока.Период		= ТекДата;
		НоваяСтрока.Объект		= ПартнерИлиКонтактноеЛицоПартнера;
		НоваяСтрока.Реквизит	= "XYZКласс";
		НоваяСтрока.КлючУникальности = Новый УникальныйИдентификатор();
		НоваяСтрока.Автор		= Автор;
	КонецЕсли;
	
	Если ТаблицаЗаписей.Количество() > 0 Тогда
		СтрокаСвернуть = "";
		Для Каждого Измерение Из Метаданные.РегистрыСведений.CRM_ИсторияРеквизитовОбъектов.Измерения Цикл
			СтрокаСвернуть = СтрокаСвернуть + Измерение.Имя + ",";
		КонецЦикла;
		Для Каждого Реквизит Из Метаданные.РегистрыСведений.CRM_ИсторияРеквизитовОбъектов.Реквизиты Цикл
			СтрокаСвернуть = СтрокаСвернуть + Реквизит.Имя + ",";
		КонецЦикла;
		СтрокаСвернуть = СтрокаСвернуть + "Период";
		ТаблицаЗаписей.Свернуть(СтрокаСвернуть);
		
		Для Каждого СтрокаТаблицы Из ТаблицаЗаписей Цикл
			МенеджерЗаписи = РегистрыСведений.CRM_ИсторияРеквизитовОбъектов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы, СтрокаСвернуть);
			МенеджерЗаписи.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Истина если редактирование потенциала клиента разрешено.
//
Функция РазрешеноРедактированиеПотенциалаКлиента(Пользователь = Неопределено) Экспорт
	МассивНеобходимыхРолей = Новый Массив();
	МассивНеобходимыхРолей.Добавить("CRM_ДобавлениеИзменениеКлиентов");
	МассивНеобходимыхРолей.Добавить("CRM_ДобавлениеИзменениеБазовойНСИ");
	МассивНеобходимыхРолей.Добавить("CRM_ПланироватьПоВсемПодразделениямМенеджерам");
	
	Если ЗначениеЗаполнено(Пользователь) И ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		Если Не ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Истина);
		КонецЕсли;
		
		СвойстваПользователяИБ = Пользователи.СвойстваПользователяИБ(Пользователь.ИдентификаторПользователяИБ);
		Если СвойстваПользователяИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если СвойстваПользователяИБ.Роли.Найти("ПолныеПрава") <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		Для Каждого РольСтр Из МассивНеобходимыхРолей Цикл
			Если СвойстваПользователяИБ.Роли.Найти(РольСтр) = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Пользователи.РолиДоступны("ПолныеПрава") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Для Каждого РольСтр Из МассивНеобходимыхРолей Цикл
			Если Не Пользователи.РолиДоступны(РольСтр) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

// Возвращает Истина если изменение состава реквизитов расчета потенциала клиента разрешено.
//
Функция РазрешеноИзменениеСоставаРеквизитовРасчетаПотенциалаКлиента() Экспорт
	Возврат Пользователи.РолиДоступны("CRM_НастройкаПрограммы, ПолныеПрава");
КонецФункции

// Возвращает массив всех дополнительных реквизитов партнеров.
//
Функция ПолучитьВсеДополнительныеРеквизитыПартнеров() Экспорт
	МассивВсехДопРеквизитов = Новый Массив();
	
	Возврат МассивВсехДопРеквизитов;
	
КонецФункции

// Возвращает реквизиты расчета потенциала клиента.
//
Функция ПолучитьРеквизитыРасчетаПотенциалаКлиента() Экспорт
	ИспользоватьДопРеквизиты = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	Если ИспользоватьДопРеквизиты Тогда
		// Все дополнительные реквизиты справочника Партнеры.
		МассивВсехДопРеквизитов = ПолучитьВсеДополнительныеРеквизитыПартнеров();
	КонецЕсли;
	
	СтруктураРезультат = Новый Структура("Реквизиты,ДополнительныеРеквизиты,ДополнительнаяИнформация",
		 Новый Массив(), Новый Массив(),
		 Ложь);
	ПартнерыМд = Метаданные.Справочники.Партнеры;
	
	РеквизитыСохраненные = Константы.CRM_РеквизитыПоискаДублейПартнеров.Получить().Получить();
	Если ТипЗнч(РеквизитыСохраненные) = Тип("Структура") Тогда
		Если РеквизитыСохраненные.Свойство("Реквизиты") И ТипЗнч(РеквизитыСохраненные.Реквизиты) = Тип("Массив") Тогда
			Для Каждого Реквизит Из РеквизитыСохраненные.Реквизиты Цикл
				Если ПартнерыМд.Реквизиты.Найти(Реквизит) <> Неопределено
					 И СтруктураРезультат.Реквизиты.Найти(Реквизит) = Неопределено Тогда
					СтруктураРезультат.Реквизиты.Добавить(Реквизит);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ИспользоватьДопРеквизиты И РеквизитыСохраненные.Свойство("ДополнительныеРеквизиты")
			 И ТипЗнч(РеквизитыСохраненные.ДополнительныеРеквизиты) = Тип("Массив") Тогда
			Для Каждого ДопРеквизит Из РеквизитыСохраненные.ДополнительныеРеквизиты Цикл
				Если МассивВсехДопРеквизитов.Найти(ДопРеквизит) <> Неопределено
					 И СтруктураРезультат.ДополнительныеРеквизиты.Найти(ДопРеквизит) = Неопределено Тогда
					СтруктураРезультат.ДополнительныеРеквизиты.Добавить(ДопРеквизит);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если РеквизитыСохраненные.Свойство("ДополнительнаяИнформация")
			 И ТипЗнч(РеквизитыСохраненные.ДополнительнаяИнформация) = Тип("Булево") Тогда
			СтруктураРезультат.ДополнительнаяИнформация = РеквизитыСохраненные.ДополнительнаяИнформация;
		КонецЕсли;
		
	Иначе
		// Значения по умолчанию
		// СтруктураРезультат.Реквизиты.Добавить("CRM_ТипОтношений");
		СтруктураРезультат.Реквизиты.Добавить("БизнесРегион");
		СтруктураРезультат.Реквизиты.Добавить("CRM_ОсновнаяОтрасль");
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
			// Дополнительные реквизиты справочника Партнеры.
			Для Каждого ДопРеквизит Из МассивВсехДопРеквизитов Цикл
				СтруктураРезультат.ДополнительныеРеквизиты.Добавить(ДопРеквизит);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивПорядок = Новый Массив();
	// МассивПорядок.Добавить("CRM_ТипОтношений");
	МассивПорядок.Добавить("БизнесРегион");
	МассивПорядок.Добавить("CRM_ОсновнаяОтрасль");
	Для НомерСтроки = 0 По МассивПорядок.ВГраница() Цикл
		ИмяРеквизита = МассивПорядок[МассивПорядок.ВГраница() - НомерСтроки];
		нИндекс = СтруктураРезультат.Реквизиты.Найти(ИмяРеквизита);
		Если нИндекс <> Неопределено Тогда
			СтруктураРезультат.Реквизиты.Удалить(нИндекс);
			СтруктураРезультат.Реквизиты.Вставить(0, ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция НайтиДубли(Объект, СтруктураПоиска, СписокКонтактов, ТочноеСоответствие) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Запрос			= Новый Запрос;
	Сч				= 0;
	ПервоеЗначение	= Истина;
	Для Каждого КлючИЗначение Из СтруктураПоиска Цикл
		ИмяРеквизита = КлючИЗначение.Ключ;
		Если ТочноеСоответствие Тогда
			СтепеньСхожести	= "=";
		Иначе
			СтепеньСхожести	= КлючИЗначение.Значение;
		КонецЕсли;
		ЗначениеРеквизита	= Неопределено;
		Реквизиты			= "";
		Сч					= Сч + 1;
		Если СтрНайти(ИмяРеквизита, "Контакт") = 0 Тогда
			Если ТипЗнч(Объект) = Тип("Структура") Тогда
				Объект.Свойство(ИмяРеквизита, ЗначениеРеквизита);
			Иначе
				ЗначениеРеквизита = Объект[ИмяРеквизита];
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ПервоеЗначение Тогда
				Реквизиты = "
				| ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;
			Реквизиты =  Реквизиты + "
			|ВЫБРАТЬ  
			|Данные.Ссылка" +  ?(ПервоеЗначение, " КАК Ссылка", "");
			Реквизиты = Реквизиты + "
			|,Данные." + ИмяРеквизита + ?(ПервоеЗначение, " КАК Реквизит", "");
			Реквизиты = Реквизиты + "
			|,""" + ИмяРеквизита + """" + ?(ПервоеЗначение, " КАК ИмяРеквизита", "");
			Условия  = "
			|Данные." + ИмяРеквизита + " " + СтепеньСхожести + " &" + ИмяРеквизита + Строка(Сч);
			Запрос.УстановитьПараметр(ИмяРеквизита + Строка(Сч), ?(СтепеньСхожести = "ПОДОБНО", "%" 
				+ ЗначениеРеквизита + "%",
				 ЗначениеРеквизита));
			Запрос.Текст = Запрос.Текст + Реквизиты + "
			|ИЗ Справочник.Партнеры КАК Данные
			|ГДЕ " + Сред(Условия, 2);
			ПервоеЗначение = Ложь;
		Иначе
			Массив = Новый Массив;
			Для Каждого Стр Из СписокКонтактов Цикл
				ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "Контакт_", "");
				Если Стр.Значение = ИмяРеквизита И ЗначениеЗаполнено(Стр.Представление) Тогда
					Массив.Добавить(Стр.Представление);	
				КонецЕсли;
			КонецЦикла;
			Если Массив.Количество() > 0 Тогда
				Для Каждого Стр Из Массив Цикл
					Если НЕ ПервоеЗначение Тогда
						Реквизиты = "
						| ОБЪЕДИНИТЬ ВСЕ
						|";
					КонецЕсли;
					Реквизиты =  Реквизиты + "
					|ВЫБРАТЬ 
					|Данные.Ссылка" +  ?(ПервоеЗначение, " КАК Ссылка", "");
					Реквизиты = Реквизиты + "
					|,Данные.Представление" + ?(ПервоеЗначение, " КАК Реквизит", "");
					Реквизиты = Реквизиты + "
					|,""" + ИмяРеквизита + """" + ?(ПервоеЗначение, " КАК ИмяРеквизита", "");
					Условия = "
					|Данные.Представление " + СтепеньСхожести + " &" + ИмяРеквизита + Строка(Сч) + "
					|И Данные.Тип = &Тип" + Строка(Сч);
					Запрос.УстановитьПараметр(ИмяРеквизита + Строка(Сч), ?(СтепеньСхожести = "ПОДОБНО", "%" + Стр + "%", Стр));
					Если ИмяРеквизита = "Адрес" Тогда
						Запрос.УстановитьПараметр("Тип" + Строка(Сч), Перечисления.ТипыКонтактнойИнформации.Адрес);
					ИначеЕсли ИмяРеквизита = "Телефон" Тогда 
						Запрос.УстановитьПараметр("Тип" + Строка(Сч), Перечисления.ТипыКонтактнойИнформации.Телефон);
					ИначеЕсли ИмяРеквизита = "АдресЭлектроннойПочты" Тогда 
						Запрос.УстановитьПараметр("Тип" + Строка(Сч), Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
					КонецЕсли;
					Запрос.Текст = Запрос.Текст + Реквизиты + "
					|ИЗ Справочник.Партнеры.КонтактнаяИнформация КАК Данные
					|ГДЕ " + Сред(Условия, 2);
					Сч				= Сч + 1;
					ПервоеЗначение	= Ложь;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ПустаяСтрока(Запрос.Текст) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

// Функция возвращает тип клиента для текущего объекта. Возможные значения:
//  - клиент;
//  - потенциальный клиент.
//
// Параметры:
//  ИмяНастройки		 - Строка	 - Имя настройки, в которой сохранен тип клиента.
//  Партнер				 - СправочникСсылка.Партнеры	 - Партнер.
//  ПотенциальныйКлиент	 - СправочникСсылка.ПотенциальныйКлиент	 - Потенциальный клиент.
//  ИспользоватьПК		 - Булево	 - Признак использования потенциальных клиентов.
// 
// Возвращаемое значение:
//   - Строка
//
Функция ПолучитьТипКлиента(ИмяНастройки, Партнер, ПотенциальныйКлиент, ИспользоватьПК = Ложь) Экспорт
	
	ИспользоватьПК = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПотенциальныхКлиентов");
	
	ТипКлиента = ХранилищеОбщихНастроек.Загрузить(ИмяНастройки, "ТипКлиента");
	
	Если Не ИспользоватьПК Или ЗначениеЗаполнено(Партнер) Тогда
		ТипКлиента = "Клиент";
	ИначеЕсли ИспользоватьПК И ЗначениеЗаполнено(ПотенциальныйКлиент) Тогда
		ТипКлиента = "ПотенциальныйКлиент";
	ИначеЕсли Не ЗначениеЗаполнено(ТипКлиента) Тогда
		ТипКлиента = "Клиент";
	КонецЕсли;
	
	Возврат ТипКлиента;
	
КонецФункции

#Область ДетальныйПоиск

Функция НайтиДублиПартнеров(СтруктураОбъекта, СтруктураПоиска) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	МассивНайденных	= Новый Массив;
	
	УсловияПоискаПоТочномуСовпадению = Новый Массив;
	УсловияПоискаПоЧастиСтроки = Новый Массив;
	
	Для Каждого КлючИЗначение Из СтруктураПоиска Цикл
		ИмяРеквизита		= КлючИЗначение.Ключ;
		НайденноеЗначение	= "";
		Если ТипЗнч(СтруктураОбъекта) = Тип("Структура") Тогда
			СтруктураОбъекта.Свойство(ИмяРеквизита, НайденноеЗначение);
		Иначе
			НайденноеЗначение = СтруктураОбъекта[ИмяРеквизита];
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НайденноеЗначение) Тогда
			Если СтрНайти(ИмяРеквизита, "CRM_") = 1 Тогда
				ИмяРеквизита	= СтрЗаменить(ИмяРеквизита, "CRM_", "");
			ИначеЕсли СтрНайти(ИмяРеквизита, "Контакт_") = 1 Тогда
				ИмяРеквизита	= СтрЗаменить(ИмяРеквизита, "Контакт_", "");
			Иначе
				Продолжить;
			КонецЕсли;	
			Если ТипЗнч(СтруктураОбъекта) = Тип("Структура") Тогда
				СтруктураОбъекта.Свойство(ИмяРеквизита, НайденноеЗначение);
			Иначе
				НайденноеЗначение = СтруктураОбъекта[ИмяРеквизита];
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НайденноеЗначение) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НовоеУсловие = Новый Структура();
		ПоляПоиска = Новый Массив();
		
		Если ИмяРеквизита = "Наименование" Тогда
			ПолеПоиска = Перечисления.CRM_ПоляПоискаКонтактов.Наименование;
		ИначеЕсли ИмяРеквизита = "НаименованиеПолное" Тогда
			ПолеПоиска = Перечисления.CRM_ПоляПоискаКонтактов.НаименованиеПолное;
		ИначеЕсли (ИмяРеквизита = "ИНН") ИЛИ (ИмяРеквизита = "CRM_ИНН") Тогда
			ПолеПоиска = Перечисления.CRM_ПоляПоискаКонтактов.ИНН;
		ИначеЕсли (ИмяРеквизита = "Телефон") ИЛИ (ИмяРеквизита = "Контакт_Телефон") Тогда
			ПолеПоиска = Перечисления.CRM_ПоляПоискаКонтактов.Телефон;
		ИначеЕсли (ИмяРеквизита = "АдресЭлектроннойПочты") ИЛИ (ИмяРеквизита = "Контакт_АдресЭлектроннойПочты") Тогда
			ПолеПоиска = Перечисления.CRM_ПоляПоискаКонтактов.EMail;
		ИначеЕсли (ИмяРеквизита = "Адрес") ИЛИ (ИмяРеквизита = "Контакт_Адрес") Тогда
			ПолеПоиска = Перечисления.CRM_ПоляПоискаКонтактов.Адрес;
		ИначеЕсли ИмяРеквизита = "Сайт" Тогда
			ПолеПоиска = Перечисления.CRM_ПоляПоискаКонтактов.Прочее;
		КонецЕсли;
		
		ПоляПоиска.Добавить(ПолеПоиска);
		НовоеУсловие = CRM_ПоискКонтактов.СтруктураУсловияПоиска(НайденноеЗначение);
		НовоеУсловие.Вставить("ПоляПоиска", ПоляПоиска);
		
		Если КлючИЗначение.Значение = ВРег("ПОДОБНО") Тогда
			УсловияПоискаПоЧастиСтроки.Добавить(НовоеУсловие);
		ИначеЕсли КлючИЗначение.Значение = "=" Тогда
			УсловияПоискаПоТочномуСовпадению.Добавить(НовоеУсловие);
		КонецЕсли;
		
	КонецЦикла;
	
	ИмяТипаКонтрагенты = "СправочникСсылка.Контрагенты";
	
	Если УсловияПоискаПоЧастиСтроки.Количество() > 0 Тогда
		МассивПартнеров = CRM_ПоискКонтактов.ВыполнитьПоискКонтактов(УсловияПоискаПоЧастиСтроки, 1, , Истина);
		Если Не ЗначениеЗаполнено(МассивПартнеров.КодОшибки) Тогда
			Для Каждого Строка Из МассивПартнеров.ТаблицаРезультатов Цикл
				Если ТипЗнч(Строка.Владелец) = Тип("СправочникСсылка.Партнеры") Тогда
					НовыйЭлемент = Новый Структура("ИмяРеквизита, НаименованиеПолное, ОсновнойМенеджер, Реквизит, Ссылка",
					Строка(Строка.ПолеПоиска), Строка.Владелец.НаименованиеПолное, Строка.Владелец.ОсновнойМенеджер, Строка.ЗначениеПоиска, Строка.Владелец);
					МассивНайденных.Добавить(НовыйЭлемент);
				ИначеЕсли Не Метаданные.НайтиПоПолномуИмени("Справочник.Контрагенты") = Неопределено
					И ТипЗнч(Строка.Владелец) = Тип(ИмяТипаКонтрагенты) Тогда
					
					НовыйЭлемент = Новый Структура("ИмяРеквизита, НаименованиеПолное, ОсновнойМенеджер, Реквизит, Ссылка",
					Строка(Строка.ПолеПоиска), Строка.Партнер.НаименованиеПолное, Строка.Партнер.ОсновнойМенеджер, Строка.ЗначениеПоиска, Строка.Партнер);
					МассивНайденных.Добавить(НовыйЭлемент);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если УсловияПоискаПоТочномуСовпадению.Количество() > 0 Тогда
		МассивПартнеров = CRM_ПоискКонтактов.ВыполнитьПоискКонтактов(УсловияПоискаПоТочномуСовпадению, 2, , Истина);
		Если Не ЗначениеЗаполнено(МассивПартнеров.КодОшибки) Тогда
			Для Каждого Строка Из МассивПартнеров.ТаблицаРезультатов Цикл
				Если ТипЗнч(Строка.Владелец) = Тип("СправочникСсылка.Партнеры") Тогда
					НовыйЭлемент = Новый Структура("ИмяРеквизита, НаименованиеПолное, ОсновнойМенеджер, Реквизит, Ссылка",
					Строка(Строка.ПолеПоиска), Строка.Владелец.НаименованиеПолное, Строка.Владелец.ОсновнойМенеджер, Строка.ЗначениеПоиска, Строка.Владелец);
					МассивНайденных.Добавить(НовыйЭлемент);
				ИначеЕсли Не Метаданные.НайтиПоПолномуИмени("Справочник.Контрагенты") = Неопределено
					И ТипЗнч(Строка.Владелец) = Тип(ИмяТипаКонтрагенты) Тогда
					
					НовыйЭлемент = Новый Структура("ИмяРеквизита, НаименованиеПолное, ОсновнойМенеджер, Реквизит, Ссылка",
					Строка(Строка.ПолеПоиска), Строка.Партнер.НаименованиеПолное, Строка.Партнер.ОсновнойМенеджер, Строка.ЗначениеПоиска, Строка.Партнер);
					МассивНайденных.Добавить(НовыйЭлемент);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивНайденных;
	
КонецФункции

Функция НайтиПартнераПоКонтактномуЛицу(КонтактноеЛицо) Экспорт
	Если ПустаяСтрока(КонтактноеЛицо) Тогда
		Возврат Новый Массив();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонтактноеЛицо", КонтактноеЛицо);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактныеЛицаПартнеров.Владелец КАК Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Наименование ПОДОБНО ""%"" + &КонтактноеЛицо + ""%""";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

Функция НайтиПартнераПоКИ(Представление, ТипКИ, ТолькоСсылка = Истина, СписокТиповКИИсключая = Неопределено) Экспорт
	МассивПартнеров	= Новый Массив();
	Если ПустаяСтрока(Представление) Тогда
		Возврат МассивПартнеров;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Представление", Представление);
	Если ТолькоСсылка Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка,
		|	ВЫРАЗИТЬ(ПартнерыКонтактнаяИнформация.Ссылка.НаименованиеПолное КАК СТРОКА(250)) КАК НаименованиеПолное,
		|	ПартнерыКонтактнаяИнформация.Ссылка.ОсновнойМенеджер КАК ОсновнойМенеджер
		|ИЗ
		|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		|ГДЕ
		|	ПартнерыКонтактнаяИнформация.Представление ПОДОБНО ""%"" + &Представление + ""%""
		|	И ПартнерыКонтактнаяИнформация.Тип = &Тип
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец,
		|	ПРЕДСТАВЛЕНИЕ(КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец),
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
		|ГДЕ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление ПОДОБНО ""%"" + &Представление + ""%""
		|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = &Тип";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка,
		|	ВЫРАЗИТЬ(ПартнерыКонтактнаяИнформация.Ссылка.НаименованиеПолное КАК СТРОКА(250)) КАК НаименованиеПолное,
		|	ПартнерыКонтактнаяИнформация.Ссылка.ОсновнойМенеджер КАК ОсновнойМенеджер,
		|	ПартнерыКонтактнаяИнформация.Представление КАК Реквизит,
		|	ПартнерыКонтактнаяИнформация.Вид.Наименование КАК ИмяРеквизита
		|ИЗ
		|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		|ГДЕ
		|	ПартнерыКонтактнаяИнформация.Представление ПОДОБНО ""%"" + &Представление + ""%""
		|	И ПартнерыКонтактнаяИнформация.Тип = &Тип
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка),
		|	НЕОПРЕДЕЛЕНО,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид.Наименование
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
		|ГДЕ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление ПОДОБНО ""%"" + &Представление + ""%""
		|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = &Тип";
	КонецЕсли;	
	Если ТипКИ = 1 Или ТипКИ = 9 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ПартнерыКонтактнаяИнформация.Представление ПОДОБНО ""%"" + &Представление + ""%""",
			"(ПартнерыКонтактнаяИнформация.Представление ПОДОБНО ""%"" + &Представление + ""%""
			|		ИЛИ ПартнерыКонтактнаяИнформация.НомерТелефона ПОДОБНО ""%"" + &Представление + ""%""
			|		ИЛИ ПартнерыКонтактнаяИнформация.НомерТелефонаБезКодов ПОДОБНО ""%"" + &Представление + ""%"")");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление ПОДОБНО ""%"" + &Представление + ""%""",
			"(КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление ПОДОБНО ""%"" + &Представление + ""%""
			|		ИЛИ КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона ПОДОБНО ""%"" + &Представление + ""%""
			|		ИЛИ КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефонаБезКодов ПОДОБНО ""%"" + &Представление + ""%"")");
	КонецЕсли;
	Если ТипКИ = 1 Тогда
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Если СтрДлина(Представление) = 11 Тогда 
				Представление1  = Лев(Представление, 1) + Сред(Представление, 2, 3) + Сред(Представление, 5, 3) + "-" + Сред(Представление, 8, 2) + "-" + Сред(Представление,
					 10,
					 2);	
				Запрос.УстановитьПараметр("Представление", Представление1);
			ИначеЕсли СтрДлина(Представление) = 7 Тогда
				Представление1  = Сред(Представление, 1, 3) + "-" + Сред(Представление, 4, 2) + "-" + Сред(Представление, 6, 2);
				Запрос.УстановитьПараметр("Представление", Представление1);
			Иначе
				Представление1  = CRM_ПоискКонтактов.ФорматироватьНомерДляПоиска(Представление);
				Запрос.УстановитьПараметр("Представление", Представление1);
			КонецЕсли;
		КонецЕсли;		
	ИначеЕсли ТипКИ = 2 Тогда
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ИначеЕсли ТипКИ = 4 Тогда
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
	ИначеЕсли ТипКИ = 6 Тогда
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
		МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Представление, ", ");
		УсловиеДоп = "ИСТИНА";
		УсловиеДоп2 = "ИСТИНА";
		Итератор = 0;
		Для Каждого Слово Из МассивСлов Цикл
			Итератор = Итератор + 1;
			УсловиеДоп = УсловиеДоп + " И ПартнерыКонтактнаяИнформация.Представление ПОДОБНО ""%"" 
				|+ &Представление" + Строка(Итератор) + " 
				|+ ""%""";
			УсловиеДоп2 = УсловиеДоп2 
				+ " И КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление ПОДОБНО ""%"" + &Представление" 
				+ Строка(Итератор) + " 
				|+ ""%""";
			Запрос.УстановитьПараметр("Представление" + Строка(Итератор), Слово);
		КонецЦикла;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПартнерыКонтактнаяИнформация.Представление ПОДОБНО ""%"" + &Представление 
			|+ ""%""",
			 УсловиеДоп);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление ПОДОБНО ""%"" 
			|+ &Представление 
			|+ ""%""", УсловиеДоп2);
	ИначеЕсли ТипКИ = 9 Тогда // Поиск по всей КИ исключая указанные
		Если СписокТиповКИИсключая = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПартнерыКонтактнаяИнформация.Тип = &Тип", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = &Тип", "");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПартнерыКонтактнаяИнформация.Тип = &Тип",
				 "И НЕ ПартнерыКонтактнаяИнформация.Тип В (&Тип)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				 "И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = &Тип",
				 "И НЕ КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип В (&Тип)");
			Запрос.УстановитьПараметр("Тип", СписокТиповКИИсключая);
		КонецЕсли;
		МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Представление, ", ");
		УсловиеДоп = "ИСТИНА";
		УсловиеДоп2 = "ИСТИНА";
		Итератор = 0;
		Для Каждого Слово Из МассивСлов Цикл
			Итератор = Итератор + 1;
			УсловиеДоп = УсловиеДоп + " И ПартнерыКонтактнаяИнформация.Представление ПОДОБНО ""%"" 
				|+ &Представление" + Строка(Итератор) + " 
				|+ ""%""";
			УсловиеДоп2 = УсловиеДоп2 
				+ " И КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление ПОДОБНО ""%"" + &Представление" 
				+ Строка(Итератор) + " 
				|+ ""%""";
			Запрос.УстановитьПараметр("Представление" + Строка(Итератор), Слово);
		КонецЦикла;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПартнерыКонтактнаяИнформация.Представление ПОДОБНО ""%"" + &Представление 
			|+ ""%""",
			 УсловиеДоп);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление ПОДОБНО ""%"" 
			|+ &Представление 
			|+ ""%""", УсловиеДоп2);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТолькоСсылка Тогда
			МассивПартнеров.Добавить(Выборка.Ссылка);
		Иначе
			СтруктураВозврата	= Новый Структура;
			СтруктураВозврата.Вставить("Ссылка",				Выборка.Ссылка);
			СтруктураВозврата.Вставить("НаименованиеПолное",	Выборка.НаименованиеПолное);
			СтруктураВозврата.Вставить("ОсновнойМенеджер",		Выборка.ОсновнойМенеджер);
			СтруктураВозврата.Вставить("ИмяРеквизита",			Выборка.ИмяРеквизита);
			СтруктураВозврата.Вставить("Реквизит",				Выборка.Реквизит);
			МассивПартнеров.Добавить(СтруктураВозврата);
		КонецЕсли;	
	КонецЦикла;
	Возврат МассивПартнеров;
КонецФункции

Функция НайтиПартнераПоНаименованию(Наименование, Тип = 0, ТолькоСсылка = Истина) Экспорт
	МассивПартнеров	= Новый Массив();
	Если ПустаяСтрока(Наименование) Тогда
		Возврат МассивПартнеров;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование",	Наименование);
	Если ТолькоСсылка Тогда
		// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	    // Запрос с полным сканированием таблицы, разделять смсла нет
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Партнеры.Ссылка КАК Ссылка,
		|	Партнеры.НаименованиеПолное КАК НаименованиеПолное,
		|	Партнеры.ОсновнойМенеджер КАК ОсновнойМенеджер
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ
		|	(Партнеры.Наименование ПОДОБНО ""%"" + &Наименование + ""%""
		|			ИЛИ Партнеры.НаименованиеПолное ПОДОБНО ""%"" + &Наименование + ""%"")";
		// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	ИначеЕсли Тип = 0 Тогда
		Запрос.УстановитьПараметр("ИмяРеквизита",	"Наименование");
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Партнеры.Ссылка КАК Ссылка,
		|	Партнеры.НаименованиеПолное КАК НаименованиеПолное,
		|	Партнеры.ОсновнойМенеджер КАК ОсновнойМенеджер,
		|	Партнеры.Наименование КАК Реквизит,
		|	&ИмяРеквизита КАК ИмяРеквизита
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ
		|	Партнеры.Наименование ПОДОБНО ""%"" + &Наименование + ""%""";
	Иначе	
		Запрос.УстановитьПараметр("ИмяРеквизита",	"НаименованиеПолное");
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Партнеры.Ссылка КАК Ссылка,
		|	Партнеры.НаименованиеПолное КАК НаименованиеПолное,
		|	Партнеры.ОсновнойМенеджер КАК ОсновнойМенеджер,
		|	Партнеры.НаименованиеПолное КАК Реквизит,
		|	&ИмяРеквизита КАК ИмяРеквизита
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ
		|	Партнеры.НаименованиеПолное ПОДОБНО ""%"" + &Наименование + ""%""";
	КонецЕсли;	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТолькоСсылка Тогда
			МассивПартнеров.Добавить(Выборка.Ссылка);
		Иначе
			СтруктураВозврата	= Новый Структура;
			СтруктураВозврата.Вставить("Ссылка",		Выборка.Ссылка);
			СтруктураВозврата.Вставить("НаименованиеПолное",	Выборка.НаименованиеПолное);
			СтруктураВозврата.Вставить("ОсновнойМенеджер",		Выборка.ОсновнойМенеджер);
			СтруктураВозврата.Вставить("ИмяРеквизита",	Выборка.ИмяРеквизита);
			СтруктураВозврата.Вставить("Реквизит",		Выборка.Реквизит);
			МассивПартнеров.Добавить(СтруктураВозврата);
		КонецЕсли;	
	КонецЦикла;
	Возврат МассивПартнеров;
КонецФункции

Функция НайтиПартнераПоИНН(ИНН, ТолькоСсылка = Истина) Экспорт
	МассивПартнеров	= Новый Массив();
	Если ПустаяСтрока(ИНН) Тогда
		Возврат МассивПартнеров;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН",			ИНН);
	Запрос.УстановитьПараметр("ИмяРеквизита",	"ИНН");
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Партнеры.Ссылка КАК Ссылка,
		|	Партнеры.НаименованиеПолное КАК НаименованиеПолное,
		|	Партнеры.ОсновнойМенеджер КАК ОсновнойМенеджер,
		|	Партнеры.CRM_ИНН КАК Реквизит,
		|	&ИмяРеквизита КАК ИмяРеквизита
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ
		|	Партнеры.CRM_ИНН ПОДОБНО ""%"" + &ИНН + ""%""";
	Иначе // ERP, КА, УТ
		Запрос.УстановитьПараметр("ИмяРеквизита",	НСтр("ru='ИНН контрагента';en='Counterparty TIN'"));
		// BSLLS:QueryToMissingMetadata-off
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Партнеры.Ссылка КАК Ссылка,
		|	Партнеры.НаименованиеПолное КАК НаименованиеПолное,
		|	Партнеры.ОсновнойМенеджер КАК ОсновнойМенеджер,
		|	Контрагенты.ИНН КАК Реквизит,
		|	&ИмяРеквизита КАК ИмяРеквизита
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
        |		ПО Контрагенты.Партнер = Партнеры.Ссылка
		|ГДЕ
		|	Контрагенты.ИНН ПОДОБНО ""%"" + &ИНН + ""%""";
		// BSLLS:QueryToMissingMetadata-on
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТолькоСсылка Тогда
			МассивПартнеров.Добавить(Выборка.Ссылка);
		Иначе
			СтруктураВозврата	= Новый Структура;
			СтруктураВозврата.Вставить("Ссылка",		Выборка.Ссылка);
			СтруктураВозврата.Вставить("НаименованиеПолное",	Выборка.НаименованиеПолное);
			СтруктураВозврата.Вставить("ОсновнойМенеджер",		Выборка.ОсновнойМенеджер);
			СтруктураВозврата.Вставить("ИмяРеквизита",	Выборка.ИмяРеквизита);
			СтруктураВозврата.Вставить("Реквизит",		Выборка.Реквизит);
			МассивПартнеров.Добавить(СтруктураВозврата);
		КонецЕсли;	
	КонецЦикла;
	Возврат МассивПартнеров;
КонецФункции

// Определяет, есть ли в базе контрагент с таким же набором ИНН/КПП.
//
// Параметры:
//  ИНН  - Строка - ИНН контрагента.
//  КПП  - Строка - КПП контрагента.
//  ИсключаяСсылку  - СправочникСсылка.Контрагенты - контрагент, который исключается при поиске.
//
// Возвращаемое значение:
//   Булево   - Истина, если упрощенный ввод доступен, и ложь в обратном случае.
//
Функция ИННКППУжеИспользуетсяВИнформационнойБазе(ИНН, КПП, ИсключаяСсылку = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Партнеры.Ссылка КАК Ссылка,
	               |	Партнеры.Ссылка КАК Партнер,
	               |	Партнеры.Код КАК Код,
	               |	ПРЕДСТАВЛЕНИЕ(Партнеры.ОсновнойМенеджер) КАК ОсновнойМенеджер
	               |ИЗ
	               |	Справочник.Партнеры КАК Партнеры
	               |ГДЕ
	               |	Партнеры.CRM_ИНН = &ИНН
	               |	И Партнеры.CRM_КПП = &КПП
	               |	И Партнеры.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	Запрос.УстановитьПараметр("Ссылка", ИсключаяСсылку);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция проверяет есть ли дубли контакта.
//
// Параметры:
//	СтруктураОбъекта	- Структура			- Структура реквизитов контакта.
//	СтруктураПоиска		- Структура			- Структура условий поиска.
//	СписокКонтактов		- СписокЗначений	- Список полей контактной информации.
//	Контакт				- СправочникСсылка	- Контакт
//	Клиент				- СправочникСсылка	- Владелец контакта.
//
// Возвращаемое значение:
//	Булево	- Признак наличия дублей.
//
Функция ЕстьДублиКонтакта(СтруктураОбъекта, СтруктураПоиска, СписокКонтактов, Контакт, Клиент) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаОбъект",	Контакт);
	Сч = 0;
	ПервоеЗначение = Истина;
	Для Каждого КлючИЗначение Из СтруктураПоиска Цикл
		ИмяРеквизита      = КлючИЗначение.Ключ;
		СтепеньСхожести   = КлючИЗначение.Значение;
		ЗначениеРеквизита = Неопределено;
		Реквизиты = "";
		Сч = Сч + 1;
		Если СтрНайти(ИмяРеквизита, "Контакт") = 0  Тогда
			Если ТипЗнч(СтруктураОбъекта) = Тип("Структура") Тогда
				СтруктураОбъекта.Свойство(ИмяРеквизита, ЗначениеРеквизита);
			Иначе
				ЗначениеРеквизита = СтруктураОбъекта[ИмяРеквизита];
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ПервоеЗначение Тогда
				Реквизиты = "
				| ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;
			Реквизиты =  Реквизиты + "
			|ВЫБРАТЬ  
			|Данные.Ссылка" +  ?(ПервоеЗначение, " КАК Ссылка", "");
			Реквизиты = Реквизиты + "
			|,Данные." + ИмяРеквизита + ?(ПервоеЗначение, " КАК Реквизит", "");
			Реквизиты = Реквизиты + "
			|,""" + ИмяРеквизита + """" + ?(ПервоеЗначение, " КАК ИмяРеквизита", "");
			Условия  = "
			|Данные." + ИмяРеквизита + " " + СтепеньСхожести + " &" + ИмяРеквизита + Строка(Сч);
			Запрос.УстановитьПараметр(ИмяРеквизита + Строка(Сч), ?(СтепеньСхожести = "ПОДОБНО", "%" 
				+ ЗначениеРеквизита + "%",
				 ЗначениеРеквизита));
			Запрос.Текст = Запрос.Текст + Реквизиты + "
				|ИЗ Справочник.КонтактныеЛицаПартнеров КАК Данные
				|ГДЕ " + Сред(Условия, 2) + "  И НЕ Данные.Ссылка = &СсылкаНаОбъект";
			ПервоеЗначение = Ложь;
		Иначе
			Массив = Новый Массив;
			Для Каждого Стр Из СписокКонтактов Цикл
				ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "Контакт_", "");
				Если Стр.Значение = ИмяРеквизита И ЗначениеЗаполнено(Стр.Представление) Тогда
					Массив.Добавить(Стр.Представление);	
				КонецЕсли;
			КонецЦикла;
			Если Массив.Количество() > 0 Тогда
				Для Каждого Стр Из Массив Цикл
					Если НЕ ПервоеЗначение Тогда
						Реквизиты = "
						| ОБЪЕДИНИТЬ ВСЕ
						|";
					КонецЕсли;
					Реквизиты =  Реквизиты + "
					|ВЫБРАТЬ 
					|Данные.Ссылка" +  ?(ПервоеЗначение, " КАК Ссылка", "");
					Реквизиты = Реквизиты + "
					|,Данные.Представление" + ?(ПервоеЗначение, " КАК Реквизит", "");
					Реквизиты = Реквизиты + "
					|,""" + ИмяРеквизита + """" + ?(ПервоеЗначение, " КАК ИмяРеквизита", "");
					Условия  = "
					|Данные.Представление " + СтепеньСхожести + " &" + ИмяРеквизита + Строка(Сч) + "
					|И Данные.Тип = &Тип" + Строка(Сч);
					Запрос.УстановитьПараметр(ИмяРеквизита + Строка(Сч), ?(СтепеньСхожести = "ПОДОБНО", "%" + Стр + "%", Стр));
					Если ИмяРеквизита = "Телефон" Тогда 
						Запрос.УстановитьПараметр("Тип" + Строка(Сч), Перечисления.ТипыКонтактнойИнформации.Телефон);
					ИначеЕсли ИмяРеквизита = "АдресЭлектроннойПочты" Тогда 
						Запрос.УстановитьПараметр("Тип" + Строка(Сч), Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
					КонецЕсли;
					Запрос.Текст = Запрос.Текст + Реквизиты + "
						|ИЗ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК Данные
						|ГДЕ " + Сред(Условия, 2) + "  И НЕ Данные.Ссылка = &СсылкаНаОбъект";
					Сч = Сч + 1;
					ПервоеЗначение = Ложь;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЗначениеЗаполнено(Запрос.Текст) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

#КонецОбласти

#Область МеханизмыНастройкиРаботыСРеквизитами

Функция РеквизитыОтключенныеПоФО() Экспорт
	
	Результат = Новый Массив;
		
	Возврат Результат;
	
КонецФункции

Функция ЗависимостьРеквизитов() Экспорт
												
	// Сформировать таблицу реквизитов для заполнения.
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Реквизит");
	ТаблицаРеквизитов.Колонки.Добавить("ДействиеСРеквизитом");
	
	Реквизиты = Метаданные.Справочники.Партнеры.Реквизиты;	
	Для Каждого Реквизит Из Реквизиты Цикл
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.Реквизит            = Реквизит;
		НоваяСтрока.ДействиеСРеквизитом = "Добавить";

	КонецЦикла;
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

#КонецОбласти

#Область ВыводНовогоСпискаКонтактныхЛицПартнера

Процедура ИнициализацияКонтактныхЛицПартнера(Форма, ТипыКИ, ИмяРеквизитаКонтактноеЛицо = "") Экспорт
	Строка500 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
	ИмяОписания = "КонтактныеЛицаПартнера";
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("КонтактноеЛицо",
		 Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛицаПартнеров"), ИмяОписания,
		 НСтр("ru='Контактное лицо';en='Contact Person'")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Представление", Строка500, ИмяОписания,
		 НСтр("ru='Контактное лицо';en='Contact Person'")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Должность",
		 Новый ОписаниеТипов("СправочникСсылка.CRM_Должности"), ИмяОписания,
		 НСтр("ru='Должность';en='Position'")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Состояние",
		 Новый ОписаниеТипов("ПеречислениеСсылка.CRM_Состояние"), ИмяОписания,
		 НСтр("ru='Состояние';en='Status'")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Основное", Новый ОписаниеТипов("Булево"),	ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПометкаУдаления",
		 Новый ОписаниеТипов("Булево"),
			ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Доступен", Новый ОписаниеТипов("Булево"),	ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяРеквизита", Строка500,	ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Порядок", Новый ОписаниеТипов("Число",
		 Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный)),
			ИмяОписания));
	Для Каждого ТипКИ Из ТипыКИ Цикл
		ИмяРеквизита = CRM_ОбщегоНазначенияСервер.ПолучитьИмяЗначенияПеречисления(ТипКИ);
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("КИТипа" + ИмяРеквизита,
			 Новый ОписаниеТипов("Строка"), ИмяОписания, ТипКИ));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ТипКИ" + ИмяРеквизита,
			 Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"), ИмяОписания));
	КонецЦикла;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Автор",
		 Новый ОписаниеТипов("СправочникСсылка.Пользователи"),
		 ИмяОписания));
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяРеквизитаКонтактноеЛицо", Строка500));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИзмененПорядок", Новый ОписаниеТипов("Булево")));
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	Форма.ИмяРеквизитаКонтактноеЛицо = ИмяРеквизитаКонтактноеЛицо;
	
КонецПроцедуры

Процедура ВывестиКонтактныеЛицаПартнера(Форма, Партнер, ОсновнойКонтакт = Неопределено,
	 ИмяЭлементаДляРазмещения, ТипыКИ, ВыводитьВсегда = Ложь,
	 КонтактныеЛица = Неопределено) Экспорт
	
	ВыводитьКонтактов = 3;	
	ЭлементРазмещения = Форма.Элементы[ИмяЭлементаДляРазмещения];
	Если Форма.Элементы.Найти("ГруппаСписокКЛ") <> Неопределено Тогда
		Форма.CRM_ГруппаКЛПоказана = Не Форма.Элементы["ГруппаСписокКЛ"].Скрыта();
		Форма.Элементы["ГруппаСписокКЛ"].Скрыть();
	КонецЕсли;
	Пока ЭлементРазмещения.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Форма.Элементы.Удалить(ЭлементРазмещения.ПодчиненныеЭлементы[0]);
	КонецЦикла;
	Форма.КонтактныеЛицаПартнера.Очистить();
	Если НЕ ЗначениеЗаполнено(Партнер) И НЕ ВыводитьВсегда Тогда
		Возврат;
	КонецЕсли;
	Если КонтактныеЛица = Неопределено Тогда
		Если ЗначениеЗаполнено(Партнер) Тогда
			КонтактныеЛица = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактныхЛицКонтрагентаПодробно(Партнер, ТипыКИ);
			Если ЗначениеЗаполнено(ОсновнойКонтакт) Тогда
				СтрокаОсновногоКонтакта = КонтактныеЛица.Найти(ОсновнойКонтакт, "КонтактноеЛицо");
				Если СтрокаОсновногоКонтакта <> Неопределено Тогда
					СтрокаОсновногоКонтакта.Основное = Истина;
					КонтактныеЛица.Сортировать("Основное Убыв, Порядок, ПометкаУдаления");
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
			КонтактныеЛица = Новый ТаблицаЗначений;
			КонтактныеЛица.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.CRM_Должности"));
			КонтактныеЛица.Колонки.Добавить("КИТипаАдресЭлектроннойПочты", ОписаниеТипаСтрока);
			КонтактныеЛица.Колонки.Добавить("КИТипаТелефон", ОписаниеТипаСтрока);
			КонтактныеЛица.Колонки.Добавить("Представление", ОписаниеТипаСтрока);
			КонтактныеЛица.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.CRM_Состояние"));
		КонецЕсли;
		ГенерироватьТЧ = Истина;
	Иначе
		ГенерироватьТЧ = Ложь;
	КонецЕсли;
	
	ЕстьВладелец = (КонтактныеЛица.Колонки.Найти("Владелец") <> Неопределено);
	Выведено = 0;
	
	Попытка
		Если КонтактныеЛица.Колонки.Найти("ПометкаУдаления") = Неопределено Тогда
			ЕстьПометка = Ложь;
		Иначе
			ЕстьПометка = Истина;
		КонецЕсли;
	Исключение
		ЕстьПометка = Ложь;
	КонецПопытки;
	
	Если (КонтактныеЛица.Колонки.Найти("Доступен") = Неопределено) Тогда
		КонтактныеЛица.Колонки.Добавить("Доступен", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	КонтактныеЛица.Колонки.Добавить("ЕстьДопНомера", Новый ОписаниеТипов("Булево"));
	КонтактныеЛица.Колонки.Добавить("ЕстьДопАдреса", Новый ОписаниеТипов("Булево"));
	ОтобразитьКолонкуДопНомера = Ложь;
	ОтобразитьКолонкуДопАдреса = Ложь;
	
	Если КонтактныеЛица.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтЛица.КонтактноеЛицо КАК КонтактноеЛицо
		|ПОМЕСТИТЬ ВТКонтЛица
		|ИЗ
		|	&КонтЛица КАК КонтЛица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КонтактноеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТКонтЛица.КонтактноеЛицо КАК КонтактноеЛицо
		|ИЗ
		|	ВТКонтЛица КАК ВТКонтЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
		|		ПО ВТКонтЛица.КонтактноеЛицо = КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка
		|ГДЕ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТКонтЛица.КонтактноеЛицо КАК КонтактноеЛицо
		|			ИЗ
		|				ВТКонтЛица КАК ВТКонтЛица)
		|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТКонтЛица.КонтактноеЛицо
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона, НЕОПРЕДЕЛЕНО)) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТКонтЛица.КонтактноеЛицо КАК КонтактноеЛицо
		|ИЗ
		|	ВТКонтЛица КАК ВТКонтЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
		|		ПО ВТКонтЛица.КонтактноеЛицо = КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка
		|ГДЕ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТКонтЛица.КонтактноеЛицо КАК КонтактноеЛицо
		|			ИЗ
		|				ВТКонтЛица КАК ВТКонтЛица)
		|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТКонтЛица.КонтактноеЛицо
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП, НЕОПРЕДЕЛЕНО)) > 1";
		
		Запрос.УстановитьПараметр("КонтЛица", КонтактныеЛица);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ТЗЕстьДопНомера = РезультатЗапроса[1].Выгрузить();
		Если ТЗЕстьДопНомера.Количество() > 0 Тогда
			ОтобразитьКолонкуДопНомера = Истина;
		КонецЕсли;
		
		ТЗЕстьДопАдреса = РезультатЗапроса[2].Выгрузить();
		Если ТЗЕстьДопАдреса.Количество() > 0 Тогда
			ОтобразитьКолонкуДопАдреса = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (Форма.ИмяФормы = "Справочник.Партнеры.Форма.CRM_ФормаЭлементаНовая"
		Или Форма.ИмяФормы = "Справочник.Партнеры.Форма.CRM_Модуль_ФормаЭлементаРеквизитыКонтрагентаНовая")
		И Форма.КонтактныеЛицаПартнера.Выгрузить().Колонки.Найти("ЕстьДопНомера") = Неопределено Тогда
		
		НовыеРеквизиты = Новый Массив;
		НовыйРеквизит = Новый РеквизитФормы("ЕстьДопНомера", Новый ОписаниеТипов("Булево"),
			 "КонтактныеЛицаПартнера",
			 "КонтактныеЛицаПартнера.ЕстьДопНомера");
		НовыеРеквизиты.Добавить(НовыйРеквизит);
		НовыйРеквизит = Новый РеквизитФормы("ЕстьДопАдреса", Новый ОписаниеТипов("Булево"),
			 "КонтактныеЛицаПартнера",
			 "КонтактныеЛицаПартнера.ЕстьДопАдреса2");
		НовыеРеквизиты.Добавить(НовыйРеквизит);
		Форма.ИзменитьРеквизиты(НовыеРеквизиты);
		
	КонецЕсли;
	
	ВключеныОграниченияДоступа = Ложь;
	МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступом");
	Если МодульУправлениеДоступом <> Неопределено Тогда
		Если МодульУправлениеДоступом.ИспользоватьОграниченияДоступа() Тогда
			ВключеныОграниченияДоступа = Не Пользователи.ЭтоПолноправныйПользователь();
		КонецЕсли;
	КонецЕсли;
	
	Для каждого Контакт Из КонтактныеЛица Цикл
		
		Если НЕ ЗначениеЗаполнено(Контакт.КонтактноеЛицо) Тогда
			Продолжить;
		КонецЕсли;
		
		КонтактДоступен = Истина;
		Если ВключеныОграниченияДоступа Тогда
			
			МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
			Если МодульУправлениеДоступом <> Неопределено Тогда
				КонтактДоступен = Не МодульУправлениеДоступом.РазрешенТолькоБазовыйДоступ(Контакт.КонтактноеЛицо);
			КонецЕсли;
			
		КонецЕсли;
		
		Контакт.Доступен = КонтактДоступен;
		
		Контакт.ЕстьДопНомера = (ТЗЕстьДопНомера.Найти(Контакт.КонтактноеЛицо) <> Неопределено);
		Контакт.ЕстьДопАдреса = (ТЗЕстьДопАдреса.Найти(Контакт.КонтактноеЛицо) <> Неопределено);
		
	КонецЦикла;
	
	Если ВключеныОграниченияДоступа Тогда
		КонтактныеЛица.Сортировать("Доступен убыв");
	КонецЕсли;
		
	Для каждого Контакт Из КонтактныеЛица Цикл
		
		Если НЕ ЗначениеЗаполнено(Контакт.КонтактноеЛицо) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаКЛ = Форма.КонтактныеЛицаПартнера.Добавить();
		Если Контакт.Доступен Тогда
			ЗаполнитьЗначенияСвойств(СтрокаКЛ, Контакт);
		Иначе
			СтрокаКЛ.Представление = Контакт.Представление;
			СтрокаКЛ.Автор = Контакт.Автор;
		КонецЕсли;
		
		Если ЕстьПометка И Контакт.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выведено < ВыводитьКонтактов Тогда
			
			Идентификатор = СТРЗаменить(Строка(Контакт.КонтактноеЛицо.УникальныйИдентификатор()), "-", "_");
			
			Если Форма.Элементы.Найти("ГруппаКЛ" + Идентификатор) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Форма.Команды.Найти("ЭлементКЛ" + Идентификатор) = Неопределено Тогда
				Команда = Форма.Команды.Добавить("ЭлементКЛ" + Идентификатор);
				Команда.Действие = "Подключаемый_КонтактныеЛицаНажатие";
			КонецЕсли;
			
			ГруппаКЛ = Форма.Элементы.Добавить("ГруппаКЛ" + Идентификатор, Тип("ГруппаФормы"), ЭлементРазмещения);
			ГруппаКЛ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаКЛ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаКЛ.ОтображатьЗаголовок = Ложь;
			ГруппаКЛ.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
			
			ГруппаДолжность_КЛ = Форма.Элементы.Добавить("ГруппаДолжность_КЛ" + Идентификатор, Тип("ГруппаФормы"), ГруппаКЛ);
			ГруппаДолжность_КЛ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаДолжность_КЛ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаДолжность_КЛ.РастягиватьПоВертикали = Ложь;
			ГруппаДолжность_КЛ.ОтображатьЗаголовок = Ложь;
			
			ЭлементКЛ = Форма.Элементы.Добавить("ЭлементКЛ" + Идентификатор, Тип("КнопкаФормы"), ГруппаДолжность_КЛ);
			ЭлементКЛ.Заголовок = Контакт.Представление;
			ЭлементКЛ.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			ЭлементКЛ.ЦветТекста = ЦветаСтиля.CRM_ЧерныйЦветТекста;
			
			Если Контакт.Основное Тогда
				ЭлементКЛ.Шрифт = Новый Шрифт(, , Истина);
			КонецЕсли;
			ЭлементКЛ.Картинка = БиблиотекаКартинок.CRM_СтрелкаВниз;
			ЭлементКЛ.ИмяКоманды = "ЭлементКЛ" + Идентификатор;
			Если Контакт.Состояние = Перечисления.CRM_Состояние.ВременноНеРаботает
				 ИЛИ Контакт.Состояние = Перечисления.CRM_Состояние.Уволен Тогда
				ЭлементКЛ.Заголовок = ЭлементКЛ.Заголовок + " (" + Контакт.Состояние + ")";
			КонецЕсли;
			ЭлементКЛ.Доступность = Контакт.Доступен;
			
			Если ЕстьВладелец И ЗначениеЗаполнено(Контакт["Владелец"]) Тогда
				ЭлементКЛВладелец = Форма.Элементы.Добавить("ЭлементКЛВладелец" + Идентификатор,
					 Тип("ДекорацияФормы"), ГруппаДолжность_КЛ);
				ЭлементКЛВладелец.Заголовок = "(" + Контакт["Владелец"] + ")";
				ЭлементКЛВладелец.Шрифт = Новый Шрифт();
				ЭлементКЛВладелец.ЦветТекста = Новый Цвет(109, 109, 109);
			КонецЕсли;
			
			СтрокаКЛ.ИмяРеквизита = ЭлементКЛ.Имя;
			
			Если Контакт.Доступен Тогда
				
				ГруппаДолжность_КИ_КЛ = Форма.Элементы.Добавить("ГруппаДолжность_КИ_КЛ" + Идентификатор,
					 Тип("ГруппаФормы"), ГруппаКЛ);
				ГруппаДолжность_КИ_КЛ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаДолжность_КИ_КЛ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
				ГруппаДолжность_КИ_КЛ.РастягиватьПоВертикали = Ложь;
				ГруппаДолжность_КИ_КЛ.ОтображатьЗаголовок = Ложь;
				
				Если ЗначениеЗаполнено(Контакт.Должность) Тогда
					ЭлементКЛДолжность = Форма.Элементы.Добавить("ЭлементКЛДолжность" + Идентификатор,
						 Тип("ДекорацияФормы"), ГруппаДолжность_КИ_КЛ);
					ЭлементКЛДолжность.Заголовок = Контакт.Должность;
					ЭлементКЛДолжность.Шрифт = Новый Шрифт();
					ЭлементКЛДолжность.ЦветТекста = Новый Цвет(109, 109, 109);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Контакт.РольКонтактногоЛица) Тогда
					ЭлементКЛРоль = Форма.Элементы.Добавить("ЭлементКЛРоль" + Идентификатор, Тип("ДекорацияФормы"),
						 ГруппаДолжность_КИ_КЛ);
					ЭлементКЛРоль.Заголовок = Контакт.РольКонтактногоЛица;
					ЭлементКЛРоль.Шрифт = Новый Шрифт();
					ЭлементКЛРоль.ЦветТекста = Новый Цвет(109, 109, 109);
				КонецЕсли;
				
				ГруппаКИКЛ = Форма.Элементы.Добавить("ГруппаКИКЛ" + Идентификатор, Тип("ГруппаФормы"), ГруппаДолжность_КИ_КЛ);
				ГруппаКИКЛ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаКИКЛ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
				ГруппаКИКЛ.РастягиватьПоВертикали = Ложь;
				ГруппаКИКЛ.ОтображатьЗаголовок = Ложь;
				ГруппаКИКЛ.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
				
				CRM_УправлениеКонтактнойИнформацией.ВывестиКонтактнуюИнформациюОбъекта(Форма,
					 Контакт.КонтактноеЛицо, ГруппаКИКЛ.Имя,
					 ТипыКИ);
				
			КонецЕсли;
			
			Выведено = Выведено + 1;
		КонецЕсли;
			
	КонецЦикла;
	
	Если Не ГенерироватьТЧ Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаЕщеКонтакты = Форма.Элементы.Добавить("ГруппаЕщеКонтакты", Тип("ГруппаФормы"), ЭлементРазмещения);
	ГруппаЕщеКонтакты.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЕщеКонтакты.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаЕщеКонтакты.ОтображатьЗаголовок = Ложь;
	ГруппаЕщеКонтакты.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	
	Если Форма.Команды.Найти("ЭлементЕщеКонтакты") = Неопределено Тогда
		Команда = Форма.Команды.Добавить("ЭлементЕщеКонтакты");
		Команда.Действие = "Подключаемый_КонтактныеЛицаНажатие";
	КонецЕсли;
	ЭлементКЛ = Форма.Элементы.Добавить("ЭлементЕщеКонтакты", Тип("КнопкаФормы"), ГруппаЕщеКонтакты);
	Если КонтактныеЛица.Количество() > 3 Тогда
		ЭлементКЛ.Заголовок = НСтр("ru='Еще контакты +';en='More contacts +'") 
			+ Строка(КонтактныеЛица.Количество() - ВыводитьКонтактов);
	Иначе
		ЭлементКЛ.Заголовок = НСтр("ru='Добавить контакт';en='Add Contacts'");
	КонецЕсли;
	ЭлементКЛ.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	ЭлементКЛ.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
	ЭлементКЛ.Картинка = БиблиотекаКартинок.CRM_СтрелкаВниз;
	ЭлементКЛ.ИмяКоманды = "ЭлементЕщеКонтакты";
	
	ГруппаСписокКЛ = Форма.Элементы.Добавить("ГруппаСписокКЛ", Тип("ГруппаФормы"), ГруппаЕщеКонтакты);
	ГруппаСписокКЛ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСписокКЛ.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
	ГруппаСписокКЛ.Заголовок = ".";
	ГруппаСписокКЛ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаСписокКЛ.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаСписокКЛ.ЦветТекстаЗаголовка = ЦветаСтиля.CRM_СерыйДляПодложек;
	ГруппаСписокКЛ.ЦветФона = ЦветаСтиля.CRM_СерыйДляПодложек;
	ГруппаСписокКЛ.ШрифтЗаголовка = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 1, Истина);
	ГруппаСписокКЛ.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
	ГруппаСписокКЛ.РастягиватьПоГоризонтали = Ложь;
	ГруппаСписокКЛ.РастягиватьПоВертикали = Ложь;
	
	ГруппаПанельКЛ = Форма.Элементы.Добавить("ГруппаПанельКЛ", Тип("ГруппаФормы"), ГруппаСписокКЛ);
	ГруппаПанельКЛ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПанельКЛ.ОтображатьЗаголовок = Ложь;
	ГруппаПанельКЛ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	Если Форма.Команды.Найти("ДобавитьНовоеКЛ") = Неопределено Тогда
		Команда = Форма.Команды.Добавить("ДобавитьНовоеКЛ");
		Команда.Действие = "Подключаемый_КонтактныеЛицаНажатие";
	КонецЕсли;
	ЭлементКЛ = Форма.Элементы.Добавить("ДобавитьНовоеКЛ", Тип("КнопкаФормы"), ГруппаПанельКЛ);
	ЭлементКЛ.Заголовок = НСтр("ru='Добавить';en='Add'");
	ЭлементКЛ.ЦветФона = ЦветаСтиля.CRM_ОсновнойГолубой;
	ЭлементКЛ.ЦветРамки = ЭлементКЛ.ЦветФона;
	ЭлементКЛ.ЦветТекста = ЦветаСтиля.ЦветФонаПоля;
	ЭлементКЛ.Шрифт = Новый Шрифт(, , Истина);
	ЭлементКЛ.ИмяКоманды = "ДобавитьНовоеКЛ";
	ЭлементКЛ.Доступность = Не Форма.ТолькоПросмотр;
	
	Если ЗначениеЗаполнено(Форма.ИмяРеквизитаКонтактноеЛицо) Тогда
		Если Форма.Команды.Найти("СделатьКЛОсновным") = Неопределено Тогда
			Команда = Форма.Команды.Добавить("СделатьКЛОсновным");
			Команда.Действие = "Подключаемый_КонтактныеЛицаНажатие";
			Команда.ИзменяетСохраняемыеДанные = Истина;
		КонецЕсли;
		ЭлементКЛ = Форма.Элементы.Добавить("СделатьКЛОсновным", Тип("КнопкаФормы"), ГруппаПанельКЛ);
		ЭлементКЛ.Заголовок = НСтр("ru='Сделать основным';en='Make Main'");
		ЭлементКЛ.Ширина = 15;
		ЭлементКЛ.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
		ЭлементКЛ.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		ЭлементКЛ.Шрифт = Новый Шрифт(, , Истина);
		ЭлементКЛ.ИмяКоманды = "СделатьКЛОсновным";
	КонецЕсли;
	
	Если Форма.Команды.Найти("ПереместитьКЛВверх") = Неопределено Тогда
		Команда = Форма.Команды.Добавить("ПереместитьКЛВверх");
		Команда.Действие = "Подключаемый_КонтактныеЛицаНажатие";
		Команда.ИзменяетСохраняемыеДанные = Истина;
	КонецЕсли;
	ЭлементКЛ = Форма.Элементы.Добавить("ПереместитьКЛВверх", Тип("КнопкаФормы"), ГруппаПанельКЛ);
	ЭлементКЛ.Заголовок = НСтр("ru='Переместить вверх'");
	ЭлементКЛ.Картинка	= БиблиотекаКартинок.ПереместитьВверх;
	ЭлементКЛ.Отображение		= ОтображениеКнопки.Картинка;
	ЭлементКЛ.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	ЭлементКЛ.ИмяКоманды		= "ПереместитьКЛВверх";
	ЭлементКЛ.Ширина			= 3;
	ЭлементКЛ.Высота			= 1;
	ЭлементКЛ.Доступность		= (КонтактныеЛица.Количество() > 1);
	
	Если Форма.Команды.Найти("ПереместитьКЛВниз") = Неопределено Тогда
		Команда = Форма.Команды.Добавить("ПереместитьКЛВниз");
		Команда.Действие = "Подключаемый_КонтактныеЛицаНажатие";
		Команда.ИзменяетСохраняемыеДанные = Истина;
	КонецЕсли;
	ЭлементКЛ = Форма.Элементы.Добавить("ПереместитьКЛВниз", Тип("КнопкаФормы"), ГруппаПанельКЛ);
	ЭлементКЛ.Заголовок = НСтр("ru='Переместить вниз'");
	ЭлементКЛ.Картинка	= БиблиотекаКартинок.ПереместитьВниз;
	ЭлементКЛ.Отображение		= ОтображениеКнопки.Картинка;
	ЭлементКЛ.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	ЭлементКЛ.ИмяКоманды		= "ПереместитьКЛВниз";
	ЭлементКЛ.Ширина			= 3;
	ЭлементКЛ.Высота			= 1;
	ЭлементКЛ.Доступность		= (КонтактныеЛица.Количество() > 1);
	
	Если Форма.Команды.Найти("ПрименитьИзмененияКЛ") = Неопределено Тогда
		Команда = Форма.Команды.Добавить("ПрименитьИзмененияКЛ");
		Команда.Действие = "Подключаемый_КонтактныеЛицаНажатие";
	КонецЕсли;
	ЭлементКЛ = Форма.Элементы.Добавить("ПрименитьИзмененияКЛ", Тип("КнопкаФормы"), ГруппаПанельКЛ);
	ЭлементКЛ.Заголовок 		= НСтр("ru='Сохранить сортировку'");
	ЭлементКЛ.ИмяКоманды 		= "ПрименитьИзмененияКЛ";
	ЭлементКЛ.ОтображениеФигуры	= ОтображениеФигурыКнопки.Нет;
	ЭлементКЛ.ЦветТекста 		= WebЦвета.Красный;
	ЭлементКЛ.Высота			= 1;
	ЭлементКЛ.Шрифт 			= Новый Шрифт(, , Истина);
	ЭлементКЛ.Видимость			= Ложь;
	
	ЭлементСписокКЛ = Форма.Элементы.Добавить("ЭлементСписокКЛ", Тип("ТаблицаФормы"), ГруппаСписокКЛ);
	ЭлементСписокКЛ.ПутьКДанным = "КонтактныеЛицаПартнера";
	ЭлементСписокКЛ.РастягиватьПоГоризонтали = Ложь;
	ЭлементСписокКЛ.РастягиватьПоВертикали = Ложь;
	ЭлементСписокКЛ.КоманднаяПанель.Видимость = Ложь;
	ЭлементСписокКЛ.ИзменятьСоставСтрок = Ложь;
	ЭлементСписокКЛ.УстановитьДействие("Выбор", "Подключаемый_КонтактныеЛицаВыбор");
	ЭлементСписокКЛ.ИзменятьПорядокСтрок = Ложь;
	ЭлементСписокКЛ.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделенияИВыбор;
	
	Если Форма.Команды.Найти("ЭлементСписокКЛКонтекстноеПометитьНаУдаление") = Неопределено Тогда
		Команда = Форма.Команды.Добавить("ЭлементСписокКЛКонтекстноеПометитьНаУдаление");
		Команда.Действие = "Подключаемый_КонтактныеЛицаНажатие";
	КонецЕсли;
	ЭлементКЛ = Форма.Элементы.Добавить("ЭлементСписокКЛКонтекстноеПометитьНаУдаление",
		Тип("КнопкаФормы"), Форма.Элементы["ЭлементСписокКЛ"].КонтекстноеМеню);
	ЭлементКЛ.Заголовок 		= НСтр("ru='Пометить на удаление / Снять пометку'");
	ЭлементКЛ.ИмяКоманды 		= "ЭлементСписокКЛКонтекстноеПометитьНаУдаление";
	ЭлементКЛ.Картинка			= БиблиотекаКартинок.ПометитьНаУдаление;
	ЭлементКЛ.ОтображениеФигуры	= ОтображениеФигурыКнопки.Нет;
	ЭлементКЛ.ЦветТекста 		= WebЦвета.Красный;
	ЭлементКЛ.Высота			= 1;
	ЭлементКЛ.Шрифт 			= Новый Шрифт(, , Истина);
	
	Для каждого Колонка Из КонтактныеЛица.Колонки Цикл
		Если Колонка.Имя = "Основное" Тогда
			Продолжить;
		ИначеЕсли Колонка.Имя = "РольКонтактногоЛица" Тогда
			Продолжить;
		ИначеЕсли Колонка.Имя = "ПометкаУдаления" Тогда
			Продолжить;
		ИначеЕсли СтрНайти(Колонка.Имя, "ТипКИ") > 0 Тогда
			Продолжить;
		ИначеЕсли Колонка.Имя = "КонтактноеЛицо" Тогда
			Продолжить;
		ИначеЕсли Колонка.Имя = "Порядок" Тогда
			Продолжить;
		ИначеЕсли Колонка.Имя = "Доступен" Тогда
			Продолжить;
		ИначеЕсли Колонка.Имя = "Автор" Тогда
			Продолжить;
		ИначеЕсли Колонка.Имя = "ЕстьДопНомера" Тогда
			Продолжить;
		ИначеЕсли Колонка.Имя = "ЕстьДопАдреса" Тогда
			Продолжить;
		КонецЕсли;
		КолонкаСпискаКЛ = Форма.Элементы.Добавить("ЭлементСписокКЛ" + Колонка.Имя, Тип("ПолеФормы"), ЭлементСписокКЛ);
		КолонкаСпискаКЛ.Вид = ВидПоляФормы.ПолеВвода;
		КолонкаСпискаКЛ.ПутьКДанным = "КонтактныеЛицаПартнера." + Колонка.Имя;
		КолонкаСпискаКЛ.ЦветТекста = ЦветаСтиля.CRM_ЧерныйЦветТекста;
		КолонкаСпискаКЛ.ТолькоПросмотр = Истина;
	КонецЦикла;
	Для каждого ТипКИ Из ТипыКИ Цикл
		ЭлементКИТипа = Форма.Элементы.Найти("ЭлементСписокКЛКИТипа" 
			+ CRM_ОбщегоНазначенияСервер.ПолучитьИмяЗначенияПеречисления(ТипКИ));
		Если ЭлементКИТипа <> Неопределено Тогда
			ЭлементКИТипа.ГиперссылкаЯчейки = Истина;
			ЭлементКИТипа.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
		КонецЕсли;
	КонецЦикла;
	
	КолонкаСпискаКЛ = Форма.Элементы.Добавить("ЭлементСписокКЛАвтор", Тип("ПолеФормы"), ЭлементСписокКЛ);
	КолонкаСпискаКЛ.Вид = ВидПоляФормы.ПолеВвода;
	КолонкаСпискаКЛ.ПутьКДанным = "КонтактныеЛицаПартнера." + "Автор";
	КолонкаСпискаКЛ.ЦветТекста = ЦветаСтиля.CRM_ЧерныйЦветТекста;
	КолонкаСпискаКЛ.ТолькоПросмотр = Истина;
	
	КолонкаДопНомера = Форма.Элементы.Найти("ЭлементСписокКЛПоказатьДопНомера");
	Если ОтобразитьКолонкуДопНомера И КолонкаДопНомера = Неопределено Тогда
		СледующаяКолонка = Форма.Элементы.Найти("ЭлементСписокКЛКИТипаАдресЭлектроннойПочты");
		КолонкаСпискаКЛ = Форма.Элементы.Вставить("ЭлементСписокКЛПоказатьДопНомера", Тип("ПолеФормы"),
			 ЭлементСписокКЛ,
			 СледующаяКолонка);
		КолонкаСпискаКЛ.Вид = ВидПоляФормы.ПолеКартинки;
		КолонкаСпискаКЛ.ГиперссылкаЯчейки = Истина;
		КолонкаСпискаКЛ.ПутьКДанным = "КонтактныеЛицаПартнера.ЕстьДопНомера";
		КолонкаСпискаКЛ.КартинкаЗначений = БиблиотекаКартинок.CRM_ВыпадающийСписокГолубой;
		КолонкаСпискаКЛ.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		КолонкаСпискаКЛ.КартинкаШапки = БиблиотекаКартинок.CRM_ТелефонныйЗвонок;
	ИначеЕсли Не ОтобразитьКолонкуДопНомера И КолонкаДопНомера <> Неопределено Тогда
		Форма.Элементы.Удалить(КолонкаДопНомера);
	КонецЕсли;
	
	КолонкаДопАдреса = Форма.Элементы.Найти("ЭлементСписокКЛПоказатьДопАдреса");
	Если ОтобразитьКолонкуДопАдреса И КолонкаДопАдреса = Неопределено Тогда
		СледующаяКолонка = Форма.Элементы.Найти("ЭлементСписокКЛАвтор");
		КолонкаСпискаКЛ = Форма.Элементы.Вставить("ЭлементСписокКЛПоказатьДопАдреса", Тип("ПолеФормы"),
			 ЭлементСписокКЛ,
			 СледующаяКолонка);
		КолонкаСпискаКЛ.Вид = ВидПоляФормы.ПолеКартинки;
		КолонкаСпискаКЛ.ГиперссылкаЯчейки = Истина;
		КолонкаСпискаКЛ.ПутьКДанным = "КонтактныеЛицаПартнера.ЕстьДопАдреса";
		КолонкаСпискаКЛ.КартинкаЗначений = БиблиотекаКартинок.CRM_ВыпадающийСписокГолубой;
		КолонкаСпискаКЛ.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		КолонкаСпискаКЛ.КартинкаШапки = БиблиотекаКартинок.CRM_ЭлектронноеПисьмоСоздать;
	ИначеЕсли Не ОтобразитьКолонкуДопАдреса И КолонкаДопАдреса <> Неопределено Тогда
		Форма.Элементы.Удалить(КолонкаДопАдреса);
	КонецЕсли;
	
	УО = Форма.УсловноеОформление.Элементы;
	
	ЭлементУО = УО.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.CRM_СерыйДляВторостепенныхФункций);
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("ЭлементСписокКЛ");
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КонтактныеЛицаПартнера.Доступен");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = Ложь;
	
	// Для настройки триггера
	ЭлементУО = УО.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт",
		 Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 10, Истина, Ложь, Ложь,
		 Ложь));
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("ЭлементСписокКЛПредставление");
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КонтактныеЛицаПартнера.Основное");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = Истина;
	
	Если ЕстьПометка Тогда
		ЭлементУО = УО.Добавить();
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт",
			 Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 10, Ложь, Ложь, Ложь,
			 Истина));
		ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
		ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("ЭлементСписокКЛПредставление");
		ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КонтактныеЛицаПартнера.ПометкаУдаления");
		ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементУсловия.ПравоеЗначение = Истина;
	КонецЕсли;
	
	Для Каждого Элемент Из ЭлементСписокКЛ.ПодчиненныеЭлементы Цикл
			ИмяКолонки = СтрЗаменить(Элемент.Имя, "ЭлементСписокКЛ", "");
			Элемент.Ширина = 0;
			Если ИмяКолонки = "ПоказатьДопНомера" Или ИмяКолонки = "ПоказатьДопАдреса" Тогда
				Элемент.Ширина = 2;
				Продолжить;
			КонецЕсли;
			Для Каждого Строка Из КонтактныеЛица Цикл
				Элемент.Ширина = Макс(Элемент.Ширина, СтрДлина(Строка[ИмяКолонки]));
			КонецЦикла;
			Если Элемент.Ширина = 0 Тогда
				Элемент.Ширина = 10;
			КонецЕсли;
			ЭлементСписокКЛ.Ширина = ЭлементСписокКЛ.Ширина + Элемент.Ширина;
	КонецЦикла;
	
КонецПроцедуры

// Процедура сохраняет пользовательский порядок контактных лиц.
//
// Параметры:
//  СписокКЛ	- СписокЗначений	- Список контактных лиц. 
//
Процедура СохранитьПорядокКонтактов(СписокКЛ) Экспорт
	Если СписокКЛ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Клиент			= СписокКЛ[0].Значение.Владелец;
	НаборЗаписей	= РегистрыСведений.CRM_ПорядокКонтактов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Клиент.Установить(Клиент);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	ПорядковыйНомер	= 1;
	Для Каждого ЭлементСписка Из СписокКЛ Цикл
		Если ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		ЗаписьНабора			= НаборЗаписей.Добавить();
		ЗаписьНабора.Клиент		= Клиент;
		ЗаписьНабора.Контакт	= ЭлементСписка.Значение;
		ЗаписьНабора.Порядок	= ПорядковыйНомер;
		ПорядковыйНомер			= ПорядковыйНомер + 1;
	КонецЦикла;
	НаборЗаписей.Записать(Истина);
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

Процедура СвязываниеРанееПолученныхОбращений() Экспорт
	
	Возврат;
	
	// Временно отключено
	//ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.CRM_СвязыватьРанееПолученныеEmailиЗвонкиСКлиентами);
	//	
	//УстановитьПривилегированныйРежим(Истина);
	//
	//ЗаписьЖурналаРегистрации(РегистрыСведений.CRM_ИзменениеКонтактнойИнформации.СобытиеЖурналаРегистрации(), 
	//	УровеньЖурналаРегистрации.Информация, , ,
	//	НСтр("ru='Начато регламентное связывание ранее полученных писем, звонков и сообщений с потенциальными клиентами, клиентами и их контактами'"));
	//
	//РегистрыСведений.CRM_ИзменениеКонтактнойИнформации.СвязыватьРанееПолученныеEmailиЗвонкиСКлиентами();
	
КонецПроцедуры
	
#КонецОбласти

#Область ПоискВФормахСписка

Функция СтруктураДанныхКэша() Экспорт
	
	ДанныеКэша = Новый Структура;
	ДанныеКэша.Вставить("ИНН",			"");
	ДанныеКэша.Вставить("ФИО",			"");
	ДанныеКэша.Вставить("Организация",	"");
	ДанныеКэша.Вставить("Телефон",		"");
	ДанныеКэша.Вставить("Email",		"");
	ДанныеКэша.Вставить("URL",			"");
	
	Возврат ДанныеКэша;
	
КонецФункции

Функция ЭтоURL(Знач Строка) Экспорт
	
	Если СтрНайти(Строка, "https:") > 0
		Или СтрНайти(Строка, "http:") > 0 Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция НормализоватьСтрокуПоискаИДополнитьКэш(Знач СтрокаПоиска, КэшПоиска, КэшЗаполнения) Экспорт
	
	Если РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(СтрокаПоиска, Истина, "") Тогда
		
		Если Не ЗначениеЗаполнено(КэшПоиска.ИНН) Тогда
			КэшПоиска.ИНН = СтрокаПоиска;
			КэшЗаполнения.ИНН = СтрокаПоиска;
		КонецЕсли;
		
	ИначеЕсли РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(СтрокаПоиска, Ложь, "") Тогда
		
		Если Не ЗначениеЗаполнено(КэшПоиска.ИНН) Тогда
			КэшПоиска.ИНН = СтрокаПоиска;
			КэшЗаполнения.ИНН = СтрокаПоиска;
		КонецЕсли;
		
	ИначеЕсли Взаимодействия.КорректноВведенНомерТелефона(СтрокаПоиска) Тогда
		
		Если Не ЗначениеЗаполнено(КэшПоиска.Телефон) Тогда
			КэшПоиска.Телефон = CRM_ПоискКонтактов.ФорматироватьНомерДляПоиска(СтрокаПоиска);
			СтруктураКИ = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаПоиска);
			КэшЗаполнения.Телефон = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураКИ.КодСтраны,
				 СтруктураКИ.КодГорода, СтруктураКИ.НомерТелефона, "",
				 "");
		КонецЕсли;
		СтрокаПоиска = КэшПоиска.Телефон;
		
	ИначеЕсли ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(СтрокаПоиска, Истина) Тогда
		
		Если Не ЗначениеЗаполнено(КэшПоиска.Email) Тогда
			КэшПоиска.Email = СтрокаПоиска;
			КэшЗаполнения.Email = СтрокаПоиска;
		КонецЕсли;
		
	ИначеЕсли ЭтоURL(СтрокаПоиска) Тогда
		
		Если Не ЗначениеЗаполнено(КэшПоиска.URL) Тогда
			КэшПоиска.URL = СтрокаПоиска;
			КэшЗаполнения.URL = СтрокаПоиска;
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(КэшПоиска.ФИО) Тогда
			КэшПоиска.ФИО = СтрокаПоиска;
			КэшЗаполнения.ФИО = CRM_КлиентыСервер.ПривестиФИОКСтандартномуВиду(СтрокаПоиска);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(КэшПоиска.Организация) Тогда
			КэшПоиска.Организация = СтрокаПоиска;
			КэшЗаполнения.Организация = СтрокаПоиска;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПоиска;
	
КонецФункции

#КонецОбласти

#Область ДатаПоследнегоВзаимодействия

Процедура ПриЗаписиВзаимодействия(Объект) Экспорт
	
	ТипОбъекта = ТипЗнч(Объект);
	
	ДатаВзаимодействия = Объект.Дата;
	МассивКонтактов = Новый Массив;

	Если ТипОбъекта = Тип("ДокументОбъект.CRM_Взаимодействие") Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаЗавершенияВзаимодействия) Тогда
			Возврат;
		КонецЕсли;
		
		ДатаВзаимодействия = Объект.ДатаЗавершенияВзаимодействия;
		
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			ДобавитьВМассивОтсутствующий(МассивКонтактов, Объект.Партнер);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
			ДобавитьВМассивОтсутствующий(МассивКонтактов, Объект.КонтактноеЛицо);
		КонецЕсли;
		Для каждого СтороннееЛицо Из Объект.СторонниеЛица Цикл
			Если ЗначениеЗаполнено(СтороннееЛицо.Партнер) Тогда
				ДобавитьВМассивОтсутствующий(МассивКонтактов, СтороннееЛицо.Партнер);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтороннееЛицо.КонтактноеЛицо) Тогда
				ДобавитьВМассивОтсутствующий(МассивКонтактов, СтороннееЛицо.КонтактноеЛицо);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ТелефонныйЗвонок") Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
			Возврат;
		КонецЕсли;
		
		ТипЗначКонтакта = ТипЗнч(Объект.АбонентКонтакт); 
		Если ТипЗначКонтакта = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ДобавитьВМассивОтсутствующий(МассивКонтактов, Объект.АбонентКонтакт);
			Если ЗначениеЗаполнено(Объект.АбонентКонтакт.Владелец) Тогда
				ДобавитьВМассивОтсутствующий(МассивКонтактов, Объект.АбонентКонтакт.Владелец);
			КонецЕсли;
		ИначеЕсли ТипЗначКонтакта = Тип("СправочникСсылка.Партнеры") Тогда
			ДобавитьВМассивОтсутствующий(МассивКонтактов, Объект.АбонентКонтакт);
		Иначе
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ОтправительКонтакт) Тогда
			Возврат;
		КонецЕсли;
		
		ТипЗначКонтакта = ТипЗнч(Объект.ОтправительКонтакт); 
		Если ТипЗначКонтакта = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ДобавитьВМассивОтсутствующий(МассивКонтактов, Объект.ОтправительКонтакт);
			Если ЗначениеЗаполнено(Объект.ОтправительКонтакт.Владелец) Тогда
				ДобавитьВМассивОтсутствующий(МассивКонтактов, Объект.ОтправительКонтакт.Владелец);
			КонецЕсли;
		ИначеЕсли ТипЗначКонтакта = Тип("СправочникСсылка.Партнеры") Тогда
			ДобавитьВМассивОтсутствующий(МассивКонтактов, Объект.ОтправительКонтакт);
		Иначе
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
		
		Если НЕ Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено Тогда
			Возврат;
		КонецЕсли;
		
		ДатаВзаимодействия = Объект.ДатаОтправления;
		
		Для каждого Получатель Из Объект.ПолучателиПисьма Цикл
			Если НЕ ЗначениеЗаполнено(Получатель.Контакт) Тогда
				Продолжить;
			КонецЕсли;
			
			ТипЗначКонтакта = ТипЗнч(Получатель.Контакт); 
			Если ТипЗначКонтакта = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ДобавитьВМассивОтсутствующий(МассивКонтактов, Получатель.Контакт);
				Если ЗначениеЗаполнено(Получатель.Контакт.Владелец) Тогда
					ДобавитьВМассивОтсутствующий(МассивКонтактов, Получатель.Контакт.Владелец);
				КонецЕсли;
			ИначеЕсли ТипЗначКонтакта = Тип("СправочникСсылка.Партнеры") Тогда
				ДобавитьВМассивОтсутствующий(МассивКонтактов, Получатель.Контакт);
			КонецЕсли;
		КонецЦикла;

	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.CRM_СообщениеМессенджера") Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Контакт) Тогда
			Возврат;
		КонецЕсли;
		
		ТипЗначКонтакта = ТипЗнч(Объект.Контакт); 
		Если ТипЗначКонтакта = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ДобавитьВМассивОтсутствующий(МассивКонтактов, Объект.Контакт);
			Если ЗначениеЗаполнено(Объект.Контакт.Владелец) Тогда
				ДобавитьВМассивОтсутствующий(МассивКонтактов, Объект.Контакт.Владелец);
			КонецЕсли;
		ИначеЕсли ТипЗначКонтакта = Тип("СправочникСсылка.Партнеры") Тогда
			ДобавитьВМассивОтсутствующий(МассивКонтактов, Объект.Контакт);
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого Контакт Из МассивКонтактов Цикл
		РегистрыСведений.CRM_ДатыКасанийКонтактов.УстановитьДатуКасания(Контакт, НачалоДня(ДатаВзаимодействия));
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВМассивОтсутствующий(Массив, Элемент)
	
	Если Массив.Найти(Элемент) = Неопределено Тогда
		Массив.Добавить(Элемент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИсточникиПолученияИнформации
Процедура CRM_ИсточникиполученияИнформацииПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.КаналОбращения.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Менеджер = РегистрыСведений.CRM_КаналыОбращенийПоИнтересам.СоздатьМенеджерЗаписи();
	Менеджер.Интерес = Источник.Ссылка;
	Менеджер.ИсточникОбращения = Источник.ИсточникОбращения;
	Менеджер.КаналОбращения = Источник.КаналОбращения;
	Менеджер.Записать(Истина);
	
КонецПроцедуры
#КонецОбласти

#Область АвтоматическоеСозданиеКлиентаПК

Функция СоздатьКонтактВзаимодействия(Объект, ИсточникНастроек = Неопределено) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "УчетнаяЗапись") Тогда
		УчетнаяЗапись = Объект.УчетнаяЗапись;
	КонецЕсли;
	Если ИсточникНастроек = Неопределено Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "УчетнаяЗапись") Тогда
			ИсточникНастроек = Объект.УчетнаяЗапись;
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.CRM_Заявка")
			 Или ТипЗнч(Объект) = Тип("ДокументСсылка.CRM_Заявка") Тогда
			ИсточникНастроек = Объект.ИсточникПолучения;
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ТелефонныйЗвонок")
			 Или ТипЗнч(Объект) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			ИсточникНастроек = Константы.CRM_НастройкиСозданияКлиентовПриЗвонке.Получить().Получить();
			Если ИсточникНастроек = Неопределено Тогда
				ИсточникНастроек = Новый Структура;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИсточникНастроек) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
    ТипОбъекта = ТипЗнч(Объект);
	
	СтруктураЗаполнения = Новый Структура;
	Если ТипОбъекта = Тип("ДокументСсылка.CRM_Заявка") Или ТипОбъекта = Тип("ДокументОбъект.CRM_Заявка") Тогда
		
		СтруктураЗаполнения.Вставить("Организация", Объект.Организация);
		
		Если ЗначениеЗаполнено(Объект.Наименование) Тогда
			СтруктураЗаполнения.Вставить("Наименование", Объект.Наименование);
		Иначе
			Если ЗначениеЗаполнено(Объект.Телефон) Тогда
				СтруктураЗаполнения.Вставить("Наименование", Объект.Телефон);
			Иначе
				СтруктураЗаполнения.Вставить("Наименование", Объект.ЭлектроннаяПочта);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураЗаполнения.Вставить("Телефон", Объект.Телефон);
		СтруктураЗаполнения.Вставить("ЭлектроннаяПочта", Объект.ЭлектроннаяПочта);
		КомментарийШаблон = НСтр("ru = 'Создано автоматически при получении заявки %1'");
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КомментарийШаблон,
			 Формат(ТекущаяДатаСеанса(),
			 "ДФ='dd.MM.yyyy HH:mm:ss'"));
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
		 Или ТипОбъекта = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") Тогда
		Если Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Объект.ОтправительАдрес) Тогда
			Возврат Неопределено;
		КонецЕсли;
		СтруктураЗаполнения.Вставить("Наименование", Объект.ОтправительПредставление);
		СтруктураЗаполнения.Вставить("ЭлектроннаяПочта", Объект.ОтправительАдрес);
		КомментарийШаблон = НСтр("ru = 'Создано автоматически при получении электронной почты %1'");
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КомментарийШаблон,
			 Формат(ТекущаяДатаСеанса(),
			 "ДФ='dd.MM.yyyy HH:mm:ss'"));
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ТелефонныйЗвонок")
		 Или ТипОбъекта = Тип("ДокументОбъект.ТелефонныйЗвонок") Тогда
		СтруктураЗаполнения.Вставить("Наименование", Объект.АбонентКакСвязаться);
		СтруктураЗаполнения.Вставить("Телефон", Объект.АбонентКакСвязаться);
		КомментарийШаблон = НСтр("ru = 'Создано автоматически при телефонном звонке %1'");
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КомментарийШаблон,
			 Формат(ТекущаяДатаСеанса(),
			 "ДФ='dd.MM.yyyy HH:mm:ss'"));
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.CRM_Диалоги") Или ТипОбъекта = Тип("СправочникОбъект.CRM_Диалоги") Тогда
		СтруктураЗаполнения.Вставить("Наименование",
			ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Объект.КонтактПредставление));
		СтруктураЗаполнения.Вставить("Мессенджер",
			CRM_РаботаСМессенджерамиСерверПовтИсп.ПредставлениеКонтактнойИнформацииПользователя(УчетнаяЗапись,
			Объект.ID_Пользователя));
		КомментарийШаблон = НСтр("ru = 'Создано автоматически при получении сообщения %1'");
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КомментарийШаблон,
			 Формат(ТекущаяДатаСеанса(),
			 "ДФ='dd.MM.yyyy HH:mm:ss'"));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникНастроек,
		 "CRM_ВариантАвтосозданияКлиентов") Тогда
		
		Если ИсточникНастроек.CRM_ВариантАвтосозданияКлиентов = Перечисления.CRM_ВариантыАвтосозданияКлиентов.СоздаватьКлиента Тогда
		
			ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
			
			ПартнерОбъект.ОсновнойМенеджер = Объект.Ответственный;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникНастроек, "CRM_ПартнерСтатусРаботы") Тогда
				ПартнерОбъект.CRM_СтатусРаботы = ИсточникНастроек.CRM_ПартнерСтатусРаботы;
			КонецЕсли;
			Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM()
				 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникНастроек, "CRM_ПартнерГруппа") Тогда
				ПартнерОбъект.Родитель = ИсточникНастроек.CRM_ПартнерГруппа;
			КонецЕсли;
			
			ПартнерОбъект.Клиент = Истина;
			
			ПартнерОбъект.CRM_Автор = CRM_ОбщегоНазначенияПовтИсп.СлужебныйПользовательРобот();
			ПартнерОбъект.ДатаРегистрации = ТекущаяДатаСеанса();
			ПартнерОбъект.Комментарий = Комментарий;
	                                    
			Если СтруктураЗаполнения.Свойство("Организация") И ЗначениеЗаполнено(СтруктураЗаполнения.Организация) Тогда
				ПартнерОбъект.Наименование = СтруктураЗаполнения.Организация;
				ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
				ПартнерСсылка = Справочники.Партнеры.ПолучитьСсылку();
				ПартнерОбъект.УстановитьСсылкуНового(ПартнерСсылка);
				
				КЛОбъект = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
				КЛСсылка = Справочники.КонтактныеЛицаПартнеров.ПолучитьСсылку();
				КЛОбъект.УстановитьСсылкуНового(КЛСсылка);
				КЛОбъект.Владелец = ПартнерСсылка;
				КЛОбъект.Наименование = СтруктураЗаполнения.Наименование;
				КЛОбъект.Автор = ПартнерОбъект.CRM_Автор;
				КЛОбъект.ДатаРегистрацииСвязи = ПартнерОбъект.ДатаРегистрации;
				КЛОбъект.Комментарий = Комментарий;
				
				ПартнерОбъект.CRM_ОсновноеКонтактноеЛицо = КЛСсылка;
				ПартнерОбъект.Записать();
				
				ОбъектКИ = КЛОбъект;
			Иначе
				ПартнерОбъект.Наименование = СтруктураЗаполнения.Наименование;
				ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
				
				ОбъектКИ = ПартнерОбъект;
			КонецЕсли;
			
		ИначеЕсли ИсточникНастроек.CRM_ВариантАвтосозданияКлиентов = Перечисления.CRM_ВариантыАвтосозданияКлиентов.СоздаватьПК Тогда
			
			ОбъектКИ = СоздатьПККакКонтакт(СтруктураЗаполнения, Объект.Ответственный, Комментарий);
			
		ИначеЕсли ИсточникНастроек.CRM_ВариантАвтосозданияКлиентов = Перечисления.CRM_ВариантыАвтосозданияКлиентов.НеСоздавать Тогда
			Возврат Неопределено;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПотенциальныхКлиентов") Тогда

		ОбъектКИ = СоздатьПККакКонтакт(СтруктураЗаполнения, Объект.Ответственный, Комментарий);

	Иначе
		Возврат Неопределено;
	КонецЕсли;

	Если СтруктураЗаполнения.Свойство("Телефон") И ЗначениеЗаполнено(СтруктураЗаполнения.Телефон) Тогда

		Если ТипЗнч(ОбъектКИ) = Тип("СправочникОбъект.Партнеры") Тогда
			ВидКИ = Константы.CRM_ОсновнойВидТелефонаКлиента.Получить(); 
			Если Не ЗначениеЗаполнено(ВидКИ) Тогда
				ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ОбъектКИ) = Тип("СправочникОбъект.КонтактныеЛицаПартнеров") Тогда
			ВидКИ = Константы.CRM_ОсновнойВидТелефонаКонтакта.Получить(); 
			Если Не ЗначениеЗаполнено(ВидКИ) Тогда
				ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
			КонецЕсли; 
		ИначеЕсли ТипЗнч(ОбъектКИ) = Тип("СправочникОбъект.CRM_ПотенциальныеКлиенты") Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента;
		КонецЕсли;
		ТипКИ = ВидКИ.Тип;
		
		СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтруктураЗаполнения.Телефон);
		Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
			 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный,
			 "");
		ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
			ВидКИ, Комментарий);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ОбъектКИ, ДанныеКИ, ВидКИ, ТипКИ);

	КонецЕсли;
	
	Если СтруктураЗаполнения.Свойство("ЭлектроннаяПочта") И ЗначениеЗаполнено(СтруктураЗаполнения.ЭлектроннаяПочта) Тогда

		Если ТипЗнч(ОбъектКИ) = Тип("СправочникОбъект.Партнеры") Тогда
			ВидКИ = Константы.CRM_ОсновнойВидEmailКлиента.Получить(); 
			Если Не ЗначениеЗаполнено(ВидКИ) Тогда
				ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ОбъектКИ) = Тип("СправочникОбъект.КонтактныеЛицаПартнеров") Тогда
			ВидКИ = Константы.CRM_ОсновнойВидEmailКонтакта.Получить(); 
			Если Не ЗначениеЗаполнено(ВидКИ) Тогда
				ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
			КонецЕсли; 
		ИначеЕсли ТипЗнч(ОбъектКИ) = Тип("СправочникОбъект.CRM_ПотенциальныеКлиенты") Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента;
		КонецЕсли;
		ТипКИ = ВидКИ.Тип;
		
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ,
			 СтруктураЗаполнения.ЭлектроннаяПочта,
			 ВидКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ОбъектКИ, ДанныеКИ, ВидКИ, ТипКИ);

	КонецЕсли;
	
	Если СтруктураЗаполнения.Свойство("Мессенджер") И ЗначениеЗаполнено(СтруктураЗаполнения.Мессенджер) Тогда

		ВидКИ = CRM_РаботаСМессенджерамиСерверПовтИсп.ПолучитьВидКИМессенджера(УчетнаяЗапись, ОбъектКИ.Ссылка); 
		ТипКИ = ВидКИ.Тип;
		Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			СтруктураТелефона =
				сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтруктураЗаполнения.Мессенджер);
			Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
				СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "",
				"");
			ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
				ВидКИ, Комментарий);
		Иначе
			СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
			ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ,
				 СтруктураЗаполнения.Мессенджер,
				 ВидКИ);
		КонецЕсли;
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ОбъектКИ, ДанныеКИ, ВидКИ, ТипКИ);
		
	КонецЕсли;
	
	ОбъектКИ.Записать();
	
	Если ТипОбъекта = Тип("ДокументОбъект.CRM_Заявка") Тогда
		Объект.Контакт = ОбъектКИ.Ссылка;
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") Тогда
		Объект.ОтправительКонтакт = ОбъектКИ.Ссылка;
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ТелефонныйЗвонок") Тогда
		Объект.АбонентКонтакт = ОбъектКИ.Ссылка;
		Объект.АбонентПредставление = "" + ОбъектКИ.Ссылка;
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.CRM_Диалоги") Тогда
		Если ПартнерОбъект <> Неопределено Тогда
			Объект.Контакт = ПартнерОбъект.Ссылка;
			Объект.КонтактПредставление = Строка(ПартнерОбъект.Ссылка);
		Иначе
			Объект.Контакт = ОбъектКИ.Ссылка;
			Объект.КонтактПредставление = Строка(ОбъектКИ.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ИмяОпции = "ИспользоватьПартнеровКакКонтрагентов";
	Если ПартнерОбъект <> Неопределено 
		И НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM()
		И ПолучитьФункциональнуюОпцию(ИмяОпции) Тогда
		
		Контрагент = Справочники["Контрагенты"].СоздатьЭлемент();
		Контрагент.Наименование = ПартнерОбъект.Наименование;
		Контрагент.НаименованиеПолное = ПартнерОбъект.НаименованиеПолное;
		Если ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
			Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		Иначе
			Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		КонецЕсли;
		Контрагент.Партнер = ПартнерОбъект.Ссылка;
		Контрагент.Записать();
	КонецЕсли;
	
	Возврат ОбъектКИ.Ссылка;
	
КонецФункции

Функция СоздатьПККакКонтакт(СтруктураЗаполнения, Ответственный, Комментарий)
	
	ПКОбъект = Справочники.CRM_ПотенциальныеКлиенты.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(ПКОбъект, СтруктураЗаполнения);
	ПКОбъект.ОсновнойМенеджер = Ответственный;
	ПКОбъект.Автор = CRM_ОбщегоНазначенияПовтИсп.СлужебныйПользовательРобот();
	ПКОбъект.ДатаРегистрации = ТекущаяДатаСеанса();
	ПКОбъект.Комментарий = Комментарий;

	Возврат ПКОбъект;
	
КонецФункции

#КонецОбласти

#Область РаботаСЧатом

Функция УчетныеЗаписиМессенджеров(ВидКИ, ВладелецКИ, Очистка = Ложь) Экспорт
	
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// Справочники из нескольких записей.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	CRM_УчетныеЗаписиМессенджеров.Представление КАК Представление,
	|	CRM_УчетныеЗаписиМессенджеров.Ссылка КАК УчетнаяЗапись,
	|	НЕОПРЕДЕЛЕНО КАК Картинка
	|ИЗ
	|	Справочник.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ВидыКонтактнойИнформацииМессенджеров КАК ВидыКИМессенджеров
	|		ПО ВидыКИМессенджеров.ТипМессенджера = CRM_УчетныеЗаписиМессенджеров.ТипМессенджера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК РегистрCRM_УчетныеЗаписиМессенджеров
	|		ПО (CRM_УчетныеЗаписиМессенджеров.Ссылка = РегистрCRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись
	|		И РегистрCRM_УчетныеЗаписиМессенджеров.Пользователь В (&РолиПользователя))
	|ГДЕ
	|	(&ВидКИ = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)
	|			ИЛИ ВидыКИМессенджеров.ВидКИ_Клиент = &ВидКИ
	|			ИЛИ ВидыКИМессенджеров.ВидКИ_КЛ = &ВидКИ
	|			ИЛИ ВидыКИМессенджеров.ВидКИ_ПК = &ВидКИ
	|			ИЛИ ВидыКИМессенджеров.ВидКИ_Пользователь = &ВидКИ)
	|	И НЕ CRM_УчетныеЗаписиМессенджеров.ПометкаУдаления
	|	И CRM_УчетныеЗаписиМессенджеров.Включена
	|	И НЕ CRM_УчетныеЗаписиМессенджеров.Ссылка = ЗНАЧЕНИЕ(Справочник.CRM_УчетныеЗаписиМессенджеров.СистемаВзаимодействия)";
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	
	Запрос.УстановитьПараметр("ВидКИ", ?(Очистка, Справочники.ВидыКонтактнойИнформации.ПустаяСсылка(), ВидКИ));
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ТекущийПользователь);
	РолиПользователя.Добавить(ТекущийПользователь);
	Запрос.УстановитьПараметр("РолиПользователя", РолиПользователя);
	
	Результат = ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
	
	// Вставка картинок
	Для Каждого СтруктураЭлемента Из Результат Цикл
		СтруктураЭлемента.Картинка =
			CRM_РаботаСМессенджерамиСерверПовтИсп.КартинкаМессенджера(СтруктураЭлемента.УчетнаяЗапись);
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

// Дополнить Получателей чата телефонными номерами мессенджеров
Процедура ДополнитьПолучателейЧата(ПолучателиЧата, ПараметрыДополнения) Экспорт
	
	Если ПараметрыДополнения.МассивКонтактов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипыМессенджеров = CRM_РаботаСМессенджерамиСерверПовтИсп.МессенджерыСВозможностьюПисатьПервыми();
	
	ИспользуемПартнеров = Ложь;
	ИспользуемКонтакты = Ложь;
	ИспользуемПК = Ложь;
	ИспользуемПользователей = Ложь;
	Для Каждого Контакт Из ПараметрыДополнения.МассивКонтактов Цикл
		Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
			ИспользуемПартнеров = Истина;
		ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ИспользуемКонтакты = Истина;
		ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			ИспользуемПК = Истина;
		ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
			ИспользуемПользователей = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыКИМессенджеров.ВидКИ_Клиент КАК Вид,
	               |	ВидыКИМессенджеров.ТипМессенджера КАК ТипМессенджера
	               |ПОМЕСТИТЬ ВидыКИ
	               |ИЗ
	               |	РегистрСведений.CRM_ВидыКонтактнойИнформацииМессенджеров КАК ВидыКИМессенджеров
	               |ГДЕ
	               |	&ИспользуемПартнеров
	               |	И ВидыКИМессенджеров.ТипМессенджера В(&ТипыМессенджеров)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВидыКИМессенджеров.ВидКИ_КЛ,
	               |	ВидыКИМессенджеров.ТипМессенджера
	               |ИЗ
	               |	РегистрСведений.CRM_ВидыКонтактнойИнформацииМессенджеров КАК ВидыКИМессенджеров
	               |ГДЕ
	               |	&ИспользуемКонтакты
	               |	И ВидыКИМессенджеров.ТипМессенджера В(&ТипыМессенджеров)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВидыКИМессенджеров.ВидКИ_ПК,
	               |	ВидыКИМессенджеров.ТипМессенджера
	               |ИЗ
	               |	РегистрСведений.CRM_ВидыКонтактнойИнформацииМессенджеров КАК ВидыКИМессенджеров
	               |ГДЕ
	               |	&ИспользуемПК
	               |	И ВидыКИМессенджеров.ТипМессенджера В(&ТипыМессенджеров)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВидыКИМессенджеров.ВидКИ_Пользователь,
	               |	ВидыКИМессенджеров.ТипМессенджера
	               |ИЗ
	               |	РегистрСведений.CRM_ВидыКонтактнойИнформацииМессенджеров КАК ВидыКИМессенджеров
	               |ГДЕ
	               |	&ИспользуемПользователей
	               |	И ВидыКИМессенджеров.ТипМессенджера В(&ТипыМессенджеров)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтактнаяИнформация.Ссылка КАК Объект,
	               |	КонтактнаяИнформация.Тип КАК Тип,
	               |	КонтактнаяИнформация.Вид КАК Вид,
	               |	КонтактнаяИнформация.Представление КАК Представление,
	               |	КонтактнаяИнформация.Значение КАК Значение,
	               |	ВидыКИ.ТипМессенджера КАК ТипМессенджера
	               |ИЗ
	               |	Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыКИ КАК ВидыКИ
	               |		ПО КонтактнаяИнформация.Вид = ВидыКИ.Вид
	               |ГДЕ
	               |	&ИспользуемПартнеров
	               |	И КонтактнаяИнформация.Ссылка В(&МассивКонтактов)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	КонтактнаяИнформация.Ссылка,
	               |	КонтактнаяИнформация.Тип,
	               |	КонтактнаяИнформация.Вид,
	               |	КонтактнаяИнформация.Представление,
	               |	КонтактнаяИнформация.Значение,
	               |	ВидыКИ.ТипМессенджера
	               |ИЗ
	               |	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыКИ КАК ВидыКИ
	               |		ПО КонтактнаяИнформация.Вид = ВидыКИ.Вид
	               |ГДЕ
	               |	&ИспользуемКонтакты
	               |	И КонтактнаяИнформация.Ссылка В(&МассивКонтактов)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	КонтактнаяИнформация.Ссылка,
	               |	КонтактнаяИнформация.Тип,
	               |	КонтактнаяИнформация.Вид,
	               |	КонтактнаяИнформация.Представление,
	               |	КонтактнаяИнформация.Значение,
	               |	ВидыКИ.ТипМессенджера
	               |ИЗ
	               |	Справочник.CRM_ПотенциальныеКлиенты.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыКИ КАК ВидыКИ
	               |		ПО КонтактнаяИнформация.Вид = ВидыКИ.Вид
	               |ГДЕ
	               |	&ИспользуемПК
	               |	И КонтактнаяИнформация.Ссылка В(&МассивКонтактов)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	КонтактнаяИнформация.Ссылка,
	               |	КонтактнаяИнформация.Тип,
	               |	КонтактнаяИнформация.Вид,
	               |	КонтактнаяИнформация.Представление,
	               |	КонтактнаяИнформация.Значение,
	               |	ВидыКИ.ТипМессенджера
	               |ИЗ
	               |	Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыКИ КАК ВидыКИ
	               |		ПО КонтактнаяИнформация.Вид = ВидыКИ.Вид
	               |ГДЕ
	               |	&ИспользуемПользователей
	               |	И КонтактнаяИнформация.Ссылка В(&МассивКонтактов)";

	Запрос.УстановитьПараметр("МассивКонтактов", ПараметрыДополнения.МассивКонтактов);
	Запрос.УстановитьПараметр("ТипыМессенджеров", ТипыМессенджеров);
	Запрос.УстановитьПараметр("ИспользуемПартнеров", ИспользуемПартнеров);
	Запрос.УстановитьПараметр("ИспользуемКонтакты", ИспользуемКонтакты);
	Запрос.УстановитьПараметр("ИспользуемПК", ИспользуемПК);
	Запрос.УстановитьПараметр("ИспользуемПользователей", ИспользуемПользователей);
	
	ТаблицаКИ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ЭлементКИ Из ТаблицаКИ Цикл
		
		МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(ЭлементКИ.ТипМессенджера);
		
		Если ЭлементКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ЗначениеКИ = CRM_УправлениеКонтактнойИнформацией.НомерТелефонаПоЗначениюКИ(ЭлементКИ.Значение, ЭлементКИ.Тип);
		Иначе
			ЗначениеКИ = СтрЗаменить(ЭлементКИ.Представление, МодульМенеджера.НачалоАдресаСтраницыПользователя(), "");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЗначениеКИ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЕстьПолучательВСписке(ПолучателиЧата, ЗначениеКИ, ЭлементКИ.Вид) Тогда
			Продолжить;
		КонецЕсли;
		
		НаименованиеПолучателя = ЭлементКИ.Объект.Наименование;
		КонтактПолучателя = ЭлементКИ.Объект;
		
		ПолучательЧата = Новый Структура();
		ПолучательЧата.Вставить("Идентификатор", Строка(Новый УникальныйИдентификатор));
		ПолучательЧата.Вставить("Адрес", ЗначениеКИ);
		ПолучательЧата.Вставить("Представление", НаименованиеПолучателя + ", " + Строка(ЭлементКИ.Вид)
			+ ", " + ЭлементКИ.Представление);
		ПолучательЧата.Вставить("Контакт", КонтактПолучателя);
		ПолучательЧата.Вставить("УчетнаяЗапись", ПараметрыДополнения.УчетнаяЗапись);
		ПолучательЧата.Вставить("Группа", ЗначениеКИ);
		ПолучательЧата.Вставить("ВидКИ", ЭлементКИ.Вид);
		
		Если ЭлементКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ПолучательЧата.Вставить("ЭтоНомерТелефона", Истина);
		Иначе
			ПолучательЧата.Вставить("ЭтоНомерТелефона", Ложь);
		КонецЕсли;
		
		ПолучателиЧата.Добавить(ПолучательЧата);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВсеТелефоныФормы(Форма, ДополнительныеДанныеНомеровСоответствие) Экспорт
	
	МассивТелефонов = Новый Массив;
	
	ТаблицаКИ = Форма["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"].Выгрузить();
	
	СтрокиСТелефонами = ТаблицаКИ.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон));
	
	Для Каждого СтрокаСТелефоном Из СтрокиСТелефонами Цикл
			
			НомерТелефона = CRM_УправлениеКонтактнойИнформацией.НомерТелефонаПоЗначениюКИ(СтрокаСТелефоном.Значение,
				 СтрокаСТелефоном.Тип);
			
			Если НЕ ЗначениеЗаполнено(НомерТелефона) Тогда
				Продолжить;
			КонецЕсли;
			
			МассивТелефонов.Добавить(НомерТелефона);
			ДополнительныеДанныеНомеровСоответствие.Вставить(НомерТелефона, Новый Структура("ИмяРеквизита,
				| Значение, Представление, Родитель, Колонка",
					СтрокаСТелефоном.ИмяРеквизита, СтрокаСТелефоном.Значение, СтрокаСТелефоном.Представление, СтрокаСТелефоном.Родитель, СтрокаСТелефоном.Колонка));
			
	КонецЦикла;
	
	Возврат МассивТелефонов;
	
КонецФункции

// Проверяет, если ли добавляемых получатель в списке
//
// Параметры:
//  ПолучателиЧата	 - Массив	 - получатели чата
//  НомерТелефона	 - 	Строка - номер телефона добавляемого получателя
//  ВидКИ			 - СправочникаСсылка.ВидыКонтактнойИнформации	 - вид контактной информации добавляемого получателя
// 
// Возвращаемое значение:
//  Булево   - результат выполнения функции
//
Функция ЕстьПолучательВСписке(ПолучателиЧата, НомерТелефона, ВидКИ)

	Для каждого ТекСтрока Из ПолучателиЧата Цикл
		Если ТекСтрока.ВидКИ = ВидКИ И СтрНайти(ТекСтрока.Адрес, НомерТелефона) > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область РаботаСЧатом

Функция ЗапуститьДлительнуюОперацию_РасчетПроцентаЗаполнения(Ссылка, УникальныйИдентификатор) Экспорт
	
	// код запуска длительной операции посредством БСП
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Расчет показателя заполнения'");
		
	ИмяПроцедуры = 
		"CRM_КонтрольЗаполненностиРеквизитовОбъектов.РассчитатьЗаписатьПроцентЗаполненияПоОбъектам_ДляМассиваОбъектов";
	ПараметрыПроцедуры = Новый Массив;
	ПараметрыПроцедуры.Добавить(Ссылка);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

#КонецОбласти

#Область РасчетСтатусовРаботыСКлиентами

Процедура CRM_РасчетСтатусовРаботыСКлиентами(Клиент = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.CRM_РасчетСтатусовРаботыСКлиентами);
	
	УстановитьПривилегированныйРежим(Истина);

	ОписаниеОшибкиСервисы = "";
	СервисыДоступны = CRM_ЛицензированиеЭкспортныеМетоды.ПроверитьПодключениеКОтраслевымСервисам(ОписаниеОшибкиСервисы);
	Если Не СервисыДоступны Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Расчет статусов работы с клиентами'"), 
			УровеньЖурналаРегистрации.Предупреждение, , , 
			НСтр("ru = 'Внимание! Подписка 1С:КП Отраслевой отсутствует!
                  |Данный сервис недоступен для использования.'"));
		Возврат;
	КонецЕсли;
	
	НачалоРасчета = ТекущаяДатаСеанса();
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СтатусыРаботыСКлиентом.Ссылка КАК Ссылка,
	                      |	CRM_СтатусыРаботыСКлиентом.ШаблонРасчета КАК ШаблонРасчета,
	                      |	CRM_СтатусыРаботыСКлиентом.НастройкиРасчета КАК НастройкиРасчета
	                      |ИЗ
	                      |	Справочник.CRM_СтатусыРаботыСКлиентом КАК CRM_СтатусыРаботыСКлиентом
	                      |ГДЕ
	                      |	CRM_СтатусыРаботыСКлиентом.СпособУстановки = &СпособУстановки
	                      |	И CRM_СтатусыРаботыСКлиентом.ПометкаУдаления = ЛОЖЬ
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	CRM_СтатусыРаботыСКлиентом.РеквизитДопУпорядочивания");
	Запрос.УстановитьПараметр("СпособУстановки", Перечисления.CRM_СпособыУстановкиСтатусаКлиента.Автоматически);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОписаниеШаблонов = Справочники.CRM_СтатусыРаботыСКлиентом.ШаблоныРасчета();
	
	Пока Выборка.Следующий() Цикл
		ДанныеШаблона = Неопределено;
		Если Не ОписаниеШаблонов.Свойство(Выборка.ШаблонРасчета, ДанныеШаблона) Тогда
			Продолжить;
		КонецЕсли;
		Если ДанныеШаблона.СпособРасчета = "СКД" Тогда
			СКД = Справочники.CRM_СтатусыРаботыСКлиентом.ПолучитьМакет(ДанныеШаблона.Путь);
			Настройки = Выборка.НастройкиРасчета.Получить();
			Если Настройки = Неопределено Тогда
				Настройки = СКД.НастройкиПоУмолчанию;
			КонецЕсли;
			
			Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
			Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
			Компоновщик.ЗагрузитьНастройки(Настройки);
			Компоновщик.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоРасчета", НачалоРасчета);
			
			Если Клиент <> Неопределено Тогда
				ЭлементОтбораДанных = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
				ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбораДанных.ПравоеЗначение = Клиент;
				ЭлементОтбораДанных.Использование = Истина;
			КонецЕсли;
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Компоновщик.Настройки, , ,
				 Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
			
			РезультатТаблица = Новый ТаблицаЗначений();
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ПроцессорВывода.УстановитьОбъект(РезультатТаблица);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Ложь);
			
			Если РезультатТаблица.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Строка Из РезультатТаблица Цикл
				Попытка
					ТекОбъект = Строка.Ссылка.ПолучитьОбъект();
					ТекОбъект.CRM_СтатусРаботы = Выборка.Ссылка;
					ТекОбъект.Записать();
				Исключение
					Продолжить;
				КонецПопытки;
			КонецЦикла;
		Иначе
			Выполнить(ДанныеШаблона.Путь + "(Выборка.Ссылка , НачалоРасчета)");
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры


#КонецОбласти

#КонецОбласти
