//@strict-types

#Область ПрограммныйИнтерфейс

// Процедура устанавливает видимость элементов формы по массиву имен.
//
// Параметры:
//	Элементы - ВсеЭлементыФормы - Коллекция элементов формы
//	МассивВсехРеквизитов - Массив из Строка - Массив имен реквизитов, для которых устанавливается видимость
//	МассивТолькоПросмотрРеквизитов - Массив из Строка - Массив имен реквизитов, которые должны быть видны на форме.
//
Процедура УстановитьТолькоПросмотрЭлементовПоМассиву(Элементы, Знач МассивВсехРеквизитов, Знач МассивТолькоПросмотрРеквизитов) Экспорт
	
	Если ТипЗнч(МассивТолькоПросмотрРеквизитов) <> Тип("Массив") Тогда
		МассивТолькоПросмотрРеквизитов = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		ИмяРеквизита = СтрЗаменить(ЭлементМассива, ".", "");
		
		// Если реквизита нет в массиве реквизитов только просмотр, снимаем только просмотр элемента формы.
		ТолькоПросмотрРеквизита = (МассивТолькоПросмотрРеквизитов.Найти(ЭлементМассива) <> Неопределено);
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено
		 И Элементы[ИмяРеквизита].ТолькоПросмотр <> ТолькоПросмотрРеквизита Тогда
			Элементы[ИмяРеквизита].ТолькоПросмотр = ТолькоПросмотрРеквизита;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверить установить значение списка выбора.
// 
// Параметры:
//  Объект - см. Справочник.ВидыРетроБонусовКлиентов.Форма.ФормаЭлемента.Объект
//  ПутьКРеквизиту - Строка - Путь к реквизиту объекта формы, хранящего значение 
//  ДопустимыеЗначения - Массив из ПеречислениеСсылка - Массив допустимых значений для реквизита 
//
Процедура ПроверитьУстановитьЗначениеСпискаВыбора(Объект, Знач ПутьКРеквизиту, Знач ДопустимыеЗначения) Экспорт
	
	ТекущееЗначение = Объект[ПутьКРеквизиту]; // ПеречислениеСсылка
	
	Если ДопустимыеЗначения.Количество() = 0 Тогда
		
		Объект[ПутьКРеквизиту] = Неопределено;
		 
	ИначеЕсли ДопустимыеЗначения.Найти(ТекущееЗначение) = Неопределено Тогда
		
		Объект[ПутьКРеквизиту] = ДопустимыеЗначения[0];
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры для формирования списка доступных показателей товаров
//
// Возвращаемое значение:
//  Структура - Новые параметры доступных показателей товаров:
//	* БезРасчета - Булево - 
//	* ТипБонуса - ПеречислениеСсылка.ТипыРетроБонусовПоставщиков - 
//
Функция НовыеПараметрыДоступныхПоказателейТоваров() Экспорт
	
	НовыеПараметры = Новый Структура;
	НовыеПараметры.Вставить("БезРасчета", Ложь);
	НовыеПараметры.Вставить(
		"ТипБонуса",
		ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.ПустаяСсылка"));
	
	Возврат НовыеПараметры;
	
КонецФункции

// Доступный список показателей продаж
//
// Параметры:
// 	Параметры - см. НовыеПараметрыДоступныхПоказателейТоваров
// 	  
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам
//
Функция ДоступныйСписокПоказателейТоваров(Параметры) Экспорт
	
	БезРасчета = Параметры.БезРасчета;
	ТипБонуса = Параметры.ТипБонуса;
	
	Значения = Новый Массив; // Массив из ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам
	
	Если БезРасчета Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.НеИспользуется"));
		
	ИначеЕсли ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Закупки")
		  ИЛИ ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Продажи") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.НеИспользуется"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.Количество"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.КоличествоСовокупно"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.ПакетноеПредложение"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.Сумма"));
		
	Иначе
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.НеИспользуется"));
		
	КонецЕсли;
	
	Возврат Значения;
	
КонецФункции

// Параметры для формирования списка доступных баз расчета продаж
//
// Возвращаемое значение:
//  Структура - Новые параметры доступных баз расчета продаж:
//	* БезРасчета - Булево - 
//	* ПоказательТоваров - ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам -
//	* ТипБонуса - ПеречислениеСсылка.ТипыРетроБонусовПоставщиков, Неопределено - для видов ретро-бонусов поставщиков, иначе - Неопределено
//
Функция НовыеПараметрыДоступныхБазРасчетаРетроБонусов() Экспорт
	
	НовыеПараметры = Новый Структура;
	НовыеПараметры.Вставить("БезРасчета", Ложь);
	НовыеПараметры.Вставить(
		"ПоказательТоваров",
		ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.ПустаяСсылка"));
	НовыеПараметры.Вставить(
		"ТипБонуса",
		Неопределено);
	
	Возврат НовыеПараметры;
	
КонецФункции

// Доступный список состава участников по виду ретро-бонуса
//
// Параметры:
// 	Параметры - см. НовыеПараметрыДоступныхБазРасчетаРетроБонусов
// 	  
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.БазыРасчетаРетроБонусов
//
Функция ДоступныйСписокБазРасчетаРетроБонусов(Параметры) Экспорт
	
	БезРасчета = Параметры.БезРасчета;
	ПоказательТоваров = Параметры.ПоказательТоваров;
	ТипБонуса = Параметры.ТипБонуса;
	
	Значения = Новый Массив; // Массив из ПеречислениеСсылка.БазыРасчетаРетроБонусов
	
	Если БезРасчета
	 ИЛИ ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Остатки") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.БазыРасчетаРетроБонусов.ПустаяСсылка"));
		
	ИначеЕсли ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Закупки") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.БазыРасчетаРетроБонусов.СуммаЗакупкиРегУчет"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.БазыРасчетаРетроБонусов.СуммаЗакупкиВзаиморасчеты"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.БазыРасчетаРетроБонусов.СуммаЗакупкиБазовыеЦены"));
		
	ИначеЕсли ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Продажи") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.БазыРасчетаРетроБонусов.ВыручкаРеглУчет"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.БазыРасчетаРетроБонусов.ВыручкаБазовыеЦены"));
		
	ИначеЕсли ПоказательТоваров = ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.Сумма") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.БазыРасчетаРетроБонусов.ВыручкаУпрУчет"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.БазыРасчетаРетроБонусов.ВыручкаРеглУчет"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.БазыРасчетаРетроБонусов.ВыручкаБазовыеЦены"));
		
	ИначеЕсли ПоказательТоваров = ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.Количество")
		  ИЛИ ПоказательТоваров = ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.КоличествоСовокупно")
		  ИЛИ ПоказательТоваров = ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.ПакетноеПредложение")
		  ИЛИ ПоказательТоваров = ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.НеИспользуется") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.БазыРасчетаРетроБонусов.ВыручкаУпрУчет"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.БазыРасчетаРетроБонусов.ВыручкаРеглУчет"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.БазыРасчетаРетроБонусов.ВыручкаВзаиморасчеты"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.БазыРасчетаРетроБонусов.ВыручкаБазовыеЦены"));
		
	Иначе
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.БазыРасчетаРетроБонусов.ПустаяСсылка"));
		
	КонецЕсли;
	
	Возврат Значения;
	
КонецФункции

// Параметры для формирования списка доступных порядков указания товаров
// 
// Возвращаемое значение:
//  Структура - Новые параметры доступных порядков указания товаров:
//	* БезРасчета - Булево - 
//	* ПоказательТоваров - ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам -
//	* БазаРасчета - ПеречислениеСсылка.БазыРасчетаРетроБонусов -
//	* ИспользоватьСегментыНоменклатуры - Булево -
//	* ТипБонуса - ПеречислениеСсылка.ТипыРетроБонусовПоставщиков, Неопределено - для видов ретро-бонусов поставщиков, иначе Неопределено 
// 
Функция НовыеПараметрыДоступныхСоставовТоваров() Экспорт
	
	НовыеПараметры = Новый Структура;
	НовыеПараметры.Вставить("БезРасчета", Ложь);
	НовыеПараметры.Вставить(
		"ПоказательТоваров",
		ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.ПустаяСсылка"));
	НовыеПараметры.Вставить(
		"БазаРасчета",
		ПредопределенноеЗначение("Перечисление.БазыРасчетаРетроБонусов.ПустаяСсылка"));
	НовыеПараметры.Вставить("ИспользоватьСегментыНоменклатуры", Ложь);
	НовыеПараметры.Вставить(
		"ТипБонуса",
		Неопределено);
	
	Возврат НовыеПараметры;
	
КонецФункции

// Доступный список состава товаров по виду ретро-бонуса
// 
// Параметры:
// 	Параметры - см. НовыеПараметрыДоступныхСоставовТоваров
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СоставыТоваровРетроБонусов
//
Функция ДоступныйСписокСоставТоваров(Параметры) Экспорт
	
	БезРасчета = Параметры.БезРасчета;
	ТипБонуса = Параметры.ТипБонуса;
	ПоказательТоваров = Параметры.ПоказательТоваров;
	БазаРасчета = Параметры.БазаРасчета;
	
	Значения = Новый Массив; // Массив из ПеречислениеСсылка.СоставыТоваровРетроБонусов
	
	Если БезРасчета Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыТоваровРетроБонусов.ПустаяСсылка"));
		
	ИначеЕсли ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Остатки")
		  ИЛИ ПоказательТоваров = ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.Количество")
		  ИЛИ ПоказательТоваров = ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.КоличествоСовокупно")
		  ИЛИ ПоказательТоваров = ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.ПакетноеПредложение")
		  ИЛИ БазаРасчета = ПредопределенноеЗначение("Перечисление.БазыРасчетаРетроБонусов.ВыручкаБазовыеЦены")
		  ИЛИ БазаРасчета = ПредопределенноеЗначение("Перечисление.БазыРасчетаРетроБонусов.СуммаЗакупкиБазовыеЦены") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыТоваровРетроБонусов.Номенклатура"));
		
	Иначе
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыТоваровРетроБонусов.Номенклатура"));
		Если Параметры.ИспользоватьСегментыНоменклатуры Тогда
			Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыТоваровРетроБонусов.СегментыНоменклатуры"));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Значения;
	
КонецФункции

// Параметры для формирования списка доступных отборов товаров
//
// Возвращаемое значение:
//  Структура - Новые параметры доступных отборов товаров:
//	* БезРасчета - Булево - 
//	* ПоказательТоваров - ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам - 
//	* БазаРасчета - ПеречислениеСсылка.БазыРасчетаРетроБонусов - 
//	* СоставТоваров - ПеречислениеСсылка.СоставыТоваровРетроБонусов -
//	* ТипБонуса - ПеречислениеСсылка.ТипыРетроБонусовПоставщиков, Неопределено - для видов ретро-бонусов поставщиков, иначе - Неопределено
//
Функция НовыеПараметрыДоступныхОтборовТоваров() Экспорт
	
	НовыеПараметры = Новый Структура;
	НовыеПараметры.Вставить("БезРасчета", Ложь);
	НовыеПараметры.Вставить(
		"ПоказательТоваров",
		ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.ПустаяСсылка"));
	НовыеПараметры.Вставить(
		"БазаРасчета",
		ПредопределенноеЗначение("Перечисление.БазыРасчетаРетроБонусов.ПустаяСсылка"));
	НовыеПараметры.Вставить(
		"СоставТоваров",
		ПредопределенноеЗначение("Перечисление.СоставыТоваровРетроБонусов.ПустаяСсылка"));
	НовыеПараметры.Вставить("ТипБонуса", Неопределено);
	
	Возврат НовыеПараметры;
	
КонецФункции

// Доступный список состава участников по виду ретро-бонуса
// 
// Параметры:
// 	Параметры - см. НовыеПараметрыДоступныхОтборовТоваров
// 	  
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СоставыСписковРетроБонусов
//
Функция ДоступныйСписокОтборТоваров(Параметры) Экспорт
	
	БезРасчета = Параметры.БезРасчета;
	БазаРасчета = Параметры.БазаРасчета;
	ПоказательТоваров = Параметры.ПоказательТоваров;
	СоставТоваров = Параметры.СоставТоваров;
	ТипБонуса = Параметры.ТипБонуса;
	
	Значения = Новый Массив; // Массив из ПеречислениеСсылка.СоставыСписковРетроБонусов
	
	Если БезРасчета Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.ПустаяСсылка"));
		
	ИначеЕсли СоставТоваров = ПредопределенноеЗначение("Перечисление.СоставыТоваровРетроБонусов.СегментыНоменклатуры") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Выбранные"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.КромеВыбранных"));
		
	ИначеЕсли БазаРасчета = ПредопределенноеЗначение("Перечисление.БазыРасчетаРетроБонусов.ВыручкаБазовыеЦены")
		  ИЛИ (ПоказательТоваров <> ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.НеИспользуется")
			  И ПоказательТоваров <> ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.Сумма"))
		  ИЛИ ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Остатки") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Выбранные"));
		
	Иначе
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Все"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Выбранные"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.КромеВыбранных"));
		
	КонецЕсли;
	
	Возврат Значения;
	
КонецФункции

// Параметры для формирования списка доступных отборов товаров
// 
// Возвращаемое значение:
//  Структура - Новые параметры доступных отборов товаров:
//	* БезРасчета - Булево - 
//	* ИспользоватьСегментыПартнеров - Булево -
//	* ТипБонуса - ПеречислениеСсылка.ТипыРетроБонусовПоставщиков, Неопределено - для видов ретро-бонусов поставщиков, иначе Неопределено 
//	* ИспользоватьДоговоры - Булево -
//	* ИспользоватьТиповыеСоглашения - Булево -
//	* ИспользоватьИндивидуальныеСоглашения - Булево -
// 
Функция НовыеПараметрыДоступныхСоставовУчастников() Экспорт
	
	НовыеПараметры = Новый Структура;
	НовыеПараметры.Вставить("БезРасчета", Ложь);
	НовыеПараметры.Вставить("ИспользоватьСегментыПартнеров", Ложь);
	НовыеПараметры.Вставить("ИспользоватьДоговоры", Ложь);
	НовыеПараметры.Вставить("ИспользоватьТиповыеСоглашения", Ложь);
	НовыеПараметры.Вставить("ИспользоватьИндивидуальныеСоглашения", Ложь);
	НовыеПараметры.Вставить(
		"ТипБонуса",
		Неопределено);
	
	Возврат НовыеПараметры;
	
КонецФункции

// Доступный список состава участников по виду ретро-бонуса
// 
// Параметры:
// 	Параметры - см. НовыеПараметрыДоступныхСоставовУчастников
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СоставыУчастниковРетроБонусов
//
Функция ДоступныйСписокСоставУчастников(Параметры) Экспорт
	
	ТипБонуса = Параметры.ТипБонуса;
	
	Значения = Новый Массив; // Массив из ПеречислениеСсылка.СоставыУчастниковРетроБонусов
	
	Если ТипБонуса = Неопределено Тогда
		
		Если Параметры.БезРасчета Тогда
			
			Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Контрагенты"));
			Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Клиенты"));
			
		Иначе
			
			Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Контрагенты"));
			Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.ИНН"));
			Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Клиенты"));
			Если Параметры.ИспользоватьСегментыПартнеров Тогда
				
				Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.СегментыПартнеров"));
				
			КонецЕсли;
			
			Если Параметры.ИспользоватьДоговоры Тогда
				
				Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Договоры"));
				
			КонецЕсли;
			
			Если Параметры.ИспользоватьТиповыеСоглашения
			 ИЛИ Параметры.ИспользоватьИндивидуальныеСоглашения Тогда
				
				Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Соглашения"));
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Продажи") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Контрагенты"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.ИНН"));
		
	Иначе
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.ПустаяСсылка"));
	
	КонецЕсли;
	
	Возврат Значения;
	
КонецФункции

// Параметры для формирования списка доступных отборов товаров
// 
// Возвращаемое значение:
//  Структура - Новые параметры доступных отборов товаров:
//	* БезРасчета - Булево - 
//	* СоставУчастников - ПеречислениеСсылка.СоставыУчастниковРетроБонусов - 
// 
Функция НовыеПараметрыДоступныхОтборовУчастников() Экспорт
	
	НовыеПараметры = Новый Структура;
	НовыеПараметры.Вставить("БезРасчета", Ложь);
	НовыеПараметры.Вставить(
		"СоставУчастников",
		ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.ПустаяСсылка"));
	
	Возврат НовыеПараметры;
	
КонецФункции

// Доступный список отбора участников по виду ретро-бонуса
// 
// Параметры:
//	Параметры - см. НовыеПараметрыДоступныхОтборовУчастников
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СоставыСписковРетроБонусов
//
Функция ДоступныйСписокОтбораУчастников(Параметры) Экспорт
	
	БезРасчета = Параметры.БезРасчета;
	СоставУчастников = Параметры.СоставУчастников;
	
	Значения = Новый Массив; // Массив из ПеречислениеСсылка.СоставыСписковРетроБонусов
	
	Если СоставУчастников = ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Договоры")
	 ИЛИ СоставУчастников = ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Соглашения") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Выбранные"));
	
	ИначеЕсли СоставУчастников = ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.СегментыПартнеров") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Выбранные"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.КромеВыбранных"));
		
	ИначеЕсли БезРасчета Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Выбранные"));
		
	Иначе
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Все"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Выбранные"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.КромеВыбранных"));
		
	КонецЕсли;
	
	Возврат Значения;
	
КонецФункции

// Параметры для формирования списка доступных периодичностей начислений
// 
// Возвращаемое значение:
//  Структура - Новые параметры доступных отборов товаров:
//	* ПоказательТоваров - ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам -
//	* ПериодичностьУсловий - ПеречислениеСсылка.ПериодичностиРетроБонусов -
//	* ТипБонуса - ПеречислениеСсылка.ТипыРетроБонусовПоставщиков, Неопределено - для видов ретро-бонусов поставщиков, иначе Неопределено
// 
Функция НовыеПараметрыДоступныхПериодичностейНачислений() Экспорт
	
	НовыеПараметры = Новый Структура;
	НовыеПараметры.Вставить(
		"ПоказательТоваров",
		ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.НеИспользуется"));
	НовыеПараметры.Вставить(
		"ПериодичностьУсловий",
		ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.ПустаяСсылка"));
	НовыеПараметры.Вставить(
		"ТипБонуса",
		Неопределено);
		
	Возврат НовыеПараметры;
	
КонецФункции

// Доступный список отбора участников по виду ретро-бонуса
// 
// Параметры:
//	Параметры - см. НовыеПараметрыДоступныхПериодичностейНачислений
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ПериодичностиРетроБонусов
//
Функция ДоступныйСписокПериодичностьНачислений(Параметры) Экспорт
	
	ПоказательТоваров = Параметры.ПоказательТоваров;
	ПериодичностьУсловий = Параметры.ПериодичностьУсловий;
	
	Значения = Новый Массив; // Массив из ПеречислениеСсылка.ПериодичностиРетроБонусов
	
	Если Параметры.ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Остатки") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.ПустаяСсылка"));
		
	ИначеЕсли ПоказательТоваров = ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.НеИспользуется") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Однократно"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.День"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Неделя"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Месяц"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Квартал"));
		
	ИначеЕсли ПериодичностьУсловий = ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Неделя") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Однократно"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Неделя"));
		
	ИначеЕсли ПериодичностьУсловий = ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Квартал") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Однократно"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Квартал"));
		
	ИначеЕсли ПериодичностьУсловий = ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Месяц") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Однократно"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Месяц"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Квартал"));
		
	ИначеЕсли ПериодичностьУсловий = ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.День") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Однократно"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.День"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Неделя"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Месяц"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Квартал"));
		
	ИначеЕсли ПериодичностьУсловий = ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.ВесьПериод")
		  ИЛИ ПериодичностьУсловий = ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.ПустаяСсылка") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Однократно"));
		
	Иначе
		
		ШаблонТекста = НСтр("ru = 'Недопустимое значение ""%1"" %2 в %3'");
		ИмяРеквизита = "Объект.ПериодичностьУсловий";
		ИмяОбщегоМодуля = "РетроБонусыКлиентСервер.ДоступныйСписокПериодичностьНачислений";
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста,
			Строка(ПериодичностьУсловий),
			ИмяРеквизита,
			ИмяОбщегоМодуля);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Возврат Значения;
	
КонецФункции

// Возвращает заголовок страницы по переданным настройкам состава и отбора
// 
// Параметры:
//  СоставСписка - ПеречислениеСсылка.СоставыТоваровРетроБонусов, ПеречислениеСсылка.СоставыУчастниковРетроБонусов -
//  ОтборСписка - ПеречислениеСсылка.СоставыСписковРетроБонусов -
//  БонусПоставщиков - Булево - признак обработки по поставщикам
// 
// Возвращаемое значение:
//  Строка - Заголовок страницы по настройкам
//
Функция ЗаголовокСтраницыПоНастройкам(СоставСписка, ОтборСписка, БонусПоставщиков = Ложь) Экспорт
	
	ЗаголовокСтраницы = "";
	ВыбранныеЗначения = ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Выбранные");
	КромеВыбранных = ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.КромеВыбранных");
	
	#Область СоставыТоваровРетроБонусов_Номенклатура
	Если СоставСписка = ПредопределенноеЗначение("Перечисление.СоставыТоваровРетроБонусов.Номенклатура") Тогда
		
		Если ОтборСписка = ВыбранныеЗначения Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Выбранные товары'");
			
		ИначеЕсли ОтборСписка = КромеВыбранных Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Кроме товаров'");
			
		Иначе
			
			ЗаголовокСтраницы = НСтр("ru = 'Товары'");
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область СоставыТоваровРетроБонусов_СегментыНоменклатуры
	Если СоставСписка = ПредопределенноеЗначение("Перечисление.СоставыТоваровРетроБонусов.СегментыНоменклатуры") Тогда
		
		Если ОтборСписка = ВыбранныеЗначения Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Выбранные сегменты товаров'");
			
		ИначеЕсли ОтборСписка = КромеВыбранных Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Кроме сегментов товаров'");
			
		Иначе
			
			ЗаголовокСтраницы = НСтр("ru = 'Сегменты товаров'");
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область СоставыУчастниковРетроБонусов_Контрагенты
	Если СоставСписка = ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Контрагенты") Тогда
		
		Если БонусПоставщиков Тогда
			
			Если ОтборСписка = ВыбранныеЗначения Тогда
				
				ЗаголовокСтраницы = НСтр("ru = 'Клиенты: выбранные контрагенты'");
				
			ИначеЕсли ОтборСписка = КромеВыбранных Тогда
				
				ЗаголовокСтраницы = НСтр("ru = 'Клиенты: кроме контрагентов'");
				
			Иначе
				
				ЗаголовокСтраницы = НСтр("ru = 'Клиенты'");
				
			КонецЕсли;
			
		ИначеЕсли ОтборСписка = ВыбранныеЗначения Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Выбранные контрагенты'");
			
		ИначеЕсли ОтборСписка = КромеВыбранных Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Кроме контрагентов'");
			
		Иначе
			
			ЗаголовокСтраницы = НСтр("ru = 'Контрагенты'");
			
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	#Область СоставыУчастниковРетроБонусов_Клиенты
	Если СоставСписка = ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Клиенты") Тогда
		
		Если ОтборСписка = ВыбранныеЗначения Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Выбранные клиенты'");
			
		ИначеЕсли ОтборСписка = КромеВыбранных Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Кроме клиентов'");
			
		Иначе
			
			ЗаголовокСтраницы = НСтр("ru = 'Клиенты'");
			
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	#Область СоставыУчастниковРетроБонусов_ИНН
	Если СоставСписка = ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.ИНН") Тогда
		
		Если БонусПоставщиков Тогда
			
			Если ОтборСписка = ВыбранныеЗначения Тогда
				
				ЗаголовокСтраницы = НСтр("ru = 'Клиенты: выбранные ИНН'");
				
			ИначеЕсли ОтборСписка = КромеВыбранных Тогда
				
				ЗаголовокСтраницы = НСтр("ru = 'Клиенты: кроме ИНН'");
				
			Иначе
				
				ЗаголовокСтраницы = НСтр("ru = 'Клиенты'");
				
			КонецЕсли;
			
		ИначеЕсли ОтборСписка = ВыбранныеЗначения Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Выбранные ИНН'");
			
		ИначеЕсли ОтборСписка = КромеВыбранных Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Кроме ИНН'");
			
		Иначе
			
			ЗаголовокСтраницы = НСтр("ru = 'ИНН'");
			
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	#Область СоставыУчастниковРетроБонусов_СегментыПартнеров
	Если СоставСписка = ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.СегментыПартнеров") Тогда
		
		Если ОтборСписка = ВыбранныеЗначения Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Выбранные сегменты клиентов'");
			
		ИначеЕсли ОтборСписка = КромеВыбранных Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Кроме сегментов клиентов'");
			
		Иначе
			
			ЗаголовокСтраницы = НСтр("ru = 'Сегменты клиентов'");
			
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	Возврат ЗаголовокСтраницы;
	
КонецФункции

// Возвращает заголовок для страницы Склады по переданной настройке состава списков
// 
// Параметры:
//  ОтборСкладов - ПеречислениеСсылка.СоставыСписковРетроБонусов -
// 
// Возвращаемое значение:
//  Строка - Заголовок страницы по настройкам
//
Функция ЗаголовокСтраницыСклады(ОтборСкладов) Экспорт
	
	ВыбранныеЗначения = ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Выбранные");
	КромеВыбранных = ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.КромеВыбранных");
	
	Если ОтборСкладов = ВыбранныеЗначения Тогда
			
		ЗаголовокСтраницы = НСтр("ru = 'Выбранные склады'");
		
	ИначеЕсли ОтборСкладов = КромеВыбранных Тогда
		
		ЗаголовокСтраницы = НСтр("ru = 'Кроме складов'");
		
	Иначе
		
		ЗаголовокСтраницы = НСтр("ru = 'Склады'");
		
	КонецЕсли;
	
	Возврат ЗаголовокСтраницы;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  ПоказательТоваров - ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам
// 
// Возвращаемое значение:
//  Булево
//
Функция ИспользуетсяПериодУсловийТоваров(ПоказательТоваров) Экспорт
	
	Результат = Истина;
	
	Если ПоказательТоваров = ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.КоличествоСовокупно")
	 ИЛИ ПоказательТоваров = ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.ПакетноеПредложение") Тогда
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  Параметры - Структура:
// * Валюта - СправочникСсылка.Валюты - 
// * КурсЧислитель - Число - 
// * КурсЗнаменатель - Число - 
// * ВалютаВзаиморасчетов - СправочникСсылка.Валюты -
//  Сумма - Число -
// 	ВалютаРеглУчета - СправочникСсылка.Валюты -  
// 
// Возвращаемое значение:
//  Число
//
Функция ПересчитатьСуммуВзаиморасчетовВСтроке(Параметры, Знач Сумма, ВалютаРеглУчета) Экспорт
	
	СуммаВзаиморасчетов = 0;
	
	Если Параметры.Валюта = ВалютаРеглУчета
	   И Параметры.ВалютаВзаиморасчетов <> ВалютаРеглУчета Тогда
		
		ЧислительВалютыВзаиморасчетов = Параметры.КурсЧислитель;
		ЗнаменательВалютыВзаиморасчетов = Параметры.КурсЗнаменатель;
		ЧислительВалютыДокумента = 1;
		ЗнаменательВалютыДокумента = 1;
		
	Иначе
		
		ЧислительВалютыДокумента = Параметры.КурсЧислитель;
		ЗнаменательВалютыДокумента = Параметры.КурсЗнаменатель;
		ЧислительВалютыВзаиморасчетов = 1;
		ЗнаменательВалютыВзаиморасчетов = 1;
		
	КонецЕсли;
	
	Если Параметры.Валюта = Параметры.ВалютаВзаиморасчетов Тогда
		
		СуммаВзаиморасчетов = Сумма;
		
	ИначеЕсли Параметры.ВалютаВзаиморасчетов = ВалютаРеглУчета
		  ИЛИ Параметры.Валюта = ВалютаРеглУчета Тогда
		
		ПараметрыВалютыДок = Новый Структура("Валюта, КурсЧислитель, КурсЗнаменатель",
			Параметры.Валюта, ЧислительВалютыДокумента, ЗнаменательВалютыДокумента);
		ПараметрыВалютыВР  = Новый Структура("Валюта, КурсЧислитель, КурсЗнаменатель",
			Параметры.ВалютаВзаиморасчетов, ЧислительВалютыВзаиморасчетов, ЗнаменательВалютыВзаиморасчетов);
		
		СуммаВзаиморасчетов = РаботаСКурсамиВалютУТКлиентСервер.ПересчитатьПоКурсу(
			Сумма, ПараметрыВалютыДок, ПараметрыВалютыВР);
		
	Иначе
		
		Если ЧислительВалютыДокумента = 0
		 ИЛИ ЗнаменательВалютыДокумента = 0 Тогда
			
			СуммаВзаиморасчетов = 0;
			
		Иначе
			
			СуммаВзаиморасчетов = Сумма * ЧислительВалютыДокумента / ЗнаменательВалютыДокумента;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СуммаВзаиморасчетов;
	
КонецФункции

// Параметры:
//  ПорядокРаспределения - ПеречислениеСсылка.ПорядкиРаспределенияРетроБонусов -
//  БезРасчета - Булево -
//  ТипБонуса - ПеречислениеСсылка.ТипыРетроБонусовПоставщиков -
//  ПоказательТоваров - ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам -
//  БазаРасчета - ПеречислениеСсылка.БазыРасчетаРетроБонусов -
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ПорядкиРаспределенияРетроБонусов
//
Функция ПроверитьСброситьПорядокРаспределения(ПорядокРаспределения, БезРасчета, ТипБонуса, ПоказательТоваров, БазаРасчета) Экспорт
	
	НовоеЗначение = ПорядокРаспределения;
	
	Если БезРасчета Тогда
		
		НовоеЗначение = ПредопределенноеЗначение("Перечисление.ПорядкиРаспределенияРетроБонусов.ПустаяСсылка");
		
	Иначе
		
		ДоступноРаспределение =
			(ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Закупки")
			 И БазаРасчета <> ПредопределенноеЗначение("Перечисление.БазыРасчетаРетроБонусов.СуммаЗакупкиБазовыеЦены")
			 И (ПоказательТоваров = ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.Количество")
				ИЛИ ПоказательТоваров = ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.ПакетноеПредложение")));
		
		Если НЕ ДоступноРаспределение Тогда
			
			НовоеЗначение = ПредопределенноеЗначение("Перечисление.ПорядкиРаспределенияРетроБонусов.ПустаяСсылка");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовоеЗначение;
	
КонецФункции

// Возвращаемое значение:
//  Структура - Параметры завершения указания валюты курса:
// * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - 
// * КурсЧислитель - Число - 
// * КурсЗнаменатель - Число -
// 
Функция ПараметрыЗавершенияУказанияВалютыКурса() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВалютаВзаиморасчетов", ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));
	
	Результат.Вставить("КурсЧислитель", 0);
	Результат.Вставить("КурсЗнаменатель", 0);
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.ТипыДоговоров- Типы договора закупки
//
Функция ТипыДоговоровЗакупки() Экспорт
	
	ТипыДоговоров = Новый Массив; // Массив из ПеречислениеСсылка.ТипыДоговоров
	ТипыДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоставщиком"));
	ТипыДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.Импорт"));
	ТипыДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ВвозИзЕАЭС"));
	ТипыДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоклажедателем"));
	
	Возврат ТипыДоговоров;
	
КонецФункции

// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.ХозяйственныеОперации
//
Функция ХозяйственныеОперацииЗакупки() Экспорт
	
	МассивХозОпераций = Новый Массив; // Массив из ПеречислениеСсылка.ХозяйственныеОперации
	МассивХозОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика"));
	МассивХозОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту"));
	МассивХозОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС"));
	МассивХозОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи"));
	
	Возврат МассивХозОпераций;
	
КонецФункции

#Область ПакетнаяОбработкаСтрок

// Параметры:
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции, СтрокаТаблицыЗначений -
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокиТЧ.СтруктураДействий
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//  ДополнительныеПараметрыЗаполнения - Структура, Неопределено - дополнительные параметры заполнения
//
Процедура ПоляСтрокиПоДействиям(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ДополнительныеПараметрыЗаполнения) Экспорт
	
	Перем ПараметрыДействия; // Структура
	
	ИмяПоляСоглашение = "";
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакСоглашенияВСтрокеТЧ", ИмяПоляСоглашение) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ЧитаемыеПоля.Вставить(ИмяПоляСоглашение);
		
		ИзменяемыеПоля = Новый Структура();
		ИзменяемыеПоля.Вставить("ЭтоТиповоеСоглашение");
		
		ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ДополнитьОписаниеПолей(
			"ЗаполнитьПризнакСоглашенияВСтрокеТЧ",
			ЧитаемыеПоля,
			ИзменяемыеПоля,
			КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакУказанияВалютыРетроБонусовПоставщиков", ПараметрыДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ИзменяемыеПоля = Новый Структура();
		Для Каждого Поле Из ПараметрыДействия Цикл // КлючИЗначение
			
			ЧитаемыеПоля.Вставить(Строка(Поле.Ключ));
			ИзменяемыеПоля.Вставить(Строка(Поле.Значение));
			
		КонецЦикла;
		
		ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ДополнитьОписаниеПолей(
			"ЗаполнитьПризнакУказанияВалютыРетроБонусовПоставщиков",
			ЧитаемыеПоля,
			ИзменяемыеПоля,
			КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВалютуРетроБонусовПоставщиков", ПараметрыДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ИзменяемыеПоля = Новый Структура();
		Для Каждого Поле Из ПараметрыДействия Цикл // КлючИЗначение
			
			ЧитаемыеПоля.Вставить(Строка(Поле.Ключ));
			ИзменяемыеПоля.Вставить(Строка(Поле.Значение));
			
		КонецЦикла;
		
		ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ДополнитьОписаниеПолей(
			"ЗаполнитьВалютуРетроБонусовПоставщиков",
			ЧитаемыеПоля,
			ИзменяемыеПоля,
			КэшированныеЗначения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьТипРетроБонусовПоставщиков", ПараметрыДействия) Тогда
		
		ЧитаемыеПоля = Новый Структура();
		ИзменяемыеПоля = Новый Структура();
		Для Каждого Поле Из ПараметрыДействия Цикл // КлючИЗначение
			
			ЧитаемыеПоля.Вставить(Строка(Поле.Ключ));
			ИзменяемыеПоля.Вставить(Строка(Поле.Значение));
			
		КонецЦикла;
		
		ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ДополнитьОписаниеПолей(
			"ЗаполнитьТипРетроБонусовПоставщиков",
			ЧитаемыеПоля,
			ИзменяемыеПоля,
			КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти