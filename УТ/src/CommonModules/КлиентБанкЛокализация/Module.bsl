
#Область ПрограммныйИнтерфейс

// Вызывается при открытии формы Банковский счет организации.
// Позволяет добавить дополнительные форматы обмена.
// При добавление нового формата обмена будут вызываться следующие процедуры:
// - при выгрузке: КлиентБанкЛокализация.ВыгрузитьПлатежи
// - при загрузке: КлиентБанкЛокализация.ЗагрузитьПлатежи.
// 
// Параметры:
// 	ФорматыОбмена - Массив из Строка
// 
//@skip-warning реализуется партнером при необходимости.
Процедура ПриЗаполненииФорматовОбмена(ФорматыОбмена) Экспорт
	
КонецПроцедуры

// Выгружает платежи согласно переданным параметрам
// 
// Параметры:
//      ТаблицаДокументов - ТаблицаЗначений - таблица по табличной части ДокументыКВыгрузке обработки КлиентБанк:
//      * ДатаВыгрузки - Дата - дата предыдущей выгрузки.
//      * Выгружать - Булево - признак выгрузки.
//      * Номер - Строка - номер платежного документа.
//      * Дата - Дата - дата платежного документа.
//      * Сумма - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - сумма платежного документа.
//      * Валюта - СправочникСсылка.Валюты - валюта платежного документа.
//      * НазначениеПлатежа - Строка - назначение платежа.
//      * Контрагент - СправочникСсылка.Организации, СправочникСсылка.Контрагенты, СправочникСсылка.ФизическиеЛица - контрагент.
//      * Операция - ПеречислениеСсылка.ХозяйственныеОперации - операция.
//      * Организация - СправочникСсылка.Организации - организация.
//      * БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций - банковский счет.
//      * Комментарий - Строка - комментарий.
//      * ВидДокумента - ПеречислениеСсылка.ТипыПлатежныхДокументов - вид документа.
//      * Ссылка - ДокументСсылка.СписаниеБезналичныхДенежныхСредств, ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств - ссылка на платежный документ.
//      * ОписаниеОшибок - Строка - описание ошибок.
//      * Код - Строка - код.
//      * КодБК - Строка - код БК.
//      * КодОКАТО - Строка - код ОКАТО.
//      * КонтрагентБанк - Строка - банк контрагента.
//      * КонтрагентБанкНаименованиеРКЦ - Строка - наименование банка.
//      * КонтрагентБанкДляРасчетов - Строка - банк для расчетов (контрагента).
//      * КонтрагентБанкДляРасчетовНаименованиеРКЦ - Строка - наименование банка для расчетов.
//      * КонтрагентБИКБанка - Строка - БИК  банка контрагента.
//      * КонтрагентБИКРЦБанка - Строка - БИК РЦ банка.
//      * КонтрагентГородБанка - Строка - город банка контрагента.
//      * КонтрагентГородРЦБанка - Строка - город РЦ банка.
//      * КонтрагентИНН - ОпределяемыйТип.ИНН - ИНН контрагента.
//      * КонтрагентКоррСчет - Строка - корреспондентский счет банка контрагента.
//      * КонтрагентКоррСчетРЦБанка - Строка - корреспондентский счет РЦ банка.
//      * КонтрагентКратко - Строка контрагент кратко.
//      * КонтрагентРасчСчет - Строка - расчетный счет контрагента.
//      * КПППлательщика - Строка - КПП плательщика.
//      * КПППолучателя - Строка - КПП получателя.
//      * ОрганизацияБанк - Строка - банк организации.
//      * ОрганизацияБанкНаименованиеРКЦ - Строка - наименование банка.
//      * ОрганизацияБанкДляРасчетов - Строка - банк для расчетов организации.
//      * ОрганизацияБанкДляРасчетовНаименованиеРКЦ - Строка - наименование банка.
//      * ОрганизацияБИКБанка - Строка - БИК  банка организации.
//      * ОрганизацияБИКРЦБанка - Строка - БИК РЦ банка организации.
//      * ОрганизацияГородБанка - Строка - город банка организации.
//      * ОрганизацияГородРЦБанка - Строка - город РЦ банка организации.
//      * ОрганизацияИНН - ОпределяемыйТип.ИНН - ИНН организации.
//      * ОрганизацияКоррСчет - Строка - счет организации.
//      * ОрганизацияКоррСчетРЦБанка - Строка - корреспондентский счет РЦ банка организации
//      * ОрганизацияРасчСчет - Строка - расчетный счет организации
//      * ОрганизацияНаим - Строка - наименование организации.
//      * КонтрагентНаим - Строка - наименование контрагента.
//      * ОчередностьПлатежа - Число - очередность платежа.
//      * ПоказательДаты - Строка - показатель даты.
//      * ПоказательНомера - Строка - показатель номера.
//      * ПоказательОснования - Строка - показатель основания.
//      * ПоказательПериода - Строка - показатель периода.
//      * ПоказательТипа - Строка - показатель типа.
//      * СтатусСоставителя - Строка - статус составителя.
//      * ПеречислениеВБюджет - Булево - признак перечисления в бюджет.
//      * ЮрФизЛицо - ПеречислениеСсылка.ЮрФизЛицо - юридическое или физическое лицо.
//      * СостояниеЭД - ПеречислениеСсылка.СостоянияДокументовЭДО - состояние версии электронного документа для указанного объекта информационной базы.
//      * ЕстьОшибка - Булево - есть ошибки.
//      * ВидПлатежа - Строка - вид платежа.
//      * КодВидаДохода Строка - код вида дохода.
//      * КодВыплат - Строка - код выплат.
//      * ОрганизацияСВИФТБанка - Строка - международный банковский идентификационный код (SWIFT BIC).
//      * ОрганизацияНаименованиеМеждународное - Строка - международное наименование организации.
//      * ОрганизацияБанкМеждународный - Строка - международное наименование банка латиницей.
//      * БанковскийСчетОрганизацииIBAN - Булево - это счет IBAN.
//      * ТипКомиссииЗаПеревод - ПеречислениеСсылка.ТипыКомиссииЗаБанковскиеПереводы - способ взимания банковской комиссии за перевод.
//      * ISOКодВалюты - Строка - ISO валюты.
//      * КонтрагентСВИФТБанка - Строка - международный банковский идентификационный код (SWIFT BIC).
//      * КонтрагентБанкМеждународный - Строка - международное наименование банка латиницей.
//      * КонтрагентГородБанкаМеждународный - Строка - город банка контрагента.
//      * БанковскийСчетКонтрагентаIBAN - Булево - это счет IBAN.
//      * КонтрагентНаименованиеМеждународное - Строка - международное наименование контрагента.
//      * ЛицевойСчет - Строка - лицевой счет казначейского сопровождения.
//      ФорматОбмена - Строка - значение формата из ПриЗаполненииФорматовОбмена().
//        Пример реализации в процедуре ВыгрузитьПлатежиВISO20022 модуля менеджера обработки КлиентБанк.
//     
//     ДвоичныеДанныеФайла - ДвоичныеДанные - файл, содержащий выгруженные для банка платежные документы. 
//
//@skip-warning реализуется партнером при необходимости.
Процедура ВыгрузитьДокументыВФайл(ТаблицаДокументов, ФорматОбмена, ДвоичныеДанныеФайла) Экспорт
	
КонецПроцедуры

// Читает данные выписки из файла.
// 
// Параметры:
//     ДвоичныеДанныеФайла - ДвоичныеДанные - данные файла
//     ФорматОбмена - Строка - название формата из процедуры ПриЗаполненииФорматовОбмена
//     ДанныеВыписки - Структура - возвращаемые данные выписки, содержит поля:
//      * Заголовок - см. ДенежныеСредстваСервер.ЗаголовокВыписки
//      * РасчетныеСчета - Массив из Структура - см. ДенежныеСредстваКлиентСервер.ДанныеРасчетногоСчета;
//      * ДокументыВыписки - Массив из Структура - см. ДенежныеСредстваСервер.ДанныеЗагружаемойОперации;
//      * ОшибкиРазбора - Массив из Строка - ошибки разбора файла выписки
//
//@skip-warning реализуется партнером при необходимости.
Процедура ПрочитатьВыпискуИзФайла(ДвоичныеДанныеФайла, ФорматОбмена, ДанныеВыписки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Помечает платежи, которые не будут участвовать в загрузке по выписке.
// 
// Параметры:
//  СтрокиКЗагрузке - Массив из СтрокаТаблицыЗначений - список строк для проверки.
//  РеквизитыСчета - см. Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации.
//
Процедура ОтметитьНеЗагружаемыеПлатежи(СтрокиКЗагрузке, РеквизитыСчета) Экспорт

	//++ Локализация
	НомерЛицевогоСчета = РеквизитыСчета.НомерЛицевогоСчета;
	РазделЛицевогоСчета = РеквизитыСчета.РазделЛицевогоСчета;
	
	Для каждого СтрокаДокумента Из СтрокиКЗагрузке Цикл
		
		НеподходящийЛицевойСчет = СтрокаДокумента.ПлательщикЛицевойСчет <> НомерЛицевогоСчета
									И СтрокаДокумента.ПолучательЛицевойСчет <> НомерЛицевогоСчета;
		
		Если НеподходящийЛицевойСчет Тогда
			СтрокаДокумента.Загружать = Ложь;
			Продолжить;
		КонецЕсли;
		
		НеподходящийКодРаздела = СтрокаДокумента.АналитическийКодРаздела <> РазделЛицевогоСчета;
		
		Если СтрокаДокумента.Исходящий
			И НеподходящийКодРаздела Тогда
			СтрокаДокумента.Загружать = Ложь;
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	//-- Локализация
	
	Возврат;

КонецПроцедуры

// Заполняет данные контрагента по платежу в выписке
//
// Параметры:
//  Исходящий - Булево - признак исходящего платежа.
//  СтрокаПлатежа - СтрокаТаблицыЗначений, Структура - данные платежа.
//  ИмяКонтрагента - Строка - имя контрагента в выписке.
//
Процедура ЗаполнитьДанныеКонтрагентаПоПлатежу(Исходящий, СтрокаПлатежа, ИмяКонтрагента) Экспорт

	//++ Локализация
	
	СписокДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ИмяКонтрагента, "//", Ложь, Истина);
	
	НомерСчета = ?(Исходящий, СтрокаПлатежа.ПолучательСчет, СтрокаПлатежа.ПлательщикСчет);
	
	ИНН = ?(Исходящий, СтрокаПлатежа.ПолучательИНН, СтрокаПлатежа.ПлательщикИНН);
	
	ДанныеКонтрагента = Новый Структура;
	ДанныеКонтрагента.Вставить("ИНН", ИНН);
	ДанныеКонтрагента.Вставить("ИмяКонтрагента", ИмяКонтрагента);
	ДанныеКонтрагента.Вставить("АдресКонтрагента", "");
	ДанныеКонтрагента.Вставить("ЭтоФизЛицо", Ложь);
	
	Если СписокДанных.Количество() > 1 Тогда
		
		ИсходныеДанные = Новый Структура;
		ИсходныеДанные.Вставить("ЭтоАктивныйСчетНезавершенныхРасчетов", ЭтоАктивныйСчетНезавершенныхРасчетов(НомерСчета));
		ИсходныеДанные.Вставить("ЭтоЮрЛицо", СтрДлина(ИНН) = 10);
		ИсходныеДанные.Вставить("ЭтоСчетКлиента", ЭтоСчетОперацийСКлиентами(НомерСчета));
		
		РазобратьДанныеКонтрагента(ИсходныеДанные, ДанныеКонтрагента, СписокДанных, 0);
		
		Если ИсходныеДанные.ЭтоАктивныйСчетНезавершенныхРасчетов
			И ДанныеКонтрагента.ЭтоФизЛицо Тогда
			НомерСчета = "";
		КонецЕсли;
		
		Если Не ПустаяСтрока(НомерСчета) Тогда
			ДанныеКонтрагента.ЭтоФизЛицо = ЭтоСчетФизическогоЛица(НомерСчета); 
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеКонтрагента.ИмяКонтрагента <> ""
		И СтрНачинаетсяС(ДанныеКонтрагента.ИмяКонтрагента, "ИНН ") Тогда
		ДанныеКонтрагента.ИмяКонтрагента = СтрЗаменить(ВРег(ДанныеКонтрагента.ИмяКонтрагента), "ИНН ", "");
	КонецЕсли;
	
	ПозицияСчетаВНаименовании = СтрНайти(ВРег(ДанныеКонтрагента.ИмяКонтрагента), "Р/С");
	
	Если ПозицияСчетаВНаименовании > 0 Тогда
		
		НаименованиеКонтрагента = СокрЛП(Сред(ДанныеКонтрагента.ИмяКонтрагента, 1, ПозицияСчетаВНаименовании - 1));
		
		Если ЭтоАктивныйСчетРасчетовСФилиалами(НомерСчета) Тогда
			
			ПодстрокаБезНаименования = СокрЛП(Сред(ДанныеКонтрагента.ИмяКонтрагента, ПозицияСчетаВНаименовании));
			ПодстрокаБезНаименования = СокрЛ(СтрЗаменить(ВРег(ПодстрокаБезНаименования), "Р/С", ""));
			СписокФраз = СтрРазделить(ПодстрокаБезНаименования, " ", Ложь);
			
			Если СписокФраз.Количество() > 0
				И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СписокФраз[0]) Тогда
				НомерСчета = СписокФраз[0];
				ДанныеКонтрагента.ЭтоФизЛицо = ЭтоСчетФизическогоЛица(НомерСчета);
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеКонтрагента.ИмяКонтрагента = ?(НаименованиеКонтрагента <> "", НаименованиеКонтрагента, ДанныеКонтрагента.ИмяКонтрагента);
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатежа, ДанныеКонтрагента);
	
	Если Исходящий Тогда
		СтрокаПлатежа.ПолучательИНН = ДанныеКонтрагента.ИНН;
		СтрокаПлатежа.ПолучательКПП = ?(ДанныеКонтрагента.ЭтоФизЛицо, "", СтрокаПлатежа.ПолучательКПП);
		СтрокаПлатежа.ПолучательСчет = НомерСчета;
	Иначе
		СтрокаПлатежа.ПлательщикИНН = ДанныеКонтрагента.ИНН;
		СтрокаПлатежа.ПлательщикКПП = ?(ДанныеКонтрагента.ЭтоФизЛицо, "", СтрокаПлатежа.ПлательщикКПП);
		СтрокаПлатежа.ПлательщикСчет = НомерСчета;
	КонецЕсли;
	
	//-- Локализация
	
	Возврат;

КонецПроцедуры

// Распознает данные платежа выписки.
// 
// Параметры:
//  СтрокиКЗагрузке - Массив из СтрокаТаблицыЗначений - список строк платежа для распознавания.
//  БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций - загружаемый банковский счет.
//  РеквизитыСчета - см. Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации.
//  НастройкиЗагрузки - Структура - установленные параметры загрузки выписки.
//
Процедура ПодготовитьСтрокиВыписки(СтрокиКЗагрузке, БанковскийСчет, РеквизитыСчета, НастройкиЗагрузки) Экспорт

	//++ Локализация
	СтатусыСоставителейТаможенныхПлатежей = Новый Массив;
	СтатусыСоставителейТаможенныхПлатежей.Добавить("06");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("16");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("17");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("18");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("19");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("20");
	
	Для каждого СтрокаДокумента Из СтрокиКЗагрузке Цикл
		
		ИННДляПоиска = ?(СтрокаДокумента.Исходящий, СтрокаДокумента.ПолучательИНН, СтрокаДокумента.ПлательщикИНН);
		
		// Очередность платежа
		Буфер = СокрЛП(СтрокаДокумента.Очередность);
		Если Буфер <> "" И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Буфер) Тогда
			СтрокаДокумента.ОчередностьПлатежа = Число(Буфер);
		Иначе
			СтрокаДокумента.ОчередностьПлатежа = 5;
		КонецЕсли;
		
		// СБП
		РаспознаваниеОперацииСБП(НастройкиЗагрузки, СтрокаДокумента, ИННДляПоиска);
		
		// Платеж в бюджет
		Если ЗначениеЗаполнено(СтрокаДокумента.СтатусСоставителя) Тогда
			СтрокаДокумента.ПлатежВБюджет = Истина;
			
			Если СтатусыСоставителейТаможенныхПлатежей.Найти(СтрокаДокумента.СтатусСоставителя) <> Неопределено Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне;
				СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж;
			ИначеЕсли СтрокаДокумента.СтатусСоставителя = "08" Тогда
				СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
			Иначе
				СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
			КонецЕсли;
			
			Если СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж 
				И СтрокаДокумента.Исходящий Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет;
			ИначеЕсли СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж
				И Не СтрокаДокумента.Исходящий Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратНалогов;
			ИначеЕсли СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж
				И СтрокаДокумента.Исходящий Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне;
			ИначеЕсли СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж
				И СтрокаДокумента.Исходящий Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств;
			КонецЕсли;
		КонецЕсли;
		
		// Показатель даты бюджетного платежа
		Если НЕ ПустаяСтрока(СтрокаДокумента.ПоказательДаты) Тогда
			СтрокаДокумента.ПоказательДатыДок = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(СтрокаДокумента.ПоказательДаты);
			Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ПоказательДатыДок) Тогда
				СтрокаДокумента.ПоказательДатыДок = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		// Выплата зарплаты
		РаспознаваниеОперацииВыплатаЗарплаты(СтрокаДокумента);
		
		// Эквайринг
		РаспознаваниеОперацииЭквайринг(СтрокаДокумента);
		
		// Дата отсылки платежного требования
		Если Не ПустаяСтрока(СтрокаДокумента.ДатаОтсылкиДок) Тогда
			СтрокаДокумента.ДатаОтсылки = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(СтрокаДокумента.ДатаОтсылкиДок);
		КонецЕсли;
		
	КонецЦикла;
	//-- Локализация
	
	Возврат;

КонецПроцедуры

// Возвращает признак использовании операции оплаты через онлайн сервис.
// 
// Параметры:
//  ОперацияПлатежа - Строка - операция платежа.
// 
// Возвращаемое значение:
//  Булево - Признак обновления старого значения.
//
Функция ЭтоОперацияОплатыЧерезОнлайнСервис(ОперацияПлатежа) Экспорт

	Результат = Ложь;

	//++ Локализация
	Результат = ОперацияПлатежа = "Операция по Яндекс.Кассе";
	//-- Локализация
	
	Возврат Результат;

КонецФункции

// Заполняет реквизиты плательщика в документе "Списание безналичных ДС".
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.СписаниеБезналичныхДенежныхСредств - заполняемый документ.
//
Процедура ЗаполнитьРеквизитыПлательщика(ДокументОбъект) Экспорт

	//++ Локализация
	РеквизитыПлательщика = ДенежныеСредстваПовтИспРФ.ДанныеПлательщика(ДокументОбъект.Организация, ДокументОбъект.БанковскийСчет);
	КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "ИННПлательщика", РеквизитыПлательщика.ИННПлательщика);
	КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "КПППлательщика", РеквизитыПлательщика.КПППлательщика);
	КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "ТекстПлательщика", РеквизитыПлательщика.ТекстПлательщика);
	//-- Локализация
	
	Возврат;

КонецПроцедуры

// Устанавливает флажок оплаты без заявки в документе оплаты.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.СписаниеБезналичныхДенежныхСредств - Документ, в котором не требуется оплата по заявке.
//
Процедура РазрешитьОплатуБезЗаявки(ДокументОбъект) Экспорт

	//++ Локализация
	Если ДокументОбъект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение
		Или ДокументОбъект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер
		Или ДокументОбъект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер Тогда
	
		ДокументОбъект.НеКонтролироватьЗаполнениеЗаявки = Истина;
	КонецЕсли;
	//-- Локализация
	
	Возврат;

КонецПроцедуры

// Заполняет реквизиты списания по платежу из выписки.
// 
// Параметры:
//  СтрокаДокумента - СтрокаТаблицыЗначений - распознанная строка платежа.
//  ДокументОбъект - ДокументОбъект.СписаниеБезналичныхДенежныхСредств - Документ списания.
//
Процедура ЗаполнитьРеквизитыСписания(СтрокаДокумента, ДокументОбъект) Экспорт

	//++ Локализация
	Если ЗначениеЗаполнено(СтрокаДокумента.ОчередностьПлатежа) Тогда
		КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "ОчередностьПлатежа", СтрокаДокумента.ОчередностьПлатежа);
	Иначе
		КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "ОчередностьПлатежа", 5);
	КонецЕсли;
	
	СписокКВД = ПлатежиВБюджетКлиентСервер.КодыВидовДохода(ДокументОбъект.Дата,
		ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	КодВидаДохода =
		?(СписокКВД.НайтиПоЗначению(СтрокаДокумента.КодНазПлатежа) <> Неопределено, СтрокаДокумента.КодНазПлатежа, "");
	КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "КодВидаДохода", КодВидаДохода);
	КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "КодВыплат", СтрокаДокумента.ПоказательТипа);
	
	Если СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		И СтрокаДокумента.ЭтоСБП Тогда // Комиссия СБП
	
		СпособПроведенияПлатежа = Перечисления.СпособыПроведенияПлатежей.СистемаБыстрыхПлатежей;
		
		ПараметрыОтбора = Справочники.ДоговорыЭквайринга.ПараметрыОтбораДоговораЭквайринга();
		
		ПараметрыОтбора.Организация = ДокументОбъект.Организация;
		ПараметрыОтбора.Эквайер = ДокументОбъект.Контрагент;
		ПараметрыОтбора.БанковскийСчет = ДокументОбъект.БанковскийСчет;
		ПараметрыОтбора.СпособПроведенияПлатежа = СпособПроведенияПлатежа;
		
		ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.ДоговорЭквайрингаПоУмолчанию(ПараметрыОтбора);
		
		Если ЗначениеЗаполнено(ДоговорЭквайринга) Тогда
			
			РеквизитыДоговора = Справочники.ДоговорыЭквайринга.РеквизитыДоговора(ДоговорЭквайринга);
			
			СтрокаДокумента.Подразделение = РеквизитыДоговора.ПодразделениеРасходов;
			СтрокаДокумента.СтатьяРасходов = РеквизитыДоговора.СтатьяРасходов;
			СтрокаДокумента.АналитикаРасходов = РеквизитыДоговора.АналитикаРасходов;
			СтрокаДокумента.СтатьяДвиженияДенежныхСредств = РеквизитыДоговора.СтатьяДвиженияДенежныхСредствКомиссия;
			
		КонецЕсли;
	
	КонецЕсли;
		
	Если СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту Тогда
		ЗаполнитьОперациюОплатыПоПлатежнойКарте(СтрокаДокумента, ДокументОбъект);
	КонецЕсли;
	
	// Бюджетные реквизиты
	ЗаполнитьРеквизитыПлатежаВБюджет(СтрокаДокумента, ДокументОбъект);
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		РеквизитыПлательщика = ДенежныеСредстваСерверЛокализация.РеквизитыПлательщика(ДокументОбъект);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыПлательщика);
	КонецЕсли;
	
	КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "ВидПлатежа", СтрокаДокумента.ВидПлатежа);
	//-- Локализация
	
	Возврат;

КонецПроцедуры

// Заполняет реквизиты поступления по платежу из выписки.
// 
// Параметры:
//  СтрокаДокумента - СтрокаТаблицыЗначений - распознанная строка платежа.
//  ДокументОбъект - ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств - Документ поступления.
//
Процедура ЗаполнитьРеквизитыПоступления(СтрокаДокумента, ДокументОбъект) Экспорт

	//++ Локализация

	// Бюджетные реквизиты
	ЗаполнитьРеквизитыПлатежаВБюджет(СтрокаДокумента, ДокументОбъект);
	//-- Локализация
	
	Возврат;

КонецПроцедуры

// Заполняет сумму комиссии документа поступления.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств - документ заполнения суммы комиссии.
//  РеквизитыДоговора - Структура - данные договора.
//  ОтразитьКомиссию - Булево - признак отражения комиссии.
//
Процедура ЗаполнитьСуммуКомиссии(ДокументОбъект, РеквизитыДоговора, ОтразитьКомиссию) Экспорт

	//++ Локализация
	Если ОтразитьКомиссию И РеквизитыДоговора.ФиксированнаяСтавкаКомиссии Тогда
		
		СуммаКомиссии = Окр(ДенежныеСредстваКлиентСервер.РассчитатьСуммуКомиссии(
			ДокументОбъект.СуммаДокумента, РеквизитыДоговора.СтавкаКомиссии, Истина), 2);
		Если ЕстьСуммаКомиссииВНазначении(ДокументОбъект.НазначениеПлатежа, СуммаКомиссии) Тогда
			КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "СуммаКомиссии", СуммаКомиссии);
		КонецЕсли;
		
	КонецЕсли;
	//-- Локализация
	
	Возврат;

КонецПроцедуры

Процедура ЗаполнитьСтатьюЦелевыхСредствРасшифровкиПлатежа(СтрокаДокумента, СтрокаРасшифровки) Экспорт

	//++ Локализация


	//-- Локализация
	
	Возврат;

КонецПроцедуры

// Выполняет запуск операции по заполнению сведений о контрагенте из сервиса 1С:Контрагент.
// 
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - новый созданный контрагент, по которому запускается длительная операция.
//  ДанныеКонтрагента - Структура - исходные данные контрагента.
//  Дата - Дата - Дата, на которую будут запрошены сведения о контрагенте.
//
Процедура ЗапуститьЗаполнениеДанныхКонтрагента(Контрагент, ДанныеКонтрагента, Дата) Экспорт

	//++ Локализация
	Если ПустаяСтрока(ДанныеКонтрагента.ИНН) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЮрЛицо = ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ДанныеКонтрагента.ЮрФизЛицо);
	
	Если ЭтоЮрЛицо
		И Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ДанныеКонтрагента.ИНН, ЭтоЮрЛицо, "") Тогда
		Возврат;
	КонецЕсли;
	
	ВозможноПодключение = ПартнерыИКонтрагентыЛокализацияКлиентСервер.ЗаполнениеРеквизитовПоДаннымИННВозможно(
		Истина,
		ПартнерыИКонтрагентыЛокализация.НастройкиПодключенияКСервисуИППЗаданы(),
		ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо,
		ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель,
		Ложь);
	
	Если Не ВозможноПодключение Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Ссылка", Контрагент);
	ПараметрыПроцедуры.Вставить("ИНН", ДанныеКонтрагента.ИНН);
	ПараметрыПроцедуры.Вставить("ЭтоЮридическоеЛицо", ЭтоЮрЛицо);
	ПараметрыПроцедуры.Вставить("Дата", Дата);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru='Загрузка выписки банка: заполнение данных контрагена по ИНН'");
	ПараметрыВыполнения.КлючФоновогоЗадания = Контрагент.УникальныйИдентификатор();

	Попытка
		Результат = ДлительныеОперации.ВыполнитьВФоне(
			"КлиентБанкЛокализация.ЗаполнитьДанныеНовогоКонтрагента",
			ПараметрыПроцедуры,
			ПараметрыВыполнения);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Длительные операции.Ошибка выполнения'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	//-- Локализация
	
	Возврат;

КонецПроцедуры

// Добавляет строку в табличную часть "Расшифровка платежа" по объекту расчета.
// 
// Параметры:
//  ДанныеПлатежа - СтрокаТаблицыЗначений - данные распознанного платежа.
//  ДокументОбъект - ДокументОбъект.СписаниеБезналичныхДенежныхСредств - Документ заполнения.
//  ДанныеОбъектаРасчета - СтрокаТаблицыЗначений - данные объекта расчета по таблице остатков.
//  Параметры - Структура - Параметры заполнения табличной части.
//
Процедура ДобавитьСтрокуРасшифровкиПлатежаПоОбъектуРасчета(ДанныеПлатежа, ДокументОбъект, ДанныеОбъектаРасчета, Параметры) Экспорт

	//++ Локализация
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры, "ОперацияССамозанятым") Тогда
		Параметры.Вставить("ОперацияССамозанятым", Неопределено);
	КонецЕсли;
	
	Если Параметры.ОперацияССамозанятым <> Неопределено
		И ДанныеОбъектаРасчета.ОперацияССамозанятым <> Параметры.ОперацияССамозанятым
		И ДанныеОбъектаРасчета.ОперацияССамозанятым <> Неопределено Тогда
		ДанныеОбъектаРасчета.Обработано = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОперацияССамозанятым = ДанныеОбъектаРасчета.ОперацияССамозанятым;
	//-- Локализация
	
	СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
	КлиентБанкСервер.ЗаполнитьСтрокуРасшифровкиПлатежаПоОбъектуРасчета(
		СтрокаРасшифровки, ДанныеПлатежа, ДокументОбъект, ДанныеОбъектаРасчета, Параметры);
	ЗаполнитьСтатьюЦелевыхСредствРасшифровкиПлатежа(ДанныеПлатежа, СтрокаРасшифровки);
	
КонецПроцедуры

// Добавляет строку в табличную часть "Расшифровка платежа" по объекту расчета.
// 
// Параметры:
//  ДанныеПлатежа - СтрокаТаблицыЗначений - данные распознанного платежа.
//  ДокументОбъект - ДокументОбъект.СписаниеБезналичныхДенежныхСредств, ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств - Документ заполнения.
//  Параметры - Структура - Параметры заполнения табличной части.
//
Процедура ДобавитьСтрокуРасшифровкиПлатежаПоПлатежу(ДанныеПлатежа, ДокументОбъект, Параметры) Экспорт

	//++ Локализация
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры, "ОперацияССамозанятым") Тогда
		Параметры.Вставить("ОперацияССамозанятым", Неопределено);
	КонецЕсли;
	
	Если Параметры.ОперацияССамозанятым <> Неопределено
		И ДанныеПлатежа.ДоговорССамозанятым <> Параметры.ОперацияССамозанятым Тогда
		Параметры.ЗаполняемыеРеквизиты = "Контрагент, Партнер, СтатьяДвиженияДенежныхСредств";
	Иначе
	//-- Локализация

		КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "Договор", ДанныеПлатежа.Договор);
	//++ Локализация

	КонецЕсли;
	
	Параметры.ОперацияССамозанятым = ДанныеПлатежа.ДоговорССамозанятым;
	//-- Локализация
	
	СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
	КлиентБанкСервер.ЗаполнитьСтрокуРасшифровкиПлатежаПоПлатежу(
		СтрокаРасшифровки, ДанныеПлатежа, ДокументОбъект, Параметры);
	ЗаполнитьСтатьюЦелевыхСредствРасшифровкиПлатежа(ДанныеПлатежа, СтрокаРасшифровки);
	
КонецПроцедуры

Процедура ЗаполнитьКодВалютнойОперации(ДокументОбъект) Экспорт

	//++ Локализация
	Если НЕ ПустаяСтрока(ДокументОбъект.НазначениеПлатежа) Тогда
		ДокументОбъект.ЗаполнитьКодВалютнойОперации();
	КонецЕсли;
	//-- Локализация
	
	Возврат;

КонецПроцедуры

//++ Локализация

// Заполняет данные нового контрагента, полученные из сервиса.
// 
// Параметры:
//  ПараметрыЗаполнения - Структура - Параметры процедуры для заполнения:
//  *ИНН - Строка - ИНН контрагента, по которому выполняется запрос в сервис.
//  *Ссылка - СправочникСсылка.Контрагенты - заполняемый контрагент.
//  *ЭтоЮридическоеЛицо - Булево - признак юридического лица.
//  *Дата - Дата - дата, с которой начинается действие контактной информации.
//  АдресХранилища - Строка - Адрес хранилища.
//
Процедура ЗаполнитьДанныеНовогоКонтрагента(ПараметрыЗаполнения, АдресХранилища) Экспорт

	Если ПараметрыЗаполнения.ЭтоЮридическоеЛицо Тогда
		
		Результат = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(ПараметрыЗаполнения.ИНН);
		ДанныеКонтрагента = ПартнерыИКонтрагентыЛокализация.РезультатПреобразованияСведенийОЮрЛице(Результат);
		
	Иначе
		
		Результат = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ПараметрыЗаполнения.ИНН);
		ДанныеКонтрагента = ПартнерыИКонтрагентыЛокализация.РезультатПреобразованияСведенийОФизЛице(Результат);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеКонтрагента.ОписаниеОшибки) Тогда
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Контрагенты");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ПараметрыЗаполнения.Ссылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = ПараметрыЗаполнения.Ссылка.ПолучитьОбъект();
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеКонтрагента, "КПП")
				И СправочникОбъект.КПП = ""
				И ДанныеКонтрагента.КПП <> ""
				И ПараметрыЗаполнения.ЭтоЮридическоеЛицо Тогда
				СправочникОбъект.КПП = ДанныеКонтрагента.КПП;
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеКонтрагента, "РегистрационныйНомер") Тогда
				СправочникОбъект.РегистрационныйНомер = ДанныеКонтрагента.РегистрационныйНомер;
			КонецЕсли;
			
			Если СправочникОбъект.Модифицированность() Тогда
				СправочникОбъект.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Событие = СтрШаблон(
				"%1.%2",
				НСтр("ru = 'Данные'", ОбщегоНазначения.КодОсновногоЯзыка()),
				НСтр("ru = 'Изменение'", ОбщегоНазначения.КодОсновногоЯзыка()));
			ЗаписьЖурналаРегистрации(
				Событие,
				УровеньЖурналаРегистрации.Ошибка,
				ПараметрыЗаполнения.Ссылка.Метаданные(),
				ПараметрыЗаполнения.Ссылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеКонтрагента, "Телефон")
			И ЗначениеЗаполнено(ДанныеКонтрагента.Телефон) Тогда
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
				ПараметрыЗаполнения.Ссылка,
				ДанныеКонтрагента.Телефон.КонтактнаяИнформация,
				Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
				ПараметрыЗаполнения.Дата,
				Ложь);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеКонтрагента, "ЮридическийАдрес")
			И ЗначениеЗаполнено(ДанныеКонтрагента.ЮридическийАдрес) Тогда
			
			ЮрАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				ПараметрыЗаполнения.Ссылка,
				Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
				ПараметрыЗаполнения.Дата, );
			
			Если ЮрАдрес = "" Тогда
				УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
					ПараметрыЗаполнения.Ссылка,
					ДанныеКонтрагента.ЮридическийАдрес.КонтактнаяИнформация,
					Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
					ПараметрыЗаполнения.Дата,
					Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

//-- Локализация

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация

Процедура РаспознаваниеОперацииСБП(НастройкиЗагрузки, Платеж, ИННКонтрагента) Экспорт

	Если ЗначениеЗаполнено(Платеж.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	Платеж.ЭтоСБП = ЭтоОперацияСБП(Платеж.НазначениеПлатежа);
	
	Если Не Платеж.ЭтоСБП Тогда
		Возврат;
	КонецЕсли;
	
	СтатусКонтрагента = ?(Платеж.Исходящий, Лев(Платеж.ПолучательСчет, 3), Лев(Платеж.ПлательщикСчет, 3));
	ЭтоСчетФизЛица = СтатусКонтрагента = "408";
	
	Если Платеж.Исходящий Тогда
		
		Если ЭтоКомиссияСБП(Платеж.НазначениеПлатежа) Тогда
			Платеж.ВидОперации = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств;
		ИначеЕсли ЭтоВозврат(Платеж.НазначениеПлатежа) Тогда
			
			Если СтрДлина(ИННКонтрагента) = 12
				Или (Не Платеж.ПроверятьИНН И ЭтоСчетФизЛица) Тогда
				Платеж.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
			Иначе
				Платеж.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если СтрДлина(ИННКонтрагента) = 12
			Или (Не Платеж.ПроверятьИНН И ЭтоСчетФизЛица) Тогда
			Платеж.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
		Иначе
			Платеж.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (Платеж.Получатель = Платеж.ПолучательБанк1
		Или Платеж.Плательщик = Платеж.ПлательщикБанк1)
		И ЭтоСчетФизЛица Тогда
		
		Если НастройкиЗагрузки.РежимЗаполненияКонтрагентаПоQRПлатежу = 0 Тогда
			
			Платеж.ИмяКонтрагента = ВРег(ВырезкаФИОФизлицаВНазначенииПлатежаСБП(Платеж.НазначениеПлатежа));
			
			Если Платеж.ИмяКонтрагента <> "" Тогда
				СтруктураНаименования = ДенежныеСредстваСерверЛокализация.НаименованиеОрганизации(Платеж.ИмяКонтрагента);
				Платеж.СокрИмяКонтрагента = СтруктураНаименования.СокращенноеНаименование;
			Иначе
				Платеж.СоздаватьКонтрагента = Ложь;
			КонецЕсли;
			
		Иначе
			Платеж.Контрагент = Справочники.Контрагенты.РозничныйПокупатель;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоСчетФизЛица
		И Не Платеж.ПроверятьИНН Тогда
		Платеж.ЭтоФизЛицо = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура РаспознаваниеОперацииВыплатаЗарплаты(Платеж)

	Если ЗначениеЗаполнено(Платеж.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	НомерСчета = ?(Платеж.Исходящий, Платеж.ПолучательСчет, Платеж.ПлательщикСчет);
	ЭтоВыплатаЗарплаты = ЭтоОперацияВыплатаЗарплаты(Платеж.НазначениеПлатежа, Платеж.КодНазПлатежа);
	ЭтоВыплатаПоГПХ = ЭтоОперацияВыплатаИсполнителюПоГПХ(НомерСчета, Платеж.НазначениеПлатежа);
	ЭтоВыплатаПоИсполнительномуЛисту = ЭтоОперацияВыплатыПоИсполнительномуЛисту(НомерСчета, Платеж.НазначениеПлатежа);
	
	Если ЭтоВыплатаПоИсполнительномуЛисту Тогда
		
		Платеж.ВидОперации = ?(
			Платеж.Исходящий,
			Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств,
			Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств);
		Возврат;
		
	КонецЕсли;
	
	Если ЭтоВыплатаПоГПХ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоВыплатаЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьРеестр = ЭтоПлатежПоВедомости(Платеж.НазначениеПлатежа);
	
	Платеж.ЭтоФизЛицо = ЭтоСчетФизическогоЛица(НомерСчета);
	
	Если ЕстьРеестр Тогда
		Платеж.ВидОперации = ?(
			Платеж.Исходящий,
			Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту,
			Перечисления.ХозяйственныеОперации.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту);
	КонецЕсли;
	
	Если Платеж.ЭтоФизЛицо Тогда
		Платеж.ВидОперации = ?(
		Платеж.Исходящий,
		Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета,
		Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС);
	КонецЕсли;

КонецПроцедуры

Процедура РаспознаваниеОперацииЭквайринг(Платеж)

	Если ЗначениеЗаполнено(Платеж.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	НомерСчета = ?(Платеж.Исходящий, Платеж.ПолучательСчет, Платеж.ПлательщикСчет);
	ЭтоЭквайринг = ЭтоОперацияЭквайринга(НомерСчета, Платеж.НазначениеПлатежа);
	
	Если Не ЭтоЭквайринг Тогда
		Возврат;
	КонецЕсли;
	
	Платеж.ВидОперации = ?(
		Платеж.Исходящий,
		Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту,
		Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте);

КонецПроцедуры

Процедура ЗаполнитьОперациюОплатыПоПлатежнойКарте(Платеж, ДокументОбъект)

	ПараметрыОтбора = Справочники.ДоговорыЭквайринга.ПараметрыОтбораДоговораЭквайринга();
	ПараметрыОтбора.Организация = ДокументОбъект.Организация;
	ПараметрыОтбора.БанковскийСчет = ДокументОбъект.БанковскийСчет;
	
	Если Платеж.ЭтоСБП Тогда
		СпособПроведенияПлатежа = Перечисления.СпособыПроведенияПлатежей.СистемаБыстрыхПлатежей;
	Иначе
		
		СпособПроведенияПлатежа = Неопределено;
		ПараметрыОтбора.Эквайер = ДокументОбъект.Контрагент;
		
	КонецЕсли;
	
	ПараметрыОтбора.СпособПроведенияПлатежа = СпособПроведенияПлатежа;
	ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.ДоговорЭквайрингаПоУмолчанию(ПараметрыОтбора);
	
	Если ЗначениеЗаполнено(ДоговорЭквайринга) Тогда
		
		РеквизитыДоговора = Справочники.ДоговорыЭквайринга.РеквизитыДоговора(ДоговорЭквайринга);
		
		КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "Контрагент", РеквизитыДоговора.Эквайер, Истина);
		КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "ДоговорЭквайринга", ДоговорЭквайринга);
		КлиентБанкСервер.УстановитьСвойство(
			ДокументОбъект,
			"БанковскийСчетКонтрагента",
			РеквизитыДоговора.БанковскийСчетКонтрагента,
			Истина);
		КлиентБанкСервер.УстановитьСвойство(
			ДокументОбъект,
			"СтатьяДвиженияДенежныхСредств",
			РеквизитыДоговора.СтатьяДвиженияДенежныхСредствВозврат,
			Истина);
		
		ОтражатьКомиссию = 
			(РеквизитыДоговора.СпособОтраженияКомиссии = 
				Перечисления.СпособыОтраженияЭквайринговойКомиссии.ПриЗачислении
			И РеквизитыДоговора.ВзимаетсяКомиссияПриВозврате);
		КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "ОтражатьКомиссию", ОтражатьКомиссию);
		
		Если ОтражатьКомиссию Тогда
		
			КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "СтатьяРасходов", РеквизитыДоговора.СтатьяРасходов);
			КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "АналитикаРасходов", РеквизитыДоговора.АналитикаРасходов);
			КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "Подразделение", РеквизитыДоговора.ПодразделениеРасходов);
			КлиентБанкСервер.УстановитьСвойство(
				ДокументОбъект, "НаправлениеДеятельности", РеквизитыДоговора.НаправлениеДеятельности);
			
			Если РеквизитыДоговора.ФиксированнаяСтавкаКомиссии Тогда
				ДокументОбъект.СуммаКомиссии = ДенежныеСредстваКлиентСервер.РассчитатьСуммуКомиссии(
					Платеж.СуммаДокумента, РеквизитыДоговора.СтавкаКомиссии);
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьРеквизитыПлатежаВБюджет(СтрокаДокумента, ДокументОбъект)

	Если СтрокаДокумента.ПлатежВБюджет Тогда
		КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "ПеречислениеВБюджет", Истина);
		КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "ВидПеречисленияВБюджет", СтрокаДокумента.ВидПеречисленияВБюджет);
		КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "КодБК", СтрокаДокумента.ПоказательКБК);
		КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "КодОКАТО", СтрокаДокумента.ОКАТО);
		КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "СтатусСоставителя", СтрокаДокумента.СтатусСоставителя);
		Если СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж Тогда
			КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "ПоказательОснования", "0");
			КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "ПоказательПериода", "0");
			КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "ПоказательНомера", "0");
			КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "ПоказательДаты", "0");
		Иначе
			КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "ПоказательОснования", СтрокаДокумента.ПоказательОснования);
			КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "ПоказательПериода", СтрокаДокумента.ПоказательПериода);
			КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "ПоказательНомера", СтрокаДокумента.ПоказательНомера);
			КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "ПоказательДаты", СтрокаДокумента.ПоказательДаты);
		КонецЕсли;
		КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "ПоказательТипа", СтрокаДокумента.ПоказательТипа);
	Иначе
		КлиентБанкСервер.УстановитьСвойство(ДокументОбъект, "ВидПеречисленияВБюджет", Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж);
	КонецЕсли;

КонецПроцедуры

Функция ЭтоКомиссияСБП(Знач ИсходнаяСтрока)

	Возврат СтрНайти(НРег(ИсходнаяСтрока), "комисси") > 0
		И ЭтоОперацияСБП(ИсходнаяСтрока);

КонецФункции

Функция ЭтоОперацияСБП(Знач ИсходнаяСтрока)

	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить(НСтр("ru = 'систем'"));
	СписокПодстрок.Добавить(НСтр("ru = 'быстры'"));
	СписокПодстрок.Добавить(НСтр("ru = 'платеж'"));
	
	ПодстрокаКод = Новый Массив;
	ПодстрокаКод.Добавить(НСтр("ru = 'qr'"));
	ПодстрокаКод.Добавить(НСтр("ru = 'код'"));
	
	ПодстрокаКод2 = Новый Массив;
	ПодстрокаКод2.Добавить(НСтр("ru = 'статическ'"));
	ПодстрокаКод2.Добавить(НСтр("ru = 'qr'"));
	
	Возврат СтрНайти(ВРег(ИсходнаяСтрока), СтрШаблон(" %1 ", НСтр("ru = 'СБП'"))) > 0
		Или СтрНайти(ИсходнаяСтрока, НСтр("ru = 'СБП'")) > 0
		Или НайденаФразаИзСпискаПодстрок(ИсходнаяСтрока, СписокПодстрок, 1, 0)
		Или СтрНайти(ВРег(ИсходнаяСтрока), СтрШаблон(" %1 ", НСтр("ru = 'QR'")))
		Или НайденаФразаИзСпискаПодстрок(ИсходнаяСтрока, ПодстрокаКод, 1, 0)
		Или НайденаФразаИзСпискаПодстрок(ИсходнаяСтрока, ПодстрокаКод2, 1, 0);

КонецФункции

// Возращает признак наличия фразы в исходной строке.
//
// Параметры:
//  ИсходнаяСтрока - Строка - исходная строка, в которой выполняется поиск фразы.
//  СписокПодстрок - Массив из Строка - массив искомой подстроки в виде отдельных слов.
//  ПозицияПодстроки - Число - позиция, с учетом которой выполняется поиск в исходной строке.
//  Индекс - Число - индекс, рассматриваемой строки списка подстрок.
// 
// Возвращаемое значение:
//   - Булево
//
Функция НайденаФразаИзСпискаПодстрок(ИсходнаяСтрока, СписокПодстрок, ПозицияПодстроки, Индекс)

	Подстрока = СписокПодстрок.Получить(Индекс);
	
	Если Индекс = 0 Тогда
		ПредыдущаяПодстрока = "";
	Иначе
		ПредыдущаяПодстрока = СписокПодстрок.Получить(Индекс - 1);
	КонецЕсли;
	
	НачальнаяПозиция = ПозицияПодстроки + СтрДлина(ПредыдущаяПодстрока);
	
	Если НачальнаяПозиция > СтрДлина(ИсходнаяСтрока) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПозицияПодстроки = СтрНайти(НРег(ИсходнаяСтрока), Подстрока, , НачальнаяПозиция);
	
	Если ПозицияПодстроки > 0 Тогда
		
		Если СписокПодстрок.ВГраница() >= Индекс + 1 Тогда
			Результат = НайденаФразаИзСпискаПодстрок(ИсходнаяСтрока, СписокПодстрок, ПозицияПодстроки, Индекс + 1);
		Иначе
			Результат = Истина;
		КонецЕсли;
		
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ВырезкаФИОФизлицаВНазначенииПлатежаСБП(Знач ИсходнаяСтрока)

	Результат = "";
	
	ПодстрокаСФИО = ВырезаннаяПодстрока(ИсходнаяСтрока, НСтр("ru = 'от'"));
	
	Если ПодстрокаСФИО <> "" Тогда
		Результат = ВырезатьФИОИзСтроки(ПодстрокаСФИО);
	Иначе
		
		ПодстрокаСФИО = ВырезаннаяПодстрока(ИсходнаяСтрока, НСтр("ru = 'в пользу'"));
		
		Если ПодстрокаСФИО <> "" Тогда
			Результат = ВырезатьФИОИзСтроки(ПодстрокаСФИО);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ВырезаннаяПодстрока(Знач ИсходнаяСтрока, Фраза)

	ВырезаннаяПодстрока = "";
	
	Подстрока = СтрШаблон(" %1 ", Фраза);
	НачальнаяПозиция = СтрНайти(НРег(ИсходнаяСтрока), Подстрока);
	
	Если НачальнаяПозиция > 0 Тогда
		ВырезаннаяПодстрока = Прав(ИсходнаяСтрока, СтрДлина(ИсходнаяСтрока) - (НачальнаяПозиция + СтрДлина(Подстрока) - 1));
	КонецЕсли;
	
	Возврат ВырезаннаяПодстрока;

КонецФункции

Функция ВырезатьФИОИзСтроки(ИсходнаяСтрока)

	МассивПодстрокСФИО = СтрРазделить(ИсходнаяСтрока, " ", Ложь);
	ЧастиФИО = Новый Массив;
	
	ЧастиОтчества = Новый Массив;
	ЧастиОтчества.Добавить(НСтр("ru = 'оглы'"));
	ЧастиОтчества.Добавить(НСтр("ru = 'улы'"));
	ЧастиОтчества.Добавить(НСтр("ru = 'уулу'"));
	ЧастиОтчества.Добавить(НСтр("ru = 'кызы'"));
	ЧастиОтчества.Добавить(НСтр("ru = 'гызы'"));
	ЧастиОтчества.Добавить(НСтр("ru = 'угли'"));
	
	Для Каждого СтрокаМассива Из МассивПодстрокСФИО Цикл
		
		ПерваяБуква = Лев(СтрокаМассива, 1);
		
		Если Не ЭтоЗаглавнаяБуква(ПерваяБуква)
			И ЧастиФИО.Количество() > 0
			И ЧастиОтчества.Найти(СтрокаМассива) = Неопределено Тогда
			Прервать;
		Иначе
			ЧастиФИО.Добавить(СтрокаМассива);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиФИО, " ");

КонецФункции

Функция ЭтоВозврат(Знач ИсходнаяСтрока)

	Возврат СтрНайти(НРег(ИсходнаяСтрока), "возврат") > 0;

КонецФункции

Функция ЭтоЗаглавнаяБуква(Буква)

	Возврат ВРег(Буква) = Буква;

КонецФункции

Процедура РазобратьДанныеКонтрагента(ДанныеПлатежа, ДанныеКонтрагента, ЭлементыКонтрагента, ТекущийИндекс)

	Если ЭлементыКонтрагента.ВГраница() < ТекущийИндекс Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийИндекс = 0 Тогда
		ДанныеКонтрагента.ИмяКонтрагента = ЭлементыКонтрагента[ТекущийИндекс];
	КонецЕсли;
	
	Если ТекущийИндекс = 1 Тогда
		
		Если ДанныеПлатежа.ЭтоЮрЛицо
			И ДанныеПлатежа.ЭтоАктивныйСчетНезавершенныхРасчетов Тогда
			
			ТолькоСимволы = СтроковыеФункцииКлиентСервер.ТолькоСимволыНациональногоАлфавитаВСтроке(
				СтрЗаменить(ЭлементыКонтрагента[ТекущийИндекс], " ", ""));
			
			Если ТолькоСимволы Тогда
				ДанныеКонтрагента.ИмяКонтрагента = ЭлементыКонтрагента[ТекущийИндекс];
				ДанныеКонтрагента.ИНН = "";
				ДанныеКонтрагента.ЭтоФизЛицо = Истина;
			КонецЕсли;
			
		ИначеЕсли ДанныеПлатежа.ЭтоСчетКлиента Тогда
			ДанныеКонтрагента.АдресКонтрагента = ЭлементыКонтрагента[ТекущийИндекс];
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущийИндекс > 1
		И ДанныеПлатежа.ЭтоЮрЛицо
		И ДанныеПлатежа.ЭтоАктивныйСчетНезавершенныхРасчетов Тогда
		
		ТолькоЦифры = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЭлементыКонтрагента[ТекущийИндекс]);
		
		Если ТолькоЦифры
			И СтрДлина(ЭлементыКонтрагента[ТекущийИндекс]) = 12 Тогда
			ДанныеКонтрагента.ИНН = ЭлементыКонтрагента[ТекущийИндекс];
			ДанныеКонтрагента.ЭтоФизЛицо = Истина;
		ИначеЕсли Не ТолькоЦифры Тогда
			ДанныеКонтрагента.АдресКонтрагента = ЭлементыКонтрагента[ТекущийИндекс];
		КонецЕсли;
		
	КонецЕсли;
	
	РазобратьДанныеКонтрагента(ДанныеПлатежа, ДанныеКонтрагента, ЭлементыКонтрагента, ТекущийИндекс + 1);

КонецПроцедуры

Функция ЭтоАктивныйСчетНезавершенныхРасчетов(НомерСчета)

	Возврат Лев(НомерСчета, 5) = "30233";

КонецФункции

Функция ЭтоАктивныйСчетРасчетовСФилиалами(НомерСчета)

	Возврат Лев(НомерСчета, 5) = "30302";

КонецФункции

Функция ЭтоПассивныйСчетНезавершенныхРасчетов(НомерСчета)

	Возврат Лев(НомерСчета, 5) = "30232";

КонецФункции

Функция ЭтоСчетФизическогоЛица(НомерСчета)

	СчетВторогоПорядка = Лев(НомерСчета, 5);
	
	Возврат СчетВторогоПорядка = "40817"
		Или СчетВторогоПорядка = "40820"

КонецФункции

Функция ЭтоСчетОперацийСКлиентами(НомерСчета)

	СчетПервогоПорядка = Лев(НомерСчета, 3);
	
	Возврат СчетПервогоПорядка = "401" // Средства федерального бюджета
		Или СчетПервогоПорядка = "402" // Средства бюджетов субъектов Российской Федерации и местных бюджетов
		Или СчетПервогоПорядка = "403" // Прочие средства бюджетов
		Или СчетПервогоПорядка = "404" // Средства государственных и других внебюджетных фондов
		Или СчетПервогоПорядка = "405" // Счета организаций, находящихся в федеральной собственности
		Или СчетПервогоПорядка = "406" // Счета организаций, находящихся в государственной (кроме федеральной) собственности
		Или СчетПервогоПорядка = "407" // Счета негосударственных организаций
		Или СчетПервогоПорядка = "408" // Прочие счета
		Или СчетПервогоПорядка = "409" // Средства в расчетах

КонецФункции

Функция ЭтоОперацияВыплатаИсполнителюПоГПХ(НомерСчета, ИсходнаяСтрока)

	Если Не Лев(НомерСчета, 5) = "40817"
		И Не Лев(НомерСчета, 5) = "47422"
		И Не Лев(НомерСчета, 5) = "40820"
		И Не ЭтоПассивныйСчетНезавершенныхРасчетов(НомерСчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПроверяемыеФразы = Новый Массив;
	
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить(НСтр("ru = 'гражданск'"));
	СписокПодстрок.Добавить(НСтр("ru = 'правово'"));
	СписокПодстрок.Добавить(НСтр("ru = 'характер'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок);
	
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить(НСтр("ru = 'гражданск'"));
	СписокПодстрок.Добавить(НСтр("ru = 'правово'"));
	СписокПодстрок.Добавить(НСтр("ru = 'дог'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок);
	
	Если НайденаФразаВМассивеИзСпискаПодстрок(ИсходнаяСтрока, ПроверяемыеФразы, 1, 0) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат СтрНайти(ИсходнаяСтрока, НСтр("ru = 'ГПХ'")) > 0
		Или СтрНайти(ВРег(ИсходнаяСтрока), СтрШаблон(" %1 ", НСтр("ru = 'ГПХ'"))) > 0

КонецФункции

Функция ЭтоОперацияВыплатыПоИсполнительномуЛисту(НомерСчета, ИсходнаяСтрока)

	Если Не Лев(НомерСчета, 5) = "40817"
		И Не Лев(НомерСчета, 5) = "40820"
		И Не ЭтоПассивныйСчетНезавершенныхРасчетов(НомерСчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СтрНайти(НРег(ИсходнаяСтрока), НСтр("ru = 'алимент'")) > 0

КонецФункции

Функция ЭтоОперацияВыплатаЗарплаты(ИсходнаяСтрока, КодНазначения)

	ПроверяемыеФразы = Новый Массив;
	
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить("заработн");
	СписокПодстрок.Добавить("плат");
	
	ПроверяемыеФразы.Добавить(СписокПодстрок);
	
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить("зар.");
	СписокПодстрок.Добавить("плат");
	
	ПроверяемыеФразы.Добавить(СписокПодстрок);
	
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить("зараб.");
	СписокПодстрок.Добавить("плат");
	
	ПроверяемыеФразы.Добавить(СписокПодстрок);
	
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить("оплат");
	СписокПодстрок.Добавить("труда");
	СписокПодстрок.Добавить("по дог");
	
	ПроверяемыеФразы.Добавить(СписокПодстрок);
	
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить("лист");
	СписокПодстрок.Добавить("нетрудоспособ");
	
	ПроверяемыеФразы.Добавить(СписокПодстрок);
	
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить("расчет");
	СписокПодстрок.Добавить("увольнени");
	
	ПроверяемыеФразы.Добавить(СписокПодстрок);
	
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить("компенсаци");
	СписокПодстрок.Добавить("увольнени");
	
	ПроверяемыеФразы.Добавить(СписокПодстрок);
	
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить("пособи");
	СписокПодстрок.Добавить("по уходу за ребенком");
	
	ПроверяемыеФразы.Добавить(СписокПодстрок);
	
	Если НайденаФразаВМассивеИзСпискаПодстрок(ИсходнаяСтрока, ПроверяемыеФразы, 1, 0) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат СтрНайти(НРег(ИсходнаяСтрока), "з/п") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "з.п") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "зпл") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "зарплат") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "по трудовому договору") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "оклад") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "отпуск") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "преми") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "больничн") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "бонус") > 0
		Или (СтрНайти(НРег(ИсходнаяСтрока), "аванс") > 0
		И КодНазначения = "1");

КонецФункции

Функция ЭтоПлатежПоВедомости(ИсходнаяСтрока)

	Возврат СтрНайти(НРег(ИсходнаяСтрока), "реестр") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "ведомост") > 0;

КонецФункции

Функция ЭтоОперацияЭквайринга(НомерСчета, ИсходнаяСтрока)

	Если ЭтоЭквайрингПравилоПервое(НомерСчета, ИсходнаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЭтоЭквайрингПравилоВторое(НомерСчета, ИсходнаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЭтоЭквайрингПравилоТретье(НомерСчета, ИсходнаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЭтоЭквайрингПравилоЧетвертое(НомерСчета, ИсходнаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЭтоЭквайрингПравилоПятое(НомерСчета, ИсходнаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЭтоЭквайрингПравилоШестое(НомерСчета, ИсходнаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПодстрокиТЭ = Новый Массив; // торговый эквайринг
	ПодстрокиТЭ.Добавить("по");
	ПодстрокиТЭ.Добавить("дог");
	ПодстрокиТЭ.Добавить("тэ");
	
	Возврат НайденаФразаИзСпискаПодстрок(ИсходнаяСтрока, ПодстрокиТЭ, 1, 0);

КонецФункции

Функция ЭтоЭквайрингПравилоПервое(НомерСчета, ИсходнаяСтрока)

	Если Не ЭтоАктивныйСчетНезавершенныхРасчетов(НомерСчета)
		И Не ЭтоПассивныйСчетНезавершенныхРасчетов(НомерСчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрНайти(НРег(ИсходнаяСтрока), "займ") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПроверяемыеФразы = Новый Массив;
	
	СписокПодстрок1 = Новый Массив;
	СписокПодстрок1.Добавить(НСтр("ru = 'комис'"));
	СписокПодстрок1.Добавить(НСтр("ru = 'терминал'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок1);
	
	СписокПодстрок2 = Новый Массив;
	СписокПодстрок2.Добавить(НСтр("ru = 'комис'"));
	СписокПодстрок2.Добавить(НСтр("ru = 'тсп'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок2);
	
	// "сумма возмещения" и "комис"
	СписокПодстрок3 = Новый Массив;
	СписокПодстрок3.Добавить(НСтр("ru = 'сумм'"));
	СписокПодстрок3.Добавить(НСтр("ru = 'возм'"));
	СписокПодстрок3.Добавить(НСтр("ru = 'комис'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок3);
	
	// "перечисление по договору" и "комис"
	СписокПодстрок4 = Новый Массив;
	СписокПодстрок4.Добавить(НСтр("ru = 'перечислени'"));
	СписокПодстрок4.Добавить(НСтр("ru = 'по дог'"));
	СписокПодстрок4.Добавить(НСтр("ru = 'комис'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок4);
	
	// "перевод принятых денежных средств по договору" и "комис"
	СписокПодстрок5 = Новый Массив;
	СписокПодстрок5.Добавить(НСтр("ru = 'перевод принятых'"));
	СписокПодстрок5.Добавить(НСтр("ru = 'средств'"));
	СписокПодстрок5.Добавить(НСтр("ru = 'по дог'"));
	СписокПодстрок5.Добавить(НСтр("ru = 'комис'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок5);
	
	// "оплата по договору" и "MISC комиссия"
	СписокПодстрок6 = Новый Массив;
	СписокПодстрок6.Добавить(НСтр("ru = 'оплат'"));
	СписокПодстрок6.Добавить(НСтр("ru = 'по дог'"));
	СписокПодстрок6.Добавить(НСтр("ru = 'misc комиссия'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок6);
	
	// "перевод средств по договору" и "по реестру операций"
	СписокПодстрок7 = Новый Массив;
	СписокПодстрок7.Добавить(НСтр("ru = 'перевод'"));
	СписокПодстрок7.Добавить(НСтр("ru = 'средств'"));
	СписокПодстрок7.Добавить(НСтр("ru = 'по дог'"));
	СписокПодстрок7.Добавить(НСтр("ru = 'по реестр'"));
	СписокПодстрок7.Добавить(НСтр("ru = 'операц'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок7);
	
	СписокПодстрок8 = Новый Массив;
	СписокПодстрок8.Добавить(НСтр("ru = 'расчеты по дог'"));
	СписокПодстрок8.Добавить(НСтр("ru = 'комис'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок8);
	
	Если НайденаФразаВМассивеИзСпискаПодстрок(ИсходнаяСтрока, ПроверяемыеФразы, 1, 0) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат СтрНайти(НРег(ИсходнаяСтрока), "эквайр") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "мерчант") > 0;

КонецФункции

Функция ЭтоЭквайрингПравилоВторое(НомерСчета, ИсходнаяСтрока)

	Если Не ЭтоАктивныйСчетНезавершенныхРасчетов(НомерСчета)
		И Не ЭтоПассивныйСчетНезавершенныхРасчетов(НомерСчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПроверяемыеФразы = Новый Массив;
	
	// начинается со слова "возм"
	СписокПодстрок1 = Новый Массив;
	СписокПодстрок1.Добавить(НСтр("ru = 'возм'"));
	СписокПодстрок1.Добавить(НСтр("ru = 'к.'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок1);
	
	СписокПодстрок2 = Новый Массив;
	СписокПодстрок2.Добавить(НСтр("ru = 'возм'"));
	СписокПодстрок2.Добавить(НСтр("ru = 'комис'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок2);
	
	СписокПодстрок3 = Новый Массив;
	СписокПодстрок3.Добавить(НСтр("ru = 'возм'"));
	СписокПодстрок3.Добавить(НСтр("ru = 'ком.'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок3);
	
	СписокПодстрок4 = Новый Массив;
	СписокПодстрок4.Добавить(НСтр("ru = 'возм'"));
	СписокПодстрок4.Добавить(НСтр("ru = 'удержано'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок4);
	
	Если НайденаФразаВМассивеИзСпискаПодстрок(ИсходнаяСтрока, ПроверяемыеФразы, 1, 0) Тогда
			Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция ЭтоЭквайрингПравилоТретье(НомерСчета, ИсходнаяСтрока)

	Если Не Лев(НомерСчета, 5) = "30302" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// "расчеты по опер. безнал оплаты с исп. БК"
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить(НСтр("ru = 'расчет'"));
	СписокПодстрок.Добавить(НСтр("ru = 'по опер'"));
	СписокПодстрок.Добавить(НСтр("ru = 'безнал'"));
	СписокПодстрок.Добавить(НСтр("ru = 'бк'"));
	
	Возврат НайденаФразаИзСпискаПодстрок(ИсходнаяСтрока, СписокПодстрок, 1, 0);

КонецФункции

Функция ЭтоЭквайрингПравилоЧетвертое(НомерСчета, ИсходнаяСтрока)

	Если Не Лев(НомерСчета, 5) = "47422" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПроверяемыеФразы = Новый Массив;
	
	// "//реестр//" и "перечисление денежных средств по договору НЭК"
	СписокПодстрок1 = Новый Массив;
	СписокПодстрок1.Добавить(НСтр("ru = '//реестр//'"));
	СписокПодстрок1.Добавить(НСтр("ru = 'перечис'"));
	СписокПодстрок1.Добавить(НСтр("ru = 'средств'"));
	СписокПодстрок1.Добавить(НСтр("ru = 'дог'"));
	СписокПодстрок1.Добавить(НСтр("ru = 'нэк'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок1);
	
	// "возмещение за", и "комиссия", и "операции возврата/отмены"
	СписокПодстрок2 = Новый Массив;
	СписокПодстрок2.Добавить(НСтр("ru = 'возм'"));
	СписокПодстрок2.Добавить(НСтр("ru = 'комис'"));
	СписокПодстрок2.Добавить(НСтр("ru = 'возв'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок2);
	
	Возврат Ложь;

КонецФункции

Функция ЭтоЭквайрингПравилоПятое(НомерСчета, ИсходнаяСтрока)

	Если Не Лев(НомерСчета, 5) = "40907" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// "//реестр// кол-во" и "с учетом взаимозачет. вознагр."
	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить(НСтр("ru = '//реестр//'"));
	СписокПодстрок.Добавить(НСтр("ru = 'кол-во'"));
	СписокПодстрок.Добавить(НСтр("ru = 'взаимозачет'"));
	СписокПодстрок.Добавить(НСтр("ru = 'вознагр'"));
	
	Возврат НайденаФразаИзСпискаПодстрок(ИсходнаяСтрока, СписокПодстрок, 1, 0);

КонецФункции

Функция ЭтоЭквайрингПравилоШестое(НомерСчета, ИсходнаяСтрока)

	ПроверяемыеФразы = Новый Массив;
	
	// "перевод средств по договору N ИЭ-", и "по реестру операций от", и "сумма комиссии"
	СписокПодстрок1 = Новый Массив;
	СписокПодстрок1.Добавить(НСтр("ru = 'перевод средств по дог'"));
	СписокПодстрок1.Добавить(НСтр("ru = 'иэ'"));
	СписокПодстрок1.Добавить(НСтр("ru = 'по реестру операций от'"));
	СписокПодстрок1.Добавить(НСтр("ru = 'сумма комиссии'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок1);
	
	// "перевод средств по договору", и "(FOLDS) по реестру операций от", и "сумма комиссии"
	СписокПодстрок2 = Новый Массив;
	СписокПодстрок2.Добавить(НСтр("ru = 'перевод средств по дог'"));
	СписокПодстрок2.Добавить(НСтр("ru = '(folds) по реестру операций от'"));
	СписокПодстрок2.Добавить(НСтр("ru = 'сумма комиссии'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок2);
	
	// "зачисление средств по операциям эквайринга. мерчант N", и "дата реестра", и "комиссия", и "возврат покупки"
	СписокПодстрок3 = Новый Массив;
	СписокПодстрок3.Добавить(НСтр("ru = 'зачисление средств по операциям эквайринга'"));
	СписокПодстрок3.Добавить(НСтр("ru = 'мерчант'"));
	СписокПодстрок3.Добавить(НСтр("ru = 'дата реестра'"));
	СписокПодстрок3.Добавить(НСтр("ru = 'комиссия'"));
	СписокПодстрок3.Добавить(НСтр("ru = 'возврат покупки'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок3);
	
	// "зачисление средств по операциям с МБК (на основании реестров платежей). мерчант N", и "дата реестра", и "комиссия", и "возврат покупки"
	СписокПодстрок4 = Новый Массив;
	СписокПодстрок4.Добавить(НСтр("ru = 'зачисление средств по операциям с мбк (на основании реестров платежей)'"));
	СписокПодстрок4.Добавить(НСтр("ru = 'мерчант'"));
	СписокПодстрок4.Добавить(НСтр("ru = 'дата реестра'"));
	СписокПодстрок4.Добавить(НСтр("ru = 'комиссия'"));
	СписокПодстрок4.Добавить(НСтр("ru = 'возврат покупки'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок4);
	
	// "возмещение по торговому эквайрингу мерчант", и "комиссия", и "терминал", и "возврат покупки"
	СписокПодстрок5 = Новый Массив;
	СписокПодстрок5.Добавить(НСтр("ru = 'возмещение по торговому эквайрингу мерчант'"));
	СписокПодстрок5.Добавить(НСтр("ru = 'комиссия'"));
	СписокПодстрок5.Добавить(НСтр("ru = 'терминал'"));
	СписокПодстрок5.Добавить(НСтр("ru = 'возврат покупки'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок5);
	
	// "оплата товаров и услуг по ТСТ", и "реестр от", и "комиссия", и "возврат покупки по ТСТ"
	СписокПодстрок6 = Новый Массив;
	СписокПодстрок6.Добавить(НСтр("ru = 'оплата товаров и услуг по тст'"));
	СписокПодстрок6.Добавить(НСтр("ru = 'реестр от'"));
	СписокПодстрок6.Добавить(НСтр("ru = 'комиссия'"));
	СписокПодстрок6.Добавить(НСтр("ru = 'возврат покупки по тст'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок6);
	
	// "оплата товаров и услуг по банковским картам (МПК) согласно реестра торг. операций. кол-во операций:", и "удержано по операциям возврата:", и "сумма комиссии"
	СписокПодстрок7 = Новый Массив;
	СписокПодстрок7.Добавить(НСтр("ru = 'оплата товаров и услуг по банковским картам (мпк) согласно реестра торг. операций. кол-во операций:'"));
	СписокПодстрок7.Добавить(НСтр("ru = 'удержано по операциям возврата:'"));
	СписокПодстрок7.Добавить(НСтр("ru = 'сумма комиссии'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок7);
	
	// "эквайринг за", и "комиссия", и "возврат:", и "возврат др. ТСТ:", и "реестр:"
	СписокПодстрок8 = Новый Массив;
	СписокПодстрок8.Добавить(НСтр("ru = 'эквайринг за'"));
	СписокПодстрок8.Добавить(НСтр("ru = 'комиссия'"));
	СписокПодстрок8.Добавить(НСтр("ru = 'возврат:'"));
	СписокПодстрок8.Добавить(НСтр("ru = 'возврат др. тст:'"));
	СписокПодстрок8.Добавить(НСтр("ru = 'реестр:'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок8);
	
	// "эквайринг, по мерчанту", и "удержано ком", и "возвр"
	СписокПодстрок9 = Новый Массив;
	СписокПодстрок9.Добавить(НСтр("ru = 'эквайринг, по мерчанту'"));
	СписокПодстрок9.Добавить(НСтр("ru = 'удержано ком'"));
	СписокПодстрок9.Добавить(НСтр("ru = 'возвр'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок9);
	
	// "по принятым платежам с", и "в т.ч. усл. банка:", и "согласно эл. реестру"
	СписокПодстрок10 = Новый Массив;
	СписокПодстрок10.Добавить(НСтр("ru = 'по принятым платежам с'"));
	СписокПодстрок10.Добавить(НСтр("ru = 'в т.ч. усл. банка:'"));
	СписокПодстрок10.Добавить(НСтр("ru = 'согласно эл. реестру'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок10);
	
	// "терминал N", и "дата операций", и "комиссия банка"
	СписокПодстрок11 = Новый Массив;
	СписокПодстрок11.Добавить(НСтр("ru = 'терминал'"));
	СписокПодстрок11.Добавить(НСтр("ru = 'дата операций'"));
	СписокПодстрок11.Добавить(НСтр("ru = 'комиссия'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок11);
	
	// "возмещение ден. ср-в ТСП за" и "комиссия банка"
	СписокПодстрок12 = Новый Массив;
	СписокПодстрок12.Добавить(НСтр("ru = 'возмещение'"));
	СписокПодстрок12.Добавить(НСтр("ru = 'тсп'"));
	СписокПодстрок12.Добавить(НСтр("ru = 'комиссия'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок12);
	
	// "сумма возмещения", и "по договору N", и "(TTR за", и "комиссия"
	СписокПодстрок13 = Новый Массив;
	СписокПодстрок13.Добавить(НСтр("ru = 'сумма возмещения'"));
	СписокПодстрок13.Добавить(НСтр("ru = 'по дог'"));
	СписокПодстрок13.Добавить(НСтр("ru = '(ttr за'"));
	СписокПодстрок13.Добавить(НСтр("ru = 'комиссия'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок13);
	
	// "возмещение ср-в по операциям эквайринга за", и "согласно договору", и "комиссия по операциям"
	СписокПодстрок14 = Новый Массив;
	СписокПодстрок14.Добавить(НСтр("ru = 'возмещени'"));
	СписокПодстрок14.Добавить(НСтр("ru = 'операци'"));
	СписокПодстрок14.Добавить(НСтр("ru = 'эквайринг'"));
	СписокПодстрок14.Добавить(НСтр("ru = 'согласно дог'"));
	СписокПодстрок14.Добавить(НСтр("ru = 'комиссия по операциям'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок14);
	
	// "возмещение ден. ср-в по дог. экв.", и "оборот:", и "комиссия"
	СписокПодстрок15 = Новый Массив;
	СписокПодстрок15.Добавить(НСтр("ru = 'возмещени'"));
	СписокПодстрок15.Добавить(НСтр("ru = 'по дог'"));
	СписокПодстрок15.Добавить(НСтр("ru = 'экв'"));
	СписокПодстрок15.Добавить(НСтр("ru = 'оборот:'"));
	СписокПодстрок15.Добавить(НСтр("ru = 'комиссия'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок15);
	
	// "общая сумма к возмещению", и "комиссия за осущ. расч.", и "RURвозмещение ден. ср-в по дог. экв.", и "оборот:", и "комиссия:"
	СписокПодстрок16 = Новый Массив;
	СписокПодстрок16.Добавить(НСтр("ru = 'комиссия'"));
	СписокПодстрок16.Добавить(НСтр("ru = 'rurвозмещен'"));
	СписокПодстрок16.Добавить(НСтр("ru = 'по дог'"));
	СписокПодстрок16.Добавить(НСтр("ru = 'экв'"));
	СписокПодстрок16.Добавить(НСтр("ru = 'rurвозмещение ден. ср-в по дог. экв.'"));
	СписокПодстрок16.Добавить(НСтр("ru = 'оборот:'"));
	СписокПодстрок16.Добавить(НСтр("ru = 'комиссия:'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок16);
	
	// "возм. по дог. экв. N", и "об.:", и "ком.:"
	СписокПодстрок17 = Новый Массив;
	СписокПодстрок17.Добавить(НСтр("ru = 'возм'"));
	СписокПодстрок17.Добавить(НСтр("ru = 'по дог'"));
	СписокПодстрок17.Добавить(НСтр("ru = 'экв'"));
	СписокПодстрок17.Добавить(НСтр("ru = 'об.:'"));
	СписокПодстрок17.Добавить(НСтр("ru = 'ком.:'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок17);
	
	// "зачисление денежных средств по договору об обслуживании держателей платежных карт по терминалу" и "сумма комиссии"
	СписокПодстрок18 = Новый Массив;
	СписокПодстрок18.Добавить(НСтр("ru = 'зачисление денежных средств по договору об обслуживании держателей платежных карт по терминалу'"));
	СписокПодстрок18.Добавить(НСтр("ru = 'сумма комиссии'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок18);
	
	// "перечисление по договору N", и "с ТСП ИНН", и "комиссия банка"
	// или "перечисление по договору с ТСП" и "комиссия банка"
	СписокПодстрок19 = Новый Массив;
	СписокПодстрок19.Добавить(НСтр("ru = 'перечисление по дог'"));
	СписокПодстрок19.Добавить(НСтр("ru = 'тсп'"));
	СписокПодстрок19.Добавить(НСтр("ru = 'комиссия банка'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок19);
	
	// "расчеты по дог.", и "за период с", и "сумма оплат", и "сумма возвратов", и "сумма отмены возвратов", и "комиссия"
	СписокПодстрок20 = Новый Массив;
	СписокПодстрок20.Добавить(НСтр("ru = 'расчеты по дог'"));
	СписокПодстрок20.Добавить(НСтр("ru = 'за период с'"));
	СписокПодстрок20.Добавить(НСтр("ru = 'сумма оплат'"));
	СписокПодстрок20.Добавить(НСтр("ru = 'сумма возвратов'"));
	СписокПодстрок20.Добавить(НСтр("ru = 'сумма отмены возвратов'"));
	СписокПодстрок20.Добавить(НСтр("ru = 'комиссия'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок20);
	
	// "возмещение по терминалам:" и "в т.ч. комиссия"
	СписокПодстрок21 = Новый Массив;
	СписокПодстрок21.Добавить(НСтр("ru = 'возмещение по терминалам:'"));
	СписокПодстрок21.Добавить(НСтр("ru = 'в т.ч. комиссия'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок21);
	
	// "расч по дог. б/н опер." и "ком банка"
	СписокПодстрок22 = Новый Массив;
	СписокПодстрок22.Добавить(НСтр("ru = 'расч по дог. б/н опер.'"));
	СписокПодстрок22.Добавить(НСтр("ru = 'ком банка'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок22);
	
	// "возмещение по ТСО по сумме", и "сумма комиссии", и "сумма возмещения", и "дата расчета", и "договор"
	СписокПодстрок23 = Новый Массив;
	СписокПодстрок23.Добавить(НСтр("ru = 'возмещение по тсо по сумме'"));
	СписокПодстрок23.Добавить(НСтр("ru = 'сумма комиссии'"));
	СписокПодстрок23.Добавить(НСтр("ru = 'сумма возмещения'"));
	СписокПодстрок23.Добавить(НСтр("ru = 'дата расчета'"));
	СписокПодстрок23.Добавить(НСтр("ru = 'дог'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок23);
	
	// "перечисление денежных средств по договору MRC/", и "комиссия", и "выплата за"
	СписокПодстрок24 = Новый Массив;
	СписокПодстрок24.Добавить(НСтр("ru = 'перечисление денежных средств по договору mrc'"));
	СписокПодстрок24.Добавить(НСтр("ru = 'комиссия'"));
	СписокПодстрок24.Добавить(НСтр("ru = 'выплата'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок24);
	
	// "платежи по дог.", и "принято", и "комиссия", и "удержана"
	СписокПодстрок25 = Новый Массив;
	СписокПодстрок25.Добавить(НСтр("ru = 'платежи по дог'"));
	СписокПодстрок25.Добавить(НСтр("ru = 'принято'"));
	СписокПодстрок25.Добавить(НСтр("ru = 'комиссия'"));
	СписокПодстрок25.Добавить(НСтр("ru = 'удержана'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок25);
	
	// "//реестр//", и "количество", и "перечисление денежных средств по договору", и "по реестру за"
	СписокПодстрок26 = Новый Массив;
	СписокПодстрок26.Добавить(НСтр("ru = '//реестр//'"));
	СписокПодстрок26.Добавить(НСтр("ru = 'количество'"));
	СписокПодстрок26.Добавить(НСтр("ru = 'перечисление денежных средств по дог'"));
	СписокПодстрок26.Добавить(НСтр("ru = 'по реестру за'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок26);
	
	// "перечисл. ден. ср-в с уч. упл. комис.", и "по дог. от", и "за пер. с"
	СписокПодстрок27 = Новый Массив;
	СписокПодстрок27.Добавить(НСтр("ru = 'перечисл. ден. ср-в с уч. упл. комис.'"));
	СписокПодстрок27.Добавить(НСтр("ru = 'по дог. от'"));
	СписокПодстрок27.Добавить(НСтр("ru = 'за пер. с'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок27);
	
	// "возврат денежных средств по эквайринговым операциям от" и "согласно договору"
	СписокПодстрок28 = Новый Массив;
	СписокПодстрок28.Добавить(НСтр("ru = 'возврат денежных средств по эквайринговым операциям от'"));
	СписокПодстрок28.Добавить(НСтр("ru = 'согласно договору'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок28);
	
	// "расчеты по договору N", и "по операции", и "по мерчанту"
	СписокПодстрок29 = Новый Массив;
	СписокПодстрок29.Добавить(НСтр("ru = 'расчеты по дог'"));
	СписокПодстрок29.Добавить(НСтр("ru = 'по операции'"));
	СписокПодстрок29.Добавить(НСтр("ru = 'по мерчанту'"));
	
	ПроверяемыеФразы.Добавить(СписокПодстрок29);
	
	Если НайденаФразаВМассивеИзСпискаПодстрок(ИсходнаяСтрока, ПроверяемыеФразы, 1, 0) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат СтрНайти(НРег(ИсходнаяСтрока), "зачисление средств по терминалам эквайринга от") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "возмещение средств по услуге эквайринга по реестру операций") > 0
		Или СтрНайти(НРег(ИсходнаяСтрока), "удержание средств по услуге интернет-эквайринга по реестру операций от") > 0;

КонецФункции

Функция НайденаФразаВМассивеИзСпискаПодстрок(ИсходнаяСтрока, МассивСпискаПодстрок, ПозицияПодстроки, Индекс)

	Для Каждого СписокПодстрок Из МассивСпискаПодстрок Цикл
		
		ТекущаяПозицияПодстроки = ПозицияПодстроки;
		ТекущийИндекс = Индекс;
		
		Если НайденаФразаИзСпискаПодстрок(ИсходнаяСтрока, СписокПодстрок, ТекущаяПозицияПодстроки, ТекущийИндекс) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

Функция ЕстьСуммаКомиссииВНазначении(НазначениеПлатежа, СуммаКомиссии)

	Для Каждого ТекущийШаблон Из ШаблоныФорматаСуммы() Цикл
		
		Для Каждого ТекущийСимвол Из СимволыВСумме() Цикл
			
			СуммаСтрокой = Формат(СуммаКомиссии, СтрШаблон(ТекущийШаблон, ТекущийСимвол));
			
			Если СтрНайти(НазначениеПлатежа, СуммаСтрокой) Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СуммаКомиссииСтрокой = Строка(Цел(СуммаКомиссии));
	
	Если СтрНайти(НазначениеПлатежа, СуммаКомиссииСтрокой) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СуммаКомиссииСтрокой = Формат(Цел(СуммаКомиссии), "ЧГ=0");
	
	Если СтрНайти(НазначениеПлатежа, СуммаКомиссииСтрокой) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция СимволыВСумме()
	
	Массив = Новый Массив;
	Массив.Добавить(",");
	Массив.Добавить(":");
	Массив.Добавить(".");
	Массив.Добавить("-");
	Массив.Добавить("=");
	
	Возврат Массив;
	
КонецФункции

Функция ШаблоныФорматаСуммы()
	
	Шаблон = Новый Массив;
	Шаблон.Добавить("ЧРД=%1");
	Шаблон.Добавить("ЧРД=%1; ЧГ=0");
	Шаблон.Добавить("ЧРД=%1; ЧРГ=,");
	
	Возврат Шаблон;
	
КонецФункции

//-- Локализация

#КонецОбласти
