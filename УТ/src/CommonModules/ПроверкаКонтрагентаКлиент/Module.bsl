///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ПроверкаКонтрагента".
// ОбщийМодуль.ПроверкаКонтрагентаКлиент.
//
// Клиентские процедуры проверки контрагента:
//  - открытие формы проверки контрагента;
//  - отображение индексов СПАРК Риски.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Открыть форму с проверкой контрагента.
//
// Параметры:
//  Контрагент - Строка - ИНН,
//             - Определяемый тип КонтрагентОбъект - ссылка на элемент метаданных контрагента,
//             - ДанныеФормыСтруктура - объект контрагент в карточке контрагента;
//             - ТаблицаФормы - список контрагентов в форме списка;
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется команда.
//
Процедура Проверить(Контрагент = Неопределено, Форма = Неопределено) Экспорт
	
	ИНН = Неопределено;
	КонтрагентСсылка = Неопределено;
	
	Если ТипЗнч(Контрагент) = Тип("ДанныеФормыСтруктура") Тогда
		
		КонтрагентСсылка = Контрагент.Ссылка;
		
		Если Контрагент.Ссылка.Пустая()
			Или Форма.Модифицированность Тогда
			
			ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
					|Переход к ""Проверка контрагента"" возможен только после записи данных.
					|Данные будут записаны.'");
			
			ОписаниеКоманды = Новый Структура;
			ОписаниеКоманды.Вставить("Контрагент", Контрагент);
			ОписаниеКоманды.Вставить("Форма",      Форма);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПроверитьПриОтветеНаВопросОЗаписи",
				ЭтотОбъект,
				ОписаниеКоманды);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Контрагент) = Тип("Строка") Тогда
		
		ИНН = Контрагент;
		
	ИначеЕсли ТипЗнч(Контрагент) = Тип("ТаблицаФормы") Тогда
		
		КонтрагентСсылка = Контрагент.ТекущаяСтрока;
		
	Иначе
		
		КонтрагентСсылка = Контрагент;
		
	КонецЕсли;
	
	Если КонтрагентСсылка = Неопределено Тогда
		КонтрагентСсылка = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИНН", ИНН);
	ПараметрыФормы.Вставить("Контрагент", КонтрагентСсылка);
	
	ОткрытьФорму(
		"Обработка.ПроверкаКонтрагента.Форма.Форма",
		ПараметрыФормы,
		,
		КонтрагентСсылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОтобразитьИндексыСПАРК(
	РезультатИндексыКонтрагента,
	КонтрагентОбъект,
	Контрагент,
	ВидКонтрагента,
	Форма) Экспорт
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		Возврат;
	КонецЕсли;
	
	МодульСПАРКРискиКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиентСервер");
	МодульСПАРКРискиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиент");
	
	ТипСтруктура = Тип("Структура");
	ТипСтрока    = Тип("Строка");

	ИспользованиеРазрешено = МодульСПАРКРискиКлиент.ИспользованиеРазрешено();
	Если Не ИспользованиеРазрешено Тогда
		
		Если ТипЗнч(РезультатИндексыКонтрагента) <> ТипСтруктура Тогда
			РезультатИндексыКонтрагента = МодульСПАРКРискиКлиентСервер.НовыйДанныеИндексов();
			// После вызова функции необходимо самостоятельно дозаполнить ключ ДатаОбновления:
			//  ТекущаяДатаСеанса() - для сервера или ОбщегоНазначенияКлиент.ДатаСеанса() - для клиента.
			РезультатИндексыКонтрагента.Вставить("ДатаОбновления", ОбщегоНазначенияКлиент.ДатаСеанса());
		КонецЕсли;
		РезультатИндексыКонтрагента.Вставить(
			"ВидОшибки",
			ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ИспользованиеЗапрещено"));

	Иначе

		// УслугаПодключена - только для модели сервиса.
		УслугаПодключена = ИнтернетПоддержкаПользователейВызовСервера.УслугаПодключена(
			МодульСПАРКРискиКлиентСервер.ИдентификаторУслугиИндикаторыРиска(),
			Неопределено); // Предполагаем, что клиент всегда запущен в какой-то области данных, поэтому явно можно не передавать номер области.
		Если УслугаПодключена <> Истина Тогда
			РезультатИндексыКонтрагента = МодульСПАРКРискиКлиентСервер.НовыйДанныеИндексов();
			// После вызова функции необходимо самостоятельно дозаполнить ключ ДатаОбновления:
			//  ТекущаяДатаСеанса() - для сервера или ОбщегоНазначенияКлиент.ДатаСеанса() - для клиента.
			РезультатИндексыКонтрагента.Вставить("ДатаОбновления", ОбщегоНазначенияКлиент.ДатаСеанса());
			РезультатИндексыКонтрагента.Вставить("РаботаВМоделиСервиса", Истина); // Проверка услуги используется только при работе в модели сервиса.
			РезультатИндексыКонтрагента.Вставить(
				"ВидОшибки",
				ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ТребуетсяОплатаИлиПревышенЛимит"));
			РезультатИндексыКонтрагента.Вставить("СообщениеОбОшибке", НСтр("ru = 'Услуга не подключена.'"));
			РезультатИндексыКонтрагента.Вставить("ИнформацияОбОшибке", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось загрузить индексы 1СПАРК Риски.
					|Услуга с идентификатором %1 не подключена.'"),
				МодульСПАРКРискиКлиентСервер.ИдентификаторУслугиИндикаторыРиска()));
		КонецЕсли;

		Если ТипЗнч(Контрагент) = ТипСтрока Тогда
			ЛокальныйКонтрагент = СокрЛП(Контрагент);
		Иначе
			ЛокальныйКонтрагент = Контрагент;
		КонецЕсли;

		Если ИспользованиеРазрешено И ТипЗнч(РезультатИндексыКонтрагента) <> ТипСтруктура Тогда
			РезультатИндексыКонтрагента = МодульСПАРКРискиКлиент.ИндексыСПАРККонтрагента(
				Форма,
				ЛокальныйКонтрагент,
				ВидКонтрагента);
		КонецЕсли;

	КонецЕсли;

	// Если фоновое задание успело выполниться, то оно уже оповестило форму и заполнило реквизит формы.
	// В таком случае не следует перезаписывать реквизит формы значением, возвращаемым функцией ИндексыСПАРККонтрагента.
	ОбновитьРеквизитФормы = Истина;
	Если ТипЗнч(Форма.ИндексыСПАРКРиски) = ТипСтруктура Тогда
		Если (Форма.ИндексыСПАРКРиски.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзФоновогоЗадания"))
				И (РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ЗапущеноФоновоеЗадание")) Тогда
			Если Форма.ИндексыСПАРКРиски.ДатаОбновления >= РезультатИндексыКонтрагента.ДатаОбновления Тогда
				ОбновитьРеквизитФормы = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ОбновитьРеквизитФормы = Истина Тогда
		Форма.ИндексыСПАРКРиски = РезультатИндексыКонтрагента;
	КонецЕсли;
	
	ПроверкаКонтрагентаКлиентСервер.ОтобразитьИндексыСПАРК(
		РезультатИндексыКонтрагента,
		КонтрагентОбъект,
		ЛокальныйКонтрагент,
		Форма,
		ИспользованиеРазрешено);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьПриОтветеНаВопросОЗаписи(КодВозврата, ОписаниеКоманды) Экспорт
	
	Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОписаниеКоманды.Форма.Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Проверить(
		ОписаниеКоманды.Контрагент,
		ОписаниеКоманды.Форма);
	
КонецПроцедуры

#КонецОбласти