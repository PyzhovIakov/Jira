// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

#Область КонтрактМенеджераДанных

// Возвращаемое значение:
//  ОбщийМодуль
Функция МенеджерДанныхИнтеграцииОблачногоЭДО() Экспорт
	Возврат ИнтерфейсДокументовЭДОИнтеграцияОблака;
КонецФункции

#КонецОбласти // КонтрактМенеджераДанных

#Область ПросмотрФайлаЭлектронногоДокумента

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО 
//  ИдентификаторФормы - УникальныйИдентификатор - для помещения двоичных данных во временное хранилище
// 
// Возвращаемое значение:
//  См. ЛегкийИнтерфейсДокументовЭДО.НовыйРезультатПолученияДанныхФайлаИнформацииОтправителя
Функция ДанныеФайлаИнформацииОтправителяДокумента(ЭлектронныйДокумент, ИдентификаторФормы) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, "ИдентификаторДокумента,
		|ИдентификаторОрганизации");
	УчетнаяЗаписьОблачногоЭДО = РегистрыСведений.НастройкиОблачногоЭДО.УчетнаяЗаписьОблачногоЭДО(
		РеквизитыДокумента.ИдентификаторОрганизации);
	
	ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
		УчетнаяЗаписьОблачногоЭДО, Пользователи.ТекущийПользователь());
		
	ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ДанныеФайлаИнформацииОтправителяДокумента", 
		РеквизитыДокумента.ИдентификаторДокумента);
	
	РезультатВыполнения = ИнтеграцияОблачногоЭДО.ВыполнитьМетодСервиса(ПараметрыВыполнения, ОписаниеМетода,
		КонтекстДиагностики); // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ДанныеФайлаИнформацииОтправителяДокумента
		
	Результат = ДанныеФайлаИнформацииОтправителяДокументаИзФорматаСервиса(РезультатВыполнения);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // ПросмотрФайлаЭлектронногоДокумента

#Область ПросмотрДокумента

#Если Не ВнешнееСоединение Тогда
	
// @skip-check statement-type-change, property-return-type
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//  ** НомерДокумента - Строка
//  ** ДатаДокумента - Дата
//  ** СуммаДокумента - Число
//  ** ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//  ** ЭтоОблачныйЭДО - Булево
//  ** ИдентификаторДокумента - Строка
//  ** ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  ** ИдентификаторОрганизации - Строка
//  ** ИдентификаторКонтрагента - Строка
//  ** Организация - ОпределяемыйТип.Организация
//  ** Контрагент - ОпределяемыйТип.КонтрагентБЭД
//  ** ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  ** СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
//  ** ТребуетсяИзвещение - Булево
//  ** ТребуетсяПодтверждение - Булево
//  ** ВидПодписи - ПеречислениеСсылка.ВидыЭлектронныхПодписей
//  ** ФорматОсновногоТитула - Строка
//  ** ВыгружатьДополнительныеСведения - Булево
//  ** МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//  ** ОбменБезПодписи - Булево
//  * АдресФайловНовогоДокумента - Строка
//  * АдресПредварительнойВизуализацииНовогоДокумента - Строка
//  * УникальныйИдентификатор - УникальныйИдентификатор
//  * СуммаНДСДокументаИзДобавляемогоФайла - Число
//  * СтавкаНДСДокументаИзДобавляемогоФайла - Строка
//  * ВалютаДокументаИзДобавляемогоФайла - Строка
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * Основания - СписокЗначений Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * ОбъектыУчетаДокумента - ДанныеФормыКоллекция Из ДанныеФормыЭлементКоллекции:
//   ** ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * МаршрутУказанВНастройках - Булево
//  * Ответственный - ОпределяемыйТип.Пользователь
//  
//  ПросмотрПодготовленныхДанных - Структура:
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * НастройкиФормирования - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета
//  * АдресДанных - Строка
Процедура ЗаполнитьДокументПоПодготовленнымДанным(Форма, ПросмотрПодготовленныхДанных) Экспорт

	ДанныеПредварительногоПросмотра = ПолучитьИзВременногоХранилища(ПросмотрПодготовленныхДанных.АдресДанных); // См. НовыеДанныеПредварительногоПросмотра
	УдалитьИзВременногоХранилища(ПросмотрПодготовленныхДанных.АдресДанных);
	
	Форма.АдресФайловНовогоДокумента = ПоместитьВоВременноеХранилище(ДанныеПредварительногоПросмотра.ФайлыДокумента,
		Форма.УникальныйИдентификатор);
	Форма.АдресПредварительнойВизуализацииНовогоДокумента = ПоместитьВоВременноеХранилище(
		ДанныеПредварительногоПросмотра.Визуализация, Форма.УникальныйИдентификатор);
		
	Если ЗначениеЗаполнено(ДанныеПредварительногоПросмотра.ДанныеИзСодержанияФайла) Тогда
		ДанныеИзСодержанияФайла = ДанныеПредварительногоПросмотра.ДанныеИзСодержанияФайла;
		
		Форма.Объект.НомерДокумента = ДанныеИзСодержанияФайла.НомерДокумента;
		Форма.Объект.ДатаДокумента = ДанныеИзСодержанияФайла.ДатаДокумента;
		Форма.Объект.СуммаДокумента = ДанныеИзСодержанияФайла.СуммаДокумента;
		Форма.Объект.ТипРегламента = ДанныеИзСодержанияФайла.ТипРегламента;
		
		Форма.СуммаНДСДокументаИзДобавляемогоФайла = ДанныеИзСодержанияФайла.СуммаНДСДокумента;
		Форма.СтавкаНДСДокументаИзДобавляемогоФайла = ДанныеИзСодержанияФайла.СтавкаНДСДокумента;
		Форма.ВалютаДокументаИзДобавляемогоФайла = ДанныеИзСодержанияФайла.ВалютаДокумента;
	Иначе
		Форма.Объект.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный;
	КонецЕсли;
	
	ОписаниеДокумента = ДанныеПредварительногоПросмотра.ОписаниеДокументаЭДО;
	
	ПрикладныеВидыДокументов = ЭлектронныеДокументыЭДО.ПрикладныеВидыДокументов();
	
	Если ПрикладныеВидыДокументов.Найти(ОписаниеДокумента.ВидДокумента) = Неопределено Тогда
		Форма.ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеДокумента.ВидДокумента, "ТипДокумента");
	Иначе
		Форма.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной;
	КонецЕсли;
	
	Форма.Объект.ЭтоОблачныйЭДО = Истина;
	Форма.Объект.ИдентификаторДокумента = ОписаниеДокумента.Идентификатор;
	Форма.Объект.ВидДокумента = ОписаниеДокумента.ВидДокумента;
	Форма.Объект.ИдентификаторОрганизации = ОписаниеДокумента.ИдентификаторОрганизации;
	Форма.Объект.ИдентификаторКонтрагента = ОписаниеДокумента.ИдентификаторКонтрагента;
	Форма.Объект.Организация = ОписаниеДокумента.Организация;
	Форма.Объект.Контрагент = ОписаниеДокумента.Контрагент;
	Форма.Объект.ДоговорКонтрагента = ОписаниеДокумента.Договор;
	Форма.Объект.СпособОбмена = ОписаниеДокумента.СпособОбмена;
	Форма.Объект.ТребуетсяИзвещение = ОписаниеДокумента.ТребуетсяИзвещение;
	Форма.Объект.ТребуетсяПодтверждение = ОписаниеДокумента.ТребуетсяПодтверждение;
	Форма.Объект.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная;
	Форма.Объект.ФорматОсновногоТитула = ОписаниеДокумента.Формат;
	Форма.Объект.МаршрутПодписания = ОписаниеДокумента.МаршрутПодписания;
	Форма.Объект.ВыгружатьДополнительныеСведения = ОписаниеДокумента.ВыгружатьДополнительныеСведения;
	Форма.Объект.ОбменБезПодписи = ОписаниеДокумента.ОбменБезПодписи;
	
	МаршрутРедактируетсяПриСоздании = 
		ОписаниеДокумента.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании();
	Если МаршрутРедактируетсяПриСоздании Тогда
		Форма.Объект.МаршрутПодписания = Неопределено;
	КонецЕсли;

	Форма.Основания.ЗагрузитьЗначения(ОписаниеДокумента.ОбъектыУчета);
	Для Каждого ОбъектУчета Из ОписаниеДокумента.ОбъектыУчета Цикл
		НовыйОбъектУчета = Форма.ОбъектыУчетаДокумента.Добавить();
		НовыйОбъектУчета.ОбъектУчета = ОбъектУчета;
	КонецЦикла;

	Форма.Объект.Ответственный = ИнтеграцияЭДО.ОтветственныйПоДокументуЭДО(Форма.Объект.Организация, 
		Форма.Объект.Контрагент, Форма.Объект.ДоговорКонтрагента);

	Форма.МаршрутУказанВНастройках = ЗначениеЗаполнено(Форма.Объект.МаршрутПодписания);
	
	Если Форма.ТипДокумента <> Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность Тогда
		ЭлектронныеДокументыЭДО.ЗагрузитьИдентификаторыСвязанныхОбъектовУчета(Форма.Объект,
			ОписаниеДокумента.ОбъектыУчета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеДокумента.СвязующийОбъектУчета) Тогда
		Форма.Объект.ИдентификаторСвязи = Строка(ОписаниеДокумента.СвязующийОбъектУчета.УникальныйИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли // ВнешнееСоединение

#Область ПредварительныйПросмотр

// Параметры:
//  ОписанияДокументовОбъектаУчета - см. ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотра.ОписанияДокументовОбъектаУчета
//  НастройкиФормирования - см. ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотра.НастройкиФормирования
//  ПараметрыОткрытия - см. ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотра.ПараметрыОткрытия
// 
// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДО.НовыйРезультатПодготовкиДанныхПредварительногоПросмотра
Функция ПодготовитьДанныеПредварительногоПросмотра(ОписанияДокументовОбъектаУчета, НастройкиФормирования, 
	ПараметрыОткрытия) Экспорт
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияФункции(Новый УникальныйИдентификатор);
	
	Если ЗначениеЗаполнено(ПараметрыОткрытия.ДанныеКаталога) И ЭтоАдресВременногоХранилища(ПараметрыОткрытия.ДанныеКаталога) Тогда
		ПараметрыОткрытия.ДанныеКаталога = ПолучитьИзВременногоХранилища(ПараметрыОткрытия.ДанныеКаталога);
	КонецЕсли;	
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполненияВФоне,
		"ИнтерфейсДокументовЭДОИнтеграцияОблака.ДанныеПредварительногоПросмотра", // См. ИнтерфейсДокументовЭДОИнтеграцияОблака.ДанныеПредварительногоПросмотра
		ОписанияДокументовОбъектаУчета, НастройкиФормирования, ПараметрыОткрытия);
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		Возврат РезультатПодготовкиДанныхПросмотраПослеДлительнойОперации(ДлительнаяОперация);
	КонецЕсли;
	
	РезультатПодготовкиДанных = ИнтерфейсДокументовЭДО.НовыйРезультатПодготовкиДанныхПредварительногоПросмотра();
	РезультатПодготовкиДанных.ДлительнаяОперация = ДлительнаяОперация;
	
	Возврат РезультатПодготовкиДанных;
	
КонецФункции

// @skip-check property-return-type
// 
// Параметры:
//  ДлительнаяОперация - См. ДлительныеОперации.ВыполнитьФункцию
// 
// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДО.НовыйРезультатПодготовкиДанныхПредварительногоПросмотра
Функция РезультатПодготовкиДанныхПросмотраПослеДлительнойОперации(ДлительнаяОперация) Экспорт
	
	РезультатПодготовкиДанных = ИнтерфейсДокументовЭДО.НовыйРезультатПодготовкиДанныхПредварительногоПросмотра();
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	РезультатДлительнойОперации = ОбщегоНазначенияБЭД.РезультатДлительнойОперации(ДлительнаяОперация,
		КонтекстДиагностики, НСтр("ru = 'Подготовка данных предварительного просмотра'"));
	
	Если ТипЗнч(РезультатДлительнойОперации) = Тип("Структура") Тогда
		ОписанияОшибок = РезультатДлительнойОперации.ОписанияОшибок; // Массив Из См. ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования
		РезультатПодготовкиДанных.Ошибка = ОписанияОшибок.Количество() > 0;
		ДанныеПредварительногоПросмотра = РезультатДлительнойОперации.ДанныеПредварительногоПросмотра; //см. ВизуализацияЭДОИнтеграцияОблака.ДанныеПредварительногоПросмотра
		РезультатПодготовкиДанных.АдресДанныхПредварительногоПросмотра = ПоместитьВоВременноеХранилище(
			ДанныеПредварительногоПросмотра,
			Новый УникальныйИдентификатор());
		РезультатПодготовкиДанных.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(ОписанияОшибок,
			Новый УникальныйИдентификатор());
		Если ДанныеПредварительногоПросмотра.Свойство("КонтекстДиагностики")
			И ДанныеПредварительногоПросмотра.КонтекстДиагностики.СообщатьОбОшибке Тогда
			ЗаполнитьЗначенияСвойств(КонтекстДиагностики,
				РезультатДлительнойОперации.ДанныеПредварительногоПросмотра.КонтекстДиагностики);
			
		КонецЕсли;
		Если ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(КонтекстДиагностики) Тогда
			РезультатПодготовкиДанных.Ошибка = Истина;
		КонецЕсли;
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда 
		РезультатПодготовкиДанных.ДлительнаяОперация = ДлительнаяОперация;
	КонецЕсли;
	
	РезультатПодготовкиДанных.КонтекстДиагностики = КонтекстДиагностики;
	Возврат РезультатПодготовкиДанных;
	
КонецФункции

// Формирует данные электронного документа.
// 
// Параметры:
//  ВыбранныйФайл - Структура - данные выбранного файла:
//  * Хранение - Строка - расположение данных во временном хранилище
//  * Имя - Строка - путь к файлу / имя файла
//
// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДО.НовыйРезультатПодготовкиДанныхПредварительногоПросмотраПоФайлуXML
Функция ПодготовитьДанныеПредварительногоПросмотраПоФайлуXML(ВыбранныйФайл) Экспорт
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияФункции(Новый УникальныйИдентификатор);
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполненияВФоне,
		"ИнтерфейсДокументовЭДОИнтеграцияОблака.ДанныеПредварительногоПросмотраПоФайлуXML", // См. ИнтерфейсДокументовЭДОИнтеграцияОблака.ДанныеПредварительногоПросмотраПоФайлуXML
		ВыбранныйФайл);
	
	РезультатПодготовкиДанных = РезультатПодготовкиДанныхПросмотраПоФайлуXMLПослеДлительнойОперации(ДлительнаяОперация);
	
	Если Не ЗначениеЗаполнено(РезультатПодготовкиДанных) Тогда
		РезультатПодготовкиДанных = ИнтерфейсДокументовЭДО.НовыйРезультатПодготовкиДанныхПредварительногоПросмотраПоФайлуXML();
		РезультатПодготовкиДанных.ДлительнаяОперация = ДлительнаяОперация;
	КонецЕсли;
	
	Возврат РезультатПодготовкиДанных;
	
КонецФункции

// Параметры:
//  ДлительнаяОперация - См. ДлительныеОперации.ВыполнитьФункцию
// 
// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДО.НовыйРезультатПодготовкиДанныхПредварительногоПросмотраПоФайлуXML
Функция РезультатПодготовкиДанныхПросмотраПоФайлуXMLПослеДлительнойОперации(ДлительнаяОперация) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	РезультатПодготовкиДанных = ОбщегоНазначенияБЭД.РезультатДлительнойОперации(ДлительнаяОперация,
		КонтекстДиагностики, НСтр("ru = 'Подготовка данных предварительного просмотра по файлу XML'"));
	
	Если ТипЗнч(РезультатПодготовкиДанных) = Тип("Структура") Тогда
		Возврат РезультатПодготовкиДанных;
	КонецЕсли;
	
	РезультатПодготовкиДанных = 
		ИнтерфейсДокументовЭДО.НовыйРезультатПодготовкиДанныхПредварительногоПросмотраПоФайлуXML();
	РезультатПодготовкиДанных.КонтекстДиагностики = КонтекстДиагностики;
	Возврат РезультатПодготовкиДанных;
	
КонецФункции

#КонецОбласти // ПредварительныйПросмотр

// @skip-check invocation-parameter-type-intersect, property-return-type
//
// Параметры:
//  ДанныеКомпонентов - См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентовПросмотраДокумента
//  ПараметрыЗаполнения - См. ЛегкийИнтерфейсДокументовЭДО.НовыеПараметрыПолученияДанныхКомпонентов
Процедура ЗаполнитьДанныеКомпонентовПросмотраДокумента(ДанныеКомпонентов, ПараметрыЗаполнения) Экспорт
	
	СвойстваДокумента = ПараметрыЗаполнения.СвойстваДокумента;
	НастройкиФормы = ПараметрыЗаполнения.НастройкиФормы;
	ОбъектыУчета = ПараметрыЗаполнения.ОбъектыУчетаДокумента;
	ПредварительныйПросмотр = ПараметрыЗаполнения.ПредварительныйПросмотр;
	
	НовыеОписанияПодписей = ЛегкийИнтерфейсДокументовЭДО.НовыеОписанияУстановленныхПодписей();
	НовыеСопроводительныеЗаписи = ЛегкийИнтерфейсДокументовЭДО.НовыеСопроводительныеЗаписи();
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПометкиНаУдаление) Тогда
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельПометкиНаУдаление(
			ДанныеКомпонентов.ПанельПометкиНаУдаление, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельВизуализации) Тогда
		Если ЗначениеЗаполнено(ПредварительныйПросмотр)
			И ЗначениеЗаполнено(ПредварительныйПросмотр.ПредварительнаяВизуализация) Тогда
			ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельВизуализации(
				ДанныеКомпонентов.ПанельВизуализации, ПредварительныйПросмотр.ПредварительнаяВизуализация,
				НастройкиФормы);
		Иначе
			ДанныеКомпонентов.ПанельВизуализации.АсинхронноеПолучение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельКомандНастроекВизуализации) Тогда
		Если ЗначениеЗаполнено(ПредварительныйПросмотр)
			И ЗначениеЗаполнено(ПредварительныйПросмотр.ПредварительнаяВизуализация) Тогда
			ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельКомандНастроекВизуализации(
				ДанныеКомпонентов.ПанельКомандНастроекВизуализации,
				ПредварительныйПросмотр.ПредварительнаяВизуализация, НастройкиФормы);
		Иначе
			ДанныеКомпонентов.ПанельКомандНастроекВизуализации.АсинхронноеПолучение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельИтогов) Тогда
		ЗаполнитьДанныеКомпонентаПанельИтогов(ДанныеКомпонентов.ПанельИтогов, СвойстваДокумента,
			ПредварительныйПросмотр);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельОтветственного) Тогда
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельОтветственного(
			ДанныеКомпонентов.ПанельОтветственного, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельКомандВходящегоДокумента) Тогда
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельКомандВходящегоДокумента(
			ДанныеКомпонентов.ПанельКомандВходящегоДокумента, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельКомандИсходящегоДокумента) Тогда
		ИмяФайла = ?(ЗначениеЗаполнено(ПредварительныйПросмотр), ПредварительныйПросмотр.ИмяДобавляемогоФайла, "");
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельКомандИсходящегоДокумента(
			ДанныеКомпонентов.ПанельКомандИсходящегоДокумента, СвойстваДокумента, НастройкиФормы, ОбъектыУчета,
				ИмяФайла);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПакета) Тогда
		ЗаполнитьДанныеКомпонентаПанельПакета(ДанныеКомпонентов.ПанельПакета, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельКарточки) Тогда
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельКарточки(
			ДанныеКомпонентов.ПанельКарточки, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельСостояния) Тогда
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельСостояния(
			ДанныеКомпонентов.ПанельСостояния, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельОтраженияВУчете) Тогда
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельОтраженияВУчете(
			ДанныеКомпонентов.ПанельОтраженияВУчете, СвойстваДокумента, ОбъектыУчета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПодписей) Тогда
		Если СвойстваДокумента.ЭтоНовыйДокумент Тогда
			ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельПодписей(ДанныеКомпонентов.ПанельПодписей, 
				НовыеОписанияПодписей);
		Иначе
			ДанныеКомпонентов.ПанельПодписей.АсинхронноеПолучение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельМаршрута) Тогда
		Если СвойстваДокумента.ЭтоНовыйДокумент Тогда
			ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельМаршрута(ДанныеКомпонентов.ПанельМаршрута,
				СвойстваДокумента, НовыеОписанияПодписей, ПараметрыЗаполнения.ИзмененМаршрутПодписания);
		Иначе
			ДанныеКомпонентов.ПанельМаршрута.АсинхронноеПолучение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельСопроводительнойЗапискиВходящегоДокумента) Тогда
		ДанныеКомпонентов.ПанельСопроводительнойЗапискиВходящегоДокумента.АсинхронноеПолучение = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельСопроводительнойЗапискиИсходящегоДокумента) Тогда
		Если СвойстваДокумента.ЭтоНовыйДокумент Тогда
			ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельСопроводительнойЗапискиИсходящегоДокумента(
				ДанныеКомпонентов.ПанельСопроводительнойЗапискиИсходящегоДокумента, СвойстваДокумента,
				НовыеСопроводительныеЗаписи);
		Иначе
			ДанныеКомпонентов.ПанельСопроводительнойЗапискиИсходящегоДокумента.АсинхронноеПолучение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельЗакладокВходящегоДокумента) Тогда
		ДанныеКомпонентов.ПанельЗакладокВходящегоДокумента.АсинхронноеПолучение = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельЗакладокИсходящегоДокумента) Тогда
		Если СвойстваДокумента.ЭтоНовыйДокумент Тогда
			ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельЗакладокИсходящегоДокумента(
				ДанныеКомпонентов.ПанельЗакладокИсходящегоДокумента, НовыеОписанияПодписей, 
				НовыеСопроводительныеЗаписи, СвойстваДокумента);
		Иначе
			ДанныеКомпонентов.ПанельЗакладокИсходящегоДокумента.АсинхронноеПолучение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельРеквизитов) Тогда
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельРеквизитовПоСвойствамДокумента(
			ДанныеКомпонентов.ПанельРеквизитов, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПредставленияФайла) Тогда
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельПредставленияФайлаПоСвойствамДокумента(
			ДанныеКомпонентов.ПанельПредставленияФайла, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельВизуализацииТекущихДел) Тогда
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельВизуализацииТекущихДелПоСвойствамДокумента(
			ДанныеКомпонентов.ПанельВизуализацииТекущихДел, СвойстваДокумента);
	КонецЕсли;
	
КонецПроцедуры

// @skip-check property-return-type, invocation-parameter-type-intersect, dynamic-access-method-not-found, variable-value-type
// 
// Параметры:
//  ДанныеКомпонентов - см. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентовПросмотраДокумента
//  ПараметрыЗаполнения - см. ЛегкийИнтерфейсДокументовЭДО.НовыеПараметрыПолученияДанныхКомпонентов
Процедура ЗаполнитьДанныеКомпонентовПросмотраДокументаАсинхронно(ДанныеКомпонентов, ПараметрыЗаполнения) Экспорт
	
	СвойстваДокумента = ПараметрыЗаполнения.СвойстваДокумента;
	НастройкиФормы = ПараметрыЗаполнения.НастройкиФормы;
	ПредварительныйПросмотр = ПараметрыЗаполнения.ПредварительныйПросмотр; // См. ЛегкийИнтерфейсДокументовЭДО.НовыеПараметрыПредварительногоПросмотраДанныхКомпонентов
	ЭтоПредварительныйПросмотрДокумента = ЗначениеЗаполнено(ПредварительныйПросмотр);
	ЭлектронныйДокумент = ПараметрыЗаполнения.СвойстваДокумента.Ссылка;
	ОписанияПодписей = Неопределено; // Неопределено,См. ОписанияУстановленныхПодписейДокумента
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		НастройкиПредставления = ВизуализацияЭДО.НовыеНастройкиПредставления();
		НастройкиПредставления.ЕстьНастройкаВыводаБанковскихРеквизитов = НастройкиФормы.ВыводитьБанковскиеРеквизиты;
		НастройкиПредставления.ЕстьНастройкаВыводаДополнительныхДанных = Не НастройкиФормы.ОтключитьВыводДопДанных;
		НастройкиПредставления.ЕстьНастройкаВыводаКопияВерна = Не НастройкиФормы.ОтключитьВыводКопияВерна;
		КэшВизуализации = ВизуализацияЭДО.ПолучитьВизуализациюИзКэша(ЭлектронныйДокумент, НастройкиПредставления);
	Иначе
		КэшВизуализации = ВизуализацияЭДО.НовыеСвойстваВизуализации();
	КонецЕсли;
	
	Если ПараметрыЗаполнения.НастройкиФормы.ПеречитатьКэшВизуализации Тогда
		КэшВизуализации.ТребуетсяОбновить = Истина;
	КонецЕсли;
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	ИдентификаторДокумента = СвойстваДокумента.ИдентификаторДокумента;
	ПакетМетодов = ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса();
	
	СостояниеСинхронизации = РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.СостояниеДанныхДокумента(
		СвойстваДокумента.ИдентификаторОрганизации, СвойстваДокумента.ИдентификаторДокумента);
	ТребуетсяПолнаяСинхронизация = (СостояниеСинхронизации.МеткаВремени = 0)
		Или Не РегламентыЭДО.ЭтоСостояниеЗавершенногоЭДО(
			ЭлектронныеДокументыЭДОПовтИспНаВызов.СостояниеДокумента(ЭлектронныйДокумент));
	Если ТребуетсяПолнаяСинхронизация Тогда
		ОписаниеМетода = ЭлектронныеДокументыЭДОИнтеграцияОблака.ОписаниеМетодаДанныеПолнойСинхронизацииДокументаЭДО(
			СостояниеСинхронизации);
		ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, 0);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельВизуализации)
		Или (ЗначениеЗаполнено(ДанныеКомпонентов.ПанельВизуализацииТекущихДел)
		И ДанныеКомпонентов.ПанельВизуализацииТекущихДел.АсинхронноеПолучение) Тогда
		ПараметрыВизуализации = ИнтерфейсДокументовЭДО.НовыеПараметрыВизуализацииДокумента();
		ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты = НастройкиФормы.ВыводитьБанковскиеРеквизиты;
		ПараметрыВизуализации.ВыводитьДопДанные = Не НастройкиФормы.ОтключитьВыводДопДанных;
		ПараметрыВизуализации.ВыводитьКопияВерна = Не НастройкиФормы.ОтключитьВыводКопияВерна;
		ПараметрыВизуализации.ВыводитьШапкуСИдДокумента = Ложь;
		
		Если ЭтоПредварительныйПросмотрДокумента Тогда
			ФайлДокумента = Новый Структура;
			ФайлДокумента.Вставить("ИмяФайла", ПредварительныйПросмотр.ИмяДобавляемогоФайла);
			ФайлДокумента.Вставить("Данные", Base64Строка(ПредварительныйПросмотр.ДвоичныеДанныеДобавляемогоФайла));
			ФайлыДокумента = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФайлДокумента);
			
			ВидДокумента = Новый Структура;
			РеквизитыВидаДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СвойстваДокумента.ВидДокумента,
				"Наименование, ТипДокумента");
			ВидДокумента.Вставить("Наименование", РеквизитыВидаДокумента.Наименование);
			ВидДокумента.Вставить("ТипДокумента", ОбщегоНазначения.ИмяЗначенияПеречисления(
				РеквизитыВидаДокумента.ТипДокумента));
				
			ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
				"ВизуализацияФайловДокументаЭДО", ФайлыДокумента, ВидДокумента,
				СвойстваДокумента.ФорматОсновногоТитула, ПараметрыВизуализации);
			ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, 1);
		Иначе
			Если КэшВизуализации.ТребуетсяОбновить Тогда
				ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
					"ВизуализацияДокументаЭДО", ИдентификаторДокумента,
					ПараметрыВизуализации, Ложь);
				ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, 1);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеСинхронизацииВФорматеСервиса = Неопределено;
	ВизуализацияВФорматеСервиса = Неопределено;
	
	Если ЗначениеЗаполнено(ПакетМетодов) Тогда
		
		УчетнаяЗаписьОблачногоЭДО = РегистрыСведений.НастройкиОблачногоЭДО.УчетнаяЗаписьОблачногоЭДО(
			СвойстваДокумента.ИдентификаторОрганизации);
		Если Не ЗначениеЗаполнено(УчетнаяЗаписьОблачногоЭДО) Тогда
			ВызватьИсключение НСтр("ru = 'Отсутствует учетная запись облачного ЭДО'");
		КонецЕсли;
	
		ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
			УчетнаяЗаписьОблачногоЭДО);
	
		РезультатыПакета = ИнтеграцияОблачногоЭДО.ВыполнитьПакетМетодовСервиса(ПараметрыВыполнения, ПакетМетодов,
			КонтекстДиагностики);
		
		ДанныеСинхронизацииВФорматеСервиса = РезультатыПакета[0]; // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ДанныеПолнойСинхронизацииДокументаЭДО
		ВизуализацияВФорматеСервиса = РезультатыПакета[1]; // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ВизуализацияДокументаЭДО
		
	КонецЕсли;
	
	ЭлектронныеДокументыЭДОИнтеграцияОблака.ЗагрузитьПолныеДанныеДокументаЭДО(ДанныеСинхронизацииВФорматеСервиса,
		ЭлектронныйДокумент, СостояниеСинхронизации);
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельИтогов)
		И ДанныеКомпонентов.ПанельИтогов.АсинхронноеПолучение Тогда
		ИтогиДокумента = ЭлектронныеДокументыЭДО.ИтогиДокументаПоСодержанию(СвойстваДокумента.Ссылка);
		
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельИтоговПоДаннымИзСодержания(
			ДанныеКомпонентов.ПанельИтогов, СвойстваДокумента, ИтогиДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПакета) Тогда
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельПакета(
			ДанныеКомпонентов.ПанельПакета, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПодписей) Тогда
		Если ОписанияПодписей = Неопределено Тогда
			ОписанияПодписей = ЛегкийИнтерфейсДокументовЭДО.ОписанияУстановленныхПодписейДокумента(
				СвойстваДокумента.Ссылка);
		КонецЕсли;
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельПодписей(ДанныеКомпонентов.ПанельПодписей,
			ОписанияПодписей);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельЗакладокВходящегоДокумента) Тогда
		Если ОписанияПодписей = Неопределено Тогда
			ОписанияПодписей = ЛегкийИнтерфейсДокументовЭДО.ОписанияУстановленныхПодписейДокумента(
				СвойстваДокумента.Ссылка);
		КонецЕсли;
		СопроводительныеЗаписи = ЛегкийИнтерфейсДокументовЭДО.СопроводительныеЗаписиДокумента(
			СвойстваДокумента.Ссылка);
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельЗакладокВходящегоДокумента(
			ДанныеКомпонентов.ПанельЗакладокВходящегоДокумента, ОписанияПодписей, СопроводительныеЗаписи);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельЗакладокИсходящегоДокумента) Тогда
		Если ОписанияПодписей = Неопределено Тогда
			ОписанияПодписей = ЛегкийИнтерфейсДокументовЭДО.ОписанияУстановленныхПодписейДокумента(
				СвойстваДокумента.Ссылка);
		КонецЕсли;
		СопроводительныеЗаписи = ЛегкийИнтерфейсДокументовЭДО.СопроводительныеЗаписиДокумента(
			СвойстваДокумента.Ссылка);
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельЗакладокИсходящегоДокумента(
			ДанныеКомпонентов.ПанельЗакладокИсходящегоДокумента, ОписанияПодписей, СопроводительныеЗаписи,
			СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельСопроводительнойЗапискиВходящегоДокумента) Тогда
		СопроводительныеЗаписи = ЛегкийИнтерфейсДокументовЭДО.СопроводительныеЗаписиДокумента(
			СвойстваДокумента.Ссылка);
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельСопроводительнойЗапискиВходящегоДокумента(
			ДанныеКомпонентов.ПанельСопроводительнойЗапискиВходящегоДокумента,
			СвойстваДокумента,
			СопроводительныеЗаписи);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельСопроводительнойЗапискиИсходящегоДокумента) Тогда
		СопроводительныеЗаписи = ЛегкийИнтерфейсДокументовЭДО.СопроводительныеЗаписиДокумента(
			СвойстваДокумента.Ссылка);
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельСопроводительнойЗапискиИсходящегоДокумента(
			ДанныеКомпонентов.ПанельСопроводительнойЗапискиИсходящегоДокумента,
			СвойстваДокумента,
			СопроводительныеЗаписи);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельМаршрута) Тогда
		Если ОписанияПодписей = Неопределено Тогда
			ОписанияПодписей = ЛегкийИнтерфейсДокументовЭДО.ОписанияУстановленныхПодписейДокумента(
				СвойстваДокумента.Ссылка);
		КонецЕсли;
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельМаршрута(ДанныеКомпонентов.ПанельМаршрута,
			СвойстваДокумента, ОписанияПодписей, ПараметрыЗаполнения.ИзмененМаршрутПодписания);
	КонецЕсли;
	
	ВизуализацияДокумента = Неопределено;
	Если КэшВизуализации.ТребуетсяОбновить И ЗначениеЗаполнено(ВизуализацияВФорматеСервиса) Тогда
		ВизуализацияДокумента = 
			ВизуализацияЭДОИнтеграцияОблака.ВизуализацияДокументаИзФорматаСервиса(ВизуализацияВФорматеСервиса);
		Если Не ЭтоПредварительныйПросмотрДокумента Тогда
			ВизуализацияЭДО.СохранитьКэшВизуализацииДокумента(ЭлектронныйДокумент, ВизуализацияДокумента);
		КонецЕсли;
		Если ВизуализацияДокумента.ТипДанных = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.HTMLДокумент Тогда
			ВизуализацияДокумента.ПредставлениеДокумента = ПолучитьСтрокуИзДвоичныхДанных(
					ВизуализацияДокумента.ПредставлениеДокумента, КодировкаТекста.UTF8);
		КонецЕсли;
	Иначе
		ВизуализацияДокумента = ВизуализацияЭДО.НовыеСвойстваВизуализации();
		ЗаполнитьЗначенияСвойств(ВизуализацияДокумента, КэшВизуализации);
	КонецЕсли;
	
	ЗаполнитьДоступностьПользовательскихНастроекПредставленияДокумента(
		ВизуализацияДокумента.ПользовательскиеНастройкиПредставления, 
		ВизуализацияДокумента.ТипДанных, 
		СвойстваДокумента.ТипДокумента);
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельВизуализации) Тогда
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельВизуализации(ДанныеКомпонентов.ПанельВизуализации,
			ВизуализацияДокумента, НастройкиФормы);
		
		Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельКомандНастроекВизуализации) Тогда
			ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельКомандНастроекВизуализации(
				ДанныеКомпонентов.ПанельКомандНастроекВизуализации, ВизуализацияДокумента, НастройкиФормы);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПредставленияФайла) 
			И ВизуализацияДокумента.ТипДанных = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.PdfДокумент Тогда
		ЗаполнитьДанныеКомпонентаПанельПредставленияФайлаАсинхронно(ДанныеКомпонентов.ПанельПредставленияФайла,
			ВизуализацияДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельВизуализацииТекущихДел) Тогда
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельВизуализацииТекущихДел(
			ДанныеКомпонентов.ПанельВизуализацииТекущихДел, ВизуализацияДокумента);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПросмотрФайлаЭлектронногоДокумента

// @skip-check invocation-parameter-type-intersect, property-return-type
//
// Параметры:
//  ДанныеФайлаВФорматеСервиса - См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ДанныеФайлаИнформацииОтправителяДокумента
// 
// Возвращаемое значение:
//  См. ЛегкийИнтерфейсДокументовЭДО.НовыйРезультатПолученияДанныхФайлаИнформацииОтправителя
Функция ДанныеФайлаИнформацииОтправителяДокументаИзФорматаСервиса(ДанныеФайлаВФорматеСервиса)
	
	Результат = ЛегкийИнтерфейсДокументовЭДО.НовыйРезультатПолученияДанныхФайлаИнформацииОтправителя();
	Если Не ЗначениеЗаполнено(ДанныеФайлаВФорматеСервиса) Тогда
		ВидОперации = НСтр("ru = 'Получение файла электронного документа из облачного ЭДО'");
		ТекстСообщения = НСтр("ru = 'Не удалось получить файл электронного документа из облачного ЭДО'");
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ТекстСообщения, ТекстСообщения);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(Результат.КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		Возврат Результат;
	КонецЕсли;
	
	ДанныеФайла = ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеФайлаИнформацииОтправителя();
	
	ДанныеФайла.ДвоичныеДанные = Base64Значение(ДанныеФайлаВФорматеСервиса.Данные);
	ДанныеФайла.ИмяФайла = ДанныеФайлаВФорматеСервиса.ИмяФайла;
	ДанныеФайла.ПомеченНаУдаление = ДанныеФайлаВФорматеСервиса.ПомеченНаУдаление;
	Результат.ДанныеФайла = ДанныеФайла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // ПросмотрФайлаЭлектронногоДокумента

#Область ПросмотрДокумента

#Область ПредварительныйПросмотр

// Параметры:
//  ОписанияДокументовОбъектаУчета - См. ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотра.ОписанияДокументовОбъектаУчета
//  НастройкиФормирования - См. ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотра.НастройкиФормирования
//  ПараметрыОткрытия - См. ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотра.ПараметрыОткрытия
// 
// Возвращаемое значение:
//  См. ВизуализацияЭДОИнтеграцияОблака.ДанныеПредварительногоПросмотра
Функция ДанныеПредварительногоПросмотра(ОписанияДокументовОбъектаУчета, НастройкиФормирования,
	ПараметрыОткрытия) Экспорт
	
	Возврат ВизуализацияЭДОИнтеграцияОблака.ДанныеПредварительногоПросмотра(ОписанияДокументовОбъектаУчета,
		НастройкиФормирования, ПараметрыОткрытия);
	
КонецФункции

// Параметры:
//  ВыбранныйФайл - Структура - данные выбранного файла:
//  * Хранение - Строка - расположение данных во временном хранилище
//  * Имя - Строка - путь к файлу / имя файла
// 
// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотраПоФайлуXML
Функция ДанныеПредварительногоПросмотраПоФайлуXML(ВыбранныйФайл) Экспорт
	Возврат ИнтерфейсДокументовЭДО.НовыйРезультатПодготовкиДанныхПредварительногоПросмотраПоФайлуXML();
КонецФункции

#КонецОбласти // ПредварительныйПросмотр

// Параметры:
//  ДанныеКомпонента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельПакета
//  СвойстваДокумента - Структура:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Процедура ЗаполнитьДанныеКомпонентаПанельПакета(ДанныеКомпонента, СвойстваДокумента)
	
	ИдентификаторПакета = ПакетыДокументовЭДОПовтИспНаВызов.ИдентификаторПакетаДокумента(СвойстваДокумента.Ссылка);
	Если Не ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыПакета = ПакетыДокументовЭДОПовтИспНаВызов.ДокументыПакета(Строка(ИдентификаторПакета));
	
	ЕстьНеформализованныеДокументы = ЭлектронныеДокументыЭДО.ЕстьНеформализованныеДокументы(ЭлектронныеДокументыПакета);
	
	Если ЕстьНеформализованныеДокументы Тогда
		ДанныеКомпонента.АсинхронноеПолучение = Истина;
	Иначе
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельПакета(ДанныеКомпонента, СвойстваДокумента);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДанныеКомпонента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельИтогов
//  СвойстваДокумента - Структура:
//  * СуммаДокумента - Число
//  ПредварительныйПросмотр - см. ЛегкийИнтерфейсДокументовЭДО.НовыеПараметрыПредварительногоПросмотраДанныхКомпонентов
Процедура ЗаполнитьДанныеКомпонентаПанельИтогов(ДанныеКомпонента, СвойстваДокумента, ПредварительныйПросмотр)
	
	Если ЗначениеЗаполнено(ПредварительныйПросмотр)
		И ЗначениеЗаполнено(ПредварительныйПросмотр.ИтогиДокумента) Тогда
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельИтоговПоДаннымИзСодержания(
			ДанныеКомпонента, СвойстваДокумента, ПредварительныйПросмотр.ИтогиДокумента);
	Иначе
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельИтогов(ДанныеКомпонента, СвойстваДокумента);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДанныеКомпонента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельПредставленияФайла
//  ПредставлениеФайлаВФорматеСервиса - См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ПредставлениеФайлаДокументаЭДО
Процедура ЗаполнитьДанныеКомпонентаПанельПредставленияФайлаАсинхронно(ДанныеКомпонента,
	ПредставлениеФайлаВФорматеСервиса)
	
	ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельПредставленияФайла(ДанныеКомпонента,
		ПредставлениеФайлаВФорматеСервиса);
	
КонецПроцедуры

// Параметры:
//  ПользовательскиеНастройкиПредставления - См. ВизуализацияЭДО.ПользовательскиеНастройкиПредставления
//  ТипДанныхПредставления - ПеречислениеСсылка.ТипыДанныхВизуализацииДокументаЭДО
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
Процедура ЗаполнитьДоступностьПользовательскихНастроекПредставленияДокумента(ПользовательскиеНастройкиПредставления,
	ТипДанныхПредставления, ТипДокумента)
	
	Если ТипДанныхПредставления <> Перечисления.ТипыДанныхВизуализацииДокументаЭДО.ТабличныйДокумент
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.Внутренний
		Или ЭлектронныеДокументыЭДО.ЭтоПрикладнойТипДокумента(ТипДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетНаОплату Тогда

		ПользовательскиеНастройкиПредставления.ЕстьНастройкаВыводаДополнительныхДанных = Истина;
		ПользовательскиеНастройкиПредставления.ЕстьНастройкаВыводаКопияВерна = Истина;
	
	ИначеЕсли ТипДокумента <> Перечисления.ТипыДокументовЭДО.ДоговорныйДокумент
		И ТипДокумента <> Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность
		И ТипДокумента <> Перечисления.ТипыДокументовЭДО.Прочее Тогда
		
		ПользовательскиеНастройкиПредставления.ЕстьНастройкаВыводаБанковскихРеквизитов = Истина;
		ПользовательскиеНастройкиПредставления.ЕстьНастройкаВыводаДополнительныхДанных = Истина;
		ПользовательскиеНастройкиПредставления.ЕстьНастройкаВыводаКопияВерна = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПросмотрДокумента

#КонецОбласти // СлужебныеПроцедурыИФункции
