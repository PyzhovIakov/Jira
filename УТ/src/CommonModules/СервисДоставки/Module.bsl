////////////////////////////////////////////////////////////////////////////////
// Подсистема "Сервис доставки".
// ОбщийМодуль.СервисДоставки.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщиеПроцедурыИФункции

// Получает значения общих параметров доступных сервисов доставки.
// Добавляет полученные значения в свойство ПараметрыСервисаДоставки входящего параметра ПараметрыФормы.
// 
// Параметры:
//  ПараметрыФормы - Структура - Параметры формы. Содержит свойства:
//   * ИмяФормы - Строка - имя получаемой формы
//   * ТипГрузоперевозки - Число
//                       - ПеречислениеСсылка.ТипыГрузоперевозки - Тип грузоперевозки
//   * ОрганизацияБизнесСети - ОпределяемыйТип.ОрганизацияСервисДоставки - Организация, подключенная к 1С:Бизнес-сеть
//   * ПараметрыГрузоперевозчиков - Соответствие из число - Параметры доступных сервисов доставки. 
//     См. РегистрыСведений.НастройкиОбщиеСервисДоставки.ПолучитьЗначенияНастроекДоступныхСервисовДоставки
//   * ЕдинственнаяПодключеннаяОрганизацияБизнесСети - ОпределяемыйТип.ОрганизацияСервисДоставки - Единственная
//     подключенная Организация к 1С:Бизнес-сеть.
Процедура ПараметрыСервисаДоставки(ПараметрыФормы) Экспорт
	
	ТипГрузоперевозки = ПараметрыФормы.ТипГрузоперевозки;

	Если ЗначениеЗаполнено(ПараметрыФормы.ПараметрыСервисаДоставки) Тогда
		
		// После выбора грузоперевозчика
		Параметры = ПараметрыФормы.ПараметрыСервисаДоставки;
		ДоступныеСервисыДоставки = Параметры.ДоступныеСервисыДоставки;
		
	Иначе
		
		Параметры = Новый Структура;
		
		Параметры.Вставить("ДоступныеСервисыДоставки", Новый Массив);
		Параметры.Вставить("ИнтернетПоддержкаПодключена", Ложь);
		Параметры.Вставить("ОрганизацияПодключена", Ложь);
		Параметры.Вставить("ПараметрыГрузоперевозчиков", Новый Соответствие);
		Параметры.Вставить("ЕдинственнаяПодключеннаяОрганизацияБизнесСети", Неопределено);
		
		ДоступныеСервисыДоставки = Неопределено;
		Если Не ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
			
			ДоступныеСервисыДоставки = СервисДоставкиВызовСервера.ДоступныеСервисыДоставки();
			Сервис1СКурьерика = ДоступныеСервисыДоставки.Найти(СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика());
			Если Сервис1СКурьерика <> Неопределено Тогда
				Если ПараметрыФормы.ИмяФормы = "ОтслеживаниеЗаказа" Тогда
					ДоступныеСервисыДоставки.Удалить(Сервис1СКурьерика);
				Иначе
					// Исключение сервиса Курьерика из доступных, если тип документа-основания не поддерживается
					ДоступныеТипыДокументов = СервисДоставкиКлиентСервер.ТипыДокументовОснованийКурьерика();
					Для Каждого ДокументОснование Из ПараметрыФормы.ДокументыОснования Цикл
						Если ДоступныеТипыДокументов.Найти(ТипЗнч(ДокументОснование.Значение)) = Неопределено Тогда
							ДоступныеСервисыДоставки.Удалить(Сервис1СКурьерика);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			Параметры.ДоступныеСервисыДоставки = ДоступныеСервисыДоставки;
			
			Если ДоступныеСервисыДоставки.Количество() = 1 Тогда
				ТипГрузоперевозки = ДоступныеСервисыДоставки[0];
				ПараметрыФормы.ТипГрузоперевозки = ТипГрузоперевозки;
			Иначе
				// Начать выбор грузоперевозчика
				ПараметрыФормы.Вставить("ПараметрыСервисаДоставки", Параметры);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Параметры.ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	Параметры.ЕдинственнаяПодключеннаяОрганизацияБизнесСети = ЕдинственнаяПодключеннаяОрганизацияБизнесСети();
	
	ПараметрыГрузоперевозчиков = РегистрыСведений.НастройкиОбщиеСервисДоставки.ПолучитьЗначенияНастроекДоступныхСервисовДоставки(
		"ОрганизацияБизнесСети", ДоступныеСервисыДоставки);
	Для Каждого ПараметрыГрузоперевозки Из ПараметрыГрузоперевозчиков Цикл
		Если ЗначениеЗаполнено(ПараметрыГрузоперевозки.Значение.ОрганизацияБизнесСети) Тогда
			Если Не СервисДоставкиСлужебный.ОрганизацияПодключена(ПараметрыГрузоперевозки.Значение.ОрганизацияБизнесСети) Тогда
				ПараметрыГрузоперевозки.Значение.ОрганизацияБизнесСети = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Параметры.ПараметрыГрузоперевозчиков = ПараметрыГрузоперевозчиков;
	
	ОрганизацияБизнесСети = ПараметрыФормы.ОрганизацияБизнесСети;
	Если ЗначениеЗаполнено(ОрганизацияБизнесСети) Тогда
		Параметры.ОрганизацияПодключена = БизнесСеть.ОрганизацияПодключена(ОрганизацияБизнесСети);
	КонецЕсли;
	Если Не Параметры.ОрганизацияПодключена Тогда
		ОрганизацияБизнесСети = ОрганизацияПоУмолчанию(ТипГрузоперевозки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипГрузоперевозки) И ПараметрыФормы.ДокументыОснования.Количество() > 0 Тогда
		
		Если ПустаяСтрока(ПараметрыФормы.ИмяФормы) Тогда
			ПараметрыФормы.ИмяФормы = СервисДоставкиКлиентСервер.ИмяФормыСервисаДоставки(ТипГрузоперевозки, ПараметрыФормы.ДокументыОснования);
		КонецЕсли;
		
		Если СтрНачинаетсяС(ПараметрыФормы.ИмяФормы, "КарточкаЗаказа") И ПараметрыФормы.РежимМастера = 0 Тогда
			ПараметрыЗаказа = ПараметрыЗаказаНаДоставку(ТипГрузоперевозки, ПараметрыФормы.ДокументыОснования,
				ОрганизацияБизнесСети);
			ПараметрыФормы.ИмяФормы = ПараметрыЗаказа.ИмяФормы;
			Если ПараметрыФормы.ИмяФормы = "БыстрыйЗаказ" Тогда
				ПараметрыФормы.РежимОткрытияОкнаФормы = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			КонецЕсли;
			ПараметрыФормы.Вставить("ПараметрыЗаказа", ПараметрыЗаказа);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ПараметрыСервисаДоставки", Параметры);
	ПараметрыФормы.Вставить("ОрганизацияБизнесСети", ОрганизацияБизнесСети);
	
КонецПроцедуры

// Добавляет элементы формы 1С:Доставки на форму объекта при создании на сервере.
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, из которой вызвана процедура.
//   МестоРазмещенияКоманд - ГруппаФормы - место для размещения, по умолчанию - командная панель формы.
//   ПараметрыОповещения - Структура - параметры, где может быть установлен источник команды.
//
Процедура ПриСозданииНаСервере(Форма, МестоРазмещенияКоманд = Неопределено, ПараметрыОповещения = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСервис1СДоставка")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьСервис1СКурьер")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьСервис1СКурьерика")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьСервис1ССДЭК") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоРаботыССервисомДоставки() Тогда
		Возврат;
	КонецЕсли;
	
	// Делаем видимой отдельную группу с доставкой
	ЭлементУправления = Форма.Элементы.Найти("ГруппаСервисДоставки");
	Если ЭлементУправления <> Неопределено Тогда
		
		ЭлементУправления.Видимость = Истина;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка")
			И ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
			
			Результат = РегистрыСведений.ДанныеЗаказовСервисДоставки.КоличествоЗаказовПоОснованиям(Форма.Объект.Ссылка);
			
			Если Результат.Количество() > 0 И Результат[0].Значение > 0 Тогда
				
				ЭлементГруппаПодчиненныеЗаказыНаДоставку = Форма.Элементы.Вставить(
					"ГруппаПодчиненныеЗаказыНаДоставку",
					Тип("ГруппаФормы"),
					ЭлементУправления.Родитель,
					ЭлементУправления);
				
				ЭлементГруппаПодчиненныеЗаказыНаДоставку.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ЭлементГруппаПодчиненныеЗаказыНаДоставку.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
				ЭлементГруппаПодчиненныеЗаказыНаДоставку.ОтображатьЗаголовок = Ложь;
				ЭлементГруппаПодчиненныеЗаказыНаДоставку.ЦветФона = WebЦвета.Лимонный;
				
				ЭлементКартинка = Форма.Элементы.Добавить(
					"КартинкаПодчиненныеЗаказыНаДоставку",
					Тип("ДекорацияФормы"),
					ЭлементГруппаПодчиненныеЗаказыНаДоставку);
				
				ЭлементКартинка.Вид = ВидДекорацииФормы.Картинка;
				ЭлементКартинка.Картинка = БиблиотекаКартинок.ИнформацияБЭД;
				
				ЭлементДекорация = Форма.Элементы.Добавить(
					"ДекорацияПодчиненныеЗаказыНаДоставку",
					Тип("ДекорацияФормы"),
					ЭлементГруппаПодчиненныеЗаказыНаДоставку);
				
				ЭлементДекорация.Заголовок = Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока(НСтр("ru = 'На основании документа введено'")), " ",
					Новый ФорматированнаяСтрока(СтрШаблон("%1: %2", НСтр("ru = 'заказов на доставку'"),
						Результат[0].Значение), , , , "Ссылка"));
					
				ЭлементДекорация.АвтоМаксимальнаяШирина = Ложь;
				ЭлементДекорация.РастягиватьПоГоризонтали = Истина;
				ЭлементДекорация.УстановитьДействие(
					"ОбработкаНавигационнойСсылки",
					"Подключаемый_ДекорацияСервисДоставкиОбработкаНавигационнойСсылки");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет доступна ли работа с формой.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, из которой вызвана процедура.
//  Отказ - Булево - Признак запрета работы с формой
//  ПравоОтправкиЗаказовНаДоставку - Неопределено, Булево - Право отправки грузоперевозчику заказов на доставку
// 
// Возвращаемое значение:
//  Булево - Недоступна работа с формой
Функция НедоступнаРаботаСФормой(Форма, Отказ, ПравоОтправкиЗаказовНаДоставку = Неопределено) Экспорт
	
	Если Не ПравоРаботыССервисомДоставки(Истина) Тогда
		Отказ = Истина;
		Возврат Отказ;
	КонецЕсли;
	
	Организация = Форма.ОрганизацияБизнесСетиСсылка;
	СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(Организация, Отказ);
	Если Отказ Тогда
		Возврат Отказ;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран тип грузоперевозки'"), , , , Отказ);
	ИначеЕсли Не ТипГрузоперевозкиДоступен(Форма.ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбранный тип грузоперевозки не доступен'"), , , , Отказ);
	КонецЕсли;
	
	Если ПравоОтправкиЗаказовНаДоставку <> Неопределено Тогда
		ПравоОтправкиЗаказовНаДоставку = ПравоОтправкиЗаказовНаДоставкуПеревозчику();
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

// Установить значения реквизитов по параметрам.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, из которой вызвана процедура.
//  Параметры - Структура - Параметры
Процедура УстановитьЗначенияРеквизитовПоПараметрам(Форма, Параметры) Экспорт
	
	ИсключаемыеСвойства = Новый Массив;
	ИсключаемыеСвойства.Добавить("ТолькоПросмотр");
	ИсключаемыеСвойства.Добавить("ЗакрыватьПриВыборе");
	ИсключаемыеСвойства.Добавить("ЗакрыватьПриЗакрытииВладельца");
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры, "СоответствиеСкладов") Тогда
		ИсключаемыеСвойства.Добавить("СоответствиеСкладов");
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(Форма, Параметры, , СтрСоединить(ИсключаемыеСвойства, ", "));
	
КонецПроцедуры

#КонецОбласти

#Область МетодыСервиса

// Создание заказа на доставку в сервисе.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата  - Строка - адрес хранилища с результатом.
//
Процедура СоздатьИзменитьЗаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаСозданиеИзменениеЗаказаНаДоставку(ПараметрыЗапроса);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура;
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаСоздатьИзменитьЗаказНаДоставку(РезультатЗапроса, Результат);
	КонецЕсли;
		
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Оформление заказа на доставку у грузоперевозчика.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ОформитьЗаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	ПравоОтправкиЗаказовНаДоставкуПеревозчику(Истина);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьЗаказНаДоставку());
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);

	Результат = Новый Структура;
	Результат.Вставить("СостояниеИдентификатор", 0);
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		ТекущееФоновоеЗадание = ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();
		Если ТекущееФоновоеЗадание <> Неопределено Тогда
			МассивСообщений = ТекущееФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
		Иначе
			МассивСообщений = ПолучитьСообщенияПользователю(Истина);
		КонецЕсли;
		Если МассивСообщений.Количество() Тогда
			Результат = Новый Структура;
			Результат.Вставить("СостояниеИдентификатор", 0);
			Результат.Вставить("Ошибки", Новый Массив);
			Результат.Ошибки.Добавить(МассивСообщений[0].Текст);
		КонецЕсли;
	ИначеЕсли ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаОформитьЗаказНаДоставку(РезультатЗапроса, Результат, ПараметрыЗапроса);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Создать изменить отправить заказы на доставку.
// 
// Параметры:
//  ПараметрыВыполнения - Структура - Параметры запроса
//  АдресРезультата - Строка - Адрес хранилища с результатом
// 
// Возвращаемое значение:
//  Массив Из Структура, Неопределено - Результат работы функции
//
Функция СоздатьИзменитьОтправитьЗаказыНаДоставку(Знач ПараметрыВыполнения, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	Результат = Неопределено;
	
	Кэш = Неопределено;
	ОбработанныеЗаказы = Новый Массив;
	Результат = Новый Массив;
	Отправка = ПараметрыВыполнения.Отправка;
	ТипГрузоперевозки = ПараметрыВыполнения.ТипГрузоперевозки;
	ПравоОтправки = ПравоОтправкиЗаказовНаДоставкуПеревозчику(Истина);
	Организация = ПараметрыВыполнения.ОрганизацияБизнесСетиСсылка;
	ГрупповаяОбработка = ?(ПараметрыВыполнения.ГрупповаяОбработка, "true", "false");
	ПараметрыДанныеФормы = ПараметрыВыполнения.ПараметрыДанныеФормы;
	
	Если ПараметрыВыполнения.Свойство("СписокЗаказов") Тогда
		МассивЗаказов = ПараметрыВыполнения.СписокЗаказов; // Массив из Структура
	Иначе
		МассивЗаказов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыВыполнения);
	КонецЕсли;
	
	Счетчик = 0;
	Количество = МассивЗаказов.Количество();
	СообщитьПрогресс = Количество > 1;
	
	Для Каждого ДанныеЗаказа Из МассивЗаказов Цикл
		
		Отказ = Ложь;
		
		Счетчик = Счетчик + 1;
		
		Если ОбработанныеЗаказы.Найти(ДанныеЗаказа.Идентификатор) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Ошибки = Новый Массив;
		РезультатДанныеЗаказа = Новый Структура;
		РезультатДанныеЗаказа.Вставить("Ошибки",  Ошибки);
		РезультатДанныеЗаказа.Вставить("ЭтоСозданиеШаблона",  Ложь);
		РезультатДанныеЗаказа.Вставить("ЭтоЗаполнениеКопированием",  Ложь);
		
		Если ПустаяСтрока(ДанныеЗаказа.Идентификатор) Тогда
			
			ПараметрыЗаказаПоОснованию = ПараметрыЗаказаНаДоставку(ТипГрузоперевозки, ДанныеЗаказа.ДокументыОснования);
			ЗаполнитьЗначенияСвойств(ДанныеЗаказа, ПараметрыЗаказаПоОснованию, , "ДокументыОснованияИдентификаторы");
			Если ДанныеЗаказа.ДокументыОснования.Количество() > 0 Тогда
				ДанныеЗаказа.ПунктВыдачиКлиента.Идентификатор = СервисДоставки.ПолучитьПунктВыдачиКлиента(ТипГрузоперевозки,
					СкладДокумента(ДанныеЗаказа.ДокументыОснования[0].Значение));
			КонецЕсли;
			
			Если ПустаяСтрока(ДанныеЗаказа.ПунктВыдачиКлиента.Идентификатор) Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось определить пункт выдачи.'");
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки,
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекстОшибки), Истина);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Ошибки) Тогда
				
				ДанныеЗаказа.СуммаДокумента = ДанныеЗаказа.ПолнаяСтоимость;
				ДанныеЗаказа.СуммаНаложенногоПлатежа = ДанныеЗаказа.ПолнаяСтоимость;
				ДанныеЗаказа.ПолнаяСтоимость = 0;
				
				Для Каждого СтрокаТоварныйСостав Из ПараметрыЗаказаПоОснованию.ТоварныйСостав Цикл
					НоваяСтрока = ДанныеЗаказа.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоварныйСостав);
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			ЗапросСервиса = НовыйЗапросСервиса(ДанныеЗаказа, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказНаДоставку());
			ЗапросСервиса.Вставить("ОрганизацияБизнесСети", Организация);
			РезультатЗапросаПолучить = ВыполнитьЗапрос(ЗапросСервиса, Отказ, Кэш);

			Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапросаПолучить) Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки,
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СервисДоставкиКлиентСервер.ТекстОшибкиВнутренняяОшибкаСервиса()),
					Истина);
			ИначеЕсли ТипЗнч(РезультатЗапросаПолучить) = Тип("Структура") Тогда
				ОбработатьРезультатЗапросаПолучитьЗаказНаДоставку(РезультатЗапросаПолучить, РезультатДанныеЗаказа);
				Если РезультатДанныеЗаказа.Ошибки.Количество() > 0 Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки, РезультатДанныеЗаказа.Ошибки, Истина);
				Иначе
					ЗаполнитьЗначенияСвойств(ДанныеЗаказа, РезультатДанныеЗаказа.Данные);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Ошибки) Тогда
			
			ЗаполнитьЗначенияСвойств(ДанныеЗаказа, ПараметрыДанныеФормы);
			
			СервисДоставкиПереопределяемый.ЗаполнитьРеквизитыКонтактногоЛицаПолучателяПоУмолчанию(ДанныеЗаказа,
				Не ЗначениеЗаполнено(ДанныеЗаказа.Получатель.КонтактноеЛицо.Ссылка)
				И ПустаяСтрока(ДанныеЗаказа.Получатель.КонтактноеЛицо.Наименование),
				Не ЗначениеЗаполнено(ДанныеЗаказа.Получатель.КонтактноеЛицо.Телефон.Представление));
			
			ЗапросСервиса = ЗапросСервисаСозданиеИзменениеЗаказаНаДоставку(ДанныеЗаказа);
			ЗапросСервиса.Вставить("ОрганизацияБизнесСети", Организация);
			ЗапросСервиса.Заголовки.Вставить("groupProcessing", ГрупповаяОбработка);
			РезультатЗапросаСоздатьИзменить = ВыполнитьЗапрос(ЗапросСервиса, Отказ, Кэш);
	
			Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапросаСоздатьИзменить) Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки,
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СервисДоставкиКлиентСервер.ТекстОшибкиВнутренняяОшибкаСервиса()),
					Истина);
			ИначеЕсли ТипЗнч(РезультатЗапросаСоздатьИзменить) = Тип("Структура") Тогда
				ОбработатьРезультатЗапросаСоздатьИзменитьЗаказНаДоставку(РезультатЗапросаСоздатьИзменить,
					РезультатДанныеЗаказа, Истина);
				Если РезультатДанныеЗаказа.Ошибки.Количество() > 0 Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки, РезультатДанныеЗаказа.Ошибки, Истина);
				Иначе
					ДанныеЗаказа.Идентификатор = РезультатДанныеЗаказа.Идентификатор;
					ОбработанныеЗаказы.Добавить(ДанныеЗаказа.Идентификатор);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Отправка И ПравоОтправки И Не ПустаяСтрока(ДанныеЗаказа.Идентификатор) И Не ЗначениеЗаполнено(Ошибки) Тогда
			
			Если Не ЗначениеЗаполнено(ДанныеЗаказа.Получатель.КонтактноеЛицо.Ссылка)
				И ПустаяСтрока(ДанныеЗаказа.Получатель.КонтактноеЛицо.Наименование) Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось определить контактное лицо получателя с указанным номером телефона.'");
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки,
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекстОшибки), Истина);
			ИначеЕсли ПустаяСтрока(ДанныеЗаказа.Получатель.Адрес.Представление) Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось определить адрес доставки.'");
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки,
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекстОшибки), Истина);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Ошибки) Тогда
				
				ЗапросСервиса = НовыйЗапросСервиса(ДанныеЗаказа, СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьЗаказНаДоставку());
				ЗапросСервиса.Вставить("ОрганизацияБизнесСети", Организация);
				ЗапросСервиса.Заголовки.Вставить("groupProcessing", ГрупповаяОбработка);
				РезультатЗапросаОтправить = ВыполнитьЗапрос(ЗапросСервиса, Отказ, Кэш);

				РезультатДанныеЗаказа.Вставить("Отправка", Истина);
				Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапросаОтправить) Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
						СервисДоставкиКлиентСервер.ТекстОшибкиВнутренняяОшибкаСервиса()), Истина);
				ИначеЕсли ТипЗнч(РезультатЗапросаОтправить) = Тип("Структура") Тогда
					ОбработатьРезультатЗапросаОформитьЗаказНаДоставку(РезультатЗапросаОтправить, РезультатДанныеЗаказа,
						ПараметрыВыполнения);
					Если РезультатДанныеЗаказа.Ошибки.Количество() > 0 Тогда
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки, РезультатДанныеЗаказа.Ошибки, Истина);
					КонецЕсли;
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
		РезультатДанныеЗаказа.Ошибки = Ошибки;
		РезультатДанныеЗаказа.Вставить("ИдентификаторыСтрок", ДанныеЗаказа.ИдентификаторыСтрок);
		
		Результат.Добавить(РезультатДанныеЗаказа);
		
		Если СообщитьПрогресс И Счетчик < Количество Тогда
			ДлительныеОперации.СообщитьПрогресс(НСтр("ru = 'Обработка документов.'"),
				СтрШаблон(НСтр("ru = 'Обработка документов: %1 из %2'"), Счетчик, Количество),
				Результат);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получение заказа на доставку по идентификатору.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьЗаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказНаДоставку());
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Данные", Новый Структура("СостояниеИдентификатор", 0));
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		Результат.Вставить("ЭтоСозданиеШаблона", ПараметрыЗапроса.ЭтоСозданиеШаблона);
		Результат.Вставить("ЭтоЗаполнениеКопированием", ПараметрыЗапроса.ЭтоЗаполнениеКопированием);
		ОбработатьРезультатЗапросаПолучитьЗаказНаДоставку(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка заказов на доставку по отборам.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата  - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьЗаказыНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеСпискаЗаказовНаДоставкуСОтборами(ПараметрыЗапроса);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьЗаказыНаДоставку(РезультатЗапроса, Результат, ПараметрыЗапроса);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Обновление заказа на доставку по идентификатору.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ОбновитьЗаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыОбновитьЗаказНаДоставку());
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаОбновитьЗаказНаДоставку(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Отмена заказа на доставку
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ОтменитьЗаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результаты = Новый СписокЗначений;
	
	Идентификаторы = ПараметрыЗапроса.Идентификаторы;
	Если Идентификаторы.Количество() = 0 Тогда
		Идентификаторы.Добавить(ПараметрыЗапроса.Идентификатор);
	КонецЕсли;
	
	Для Каждого ЭлементСпискаЗначений Из Идентификаторы Цикл
		
		ПараметрыЗапроса.Идентификатор = ЭлементСпискаЗначений.Значение;
		ЗапросСервиса = ЗапросСервисаОтменаЗаказаНаДоставку(ПараметрыЗапроса);
		РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
		
		Результат = НовыйПараметрыОтветаОтменитьЗаказНаДоставку();
		Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
			ОбработатьРезультатЗапросаОтменитьЗаказНаДоставку(РезультатЗапроса, Результат);
		КонецЕсли;
		Если Результат.Ошибки.Количество() = 0 Тогда
			Если ПустаяСтрока(Результат.Номер) Тогда
				Результат.Вставить("Номер", ЭлементСпискаЗначений.Представление);
			КонецЕсли;
		КонецЕсли;
		Результаты.Добавить(Результат, ЭлементСпискаЗначений.Представление);
		
	КонецЦикла;
	
	Если Результаты.Количество() = 1 Тогда
		Результаты = Результаты[0].Значение;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результаты, АдресРезультата);
	
КонецПроцедуры

// Создание заказа на доставку в сервисе.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата  - Строка - адрес хранилища с результатом.
//
Процедура СоздатьМультизаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Отказ = Не ПравоОтправкиЗаказовНаДоставкуПеревозчику(Истина);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаСозданиеМультизаказаНаДоставку(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Новый Массив());
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		ТекущееФоновоеЗадание= ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();
		Если ТекущееФоновоеЗадание <> Неопределено Тогда
			МассивСообщений = ТекущееФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
		Иначе
			МассивСообщений = ПолучитьСообщенияПользователю(Истина);
		КонецЕсли;
		
		Если МассивСообщений.Количество() Тогда 
			Результат.Ошибки.Добавить(МассивСообщений[0].Текст);
		КонецЕсли;
	ИначеЕсли ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаСоздатьМультизаказНаДоставку(РезультатЗапроса, Результат);
	КонецЕсли;

	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Добавление заказа на доставку в мультизаказ.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для проверки запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ДобавитьЗаказНаДоставкуВМультизаказ(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаДобавлениеЗаказаНаДоставкуВМультизаказ(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Новый Массив());
	
	Если Отказ Тогда
		ТекущееФоновоеЗадание= ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();
		Если ТекущееФоновоеЗадание <> Неопределено Тогда
			МассивСообщений = ТекущееФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
		Иначе
			МассивСообщений = ПолучитьСообщенияПользователю(Истина);
		КонецЕсли;
		
		Если МассивСообщений.Количество() > 0 Тогда 
			Результат.Ошибки.Добавить(МассивСообщений[0].Текст);
		КонецЕсли;
	Иначе
		Результат.Вставить("ОперацияВыполнена", Истина);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Оформление мультизаказа на доставку у грузоперевозчика.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ОформитьМультизаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Отказ = Не ПравоОтправкиЗаказовНаДоставкуПеревозчику(Истина);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаОформлениеМультизаказаНаДоставку(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Новый Массив());
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		ТекущееФоновоеЗадание= ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();
		Если ТекущееФоновоеЗадание <> Неопределено Тогда
			МассивСообщений = ТекущееФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
		Иначе
			МассивСообщений = ПолучитьСообщенияПользователю(Истина);
		КонецЕсли;
		
		Если МассивСообщений.Количество() Тогда 
			Результат.Ошибки.Добавить(МассивСообщений[0].Текст);
		КонецЕсли;
	ИначеЕсли ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаОформитьМультизаказНаДоставку(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение мультизаказа на доставку по идентификатору.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьМультизаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеМультизаказаНаДоставку(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьМультизаказНаДоставку(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Обновление мультизаказа на доставку по идентификатору.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ОбновитьМультизаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаОбновлениеМультизаказаНаДоставку(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаОбновитьМультизаказНаДоставку(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Отмена мультизаказа на доставку
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ОтменитьМультизаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результаты = Новый СписокЗначений;
	
	Идентификаторы = ПараметрыЗапроса.Идентификаторы;
	Если Идентификаторы.Количество() = 0 Тогда
		Идентификаторы.Добавить(ПараметрыЗапроса.Идентификатор);
	КонецЕсли;
	
	Для Каждого ЭлементСпискаЗначений Из Идентификаторы Цикл
		
		ПараметрыЗапроса.Идентификатор = ЭлементСпискаЗначений.Значение;
		ЗапросСервиса = ЗапросСервисаОтменаМультизаказаНаДоставку(ПараметрыЗапроса);
		РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
		
		Результат = НовыйПараметрыОтветаОтменитьЗаказНаДоставку();
		Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
			ОбработатьРезультатЗапросаОтменитьМультизаказНаДоставку(РезультатЗапроса, Результат);
		КонецЕсли;
		Результат.Вставить("Номер", ЭлементСпискаЗначений.Представление);
		Результаты.Добавить(Результат, ЭлементСпискаЗначений.Представление);
		
	КонецЦикла;
	
	Если Результаты.Количество() = 1 Тогда
		Результаты = Результаты[0].Значение;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результаты, АдресРезультата);
	
КонецПроцедуры

// Получение списка строк графика заказа
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьГрафикДвиженияЗаказа(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрафикДвиженияЗаказа());
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьГрафикДвиженияЗаказа(РезультатЗапроса, Результат, ПараметрыЗапроса);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка строк графика заказа
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьГрафикДвиженияЗаказаПоТрекНомеру(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрафикДвиженияЗаказаПоТрекНомеру());
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьГрафикДвиженияЗаказа(РезультатЗапроса, Результат, ПараметрыЗапроса);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка доступных печатных форм для заказа на доставку.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьДоступныеПечатныеФормы(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ЗапросСервиса = ЗапросСервисаПолучениеСпискаДоступныхПечатныхФорм(ПараметрыЗапроса, Отказ);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура;
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьДоступныеФормы(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка выбранных файлов печатных форм.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
Процедура ПолучитьФайлыПечатныхФорм(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Кэш = Неопределено;
	РезультатИтоговый = Новый Структура;
	РезультатИтоговый.Вставить("Список", Новый Массив);
	РезультатИтоговый.Вставить("Ошибки", Новый Массив);
	Для Каждого ПараметрыЗапросаПоЗаказу Из ПараметрыЗапроса.Параметры Цикл
		
		ЗапросСервиса = ЗапросСервисаПолучениеФайловДоступныхПечатныхФорм(ПараметрыЗапросаПоЗаказу, Отказ);
		РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ, Кэш);
		
		Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
			Если ПараметрыЗапроса.Параметры.Количество() = 1 Тогда
				Возврат
			Иначе
				Отказ = Ложь;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Результат = Новый Структура;
		Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
			ОбработатьРезультатЗапросаПолучитьФайлыДоступныхФорм(РезультатЗапроса, Результат);
		КонецЕсли;
		
		Если Результат.Свойство("Ошибки") И Результат.Ошибки.Количество() > 0 Тогда
			Для Каждого Элемент Из Результат.Ошибки Цикл
				РезультатИтоговый.Ошибки.Добавить(Элемент);
			КонецЦикла;
		Иначе
			Для Каждого Элемент Из Результат.Список Цикл
				РезультатИтоговый.Список.Добавить(Элемент);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;

	ПоместитьВоВременноеХранилище(РезультатИтоговый, АдресРезультата);
	
КонецПроцедуры

// Получение списка доступных тарифов.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьТарифы(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеТарифов(ПараметрыЗапроса);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьТарифы(РезультатЗапроса, Результат, ПараметрыЗапроса);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка доступных тарифов.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьТариф(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеТарифов(ПараметрыЗапроса);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьТарифы(РезультатЗапроса, Результат, ПараметрыЗапроса);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка состояний заказов на доставку.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьСостояния(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояния());
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьСостояния(РезультатЗапроса, Результат, ПараметрыЗапроса);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка типов грузоперевозок сервиса.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьТипыГрузоперевозки(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеСпискаТиповГрузоперевозок(ПараметрыЗапроса);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьТипыГрузоперевозок(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка грузоперевозчиков сервиса.
//
// Параметры:
//  ПараметрыЗапроса - см. НовыйПараметрыЗапросаПолучитьГрузоперевозчиков
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьГрузоперевозчиков(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеСпискаГрузоперевозчиков(ПараметрыЗапроса);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура;
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		
		ОбработатьРезультатЗапросаПолучитьГрузоперевозчиков(РезультатЗапроса, Результат);
		Если Результат.Ошибки.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
		Результат.Вставить("Организация", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
		
		ТребуетсяПроверкаАвторизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса,
			"ТребуетсяПроверкаАвторизации", Истина);
		
		Если ТребуетсяПроверкаАвторизации Тогда
		
			ПараметрыЗапросаАвторизации = Новый Структура("ОрганизацияБизнесСетиСсылка, ИдентификаторСервиса, ТипГрузоперевозки",
				Результат.Организация, , ПараметрыЗапроса.ТипГрузоперевозки);
			
			Для Каждого ТекущийЭлементСписка Из Результат.Список Цикл
				
				ПараметрыЗапросаАвторизации.ИдентификаторСервиса = ТекущийЭлементСписка.ИдентификаторСервиса;
				
				АдресРезультатаЗапросАвторизации = ПоместитьВоВременноеХранилище(Неопределено);
				ПолучитьНастройкиАвторизации(ПараметрыЗапросаАвторизации, АдресРезультатаЗапросАвторизации);
				РезультатАвторизации = ПолучитьИзВременногоХранилища(АдресРезультатаЗапросАвторизации);
				
				Если ТипЗнч(РезультатАвторизации) = Тип("Структура") И РезультатАвторизации.Свойство("Авторизован") Тогда
					ТекущийЭлементСписка.Вставить("УспешнаяАвторизация", РезультатАвторизации.Авторизован);
				Иначе
					ТекущийЭлементСписка.Вставить("УспешнаяАвторизация", Ложь);
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение данных грузоперевозчика.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьДанныеГрузоперевозчика(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДанныеГрузоперевозчика());
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьДанныеГрузоперевозчика(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка грузоперевозчиков сервиса.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьПунктыВыдачиКлиента(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеСпискаПунктовВыдачиКлиента(ПараметрыЗапроса);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура("ТипГрузоперевозки", ПараметрыЗапроса.ТипГрузоперевозки);
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьПунктыВыдачиКлиента(РезультатЗапроса, Результат);
		Результат.Вставить("Организация", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка курьеров сервиса.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьСписокКурьеров(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучитьСписокКурьеров(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьСписокКурьеров(РезультатЗапроса, Результат);
		Результат.Вставить("Организация", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка контрагентов сервиса перевозчика.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьСписокКонтрагентов(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучитьСписокКонтрагентов(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьСписокКонтрагентов(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получить состояние подключения организации.
// 
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса.
//  АдресРезультата - Строка - Адрес результата.
//
Процедура ПолучитьСостояниеПодключенияОрганизации(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолученияСостоянияПодключенияОрганизации(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьСостояниеПодключенияОрганизации(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Отправить запрос на получение регистрационных данных.
// 
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса.
//  АдресРезультата - Строка - Адрес результата.
//
Процедура ОтправитьЗапросНаПолучениеРегистрационныхДанных(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаОтправкиЗапросаНаПолучениеРегистрационныхДанных(ПараметрыЗапроса);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьСостояниеПодключенияОрганизации(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Отправить запрос на обновление настроек компании.
// 
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса.
//  АдресРезультата - Строка - Адрес результата.
//
Процедура ОбновитьНастройкиКомпании(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаОбновитьНастройкиКомпании(ПараметрыЗапроса, Отказ);
	ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Результат = Новый Структура();
	Результат.Вставить("Обновлено", Не Отказ);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка услуг для тарифа.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьУслугиТарифов(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеУслугиДляТипаГрузоперевозки(ПараметрыЗапроса);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьУслугиДляТипаГрузоперевозки(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка услуг для тарифа.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьДанныеУслуги(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДанныеУслуги());
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура;
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьДанныеУслуги(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение доступных терминалов по адресу и направлению.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьДоступныеТерминалы(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеСпискаДоступныхТерминалов(ПараметрыЗапроса);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьДоступныеТерминалы(РезультатЗапроса, Результат, ПараметрыЗапроса);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение данных пункта выдачи.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьДанныеТерминала(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДанныеТерминала());
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьДанныеТерминала(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение настроек авторизации.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьНастройкиАвторизации(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьНастройкиАвторизации());
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьНастройкиАвторизации(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Запись настроек авторизации.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ЗаписатьНастройкиАвторизации(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаЗаписьНастроекАвторизации(ПараметрыЗапроса);
	ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Результат = Новый Структура();
	Результат.Вставить("Записано", Не Отказ);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение данных по тарифу грузоперевозчика.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьДанныеПоТарифу(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДанныеПоТарифу());
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьДанныеПоТарифу(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Проверка доступности указанного типа грузоперевозки
//
// Параметры:
//  ТипГрузоперевозки - Число - тип грузоперевозки.
//
// Возвращаемое значение:
//  Булево - доступность типа грузоперевозки.
//
Функция ТипГрузоперевозкиДоступен(ТипГрузоперевозки) Экспорт
	
	ТипГрузоперевозкиДоступен = Истина;
	
	ДоступныеСервисы = СервисДоставкиВызовСервера.ДоступныеСервисыДоставки();
	
	Если ДоступныеСервисы.Найти(СервисДоставкиКлиентСервер.ЧисловойИдентификаторГрузоперевозчика(ТипГрузоперевозки)) = Неопределено Тогда
		ТипГрузоперевозкиДоступен = Ложь;
	КонецЕсли;
	
	Возврат ТипГрузоперевозкиДоступен;
	
КонецФункции

// Установить тариф по умолчанию.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура УстановитьТарифПоУмолчанию(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаУстановитьТарифПоУмолчанию(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("ОперацияВыполнена", Истина);
	Результат.Вставить("ТарифИдентификатор", ПараметрыЗапроса.ТарифИдентификатор);
	Результат.Вставить("ГрузоперевозчикИдентификатор", ПараметрыЗапроса.ГрузоперевозчикИдентификатор);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Сбросить тариф по умолчанию.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура СброситьТарифПоУмолчанию(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаУстановитьТарифПоУмолчанию(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("ОперацияВыполнена", Истина);
	Результат.Вставить("ТарифИдентификатор", ПараметрыЗапроса.ТарифИдентификатор);
	Результат.Вставить("ГрузоперевозчикИдентификатор", ПараметрыЗапроса.ГрузоперевозчикИдентификатор);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Сохранить параметры тарифа.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура СохранитьПараметрыТарифа(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт

	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаСохранитьПараметрыТарифа(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("ОперацияВыполнена", Истина);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);

КонецПроцедуры

// Получение списка реквизитов возможных к редактированию.
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
Процедура ПолучитьДоступныеДляИзмененияРеквизиты(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеДляИзмененияРеквизиты());
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура;
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьДоступныеДляИзмененияРеквизиты(РезультатЗапроса, Результат, ПараметрыЗапроса);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка наложенных платежей.
// 
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата - Строка - адрес хранилища с результатом.
// 
// Возвращаемое значение:
//  Результат - Неопределено, Структура
Функция ПолучитьНаложенныеПлатежи(Знач ПараметрыЗапроса, Знач АдресРезультата = "") Экспорт
	
	Результат = Неопределено;
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСети") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСети, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолученияСпискаНаложенныхПлатежей(ПараметрыЗапроса);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		Результат = ОбработатьРезультатЗапросаПолучитьНаложенныеПлатежи(РезультатЗапроса);
	КонецЕсли;
	
	Если Не ПустаяСтрока(АдресРезультата) Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Синхронизация информации о частичной доставке в сервисе интеграции и в регистре ДанныеЧастичнойДоставкиСервисДоставки
// 
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата - Строка - адрес хранилища с результатом.
// 
// Возвращаемое значение:
//  см. ОбработатьРезультатЗапросаСинхронизироватьЧастичнуюДоставку
//
Функция СинхронизироватьЧастичнуюДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата = "") Экспорт
	
	Результат = Новый Структура;
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСети") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСети, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаСинхронизироватьЧастичнуюДоставку(ПараметрыЗапроса);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		Результат = ОбработатьРезультатЗапросаСинхронизироватьЧастичнуюДоставку(РезультатЗапроса, ПараметрыЗапроса.Страница);
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получение состояние опции Курьерика.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса:
//    * ОрганизацияБизнесСетиСсылка - СправочникСсылка.Организации - организация подключенная к бизнес сети 
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьСостояниеОпцииКурьерика(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИдентификатора = ПолучитьИдентификаторСервисаБизнесСеть();
	Если Не ЗначениеЗаполнено(ДанныеИдентификатора) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗапроса.Вставить("ДанныеИдентификатора", ДанныеИдентификатора);
	ПараметрыЗапроса.Вставить("ТипГрузоперевозки", СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика());
	
	ЗапросСервиса = ЗапросСервисаПолучитьСостояниеОпцииКурьерика(ПараметрыЗапроса);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьСостояниеОпцииКурьерика(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение журнала заказов на доставку из сервиса.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса:
//    * ОрганизацияБизнесСетиСсылка - СправочникСсылка.Организации - организация, подключенная к Бизнес-сети.
//  АдресРезультата - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьЖурналЗаказовНаДоставкуИзСервиса(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИдентификатора = ПолучитьИдентификаторСервисаБизнесСеть();
	Если Не ЗначениеЗаполнено(ДанныеИдентификатора) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ДанныеИдентификатора", ДанныеИдентификатора);
	
	ЗапросСервиса = ЗапросСервисаПолучитьЖурналЗаказовНаДоставкуИзСервиса(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ
		Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТипГрузоперевозки = ПолучитьЗначение(ПараметрыЗапроса, "ТипГрузоперевозки", , 0);
	Результат = Новый Структура("ТипГрузоперевозки", ТипГрузоперевозки);
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьЖурналЗаказовНаДоставкуИзСервиса(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка состояний заказов на доставку из сервиса.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса:
//    * ОрганизацияБизнесСетиСсылка - СправочникСсылка.Организации - организация, подключенная к Бизнес-сети.
// 	АдресРезультата - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьСписокСостоянийЗаказовИзСервиса(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИдентификатора = ПолучитьИдентификаторСервисаБизнесСеть();
	Если Не ЗначениеЗаполнено(ДанныеИдентификатора) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ДанныеИдентификатора", ДанныеИдентификатора);
	
	ЗапросСервиса = ЗапросСервисаПолучитьСписокСостоянийЗаказовИзСервиса(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ
		Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьСписокСостоянийЗаказовИзСервиса(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение состояний списка заказов на доставку на доставку по отборам.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса:
//   * ОрганизацияБизнесСетиСсылка - ОпределяемыйТип.ОрганизацияСервисДоставки - организация.
//   * ДанныеГрузоперевозки - Структура - Содержит свойства:
//    ** ТипГрузоперевозки - число - тип грузоперевозки.
//    ** ИдентификаторыЗаказов - массив из Строка - идентификаторов заказов, для которых нужно получить статус.
//  АдресРезультата  - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьСостоянияЗаказовНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Результат = Новый Структура;
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура("Список", Новый Соответствие);
	
	Для Каждого ДанныеГрузоперевозки Из ПараметрыЗапроса.ДанныеГрузоперевозки Цикл
		ПараметрыЗапросаПолучениеСпискаЗаказовНаДоставкуСОтборами = НовыйПараметрыЗапросаПолучитьЗаказыНаДоставку();
		ЗаполнитьЗначенияСвойств(ПараметрыЗапросаПолучениеСпискаЗаказовНаДоставкуСОтборами, ПараметрыЗапроса);
		ЗаполнитьЗначенияСвойств(ПараметрыЗапросаПолучениеСпискаЗаказовНаДоставкуСОтборами, ДанныеГрузоперевозки);
		ЗапросСервиса = ЗапросСервисаПолучениеСпискаЗаказовНаДоставкуСОтборами(ПараметрыЗапросаПолучениеСпискаЗаказовНаДоставкуСОтборами);
		ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
		РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
		
		Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
			ОбработатьРезультатЗапросаПолучитьСостоянияЗаказовНаДоставку(РезультатЗапроса, Результат);
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение печатной формы из сервиса.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса:
//    * ОрганизацияБизнесСетиСсылка - СправочникСсылка.Организации - организация, подключенная к Бизнес-сети.
// 	АдресРезультата - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьПечатнуюФормуИзСервиса(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИдентификатора = ПолучитьИдентификаторСервисаБизнесСеть();
	Если Не ЗначениеЗаполнено(ДанныеИдентификатора) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ДанныеИдентификатора", ДанныеИдентификатора);
	
	ЗапросСервиса = ЗапросСервисаПолучитьПечатнуюФормуИзСервиса(ПараметрыЗапроса);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ
		Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьПечатнуюФормуИзСервиса(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получить населенные пункты из сервиса.
// 
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры для формирования запроса
//  АдресРезультата - Строка - Адрес хранилища с результатом
// 
// Возвращаемое значение:
//  Структура - Населенные пункты.
Функция ПолучитьНаселенныеПункты(Знач ПараметрыЗапроса, Знач АдресРезультата = "") Экспорт
	
	Результат = Неопределено;
	
	Отказ = Ложь;
	
	ЗапросСервиса = ЗапросСервисаПолучитьНаселенныеПункты(ПараметрыЗапроса);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Не Отказ И ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		Результат = ОбработатьРезультатЗапросаПолучитьНаселенныеПункты(РезультатЗапроса, ПараметрыЗапроса);
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получить тарифы и услуги.
// 
// Параметры:
//  ПараметрыЗапроса - Структура - параметры запроса.
//  АдресРезультата - Строка - адрес результата.
// 
// Возвращаемое значение:
//  Неопределено, Структура - Получить тарифы и услуги.
Функция ПолучитьТарифыИУслуги(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Результат = Неопределено;
	
	Отказ = Ложь;
	
	СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяМетодаПолучитьТарифыИУслуги());
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Не Отказ И ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		Результат = ОбработатьРезультатЗапросаПолучитьТарифыИУслуги(РезультатЗапроса, ПараметрыЗапроса);
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Конструкторы

#Область КонструкторыЗапросов

#Область ЗаказНаДоставку

// Возвращает параметры для запроса.
// 
// Возвращаемое значение:
//  Результат - см. СервисДоставки.НовыйПараметрыЗаказаНаДоставку
Функция НовыйПараметрыЗапросаСоздатьИзменитьЗаказНаДоставку() Экспорт
	
	Параметры = НовыйПараметрыЗаказаНаДоставку();
	
	Параметры.Вставить("ИдентификаторЗаказа"); // Идентификатор заказа 1С:Доставка
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Результат - Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаСоздатьИзменитьОтправитьЗаказНаДоставку() Экспорт
	
	Параметры = НовыйПараметрыЗапросаСоздатьИзменитьЗаказНаДоставку();
	
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("ИдентификаторыСтрок", Новый Массив);
	
	Возврат Параметры;
	
КонецФункции

// Новый параметры запроса получить заказ на доставку.
// 
// Возвращаемое значение:
//  Результат - Структура - Новый параметры запроса получить заказ на доставку.
Функция НовыйПараметрыЗапросаПолучитьЗаказНаДоставку() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("РежимМастера", 0);
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("ЭтоСозданиеШаблона", Ложь);
	Результат.Вставить("ЭтоЗаполнениеКопированием", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Результат - Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаОбновитьЗаказНаДоставку() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Результат - Структура - параметры, необходимые для формирования запроса.
Функция НовыйПараметрыЗапросаОтменитьЗаказНаДоставку() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("Идентификаторы", Новый СписокЗначений);
	Результат.Вставить("ОтменитьЗаказПлатно");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
// 
// Возвращаемое значение:
//  Результат - Структура - параметры, необходимые для формирования запроса.
Функция НовыйПараметрыЗапросаОформитьЗаказНаДоставку() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор");
	Результат.Вставить("Идентификаторы");
	Результат.Вставить("ТипГрузоперевозки");
	Результат.Вставить("ГрупповаяОбработка", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Результат - Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаЗаписатьИзменитьОтправитьСписокЗаказовНаДоставку() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("СписокЗаказов", Новый Массив);
	Результат.Вставить("ТипГрузоперевозки", 0);
	Результат.Вставить("Отправка", Ложь);
	Результат.Вставить("ГрупповаяОбработка", Ложь);
	Результат.Вставить("ПараметрыДанныеФормы", Новый Структура);
	
	Возврат Результат;
	
КонецФункции

// Новый параметры запроса получить график движения заказа.
// 
// Возвращаемое значение:
//  Структура - Новый параметры запроса получить график движения заказа:
// * ИдентификаторЗаказа - Строка
Функция НовыйПараметрыЗапросаПолучитьГрафикДвиженияЗаказа() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторЗаказа", "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса..
// 
// Возвращаемое значение:
//  Структура - Новый параметры запроса получить график движения заказа по трек номеру:
// * ТрекНомер - Строка 
// * ГрузоперевозчикИдентификатор - Строка 
Функция НовыйПараметрыЗапросаПолучитьГрафикДвиженияЗаказаПоТрекНомеру() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТрекНомер", "");
	Результат.Вставить("ГрузоперевозчикИдентификатор", "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьДоступныеПечатныеФормы() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторыЗаказов", Новый Массив());
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаЗагрузитьФайлыПечатныхФорм() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Параметры", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйЭлементПараметровЗапросаЗагрузитьФайлыПечатныхФорм() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИдентификаторЗаказа", "");
	Результат.Вставить("ТипГрузоперевозки");
	Результат.Вставить("ОрганизацияБизнесСетиСсылка");
	Результат.Вставить("Список", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьЖурналЗаказовНаДоставкуИзСервиса() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Страница", 0);
	Результат.Вставить("Сортировка", "");
	Результат.Вставить("МассивНомеров", Новый Массив);
	Результат.Вставить("ДатаСозданияОт");
	Результат.Вставить("ДатаСозданияДо");
	Результат.Вставить("СписокСтатусов", Новый Массив);
	Результат.Вставить("ТипГрузоперевозки", 0);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьПечатнуюФормуИзСервиса() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ИдентификаторДокумента", "");
	Результат.Вставить("ИдентификаторПечатнойФормы", "");
	Результат.Вставить("ТипГрузоперевозки", 0);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область МультизаказНаДоставку

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаСоздатьМультизаказ() Экспорт
	
	Результат = НовыйПараметрыМультизаказаНаДоставку();
	Результат.Вставить("ИдентификаторЗаказа");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаДобавитьЗаказНаДоставкуВМультизаказ() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор");
	Результат.Вставить("ИдентификаторЗаказа");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьМультизаказНаДоставку() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаОформитьМультизаказ() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаОбновитьМультизаказНаДоставку() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаОтменитьМультизаказНаДоставку() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор");
	Результат.Вставить("Идентификаторы", Новый СписокЗначений);
	Результат.Вставить("ОтменитьЗаказПлатно");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Справочники

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьСостояния() Экспорт
	
	Результат = Новый Структура;
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьСостояниеОпцииКурьерика() Экспорт
	
	Результат = Новый Структура;
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьТипыГрузоперевозки() Экспорт
	
	Результат = Новый Структура;
	
	Возврат Результат;
	
КонецФункции

// Новый параметры запроса получить грузоперевозчиков.
// 
// Возвращаемое значение:
//  Структура - Новый параметры запроса получить грузоперевозчиков. Содержит свойства:
//		* ОрганизацияБизнесСетиСсылка - Неопределено - 
//		* ТипГрузоперевозки - Число - 
//		* ГрузоперевозчикИНН - Строка - 
//		* ГрузоперевозчикКПП - Строка -
// 
Функция НовыйПараметрыЗапросаПолучитьГрузоперевозчиков() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОрганизацияБизнесСетиСсылка", Неопределено);
	Результат.Вставить("ТипГрузоперевозки", 0);
	Результат.Вставить("ГрузоперевозчикИНН", "");
	Результат.Вставить("ГрузоперевозчикКПП", "");
	Результат.Вставить("ТребуетсяПроверкаАвторизации", Истина);
	
	Возврат Результат;
	
КонецФункции

// Новый параметры запроса получить пункты выдачи клиента.
// 
// Возвращаемое значение:
//  Структура - Новый параметры запроса получить пункты выдачи клиента. Содержит свойства:
//		* ОрганизацияБизнесСетиСсылка - Неопределено - 
//		* ТипГрузоперевозки - Число - 
//		* ТипЗагрузки - Число -
//
Функция НовыйПараметрыЗапросаПолучитьПунктыВыдачиКлиента() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ОрганизацияБизнесСетиСсылка", Неопределено);
	Результат.Вставить("ТипГрузоперевозки", 0);
	Результат.Вставить("ТипЗагрузки", 0); // 0 - получить, 1 - запросить у оператора и получить
	
	Возврат Результат;
	
КонецФункции

// Новый параметры запроса обновления настроек компании.
// 
// Возвращаемое значение:
//  Структура - Новый параметры запроса получить пункты выдачи клиента. Содержит свойства:
//   * ОрганизацияБизнесСетиСсылка - Неопределено - 
//   * ТипГрузоперевозки - Число - 
//   * ИдентификаторОрганизации - Строка -
//   * ОбновитьЧастичнуюДоставку - Булево -
//   * ЧастичнаяДоставкаЗначение - Булево -
Функция НовыйПараметрыЗапросаОбновитьНастройкиКомпании() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ОрганизацияБизнесСетиСсылка", Неопределено);
	Результат.Вставить("ТипГрузоперевозки", 0);
	Результат.Вставить("ИдентификаторОрганизации", "");
	Результат.Вставить("ОбновитьЧастичнуюДоставку", Ложь);
	Результат.Вставить("ЧастичнаяДоставкаЗначение", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Новый параметры запроса получить список курьеров.
// 
// Возвращаемое значение:
//  Структура - Новый параметры запроса получить список курьеров. Содержит свойства:
//		* ОрганизацияБизнесСетиСсылка - Неопределено - 
//		* ТипГрузоперевозки - Число - Идентификатор сервиса доставки, из которого необходимо получить данные
//		* ТипЗагрузки - Число - указывает способ получения данных из сервиса доставки.
//								0 - получить кэшированные данные,
//								1 - запросить данные у оператора сервиса и получить их.
//
Функция НовыйПараметрыЗапросаПолучитьСписокКурьеров() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОрганизацияБизнесСетиСсылка", Неопределено);
	Результат.Вставить("ТипГрузоперевозки", 0);
	Результат.Вставить("ТипЗагрузки", 0); // 0 - получить, 1 - запросить у оператора и получить
	
	Возврат Результат;
	
КонецФункции

// Новый параметры запроса выполнить загрузку данных по наложенным платежам.
// 
// Возвращаемое значение:
//  Структура - Новый параметры запроса выполнить загрузку данных по наложенным платежам:
//    * ОрганизацияБизнесСети - Неопределено - 
//    * ТипГрузоперевозки - Число - 
Функция НовыйПараметрыЗапросаВыполнитьЗагрузкуДанныхПоНаложеннымПлатежам() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ОрганизацияБизнесСети");
	
	Возврат Результат;
	
КонецФункции

// Новый параметры запроса установить тариф по умолчанию.
// 
// Возвращаемое значение:
//  Структура - Новый параметры запроса установить тариф по умолчанию. Содержит свойства:
//		* ГрузоперевозчикИдентификатор - Строка - 
//		* ТарифИдентификатор - Строка - 
//		* ТипГрузоперевозки - Число -
//
Функция НовыйПараметрыЗапросаУстановитьТарифПоУмолчанию() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ГрузоперевозчикИдентификатор", "");
	Результат.Вставить("ТарифИдентификатор", "");
	Результат.Вставить("ТипГрузоперевозки", 0);
	
	Возврат Результат;
	
КонецФункции

// Новый параметры запроса получить данные грузоперевозчика.
// 
// Возвращаемое значение:
//  Структура - Новый параметры запроса получить данные грузоперевозчика:
// * ТипГрузоперевозки - Число
// * Идентификатор - Строка
Функция НовыйПараметрыЗапросаПолучитьДанныеГрузоперевозчика() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТипГрузоперевозки", 0);
	Результат.Вставить("Идентификатор", "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьДанныеУслуги() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьДанныеТерминала() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
// 
// Возвращаемое значение:
//  Структура - Параметры, необходимые для формирования запроса:
//   * ГрузовыеМестаВГХ - Массив из см. НовыйПараметрыЭлементаГрузовогоМеста - список грузовых мест
//   * Услуги - ТаблицаЗначений - список услуг и их свойств:
//    ** Идентификатор - Строка - Идентификатор свойства
//    ** Использовать - Булево - Признак выбора услуги
//    ** Свойства - Массив из Структура - Массив свойств
Функция НовыйПараметрыЗапросаПолучитьТарифы() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТипГрузоперевозки", 0);
	Результат.Вставить("ТипЗаказа", 0); // 1 - Интернет-магазин, 2 - Доставка
	Результат.Вставить("ГрузоперевозчикИдентификатор", "");
	Результат.Вставить("ТарифИдентификатор", "");
	Результат.Вставить("АвтопересчетПоВсемТарифам", Ложь); // Для СДЭК. Полная калькуляция (с услугами) по доступным тарифам
	
	Результат.Вставить("ЗаказчикРоль", 1); // 1 - Отправитель, 2 - Получатель, 3 - Плательщик, 4 - Третье лицо.
	Результат.Вставить("ЗаказчикИНН", "");
	
	Результат.Вставить("СпособОтгрузки");
	Результат.Вставить("ДатаОтгрузки");
	Результат.Вставить("ВремяОтгрузкиС");
	Результат.Вставить("ВремяОтгрузкиПо");
	Результат.Вставить("ВремяОтгрузкиОбедС");
	Результат.Вставить("ВремяОтгрузкиОбедПо");
	
	Результат.Вставить("СпособДоставки");
	Результат.Вставить("ДатаДоставки");
	Результат.Вставить("ВариантВремениОтгрузки", 1);
	Результат.Вставить("ВремяДоставкиС");
	Результат.Вставить("ВремяДоставкиПо");
	Результат.Вставить("ВремяДоставкиОбедС");
	Результат.Вставить("ВремяДоставкиОбедПо");

	Результат.Вставить("ПунктПриемаГрузаИдентификатор", "");
	Результат.Вставить("ПунктПриемаГрузаИдентификаторВСистемеГрузоперевозчика", "");
	Результат.Вставить("ПунктПриемаГрузаНаселенныйПунктИдентификатор", 0);
	Результат.Вставить("ОтправительАдрес", ""); // Полный адрес
	Результат.Вставить("ОтправительАдресЗначение", ""); // Формат JSON 1С:БСП
	Результат.Вставить("ОтправительАдресШирота", 0);
	Результат.Вставить("ОтправительАдресДолгота", 0);
	Результат.Вставить("ОтправительНаселенныйПунктИдентификатор", 0);
	
	Результат.Вставить("ПунктВыдачиГрузаИдентификатор", "");
	Результат.Вставить("ПунктВыдачиГрузаИдентификаторВСистемеГрузоперевозчика", "");
	Результат.Вставить("ПунктВыдачиГрузаНаселенныйПунктИдентификатор", 0);
	Результат.Вставить("ПолучательАдрес", ""); // Полный адрес
	Результат.Вставить("ПолучательАдресЗначение", ""); // Формат JSON 1С:БСП
	Результат.Вставить("ПолучательАдресШирота", 0);
	Результат.Вставить("ПолучательАдресДолгота", 0);
	Результат.Вставить("ПолучательНаселенныйПунктИдентификатор", 0);
	
	Результат.Вставить("ФормаОплаты");
	Результат.Вставить("ПлательщикРоль"); // 1 - Отправитель, 2 - Получатель, 3 - Третье лицо
	Результат.Вставить("ПлательщикАдрес", ""); // Полный адрес
	Результат.Вставить("ПлательщикАдресЗначение", ""); // Формат JSON 1С:БСП
	Результат.Вставить("ПлательщикАдресШирота", 0);
	Результат.Вставить("ПлательщикАдресДолгота", 0);
	
	Результат.Вставить("ГрузКоличествоГрузовыхМест", 1);
	Результат.Вставить("ГрузСтоимость", 0);
	Результат.Вставить("ГрузСодержимое", "");
	
	Результат.Вставить("ГрузОбщийОбъем");
	Результат.Вставить("ГрузОбщийВес");
	Результат.Вставить("ГрузМаксимальнаяВысота");
	Результат.Вставить("ГрузМаксимальнаяДлина");
	Результат.Вставить("ГрузМаксимальнаяШирина");
	Результат.Вставить("ГрузМаксимальныйВес");
	
	Результат.Вставить("ГрузовыеМестаВГХ", Новый Массив); // Суммарные весогабаритные размеры упаковок в разрезе грузовых мест
	
	// Таблица адресов маршрута
	АдресаМаршрута = Новый ТаблицаЗначений;
	АдресаМаршрута.Колонки.Добавить("ПорядковыйНомер", Новый ОписаниеТипов("Число"));
	АдресаМаршрута.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	АдресаМаршрута.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	АдресаМаршрута.Колонки.Добавить("Широта", Новый ОписаниеТипов("Число"));
	АдресаМаршрута.Колонки.Добавить("Долгота", Новый ОписаниеТипов("Число"));
	АдресаМаршрута.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	Результат.Вставить("АдресаМаршрута", АдресаМаршрута);
	
	// Таблица услуги
	ТаблицаУслуги = Новый ТаблицаЗначений;
	ТаблицаУслуги.Колонки.Добавить("Идентификатор");
	ТаблицаУслуги.Колонки.Добавить("Использовать", СервисДоставкиСлужебный.Типы().Булево);
	ТаблицаУслуги.Колонки.Добавить("Свойства", СервисДоставкиСлужебный.Типы().Массив);
	
	Результат.Вставить("Услуги", ТаблицаУслуги);
	
	// Таблица товаров
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Длина", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Высота", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Ширина", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	Результат.Вставить("Товары", ТаблицаТоваров);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьУслугиТарифов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТипГрузоперевозки", 1);
	Результат.Вставить("УслугиДляМультизаказов", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
// 
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса. Свойства:
//   * ГрузоперевозчикИдентификатор - Строка - идентификатор перевозчика в системе интеграции,
//   * Направление - Число - направление перевозки,
//   * НаселенныйПунктИдентификатор - Строка - идентификатор (код) населенного пункта в системе интеграции,
//   * Адрес - Строка - представление адреса терминала (пункта доставки),
//   * АдресЗначение - Строка - адрес терминала (пункта доставки) в формате 1С:БСП,
//   * ВсеПунктыПВЗ - Булево - признак полной выгрузки списка пунктов ПВЗ.
Функция НовыйПараметрыЗапросаПолучитьДоступныеТерминалы() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ГрузоперевозчикИдентификатор", "");
	Результат.Вставить("Направление", 0);
	Результат.Вставить("НаселенныйПунктИдентификатор", "");
	Результат.Вставить("Адрес", ""); // Полный адрес
	Результат.Вставить("АдресЗначение", ""); // Формат JSON 1С:БСП
	Результат.Вставить("ВсеПунктыПВЗ", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса. Свойства:
// * Идентификатор - Строка
Функция НовыйПараметрыЗапросаПолучитьДанныеПоТарифу() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор", "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаСохранитьПараметрыТарифа() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("ФормаОплаты", 0);
	
	// Таблица услуги
	ТаблицаУслуги = Новый ТаблицаЗначений;
	ТаблицаУслуги.Колонки.Добавить("Идентификатор");
	ТаблицаУслуги.Колонки.Добавить("Свойства", СервисДоставкиСлужебный.Типы().Массив);
	
	Результат.Вставить("Услуги", ТаблицаУслуги);
	
	// Таблица терминалы
	ТаблицаТерминалы = Новый ТаблицаЗначений;
	ТаблицаТерминалы.Колонки.Добавить("Идентификатор");
	ТаблицаТерминалы.Колонки.Добавить("Направление");
	ТаблицаТерминалы.Колонки.Добавить("АдресПредставление");
	ТаблицаТерминалы.Колонки.Добавить("АдресЗначение");
	
	Результат.Вставить("Терминалы", ТаблицаТерминалы);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Авторизация

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьНастройкиАвторизации() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИдентификаторСервиса", "");
	Результат.Вставить("ТипГрузоперевозки", 0);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаЗаписатьНастройкиАвторизации() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Логин", "");
	Результат.Вставить("Пароль", "");
	Результат.Вставить("ПравоДоступа", "");
	Результат.Вставить("Токен", "");
	Результат.Вставить("ИдентификаторСервиса", "");
	Результат.Вставить("ТипГрузоперевозки", 0);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры весогабаритных характеристик грузового места.
//
// Возвращаемое значение:
//  Структура - параметры, описывающие ВГХ грузового места.
//
Функция НовыйВГХГрузовогоМеста() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Вес", 0);		//Общий вес (в граммах)
	Результат.Вставить("Длина", 0);		//Габариты упаковки. Длина (в сантиметрах)
	Результат.Вставить("Ширина", 0);	//Габариты упаковки. Ширина (в сантиметрах)
	Результат.Вставить("Высота", 0);	//Габариты упаковки. Высота (в сантиметрах)
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Новый параметры элемента грузового места.
// 
// Возвращаемое значение:
//  Структура - Новый параметры элемента грузового места:
//   * ИдентификаторГрузовогоМеста - Число - 
//   * Описание - Строка - 
//   * Вес - Число - 
//   * Объем - Число - 
//   * Длина - Число - 
//   * Ширина - Число - 
//   * Высота - Число - 
//   * Стоимость - Число - 
Функция НовыйПараметрыЭлементаГрузовогоМеста() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ИдентификаторГрузовогоМеста", 0); // Число(5). номер грузового места
	Параметры.Вставить("Описание", ""); // Строка (150). Описание состава груза
	Параметры.Вставить("Вес", 0); // Вес, кг
	Параметры.Вставить("Объем", 0); // Объем, см3
	Параметры.Вставить("Длина", 0); // Длина, см
	Параметры.Вставить("Ширина", 0); // Ширина, см
	Параметры.Вставить("Высота", 0); // Высота, см
	Параметры.Вставить("Стоимость", 0); // Стоимость
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьЗаказыНаДоставку() Экспорт
	
	// Таблица состояний.
	ТаблицаСостояний = Новый ТаблицаЗначений;
	ТаблицаСостояний.Колонки.Добавить("Идентификатор", СервисДоставкиСлужебный.Типы().Число);
	
	// Таблица откуда.
	ТаблицаОткуда = Новый ТаблицаЗначений;
	ТаблицаОткуда.Колонки.Добавить("КодФИАС", СервисДоставкиСлужебный.Типы().Строка);
	
	// Таблица куда
	ТаблицаКуда = Новый ТаблицаЗначений;
	ТаблицаКуда.Колонки.Добавить("КодФИАС", СервисДоставкиСлужебный.Типы().Строка);
	
	// Таблица отправителей.
	ТаблицаОтправителей = Новый ТаблицаЗначений;
	ТаблицаОтправителей.Колонки.Добавить("Наименование", СервисДоставкиСлужебный.Типы().Строка);
	ТаблицаОтправителей.Колонки.Добавить("ЮрФизЛицо", СервисДоставкиСлужебный.Типы().Число);
	ТаблицаОтправителей.Колонки.Добавить("ИНН", СервисДоставкиСлужебный.Типы().Строка);
	ТаблицаОтправителей.Колонки.Добавить("КПП", СервисДоставкиСлужебный.Типы().Строка);
	
	// Таблица получателей.
	ТаблицаПолучателей = Новый ТаблицаЗначений;
	ТаблицаПолучателей.Колонки.Добавить("Наименование", СервисДоставкиСлужебный.Типы().Строка);
	ТаблицаПолучателей.Колонки.Добавить("ЮрФизЛицо", СервисДоставкиСлужебный.Типы().Число);
	ТаблицаПолучателей.Колонки.Добавить("ИНН", СервисДоставкиСлужебный.Типы().Строка);
	ТаблицаПолучателей.Колонки.Добавить("КПП", СервисДоставкиСлужебный.Типы().Строка);
	
	Результат = Новый Структура;
	
	// Страничный отбор.
	Результат.Вставить("Страница",			0);  // page
	Результат.Вставить("РазмерСтраницы",	0);  // size
	Результат.Вставить("Сортировка",		""); //
	
	// Отборы для поиска.
	Результат.Вставить("ИдентификаторыЗаказов", Новый Массив); 	// ordersId
	Результат.Вставить("Роль", 				""); 				// role
	Результат.Вставить("НомерЗаказа", 				""); 		// number
	Результат.Вставить("ТипЗаказа", 0); 						// type, 1 - Интернет-магазин, 2 - Доставка
	Результат.Вставить("ДокументОснованиеИдентификатор", "");	// baseDocumentId
	Результат.Вставить("Состояние",		ТаблицаСостояний); 		// statuses
	Результат.Вставить("Отправитель",	ТаблицаОтправителей); 	// sender
	Результат.Вставить("Получатель",	ТаблицаПолучателей); 	// receiver
	Результат.Вставить("Откуда", 		ТаблицаОткуда); 		// shipmentPoint
	Результат.Вставить("Куда",			ТаблицаКуда); 			// deliveryPoint
	Результат.Вставить("ПунктВыдачиКлиента"); 					// pickuppointid
	Результат.Вставить("Грузоперевозчик"); 						// carrier
	Результат.Вставить("Оплата"); 								// paymentStatus
	Результат.Вставить("ДатаСозданияОт"); 						// dateCreateFrom
	Результат.Вставить("ДатаСозданияДо"); 						// dateCreateTo
	Результат.Вставить("ДатаОтгрузкиОт"); 						// dateShipmentFrom
	Результат.Вставить("ДатаОтгрузкиДо"); 						// dateShipmentTo
	Результат.Вставить("ДатаДоставкиОт"); 						// dateDeliveryFrom
	Результат.Вставить("ДатаДоставкиДо"); 						// dateDeliveryTo
	Результат.Вставить("НаложенныйПлатеж"); 					// paymentOnDeliveryIsAvailable
	Результат.Вставить("НаложенныйПлатежПолучен");				// paymentOnDeliveryIsPaid
	Результат.Вставить("ТипГрузоперевозки");
	Результат.Вставить("ОтборПоГотовностиЗаказов", 0);
	Результат.Вставить("Курьер"); 										// courier
	Результат.Вставить("ДатаОбновленияС", '00010101');					// dateUpdateFrom
	Результат.Вставить("ЕстьОбновлениеСДаты", '00010101'); 				// isUpdatedFrom
	Результат.Вставить("ВыгружатьДанныеПоЧастичнойДоставке", Ложь); 	// getInfoPartialDelivery
	
	// Режим просмотра с учетом мультизаказов
	Результат.Вставить("ФильтрПоМультизаказам", ФильтрПоМультизаказамПоУмолчанию());
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
// 
// Возвращаемое значение:
//  Структура - Параметры новой печатной форма для запроса:
//   * ИдентификаторДокумента - Строка
//   * ИдентификаторПечатнойФормы - Строка
//   * ДоступныеПараметры - Массив из Структура:
//    ** Наименование - Строка - Наименование параметра
//    ** Идентификатор - Число - Идентификатор выбранного параметра
Функция НовыйПечатнаяФормаДляЗапроса() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИдентификаторДокумента", "");
	Результат.Вставить("ИдентификаторПечатнойФормы", "");
	Результат.Вставить("ДоступныеПараметры", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса:
//	 * Идентификатор - строка - идентификатор заказа на доставку
//
Функция НовыйПараметрыЗапросаПолучитьДоступныеДляИзмененияРеквизиты() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор", "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
// 
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса:
//	 * РазмерВыборки - число - количество заказов в одной порции
//	 * ДатаВыборкиС - дата - дата начала периода за которой производится выборка порции заказов
//	 * Идентификатор - строка - идентификатор заказа на доставку
//	 * ТипГрузоперевозки - число - тип грузоперевозки
//	 * ОрганизацияБизнесСети - Неопределено, ОпределяемыйТип.ОрганизацияСервисДоставки - организация
//
Функция ПараметрыЗапросаПолучитьНаложенныеПлатежи() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("РазмерВыборки", 100);		// size
	Параметры.Вставить("ДатаВыборкиС", '00010101'); // date
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("ТипГрузоперевозки", 0);
	Параметры.Вставить("ОрганизацияБизнесСети", Неопределено);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры для запроса.
// 
// Возвращаемое значение:
//  см. НовыйПараметрыЗапросаПолучитьЗаказыНаДоставку
//
Функция ПараметрыЗапросаСинхронизацияПоЧастичнойДоставке() Экспорт
	
	Возврат НовыйПараметрыЗапросаПолучитьЗаказыНаДоставку();
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса:
//	 * ТипГрузоперевозки - число - тип грузоперевозки
//
Функция НовыйПараметрыЗапросаПолучитьСостояниеПодключенияОрганизации() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТипГрузоперевозки", 0);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса. Свойства:
//   *ЗарегистрироватьОрганизациюТарификации - Булево - зарегистрировать организацию в качестве основного заказчика перевозок
//   *ИдентификаторОрганизацииТарификации - Строка - Идентификатор организации в сервисе перевозчика
//
Функция НовыйПараметрыЗапросаОтправитьЗапросНаПолучениеРегистрационныхДанных() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ЗарегистрироватьОрганизацию", Ложь);
	Результат.Вставить("ЗарегистрироватьПунктВыдачи", Ложь);
	Результат.Вставить("ЗарегистрироватьПользователя", Ложь);
	Результат.Вставить("ЗарегистрироватьОрганизациюТарификации", Ложь);
	
	Результат.Вставить("НаименованиеОрганизации", "");
	Результат.Вставить("ИдентификаторОрганизации", "");
	Результат.Вставить("ИдентификаторПунктаВыдачи", "");
	Результат.Вставить("НаименованиеПунктаВыдачи", "");
	Результат.Вставить("АдресПунктаВыдачи", "");
	Результат.Вставить("ТелефонПунктаВыдачи", "");
	Результат.Вставить("НаименованиеПользователя", "");
	Результат.Вставить("НомерТелефонаПользователя", "");
	Результат.Вставить("АдресЭлектроннойПочтыПользователя", "");
	
	Результат.Вставить("ИдентификаторОрганизацииТарификации", "");
	Результат.Вставить("ТипГрузоперевозки", 0);
	
	Возврат Результат;
	
КонецФункции

// Возвращает заказы на доставку, введенные на основании переданного документа.
//
// Параметры:
//  Ссылка - ДокументСсылка - Документ-основание заказа на доставку.
//  ИсключатьИзмененные - Булево - Исключать из поиска заказы с зарегистрированным изменением товарного состава.
//  ДопустимыеСостояния - Массив из Число - Идентификаторы (коды) состояний заказа на доставку.
//
// Возвращаемое значение:
//  Массив Из УникальныйИдентификатор - Идентификаторы заказов на доставку
//
Функция НайтиЗаказыНаДоставкуПоОснованию(Ссылка, ИсключатьИзмененные = Ложь, ДопустимыеСостояния = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ИсключатьИзмененные", ИсключатьИзмененные);
	Запрос.УстановитьПараметр("ЕстьДопустимыеСостояния", ДопустимыеСостояния <> Неопределено);
	Запрос.УстановитьПараметр("ДопустимыеСостояния", ДопустимыеСостояния);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРегистра.ИдентификаторДокумента КАК ИдентификаторДокумента
	|ИЗ
	|	РегистрСведений.ДанныеЗаказовСервисДоставки КАК ТаблицаРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналЗаказовСервисДоставки КАК ЖурналЗаказовСервисДоставки
	|	ПО ЖурналЗаказовСервисДоставки.Организация = ТаблицаРегистра.Организация
	|		И ЖурналЗаказовСервисДоставки.ТипГрузоперевозки = ТаблицаРегистра.ТипГрузоперевозки
	|		И ЖурналЗаказовСервисДоставки.ИдентификаторДокумента = ТаблицаРегистра.ИдентификаторДокумента
	|ГДЕ
	|	ТаблицаРегистра.ДокументОснование = &Ссылка
	|	И ВЫБОР
	|			КОГДА &ИсключатьИзмененные
	|				ТОГДА НЕ ЖурналЗаказовСервисДоставки.ЕстьИзмененияТоварногоСостава
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ЕстьДопустимыеСостояния
	|				ТОГДА ЖурналЗаказовСервисДоставки.СостояниеИдентификатор В (&ДопустимыеСостояния)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.ИдентификаторДокумента);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область КонструкторыОтветов

// Возвращает параметры для ответа на запрос.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыОтветаПолучитьГрафикДвиженияЗаказа() Экспорт
	
	Параметры = Новый Структура();
	
	Параметры.Вставить("ИдентификаторЗаказа", ""); // Идентификатор заказа 1С:Доставка
	Параметры.Вставить("ТрекНомер", "");
	Параметры.Вставить("НомерЗаказа", "");
	Параметры.Вставить("ДатаЗаказа", '00010101');
	Параметры.Вставить("ДатаСозданияЗаказа", '00010101');
	Параметры.Вставить("Состояние", "");
	Параметры.Вставить("СостояниеИдентификатор", 0);
	Параметры.Вставить("Заблокирован", Ложь);
	Параметры.Вставить("ТипГрузоперевозки", 1);
	
	Параметры.Вставить("Грузоперевозчик", НовыйПараметрыГрузоперевозчика());
	Параметры.Вставить("Тариф", НовыйПараметрыТарифа());
	Параметры.Вставить("СпособОтгрузки", СервисДоставкиКлиентСервер.СпособОтгрузкиОтТерминала());
	Параметры.Вставить("СпособДоставки", СервисДоставкиКлиентСервер.СпособДоставкиДоТерминала());
	Параметры.Вставить("ДатаОтгрузки", '00010101');
	Параметры.Вставить("ДатаДоставки", '00010101');
	Параметры.Вставить("ДатаДоставки", '00010101');
	
	Параметры.Вставить("ТочкаОтправления", НовыйПараметрыТочкиМаршрута());
	Параметры.Вставить("ДополнительнаяИнформация", "");
	
	Параметры.Вставить("ГрафикДвиженияЗаказа", Новый Массив());
	
	Возврат Параметры;
	
КонецФункции

// Новый параметры ответа отменить заказ на доставку.
// 
// Возвращаемое значение:
//  Структура - Новый параметры ответа отменить заказ на доставку:
//   * Номер - Строка
//   * СуммаОтмены - Число
//   * РезультатОтмены - Число
//   * ДокументОтменен - Булево
//   * ДоступнаПлатнаяОтмена - Булево
//   * ДоступнаОтмена - Булево
//   * Ошибки - Массив из Строка
Функция НовыйПараметрыОтветаОтменитьЗаказНаДоставку() Экспорт
	
	Параметры = Новый Структура();
	
	Параметры.Вставить("Номер", "");
	Параметры.Вставить("СуммаОтмены", 0);
	Параметры.Вставить("РезультатОтмены", 0);
	Параметры.Вставить("ДокументОтменен", Ложь);
	Параметры.Вставить("ДоступнаПлатнаяОтмена", Ложь);
	Параметры.Вставить("ДоступнаОтмена", Ложь);
	Параметры.Вставить("Ошибки", Новый Массив);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область КонструкторыДанных

// Возвращает параметры объекта данных сервиса доставки.
//
// Параметры:
//  РазмерСтраницы - Число - количество строк на странице.
//  Страница       - Число - номер текущей страницы.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыСтраницСервиса(РазмерСтраницы = 0, Страница = 0) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Страница",          Страница); // Номер страницы для запроса.
	Результат.Вставить("РазмерСтраницы",    РазмерСтраницы); // Количество записей на одной странице для запроса.
	Результат.Вставить("КоличествоСтрок",   0); // Количество строк в сервисе.
	Результат.Вставить("КоличествоСтраниц", 0); // Количество страниц в сервисе.
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры объекта данных сервиса доставки.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗаказаНаДоставкуДляСписка() Экспорт
	
	Возврат СервисДоставкиКлиентСервер.НовыйПараметрыЗаказаНаДоставкуДляСписка();
	
КонецФункции

// Новый параметры заказа на доставку.
// 
// Возвращаемое значение:
//  Структура - Новый параметры заказа на доставку:
//   * КлючИдемпотентности - УникальныйИдентификатор - 
//   * ДокументОснование - Неопределено - 
//   * ДокументыОснования - СписокЗначений из Произвольный
//   * ДокументыОснованияИдентификаторы - СписокЗначений из Строка 
//   * ФормаОплаты - Число - 
//   * ТипЗаказа - Число - 
//   * Валюта - Структура - :
//    ** Код - Строка - 
//    ** Наименование - Строка - 
//    ** Ссылка - СправочникСсылка.Валюты
//   * СуммаДокумента - Число - 
//   * СуммаСкидки - Число - 
//   * Оплачен - Булево - 
//   * НаложенныйПлатежВидОплаты - Число - 
//   * СуммаНаложенногоПлатежа - Число - 
//   * НаложенныйПлатежВидОплатыДополнительный - Число - 
//   * СуммаНаложенногоПлатежаДополнительный - Число - 
//   * ПолнаяСтоимость - Число - 
//   * ТипГрузоперевозки - Число - 
//   * Грузоперевозчик - Структура - :
//    ** Ссылка - Строка - 
//    ** Наименование - Строка - 
//    ** Идентификатор - Строка - 
//    ** Телефон - Строка - 
//    ** ИНН - Строка - 
//    ** КПП - Строка - 
//   * Тариф - Структура - :
//    ** Наименование - Строка - 
//    ** Идентификатор - Строка - 
//    ** НеГабарит - Строка - 
//    ** ФормаОплаты - Массив из Число 
//    ** ТолькоВремяДоставки - Булево - 
//   * Отправитель - Структура - :
//    ** Контрагент - Структура - :
//     *** Ссылка - Неопределено - 
//     *** Наименование - Строка - 
//     *** ЮрФизЛицо - Число - 
//     *** ИНН - Строка - 
//     *** КПП - Строка - 
//     *** ЮридическийАдрес - Структура - :
//      **** ТипАдреса - Строка - 
//      **** Владелец - Неопределено - 
//      **** ВладелецНаименование - Строка - 
//      **** Представление - Строка - 
//      **** Широта - Число - 
//      **** Долгота - Число - 
//      **** ЗначенияПолей - Строка - 
//      **** Значение - Строка - 
//     *** ЭтоОрганизация - Булево - 
//    ** Адрес - Структура - :
//     *** ТипАдреса - Строка - 
//     *** Владелец - Неопределено - 
//     *** ВладелецНаименование - Строка - 
//     *** Представление - Строка - 
//     *** Широта - Число - 
//     *** Долгота - Число - 
//     *** ЗначенияПолей - Строка - 
//     *** Значение - Строка - 
//    ** КонтактноеЛицо - Структура - :
//     *** Ссылка - Неопределено - 
//     *** Идентификатор - Строка - 
//     *** Наименование - Строка - 
//     *** Email - Строка - 
//     *** Телефон - Структура - :
//      **** Представление - Строка - 
//      **** Значение - Строка - 
//     *** ТелефонДополнительный - Структура - :
//      **** Представление - Строка - 
//      **** Значение - Строка - 
//     *** СпособОпределенияКонтактногоЛица - Число - 
//   * ПунктПриемаГруза - Структура - :
//    ** Ссылка - Неопределено - 
//    ** ТипНаименование - Строка - 
//    ** ТипИдентификатор - Строка - 
//    ** Идентификатор - Строка - 
//    ** ИдентификаторВСистемеГрузоперевозчика - Строка - 
//    ** НаселенныйПунктИдентификатор - Строка - 
//    ** Наименование - Строка - 
//    ** Адрес - Строка - 
//    ** Телефон - Строка - 
//   * СпособОтгрузки - Число - 
//   * ОтправительНаселенныйПункт - Число - 
//   * ДатаОтгрузки - Дата - 
//   * ВремяОтгрузки - Структура - :
//    ** С - Дата - 
//    ** По - Дата - 
//    ** ОбедС - Дата - 
//    ** ОбедПо - Дата - 
//   * ОтгрузкаНаБлижайшееВремя - Булево - 
//   * ВариантВремениОтгрузки - Число - 
//   * Получатель - Структура - :
//    ** Контрагент - Структура - :
//     *** Ссылка - Неопределено - 
//     *** Наименование - Строка - 
//     *** ЮрФизЛицо - Число - 
//     *** ИНН - Строка - 
//     *** КПП - Строка - 
//     *** ЮридическийАдрес - Структура - :
//      **** ТипАдреса - Строка - 
//      **** Владелец - Неопределено - 
//      **** ВладелецНаименование - Строка - 
//      **** Представление - Строка - 
//      **** Широта - Число - 
//      **** Долгота - Число - 
//      **** ЗначенияПолей - Строка - 
//      **** Значение - Строка - 
//     *** ЭтоОрганизация - Булево - 
//    ** Адрес - Структура - :
//     *** ТипАдреса - Строка - 
//     *** Владелец - Неопределено - 
//     *** ВладелецНаименование - Строка - 
//     *** Представление - Строка - 
//     *** Широта - Число - 
//     *** Долгота - Число - 
//     *** ЗначенияПолей - Строка - 
//     *** Значение - Строка - 
//    ** КонтактноеЛицо - Структура - :
//     *** Ссылка - Неопределено - 
//     *** Идентификатор - Строка - 
//     *** Наименование - Строка - 
//     *** Email - Строка - 
//     *** Телефон - Структура - :
//      **** Представление - Строка - 
//      **** Значение - Строка - 
//     *** ТелефонДополнительный - Структура - :
//      **** Представление - Строка - 
//      **** Значение - Строка - 
//     *** СпособОпределенияКонтактногоЛица - Число - 
//   * ПунктВыдачиГруза - Структура - :
//    ** Ссылка - Неопределено - 
//    ** ТипНаименование - Строка - 
//    ** ТипИдентификатор - Строка - 
//    ** Идентификатор - Строка - 
//    ** ИдентификаторВСистемеГрузоперевозчика - Строка - 
//    ** НаселенныйПунктИдентификатор - Строка - 
//    ** Наименование - Строка - 
//    ** Адрес - Строка - 
//    ** Телефон - Строка - 
//   * СпособДоставки - Число - 
//   * ПолучательНаселенныйПункт - Число - 
//   * ДатаДоставки - Дата - 
//   * ВремяДоставки - Структура - :
//    ** С - Дата - 
//    ** По - Дата - 
//    ** ОбедС - Дата - 
//    ** ОбедПо - Дата - 
//   * ПунктВыдачиКлиента - Структура - :
//    ** Идентификатор - Строка - 
//    ** Наименование - Строка - 
//    ** Адрес - Строка - 
//    ** Телефон - Строка - 
//    ** АдресШирота - Строка - 
//    ** АдресДолгота - Строка - 
//   * ПлательщикРоль - Число - 
//   * Плательщик - Структура - :
//    ** Контрагент - Структура - :
//     *** Ссылка - Неопределено - 
//     *** Наименование - Строка - 
//     *** ЮрФизЛицо - Число - 
//     *** ИНН - Строка - 
//     *** КПП - Строка - 
//     *** ЮридическийАдрес - Структура:
//      **** ТипАдреса - Строка - 
//      **** Владелец - Неопределено - 
//      **** ВладелецНаименование - Строка - 
//      **** Представление - Строка - 
//      **** Широта - Число - 
//      **** Долгота - Число - 
//      **** ЗначенияПолей - Строка - 
//      **** Значение - Строка - 
//     *** ЭтоОрганизация - Булево - 
//    ** Адрес - Структура - :
//     *** ТипАдреса - Строка - 
//     *** Владелец - Неопределено - 
//     *** ВладелецНаименование - Строка - 
//     *** Представление - Строка - 
//     *** Широта - Число - 
//     *** Долгота - Число - 
//     *** ЗначенияПолей - Строка - 
//     *** Значение - Строка - 
//    ** КонтактноеЛицо - Структура - :
//     *** Ссылка - Неопределено - 
//     *** Идентификатор - Строка - 
//     *** Наименование - Строка - 
//     *** Email - Строка - 
//     *** Телефон - Структура - :
//      **** Представление - Строка - 
//      **** Значение - Строка - 
//     *** ТелефонДополнительный - Структура - :
//      **** Представление - Строка - 
//      **** Значение - Строка - 
//     *** СпособОпределенияКонтактногоЛица - Число - 
//   * Груз - Структура - :
//    ** КоличествоГрузовыхМест - Число - 
//    ** Вес - Число - 
//    ** Объем - Число - 
//    ** МаксимальнаяВысота - Число - 
//    ** МаксимальнаяДлина - Число - 
//    ** МаксимальнаяШирина - Число - 
//    ** МаксимальныйВес - Число - 
//    ** НегабаритныйВес - Число - 
//    ** НегабаритныйОбъем - Число - 
//    ** КоличествоНегабаритныхГрузовыхМест - Число - 
//    ** Содержимое - Строка - 
//    ** Стоимость - Число - 
//   * ЗаказчикРоль - Число - 
//   * ДополнительнаяИнформация - Строка - 
//   * Услуги - ТаблицаЗначений - Список услуг и их свойств:
//    ** Идентификатор - Строка - Идентификатор свойства
//    ** Использовать - Булево - Признак выбора услуги
//    ** Свойства - Массив из Структура - Массив свойств
//   * ГрузовыеМестаВГХ - Массив из см. НовыйПараметрыЭлементаГрузовогоМеста
//   * Товары - ТаблицаЗначений - 
//   * ДополнительныеУслуги - ТаблицаЗначений - :
//    ** Идентификатор - Строка - Идентификатор свойства
//    ** Свойства - Массив из Структура - Массив свойств
Функция НовыйПараметрыЗаказаНаДоставку() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("КлючИдемпотентности", Новый УникальныйИдентификатор());
	
	Параметры.Вставить("ДокументОснование", Неопределено); // Устарел. Не использовать.
	Параметры.Вставить("ДокументыОснования", Новый СписокЗначений());
	Параметры.Вставить("ДокументыОснованияИдентификаторы", Новый СписокЗначений());
	Параметры.Вставить("ДокументыОснованияВведеныВДругойИБ", Ложь);
	Параметры.Вставить("ФормаОплаты", 1);
	Параметры.Вставить("ТипЗаказа", 0); // 1 - интернет-магазин, 2 - доставка
	Параметры.Вставить("Валюта", НовыйПараметрыВалюты());
	Параметры.Вставить("СуммаДокумента", 0);
	Параметры.Вставить("СуммаСкидки", 0);
	
	Параметры.Вставить("Оплачен", Ложь);
	Параметры.Вставить("НаложенныйПлатежВидОплаты", 0);
	Параметры.Вставить("СуммаНаложенногоПлатежа", 0);
	Параметры.Вставить("НаложенныйПлатежВидОплатыДополнительный", 0);
	Параметры.Вставить("СуммаНаложенногоПлатежаДополнительный", 0);
	Параметры.Вставить("ПолнаяСтоимость", 0);
	
	Параметры.Вставить("ТипГрузоперевозки", 0);
	Параметры.Вставить("Грузоперевозчик", НовыйПараметрыГрузоперевозчика());
	Параметры.Вставить("Тариф", НовыйПараметрыТарифа());
	
	Параметры.Вставить("Отправитель", НовыйПараметрыУчастникаГрузоперевозки());
	Параметры.Вставить("ПунктПриемаГруза", НовыйПараметрыПунктаПриемаВыдачи());
	Параметры.Вставить("СпособОтгрузки", 0);
	Параметры.Вставить("ОтправительНаселенныйПункт", НовыеПараметрыНаселенногоПункта());
	Параметры.Вставить("ДатаОтгрузки", '00010101');
	Параметры.Вставить("ВремяОтгрузки", НовыйПараметрыВремениОтгрузкиДоставки());
	Параметры.Вставить("ОтгрузкаНаБлижайшееВремя", Ложь);
	Параметры.Вставить("ВариантВремениОтгрузки", 0);
	
	Параметры.Вставить("Получатель", НовыйПараметрыУчастникаГрузоперевозки());
	Параметры.Вставить("ПунктВыдачиГруза", НовыйПараметрыПунктаПриемаВыдачи());
	Параметры.Вставить("СпособДоставки", 0);
	Параметры.Вставить("ПолучательНаселенныйПункт", НовыеПараметрыНаселенногоПункта());
	Параметры.Вставить("ДатаДоставки", '00010101');
	Параметры.Вставить("ВремяДоставки", НовыйПараметрыВремениОтгрузкиДоставки());
	
	Параметры.Вставить("ПунктВыдачиКлиента", НовыйПараметрыПунктаВыдачиКлиента());
	
	Параметры.Вставить("ПлательщикРоль", 0); //1 - Отправитель; 2 - Получатель; 3 - Третье лицо
	Параметры.Вставить("Плательщик", НовыйПараметрыУчастникаГрузоперевозки());
	Параметры.Вставить("Груз", НовыйПараметрыГруза());
	
	Параметры.Вставить("ЗаказчикРоль", 0); //1 - Отправитель; 2 - Получатель; 3 - Плательщик; 4 - Третье лицо

	Параметры.Вставить("ДополнительнаяИнформация", "");
	
	// Таблица услуги
	ТаблицаУслуги = Новый ТаблицаЗначений;
	ТаблицаУслуги.Колонки.Добавить("Идентификатор");
	ТаблицаУслуги.Колонки.Добавить("Использовать", СервисДоставкиСлужебный.Типы().Булево);
	ТаблицаУслуги.Колонки.Добавить("Свойства", СервисДоставкиСлужебный.Типы().Массив);
	
	Параметры.Вставить("Услуги", ТаблицаУслуги);
	
	// Грузовые места
	Параметры.Вставить("ГрузовыеМестаВГХ", Новый Массив); // см. НовыйПараметрыЭлементаГрузовогоМеста()
	
	// Таблица позиций
	ТаблицаТовары = Новый ТаблицаЗначений;
	ПараметрыТаблицыПозиций = НовыйПараметрыЭлементаГруза();
	
	Для Каждого ПараметрГруза Из ПараметрыТаблицыПозиций Цикл
		ТаблицаТовары.Колонки.Добавить(ПараметрГруза.Ключ);
	КонецЦикла;
	
	Параметры.Вставить("Товары", ТаблицаТовары);
	
	// Таблица дополнительных услуг.
	ТаблицаДопУслуги = Новый ТаблицаЗначений;
	ТаблицаДопУслуги.Колонки.Добавить("Идентификатор");
	ТаблицаДопУслуги.Колонки.Добавить("Свойства", СервисДоставкиСлужебный.Типы().Массив);
	
	Параметры.Вставить("ДополнительныеУслуги", ТаблицаДопУслуги);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры объекта данных сервиса доставки.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыМультизаказаНаДоставку() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ТипГрузоперевозки", 0);
	Параметры.Вставить("ТипНаименование", "");
	Параметры.Вставить("ТипИдентификатор", "");
	Параметры.Вставить("Грузоперевозчик", НовыйПараметрыГрузоперевозчика());
	Параметры.Вставить("Тариф", НовыйПараметрыТарифа());
	
	Параметры.Вставить("Отправитель", НовыйПараметрыУчастникаГрузоперевозки());
	Параметры.Вставить("ПунктПриемаГруза", НовыйПараметрыПунктаПриемаВыдачи());
	Параметры.Вставить("СпособОтгрузки", 0);
	Параметры.Вставить("ДатаОтгрузки", '00010101');
	Параметры.Вставить("ВремяОтгрузки", НовыйПараметрыВремениОтгрузкиДоставки());
	Параметры.Вставить("ОтгрузкаНаБлижайшееВремя", Ложь);
	Параметры.Вставить("ВариантВремениОтгрузки", 0);
	
	Параметры.Вставить("ПлательщикРоль", 0); //1 - Отправитель; 2 - Получатель; 3 - Третье лицо
	Параметры.Вставить("Плательщик", НовыйПараметрыУчастникаГрузоперевозки());
	Параметры.Вставить("ФормаОплаты", 1);
	Параметры.Вставить("ФормаОплатыНаименование", "");
	Параметры.Вставить("Валюта", НовыйПараметрыВалюты());
	Параметры.Вставить("СуммаДокумента", 0);
	Параметры.Вставить("СуммаСкидки", 0);
	
	Параметры.Вставить("Груз", НовыйПараметрыГруза());
	
	Параметры.Вставить("ДополнительнаяИнформация", "");
	
	// Таблица услуги
	ТаблицаУслуги = Новый ТаблицаЗначений;
	ТаблицаУслуги.Колонки.Добавить("Идентификатор");
	ТаблицаУслуги.Колонки.Добавить("Свойства", СервисДоставкиСлужебный.Типы().Массив);
	
	Параметры.Вставить("Услуги", ТаблицаУслуги);
	
	Параметры.Вставить("Заказы", Новый Массив());
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры объекта данных сервиса доставки.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыУчастникаГрузоперевозки() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("Контрагент", НовыйПараметрыКонтрагента());
	Параметры.Вставить("Адрес", НовыйПараметрыАдреса("АдресДоставки"));
	Параметры.Вставить("КонтактноеЛицо", НовыйПараметрыКонтактногоЛица());
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры объекта данных сервиса доставки.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса:
//  *Ссылка - СправочникСсылка,Неопределено - 
//  *Наименование - Строка
//  *ЮрФизЛицо - Число
//  *ИНН - Строка
//  *КПП - Строка
//
Функция НовыйПараметрыКонтрагента() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", Неопределено);
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("ЮрФизЛицо", 0);
	Параметры.Вставить("ИНН", "");
	Параметры.Вставить("КПП", "");
	Параметры.Вставить("ЮридическийАдрес", НовыйПараметрыАдреса("Юридический"));
	Параметры.Вставить("ЭтоОрганизация", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры объекта данных сервиса доставки.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса:
//  *Ссылка - СправочникСсылка, Неопределено - 
//  *Идентификатор - Строка
//  *Наименование - Строка
//  *Email - Строка
//  *Телефон - см. НовыйПараметрыТелефона
//  *ТелефонДополнительный - см. НовыйПараметрыТелефона
//  *СпособОпределенияКонтактногоЛица - Число
//
Функция НовыйПараметрыКонтактногоЛица() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", Неопределено);
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("Email", "");
	Параметры.Вставить("Телефон", НовыйПараметрыТелефона());
	Параметры.Вставить("ТелефонДополнительный", НовыйПараметрыТелефона());
	Параметры.Вставить("СпособОпределенияКонтактногоЛица", 0);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры объекта данных сервиса доставки.
// 
// Параметры:
//  ТипАдреса - Строка - наименование типа адреса. Например: "АдресДоставки", "Юридический", "Фактический".
// 
// Возвращаемое значение:
//  Структура - Новый параметры адреса:
//   * ТипАдреса - Строка - 
//   * Владелец - Неопределено - 
//   * ВладелецНаименование - Строка - 
//   * Представление - Строка - 
//   * Широта - Число - 
//   * Долгота - Число - 
//   * ЗначенияПолей - Строка - 
//   * Значение - Строка - 
Функция НовыйПараметрыАдреса(ТипАдреса = "") Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("ТипАдреса", ТипАдреса);
	Параметры.Вставить("Владелец", Неопределено);
	Параметры.Вставить("ВладелецНаименование", "");
	Параметры.Вставить("Представление", "");
	Параметры.Вставить("Широта", 0);
	Параметры.Вставить("Долгота", 0);
	Параметры.Вставить("ЗначенияПолей", "");
	Параметры.Вставить("Значение", "");
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры объекта данных сервиса доставки.
// 
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
Функция НовыйПараметрыСвойстваУслуги() Экспорт

	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("Наименование", "");
	Результат.Вставить("ЕдиницаИзмерения", "");
	Результат.Вставить("ТипЗначения", "");
	Результат.Вставить("Значение", Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры наложенного платежа.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для платежа.
//
Функция НовыйПараметрыПлатежа() Экспорт
	
	ПараметрыПлатежа = Новый Структура();
	
	ПараметрыПлатежа.Вставить("Идентификатор", "");
	ПараметрыПлатежа.Вставить("ДокументОснование", Неопределено);
	ПараметрыПлатежа.Вставить("ОтправительИНН", "");
	ПараметрыПлатежа.Вставить("ОтправительКПП", "");
	ПараметрыПлатежа.Вставить("ОтправительКонтрагентСсылка", Неопределено);
	ПараметрыПлатежа.Вставить("ОтправительКонтрагентНаименование", "");
	ПараметрыПлатежа.Вставить("ГрузоперевозчикИНН", "");
	ПараметрыПлатежа.Вставить("ГрузоперевозчикКПП", "");
	ПараметрыПлатежа.Вставить("ГрузоперевозчикКонтрагентСсылка", Неопределено);
	ПараметрыПлатежа.Вставить("ГрузоперевозчикКонтрагентНаименование", "");
	ПараметрыПлатежа.Вставить("СуммаНаложенногоПлатежа", 0);
	ПараметрыПлатежа.Вставить("ДатаРегистрацииНаложенногоПлатежа", '00010101');
		
	Возврат ПараметрыПлатежа;
	
КонецФункции

// Возвращает параметры частичной доставки
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для частичной доставки:
//   * ИдентификаторДокумента - Строка - идентификатор заказа на доставку в сервисе интеграции
//   * Товары - массив из структура - перечень частично доставленных товаров:
//   	** ИдентификаторСтроки - Строка - идентификатор строки документа-основания.
//   	** ИдентификаторДокументаОснования - строка - идентификатор документа-основания
//   	** Количество - число - количество товара, заявленное доставке
//   	** КоличествоВозврат - число -  количество товара, непринятое получателем
//
Функция НовыйПараметрыЗаказаНаДоставкуСЧастичнойДоставкой() Экспорт
	
	ПараметрыЗаказаНаДоставку = Новый Структура();

	ПараметрыЗаказаНаДоставку.Вставить("ИдентификаторДокумента", "");
	ПараметрыЗаказаНаДоставку.Вставить("Товары", Новый Массив);	// Массив из структура
	
	Возврат ПараметрыЗаказаНаДоставку;
	
КонецФункции

// Конструктор структуры времени отгрузки
// 
// Возвращаемое значение:
//  Структура:
//    * С - Дата
//    * По - Дата
//    * ОбедС - Дата
//    * ОбедПо - Дата
//    * Зона - Строка
Функция НовыйПараметрыВремениОтгрузкиДоставки() Экспорт

	Параметры = Новый Структура;
	
	Параметры.Вставить("С", '00010101');
	Параметры.Вставить("По", '00010101');
	Параметры.Вставить("ОбедС", '00010101');
	Параметры.Вставить("ОбедПо", '00010101');
	Параметры.Вставить("Зона", ЧасовойПоясСеанса());
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПараметрыПоУмолчанию

// Возвращает структуру, содержащую значения параметров по умолчанию для работы с 1С:Доставка, прочитанные из информационной базы по 
// наименованиям параметров.
//
// Параметры:
//  ТипГрузоперевозки - Число - 1 - Сборный груз, 2 - Курьерская доставка, 3 - Курьерика
//  Параметры - Строка - имена параметров, перечисленные через запятую, в формате
//                       требований к свойствам структуры.
//                       Например, "ВесЕдиницыТовара, ШиринаЕдиницыТовара".
//            - Массив, ФиксированныйМассив - имена параметров в формате требований
//                       к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных параметров:
//    * ОрганизацияБизнесСети - ОпределяемыйТип.ОрганизацияСервисДоставки - организации, подключенная к 1С:БизнесСеть.
//    * ВесЕдиницыТовара      - Число - вес единицы товара в килограммах.
//    * ДлинаЕдиницыТовара    - Число - размер единицы товара в сантиметрах.
//    * ШиринаЕдиницыТовара   - Число - размер единицы товара в сантиметрах.
//    * ВысотаЕдиницыТовара   - Число - размер единицы товара в сантиметрах.
//    * ВесГрузовогоМеста     - Число - вес грузового места в килограммах.
//    * ДлинаГрузовогоМеста   - Число - размер грузового места в сантиметрах.
//    * ШиринаГрузовогоМеста  - Число - размер грузового места в сантиметрах.
//    * ВысотаГрузовогоМеста  - Число - размер грузового места в сантиметрах.
//
Функция ПараметрыПоУмолчанию(ТипГрузоперевозки, Параметры = "") Экспорт
	
	ВернутьВсеПараметры = Ложь;
	ПараметрыДляЗапроса = Новый Массив();
	
	Если ТипЗнч(Параметры) = Тип("Строка") Тогда
		Если ПустаяСтрока(Параметры) Тогда
			ВернутьВсеПараметры = Истина;
		Иначе
			// Удаление пробелов.
			Параметры = СтрЗаменить(Параметры, " ", "");
			// Преобразование параметра в массив полей.
			ПараметрыДляЗапроса = СтрРазделить(Параметры, ",");
		КонецЕсли;
	ИначеЕсли ТипЗнч(Параметры) = Тип("Массив")
		Или ТипЗнч(Параметры) = Тип("ФиксированныйМассив") Тогда
		ПараметрыДляЗапроса = Параметры;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный тип параметра Параметры в функции СервисДоставки.ПараметрыПоУмолчанию: %1'"), 
			Строка(ТипЗнч(Параметры)));
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ОрганизацияБизнесСети""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ NULL
	|	КОНЕЦ) КАК ОрганизацияБизнесСети,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВесЕдиницыТовара""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК ВесЕдиницыТовара,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВысотаЕдиницыТовара""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК ВысотаЕдиницыТовара,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ДлинаЕдиницыТовара""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК ДлинаЕдиницыТовара,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ШиринаЕдиницыТовара""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК ШиринаЕдиницыТовара,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВесГрузовогоМеста""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК ВесГрузовогоМеста,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВысотаГрузовогоМеста""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК ВысотаГрузовогоМеста,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ДлинаГрузовогоМеста""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК ДлинаГрузовогоМеста,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ШиринаГрузовогоМеста""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК ШиринаГрузовогоМеста,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВремяДоставкиОбедПо""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ) КАК ВремяДоставкиОбедПо,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВремяДоставкиОбедС""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ) КАК ВремяДоставкиОбедС,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВремяДоставкиПо""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ) КАК ВремяДоставкиПо,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВремяДоставкиС""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ) КАК ВремяДоставкиС,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВремяОтгрузкиОбедПо""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ) КАК ВремяОтгрузкиОбедПо,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВремяОтгрузкиОбедС""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ) КАК ВремяОтгрузкиОбедС,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВремяОтгрузкиПо""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ) КАК ВремяОтгрузкиПо,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВремяОтгрузкиС""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ) КАК ВремяОтгрузкиС,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""КонтактноеЛицо""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ NULL
	|	КОНЕЦ) КАК КонтактноеЛицо,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""СпособОпределенияКонтактногоЛица""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК СпособОпределенияКонтактногоЛица,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""СпособДоставки""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК СпособДоставки,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""СпособОтгрузки""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК СпособОтгрузки,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ЗаказчикРоль""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК ЗаказчикРоль
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	РегистрСведений.НастройкиОбщиеСервисДоставки КАК НастройкиДоставки
	|ГДЕ
	|	(НастройкиДоставки.НаименованиеПараметра В (&Параметры)
	|	ИЛИ &ВернутьВсеПараметры)
	|	И НастройкиДоставки.ТипГрузоперевозки = &ТипГрузоперевозки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""УслугиДоставки""
	|			ТОГДА НастройкиДоставки.ЗначениеХранилищеЗначения
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК УслугиДоставки
	|ПОМЕСТИТЬ ВременнаяТаблицаУслугиДоставки
	|ИЗ
	|	РегистрСведений.НастройкиОбщиеСервисДоставки КАК НастройкиДоставки
	|ГДЕ
	|	НастройкиДоставки.НаименованиеПараметра = ""УслугиДоставки""
	|	И НастройкиДоставки.ТипГрузоперевозки = &ТипГрузоперевозки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.ОрганизацияБизнесСети КАК ОрганизацияБизнесСети,
	|	ВременнаяТаблица.ВесЕдиницыТовара КАК ВесЕдиницыТовара,
	|	ВременнаяТаблица.ВысотаЕдиницыТовара КАК ВысотаЕдиницыТовара,
	|	ВременнаяТаблица.ДлинаЕдиницыТовара КАК ДлинаЕдиницыТовара,
	|	ВременнаяТаблица.ШиринаЕдиницыТовара КАК ШиринаЕдиницыТовара,
	|	ВременнаяТаблица.ВесГрузовогоМеста КАК ВесГрузовогоМеста,
	|	ВременнаяТаблица.ВысотаГрузовогоМеста КАК ВысотаГрузовогоМеста,
	|	ВременнаяТаблица.ДлинаГрузовогоМеста КАК ДлинаГрузовогоМеста,
	|	ВременнаяТаблица.ШиринаГрузовогоМеста КАК ШиринаГрузовогоМеста,
	|	ВременнаяТаблица.ВремяДоставкиОбедПо КАК ВремяДоставкиОбедПо,
	|	ВременнаяТаблица.ВремяДоставкиОбедС КАК ВремяДоставкиОбедС,
	|	ВременнаяТаблица.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	ВременнаяТаблица.ВремяДоставкиС КАК ВремяДоставкиС,
	|	ВременнаяТаблица.ВремяОтгрузкиОбедПо КАК ВремяОтгрузкиОбедПо,
	|	ВременнаяТаблица.ВремяОтгрузкиОбедС КАК ВремяОтгрузкиОбедС,
	|	ВременнаяТаблица.ВремяОтгрузкиПо КАК ВремяОтгрузкиПо,
	|	ВременнаяТаблица.ВремяОтгрузкиС КАК ВремяОтгрузкиС,
	|	ВременнаяТаблица.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ВременнаяТаблица.СпособОпределенияКонтактногоЛица КАК СпособОпределенияКонтактногоЛица,
	|	ВременнаяТаблица.СпособДоставки КАК СпособДоставки,
	|	ВременнаяТаблица.СпособОтгрузки КАК СпособОтгрузки,
	|	ВременнаяТаблица.ЗаказчикРоль КАК ЗаказчикРоль,
	|	ВременнаяТаблицаУслугиДоставки.УслугиДоставки КАК УслугиДоставки
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслугиДоставки КАК ВременнаяТаблицаУслугиДоставки
	|		ПО (ИСТИНА)";
	
	Запрос.УстановитьПараметр("Параметры", ПараметрыДляЗапроса);
	Запрос.УстановитьПараметр("ВернутьВсеПараметры", ВернутьВсеПараметры);
	Запрос.УстановитьПараметр("ТипГрузоперевозки", ТипГрузоперевозки);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат НовыйПараметрыПоУмолчанию();
	КонецЕсли;
	
	СтруктураПараметров = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат.Выгрузить()[0]);
	СтруктураОтвета = Новый Структура();
	Значение = Неопределено;
	
	Если Не ВернутьВсеПараметры Тогда
		
		Для Каждого ТекСтрока Из ПараметрыДляЗапроса Цикл
			СтруктураПараметров.Свойство(ТекСтрока, Значение);
			СтруктураОтвета.Вставить(ТекСтрока, Значение);
		КонецЦикла;
		
	ИначеЕсли НЕ СтруктураПараметров.ВесЕдиницыТовара = Null Тогда
		СтруктураОтвета = СтруктураПараметров;
	Иначе
		СтруктураОтвета = НовыйПараметрыПоУмолчанию();
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

#КонецОбласти

#Область Права

// Для текущего пользователя проверяет возможность работать с сервисами доставки.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости вывода сообщения о недостаточности прав.
// 
// Возвращаемое значение:
//  Булево - наличие права.
//
Функция ПравоРаботыССервисомДоставки(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = ПравоДоступа("Использование", Метаданные.Обработки.СервисДоставки);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		СервисДоставкиСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

// Для текущего пользователя проверяет возможность отправки перевозчику заказов на доставку.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости вывода сообщения о недостаточности прав.
// 
// Возвращаемое значение:
//  Булево - наличие права.
//
Функция ПравоОтправкиЗаказовНаДоставкуПеревозчику(ВыводитьСообщение = Ложь) Экспорт
	
	ЕстьПраво = Пользователи.РолиДоступны("ОтправкаЗаказовНаДоставкуПеревозчикуСервисДоставки", , Ложь);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		СервисДоставкиСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Проверяет возможность работы в сервисе 1С:Доставка для текущего пользователя.
//
// Параметры:
//  Параметры - Структура - см. НовыйПараметрыАдреса().
// 
Процедура ЗаполнитьАдресПоПараметрам(Параметры) Экспорт
	
	СервисДоставкиСлужебный.ЗаполнитьАдресПоПараметрам(Параметры);
	
КонецПроцедуры

// Возвращает признак возможности использовать регламентное задание для загрузки наложенных платежей из сервиса интеграции
//
// Возвращаемое значение:
//  Булево - признак использования.
//
Функция ИспользуетсяРегламентЗагрузкиНаложенныхПлатежей() Экспорт
	
	ИспользоватьРегламентЗагрузки = Ложь;
	СервисДоставкиПереопределяемый.ИспользоватьРегламентЗагрузкиНаложенныхПлатежей(ИспользоватьРегламентЗагрузки);
	
	Возврат ИспользоватьРегламентЗагрузки;

КонецФункции

// Возвращает признак возможности использовать регламентное задание для загрузки данных частичной доставки из сервиса интеграции
//
// Возвращаемое значение:
//  Булево - признак использования.
//
Функция ИспользуетсяРегламентСинхронизацииПоЧастичнойДоставке() Экспорт
	
	Использовать = Ложь;
	СервисДоставкиПереопределяемый.ИспользоватьРегламентСинхронизацииПоЧастичнойДоставке(Использовать);
	
	Возврат Использовать;

КонецФункции

// Заполнить сервисы доставки.
// 
// Параметры:
//  СервисыДоставки - ТаблицаЗначений - Сервисы доставки
Процедура ЗаполнитьСервисыДоставки(СервисыДоставки) Экспорт
	
	Сервис = СервисыДоставки.Добавить();
	Сервис.ТипГрузоперевозки = 1;
	Сервис.СервисДоставки = СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(1);
	Сервис.ИспользоватьСервисДоставки = ПолучитьФункциональнуюОпцию("ИспользоватьСервис1СДоставка");
	Сервис.Подсказка = Истина;
	
	Сервис = СервисыДоставки.Добавить();
	Сервис.ТипГрузоперевозки = 2;
	Сервис.СервисДоставки = СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(2);
	Сервис.ИспользоватьСервисДоставки = ПолучитьФункциональнуюОпцию("ИспользоватьСервис1СКурьер");
	Сервис.ИспользоватьНаложенныеПлатежи = ПолучитьФункциональнуюОпцию("ИспользоватьНаложенныеПлатежиСервис1СКурьер");
	Сервис.Подсказка = Истина;
	
	Сервис = СервисыДоставки.Добавить();
	Сервис.ТипГрузоперевозки = 3;
	Сервис.СервисДоставки = СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(3);
	Сервис.ИспользоватьСервисДоставки = ПолучитьФункциональнуюОпцию("ИспользоватьСервис1СКурьерика");
	Сервис.ИспользоватьЧастичнуюДоставку = ПолучитьФункциональнуюОпцию("ИспользоватьЧастичнуюДоставкуСервис1СКурьерика");
	Сервис.Подсказка = Истина;
	
	Сервис = СервисыДоставки.Добавить();
	Сервис.ТипГрузоперевозки = 4;
	Сервис.СервисДоставки = СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(4);
	Сервис.ИспользоватьСервисДоставки = ПолучитьФункциональнуюОпцию("ИспользоватьСервис1ССДЭК");
	Сервис.ИспользоватьНаложенныеПлатежи = ПолучитьФункциональнуюОпцию("ИспользоватьНаложенныеПлатежиСервис1ССДЭК");
	Сервис.Подсказка = Истина;
	
КонецПроцедуры

// Возвращает признак возможности использовать регламентное задание.
//
// Возвращаемое значение:
//  Булево - признак использования.
//
Функция ИспользуютсяНаложенныеПлатежи() Экспорт
	
	ИспользоватьНаложенныеПлатежи = Ложь;
	СервисДоставкиПереопределяемый.ИспользоватьНаложенныеПлатежи(ИспользоватьНаложенныеПлатежи);
	
	Возврат ИспользоватьНаложенныеПлатежи;

КонецФункции

// Возвращает признак возможности использовать частичную доставку.
//
// Возвращаемое значение:
//  Булево - признак использования.
//
Функция ИспользуетсяЧастичнаяДоставка() Экспорт
	
	Используется = Ложь;
	СервисДоставкиПереопределяемый.ИспользоватьЧастичнуюДоставку(Используется);
	
	Возврат Используется;

КонецФункции

// Заполняет параметры телефона контактной информацией по владельцу, указанному в Параметры.
//
// Параметры:
//  Параметры - см. НовыйПараметрыКонтактногоЛица
//  ЗаполняемыеТипыКонтактнойИнформации - Массив из ПеречислениеСсылка.ТипыКонтактнойИнформации, Неопределено - 
//  	Если Неопределено, то заполняются все типы контактной информации (телефон, e-mail)
//
Процедура ЗаполнитьПараметрыКонтактногоЛица(Параметры, ЗаполняемыеТипыКонтактнойИнформации = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Параметры.Ссылка) Тогда
		Возврат;
	КонецЕсли; 
	
	Параметры.Наименование = Строка(Параметры.Ссылка);
	
	КлючиЗаполнения = Новый Структура();
	КлючиЗаполнения.Вставить("Телефон", Перечисления.ТипыКонтактнойИнформации.Телефон);	
	КлючиЗаполнения.Вставить("Email", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);	
	
	Если ТипЗнч(ЗаполняемыеТипыКонтактнойИнформации) <> Тип("Массив") Тогда
		ЗаполняемыеТипыКонтактнойИнформации = Новый Массив();
		Для каждого Элем Из КлючиЗаполнения Цикл
			ЗаполняемыеТипыКонтактнойИнформации.Добавить(Элем.Значение)
		КонецЦикла;
	КонецЕсли;
	
	ВидыКИПоСсылка = УправлениеКонтактнойИнформацией.ВидыКонтактнойИнформацииОбъекта(Параметры.Ссылка);
	ЦелевыеВидыКИ = Новый Массив;
	Для каждого ЭлемВидКИ Из ВидыКИПоСсылка Цикл
		Если ЗаполняемыеТипыКонтактнойИнформации.Найти(ЭлемВидКИ.Тип) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЦелевыеВидыКИ.Добавить(ЭлемВидКИ.Ссылка);
	КонецЦикла; 
	
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	ЦелеваяКонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Параметры.Ссылка, ЦелевыеВидыКИ, ТекущаяДата, Ложь);
	
	ЗаполненныеПараметры = Новый Массив;
	Для каждого ЭлемКИ Из ЦелеваяКонтактнаяИнформация Цикл
		Для каждого ЭлемРеквизит Из КлючиЗаполнения Цикл
			Если ЭлемКИ.Тип = ЭлемРеквизит.Значение
				И ЗаполненныеПараметры.Найти(ЭлемРеквизит.Ключ) = Неопределено Тогда
				
				ЗаполненныеПараметры.Добавить(ЭлемРеквизит.Ключ);
				Если ЭлемРеквизит.Ключ = "Телефон" Тогда
					Если НЕ ПустаяСтрока(Параметры[ЭлемРеквизит.Ключ].Представление) Тогда
						Продолжить;
					КонецЕсли; 
					Параметры[ЭлемРеквизит.Ключ].Значение = ЭлемКИ.Значение;
					Параметры[ЭлемРеквизит.Ключ].Представление = ЭлемКИ.Представление;
				Иначе
					Если НЕ ПустаяСтрока(Параметры[ЭлемРеквизит.Ключ]) Тогда
						Продолжить;
					КонецЕсли; 
					Параметры[ЭлемРеквизит.Ключ] = ЭлемКИ.Представление;
				КонецЕсли; 
				
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Определяет пункт выдачи клиента для склада, либо возвращает пункт выдачи, используемый по умолчанию.
//
// Параметры:
//  ТипГрузоперевозки - Число
//  Склад - Произвольный
//
// Возвращаемое значение:
// 	Строка.
//
Функция ПолучитьПунктВыдачиКлиента(ТипГрузоперевозки, Склад = Неопределено) Экспорт
	
	СкладыРодители = Новый ТаблицаЗначений;
	СкладыРодители.Колонки.Добавить("Склад", Метаданные.ОпределяемыеТипы.СкладСервисДоставки.Тип);
	
	СкладМетаданные = Метаданные.НайтиПоТипу(ТипЗнч(Склад));
	Если СкладМетаданные <> Неопределено И Метаданные.Справочники.Содержит(СкладМетаданные) И СкладМетаданные.Иерархический Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Склады.Ссылка КАК Склад
		|ИЗ
		|	&ИмяТаблицы КАК Склады
		|ГДЕ
		|	Склады.Ссылка = &Склад
		|ИТОГИ
		|ПО
		|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицы", СкладМетаданные.ПолноеИмя());
		СкладыРодители = Запрос.Выполнить().Выгрузить();
		
		СтрокаПоиск = СкладыРодители.Найти(Склад);
		Если СтрокаПоиск <> Неопределено Тогда
			СкладыРодители.Удалить(СтрокаПоиск);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипГрузоперевозки", ТипГрузоперевозки);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("СкладыРодители", СкладыРодители);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СкладыРодители.Склад,
	|	АВТОНОМЕРЗАПИСИ() КАК Порядок
	|ПОМЕСТИТЬ СкладыРодители
	|ИЗ
	|	&СкладыРодители КАК СкладыРодители
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИдентификаторОбъекта
	|ПОМЕСТИТЬ ВТ_СкладРодитель
	|ИЗ
	|	СкладыРодители КАК СкладыРодители
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектовСервисовДоставки КАК ТаблицаСоответствий
	|		ПО СкладыРодители.Склад = ТаблицаСоответствий.Значение
	|ГДЕ
	|	ТипГрузоперевозки = &ТипГрузоперевозки
	|	И ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовСервисовДоставки.ПунктВыдачи)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СкладыРодители.Порядок УБЫВ,
	|	ТаблицаСоответствий.ИдентификаторОбъекта УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИдентификаторОбъекта КАК ИдентификаторОбъекта
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектовСервисовДоставки КАК ТаблицаСоответствий
	|ГДЕ
	|	ТипГрузоперевозки = &ТипГрузоперевозки
	|	И ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовСервисовДоставки.ПунктВыдачи)
	|	И Значение = &Склад
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_СкладРодитель.ИдентификаторОбъекта
	|ИЗ
	|	ВТ_СкладРодитель КАК ВТ_СкладРодитель
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИдентификаторОбъекта
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектовСервисовДоставки КАК ТаблицаСоответствий
	|ГДЕ
	|	ТипГрузоперевозки = &ТипГрузоперевозки
	|	И ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовСервисовДоставки.ПунктВыдачи)
	|	И ЗначениеПоУмолчанию";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.ИдентификаторОбъекта;
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет существование сообщения пользователю, чтобы не дублировать их вывод.
// 
// Параметры:
//  Текст - Строка - Текст
// 
// Возвращаемое значение:
//  Булево - Сообщение пользователю существует
Функция СообщениеПользователюСуществует(Текст) Экспорт
	
	Результат = Ложь;
	
	СообщенияПользователю = ПолучитьСообщенияПользователю();
	Для Каждого Сообщение Из СообщенияПользователю Цикл
		Если Сообщение.Текст = Текст Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДокументыОснования

// Формирует таблицу значений с данными по основаниям.
//
// Параметры:
//  Основания - Массив - Ссылки на документы основания.
//
// Возвращаемое значение:
//  ТаблицаЗначений - имеет колонки:
//    * Ссылка - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки - ссылка на документ основание.
//    * СуммаДокумента - Число - сумма документа.
//    * Валюта - СправочникСсылка.Валюты - валюта документа основания.
//    * Отправитель - ОпределяемыйТип.УчастникГрузоперевозкиСервисДоставки - отправитель.
//    * Получатель - ОпределяемыйТип.УчастникГрузоперевозкиСервисДоставки - получатель.
//    * ОтправительАдрес - Строка - буквенный код по классификатору.
//    * ПолучательАдрес - Строка - буквенный код по классификатору.
//    * ДатаОтгрузки - Дата - дата отгрузки.
//    * СпособОтгрузки - Число - числовой код из списка: 0 - не определен, 1 - от терминала, 2 - от адреса.
//    * СпособДоставки - Число - числовой код из списка: 0 - не определен, 1 - до терминала, 2 - до адреса.
//
Функция ДокументыОснованияСписок(Основания) Экспорт
	
	ДокументыОснованияСписок = Новый ТаблицаЗначений();
	ДокументыОснованияСписок.Колонки.Добавить("Ссылка");
	ДокументыОснованияСписок.Колонки.Добавить("СуммаДокумента");
	ДокументыОснованияСписок.Колонки.Добавить("Валюта");
	ДокументыОснованияСписок.Колонки.Добавить("Отправитель");
	ДокументыОснованияСписок.Колонки.Добавить("Получатель");
	ДокументыОснованияСписок.Колонки.Добавить("ОтправительАдрес");
	ДокументыОснованияСписок.Колонки.Добавить("ПолучательАдрес");
	ДокументыОснованияСписок.Колонки.Добавить("ДатаОтгрузки");
	ДокументыОснованияСписок.Колонки.Добавить("СпособОтгрузки");
	ДокументыОснованияСписок.Колонки.Добавить("СпособДоставки");
	
	Для Каждого ТекОснование Из Основания Цикл
		НоваяСтрока = ДокументыОснованияСписок.Добавить();
		НоваяСтрока.Ссылка = ТекОснование;
	КонецЦикла;
	
	Если ДокументыОснованияСписок.Количество() <> 0 Тогда
		СервисДоставкиПереопределяемый.ЗаполнитьДокументыОснованияСписок(ДокументыОснованияСписок);
	КонецЕсли;
	
	Возврат ДокументыОснованияСписок;
	
КонецФункции

#КонецОбласти

#Область ШаблоныДоставки

// Проверяет наличие шаблона доставки по параметрам заказа, и в случае, если находит шаблон,
// переопределяет открываемую форму заказа на доставку, заполняет параметры заказа значениями
// из найденного шаблона.
//
// Параметры:
//  ИмяФормы - Строка - имя открываемой формы заказа на доставку;
//  ПараметрыЗаказа - Структура - структура, содержащая параметры заказа на доставку.
//
Процедура ПроверитьНаличиеШаблонаДоставкиПоОснованию(ИмяФормы, ПараметрыЗаказа) Экспорт
	
	СценарийПеревозки = ОпределитьСценарийПеревозкиПоПараметрам(ПараметрыЗаказа);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	0 КАК Приоритет,
	|	НастройкиРаботыСПеревозчиком.Организация КАК Организация,
	|	НастройкиРаботыСПеревозчиком.СценарийПеревозки КАК СценарийПеревозки,
	|	НастройкиРаботыСПеревозчиком.Контрагент КАК Контрагент,
	|	НастройкиРаботыСПеревозчиком.ТребуетсяАвторизация КАК ТребуетсяАвторизация,
	|	НастройкиРаботыСПеревозчиком.ПеревозчикИД КАК ПеревозчикИД,
	|	НастройкиРаботыСПеревозчиком.ТарифИД КАК ТарифИД,
	|	НастройкиРаботыСПеревозчиком.ТерминалИД КАК ТерминалИД,
	|	НастройкиРаботыСПеревозчиком.Грузоперевозчик КАК Грузоперевозчик,
	|	НастройкиРаботыСПеревозчиком.Тариф КАК Тариф,
	|	НастройкиРаботыСПеревозчиком.Терминал КАК Терминал,
	|	НастройкиРаботыСПеревозчиком.ОплачиваетЗаказчик КАК ОплачиваетЗаказчик,
	|	НастройкиРаботыСПеревозчиком.ФормаОплаты КАК ФормаОплаты,
	|	НастройкиРаботыСПеревозчиком.ВесРассчитывается КАК ВесРассчитывается,
	|	НастройкиРаботыСПеревозчиком.Вес КАК Вес,
	|	НастройкиРаботыСПеревозчиком.ГабаритыРассчитываются КАК ГабаритыРассчитываются,
	|	НастройкиРаботыСПеревозчиком.Длина КАК Длина,
	|	НастройкиРаботыСПеревозчиком.Ширина КАК Ширина,
	|	НастройкиРаботыСПеревозчиком.Высота КАК Высота,
	|	НастройкиРаботыСПеревозчиком.Объем КАК Объем,
	|	НастройкиРаботыСПеревозчиком.ИсключитьДругихПеревозчиков КАК ИсключитьДругихПеревозчиков,
	|	НастройкиРаботыСПеревозчиком.ИсключитьДругиеТарифы КАК ИсключитьДругиеТарифы,
	|	НастройкиРаботыСПеревозчиком.ССобственногоСклада КАК ССобственногоСклада
	|ИЗ
	|	РегистрСведений.НастройкиРаботыСПеревозчикамиСервисДоставки КАК НастройкиРаботыСПеревозчиком
	|ГДЕ
	|	НастройкиРаботыСПеревозчиком.Организация = &Организация
	|	И НастройкиРаботыСПеревозчиком.СценарийПеревозки = &СценарийПеревозки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	НастройкиРаботыСПеревозчиком.Организация,
	|	НастройкиРаботыСПеревозчиком.СценарийПеревозки,
	|	НастройкиРаботыСПеревозчиком.Контрагент,
	|	НастройкиРаботыСПеревозчиком.ТребуетсяАвторизация,
	|	НастройкиРаботыСПеревозчиком.ПеревозчикИД,
	|	НастройкиРаботыСПеревозчиком.ТарифИД,
	|	НастройкиРаботыСПеревозчиком.ТерминалИД,
	|	НастройкиРаботыСПеревозчиком.Грузоперевозчик,
	|	НастройкиРаботыСПеревозчиком.Тариф,
	|	НастройкиРаботыСПеревозчиком.Терминал,
	|	НастройкиРаботыСПеревозчиком.ОплачиваетЗаказчик,
	|	НастройкиРаботыСПеревозчиком.ФормаОплаты,
	|	НастройкиРаботыСПеревозчиком.ВесРассчитывается,
	|	НастройкиРаботыСПеревозчиком.Вес,
	|	НастройкиРаботыСПеревозчиком.ГабаритыРассчитываются,
	|	НастройкиРаботыСПеревозчиком.Длина,
	|	НастройкиРаботыСПеревозчиком.Ширина,
	|	НастройкиРаботыСПеревозчиком.Высота,
	|	НастройкиРаботыСПеревозчиком.Объем,
	|	НастройкиРаботыСПеревозчиком.ИсключитьДругихПеревозчиков,
	|	НастройкиРаботыСПеревозчиком.ИсключитьДругиеТарифы,
	|	НастройкиРаботыСПеревозчиком.ССобственногоСклада
	|ИЗ
	|	РегистрСведений.НастройкиРаботыСПеревозчикамиСервисДоставки КАК НастройкиРаботыСПеревозчиком
	|ГДЕ
	|	НастройкиРаботыСПеревозчиком.Организация = &Организация
	|	И НастройкиРаботыСПеревозчиком.СценарийПеревозки = ЗНАЧЕНИЕ(Перечисление.СценарииПеревозкиСервисДоставки.Общий)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("Организация", ПараметрыЗаказа.ОрганизацияБизнесСетиСсылка);
	Запрос.УстановитьПараметр("СценарийПеревозки", СценарийПеревозки);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаказа.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	ШаблонДоставки = Результат.Выбрать();
	ШаблонДоставки.Следующий();
	
	Если ШаблонДоставки.ИсключитьДругиеТарифы Тогда
		ИмяФормы = "БыстрыйЗаказ";
	КонецЕсли;
	
	Если НЕ ШаблонДоставки.ВесРассчитывается Тогда
		ПараметрыЗаказа.Груз.Вставить("Вес", ШаблонДоставки.Вес);
	КонецЕсли;
	
	Если НЕ ШаблонДоставки.ГабаритыРассчитываются Тогда
		ПараметрыЗаказа.Груз.Вставить("МаксимальнаяДлина", ШаблонДоставки.Длина);
		ПараметрыЗаказа.Груз.Вставить("МаксимальнаяШирина", ШаблонДоставки.Ширина);
		ПараметрыЗаказа.Груз.Вставить("МаксимальнаяВысота", ШаблонДоставки.Высота);
		ПараметрыЗаказа.Груз.Вставить("Объем", ШаблонДоставки.Объем);
	КонецЕсли;
	
	ПараметрыЗаказа.Грузоперевозчик.Вставить("Идентификатор", ШаблонДоставки.ПеревозчикИД);
	ПараметрыЗаказа.Грузоперевозчик.Вставить("Наименование", ШаблонДоставки.Грузоперевозчик);
	ПараметрыЗаказа.Грузоперевозчик.Вставить("Представление", ШаблонДоставки.Грузоперевозчик);
	
	ПараметрыЗаказа.Тариф.Вставить("Идентификатор", ШаблонДоставки.ТарифИД);
	ПараметрыЗаказа.Тариф.Вставить("Наименование", ШаблонДоставки.Тариф);
	ПараметрыЗаказа.Тариф.Вставить("Представление", ШаблонДоставки.Тариф);
	
	ПараметрыЗаказа.ПунктПриемаГруза.Вставить("Идентификатор", ШаблонДоставки.ТерминалИД);
	ПараметрыЗаказа.ПунктПриемаГруза.Вставить("Наименование", ШаблонДоставки.Терминал);
	
	СвойстваФормыОплаты = Новый Структура();
	СвойстваФормыОплаты.Вставить("ФормаОплаты", 2);
	СвойстваФормыОплаты.Вставить("ФормаОплатыПредставление", НСтр("ru='Наличная'"));
	
	СервисДоставкиПереопределяемый.ОпределитьПараметрыЗаказаФормаОплаты(ШаблонДоставки.ФормаОплаты, СвойстваФормыОплаты);
	
	ПараметрыЗаказа.Вставить("ФормаОплаты", СвойстваФормыОплаты.ФормаОплаты);
	ПараметрыЗаказа.Вставить("ФормаОплатыПредставление", СвойстваФормыОплаты.ФормаОплатыПредставление);
	
	Если ШаблонДоставки.ССобственногоСклада Тогда
		ПараметрыЗаказа.Вставить("СпособОтгрузки", 2);
	Иначе
		ПараметрыЗаказа.Вставить("СпособОтгрузки", 1);
	КонецЕсли;
	
	Если ШаблонДоставки.ОплачиваетЗаказчик Тогда
		ПараметрыЗаказа.Вставить("ПлательщикРоль", 2);
	Иначе
		ПараметрыЗаказа.Вставить("ПлательщикРоль", 1);
	КонецЕсли;
	
	ПараметрыЗаказа.Вставить("СпособДоставки", СервисДоставкиКлиентСервер.СпособДоставкиДоАдреса());
	
КонецПроцедуры

// Заполняет форму по шаблону
// 
// Параметры:
//  Форма - Форма - форма для заполнения
//  ПараметрыШаблона - Структура - Параметры шаблона. Свойства:
//   *Значение - Строка - данные шаблона. см. описание НовыйПараметрыЗаказаНаДоставку() 
Процедура ЗаполнитьПоШаблону(Форма, ПараметрыШаблона) Экспорт
	
	Если ТипЗнч(ПараметрыШаблона) = Тип("Структура") Тогда
		
		ДанныеЗаполнения = ПолучитьПараметрыЗаказаИзШаблона(ПараметрыШаблона);
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			ПараметрыЗаполнения = Новый Структура;
			СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(ДанныеЗаполнения, ПараметрыЗаполнения, "");
			ЗаполнитьЗначенияСвойств(Форма, ПараметрыЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры заказа из значения шаблона.
// 
// Параметры:
//  ПараметрыШаблона - Структура - Параметры шаблона
// 
// Возвращаемое значение:
//  Неопределено, Произвольный - Параметры заказа
Функция ПолучитьПараметрыЗаказаИзШаблона(ПараметрыШаблона) Экспорт
	
	Результат = Неопределено;
	
	Если ТипЗнч(ПараметрыШаблона) = Тип("Структура") Тогда
		
		Значение = ПараметрыШаблона.Значение;
		Результат = ЗначениеИзСтрокиВнутр(Значение);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры шаблона по умолчанию в случае его существования.
// 
// Параметры:
//  ТипГрузоперевозки - Число - Тип грузоперевозки
// 
// Возвращаемое значение:
//  Неопределено, Произвольный - Параметры шаблона по умолчанию
Функция ПараметрыШаблонаПоУмолчанию(ТипГрузоперевозки) Экспорт
	
	Результат = Неопределено;
	
	Шаблоны = РегистрыСведений.НастройкиОбщиеСервисДоставки.ПолучитьЗначениеНастройки("Шаблоны", ТипГрузоперевозки);
	Если ТипЗнч(Шаблоны) = Тип("СписокЗначений") Тогда
		Для Каждого Шаблон Из Шаблоны Цикл
			Если Шаблон.Пометка И ТипЗнч(Шаблон.Значение) = Тип("Структура") Тогда
				ПараметрыШаблона = Шаблон.Значение;
				ДанныеЗаполнения = ПараметрыШаблона.Значение;
				Результат = ЗначениеИзСтрокиВнутр(ДанныеЗаполнения);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КэшированныеЗначения

// Обновить кэшированные значения.
// 
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияСервисДоставки - Организация
//  ТипГрузоперевозки - Число, ПеречислениеСсылка.ТипыГрузоперевозки - Тип грузоперевозки
//  Источник - Структура - Значения, которые требуется закэшировать
//  ВидКэша - Строка - суффикс наименования кэша
Процедура ОбновитьКэшированныеЗначения(Знач Организация, Знач ТипГрузоперевозки, Знач Источник, Знач ВидКэша = "") Экспорт
	
	Если Не (ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ТипГрузоперевозки) И ТипЗнч(Источник) = Тип("Структура")
		И ЗначениеЗаполнено(Источник)) Тогда
		Возврат;
	КонецЕсли;
	
	ТипГрузоперевозки = СервисДоставкиКлиентСервер.ЧисловойИдентификаторГрузоперевозчика(ТипГрузоперевозки);
	Если ТипЗнч(ТипГрузоперевозки) <> Тип("Число") Тогда
		Возврат;
	КонецЕсли;
	Если ВидКэша = "" Тогда
		НаименованиеПараметра = СтрШаблон("Кэш_%1", ?(ТипЗнч(Организация) = Тип("Строка"), Организация,
			Организация.УникальныйИдентификатор()));
	Иначе
		НаименованиеПараметра = СтрШаблон("Кэш_%1_%2", ?(ТипЗнч(Организация) = Тип("Строка"), Организация,
			Организация.УникальныйИдентификатор()), ВидКэша);
	КонецЕсли;
	
	Кэш = РегистрыСведений.НастройкиОбщиеСервисДоставки.ПолучитьЗначениеНастройки(НаименованиеПараметра, ТипГрузоперевозки);
	Кэш = ?(ТипЗнч(Кэш) = Тип("Структура"), Кэш, Новый Структура);
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	Для Каждого КлючИЗначение Из Источник Цикл
		Кэш.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		Кэш[КлючИЗначение.Ключ].Вставить("ДатаОбновленияКэш", ТекущаяДатаСеанса);
	КонецЦикла;
	
	РегистрыСведений.НастройкиОбщиеСервисДоставки.УстановитьЗначениеНастройки(НаименованиеПараметра,
		ТипГрузоперевозки, Кэш, Истина);
	
КонецПроцедуры

// Получить кэшированные значения.
// 
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияСервисДоставки - Организация
//  ТипГрузоперевозки - Число, ПеречислениеСсылка.ТипыГрузоперевозки - Тип грузоперевозки
//  ВидКэша - Строка - суффикс наименования кэша
// 
// Возвращаемое значение:
//  Структура - Кэшированные значения
Функция ПолучитьКэшированныеЗначения(Организация, ТипГрузоперевозки, ВидКэша = "") Экспорт
	
	Результат = Новый Структура;
	
	Если Не (ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ТипГрузоперевозки)) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ВидКэша = "" Тогда
		НаименованиеПараметра = СтрШаблон("Кэш_%1", ?(ТипЗнч(Организация) = Тип("Строка"), Организация,
			Организация.УникальныйИдентификатор()));
	Иначе
		НаименованиеПараметра = СтрШаблон("Кэш_%1_%2", ?(ТипЗнч(Организация) = Тип("Строка"), Организация,
			Организация.УникальныйИдентификатор()), ВидКэша);
	КонецЕсли;
	
	Кэш = РегистрыСведений.НастройкиОбщиеСервисДоставки.ПолучитьЗначениеНастройки(НаименованиеПараметра, ТипГрузоперевозки);
	
	Если ТипЗнч(Кэш) = Тип("Структура") Тогда
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		Для Каждого КлючИЗначение Из Кэш Цикл
			ДатаОбновленияКэш = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(КлючИЗначение.Значение,
				"ДатаОбновленияКэш", Дата(1, 1, 1));
			Если ТекущаяДатаСеанса - ДатаОбновленияКэш < 60 * 60 * 12 Тогда
				КлючИЗначение.Значение.Удалить("ДатаОбновленияКэш");
				Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	// ЖурналЗаказовСервисДоставки
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = 
		"РегистрыСведений.ДанныеЗаказовСервисДоставки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.21.75";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("786b693d-adcb-4280-ba18-1380e81ca2b5");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = 
		"РегистрыСведений.ДанныеЗаказовСервисДоставки.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = СтрШаблон("%1 %2.", НСтр("ru = 'Заполняет новый регистр сведений'"),
		Метаданные.РегистрыСведений.ЖурналЗаказовСервисДоставки.Синоним);
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.ДанныеЗаказовСервисДоставки.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ЖурналЗаказовСервисДоставки.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ДанныеЗаказовСервисДоставки.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ЖурналЗаказовСервисДоставки.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	// СостоянияСинхронизацииСервисДоставки
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = 
		"РегистрыСведений.СостоянияСинхронизацииСервисДоставки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.21.75";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2f7c76a8-87e0-4af5-ac1b-fac6a28f342a");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = 
		"РегистрыСведений.СостоянияСинхронизацииСервисДоставки.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = СтрШаблон("%1 %2.", НСтр("ru = 'Заполняет данные регистра сведений'"),
		Метаданные.РегистрыСведений.СостоянияСинхронизацииСервисДоставки.Синоним);
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.СостоянияСинхронизацииСервисДоставки.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СостоянияСинхронизацииСервисДоставки.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.СостоянияСинхронизацииСервисДоставки.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ДлительныеОперации

// Менеджер длительных операций.
// 
// Параметры:
//  Параметры - Структура - Параметры менеджера длительных операций:
//    * Очередь - СписокЗначений из Строка - Список методов, порядок которых определяет очередность выполнения
//    * ТипГрузоперевозки - Число - Необязательный параметр. Если указан, будет добавлен во все параметры методов, входящих в Очередь
//    * ОрганизацияБизнесСетиСсылка - ОпределяемыйТип.ОрганизацияСервисДоставки -
//      Необязательный параметр. Если указан, будет добавлен во все параметры методов, входящих в Очередь.
//  АдресРезультата - Строка - Адрес временного хранилища, в который помещаются результаты выполненных методов
//                             типов СписокЗначений Из Произвольный, Неопределено.
Процедура МенеджерДлительныхОпераций(Знач Параметры, Знач АдресРезультата) Экспорт
	
	Результат = Неопределено;
	
	Отказ = Ложь;
	
	ПередВыполнениемДлительныхОпераций(Параметры, Результат, Отказ);
	
	Если Не Отказ Тогда
		
		Очередь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Очередь", Новый СписокЗначений);
		РезультатОчередь = Результат.Очередь; // СписокЗначений
		
		Для Каждого Операция Из Очередь Цикл
			
			РезультатОперации = ВыполнитьДлительнуюОперацию(Операция, Параметры);
			РезультатОчередь.Добавить(РезультатОперации, Операция.Представление);
			
		КонецЦикла;
	
	КонецЕсли;
	
	ПослеВыполненияДлительныхОпераций(Параметры, Результат);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Запустить выполнение фонового задания.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, из которой произведен вызов
//  ПараметрыОперации - Структура - Параметры операции
//  ПараметрыМетода - Структура - Параметры вызываемого метода
Процедура ЗапуститьФоновоеЗадание(Форма, ПараметрыОперации, ПараметрыМетода) Экспорт
	
	ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыМенеджерДлительныхОпераций();
	ИмяМетода = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОперации, "ИмяМетода", ИмяМетода);
	ПолноеИмяМетода = СтрШаблон("%1.%2", "СервисДоставки", ИмяМетода);
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Форма.УникальныйИдентификатор);
	ЗаполнитьЗначенияСвойств(ПараметрыВыполнения, ПараметрыОперации);
	ПараметрыВыполнения.АдресРезультата = АдресРезультата;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = СтрШаблон("%1. %2",
		СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(Форма.ТипГрузоперевозки),
		ПараметрыОперации.ТекстСообщения);
	
	ПараметрыМетода.Вставить("ИдентификаторНазначения", Форма.УникальныйИдентификатор);
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОперации, "ЭтоФункция", Ложь) Тогда
		ФоновоеЗадание = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ПолноеИмяМетода, ПараметрыМетода, АдресРезультата);
	Иначе
		ФоновоеЗадание = ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ПолноеИмяМетода, ПараметрыМетода, АдресРезультата);
	КонецЕсли;
	
	Для Каждого Операция Из ПараметрыОперации.Очередь Цикл
		Операция.Значение = Неопределено;
	КонецЦикла;
	
	Если ТипЗнч(ФоновоеЗадание) = Тип("Структура") Тогда
		ФоновоеЗадание.Вставить("Очередь", ПараметрыОперации.Очередь);
		ПараметрыОперации.ФоновоеЗадание = ФоновоеЗадание;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность запуска фонового задания. Проверяет подключения к интернет поддержке и бизнес-сети,
// заполненность очереди выполняемых методов и существование активного фонового задания с переданными параметрами.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, из которой произведен вызов
//  ПараметрыОперации - см. СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций
//  ИнтернетПоддержкаПодключена - Булево - Признак подключения к интернет поддержке
// 
// Возвращаемое значение:
//  Булево - Признак возможности запуска фонового задания
Функция ВозможенЗапускФоновогоЗадания(Форма, ПараметрыОперации, ИнтернетПоддержкаПодключена) Экспорт
	
	ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	Если Не ИнтернетПоддержкаПодключена Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ОрганизацияБизнесСетиСсылка") Тогда
		Организация = Форма.ОрганизацияБизнесСетиСсылка;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ОрганизацияБизнесСети") Тогда
		Организация = Форма.ОрганизацияБизнесСети;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Организация") Тогда
		Организация = Форма.Организация;
	Иначе
		Организация = Неопределено;
	КонецЕсли;
	
	Если Не СервисДоставкиСлужебный.ОрганизацияПодключена(Организация) Тогда
		СервисДоставкиСлужебный.СообщитьОбОшибкеПодключенияКБизнесСети(Организация);
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыОперации.Очередь.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыОперации.КлючФоновогоЗадания) Тогда
		ПараметрыОперации.КлючФоновогоЗадания = КлючФоновогоЗадания(Форма, ПараметрыОперации);
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Ключ", ПараметрыОперации.КлючФоновогоЗадания);
	ПараметрыЗадания.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(ПараметрыЗадания);
	
	Если ПараметрыОперации.ОтменитьАктивные И АктивныеФоновыеЗадания.Количество() > 0 Тогда
		Для Каждого АктивноеФоновоеЗадание Из АктивныеФоновыеЗадания Цикл
			ДлительныеОперации.ОтменитьВыполнениеЗадания(АктивноеФоновоеЗадание.УникальныйИдентификатор);
		КонецЦикла;
		// Формирование нового ключа фонового задания, чтобы произошел запуск актуального фонового задания,
		// потому что отмена активных заданий происходит с задержкой
		ПараметрыОперации.КлючФоновогоЗадания = Новый УникальныйИдентификатор;
		Возврат Истина;
	КонецЕсли;
	
	Возврат АктивныеФоновыеЗадания.Количество() = 0;
	
КонецФункции

// Ключ фонового задания.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, из которой произведен вызов
//  ПараметрыОперации - см. СервисДоставкиКлиентСервер.НовыеПараметрыМенеджераДлительныхОпераций
// 
// Возвращаемое значение:
//  Строка - Ключ фонового задания
Функция КлючФоновогоЗадания(Форма, ПараметрыОперации) Экспорт
	
	МассивДанных = Новый Массив;
	Очередь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОперации, "Очередь", Новый СписокЗначений);
	
	Для Каждого Операция Из Очередь Цикл
		МассивДанных.Добавить(Операция.Представление);
	КонецЦикла;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ТипГрузоперевозки") Тогда
		МассивДанных.Добавить(Форма.ТипГрузоперевозки);
	КонецЕсли;
	
	МассивДанных.Добавить(Пользователи.ТекущийПользователь());
	
	Возврат ОбщегоНазначения.КонтрольнаяСуммаСтрокой(МассивДанных);

КонецФункции

#КонецОбласти

// API по загрузке данных о наложенных платежах в хост-систему
#Область НаложенныеПлатежиAPI

// Выполнить загрузку данных по наложенным платежам.
// 
// Параметры:
//   ПараметрыПроцедуры - Структура - параметры процедуры, не заполнять.
//   АдресРезультата - УникальныйИдентификатор - адрес результат в хранилище, не заполнять.
Процедура ВыполнитьЗагрузкуДанныхПоНаложеннымПлатежам(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт

	ТипыГрузоперевозки = Новый Массив;
	ОрганизацииБизнесСети = Новый Массив;
	
	Если ТипЗнч(ПараметрыПроцедуры) = Тип("Структура") Тогда
		
		ОрганизацияБизнесСети = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПроцедуры, "ОрганизацияБизнесСети");
		Если ВозможнаДоставкаНаложеннымПлатежом(ОрганизацияБизнесСети) Тогда
			ОрганизацииБизнесСети.Добавить(ОрганизацияБизнесСети);
		КонецЕсли;
		
		ТипГрузоперевозки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПроцедуры, "ТипГрузоперевозки");
		ТипГрузоперевозки = ?(ТипЗнч(ТипГрузоперевозки) = Тип("Число"),
							Перечисления.ТипыГрузоперевозки.Получить(ТипГрузоперевозки - 1),
							ТипГрузоперевозки);
		Если ТипГрузоперевозки = Перечисления.ТипыГрузоперевозки.ЯндексДоставка Тогда
			Если ПолучитьФункциональнуюОпцию("ИспользоватьНаложенныеПлатежиСервис1СКурьер") Тогда
				ТипыГрузоперевозки.Добавить(ТипГрузоперевозки);
			КонецЕсли;
		ИначеЕсли ТипГрузоперевозки = Перечисления.ТипыГрузоперевозки.СДЭК Тогда
			Если ПолучитьФункциональнуюОпцию("ИспользоватьНаложенныеПлатежиСервис1ССДЭК") Тогда
				ТипыГрузоперевозки.Добавить(ТипГрузоперевозки);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ТаблицаОрганизацииБизнесСети = СервисДоставкиСлужебный.ОрганизацииБизнесСети();
		Для Каждого Строка Из ТаблицаОрганизацииБизнесСети Цикл
			Если ВозможнаДоставкаНаложеннымПлатежом(Строка.Организация) Тогда
				ОрганизацииБизнесСети.Добавить(Строка.Организация);
			КонецЕсли;
		КонецЦикла;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНаложенныеПлатежиСервис1СКурьер") Тогда
			ТипыГрузоперевозки.Добавить(Перечисления.ТипыГрузоперевозки.ЯндексДоставка);
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНаложенныеПлатежиСервис1ССДЭК") Тогда
			ТипыГрузоперевозки.Добавить(Перечисления.ТипыГрузоперевозки.СДЭК);
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ТипГрузоперевозки Из ТипыГрузоперевозки Цикл
		
		ОрганизацииБизнесСетиПоТипуГрузоперевозки = ОрганизацииБизнесСети;
		
		Пока ОрганизацииБизнесСетиПоТипуГрузоперевозки.Количество() > 0 Цикл
			
			ОрганизацииБизнесСетиДляПовторнойОбработки = Новый Массив;
			
			Для Каждого ОрганизацияБизнесСети Из ОрганизацииБизнесСетиПоТипуГрузоперевозки Цикл
				
				// Загрузка наложенных платежей
				ТекущийШаг = Перечисления.ШагиСинхронизацииСервисДоставки.ЗагрузкаИзСервисаИнтеграции;
				ТекущееСостояниеЗагрузки = РегистрыСведений.СостоянияСинхронизацииСервисДоставки.СтруктураСостояния();
				СостояниеЗагрузки = РегистрыСведений.СостоянияСинхронизацииСервисДоставки.СтруктураСостояния();
				
				Если НеобходимоВыполнитьШагЗагрузкиНаложенныхПлатежей(ТипГрузоперевозки, ОрганизацияБизнесСети, ТекущийШаг, СостояниеЗагрузки) Тогда
					
					ЗаполнитьЗначенияСвойств(ТекущееСостояниеЗагрузки, СостояниеЗагрузки);
					
					ТекущееСостояниеЗагрузки.ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисДоставки.ЗагрузкаДанныхПоНаложеннымПлатежам;
					ТекущееСостояниеЗагрузки.ТипГрузоперевозки = ТипГрузоперевозки;
					ТекущееСостояниеЗагрузки.ОрганизацияБизнесСети = ОрганизацияБизнесСети;
					ТекущееСостояниеЗагрузки.ШагЗагрузки = ТекущийШаг;
					ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияСинхронизацииСервисДоставки.Выполняется;
					
					ОтказИзмененияСостояния = Ложь;
					РегистрыСведений.СостоянияСинхронизацииСервисДоставки.УстановитьСостояние(ТекущееСостояниеЗагрузки, ОтказИзмененияСостояния);
					
					Если Не ОтказИзмененияСостояния Тогда
						
						ПараметрыЗапроса = ПараметрыЗапросаПолучитьНаложенныеПлатежи();
						ПараметрыЗапроса.ДатаВыборкиС = СостояниеЗагрузки.ДатаРегистрации;
						ПараметрыЗапроса.Идентификатор = СостояниеЗагрузки.ИдентификаторДокумента;
						ПараметрыЗапроса.ТипГрузоперевозки = ТипГрузоперевозки;
						ПараметрыЗапроса.ОрганизацияБизнесСети = ОрганизацияБизнесСети;
						
						РезультатЗапроса = ПолучитьНаложенныеПлатежи(ПараметрыЗапроса);
						
						Если ЗначениеЗаполнено(РезультатЗапроса) Тогда
							
							ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияСинхронизацииСервисДоставки.Выполнена;
							
							Если РезультатЗапроса.СписокПлатежей.Количество() > 0 Тогда
								
								НачатьТранзакцию();
								Попытка
									ЗаписатьДанныеПоНаложеннымПлатежамКОбработке(ОрганизацияБизнесСети, РезультатЗапроса.СписокПлатежей);
									
									ОрганизацииБизнесСетиДляПовторнойОбработки.Добавить(ОрганизацияБизнесСети);
									ТекущееСостояниеЗагрузки.ДатаРегистрации = РезультатЗапроса.ПараметрыЗапроса.ДатаРегистрацииПлатежа;
									ТекущееСостояниеЗагрузки.ИдентификаторДокумента = РезультатЗапроса.ПараметрыЗапроса.ИдентификаторДокумента;
									
									ЗафиксироватьТранзакцию();
								Исключение
									ОтменитьТранзакцию();
									ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияСинхронизацииСервисДоставки.Ошибка;
								КонецПопытки;
								
							КонецЕсли;
							
						Иначе
							
							ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияСинхронизацииСервисДоставки.Ошибка;
							
						КонецЕсли;
						
						РегистрыСведений.СостоянияСинхронизацииСервисДоставки.УстановитьСостояние(ТекущееСостояниеЗагрузки);
					
					КонецЕсли;
		
				КонецЕсли;
				
				// Обработка загруженных данных
				ТекущийШаг = Перечисления.ШагиСинхронизацииСервисДоставки.ОбработкаЗагруженныхДанных;
				ТекущееСостояниеЗагрузки = РегистрыСведений.СостоянияСинхронизацииСервисДоставки.СтруктураСостояния();
				
				Если НеобходимоВыполнитьШагЗагрузкиНаложенныхПлатежей(ТипГрузоперевозки, ОрганизацияБизнесСети, ТекущийШаг) Тогда
					
					ТекущееСостояниеЗагрузки.ШагЗагрузки = ТекущийШаг;
					ТекущееСостояниеЗагрузки.ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисДоставки.ЗагрузкаДанныхПоНаложеннымПлатежам;
					ТекущееСостояниеЗагрузки.ТипГрузоперевозки = ТипГрузоперевозки;
					ТекущееСостояниеЗагрузки.ОрганизацияБизнесСети = ОрганизацияБизнесСети;
					ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияСинхронизацииСервисДоставки.Выполняется;
					
					ОтказИзмененияСостояния = Ложь;
					РегистрыСведений.СостоянияСинхронизацииСервисДоставки.УстановитьСостояние(ТекущееСостояниеЗагрузки, ОтказИзмененияСостояния);
					
					Если Не ОтказИзмененияСостояния Тогда
						
						ОбработатьДанныеПоНаложеннымПлатежам(ОрганизацияБизнесСети);
						
						ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияСинхронизацииСервисДоставки.Выполнена;
						РегистрыСведений.СостоянияСинхронизацииСервисДоставки.УстановитьСостояние(ТекущееСостояниеЗагрузки);
						
					КонецЕсли;
					
				КонецЕсли;
				
				// Очистка загруженных данных
				ТекущийШаг = Перечисления.ШагиСинхронизацииСервисДоставки.ОчисткаЗагруженныхДанных;
				ТекущееСостояниеЗагрузки = РегистрыСведений.СостоянияСинхронизацииСервисДоставки.СтруктураСостояния();
				
				Если НеобходимоВыполнитьШагЗагрузкиНаложенныхПлатежей(ТипГрузоперевозки, ОрганизацияБизнесСети, ТекущийШаг) Тогда
					
					ТекущееСостояниеЗагрузки.ШагЗагрузки = ТекущийШаг;
					ТекущееСостояниеЗагрузки.ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисДоставки.ЗагрузкаДанныхПоНаложеннымПлатежам;
					ТекущееСостояниеЗагрузки.ТипГрузоперевозки = ТипГрузоперевозки;
					ТекущееСостояниеЗагрузки.ОрганизацияБизнесСети = ОрганизацияБизнесСети;
					ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияСинхронизацииСервисДоставки.Выполняется;
					
					ОтказИзмененияСостояния = Ложь;
					РегистрыСведений.СостоянияСинхронизацииСервисДоставки.УстановитьСостояние(ТекущееСостояниеЗагрузки);
					Если Не ОтказИзмененияСостояния Тогда
						
						ОтборДляУдаления = РегистрыСведений.ДанныеНаложенныхПлатежейСервисДоставки.НовыйОтборЗаписей();
						ОтборДляУдаления.УдалитьОбработанные = Истина;
						РегистрыСведений.ДанныеНаложенныхПлатежейСервисДоставки.УдалитьЗаписиПоОтбору(ОтборДляУдаления);
						
						ТекущееСостояниеЗагрузки.ШагЗагрузки = ТекущийШаг;
						ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияСинхронизацииСервисДоставки.Выполнена;
						РегистрыСведений.СостоянияСинхронизацииСервисДоставки.УстановитьСостояние(ТекущееСостояниеЗагрузки);
						
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЦикла;
			
			ОрганизацииБизнесСетиПоТипуГрузоперевозки = ОрганизацииБизнесСетиДляПовторнойОбработки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(АдресРезультата) Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("ОперацияВыполнена", Истина);
		
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		
	КонецЕсли;
	
КонецПроцедуры

// Конструктор атрибутов наложенного платежа для регистрации.
// Результат повторяет структуру реквизитов регистра ДанныеНаложенныхПлатежейСервисДоставки.
// Экспортным метод сделан для типизации в других модулях.
// Возвращаемое значение:
//	Структура:
//	*ДатаРегистрацииПлатежа - Дата
//	*ДокументОснование - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки
//	*Отправитель - ОпределяемыйТип.УчастникГрузоперевозкиСервисДоставки
//	*Перевозчик - ОпределяемыйТип.УчастникГрузоперевозкиСервисДоставки
//	*СуммаПлатежа - Число
//	*ИдентификаторДокумента - УникальныйИдентификатор - идентификатор заказа на доставку
Функция НовыйДанныеНаложенногоПлатежа() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ДатаРегистрацииПлатежа", Дата(1,1,1));
	Результат.Вставить("ДокументОснование", Неопределено);
	Результат.Вставить("Отправитель", Неопределено);
	Результат.Вставить("Перевозчик", Неопределено);
	Результат.Вставить("СуммаПлатежа", 0);
	Результат.Вставить("ИдентификаторДокумента", Неопределено);
	Возврат Результат;
КонецФункции

#КонецОбласти

Функция ЗначениеИзСтрокиJSON(Значение, ЕстьОшибка = Ложь, ТекстОшибки = "") Экспорт
	
	// Проверка типа JSON
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Значение;
	КонецЕсли;
	ПервыйСимвол = Лев(Значение, 1);
	Если ПервыйСимвол <> "[" И ПервыйСимвол <> "{" Тогда
		Возврат Значение;
	КонецЕсли;
	
	Результат = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(Значение);
		Результат = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	Исключение
		ЕстьОшибка = Истина;
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru='Сервис доставки.Преобразование данных.'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразованиеТиповЗначений(Свойство, Значение, ДополнительныеПараметрыФункцииПреобразования, Отказ) Экспорт
	
	Если ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Тогда
		Возврат Строка(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("ХранилищеЗначения") Тогда
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, Значение, НазначениеТипаXML.Явное);
		
		Возврат ЗаписьJSON.Закрыть();
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Неопределено") Тогда
		Возврат "";
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьПодключениеИнтернетПоддержки(ЕстьПодключениеКСервису = Неопределено) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ЕстьПодключениеКСервису = Истина;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ПараметрыАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ТипЗнч(ПараметрыАутентификации) = Тип("Структура") Тогда
			ЕстьПодключениеКСервису = Истина;
		Иначе
			ЕстьПодключениеКСервису = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьБлокОшибок(Результат, ОперацияВыполнена = Истина) Экспорт
	
	Если Результат.Свойство("Ошибки") Тогда
		Если ТипЗнч(Результат.Ошибки) = Тип("Массив") И Результат.Ошибки.Количество() > 0 Тогда
			Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
				ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
			КонецЦикла;
			ОперацияВыполнена = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработать описание ошибки.
// 
// Параметры:
//  Результат - Структура - результат ответа запроса:
//   * Ошибки - Массив из Строка
//  Заказ - Структура:
//   * ЕстьОшибка - Булево
//   * ОписаниеОшибки - Строка
//
Процедура ОбработатьОписаниеОшибки(Результат, Заказ) Экспорт
	
	Заказ.ЕстьОшибка = Результат.Ошибки.Количество() > 0;
	
	Если Заказ.ЕстьОшибка Тогда
		ОписаниеОшибки = "";
		Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
			ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ТекущаяОшибка;;
		КонецЦикла;
		ОписаниеОшибки = СокрЛП(ОписаниеОшибки);
		Заказ.ОписаниеОшибки = ОписаниеОшибки;
	КонецЕсли;

КонецПроцедуры

// Проверка есть ли ошибки при выполнении запроса.
// 
// Параметры:
//  Результат - Структура - результат ответа запроса:
//   * Ошибки - Массив из Строка
//  ОперацияВыполнена - Булево - Операция выполнена
// 
// Возвращаемое значение:
//  Булево - Есть ошибки
Функция ЕстьОшибки(Результат, ОперацияВыполнена = Истина) Экспорт
	ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
	Возврат НЕ ОперацияВыполнена;
КонецФункции

Функция НовыйПараметрыВалюты() Экспорт

	ПараметрыВалюты = Новый Структура;
	
	ПараметрыВалюты.Вставить("Код", НСтр("ru = '643'"));
	ПараметрыВалюты.Вставить("Наименование", НСтр("ru = 'RUB'"));
	ПараметрыВалюты.Вставить("Ссылка");
	
	СервисДоставкиПереопределяемый.ЗаполнитьПараметрыВалюты(ПараметрыВалюты);

	Возврат ПараметрыВалюты;
	
КонецФункции

// Новый структура взаиморасчетов по документу.
// 
// Возвращаемое значение:
//  Структура - Новый структура взаиморасчетов по документу:
// * СуммаДокумента - Число - 
// * СуммаОплат - Число - 
// * ДоступноВедениеВзаиморасчетов - Булево - 
Функция НовыйСтруктураВзаиморасчетовПоДокументу() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СуммаДокумента", 0);
	Результат.Вставить("СуммаОплат", 0);
	Результат.Вставить("ДоступноВедениеВзаиморасчетов", Ложь);

	Возврат Результат;
	
КонецФункции

// См. НастройкиБЭДСобытия.ПриФормированииТаблицыЗависимостейКонстант
Процедура ПриФормированииТаблицыЗависимостейКонстант(ТаблицаЗависимостей) Экспорт
	
	// Отключаем использование сервиса доставки в случае отключения обмена с 1С:Бизнес-сеть
	НастройкиБЭД.ДобавитьСтрокуТаблицыЗависимостиКонстант(ТаблицаЗависимостей,
		Метаданные.Константы.ИспользоватьОбменБизнесСеть.Имя, Ложь,
		Метаданные.Константы.ИспользоватьСервис1СДоставка.Имя, Ложь);
		
	НастройкиБЭД.ДобавитьСтрокуТаблицыЗависимостиКонстант(ТаблицаЗависимостей,
		Метаданные.Константы.ИспользоватьОбменБизнесСеть.Имя, Ложь,
		Метаданные.Константы.ИспользоватьСервис1СКурьер.Имя, Ложь);
		
	НастройкиБЭД.ДобавитьСтрокуТаблицыЗависимостиКонстант(ТаблицаЗависимостей,
		Метаданные.Константы.ИспользоватьОбменБизнесСеть.Имя, Ложь,
		Метаданные.Константы.ИспользоватьСервис1СКурьерика.Имя, Ложь);
		
	НастройкиБЭД.ДобавитьСтрокуТаблицыЗависимостиКонстант(ТаблицаЗависимостей,
		Метаданные.Константы.ИспользоватьОбменБизнесСеть.Имя, Ложь,
		Метаданные.Константы.ИспользоватьСервис1ССДЭК.Имя, Ложь);
		
	НастройкиБЭД.ДобавитьСтрокуТаблицыЗависимостиКонстант(ТаблицаЗависимостей,
		Метаданные.Константы.ИспользоватьСервис1СКурьер.Имя, Ложь,
		Метаданные.Константы.ИспользоватьНаложенныеПлатежиСервис1СКурьер.Имя, Ложь);
	
	НастройкиБЭД.ДобавитьСтрокуТаблицыЗависимостиКонстант(ТаблицаЗависимостей,
		Метаданные.Константы.ИспользоватьСервис1ССДЭК.Имя, Ложь,
		Метаданные.Константы.ИспользоватьНаложенныеПлатежиСервис1ССДЭК.Имя, Ложь);
		
	НастройкиБЭД.ДобавитьСтрокуТаблицыЗависимостиКонстант(ТаблицаЗависимостей,
		Метаданные.Константы.ИспользоватьСервис1СКурьерика.Имя, Ложь,
		Метаданные.Константы.ИспользоватьЧастичнуюДоставкуСервис1СКурьерика.Имя, Ложь);
	
КонецПроцедуры

Функция ПараметрыЗаказаНаДоставкуПоДокументуОснованию(ТипГрузоперевозки, Основание = Неопределено, ОрганизацияБизнесСети = Неопределено) Экспорт
	
	Основания = Новый СписокЗначений();
	
	Если Основание <> Неопределено Тогда
		Основания.Добавить(Основание);
	КонецЕсли;
	
	Возврат ПараметрыЗаказаНаДоставку(ТипГрузоперевозки, Основания, ОрганизацияБизнесСети);
	
КонецФункции

Функция ПараметрыЗаказаНаДоставку(ТипГрузоперевозки, Основания = Неопределено, ОрганизацияБизнесСети = Неопределено) Экспорт
	
	ПараметрыЗаказа = НовыйПараметрыЗаказаНаДоставку();
	ПараметрыЗаказа.ТипГрузоперевозки = ТипГрузоперевозки;
	
	Если ЗначениеЗаполнено(Основания) Тогда
		ПараметрыЗаказа.ДокументыОснования = Основания;
		СервисДоставкиПереопределяемый.ЗаполнитьПараметрыЗаказаНаДоставку(ПараметрыЗаказа);
	КонецЕсли;
	
	ДобавитьПараметрыПоУмолчанию(ПараметрыЗаказа);
	
	ПараметрыЗаказа.ЗаказчикРоль = СервисДоставкиКлиентСервер.ОпределитьРольЗаказчикаПеревозки(ПараметрыЗаказа.ТипГрузоперевозки,
		ОрганизацияБизнесСети, ПараметрыЗаказа.Отправитель.Контрагент.Ссылка,
		ПараметрыЗаказа.Получатель.Контрагент.Ссылка,
		ПараметрыЗаказа.ЗаказчикРоль);
	
	ИмяФормы = СервисДоставкиКлиентСервер.ИмяФормыСервисаДоставки(ТипГрузоперевозки, Основания);
	
	// Для поддержки шаблонов создания заказов, если они используются в прикладном решении
	Если ЗначениеЗаполнено(Основания) Тогда
		ПроверитьНаличиеШаблонаДоставкиПоОснованию(ИмяФормы, ПараметрыЗаказа);
	КонецЕсли;
	ПараметрыЗаказа.Вставить("ИмяФормы", ИмяФормы);
	ПараметрыЗаказа.Вставить("ТоварныйСостав", ОбщегоНазначения.ТаблицаЗначенийВМассив(ПараметрыЗаказа.Товары));
	ПараметрыЗаказа.Удалить("Товары");
	ПараметрыЗаказа.Удалить("Услуги");
	ПараметрыЗаказа.Удалить("ДополнительныеУслуги");
	
	Возврат ПараметрыЗаказа;
	
КонецФункции

Функция ОрганизацияПоУмолчанию(ТипГрузоперевозки) Экспорт
	
	ОрганизацияБизнесСетиСсылка = ПараметрыПоУмолчанию(ТипГрузоперевозки, "ОрганизацияБизнесСети").ОрганизацияБизнесСети;
	
	Если Не ЗначениеЗаполнено(ОрганизацияБизнесСетиСсылка)
		Или Не СервисДоставкиСлужебный.ОрганизацияПодключена(ОрганизацияБизнесСетиСсылка) Тогда
		ОрганизацияБизнесСетиСсылка = ЕдинственнаяПодключеннаяОрганизацияБизнесСети();
	КонецЕсли;
	
	Возврат ОрганизацияБизнесСетиСсылка;
	
КонецФункции

Функция УчастникГрузоперевозки(ИНН, КПП, УникальныйИдентификатор = Неопределено) Экспорт
	Возврат УчастникГрузоперевозкиПоУИДилиИННиКПП(ИНН, КПП, УникальныйИдентификатор);
КонецФункции

Функция КонтактноеЛицоУчастникаГрузоперевозкиПоИдентификатору(ИдентификаторКонтактногоЛица) Экспорт
		
	Возврат КонтактноеЛицоПоGUID(ИдентификаторКонтактногоЛица);
	
КонецФункции

#Область ДляВызоваИзЭлектронногоВзаимодействия

// См. ЭлектронноеВзаимодействие.ПриПолученииСпискаШаблонов.
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.СинхронизацияССервисомИнтеграцииСервисДоставки.Имя);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриОпределенииПсевдонимовОбработчиков.
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.СинхронизацияССервисомИнтеграцииСервисДоставки.ИмяМетода);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	НоваяСтрока = Настройки.Добавить();
	НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["СинхронизацияССервисомИнтеграцииСервисДоставки"];
	ФункциональнаяОпция = Метаданные.ФункциональныеОпции["ИспользоватьНаложенныеПлатежиСервис1СКурьер"];
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНаложенныеПлатежиСервис1СКурьер") Тогда
		ФункциональнаяОпция = Метаданные.ФункциональныеОпции["ИспользоватьНаложенныеПлатежиСервис1ССДЭК"]
	КонецЕсли;
	НоваяСтрока.ФункциональнаяОпция = ФункциональнаяОпция;
	НоваяСтрока.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Словарь

Функция ИдентификаторСостоянияЧерновик() Экспорт
	
	Возврат 0;
	
КонецФункции

// Представление состояния черновик.
// 
// Возвращаемое значение:
//  Строка - Представление состояния черновик
Функция ПредставлениеСостоянияЧерновик() Экспорт
	Возврат НСтр("ru = 'Черновик'");
КонецФункции

Функция ФильтрПоМультизаказамВсеЗаказы() Экспорт
	
	Возврат "allOrders";
	
КонецФункции

Функция ФильтрПоМультизаказамОдиночныеИМультизаказы() Экспорт
	
	Возврат "singleOrdersAndMultiOrders";
	
КонецФункции

Функция ФильтрПоМультизаказамОдиночныеЗаказы() Экспорт
	
	Возврат "singleOrders";
	
КонецФункции

Функция СортировкаЗаказовНаОтправкуПоУмолчанию() Экспорт
	
	Возврат "ДатаОтгрузки ВОЗР";
	
КонецФункции

Функция ПредставлениеЗаказаНаДоставку(Параметры, ПолноеНаименование = Ложь) Экспорт
	
	Возврат СервисДоставкиКлиентСервер.ПредставлениеЗаказаНаДоставку(Параметры, ПолноеНаименование);
	
КонецФункции

#КонецОбласти

// Подписка на событие "ПередЗаписью" документов-оснований заказов на доставку.
//
// Параметры:
// 	Источник - ДокументОбъект
// 	Отказ - Булево
// 	РежимЗаписи - РежимЗаписиДокумента
// 	РежимПроведения - РежимПроведенияДокумента.
//
Процедура ПередЗаписьюОснованияЗаказаСервисДоставкиПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	СервисДоставкиПереопределяемый.ПередЗаписьюОснованияЗаказаНаДоставку(Источник);
	
КонецПроцедуры

// Создать или обновить данные заказа в основных регистрах сведений сервиса доставки.
// 
// Параметры:
//  Параметры - Структура - Параметры записи:
// * ТипГрузоперевозки - ПеречислениеСсылка.ТипыГрузоперевозки - Тип грузоперевозки
// * Организация - ОпределяемыйТип.ОрганизацияСервисДоставки - 
// * ИдентификаторДокумента - УникальныйИдентификатор - Идентификатор заказа на доставку
// * ДокументыОснования - Массив из ОпределяемыйТип.ОснованиеЗаказаСервисДоставки - 
// * Представление - Строка - представление заказа на доставку
// * СостояниеИдентификатор - Число - Идентификатор (код) состояния заказа на доставку в сервисе интеграции
// * СостояниеПредставление - Строка - Представление состояния заказа на доставку в сервисе интеграции
// * Дата - Дата - дата заказа на доставку
// * Номер - Строка - номер заказа на доставку
//  ЕстьИзменения - Булево - Есть изменения, если Истина, тогда запись в регистры сведений будет безусловной
//  Отказ - Булево - флаг контроля выполнения операции
Процедура СоздатьОбновитьДанныеЗаказа(Параметры, ЕстьИзменения = Ложь, Отказ = Ложь) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналЗаказовСервисДоставки");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ТипГрузоперевозки", Параметры.ТипГрузоперевозки);
	ЭлементБлокировки.УстановитьЗначение("Организация", Параметры.Организация);
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторДокумента", Параметры.ИдентификаторДокумента);
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеЗаказовСервисДоставки");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ТипГрузоперевозки", Параметры.ТипГрузоперевозки);
	ЭлементБлокировки.УстановитьЗначение("Организация", Параметры.Организация);
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторДокумента", Параметры.ИдентификаторДокумента);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка.Заблокировать();
		
		ЕстьИзмененияЖурналЗаказов = ЕстьИзменения;
		ЕстьИзмененияДанныеЗаказов = ЕстьИзменения;
		
		НаборЗаписейДанныеЗаказов = РегистрыСведений.ДанныеЗаказовСервисДоставки.СоздатьНаборЗаписей();
		НаборЗаписейДанныеЗаказов.Отбор.ТипГрузоперевозки.Установить(Параметры.ТипГрузоперевозки);
		НаборЗаписейДанныеЗаказов.Отбор.Организация.Установить(Параметры.Организация);
		НаборЗаписейДанныеЗаказов.Отбор.ИдентификаторДокумента.Установить(Параметры.ИдентификаторДокумента);
		НаборЗаписейДанныеЗаказов.Прочитать();
		
		ЗаписиКУдалению = Новый Массив;
		Для Каждого Запись Из НаборЗаписейДанныеЗаказов Цикл
			Если Параметры.ДокументыОснования.Найти(Запись.ДокументОснование) = Неопределено Тогда
				ЕстьИзмененияДанныеЗаказов = Истина;
				ЗаписиКУдалению.Добавить(Запись);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Запись Из ЗаписиКУдалению Цикл
			НаборЗаписейДанныеЗаказов.Удалить(Запись);
		КонецЦикла;
		
		ЗарегистрированныеДокументы = НаборЗаписейДанныеЗаказов.Выгрузить( , "ДокументОснование").ВыгрузитьКолонку(
			"ДокументОснование");
		
		Для Каждого ДокументОснование Из Параметры.ДокументыОснования Цикл
			Если ЗарегистрированныеДокументы.Найти(ДокументОснование) = Неопределено Тогда
				ЕстьИзмененияДанныеЗаказов = Истина;
				НоваяЗаписьДанныеЗаказов = НаборЗаписейДанныеЗаказов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗаписьДанныеЗаказов, Параметры);
				НоваяЗаписьДанныеЗаказов.ДокументОснование = ДокументОснование;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьИзмененияДанныеЗаказов Тогда
			НаборЗаписейДанныеЗаказов.Записать();
		КонецЕсли;
		
		КоличествоДокументовОснований = НаборЗаписейДанныеЗаказов.Количество();
		
		ЗаписьЖурналЗаказов = РегистрыСведений.ЖурналЗаказовСервисДоставки.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьЖурналЗаказов, Параметры, "Организация, ТипГрузоперевозки, ИдентификаторДокумента");
		ЗаписьЖурналЗаказов.Прочитать();
		
		Если ЗаписьЖурналЗаказов.Выбран() И Не ЕстьИзмененияЖурналЗаказов Тогда
			Если ЗаписьЖурналЗаказов.СостояниеИдентификатор <> Параметры.СостояниеИдентификатор Тогда
				ЕстьИзмененияЖурналЗаказов = Истина;
				ЗаписьЖурналЗаказов.СостояниеИдентификатор = Параметры.СостояниеИдентификатор;
				ЗаписьЖурналЗаказов.СостояниеПредставление = Параметры.СостояниеПредставление;
			КонецЕсли;
			Если ЗаписьЖурналЗаказов.КоличествоДокументовОснований <> КоличествоДокументовОснований Тогда
				ЕстьИзмененияЖурналЗаказов = Истина;
			КонецЕсли;
		Иначе
			ЕстьИзмененияЖурналЗаказов = Истина;
			ЗаполнитьЗначенияСвойств(ЗаписьЖурналЗаказов, Параметры);
		КонецЕсли;
		
		Если ЕстьИзмененияЖурналЗаказов Тогда
			ЗаписьЖурналЗаказов.КоличествоДокументовОснований = КоличествоДокументовОснований;
			ЗаписьЖурналЗаказов.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Отказ = Истина;
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Ошибка записи данных заказа сервиса доставки
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;

КонецПроцедуры

// Устанавливает признак изменения всех заказов сервисов доставки по документу-основанию.
//
// Параметры:
//  ИмяПараметр - Строка - Измерение РС ДанныеЗаказовСервисДоставки
//  Параметр - Произвольный - Значение параметра
//  ЕстьИзмененияТоварногоСостава - Булево - Признак изменения
Процедура УстановитьПризнакИзмененияЗаказов(ИмяПараметр, Параметр, ЕстьИзмененияТоварногоСостава) Экспорт
	
	Если ТипЗнч(Параметр) = Тип("Массив") Тогда
		МассивПараметров = Параметр;
	Иначе
		МассивПараметров = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметр);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивПараметров", МассивПараметров);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЖурналЗаказов.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ЖурналЗаказов.Организация,
		|	ЖурналЗаказов.ТипГрузоперевозки
		|ИЗ
		|	РегистрСведений.ДанныеЗаказовСервисДоставки КАК ДанныеЗаказов
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналЗаказовСервисДоставки КАК ЖурналЗаказов
		|	ПО ЖурналЗаказов.Организация = ДанныеЗаказов.Организация
		|		И ЖурналЗаказов.ТипГрузоперевозки = ДанныеЗаказов.ТипГрузоперевозки
		|		И ЖурналЗаказов.ИдентификаторДокумента = ДанныеЗаказов.ИдентификаторДокумента
		|ГДЕ
		|	&Условие В (&МассивПараметров)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "ДанныеЗаказов." + ИмяПараметр);
	
	УстановитьПризнакИзмененияВЖурналеЗаказов(Запрос, ЕстьИзмененияТоварногоСостава);
	
КонецПроцедуры

// Заполняет в регистр сведений НастройкиОбщиеСервисДоставки настройками по умолчанию
//
// Параметры:
//  ТипГрузоперевозки - Число
Процедура ЗаполнитьНастройкиОбщиеСервисДоставкиПоУмолчанию(ТипГрузоперевозки) Экспорт
	
	Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
		НастройкиОбщиеСервисДоставкиПоУмолчаниюДля1ССДЭК();
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  СписокВыбора - СписокЗначений
//
Процедура ЗаполнитьМаскиНомераТелефона(СписокВыбора) Экспорт
	
	МаскаНомера = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='+7(999) 999-99-99, <span style=""color: %1""> (Пример: +7(910) 123-23-23)</span>'"),
					"ПоясняющийТекст");
	СписокВыбора.Добавить("+7(999) 999-99-99", СтроковыеФункции.ФорматированнаяСтрока(МаскаНомера));
	
	МаскаНомера = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='##(99999) 999-99-99, <span style=""color: %1""> (Пример: 8(4822) 12-34-56)</span>'"),
					"ПоясняющийТекст");
	СписокВыбора.Добавить("##(99999) 999-99-99", СтроковыеФункции.ФорматированнаяСтрока(МаскаНомера));
	
	МаскаНомера = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='999999999, <span style=""color: %1""> (Пример: 9001234567)</span>'"),
					"ПоясняющийТекст");
	СписокВыбора.Добавить("(999) 999-9999", СтроковыеФункции.ФорматированнаяСтрока(МаскаНомера));
	
КонецПроцедуры

// Раскрашивает представления элементов списка значений. Подсвечиваются слова, указанные в строке поиска
// 
// Параметры:
//  Источник - СписокЗначений из Произвольный - список, представления элементов которого необходимо раскрасить
//  СтрокаПоиска - Строка - строка поиска. Слова разделены пробелами
//  Отказ - Булево - раскрашивание невозможно из-за некорректных данных в параметре СтрокаПоиска 
//
Процедура СтрНайтиИВыделитьОформлениемСписок(Источник, СтрокаПоиска, Отказ) Экспорт

	Если Не СтрПодобнаПоРегулярномуВыражению(СтрокаПоиска, "^[A-Za-zА-Яа-я0-9\.\,\-\ \№Ёё\(\)]+$", Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	ПодстрокиПоиска = СтрРазделить(СтрокаПоиска, " ");
	
	Для Каждого ЭлементИсточника Из Источник Цикл

		ЭлементПредставление = ЭлементИсточника.Представление;

		НайденныеПодстроки = Новый ТаблицаЗначений;
		НайденныеПодстроки.Колонки.Добавить("НачальнаяПозиция", Новый ОписаниеТипов("Число", , ,
			Новый КвалификаторыЧисла(5)));
		НайденныеПодстроки.Колонки.Добавить("Длина", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(3)));
		НайденныеПодстроки.Колонки.Добавить("СтрокаПоиска", Новый ОписаниеТипов("Строка"));
		
		// Определим позиции всех вхождений подстрок в строке
		Для Каждого ПодстрокаПоиска Из ПодстрокиПоиска Цикл
			НайденныеВхождения = СтрНайтиВсеПоРегулярномуВыражению(ЭлементПредставление, ПодстрокаПоиска, Истина);
			Для Каждого НайденноеВхождение Из НайденныеВхождения Цикл
				НоваяСтрока = НайденныеПодстроки.Добавить();
				НоваяСтрока.НачальнаяПозиция = НайденноеВхождение.НачальнаяПозиция;
				НоваяСтрока.Длина = СтрДлина(ПодстрокаПоиска);
				НоваяСтрока.СтрокаПоиска = ПодстрокаПоиска;
			КонецЦикла;
		КонецЦикла;

		ФорматированноеПредставление = Новый Массив;

		Если НайденныеПодстроки.Количество() > 0 Тогда
			НайденныеПодстроки.Сортировать("НачальнаяПозиция возр");
			Смещение = 0;	// Показывает на сколько символов сократилась строка в переменной ЭлементПредставление
			Для Каждого НайденнаяПодстрока Из НайденныеПодстроки Цикл

				ТекущаяПозиция = НайденнаяПодстрока.НачальнаяПозиция - Смещение;
				Если ТекущаяПозиция <= 0 Тогда
					// Текущая подстрока оказалась частью предыдущей подстроки
					Продолжить;
				КонецЕсли;

				ЧастьСтрокиБезОформления = Лев(ЭлементПредставление, ТекущаяПозиция - 1);
				ЧастьСтрокиСОформлением = Сред(ЭлементПредставление, ТекущаяПозиция, НайденнаяПодстрока.Длина);

				ЭлементПредставление = Сред(ЭлементПредставление, ТекущаяПозиция + НайденнаяПодстрока.Длина);

				Если Не ПустаяСтрока(ЧастьСтрокиБезОформления) Тогда
					ФорматированноеПредставление.Добавить(ЧастьСтрокиБезОформления);
				КонецЕсли;

				ФорматированноеПредставление.Добавить(СтрНайтиИВыделитьОформлением(ЧастьСтрокиСОформлением,
					НайденнаяПодстрока.СтрокаПоиска));

				Смещение = НайденнаяПодстрока.НачальнаяПозиция + НайденнаяПодстрока.Длина - 1;

			КонецЦикла;

			ФорматированноеПредставление.Добавить(ЭлементПредставление);

		Иначе
			ФорматированноеПредставление.Добавить(ЭлементПредставление);
		КонецЕсли;

		ЭлементИсточника.Представление = Новый ФорматированнаяСтрока(ФорматированноеПредставление);

	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДлительныеОперацииСлужебныеМетоды

// Действия перед началом выполнения длительных операций.
// 
// Параметры:
//  Параметры - Структура - Параметры операций
//  Результат - Структура - Параметры результата:
//  * Очередь - СписокЗначений - Порядок выполнения операций
//  Отказ - Булево - Отказ
Процедура ПередВыполнениемДлительныхОпераций(Параметры, Результат, Отказ)
	
	ТипГрузоперевозки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ТипГрузоперевозки");
	ОрганизацияБизнесСети = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ОрганизацияБизнесСетиСсылка");
	ИдентификаторНазначения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ИдентификаторНазначения");
	
	Для Каждого Операция Из Параметры.Очередь Цикл
	
		Операция.Значение = ?(Операция.Значение = Неопределено, Новый Структура, Операция.Значение);
		
		Если ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
			Операция.Значение.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОрганизацияБизнесСети) Тогда
			Операция.Значение.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСети);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИдентификаторНазначения) Тогда
			Операция.Значение.Вставить("ИдентификаторНазначения", ИдентификаторНазначения);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Очередь", Новый СписокЗначений);
	
КонецПроцедуры

// Выполнить очередную длительную операцию.
// 
// Параметры:
//  Операция - ЭлементСпискаЗначений - Данные операции
//  ОбщиеПараметры - Структура - Общие параметры для всех операций:
//  * Очередь - СписокЗначений.
// 
// Возвращаемое значение:
//  РезультатОперации - ПроизвольноеЗначение - Результат выполнения операции
Функция ВыполнитьДлительнуюОперацию(Операция, ОбщиеПараметры)
	
	РезультатОперации = Неопределено;
	
	ИмяМетода = Операция.Представление;
	Параметры = Операция.Значение;
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено);
	
	Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьНастройкиАвторизации() Тогда
		
		ПолучитьНастройкиАвторизации(Параметры, АдресРезультата);
		РезультатОперации = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если Параметры.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика()
			И ТипЗнч(РезультатОперации) = Тип("Структура") Тогда
			Авторизован = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатОперации, "Авторизован");
			Если Авторизован Тогда
				НовыеПараметры = НовыйПараметрыЗапросаПолучитьПунктыВыдачиКлиента();
				ЗаполнитьЗначенияСвойств(НовыеПараметры, Параметры);
				НовыеПараметры.ТипЗагрузки = 1; // 1 - запросить у оператора и получить
				ОбщиеПараметры.Очередь.Добавить(НовыеПараметры, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьПунктыВыдачиКлиента());
			КонецЕсли;
			ОбщиеПараметры.Очередь.Добавить(Параметры, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеПодключенияОрганизации());
		КонецЕсли;
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыЗаписатьНастройкиАвторизации() Тогда
		
		ЗаписатьНастройкиАвторизации(Параметры, АдресРезультата);
		РезультатОперации = ПолучитьИзВременногоХранилища(АдресРезультата);
		Записано = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатОперации, "Записано", Ложь);
		Если Записано Тогда
			ОбщиеПараметры.Очередь.Добавить(Параметры, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьНастройкиАвторизации());
		КонецЕсли;
	
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеПодключенияОрганизации() Тогда
		
		ПолучитьСостояниеПодключенияОрганизации(Параметры, АдресРезультата);
		РезультатОперации = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если СервисДоставкиКлиентСервер.ЭтоКурьерика(Параметры.ТипГрузоперевозки) И ТипЗнч(РезультатОперации) = Тип("Структура") Тогда
			СостояниеПодключения = РезультатОперации.СостояниеПодключенияОрганизации;
			ИспользоватьЧастичнуюДоставку = Ложь;
			Если СервисДоставкиКлиентСервер.ЭтоКурьерика(Параметры.ТипГрузоперевозки) Тогда
				ИспользоватьЧастичнуюДоставку = СервисДоставки.ИспользуетсяЧастичнаяДоставка()
					И Константы.ИспользоватьЧастичнуюДоставкуСервис1СКурьерика.Получить();
			КонецЕсли;
			Если СостояниеПодключения.ИспользуетсяЧастичнаяДоставка <> ИспользоватьЧастичнуюДоставку Тогда
				НовыеПараметры = НовыйПараметрыЗапросаОбновитьНастройкиКомпании();
				ЗаполнитьЗначенияСвойств(НовыеПараметры, Параметры);
				НовыеПараметры.ОбновитьЧастичнуюДоставку = Истина;
				НовыеПараметры.ЧастичнаяДоставкаЗначение = ИспользоватьЧастичнуюДоставку;
				НовыеПараметры.ИдентификаторОрганизации = СостояниеПодключения.ИдентификаторОрганизации;
				ОбщиеПараметры.Очередь.Добавить(НовыеПараметры, СервисДоставкиКлиентСервер.ИмяПроцедурыОбновитьНастройкиКомпании());
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДанныеГрузоперевозчика() Тогда
		
		Идентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Идентификатор", "");
		Если ПустаяСтрока(Идентификатор) Тогда
			НовыеПараметры = НовыйПараметрыЗапросаПолучитьГрузоперевозчиков();
			НовыеПараметры.ТребуетсяПроверкаАвторизации = Ложь;
			ЗаполнитьЗначенияСвойств(НовыеПараметры, Параметры);
			ПолучитьГрузоперевозчиков(НовыеПараметры, АдресРезультата);
			РезультатОперации = ПолучитьИзВременногоХранилища(АдресРезультата);
			Если ТипЗнч(РезультатОперации) = Тип("Структура") Тогда
				Список = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатОперации, "Список", Новый Массив);
				Если Список.Количество() > 0 Тогда
					Параметры.Идентификатор = Список[0].Идентификатор;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ПустаяСтрока(Параметры.Идентификатор) Тогда
			Параметры.Идентификатор = СервисДоставкиКлиентСервер.ИдентификаторГрузоперевозчика(Параметры.ТипГрузоперевозки);
		КонецЕсли;
		ПолучитьДанныеГрузоперевозчика(Параметры, АдресРезультата);
		РезультатОперации = ПолучитьИзВременногоХранилища(АдресРезультата);
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказНаДоставку() Тогда
		
		ПолучитьЗаказНаДоставку(Параметры, АдресРезультата);
		РезультатОперации = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если СервисДоставкиКлиентСервер.ЭтоСДЭК(Параметры.ТипГрузоперевозки) И ТипЗнч(РезультатОперации) = Тип("Структура")
			И РезультатОперации.Данные.СостояниеИдентификатор = 24
			И Не РезультатОперации.Данные.ДокументыОснованияВведеныВДругойИБ Тогда
			ОбщиеПараметры.Очередь.Добавить(Параметры, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеДляИзмененияРеквизиты());
		КонецЕсли;
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьЗаказНаДоставку() Тогда
		
		ОформитьЗаказНаДоставку(Параметры, АдресРезультата);
		РезультатОперации = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если СервисДоставкиКлиентСервер.ЭтоСДЭК(Параметры.ТипГрузоперевозки) И ТипЗнч(РезультатОперации) = Тип("Структура")
			И РезультатОперации.СостояниеИдентификатор = 24 Тогда
			ОбщиеПараметры.Очередь.Добавить(Параметры, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеДляИзмененияРеквизиты());
		КонецЕсли;
		
	Иначе
		
		ПараметрыМетодаКонфигурации = Новый Массив;
		ПараметрыМетодаКонфигурации.Добавить(Параметры);
		ПараметрыМетодаКонфигурации.Добавить(АдресРезультата);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("СервисДоставки." + ИмяМетода, ПараметрыМетодаКонфигурации);
		РезультатОперации = ПолучитьИзВременногоХранилища(АдресРезультата);
		
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(АдресРезультата);
	
	Возврат РезультатОперации
	
КонецФункции

// Действия после выполнения длительных операций.
// 
// Параметры:
//  Параметры - Структура - Общие параметры для всех операций
//  Результат - Структура, Неопределено - Результаты длительных операций
Процедура ПослеВыполненияДлительныхОпераций(Параметры, Результат)
	
	АдресРезультата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "АдресРезультата", "");
	Если Не ПустаяСтрока(АдресРезультата) Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонструкторыДанных

Функция ЗначениеСортировкиПоИдентификатору(Идентификатор)
	
	Сортировка = Новый Соответствие();
	Сортировка.Вставить("Дата УБЫВ", "createdTimeDesc");
	Сортировка.Вставить("Дата ВОЗР", "createdTimeAsc");
	Сортировка.Вставить("ДатаОтгрузки УБЫВ", "shipmentDateDesc");
	Сортировка.Вставить("ДатаОтгрузки ВОЗР", "shipmentDateAsc");
	Сортировка.Вставить("ДатаОбновления УБЫВ", "updateDateDesc");
	Сортировка.Вставить("ДатаОбновления ВОЗР", "updateDateAsc");
	
	Возврат Сортировка.Получить(Идентификатор);
	
КонецФункции

Функция НовыйПараметрыОтветаПолучитьЗаказНаДоставку()
	
	Результат = НовыйПараметрыЗаказаНаДоставку();
	
	Результат.Вставить("ИдентификаторЗаказа", ""); // Идентификатор заказа 1С:Доставка
	Результат.Вставить("НомерЗаказаДляПечати", ""); // Идентификатор документа заказа 1С:Доставка
	Результат.Вставить("ТрекНомер", "");
	Результат.Вставить("НомерЗаказа", "");
	Результат.Вставить("ДатаЗаказа", '00010101');
	Результат.Вставить("ДатаСозданияЗаказа", '00010101');
	Результат.Вставить("ДатаОтгрузки", '00010101');
	Результат.Вставить("ДатаДоставки", '00010101');
	Результат.Вставить("ТипЗаказа", 0); // 1 - Интернет-магазин, 2 - Доставка
	Результат.Вставить("ЦенаВключаетНДС", 0);
	Результат.Вставить("Оплачен", 0);
	Результат.Вставить("НаложенныйПлатежПолучен", Ложь);
	Результат.Вставить("Состояние", НСтр("ru = 'Черновик'"));
	Результат.Вставить("ДоступнаОтмена", Ложь);
	Результат.Вставить("ДоступноРедактированиеПослеОформления", Ложь);
	Результат.Вставить("СостояниеИдентификатор", 0);
	Результат.Вставить("Заблокирован", Ложь);
	Результат.Вставить("ДополнительнаяИнформация", "");
	Результат.Вставить("Документы", Новый Массив());
	Результат.Вставить("АвтомобильМарка", "");
	Результат.Вставить("АвтомобильНомер", "");
	Результат.Вставить("ИсполнительНаименование", "");
	Результат.Вставить("ИсполнительТелефон", "");
	Результат.Вставить("ИсполнительЮридическоеЛицоНаименование", "");
	Результат.Вставить("МультизаказДата", '00010101');
	Результат.Вставить("МультизаказНомер", "");
	Результат.Вставить("МультизаказИдентификатор", "");
	Результат.Вставить("МультизаказТипНаименование", "");
	Результат.Вставить("МультизаказТипИдентификатор", "");
	Результат.Вставить("МультизаказПредставление", "");
	Результат.Вставить("ДокументыОснованияВведеныВДругойИБ", Ложь);	
	
	// Таблица "Дополнительные данные"
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Наименование");
	Таблица.Колонки.Добавить("Значение");
	Таблица.Колонки.Добавить("ТипЗначения");
	Таблица.Колонки.Добавить("Список", СервисДоставкиСлужебный.Типы().Массив);
	
	Результат.Вставить("ДополнительныеДанныеЗаказа", Таблица);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыОтветаПолучитьМультизаказНаДоставку()
	
	Результат = НовыйПараметрыМультизаказаНаДоставку();
	
	Результат.Вставить("ИдентификаторЗаказа", ""); // Идентификатор заказа 1С:Доставка
	Результат.Вставить("НомерЗаказаДляПечати", ""); // Идентификатор документа заказа 1С:Доставка
	Результат.Вставить("ТрекНомер", "");
	Результат.Вставить("НомерЗаказа", "");
	Результат.Вставить("ДатаЗаказа", '00010101');
	Результат.Вставить("ДатаСозданияЗаказа", '00010101');
	Результат.Вставить("ЦенаВключаетНДС", 0);
	Результат.Вставить("Оплачен", 0);
	Результат.Вставить("ДоступнаОтмена", Ложь);
	Результат.Вставить("Состояние", "");
	Результат.Вставить("СостояниеИдентификатор", 0);
	Результат.Вставить("АвтомобильМарка", "");
	Результат.Вставить("АвтомобильНомер", "");
	Результат.Вставить("ИсполнительНаименование", "");
	Результат.Вставить("ИсполнительТелефон", "");
	Результат.Вставить("ИсполнительЮридическоеЛицоНаименование", "");
	Результат.Вставить("ДополнительныеДанныеЗаказа", Новый Массив());
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыТарифа()

	Параметры = Новый Структура;
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("НеГабарит", "");
	Параметры.Вставить("ФормаОплаты", Новый Массив());
	Параметры.Вставить("ТолькоВремяДоставки", Ложь);
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыГрузоперевозчика()

	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", "");
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("Телефон", "");
	Параметры.Вставить("ИНН", "");
	Параметры.Вставить("КПП", "");
	
	Возврат Параметры;
	
КонецФункции

// Новый параметры телефона.
// 
// Возвращаемое значение:
//  Структура - Новый параметры телефона:
//   * Представление - Строка - 
//   * Значение - Строка - 
//   * countryCode - Строка - 
//   * areaCode - Строка - 
//   * number - Строка - 
Функция НовыйПараметрыТелефона() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("Представление", "");
	Параметры.Вставить("Значение", "");
	Параметры.Вставить("countryCode", "");
	Параметры.Вставить("areaCode", "");
	Параметры.Вставить("number", "");
	
	Возврат Параметры;
	
КонецФункции

// Новые параметры услуги.
// 
// Параметры:
//  ТипГрузоперевозки - Неопределено - Тип грузоперевозки
// 
// Возвращаемое значение:
//  Структура - Новые параметры услуги:
// * Идентификатор - Строка - 
// * Наименование - Строка - 
// * Категория - Строка - 
// * Обязательная - Булево - 
// * ПоказыватьИнформацию - Булево - 
// * СтавкаНДСНаименование - Строка - 
// * СтавкаНДСИдентификатор - Строка - 
// * СуммаНДС - Число - 
// * СуммаСНДС - Число - 
// * СуммаСкидки - Число - 
// * СвойстваУслуги - Массив - 
// * Свойства - Массив - 
Функция НовыеПараметрыУслуги(ТипГрузоперевозки = Неопределено)

	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("Наименование", "");
	Результат.Вставить("Категория", "");
	Результат.Вставить("Обязательная", Ложь);
	Результат.Вставить("ПоказыватьИнформацию", Ложь);
	Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
		Результат.Вставить("Автоматическая", Ложь);
		Результат.Вставить("Использовать", Истина);
		Результат.Вставить("Свойства", Новый Массив);
	Иначе
		Результат.Вставить("СтавкаНДСНаименование", "");
		Результат.Вставить("СтавкаНДСИдентификатор", "");
		Результат.Вставить("СуммаНДС", 0);
		Результат.Вставить("СуммаСНДС", 0);
		Результат.Вставить("СуммаСкидки", 0);
		Результат.Вставить("СвойстваУслуги", Новый Массив);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыГруза()

	Параметры = Новый Структура;
	Параметры.Вставить("КоличествоГрузовыхМест", 1);
	Параметры.Вставить("Вес", 0);
	Параметры.Вставить("Объем", 0);
	Параметры.Вставить("МаксимальнаяВысота", 0);
	Параметры.Вставить("МаксимальнаяДлина", 0);
	Параметры.Вставить("МаксимальнаяШирина", 0);
	Параметры.Вставить("МаксимальныйВес", 0);
	Параметры.Вставить("НегабаритныйВес", 0);
	Параметры.Вставить("НегабаритныйОбъем", 0);
	Параметры.Вставить("КоличествоНегабаритныхГрузовыхМест", 0);
	Параметры.Вставить("Содержимое", "");
	Параметры.Вставить("Стоимость", 0);
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыДокументаЗаказа()

	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("ТипДокументаНаименование", "");
	Результат.Вставить("ТипДокументаИдентификатор", 0);
	Результат.Вставить("Состояние", "");
	Результат.Вставить("Номер", "");
	Результат.Вставить("Дата", '00010101');
	Результат.Вставить("Сумма", 0);
	Результат.Вставить("СуммаДолга", 0);
	Результат.Вставить("СуммаСкидки", 0);
	Результат.Вставить("Оплачен", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыПунктаПриемаВыдачи()

	Параметры = Новый Структура;
	
	Параметры.Вставить("Ссылка", Неопределено);
	Параметры.Вставить("ТипНаименование", "");
	Параметры.Вставить("ТипИдентификатор", "");
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("ИдентификаторВСистемеГрузоперевозчика", "");
	Параметры.Вставить("НаселенныйПунктИдентификатор", "");
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("Адрес", "");
	Параметры.Вставить("Телефон", "");
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыПунктаВыдачиКлиента()

	Параметры = Новый Структура;
	
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("Адрес", "");
	Параметры.Вставить("Телефон", "");
	Параметры.Вставить("АдресШирота", "");
	Параметры.Вставить("АдресДолгота", "");
		
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыКурьера()

	Параметры = Новый Структура;
	
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("Наименование", "");
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйСостояниеПодключенияОрганизации()

	СостояниеПодключения = Новый Структура;
	
	СостояниеПодключения.Вставить("ОрганизацияЗарегистрирована", Ложь);
	СостояниеПодключения.Вставить("ПунктВыдачиЗарегистрирован", "");
	СостояниеПодключения.Вставить("ЛогистЗарегистрирован", "");
	СостояниеПодключения.Вставить("ИспользуетсяЧастичнаяДоставка", Ложь);
	СостояниеПодключения.Вставить("ИдентификаторОрганизации", "");
	
	Возврат СостояниеПодключения;
	
КонецФункции

Функция НовыйПараметрыДоступныеПериодыОтгрузки()

	Параметры = Новый Структура;
	
	Параметры.Вставить("ДатаОтгрузки", '00010101');
	Параметры.Вставить("ВремяОтгрузкиС", '00010101');
	Параметры.Вставить("ВремяОтгрузкиПо", '00010101');
	Параметры.Вставить("ПериодОтгрузкиПредставление", "");
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыТочкиМаршрута()

	Параметры = Новый Структура;
	
	Параметры.Вставить("Город", "");
	Параметры.Вставить("Тип", НовыйПараметрыТипТочкиМаршрута());
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("Адрес", "");
	Параметры.Вставить("Телефон", "");
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыТипТочкиМаршрута()

	Параметры = Новый Структура;
	
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("Наименование", "");
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыЭлементаГруза()
	
	Параметры = Новый Структура;
	Параметры.Вставить("Артикул", "");
	Параметры.Вставить("ИННВладельцаГруза", "");
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("ЕдиницаИзмерения", "");
	Параметры.Вставить("Количество", 0);
	Параметры.Вставить("КоличествоВозврат", 0);
	Параметры.Вставить("Цена", 0);
	Параметры.Вставить("Сумма", 0);
	Параметры.Вставить("СуммаНДС", 0);
	Параметры.Вставить("СтавкаНДС", "");
	Параметры.Вставить("СтавкаНДСПредставление", "");
	Параметры.Вставить("Вес", 0);
	Параметры.Вставить("ВесЕдиницыТовара", 0);
	Параметры.Вставить("Объем", 0);
	Параметры.Вставить("Длина", 0);
	Параметры.Вставить("Ширина", 0);
	Параметры.Вставить("Высота", 0);
	Параметры.Вставить("ТипНоменклатуры", 0); // 0 - товар, 1 - услуга, 2 - услуга доставки
	Параметры.Вставить("ИдентификаторДокументаОснования", ""); // Строка(36)
	Параметры.Вставить("ИдентификаторСтроки", ""); // Строка(36). Уникален в пределах документа-основания заказа на доставку. В его отсутствие уникален в пределах заказа на доставку
	Параметры.Вставить("ИдентификаторГрузовогоМеста", 0); // Число(5). номер грузового места
	Параметры.Вставить("КодМаркировки", 0); // Строка(150). код маркировки честного знака
	Параметры.Вставить("ОбъемКоэффициентСм3", ""); // Число(15,3)
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыПоУмолчанию()
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОрганизацияБизнесСети", Неопределено);
	Параметры.Вставить("ВесЕдиницыТовара", 0);
	Параметры.Вставить("ВысотаЕдиницыТовара", 0);
	Параметры.Вставить("ДлинаЕдиницыТовара", 0);
	Параметры.Вставить("ШиринаЕдиницыТовара", 0);
	Параметры.Вставить("ВесГрузовогоМеста", 0);
	Параметры.Вставить("ВысотаГрузовогоМеста", 0);
	Параметры.Вставить("ДлинаГрузовогоМеста", 0);
	Параметры.Вставить("ШиринаГрузовогоМеста", 0);
	Параметры.Вставить("КонтактноеЛицо", Неопределено);
	Параметры.Вставить("СпособОпределенияКонтактногоЛица", СервисДоставкиКлиентСервер.СпособОпределенияКонтактногоЛицаНеЗадан());
	Параметры.Вставить("СпособДоставки", 0);
	Параметры.Вставить("СпособОтгрузки", 0);
	Параметры.Вставить("ВремяДоставкиОбедПо", '00010101');
	Параметры.Вставить("ВремяДоставкиОбедС", '00010101');
	Параметры.Вставить("ВремяДоставкиПо", '00010101');
	Параметры.Вставить("ВремяДоставкиС", '00010101');
	Параметры.Вставить("ВремяОтгрузкиОбедПо", '00010101');
	Параметры.Вставить("ВремяОтгрузкиОбедС", '00010101');
	Параметры.Вставить("ВремяОтгрузкиПо", '00010101');
	Параметры.Вставить("ВремяОтгрузкиС", '00010101');
	Параметры.Вставить("ЗаказчикРоль", 0);
	Параметры.Вставить("УслугиДоставки", Неопределено);
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыЗаказаЖурналаЗаказовНаДоставку()
	
	Параметры = Новый Структура;
	Параметры.Вставить("Идентификатор", "");			//Идентификатор заказа на доставку
	Параметры.Вставить("ТрекНомер", "");				//Номер заказа на доставку в сервисе перевозчика
	Параметры.Вставить("НомерЗаказа", "");				//Номер заказа на доставку в сервисе перевозчика
	Параметры.Вставить("ДатаЗаказа", '00010101');		//Дата заказа на доставку в сервисе перевозчика
	Параметры.Вставить("ДатаОтгрузки", '00010101');		//Фактическая дата отгрузки из терминала-отправителя
	Параметры.Вставить("ДатаДоставки", '00010101');		//Фактическая дата доставки
	Параметры.Вставить("Сумма", 0);						//Общая сумма заказа
	Параметры.Вставить("Состояние", "");				//Представление текущего состояния
	Параметры.Вставить("СостояниеИдентификатор", "");	//Идентификатор (код) текущего состояния
	Параметры.Вставить("Отправитель", Неопределено);
	Параметры.Вставить("ОтправительНаименование", "");
	Параметры.Вставить("АдресОтгрузкиПредставление", "");
	Параметры.Вставить("Получатель", Неопределено);
	Параметры.Вставить("ПолучательНаименование", "");
	Параметры.Вставить("АдресДоставкиПредставление", "");
	Параметры.Вставить("ВариантОтгрузки", "");			//"От адреса" или "От терминала"
	Параметры.Вставить("ВариантДоставки", "");			//"До адреса" или "До терминала"
	Параметры.Вставить("ПеревозчикНаименование", "");
	Параметры.Вставить("ПеревозчикИдентификатор", "");
	
	Параметры.Вставить("КартинкаИдентификатор", 0);
	Параметры.Вставить("МультизаказТипНаименование", "");
	Параметры.Вставить("МультизаказТипИдентификатор", "");
	Параметры.Вставить("МультизаказИдентификатор", "");
	Параметры.Вставить("МультизаказДата", Дата(1, 1, 1));
	Параметры.Вставить("МультизаказПредставление", "");
	Параметры.Вставить("МультизаказНомер", "");
	Параметры.Вставить("КОплатеНаличные", 0);
	Параметры.Вставить("КОплатеКарта", 0);
	Параметры.Вставить("ПунктВыдачи", "");
	
	Возврат Параметры;
	
КонецФункции

// Новые параметры населенного пункта.
// 
// Возвращаемое значение:
//  Структура - Новые параметры населенного пункта:
// * Идентификатор - Число - 
// * Представление - Строка - 
// * НаложенныйПлатежСуммаМаксимум - Число - 
Функция НовыеПараметрыНаселенногоПункта() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Идентификатор", 0);
	Параметры.Вставить("Представление", "");
	Параметры.Вставить("НаложенныйПлатежСуммаМаксимум", 0);
	
	Возврат Параметры;
	
КонецФункции

Функция НовыеПараметрыТарифа()
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("Описание", "");
	Параметры.Вставить("СпособОтгрузки", -1);
	Параметры.Вставить("ПунктПриемаГрузаТипИдентификатор", -1);
	Параметры.Вставить("СпособДоставки", -1);
	Параметры.Вставить("ПунктВыдачиГрузаТипИдентификатор", -1);
	Параметры.Вставить("Услуги", Новый Массив);
	
	Возврат Параметры;
	
КонецФункции

// Новый файл печатной формы.
// 
// Возвращаемое значение:
//  Структура - Новый файл печатной формы:
//   * Идентификатор - Строка - 
//   * ИдентификаторЗаказа - Строка - 
//   * Наименование - Строка - 
//   * Данные - Строка - 
//   * Расширение - Строка - 
//   * Кодировка - Строка - 
Функция НовыйФайлПечатнойФормы()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("ИдентификаторЗаказа", "");
	Результат.Вставить("Наименование", "");
	Результат.Вставить("Данные", "");
	Результат.Вставить("Расширение", "");
	Результат.Вставить("Кодировка", "");
	
	Возврат Результат;
	
КонецФункции

// Новый детализация стоимости услуги.
// 
// Возвращаемое значение:
//  Структура - Новый детализация стоимости услуги:
//   * Идентификатор - Строка - 
//   * Наименование - Строка - 
//   * Стоимость - Число - 
//   * ВариантУчета - Число - 
//   * Описание - Строка - 
Функция НовыйДетализацияСтоимостиУслуги()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("Наименование", "");
	Результат.Вставить("Стоимость", 0);
	Результат.Вставить("ВариантУчета", 0);
	Результат.Вставить("Описание", "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедурыИФункцииДляРаботыССервисом

// Установить параметры запроса сервиса.
// 
// Параметры:
//  ЗапросСервиса - см. НовыйЗапросСервиса
//  ПараметрыЗапроса - Структура - Параметры запроса
//  ТипГрузоперевозки - Число - Тип грузоперевозки
//  ИмяМетода - Строка - Имя метода
Процедура УстановитьПараметрыЗапросаСервиса(ЗапросСервиса, ПараметрыЗапроса, ТипГрузоперевозки, ИмяМетода = "")

	Если Не ЗначениеЗаполнено(ТипГрузоперевозки) Или ПустаяСтрока(ИмяМетода) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса.Аутентификация = Истина;
	
	Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьНастройкиАвторизации() Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Получение настроек авторизации'");
		ЗапросСервиса.Метод = "GET";
		Адрес = "services/%1/auth";
		Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
			Адрес = "%1/auth";
		КонецЕсли;
		Идентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ИдентификаторСервиса", "");
		Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Адрес, Идентификатор);
		ЗапросСервиса.Контент = "application/vnd-1cbn-services-auth-info.v1+json";
		ЗапросСервиса.БлокироватьСообщенияОбОшибках = Истина;
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыЗаписатьНастройкиАвторизации() Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Запись настроек авторизации'");
		ЗапросСервиса.Метод = "PUT";
		Адрес = "services/%1/auth";
		Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
			Адрес = "%1/auth";
		КонецЕсли;
		Идентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ИдентификаторСервиса", "");
		Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Адрес, Идентификатор);
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьИзменитьЗаказНаДоставку() Тогда
		
		ИдентификаторЗаказа = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ИдентификаторЗаказа", "");
		Если ПустаяСтрока(ИдентификаторЗаказа) Тогда
			ЗапросСервиса.Наименование = НСтр("ru = 'Создание заказа на доставку'");
		Иначе
			ЗапросСервиса.Наименование = НСтр("ru = 'Изменение заказа на доставку'");
		КонецЕсли;
		ЗапросСервиса.Метод = "POST";
		Адрес = "delivery/order";
		Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
			Адрес = "delivery_cdek/order";
			ИдентификаторЗаказа = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ИдентификаторЗаказа", "");
			Если Не ПустаяСтрока(ИдентификаторЗаказа) Тогда
				ЗапросСервиса.Метод = "PATCH";
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьЗаказНаДоставку() Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Оформление заказа на доставку'");
		ЗапросСервиса.Метод = "GET";
		Адрес = "delivery/orders/%1/carrier";
		Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
			Адрес = "delivery_cdek/orders/%1/carrier";
		КонецЕсли;
		Идентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "Идентификатор", "");
		Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Адрес, Идентификатор);
		Если СервисДоставкиКлиентСервер.ЭтоДеловыеЛинии(ТипГрузоперевозки) Тогда
			ЗапросСервиса.Контент = ФорматРесурсаОбработкаЗаказНаДоставку_Версия2();
		Иначе
			ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-result.v1+json";
		КонецЕсли;
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказНаДоставку() Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Получение заказа на доставку'");
		ЗапросСервиса.Метод = "GET";
		Адрес = "delivery/orders/%1";
		Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
			Адрес = "delivery_cdek/orders/%1/get";
		КонецЕсли;
		Идентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "Идентификатор", "");
		Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Адрес, Идентификатор);
		ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-ordr.v2+json";
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказыНаДоставку() Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка заказов на доставку'");
		ЗапросСервиса.Метод = "POST";
		Адрес = "delivery/orders";
		Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
			Адрес = "delivery_cdek/orders";
		КонецЕсли;
		ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-srchords.v1+json";
		
		Заголовки = Новый Соответствие();
		Если СервисДоставкиКлиентСервер.ЭтоДеловыеЛинии(ТипГрузоперевозки) Тогда
			Заголовки.Вставить("Accept", "application/vnd-1cbn-delivery-orders.v2+json");
		ИначеЕсли СервисДоставкиКлиентСервер.ЭтоЯндексДоставка(ТипГрузоперевозки) Тогда
			Заголовки.Вставить("Accept", "application/vnd-1cbn-courier-orders.v2+json");
		ИначеЕсли СервисДоставкиКлиентСервер.ЭтоКурьерика(ТипГрузоперевозки) Тогда
			Заголовки.Вставить("Accept", "application/vnd-1cbn-courierica-orders.v2+json");
		ИначеЕсли СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
			Заголовки.Вставить("Accept", "application/vnd-1cbn-cdek-orders.v1+json");
		КонецЕсли;
		ЗапросСервиса.Вставить("Заголовки", Заголовки);
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьЗаказНаДоставку()Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Отмена заказа на доставку'");
		ЗапросСервиса.Метод = "GET";
		Адрес = "delivery/orders/%1/cancel";
		Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
			Адрес = "delivery_cdek/orders/%1/cancel";
		КонецЕсли;
		Идентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "Идентификатор", "");
		Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Адрес, Идентификатор);
		ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-result.v1+json";
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояния() Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка состояний заказов на доставку'");
		ЗапросСервиса.Метод = "GET";
		Адрес = "deliveryCatalogs/statuses";
		ЗапросСервиса.Контент = "application/vnd-1cbn-delivcat-statuses.v1+json";
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков() Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка грузоперевозчиков'");
		ЗапросСервиса.Метод = "GET";
		Адрес = "deliveryCatalogs/carriers";
		Если СервисДоставкиКлиентСервер.ЭтоДеловыеЛинии(ТипГрузоперевозки) Тогда
			ЗапросСервиса.Контент = "application/vnd-1cbn-delivery-catalog-carriers.v1+json";
		ИначеЕсли СервисДоставкиКлиентСервер.ЭтоЯндексДоставка(ТипГрузоперевозки) Тогда
			ЗапросСервиса.Контент = "application/vnd-1cbn-courier-catalog-carriers.v1+json";
		ИначеЕсли СервисДоставкиКлиентСервер.ЭтоКурьерика(ТипГрузоперевозки) Тогда
			ЗапросСервиса.Контент = "application/vnd-1cbn-courierica-catalog-carriers.v1+json";
		ИначеЕсли СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
			ЗапросСервиса.Адрес = ЗапросСервиса.Адрес;
			ЗапросСервиса.Контент = "application/vnd-1cbn-cdek-catalog-carriers.v1+json";
		КонецЕсли;
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДанныеГрузоперевозчика() Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Получение данных грузоперевозчика'");
		ЗапросСервиса.Метод = "GET";
		Адрес = "deliveryCatalogs/carriers/%1";
		Идентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "Идентификатор", "");
		Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Адрес, Идентификатор);
		ЗапросСервиса.Контент = "application/vnd-1cbn-delivcat-carrier.v1+json";
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеТерминалы() Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Получение данных пунктов приема-выдачи заказов'");
		ЗапросСервиса.Метод = "POST";
		Адрес = "deliveryCatalogs/pointsByAdrress";
		ЗапросСервиса.Контент = "application/vnd-1cbn-delivcat-points.v1+json";
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДанныеТерминала() Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Получение данных пункта приема-выдачи груза'");
		ЗапросСервиса.Метод = "GET";
		Адрес = "deliveryCatalogs/points/%1";
		Идентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "Идентификатор", "");
		Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Адрес, Идентификатор);
		ЗапросСервиса.Контент = "application/vnd-1cbn-delivcat-point.v1+json";
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы() Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка тарифов'");
		ЗапросСервиса.Метод = "POST";
		Адрес = "delivery/calculator";
		Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
			Адрес = "delivery_cdek/calculator";
			АвтопересчетПоВсемТарифам = ПараметрыЗапроса.АвтопересчетПоВсемТарифам;
			ЗапросСервиса.Заголовки.Вставить("isFullCalculation", XMLСтрока(АвтопересчетПоВсемТарифам));
		КонецЕсли;
		ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-srchtrfs.v3+json";
		ЗапросСервиса.Заголовки.Вставить("Accept", "application/vnd-1cbn-deliv-tariffs.v3+json");
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДанныеПоТарифу() Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Получение данных тарифа'");
		ЗапросСервиса.Метод = "GET";
		Адрес = "deliveryCatalogs/tariff/%1";
		Идентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "Идентификатор", "");
		Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Адрес, Идентификатор);
		ЗапросСервиса.Контент = "application/vnd-1cbn-delivcat-tariff.v1+json";
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДанныеУслуги() Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Получение данных услуги'");
		ЗапросСервиса.Метод = "GET";
		Адрес = "deliveryCatalogs/services/%1";
		Идентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "Идентификатор", "");
		Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Адрес, Идентификатор);
		ЗапросСервиса.Контент = "application/vnd-1cbn-delivcat-service.v1+json";
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяМетодаПолучитьНаселенныеПункты() Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Получение населенных пунктов'");
		ЗапросСервиса.Метод = "POST";
		ЗапросСервиса.Аутентификация = Истина;
		Адрес = "deliveryCatalogs/settlements/";
		Идентификатор = СервисДоставкиКлиентСервер.ИдентификаторГрузоперевозчика(ТипГрузоперевозки);
		ДобавитьПараметрАдресаHTML(Адрес, "carrierid", Идентификатор);
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяМетодаПолучитьТарифыИУслуги() Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Получение тарифов и услуг'");
		ЗапросСервиса.Метод = "GET";
		Адрес = "deliveryCatalogs/TariffsAndServices/";
		Идентификатор = СервисДоставкиКлиентСервер.ИдентификаторГрузоперевозчика(ТипГрузоперевозки);
		ДобавитьПараметрАдресаHTML(Адрес, "carrierid", Идентификатор);
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрафикДвиженияЗаказа() Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Получение графика движения заказа'");
		ЗапросСервиса.Метод = "GET";
		Адрес = "delivery/orders/%1/tracking";
		Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
			Адрес = "delivery_cdek/orders/%1/tracking";
		КонецЕсли;
		Идентификатор = ПараметрыЗапроса.ИдентификаторЗаказа;
		Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Адрес, Идентификатор);
		ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-tracker.v1+json";
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрафикДвиженияЗаказаПоТрекНомеру() Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Получение графика движения заказа по трек номеру'");
		ЗапросСервиса.Метод = "GET";
		Адрес = "delivery/orders/carrier/%2/trackNumber/%1/tracking";
		Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
			Адрес = "delivery_cdek/orders/%1/tracking";
			ЗапросСервиса.Заголовки.Вставить("isTrackNumber", Истина);
		КонецЕсли;
		ИдентификаторГрузоперевозчика = СервисДоставкиКлиентСервер.ИдентификаторГрузоперевозчика(ТипГрузоперевозки);
		Идентификатор = ПараметрыЗапроса.ТрекНомер;
		Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Адрес, Идентификатор, ИдентификаторГрузоперевозчика);
		ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-tracker.v1+json";
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеПечатныеФормы() Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка доступных печатных форм'");
		ЗапросСервиса.БлокироватьСообщенияОбОшибках = Истина;
		ИдентификаторыЗаказов = ПараметрыЗапроса.ИдентификаторыЗаказов;
		Количество = ИдентификаторыЗаказов.Количество();
		Если Количество = 1 Тогда
			
			ЗапросСервиса.Метод = "GET";
			Адрес = "delivery/orders/%1/availableForms";
			Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
				Адрес = "delivery_cdek/orders/%1/availableForms";
			КонецЕсли;
			Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Адрес, ИдентификаторыЗаказов[0]);
			ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-forms.v1+json";
			
		ИначеЕсли Количество > 1 Тогда
			
			ЗапросСервиса.Метод = "POST";
			Адрес = "delivery/orders/availableForms";
			Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
				Адрес = "delivery_cdek/orders/availableForms";
			КонецЕсли;
			ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-forms-list.v1+json";
			ЗапросСервиса.Заголовки.Вставить("Accept", "application/vnd-1cbn-deliv-forms-list.v1+json");
			
		КонецЕсли;
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьФайлыПечатныхФорм() Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Получение файлов печатных форм'");
		ЗапросСервиса.Метод = "GET";
		Адрес = "delivery/orders/%1/print-forms";
		Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
			ЗапросСервиса.Метод = "POST";
			Адрес = "delivery_cdek/orders/%1/print-forms";
		Иначе
			СтрокаПараметров = "";
			Для Каждого ТекущаяФорма Из ПараметрыЗапроса.Список Цикл
				СтрокаПараметров = СтрокаПараметров + ?(СтрокаПараметров = "", "", ",")
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1:%2",
					ТекущаяФорма.ИдентификаторПечатнойФормы, ТекущаяФорма.ИдентификаторДокумента);
			КонецЦикла;
		КонецЕсли;
		Идентификатор = ПараметрыЗапроса.ИдентификаторЗаказа;
		Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Адрес, Идентификатор);
		Если ЗначениеЗаполнено(СтрокаПараметров) Тогда
			ДобавитьПараметрАдресаHTML(Адрес, "formIds", СтрокаПараметров);
		КонецЕсли;
		ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-files.v1+json";
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыОбновитьЗаказНаДоставку() Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Обновление данных заказа на доставку'");
		ЗапросСервиса.Метод = "GET";
		Адрес = "delivery/orders/%1/carrier/update";
		Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
			Адрес = "delivery_cdek/orders/%1/carrier/update";
		КонецЕсли;
		Идентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "Идентификатор", "");
		Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Адрес, Идентификатор);
		ЗапросСервиса.Контент = "application/vnd-1cbn-delivery-orders-carrier-upd-result.v2+json";
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеДляИзмененияРеквизиты() Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка реквизитов доступных для редактирования'");
		ЗапросСервиса.Метод = "GET";
		Адрес = "delivery/orders/%1/editableAttributes";
		Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
			Адрес = "delivery_cdek/orders/%1/editableAttributes";
		КонецЕсли;
		Идентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "Идентификатор", "");
		Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Адрес, Идентификатор);
		ЗапросСервиса.Контент = "application/vnd-1cbn-delivery-order-editable-attributes.v1+json";
		
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьНаложенныеПлатежи() Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Получить список наложенных платежей'");
		ЗапросСервиса.Метод = "GET";
		Адрес = "delivery/paymentsondelivery";
		Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
			Адрес = "delivery_cdek/paymentsondelivery";
		КонецЕсли;
		ЗапросСервиса.Контент = "application/vnd-1cbn-delivery-payment-list.v1+json";
	ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыДобавитьЗаказНаДоставкуВМультизаказ()
		И СервисДоставкиКлиентСервер.ЭтоДеловыеЛинии(ТипГрузоперевозки) Тогда
			
		ЗапросСервиса.Заголовки.Вставить("Accept", ФорматРесурсаОбработкаЗаказНаДоставку_Версия2());	
	КонецЕсли;
	
	ЗапросСервиса.Адрес = Адрес;
	
КонецПроцедуры

Функция ФорматРесурсаОбработкаЗаказНаДоставку_Версия2()
	Возврат "application/vnd-1cbn-deliv-result.v2+json";
КонецФункции

// Выполнение команды сервиса.
// 
// Параметры:
//  ЗапросСервиса - Структура - параметры вызова или имя команды.
//  Отказ - Булево - признак ошибки выполнения.
//  Кэш - Структура, Неопределено - Данные аутентификации
// 
// Возвращаемое значение:
//  Произвольный - возвращаемые данные сервиса.
Функция ВыполнитьЗапрос(ЗапросСервиса, Отказ, Кэш = Неопределено) Экспорт
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Инициализация параметров соединения.
	ИмяСервиса = "Доставка";
	ТипСервисаИнтеграции = 0;
	Если Не ПустаяСтрока(ЗапросСервиса.Сервис) Тогда
		ИмяСервиса = ЗапросСервиса.Сервис;
		МассивСервис = СтрРазделить(ИмяСервиса, ".", Ложь);
		ТипСервисаИнтеграции = ?(МассивСервис.Количество() > 1,
			СервисДоставкиКлиентСервер.ТипСервисаИнтеграции(Число(МассивСервис[1])), ТипСервисаИнтеграции);
	КонецЕсли;
	ЭтоСервисИнтеграции1СЭлемент = ТипСервисаИнтеграции = СервисДоставкиКлиентСервер.ТипСервисаИнтеграции1СЭлемент();
	
	ПараметрыСоединения = ПараметрыСоединения(ИмяСервиса);
	Если ПараметрыСоединения = Неопределено Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Если Кэш = Неопределено Тогда
		
		Кэш = НовыйПараметрыКэшАутентификацииБС();
		
		Если Не ПравоРаботыССервисомДоставки(Истина) Тогда
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
		
		Если ЗапросСервиса.Аутентификация И Не ЗначениеЗаполнено(ЗапросСервиса.ОрганизацияБизнесСети) Тогда
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
		
		ЗапросСервиса.ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(ЗапросСервиса.ОрганизацияБизнесСети);
		Кэш.ИдентификаторОрганизации = ЗапросСервиса.ИдентификаторОрганизации;
		
		Если ЗначениеЗаполнено(ЗапросСервиса.ИдентификаторОрганизации) Тогда
			Если ЭтоСервисИнтеграции1СЭлемент Тогда
				АдресПрефикс = "/applications/Gate-production-1/api/redirect/v1/%1/api/";
			Иначе
				АдресПрефикс = "api/%1/";
			КонецЕсли;
			Кэш.АдресПрефикс = СтрШаблон(АдресПрефикс, ЗапросСервиса.ИдентификаторОрганизации);
			ЗапросСервиса.Адрес = Кэш.АдресПрефикс + ЗапросСервиса.Адрес;
		КонецЕсли;
		
		СтрокаАутентификации = БизнесСеть.СтрокаАутентификацииДляВыполненияКомандыСервиса(ЗапросСервиса, ПараметрыСоединения, Отказ);
		Кэш.СтрокаАутентификации = СтрокаАутентификации;
		
		Если Отказ Тогда
			ТекстСообщения = НСтр("ru='Информационная база не подключена к организация ""%1"" в сервисе 1С:Бизнес-сеть.'")
				+ Символы.ПС + НСтр("ru ='Для подключения организации запустите мастер регистрации организаций в сервисе 1С:Бизнес-сеть.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЗапросСервиса.ОрганизацияБизнесСети);
			Если Не СообщениеПользователюСуществует(ТекстСообщения) Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
				ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ОбработкаОшибок.ПодробноеПредставлениеОшибки(
					ИнформацияОбОшибке()), ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().СервисДоставки);
			КонецЕсли;
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		
		ЗапросСервиса.Адрес = Кэш.АдресПрефикс + ЗапросСервиса.Адрес;
		СтрокаАутентификации = Кэш.СтрокаАутентификации;
		ЗапросСервиса.ИдентификаторОрганизации = Кэш.ИдентификаторОрганизации;
		
	КонецЕсли;
	
	СтруктураURL = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыСоединения.Сервер);
	
	// Установка времени ожидания ответа.
	Если ЗапросСервиса.Свойство("Таймаут") И ЗапросСервиса.Таймаут <> 0 Тогда
		Таймаут = ЗапросСервиса.Таймаут;
	Иначе
		Таймаут = ПараметрыСоединения.Таймаут;
	КонецЕсли;
	
	// Инициализация соединения.
	Попытка
		Соединение = Новый HTTPСоединение(СтруктураURL.Хост, ПараметрыСоединения.Порт,,,
			ПараметрыСоединения.Прокси, Таймаут, ПараметрыСоединения.ЗащищенноеСоединение);
	Исключение
		ТекстСообщения = НСтр("ru='Отсутствует соединение с сервисом 1С:Доставка'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), 
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().СервисДоставки);
		Возврат Неопределено;
	КонецПопытки;

	// Установка параметров запроса.
	Запрос = Новый HTTPЗапрос(ЗапросСервиса.Адрес);
	
	Если ЗначениеЗаполнено(СтрокаАутентификации) Тогда
		Если ЭтоСервисИнтеграции1СЭлемент Тогда
			Запрос.Заголовки.Вставить("OrganizationID", ЗапросСервиса.ИдентификаторОрганизации);
			Запрос.Заголовки.Вставить("Token", СокрЛП(СТрЗаменить(СтрокаАутентификации, "Bearer ", "")));
		Иначе
			Запрос.Заголовки.Вставить("Authorization", СокрЛП(СтрЗаменить(СтрокаАутентификации, "Bearer ", "")));
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Установка заголовков запроса.
	Если ЗапросСервиса.Свойство("Заголовки") Тогда
		Для каждого ПараметрЗаголовка Из ЗапросСервиса.Заголовки Цикл
			Запрос.Заголовки.Вставить(ПараметрЗаголовка.Ключ, ПараметрЗаголовка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Установка тела запроса.
	Если ЗначениеЗаполнено(ЗапросСервиса.Данные) Тогда
		Если ТипЗнч(ЗапросСервиса.Данные) = Тип("ДвоичныеДанные") Тогда
			Запрос.УстановитьТелоИзДвоичныхДанных(ЗапросСервиса.Данные);
		Иначе
			Запрос.УстановитьТелоИзСтроки(ЗапросСервиса.Данные);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗапросСервиса.Метод = "GET" Тогда
		Запрос.Заголовки.Вставить("Accept", ЗапросСервиса.Контент);
	ИначеЕсли ЗапросСервиса.Метод = "POST" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
	ИначеЕсли ЗапросСервиса.Метод = "PUT" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
	ИначеЕсли ЗапросСервиса.Метод = "PATCH" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
	ИначеЕсли ЗапросСервиса.Метод = "DELETE" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
		Запрос.Заголовки.Вставить("Content-Length", СтрДлина(Запрос.ПолучитьТелоКакСтроку()));
	КонецЕсли;
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ЗапросСервиса.Метод, Запрос);
		Данные = Ответ.ПолучитьТелоКакСтроку();
	Исключение
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса к сервису.'");
		ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС + ЗапросСервиса.Адрес + Символы.ПС
			+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ЗапросСервиса.Наименование,
			ПодробныйТекстОшибки, ТекстОшибки, "БизнесСеть");
		Возврат Неопределено;
	КонецПопытки;
	
	// Обработка результата запроса.
	Результат = ОбработатьОтветСервиса(Соединение, ЗапросСервиса, Ответ, Данные, Отказ);
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьОтветСервиса(Соединение, ЗапросСервиса, HTTPОтвет, Данные, Отказ)
	
	// Инициализация возврата ошибки.
	Результат = Неопределено;
	КодСостояния = HTTPОтвет.КодСостояния;
	
	Если ЗапросСервиса.Ошибки.Получить(КодСостояния) = Неопределено
		И КодСостояния <> 200
		И ЗапросСервиса.РазрешенныеСостояния.Найти(КодСостояния) = Неопределено Тогда
		Если КодСостояния >= 500 Тогда
			ЗапросСервиса.Ошибки.Вставить(КодСостояния, СервисДоставкиКлиентСервер.ТекстОшибкиВнутренняяОшибкаСервиса());
		ИначеЕсли КодСостояния >= 400 Тогда
			ЗапросСервиса.Ошибки.Вставить(КодСостояния, "");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗапросСервиса.Ошибки.Получить(КодСостояния) <> Неопределено Тогда
		Возврат ОбработатьОшибкуСервиса(Соединение, ЗапросСервиса, КодСостояния, Данные, Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗапросСервиса.Результат) Тогда
		Данные = ПолучитьЗначенияДанныеСтруктурыПоАбсолютномуПути(ЗначениеИзСтрокиJSON(Данные),
			ЗапросСервиса.Результат, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат КодСостояния;
	КонецЕсли;
	
	Если ЗапросСервиса.ОбработкаРезультата <> Неопределено Тогда
		Результат = ОбработатьОтветСервисаПродолжение(ЗапросСервиса.ОбработкаРезультата, КодСостояния, Данные, Отказ);
	Иначе
		Результат = ЗначениеИзСтрокиJSON(Данные);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьОшибкуСервиса(Соединение, ЗапросСервиса, КодСостояния, Данные, Отказ)

	ТекстОшибки = ЗапросСервиса.Ошибки.Получить(КодСостояния);
	
	Если ТекстОшибки = Ложь Тогда
		Возврат КодСостояния;
	ИначеЕсли ПустаяСтрока(ТекстОшибки) Тогда
		ТекстОшибки = НСтр("ru = 'Сервис доставки. Ошибка'");
	КонецЕсли;
	
	Отказ = Истина;
	
	ЗначениеДанных = ЗначениеИзСтрокиJSON(Данные);
	
	// Заполнение текста ошибки для журнала регистрации
	ПодробныйТекстОшибки = Новый Массив;
	Если Не ПустаяСтрока(ЗапросСервиса.Наименование) Тогда
		ТекстОшибки = СтрШаблон("%1 (%2)", ТекстОшибки, ЗапросСервиса.Наименование);
	КонецЕсли;
	ПодробныйТекстОшибки.Добавить(ТекстОшибки);
	
	Если КодСостояния > 200 Тогда
		ПодробныйТекстОшибки.Добавить(СтрШаблон("%1: %2", НСтр("ru = 'Код состояния'"), КодСостояния));
	КонецЕсли;
	
	АдресСоединенияURL =  ?(Соединение.Защищенное, "https://", "http://") + Соединение.Сервер
		+ ":" + Формат(Соединение.Порт, "ЧГ=") + ?(Лев(ЗапросСервиса.Адрес, 1) = "/", "", "/") + ЗапросСервиса.Адрес;
	ПодробныйТекстОшибки.Добавить(СтрШаблон("%1 %2", ЗапросСервиса.Метод, АдресСоединенияURL));
	
	ОшибкаСервиса = "";
	ТехническаяИнформация = "";
	Если ТипЗнч(ЗначениеДанных) = Тип("Структура") Тогда
		
		Если ЗначениеДанных.Свойство("error") И ТипЗнч(ЗначениеДанных.error) = Тип("Структура") Тогда
			ЗначениеДанных = ЗначениеДанных.error;
		КонецЕсли;
		
		Если ЗначениеДанных.Свойство("title") Тогда
			ОшибкаСервиса = ЗначениеДанных.title;
		КонецЕсли;
		Если ЗначениеДанных.Свойство("requestTraceId") Тогда
			ОшибкаСервиса = ?(ПустаяСтрока(ОшибкаСервиса), "", ОшибкаСервиса + Символы.ПС)
				+ НСтр("ru = 'Идентификатор ошибки'") + ": " + ЗначениеДанных.requestTraceId;
		КонецЕсли;
		Если ЗначениеДанных.Свойство("detail") Тогда
			ОшибкаСервиса = ?(ПустаяСтрока(ОшибкаСервиса), "", ОшибкаСервиса + Символы.ПС) + ЗначениеДанных.detail;
		КонецЕсли;
		Если ЗначениеДанных.Свойство("message") Тогда
			ОшибкаСервиса = ?(ПустаяСтрока(ОшибкаСервиса), "", ОшибкаСервиса + Символы.ПС) + ЗначениеДанных.message;
		ИначеЕсли ЗначениеДанных.Свойство("error_description") Тогда
			ОшибкаСервиса = ЗначениеДанных.error_description;
		ИначеЕсли ЗначениеДанных.Свойство("ПодробныйТекстОшибки") Тогда
			ОшибкаСервиса = ЗначениеДанных.ПодробныйТекстОшибки;
		ИначеЕсли ЗначениеДанных.Свойство("validationError") И ТипЗнч(ЗначениеДанных.validationError) = Тип("Массив") Тогда
			ОшибкиВложенные = "";
			Для каждого СтрокаОшибки Из ЗначениеДанных.validationError Цикл
				ОшибкиВложенные = ОшибкиВложенные + ?(ПустаяСтрока(ОшибкиВложенные), "", Символы.ПС)
					+ " - " + СтрокаОшибки.message + " (" + СтрокаОшибки.field + ")";
			КонецЦикла;
			ОшибкаСервиса = ?(ПустаяСтрока(ОшибкаСервиса), "", ОшибкаСервиса + ":" + Символы.ПС) + ОшибкиВложенные;
		ИначеЕсли ЗначениеДанных.Свойство("errors") И ТипЗнч(ЗначениеДанных.errors) = Тип("Массив") Тогда
			ОшибкиВложенные = Новый Массив;
			Для Каждого СтрокаОшибки Из ЗначениеДанных.errors Цикл
				Если ТипЗнч(СтрокаОшибки) = Тип("Строка") Тогда
					ОшибкиВложенные.Добавить(СтрокаОшибки);
				КонецЕсли;
			КонецЦикла;
			Если ОшибкиВложенные.Количество() > 0 Тогда
				ОшибкаСервиса = ОшибкаСервиса + СтрСоединить(ОшибкиВложенные, Символы.ПС);
			КонецЕсли;
		КонецЕсли;
		
		Успех = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначениеДанных, "Успех");
		Если Успех = Ложь И ПустаяСтрока(ОшибкаСервиса) Тогда
			ОшибкаСервиса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначениеДанных, "ТекстСообщения", "");
		КонецЕсли;
		
		ТехническаяИнформация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначениеДанных, "ТехническаяИнформация", ОшибкаСервиса);
		Если Не ПустаяСтрока(ТехническаяИнформация) Тогда
			ПодробныйТекстОшибки.Добавить(ТехническаяИнформация);
		КонецЕсли;
		
	Иначе
		
		ОшибкаСервиса = ТекстОшибки;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ЗапросСервиса.Детализация) Тогда
		ПодробныйТекстОшибки.Добавить(СтрШаблон("%1: %2", НСтр("ru = 'Детализация'"), ЗапросСервиса.Детализация));
	КонецЕсли;
	
	БлокироватьСообщенияОбОшибках = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗапросСервиса,
		"БлокироватьСообщенияОбОшибках", Ложь);
	Если Не БлокироватьСообщенияОбОшибках Тогда
		ИзменитьТекстОшибкиПользователю(ОшибкаСервиса);
		Если Не ПустаяСтрока(ОшибкаСервиса) И Не СообщениеПользователюСуществует(ОшибкаСервиса) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОшибкаСервиса;
			Сообщение.ИдентификаторНазначения = ЗапросСервиса.ИдентификаторНазначения;
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Сервис доставки.'", ОбщегоНазначения.КодОсновногоЯзыка())
		+ ЗапросСервиса.Наименование, УровеньЖурналаРегистрации.Ошибка, , , СтрСоединить(ПодробныйТекстОшибки, Символы.ПС));
	
	Возврат КодСостояния;
	
КонецФункции

Процедура ИзменитьТекстОшибкиПользователю(ОшибкаСервиса)
	
	Если СтрНайти(ОшибкаСервиса, "Оплата при получении недоступна") Тогда
		ОшибкаСервиса = НСтр("ru = 'Внимание! Оплата при получении недоступна.
											|Измените способ постоплаты.'");
	КонецЕсли;
	
КонецПроцедуры

Функция ОбработатьОтветСервисаПродолжение(Обработка, КодСостояния, Данные, Отказ)
	
	ЗначениеДанных = ЗначениеИзСтрокиJSON(Данные);
	
	Если ТипЗнч(Обработка) = Тип("ТаблицаЗначений") Тогда
		Если ТипЗнч(ЗначениеДанных) = Тип("Массив") Тогда
			Результат = ПреобразоватьКоллекциюПоТаблицеЗначений(ЗначениеДанных, Обработка);
		ИначеЕсли ТипЗнч(ЗначениеДанных) = Тип("Структура") Тогда
			Результат = ПреобразоватьКоллекциюПоТаблицеЗначений(ЗначениеДанных, Обработка);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Обработка) = Тип("Строка") Тогда
		Результат = КонвертироватьЗначениеСервиса(ЗначениеДанных, Обработка, КодСостояния);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьПараметрАдресаHTML(Адрес, Имя, Знач Значение)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Значение = Формат(Значение, "ЧГ=");
	КонецЕсли;
	
	Адрес = Адрес + ?(СтрНайти(Адрес, "?") = 0, "?", "&") + Имя + "=" + Значение;
	
КонецПроцедуры

#Область НастройкиПодключенияКСервису

Функция ПараметрыСоединения(ИмяСервиса)
	
	Возврат СервисДоставкиПовтИсп.ПараметрыСоединения(ИмяСервиса);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеКонструкторы

// Описание запроса сервиса.
// 
// Параметры:
//  ПараметрыЗапроса - Неопределено, Структура - Параметры запроса
//  ИмяМетода - Строка - Наименование вызванного метода
// 
// Возвращаемое значение:
//  Структура - данные для запроса.
Функция НовыйЗапросСервиса(ПараметрыЗапроса = Неопределено, ИмяМетода = "")
	
	ЗапросСервиса = Новый Структура;
	
	Если ТипЗнч(ПараметрыЗапроса) <> Тип("Структура") Тогда
		ПараметрыЗапроса = Новый Структура;
	КонецЕсли;
	
	ОрганизацияБизнесСети = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ОрганизацияБизнесСети");
	ОрганизацияБизнесСети = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса,
		"ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСети);
	
	ТипГрузоперевозки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ТипГрузоперевозки", 0);
	ТипГрузоперевозки = ?(ТипЗнч(ТипГрузоперевозки) = Тип("ПеречислениеСсылка.ТипыГрузоперевозки"),
						Перечисления.ТипыГрузоперевозки.Индекс(ТипГрузоперевозки) + 1,
						ТипГрузоперевозки);
	
	ИдентификаторНазначения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ИдентификаторНазначения",
		ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ОрганизацияБизнесСети);
	ЗапросСервиса.Вставить("Сервис", "Доставка." + Строка(ТипГрузоперевозки));
	ЗапросСервиса.Вставить("Наименование", ""); // Полное наименование метода.
	ЗапросСервиса.Вставить("Адрес",        ""); // Адрес URI метода.
	ЗапросСервиса.Вставить("Метод",        ""); // Метод HTTP соединения, например POST. См. МетодыСоединения()
	ЗапросСервиса.Вставить("Права",        "");
	ЗапросСервиса.Вставить("Данные");           // Двоичные данные или строка.
	ЗапросСервиса.Вставить("РазрешенныеСостояния", Новый Массив);
	ЗапросСервиса.Вставить("Ошибки",       Новый Соответствие); // Соответствие ошибок, например: (404, "Не найдено").
	ЗапросСервиса.Вставить("БлокироватьСообщенияОбОшибках", Ложь); // Не выводить сообщения об ошибках.
	ЗапросСервиса.Вставить("ОбработкаРезультата");        // Строка, ТаблицаЗначений
	ЗапросСервиса.Вставить("ИдентификаторОрганизации", "");
	ЗапросСервиса.Вставить("ВременныйТокен", ""); // используется для выполнения запросов по токенам, не сохраненных в ИБ
	ЗапросСервиса.Вставить("Аутентификация", Ложь); // для некоторых методов, аутентификация может быть не нужна
	ЗапросСервиса.Вставить("ТипКонтента", "application/json");
	ЗапросСервиса.Вставить("Таймаут",      120);  // Длительность ожидания ответа.
	ЗапросСервиса.Вставить("Результат");        // Свойство возврата результата, например "path[0].cat".
	ЗапросСервиса.Вставить("ДополнительныеПараметры");          // Дополнительные параметры.
	ЗапросСервиса.Вставить("Контент",      ""); // Описание контента (передается в заголовке).
	ЗапросСервиса.Вставить("Детализация",  ""); // Дополнительная информация для описания деталей запроса.
	ЗапросСервиса.Вставить("Заголовки", Новый Соответствие); // Дополнительная информация для описания деталей запроса.
	ЗапросСервиса.Вставить("ИдентификаторНазначения", ИдентификаторНазначения); // Идентификатор формы, из которой произведен вызов.
	
	УстановитьПараметрыЗапросаСервиса(ЗапросСервиса, ПараметрыЗапроса, ТипГрузоперевозки, ИмяМетода);
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Параметры кэша при аутентификации БС.
// 
// Возвращаемое значение:
//  Структура - Новый параметры кэш аутентификации БС:
//   * АдресПрефикс - Строка - 
//   * СтрокаАутентификации - Строка - 
//   * ИдентификаторОрганизации - Строка - 
Функция НовыйПараметрыКэшАутентификацииБС()

	Структура = Новый Структура;
	
	Структура.Вставить("АдресПрефикс", "");
	Структура.Вставить("СтрокаАутентификации", "");
	Структура.Вставить("ИдентификаторОрганизации", "");
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти

#Область ФормированиеЗапросовКСервису

Функция ЗапросСервисаСозданиеИзменениеЗаказаНаДоставку(ПараметрыЗапроса, Отказ = Неопределено)
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьИзменитьЗаказНаДоставку());

	ТипГрузоперевозки = ПараметрыЗапроса.ТипГрузоперевозки;

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("vnd-1cbn-idempotency-key", ПараметрыЗапроса.КлючИдемпотентности);

	Если СервисДоставкиКлиентСервер.ЭтоДеловыеЛинии(ТипГрузоперевозки) Тогда
		ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-createordr.v3+json";
		Заголовки.Вставить("Accept", ФорматРесурсаОбработкаЗаказНаДоставку_Версия2());
		Данные = ЗаполнитьДанныеДляСервисаСозданиеИзменениеЗаказаНаДоставку(ПараметрыЗапроса);
	ИначеЕсли СервисДоставкиКлиентСервер.ЭтоЯндексДоставка(ТипГрузоперевозки) Тогда
		ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-createordr.v1+json";
		Заголовки.Вставить("Accept", "application/vnd-1cbn-deliv-result.v1+json");
		Данные = ЗаполнитьДанныеДляСервисаСозданиеИзменениеЗаказаНаДоставку(ПараметрыЗапроса);
	ИначеЕсли СервисДоставкиКлиентСервер.ЭтоКурьерика(ТипГрузоперевозки) Тогда
		ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-createordr-courierica.v1+json";
		Заголовки.Вставить("Accept", "application/vnd-1cbn-result-courierica-result.v1+json");
		Данные = ЗаполнитьДанныеДляСервисаСозданиеИзменениеЗаказаНаДоставкуКурьерика(ПараметрыЗапроса);
	ИначеЕсли СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
		ЗапросСервиса.Контент = "application/vnd-1cbn-cdek-createordr.v1+json";
		Заголовки.Вставить("Accept", "application/vnd-1cbn-deliv-result.v1+json");
		Данные = ЗаполнитьДанныеДляСервисаСозданиеИзменениеЗаказаНаДоставку(ПараметрыЗапроса);
	КонецЕсли;
	
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные, Отказ, , ТипГрузоперевозки);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗаполнитьДанныеДляСервисаСозданиеИзменениеЗаказаНаДоставку(ПараметрыЗапроса)

	Данные = Новый Структура;
	
	Параметры = Новый Структура;
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(ПараметрыЗапроса, Параметры);
	
	ТипГрузоперевозки = СервисДоставкиКлиентСервер.ЧисловойИдентификаторГрузоперевозчика(Параметры.ТипГрузоперевозки);
	ЭтоСДЭК = СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки);
	
	ДобавитьЗначение(Данные, "id", Строка(Параметры.ИдентификаторЗаказа), Истина);
	ДобавитьЗначение(Данные, "type", ПолучитьЗначение(Параметры, "ТипЗаказа", , 0));
	ДобавитьЗначение(Данные, "baseDocuments", Параметры.ДокументыОснованияИдентификаторы.ВыгрузитьЗначения(), Истина);
	ДобавитьЗначение(Данные, "transportationTypeId", ТипГрузоперевозки, Истина);
	ДобавитьЗначение(Данные, "carrierId", Параметры.ГрузоперевозчикИдентификатор, Истина);
	ДобавитьЗначение(Данные, "tariffId", Параметры.ТарифИдентификатор, Истина);
	ДобавитьЗначение(Данные, "currencyId", Параметры.ВалютаКод, Истина);
	ДобавитьЗначение(Данные, "statusId", ПолучитьЗначение(Параметры, "СостояниеИдентификатор", "Число"));
	ДобавитьЗначение(Данные, "totalSum", Параметры.СуммаДокумента, Истина);
	ДобавитьЗначение(Данные, "totalDiscountSum", Параметры.СуммаСкидки, Истина);
	ДобавитьЗначение(Данные, "requesterRoleId", Параметры.ЗаказчикРоль, Истина);
	ДобавитьЗначение(Данные, "shipment.tipeId", Параметры.СпособОтгрузки, Истина);
	ДобавитьЗначение(Данные, "shipment.pointId", Параметры.ПунктПриемаГрузаИдентификатор, Истина);
	ДобавитьЗначение(Данные, "shipment.cityId", Параметры.ОтправительНаселенныйПунктИдентификатор, Истина);
	ДобавитьЗначение(Данные, "shipment.date", Параметры.ДатаОтгрузки, Истина);
	ДобавитьЗначение(Данные, "shipment.timeOptionId", Параметры.ВариантВремениОтгрузки, Истина);
	ДобавитьЗначение(Данные, "shipment.time.from", Параметры.ВремяОтгрузкиС, Истина);
	ДобавитьЗначение(Данные, "shipment.time.to", Параметры.ВремяОтгрузкиПо, Истина);
	ДобавитьЗначение(Данные, "shipment.time.breakFrom", Параметры.ВремяОтгрузкиОбедС, Истина);
	ДобавитьЗначение(Данные, "shipment.time.breakTo", Параметры.ВремяОтгрузкиОбедПо, Истина);
	ДобавитьЗначение(Данные, "shipment.address.view", Параметры.ОтправительАдресПредставление, Истина);
	ДобавитьЗначение(Данные, "shipment.address.latitude", Параметры.ОтправительАдресШирота);
	ДобавитьЗначение(Данные, "shipment.address.longitude", Параметры.ОтправительАдресДолгота);
	ДобавитьЗначение(Данные, "shipment.address.value", ПоместитьВХранилищеЗначения(Параметры.ОтправительАдресЗначение, ТипГрузоперевозки), Истина);
	Если ЗначениеЗаполнено(Параметры.ОтправительКонтрагентСсылка) Тогда
		ДобавитьЗначение(Данные, "shipment.participant.counteragent.id", Параметры.ОтправительКонтрагентСсылка.УникальныйИдентификатор(), Ложь);
	КонецЕсли;
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.name", Параметры.ОтправительКонтрагентНаименование, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.typeId", Параметры.ОтправительКонтрагентЮрФизЛицо, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.inn", Параметры.ОтправительКонтрагентИНН, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.kpp", Параметры.ОтправительКонтрагентКПП, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.legaladdress.view", Параметры.ОтправительКонтрагентЮридическийАдресПредставление, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.legaladdress.value", ПоместитьВХранилищеЗначения(Параметры.ОтправительКонтрагентЮридическийАдресЗначение, ТипГрузоперевозки), Истина);
	Если ЗначениеЗаполнено(Параметры.ОтправительКонтактноеЛицоСсылка) Тогда
		ДобавитьЗначение(Данные, "shipment.participant.contactPerson.id", Параметры.ОтправительКонтактноеЛицоСсылка.УникальныйИдентификатор(), Ложь);
	КонецЕсли;
	ДобавитьЗначение(Данные, "shipment.participant.contactPerson.name", Параметры.ОтправительКонтактноеЛицоНаименование, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.contactPerson.phone.number", Параметры.ОтправительКонтактноеЛицоТелефонПредставление, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.contactPerson.phone.value", ПоместитьВХранилищеЗначения(Параметры.ОтправительКонтактноеЛицоТелефонЗначение, ТипГрузоперевозки), Истина);
	Если ЗначениеЗаполнено(Параметры.ОтправительКонтактноеЛицоТелефонДополнительныйПредставление) Тогда
		ДобавитьЗначение(Данные, "shipment.participant.contactPerson.phoneAdditional.number", Параметры.ОтправительКонтактноеЛицоТелефонДополнительныйПредставление, Ложь);
		ДобавитьЗначение(Данные, "shipment.participant.contactPerson.phoneAdditional.value", ПоместитьВХранилищеЗначения(Параметры.ОтправительКонтактноеЛицоТелефонДополнительныйЗначение, ТипГрузоперевозки), Ложь);
	КонецЕсли;
	ДобавитьЗначение(Данные, "shipment.participant.contactPerson.email", Параметры.ОтправительКонтактноеЛицоEmail, Ложь);
	ДобавитьЗначение(Данные, "delivery.tipeId", Параметры.СпособДоставки, Истина);
	ДобавитьЗначение(Данные, "delivery.pointId", Параметры.ПунктВыдачиГрузаИдентификатор, Истина);
	ДобавитьЗначение(Данные, "delivery.cityId", Параметры.ПолучательНаселенныйПунктИдентификатор, Истина);
	ДобавитьЗначение(Данные, "delivery.date", Параметры.ДатаДоставки, Истина);
	ДобавитьЗначение(Данные, "delivery.time.from", Параметры.ВремяДоставкиС, Истина);
	ДобавитьЗначение(Данные, "delivery.time.to", Параметры.ВремяДоставкиПо, Истина);
	ДобавитьЗначение(Данные, "delivery.time.breakFrom", Параметры.ВремяДоставкиОбедС, Истина);
	ДобавитьЗначение(Данные, "delivery.time.breakTo", Параметры.ВремяДоставкиОбедПо, Истина);
	ДобавитьЗначение(Данные, "delivery.address.view", Параметры.ПолучательАдресПредставление, Истина);
	ДобавитьЗначение(Данные, "delivery.address.latitude", Параметры.ПолучательАдресШирота);
	ДобавитьЗначение(Данные, "delivery.address.longitude", Параметры.ПолучательАдресДолгота);
	ДобавитьЗначение(Данные, "delivery.address.value", ПоместитьВХранилищеЗначения(Параметры.ПолучательАдресЗначение, ТипГрузоперевозки), Истина);
	Если ЗначениеЗаполнено(Параметры.ПолучательКонтрагентСсылка) Тогда
		ДобавитьЗначение(Данные, "delivery.participant.counteragent.id", Параметры.ПолучательКонтрагентСсылка.УникальныйИдентификатор(), Ложь);
	КонецЕсли;
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.name", Параметры.ПолучательКонтрагентНаименование, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.inn", Параметры.ПолучательКонтрагентИНН, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.kpp", Параметры.ПолучательКонтрагентКПП, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.typeId", Параметры.ПолучательКонтрагентЮрФизЛицо, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.legaladdress.view", Параметры.ПолучательКонтрагентЮридическийАдресПредставление, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.legaladdress.value", ПоместитьВХранилищеЗначения(Параметры.ПолучательКонтрагентЮридическийАдресЗначение, ТипГрузоперевозки), Истина);
	Если ЗначениеЗаполнено(Параметры.ПолучательКонтактноеЛицоСсылка) Тогда
		ДобавитьЗначение(Данные, "delivery.participant.contactPerson.id", Параметры.ПолучательКонтактноеЛицоСсылка.УникальныйИдентификатор(), Ложь);
	КонецЕсли;
	ДобавитьЗначение(Данные, "delivery.participant.contactPerson.name", Параметры.ПолучательКонтактноеЛицоНаименование, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.contactPerson.phone.number", Параметры.ПолучательКонтактноеЛицоТелефонПредставление, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.contactPerson.phone.value", ПоместитьВХранилищеЗначения(Параметры.ПолучательКонтактноеЛицоТелефонЗначение, ТипГрузоперевозки), Истина);
	Если ЗначениеЗаполнено(Параметры.ПолучательКонтактноеЛицоТелефонДополнительныйПредставление) Тогда
		ДобавитьЗначение(Данные, "delivery.participant.contactPerson.phoneAdditional.number", Параметры.ПолучательКонтактноеЛицоТелефонДополнительныйПредставление, Ложь);
		ДобавитьЗначение(Данные, "delivery.participant.contactPerson.phoneAdditional.value", ПоместитьВХранилищеЗначения(Параметры.ПолучательКонтактноеЛицоТелефонДополнительныйЗначение, ТипГрузоперевозки), Ложь);
	КонецЕсли;
	ДобавитьЗначение(Данные, "delivery.participant.contactPerson.email", Параметры.ПолучательКонтактноеЛицоEmail, Ложь);
	ДобавитьЗначение(Данные, "payment.typeId", Параметры.ФормаОплаты, Истина);
	ДобавитьЗначение(Данные, "payment.payerRoleId", Параметры.ПлательщикРоль, Истина);
	
	Если Параметры.ПлательщикРоль = 3 Тогда
		ДобавитьЗначение(Данные, "payment.address.value", ПоместитьВХранилищеЗначения(Параметры.ПлательщикАдресЗначение, ТипГрузоперевозки), Истина);
		ДобавитьЗначение(Данные, "payment.address.view", Параметры.ПлательщикАдресПредставление, Истина);
		ДобавитьЗначение(Данные, "payment.participant.counteragent.name", Параметры.ПлательщикКонтрагентНаименование, Истина);
		ДобавитьЗначение(Данные, "payment.participant.counteragent.typeId", Параметры.ПлательщикКонтрагентЮрФизЛицо, Истина);
		ДобавитьЗначение(Данные, "payment.participant.counteragent.inn", Параметры.ПлательщикКонтрагентИНН, Истина);
		ДобавитьЗначение(Данные, "payment.participant.counteragent.kpp", Параметры.ПлательщикКонтрагентКПП, Истина);
		ДобавитьЗначение(Данные, "payment.participant.counteragent.legaladdress.view", Параметры.ПлательщикКонтрагентЮридическийАдресПредставление, Истина);
		ДобавитьЗначение(Данные, "payment.participant.counteragent.legaladdress.value", ПоместитьВХранилищеЗначения(Параметры.ПлательщикКонтрагентЮридическийАдресЗначение, ТипГрузоперевозки), Истина);
		Если ЗначениеЗаполнено(Параметры.ПлательщикКонтактноеЛицоСсылка) Тогда
			ДобавитьЗначение(Данные, "payment.participant.contactPerson.id", Параметры.ПлательщикКонтактноеЛицоСсылка.УникальныйИдентификатор(), Ложь);
		КонецЕсли;
		ДобавитьЗначение(Данные, "payment.participant.contactPerson.name", Параметры.ПлательщикКонтактноеЛицоНаименование, Истина);
		ДобавитьЗначение(Данные, "payment.participant.contactPerson.phone.number", Параметры.ПлательщикКонтактноеЛицоТелефонПредставление, Истина);
		ДобавитьЗначение(Данные, "payment.participant.contactPerson.phone.value", ПоместитьВХранилищеЗначения(Параметры.ПлательщикКонтактноеЛицоТелефонЗначение, ТипГрузоперевозки), Истина);
		Если ЗначениеЗаполнено(Параметры.ПлательщикКонтактноеЛицоТелефонДополнительныйПредставление) Тогда
			ДобавитьЗначение(Данные, "payment.participant.contactPerson.phoneAdditional.number", Параметры.ПлательщикКонтактноеЛицоТелефонДополнительныйПредставление, Ложь);
			ДобавитьЗначение(Данные, "payment.participant.contactPerson.phoneAdditional.value", ПоместитьВХранилищеЗначения(Параметры.ПлательщикКонтактноеЛицоТелефонДополнительныйЗначение, ТипГрузоперевозки), Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если СервисДоставкиКлиентСервер.ЭтоЯндексДоставка(ТипГрузоперевозки) Или ЭтоСДЭК Тогда
		ДобавитьЗначение(Данные, "paymentOnDelivery.method", Параметры.НаложенныйПлатежВидОплаты, Истина);
		ДобавитьЗначение(Данные, "paymentOnDelivery.sum", Параметры.СуммаНаложенногоПлатежа, Истина);
	КонецЕсли;
	
	ДобавитьЗначение(Данные, "cargo.quantity", Параметры.ГрузКоличествоГрузовыхМест, Истина);
	ДобавитьЗначение(Данные, "cargo.weight", Параметры.ГрузВес, Истина);
	ДобавитьЗначение(Данные, "cargo.volume", Параметры.ГрузОбъем, Истина);
	ДобавитьЗначение(Данные, "cargo.maxHeight", Параметры.ГрузМаксимальнаяВысота, Истина);
	ДобавитьЗначение(Данные, "cargo.maxLength", Параметры.ГрузМаксимальнаяДлина, Истина);
	ДобавитьЗначение(Данные, "cargo.maxWidth", Параметры.ГрузМаксимальнаяШирина, Истина);
	ДобавитьЗначение(Данные, "cargo.maxWeight", Параметры.ГрузМаксимальныйВес, Истина);
	ДобавитьЗначение(Данные, "cargo.description", Параметры.ГрузСодержимое, Истина);
	ДобавитьЗначение(Данные, "cargo.value", Параметры.ГрузСтоимость, Истина);
	ДобавитьЗначение(Данные, "cargo.oversizedWeight", Параметры.ГрузНегабаритныйВес, Истина);
	ДобавитьЗначение(Данные, "cargo.oversizedVolume", Параметры.ГрузНегабаритныйОбъем, Истина);
	ДобавитьЗначение(Данные, "cargo.oversizedQuantity", Параметры.ГрузКоличествоНегабаритныхГрузовыхМест, Истина);
	ДобавитьЗначение(Данные, "additionalInfo", Параметры.ДополнительнаяИнформация);
	
	МассивУслуг = Новый Массив;
	Для Каждого ТекущаяУслуга Из ПараметрыЗапроса.Услуги Цикл
		
		НоваяУслуга = Новый Структура;
		НоваяУслуга.Вставить("id", ТекущаяУслуга.Идентификатор);
		НоваяУслуга.Вставить("isSelected", ТекущаяУслуга.Использовать);
		
		МассивСвойств = Новый Массив();
		Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
			НовоеСвойство = Новый Структура();
			ДобавитьЗначение(НовоеСвойство, "id", ТекущееСвойство.Идентификатор, Истина);
			ДобавитьЗначение(НовоеСвойство, "value", ТекущееСвойство.Значение, Истина);
			МассивСвойств.Добавить(НовоеСвойство);
		КонецЦикла;
		
		НоваяУслуга.Вставить("properties", МассивСвойств);
		
		МассивУслуг.Добавить(НоваяУслуга);
		
	КонецЦикла;
	ДобавитьЗначение(Данные, "services", МассивУслуг, Истина);
	
	Если ЭтоСДЭК Тогда
		ГрузовыеМестаВГХ = Параметры.ГрузовыеМестаВГХ;
		МассивГрузовыхМест = Новый Массив;
		Для Каждого ОписаниеГрузовогоМеста Из ГрузовыеМестаВГХ Цикл
			
			НоваяПозиция = Новый Структура();
			
			ДобавитьЗначение(НоваяПозиция, "id", ОписаниеГрузовогоМеста.ИдентификаторГрузовогоМеста, Истина);
			ДобавитьЗначение(НоваяПозиция, "title", ОписаниеГрузовогоМеста.Описание, Истина);
			ДобавитьЗначение(НоваяПозиция, "weight", ОписаниеГрузовогоМеста.Вес, Истина);
			ДобавитьЗначение(НоваяПозиция, "volume", ОписаниеГрузовогоМеста.Объем, Истина);
			ДобавитьЗначение(НоваяПозиция, "length", ОписаниеГрузовогоМеста.Длина, Истина);
			ДобавитьЗначение(НоваяПозиция, "width", ОписаниеГрузовогоМеста.Ширина, Истина);
			ДобавитьЗначение(НоваяПозиция, "height", ОписаниеГрузовогоМеста.Высота, Истина);
			ДобавитьЗначение(НоваяПозиция, "cost", ОписаниеГрузовогоМеста.Стоимость, Истина);
			
			МассивГрузовыхМест.Добавить(НоваяПозиция);
			
		КонецЦикла;
		ДобавитьЗначение(Данные, "packages", МассивГрузовыхМест);
	КонецЕсли;
	
	МассивПозиций = Новый Массив;
	Для Каждого ТекущаяПозиция Из ПараметрыЗапроса.Товары Цикл
		
		НоваяПозиция = Новый Структура;
		
		ДобавитьЗначение(НоваяПозиция, "title", ТекущаяПозиция.Наименование, Истина);
		ДобавитьЗначение(НоваяПозиция, "unit", ТекущаяПозиция.ЕдиницаИзмерения, Истина);
		ДобавитьЗначение(НоваяПозиция, "quantity", ТекущаяПозиция.Количество, Истина);
		ДобавитьЗначение(НоваяПозиция, "price", ТекущаяПозиция.Цена, Истина);
		Если ЭтоСДЭК Тогда
			ДобавитьЗначение(НоваяПозиция, "priceWithVat", ТекущаяПозиция.Сумма / ТекущаяПозиция.Количество, Истина);
			ДобавитьЗначение(НоваяПозиция, "priceVat", ТекущаяПозиция.СуммаНДС / ТекущаяПозиция.Количество, Истина);
		КонецЕсли;
		ДобавитьЗначение(НоваяПозиция, "cost", ТекущаяПозиция.Сумма, Истина);
		ДобавитьЗначение(НоваяПозиция, "vatCode", ТекущаяПозиция.СтавкаНДС, Истина, "");
		ДобавитьЗначение(НоваяПозиция, "vat", ТекущаяПозиция.СуммаНДС, Истина);
		Если ЭтоСДЭК Тогда
			ДобавитьЗначение(НоваяПозиция, "weight", ТекущаяПозиция.ВесЕдиницыТовара, Истина);
		Иначе
			ДобавитьЗначение(НоваяПозиция, "weight", ТекущаяПозиция.Вес, Истина);
		КонецЕсли;
		ДобавитьЗначение(НоваяПозиция, "volume", ТекущаяПозиция.Объем, Истина, 0);
		ДобавитьЗначение(НоваяПозиция, "length", ТекущаяПозиция.Длина, Истина);
		ДобавитьЗначение(НоваяПозиция, "width", ТекущаяПозиция.Ширина, Истина);
		ДобавитьЗначение(НоваяПозиция, "height", ТекущаяПозиция.Высота, Истина);
		ДобавитьЗначение(НоваяПозиция, "innCargoOwner", ТекущаяПозиция.ИННВладельцаГруза, Ложь);
		ДобавитьЗначение(НоваяПозиция, "article", ТекущаяПозиция.Артикул, Ложь);
		ДобавитьЗначение(НоваяПозиция, "itemtype", ТекущаяПозиция.ТипНоменклатуры, Истина, 0);
		ДобавитьЗначение(НоваяПозиция, "rowId", ТекущаяПозиция.ИдентификаторСтроки, Истина);
		ДобавитьЗначение(НоваяПозиция, "baseDocumentId", ТекущаяПозиция.ИдентификаторДокументаОснования, Истина);
		ДобавитьЗначение(НоваяПозиция, "packageId", ТекущаяПозиция.ИдентификаторГрузовогоМеста, Истина);
		
		МассивПозиций.Добавить(НоваяПозиция);
		
	КонецЦикла;
	ДобавитьЗначение(Данные, "items", МассивПозиций);
	
	Возврат Данные;
	
КонецФункции

Функция ЗаполнитьДанныеДляСервисаСозданиеИзменениеЗаказаНаДоставкуКурьерика(ПараметрыЗапроса)
		
	Данные = Новый Структура;
	
	Параметры = Новый Структура();
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(ПараметрыЗапроса, Параметры);
	
	ТипГрузоперевозки = СервисДоставкиКлиентСервер.ЧисловойИдентификаторГрузоперевозчика(Параметры.ТипГрузоперевозки);
	
	ДобавитьЗначение(Данные, "id", Строка(Параметры.ИдентификаторЗаказа), Истина);
	ДокументыОснованияИдентификаторы = ?(ТипЗнч(Параметры.ДокументыОснованияИдентификаторы) = Тип("СписокЗначений"),
		Параметры.ДокументыОснованияИдентификаторы.ВыгрузитьЗначения(),
		Параметры.ДокументыОснованияИдентификаторы);
	ДобавитьЗначение(Данные, "baseDocuments", ДокументыОснованияИдентификаторы, Истина);
	ДобавитьЗначение(Данные, "transportationTypeId", ТипГрузоперевозки, Истина);
	ДобавитьЗначение(Данные, "carrierId", Параметры.ГрузоперевозчикИдентификатор, Истина);
	ДобавитьЗначение(Данные, "currencyId", Параметры.ВалютаКод, Истина);
	ДобавитьЗначение(Данные, "totalSum", Параметры.СуммаДокумента, Истина);
	ДобавитьЗначение(Данные, "statusId", ПолучитьЗначение(Параметры, "СостояниеИдентификатор", "Число"));

	ДобавитьЗначение(Данные, "shipment.date", Параметры.ДатаОтгрузки, Истина);
	ДобавитьЗначение(Данные, "shipment.timeOptionId", Параметры.ВариантВремениОтгрузки, Истина);

	ДобавитьЗначение(Данные, "delivery.pickuppointId", Параметры.ПунктВыдачиКлиентаИдентификатор, Истина);
	ДобавитьЗначение(Данные, "delivery.date", Параметры.ДатаДоставки, Истина);
	ДобавитьЗначение(Данные, "delivery.time.From", Параметры.ВремяДоставкиС, Истина);
	ДобавитьЗначение(Данные, "delivery.time.To", Параметры.ВремяДоставкиПо, Истина);
	ДобавитьЗначение(Данные, "delivery.time.breakFrom", Параметры.ВремяДоставкиОбедС, Истина);
	ДобавитьЗначение(Данные, "delivery.time.breakTo", Параметры.ВремяДоставкиОбедПо, Истина);
	ДобавитьЗначение(Данные, "delivery.time.zone", Параметры.ВремяДоставкиЗона, Истина);
	ДобавитьЗначение(Данные, "delivery.address.view", ПолучитьЗначение(Параметры, "ПолучательАдресПредставление","Строка", ""), Истина);
	ДобавитьЗначение(Данные, "delivery.address.latitude", ПолучитьЗначение(Параметры, "ПолучательАдресШирота", "Число",0));
	ДобавитьЗначение(Данные, "delivery.address.longitude", ПолучитьЗначение(Параметры, "ПолучательАдресДолгота", "Число", 0));
	ДобавитьЗначение(Данные, "delivery.address.value", Новый ХранилищеЗначения(ПолучитьЗначение(Параметры, "ПолучательАдресЗначение", "Строка",""), Новый СжатиеДанных(9)), Истина);
	Если ЗначениеЗаполнено(Параметры.ПолучательКонтрагентСсылка) Тогда
		ДобавитьЗначение(Данные, "delivery.participant.counteragent.id", Параметры.ПолучательКонтрагентСсылка.УникальныйИдентификатор(), Ложь);
	КонецЕсли;
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.name", ПолучитьЗначение(Параметры, "ПолучательКонтрагентНаименование", "Строка", ""), Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.inn", ПолучитьЗначение(Параметры, "ПолучательКонтрагентИНН", "Строка", ""), Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.kpp", ПолучитьЗначение(Параметры, "ПолучательКонтрагентКПП", "Строка", ""), Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.typeId", ПолучитьЗначение(Параметры, "ПолучательКонтрагентЮрФизЛицо", "Число", 1), Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.legaladdress.view", ПолучитьЗначение(Параметры, "ПолучательКонтрагентЮридическийАдресПредставление", "Строка", ""), Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.legaladdress.value", Новый ХранилищеЗначения(ПолучитьЗначение(Параметры, "ПолучательКонтрагентЮридическийАдресЗначение", "Строка", ""), Новый СжатиеДанных(9)), Истина);
	Если ЗначениеЗаполнено(ПолучитьЗначение(Параметры, "ПолучательКонтактноеЛицоСсылка", , Неопределено)) Тогда
		ДобавитьЗначение(Данные, "delivery.participant.contactPerson.id", Параметры.ПолучательКонтактноеЛицоСсылка.УникальныйИдентификатор(), Ложь);
	КонецЕсли;
	ДобавитьЗначение(Данные, "delivery.participant.contactPerson.name", ПолучитьЗначение(Параметры, "ПолучательКонтактноеЛицоНаименование", "Строка", ""), Истина);
	ДобавитьЗначение(Данные, "delivery.participant.contactPerson.phone.number", ПолучитьЗначение(Параметры, "ПолучательКонтактноеЛицоТелефонПредставление", "Строка", ""), Истина);
	ДобавитьЗначение(Данные, "delivery.participant.contactPerson.phone.value", Новый ХранилищеЗначения(ПолучитьЗначение(Параметры, "ПолучательКонтактноеЛицоТелефонЗначение", "Строка", ""), Новый СжатиеДанных(9)), Истина);
	Если ЗначениеЗаполнено(ПолучитьЗначение(Параметры, "ПолучательКонтактноеЛицоТелефонДополнительныйПредставление", "Строка", "")) Тогда
		ДобавитьЗначение(Данные, "delivery.participant.contactPerson.phoneAdditional.number", Параметры.ПолучательКонтактноеЛицоТелефонДополнительныйПредставление, Ложь);
		ДобавитьЗначение(Данные, "delivery.participant.contactPerson.phoneAdditional.value", Новый ХранилищеЗначения(Параметры.ПолучательКонтактноеЛицоТелефонДополнительныйЗначение, Новый СжатиеДанных(9)), Ложь);
	КонецЕсли;
	ДобавитьЗначение(Данные, "delivery.participant.contactPerson.email", ПолучитьЗначение(Параметры, "ПолучательКонтактноеЛицоEmail", "Строка", ""), Ложь);
	
	ДобавитьЗначение(Данные, "payment.typeId", Параметры.ФормаОплаты, Истина);
	ДобавитьЗначение(Данные, "payment.payerRoleId", 2, Истина);
	
	ДобавитьЗначение(Данные, "paymentOnDelivery.isPaid", Параметры.Оплачен, Истина);
	ДобавитьЗначение(Данные, "paymentOnDelivery.method", Параметры.НаложенныйПлатежВидОплаты, Истина);
	ДобавитьЗначение(Данные, "paymentOnDelivery.sum", Параметры.СуммаНаложенногоПлатежа, Истина);
	ДобавитьЗначение(Данные, "paymentOnDelivery.methodAdditional", Параметры.НаложенныйПлатежВидОплатыДополнительный, Истина);
	ДобавитьЗначение(Данные, "paymentOnDelivery.sumAdditional", Параметры.СуммаНаложенногоПлатежаДополнительный, Истина);
	
	ДобавитьЗначение(Данные, "additionalInfo", Параметры.ДополнительнаяИнформация);
	
	МассивПозиций = Новый Массив();
	
	Для Каждого ТекущаяПозиция Из ПараметрыЗапроса.Товары Цикл
		
		НоваяПозиция = Новый Структура();
		
		ДобавитьЗначение(НоваяПозиция, "title", ТекущаяПозиция.Наименование, Истина);
		ДобавитьЗначение(НоваяПозиция, "unit", ТекущаяПозиция.ЕдиницаИзмерения, Истина);
		ДобавитьЗначение(НоваяПозиция, "quantity", ТекущаяПозиция.Количество, Истина);
		ДобавитьЗначение(НоваяПозиция, "price", ТекущаяПозиция.Цена, Истина);
		ДобавитьЗначение(НоваяПозиция, "cost", ТекущаяПозиция.Сумма, Истина);
		ДобавитьЗначение(НоваяПозиция, "vatCode", ТекущаяПозиция.СтавкаНДС, Истина);
		ДобавитьЗначение(НоваяПозиция, "vat", ТекущаяПозиция.СуммаНДС, Истина);
		ДобавитьЗначение(НоваяПозиция, "weight", ТекущаяПозиция.Вес, Истина);
		ДобавитьЗначение(НоваяПозиция, "length", ТекущаяПозиция.Длина, Истина);
		ДобавитьЗначение(НоваяПозиция, "width", ТекущаяПозиция.Ширина, Истина);
		ДобавитьЗначение(НоваяПозиция, "height", ТекущаяПозиция.Высота, Истина);
		ДобавитьЗначение(НоваяПозиция, "innCargoOwner", ТекущаяПозиция.ИННВладельцаГруза, Ложь);
		ДобавитьЗначение(НоваяПозиция, "article", ТекущаяПозиция.Артикул, Ложь);
		ДобавитьЗначение(НоваяПозиция, "itemtype", ТекущаяПозиция.ТипНоменклатуры, Истина);
		ДобавитьЗначение(НоваяПозиция, "rowId", ТекущаяПозиция.ИдентификаторСтроки, Истина);
		ДобавитьЗначение(НоваяПозиция, "baseDocumentId", ТекущаяПозиция.ИдентификаторДокументаОснования, Истина);
		
		МассивПозиций.Добавить(НоваяПозиция);
		
	КонецЦикла;
	
	ДобавитьЗначение(Данные, "items", МассивПозиций);
	
	ДобавитьЗначение(Данные, "sendToCarrier", ПолучитьЗначение(Параметры, "ОтправитьГрузоперевозчику", "Булево", Истина));
	
	Возврат Данные;
	
КонецФункции

Функция ЗапросСервисаСозданиеМультизаказаНаДоставку(ПараметрыЗапроса, Отказ = Неопределено)
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса);
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Создать мультизаказ на доставку'");
	ЗапросСервиса.Адрес = "delivery/multiorder";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-createmultiordr.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/vnd-1cbn-deliv-result.v1+json");
	
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	// Тело запроса
	Данные = Новый Структура;
	
	Параметры = Новый Структура();
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(ПараметрыЗапроса, Параметры);
	
	ТипГрузоперевозки = СервисДоставкиКлиентСервер.ЧисловойИдентификаторГрузоперевозчика(Параметры.ТипГрузоперевозки);
	
	ДобавитьЗначение(Данные, "id", Строка(Параметры.ИдентификаторЗаказа), Истина);
	ДобавитьЗначение(Данные, "transportationTypeId", ТипГрузоперевозки, Истина);
	ДобавитьЗначение(Данные, "carrierId", Параметры.ГрузоперевозчикИдентификатор, Истина);
	ДобавитьЗначение(Данные, "tariffId", Параметры.ТарифИдентификатор, Истина);
	ДобавитьЗначение(Данные, "currencyId", Параметры.ВалютаКод, Истина);
	
	ДобавитьЗначение(Данные, "shipment.tipeId", Параметры.СпособОтгрузки, Истина);
	ДобавитьЗначение(Данные, "shipment.pointId", Параметры.ПунктПриемаГрузаИдентификатор, Истина);
	ДобавитьЗначение(Данные, "shipment.date", Параметры.ДатаОтгрузки, Истина);
	ДобавитьЗначение(Данные, "shipment.timeOptionId", Параметры.ВариантВремениОтгрузки, Истина);
	ДобавитьЗначение(Данные, "shipment.time.from", Параметры.ВремяОтгрузкиС, Истина);
	ДобавитьЗначение(Данные, "shipment.time.to", Параметры.ВремяОтгрузкиПо, Истина);
	ДобавитьЗначение(Данные, "shipment.time.breakFrom", Параметры.ВремяОтгрузкиОбедС, Истина);
	ДобавитьЗначение(Данные, "shipment.time.breakTo", Параметры.ВремяОтгрузкиОбедПо, Истина);
	ДобавитьЗначение(Данные, "shipment.address.view", Параметры.ОтправительАдресПредставление, Истина);
	ДобавитьЗначение(Данные, "shipment.address.latitude", Параметры.ОтправительАдресШирота);
	ДобавитьЗначение(Данные, "shipment.address.longitude", Параметры.ОтправительАдресДолгота);
	ДобавитьЗначение(Данные, "shipment.address.value", Новый ХранилищеЗначения(Параметры.ОтправительАдресЗначение, Новый СжатиеДанных(9)), Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.name", Параметры.ОтправительКонтрагентНаименование, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.typeId", Параметры.ОтправительКонтрагентЮрФизЛицо, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.inn", Параметры.ОтправительКонтрагентИНН, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.kpp", Параметры.ОтправительКонтрагентКПП, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.legaladdress.view", Параметры.ОтправительКонтрагентЮридическийАдресПредставление, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.legaladdress.value", Новый ХранилищеЗначения(Параметры.ОтправительКонтрагентЮридическийАдресЗначение, Новый СжатиеДанных(9)), Истина);
	
	Если ЗначениеЗаполнено(Параметры.ОтправительКонтактноеЛицоСсылка) Тогда
		ДобавитьЗначение(Данные, "shipment.participant.contactPerson.id", Параметры.ОтправительКонтактноеЛицоСсылка.УникальныйИдентификатор(), Ложь);
	ИначеЕсли ЗначениеЗаполнено(Параметры.ОтправительКонтактноеЛицоИдентификатор) Тогда
		ДобавитьЗначение(Данные, "shipment.participant.contactPerson.id", Параметры.ОтправительКонтактноеЛицоИдентификатор, Ложь);
	КонецЕсли;
	
	ДобавитьЗначение(Данные, "shipment.participant.contactPerson.name", Параметры.ОтправительКонтактноеЛицоНаименование, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.contactPerson.phone.number", Параметры.ОтправительКонтактноеЛицоТелефонПредставление, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.contactPerson.phone.value", Новый ХранилищеЗначения(Параметры.ОтправительКонтактноеЛицоТелефонЗначение, Новый СжатиеДанных(9)), Истина);
	Если ЗначениеЗаполнено(Параметры.ОтправительКонтактноеЛицоТелефонДополнительныйПредставление) Тогда
		ДобавитьЗначение(Данные, "shipment.participant.contactPerson.phoneAdditional.number", Параметры.ОтправительКонтактноеЛицоТелефонДополнительныйПредставление, Ложь);
		ДобавитьЗначение(Данные, "shipment.participant.contactPerson.phoneAdditional.value", Новый ХранилищеЗначения(Параметры.ОтправительКонтактноеЛицоТелефонДополнительныйЗначение, Новый СжатиеДанных(9)), Ложь);
	КонецЕсли;

	ДобавитьЗначение(Данные, "additionalInfo", Параметры.ДополнительнаяИнформация);
	
	МассивУслуг = Новый Массив();
	
	Для Каждого ТекущаяУслуга Из ПараметрыЗапроса.Услуги Цикл
		
		НоваяУслуга = Новый Структура();
		НоваяУслуга.Вставить("id", ТекущаяУслуга.Идентификатор);
		
		МассивСвойств = Новый Массив();
		Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
			НовоеСвойство = Новый Структура();
			ДобавитьЗначение(НовоеСвойство, "id", ТекущееСвойство.Идентификатор, Истина);
			ДобавитьЗначение(НовоеСвойство, "value", ТекущееСвойство.Значение, Истина);
			МассивСвойств.Добавить(НовоеСвойство);
		КонецЦикла;
		
		НоваяУслуга.Вставить("properties", МассивСвойств);
		
		МассивУслуг.Добавить(НоваяУслуга);
		
	КонецЦикла;
	
	ДобавитьЗначение(Данные, "services", МассивУслуг, Истина);
	
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаОформлениеМультизаказаНаДоставку(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса);
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Оформление мультизаказа на доставку'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"delivery/multiorders/%1/carrier",
		ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-result.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаДобавлениеЗаказаНаДоставкуВМультизаказ(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса,
		СервисДоставкиКлиентСервер.ИмяПроцедурыДобавитьЗаказНаДоставкуВМультизаказ());
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Проверка заказа на доставку'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"delivery/multiorders/%1/addOrder",
		ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "PUT";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	Если ПараметрыЗапроса.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка() Тогда
		ЗапросСервиса.Заголовки.Вставить("Accept", ФорматРесурсаОбработкаЗаказНаДоставку_Версия2());
	КонецЕсли;
	
	// Параметры запроса
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторЗаказа) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "orderId", Строка(ПараметрыЗапроса.ИдентификаторЗаказа));
	КонецЕсли;

	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаОтменаЗаказаНаДоставку(ПараметрыЗапроса, Отказ = Неопределено)
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьЗаказНаДоставку());
	
	Если ПараметрыЗапроса.Свойство("ОтменитьЗаказПлатно") И ЗначениеЗаполнено(ПараметрыЗапроса.ОтменитьЗаказПлатно) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "isPaid", ПараметрыЗапроса.ОтменитьЗаказПлатно);
	КонецЕсли;
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаПолучениеМультизаказаНаДоставку(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса);
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение мультизаказа на доставку'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"delivery/multiorders/%1",
		ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-multiordr.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаОбновлениеМультизаказаНаДоставку(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса);
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Обновление данных мультизаказа на доставку'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"delivery/multiorders/%1/carrier/update",
		ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-delivery-multiorders-carrier-upd-result.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаОтменаМультизаказаНаДоставку(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса);
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Отмена мультизаказа на доставку'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"delivery/multiorders/%1/cancel",
		ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-result.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	// Параметры запроса
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ОтменитьЗаказПлатно) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "isPaid", ПараметрыЗапроса.ОтменитьЗаказПлатно);
	КонецЕсли;

	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеСпискаЗаказовНаДоставкуСОтборами(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказыНаДоставку());
	
	ТипГрузоперевозки = ПараметрыЗапроса.ТипГрузоперевозки;
	
	Если ПолучитьЗначение(ПараметрыЗапроса, "Страница", "Число", 0) <> 0 Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "page", ПараметрыЗапроса.Страница);
	КонецЕсли;
	
	Если ПолучитьЗначение(ПараметрыЗапроса, "РазмерСтраницы", "Число", 0) <> 0 Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "size", ПараметрыЗапроса.РазмерСтраницы);
	КонецЕсли;

	Если ПараметрыЗапроса.Свойство("Сортировка") И ЗначениеЗаполнено(ПараметрыЗапроса.Сортировка) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "sortBy", ЗначениеСортировкиПоИдентификатору(ПараметрыЗапроса.Сортировка));
	КонецЕсли;
	
	Данные = Новый Структура;
	
	ДобавитьЗначение(Данные,"filterMultiOrders", ПараметрыЗапроса.ФильтрПоМультизаказам);
	ДобавитьЗначение(Данные,"pickuppointId", ПараметрыЗапроса.ПунктВыдачиКлиента);
	ДобавитьЗначение(Данные,"carrier", ПараметрыЗапроса.Грузоперевозчик);
	ДобавитьЗначение(Данные,"paymentStatus", ПараметрыЗапроса.Оплата);
	ДобавитьЗначение(Данные,"dateCreateFrom", ПараметрыЗапроса.ДатаСозданияОт);
	ДобавитьЗначение(Данные,"dateCreateTo", ПараметрыЗапроса.ДатаСозданияДо);
	ДобавитьЗначение(Данные,"dateShipmentFrom", ПараметрыЗапроса.ДатаОтгрузкиОт);
	ДобавитьЗначение(Данные,"dateShipmentTo", ПараметрыЗапроса.ДатаОтгрузкиДо);
	ДобавитьЗначение(Данные,"dateDeliveryFrom", ПараметрыЗапроса.ДатаДоставкиОт);
	ДобавитьЗначение(Данные,"dateDeliveryTo", ПараметрыЗапроса.ДатаДоставкиДо);
	ДобавитьЗначение(Данные,"creationStatus", ПараметрыЗапроса.ОтборПоГотовностиЗаказов);
	ДобавитьЗначение(Данные,"dateUpdateFrom", ПолучитьЗначение(ПараметрыЗапроса, "ДатаОбновленияС", "Дата", '00010101'));
	ДобавитьЗначение(Данные,"isUpdatedFrom", ПолучитьЗначение(ПараметрыЗапроса, "ЕстьОбновлениеПослеДаты", "Дата", '00010101'));
	ДобавитьЗначение(Данные,"getInfoPartialDelivery", ПолучитьЗначение(ПараметрыЗапроса, "ВыгружатьДанныеПоЧастичнойДоставке", "Булево", Ложь));
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Роль) Тогда
		ДобавитьЗначение(Данные,"role", ПараметрыЗапроса.Роль);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Состояние) Тогда
		Состояния = Новый Массив();
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.Состояние Цикл
			Состояния.Добавить(ЭлементКоллекции.Идентификатор);
		КонецЦикла;
		ДобавитьЗначение(Данные,"statuses", Состояния);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.НомерЗаказа) Тогда
		ДобавитьЗначение(Данные,"number", ПараметрыЗапроса.НомерЗаказа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ДокументОснованиеИдентификатор) Тогда
		ДобавитьЗначение(Данные,"baseDocumentId", ПараметрыЗапроса.ДокументОснованиеИдентификатор, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыЗаказов) Тогда
		ДобавитьЗначение(Данные,"ordersId", Новый Массив, Истина);
		Для Каждого ИдентификаторЗаказа Из ПараметрыЗапроса.ИдентификаторыЗаказов Цикл
			Данные.ordersId.Добавить(Строка(ИдентификаторЗаказа));
		КонецЦикла;
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыЗапроса.Отправитель) Тогда
		Отправители = Новый Массив();
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.Отправитель Цикл
			Отправитель = Новый Структура;
			Отправитель.Вставить("inn", ЭлементКоллекции.ИНН);
			Отправитель.Вставить("kpp",  ЭлементКоллекции.КПП);
			Отправитель.Вставить("type",  ЭлементКоллекции.ЮрФизЛицо);
			Отправитель.Вставить("name",  ЭлементКоллекции.Наименование);
			Отправители.Добавить(Отправитель);
		КонецЦикла;
		ДобавитьЗначение(Данные,"sender", Отправители);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Получатель) Тогда
		Получатели = Новый Массив();
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.Получатель Цикл
			Получатель = Новый Структура;
			Получатель.Вставить("inn", ЭлементКоллекции.ИНН);
			Получатель.Вставить("kpp",  ЭлементКоллекции.КПП);
			Получатель.Вставить("type",  ЭлементКоллекции.ЮрФизЛицо);
			Получатель.Вставить("name",  ЭлементКоллекции.Наименование);
			Получатели.Добавить(Получатель);
		КонецЦикла;
		ДобавитьЗначение(Данные,"receiver", Получатели);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Откуда) Тогда
		АдресаОткуда = Новый Массив();
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.Откуда Цикл
			АдресОткуда = Новый Структура;
			АдресОткуда.Вставить("id", ЭлементКоллекции.КодФИАС);
			АдресаОткуда.Добавить(АдресОткуда);
		КонецЦикла;
		ДобавитьЗначение(Данные,"shipmentPoint", АдресаОткуда);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Куда) Тогда
		АдресаКуда = Новый Массив();
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.Куда Цикл
			АдресКуда = Новый Структура;
			АдресКуда.Вставить("id", ЭлементКоллекции.КодФИАС);
			АдресаКуда.Добавить(АдресКуда);
		КонецЦикла;
		ДобавитьЗначение(Данные,"deliveryPoint", АдресаКуда);
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыЗапроса.Курьер) Тогда
		ДобавитьЗначение(Данные,"courier", ПараметрыЗапроса.Курьер);
	КонецЕсли;

	Если СервисДоставкиКлиентСервер.ЭтоЯндексДоставка(ТипГрузоперевозки)
		Или СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
		ДобавитьЗначение(Данные,"paymentOnDeliveryIsAvailable", ПараметрыЗапроса.НаложенныйПлатеж);
		ДобавитьЗначение(Данные,"paymentOnDeliveryIsPaid", ПараметрыЗапроса.НаложенныйПлатежПолучен);
	КонецЕсли;
	
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные, Отказ, , ТипГрузоперевозки);
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеСпискаДоступныхПечатныхФорм(ПараметрыЗапроса, Отказ)
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеПечатныеФормы());
	
	Если ПараметрыЗапроса.ИдентификаторыЗаказов.Количество() > 1 Тогда
		
		Данные = Новый Структура;
		МассивИдентификаторов = Новый Массив;
		
		Для Каждого ИдентификаторЗаказа Из ПараметрыЗапроса.ИдентификаторыЗаказов Цикл
			МассивИдентификаторов.Добавить(Строка(ИдентификаторЗаказа));
		КонецЦикла;
		
		ДобавитьЗначение(Данные, "ordersIds", МассивИдентификаторов, Истина);
		
		ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные, Отказ, , ПараметрыЗапроса.ТипГрузоперевозки);

	КонецЕсли;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеФайловДоступныхПечатныхФорм(ПараметрыЗапроса, Отказ)
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьФайлыПечатныхФорм());
	
	ТипГрузоперевозки = ПараметрыЗапроса.ТипГрузоперевозки;
	
	Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
		
		Данные = Новый Структура;
		МассивПечатныхФорм = Новый Массив;
		
		Для Каждого ПечатнаяФорма Из ПараметрыЗапроса.Список Цикл
			
			ДанныеПечатнойФормы = Новый Структура;
			
			МассивДоступныхПараметров = Новый Массив;
			Для Каждого ДоступныйПараметр Из ПечатнаяФорма.ДоступныеПараметры Цикл
				ДанныеДоступногоПараметра = Новый Структура;
				ДобавитьЗначение(ДанныеДоступногоПараметра, "name", ДоступныйПараметр.Наименование, Истина);
				ДобавитьЗначение(ДанныеДоступногоПараметра, "id", ДоступныйПараметр.Идентификатор, Истина);
				МассивДоступныхПараметров.Добавить(ДанныеДоступногоПараметра);
			КонецЦикла;
			ДобавитьЗначение(ДанныеПечатнойФормы, "id", ПечатнаяФорма.ИдентификаторПечатнойФормы, Истина);
			ДобавитьЗначение(ДанныеПечатнойФормы, "parameters", МассивДоступныхПараметров, Истина);
			
			МассивПечатныхФорм.Добавить(ДанныеПечатнойФормы);
			
		КонецЦикла;
		
		ДобавитьЗначение(Данные, "printForms", МассивПечатныхФорм, Истина);
		
		ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные, Отказ, , ТипГрузоперевозки);
		
	КонецЕсли;
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаПолучениеТарифов(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы());
	
	ТипГрузоперевозки = ПараметрыЗапроса.ТипГрузоперевозки;
	
	Данные = Новый Структура;
	
	ДобавитьЗначение(Данные, "transportationTypeId", ТипГрузоперевозки, Истина);
	ДобавитьЗначение(Данные, "carrierId", ПараметрыЗапроса.ГрузоперевозчикИдентификатор, Истина);
	ДобавитьЗначение(Данные, "tariffId", ПараметрыЗапроса.ТарифИдентификатор, Истина);
	ДобавитьЗначение(Данные, "requesterRoleId", ПараметрыЗапроса.ЗаказчикРоль, Истина);
	
	ДобавитьЗначение(Данные, "shipment.date", ПараметрыЗапроса.ДатаОтгрузки, Истина);
	ДобавитьЗначение(Данные, "shipment.time.from", ПараметрыЗапроса.ВремяОтгрузкиС, Истина);
	ДобавитьЗначение(Данные, "shipment.time.to", ПараметрыЗапроса.ВремяОтгрузкиПо, Истина);
	ДобавитьЗначение(Данные, "shipment.time.breakFrom", ПараметрыЗапроса.ВремяОтгрузкиОбедС, Истина);
	ДобавитьЗначение(Данные, "shipment.time.breakTo", ПараметрыЗапроса.ВремяОтгрузкиОбедПо, Истина);
	ДобавитьЗначение(Данные, "shipment.terminal.id", ПараметрыЗапроса.ПунктПриемаГрузаИдентификатор, Истина);
	ДобавитьЗначение(Данные, "shipment.terminal.terminalID", ПараметрыЗапроса.ПунктПриемаГрузаИдентификаторВСистемеГрузоперевозчика, Истина);
	ДобавитьЗначение(Данные, "shipment.terminal.cityID", ПараметрыЗапроса.ПунктПриемаГрузаНаселенныйПунктИдентификатор, Истина);
	ДобавитьЗначение(Данные, "shipment.address.view", ПараметрыЗапроса.ОтправительАдрес, Истина);
	ДобавитьЗначение(Данные, "shipment.address.value", ПараметрыЗапроса.ОтправительАдресЗначение, Истина);
	ДобавитьЗначение(Данные, "shipment.address.latitude", ПараметрыЗапроса.ОтправительАдресШирота);
	ДобавитьЗначение(Данные, "shipment.address.longitude", ПараметрыЗапроса.ОтправительАдресДолгота);
	ДобавитьЗначение(Данные, "shipment.method", ПараметрыЗапроса.СпособОтгрузки, Истина);
	
	ДобавитьЗначение(Данные, "delivery.date", ПараметрыЗапроса.ДатаДоставки, Истина);
	ДобавитьЗначение(Данные, "delivery.date", ПараметрыЗапроса.ДатаДоставки, Истина);
	ДобавитьЗначение(Данные, "delivery.date", ПараметрыЗапроса.ДатаДоставки, Истина);
	ДобавитьЗначение(Данные, "delivery.time.from", ПараметрыЗапроса.ВремяДоставкиС, Истина);
	ДобавитьЗначение(Данные, "delivery.time.to", ПараметрыЗапроса.ВремяДоставкиПо, Истина);
	ДобавитьЗначение(Данные, "delivery.time.breakFrom", ПараметрыЗапроса.ВремяДоставкиОбедС, Истина);
	ДобавитьЗначение(Данные, "delivery.time.breakTo", ПараметрыЗапроса.ВремяДоставкиОбедПо, Истина);
	ДобавитьЗначение(Данные, "delivery.terminal.id", ПараметрыЗапроса.ПунктВыдачиГрузаИдентификатор, Истина);
	ДобавитьЗначение(Данные, "delivery.terminal.terminalID", ПараметрыЗапроса.ПунктВыдачиГрузаИдентификаторВСистемеГрузоперевозчика, Истина);
	ДобавитьЗначение(Данные, "delivery.terminal.cityID", ПараметрыЗапроса.ПунктВыдачиГрузаНаселенныйПунктИдентификатор, Истина);
	ДобавитьЗначение(Данные, "delivery.address.view", ПараметрыЗапроса.ПолучательАдрес, Истина);
	ДобавитьЗначение(Данные, "delivery.address.value", ПараметрыЗапроса.ПолучательАдресЗначение, Истина);
	ДобавитьЗначение(Данные, "delivery.address.latitude", ПараметрыЗапроса.ПолучательАдресШирота);
	ДобавитьЗначение(Данные, "delivery.address.longitude", ПараметрыЗапроса.ПолучательАдресДолгота);
	ДобавитьЗначение(Данные, "delivery.method", ПараметрыЗапроса.СпособДоставки, Истина);
	
	МассивАдресов = Новый Массив;
	Для Каждого ТекущийАдрес Из ПараметрыЗапроса.АдресаМаршрута Цикл
		
		НовыйАдрес = Новый Структура;
		
		ДобавитьЗначение(НовыйАдрес, "id", ТекущийАдрес.Идентификатор, Истина);
		ДобавитьЗначение(НовыйАдрес, "visitNumber", ТекущийАдрес.ПорядковыйНомер, Истина);
		ДобавитьЗначение(НовыйАдрес, "address.view", ТекущийАдрес.Представление, Истина);
		ДобавитьЗначение(НовыйАдрес, "address.value", ТекущийАдрес.Значение, Истина);
		ДобавитьЗначение(НовыйАдрес, "address.latitude", ТекущийАдрес.Широта, Истина);
		ДобавитьЗначение(НовыйАдрес, "address.longitude", ТекущийАдрес.Долгота, Истина);
		
		МассивАдресов.Добавить(НовыйАдрес);
		
	КонецЦикла;
	ДобавитьЗначение(Данные, "points", МассивАдресов);
	
	МассивУслуг = Новый Массив;
	Для Каждого ТекущаяУслуга Из ПараметрыЗапроса.Услуги Цикл
		
		НоваяУслуга = Новый Структура();
		НоваяУслуга.Вставить("id", ТекущаяУслуга.Идентификатор);
		
		МассивСвойств = Новый Массив();
		Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
			НовоеСвойство = Новый Структура();
			ДобавитьЗначение(НовоеСвойство, "id", ТекущееСвойство.Идентификатор, Истина);
			ДобавитьЗначение(НовоеСвойство, "value", ТекущееСвойство.Значение, Истина);
			МассивСвойств.Добавить(НовоеСвойство);
		КонецЦикла;
		
		НоваяУслуга.Вставить("properties", МассивСвойств);
		
		МассивУслуг.Добавить(НоваяУслуга);
		
	КонецЦикла;
	ДобавитьЗначение(Данные, "services", МассивУслуг, Истина);
	
	Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
		
		ДобавитьЗначение(Данные, "type", ПолучитьЗначение(ПараметрыЗапроса, "ТипЗаказа", , 0));
		ДобавитьЗначение(Данные, "shipment.cityId", ПараметрыЗапроса.ОтправительНаселенныйПунктИдентификатор, Истина);
		ДобавитьЗначение(Данные, "delivery.cityId", ПараметрыЗапроса.ПолучательНаселенныйПунктИдентификатор, Истина);
		ДобавитьЗначение(Данные, "requesterINN", ПараметрыЗапроса.ЗаказчикИНН, Истина, "");
		
		МассивГрузовыхМест = Новый Массив;
		Для Каждого ТекущееГрузовоеМесто Из ПараметрыЗапроса.ГрузовыеМестаВГХ Цикл
			
			НовоеГрузовоеМесто = Новый Структура;
			
			ДобавитьЗначение(НовоеГрузовоеМесто, "weight", ТекущееГрузовоеМесто.Вес, Истина);
			ДобавитьЗначение(НовоеГрузовоеМесто, "length", ТекущееГрузовоеМесто.Длина, Истина);
			ДобавитьЗначение(НовоеГрузовоеМесто, "width", ТекущееГрузовоеМесто.Ширина, Истина);
			ДобавитьЗначение(НовоеГрузовоеМесто, "height", ТекущееГрузовоеМесто.Высота, Истина);
			
			МассивГрузовыхМест.Добавить(НовоеГрузовоеМесто);
			
		КонецЦикла;
		ДобавитьЗначение(Данные, "packages", МассивГрузовыхМест, Истина);
		
	Иначе
		
		ДобавитьЗначение(Данные, "requesterINN", ПараметрыЗапроса.ЗаказчикИНН, Истина);
		
		ДобавитьЗначение(Данные, "payment.typeId", ПараметрыЗапроса.ФормаОплаты, Истина);
		ДобавитьЗначение(Данные, "payment.roleId", ПараметрыЗапроса.ПлательщикРоль, Истина);
		ДобавитьЗначение(Данные, "payment.address.view", ПараметрыЗапроса.ПлательщикАдрес, Истина);
		ДобавитьЗначение(Данные, "payment.address.value", ПараметрыЗапроса.ПлательщикАдресЗначение, Истина);
		ДобавитьЗначение(Данные, "payment.address.latitude", ПараметрыЗапроса.ПлательщикАдресШирота);
		ДобавитьЗначение(Данные, "payment.address.longitude", ПараметрыЗапроса.ПлательщикАдресДолгота);
		
		ДобавитьЗначение(Данные, "shipment.timeOptionId", ПараметрыЗапроса.ВариантВремениОтгрузки, Истина);
		ДобавитьЗначение(Данные, "cargo.quantity", ПараметрыЗапроса.ГрузКоличествоГрузовыхМест, Истина);
		ДобавитьЗначение(Данные, "cargo.weight", ПараметрыЗапроса.ГрузОбщийВес, Истина);
		ДобавитьЗначение(Данные, "cargo.volume", ПараметрыЗапроса.ГрузОбщийОбъем, Истина);
		ДобавитьЗначение(Данные, "cargo.maxHeight", ПараметрыЗапроса.ГрузМаксимальнаяВысота, Истина);
		ДобавитьЗначение(Данные, "cargo.maxLength", ПараметрыЗапроса.ГрузМаксимальнаяДлина, Истина);
		ДобавитьЗначение(Данные, "cargo.maxWidth", ПараметрыЗапроса.ГрузМаксимальнаяШирина, Истина);
		ДобавитьЗначение(Данные, "cargo.maxWeight", ПараметрыЗапроса.ГрузМаксимальныйВес, Истина);
		ДобавитьЗначение(Данные, "cargo.description", ПараметрыЗапроса.ГрузСодержимое, Истина);
		ДобавитьЗначение(Данные, "cargo.value", ПараметрыЗапроса.ГрузСтоимость, Истина);
		
		МассивТоваров = Новый Массив;
		Для Каждого ТекущийТовар Из ПараметрыЗапроса.Товары Цикл
			
			НовыйТовар = Новый Структура;
			
			ДобавитьЗначение(НовыйТовар, "quantity", ТекущийТовар.Количество, Истина);
			ДобавитьЗначение(НовыйТовар, "weight", ТекущийТовар.Вес, Истина);
			ДобавитьЗначение(НовыйТовар, "length", ТекущийТовар.Длина, Истина);
			ДобавитьЗначение(НовыйТовар, "width", ТекущийТовар.Ширина, Истина);
			ДобавитьЗначение(НовыйТовар, "height", ТекущийТовар.Высота, Истина);
			
			МассивТоваров.Добавить(НовыйТовар);
			
		КонецЦикла;
		ДобавитьЗначение(Данные, "items", МассивТоваров, Истина);
		
	КонецЕсли;
	
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные, Отказ, , ТипГрузоперевозки);
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеСпискаТиповГрузоперевозок(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса);
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение типов грузоперевозки'");
	ЗапросСервиса.Адрес = "deliveryCatalogs/deliveryTypes";
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-delivcat-carriers.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеСпискаГрузоперевозчиков(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков());
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ГрузоперевозчикИНН) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "inn", ПараметрыЗапроса.ГрузоперевозчикИНН);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ГрузоперевозчикКПП) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "kpp", ПараметрыЗапроса.ГрузоперевозчикКПП);
	КонецЕсли;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеСпискаПунктовВыдачиКлиента(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса);
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка пунктов выдачи клиента'");
	ЗапросСервиса.Адрес = "deliveryCatalogs/pickupPoints";
	ЗапросСервиса.Метод = "GET";
	Если ПараметрыЗапроса.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка() Тогда
		ЗапросСервиса.Контент = "application/vnd-1cbn-delivery-catalog-pickuppoints.v1+json";
	ИначеЕсли ПараметрыЗапроса.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьер() Тогда 
		ЗапросСервиса.Контент = "application/vnd-1cbn-courier-catalog-pickuppoints.v1+json";
	Иначе
		ЗапросСервиса.Контент = "application/vnd-1cbn-courierica-catalog-pickuppoints.v1+json";
	КонецЕсли;
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ТипЗагрузки) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "type", ПараметрыЗапроса.ТипЗагрузки);
	КонецЕсли;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучитьСписокКурьеров(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса);
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка курьеров'");
	ЗапросСервиса.Адрес = "deliveryCatalogs/couriers";
	ЗапросСервиса.Метод = "GET";
	Если ПараметрыЗапроса.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка() Тогда
		ЗапросСервиса.Контент = "application/vnd-1cbn-delivery-catalog-couriers.v1+json";
	ИначеЕсли ПараметрыЗапроса.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьер() Тогда 
		ЗапросСервиса.Контент = "application/vnd-1cbn-courier-catalog-couriers.v1+json";
	Иначе
		ЗапросСервиса.Контент = "application/vnd-1cbn-courierica-catalog-couriers.v1+json";
	КонецЕсли;
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ТипЗагрузки) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "type", ПараметрыЗапроса.ТипЗагрузки);
	КонецЕсли;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучитьСписокКонтрагентов(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка контрагентов'");
	ЗапросСервиса.Адрес = "deliveryCatalogs/counteragents";
	ЗапросСервиса.Метод = "GET";
	Если ПараметрыЗапроса.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка() Тогда
		ЗапросСервиса.Контент = "application/vnd-1cbn-delivery-catalog-counteragents.v1+json";
	ИначеЕсли ПараметрыЗапроса.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьер() Тогда 
		ЗапросСервиса.Контент = "application/vnd-1cbn-courier-catalog-counteragents.v1+json";
	ИначеЕсли ПараметрыЗапроса.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика() Тогда
		ЗапросСервиса.Контент = "application/vnd-1cbn-courierica-catalog-counteragents.v1+json";
	КонецЕсли;
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолученияСостоянияПодключенияОрганизации(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса);
	
	ТипГрузоперевозки = ПараметрыЗапроса.ТипГрузоперевозки;
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение состояния подключения организации'");
	ЗапросСервиса.Адрес = "delivery/company";
	ЗапросСервиса.Метод = "GET";
	Если СервисДоставкиКлиентСервер.ЭтоДеловыеЛинии(ТипГрузоперевозки) Тогда
		ЗапросСервиса.Контент = "application/vnd-1cbn-delivery-company.v1+json";
	ИначеЕсли СервисДоставкиКлиентСервер.ЭтоКурьерика(ТипГрузоперевозки) Тогда
		ЗапросСервиса.Контент = "application/vnd-1cbn-courierica-delivery-company.v1+json";
	КонецЕсли;
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;

	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаОтправкиЗапросаНаПолучениеРегистрационныхДанных(ПараметрыЗапроса, Отказ = Неопределено)
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса);
	
	ТипГрузоперевозки = ПараметрыЗапроса.ТипГрузоперевозки;
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Отправка запроса на получение регистрационных данных'");
	ЗапросСервиса.Адрес = "delivery/company";
	ЗапросСервиса.Метод = "POST";
	Если СервисДоставкиКлиентСервер.ЭтоДеловыеЛинии(ТипГрузоперевозки) Тогда
		ЗапросСервиса.Контент = "application/vnd-1cbn-delivery-company.v1+json";
	ИначеЕсли СервисДоставкиКлиентСервер.ЭтоКурьерика(ТипГрузоперевозки) Тогда
		ЗапросСервиса.Контент = "application/vnd-1cbn-courierica-delivery-company.v1+json";
	КонецЕсли;
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Заголовки = Новый Соответствие;
	Если СервисДоставкиКлиентСервер.ЭтоДеловыеЛинии(ТипГрузоперевозки) Тогда
		Заголовки.Вставить("Accept", "application/vnd-1cbn-delivery-company.v1+json");
	ИначеЕсли СервисДоставкиКлиентСервер.ЭтоКурьерика(ТипГрузоперевозки) Тогда
		Заголовки.Вставить("Accept", "application/vnd-1cbn-courierica-delivery-company.v1+json");
	КонецЕсли;
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	Данные = Новый Структура;
		
	Данные.Вставить("companyIsReg", ПараметрыЗапроса.ЗарегистрироватьОрганизацию);
	Если ПараметрыЗапроса.ЗарегистрироватьОрганизацию Тогда
		
		ДанныеОрганизации = Новый Структура;
		ДанныеОрганизации.Вставить("name", ПараметрыЗапроса.НаименованиеОрганизации);
		ДанныеОрганизации.Вставить("external_license", Ложь);
		
		Данные.Вставить("company", ДанныеОрганизации);
		
	КонецЕсли;
	
	Данные.Вставить("pickuppointIsReg", ПараметрыЗапроса.ЗарегистрироватьПунктВыдачи);
	Если ПараметрыЗапроса.ЗарегистрироватьПунктВыдачи Тогда
		
		ДанныеПунктаВыдачи = Новый Структура;
		ДанныеПунктаВыдачи.Вставить("name", ПараметрыЗапроса.НаименованиеПунктаВыдачи);
		ДанныеПунктаВыдачи.Вставить("address", ПараметрыЗапроса.АдресПунктаВыдачи);
		ДанныеПунктаВыдачи.Вставить("phone", ПараметрыЗапроса.ТелефонПунктаВыдачи);
		ДанныеПунктаВыдачи.Вставить("external_id", ПараметрыЗапроса.ИдентификаторПунктаВыдачи);
		ДанныеПунктаВыдачи.Вставить("point", Новый Структура("latitude, longitude", 0, 0));
		
		Данные.Вставить("pickuppoint", ДанныеПунктаВыдачи);
		
	КонецЕсли;
	
	Данные.Вставить("logisticianIsReg", ПараметрыЗапроса.ЗарегистрироватьПользователя);
	Если ПараметрыЗапроса.ЗарегистрироватьПользователя Тогда
		
		ФамилияПользователя = "";
		ИмяПользователя = "";
		ОтчествоПользователя = "";
		
		МассивФИО = СтрРазделить(ПараметрыЗапроса.НаименованиеПользователя, " ", Ложь);
		Если МассивФИО.Количество() > 0 Тогда
			ФамилияПользователя = МассивФИО.Получить(0);
		КонецЕсли;
		Если МассивФИО.Количество() > 1 Тогда
			ИмяПользователя = МассивФИО.Получить(1);
		КонецЕсли;
		Если МассивФИО.Количество() > 2 Тогда
			ОтчествоПользователя = МассивФИО.Получить(2);
		КонецЕсли;
		
		ДанныеПользователя = Новый Структура;
		ДанныеПользователя.Вставить("name", ИмяПользователя);
		ДанныеПользователя.Вставить("middle_name", ОтчествоПользователя);
		ДанныеПользователя.Вставить("last_name", ФамилияПользователя);
		ДанныеПользователя.Вставить("phone", ПараметрыЗапроса.НомерТелефонаПользователя);
		ДанныеПользователя.Вставить("email", ПараметрыЗапроса.АдресЭлектроннойПочтыПользователя);
		
		ДанныеЛогиста = Новый Структура("user", ДанныеПользователя);
		
		Данные.Вставить("user", ДанныеЛогиста);
		
	КонецЕсли;

	Данные.Вставить("TariffCompanyIsReg", ПараметрыЗапроса.ЗарегистрироватьОрганизациюТарификации);
	Если ПараметрыЗапроса.ЗарегистрироватьОрганизациюТарификации Тогда

		ДанныеОрганизацииТарификации = Новый Структура;
		ДанныеОрганизацииТарификации.Вставить("id", ПараметрыЗапроса.ИдентификаторОрганизацииТарификации);	//Идентификатор организации в сервисе перевозчика

		Данные.Вставить("TariffCompany", ДанныеОрганизацииТарификации);
	КонецЕсли;
	
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаОбновитьНастройкиКомпании(ПараметрыЗапроса, Отказ = Неопределено)
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса);
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Обновить настройки компании'");
	ЗапросСервиса.Адрес = "delivery/company";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Контент = "application/vnd-1cbn-courierica-delivery-company.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	ТипГрузоперевозки = ПараметрыЗапроса.ТипГрузоперевозки;
	
	Заголовки = Новый Соответствие;
	Если СервисДоставкиКлиентСервер.ЭтоКурьерика(ТипГрузоперевозки) Тогда
		Заголовки.Вставить("Accept", "application/vnd-1cbn-courierica-delivery-company.v1+json");
	КонецЕсли;
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	Данные = Новый Структура;
	ДобавитьЗначение(Данные, "update_company", Истина, Истина);
	
	ИменаПараметров = Новый Массив;
	Если ПараметрыЗапроса.ОбновитьЧастичнуюДоставку Тогда
		ИменаПараметров.Добавить("partial_shipment");
		ДобавитьЗначение(Данные, "partial_shipment_value", ПараметрыЗапроса.ЧастичнаяДоставкаЗначение, Истина);
		ДобавитьЗначение(Данные, "company_id", ПараметрыЗапроса.ИдентификаторОрганизации, Истина);
	КонецЕсли;
	
	ДобавитьЗначение(Данные, "parameter_list", СтрСоединить(ИменаПараметров, ","), Истина);
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаПолучениеУслугиДляТипаГрузоперевозки(ПараметрыЗапроса, Отказ = Неопределено)
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса);
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка услуг'");
	ЗапросСервиса.Адрес = "deliveryCatalogs/services";
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-delivcat-services.v2+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Если ПараметрыЗапроса.Свойство("ТипГрузоперевозки") И ЗначениеЗаполнено(ПараметрыЗапроса.ТипГрузоперевозки) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "transportationType", ПараметрыЗапроса.ТипГрузоперевозки);
	Иначе
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "transportationType", "1");
	КонецЕсли;

	Если ПараметрыЗапроса.Свойство("УслугиДляМультизаказов")
			И ПараметрыЗапроса.УслугиДляМультизаказов Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "isMultiorder", true);
	КонецЕсли;
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаПолучениеСпискаДоступныхТерминалов(ПараметрыЗапроса, Отказ = Неопределено)
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеТерминалы());
	
	ТипГрузоперевозки = ПараметрыЗапроса.ТипГрузоперевозки;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "application/vnd-1cbn-delivcat-points.v1+json");
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	Данные = Новый Структура;
	
	ДобавитьЗначение(Данные, "allTerminals", ПараметрыЗапроса.ВсеПунктыПВЗ, Истина);
	
	ЕстьОтборПоАдресу = Ложь;
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Адрес) Тогда
		
		ДобавитьЗначение(Данные, "address.view", ПараметрыЗапроса.Адрес, Истина);
		ДобавитьЗначение(Данные, "address.value", ПараметрыЗапроса.АдресЗначение, Истина);
		
		ЕстьОтборПоАдресу = Истина;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.НаселенныйПунктИдентификатор) Тогда
		
		ДобавитьЗначение(Данные, "address.cityID", ПараметрыЗапроса.НаселенныйПунктИдентификатор, Истина);
		
		ЕстьОтборПоАдресу = Истина;
		
	КонецЕсли;
	
	Если Не ПараметрыЗапроса.ВсеПунктыПВЗ И Не ЕстьОтборПоАдресу Тогда
		
		ТекстСообщения = НСтр("ru='Не заполнен адрес.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Отказ = Истина;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ГрузоперевозчикИдентификатор) Тогда
		ДобавитьЗначение(Данные, "carrierId", ПараметрыЗапроса.ГрузоперевозчикИдентификатор, Истина);
	Иначе
		ТекстСообщения = НСтр("ru='Не заполнен код грузоперевозчика.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Отказ = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Направление) Тогда
		ДобавитьЗначение(Данные, "typeOperation", ПараметрыЗапроса.Направление, Истина);
	Иначе
		ТекстСообщения = НСтр("ru='Не заполнен код операции.'");
		Отказ = Истина;
	КонецЕсли;
	
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные, Отказ, , ТипГрузоперевозки);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаПолучитьНаселенныеПункты(ПараметрыЗапроса, Отказ = Неопределено)
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяМетодаПолучитьНаселенныеПункты());
	
	ТипГрузоперевозки = ПараметрыЗапроса.ТипГрузоперевозки;
	
	Данные = Новый Структура;
	
	ДобавитьЗначение(Данные, "page", ПараметрыЗапроса.Страница, , 1);
	ДобавитьЗначение(Данные, "size", ПараметрыЗапроса.РазмерСтраницы, , 50);
	ДобавитьЗначение(Данные, "sortBy", ПараметрыЗапроса.Сортировка, , "");
	ДобавитьЗначение(Данные, "substrings", СтрРазделить(ПараметрыЗапроса.СтрокаПоиска, " "), , Новый массив);
	ДобавитьЗначение(Данные, "isFormPoints", ПараметрыЗапроса.ЭтоФормаПунктов, , Ложь);
	ДобавитьЗначение(Данные, "onlyTerminals", ПараметрыЗапроса.ТолькоТерминалы, , Ложь);
	ДобавитьЗначение(Данные, "typeOperation", ПараметрыЗапроса.Направление);
	
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные, Отказ, , ТипГрузоперевозки);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаЗаписьНастроекАвторизации(ПараметрыЗапроса, Отказ = Неопределено)
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыЗаписатьНастройкиАвторизации());
	
	ТипГрузоперевозки = ПараметрыЗапроса.ТипГрузоперевозки;
	
	Данные = Новый Структура();
	ДобавитьЗначение(Данные, "scope", ПараметрыЗапроса.ПравоДоступа, Истина);
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Логин) Тогда
		Контент = "application/vnd-1cbn-services-auth-basic.v1+json";
		ДобавитьЗначение(Данные, "login", ПараметрыЗапроса.Логин, Истина);
		ДобавитьЗначение(Данные, "password", ПараметрыЗапроса.Пароль, Истина);
		Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
			ДобавитьЗначение(Данные, "organization_name", Строка(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка), Истина);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.Токен) Тогда
		Контент = "application/vnd-1cbn-services-auth-token.v1+json";
		ДобавитьЗначение(Данные, "token", ПараметрыЗапроса.Токен, Истина);
	Иначе
		Контент = "application/vnd-1cbn-services-auth-oauth.v1+json";
	КонецЕсли;
	
	ЗапросСервиса.Контент = Контент;
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные, Отказ, , ТипГрузоперевозки);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаУстановитьТарифПоУмолчанию(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса);
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Установка тарифа по умолчанию'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"deliveryCatalogs/setDefaultTariff/%1/",
		ПараметрыЗапроса.ГрузоперевозчикИдентификатор);
	ЗапросСервиса.Метод = "PUT";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	// Параметры запроса
	Если ПараметрыЗапроса.Свойство("ТипГрузоперевозки") И ЗначениеЗаполнено(ПараметрыЗапроса.ТипГрузоперевозки) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "transportationType", ПараметрыЗапроса.ТипГрузоперевозки);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	// Параметры запроса
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ТарифИдентификатор) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "tariff", ПараметрыЗапроса.ТарифИдентификатор);
	КонецЕсли;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаСохранитьПараметрыТарифа(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса);
	
	ТипГрузоперевозки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ТипГрузоперевозки", 0);
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Сохранение параметров тарифа'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"deliveryCatalogs/tariff/%1",
		ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "PATCH";
	
	Контент = "application/vnd-1cbn-delivcat-tariff_settings.v1+json";
	
	ЗапросСервиса.Контент = Контент;
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Данные = Новый Структура();
	ДобавитьЗначение(Данные, "payment.typeId", ПараметрыЗапроса.ФормаОплаты, Истина);
	
	МассивУслуг = Новый Массив();
	
	Для Каждого ТекущаяУслуга Из ПараметрыЗапроса.Услуги Цикл
		
		НоваяУслуга = Новый Структура();
		НоваяУслуга.Вставить("id", ТекущаяУслуга.Идентификатор);
		
		МассивСвойств = Новый Массив();
		Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
			НовоеСвойство = Новый Структура();
			ДобавитьЗначение(НовоеСвойство, "id", ТекущееСвойство.Идентификатор, Истина);
			ДобавитьЗначение(НовоеСвойство, "value", ТекущееСвойство.Значение, Истина);
			МассивСвойств.Добавить(НовоеСвойство);
		КонецЦикла;
		
		НоваяУслуга.Вставить("properties", МассивСвойств);
		
		МассивУслуг.Добавить(НоваяУслуга);
		
	КонецЦикла;
	
	ДобавитьЗначение(Данные, "services", МассивУслуг, Истина);
	
	МассивТерминалов = Новый Массив();
	
	Для Каждого ТекущийТерминал Из ПараметрыЗапроса.Терминалы Цикл
		
		НоваяСтрока = Новый Структура();
		ДобавитьЗначение(НоваяСтрока, "id", ТекущийТерминал.Идентификатор);
		ДобавитьЗначение(НоваяСтрока, "typeOperation", ТекущийТерминал.Направление, Истина);
		ДобавитьЗначение(НоваяСтрока, "address.view", ТекущийТерминал.АдресПредставление, Истина);
		ДобавитьЗначение(НоваяСтрока, "address.value", ПоместитьВХранилищеЗначения(ТекущийТерминал.АдресЗначение, ТипГрузоперевозки), Истина);
		
		МассивТерминалов.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	ДобавитьЗначение(Данные, "points", МассивТерминалов, Истина);
	
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные);
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолученияСпискаНаложенныхПлатежей(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса, СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьНаложенныеПлатежи());
	
	ЗапросСервиса.ОбработкаРезультата = Неопределено;

	// Параметры запроса
	Если ЗначениеЗаполнено(ПараметрыЗапроса.РазмерВыборки) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "size", ПараметрыЗапроса.РазмерВыборки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ДатаВыборкиС) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "date", XMLСтрока(ПараметрыЗапроса.ДатаВыборкиС));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Идентификатор) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "id", Строка(ПараметрыЗапроса.Идентификатор));
	КонецЕсли;
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаСинхронизироватьЧастичнуюДоставку(ПараметрыЗапроса, Отказ = Неопределено)

	// Вызывается метод, относящийся к получению списка заказов на доставку
	ЗапросСервиса = ЗапросСервисаПолучениеСпискаЗаказовНаДоставкуСОтборами(ПараметрыЗапроса);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаПолучитьСостояниеОпцииКурьерика(ПараметрыЗапроса, Отказ = Неопределено)
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса);
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получить состояние опции'");
	ЗапросСервиса.Адрес = "delivery/optionscheck";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/vnd-1cbn-courierica-optionscheck.v1+json");
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	Данные = Новый Структура;
	Данные.Вставить("UserUeid", ПараметрыЗапроса.ДанныеИдентификатора.Получить("uin"));
	Данные.Вставить("login", ПараметрыЗапроса.ДанныеИдентификатора.Получить("login"));
	Данные.Вставить("subscriberUeid", ПараметрыЗапроса.ДанныеИдентификатора.Получить("subscriberUeid"));
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаПолучитьЖурналЗаказовНаДоставкуИзСервиса(ПараметрыЗапроса, Отказ = Неопределено)
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса);
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Обновление журнала заказов на доставку.'");
	ЗапросСервиса.Адрес = "delivery/orderList";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("page", ПараметрыЗапроса.Страница);
	ТелоЗапроса.Вставить("docIds", ПараметрыЗапроса.МассивНомеров);
	ТелоЗапроса.Вставить("dateStart", ПараметрыЗапроса.ДатаСозданияОт);
	ТелоЗапроса.Вставить("dateEnd", ПараметрыЗапроса.ДатаСозданияДо);
	ТелоЗапроса.Вставить("states", ПараметрыЗапроса.СписокСтатусов);
	ТелоЗапроса.Вставить("orderBy", ПараметрыЗапроса.Сортировка);
	
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(ТелоЗапроса);
	
	Заголовки = Новый Соответствие();
	Если ПараметрыЗапроса.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1ССДЭК() Тогда
		Заголовки.Вставить("Accept", "application/vnd-1cbn-cdek-orderlist.v1+json");
	Иначе
		Заголовки.Вставить("Accept", "application/vnd-1cbn-delivery-orderlist.v3+json");
	КонецЕсли;
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаПолучитьСписокСостоянийЗаказовИзСервиса(ПараметрыЗапроса, Отказ = Неопределено)
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса);
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка состояний заказов на доставку'");
	ЗапросСервиса.Адрес = "delivery/orderStates";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/vnd-1cbn-delivery-orderstates.v1+json");
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаПолучитьПечатнуюФормуИзСервиса(ПараметрыЗапроса, Отказ = Неопределено)
	
	ЗапросСервиса = НовыйЗапросСервиса(ПараметрыЗапроса);
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение печатной формы заказа на доставку'");
	ЗапросСервиса.Адрес = "delivery/orderPrintforms";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("docUID", ПараметрыЗапроса.ИдентификаторДокумента);
	ТелоЗапроса.Вставить("mode", ПараметрыЗапроса.ИдентификаторПечатнойФормы);
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(ТелоЗапроса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/vnd-1cbn-delivery-orderprintforms.v1+json");
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	Возврат ЗапросСервиса;
	
КонецФункции

#КонецОбласти

#Область ОбработкаРезультатовЗапросовКСервису

Процедура ОбработатьРезультатЗапросаСоздатьИзменитьЗаказНаДоставку(СтруктураОтвета, Результат,
	ГрупповаяОбработка = Ложь)
	
	МассивРезультатов = Новый Массив;
	
	Если ТипЗнч(СтруктураОтвета) = Тип("Массив") Тогда
		МассивОтветовКоллекция = СтруктураОтвета;
	Иначе
		МассивОтветовКоллекция = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтруктураОтвета);
	КонецЕсли;
	
	Для Каждого Ответ Из МассивОтветовКоллекция Цикл
		
		РезультатЗапроса = Новый Структура;
		
		ОбработатьБлокОшибокРезультатаЗапроса(Ответ, РезультатЗапроса);
		
		Если РезультатЗапроса.Свойство("Ошибки") И РезультатЗапроса.Ошибки.Количество() > 0 Тогда
			МассивРезультатов.Добавить(РезультатЗапроса);
			Продолжить;
		КонецЕсли;
		
		РезультатЗапроса.Вставить("Идентификатор", ПолучитьЗначение(Ответ, "id"));	// Устарело
		РезультатЗапроса.Вставить("ИдентификаторДокумента", Новый УникальныйИдентификатор(ПолучитьЗначение(Ответ, "id")));
		РезультатЗапроса.Вставить("СостояниеИдентификатор", ПолучитьЗначение(Ответ, "status.id"));
		РезультатЗапроса.Вставить("Состояние", ПолучитьЗначение(Ответ, "status.name"));
		РезультатЗапроса.Вставить("НомерЗаказа", ПолучитьЗначение(Ответ, "number"));
		РезультатЗапроса.Вставить("ДатаЗаказа", ЛокальноеВремяСеанса(ПолучитьЗначение(Ответ, "date", "Дата")));
		ДокументыОснованияИдентификаторы = ПолучитьЗначение(Ответ, "documents");
		Если ЗначениеЗаполнено(ДокументыОснованияИдентификаторы) Тогда
			РезультатЗапроса.Вставить("ДокументыОснованияИдентификаторы", ДокументыОснованияИдентификаторы);
			РезультатЗапроса.Вставить("ДокументыОснования", ПолучитьДокументыОснованияПоИдентификаторам(
				ДокументыОснованияИдентификаторы));
		КонецЕсли;
		Если ГрупповаяОбработка Тогда
			МассивРезультатов.Добавить(РезультатЗапроса);
			Продолжить;
		КонецЕсли;
		РезультатЗапроса.Вставить("НомерЗаказаДляПечати", ПолучитьЗначение(Ответ, "barcode"));
		РезультатЗапроса.Вставить("ТрекНомер", ПолучитьЗначение(Ответ, "trackNumber"));
		РезультатЗапроса.Вставить("ДатаСозданияЗаказа", ПолучитьЗначение(Ответ, "createDate", "Дата"));
		РезультатЗапроса.Вставить("СтатусИдентификатор", ПолучитьЗначение(Ответ, "status.id")); // Устарело
		РезультатЗапроса.Вставить("Статус", ПолучитьЗначение(Ответ, "status.name")); // Устарело
		РезультатЗапроса.Вставить("ЧастичныйОтказИзменений", ПолучитьЗначение(Ответ, "descriptionOfCanceled"));
		
		МассивРезультатов.Добавить(РезультатЗапроса);
		
	КонецЦикла;
	
	Если МассивРезультатов.Количество() = 1 Тогда
		Результат = МассивРезультатов[0];
	Иначе
		Результат = МассивРезультатов;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаСоздатьМультизаказНаДоставку(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним данные
	Результат.Вставить("Идентификатор", ПолучитьЗначение(СтруктураОтвета, "id"));	// Устарело
	Результат.Вставить("ИдентификаторДокумента", Новый УникальныйИдентификатор(ПолучитьЗначение(СтруктураОтвета, "id")));
	Результат.Вставить("НомерЗаказаДляПечати", ПолучитьЗначение(СтруктураОтвета, "barcode"));
	Результат.Вставить("НомерЗаказа", ПолучитьЗначение(СтруктураОтвета, "number"));
	Результат.Вставить("ДатаЗаказа", ПолучитьЗначение(СтруктураОтвета, "date", "Дата"));
	Результат.Вставить("ТрекНомер", ПолучитьЗначение(СтруктураОтвета, "trackNumber"));
	Результат.Вставить("ДатаСозданияЗаказа", ПолучитьЗначение(СтруктураОтвета, "createDate", "Дата"));
	Результат.Вставить("Состояние", ПолучитьЗначение(СтруктураОтвета, "status.name"));
	Результат.Вставить("СостояниеИдентификатор", ПолучитьЗначение(СтруктураОтвета, "status.id"));
	Результат.Вставить("Статус", ПолучитьЗначение(СтруктураОтвета, "status.name")); // Устарело
	Результат.Вставить("СтатусИдентификатор", ПолучитьЗначение(СтруктураОтвета, "status.id")); // Устарело
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаОформитьЗаказНаДоставку(СтруктураОтвета, Результат, ПараметрыЗапроса)
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Вставить("Состояние", ПолучитьЗначение(СтруктураОтвета, "status.name"));
	Результат.Вставить("СостояниеИдентификатор", ПолучитьЗначение(СтруктураОтвета, "status.id"));
	Если ПараметрыЗапроса.ГрупповаяОбработка Тогда
		Возврат;
	КонецЕсли;
	Результат.Вставить("ТрекНомер", ПолучитьЗначение(СтруктураОтвета, "trackNumber"));
	Результат.Вставить("ДоступнаОтмена", ПолучитьЗначение(СтруктураОтвета, "availableCancel"));
	Результат.Вставить("ДоступноРедактированиеПослеОформления", ПолучитьЗначение(СтруктураОтвета, "availableEdit"));
	Результат.Вставить("ДатаСозданияЗаказа", ПолучитьЗначение(СтруктураОтвета, "createDate", "Дата"));
	Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ПараметрыЗапроса.ТипГрузоперевозки) Тогда
		Возврат;
	КонецЕсли;
	Результат.Вставить("Идентификатор", ПолучитьЗначение(СтруктураОтвета, "id"));	// Устарело
	Результат.Вставить("ИдентификаторДокумента", Новый УникальныйИдентификатор(ПолучитьЗначение(СтруктураОтвета, "id")));
	Результат.Вставить("НомерЗаказаДляПечати", ПолучитьЗначение(СтруктураОтвета, "barcode"));
	Результат.Вставить("НомерЗаказа", ПолучитьЗначение(СтруктураОтвета, "number"));
	Результат.Вставить("ДатаЗаказа", ЛокальноеВремяСеанса(ПолучитьЗначение(СтруктураОтвета, "date", "Дата")));
	Результат.Вставить("ОжидатьРасчета", ПолучитьЗначение(СтруктураОтвета, "waitCalculation"));
	Результат.Вставить("Статус", ПолучитьЗначение(СтруктураОтвета, "status.name")); // Устарело
	Результат.Вставить("СтатусИдентификатор", ПолучитьЗначение(СтруктураОтвета, "status.id")); // Устарело
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаОформитьМультизаказНаДоставку(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним данные
	Результат.Вставить("Идентификатор", ПолучитьЗначение(СтруктураОтвета, "id"));	// Устарело
	Результат.Вставить("ИдентификаторДокумента", Новый УникальныйИдентификатор(ПолучитьЗначение(СтруктураОтвета, "id")));
	Результат.Вставить("НомерЗаказаДляПечати", ПолучитьЗначение(СтруктураОтвета, "barcode"));
	Результат.Вставить("НомерЗаказа", ПолучитьЗначение(СтруктураОтвета, "number"));
	Результат.Вставить("ДатаЗаказа", ПолучитьЗначение(СтруктураОтвета, "date", "Дата"));
	Результат.Вставить("ТрекНомер", ПолучитьЗначение(СтруктураОтвета, "trackNumber"));
	Результат.Вставить("ДоступнаОтмена", ПолучитьЗначение(СтруктураОтвета, "availableCancel"));
	Результат.Вставить("ОжидатьРасчета", ПолучитьЗначение(СтруктураОтвета, "waitCalculation"));
	Результат.Вставить("ДатаСозданияЗаказа", ПолучитьЗначение(СтруктураОтвета, "createDate", "Дата"));
	Результат.Вставить("Состояние", ПолучитьЗначение(СтруктураОтвета, "status.name"));
	Результат.Вставить("СостояниеИдентификатор", ПолучитьЗначение(СтруктураОтвета, "status.id"));
	Результат.Вставить("Статус", ПолучитьЗначение(СтруктураОтвета, "status.name")); // Устарело
	Результат.Вставить("СтатусИдентификатор", ПолучитьЗначение(СтруктураОтвета, "status.id")); // Устарело
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаОтменитьЗаказНаДоставку(СтруктураОтвета, Результат)
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Вставить("Идентификатор", ПолучитьЗначение(СтруктураОтвета, "id"));	// Устарело
	Результат.Вставить("Номер", ПолучитьЗначение(СтруктураОтвета, "number", , ""));
	Результат.Вставить("ИдентификаторДокумента", Новый УникальныйИдентификатор(ПолучитьЗначение(СтруктураОтвета, "id")));
	Результат.Вставить("Статус", ПолучитьЗначение(СтруктураОтвета, "status.name")); // Устарело
	Результат.Вставить("СтатусИдентификатор", ПолучитьЗначение(СтруктураОтвета, "status.id")); // Устарело
	Результат.Вставить("Состояние", ПолучитьЗначение(СтруктураОтвета, "status.name"));
	Результат.Вставить("СостояниеИдентификатор", ПолучитьЗначение(СтруктураОтвета, "status.id"));
	Результат.Вставить("ДокументОтменен", ПолучитьЗначение(СтруктураОтвета, "result.IsCancel"));
	Результат.Вставить("ДоступнаОтмена", ПолучитьЗначение(СтруктураОтвета, "result.availableCancel"));
	Результат.Вставить("ДоступноРедактированиеПослеОформления", ПолучитьЗначение(СтруктураОтвета, "result.availableEdit"));
	Результат.Вставить("ДоступнаПлатнаяОтмена", ПолучитьЗначение(СтруктураОтвета, "result.availablePaidCancel"));
	Результат.Вставить("СуммаПлатнойОтмены", ПолучитьЗначение(СтруктураОтвета, "result.PaidCancel"));
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьЗаказНаДоставку(СтруктураОтвета, Результат)
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = НовыйПараметрыОтветаПолучитьЗаказНаДоставку();
	
	ПараметрыЗаказа = Новый Структура;
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(Параметры, ПараметрыЗаказа);
	
	Данные = СтруктураОтвета.data;
	
	ТипГрузоперевозки = ПолучитьЗначение(Данные, "transportationTypeId", , 1);
	ТипГрузоперевозки = ?(ЗначениеЗаполнено(ТипГрузоперевозки), ТипГрузоперевозки, 1);
	ПараметрыЗаказа.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ЭтоСДЭК = СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки);
	ЭтоКурьерика = СервисДоставкиКлиентСервер.ЭтоКурьерика(ТипГрузоперевозки);
	ЭтоСозданиеШаблона = Результат.ЭтоСозданиеШаблона;
	ЭтоЗаполнениеКопированием = Результат.ЭтоЗаполнениеКопированием;
	
	ПараметрыЗаказа.Вставить("МультизаказТипНаименование", ПолучитьЗначение(Данные, "multiOrder.type.Name",,""));
	ПараметрыЗаказа.Вставить("МультизаказТипИдентификатор", ПолучитьЗначение(Данные, "multiOrder.type.Id",,""));
	
	ПараметрыЗаказа.Вставить("СуммаДокумента", ПолучитьЗначение(Данные, "totalSum","Число",0));
	ПараметрыЗаказа.Вставить("СуммаСкидки", ПолучитьЗначение(Данные, "totalDiscountSum","Число",0));
	ПараметрыЗаказа.Вставить("ЦенаВключаетНДС", ПолучитьЗначение(Данные, "includingVAT",, Истина));
	ПараметрыЗаказа.Вставить("ЗаказчикРоль", ПолучитьЗначение(Данные, "requesterRoleId",, 3));
	Если ПараметрыЗаказа.ЗаказчикРоль = 0 Тогда
		ПараметрыЗаказа.ЗаказчикРоль = 3;
	КонецЕсли;
	
	ПараметрыЗаказа.Вставить("ТипЗаказа", ПолучитьЗначение(Данные, "Type",, 1));
	
	ПараметрыВалюты = НовыйПараметрыВалюты();
	ПараметрыЗаказа.Вставить("ВалютаКод", ПараметрыВалюты.Код);
	ПараметрыЗаказа.Вставить("ВалютаНаименование", ПараметрыВалюты.Наименование);
	ПараметрыЗаказа.Вставить("ВалютаСсылка", ПараметрыВалюты.Ссылка);
	
	ПараметрыЗаказа.Вставить("НаложенныйПлатежВидОплаты", ПолучитьЗначение(Данные, "paymentOnDelivery.method",,0));
	
	ПараметрыЗаказа.Вставить("ГрузоперевозчикНаименование", ПолучитьЗначение(Данные, "carrier.name"));
	ПараметрыЗаказа.Вставить("ГрузоперевозчикИдентификатор", ПолучитьЗначение(Данные, "carrier.id"));
	
	// Отгрузка
	ПараметрыЗаказа.Вставить("СпособОтгрузки", ПолучитьЗначение(Данные, "shipment.type.id"));
	ПараметрыЗаказа.Вставить("СпособОтгрузкиНаименование", ПолучитьЗначение(Данные, "shipment.type.name"));
	
	ПараметрыЗаказа.Вставить("ПунктПриемаГрузаИдентификатор", ПолучитьЗначение(Данные, "shipment.point.id"));
	ПараметрыЗаказа.Вставить("ПунктПриемаГрузаИдентификаторВСистемеГрузоперевозчика", ПолучитьЗначение(Данные, "shipment.point.terminalID"));
	ПараметрыЗаказа.Вставить("ПунктПриемаГрузаНаселенныйПунктИдентификатор", ПолучитьЗначение(Данные, "shipment.point.cityID"));
	ПараметрыЗаказа.Вставить("ПунктПриемаГрузаНаименование", ПолучитьЗначение(Данные, "shipment.point.name"));
	ПараметрыЗаказа.Вставить("ПунктПриемаГрузаАдрес", ПолучитьЗначение(Данные, "shipment.point.address"));
	ПараметрыЗаказа.Вставить("ПунктПриемаГрузаТелефон", ПолучитьЗначение(Данные, "shipment.point.phone"));
	Если ЭтоСДЭК Тогда
		ПараметрыЗаказа.Вставить("ПунктПриемаГрузаТипНаименование", ПолучитьЗначение(Данные, "shipment.point.typeName"));
		ПараметрыЗаказа.Вставить("ПунктПриемаГрузаТипИдентификатор", ПолучитьЗначение(Данные, "shipment.point.typeId"));
		ПараметрыАдреса = ПолучитьЗначение(Данные, "shipment.settlement", , Новый Структура);
		ПараметрыЗаказа.ОтправительНаселенныйПунктИдентификатор = ПолучитьЗначение(ПараметрыАдреса, "id", , "");
		ПараметрыЗаказа.ОтправительНаселенныйПунктПредставление = ПолучитьЗначение(ПараметрыАдреса, "name", , "");
		ПараметрыЗаказа.ОтправительНаселенныйПунктНаложенныйПлатежСуммаМаксимум = ПолучитьЗначение(ПараметрыАдреса, "payment_limit", , 0);
	Иначе
		ПараметрыЗаказа.Вставить("ПунктПриемаГрузаТипНаименование", ПолучитьЗначение(Данные, "shipment.point.type.name"));
		ПараметрыЗаказа.Вставить("ПунктПриемаГрузаТипИдентификатор", ПолучитьЗначение(Данные, "shipment.point.type.id"));
	КонецЕсли;
	
	ПараметрыЗаказа.Вставить("ОтправительАдресПредставление", ПолучитьЗначение(Данные, "shipment.address.view"));
	ПараметрыЗаказа.Вставить("ОтправительАдресЗначение", ПолучитьЗначение(Данные, "shipment.address.value", "ХранилищеЗначения"));
	ПараметрыЗаказа.Вставить("ОтправительАдресШирота", ПолучитьЗначение(Данные, "shipment.address.latitude",, 0));
	ПараметрыЗаказа.Вставить("ОтправительАдресДолгота", ПолучитьЗначение(Данные, "shipment.address.longitude",, 0));
	
	ПараметрыЗаказа.Вставить("ДатаОтгрузки", ПолучитьЗначение(Данные, "shipment.date","Дата"));
	ПараметрыЗаказа.Вставить("ВариантВремениОтгрузки", ПолучитьЗначение(Данные, "shipment.timeOptionId"));
	ПараметрыЗаказа.Вставить("ВремяОтгрузкиС", ПолучитьЗначение(Данные, "shipment.time.from", "Дата"));
	ПараметрыЗаказа.Вставить("ВремяОтгрузкиПо", ПолучитьЗначение(Данные, "shipment.time.to", "Дата"));
	ПараметрыЗаказа.Вставить("ВремяОтгрузкиОбедС", ПолучитьЗначение(Данные, "shipment.time.breakFrom", "Дата"));
	ПараметрыЗаказа.Вставить("ВремяОтгрузкиОбедПо", ПолучитьЗначение(Данные, "shipment.time.breakTo", "Дата"));
	
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентЮрФизЛицо", ПолучитьЗначение(Данные, "shipment.participant.counteragent.typeId",,1));
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентИНН", ПолучитьЗначение(Данные, "shipment.participant.counteragent.inn"));
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентКПП", ПолучитьЗначение(Данные, "shipment.participant.counteragent.kpp"));
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентНаименование", ПолучитьЗначение(Данные, "shipment.participant.counteragent.name"));
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентЮридическийАдресЗначение", ПолучитьЗначение(Данные, "shipment.participant.counteragent.legaladdress.value", "ХранилищеЗначения"));
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентЮридическийАдресПредставление", ПолучитьЗначение(Данные, "shipment.participant.counteragent.legaladdress.view"));
	УчастникГрузоперевозки = УчастникГрузоперевозкиПоУИДилиИННиКПП(ПараметрыЗаказа.ОтправительКонтрагентИНН,
		ПараметрыЗаказа.ОтправительКонтрагентКПП, ПолучитьЗначение(Данные, "shipment.participant.counteragent.id"));
	Если УчастникГрузоперевозки <> Неопределено Тогда
		ПараметрыЗаказа.Вставить("ОтправительКонтрагентСсылка", УчастникГрузоперевозки.Ссылка);
		ПараметрыЗаказа.Вставить("ОтправительКонтрагентНаименование", УчастникГрузоперевозки.Наименование);
	КонецЕсли;
	
	КонтактноеЛицо = КонтактноеЛицоПоGUID(ПолучитьЗначение(Данные, "shipment.participant.contactPerson.id"));
	Если КонтактноеЛицо <> Неопределено Тогда
		ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоСсылка", КонтактноеЛицо.Ссылка);
	КонецЕсли;
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоНаименование", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.name"));
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоEmail", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.email"));
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.phone.number"));
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонЗначение", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.phone.value", "ХранилищеЗначения"));
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонДополнительныйПредставление", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.phoneAdditional.number"));
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонДополнительныйЗначение", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.phoneAdditional.value", "ХранилищеЗначения"));
	
	// Доставка
	ПараметрыЗаказа.Вставить("СпособДоставки", ПолучитьЗначение(Данные, "delivery.type.id"));
	ПараметрыЗаказа.Вставить("СпособДоставкиНаименование", ПолучитьЗначение(Данные, "delivery.type.name"));
	
	ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаИдентификатор", ПолучитьЗначение(Данные, "delivery.point.id"));
	ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаИдентификаторВСистемеГрузоперевозчика", ПолучитьЗначение(Данные, "delivery.point.terminalID"));
	ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаНаселенныйПунктИдентификатор", ПолучитьЗначение(Данные, "delivery.point.cityID"));
	ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаНаименование", ПолучитьЗначение(Данные, "delivery.point.name"));
	ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаАдрес", ПолучитьЗначение(Данные, "delivery.point.address"));
	ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаТелефон", ПолучитьЗначение(Данные, "delivery.point.phone"));
	Если ЭтоСДЭК Тогда
		ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаТипНаименование", ПолучитьЗначение(Данные, "delivery.point.typeName"));
		ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаТипИдентификатор", ПолучитьЗначение(Данные, "delivery.point.typeId"));
		ПараметрыАдреса = ПолучитьЗначение(Данные, "delivery.settlement", , Новый Структура);
		ПараметрыЗаказа.ПолучательНаселенныйПунктИдентификатор = ПолучитьЗначение(ПараметрыАдреса, "id", , "");
		ПараметрыЗаказа.ПолучательНаселенныйПунктПредставление = ПолучитьЗначение(ПараметрыАдреса, "name", , "");
		ПараметрыЗаказа.ПолучательНаселенныйПунктНаложенныйПлатежСуммаМаксимум = ПолучитьЗначение(ПараметрыАдреса, "payment_limit", , 0);
	Иначе
		ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаТипНаименование", ПолучитьЗначение(Данные, "delivery.point.type.name"));
		ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаТипИдентификатор", ПолучитьЗначение(Данные, "delivery.point.type.id"));
	КонецЕсли;
	
	ПараметрыЗаказа.Вставить("ПунктВыдачиКлиентаИдентификатор", ПолучитьЗначение(Данные, "delivery.pickuppoint.id"));
	ПараметрыЗаказа.Вставить("ПунктВыдачиКлиентаНаименование", ПолучитьЗначение(Данные, "delivery.pickuppoint.name"));

	ПараметрыЗаказа.Вставить("ПолучательАдресПредставление", ПолучитьЗначение(Данные, "delivery.address.view"));
	ПараметрыЗаказа.Вставить("ПолучательАдресЗначение", ПолучитьЗначение(Данные, "delivery.address.value", "ХранилищеЗначения"));
	ПараметрыЗаказа.Вставить("ПолучательАдресШирота", ПолучитьЗначение(Данные, "delivery.address.latitude",, 0));
	ПараметрыЗаказа.Вставить("ПолучательАдресДолгота", ПолучитьЗначение(Данные, "delivery.address.longitude",, 0));
	
	ПараметрыЗаказа.Вставить("ДатаДоставки", ПолучитьЗначение(Данные, "delivery.date","Дата"));
	ПараметрыЗаказа.Вставить("ВремяДоставкиС", ПолучитьЗначение(Данные, "delivery.time.from", "Дата"));
	ПараметрыЗаказа.Вставить("ВремяДоставкиПо", ПолучитьЗначение(Данные, "delivery.time.to", "Дата"));
	ПараметрыЗаказа.Вставить("ВремяДоставкиОбедС", ПолучитьЗначение(Данные, "delivery.time.breakFrom", "Дата"));
	ПараметрыЗаказа.Вставить("ВремяДоставкиОбедПо", ПолучитьЗначение(Данные, "delivery.time.breakTo", "Дата"));
	
	ПараметрыЗаказа.Вставить("ПолучательКонтрагентЮрФизЛицо", ПолучитьЗначение(Данные, "delivery.participant.counteragent.typeId",,1));
	ПараметрыЗаказа.Вставить("ПолучательКонтрагентИНН", ПолучитьЗначение(Данные, "delivery.participant.counteragent.inn"));
	ПараметрыЗаказа.Вставить("ПолучательКонтрагентКПП", ПолучитьЗначение(Данные, "delivery.participant.counteragent.kpp"));
	ПараметрыЗаказа.Вставить("ПолучательКонтрагентНаименование", ПолучитьЗначение(Данные, "delivery.participant.counteragent.name"));
	ПараметрыЗаказа.Вставить("ПолучательКонтрагентЮридическийАдресЗначение", ПолучитьЗначение(Данные, "delivery.participant.counteragent.legaladdress.value", "ХранилищеЗначения"));
	ПараметрыЗаказа.Вставить("ПолучательКонтрагентЮридическийАдресПредставление", ПолучитьЗначение(Данные, "delivery.participant.counteragent.legaladdress.view"));
	УчастникГрузоперевозки = УчастникГрузоперевозкиПоУИДилиИННиКПП(ПараметрыЗаказа.ПолучательКонтрагентИНН,
		ПараметрыЗаказа.ПолучательКонтрагентКПП, ПолучитьЗначение(Данные, "delivery.participant.counteragent.id"));
	Если УчастникГрузоперевозки <> Неопределено Тогда
		ПараметрыЗаказа.Вставить("ПолучательКонтрагентСсылка", УчастникГрузоперевозки.Ссылка);
		ПараметрыЗаказа.Вставить("ПолучательКонтрагентНаименование", УчастникГрузоперевозки.Наименование);
	КонецЕсли;
	
	КонтактноеЛицо = КонтактноеЛицоПоGUID(ПолучитьЗначение(Данные, "delivery.participant.contactPerson.id"));
	Если КонтактноеЛицо <> Неопределено Тогда
		ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоСсылка", КонтактноеЛицо.Ссылка);
	КонецЕсли;
	ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоНаименование", ПолучитьЗначение(Данные, "delivery.participant.contactPerson.name"));
	ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоEmail", ПолучитьЗначение(Данные, "delivery.participant.contactPerson.email"));
	ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(Данные, "delivery.participant.contactPerson.phone.number"));
	ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонЗначение", ПолучитьЗначение(Данные, "delivery.participant.contactPerson.phone.value", "ХранилищеЗначения"));
	ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонДополнительныйПредставление", ПолучитьЗначение(Данные, "delivery.participant.contactPerson.phoneAdditional.number"));
	ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонДополнительныйЗначение", ПолучитьЗначение(Данные, "delivery.participant.contactPerson.phoneAdditional.value", "ХранилищеЗначения"));
	
	// Оплата
	ПараметрыЗаказа.Вставить("ФормаОплаты", ПолучитьЗначение(Данные, "payment.type.id",,1));
	ПараметрыЗаказа.Вставить("ФормаОплатыНаименование", ПолучитьЗначение(Данные, "payment.type.name",,""));
	
	ПараметрыЗаказа.Вставить("ПлательщикРоль", ПолучитьЗначение(Данные, "payment.payerRoleId",,0));
	ПараметрыЗаказа.Вставить("ПлательщикАдресПредставление", ПолучитьЗначение(Данные, "payment.address.view"));
	ПараметрыЗаказа.Вставить("ПлательщикАдресЗначение", ПолучитьЗначение(Данные, "payment.address.value", "ХранилищеЗначения"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтрагентЮрФизЛицо", ПолучитьЗначение(Данные, "payment.participant.counteragent.typeId",,1));
	ПараметрыЗаказа.Вставить("ПлательщикКонтрагентИНН", ПолучитьЗначение(Данные, "payment.participant.counteragent.inn"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтрагентКПП", ПолучитьЗначение(Данные, "payment.participant.counteragent.kpp"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтрагентНаименование", ПолучитьЗначение(Данные, "payment.participant.counteragent.name"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтрагентЮридическийАдресЗначение", ПолучитьЗначение(Данные, "payment.participant.counteragent.legaladdress.value", "ХранилищеЗначения"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтрагентЮридическийАдресПредставление", ПолучитьЗначение(Данные, "payment.participant.counteragent.legaladdress.view"));
	
	КонтактноеЛицо = КонтактноеЛицоПоGUID(ПолучитьЗначение(Данные, "payment.participant.contactPerson.id"));
	Если КонтактноеЛицо <> Неопределено Тогда
		ПараметрыЗаказа.Вставить("ПлательщикКонтактноеЛицоСсылка", КонтактноеЛицо.Ссылка);
	КонецЕсли;
	ПараметрыЗаказа.Вставить("ПлательщикКонтактноеЛицоНаименование", ПолучитьЗначение(Данные, "payment.participant.contactPerson.name"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтактноеЛицоEmail", ПолучитьЗначение(Данные, "payment.participant.contactPerson.email"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(Данные, "payment.participant.contactPerson.phone.number"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтактноеЛицоТелефонЗначение", ПолучитьЗначение(Данные, "payment.participant.contactPerson.phone.value", "ХранилищеЗначения"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтактноеЛицоТелефонДополнительныйПредставление", ПолучитьЗначение(Данные, "payment.participant.contactPerson.phoneAdditional.number"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтактноеЛицоТелефонДополнительныйЗначение", ПолучитьЗначение(Данные, "payment.participant.contactPerson.phoneAdditional.value", "ХранилищеЗначения"));
	
	УчастникГрузоперевозки = УчастникГрузоперевозкиПоУИДилиИННиКПП(ПараметрыЗаказа.ПлательщикКонтрагентИНН, ПараметрыЗаказа.ПлательщикКонтрагентКПП);
	Если УчастникГрузоперевозки <> Неопределено Тогда
		ПараметрыЗаказа.Вставить("ПлательщикКонтрагентСсылка", УчастникГрузоперевозки.Ссылка);
		ПараметрыЗаказа.Вставить("ПлательщикКонтрагентНаименование", УчастникГрузоперевозки.Наименование);
	КонецЕсли;
	
	// Груз
	ПараметрыЗаказа.Вставить("ГрузВес", ПолучитьЗначение(Данные, "cargo.weight"));
	ПараметрыЗаказа.Вставить("ГрузОбъем", ПолучитьЗначение(Данные, "cargo.volume"));
	ПараметрыЗаказа.Вставить("ГрузМаксимальнаяВысота", ПолучитьЗначение(Данные, "cargo.maxHeight"));
	ПараметрыЗаказа.Вставить("ГрузМаксимальнаяДлина", ПолучитьЗначение(Данные, "cargo.maxLength"));
	ПараметрыЗаказа.Вставить("ГрузМаксимальнаяШирина", ПолучитьЗначение(Данные, "cargo.maxWidth"));
	ПараметрыЗаказа.Вставить("ГрузМаксимальныйВес", ПолучитьЗначение(Данные, "cargo.maxWeight"));
	ПараметрыЗаказа.Вставить("ГрузСодержимое", ПолучитьЗначение(Данные, "cargo.description"));
	ПараметрыЗаказа.Вставить("ГрузКоличествоГрузовыхМест", ПолучитьЗначение(Данные, "cargo.quantity"));
	ПараметрыЗаказа.Вставить("ГрузСтоимость", ПолучитьЗначение(Данные, "cargo.value"));
	ПараметрыЗаказа.Вставить("ГрузНегабаритныйВес", ПолучитьЗначение(Данные, "cargo.oversizedWeight",,0));
	ПараметрыЗаказа.Вставить("ГрузНегабаритныйОбъем", ПолучитьЗначение(Данные, "cargo.oversizedVolume",,0));
	ПараметрыЗаказа.Вставить("ГрузКоличествоНегабаритныхГрузовыхМест", ПолучитьЗначение(Данные, "cargo.oversizedQuantity"));
	
	ТарифНеГабарит = (ПараметрыЗаказа.ГрузКоличествоНегабаритныхГрузовыхМест <> 0);
	ПараметрыЗаказа.Вставить("ТарифНеГабарит", ТарифНеГабарит);
	
	// Услуги
	Услуги = ПолучитьЗначение(Данные, "services", , Новый Массив);
	МассивУслуг = Новый Массив;
	
	Если ЭтоСДЭК Тогда
		
		Для Каждого ТекущаяУслуга Из Услуги Цикл
			НоваяУслуга = НовыеПараметрыУслуги(ТипГрузоперевозки);
			НоваяУслуга.Идентификатор = ПолучитьЗначение(ТекущаяУслуга, "id", , "");
			НоваяУслуга.Использовать = ПолучитьЗначение(ТекущаяУслуга, "isSelected", , Истина);
			Для Каждого ТекущееСвойство Из ПолучитьЗначение(ТекущаяУслуга, "properties", , Новый Массив) Цикл
				НовоеСвойство = НовыйПараметрыСвойстваУслуги();
				НовоеСвойство.Идентификатор = ПолучитьЗначение(ТекущееСвойство, "id", , "");
				НовоеСвойство.Значение = ПолучитьЗначение(ТекущееСвойство, "value");
				НоваяУслуга.Свойства.Добавить(НовоеСвойство);
			КонецЦикла;
			МассивУслуг.Добавить(НоваяУслуга);
		КонецЦикла;
		
	КонецЕсли;
	
	// Дополнительные данные
	ДополнительныеДанные = ПолучитьЗначение(Данные, "additionalData");
	
	Если ДополнительныеДанные <> Неопределено Тогда
		
		МассивДополнительныеДанные = Новый Массив;
		
		Для Каждого ТекущиеДанные Из ДополнительныеДанные Цикл
			
			НоваяСтрока = Новый Структура();
			НоваяСтрока.Вставить("Наименование", ТекущиеДанные.name);
			НоваяСтрока.Вставить("ТипЗначения", ТекущиеДанные.type);
			НоваяСтрока.Вставить("Значение", ТекущиеДанные.value);
			НоваяСтрока.Вставить("Список", Новый Массив());
			
			Для Каждого ТекЭлемент Из ТекущиеДанные.items Цикл
				
				НовыйЭлемент = Новый Структура();
				НовыйЭлемент.Вставить("Наименование", ТекЭлемент.name);
				НовыйЭлемент.Вставить("ТипЗначения", ТекЭлемент.type);
				НовыйЭлемент.Вставить("Значение", ТекЭлемент.value);
				
				НоваяСтрока.Список.Добавить(НовыйЭлемент);
				
			КонецЦикла;
			
			МассивДополнительныеДанные.Добавить(НоваяСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыЗаказа.Вставить("ДополнительныеДанныеЗаказа", МассивДополнительныеДанные);
	ПараметрыЗаказа.Вставить("ДополнительнаяИнформация", ПолучитьЗначение(Данные, "additionalInfo"));
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	ПараметрыЗаказа.ДатаОтгрузки = ?(ПараметрыЗаказа.ДатаОтгрузки > ТекущаяДата, ПараметрыЗаказа.ДатаОтгрузки, ТекущаяДата);
	
	Если ЭтоСозданиеШаблона Или ЭтоЗаполнениеКопированием Тогда
		
		Если ЭтоСозданиеШаблона Тогда
			ОчиститьПараметрыПриСозданииШаблона(Параметры, ПараметрыЗаказа, ТипГрузоперевозки);
		Иначе
			ПараметрыЗаказа.ДатаЗаказа = ?(ПараметрыЗаказа.ДатаЗаказа > ТекущаяДата, ПараметрыЗаказа.ДатаЗаказа, ТекущаяДата);
		КонецЕсли;
		
		Если ЭтоКурьерика Тогда
			ПараметрыЗаказа.ДатаДоставки = ?(ПараметрыЗаказа.ДатаДоставки > ТекущаяДата, ПараметрыЗаказа.ДатаДоставки, ТекущаяДата);
		Иначе
			ПараметрыЗаказа.Удалить("ДатаДоставки");
		КонецЕсли;
		
	Иначе
		
		ПараметрыЗаказа.Вставить("ИдентификаторЗаказа", ПолучитьЗначение(Данные, "id"));
		ПараметрыЗаказа.Вставить("ДокументыОснованияИдентификаторы", ПолучитьЗначение(Данные, "baseDocuments"));
		ПараметрыЗаказа.Вставить("ДокументыОснования", ПолучитьДокументыОснованияПоИдентификаторам(ПараметрыЗаказа.ДокументыОснованияИдентификаторы));
		
		Если ТипЗнч(ПараметрыЗаказа.ДокументыОснованияИдентификаторы) = Тип("Массив") Тогда
			Если ТипЗнч(ПараметрыЗаказа.ДокументыОснования) = Тип("СписокЗначений") Тогда
				ДокументыОснованияВведеныВДругойИБ = ПараметрыЗаказа.ДокументыОснованияИдентификаторы.Количество() > ПараметрыЗаказа.ДокументыОснования.Количество();
			Иначе
				ДокументыОснованияВведеныВДругойИБ = Истина;
			КонецЕсли;
		Иначе
			ДокументыОснованияВведеныВДругойИБ = Ложь;
		КонецЕсли;
		
		ПараметрыЗаказа.Вставить("ДокументыОснованияВведеныВДругойИБ", ДокументыОснованияВведеныВДругойИБ);
		
		ПараметрыЗаказа.Вставить("ТрекНомер", ПолучитьЗначение(Данные, "trackNumber"));
		ПараметрыЗаказа.Вставить("НомерЗаказаДляПечати", ПолучитьЗначение(Данные, "barcode"));
		ПараметрыЗаказа.Вставить("НомерЗаказа", ПолучитьЗначение(Данные, "number"));
		ПараметрыЗаказа.Вставить("ДатаЗаказа", ЛокальноеВремяСеанса(ПолучитьЗначение(Данные, "date","Дата")));
		ПараметрыЗаказа.Вставить("ДатаСозданияЗаказа", ПолучитьЗначение(Данные, "createDate", "Дата"));
		ПараметрыЗаказа.Вставить("ОбязательныеРеквизитыЗаполнены", ПолучитьЗначение(Данные, "isFilled",,Ложь));
	
		ПараметрыЗаказа.Вставить("МультизаказДата", ПолучитьЗначение(Данные, "multiOrder.date","Дата"));
		ПараметрыЗаказа.Вставить("МультизаказНомер", ПолучитьЗначение(Данные, "multiOrder.number",,""));
		ПараметрыЗаказа.Вставить("МультизаказИдентификатор", ПолучитьЗначение(Данные, "multiOrder.id",,""));
		ПараметрыЗаказа.Вставить("МультизаказПредставление", ПредставлениеМультизаказа(ПараметрыЗаказа, Истина));
		
		// Наложенный платеж
		ПараметрыЗаказа.Вставить("НаложенныйПлатежВидОплатыДополнительный", ПолучитьЗначение(Данные, "paymentOnDelivery.methodAdditional",,0));
		ПараметрыЗаказа.Вставить("СуммаНаложенногоПлатежаДополнительный", ПолучитьЗначение(Данные, "paymentOnDelivery.sumAdditional",,ПараметрыЗаказа.СуммаНаложенногоПлатежаДополнительный));
		ПараметрыЗаказа.Вставить("СуммаНаложенногоПлатежа", ПолучитьЗначение(Данные, "paymentOnDelivery.sum",,ПараметрыЗаказа.СуммаНаложенногоПлатежа));
		ПараметрыЗаказа.Вставить("НаложенныйПлатежПолучен", ПолучитьЗначение(Данные, "paymentOnDelivery.isPaid",,ПараметрыЗаказа.НаложенныйПлатежПолучен));
		
		ПараметрыЗаказа.Вставить("ДоступнаОтмена", ПолучитьЗначение(Данные, "availableCancel",, Ложь));
		ПараметрыЗаказа.Вставить("ДоступноРедактированиеПослеОформления", ПолучитьЗначение(Данные, "availableEdit",, Ложь));
		
		ПараметрыЗаказа.Вставить("Состояние", ПолучитьЗначение(Данные, "status.name",, НСтр("ru='Состояние неизвестно'")));
		ПараметрыЗаказа.Вставить("СостояниеИдентификатор", ПолучитьЗначение(Данные, "status.id",, 0));
		ПараметрыЗаказа.Вставить("Заблокирован", ПолучитьЗначение(Данные, "isLocked",, Ложь));
		ПараметрыЗаказа.Вставить("Оплачен", ПолучитьЗначение(Данные, "isPaid",, Ложь));
		
		// Данные об исполнителе
		ПараметрыЗаказа.Вставить("Курьер", ПолучитьЗначение(Данные, "performer.name"));
		ПараметрыЗаказа.Вставить("ИсполнительНаименование", ПолучитьЗначение(Данные, "performer.name"));
		ПараметрыЗаказа.Вставить("ИсполнительЮридическоеЛицоНаименование", ПолучитьЗначение(Данные, "performer.legalName"));
		ПараметрыЗаказа.Вставить("ИсполнительТелефон", ПолучитьЗначение(Данные, "performer.phone"));
		ПараметрыЗаказа.Вставить("АвтомобильМарка", ПолучитьЗначение(Данные, "performer.carModel"));
		ПараметрыЗаказа.Вставить("АвтомобильНомер", ПолучитьЗначение(Данные, "performer.carNumber"));
		
		ПараметрыЗаказа.Вставить("ТарифИдентификатор", ПолучитьЗначение(Данные, "tariff.id"));
		ПараметрыЗаказа.Вставить("ТарифНаименование", ПолучитьЗначение(Данные, "tariff.name"));
		ПараметрыЗаказа.Вставить("ТарифФормаОплаты", ПолучитьЗначение(Данные, "tariff.paymentType",, Новый Массив()));
		ПараметрыЗаказа.Вставить("ТарифТолькоВремяДоставки", ПолучитьЗначение(Данные, "tariff.availableShippingTime",,Ложь));
		
		Если Не ЭтоСДЭК Тогда
			
			Для Каждого ТекУслуга Из Услуги Цикл
			
				НоваяУслуга = НовыеПараметрыУслуги();
				НоваяУслуга.Идентификатор = ТекУслуга.id;
				НоваяУслуга.Наименование = ТекУслуга.name;
				НоваяУслуга.Категория = ТекУслуга.category;
				НоваяУслуга.Обязательная = ТекУслуга.required;
				НоваяУслуга.ПоказыватьИнформацию = ТекУслуга.isDescribed;
				НоваяУслуга.СтавкаНДСНаименование = ТекУслуга.vatRateName;
				НоваяУслуга.СтавкаНДСИдентификатор = ТекУслуга.vatRateId;
				НоваяУслуга.СуммаНДС = ТекУслуга.vat;
				НоваяУслуга.СуммаСНДС = ТекУслуга.sum;
				НоваяУслуга.СуммаСкидки = ТекУслуга.discountSum;
				
				Для Каждого ТекущееСвойство Из ТекУслуга.properties Цикл
					
					НовоеСвойство = НовыйПараметрыСвойстваУслуги();
					НовоеСвойство.Идентификатор = ТекущееСвойство.id;
					НовоеСвойство.Наименование = ТекущееСвойство.name;
					СтруктураТипа = ПолучитьЗначение(ТекущееСвойство, "type");
					НовоеСвойство.ТипЗначения = СервисДоставкиСлужебный.ПолучитьОписаниеТипаПоСтруктуре(СтруктураТипа);
					НовоеСвойство.ЕдиницаИзмерения = ТекущееСвойство.unit;
					НовоеСвойство.Значение = ТекущееСвойство.value;
					
					НоваяУслуга.СвойстваУслуги.Добавить(НовоеСвойство);
					
				КонецЦикла;
				
				МассивУслуг.Добавить(НоваяУслуга);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Дополнительные услуги тарифа заказа.
		ДополнительныеУслуги = ПолучитьЗначение(Данные, "optionalServices", , Новый Массив);
		МассивДополнительныхУслуг = Новый Массив();
		
		Для Каждого ТекущаяДополнительнаяУслуга Из ДополнительныеУслуги Цикл
			
			НоваяДопУслуга = Новый Структура();
			
			НоваяДопУслуга.Вставить("Идентификатор", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "id"));
			НоваяДопУслуга.Вставить("Наименование", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "name"));
			НоваяДопУслуга.Вставить("Категория", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "category"));
			НоваяДопУслуга.Вставить("Обязательная", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "required"));
			НоваяДопУслуга.Вставить("ПоказыватьИнформацию", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "isDescribed"));
			
			НоваяДопУслуга.Вставить("СвойстваУслуги", Новый Массив);
			
			СвойстваДополнительнойУслуги = НоваяДопУслуга.СвойстваУслуги;
			
			Для Каждого СвойствоДополнительнойУслуги Из ТекущаяДополнительнаяУслуга.properties Цикл
				
				НовоеСвойство = Новый Структура();
				НовоеСвойство.Вставить("Идентификатор", ПолучитьЗначение(СвойствоДополнительнойУслуги, "id"));
				НовоеСвойство.Вставить("Наименование", ПолучитьЗначение(СвойствоДополнительнойУслуги, "name"));
				СтруктураТипа = ПолучитьЗначение(СвойствоДополнительнойУслуги, "type");
				НовоеСвойство.Вставить("ТипЗначения", СервисДоставкиСлужебный.ПолучитьОписаниеТипаПоСтруктуре(СтруктураТипа));
				НовоеСвойство.Вставить("ЕдиницаИзмерения", ПолучитьЗначение(СвойствоДополнительнойУслуги,"unit"));
				
				СвойстваДополнительнойУслуги.Добавить(НовоеСвойство);
				
			КонецЦикла;
		
			МассивДополнительныхУслуг.Добавить(НоваяДопУслуга);
			
		КонецЦикла;
		
		ПараметрыЗаказа.Вставить("ДополнительныеУслуги", МассивДополнительныхУслуг);
		
		// Документы
		ДокументыЗаказа = ПолучитьЗначение(Данные, "documents", , Новый Массив);
		МассивДокументов = Новый Массив;
		Для Каждого ТекущийДокумент Из ДокументыЗаказа Цикл
			
			НовыйДокумент = НовыйПараметрыДокументаЗаказа();
			
			НовыйДокумент.Идентификатор = ПолучитьЗначение(ТекущийДокумент, "id");
			НовыйДокумент.ТипДокументаНаименование = ПолучитьЗначение(ТекущийДокумент, "typeName");
			НовыйДокумент.ТипДокументаИдентификатор = ПолучитьЗначение(ТекущийДокумент, "typeId");
			НовыйДокумент.Состояние = ПолучитьЗначение(ТекущийДокумент, "status");
			НовыйДокумент.Номер = ПолучитьЗначение(ТекущийДокумент, "number");
			НовыйДокумент.Дата = ПолучитьЗначение(ТекущийДокумент, "date");
			НовыйДокумент.Сумма = ПолучитьЗначение(ТекущийДокумент, "totalSum");
			НовыйДокумент.СуммаДолга = ПолучитьЗначение(ТекущийДокумент, "debtSum");
			НовыйДокумент.СуммаСкидки = ПолучитьЗначение(ТекущийДокумент, "discountSum");
			НовыйДокумент.Оплачен = ПолучитьЗначение(ТекущийДокумент, "isPaid");
			
			МассивДокументов.Добавить(НовыйДокумент);
			
		КонецЦикла;
		ПараметрыЗаказа.Вставить("Документы", МассивДокументов);
		
	КонецЕсли;
	
	ПараметрыЗаказа.Вставить("Услуги", МассивУслуг);
	
	Если Не (ЭтоСозданиеШаблона Или ЭтоЗаполнениеКопированием) Тогда

		// Описание грузовых мест
		ОписаниеГрузовыхМест = ПолучитьЗначение(Данные, "packages");
		ГрузовыеМестаВГХ = Новый Массив;
		Если ОписаниеГрузовыхМест <> Неопределено Тогда
			
			Для Каждого ОписаниеГрузовогоМеста Из ОписаниеГрузовыхМест Цикл
				
				ПараметрыГрузовогоМеста = НовыйПараметрыЭлементаГрузовогоМеста();
				
				ПараметрыГрузовогоМеста.ИдентификаторГрузовогоМеста = ПолучитьЗначение(ОписаниеГрузовогоМеста, "id");
				ПараметрыГрузовогоМеста.Описание = ПолучитьЗначение(ОписаниеГрузовогоМеста, "title");
				ПараметрыГрузовогоМеста.Вес = ПолучитьЗначение(ОписаниеГрузовогоМеста, "weight");
				ПараметрыГрузовогоМеста.Объем = ПолучитьЗначение(ОписаниеГрузовогоМеста, "volume");
				ПараметрыГрузовогоМеста.Длина = ПолучитьЗначение(ОписаниеГрузовогоМеста, "length");
				ПараметрыГрузовогоМеста.Ширина = ПолучитьЗначение(ОписаниеГрузовогоМеста, "width");
				ПараметрыГрузовогоМеста.Высота = ПолучитьЗначение(ОписаниеГрузовогоМеста, "height");
				ПараметрыГрузовогоМеста.Стоимость = ПолучитьЗначение(ОписаниеГрузовогоМеста, "cost");
				
				ГрузовыеМестаВГХ.Добавить(ПараметрыГрузовогоМеста);
				
			КонецЦикла;
			
		КонецЕсли;
		ПараметрыЗаказа.Вставить("ГрузовыеМестаВГХ", ГрузовыеМестаВГХ);
		
		// Позиционный состав заказа
		ПолнаяСтоимость = 0;
		Позиции = ПолучитьЗначение(Данные, "items");
		ТаблицаТовары = Новый ТаблицаЗначений;
		Если Не Позиции = Неопределено Тогда
			
			ПараметрыТаблицыПозиций = НовыйПараметрыЭлементаГруза();
			
			Для Каждого ПараметрГруза Из ПараметрыТаблицыПозиций Цикл
				ТаблицаТовары.Колонки.Добавить(ПараметрГруза.Ключ);
			КонецЦикла;
			
			ЕстьКодМаркировки = Позиции.Количество() > 0 И Позиции[0].Свойство("marking");
			СоответствиеСтавокНДС = СервисДоставкиПовтИсп.СоответствиеСтавокНДСИзСервиса();
			
			Для Каждого ТекущаяПозиция Из Позиции Цикл
				
				НоваяПозиция = ТаблицаТовары.Добавить();
				
				НоваяПозиция.Наименование           = ПолучитьЗначение(ТекущаяПозиция, "title");
				НоваяПозиция.ЕдиницаИзмерения       = ПолучитьЗначение(ТекущаяПозиция, "unit");
				НоваяПозиция.Количество             = ПолучитьЗначение(ТекущаяПозиция, "quantity");
				НоваяПозиция.КоличествоВозврат      = ПолучитьЗначение(ТекущаяПозиция, "quantityReturn");
				НоваяПозиция.Цена                   = ПолучитьЗначение(ТекущаяПозиция, "price");
				НоваяПозиция.Сумма                  = ПолучитьЗначение(ТекущаяПозиция, "cost");
				НоваяПозиция.СтавкаНДС              = ПолучитьЗначение(ТекущаяПозиция, "vatCode");
				НоваяПозиция.СтавкаНДСПредставление = СоответствиеСтавокНДС[НоваяПозиция.СтавкаНДС];
				НоваяПозиция.СуммаНДС               = ПолучитьЗначение(ТекущаяПозиция, "vat");
				НоваяПозиция.Вес                    = ПолучитьЗначение(ТекущаяПозиция, "weight");
				НоваяПозиция.Объем                  = ПолучитьЗначение(ТекущаяПозиция, "volume");
				НоваяПозиция.Длина                  = ПолучитьЗначение(ТекущаяПозиция, "length");
				НоваяПозиция.Ширина                 = ПолучитьЗначение(ТекущаяПозиция, "width");
				НоваяПозиция.Высота                 = ПолучитьЗначение(ТекущаяПозиция, "height");
				НоваяПозиция.Артикул                = ПолучитьЗначение(ТекущаяПозиция, "article");
				НоваяПозиция.ИННВладельцаГруза      = ПолучитьЗначение(ТекущаяПозиция, "innCargoOwner");
				НоваяПозиция.ТипНоменклатуры        = ПолучитьЗначение(ТекущаяПозиция, "itemtype");
				НоваяПозиция.ИдентификаторСтроки    = ПолучитьЗначение(ТекущаяПозиция, "rowId");
				НоваяПозиция.ИдентификаторДокументаОснования = ПолучитьЗначение(ТекущаяПозиция, "baseDocumentId");
				Если ОписаниеГрузовыхМест <> Неопределено Тогда
					НоваяПозиция.ИдентификаторГрузовогоМеста = ПолучитьЗначение(ТекущаяПозиция, "packageId");
				КонецЕсли;
				Если ЕстьКодМаркировки Тогда
					НоваяПозиция.КодМаркировки = ПолучитьЗначение(ТекущаяПозиция, "Marking");
				КонецЕсли;
				
				Если ЭтоСДЭК Тогда
					НоваяПозиция.ВесЕдиницыТовара = НоваяПозиция.Вес;
					НоваяПозиция.Вес = НоваяПозиция.ВесЕдиницыТовара * НоваяПозиция.Количество;
				КонецЕсли;
				
				ПолнаяСтоимость = ПолнаяСтоимость + НоваяПозиция.Сумма;
				
			КонецЦикла;
			
		КонецЕсли;
		ПараметрыЗаказа.Вставить("Товары", ТаблицаТовары);
		ПараметрыЗаказа.Вставить("ПолнаяСтоимость", ПолнаяСтоимость);
		
	КонецЕсли;
	
	СервисДоставкиКлиентСервер.ЗаполнитьСтруктуруПоЛинейнымДанным(Параметры, ПараметрыЗаказа);
	
	Результат.Вставить("Данные", Параметры);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаОбновитьЗаказНаДоставку(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним данные
	Результат.Вставить("ДатаОбновления", ПолучитьЗначение(СтруктураОтвета, "updateDate", "Дата"));
	Результат.Вставить("ЗаказОбновлен", ПолучитьЗначение(СтруктураОтвета, "isUpdated", , Истина));
	Результат.Вставить("ЭтоСозданиеШаблона",  Ложь);
	Результат.Вставить("ЭтоЗаполнениеКопированием",  Ложь);
	
	ОбработатьРезультатЗапросаПолучитьЗаказНаДоставку(СтруктураОтвета, Результат);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьМультизаказНаДоставку(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним данные
	Параметры = НовыйПараметрыОтветаПолучитьМультизаказНаДоставку();
	
	ПараметрыМультизаказа = Новый Структура();
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(Параметры, ПараметрыМультизаказа);
	
	Данные = СтруктураОтвета.data;
	
	ПараметрыМультизаказа.Вставить("ИдентификаторЗаказа", ПолучитьЗначение(Данные, "id"));
	
	ПараметрыМультизаказа.Вставить("ТрекНомер", ПолучитьЗначение(Данные, "trackNumber"));
	ПараметрыМультизаказа.Вставить("НомерЗаказаДляПечати", ПолучитьЗначение(Данные, "barcode"));
	ПараметрыМультизаказа.Вставить("НомерЗаказа", ПолучитьЗначение(Данные, "number"));
	ПараметрыМультизаказа.Вставить("ДатаЗаказа", ПолучитьЗначение(Данные, "date","Дата"));
	ПараметрыМультизаказа.Вставить("ДатаСозданияЗаказа", ПолучитьЗначение(Данные, "createDate", "Дата"));
	ПараметрыМультизаказа.Вставить("ДатаДоставки", ПолучитьЗначение(Данные, "finalDate","Дата"));

	ПараметрыМультизаказа.Вставить("ТипИдентификатор", ПолучитьЗначение(Данные, "typeId",, ""));
	ПараметрыМультизаказа.Вставить("ТипНаименование", ПолучитьЗначение(Данные, "typeName",, ""));
	
	ПараметрыМультизаказа.Вставить("СуммаДокумента", ПолучитьЗначение(Данные, "totalSum","Число",0));
	ПараметрыМультизаказа.Вставить("СуммаСкидки", ПолучитьЗначение(Данные, "totalDiscountSum","Число",0));
	ПараметрыМультизаказа.Вставить("ЦенаВключаетНДС", ПолучитьЗначение(Данные, "includingVAT",, Истина));
	
	ПараметрыВалюты = НовыйПараметрыВалюты();
	ПараметрыМультизаказа.Вставить("ВалютаКод", ПараметрыВалюты.Код);
	ПараметрыМультизаказа.Вставить("ВалютаНаименование", ПараметрыВалюты.Наименование);
	ПараметрыМультизаказа.Вставить("ВалютаСсылка", ПараметрыВалюты.Ссылка);
	
	ПараметрыМультизаказа.Вставить("Состояние", ПолучитьЗначение(Данные, "status.name",, НСтр("ru='Состояние неизвестно'")));
	ПараметрыМультизаказа.Вставить("СостояниеИдентификатор", ПолучитьЗначение(Данные, "status.id",, 0));
	ПараметрыМультизаказа.Вставить("Оплачен", ПолучитьЗначение(Данные, "isPaid",, Ложь));
	ПараметрыМультизаказа.Вставить("ДоступнаОтмена", ПолучитьЗначение(Данные, "availableCancel",, Ложь));
	
	ПараметрыМультизаказа.Вставить("ТипГрузоперевозки", ПолучитьЗначение(Данные, "transportationTypeId",,1));
	Если Не ЗначениеЗаполнено(ПараметрыМультизаказа.ТипГрузоперевозки) Тогда
		ПараметрыМультизаказа.ТипГрузоперевозки = 1;
	КонецЕсли;
	
	ПараметрыМультизаказа.Вставить("ГрузоперевозчикНаименование", ПолучитьЗначение(Данные, "carrier.name"));
	ПараметрыМультизаказа.Вставить("ГрузоперевозчикИдентификатор", ПолучитьЗначение(Данные, "carrier.id"));
	ПараметрыМультизаказа.Вставить("ТарифНаименование", ПолучитьЗначение(Данные, "tariff.name"));
	ПараметрыМультизаказа.Вставить("ТарифИдентификатор", ПолучитьЗначение(Данные, "tariff.id"));
	
	// Отгрузка
	ПараметрыМультизаказа.Вставить("СпособОтгрузки", ПолучитьЗначение(Данные, "shipment.type.id"));
	ПараметрыМультизаказа.Вставить("СпособОтгрузкиНаименование", ПолучитьЗначение(Данные, "shipment.type.name"));
	
	ПараметрыМультизаказа.Вставить("ПунктПриемаГрузаИдентификатор", ПолучитьЗначение(Данные, "shipment.point.id"));
	ПараметрыМультизаказа.Вставить("ПунктПриемаГрузаНаименование", ПолучитьЗначение(Данные, "shipment.point.name"));
	ПараметрыМультизаказа.Вставить("ПунктПриемаГрузаАдрес", ПолучитьЗначение(Данные, "shipment.point.address"));
	ПараметрыМультизаказа.Вставить("ПунктПриемаГрузаТелефон", ПолучитьЗначение(Данные, "shipment.point.phone"));
	ПараметрыМультизаказа.Вставить("ПунктПриемаГрузаТипНаименование", ПолучитьЗначение(Данные, "shipment.point.type.name"));
	ПараметрыМультизаказа.Вставить("ПунктПриемаГрузаТипИдентификатор", ПолучитьЗначение(Данные, "shipment.point.type.id"));
	
	ПараметрыМультизаказа.Вставить("ОтправительАдресПредставление", ПолучитьЗначение(Данные, "shipment.address.view"));
	ПараметрыМультизаказа.Вставить("ОтправительАдресЗначение", ПолучитьЗначение(Данные, "shipment.address.value", "ХранилищеЗначения"));
	ПараметрыМультизаказа.Вставить("ОтправительАдресШирота", ПолучитьЗначение(Данные, "shipment.address.latitude",, 0));
	ПараметрыМультизаказа.Вставить("ОтправительАдресДолгота", ПолучитьЗначение(Данные, "shipment.address.longitude",, 0));
	
	ПараметрыМультизаказа.Вставить("ДатаОтгрузки", ПолучитьЗначение(Данные, "shipment.date","Дата"));
	ПараметрыМультизаказа.Вставить("ВремяОтгрузкиС", ПолучитьЗначение(Данные, "shipment.time.from", "Дата"));
	ПараметрыМультизаказа.Вставить("ВремяОтгрузкиПо", ПолучитьЗначение(Данные, "shipment.time.to", "Дата"));
	ПараметрыМультизаказа.Вставить("ВремяОтгрузкиОбедС", ПолучитьЗначение(Данные, "shipment.time.breakFrom", "Дата"));
	ПараметрыМультизаказа.Вставить("ВремяОтгрузкиОбедПо", ПолучитьЗначение(Данные, "shipment.time.breakTo", "Дата"));
	ПараметрыМультизаказа.Вставить("ВариантВремениОтгрузки", ПолучитьЗначение(Данные, "shipment.timeOptionId"));
	
	ПараметрыМультизаказа.Вставить("ОтправительКонтрагентЮрФизЛицо", ПолучитьЗначение(Данные, "shipment.participant.counteragent.typeId",,1));
	ПараметрыМультизаказа.Вставить("ОтправительКонтрагентИНН", ПолучитьЗначение(Данные, "shipment.participant.counteragent.inn"));
	ПараметрыМультизаказа.Вставить("ОтправительКонтрагентКПП", ПолучитьЗначение(Данные, "shipment.participant.counteragent.kpp"));
	ПараметрыМультизаказа.Вставить("ОтправительКонтрагентНаименование", ПолучитьЗначение(Данные, "shipment.participant.counteragent.name"));
	ПараметрыМультизаказа.Вставить("ОтправительКонтрагентЮридическийАдресЗначение", ПолучитьЗначение(Данные, "shipment.participant.counteragent.legaladdress.value", "ХранилищеЗначения"));
	ПараметрыМультизаказа.Вставить("ОтправительКонтрагентЮридическийАдресПредставление", ПолучитьЗначение(Данные, "shipment.participant.counteragent.legaladdress.view",,""));
	
	УчастникГрузоперевозки = УчастникГрузоперевозкиПоУИДилиИННиКПП(ПараметрыМультизаказа.ОтправительКонтрагентИНН, ПараметрыМультизаказа.ОтправительКонтрагентКПП);
	Если УчастникГрузоперевозки <> Неопределено Тогда
		ПараметрыМультизаказа.Вставить("ОтправительКонтрагентСсылка", УчастникГрузоперевозки.Ссылка);
		ПараметрыМультизаказа.Вставить("ОтправительКонтрагентНаименование", УчастникГрузоперевозки.Наименование);
	КонецЕсли;
	
	КонтактноеЛицо = КонтактноеЛицоПоGUID(ПолучитьЗначение(Данные, "shipment.participant.contactPerson.id"));
	Если КонтактноеЛицо <> Неопределено Тогда
		ПараметрыМультизаказа.Вставить("ОтправительКонтактноеЛицоСсылка", КонтактноеЛицо.Ссылка);
	КонецЕсли;
	ПараметрыМультизаказа.Вставить("ОтправительКонтактноеЛицоНаименование", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.name"));
	ПараметрыМультизаказа.Вставить("ОтправительКонтактноеЛицоEmail", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.email"));
	ПараметрыМультизаказа.Вставить("ОтправительКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.phone.number"));
	ПараметрыМультизаказа.Вставить("ОтправительКонтактноеЛицоТелефонЗначение", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.phone.value", "ХранилищеЗначения"));
	ПараметрыМультизаказа.Вставить("ОтправительКонтактноеЛицоТелефонДополнительныйПредставление", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.phoneAdditional.number"));
	ПараметрыМультизаказа.Вставить("ОтправительКонтактноеЛицоТелефонДополнительныйЗначение", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.phoneAdditional.value", "ХранилищеЗначения"));
	
	// Оплата
	ПараметрыМультизаказа.Вставить("ФормаОплаты", ПолучитьЗначение(Данные, "payment.type.id",,1));
	ПараметрыМультизаказа.Вставить("ФормаОплатыНаименование", ПолучитьЗначение(Данные, "payment.type.name",,""));
	
	ПараметрыМультизаказа.Вставить("ПлательщикРоль", ПолучитьЗначение(Данные, "payment.payerRoleId",,0));

	ПараметрыМультизаказа.Вставить("ПлательщикКонтрагентЮрФизЛицо", ПолучитьЗначение(Данные, "payment.participant.counteragent.typeId",,1));
	ПараметрыМультизаказа.Вставить("ПлательщикКонтрагентИНН", ПолучитьЗначение(Данные, "payment.participant.counteragent.inn"));
	ПараметрыМультизаказа.Вставить("ПлательщикКонтрагентКПП", ПолучитьЗначение(Данные, "payment.participant.counteragent.kpp"));
	ПараметрыМультизаказа.Вставить("ПлательщикКонтрагентНаименование", ПолучитьЗначение(Данные, "payment.participant.counteragent.name"));
	ПараметрыМультизаказа.Вставить("ПлательщикКонтрагентЮридическийАдресЗначение", ПолучитьЗначение(Данные, "payment.participant.counteragent.legaladdress.value", "ХранилищеЗначения"));
	ПараметрыМультизаказа.Вставить("ПлательщикКонтрагентЮридическийАдресПредставление", ПолучитьЗначение(Данные, "payment.participant.counteragent.legaladdress.view"));
	
	КонтактноеЛицо = КонтактноеЛицоПоGUID(ПолучитьЗначение(Данные, "payment.participant.contactPerson.id"));
	Если КонтактноеЛицо <> Неопределено Тогда
		ПараметрыМультизаказа.Вставить("ПлательщикКонтактноеЛицоСсылка", КонтактноеЛицо.Ссылка);
	КонецЕсли;
	ПараметрыМультизаказа.Вставить("ПлательщикКонтактноеЛицоНаименование", ПолучитьЗначение(Данные, "payment.participant.contactPerson.name"));
	ПараметрыМультизаказа.Вставить("ПлательщикКонтактноеЛицоEmail", ПолучитьЗначение(Данные, "payment.participant.contactPerson.email"));
	ПараметрыМультизаказа.Вставить("ПлательщикКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(Данные, "payment.participant.contactPerson.phone.number"));
	ПараметрыМультизаказа.Вставить("ПлательщикКонтактноеЛицоТелефонЗначение", ПолучитьЗначение(Данные, "payment.participant.contactPerson.phone.value", "ХранилищеЗначения"));
	ПараметрыМультизаказа.Вставить("ПлательщикКонтактноеЛицоТелефонДополнительныйПредставление", ПолучитьЗначение(Данные, "payment.participant.contactPerson.phoneAdditional.number"));
	ПараметрыМультизаказа.Вставить("ПлательщикКонтактноеЛицоТелефонДополнительныйЗначение", ПолучитьЗначение(Данные, "payment.participant.contactPerson.phoneAdditional.value", "ХранилищеЗначения"));
	
	УчастникГрузоперевозки = УчастникГрузоперевозкиПоУИДилиИННиКПП(ПараметрыМультизаказа.ПлательщикКонтрагентИНН, ПараметрыМультизаказа.ПлательщикКонтрагентКПП);
	Если УчастникГрузоперевозки <> Неопределено Тогда
		ПараметрыМультизаказа.Вставить("ПлательщикКонтрагентСсылка", УчастникГрузоперевозки.Ссылка);
		ПараметрыМультизаказа.Вставить("ПлательщикКонтрагентНаименование", УчастникГрузоперевозки.Наименование);
	КонецЕсли;
	
	// Груз
	ПараметрыМультизаказа.Вставить("ГрузВес", ПолучитьЗначение(Данные, "cargo.weight"));
	ПараметрыМультизаказа.Вставить("ГрузОбъем", ПолучитьЗначение(Данные, "cargo.volume"));
	ПараметрыМультизаказа.Вставить("ГрузМаксимальнаяВысота", ПолучитьЗначение(Данные, "cargo.maxHeight"));
	ПараметрыМультизаказа.Вставить("ГрузМаксимальнаяДлина", ПолучитьЗначение(Данные, "cargo.maxLength"));
	ПараметрыМультизаказа.Вставить("ГрузМаксимальнаяШирина", ПолучитьЗначение(Данные, "cargo.maxWidth"));
	ПараметрыМультизаказа.Вставить("ГрузМаксимальныйВес", ПолучитьЗначение(Данные, "cargo.maxWeight"));
	ПараметрыМультизаказа.Вставить("ГрузСодержимое", ПолучитьЗначение(Данные, "cargo.description"));
	ПараметрыМультизаказа.Вставить("ГрузКоличествоГрузовыхМест", ПолучитьЗначение(Данные, "cargo.quantity"));
	ПараметрыМультизаказа.Вставить("ГрузСтоимость", ПолучитьЗначение(Данные, "cargo.value"));
	ПараметрыМультизаказа.Вставить("ГрузНегабаритныйВес", ПолучитьЗначение(Данные, "cargo.oversizedWeight",,0));
	ПараметрыМультизаказа.Вставить("ГрузНегабаритныйОбъем", ПолучитьЗначение(Данные, "cargo.oversizedVolume",,0));
	ПараметрыМультизаказа.Вставить("ГрузКоличествоНегабаритныхГрузовыхМест", ПолучитьЗначение(Данные, "cargo.oversizedQuantity"));
	
	ТарифНеГабарит = (ПараметрыМультизаказа.ГрузКоличествоНегабаритныхГрузовыхМест <> 0);
	ПараметрыМультизаказа.Вставить("ТарифНеГабарит", ТарифНеГабарит);
	
	// Услуги
	Услуги = ПолучитьЗначение(Данные, "services");
	МассивУслуг = Новый Массив;
	
	Если Услуги <> Неопределено Тогда
		Для Каждого ТекУслуга Из Услуги Цикл
			
			НоваяУслуга = НовыеПараметрыУслуги();
			НоваяУслуга.Идентификатор = ТекУслуга.id;
			НоваяУслуга.Наименование = ТекУслуга.name;
			НоваяУслуга.Категория = ТекУслуга.category;
			НоваяУслуга.Обязательная = ТекУслуга.required;
			НоваяУслуга.ПоказыватьИнформацию = ТекУслуга.isDescribed;
			
			НоваяУслуга.СтавкаНДСНаименование = ТекУслуга.vatRateName;
			НоваяУслуга.СтавкаНДСИдентификатор = ТекУслуга.vatRateId;
			НоваяУслуга.СуммаНДС = ТекУслуга.vat;
			НоваяУслуга.СуммаСНДС = ТекУслуга.sum;
			НоваяУслуга.СуммаСкидки = ТекУслуга.discountSum;
			
			Для Каждого ТекущееСвойство Из ТекУслуга.properties Цикл
				
				НовоеСвойство = НовыйПараметрыСвойстваУслуги();
				НовоеСвойство.Идентификатор = ТекущееСвойство.id;
				НовоеСвойство.Наименование = ТекущееСвойство.name;
				СтруктураТипа = ПолучитьЗначение(ТекущееСвойство, "type");
				НовоеСвойство.ТипЗначения = СервисДоставкиСлужебный.ПолучитьОписаниеТипаПоСтруктуре(СтруктураТипа);
				НовоеСвойство.ЕдиницаИзмерения = ТекущееСвойство.unit;
				НовоеСвойство.Значение = ТекущееСвойство.value;
				
				НоваяУслуга.СвойстваУслуги.Добавить(НовоеСвойство);
				
			КонецЦикла;
			
			МассивУслуг.Добавить(НоваяУслуга);
			
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыМультизаказа.Вставить("Услуги", МассивУслуг);
	
	// Дополнительные данные
	ДополнительныеДанные = ПолучитьЗначение(Данные, "additionalData");
	МассивДополнительныеДанные = Новый Массив;
	
	Если ДополнительныеДанные <> Неопределено Тогда
		
		Для Каждого ТекущиеДанные Из ДополнительныеДанные Цикл
			
			НоваяСтрока = Новый Структура();
			НоваяСтрока.Вставить("Наименование", ТекущиеДанные.name);
			НоваяСтрока.Вставить("ТипЗначения", ТекущиеДанные.type);
			НоваяСтрока.Вставить("Значение", ТекущиеДанные.value);
			НоваяСтрока.Вставить("Список", Новый Массив());
			
			Для Каждого ТекЭлемент Из ТекущиеДанные.items Цикл
				
				НовыйЭлемент = Новый Структура();
				НовыйЭлемент.Вставить("Наименование", ТекЭлемент.name);
				НовыйЭлемент.Вставить("ТипЗначения", ТекЭлемент.type);
				НовыйЭлемент.Вставить("Значение", ТекЭлемент.value);
				
				НоваяСтрока.Список.Добавить(НовыйЭлемент);
				
			КонецЦикла;
			
			МассивДополнительныеДанные.Добавить(НоваяСтрока);
			
		КонецЦикла;
	КонецЕсли;

	ПараметрыМультизаказа.Вставить("ДополнительныеДанныеЗаказа", МассивДополнительныеДанные);
	
	// Заказы
	Заказы = ПолучитьЗначение(Данные, "orders"); 
	МассивЗаказы = Новый Массив;
	
	Если Заказы <> Неопределено Тогда
		Для Каждого ТекущийЗаказ Из Заказы Цикл
			
			ПараметрыЗаказа = НовыйПараметрыЗаказаНаДоставкуДляСписка();
			
			ПараметрыЗаказа.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЗаказ, "id"));
			ПараметрыЗаказа.Вставить("ТрекНомер", ПолучитьЗначение(ТекущийЗаказ, "trackNumber"));
			ПараметрыЗаказа.Вставить("НомерЗаказа", ПолучитьЗначение(ТекущийЗаказ, "number"));
			ПараметрыЗаказа.Вставить("НомерЗаказаДляПечати", ПолучитьЗначение(ТекущийЗаказ, "barcode"));
			ПараметрыЗаказа.Вставить("ДатаЗаказа", ПолучитьЗначение(ТекущийЗаказ, "date", "Дата"));
			ПараметрыЗаказа.Вставить("ДатаСозданияЗаказа", ПолучитьЗначение(ТекущийЗаказ, "createDate", "Дата"));
			ПараметрыЗаказа.Вставить("Сумма", ПолучитьЗначение(ТекущийЗаказ, "totalSum","Число",0));
			ПараметрыЗаказа.Вставить("ПолучательИНН", ПолучитьЗначение(ТекущийЗаказ, "reciever.inn"));
			ПараметрыЗаказа.Вставить("ПолучательКПП", ПолучитьЗначение(ТекущийЗаказ, "reciever.kpp"));
			ПараметрыЗаказа.Вставить("ПолучательНаименование", ПолучитьЗначение(ТекущийЗаказ, "reciever.name",,));
			ПараметрыЗаказа.Вставить("АдресДоставкиПредставление", ПолучитьЗначение(ТекущийЗаказ, "deliveryPoint.address","Строка",""));
			ПараметрыЗаказа.Вставить("АдресДоставкиНаименование", ПолучитьЗначение(ТекущийЗаказ, "deliveryPoint.name","Строка",""));
			ПараметрыЗаказа.Вставить("АдресДоставкиТипНаименование", ПолучитьЗначение(ТекущийЗаказ, "deliveryPoint.typename","Строка",""));
			ПараметрыЗаказа.Вставить("ДоставкаДоАдреса", ПолучитьЗначение(ТекущийЗаказ, "deliveryToAddress"));
			ПараметрыЗаказа.Вставить("ДатаДоставки", ПолучитьЗначение(ТекущийЗаказ, "deliveryDate","Дата"));
			ПараметрыЗаказа.Вставить("ТарифНаименование", ПолучитьЗначение(ТекущийЗаказ, "tariff.name"));
			ПараметрыЗаказа.Вставить("ТарифИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "tariff.id"));
			ПараметрыЗаказа.Вставить("Состояние", ПолучитьЗначение(ТекущийЗаказ, "status",, НСтр("ru='Состояние неизвестно'")));
			ПараметрыЗаказа.Вставить("СостояниеИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "statusId",, 0));
			ПараметрыЗаказа.Вставить("ВалютаКод", ПолучитьЗначение(ТекущийЗаказ, "currency.code",,"643"));
			ПараметрыЗаказа.Вставить("ВалютаНаименование", ПолучитьЗначение(ТекущийЗаказ, "currency.name",,"RUB"));
			ПараметрыЗаказа.Вставить("КоличествоГрузовыхМест", ПолучитьЗначение(ТекущийЗаказ, "cargo.quantity","Число",0));
			ПараметрыЗаказа.Вставить("ГрузВес", ПолучитьЗначение(ТекущийЗаказ, "cargo.weight","Число",0));
			ПараметрыЗаказа.Вставить("ГрузОбъем", ПолучитьЗначение(ТекущийЗаказ, "cargo.volume","Число",0));
			ПараметрыЗаказа.Вставить("ГрузСтоимость", ПолучитьЗначение(ТекущийЗаказ, "cargo.value","Число",0));
			ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоНаименование", ПолучитьЗначение(ТекущийЗаказ, "delivery.contactPerson.name",, ""));
			ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(ТекущийЗаказ, "delivery.contactPerson.phone.view",, ""));
			
			МассивЗаказы.Добавить(ПараметрыЗаказа);
			
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыМультизаказа.Вставить("Заказы", МассивЗаказы);
	
	// Данные об исполнителе
	ПараметрыМультизаказа.Вставить("ИсполнительНаименование", ПолучитьЗначение(Данные, "performer.name"));
	ПараметрыМультизаказа.Вставить("ИсполнительЮридическоеЛицоНаименование", ПолучитьЗначение(Данные, "performer.legalName"));
	ПараметрыМультизаказа.Вставить("ИсполнительТелефон", ПолучитьЗначение(Данные, "performer.phone"));
	ПараметрыМультизаказа.Вставить("АвтомобильМарка", ПолучитьЗначение(Данные, "performer.carModel"));
	ПараметрыМультизаказа.Вставить("АвтомобильНомер", ПолучитьЗначение(Данные, "performer.carNumber"));
	
	ПараметрыМультизаказа.Вставить("ДополнительнаяИнформация", ПолучитьЗначение(Данные, "additionalInfo"));
	
	СервисДоставкиКлиентСервер.ЗаполнитьСтруктуруПоЛинейнымДанным(Параметры, ПараметрыМультизаказа);
	
	Результат.Вставить("Данные", Параметры);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаОбновитьМультизаказНаДоставку(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним данные
	Результат.Вставить("ДатаОбновления", ПолучитьЗначение(СтруктураОтвета, "updateDate", "Дата"));
	Результат.Вставить("ЗаказОбновлен", ПолучитьЗначение(СтруктураОтвета, "isUpdated", , Истина));
	
	ОбработатьРезультатЗапросаПолучитьМультизаказНаДоставку(СтруктураОтвета, Результат);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаОтменитьМультизаказНаДоставку(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним данные
	Результат.Вставить("Идентификатор", ПолучитьЗначение(СтруктураОтвета, "id"));	// Устарело
	Результат.Вставить("ИдентификаторДокумента", Новый УникальныйИдентификатор(ПолучитьЗначение(СтруктураОтвета, "id")));
	Результат.Вставить("Статус", ПолучитьЗначение(СтруктураОтвета, "status.name")); // Устарело
	Результат.Вставить("СтатусИдентификатор", ПолучитьЗначение(СтруктураОтвета, "status.id")); // Устарело
	Результат.Вставить("Состояние", ПолучитьЗначение(СтруктураОтвета, "status.name"));
	Результат.Вставить("СостояниеИдентификатор", ПолучитьЗначение(СтруктураОтвета, "status.id"));
	Результат.Вставить("ДокументОтменен", ПолучитьЗначение(СтруктураОтвета, "result.IsCancel"));
	Результат.Вставить("ДоступнаОтмена", ПолучитьЗначение(СтруктураОтвета, "result.availableCancel"));
	Результат.Вставить("ДоступнаПлатнаяОтмена", ПолучитьЗначение(СтруктураОтвета, "result.availablePaidCancel"));
	Результат.Вставить("СуммаПлатнойОтмены", ПолучитьЗначение(СтруктураОтвета, "result.PaidCancel"));
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьЗаказыНаДоставку(СтруктураОтвета, Результат, ПараметрыЗапроса)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним блок "Страницы"
	БлокСтраницыОтвета = ПолучитьЗначение(СтруктураОтвета, "page");
	
	ПараметрыСтраницы = Новый Структура();
	
	ПараметрыСтраницы.Вставить("Страница", ПолучитьЗначение(БлокСтраницыОтвета, "number",,1));
	ПараметрыСтраницы.Вставить("РазмерСтраницы", ПолучитьЗначение(БлокСтраницыОтвета, "size",,100));
	ПараметрыСтраницы.Вставить("КоличествоСтрок", ПолучитьЗначение(БлокСтраницыОтвета, "totalElements",,0));
	ПараметрыСтраницы.Вставить("КоличествоСтраниц", ПолучитьЗначение(БлокСтраницыОтвета, "totalPages",,1));
	
	Результат.Вставить("Страницы", ПараметрыСтраницы);
	
	КэшВалют = Новый Соответствие;
	КэшВалют.Вставить("643", "RUB");
	
	// Заполним список документов
	БлокСпискаОтвета = ПолучитьЗначение(СтруктураОтвета, "_embedded",,Новый Структура());
	СписокЗаказовОтвета = ПолучитьЗначение(БлокСпискаОтвета, "items",,Новый Массив());
	
	МенеджерыОбъектовДокументовОснованийЗаказаНаДоставку = МенеджерыОбъектовДокументовОснованийЗаказаНаДоставку(Ложь);
	
	СписокЗаказов = Новый Массив();
	Для Каждого ТекущийЗаказ Из СписокЗаказовОтвета Цикл
		
		ПараметрыЗаказа = НовыйПараметрыЗаказаНаДоставкуДляСписка();
		
		ПараметрыЗаказа.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЗаказ, "id"));	// Устарело
		ПараметрыЗаказа.Вставить("ИдентификаторДокумента", Новый УникальныйИдентификатор(ПолучитьЗначение(ТекущийЗаказ, "id")));
		ПараметрыЗаказа.Вставить("ТрекНомер", ПолучитьЗначение(ТекущийЗаказ, "trackNumber"));
		ПараметрыЗаказа.Вставить("НомерЗаказа", ПолучитьЗначение(ТекущийЗаказ, "number"));
		ПараметрыЗаказа.Вставить("ОбязательныеРеквизитыЗаполнены", ПолучитьЗначение(ТекущийЗаказ, "isFilled",,Ложь));
		
		ПараметрыЗаказа.Вставить("МультизаказДата", ПолучитьЗначение(ТекущийЗаказ, "multiOrder.date","Дата"));
		ПараметрыЗаказа.Вставить("МультизаказНомер", ПолучитьЗначение(ТекущийЗаказ, "multiOrder.number",,""));
		ПараметрыЗаказа.Вставить("МультизаказИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "multiOrder.id",,""));
		ПараметрыЗаказа.Вставить("МультизаказТипНаименование", ПолучитьЗначение(ТекущийЗаказ, "multiOrder.type.name",,""));
		ПараметрыЗаказа.Вставить("МультизаказТипИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "multiOrder.type.id",,""));
		ПараметрыЗаказа.Вставить("МультизаказПредставление", ПредставлениеМультизаказа(ПараметрыЗаказа));
		ПараметрыЗаказа.Вставить("ЭтоМультизаказ", ПолучитьЗначение(ТекущийЗаказ, "isMultiOrder",,Ложь));
		ПараметрыЗаказа.Вставить("НомерЗаказаДляПечати", ПолучитьЗначение(ТекущийЗаказ, "barcode"));
		ПараметрыЗаказа.Вставить("ДатаЗаказа", ЛокальноеВремяСеанса(ПолучитьЗначение(ТекущийЗаказ, "date", "Дата")));
		ПараметрыЗаказа.Вставить("ДатаСозданияЗаказа", ПолучитьЗначение(ТекущийЗаказ, "createDate", "Дата"));
		
		СписокИдентификаторовДокументовОснований = ПолучитьЗначение(ТекущийЗаказ, "baseDocuments", , Новый Массив);
		КоличествоИдентификаторовДокументовОснований = 0;

		ДокументыОснования = Новый СписокЗначений;

		Для Каждого ТекИдентификатор Из СписокИдентификаторовДокументовОснований Цикл
			
			Если ТекИдентификатор = "00000000-0000-0000-0000-000000000000" Тогда
				Продолжить;
			КонецЕсли;

			ТекДокументОснование = ДокументОснованияЗаказаНаДоставкуПоУИД(ТекИдентификатор,
				МенеджерыОбъектовДокументовОснованийЗаказаНаДоставку);
			Если ТекДокументОснование <> Неопределено Тогда
				ДокументыОснования.Добавить(ТекДокументОснование);
			КонецЕсли;

			КоличествоИдентификаторовДокументовОснований = КоличествоИдентификаторовДокументовОснований + 1;
			
		КонецЦикла;

		ПараметрыЗаказа.Вставить("ДокументыОснования", ДокументыОснования);
		ПараметрыЗаказа.Вставить("ЕстьДокументыОснования", ДокументыОснования.Количество() > 0);
		ПараметрыЗаказа.Вставить("ДокументОснованиеПредставление", ПредставлениеОснованияДляСписка(ДокументыОснования,
			КоличествоИдентификаторовДокументовОснований));
		
		ПараметрыЗаказа.Вставить("Сумма", ПолучитьЗначение(ТекущийЗаказ, "totalSum","Число",0));
		ПараметрыЗаказа.Вставить("ОтправительИНН", ПолучитьЗначение(ТекущийЗаказ, "sender.inn"));
		ПараметрыЗаказа.Вставить("ОтправительКПП", ПолучитьЗначение(ТекущийЗаказ, "sender.kpp"));
		ПараметрыЗаказа.Вставить("ОтправительНаименование", ПолучитьЗначение(ТекущийЗаказ, "sender.name"));
		
		ПараметрыЗаказа.Вставить("ОтправительАдресПредставление", ПолучитьЗначение(ТекущийЗаказ, "shipment.address.view"));
		ПараметрыЗаказа.Вставить("ОтправительАдресЗначение", ПолучитьЗначение(ТекущийЗаказ, "shipment.address.value", "ХранилищеЗначения"));
		ПараметрыЗаказа.Вставить("ОтправительАдресШирота", ПолучитьЗначение(ТекущийЗаказ, "shipment.address.latitude",, 0));
		ПараметрыЗаказа.Вставить("ОтправительАдресДолгота", ПолучитьЗначение(ТекущийЗаказ, "shipment.address.longitude",, 0));
		ПараметрыЗаказа.Вставить("ДатаОтгрузки", ПолучитьЗначение(ТекущийЗаказ, "shipment.Date","Дата"));
		ПараметрыЗаказа.Вставить("ВариантВремениОтгрузки", ПолучитьЗначение(ТекущийЗаказ, "shipment.timeOptionId",,0));
		ПараметрыЗаказа.Вставить("ВремяОтгрузкиС", ПолучитьЗначение(ТекущийЗаказ, "shipment.time.from", "Дата"));
		ПараметрыЗаказа.Вставить("ВремяОтгрузкиПо", ПолучитьЗначение(ТекущийЗаказ, "shipment.time.to", "Дата"));
		
		ПараметрыЗаказа.Вставить("АдресОтгрузкиИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "shipmentPoint.id","Строка",""));
		ПараметрыЗаказа.Вставить("АдресОтгрузкиПредставление", ПолучитьЗначение(ТекущийЗаказ, "shipmentPoint.address","Строка",""));
		ПараметрыЗаказа.Вставить("АдресОтгрузкиНаименование", ПолучитьЗначение(ТекущийЗаказ, "shipmentPoint.name","Строка",""));
		ПараметрыЗаказа.Вставить("АдресОтгрузкиТипНаименование", ПолучитьЗначение(ТекущийЗаказ, "shipmentPoint.typename","Строка",""));
		ПараметрыЗаказа.Вставить("АдресОтгрузкиПунктПриемаГрузаНаселенныйПунктИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "shipmentPoint.cityID", "Число", 0));
		
		ПараметрыЗаказа.Вставить("ПолучательИНН", ПолучитьЗначение(ТекущийЗаказ, "reciever.inn"));
		ПараметрыЗаказа.Вставить("ПолучательКПП", ПолучитьЗначение(ТекущийЗаказ, "reciever.kpp"));
		ПараметрыЗаказа.Вставить("ПолучательНаименование", ПолучитьЗначение(ТекущийЗаказ, "reciever.name",,));

		ПараметрыЗаказа.Вставить("ПолучательАдресПредставление", ПолучитьЗначение(ТекущийЗаказ, "delivery.address.view"));
		ПараметрыЗаказа.Вставить("ПолучательАдресЗначение", ПолучитьЗначение(ТекущийЗаказ, "delivery.address.value", "ХранилищеЗначения"));
		ПараметрыЗаказа.Вставить("ПолучательАдресШирота", ПолучитьЗначение(ТекущийЗаказ, "delivery.address.latitude",, 0));
		ПараметрыЗаказа.Вставить("ПолучательАдресДолгота", ПолучитьЗначение(ТекущийЗаказ, "delivery.address.longitude",, 0));
		
		ПараметрыЗаказа.Вставить("АдресДоставкиИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "deliveryPoint.id","Строка",""));
		ПараметрыЗаказа.Вставить("АдресДоставкиПредставление", ПолучитьЗначение(ТекущийЗаказ, "deliveryPoint.address","Строка",""));
		ПараметрыЗаказа.Вставить("АдресДоставкиНаименование", ПолучитьЗначение(ТекущийЗаказ, "deliveryPoint.name","Строка",""));
		ПараметрыЗаказа.Вставить("АдресДоставкиТипНаименование", ПолучитьЗначение(ТекущийЗаказ, "deliveryPoint.typename","Строка",""));
		ПараметрыЗаказа.Вставить("АдресДоставкиПунктВыдачиГрузаНаселенныйПунктИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "deliveryPoint.cityID", "Число", 0));
		
		ПараметрыЗаказа.Вставить("ПунктВыдачиКлиентаКод", ПолучитьЗначение(ТекущийЗаказ, "pickuppoint.id","Строка",""));
		ПараметрыЗаказа.Вставить("ПунктВыдачиКлиентаНаименование", ПолучитьЗначение(ТекущийЗаказ, "pickuppoint.name","Строка",""));
		
		ПараметрыЗаказа.Вставить("ЗаборОтАдреса", ПолучитьЗначение(ТекущийЗаказ, "deliveryFromAddress"));
		ПараметрыЗаказа.Вставить("ДоставкаДоАдреса", ПолучитьЗначение(ТекущийЗаказ, "deliveryToAddress"));
		ПараметрыЗаказа.Вставить("ДатаДоставки", ПолучитьЗначение(ТекущийЗаказ, "deliveryDate","Дата"));
		ПараметрыЗаказа.Вставить("ПеревозчикНаименование", ПолучитьЗначение(ТекущийЗаказ, "carrier.name"));
		ПараметрыЗаказа.Вставить("ПеревозчикИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "carrier.id"));
		ПараметрыЗаказа.Вставить("ТарифНаименование", ПолучитьЗначение(ТекущийЗаказ, "tariff.name"));
		ПараметрыЗаказа.Вставить("ТарифИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "tariff.id"));
		ПараметрыЗаказа.Вставить("ПлательщикИНН", ПолучитьЗначение(ТекущийЗаказ, "payer.inn"));
		ПараметрыЗаказа.Вставить("ПлательщикКПП", ПолучитьЗначение(ТекущийЗаказ, "payer.kpp"));
		ПараметрыЗаказа.Вставить("ПлательщикНаименование", ПолучитьЗначение(ТекущийЗаказ, "payer.name"));
		ПараметрыЗаказа.Вставить("Оплачен", ПолучитьЗначение(ТекущийЗаказ, "isPaid",, Ложь));
		ПараметрыЗаказа.Вставить("НаложенныйПлатежПолучен", ПолучитьЗначение(ТекущийЗаказ, "paymentOnDelivery.isPaid",, Ложь));
		ПараметрыЗаказа.Вставить("СуммаНаложенногоПлатежа", ПолучитьЗначение(ТекущийЗаказ, "paymentOnDelivery.sum",, 0));
		ПараметрыЗаказа.Вставить("НаложенныйПлатежВидОплаты", ПолучитьЗначение(ТекущийЗаказ, "paymentOnDelivery.method",, 0));
		ПараметрыЗаказа.Вставить("СуммаНаложенногоПлатежаДополнительный", ПолучитьЗначение(ТекущийЗаказ, "paymentOnDelivery.sumAdditional",, 0));
		ПараметрыЗаказа.Вставить("НаложенныйПлатежВидОплатыДополнительный", ПолучитьЗначение(ТекущийЗаказ, "paymentOnDelivery.methodAdditional",, 0));
		ПараметрыЗаказа.Вставить("Состояние", ПолучитьЗначение(ТекущийЗаказ, "status",, НСтр("ru='Состояние неизвестно'")));
		ПараметрыЗаказа.Вставить("СостояниеИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "statusId",, 0));
		ПараметрыЗаказа.Вставить("ВалютаКод", ПолучитьЗначение(ТекущийЗаказ, "currency.code",,"643"));
		ПараметрыЗаказа.Вставить("ВалютаНаименование", ПолучитьЗначение(ТекущийЗаказ, "currency.name","","RUB"));
		
		Если Не ПустаяСтрока(ПараметрыЗаказа.ВалютаКод) И ПустаяСтрока(ПараметрыЗаказа.ВалютаНаименование) Тогда
			//@skip-check query-in-loop - сначала используется кэш, а потом уже запрос
			ВалютаНаименование = ПолучитьНаименованиеВалютыПоКодуСУчетомКэша(ПараметрыЗаказа.ВалютаКод, КэшВалют);
			ПараметрыЗаказа.ВалютаНаименование = ВалютаНаименование;
		КонецЕсли;
		
		ПараметрыЗаказа.Вставить("ДоступнаОтмена", ПолучитьЗначение(ТекущийЗаказ, "availableCancel",, Ложь));
		ПараметрыЗаказа.Вставить("ДоступноРедактированиеПослеОформления", ПолучитьЗначение(ТекущийЗаказ, "availableEdit",, Ложь));
		ПараметрыЗаказа.Вставить("КоличествоГрузовыхМест", ПолучитьЗначение(ТекущийЗаказ, "cargo.quantity","Число",0));
		ПараметрыЗаказа.Вставить("ГрузВес", ПолучитьЗначение(ТекущийЗаказ, "cargo.weight","Число",0));
		ПараметрыЗаказа.Вставить("ГрузОбъем", ПолучитьЗначение(ТекущийЗаказ, "cargo.volume","Число",0));
		
		ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "shipment.contactPerson.id",, ""));
		ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоНаименование", ПолучитьЗначение(ТекущийЗаказ, "shipment.contactPerson.name",, ""));
		ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоEmail", ПолучитьЗначение(ТекущийЗаказ, "shipment.contactPerson.email",, ""));
		ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(ТекущийЗаказ, "shipment.contactPerson.phone.view",, ""));
		ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонЗначение", ПолучитьЗначение(ТекущийЗаказ, "shipment.contactPerson.phone.value", "ХранилищеЗначения"));
		ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонДополнительныйПредставление", ПолучитьЗначение(ТекущийЗаказ, "shipment.contactPerson.phoneAdditional.view"));
		ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонДополнительныйЗначение", ПолучитьЗначение(ТекущийЗаказ, "shipment.contactPerson.phoneAdditional.value", "ХранилищеЗначения"));

		ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "delivery.contactPerson.id",, ""));
		ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоНаименование", ПолучитьЗначение(ТекущийЗаказ, "delivery.contactPerson.name",, ""));
		ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоEmail", ПолучитьЗначение(ТекущийЗаказ, "delivery.contactPerson.email",, ""));
		ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(ТекущийЗаказ, "delivery.contactPerson.phone.view",, ""));
		ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонЗначение", ПолучитьЗначение(ТекущийЗаказ, "delivery.contactPerson.phone.value", "ХранилищеЗначения"));
		ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонДополнительныйПредставление", ПолучитьЗначение(ТекущийЗаказ, "delivery.contactPerson.phoneAdditional.view"));
		ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонДополнительныйЗначение", ПолучитьЗначение(ТекущийЗаказ, "delivery.contactPerson.phoneAdditional.value", "ХранилищеЗначения"));
		
		ПараметрыЗаказа.Вставить("КурьерИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "performer.id",, ""));
		ПараметрыЗаказа.Вставить("КурьерНаименование", ПолучитьЗначение(ТекущийЗаказ, "performer.name",, ""));
		
		ПараметрыЗаказа.Вставить("ДополнительнаяИнформация", ПолучитьЗначение(ТекущийЗаказ, "additionalInfo",, ""));
		
		СписокЗаказов.Добавить(ПараметрыЗаказа);
		
		ПараметрыСозданияДанныхЗаказа = СервисДоставкиКлиентСервер.НовыйПараметрыЗаписиДанныхЗаказаСервисаДоставки();
		ЗаполнитьЗначенияСвойств(ПараметрыСозданияДанныхЗаказа, ПараметрыЗаказа, , "ДокументыОснования");
		ПараметрыСозданияДанныхЗаказа.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ПеречислениеГрузоперевозчика(ПараметрыЗапроса.ТипГрузоперевозки);
		ПараметрыСозданияДанныхЗаказа.Организация = ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка;
		ПараметрыСозданияДанныхЗаказа.ДокументыОснования = ПараметрыЗаказа.ДокументыОснования.ВыгрузитьЗначения();
		ПараметрыСозданияДанныхЗаказа.Представление = СервисДоставкиКлиентСервер.ПредставлениеЗаказаНаДоставку(ПараметрыЗаказа, Истина);
		ПараметрыСозданияДанныхЗаказа.СостояниеПредставление = ПараметрыЗаказа.Состояние;
		ПараметрыСозданияДанныхЗаказа.Номер = ПараметрыЗаказа.НомерЗаказа;
		ПараметрыСозданияДанныхЗаказа.Дата = ПараметрыЗаказа.ДатаЗаказа;
		СоздатьОбновитьДанныеЗаказа(ПараметрыСозданияДанныхЗаказа);
		
	КонецЦикла;
	
	Результат.Вставить("Список", СписокЗаказов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьГрафикДвиженияЗаказа(СтруктураОтвета, Результат, ПараметрыЗапроса)
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = НовыйПараметрыОтветаПолучитьГрафикДвиженияЗаказа();
	
	ПараметрыЗаказа = Новый Структура;
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(Параметры, ПараметрыЗаказа);
	
	Если СервисДоставкиКлиентСервер.ТипСервисаИнтеграции(ПараметрыЗапроса.ТипГрузоперевозки) = СервисДоставкиКлиентСервер.ТипСервисаИнтеграции1СЭлемент() Тогда
		Данные = СтруктураОтвета;
	Иначе
		Данные = СтруктураОтвета.data;
	КонецЕсли;
	
	ПараметрыЗаказа.Вставить("ИдентификаторЗаказа", ПолучитьЗначение(Данные, "id"));
	ПараметрыЗаказа.Вставить("ТрекНомер", ПолучитьЗначение(Данные, "trackNumber"));
	ПараметрыЗаказа.Вставить("НомерЗаказа", ПолучитьЗначение(Данные, "number"));
	ПараметрыЗаказа.Вставить("ДатаЗаказа", ПолучитьЗначение(Данные, "date","Дата"));
	ПараметрыЗаказа.Вставить("ДатаСозданияЗаказа", ПолучитьЗначение(Данные, "createDate", "Дата"));
	
	ПараметрыЗаказа.Вставить("Состояние", ПолучитьЗначение(Данные, "status.name",, НСтр("ru='Состояние неизвестно'")));
	ПараметрыЗаказа.Вставить("СостояниеИдентификатор", ПолучитьЗначение(Данные, "status.id",, 0));
	ПараметрыЗаказа.Вставить("Заблокирован", ПолучитьЗначение(Данные, "isLocked",, Ложь));
	
	ПараметрыЗаказа.Вставить("ТипГрузоперевозки", ПолучитьЗначение(Данные, "transportationType", "Число"));
	Если Не ЗначениеЗаполнено(ПараметрыЗаказа.ТипГрузоперевозки) Тогда
		ПараметрыЗаказа.ТипГрузоперевозки = ПолучитьЗначение(Данные, "transportationTypeId", "Число");
	КонецЕсли;
	
	ПараметрыЗаказа.Вставить("ГрузоперевозчикНаименование", ПолучитьЗначение(Данные, "carrier.name"));
	ПараметрыЗаказа.Вставить("ГрузоперевозчикИдентификатор", ПолучитьЗначение(Данные, "carrier.id"));
	ПараметрыЗаказа.Вставить("ГрузоперевозчикТелефон", ПолучитьЗначение(Данные, "carrier.phone"));
	ПараметрыЗаказа.Вставить("ТарифНаименование", ПолучитьЗначение(Данные, "tariff.name"));
	ПараметрыЗаказа.Вставить("ТарифИдентификатор", ПолучитьЗначение(Данные, "tariff.id"));
	ПараметрыЗаказа.Вставить("ДополнительнаяИнформация", ПолучитьЗначение(Данные, "additionalInfo"));
	
	// Отгрузка
	ПараметрыЗаказа.Вставить("СпособОтгрузкиИдентификатор", ПолучитьЗначение(Данные, "shipment.type.id"));
	ПараметрыЗаказа.Вставить("СпособОтгрузкиНаименование", ПолучитьЗначение(Данные, "shipment.type.name"));
	ПараметрыЗаказа.СпособОтгрузкиНаименование = ?(ЗначениеЗаполнено(ПараметрыЗаказа.СпособОтгрузкиНаименование),
		ПараметрыЗаказа.СпособОтгрузкиНаименование,
		СервисДоставкиКлиентСервер.ПредставлениеСпособаОтгрузки(ПараметрыЗаказа.СпособОтгрузкиИдентификатор));
	ПараметрыЗаказа.Вставить("ДатаОтгрузки", ПолучитьЗначение(Данные, "shipment.date","Дата"));
	
	ПараметрыЗаказа.Вставить("ТочкаОтправленияИдентификатор", ПолучитьЗначение(Данные, "shipment.point.id"));
	ПараметрыЗаказа.Вставить("ТочкаОтправленияНаименование", ПолучитьЗначение(Данные, "shipment.point.name"));
	ПараметрыЗаказа.Вставить("ТочкаОтправленияАдрес", ПолучитьЗначение(Данные, "shipment.point.address"));
	ПараметрыЗаказа.Вставить("ТочкаОтправленияТипИдентификатор", ПолучитьЗначение(Данные, "shipment.point.type.id"));
	ПараметрыЗаказа.Вставить("ТочкаОтправленияТипНаименование", ПолучитьЗначение(Данные, "shipment.point.type.name"));
	ПараметрыЗаказа.Вставить("ТочкаОтправленияГород", ПолучитьЗначение(Данные, "shipment.point.city"));
	ПараметрыЗаказа.Вставить("ТочкаОтправленияТелефон", ПолучитьЗначение(Данные, "shipment.point.phone"));
	
	// Доставка
	ПараметрыЗаказа.Вставить("СпособДоставкиИдентификатор", ПолучитьЗначение(Данные, "delivery.type.id"));
	ПараметрыЗаказа.Вставить("СпособДоставкиНаименование", ПолучитьЗначение(Данные, "delivery.type.name"));
	ПараметрыЗаказа.СпособДоставкиНаименование = ?(ЗначениеЗаполнено(ПараметрыЗаказа.СпособДоставкиНаименование),
		ПараметрыЗаказа.СпособДоставкиНаименование,
		СервисДоставкиКлиентСервер.ПредставлениеСпособаДоставки(ПараметрыЗаказа.СпособДоставкиИдентификатор));
	ПараметрыЗаказа.Вставить("ДатаДоставки", ПолучитьЗначение(Данные, "delivery.date","Дата"));
	
	ПараметрыЗаказа.Вставить("ТочкаНазначенияИдентификатор", ПолучитьЗначение(Данные, "delivery.point.id"));
	ПараметрыЗаказа.Вставить("ТочкаНазначенияНаименование", ПолучитьЗначение(Данные, "delivery.point.name"));
	ПараметрыЗаказа.Вставить("ТочкаНазначенияАдрес", ПолучитьЗначение(Данные, "delivery.point.address"));
	ПараметрыЗаказа.Вставить("ТочкаНазначенияТипИдентификатор", ПолучитьЗначение(Данные, "delivery.point.type.id"));
	ПараметрыЗаказа.Вставить("ТочкаНазначенияТипНаименование", ПолучитьЗначение(Данные, "delivery.point.type.name"));
	ПараметрыЗаказа.Вставить("ТочкаНазначенияГород", ПолучитьЗначение(Данные, "delivery.point.city"));
	ПараметрыЗаказа.Вставить("ТочкаНазначенияТелефон", ПолучитьЗначение(Данные, "delivery.point.phone"));
	
	СписокЭлементов = ПолучитьЗначение(Данные, "schedule",,Новый Структура());
	
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = Новый Структура();
		
		ДанныеЭлемента.Вставить("Дата", ПолучитьЗначение(ТекущийЭлемент, "date", "Дата"));
		ДанныеЭлемента.Вставить("ДатаМаксимальная", ПолучитьЗначение(ТекущийЭлемент, "dateMax", "Дата"));
		ДанныеЭлемента.Вставить("ЭтоФакт", ПолучитьЗначение(ТекущийЭлемент, "isFact",,Ложь));
		ДанныеЭлемента.Вставить("СостояниеНаименование", ПолучитьЗначение(ТекущийЭлемент, "status.name"));
		ДанныеЭлемента.Вставить("СостояниеИдентификатор", ПолучитьЗначение(ТекущийЭлемент, "status.id"));
		ДанныеЭлемента.Вставить("МестоположениеИдентификатор", ПолучитьЗначение(ТекущийЭлемент, "point.id"));
		ДанныеЭлемента.Вставить("МестоположениеГород", ПолучитьЗначение(ТекущийЭлемент, "point.city"));
		ДанныеЭлемента.Вставить("МестоположениеНаименование", ПолучитьЗначение(ТекущийЭлемент, "point.name"));
		ДанныеЭлемента.Вставить("МестоположениеАдрес", ПолучитьЗначение(ТекущийЭлемент, "point.adress"));
		ДанныеЭлемента.Вставить("МестоположениеТипИдентификатор", ПолучитьЗначение(ТекущийЭлемент, "point.type.id"));
		ДанныеЭлемента.Вставить("МестоположениеТипНаименование", ПолучитьЗначение(ТекущийЭлемент, "point.type.name"));
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	ПараметрыЗаказа.Вставить("ГрафикДвиженияЗаказа", НовыйСписокЭлементов);
	
	Результат.Вставить("Данные", ПараметрыЗаказа);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьДоступныеФормы(СтруктураОтвета, Результат)
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки") И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокОтветаСписок = ПолучитьЗначение(СтруктураОтвета, "_embedded", , Новый Структура);
	СписокЭлементов = ПолучитьЗначение(БлокОтветаСписок, "items", , Новый Массив);
	
	НовыйСписокЭлементов = Новый Массив;
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = Новый Структура;
		
		ДанныеЭлемента.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент, "id"));
		ДанныеЭлемента.Вставить("ИдентификаторЗаказа", ПолучитьЗначение(ТекущийЭлемент, "orderId"));
		ДанныеЭлемента.Вставить("ИдентификаторДокумента", ПолучитьЗначение(ТекущийЭлемент, "docId"));
		ДанныеЭлемента.Вставить("Наименование", ПолучитьЗначение(ТекущийЭлемент, "name"));
		ДанныеЭлемента.Вставить("Расширение", ПолучитьЗначение(ТекущийЭлемент, "extension"));
		ДанныеЭлемента.Вставить("Обязательная", ПолучитьЗначение(ТекущийЭлемент, "required"));
		ДанныеЭлемента.Вставить("НаименованиеПараметра", ПолучитьЗначение(ТекущийЭлемент, "parameterName", , ""));
		
		ДоступныеПараметры = Новый СписокЗначений;
		СписокПараметров = ПолучитьЗначение(ТекущийЭлемент, "parameters", , Новый Массив);
		Для Каждого Параметр Из СписокПараметров Цикл
			ДоступныеПараметры.Добавить(ПолучитьЗначение(Параметр, "id"), ПолучитьЗначение(Параметр, "name"));
		КонецЦикла;
		ДанныеЭлемента.Вставить("ДоступныеПараметры", ДоступныеПараметры);
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("Список", НовыйСписокЭлементов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьФайлыДоступныхФорм(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокСпискаОтвета = ПолучитьЗначение(СтруктураОтвета, "_embedded");
	
	СписокФайловПечатныхФорм = Новый Массив();
	
	Если БлокСпискаОтвета <> Неопределено Тогда
		
		СписокФайловПечатныхФормИсточника = ПолучитьЗначение(БлокСпискаОтвета, "items",,Новый Массив());
		
		Для Каждого ТекущийЗаказ Из СписокФайловПечатныхФормИсточника Цикл
			
			ПараметрыФормы = НовыйФайлПечатнойФормы();
			
			ПараметрыФормы.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЗаказ, "id"));
			ПараметрыФормы.Вставить("ИдентификаторЗаказа", ПолучитьЗначение(ТекущийЗаказ, "orderId"));
			ПараметрыФормы.Вставить("Наименование", ПолучитьЗначение(ТекущийЗаказ, "name"));
			ПараметрыФормы.Вставить("Данные", ПолучитьЗначение(ТекущийЗаказ, "data"));
			ПараметрыФормы.Вставить("Расширение", ПолучитьЗначение(ТекущийЗаказ, "extension"));
			ПараметрыФормы.Вставить("Кодировка", ПолучитьЗначение(ТекущийЗаказ, "encodingMethod"));
			
			СписокФайловПечатныхФорм.Добавить(ПараметрыФормы);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Результат.Вставить("Список", СписокФайловПечатныхФорм);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьСостояния(СтруктураОтвета, Результат, ПараметрыЗапроса)
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки") И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокОтветаСписок = ПолучитьЗначение(СтруктураОтвета, "_embedded",,Новый Структура());
	СписокЭлементов = ПолучитьЗначение(БлокОтветаСписок, "items",,Новый Массив());
	
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = Новый Структура();
		
		ДанныеЭлемента.Вставить("ИдентификаторГруппы", ПолучитьЗначение(ТекущийЭлемент, "groupId"));
		ДанныеЭлемента.Вставить("НаименованиеГруппы", ПолучитьЗначение(ТекущийЭлемент, "groupName"));
		ДанныеЭлемента.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент, "id"));
		ДанныеЭлемента.Вставить("Наименование", ПолучитьЗначение(ТекущийЭлемент, "name"));
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("Список", НовыйСписокЭлементов);
	
	Кэш = Новый Структура(СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояния(), Результат);
	ОбновитьКэшированныеЗначения(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, ПараметрыЗапроса.ТипГрузоперевозки, Кэш);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьТипыГрузоперевозок(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокОтветаСписок = ПолучитьЗначение(СтруктураОтвета, "_embedded",,Новый Структура());
	СписокЭлементов = ПолучитьЗначение(БлокОтветаСписок, "items",,Новый Массив());
	
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = Новый Структура();
		
		ДанныеЭлемента.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент, "number"));
		ДанныеЭлемента.Вставить("Наименование", ПолучитьЗначение(ТекущийЭлемент, "name"));
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("Список", НовыйСписокЭлементов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьГрузоперевозчиков(СтруктураОтвета, Результат)
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокОтветаСписок = ПолучитьЗначение(СтруктураОтвета, "_embedded",,Новый Структура());
	СписокЭлементов = ПолучитьЗначение(БлокОтветаСписок, "items",,Новый Массив());
	
	НовыйСписокЭлементов = Новый Массив;
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = Новый Структура;
		
		ДанныеЭлемента.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент, "id"));
		ДанныеЭлемента.Вставить("Наименование", ПолучитьЗначение(ТекущийЭлемент, "name"));
		ДанныеЭлемента.Вставить("НаименованиеПолное", ПолучитьЗначение(ТекущийЭлемент, "fullName"));
		ДанныеЭлемента.Вставить("Описание", ПолучитьЗначение(ТекущийЭлемент, "descriptoin"));
		ДанныеЭлемента.Вставить("ТребуетсяАвторизация", ПолучитьЗначение(ТекущийЭлемент, "authRequired",, Ложь));
		ДанныеЭлемента.Вставить("ИдентификаторСервиса", ПолучитьЗначение(ТекущийЭлемент, "serviceID",, ""));
		ДанныеЭлемента.Вставить("ВозможнаРаботаБезАвторизации", ПолучитьЗначение(ТекущийЭлемент, "workingWithoutAuth",, Ложь));
		ДанныеЭлемента.Вставить("ДанныеАвторизацииВведены", ПолучитьЗначение(ТекущийЭлемент, "authData",, Ложь));
		ДанныеЭлемента.Вставить("ТипАвторизации", ПолучитьЗначение(ТекущийЭлемент, "authorizationType",, ""));
		ДанныеЭлемента.Вставить("ОписаниеПодключения", ПолучитьЗначение(ТекущийЭлемент, "connectionDescription",, ""));
		ДанныеЭлемента.Вставить("УстаревшийТипАвторизации", ПолучитьЗначение(ТекущийЭлемент, "outdated",, Ложь));
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("Список", НовыйСписокЭлементов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьДанныеГрузоперевозчика(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Данные = СтруктураОтвета.data;
	
	ПараметрыГрузоперевозчика = Новый Структура();
	
	ПараметрыГрузоперевозчика.Вставить("Идентификатор", ПолучитьЗначение(Данные, "id"));
	ПараметрыГрузоперевозчика.Вставить("Наименование", ПолучитьЗначение(Данные, "name"));
	ПараметрыГрузоперевозчика.Вставить("НаименованиеПолное", ПолучитьЗначение(Данные, "fullName"));
	ПараметрыГрузоперевозчика.Вставить("Описание", ПолучитьЗначение(Данные, "description"));
	ПараметрыГрузоперевозчика.Вставить("АдресСайта", ПолучитьЗначение(Данные, "addressWebSite"));
	ПараметрыГрузоперевозчика.Вставить("ЮридическийАдрес", ПолучитьЗначение(Данные, "addressLegal"));
	ПараметрыГрузоперевозчика.Вставить("ФизическийАдрес", ПолучитьЗначение(Данные, "addressPhysical"));
	ПараметрыГрузоперевозчика.Вставить("Телефон", ПолучитьЗначение(Данные, "phone"));
	ПараметрыГрузоперевозчика.Вставить("ТребуетсяАвторизация", ПолучитьЗначение(Данные, "authRequired",, Ложь));
	ПараметрыГрузоперевозчика.Вставить("ИдентификаторСервиса", ПолучитьЗначение(Данные, "serviceID",, ""));
	ПараметрыГрузоперевозчика.Вставить("ДанныеПоТарифам", Новый Массив());
	
	Для Каждого ТекущийЭлемент Из Данные.tariffs Цикл
		
		ПараметрыТарифа = Новый Структура();
		ПараметрыТарифа.Вставить("ТарифИдентификатор", ПолучитьЗначение(ТекущийЭлемент, "id"));
		ПараметрыТарифа.Вставить("ТарифНаименование", ПолучитьЗначение(ТекущийЭлемент, "name"));
		ПараметрыТарифа.Вставить("Описание", ПолучитьЗначение(ТекущийЭлемент, "comment"));
		ПараметрыТарифа.Вставить("МаксВес", ПолучитьЗначение(ТекущийЭлемент, "maxWeight"));
		ПараметрыТарифа.Вставить("МаксОбъем", ПолучитьЗначение(ТекущийЭлемент, "maxVolume"));
		ПараметрыТарифа.Вставить("МаксДлина", ПолучитьЗначение(ТекущийЭлемент, "maxLength"));
		ПараметрыТарифа.Вставить("НегабаритныйВес", ПолучитьЗначение(ТекущийЭлемент, "oversizeWeight"));
		ПараметрыТарифа.Вставить("НегабаритныйОбъем", ПолучитьЗначение(ТекущийЭлемент, "oversizeVolume"));
		ПараметрыТарифа.Вставить("НегабаритнаяДлина", ПолучитьЗначение(ТекущийЭлемент, "oversizeLength"));
		ПараметрыТарифа.Вставить("ФормаОплаты", ПолучитьЗначение(ТекущийЭлемент, "payType"));
		ПараметрыТарифа.Вставить("ПоУмолчанию", ПолучитьЗначение(ТекущийЭлемент, "isDefault", "Булево", Ложь));
		
		ПараметрыГрузоперевозчика.ДанныеПоТарифам.Добавить(ПараметрыТарифа);
	КонецЦикла;
	
	Результат.Вставить("Данные", ПараметрыГрузоперевозчика);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьПунктыВыдачиКлиента(СтруктураОтвета, Результат)
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокОтветаСписок = ПолучитьЗначение(СтруктураОтвета, "_embedded",,Новый Структура());
	СписокЭлементов = ПолучитьЗначение(БлокОтветаСписок, "items",,Новый Массив());
	
	ПунктыВыдачиКлиента = Новый Массив;
	МассивИдентификаторов = Новый Массив;
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = НовыйПараметрыПунктаВыдачиКлиента();
		
		ДанныеЭлемента.Идентификатор = ПолучитьЗначение(ТекущийЭлемент, "id");
		ДанныеЭлемента.Наименование = ПолучитьЗначение(ТекущийЭлемент, "name");
		ДанныеЭлемента.Адрес = ПолучитьЗначение(ТекущийЭлемент, "address");
		ДанныеЭлемента.Телефон = ПолучитьЗначение(ТекущийЭлемент, "phone");
		ДанныеЭлемента.АдресШирота = ПолучитьЗначение(ТекущийЭлемент, "point.latitude");
		ДанныеЭлемента.АдресДолгота = ПолучитьЗначение(ТекущийЭлемент, "point.longitude");
		
		ПунктыВыдачиКлиента.Добавить(ДанныеЭлемента);
		МассивИдентификаторов.Добавить(ДанныеЭлемента.Идентификатор);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипГрузоперевозки", Результат.ТипГрузоперевозки);
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторОбъекта,
	|	Значение,
	|	ЗначениеПоУмолчанию
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектовСервисовДоставки КАК ТаблицаСоответствий
	|ГДЕ
	|	ТипГрузоперевозки = &ТипГрузоперевозки
	|	И ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовСервисовДоставки.ПунктВыдачи)
	|	И ИдентификаторОбъекта В (&МассивИдентификаторов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Для Каждого ПунктВыдачиКлиента Из ПунктыВыдачиКлиента Цикл
		
			Если ПунктВыдачиКлиента.Идентификатор = Выборка.ИдентификаторОбъекта Тогда
				ПунктВыдачиКлиента.Вставить("ИспользоватьПоУмолчанию", Выборка.ЗначениеПоУмолчанию);
				ПунктВыдачиКлиента.Вставить("Склад", Выборка.Значение);
				ПунктВыдачиКлиента.Вставить("СкладАдрес",
					УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Выборка.Значение,
					Справочники.ВидыКонтактнойИнформации.АдресСклада));
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;
	
	Результат.Вставить("Список", ПунктыВыдачиКлиента);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьСписокКурьеров(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокЭлементов = ПолучитьЗначение(СтруктураОтвета, "items",,Новый Массив());
	
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = НовыйПараметрыКурьера();
		
		ДанныеЭлемента.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент, "id"));
		ДанныеЭлемента.Вставить("Наименование", ПолучитьЗначение(ТекущийЭлемент, "name"));
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("Список", НовыйСписокЭлементов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьСписокКонтрагентов(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокЭлементов = ПолучитьЗначение(СтруктураОтвета, "items",,Новый Массив());
	
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = НовыйПараметрыКурьера();
		
		ДанныеЭлемента.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент, "id"));
		ДанныеЭлемента.Вставить("Наименование", ПолучитьЗначение(ТекущийЭлемент, "name"));
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("Список", НовыйСписокЭлементов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьСостояниеПодключенияОрганизации(СтруктураОтвета, Результат)
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	СостояниеПодключения = НовыйСостояниеПодключенияОрганизации();
	
	СостояниеПодключения.ОрганизацияЗарегистрирована = ПолучитьЗначение(СтруктураОтвета, "companyIsReg",, Ложь);
	СостояниеПодключения.ПунктВыдачиЗарегистрирован = ПолучитьЗначение(СтруктураОтвета, "pickuppointIsReg",, Ложь);
	СостояниеПодключения.ЛогистЗарегистрирован = ПолучитьЗначение(СтруктураОтвета, "logisticianIsReg",, Ложь);
	СостояниеПодключения.ИдентификаторОрганизации = ПолучитьЗначение(СтруктураОтвета, "company_id", "Строка", "");
	СостояниеПодключения.ИспользуетсяЧастичнаяДоставка = ПолучитьЗначение(СтруктураОтвета, "partial_shipment_enabled", "Булево", Ложь);
	СостояниеПодключения.Вставить("ОрганизацияТарификацииЗарегистрирована", ПолучитьЗначение(СтруктураОтвета, "TariffCompanyIsReg", "Булево", Ложь));
	СостояниеПодключения.Вставить("ИдентификаторОрганизацииТарификации", ПолучитьЗначение(СтруктураОтвета, "TariffCompany.id", "Строка", ""));
	
	Результат.Вставить("СостояниеПодключенияОрганизации", СостояниеПодключения);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьТарифы(СтруктураОтвета, Результат, ПараметрыЗапроса = Неопределено)
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипГрузоперевозки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ТипГрузоперевозки");
	
	БлокОтветаСписок = ПолучитьЗначение(СтруктураОтвета, "_embedded", , Новый Структура);
	СписокЭлементов = ПолучитьЗначение(БлокОтветаСписок, "items", , Новый Массив);
	
	НовыйСписокЭлементов = Новый Массив;
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = Новый Структура;
		
		ДанныеЭлемента.Вставить("ТарифИдентификатор", ПолучитьЗначение(ТекущийЭлемент, "tariffId"));
		ДанныеЭлемента.Вставить("МинимальныйСрок", ПолучитьЗначение(ТекущийЭлемент, "termMin"));
		ДанныеЭлемента.Вставить("МаксимальныйСрок", ПолучитьЗначение(ТекущийЭлемент, "termMax"));
		ДанныеЭлемента.Вставить("Стоимость", ПолучитьЗначение(ТекущийЭлемент, "cost"));
		ДанныеЭлемента.Вставить("СуммаСкидки", ПолучитьЗначение(ТекущийЭлемент, "discount"));
		
		Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
			
			ДанныеЭлемента.Вставить("ДетализацияСтоимости", Новый Массив);
			Для Каждого ТекущаяУслуга Из ПолучитьЗначение(ТекущийЭлемент, "costDetails") Цикл
				
				НоваяУслуга = НовыйДетализацияСтоимостиУслуги();
				НоваяУслуга.Идентификатор = ПолучитьЗначение(ТекущаяУслуга, "id");
				НоваяУслуга.Наименование = ПолучитьЗначение(ТекущаяУслуга, "name");
				НоваяУслуга.Стоимость = ПолучитьЗначение(ТекущаяУслуга, "cost");
				
				ДанныеЭлемента.ДетализацияСтоимости.Добавить(НоваяУслуга);
				
			КонецЦикла;
			
			НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
			
			Продолжить;
			
		КонецЕсли;
		
		ДанныеЭлемента.Вставить("ДетализацияСтоимости", Новый Массив);
		Для Каждого ТекущаяУслуга Из ПолучитьЗначение(ТекущийЭлемент, "costDetails") Цикл
			
			НоваяУслуга = НовыйДетализацияСтоимостиУслуги();
			
			НоваяУслуга.Идентификатор = ПолучитьЗначение(ТекущаяУслуга, "id");
			НоваяУслуга.Наименование = ПолучитьЗначение(ТекущаяУслуга, "name");
			НоваяУслуга.Стоимость = ПолучитьЗначение(ТекущаяУслуга, "cost");
			НоваяУслуга.ВариантУчета = ПолучитьЗначение(ТекущаяУслуга, "type");
			НоваяУслуга.Описание = ПолучитьЗначение(ТекущаяУслуга, "comment");
			
			ДанныеЭлемента.ДетализацияСтоимости.Добавить(НоваяУслуга);
			
		КонецЦикла;
		
		ДанныеЭлемента.Вставить("ГрузоперевозчикИдентификатор", ПолучитьЗначение(ТекущийЭлемент, "carrierId"));
		ДанныеЭлемента.Вставить("ГрузоперевозчикНаименование", ПолучитьЗначение(ТекущийЭлемент, "carrierName"));
		ДанныеЭлемента.Вставить("ТарифНаименование", ПолучитьЗначение(ТекущийЭлемент, "tariffName"));
		ДанныеЭлемента.Вставить("ПоУмолчанию", ПолучитьЗначение(ТекущийЭлемент, "isDefault", "Булево", Ложь));
		ДанныеЭлемента.Вставить("Негабарит", ПолучитьЗначение(ТекущийЭлемент, "oversize"));
		ДанныеЭлемента.Вставить("ОписаниеНеГабарит", ПолучитьЗначение(ТекущийЭлемент, "oversizecomment"));
		ДанныеЭлемента.Вставить("Описание", ПолучитьЗначение(ТекущийЭлемент, "comment"));
		
		ДанныеЭлемента.Вставить("ТочкаОтправленияПредставление", ПолучитьЗначение(ТекущийЭлемент, "shipment.point.view",,""));
		ДанныеЭлемента.Вставить("ТочкаОтправленияШирота", ПолучитьЗначение(ТекущийЭлемент, "shipment.point.latitude",,0));
		ДанныеЭлемента.Вставить("ТочкаОтправленияДолгота", ПолучитьЗначение(ТекущийЭлемент, "shipment.point.longitude",,0));
		
		ДанныеЭлемента.Вставить("ТочкаДоставкиПредставление", ПолучитьЗначение(ТекущийЭлемент, "delivery.point.view",,""));
		ДанныеЭлемента.Вставить("ТочкаДоставкиШирота", ПолучитьЗначение(ТекущийЭлемент, "delivery.point.latitude",,0));
		ДанныеЭлемента.Вставить("ТочкаДоставкиДолгота", ПолучитьЗначение(ТекущийЭлемент, "delivery.point.longitude",,0));
		
		// Ограничения тарифа
		ДанныеЭлемента.Вставить("МаксВес", ПолучитьЗначение(ТекущийЭлемент, "maxWeight"));
		ДанныеЭлемента.Вставить("МаксОбъем", ПолучитьЗначение(ТекущийЭлемент, "maxVolume"));
		ДанныеЭлемента.Вставить("МаксДлина", ПолучитьЗначение(ТекущийЭлемент, "maxLength"));
		ДанныеЭлемента.Вставить("НегабаритныйВес", ПолучитьЗначение(ТекущийЭлемент, "oversizeWeight"));
		ДанныеЭлемента.Вставить("НегабаритныйОбъем", ПолучитьЗначение(ТекущийЭлемент, "oversizeVolume"));
		ДанныеЭлемента.Вставить("НегабаритнаяДлина", ПолучитьЗначение(ТекущийЭлемент, "oversizeLength"));
		ДанныеЭлемента.Вставить("ФормаОплаты", ПолучитьЗначение(ТекущийЭлемент, "paymentType"));
		ДанныеЭлемента.Вставить("ФормаОплатыПоУмолчанию", ПолучитьЗначение(ТекущийЭлемент, "paymentTypeDefault",,0));
		ДанныеЭлемента.Вставить("ТолькоВремяДоставки", ПолучитьЗначение(ТекущийЭлемент, "onlyDeliveryTime",,Ложь));
		
		ДанныеЭлемента.Вставить("ДополнительныеУслуги", Новый Массив);
		ДополнительныеУслуги = ПолучитьЗначение(ТекущийЭлемент, "optionalServices", , Новый Массив);
		Для Каждого ТекущаяДополнительнаяУслуга Из ДополнительныеУслуги Цикл
	
			НоваяДопУслуга = Новый Структура;
			
			НоваяДопУслуга.Вставить("Идентификатор", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "id"));
			НоваяДопУслуга.Вставить("Наименование", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "name"));
			НоваяДопУслуга.Вставить("Категория", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "category"));
			НоваяДопУслуга.Вставить("Обязательная", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "required"));
			НоваяДопУслуга.Вставить("Использовать", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "isSelected"));
			НоваяДопУслуга.Вставить("ПоказыватьИнформацию", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "isDescribed"));
			НоваяДопУслуга.Вставить("Свойства", Новый Массив());
			
			СвойстваДополнительнойУслуги = НоваяДопУслуга.Свойства;
			
			Для Каждого СвойствоДополнительнойУслуги Из ТекущаяДополнительнаяУслуга.properties Цикл
				
				НовоеСвойство = Новый Структура;
				НовоеСвойство.Вставить("Идентификатор", ПолучитьЗначение(СвойствоДополнительнойУслуги, "id"));
				НовоеСвойство.Вставить("Наименование", ПолучитьЗначение(СвойствоДополнительнойУслуги, "name"));
				СтруктураТипа = ПолучитьЗначение(СвойствоДополнительнойУслуги, "type");
				НовоеСвойство.Вставить("ТипЗначения", СервисДоставкиСлужебный.ПолучитьОписаниеТипаПоСтруктуре(СтруктураТипа));
				НовоеСвойство.Вставить("ЕдиницаИзмерения", ПолучитьЗначение(СвойствоДополнительнойУслуги,"unit"));
				ИспользоватьСвойство = ПолучитьЗначение(СвойствоДополнительнойУслуги,"isSelected");
				Если ИспользоватьСвойство Тогда
					НовоеСвойство.Вставить("Использовать", ИспользоватьСвойство);
					НовоеСвойство.Вставить("Значение", ПолучитьЗначение(СвойствоДополнительнойУслуги,"value"));
				КонецЕсли;
				
				СвойстваДополнительнойУслуги.Добавить(НовоеСвойство);
				
			КонецЦикла;
			
			ДанныеЭлемента.ДополнительныеУслуги.Добавить(НоваяДопУслуга);
			
		КонецЦикла;
		
		Терминал = НовыйПараметрыПунктаПриемаВыдачи();
		Терминал.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент,"shipment.defaultPoint.id"));
		Терминал.Вставить("Наименование", ПолучитьЗначение(ТекущийЭлемент,"shipment.defaultPoint.name"));
		Терминал.Вставить("Адрес", ПолучитьЗначение(ТекущийЭлемент,"shipment.defaultPoint.address"));
		Терминал.Вставить("Телефон", ПолучитьЗначение(ТекущийЭлемент,"shipment.defaultPoint.phone"));
		Терминал.Вставить("ТипИдентификатор", ПолучитьЗначение(ТекущийЭлемент,"shipment.defaultPoint.type.id"));
		Терминал.Вставить("ТипНаименование", ПолучитьЗначение(ТекущийЭлемент,"shipment.defaultPoint.type.name"));
		
		ДанныеЭлемента.Вставить("ПунктПриемаГруза", Терминал);
		
		Терминал = НовыйПараметрыПунктаПриемаВыдачи();
		Терминал.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент,"delivery.defaultPoint.id"));
		Терминал.Вставить("Наименование", ПолучитьЗначение(ТекущийЭлемент,"delivery.defaultPoint.name"));
		Терминал.Вставить("Адрес", ПолучитьЗначение(ТекущийЭлемент,"delivery.defaultPoint.address"));
		Терминал.Вставить("Телефон", ПолучитьЗначение(ТекущийЭлемент,"delivery.defaultPoint.phone"));
		Терминал.Вставить("ТипИдентификатор", ПолучитьЗначение(ТекущийЭлемент,"delivery.defaultPoint.type.id"));
		Терминал.Вставить("ТипНаименование", ПолучитьЗначение(ТекущийЭлемент,"delivery.defaultPoint.type.name"));
		
		ДанныеЭлемента.Вставить("ПунктВыдачиГруза", Терминал);
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("Список", НовыйСписокЭлементов);
	
	Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
		Возврат;
	КонецЕсли;
	
	ДоступныеПериодыОтгрузки = Новый Массив;
	БлокСпискаОтвета = ПолучитьЗначение(СтруктураОтвета, "availableIntervals", , Новый Структура);
	
	Если БлокСпискаОтвета.allowed Тогда
		СписокДоступныхПериодовОтгрузки = ПолучитьЗначение(БлокСпискаОтвета, "items",,Новый Массив());
		Для Каждого ТекущийПериод Из СписокДоступныхПериодовОтгрузки Цикл
			
			ПериодОтгрузки = НовыйПараметрыДоступныеПериодыОтгрузки();
			
			ПериодОтгрузки.Вставить("ДатаОтгрузки", ПолучитьЗначение(ТекущийПериод, "date","Дата"));
			ПериодОтгрузки.Вставить("ВремяОтгрузкиС", ПолучитьЗначение(ТекущийПериод, "from","Дата"));
			ПериодОтгрузки.Вставить("ВремяОтгрузкиПо", ПолучитьЗначение(ТекущийПериод, "to","Дата"));
			ПериодОтгрузки.Вставить("ПериодОтгрузкиПредставление", ПолучитьЗначение(ТекущийПериод, "intervalName","Строка"));
			
			ДоступныеПериодыОтгрузки.Добавить(ПериодОтгрузки);
			
		КонецЦикла;
		Результат.Вставить("ДоступныПериодыОтгрузки", Истина);
	Иначе
		Результат.Вставить("ДоступныПериодыОтгрузки", Ложь);
	КонецЕсли;
	
	Результат.Вставить("ДоступныеПериодыОтгрузки", ДоступныеПериодыОтгрузки);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьУслугиДляТипаГрузоперевозки(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокОтветаСписок = ПолучитьЗначение(СтруктураОтвета, "services",,Новый Структура());
	СписокЭлементов = ПолучитьЗначение(БлокОтветаСписок, "commonServices",,Новый Массив());
	
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = Новый Структура();
		
		ДанныеЭлемента.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент, "id"));
		ДанныеЭлемента.Вставить("Наименование", ПолучитьЗначение(ТекущийЭлемент, "name"));
		ДанныеЭлемента.Вставить("Категория", ПолучитьЗначение(ТекущийЭлемент, "category"));
		ДанныеЭлемента.Вставить("Обязательная", ПолучитьЗначение(ТекущийЭлемент, "required"));
		ДанныеЭлемента.Вставить("ПоказыватьИнформацию", ПолучитьЗначение(ТекущийЭлемент, "isDescribed"));
		ДанныеЭлемента.Вставить("Свойства", Новый Массив());
		
		Для Каждого ТекущееСвойство Из ТекущийЭлемент.properties Цикл
	
			НовоеСвойство = Новый Структура();
			
			НовоеСвойство.Вставить("Идентификатор", ПолучитьЗначение(ТекущееСвойство, "id"));
			НовоеСвойство.Вставить("Наименование", ПолучитьЗначение(ТекущееСвойство, "name"));
			СтруктураТипа = ПолучитьЗначение(ТекущееСвойство, "type");
			НовоеСвойство.Вставить("ТипЗначения", СервисДоставкиСлужебный.ПолучитьОписаниеТипаПоСтруктуре(СтруктураТипа));
			НовоеСвойство.Вставить("ЕдиницаИзмерения", ПолучитьЗначение(ТекущееСвойство, "unit"));
			
			ДанныеЭлемента.Свойства.Добавить(НовоеСвойство);
			
		КонецЦикла;
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("Список", НовыйСписокЭлементов);
	
	СписокЭлементов = ПолучитьЗначение(БлокОтветаСписок, "incompatibleServices",,Новый Массив());
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = Новый Структура();
		
		ДанныеЭлемента.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент, "id"));
		ДанныеЭлемента.Вставить("ИдентификаторНесовместимойУслуги", ПолучитьЗначение(ТекущийЭлемент, "incompatibleId"));
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("СписокНесовместимыеУслуги", НовыйСписокЭлементов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьДанныеУслуги(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеУслуги = ПолучитьЗначение(СтруктураОтвета, "data",,Новый Структура());

	Данные = Новый Структура();
	Данные.Вставить("Идентификатор", ПолучитьЗначение(ДанныеУслуги, "id"));
	Данные.Вставить("Наименование", ПолучитьЗначение(ДанныеУслуги, "name"));
	Данные.Вставить("Категория", ПолучитьЗначение(ДанныеУслуги, "category"));
	Данные.Вставить("Обязательная", ПолучитьЗначение(ДанныеУслуги, "required"));
	Данные.Вставить("Описание", ПолучитьЗначение(ДанныеУслуги, "description"));
	
	Результат.Вставить("Данные", Данные);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьДоступныеТерминалы(СтруктураОтвета, Результат, ПараметрыЗапроса)
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки") И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипГрузоперевозки = ПараметрыЗапроса.ТипГрузоперевозки;
	ЭтоСДЭК = СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки);
	
	Если ЭтоСДЭК Тогда
		ПриемкаГруза = "receiveCargo";
		ВыдачаГруза = "giveoutCargo";
	Иначе
		ПриемкаГруза = "giveoutCargo";
		ВыдачаГруза = "receiveCargo";
	КонецЕсли;
	
	БлокСпискаОтвета = ПолучитьЗначение(СтруктураОтвета, "_embedded", , Новый Структура);
	Список = ПолучитьЗначение(БлокСпискаОтвета, "items", , Новый Массив);
	
	ПунктыПриемаВыдачи = Новый Массив;
	СписокПунктовОтгрузка = Новый Массив;
	СписокПунктовДоставка = Новый Массив;
	СписокНаселенныхПунктов = Новый СписокЗначений;
	СписокНаселенныхПунктовОтгрузка = Новый СписокЗначений;
	СписокНаселенныхПунктовДоставка = Новый СписокЗначений;
	
	Если БлокСпискаОтвета.Свойство("cities") Тогда

		НаселенныеПункты = ПолучитьЗначение(БлокСпискаОтвета, "cities", , Новый Массив);

		Для Каждого НаселенныйПункт Из НаселенныеПункты Цикл
			СписокНаселенныхПунктов.Добавить(ПолучитьЗначение(НаселенныйПункт, "cityID"),
				ПолучитьЗначение(НаселенныйПункт, "cityName"));
		КонецЦикла;

	КонецЕсли;
	
	Для Каждого ТекущийПункт Из Список Цикл
		
		ПараметрыПункта = Новый Структура;
		
		Если Не ЭтоСДЭК Тогда
			ИдентификаторВСистемеГрузоперевозчика = ПолучитьЗначение(ТекущийПункт, "terminalID", , "");
			Если ПустаяСтрока(ИдентификаторВСистемеГрузоперевозчика) Тогда
				Продолжить;
			КонецЕсли;
			ПараметрыПункта.Вставить("ИдентификаторВСистемеГрузоперевозчика", ИдентификаторВСистемеГрузоперевозчика);
			ПараметрыПункта.Вставить("Долгота", ПолучитьЗначение(ТекущийПункт, "longitude"));
			ПараметрыПункта.Вставить("Широта", ПолучитьЗначение(ТекущийПункт, "latitude"));
		КонецЕсли;
		
		ПараметрыПункта.Вставить("Идентификатор", ПолучитьЗначение(ТекущийПункт, "id", , ""));
		ПараметрыПункта.Вставить("Наименование", ПолучитьЗначение(ТекущийПункт, "name"));
		ПараметрыПункта.Вставить("Адрес", ПолучитьЗначение(ТекущийПункт, "address"));
		ПараметрыПункта.Вставить("Описание", ПолучитьЗначение(ТекущийПункт, "description"));
		ПараметрыПункта.Вставить("Телефон", ПолучитьЗначение(ТекущийПункт, "telephone"));
		ПараметрыПункта.Вставить("ТипИдентификатор", ПолучитьЗначение(ТекущийПункт, "typeId"));
		ПараметрыПункта.Вставить("ТипНаименование", ПолучитьЗначение(ТекущийПункт, "typeName"));
		НаселенныйПунктИдентификатор = ПолучитьЗначение(ТекущийПункт, "cityID", , 0);
		ПараметрыПункта.Вставить("НаселенныйПунктИдентификатор", НаселенныйПунктИдентификатор);
		НаселенныйПунктНаименование = ПолучитьЗначение(ТекущийПункт, "cityName");
		ПараметрыПункта.Вставить("Город", НаселенныйПунктНаименование);
		
		ГрафикРаботыСписок = ПолучитьЗначение(ТекущийПункт, "worktable");
		ГрафикРаботыНовый = Новый Массив;
		Для Каждого ТекущаяСтрока Из ГрафикРаботыСписок Цикл
			СтрокаГрафикаРаботы = Новый Структура;
			СтрокаГрафикаРаботы.Вставить("Отдел", ПолучитьЗначение(ТекущаяСтрока, "department"));
			СтрокаГрафикаРаботы.Вставить("ГрафикРаботыПредставление", ПолучитьЗначение(ТекущаяСтрока, "worktableView"));
			ГрафикРаботыНовый.Добавить(СтрокаГрафикаРаботы);
		КонецЦикла;
		ПараметрыПункта.Вставить("ГрафикРаботы", ГрафикРаботыНовый);
		
		ПунктыПриемаВыдачи.Добавить(ПараметрыПункта);
		
		ДоступнаПриемкаГруза = ПолучитьЗначение(ТекущийПункт, ПриемкаГруза, , Ложь);
		Если ДоступнаПриемкаГруза = Истина Тогда
			СписокПунктовОтгрузка.Добавить(ПараметрыПункта);
			Если ЗначениеЗаполнено(НаселенныйПунктИдентификатор) Тогда
				Если СписокНаселенныхПунктов.НайтиПоЗначению(НаселенныйПунктИдентификатор) = Неопределено Тогда
					СписокНаселенныхПунктов.Добавить(НаселенныйПунктИдентификатор, НаселенныйПунктНаименование);
				КонецЕсли;
				Если СписокНаселенныхПунктовОтгрузка.НайтиПоЗначению(НаселенныйПунктИдентификатор) = Неопределено Тогда
					СписокНаселенныхПунктовОтгрузка.Добавить(НаселенныйПунктИдентификатор, НаселенныйПунктНаименование);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ДоступнаВыдачаГруза = ПолучитьЗначение(ТекущийПункт, ВыдачаГруза, , Ложь);
		Если ДоступнаВыдачаГруза = Истина Тогда
			СписокПунктовДоставка.Добавить(ПараметрыПункта);
			Если ЗначениеЗаполнено(НаселенныйПунктИдентификатор) Тогда
				Если СписокНаселенныхПунктов.НайтиПоЗначению(НаселенныйПунктИдентификатор) = Неопределено Тогда
					СписокНаселенныхПунктов.Добавить(НаселенныйПунктИдентификатор, НаселенныйПунктНаименование);
				КонецЕсли;
				Если СписокНаселенныхПунктовДоставка.НайтиПоЗначению(НаселенныйПунктИдентификатор) = Неопределено Тогда
					СписокНаселенныхПунктовДоставка.Добавить(НаселенныйПунктИдентификатор, НаселенныйПунктНаименование);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Вставить("Список", ПунктыПриемаВыдачи);
	Результат.Вставить("СписокПунктовОтгрузка", СписокПунктовОтгрузка);
	Результат.Вставить("СписокПунктовДоставка", СписокПунктовДоставка);
	Результат.Вставить("СписокНаселенныхПунктов", СписокНаселенныхПунктов);
	Результат.Вставить("СписокНаселенныхПунктовОтгрузка", СписокНаселенныхПунктовОтгрузка);
	Результат.Вставить("СписокНаселенныхПунктовДоставка", СписокНаселенныхПунктовДоставка);
	
	Если Не ПараметрыЗапроса.ВсеПунктыПВЗ Тогда
		Возврат;
	КонецЕсли;

	Кэш = Новый Структура(СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеТерминалы(), Результат);
	ОбновитьКэшированныеЗначения(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, ПараметрыЗапроса.ТипГрузоперевозки, Кэш, "Терминалы");
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьДанныеТерминала(СтруктураОтвета, Результат)
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки") И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Данные = СтруктураОтвета.data;
	
	ПараметрыТерминала = Новый Структура;
	
	ПараметрыТерминала.Вставить("Идентификатор", ПолучитьЗначение(Данные, "id"));
	ПараметрыТерминала.Вставить("Наименование", ПолучитьЗначение(Данные, "name"));
	ПараметрыТерминала.Вставить("Адрес", ПолучитьЗначение(Данные, "address"));
	ПараметрыТерминала.Вставить("Описание", ПолучитьЗначение(Данные, "description"));
	ПараметрыТерминала.Вставить("Телефон", ПолучитьЗначение(Данные, "telephone"));
	ПараметрыТерминала.Вставить("ТипИдентификатор", ПолучитьЗначение(Данные, "typeId"));
	ПараметрыТерминала.Вставить("ТипНаименование", ПолучитьЗначение(Данные, "typeName"));
	ПараметрыТерминала.Вставить("Долгота", ПолучитьЗначение(Данные, "longitude"));
	ПараметрыТерминала.Вставить("Широта", ПолучитьЗначение(Данные, "latitude"));
	ПараметрыТерминала.Вставить("ГрузоперевозчикНаименование", ПолучитьЗначение(Данные, "carrierName"));
	ПараметрыТерминала.Вставить("ГрузоперевозчикИдентификатор", ПолучитьЗначение(Данные, "carrierId"));
	
	ГрафикРаботыСписок = ПолучитьЗначение(Данные, "worktable");
	ГрафикРаботыНовый = Новый Массив();
	
	Для Каждого ТекущаяСтрока Из ГрафикРаботыСписок Цикл
		СтрокаГрафикаРаботы = Новый Структура();
		СтрокаГрафикаРаботы.Вставить("Отдел", ПолучитьЗначение(ТекущаяСтрока, "department"));
		СтрокаГрафикаРаботы.Вставить("ГрафикРаботыПредставление", ПолучитьЗначение(ТекущаяСтрока, "worktableView"));
		ГрафикРаботыНовый.Добавить(СтрокаГрафикаРаботы);
	КонецЦикла;
	
	ПараметрыТерминала.Вставить("ГрафикРаботы", ГрафикРаботыНовый);
	
	Результат.Вставить("Данные", ПараметрыТерминала);
	
КонецПроцедуры

Процедура ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат)

	Результат.Вставить("Ошибки", ПолучитьЗначение(СтруктураОтвета, "errors", , Новый Массив));
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьНастройкиАвторизации(СтруктураОтвета, Результат)
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки") И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокОтветаСписок = ПолучитьЗначение(СтруктураОтвета, "_embedded",, Новый Массив());
	
	Авторизован = Ложь;
	ПраваДоступа = Новый Массив();
	Для Каждого РасшифровкаРезультата Из БлокОтветаСписок Цикл
		Авторизован = ПолучитьЗначение(РасшифровкаРезультата, "authorized",, Ложь);
		ПравоДоступа = ПолучитьЗначение(РасшифровкаРезультата, "scope",, "");
		ТипАвторизации = ПолучитьЗначение(РасшифровкаРезультата, "type",, "");
		Если ЗначениеЗаполнено(ПравоДоступа) Тогда
			Если ПраваДоступа.Найти(ПравоДоступа) = Неопределено Тогда
				ПраваДоступа.Добавить(ПравоДоступа);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Вставить("ПраваДоступа", ПраваДоступа);
	Результат.Вставить("Авторизован", Авторизован);
	Результат.Вставить("ТипАвторизации", ТипАвторизации);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьДанныеПоТарифу(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Данные = СтруктураОтвета.data;
	
	ПараметрыТарифа = Новый Структура();
	ПараметрыТарифа.Вставить("Идентификатор", ПолучитьЗначение(Данные, "id"));
	ПараметрыТарифа.Вставить("Наименование", ПолучитьЗначение(Данные, "name"));
	
	ПараметрыТарифа.Вставить("ГрузоперевозчикИдентификатор", ПолучитьЗначение(Данные, "carrierId"));
	ПараметрыТарифа.Вставить("ГрузоперевозчикНаименование", ПолучитьЗначение(Данные, "carrierName"));
	
	ПараметрыТарифа.Вставить("ПоУмолчанию", ПолучитьЗначение(Данные, "isDefault", "Булево", Ложь));
	ПараметрыТарифа.Вставить("Описание", ПолучитьЗначение(Данные, "comment"));
	ПараметрыТарифа.Вставить("УслугиТарифа", Новый Массив());
	ПараметрыТарифа.Вставить("ТерминалыТарифа", Новый Массив());
	
	// Ограничения тарифа
	ПараметрыТарифа.Вставить("МаксВес", ПолучитьЗначение(Данные, "maxWeight"));
	ПараметрыТарифа.Вставить("МаксОбъем", ПолучитьЗначение(Данные, "maxVolume"));
	ПараметрыТарифа.Вставить("МаксДлина", ПолучитьЗначение(Данные, "maxLength"));
	ПараметрыТарифа.Вставить("НегабаритныйВес", ПолучитьЗначение(Данные, "oversizeWeight"));
	ПараметрыТарифа.Вставить("НегабаритныйОбъем", ПолучитьЗначение(Данные, "oversizeVolume"));
	ПараметрыТарифа.Вставить("НегабаритнаяДлина", ПолучитьЗначение(Данные, "oversizeLength"));
	ПараметрыТарифа.Вставить("ДоступныеФормыОплаты", ПолучитьЗначение(Данные, "paymentType"));
	ПараметрыТарифа.Вставить("ФормаОплаты", ПолучитьЗначение(Данные, "paymentTypeDefault",,0));
		
	Для Каждого ТекущаяДополнительнаяУслуга Из Данные.services Цикл

		НоваяУслуга = Новый Структура();
		
		НоваяУслуга.Вставить("Идентификатор", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "id"));
		НоваяУслуга.Вставить("Наименование", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "name"));
		НоваяУслуга.Вставить("Категория", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "category"));
		НоваяУслуга.Вставить("Обязательная", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "required"));
		НоваяУслуга.Вставить("Дополнительная", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "isOptional"));
		НоваяУслуга.Вставить("Использовать", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "isSelected"));
		НоваяУслуга.Вставить("ПоказыватьИнформацию", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "isDescribed"));
		НоваяУслуга.Вставить("Свойства", Новый Массив());
		
		СвойстваДополнительнойУслуги = НоваяУслуга.Свойства;
		
		Для Каждого СвойствоДополнительнойУслуги Из ТекущаяДополнительнаяУслуга.properties Цикл
			
			НовоеСвойство = Новый Структура();
			НовоеСвойство.Вставить("Идентификатор", ПолучитьЗначение(СвойствоДополнительнойУслуги, "id"));
			НовоеСвойство.Вставить("Наименование", ПолучитьЗначение(СвойствоДополнительнойУслуги, "name"));
			СтруктураТипа = ПолучитьЗначение(СвойствоДополнительнойУслуги, "type");
			НовоеСвойство.Вставить("ТипЗначения", СервисДоставкиСлужебный.ПолучитьОписаниеТипаПоСтруктуре(СтруктураТипа));
			НовоеСвойство.Вставить("ЕдиницаИзмерения", ПолучитьЗначение(СвойствоДополнительнойУслуги,"unit"));
			
			ИспользоватьСвойство = ПолучитьЗначение(СвойствоДополнительнойУслуги,"isSelected");
			Если ИспользоватьСвойство Тогда
				НовоеСвойство.Вставить("Использовать", ИспользоватьСвойство);
				НовоеСвойство.Вставить("Значение", ПолучитьЗначение(СвойствоДополнительнойУслуги,"value"));
			КонецЕсли;
			СвойстваДополнительнойУслуги.Добавить(НовоеСвойство);
			
		КонецЦикла;
		
		ПараметрыТарифа.УслугиТарифа.Добавить(НоваяУслуга);
		
	КонецЦикла;
	
	Терминалы = ПолучитьЗначение(Данные, "points",,Новый Массив());
	
	Для Каждого ТекущийТерминал Из Терминалы Цикл
		
		НовыйТерминал = Новый Структура();
		НовыйТерминал.Вставить("Идентификатор", ПолучитьЗначение(ТекущийТерминал,"id",,""));
		НовыйТерминал.Вставить("Наименование", ПолучитьЗначение(ТекущийТерминал,"name",,""));
		НовыйТерминал.Вставить("Направление", ПолучитьЗначение(ТекущийТерминал,"typeOperation",,0));
		НовыйТерминал.Вставить("АдресПредставление", ПолучитьЗначение(ТекущийТерминал,"address.view",,""));
		НовыйТерминал.Вставить("АдресЗначение", ПолучитьЗначение(ТекущийТерминал,"address.value","ХранилищеЗначения",""));
		
		ПараметрыТарифа.ТерминалыТарифа.Добавить(НовыйТерминал);
		
	КонецЦикла;
	
	Результат.Вставить("Данные", ПараметрыТарифа);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьДоступныеДляИзмененияРеквизиты(СтруктураОтвета, Результат, ПараметрыЗапроса)
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Вставить("ИдентификаторЗаказа", ПолучитьЗначение(СтруктураОтвета, "id"));
	
	КартаСвязиРеквизитов = Новый Структура;
	
	Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ПараметрыЗапроса.ТипГрузоперевозки) Тогда
		КартаСвязиРеквизитов.Вставить("sender", "Отправитель");
		КартаСвязиРеквизитов.Вставить("receiver", "Получатель");
		КартаСвязиРеквизитов.Вставить("seller", "Продавец");
		КартаСвязиРеквизитов.Вставить("payer", "Плательщик");
		КартаСвязиРеквизитов.Вставить("shipment", "СпособОтгрузки");
		КартаСвязиРеквизитов.Вставить("delivery", "СпособДоставки");
		КартаСвязиРеквизитов.Вставить("payment", "СпособОплаты");
		КартаСвязиРеквизитов.Вставить("items", "РазмещениеГруза");
		КартаСвязиРеквизитов.Вставить("tariff", "Тариф");
	Иначе
		КартаСвязиРеквизитов.Вставить("payerAddress", "ПлательщикАдрес");
		КартаСвязиРеквизитов.Вставить("payerContactInfo", "ПлательщикКонтактнаяИнформация");
		КартаСвязиРеквизитов.Вставить("payerContragent", "ПлательщикКонтрагент");
		КартаСвязиРеквизитов.Вставить("receiverAddress", "ПолучательАдрес");
		КартаСвязиРеквизитов.Вставить("receiverContactInfo", "ПолучательКонтактнаяИнформация");
		КартаСвязиРеквизитов.Вставить("receiverContragent", "ПолучательКонтрагент");
		КартаСвязиРеквизитов.Вставить("receiverDeliveryDateTime", "ПолучательДатаВремяДоставки");
		КартаСвязиРеквизитов.Вставить("senderAddress", "ОтправительАдрес");
		КартаСвязиРеквизитов.Вставить("senderContactInfo", "ОтправительКонтактнаяИнформация");
		КартаСвязиРеквизитов.Вставить("senderPickupDateTime", "ОтправительДатаВремяОтгрузки");
	КонецЕсли;
	
	Для Каждого Элемент Из КартаСвязиРеквизитов Цикл
		КлючВнешний = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("editableAttributes.%1", Элемент.Ключ);
		КлючЛокальный = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ДоступностьРеквизитов.%1", Элемент.Значение);
		ДобавитьЗначение(Результат, КлючЛокальный, ПолучитьЗначение(СтруктураОтвета, КлючВнешний));
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьРезультатЗапросаПолучитьНаложенныеПлатежи(СтруктураОтвета)
	
	Результат = Новый Структура;
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки") И Результат.Ошибки.Количество() > 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	БлокПараметровЗапроса = ПолучитьЗначение(СтруктураОтвета, "page",,Новый Структура());
	ПараметрыЗапроса = Новый Структура();
	ИдентификаторДокумента = ПолучитьЗначение(БлокПараметровЗапроса, "cursor.id");
	ИдентификаторДокумента = ?(ПустаяСтрока(ИдентификаторДокумента), "00000000-0000-0000-0000-000000000000", ИдентификаторДокумента);
	ПараметрыЗапроса.Вставить("ИдентификаторДокумента",  Новый УникальныйИдентификатор(ИдентификаторДокумента));
	ПараметрыЗапроса.Вставить("ДатаРегистрацииПлатежа", ПолучитьЗначение(БлокПараметровЗапроса, "cursor.date", "Дата"));
	
	БлокСпискаОтвета = ПолучитьЗначение(СтруктураОтвета, "_embedded",,Новый Структура());
	СписокОтвета = ПолучитьЗначение(БлокСпискаОтвета, "items",,Новый Массив());
	
	МенеджерыОбъектовДокументовОснованийЗаказаНаДоставку = МенеджерыОбъектовДокументовОснованийЗаказаНаДоставку(Истина);
	
	СписокПлатежей = Новый Массив();
	Для Каждого ТекущийПлатеж Из СписокОтвета Цикл
		
		ПараметрыПлатежа = НовыйПараметрыПлатежа();
		
		ПараметрыПлатежа.Вставить("Идентификатор", ПолучитьЗначение(ТекущийПлатеж, "id"));
		
		ИдентификаторДокументаОснования = ПолучитьЗначение(ТекущийПлатеж, "baseDocumentId");
		ДокументОснование = ДокументОснованияЗаказаНаДоставкуПоУИД(ИдентификаторДокументаОснования,
			МенеджерыОбъектовДокументовОснованийЗаказаНаДоставку);
			
		Если ДокументОснование <> Неопределено Тогда
			ПараметрыПлатежа.Вставить("ДокументОснование", ДокументОснование);
		КонецЕсли;
		
		ПараметрыПлатежа.Вставить("ОтправительИНН", ПолучитьЗначение(ТекущийПлатеж, "sender.inn"));
		ПараметрыПлатежа.Вставить("ОтправительКПП", ПолучитьЗначение(ТекущийПлатеж, "sender.kpp"));

		УчастникГрузоперевозки = УчастникГрузоперевозкиПоУИДилиИННиКПП(ПараметрыПлатежа.ОтправительИНН, ПараметрыПлатежа.ОтправительКПП);
		Если УчастникГрузоперевозки <> Неопределено Тогда
			ПараметрыПлатежа.Вставить("ОтправительКонтрагентСсылка", УчастникГрузоперевозки.Ссылка);
			ПараметрыПлатежа.Вставить("ОтправительКонтрагентНаименование", УчастникГрузоперевозки.Наименование);
		КонецЕсли;

		ПараметрыПлатежа.Вставить("ГрузоперевозчикИНН", ПолучитьЗначение(ТекущийПлатеж, "carrier.inn"));
		ПараметрыПлатежа.Вставить("ГрузоперевозчикКПП", ПолучитьЗначение(ТекущийПлатеж, "carrier.kpp"));

		УчастникГрузоперевозки = УчастникГрузоперевозкиПоУИДилиИННиКПП(ПараметрыПлатежа.ГрузоперевозчикИНН, ПараметрыПлатежа.ГрузоперевозчикКПП);
		Если УчастникГрузоперевозки <> Неопределено Тогда
			ПараметрыПлатежа.Вставить("ГрузоперевозчикКонтрагентСсылка", УчастникГрузоперевозки.Ссылка);
			ПараметрыПлатежа.Вставить("ГрузоперевозчикКонтрагентНаименование", УчастникГрузоперевозки.Наименование);
		КонецЕсли;

		ПараметрыПлатежа.Вставить("СуммаНаложенногоПлатежа", ПолучитьЗначение(ТекущийПлатеж, "sum",, 0));
		ПараметрыПлатежа.Вставить("ДатаРегистрацииНаложенногоПлатежа", ПолучитьЗначение(ТекущийПлатеж, "dateRegistration", "Дата", 0));
		
		СписокПлатежей.Добавить(ПараметрыПлатежа);
		
	КонецЦикла;
	
	Результат.Вставить("СписокПлатежей", СписокПлатежей);
	Результат.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	Возврат Результат;
	
КонецФункции

// Трансформация тела ответа запроса "синхронизация частичной доставки" в структуру.
// 
// Параметры:
//  СтруктураОтвета - Структура - Структура ответа сервиса интеграции
//  ТекущаяСтраницаСпискаЗаказов - число - номер полученной из сервиса интеграции порции данных
// 
// Возвращаемое значение:
//  Структура - результат запроса синхронизировать частичную доставку в виде структуры:
// * ЗаказыСЧастичнойДоставкой - Массив из Структура - список заказов на доставку:
// ** ДатаРегистрации - дата - дата обновления последней записи из полученной порции данных.
// ** Товары - массив из структура - товарный состав заказа на доставку.
// ** ИдентификаторДокумента - строка - идентификатор последнего документа на странице (в порции).
// * ЭтоПоследняяСтраница - булево - флаг, указывающий, что прочитана последняя порция данных из сервиса интеграции.
// * Ошибки - массив из Структура - список возникших ошибок
//
Функция ОбработатьРезультатЗапросаСинхронизироватьЧастичнуюДоставку(СтруктураОтвета, ТекущаяСтраницаСпискаЗаказов)
	
	Результат = Новый Структура;
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки") И Результат.Ошибки.Количество() > 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	БлокПараметровЗапроса = ПолучитьЗначение(СтруктураОтвета, "page",,Новый Структура());
	ПараметрыЗапроса = Новый Структура();
	// Дата обновления и идентификатор последней строки полученного списка документов. Список документов упорядочен по "ДатаОбновления"+"Номер"+"Идентификатор"
	ПараметрыЗапроса.Вставить("ДатаРегистрации", ПолучитьЗначение(БлокПараметровЗапроса, "cursor.date", "Дата"));
	
	ИдентификаторПоследнегоДокументаВыборки = ПолучитьЗначение(БлокПараметровЗапроса, "cursor.id", "Строка", "00000000-0000-0000-0000-000000000000");
	
	ПараметрыЗапроса.Вставить("Идентификатор", ИдентификаторПоследнегоДокументаВыборки);
	ПараметрыЗапроса.Вставить("ИдентификаторДокумента", Новый УникальныйИдентификатор(ИдентификаторПоследнегоДокументаВыборки));
	
	БлокСпискаОтвета = ПолучитьЗначение(СтруктураОтвета, "_embedded",,Новый Структура());
	СписокОтвета = ПолучитьЗначение(БлокСпискаОтвета, "items",,Новый Массив());
	
	МенеджерыОбъектовДокументовОснованийЗаказаНаДоставку = МенеджерыОбъектовДокументовОснованийЗаказаНаДоставку(Истина);
	
	НайденныеДокументыОснования = Новый Соответствие;
	
	ЗаказыСЧастичнойДоставкой = Новый Массив();
	Для Каждого ОписаниеЗаказаНаДоставку Из СписокОтвета Цикл
		
		ПараметрыЗаказаСЧастичнойДоставкой = НовыйПараметрыЗаказаНаДоставкуСЧастичнойДоставкой();
		
		ПараметрыЗаказаСЧастичнойДоставкой.Вставить("Идентификатор", ПолучитьЗначение(ОписаниеЗаказаНаДоставку, "id"));	// Устарело
		ПараметрыЗаказаСЧастичнойДоставкой.Вставить("ИдентификаторДокумента", Новый УникальныйИдентификатор(ПолучитьЗначение(ОписаниеЗаказаНаДоставку, "id")));

		ТоварыСЧастичнойДоставкой = ПолучитьЗначение(ОписаниеЗаказаНаДоставку, "PartialDelivery",,Неопределено);
		Если ТоварыСЧастичнойДоставкой <> Неопределено Тогда
			
			Для Каждого ДанныеТоварнойПозиции Из ТоварыСЧастичнойДоставкой Цикл
				
				ОписаниеТоварнойПозиции = Новый Структура;
				ОписаниеТоварнойПозиции.Вставить("ИдентификаторСтроки", ПолучитьЗначение(ДанныеТоварнойПозиции, "rowId"));
				ОписаниеТоварнойПозиции.Вставить("Количество", ПолучитьЗначение(ДанныеТоварнойПозиции, "quantity"));
				ОписаниеТоварнойПозиции.Вставить("КоличествоВозврат", ПолучитьЗначение(ДанныеТоварнойПозиции, "quantityReturn"));

				ИдентификаторДокументаОснования = ПолучитьЗначение(ДанныеТоварнойПозиции, "baseDocumentId");
				
				ДокументОснование = НайденныеДокументыОснования.Получить(ИдентификаторДокументаОснования);
				Если ДокументОснование = Неопределено Тогда
					ДокументОснование = ДокументОснованияЗаказаНаДоставкуПоУИД(ИдентификаторДокументаОснования,
						МенеджерыОбъектовДокументовОснованийЗаказаНаДоставку);
					НайденныеДокументыОснования.Вставить(ИдентификаторДокументаОснования, ДокументОснование);
				КонецЕсли;
			
				Если ДокументОснование <> Неопределено Тогда
					ОписаниеТоварнойПозиции.Вставить("ДокументОснование", ДокументОснование);
				КонецЕсли;
				
				ПараметрыЗаказаСЧастичнойДоставкой.Товары.Добавить(ОписаниеТоварнойПозиции);
			КонецЦикла;
		КонецЕсли;
		
		ЗаказыСЧастичнойДоставкой.Добавить(ПараметрыЗаказаСЧастичнойДоставкой);
		
	КонецЦикла;
	
	Результат.Вставить("ЗаказыСЧастичнойДоставкой", ЗаказыСЧастичнойДоставкой);
	Результат.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	Результат.Вставить("ЭтоПоследняяСтраница", ТекущаяСтраницаСпискаЗаказов >= БлокПараметровЗапроса.totalPages);
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьРезультатЗапросаПолучитьСостояниеОпцииКурьерика(СтруктураОтвета, Результат)
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки") И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Комментарий = ПолучитьЗначение(СтруктураОтвета, "comment", , "");
	ОпцияДоступна = ПолучитьЗначение(СтруктураОтвета, "activity", , Ложь);
	СрокДействия = ПолучитьЗначение(СтруктураОтвета, "expirationdate", , Дата(1, 1, 1));
	Баланс = ПолучитьЗначение(СтруктураОтвета, "balance", , 0);
	
	Результат.Вставить("Комментарий", Комментарий);
	Результат.Вставить("ОпцияДоступна", ОпцияДоступна);
	Результат.Вставить("СрокДействия", СрокДействия);
	Результат.Вставить("СрокДействияОпцияКурьерика", ПрочитатьДатуJSON(СрокДействия, ФорматДатыJSON.ISO));
	Результат.Вставить("Баланс", Баланс);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьЖурналЗаказовНаДоставкуИзСервиса(СтруктураОтвета, Результат)
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки") И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипГрузоперевозки = Результат.ТипГрузоперевозки;
	
	БлокСтраницыОтвета = ПолучитьЗначение(СтруктураОтвета, "metadata");
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ТекущаяСтраница", ПолучитьЗначение(БлокСтраницыОтвета, "currentPage",, 1));
	ПараметрыСтраницы.Вставить("ПредыдущаяСтраница", ПолучитьЗначение(БлокСтраницыОтвета, "prevPage",, 1));
	ПараметрыСтраницы.Вставить("СледующаяСтраница", ПолучитьЗначение(БлокСтраницыОтвета, "nextPage",, 1));
	ПараметрыСтраницы.Вставить("КоличествоСтраниц", ПолучитьЗначение(БлокСтраницыОтвета, "totalPages",, 1));
	
	Результат.Вставить("Страницы", ПараметрыСтраницы);
	
	БлокСпискаОтвета = ПолучитьЗначение(СтруктураОтвета, "_embedded",, Новый Структура());
	СписокЗаказовОтвета = ПолучитьЗначение(БлокСпискаОтвета, "items",, Новый Массив());
	
	СписокЗаказов = Новый Массив();
	Для Каждого ТекущийЗаказ Из СписокЗаказовОтвета Цикл
		
		ПараметрыЗаказа = НовыйПараметрыЗаказаЖурналаЗаказовНаДоставку();
		
		Если СервисДоставкиКлиентСервер.ЭтоДеловыеЛинии(ТипГрузоперевозки) Тогда

			ЗначениеДаты = ПолучитьЗначение(ТекущийЗаказ, "orderedAt", , "");
			ПараметрыЗаказа.ДатаЗаказа = ПрочитатьДатуJSONБезРазделителя(ЗначениеДаты);

			ЗначениеДаты = ПолучитьЗначение(ТекущийЗаказ, "orderDates.derivalFromOspSender", , "");
			ПараметрыЗаказа.ДатаОтгрузки = ПрочитатьДатуJSONБезРазделителя(ЗначениеДаты);

			ДатаИсполненияЗаказа = ПолучитьЗначение(ТекущийЗаказ, "orderDates.finish", , "");
			Если ЗначениеЗаполнено(ДатаИсполненияЗаказа) Тогда
				ЗначениеДаты = ДатаИсполненияЗаказа;
			Иначе
				ЗначениеДаты = ПолучитьЗначение(ТекущийЗаказ, "orderDates.arrivalToOspReceiver", , "");
				Если ЗначениеЗаполнено(ЗначениеДаты) Тогда
					ЗначениеДаты = ЗначениеДаты + " 00:00:00";
				КонецЕсли;
			КонецЕсли;

			ПараметрыЗаказа.ДатаДоставки = ПрочитатьДатуJSONБезРазделителя(ЗначениеДаты);

			ПараметрыЗаказа.Идентификатор = ПолучитьЗначение(ТекущийЗаказ, "orderId", , "");
			ПараметрыЗаказа.ТрекНомер = "";
			ПараметрыЗаказа.НомерЗаказа = ПолучитьЗначение(ТекущийЗаказ, "orderId", , "");

			ПараметрыЗаказа.Вставить("ПрогрессВыполнения", ПолучитьЗначение(ТекущийЗаказ, "progressPercent", , ""));
			ПараметрыЗаказа.Вставить("ПлательщикНаименование", ПолучитьЗначение(ТекущийЗаказ, "payer.name", , ""));

			ПараметрыЗаказа.Сумма = ПолучитьЗначение(ТекущийЗаказ, "totalSum", , 0);
			ПараметрыЗаказа.Состояние = ПолучитьЗначение(ТекущийЗаказ, "stateName", , "");
			ПараметрыЗаказа.СостояниеИдентификатор = ПолучитьЗначение(ТекущийЗаказ, "state", , "");
			ПараметрыЗаказа.ОтправительНаименование = ПолучитьЗначение(ТекущийЗаказ, "sender.name", , "");
			ПараметрыЗаказа.АдресОтгрузкиПредставление = ПолучитьЗначение(ТекущийЗаказ, "derival.address", , "");
			ПараметрыЗаказа.ПолучательНаименование = ПолучитьЗначение(ТекущийЗаказ, "receiver.name", , "");
			ПараметрыЗаказа.АдресДоставкиПредставление = ПолучитьЗначение(ТекущийЗаказ, "arrival.address", , "");

			ПараметрыЗаказа.ВариантОтгрузки = ?(ПолучитьЗначение(ТекущийЗаказ, "derival.Address", , "")
				= ПолучитьЗначение(ТекущийЗаказ, "derival.terminalAddress", , ""), НСтр("ru = 'От терминала'"), НСтр(
				"ru = 'От адреса'"));

			ПараметрыЗаказа.ВариантДоставки = ?(ПолучитьЗначение(ТекущийЗаказ, "arrival.Address", , "")
				= ПолучитьЗначение(ТекущийЗаказ, "arrival.terminalAddress", , ""), НСтр("ru = 'До терминала'"), НСтр(
				"ru = 'До адреса'"));

			ЕстьОплатыПоДокументам = Ложь;
			СписокПечатныхФорм = Новый СписокЗначений;
			СписокДокументов = Новый СписокЗначений;

			Если ТекущийЗаказ.Свойство("documents") И ТипЗнч(ТекущийЗаказ.documents) = Тип("Массив")
				И ТекущийЗаказ.documents.Количество() > 0 Тогда

				СписокДокументов.ЗагрузитьЗначения(ТекущийЗаказ.documents);

				Для Каждого СтрокаДокументОснование Из ТекущийЗаказ.documents Цикл

					Если СтрокаДокументОснование.payment = Истина Тогда
						ЕстьОплатыПоДокументам = Истина;
					КонецЕсли;

					Если СтрокаДокументОснование.type = "shipping" И СтрокаДокументОснование.availableDocs.Количество()
						> 0 Тогда

						СписокПечатныхФорм.Добавить(
						Новый Структура("uid, id", СтрокаДокументОснование.uid, СтрокаДокументОснование.id),
							СтрСоединить(СтрокаДокументОснование.availableDocs, ","));

					КонецЕсли;

				КонецЦикла;

			КонецЕсли;

			ПараметрыЗаказа.Вставить("СписокДокументов", СписокДокументов);
			ПараметрыЗаказа.Вставить("СписокПечатныхФорм", СписокПечатныхФорм);
			ПараметрыЗаказа.Вставить("ДоступнаПечать", СписокПечатныхФорм.Количество() > 0);

			ПараметрыЗаказа.Вставить("Оплачен", ПолучитьЗначение(ТекущийЗаказ, "isPaid", , Ложь)
				И ЕстьОплатыПоДокументам);

			ПараметрыЗаказа.Вставить("ОтправительТерминал", ПолучитьЗначение(ТекущийЗаказ, "derival.terminalName", ,
				""));
			ПараметрыЗаказа.Вставить("ПолучательТерминал", ПолучитьЗначение(ТекущийЗаказ, "arrival.terminalName", , ""));

			ПараметрыЗаказа.ПеревозчикНаименование = СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки);
			ПараметрыЗаказа.ПеревозчикИдентификатор = СервисДоставкиКлиентСервер.ИдентификаторГрузоперевозчика(ТипГрузоперевозки);
			ПараметрыЗаказа.Вставить("ТарифНаименование", "");
			ПараметрыЗаказа.Вставить("ТарифИдентификатор", "");

			ПараметрыЗаказа.Вставить("НомерЗаказаДляПечати", ПолучитьЗначение(ТекущийЗаказ, "orderNumber", , ""));
			ПараметрыЗаказа.Вставить("АдресОтгрузкиНаименование", ПолучитьЗначение(ТекущийЗаказ, "derival.address", ,
				""));
			ПараметрыЗаказа.Вставить("АдресОтгрузкиТипНаименование", "");
			ПараметрыЗаказа.Вставить("АдресДоставкиНаименование", ПолучитьЗначение(ТекущийЗаказ, "arrival.address", ,
				""));
			ПараметрыЗаказа.Вставить("АдресДоставкиТипНаименование", "");

			ПараметрыЗаказа.Вставить("АдресОтгрузкиГород", ПолучитьЗначение(ТекущийЗаказ, "derival.city", , ""));
			ПараметрыЗаказа.Вставить("АдресДоставкиГород", ПолучитьЗначение(ТекущийЗаказ, "arrival.city", , ""));

			ПараметрыЗаказа.Вставить("ДоступнаОтмена", Ложь);
			ПараметрыЗаказа.Вставить("КоличествоГрузовыхМест", ПолучитьЗначение(ТекущийЗаказ, "freight.places", , 0));
			ПараметрыЗаказа.Вставить("ГрузВес", ПолучитьЗначение(ТекущийЗаказ, "freight.weight", , 0));
			ПараметрыЗаказа.Вставить("ГрузОбъем", ПолучитьЗначение(ТекущийЗаказ, "freight.volume", , 0));
			ПараметрыЗаказа.Вставить("ГрузДлина", ПолучитьЗначение(ТекущийЗаказ, "freight.length", , 0));
			ПараметрыЗаказа.Вставить("ГрузШирина", ПолучитьЗначение(ТекущийЗаказ, "freight.width", , 0));
			ПараметрыЗаказа.Вставить("ГрузВысота", ПолучитьЗначение(ТекущийЗаказ, "freight.height", , 0));
			ПараметрыЗаказа.Вставить("ГрузОписание", ПолучитьЗначение(ТекущийЗаказ, "freight.name", , ""));

			ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоНаименование", ПолучитьЗначение(ТекущийЗаказ,
				"sender.contacts", , ""));
			ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(ТекущийЗаказ,
				"sender.phones", , ""));

			Если ПолучитьЗначение(ТекущийЗаказ, "receiver.anonym", , Ложь) Тогда
				ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоНаименование", ПолучитьЗначение(ТекущийЗаказ,
					"receiver.name", , ""));
				ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(ТекущийЗаказ,
					"receiver.anonymPhone", , ""));
			Иначе
				ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоНаименование", ПолучитьЗначение(ТекущийЗаказ,
					"receiver.contacts", , ""));
				ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(ТекущийЗаказ,
					"receiver.phones", , ""));
			КонецЕсли;

			ПараметрыЗаказа.Вставить("НаложенныйПлатежПолучен", ПолучитьЗначение(ТекущийЗаказ, "withWebOrder", , Ложь));
			ПараметрыЗаказа.Вставить("СуммаНаложенногоПлатежа", ПолучитьЗначение(ТекущийЗаказ, "webOrderItemsSum", , 0));
			ПараметрыЗаказа.Вставить("ЭтоМультизаказ", ПолучитьЗначение(ТекущийЗаказ, "documents", ,
				Новый Массив).Количество() > 1);
			
		ИначеЕсли СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
			
			ЗначениеДаты = ПолучитьЗначение(ТекущийЗаказ, "create_time", , "");
			ПараметрыЗаказа.ДатаЗаказа = ПрочитатьДатуJSONБезРазделителя(ЗначениеДаты);
			
			ЗначениеДаты = ПолучитьЗначение(ТекущийЗаказ, "delivery_detail.date", , "");
			ПараметрыЗаказа.ДатаДоставки = ПрочитатьДатуJSONБезРазделителя(ЗначениеДаты);

			ПараметрыЗаказа.Идентификатор = ПолучитьЗначение(ТекущийЗаказ, "cdek_number", , "");
			ПараметрыЗаказа.ТрекНомер = ПолучитьЗначение(ТекущийЗаказ, "cdek_number", , "");
			ПараметрыЗаказа.НомерЗаказа = ПолучитьЗначение(ТекущийЗаказ, "cdek_number", , "");
			
			ПараметрыЗаказа.Сумма = ПолучитьЗначение(ТекущийЗаказ, "delivery_detail.sum", , 0);
			
			ПараметрыЗаказа.ОтправительНаименование = ПолучитьЗначение(ТекущийЗаказ, "sender.company", , "");
			ПараметрыЗаказа.АдресОтгрузкиПредставление = ПолучитьЗначение(ТекущийЗаказ, "from_location.address", , "");
			
			ПараметрыЗаказа.ПолучательНаименование = ПолучитьЗначение(ТекущийЗаказ, "recipient.company", , "");
			ПараметрыЗаказа.АдресДоставкиПредставление = ПолучитьЗначение(ТекущийЗаказ, "to_location.address", , "");
		
			ПараметрыЗаказа.ВариантОтгрузки = ?(ПолучитьЗначение(ТекущийЗаказ, "shipment_point", , "") <> "", 
				НСтр("ru = 'От терминала'"), НСтр("ru = 'От адреса'"));
			ПараметрыЗаказа.ВариантДоставки = ?(ПолучитьЗначение(ТекущийЗаказ, "delivery_point", , "") <> "", 
				НСтр("ru = 'До терминала'"), НСтр("ru = 'До адреса'"));
			
			ПараметрыЗаказа.ПеревозчикНаименование = СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки);
			ПараметрыЗаказа.ПеревозчикИдентификатор = СервисДоставкиКлиентСервер.ИдентификаторГрузоперевозчика(ТипГрузоперевозки);
			
			ИсторияСтатусовЗаказа = ПолучитьЗначение(ТекущийЗаказ, "statuses", , Новый массив);
			Если ИсторияСтатусовЗаказа.Количество() > 0 Тогда
				ТекущийСтатусЗаказа = ИсторияСтатусовЗаказа[ИсторияСтатусовЗаказа.Количество()-1];
				ПараметрыЗаказа.Состояние = ТекущийСтатусЗаказа.name;
				ПараметрыЗаказа.СостояниеИдентификатор = ТекущийСтатусЗаказа.code;
			КонецЕсли;
			
			Для Каждого ОписаниеСтатуса Из ИсторияСтатусовЗаказа Цикл
				Если ОписаниеСтатуса.code = "TAKEN_BY_TRANSPORTER_FROM_SENDER_CITY" Тогда
					ПараметрыЗаказа.ДатаОтгрузки = ПрочитатьДатуJSONБезРазделителя(ОписаниеСтатуса.date_time);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		СписокЗаказов.Добавить(ПараметрыЗаказа);
		
	КонецЦикла;
	
	Результат.Вставить("Список", СписокЗаказов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьСписокСостоянийЗаказовИзСервиса(СтруктураОтвета, Результат)
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗаказов = ПолучитьЗначение(СтруктураОтвета, "data",, Новый Массив());
	
	Результат.Вставить("Список", СписокЗаказов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьПечатнуюФормуИзСервиса(СтруктураОтвета, Результат)
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Список = ПолучитьЗначение(СтруктураОтвета, "data",, Новый Структура());
	
	Результат.Вставить("Список", Список);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьСостоянияЗаказовНаДоставку(СтруктураОтвета, Результат, ГрупповаяОбработка = Ложь)
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки") И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокСпискаОтвета = ПолучитьЗначение(СтруктураОтвета, "_embedded", , Новый Структура);
	СписокЗаказовОтвета = ПолучитьЗначение(БлокСпискаОтвета, "items", , Новый Массив);
	
	Для Каждого ДанныеЗаказа Из СписокЗаказовОтвета Цикл
		Результат.Список.Вставить(ДанныеЗаказа.id, ДанныеЗаказа.status);
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьРезультатЗапросаПолучитьНаселенныеПункты(РезультатЗапроса, ПараметрыЗапроса);
	
	Результат = Новый Структура;
	
	ОбработатьБлокОшибокРезультатаЗапроса(РезультатЗапроса, Результат);
	
	Если Результат.Свойство("Ошибки") И Результат.Ошибки.Количество() > 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Список = ПолучитьЗначение(РезультатЗапроса, "settlements", , Новый Массив);
	
	НаселенныеПункты = Новый СписокЗначений;
	НаселенныеПунктыДанные = Новый Соответствие;
	
	Для Каждого НаселенныйПункт Из Список Цикл
		
		Параметры = НовыеПараметрыНаселенногоПункта();
		
		Параметры.Идентификатор = ПолучитьЗначение(НаселенныйПункт, "id", , 0);
		Параметры.НаложенныйПлатежСуммаМаксимум = ПолучитьЗначение(НаселенныйПункт, "payment_limit", , 0);
		Наименование = ПолучитьЗначение(НаселенныйПункт, "name", , "");
		Регион = ПолучитьЗначение(НаселенныйПункт, "region", , "");
		Представление = Наименование + ?(ПустаяСтрока(Регион), "", СтрШаблон(" (%1)", Регион));
		Параметры.Представление = Представление;
		
		НаселенныеПункты.Добавить(Параметры.Идентификатор, Представление);
		НаселенныеПунктыДанные.Вставить(Параметры.Идентификатор, Параметры);
		
	КонецЦикла;
	
	// Для заполнения списков выбора населенных пунктов
	Результат.Вставить("НаселенныеПункты", НаселенныеПункты);
	// Для хранения данных населенных пунктов
	Результат.Вставить("НаселенныеПунктыДанные", НаселенныеПунктыДанные);
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьРезультатЗапросаПолучитьТарифыИУслуги(РезультатЗапроса, ПараметрыЗапроса);
	
	Результат = Новый Структура;
	
	ОбработатьБлокОшибокРезультатаЗапроса(РезультатЗапроса, Результат);
	
	Если Результат.Свойство("Ошибки") И Результат.Ошибки.Количество() > 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТипГрузоперевозки = ПараметрыЗапроса.ТипГрузоперевозки;
	
	ДанныеТарифы = ПолучитьЗначение(РезультатЗапроса, "tariffs", , Новый Массив);
	ДанныеУслуги = ПолучитьЗначение(РезультатЗапроса, "services", , Новый Массив);
	ДанныеНесовместимыеУслуги = ПолучитьЗначение(РезультатЗапроса, "incompatibleServices", , Новый Массив);
	
	Тарифы = Новый Массив;
	УслугиТарифов = Новый СписокЗначений;
	НесовместимыеУслуги = Новый Массив;
	
	Для Каждого Тариф Из ДанныеТарифы Цикл
		
		ПараметрыТарифа = НовыеПараметрыТарифа();
		
		ПараметрыТарифа.Идентификатор = ПолучитьЗначение(Тариф, "id", , "");
		ПараметрыТарифа.Наименование = ПолучитьЗначение(Тариф, "name", , "");
		ПараметрыТарифа.Описание = ПолучитьЗначение(Тариф, "description", , "");
		ПараметрыТарифа.СпособОтгрузки = ПолучитьЗначение(Тариф, "shipmentType", , -1);
		ПараметрыТарифа.ПунктПриемаГрузаТипИдентификатор = ПолучитьЗначение(Тариф, "shipmentPointType", , -1);
		ПараметрыТарифа.СпособДоставки = ПолучитьЗначение(Тариф, "deliveryType", , -1);
		ПараметрыТарифа.ПунктВыдачиГрузаТипИдентификатор = ПолучитьЗначение(Тариф, "deliveryPointType", , -1);
		
		УслугиТарифа = ПолучитьЗначение(Тариф, "services", , Новый Массив);
		Для Каждого Услуга Из УслугиТарифа Цикл
			ПараметрыТарифа.Услуги.Добавить(ПолучитьЗначение(Услуга, "id", , ""));
		КонецЦикла;
		
		Тарифы.Добавить(ПараметрыТарифа);
		
	КонецЦикла;
	
	Для Каждого Услуга Из ДанныеУслуги Цикл
		
		ПараметрыУслуги = НовыеПараметрыУслуги(ТипГрузоперевозки);
		
		ПараметрыУслуги.Идентификатор = ПолучитьЗначение(Услуга, "id", , "");
		ПараметрыУслуги.Наименование = ПолучитьЗначение(Услуга, "name", , "");
		ПараметрыУслуги.Категория = ПолучитьЗначение(Услуга, "category", , "");
		ПараметрыУслуги.Обязательная = ПолучитьЗначение(Услуга, "required", , Ложь);
		ПараметрыУслуги.Автоматическая = ПолучитьЗначение(Услуга, "auto", , Ложь);
		ПараметрыУслуги.ПоказыватьИнформацию = ПолучитьЗначение(Услуга, "isDescribed", , Ложь);
		Представление = СтрШаблон("%1%2", ПараметрыУслуги.Категория, ПараметрыУслуги.Наименование);
		
		Для Каждого Свойство Из ПолучитьЗначение(Услуга, "properties", , Новый Массив) Цикл
			
			ПараметрыСвойства = Новый Структура;
			
			ПараметрыСвойства.Вставить("Идентификатор", ПолучитьЗначение(Свойство, "id"));
			ПараметрыСвойства.Вставить("Наименование", ПолучитьЗначение(Свойство, "name"));
			ПараметрыСвойства.Вставить("ЕдиницаИзмерения", ПолучитьЗначение(Свойство,"unit"));
			ПараметрыСвойства.Вставить("ТипЗначения", ПолучитьОписаниеТипаПоСтруктуре(ПолучитьЗначение(Свойство, "type")));
			ПараметрыСвойства.Вставить("Значение", ПолучитьЗначение(Свойство, "value"));
			
			ПараметрыУслуги.Свойства.Добавить(ПараметрыСвойства);
			
		КонецЦикла;
		
		УслугиТарифов.Добавить(ПараметрыУслуги, Представление);
		
	КонецЦикла;
		
	УслугиТарифов.СортироватьПоПредставлению();
	УслугиТарифов = УслугиТарифов.ВыгрузитьЗначения();
	
	Для Каждого НесовместимаяУслуга Из ДанныеНесовместимыеУслуги Цикл
		
		ПараметрыНесовместимыхУслуг = Новый Структура;
		
		ПараметрыНесовместимыхУслуг.Вставить("Идентификатор", ПолучитьЗначение(НесовместимаяУслуга, "id", , ""));
		ПараметрыНесовместимыхУслуг.Вставить("ИдентификаторНесовместимойУслуги",
			ПолучитьЗначение(НесовместимаяУслуга, "incompatibleId", , ""));
		
		НесовместимыеУслуги.Добавить(ПараметрыНесовместимыхУслуг);
		
	КонецЦикла;
	
	Результат.Вставить("Тарифы", Тарифы);
	Результат.Вставить("УслугиТарифов", УслугиТарифов);
	Результат.Вставить("НесовместимыеУслуги", НесовместимыеУслуги);
	
	Кэш = Новый Структура(СервисДоставкиКлиентСервер.ИмяМетодаПолучитьТарифыИУслуги(), Результат);
	ОбновитьКэшированныеЗначения(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, ТипГрузоперевозки, Кэш);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КонвертацияДанных

Процедура ДобавитьКолонкиТаблицыОписания(ТаблицаИсточник, Имя, Префикс = "")
	
	Таблица = Новый ТаблицаЗначений;
	
	Если Имя = "PageParameters" Тогда
		
		Таблица.Колонки.Добавить("Страница",          СервисДоставкиСлужебный.Типы().Число, "number");
		Таблица.Колонки.Добавить("РазмерСтраницы",    СервисДоставкиСлужебный.Типы().Число, "size");
		Таблица.Колонки.Добавить("КоличествоСтрок",   СервисДоставкиСлужебный.Типы().Число, "totalElements");
		Таблица.Колонки.Добавить("КоличествоСтраниц", СервисДоставкиСлужебный.Типы().Число, "totalPages");
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдено описание данных сервиса %1'"), Имя);
		
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаИсточник) <> Тип("ТаблицаЗначений") Тогда
		ТаблицаИсточник = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Если Префикс <> "" Тогда
		Префикс = Префикс + ".";
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из Таблица.Колонки Цикл
		ТаблицаИсточник.Колонки.Добавить(ЭлементКоллекции.Имя, ЭлементКоллекции.ТипЗначения, Префикс + ЭлементКоллекции.Заголовок);
	КонецЦикла;
	
КонецПроцедуры

// Получение структуры данных по абсолютному пути.
// Параметры:
//  Путь - Строка - например, "pathToRoot[0].categories".
//
// Возвращаемое значение:
//  Произвольный - возвращаемые данные.
//
Функция ПолучитьЗначенияДанныеСтруктурыПоАбсолютномуПути(Значение, Путь, Отказ)
	
	СвойстваПути = СтрРазделить(Путь, ".");
	Результат = ЗначениеСвойстваСтруктурыВРекурсии(Значение, СвойстваПути, Отказ);
	Возврат Результат;
	
КонецФункции

// Получить значение данных структуры в рекурсии.
//
// Параметры:
//  Значение - Произвольный - значения обработки.
//  СвойстваПути - Массив - элементы пути, например  pathToRoot[0]; categories.
//  Отказ - Булево - признак ошибки при разборе.
//
Функция ЗначениеСвойстваСтруктурыВРекурсии(Знач Значение, Знач СвойстваПути, Отказ = Ложь)
	
	Свойство = СвойстваПути[0];
	МеткаКоллекции = СтрНайти(Свойство, "[");
	ИндексКоллекции = Неопределено;
	Если МеткаКоллекции <> 0 Тогда
		ИндексКоллекции = Сред(Свойство, МеткаКоллекции + 1);
		ИндексКоллекции = Лев(ИндексКоллекции, СтрДлина(ИндексКоллекции) - 1);
		Свойство = Лев(Свойство, МеткаКоллекции - 1);
	КонецЕсли;
	
	// Проверка свойства структуры.
	Если ТипЗнч(Значение) <> Тип("Структура")
		ИЛИ Значение.Свойство(Свойство) = Ложь Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск нового элемента
	Если МеткаКоллекции = 0 Тогда
		Значение = Значение[Свойство];
	Иначе
		Значение = Значение[Свойство][Число(ИндексКоллекции)];
	КонецЕсли;
	
	Если СвойстваПути.Количество() = 1 Тогда
		// Последний элемент пути.
		Возврат Значение;
	Иначе
		СвойстваПути.Удалить(0);
		Возврат ЗначениеСвойстваСтруктурыВРекурсии(Значение, СвойстваПути, Отказ);
	КонецЕсли;
	
КонецФункции

// Преобразование массива структур в таблицу значений, структуры в структуру.
//
// Параметры:
//  Коллекция				 - Массив - массив структур.
//  ОписаниеТаблицыЗначений	 - ТаблицаЗначений - описание результирующей таблицы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - результат преобразования.
//
Функция ПреобразоватьКоллекциюПоТаблицеЗначений(Знач Источник, Знач ОписаниеТаблицыЗначений, ТипРезультата = Неопределено)
	
	Если ТипЗнч(Источник) = Тип("Массив") И Источник.Количество() = 0 Тогда
		Возврат ОписаниеТаблицыЗначений;
	ИначеЕсли ТипЗнч(Источник) = Тип("Структура") И НЕ ЗначениеЗаполнено(Источник) Тогда
		ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ОписаниеТаблицыЗначений.Скопировать().Добавить());
	КонецЕсли;
	
	Если ТипРезультата = Неопределено Тогда
		Если ТипЗнч(Источник) = Тип("Массив") Тогда
			ТипРезультата = Тип("ТаблицаЗначений");
		Иначе
			ТипРезультата = ТипЗнч(Источник);
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыЧерезТочку = Новый Соответствие; // Реквизиты, получаемые через точку.
	ПравилаКонвертации  = Новый Соответствие; // Список конвертаций значений "*".
	ВложенныеКоллекции  = Новый Соответствие; // Список вложенных коллекций "|".
	
	// Создание колонок без типов.
	ВременнаяТаблица = Новый ТаблицаЗначений;
	Для каждого КолонкаТаблицыОписания Из ОписаниеТаблицыЗначений.Колонки Цикл
		
		// Поиск правил преобразования.
		ИмяСвойстваИсточника = КолонкаТаблицыОписания.Заголовок;
		
		РазделительПравила = СтрНайти(ИмяСвойстваИсточника, "*");
		Если РазделительПравила <> 0 Тогда
			ИмяСвойстваИсточника = СокрП(Лев(ИмяСвойстваИсточника, РазделительПравила - 1));
			ИмяПравила = Сред(КолонкаТаблицыОписания.Заголовок, РазделительПравила + 1);
		КонецЕсли;
		
		РазделительОписание = СтрНайти(ИмяСвойстваИсточника, "|");
		Если РазделительОписание <> 0 Тогда
			ИмяСвойстваИсточника = СокрП(Лев(ИмяСвойстваИсточника, РазделительОписание - 1));
			ИмяОписания = Сред(КолонкаТаблицыОписания.Заголовок, РазделительОписание + 1);
		КонецЕсли;
		
		НовоеИмяСвойстваИсточника = ИмяСвойстваИсточника;
		
		// Поиск реквизитов в структуре.
		Если СтрНайти(ИмяСвойстваИсточника, ".") Тогда
			НовоеИмяСвойстваИсточника = СтрЗаменить(ИмяСвойстваИсточника, ".", "_");
			РеквизитыЧерезТочку.Вставить(ИмяСвойстваИсточника, НовоеИмяСвойстваИсточника);
		КонецЕсли;
		
		// Добавления правила конвертации.
		Если РазделительПравила <> 0 Тогда
			ПравилаКонвертации.Вставить(НовоеИмяСвойстваИсточника, ИмяПравила);
		КонецЕсли;
		
		// Добавления описание вложенной коллекции.
		Если РазделительОписание <> 0 Тогда
			ВложенныеКоллекции.Вставить(НовоеИмяСвойстваИсточника, ИмяОписания);
		КонецЕсли;
		
		ВременнаяТаблица.Колонки.Добавить(НовоеИмяСвойстваИсточника,, КолонкаТаблицыОписания.Имя);
		
	КонецЦикла;
	
	// Заполнение данных таблицы обработки.
	Если ТипЗнч(Источник) = Тип("Массив") Тогда
		
		// Источником данных является массив структур.
		
		Для каждого СтрокаИсточника Из Источник Цикл
			НоваяСтрока = ВременнаяТаблица.Добавить();
			Если СтрокаИсточника <> Неопределено Тогда // Возможно значение неопределено.
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
			КонецЕсли;
			                                       
			// Заполнение реквизитов в структуре.
			Для каждого Реквизит Из РеквизитыЧерезТочку Цикл
				СоставСтруктурыРеквизита = СтрРазделить(Реквизит.Ключ, ".", Ложь);
				НоваяСтрока[Реквизит.Значение] = ЗначениеСвойстваСтруктурыВРекурсии(СтрокаИсточника, СоставСтруктурыРеквизита);
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("Структура") Тогда
		
		// Источником данных является структура.
		
		НоваяСтрока = ВременнаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
		
		// Заполнение реквизитов в структуре.
		Для каждого Реквизит Из РеквизитыЧерезТочку Цикл
			СоставСтруктурыРеквизита = СтрРазделить(Реквизит.Ключ, ".", Ложь);
			НоваяСтрока[Реквизит.Значение] = ЗначениеСвойстваСтруктурыВРекурсии(Источник, СоставСтруктурыРеквизита);
		КонецЦикла;
		
	КонецЕсли;
	
	// Обработка по правилам преобразования "*".
	Для каждого ЭлементПреобразования Из ПравилаКонвертации Цикл
		ДанныеОбработки = ВременнаяТаблица.ВыгрузитьКолонку(ЭлементПреобразования.Ключ);
		ОбработанныеЗначения = КонвертироватьЗначениеСервиса(ДанныеОбработки, ЭлементПреобразования.Значение);
		Если ТипЗнч(ОбработанныеЗначения) = Тип("Массив") Тогда
			ВременнаяТаблица.ЗагрузитьКолонку(ОбработанныеЗначения, ЭлементПреобразования.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	// Обработка по описаниям вложенных коллекций "|".
	Для каждого ЭлементОписания Из ВложенныеКоллекции Цикл
		
		ТаблицаОписанияДанных = Неопределено;
		ДобавитьКолонкиТаблицыОписания(ТаблицаОписанияДанных, ЭлементОписания.Значение);
		Для каждого ЭлементКоллекции Из ВременнаяТаблица Цикл
			ОбработанныеЗначения = ПреобразоватьКоллекциюПоТаблицеЗначений(
				ЭлементКоллекции[ЭлементОписания.Ключ], ТаблицаОписанияДанных);
			ЭлементКоллекции[ЭлементОписания.Ключ] = ОбработанныеЗначения;
		КонецЦикла;
		
	КонецЦикла;
	
	// Обратное переименование колонок.
	Для каждого КолонкаТаблицыОбработки Из ВременнаяТаблица.Колонки Цикл
		КолонкаТаблицыОбработки.Имя = КолонкаТаблицыОбработки.Заголовок;
	КонецЦикла;
	
	// Финальная подготовка результата преобразования.
	Если ТипРезультата = Тип("ТаблицаЗначений") Тогда
		
		// Заполнение таблицы результата.
		Результат = ОписаниеТаблицыЗначений.Скопировать();
		Для каждого СтрокаТаблицы Из ВременнаяТаблица Цикл
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), СтрокаТаблицы);
		КонецЦикла;
		
	ИначеЕсли ТипРезультата = Тип("Структура") И ВременнаяТаблица.Количество() = 1 Тогда
		
		// Заполнение структуры
		Результат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ВременнаяТаблица[0]);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Преобразовать значение полученное из сервиса.
//
// Параметры:
//  Данные			- Произвольный - данные, полученные из сервиса.
//  Правило			- Строка - имя обработчика.
//  КодСостояния	- Число - код состояния ответа сервиса.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемое значение разбора.
//
Функция КонвертироватьЗначениеСервиса(Значение, Правило, КодСостояния = 200)
	
	Перем Результат;

	Если Правило = "ИстинаПоКоду200" Тогда
		
		Результат = (КодСостояния = 200);
		
	ИначеЕсли ТипЗнч(Правило) = Тип("Строка") Тогда
		
		Результат = ЗначениеСвойстваСтруктурыВРекурсии(Значение, СтрРазделить(Правило, "."));
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Ошибка десериализации значения'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавление значение в структуру с учетом обязательности заполнения.
//
// Параметры:
//  Результат			 - Структура - переменная для добавления значения
//  Поле				 - Строка - имя добавляемого поля
//  Значение			 - Произвольный - добавляемое значение
//  ОбязательныйРеквизит - Булево - признак обязательности значения
//  ЗначениеПоУмолчанию  - Произвольный - добавляемое значение по умолчанию
//
Процедура ДобавитьЗначение(Результат, Знач Поле, Знач Значение, ОбязательныйРеквизит = Ложь, ЗначениеПоУмолчанию = Неопределено)
	
	Если Не ОбязательныйРеквизит И Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	
	ПозицияРазделителя = СтрНайти(Поле, ".");
	Если ПозицияРазделителя > 0 Тогда
		МассивПолей = СтрРазделить(Поле, ".");
		ИмяСвойства = МассивПолей[0];
		Если Не Результат.Свойство(ИмяСвойства) Тогда
			Результат.Вставить(ИмяСвойства);
		КонецЕсли;
		ДобавитьЗначение(Результат[ИмяСвойства], Сред(Поле, ПозицияРазделителя + 1), Значение, ОбязательныйРеквизит);
		Возврат;
	КонецЕсли;
	
	Значение = ?(Значение = Неопределено, ЗначениеПоУмолчанию, Значение);
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Значение = СокрЛП(Значение);
	КонецЕсли;
	
	Результат.Вставить(Поле, Значение);
	
КонецПроцедуры

Функция ПолучитьЗначение(Знач Источник, Знач ИмяРеквизита, ТипЗначения = "", ЗначениеПоУмолчанию = Неопределено)
	
	Значение = ЗначениеПоУмолчанию;
	
	МассивПолей = СтрРазделить(ИмяРеквизита, ".");
	КоличествоПолей = МассивПолей.Количество()-1;
	
	Для Ид = 0 По КоличествоПолей-1 Цикл
		ИмяСвойства = МассивПолей[Ид];
		
		Если ТипЗнч(Источник) = Тип("Структура")
			И Источник.Свойство(ИмяСвойства) Тогда
			Источник = Источник[ИмяСвойства];
		Иначе
			Возврат Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	ИмяРеквизита = МассивПолей[КоличествоПолей];
	
	Если ТипЗнч(Источник) = Тип("Структура")
		И Источник.Свойство(ИмяРеквизита) Тогда
		
		ИсходноеЗначение = Источник[ИмяРеквизита];
		
		Если ИсходноеЗначение = Неопределено Тогда
			Значение = ЗначениеПоУмолчанию;
		ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Массив") Тогда
			Значение = ИсходноеЗначение;
		ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Структура") Тогда
			Значение = ИсходноеЗначение;
		ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Дата") Тогда
			Значение = ИсходноеЗначение;
		ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Строка") И ВРег(ИсходноеЗначение) = "NONE" Тогда
			Значение = ЗначениеПоУмолчанию;
		ИначеЕсли ТипЗначения = "" Тогда
			Значение = ИсходноеЗначение;
		ИначеЕсли ТипЗначения = "Дата" Тогда
			Значение = СтрокаВДату(ИсходноеЗначение);
		ИначеЕсли ТипЗначения = "Число" Тогда
			Значение = СтрокаВЧисло(ИсходноеЗначение);
		ИначеЕсли ТипЗначения = "ХранилищеЗначения" Тогда
			Значение = ХранилищеЗначенияИзJSON(ИсходноеЗначение);
		Иначе
			ТребуемыйТип	= Новый ОписаниеТипов(ТипЗначения);
			Значение		= ТребуемыйТип.ПривестиЗначение(ИсходноеЗначение);
		КонецЕсли;
		
		Если Значение = Неопределено Тогда
			Значение = ЗначениеПоУмолчанию;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ЗначениеВСтрокуJSON(Параметры, Отказ = Ложь, ОписаниеОшибки = "", ТипГрузоперевозки = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	ТребуетсяЭкранирование = ТребуетсяЭкранирование(ТипГрузоперевозки);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	Если ТребуетсяЭкранирование Тогда
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, , , ЭкранированиеСимволовJSON.СимволыВнеASCII);
	Иначе
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто);
	КонецЕсли;
	Попытка
		ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
		ЗаписатьJSON(ЗаписьJSON, Параметры,,"ПреобразованиеТиповЗначений", СервисДоставки);
	Исключение
		Отказ = Истина;
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Результат;
	КонецПопытки;
	
	Возврат ЗаписьJSON.Закрыть();

КонецФункции

Функция ХранилищеЗначенияИзJSON(Значение)
	
	Результат = "";
	Значение = СокрЛП(Значение);
	
	Если Значение <> "" Тогда
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Значение);
		Попытка
			ЗначениеИзJSON = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
		Исключение
			Возврат Результат;
		КонецПопытки;
		
		ЧтениеJSON.Закрыть();
	
		Если ЗначениеЗаполнено(ЗначениеИзJSON) 
			И ТипЗнч(ЗначениеИзJSON) = Тип("ХранилищеЗначения") Тогда
			Результат = ЗначениеИзJSON.Получить();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаВДату(СтрокаДанных)
	
	Результат = Дата(1,1,1);
	
	Если СтрокаДанных = ПустаяДатаJSON() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = ПрочитатьДатуJSON(СтрокаДанных, ФорматДатыJSON.ISO);
	
	Возврат Результат;
	
КонецФункции

Функция ПустаяДатаJSON() 

	Возврат ЗаписатьДатуJSON('00010101', ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.УниверсальнаяДата);

КонецФункции

Функция СтрокаВЧисло(Значение)
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Результат = Значение;
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		НовоеЗначение = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Значение);
		Если НовоеЗначение = Неопределено Тогда
			Результат = 0;
		Иначе
			Результат = НовоеЗначение;
		КонецЕсли;
		
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДокументыОснованияПоИдентификаторам(ИдентификаторыДокументов)

	ДокументыОснования = Новый СписокЗначений;

	Если ТипЗнч(ИдентификаторыДокументов) = Тип("Массив") Тогда
	
	МенеджерыОбъектовДокументовОснованийЗаказаНаДоставку = МенеджерыОбъектовДокументовОснованийЗаказаНаДоставку(Истина);
	
	Для Каждого Идентификатор Из ИдентификаторыДокументов Цикл
		ДокументОснование = ДокументОснованияЗаказаНаДоставкуПоУИД(Идентификатор,
			МенеджерыОбъектовДокументовОснованийЗаказаНаДоставку);
		Если ДокументОснование <> Неопределено Тогда
			ДокументыОснования.Добавить(ДокументОснование);
		КонецЕсли;
	КонецЦикла;
	
	КонецЕсли;
	
	Возврат ДокументыОснования;

КонецФункции

// Поместить в хранилище значения.
// 
// Параметры:
//  Значение - Произвольный - Значение для помещения в хранилище значения
//  ТипГрузоперевозки - Число - Тип грузоперевозки
//  СтепеньСжатия - Число - Степень сжатия
// 
// Возвращаемое значение:
//  ХранилищеЗначения, Строка - Значение в хранилище значения
Функция ПоместитьВХранилищеЗначения(Значение, ТипГрузоперевозки, СтепеньСжатия = 9)

	Результат = "";
	
	Если ТипГрузоперевозки <> СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1ССДЭК() Тогда
		Результат = Новый ХранилищеЗначения(Значение, Новый СжатиеДанных(СтепеньСжатия));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Получить описание типа по структуре.
// 
// Параметры:
//  СтруктураТипа - Структура - Структура типа
// 
// Возвращаемое значение:
//  ОписаниеТипов, Неопределено - Получить описание типа по структуре
Функция ПолучитьОписаниеТипаПоСтруктуре(СтруктураТипа)
	
	НовыйТип = Неопределено;
	
	ТипДанныхНаименование = ПолучитьЗначение(СтруктураТипа, "name");
	
	Если ТипДанныхНаименование = "Число" Тогда
		Вариант = ПолучитьЗначение(СтруктураТипа, "variant", , 0);
		ЗначениеДопустимогоЗнака = ?(Вариант = 0, ДопустимыйЗнак.Любой, ДопустимыйЗнак.Неотрицательный);
		Разрядность = ПолучитьЗначение(СтруктураТипа, "mainValue", , 0);
		РазрядностьДробнойЧасти = ПолучитьЗначение(СтруктураТипа, "value", , 0);
		НовыйТип = Новый ОписаниеТипов(ТипДанныхНаименование, Новый КвалификаторыЧисла(Разрядность,
			РазрядностьДробнойЧасти, ЗначениеДопустимогоЗнака));
	ИначеЕсли ТипДанныхНаименование = "Строка" Тогда
		Вариант = ПолучитьЗначение(СтруктураТипа, "variant", , 0);
		Длина = ПолучитьЗначение(СтруктураТипа, "mainValue", , 0);
		НовыйТип = Новый ОписаниеТипов(ТипДанныхНаименование, Новый КвалификаторыСтроки(Длина,
			?(Вариант = 0, ДопустимаяДлина.Переменная, ДопустимаяДлина.Фиксированная)));
	ИначеЕсли ТипДанныхНаименование = "Дата" Тогда
		ЗначениеЧастиДаты = ЧастиДаты.ДатаВремя; // 0 - ДатаВремя, 1 - Дата, 2 - Время
		Вариант = ПолучитьЗначение(СтруктураТипа, "variant", , 0);
		Если Вариант = 1 Тогда
			ЗначениеЧастиДаты = ЧастиДаты.Дата;
		ИначеЕсли Вариант = 2 Тогда
			ЗначениеЧастиДаты = ЧастиДаты.Время;
		КонецЕсли;
		НовыйТип = Новый ОписаниеТипов("Строка", Новый КвалификаторыДаты(ЗначениеЧастиДаты));
	ИначеЕсли ТипДанныхНаименование = "Булево" Тогда
		НовыйТип = Новый ОписаниеТипов(ТипДанныхНаименование);
	КонецЕсли;
	
	Возврат НовыйТип;
	
КонецФункции

// Локальное время сеанса.
// 
// Параметры:
//  Дата - Дата
// 
// Возвращаемое значение:
//  Дата - Локальное время сеанса
Функция ЛокальноеВремяСеанса(Дата)
	Возврат МестноеВремя(УниверсальноеВремя(Дата), ЧасовойПоясСеанса());
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхИзЛокальнойБазыДанных

// Менеджеры объектов документов-оснований заказа на доставку.
// 
// Параметры:
//  ИсключитьНедоступныеТипы - Булево - Исключить типы, у которых для пользователя нет прав на чтение
// 
// Возвращаемое значение:
//  Массив - Менеджеры объектов документов-оснований заказа на доставку
Функция МенеджерыОбъектовДокументовОснованийЗаказаНаДоставку(ИсключитьНедоступныеТипы = Ложь)
	
	Результат = Новый Массив();
	
	ОжидаемыеТипыДокументов = Метаданные.ОпределяемыеТипы.ОснованиеЗаказаСервисДоставки.Тип.Типы();
			
	Для Каждого ОжидаемыйТип Из ОжидаемыеТипыДокументов Цикл
				
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ОжидаемыйТип);
		Если ОбъектМетаданных <> Неопределено
			И ОбщегоНазначения.ЭтоСсылка(ОжидаемыйТип) 
			И (НЕ ИсключитьНедоступныеТипы ИЛИ (ПравоДоступа("Чтение", ОбъектМетаданных))) Тогда
				
			НаименованиеТипа = ОбщегоНазначения.СтроковоеПредставлениеТипа(ОжидаемыйТип);
			НаименованиеТипа = СтрЗаменить(НаименованиеТипа, "Ссылка", "");
			Результат.Добавить(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(НаименованиеТипа));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Поиск по УИД документа-основания заказа на доставку
// 
// Параметры:
//  ИдентификаторДокумента - Строка(36) - Идентификатор документа
//  МенеджерыОбъектовОжидаемыхТиповДокументов  - массив элементов типа менеджер объекта - менеджеры объектов в которых необходимо искать ссылку по GUID
// 
// Возвращаемое значение:
//  ДокументСсылка, Неопределено - документ-основание заказа на доставку
Функция ДокументОснованияЗаказаНаДоставкуПоУИД(ИдентификаторДокумента, МенеджерыОбъектовОжидаемыхТиповДокументов);
		
	ДокументОснование = Неопределено;
	
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторДокумента) Тогда
		ИдентификаторДокумента = Новый УникальныйИдентификатор(ИдентификаторДокумента);
		
		Если ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
			
			Для Каждого МенеджерОбъекта Из МенеджерыОбъектовОжидаемыхТиповДокументов Цикл
				ВозможныйДокументОснование = МенеджерОбъекта.ПолучитьСсылку(ИдентификаторДокумента);
				
				УстановитьПривилегированныйРежим(Истина);
				Если ВозможныйДокументОснование.ПолучитьОбъект() <> Неопределено Тогда
					ДокументОснование = ВозможныйДокументОснование;
					УстановитьПривилегированныйРежим(Ложь);
					Прервать;
				КонецЕсли;
				УстановитьПривилегированныйРежим(Ложь);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДокументОснование;
	
КонецФункции

Функция УчастникГрузоперевозкиПоУИДилиИННиКПП(ИНН, КПП, УникальныйИдентификатор = Неопределено)
	
	УчастникГрузоперевозки = Неопределено;
	ПоискПоУникальномуИдентификатору = Ложь;
	ПоискПоИННиКПП = ИННиКППЗаполнены(ИНН, КПП);
	
	Если ТипЗнч(УникальныйИдентификатор) = Тип("УникальныйИдентификатор") Тогда
		ПоискПоУникальномуИдентификатору = Истина;
	ИначеЕсли ТипЗнч(УникальныйИдентификатор) = Тип("Строка")
		И СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(УникальныйИдентификатор) Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор(УникальныйИдентификатор);
		ПоискПоУникальномуИдентификатору = Истина;
	КонецЕсли;
	
	Если ПоискПоИННиКПП Или ПоискПоУникальномуИдентификатору Тогда
		
		ТипыОрганизаций = Метаданные.ОпределяемыеТипы.ОрганизацияСервисДоставки.Тип.Типы();
		ТипыКонтрагентов = Метаданные.ОпределяемыеТипы.КонтрагентСервисДоставки.Тип.Типы();
		
		МассивТекстовЗапроса = Новый Массив;
		Для Каждого ТекущийТип Из ТипыОрганизаций Цикл
			
			ТипСтрока = ОбщегоНазначения.СтроковоеПредставлениеТипа(ТекущийТип);
			ТипСтрока = СтрЗаменить(ТипСтрока, "Ссылка", "");
			ТипМетаданных = СтрЗаменить(ТипСтрока, "Справочник.", "");
			
			ОбъектМетаданных = Метаданные.Справочники.Найти(ТипМетаданных);
			Если ОбъектМетаданных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("ИНН", ОбъектМетаданных) Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьРеквизитКПП = Ложь;
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КПП", ОбъектМетаданных) Тогда
				ЕстьРеквизитКПП = Истина;
			КонецЕсли;
			
			ТекстПодзапроса = "";
			
			Если ПоискПоУникальномуИдентификатору Тогда
				
				ТекстПодзапроса = "ВЫБРАТЬ
				                  |	Таблица.Ссылка КАК Ссылка,
				                  |	Таблица.Наименование КАК Наименование,
				                  |	Таблица.ИНН КАК ИНН,
				                  |	Таблица.КПП КАК КПП,
				                  |	1 КАК ЭтоОрганизация,
				                  |	4 КАК Приоритет
				                  |ИЗ
				                  |	&ИмяТаблицы КАК Таблица
				                  |ГДЕ
				                  |	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Таблица.Ссылка) = &УникальныйИдентификатор";
				
			КонецЕсли;
			
			Если ПоискПоИННиКПП Тогда
				
				ТекстПодзапроса = ?(ПустаяСтрока(ТекстПодзапроса), "", ТекстПодзапроса + ОбщегоНазначения.ТекстОбъединитьВсе());
				ТекстПодзапроса = ТекстПодзапроса + "ВЫБРАТЬ
					                  |	Таблица.Ссылка КАК Ссылка,
					                  |	Таблица.Наименование КАК Наименование,
					                  |	Таблица.ИНН КАК ИНН,
				                 	  |	Таблица.КПП КАК КПП,
					                  |	1 КАК ЭтоОрганизация,
					                  |	3 КАК Приоритет
					                  |ИЗ
					                  |	&ИмяТаблицы КАК Таблица
					                  |ГДЕ
					                  |	Таблица.ИНН = &ИНН
					                  |	И Таблица.КПП = &КПП";
			КонецЕсли;
			
			Если Не ЕстьРеквизитКПП Тогда
				ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "Таблица.КПП КАК КПП,", "");
			КонецЕсли;
			ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ИмяТаблицы", ТипСтрока);
			СервисДоставкиПереопределяемый.ОбработатьЗапросПолученияУчастникаГрузоперевозкиПоИННиКПП(ТекстПодзапроса, ТекущийТип);
			МассивТекстовЗапроса.Добавить(ТекстПодзапроса);
			
		КонецЦикла;
		
		Для Каждого ТекущийТип Из ТипыКонтрагентов Цикл
			
			ТипСтрока = ОбщегоНазначения.СтроковоеПредставлениеТипа(ТекущийТип);
			ТипСтрока = СтрЗаменить(ТипСтрока, "Ссылка", "");
			ТипМетаданных = СтрЗаменить(ТипСтрока, "Справочник.", "");
			
			ОбъектМетаданных = Метаданные.Справочники.Найти(ТипМетаданных);
			Если ОбъектМетаданных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("ИНН", ОбъектМетаданных) Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьРеквизитКПП = Ложь;
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КПП", ОбъектМетаданных) Тогда
				ЕстьРеквизитКПП = Истина;
			КонецЕсли;
			
			ТекстПодзапроса = "";
			
			Если ПоискПоУникальномуИдентификатору Тогда
				
				ТекстПодзапроса = "ВЫБРАТЬ
				                  |	Таблица.Ссылка КАК Ссылка,
				                  |	Таблица.Наименование КАК Наименование,
				                  |	Таблица.ИНН КАК ИНН,
				                  |	Таблица.КПП КАК КПП,
				                  |	0 КАК ЭтоОрганизация,
				                  |	2 КАК Приоритет
				                  |ИЗ
				                  |	&ИмяТаблицы КАК Таблица
				                  |ГДЕ
				                  |	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Таблица.Ссылка) = &УникальныйИдентификатор";
				
			КонецЕсли;
			
			Если ПоискПоИННиКПП Тогда
				
				ТекстПодзапроса = ?(ПустаяСтрока(ТекстПодзапроса), "", ТекстПодзапроса + ОбщегоНазначения.ТекстОбъединитьВсе());
				ТекстПодзапроса = ТекстПодзапроса + "ВЫБРАТЬ
					                  |	Таблица.Ссылка КАК Ссылка,
					                  |	Таблица.Наименование КАК Наименование,
					                  |	Таблица.ИНН КАК ИНН,
				                 	  |	Таблица.КПП КАК КПП,
					                  |	0 КАК ЭтоОрганизация,
					                  |	1 КАК Приоритет
					                  |ИЗ
					                  |	&ИмяТаблицы КАК Таблица
					                  |ГДЕ
					                  |	Таблица.ИНН = &ИНН
					                  |	И Таблица.КПП = &КПП";
			КонецЕсли;
			
			Если Не ЕстьРеквизитКПП Тогда
				ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "Таблица.КПП КАК КПП,", "");
			КонецЕсли;
			ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ИмяТаблицы", ТипСтрока);
			СервисДоставкиПереопределяемый.ОбработатьЗапросПолученияУчастникаГрузоперевозкиПоИННиКПП(ТекстПодзапроса, ТекущийТип);
			МассивТекстовЗапроса.Добавить(ТекстПодзапроса);
			
		КонецЦикла;
		
		ТекстЗапроса = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначения.ТекстОбъединитьВсе());
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + Прав(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 7) + Символы.ПС
				+ Символы.ПС + "УПОРЯДОЧИТЬ ПО
							|	Приоритет УБЫВ";
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("ИНН", ИНН);
			Запрос.УстановитьПараметр("КПП", КПП);
			Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
			
			УстановитьПривилегированныйРежим(Истина);
			Результат = Запрос.Выполнить();
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Не Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Если Выборка.Следующий() Тогда
					УчастникГрузоперевозки = НовыйПараметрыКонтрагента();
					ЗаполнитьЗначенияСвойств(УчастникГрузоперевозки, Выборка);
					УчастникГрузоперевозки.ИНН = ?(ПустаяСтрока(УчастникГрузоперевозки.ИНН) И ТипЗнч(ИНН) = Тип("Строка"),
						ИНН, УчастникГрузоперевозки.ИНН);
					УчастникГрузоперевозки.КПП = ?(ПустаяСтрока(УчастникГрузоперевозки.КПП) И ТипЗнч(КПП) = Тип("Строка"),
						КПП, УчастникГрузоперевозки.КПП);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат УчастникГрузоперевозки;
	
КонецФункции

Функция КонтактноеЛицоПоGUID(ИдентификаторКонтактногоЛица)
		
	КонтактноеЛицо = Неопределено;
	
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторКонтактногоЛица) Тогда
		ИдентификаторКонтактногоЛица = Новый УникальныйИдентификатор(ИдентификаторКонтактногоЛица);
		
		Если ЗначениеЗаполнено(ИдентификаторКонтактногоЛица) Тогда
			
			ОжидаемыеТипы = Метаданные.ОпределяемыеТипы.КонтактноеЛицоУчастникаГрузоперевозкиСервисДоставки.Тип.Типы();
			
			Для Каждого ОжидаемыйТип Из ОжидаемыеТипы Цикл
				
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ОжидаемыйТип);
				Если ОбъектМетаданных <> Неопределено
					И ОбщегоНазначения.ЭтоСсылка(ОжидаемыйТип) 
					И ПравоДоступа("Чтение", ОбъектМетаданных) Тогда
				
					НаименованиеТипа = ОбщегоНазначения.СтроковоеПредставлениеТипа(ОжидаемыйТип);
					НаименованиеТипа = СтрЗаменить(НаименованиеТипа, "Ссылка", "");
					МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(НаименованиеТипа);
					ВозможноеКонтактноеЛицо = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторКонтактногоЛица));
					
					УстановитьПривилегированныйРежим(Истина);
					Если ВозможноеКонтактноеЛицо.ПолучитьОбъект() <> Неопределено Тогда
						КонтактноеЛицо = ВозможноеКонтактноеЛицо;
						УстановитьПривилегированныйРежим(Ложь);
						Прервать;
					КонецЕсли;
					УстановитьПривилегированныйРежим(Ложь);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат КонтактноеЛицо;
	
КонецФункции

Функция СкладДокумента(Основание)
	
	Если Основание.Метаданные().Реквизиты.Найти("Склад") <> Неопределено Тогда
		Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Склад");
	ИначеЕсли Основание.Метаданные().Реквизиты.Найти("СкладОтправитель") <> Неопределено Тогда
		Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СкладОтправитель");
	Иначе
		Склад = Неопределено;
	КонецЕсли;
	
	Возврат Склад;
	
КонецФункции

#КонецОбласти

#Область ПроверкаДанных

Функция ИННиКППЗаполнены(Знач ИНН, Знач КПП)
	
	ИНН = СокрЛП(ИНН);
	КПП = СокрЛП(КПП);
	
	Результат = (ЗначениеЗаполнено(ИНН) И СтрДлина(ИНН) = 10 И ЗначениеЗаполнено(КПП))
		Или (ЗначениеЗаполнено(ИНН) И СтрДлина(ИНН) = 12);
	
	Возврат Результат
	
КонецФункции

#КонецОбласти

#Область ШаблоныДоставки

Функция ОпределитьСценарийПеревозкиПоПараметрам(ПараметрыЗаказа)
	
	СценарийПеревозки = Перечисления.СценарииПеревозкиСервисДоставки.ПустаяСсылка();
	
	РегиональнаяДоставка = РегиональнаяДоставка(ПараметрыЗаказа);
	
	Если РегиональнаяДоставка Тогда
		
		СценарийПеревозки = Перечисления.СценарииПеревозкиСервисДоставки.Региональный;
		
	Иначе
		Если ПараметрыЗаказа.Груз.Вес = 0 Тогда
			Возврат СценарийПеревозки;
		Иначе
			Если ПараметрыЗаказа.Груз.Вес <= 5 Тогда
				СценарийПеревозки = Перечисления.СценарииПеревозкиСервисДоставки.До5кг;
			ИначеЕсли ПараметрыЗаказа.Груз.Вес <= 10 Тогда
				СценарийПеревозки = Перечисления.СценарииПеревозкиСервисДоставки.До10кг;
			Иначе
				СценарийПеревозки = Перечисления.СценарииПеревозкиСервисДоставки.Свыше10кг;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СценарийПеревозки;
КонецФункции

Функция РегиональнаяДоставка(ПараметрыЗаказа)
	
	РегиональнаяДоставка = Ложь;
	
	КодыОтправителя = АдресныйКлассификатор.КодыАдреса(ПараметрыЗаказа.Отправитель.Адрес.Значение);
	
	Если НЕ ЗначениеЗаполнено(КодыОтправителя.КодКЛАДР) Тогда
		Возврат РегиональнаяДоставка;
	КонецЕсли;
	
	РегионОтправителя = Лев(КодыОтправителя.КодКЛАДР, 2);

	КодыПолучателя = АдресныйКлассификатор.КодыАдреса(ПараметрыЗаказа.Получатель.Адрес.Значение);
	
	Если НЕ ЗначениеЗаполнено(КодыПолучателя.КодКЛАДР) Тогда
		Возврат РегиональнаяДоставка;
	КонецЕсли;
	
	РегионПолучателя = Лев(КодыПолучателя.КодКЛАДР, 2);
	
	Возврат Не РегионОтправителя = РегионПолучателя;
КонецФункции

#КонецОбласти

#Область ЗагрузкаНаложенныхПлатежей

// Проверяет, есть ли у переданной организации договор подключения к платежной системе с оператором доставки.
// Параметры:
//	Организация - см. СервисДоставкиПереопределяемый.ВозможнаДоставкаНаложеннымПлатежом.Организация
//	Перевозчик - см. СервисДоставкиПереопределяемый.ВозможнаДоставкаНаложеннымПлатежом.Перевозчик 
// Возвращаемое значение:
//	Булево
Функция ВозможнаДоставкаНаложеннымПлатежом(Знач Организация, Знач Перевозчик = Неопределено)

	Результат = Истина;
	СервисДоставкиПереопределяемый.ВозможнаДоставкаНаложеннымПлатежом(Организация, Неопределено, Результат);
	Возврат Результат
	
КонецФункции

Процедура ОбработатьДанныеПоНаложеннымПлатежам(ОрганизацияБизнесСети)
	
	Если Не ВозможнаДоставкаНаложеннымПлатежом(ОрганизацияБизнесСети) Тогда
		Возврат;
	КонецЕсли;
	
	КешВозможностиДоставкиНаложеннымПлатежом = Новый Соответствие;
	НевозможенНаложенныйПлатежКоличество = 0;
	ПримерНеобработанногоОснования = Неопределено;
	
	// Для защиты от зацикливания из-за возможных ошибок в переопределяемом модуле
	ЛимитВремениВыполнения = ЛимитВремениВыполненияПоУмолчанию();
	СервисДоставкиПереопределяемый.ЛимитВремениОбработкиПачкиПлатежей(ЛимитВремениВыполнения);
	
	ПериодЗавершения = ТекущаяУниверсальнаяДата() + ЛимитВремениВыполнения;
	
	Пока ТекущаяУниверсальнаяДата() < ПериодЗавершения Цикл
	
		ТаблицаЗагрузки = Новый ТаблицаЗначений;
		ПолучитьЗагруженныеНаложенныеПлатежи(ТаблицаЗагрузки, ОрганизацияБизнесСети);
		
		Если ТаблицаЗагрузки.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПодтвержденныеОснования = Новый Массив;
		Для каждого Элем Из ТаблицаЗагрузки Цикл
			АтрибутыПлатежа = НовыйДанныеНаложенногоПлатежа();
			ЗаполнитьЗначенияСвойств(АтрибутыПлатежа, Элем);
			ТекстОшибки = "";
			ПлатежОбработанУспешно = Ложь;
			
			// Проверим возможность обработки наложенного платежа
			Если КешВозможностиДоставкиНаложеннымПлатежом.Получить(Элем.Перевозчик) = Неопределено Тогда
				КешВозможностиДоставкиНаложеннымПлатежом.Вставить(
					Элем.Перевозчик,
					ВозможнаДоставкаНаложеннымПлатежом(ОрганизацияБизнесСети, Элем.Перевозчик));
			КонецЕсли;
			
			Если КешВозможностиДоставкиНаложеннымПлатежом.Получить(Элем.Перевозчик) = Ложь Тогда
				НевозможенНаложенныйПлатежКоличество = НевозможенНаложенныйПлатежКоличество + 1;
				Если Не ЗначениеЗаполнено(ПримерНеобработанногоОснования)
					И ЗначениеЗаполнено(АтрибутыПлатежа.ДокументОснование) Тогда
					ПримерНеобработанногоОснования = АтрибутыПлатежа.ДокументОснование;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			СервисДоставкиПереопределяемый.ОбработатьДанныеНаложенногоПлатежа(АтрибутыПлатежа, ПлатежОбработанУспешно, ТекстОшибки);
			Если ПлатежОбработанУспешно = Истина Тогда
				ПодтвержденныеОснования.Добавить(Элем.ИдентификаторДокумента);
			Иначе
				ЗаписьЖурналаРегистрации(НСтр("ru='Сервис доставки.Обработка наложенных платежей.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,
					Элем.ИдентификаторДокумента,
					ТекстОшибки);
				
			КонецЕсли;
		КонецЦикла;
		
		Если НевозможенНаложенныйПлатежКоличество > 0 Тогда
			ШаблонОшибки = НСтр(
				"ru = 'Не удалось обработать %1 платежей, по ним отсутствует возможность наложенного платежа
				|Пример такого документа: %2'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				НевозможенНаложенныйПлатежКоличество,
				ПримерНеобработанногоОснования);
			ЗаписьЖурналаРегистрации(НСтр("ru='Сервис доставки.Обработка наложенных платежей.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
				
		КонецЕсли;
		
		Если ПодтвержденныеОснования.Количество() = 0 Тогда
			Для каждого Элем Из ТаблицаЗагрузки Цикл
				
				// отметить ошибку обработки
				ЗаписьДанныхНаложенныхПлатежей = РегистрыСведений.ДанныеНаложенныхПлатежейСервисДоставки.СоздатьМенеджерЗаписи();
				ЗаписьДанныхНаложенныхПлатежей.ОрганизацияБизнесСети = ОрганизацияБизнесСети;
				ЗаписьДанныхНаложенныхПлатежей.ИдентификаторДокумента = Элем.ИдентификаторДокумента;
				ЗаписьДанныхНаложенныхПлатежей.Прочитать();
				
				Если Не ЗаписьДанныхНаложенныхПлатежей.Выбран() Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаписьДанныхНаложенныхПлатежей.Состояние = Перечисления.СостоянияОбработкиПроцедурСинхронизацииСервисДоставки.Ошибка;
				ЗаписьДанныхНаложенныхПлатежей.Записать();
				
			КонецЦикла;
			Прервать;
		КонецЕсли;
		
		ПодтвердитьЗагрузкуНаложенныхПлатежей(ОрганизацияБизнесСети, ПодтвержденныеОснования);
	
	КонецЦикла;

КонецПроцедуры

// Получение лимита времени на выполнение запроса к сервису интеграции
//	Соответствует настройкам web-сервиса отвечающим за длительность соединения.
// 
// Возвращаемое значение:
//  Число - Лимит времени выполнения http-запроса, сек
Функция ЛимитВремениВыполненияПоУмолчанию()
	
	Возврат 300;
	
КонецФункции

// Возвращает данные для фиксации их в хост-системе.
// Параметры:
//	ЗагруженныеДанные - ТаблицаЗначений:
//	*ДатаРегистрацииПлатежа - Дата
//	*СуммаПлатежа - Число
//	*ДокументОснование - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки
//	*Отправитель - ОпределяемыйТип.УчастникГрузоперевозкиСервисДоставки
//	*Перевозчик - ОпределяемыйТип.УчастникГрузоперевозкиСервисДоставки
//	*ИдентификаторДокумента - УникальныйИдентификатор - идентификатор заказа на доставку
//	Организация - ОпределяемыйТип.Организация - организация, по которой нужно получить данные наложенных платежей.
//	НачальнаяДата - Дата, Неопределено - начальная дата получаемых документов (дата регистрации документа)
//	РазмерПачки - Число - размер получаемой пачки документов
Процедура ПолучитьЗагруженныеНаложенныеПлатежи(
	ЗагруженныеДанные, Знач Организация, Знач НачальнаяДата = Неопределено, Знач РазмерПачки = 100)
	
	МаксимальныйРазмерПачки = 100;
	
	ТипДата = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
	НачальнаяДата = ТипДата.ПривестиЗначение(ТипДата);
	
	ТипЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный);
	РазмерПачки = ТипЧисло.ПривестиЗначение(РазмерПачки);
	РазмерПачки = Мин(РазмерПачки, МаксимальныйРазмерПачки);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 123456789
	|	НаложенныеПлатежиКОбработке.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	НаложенныеПлатежиКОбработке.ДатаРегистрацииПлатежа КАК ДатаРегистрацииПлатежа,
	|	НаложенныеПлатежиКОбработке.ДокументОснование КАК ДокументОснование,
	|	НаложенныеПлатежиКОбработке.Отправитель КАК Отправитель,
	|	НаложенныеПлатежиКОбработке.Перевозчик КАК Перевозчик,
	|	НаложенныеПлатежиКОбработке.СуммаПлатежа КАК СуммаПлатежа
	|ИЗ
	|	РегистрСведений.ДанныеНаложенныхПлатежейСервисДоставки КАК НаложенныеПлатежиКОбработке
	|ГДЕ
	|	НаложенныеПлатежиКОбработке.ОрганизацияБизнесСети = &Организация
	|	И НаложенныеПлатежиКОбработке.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбработкиПроцедурСинхронизацииСервисДоставки.Обработать)
	|	И НаложенныеПлатежиКОбработке.ДатаРегистрацииПлатежа >= &НачальнаяДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРегистрацииПлатежа,
	|	ДокументОснование";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "123456789", Формат(РазмерПачки, "ЧДЦ=0; ЧН=1; ЧГ="));
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("НачальнаяДата", НачальнаяДата);
	Запрос.Текст = ТекстЗапроса;
	
	ЗагруженныеДанные = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Переданные документы будут помечены к удалению, поскольку обработаны.
// Важно(!!!): используется текущее ограничение "При наложенном платеже, одно основание - одна отправка".
// Параметры:
//	Организация - ОпределяемыйТип.Организация - организация, по которой нужно получить данные наложенных платежей.
//	ОбработанныеДанные - Массив из ОпределяемыйТип.ОснованиеЗаказаСервисДоставки
Процедура ПодтвердитьЗагрузкуНаложенныхПлатежей(Знач Организация, Знач ОбработанныеДанные)
	
	ТаблицаСверки = Новый ТаблицаЗначений;
	
	ТаблицаСверки.Колонки.Добавить("ИдентификаторДокумента", Новый ОписаниеТипов("УникальныйИдентификатор")); 
		
	ОбработанныеДанные = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбработанныеДанные);
	Для каждого Элем Из ОбработанныеДанные Цикл
		НовСтрока = ТаблицаСверки.Добавить();
		НовСтрока.ИдентификаторДокумента = Элем;
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ОрганизацияБизнесСети", Организация);
	Запрос.Параметры.Вставить("СостоянияОчистки", Перечисления.СостоянияОбработкиПроцедурСинхронизацииСервисДоставки.Обработать);
	Запрос.Параметры.Вставить("ТаблицаСверки", ТаблицаСверки);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тз.ИдентификаторДокумента КАК ИдентификаторДокумента
	|ПОМЕСТИТЬ ДляОчистки
	|ИЗ
	|	&ТаблицаСверки КАК тз
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаложенныеПлатежиКУдалению.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	НаложенныеПлатежиКУдалению.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.ДанныеНаложенныхПлатежейСервисДоставки КАК НаложенныеПлатежиКУдалению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДляОчистки КАК ДляОчистки
	|		ПО НаложенныеПлатежиКУдалению.ИдентификаторДокумента = ДляОчистки.ИдентификаторДокумента
	|ГДЕ
	|	НаложенныеПлатежиКУдалению.ОрганизацияБизнесСети = &ОрганизацияБизнесСети
	|	И НаложенныеПлатежиКУдалению.Состояние В(&СостоянияОчистки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаложенныеПлатежиКУдалению.ОрганизацияБизнесСети,
	|	НаложенныеПлатежиКУдалению.ИдентификаторДокумента";
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеНаложенныхПлатежейСервисДоставки");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ОрганизацияБизнесСети", Организация);
		ЭлементБлокировки.ИсточникДанных = ТаблицаСверки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИдентификаторДокумента", "ИдентификаторДокумента");
		Блокировка.Заблокировать();
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Набор = РегистрыСведений.ДанныеНаложенныхПлатежейСервисДоставки.СоздатьНаборЗаписей();
			Набор.Отбор.ОрганизацияБизнесСети.Установить(Организация);
			Набор.Отбор.ИдентификаторДокумента.Установить(Выборка.ИдентификаторДокумента);
			
			Набор.Прочитать();
			
			Если Набор.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Запись = Набор[0];
			Запись.Состояние = Перечисления.СостоянияОбработкиПроцедурСинхронизацииСервисДоставки.Удалить;
			Набор.Записать();
			
		КонецЦикла; 

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru='Сервис доставки.Фиксация обработки данных.'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Записать данные по наложенным платежам к обработке.
// 
// Параметры:
//  ОрганизацияБизнесСети - ОпределяемыйТип.Организация - Организация, подключенная к 1С:Бизнес-сеть
//  СписокПлатежей - Массив из Структура - Список платежей
//
Процедура ЗаписатьДанныеПоНаложеннымПлатежамКОбработке(ОрганизацияБизнесСети, СписокПлатежей)
	
	Если СписокПлатежей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Производим безусловную запись в регистр сведений
	ЗаписиКОбработке = РегистрыСведений.ДанныеНаложенныхПлатежейСервисДоставки.СоздатьНаборЗаписей();
	ТаблицаКЗагрузке = ЗаписиКОбработке.ВыгрузитьКолонки();
	
	ДатаЗаписи = ТекущаяУниверсальнаяДата();
	
	Для Каждого Платеж Из СписокПлатежей Цикл
		НоваяСтрока = ТаблицаКЗагрузке.Добавить();
		НоваяСтрока.Состояние = Перечисления.СостоянияОбработкиПроцедурСинхронизацииСервисДоставки.Обработать;
		НоваяСтрока.ДатаПоследнегоИзменения = ДатаЗаписи;
		НоваяСтрока.ОрганизацияБизнесСети = ОрганизацияБизнесСети;
		НоваяСтрока.ИдентификаторДокумента = Новый УникальныйИдентификатор(Платеж.Идентификатор);
		НоваяСтрока.ДатаРегистрацииПлатежа = Платеж.ДатаРегистрацииНаложенногоПлатежа;
		НоваяСтрока.ДокументОснование = Платеж.ДокументОснование;
		НоваяСтрока.Отправитель = Платеж.ОтправительКонтрагентСсылка;
		НоваяСтрока.Перевозчик = Платеж.ГрузоперевозчикКонтрагентСсылка;
		НоваяСтрока.СуммаПлатежа = Платеж.СуммаНаложенногоПлатежа;
	КонецЦикла;

	ЗаписиКОбработке.Загрузить(ТаблицаКЗагрузке);
	
	ОтборДляУдаления = РегистрыСведений.ДанныеНаложенныхПлатежейСервисДоставки.НовыйОтборЗаписей();
	ОтборДляУдаления.ОрганизацияБизнесСети = ОрганизацияБизнесСети;
	ОтборДляУдаления.СписокИдентификаторов = ТаблицаКЗагрузке.ВыгрузитьКолонку("ИдентификаторДокумента");
	
	РегистрыСведений.ДанныеНаложенныхПлатежейСервисДоставки.УдалитьЗаписиПоОтбору(ОтборДляУдаления);
	
	ЗаписиКОбработке.Записать(Ложь);

КонецПроцедуры

// Необходимо выполнить шаг загрузки наложенных платежей.
// 
// Параметры:
//  ТипГрузоперевозки - Число - тип грузоперевозки. 1 - Деловые линии; 2 - Яндекс.Доставка и т.д.
//  ОрганизацияБизнесСети - СправочникСсылка.Организации - организация.
//  ТекущийШаг - ПеречислениеСсылка.ШагиСинхронизацииСервисДоставки - Текущий шаг
//  СостояниеЗагрузки - Неопределено, Структура - Состояние загрузки::
// * Результат - Булево -
// * ШагЗагрузки - Неопределено, ПеречислениеСсылка.ШагиСинхронизацииСервисДоставки -
// * ДатаПоследнегоИзменения - Дата -
// * Состояние - Неопределено, ПеречислениеСсылка.СостоянияСинхронизацииСервисДоставки -
// * ДатаРегистрацииПлатежа - Дата -
// * ИдентификаторДокумента - Строка - идентификатор заказа на доставку, назначенный в сервисе интеграции.
// 
// Возвращаемое значение:
//  Булево - Истина, выполнить шаг загрузки необходимо. Ложь, нет необходимости
Функция НеобходимоВыполнитьШагЗагрузкиНаложенныхПлатежей(ТипГрузоперевозки, ОрганизацияБизнесСети, ТекущийШаг, СостояниеЗагрузки = Неопределено)
	
	СостояниеЗагрузки = РегистрыСведений.СостоянияСинхронизацииСервисДоставки.ПолучитьТекущееСостояниеСинхронизации(
		ТипГрузоперевозки, ОрганизацияБизнесСети, ТекущийШаг, Перечисления.ТипыСинхронизацииСервисДоставки.ЗагрузкаДанныхПоНаложеннымПлатежам);

	Результат = Ложь;
	
	Если СостояниеЗагрузки.Результат = Ложь Тогда
		Результат = Истина;
	Иначе
		Если Не СостояниеЗагрузки.Состояние = Перечисления.СостоянияСинхронизацииСервисДоставки.Выполняется Тогда
			Результат = Истина;
		Иначе
			ЛимитВремениВыполнения = ЛимитВремениВыполненияПоУмолчанию();
			СервисДоставкиПереопределяемый.ЛимитВремениОбработкиПачкиПлатежей(ЛимитВремениВыполнения);
			Если (СостояниеЗагрузки.ДатаПоследнегоИзменения + ЛимитВремениВыполнения) <= ТекущаяУниверсальнаяДата() Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СинхронизацияПоЧастичнойДоставке

// Получение измененных данных из сервиса интеграции и отражение частичной доставки в регистре 
//  "Данные частичной доставки сервис доставки".
// Актуальное состояние процесса синхронизации фиксируется в регистре "Состояния синхронизации сервис доставки".
// 
// Параметры:
//   ШагиСинхронизацииКВыполнению - Массив из ПеречислениеСсылка.ШагиСинхронизацииСервисДоставки - шаги, обязательные
//    к исполнению.
Процедура СинхронизацияПоЧастичнойДоставке(ШагиСинхронизацииКВыполнению = Неопределено)
	
	ИспользоватьСинхронизациюПоЧастичнойДоставке = Ложь;
	СервисДоставкиПереопределяемый.ИспользоватьРегламентСинхронизацииПоЧастичнойДоставке(ИспользоватьСинхронизациюПоЧастичнойДоставке);
	Если ИспользоватьСинхронизациюПоЧастичнойДоставке Тогда
		ПараметрыЗапросаСинхронизации = НовыйПараметрыЗапросаПолучитьЗаказыНаДоставку();
		
		// Получение данных для обработки порциями. Список данных отсортирован по дате обновления по возрастанию
		ПараметрыЗапросаСинхронизации.Вставить("Страница", 1);
		ПараметрыЗапросаСинхронизации.Вставить("РазмерСтраницы", 100);
		ПараметрыЗапросаСинхронизации.Вставить("Сортировка", "ДатаОбновления ВОЗР");
		
		ПараметрыЗапросаСинхронизации.Вставить("ФильтрПоМультизаказам","allOrdersWithoutMultiOrders");
		ПараметрыЗапросаСинхронизации.Вставить("ВыгружатьДанныеПоЧастичнойДоставке", Истина);
		
		Если ШагиСинхронизацииКВыполнению <> Неопределено Тогда
			ПараметрыЗапросаСинхронизации.Вставить("ШагиСинхронизацииКВыполнению", ШагиСинхронизацииКВыполнению);
		КонецЕсли;
		
		СостоянияЧастичнойДоставки = Новый Массив;
		СостоянияЧастичнойДоставки.Добавить(Новый Структура("Идентификатор",23));	// Доставлен частично
		ПараметрыЗапросаСинхронизации.Вставить("Состояние", СостоянияЧастичнойДоставки);
		
		ВыполнитьСинхронизациюЧастичнойДоставки(ПараметрыЗапросаСинхронизации, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Выполнить загрузку из сервиса интеграции данных, относящихся к частичной доставке.
// Загрузка выполняется порциями в несколько итераций.
// Затем следует обработка всех полученных данных.
// 
// Параметры:
//   ПараметрыПроцедуры - Структура - см. описание НовыйПараметрыЗапросаПолучитьЗаказыНаДоставку()
//
//   АдресРезультата - УникальныйИдентификатор - адрес результат в хранилище, не заполнять.
//
Процедура ВыполнитьСинхронизациюЧастичнойДоставки(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт

	ТипыГрузоперевозки = Новый Массив;
	ОрганизацииБизнесСети = Новый Массив;
	
	ВсеОрганизации = Ложь;
	ВсеТипыГрузоперевозки = Ложь;
	
	Если ПараметрыПроцедуры.Свойство("ШагиСинхронизацииКВыполнению") Тогда
		ШагиСинхронизацииКВыполнению = ПараметрыПроцедуры.ШагиСинхронизацииКВыполнению;
	Иначе
		ШагиСинхронизацииКВыполнению = Новый Массив;
		Для Каждого ШагКВыполнению Из Перечисления.ШагиСинхронизацииСервисДоставки Цикл
			ШагиСинхронизацииКВыполнению.Добавить(ШагКВыполнению);
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПроцедуры) = Тип("Структура") Тогда
		
		ОрганизацияБизнесСети = ПолучитьЗначение(ПараметрыПроцедуры, "ОрганизацияБизнесСетиСсылка", , Неопределено);
		
		Если ОрганизацияБизнесСети <> Неопределено Тогда
			ОрганизацииБизнесСети.Добавить(ОрганизацияБизнесСети);
		Иначе
			ВсеОрганизации = Истина;
		КонецЕсли;
		
		ТипГрузоперевозки = ПолучитьЗначение(ПараметрыПроцедуры, "ТипГрузоперевозки", , Перечисления.ТипыГрузоперевозки.ПустаяСсылка());

		Если ТипГрузоперевозки = Перечисления.ТипыГрузоперевозки.Курьерика И ПолучитьФункциональнуюОпцию("ИспользоватьЧастичнуюДоставкуСервис1СКурьерика") Тогда
			ТипыГрузоперевозки.Добавить(ТипГрузоперевозки);
		ИначеЕсли ТипГрузоперевозки = Перечисления.ТипыГрузоперевозки.ПустаяСсылка() Тогда
			ВсеТипыГрузоперевозки = Истина;
		Иначе
			Возврат;
		КонецЕсли;
		
	Иначе
		ВсеОрганизации = Истина;
		ВсеТипыГрузоперевозки = Истина;
	КонецЕсли;
	
	Если ВсеОрганизации Тогда
		ТаблицаОрганизацииБизнесСети = СервисДоставкиСлужебный.ОрганизацииБизнесСети();
		Для Каждого Строка Из ТаблицаОрганизацииБизнесСети Цикл
			ОрганизацииБизнесСети.Добавить(Строка.Организация);
		КонецЦикла;
	КонецЕсли;
	
	Если ВсеТипыГрузоперевозки Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЧастичнуюДоставкуСервис1СКурьерика") Тогда
			ТипыГрузоперевозки.Добавить(Перечисления.ТипыГрузоперевозки.Курьерика);
		КонецЕсли;
	КонецЕсли;
	
	// Загрузка данных из сервиса интеграции и размещение их в регистре "Данные частичной доставки"
	Для Каждого ТипГрузоперевозки Из ТипыГрузоперевозки Цикл
		
		ОрганизацииБизнесСетиПоТипуГрузоперевозки = ОрганизацииБизнесСети;
		НомерПорции = 1;
		
		// Начало итерации получения данных порциями
		// Для каждой организации, по очереди получаем порцию данных. 
		// Обработав первую порцию, переходим ко второй и т.д.
		Пока ОрганизацииБизнесСетиПоТипуГрузоперевозки.Количество() > 0 Цикл
			
			ОрганизацииБизнесСетиДляПовторнойОбработки = Новый Массив;
			
			Для Каждого ОрганизацияБизнесСети Из ОрганизацииБизнесСетиПоТипуГрузоперевозки Цикл
				
				// Шаг "ЗагрузкаИзСервисаИнтеграции" отвечает за подключение к сервису интеграции, получение новых данных
				// о частично доставленных заказах на доставку и размещение этих данных в регистре "ДанныеЧастичнойДоставкиСервисДоставки"
				ТекущийШаг = Перечисления.ШагиСинхронизацииСервисДоставки.ЗагрузкаИзСервисаИнтеграции;
				ТекущееСостояниеЗагрузки = РегистрыСведений.СостоянияСинхронизацииСервисДоставки.СтруктураСостояния();
				СостояниеЗагрузки = РегистрыСведений.СостоянияСинхронизацииСервисДоставки.СтруктураСостояния();
				
				Если ШагиСинхронизацииКВыполнению.Найти(ТекущийШаг) <> Неопределено И НеобходимоВыполнитьШагСинхронизацииПоЧастичнойДоставке(ТипГрузоперевозки, ОрганизацияБизнесСети, ТекущийШаг, СостояниеЗагрузки) Тогда
					
					// Шаг синхронизации "ЗагрузкаИзСервисаИнтеграции" переводится в состояние "Выполняется"
					ЗаполнитьЗначенияСвойств(ТекущееСостояниеЗагрузки, СостояниеЗагрузки);
					
					ТекущееСостояниеЗагрузки.ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисДоставки.СинхронизацияПоЧастичнойДоставке;
					ТекущееСостояниеЗагрузки.ТипГрузоперевозки = ТипГрузоперевозки;
					ТекущееСостояниеЗагрузки.ОрганизацияБизнесСети = ОрганизацияБизнесСети;
					ТекущееСостояниеЗагрузки.ШагЗагрузки = ТекущийШаг;
					ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияСинхронизацииСервисДоставки.Выполняется;
					
					ОтказИзмененияСостояния = Ложь;
					РегистрыСведений.СостоянияСинхронизацииСервисДоставки.УстановитьСостояние(ТекущееСостояниеЗагрузки, ОтказИзмененияСостояния);
					
					Если Не ОтказИзмененияСостояния Тогда
						
						ПараметрыЗапроса = ПараметрыЗапросаСинхронизацияПоЧастичнойДоставке();
						ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыПроцедуры);
						ПараметрыЗапроса.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
						ПараметрыЗапроса.Вставить("ОрганизацияБизнесСети", ОрганизацияБизнесСети);
						ПараметрыЗапроса.Вставить("ДатаОбновленияС", СостояниеЗагрузки.ДатаРегистрации);
						ПараметрыЗапроса.Вставить("Страница", НомерПорции);
						
						РезультатЗапроса = СинхронизироватьЧастичнуюДоставку(ПараметрыЗапроса);
						
						Если ЗначениеЗаполнено(РезультатЗапроса) Тогда
							
							ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияСинхронизацииСервисДоставки.Выполнена;
							
							Если РезультатЗапроса.ЗаказыСЧастичнойДоставкой.Количество() > 0 Тогда
								
								// Переводим загруженные в регистр "ДанныеЧастичнойДоставкиСервисДоставки" данные в состояние "Обработать". Обработка будет происходить на следующем этапе
								РезультатЗаписи = ЗаписатьДанныеПоЧастичнойДоставкеКОбработке(ОрганизацияБизнесСети, ТипГрузоперевозки, РезультатЗапроса.ЗаказыСЧастичнойДоставкой);	//@skip-warning
								Если Не РезультатЗапроса.ЭтоПоследняяСтраница Тогда
									ОрганизацииБизнесСетиДляПовторнойОбработки.Добавить(ОрганизацияБизнесСети);
								КонецЕсли;
								ТекущееСостояниеЗагрузки.ДатаРегистрации = РезультатЗапроса.ПараметрыЗапроса.ДатаРегистрации;
								ТекущееСостояниеЗагрузки.ИдентификаторДокумента = РезультатЗапроса.ПараметрыЗапроса.ИдентификаторДокумента;
								
								Если РезультатЗаписи.Ошибки.Количество() > 0 Тогда
									ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияСинхронизацииСервисДоставки.Ошибка;
								КонецЕсли;
								
							КонецЕсли;
							
						Иначе
							
							ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияСинхронизацииСервисДоставки.Ошибка;
							
						КонецЕсли;
						
						// Шаг синхронизации "ЗагрузкаИзСервисаИнтеграции" переводится в состояние "Выполнена" или "Ошибка"
						РегистрыСведений.СостоянияСинхронизацииСервисДоставки.УстановитьСостояние(ТекущееСостояниеЗагрузки);
					
					КонецЕсли;
		
				КонецЕсли;
			КонецЦикла;
			
			ОрганизацииБизнесСетиПоТипуГрузоперевозки = ОрганизацииБизнесСетиДляПовторнойОбработки;	// Организации, у которых остались данные для получения в следующей итерации
			НомерПорции = НомерПорции + 1;	// Номер порции данных для следующей итерации
			
		КонецЦикла;
	КонецЦикла;
	
	// Обрабатываем ранее загруженные данные
	Для Каждого ТипГрузоперевозки Из ТипыГрузоперевозки Цикл

		Для Каждого ОрганизацияБизнесСети Из ОрганизацииБизнесСети Цикл
			
			// Шаг "ОбработкаЗагруженныхДанных" отвечает за проверку того, что данные в документах-основаниях заказов на доставку
			// скорректированы пользователем по факту доставки. Т.е. полностью возвращенный товар "отменен" в документе заказ клиента,
			// а для частично возвращенного - в документе РТУ количество товара соответствует фактически доставленному.
			// В зависимости от результата проверки состояние в регистре "ДанныеЧастичнойДоставкиСервисДоставки" меняется на "Скорректировать"
			// или "Выгрузить".
			// "Скорректировать" - требуется ручная или автоматическая корректировка документов-оснований
			// "Выгрузить" - требуется передача состояния заказа на доставку в сервис интеграции
			ТекущийШаг = Перечисления.ШагиСинхронизацииСервисДоставки.ОбработкаЗагруженныхДанных;
			ТекущееСостояниеЗагрузки = РегистрыСведений.СостоянияСинхронизацииСервисДоставки.СтруктураСостояния();

			Если ШагиСинхронизацииКВыполнению.Найти(ТекущийШаг) <> Неопределено И НеобходимоВыполнитьШагСинхронизацииПоЧастичнойДоставке(ТипГрузоперевозки, ОрганизацияБизнесСети, ТекущийШаг) Тогда

				ТекущееСостояниеЗагрузки.ШагЗагрузки = ТекущийШаг;
				ТекущееСостояниеЗагрузки.ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисДоставки.СинхронизацияПоЧастичнойДоставке;
				ТекущееСостояниеЗагрузки.ТипГрузоперевозки = ТипГрузоперевозки;
				ТекущееСостояниеЗагрузки.ОрганизацияБизнесСети = ОрганизацияБизнесСети;
				ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияСинхронизацииСервисДоставки.Выполняется;

				ОтказИзмененияСостояния = Ложь;
				РегистрыСведений.СостоянияСинхронизацииСервисДоставки.УстановитьСостояние(ТекущееСостояниеЗагрузки,
					ОтказИзмененияСостояния);

				Если Не ОтказИзмененияСостояния Тогда

					ОбработатьДанныеПоЧастичнойДоставке(ОрганизацияБизнесСети, ТипГрузоперевозки); //@skip-warning
					
					ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияСинхронизацииСервисДоставки.Выполнена;
					РегистрыСведений.СостоянияСинхронизацииСервисДоставки.УстановитьСостояние(ТекущееСостояниеЗагрузки);

				КонецЕсли;

			КонецЕсли;
				
			// Шаг "ВыгрузкаВСервисИнтеграции" отвечает за подключение к сервису интеграции и передачу в него состояния заказов на доставку
			// по которым сделаны корректировки документов-оснований
			ТекущийШаг = Перечисления.ШагиСинхронизацииСервисДоставки.ВыгрузкаВСервисИнтеграции;
			ТекущееСостояниеЗагрузки = РегистрыСведений.СостоянияСинхронизацииСервисДоставки.СтруктураСостояния();

			Если ШагиСинхронизацииКВыполнению.Найти(ТекущийШаг) <> Неопределено И НеобходимоВыполнитьШагСинхронизацииПоЧастичнойДоставке(ТипГрузоперевозки, ОрганизацияБизнесСети,
				ТекущийШаг) Тогда

				ТекущееСостояниеЗагрузки.ШагЗагрузки = ТекущийШаг;
				ТекущееСостояниеЗагрузки.ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисДоставки.СинхронизацияПоЧастичнойДоставке;
				ТекущееСостояниеЗагрузки.ТипГрузоперевозки = ТипГрузоперевозки;
				ТекущееСостояниеЗагрузки.ОрганизацияБизнесСети = ОрганизацияБизнесСети;
				ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияСинхронизацииСервисДоставки.Выполняется;

				ОтказИзмененияСостояния = Ложь;
				РегистрыСведений.СостоянияСинхронизацииСервисДоставки.УстановитьСостояние(ТекущееСостояниеЗагрузки,
					ОтказИзмененияСостояния);

				Если Не ОтказИзмененияСостояния Тогда

					ВыгрузитьВСервисИнтеграцииДанныеПоЧастичнойДоставке(ОрганизацияБизнесСети, ТипГрузоперевозки);	//@skip-warning

					ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияСинхронизацииСервисДоставки.Выполнена;
					РегистрыСведений.СостоянияСинхронизацииСервисДоставки.УстановитьСостояние(ТекущееСостояниеЗагрузки);

				КонецЕсли;

			КонецЕсли;
				
			// Шаг "ОчисткаЗагруженныхДанных" отвечает за удаление данных регистра "ДанныеЧастичнойДоставкиСервисДоставки",
			// по которым произошла корректировка документов-оснований и чье новое состояние выгружено в сервис интеграции
			ТекущийШаг = Перечисления.ШагиСинхронизацииСервисДоставки.ОчисткаЗагруженныхДанных;
			ТекущееСостояниеЗагрузки = РегистрыСведений.СостоянияСинхронизацииСервисДоставки.СтруктураСостояния();
			СостояниеЗагрузки = Неопределено;

			Если ШагиСинхронизацииКВыполнению.Найти(ТекущийШаг) <> Неопределено И НеобходимоВыполнитьШагСинхронизацииПоЧастичнойДоставке(ТипГрузоперевозки, ОрганизацияБизнесСети,
				ТекущийШаг, СостояниеЗагрузки) Тогда

				ТекущееСостояниеЗагрузки.ШагЗагрузки = ТекущийШаг;
				ТекущееСостояниеЗагрузки.ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисДоставки.СинхронизацияПоЧастичнойДоставке;
				ТекущееСостояниеЗагрузки.ТипГрузоперевозки = ТипГрузоперевозки;
				ТекущееСостояниеЗагрузки.ОрганизацияБизнесСети = ОрганизацияБизнесСети;
				ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияСинхронизацииСервисДоставки.Выполняется;

				ОтказИзмененияСостояния = Ложь;
				РегистрыСведений.СостоянияСинхронизацииСервисДоставки.УстановитьСостояние(ТекущееСостояниеЗагрузки);
				Если Не ОтказИзмененияСостояния Тогда

					ОтборДляУдаления = РегистрыСведений.ДанныеЧастичнойДоставкиСервисДоставки.НовыйОтборЗаписей();
					ОтборДляУдаления.УдалитьОбработанные = Истина;
					РегистрыСведений.ДанныеЧастичнойДоставкиСервисДоставки.УдалитьЗаписиПоОтбору(ОтборДляУдаления);

					ТекущееСостояниеЗагрузки.ШагЗагрузки = ТекущийШаг;
					ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияСинхронизацииСервисДоставки.Выполнена;
					РегистрыСведений.СостоянияСинхронизацииСервисДоставки.УстановитьСостояние(ТекущееСостояниеЗагрузки);

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;
	
	Если ЗначениеЗаполнено(АдресРезультата) Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("ОперацияВыполнена", Истина);
		
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверка заказов клиента и реализаций, связанных с заказами на доставку, на наличие расхождений с фактом доставки
// 
// Параметры:
//  ОрганизацияБизнесСети - ОпределяемыйТип.ОрганизацияСервисДоставки - организация, чьи заказы на доставку подлежат проверке
//  ТипГрузоперевозки - ПеречислениеСсылка.ТипыГрузоперевозки - тип грузоперевозки
//  ИдентификаторыЗаказовНаДоставку - Массив из УникальныйИдентификатор - идентификаторы заказов на доставку, подлежащие проверке
// 
// Возвращаемое значение:
//  Структура - результат обработки данных по частичной доставке:
// * Ошибки - Массив из строка - описание возникших ошибок
// 
Функция ОбработатьДанныеПоЧастичнойДоставке(Знач ОрганизацияБизнесСети, Знач ТипГрузоперевозки,
	Знач ИдентификаторыЗаказовНаДоставку = Неопределено) Экспорт
	
	// Проверяем ранее загруженные в регистр ДанныеЧастичнойДоставкиСервисДоставки данные - скорректировал ли пользователь информацию в документах-основаниях по ним или нет?
	// И, либо меняем состояние на "Выгрузить", либо на "Скорректировать"
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ОбщийМодуль.СервисДоставки.ЧастичнаяДоставка.Синхронизация");
	КоличествоОбработанныхДанных = 0;
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Новый Массив);
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ОрганизацияБизнесСети", ОрганизацияБизнесСети);
	ПараметрыОбработки.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыОбработки.Вставить("ИдентификаторыЗаказовНаДоставку", ИдентификаторыЗаказовНаДоставку);
	
	СервисДоставкиПереопределяемый.ОбработатьДанныеПоЧастичнойДоставке(ПараметрыОбработки, Результат, КоличествоОбработанныхДанных);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, КоличествоОбработанныхДанных / 10);
	
	Возврат Результат;
	
КонецФункции

// Изменяет состояние заказа на доставку в сервисе интеграции
// 
// Параметры:
//  ОрганизацияБизнесСети - ОпределяемыйТип.ОрганизацияСервисДоставки - организация, чьи заказы должны быть выгружены в сервис интеграции с целью изменения состояния
//  ТипГрузоперевозки - ПеречислениеСсылка.ТипыГрузоперевозки - тип грузоперевозки
//
Функция ВыгрузитьВСервисИнтеграцииДанныеПоЧастичнойДоставке(Знач ОрганизацияБизнесСети, Знач ТипГрузоперевозки)

	РезультатЗаписи = Новый Структура("Ошибки", Новый Массив());

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацияБизнесСети", ОрганизацияБизнесСети);
	Запрос.УстановитьПараметр("ТипГрузоперевозки", ТипГрузоперевозки);
	Запрос.УстановитьПараметр("СостояниеВыгрузить", Перечисления.СостоянияОбработкиПроцедурСинхронизацииСервисДоставки.Выгрузить);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеЗаказов.ИдентификаторДокумента КАК ИдентификаторДокумента
	|ПОМЕСТИТЬ врЗаказыКВыгрузке
	|ИЗ
	|	РегистрСведений.ДанныеЗаказовСервисДоставки КАК ДанныеЗаказов
	|ГДЕ
	|	ДанныеЗаказов.Организация = &ОрганизацияБизнесСети
	|	И ДанныеЗаказов.ТипГрузоперевозки = &ТипГрузоперевозки
	|	И ДанныеЗаказов.СостояниеОбработкиЧастичнойДоставки = &СостояниеВыгрузить
	|;
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	врЗаказыКВыгрузке.ИдентификаторДокумента КАК ИдентификаторДокумента
	|ИЗ
	|	врЗаказыКВыгрузке КАК врЗаказыКВыгрузке
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеЗаказовСервисДоставки КАК ЗаказыКОбработке
	|		ПО ЗаказыКОбработке.Организация = &ОрганизацияБизнесСети
	|		И ЗаказыКОбработке.ТипГрузоперевозки = &ТипГрузоперевозки
	|		И ЗаказыКОбработке.ИдентификаторДокумента = врЗаказыКВыгрузке.ИдентификаторДокумента
	|		И ЗаказыКОбработке.СостояниеОбработкиЧастичнойДоставки <> &СостояниеВыгрузить
	|ГДЕ
	|	ЗаказыКОбработке.ИдентификаторДокумента IS NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗаписи;
	КонецЕсли;
	
	// Получим из сервиса интеграции данные заказов на доставку, готовых к выгрузке в сервис интеграции, в целях изменения состояния
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьЗаказыНаДоставку();
	
	ПараметрыЗапроса.Страница = 1;
	ПараметрыЗапроса.РазмерСтраницы = 100;
	
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСети);
	ПараметрыЗапроса.ТипГрузоперевозки		= ТипГрузоперевозки;
	ПараметрыЗапроса.ФильтрПоМультизаказам	= СервисДоставки.ФильтрПоМультизаказамВсеЗаказы();
	
	ИдентификаторыЗаказов = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ИдентификаторыЗаказов.Добавить(Строка(Выборка.ИдентификаторДокумента));
	КонецЦикла;
	
	Если ИдентификаторыЗаказов.Количество() > 0 Тогда
		ПараметрыЗапроса.ИдентификаторыЗаказов = ИдентификаторыЗаказов;
	КонецЕсли;
	
	АдресВХ = ПоместитьВоВременноеХранилище(Неопределено);
		
	ПолучитьЗаказыНаДоставку(ПараметрыЗапроса, АдресВХ);
	
	ДанныеЗапроса = ПолучитьИзВременногоХранилища(АдресВХ);
	
	Если ДанныеЗапроса = Неопределено Тогда
		Возврат РезультатЗаписи;
	КонецЕсли;
	
	Если Не ДанныеЗапроса.Свойство("Список") Тогда
		Возврат РезультатЗаписи;
	КонецЕсли;
	
	//@skip-warning
	Для Каждого ОписаниеЗаказаНаДоставку Из ДанныеЗапроса.Список Цикл
		
		ИдентификаторДокумента = ОписаниеЗаказаНаДоставку.ИдентификаторДокумента;
		Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаСоздатьИзменитьЗаказНаДоставку();
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ОписаниеЗаказаНаДоставку,,"Получатель");
		ПараметрыЗапроса.ИдентификаторЗаказа = ИдентификаторДокумента;
		ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСети);
		ПараметрыЗапроса.ТипГрузоперевозки = ТипГрузоперевозки;
		ПараметрыЗапроса.Вставить("СостояниеИдентификатор", 10);	// Доставлен
		ПараметрыЗапроса.Вставить("ОтправитьГрузоперевозчику", Ложь);
		
		ПараметрыЗапроса.Вставить("ПолучательАдресПредставление", ОписаниеЗаказаНаДоставку.ПолучательАдресПредставление);
		ПараметрыЗапроса.Вставить("ПолучательАдресШирота", ОписаниеЗаказаНаДоставку.ПолучательАдресШирота);
		ПараметрыЗапроса.Вставить("ПолучательАдресДолгота", ОписаниеЗаказаНаДоставку.ПолучательАдресДолгота);
		ПараметрыЗапроса.Вставить("ПолучательАдресЗначение", ОписаниеЗаказаНаДоставку.ПолучательАдресЗначение);
		ПараметрыЗапроса.Вставить("ПолучательКонтактноеЛицоНаименование", ОписаниеЗаказаНаДоставку.ПолучательКонтактноеЛицоНаименование);
		ПараметрыЗапроса.Вставить("ПолучательКонтактноеЛицоТелефонПредставление", ОписаниеЗаказаНаДоставку.ПолучательКонтактноеЛицоТелефонПредставление);
		ПараметрыЗапроса.Вставить("ПолучательКонтактноеЛицоТелефонЗначение", ОписаниеЗаказаНаДоставку.ПолучательКонтактноеЛицоТелефонЗначение);
		ПараметрыЗапроса.Вставить("ПолучательКонтактноеЛицоEmail", ОписаниеЗаказаНаДоставку.ПолучательКонтактноеЛицоEmail);
		
		ПараметрыЗапроса.Вставить("ПолучательКонтрагентНаименование", ОписаниеЗаказаНаДоставку.ПолучательНаименование);
		ПараметрыЗапроса.Вставить("ПолучательКонтрагентИНН", ОписаниеЗаказаНаДоставку.ПолучательИНН);
		ПараметрыЗапроса.Вставить("ПолучательКонтрагентКПП", ОписаниеЗаказаНаДоставку.ПолучательКПП);
		
		АдресВХ = ПоместитьВоВременноеХранилище(Неопределено);
		СоздатьИзменитьЗаказНаДоставку(ПараметрыЗапроса, АдресВХ);
		
		РезультатОтправкиСостояния = ПолучитьИзВременногоХранилища(АдресВХ);
		Если РезультатОтправкиСостояния <> Неопределено Тогда

			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеЗаказовСервисДоставки");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("Организация", ОрганизацияБизнесСети);
				ЭлементБлокировки.УстановитьЗначение("ТипГрузоперевозки", ТипГрузоперевозки);
				ЭлементБлокировки.УстановитьЗначение("ИдентификаторДокумента", ИдентификаторДокумента);
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеЧастичнойДоставкиСервисДоставки");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("ИдентификаторДокумента", ИдентификаторДокумента);
				Блокировка.Заблокировать();

				ЗаписиДанныеЗаказов = РегистрыСведений.ДанныеЗаказовСервисДоставки.СоздатьНаборЗаписей();
				ЗаписиДанныеЗаказов.Отбор.Организация.Установить(ОрганизацияБизнесСети);
				ЗаписиДанныеЗаказов.Отбор.ТипГрузоперевозки.Установить(ТипГрузоперевозки);
				ЗаписиДанныеЗаказов.Отбор.ИдентификаторДокумента.Установить(ИдентификаторДокумента);

				ЗаписиДанныеЗаказов.Прочитать();

				Для Каждого ЗаписьДанныеЗаказов Из ЗаписиДанныеЗаказов Цикл
					ЗаписьДанныеЗаказов.СостояниеОбработкиЧастичнойДоставки	= Перечисления.СостоянияОбработкиПроцедурСинхронизацииСервисДоставки.Обработано;
				КонецЦикла;

				ЗаписиДанныеЗаказов.Записать(Истина);

				ЗаписиДанныхЧД = РегистрыСведений.ДанныеЧастичнойДоставкиСервисДоставки.СоздатьНаборЗаписей();
				ЗаписиДанныхЧД.Отбор.ИдентификаторДокумента.Установить(ИдентификаторДокумента);

				ЗаписиДанныхЧД.Записать(Истина);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
		
				РезультатЗаписи.Ошибки.Добавить(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
				Возврат РезультатЗаписи;
			КонецПопытки;
		
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатЗаписи;
	
КонецФункции

// Записать данные по частичной доставке, предназначенные для дальнейшей обработки (вручную или автоматически).
// 
// Параметры:
//  ОрганизацияБизнесСети - ОпределяемыйТип.Организация - Организация, подключенная к 1С:Бизнес-сеть
//  ТипГрузоперевозки - ПеречислениеСсылка.ТипыГрузоперевозки - тип грузоперевозки
//  ЗаказыСЧастичнойДоставкой - Массив из Структура - Список заказов на доставку
//  
// Возвращаемое значение:
//  Структура - результат записи данных:
// * Ошибки - Массив из строка - описание возникших ошибок
//
Функция ЗаписатьДанныеПоЧастичнойДоставкеКОбработке(Знач ОрганизацияБизнесСети, Знач ТипГрузоперевозки, Знач ЗаказыСЧастичнойДоставкой)
	
	РезультатЗаписи = Новый Структура("Ошибки", Новый Массив());
	
	Если ЗаказыСЧастичнойДоставкой.Количество() = 0 Тогда
		Возврат РезультатЗаписи;
	КонецЕсли;
	
	// Повторная загрузка данных частичной доставки запрещена
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЖурналЗаказовСервисДоставки.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ДанныеЗаказовСервисДоставки.СостояниеОбработкиЧастичнойДоставки = ЗНАЧЕНИЕ(Перечисление.СостоянияОбработкиПроцедурСинхронизацииСервисДоставки.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЗаказПодлежитОбработке
	|ИЗ
	|	РегистрСведений.ЖурналЗаказовСервисДоставки КАК ЖурналЗаказовСервисДоставки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеЗаказовСервисДоставки КАК ДанныеЗаказовСервисДоставки
	|		ПО ДанныеЗаказовСервисДоставки.Организация = ЖурналЗаказовСервисДоставки.Организация
	|			И ДанныеЗаказовСервисДоставки.ТипГрузоперевозки = ЖурналЗаказовСервисДоставки.ТипГрузоперевозки
	|			И ДанныеЗаказовСервисДоставки.ИдентификаторДокумента = ЖурналЗаказовСервисДоставки.ИдентификаторДокумента
	|ГДЕ
	|	ЖурналЗаказовСервисДоставки.Организация = &Организация
	|	И ЖурналЗаказовСервисДоставки.ТипГрузоперевозки = &ТипГрузоперевозки
	|	И ЖурналЗаказовСервисДоставки.ИдентификаторДокумента В(&ИдентификаторыЗаказовНаДоставку)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналЗаказовСервисДоставки.ИдентификаторДокумента
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ДанныеЗаказовСервисДоставки.СостояниеОбработкиЧастичнойДоставки = ЗНАЧЕНИЕ(Перечисление.СостоянияОбработкиПроцедурСинхронизацииСервисДоставки.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) = ИСТИНА";
	
	Запрос.УстановитьПараметр("Организация", ОрганизацияБизнесСети);
	Запрос.УстановитьПараметр("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ИдентификаторыЗаказовНаДоставку = Новый Массив;
	
	Для Каждого ОписаниеЗаказаНаДоставку Из ЗаказыСЧастичнойДоставкой Цикл
		Если Не ЗначениеЗаполнено(ОписаниеЗаказаНаДоставку.ИдентификаторДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторыЗаказовНаДоставку.Добавить(Новый УникальныйИдентификатор(ОписаниеЗаказаНаДоставку.ИдентификаторДокумента));
	КонецЦикла;

	Запрос.УстановитьПараметр("ИдентификаторыЗаказовНаДоставку", ИдентификаторыЗаказовНаДоставку);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗаписи;
	КонецЕсли;
	
	ИдентификаторыКОбработке = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ИдентификаторДокумента");
	
	// Производим запись в регистры сведений
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеЗаказовСервисДоставки");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Организация", ОрганизацияБизнесСети);
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИдентификаторДокумента", "ИдентификаторДокумента");
		Блокировка.Заблокировать();
		
		Для Каждого ОписаниеЗаказаНаДоставку Из ЗаказыСЧастичнойДоставкой Цикл
			
			Если ТипЗнч(ОписаниеЗаказаНаДоставку.ИдентификаторДокумента) = Тип("Строка") Тогда
				ИдентификаторДокумента = Новый УникальныйИдентификатор(ОписаниеЗаказаНаДоставку.ИдентификаторДокумента);
			ИначеЕсли ТипЗнч(ОписаниеЗаказаНаДоставку.ИдентификаторДокумента) = Тип("УникальныйИдентификатор") Тогда
				ИдентификаторДокумента = ОписаниеЗаказаНаДоставку.ИдентификаторДокумента;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИдентификаторыКОбработке.Найти(ИдентификаторДокумента) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОписаниеЗаказаНаДоставку.Товары.Количество() = 0 Тогда
				// Очистка
				ДанныеЧДКОбработке = РегистрыСведений.ДанныеЧастичнойДоставкиСервисДоставки.СоздатьНаборЗаписей();
				ДанныеЧДКОбработке.Отбор.ИдентификаторДокумента.Установить(ИдентификаторДокумента);
				
				ДанныеЗаказовКОбработке = РегистрыСведений.ДанныеЗаказовСервисДоставки.СоздатьНаборЗаписей();
				ДанныеЗаказовКОбработке.Отбор.Организация.Установить(ОрганизацияБизнесСети);
				ДанныеЗаказовКОбработке.Отбор.ТипГрузоперевозки.Установить(ТипГрузоперевозки);
				ДанныеЗаказовКОбработке.Отбор.ИдентификаторДокумента.Установить(ИдентификаторДокумента);
				
				ДанныеЗаказовКОбработке.Прочитать();
				
				Для Каждого Запись Из ДанныеЗаказовКОбработке Цикл
					Запись.СостояниеОбработкиЧастичнойДоставки	= Перечисления.СостоянияОбработкиПроцедурСинхронизацииСервисДоставки.Выгрузить;
					Запись.ДокументыКИсправлению = Неопределено;
					Запись.РекомендацииПоИсправлениюЧДКратко = "";
				КонецЦикла;
				
				ДанныеЧДКОбработке.Записать(Истина);
				ДанныеЗаказовКОбработке.Записать(Истина);
				
			Иначе
				Для Каждого ОписаниеТоварнойПозиции Из ОписаниеЗаказаНаДоставку.Товары Цикл
					Если Не ОписаниеТоварнойПозиции.Свойство("ДокументОснование") Тогда
						Продолжить;
					КонецЕсли;
					
					ДанныеЧДКОбработке = РегистрыСведений.ДанныеЧастичнойДоставкиСервисДоставки.СоздатьМенеджерЗаписи();
					ДанныеЧДКОбработке.ИдентификаторДокумента	= ИдентификаторДокумента;
					ДанныеЧДКОбработке.ДокументОснование		= ОписаниеТоварнойПозиции.ДокументОснование;
					ДанныеЧДКОбработке.ИдентификаторСтроки		= ОписаниеТоварнойПозиции.ИдентификаторСтроки;
					
					ДанныеЧДКОбработке.Количество				= ОписаниеТоварнойПозиции.Количество;
					ДанныеЧДКОбработке.КоличествоВозврат		= ОписаниеТоварнойПозиции.КоличествоВозврат;
					
					ДанныеЗаказовКОбработке = РегистрыСведений.ДанныеЗаказовСервисДоставки.СоздатьМенеджерЗаписи();
					ДанныеЗаказовКОбработке.Организация				= ОрганизацияБизнесСети;
					ДанныеЗаказовКОбработке.ТипГрузоперевозки		= ТипГрузоперевозки;
					ДанныеЗаказовКОбработке.ИдентификаторДокумента	= ИдентификаторДокумента;
					ДанныеЗаказовКОбработке.ДокументОснование		= ОписаниеТоварнойПозиции.ДокументОснование;
				
					ДанныеЗаказовКОбработке.Прочитать();
				
					ДанныеЗаказовКОбработке.Организация							= ОрганизацияБизнесСети;
					ДанныеЗаказовКОбработке.ТипГрузоперевозки					= ТипГрузоперевозки;
					ДанныеЗаказовКОбработке.ИдентификаторДокумента				= ИдентификаторДокумента;
					ДанныеЗаказовКОбработке.ДокументОснование					= ОписаниеТоварнойПозиции.ДокументОснование;
					ДанныеЗаказовКОбработке.СостояниеОбработкиЧастичнойДоставки	= Перечисления.СостоянияОбработкиПроцедурСинхронизацииСервисДоставки.Обработать;
				
					ДанныеЧДКОбработке.Записать();
					ДанныеЗаказовКОбработке.Записать();
				
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		РезультатЗаписи.Ошибки.Добавить(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат РезультатЗаписи;
	КонецПопытки;

	Возврат РезультатЗаписи;
КонецФункции

// Проверка возможности выполнить шаг загрузки частичной доставки
// 
// Параметры:
//  ТипГрузоперевозки - ПеречислениеСсылка.ТипыГрузоперевозки - тип грузоперевозки
//  ОрганизацияБизнесСети - СправочникСсылка.Организации - организация.
//  ТекущийШаг - ПеречислениеСсылка.ШагиСинхронизацииСервисДоставки - Текущий шаг
//  СостояниеСинхронизации - Неопределено, Структура - Состояние синхронизации:
// * Результат - Булево -
// * ШагЗагрузки - Неопределено, ПеречислениеСсылка.ШагиСинхронизацииСервисДоставки -
// * ДатаПоследнегоИзменения - Дата -
// * Состояние - Неопределено, ПеречислениеСсылка.СостоянияСинхронизацииСервисДоставки -
// * ДатаРегистрацииПлатежа - Дата -
// * ИдентификаторДокумента - Строка - идентификатор заказа на доставку, назначенный в сервисе интеграции.
// 
// Возвращаемое значение:
//  Булево - Истина - выполнить шаг загрузки необходимо. Ложь - нет необходимости
Функция НеобходимоВыполнитьШагСинхронизацииПоЧастичнойДоставке(ТипГрузоперевозки, ОрганизацияБизнесСети, ТекущийШаг,
	СостояниеСинхронизации = Неопределено)

	СостояниеСинхронизации = РегистрыСведений.СостоянияСинхронизацииСервисДоставки.ПолучитьТекущееСостояниеСинхронизации(
		ТипГрузоперевозки, ОрганизацияБизнесСети, ТекущийШаг,
		Перечисления.ТипыСинхронизацииСервисДоставки.СинхронизацияПоЧастичнойДоставке);

	Результат = Ложь;

	Если СостояниеСинхронизации.Результат = Ложь Тогда
		// Синхронизация не запускалась
		Результат = Истина;
	Иначе
		Если СостояниеСинхронизации.Состояние = Перечисления.СостоянияСинхронизацииСервисДоставки.Выполняется
			И (ТекущийШаг = Перечисления.ШагиСинхронизацииСервисДоставки.ЗагрузкаИзСервисаИнтеграции 
				Или ТекущийШаг = Перечисления.ШагиСинхронизацииСервисДоставки.ВыгрузкаВСервисИнтеграции) Тогда
				
			// Синхронизация идет, но нужно проверить не превысила ли она лимит времени отведенный на сеанс связи с сервисом интеграции
			ЛимитВремениВыполнения = ЛимитВремениВыполненияПоУмолчанию();
			Если (СостояниеСинхронизации.ДатаПоследнегоИзменения + ЛимитВремениВыполнения)
				<= ТекущаяУниверсальнаяДата() Тогда
				Результат = Истина;
			КонецЕсли;

		Иначе
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Исправление заказов клиента, реализаций и корректировок реализаций с целью приведения их в соответствие с фактически доставленным количеством товара 
// 
// Параметры:
//  Параметры - Структура - содержит свойства:
//   * ОрганизацияБизнесСети - ОпределяемыйТип.ОрганизацияСервисДоставки - организация, чьи документы должны быть исправлены.
//   * ТипГрузоперевозки - Число, ПеречислениеСсылка.ТипыГрузоперевозки - тип грузоперевозки
//   * ИдентификаторыЗаказовНаДоставку - Массив из УникальныйИдентификатор - идентификаторы заказов на доставку, чьи документы подлежат исправлению. Пустой массив - исправить документы всех заказов на доставку.
//   * ДокументыКИсправлению - Массив из ДокументСсылка - список документов, связанных с заказами на доставку, подлежащие исправлению. Пустой массив - исправить все документы.
//  АдресРезультата - Строка - Адрес временного хранилища в который будет возвращен результат корректировки.
Процедура СкорректироватьДокументыПоЧастичнойДоставке(Знач Параметры, Знач АдресРезультата) Экспорт
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ОбщийМодуль.СервисДоставки.ЧастичнаяДоставка.Корректировка");
	КоличествоОбработанныхДанных = 0;
	
	Результат = Новый Структура("Ошибки", Новый Массив);
	
	СервисДоставкиПереопределяемый.СкорректироватьДокументыПоЧастичнойДоставке(Параметры, Результат, КоличествоОбработанныхДанных);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, КоличествоОбработанныхДанных);
	
КонецПроцедуры

// Синхронизация данных регистров по частичной доставке.
// Может возникнуть ситуация, когда в регистре "ЖурналЗаказовСервисДоставки" состояние = "частичная доставка",
// а в регистре ДанныеЗаказовСервисДоставки - такой информации нет.
// 
// Параметры:
//  ПараметрыЗапроса - Структура - параметры:
//   * ОрганизацияБизнесСетиСсылка - ОпределяемыйТип.ОрганизацияСервисДоставки - организация, 
//       подключенная к 1С:Бизнес-сеть.
//   * ТипГрузоперевозки - ПеречислениеСсылка.ТипыГрузоперевозки - тип грузоперевозки
//  АдресРезультата - Строка - адрес временного хранилища, в которое будет помещен результат выполнения
//
Процедура СинхронизироватьДанныеРегистровПоЧастичнойДоставке(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт

	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		Отказ = Ложь;
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Организация = ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка;
	ТипГрузоперевозки = СервисДоставкиКлиентСервер.ПеречислениеГрузоперевозчика(ПараметрыЗапроса.ТипГрузоперевозки);
	
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьРассинхронизация
	|ИЗ
	|	РегистрСведений.ЖурналЗаказовСервисДоставки КАК ЖурналЗаказовСервисДоставки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеЧастичнойДоставкиСервисДоставки КАК ДанныеЧастичнойДоставкиСервисДоставки
	|		ПО ЖурналЗаказовСервисДоставки.ИдентификаторДокумента = ДанныеЧастичнойДоставкиСервисДоставки.ИдентификаторДокумента
	|ГДЕ
	|	ЖурналЗаказовСервисДоставки.Организация = &Организация
	|	И ЖурналЗаказовСервисДоставки.ТипГрузоперевозки = &ТипГрузоперевозки
	|	И ЖурналЗаказовСервисДоставки.СостояниеИдентификатор = &СостояниеЧастичнойДоставки
	|	И ДанныеЧастичнойДоставкиСервисДоставки.ИдентификаторДокумента IS NULL";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТипГрузоперевозки", ТипГрузоперевозки);
	Запрос.УстановитьПараметр("СостояниеЧастичнойДоставки", 23);	// частичная доставка
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФЗ = Новый Структура;
	ПараметрыФЗ.Вставить("Ключ", "СинхронизацияПоЧастичнойДоставке");
	ПараметрыФЗ.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	КоличествоФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(ПараметрыФЗ).Количество();
	
	Если КоличествоФЗ = 0 Тогда
		ШагиСинхронизацииКВыполнению = Новый Массив();
		ШагиСинхронизацииКВыполнению.Добавить(Перечисления.ШагиСинхронизацииСервисДоставки.ЗагрузкаИзСервисаИнтеграции);
		ШагиСинхронизацииКВыполнению.Добавить(Перечисления.ШагиСинхронизацииСервисДоставки.ОбработкаЗагруженныхДанных);
		СинхронизацияПоЧастичнойДоставке(ШагиСинхронизацииКВыполнению);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// Обработчик регламентного задания СинхронизацияССервисомИнтеграцииСервисДоставки.
// 
// Параметры:
//  ТипСинхронизации - ПеречислениеСсылка.ТипыСинхронизацииСервисДоставки - Тип синхронизации
Процедура СинхронизацияССервисомИнтеграцииСервисДоставки(ТипСинхронизации) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СинхронизацияССервисомИнтеграцииСервисДоставки);
	
	Если ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисДоставки.ЗагрузкаДанныхПоНаложеннымПлатежам Тогда
		
		ЗагрузкаДанныхПоНаложеннымПлатежамСервисДоставки();
		
	ИначеЕсли ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисДоставки.СинхронизацияПоЧастичнойДоставке Тогда
		
		// Проверка на наличие фонового задания, запущенного в ручном режиме
		ПараметрыФЗ = Новый Структура;
		ПараметрыФЗ.Вставить("РегламентноеЗадание", Неопределено);
		ПараметрыФЗ.Вставить("Ключ", "СинхронизацияПоЧастичнойДоставке");
		ПараметрыФЗ.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
		КоличествоФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(ПараметрыФЗ).Количество();

		Если КоличествоФЗ = 0 Тогда
			СинхронизацияПоЧастичнойДоставке();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузкаДанныхПоНаложеннымПлатежамСервисДоставки()
	
	ИспользоватьРегламентЗагрузкиНаложенныхПлатежей = Ложь;
	СервисДоставкиПереопределяемый.ИспользоватьРегламентЗагрузкиНаложенныхПлатежей(ИспользоватьРегламентЗагрузкиНаложенныхПлатежей);
	Если ИспользоватьРегламентЗагрузкиНаложенныхПлатежей Тогда
		ВыполнитьЗагрузкуДанныхПоНаложеннымПлатежам(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьИспользованиеЗаданияСинхронизацияССервисомИнтеграции(ТипСинхронизации, Использование) Экспорт
	
	РегламентноеЗадание = Метаданные.РегламентныеЗадания.СинхронизацияССервисомИнтеграцииСервисДоставки;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Метаданные", РегламентноеЗадание);
	
	Если ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисДоставки.ЗагрузкаДанныхПоНаложеннымПлатежам Тогда
		ПараметрыПоиска.Вставить("Ключ", "ЗагрузкаДанныхПоНаложеннымПлатежамСервисДоставки");
	Иначе
		ПараметрыПоиска.Вставить("Ключ", XMLСтрока(ТипСинхронизации));
	КонецЕсли;
	
	НайденныеРегламентныеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыПоиска);
	КоличествоНайденныхЗаданий = НайденныеРегламентныеЗадания.Количество();

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Ключ", ПараметрыПоиска.Ключ);
	ПараметрыЗадания.Вставить("Использование", Использование);

	Если КоличествоНайденныхЗаданий = 0 И Использование Тогда
		
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.СинхронизацияССервисомИнтеграцииСервисДоставки);
		Если Не ОбщегоНазначения.РазделениеВключено() Тогда
			ПараметрыЗадания.Вставить("Наименование", СтрШаблон("%1: %2", РегламентноеЗадание.Синоним, Строка(ТипСинхронизации)));
		КонецЕсли;
		ПараметрыЗадания.Вставить("Параметры", Новый Массив());
		ПараметрыЗадания.Параметры.Добавить(ТипСинхронизации);
		
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		
	Иначе
		
		Для Каждого НайденноеРегламентноеЗадания Из НайденныеРегламентныеЗадания Цикл
			Если НайденноеРегламентноеЗадания.Использование <> Использование Тогда
				РегламентныеЗаданияСервер.ИзменитьЗадание(НайденноеРегламентноеЗадания.УникальныйИдентификатор, ПараметрыЗадания);
			КонецЕсли;
			Если Использование Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтключитьИспользованиеРегламентногоЗадания(РегламентноеЗадание = Неопределено, ПараметрыПоиска = Неопределено) Экспорт
	
	Если РегламентноеЗадание = Неопределено Тогда
		РегламентноеЗадание = Метаданные.РегламентныеЗадания.СинхронизацияССервисомИнтеграцииСервисДоставки;
	КонецЕсли;
	
	Если ПараметрыПоиска = Неопределено Тогда
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Метаданные", РегламентноеЗадание);
		ПараметрыПоиска.Вставить("Использование", Истина);
	
		РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
		Если РазделениеВключено Тогда
			ПараметрыПоиска.Вставить("ОбластьДанных", Строка(ПараметрыСеанса.ОбластьДанныхЗначение));
		Иначе
			ПараметрыПоиска.Вставить("Предопределенное", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныеРегламентныеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыПоиска);
	
	Если НайденныеРегламентныеЗадания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Ключ", "");
	ПараметрыЗадания.Вставить("Использование", Ложь);
	
	РегламентныеЗаданияСервер.ИзменитьЗадание(НайденныеРегламентныеЗадания[0].УникальныйИдентификатор, ПараметрыЗадания);
	
КонецПроцедуры

// Используется автоматическое обновление данных сервис доставки.
// 
// Возвращаемое значение:
//  Булево - Используется автоматическое обновление данных сервис доставки
Функция ИспользуетсяАвтоматическоеОбновлениеДанныхСервисДоставки() Экспорт
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Метаданные",
		Метаданные.РегламентныеЗадания.СинхронизацияССервисомИнтеграцииСервисДоставки);
	ПараметрыПоиска.Вставить("Использование", Истина);
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	Если РазделениеВключено Тогда
		ПараметрыПоиска.Вставить("ОбластьДанных", Строка(ПараметрыСеанса.ОбластьДанныхЗначение));
	Иначе
		ПараметрыПоиска.Вставить("Предопределенное", Ложь);
	КонецЕсли;
	
	НайденныеРегламентныеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыПоиска);
	
	Возврат НайденныеРегламентныеЗадания.Количество() > 0;

КонецФункции

#КонецОбласти

#Область Прочее

Функция ПредставлениеОснованияДляСписка(ДокументыОснования, КоличествоИдентификаторовДокументовОснований)
	
	Представление = "";
	
	Если ДокументыОснования.Количество() = 0 Тогда
		Если КоличествоИдентификаторовДокументовОснований > 0 Тогда
			Представление = НСтр("ru = 'Введено в другой информационной базе'");
		Иначе
			Представление = "";
		КонецЕсли;
	ИначеЕсли ДокументыОснования.Количество() = 1 Тогда
		УстановитьПривилегированныйРежим(Истина);
		Представление = Строка(ДокументыОснования[0].Значение);
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Всего документов: %1'"),
			ДокументыОснования.Количество());
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ПредставлениеМультизаказа(Параметры, ПолноеНаименование = Ложь)
	
	ПредставлениеДляСписка = "";
	
	ПредставлениеДляСписка = Параметры.МультизаказТипНаименование;
	
	Если Параметры.МультизаказНомер <> "" Тогда
		ПредставлениеДляСписка =
			ПредставлениеДляСписка + " "
			+ СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Параметры.МультизаказНомер,"0","СЛЕВА");
	КонецЕсли;
		
	Если ПолноеНаименование Тогда
		ПредставлениеДляСписка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 от %2'"),
			ПредставлениеДляСписка,
			Формат(Параметры.МультизаказДата, "ДЛФ=D"))
	КонецЕсли;
	
	Возврат ПредставлениеДляСписка;
	
КонецФункции

Процедура ДобавитьПараметрыПоУмолчанию(Параметры)
	
	ДанныеПоУмолчанию = ПараметрыПоУмолчанию(Параметры.ТипГрузоперевозки);
	
	Если Не Параметры.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		Параметры.Вставить("ОрганизацияБизнесСетиСсылка");
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(Параметры.ОрганизацияБизнесСетиСсылка) 
		И НЕ БизнесСеть.ОрганизацияПодключена(Параметры.ОрганизацияБизнесСетиСсылка))
		ИЛИ Не ЗначениеЗаполнено(Параметры.ОрганизацияБизнесСетиСсылка) Тогда
		
		Параметры.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияПоУмолчанию(Параметры.ТипГрузоперевозки));
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ЗаказчикРоль) Тогда
		Если ЗначениеЗаполнено(ДанныеПоУмолчанию.ЗаказчикРоль) Тогда
			Параметры.ЗаказчикРоль = ДанныеПоУмолчанию.ЗаказчикРоль;
		Иначе
			Параметры.ЗаказчикРоль = 1;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВремяДоставки.ОбедПо) Тогда
		Параметры.ВремяДоставки.ОбедПо = ДанныеПоУмолчанию.ВремяДоставкиОбедПо;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВремяДоставки.ОбедС) Тогда
		Параметры.ВремяДоставки.ОбедС = ДанныеПоУмолчанию.ВремяДоставкиОбедС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВремяДоставки.По) Тогда
		Параметры.ВремяДоставки.По = ДанныеПоУмолчанию.ВремяДоставкиПо;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВремяДоставки.С) Тогда
		Параметры.ВремяДоставки.С = ДанныеПоУмолчанию.ВремяДоставкиС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВремяОтгрузки.ОбедПо) Тогда
		Параметры.ВремяОтгрузки.ОбедПо = ДанныеПоУмолчанию.ВремяОтгрузкиОбедПо;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВремяОтгрузки.ОбедС) Тогда
		Параметры.ВремяОтгрузки.ОбедС = ДанныеПоУмолчанию.ВремяОтгрузкиОбедС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВремяОтгрузки.По) Тогда
		Параметры.ВремяОтгрузки.По = ДанныеПоУмолчанию.ВремяОтгрузкиПо;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВремяОтгрузки.С) Тогда
		Параметры.ВремяОтгрузки.С = ДанныеПоУмолчанию.ВремяОтгрузкиС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВремяОтгрузки.С) Тогда
		Параметры.ВремяОтгрузки.С = ДанныеПоУмолчанию.ВремяОтгрузкиС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.СпособДоставки) Тогда
		Параметры.СпособДоставки = ДанныеПоУмолчанию.СпособДоставки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.СпособОтгрузки) Тогда
		Параметры.СпособОтгрузки = ДанныеПоУмолчанию.СпособОтгрузки;
	КонецЕсли;
	
	ПараметрыУчастника = Параметры.Отправитель;
	Если ПараметрыУчастника.Контрагент.ЭтоОрганизация Тогда
		
		Если ДанныеПоУмолчанию.СпособОпределенияКонтактногоЛица = СервисДоставкиКлиентСервер.СпособОпределенияКонтактногоЛицаВручную() Тогда
			ПараметрыУчастника.КонтактноеЛицо.Ссылка = Неопределено;
			ПараметрыУчастника.КонтактноеЛицо.Наименование = "";
			ПараметрыУчастника.КонтактноеЛицо.Телефон.Представление = "";
			ПараметрыУчастника.КонтактноеЛицо.Телефон.Значение = "";
		ИначеЕсли ДанныеПоУмолчанию.СпособОпределенияКонтактногоЛица = СервисДоставкиКлиентСервер.СпособОпределенияКонтактногоЛицаОтветственныйЗаДоставку()
			И ЗначениеЗаполнено(ДанныеПоУмолчанию.КонтактноеЛицо) Тогда
			Если ТипЗнч(ДанныеПоУмолчанию.КонтактноеЛицо) = Тип("Строка") Тогда
				ПараметрыУчастника.КонтактноеЛицо.Наименование = ДанныеПоУмолчанию.КонтактноеЛицо;
			Иначе
				ПараметрыУчастника.КонтактноеЛицо.Ссылка = ДанныеПоУмолчанию.КонтактноеЛицо;
				ЗаполнитьПараметрыКонтактногоЛица(ПараметрыУчастника.КонтактноеЛицо);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыУчастника = Параметры.Получатель;
	Если ПараметрыУчастника.Контрагент.ЭтоОрганизация Тогда
		
		Если ДанныеПоУмолчанию.СпособОпределенияКонтактногоЛица = СервисДоставкиКлиентСервер.СпособОпределенияКонтактногоЛицаВручную() Тогда
			ПараметрыУчастника.КонтактноеЛицо.Ссылка = Неопределено;
			ПараметрыУчастника.КонтактноеЛицо.Наименование = "";
			ПараметрыУчастника.КонтактноеЛицо.Телефон.Представление = "";
			ПараметрыУчастника.КонтактноеЛицо.Телефон.Значение = "";
		ИначеЕсли ДанныеПоУмолчанию.СпособОпределенияКонтактногоЛица = СервисДоставкиКлиентСервер.СпособОпределенияКонтактногоЛицаОтветственныйЗаДоставку()
			И ЗначениеЗаполнено(ДанныеПоУмолчанию.КонтактноеЛицо) Тогда
			Если ТипЗнч(ДанныеПоУмолчанию.КонтактноеЛицо) = Тип("Строка") Тогда
				ПараметрыУчастника.КонтактноеЛицо.Наименование = ДанныеПоУмолчанию.КонтактноеЛицо;
			Иначе
				ПараметрыУчастника.КонтактноеЛицо.Ссылка = ДанныеПоУмолчанию.КонтактноеЛицо;
				ЗаполнитьПараметрыКонтактногоЛица(ПараметрыУчастника.КонтактноеЛицо);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Товары = Параметры.Товары;
	ВсегоВес = 0;
	ВсегоОбъем = 0;
	
	Для Каждого ТекСтрока Из Товары Цикл
		
		Если ТекСтрока.Вес = 0 Тогда
			Если СервисДоставкиКлиентСервер.ЭтоСДЭК(Параметры.ТипГрузоперевозки) Тогда
				ТекСтрока.ВесЕдиницыТовара = ДанныеПоУмолчанию.ВесЕдиницыТовара;
				ТекСтрока.Вес = ТекСтрока.Количество * ТекСтрока.ВесЕдиницыТовара;
			Иначе
				ТекСтрока.Вес = ДанныеПоУмолчанию.ВесЕдиницыТовара;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.Объем = 0 Тогда
		
			Если ТекСтрока.Длина = 0 Тогда
				ТекСтрока.Длина = ДанныеПоУмолчанию.ДлинаЕдиницыТовара;
			КонецЕсли;
			
			Если ТекСтрока.Ширина = 0 Тогда
				ТекСтрока.Ширина = ДанныеПоУмолчанию.ШиринаЕдиницыТовара;
			КонецЕсли;
			
			Если ТекСтрока.Высота = 0 Тогда
				ТекСтрока.Высота = ДанныеПоУмолчанию.ВысотаЕдиницыТовара;
			КонецЕсли;
			
		ИначеЕсли ТекСтрока.Длина*ТекСтрока.Ширина*ТекСтрока.Высота = 0 Тогда
			
			ТекСтрока.Объем = ТекСтрока.Объем * ТекСтрока.ОбъемКоэффициентСм3;
			
			Если ТекСтрока.Длина <> 0 Тогда
				
				Если ТекСтрока.Ширина <> 0 Тогда
					ТекСтрока.Высота = Окр(ТекСтрока.Объем/(ТекСтрока.Длина*ТекСтрока.Ширина), 0);
				ИначеЕсли ТекСтрока.Высота <> 0 Тогда
					ТекСтрока.Ширина = Окр(ТекСтрока.Объем/(ТекСтрока.Длина*ТекСтрока.Высота), 0);
				ИначеЕсли ДанныеПоУмолчанию.ШиринаЕдиницыТовара <> 0 Тогда
					ТекСтрока.Ширина = ДанныеПоУмолчанию.ШиринаЕдиницыТовара;
					ТекСтрока.Высота = Окр(ТекСтрока.Объем/(ТекСтрока.Длина*ТекСтрока.Ширина), 0);
				ИначеЕсли ДанныеПоУмолчанию.ВысотаЕдиницыТовара <> 0 Тогда
					ТекСтрока.Высота = ДанныеПоУмолчанию.ВысотаЕдиницыТовара;
					ТекСтрока.Ширина = Окр(ТекСтрока.Объем/(ТекСтрока.Длина*ТекСтрока.Высота), 0);
				Иначе
					ТекСтрока.Ширина = Окр(Sqrt(ТекСтрока.Объем/ТекСтрока.Длина), 0);
					ТекСтрока.Высота = Окр(Sqrt(ТекСтрока.Объем/ТекСтрока.Длина), 0);
				КонецЕсли;
				
			ИначеЕсли ТекСтрока.Ширина <> 0 Тогда
				
				Если ТекСтрока.Высота <> 0 Тогда
					ТекСтрока.Длина = Окр(ТекСтрока.Объем/(ТекСтрока.Ширина*ТекСтрока.Высота), 0);
				ИначеЕсли ДанныеПоУмолчанию.ДлинаЕдиницыТовара <> 0 Тогда
					ТекСтрока.Длина = ДанныеПоУмолчанию.ДлинаЕдиницыТовара;
					ТекСтрока.Высота = Окр(ТекСтрока.Объем/(ТекСтрока.Ширина*ТекСтрока.Длина), 0);
				ИначеЕсли ДанныеПоУмолчанию.ВысотаЕдиницыТовара <> 0 Тогда
					ТекСтрока.Высота = ДанныеПоУмолчанию.ВысотаЕдиницыТовара;
					ТекСтрока.Длина = Окр(ТекСтрока.Объем/(ТекСтрока.Ширина*ТекСтрока.Высота), 0);
				Иначе
					ТекСтрока.Длина = Окр(Sqrt(ТекСтрока.Объем/ТекСтрока.Ширина), 0);
					ТекСтрока.Высота = Окр(Sqrt(ТекСтрока.Объем/ТекСтрока.Ширина), 0);
				КонецЕсли;
				
			ИначеЕсли ТекСтрока.Высота <> 0 Тогда
				
				Если ДанныеПоУмолчанию.ДлинаЕдиницыТовара <> 0 Тогда
					ТекСтрока.Длина = ДанныеПоУмолчанию.ДлинаЕдиницыТовара;
					ТекСтрока.Ширина = Окр(ТекСтрока.Объем/(ТекСтрока.Высота*ТекСтрока.Длина), 0);
				ИначеЕсли ДанныеПоУмолчанию.ШиринаЕдиницыТовара <> 0 Тогда
					ТекСтрока.Ширина = ДанныеПоУмолчанию.ШиринаЕдиницыТовара;
					ТекСтрока.Длина = Окр(ТекСтрока.Объем/(ТекСтрока.Высота*ТекСтрока.Ширина), 0);
				Иначе
					ТекСтрока.Длина = Окр(Sqrt(ТекСтрока.Объем/ТекСтрока.Высота), 0);
					ТекСтрока.Ширина = Окр(Sqrt(ТекСтрока.Объем/ТекСтрока.Высота), 0);
				КонецЕсли;
			Иначе
				ТекСтрока.Длина = ДанныеПоУмолчанию.ДлинаЕдиницыТовара;
				ТекСтрока.Ширина = ДанныеПоУмолчанию.ШиринаЕдиницыТовара;
				ТекСтрока.Высота = ДанныеПоУмолчанию.ВысотаЕдиницыТовара;
			КонецЕсли;
			
		КонецЕсли;
		
		ТекСтрока.Объем = Окр(ТекСтрока.Длина*ТекСтрока.Ширина*ТекСтрока.Высота/1000000, 3);
		
		ВсегоВес = ВсегоВес + ТекСтрока.Вес;
		ВсегоОбъем = ВсегоОбъем + ТекСтрока.Объем;
		
	КонецЦикла;
	
	Параметры.Груз.КоличествоГрузовыхМест = ?(Параметры.Груз.КоличествоГрузовыхМест = 0, 1, Параметры.Груз.КоличествоГрузовыхМест);
	
	МаксимальныйВес = ?(Параметры.Груз.МаксимальныйВес = 0, ДанныеПоУмолчанию.ВесГрузовогоМеста, Параметры.Груз.МаксимальныйВес);
	
	Если Параметры.Груз.КоличествоГрузовыхМест = 1 Тогда
		Если Параметры.Груз.Вес = 0 Тогда
			Параметры.Груз.Вес = ?(ВсегоВес > МаксимальныйВес, ВсегоВес, МаксимальныйВес);
			Параметры.Груз.МаксимальныйВес = Параметры.Груз.Вес;
		КонецЕсли;
	Иначе
		Если Параметры.Груз.Вес = 0 Тогда
			Параметры.Груз.Вес = ?(ВсегоВес > МаксимальныйВес*Параметры.Груз.КоличествоГрузовыхМест, ВсегоВес, МаксимальныйВес*Параметры.Груз.КоличествоГрузовыхМест);
			Параметры.Груз.МаксимальныйВес = МаксимальныйВес;
		ИначеЕсли Параметры.Груз.МаксимальныйВес = 0 Тогда
			Параметры.Груз.МаксимальныйВес = МаксимальныйВес;
		КонецЕсли
	КонецЕсли;
	
	Если Параметры.Груз.КоличествоГрузовыхМест = 1 Тогда
		
		Если Параметры.Груз.Объем = 0
			И ВсегоОбъем = 0 Тогда
			
			Если Параметры.Груз.МаксимальнаяДлина = 0 Тогда
				Параметры.Груз.МаксимальнаяДлина = ДанныеПоУмолчанию.ДлинаГрузовогоМеста;
			КонецЕсли;
			
			Если Параметры.Груз.МаксимальнаяШирина = 0 Тогда
				Параметры.Груз.МаксимальнаяШирина = ДанныеПоУмолчанию.ШиринаГрузовогоМеста;
			КонецЕсли;
			
			Если Параметры.Груз.МаксимальнаяВысота = 0 Тогда
				Параметры.Груз.МаксимальнаяВысота = ДанныеПоУмолчанию.ВысотаГрузовогоМеста;
			КонецЕсли;
			
		ИначеЕсли Параметры.Груз.МаксимальнаяДлина*Параметры.Груз.МаксимальнаяШирина*Параметры.Груз.МаксимальнаяВысота = 0 Тогда
			
			ОбъемДляРасчетов = ?(Параметры.Груз.Объем = 0, ВсегоОбъем, Параметры.Груз.Объем);
			
			Если Параметры.Груз.МаксимальнаяДлина <> 0 Тогда
				
				Если Параметры.Груз.МаксимальнаяШирина <> 0 Тогда
					Параметры.Груз.МаксимальнаяВысота = Окр(ОбъемДляРасчетов/(Параметры.Груз.МаксимальнаяДлина*Параметры.Груз.МаксимальнаяШирина), 0);
				ИначеЕсли Параметры.Груз.МаксимальнаяВысота <> 0 Тогда
					Параметры.Груз.МаксимальнаяШирина = Окр(ОбъемДляРасчетов/(Параметры.Груз.МаксимальнаяДлина*Параметры.Груз.МаксимальнаяВысота), 0);
				ИначеЕсли ДанныеПоУмолчанию.ШиринаГрузовогоМеста <> 0 Тогда
					Параметры.Груз.МаксимальнаяШирина = ДанныеПоУмолчанию.ШиринаГрузовогоМеста;
					Параметры.Груз.МаксимальнаяВысота = Окр(ОбъемДляРасчетов/(Параметры.Груз.МаксимальнаяДлина*Параметры.Груз.МаксимальнаяШирина), 0);
				ИначеЕсли ДанныеПоУмолчанию.ВысотаГрузовогоМеста <> 0 Тогда
					Параметры.Груз.МаксимальнаяВысота = ДанныеПоУмолчанию.ВысотаГрузовогоМеста;
					Параметры.Груз.МаксимальнаяШирина = Окр(ОбъемДляРасчетов/(Параметры.Груз.МаксимальнаяДлина*Параметры.Груз.МаксимальнаяВысота), 0);
				Иначе
					Параметры.Груз.МаксимальнаяШирина = Окр(Sqrt(ОбъемДляРасчетов/Параметры.Груз.МаксимальнаяДлина), 0);
					Параметры.Груз.МаксимальнаяВысота = Окр(Sqrt(ОбъемДляРасчетов/Параметры.Груз.МаксимальнаяДлина), 0);
				КонецЕсли;
				
			ИначеЕсли Параметры.Груз.МаксимальнаяШирина <> 0 Тогда
				
				Если Параметры.Груз.МаксимальнаяВысота <> 0 Тогда
					Параметры.Груз.МаксимальнаяДлина = Окр(ОбъемДляРасчетов/(Параметры.Груз.МаксимальнаяШирина*Параметры.Груз.МаксимальнаяВысота), 0);
				ИначеЕсли ДанныеПоУмолчанию.ДлинаГрузовогоМеста <> 0 Тогда
					Параметры.Груз.МаксимальнаяДлина = ДанныеПоУмолчанию.ДлинаГрузовогоМеста;
					Параметры.Груз.МаксимальнаяВысота = Окр(ОбъемДляРасчетов/(Параметры.Груз.МаксимальнаяШирина*Параметры.Груз.МаксимальнаяДлина), 0);
				ИначеЕсли ДанныеПоУмолчанию.ВысотаГрузовогоМеста <> 0 Тогда
					Параметры.Груз.МаксимальнаяВысота = ДанныеПоУмолчанию.ВысотаГрузовогоМеста;
					Параметры.Груз.МаксимальнаяДлина = Окр(ОбъемДляРасчетов/(Параметры.Груз.МаксимальнаяШирина*Параметры.Груз.МаксимальнаяВысота), 0);
				Иначе
					Параметры.Груз.МаксимальнаяДлина = Окр(Sqrt(ОбъемДляРасчетов/Параметры.Груз.МаксимальнаяШирина), 0);
					Параметры.Груз.МаксимальнаяВысота = Окр(Sqrt(ОбъемДляРасчетов/Параметры.Груз.МаксимальнаяШирина), 0);
				КонецЕсли;
				
			ИначеЕсли Параметры.Груз.МаксимальнаяВысота <> 0 Тогда
				
				Если ДанныеПоУмолчанию.ДлинаГрузовогоМеста <> 0 Тогда
					Параметры.Груз.МаксимальнаяДлина = ДанныеПоУмолчанию.ДлинаГрузовогоМеста;
					Параметры.Груз.МаксимальнаяШирина = Окр(ОбъемДляРасчетов/(Параметры.Груз.МаксимальнаяВысота*Параметры.Груз.МаксимальнаяДлина), 0);
				ИначеЕсли ДанныеПоУмолчанию.ШиринаГрузовогоМеста <> 0 Тогда
					Параметры.Груз.МаксимальнаяШирина = ДанныеПоУмолчанию.ШиринаГрузовогоМеста;
					Параметры.Груз.МаксимальнаяДлина = Окр(Параметры.Груз.МаксимальнаяОбъем/(Параметры.Груз.МаксимальнаяВысота*Параметры.Груз.МаксимальнаяШирина), 0);
				Иначе
					Параметры.Груз.МаксимальнаяДлина = Окр(Sqrt(ОбъемДляРасчетов/Параметры.Груз.МаксимальнаяВысота), 0);
					Параметры.Груз.МаксимальнаяШирина = Окр(Sqrt(ОбъемДляРасчетов/Параметры.Груз.МаксимальнаяВысота), 0);
				КонецЕсли;
			Иначе
				Параметры.Груз.МаксимальнаяДлина = ДанныеПоУмолчанию.ДлинаГрузовогоМеста;
				Параметры.Груз.МаксимальнаяШирина = ДанныеПоУмолчанию.ШиринаГрузовогоМеста;
				Параметры.Груз.МаксимальнаяВысота = ДанныеПоУмолчанию.ВысотаГрузовогоМеста;
			КонецЕсли;
			
		КонецЕсли;
		
		Объем = Параметры.Груз.МаксимальнаяДлина * Параметры.Груз.МаксимальнаяШирина * Параметры.Груз.МаксимальнаяВысота/1000000;
		
	Иначе
		
		Если Параметры.Груз.МаксимальнаяДлина = 0 Тогда
			Параметры.Груз.МаксимальнаяДлина = ДанныеПоУмолчанию.ДлинаГрузовогоМеста;
		КонецЕсли;
		
		Если Параметры.Груз.МаксимальнаяШирина = 0 Тогда
			Параметры.Груз.МаксимальнаяШирина = ДанныеПоУмолчанию.ШиринаГрузовогоМеста;
		КонецЕсли;
		
		Если Параметры.Груз.МаксимальнаяВысота = 0 Тогда
			Параметры.Груз.МаксимальнаяВысота = ДанныеПоУмолчанию.ВысотаГрузовогоМеста;
		КонецЕсли;
		
		ОбъемГрузовогоМестаПоУмолчанию = ДанныеПоУмолчанию.ДлинаГрузовогоМеста * ДанныеПоУмолчанию.ШиринаГрузовогоМеста * ДанныеПоУмолчанию.ВысотаГрузовогоМеста/1000000;
		
		Объем = Параметры.Груз.Объем;
		Если Объем = 0 Тогда
			Объем = Макс(ВсегоОбъем, ОбъемГрузовогоМестаПоУмолчанию*Параметры.Груз.КоличествоГрузовыхМест);
		КонецЕсли
		
	КонецЕсли;
	
	Если Объем > 0 Тогда
		Параметры.Груз.Объем = ?(Окр(Объем, 3) = 0, 0.001, Окр(Объем, 3));
	КонецЕсли;
	
КонецПроцедуры

Функция ФильтрПоМультизаказамПоУмолчанию()
	
	Возврат ФильтрПоМультизаказамВсеЗаказы();
	
КонецФункции

// Преобразовывает дату JSON без разделителя в дату.
//
// Параметры:
// 	ДатаСтрокой - Строка.
//
// Возвращаемое значение:
//  Дата.
//  
Функция ПрочитатьДатуJSONБезРазделителя(ДатаСтрокой)
	
	Результат = Дата(1, 1, 1);
	
	Если ЗначениеЗаполнено(ДатаСтрокой)
		И СтрНайти(ДатаСтрокой, " ") > 0 Тогда
		
		Попытка
			Результат = ПрочитатьДатуJSON(СтрЗаменить(ДатаСтрокой, " ", "T"), ФорматДатыJSON.ISO);
		Исключение
			Результат = Дата(1, 1, 1);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Требуется экранирование.
// 
// Параметры:
//  ТипГрузоперевозки - Неопределено - Тип грузоперевозки
// 
// Возвращаемое значение:
//  Булево - Требуется экранирование
Функция ТребуетсяЭкранирование(ТипГрузоперевозки)
	
	Результат = Ложь;
	
	Если ТипГрузоперевозки <> Неопределено Тогда
		ТипСервисаИнтеграции = СервисДоставкиКлиентСервер.ТипСервисаИнтеграции(ТипГрузоперевозки);
		Результат = ТипСервисаИнтеграции = СервисДоставкиКлиентСервер.ТипСервисаИнтеграции1СЭлемент();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает значение ресурса "ЕстьИзмененияТоварногоСостава" 
// 
// Параметры:
//  Запрос - Запрос - Подготовленный запрос для получения идентификаторов заказов на доставку
//  ЕстьИзмененияТоварногоСостава - Булево - Есть изменения товарного состава
Процедура УстановитьПризнакИзмененияВЖурналеЗаказов(Запрос, ЕстьИзмененияТоварногоСостава)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналЗаказовСервисДоставки");
		ЭлементБлокировки.УстановитьЗначение("Организация", ВыборкаДетальныеЗаписи.Организация);
		ЭлементБлокировки.УстановитьЗначение("ТипГрузоперевозки", ВыборкаДетальныеЗаписи.ТипГрузоперевозки);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторДокумента", ВыборкаДетальныеЗаписи.ИдентификаторДокумента);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ЖурналЗаказовСервисДоставки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИдентификаторДокумента.Установить(ВыборкаДетальныеЗаписи.ИдентификаторДокумента);
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.ЕстьИзмененияТоварногоСостава = ЕстьИзмененияТоварногоСостава;
			КонецЦикла;
			
			НаборЗаписей.Записать(Истина);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Ошибка записи данных заказа сервиса доставки
					|%1'"),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Очистить параметры при создании шаблона. Если
// 
// Параметры:
//  Параметры - Структура - параметры, которые будут сохранены как шаблон
//  ПараметрыЗаказа - Структура - параметры, которые были переданы для сохранения в шаблон
//  ТипГрузоперевозки - Число, ПеречислениеСсылка.ТипыГрузоперевозки - тип грузоперевозки
Процедура ОчиститьПараметрыПриСозданииШаблона(Параметры, ПараметрыЗаказа, ТипГрузоперевозки)
	
	ПараметрыЗаказа.Удалить("ИдентификаторЗаказа");
	ПараметрыЗаказа.Удалить("ДатаЗаказа");
	ПараметрыЗаказа.Удалить("НомерЗаказа");
	ПараметрыЗаказа.Удалить("ДоступнаОтмена");
	ПараметрыЗаказа.Удалить("Состояние");
	ПараметрыЗаказа.Удалить("СостояниеИдентификатор");
	ПараметрыЗаказа.Удалить("ТарифИдентификатор");
	Параметры.Удалить("ДокументыОснования");
	Параметры.Удалить("КлючИдемпотентности");
	Параметры.Удалить("Грузоперевозчик");
	Параметры.Удалить("ПолнаяСтоимость");
	
	Если СервисДоставкиКлиентСервер.ЭтоСДЭК(ТипГрузоперевозки) Тогда
		Параметры.Удалить("Груз");
	КонецЕсли;
	
КонецПроцедуры

// Получение идентификатора пользователя портала 1С.
//
// Возвращаемое значение:
//  Строка - идентификатор пользователя на портале 1С.
//
Функция ПолучитьИдентификаторСервисаБизнесСеть()
	
	Возврат СервисДоставкиПовтИсп.ПолучитьИдентификаторПользователяНаПортале("1c-bn-access");
	
КонецФункции

Функция ЕдинственнаяПодключеннаяОрганизацияБизнесСети()
	
	ДанныеОрганизаций = БизнесСеть.ПодключенныеОрганизации();
	Если ДанныеОрганизаций.Количество() = 1 Тогда
		Возврат ДанныеОрганизаций[0].Организация;
	КонецЕсли;
	
	Возврат Неопределено
	
КонецФункции

// Получить наименование валюты по коду с учетом кэша.
// 
// Параметры:
//  КодВалюты - Строка - Код валюты
//  КэшВалют - Соответствие из строка - соответствие кодов валют и наименований
// 
// Возвращаемое значение:
//  Строка, Произвольный - Получить наименование валюты по коду с учетом кэша
Функция ПолучитьНаименованиеВалютыПоКодуСУчетомКэша(КодВалюты, КэшВалют)
	
	НаименованиеВалюты = КэшВалют.Получить(КодВалюты);
	Если НаименованиеВалюты <> Неопределено Тогда
		Возврат НаименованиеВалюты;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("КодВалюты", СокрЛП(КодВалюты));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Валюты.Наименование
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Код = &КодВалюты
	|	И Не Валюты.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		КэшВалют.Вставить(КодВалюты, "");
		Возврат "";
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	КэшВалют.Вставить(КодВалюты, Выборка.Наименование);
		
	Возврат Выборка.Наименование;
	
КонецФункции

#Область ИнтеграцияПодсистемБиблиотеки

// См. ПодключениеСервисовСопровожденияПереопределяемый.ПриОпределенииСервисовСопровождения.
//
// Параметры:
//  МодулиСервисов	 - Массив - массив имен модулей.
//
Процедура ПриОпределенииСервисовСопровождения(МодулиСервисов) Экспорт
	
	МодулиСервисов.Добавить("СервисДоставки");
	
КонецПроцедуры

Процедура ПриДобавленииОписанийСервисовСопровождения(СервисыСопровождения) Экспорт
	
    ОписательСервиса = ПодключениеСервисовСопровождения.НовыйОписательСервиса();
    ОписательСервиса.Идентификатор = СервисДоставкиКлиентСервер.ИмяСервисаСопровождения1СКурьерика();
    ОписательСервиса.Картинка      = Метаданные.ОбщиеКартинки.ЛоготипСервисДоставкиКурьерика;
    ОписательСервиса.Наименование  = НСтр("ru = '1С-Курьерика'");
    ОписательСервиса.Описание      = НСтр("ru = 'Собственная служба доставки.'");
    СервисыСопровождения.Добавить(ОписательСервиса);
	
КонецПроцедуры

Функция ДоступенТестовыйПериодСервисаСопровождения() Экспорт
	
	ИдентификаторСервиса = СервисДоставкиКлиентСервер.ИмяСервисаСопровождения1СКурьерика();
	Идентификаторы       = Новый Массив;
	Идентификаторы.Добавить(ИдентификаторСервиса);
	// Запрос информации о возможности подключения тестовых периодов.
	РезультатПроверки = ПодключениеСервисовСопровождения.ДоступноПодключениеТестовогоПериода(
	    Идентификаторы);
	СтатусПодключения = РезультатПроверки.СервисыСопровождения.Получить(ИдентификаторСервиса);
	
	ДоступенТестовыйПериод = СтатусПодключения = "Доступно" Или СтатусПодключения = "Подключение";
	
	Возврат ДоступенТестовыйПериод;
	
КонецФункции

Процедура НастройкиОбщиеСервисДоставкиПоУмолчаниюДля1ССДЭК()
	
	ТипГрузоперевозкиСервис1ССДЭК = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1ССДЭК();
	
	РегистрыСведений.НастройкиОбщиеСервисДоставки.ИнициализацияЗначениеНастройки("ВесГрузовогоМеста",
		ТипГрузоперевозкиСервис1ССДЭК,
		0.1);
	
	РегистрыСведений.НастройкиОбщиеСервисДоставки.ИнициализацияЗначениеНастройки("ВесЕдиницыТовара",
		ТипГрузоперевозкиСервис1ССДЭК,
		0.1);
	
	РегистрыСведений.НастройкиОбщиеСервисДоставки.ИнициализацияЗначениеНастройки("ВысотаГрузовогоМеста",
		ТипГрузоперевозкиСервис1ССДЭК,
		10);

	РегистрыСведений.НастройкиОбщиеСервисДоставки.ИнициализацияЗначениеНастройки("ВысотаЕдиницыТовара",
		ТипГрузоперевозкиСервис1ССДЭК,
		10);
		
	РегистрыСведений.НастройкиОбщиеСервисДоставки.ИнициализацияЗначениеНастройки("ДлинаГрузовогоМеста",
		ТипГрузоперевозкиСервис1ССДЭК,
		10);

	РегистрыСведений.НастройкиОбщиеСервисДоставки.ИнициализацияЗначениеНастройки("ДлинаЕдиницыТовара",
		ТипГрузоперевозкиСервис1ССДЭК,
		10);
		
	РегистрыСведений.НастройкиОбщиеСервисДоставки.ИнициализацияЗначениеНастройки("ШиринаГрузовогоМеста",
		ТипГрузоперевозкиСервис1ССДЭК,
		10);

	РегистрыСведений.НастройкиОбщиеСервисДоставки.ИнициализацияЗначениеНастройки("ШиринаЕдиницыТовара",
		ТипГрузоперевозкиСервис1ССДЭК,
		10);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти