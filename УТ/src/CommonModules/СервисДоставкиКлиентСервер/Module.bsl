////////////////////////////////////////////////////////////////////////////////
// Подсистема "Сервис доставки".
// ОбщийМодуль.СервисДоставкиКлиентСервер.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет многоуровневую структуру данными из одноуровневой структуры.
//
// Параметры:
//  Параметры         - Структура - многоуровневая структура, получатель данных.
//  Данные            - Структура, СтрокаТаблицыЗначений - одноуровневая структура данных, источник данных.
//  ОписаниеДанных    - Массив из Строка - имена колонок строки таблицы значений, для структуры данный параметр игнорируется.
//  Префикс           - Строка - префикс данных источника.
//
Процедура ЗаполнитьСтруктуруПоЛинейнымДанным(Параметры, Данные, ОписаниеДанных = Неопределено, Префикс = "") Экспорт
	
	Для Каждого Параметр Из Параметры Цикл
		
		ИмяКолонки = Префикс + Параметр.Ключ;
		
		Если ТипЗнч(Параметр.Значение) = Тип("Структура") Тогда
			ЗаполнитьСтруктуруПоЛинейнымДанным(Параметр.Значение, Данные, ОписаниеДанных, ИмяКолонки);
		Иначе
			
			Если ТипЗнч(Данные) = Тип("Структура") Тогда
				
				Если Данные.Свойство(ИмяКолонки) Тогда
					Параметры[Параметр.Ключ] = Данные[ИмяКолонки];
				КонецЕсли;
				
			ИначеЕсли ОписаниеДанных.Найти(ИмяКолонки) <> Неопределено Тогда 
				
				Параметры[Параметр.Ключ] = Данные[ИмяКолонки];
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет многоуровневую структуру данными из одноуровневой структуры.
//
// Параметры:
//  Параметры - Структура - многоуровневая структура, источник данных.
//  Данные - Структура - одноуровневая структура данных, получатель данных.
//  Префикс - Строка - префикс данных получателя.
//  ПрефиксыИсключение - Массив из Строка - префиксы имен колонок, которые не должны попасть в линейную структуру
//
Процедура ЗаполнитьЛинейныеДанныеПоСтруктуре(Параметры, Данные, Префикс = "", Знач ПрефиксыИсключение = Неопределено) Экспорт

	Если ПрефиксыИсключение = Неопределено Тогда
		ПрефиксыИсключение = Новый Массив;
	КонецЕсли;
	
	Для Каждого Параметр Из Параметры Цикл
		
		ИмяКолонки = Префикс + Параметр.Ключ;

		ИсключитьКолонку = Ложь;
		Для Каждого ПрефиксИсключение Из ПрефиксыИсключение Цикл
			Если СтрНачинаетсяС(ИмяКолонки, ПрефиксИсключение) Тогда
				ИсключитьКолонку = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ИсключитьКолонку Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Параметр.Значение) = Тип("Структура") Тогда
			ЗаполнитьЛинейныеДанныеПоСтруктуре(Параметр.Значение, Данные, ИмяКолонки);
		Иначе
			Данные.Вставить(ИмяКолонки, Параметры[Параметр.Ключ]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает идентификатор сервиса интеграции.
// Возвращаемое значение:
//  Число - значение типа сервиса интеграции
//
Функция ТипСервисаИнтеграции1СEDI() Экспорт
	
	Возврат 1;
	
КонецФункции

// Возвращает идентификатор сервиса интеграции.
// Возвращаемое значение:
//  Число - значение типа сервиса интеграции
//
Функция ТипСервисаИнтеграции1СЭлемент() Экспорт
	
	Возврат 2;
	
КонецФункции

// Возвращает идентификатор сервиса интеграции.
// 
// Параметры:
//  ТипГрузоперевозки - Число - Тип грузоперевозки
// 
// Возвращаемое значение:
//  Число - Идентификатор типа сервиса интеграции
Функция ТипСервисаИнтеграции(ТипГрузоперевозки) Экспорт
	
	ТипСервисаИнтеграции = ТипСервисаИнтеграции1СEDI();
	
	Если ЭтоСДЭК(ТипГрузоперевозки) Тогда
		ТипСервисаИнтеграции = ТипСервисаИнтеграции1СЭлемент();
	КонецЕсли;
	
	Возврат ТипСервисаИнтеграции;
	
КонецФункции

// Возвращает идентификатор типа грузоперевозки.
// Возвращаемое значение:
//	Число - значение типа грузоперевозки
//
Функция ТипГрузоперевозкиСервис1СДоставка() Экспорт
	
	Возврат 1;
	
КонецФункции

// Возвращает идентификатор типа грузоперевозки.
// Возвращаемое значение:
//	Число - значение типа грузоперевозки
//
Функция ТипГрузоперевозкиСервис1СКурьер() Экспорт
	
	Возврат 2;
	
КонецФункции

// Возвращает идентификатор типа грузоперевозки.
// Возвращаемое значение:
//	Число - значение типа грузоперевозки
//
Функция ТипГрузоперевозкиСервис1СКурьерика() Экспорт
	
	Возврат 3;
	
КонецФункции

// Возвращает идентификатор типа грузоперевозки.
// Возвращаемое значение:
//	Число - значение типа грузоперевозки
//
Функция ТипГрузоперевозкиСервис1ССДЭК() Экспорт
	
	Возврат 4;
	
КонецФункции

// Проверяет по значению принадлежность к грузоперевозчику Деловые линии.
// 
// Параметры:
//  ТипГрузоперевозки - Число, ПеречислениеСсылка.ТипыГрузоперевозки - Тип грузоперевозки
// 
// Возвращаемое значение:
//  Булево - Результат проверки
Функция ЭтоДеловыеЛинии(ТипГрузоперевозки) Экспорт
	
	Возврат ТипГрузоперевозки = ТипГрузоперевозкиСервис1СДоставка()
		Или ТипГрузоперевозки = ПредопределенноеЗначение("Перечисление.ТипыГрузоперевозки.ДеловыеЛинии");
	
КонецФункции

// Проверяет по значению принадлежность к грузоперевозчику Яндекс.Доставка.
// 
// Параметры:
//  ТипГрузоперевозки - Число, ПеречислениеСсылка.ТипыГрузоперевозки - Тип грузоперевозки
// 
// Возвращаемое значение:
//  Булево - Результат проверки
Функция ЭтоЯндексДоставка(ТипГрузоперевозки) Экспорт
	
	Возврат ТипГрузоперевозки = ТипГрузоперевозкиСервис1СКурьер()
		Или ТипГрузоперевозки = ПредопределенноеЗначение("Перечисление.ТипыГрузоперевозки.ЯндексДоставка");
	
КонецФункции

// Проверяет по значению принадлежность к грузоперевозчику 1С-Курьерика.
// 
// Параметры:
//  ТипГрузоперевозки - Число, ПеречислениеСсылка.ТипыГрузоперевозки - Тип грузоперевозки
// 
// Возвращаемое значение:
//  Булево - Результат проверки
Функция ЭтоКурьерика(ТипГрузоперевозки) Экспорт
	
	Возврат ТипГрузоперевозки = ТипГрузоперевозкиСервис1СКурьерика()
		Или ТипГрузоперевозки = ПредопределенноеЗначение("Перечисление.ТипыГрузоперевозки.Курьерика");
	
КонецФункции

// Проверяет по значению принадлежность к грузоперевозчику СДЭК.
// 
// Параметры:
//  ТипГрузоперевозки - Число, ПеречислениеСсылка.ТипыГрузоперевозки - Тип грузоперевозки
// 
// Возвращаемое значение:
//  Булево - Результат проверки
Функция ЭтоСДЭК(ТипГрузоперевозки) Экспорт
	
	Возврат ТипГрузоперевозки = ТипГрузоперевозкиСервис1ССДЭК()
		Или ТипГрузоперевозки = ПредопределенноеЗначение("Перечисление.ТипыГрузоперевозки.СДЭК");
	
КонецФункции

// Возвращает числовой идентификатор грузоперевозчика по перечислению.
// 
// Параметры:
//  ТипГрузоперевозки - ПеречислениеСсылка.ТипыГрузоперевозки - Тип грузоперевозки
// 
// Возвращаемое значение:
//  Число - Числовой идентификатор грузоперевозчика
Функция ЧисловойИдентификаторГрузоперевозчика(ТипГрузоперевозки) Экспорт
	
	Результат = ТипГрузоперевозки;
	
	Если ТипЗнч(ТипГрузоперевозки) <> Тип("ПеречислениеСсылка.ТипыГрузоперевозки") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипГрузоперевозки = ПредопределенноеЗначение("Перечисление.ТипыГрузоперевозки.ДеловыеЛинии") Тогда
		Результат = ТипГрузоперевозкиСервис1СДоставка();
	ИначеЕсли ТипГрузоперевозки = ПредопределенноеЗначение("Перечисление.ТипыГрузоперевозки.ЯндексДоставка") Тогда
		Результат = ТипГрузоперевозкиСервис1СКурьер();
	ИначеЕсли ТипГрузоперевозки = ПредопределенноеЗначение("Перечисление.ТипыГрузоперевозки.Курьерика") Тогда
		Результат = ТипГрузоперевозкиСервис1СКурьерика();
	ИначеЕсли ТипГрузоперевозки = ПредопределенноеЗначение("Перечисление.ТипыГрузоперевозки.СДЭК") Тогда
		Результат = ТипГрузоперевозкиСервис1ССДЭК();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает перечисление соответствующее грузоперевозчику по числу.
// 
// Параметры:
//  ТипГрузоперевозки - Число - Числовой идентификатор грузоперевозчика
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыГрузоперевозки - Тип грузоперевозки
Функция ПеречислениеГрузоперевозчика(ТипГрузоперевозки) Экспорт
	
	Результат = ТипГрузоперевозки;
	
	Если ТипЗнч(ТипГрузоперевозки) <> Тип("Число") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипГрузоперевозки = ТипГрузоперевозкиСервис1СДоставка() Тогда
		Результат = ПредопределенноеЗначение("Перечисление.ТипыГрузоперевозки.ДеловыеЛинии");
	ИначеЕсли ТипГрузоперевозки = ТипГрузоперевозкиСервис1СКурьер() Тогда
		Результат = ПредопределенноеЗначение("Перечисление.ТипыГрузоперевозки.ЯндексДоставка");
	ИначеЕсли ТипГрузоперевозки = ТипГрузоперевозкиСервис1СКурьерика() Тогда
		Результат = ПредопределенноеЗначение("Перечисление.ТипыГрузоперевозки.Курьерика");
	ИначеЕсли ТипГрузоперевозки = ТипГрузоперевозкиСервис1ССДЭК() Тогда
		Результат = ПредопределенноеЗначение("Перечисление.ТипыГрузоперевозки.СДЭК");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив типов документов, используемых в качестве оснований для заказов на доставку
// сервиса Курьерика.
//
// Возвращаемое значение:
//	Массив Из Тип - массив типов документов.
//
Функция ТипыДокументовОснованийКурьерика() Экспорт
	
	МассивТипов = Новый Массив;
	
	СервисДоставкиКлиентСерверПереопределяемый.ПриОпределенииТиповДокументовОснованийКурьерика(МассивТипов);
	
	Возврат МассивТипов;
	
КонецФункции
	
// Возвращает представление сервиса по идентификатору или перечислению типа грузоперевозки.
// 
// Параметры:
//  ТипГрузоперевозки - Число, ПеречислениеСсылка.ТипыГрузоперевозки - Тип грузоперевозки.
//  ПолноеПредставление - Булево - Признак полного представления
// 
// Возвращаемое значение:
//  Строка - представление типа грузоперевозки.
Функция ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки, ПолноеПредставление = Истина) Экспорт
	
	Результат = "";
	
	Если ЭтоДеловыеЛинии(ТипГрузоперевозки) Тогда
		Если ПолноеПредставление Тогда
			Результат = НСтр("ru = 'Деловые линии (1C:Доставка)'");
		Иначе
			Результат = НСтр("ru = 'Деловые линии'");
		КонецЕсли;
	ИначеЕсли ЭтоЯндексДоставка(ТипГрузоперевозки) Тогда
		Если ПолноеПредставление Тогда
			Результат = НСтр("ru = 'Яндекс.Доставка (1C:Курьер)'");
		Иначе
			Результат = НСтр("ru = 'Яндекс.Доставка'");
		КонецЕсли;
	ИначеЕсли ЭтоКурьерика(ТипГрузоперевозки) Тогда
		Если ПолноеПредставление Тогда
			Результат = НСтр("ru = 'Собственная курьерская служба (1C-Курьерика)'");
		Иначе
			Результат = НСтр("ru = 'Собственная курьерская служба'");
		КонецЕсли;
	ИначеЕсли ЭтоСДЭК(ТипГрузоперевозки) Тогда
		Если ПолноеПредставление Тогда
			Результат = НСтр("ru = '1C:СДЭК'");
		Иначе
			Результат = НСтр("ru = 'СДЭК'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает логотип сервиса доставки.
// 
// Параметры:
//  ТипГрузоперевозки - Число - Тип грузоперевозки
// 
// Возвращаемое значение:
//  Картинка - Картинка - Логотип сервиса доставки
Функция ЛоготипГрузоперевозчика(ТипГрузоперевозки) Экспорт
	
	Картинка = Новый Картинка;
	
	Если ЭтоКурьерика(ТипГрузоперевозки) Тогда
		Картинка = БиблиотекаКартинок.ЛоготипСервисДоставкиКурьерика;
	ИначеЕсли ЭтоСДЭК(ТипГрузоперевозки) Тогда
		Картинка = БиблиотекаКартинок.ЛоготипСервисДоставкиСДЭК;
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции

// Возвращает имя формы сервиса доставки.
// 
// Параметры:
//  ТипГрузоперевозки - Число - Тип грузоперевозки
//  Основания - СписокЗначений Из ОпределяемыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - Документы основания
// 
// Возвращаемое значение:
//  Строка - Имя формы сервиса доставки
Функция ИмяФормыСервисаДоставки(ТипГрузоперевозки, Основания = Неопределено) Экспорт
	
	ИмяФормы = "КарточкаЗаказа";
	
	Основания = ?(Основания = Неопределено, Новый СписокЗначений, Основания);
	
	Если ЭтоКурьерика(ТипГрузоперевозки) Тогда
		Если Основания.Количество() > 1 Тогда
			ИмяФормы = "ГрупповоеОформлениеЗаказов";
		Иначе
			ИмяФормы = "КарточкаЗаказаКурьерика";
		КонецЕсли;
	ИначеЕсли ЭтоСДЭК(ТипГрузоперевозки) Тогда
		ИмяФормы = "КарточкаЗаказаСДЭК";
	КонецЕсли;
	
	Возврат ИмяФормы;
	
КонецФункции

// Идентификатор грузоперевозчика по умолчанию.
// 
// Параметры:
//  ТипГрузоперевозки - Число - Тип грузоперевозки
// 
// Возвращаемое значение:
//  Строка - Идентификатор грузоперевозчика по умолчанию
Функция ИдентификаторГрузоперевозчика(ТипГрузоперевозки) Экспорт
	
	Результат = "";
	
	Если ЭтоДеловыеЛинии(ТипГрузоперевозки) Тогда
		Результат = "000000001";
	ИначеЕсли ЭтоЯндексДоставка(ТипГрузоперевозки) Тогда
		Результат = "000000003";
	ИначеЕсли ЭтоКурьерика(ТипГрузоперевозки) Тогда
		Результат = "000000004";
	ИначеЕсли ЭтоСДЭК(ТипГрузоперевозки) Тогда
		Результат = "delivery_CDEK";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Адрес страницы отслеживания Заказа на доставку для сервиса.
// 
// Параметры:
//  ТипГрузоперевозки - Число, ПеречислениеСсылка.ТипыГрузоперевозки - Тип перевозки
//  ТрекНомер -Число - Трек номер заказа
// 
// Возвращаемое значение:
//  Неопределено, Строка - Адрес страницы заказа на доставку
Функция АдресСтраницыЗаказаНаДоставку(ТипГрузоперевозки, ТрекНомер) Экспорт
	
	Если Не ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЭтоДеловыеЛинии(ТипГрузоперевозки) Тогда
		Возврат АдресСтраницыЗаказаНаДоставку1СДоставка(ТрекНомер);
	ИначеЕсли ЭтоКурьерика(ТипГрузоперевозки) Тогда
		 Возврат АдресСтраницыЗаказаНаДоставку1СКурьерика(ТрекНомер);
	ИначеЕсли ЭтоСДЭК(ТипГрузоперевозки) Тогда
		 Возврат АдресСтраницыЗаказаНаДоставку1ССДЭК(ТрекНомер);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает ссылку на web-страницу заказа 1С:Доставка по переданному трек-номеру.
// 
// Параметры:
//	Идентификатор - Строка - идентификатор заказа.
//
// Возвращаемое значение:
//	Строка - адрес web-страницы заказа.
//
Функция АдресСтраницыЗаказаНаДоставку1СДоставка(Идентификатор) Экспорт
	
	Возврат СтрШаблон("https://www.dellin.ru/cabinet/orders/%1/", Идентификатор);
	
КонецФункции

// Возвращает ссылку на web-страницу заказа 1С-Курьерика по переданному трек-номеру.
// 
// Параметры:
//  ТрекНомер - Строка - трек-номер заказа.
// 
// Возвращаемое значение:
//  Строка - адрес web-страницы заказа.
Функция АдресСтраницыЗаказаНаДоставку1СКурьерика(ТрекНомер) Экспорт
	
	Возврат СтрШаблон("https://app.courierica.ru/#/order/%1", ТрекНомер);
	
КонецФункции

// Возвращает ссылку на web-страницу заказа 1С:СДЭК по переданному трек-номеру.
// 
// Параметры:
//  ТрекНомер - Строка - Трек-номер заказа.
// 
// Возвращаемое значение:
//  Строка - Адрес web-страницы заказа
Функция АдресСтраницыЗаказаНаДоставку1ССДЭК(ТрекНомер) Экспорт
	
	Возврат СтрШаблон("https://lk.cdek.ru/order-history/%1/view", ТрекНомер);
	
КонецФункции

// Возвращает ссылку на web-страницу настройки опции 1С-Курьерика.
// Возвращаемое значение:
//	Строка - адрес web-страницы настройки опции.
//
Функция АдресСтраницыОпцияКурьерика() Экспорт
	
	Возврат "https://portal.1c.ru/application/list/1C-Courierika";
	
КонецФункции

// Варианты времени отгрузки.
// 
// Возвращаемое значение:
//  Структура - Варианты времени отгрузки. Содержит свойства:
//		* КакМожноСкорее - Число - устанавливается в 0
//		* ВОпределенноеВремя - Число - устанавливается в 1
//		* ВТечениеДня - Число - устанавливается в 2
//
Функция ВариантыВремениОтгрузки() Экспорт
	
	ВариантыВремениОтгрузки = Новый Структура();
	ВариантыВремениОтгрузки.Вставить("КакМожноСкорее", 0);
	ВариантыВремениОтгрузки.Вставить("ВОпределенноеВремя", 1);
	ВариантыВремениОтгрузки.Вставить("ВТечениеДня", 2);
	
	Возврат ВариантыВремениОтгрузки;
	
КонецФункции

// Варианты времени отгрузки списком.
// 
// Возвращаемое значение:
//  СписокЗначений из Строка - Список вариантов времени отгрузки
Функция СписокВариантовВремениОтгрузки() Экспорт
	
	ВариантыВремениОтгрузки = ВариантыВремениОтгрузки();

	Список = Новый СписокЗначений();

	Список.Добавить(ВариантыВремениОтгрузки.КакМожноСкорее, НСтр("ru='как можно скорее'"));
	Список.Добавить(ВариантыВремениОтгрузки.ВОпределенноеВремя, НСтр("ru='в определенное время'"));
	Список.Добавить(ВариантыВремениОтгрузки.ВТечениеДня, НСтр("ru='в течение дня (дешевле)'"));
	
	Возврат Список;
	
КонецФункции

// Типы заказов СДЭК.
// 
// Возвращаемое значение:
//  Структура - Типы заказов СДЭК:
//   * ИнтернетМагазин - Число - 1
//   * Доставка - Число - 2
Функция ТипыЗаказовСДЭК() Экспорт
	
	ТипыЗаказов = Новый Структура();
	ТипыЗаказов.Вставить("ИнтернетМагазин", 1);
	ТипыЗаказов.Вставить("Доставка", 2);
	
	Возврат ТипыЗаказов;
	
КонецФункции

// Варианты типы заказов СДЭК списком.
// 
// Возвращаемое значение:
//  СписокЗначений из Строка - Список типов заказов СДЭК
Функция СписокТиповЗаказовСДЭК() Экспорт
	
	ТипыЗаказов = ТипыЗаказовСДЭК();

	Список = Новый СписокЗначений();

	Список.Добавить(ТипыЗаказов.ИнтернетМагазин, НСтр("ru='Интернет магазин'"));
	Список.Добавить(ТипыЗаказов.Доставка, НСтр("ru='Доставка'"));
	
	Возврат Список;
	
КонецФункции

// Виды печатных форм документов.
// 
// Возвращаемое значение:
//  Соответствие из Строка.
//
Функция ВидыПечатныхФормДокументов() Экспорт
	
	Результат = Новый Соответствие();
	Результат.Вставить("bill", НСтр("ru = 'Счет'"));
	Результат.Вставить("order", НСтр("ru = 'Накладная'"));
	Результат.Вставить("invoice", НСтр("ru = 'Счет-фактура'"));
	Результат.Вставить("giveout", НСтр("ru = 'Накладная на выдачу'"));
	
	Возврат Результат;
	
КонецФункции

// Актуальная версия.
// 
// Возвращаемое значение:
//  Число - Актуальная версия формата хранения данных в шаблоне
Функция ШаблоныАктуальнаяВерсия() Экспорт

	Возврат 1;

КонецФункции

// Хранимое количество шаблонов.
// 
// Возвращаемое значение:
//  Число - Хранимое количество
Функция ШаблоныХранимоеКоличество() Экспорт

	Возврат 10;

КонецФункции

// Возвращает идентификатор режима мастера
// 
// Возвращаемое значение:
//  Число - идентификатор режима мастера
//
Функция РежимМастераНовый() Экспорт
	
	Возврат 0;
	
КонецФункции

// Возвращает идентификатор режима мастера
// 
// Возвращаемое значение:
//  Число - идентификатор режима мастера
//
Функция РежимМастераЧерновик() Экспорт
	
	Возврат 1;
	
КонецФункции

// Возвращает идентификатор режима мастера
// 
// Возвращаемое значение:
//  Число - идентификатор режима мастера
//
Функция РежимМастераЗарегистрирован() Экспорт
	
	Возврат 2;
	
КонецФункции

// Способ отгрузки груза отправителем перевозчику. От адреса.
// 
// Возвращаемое значение:
//  Число - идентификатор способа отгрузки
//
Функция СпособОтгрузкиОтАдреса() Экспорт
	
	Возврат 2;
	
КонецФункции

// Способ отгрузки груза отправителем перевозчику. От терминала.
// 
// Возвращаемое значение:
//  Число - идентификатор способа отгрузки
//
Функция СпособОтгрузкиОтТерминала() Экспорт
	
	Возврат 1;
	
КонецФункции

// Способ доставки груза перевозчиком до получателя. До адреса.
// 
// Возвращаемое значение:
//  Число - идентификатор способа доставки
//
Функция СпособДоставкиДоАдреса() Экспорт
	
	Возврат 2;
	
КонецФункции

// Способ доставки груза перевозчиком до получателя. До терминала.
// 
// Возвращаемое значение:
//  Число - идентификатор способа доставки
//
Функция СпособДоставкиДоТерминала() Экспорт
	
	Возврат 1;
	
КонецФункции

// Строка содержит только цифры.
// Параметры:
//  ПроверяемаяСтрока - Строка - Строка для проверки.
// 
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ТолькоЦифры(Знач ПроверяемаяСтрока) Экспорт
	
	ЛишниеСимволы = СтрСоединить(СтрРазделить(ПроверяемаяСтрока, "0123456789"), "");
	Результат = СтрСоединить(СтрРазделить(ПроверяемаяСтрока, ЛишниеСимволы), "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Словарь

// Имя процедуры менеджер длительных операций.
// 
// Возвращаемое значение:
//  Строка - Имя процедуры менеджер длительных операций
Функция ИмяПроцедурыМенеджерДлительныхОпераций() Экспорт
	
	Возврат "МенеджерДлительныхОпераций";
	
КонецФункции

// Имя процедуры завершения менеджер длительных операций.
// 
// Возвращаемое значение:
//  Строка - Имя процедуры менеджер длительных операций
Функция ИмяПроцедурыЗавершенияМенеджераДлительныхОпераций() Экспорт
	
	Возврат "ВыполнитьЗапросЗавершение";
	
КонецФункции

Функция ИмяПроцедурыПолучитьЗаказНаДоставку() Экспорт
	
	Возврат "ПолучитьЗаказНаДоставку";
	
КонецФункции

Функция ИмяПроцедурыОбновитьЗаказНаДоставку() Экспорт
	
	Возврат "ОбновитьЗаказНаДоставку";
	
КонецФункции

Функция ИмяПроцедурыПолучитьМультизаказНаДоставку() Экспорт
	
	Возврат "ПолучитьМультизаказНаДоставку";
	
КонецФункции

Функция ИмяПроцедурыОбновитьМультизаказНаДоставку() Экспорт
	
	Возврат "ОбновитьМультизаказНаДоставку";
	
КонецФункции

Функция ИмяПроцедурыОтменитьМультизаказНаДоставку() Экспорт
	
	Возврат "ОтменитьМультизаказНаДоставку";
	
КонецФункции

Функция ИмяПроцедурыПолучитьУслугиТарифов() Экспорт
	
	Возврат "ПолучитьУслугиТарифов";
	
КонецФункции

Функция ИмяПроцедурыПолучитьТарифы() Экспорт
	
	Возврат "ПолучитьТарифы";
	
КонецФункции

Функция ИмяПроцедурыПолучитьТариф() Экспорт
	
	Возврат "ПолучитьТариф";
	
КонецФункции

Функция ИмяПроцедурыСоздатьИзменитьЗаказНаДоставку() Экспорт
	
	Возврат "СоздатьИзменитьЗаказНаДоставку";
	
КонецФункции

Функция ИмяПроцедурыОформитьЗаказНаДоставку() Экспорт
	
	Возврат "ОформитьЗаказНаДоставку";
	
КонецФункции

Функция ИмяМетодаСоздатьИзменитьОтправитьЗаказыНаДоставку() Экспорт
	
	Возврат "СоздатьИзменитьОтправитьЗаказыНаДоставку";
	
КонецФункции

Функция ИмяПроцедурыСоздатьМультизаказНаДоставку() Экспорт
	
	Возврат "СоздатьМультизаказНаДоставку";
	
КонецФункции

Функция ИмяПроцедурыОформитьМультизаказНаДоставку() Экспорт
	
	Возврат "ОформитьМультизаказНаДоставку";
	
КонецФункции

Функция ИмяПроцедурыДобавитьЗаказНаДоставкуВМультизаказ() Экспорт
	
	Возврат "ДобавитьЗаказНаДоставкуВМультизаказ";
	
КонецФункции

Функция ИмяПроцедурыОтменитьЗаказНаДоставку() Экспорт
	
	Возврат "ОтменитьЗаказНаДоставку";
	
КонецФункции

Функция ИмяПроцедурыПолучитьДоступныеПечатныеФормы() Экспорт
	
	Возврат "ПолучитьДоступныеПечатныеФормы";
	
КонецФункции

Функция ИмяПроцедурыПолучитьФайлыПечатныхФорм() Экспорт
	
	Возврат "ПолучитьФайлыПечатныхФорм";
	
КонецФункции

Функция ИмяПроцедурыПолучитьЗаказыНаДоставку() Экспорт
	
	Возврат "ПолучитьЗаказыНаДоставку";
	
КонецФункции

Функция ИмяПроцедурыПолучитьСостояния() Экспорт
	
	Возврат "ПолучитьСостояния";
	
КонецФункции

Функция ИмяПроцедурыПолучитьСостоянияЗаказовНаДоставку() Экспорт
	
	Возврат "ПолучитьСостоянияЗаказовНаДоставку";
	
КонецФункции

Функция ИмяПроцедурыПолучитьТипыГрузоперевозки() Экспорт
	
	Возврат "ПолучитьТипыГрузоперевозки";
	
КонецФункции

Функция ИмяПроцедурыПолучитьГрузоперевозчиков() Экспорт
	
	Возврат "ПолучитьГрузоперевозчиков";
	
КонецФункции

Функция ИмяПроцедурыПолучитьПунктыВыдачиКлиента() Экспорт
	
	Возврат "ПолучитьПунктыВыдачиКлиента";
	
КонецФункции

Функция ИмяПроцедурыПолучитьСостояниеПодключенияОрганизации() Экспорт
	
	Возврат "ПолучитьСостояниеПодключенияОрганизации";
	
КонецФункции

Функция ИмяПроцедурыПолучитьСписокКонтрагентов() Экспорт
	
	Возврат "ПолучитьСписокКонтрагентов";
	
КонецФункции

Функция ИмяПроцедурыОтправитьЗапросНаПолучениеРегистрационныхДанных() Экспорт
	
	Возврат "ОтправитьЗапросНаПолучениеРегистрационныхДанных";
	
КонецФункции

Функция ИмяПроцедурыОбновитьНастройкиКомпании() Экспорт
	
	Возврат "ОбновитьНастройкиКомпании";
	
КонецФункции

Функция ИмяПроцедурыПолучитьДоступныеТерминалы() Экспорт
	
	Возврат "ПолучитьДоступныеТерминалы";
	
КонецФункции

Функция ИмяПроцедурыПолучитьДанныеГрузоперевозчика() Экспорт
	
	Возврат "ПолучитьДанныеГрузоперевозчика";
	
КонецФункции

Функция ИмяПроцедурыПолучитьДанныеУслуги() Экспорт
	
	Возврат "ПолучитьДанныеУслуги";
	
КонецФункции

Функция ИмяПроцедурыПолучитьДанныеТерминала() Экспорт
	
	Возврат "ПолучитьДанныеТерминала";
	
КонецФункции

Функция ИмяПроцедурыПолучитьГрафикДвиженияЗаказа() Экспорт
	
	Возврат "ПолучитьГрафикДвиженияЗаказа";
	
КонецФункции

Функция ИмяПроцедурыПолучитьГрафикДвиженияЗаказаПоТрекНомеру() Экспорт
	
	Возврат "ПолучитьГрафикДвиженияЗаказаПоТрекНомеру";
	
КонецФункции

Функция ИмяПроцедурыПолучитьНастройкиАвторизации() Экспорт
	
	Возврат "ПолучитьНастройкиАвторизации";
	
КонецФункции

Функция ИмяПроцедурыПолучитьНаложенныеПлатежи() Экспорт
	
	Возврат "ПолучитьНаложенныеПлатежи";
	
КонецФункции

Функция ИмяПроцедурыЗаписатьНастройкиАвторизации() Экспорт
	
	Возврат "ЗаписатьНастройкиАвторизации";
	
КонецФункции

Функция ИмяПроцедурыПолучитьДанныеПоТарифу() Экспорт
	
	Возврат "ПолучитьДанныеПоТарифу";
	
КонецФункции

Функция ИмяПроцедурыДобавитьДокументОснованиеВВыбранныйЗаказНаДоставку() Экспорт
	
	Возврат "ДобавитьДокументОснованиеВВыбранныйЗаказНаДоставку";
	
КонецФункции

Функция ИмяПроцедурыУстановитьТарифПоУмолчанию() Экспорт
	
	Возврат "УстановитьТарифПоУмолчанию";
	
КонецФункции

Функция ИмяПроцедурыСброситьТарифПоУмолчанию() Экспорт
	
	Возврат "СброситьТарифПоУмолчанию";
	
КонецФункции

Функция ИмяПроцедурыСохранитьПараметрыТарифа() Экспорт
	
	Возврат "СохранитьПараметрыТарифа";
	
КонецФункции

Функция ИмяПроцедурыПолучитьДоступныеДляИзмененияРеквизиты() Экспорт
	
	Возврат "ПолучитьДоступныеДляИзмененияРеквизиты";
	
КонецФункции

Функция ИмяПроцедурыПолучитьСостояниеОпцииКурьерика() Экспорт
	
	Возврат "ПолучитьСостояниеОпцииКурьерика";
	
КонецФункции

// Имя процедуры скорректировать документы по частичной доставке.
// 
// Возвращаемое значение:
//  Строка - Имя процедуры скорректировать документы по частичной доставке
Функция ИмяПроцедурыСкорректироватьДокументыПоЧастичнойДоставке() Экспорт
	
	Возврат "СкорректироватьДокументыПоЧастичнойДоставке";
	
КонецФункции

// Возвращает имя регламентного задания "Получение наложенных платежей".
// 
// Возвращаемое значение:
//  Строка - имя регламентного задания "Получение наложенных платежей".
//
Функция ИмяРегламентногоЗаданияПолучениеНаложенныхПлатежей() Экспорт
	
	Возврат "СинхронизацияССервисомИнтеграцииСервисДоставки";
	
КонецФункции

// Имя процедуры выполнить загрузку данных по наложенным платежам.
// 
// Возвращаемое значение:
//  Строка - Имя процедуры выполнить загрузку данных по наложенным платежам
//
Функция ИмяПроцедурыВыполнитьЗагрузкуДанныхПоНаложеннымПлатежам() Экспорт
	
	Возврат "ВыполнитьЗагрузкуДанныхПоНаложеннымПлатежам";
	
КонецФункции

// Имя процедуры получения журнала заказов на доставку из сервиса.
// 
// Возвращаемое значение:
//  Строка - Имя процедуры.
//
Функция ИмяПроцедурыПолучитьЖурналЗаказовНаДоставкуИзСервиса() Экспорт
	
	Возврат "ПолучитьЖурналЗаказовНаДоставкуИзСервиса";
	
КонецФункции

// Имя процедуры получения списка состояний заказов на доставку из сервиса.
// 
// Возвращаемое значение:
//  Строка - Имя процедуры.
//
Функция ИмяПроцедурыПолучитьСписокСостоянийЗаказовИзСервиса() Экспорт
	
	Возврат "ПолучитьСписокСостоянийЗаказовИзСервиса";
	
КонецФункции

// Имя процедуры получения печатной формы из сервиса.
// 
// Возвращаемое значение:
//  Строка - Имя процедуры.
//
Функция ИмяПроцедурыПолучитьПечатнуюФормуИзСервиса() Экспорт
	
	Возврат "ПолучитьПечатнуюФормуИзСервиса";
	
КонецФункции

Функция ИмяПроцедурыПолучитьСписокКурьеров() Экспорт
	
	Возврат "ПолучитьСписокКурьеров";
	
КонецФункции

Функция ИмяПроцедурыВыполнитьСинхронизациюЧастичнойДоставки() Экспорт
	
	Возврат "ВыполнитьСинхронизациюЧастичнойДоставки";
	
КонецФункции

// Имя метода получить населенные пункты.
// 
// Возвращаемое значение:
//  Строка - Имя метода получить населенные пункты
Функция ИмяМетодаПолучитьНаселенныеПункты() Экспорт
	
	Возврат "ПолучитьНаселенныеПункты";
	
КонецФункции

// Имя метода получить тарифы и услуги.
// 
// Возвращаемое значение:
//  Строка - Имя метода получить тарифы и услуги
Функция ИмяМетодаПолучитьТарифыИУслуги() Экспорт
	
	Возврат "ПолучитьТарифыИУслуги";
	
КонецФункции

// Имя метода синхронизировать данные регистров по частичной доставке.
// 
// Возвращаемое значение:
//  Строка - Имя метода получить населенные пункты
Функция ИмяМетодаСинхронизироватьДанныеРегистровПоЧастичнойДоставке() Экспорт
	
	Возврат "СинхронизироватьДанныеРегистровПоЧастичнойДоставке";
	
КонецФункции

// Имя сервиса сопровождения, зарегистрированного на портале 1С для 1С-Курьерика
// 
// Возвращаемое значение:
//  Строка - Имя сервиса сопровождения - 1с курьерика
Функция ИмяСервисаСопровождения1СКурьерика() Экспорт
	
	Возврат "1C-Courierika";
	
КонецФункции

#КонецОбласти

#Область КонструкторыДанных

// Новые параметры менеджера длительных операций.
// 
// Возвращаемое значение:
//  Структура - Новые параметры менеджера длительных операций:
//   * ИмяПроцедуры - Строка - 
//   * ИмяПроцедурыЗавершения - Строка - 
//   * ТекстСообщения - Строка - 
//   * ВыводитьОкноОжидания - Булево - 
//   * ВыводитьСообщения - Булево - Вывод сообщений, подготовленных во время длительных операций
//   * ОжидатьЗавершение - Число - 
//   * ЗапуститьВФоне - Булево - 
//   * Очередь - СписокЗначений из Произвольный
//   * ОбработкаРезультатаНаСервере - Булево - 
//   * ФоновоеЗадание - Неопределено
//                    - см. ДлительныеОперации.ВыполнитьФункцию
//   * КлючФоновогоЗадания - Произвольный, Неопределено - 
//   * ЭтоФункция - Булево - 
//   * ОтменитьАктивные - Булево - Если Истина, активные фоновые задания с идентичным ключом фонового задания будут отменены
//   * ОформитьЗаказ - Булево - Если Истина, необходимо будет оформить заказ
//   * ЗакрытьПослеЗавершенияОперации - Булево - Если Истина, закрыть форму после завершения операции
Функция НовыеПараметрыМенеджераДлительныхОпераций() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ИмяПроцедуры", ИмяПроцедурыМенеджерДлительныхОпераций());
	Параметры.Вставить("ИмяПроцедурыЗавершения", ИмяПроцедурыЗавершенияМенеджераДлительныхОпераций());
	Параметры.Вставить("ТекстСообщения", НСтр("ru = 'Обработка данных.'"));
	Параметры.Вставить("ВыводитьОкноОжидания", Истина);
	Параметры.Вставить("ВыводитьСообщения", Истина);
	Параметры.Вставить("ОжидатьЗавершение", 0);
	Параметры.Вставить("ЗапуститьВФоне", Истина);
	Параметры.Вставить("Очередь", Новый СписокЗначений);
	Параметры.Вставить("ОбработкаРезультатаНаСервере", Ложь);
	Параметры.Вставить("ФоновоеЗадание", Неопределено);
	Параметры.Вставить("КлючФоновогоЗадания", Неопределено);
	Параметры.Вставить("ЭтоФункция", Ложь);
	Параметры.Вставить("ОтменитьАктивные", Ложь);
	Параметры.Вставить("ОформитьЗаказ", Ложь);
	Параметры.Вставить("ЗакрытьПослеЗавершенияОперации", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры для создания нового шаблона.
// 
// Возвращаемое значение:
//  Структура - параметры шаблона. Содержит свойства:
//  * Версия - число - см. описание ШаблоныАктуальнаяВерсия
//   * ТипГрузоперевозки - число - тип грузоперевозки
//   * Представление - Строка - представление шаблона
//   * Значение - Строка - данные шаблона
Функция НовыеПараметрыШаблона() Экспорт

	Параметры = Новый Структура;
	
	Параметры.Вставить("Версия", ШаблоныАктуальнаяВерсия());
	Параметры.Вставить("ТипГрузоперевозки", 0);
	Параметры.Вставить("Представление", НСтр("ru = 'Новый шаблон'"));
	Параметры.Вставить("Значение", "");
	
	Возврат Параметры;

КонецФункции

// Возвращает параметры объекта данных сервиса доставки.
// 
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса:
//   * Идентификатор - Строка - 
//   * ТрекНомер - Строка - 
//   * НомерЗаказа - Строка - 
//   * ДатаЗаказа - Дата - 
//   * ДатаСозданияЗаказа - Дата - 
//   * ДатаОтгрузки - Дата - 
//   * ВариантВремениОтгрузки - Число - 
//   * ДатаДоставки - Дата - 
//   * ОбязательныеРеквизитыЗаполнены - Булево - 
//   * Проверен - Булево - 
//   * МультизаказДата - Дата - 
//   * МультизаказНомер - Строка - 
//   * МультизаказИдентификатор - Строка - 
//   * МультизаказТипНаименование - Строка - 
//   * МультизаказТипИдентификатор - Строка - 
//   * МультизаказПредставление - Строка - 
//   * ЭтоМультизаказ - Булево - 
//   * ПорядковыйНомер - Число - 
//   * НомерЗаказаДляПечати - Строка - 
//   * ДокументыОснования - Неопределено - 
//   * ДокументОснованиеПредставление - Строка - 
//   * Сумма - Число - 
//   * Отправитель - Неопределено - 
//   * ОтправительИНН - Строка - 
//   * ОтправительКПП - Строка - 
//   * ОтправительНаименование - Строка - 
//   * АдресОтгрузкиПредставление - Строка - 
//   * АдресОтгрузкиНаименование - Строка - 
//   * АдресОтгрузкиТипНаименование - Строка - 
//   * Получатель - Неопределено - 
//   * ПолучательИНН - Строка - 
//   * ПолучательКПП - Строка - 
//   * ПолучательНаименование - Строка - 
//   * АдресДоставкиПредставление - Строка - 
//   * АдресДоставкиНаименование - Строка - 
//   * АдресДоставкиТипНаименование - Строка - 
//   * ПунктВыдачиКлиентаКод - Строка - 
//   * ПунктВыдачиКлиентаНаименование - Строка - 
//   * ЗаборОтАдреса - Булево - 
//   * ДоставкаДоАдреса - Булево - 
//   * ПеревозчикНаименование - Строка - 
//   * ПеревозчикИдентификатор - Строка - 
//   * ТарифНаименование - Строка - 
//   * ТарифИдентификатор - Строка - 
//   * Плательщик - Неопределено - 
//   * ПлательщикИНН - Строка - 
//   * ПлательщикКПП - Строка - 
//   * ПлательщикНаименование - Строка - 
//   * Оплачен - Булево - 
//   * НаложенныйПлатежПолучен - Булево - 
//   * СуммаНаложенногоПлатежа - Число - 
//   * СуммаНаложенногоПлатежаДополнительный - Число - 
//   * НаложенныйПлатежВидОплаты - Число - 
//   * НаложенныйПлатежВидОплатыДополнительный - Число - 
//   * Состояние - Строка - 
//   * СостояниеИдентификатор - Число - 
//   * ВалютаКод - Строка - 
//   * ВалютаНаименование - Строка - 
//   * ДоступнаОтмена - Булево - 
//   * КоличествоГрузовыхМест - Число - 
//   * ГрузВес - Число - 
//   * ГрузОбъем - Число - 
//   * ГрузСтоимость - Число - 
//   * ОтправительКонтактноеЛицоИдентификатор - Неопределено - 
//   * ОтправительКонтактноеЛицоНаименование - Строка - 
//   * ОтправительКонтактноеЛицоEmail - Строка - 
//   * ОтправительКонтактноеЛицоТелефонПредставление - Строка - 
//   * ОтправительКонтактноеЛицоТелефонЗначение - Строка - 
//   * ОтправительКонтактноеЛицоТелефонДополнительныйПредставление - Строка - 
//   * ОтправительКонтактноеЛицоТелефонДополнительныйЗначение - Строка - 
//   * ПолучательКонтактноеЛицоИдентификатор - Неопределено - 
//   * ПолучательКонтактноеЛицоНаименование - Строка - 
//   * ПолучательКонтактноеЛицоEmail - Строка - 
//   * ПолучательКонтактноеЛицоТелефонПредставление - Строка - 
//   * ПолучательКонтактноеЛицоТелефонЗначение - Строка - 
//   * ПолучательКонтактноеЛицоТелефонДополнительныйПредставление - Строка - 
//   * ПолучательКонтактноеЛицоТелефонДополнительныйЗначение - Строка - 
Функция НовыйПараметрыЗаказаНаДоставкуДляСписка() Экспорт
	
	ПараметрыЗаказа = Новый Структура();
	
	ПараметрыЗаказа.Вставить("Идентификатор", "");
	ПараметрыЗаказа.Вставить("ТрекНомер", "");
	ПараметрыЗаказа.Вставить("НомерЗаказа", "");
	ПараметрыЗаказа.Вставить("ДатаЗаказа", Дата(1, 1, 1));
	ПараметрыЗаказа.Вставить("ДатаСозданияЗаказа", Дата(1, 1, 1));
	ПараметрыЗаказа.Вставить("ДатаОтгрузки", Дата(1, 1, 1));
	ПараметрыЗаказа.Вставить("ВариантВремениОтгрузки", 0); 
	ПараметрыЗаказа.Вставить("ДатаДоставки", Дата(1, 1, 1));
	ПараметрыЗаказа.Вставить("ОбязательныеРеквизитыЗаполнены", Ложь);
	ПараметрыЗаказа.Вставить("Проверен", Ложь);
	ПараметрыЗаказа.Вставить("МультизаказДата", Дата(1, 1, 1));
	ПараметрыЗаказа.Вставить("МультизаказНомер", "");
	ПараметрыЗаказа.Вставить("МультизаказИдентификатор", "");
	ПараметрыЗаказа.Вставить("МультизаказТипНаименование", "");
	ПараметрыЗаказа.Вставить("МультизаказТипИдентификатор", "");
	ПараметрыЗаказа.Вставить("МультизаказПредставление", "");
	ПараметрыЗаказа.Вставить("ЭтоМультизаказ", Ложь);
	ПараметрыЗаказа.Вставить("ПорядковыйНомер", 0);
	ПараметрыЗаказа.Вставить("НомерЗаказаДляПечати", "");
	ПараметрыЗаказа.Вставить("ДокументыОснования", Неопределено);
	ПараметрыЗаказа.Вставить("ДокументОснованиеПредставление", "");
	ПараметрыЗаказа.Вставить("Сумма", 0);
	ПараметрыЗаказа.Вставить("Отправитель", Неопределено);
	ПараметрыЗаказа.Вставить("ОтправительИНН", "");
	ПараметрыЗаказа.Вставить("ОтправительКПП", "");
	ПараметрыЗаказа.Вставить("ОтправительНаименование", "");
	ПараметрыЗаказа.Вставить("АдресОтгрузкиПредставление", "");
	ПараметрыЗаказа.Вставить("АдресОтгрузкиНаименование", "");
	ПараметрыЗаказа.Вставить("АдресОтгрузкиТипНаименование", "");
	ПараметрыЗаказа.Вставить("Получатель", Неопределено);
	ПараметрыЗаказа.Вставить("ПолучательИНН", "");
	ПараметрыЗаказа.Вставить("ПолучательКПП", "");
	ПараметрыЗаказа.Вставить("ПолучательНаименование", "");
	ПараметрыЗаказа.Вставить("АдресДоставкиПредставление", "");
	ПараметрыЗаказа.Вставить("АдресДоставкиНаименование", "");
	ПараметрыЗаказа.Вставить("АдресДоставкиТипНаименование", "");
	ПараметрыЗаказа.Вставить("ПунктВыдачиКлиентаКод", "");
	ПараметрыЗаказа.Вставить("ПунктВыдачиКлиентаНаименование", "");
	ПараметрыЗаказа.Вставить("ЗаборОтАдреса", Ложь);
	ПараметрыЗаказа.Вставить("ДоставкаДоАдреса", Ложь);
	ПараметрыЗаказа.Вставить("ПеревозчикНаименование", "");
	ПараметрыЗаказа.Вставить("ПеревозчикИдентификатор", "");
	ПараметрыЗаказа.Вставить("ТарифНаименование", "");
	ПараметрыЗаказа.Вставить("ТарифИдентификатор", "");
	ПараметрыЗаказа.Вставить("Плательщик", Неопределено);
	ПараметрыЗаказа.Вставить("ПлательщикИНН", "");
	ПараметрыЗаказа.Вставить("ПлательщикКПП", "");
	ПараметрыЗаказа.Вставить("ПлательщикНаименование", "");
	ПараметрыЗаказа.Вставить("Оплачен", Ложь);
	ПараметрыЗаказа.Вставить("НаложенныйПлатежПолучен", Ложь);
	ПараметрыЗаказа.Вставить("СуммаНаложенногоПлатежа", 0);
	ПараметрыЗаказа.Вставить("СуммаНаложенногоПлатежаДополнительный", 0);
	ПараметрыЗаказа.Вставить("НаложенныйПлатежВидОплаты", 0);
	ПараметрыЗаказа.Вставить("НаложенныйПлатежВидОплатыДополнительный", 0);
	ПараметрыЗаказа.Вставить("Состояние", "");
	ПараметрыЗаказа.Вставить("СостояниеИдентификатор", 0);
	ПараметрыЗаказа.Вставить("ВалютаКод", "643");
	ПараметрыЗаказа.Вставить("ВалютаНаименование", "RUB");
	ПараметрыЗаказа.Вставить("ДоступнаОтмена", Ложь);
	ПараметрыЗаказа.Вставить("КоличествоГрузовыхМест", 0);
	ПараметрыЗаказа.Вставить("ГрузВес", 0);
	ПараметрыЗаказа.Вставить("ГрузОбъем", 0);
	ПараметрыЗаказа.Вставить("ГрузСтоимость", 0);
	
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоИдентификатор", Неопределено);
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоНаименование", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоEmail", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонПредставление", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонЗначение", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонДополнительныйПредставление", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонДополнительныйЗначение", "");
	
	ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоИдентификатор", Неопределено);
	ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоНаименование", "");
	ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоEmail", "");
	ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонПредставление", "");
	ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонЗначение", "");
	ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонДополнительныйПредставление", "");
	ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонДополнительныйЗначение", "");

	Возврат ПараметрыЗаказа;
		
КонецФункции

// Возвращает параметры для записи данных заказа сервиса доставки.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса. Содержит свойства:
//   * Организация - Неопределено, ОпределяемыйТип.ОрганизацияСервисДоставки - организация-заказчик перевозки
//   * ТипГрузоперевозки - ПеречислениеСсылка.ТипыГрузоперевозки - Тип грузоперевозки
//   * ИдентификаторДокумента - УникальныйИдентификатор - Идентификатор заказа на доставку в сервисе интеграции
//   * Представление - Строка - Представление заказа на доставку
//   * ДокументыОснования - Массив Из ДокументСсылка.
//   * СостояниеИдентификатор - Число - Идентификатор (код) состояния заказа на доставку в сервисе интеграции
//   * СостояниеПредставление - Строка - Представление состояния заказа на доставку в сервисе интеграции
//   * Номер - строка - Номер заказа на доставку, назначенный в сервисе интеграции
//   * Дата - строка - Дата регистрации заказа на доставку в сервисе интеграции
Функция НовыйПараметрыЗаписиДанныхЗаказаСервисаДоставки() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Организация", Неопределено);
	Результат.Вставить("ТипГрузоперевозки", ПредопределенноеЗначение("Перечисление.ТипыГрузоперевозки.ПустаяСсылка"));
	Результат.Вставить("ИдентификаторДокумента", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Результат.Вставить("Представление", "");
	Результат.Вставить("ДокументыОснования", Новый Массив);
	Результат.Вставить("СостояниеИдентификатор", 0);
	Результат.Вставить("СостояниеПредставление", НСтр("ru = 'Черновик'"));
	Результат.Вставить("Номер", "");
	Результат.Вставить("Дата", '00010101');
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
// 
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
Функция НовыйПараметрыЗапросаПолучитьНаселенныеПункты() Экспорт
	
	Результат = Новый Структура;
	
	// Страничный отбор.
	Результат.Вставить("Страница", 1); // page
	Результат.Вставить("РазмерСтраницы", 50); // size
	Результат.Вставить("Сортировка", "Desc"); // sortBy
	
	// Данные
	Результат.Вставить("СтрокаПоиска", "");  // substrings
	Результат.Вставить("ТолькоТерминалы", Ложь); // onlyTerminals
	Результат.Вставить("ЭтоФормаПунктов", Ложь); // isFormPoints
	Результат.Вставить("Направление", 0); // typeOperation
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыПакетаДлительныхОпераций() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПередОбработкойПакета", "");
	Результат.Вставить("ПослеОбработкиПакета", "");
	Результат.Вставить("ИдентфикаторыФЗ", Новый массив);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПредставлениеОбъектов

// Формирование представления заказа на доставку.
// 
// Параметры:
//  Параметры - Структура - содержит значение полей, включаемых в Представление:
//   * НомерЗаказа - Строка - номер заказа
//   * ДатаЗаказа - Дата - дата заказа
//  ПолноеНаименование - Булево - Полное наименование
// 
// Возвращаемое значение:
//  Строка - Представление заказа на доставку
//
Функция ПредставлениеЗаказаНаДоставку(Параметры, ПолноеНаименование = Ложь) Экспорт
	
	ПредставлениеДляСписка = НСтр("ru = 'Заказ на доставку'");
	
	Если Параметры.НомерЗаказа <> "" Тогда
		ПредставлениеДляСписка = ПредставлениеДляСписка + " " + Параметры.НомерЗаказа;
	КонецЕсли;
		
	Если ПолноеНаименование Тогда
		
		ПредставлениеДляСписка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 от %2'"),
			ПредставлениеДляСписка,
			Формат(Параметры.ДатаЗаказа, "ДЛФ=Д"));
		
	КонецЕсли;
	
	Возврат ПредставлениеДляСписка;
	
КонецФункции

// Представление способа отгрузки.
// 
// Параметры:
//  СпособОтгрузки Способ отгрузки
// 
// Возвращаемое значение:
//  Строка - Представление способа отгрузки
Функция ПредставлениеСпособаОтгрузки(СпособОтгрузки) Экспорт
	
	Результат = "";
	
	Если СпособОтгрузки = СпособОтгрузкиОтТерминала() Тогда
		Результат = НСтр("ru = 'Самопривоз'");
	ИначеЕсли СпособОтгрузки = СпособОтгрузкиОтАдреса() Тогда
		Результат = НСтр("ru = 'Забор от адреса'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Представление способа доставки.
// 
// Параметры:
//  СпособДоставки Способ доставки
// 
// Возвращаемое значение:
//  Строка - Представление способа доставки
Функция ПредставлениеСпособаДоставки(СпособДоставки) Экспорт
	
	Результат = "";
	
	Если СпособДоставки = СпособДоставкиДоТерминала() Тогда
		Результат = НСтр("ru = 'Самовывоз'");
	ИначеЕсли СпособДоставки = СпособДоставкиДоАдреса() Тогда
		Результат = НСтр("ru = 'Доставка до адреса'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Параметры:
//	ПредставлениеЗначения - Строка
// Возвращаемое значение:
//	Число
Функция СпособОпределенияКонтактногоЛицаНеЗадан(ПредставлениеЗначения = "") Экспорт
	
	ПредставлениеЗначения = "";
	Возврат 0;
	
КонецФункции

// Параметры:
//	ПредставлениеЗначения - Строка
// Возвращаемое значение:
//	Число
Функция СпособОпределенияКонтактногоЛицаВручную(ПредставлениеЗначения = "") Экспорт
	
	ПредставлениеЗначения = НСтр("ru='Указывать вручную'");
	Возврат 1;
	
КонецФункции

// Параметры:
//	ПредставлениеЗначения - Строка
// Возвращаемое значение:
//	Число
Функция СпособОпределенияКонтактногоЛицаОтветственныйЗаДоставку(ПредставлениеЗначения = "") Экспорт
	
	ПредставлениеЗначения = НСтр("ru='Ответственный за доставку'");
	Возврат 2;
	
КонецФункции

// Получатель в свободной форме.
// 
// Возвращаемое значение:
//  Строка - Получатель в свободной форме
Функция ПолучательВСвободнойФорме() Экспорт
	
	Возврат НСтр("ru = 'В свободной форме'");
	
КонецФункции

// Маска номера телефона по умолчанию.
// 
// Возвращаемое значение:
//  Строка - Маска номера телефона по умолчанию
Функция МаскаНомераТелефонаПоУмолчанию() Экспорт
	
	Возврат "+7 (999) 999-99-99";
	
КонецФункции

// Имя грузового места.
// 
// Параметры:
//  ИдентификаторГрузовогоМеста - Число, Строка - Идентификатор грузового места
// 
// Возвращаемое значение:
//  Строка - Имя грузового места
Функция ИмяГрузовогоМеста(ИдентификаторГрузовогоМеста) Экспорт
	Возврат СтрШаблон("%1 №%2", НСтр("ru = 'Место'"), ИдентификаторГрузовогоМеста);
КонецФункции

// Текст ошибки внутренняя ошибка сервиса.
// 
// Возвращаемое значение:
//  Строка - Текст ошибки внутренняя ошибка сервиса
Функция ТекстОшибкиВнутренняяОшибкаСервиса() Экспорт
	
	Возврат НСтр("ru = 'Внутренняя ошибка сервиса.'");
	
КонецФункции

// Определяет хост сервиса аутентификации.
//
// Параметры:
//  Домен - Число  - идентификатор домена.
//
// Возвращаемое значение:
//  Строка - хост подключения.
//
Функция ХостСервисаLogin(Домен) Экспорт


	Если Домен = 0 Тогда
		Возврат "login.1c.ru";
	Иначе
		Возврат "login.1c.eu";
	КонецЕсли;

КонецФункции

// Определяет роль заказчика перевозки.
// 
// Параметры:
//  ТипГрузоперевозки - число, ПеречислениеСсылка.ТипыГрузоперевозки - тип грузоперевозки
//  ОрганизацияБизнесСети - ОпределяемыйТип.ОрганизацияСервисДоставки - Организация - заказчик перевозки
//  Отправитель - определяемыйТип.УчастникГрузоперевозкиСервисДоставки - отправитель
//  Получатель - определяемыйТип.УчастникГрузоперевозкиСервисДоставки - получатель
//  ТекущаяРольЗаказчика - число - Идентификатор (Код) текущей роли заказчика перевозки
// 
// Возвращаемое значение:
//  Число - Идентификатор (Код) Роли заказчика перевозки
Функция ОпределитьРольЗаказчикаПеревозки(ТипГрузоперевозки, ОрганизацияБизнесСети, Отправитель, Получатель, ТекущаяРольЗаказчика = 1) Экспорт
	
	ЗаказчикРоль = ТекущаяРольЗаказчика;
	
	Если ЭтоСДЭК(ТипГрузоперевозки) Тогда
		Если ОрганизацияБизнесСети <> Неопределено Тогда
			Если ОрганизацияБизнесСети = Отправитель Тогда
				ЗаказчикРоль = 1;	// Отправитель
			ИначеЕсли ОрганизацияБизнесСети = Получатель Тогда
				ЗаказчикРоль = 2;	// Получатель
			Иначе
				ЗаказчикРоль = 4;	// Третья сторона
			КонецЕсли;
		Иначе
			ЗаказчикРоль = 4;	// Третья сторона
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаказчикРоль;
	
КонецФункции

#КонецОбласти