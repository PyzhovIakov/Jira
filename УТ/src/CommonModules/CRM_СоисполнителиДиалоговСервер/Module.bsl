
#Область ПрограммныйИнтерфейс

// Процедура создает элементы отображения соисполнителей в форме объекта.
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма объекта.
//  ПараметрыОблака	 - Структура, Неопределено		 - Содержит дополнительные параметры.
//
Процедура ОбновитьОблакоСоисполнителей(Форма, ПараметрыОблака = Неопределено) Экспорт
	
	ТолькоПросмотр = Форма.ТолькоПросмотр;
	Элементы = Форма.Элементы;
	
	МассивУдаляемых = Новый Массив;
	Для Каждого ЭлементСоисполнитель Из Элементы.ОблакоСоисполнителей.ПодчиненныеЭлементы Цикл
		Если Лев(ЭлементСоисполнитель.Имя, 21) = "СтрокаСоисполнителей_"
			 И НЕ ЭлементСоисполнитель.Имя = "СтрокаСоисполнителей_1" Тогда
			МассивУдаляемых.Добавить(ЭлементСоисполнитель);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементСоисполнитель Из Элементы.СтрокаСоисполнителей_1.ПодчиненныеЭлементы Цикл
		Если Лев(ЭлементСоисполнитель.Имя, 14) = "Соисполнитель_" Тогда
			МассивУдаляемых.Добавить(ЭлементСоисполнитель);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементСоисполнитель Из МассивУдаляемых Цикл
		Элементы.Удалить(ЭлементСоисполнитель);
	КонецЦикла;
	
	ПараметрыСоисполнителейЭтоСтруктура = (ТипЗнч(ПараметрыОблака) = Тип("Структура"));
	
	Если ПараметрыСоисполнителейЭтоСтруктура И ПараметрыОблака.Свойство("МаксДлинаПервойСтроки") Тогда
		МаксДлинаПервойСтроки = ПараметрыОблака.МаксДлинаПервойСтроки;
	Иначе	
		МаксДлинаПервойСтроки = 70;
	КонецЕсли;
	
	Если ПараметрыСоисполнителейЭтоСтруктура И ПараметрыОблака.Свойство("ДобавитьКСтроке") Тогда
		ДобавитьКСтроке = ПараметрыОблака.ДобавитьКСтроке;
	Иначе	
		ДобавитьКСтроке = 4;
	КонецЕсли;	
	
	МаксДлинаСтроки = МаксДлинаПервойСтроки + ДобавитьКСтроке;
	НомерЭлемента = 0;
	НомерСтрокиЭлементов = 1;
	ТекущаяДлинаСтроки = 0;
	ГруппаСоисполнителей = Элементы.СтрокаСоисполнителей_1;
	
	СписокСоисполнителей = Форма.СоисполнителиТЗ;
	
	Для Каждого СтрокаСоисполнителей Из СписокСоисполнителей Цикл
		
		НомерЭлемента = НомерЭлемента + 1;
		ПредставлениеСоисполнителя = Строка(СтрокаСоисполнителей.Значение);
		Если СтрДлина(ПредставлениеСоисполнителя) > 15 Тогда
			ПредставлениеСоисполнителя = Лев(ПредставлениеСоисполнителя, 15) + "...";
			ДлинаСоисполнителя = 15;
		ИначеЕсли СтрДлина(ПредставлениеСоисполнителя) > 10 Тогда
			ДлинаСоисполнителя = СтрДлина(ПредставлениеСоисполнителя);
		ИначеЕсли СтрДлина(ПредставлениеСоисполнителя) > 4 Тогда
			ДлинаСоисполнителя = СтрДлина(ПредставлениеСоисполнителя) + 1;
		Иначе
			ДлинаСоисполнителя = СтрДлина(ПредставлениеСоисполнителя) + 2;
		КонецЕсли;
		Если ВРЕГ(ПредставлениеСоисполнителя) = ПредставлениеСоисполнителя Тогда
			ДлинаСоисполнителя = ДлинаСоисполнителя + 2;
		КонецЕсли;	
		
		ТекущаяДлинаСтроки = ТекущаяДлинаСтроки + ДлинаСоисполнителя;
		
		Если (НомерСтрокиЭлементов = 1 И ТекущаяДлинаСтроки > МаксДлинаПервойСтроки)
			 Или (НомерСтрокиЭлементов > 1
			 И ТекущаяДлинаСтроки > МаксДлинаСтроки) Тогда
			
			ТекущаяДлинаСтроки = ДлинаСоисполнителя;
			НомерСтрокиЭлементов = НомерСтрокиЭлементов + 1;
			
			ГруппаСоисполнителей = Элементы.Добавить("СтрокаСоисполнителей_" + НомерСтрокиЭлементов,
				 Тип("ГруппаФормы"), ?(НомерСтрокиЭлементов = 1, Элементы.ПерваяСтрока, Элементы.ОблакоСоисполнителей));
			ГруппаСоисполнителей.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаСоисполнителей.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаСоисполнителей.ОтображатьЗаголовок = Ложь;
			ГруппаСоисполнителей.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаСоисполнителей.РастягиватьПоВертикали = Ложь;
			ГруппаСоисполнителей.Высота = 1;
			
		КонецЕсли;
		
		ГруппаЭлементаСоисполнитель = Элементы.Добавить("Соисполнитель_" + НомерЭлемента,
			 Тип("ГруппаФормы"), ГруппаСоисполнителей);
		ГруппаЭлементаСоисполнитель.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлементаСоисполнитель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаЭлементаСоисполнитель.ОтображатьЗаголовок = Ложь;
		ГруппаЭлементаСоисполнитель.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаЭлементаСоисполнитель.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		
		ГруппаЭлементаСоисполнитель.Доступность = (Не ТолькоПросмотр);
		
		ЭлементСоисполнитель = Элементы.Добавить("СоисполнительИД_" 
			+ СтрЗаменить(СтрокаСоисполнителей.ИдентификаторЭлемента, "-", "_"), Тип("ДекорацияФормы"), ГруппаЭлементаСоисполнитель);
		ЭлементСоисполнитель.Вид = ВидДекорацииФормы.Надпись;
		ЭлементСоисполнитель.Заголовок = ПредставлениеСоисполнителя;
		ЦветТега = ЦветаСтиля.CRM_ОсновнойГолубой;
		ЭлементСоисполнитель.Подсказка = Строка(СтрокаСоисполнителей.Значение);
		ЭлементСоисполнитель.ЦветТекста = ЦветТега;
		ЭлементСоисполнитель.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		ЭлементСоисполнитель.Гиперссылка = Истина;
		ЭлементСоисполнитель.Высота = 1;
		
		ЭлементСоисполнитель.УстановитьДействие("Нажатие", "Подключаемый_СоисполнительНажатиеИмя");
		
		КнопкаЭлементСоисполнитель = Элементы.Добавить("КнопкаСоисполнительИД_" 
			+ СтрЗаменить(СтрокаСоисполнителей.ИдентификаторЭлемента, "-", "_"), Тип("ДекорацияФормы"), ГруппаЭлементаСоисполнитель);
		КнопкаЭлементСоисполнитель.Вид = ВидДекорацииФормы.Картинка;
		КнопкаЭлементСоисполнитель.Подсказка = НСтр("ru = 'Удалить соисполнителя'");
		КнопкаЭлементСоисполнитель.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
		КнопкаЭлементСоисполнитель.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Верх;
		КнопкаЭлементСоисполнитель.Картинка = БиблиотекаКартинок.CRM_УдалитьСиняя;
		КнопкаЭлементСоисполнитель.Гиперссылка = Истина;
		
		КнопкаЭлементСоисполнитель.УстановитьДействие("Нажатие", "Подключаемый_СоисполнительНажатиеКнопка");
		
	КонецЦикла;

КонецПроцедуры

// Процедура устанавливает статус контакту соисполнителя.
//
// Параметры:
//  Соисполнитель	 - СправочникСсылка.Пользователи	 - Соисполнитель.
//  ДанныеКонтакта	 - Структура	 - Данные контакта.
//  НовыйСтатус		 - ПеречислениеСсылка.CRM_СтатусыДиалогов	 - Новый статус.
//
Процедура УстановитьСтатусКонтактуСоисполнителя(Соисполнитель, ДанныеКонтакта, НовыйСтатус) Экспорт
	
	РегистрыСведений.CRM_СоисполнителиДиалогов.УстановитьСтатусКонтактуСоисполнителя(Соисполнитель,
		 ДанныеКонтакта,
		 НовыйСтатус);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ДобавитьПользователяВУчетнуюЗаписьМессенджера(МассивПользователей, УчетнаяЗапись,
	 МассивНачальноеСостояниеДоступа) Экспорт
	
	НаборРегистра = РегистрыСведений.CRM_УчетныеЗаписиМессенджеров.СоздатьНаборЗаписей();
	
	НаборРегистра.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
	НаборРегистра.Прочитать();
	
	НаборРегистраТЗ = НаборРегистра.Выгрузить();
	
	Для Каждого Пользователь Из МассивПользователей Цикл
		
		НайденнаяСтрока = НаборРегистраТЗ.Найти(Пользователь, "Пользователь");
		
		НачальноеСостояниеЭлемент = Новый Структура("Пользователь, СтрокаJSON", Пользователь, "");
		НачальноеСостояниеСтруктура = Новый Структура("ЗаписьДобавлена, Запись, Администрирование", Ложь);
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			НачальноеСостояниеСтруктура.ЗаписьДобавлена = Истина;
			
			СтрокаНабора = НаборРегистра.Добавить();
			
			СтрокаНабора.УчетнаяЗапись	= УчетнаяЗапись;
			СтрокаНабора.Пользователь	= Пользователь;
			СтрокаНабора.Запись			= Истина;
			СтрокаНабора.Администрирование	= Ложь;
			СтрокаНабора.Основная = Ложь;
			
		Иначе
			
			СтрокаНабора = НаборРегистра[НаборРегистраТЗ.Индекс(НайденнаяСтрока)];
			
			НачальноеСостояниеСтруктура.Запись = СтрокаНабора.Запись;
			НачальноеСостояниеСтруктура.Администрирование = СтрокаНабора.Администрирование;
			
			СтрокаНабора.Запись = Истина;
			
		КонецЕсли;
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, НачальноеСостояниеСтруктура, , "ПреобразованиеВJSON", CRM_СоисполнителиДиалоговСервер);
		
		НачальноеСостояниеЭлемент.СтрокаJSON = ЗаписьJSON.Закрыть();
		МассивНачальноеСостояниеДоступа.Добавить(НачальноеСостояниеЭлемент);
		
	КонецЦикла;
	
	НаборРегистра.Записать();
	
КонецПроцедуры

Процедура ВосстановитьСостояниеДоступаПользователя(УчетнаяЗапись, МассивНачальноеСостояниеДоступа) Экспорт
	
	Для Каждого НачальноеСостояниеДоступаЭлемент Из МассивНачальноеСостояниеДоступа Цикл
		
		Пользователь = НачальноеСостояниеДоступаЭлемент.Пользователь;
		СтрокаJSON = НачальноеСостояниеДоступаЭлемент.СтрокаJSON;
		
		Если НЕ ЗначениеЗаполнено(СтрокаJSON) Тогда
			// Данный пользователь обладал необходимым доступом до того, как он был сделан Соисполнителем.
			Продолжить;
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
		НачальноеСостояниеСтруктура = ПрочитатьJSON(ЧтениеJSON, , , , "ВосстановлениеJSON", CRM_СоисполнителиДиалоговСервер);
		ЧтениеJSON.Закрыть();
		
		МенеджерЗаписи = РегистрыСведений.CRM_УчетныеЗаписиМессенджеров.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.УчетнаяЗапись = УчетнаяЗапись;
		МенеджерЗаписи.Пользователь = Пользователь;
		
		Если НачальноеСостояниеСтруктура.ЗаписьДобавлена Тогда
			МенеджерЗаписи.Удалить();
		Иначе
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.Запись = НачальноеСостояниеСтруктура.Запись;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПреобразованиеВJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	//Если ТипЗнч(Значение) = Тип("") Тогда
	//	Возврат Строка(Значение);
	//КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ВосстановлениеJSON(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	// Если Свойство = "" Тогда
	//	Возврат Перечисления.
	//КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ДоступПользователей(МассивПользователей, УчетнаяЗапись) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроверяемыеПользователи.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВремПроверяемыеПользователи
		|ИЗ
		|	&ПроверяемыеПользователи КАК ПроверяемыеПользователи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись, НЕОПРЕДЕЛЕНО) КАК УчетнаяЗапись,
		|	ВремПроверяемыеПользователи.Ссылка КАК Пользователь
		|ПОМЕСТИТЬ ВремДанныеОбУчетныхЗаписях
		|ИЗ
		|	ВремПроверяемыеПользователи КАК ВремПроверяемыеПользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
		|		ПО ВремПроверяемыеПользователи.Ссылка = CRM_УчетныеЗаписиМессенджеров.Пользователь
		|			И (CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись = &УчетнаяЗапись
		|				И CRM_УчетныеЗаписиМессенджеров.Запись)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВремДанныеОбУчетныхЗаписях.Пользователь КАК Пользователь
		|ИЗ
		|	ВремДанныеОбУчетныхЗаписях КАК ВремДанныеОбУчетныхЗаписях
		|ГДЕ
		|	ВремДанныеОбУчетныхЗаписях.УчетнаяЗапись <> НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВремДанныеОбУчетныхЗаписях.Пользователь КАК Пользователь
		|ИЗ
		|	ВремДанныеОбУчетныхЗаписях КАК ВремДанныеОбУчетныхЗаписях
		|ГДЕ
		|	ВремДанныеОбУчетныхЗаписях.УчетнаяЗапись = НЕОПРЕДЕЛЕНО";
	
	ПроверяемыеПользователи = Новый ТаблицаЗначений;
	ПроверяемыеПользователи.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Для Каждого Пользователь Из МассивПользователей Цикл
		НС = ПроверяемыеПользователи.Добавить();
		НС.Ссылка = Пользователь;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПроверяемыеПользователи", ПроверяемыеПользователи);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ПользователиБезДоступа = РезультатЗапроса[3].Выгрузить().ВыгрузитьКолонку("Пользователь");
	ПользователиСДоступом = РезультатЗапроса[2].Выгрузить().ВыгрузитьКолонку("Пользователь");
	
	Возврат Новый Структура("ПользователиСДоступом, ПользователиБезДоступа", ПользователиСДоступом,
		 ПользователиБезДоступа);
	
КонецФункции

Процедура ДобавитьСоисполнителя(МассивПользователей, ДанныеКонтакта,
	 МассивНачальноеСостояниеДоступа = Неопределено) Экспорт
	
	РегистрыСведений.CRM_СоисполнителиДиалогов.ДобавитьСоисполнителей(
		МассивПользователей,
		ДанныеКонтакта.УчетнаяЗапись,
		ДанныеКонтакта.Группа,
		ДанныеКонтакта.ID_Пользователя,
		МассивНачальноеСостояниеДоступа);
	
	ТекущийДиалог = ДанныеКонтакта.ТекущийДиалог;
	Если ЗначениеЗаполнено(ТекущийДиалог) Тогда
		Ответственный = Пользователи.ТекущийПользователь();
		
		Для Каждого Соисполнитель Из МассивПользователей Цикл
			Справочники.CRM_Диалоги.ДобавитьДействие(
				ТекущийДиалог,
				Перечисления.CRM_ДействияСДиалогами.ДобавленСоисполнитель, ,
				Ответственный,
				Соисполнитель);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьСоисполнителя(МассивПользователей, ДанныеКонтакта) Экспорт
	
	РегистрыСведений.CRM_СоисполнителиДиалогов.УдалитьСоисполнителей(
		МассивПользователей,
		ДанныеКонтакта.УчетнаяЗапись,
		ДанныеКонтакта.Группа,
		ДанныеКонтакта.ID_Пользователя);
	
	ТекущийДиалог = ДанныеКонтакта.ТекущийДиалог;
	Если ЗначениеЗаполнено(ТекущийДиалог) Тогда
		Ответственный = Пользователи.ТекущийПользователь();
		
		Для Каждого Соисполнитель Из МассивПользователей Цикл
			Справочники.CRM_Диалоги.ДобавитьДействие(
				ТекущийДиалог,
				Перечисления.CRM_ДействияСДиалогами.УдаленСоисполнитель, ,
				Ответственный,
				Соисполнитель);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьВсехСоисполнителей(ДанныеКонтакта, ВыполнятьВТранзакции = Истина) Экспорт
	
	РегистрыСведений.CRM_СоисполнителиДиалогов.УдалитьВсехСоисполнителей(
		ДанныеКонтакта.УчетнаяЗапись, ДанныеКонтакта.Группа, ДанныеКонтакта.ID_Пользователя, ВыполнятьВТранзакции);
	
КонецПроцедуры

Функция ПользовательЯвляетсяОтветственным(Пользователь, ТекущийДиалог, УчетнаяЗапись) Экспорт
	
	Если ТекущийДиалог.Ответственный = Пользователь Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись КАК УчетнаяЗапись
		|ИЗ
		|	РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
		|ГДЕ
		|	CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись = &УчетнаяЗапись
		|	И CRM_УчетныеЗаписиМессенджеров.Пользователь = &Пользователь
		|	И CRM_УчетныеЗаписиМессенджеров.Администрирование";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПользовательЯвляетсяСоисполнителем(ДанныеКонтакта, Пользователь) Экспорт
	
	Возврат РегистрыСведений.CRM_СоисполнителиДиалогов.ПользовательЯвляетсяСоисполнителем(Пользователь,
																					ДанныеКонтакта.УчетнаяЗапись,
																					ДанныеКонтакта.Группа,
																					ДанныеКонтакта.ID_Пользователя);
	
КонецФункции

#КонецОбласти
