// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  ДанныеДоверенности - Структура:
//  * Номер - Строка
//  * ДанныеФайла - Строка
//  * ДанныеПодписи - Строка
//  * СтатусВРеестреФНС - Строка
//  
// Возвращаемое значение:
//  Неопределено,СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций,СправочникСсылка.МЧД003
Функция ДоверенностьПоДаннымСервиса(ДанныеДоверенности) Экспорт
	
	Доверенность = Неопределено;
	
	Если Не ЗначениеЗаполнено(ДанныеДоверенности) Тогда
		Возврат Доверенность
	КонецЕсли;
	
	Доверенность = МашиночитаемыеДоверенности.ПолучитьДоверенностьИзЖурналаПоНомеру(ДанныеДоверенности.Номер);
	Если ЗначениеЗаполнено(Доверенность) Тогда
		Возврат Доверенность;
	КонецЕсли;
	
	РезультатЗагрузки = ЗагрузитьПоДаннымСервиса(ДанныеДоверенности);
	
	Возврат РезультатЗагрузки.МЧД;
	
КонецФункции

// Параметры:
//  Доверенность - ОпределяемыйТип.МашиночитаемаяДоверенность
// 
// Возвращаемое значение:
//  См. НовыеДанныеДоверенностиВФорматеСервиса
Функция ДанныеДоверенностиВФорматеСервиса(Доверенность) Экспорт
	
	НомерИСтатусДоверенности = НомерИСтатусДоверенности(Доверенность);
	ДанныеФайлаДоверенностиИПодписи = МашиночитаемыеДоверенности.ДанныеФайлаДоверенностиИПодписи(Доверенность);
	
	ДанныеВФорматеСервиса = НовыеДанныеДоверенностиВФорматеСервиса();
	ДанныеВФорматеСервиса.Номер = НомерИСтатусДоверенности.НомерДоверенности;
	ДанныеВФорматеСервиса.ДанныеФайла = Base64Строка(ДанныеФайлаДоверенностиИПодписи.ДанныеФайла);
	ДанныеВФорматеСервиса.ДанныеПодписи = Base64Строка(ДанныеФайлаДоверенностиИПодписи.ДанныеПодписи);
	Если ЗначениеЗаполнено(НомерИСтатусДоверенности.СтатусВРеестреФНС) Тогда
		ДанныеВФорматеСервиса.СтатусВРеестреФНС = ОбщегоНазначения.ИмяЗначенияПеречисления(
			НомерИСтатусДоверенности.СтатусВРеестреФНС);
	КонецЕсли;
	
	Возврат ДанныеВФорматеСервиса;
	
КонецФункции

// Параметры:
//  УчетныеЗаписиОблачногоЭДО - Массив из СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  Доверенности - Массив из ОпределяемыйТип.МашиночитаемаяДоверенность
// 
// Возвращаемое значение:
//  Структура:
//  * ЕстьОшибки - Булево
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция ВыгрузитьВОблачныйЭДО(УчетныеЗаписиОблачногоЭДО, Доверенности) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	Для Каждого УчетнаяЗаписьОблачногоЭДО Из УчетныеЗаписиОблачногоЭДО Цикл
		
		Попытка
			ПараметрыВыполненияМетода = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
				УчетнаяЗаписьОблачногоЭДО, Пользователи.ТекущийПользователь());
		Исключение
			ВидОперации = НСтр("ru = 'Выгрузка МЧД в облачный ЭДО'");
			ВидОшибки = ИнтеграцияОблачногоЭДО.ВидОшибкиОтсутствуютДанныеАвторизации(УчетнаяЗаписьОблачногоЭДО);
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ТекстОшибки, ТекстОшибки);
			ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ИнтеграцияОблачногоЭДО);
			Продолжить;
		КонецПопытки;
		
		ПакетМетодов = ПакетМетодовДляВыгрузкиДоверенностей(Доверенности);
		
		РезультатыМетодов = ИнтеграцияОблачногоЭДО.ВыполнитьПакетМетодовСервиса(
			ПараметрыВыполненияМетода, ПакетМетодов, КонтекстДиагностики);
		
		Если Не ЗначениеЗаполнено(РезультатыМетодов) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработатьРезультатыМетодовВыгрузкиДоверенностей(КонтекстДиагностики, РезультатыМетодов, Доверенности,
			УчетнаяЗаписьОблачногоЭДО);
		
	КонецЦикла;
	
	Результат.ЕстьОшибки = ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(КонтекстДиагностики);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  ДанныеДоверенности - Структура:
//  * Номер - Строка
//  * ДанныеФайла - Строка
//  * ДанныеПодписи - Строка
//  * СтатусВРеестреФНС - Строка
//  
// Возвращаемое значение:
//  См. МашиночитаемыеДоверенности.ЗагрузитьМЧДИзФайла
Функция ЗагрузитьПоДаннымСервиса(ДанныеДоверенности)
	
	ДанныеДляЗагрузки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД();
	ДанныеДляЗагрузки.ДанныеДоверенности = Base64Значение(ДанныеДоверенности.ДанныеФайла);
	ДанныеДляЗагрузки.ДанныеПодписи = Base64Значение(ДанныеДоверенности.ДанныеПодписи);
	СтатусВРеестреФНС = СтатусВРеестреФНСИзФорматаСервиса(ДанныеДоверенности.СтатусВРеестреФНС);
	
	ДополнительныеСведения = Неопределено;
	Если ЗначениеЗаполнено(СтатусВРеестреФНС) Тогда
		ДополнительныеСведения = МашиночитаемыеДоверенностиКлиентСервер.ДополнительныеСведенияПоЗагрузкеМЧД();
		ДополнительныеСведения.СтатусВРеестреФНС = СтатусВРеестреФНС;
	КонецЕсли;
	
	ТребуетсяПроверкаМЧДНаКлиенте = Ложь;
	ОбновлятьСуществующий = Ложь;
	РезультатЗагрузки = МашиночитаемыеДоверенности.ЗагрузитьМЧДИзФайла(ДанныеДляЗагрузки,
		ТребуетсяПроверкаМЧДНаКлиенте, ОбновлятьСуществующий, ДополнительныеСведения);
	
	Возврат РезультатЗагрузки;
	
КонецФункции

// Параметры:
//  СтатусВФорматеСервиса - Строка
//  МетаданныеПеречисления - ОбъектМетаданныхПеречисление
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
Функция СтатусВРеестреФНСИзФорматаСервиса(СтатусВФорматеСервиса, МетаданныеПеречисления = Неопределено)
	
	Если МетаданныеПеречисления = Неопределено Тогда
		МетаданныеПеречисления = Метаданные.Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(СтатусВФорматеСервиса, МетаданныеПеречисления);
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Номер - Строка
//  * ДанныеФайла - Строка
//  * ДанныеПодписи - Строка
//  * СтатусВРеестреФНС - Строка
Функция НовыеДанныеДоверенностиВФорматеСервиса()
	Описание = Новый Структура;
	Описание.Вставить("Номер", "");
	Описание.Вставить("ДанныеФайла", "");
	Описание.Вставить("ДанныеПодписи", "");
	Описание.Вставить("СтатусВРеестреФНС", "");
	Возврат Описание;
КонецФункции

// Параметры:
//  Доверенность - ОпределяемыйТип.МашиночитаемаяДоверенность
// 
// Возвращаемое значение:
//  Структура:
//  * НомерДоверенности - Строка
//  * СтатусВРеестреФНС - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС 
Функция НомерИСтатусДоверенности(Доверенность)
	//@skip-check constructor-function-return-section
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Доверенность, "НомерДоверенности, СтатусВРеестреФНС");
КонецФункции

// Параметры:
//  Доверенности - Массив из ОпределяемыйТип.МашиночитаемаяДоверенность
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
Функция ПакетМетодовДляВыгрузкиДоверенностей(Доверенности)
	
	ПакетМетодов = ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса();
	
	Для Каждого Доверенность Из Доверенности Цикл
		ДанныеДоверенности = ДанныеДоверенностиВФорматеСервиса(Доверенность);
		ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
			"ЗагрузитьДоверенность", ДанныеДоверенности);
		ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода);
	КонецЦикла;
	
	Возврат ПакетМетодов;
	
КонецФункции

// Параметры:
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  РезультатыМетодов - Соответствие из КлючИЗначение:
//  * Ключ - Число
//  * Значение - Структура:
//    ** Успех - Булево
//    ** Ошибка - Неопределено,Строка
//  Доверенности - См. ПакетМетодовДляВыгрузкиДоверенностей.Доверенности
//  УчетнаяЗаписьОблачногоЭДО - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
Процедура ОбработатьРезультатыМетодовВыгрузкиДоверенностей(КонтекстДиагностики, РезультатыМетодов, Доверенности,
	УчетнаяЗаписьОблачногоЭДО)
	
	Для Каждого РезультатМетода Из РезультатыМетодов Цикл
		
		Индекс = РезультатМетода.Ключ;
		РезультатВыгрузки = РезультатМетода.Значение;
		Если РезультатВыгрузки.Успех Тогда
			Продолжить;
		КонецЕсли;
		
		Доверенность = Доверенности[Индекс];
		
		ВидОперации = НСтр("ru = 'Выгрузка МЧД в облачный ЭДО.'");
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось выгрузить машиночитаемую доверенность %1'"),
			Доверенность) + Символы.ПС + РезультатВыгрузки.Ошибка;
		ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации, ТекстСообщения,,
			УчетнаяЗаписьОблачногоЭДО);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
