// @strict-types

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ОблачныйЭДО_ИнтеграцияОблачногоЭДО

// Создает пакет документов локально (без разделения по интеграциям).
// 
// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  Идентификатор - Неопределено,УникальныйИдентификатор - если не передан - документам будет присвоен новый идентификатор пакета
// 
// Возвращаемое значение:
//  См. ПакетыДокументовЭДОСлужебный.СоздатьПакетДокументов
Функция СоздатьПакетДокументовЛокально(ЭлектронныеДокументы, КонтекстДиагностики, Идентификатор = Неопределено) Экспорт
	Возврат ПакетыДокументовЭДОСлужебный.СоздатьПакетДокументов(ЭлектронныеДокументы, КонтекстДиагностики, Идентификатор);
КонецФункции

// Возвращает результат добавления документа в пакет локально (без разделения по интеграциям).
// 
// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
//  ЭлектронныеДокументы - Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - Неопределено - если контекст не инициализирован.
//                      - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. ПакетыДокументовЭДОСлужебный.ДобавитьДокументыВПакет
Функция ДобавитьДокументыВПакетЛокально(ИдентификаторПакета, ЭлектронныеДокументы,
	КонтекстДиагностики = Неопределено) Экспорт
	
	Возврат ПакетыДокументовЭДОСлужебный.ДобавитьДокументыВПакет(ИдентификаторПакета, ЭлектронныеДокументы,
		КонтекстДиагностики);

КонецФункции

// Возвращает результат удаления документа из пакета локально (без разделения по интеграциям).
// 
// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - Неопределено - если контекст не инициализирован.
//                      - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. ПакетыДокументовЭДОСлужебный.УдалитьДокументИзПакета
Функция УдалитьДокументИзПакетаЛокально(ИдентификаторПакета, ЭлектронныйДокумент, КонтекстДиагностики = Неопределено) Экспорт
	Возврат ПакетыДокументовЭДОСлужебный.УдалитьДокументИзПакета(ИдентификаторПакета, ЭлектронныйДокумент, КонтекстДиагностики);
КонецФункции

// Возвращаемое значение:
//  Структура:
// * Успех - Булево
// * ИдентификаторПакета - Неопределено
//                       - УникальныйИдентификатор - если сформирован новый пакет документов.
// * КонтекстДиагностики - Неопределено - если контекст не инициализирован.
//                       - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики.
//
Функция НовыйРезультатДействийСПакетом() Экспорт
	
	Возврат Новый Структура("Успех, ИдентификаторПакета, КонтекстДиагностики", Ложь, Неопределено, Неопределено);
	
КонецФункции

#КонецОбласти // ОблачныйЭДО_ИнтеграцияОблачногоЭДО

#КонецОбласти // ДляВызоваИзДругихПодсистем

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Тогда

// Параметры:
//  Форма - РасширениеУправляемойФормыДляДокумента,ФормаКлиентскогоПриложения:
//  * Объект - ДанныеФормыСтруктура:
//  ** Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * СоставПакета - СписокЗначений из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * КоличествоОтображаемыхДокументовПакета - Число
//  НавигационнаяСсылка - Строка
// 
// Возвращаемое значение:
//  Структура:
//  * СоставМенюВыбора - СписокЗначений из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
Функция СоставПакета_ОбработкаНавигационнойСсылкиНаСервере(Форма, НавигационнаяСсылка) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СоставМенюВыбора", Новый СписокЗначений);
	
	Если СтрНайти(НавигационнаяСсылка, "Open_") > 0 Тогда
		
		ИндексДокумента = Число(СтрЗаменить(НавигационнаяСсылка, "Open_", ""));
		
		Документ = Форма.СоставПакета[ИндексДокумента -1].Значение;
		ОбъектДокумента = Документ.ПолучитьОбъект();
		ЗначениеВДанныеФормы(ОбъектДокумента, Форма.Объект);
		Форма.Прочитать();
		
	ИначеЕсли НавигационнаяСсылка = "Show" Тогда
		
		СоставМеню = Результат.СоставМенюВыбора; // СписокЗначений из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
		
		ГраницыВывода = ГраницыВыводаДокументовПакета(Форма.СоставПакета, Форма.Объект.Ссылка,
			Форма.КоличествоОтображаемыхДокументовПакета);
		
		ИндексДокумента = 0;
		
		ДокументыДляПредставления = Новый Массив; // Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
		
		Для Каждого ЭлементСписка Из Форма.СоставПакета Цикл
			ИндексДокумента = ИндексДокумента + 1;
			Если ИндексДокумента >= ГраницыВывода.ИндексНачалоВыводаЭлементов 
				И ИндексДокумента <= ГраницыВывода.ИндексКонцаВыводаЭлементов Тогда
				Продолжить;
			КонецЕсли;
			ЭлектронныйДокумент = ЭлементСписка.Значение;
			ДокументыДляПредставления.Добавить(ЭлектронныйДокумент);
		КонецЦикла;
		
		СвойстваДокументов = ЭлектронныеДокументыЭДО.СвойстваДокументовДляПредставления(ДокументыДляПредставления);
		Для Каждого СвойстваПоДокументу Из СвойстваДокументов Цикл
			Представление = ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(СвойстваПоДокументу.Значение);
			СоставМеню.Добавить(СвойстваПоДокументу.Ключ, Представление);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  МестоРазмещения - ГруппаФормы,РасширениеГруппыФормыДляОбычнойГруппы
//  КоличествоОтображаемыхДокументовПакета - Число
//  Направление - ПеречислениеСсылка.НаправленияЭДО
Процедура СформироватьПанельСоставаПакета(Форма, МестоРазмещения, КоличествоОтображаемыхДокументовПакета, Направление) Экспорт
	
	Если МестоРазмещения.ПодчиненныеЭлементы.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;	
	
	МестоРазмещения.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
	МестоРазмещения.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	МестоРазмещения.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	МестоРазмещения.Видимость = Ложь;
		
	Для ПорядковыйНомерЭлемента = 1 По КоличествоОтображаемыхДокументовПакета Цикл 
		
		// Закладка
		ГруппаЗакладка = Форма.Элементы.Добавить("ПанельСоставаПакета_Закладка_" + Строка(ПорядковыйНомерЭлемента), Тип("ГруппаФормы"), МестоРазмещения);
		ГруппаЗакладка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗакладка.ОтображатьЗаголовок = Ложь;
		ГруппаЗакладка.ЦветФона = ЦветаСтиля.ЦветФонаШапкиПакетаДокументовЭДО;
		ГруппаЗакладка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаЗакладка.Объединенная = Истина;
		ГруппаЗакладка.РастягиватьПоГоризонтали = Ложь;
		ГруппаЗакладка.РастягиватьПоВертикали = Ложь;
		ГруппаЗакладка.Видимость = Ложь;
		ГруппаЗакладка.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		ГруппаЗакладка.ГоризонтальноеПоложениеВГруппе  = ГоризонтальноеПоложениеЭлемента.Центр;

		// Текст закладки (наименование документа)
		ЭлементУправления_ТекстЗакладки = Форма.Элементы.Добавить(
			"ЭлементУправления_ТекстЗакладки_" + Строка(ПорядковыйНомерЭлемента), 
			Тип("ДекорацияФормы"), ГруппаЗакладка);
		
		ЭлементУправления_ТекстЗакладки.Вид = ВидДекорацииФормы.Надпись;
		ЭлементУправления_ТекстЗакладки.УстановитьДействие("ОбработкаНавигационнойСсылки",
			"Подключаемый_СоставПакета_ОбработкаНавигационнойСсылки");
		ЭлементУправления_ТекстЗакладки.РастягиватьПоГоризонтали = Истина;
		ЭлементУправления_ТекстЗакладки.АвтоМаксимальнаяШирина = Ложь;
		ЭлементУправления_ТекстЗакладки.Высота = 1;
		
		Если Направление = Перечисления.НаправленияЭДО.Исходящий Тогда
			// Разделитель
			ЭлементУправления_Разделитель = Форма.Элементы.Добавить(
				"ЭлементУправления_Разделитель_" + Строка(ПорядковыйНомерЭлемента), 
				Тип("ДекорацияФормы"), ГруппаЗакладка);
			
			ЭлементУправления_Разделитель.Вид = ВидДекорацииФормы.Надпись;
			ЭлементУправления_Разделитель.Заголовок = Символы.НПП;
			// Кнопка удаления из пакета 
			ЭлементУправленияПакета_УдалитьДокумент = Форма.Элементы.Добавить(
				"ЭлементУправленияПакета_УдалитьДокумент_" + Строка(ПорядковыйНомерЭлемента), 
				Тип("ДекорацияФормы"), ГруппаЗакладка);
			
			ЭлементУправленияПакета_УдалитьДокумент.Вид = ВидДекорацииФормы.Картинка;
			ЭлементУправленияПакета_УдалитьДокумент.Картинка = БиблиотекаКартинок.Закрыть;
			ЭлементУправленияПакета_УдалитьДокумент.УстановитьДействие("Нажатие",
				"Подключаемый_СоставПакета_Нажатие");
			ЭлементУправленияПакета_УдалитьДокумент.Гиперссылка = Истина;
	
		КонецЕсли;
		
	КонецЦикла;
	
	// Закладка
	ГруппаДопЭлементы = Форма.Элементы.Добавить("ПанельСоставаПакета_ГруппаДопЭлементы", Тип(
		"ГруппаФормы"), МестоРазмещения);
	ГруппаДопЭлементы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДопЭлементы.ОтображатьЗаголовок = Ложь;
	ГруппаДопЭлементы.ЦветФона = ЦветаСтиля.ЦветФонаШапкиПакетаДокументовЭДО;
	ГруппаДопЭлементы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаДопЭлементы.Объединенная = Истина;
	ГруппаДопЭлементы.РастягиватьПоГоризонтали = Истина;
	ГруппаДопЭлементы.РастягиватьПоВертикали = Ложь;
	ГруппаДопЭлементы.Видимость = Истина;
	ГруппаДопЭлементы.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	ГруппаДопЭлементы.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	
	// ссылка списка остальных документов пакета 
	ЭлементУправленияПакета_ПоказатьОстальныеДокументы = Форма.Элементы.Добавить(
		"ЭлементУправленияПакета_ПоказатьОстальныеДокументы", Тип("ДекорацияФормы"),
		ГруппаДопЭлементы);
	
	ЭлементУправленияПакета_ПоказатьОстальныеДокументы.Вид = ВидДекорацииФормы.Надпись;
	ЭлементУправленияПакета_ПоказатьОстальныеДокументы.УстановитьДействие("ОбработкаНавигационнойСсылки",
		"Подключаемый_СоставПакета_ОбработкаНавигационнойСсылки");
	ЭлементУправленияПакета_ПоказатьОстальныеДокументы.Высота = 1;
	
	ЭлементУправления_Разделитель = Форма.Элементы.Добавить(
		"ЭлементУправления_Разделитель_" + Строка(ПорядковыйНомерЭлемента), Тип("ДекорацияФормы"),
		ГруппаДопЭлементы);
	
	ЭлементУправления_Разделитель.Вид = ВидДекорацииФормы.Надпись;
	ЭлементУправления_Разделитель.Заголовок = Символы.НПП;
	
	Если Направление = Перечисления.НаправленияЭДО.Исходящий Тогда
		// Кнопка добавления документа в пакет 
		ЭлементУправленияПакета_ДобавитьДокумент = Форма.Элементы.Добавить(
			"ЭлементУправленияПакета_ЭлементУправленияПакета_ДобавитьДокумент", Тип(
			"ДекорацияФормы"), ГруппаДопЭлементы);
	
		ЭлементУправленияПакета_ДобавитьДокумент.Вид = ВидДекорацииФормы.Картинка;
		ЭлементУправленияПакета_ДобавитьДокумент.Картинка = БиблиотекаКартинок.ДобавитьЭлементСписка;
		ЭлементУправленияПакета_ДобавитьДокумент.УстановитьДействие("Нажатие",
			"Подключаемый_СоставПакета_Нажатие");
		ЭлементУправленияПакета_ДобавитьДокумент.Гиперссылка = Истина;
	КонецЕсли;
	
	// Пустышка
	ЭлементУправленияПакета_Пустышка = Форма.Элементы.Добавить(
		"ЭлементУправленияПакета_Пустышка", Тип("ДекорацияФормы"),
		ГруппаДопЭлементы);
	
	ЭлементУправленияПакета_Пустышка.Вид = ВидДекорацииФормы.Картинка;
	ЭлементУправленияПакета_Пустышка.Высота = 1;
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения:
//  * Объект - ДанныеФормыСтруктура:
//  ** Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * СоставПакета - СписокЗначений из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * ОтображаемыеДокументыПакета - СписокЗначений из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * КоличествоОтображаемыхДокументовПакета - Число
//  * ДоступноИзменениеПакета - Булево
Процедура ЗаполнитьПанельСоставаПакета(Форма) Экспорт
	
	КоличествоОтображаемыхДокументовПакета = Форма.КоличествоОтображаемыхДокументовПакета;
	КоличествоДокументовВПакете = Форма.СоставПакета.Количество();
	
	Если КоличествоДокументовВПакете <= 1 Тогда
		Форма.Элементы.ГруппаСоставПакета.Видимость = Ложь;
		Форма.Элементы.ГруппаШапка.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.ГруппаШапка.ЦветФона = ЦветаСтиля.ЦветФонаШапкиПакетаДокументовЭДО;
	Форма.Элементы.ГруппаСоставПакета.Видимость = Истина;
	ГраницыВывода = ГраницыВыводаДокументовПакета(Форма.СоставПакета, Форма.Объект.Ссылка,
		Форма.КоличествоОтображаемыхДокументовПакета);
	
	ПорядковыйНомерЭлемента = 1;
	
	ОтображаемыеДокументыПакета = Форма.ОтображаемыеДокументыПакета;
	
	ОтображаемыеДокументыПакета.Очистить();
	
	СвойстваДокументов = ЭлектронныеДокументыЭДО.СвойстваДокументовДляПредставления(
		Форма.СоставПакета.ВыгрузитьЗначения());

	Для ИндексДокумента = ГраницыВывода.ИндексНачалоВыводаЭлементов 
		По ГраницыВывода.ИндексКонцаВыводаЭлементов Цикл
		
		ТекущийДокументПакета = Форма.СоставПакета[ИндексДокумента - 1].Значение;
		
		СвойстваДокумента = СвойстваДокументов.Получить(ТекущийДокументПакета);
		
		ПредставлениеДокумента = ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(СвойстваДокумента);
		
		ТекстЗакладки = ""; // Строка,ФорматированнаяСтрока
		
		Если Форма.Объект.Ссылка <> ТекущийДокументПакета Тогда
			ТекстЗакладки = Новый ФорматированнаяСтрока(Строка(ПредставлениеДокумента),
				,,, "Open_" + Формат(ИндексДокумента, "ЧГ=;"));
			Форма.Элементы["ПанельСоставаПакета_Закладка_" + Строка(ПорядковыйНомерЭлемента)].ЦветФона = 
				ЦветаСтиля.ЦветФонаШапкиПакетаДокументовЭДО;
		Иначе
			ТекстЗакладки = ПредставлениеДокумента;
			Форма.Элементы["ПанельСоставаПакета_Закладка_" + Строка(ПорядковыйНомерЭлемента)].ЦветФона =
				ЦветаСтиля.ЦветФонаФормы;
		КонецЕсли;
		
		Форма.Элементы["ЭлементУправления_ТекстЗакладки_" + Строка(ПорядковыйНомерЭлемента)].Заголовок = ТекстЗакладки;
		Форма.Элементы["ПанельСоставаПакета_Закладка_" + Строка(ПорядковыйНомерЭлемента)].Видимость = Истина; 
		
		ПорядковыйНомерЭлемента = ПорядковыйНомерЭлемента + 1; 
		
		ОтображаемыеДокументыПакета.Добавить(ТекущийДокументПакета);
		
	КонецЦикла;

	Если КоличествоДокументовВПакете <= КоличествоОтображаемыхДокументовПакета Тогда
		
		Для ПорядковыйНомерЭлемента = КоличествоДокументовВПакете + 1 По КоличествоОтображаемыхДокументовПакета Цикл
			
			Форма.Элементы["ПанельСоставаПакета_Закладка_" + Строка(ПорядковыйНомерЭлемента)].Видимость = Ложь; 
			
		КонецЦикла;
		
		Форма.Элементы["ЭлементУправленияПакета_ПоказатьОстальныеДокументы"].Видимость = Ложь;
	
	Иначе
		
		КоличествоСкрытыхДокументов = КоличествоДокументовВПакете - КоличествоОтображаемыхДокументовПакета;
		
		ПредставлениеСкрытыхДокументов = СтрШаблон(
			"%1%2%3",
			НСтр("ru = 'и еще'"),
			Символы.НПП,
			Строка(КоличествоСкрытыхДокументов));
		
		ФорматированноеПредставлениеСкрытыхДокументов = Новый ФорматированнаяСтрока(
			ПредставлениеСкрытыхДокументов,
			,
			,
			,
			"Show");
				
		Форма.Элементы["ЭлементУправленияПакета_ПоказатьОстальныеДокументы"].Заголовок =
			ФорматированноеПредставлениеСкрытыхДокументов;
		
		Форма.Элементы["ЭлементУправленияПакета_ПоказатьОстальныеДокументы"].Видимость = Истина;
		
	КонецЕсли;
	
	Если (Не ЗначениеЗаполнено(Форма.СоставПакета) Или Не Форма.ДоступноИзменениеПакета) 
		И Не ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(Форма.Объект.Ссылка) Тогда
		Форма.Элементы["ЭлементУправленияПакета_ЭлементУправленияПакета_ДобавитьДокумент"].Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  КоличествоДокументов - Число
// 
// Возвращаемое значение:
//  Строка
Функция ЗаголовокОтображенияПакетов(КоличествоДокументов) Экспорт
	Если КоличествоДокументов Тогда
		ШаблонСтроки = НСтр("ru = ';Пакет из %1 документа;;Пакет из %1 документов;Пакет из %1 документов;Пакет из %1 документов'");
		Возврат СтрокаСЧислом(ШаблонСтроки, КоличествоДокументов, ВидЧисловогоЗначения.Количественное);
	КонецЕсли;
КонецФункции

#КонецЕсли

// Возвращаемое значение:
//  Строка - Заголовок нового произвольного документа
Функция ЗаголовокНовогоПроизвольногоДокумента() Экспорт
	Возврат НСтр("ru = 'Новый произвольный документ (создание)'");
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  - Неопределено - если документ не входит в пакет.
//  - УникальныйИдентификатор
Функция ИдентификаторПакетаДокумента(ЭлектронныйДокумент) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаИдентификатораПакетаДокумента());
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.ИдентификаторПакета;
	
КонецФункции

// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция ДокументыПакета(ИдентификаторПакета) Экспорт
	
	Возврат РезультатЗапросаДокументовПакета(ИдентификаторПакета).Выгрузить().ВыгрузитьКолонку("ЭлектронныйДокумент");
	
КонецФункции

// Параметры:
//  ПакетыДокументов - Массив из УникальныйИдентификатор
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ВидОперации - Строка - Вид операции
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция ДокументыОднородныхПакетов(ПакетыДокументов, КонтекстДиагностики, ВидОперации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторыПакетов", ПакетыДокументов);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставПакетовДокументовЭДО.ИдентификаторПакета КАК ИдентификаторПакета,
		|	СоставПакетовДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СостоянияДокументовЭДО.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|		ПО СоставПакетовДокументовЭДО.ЭлектронныйДокумент = СостоянияДокументовЭДО.ЭлектронныйДокумент
		|ГДЕ
		|	СоставПакетовДокументовЭДО.ИдентификаторПакета В (&ИдентификаторыПакетов)
		|ИТОГИ
		|ПО
		|	ИдентификаторПакета";
	
	ДокументыПакета = Новый Массив; // См. ДокументыОднородныхПакетов
	
	ВыборкаПоИдентификаторамПакета = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоИдентификаторамПакета.Следующий() Цикл
		
		НаборСостояний = Новый Массив; // Массив из ПеречислениеСсылка.СостоянияДокументовЭДО
		ВыборкаДокументов = ВыборкаПоИдентификаторамПакета.Выбрать();
		Пока ВыборкаДокументов.Следующий() Цикл
			НаборСостояний.Добавить(ВыборкаДокументов.Состояние);
		КонецЦикла;
		
		СостоянияОднородны = СостоянияДокументовПакетаОднородны(НаборСостояний,
			ВыборкаПоИдентификаторамПакета.ИдентификаторПакета, ВидОперации, КонтекстДиагностики);
		
		Если Не СостоянияОднородны Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаДокументов.Сбросить();
		Пока ВыборкаДокументов.Следующий() Цикл
			ДокументыПакета.Добавить(ВыборкаДокументов.ЭлектронныйДокумент);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДокументыПакета;
	
КонецФункции

// Параметры:
//  ПакетыДокументов - Массив из УникальныйИдентификатор
//  ЭтоОблачныйЭДО - Булево
// 
// Возвращаемое значение:
//  Массив из УникальныйИдентификатор
Функция ОтобратьПакетыДокументовПоПризнакуОблачногоЭДО(ПакетыДокументов, ЭтоОблачныйЭДО) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоставПакетовДокументовЭДО.ИдентификаторПакета КАК ИдентификаторПакета
		|ИЗ
		|	РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|ГДЕ
		|	СоставПакетовДокументовЭДО.ИдентификаторПакета В (&ПакетыДокументов)
		|	И СоставПакетовДокументовЭДО.ЭлектронныйДокумент.ЭтоОблачныйЭДО = &ЭтоОблачныйЭДО";
	
	Запрос.УстановитьПараметр("ЭтоОблачныйЭДО", ЭтоОблачныйЭДО);
	Запрос.УстановитьПараметр("ПакетыДокументов", ПакетыДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ИдентификаторПакета");
	
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  Идентификатор - Неопределено,УникальныйИдентификатор - если не передан - документам будет присвоен новый идентификатор пакета
// 
// Возвращаемое значение:
//  См. НовыйРезультатДействийСПакетом
Функция СоздатьПакетДокументов(ЭлектронныеДокументы, КонтекстДиагностики, Идентификатор = Неопределено) Экспорт
	
	ЭтоДокументыОблачногоЭДО = ЭлектронныеДокументыЭДО.ЭтоДокументОблачногоЭДО(ЭлектронныеДокументы[0]);
	МенеджерДействий = МенеджерДействийСПакетамиДокументовИнтеграцииЭДО(ЭтоДокументыОблачногоЭДО);
	Возврат МенеджерДействий.СоздатьПакетДокументов(ЭлектронныеДокументы, КонтекстДиагностики, Идентификатор);
	
КонецФункции

// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
//  ЭлектронныеДокументы - Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - Неопределено - если контекст не инициализирован.
//                      - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. НовыйРезультатДействийСПакетом
Функция ДобавитьДокументыВПакет(ИдентификаторПакета, ЭлектронныеДокументы, КонтекстДиагностики = Неопределено) Экспорт
	
	ЭтоДокументыОблачногоЭДО = ЭлектронныеДокументыЭДО.ЭтоДокументОблачногоЭДО(ЭлектронныеДокументы[0]);
	МенеджерДействий = МенеджерДействийСПакетамиДокументовИнтеграцииЭДО(ЭтоДокументыОблачногоЭДО);
	Возврат МенеджерДействий.ДобавитьДокументыВПакет(ИдентификаторПакета, ЭлектронныеДокументы, КонтекстДиагностики);
	
КонецФункции

// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - Неопределено - если контекст не инициализирован.
//                      - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. НовыйРезультатДействийСПакетом
Функция УдалитьДокументИзПакета(ИдентификаторПакета, ЭлектронныйДокумент, КонтекстДиагностики = Неопределено) Экспорт
	
	ЭтоДокументОблачногоЭДО = ЭлектронныеДокументыЭДО.ЭтоДокументОблачногоЭДО(ЭлектронныйДокумент);
	МенеджерДействий = МенеджерДействийСПакетамиДокументовИнтеграцииЭДО(ЭтоДокументОблачногоЭДО);
	Возврат МенеджерДействий.УдалитьДокументИзПакета(ИдентификаторПакета, ЭлектронныйДокумент, КонтекстДиагностики);
	
КонецФункции

// Получает состояния документов из пакета документов.
// Обратите внимание, что переменная, в которую записывается результат функции, не должна называться СостоянияДокументов
// Существуют прикладные решения, в которых есть одноименный общий модуль, с которым будут конфликты.
// 
// Пример как неправильно:
// СостоянияДокументов = ПакетыДокументовЭДО.СостоянияДокументовПакета(ИдентификаторПакета);
// 
// Один из возможных корректных вариантов:
// СостоянияДокументовПакета = ПакетыДокументовЭДО.СостоянияДокументовПакета(ИдентификаторПакета);
// 
// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция СостоянияДокументовПакета(ИдентификаторПакета) Экспорт
	
	ДокументыПакета = ДокументыПакета(ИдентификаторПакета);
	
	СостоянияПоДокументам = ЭлектронныеДокументыЭДО.СостоянияДокументов(ДокументыПакета);
	
	СостоянияДокументовПоЭДО = ОбщегоНазначения.ВыгрузитьКолонку(СостоянияПоДокументам, "Значение");
	
	Возврат СостоянияДокументовПоЭДО;
	
КонецФункции

// Параметры:
//  СостоянияДокументовПоЭДО - см. СостоянияДокументовПакета
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияДокументовЭДО
//
Функция СостояниеПакета(СостоянияДокументовПоЭДО) Экспорт
	
	Возврат СводноеСостояниеПакета(СостоянияДокументовПоЭДО);
	
КонецФункции

// Параметры:
//  СостоянияДокументовПоЭДО - см. СостоянияДокументовПакета
// 
// Возвращаемое значение:
//  Булево
//
Функция ДоступноИзменениеПакета(СостоянияДокументовПоЭДО) Экспорт
	
	Результат = Истина;
	
	Для Каждого Состояние Из СостоянияДокументовПоЭДО Цикл
		
		Если Состояние <> Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание
			И Состояние <> Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке
			И Состояние <> Перечисления.СостоянияДокументовЭДО.НеСформирован Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  СостоянияДокументовПоЭДО - см. СостоянияДокументовПакета
// 
// Возвращаемое значение:
//  Булево
//
Функция ДоступнаПодокументнаяРаботаСПакетом(СостоянияДокументовПоЭДО) Экспорт
	
	Возврат Не ДоступноИзменениеПакета(СостоянияДокументовПоЭДО);
	
КонецФункции

// Параметры:
//  МассивСостояний - Массив из ПеречислениеСсылка.СостоянияДокументовЭДО
//  ИдентификаторПакета - УникальныйИдентификатор
//  ВидОперации - Строка
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Булево
Функция СостоянияДокументовПакетаОднородны(МассивСостояний, ИдентификаторПакета, ВидОперации, КонтекстДиагностики) Экспорт
	
	Если СводноеСостояниеПакета(МассивСостояний) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВидОшибки = ВидОшибкиСостоянияДокументовПакетаНеоднородны();
	
	КраткоеПредставление = СтрШаблон(НСтр("ru = 'Операция ""%1"" недоступна для документов пакета.
		|Состояния документов пакета неоднородны.'"), ВидОперации);
	
	МассивСтрок = Новый Массив; // Массив из Строка
	МассивСтрок.Добавить(КраткоеПредставление);
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Идентификатор пакета: %1'"), ИдентификаторПакета));
	ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставление, КраткоеПредставление);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
	Возврат Ложь;
	
КонецФункции

// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  БлокировкаДанных
Функция БлокировкаПакетаДокументов(ИдентификаторПакета) Экспорт
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПакетыДокументовЭДО");
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторПакета", ИдентификаторПакета);
	Возврат Блокировка;
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  БлокировкаДанных
Функция БлокировкаСоставаПакетаДокумента(ЭлектронныйДокумент) Экспорт
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СоставПакетовДокументовЭДО");
	ЭлементБлокировки.УстановитьЗначение("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Возврат Блокировка;
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Процедура ДополнитьДокументамиПакетов(ЭлектронныеДокументы) Экспорт
	
	ИдентификаторыПакетовДокументов = ПакетыДокументовЭДОСлужебный.ИдентификаторыПакетовДокументов(ЭлектронныеДокументы);
	ИдентификаторыПакетов = ОбщегоНазначения.ВыгрузитьКолонку(ИдентификаторыПакетовДокументов, "Значение", Истина);
	ДокументыПакетов = ПакетыДокументовЭДОСлужебный.ДокументыПакетов(ИдентификаторыПакетов);
	
	Для Каждого ДокументыПоПакету Из ДокументыПакетов Цикл
		ДокументыПакета = ДокументыПоПакету.Значение;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЭлектронныеДокументы, ДокументыПакета, Истина);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  СвойстваДокументовДляОписанияПакета - см. ЭлектронныеДокументыЭДО.СвойстваДокументовДляОписанияПакетов
Процедура ЗагрузитьДокументыПакета(СвойстваДокументовДляОписанияПакета) Экспорт
	ПакетыДокументовЭДОСлужебный.ЗагрузитьДокументыПакета(СвойстваДокументовДляОписанияПакета);
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * ПоКонтрагенту - см. СервисНастроекЭДО.НовыеОграниченияОбъемаПакетаДокументов
//  * ПоОрганизации - см. СервисНастроекЭДО.НовыеОграниченияОбъемаПакетаДокументов
Функция НовыеОграниченияОбъемаПакетаДокументовУчастников() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПоКонтрагенту", СервисНастроекЭДО.НовыеОграниченияОбъемаПакетаДокументов());
	Результат.Вставить("ПоОрганизации", СервисНастроекЭДО.НовыеОграниченияОбъемаПакетаДокументов());
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ПараметрыПакета - Структура:
//						* ИдентификаторПакета - УникальныйИдентификатор
//						* ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
// Возвращаемое значение:
//  Структура:
//	* ОграниченияОбъемаПакетаДокументов - см. НовыеОграниченияОбъемаПакетаДокументовУчастников
//	* ОбъемПакетаДокументов - см. ПакетыДокументовЭДОКлиентСервер.НовыйОбъемПакетаДокументов
Функция ОграниченияИОбъемПакета(ПараметрыПакета) Экспорт
	
	ИдентификаторыОрганизацииИКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПараметрыПакета.ЭлектронныйДокумент, "ИдентификаторКонтрагента,ИдентификаторОрганизации");
	
	ИдентификаторОператораКонтрагента = УчетныеЗаписиЭДОКлиентСервер.ИдентификаторОператора(
		ИдентификаторыОрганизацииИКонтрагента.ИдентификаторКонтрагента);
	ОграниченияОбъемаПакетаКонтрагента =
		СервисНастроекЭДО.ОграниченияОбъемаПакетаДокументов(ИдентификаторОператораКонтрагента);
	
	ИдентификаторОператораОгранизации = УчетныеЗаписиЭДОКлиентСервер.ИдентификаторОператора(
		ИдентификаторыОрганизацииИКонтрагента.ИдентификаторОрганизации);
	ОграниченияОбъемаПакетаОгранизации =
		СервисНастроекЭДО.ОграниченияОбъемаПакетаДокументов(ИдентификаторОператораОгранизации);
	
	ОграниченияОбъемаПакетаДокументов = НовыеОграниченияОбъемаПакетаДокументовУчастников();
	ЗаполнитьЗначенияСвойств(ОграниченияОбъемаПакетаДокументов.ПоКонтрагенту, ОграниченияОбъемаПакетаКонтрагента);
	ЗаполнитьЗначенияСвойств(ОграниченияОбъемаПакетаДокументов.ПоОрганизации, ОграниченияОбъемаПакетаОгранизации);
	
	Результат = Новый Структура;
	Результат.Вставить("ОграниченияОбъемаПакетаДокументов", ОграниченияОбъемаПакетаДокументов);
	Результат.Вставить("ОбъемПакетаДокументов", ОбъемПакетаДокументов(ПараметрыПакета));
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу объектов учета электронных документов с размерами прикрепленных файлов сообщений
// электронных документов.
// 
// Параметры:
// ЭлектронныеДокументы - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//                      - Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на объект учета.
//   * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - актуальный электронный документ.
//   * Актуальный - Булево - признак актуальности электронного документа.
//	 * СпособОбработки - Строка - способ обработки.
//	 * Размер - Число - размер присоединенных файлов сообщений электронного документа
Функция ОбъектыУчетаЭлектронныхДокументовСРазмерамиФайлов(Знач ЭлектронныеДокументы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОбъектовУчетаЭлектронныхДокументовСРазмерамиФайлов();
	Запрос.Параметры.Вставить("ЭлектронныйДокумент", ЭлектронныеДокументы);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает предупреждение о превышении ограничений оператора ЭДО при создании электронных документов в массовой
// отправке файлов
// Параметры:
//  ОграниченияОбъемаПакетаДокументов - см. СервисНастроекЭДО.НовыеОграниченияОбъемаПакетаДокументов
//
// Возвращаемое значение:
//  Строка
Функция ТекстОПревышенииМаксимальногоРазмераПакетаПриСозданииДокумента(ОграниченияОбъемаПакетаДокументов) Экспорт
	
	Возврат
		СтрШаблон(НСтр("ru = 'Не удалось создать документ из-за ограничений оператора %1 (размер файла не более %2 Кб).'"), 
		ОграниченияОбъемаПакетаДокументов.ОператорЭДО, ОграниченияОбъемаПакетаДокументов.МаксимальныйРазмерПакетаЭД);
	
КонецФункции

// Возвращает текст предупреждения о превышении ограничения оператора ЭДО по количеству документов в пакете при отправке
// пакета документов
//
// Параметры:
//  ПредставлениеДокумента - Строка
//  ОграниченияОбъемаПакетаДокументов - см. СервисНастроекЭДО.НовыеОграниченияОбъемаПакетаДокументов
//
// Возвращаемое значение:
//  Строка
Функция ТекстОПревышенииМаксимальногоКоличестваДокументовПередОтправкой(ПредставлениеДокумента,
	ОграниченияОбъемаПакетаДокументов) Экспорт
	
	Возврат
		СтрШаблон(НСтр("ru = 'Невозвожно отправить пакет %1 из-за ограничений оператора %2 (не более %3 документов в пакете).
		|Удалите документы из пакета.'"), ПредставлениеДокумента,
		ОграниченияОбъемаПакетаДокументов.ОператорЭДО,
		ОграниченияОбъемаПакетаДокументов.МаксимальноеКоличествоЭДВПакете);
	
КонецФункции

// Возвращает текст предупреждения о превышении ограничения оператора ЭДО по размеру пакета при отправке пакета
// документов
//
// Параметры:
//  ПредставлениеДокумента - Строка
//  ОграниченияОбъемаПакетаДокументов - см. СервисНастроекЭДО.НовыеОграниченияОбъемаПакетаДокументов
//
// Возвращаемое значение:
//  Строка
Функция ТекстОПревышенииМаксимальногоРазмераПакетаПередОтправкой(ПредставлениеДокумента,
	ОграниченияОбъемаПакетаДокументов) Экспорт
	
	Возврат
		СтрШаблон(НСтр("ru = 'Невозвожно отправить пакет %1 из-за ограничений оператора %2 (размер пакета не более %3 Кб).
		|Удалите документы из пакета.'"), ПредставлениеДокумента,
		ОграниченияОбъемаПакетаДокументов.ОператорЭДО, ОграниченияОбъемаПакетаДокументов.МаксимальныйРазмерПакетаЭД);
	
КонецФункции

// Возвращает текст предупреждения о превышении ограничения оператора ЭДО по размеру пакета при отправке документа
//
// Параметры:
//  ПредставлениеДокумента - Строка
//  ОграниченияОбъемаПакетаДокументов - см. СервисНастроекЭДО.НовыеОграниченияОбъемаПакетаДокументов
//
// Возвращаемое значение:
//  Строка
Функция ТекстОПревышенииМаксимальногоРазмераДокументаПередОтправкой(ПредставлениеДокумента,
	ОграниченияОбъемаПакетаДокументов) Экспорт
	
	Возврат
		СтрШаблон(НСтр("ru = 'Невозвожно отправить документ %1 из-за ограничений оператора %2 (размер пакета не более %3 Кб).
		|Переформируйте документ меньшим размером.'"), ПредставлениеДокумента,
		ОграниченияОбъемаПакетаДокументов.ОператорЭДО, ОграниченияОбъемаПакетаДокументов.МаксимальныйРазмерПакетаЭД);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  ЭтоОблачныйЭДО - Булево
// 
// Возвращаемое значение:
//  ОбщийМодуль
Функция МенеджерДействийСПакетамиДокументовИнтеграцииЭДО(ЭтоОблачныйЭДО = Ложь)
	
	Если ЭтоОблачныйЭДО Тогда
		ОбщийМодульПакетыДокументовЭДОИнтеграцияОблака = ОбщегоНазначения.ОбщийМодуль(
			"ПакетыДокументовЭДОИнтеграцияОблака");
		Возврат ОбщийМодульПакетыДокументовЭДОИнтеграцияОблака.МенеджерДействийСПакетамиДокументовИнтеграцииОблачногоЭДО();
	Иначе
		Возврат ПакетыДокументовЭДОСлужебный;
	КонецЕсли;
	
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаИдентификатораПакетаДокумента()
	Возврат 
		"ВЫБРАТЬ
		|	СоставПакетовЭлектронныхДокументов.ИдентификаторПакета КАК ИдентификаторПакета
		|ИЗ
		|	РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовЭлектронныхДокументов
		|ГДЕ
		|	СоставПакетовЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент";
КонецФункции

// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  РезультатЗапроса
Функция РезультатЗапросаДокументовПакета(ИдентификаторПакета)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторПакета", ИдентификаторПакета);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставПакетовЭлектронныхДокументов.ЭлектронныйДокумент КАК ЭлектронныйДокумент
		|ИЗ
		|	РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовЭлектронныхДокументов
		|ГДЕ
		|	СоставПакетовЭлектронныхДокументов.ИдентификаторПакета = &ИдентификаторПакета";
	Возврат Запрос.Выполнить();
КонецФункции

// Возвращаемое значение:
//  См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиСостоянияДокументовПакетаНеоднородны()
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "СостоянияДокументовПакетаНеоднородны";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Состояние документов пакета неоднородно'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = 'Выполнить действие отдельно для электронного документа'");
	Возврат ВидОшибки;
КонецФункции

// Параметры:
//  СоставПакета - СписокЗначений из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ТекущийДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КоличествоОтображаемыхДокументовПакета - Число
// 
// Возвращаемое значение:
//  Структура:
//  * ИндексНачалоВыводаЭлементов - Число
//  * ИндексКонцаВыводаЭлементов - Число
Функция ГраницыВыводаДокументовПакета(СоставПакета, ТекущийДокумент, КоличествоОтображаемыхДокументовПакета)
	
	ИндексДокумента = 1;
	
	Для Каждого Документ Из СоставПакета Цикл
		Если Документ.Значение = ТекущийДокумент Тогда
			Прервать;
		КонецЕсли;
		ИндексДокумента = ИндексДокумента + 1;
	КонецЦикла;
	
	ВсегоДокументов = СоставПакета.Количество();
	КоличествоОтображаемыхДокументов = ?(ВсегоДокументов < КоличествоОтображаемыхДокументовПакета, ВсегоДокументов,
		КоличествоОтображаемыхДокументовПакета);
	КоличествоДокументовСправа = ВсегоДокументов - ИндексДокумента;
	
	ПозицияДокументаНаПанели = ?(КоличествоОтображаемыхДокументов - КоличествоДокументовСправа
		< КоличествоОтображаемыхДокументов - 1, 1, КоличествоОтображаемыхДокументов - КоличествоДокументовСправа);	
	ДополнительноВыводимыхСправа = КоличествоОтображаемыхДокументов - ПозицияДокументаНаПанели;	
	ДополнительноВыводимыхСлева = ПозицияДокументаНаПанели - 1;
	
	Результат = Новый Структура;
	Результат.Вставить("ИндексНачалоВыводаЭлементов", ИндексДокумента - ДополнительноВыводимыхСлева);
	Результат.Вставить("ИндексКонцаВыводаЭлементов", ИндексДокумента + ДополнительноВыводимыхСправа);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//	ПараметрыПакета - Структура:
//						* ИдентификаторПакета - УникальныйИдентификатор
//						* ЭлектронныйДокумент - Неопределено
//											  - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
// Возвращаемое значение:
//	см. ПакетыДокументовЭДОКлиентСервер.НовыйОбъемПакетаДокументов
Функция ОбъемПакетаДокументов(ПараметрыПакета)
	
	Результат = ПакетыДокументовЭДОКлиентСервер.НовыйОбъемПакетаДокументов();
	
	Если ЗначениеЗаполнено(ПараметрыПакета.ИдентификаторПакета) Тогда
		
		ДокументыПакета = ДокументыПакета(ПараметрыПакета.ИдентификаторПакета);
		Результат.КоличествоДокументов = ДокументыПакета.Количество();
		Результат.РазмерПакета = ЭлектронныеДокументыЭДО.РазмерПрисоединенныхФайловДокументов(ДокументыПакета);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыПакета.ЭлектронныйДокумент) Тогда
		
		Результат.КоличествоДокументов = 1;
		Результат.РазмерПакета = ЭлектронныеДокументыЭДО.РазмерПрисоединенныхФайловДокументов(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыПакета.ЭлектронныйДокумент));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//	Строка
Функция ТекстЗапросаОбъектовУчетаЭлектронныхДокументовСРазмерамиФайлов()
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ИнтеграцияЭДО.ТекстЗапросаОбъектовУчетаЭлектронныхДокументов());
	СхемаЗапроса.ПакетЗапросов[0].ТаблицаДляПомещения = "ОбъектыУчетаДокументовЭДО";
	
	СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	СхемаЗапроса.ПакетЗапросов[1].УстановитьТекстЗапроса(
		ЭлектронныеДокументыЭДО.ТекстЗапросаРазмерПрисоединенныхФайловДокументов());
	СхемаЗапроса.ПакетЗапросов[1].ТаблицаДляПомещения = "РазмерыЭлектронныхДокументов";
	
	СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	СхемаЗапроса.ПакетЗапросов[2].УстановитьТекстЗапроса(
	"ВЫБРАТЬ
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК ОбъектУчета,
	|	ОбъектыУчетаДокументовЭДО.СпособОбработки КАК СпособОбработки,
	|	ОбъектыУчетаДокументовЭДО.Актуальный КАК Актуальный,
	|	ЕСТЬNULL(РазмерыЭлектронныхДокументов.Размер, 0) КАК Размер
	|ИЗ
	|	ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РазмерыЭлектронныхДокументов КАК РазмерыЭлектронныхДокументов
	|		ПО ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = РазмерыЭлектронныхДокументов.ЭлектронныйДокумент");
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

#Область СостояниеПакета

// Параметры:
//  МассивСостояний - Массив из ПеречислениеСсылка.СостоянияДокументовЭДО
// Возвращаемое значение:
//  - Неопределено - если состояние неоднородно.
//  - ПеречислениеСсылка.СостоянияДокументовЭДО - состояние пакета документа.
//
Функция СводноеСостояниеПакета(МассивСостояний)
	
	СостояниеПакета = Неопределено;
	
	ПорядокСостояний = Новый ТаблицаЗначений;
	ПорядокСостояний.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	ПорядокСостояний.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияДокументовЭДО"));
	
	ТолькоОсновной = Ложь;
	ТолькоОтклонение = Ложь;
	ТолькоАннулирование = Ложь;
	СостоянияОдинаковы = Истина;
	
	ЭтоПерваяИтерация = Истина;
	ПредыдущееСостояние = Перечисления.СостоянияДокументовЭДО.ПустаяСсылка();
	
	Для Каждого Состояние Из МассивСостояний Цикл
		
		Если Не ЭтоПерваяИтерация Тогда
			Если ПредыдущееСостояние <> Состояние Тогда
				СостоянияОдинаковы = Ложь
			КонецЕсли;
			Если Не (СостоянияОдинаковы ИЛИ ТолькоОсновной ИЛИ ТолькоОтклонение ИЛИ ТолькоАннулирование) Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		ПредыдущееСостояние = Состояние;
		
		Если ТолькоОсновной ИЛИ ЭтоПерваяИтерация Тогда
			
			Порядок = ПорядокСостоянияОсновной(Состояние);
			Если Порядок > 0 Тогда
				ТолькоОсновной = Истина;
				ДобавитьПорядокСостояния(ПорядокСостояний, Порядок, Состояние);
				ЭтоПерваяИтерация = Ложь;
				Продолжить;
			ИначеЕсли ТолькоОсновной Тогда
				ТолькоОсновной = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТолькоОтклонение ИЛИ ЭтоПерваяИтерация Тогда
			
			Порядок = ПорядокСостоянияОтклонение(Состояние);
			Если Порядок > 0 Тогда
				ТолькоОтклонение = Истина;
				ДобавитьПорядокСостояния(ПорядокСостояний, Порядок, Состояние);
				ЭтоПерваяИтерация = Ложь;
				Продолжить;
			ИначеЕсли ТолькоОтклонение Тогда
				ТолькоОтклонение = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТолькоАннулирование ИЛИ ЭтоПерваяИтерация Тогда
			
			Порядок = ПорядокСостоянияАннулирование(Состояние);
			Если Порядок > 0 Тогда
				ТолькоАннулирование = Истина;
				ДобавитьПорядокСостояния(ПорядокСостояний, Порядок, Состояние);
				ЭтоПерваяИтерация = Ложь;
				Продолжить;
			ИначеЕсли ТолькоАннулирование Тогда
				ТолькоАннулирование = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		ЭтоПерваяИтерация = Ложь;
		
	КонецЦикла;
	
	Если СостоянияОдинаковы Тогда
		СостояниеПакета = ПредыдущееСостояние;
	ИначеЕсли ЗначениеЗаполнено(ПорядокСостояний)
		И (ТолькоОсновной ИЛИ ТолькоОтклонение ИЛИ ТолькоАннулирование) Тогда
		ПорядокСостояний.Сортировать("Порядок");
		СостояниеПакета = ПорядокСостояний[0].Состояние;
	КонецЕсли;
	
	Возврат СостояниеПакета;
	
КонецФункции

// Параметры:
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//
// Возвращаемое значение:
//  Число
//
Функция ПорядокСостоянияОсновной(Состояние)
	Порядок = 0;
	Если Состояние = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения Тогда
		Порядок = 1;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения Тогда
		Порядок = 2;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение Тогда
		Порядок = 3;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание Тогда
		Порядок = 4;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке Тогда
		Порядок = 5;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка Тогда
		Порядок = 6;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении Тогда
		Порядок = 7;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения Тогда
		Порядок = 8;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения Тогда
		Порядок = 9;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения Тогда
		Порядок = 10;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение Тогда
		Порядок = 11;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора Тогда
		Порядок = 12;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении Тогда
		Порядок = 13;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением Тогда
		Порядок = 14;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен Тогда
		Порядок = 15;
	КонецЕсли;
	Возврат Порядок;
КонецФункции

// Параметры:
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//
// Возвращаемое значение:
//  Число
//
Функция ПорядокСостоянияОтклонение(Состояние)
	Порядок = 0;
	Если Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения Тогда
		Порядок = 1;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения Тогда
		Порядок = 2;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения Тогда
		Порядок = 3;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеПоОтклонению Тогда
		Порядок = 4;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению Тогда
		Порядок = 5;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению Тогда
		Порядок = 6;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещенияПоОтклонению Тогда
		Порядок = 7;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение Тогда
		Порядок = 8;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению Тогда
		Порядок = 9;
	КонецЕсли;
	Возврат Порядок;
КонецФункции

// Параметры:
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//
// Возвращаемое значение:
//  Число
//
Функция ПорядокСостоянияАннулирование(Состояние)
	Порядок = 0;
	Если Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования Тогда
		Порядок = 1;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования Тогда
		Порядок = 2;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования Тогда
		Порядок = 3;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования Тогда
		Порядок = 4;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования Тогда
		Порядок = 5;
	КонецЕсли;
	Возврат Порядок;
КонецФункции

// Параметры:
//  ПорядокСостояний - ТаблицаЗначений:
//  * Порядок - Число
//  * Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//  Порядок - Число
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//
Процедура ДобавитьПорядокСостояния(ПорядокСостояний, Порядок, Состояние)
	НоваяСтрока = ПорядокСостояний.Добавить();
	НоваяСтрока.Порядок = Порядок;
	НоваяСтрока.Состояние = Состояние;
КонецПроцедуры

#КонецОбласти

#КонецОбласти
