///////////////////////////////////////////////////////////////
// Модуль "ОтложенныеЗадания" содержит процедуры и функции для
// работы с механизмом отложенных заданий.
//
///////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обрабатывает задания.
//
// Параметры:
//  Задания - Структура - ключ: имя регистра сведений очереди заданий
//                        значение: - Структура       - ключи совпадают с именам измерений, ресурсов
//                                                      и реквизитов регистра заданий.
//                                  - ТаблицаЗначений - имена колонок совпадают с именам измерений, ресурсов
//                                                      и реквизитов регистра сведений заданий.
//  СгенерироватьИдентификаторЗаписи - Булево - если ИСТИНА, тогда идентификатор записи будет сгенерирован
//                                              автоматически. По умолчанию ИСТИНА.
//
Процедура Обработать(Задания, СгенерироватьИдентификаторЗаписи = Истина) Экспорт
	
	ТаблицаЗаданий = ИнициализироватьТаблицуЗаданий(Задания);
	
	Добавить(Задания, СгенерироватьИдентификаторЗаписи, ТаблицаЗаданий);
	
	Запустить(ТаблицаЗаданий);
	
КонецПроцедуры

// Обрабатывает задания очереди.
//
// Параметры:
//  Очередь - Строка - имя регистра сведений очереди заданий
//  Данные - Структура, ТаблицаЗначений - ключи структуры и имена колонок таблицы совпадают с именам измерений,
//                                        ресурсов и реквизитов регистра заданий.
//  СгенерироватьИдентификаторЗаписи - Булево - если ИСТИНА, тогда идентификатор записи будет сгенерирован
//                                              автоматически. По умолчанию ИСТИНА.
//
Процедура ОбработатьЗаданияОчереди(Очередь, Данные, СгенерироватьИдентификаторЗаписи = Истина) Экспорт
	
	ТаблицаЗаданий = ИнициализироватьТаблицуЗаданий(Очередь);
	
	ДобавитьЗаданияВОчередь(Очередь, Данные, СгенерироватьИдентификаторЗаписи, ТаблицаЗаданий);
	
	Запустить(ТаблицаЗаданий);
	
КонецПроцедуры

// Добавляет задания.
//
// Параметры:
//  Задания - Структура - ключ: имя регистра сведений очереди заданий
//                        значение: - Структура       - ключи совпадают с именам измерений, ресурсов
//                                                      и реквизитов регистра заданий.
//                                  - ТаблицаЗначений - имена колонок совпадают с именам измерений, ресурсов
//                                                      и реквизитов регистра сведений заданий.
//  СгенерироватьИдентификаторЗаписи - см. ДобавитьЗаданияВОчередь.СгенерироватьИдентификаторЗаписи
//  ТаблицаЗаданий                   - см. ДобавитьЗаданияВОчередь.ТаблицаЗаданий
//
//
Процедура Добавить(Задания, СгенерироватьИдентификаторЗаписи = Ложь, ТаблицаЗаданий = Неопределено) Экспорт
	
	Если Задания.Количество() = 1 Тогда
		
		Для каждого Задание Из Задания Цикл
			
			ДобавитьЗаданияВОчередь(Задание.Ключ, Задание.Значение, СгенерироватьИдентификаторЗаписи, ТаблицаЗаданий);
			
		КонецЦикла;
		
	Иначе
		
		ТаблицаОчередей = ОчередиЗаданий();
		ТаблицаОчередей.Индексы.Добавить("Очередь");
		
		СписокОчередей = Новый СписокЗначений;
		Для каждого Задание Из Задания Цикл
			
			Очередь      = Задание.Ключ;
			ИндексСтроки = ТаблицаОчередей.НайтиСтроки(Новый Структура("Очередь", Очередь))[0].ИндексСтроки;
			
			СписокОчередей.Добавить(ИндексСтроки, Очередь);
			
		КонецЦикла;
		
		СписокОчередей.СортироватьПоЗначению();
		Для каждого ЭлементОчередь Из СписокОчередей Цикл
			
			Очередь = ЭлементОчередь.Представление;
			
			ДобавитьЗаданияВОчередь(Очередь, Задания[Очередь], СгенерироватьИдентификаторЗаписи, ТаблицаЗаданий);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет задания в очередь.
//
// Параметры:
//  Очередь - Строка - имя регистра сведений очереди заданий
//  Данные - Структура, ТаблицаЗначений - ключи структуры и имена колонок таблицы совпадают с именам измерений,
//                                        ресурсов и реквизитов регистра заданий.
//  СгенерироватьИдентификаторЗаписи - Булево - если ИСТИНА, тогда идентификатор записи будет сгенерирован
//                                              автоматически. По умолчанию ЛОЖЬ.
//  ТаблицаЗаданий - ТаблицаЗначений - см. ИнициализироватьТаблицуЗаданий
//                                     1. В файловой базе:
//                                     1.1 если параметр очереди ВыполнитьВТранзакцииВФайловойБазе = ИСТИНА, тогда
//                                         задания добавляются в колонку Задания в соответсвующей очереди строке,
//                                     1.2 если параметр очереди ВыполнитьВТранзакцииВФайловойБазе = ЛОЖЬ, тогда:
//                                     1.2.1 задания добавляются в колонку Задания в соответсвующей очереди строке,
//                                     1.2.2 задания добавляются в регистр сведений очереди заданий,
//                                     2. в клиент-серверной базе:
//                                     2.1 задания добавляются в колонку Задания в соответсвующей очереди строке,
//                                     2.2 задания добавляются в регистр сведений очереди заданий.
//                 - Неопределено - 1. В файловой базе задания передаются на выполнения,
//                                  2. в клиент-серверной базе задания добавляются в регистр сведений очереди заданий.
//                                  По умолчанию Неопределено.
//
Процедура ДобавитьЗаданияВОчередь(
			Очередь,
			Данные,
			СгенерироватьИдентификаторЗаписи = Ложь,
			ТаблицаЗаданий = Неопределено) Экспорт
	
	ТипДанных          = ТипЗнч(Данные);
	ТипТаблицаЗначений = Тип("ТаблицаЗначений");
	ТипСтруктура       = Тип("Структура");
	
	Если ТипДанных <> ТипТаблицаЗначений И ТипДанных <> ТипСтруктура Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный тип данных ""%1"" отложенного задания.'"), ТипДанных);
	КонецЕсли;
	
	ТекущаяТаблицаЗаданий = Неопределено;
	
	ОтборОчередь = Новый Структура("Очередь", Очередь);
	
	ТаблицаОчереди = ОчередиЗаданий().Скопировать(ОтборОчередь, ПоляЗапуска());
	
	ЗапуститьВыполненияЗаданий = ТаблицаОчереди.Колонки.Найти("ВыполнитьВТранзакцииВФайловойБазе") <> Неопределено;
	
	Если ЗапуститьВыполненияЗаданий Тогда
		
		ТаблицаЗаданийКВыполнению = ?(ТаблицаЗаданий = Неопределено,
										ИнициализироватьТаблицуЗаданий(Очередь),
										ТаблицаЗаданий);
		
		Если ТаблицаОчереди[0].ВыполнитьВТранзакцииВФайловойБазе Или ОбщегоНазначения.РежимОтладки() Тогда
			ИсточникЗаданий       = ТаблицаЗаданийКВыполнению.НайтиСтроки(ОтборОчередь)[0].Задания;
		Иначе
			ИсточникЗаданий       = РегистрыСведений[Очередь].СоздатьНаборЗаписей();
			ТекущаяТаблицаЗаданий = ТаблицаЗаданийКВыполнению.НайтиСтроки(ОтборОчередь)[0].Задания;
		КонецЕсли;
		
	Иначе
		
		ИсточникЗаданий = РегистрыСведений[Очередь].СоздатьНаборЗаписей();
		
		Если ЗначениеЗаполнено(ТаблицаЗаданий) Тогда
			ТекущаяТаблицаЗаданий = ТаблицаЗаданий.НайтиСтроки(ОтборОчередь)[0].Задания;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ИсточникЗаданий) = ТипТаблицаЗначений Тогда
		
		Если ТипДанных = Тип("ТаблицаЗначений") Тогда
			
			Для каждого СтрокаДанных Из Данные Цикл
				СтрокаИсточник = ИсточникЗаданий.Добавить();
				ЗаполнитьСтрокуИсточникаЗаданий(СтрокаИсточник, СтрокаДанных, СгенерироватьИдентификаторЗаписи);
			КонецЦикла;
			
		ИначеЕсли ТипДанных = Тип("Структура") Тогда
			
			СтрокаИсточник = ИсточникЗаданий.Добавить();
			ЗаполнитьСтрокуИсточникаЗаданий(СтрокаИсточник, Данные, СгенерироватьИдентификаторЗаписи);
			
		КонецЕсли;
		
	Иначе
		
		КоличествоЗаписей = 0;
		
		НачатьТранзакцию();
		
		Попытка
			
			Если ТипДанных = ТипТаблицаЗначений Тогда
				
				Для каждого СтрокаДанных Из Данные Цикл
					
					СтрокаИсточник = ИсточникЗаданий.Добавить();
					ЗаполнитьСтрокуИсточникаЗаданий(СтрокаИсточник, СтрокаДанных, СгенерироватьИдентификаторЗаписи);
					
					Если ТекущаяТаблицаЗаданий <> Неопределено тогда
						ЗаполнитьЗначенияСвойств(ТекущаяТаблицаЗаданий.Добавить(), СтрокаИсточник);
					КонецЕсли;
					
					КоличествоЗаписей = КоличествоЗаписей + 1;
					Если КоличествоЗаписей = 1000 Тогда
						
						УстановитьПривилегированныйРежим(Истина);
						ИсточникЗаданий.Записать(Ложь);
						УстановитьПривилегированныйРежим(Ложь);
						
						ИсточникЗаданий = РегистрыСведений[Очередь].СоздатьНаборЗаписей();
						
						КоличествоЗаписей = 0;
						
					КонецЕсли;
					
				КонецЦикла;
				
			ИначеЕсли ТипДанных = ТипСтруктура Тогда
				
				СтрокаИсточник = ИсточникЗаданий.Добавить();
				ЗаполнитьСтрокуИсточникаЗаданий(СтрокаИсточник, Данные, СгенерироватьИдентификаторЗаписи);
				
				Если ТекущаяТаблицаЗаданий <> Неопределено тогда
					ЗаполнитьЗначенияСвойств(ТекущаяТаблицаЗаданий.Добавить(), СтрокаИсточник);
				КонецЕсли;
				
				КоличествоЗаписей = КоличествоЗаписей + 1;
				
			КонецЕсли;
			
			Если КоличествоЗаписей > 0 Тогда
			
				УстановитьПривилегированныйРежим(Истина);
				ИсточникЗаданий.Записать(Ложь);
				УстановитьПривилегированныйРежим(Ложь);
			
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		
		Исключение
			
			ОтменитьТранзакцию();
			
			ЗаписатьОшибкуВЖурналРегистрации(
				Очередь,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			КраткоеПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось добавить запись в регистр очереди ""%1"" по причине:
													|%2.'"), Очередь, КраткоеПредставлениеОшибки);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если ЗапуститьВыполненияЗаданий И ТаблицаЗаданий = Неопределено Тогда
	
		Запустить(ТаблицаЗаданийКВыполнению);
		
	КонецЕсли;
	
КонецПроцедуры

// Запускает выполнения заданий.
//
// Параметры:
//  Очереди - Строка, Массив из Строка, ТаблицаЗначений, Неопределено -
//             1. Строка           - имя регистра сведений очереди заданий
//             2. Массив из Строка - имена регистров сведений очередей заданий
//             3. ТаблицаЗаданий   - см. ИнициализироватьТаблицуЗаданий
//             4. Неопределено     - запускает все очереди.
//
Процедура Запустить(Знач Очереди = Неопределено) Экспорт
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	РежимОтладки               = ОбщегоНазначения.РежимОтладки();
	
	ТипОчереди = ТипЗнч(Очереди);
	
	ТаблицаОчередей = Неопределено;
	
	Если ТипОчереди = Тип("ТаблицаЗначений") Тогда
		
		ОчередиЗаданий = ОчередиЗаданий().Скопировать(, ПоляЗапуска());
		ОчередиЗаданий.Индексы.Добавить("Очередь");
		
		ТаблицаОчередей = Очереди;
		ТаблицаОчередей.Колонки.Добавить("ИндексСтроки", ОчередиЗаданий.Колонки.ИндексСтроки.ТипЗначения);
		
		Если ОчередиЗаданий.Колонки.Найти("ВыполнитьВТранзакцииВФайловойБазе") <> Неопределено Тогда
			
			ТаблицаОчередей.Колонки.Добавить(
				"ВыполнитьВТранзакцииВФайловойБазе",
				ОчередиЗаданий.Колонки.ВыполнитьВТранзакцииВФайловойБазе.ТипЗначения);
			
		КонецЕсли;
		
		Для каждого СтрокаТаблицы Из ТаблицаОчередей Цикл
			
			ЗаполнитьЗначенияСвойств(
				СтрокаТаблицы,
				ОчередиЗаданий.НайтиСтроки(Новый Структура("Очередь", СтрокаТаблицы.Очередь))[0]);
			
		КонецЦикла;
		
		Если РежимОтладки Тогда
			ТаблицаОчередей.ЗаполнитьЗначения(Истина, "ВыполнитьВТранзакцииВФайловойБазе");
		КонецЕсли;
		
		Если ТаблицаОчередей.Количество() > 1 Тогда
			ТаблицаОчередей.Сортировать("ИндексСтроки", Новый СравнениеЗначений);
		КонецЕсли;
		
	ИначеЕсли Не ИнформационнаяБазаФайловая И Не РежимОтладки Тогда
		
		Если ТипОчереди = Тип("Строка") Тогда
			
			ТаблицаОчередей = ОчередиЗаданий().Скопировать(Новый Структура("Очередь", Очереди), ПоляЗапуска());
			
		ИначеЕсли ТипОчереди = Тип("Массив") Тогда
			
			Если Очереди.Количество() = 1 Тогда
				
				ТаблицаОчередей = ОчередиЗаданий().Скопировать(Новый Структура("Очередь", Очереди[0]), ПоляЗапуска());
				
			Иначе
				
				ОчередиЗаданий = ОчередиЗаданий().Скопировать(, ПоляЗапуска());
				ОчередиЗаданий.Индексы.Добавить("Очередь");
				
				ТаблицаОчередей = ОчередиЗаданий.СкопироватьКолонки();
				
				Для каждого Очередь Из Очереди Цикл
					
					ЗаполнитьЗначенияСвойств(
						ТаблицаОчередей.Добавить(),
						ОчередиЗаданий.НайтиСтроки(Новый Структура("Очередь", Очередь))[0]);
					
				КонецЦикла;
				
				ТаблицаОчередей.Сортировать("ИндексСтроки", Новый СравнениеЗначений);
				
			КонецЕсли;
			
		Иначе
			
			ТаблицаОчередей = ОчередиЗаданий().Скопировать(, ПоляЗапуска());
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаОчередей <> Неопределено Тогда
		
		Если ИнформационнаяБазаФайловая Или РежимОтладки Тогда
			
			ЗапуститьВФайловойБазе(ТаблицаОчередей);
			
		Иначе
			
			ВыполнитьСтарт(ТаблицаОчередей);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает описание ошибки выполнения задания
//
// Параметры:
//  Поля          - Структура - имена и представления полей участвующих в формировании описания ошибки
//  Данные        - Структура, ВыборкаИзРезультатаЗапроса, СтрокаТаблицыЗначений - данные задания
//  ТекстОшибки   - Строка - текст ошибки
//
// Возвращаемое значение:
//  Строка - текст ошибки
//
Функция ТекстОшибкиВыполнения(Поля, Данные, ТекстОшибки) Экспорт
	
	ТекстыОшибок    = Новый Массив;
	ОписаниеЗадания = Новый Массив;
	
	ТекстыОшибок.Добавить(ТекстОшибки);
	
	СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	Если СообщенияПользователю.Количество() > 0 Тогда
		
		ТекстыОшибок.Добавить("");
		
		Для каждого Сообщение Из СообщенияПользователю Цикл
			ТекстыОшибок.Добавить(Сообщение.Текст);
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого Поле Из Поля Цикл
		
		Имя           = Поле.Ключ;
		Представление = Поле.Значение;
		
		Если Не ЗначениеЗаполнено(Представление) Тогда
			Представление = Имя;
		КонецЕсли;
		
		ОписаниеЗадания.Добавить(СтрШаблон("%1: %2", Представление, Данные[Имя]));
		
	КонецЦикла;
	
	ШаблонОшибки = НСтр("ru = 'Ошибка обработки задания:
							   |
							   |%1
							   |
							   |%2'");
	
	Разделитель  = ";
					|";
	
	Возврат СтрШаблон(ШаблонОшибки, СтрСоединить(ОписаниеЗадания, Разделитель), СтрСоединить(ТекстыОшибок, Символы.ПС));
	
КонецФункции

// Инициализирует таблицу заданий, которую можно передать на вход метода см. Запустить
// 
// Параметры:
//  Очереди - Строка, Массив из Строка, Структура, Неопределено - очереди, для которых нужно инициализировать таблицу
//                                                                заданий. Если Неопределено, тогда возвращаемая таблица
//                                                                не инициализирует конкретные очереди.
//                                                                По умолчанию Неопределено.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица заданий:
//   * Очередь - Строка - имя регистра сведений очереди заданий.
//   * Задания - ТаблицаЗначений - колонки таблицы значений соответствуют структуре регистра сведений очереди заданий.
//
Функция ИнициализироватьТаблицуЗаданий(Очереди = Неопределено) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Очередь", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Таблица.Колонки.Добавить("Задания", Новый ОписаниеТипов("ТаблицаЗначений"));
	Таблица.Индексы.Добавить("Очередь");
	
	Если ЗначениеЗаполнено(Очереди) Тогда
		
		ТипОчереди = ТипЗнч(Очереди);
		
		Если ТипОчереди = Тип("Строка") Тогда
			
			СтрокаТаблицы = Таблица.Добавить();
			СтрокаТаблицы.Очередь = Очереди;
			СтрокаТаблицы.Задания = РегистрыСведений[Очереди].СоздатьНаборЗаписей().ВыгрузитьКолонки();
			
		ИначеЕсли ТипОчереди = Тип("Массив") Тогда
			
			Для каждого Очередь Из Очереди Цикл
				
				СтрокаТаблицы = Таблица.Добавить();
				СтрокаТаблицы.Очередь = Очередь;
				СтрокаТаблицы.Задания = РегистрыСведений[Очередь].СоздатьНаборЗаписей().ВыгрузитьКолонки();
				
			КонецЦикла;
			
		Иначе
			
			Для каждого ЭлементОчередь Из Очереди Цикл
				
				Очередь = ЭлементОчередь.Ключ;
				
				СтрокаТаблицы = Таблица.Добавить();
				СтрокаТаблицы.Очередь = Очередь;
				СтрокаТаблицы.Задания = РегистрыСведений[Очередь].СоздатьНаборЗаписей().ВыгрузитьКолонки();
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

// Проверяет, добавляет таблицу заданий очереди
// 
// Параметры:
//  Очередь - см. ДобавитьЗаданияВОчередь.Очередь
//  Таблица - см. ИнициализироватьТаблицуЗаданий
// 
// Возвращаемое значение:
//  ТаблицаЗначений - колонки таблицы значений соответствуют структуре регистра сведений очереди заданий.
//
Функция ПроверитьДобавитьТаблицуЗаданий(Очередь, Таблица) Экспорт
	
	НайденныеСтроки = Таблица.НайтиСтроки(Новый Структура("Очередь", Очередь));
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы.Очередь = Очередь;
		СтрокаТаблицы.Задания = РегистрыСведений[Очередь].СоздатьНаборЗаписей().ВыгрузитьКолонки();
		
	Иначе
		
		СтрокаТаблицы = НайденныеСтроки[0];
		
	КонецЕсли;
	
	Возврат СтрокаТаблицы.Задания;
	
КонецФункции

// Возвращает таблицу заданий очереди.
//
// Параметры:
//  Очередь - Строка    - имя регистра сведений очереди заданий.
//  Отбор   - Структура - структура отбора записей регистра сведений очереди заданий:
//                        ключи    - имена измерений, ресурсов, реквизитов регистра сведений очереди заданий,
//                        значение - единичное значение или массив значений.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица заданий очереди.
//
Функция ПолучитьЗадания(Очередь, Отбор) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	ОчередьЗаданий КАК Таблица
	|ГДЕ
	|	&Отбор
	|";
	
	ТекстыОтбора = Новый Массив;
	
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		ИмяПоля      = ЭлементОтбора.Ключ;
		ЗначениеПоля = ЭлементОтбора.Значение;
		
		ШаблонОтбора = ?(ТипЗнч(ЗначениеПоля) = Тип("Массив"), "Таблица.%1 В (&%1)", "Таблица.%1 = &%1");
		
		ТекстыОтбора.Добавить(СтрШаблон(ШаблонОтбора, ИмяПоля));
		
		Запрос.УстановитьПараметр(ИмяПоля, ЗначениеПоля);
		
	КонецЦикла;
	
	Разделитель = " И
				  |";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОчередьЗаданий", СтрШаблон("%1.%2", "РегистрСведений", Очередь));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отбор",         СтрСоединить(ТекстыОтбора, Разделитель));
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	Задания = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Задания;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает таблицу очередей заданий.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Очереди заданий:
//   * Очередь                           - Строка - имя регистра сведений очереди заданий.
//   * ИмяМетода                         - Строка - имя метода выполнения заданий, принцип формирования аналогично
//                                                  аргументу ИмяМетода метода ОбщегоНазначения.ВыполнитьМетодКонфигурации
//                                                  (см. ОбщегоНазначения.ВыполнитьМетодКонфигурации.ИмяМетода).
//   * УказательДействия                 - Строка - имя поля регистра очереди заданий, который определяет имя метода
//                                                  выполнения заданий. Задания будут выполнены в разрезе данного поля.
//                                                  Указатель действия должен быть включен в список аналитики расчета
//                                                  (параметр АналитикаРасчета).
//                                                  Имеет смысл, если ИмяМетода не заполнена.
//   * ИменаМетодовПоЗначениямУказателя  - Соответствие из КлючИЗначение - настраивается соответствие значений 
//                                                  УказательДействия с именами методов выполнения заданий
//                                                  (см. ДобавитьВложеннуюОчередь).
//                                                  Имеет смысл, если ИмяМетода не заполнена.
//   * Многопоточный                     - Булево - признак многопоточного выполнения заданий в очереди.
//   * КоличествоПотоков                 - Число  - количество потоков (фоновых заданий) для выполнения отложенных
//                                                  заданий очереди, по умолчанию 4
//                                                  (см. ОтложенныеЗаданияПереопределяемый.КоличествоПотоковПоУмолчанию).
//   * МаксимальноеКоличествоПотоков     - Число  - максимальное количество потоков (фоновых заданий) которые можно
//                                                  запустить для выполнения заданий данной очереди. Имеет смысл для
//                                                  очередей с вложенными очередями
//                                                  (как пример очередь "УниверсальнаяОчередьОперативныхЗаданий").
//                                                  Если 0, тогда максимальное количество потоков не контролируется.
//                                                  По умолчанию 0.
//   * ПорцияРасчета                     - Число  - количество заданий, которые нужно передать в рабочий поток,
//                                                  по умолчанию 100
//                                                  (см. ОтложенныеЗаданияПереопределяемый.ПорцияРасчетаПоУмолчанию).
//   * РежимРаспределенияЗаданий         - Строка - режим распределения заданий по потокам:
//                                                   1. "РАВНОМЕРНО_ПО_ПОТОКАМ" - задания равномерно распределяются
//                                                                                по свободным потокам,
//                                                   2. "МАКСИМУМ_ЗАДАНИЙ_В_ПОТОК" - в поток передаются максимальное
//                                                                                   возможное количество заданий.
//                                                  По умолчанию "МАКСИМУМ_ЗАДАНИЙ_В_ПОТОК".
//   * АналитикаРасчета                  - Строка - список полей регистра сведений очереди заданий, разделенные
//                                                  запятыми, в разрезе которых определяется задание, если не заполнено,
//                                                  тогда одна запись регистра считается одним заданием.
//   * ИнтервалОбработки                 - Число  - интервал обработки (в секундах) между времени начало текущей выборки
//                                                  и окончания выполнения последней порции расчета:
//                                                    1. если ИнтервалОбработки больше 0, тогда выборка и выполнения
//                                                       заданий происходит при наступлении одного из нижеперечисленных
//                                                       условий:
//                                                         1. количество заданий в выборке не меньше чем ПорцияРасчета,
//                                                         2. интервал между текущей датой и датой конца выполнения
//                                                            последней порции заданий не меньше чем ИнтервалОбработки,
//                                                    2. если ИнтервалОбработки является 0, тогда  ИнтервалОбработки
//                                                       не влияет на выборку и выполнения заданий.
//   * Приоритет                         - Число  - имеет только информативный смысл, отображается в интерфейсе,
//                                                  возможные значения:
//                                                    1. -1 - высокий (блокирует оперативную работу - распределение
//                                                            запасов, нельзя распечатать документы ...),
//                                                    2.  0 - средний,
//                                                    3.  1 - низкий.
//   * ВыполнитьЗаданияВТранзакции       - Булево - задания одной порции выполняются в транзакции, по умолчанию ЛОЖЬ.
//   * ВыполнитьВТранзакцииВФайловойБазе - Булево - если ЛОЖЬ, тогда в файловой базе задания выполняются в управляющем
//                                                  потоке,
//                                                  если ИСТИНА, тогда в файловой базе выполняется в той же транзакции.
//                                                  По умолчанию ИСТИНА.
//   * ВыборкаЗаданийПоУмолчанию         - Булево - если ИСТИНА, тогда для выборки заданий используется текст запроса
//                                                  сформированный в функции см. ТекстЗапросаВыборкиЗаданийПоУмолчанию,
//                                                  если ЛОЖЬ, тогда текст запроса выборки заданий формируется 
//                                                  в функции ТекстЗапросаВыборкиЗаданий модуля менеджера регистра
//                                                  сведений очереди заданий
//                                                  (см. РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.ТекстЗапросаВыборкиЗаданий).
//                                                  По умолчанию ИСТИНА.
//   * ДополнительнаяОбработкаОшибок     - Булево - если ИСТИНА, тогда в методе выполнения заданий
//                                                  (см. ВыполнитьЗадания) перед обработкой ошибок
//                                                  (см. ОбработатьОшибки) запускается процедура ПередОбработкойОшибок
//                                                  модуля менеджера регистра сведений очереди заданий
//                                                  (см. РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.ПередОбработкойОшибок).
//                                                  По умолчанию ЛОЖЬ.
//   * ИндексСтроки                      - Число  - служебное поле хранит индекс текущей строки.
//
Функция ОчередиЗаданий() Экспорт
	
	ТипЧисло1 = ОбщегоНазначения.ОписаниеТипаЧисло(1);
	ТипЧисло3 = ОбщегоНазначения.ОписаниеТипаЧисло(3,, ДопустимыйЗнак.Неотрицательный);
	ТипЧисло6 = ОбщегоНазначения.ОписаниеТипаЧисло(6,, ДопустимыйЗнак.Неотрицательный);
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	ТаблицаОчередей = Новый ТаблицаЗначений;
	ТаблицаОчередей.Колонки.Добавить("Очередь",                           ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТаблицаОчередей.Колонки.Добавить("ИмяМетода",                         ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаОчередей.Колонки.Добавить("УказательДействия",                 ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаОчередей.Колонки.Добавить("ИменаМетодовПоЗначениямУказателя",  Новый ОписаниеТипов("Соответствие"));
	ТаблицаОчередей.Колонки.Добавить("Многопоточный",                     ТипБулево);
	ТаблицаОчередей.Колонки.Добавить("КоличествоПотоков",                 ТипЧисло3);
	ТаблицаОчередей.Колонки.Добавить("МаксимальноеКоличествоПотоков",     ТипЧисло6);
	ТаблицаОчередей.Колонки.Добавить("ПорцияРасчета",                     ТипЧисло6);
	ТаблицаОчередей.Колонки.Добавить("РежимРаспределенияЗаданий",         ОбщегоНазначения.ОписаниеТипаСтрока(24));
	ТаблицаОчередей.Колонки.Добавить("АналитикаРасчета" ,                 ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаОчередей.Колонки.Добавить("ИнтервалОбработки",                 ТипЧисло6);
	ТаблицаОчередей.Колонки.Добавить("Приоритет",                         ТипЧисло1);
	ТаблицаОчередей.Колонки.Добавить("ВыполнитьЗаданияВТранзакции",       ТипБулево);
	ТаблицаОчередей.Колонки.Добавить("ВыполнитьВТранзакцииВФайловойБазе", ТипБулево);
	ТаблицаОчередей.Колонки.Добавить("ВыборкаЗаданийПоУмолчанию",         ТипБулево);
	ТаблицаОчередей.Колонки.Добавить("ДополнительнаяОбработкаОшибок",     ТипБулево);
	ТаблицаОчередей.Колонки.Добавить("ИндексСтроки",                      ТипЧисло6);
	ТаблицаОчередей.Индексы.Добавить("Очередь");
	
	МетаРегистр = Метаданные.РегистрыСведений;
	
	Параметры = ПараметрыОчередиЗаданий();
	Параметры.Очередь           = МетаРегистр.УниверсальнаяОчередьОперативныхЗаданий.Имя;
	Параметры.УказательДействия = "Задание";
	Параметры.АналитикаРасчета  = "Объект, Задание";
	ДобавитьОчередь(ТаблицаОчередей, Параметры);
	
	
	
	
	Параметры = ПараметрыОчередиЗаданий();
	Параметры.Очередь           = МетаРегистр.ЗаданияКРаспределениюЗапасов.Имя;
	Параметры.ИмяМетода         = "РаспределениеЗапасов.ВыполнитьРаспределениеВФоне";
	Параметры.КоличествоПотоков = 1;
	Параметры.ПорцияРасчета     = 200;
	Параметры.АналитикаРасчета  = "Номенклатура, Характеристика, Склад";
	ДобавитьОчередь(ТаблицаОчередей, Параметры);
	
	
	
	Параметры = ПараметрыОчередиЗаданий();
	Параметры.Очередь          = МетаРегистр.ЗаданияКОтражениюСостоянияЗаказов.Имя;
	Параметры.ИмяМетода        = "СостоянияДокументов.ОтразитьСостоянияДокументовВРегистрахСостояний";
	Параметры.АналитикаРасчета = "Документ";
	ДобавитьОчередь(ТаблицаОчередей, Параметры);
	
	Параметры = ПараметрыОчередиЗаданий();
	Параметры.Очередь          = МетаРегистр.ЗаданияКЗаписиВПрочиеАктивыПассивы.Имя;
	Параметры.ИмяМетода        = "ПрочиеАктивыПассивыСервер.ОтразитьПрочиеАктивыИПассивы";
	Параметры.АналитикаРасчета = "Документ";
	ДобавитьОчередь(ТаблицаОчередей, Параметры);
	
	ОтложенныеЗаданияПереопределяемый.ОчередиЗаданий(ТаблицаОчередей);
	
	Возврат ТаблицаОчередей;
	
КонецФункции

// Добавляет вложенную очередь.
// 
// Параметры:
//  ОчередиЗаданий            - см. ОчередиЗаданий
//  Очередь                   - см. ДобавитьЗаданияВОчередь.Очередь
//  ЗначениеУказателяДействия - ЛюбаяСсылка - значение указателя действия
//  ИмяМетода                 - Строка - имя метода выполнения заданий, принцип формирования аналогично
//                                       аргументу ИмяМетода метода ОбщегоНазначения.ВыполнитьМетодКонфигурации
//                                       (см. ОбщегоНазначения.ВыполнитьМетодКонфигурации.ИмяМетода).
//
Процедура ДобавитьВложеннуюОчередь(ОчередиЗаданий, Очередь, ЗначениеУказателяДействия, ИмяМетода) Экспорт
	
	ОчередиЗаданий.НайтиСтроки(Новый Структура("Очередь", Очередь))[0].ИменаМетодовПоЗначениямУказателя.Вставить(
		ЗначениеУказателяДействия,
		ИмяМетода);
	
КонецПроцедуры

// Запускает управляющий поток
//
// Параметры:
//  Очереди        - см. ВыполнитьСтарт.ТаблицаОчередей
//  ЗаписатьОшибку - Булево - Если ИСТИНА, тогда ошибка запуска управляющего потока записывается в журнал регистрации.
//
Процедура Стартер(Очереди, ЗаписатьОшибку = Ложь) Экспорт
	
	РежимОтладки = ОбщегоНазначения.РежимОтладки();
	
	ЕстьЗадания = Очереди.Колонки.Найти("Задания") <> Неопределено;
	
	Если РежимОтладки Тогда
	
		Для каждого СтрокаТаблицы Из Очереди Цикл
			
			Очередь = СтрокаТаблицы.Очередь;
			
			ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
			ПараметрыВыполнения.НаименованиеФоновогоЗадания = СтрШаблон("%1 ""%2""",
																			НСтр("ru = 'Управляющий поток'"),
																			Очередь);
			ПараметрыВыполнения.КлючФоновогоЗадания         = КлючУправляющегоПотока(Очередь);
			ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
			ПараметрыВыполнения.ОжидатьЗавершение           = 0;
			
			Попытка
				
				ДлительныеОперации.ВыполнитьПроцедуру(
					ПараметрыВыполнения,
					"ОтложенныеЗадания.УправляющийПоток",
					Очередь,
					?(ЕстьЗадания И ЗначениеЗаполнено(СтрокаТаблицы.Задания), СтрокаТаблицы.Задания, Неопределено));
				
			Исключение
				
				// Фоновое задание "Управляющий поток "<Представление очереди>"" с ключом "УправляющийПоток_<Очередь>"
				// уже запущен.
				
				Если ЗаписатьОшибку Тогда
					
					ЗаписьЖурналаРегистрации(
						ИмяСобытияЗапускУправляющегоПотока(),
						УровеньЖурналаРегистрации.Ошибка,
						Метаданные.РегистрыСведений[Очередь],,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
								
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЦикла;
		
	Иначе
		
		Для каждого СтрокаТаблицы Из Очереди Цикл
			
			Очередь = СтрокаТаблицы.Очередь;
			
			ПараметрыУправляющегоПотока = Новый Массив;
			ПараметрыУправляющегоПотока.Добавить(Очередь);
			
			Если ЕстьЗадания И ЗначениеЗаполнено(СтрокаТаблицы.Задания) Тогда
				ПараметрыУправляющегоПотока.Добавить(СтрокаТаблицы.Задания);
			КонецЕсли;
			
			НаименованиеУправляющегоПотока = СтрШаблон("%1 ""%2""",
														НСтр("ru = 'Управляющий поток'"),
														Очередь);
			
			Попытка
				
				ФоновыеЗадания.Выполнить(
					"ОтложенныеЗадания.УправляющийПоток",
					ПараметрыУправляющегоПотока,
					КлючУправляющегоПотока(Очередь),
					НаименованиеУправляющегоПотока);
				
			Исключение
				
				// Фоновое задание "Управляющий поток "<Представление очереди>"" с ключом "УправляющийПоток_<Очередь>"
				// уже запущен.
				
				Если ЗаписатьОшибку Тогда
					
					ЗаписьЖурналаРегистрации(
						ИмяСобытияЗапускУправляющегоПотока(),
						УровеньЖурналаРегистрации.Ошибка,
						Метаданные.РегистрыСведений[Очередь],,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
								
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СтартерУправляющегоПотока(Очередь = "") Экспорт
	
	ОтборУП = Новый Структура;
	ОтборУП.Вставить("Ключ",      ПараметрыСтартераУправляющегоПотока().Ключ);
	ОтборУП.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	Пауза(20,, ОтборУП);
	
	Отбор = Неопределено;
	
	Если ЗначениеЗаполнено(Очередь) Тогда
		Отбор = Новый Структура;
		Отбор .Вставить("Очередь", Очередь);
	КонецЕсли;
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		Если Отбор = Неопределено Тогда
			Отбор = Новый Структура;
		КонецЕсли;
		
		Отбор.Вставить("ВыполнитьВТранзакцииВФайловойБазе", Ложь);
		
	КонецЕсли;
	
	ТаблицаОчередей = ?(ЗначениеЗаполнено(Отбор), ОчередиЗаданий().Скопировать(Отбор), ОчередиЗаданий());
	
	Если ТаблицаОчередей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапросаЗначимыеОчереди(ТаблицаОчередей);
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Стартер(РезультатЗапроса.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

// Выполняет выборку заданий и запускает выполнения выбранных заданий.
//
// Параметры:
//  Очередь - Строка - имя регистра сведений очереди заданий,
//  Задания - ТаблицаЗначений - если параметр ТолькоТекущиеЗадания данного метода принимает значение
//                               1. ИСТИНА, тогда выполняются только эти занадния,
//                               2. ЛОЖЬ, тогда контролируется наличие данных заданий в регистре сведений очереди
//                                  заданий (на данные задания устанавливается блокировка).
//                              Колонки таблицы значений соответствуют структуре регистра сведений очереди заданий.
//          - Неопределено - выборка происходит по данным регистра сведений очереди заданий.
//                           По умолчанию Неопределено.
//  ОбработатьТолькоТекущиеЗадания - Булево - если ИСТИНА, тогда выполняются только задния переданные в параметре
//                                            Задания (более подробно в описании параметра Задания).
//                                            Имеет смысл, если параметр Задания заполнено.
//                                            По умолчанию ЛОЖЬ.
//
Процедура УправляющийПоток(Очередь, Задания = Неопределено, ОбработатьТолькоТекущиеЗадания = Ложь) Экспорт
	
	Если Задания <> Неопределено И Не ОбработатьТолькоТекущиеЗадания Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			МетаРегистра = Метаданные.РегистрыСведений[Очередь];
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(СтрШаблон("РегистрСведений.%1", Очередь));
			ЭлементБлокировки.Режим          = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = Задания;
			
			Для каждого ИзмерениеРегистра Из МетаРегистра.Измерения Цикл
				ИмяИзмерения = ИзмерениеРегистра.Имя;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных(ИмяИзмерения, ИмяИзмерения);
			КонецЦикла;
			
			Блокировка.Заблокировать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЗапускУправляющегоПотока(),
				УровеньЖурналаРегистрации.Ошибка,
				МетаРегистра,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЕсли;
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	РежимОтладки               = ОбщегоНазначения.РежимОтладки();
	
	ВыполнитьТолькоТекущиеЗадания = Задания <> Неопределено И ОбработатьТолькоТекущиеЗадания;
	
	ПараметрыОчереди = ПараметрыОчередиЗаданий();
	ЗаполнитьЗначенияСвойств(ПараметрыОчереди, ОчередиЗаданий().НайтиСтроки(Новый Структура("Очередь", Очередь))[0]);
	
	ЕстьУказательДействия             = Не ЗначениеЗаполнено(ПараметрыОчереди.ИмяМетода)
										И ЗначениеЗаполнено(ПараметрыОчереди.УказательДействия);
	УказательДействия				  = ?(ЕстьУказательДействия, ПараметрыОчереди.УказательДействия, "");
	ИменаМетодовПоЗначениямУказателя  = ПараметрыОчереди.ИменаМетодовПоЗначениямУказателя;
	КоличествоРабочихПотоков		  = ?(ПараметрыОчереди.Многопоточный
											И (Не ОбщегоНазначения.РазделениеВключено()
												Или Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()),
													ПараметрыОчереди.КоличествоПотоков,
													1);
	МаксимальноеКоличествоПотоков	  = ПараметрыОчереди.МаксимальноеКоличествоПотоков;
	ПорцияРасчета					  = ПараметрыОчереди.ПорцияРасчета;
	РежимРаспределенияЗаданий		  = ПараметрыОчереди.РежимРаспределенияЗаданий;
	ВыполнитьВТранзакцииВФайловойБазе = ПараметрыОчереди.ВыполнитьВТранзакцииВФайловойБазе;
	ИнтервалОбработки				  = ?(Не ИнформационнаяБазаФайловая И Не ВыполнитьТолькоТекущиеЗадания,
											ПараметрыОчереди.ИнтервалОбработки,
											0);
	
	РабочиеПотоки                        = Неопределено;
	ИдентификаторыПереданныеНаВыполнения = Неопределено;
	
	Таймауты                             = Неопределено;
	
	Если РежимОтладки Тогда
		
		ИнтервалОбработки = 0;
		
		ИмяМетодаРабочегоПотока = ИмяМетодаРабочегоПотока(Очередь);
		
		ПараметрыОчереди.ВыполнитьЗаданияВТранзакции = Ложь;
		
	ИначеЕсли ИнформационнаяБазаФайловая Тогда
		
		ИмяМетодаРабочегоПотока = ИмяМетодаРабочегоПотока(Очередь);
		
		Если ВыполнитьВТранзакцииВФайловойБазе Тогда
			ПараметрыОчереди.ВыполнитьЗаданияВТранзакции = Ложь;
		Иначе
			Таймауты = Таймауты();
		КонецЕсли;
		
	Иначе
		
		Очереди = Новый Массив;
		Очереди.Добавить(Очередь);
		
		ТаблицаНастроек  = НастройкиОчередей(Очереди);
		
		НастройкиОчереди = ?(ТаблицаНастроек.Количество() = 0,
								Новый Структура("Очередь, Приостановлена, ДатаПоследнейОбработки", Очередь, Ложь),
								ТаблицаНастроек[0]);
		
		Если НастройкиОчереди.Приостановлена Тогда
			Возврат;
		КонецЕсли;
		
		Если ЕстьУказательДействия Или КоличествоРабочихПотоков > 1 Тогда
			РабочиеПотоки = РабочиеПотоки();
		Иначе
			ИмяМетодаРабочегоПотока = ИмяМетодаРабочегоПотока(Очередь);
		КонецЕсли;
		
		Если Не ВыполнитьТолькоТекущиеЗадания Тогда
			Таймауты = Таймауты();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнтервалОбработки) Тогда
		ПаузаИнтервалОбработки(НастройкиОчереди, ИнтервалОбработки);
	КонецЕсли;
	
	КоличествоЗаданийРабочихПотоков = КоличествоРабочихПотоков
									  * ПорцияРасчета 
									  * ?(ЕстьУказательДействия,
									  		ПараметрыОчереди.ИменаМетодовПоЗначениямУказателя.Количество(),
									  		1);
	
	Запрос = Новый Запрос;
	
	Если ВыполнитьТолькоТекущиеЗадания Тогда
		
		КоличествоЗаданий               = Задания.Количество();
		КоличествоЗаданийРабочихПотоков = Мин(КоличествоЗаданийРабочихПотоков, КоличествоЗаданий);
		
		Запрос.УстановитьПараметр("ОчередьЗаданий", Задания);
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаВыборкиЗаданий(Запрос, ПараметрыОчереди, КоличествоЗаданийРабочихПотоков);
	
	ТаблицаЗаданий = ТаблицаЗаданий(Запрос, ИдентификаторыПереданныеНаВыполнения, Очередь, УказательДействия, Таймауты);
	
	КоличествоСтрокКОбработке = ТаблицаЗаданий.Количество();
	
	Если КоличествоСтрокКОбработке > 0 Тогда
		
		ОтборОбработано    = Новый Структура("Обработано", Ложь);
		ОтборИдентификатор = Новый Структура("Обработано, ИдентификаторЗадания", Ложь);
		
		Если ЕстьУказательДействия Тогда
			
			ОтборОбработано.Вставить(УказательДействия);
			ОтборИдентификатор.Вставить(УказательДействия);
			
			ОтборУказательДействия = Новый Структура("Обработано", Ложь);
			
			ТаблицаУказателейДействий = ТаблицаУказателейДействий(ТаблицаЗаданий, УказательДействия);
			
			ЗаполнитьЗначенияСвойств(ОтборОбработано, ТаблицаУказателейДействий[0]);
			
			ПараметрыОчереди.ИмяМетода = ИменаМетодовПоЗначениямУказателя.Получить(ОтборОбработано[УказательДействия]);
			
			ПроверитьЗаданияВВыборке = Истина;
			
		Иначе
			
			ПроверитьЗаданияВВыборке = Не ВыполнитьТолькоТекущиеЗадания
										Или КоличествоЗаданий > КоличествоЗаданийРабочихПотоков;
			
		КонецЕсли;
		
		НайденныеСтрокиКОбработке = ТаблицаЗаданий.НайтиСтроки(ОтборОбработано);
		КоличествоСтрокКОбработке = НайденныеСтрокиКОбработке.Количество();
		
		ТаблицаПорции = ТаблицаЗаданий.СкопироватьКолонки();
		ТаблицаПорции.Колонки.Удалить("Обработано");
		
		КоличествоИтерации = КоличествоРабочихПотоков;
		
		ПревышеноМаксимальноеКоличествоПотоков = Ложь;
		
		ПорцииПоПотокам = РассчитатьПорцииПоПотокам(
							ТаблицаЗаданий,
							ОтборОбработано,
							КоличествоИтерации,
							ПорцияРасчета,
							РежимРаспределенияЗаданий);
		
	КонецЕсли;
	
	Пока КоличествоСтрокКОбработке > 0 И КоличествоИтерации > 0 Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборИдентификатор, НайденныеСтрокиКОбработке[0]);
		
		НайденныеСтрокиЗадания = ТаблицаЗаданий.НайтиСтроки(ОтборИдентификатор);
		Для каждого СтрокаТаблицы Из НайденныеСтрокиЗадания Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаПорции.Добавить(), СтрокаТаблицы);
			СтрокаТаблицы.Обработано = Истина;
		КонецЦикла;
		
		ПорцииПоПотокам[0] = ПорцииПоПотокам[0] - 1;
		
		НайденныеСтрокиКОбработке = ТаблицаЗаданий.НайтиСтроки(ОтборОбработано);
		КоличествоСтрокКОбработке = НайденныеСтрокиКОбработке.Количество();
		
		Если КоличествоСтрокКОбработке = 0 Или ПорцииПоПотокам[0] = 0 Тогда
			
			Если ИнформационнаяБазаФайловая И ВыполнитьВТранзакцииВФайловойБазе Или РежимОтладки Тогда
				
				ОбщегоНазначения.ВыполнитьМетодКонфигурации(
					ИмяМетодаРабочегоПотока,
					ПараметрыРабочегоПотока(
						ПараметрыОчереди,
						ПараметрыДанных(ТаблицаПорции),
						Ложь,
						ИнформационнаяБазаФайловая И ВыполнитьВТранзакцииВФайловойБазе));
				
			ИначеЕсли РабочиеПотоки = Неопределено Тогда
				
				// Задания выполняются в фоновом задании управляющего потока.
				
				ВыполнитьЗаданияВФонеУправлящегоПотока(
					ИмяМетодаРабочегоПотока,
					ПараметрыОчереди,
					ТаблицаПорции.Скопировать());
				
			Иначе
				
				ДобавитьРабочийПоток(РабочиеПотоки, ПараметрыОчереди, ТаблицаПорции.Скопировать());
				
			КонецЕсли;
			
			ПорцииПоПотокам.Удалить(0);
			
			ТаблицаПорции.Очистить();
			
			КоличествоИтерации = КоличествоИтерации - 1;
			
			Если МаксимальноеКоличествоПотоков > 0
			   И МаксимальноеКоличествоПотоков <= КоличествоАктивныхРабочихПотоков(ПараметрыОчереди, Истина) Тогда
				
				ПревышеноМаксимальноеКоличествоПотоков = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если (КоличествоСтрокКОбработке = 0 Или КоличествоИтерации = 0) И ЕстьУказательДействия Тогда
			
			// Значение текущего указателя
			
			НайденныеСтрокиУказателиДействий = ТаблицаУказателейДействий.НайтиСтроки(ОтборОбработано);
			
			Если КоличествоСтрокКОбработке = 0 Тогда
				ТаблицаУказателейДействий.Удалить(НайденныеСтрокиУказателиДействий[0]);
			Иначе
				НайденныеСтрокиУказателиДействий[0].Обработано = Истина;
			КонецЕсли;
			
			// Значение следующего указателя
			
			Если ТаблицаУказателейДействий.Количество() > 0 Тогда
				
				НайденныеСтрокиУказателиДействий = ТаблицаУказателейДействий.НайтиСтроки(ОтборУказательДействия);
				Если НайденныеСтрокиУказателиДействий.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(ОтборОбработано, НайденныеСтрокиУказателиДействий[0]);
				Иначе
					ТаблицаУказателейДействий.ЗаполнитьЗначения(Ложь, "Обработано");
					ЗаполнитьЗначенияСвойств(ОтборОбработано, ТаблицаУказателейДействий[0]);
				КонецЕсли;
				
				ПараметрыОчереди.ИмяМетода = ИменаМетодовПоЗначениямУказателя.Получить(
												ОтборОбработано[УказательДействия]);
				
				НайденныеСтрокиКОбработке = ТаблицаЗаданий.НайтиСтроки(ОтборОбработано);
				КоличествоСтрокКОбработке = НайденныеСтрокиКОбработке.Количество();
				
				КоличествоИтерации = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоСтрокКОбработке = 0 И ПроверитьЗаданияВВыборке Тогда
			
			Если ЗначениеЗаполнено(ИнтервалОбработки) Тогда
				ПаузаИнтервалОбработки(НастройкиОчереди, ИнтервалОбработки);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИдентификаторыПереданныеНаВыполнения)
			   И (Не ИнформационнаяБазаФайловая Или Не ВыполнитьВТранзакцииВФайловойБазе)
			   И Не РежимОтладки Тогда
				ИдентификаторыПереданныеНаВыполнения = Неопределено;
			КонецЕсли;
			
			ИдентификаторыПереданныеНаВыполнения(РабочиеПотоки, ТаблицаЗаданий, ИдентификаторыПереданныеНаВыполнения);
			
			ТаблицаЗаданий = ТаблицаЗаданий(
								Запрос,
								ИдентификаторыПереданныеНаВыполнения,
								Очередь,
								УказательДействия,
								Таймауты);
			
			КоличествоСтрокКОбработке = ТаблицаЗаданий.Количество();
			
			Если КоличествоСтрокКОбработке > 0 Тогда
				
				Если ЕстьУказательДействия Тогда
					
					ТаблицаУказателейДействий = ТаблицаУказателейДействий(ТаблицаЗаданий, УказательДействия);
					
					ЗаполнитьЗначенияСвойств(ОтборОбработано, ТаблицаУказателейДействий[0]);
					
					ПараметрыОчереди.ИмяМетода = ИменаМетодовПоЗначениямУказателя.Получить(
													ОтборОбработано[УказательДействия]);
					
				КонецЕсли;
				
				НайденныеСтрокиКОбработке = ТаблицаЗаданий.НайтиСтроки(ОтборОбработано);
				КоличествоСтрокКОбработке = НайденныеСтрокиКОбработке.Количество();
				
				КоличествоИтерации = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоИтерации = 0 И КоличествоСтрокКОбработке > 0 Тогда
			
			КоличествоИтерации = КоличествоРабочихПотоков
								 - КонтролироватьРабочиеПотоки(РабочиеПотоки, ПараметрыОчереди);
			
			ПорцииПоПотокам = РассчитатьПорцииПоПотокам(
								ТаблицаЗаданий,
								ОтборОбработано,
								КоличествоИтерации,
								ПорцияРасчета,
								РежимРаспределенияЗаданий);
			
		ИначеЕсли ПревышеноМаксимальноеКоличествоПотоков И КоличествоИтерации > 0 И КоличествоСтрокКОбработке > 0 Тогда
			
			КонтролироватьРабочиеПотоки(РабочиеПотоки, ПараметрыОчереди);
			
			ПревышеноМаксимальноеКоличествоПотоков = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не РежимОтладки Тогда
		
		Если Не ИнформационнаяБазаФайловая Тогда
			
			ПараметрыОчереди.МаксимальноеКоличествоПотоков = 0;
			КонтролироватьРабочиеПотоки(РабочиеПотоки, ПараметрыОчереди, Истина);
			
			Если Не ВыполнитьТолькоТекущиеЗадания Тогда
				
				ЗапуститьСтартерУправляющегоПотока();
				
			КонецЕсли;
			
		ИначеЕсли Не ВыполнитьВТранзакцииВФайловойБазе И Не ВыполнитьТолькоТекущиеЗадания Тогда
			
			ЗапуститьСтартерУправляющегоПотока();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет задания
//
// Параметры:
//  ПараметрыОчереди            - см. ПараметрыОчередиЗаданий
//  ПараметрыДанных             - см. ПараметрыДанных
//  ЗафиксироватьОшибку         - Булево - если ИСТИНА, тогда при возникновении ошибки, задание удаляется из регистра
//                                         сведений очереди заданий и добавляется в регистр 
//                                         "ОшибкиВыполненияОтложенныхЗаданий".
//  ОбработатьВТекущемСеансе    - Булево - если ИСТИНА, тогда задания выполняются в данной транзакции.
//                                         При возникновении ошибки, во время выполнении заданий, в случае, если
//                                         параметр ТекстОшибки является НЕОПРЕДЕЛЕНО, вызывается исключение.
//  ТекстОшибки                 - Строка, Неопределено - если тип Строка, тогда в данный параметр возвращается текст
//                                                       возникшей ошибки.
//                                                       По умолчанию НЕОПРЕДЕЛЕНО.
//  ДополнительныеСвойства       - Структура, Неопределено - необходимые данные, которые нужно передать в метод
//                                                           выполнения заданий.
//                                                           По умолчанию НЕОПРЕДЕЛЕНО.
//
Процедура ВыполнитьЗадания(
			ПараметрыОчереди,
			ПараметрыДанных,
			ЗафиксироватьОшибку,
			ОбработатьВТекущемСеансе,
			ТекстОшибки = Неопределено,
			ДополнительныеСвойства = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Очередь                     = ПараметрыОчереди.Очередь;
	ИмяМетода                   = ПараметрыОчереди.ИмяМетода;
	ВыполнитьЗаданияВТранзакции = ПараметрыОчереди.ВыполнитьЗаданияВТранзакции;
	
	Данные = ПараметрыДанных.Данные;
	
	Параметры = Новый Массив;
	Параметры.Добавить(Данные);
	Параметры.Добавить(Новый Соответствие); // см. ОбработатьОшибки.Ошибки
	Параметры.Добавить(ДополнительныеСвойства);
	
	Если ОбработатьВТекущемСеансе Тогда
		
		ТекстИсключения = "";
		
		Попытка
			
			СтандартнаяОбработка = Ложь;
			
			ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяМетода, Параметры);
			
			СтандартнаяОбработка = Истина;
			
			Ошибки = Параметры[1];
			Если Ошибки.Количество() > 0 Тогда
				ТекстИсключения = ПредставлениеОшибки(Ошибки);
			КонецЕсли;
			
		Исключение
			
			Если СтандартнаяОбработка Тогда
				
				ТекстТекущейОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЗаписатьОшибкуВЖурналРегистрации(Очередь, ТекстТекущейОшибки);
				
			Иначе
				
				//Вызвано иcключение в методе выполнения
				ТекстТекущейОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекстИсключения) Тогда
				ТекстИсключения = ТекстТекущейОшибки;
			КонецЕсли;
			
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ТекстИсключения) Тогда
			
			Если ТекстОшибки = Неопределено Тогда
				
				ОбщегоНазначения.СообщитьПользователю(ТекстИсключения);
				
				Если ТранзакцияАктивна() Тогда
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
				
			Иначе
				ТекстОшибки = ТекстИсключения;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекстИсключения = "";
		
		Если ВыполнитьЗаданияВТранзакции Тогда
			
			НачатьТранзакцию();
			
			Попытка
				
				ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяМетода, Параметры);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстИсключения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЗаписатьОшибкуВЖурналРегистрации(Очередь, ТекстИсключения);
				
			КонецПопытки;
			
		Иначе
			
			Попытка
				
				ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяМетода, Параметры);
				
			Исключение
				
				ТекстИсключения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЗаписатьОшибкуВЖурналРегистрации(Очередь, ТекстИсключения);
				
			КонецПопытки;
			
		КонецЕсли;
		
		Ошибки = Параметры[1];
		
		Если Не ЗначениеЗаполнено(ТекстИсключения) Тогда
			
			Попытка
				
				Если ЗафиксироватьОшибку И ЗначениеЗаполнено(Ошибки) Тогда
					
					Если ПараметрыОчереди.ДополнительнаяОбработкаОшибок Тогда
						
						РегистрыСведений[Очередь].ПередОбработкойОшибок(
							ПараметрыОчереди,
							Данные,
							Ошибки,
							ТекстИсключения,
							Параметры[2]); // ДополнительныеСвойства
						
					КонецЕсли;
					
					ОбработатьОшибки(ПараметрыОчереди, Данные, Ошибки, ТекстИсключения);
					
				Иначе
					
					ТаблицаХешовВыполненныхЗаданий = ТаблицаХешовВыполненныхЗаданий();
					
					УдалитьЗадания(ПараметрыОчереди, Данные, Ошибки, ТаблицаХешовВыполненныхЗаданий, ТекстИсключения);
					
					ПроверитьУдалитьОшибкиВыполненныхЗданий(Очередь, ТаблицаХешовВыполненныхЗаданий);
					
					Если Данные.Количество() > 0 Тогда
						ПоместитьВоВременноеХранилище(Данные, ПараметрыДанных.АдресНеОбработанныхДанных);
					КонецЕсли;
					
				КонецЕсли;
				
			Исключение
				
				ТекстИсключения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЗаписатьОшибкуВЖурналРегистрации(Очередь, ТекстИсключения);
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекстИсключения) И Не ЗафиксироватьОшибку И ЗначениеЗаполнено(Ошибки) Тогда
			
			ТекстИсключения = ПредставлениеОшибки(Ошибки);
			
			ЗаписатьОшибкуВЖурналРегистрации(Очередь, ТекстИсключения);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстИсключения) Тогда
			
			Если ТекстОшибки = Неопределено Тогда
				
				// Перевод состояние рабочего потока в СостояниеФоновогоЗадания.ЗавершеноАварийно
				ВызватьИсключение ТекстИсключения;
				
			Иначе
				ТекстОшибки = ТекстИсключения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст запроса выборки заданий по умолчанию.
//
// Параметры:
//  Запрос              - Запрос - запрос выборки заданий
//  ПараметрыОчереди    - см. ПараметрыОчередиЗаданий
//  КоличествоЗаданий   - Число  - количество заданий в выборке
//  ДополнительныйОтбор - Строка - дополнительный отбор заданий в тексте выборки.
//                                 По умолчанию не заполнено.
//
// Возвращаемое значение:
//  Строка - текст запроса выборки заданий
//
Функция ТекстЗапросаВыборкиЗаданийПоУмолчанию(
			Запрос,
			ПараметрыОчереди,
			КоличествоЗаданий,
			ДополнительныйОтбор = "") Экспорт
	
	АналитикаРасчета = ПараметрыОчереди.АналитикаРасчета;
	
	Если ЗначениеЗаполнено(АналитикаРасчета) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 999
		|	АналитикаРасчета,
		|	МИНИМУМ(ИдентификаторЗаписи) КАК ИдентификаторЗадания,
		|	МИНИМУМ(ДатаЗаписи)          КАК ДатаЗадания
		|ПОМЕСТИТЬ Задания
		|ИЗ
		|	ОчередьЗаданий КАК Таблица
		|ГДЕ
		|	НЕ ИСТИНА В
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			ОчередьЗаданий КАК Задания
		|		ГДЕ
		|			&УсловиеСоединение
		|			И Задания.ИдентификаторЗаписи В (&ИдентификаторыПереданныеВРабочиеПотоки))
		|	И &ДополнительныйОтбор
		|
		|СГРУППИРОВАТЬ ПО
		|	АналитикаРасчета
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаЗадания,
		|	АналитикаРасчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Задания.ИдентификаторЗадания КАК ИдентификаторЗадания,
		|	Задания.ДатаЗадания          КАК ДатаЗадания,
		|	Таблица.*
		|ИЗ
		|	Задания КАК Задания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОчередьЗаданий КАК Таблица
		|		ПО &УсловиеСоединение
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаЗадания,
		|	&Упорядочивание
		|";
		
		Поля = Новый Структура(АналитикаРасчета);
		
		Условия        = Новый Массив;
		Упорядочивание = Новый Массив;
		Для каждого Поле Из Поля Цикл
			
			ИмяПоля = Поле.Ключ;
			
			Условия.Добавить(СтрШаблон("Задания.%1 = Таблица.%1", ИмяПоля));
			Упорядочивание.Добавить(СтрШаблон("Таблица.%1", ИмяПоля));
			
		КонецЦикла;
		
		Разделитель = "
					  |		   И ";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "АналитикаРасчета",   АналитикаРасчета);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСоединение", СтрСоединить(Условия, Разделитель));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Упорядочивание",    СтрСоединить(Упорядочивание, ", "));
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 999
		|	Таблица.ИдентификаторЗаписи КАК ИдентификаторЗадания,
		|	Таблица.ДатаЗаписи          КАК ДатаЗадания,
		|	*
		|ИЗ
		|	ОчередьЗаданий КАК Таблица
		|ГДЕ
		|	НЕ Таблица.ИдентификаторЗаписи В (&ИдентификаторыПереданныеВРабочиеПотоки)
		|	И &ДополнительныйОтбор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаЗаписи
		|";
		
	КонецЕсли;
	
	Если Запрос.Параметры.Свойство("ОчередьЗаданий") Тогда
		
		ТекстЗапросаИсточник = 
		"ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ ОчередьЗаданий
		|ИЗ
		|	&ОчередьЗаданий КАК ОчередьЗаданий
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИндексируемыеПоля
		|";
		
		ТекстЗапросаИсточник = СтрЗаменить(ТекстЗапросаИсточник,
											"ИндексируемыеПоля",
											?(ЗначениеЗаполнено(АналитикаРасчета), АналитикаРасчета, "ДатаЗаписи"));
		
		ТекстыЗапросов = Новый Массив;
		ТекстыЗапросов.Добавить(ТекстЗапросаИсточник);
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"ОчередьЗаданий",
									СтрШаблон("%1.%2", "РегистрСведений", ПараметрыОчереди.Очередь));
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "999", Формат(КоличествоЗаданий, "ЧН=0; ЧГ=;"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&ДополнительныйОтбор",
								?(ЗначениеЗаполнено(ДополнительныйОтбор), ДополнительныйОтбор, "ИСТИНА"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает имя события "Обработка очереди заданий".
// 
// Возвращаемое значение:
//  Строка - Имя события
//
Функция ИмяСобытия() Экспорт
	
	Возврат НСтр("ru = 'Обработка очереди заданий'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Возвращает хеш сумму (ХешФункция.SHA256) в формате Base64Строка для записи
// в реквизит ХешАналитикиРасчета регистра ОшибкиВыполненияОтложенныхЗаданий.
//
// Параметры:
//  Данные           - ВыборкаИзРезультатаЗапроса, СтрокаТаблицыЗначений, Структура - данные задания
//  АналитикаРасчета - Строка - см. ОчередиЗаданий кононка АналитикаРасчета.
//                              Если пустая строка, тогда аналитикой расчета считается ИдентификаторЗаписи.
//
// Возвращаемое значение:
//  Строка - хеш сумма (ХешФункция.SHA256) в формате Base64Строка
//
Функция ХешАналитикиРасчета(Данные, АналитикаРасчета) Экспорт
	
	Если ЗначениеЗаполнено(АналитикаРасчета) Тогда
		МассивАналитик = СтрРазделить(АналитикаРасчета, ",");
	Иначе
		МассивАналитик = Новый Массив;
		МассивАналитик.Добавить("ИдентификаторЗаписи");
	КонецЕсли;
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	
	Для каждого Поле Из МассивАналитик Цикл
		
		СтруктураАналитики = Новый Структура(Поле);
		ЗаполнитьЗначенияСвойств(СтруктураАналитики, Данные);
		
		Для каждого Аналитика Из СтруктураАналитики Цикл
			
			ЗначениеАналитики = Аналитика.Значение;
			ТипАналитики      = ТипЗнч(ЗначениеАналитики);
			
			Если ОбщегоНазначения.ЭтоСсылка(ТипАналитики) Тогда
				
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипАналитики);
				
				Если ОбщегоНазначения.ЭтоПеречисление(ОбъектМетаданных) Тогда
					ДанныеХешСуммы = ОбщегоНазначения.ИмяЗначенияПеречисления(ЗначениеАналитики);
				Иначе
					ДанныеХешСуммы = ЗначениеАналитики.УникальныйИдентификатор();
				КонецЕсли;
				
			Иначе
				ДанныеХешСуммы = ЗначениеАналитики;
			КонецЕсли;
			
			ХешированиеДанных.Добавить(Строка(ДанныеХешСуммы));
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Base64Строка(ХешированиеДанных.ХешСумма);
	
КонецФункции

#Область МетодыОболочкиОчередей

// Дает возможность использовать механизм требования назначения функциональности, вызывает процедуру ВыполнитьЗадания.
//
// Параметры:
//  ПараметрыОчереди         - см. ВыполнитьЗадания.ПараметрыОчереди
//  ПараметрыДанных          - см. ВыполнитьЗадания.ПараметрыДанных
//  ЗафиксироватьОшибку      - см. ВыполнитьЗадания.ЗафиксироватьОшибку
//  ОбработатьВТекущемСеансе - см. ВыполнитьЗадания.ОбработатьВТекущемСеансе
//  ТекстОшибки              - см. ВыполнитьЗадания.ТекстОшибки
//
Процедура УниверсальнаяОчередьОперативныхЗаданий(
			ПараметрыОчереди,
			ПараметрыДанных,
			ЗафиксироватьОшибку = Ложь,
			ОбработатьВТекущемСеансе = Ложь,
			ТекстОшибки = Неопределено) Экспорт
	
	ВыполнитьЗадания(
		ПараметрыОчереди,
		ПараметрыДанных,
		ЗафиксироватьОшибку,
		ОбработатьВТекущемСеансе,
		ТекстОшибки);
	
КонецПроцедуры




// Дает возможность использовать механизм требования назначения функциональности, вызывает процедуру ВыполнитьЗадания.
//
// Параметры:
//  ПараметрыОчереди         - см. ВыполнитьЗадания.ПараметрыОчереди
//  ПараметрыДанных          - см. ВыполнитьЗадания.ПараметрыДанных
//  ЗафиксироватьОшибку      - см. ВыполнитьЗадания.ЗафиксироватьОшибку
//  ОбработатьВТекущемСеансе - см. ВыполнитьЗадания.ОбработатьВТекущемСеансе
//  ТекстОшибки              - см. ВыполнитьЗадания.ТекстОшибки
//
Процедура ЗаданияКРаспределениюЗапасов(
			ПараметрыОчереди,
			ПараметрыДанных,
			ЗафиксироватьОшибку = Ложь,
			ОбработатьВТекущемСеансе = Ложь,
			ТекстОшибки = Неопределено) Экспорт
	
	ВыполнитьЗадания(
		ПараметрыОчереди,
		ПараметрыДанных,
		ЗафиксироватьОшибку,
		ОбработатьВТекущемСеансе,
		ТекстОшибки);
	
КонецПроцедуры



// Дает возможность использовать механизм требования назначения функциональности, вызывает процедуру ВыполнитьЗадания.
//
// Параметры:
//  ПараметрыОчереди         - см. ВыполнитьЗадания.ПараметрыОчереди
//  ПараметрыДанных          - см. ВыполнитьЗадания.ПараметрыДанных
//  ЗафиксироватьОшибку      - см. ВыполнитьЗадания.ЗафиксироватьОшибку
//  ОбработатьВТекущемСеансе - см. ВыполнитьЗадания.ОбработатьВТекущемСеансе
//  ТекстОшибки              - см. ВыполнитьЗадания.ТекстОшибки
//
Процедура ЗаданияКОтражениюСостоянияЗаказов(
			ПараметрыОчереди,
			ПараметрыДанных,
			ЗафиксироватьОшибку = Ложь,
			ОбработатьВТекущемСеансе = Ложь,
			ТекстОшибки = Неопределено) Экспорт
	
	ВыполнитьЗадания(
		ПараметрыОчереди,
		ПараметрыДанных,
		ЗафиксироватьОшибку,
		ОбработатьВТекущемСеансе,
		ТекстОшибки);
	
КонецПроцедуры

// Дает возможность использовать механизм требования назначения функциональности, вызывает процедуру ВыполнитьЗадания.
//
// Параметры:
//  ПараметрыОчереди         - см. ВыполнитьЗадания.ПараметрыОчереди
//  ПараметрыДанных          - см. ВыполнитьЗадания.ПараметрыДанных
//  ЗафиксироватьОшибку      - см. ВыполнитьЗадания.ЗафиксироватьОшибку
//  ОбработатьВТекущемСеансе - см. ВыполнитьЗадания.ОбработатьВТекущемСеансе
//  ТекстОшибки              - см. ВыполнитьЗадания.ТекстОшибки
//
Процедура ЗаданияКЗаписиВПрочиеАктивыПассивы(
			ПараметрыОчереди,
			ПараметрыДанных,
			ЗафиксироватьОшибку = Ложь,
			ОбработатьВТекущемСеансе = Ложь,
			ТекстОшибки = Неопределено) Экспорт
	
	ВыполнитьЗадания(
		ПараметрыОчереди,
		ПараметрыДанных,
		ЗафиксироватьОшибку,
		ОбработатьВТекущемСеансе,
		ТекстОшибки);
	
КонецПроцедуры

#КонецОбласти

#Область РегламентноеЗадание

Процедура ВыполнениеОтложенныхЗаданийРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ВыполнениеОтложенныхЗаданий);
	
	Отбор = ?(ОбщегоНазначения.ИнформационнаяБазаФайловая(),
				Новый Структура("ВыполнитьВТранзакцииВФайловойБазе", Ложь),
				Неопределено);
	
	ТаблицаОчередей = ОчередиЗаданий().Скопировать(Отбор, "Очередь, ИндексСтроки");
	
	Если ТаблицаОчередей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапросаЗначимыеОчереди(ТаблицаОчередей);
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Стартер(РезультатЗапроса.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗапускОчередей

// Запускает стартер, или выполняет метод стартера (см. Стартер).
//
// Параметры:
//  ТаблицаОчередей - ТаблицаЗначений - с колонками:
//   * Очередь - Строка - имя регистра сведений очереди заданий.
//   * Задания - ТаблицаЗначений - колонки таблицы значений соответствуют структуре регистра сведений очереди заданий.
//                                 Колонка не является обязательным.
//
Процедура ВыполнитьСтарт(Знач ТаблицаОчередей)
	
	ТаблицаОчередей.Колонки.Добавить("Обработать", Новый ОписаниеТипов("Булево"));
	ТаблицаОчередей.Индексы.Добавить("Очередь");
	ТаблицаОчередей.Индексы.Добавить("Обработать");
	
	ТаблицаНастроек = НастройкиОчередей(ТаблицаОчередей.ВыгрузитьКолонку("Очередь"));
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ");
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	ОтборОчередь = Новый Структура("Очередь");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого СтрокаТаблицы Из ТаблицаОчередей Цикл
		
		Очередь = СтрокаТаблицы.Очередь;
		
		ОтборОчередь.Очередь = Очередь;
		
		НайденныеНастройки = ТаблицаНастроек.НайтиСтроки(ОтборОчередь);
		Если НайденныеНастройки.Количество() > 0 И НайденныеНастройки[0].Приостановлена Тогда
			
			СтрокаТаблицы.Обработать = Ложь;
			
		Иначе
			
			Отбор.Ключ = КлючУправляющегоПотока(Очередь);
			
			СтрокаТаблицы.Обработать = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество() = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаОчередей    = ТаблицаОчередей.Скопировать(Новый Структура("Обработать", Истина));
	КоличествоОчередей = ТаблицаОчередей.Количество();
	Если КоличествоОчередей > 0 Тогда
		
		Если ОбщегоНазначения.РазделениеВключено()
		   И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			
			Стартер(ТаблицаОчередей, Истина);
			
		Иначе
			
			Если КоличествоОчередей = 1 Тогда
				
				НаименованиеСтартера = СтрШаблон("Стартер ""%1""", ТаблицаОчередей[0].Очередь);
				
				ОтборПоНаименованию = Новый Структура;
				ОтборПоНаименованию.Вставить("Наименование", НаименованиеСтартера);
				ОтборПоНаименованию.Вставить("Состояние",    СостояниеФоновогоЗадания.Активно);
				
				ЗапуститьСтартер = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборПоНаименованию).Количество() = 0;
				
			Иначе 
				
				НаименованиеСтартера = "Стартер";
				
				ЗапуститьСтартер = Истина;
				
			КонецЕсли;
			
			Если ЗапуститьСтартер Тогда
				
				ПараметрыСтартера = Новый Массив;
				ПараметрыСтартера.Добавить(ТаблицаОчередей);
				
				ФоновыеЗадания.Выполнить("ОтложенныеЗадания.Стартер", ПараметрыСтартера,, НаименованиеСтартера);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Запускает выполнения заданий в текущей транзакции.
//
// Параметры:
//  ТаблицаОчередей - см. ИнициализироватьТаблицуЗаданий.
//
Процедура ЗапуститьВТекущейТранзакции(ТаблицаОчередей)
	
	ТаблицаНастроек = НастройкиОчередей(ТаблицаОчередей.ВыгрузитьКолонку("Очередь"));
	
	ОтборОчередь = Новый Структура("Очередь");
	
	Для каждого СтрокаТаблицы Из ТаблицаОчередей Цикл
		
		Очередь = СтрокаТаблицы.Очередь;
		
		ОтборОчередь.Очередь = Очередь;
		
		НайденныеНастройки = ТаблицаНастроек.НайтиСтроки(ОтборОчередь);
		Если НайденныеНастройки.Количество() > 0 И НайденныеНастройки[0].Приостановлена Тогда
			Продолжить;
		КонецЕсли;
		
		УправляющийПоток(Очередь, СтрокаТаблицы.Задания, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// Запускает выполнения отложенных заданий в файловой базе.
//
// Параметры:
//  ТаблицаОчередей - ТаблицаЗначений - с колонками:
//   * Очередь                           - Строка          - имя регистра сведений очереди заданий,
//   * ИндексСтроки                      - Число           - определяет очередность выполнения очередей.
//   * Задания                           - ТаблицаЗначений - колонки таблицы значений соответствуют структуре
//                                                           регистра сведений очереди заданий.
//   * ВыполнитьВТранзакцииВФайловойБазе - Булево          - если ЛОЖЬ, тогда в файловой базе задания выполняются
//                                                           в управляющем потоке,
//                                                           если ИСТИНА, тогда в файловой базе выполняется
//                                                           в той же транзакции.
//
Процедура ЗапуститьВФайловойБазе(ТаблицаОчередей)
	
	ТаблицаОчередей.Индексы.Добавить("ВыполнитьВТранзакцииВФайловойБазе");
	
	КоличествоВыполнитьВТранзакцииВФайловойБазе =
		ТаблицаОчередей.НайтиСтроки(Новый Структура("ВыполнитьВТранзакцииВФайловойБазе", Истина)).Количество();
	
	Если КоличествоВыполнитьВТранзакцииВФайловойБазе = ТаблицаОчередей.Количество() Тогда
		
		ЗапуститьВТекущейТранзакции(ТаблицаОчередей);
		
	ИначеЕсли КоличествоВыполнитьВТранзакцииВФайловойБазе = 0 Тогда
		
		ВыполнитьСтарт(ТаблицаОчередей);
		
	Иначе
		
		Таблица = ТаблицаОчередей.СкопироватьКолонки();
		
		ВыполнитьВТранзакцииВФайловойБазе = ТаблицаОчередей[0].ВыполнитьВТранзакцииВФайловойБазе;
		
		Для каждого СтрокаТаблицы Из ТаблицаОчередей Цикл
			
			Если ВыполнитьВТранзакцииВФайловойБазе <> СтрокаТаблицы.ВыполнитьВТранзакцииВФайловойБазе Тогда
				
				Если ВыполнитьВТранзакцииВФайловойБазе Тогда
					
					ЗапуститьВТекущейТранзакции(Таблица);
					
				Иначе
					
					ВыполнитьСтарт(Таблица);
					
				КонецЕсли;
				
				Таблица.Очистить();
				
				ВыполнитьВТранзакцииВФайловойБазе = СтрокаТаблицы.ВыполнитьВТранзакцииВФайловойБазе;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаТаблицы);
			
		КонецЦикла;
		
		Если ВыполнитьВТранзакцииВФайловойБазе Тогда
			
			ЗапуститьВТекущейТранзакции(Таблица);
			
		Иначе
			
			ВыполнитьСтарт(Таблица);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПоляЗапуска()
	
	Возврат ?(ОбщегоНазначения.ИнформационнаяБазаФайловая() Или ОбщегоНазначения.РежимОтладки(),
				"Очередь, ИндексСтроки, ВыполнитьВТранзакцииВФайловойБазе",
				"Очередь, ИндексСтроки");
	
КонецФункции

Функция ИмяСобытияЗапускУправляющегоПотока()
	
	Возврат НСтр("ru = 'Запуск управляющего потока'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#Область ВыборкаЗаданий

#Область ТекстыЗапросов

Функция ТекстЗапросаВыборкиЗаданий(Запрос, ПараметрыОчереди, КоличествоЗаданий)
	
	Если ПараметрыОчереди.ВыборкаЗаданийПоУмолчанию Тогда
		
		ТекстЗапроса = ТекстЗапросаВыборкиЗаданийПоУмолчанию(Запрос, ПараметрыОчереди, КоличествоЗаданий);
		
	Иначе
		
		Очередь = ПараметрыОчереди.Очередь;
		
		ТекстЗапроса = РегистрыСведений[Очередь].ТекстЗапросаВыборкиЗаданий(Запрос, ПараметрыОчереди, КоличествоЗаданий);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗначимыеОчереди(ТаблицаОчередей)
	
	ТаблицаНастроек = НастройкиОчередей(ТаблицаОчередей.ВыгрузитьКолонку("Очередь"));
	
	ШаблонЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	&Очередь      КАК Очередь,
	|	&ИндексСтроки КАК ИндексСтроки
	|ИЗ
	|	ОчередьЗаданий КАК Таблица";
	
	ТекстыЗапроса = Новый Массив;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Очередь");
	
	Для каждого СтрокаТаблицы Из ТаблицаОчередей Цикл
		
		Очередь = СтрокаТаблицы.Очередь;
		
		Отбор.Очередь = Очередь;
		
		НайденныеСтроки = ТаблицаНастроек.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 И НайденныеСтроки[0].Приостановлена Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "&Очередь",       СтрШаблон("""%1""", Очередь));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,  "&ИндексСтроки",  Формат(СтрокаТаблицы.ИндексСтроки, "ЧН=0; ЧГ=;"));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,  "ОчередьЗаданий", СтрШаблон("%1.%2", "РегистрСведений", Очередь));
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	ТекстЗапроса = ?(ТекстыЗапроса.Количество() = 0,
						"",
						СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()));
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Функция ТаблицаЗаданий(
			Запрос,
			ИдентификаторыПереданныеВРабочиеПотоки,
			Очередь,
			УказательДействия,
			Таймауты = Неопределено)
	
	Запрос.УстановитьПараметр(
		"ИдентификаторыПереданныеВРабочиеПотоки",
		?(ИдентификаторыПереданныеВРабочиеПотоки = Неопределено, Новый Массив, ИдентификаторыПереданныеВРабочиеПотоки));
	
	УстановитьПривилегированныйРежим(Истина);
	Таблица = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	КоличествоТаймаутов = ?(Таймауты = Неопределено, 0, Таймауты.Количество());
	ИндексТаймаута      = 0;
	
	Пока Таблица.Количество() = 0 И ИндексТаймаута < КоличествоТаймаутов Цикл
		
		Пауза(Таймауты[ИндексТаймаута], Очередь);
		
		УстановитьПривилегированныйРежим(Истина);
		Таблица = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ИндексТаймаута = ИндексТаймаута + 1;
		
	КонецЦикла;
	
	Таблица.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
	
	Если ЗначениеЗаполнено(УказательДействия) Тогда
		Таблица.Индексы.Добавить(СтрШаблон("Обработано, %1", УказательДействия));
		Таблица.Индексы.Добавить(СтрШаблон("Обработано, ИдентификаторЗадания, %1", УказательДействия));
	Иначе
		Таблица.Индексы.Добавить("Обработано");
		Таблица.Индексы.Добавить("Обработано, ИдентификаторЗадания");
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

Функция ТаблицаУказателейДействий(ТаблицаЗаданий, УказательДействия)
	
	ТаблицаУказателейДействий = ТаблицаЗаданий.Скопировать(, УказательДействия);
	ТаблицаУказателейДействий.Свернуть(УказательДействия);
	ТаблицаУказателейДействий.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
	ТаблицаУказателейДействий.Индексы.Добавить("Обработано");
	ТаблицаУказателейДействий.Индексы.Добавить(СтрШаблон("Обработано, %1", УказательДействия));
	
	Возврат ТаблицаУказателейДействий;
	
КонецФункции

#КонецОбласти

#Область ВыполненияЗаданий

// Обрабатывает ошибки.
//
// Параметры:
//  ПараметрыОчереди - см. ПараметрыОчередиЗаданий
//  Данные           - ТаблицаЗначений - данные для выполнения заданий,
//  Ошибки           - Соответствие из УникальныйИдентификатор - ключ, это идентификатор не выполненных (выдающих ошибку
//                                                                при выполнении) записей регистра сведений очереди
//                                                                заданий (измерение ИдентификаторЗаписи регистра
//                                                                сведений очереди заданий),
//                                                               значение, это представление ошибки.
//  ТекстИсключения  - Строка - текст ошибки исключения.
//
Процедура ОбработатьОшибки(ПараметрыОчереди, Данные, Ошибки, ТекстИсключения = "")
	
	Если Ошибки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Идентификаторы = Новый Массив;
	Для каждого Идентификатор Из Ошибки Цикл
		Идентификаторы.Добавить(Идентификатор.Ключ);
	КонецЦикла;
	
	Поля = Новый Массив;
	Для каждого Колонка Из Данные.Колонки Цикл
		
		ИмяПоля = Колонка.Имя;
		
		Если ИмяПоля = "ИдентификаторЗадания" Или ИмяПоля = "ДатаЗадания" Или ИмяПоля = "ИдентификаторЗаписи" Тогда
			Продолжить;
		КонецЕсли;
		
		Поля.Добавить(ИмяПоля);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Данные.ИдентификаторЗадания КАК ИдентификаторЗадания,
	|	Данные.ДатаЗадания          КАК ДатаЗадания,
	|	Данные.ИдентификаторЗаписи  КАК ИдентификаторЗаписи,
	|	&Поля
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	&Данные КАК Данные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.ИдентификаторЗадания КАК ИдентификаторЗадания,
	|	Данные.ДатаЗадания          КАК ДатаЗадания,
	|	Данные.ИдентификаторЗаписи  КАК ИдентификаторЗаписи,
	|	&Поля
	|ИЗ
	|	Данные КАК Данные
	|ГДЕ
	|	Данные.ИдентификаторЗаписи В (&Идентификаторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Данные.ДатаЗадания
	|
	|ИТОГИ ПО
	|	ИдентификаторЗадания
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Поля", СтрСоединить(Поля, ", "));
	
	Запрос.УстановитьПараметр("Данные",         Данные);
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Очередь                     = ПараметрыОчереди.Очередь;
	АналитикаРасчета            = ПараметрыОчереди.АналитикаРасчета;
	ВыполнитьЗаданияВТранзакции = ПараметрыОчереди.ВыполнитьЗаданияВТранзакции;
	
	ТаблицаЗаписей   = РегистрыСведений[Очередь].СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ТекстыОшибок     = Новый Массив;
	
	Если ВыполнитьЗаданияВТранзакции Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			КоличествоЗаписей = 0;
			
			НаборЗаписей = РегистрыСведений.ОшибкиВыполненияОтложенныхЗаданий.СоздатьНаборЗаписей();
			
			ВыборкаИдентификаторЗадания = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаИдентификаторЗадания.Следующий() Цикл
				
				ТаблицаЗаписей.Очистить();
				
				ТекстыОшибок.Очистить();
				
				Выборка = ВыборкаИдентификаторЗадания.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					ЗаполнитьЗначенияСвойств(ТаблицаЗаписей.Добавить(), Выборка);
					
					ТекстОшибки = Ошибки[Выборка.ИдентификаторЗаписи];
					Если ЗначениеЗаполнено(ТекстОшибки) И ТекстыОшибок.Найти(ТекстОшибки) = Неопределено Тогда
						ТекстыОшибок.Добавить(ТекстОшибки);
					КонецЕсли;
					
				КонецЦикла;
				
				ОписаниеОшибки = СтрСоединить(ТекстыОшибок, Символы.ПС);
				
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаписьНабора.Очередь             = Очередь;
				ЗаписьНабора.ИдентификаторОшибки = Новый УникальныйИдентификатор;
				ЗаписьНабора.ДанныеЗадания       = Новый ХранилищеЗначения(ТаблицаЗаписей, Новый СжатиеДанных(9));
				ЗаписьНабора.ОписаниеОшибки      = ОписаниеОшибки;
				ЗаписьНабора.ДатаЗаписи          = ТекущаяДатаСеанса();
				ЗаписьНабора.ХешАналитикиРасчета = ХешАналитикиРасчета(ТаблицаЗаписей[0], АналитикаРасчета);
				
				КоличествоЗаписей = КоличествоЗаписей + 1;
				Если КоличествоЗаписей = 1000 Тогда
					
					УстановитьПривилегированныйРежим(Истина);
					НаборЗаписей.Записать(Ложь);
					УстановитьПривилегированныйРежим(Ложь);
					
					НаборЗаписей = РегистрыСведений.ОшибкиВыполненияОтложенныхЗаданий.СоздатьНаборЗаписей();
					
					КоличествоЗаписей = 0;
					
				КонецЕсли;
				
				ЗаписатьОшибкуВЖурналРегистрации(Очередь, ОписаниеОшибки);
				
			КонецЦикла;
			
			Если КоличествоЗаписей > 0 Тогда
				
				УстановитьПривилегированныйРежим(Истина);
				НаборЗаписей.Записать(Ложь);
				УстановитьПривилегированныйРежим(Ложь);
				
			КонецЕсли;
			
			УдалитьЗадания(ПараметрыОчереди, Данные, Неопределено,, ТекстИсключения);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
		
			ТекстИсключения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписатьОшибкуВЖурналРегистрации(Очередь, ТекстИсключения);
			
		КонецПопытки;
		
	Иначе
		
		ВыборкаИдентификаторЗадания = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаИдентификаторЗадания.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				НаборЗаписей = РегистрыСведений.ОшибкиВыполненияОтложенныхЗаданий.СоздатьНаборЗаписей();
				
				ТаблицаЗаписей.Очистить();
				
				ТекстыОшибок.Очистить();
				
				Выборка = ВыборкаИдентификаторЗадания.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					ЗаполнитьЗначенияСвойств(ТаблицаЗаписей.Добавить(), Выборка);
					
					ТекстОшибки = Ошибки[Выборка.ИдентификаторЗаписи];
					Если ЗначениеЗаполнено(ТекстОшибки) И ТекстыОшибок.Найти(ТекстОшибки) = Неопределено Тогда
						ТекстыОшибок.Добавить(ТекстОшибки);
					КонецЕсли;
					
				КонецЦикла;
				
				ОписаниеОшибки = СтрСоединить(ТекстыОшибок, Символы.ПС);
				
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаписьНабора.Очередь             = Очередь;
				ЗаписьНабора.ИдентификаторОшибки = Новый УникальныйИдентификатор;
				ЗаписьНабора.ДанныеЗадания       = Новый ХранилищеЗначения(ТаблицаЗаписей, Новый СжатиеДанных(9));
				ЗаписьНабора.ОписаниеОшибки      = ОписаниеОшибки;
				ЗаписьНабора.ДатаЗаписи          = ТекущаяДатаСеанса();
				ЗаписьНабора.ХешАналитикиРасчета = ХешАналитикиРасчета(ТаблицаЗаписей[0], АналитикаРасчета);
				
				УстановитьПривилегированныйРежим(Истина);
				НаборЗаписей.Записать(Ложь);
				УстановитьПривилегированныйРежим(Ложь);
				
				ТекущиеПараметрыОчереди = ПараметрыОчереди;
				Если Не ПараметрыОчереди.ВыполнитьЗаданияВТранзакции Тогда
					ТекущиеПараметрыОчереди = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыОчереди);
					ТекущиеПараметрыОчереди.ВыполнитьЗаданияВТранзакции = Истина;
				КонецЕсли;
				
				УдалитьЗадания(ТекущиеПараметрыОчереди, ТаблицаЗаписей, Неопределено,, ОписаниеОшибки);
				
				ЗаписатьОшибкуВЖурналРегистрации(Очередь, ОписаниеОшибки);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстИсключения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЗаписатьОшибкуВЖурналРегистрации(Очередь, ТекстИсключения);
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет задания.
//
// Параметры:
//  ПараметрыОчереди               - см. ПараметрыОчередиЗаданий
//  Данные                         - см. ОбработатьОшибки.Данные
//  Ошибки                         - см. ОбработатьОшибки.Ошибки
//  ТаблицаХешовВыполненныхЗаданий - см. ТаблицаХешовВыполненныхЗаданий
//  ТекстИсключения                - см. ОбработатьОшибки.ТекстИсключения
//
Процедура УдалитьЗадания(
			ПараметрыОчереди,
			Данные,
			Ошибки,
			ТаблицаХешовВыполненныхЗаданий = Неопределено,
			ТекстИсключения = "")
	
	Очередь                     = ПараметрыОчереди.Очередь;
	АналитикаРасчета            = ПараметрыОчереди.АналитикаРасчета;
	ВыполнитьЗаданияВТранзакции = ПараметрыОчереди.ВыполнитьЗаданияВТранзакции;
	
	НаборЗаписей = РегистрыСведений[Очередь].СоздатьНаборЗаписей();
	
	Если ВыполнитьЗаданияВТранзакции Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			ИндексСтроки = Данные.Количество() - 1;
			
			Пока ИндексСтроки > -1 Цикл
				
				СтрокаДанных = Данные[ИндексСтроки];
				ИндексСтроки = ИндексСтроки - 1;
				
				ИдентификаторЗаписи = СтрокаДанных.ИдентификаторЗаписи;
				
				Если Ошибки <> Неопределено И Ошибки[ИдентификаторЗаписи] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				УдалитьЗаписьИзРегистраОчередиЗаданий(Очередь, ИдентификаторЗаписи, НаборЗаписей);
				
				ПроверитьДобавитьВТаблицуХешовВыполненныхЗаданий(
					ТаблицаХешовВыполненныхЗаданий,
					СтрокаДанных,
					АналитикаРасчета);
				
				Данные.Удалить(СтрокаДанных);
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстИсключения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписатьОшибкуВЖурналРегистрации(Очередь, ТекстИсключения);
			
		КонецПопытки;
		
	Иначе
		
		ТекстыИсключений  = Новый Массив;
		
		Попытка
			ИндексСтроки = Данные.Количество() - 1;
		Исключение
			
			ТекстИсключения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписатьОшибкуВЖурналРегистрации(Очередь, ТекстИсключения);
			
			Возврат;
			
		КонецПопытки;
		
		Пока ИндексСтроки > -1 Цикл
			
			Попытка
				
				КритическаяОшибка = Ложь;
				
				СтрокаДанных = Данные[ИндексСтроки];
				ИндексСтроки = ИндексСтроки - 1;
				
				КритическаяОшибка = Истина;
				
				ИдентификаторЗаписи = СтрокаДанных.ИдентификаторЗаписи;
				
				Если Ошибки <> Неопределено И Ошибки[ИдентификаторЗаписи] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				УдалитьЗаписьИзРегистраОчередиЗаданий(Очередь, ИдентификаторЗаписи, НаборЗаписей);
				
				ПроверитьДобавитьВТаблицуХешовВыполненныхЗаданий(
					ТаблицаХешовВыполненныхЗаданий,
					СтрокаДанных,
					АналитикаРасчета);
				
				Данные.Удалить(СтрокаДанных);
				
			Исключение
				
				ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЗаписатьОшибкуВЖурналРегистрации(Очередь, ТекстОшибки);
				
				Если ТекстыИсключений.Найти(ТекстОшибки) = Неопределено Тогда
					ТекстыИсключений.Добавить(ТекстОшибки);
				КонецЕсли;
				
				Если КритическаяОшибка Тогда
					Прервать;
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЦикла;
		
		Если ТекстыИсключений.Количество() > 0 Тогда
			ТекстИсключения = СтрСоединить(ТекстыИсключений, Символы.ПС);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьЗаписьИзРегистраОчередиЗаданий(Очередь, ИдентификаторЗаписи, Знач НаборЗаписей = Неопределено)
	
	Если НаборЗаписей = Неопределено Тогда
		НаборЗаписей = РегистрыСведений[Очередь].СоздатьНаборЗаписей();
	КонецЕсли;
	
	НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(ИдентификаторЗаписи);
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Удаляет ошибки (записи регистра сведений ОшибкиВыполненияОтложенныхЗаданий) по хешам аналитики расчетов
// (реквизит ХешАналитикиРасчета) успешно выполненных заданий.
// 
// Параметры:
//  Очередь                        - см. ДобавитьЗаданияВОчередь.Очередь
//  ТаблицаХешовВыполненныхЗаданий - см. ТаблицаХешовВыполненныхЗаданий
//
Процедура ПроверитьУдалитьОшибкиВыполненныхЗданий(Очередь, ТаблицаХешовВыполненныхЗаданий)
	
	Если ТаблицаХешовВыполненныхЗаданий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.ИдентификаторОшибки КАК ИдентификаторОшибки,
	|	Таблица.ДанныеЗадания       КАК ДанныеЗадания,
	|	Таблица.ХешАналитикиРасчета КАК ХешАналитикиРасчета
	|ИЗ
	|	РегистрСведений.ОшибкиВыполненияОтложенныхЗаданий КАК Таблица
	|ГДЕ
	|	Таблица.Очередь = &Очередь
	|	И Таблица.ХешАналитикиРасчета В (&МассивХешов)";
	
	Запрос.УстановитьПараметр("Очередь",     Очередь);
	Запрос.УстановитьПараметр("МассивХешов", ТаблицаХешовВыполненныхЗаданий.ВыгрузитьКолонку("ХешАналитикиРасчета"));
	
	ОтборХешАналитикиРасчета = Новый Структура("ХешАналитикиРасчета");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Данные = Выборка.ДанныеЗадания.Получить()[0];
		
		ЗаполнитьЗначенияСвойств(ОтборХешАналитикиРасчета, Выборка);
		
		НайденныеСтроки = ТаблицаХешовВыполненныхЗаданий.НайтиСтроки(ОтборХешАналитикиРасчета);
		Для каждого СтрокаТаблицыХешов Из НайденныеСтроки Цикл
			
			УдалитьЗапись = Истина;
			
			ДанныеАналитикиРасчета = СтрокаТаблицыХешов.ДанныеАналитикиРасчета;
			Для каждого Поле Из ДанныеАналитикиРасчета Цикл
				
				Если Поле.Значение <> Данные[Поле.Ключ] Тогда
					УдалитьЗапись = Ложь;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если УдалитьЗапись Тогда
				
				НаборЗаписей = РегистрыСведений.ОшибкиВыполненияОтложенныхЗаданий.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ИдентификаторОшибки.Установить(Выборка.ИдентификаторОшибки);
				
				Попытка
					
					УстановитьПривилегированныйРежим(Истина);
					НаборЗаписей.Записать();
					УстановитьПривилегированныйРежим(Ложь);
					
				Исключение
					
					МетаРегистр   = Метаданные.РегистрыСведений.ОшибкиВыполненияОтложенныхЗаданий;
					МетаИзмерения = МетаРегистр.Измерения;
					МетаРеквизиты = МетаРегистр.Реквизиты;
					
					ОписаниеПолей = Новый Массив;
					
					ОписаниеПолей.Добавить(
						СтрШаблон("%1: %2",
									МетаИзмерения.Очередь.Представление(),
									Очередь));
						
					ОписаниеПолей.Добавить(
						СтрШаблон("%1: %2",
									МетаИзмерения.ИдентификаторОшибки.Представление(),
									Выборка.ИдентификаторОшибки));
						
					ОписаниеПолей.Добавить(
						СтрШаблон("%1: %2",
									МетаРеквизиты.ХешАналитикиРасчета.Представление(),
									Выборка.ХешАналитикиРасчета));
					
					ШаблонОшибки = НСтр("ru = 'Не удалось удалить запись регистра ""%1"":
											   |%2
											   |
											   |по причине:
											   |%3'");
					
					ТекстОшибки = СтрШаблон(ШаблонОшибки,
												МетаРегистр.Представление(),
												СтрСоединить(ОписаниеПолей, Символы.ПС),
												ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(ИмяСобытия(), УровеньЖурналаРегистрации.Ошибка, МетаРегистр,, ТекстОшибки);
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеОшибки(Ошибки)
	
	ТекстОшибки = "";
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		ТекстыОшибок = Новый Массив;
		
		Для каждого Идентификатор Из Ошибки Цикл
			
			Текст = Идентификатор.Значение;
			Если ТекстыОшибок.Найти(Текст) = Неопределено Тогда
				ТекстыОшибок.Добавить(Текст);
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстОшибки = СтрСоединить(ТекстыОшибок, Символы.ПС);
		
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Процедура ВыполнитьЗаданияВФонеУправлящегоПотока(ИмяМетода, ПараметрыОчереди, Порция)
	
	КоличествоПовторов        = КоличествоПовторов();
	ТекущееКоличествоПовторов = 0;
	
	ПараметрыДанных = ПараметрыДанных(Порция, ПоместитьВоВременноеХранилище(Неопределено));
	
	Пока Истина Цикл
		
		ТекущееКоличествоПовторов = ТекущееКоличествоПовторов + 1;
		ЗафиксироватьОшибку       = ТекущееКоличествоПовторов = КоличествоПовторов;
		
		ПараметрыМетода = ПараметрыРабочегоПотока(ПараметрыОчереди, ПараметрыДанных, ЗафиксироватьОшибку, Ложь, "");
		
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяМетода, ПараметрыМетода);
		
		ТекстОшибки = ПараметрыМетода[4];
		
		Если ЗафиксироватьОшибку Или Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			УдалитьИзВременногоХранилища(ПараметрыДанных.АдресНеОбработанныхДанных);
			Прервать;
		Иначе
			
			ТекущиеДанные = ПолучитьИзВременногоХранилища(ПараметрыДанных.АдресНеОбработанныхДанных);
			
			Если ЗначениеЗаполнено(ТекущиеДанные) Тогда
				ПараметрыДанных.Данные = ТекущиеДанные;
			Иначе
				УдалитьИзВременногоХранилища(ПараметрыДанных.АдресНеОбработанныхДанных);
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьОшибкуВЖурналРегистрации(Очередь, ТекстОшибки)
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия(),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.РегистрыСведений[Очередь],,
		ТекстОшибки);
	
КонецПроцедуры

// Инициализирует таблицу хешов выполненных заданий.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица хешов выполненных заданий:
//   * ХешАналитикиРасчета - см. ХешАналитикиРасчета
//   * ДанныеАналитикиРасчета - Структура - ключи: это имена полей аналитики расчета очереди
//                                            (см. ОчередиЗаданий колонка АналитикаРасчета),
//                                          значения: значения соответствующих полей аналитики расчета очереди указанных
//                                            в клячах.
//
Функция ТаблицаХешовВыполненныхЗаданий()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ХешАналитикиРасчета",    ОбщегоНазначения.ОписаниеТипаСтрока(64));
	Таблица.Колонки.Добавить("ДанныеАналитикиРасчета", Новый ОписаниеТипов("Структура"));
	Таблица.Индексы.Добавить("ХешАналитикиРасчета");
	
	Возврат Таблица;
	
КонецФункции

// Проверяет, добавляет строку в таблицу хешов удаленных заданий.
//
// Параметры:
//  Таблица          - см. ТаблицаХешовВыполненныхЗаданий
//  Данные           - см. ХешАналитикиРасчета.Данные
//  АналитикаРасчета - см. ХешАналитикиРасчета.АналитикаРасчета
//
Процедура ПроверитьДобавитьВТаблицуХешовВыполненныхЗаданий(Таблица, Данные, АналитикаРасчета)
	
	Если Таблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АналитикаРасчета) Тогда
		ДанныеАналитикиРасчета = Новый Структура(АналитикаРасчета);
	Иначе
		ДанныеАналитикиРасчета = Новый Структура("ИдентификаторЗаписи");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеАналитикиРасчета, Данные);
	
	ОтборХешАналитикиРасчета = Новый Структура("ХешАналитикиРасчета", ХешАналитикиРасчета(Данные, АналитикаРасчета));
	
	НайденныеСтроки = Таблица.НайтиСтроки(ОтборХешАналитикиРасчета);
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы.ХешАналитикиРасчета    = ОтборХешАналитикиРасчета.ХешАналитикиРасчета;
		СтрокаТаблицы.ДанныеАналитикиРасчета = ДанныеАналитикиРасчета;
		
	Иначе
		
		// В случае, если есть коллизии - для разных комбинации значений аналитики расчета одинаковый хеш
		
		Для каждого СтрокаТаблицыХешов Из НайденныеСтроки Цикл
			
			ДобавитьХешВТаблицу = Ложь;
			
			Для каждого Поле Из ДанныеАналитикиРасчета Цикл
				
				Если Поле.Значение <> СтрокаТаблицыХешов.ДанныеАналитикиРасчета[Поле.Ключ] Тогда
					ДобавитьХешВТаблицу = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ДобавитьХешВТаблицу Тогда
				
				СтрокаТаблицы = Таблица.Добавить();
				СтрокаТаблицы.ХешАналитикиРасчета    = ОтборХешАналитикиРасчета.ХешАналитикиРасчета;
				СтрокаТаблицы.ДанныеАналитикиРасчета = ДанныеАналитикиРасчета;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РабочийПоток

// Инициализирует таблицу рабочих потоков.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица рабочих процессов:
//   * Данные                    - см. ПараметрыДанных.Данные
//   * АдресНеОбработанныхДанных - см. ПараметрыДанных.АдресНеОбработанныхДанных
//   * ИмяМетода                 - Строка - имя метода выполнения заданий (колонка ИмяМетода см. ОчередиЗаданий)
//   * ФоновоеЗадание            - ФоновоеЗадание - рабочий процесс
//   * УникальныйИдентификатор   - УникальныйИдентификатор - уникальный идентификатор рабочего процесса
//   * КоличествоПовторов        - Число - количество повторов
//
Функция РабочиеПотоки()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Данные",                    Новый ОписаниеТипов("ТаблицаЗначений"));
	Таблица.Колонки.Добавить("АдресНеОбработанныхДанных", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Таблица.Колонки.Добавить("ИмяМетода",                 ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	Таблица.Колонки.Добавить("ФоновоеЗадание",            Новый ОписаниеТипов("ФоновоеЗадание"));
	Таблица.Колонки.Добавить("УникальныйИдентификатор",   Новый ОписаниеТипов("УникальныйИдентификатор"));
	Таблица.Колонки.Добавить("КоличествоПовторов",        ОбщегоНазначения.ОписаниеТипаЧисло(1));
	Таблица.Индексы.Добавить("ИмяМетода");
	Таблица.Индексы.Добавить("УникальныйИдентификатор");
	
	Возврат Таблица;
	
КонецФункции

// Создает рабочий поток и добавляет в таблицу рабочих потоков.
//
// Параметры:
//  Таблица           - см. РабочиеПотоки
//  ПараметрыОчереди  - см. ПараметрыОчередиЗаданий
//  Данные            - ТаблицаЗначений - таблица данных заданий,
//
Процедура ДобавитьРабочийПоток(Таблица, ПараметрыОчереди, Данные)
	
	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.Данные                    = Данные;
	СтрокаТаблицы.АдресНеОбработанныхДанных = ПоместитьВоВременноеХранилище(Неопределено);
	СтрокаТаблицы.ИмяМетода                 = ПараметрыОчереди.ИмяМетода;
	СтрокаТаблицы.ФоновоеЗадание            = РабочийПоток(ПараметрыОчереди, СтрокаТаблицы, Ложь);
	СтрокаТаблицы.УникальныйИдентификатор   = СтрокаТаблицы.ФоновоеЗадание.УникальныйИдентификатор;
	СтрокаТаблицы.КоличествоПовторов        = 1;
	
КонецПроцедуры

Функция РабочийПоток(ПараметрыОчереди, Данные, ЗафиксироватьОшибку)
	
	ИмяМетодаРабочегоПотока    = ИмяМетодаРабочегоПотока(ПараметрыОчереди.Очередь);
	НаименованиеРабочегоПотока = НаименованиеРабочегоПотока(ПараметрыОчереди);
	
	ПараметрыДанных = ПараметрыДанных(Неопределено);
	ЗаполнитьЗначенияСвойств(ПараметрыДанных, Данные);
	
	ПараметрыМетода = ПараметрыРабочегоПотока(ПараметрыОчереди, ПараметрыДанных, ЗафиксироватьОшибку);
	
	Возврат ФоновыеЗадания.Выполнить(ИмяМетодаРабочегоПотока, ПараметрыМетода,, НаименованиеРабочегоПотока);
	
КонецФункции

Функция ИмяМетодаРабочегоПотока(Очередь)
	
	Возврат СтрШаблон("%1.%2", "ОтложенныеЗадания", Очередь);
	
КонецФункции

Функция НаименованиеРабочегоПотока(ПараметрыОчереди)
	
	Возврат СтрШаблон("%1 ""%2 [%3]""",
						НСтр("ru = 'Рабочий поток'"),
						ПараметрыОчереди.Очередь,
						ПараметрыОчереди.ИмяМетода);
	
КонецФункции

// Возвращает параметры рабочего потока в виде массива.
// 
// Параметры:
//  ПараметрыОчереди         - см. ВыполнитьЗадания.ПараметрыОчереди
//  ПараметрыДанных          - см. ВыполнитьЗадания.ПараметрыДанных
//  ЗафиксироватьОшибку      - см. ВыполнитьЗадания.ЗафиксироватьОшибку
//  ОбработатьВТекущемСеансе - см. ВыполнитьЗадания.ОбработатьВТекущемСеансе
//  ТекстОшибки              - см. ВыполнитьЗадания.ТекстОшибки
// 
// Возвращаемое значение:
//  Массив - параметры рабочего потока
//
Функция ПараметрыРабочегоПотока(
			ПараметрыОчереди,
			ПараметрыДанных,
			ЗафиксироватьОшибку,
			ОбработатьВТекущемСеансе = Ложь,
			ТекстОшибки = Неопределено)
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(ПараметрыОчереди);
	ПараметрыМетода.Добавить(ПараметрыДанных);
	ПараметрыМетода.Добавить(ЗафиксироватьОшибку);
	ПараметрыМетода.Добавить(ОбработатьВТекущемСеансе);
	ПараметрыМетода.Добавить(ТекстОшибки);
	
	Возврат ПараметрыМетода;
	
КонецФункции

Функция КоличествоАктивныхРабочихПотоков(ПараметрыОчереди, ВсеПотоки = Ложь)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяМетода", ИмяМетодаРабочегоПотока(ПараметрыОчереди.Очередь));
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	Если Не ВсеПотоки Тогда
		Отбор.Вставить("Наименование", НаименованиеРабочегоПотока(ПараметрыОчереди));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество();
	
КонецФункции

Функция КонтролироватьРабочиеПотоки(РабочиеПотоки, ПараметрыОчереди, ВсеПотоки = Ложь)
	
	Если РабочиеПотоки = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	ОтборРабочийПоток = Новый Структура;
	ОтборРабочийПоток.Вставить("УникальныйИдентификатор");
	
	ПолучитьВсеПотоки             = ВсеПотоки;
	МаксимальноеКоличествоПотоков = ПараметрыОчереди.МаксимальноеКоличествоПотоков;
	
	ЕстьСвободныйРабочийПоток     = Ложь;
	
	КоличествоПовторов            = КоличествоПовторов();
	
	Если ВсеПотоки Тогда
		ОбрабатываемыеРабочиеПотоки = РабочиеПотоки;
	Иначе
		ОтборИмяМетода = Новый Структура("ИмяМетода", ПараметрыОчереди.ИмяМетода);
		ОбрабатываемыеРабочиеПотоки = РабочиеПотоки.НайтиСтроки(ОтборИмяМетода);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пока ОбрабатываемыеРабочиеПотоки.Количество() > 0 Цикл
		
		НайденныеРабочиеПотоки = ФоновыеЗадания.ОжидатьЗавершенияВыполнения(
									ПолучитьРабочиеПотоки(РабочиеПотоки, ПараметрыОчереди, ПолучитьВсеПотоки), 1);
		
		Для каждого ТекущийРабочийПоток Из НайденныеРабочиеПотоки Цикл
			
			СостояниеРабочегоПотока = ТекущийРабочийПоток.Состояние;
			
			Если СостояниеРабочегоПотока = СостояниеФоновогоЗадания.Завершено
			 Или СостояниеРабочегоПотока = СостояниеФоновогоЗадания.Отменено Тогда
				
				ОтборРабочийПоток.УникальныйИдентификатор = ТекущийРабочийПоток.УникальныйИдентификатор;
				
				СтрокаРП = РабочиеПотоки.НайтиСтроки(ОтборРабочийПоток)[0];
				
				УдалитьИзВременногоХранилища(СтрокаРП.АдресНеОбработанныхДанных);
				
				РабочиеПотоки.Удалить(СтрокаРП);
				
				Если Не ВсеПотоки И Не ЕстьСвободныйРабочийПоток Тогда
					ЕстьСвободныйРабочийПоток = Истина;
				КонецЕсли;
				
			ИначеЕсли СостояниеРабочегоПотока = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
				
				ОтборРабочийПоток.УникальныйИдентификатор = ТекущийРабочийПоток.УникальныйИдентификатор;
				
				СтрокаРП = РабочиеПотоки.НайтиСтроки(ОтборРабочийПоток)[0];
				Если СтрокаРП.КоличествоПовторов = КоличествоПовторов Тогда
					
					УдалитьИзВременногоХранилища(СтрокаРП.АдресНеОбработанныхДанных);
					
					РабочиеПотоки.Удалить(СтрокаРП);
					
					Если Не ВсеПотоки И Не ЕстьСвободныйРабочийПоток Тогда
						ЕстьСвободныйРабочийПоток = Истина;
					КонецЕсли;
					
				Иначе
					
					ТекущиеДанные = ПолучитьИзВременногоХранилища(СтрокаРП.АдресНеОбработанныхДанных);
					
					Если ЗначениеЗаполнено(ТекущиеДанные) Тогда
						
						Если ВсеПотоки Тогда
							ПараметрыОчереди.ИмяМетода = СтрокаРП.ИмяМетода;
						КонецЕсли;
						
						ТекущееКоличествоПовторов = СтрокаРП.КоличествоПовторов + 1;
						ЗафиксироватьОшибку       = ТекущееКоличествоПовторов = КоличествоПовторов;
						
						СтрокаРП.Данные                  = ТекущиеДанные;
						СтрокаРП.ФоновоеЗадание          = РабочийПоток(ПараметрыОчереди, СтрокаРП, ЗафиксироватьОшибку);
						СтрокаРП.УникальныйИдентификатор = СтрокаРП.ФоновоеЗадание.УникальныйИдентификатор;
						СтрокаРП.КоличествоПовторов      = ТекущееКоличествоПовторов;
						
					Иначе
						
						УдалитьИзВременногоХранилища(СтрокаРП.АдресНеОбработанныхДанных);
						
						РабочиеПотоки.Удалить(СтрокаРП);
						
						Если Не ВсеПотоки И Не ЕстьСвободныйРабочийПоток Тогда
							ЕстьСвободныйРабочийПоток = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
			
		Если ЕстьСвободныйРабочийПоток Тогда
			
			Если МаксимальноеКоличествоПотоков = 0
			 Или МаксимальноеКоличествоПотоков > КоличествоАктивныхРабочихПотоков(ПараметрыОчереди, Истина) Тогда
				Прервать;
			Иначе
				ОбрабатываемыеРабочиеПотоки = РабочиеПотоки;
				ПолучитьВсеПотоки           = Истина;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ?(ВсеПотоки, 0, КоличествоАктивныхРабочихПотоков(ПараметрыОчереди));
	
КонецФункции

Функция ПолучитьРабочиеПотоки(РабочиеПотоки, ПараметрыОчереди, ВсеПотоки)
	
	Если ВсеПотоки Тогда
		
		МассивРабочихПотоков = РабочиеПотоки.ВыгрузитьКолонку("ФоновоеЗадание");
		
	Иначе
		
		НайденныеСтроки = РабочиеПотоки.НайтиСтроки(Новый Структура("ИмяМетода", ПараметрыОчереди.ИмяМетода));
		
		Если НайденныеСтроки.Количество() = РабочиеПотоки.Количество() Тогда
			МассивРабочихПотоков = РабочиеПотоки.ВыгрузитьКолонку("ФоновоеЗадание");
		Иначе
			МассивРабочихПотоков = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФоновоеЗадание")
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивРабочихПотоков;
	
КонецФункции

// Возвращает количество повторов запуска рабочего потока при возникновении ошибки.
//
// Возвращаемое значение:
//  Число - количество повторов
//
Функция КоличествоПовторов()
	
	Возврат 3;
	
КонецФункции

// Возвращает параметры данных.
//
// Параметры:
//  Данные                    - ТаблицаЗначений, Неопределено - данные для выполнения заданий,
//  АдресНеОбработанныхДанных - Строка, Неопределено          - адрес во временном хранилище, используется для передачи
//                                                              не обработанных данных из рабочего потока в управляющий
//                                                              поток. По умолчанию НЕОПРЕДЕЛЕНО.
//
// Возвращаемое значение:
//  Структура - с ключами:
//   * Данные                    - см. ПараметрыДанных.Данные
//   * АдресНеОбработанныхДанных - см. ПараметрыДанных.АдресНеОбработанныхДанных
//
Функция ПараметрыДанных(Данные, АдресНеОбработанныхДанных = Неопределено)
	
	Параметры = Новый Структура;
	Параметры.Вставить("Данные",                    Данные);
	Параметры.Вставить("АдресНеОбработанныхДанных", АдресНеОбработанныхДанных);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает идентификаторы записей заданий которые выполняются в рабочих потоках, если рабоче потоки не заданы,
// тогда идентификаторы обработанных записей получаются из таблицы заданий.
// 
// Параметры:
//  РабочиеПотоки  - см. РабочиеПотоки
//  ТаблицаЗаданий - ТаблицаЗначений - таблица заданий с обязательными колонками:
//   * Обработано          - Булево - 
//   * ИдентификаторЗаписи - УникальныйИдентификатор -
//  ИдентификаторыПереданныеНаВыполнения - Массив из УникальныйИдентификатор - массив идентификаторов записей заданий,
//                                                                             которые переданы на выполнения.
//
Процедура ИдентификаторыПереданныеНаВыполнения(РабочиеПотоки, ТаблицаЗаданий, ИдентификаторыПереданныеНаВыполнения)
	
	Если РабочиеПотоки <> Неопределено Тогда
		
		Если РабочиеПотоки.Количество() = 0 Тогда
			
			ИдентификаторыПереданныеНаВыполнения = Неопределено;
			
		Иначе
			
			ИдентификаторыПереданныеНаВыполнения = Новый Массив;
			
			Для каждого СтрокаРП Из РабочиеПотоки Цикл
				
				Если СтрокаРП.ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
					Продолжить;
				КонецЕсли;
				
				Для каждого СтрокаТД Из СтрокаРП.Данные Цикл
					ИдентификаторыПереданныеНаВыполнения.Добавить(СтрокаТД.ИдентификаторЗаписи);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ТаблицаЗаданий) Тогда
		
		ОтборОбработано = Новый Структура("Обработано", Истина);
		ТаблицаИдентификаторов = ТаблицаЗаданий.Скопировать(ОтборОбработано, "ИдентификаторЗаписи");
		
		Если ЗначениеЗаполнено(ИдентификаторыПереданныеНаВыполнения) Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ИдентификаторыПереданныеНаВыполнения,
				ТаблицаИдентификаторов.ВыгрузитьКолонку("ИдентификаторЗаписи"));
			
		Иначе
			
			ИдентификаторыПереданныеНаВыполнения = ТаблицаИдентификаторов.ВыгрузитьКолонку("ИдентификаторЗаписи");
			
		КонецЕсли;
		
	Иначе
		
		ИдентификаторыПереданныеНаВыполнения = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

#Область Очереди

// Возвращает параметры очереди заданий.
// 
// Возвращаемое значение:
//  Структура - с ключами:
//   * Очередь                           - Строка - имя регистра сведений очереди заданий.
//   * ИмяМетода                         - Строка - имя метода выполнения заданий, принцип формирования аналогично
//                                                  аргументу ИмяМетода метода ОбщегоНазначения.ВыполнитьМетодКонфигурации
//                                                  (см. ОбщегоНазначения.ВыполнитьМетодКонфигурации.ИмяМетода).
//   * УказательДействия                 - Строка - имя поля регистра очереди заданий, который определяет имя метода
//                                                  выполнения заданий. Задания будут выполнены в разрезе данного поля.
//                                                  Указатель действия должен быть включен в список аналитики расчета
//                                                  (параметр АналитикаРасчета).
//                                                  Имеет смысл, если ИмяМетода не заполнена.
//   * ИменаМетодовПоЗначениямУказателя  - Соответствие из КлючИЗначение - настраивается соответствие значений 
//                                                  УказательДействия с именами методов выполнения заданий. 
//                                                  Имеет смысл, если ИмяМетода не заполнена.
//   * Многопоточный                     - Булево - признак многопоточного выполнения заданий в очереди.
//   * КоличествоПотоков                 - Число  - количество потоков (фоновых заданий) для выполнения отложенных
//                                                  заданий очереди, по умолчанию 4
//                                                  (см. ОтложенныеЗаданияПереопределяемый.КоличествоПотоковПоУмолчанию).
//   * МаксимальноеКоличествоПотоков     - Число  - максимальное количество потоков (фоновых заданий) которые можно
//                                                  запустить для выполнения заданий данной очереди. Имеет смысл для
//                                                  очередей с вложенными очередями
//                                                  (как пример УниверсальнаяОчередьОперативныхЗаданий).
//                                                  Если 0, тогда максимальное количество потоков не контролируется.
//                                                  По умолчанию 0.
//   * ПорцияРасчета                     - Число  - количество заданий, которые нужно передать в рабочий поток,
//                                                  по умолчанию 100
//                                                  (см. ОтложенныеЗаданияПереопределяемый.ПорцияРасчетаПоУмолчанию).
//   * РежимРаспределенияЗаданий         - Строка - режим распределения заданий по потокам:
//                                                   1. "РАВНОМЕРНО_ПО_ПОТОКАМ" - задания равномерно распределяются
//                                                                                по свободным потокам,
//                                                   2. "МАКСИМУМ_ЗАДАНИЙ_В_ПОТОК" - в поток передаются максимальное
//                                                                                   возможное количество заданий.
//                                                  По умолчанию "РАВНОМЕРНО_ПО_ПОТОКАМ".
//   * АналитикаРасчета                  - Строка - список полей регистра сведений очереди заданий, разделенные
//                                                  запятыми, в разрезе которых определяется задание, если не заполнено,
//                                                  тогда одна запись регистра считается одним заданием.
//   * ИнтервалОбработки                 - Число  - интервал обработки (в секундах) между времени начало текущей выборки
//                                                  и окончания выполнения последней порции расчета:
//                                                    1. если ИнтервалОбработки больше 0, тогда выборка и выполнения
//                                                       заданий происходит при наступлении одного из нижеперечисленных
//                                                       условий:
//                                                         1. количество заданий в выборке не меньше чем ПорцияРасчета,
//                                                         2. интервал между текущей датой и датой конца выполнения
//                                                            последней порции заданий не меньше чем ИнтервалОбработки,
//                                                    2. если ИнтервалОбработки является 0, тогда  ИнтервалОбработки
//                                                       не влияет на выборку и выполнения заданий.
//   * Приоритет                         - Число  - имеет только информативный смысл, отображается в интерфейсе,
//                                                  возможные значения:
//                                                    1. -1 - высокий (блокирует оперативную работу - распределение
//                                                            запасов, нельзя распечатать документы ...),
//                                                    2.  0 - средний,
//                                                    3.  1 - низкий.
//   * ВыполнитьЗаданияВТранзакции       - Булево - задания одной порции выполняются в транзакции, по умолчанию ЛОЖЬ.
//   * ВыполнитьВТранзакцииВФайловойБазе - Булево - если ЛОЖЬ, тогда в файловой базе задания выполняются в управляющем
//                                                  потоке,
//                                                  если ИСТИНА, тогда в файловой базе выполняется в той же транзакции.
//                                                  По умолчанию ИСТИНА.
//   * ВыборкаЗаданийПоУмолчанию         - Булево - если ИСТИНА, тогда для выборки заданий используется текст запроса
//                                                  сформированный в функции см. ТекстЗапросаВыборкиЗаданийПоУмолчанию,
//                                                  если ЛОЖЬ, тогда текст запроса выборки заданий формируется 
//                                                  в функции ТекстЗапросаВыборкиЗаданий модуля менеджера регистра
//                                                  сведений очереди заданий
//                                                  (см. РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.ТекстЗапросаВыборкиЗаданий).
//                                                  По умолчанию ИСТИНА.
//   * ДополнительнаяОбработкаОшибок     - Булево - если ИСТИНА, тогда в методе выполнения заданий
//                                                  (см. ВыполнитьЗадания) перед обработкой ошибок
//                                                  (см. ОбработатьОшибки) запускается процедура ПередОбработкойОшибок
//                                                  модуля менеджера регистра сведений очереди заданий
//                                                  (см. РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.ПередОбработкойОшибок).
//                                                  По умолчанию ЛОЖЬ.
//
Функция ПараметрыОчередиЗаданий()
	
	КоличествоПотоков = ОтложенныеЗаданияПереопределяемый.КоличествоПотоковПоУмолчанию();
	ПорцияРасчета     = ОтложенныеЗаданияПереопределяемый.ПорцияРасчетаПоУмолчанию();
	
	Параметры = Новый Структура;
	Параметры.Вставить("Очередь",                           "");
	Параметры.Вставить("ИмяМетода",                         "");
	Параметры.Вставить("УказательДействия",                 "");
	Параметры.Вставить("ИменаМетодовПоЗначениямУказателя",  Новый Соответствие);
	Параметры.Вставить("Многопоточный",                     Истина);
	Параметры.Вставить("КоличествоПотоков",                 КоличествоПотоков);
	Параметры.Вставить("МаксимальноеКоличествоПотоков",     0);
	Параметры.Вставить("ПорцияРасчета",                     ПорцияРасчета);
	Параметры.Вставить("РежимРаспределенияЗаданий",         "РАВНОМЕРНО_ПО_ПОТОКАМ");
	Параметры.Вставить("АналитикаРасчета",                  "");
	Параметры.Вставить("ИнтервалОбработки",                 0);
	Параметры.Вставить("Приоритет",                         0);
	Параметры.Вставить("ВыполнитьЗаданияВТранзакции",       Ложь);
	Параметры.Вставить("ВыполнитьВТранзакцииВФайловойБазе", Истина);
	Параметры.Вставить("ВыборкаЗаданийПоУмолчанию",         Истина);
	Параметры.Вставить("ДополнительнаяОбработкаОшибок",     Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Добавляет очередь заданий.
// 
// Параметры:
//  ОчередиЗаданий   - см. ОчередиЗаданий
//  ПараметрыОчереди - см. ПараметрыОчередиЗаданий
//
Процедура ДобавитьОчередь(ОчередиЗаданий, ПараметрыОчереди)
	
	СтрокаТаблицы = ОчередиЗаданий.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыОчереди);
	
	СтрокаТаблицы.ИндексСтроки = ОчередиЗаданий.Количество() - 1;
	
КонецПроцедуры

// Возвращает настройки очередей
// 
// Параметры:
//  Очереди - Массив из Строка, Неопределено - массив имен регистров сведений очередей заданий.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//   * Очередь                - Строка - имя регистра сведений очереди заданий,
//   * Приостановлена         - Булево - если ИСТИНА, тогда задания записываются но не выполняются,
//   * ДатаПоследнейОбработки - Дата   - используется только для тех очередей, у которых параметр 
//                                       "ИнтервалОбработки" (см. ОчередиЗаданий) заполнен.
//
Функция НастройкиОчередей(Очереди = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Настройки.Очередь                КАК Очередь,
	|	Настройки.Приостановлена         КАК Приостановлена,
	|	Настройки.ДатаПоследнейОбработки КАК ДатаПоследнейОбработки
	|ИЗ
	|	РегистрСведений.НастройкиОчередейЗаданий КАК Настройки
	|ГДЕ
	|	Настройки.Очередь В (&Очереди)";
	
	Если ЗначениеЗаполнено(Очереди) Тогда
		Запрос.УстановитьПараметр("Очереди", Очереди);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Настройки.Очередь В (&Очереди)", "ИСТИНА");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ТаблицаНастроек = Новый ТаблицаЗначений;
		ТаблицаНастроек.Колонки.Добавить("Очередь",                ОбщегоНазначения.ОписаниеТипаСтрока(150));
		ТаблицаНастроек.Колонки.Добавить("Приостановлена",         Новый ОписаниеТипов("Булево"));
		ТаблицаНастроек.Колонки.Добавить("ДатаПоследнейОбработки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		
	Иначе
		
		ТаблицаНастроек = РезультатЗапроса.Выгрузить();
		
	КонецЕсли;
	
	ТаблицаНастроек.Индексы.Добавить("Очередь");
	
	Возврат ТаблицаНастроек;
	
КонецФункции

#КонецОбласти

#Область УправляющийПоток

// Возвращает ключ управляющего потока.
// 
// Параметры:
//  Очередь - Строка - имя регистра сведений очереди заданий.
// 
// Возвращаемое значение:
//  Строка - ключ управляющего потока в формате "УправляющийПоток_<имя регистра сведений очереди заданий>"
//
Функция КлючУправляющегоПотока(Очередь)
	
	Возврат СтрШаблон("УправляющийПоток_%1", Очередь);
	
КонецФункции

Функция ПараметрыСтартераУправляющегоПотока()
	
	Параметры = Новый Структура;
	Параметры.Вставить("Ключ",         "СтартерУправляющегоПотока");
	Параметры.Вставить("ИмяМетода",    "ОтложенныеЗадания.СтартерУправляющегоПотока");
	Параметры.Вставить("Наименование", НСтр("ru = 'Стартер управляющего потока'"));
	
	Возврат Параметры;
	
КонецФункции

Процедура ЗапуститьСтартерУправляющегоПотока()
	
	ПараметрыСтартераУП = ПараметрыСтартераУправляющегоПотока();
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = ПараметрыСтартераУП.Наименование;
	ПараметрыВыполнения.КлючФоновогоЗадания         = ПараметрыСтартераУП.Ключ;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	
	Попытка
		ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ПараметрыСтартераУП.ИмяМетода);
	Исключение
		// Фоновое задание "Стартер управляющего потока" с ключом "СтартерУправляющегоПотока" уже запущен.
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Паузы

Процедура Пауза(Длительность, Очередь = Неопределено, Отбор = Неопределено)
	
	Если Отбор = Неопределено Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Ключ",      КлючУправляющегоПотока(Очередь));
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если НайденныеФоновыеЗадания.Количество() > 0 Тогда
		
		ФоновыеЗадания.ОжидатьЗавершенияВыполнения(НайденныеФоновыеЗадания, Длительность);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПаузаИнтервалОбработки(НастройкиОчереди, ИнтервалОбработки)
	
	Очередь                = НастройкиОчереди.Очередь;
	ДатаПоследнейОбработки = НастройкиОчереди.ДатаПоследнейОбработки;
	
	ТекущаяДата            = ТекущаяУниверсальнаяДата();
	
	Если ЗначениеЗаполнено(ДатаПоследнейОбработки) Тогда
		
		ДлительностьПаузы = ИнтервалОбработки - (ТекущаяДата - ДатаПоследнейОбработки);
		
		Если ДлительностьПаузы > 0 И ДлительностьПаузы <= ИнтервалОбработки Тогда
			
			Пауза(ДлительностьПаузы, Очередь);
			
			ТекущаяДата = ТекущаяУниверсальнаяДата();
			
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиОчереди.ДатаПоследнейОбработки = ТекущаяДата;
	
	НаборЗаписей = РегистрыСведений.НастройкиОчередейЗаданий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Очередь.Установить(Очередь);
	ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), НастройкиОчереди);
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

Функция Таймауты()
	
	Таймауты = Новый Массив;
	Таймауты.Добавить(0.2);
	Таймауты.Добавить(0.5);
	Таймауты.Добавить(0.5);
	Таймауты.Добавить(1);
	Таймауты.Добавить(1);
	Таймауты.Добавить(2);
	
	Возврат Таймауты;
	
КонецФункции

Функция РассчитатьПорцииПоПотокам(
			ТаблицаЗаданий,
			Отбор,
			КоличествоСвободныхПотоков,
			ПорцияРасчета,
			РежимРаспределенияЗаданий)
	
	ПорцииПоПотокам = Новый Массив;
	
	Если КоличествоСвободныхПотоков > 0 Тогда
		
		ТекущееКоличествоПотоков = КоличествоСвободныхПотоков;
		
		Если РежимРаспределенияЗаданий = "РАВНОМЕРНО_ПО_ПОТОКАМ" Тогда
			
			МассивИдентификаторовЗаданий = ОбщегоНазначения.ВыгрузитьКолонку(
											ТаблицаЗаданий.НайтиСтроки(Отбор),
											"ИдентификаторЗадания",
											Истина);
			
			КоличествоИдентификаторовЗаданий = МассивИдентификаторовЗаданий.Количество();
			
			ПорцияРасчетаВПоток = Цел(КоличествоИдентификаторовЗаданий / ТекущееКоличествоПотоков);
			Если ПорцияРасчетаВПоток < ПорцияРасчета Тогда
				КоличествоНеРаспределено = КоличествоИдентификаторовЗаданий - ПорцияРасчетаВПоток * ТекущееКоличествоПотоков;
			Иначе
				ПорцияРасчетаВПоток      = ПорцияРасчета;
				КоличествоНеРаспределено = 0;
			КонецЕсли;
			
			Пока ТекущееКоличествоПотоков > 0 И (ПорцияРасчетаВПоток > 0 Или КоличествоНеРаспределено > 0) Цикл
				
				ТекущаяПорцияРасчетаВПоток = ПорцияРасчетаВПоток;
				
				Если КоличествоНеРаспределено > 0 Тогда
					ТекущаяПорцияРасчетаВПоток = ТекущаяПорцияРасчетаВПоток + 1;
					КоличествоНеРаспределено   = КоличествоНеРаспределено - 1;
				КонецЕсли;
				
				ПорцииПоПотокам.Добавить(ТекущаяПорцияРасчетаВПоток);
				ТекущееКоличествоПотоков = ТекущееКоличествоПотоков - 1;
				
			КонецЦикла;
			
		ИначеЕсли РежимРаспределенияЗаданий = "МАКСИМУМ_ЗАДАНИЙ_В_ПОТОК" Тогда
			
			Пока ТекущееКоличествоПотоков > 0 Цикл
				ПорцииПоПотокам.Добавить(ПорцияРасчета);
				ТекущееКоличествоПотоков = ТекущееКоличествоПотоков - 1;
			КонецЦикла;
			
		Иначе
			
			МассивИдентификаторовЗаданий = ОбщегоНазначения.ВыгрузитьКолонку(
											ТаблицаЗаданий.НайтиСтроки(Отбор),
											"ИдентификаторЗадания",
											Истина);
			
			КоличествоИдентификаторовЗаданий = МассивИдентификаторовЗаданий.Количество();
			
			ТекущееКоличествоПотоков = Цел(КоличествоИдентификаторовЗаданий / ПорцияРасчета);
			Если ТекущееКоличествоПотоков * ПорцияРасчета < КоличествоИдентификаторовЗаданий Тогда
				ТекущееКоличествоПотоков = ТекущееКоличествоПотоков + 1;
			КонецЕсли;
			
			Пока ТекущееКоличествоПотоков > 0 Цикл
				ПорцииПоПотокам.Добавить(ПорцияРасчета);
				ТекущееКоличествоПотоков = ТекущееКоличествоПотоков - 1;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПорцииПоПотокам; 
	
КонецФункции

Процедура ЗаполнитьСтрокуИсточникаЗаданий(СтрокаИсточник, Данные, СгенерироватьИдентификаторЗаписи)
	
	ЗаполнитьЗначенияСвойств(СтрокаИсточник, Данные);
	
	Если Не ЗначениеЗаполнено(СтрокаИсточник.ДатаЗаписи) Тогда
		СтрокаИсточник.ДатаЗаписи = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаИсточник.ИдентификаторЗаписи) Или СгенерироватьИдентификаторЗаписи Тогда
		СтрокаИсточник.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти