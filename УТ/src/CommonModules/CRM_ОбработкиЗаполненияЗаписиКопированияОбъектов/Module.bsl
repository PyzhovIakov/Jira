
////////////////////////////////////////////////////////////////////////////////
// Обработки заполнения, записи, копирования объектов (CRM)
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ТиповыеОбработчики

#Область ОбработкиЗаполнения

// Процедура обрабатывает заполнение документа.
//
// Параметры:
//  Источник			 - ДокументСсылка - Документ источник.
//  ДанныеЗаполнения	 - Произвольный	 - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения		 - Строка -  Текст, используемый для заполнения документа.
//  СтандартнаяОбработка - Булево -  Передается признак выполнения стандартной (системной) обработки события.
//
Процедура ДокументОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	#Область ЭлектронноеПисьмоИсходящее
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
		
		Источник.УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
		Источник.ПолучателиПисьма.Очистить();
		Источник.СписокПолучателейПисьма = "";
		
		Если ДанныеЗаполнения = Неопределено Тогда
			
			ОсновнаяУчетнаяЗапись = ХранилищеОбщихНастроек.Загрузить("ОсновнаяУчетнаяЗапись", "ОсновнаяУчетнаяЗапись");
			
			ДоступныеУчетныеЗаписи = Новый СписокЗначений;
			CRM_УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(ДоступныеУчетныеЗаписи);
			ДанныеДоступнойУчетнойЗаписи = ДоступныеУчетныеЗаписи.НайтиПоЗначению(ОсновнаяУчетнаяЗапись);
			
			Если ЗначениеЗаполнено(ОсновнаяУчетнаяЗапись) И ДанныеДоступнойУчетнойЗаписи <> Неопределено Тогда
				Источник.УчетнаяЗапись = ОсновнаяУчетнаяЗапись;
				Источник.ОтправительПредставление = ДанныеДоступнойУчетнойЗаписи.Представление;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Источник.УчетнаяЗапись) Тогда
				Если ДоступныеУчетныеЗаписи.Количество() > 0 Тогда
					ДанныеДоступнойУчетнойЗаписи = ДоступныеУчетныеЗаписи[0];
					Источник.УчетнаяЗапись = ДанныеДоступнойУчетнойЗаписи.Значение;
					Источник.ОтправительПредставление = ДанныеДоступнойУчетнойЗаписи.Представление;
				КонецЕсли;
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		CRM_ОбщегоНазначенияСервер.ЗаполнитьШапкуДокумента(Источник, ДанныеЗаполнения);
		
		Если ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("Команда") Тогда
			Если ДанныеЗаполнения.Команда = "Переслать" Тогда
				
				Источник.CRM_ТипОтвета = Перечисления.CRM_ТипыОтвета.ПересылкаПисьма;
				
			ИначеЕсли ДанныеЗаполнения.Команда = "Ответить" ИЛИ ДанныеЗаполнения.Команда = "ОтветитьВсем" Тогда
				
				Источник.CRM_ТипОтвета = Перечисления.CRM_ТипыОтвета.ОтветНаПисьмо;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("ОснованиеВходящее") 
			И ТипЗнч(ДанныеЗаполнения.ОснованиеВходящее) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			ЗаполнитьНаОснованииПисьма(Источник, ДанныеЗаполнения.ОснованиеВходящее, "Ответить");
		КонецЕсли;
		
		Если (ТипДанныхЗаполнения = Тип("Структура")) И (ДанныеЗаполнения.Свойство("Основание")) И
			(ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") ИЛИ
			ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")) Тогда
			
			CRM_Взаимодействия.CRM_ЗаполнитьРеквизитыПоУмолчанию(Источник, Неопределено);
			ЗаполнитьНаОснованииПисьма(Источник, ДанныеЗаполнения.Основание, ДанныеЗаполнения.Команда);
			
		ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
			Источник.Дата					= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
			Источник.УчетнаяЗапись			= ДанныеЗаполнения.УчетнаяЗапись;
			Источник.ОтправительПредставление = ДанныеЗаполнения.ОтправительПредставление;
			Источник.Ответственный			= ДанныеЗаполнения.Ответственный;
			Источник.Важность				= ДанныеЗаполнения.Важность;
			Источник.Тема					= ДанныеЗаполнения.Тема;
			Источник.СтатусПисьма			= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
			Источник.Кодировка				= ДанныеЗаполнения.Кодировка;
			Источник.ТипТекста				= ДанныеЗаполнения.ТипТекста;
			Источник.Текст					= ДанныеЗаполнения.ТекстHTML;
			Источник.ТекстHTML				= ДанныеЗаполнения.ТекстHTML;
		ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
			Источник.Дата			= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
			Источник.Ответственный	= ДанныеЗаполнения.Ответственный;
			Источник.Тема			= ДанныеЗаполнения.Тема;
			Источник.СтатусПисьма	= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
		ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.CRM_Интерес") Тогда
			Источник.Дата			= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
			Источник.Ответственный	= ДанныеЗаполнения.Ответственный;
			Источник.Тема			= ДанныеЗаполнения.Тема;
			Источник.СтатусПисьма	= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
			EMail					= "";
			КонтактнаяИнформацияКонтакт = Неопределено;
			КонтактнаяИнформацияПредставление = "";
			
			Для Каждого СтрокаКИ Из ДанныеЗаполнения.КонтактноеЛицо.КонтактнаяИнформация Цикл
				Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица Тогда
					EMail = СтрокаКИ.Представление;
					КонтактнаяИнформацияКонтакт = ДанныеЗаполнения.КонтактноеЛицо;
					КонтактнаяИнформацияПредставление = ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(ДанныеЗаполнения.КонтактноеЛицо.Наименование,
						 EMail,
						 "");
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ПустаяСтрока(EMail) Тогда
				
				Для Каждого СтрокаКИ Из ДанныеЗаполнения.Партнер.КонтактнаяИнформация Цикл
					Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера Тогда
						EMail = СтрокаКИ.Представление;
						КонтактнаяИнформацияКонтакт = ДанныеЗаполнения.Партнер;
						КонтактнаяИнформацияПредставление = ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(ДанныеЗаполнения.Партнер.Наименование,
							 EMail,
							 "");
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ПустаяСтрока(EMail) Тогда
				
				СтрокаКИ = ДанныеЗаполнения.Партнер.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
					 "Тип");
				Если СтрокаКИ <> Неопределено Тогда
					EMail = СтрокаКИ.Представление;
					КонтактнаяИнформацияКонтакт = ДанныеЗаполнения.Партнер;
					КонтактнаяИнформацияПредставление = ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(ДанныеЗаполнения.Партнер.Наименование,
						 EMail,
						 "");
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПустаяСтрока(EMail) Тогда
				
				Для Каждого СтрокаКИ Из ДанныеЗаполнения.ПотенциальныйКлиент.КонтактнаяИнформация Цикл
					Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента Тогда
						EMail = СтрокаКИ.Представление;
						КонтактнаяИнформацияКонтакт = ДанныеЗаполнения.ПотенциальныйКлиент;
						КонтактнаяИнформацияПредставление = ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(ДанныеЗаполнения.ПотенциальныйКлиент.Наименование,
							 EMail,
							 "");
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(EMail) Тогда
				
				НоваяСтрока					= Источник.ПолучателиПисьма.Добавить();
				НоваяСтрока.Адрес			= EMail;
				НоваяСтрока.Контакт			= КонтактнаяИнформацияКонтакт;
				НоваяСтрока.Представление	= КонтактнаяИнформацияПредставление;
				
				Источник.СписокПолучателейПисьма = НоваяСтрока.Представление;
				
			КонецЕсли;			
		ИначеЕсли ТипДанныхЗаполнения = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс")
			ИЛИ ТипДанныхЗаполнения = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Если ТипДанныхЗаполнения = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И ДанныеЗаполнения.CRM_Личная Тогда
				Источник.Дата					= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
				Источник.Ответственный			= ДанныеЗаполнения.Исполнитель;
				Источник.СтатусПисьма			= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
				Источник.CRM_Проект				= ДанныеЗаполнения.CRM_Проект;
				Источник.Тема 					= ДанныеЗаполнения.Наименование;
				EMail							= "";
				Для Каждого СтрокаКИ Из ДанныеЗаполнения.CRM_КонтактноеЛицо.КонтактнаяИнформация Цикл
					Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица Тогда
						EMail = СтрокаКИ.Представление;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ПустаяСтрока(EMail) Тогда
					Для Каждого СтрокаКИ Из ДанныеЗаполнения.CRM_Партнер.КонтактнаяИнформация Цикл
						Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера Тогда
							EMail = СтрокаКИ.Представление;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НЕ ПустаяСтрока(EMail) Тогда
						НоваяСтрока					= Источник.ПолучателиПисьма.Добавить();
						НоваяСтрока.Адрес			= EMail;
						НоваяСтрока.Контакт			= ДанныеЗаполнения.CRM_Партнер;
						НоваяСтрока.Представление	= ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(ДанныеЗаполнения.CRM_Партнер.Наименование,
							 EMail,
							 "");
					КонецЕсли;
				Иначе
					НоваяСтрока					= Источник.ПолучателиПисьма.Добавить();
					НоваяСтрока.Адрес			= EMail;
					НоваяСтрока.Контакт			= ДанныеЗаполнения.CRM_КонтактноеЛицо;
					НоваяСтрока.Представление	= ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(ДанныеЗаполнения.CRM_КонтактноеЛицо.Наименование,
						 EMail,
						 "");
				КонецЕсли;
				Если НЕ ПустаяСтрока(EMail) Тогда
					Источник.СписокПолучателейПисьма = НоваяСтрока.Представление;
				КонецЕсли;			
				
			Иначе	
				Если ТипДанныхЗаполнения = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
					CRM_ОбщегоНазначенияСервер.ЗаполнитьОбъектБизнесПроцесса(Источник, ДанныеЗаполнения);
				Иначе
					CRM_ОбщегоНазначенияСервер.ЗаполнитьОбъектБизнесПроцесса(Источник,
						 ДанныеЗаполнения.БизнесПроцесс,
						 ДанныеЗаполнения);
				КонецЕсли;
			КонецЕсли;
		
		ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
			
			Источник.Дата					= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
			Источник.Ответственный			= ДанныеЗаполнения.Менеджер;
			Источник.СтатусПисьма			= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
			Источник.CRM_Проект				= ДанныеЗаполнения.CRM_Проект;
			EMail							= "";
			Для Каждого СтрокаКИ Из ДанныеЗаполнения.КонтактноеЛицо.КонтактнаяИнформация Цикл
				Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица Тогда
					EMail = СтрокаКИ.Представление;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ПустаяСтрока(EMail) Тогда
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеЗаполнения, "Партнер") Тогда
					ИмяРеквизитаПартнер = "Партнер";
				Иначе
					ИмяРеквизитаПартнер = "Клиент";
				КонецЕсли;
				Для Каждого СтрокаКИ Из ДанныеЗаполнения[ИмяРеквизитаПартнер].КонтактнаяИнформация Цикл
					Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера Тогда
						EMail = СтрокаКИ.Представление;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ПустаяСтрока(EMail) Тогда
					СтрокаКИ = ДанныеЗаполнения[ИмяРеквизитаПартнер].КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
						 "Тип");
					Если СтрокаКИ <> Неопределено Тогда
						EMail = СтрокаКИ.Представление;
						КонтактнаяИнформацияКонтакт = ДанныеЗаполнения[ИмяРеквизитаПартнер];
						КонтактнаяИнформацияПредставление = ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(ДанныеЗаполнения[ИмяРеквизитаПартнер].Наименование,
							 EMail,
							 "");
					КонецЕсли;
				КонецЕсли;
				Если НЕ ПустаяСтрока(EMail) Тогда
					НоваяСтрока					= Источник.ПолучателиПисьма.Добавить();
					НоваяСтрока.Адрес			= EMail;
					НоваяСтрока.Контакт			= ДанныеЗаполнения[ИмяРеквизитаПартнер];
					НоваяСтрока.Представление	= ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(ДанныеЗаполнения[ИмяРеквизитаПартнер].Наименование,
						 EMail,
						 "");
				КонецЕсли;
			Иначе
				НоваяСтрока					= Источник.ПолучателиПисьма.Добавить();
				НоваяСтрока.Адрес			= EMail;
				НоваяСтрока.Контакт			= ДанныеЗаполнения.КонтактноеЛицо;
				НоваяСтрока.Представление	= ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(ДанныеЗаполнения.КонтактноеЛицо.Наименование,
					 EMail,
					 "");
			КонецЕсли;
			Если НЕ ПустаяСтрока(EMail) Тогда
				Источник.СписокПолучателейПисьма = НоваяСтрока.Представление;
			КонецЕсли;			
			
			Если ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование) Тогда
				
				Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
					
					Источник.Тема = ДанныеЗаполнения.ДокументОснование.Тема;
					
					//СтрокаТеста = НСтр("ru='Интерес от ';en='Lead from '") 
					//	+ Формат(ДанныеЗаполнения.ДокументОснование.Дата,"ДЛФ=D") + Символы.ПС 
					//	+
					//НСтр("ru='Тема: ';en='Theme: '") + СокрЛП(ДанныеЗаполнения.ДокументОснование.Тема) + Символы.ПС +
					//НСтр("ru='Содержание: ';en='Contents: '") + СокрЛП(ДанныеЗаполнения.ДокументОснование.Описание);
					//
					//Источник.Текст = СтрокаТеста;
					//Источник.ТекстHTML = CRM_ОбщегоНазначенияКлиентСервер.ПреобразоватьТекстВHTML(СтрокаТеста);
					
				ИначеЕсли  ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
					
					ЗаполнитьПараметрыИзПисьма(Источник, ДанныеЗаполнения.ДокументОснование, Ложь, Ложь, "Re: ", Ложь, "Ответить");
					
				ИначеЕсли  ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
					
					ЗаполнитьПараметрыИзПисьма(Источник, ДанныеЗаполнения.ДокументОснование, Ложь, Ложь, "Re: ", Ложь, "Ответить");
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли (ТипДанныхЗаполнения = Тип("Структура")) И (ДанныеЗаполнения.Свойство("Основание")) И
			(ТипЗнч(ДанныеЗаполнения.Основание) = Тип("СправочникСсылка.ВнешниеПользователи")) Тогда
			
			// Отсылаем приглашение на анкетирование.
			ОбъектАвторизации = ДанныеЗаполнения.Основание.ОбъектАвторизации;
			
			Если ТипЗнч(ОбъектАвторизации) = Тип("СправочникСсылка.Партнеры") Тогда
				
				EMail = "";
				Для Каждого СтрокаКИ Из ОбъектАвторизации.КонтактнаяИнформация Цикл
					Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера Тогда
						EMail = СтрокаКИ.Представление;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ЗначениеЗаполнено(EMail) Тогда
					НоваяСтрока					= Источник.ПолучателиПисьма.Добавить();
					НоваяСтрока.Адрес			= EMail;
					НоваяСтрока.Контакт			= ОбъектАвторизации;
					НоваяСтрока.Представление	= ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(ОбъектАвторизации.Наименование,
						 EMail,
						 "");
					
					Источник.СписокПолучателейПисьма = НоваяСтрока.Представление;
				КонецЕсли;
			ИначеЕсли  ТипЗнч(ОбъектАвторизации) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				
				EMail = "";
				Для Каждого СтрокаКИ Из ОбъектАвторизации.КонтактнаяИнформация Цикл
					Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица Тогда
						EMail = СтрокаКИ.Представление;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ЗначениеЗаполнено(EMail) Тогда
					НоваяСтрока					= Источник.ПолучателиПисьма.Добавить();
					НоваяСтрока.Адрес			= EMail;
					НоваяСтрока.Контакт			= ОбъектАвторизации;
					НоваяСтрока.Представление	= ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(ОбъектАвторизации.Наименование,
						 EMail,
						 "");
					
					Источник.СписокПолучателейПисьма = НоваяСтрока.Представление;
				КонецЕсли;
			ИначеЕсли  ТипЗнч(ОбъектАвторизации) = Тип("СправочникСсылка.Пользователи") Тогда
				
				EMail = "";
				Для Каждого СтрокаКИ Из ОбъектАвторизации.КонтактнаяИнформация Цикл
					Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПользователя Тогда
						EMail = СтрокаКИ.Представление;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ЗначениеЗаполнено(EMail) Тогда
					НоваяСтрока					= Источник.ПолучателиПисьма.Добавить();
					НоваяСтрока.Адрес			= EMail;
					НоваяСтрока.Контакт			= ОбъектАвторизации;
					НоваяСтрока.Представление	= ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(ОбъектАвторизации.Наименование,
						 EMail,
						 "");
					
					Источник.СписокПолучателейПисьма = НоваяСтрока.Представление;
				КонецЕсли;
			КонецЕсли;
			
			АдресWebДоступа = Константы.CRM_АдресWebДоступа.Получить();
			
			Если ПустаяСтрока(АдресWebДоступа) Тогда
				
				АдресWebДоступа = "{адрес web-доступа в настройках системы не заполнен}";
				
			КонецЕсли;
			
			Источник.Тема = "Приглашение к анкетированию";
			Источник.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
			
			Если ДанныеЗаполнения.Свойство("ШаблонАнкеты") И ЗначениеЗаполнено(ДанныеЗаполнения.ШаблонАнкеты) Тогда
				
				ТекстHTML = ДанныеЗаполнения.ШаблонАнкеты.CRM_ШаблонРассылки.Текст;
				
				// заполним автотекст
				
				СтруктураЗаполненияАвтотекста = Новый Структура;
				СтруктураЗаполненияАвтотекста.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
				СтруктураЗаполненияАвтотекста.Вставить("КонтактноеЛицо", Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
				
				Клиент = ОбъектАвторизации;
				
				Если ТипЗнч(Клиент) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					
					СтруктураЗаполненияАвтотекста.КонтактноеЛицо = Клиент;
					
				Иначе
					
					СтруктураЗаполненияАвтотекста.Партнер = Клиент;
					
				КонецЕсли;
				
				ТаблицаАвтотекста = Новый ТаблицаЗначений;
				
				ТаблицаАвтотекста.Колонки.Добавить("Тэг");
				ТаблицаАвтотекста.Колонки.Добавить("ИмяКоманды");
				ТаблицаАвтотекста.Колонки.Добавить("ЗаголовокКоманды");
				ТаблицаАвтотекста.Колонки.Добавить("Действие");
				
				CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекста, 
					ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")));
				
				Для Каждого СтрокаАвтотекста Из ТаблицаАвтотекста Цикл
					
					Если СтрНайти(ТекстHTML, СтрокаАвтотекста.Тэг) > 0 Тогда
						
						ЗначениеТэга = CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэга(СтрокаАвтотекста,
							 СтруктураЗаполненияАвтотекста);
						
						ТекстHTML = СтрЗаменить(ТекстHTML, СтрокаАвтотекста.Тэг, ЗначениеТэга);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Источник.Текст = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекстHTML);
			КонецЕсли;
			
			// -CRM	
		Иначе
			
			Если Источник.ПолучателиПисьма.Количество() = 0 Тогда
			
				EMail = "";
				ПолучателиПисьмаКонтакт = Неопределено;
				ПолучателиПисьмаПредставление = "";
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеЗаполнения, "КонтактноеЛицо") 
				   И ТипЗнч(ДанныеЗаполнения.КонтактноеЛицо) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					
					Для Каждого СтрокаКИ Из ДанныеЗаполнения.КонтактноеЛицо.КонтактнаяИнформация Цикл
						Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица Тогда
							EMail = СтрокаКИ.Представление;
							ПолучателиПисьмаКонтакт = ДанныеЗаполнения.КонтактноеЛицо;
							ПолучателиПисьмаПредставление = ДанныеЗаполнения.КонтактноеЛицо.Наименование;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				Если ПустаяСтрока(EMail) Тогда
					
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеЗаполнения, "Партнер") 
					   И ТипЗнч(ДанныеЗаполнения.Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
						
						Для Каждого СтрокаКИ Из ДанныеЗаполнения.Партнер.КонтактнаяИнформация Цикл
							Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера Тогда
								EMail = СтрокаКИ.Представление;
								ПолучателиПисьмаКонтакт = ДанныеЗаполнения.Партнер;
								ПолучателиПисьмаПредставление = ДанныеЗаполнения.Партнер.Наименование;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ПустаяСтрока(EMail) Тогда
			
					НоваяСтрока					= Источник.ПолучателиПисьма.Добавить();
					НоваяСтрока.Адрес			= EMail;
					НоваяСтрока.Контакт			= ПолучателиПисьмаКонтакт;
					НоваяСтрока.Представление	= ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(ПолучателиПисьмаПредставление,
						 EMail,
						 "");
					
					Источник.СписокПолучателейПисьма = НоваяСтрока.Представление;
					
				КонецЕсли;
				
			КонецЕсли;	
				
			Если Источник.ПолучателиПисьма.Количество() = 0 Тогда
				Взаимодействия.ЗаполнитьРеквизитыПоУмолчанию(Источник, ДанныеЗаполнения);
			КонецЕсли;
			
		КонецЕсли;
		// +CRM	
		Если Источник.ПолучателиПисьма.Количество() = 0
			И НЕ ЗначениеЗаполнено(Источник.СписокПолучателейПисьма)
			И ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
			И ДанныеЗаполнения.Свойство("КонтактноеЛицо")
			И ЗначениеЗаполнено(ДанныеЗаполнения.КонтактноеЛицо) Тогда
			EMail = "";
			Для Каждого СтрокаКИ Из ДанныеЗаполнения.КонтактноеЛицо.КонтактнаяИнформация Цикл
				Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица Тогда
					EMail = СтрокаКИ.Представление;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(EMail) Тогда
				НоваяСтрока					= Источник.ПолучателиПисьма.Добавить();
				НоваяСтрока.Адрес			= EMail;
				НоваяСтрока.Контакт			= ДанныеЗаполнения.КонтактноеЛицо;
				НоваяСтрока.Представление	= ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(ДанныеЗаполнения.КонтактноеЛицо.Наименование,
					 EMail,
					 "");
				
				Источник.СписокПолучателейПисьма = НоваяСтрока.Представление;
			КонецЕсли;
		КонецЕсли;
		Если Источник.ПолучателиПисьма.Количество() = 0
			И НЕ ЗначениеЗаполнено(Источник.СписокПолучателейПисьма)
			И ТипДанныхЗаполнения = Тип("Структура")
			И ДанныеЗаполнения.Свойство("Партнер")
			И ЗначениеЗаполнено(ДанныеЗаполнения.Партнер) Тогда
			EMail = "";
			Для Каждого СтрокаКИ Из ДанныеЗаполнения.Партнер.КонтактнаяИнформация Цикл
				Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера Тогда
					EMail = СтрокаКИ.Представление;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(EMail) Тогда
				НоваяСтрока					= Источник.ПолучателиПисьма.Добавить();
				НоваяСтрока.Адрес			= EMail;
				НоваяСтрока.Контакт			= ДанныеЗаполнения.Партнер;
				НоваяСтрока.Представление	= ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(ДанныеЗаполнения.Партнер.Наименование,
					 EMail,
					 "");
				
				Источник.СписокПолучателейПисьма = НоваяСтрока.Представление;
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Источник.CRM_Проект)
			И ТипДанныхЗаполнения = Тип("Структура")
			И ДанныеЗаполнения.Свойство("Проект")
			И ЗначениеЗаполнено(ДанныеЗаполнения.Проект) Тогда
			Источник.CRM_Проект = ДанныеЗаполнения.Проект;
		КонецЕсли;
		// -CRM
		Источник.Важность = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		Источник.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
		Если ПустаяСтрока(Источник.Кодировка) Тогда
			Источник.Кодировка = "utf-8";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Источник.УчетнаяЗапись) Тогда
			
			ОсновнаяУчетнаяЗапись = ХранилищеОбщихНастроек.Загрузить("ОсновнаяУчетнаяЗапись", "ОсновнаяУчетнаяЗапись");
			
			ДоступныеУчетныеЗаписи = Новый СписокЗначений;
			CRM_УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(ДоступныеУчетныеЗаписи);
			ДанныеДоступнойУчетнойЗаписи = ДоступныеУчетныеЗаписи.НайтиПоЗначению(ОсновнаяУчетнаяЗапись);
			
			Если ЗначениеЗаполнено(ОсновнаяУчетнаяЗапись) И ДанныеДоступнойУчетнойЗаписи <> Неопределено Тогда
				Источник.УчетнаяЗапись = ОсновнаяУчетнаяЗапись;
				Источник.ОтправительПредставление = ДанныеДоступнойУчетнойЗаписи.Представление;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Источник.УчетнаяЗапись) Тогда
				Если ДоступныеУчетныеЗаписи.Количество() > 0 Тогда
					ДанныеДоступнойУчетнойЗаписи = ДоступныеУчетныеЗаписи[0];
					Источник.УчетнаяЗапись = ДанныеДоступнойУчетнойЗаписи.Значение;
					Источник.ОтправительПредставление = ДанныеДоступнойУчетнойЗаписи.Представление;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// +CRM
		ОсновнойОтветственныйТекущий = CRM_МетодыМодулейОбъектовДокументов.ПолучитьОсновногоОтветственного();
		Если ЗначениеЗаполнено(ОсновнойОтветственныйТекущий) Тогда
			Источник.Ответственный = ОсновнойОтветственныйТекущий;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДанныеБыстрогоВвода") Тогда
			
			ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения);
			
			Если ДанныеЗаполнения.Свойство("ПолучателиПисьма") И ТипЗнч(ДанныеЗаполнения.ПолучателиПисьма) = Тип("Массив") Тогда
				Для Каждого СтрокаПолучателя Из ДанныеЗаполнения.ПолучателиПисьма Цикл
					ЗаполнитьЗначенияСвойств(Источник.ПолучателиПисьма.Добавить(), СтрокаПолучателя);
				КонецЦикла;
			КонецЕсли;
			
			Если ДанныеЗаполнения.Свойство("ПолучателиКопий") И ТипЗнч(ДанныеЗаполнения.ПолучателиКопий) = Тип("Массив") Тогда
				Для Каждого СтрокаПолучателя Из ДанныеЗаполнения.ПолучателиКопий Цикл
					ЗаполнитьЗначенияСвойств(Источник.ПолучателиКопий.Добавить(), СтрокаПолучателя);
				КонецЦикла;
			КонецЕсли;
			
			Если ДанныеЗаполнения.Свойство("ПолучателиСкрытыхКопий")
				 И ТипЗнч(ДанныеЗаполнения.ПолучателиСкрытыхКопий) = Тип("Массив") Тогда
				Для Каждого СтрокаПолучателя Из ДанныеЗаполнения.ПолучателиСкрытыхКопий Цикл
					ЗаполнитьЗначенияСвойств(Источник.ПолучателиСкрытыхКопий.Добавить(), СтрокаПолучателя);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	#КонецОбласти	
		
	#Область КоммерческоеПредложениеКлиенту
	
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") Тогда	
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Партнер") Тогда
			ИмяРеквизитаПартнер = "Партнер";
		Иначе
			ИмяРеквизитаПартнер = "Клиент";
		КонецЕсли;
		Если ДанныеЗаполнения = Неопределено Тогда
			Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				Ответственный = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный");
				Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
					Ответственный = Пользователи.ТекущийПользователь();
				КонецЕсли;
				CRM_ОбщегоНазначенияСервер.ЗаполнитьШапкуДокумента(Источник, ДанныеЗаполнения);
				Источник.Менеджер = Ответственный;
				Источник.CRM_Подразделение =  Ответственный.Подразделение;
				Источник.Валюта = Константы.ВалютаУправленческогоУчета.Получить();
				ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(),
					 Новый Структура("Валюта",
					 Источник.Валюта));
				Источник.Кратность = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, ВалютаРасчетовКурсКратность.Кратность);
				Источник.Курс = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
			КонецЕсли;
		Иначе	
			
			ИсключаемыеРеквизиты = Новый Структура;
			Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM()
				И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.CRM_Интерес") Тогда
				ИсключаемыеРеквизиты.Вставить("Организация");
				ИсключаемыеРеквизиты.Вставить("Валюта");
				ИсключаемыеРеквизиты.Вставить("Партнер");
			КонецЕсли;
				
			CRM_ОбщегоНазначенияСервер.ЗаполнитьШапкуДокумента(Источник, ДанныеЗаполнения, ИсключаемыеРеквизиты);
			
			Если ЗначениеЗаполнено(Источник.CRM_Проект) Тогда
				Если ЗначениеЗаполнено(Источник.CRM_Проект.CRM_Партнер) И Не ЗначениеЗаполнено(Источник[ИмяРеквизитаПартнер]) Тогда
					Источник[ИмяРеквизитаПартнер] = Источник.CRM_Проект.CRM_Партнер;
					Источник.КонтактноеЛицо = Источник.CRM_Проект.CRM_КонтактноеЛицоПартнера;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.CRM_Интерес") Тогда
				
				Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
					ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
					Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
						Если Источник.Организация <> ЗначениеНастройки Тогда
							Источник.Организация = ЗначениеНастройки;
						КонецЕсли;
					Иначе
						Источник.Организация = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию();
					КонецЕсли;
				Иначе
					Если ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
						Источник.Организация 		= ДанныеЗаполнения.Организация;
					КонецЕсли;
				КонецЕсли;
				
				Источник.CRM_Подразделение = ДанныеЗаполнения.Подразделение;
				Источник.ДокументОснование = ДанныеЗаполнения.Ссылка;
				Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
					Источник[ИмяРеквизитаПартнер] = ДанныеЗаполнения.Партнер;
				Иначе
					Если ЗначениеЗаполнено(ДанныеЗаполнения.Партнер) Тогда
						Источник[ИмяРеквизитаПартнер] = ДанныеЗаполнения.Партнер;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент) Тогда
						Источник.Контрагент = ДанныеЗаполнения.Контрагент;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДанныеЗаполнения.СделкаСКлиентом) Тогда
						Источник.Сделка = ДанныеЗаполнения.СделкаСКлиентом;
					КонецЕсли;
				КонецЕсли;
				Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
					Если Не ЗначениеЗаполнено(ДанныеЗаполнения.Договор) Тогда
						Источник.Договор = ДанныеЗаполнения.Партнер.ДоговорПоУмолчанию;
						Если ЗначениеЗаполнено(Источник.Договор) Тогда
							Источник.Валюта = Источник.Договор.ВалютаРасчетов;
						КонецЕсли;
						СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Источник.Дата,
							 Новый Структура("Валюта",
							 Источник.Валюта));
						Источник.Курс = СтруктураПоВалюте.Курс;
						Источник.Кратность = СтруктураПоВалюте.Кратность;
					Иначе	
						Источник.Договор = ДанныеЗаполнения.Договор;
						Источник.Валюта = ДанныеЗаполнения.Валюта;
						Источник.ВидСкидкиНаценки = ДанныеЗаполнения.ВидСкидкиНаценки;
						Источник.ВидЦен = ДанныеЗаполнения.ВидЦен;
						Источник.ЦенаВключаетНДС = ДанныеЗаполнения.ЦенаВключаетНДС;
						Источник.Кратность = ДанныеЗаполнения.Кратность;
						Источник.Курс = ДанныеЗаполнения.Курс;
					КонецЕсли;
					Для каждого Строка Из ДанныеЗаполнения.Товары Цикл
						Если ЗначениеЗаполнено(Строка.Номенклатура) И НЕ Строка.Номенклатура.ЭтоГруппа Тогда
							НовСтрока = Источник.Товары.Добавить();
							ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
							НовСтрока.CRM_ИДВарианта = 1;
						КонецЕсли;
					КонецЦикла;
				Иначе
					
					Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
						Источник.Валюта = ДанныеЗаполнения.Валюта;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДанныеЗаполнения.НалогообложениеНДС) Тогда
						ИмяТипаНалогообложение = "ПеречислениеСсылка.ТипыНалогообложенияНДС";
						Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "НалогообложениеНДС") Тогда
							Источник.НалогообложениеНДС = ДанныеЗаполнения.НалогообложениеНДС;
						ИначеЕсли Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM()
							И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Налогообложение")
							И ТипЗнч(Источник.Налогообложение) = Тип(ИмяТипаНалогообложение) Тогда
							Источник.Налогообложение =
								ДанныеЗаполнения.НалогообложениеНДС = Перечисления["ТипыНалогообложенияНДС"].ПродажаОблагаетсяНДС;
						КонецЕсли;
					КонецЕсли;
					
					Источник.ЦенаВключаетНДС = ДанныеЗаполнения.ЦенаВключаетНДС;
					
				КонецЕсли;	
				Источник.КонтактноеЛицо = ДанныеЗаполнения.КонтактноеЛицо;
				Источник.Менеджер = ДанныеЗаполнения.Ответственный;
				Если ЗначениеЗаполнено(ДанныеЗаполнения.Проект) Тогда
					Источник.CRM_Проект = ДанныеЗаполнения.Проект;
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
				
				Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту")
					 И ДанныеЗаполнения.Свойство("ИдВарианта") Тогда
					МассивСтрок = Источник.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", ДанныеЗаполнения.ИдВарианта));
					Если МассивСтрок.Количество() = 0 Тогда
						Для каждого Стр Из ДанныеЗаполнения.ДокументОснование.Товары Цикл
							НоваяСтрока = Источник.Товары.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
							НоваяСтрока.CRM_ИДВарианта = ДанныеЗаполнения.ИдВарианта;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
				
				Источник.Менеджер	 		= ДанныеЗаполнения.Ответственный;
				Источник.ДокументОснование 	= ДанныеЗаполнения;
				Источник.CRM_Проект			= ДанныеЗаполнения.CRM_Проект;
				
				Если ЗначениеЗаполнено(ДанныеЗаполнения.ОтправительКонтакт) Тогда
					Если ТипЗнч(ДанныеЗаполнения.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
						Источник[ИмяРеквизитаПартнер]			= ДанныеЗаполнения.ОтправительКонтакт;
						Источник.КонтактноеЛицо	= ДанныеЗаполнения.ОтправительКонтакт.CRM_ОсновноеКонтактноеЛицо;
					ИначеЕсли ТипЗнч(ДанныеЗаполнения.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
						Источник[ИмяРеквизитаПартнер]			= ДанныеЗаполнения.ОтправительКонтакт.Владелец;
						Источник.КонтактноеЛицо	= ДанныеЗаполнения.ОтправительКонтакт;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
				
				Источник.Менеджер	 		= ДанныеЗаполнения.Ответственный;
				Источник.ДокументОснование 	= ДанныеЗаполнения;
				Источник.CRM_Проект			= ДанныеЗаполнения.CRM_Проект;
				
				// Если получатель один, то можно подставить его в документ.
				Если ДанныеЗаполнения.ПолучателиПисьма.Количество() = 1 Тогда
					Если ЗначениеЗаполнено(ДанныеЗаполнения.ПолучателиПисьма[0].Контакт) Тогда
						Если ТипЗнч(ДанныеЗаполнения.ПолучателиПисьма[0].Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
							Источник[ИмяРеквизитаПартнер]			= ДанныеЗаполнения.ПолучателиПисьма[0].Контакт;
							Источник.КонтактноеЛицо	= ДанныеЗаполнения.ПолучателиПисьма[0].Контакт.CRM_ОсновноеКонтактноеЛицо;
						ИначеЕсли ТипЗнч(ДанныеЗаполнения.ПолучателиПисьма[0].Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
							Источник[ИмяРеквизитаПартнер]			= ДанныеЗаполнения.ПолучателиПисьма[0].Контакт.Владелец;
							Источник.КонтактноеЛицо	= ДанныеЗаполнения.ПолучателиПисьма[0].Контакт;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс")
				ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				
				Если ТипЗнч(ДанныеЗаполнения) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
					CRM_ОбщегоНазначенияСервер.ЗаполнитьОбъектБизнесПроцесса(Источник, ДанныеЗаполнения);
				Иначе
					CRM_ОбщегоНазначенияСервер.ЗаполнитьОбъектБизнесПроцесса(Источник,
						 ДанныеЗаполнения.БизнесПроцесс,
						 ДанныеЗаполнения);
				КонецЕсли;
			ИначеЕсли Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM()
				 И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				               |	КоммерческоеПредложениеКлиенту.Организация КАК Организация,
				               |	КоммерческоеПредложениеКлиенту.Клиент КАК Клиент,
				               |	КоммерческоеПредложениеКлиенту.Сделка КАК Сделка,
				               |	КоммерческоеПредложениеКлиенту.Контрагент КАК Контрагент,
				               |	КоммерческоеПредложениеКлиенту.КонтактноеЛицо КАК КонтактноеЛицо,
				               |	КоммерческоеПредложениеКлиенту.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
				               |	КоммерческоеПредложениеКлиенту.Валюта КАК Валюта,
				               |	КоммерческоеПредложениеКлиенту.Налогообложение КАК Налогообложение,
				               |	КоммерческоеПредложениеКлиенту.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
				               |	КоммерческоеПредложениеКлиенту.СрокДействия КАК СрокДействия,
				               |	КоммерческоеПредложениеКлиенту.УсловияДоставкиТекст КАК УсловияДоставкиТекст,
				               |	КоммерческоеПредложениеКлиенту.УсловияОплатыТекст КАК УсловияОплатыТекст,
				               |	КоммерческоеПредложениеКлиенту.ПрочаяДополнительнаяИнформацияТекст КАК ПрочаяДополнительнаяИнформацияТекст,
				               |	КоммерческоеПредложениеКлиенту.МожетВыкупатьсяЧастично КАК МожетВыкупатьсяЧастично,
				               |	КоммерческоеПредложениеКлиенту.Менеджер КАК Менеджер,
				               |	КоммерческоеПредложениеКлиенту.ВариантУказанияСрокаПоставки КАК ВариантУказанияСрокаПоставки,
				               |	КоммерческоеПредложениеКлиенту.СуммаДокумента КАК СуммаДокумента,
				               |	КоммерческоеПредложениеКлиенту.ДополнительнаяИнформацияКлиентуHTML КАК ДополнительнаяИнформацияКлиентуHTML,
				               |	КоммерческоеПредложениеКлиенту.Комментарий КАК Комментарий,
				               |	КоммерческоеПредложениеКлиенту.ХэшСуммаЗапроса КАК ХэшСуммаЗапроса,
				               |	КоммерческоеПредложениеКлиенту.КартаЛояльности КАК КартаЛояльности,
				               |	ВЫБОР
						   // BSLLS:QueryToMissingMetadata-off   
				               |		КОГДА ТИПЗНАЧЕНИЯ(КоммерческоеПредложениеКлиенту.Ссылка) = ТИП(Документ.ЗапросКоммерческогоПредложенияОтКлиента)
						   // BSLLS:QueryToMissingMetadata-on   
				               |			ТОГДА КоммерческоеПредложениеКлиенту.ДокументОснование
				               |		ИНАЧЕ КоммерческоеПредложениеКлиенту.Ссылка
				               |	КОНЕЦ КАК ДокументОснование,
				               |	КоммерческоеПредложениеКлиенту.ИдентификаторЗКПВСервисе КАК ИдентификаторЗКПВСервисе,
				               |	НЕ КоммерческоеПредложениеКлиенту.Проведен КАК ЕстьОшибкиПроведен,
				               |	КоммерческоеПредложениеКлиенту.CRM_ИсходныеУсловия КАК CRM_ИсходныеУсловия,
				               |	КоммерческоеПредложениеКлиенту.CRM_Подразделение КАК CRM_Подразделение,
				               |	КоммерческоеПредложениеКлиенту.CRM_ПорядокВыполненияРабот КАК CRM_ПорядокВыполненияРабот,
				               |	КоммерческоеПредложениеКлиенту.CRM_Примечание КАК CRM_Примечание,
				               |	КоммерческоеПредложениеКлиенту.CRM_Проект КАК CRM_Проект
				               |ИЗ
				               |	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
				               |ГДЕ
				               |	КоммерческоеПредложениеКлиенту.Ссылка = &ДокументОснование
				               |;
				               |
				               |////////////////////////////////////////////////////////////////////////////////
				               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				               |	КоммерческоеПредложениеКлиентуТовары.ВидЦены КАК ВидЦены,
				               |	КоммерческоеПредложениеКлиентуТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				               |	КоммерческоеПредложениеКлиентуТовары.ЗапросЕдиницаИзмерения КАК ЗапросЕдиницаИзмерения,
				               |	КоммерческоеПредложениеКлиентуТовары.ЗапросКоличество КАК ЗапросКоличество,
				               |	КоммерческоеПредложениеКлиентуТовары.ЗапросСрокПоставки КАК ЗапросСрокПоставки,
				               |	КоммерческоеПредложениеКлиентуТовары.ЗапросЦена КАК ЗапросЦена,
				               |	КоммерческоеПредложениеКлиентуТовары.ИдентификаторДляСопоставленияНоменклатуры КАК ИдентификаторДляСопоставленияНоменклатуры,
				               |	КоммерческоеПредложениеКлиентуТовары.ИдентификаторСтрокиЗапроса КАК ИдентификаторСтрокиЗапроса,
				               |	КоммерческоеПредложениеКлиентуТовары.КлючСвязи КАК КлючСвязи,
				               |	КоммерческоеПредложениеКлиентуТовары.Количество КАК Количество,
				               |	КоммерческоеПредложениеКлиентуТовары.КомментарийВнутренний КАК КомментарийВнутренний,
				               |	КоммерческоеПредложениеКлиентуТовары.КомментарийДляПокупателя КАК КомментарийДляПокупателя,
				               |	КоммерческоеПредложениеКлиентуТовары.Номенклатура КАК Номенклатура,
				               |	КоммерческоеПредложениеКлиентуТовары.НоменклатураВСервисеИдентификатор КАК НоменклатураВСервисеИдентификатор,
				               |	КоммерческоеПредложениеКлиентуТовары.НоменклатураНабора КАК НоменклатураНабора,
				               |	КоммерческоеПредложениеКлиентуТовары.НоменклатураПокупателяИдентификатор КАК НоменклатураПокупателяИдентификатор,
				               |	КоммерческоеПредложениеКлиентуТовары.НоменклатураПокупателяПредставление КАК НоменклатураПокупателяПредставление,
				               |	КоммерческоеПредложениеКлиентуТовары.НомерСтроки КАК НомерСтроки,
				               |	КоммерческоеПредложениеКлиентуТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
				               |	КоммерческоеПредложениеКлиентуТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
				               |	КоммерческоеПредложениеКлиентуТовары.СрокПоставки КАК СрокПоставки,
				               |	КоммерческоеПредложениеКлиентуТовары.СтавкаНДС КАК СтавкаНДС,
				               |	КоммерческоеПредложениеКлиентуТовары.Сумма КАК Сумма,
				               |	КоммерческоеПредложениеКлиентуТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
				               |	КоммерческоеПредложениеКлиентуТовары.СуммаНДС КАК СуммаНДС,
				               |	КоммерческоеПредложениеКлиентуТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
				               |	КоммерческоеПредложениеКлиентуТовары.СуммаСНДС КАК СуммаСНДС,
				               |	КоммерческоеПредложениеКлиентуТовары.Характеристика КАК Характеристика,
				               |	КоммерческоеПредложениеКлиентуТовары.ХарактеристикаВСервисеИдентификатор КАК ХарактеристикаВСервисеИдентификатор,
				               |	КоммерческоеПредложениеКлиентуТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
				               |	КоммерческоеПредложениеКлиентуТовары.ХешСуммаСтрокиЗапроса КАК ХешСуммаСтрокиЗапроса,
				               |	КоммерческоеПредложениеКлиентуТовары.Цена КАК Цена,
				               |	КоммерческоеПредложениеКлиентуТовары.CRM_ИДВарианта КАК CRM_ИДВарианта,
				               |	КоммерческоеПредложениеКлиентуТовары.CRM_ИмяВарианта КАК CRM_ИмяВарианта,
				               |	КоммерческоеПредложениеКлиентуТовары.CRM_Утвержден КАК CRM_Утвержден,
				               |	КоммерческоеПредложениеКлиентуТовары.CRM_ЭтоРазделитель КАК CRM_ЭтоРазделитель,
				               |	КоммерческоеПредложениеКлиентуТовары.CRM_Содержание КАК CRM_Содержание
				               |ИЗ
				               |	Документ.КоммерческоеПредложениеКлиенту.Товары КАК КоммерческоеПредложениеКлиентуТовары
				               |ГДЕ
				               |	КоммерческоеПредложениеКлиентуТовары.Ссылка = &ДокументОснование
				               |
				               |УПОРЯДОЧИТЬ ПО
				               |	НомерСтроки
				               |;
				               |
				               |////////////////////////////////////////////////////////////////////////////////
				               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				               |	КоммерческоеПредложениеКлиентуСкидкиНаценки.НомерСтроки КАК НомерСтроки,
				               |	КоммерческоеПредложениеКлиентуСкидкиНаценки.КлючСвязи КАК КлючСвязи,
				               |	КоммерческоеПредложениеКлиентуСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
				               |	КоммерческоеПредложениеКлиентуСкидкиНаценки.Сумма КАК Сумма,
				               |	КоммерческоеПредложениеКлиентуСкидкиНаценки.НапомнитьПозже КАК НапомнитьПозже
				               |ИЗ
				               |	Документ.КоммерческоеПредложениеКлиенту.СкидкиНаценки КАК КоммерческоеПредложениеКлиентуСкидкиНаценки
				               |ГДЕ
				               |	КоммерческоеПредложениеКлиентуСкидкиНаценки.Ссылка = &ДокументОснование
				               |
				               |УПОРЯДОЧИТЬ ПО
				               |	НомерСтроки
				               |;
				               |
				               |////////////////////////////////////////////////////////////////////////////////
				               |ВЫБРАТЬ
				               |	КоммерческоеПредложениеКлиентуCRM_КомментарииВариантов.НомерСтроки КАК НомерСтроки,
				               |	КоммерческоеПредложениеКлиентуCRM_КомментарииВариантов.ИДВарианта КАК ИДВарианта,
				               |	КоммерческоеПредложениеКлиентуCRM_КомментарииВариантов.КомментарийВарианта КАК КомментарийВарианта
				               |ИЗ
				               |	Документ.КоммерческоеПредложениеКлиенту.CRM_КомментарииВариантов КАК КоммерческоеПредложениеКлиентуCRM_КомментарииВариантов
				               |ГДЕ
				               |	КоммерческоеПредложениеКлиентуCRM_КомментарииВариантов.Ссылка = &ДокументОснование
				               |
				               |УПОРЯДОЧИТЬ ПО
				               |	НомерСтроки";
				
				Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
				
				РезультатЗапроса = Запрос.ВыполнитьПакет();
				
				ВыборкаШапка = РезультатЗапроса[0].Выбрать();
				
				ВыборкаШапка.Следующий();
				
				МассивДопустимыхСтатусов = Новый Массив();
				МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует);
				
				МодульОбщегоНазначенияУТ = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначенияУТ");
				МодульОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
					ВыборкаШапка.ДокументОснование,
					,
					ВыборкаШапка.ЕстьОшибкиПроведен);
				
				ЗаполнитьЗначенияСвойств(Источник, ВыборкаШапка);
				
				ВыборкаТовары = РезультатЗапроса[1].Выбрать();
				Источник.Товары.Очистить();
				Пока ВыборкаТовары.Следующий() Цикл
					НоваяСтрокаТовары = Источник.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, ВыборкаТовары);
				КонецЦикла;
				
				ВыборкаСкидки = РезультатЗапроса[2].Выбрать();
				Источник.СкидкиНаценки.Очистить();
				Пока ВыборкаСкидки.Следующий() Цикл
					НоваяСтрокаСкидки = Источник.СкидкиНаценки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСкидки, ВыборкаСкидки);
				КонецЦикла;
				
				ВыборкаКомментарииВариантов = РезультатЗапроса[3].Выбрать();
				Пока ВыборкаКомментарииВариантов.Следующий() Цикл
					НоваяСтрокаКомментарийВарианта = Источник.CRM_КомментарииВариантов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаКомментарийВарианта, ВыборкаКомментарииВариантов);
				КонецЦикла;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Источник.КонтактноеЛицо) И ЗначениеЗаполнено(Источник[ИмяРеквизитаПартнер]) Тогда
				Если ЗначениеЗаполнено(Источник[ИмяРеквизитаПартнер].CRM_ОсновноеКонтактноеЛицо) Тогда
					Источник.КонтактноеЛицо = Источник[ИмяРеквизитаПартнер].CRM_ОсновноеКонтактноеЛицо;
				Иначе
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
					|	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка,
					|	ВЫБОР
					|		КОГДА КонтактныеЛицаПартнеров.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен)
					|			ТОГДА 2
					|		КОГДА КонтактныеЛицаПартнеров.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.ВременноНеРаботает)
					|			ТОГДА 1
					|		ИНАЧЕ 0
					|	КОНЕЦ КАК CRM_Состояние
					|ИЗ
					|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
					|ГДЕ
					|	КонтактныеЛицаПартнеров.Владелец = &Владелец
					|
					|УПОРЯДОЧИТЬ ПО
					|	CRM_Состояние";
					
					Запрос.УстановитьПараметр("Владелец", Источник[ИмяРеквизитаПартнер]);
					ВыборкаИзРезультатаЗапроса = Запрос.Выполнить().Выбрать();
					
					Если ВыборкаИзРезультатаЗапроса.Следующий() Тогда
						Источник.КонтактноеЛицо = ВыборкаИзРезультатаЗапроса.Ссылка;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				МодульПартнерыИКонтрагенты = ОбщегоНазначения.ОбщийМодуль("ПартнерыИКонтрагенты");
				МодульПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Источник[ИмяРеквизитаПартнер],
					 Источник.Контрагент);
			КонецЕсли;
			
			//Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			//	Источник.ЗаполнитьУсловияПродажПоУмолчанию();
			//КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Источник.Менеджер) Тогда
				ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный");
				Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
					Источник.Менеджер = ЗначениеНастройки;
				Иначе
					Источник.Менеджер = CRM_ОбщегоНазначенияСервер.ТекущийПользователь();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти // ТиповыеОбработчики

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СправочникОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	#Область МаркетинговыеМероприятия
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.МаркетинговыеМероприятия") Тогда
		ТекПользователь = CRM_ОбщегоНазначенияСервер.ТекущийПользователь();
		Если Не ЗначениеЗаполнено(Источник.CRM_Автор) Тогда
			Источник.CRM_Автор = ТекПользователь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Источник.Ответственный) Тогда
			Источник.Ответственный = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный");
			Если НЕ ЗначениеЗаполнено(Источник.Ответственный) Тогда
				Источник.Ответственный = ТекПользователь;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Источник.CRM_Валюта) Тогда
			Источник.CRM_Валюта = Константы.ВалютаУправленческогоУчета.Получить();
			ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(),
				 Новый Структура("Валюта",
				 Источник.CRM_Валюта));
			Если Не ЗначениеЗаполнено(Источник.CRM_Кратность) Тогда
				Источник.CRM_Кратность = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, ВалютаРасчетовКурсКратность.Кратность);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Источник.CRM_Курс) Тогда
				Источник.CRM_Курс = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Источник.CRM_Проект) Тогда
			ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойПроект");
			Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
				Источник.CRM_Проект = ЗначениеНастройки;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Источник.CRM_Подразделение) Тогда
			ЗначениеНастройки = ТекПользователь.Подразделение;
			Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
				Источник.CRM_Подразделение = ЗначениеНастройки;
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Источник.CRM_Важность) Тогда
			Источник.CRM_Важность = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
			Источник.ДатаНачала	  = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
			Источник.ДатаОкончания = Источник.ДатаНачала;
			МетаданныеОбъекта = Источник.Ссылка.Метаданные();
			Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ПлановаяДатаНачала", МетаданныеОбъекта) Тогда
				Источник.ПлановаяДатаНачала = Источник.ДатаНачала;
			КонецЕсли;
			Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ПлановаяДатаОкончания", МетаданныеОбъекта) Тогда
				Источник.ПлановаяДатаОкончания = Источник.ДатаНачала;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	#КонецОбласти
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	#Область УчетныеЗаписиЭлектроннойПочты
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.УчетныеЗаписиЭлектроннойПочты") Тогда
		// При инициализации учётной записи настройка ставится в "Истина".
		Источник.ОставлятьКопииСообщенийНаСервере = Истина;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область КонтактныеЛицаПартнеров
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.КонтактныеЛицаПартнеров") Тогда
		Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			СтруктураНомера	=
				сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ДанныеЗаполнения.АбонентКакСвязаться);
			Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(ДанныеЗаполнения.АбонентКакСвязаться);
			Источник.Наименование = ДанныеЗаполнения.АбонентПредставление;
			НоваяКИ = Источник.КонтактнаяИнформация.Добавить();
			НоваяКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
			СтруктураНомера = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Телефон);
			Если СтрНайти(СтруктураНомера.КодГорода, "9") = 1 Тогда
				НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица");
			Иначе	
				НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица");
			КонецЕсли;
			НоваяКИ.НомерТелефонаБезКодов	= СтруктураНомера.НомерТелефона;
			Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
				НоваяКИ.Представление	= ?(ЗначениеЗаполнено(СтруктураНомера.КодСтраны), СтруктураНомера.КодСтраны + " (", "(") + СтруктураНомера.КодГорода 
					+ ") " 
					+ СтруктураНомера.НомерТелефона;
			Иначе
				НоваяКИ.Представление	= Телефон;
			КонецЕсли;
			НоваяКИ.НомерТелефона = Телефон;
			ЗначенияПолей	= Новый СписокЗначений;
			ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,		"КодСтраны");
			ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,		"КодГорода");
			ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона,	"НомерТелефона");
			НоваяКИ.ЗначенияПолей	= ЗначенияПолей;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Проекты
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Проекты") Тогда
		Если Не Источник.ЭтоГруппа Тогда
			Источник.ПлановаяДатаНачала = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
			Источник.Ответственный = CRM_ОбщегоНазначенияСервер.ТекущийПользователь();
			Источник.CRM_Подразделение = Источник.Ответственный.Подразделение;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Партнеры
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Партнеры") Тогда
		Если НЕ Источник.ЭтоГруппа Тогда
			// +СофтФон
			Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Телефон")
				 И ЗначениеЗаполнено(ДанныеЗаполнения.Телефон) Тогда
				Если СтрНайти(ДанныеЗаполнения.Телефон, ";") > 0 Тогда
					МассивСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДанныеЗаполнения.Телефон, ";");
				ИначеЕсли СтрНайти(ДанныеЗаполнения.Телефон, ",") > 0 Тогда
					МассивСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДанныеЗаполнения.Телефон, ",");
				Иначе
					МассивСтроки = Новый Массив;
					МассивСтроки.Добавить(ДанныеЗаполнения.Телефон);
				КонецЕсли;
				Для Каждого ЭлементМассива Из МассивСтроки Цикл
					СтрокаТелефон	= Источник.КонтактнаяИнформация.Добавить();
					СтрокаТелефон.Тип	= Перечисления.ТипыКонтактнойИнформации.Телефон;
					СтруктураНомера	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ЭлементМассива);
					Если ЗначениеЗаполнено(Источник.ЮрФизЛицо) Тогда
						Если Источник.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
							СтрокаТелефон.Вид	= Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
						ИначеЕсли СтрНайти(СтруктураНомера.КодГорода, "9") = 1 Тогда
							СтрокаТелефон.Вид	= Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица;
						Иначе
							СтрокаТелефон.Вид	= Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
						КонецЕсли;
					Иначе
						Если СтрНайти(СтруктураНомера.КодГорода, "9") = 1 Тогда
							Источник.ЮрФизЛицо	= Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
							СтрокаТелефон.Вид	= Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица;
						Иначе
							Источник.ЮрФизЛицо	= Перечисления.КомпанияЧастноеЛицо.Компания;
							СтрокаТелефон.Вид	= Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
						КонецЕсли;
					КонецЕсли;
					СтрокаТелефон.НомерТелефона			= ЭлементМассива;
					СтрокаТелефон.НомерТелефонаБезКодов	= СтруктураНомера.НомерТелефона;
					Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
						СтрокаТелефон.Представление	= СтруктураНомера.КодСтраны + " (" + СтруктураНомера.КодГорода 
							+ ") " 
							+ СтруктураНомера.НомерТелефона;
					Иначе
						СтрокаТелефон.Представление	= ЭлементМассива;
					КонецЕсли;
					ЗначенияПолей	= Новый СписокЗначений;
					ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,		"КодСтраны");
					ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,		"КодГорода");
					ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона,	"НомерТелефона");
					СтрокаТелефон.ЗначенияПолей	= ЗначенияПолей;
				КонецЦикла;
			КонецЕсли;
			// -СофтФон
			
			// Заполнение КИ при преобразовании КЛ в партнёра.
			Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ПреобразованиеКЛ") Тогда
				Для Каждого СтрокаСоответствия Из ДанныеЗаполнения.ПреобразованиеКЛ Цикл
					НоваяКИ	= Источник.КонтактнаяИнформация.Добавить();
					Если СтрНайти(СтрокаСоответствия.Ключ, " CRM_ОсновнойДляСвязи") > 0 Тогда
						ПредставлениеКИ = СтрЗаменить(СтрокаСоответствия.Ключ, " CRM_ОсновнойДляСвязи", "");
						CRM_ОсновнойДляСвязи = Истина;
					Иначе
						ПредставлениеКИ = СтрокаСоответствия.Ключ;
						CRM_ОсновнойДляСвязи = Ложь;
					КонецЕсли;
					Если (СтрокаСоответствия.Значение = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера) Тогда
						НоваяКИ.Тип						= Перечисления.ТипыКонтактнойИнформации.Телефон;
						НоваяКИ.Вид						= СтрокаСоответствия.Значение;
						НоваяКИ.НомерТелефона			= ПредставлениеКИ;
						НоваяКИ.Представление			= ПредставлениеКИ;
						НоваяКИ.CRM_ОсновнойДляСвязи	= CRM_ОсновнойДляСвязи;
					ИначеЕсли (СтрокаСоответствия.Значение = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица) Тогда
						НоваяКИ.Тип						= Перечисления.ТипыКонтактнойИнформации.Телефон;
						НоваяКИ.Вид						= СтрокаСоответствия.Значение;
						НоваяКИ.НомерТелефона			= ПредставлениеКИ;
						НоваяКИ.Представление			= ПредставлениеКИ;
						НоваяКИ.CRM_ОсновнойДляСвязи	= CRM_ОсновнойДляСвязи;
					ИначеЕсли (СтрокаСоответствия.Значение = Справочники.ВидыКонтактнойИнформации.EmailПартнера) Тогда
						НоваяКИ.Тип						= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
						НоваяКИ.Вид						= СтрокаСоответствия.Значение;
						НоваяКИ.АдресЭП					= ПредставлениеКИ;
						НоваяКИ.Представление			= ПредставлениеКИ;
						НоваяКИ.CRM_ОсновнойДляСвязи	= CRM_ОсновнойДляСвязи;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;			
			
			Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
				СтруктураНомера	=
					сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ДанныеЗаполнения.АбонентКакСвязаться);
				Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(ДанныеЗаполнения.АбонентКакСвязаться);		
				Источник.Наименование = ДанныеЗаполнения.АбонентПредставление;
				НоваяКИ = Источник.КонтактнаяИнформация.Добавить();
				НоваяКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
				СтруктураНомера = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Телефон);
				НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера");
				НоваяКИ.НомерТелефонаБезКодов	= СтруктураНомера.НомерТелефона;		
				Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
					НоваяКИ.Представление	= ?(ЗначениеЗаполнено(СтруктураНомера.КодСтраны), СтруктураНомера.КодСтраны + " (", "(") + СтруктураНомера.КодГорода 
						+ ") " 
						+ СтруктураНомера.НомерТелефона;
				Иначе	
					НоваяКИ.Представление	= Телефон;
				КонецЕсли;	
				НоваяКИ.НомерТелефона = Телефон;
			Иначе // В случае телефонного звонка свойства отсутствуют.
				Если ДанныеЗаполнения.Свойство("ЮрФизЛицо") Тогда // Передается в данных заполнения, например, при создании физ. лица из контакта партнера.
					Источник.ЮрФизЛицо = ДанныеЗаполнения.ЮрФизЛицо;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Источник.ЮрФизЛицо) Тогда
					Источник.ЮрФизЛицо = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойВидКлиента");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ФизическиеЛица
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			СтруктураНомера =
				сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ДанныеЗаполнения.АбонентКакСвязаться);
			Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(ДанныеЗаполнения.АбонентКакСвязаться);
			Источник.Наименование = ДанныеЗаполнения.АбонентПредставление;
			НоваяКИ = Источник.КонтактнаяИнформация.Добавить();
			НоваяКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
			СтруктураНомера = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Телефон);
			Если СтрНайти(СтруктураНомера.КодГорода, "9") = 1 Тогда
				НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица");
			Иначе 
				НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица");
			КонецЕсли;   
			НоваяКИ.НомерТелефонаБезКодов = СтруктураНомера.НомерТелефона;
			Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
				НоваяКИ.Представление = ?(ЗначениеЗаполнено(СтруктураНомера.КодСтраны), СтруктураНомера.КодСтраны + " (", "(") + СтруктураНомера.КодГорода 
					+ ") " 
					+ СтруктураНомера.НомерТелефона;
			Иначе 
				НоваяКИ.Представление = Телефон;
			КонецЕсли; 
			НоваяКИ.НомерТелефона = Телефон;
			ЗначенияПолей = Новый СписокЗначений;
			ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,  "КодСтраны");
			ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,  "КодГорода");
			ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона, "НомерТелефона");
			НоваяКИ.ЗначенияПолей = ЗначенияПолей;
		КонецЕсли;
		
	КонецЕсли;

	#КонецОбласти
	
	#Область Пользователи
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Пользователи") Тогда
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			СтруктураНомера	=
				сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ДанныеЗаполнения.АбонентКакСвязаться);
			Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(ДанныеЗаполнения.АбонентКакСвязаться);
			Источник.Наименование = ДанныеЗаполнения.АбонентПредставление;
			НоваяКИ = Источник.КонтактнаяИнформация.Добавить();
			НоваяКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
			СтруктураНомера = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Телефон);
			Если СтрНайти(СтруктураНомера.КодГорода, "9") = 1 Тогда
				НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПользователя");
			Иначе
				НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_ТелефонПользователяРабочий");
			КонецЕсли;
			НоваяКИ.НомерТелефонаБезКодов	= СтруктураНомера.НомерТелефона;
			Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
				НоваяКИ.Представление	= ?(ЗначениеЗаполнено(СтруктураНомера.КодСтраны), СтруктураНомера.КодСтраны + " (", "(") + СтруктураНомера.КодГорода 
					+ ") " 
					+ СтруктураНомера.НомерТелефона;
			Иначе
				НоваяКИ.Представление	= Телефон;
			КонецЕсли;
			НоваяКИ.НомерТелефона = Телефон;
			ЗначенияПолей	= Новый СписокЗначений;
			ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,		"КодСтраны");
			ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,		"КодГорода");
			ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона,	"НомерТелефона");
			НоваяКИ.ЗначенияПолей	= ЗначенияПолей;
		КонецЕсли;
		Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			Источник.Подразделение = ДанныеЗаполнения;
		КонецЕсли;
	КонецЕсли;
		
	#КонецОбласти
	
КонецПроцедуры

Функция ЗаполнитьОтправительКонтакт(Письмо)
	Адрес					= "";
	Контакт					= Неопределено;
	ЕстьКонтакты			= Ложь;
	ЕстьПустыеКонтакты		= Ложь;
	ЕстьВнутренниеКонтакты	= Ложь;
	Для Каждого СтрокаТаблицы Из Письмо.ПолучателиПисьма Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
			Если ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
				Если ЗначениеЗаполнено(Контакт) Тогда
					Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
						Возврат 1;
					ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
						Если (Контакт.Владелец = СтрокаТаблицы.Контакт) Тогда
							Адрес	= СтрокаТаблицы.Адрес;
							Контакт	= СтрокаТаблицы.Контакт;	
						Иначе	
							Возврат 1;
						КонецЕсли;
					ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
						Возврат 1;
					КонецЕсли;
				Иначе
					Адрес			= СтрокаТаблицы.Адрес;
					Контакт			= СтрокаТаблицы.Контакт;
					ЕстьКонтакты	= Истина;
				КонецЕсли;
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Если ЗначениеЗаполнено(Контакт) Тогда
					Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
						Если НЕ (Контакт = СтрокаТаблицы.Контакт.Владелец) Тогда
							Возврат 1;
						КонецЕсли;
					ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
						Если Контакт.Владелец = СтрокаТаблицы.Контакт.Владелец Тогда
							Контакт	= СтрокаТаблицы.Контакт.Владелец;
							КонтактнаяИнформация	= CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(Контакт,
								 Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
							Если КонтактнаяИнформация.Количество() = 0 Тогда
								Адрес	= "";
							Иначе	
								Адрес	= КонтактнаяИнформация[0].Представление;
							КонецЕсли;
						Иначе	
							Возврат 1;
						КонецЕсли;
					ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
						Возврат 1;
					КонецЕсли;	
				Иначе	
					Адрес			= СтрокаТаблицы.Адрес;
					Контакт			= СтрокаТаблицы.Контакт;
					ЕстьКонтакты	= Истина;
				КонецЕсли;
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
				Если ЗначениеЗаполнено(Контакт) Тогда
					Возврат 1;
				Иначе	
					Адрес			= СтрокаТаблицы.Адрес;
					Контакт			= СтрокаТаблицы.Контакт;
					ЕстьКонтакты	= Истина;
				КонецЕсли;
			Иначе	
				ЕстьВнутренниеКонтакты	= Истина;
			КонецЕсли;	
		Иначе
			ЕстьПустыеКонтакты	= Истина;
		КонецЕсли;	
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Письмо.ПолучателиКопий Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
			Если ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
				Если ЗначениеЗаполнено(Контакт) Тогда
					Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
						Возврат 1;
					ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
						Если (Контакт.Владелец = СтрокаТаблицы.Контакт) Тогда
							Адрес	= СтрокаТаблицы.Адрес;
							Контакт	= СтрокаТаблицы.Контакт;	
						Иначе	
							Возврат 1;
						КонецЕсли;
					ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
						Возврат 1;
					КонецЕсли;
				Иначе	
					Адрес			= СтрокаТаблицы.Адрес;
					Контакт			= СтрокаТаблицы.Контакт;	
					ЕстьКонтакты	= Истина;
				КонецЕсли;
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Если ЗначениеЗаполнено(Контакт) Тогда
					Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
						Если НЕ (Контакт = СтрокаТаблицы.Контакт.Владелец) Тогда
							Возврат 1;
						КонецЕсли;
					ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
						Если Контакт.Владелец = СтрокаТаблицы.Контакт.Владелец Тогда
							Контакт	= СтрокаТаблицы.Контакт.Владелец;
							КонтактнаяИнформация	= CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(Контакт,
								 Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
							Если КонтактнаяИнформация.Количество() = 0 Тогда
								Адрес	= "";
							Иначе	
								Адрес	= КонтактнаяИнформация[0].Представление;
							КонецЕсли;
						Иначе	
							Возврат 1;
						КонецЕсли;
					ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
						Возврат 1;
					КонецЕсли;	
				Иначе	
					Адрес			= СтрокаТаблицы.Адрес;
					Контакт			= СтрокаТаблицы.Контакт;	
					ЕстьКонтакты	= Истина;
				КонецЕсли;
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
				Если ЗначениеЗаполнено(Контакт) Тогда
					Возврат 1;
				Иначе	
					ЕстьПустыеКонтакты	= Истина;
					Адрес = СтрокаТаблицы.Адрес;
					Контакт	= СтрокаТаблицы.Контакт;	
				КонецЕсли;
			Иначе	
				ЕстьВнутренниеКонтакты	= Истина;
				Адрес = СтрокаТаблицы.Адрес;
				Контакт	= СтрокаТаблицы.Контакт;	
			КонецЕсли;	
		Иначе
			ЕстьПустыеКонтакты	= Истина;
		КонецЕсли;	
	КонецЦикла;
	Если ЗначениеЗаполнено(Контакт) Тогда
		Письмо.CRM_ОтправительАдрес		= Адрес;
		Письмо.CRM_ОтправительКонтакт	= Контакт;
		Возврат 1;
	ИначеЕсли ЕстьКонтакты Тогда
		Возврат 1;
	ИначеЕсли ЕстьПустыеКонтакты Тогда
		Если ЕстьВнутренниеКонтакты Тогда
			Возврат 1;
		Иначе	
			Возврат 0;
		КонецЕсли;	
	ИначеЕсли ЕстьВнутренниеКонтакты Тогда
		Возврат 2;
	Иначе
		Возврат 1;
	КонецЕсли;	
КонецФункции

#Область Константы 

Процедура CRM_КонстантыПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.сфпИспользоватьСофтФон") Тогда
		Константы.CRM_ИспользоватьКомандуПанельСофтФон.Установить(Источник.Значение
			 И НЕ ОбщегоНазначения.РазделениеВключено());
	ИначеЕсли ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИдентификаторИнформационнойБазы") Тогда
		CRM_ЦентрМониторингаВызовСервера.ПараметрыЦентраМониторингаИзменитьИдентификаторИнформационнойБазы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Упорядочивание 

Процедура ЗаполнитьЗначениеРеквизитаУпорядочивания(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("РеквизитаУпорядочиванияУстановлен") Тогда
		НастройкаПорядкаЭлементов.УстановитьЗначениеРеквизитаУпорядочивания(Источник);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронноеПисьмоИсходящееМетодыЗаполнения 

Процедура ЗаполнитьНаОснованииПисьма(Объект, Основание, ТипОтвета)
	
	// +CRM
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
	// -CRM
	ПереноситьОтправителя = Истина;
	ПереноситьВсехПолучателей = Ложь;
	// +CRM
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ПереноситьОтправителя		= Ложь;
		ПереноситьВсехПолучателей	= Истина;
	КонецЕсли;
	// -CRM
	ПереноситьВложения = Ложь;
	ДобавлятьКТеме = "Re: ";
	
	Если ТипОтвета = "ОтветитьВсем" Тогда
		ПереноситьВсехПолучателей = Истина;
	ИначеЕсли ТипОтвета = "Переслать" Тогда
		ДобавлятьКТеме = "Fw: ";
		ПереноситьОтправителя = Ложь;
		// +CRM
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
			ПереноситьВсехПолучателей = Ложь;
		Иначе	
		// -CRM
		ПереноситьВложения = Истина;
		// +CRM
		КонецЕсли;
		// -CRM
	КонецЕсли;
	
	ЗаполнитьПараметрыИзПисьма(Объект, Основание, ПереноситьОтправителя, ПереноситьВсехПолучателей,
		ДобавлятьКТеме, ПереноситьВложения, ТипОтвета);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИзПисьма(Объект, Письмо, ПереноситьОтправителяВПолучатели, 
	
	ПереноситьВсехПолучателейПисьмаВПолучатели, ДобавлятьКТеме, ПереноситьВложения, ТипОтвета)
	
	ИмяОбъектаМетаданных = Письмо.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	// +CRM
	// Запрос.Текст ="ВЫБРАТЬ
	// |	ЭлектронноеПисьмо.ИдентификаторСообщения,
	// |	ЭлектронноеПисьмо.ИдентификаторыОснований,
	// |	ЭлектронноеПисьмо.Кодировка,
	// |	ЭлектронноеПисьмо.Предмет,
	// |	ЭлектронноеПисьмо.Тема,
	// |	ЭлектронноеПисьмо.УчетнаяЗапись,
	// |	ЭлектронноеПисьмо.ТипТекста,
	//|	ЭлектронноеПисьмо.Ссылка" +?(ПереноситьОтправителяВПолучатели,",
	// |	ЭлектронноеПисьмо.ОтправительАдрес,
	// |	ЭлектронноеПисьмо.ОтправительКонтакт,
	//|	ЭлектронноеПисьмо.ОтправительПредставление", "") + "
	// |ИЗ
	//|	Документ." + ИмяОбъектаМетаданных + " КАК ЭлектронноеПисьмо
	// |ГДЕ
	//|	ЭлектронноеПисьмо.Ссылка = &Ссылка";
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.ИдентификаторСообщения,
	|	ЭлектронноеПисьмоВходящее.ИдентификаторыОснований,
	|	ЭлектронноеПисьмоВходящее.Кодировка,";
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	ЭлектронноеПисьмоВходящее.ОтправительАдрес,
		|	ЭлектронноеПисьмоВходящее.ОтправительКонтакт,
		|	ЭлектронноеПисьмоВходящее.ОтправительПредставление,";
	ИначеЕсли ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	"""" КАК ОтправительАдрес,
		|	"""" КАК ОтправительКонтакт,
		|	"""" КАК ОтправительПредставление,";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|	ЭлектронноеПисьмоВходящее.Ссылка,
	|	ЭлектронноеПисьмоВходящее.Текст,
	|	ЭлектронноеПисьмоВходящее.ТекстHTML,
	|	ЭлектронноеПисьмоВходящее.ТипТекста,
	|	ЭлектронноеПисьмоВходящее.Тема,
	|	ЭлектронноеПисьмоВходящее.УчетнаяЗапись,
	|	ЭлектронноеПисьмоВходящее.ПолучателиПисьма.(
	|		Адрес,
	|		Представление,
	|		Контакт
	|	),
	|	ЭлектронноеПисьмоВходящее.ПолучателиКопий.(
	|		Адрес,
	|		Представление,
	|		Контакт
	|	)
	|ИЗ";
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее";
	ИначеЕсли ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоВходящее";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.Ссылка = &Ссылка";
	Запрос.Текст = ТекстЗапроса;
	// -CRM
	Запрос.УстановитьПараметр("Ссылка", Письмо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Объект.Кодировка					= Выборка.Кодировка;
	// +CRM
	Объект.Текст						= "";
	Объект.ТекстHTML					= "";
	
	Объект.Тема							= CRM_МетодыМодулейОбъектовДокументов.ПолучитьТемуПисьма(Выборка.Тема, ДобавлятьКТеме);
	// -CRM
	
	ДоступныеУчетныеЗаписи = Новый СписокЗначений;
	CRM_УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(ДоступныеУчетныеЗаписи);
	
	ДанныеДоступнойУчетнойЗаписи = ДоступныеУчетныеЗаписи.НайтиПоЗначению(Выборка.УчетнаяЗапись);
	Если ДанныеДоступнойУчетнойЗаписи <> Неопределено Тогда
		Объект.УчетнаяЗапись = Выборка.УчетнаяЗапись;
		Объект.ОтправительПредставление = ДанныеДоступнойУчетнойЗаписи.Представление;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		
		ОсновнаяУчетнаяЗапись = ХранилищеОбщихНастроек.Загрузить("ОсновнаяУчетнаяЗапись", "ОсновнаяУчетнаяЗапись");
		ДанныеДоступнойУчетнойЗаписи = ДоступныеУчетныеЗаписи.НайтиПоЗначению(ОсновнаяУчетнаяЗапись);
		
		Если ЗначениеЗаполнено(ОсновнаяУчетнаяЗапись) И ДанныеДоступнойУчетнойЗаписи <> Неопределено Тогда
			Объект.УчетнаяЗапись = ОсновнаяУчетнаяЗапись;
			Объект.ОтправительПредставление = ДанныеДоступнойУчетнойЗаписи.Представление;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
			Если ДоступныеУчетныеЗаписи.Количество() > 0 Тогда
				ДанныеДоступнойУчетнойЗаписи = ДоступныеУчетныеЗаписи[0];
				Объект.УчетнаяЗапись = ДанныеДоступнойУчетнойЗаписи.Значение;
				Объект.ОтправительПредставление = ДанныеДоступнойУчетнойЗаписи.Представление;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.ВзаимодействиеОснование		= Выборка.Ссылка;
	Объект.ВключатьТелоИсходногоПисьма	= Истина;
	Объект.ТипТекста					= Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
	
	Если ПереноситьОтправителяВПолучатели Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектронноеПисьмоВходящее.ОтправительАдрес         КАК ОтправительАдрес,
		|	ЭлектронноеПисьмоВходящее.ОтправительКонтакт       КАК ОтправительКонтакт,
		|	ЭлектронноеПисьмоВходящее.ОтправительПредставление КАК ОтправительПредставление
		|ИЗ
		|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
		|ГДЕ
		|	ЭлектронноеПисьмоВходящее.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектронноеПисьмоВходящееПолучателиОтвета.Адрес         КАК Адрес,
		|	ЭлектронноеПисьмоВходящееПолучателиОтвета.Представление КАК Представление,
		|	ЭлектронноеПисьмоВходящееПолучателиОтвета.Контакт       КАК Контакт
		|ИЗ
		|	Документ.ЭлектронноеПисьмоВходящее.ПолучателиОтвета КАК ЭлектронноеПисьмоВходящееПолучателиОтвета
		|ГДЕ
		|	ЭлектронноеПисьмоВходящееПолучателиОтвета.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Письмо);
		
		Результат = Запрос.ВыполнитьПакет();
		
		ЕстьПолучателиОтвета = Не Результат[1].Пустой();
		
		Если ЕстьПолучателиОтвета Тогда
			
			ВыборкаПолучатели = Результат[1].Выбрать();
			Пока ВыборкаПолучатели.Следующий() Цикл
				ДобавитьПолучателя(Объект, ВыборкаПолучатели.Адрес, 
				                   ВыборкаПолучатели.Представление, 
				                   ВыборкаПолучатели.Контакт);
			КонецЦикла;
			
		Иначе
			
			ВыборкаОтправитель = Результат[0].Выбрать();
			ВыборкаОтправитель.Следующий();
			
			ДобавитьПолучателя(Объект, ВыборкаОтправитель.ОтправительАдрес,
			                   ВыборкаОтправитель.ОтправительПредставление,
			                   ВыборкаОтправитель.ОтправительКонтакт);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПереноситьВсехПолучателейПисьмаВПолучатели Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты
		|ПОМЕСТИТЬ АдресТекущегоПолучателя
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка В
		|			(ВЫБРАТЬ
		|				ЭлектронноеПисьмо.УчетнаяЗапись
		|			ИЗ
		|				Документ." + ИмяОбъектаМетаданных + " КАК ЭлектронноеПисьмо
		|			ГДЕ
		|				ЭлектронноеПисьмо.Ссылка = &Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронноеПисьмоПолучателиПисьма.Адрес,
		|	ЭлектронноеПисьмоПолучателиПисьма.Представление,
		|	ЭлектронноеПисьмоПолучателиПисьма.Контакт,
		|	""ПолучательПисьма"" КАК ТипПолучателя
		|ИЗ
		|	Документ." + ИмяОбъектаМетаданных + ".ПолучателиПисьма КАК ЭлектронноеПисьмоПолучателиПисьма
		|ГДЕ
		|	ЭлектронноеПисьмоПолучателиПисьма.Ссылка = &Ссылка
		|	И (НЕ ЭлектронноеПисьмоПолучателиПисьма.Адрес В
		|				(ВЫБРАТЬ
		|					АдресТекущегоПолучателя.АдресЭлектроннойПочты
		|				ИЗ
		|					АдресТекущегоПолучателя КАК АдресТекущегоПолучателя))";
		
		// +CRM Исходный запрос разбит на 2 части: в случае нажатия "Ответить" в Исходящем письме не должны учитываться копии
		Если ТипОтвета = "ОтветитьВсем" Тогда
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЭлектронноеПисьмоПолучателиКопий.Адрес,
			|	ЭлектронноеПисьмоПолучателиКопий.Представление,
			|	ЭлектронноеПисьмоПолучателиКопий.Контакт,
			|	""ПолучательКопии"" КАК ТипПолучателя
			|ИЗ
			|	Документ." + ИмяОбъектаМетаданных + ".ПолучателиКопий КАК ЭлектронноеПисьмоПолучателиКопий
			|ГДЕ
			|	ЭлектронноеПисьмоПолучателиКопий.Ссылка = &Ссылка
			|	И (НЕ ЭлектронноеПисьмоПолучателиКопий.Адрес В
			|				(ВЫБРАТЬ
			|					АдресТекущегоПолучателя.АдресЭлектроннойПочты
			|				ИЗ
			|					АдресТекущегоПолучателя КАК АдресТекущегоПолучателя))";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("АдресОтправителяЭтогоПисьма", Письмо.УчетнаяЗапись.АдресЭлектроннойПочты);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ДобавитьПолучателейИзТаблицы(Объект, РезультатЗапроса.Выгрузить());
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.СписокПолучателейПисьма = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиПисьма,
		 Ложь);
	Объект.СписокПолучателейКопий = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиКопий,
		 Ложь);
	
КонецПроцедуры

Процедура ДобавитьПолучателя(Объект, Адрес, Представление, Контакт)
	
	Если Объект.ПолучателиПисьма.Найти(Адрес, "Адрес") = Неопределено Тогда
		НоваяСтрока = Объект.ПолучателиПисьма.Добавить();
		НоваяСтрока.Адрес = Адрес;
		НоваяСтрока.Контакт = Контакт;
		НоваяСтрока.Представление = Представление;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Контакт) Тогда
			НоваяСтрока.Контакт = Адрес;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПолучателейИзТаблицы(Объект, Таблица)
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если СтрокаТаблицы.ТипПолучателя = "ПолучательПисьма" Тогда
			НоваяСтрока = Объект.ПолучателиПисьма.Добавить();
		ИначеЕсли СтрокаТаблицы.ТипПолучателя = "ПолучательКопии" Тогда
			НоваяСтрока = Объект.ПолучателиКопий.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Контакт) Тогда
			НоваяСтрока.Контакт = СтрокаТаблицы.Адрес;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Партнеры

Процедура СкорректироватьТипыОтношенийПоФлагам(Объект) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;

	Клиент = Ложь;
	Поставщик = Ложь;
	Конкурент = Ложь;
	ПрочиеОтношения = Ложь;
	Для каждого Строка Из Объект.CRM_ТипыОтношений Цикл
		Клиент = (Клиент ИЛИ Строка.ТипОтношений.Клиент);
		Поставщик = (Поставщик ИЛИ Строка.ТипОтношений.Поставщик);
		Конкурент = (Конкурент ИЛИ Строка.ТипОтношений.Конкурент);
		ПрочиеОтношения = (ПрочиеОтношения ИЛИ Строка.ТипОтношений.ПрочиеОтношения);
	КонецЦикла;
	
	ЕстьОтличия = Ложь;
	
	Если Объект.Клиент И Клиент <> Объект.Клиент Тогда
		НоваяСтрока = Объект.CRM_ТипыОтношений.Добавить();
		НоваяСтрока.ТипОтношений = Справочники.CRM_ТипыОтношений.Покупатель;
		ЕстьОтличия = Истина;
	КонецЕсли;
	
	Если Объект.Поставщик И Поставщик <> Объект.Поставщик Тогда
		НоваяСтрока = Объект.CRM_ТипыОтношений.Добавить();
		НоваяСтрока.ТипОтношений = Справочники.CRM_ТипыОтношений.Поставщик;
		ЕстьОтличия = Истина;
	КонецЕсли;
	
	Если Объект.Конкурент И Конкурент <> Объект.Конкурент Тогда
		НоваяСтрока = Объект.CRM_ТипыОтношений.Добавить();
		НоваяСтрока.ТипОтношений = Справочники.CRM_ТипыОтношений.Конкурент;
		ЕстьОтличия = Истина;
	КонецЕсли;
	
	Если Объект.ПрочиеОтношения И ПрочиеОтношения <> Объект.ПрочиеОтношения Тогда
		НоваяСтрока = Объект.CRM_ТипыОтношений.Добавить();
		НоваяСтрока.ТипОтношений = Справочники.CRM_ТипыОтношений.Другое;
		ЕстьОтличия = Истина;
	КонецЕсли;
	
	Если ЕстьОтличия Тогда
		CRM_ТипыОтношений = "";
		Для Каждого Строка Из Объект.CRM_ТипыОтношений Цикл
			CRM_ТипыОтношений = CRM_ТипыОтношений  + "; " + Строка.ТипОтношений;
		КонецЦикла;	
		Если СтрДлина(CRM_ТипыОтношений) > 0 Тогда
			CRM_ТипыОтношений = Сред(CRM_ТипыОтношений, 3);
		КонецЕсли;	
		Объект.CRM_ТипОтношенийПредставление = CRM_ТипыОтношений;
	КонецЕсли;
	
КонецПроцедуры

Процедура СкорректироватьФлагиПоТипамОтношений(Объект) Экспорт
	
	Клиент = Ложь;
	Поставщик = Ложь;
	Конкурент = Ложь;
	ПрочиеОтношения = Ложь;
	CRM_ТипыОтношений = "";
	Для каждого Строка Из Объект.CRM_ТипыОтношений Цикл
		Клиент = (Клиент ИЛИ Строка.ТипОтношений.Клиент);
		Поставщик = (Поставщик ИЛИ Строка.ТипОтношений.Поставщик);
		Конкурент = (Конкурент ИЛИ Строка.ТипОтношений.Конкурент);
		ПрочиеОтношения = (ПрочиеОтношения ИЛИ Строка.ТипОтношений.ПрочиеОтношения);
		
		CRM_ТипыОтношений = CRM_ТипыОтношений  + "; " + Строка.ТипОтношений;
	КонецЦикла;
	Если СтрДлина(CRM_ТипыОтношений) > 0 Тогда
		CRM_ТипыОтношений = Сред(CRM_ТипыОтношений, 3);
	КонецЕсли;	
	Объект.CRM_ТипОтношенийПредставление = CRM_ТипыОтношений;
	Объект.Клиент = Клиент;
	Объект.Поставщик = Поставщик;
	Объект.Конкурент = Конкурент;
	Объект.ПрочиеОтношения = ПрочиеОтношения;
	
КонецПроцедуры

#КонецОбласти

#Область ПриКопировании

Процедура СправочникПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	#Область МаркетинговыеМероприятия
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.МаркетинговыеМероприятия") Тогда
		ТекПользователь		  = CRM_ОбщегоНазначенияСервер.ТекущийПользователь();
		Источник.Ответственный = ТекПользователь;
		Источник.CRM_Автор     = ТекПользователь;
		
		Для Каждого ТекСтрока Из Источник.CRM_СвоиУчастники Цикл
			
			ТекСтрока.ДатаНачала    = Неопределено;
			ТекСтрока.ДатаОкончания = Неопределено;
			
		КонецЦикла;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Проекты
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Проекты") Тогда
		Источник.Ответственный = CRM_ОбщегоНазначенияСервер.ТекущийПользователь();
		Источник.CRM_Подразделение = Источник.Ответственный.Подразделение;
		Источник.CRM_ТекущийЭтап = Неопределено;
		Источник.Комментарий = "";
		Источник.CRM_КомментарийHTML = "";
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Партнеры
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Партнеры") Тогда
		Если Не Источник.ЭтоГруппа Тогда
		
			Источник.ОсновнойМенеджер = CRM_ОбщегоНазначенияСервер.ТекущийПользователь();
			Источник.ДатаРегистрации  = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
			
		КонецЕсли;	
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ДокументПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	#Область ЭлектронноеПисьмоИсходящее
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
		CRM_ОбщегоНазначенияСервер.ЗаполнитьАвтораИОтветственного(Источник);
		Источник.СтатусПисьма           = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
		Источник.ДатаОтправления        = Неопределено;
		Источник.ИдентификаторСообщения = "";
	КонецЕсли;
	
	#КонецОбласти
	
	#Область КоммерческоеПредложениеКлиенту
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") Тогда
		// Заполним автора и ответственного.
		CRM_ОбщегоНазначенияСервер.ЗаполнитьАвтораИОтветственного(Источник);
		Источник.Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано;
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры

#КонецОбласти

#Область ПриЗаписи

Процедура СправочникПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	#Область КонтактныеЛицаПартнеров
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.КонтактныеЛицаПартнеров") Тогда
		ЗаписыватьИсторию = Не Источник.ДополнительныеСвойства.Свойство("НеЗаписыватьИсторию");
		Если Не Отказ И ЗаписыватьИсторию Тогда
			
			УровниДоступаКонтакта = Неопределено;
			Если Источник.ДополнительныеСвойства.Свойство("УровниДоступа") Тогда
				УровниДоступаКонтакта = Источник.ДополнительныеСвойства.УровниДоступа;
			КонецЕсли;
			
			CRM_КлиентыСервер.ЗаписатьИсториюРеквизитовПартнера(
				Источник.Ссылка,
				Новый Структура("КонтактноеЛицоПартнера"),
				?(Источник.ДополнительныеСвойства.Свойство("СтарыеЗначения"),
					 Источник.ДополнительныеСвойства.СтарыеЗначения,
					 Новый Соответствие),
				?(Источник.ДополнительныеСвойства.Свойство("ДатаЗаписиИстории"),
					 Источник.ДополнительныеСвойства.ДатаЗаписиИстории,
					 Неопределено),
				,
				(Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") И Источник.ДополнительныеСвойства.ЭтоНовый),
				УровниДоступаКонтакта);
			
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	#Область Партнеры
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Партнеры") Тогда
		
		ЗаписыватьИсторию = Не Источник.ДополнительныеСвойства.Свойство("НеЗаписыватьИсторию");
		Если Не Отказ И ЗаписыватьИсторию Тогда
			
			УровниДоступаПартнера = Неопределено;
			Если Источник.ДополнительныеСвойства.Свойство("УровниДоступа") Тогда
				УровниДоступаПартнера = Источник.ДополнительныеСвойства.УровниДоступа;
			КонецЕсли;
			
			CRM_КлиентыСервер.ЗаписатьИсториюРеквизитовПартнера(
				Источник.Ссылка,
				Новый Структура("Партнер"),
				?(Источник.ДополнительныеСвойства.Свойство("СтарыеЗначения"),
					 Источник.ДополнительныеСвойства.СтарыеЗначения,
					 Новый Соответствие),
				?(Источник.ДополнительныеСвойства.Свойство("ДатаЗаписиИстории"),
					 Источник.ДополнительныеСвойства.ДатаЗаписиИстории,
					 Неопределено),
				,
				(Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") И Источник.ДополнительныеСвойства.ЭтоНовый),
				УровниДоступаПартнера);
			
		КонецЕсли;
		
		Если Источник.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
			// Если с этим физ. лицом связаны контактные лица - нужно обновить в них информацию.
			СвязанныеКонтактныеЛица =
				РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ПолучитьКонтактныеЛица(Источник.Ссылка);
			Для Каждого СвязанноеКонтактноеЛицо Из СвязанныеКонтактныеЛица Цикл
				CRM_МетодыМодулейМенеджеровСправочников.КонтактныеЛицаПартнеровЗаполнитьПоФизЛицу(СвязанноеКонтактноеЛицо,
					 Источник.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
		Если Источник.ДополнительныеСвойства.Свойство("ИзмененСтатусРаботы") Тогда
			РегистрыСведений.CRM_СтатусыКлиентов.ЗаписатьСтатусКлиента(Источник.Ссылка, Источник.CRM_СтатусРаботы);
		КонецЕсли;

	КонецЕсли;
	#КонецОбласти
	
	#Область УчетныеЗаписиЭлектроннойПочты
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.УчетныеЗаписиЭлектроннойПочты") Тогда
		
		Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") И Источник.ДополнительныеСвойства.ЭтоНовый Тогда
			
			//ТекПользователь = ПользователиКлиентСервер.ТекущийПользователь();
			//
			//НаборРегистра = РегистрыСведений.CRM_УчетныеЗаписиЭлектроннойПочты.СоздатьНаборЗаписей();
			//НаборРегистра.Отбор.УчетнаяЗапись.Установить(Источник.Ссылка);
			//НаборРегистра.Прочитать();
			//
			//ТаблицаНабора = НаборРегистра.Выгрузить();
			//СтрокаТаблицыНабора = ТаблицаНабора.Найти(Источник.Ссылка, "УчетнаяЗапись");
			//
			//НаборРегистра.Очистить();
			//
			//СтрокаНабора = НаборРегистра.Добавить();
			//СтрокаНабора.УчетнаяЗапись	= Источник.Ссылка;
			//СтрокаНабора.Пользователь	= ТекПользователь;
			//СтрокаНабора.Администрирование	= Истина;
			//СтрокаНабора.Запись	= Истина;
			//СтрокаНабора.Основная = ?(СтрокаТаблицыНабора = Неопределено, Ложь, СтрокаТаблицыНабора.Основная);
			//
			//НаборРегистра.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Проекты
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Проекты")
		ИЛИ ТипЗнч(Источник) = Тип("СправочникОбъект.CRM_ШаблоныПроектов")
		ИЛИ ТипЗнч(Источник) = Тип("СправочникОбъект.CRM_ЭтапыПроектов")
		ИЛИ ТипЗнч(Источник) = Тип("СправочникОбъект.CRM_ШаблоныЭтаповПроектов") Тогда
		Если Не Отказ Тогда
			Если Источник.ПометкаУдаления И НЕ Источник.ДополнительныеСвойства.Свойство("УдалениеСвязанныхОбъектов") Тогда
				CRM_УправлениеПроектамиСервер.ПометитьНаУдалениеСвязанныеОбъекты(Источник.Ссылка);
			КонецЕсли;
			Если Источник.ДополнительныеСвойства.Свойство("ОтменитьЗадачиПроекта")
				И Источник.ДополнительныеСвойства.ОтменитьЗадачиПроекта Тогда
				CRM_УправлениеПроектамиСервер.ОтменитьЗадачиПроекта(Источник.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	#Область Диалоги
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.CRM_Диалоги") Тогда
		Если Источник.ДополнительныеСвойства.Свойство("БылоАдресованоНаРоль") Тогда
			Если ЗначениеЗаполнено(Источник.Ответственный) Тогда // теперь адресовано на Пользователя
				CRM_НапоминанияСервер.УдалитьНапоминанияОПредмете(Источник.Ссылка, Справочники.CRM_ВидыОповещений.ОповещатьОНовыхСообщенияхМессенджеров);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

Процедура ДокументПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ТипИсточника = ТипЗнч(Источник);
	
	#Область CRM_Интерес
	Если ТипИсточника = Тип("ДокументОбъект.CRM_Интерес") Тогда
		РегистрыСведений.CRM_СостоянияЛидов.ОбновитьПоСконвертированВОбъект(Источник.Ссылка);
		Если Источник.ДополнительныеСвойства.Свойство("НеОтражатьВИстории") Тогда
			Возврат;
		КонецЕсли;
		Если Не Отказ Тогда
			CRM_КлиентыСервер.ЗаписатьИсториюРеквизитовПартнера(Источник.Ссылка, Новый Структура("КонтактноеЛицоПартнера"), 
					?(Источник.ДополнительныеСвойства.Свойство("СтарыеЗначения"),
						 Источник.ДополнительныеСвойства.СтарыеЗначения,
						 Новый Соответствие),
					?(Источник.ДополнительныеСвойства.Свойство("ДатаЗаписиИстории"),
						 Источник.ДополнительныеСвойства.ДатаЗаписиИстории,
						 Неопределено), , 
					(Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") И Источник.ДополнительныеСвойства.ЭтоНовый) ИЛИ Источник.ДополнительныеСвойства.Свойство("ОбновитьИсторию"));
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	#Область КасанияКлиента
	Если ТипИсточника = Тип("ДокументОбъект.CRM_Взаимодействие")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ТелефонныйЗвонок")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.CRM_СообщениеМессенджера") Тогда
		
		CRM_КлиентыСервер.ПриЗаписиВзаимодействия(Источник);
	КонецЕсли;
	#КонецОбласти
	
	#Область ЭлектронныеПисьма
	Если ТипИсточника = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее")
		Или ТипИсточника = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
		
		Если Источник.ДополнительныеСвойства.Свойство("УстановленаПометкаУдаления") Тогда
			ПапкаПисьма = CRM_Взаимодействия.ОпределитьПапкуДляПисьма(Источник.Ссылка);
			CRM_Взаимодействия.УстановитьПапкуЭлектронногоПисьма(Источник.Ссылка, ПапкаПисьма);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипИсточника = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") Тогда
		Если Источник.ДополнительныеСвойства.Свойство("БылоАдресованоНаРоль") Тогда
			Если ЗначениеЗаполнено(Источник.Ответственный) И НЕ ЗначениеЗаполнено(Источник.CRM_РольОтветственного) Тогда // теперь адресовано на Пользователя
				CRM_НапоминанияСервер.УдалитьНапоминанияОПредмете(Источник.Ссылка, Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	#Область ТелефонныеЗвонки
	Если ТипИсточника = Тип("ДокументОбъект.ТелефонныйЗвонок") Тогда
		
		Если Источник.ДополнительныеСвойства.Свойство("CRM_КонтекстВызова") Тогда
			КонтекстВызова = ТипЗнч(Источник.ДополнительныеСвойства.CRM_КонтекстВызова);
			
			Если КонтекстВызова = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.Позвонить.Задача");
			ИначеЕсли КонтекстВызова = Тип("СправочникСсылка.Партнеры") Тогда
				CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.Позвонить.КарточкаКлиента");
			ИначеЕсли КонтекстВызова = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.Позвонить.КарточкаКонтактногоЛицаКлиента");
			ИначеЕсли КонтекстВызова = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
				CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.Позвонить.КарточкаПотенциальногоКлиента");
			ИначеЕсли КонтекстВызова = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
				CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.Позвонить.КарточкаФормыВзаимодействия");
			ИначеЕсли КонтекстВызова = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
				CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.Позвонить.ДокументТелефонныйЗвонок");
			ИначеЕсли КонтекстВызова = Тип("ДокументСсылка.CRM_Интерес") Тогда
				CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.Позвонить.ФормаИнтереса");
			ИначеЕсли Источник.ДополнительныеСвойства.CRM_КонтекстВызова = "АРМТелефония" Тогда
				CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.Позвонить.АРМТелефония");
			КонецЕсли;
			
		КонецЕсли;
		
		Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый")
			И Источник.ДополнительныеСвойства.ЭтоНовый = Истина Тогда
			
			ВерсияСофтФон = Константы.сфпИспользуемаяВерсияСофтФон.Получить();
			Если ВерсияСофтФон = Перечисления.сфпВерсииСофтФон.СофтФотПроф Тогда
				CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ИнтеграцияСТелефонией.ДокументТелефонныйЗвонокСоздание");
			ИначеЕсли ВерсияСофтФон = Перечисления.сфпВерсииСофтФон.СофтФотPROSTO Тогда
				CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ОблачныеАТС.ДокументТелефонныйЗвонокСоздание");
			КонецЕсли;
			
		КонецЕсли;
		
		// Если звонок произведен из документа "Телемаркетинг", нужно заполнить канал и источник первичного интереса.
		Если ТипЗнч(Источник.ВзаимодействиеОснование) = Тип("ДокументСсылка.CRM_Телемаркетинг")
			И ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
			
			сфпВладелец = Справочники.Партнеры.ПустаяСсылка();
			Если ЗначениеЗаполнено(Источник.АбонентКонтакт) Тогда
				ИмяМетаданных = Источник.АбонентКонтакт.Метаданные().Имя;
				Если ИмяМетаданных = "КонтактныеЛица" ИЛИ ИмяМетаданных = "КонтактныеЛицаПартнеров" Тогда
					сфпВладелец = Источник.АбонентКонтакт.Владелец;
				ИначеЕсли ИмяМетаданных = "Партнеры" Тогда
					сфпВладелец = Источник.АбонентКонтакт;
				КонецЕсли;
			КонецЕсли;
			
			КаналПервичногоИнтереса    = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.CRM_Телемаркетинг;
			ИсточникПервичногоИнтереса = Источник.ВзаимодействиеОснование;
			
			// Зафиксировать актуальный источник привлечения.
			НаборРегистра = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
			НаборРегистра.Отбор.Сделка.Установить(Источник.Ссылка);
			НаборРегистра.Прочитать();
			НаборРегистра.Очистить();
			
			Если ЗначениеЗаполнено(КаналПервичногоИнтереса) ИЛИ ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
				Запись                            = НаборРегистра.Добавить();
				Запись.Период                     = ?(ЗначениеЗаполнено(Источник.Дата), Источник.Дата,
					 CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
				Запись.Партнер                    = сфпВладелец;
				Запись.Сделка                     = Источник.Ссылка;
				Запись.ИсточникПервичногоИнтереса = ИсточникПервичногоИнтереса;
				Запись.КаналПервичногоИнтереса    = КаналПервичногоИнтереса;
			КонецЕсли;
			
			НаборРегистра.Записать();
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

Процедура РегистрыСведенийПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.CRM_ПапкиВзаимодействий") Тогда
		Таблица = Источник.Выгрузить();
		Для Каждого СтрТаблицы Из Таблица Цикл
			Если ТипЗнч(СтрТаблицы.Взаимодействие) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
				
				СинхронизироватьПапкиСПочтовымСервером = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
											СтрТаблицы.Взаимодействие.УчетнаяЗапись, "CRM_СинхронизироватьПапкиСПочтовымСервером");
				ОбработатьЛид = НЕ Источник.ДополнительныеСвойства.Свойство("ЭтоПапкаПоУмолчанию")
								Или (Источник.ДополнительныеСвойства.Свойство("ЭтоПапкаПоУмолчанию") И НЕ СинхронизироватьПапкиСПочтовымСервером);
				Если ОбработатьЛид Тогда
					CRM_Взаимодействия.ОбработатьЛидПоПапкеПисьма(СтрТаблицы.Взаимодействие, СтрТаблицы.ПапкаЭлектронногоПисьма);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПередЗаписью

Процедура ДокументыПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНовый = Источник.ЭтоНовый();
	Если ЭтоНовый Тогда
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
	КонецЕсли;
	
	ТипИсточника = ТипЗнч(Источник);
	
	#Область ЭлектронныеПисьма
	
	Если ТипИсточника = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее")
		Или ТипИсточника = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
		
		Источник.ТекстHTML = CRM_УправлениеЭлектроннойПочтой.УдалитьНекорректныеКартинкиИзТекстаHTML(Источник.ТекстHTML);
		Источник.Текст = CRM_УправлениеЭлектроннойПочтой.УдалитьНекорректныеКартинкиИзТекстаHTML(Источник.Текст);
		
		Если Источник.ДополнительныеСвойства.Свойство("НеОбрабатыватьКакНовое") Тогда
			Источник.CRM_СкрытьВАРМ = Истина;
		КонецЕсли;
		
		Если Источник.ПометкаУдаления И
			Не Источник.Ссылка.ПометкаУдаления Тогда
			Источник.ДополнительныеСвойства.Вставить("УстановленаПометкаУдаления", Истина);
			ТекСостояние = РегистрыСведений.CRM_СостоянияЛидов.ПолучитьТекущееСостояниеЛида(Источник.Ссылка);
			Если ТекСостояние = Неопределено 
				Или ТекСостояние.Состояние <> Справочники.CRM_СостоянияЛидов.Отклонен Тогда
				РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Источник.Ссылка,
					 Справочники.CRM_СостоянияЛидов.Отклонен, , Неопределено,
					 "");
			КонецЕсли;
			Источник.CRM_СкрытьВАРМ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипИсточника = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") Тогда
		Если НЕ ЭтоНовый
			И ЗначениеЗаполнено(Источник.Ссылка.CRM_РольОтветственного)
			И НЕ ЗначениеЗаполнено(Источник.Ссылка.Ответственный) Тогда
			Источник.ДополнительныеСвойства.Вставить("БылоАдресованоНаРоль");
		КонецЕсли;
	КонецЕсли;
	
	Если ТипИсточника = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
		
		Если ЗначениеЗаполнено(Источник.CRM_Предмет) Тогда
			CRM_Предмет	= Источник.CRM_Предмет;
		Иначе	
			CRM_Предмет	= Взаимодействия.ПолучитьЗначениеПредмета(Источник.Ссылка);
		КонецЕсли;
		Если CRM_Предмет = Источник.Ссылка Тогда
			CRM_Предмет = Неопределено;
		КонецЕсли;	
		РезультатЗаполнения	= ЗаполнитьОтправительКонтакт(Источник);
		
		Если Источник.ДополнительныеСвойства.Свойство("НаОснованииРассылки") Тогда
			Источник.CRM_СкрытьВАРМ = Истина;
			Если РезультатЗаполнения = 2 Тогда
				Источник.ДополнительныеСвойства.Вставить("ОтклонитьОбращение", Истина);
			КонецЕсли;
		Иначе
			
			Если ЗначениеЗаполнено(CRM_Предмет) Тогда
				Если (ТипЗнч(CRM_Предмет) = Тип("ДокументСсылка.CRM_Интерес")) И CRM_Предмет.Завершен Тогда
					Если РезультатЗаполнения > 0 Тогда
						Источник.CRM_СкрытьВАРМ = Истина;
					КонецЕсли;
				Иначе
					Источник.CRM_СкрытьВАРМ = Истина;
				КонецЕсли;
			ИначеЕсли РезультатЗаполнения > 0 Тогда
				Источник.CRM_СкрытьВАРМ = Истина;
			КонецЕсли;
			Если РезультатЗаполнения = 2 Тогда
				Источник.CRM_СкрытьВАРМ = Истина;
				Источник.ДополнительныеСвойства.Вставить("ОтклонитьОбращение", Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	#КонецОбласти

	#Область ТелефонныеЗвонки
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ТелефонныйЗвонок") Тогда
		
		Если ЗначениеЗаполнено(Источник.ВзаимодействиеОснование) Тогда
			CRM_Предмет	= Источник.ВзаимодействиеОснование;
		Иначе	
			CRM_Предмет	= Взаимодействия.ПолучитьЗначениеПредмета(Источник.Ссылка);
		КонецЕсли;
		Если CRM_Предмет = Источник.Ссылка Тогда
			CRM_Предмет = Неопределено;
		КонецЕсли;	
		Если ЗначениеЗаполнено(CRM_Предмет) Тогда
			Если Источник.Входящий Тогда
				Источник.CRM_СкрытьВАРМ	= Истина;
			Иначе	
				Если (ТипЗнч(CRM_Предмет) = Тип("ДокументСсылка.CRM_Интерес")) И CRM_Предмет.Завершен Тогда
					Если ЗначениеЗаполнено(Источник.АбонентКонтакт)
						 И НЕ (ТипЗнч(Источник.АбонентКонтакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты")) Тогда
						Источник.CRM_СкрытьВАРМ	= Истина;
					КонецЕсли;
				Иначе
					Источник.CRM_СкрытьВАРМ	= Истина;
				КонецЕсли;
			КонецЕсли;	
		ИначеЕсли НЕ Источник.Входящий Тогда
			Если ЗначениеЗаполнено(Источник.АбонентКонтакт)
				 И НЕ (ТипЗнч(Источник.АбонентКонтакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты")) Тогда
				Источник.CRM_СкрытьВАРМ	= Истина;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Источник.АбонентКонтакт) Тогда
			Если ТипЗнч(Источник.АбонентКонтакт) = Тип("СправочникСсылка.Пользователи") Тогда
				Источник.ДополнительныеСвойства.Вставить("ОтклонитьОбращение", Истина);
			ИначеЕсли ТипЗнч(Источник.АбонентКонтакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Источник.ДополнительныеСвойства.Вставить("ОтклонитьОбращение", Истина);
			КонецЕсли;	
		КонецЕсли;
		Если ЗначениеЗаполнено(Источник.АбонентКакСвязаться) Тогда
			Источник.сфпНецелевойЗвонок = сфпСофтФонПроСервер.ОпределитьНецелевойЗвонокПоНомеру(Источник.АбонентКакСвязаться);
		КонецЕсли;
		
		#Область СтатистикаДлительностиЗвонка
		
		МинимальнаяДлительность = Константы.сфпНеЗагружатьЗвонкиДлительностьюМенее.Получить();
		НоваяДлительность = Источник.сфпДлительностьЗвонка;
		
		ЗаписатьСтатистикуДлительности = Ложь;
		
		Если НоваяДлительность > 0 И НоваяДлительность >= МинимальнаяДлительность Тогда
			Если ЭтоНовый Тогда
				ЗаписатьСтатистикуДлительности = Истина;
			Иначе
				СохраненнаяДлительность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "сфпДлительностьЗвонка");
				Если СохраненнаяДлительность = 0 Или СохраненнаяДлительность < МинимальнаяДлительность Тогда
					ЗаписатьСтатистикуДлительности = Истина;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		
		Если ЗаписатьСтатистикуДлительности Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики(
				"CRM_Статистика.Взамодействия.ТелефонныйЗвонок.ДлительностьЗвонка", 
				НоваяДлительность);
		КонецЕсли;
		
		#КонецОбласти
		
	КонецЕсли;
		
	#КонецОбласти

	#Область СообщениеSMS
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.СообщениеSMS") Тогда
		Если Не ЗначениеЗаполнено(Источник.CRM_ПодразделениеЗаказчик) Тогда
			ЗначениеНастройки = Пользователи.ТекущийПользователь().Подразделение;
			Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
				Источник.CRM_ПодразделениеЗаказчик = ЗначениеНастройки;
			Иначе
				Источник.CRM_ПодразделениеЗаказчик = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределенноеПодразделение();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура СправочникПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ВестиИсториюРеквизитов = ПолучитьФункциональнуюОпцию("CRM_ВестиИсториюРеквизитовКлиентов");
	
	#Область Партнеры
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Партнеры") Тогда
		
		ЭтоНовый = Источник.ЭтоНовый();
		Если ЭтоНовый Тогда
			Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ИначеЕсли ВестиИсториюРеквизитов Тогда
			СтарыеЗначенияРеквизитовОбъекта =
				РегистрыСведений.CRM_ИсторияРеквизитовОбъектов.ПолучитьСтарыеЗначенияРеквизитовОбъекта(Источник.Ссылка);
			Источник.ДополнительныеСвойства.Вставить("СтарыеЗначения", СтарыеЗначенияРеквизитовОбъекта);
		КонецЕсли;
		
		Если НЕ Источник.ЭтоГруппа Тогда
			Если Источник.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
				Источник.CRM_ФизЛицо			= Истина;
				Если НЕ ЗначениеЗаполнено(Источник.НаименованиеПолное) Тогда
					Источник.НаименованиеПолное	= Источник.Наименование;
				КонецЕсли;
			Иначе
				// Очистим реквизиты физ. лица.
				Источник.CRM_ФизЛицо = Ложь;
				Источник.Пол = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
				Источник.ДатаРождения = '00010101';
				Источник.CRM_НапоминатьОДнеРождения = Ложь;
				Источник.CRM_Имя		  = "";
				Источник.CRM_Фамилия	  = "";
				Источник.CRM_Отчество  = "";
			КонецЕсли;
		КонецЕсли;
		Если ЭтоНовый И Не Источник.ЭтоГруппа И Не ЗначениеЗаполнено(Источник.CRM_СтатусРаботы) Тогда
			Источник.CRM_СтатусРаботы = Справочники.CRM_СтатусыРаботыСКлиентом.СтатусНовогоКлиента();
		КонецЕсли;
		
		Если Не Источник.ЭтоГруппа 
			И Источник.CRM_СтатусРаботы <> Источник.Ссылка.CRM_СтатусРаботы
			И Не Источник.ДополнительныеСвойства.Свойство("НеРегистрироватьИзменениеСтатуса") Тогда
			Источник.ДополнительныеСвойства.Вставить("ИзмененСтатусРаботы", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область УчетныеЗаписиЭлектроннойПочты
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.УчетныеЗаписиЭлектроннойПочты") Тогда
		Источник.Наименование = СокрЛП(Источник.Наименование);
		Источник.АдресЭлектроннойПочты = СокрЛП(Источник.АдресЭлектроннойПочты);
		Источник.ИмяПользователя = СокрЛП(Источник.ИмяПользователя);
		Источник.ПользовательSMTP = СокрЛП(Источник.ПользовательSMTP);
		Источник.СерверВходящейПочты = СокрЛП(Источник.СерверВходящейПочты);
		Источник.СерверИсходящейПочты = СокрЛП(Источник.СерверИсходящейПочты);
		
		ЭтоНовый = Источник.ЭтоНовый();
		Если ЭтоНовый Тогда
			Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		КонецЕсли;
		
		Если Источник.ПометкаУдаления И
			Не Источник.Ссылка.ПометкаУдаления Тогда
			МенеджерЗаписи = РегистрыСведений.CRM_ПотокиДоставкиПочты.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.УчетнаяЗапись = Источник.Ссылка;
			МенеджерЗаписи.НомерПотока = 0;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПапкиЭлектронныхПисем
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ПапкиЭлектронныхПисем") Тогда
		
		Если Источник.ПометкаУдаления И Не Источник.Владелец.ПометкаУдаления Тогда
			
			ЭтоПредопределенная = CRM_УправлениеЭлектроннойПочтой.ЭтоПредопределеннаяПапкаУчетнойЗаписи(Источник.Ссылка);
			Если ЭтоПредопределенная Тогда
				ТекстОшибки = НСтр("ru = 'Нельзя установить пометку удаления для предопределенной папки.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , , , Отказ);
			Иначе
				
				Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ПапкиВзаимодействий.Взаимодействие КАК Взаимодействие
				|ИЗ
				|	РегистрСведений.CRM_ПапкиВзаимодействий КАК ПапкиВзаимодействий
				|ГДЕ
				|	ПапкиВзаимодействий.ПапкаЭлектронногоПисьма = &Папка");
				Запрос.УстановитьПараметр("Папка", Источник.Ссылка);
				
				Результат = Запрос.Выполнить();
				Если Не Результат.Пустой() Тогда
					ТекстОшибки = НСтр("ru = 'Папка не пустая. Удаление недоступно.'");
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , , , Отказ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область КонтактныеЛицаПартнеров
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.КонтактныеЛицаПартнеров") Тогда
		
		ЭтоНовый = Источник.ЭтоНовый();
		Если ЭтоНовый Тогда
			Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ИначеЕсли ВестиИсториюРеквизитов Тогда
			СтарыеЗначенияРеквизитовОбъекта =
				РегистрыСведений.CRM_ИсторияРеквизитовОбъектов.ПолучитьСтарыеЗначенияРеквизитовОбъекта(Источник.Ссылка);
			Источник.ДополнительныеСвойства.Вставить("СтарыеЗначения", СтарыеЗначенияРеквизитовОбъекта);
		КонецЕсли;
		
		// Запись реквизита "ДатаРождения" на основе строки из ТЧ CRM_КлючевыеСобытия
		ВидСобытия = Справочники.CRM_ВидыКлючевыхСобытий.НайтиПоНаименованию(Нстр("ru='День рождения контактного лица'"),
			 Истина);
		Если НЕ (ВидСобытия = Справочники.CRM_ВидыКлючевыхСобытий.ПустаяСсылка()) Тогда
			НайтиСтроку = Источник.CRM_КлючевыеСобытия.НайтиСтроки(Новый Структура("ВидСобытия", ВидСобытия));
			Если Источник.ДатаРождения <> Источник.Ссылка.ДатаРождения Тогда
				Если НайтиСтроку.Количество() > 0 Тогда
					НовСтрока = НайтиСтроку[0];
				Иначе
					НовСтрока = Источник.CRM_КлючевыеСобытия.Добавить();
					НовСтрока.ВидСобытия = ВидСобытия;
				КонецЕсли;
				НовСтрока.ДатаСобытия = Источник.ДатаРождения;
			ИначеЕсли НайтиСтроку.Количество() > 0 Тогда		
				Источник.ДатаРождения = НайтиСтроку[0].ДатаСобытия; 
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СтруктураПредприятия
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.СтруктураПредприятия") Тогда
		
		Если НЕ ЗначениеЗаполнено(Источник.CRM_МаксимальноеКоличествоБалловВДень) Тогда
			Источник.CRM_МаксимальноеКоличествоБалловВДень = 48;
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Пользователи
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Пользователи") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Если Источник.Подразделение.Пустая() Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	СтруктураПредприятия.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|
			|УПОРЯДОЧИТЬ ПО
			|	СтруктураПредприятия.Код";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Источник.Подразделение = Выборка.Ссылка;	
			КонецЕсли;	
		КонецЕсли;
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			Если НЕ ЗначениеЗаполнено(Источник.Ссылка) И ЗначениеЗаполнено(Источник.ИдентификаторПользователяИБ) Тогда
				ПользовательИБ =
					ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Источник.ИдентификаторПользователяИБ);
				НастройкаНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
				СоставФорм = Новый СоставФормНачальнойСтраницы;
				НастройкаНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
				ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы", "",
					НастройкаНачальнойСтраницы, , ПользовательИБ.Имя);
				ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницыПередОчисткой", "",
					НастройкаНачальнойСтраницы, , ПользовательИБ.Имя);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Проекты
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Проекты") Тогда
		
		Если Источник.CRM_Статус = Перечисления.CRM_СтатусыПроектов.Отменен
			 И НЕ Источник.CRM_Статус = Источник.Ссылка.CRM_Статус Тогда
			Источник.ДополнительныеСвойства.Вставить("ОтменитьЗадачиПроекта", Истина);
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ВидыКонтактнойИнформации
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ВидыКонтактнойИнформации") Тогда
		
		Если Источник.Предопределенный Тогда
			Источник.CRM_ИмяПредопределенногоЭлемента = Источник.ИмяПредопределенныхДанных;
		Иначе
			Источник.CRM_ИмяПредопределенногоЭлемента = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область МакетыПечатныхФорм
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.МакетыПечатныхФорм") Тогда
		
		Если Источник.CRM_ПоставляемыйМакет И Источник.ПометкаУдаления Тогда
			ТекстОшибки = НСтр("ru = 'Нельзя установить пометку удаления для поставляемого макета.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , , , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область Организации
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Организации") Тогда
	
		CRM_БазоваяСервер.ПередЗаписьюОрганизации(Источник, Отказ);
		
	КонецЕсли;
	#КонецОбласти
	
	#Область Диалоги
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.CRM_Диалоги") Тогда
		Если НЕ Источник.ЭтоНовый()
			И ЗначениеЗаполнено(Источник.Ссылка.CRM_РольОтветственного)
			И НЕ ЗначениеЗаполнено(Источник.Ссылка.Ответственный) Тогда
			Источник.ДополнительныеСвойства.Вставить("БылоАдресованоНаРоль");
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

Процедура РегистрыСведенийПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	#Область КонтактыВзаимодействий
	
	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.КонтактыВзаимодействий") Тогда
		
		Таблица = Источник.Выгрузить();
		Таблица.Свернуть("Взаимодействие, Контакт");
		Источник.Загрузить(Таблица);
		
	КонецЕсли;
	
	#КонецОбласти
	
	//#Область ПредметыПапкиВзаимодействий
	//Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ПредметыПапкиВзаимодействий") Тогда
	//	Если Источник.Количество() = 0 Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	ТекущееСостояние = РегистрыСведений.ПредметыПапкиВзаимодействий.СоздатьМенеджерЗаписи();
	//	ТекущееСостояние.Взаимодействие = Источник[0].Взаимодействие;
	//	ТекущееСостояние.Прочитать();
	//	Если ЗначениеЗаполнено(ТекущееСостояние.ПапкаЭлектронногоПисьма)
		// И ТекущееСостояние.ПапкаЭлектронногоПисьма<>Источник[0].ПапкаЭлектронногоПисьма Тогда
	//		Источник.ДополнительныеСвойства.Вставить("ПапкаПередИзменением", ТекущееСостояние.ПапкаЭлектронногоПисьма);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	// #КонецОбласти
	
	#Область ПартнерыСегмента
	
	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ПартнерыСегмента") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПартнерыСегмента.Партнер КАК Партнер,
		|	ПартнерыСегмента.Сегмент КАК Сегмент
		|ИЗ
		|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		|ГДЕ
		|	ПартнерыСегмента.Партнер = &Партнер
		|	И ПартнерыСегмента.Сегмент = &Сегмент");
		
		Если ЗначениеЗаполнено(Источник.Отбор.Партнер.Значение) Тогда
			Партнер = Источник.Отбор.Партнер.Значение;
			Запрос.УстановитьПараметр("Партнер", Партнер);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПартнерыСегмента.Партнер = &Партнер", "ИСТИНА");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.Отбор.Сегмент.Значение) Тогда
			Сегмент = Источник.Отбор.Сегмент.Значение;
			Запрос.УстановитьПараметр("Сегмент", Сегмент);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПартнерыСегмента.Сегмент = &Сегмент", "ИСТИНА");
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		СтарыеЗначенияСегментов = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Источник.ДополнительныеСвойства.Вставить("СтарыеЗначенияСегментов", СтарыеЗначенияСегментов);
		
	КонецЕсли;
		
	#КонецОбласти
	
	#Область ABCXYZКлассификацияКлиентов
	
	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ABCXYZКлассификацияКлиентов") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ABCXYZКлассификацияКлиентовСрезПоследних.Период КАК Период,
		|	ABCXYZКлассификацияКлиентовСрезПоследних.Партнер КАК Партнер,
		|	ABCXYZКлассификацияКлиентовСрезПоследних.ТипКлассификации КАК ТипКлассификации,
		|	ABCXYZКлассификацияКлиентовСрезПоследних.ТипПараметраКлассификации КАК ТипПараметраКлассификации,
		|	ABCXYZКлассификацияКлиентовСрезПоследних.Класс КАК Класс
		|ИЗ
		|	РегистрСведений.ABCXYZКлассификацияКлиентов.СрезПоследних(
		|			&Период,
		|			Партнер = &Партнер
		|				И ТипКлассификации = &ТипКлассификации
		|				И ТипПараметраКлассификации = &ТипПараметраКлассификации) КАК ABCXYZКлассификацияКлиентовСрезПоследних");
		
		Если ЗначениеЗаполнено(Источник.Отбор.Период.Значение) Тогда
			Запрос.УстановитьПараметр("Период", Источник.Отбор.Период.Значение);
		Иначе
			Запрос.УстановитьПараметр("Период", Неопределено);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.Отбор.Партнер.Значение) Тогда
			Партнер = Источник.Отбор.Партнер.Значение;
			Запрос.УстановитьПараметр("Партнер", Партнер);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Партнер = &Партнер", "ИСТИНА");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.Отбор.ТипКлассификации.Значение) Тогда
			ТипКлассификации = Источник.Отбор.ТипКлассификации.Значение;
			Запрос.УстановитьПараметр("ТипКлассификации", ТипКлассификации);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТипКлассификации = &ТипКлассификации", "ИСТИНА");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.Отбор.ТипПараметраКлассификации.Значение) Тогда
			ТипПараметраКлассификации = Источник.Отбор.ТипПараметраКлассификации.Значение;
			Запрос.УстановитьПараметр("ТипПараметраКлассификации", ТипПараметраКлассификации);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТипПараметраКлассификации = &ТипПараметраКлассификации", "ИСТИНА");
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		СтарыеЗначенияКлассификации = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Источник.ДополнительныеСвойства.Вставить("СтарыеЗначенияКлассификации", СтарыеЗначенияКлассификации);
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
