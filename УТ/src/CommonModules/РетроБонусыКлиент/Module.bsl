// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  СсылкаНаОбъект - ДокументСсылка.УсловияРетроБонусовКлиентов, ДокументСсылка.НачислениеРетроБонусовКлиента -
//  ПараметрыВыполнения - См. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура РасчетРетроБонусовКлиентов(СсылкаНаОбъект, ПараметрыВыполнения) Экспорт
	
	ФормаДокумента = ПараметрыВыполнения.Форма;
	
	ПараметрыФормы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполнения.ОписаниеКоманды, "ПараметрыФормы"); // Структура
	ПараметрыФормы.Вставить("ПараметрКоманды", СсылкаНаОбъект);
	
	ИмяФормыОтчета = "Отчет.РасчетРетроБонусовКлиентов.Форма";
	ОткрытьФорму(ИмяФормыОтчета, ПараметрыФормы, ФормаДокумента, Истина);
	
КонецПроцедуры

// Параметры:
//  СсылкаНаОбъект - ДокументСсылка.УсловияРетроБонусовПоставщика, ДокументСсылка.НачислениеРетроБонусовПоставщика -
//  ПараметрыВыполнения - См. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура РасчетРетроБонусовПоставщиков(СсылкаНаОбъект, ПараметрыВыполнения) Экспорт
	
	ФормаДокумента = ПараметрыВыполнения.Форма;
	
	ПараметрыФормы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполнения.ОписаниеКоманды, "ПараметрыФормы"); // Структура
	ПараметрыФормы.Вставить("ПараметрКоманды", СсылкаНаОбъект);
	
	ИмяФормыОтчета = "Отчет.РасчетРетроБонусовПоставщиков.Форма";
	ОткрытьФорму(ИмяФормыОтчета, ПараметрыФормы, ФормаДокумента, Истина);
	
КонецПроцедуры

// Фиксирует актуальный состав сегментов товаров и партнеров для дальнейшего расчета
// 
// Параметры:
//  Документ - ДокументСсылка.УсловияРетроБонусовКлиентов, ДокументСсылка.УсловияРетроБонусовПоставщика -
//  Форма - ФормаКлиентскогоПриложения -
//  ОповещениеОЗавершении - ОписаниеОповещения -
//  ОповещениеОперацииВыполняются - ОписаниеОповещения, Неопределено -
//
Процедура ЗафиксироватьСоставСегментов(Документ, Форма, ОповещениеОЗавершении, ОповещениеОперацииВыполняются = Неопределено) Экспорт
	
	ДлительнаяОперация = РетроБонусыВызовСервера.ДлительнаяОперацияФиксацииСегментов(Документ);
	Если ДлительнаяОперация <> Неопределено Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
		ПараметрыОжидания.Заголовок = НСтр("ru = 'Фиксация состава сегментов'");
		ПараметрыОжидания.РежимОткрытияОкнаОжидания = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	ИначеЕсли ОповещениеОперацииВыполняются <> Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОповещениеОперацииВыполняются);
		
	КонецЕсли;
	
КонецПроцедуры

// Отменяет фиксацию составов сегментов товаров и партнеров
// 
// Параметры:
//  Документ - ДокументСсылка.УсловияРетроБонусовКлиентов, ДокументСсылка.УсловияРетроБонусовПоставщика -
//  Форма - ФормаКлиентскогоПриложения -
//  ОповещениеОЗавершении - ОписаниеОповещения -
//  ОповещениеОперацииВыполняются - ОписаниеОповещения, Неопределено -
//
Процедура ОтменитьФиксациюСоставаСегментов(Документ, Форма, ОповещениеОЗавершении, ОповещениеОперацииВыполняются = Неопределено) Экспорт
	
	ДлительнаяОперация = РетроБонусыВызовСервера.ДлительнаяОперацияОтменыФиксацииСегментов(Документ);
	Если ДлительнаяОперация <> Неопределено Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
		ПараметрыОжидания.Заголовок = НСтр("ru = 'Отмена фиксации состава сегментов'");
		ПараметрыОжидания.РежимОткрытияОкнаОжидания = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	ИначеЕсли ОповещениеОперацииВыполняются <> Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОповещениеОперацииВыполняются);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу рассчитанных ретро-бонусов клиентов по указанным условиям с детализацией до документа продажи.
// 
// Параметры:
//  ПараметрыРасчета - см. Отчеты.РасчетРетроБонусовКлиентов.ПараметрыРасчетаРетроБонусов
//  Форма - ФормаКлиентскогоПриложения
//  ОповещениеОЗавершении - ОписаниеОповещения
//
Процедура РетроБонусыЗаПериодПоДокументамПродажи(ПараметрыРасчета, Форма, ОповещениеОЗавершении) Экспорт
	
	ДлительнаяОперация = РетроБонусыВызовСервера.ДлительнаяОперацияПолученияРетроБонусовПоДокументамПродажи(
		ПараметрыРасчета,
		Форма.УникальныйИдентификатор);

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.Заголовок = НСтр("ru = 'Получение данных о рассчитанных ретро-бонусах'");
	ПараметрыОжидания.РежимОткрытияОкнаОжидания = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

// Возвращает таблицу рассчитанных ретро-бонусов поставщиков по указанным условиям с детализацией
// до документа поступления.
// 
// Параметры:
//  ПараметрыРасчета - см. Отчеты.РасчетРетроБонусовПоставщиков.ПараметрыРасчетаРетроБонусов
//  Форма - ФормаКлиентскогоПриложения
//  ОповещениеОЗавершении - ОписаниеОповещения
//
Процедура РетроБонусыЗаПериодПоДокументамПриобретения(ПараметрыРасчета, Форма, ОповещениеОЗавершении) Экспорт
	
	ДлительнаяОперация = РетроБонусыВызовСервера.ДлительнаяОперацияПолученияРетроБонусовПоДокументамПриобретения(
		ПараметрыРасчета,
		Форма.УникальныйИдентификатор);

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.Заголовок = НСтр("ru = 'Получение данных о рассчитанных ретро-бонусах'");
	ПараметрыОжидания.РежимОткрытияОкнаОжидания = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

// Формирует документы начисления ретро-бонусов по переданным данным
// 
// Параметры:
//  АдресДанныхДляФормирования - Строка
//  ПараметрыРасчета - см. Отчеты.РасчетРетроБонусовКлиентов.ПараметрыРасчетаРетроБонусов
//  ПараметрыФормирования - см. Обработки.ГрупповоеНачислениеРетроБонусовКлиентов.ПараметрыФормированияДокументов
//  Форма - ФормаКлиентскогоПриложения
//  ОповещениеОЗавершении - ОписаниеОповещения
//
Процедура СформироватьДокументыНачисления(АдресДанныхДляФормирования, ПараметрыРасчета, ПараметрыФормирования, Форма, ОповещениеОЗавершении) Экспорт
	
	ДлительнаяОперация = РетроБонусыВызовСервера.ДлительнаяОперацияФормированияДокументовНачисления(
		АдресДанныхДляФормирования,
		ПараметрыРасчета,
		ПараметрыФормирования,
		Форма.УникальныйИдентификатор);

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.Заголовок = НСтр("ru = 'Формирование документов начисления ретро-бонусов клиентов'");
	ПараметрыОжидания.РежимОткрытияОкнаОжидания = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

#Область РаботаСОтчетами

// Возникает после окончания формирования отчета.
//
// Параметры:
//   ФормаОтчета - ФормаКлиентскогоПриложения - Форма отчета.
//
Процедура ПослеФормированияОтчета(ФормаОтчета) Экспорт
	
	ДопСвойства = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
		ФормаОтчета, "Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства");
	ПерваяКомпоновкаПриОткрытии = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДопСвойства, "ПерваяКомпоновкаПриОткрытии", Ложь);
	
	Если ПерваяКомпоновкаПриОткрытии Тогда
		
		ДопСвойства.Вставить("ПерваяКомпоновкаПриОткрытии", Ложь);
		ДопСвойства.Вставить("ВариантМодифицирован", Ложь);
		ДопСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ФормаОтчета, "ПерваяКомпоновкаПриОткрытии", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ФормаОтчета, "ВариантМодифицирован", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ФормаОтчета, "ПользовательскиеНастройкиМодифицированы", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//   ЭтаФорма - См. ОбщаяФорма.ФормаОтчета
//   Элемент - ПолеФормы, ПолеТабличногоДокумента - табличный документ.
//   Расшифровка - Произвольный - значение расшифровки точки, серии или значения диаграммы.
//   СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//   МенюОтчетов - Массив Из Структура
//   МенюДействий - Массив Из Структура
//
Процедура ОбработкаРасшифровки(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка, МенюОтчетов, МенюДействий) Экспорт
	
	ПолноеИмяОтчета = ЭтаФорма.НастройкиОтчета.ПолноеИмя; // Строка
	КлючТекущегоВарианта = ЭтаФорма.КлючТекущегоВарианта; // Строка
	
	Если ПолноеИмяОтчета = "Отчет.РасчетРетроБонусовКлиентов" Тогда
		
		ОбработатьРасшифровкуРасчетРетроБонусовКлиентов(
			ЭтаФорма, МенюОтчетов, КлючТекущегоВарианта);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.РасчетРетроБонусовПоставщиков" Тогда
		
		ОбработатьРасшифровкуРасчетРетроБонусовПоставщиков(
			ЭтаФорма, МенюОтчетов, КлючТекущегоВарианта);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//   ЭтаФорма - См. ОбщаяФорма.ФормаОтчета
//   Элемент - ПолеФормы, ПолеТабличногоДокумента - табличный документ.
//   Расшифровка - Произвольный - значение расшифровки точки, серии или значения диаграммы.
//   СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//   МенюОтчетов - Массив Из Структура
//   МенюДействий - Массив Из Структура
//
Процедура ОбработкаДополнительнойРасшифровки(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка, МенюОтчетов, МенюДействий) Экспорт
	
	ПолноеИмяОтчета = ЭтаФорма.НастройкиОтчета.ПолноеИмя; // Строка
	
	Если ПолноеИмяОтчета = "Отчет.ВедомостьПоРетроБонусамПоставщиков" Тогда
		
		ПараметрыДействия = Новый Структура;
		ПараметрыДействия.Вставить("Имя", "ЗакрытьРасчетыПоБонусам");
		ПараметрыДействия.Вставить("Заголовок", НСтр("ru = 'Закрыть расчеты по бонусам'"));
		ПараметрыДействия.Вставить("ИмяОбщегоМодуля", "РетроБонусыКлиент");
		ПараметрыДействия.Вставить("ЭтаФорма", ЭтаФорма);
		
		ПоляРасшифровки = Новый Массив; // Массив из Строка
		ПоляРасшифровки.Добавить("ДокументУсловий");
		ПараметрыДействия.Вставить("ПоляРасшифровки", ПоляРасшифровки);
		
		НеобходимыеПараметры = Новый Структура;
		НеобходимыеПараметры.Вставить("ДокументУсловий");
		ПараметрыДействия.Вставить("НеобходимыеПараметры", НеобходимыеПараметры);
		
		МенюДействий.Добавить(ПараметрыДействия);
		
		ПараметрыДействия = Новый Структура;
		ПараметрыДействия.Вставить("Имя", "ВозобновитьРасчетыПоБонусам");
		ПараметрыДействия.Вставить("Заголовок", НСтр("ru = 'Возобновить расчеты по бонусам'"));
		ПараметрыДействия.Вставить("ИмяОбщегоМодуля", "РетроБонусыКлиент");
		ПараметрыДействия.Вставить("ЭтаФорма", ЭтаФорма);
		
		ПоляРасшифровки = Новый Массив; // Массив из Строка
		ПоляРасшифровки.Добавить("ДокументУсловий");
		ПараметрыДействия.Вставить("ПоляРасшифровки", ПоляРасшифровки);
		
		НеобходимыеПараметры = Новый Структура;
		НеобходимыеПараметры.Вставить("ДокументУсловий");
		ПараметрыДействия.Вставить("НеобходимыеПараметры", НеобходимыеПараметры);
		
		МенюДействий.Добавить(ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик специальных действий при расшифровке отчетов.
// Например, открытие специализированных форм с параметризацией.
//
// Параметры:
//	ПараметрыДействия - Структура:
//	  *Имя - Строка - Имя выполняемого действия
//	  *ЭтаФорма - ФормаКлиентскогоПриложения - в форме обязательный реквизит:
//	    **ОтчетТабличныйДокумент - ТабличныйДокумент
//	    **ОтчетДанныеРасшифровки - Строка
//	  *ПоляРасшифровки - Массив Из строка
//	ПараметрыРасшифровки - Структура - Параметры, передаваемые в форму.
//
Процедура ВыполнитьДействиеРасшифровки(ПараметрыДействия, ПараметрыРасшифровки) Экспорт
	
	ЭтаФорма = ПараметрыДействия.ЭтаФорма;
	ПоляРасшифровки = ПараметрыДействия.ПоляРасшифровки;
	ДействиеРасшифровки = ПараметрыДействия.Имя;
	
	Если ДействиеРасшифровки = "ЗакрытьРасчетыПоБонусам" Тогда
		
		ЗакрытьВозобновитьРасчетыПоБонусамИзФормыОтчета(ЭтаФорма, ПоляРасшифровки);
		
	ИначеЕсли ДействиеРасшифровки = "ВозобновитьРасчетыПоБонусам" Тогда
		
		ЗакрытьВозобновитьРасчетыПоБонусамИзФормыОтчета(ЭтаФорма, ПоляРасшифровки, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПакетнаяОбработкаСтрок

// Параметры:
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции: см. Документ.УсловияРетроБонусовКлиентов.Форма.ФормаДокумента.Элементы.ДоговорыСоглашения
//  			  - Структура:
//  				* Соглашение - СправочникСсылка.СоглашенияСКлиентами -
//  				* ДокументУсловий - ДокументСсылка.УсловияРетроБонусовПоставщика -
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ.СтруктураДействий
//  КешированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения 
// 
// Возвращаемое значение:
//  Булево
//
Функция НеобходимВызовСервераДляОбработкиСтрокиТЧ(ТекущаяСтрока, СтруктураДействий, КешированныеЗначения) Экспорт
	
	Перем ПараметрыДействия; // Структура
	Результат = Ложь;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакСоглашенияВСтрокеТЧ", ПараметрыДействия) Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Соглашение)
		   И КешированныеЗначения.ПризнакиСоглашений.Получить(ТекущаяСтрока.Соглашение) = Неопределено Тогда
			Результат = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакУказанияВалютыРетроБонусовПоставщиков", ПараметрыДействия) Тогда
		
		Для Каждого Поле Из ПараметрыДействия Цикл // КлючИЗначение
			
			ИмяПоля = Строка(Поле.Ключ);
			Результат = ЗначениеЗаполнено(ТекущаяСтрока[ИмяПоля])
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВалютуРетроБонусовПоставщиков", ПараметрыДействия) Тогда
		
		Для Каждого Поле Из ПараметрыДействия Цикл // КлючИЗначение
			
			ИмяПоля = Строка(Поле.Ключ);
			Результат = ЗначениеЗаполнено(ТекущаяСтрока[ИмяПоля])
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьТипРетроБонусовПоставщиков", ПараметрыДействия) Тогда
		
		Для Каждого Поле Из ПараметрыДействия Цикл // КлючИЗначение
			
			ИмяПоля = Строка(Поле.Ключ);
			Результат = ЗначениеЗаполнено(ТекущаяСтрока[ИмяПоля])
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// См. ПакетнаяОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ
Процедура ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ДополнительныеПараметрыЗаполнения = Неопределено) Экспорт
	
	ОбработкаСтрокЗаполнитьПризнакСоглашенияВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаСтрокЗаполнитьСвойстваРетроБонусовПоставщиков(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПакетнаяОбработкаСтрок

// Параметры:
//	ТекущаяСтрока - Структура:
//		* Соглашение - СправочникСсылка.СоглашенияСКлиентами
//		* ЭтоТиповоеСоглашение - Булево
//	СтруктураДействий - См. ОбработатьСтрокуТЧ.СтруктураДействий
//	КешированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ОбработкаСтрокЗаполнитьПризнакСоглашенияВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КешированныеЗначения)
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьПризнакСоглашенияВСтрокеТЧ") Тогда
		Возврат;
	КонецЕсли;
	
	ПризнакСоглашения = КешированныеЗначения.ПризнакиСоглашений.Получить(ТекущаяСтрока.Соглашение); // Булево
	
	Если ПризнакСоглашения <> Неопределено Тогда
		ТекущаяСтрока.ЭтоТиповоеСоглашение = ПризнакСоглашения;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//	ТекущаяСтрока - Структура:
//		* ДокументУсловий - ДокументСсылка.УсловияРетроБонусовПоставщика
//		* ВалютаОпределяетсяУсловием - Булево
//		* ВалютаБонуса - СправочникСсылка.Валюты
//		* ТипБонуса - ПеречислениеСсылка.ТипыРетроБонусовПоставщиков
//	СтруктураДействий - См. ОбработатьСтрокуТЧ.СтруктураДействий
//	КешированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ОбработкаСтрокЗаполнитьСвойстваРетроБонусовПоставщиков(ТекущаяСтрока, СтруктураДействий, КешированныеЗначения)
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакУказанияВалютыРетроБонусовПоставщиков") Тогда
		ТекущаяСтрока.ВалютаОпределяетсяУсловием = Ложь;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВалютуРетроБонусовПоставщиков") Тогда
		ТекущаяСтрока.ВалютаБонуса = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьТипРетроБонусовПоставщиков") Тогда
		ТекущаяСтрока.ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ДобавитьПоляРасшифровкиПоПартнеруКонтрагенту(ТипБонуса, ПоляРасшифровки)
	
	Если ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Продажи") Тогда
		
		ПоляРасшифровки.Добавить("КонтрагентПокупатель");
		
	ИначеЕсли ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Закупки") Тогда
		
		ПоляРасшифровки.Добавить("КонтрагентПоставщик");
		ПоляРасшифровки.Добавить("ПартнерПоставщик");
		
	Иначе
		
		ШаблонОшибки = НСтр("ru = 'Некорректный тип бонуса ""%1""'");
		ТипБонусаСтрокой = Строка(ТипБонуса);
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ТипБонусаСтрокой);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытьВозобновитьРасчетыПоБонусамИзФормыОтчета(ЭтаФорма, ПоляРасшифровки, ЗакрытьРасчеты = Истина)
	
	ОтчетТабличныйДокумент = ЭтаФорма.ОтчетТабличныйДокумент;
	АдресДанныхРасшифровки = ЭтаФорма.ОтчетДанныеРасшифровки;
	ОбластиСРасшифровками = РасшифровкиВыделеннойОбласти(ОтчетТабличныйДокумент);
	Результат = РетроБонусыВызовСервера.ЗакрытьВозобновитьРасчетыПоБонусамИзФормыОтчета(
		ОбластиСРасшифровками,
		АдресДанныхРасшифровки,
		ПоляРасшифровки,
		ЗакрытьРасчеты);
	
	РезультатАнализаОбластей = Результат.РезультатАнализаОбластей;
	РезультатИзмененияСтатуса = Результат.РезультатИзмененияСтатуса;
	
	ДокументыУсловийСАдресами = РезультатАнализаОбластей.ДокументыУсловийСАдресами;
	МассивИменОбластей = РезультатАнализаОбластей.МассивИменОбластей;
	МассивДокументовУсловий = РезультатАнализаОбластей.МассивДокументовУсловий;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭтаФорма", ЭтаФорма);
	ДополнительныеПараметры.Вставить("ТабличныйДокумент", ОтчетТабличныйДокумент);
	ДополнительныеПараметры.Вставить("МассивДокументовУсловий", МассивДокументовУсловий);
	ДополнительныеПараметры.Вставить("МассивИменОбластей", МассивИменОбластей);
	ДополнительныеПараметры.Вставить("ДокументыУсловийСАдресами", ДокументыУсловийСАдресами);
	ДополнительныеПараметры.Вставить("ЗакрытьРасчеты", ЗакрытьРасчеты);
	
	ОтразитьИзмененияВФормеОтчета(РезультатИзмененияСтатуса, ДополнительныеПараметры);
	
КонецПроцедуры

// Параметры:
//  Результат - Структура:
//   * ЕстьОшибки - Булево
//   * ИнформацияОбОшибке - Строка
//  ДополнительныеПараметры - Структура:
//   * ЭтаФорма - ФормаКлиентскогоПриложения:
//   ** КомментарийВШапке - Строка
//   * ТабличныйДокумент - ТабличныйДокумент
//   * МассивДокументовУсловий - Массив Из ДокументСсылка.УсловияРетроБонусовПоставщика
//   * МассивИменОбластей - Массив Из Строка
//   * ДокументыУсловийСАдресами - Соответствие Из КлючИЗначение:
//      ** Ключ - ДокументСсылка.УсловияРетроБонусовПоставщика
//      ** Значение - Строка 
//   * ЗакрытьРасчеты - Булево
//
Процедура ОтразитьИзмененияВФормеОтчета(Результат, ДополнительныеПараметры)
	
	ОчиститьСообщения();
	
	ЭтаФорма = ДополнительныеПараметры.ЭтаФорма;
	ТабличныйДокумент = ДополнительныеПараметры.ТабличныйДокумент;
	ЗакрытьРасчеты = ДополнительныеПараметры.ЗакрытьРасчеты;
	МассивДокументовУсловий = ДополнительныеПараметры.МассивДокументовУсловий;
	ДокументыУсловийСАдресами = ДополнительныеПараметры.ДокументыУсловийСАдресами;
	МассивИменОбластей = ДополнительныеПараметры.МассивИменОбластей;
	
	Если МассивДокументовУсловий.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'В выделенной области нет документов для изменения статуса расчета'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	Если ЗакрытьРасчеты Тогда
		
		Шаблон = НСтр("ru = '%1 (статус расчетов изменен на ""Расчеты закрыты"")'");
		
	Иначе
		
		Шаблон = НСтр("ru = '%1 (статус расчетов изменен на ""Расчеты возобновлены"")'");
		
	КонецЕсли;
	
	ЕстьОшибки = Результат.ЕстьОшибки;
	ИнформацияОбОшибке = Результат.ИнформацияОбОшибке;
	
	Если ЕстьОшибки Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ИнформацияОбОшибке);
		
	Иначе
		
		ЦветФона = ОбщегоНазначенияКлиент.ЦветСтиля("ЦветФонаЗавершеннойОперации");
		
		Для Каждого ИмяОбласти Из МассивИменОбластей Цикл
			
			ДокументУсловий = ДокументыУсловийСАдресами[ИмяОбласти];
			Область = ТабличныйДокумент.Область(ИмяОбласти);
			Область.ЦветФона =  ЦветФона;
			
			ДокументУсловийСтрокой = Строка(ДокументУсловий);
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ДокументУсловийСтрокой);
			Область.Текст = Текст;
			
		КонецЦикла;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, "КомментарийВШапке") Тогда
			
			ЭтаФорма.КомментарийВШапке = НСтр("ru = 'Изменились данные статусов расчетов. Необходимо повторно сформировать отчет'");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ОтчетТабличныйДокумент - ТабличныйДокумент - Отчет табличный документ
// 
// Возвращаемое значение:
//  Структура - Расшифровки выделенной области:
//    * МассивИдентификаторовРасшифровок - Массив из ИдентификаторРасшифровкиКомпоновкиДанных
//    * РасшифровкаОбласть - Соответствие из КлючИЗначение:
//      ** Ключ - ИдентификаторРасшифровкиКомпоновкиДанных
//      ** Значение - Строка - Имя области
//
Функция РасшифровкиВыделеннойОбласти(ОтчетТабличныйДокумент)
	
	РазделитьСтрока = "R";
	РазделительКолонка = "C";
	
	МассивИдентификаторовРасшифровок = Новый Массив; // Массив Из ИдентификаторРасшифровкиКомпоновкиДанных
	РасшифровкаОбласть = Новый Соответствие;
	ВыделенныеОбласти = ОтчетТабличныйДокумент.ВыделенныеОбласти;
	
	Для каждого ВыделеннаяОбласть Из ВыделенныеОбласти Цикл
		
		ИндексКолонкиНачало = ВыделеннаяОбласть.Лево;
		ИндексКолонкиКонец = ВыделеннаяОбласть.Право;
		ИндексСтрокиНачало = ВыделеннаяОбласть.Верх;
		ИндексСтрокиКонец = ВыделеннаяОбласть.Низ;
		
		Если ВыделенныеОбласти.Количество() = 1
		   И ИндексКолонкиКонец = 0
		   И ИндексСтрокиКонец = 0 Тогда
			
			ИндексКолонкиНачало = 1;
			ИндексКолонкиКонец = ОтчетТабличныйДокумент.ШиринаТаблицы;
			ИндексСтрокиНачало = 1;
			ИндексСтрокиКонец = ОтчетТабличныйДокумент.ВысотаТаблицы;
			
		КонецЕсли;
		
		Пока ИндексКолонкиНачало <= ИндексКолонкиКонец Цикл
			
			ИндексСтроки = ИндексСтрокиНачало;
			
			Пока ИндексСтроки <= ИндексСтрокиКонец Цикл
				
				ИмяОбластиЯчейки = 
					РазделитьСтрока
					+ Формат(ИндексСтроки, "ЧГ=")
					+ РазделительКолонка
					+ Формат(ИндексКолонкиНачало, "ЧГ=");
					
				ОбластьЯчейки = ОтчетТабличныйДокумент.Область(ИмяОбластиЯчейки);
				РасшифровкаЯчейки = ОбластьЯчейки.Расшифровка; // ИдентификаторРасшифровкиКомпоновкиДанных
				
				Если РасшифровкаЯчейки <> Неопределено Тогда
					
					РасшифровкаОбласть.Вставить(РасшифровкаЯчейки, ИмяОбластиЯчейки);
					МассивИдентификаторовРасшифровок.Добавить(РасшифровкаЯчейки);
					
				КонецЕсли;
				
				ИндексСтроки = ИндексСтроки + 1;
				
			КонецЦикла;	
			
			ИндексКолонкиНачало = ИндексКолонкиНачало + 1;
			
		КонецЦикла;	
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("РасшифровкаОбласть", РасшифровкаОбласть);
	Результат.Вставить("МассивИдентификаторовРасшифровок", МассивИдентификаторовРасшифровок);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//   ЭтаФорма - См. ОбщаяФорма.ФормаОтчета
//   МенюОтчетов - Массив Из Структура
//   КлючТекущегоВарианта - Строка
//
Процедура ОбработатьРасшифровкуРасчетРетроБонусовКлиентов(ЭтаФорма, МенюОтчетов, КлючТекущегоВарианта)
	
	Если СтрНайти(ВРег(КлючТекущегоВарианта), ВРег("Расшифровка")) > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтчетНастройки = ЭтаФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	КлючВариантаРасшифровкиПоНоменклатуре = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ОтчетНастройки.ДополнительныеСвойства, "КлючВариантаРасшифровкиПоНоменклатуре", "");
	КлючВариантаРасшифровкиПоДокументам = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ОтчетНастройки.ДополнительныеСвойства, "КлючВариантаРасшифровкиПоДокументам", "");
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Имя", КлючВариантаРасшифровкиПоНоменклатуре);
	ПараметрыОтчета.Вставить("Заголовок", НСтр("ru = 'Расшифровка по номенклатуре'"));
	ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.РасчетРетроБонусовКлиентов");
	
	ПоляРасшифровки = Новый Массив; // Массив из Строка
	ПоляРасшифровки.Добавить("Организация");
	ПоляРасшифровки.Добавить("Контрагент");
	ПоляРасшифровки.Добавить("Партнер");
	ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
	
	СписокПараметров = Новый Массив; // Массив из Строка
	СписокПараметров.Добавить("ДокументУсловийРетроБонусов");
	СписокПараметров.Добавить("Организация");
	СписокПараметров.Добавить("Контрагент");
	СписокПараметров.Добавить("Партнер");
	СписокПараметров.Добавить("ДатаНачала");
	СписокПараметров.Добавить("ДатаОкончания");
	СписокПараметров.Добавить("ДанныеОтчета");
	ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
	
	МенюОтчетов.Добавить(ПараметрыОтчета);
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Имя", КлючВариантаРасшифровкиПоДокументам);
	ПараметрыОтчета.Вставить("Заголовок", НСтр("ru = 'Расшифровка по документам'"));
	ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.РасчетРетроБонусовКлиентов");
	
	ПоляРасшифровки = Новый Массив; // Массив из Строка
	ПоляРасшифровки.Добавить("Организация");
	ПоляРасшифровки.Добавить("Контрагент");
	ПоляРасшифровки.Добавить("Партнер");
	ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
	
	СписокПараметров = Новый Массив; // Массив из Строка
	СписокПараметров.Добавить("ДокументУсловийРетроБонусов");
	СписокПараметров.Добавить("Организация");
	СписокПараметров.Добавить("Контрагент");
	СписокПараметров.Добавить("Партнер");
	СписокПараметров.Добавить("ДатаНачала");
	СписокПараметров.Добавить("ДатаОкончания");
	СписокПараметров.Добавить("ДанныеОтчета");
	ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
	
	МенюОтчетов.Добавить(ПараметрыОтчета);
	
КонецПроцедуры

// Параметры:
//   ЭтаФорма - См. ОбщаяФорма.ФормаОтчета
//   МенюОтчетов - Массив Из Структура
//   КлючТекущегоВарианта - Строка
//
Процедура ОбработатьРасшифровкуРасчетРетроБонусовПоставщиков(ЭтаФорма, МенюОтчетов, КлючТекущегоВарианта)
	
	Если СтрНайти(ВРег(КлючТекущегоВарианта), ВРег("Расшифровка")) > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтчетНастройки = ЭтаФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	КлючВариантаРасшифровкиПоНоменклатуре = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ОтчетНастройки.ДополнительныеСвойства, "КлючВариантаРасшифровкиПоНоменклатуре", "");
	КлючВариантаРасшифровкиПоДокументам = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ОтчетНастройки.ДополнительныеСвойства, "КлючВариантаРасшифровкиПоДокументам", "");
	ТипБонуса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ОтчетНастройки.ДополнительныеСвойства,
		"ТипБонуса",
		ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.ПустаяСсылка"));
	
	Если КлючВариантаРасшифровкиПоНоменклатуре <> "ПродажиРасшифровкаПоНоменклатуреСводно"
	   И КлючВариантаРасшифровкиПоНоменклатуре <> "ЗакупкиРасшифровкаПоНоменклатуре"
	   И ТипБонуса <> ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Остатки") Тогда
		
		ПараметрыОтчета = Новый Структура;
		ПараметрыОтчета.Вставить("Имя", КлючВариантаРасшифровкиПоНоменклатуре);
		ПараметрыОтчета.Вставить("Заголовок", НСтр("ru = 'Расшифровка по номенклатуре'"));
		ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.РасчетРетроБонусовПоставщиков");
		
		ПоляРасшифровки = Новый Массив; // Массив из Строка
		ПоляРасшифровки.Добавить("Организация");
		ДобавитьПоляРасшифровкиПоПартнеруКонтрагенту(ТипБонуса, ПоляРасшифровки);
		ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
		
		СписокПараметров = Новый Массив; // Массив из Строка
		СписокПараметров.Добавить("ДокументУсловийРетроБонусов");
		СписокПараметров.Добавить("Организация");
		ДобавитьПоляРасшифровкиПоПартнеруКонтрагенту(ТипБонуса, СписокПараметров);
		СписокПараметров.Добавить("ДатаНачала");
		СписокПараметров.Добавить("ДатаОкончания");
		СписокПараметров.Добавить("ДанныеОтчета");
		ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
		
		МенюОтчетов.Добавить(ПараметрыОтчета);
		
	КонецЕсли;
	
	Если ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Закупки") Тогда
		
		ПараметрыОтчета = Новый Структура;
		ПараметрыОтчета.Вставить("Имя", КлючВариантаРасшифровкиПоДокументам);
		ПараметрыОтчета.Вставить("Заголовок", НСтр("ru = 'Расшифровка по документам'"));
		ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.РасчетРетроБонусовПоставщиков");
		
		ПоляРасшифровки = Новый Массив; // Массив из Строка
		ПоляРасшифровки.Добавить("Организация");
		ПоляРасшифровки.Добавить("Валюта");
		ПоляРасшифровки.Добавить("ПериодРасчета");
		ДобавитьПоляРасшифровкиПоПартнеруКонтрагенту(ТипБонуса, ПоляРасшифровки);
		ПоляРасшифровки.Добавить("Номенклатура");
		ПоляРасшифровки.Добавить("Характеристика");
		ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
		
		СписокПараметров = Новый Массив; // Массив из Строка
		СписокПараметров.Добавить("ДокументУсловийРетроБонусов");
		СписокПараметров.Добавить("Организация");
		СписокПараметров.Добавить("Валюта");
		СписокПараметров.Добавить("ПериодРасчета");
		ДобавитьПоляРасшифровкиПоПартнеруКонтрагенту(ТипБонуса, СписокПараметров);
		СписокПараметров.Добавить("ДатаНачала");
		СписокПараметров.Добавить("ДатаОкончания");
		СписокПараметров.Добавить("ДанныеОтчета");
		ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
		
		МенюОтчетов.Добавить(ПараметрыОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти