#Область ПрограммныйИнтерфейс

// Записывает операцию бизнес статистики.
//
// Параметры:
//  ИмяОперации	 - Строка	 - имя операции статистики, в случае отсутствия создается новое.
//  Значение	 - Число	 - количественное значение операции статистики.
//
Процедура ЗаписатьОперациюБизнесСтатистики(ИмяОперации, Значение = 1) Экспорт
	
	Если Не ЦентрМониторинга.ЗаписыватьОперацииБизнесСтатистики() Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗаписи = 8;
	ДатаНачала = ТекущаяУниверсальнаяДата();
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Замер = Новый Структура("ПериодЗаписи, ТипЗаписи, Ключ, ОперацияСтатистики, Значение, Замещать");
	Замер.ПериодЗаписи = ДатаНачала;
	Замер.ТипЗаписи = ТипЗаписи;
	Замер.ОперацияСтатистики = ИмяОперации;
	Замер.Значение = Значение;
	Замер.Замещать = Истина;
	Замер.Ключ = КлючДанныхЗамера(ИмяОперации, ТекущийПользователь);
	
	ЗамерыТипа = Новый Соответствие;
	
	УникальныйКлюч = Строка(Новый УникальныйИдентификатор);
	ЗамерыТипа.Вставить(УникальныйКлюч, Замер);
	
	Замеры = Новый Соответствие;
	Замеры.Вставить(ТипЗаписи, ЗамерыТипа);
	
	Параметры = Новый Соответствие;
	Параметры.Вставить("Замеры", Замеры);
	
	ЗаписатьДанныеСКлиента(Параметры);
	
КонецПроцедуры

// Дополняет параметры подключения к серверу статистики.
//
// Параметры:
//  ПараметрыКонстанты	 - Структура - перечень параметров подключения
// 
// Возвращаемое значение:
//  Структура - дополненный перечень параметров подключения.
//
Процедура ПриПолученииПараметровПоУмолчанию(ПараметрыКонстанты) Экспорт
	
	ПараметрыКонстанты.Вставить("Сервер", "stat.rarus.ru");
	ПараметрыКонстанты.Вставить("АдресРесурса", "RarusQMC/hs/PultQMC/v1/packet/");
	ПараметрыКонстанты.Вставить("АдресРесурсаДляДампов", "RarusQMC/hs/PultQMC/DumpsInfo/");
	ПараметрыКонстанты.Вставить("Порт", 80);
	ПараметрыКонстанты.Вставить("ЗащищенноеСоединение", Ложь);
	
КонецПроцедуры

// Процедура-обработчик события, возникающего при формировании структуры JSON для отправки.
//
// Параметры:
//  JSONСтруктура				 - Стурктура	 - JSON-структура.
//  Параметры					 - Структура	 - Параметры.
//  ПараметрыЦентраМониторинга	 - Структура	 - Параметры центра мониторинга.
//
Процедура ПриФормированииJSONДляОтправки(JSONСтруктура, Параметры, ПараметрыЦентраМониторинга) Экспорт
	
	Если Не ПараметрыЦентраМониторинга.РегистрироватьБизнесСтатистику Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачала = Параметры.ДатаНачала;
	ДатаОкончания = Параметры.ДатаОкончания;
	
	БизнесСтатистика = JSONСтруктура["business"];
	
	КолонкиИндекса = Новый Соответствие;
	КолонкиИндекса.Вставить("ОперацияСтатистики", Новый Соответствие);
	КолонкиИндекса.Вставить("КлючАналитики", Новый Соответствие);
	
	ДанныеСекции = ПолучитьСгруппированныеЗамеры();
	ИмяСекции = "OperationStatisticsClientGrouped";
	
	Секция = СформироватьJSONСтруктуруТаблицаЗначений(
		ИмяСекции, ДанныеСекции, ДатаНачала, ДатаОкончания, , КолонкиИндекса);
	БизнесСтатистика.Вставить(ИмяСекции, Секция[ИмяСекции]);
	
	КолонкиИндекса = Новый Соответствие;
	КолонкиИндекса.Вставить("ОперацияСтатистики", Новый Соответствие);
	КолонкиИндекса.Вставить("КлючАналитики", Новый Соответствие);
	
	ДанныеСекции = ПолучитьУникальныеЗамеры();
	ИмяСекции = "OperationStatisticsClientUnique";
	
	Секция = СформироватьJSONСтруктуруТаблицаЗначений(
		ИмяСекции, ДанныеСекции, ДатаНачала, ДатаОкончания, , КолонкиИндекса);
	БизнесСтатистика.Вставить(ИмяСекции, Секция[ИмяСекции]);
	
КонецПроцедуры

// Процедура выполняет запись данных с клиента.
//
// Параметры:
//  Параметры	 - Структура	 - Параметры.
//
Процедура ЗаписатьДанныеСКлиента(Параметры) Экспорт
	
	ТекДата = ТекущаяУниверсальнаяДата();
	
	Для Каждого ЗамерыТипа Из Параметры["Замеры"] Цикл
		
		ТипЗаписи = ЗамерыТипа.Ключ;
		
		Если ТипЗаписи = 0 Тогда
			РегистрыСведений.БуферОперацийСтатистики.ЗаписатьОперацииБизнесСтатистики(ЗамерыТипа.Значение);
		Иначе
			Для Каждого ТекЗамер Из ЗамерыТипа.Значение Цикл
				
				ИмяОперации = ТекЗамер.Значение.ОперацияСтатистики;
				Ключ = ТекЗамер.Значение.Ключ;
				Значение = ТекЗамер.Значение.Значение;
				Замещать = ТекЗамер.Значение.Замещать;
				
				Если ТипЗаписи = 1 Тогда
					ПериодЗаписи = НачалоЧаса(ТекДата);
				ИначеЕсли ТипЗаписи = 2 Тогда
					ПериодЗаписи = НачалоДня(ТекДата);
				ИначеЕсли ТипЗаписи = 8 Или ТипЗаписи = 9 Тогда
					ПериодЗаписи = ТекЗамер.Значение.ПериодЗаписи;
				КонецЕсли;
				
				ОперацияСтатистики = ЦентрМониторингаПовтИсп.ПолучитьСсылкуОперацииСтатистики(ИмяОперации);
				
				РегистрыСведений.ЗамерыСтатистики.ЗаписатьОперациюБизнесСтатистики(
					ПериодЗаписи, ТипЗаписи, Ключ, ОперацияСтатистики, Значение, Замещать);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет необходимые параметры работы клиента при запуске.
//
// Параметры:
//	Параметры - Структура - заполняемые параметры;
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	Идентификатор = СокращенныйИдентификаторПользователя(ТекущийПользователь);
	Параметры.Вставить("ИдентификаторПользователя", Идентификатор);
	
	ХешОбобщеннойРоли = ХешСуммаОбобщеннойРоли();
	Параметры.Вставить("ХешОбобщеннойРоли", ХешОбобщеннойРоли);
	
КонецПроцедуры

// Процедура изменяет свойства "ИдентификаторИнформационнойБазы" и "ИдентификаторИнформационнойБазыПостоянный"
// в константе "ПараметрыЦентраМониторинга".
//
Процедура ПараметрыЦентраМониторингаИзменитьИдентификаторИнформационнойБазы() Экспорт
	
	Если ЦентрМониторингаСлужебный.РазделениеПоОбластямДанныхВключено() Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЦентраМониторинга = ЦентрМониторингаСлужебный.ПолучитьПараметрыЦентраМониторинга();
	
	НовыйИдентификаторИБ = Новый УникальныйИдентификатор();
	ПараметрыЦентраМониторинга.ИдентификаторИнформационнойБазы = НовыйИдентификаторИБ;
	ПараметрыЦентраМониторинга.ИдентификаторИнформационнойБазыПостоянный = НовыйИдентификаторИБ;
	
	ЦентрМониторингаСлужебный.УстановитьПараметрыЦентраМониторингаВнешнийВызов(ПараметрыЦентраМониторинга);
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция СформироватьJSONСтруктуруТаблицаЗначений(ИмяСекции, Данные, ДатаНачала, ДатаОкончания, ДопПараметры, КолонкиИндекса)
	JSONСтруктура = Новый Соответствие;
	
	Секция = Новый Структура;
	
	
	Если ДатаНачала <> Неопределено Тогда
		Секция.Вставить("date_start", ДатаНачала);
	КонецЕсли;
	
	Если ДатаОкончания <> Неопределено Тогда
		Секция.Вставить("date_end", ДатаОкончания);
	КонецЕсли;
	
	Если ДопПараметры <> Неопределено Тогда
		Для Каждого Параметр Из ДопПараметры Цикл
			Секция.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
	КонецЕсли;
			
	Строки = Новый Массив;
	// Предназначена для хранения структуры данных.
	СтруктурыКоллекций = Новый Структура;
	// Предназначено для хранения коллекций данных в виде ключевое поле - реквизиты со значениями.
	СоответствияКоллекций = Новый Соответствие; 
	// Список исключаемых из выгрузки колонок. Их данные идут в СоответствияКоллекций.
	ИсключаемыеКолонки = Новый Соответствие;
	Если КолонкиИндекса <> Неопределено Тогда
		ИндексыЗначений = Новый Соответствие;
		Для Каждого ТекКолонка Из КолонкиИндекса Цикл
			ИндексыЗначений.Вставить(ТекКолонка.Ключ, Новый Соответствие);
			Если ТекКолонка.Значение.Количество() Тогда
				СоответствияКоллекций.Вставить(ТекКолонка.Ключ, Новый Соответствие);
				СтруктураОбъекта = Новый Соответствие;
				Для Каждого Запись Из ТекКолонка.Значение Цикл
					СтруктураОбъекта.Вставить(Запись.Ключ);
					ИсключаемыеКолонки.Вставить(Запись.Ключ, Истина);
				КонецЦикла;
				СтруктурыКоллекций.Вставить(ТекКолонка.Ключ, СтруктураОбъекта);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Колонки = Новый Массив;
	Для Каждого ТекКолонка Из Данные.Колонки Цикл
		Если ИсключаемыеКолонки[ТекКолонка.Имя] = Истина Тогда
			Продолжить;
		КонецЕсли;
		Колонки.Добавить(ТекКолонка.Имя);
	КонецЦикла;
	Секция.Вставить("columns", Колонки);
	
	Для Каждого Выборка Из Данные Цикл
		Строка = Новый Массив;
		Для Каждого ТекКолонка Из Колонки Цикл
			ЗначениеДляДобавления = Выборка[ТекКолонка];
			Если КолонкиИндекса <> Неопределено И КолонкиИндекса[ТекКолонка] <> Неопределено Тогда
				Если КолонкиИндекса[ТекКолонка][ЗначениеДляДобавления] = Неопределено Тогда
					ИндексЗначения = КолонкиИндекса[ТекКолонка].Количество() + 1;
					КолонкиИндекса[ТекКолонка].Вставить(ЗначениеДляДобавления, ИндексЗначения);
					ИндексыЗначений[ТекКолонка].Вставить(Формат(ИндексЗначения, "ЧГ=0"), ЗначениеДляДобавления);
				КонецЕсли;
				
				ЗначениеДляДобавления = КолонкиИндекса[ТекКолонка][ЗначениеДляДобавления];
			КонецЕсли;
			
			Если СтруктурыКоллекций.Свойство(ТекКолонка) 
				И СоответствияКоллекций[ТекКолонка][Выборка[ТекКолонка]] = Неопределено Тогда
				СоответствиеОбъекта = Новый Соответствие;
				Для Каждого Запись Из СтруктурыКоллекций[ТекКолонка] Цикл
					СоответствиеОбъекта.Вставить(Запись.Ключ, Выборка[Запись.Ключ]);
				КонецЦикла;
				СоответствияКоллекций[ТекКолонка].Вставить(Выборка[ТекКолонка], СоответствиеОбъекта);
			КонецЕсли;
			
			Строка.Добавить(ЗначениеДляДобавления);
		КонецЦикла;
		Строки.Добавить(Строка);
	КонецЦикла;
	
	Для Каждого Запись Из СоответствияКоллекций Цикл
		Секция.Вставить(Запись.Ключ, Запись.Значение);
	КонецЦикла;
	Секция.Вставить("columnsValueIndex", ИндексыЗначений);
	Секция.Вставить("rows", Строки);		
	
	JSONСтруктура.Вставить(ИмяСекции, Секция);
	
	Возврат JSONСтруктура;
КонецФункции

Функция ПолучитьСгруппированныеЗамеры()
	
	ТипЗаписи = 8;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОперацииСтатистики.Наименование КАК ОперацияСтатистики,
	|	НАЧАЛОПЕРИОДА(ЗамерыОперацииСтатистики.ПериодЗаписи, ЧАС) КАК Период,
	|	ЗамерыОперацииСтатистики.Ключ КАК КлючАналитики,
	|	СУММА(1) КАК КоличествоЗначений,
	|	СУММА(ЗамерыОперацииСтатистики.ЗначениеОперации) КАК СуммаЗначений
	|ИЗ
	|	РегистрСведений.ЗамерыСтатистики КАК ЗамерыОперацииСтатистики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииСтатистики КАК ОперацииСтатистики
	|		ПО ЗамерыОперацииСтатистики.ОперацияСтатистики = ОперацииСтатистики.ИдентификаторОперации
	|ГДЕ
	|	ЗамерыОперацииСтатистики.ТипЗаписи = &ТипЗаписи
	|
	|СГРУППИРОВАТЬ ПО
	|	ОперацииСтатистики.Наименование,
	|	НАЧАЛОПЕРИОДА(ЗамерыОперацииСтатистики.ПериодЗаписи, ЧАС),
	|	ЗамерыОперацииСтатистики.Ключ";
	
	Запрос.УстановитьПараметр("ТипЗаписи", ТипЗаписи);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьУникальныеЗамеры()
	
	ТипЗаписи = 9;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОперацииСтатистики.Наименование КАК ОперацияСтатистики,
	|	ЗамерыОперацииСтатистики.ПериодЗаписи КАК Период,
	|	ЗамерыОперацииСтатистики.Ключ КАК КлючАналитики,
	|	1 КАК КоличествоЗначений,
	|	ЗамерыОперацииСтатистики.ЗначениеОперации КАК СуммаЗначений
	|ИЗ
	|	РегистрСведений.ЗамерыСтатистики КАК ЗамерыОперацииСтатистики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииСтатистики КАК ОперацииСтатистики
	|		ПО ЗамерыОперацииСтатистики.ОперацияСтатистики = ОперацииСтатистики.ИдентификаторОперации
	|ГДЕ
	|	ЗамерыОперацииСтатистики.ТипЗаписи = &ТипЗаписи";
	
	Запрос.УстановитьПараметр("ТипЗаписи", ТипЗаписи);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ХешСуммаОбобщеннойРоли()
	
	Если Пользователи.ЭтоСеансВнешнегоПользователя() Тогда
		Возврат ОбщегоНазначения.КонтрольнаяСуммаСтрокой("ПрочийПользователь");
	КонецЕсли;
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	Если Пользователи.ЭтоПолноправныйПользователь(Пользователь, Истина, Ложь) Тогда
		Возврат ОбщегоНазначения.КонтрольнаяСуммаСтрокой("Администратор");
	КонецЕсли;
	
	ИспользоватьCRM = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователь, "ИспользоватьCRM");
	
	Если Не (CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Или ИспользоватьCRM) Тогда
		Возврат ОбщегоНазначения.КонтрольнаяСуммаСтрокой("НеПользовательCRM");
	КонецЕсли;
	
	Если ПравоДоступа("Использование", Метаданные.Отчеты.CRM_АнализКоммерческихПредложений) Тогда
		Возврат ОбщегоНазначения.КонтрольнаяСуммаСтрокой("РуководительCRM");
	КонецЕсли;
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.CRM_Телемаркетинг) Тогда
		Возврат ОбщегоНазначения.КонтрольнаяСуммаСтрокой("МаркетологCRM");
	КонецЕсли;
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.CRM_Интерес) Тогда
		Возврат ОбщегоНазначения.КонтрольнаяСуммаСтрокой("МенеджерПоПродажамCRM");
	КонецЕсли;
	
	Возврат ОбщегоНазначения.КонтрольнаяСуммаСтрокой("ПрочийПользователь");
	
КонецФункции

Функция СокращенныйИдентификаторПользователя(Пользователь)
	
	Возврат СтрЗаменить(Строка(Пользователь.ИдентификаторПользователяИБ), "-", "");
	
КонецФункции

Функция КлючДанныхЗамера(ИмяОперации, Пользователь)
	
	// Макисмальная длина строкового ключа данных - 100 символов,
	// как в измерении "Ключ" регистра сведений "ЗамерыСтатистики".
	// Формат ключа: <ПрефиксВидаКлюча> + <ДанныеКлюча>.
	// Длина ПрефиксВидаКлюча - 1 символ, ДанныеКлюча - до 99 символов.
	
	// ПрефиксВидаКлюча = "0": данные ключа содержат до трех строк фиксированной длины 32 символа -
	// MD5 хешей или уникальных идентификаторов с удаленными дефисами.
	// Каждая из этих строк предваряется односимвольным префиксом, указывающими на тип передаваемых в строке данных.
	// Формат данных ключа: <ПрефиксТипа1> + <Строка1> [ + ПрефиксТипа2> + <Строка2> [ + <ПрефиксТипа3> + <Строка3>]]
	ПрефиксВидаКлюча = "0";
	
	// ПрефиксТипаДанных = "0": передается сокращенный идентификатор пользователя.
	ПрефиксТипаДанных0 = "";
	Идентификатор = "";
	ИменаОпераций = CRM_ЦентрМониторингаКлиентСервер.ИменаОперацийСАналитикойПоРолиИПользователю();
	Если ИменаОпераций.Найти(ИмяОперации) <> Неопределено Тогда
		ПрефиксТипаДанных0 = "0";
		Идентификатор = СокращенныйИдентификаторПользователя(Пользователь);
	КонецЕсли;
	
	// ПрефиксТипаДанных = "1": передается хеш обобщенной роли пользователя.
	ПрефиксТипаДанных1 = "1";
	ХешОбобщеннойРоли = ХешСуммаОбобщеннойРоли();
	
	Возврат ПрефиксВидаКлюча + ПрефиксТипаДанных0 + Идентификатор + ПрефиксТипаДанных1 + ХешОбобщеннойРоли;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции