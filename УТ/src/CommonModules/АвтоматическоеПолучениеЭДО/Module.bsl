// @strict-types


#Область СлужебныйПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки
//
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Константы.ИспользоватьАвтоматическоеПолучениеИзСервисаЭДО);
	Типы.Добавить(Метаданные.Константы.КлючДоступаКСервисуЭДО);
	Типы.Добавить(Метаданные.РегистрыСведений.ИспользованиеКлючаДоступаКСервисуЭДО);
	
КонецПроцедуры

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
// 
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	НоваяСтрока = Настройки.Добавить();
	НоваяСтрока.РегламентноеЗадание = МетаданныеРегламентногоЗадания();
	НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьОбменЭД;
	НоваяСтрока.Параметризуется = Истина;
	НоваяСтрока.РаботаетСВнешнимиРесурсами = Истина;
	НоваяСтрока.ДоступноВМоделиСервиса = Истина;
	НоваяСтрока.ВключатьПриВключенииФункциональнойОпции = Ложь;
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(МетаданныеРегламентногоЗадания().ИмяМетода);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов 
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ШаблоныЗаданий.Добавить(АвтоматическоеПолучениеЭДОКлиентСервер.ИмяРегламентногоЗадания());
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриПериодическомПолученииДанныхКлиентаНаСервере
//
Процедура ПриПериодическомПолученииДанныхКлиентаНаСервере(Параметры, Результаты) Экспорт
	
	ПараметрыОтправки = Параметры[АвтоматическоеПолучениеЭДОКлиентСервер.КлючПараметраПериодическойОтправкиДанных()]; // См. АвтоматическоеПолучениеЭДОКлиент.НовыеПараметрыПериодическойОтправкиДанных
	Если ПараметрыОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = НовыйРезультатПериодическойОтправкиДанных();
	Результаты.Вставить(АвтоматическоеПолучениеЭДОКлиентСервер.КлючРезультатаПериодическойОтправкиДанных(), Результат);
	Результат.Включено = ?(ПараметрыОтправки.Включено = Неопределено,
		ЕстьУчетныеЗаписиДляПолучения(), ПараметрыОтправки.Включено);
	
	Если Не Результат.Включено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТребуетсяПолучениеЧерезИнтервал() Тогда
		Если Не ПараметрыОтправки.ИспользоватьУведомленияКлиента Тогда
			РезультатПолучения = НовыйРезультатПолучения();
			РезультатПолучения.СостояниеПоИдентификаторамЭДО = 
				РегистрыСведений.СостоянияАвтоматическогоПолученияЭДО.СостояниеПоИдентификаторамЭДО();
			Результат.РезультатПолучения = РезультатПолучения;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Попытка
		Если ПараметрыОтправки.ИспользоватьУведомленияКлиента Тогда
			ФоновыеЗадания.Выполнить("АвтоматическоеПолучениеЭДО.ПолучитьЧерезИнтервал",, КлючЗадания());
		Иначе
			ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияФункции(Новый УникальныйИдентификатор());
			ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
			ПараметрыВыполненияВФоне.КлючФоновогоЗадания = КлючЗадания();
			Результат.ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполненияВФоне,
				"АвтоматическоеПолучениеЭДО.ПолучитьЧерезИнтервал");
		КонецЕсли;
	Исключение
		Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().АвтоматическоеПолучениеЭДО;
		ТекстСообщения = НСтр("ru = 'Не удалось запустить автоматическое получение ЭДО через интервал по причине:'")
			+ Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, Подсистема);
	КонецПопытки;
	
КонецПроцедуры

// Параметры:
//  ОписаниеУчетнойЗаписи - см. УчетныеЗаписиЭДОКлиентСервер.НовоеОписаниеУчетнойЗаписи
Процедура ПриСозданииУчетнойЗаписиЭДО(ОписаниеУчетнойЗаписи) Экспорт
	
	Если ОписаниеУчетнойЗаписи.ЭтоОблачныйЭДО Тогда
		УстановитьАктивностьРегламентногоЗадания(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ИдентификаторЭДО - Строка
//  СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
//  ЭтоОблачныйЭДО - Булево
Процедура ПриУдаленииУчетнойЗаписи(ИдентификаторЭДО, СпособОбмена, ЭтоОблачныйЭДО) Экспорт
	
	Если СпособОбмена <> Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО
		И Не ЭтоОблачныйЭДО Тогда
		Возврат;
	КонецЕсли;
	
	ОтключитьИспользованиеКлючаДоступаКСервисуЭДО(ИдентификаторЭДО);
	
	РегистрыСведений.СостоянияАвтоматическогоПолученияЭДО.Удалить(ИдентификаторЭДО);
	
	Если Не ЕстьУчетныеЗаписиДляПолучения() Тогда
		УстановитьАктивностьРегламентногоЗадания(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегламентноеЗадание

// Возвращаемое значение:
//  Строка
Функция КлючЗадания() Экспорт
	Возврат "АвтоматическоеПолучениеЭДО";
КонецФункции

#КонецОбласти

#Область КлючДоступаКСервисуЭДО

// Возвращаемое значение:
//  Булево
Функция ИспользоватьКлючДоступаКСервисуЭДО() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.РазделениеВключено()
		И ИспользоватьПолучениеИзСервисаЭДО()
		И ЗначениеЗаполнено(Константы.КлючДоступаКСервисуЭДО.Получить());
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ЗашифрованныеМаркеры - см. КриптографияБЭДКлиентСервер.НовыйНаборДанныхДляРасшифровки
//  * РасшифрованныеМаркеры - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  * ИдентификаторыЭДО - Массив из Строка
Функция НовыеДанныеАутентификации() Экспорт
	ДанныеАутентификации = Новый Структура;
	ДанныеАутентификации.Вставить("ЗашифрованныеМаркеры", Новый Соответствие);
	ДанныеАутентификации.Вставить("РасшифрованныеМаркеры", Новый Соответствие);
	ДанныеАутентификации.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	ДанныеАутентификации.Вставить("ИдентификаторыЭДО", Новый Массив);
	Возврат ДанныеАутентификации;
КонецФункции

// Параметры:
//  РезультатыПолученияОтпечатковНаКлиенте - см. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
//  ИдентификаторыЭДО - Неопределено,Массив из Строка
//  
// Возвращаемое значение:
//  См. НовыеДанныеАутентификации
Функция ДанныеАутентификацииВключенияИспользованияКлючаДоступаКСервисуЭДО(
	РезультатыПолученияОтпечатковНаКлиенте, ИдентификаторыЭДО = Неопределено) Экспорт
	
	Если ИдентификаторыЭДО = Неопределено Тогда
		ИдентификаторыЭДО = УчетныеЗаписиЭДО.ИдентификаторыУчетныхЗаписейСпособаОбмена(
			Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	КонецЕсли;
	
	ДанныеАутентификации = НовыеДанныеАутентификации();
	
	ИдентификаторыПоИнтеграциямЭДО = УчетныеЗаписиЭДО.ИдентификаторыПоИнтеграциямЭДО(ИдентификаторыЭДО);
	Если ЗначениеЗаполнено(ИдентификаторыПоИнтеграциямЭДО.ИдентификаторыДляВстроенногоЭДО) Тогда
		
		КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
		
		ВидОперации = НСтр("ru = 'Выполнение действий по ЭДО'");
		РезультатыПолученияОтпечатков = КриптографияБЭД.ПолучитьОтпечаткиСертификатов(ВидОперации, КонтекстДиагностики,
			РезультатыПолученияОтпечатковНаКлиенте);
		
		ДанныеДляСинхронизации = СинхронизацияЭДО.ДанныеДляСинхронизации(РезультатыПолученияОтпечатков,
			КонтекстДиагностики, ИдентификаторыЭДО);
			
		ОбработкаНеисправностейБЭДКлиентСервер.ДополнитьКонтекстДиагностики(ДанныеАутентификации.КонтекстДиагностики,
			КонтекстДиагностики);

		КлючиСинхронизации = ДанныеДляСинхронизации.КлючиСинхронизации;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
			ДанныеАутентификации.ЗашифрованныеМаркеры,
			СинхронизацияЭДО.ЗашифрованныеМаркерыИзКлючейСинхронизации(КлючиСинхронизации));
			
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
			ДанныеАутентификации.РасшифрованныеМаркеры,
			СинхронизацияЭДО.РасшифрованныеМаркерыИзКлючейСинхронизации(КлючиСинхронизации));

	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторыПоИнтеграциямЭДО.ИдентификаторыДляОблачногоЭДО)
		И НастройкиЭДО.ИспользоватьИнтеграциюОблачногоЭДО() Тогда
		ОбщийМодульУчетныеЗаписиЭДОИнтеграцияОблака = ОбщегоНазначения.ОбщийМодуль(
			"УчетныеЗаписиЭДОИнтеграцияОблака");
			
		РезультатАвторизацииВОблаке = ОбщийМодульУчетныеЗаписиЭДОИнтеграцияОблака.АвторизоватьсяВСервисеЭДО(
			ИдентификаторыПоИнтеграциямЭДО.ИдентификаторыДляОблачногоЭДО, 
			РезультатыПолученияОтпечатковНаКлиенте);
		
		ОбработкаНеисправностейБЭДКлиентСервер.ДополнитьКонтекстДиагностики(
			ДанныеАутентификации.КонтекстДиагностики,
			РезультатАвторизацииВОблаке.КонтекстДиагностики);
			
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
			ДанныеАутентификации.ЗашифрованныеМаркеры,
			РезультатАвторизацииВОблаке.ЗашифрованныеМаркеры);
			
	КонецЕсли;
	
	Возврат ДанныеАутентификации;
	
КонецФункции

// Параметры:
//  ИдентификаторыЭДО - Массив из Строка
//  РасшифрованныеМаркеры - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
//  
// Возвращаемое значение:
//  См. НовыйРезультатВключенияИспользованияКлючаДоступаКСервисуЭДО
//
Функция ВключитьИспользованиеКлючаДоступаКСервисуЭДО(ИдентификаторыЭДО, РасшифрованныеМаркеры) Экспорт
	ОбщийРезультатВключения = НовыйРезультатВключенияИспользованияКлючаДоступаКСервисуЭДО();
	
	Если Не НастройкиЭДО.ЕстьПравоНастройкиОбмена(Истина) Тогда
		Возврат ОбщийРезультатВключения;
	КонецЕсли;

	ИдентификаторыПоИнтеграциямЭДО = УчетныеЗаписиЭДО.ИдентификаторыПоИнтеграциямЭДО(ИдентификаторыЭДО);
	
	Если ИспользоватьПолучениеИзСервисаЭДО() 
		И ЗначениеЗаполнено(ИдентификаторыПоИнтеграциямЭДО.ИдентификаторыДляВстроенногоЭДО) Тогда
			
		КлючиСинхронизации = СинхронизацияЭДО.КлючиСинхронизацииИзРасшифрованныхМаркеров(РасшифрованныеМаркеры);
		КлючиСинхронизацииДляВстроенногоЭДО = СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации();
	
		Для Каждого ИдентификаторВстроенногоЭДО Из ИдентификаторыПоИнтеграциямЭДО.ИдентификаторыДляВстроенногоЭДО Цикл
			КлючСинхронизацииВстроенногоЭДО = КлючиСинхронизации.Получить(ИдентификаторВстроенногоЭДО);
			Если ЗначениеЗаполнено(КлючСинхронизацииВстроенногоЭДО) Тогда
				КлючиСинхронизацииДляВстроенногоЭДО.Вставить(ИдентификаторВстроенногоЭДО, КлючСинхронизацииВстроенногоЭДО);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(КлючиСинхронизацииДляВстроенногоЭДО) Тогда
			РезультатВключенияЛокальныйЭДО = ВключитьИспользованиеКлючаДоступаКСервисуЭДОПоКлючамСинхронизации(
				ИдентификаторыПоИнтеграциямЭДО.ИдентификаторыДляВстроенногоЭДО, КлючиСинхронизацииДляВстроенногоЭДО);
				
			ДополнитьРезультатВключенияИспользованияКлючаДоступаКСервисуЭДО(ОбщийРезультатВключения, РезультатВключенияЛокальныйЭДО);
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиЭДО.ИспользоватьИнтеграциюОблачногоЭДО() 
		И ЗначениеЗаполнено(ИдентификаторыПоИнтеграциямЭДО.ИдентификаторыДляОблачногоЭДО) Тогда
		
		ОбщийМодульАвтоматическоеПолучениеЭДОИнтеграцияОблака = ОбщегоНазначения.ОбщийМодуль(
			"АвтоматическоеПолучениеЭДОИнтеграцияОблака");
			
		РезультатВключенияОблачныйЭДО = ОбщийМодульАвтоматическоеПолучениеЭДОИнтеграцияОблака.ВключитьИспользованиеКлючаДоступаКСервисуЭДО(
			ИдентификаторыПоИнтеграциямЭДО.ИдентификаторыДляОблачногоЭДО,
			РасшифрованныеМаркеры);
		
		ДополнитьРезультатВключенияИспользованияКлючаДоступаКСервисуЭДО(ОбщийРезультатВключения, РезультатВключенияОблачныйЭДО);
	КонецЕсли;
	
	Возврат ОбщийРезультатВключения;
	
КонецФункции

// Параметры:
//  ИдентификаторыЭДО - Массив из Строка
//  КлючиСинхронизации - См. СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации
//  
// Возвращаемое значение:
//  См. НовыйРезультатВключенияИспользованияКлючаДоступаКСервисуЭДО
//
Функция ВключитьИспользованиеКлючаДоступаКСервисуЭДОПоКлючамСинхронизации(ИдентификаторыЭДО, КлючиСинхронизации) Экспорт
	
	РезультатПодключения = НовыйРезультатВключенияИспользованияКлючаДоступаКСервисуЭДО();
	
	Если Не ДоступноВключениеИспользованияКлючаДоступаКСервисуЭД() Тогда
		Возврат РезультатПодключения;
	КонецЕсли;
	
	СостояниеПоИдентификаторамЭДО = РезультатПодключения.СостояниеПоИдентификаторамЭДО;
	КонтекстДиагностики = РезультатПодключения.КонтекстДиагностики;
		
	Для Каждого КлючСинхронизацииПоИдентификаторуЭДО Из КлючиСинхронизации Цикл
		ИдентификаторЭДО = КлючСинхронизацииПоИдентификаторуЭДО.Ключ;
		КлючСинхронизации = КлючСинхронизацииПоИдентификаторуЭДО.Значение;
		РезультатПолученияПараметров = СервисЭДО.ПолучитьПараметрыУведомлений(КлючСинхронизации);
		Если РезультатПолученияПараметров.ПараметрыУведомлений = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработкаНеисправностейБЭДКлиентСервер.ДополнитьКонтекстДиагностики(КонтекстДиагностики,
			РезультатПолученияПараметров.КонтекстДиагностики);
		
		Если Не ЗначениеЗаполнено(РезультатПолученияПараметров.ПараметрыУведомлений) Тогда
			Продолжить;
		КонецЕсли;
		
		СостояниеПолучения = УстановитьИспользованиеКлючаДоступаКСервисуЭДО(ИдентификаторЭДО);
		
		СостояниеПоИдентификаторамЭДО.Вставить(ИдентификаторЭДО, СостояниеПолучения);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СостояниеПоИдентификаторамЭДО) Тогда
		УстановитьАктивностьРегламентногоЗадания(Истина);
	КонецЕсли;
	
	Возврат РезультатПодключения;
	
КонецФункции

// Параметры:
//  ИдентификаторЭДО - Неопределено,Строка
Процедура ОтключитьИспользованиеКлючаДоступаКСервисуЭДО(ИдентификаторЭДО = Неопределено) Экспорт
	
	Если Не НастройкиЭДО.ЕстьПравоНастройкиОбмена(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(ИдентификаторЭДО) Тогда
		РегистрыСведений.ИспользованиеКлючаДоступаКСервисуЭДО.Удалить(ИдентификаторЭДО);
	Иначе
		РегистрыСведений.ИспользованиеКлючаДоступаКСервисуЭДО.Очистить();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Параметры:
//  ИдентификаторыЭДО - Массив из Строка
// 
// Возвращаемое значение:
//  См. СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации
Функция КлючиСинхронизации(ИдентификаторыЭДО) Экспорт
	
	КлючиСинхронизации = СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации();
	
	УстановитьПривилегированныйРежим(Истина);
	КлючДоступаКСервисуЭДО = Константы.КлючДоступаКСервисуЭДО.Получить();
	Если Не ЗначениеЗаполнено(КлючДоступаКСервисуЭДО) Тогда
		Возврат КлючиСинхронизации;
	КонецЕсли;
	ПодключенныеИдентификаторыЭДО = РегистрыСведений.ИспользованиеКлючаДоступаКСервисуЭДО.ПодключенныеИдентификаторыЭДО(
		ИдентификаторыЭДО);
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого ИдентификаторЭДО Из ПодключенныеИдентификаторыЭДО Цикл
		КлючСинхронизации = СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации();
		КлючСинхронизации.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
		КлючСинхронизации.ИдентификаторУчетнойЗаписи = ИдентификаторЭДО;
		КлючСинхронизации.КлючДоступаКСервисуЭДО = КлючДоступаКСервисуЭДО;
		КлючиСинхронизации.Вставить(ИдентификаторЭДО, КлючСинхронизации);
	КонецЦикла;
	
	Возврат КлючиСинхронизации;
	
КонецФункции

// Параметры:
//  Заголовки - Соответствие из КлючИЗначение:
//  * Ключ - Строка
//  * Значение - Строка
//  КлючСинхронизации - См. СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации
//  АдресРесурса - Строка
//  Операция - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ДополнитьЗаголовкиЗапроса(Заголовки, КлючСинхронизации, АдресРесурса, Операция) Экспорт
	
	Если Не ЗначениеЗаполнено(КлючСинхронизации.КлючДоступаКСервисуЭДО) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Использование = РегистрыСведений.ИспользованиеКлючаДоступаКСервисуЭДО.ЕстьИдентификаторЭДО(
		КлючСинхронизации.ИдентификаторУчетнойЗаписи);
	Если Не Использование Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Комментарий = СтрШаблон(НСтр("ru = 'Выполнение запроса по ключу доступа к сервису ЭДО.
		|Операция: %1
		|Метод: %2
		|Идентификатор ЭДО: %3'"),
		Операция, АдресРесурса , КлючСинхронизации.ИдентификаторУчетнойЗаписи);
	
	ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(Комментарий,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().АвтоматическоеПолучениеЭДО,
		УровеньЖурналаРегистрации.Информация);
	
	Заголовки.Вставить(ИмяЗаголовкаЗапросаКлючДоступаКСервисуЭДО(), КлючСинхронизации.КлючДоступаКСервисуЭДО);
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область РаботаСФормами

#Если Не ВнешнееСоединение Тогда

// Возвращаемое значение:
//  Структура:
//  * ГруппаПредупреждение - Неопределено,ГруппаФормы
//  * Список - Неопределено,ТаблицаФормы
Функция НовыеПараметрыФормыСпискаПриСозданииНаСервере() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ГруппаПредупреждение", Неопределено);
	Параметры.Вставить("Список", Неопределено);
	Возврат Параметры;
КонецФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения:
//  * ПараметрыАвтоматическогоПолученияЭДО - Произвольный
//  Параметры - См. НовыеПараметрыФормыСпискаПриСозданииНаСервере
Процедура ФормаСпискаПриСозданииНаСервере(Форма, Параметры) Экспорт
	ПараметрыРеквизита = НовыеПараметрыРеквизитаФормы();
	Если Параметры.ГруппаПредупреждение <> Неопределено Тогда
		ПараметрыРеквизита.ИмяГруппыПредупреждение = Параметры.ГруппаПредупреждение.Имя;
	КонецЕсли;
	Если Параметры.Список <> Неопределено Тогда
		ПараметрыРеквизита.ИмяСписка = Параметры.Список.Имя;
	КонецЕсли;
	Форма.ПараметрыАвтоматическогоПолученияЭДО = ПараметрыРеквизита;
	СостояниеПоИдентификаторамЭДО =
		РегистрыСведений.СостоянияАвтоматическогоПолученияЭДО.СостояниеПоИдентификаторамЭДО();
	АвтоматическоеПолучениеЭДОКлиентСервер.УстановитьВидимостьПредупрежденияВФормеСписка(
		Форма, СостояниеПоИдентификаторамЭДО, ПараметрыРеквизита);
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * ГруппаПредупреждение - Неопределено,ГруппаФормы
//  * ИдентификаторЭДО - Строка
Функция НовыеПараметрыФормыЭлементаПриЧтенииНаСервере() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ГруппаПредупреждение", Неопределено);
	Параметры.Вставить("ИдентификаторЭДО", "");
	Возврат Параметры;
КонецФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения:
//  * ПараметрыАвтоматическогоПолученияЭДО - Произвольный
//  Параметры - См. НовыеПараметрыФормыЭлементаПриЧтенииНаСервере
Процедура ФормаЭлементаПриЧтенииНаСервере(Форма, Параметры) Экспорт
	ПараметрыРеквизита = НовыеПараметрыРеквизитаФормы();
	ПараметрыРеквизита.ИмяГруппыПредупреждение = Параметры.ГруппаПредупреждение.Имя;
	ПараметрыРеквизита.ИдентификаторЭДО = Параметры.ИдентификаторЭДО;
	Форма.ПараметрыАвтоматическогоПолученияЭДО = ПараметрыРеквизита;
	Состояние = РегистрыСведений.СостоянияАвтоматическогоПолученияЭДО.СостояниеПоИдентификаторуЭДО(
		ПараметрыРеквизита.ИдентификаторЭДО);
	АвтоматическоеПолучениеЭДОКлиентСервер.УстановитьВидимостьПредупрежденияВФормеЭлемента(
		Форма, Состояние, ПараметрыРеквизита);
КонецПроцедуры

#КонецЕсли

#КонецОбласти

#Область Предупреждение

// Параметры:
//  Состояние - ДанныеФормыСтруктура,Структура:
//  * ЕстьОшибки - Булево
//  * НомерПопытки - Число
//  * Остановлено - Булево
// 
// Возвращаемое значение:
//  Строка
Функция ПредупреждениеВСтрокеСписка(Состояние) Экспорт
	Если Состояние.ЕстьОшибки Или Состояние.Остановлено Тогда
		Возврат НСтр("ru = 'Не удалось выполнить автоматическое получение.'");
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РегламентноеЗадание

// Параметры:
//  Использование - Булево
Процедура УстановитьАктивностьРегламентногоЗадания(Использование)
	УстановитьПривилегированныйРежим(Истина);
	ВыполняемоеЗадание = МетаданныеРегламентногоЗадания();
	ОбщегоНазначенияБЭД.УстановитьАктивностьРегламентногоЗадания(ВыполняемоеЗадание, Использование);
КонецПроцедуры

// Возвращаемое значение:
//  Число
Функция ИнтервалЗавершенияРегламентногоЗадания()
	Возврат 3600;
КонецФункции

// Возвращаемое значение:
//  ОбъектМетаданныхРегламентноеЗадание
Функция МетаданныеРегламентногоЗадания()
	Возврат Метаданные.РегламентныеЗадания.АвтоматическоеПолучениеЭДО;
КонецФункции

#КонецОбласти

#Область КлючДоступаКСервисуЭДО

// Возвращаемое значение:
//  Строка
Функция ИмяЗаголовкаЗапросаКлючДоступаКСервисуЭДО()
	Возврат "Api-Key";
КонецФункции

// Параметры:
//  ИдентификаторЭДО - Строка
// 
// Возвращаемое значение:
//  См. РегистрыСведений.СостоянияАвтоматическогоПолученияЭДО.НовоеСостояниеПолучения
Функция УстановитьИспользованиеКлючаДоступаКСервисуЭДО(ИдентификаторЭДО)
	
	СостояниеПолучения = РегистрыСведений.СостоянияАвтоматическогоПолученияЭДО.НовоеСостояниеПолучения();
	
	НачатьТранзакцию();
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		РегистрыСведений.ИспользованиеКлючаДоступаКСервисуЭДО.Записать(ИдентификаторЭДО);
		УстановитьПривилегированныйРежим(Ложь);
		
		НаборЗаписей = РегистрыСведений.СостоянияАвтоматическогоПолученияЭДО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторЭДО.Установить(ИдентификаторЭДО);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() Тогда
			ЗаписьНабора = НаборЗаписей[0];
			ЗаписьНабора.Остановлено = Ложь;
			НаборЗаписей.Записать();
			ЗаполнитьЗначенияСвойств(СостояниеПолучения, ЗаписьНабора);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат СостояниеПолучения;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * СостояниеПоИдентификаторамЭДО - Соответствие из КлючИЗначение:
//    ** Ключ - Строка - Идентификатор учетной записи ЭДО.
//    ** Значение - См. УстановитьИспользованиеКлючаДоступаКСервисуЭДО
//  * КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция НовыйРезультатВключенияИспользованияКлючаДоступаКСервисуЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("СостояниеПоИдентификаторамЭДО", Новый Соответствие);
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//  Булево
Функция ДоступноВключениеИспользованияКлючаДоступаКСервисуЭД()
	Возврат ИспользоватьПолучениеИзСервисаЭДО() И НастройкиЭДО.ЕстьПравоНастройкиОбмена(Истина);
КонецФункции

// Параметры:
//  РезультатВключенияПриемник - См. НовыйРезультатВключенияИспользованияКлючаДоступаКСервисуЭДО
//  РезультатВключенияИсточник - См. НовыйРезультатВключенияИспользованияКлючаДоступаКСервисуЭДО
Процедура ДополнитьРезультатВключенияИспользованияКлючаДоступаКСервисуЭДО(РезультатВключенияПриемник, 
		РезультатВключенияИсточник)
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
			РезультатВключенияПриемник.СостояниеПоИдентификаторамЭДО, 
			РезультатВключенияИсточник.СостояниеПоИдентификаторамЭДО);
			
	ОбработкаНеисправностейБЭДКлиентСервер.ДополнитьКонтекстДиагностики(
		РезультатВключенияПриемник.КонтекстДиагностики,
		РезультатВключенияИсточник.КонтекстДиагностики);
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормами

#Если Не ВнешнееСоединение Тогда

// Возвращаемое значение:
//  Структура:
//  * ИмяГруппыПредупреждение - Строка
//  * ИмяСписка - Строка
//  * ИдентификаторЭДО - Строка
Функция НовыеПараметрыРеквизитаФормы() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяГруппыПредупреждение", "");
	Параметры.Вставить("ИмяСписка", "");
	Параметры.Вставить("ИдентификаторЭДО", "");
	Возврат Параметры;
КонецФункции

#КонецЕсли

#КонецОбласти

#Область Получение

// Возвращаемое значение:
//  Булево
Функция ЕстьУчетныеЗаписиДляПолучения()
	Возврат УчетныеЗаписиЭДО.ЕстьУчетныеЗаписиОблачногоЭДО()
		Или РегистрыСведений.ИспользованиеКлючаДоступаКСервисуЭДО.ЕстьЗаписи();
КонецФункции

// Возвращаемое значение:
//  Булево
Функция ИспользоватьПолучениеИзСервисаЭДО() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ИспользоватьАвтоматическоеПолучениеИзСервисаЭДО.Получить();
КонецФункции

// Параметры:
//  ЭтоРегламентноеЗадание - Булево
//  ДатаПоследнегоПолучения - Дата
// 
// Возвращаемое значение:
//  Булево
Функция ТребуетсяПолучениеЧерезИнтервал(ЭтоРегламентноеЗадание = Ложь, ДатаПоследнегоПолучения = Неопределено) Экспорт
	Интервал = АвтоматическоеПолучениеЭДОКлиентСервер.Интервал();
	Если ДатаПоследнегоПолучения = Неопределено Тогда
		ДатаПоследнегоПолучения = Константы.ДатаАвтоматическогоПолученияЭДО.Получить();
	КонецЕсли;
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	ТекущийИнтервал = ТекущаяДатаСеанса - ДатаПоследнегоПолучения;
	Если Интервал > ТекущийИнтервал  Тогда
		Возврат Ложь;
	КонецЕсли;
	КлючФоновогоЗадания = КлючЗадания();
	Отбор = Новый Структура("Ключ, Состояние", КлючФоновогоЗадания, СостояниеФоновогоЗадания.Активно);
	АктивныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	КоличествоАктивных = АктивныеФоновыеЗадания.Количество();
	Если КоличествоАктивных = 0
		Или ЭтоРегламентноеЗадание И КоличествоАктивных = 1 Тогда
		Возврат Истина;
	ИначеЕсли ИнтервалЗавершенияРегламентногоЗадания() > ТекущийИнтервал Тогда
		Возврат Ложь;
	КонецЕсли;
	Для Каждого ФоновоеЗадание Из АктивныеФоновыеЗадания Цикл
		Если ЭтоРегламентноеЗадание И ФоновоеЗадание.РегламентноеЗадание <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗадание.УникальныйИдентификатор);
	КонецЦикла;
	Возврат Истина;
КонецФункции

Процедура ОбновитьДатуПолучения() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Константы.ДатаАвтоматическогоПолученияЭДО.Установить(ТекущаяДатаСеанса());
КонецПроцедуры

// Параметры:
//  РасшифрованныеМаркеры - См. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
// 
// Возвращаемое значение:
//  См. Получить
Функция ПолучитьЧерезИнтервал(РасшифрованныеМаркеры = Неопределено) Экспорт
	
	ВидОперации = НСтр("ru = 'Автоматическое получение ЭДО через интервал'");
	Возврат Получить(ВидОперации, РасшифрованныеМаркеры);
	
КонецФункции

Процедура ПолучитьПоРасписанию() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.АвтоматическоеПолучениеЭДО);
	
	УстановитьПривилегированныйРежим(Истина);
	ТребуетсяПолучение = ТребуетсяПолучениеЧерезИнтервал(Истина);
	Если Не ТребуетсяПолучение Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьУчетныеЗаписиДляПолучения() Тогда
		УстановитьАктивностьРегламентногоЗадания(Ложь);
		Возврат;
	КонецЕсли;
	
	ВидОперации = НСтр("ru = 'Автоматическое получение ЭДО по расписанию'");
	Получить(ВидОперации);
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * СостояниеПоИдентификаторамЭДО - см. РегистрыСведений.СостоянияАвтоматическогоПолученияЭДО.СостояниеПоИдентификаторамЭДО
//  * ИтогДействийПоЭДО - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция НовыйРезультатПолучения() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СостояниеПоИдентификаторамЭДО", Новый Соответствие);
	Результат.Вставить("ИтогДействийПоЭДО", ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ВидОперации - Строка
//  РасшифрованныеМаркеры - См. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
//
// Возвращаемое значение:
//  См. НовыйРезультатПолучения
Функция Получить(ВидОперации, РасшифрованныеМаркеры = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбновитьДатуПолучения();
	
	Результат = НовыйРезультатПолучения();
	
	ИтогДействийПоЭДО = Результат.ИтогДействийПоЭДО;
	КонтекстДиагностики = Результат.КонтекстДиагностики;
	
	Текст = СтрШаблон(НСтр("ru = 'Начало операции: %1.'"), ВидОперации);
	Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().АвтоматическоеПолучениеЭДО;
	ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(Текст, Подсистема, УровеньЖурналаРегистрации.Информация);
	СостояниеПоИдентификаторамЭДОПослеПолучения = Новый Соответствие;
	
	Попытка
		
		СостояниеПоИдентификаторамЭДОДоПолучения =
			РегистрыСведений.СостоянияАвтоматическогоПолученияЭДО.СостояниеПоИдентификаторамЭДО();
		
		Если ЗначениеЗаполнено(РасшифрованныеМаркеры) Тогда
			РезультатПоМаркерам = ПолучитьПоРасшифрованнымМаркерам(РасшифрованныеМаркеры);
			ЭлектронныеДокументыЭДОКлиентСервер.ДополнитьИтогВыполненияДействийПоЭДО(
				ИтогДействийПоЭДО, РезультатПоМаркерам.ИтогДействийПоЭДО);
			ОбработкаНеисправностейБЭДКлиентСервер.ДополнитьКонтекстДиагностики(
				КонтекстДиагностики, РезультатПоМаркерам.КонтекстДиагностики);
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
				СостояниеПоИдентификаторамЭДОПослеПолучения, РезультатПоМаркерам.СостояниеПоИдентификаторамЭДО);
		КонецЕсли;
		
		ИспользоватьИнтеграциюОблачногоЭДО = НастройкиЭДО.ИспользоватьИнтеграциюОблачногоЭДО();
		Если ИспользоватьИнтеграциюОблачногоЭДО Тогда
			РезультатПоОблачномуЭДО = ПолучитьПоУчетнымЗаписямОблачногоЭДО();
			ЭлектронныеДокументыЭДОКлиентСервер.ДополнитьИтогВыполненияДействийПоЭДО(
				ИтогДействийПоЭДО, РезультатПоОблачномуЭДО.ИтогДействийПоЭДО);
			ОбработкаНеисправностейБЭДКлиентСервер.ДополнитьКонтекстДиагностики(
				КонтекстДиагностики, РезультатПоОблачномуЭДО.КонтекстДиагностики);
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
				СостояниеПоИдентификаторамЭДОПослеПолучения, РезультатПоОблачномуЭДО.СостояниеПоИдентификаторамЭДО);
		КонецЕсли;
		
		ИспользоватьКлючДоступаКСервисуЭДО = ИспользоватьКлючДоступаКСервисуЭДО();
		Если ИспользоватьКлючДоступаКСервисуЭДО Тогда
			РезультатПоКлючуДоступа = ПолучитьПоКлючуДоступаКСервисуЭДО();
			ЭлектронныеДокументыЭДОКлиентСервер.ДополнитьИтогВыполненияДействийПоЭДО(
				ИтогДействийПоЭДО, РезультатПоКлючуДоступа.ИтогДействийПоЭДО);
			ОбработкаНеисправностейБЭДКлиентСервер.ДополнитьКонтекстДиагностики(
				КонтекстДиагностики, РезультатПоКлючуДоступа.КонтекстДиагностики);
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
				СостояниеПоИдентификаторамЭДОПослеПолучения, РезультатПоКлючуДоступа.СостояниеПоИдентификаторамЭДО);
		КонецЕсли;
		
		Результат.СостояниеПоИдентификаторамЭДО =
			РегистрыСведений.СостоянияАвтоматическогоПолученияЭДО.ИзмененныеСостоянияПоИдентификаторамЭДО(
				СостояниеПоИдентификаторамЭДОДоПолучения, СостояниеПоИдентификаторамЭДОПослеПолучения);
		
		ШаблонСообщения = НСтр("ru = 'Завершение операции: %1.
			|Получено транспортных контейнеров: %2. Распаковано: %3.'");
		
		Загружено = ИтогДействийПоЭДО.ОбработаноПоДействиям[Перечисления.ДействияПоЭДО.Загрузить];
		Если Загружено = Неопределено Тогда
			Загружено = 0;
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ВидОперации, ИтогДействийПоЭДО.ПолученоКонтейнеров, Загружено);
		
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, Подсистема, УровеньЖурналаРегистрации.Информация);
		
		ДиагностикаЭДО.ОбработатьОшибки(КонтекстДиагностики);
		
		Если Не ЗначениеЗаполнено(ИтогДействийПоЭДО.ОбработанныеДокументы)
			И Не ЗначениеЗаполнено(Результат.СостояниеПоИдентификаторамЭДО) Тогда
			Возврат Результат;
		КонецЕсли;
		
		Если ИнтеграцияБСПБЭДКлиентСервер.УведомленияКлиентаДоступны() Тогда
			МенеджерУведомлений = ОбщегоНазначения.ВычислитьВБезопасномРежиме("УведомленияКлиента");
			//@skip-check dynamic-access-method-not-found
			МенеджерУведомлений.ОтправитьУведомление(АвтоматическоеПолучениеЭДОКлиентСервер.КлючУведомленийКлиента(),
				Результат);
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'В процессе выполнения операции ""%1"" произошла ошибка: %2'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ВидОперации,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
			ТекстСообщения, ТекстСообщения);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, Подсистема);
		ДиагностикаЭДО.ОбработатьОшибки(КонтекстДиагностики);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  См. НовыйРезультатПолучения
Функция ПолучитьПоУчетнымЗаписямОблачногоЭДО()
	
	МодульИнтеграцияОблачногоЭДО = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияОблачногоЭДО");
	МодульЭлектронныеДокументыЭДОИнтеграцияОблака = ОбщегоНазначения.ОбщийМодуль(
		"ЭлектронныеДокументыЭДОИнтеграцияОблака");
	
	Результат = НовыйРезультатПолучения();
	ИтогДействийПоЭДО = Результат.ИтогДействийПоЭДО;
	КонтекстДиагностики = Результат.КонтекстДиагностики;
	СостояниеПоИдентификаторамЭДО = Результат.СостояниеПоИдентификаторамЭДО;
	
	ИдентификаторыЭДОПоУчетнымЗаписямОблачногоЭДО =
		МодульИнтеграцияОблачногоЭДО.ИдентификаторыЭДОПоУчетнымЗаписямОблачнымЭДО();
	
	Для Каждого ИдентификаторыЭДОПоУчетнойЗаписиОблачногоЭДО Из ИдентификаторыЭДОПоУчетнымЗаписямОблачногоЭДО Цикл
		
		ДатаНачала = ТекущаяДатаСеанса();
		
		УчетнаяЗаписьОблачногоЭДО = ИдентификаторыЭДОПоУчетнойЗаписиОблачногоЭДО.Ключ;
		ИдентификаторыЭДО = ИдентификаторыЭДОПоУчетнойЗаписиОблачногоЭДО.Значение;
		ПараметрыВыполнения = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
		ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций = ИдентификаторыЭДО;
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(ПараметрыВыполнения.НаборДействий,
			Перечисления.ДействияПоЭДО.ЗагрузитьПриглашения);
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(ПараметрыВыполнения.НаборДействий,
			Перечисления.ДействияПоЭДО.Загрузить);
		РезультатВыполнения = МодульЭлектронныеДокументыЭДОИнтеграцияОблака.ВыполнитьДействияЭДО(
			ПараметрыВыполнения, КонтекстДиагностики);
		РезультатДействийЭДО = РезультатВыполнения.РезультатыДействий[УчетнаяЗаписьОблачногоЭДО];
		
		ЭлектронныеДокументыЭДОКлиентСервер.ДополнитьИтогВыполненияДействийПоЭДО(
			ИтогДействийПоЭДО, РезультатДействийЭДО.Итог);
		
		ОбновитьДатуПолучения();
		
		Для Каждого ИдентификаторЭДО Из ИдентификаторыЭДО Цикл
			СостояниеПолучения = РегистрыСведений.СостоянияАвтоматическогоПолученияЭДО.Записать(
				ИдентификаторЭДО, Ложь, ДатаНачала);
			СостояниеПоИдентификаторамЭДО.Вставить(ИдентификаторЭДО, СостояниеПолучения);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  См. НовыйРезультатПолучения
Функция ПолучитьПоКлючуДоступаКСервисуЭДО()
	
	Результат = НовыйРезультатПолучения();
	
	УстановитьПривилегированныйРежим(Истина);
	КлючДоступаКСервисуЭДО = Константы.КлючДоступаКСервисуЭДО.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	Если Не ЗначениеЗаполнено(КлючДоступаКСервисуЭДО) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИтогДействийПоЭДО = Результат.ИтогДействийПоЭДО;
	КонтекстДиагностики = Результат.КонтекстДиагностики;
	СостояниеПоИдентификаторамЭДО = Результат.СостояниеПоИдентификаторамЭДО;
	
	ИдентификаторыЧерезСервис1СЭДО = УчетныеЗаписиЭДО.ИдентификаторыУчетныхЗаписейСпособаОбмена(
		Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО, Ложь);
	УстановитьПривилегированныйРежим(Истина);
	СертификатыПоУчетнымЗаписямЭДО = УчетныеЗаписиЭДО.ДействующиеСертификатыПоУчетнымЗаписям(
		ИдентификаторыЧерезСервис1СЭДО);
	УстановитьПривилегированныйРежим(Ложь);
	ИдентификаторыЭДОСДействующимиСертификатами = ОбщегоНазначения.ВыгрузитьКолонку(
		СертификатыПоУчетнымЗаписямЭДО, "Ключ");
	ИдентификаторыСКлючомДоступа = РегистрыСведений.ИспользованиеКлючаДоступаКСервисуЭДО.ПодключенныеИдентификаторыЭДО(
		ИдентификаторыЭДОСДействующимиСертификатами);
	ИдентификаторыБезКлючаДоступа = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ИдентификаторыЧерезСервис1СЭДО, ИдентификаторыСКлючомДоступа);
	УстановитьПризнакОстановленПоИдентификаторамЭДО(ИдентификаторыБезКлючаДоступа);
	
	ПриниматьПриглашенияЭДОАвтоматически = НастройкиЭДО.ПриниматьПриглашенияЭДОАвтоматически();
	
	Для Каждого ИдентификаторЭДО Из ИдентификаторыСКлючомДоступа Цикл
		
		ДатаНачала = ТекущаяДатаСеанса();
		
		Сертификаты = СертификатыПоУчетнымЗаписямЭДО[ИдентификаторЭДО];
		Если Не ЗначениеЗаполнено(Сертификаты) Тогда
			Продолжить;
		КонецЕсли;
		
		РасшифрованныйМаркер = РасшифрованныйМаркерПоКлючуДоступа(
			КлючДоступаКСервисуЭДО, ИдентификаторЭДО, Сертификаты[0], КонтекстДиагностики);
		Если РасшифрованныйМаркер.Данные = Неопределено Тогда
			РегистрыСведений.СостоянияАвтоматическогоПолученияЭДО.Записать(ИдентификаторЭДО, Истина, ДатаНачала);
			Продолжить;
		КонецЕсли;
		
		РезультатДействийЭДО = ПолучитьПоДаннымРасшифрованногоМаркера(ИдентификаторЭДО, РасшифрованныйМаркер,
			ПриниматьПриглашенияЭДОАвтоматически);
		
		ЭлектронныеДокументыЭДОКлиентСервер.ДополнитьИтогВыполненияДействийПоЭДО(
			ИтогДействийПоЭДО, РезультатДействийЭДО.Итог);
		ОбработкаНеисправностейБЭДКлиентСервер.ДополнитьКонтекстДиагностики(
			КонтекстДиагностики, РезультатДействийЭДО.КонтекстДиагностики);
		
		ОбновитьДатуПолучения();
		
		ЕстьОшибки = ЕстьОшибкиПолученияЭДО(РезультатДействийЭДО.КонтекстДиагностики);
		СостояниеПолучения = РегистрыСведений.СостоянияАвтоматическогоПолученияЭДО.Записать(
			ИдентификаторЭДО, ЕстьОшибки, ДатаНачала);
		СостояниеПоИдентификаторамЭДО.Вставить(ИдентификаторЭДО, СостояниеПолучения);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  РасшифрованныеМаркеры - См. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
// 
// Возвращаемое значение:
//  См. НовыйРезультатПолучения
Функция ПолучитьПоРасшифрованнымМаркерам(РасшифрованныеМаркеры)
	
	Результат = НовыйРезультатПолучения();
	
	ПриниматьПриглашенияЭДОАвтоматически = НастройкиЭДО.ПриниматьПриглашенияЭДОАвтоматически();
	
	Для Каждого РасшифрованныйМаркер Из РасшифрованныеМаркеры Цикл
		ИдентификаторЭДО = РасшифрованныйМаркер.Ключ;
		РасшифрованныеДанные = РасшифрованныйМаркер.Значение;
		ДатаНачала = ТекущаяДатаСеанса();
		
		РезультатДействийЭДО = ПолучитьПоДаннымРасшифрованногоМаркера(ИдентификаторЭДО, РасшифрованныеДанные,
			ПриниматьПриглашенияЭДОАвтоматически);
		
		ЭлектронныеДокументыЭДОКлиентСервер.ДополнитьИтогВыполненияДействийПоЭДО(
			Результат.ИтогДействийПоЭДО, РезультатДействийЭДО.Итог);
		ОбработкаНеисправностейБЭДКлиентСервер.ДополнитьКонтекстДиагностики(
			Результат.КонтекстДиагностики, РезультатДействийЭДО.КонтекстДиагностики);
		
		ОбновитьДатуПолучения();
		
		ЕстьОшибки = ЕстьОшибкиПолученияЭДО(РезультатДействийЭДО.КонтекстДиагностики);
		СостояниеПолучения = РегистрыСведений.СостоянияАвтоматическогоПолученияЭДО.Записать(
			ИдентификаторЭДО, ЕстьОшибки, ДатаНачала);
		Результат.СостояниеПоИдентификаторамЭДО.Вставить(ИдентификаторЭДО, СостояниеПолучения);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИдентификаторЭДО - Строка
//  РасшифрованныеДанные - См. КриптографияБЭДКлиентСервер.НовыеДанныеРасшифровки
//  ПриниматьПриглашенияЭДОАвтоматически - Булево
//
// Возвращаемое значение:
//  См. ЭлектронныеДокументыЭДОСлужебный.ВыполнитьДействияЭДО
Функция ПолучитьПоДаннымРасшифрованногоМаркера(ИдентификаторЭДО, РасшифрованныеДанные,
		ПриниматьПриглашенияЭДОАвтоматически)
	
	РасшифрованныеМаркеры = КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных();
	РасшифрованныеМаркеры.Вставить(ИдентификаторЭДО, РасшифрованныеДанные);
	
	ПараметрыВыполнения = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполнения.ОбъектыДействий.ИдентификаторыОрганизаций.Добавить(ИдентификаторЭДО);
	ПараметрыВыполнения.РасшифрованныеМаркеры = РасшифрованныеМаркеры;
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(ПараметрыВыполнения.НаборДействий,
		Перечисления.ДействияПоЭДО.ЗагрузитьПриглашения);
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(ПараметрыВыполнения.НаборДействий,
		Перечисления.ДействияПоЭДО.Загрузить);
	
	Если ПриниматьПриглашенияЭДОАвтоматически Тогда
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(ПараметрыВыполнения.НаборДействий,
			Перечисления.ДействияПоЭДО.ПринятьПриглашения);
	КонецЕсли;
	
	Возврат ЭлектронныеДокументыЭДОСлужебный.ВыполнитьДействияЭДО(ПараметрыВыполнения);
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Включено - Булево
//  * РезультатПолучения - Неопределено
//                       - См. НовыйРезультатПолучения
//  * ДлительнаяОперация - Неопределено
//                       - См. ДлительныеОперации.ВыполнитьФункцию
Функция НовыйРезультатПериодическойОтправкиДанных() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Включено", Ложь);
	Результат.Вставить("РезультатПолучения", Неопределено);
	Результат.Вставить("ДлительнаяОперация", Неопределено);
	Возврат Результат;
КонецФункции

// Параметры:
//  ИдентификаторыЭДО - Массив из Строка
Процедура УстановитьПризнакОстановленПоИдентификаторамЭДО(ИдентификаторыЭДО)
	Для Каждого ИдентификаторЭДО Из ИдентификаторыЭДО Цикл
		РегистрыСведений.СостоянияАвтоматическогоПолученияЭДО.УстановитьПризнакОстановки(ИдентификаторЭДО);
	КонецЦикла;
КонецПроцедуры

// Параметры:
//  КлючДоступа - Строка
//  ИдентификаторЭДО - Строка
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. КриптографияБЭДКлиентСервер.НовыеДанныеРасшифровки
Функция РасшифрованныйМаркерПоКлючуДоступа(КлючДоступа, ИдентификаторЭДО, Сертификат, КонтекстДиагностики) Экспорт
	
	КлючСинхронизации = СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации();
	КлючСинхронизации.ИдентификаторУчетнойЗаписи = ИдентификаторЭДО;
	КлючСинхронизации.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	КлючСинхронизации.ВыбранныйСертификат = Сертификат;
	КлючСинхронизации.КлючДоступаКСервисуЭДО = КлючДоступа;
	
	Маркер = СервисЭДО.Авторизоваться(КлючСинхронизации, КонтекстДиагностики);
	
	РасшифрованныйМаркер = КриптографияБЭДКлиентСервер.НовыеДанныеРасшифровки();
	РасшифрованныйМаркер.Сертификат = Сертификат;
	РасшифрованныйМаркер.Данные = Маркер;
	
	Возврат РасшифрованныйМаркер;
	
КонецФункции

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьОшибкиПолученияЭДО(КонтекстДиагностики)
	
	Результат = Ложь;
	
	Ошибки = ОбработкаНеисправностейБЭДКлиентСервер.ПолучитьОшибки(КонтекстДиагностики);
	Если Не ЗначениеЗаполнено(Ошибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого Ошибка Из Ошибки Цикл
		
		Если Не ОбработкаНеисправностейБЭДКлиентСервер.ЭтоОшибкаДанногоВида(Ошибка,
			СинхронизацияЭДО.ВидОшибкиЕстьНеполученныеЭлектронныеДокументы()) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Предупреждение

// Параметры:
//  ИдентификаторЭДО - Строка
// 
// Возвращаемое значение:
//  Структура:
//  * Уровень - Строка
//  * ДатаНачала - Дата
//  * ДатаОкончания - Дата
Функция ОтборЖурналаРегистрации(ИдентификаторЭДО) Экспорт
	
	Период = РегистрыСведений.СостоянияАвтоматическогоПолученияЭДО.ПериодПолученияПоИдентификаторуЭДО(ИдентификаторЭДО);
	Если Период = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Отсутствует состояние автоматического получения по идентификатору ЭДО %1'"),
			ИдентификаторЭДО);
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Уровень"       , "Ошибка");
	Отбор.Вставить("ДатаНачала"    , Период.ДатаНачала);
	Отбор.Вставить("ДатаОкончания" , Период.ДатаОкончания);
	Возврат Отбор;
	
КонецФункции

#КонецОбласти

#КонецОбласти
