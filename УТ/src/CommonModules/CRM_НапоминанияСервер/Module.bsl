
////////////////////////////////////////////////////////////////////////////////
// Напоминания сервер
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает признак использования напоминаний.
//
// Возвращаемое значение:
//	Булево - признак использования напоминаний.
//
Функция ИспользуютсяНапоминания() Экспорт
	
	ИспользоватьНапоминания = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьНапоминанияПользователя");
	
	Если Пользователи.АвторизованныйПользователь() = Пользователи.СсылкаНеуказанногоПользователя() Тогда
		ИспользоватьCRM = Истина;
	Иначе
		ИспользоватьCRM = CRM_ОбщегоНазначенияПовтИсп.ИспользоватьCRM();
	КонецЕсли;
	
	Возврат ИспользоватьНапоминания И ИспользоватьCRM;
	
КонецФункции

// Возвращает признак отображения напоминаний в центре оповещений.
// 
// Возвращаемое значение:
//  Булево - признак отображения напоминаний в центре оповещений.
//
Функция ПоказыватьНапоминанияВЦентреОповещений() Экспорт
	
	СпособОтображенияОповещений = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("СпособОтображенияОповещений");
	Если ЗначениеЗаполнено(СпособОтображенияОповещений) Тогда
		Возврат (СпособОтображенияОповещений = Перечисления.CRM_ВариантыОтображенияНапоминаний.ВЦентреОповещений);
	Иначе
		Возврат (Константы.CRM_СпособОтображенияНапоминаний.Получить() = 
			Перечисления.CRM_ВариантыОтображенияНапоминаний.ВЦентреОповещений);
	КонецЕсли;
	
КонецФункции

// Функция получает напоминания текущего пользователя.
//
// Параметры:
//  ВидОповещений	 - Строка, Неопределено	 - Вид оповещений.
// 
// Возвращаемое значение:
//  Массив - Массив напоминаний.
//
Функция ПолучитьНапоминания(ВидОповещений = Неопределено) Экспорт
	
	МассивНапоминаний = Новый Массив;
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		Возврат МассивНапоминаний;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Если ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка() Тогда
		Возврат МассивНапоминаний;
	КонецЕсли;
	
	НапоминанияОВходящихПисьмах = (ВидОповещений = "НапоминанияОВходящихПисьмах");
	СоответствиеУчетныхЗаписейИКоличестваПисем = Новый Соответствие;
	МаксимальноеКоличествоНапоминанийОднойУчетнойЗаписиПочты = 20;
	
	НапоминанияОСообщенияхМессенджеров = (ВидОповещений = "НапоминанияОСообщенияхМессенджеров");
	СоответствиеУчетныхЗаписейИКоличестваСообщений = Новый Соответствие;
	МаксимальноеКоличествоНапоминанийОднойУчетнойЗаписиМессенджеров = 10;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = ПолучитьВыборкуНапоминаний(ВидОповещений);
	
	Пока Выборка.Следующий() Цикл
		
		Если НапоминанияОВходящихПисьмах Тогда
			
			КоличествоПисемУчетнойЗаписи = СоответствиеУчетныхЗаписейИКоличестваПисем.Получить(Выборка.УчетнаяЗапись);
			
			КоличествоПисемУчетнойЗаписи = ?(КоличествоПисемУчетнойЗаписи = Неопределено, 1, КоличествоПисемУчетнойЗаписи + 1);
			
			СоответствиеУчетныхЗаписейИКоличестваПисем.Вставить(Выборка.УчетнаяЗапись, КоличествоПисемУчетнойЗаписи);
			
			// Если количество напоминаний по учетной записи больше максимального, создаём одно общее напоминание.
			
			Если КоличествоПисемУчетнойЗаписи > МаксимальноеКоличествоНапоминанийОднойУчетнойЗаписиПочты Тогда
				
				 Продолжить;
				 
			КонецЕсли; 
			
		ИначеЕсли НапоминанияОСообщенияхМессенджеров Тогда
			
			КоличествоСообщенийУчетнойЗаписи = СоответствиеУчетныхЗаписейИКоличестваСообщений.Получить(Выборка.УчетнаяЗапись);
			
			КоличествоСообщенийУчетнойЗаписи = 
				?(КоличествоСообщенийУчетнойЗаписи = Неопределено, 1, КоличествоСообщенийУчетнойЗаписи + 1);
			
			СоответствиеУчетныхЗаписейИКоличестваСообщений.Вставить(Выборка.УчетнаяЗапись, КоличествоСообщенийУчетнойЗаписи);
			
			// Если количество напоминаний по учетной записи больше максимального, создаём одно общее напоминание.
			
			Если КоличествоСообщенийУчетнойЗаписи > МаксимальноеКоличествоНапоминанийОднойУчетнойЗаписиМессенджеров Тогда
				
				 Продолжить;
				 
			КонецЕсли; 
			
		КонецЕсли; 
		
		СтруктураНапоминания = Новый Структура;
		СтруктураНапоминания.Вставить("Важность", 		Выборка.Важность);
		СтруктураНапоминания.Вставить("ДатаНачала", 	Выборка.ДатаНачала);
		СтруктураНапоминания.Вставить("Предмет", 		Выборка.Предмет);
		СтруктураНапоминания.Вставить("Содержание", 	Выборка.Содержание);
		СтруктураНапоминания.Вставить("Пользователь", 	Выборка.Пользователь);
		СтруктураНапоминания.Вставить("ДатаОповещения",	Выборка.ДатаОповещения);
		СтруктураНапоминания.Вставить("Идентификатор",	Выборка.Идентификатор);
		СтруктураНапоминания.Вставить("Счетчик",		Выборка.Счетчик);
		СтруктураНапоминания.Вставить("ВидОповещения",	Выборка.ВидОповещения);
		// Определим срок исполнения
		СрокИсполнения = ВычислитьСрокИсполнения(Выборка);
		СтруктураНапоминания.Вставить("СрокИсполнения", СрокИсполнения);
		// Получим представление объекта.
		ПредметПредставление = CRM_ОбщегоНазначенияСервер.ПолучитьПредставлениеПредметаДокумента(Выборка.Предмет);
		СтруктураНапоминания.Вставить("ПредметПредставление", ПредметПредставление);
		// Получим УИД для вывода напоминания в центр оповещений
		КлючУникальности = СтрШаблон("%1-%2", Выборка.Предмет.УникальныйИдентификатор(), 
			Выборка.ВидОповещения.УникальныйИдентификатор());
		СтруктураНапоминания.Вставить("КлючУникальности", КлючУникальности);
		СтруктураНапоминания.Вставить("Просмотрено", Выборка.Просмотрено);
		
		Если НапоминанияОВходящихПисьмах Или НапоминанияОСообщенияхМессенджеров Тогда
			
			Если ЗначениеЗаполнено(Выборка.ОтправительКонтакт) Тогда
				
				Если ТипЗнч(Выборка.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
					
					СтруктураНапоминания.Вставить("Партнер", Выборка.ОтправительКонтакт);
					
				ИначеЕсли  ТипЗнч(Выборка.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					
					СтруктураНапоминания.Вставить("КонтактноеЛицо",  Выборка.ОтправительКонтакт);
					СтруктураНапоминания.Вставить("Партнер", Выборка.ОтправительКонтакт.Владелец);
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтруктураНапоминания.Вставить("УчетнаяЗапись", Выборка.УчетнаяЗапись);
		Иначе
			СтруктураНапоминания.Вставить("Партнер", 		Выборка.Партнер);
			СтруктураНапоминания.Вставить("КонтактноеЛицо", Выборка.КонтактноеЛицо);
		КонецЕсли;
		
		МассивНапоминаний.Добавить(СтруктураНапоминания);
	КонецЦикла;
	
	Если НапоминанияОВходящихПисьмах Тогда
		
		Для каждого УчетнаяЗапись Из СоответствиеУчетныхЗаписейИКоличестваПисем Цикл
			
			Если УчетнаяЗапись.Значение > МаксимальноеКоличествоНапоминанийОднойУчетнойЗаписиПочты Тогда
				
				ИндексТекущегоЭлементаМассива = 0;
				
				// Удалим напоминания этой учетной записи.
				
				Пока ИндексТекущегоЭлементаМассива < МассивНапоминаний.Количество() Цикл
					
					ТекущееНапоминание = МассивНапоминаний[ИндексТекущегоЭлементаМассива];
					
					Если ТекущееНапоминание.Свойство("УчетнаяЗапись") И ТекущееНапоминание.УчетнаяЗапись = УчетнаяЗапись.Ключ Тогда
					
						 МассивНапоминаний.Удалить(ИндексТекущегоЭлементаМассива);
						 
					Иначе
						 
						 ИндексТекущегоЭлементаМассива = ИндексТекущегоЭлементаМассива + 1;
					
					КонецЕсли; 
					
				КонецЦикла;
				
				// Создадим одно общее напоминание для этой учетной записи.
				
				ДатаОповещения = ТекущаяДатаСеанса();
				
				ТекстНапоминания =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='По учетной записи %1 новых писем: %2';
					|en='%1 for new messages by account'"),
						УчетнаяЗапись.Ключ,
						УчетнаяЗапись.Значение);
					
				СтруктураНапоминания = Новый Структура;
				СтруктураНапоминания.Вставить("Важность",           2);
				СтруктураНапоминания.Вставить("ДатаНачала",         ДатаОповещения);
				СтруктураНапоминания.Вставить("Предмет",            УчетнаяЗапись.Ключ);
				СтруктураНапоминания.Вставить("Содержание",         ТекстНапоминания);
				СтруктураНапоминания.Вставить("Пользователь",       Пользователи.ТекущийПользователь());
				СтруктураНапоминания.Вставить("ДатаОповещения",     ДатаОповещения);
				СтруктураНапоминания.Вставить("Счетчик",            0);
				СтруктураНапоминания.Вставить("ВидОповещения",      Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах);
				// Определим срок исполнения
				СрокИсполнения = ВычислитьСрокИсполнения(СтруктураНапоминания);
				СтруктураНапоминания.Вставить("СрокИсполнения",     СрокИсполнения);
				// Получим представление объекта.
				ПредметПредставление = CRM_ОбщегоНазначенияСервер.ПолучитьПредставлениеПредметаДокумента(УчетнаяЗапись.Ключ);
				СтруктураНапоминания.Вставить("ПредметПредставление", ПредметПредставление);
				СтруктураНапоминания.Вставить("УчетнаяЗапись",      УчетнаяЗапись.Ключ);
				СтруктураНапоминания.Вставить("Просмотрено",        Ложь);
				КлючУникальности = СтрШаблон("%1-%2", УчетнаяЗапись.Ключ.УникальныйИдентификатор(), 
					Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах.УникальныйИдентификатор());
				СтруктураНапоминания.Вставить("КлючУникальности",   КлючУникальности);
				СтруктураНапоминания.Вставить("Идентификатор",      Новый УникальныйИдентификатор);
				СтруктураНапоминания.Вставить("Партнер",            Справочники.Партнеры.ПустаяСсылка());
				СтруктураНапоминания.Вставить("КонтактноеЛицо",     Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
				
				МассивНапоминаний.Добавить(СтруктураНапоминания);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НапоминанияОСообщенияхМессенджеров Тогда
		
		Для каждого УчетнаяЗапись Из СоответствиеУчетныхЗаписейИКоличестваСообщений Цикл
			
			Если УчетнаяЗапись.Значение > МаксимальноеКоличествоНапоминанийОднойУчетнойЗаписиМессенджеров Тогда
				
				ИндексТекущегоЭлементаМассива = 0;
				
				// Удалим напоминания этой учетной записи.
				
				Пока ИндексТекущегоЭлементаМассива < МассивНапоминаний.Количество() Цикл
					
					ТекущееНапоминание = МассивНапоминаний[ИндексТекущегоЭлементаМассива];
					
					Если ТекущееНапоминание.Свойство("УчетнаяЗапись") И ТекущееНапоминание.УчетнаяЗапись = УчетнаяЗапись.Ключ Тогда
					
						 МассивНапоминаний.Удалить(ИндексТекущегоЭлементаМассива);
						 
					Иначе
						 
						 ИндексТекущегоЭлементаМассива = ИндексТекущегоЭлементаМассива + 1;
					
					КонецЕсли; 
					
				КонецЦикла;
				
				// Создадим одно общее напоминание для этой учетной записи.
				
				ДатаОповещения = ТекущаяДатаСеанса();
				
				ТекстНапоминания =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='По учетной записи %1 новых сообщений: %2';
					|en='%1 for new messages by account'"),
						УчетнаяЗапись.Ключ,
						УчетнаяЗапись.Значение);
					
				СтруктураНапоминания = Новый Структура;
				СтруктураНапоминания.Вставить("Важность",           2);
				СтруктураНапоминания.Вставить("ДатаНачала",         ДатаОповещения);
				СтруктураНапоминания.Вставить("Предмет",            УчетнаяЗапись.Ключ);
				СтруктураНапоминания.Вставить("Содержание",         ТекстНапоминания);
				СтруктураНапоминания.Вставить("Пользователь",       Пользователи.ТекущийПользователь());
				СтруктураНапоминания.Вставить("ДатаОповещения",     ДатаОповещения);
				СтруктураНапоминания.Вставить("Счетчик",            0);
				СтруктураНапоминания.Вставить("ВидОповещения",      Справочники.CRM_ВидыОповещений.ОповещатьОНовыхСообщенияхМессенджеров);
				// Определим срок исполнения
				СрокИсполнения = ВычислитьСрокИсполнения(СтруктураНапоминания);
				СтруктураНапоминания.Вставить("СрокИсполнения",     СрокИсполнения);
				// Получим представление объекта.
				ПредметПредставление = CRM_ОбщегоНазначенияСервер.ПолучитьПредставлениеПредметаДокумента(УчетнаяЗапись.Ключ);
				СтруктураНапоминания.Вставить("ПредметПредставление", ПредметПредставление);
				СтруктураНапоминания.Вставить("УчетнаяЗапись",      УчетнаяЗапись.Ключ);
				СтруктураНапоминания.Вставить("Просмотрено",        Ложь);
				КлючУникальности = СтрШаблон("%1-%2", УчетнаяЗапись.Ключ.УникальныйИдентификатор(), 
					Справочники.CRM_ВидыОповещений.ОповещатьОНовыхСообщенияхМессенджеров.УникальныйИдентификатор());
				СтруктураНапоминания.Вставить("КлючУникальности",   КлючУникальности);
				СтруктураНапоминания.Вставить("Идентификатор",      Новый УникальныйИдентификатор);
				СтруктураНапоминания.Вставить("Партнер",            Справочники.Партнеры.ПустаяСсылка());
				СтруктураНапоминания.Вставить("КонтактноеЛицо",     Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
				
				МассивНапоминаний.Добавить(СтруктураНапоминания);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивНапоминаний;
	
КонецФункции // ПолучитьНапоминания()

// Процедура создает новое напоминание для объекта.
//
// Параметры:
//  Объект			 - Произвольный	 - Объект напоминания.
//  ТекстНапоминания - Строка		 - Текст напоминания.
//  ДопПараметры	 - Структура	 - Дополнительные параметры.
//  ДатаНапоминания	 - Дата			 - Дата напоминания.
//  ДляТекущего		 - Булево		 - Создать напоминания для текущего пользователя.
//
Процедура ДобавитьНапоминание(Объект, ТекстНапоминания = Неопределено, ДопПараметры = Неопределено,
	 ДатаНапоминания = Неопределено,
	 ДляТекущего = Ложь) Экспорт
	
	Если Не ДопПараметры = Неопределено 
		И ДопПараметры.Свойство("ДатаАктуальности")
		И Не ЗначениеЗаполнено(ДопПараметры.ДатаАктуальности) Тогда
		
		СекундВСутках = 24 * 60 * 60;
		СрокАктуальностиПоУмолчанию = Константы.CRM_СрокАктуальностиНапоминанийПоУмолчанию.Получить();
		ДопПараметры.ДатаАктуальности = ТекущаяДатаСеанса() + СрокАктуальностиПоУмолчанию * СекундВСутках;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
		Менеджер = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		Менеджер.Пользователь		= Пользователи.ТекущийПользователь();
		Менеджер.Предмет			= Объект;
		Менеджер.ДатаНачала			= ТекущаяДатаСеанса();
		Менеджер.Содержание			= ТекстНапоминания;
		Менеджер.ДатаОповещения		= ДатаНапоминания;
		Менеджер.Идентификатор		= Новый УникальныйИдентификатор();
		Менеджер.Важность			= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		Если НЕ ДопПараметры = Неопределено Тогда
			
			Менеджер.Пользователь	= ДопПараметры.Пользователь;
			Менеджер.Предмет		= Объект;
			Менеджер.Содержание		= ТекстНапоминания;
			Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
			
			Менеджер.ДатаНачала		= Объект.ПлановаяДата;
			Менеджер.ДатаОповещения	= ДопПараметры.ДатаОповещения;
			Менеджер.СрокОповещения	= ДопПараметры.СрокОповещения;
			Менеджер.Периодичность	= ДопПараметры.Периодичность;
			Менеджер.ВидОповещения	= ДопПараметры.ВидОповещения;
			Менеджер.ДатаАктуальности = ДопПараметры.ДатаАктуальности;
			
		КонецЕсли;
		Менеджер.Партнер = Объект.Партнер;
		Менеджер.КонтактноеЛицо = Объект.КонтактноеЛицо;
		
		Менеджер.Записать();
	ИначеЕсли ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Менеджер = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		Менеджер.Пользователь		= Пользователи.ТекущийПользователь();
		Менеджер.Предмет			= Объект;
		Менеджер.ДатаНачала			= ТекущаяДатаСеанса();
		Менеджер.Содержание			= ТекстНапоминания;
		Если ЗначениеЗаполнено(Объект.Важность) Тогда
			Если Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная Тогда
				Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
			ИначеЕсли Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая Тогда
				Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Высокая;
			Иначе
				Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Низкая;
			КонецЕсли;
		Иначе
			Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		КонецЕсли;		
		Менеджер.ДатаОповещения		= ДатаНапоминания;
		Менеджер.Идентификатор		= Новый УникальныйИдентификатор();
		
		Если НЕ ДопПараметры = Неопределено Тогда
			Менеджер.Пользователь	= ДопПараметры.Пользователь;
			Менеджер.ДатаНачала		= Объект.Дата;
			Менеджер.ДатаОповещения	= ДопПараметры.ДатаОповещения;
			Менеджер.СрокОповещения	= ДопПараметры.СрокОповещения;
			Менеджер.Периодичность	= ДопПараметры.Периодичность;
			Менеджер.ВидОповещения	= ДопПараметры.ВидОповещения;
			Менеджер.ДатаАктуальности = ДопПараметры.ДатаАктуальности;
			Менеджер.СозданоПриАдресацииНаРоль = ?(ДопПараметры.Свойство("СозданоПриАдресацииНаРоль"),
				ДопПараметры.СозданоПриАдресацииНаРоль, Ложь);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.БизнесПроцесс) 
			И ТипЗнч(Объект.БизнесПроцесс) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
			Менеджер.Партнер = ?(ЗначениеЗаполнено(Объект.CRM_Партнер), Объект.CRM_Партнер, Объект.БизнесПроцесс.Партнер);
			Менеджер.КонтактноеЛицо = ?(ЗначениеЗаполнено(Объект.CRM_КонтактноеЛицо), Объект.CRM_КонтактноеЛицо, 
			Объект.БизнесПроцесс.КонтактноеЛицо);
		Иначе
			Менеджер.Партнер = Объект.CRM_Партнер;
			Менеджер.КонтактноеЛицо = Объект.CRM_КонтактноеЛицо;
		КонецЕсли;
		
		Менеджер.Записать();
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		
		Менеджер = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		Менеджер.Предмет		= Объект;
		Менеджер.Идентификатор	= Новый УникальныйИдентификатор();
		Менеджер.Содержание		= ТекстНапоминания;
		Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Высокая;
		Если ДопПараметры = Неопределено Тогда
			Менеджер.Пользователь		= сфпСофтФонПроСервер.сфпТекущийПользователь();
			Менеджер.ДатаНачала			= ДатаНапоминания;
			Менеджер.ДатаОповещения		= ДатаНапоминания;
			Менеджер.СрокОповещения		= Неопределено;
			Менеджер.Периодичность		= Неопределено;
			Менеджер.ВидОповещения		= Неопределено;
			Менеджер.ДатаАктуальности	= КонецДня(ДатаНапоминания);
		Иначе
			Менеджер.Пользователь		= ДопПараметры.Пользователь;
			Менеджер.ДатаНачала			= ДопПараметры.ДатаОповещения;
			Менеджер.ДатаОповещения		= ДопПараметры.ДатаОповещения;
			Менеджер.СрокОповещения		= ДопПараметры.СрокОповещения;
			Менеджер.Периодичность		= ДопПараметры.Периодичность;
			Менеджер.ВидОповещения		= ДопПараметры.ВидОповещения;
			Менеджер.ДатаАктуальности	= ДопПараметры.ДатаАктуальности;
		КонецЕсли;	
		Менеджер.Записать();
			
	ИначеЕсли (ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры"))
		 ИЛИ (ТипЗнч(Объект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
		Менеджер = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		Менеджер.Пользователь	= ?(ДопПараметры <> Неопределено, ДопПараметры.Пользователь,
			 Пользователи.ТекущийПользователь());
		Менеджер.Предмет		= Объект;
		Менеджер.ДатаНачала		= ?(ДопПараметры <> Неопределено, ДопПараметры.ДатаОповещения, ДатаНапоминания);
		Менеджер.ДатаОповещения	= ?(ДопПараметры <> Неопределено, ДопПараметры.ДатаОповещения, ДатаНапоминания);
		Менеджер.Идентификатор		= Новый УникальныйИдентификатор();
		Менеджер.Содержание		= ТекстНапоминания;
		Менеджер.СрокОповещения	= ?(ДопПараметры <> Неопределено, ДопПараметры.СрокОповещения, Неопределено);
		Менеджер.Периодичность	= ?(ДопПараметры <> Неопределено, ДопПараметры.Периодичность, Неопределено);
		Менеджер.ВидОповещения	= ?(ДопПараметры <> Неопределено, ДопПараметры.ВидОповещения, Неопределено);
		Менеджер.ДатаАктуальности = ?(ДопПараметры <> Неопределено, ДопПараметры.ДатаАктуальности, Неопределено);
		Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Высокая;
		Если (ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры")) Тогда
			Менеджер.Партнер = Объект;
		Иначе
			Менеджер.Партнер = Объект.Владелец;
			Менеджер.КонтактноеЛицо = Объект;
		КонецЕсли;
		Менеджер.Записать();
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.CRM_ОтчетОРаботе") 
		ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.CRM_ПланированиеВоронкиПродаж") Тогда			
		
		Менеджер = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		Менеджер.Пользователь	= ?(ДопПараметры <> Неопределено, ДопПараметры.Пользователь,
			 Пользователи.ТекущийПользователь());
		Менеджер.Предмет		= Объект;
		Менеджер.ДатаНачала		= ?(ДопПараметры <> Неопределено, ДопПараметры.ДатаОповещения, ДатаНапоминания);
		Менеджер.ДатаОповещения	= ?(ДопПараметры <> Неопределено, ДопПараметры.ДатаОповещения, ДатаНапоминания);
		Менеджер.Идентификатор	= Новый УникальныйИдентификатор();
		Менеджер.Содержание		= ТекстНапоминания;
		Менеджер.СрокОповещения	= ?(ДопПараметры <> Неопределено, ДопПараметры.СрокОповещения, Неопределено);
		Менеджер.Периодичность	= ?(ДопПараметры <> Неопределено, ДопПараметры.Периодичность, Неопределено);
		Менеджер.ВидОповещения	= ?(ДопПараметры <> Неопределено, ДопПараметры.ВидОповещения, Неопределено);
		Менеджер.ДатаАктуальности = ?(ДопПараметры <> Неопределено, ДопПараметры.ДатаАктуальности, Неопределено);
		Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Высокая;
		Менеджер.Записать();		
	ИначеЕсли ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ОповещениеОВходящемЭлектронномПисьме") Тогда
		
		Менеджер = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		Менеджер.Пользователь	= ДопПараметры.ПолучательОповещения;
		Менеджер.Предмет		= Объект;
		Менеджер.ДатаНачала		= ДатаНапоминания;
		Менеджер.ДатаОповещения	= ДатаНапоминания;
		Менеджер.Идентификатор	= Новый УникальныйИдентификатор();
		Менеджер.Содержание		= ТекстНапоминания;
		Менеджер.СрокОповещения	= Неопределено;
		Менеджер.Периодичность	= Неопределено;
		Менеджер.ВидОповещения	= Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах;
		Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		Менеджер.ДатаАктуальности = ДопПараметры.ДатаАктуальности;
		Менеджер.Записать();
		
	ИначеЕсли ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ОповещениеОНеотправленныхПисьмах") Тогда
		
		Менеджер = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		Менеджер.Пользователь	= ДопПараметры.ПолучательОповещения;
		Менеджер.Предмет		= Объект;
		Менеджер.ДатаНачала		= ДатаНапоминания;
		Менеджер.ДатаОповещения	= ДатаНапоминания;
		Менеджер.Идентификатор	= Новый УникальныйИдентификатор();
		Менеджер.Содержание		= ТекстНапоминания;
		Менеджер.СрокОповещения	= Неопределено;
		Менеджер.Периодичность	= Неопределено;
		//Менеджер.ВидОповещения	= Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах;
		Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Высокая;
		Менеджер.Записать();
		
	ИначеЕсли ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ОповещениеОСообщенииМессенджера") Тогда
		
		Менеджер = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		Менеджер.Пользователь	= ДопПараметры.ПолучательОповещения;
		Менеджер.Предмет		= Объект.Диалог;
		Менеджер.ДатаНачала		= ДатаНапоминания;
		Менеджер.ДатаОповещения	= ДатаНапоминания;
		Менеджер.Идентификатор	= Новый УникальныйИдентификатор();
		Менеджер.Содержание		= ТекстНапоминания;
		Менеджер.СрокОповещения	= Неопределено;
		Менеджер.Периодичность	= Неопределено;
		Менеджер.ВидОповещения	= Справочники.CRM_ВидыОповещений.ОповещатьОНовыхСообщенияхМессенджеров;
		Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		Менеджер.ДатаАктуальности = ДопПараметры.ДатаАктуальности;
		Менеджер.Записать();
		
	Иначе
		
		Менеджер = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		
		Если ДляТекущего Тогда
		
			Менеджер.Пользователь = Пользователи.ТекущийПользователь();	
		
		ИначеЕсли ДопПараметры <> Неопределено И ДопПараметры.Свойство("Пользователь")
			 И ЗначениеЗаполнено(ДопПараметры.Пользователь) Тогда
			
			Менеджер.Пользователь = ДопПараметры.Пользователь;
			
		Иначе
			
			Менеджер.Пользователь = ПолучитьОтветственногоОбъектаНапоминания(Объект);
			
		КонецЕсли;		
		
		Менеджер.Предмет			= Объект;
		Менеджер.ДатаНачала			= ТекущаяДатаСеанса();
		Менеджер.ДатаОповещения		= ?(ДатаНапоминания <> Неопределено, ДатаНапоминания, ТекущаяДатаСеанса());
		Менеджер.Идентификатор		= Новый УникальныйИдентификатор();
		Менеджер.Содержание			= ТекстНапоминания;
		Если Объект.Метаданные().Реквизиты.Найти("Важность") <> Неопределено Тогда
			Менеджер.Важность		= Объект.Важность;
		Иначе
			Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Менеджер.Важность) Тогда
			Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		КонецЕсли;
		
		Если Объект.Метаданные().Реквизиты.Найти("Партнер") <> Неопределено Тогда
			Менеджер.Партнер		= Объект.Партнер;
		ИначеЕсли Объект.Метаданные().Реквизиты.Найти("CRM_Партнер") <> Неопределено Тогда
			Менеджер.Партнер		= Объект.CRM_Партнер;
		КонецЕсли;
		
		Если Объект.Метаданные().Реквизиты.Найти("КонтактноеЛицо") <> Неопределено Тогда
			Менеджер.КонтактноеЛицо	= Объект.КонтактноеЛицо;
		ИначеЕсли Объект.Метаданные().Реквизиты.Найти("CRM_КонтактноеЛицо") <> Неопределено Тогда
			Менеджер.КонтактноеЛицо	= Объект.CRM_КонтактноеЛицо;
		КонецЕсли;
		
		Если НЕ ДопПараметры = Неопределено Тогда
			Менеджер.Пользователь	= ДопПараметры.Пользователь;
			Менеджер.ДатаОповещения	= ДопПараметры.ДатаОповещения;
			Менеджер.СрокОповещения	= ДопПараметры.СрокОповещения;
			Менеджер.Периодичность	= ДопПараметры.Периодичность;
			Менеджер.ВидОповещения	= ДопПараметры.ВидОповещения;
			Менеджер.ДатаАктуальности = ДопПараметры.ДатаАктуальности;
		КонецЕсли;
		
		Менеджер.Записать();
	КонецЕсли;
КонецПроцедуры // ДобавитьНапоминание()

// Функция возвращает ключи напоминаний о входящих письмах польователя для учетной записи.
// 
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись;
//  Пользователь - СправочникСсылка.Пользователи - пользователь;
//
// Возвращаемое значение:
//  Структура - ключ записи регистра сведений CRM_Напоминания. Поля:
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь.
//   * Предмет - ДокументСсылка.ЭлектронноеПисьмоВходящее - Предмет.
//   * ДатаНачала - Дата - Дата начала.
//   * ДатаОповещения - Дата - Дата оповещения.
//
Функция ПолучитьКлючиНапоминанийОВходящихЭлектронныхПисьмахУчетнойЗаписиПользователя(УчетнаяЗапись,
	 Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_Напоминания.Пользователь КАК Пользователь,
	               |	CRM_Напоминания.Предмет КАК Предмет,
	               |	CRM_Напоминания.ДатаНачала КАК ДатаНачала,
	               |	CRM_Напоминания.ДатаОповещения КАК ДатаОповещения,
	               |	CRM_Напоминания.Идентификатор КАК Идентификатор
	               |ПОМЕСТИТЬ НапоминанияПользователя
	               |ИЗ
	               |	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
	               |ГДЕ
	               |	CRM_Напоминания.ВидОповещения = &ВидОповещения
	               |	И CRM_Напоминания.Пользователь = &Пользователь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НапоминанияПользователя.Пользователь КАК Пользователь,
	               |	НапоминанияПользователя.Предмет КАК Предмет,
	               |	НапоминанияПользователя.ДатаНачала КАК ДатаНачала,
	               |	НапоминанияПользователя.ДатаОповещения КАК ДатаОповещения,
	               |	НапоминанияПользователя.Идентификатор КАК Идентификатор
	               |ИЗ
	               |	НапоминанияПользователя КАК НапоминанияПользователя
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	               |		ПО НапоминанияПользователя.Предмет = ЭлектронноеПисьмоВходящее.Ссылка
	               |ГДЕ
	               |	ЭлектронноеПисьмоВходящее.УчетнаяЗапись = &УчетнаяЗапись";
				  
	Запрос.УстановитьПараметр("ВидОповещения", Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивКлючей = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		КлючНапоминания = Новый Структура("Пользователь, Предмет, ДатаНачала, ДатаОповещения, Идентификатор"); 
		
		ЗаполнитьЗначенияСвойств(КлючНапоминания, Выборка);
		
		МассивКлючей.Добавить(КлючНапоминания);		
	
	КонецЦикла;
	
	Возврат МассивКлючей;
	
КонецФункции// ПолучитьКлючиНапоминанийОВходящихЭлектронныхПисьмахУчетнойЗаписиПользователя()

// Функция возвращает ключи напоминаний о сообщениях мессенджеров пользователя для учетной записи.
// 
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.CRM_УчетныеЗаписиМессенджеров - учетная запись;
//  Пользователь - СправочникСсылка.Пользователи - пользователь;
//
// Возвращаемое значение:
//  Структура - ключ записи регистра сведений CRM_Напоминания. Поля:
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь.
//   * Предмет - ДокументСсылка.ЭлектронноеПисьмоВходящее - Предмет.
//   * ДатаНачала - Дата - Дата начала.
//   * ДатаОповещения - Дата - Дата оповещения.
//
Функция ПолучитьКлючиНапоминанийОСообщенияхМессенджеровУчетнойЗаписиПользователя(УчетнаяЗапись, Пользователь) Экспорт
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
		|	Напоминания.Пользователь КАК Пользователь,
		|	Напоминания.Предмет КАК Предмет,
		|	Напоминания.ДатаНачала КАК ДатаНачала,
		|	Напоминания.ДатаОповещения КАК ДатаОповещения,
		|	Напоминания.Идентификатор КАК Идентификатор,
		|	CRM_Диалоги.УчетнаяЗапись КАК УчетнаяЗапись
		|ИЗ
		|	РегистрСведений.CRM_Напоминания КАК Напоминания
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.CRM_Диалоги КАК CRM_Диалоги
		|		ПО Напоминания.Предмет = CRM_Диалоги.Ссылка
		|ГДЕ
		|	Напоминания.Просмотрено = ЛОЖЬ
		|	И Напоминания.Пользователь = &Пользователь
		|	И Напоминания.ВидОповещения = &ВидОповещения
		|	И Напоминания.ДатаОповещения < &ДатаОповещения
		|	И CRM_Диалоги.УчетнаяЗапись = &УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("ВидОповещения", Справочники.CRM_ВидыОповещений.ОповещатьОНовыхСообщенияхМессенджеров);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ДатаОповещения", ТекущаяДата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивКлючей = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		КлючНапоминания = Новый Структура("Пользователь, Предмет, ДатаНачала, ДатаОповещения, Идентификатор"); 
		
		ЗаполнитьЗначенияСвойств(КлючНапоминания, Выборка);
		
		МассивКлючей.Добавить(КлючНапоминания);		
	
	КонецЦикла;
	
	Возврат МассивКлючей;
	
КонецФункции// ПолучитьКлючиНапоминанийОСообщенияхМессенджеровУчетнойЗаписиПользователя()

// Функция удаляет напоминания о входящем письме.
//
// Параметры:
//  ВходящееПисьмо	 - ДокументСсылка - Ссылка на входящее письмо.
// 
// Возвращаемое значение:
//  Булево - Признак удаления напоминания. 
//
Функция CRM_УдалитьНапоминанияОПисьме(ВходящееПисьмо) Экспорт
	
	УдаленыНапоминания = Ложь;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_Напоминания.Пользователь КАК Пользователь,
	               |	CRM_Напоминания.Предмет КАК Предмет,
	               |	CRM_Напоминания.ДатаНачала КАК ДатаНачала,
	               |	CRM_Напоминания.ДатаОповещения КАК ДатаОповещения,
	               |	CRM_Напоминания.Идентификатор КАК Идентификатор
	               |ИЗ
	               |	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
	               |ГДЕ
	               |	CRM_Напоминания.ВидОповещения = &ВидОповещения
	               |	И CRM_Напоминания.Предмет = &Предмет
				   |	И CRM_Напоминания.Пользователь = &ТекущийПользователь";
	
	Запрос.УстановитьПараметр("ВидОповещения", Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах);
	Запрос.УстановитьПараметр("Предмет", ВходящееПисьмо);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		РегистрСведенийМенеджерЗаписи = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(РегистрСведенийМенеджерЗаписи, Выборка);
		
		РегистрСведенийМенеджерЗаписи.Прочитать();
		
		Если РегистрСведенийМенеджерЗаписи.Выбран() Тогда
		
			РегистрСведенийМенеджерЗаписи.Удалить();
			
			УдаленыНапоминания = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Возврат УдаленыНапоминания;

КонецФункции

// Процедура удаляет записи с истекшим сроком актуальности.
//
Процедура УдалитьНеактуальныеНапоминания() Экспорт
	
	ИмяЗадания = "CRM_УдалениеНеактуальныхНапоминаний";
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания[ИмяЗадания]);
	
	Если Не ПолучитьФункциональнуюОпцию("CRM_ИспользоватьНапоминанияПользователя") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ДнейАктуальности = Константы.CRM_СрокАктуальностиНапоминанийПоУмолчанию.Получить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Напоминания.Пользователь КАК Пользователь,
	|	Напоминания.Предмет КАК Предмет,
	|	Напоминания.ДатаНачала КАК ДатаНачала,
	|	Напоминания.ДатаОповещения КАК ДатаОповещения,
	|	Напоминания.Идентификатор КАК Идентификатор,
	|	Напоминания.ДатаАктуальности КАК ДатаАктуальности
	|ПОМЕСТИТЬ НеактуальныеНапоминания
	|ИЗ
	|	РегистрСведений.CRM_Напоминания КАК Напоминания
	|ГДЕ
	|	Напоминания.ДатаАктуальности < &ТекущаяДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеактуальныеНапоминания.Пользователь КАК Пользователь,
	|	НеактуальныеНапоминания.Предмет КАК Предмет,
	|	НеактуальныеНапоминания.ДатаНачала КАК ДатаНачала,
	|	НеактуальныеНапоминания.ДатаОповещения КАК ДатаОповещения,
	|	НеактуальныеНапоминания.Идентификатор КАК Идентификатор
	|ИЗ
	|	НеактуальныеНапоминания КАК НеактуальныеНапоминания
	|ГДЕ
	|	НеактуальныеНапоминания.ДатаАктуальности <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НеактуальныеНапоминания.Пользователь,
	|	НеактуальныеНапоминания.Предмет,
	|	НеактуальныеНапоминания.ДатаНачала,
	|	НеактуальныеНапоминания.ДатаОповещения,
	|	НеактуальныеНапоминания.Идентификатор
	|ИЗ
	|	НеактуальныеНапоминания КАК НеактуальныеНапоминания
	|ГДЕ
	|	НеактуальныеНапоминания.ДатаАктуальности = ДАТАВРЕМЯ(1, 1, 1)
	|	И ДОБАВИТЬКДАТЕ(НеактуальныеНапоминания.ДатаНачала, ДЕНЬ, &ДнейАктуальности) < &ТекущаяДата");
	
	Запрос.Параметры.Вставить("ТекущаяДата", ТекущаяДата);
	Запрос.Параметры.Вставить("ДнейАктуальности", ДнейАктуальности);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет удаление напоминания о предмете.
//
// Параметры:
//  Предмет			 - ПланОбменаСсылка, БизнесПроцессСсылка, СправочникСсылка.CRM_Диалоги,
//                     ДокументСсылка, ПланВидовРасчетаСсылка, ЗадачаСсылка, ПланВидовХарактеристикСсылка,
//                     ПланСчетовСсылка, СправочникСсылка	 - Предмет напоминания.
//  ВидОповещения	 - СправочникСсылка.CRM_ВидыОповещений	 - Вид оповещения.
//
Процедура УдалитьНапоминанияОПредмете(Предмет, ВидОповещения) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_Напоминания.Пользователь КАК Пользователь,
	               |	CRM_Напоминания.Предмет КАК Предмет,
	               |	CRM_Напоминания.ДатаНачала КАК ДатаНачала,
	               |	CRM_Напоминания.ДатаОповещения КАК ДатаОповещения,
	               |	CRM_Напоминания.Идентификатор КАК Идентификатор
	               |ИЗ
	               |	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
	               |ГДЕ
	               |	CRM_Напоминания.ВидОповещения = &ВидОповещения
	               |	И CRM_Напоминания.Предмет = &Предмет";
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("ВидОповещения", ВидОповещения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		РегистрСведенийМенеджерЗаписи = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(РегистрСведенийМенеджерЗаписи, Выборка);
		
		РегистрСведенийМенеджерЗаписи.Прочитать();
		
		Если РегистрСведенийМенеджерЗаписи.Выбран() Тогда
		
			РегистрСведенийМенеджерЗаписи.Удалить();
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//
//
Функция ПолучитьПериодОбновленияНапоминаний() Экспорт
	
	ПериодОбновления = Константы.CRM_ПериодПроверкиНовыхНапоминаний.Получить();
	
	Возврат ?(ПериодОбновления = 0, 15, ПериодОбновления);
	
КонецФункции

// Функция вычисляет срок исполнения напоминания.
//
// Параметры:
//	ДанныеСтроки	- СтрокаТабличнойЧасти	- Строка с данными напоминания.
//
// Возвращаемое значение:
//	Строка	- Текст срока исполнения напоминания.
//
Функция ВычислитьСрокИсполнения(ДанныеСтроки)
	ТекстСрокаИсполнения = "";
	// Вычислим срок исполнения
 	СрокИсполнения = Цел((ДанныеСтроки.ДатаОповещения - ТекущаяДатаСеанса()) / 60); // минут
	СтрокаПросрочено = НСтр("ru=' осталось';en=' left'");
	СтрокаСоздано  = "";
	
	Если СрокИсполнения < 0 Тогда
		СрокИсполнения = - СрокИсполнения;
		Если ДанныеСтроки.ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеКонтрольныеТочки Или
			 ДанныеСтроки.ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи Тогда
			СтрокаПросрочено = НСтр("ru=' просрочено';en=' expired'");
		Иначе
			СтрокаСоздано = НСтр("ru='Создано ';en='Created '");
			СтрокаПросрочено = НСтр("ru=' назад';en=' back'");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СрокИсполнения = 0 Тогда	
		КоличествоМинут = СрокИсполнения % 60;
		КоличествоЧасов = (СрокИсполнения - КоличествоМинут) / 60;
		КоличествоДней  = Цел(КоличествоЧасов / 24);
		КоличествоЧасов = КоличествоЧасов % 24;
		// Определим текст для вывода дней.
		Если КоличествоДней > 0 Тогда
			Если КоличествоДней < 21 Тогда
				КоличествоЕдиницыДней = КоличествоДней;
			ИначеЕсли КоличествоДней > 20 И КоличествоДней < 1001 Тогда
				КоличествоЕдиницыДней = КоличествоДней - (Цел(КоличествоДней / 10)) * 10;
			ИначеЕсли КоличествоДней > 1000 И КоличествоДней < 10001 Тогда
				КоличествоЕдиницыДней = КоличествоДней - (Цел(КоличествоДней / 100)) * 100;
			Иначе
				КоличествоЕдиницыДней = КоличествоДней - (Цел(КоличествоДней / 100)) * 100;
			КонецЕсли;
			Если КоличествоЕдиницыДней > 20 Тогда
				КоличествоЕдиницыДней = КоличествоДней - (Цел(КоличествоДней / 10)) * 10;
			КонецЕсли;
			Если КоличествоЕдиницыДней = 1 Тогда
				ТекстДней = НСтр("ru=' день';en='day'");
			ИначеЕсли КоличествоЕдиницыДней > 1 И КоличествоЕдиницыДней < 5 Тогда
				ТекстДней = НСтр("ru=' дня';en=' day'");
			ИначеЕсли КоличествоЕдиницыДней > 4 И КоличествоЕдиницыДней < 21 Тогда
				ТекстДней = НСтр("ru=' дней';en=' days'");
			Иначе
				ТекстДней = НСтр("ru=' дней';en=' days'");
			КонецЕсли;
		КонецЕсли; 
		// Определим текст для вывода часов.
		Если КоличествоЧасов > 0 Тогда
			Если КоличествоЧасов < 21 Тогда
				КоличествоЕдиницыЧасов = КоличествоЧасов;
			Иначе
				КоличествоЕдиницыЧасов = КоличествоЧасов - (Цел(КоличествоЧасов / 10)) * 10;
			КонецЕсли;
			Если КоличествоЕдиницыЧасов = 1 Тогда
				ТекстЧасов = НСтр("ru=' час';en='hour'");
			ИначеЕсли КоличествоЕдиницыЧасов > 1 И КоличествоЕдиницыЧасов < 5 Тогда
				ТекстЧасов = НСтр("ru=' часа';en='hours'");
			Иначе
				ТекстЧасов = НСтр("ru=' часов';en='hours'");
			КонецЕсли;
		КонецЕсли; 
		// Определим текст для вывода минут.
		Если КоличествоМинут > 0 Тогда
			Если КоличествоМинут < 21 Тогда
				КоличествоЕдиницыМинут = КоличествоМинут;
			Иначе
				КоличествоЕдиницыМинут = КоличествоМинут - (Цел(КоличествоМинут / 10)) * 10;
			КонецЕсли;
			Если КоличествоЕдиницыМинут = 1 Тогда
				ТекстМинут = НСтр("ru=' минута';en=' min'");
			ИначеЕсли КоличествоЕдиницыМинут > 1 И КоличествоЕдиницыМинут < 5 Тогда
				ТекстМинут = НСтр("ru=' минуты';en=' minutes'");
			Иначе
				ТекстМинут = НСтр("ru=' минут';en=' minutes'");
			КонецЕсли;
		КонецЕсли;
		
		Если КоличествоДней > 2 Тогда
		
			ТекстСрокаИсполнения = Строка(КоличествоДней) + ТекстДней
								   + СтрокаПросрочено;
							   
		Иначе
			ТекстСрокаИсполнения = ?(КоличествоДней > 0, Строка(КоличествоДней) + ТекстДней + " ", "")
								   + ?(КоличествоЧасов > 0, Строка(КоличествоЧасов) + ТекстЧасов + " ", "")
								   + ?(КоличествоМинут > 0, Строка(КоличествоМинут) + ТекстМинут, "")
								   + СтрокаПросрочено;
		
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтрокаСоздано) Тогда
			ТекстСрокаИсполнения = СтрокаСоздано + ТекстСрокаИсполнения;
		КонецЕсли;							   
	КонецЕсли; 
	Возврат ТекстСрокаИсполнения; 
КонецФункции // ВычислитьСрокИсполнения()

// Функция возвращает ответственного объекта напоминания.
//
// Параметры:
//	Объект				- Произвольный  - Объект напоминания.
//
// Возвращаемое значение:
//	СправочникСсылка.Пользователи	- Ответственный объекта напоминания.
//
Функция ПолучитьОтветственногоОбъектаНапоминания(Объект)
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Участники.Пользователь КАК Пользователь
		|ИЗ
		|	Документ.CRM_ЭтапКалендарногоПлана.Участники КАК Участники
		|ГДЕ
		|	Участники.Ссылка = &Ссылка
		|	И Участники.Ответственный = ИСТИНА
		|");
		Запрос.УстановитьПараметр("Ссылка", Объект);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Пользователь;
		Иначе
			Возврат Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
		Возврат Объект.Менеджер;
	Иначе	
		Возврат Объект.Ответственный;
	КонецЕсли;
КонецФункции

// Процедура удаляет напоминание для объекта.
//
// Параметры:
//	Объект	- Произвольный  - Объект напоминания.
//
Процедура УдалитьНапоминание(Объект) Экспорт
	Набор = РегистрыСведений.CRM_Напоминания.СоздатьНаборЗаписей();
	Если ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Набор.Отбор.Пользователь.Установить(Объект.Исполнитель);
	Иначе
		Набор.Отбор.Пользователь.Установить(Объект.Ответственный);
	КонецЕсли;
	Набор.Отбор.Предмет.Установить(Объект);
	Набор.Прочитать();
	Набор.Очистить();
	Набор.Записать();
КонецПроцедуры // УдалитьНапоминание()

// Функция возвращает период обновления напоминаний в секундах.
//
Функция ПолучитьПериодОбновленияНапоминанийВСекундах(ВидОповещения) Экспорт

	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	Если НЕ ЗначениеЗаполнено(ТекущийПользователь)
		 Или ТипЗнч(ТекущийПользователь) <> Тип("СправочникСсылка.Пользователи") Тогда
		Возврат 0;
	КонецЕсли;
	
	МассивПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(ТекущийПользователь, ВидОповещения);
	
	Если ТипЗнч(МассивПараметрыОповещения) = Тип("Массив") Тогда
	
		ПараметрыОповещения = МассивПараметрыОповещения[0];	
		
	Иначе
		
		ПараметрыОповещения = Неопределено;
	
	КонецЕсли; 
	
	ПериодОбновления = 0;
	
	Если НЕ ПараметрыОповещения = Неопределено Тогда
		
		СрокОповещения = ПараметрыОповещения.СрокОповещения;
		Периодичность = ПараметрыОповещения.Периодичность;
		
		Если Периодичность = Перечисления.CRM_ПериодичностьОповещений.Минута Тогда
			
			ПериодОбновления = СрокОповещения * 60;
		
		ИначеЕсли Периодичность = Перечисления.CRM_ПериодичностьОповещений.Час Тогда
			
			ПериодОбновления = СрокОповещения * 60 * 60;
			
		ИначеЕсли Периодичность = Перечисления.CRM_ПериодичностьОповещений.День Тогда
			
			ПериодОбновления = СрокОповещения * 60 * 60 * 24;
			
		ИначеЕсли Периодичность = Перечисления.CRM_ПериодичностьОповещений.Неделя Тогда
			
			ПериодОбновления = СрокОповещения * 60 * 60 * 24 * 7;
			
		КонецЕсли; 
		
	КонецЕсли;	
	
	Возврат ПериодОбновления;
	
КонецФункции

// Функция возвращает текст напоминания о входящем электронном письме.
//
Функция ПолучитьТекстНапоминанияОВходящемПисьме(ЭлектронноеПисьмо)

	ТекстНапоминания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Новое письмо: %1 ""%2"" от %3 (%4)';en='New message: %1 ""%2"" from %3 ( %4)'"),
																			   ЭлектронноеПисьмо.ОтправительПредставление,
																			   ЭлектронноеПисьмо.Тема,
																			   ЭлектронноеПисьмо.Дата,
																			   ЭлектронноеПисьмо.УчетнаяЗапись);																			   
	
	Возврат ТекстНапоминания;	

КонецФункции // ПолучитьТекстНапоминанияОВходящемПисьме(ЭлектронноеПисьмо)

// Функция возвращает текст напоминания о сообщении мессенджера.
//
Функция ПолучитьТекстНапоминанияОСообщенииМессенджера(СообщениеМессенджера, УчетнаяЗапись)
	
	ДлинаСообщения = СтрДлина(СообщениеМессенджера.ТекстСообщения);
	МаксимальнаяДлинаСообщения = 50;
	ТекстСообщения = ?(ДлинаСообщения <= МаксимальнаяДлинаСообщения, СообщениеМессенджера.ТекстСообщения,
		Лев(СообщениеМессенджера.ТекстСообщения, МаксимальнаяДлинаСообщения));
	
	ТекстНапоминания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Новое сообщение: %1 ""%2"" от %3 (%4)';en='New message: %1 ""%2"" from %3 ( %4)'"),
		СообщениеМессенджера.КонтактПредставление,
		ТекстСообщения,
		СообщениеМессенджера.Дата,
		УчетнаяЗапись);
	
	Возврат ТекстНапоминания;

КонецФункции

// Процедура создает напоминания о новых входящих письмах.
//
Процедура ДобавитьНапоминанияОВходящихПисьмах(МассивНовыхПисем, УчетнаяЗапись) Экспорт
	
	Если Не ИспользуютсяНапоминания() Тогда
		Возврат;
	КонецЕсли;
	
	/////////////////////////////////////////////
	// Настройки пользователей.
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ИсполнителиЗадач.Исполнитель КАК Пользователь
		|ПОМЕСТИТЬ ПользователиУчетнойЗаписи
		|ИЗ
		|	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь = ИсполнителиЗадач.РольИсполнителя
		|ГДЕ
		|	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись = &УчетнаяЗапись
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись,
		|	CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь
		|ИЗ
		|	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
		|ГДЕ
		|	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись = &УчетнаяЗапись
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПользователиУчетнойЗаписи.УчетнаяЗапись КАК УчетнаяЗапись,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПользователиУчетнойЗаписи.Пользователь) КАК КоличествоПользователей
		|ПОМЕСТИТЬ ПочтаУчетнаяЗапись
		|ИЗ
		|	ПользователиУчетнойЗаписи КАК ПользователиУчетнойЗаписи
		|
		|СГРУППИРОВАТЬ ПО
		|	ПользователиУчетнойЗаписи.УчетнаяЗапись
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПользователиУчетнойЗаписи.Пользователь КАК Пользователь,
		|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения,
		|	CRM_ОповещенияПользовательскиеНастройки.Напоминание КАК Напоминание,
		|	ВЫБОР
		|		КОГДА ПочтаУчетнаяЗапись.КоличествоПользователей = 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПерсональнаяУчетнаяЗапись
		|ИЗ
		|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПользователиУчетнойЗаписи КАК ПользователиУчетнойЗаписи
		|		ПО CRM_ОповещенияПользовательскиеНастройки.Пользователь = ПользователиУчетнойЗаписи.Пользователь,
		|	ПочтаУчетнаяЗапись КАК ПочтаУчетнаяЗапись
		|ГДЕ
		|	CRM_ОповещенияПользовательскиеНастройки.Напоминание
		|	И CRM_ОповещенияПользовательскиеНастройки.ВидОповещения = &ВидОповещения");
	
	Запрос.УстановитьПараметр("ВидОповещения", Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	ТаблицаПолучателейОповещений = Запрос.Выполнить().Выгрузить();
	
	/////////////////////////////////////////////
	// Создание напоминаний.
	
	ВыполнитьОтправкуНапоминанийПоНовымОбъектам(
		МассивНовыхПисем,
		УчетнаяЗапись,
		ТаблицаПолучателейОповещений.ВыгрузитьКолонку("Пользователь"));
	
КонецПроцедуры

// Процедура создает напоминания о новых сообщениях мессенджеров.
//
Процедура ДобавитьНапоминанияОСообщенияхМессенджеров(МассивНовыхСообщений, УчетнаяЗапись) Экспорт
	
	Если Не ИспользуютсяНапоминания() Тогда
		Возврат;
	КонецЕсли;
	
	/////////////////////////////////////////////
	// Настройки пользователей.
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ИсполнителиЗадач.Исполнитель КАК Пользователь
		|ПОМЕСТИТЬ ПользователиУчетнойЗаписи
		|ИЗ
		|	РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО CRM_УчетныеЗаписиМессенджеров.Пользователь = ИсполнителиЗадач.РольИсполнителя
		|ГДЕ
		|	CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись = &УчетнаяЗапись
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись,
		|	CRM_УчетныеЗаписиМессенджеров.Пользователь
		|ИЗ
		|	РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
		|ГДЕ
		|	CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись = &УчетнаяЗапись
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПользователиУчетнойЗаписи.УчетнаяЗапись КАК УчетнаяЗапись,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПользователиУчетнойЗаписи.Пользователь) КАК КоличествоПользователей
		|ПОМЕСТИТЬ МессенджерУчетнаяЗапись
		|ИЗ
		|	ПользователиУчетнойЗаписи КАК ПользователиУчетнойЗаписи
		|
		|СГРУППИРОВАТЬ ПО
		|	ПользователиУчетнойЗаписи.УчетнаяЗапись
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПользователиУчетнойЗаписи.Пользователь КАК Пользователь,
		|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения,
		|	CRM_ОповещенияПользовательскиеНастройки.Напоминание КАК Напоминание,
		|	ВЫБОР
		|		КОГДА МессенджерУчетнаяЗапись.КоличествоПользователей = 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПерсональнаяУчетнаяЗапись
		|ИЗ
		|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПользователиУчетнойЗаписи КАК ПользователиУчетнойЗаписи
		|		ПО CRM_ОповещенияПользовательскиеНастройки.Пользователь = ПользователиУчетнойЗаписи.Пользователь,
		|	МессенджерУчетнаяЗапись КАК МессенджерУчетнаяЗапись
		|ГДЕ
		|	CRM_ОповещенияПользовательскиеНастройки.Напоминание
		|	И CRM_ОповещенияПользовательскиеНастройки.ВидОповещения = &ВидОповещения");
	
	Запрос.УстановитьПараметр("ВидОповещения", Справочники.CRM_ВидыОповещений.ОповещатьОНовыхСообщенияхМессенджеров);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	ТаблицаПолучателейОповещений = Запрос.Выполнить().Выгрузить();
	
	/////////////////////////////////////////////
	// Создание напоминаний.
	
	ВыполнитьОтправкуНапоминанийПоНовымОбъектам(
		МассивНовыхСообщений,
		УчетнаяЗапись,
		ТаблицаПолучателейОповещений.ВыгрузитьКолонку("Пользователь"));
	
КонецПроцедуры

// Функция возвращает массив получателей напоминаний.
//
// Параметры:
//	РольИсполнителя				- СправочникСсылка - Роль исполнителя.
//	ПользователиСНапоминаниями	- Массив - Массив пользователей, у которых установлено получение напоминаний
//
// Возвращаемое значение:
//	Результат	- Массив получаетелей по роли с учетом тех, у кого включены напоминания.
//
Функция ПолучитьПолучателейНапоминанийПоРоли(РольИсполнителя, ПользователиСНапоминаниями)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИсполнителиЗадач.Исполнитель КАК Исполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
		|	И ИсполнителиЗадач.Исполнитель В(&ПользователиСНапоминаниями)");
	
	Запрос.УстановитьПараметр("РольИсполнителя",			РольИсполнителя);
	Запрос.УстановитьПараметр("ПользователиСНапоминаниями",	ПользователиСНапоминаниями);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
	
КонецФункции // ПолучитьПолучателейНапоминанийПоРоли()

// Функция возвращает пользователей учетной записи.
//
// Параметры:
//	УчетнаяЗапись				- СправочникСсылка - УчетнаяЗапись, по которой будут получены пользователи.
//	ПользователиСНапоминаниями	- Массив - Массив пользователей, у которых установлено получение напоминаний.
//
// Возвращаемое значение:
//	Результат	- Массив пользователей учетной записи, с учетом установки получения напоминаний.
//
Функция ПолучитьПользователейУчетнойЗаписи(УчетнаяЗапись, ПользователиСНапоминаниями)
	
	Если ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		Если УчетнаяЗапись.CRM_ЭтоОбщаяУчетнаяЗапись Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	Пользователи.Ссылка КАК Пользователь
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.Ссылка В(&ПользователиСНапоминаниями)");
			
			Запрос.УстановитьПараметр("ПользователиСНапоминаниями", ПользователиСНапоминаниями);
			
			Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
		ИначеЕсли ЗначениеЗаполнено(УчетнаяЗапись.ВладелецУчетнойЗаписи) Тогда
			МассивПользователей = Новый Массив;
			МассивПользователей.Добавить(УчетнаяЗапись.ВладелецУчетнойЗаписи);
			
			Возврат МассивПользователей;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	CRM_УчетныеЗаписиМессенджеров.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
		|ГДЕ
		|	CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись = &УчетнаяЗапись
		|	И CRM_УчетныеЗаписиМессенджеров.Пользователь В(&ПользователиСНапоминаниями)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсполнителиЗадач.Исполнитель
		|ИЗ
		|	РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО CRM_УчетныеЗаписиМессенджеров.Пользователь = ИсполнителиЗадач.РольИсполнителя
		|ГДЕ
		|	CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись = &УчетнаяЗапись
		|	И ИсполнителиЗадач.Исполнитель В(&ПользователиСНапоминаниями)");
	
	Если ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "CRM_УчетныеЗаписиМессенджеров", "CRM_УчетныеЗаписиЭлектроннойПочты");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УчетнаяЗапись",				УчетнаяЗапись);
	Запрос.УстановитьПараметр("ПользователиСНапоминаниями",	ПользователиСНапоминаниями);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
КонецФункции // ПолучитьПользователейУчетнойЗаписи()

// Процедруа используется для создания напоминаний по новым объектам почты или мессенджера.
//
Процедура ВыполнитьОтправкуНапоминанийПоНовымОбъектам(НовыйОбъекты, УчетнаяЗапись, МассивПользователейСНапоминаниями)
	
	/////////////////////////////////////////////
	// Парамеры напоминания.
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДатаАктуальности", Неопределено);
	
	Если ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		ДополнительныеПараметры.Вставить("ОповещениеОВходящемЭлектронномПисьме", Истина);
	Иначе
		ДополнительныеПараметры.Вставить("ОповещениеОСообщенииМессенджера", Истина);
	КонецЕсли;
	
	/////////////////////////////////////////////
	// Массивы пользователей.
	
	МассивПолучателейРоли				= Неопределено;
	МассивПользователейУчетнойЗаписи	= Неопределено;
	
	/////////////////////////////////////////////
	// Константы.
	
	ДатаСозданияНапоминаний			= ТекущаяДатаСеанса();
	РольОтветсвенногоУчетнойЗаписи	= УчетнаяЗапись.CRM_РольОтветственного;
	ОтветственныйУчетнойЗаписи		= ?(
		ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты"),
		УчетнаяЗапись.CRM_Ответственный,
		УчетнаяЗапись.Ответственный);
	
	/////////////////////////////////////////////
	// Создание напоминаний.
	
	Для Каждого ТекущийНовыйОбъект Из НовыйОбъекты Цикл
		МассивПолучателейНапоминания = Новый Массив;
		
		Если ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			ТекстНапоминания		= ПолучитьТекстНапоминанияОВходящемПисьме(ТекущийНовыйОбъект);
			ОтветственныйОбъекта	= ТекущийНовыйОбъект.Ответственный;
		Иначе
			Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущийНовыйОбъект, "Диалог") Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстНапоминания		= ПолучитьТекстНапоминанияОСообщенииМессенджера(ТекущийНовыйОбъект, УчетнаяЗапись);
			ОтветственныйОбъекта	= ТекущийНовыйОбъект.Диалог.Ответственный;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтветственныйОбъекта) Тогда
			
			Если МассивПользователейСНапоминаниями.Найти(ОтветственныйОбъекта) <> Неопределено Тогда
				МассивПолучателейНапоминания.Добавить(ОтветственныйОбъекта);
			КонецЕсли;
			
			Если ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.CRM_УчетныеЗаписиМессенджеров")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущийНовыйОбъект, "Диалог") Тогда
				
				ДанныеКонтакта = Новый Структура("УчетнаяЗапись, Группа, ID_Пользователя",
					УчетнаяЗапись, ?(ТекущийНовыйОбъект.Группа <> Неопределено, ТекущийНовыйОбъект.Группа, ""), 
					ТекущийНовыйОбъект.ID_Пользователя);
				МассивСоисполнителей = РегистрыСведений.CRM_СоисполнителиДиалогов.СоисполнителиКонтакта(ДанныеКонтакта);
				
				Для Каждого Соисполнитель Из МассивСоисполнителей Цикл
					Если МассивПользователейСНапоминаниями.Найти(Соисполнитель) <> Неопределено Тогда
						МассивПолучателейНапоминания.Добавить(Соисполнитель);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ОтветственныйУчетнойЗаписи) Тогда
			
			Если МассивПользователейСНапоминаниями.Найти(ОтветственныйУчетнойЗаписи) <> Неопределено Тогда
				МассивПолучателейНапоминания.Добавить(ОтветственныйУчетнойЗаписи);
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(РольОтветсвенногоУчетнойЗаписи) Тогда
			
			Если МассивПолучателейРоли = Неопределено Тогда
				МассивПолучателейРоли = ПолучитьПолучателейНапоминанийПоРоли(
					РольОтветсвенногоУчетнойЗаписи, МассивПользователейСНапоминаниями);
			КонецЕсли;
			
			МассивПолучателейНапоминания = МассивПолучателейРоли;
			
		Иначе
			
			Если МассивПользователейУчетнойЗаписи = Неопределено Тогда
				МассивПользователейУчетнойЗаписи = ПолучитьПользователейУчетнойЗаписи(
					УчетнаяЗапись, МассивПользователейСНапоминаниями);
			КонецЕсли;
			
			МассивПолучателейНапоминания = МассивПользователейУчетнойЗаписи;
			
		КонецЕсли;
		
		Для Каждого ПолучательНапоминания Из МассивПолучателейНапоминания Цикл
			ДополнительныеПараметры.Вставить("ПолучательОповещения", ПолучательНапоминания);
			
			ДобавитьНапоминание(
				ТекущийНовыйОбъект,
				ТекстНапоминания,
				ДополнительныеПараметры,
				ДатаСозданияНапоминаний); 
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьОтправкуНапоминанийПоНовымОбъектам()

// функция проверяет было ли уже напоминание по указанному объекту
//
Функция ЕстьНапоминаниеПоОбъекту(Объект, ДопПараметры = Неопределено, ДляТекущего = Ложь) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Пользователь		= Объект.Исполнитель;
		Если НЕ ДопПараметры = Неопределено Тогда
			Пользователь	= ДопПараметры.Пользователь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		
		Если ДопПараметры = Неопределено Тогда
			Пользователь		= сфпСофтФонПроСервер.сфпТекущийПользователь();
		Иначе
			Пользователь		= ДопПараметры.Пользователь;
		КонецЕсли;	
			
	ИначеЕсли (ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры"))
		 ИЛИ (ТипЗнч(Объект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда

		Пользователь	= ?(ДопПараметры <> Неопределено, ДопПараметры.Пользователь, Пользователи.ТекущийПользователь());
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.CRM_ОтчетОРаботе") 
		ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.CRM_ПланированиеВоронкиПродаж") Тогда			
		
		Пользователь	= ?(ДопПараметры <> Неопределено, ДопПараметры.Пользователь, Пользователи.ТекущийПользователь());

	ИначеЕсли ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ОповещениеОВходящемЭлектронномПисьме") Тогда
		
		Пользователь	= ДопПараметры.ПолучательОповещения;
		
	ИначеЕсли ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ОповещениеОНеотправленныхПисьмах") Тогда
		
		Пользователь	= ДопПараметры.ПолучательОповещения;

	ИначеЕсли ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ОповещениеОСообщенииМессенджера") Тогда
		
		Пользователь	= ДопПараметры.ПолучательОповещения;
		
	Иначе
		
		Если ДляТекущего Тогда
		
			Пользователь = Пользователи.ТекущийПользователь();	
		
		Иначе
		
			Пользователь = ПолучитьОтветственногоОбъектаНапоминания(Объект);
			
		КонецЕсли;		
		
		Если НЕ ДопПараметры = Неопределено Тогда
			Пользователь	= ДопПараметры.Пользователь;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_Напоминания.Пользователь КАК Пользователь,
	                      |	CRM_Напоминания.Предмет КАК Предмет
	                      |ИЗ
	                      |	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
	                      |ГДЕ
	                      |	CRM_Напоминания.Пользователь = &Пользователь
	                      |	И CRM_Напоминания.Предмет = &Предмет");
						  
	Запрос.УстановитьПараметр("Предмет", Объект);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Процедура создает напоминание автору письма о неотправленных письмах.
//
Процедура ДобавитьНапоминанияОНеотправленныхПисьмах(МассивПисем) Экспорт
	
	Для Каждого УчетнаяЗаписьИПисьма Из МассивПисем Цикл
		
		ТекущаяУчетнаяЗапись = УчетнаяЗаписьИПисьма.УчетнаяЗапись;
		
		Для Каждого АвторИПисьма Из УчетнаяЗаписьИПисьма.Письма Цикл
			Если НЕ ЗначениеЗаполнено(АвторИПисьма.Автор) Тогда
				Продолжить;
			КонецЕсли;
				
			ТекущийАвтор = АвторИПисьма.Автор;
			
			Если АвторИПисьма.Письма.Количество() > 5 Тогда
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ОповещениеОНеотправленныхПисьмах"	, Истина);
				ДополнительныеПараметры.Вставить("ПолучательОповещения"				, ТекущийАвтор);
				
				ТекстНапоминания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='По учетной записи %1 не отправлено %2 писем. Письма перенесены в ""Черновики"". Проверьте адрес получателя и настройки учетной записи';
					|en='No %2 emails sent by %1. The letters have been moved to ""Drafts"". Check the recipient`s address and account settings'"),
								   ТекущаяУчетнаяЗапись,
								   АвторИПисьма.Письма.Количество());
				
				ДобавитьНапоминание(ТекущаяУчетнаяЗапись, ТекстНапоминания, ДополнительныеПараметры, ТекущаяДатаСеанса());
			Иначе
				Для Каждого Письмо Из АвторИПисьма.Письма Цикл
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("ОповещениеОНеотправленныхПисьмах"	, Истина);
					ДополнительныеПараметры.Вставить("ПолучательОповещения"				, ТекущийАвтор);
					
					ТекстНапоминания = ПолучитьТекстНапоминанияОНеотправленномПисьме(Письмо);
					
					ДобавитьНапоминание(Письмо, ТекстНапоминания, ДополнительныеПараметры, ТекущаяДатаСеанса());
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает текст напоминания о неотправленном электронном письме.
//
Функция ПолучитьТекстНапоминанияОНеотправленномПисьме(ЭлектронноеПисьмо)

	ТекстНапоминания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось отправить письмо %1 ""%2"" от %3 (%4). Письмо перенесено в ""Черновики"". Проверьте адрес получателя и настройки учетной записи';en='Could not send email %1 ""%2"" from %3 (%4). The letter has been moved to ""Drafts"". Check the recipient`s address and account settings'"),
																			   ЭлектронноеПисьмо.ОтправительПредставление,
																			   ЭлектронноеПисьмо.Тема,
																			   ЭлектронноеПисьмо.Дата,
																			   ЭлектронноеПисьмо.УчетнаяЗапись);
	
	Возврат ТекстНапоминания;

КонецФункции // ПолучитьТекстНапоминанияОВходящемПисьме(ЭлектронноеПисьмо)

// Функция возвращает выборку напоминаний.
//
// Параметры:
//	ВидОповещений	- Строка - Вид оповещений 
//	ДляУдаления		- Булево - Признак получения выборки для удаления неактуальных напоминаний.
//
// Возвращаемое значение:
//	Результат	- Выборка из результата запроса.
//
Функция ПолучитьВыборкуНапоминаний(ВидОповещений)
	
	Запрос = Новый Запрос;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ЗамещаемыеПользователи = РегистрыСведений.CRM_ОтсутствиеСотрудников.ЗамещаемыеПользователи(ТекущийПользователь);
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Запрос.УстановитьПараметр("Пользователи", ЗамещаемыеПользователи);
	Запрос.УстановитьПараметр("ДатаОповещения", ТекущаяДата);
	
	Если ВидОповещений = "НапоминанияОВходящихПисьмах" Тогда
		
		Запрос.УстановитьПараметр("ВидОповещения", Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Напоминания.Пользователь КАК Пользователь,
		|	Напоминания.Предмет КАК Предмет,
		|	Напоминания.ДатаНачала КАК ДатаНачала,
		|	Напоминания.ДатаАктуальности КАК ДатаАктуальности,
		|	Напоминания.ДатаОповещения КАК ДатаОповещения,
		|	Напоминания.Идентификатор КАК Идентификатор,
		|	Напоминания.Содержание КАК Содержание,
		|	Напоминания.Счетчик КАК Счетчик,
		|	Напоминания.ВидОповещения КАК ВидОповещения,
		|	ВЫБОР
		|		КОГДА Напоминания.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиВзаимодействия.Обычная)
		|			ТОГДА 1
		|		КОГДА Напоминания.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиВзаимодействия.Низкая)
		|			ТОГДА 0
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Важность,
		|	ЭлектронноеПисьмоВходящее.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ЭлектронноеПисьмоВходящее.ОтправительКонтакт КАК ОтправительКонтакт,
		|	Напоминания.Предмет.БизнесПроцесс КАК ПредметБизнесПроцесс,
		|	Напоминания.КонтактноеЛицо КАК КонтактноеЛицо,
		|	Напоминания.Партнер КАК Партнер,
		|	Напоминания.Просмотрено КАК Просмотрено
		|ИЗ
		|	РегистрСведений.CRM_Напоминания КАК Напоминания
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
		|		ПО Напоминания.Предмет = ЭлектронноеПисьмоВходящее.Ссылка
		|ГДЕ
		|	Напоминания.Просмотрено = ЛОЖЬ
		|	И Напоминания.Пользователь В(&Пользователи)
		|	И Напоминания.ДатаОповещения < &ДатаОповещения
		|	И Напоминания.ВидОповещения = &ВидОповещения
		|
		|УПОРЯДОЧИТЬ ПО
		|	Напоминания.ДатаОповещения УБЫВ";
		
	ИначеЕсли ВидОповещений = "НапоминанияОСообщенияхМессенджеров" Тогда
		
		Запрос.УстановитьПараметр("ВидОповещения", Справочники.CRM_ВидыОповещений.ОповещатьОНовыхСообщенияхМессенджеров);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Напоминания.Пользователь КАК Пользователь,
		|	Напоминания.Предмет КАК Предмет,
		|	Напоминания.ДатаНачала КАК ДатаНачала,
		|	Напоминания.ДатаАктуальности КАК ДатаАктуальности,
		|	Напоминания.ДатаОповещения КАК ДатаОповещения,
		|	Напоминания.Идентификатор КАК Идентификатор,
		|	Напоминания.Содержание КАК Содержание,
		|	Напоминания.Счетчик КАК Счетчик,
		|	Напоминания.ВидОповещения КАК ВидОповещения,
		|	ВЫБОР
		|		КОГДА Напоминания.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиВзаимодействия.Обычная)
		|			ТОГДА 1
		|		КОГДА Напоминания.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиВзаимодействия.Низкая)
		|			ТОГДА 0
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Важность,
		|	CRM_Диалоги.УчетнаяЗапись КАК УчетнаяЗапись,
		|	CRM_Диалоги.Контакт КАК ОтправительКонтакт,
		|	Напоминания.Предмет.БизнесПроцесс КАК ПредметБизнесПроцесс,
		|	Напоминания.КонтактноеЛицо КАК КонтактноеЛицо,
		|	Напоминания.Партнер КАК Партнер,
		|	Напоминания.Просмотрено КАК Просмотрено
		|ИЗ
		|	РегистрСведений.CRM_Напоминания КАК Напоминания
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.CRM_Диалоги КАК CRM_Диалоги
		|		ПО Напоминания.Предмет = CRM_Диалоги.Ссылка
		|ГДЕ
		|	Напоминания.Просмотрено = ЛОЖЬ
		|	И Напоминания.Пользователь В(&Пользователи)
		|	И Напоминания.ДатаОповещения < &ДатаОповещения
		|	И Напоминания.ВидОповещения = &ВидОповещения
		|
		|УПОРЯДОЧИТЬ ПО
		|	Напоминания.ДатаОповещения УБЫВ";
		
	Иначе
		
		ВидыОповещений = Новый Массив;
		ВидыОповещений.Добавить(Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах);
		ВидыОповещений.Добавить(Справочники.CRM_ВидыОповещений.ОповещатьОНовыхСообщенияхМессенджеров);
		Запрос.УстановитьПараметр("ВидыОповещений", ВидыОповещений);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Напоминания.Пользователь КАК Пользователь,
		|	Напоминания.Предмет КАК Предмет,
		|	Напоминания.ДатаНачала КАК ДатаНачала,
		|	Напоминания.ДатаАктуальности КАК ДатаАктуальности,
		|	Напоминания.ДатаОповещения КАК ДатаОповещения,
		|	Напоминания.Идентификатор КАК Идентификатор,
		|	Напоминания.Содержание КАК Содержание,
		|	Напоминания.Счетчик КАК Счетчик,
		|	Напоминания.ВидОповещения КАК ВидОповещения,
		|	ВЫБОР
		|		КОГДА Напоминания.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиВзаимодействия.Обычная)
		|			ТОГДА 1
		|		КОГДА Напоминания.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиВзаимодействия.Низкая)
		|			ТОГДА 0
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Важность,
		|	Напоминания.Предмет.БизнесПроцесс КАК ПредметБизнесПроцесс,
		|	Напоминания.КонтактноеЛицо КАК КонтактноеЛицо,
		|	Напоминания.Партнер КАК Партнер,
		|	Напоминания.Просмотрено КАК Просмотрено
		|ИЗ
		|	РегистрСведений.CRM_Напоминания КАК Напоминания
		|ГДЕ
		|	Напоминания.Просмотрено = ЛОЖЬ
		|	И Напоминания.Пользователь В(&Пользователи)
		|	И Напоминания.ДатаОповещения < &ДатаОповещения
		|	И НЕ Напоминания.ВидОповещения В (&ВидыОповещений)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Напоминания.ДатаОповещения УБЫВ";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить().Выбрать();
	
	Возврат Результат;
	
КонецФункции

Процедура ИзменитьПризнакПросмотра(ДанныеЗаписи, Просмотрено) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = ДанныеЗаписи.Пользователь;
	МенеджерЗаписи.Предмет = ДанныеЗаписи.Предмет;
	МенеджерЗаписи.ДатаНачала = ДанныеЗаписи.ДатаНачала;
	МенеджерЗаписи.ДатаОповещения = ДанныеЗаписи.ДатаОповещения;
	МенеджерЗаписи.Идентификатор = ДанныеЗаписи.Идентификатор;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Просмотрено = Истина;
		МенеджерЗаписи.Записать();
	ИначеЕсли ТипЗнч(ДанныеЗаписи.Предмет) = Тип("СправочникСсылка.CRM_УчетныеЗаписиМессенджеров") Тогда
		ИзменитьПризнакПросмотраВсехНапоминанийПользователяУчетнойЗаписиМессенджера(ДанныеЗаписи.Пользователь, 
			ДанныеЗаписи.Предмет);
	КонецЕсли;
	
	УдалитьИдентификаторИзМассиваВыведенныхНапоминаний(ДанныеЗаписи.Идентификатор);
	
КонецПроцедуры

Процедура ИзменитьПризнакПросмотраВсехНапоминанийПользователяУчетнойЗаписиМессенджера(Пользователь, УчетнаяЗапись)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_Напоминания.Предмет КАК Предмет,
		|	CRM_Напоминания.ДатаНачала КАК ДатаНачала,
		|	CRM_Напоминания.ДатаОповещения КАК ДатаОповещения,
		|	CRM_Напоминания.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
		|		ПО CRM_Напоминания.Предмет = CRM_СообщениеМессенджера.Ссылка
		|ГДЕ
		|	CRM_Напоминания.Пользователь = &Пользователь
		|	И CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Пользователь = Пользователь;
		МенеджерЗаписи.Предмет = Выборка.Предмет;
		МенеджерЗаписи.ДатаНачала = Выборка.ДатаНачала;
		МенеджерЗаписи.ДатаОповещения = Выборка.ДатаОповещения;
		МенеджерЗаписи.Идентификатор = Выборка.Идентификатор;
		МенеджерЗаписи.Прочитать();
		
		МенеджерЗаписи.Просмотрено = Истина;
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняется при добавлении обработчиков установки параметров сеанса.
//
// Параметры:
//  Обработчики	 - Структура - обработчики.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("CRM_ИдентификаторыНапоминаний", "CRM_НапоминанияСервер.УстановкаПараметровСеанса");
	
КонецПроцедуры

// Устанавливает параметры сеанса.
//
// Параметры:
//  ИмяПараметра			 - Строка - Имя параметра.
//  УстановленныеПараметры	 - Структура - установленные параметры.
//
Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра <> "CRM_ИдентификаторыНапоминаний" Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСеанса.CRM_ИдентификаторыНапоминаний = Новый ФиксированныйМассив(Новый Массив);
	УстановленныеПараметры.Добавить("CRM_ИдентификаторыНапоминаний");
	
КонецПроцедуры

Функция ПолучитьМассивИдентификаторовВыведенныхНапоминаний() Экспорт
	
	Возврат ПараметрыСеанса.CRM_ИдентификаторыНапоминаний;
	
КонецФункции

Процедура ДобавитьИдентификаторыВМассивВыведенныхНапоминаний(ИдентификаторыНовыхНапоминаний) Экспорт
	
	ИдентификаторыВыведенныхНапоминаний = ПараметрыСеанса.CRM_ИдентификаторыНапоминаний;
	ИдентификаторыНапоминаний = Новый Массив(ИдентификаторыВыведенныхНапоминаний);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИдентификаторыНапоминаний, ИдентификаторыНовыхНапоминаний);
	ПараметрыСеанса.CRM_ИдентификаторыНапоминаний = Новый ФиксированныйМассив(ИдентификаторыНапоминаний);
	
КонецПроцедуры

Процедура УдалитьИдентификаторИзМассиваВыведенныхНапоминаний(ИдентификаторНапоминания) Экспорт
	
	ВыведенныеНапоминания = ПараметрыСеанса.CRM_ИдентификаторыНапоминаний;
	ИдентификаторыНапоминаний = Новый Массив(ВыведенныеНапоминания);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ИдентификаторыНапоминаний, ИдентификаторНапоминания);
	ПараметрыСеанса.CRM_ИдентификаторыНапоминаний = Новый ФиксированныйМассив(ИдентификаторыНапоминаний);
	
КонецПроцедуры

Процедура НастроитьРегламентноеЗаданиеУдалениеНеактуальныхНапоминаний() Экспорт

	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Метаданные", Метаданные.РегламентныеЗадания.CRM_УдалениеНеактуальныхНапоминаний);
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыПоиска);

	Для Каждого Задание Из Задания Цикл
		ПараметрыЗадания = Новый Структура("Использование",
			 ПолучитьФункциональнуюОпцию("CRM_ИспользоватьНапоминанияПользователя"));
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти
