
#Область ПрограммныйИнтерфейс

// Выполняет поиск контактов.
//
// Параметры:
//  УсловияПоиска			 - Строка, Массив, Структура - Условия поиска.
//  СпособПоиска			 - Число					 - Способ поиска.
//  ОграничиватьВыборку		 - Булево					 - Признак ограничения выборки.
//  ВернутьМестаНахождения	 - Булево					 - Признак возврата места нахождения							 -
// 
// Возвращаемое значение:
//  Структура - результат поиска.
//
Функция ВыполнитьПоискКонтактов(Знач УсловияПоиска, Знач СпособПоиска = 1,
	 Знач ОграничиватьВыборку = Ложь,
	 ВернутьМестаНахождения = Ложь) Экспорт
	
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить("КодОшибки", "");
	РезультатПоиска.Вставить("Элементы", Новый Массив);
	
	// Проверка и нормализация условий.
	Если Не ПроверитьУсловияПоиска(УсловияПоиска) Тогда
		РезультатПоиска.КодОшибки = "ОшибкаПоиска";
		Возврат РезультатПоиска;
	КонецЕсли;
	УсловияПоиска = НормализоватьУсловияПоиска(УсловияПоиска);
	
	// Поиск.
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	ИндексУсловия = 0;
	Для Каждого Условие Из УсловияПоиска Цикл
		
		СтрокаПоиска = ДополнитьСтрокуПоиска(Условие.СтрокаПоиска, СпособПоиска,
						?(Условие.Свойство("ПоискПоПочтовомуДомену"), Условие.ПоискПоПочтовомуДомену, Ложь));
		Запрос.УстановитьПараметр("СтрокаПоиска" + ИндексУсловия, СтрокаПоиска);
		
		Если ИндексУсловия = 0 Тогда
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ?(ОграничиватьВыборку, " ПЕРВЫЕ 300", "") + " 
			|	ДанныеДляПоискаКонтактов.Владелец КАК Владелец,
			|	ДанныеДляПоискаКонтактов.ЗначениеПоиска КАК ЗначениеПоиска,
			|	ДанныеДляПоискаКонтактов.ПолеПоиска КАК ПолеПоиска,
			|	ДанныеДляПоискаКонтактов.ВидКонтактнойИнформации КАК ВидКонтактнойИнформации,
			|	ДанныеДляПоискаКонтактов.Контакт КАК Контакт
			|ПОМЕСТИТЬ
			|	НайденныеДанные";
		Иначе
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ" + ?(ОграничиватьВыборку, " ПЕРВЫЕ 300", "") + " 
			|	ДанныеДляПоискаКонтактов.Владелец КАК Владелец,
			|	ДанныеДляПоискаКонтактов.ЗначениеПоиска КАК ЗначениеПоиска,
			|	ДанныеДляПоискаКонтактов.ПолеПоиска КАК ПолеПоиска,
			|	ДанныеДляПоискаКонтактов.ВидКонтактнойИнформации КАК ВидКонтактнойИнформации,
			|	ДанныеДляПоискаКонтактов.Контакт КАК Контакт";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	РегистрСведений.CRM_ДанныеДляПоискаКонтактов КАК ДанныеДляПоискаКонтактов
		|ГДЕ
		|	ДанныеДляПоискаКонтактов.СтрокаПоиска ПОДОБНО &СтрокаПоиска" + ИндексУсловия;
		Если Условие.ПоляПоиска <> Неопределено Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДляПоискаКонтактов.ПолеПоиска В (&ПоляПоиска" + ИндексУсловия + ")";
			Запрос.УстановитьПараметр("ПоляПоиска" + ИндексУсловия, Условие.ПоляПоиска);
		КонецЕсли;
		Если ИндексУсловия = УсловияПоиска.Количество() - 1 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|;
			|";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		ИндексУсловия = ИндексУсловия + 1;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ" + ?(ОграничиватьВыборку, " ПЕРВЫЕ 300", "") + " 
	|	НайденныеДанные.Владелец КАК Владелец,
	|	НайденныеДанные.ЗначениеПоиска КАК ЗначениеПоиска,
	|	НайденныеДанные.ПолеПоиска КАК ПолеПоиска,
	|	НайденныеДанные.ВидКонтактнойИнформации КАК ВидКонтактнойИнформации,
	|	НайденныеДанные.Контакт КАК Контакт
	|ИЗ
	|	НайденныеДанные КАК НайденныеДанные,
	|	Константа.CRM_ИспользоватьПотенциальныхКлиентов КАК CRM_ИспользоватьПотенциальныхКлиентов
	|ГДЕ
	|	(CRM_ИспользоватьПотенциальныхКлиентов.Значение
	|			ИЛИ НЕ НайденныеДанные.Контакт ССЫЛКА Справочник.CRM_ПотенциальныеКлиенты)";
			
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		РезультатПоиска.КодОшибки = "НичегоНеНайдено";
		Возврат РезультатПоиска;
	КонецЕсли;
	
	Если ВернутьМестаНахождения Тогда
		ТаблицаРезультатов = РезультатЗапроса.Выгрузить();
		РезультатПоиска.Элементы = ТаблицаРезультатов.ВыгрузитьКолонку("Контакт");
		ТаблицаРезультатов.Свернуть("Владелец,ЗначениеПоиска,ВидКонтактнойИнформации,Контакт,ПолеПоиска");
		ТаблицаРезультатов.Колонки.Добавить("Партнер");
		Для Каждого Строка Из ТаблицаРезультатов Цикл
			Если ТипЗнч(Строка.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Строка.Партнер = Строка.Контакт.Владелец;
			Иначе
				Строка.Партнер = Строка.Контакт;
			КонецЕсли;	
		КонецЦикла;	
		РезультатПоиска.Вставить("ТаблицаРезультатов", ТаблицаРезультатов);
	Иначе	
		РезультатПоиска.Элементы = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
	КонецЕсли;
	
	Возврат РезультатПоиска;
	
КонецФункции

// Форматирует номер для поиска.
//
// Параметры:
//	Номер - Строка - Номер для поиска.
//
// Возвращаемое значение:
//	Строка - форматированный номер для поиска.
//
Функция ФорматироватьНомерДляПоиска(Знач Номер) Экспорт
	
	Номер = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(Номер, Ложь);
	КоличествоЗначимыхЦифр = сфпОбщегоНазначенияПовтИсп.ПолучитьЗначениеКонстанты("сфпПоследниеЦифрыТелефонногоНомера");
	Если Не ЗначениеЗаполнено(КоличествоЗначимыхЦифр) Тогда
		КоличествоЗначимыхЦифр = 10;
	КонецЕсли;
	Если СтрДлина(Номер) > КоличествоЗначимыхЦифр Тогда
		Номер = Прав(Номер, КоличествоЗначимыхЦифр);
	КонецЕсли;
	
	Возврат Номер;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обработчик записи контакта для поиска.
//
// Параметры:
//	Источник - СправочникСсылка - Источник.
//
Процедура КонтактДляПоискаПриЗаписи(Источник) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	//РегистрыСведений.CRM_ИзменениеКонтактнойИнформации.ДобавитьДанные(Источник.Ссылка);
	
	ОбновитьДанныеДляПоиска(Источник);
	
КонецПроцедуры

// Обновляет данные для поиска.
//
// Параметры:
//	ОбъектПоиска - СправочникСсылка - Объект поиска.
//
Процедура ОбновитьДанныеДляПоиска(ОбъектПоиска) Экспорт
	
	ПустойВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	
	ТипОбъекта = ТипЗнч(ОбъектПоиска);
	СвойстваОбъектов = ОписаниеСвойствОбъектовДляПоиска(ТипОбъекта);
	СвойстваТиповКИ = ОписаниеСвойствКонтактнойИнформацииДляПоиска();
	
	Контакт = ОбъектПоиска.Ссылка;
	CRM_ПоискКонтактовПереопределяемый.ПриОпределенииКонтактаДанныхПоиска(ТипОбъекта, Контакт, ОбъектПоиска);
	
	ДанныеДляПоиска = РегистрыСведений.CRM_ДанныеДляПоискаКонтактов.СоздатьНаборЗаписей();
	ДанныеДляПоиска.Отбор.Владелец.Установить(ОбъектПоиска.Ссылка);
	
	Для Каждого ОписаниеСвойства Из СвойстваОбъектов Цикл
		
		ЗначениеСвойства = СокрЛП(ОбъектПоиска[ОписаниеСвойства.Ключ]);
		Если Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеДляПоиска.Добавить();
		НоваяСтрока.СтрокаПоиска			= ЗначениеСвойства;
		НоваяСтрока.ПолеПоиска				= ОписаниеСвойства.Значение;
		НоваяСтрока.Контакт					= Контакт;
		НоваяСТрока.Владелец				= ОбъектПоиска.Ссылка;
		НоваяСтрока.КлючУникальности		= Строка(Новый УникальныйИдентификатор);
		НоваяСтрока.ЗначениеПоиска			= ЗначениеСвойства;
		НоваяСтрока.ВидКонтактнойИнформации	= ПустойВидКонтактнойИнформации;
		
	КонецЦикла;
	
	КонтактнаяИнформацияОбъекта = ОбъектПоиска.КонтактнаяИнформация;
	Если КонтактнаяИнформацияОбъекта.Количество() = 0 Тогда
		ДанныеДляПоиска.Записать();
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаКИ Из КонтактнаяИнформацияОбъекта Цикл
		
		ТипКИ = СтрокаКИ.Тип;
		ПолеПоиска = СвойстваТиповКИ.Получить(ТипКИ);
		Если ПолеПоиска = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон И ПустаяСтрока(СтрокаКИ.НомерТелефона) Тогда
			
			СведенияОТелефоне = УправлениеКонтактнойИнформацией.СведенияОТелефоне(СтрокаКИ.Значение);
			
			КодСтраны     = ?(СведенияОТелефоне.Свойство("КодСтраны"), СведенияОТелефоне.КодСтраны, "");
			КодГорода     = ?(СведенияОТелефоне.Свойство("КодГорода"), СведенияОТелефоне.КодГорода, "");
			НомерТелефона = ?(СведенияОТелефоне.Свойство("НомерТелефона"), СведенияОТелефоне.НомерТелефона, "");
			
			СтрокаПоиска = CRM_ПоискКонтактов.ФорматироватьНомерДляПоиска(СокрЛП(КодСтраны + КодГорода + НомерТелефона));
			
		ИначеЕсли ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон И Не ПустаяСтрока(СтрокаКИ.НомерТелефона) Тогда
			СтрокаПоиска	= CRM_ПоискКонтактов.ФорматироватьНомерДляПоиска(СокрЛП(СтрокаКИ.НомерТелефона));
		ИначеЕсли ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			СтрокаПоиска	= СокрЛП(СтрокаКИ.АдресЭП);
		Иначе
			СтрокаПоиска	= СокрЛП(СтрокаКИ.Представление);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаПоиска) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеДляПоиска.Добавить();
		НоваяСТрока.СтрокаПоиска			= СтрокаПоиска;
		НоваяСтрока.ПолеПоиска				= ПолеПоиска;
		НоваяСтрока.Контакт					= Контакт;
		НоваяСТрока.Владелец				= ОбъектПоиска.Ссылка;
		НоваяСтрока.КлючУникальности		= Строка(Новый УникальныйИдентификатор);
		НоваяСтрока.ЗначениеПоиска			= СтрокаКИ.Представление;
		НоваяСтрока.ВидКонтактнойИнформации	= СтрокаКИ.Вид;
		
	КонецЦикла;
	
	ДанныеДляПоиска.Записать();
	
КонецПроцедуры

#Область ПоискДублейПоЗначению

// Возвращает структуру данных кэша.
//
// Возвращаемое значение:
//	Структура - структура данных кэша.
//
Функция СтруктураДанныхКэша() Экспорт
	
	ДанныеКэша = Новый Структура;
	ДанныеКэша.Вставить("ИНН",			"");
	ДанныеКэша.Вставить("ФИО",			"");
	ДанныеКэша.Вставить("Организация",	"");
	ДанныеКэша.Вставить("Телефон",		"");
	ДанныеКэша.Вставить("Email",		"");
	ДанныеКэша.Вставить("URL",			"");
	
	Возврат ДанныеКэша;
	
КонецФункции

// Нормализует строку поиска и дополняет кэш.
//
// Параметры:
//	СтрокаПоиска  - Строка - Строка поиска.
//	КэшПоиска	  - Структура - Кэш поиска.
//	КэшЗаполнения - Структура - Кэш заполнения.
//
// Возвращаемое значение:
//	Строка - нормализованная строка поиска.
//
Функция НормализоватьСтрокуПоискаИДополнитьКэш(Знач СтрокаПоиска, КэшПоиска, КэшЗаполнения) Экспорт
	
	Если РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(СтрокаПоиска, Истина, "") Тогда
		
		Если Не ЗначениеЗаполнено(КэшПоиска.ИНН) Тогда
			КэшПоиска.ИНН = СтрокаПоиска;
			КэшЗаполнения.ИНН = СтрокаПоиска;
		КонецЕсли;
		
	ИначеЕсли РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(СтрокаПоиска, Ложь, "") Тогда
		
		Если Не ЗначениеЗаполнено(КэшПоиска.ИНН) Тогда
			КэшПоиска.ИНН = СтрокаПоиска;
			КэшЗаполнения.ИНН = СтрокаПоиска;
		КонецЕсли;
		
	ИначеЕсли Взаимодействия.КорректноВведенНомерТелефона(СтрокаПоиска) Тогда
		
		Если Не ЗначениеЗаполнено(КэшПоиска.Телефон) Тогда
			КэшПоиска.Телефон = CRM_ПоискКонтактов.ФорматироватьНомерДляПоиска(СтрокаПоиска);
			СтруктураКИ = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаПоиска);
			КэшЗаполнения.Телефон = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураКИ.КодСтраны,
				 СтруктураКИ.КодГорода, СтруктураКИ.НомерТелефона, "",
				 "");
		КонецЕсли;
		СтрокаПоиска = КэшПоиска.Телефон;
		
	ИначеЕсли ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(СтрокаПоиска, Истина) Тогда
		
		Если Не ЗначениеЗаполнено(КэшПоиска.Email) Тогда
			КэшПоиска.Email = СтрокаПоиска;
			КэшЗаполнения.Email = СтрокаПоиска;
		КонецЕсли;
		
	ИначеЕсли CRM_ОбщегоНазначенияКлиентСервер.ЭтоURL(СтрокаПоиска) Тогда
		
		Если Не ЗначениеЗаполнено(КэшПоиска.URL) Тогда
			КэшПоиска.URL = СтрокаПоиска;
			КэшЗаполнения.URL = СтрокаПоиска;
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(КэшПоиска.ФИО) Тогда
			КэшПоиска.ФИО = СтрокаПоиска;
			КэшЗаполнения.ФИО = CRM_КлиентыСервер.ПривестиФИОКСтандартномуВиду(СтрокаПоиска);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(КэшПоиска.Организация) Тогда
			КэшПоиска.Организация = СтрокаПоиска;
			КэшЗаполнения.Организация = СтрокаПоиска;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПоиска;
	
КонецФункции

// Создает структуру поиска.
//
// Возвращаемое значение:
//	Структура - структура поиска.
//
Функция СоздатьСтруктуруПоиска() Экспорт
	
	СтруктураПоиска = Новый Структура;
	
	ЗначениеХранилища = Константы.CRM_РеквизитыПоискаДублейПартнеров.Получить();
	РеквизитыПоиска = ЗначениеХранилища.Получить();
	Если РеквизитыПоиска <> Неопределено Тогда
		Если ТипЗнч(РеквизитыПоиска) = Тип("СписокЗначений") Тогда
			Для Каждого СтрокаСписка Из РеквизитыПоиска Цикл
				Если СтрокаСписка.Пометка Тогда	
					Значение = СтрокаСписка.Значение;
					ТочкаСЗапятой = СтрНайти(Значение, ";");
		
					СтруктураПоиска.Вставить(Сред(Значение, 1, ТочкаСЗапятой - 1), Сред(Значение, ТочкаСЗапятой + 1));
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураПоиска;
	
КонецФункции

// Возвращает текст запроса поиска дублей.
//
// Возвращаемое значение:
//	Строка - текст запроса поиска дублей.
//
Функция ТекстЗапросаПоискаДублей() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НайденныеСсылки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ НайденныеСсылкиВТ
	|ИЗ
	|	&НайденныеСсылки КАК НайденныеСсылки
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ТекущийОбъектНеЗадан
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НайденныеСсылки.Ссылка <> &ТекущийОбъект
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НайденныеСсылкиВТ.Ссылка КАК Ссылка,
	|	"""" КАК Оригинал
	|ПОМЕСТИТЬ НайденныеСсылкиВТ2
	|ИЗ
	|	НайденныеСсылкиВТ КАК НайденныеСсылкиВТ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДублиКлиентовИКонтактов.Оригинал,
	|	&ДополнениеОригиналаКлиента
	|ИЗ
	|	РегистрСведений.CRM_ДублиКлиентовИКонтактов КАК ДублиКлиентовИКонтактов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НайденныеСсылкиВТ КАК НайденныеСсылкиВТ
	|		ПО ДублиКлиентовИКонтактов.Контакт = НайденныеСсылкиВТ.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НайденныеСсылкиВТ2.Ссылка КАК Ссылка,
	|	МАКСИМУМ(НайденныеСсылкиВТ2.Оригинал) КАК Оригинал
	|ПОМЕСТИТЬ НайденныеСсылки
	|ИЗ
	|	НайденныеСсылкиВТ2 КАК НайденныеСсылкиВТ2
	|
	|СГРУППИРОВАТЬ ПО
	|	НайденныеСсылкиВТ2.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Клиенты.Ссылка КАК КлиентКонтакт,
	|	&СтрокаКлиент + НайденныеСсылки.Оригинал КАК ПредставлениеКлиентаКонтакта,
	|	Клиенты.Представление КАК Представление,
	|	Клиенты.ОсновнойМенеджер КАК ОсновнойМенеджер
	|ПОМЕСТИТЬ ДанныеКлиентов
	|ИЗ
	|	Справочник.Партнеры КАК Клиенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НайденныеСсылки КАК НайденныеСсылки
	|		ПО Клиенты.Ссылка = НайденныеСсылки.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контакты.Ссылка,
	|	&СтрокаКонтакт + НайденныеСсылки.Оригинал,
	|	Контакты.Представление,
	|	ВЫБОР
	|		КОГДА Контакты.Автор = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА Клиенты.ОсновнойМенеджер
	|		ИНАЧЕ Контакты.Автор
	|	КОНЕЦ
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК Контакты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НайденныеСсылки КАК НайденныеСсылки
	|		ПО Контакты.Ссылка = НайденныеСсылки.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Клиенты
	|		ПО Контакты.Владелец = Клиенты.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПотенциальныеКлиенты.Ссылка,
	|	&СтрокаПотенциальныйКлиент,
	|	ПотенциальныеКлиенты.Представление,
	|	ПотенциальныеКлиенты.ОсновнойМенеджер
	|ИЗ
	|	Справочник.CRM_ПотенциальныеКлиенты КАК ПотенциальныеКлиенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НайденныеСсылки КАК НайденныеСсылки
	|		ПО ПотенциальныеКлиенты.Ссылка = НайденныеСсылки.Ссылка
	|ГДЕ
	|	ПотенциальныеКлиенты.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеКлиентов.КлиентКонтакт КАК КлиентКонтакт,
	|	ДанныеКлиентов.ПредставлениеКлиентаКонтакта КАК ПредставлениеКлиентаКонтакта,
	|	ДанныеКлиентов.Представление КАК Представление,
	|	ДанныеКлиентов.ОсновнойМенеджер КАК ОсновнойМенеджер,
	|	&КомандаВыбрать КАК КомандаВыбрать,
	|	&ЗначениеПоиска КАК ЗначениеПоиска,
	|	ИСТИНА КАК Доступен,
	|	ДанныеКлиентов.КлиентКонтакт.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	ДанныеКлиентов КАК ДанныеКлиентов";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Создает структуру параметров запроса.
//
// Возвращаемое значение:
//	Структура - структура параметров запроса.
//
Функция ПараметрыЗапросов() Экспорт
	
	ПараметрыЗапросов = Новый Структура;
	ПараметрыЗапросов.Вставить("НадписьПотенциальногоКлиента",		НСтр("ru='Потенциальный клиент';en='Potential Customer'"));
	ПараметрыЗапросов.Вставить("ДополнениеПотенциальногоКлиента",	"(" + НСтр("ru='потенц. клиент';en='potential customer'") 
		+ ")");
	ПараметрыЗапросов.Вставить("ДополнениеУволенногоКонтакта",		"(" + НСтр("ru='уволен';en='fired'") + ")");
	ПараметрыЗапросов.Вставить("ДополнениеНеРаботающегоКонтакта",	"(" 
		+ НСтр("ru='временно не работает';en='not work temporarily'") 
		+ ")");
	ПараметрыЗапросов.Вставить("ДополнениеКлиентаФизическогоЛица",	"(" + НСтр("ru='физ.лицо';en='individual'") + ")");
	ПараметрыЗапросов.Вставить("ДополнениеКлиентаКлючевогоЛица",	"(" + НСтр("ru='ключ.лицо'") + ")");
	ПараметрыЗапросов.Вставить("ДополнениеОригиналаКлиента",		" (" + НСтр("ru = 'оригинал'") + ")");
	
	Возврат ПараметрыЗапросов;
	
КонецФункции

#КонецОбласти

#Область ПолнотекстовогоПоиска

Процедура ОбновитьИндексПолнотекстовогоПоиска() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПолнотекстовыйПоиск.ОбновитьИндекс();
	
КонецПроцедуры   

// Выполняет полнотекстовый поиск партнеров в форме
//
// Параметры:
//  Форма   - ФормаКлиентскогоПриложения - форма, в которой выполняется поиск.
//
// Возвращаемое значение:
//   Строка   - Текст сообщения о ошибки, Неопределено, если поиск выполнен успешно.
//
Функция НайтиПартнеровПолнотекстовыйПоиск(Форма, ТолькоКонтакты = Ложь) Экспорт
	
	ТаблицаОснований = Форма.РеквизитФормыВЗначение("Основания");
	
	// получить результаты поиска
	ТекстОшибки =
	НайтиПартнеров(Форма.СтрокаПоискаПолнотекстовый, ТаблицаОснований, Толькоконтакты);
	Если ТекстОшибки = Неопределено Тогда
		
		CRM_СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Форма.Элементы.СтрокаПоискаПолнотекстовый.СписокВыбора,
			 Форма.СтрокаПоискаПолнотекстовый,
			 100);
		Если ТолькоКонтакты Тогда                                                                                                    
			CRM_СпискиВыбораКлиентСервер.Сохранить("ИсторияПоискаКонтактов",
				 Форма.Элементы.СтрокаПоискаПолнотекстовый.СписокВыбора);
		Иначе	
			CRM_СпискиВыбораКлиентСервер.Сохранить("ИсторияПоискаПартнеров",
				 Форма.Элементы.СтрокаПоискаПолнотекстовый.СписокВыбора);
		КонецЕсли;	
		
		// вернуть таблицу оснований
		Форма.ЗначениеВРеквизитФормы(ТаблицаОснований, "Основания");
		
		Если НЕ Форма.РасширенныйПоиск Тогда
			Форма.РежимОтображенияДоПримененияПолнотекстовогоПоиска = Строка(Форма.Элементы.Список.Отображение);
		КонецЕсли;
		Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
		
		// установить отбор по списку найденных партнеров
		#Если НЕ ВнешнееСоединение Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список,
		                                                                   "ОтборПоПолнотекстовомуПоискуУстановлен",
		                                                                   Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список,
		                                                                   "ОтборПоПолнотекстовомуПоиску",
		                                                                   ТаблицаОснований.ВыгрузитьКолонку("Партнер"));
		#КонецЕсли
		Форма.Элементы.СтрокаПоискаПолнотекстовый.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		Возврат Неопределено;
		
	КонецЕсли;
	
	#Если НЕ ВнешнееСоединение Тогда
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список,
		                                                               "ОтборПоПолнотекстовомуПоискуУстановлен",
		                                                               Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список,
		                                                               "ОтборПоПолнотекстовомуПоиску",
		                                                               Неопределено);
	#КонецЕсли
	
	Форма.Элементы.СтрокаПоискаПолнотекстовый.ЦветФона = ЦветаСтиля.ОшибкаПолнотекстовыйПоискФон;
	Возврат ТекстОшибки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьУсловияПоиска(УсловияПоиска)
	
	Результат = Истина;
	
	Если ТипЗнч(УсловияПоиска) = Тип("Строка") Тогда
		
		Если СтрДлина(УсловияПоиска) < 3 Тогда
			Результат = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(УсловияПоиска) = Тип("Массив") Тогда
		
		Если УсловияПоиска.Количество() = 0 Тогда
			Результат = Ложь;
		Иначе
			Для Каждого Условие Из УсловияПоиска Цикл
				
				Если ТипЗнч(Условие) = Тип("Строка") Тогда
					Если СтрДлина(Условие) < 3 Тогда
						Результат = Ложь;
					КонецЕсли;
				ИначеЕсли ТипЗнч(Условие) = Тип("Структура") Тогда
					Если Не Условие.Свойство("СтрокаПоиска") Тогда
						Результат = Ложь;
					КонецЕсли;
					Если Не Условие.Свойство("ПоляПоиска") Тогда
						Результат = Ложь;
					КонецЕсли;
				Иначе
					Результат = Ложь;
				КонецЕсли;
				
				Если Не Результат Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(УсловияПоиска) = Тип("Структура") Тогда
		
		Если Не УсловияПоиска.Свойство("СтрокаПоиска") Тогда
			Результат = Ложь;
		КонецЕсли;
		Если Не УсловияПоиска.Свойство("ПоляПоиска") Тогда
			Результат = Ложь;
		КонецЕсли;
		
	Иначе
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НормализоватьУсловияПоиска(УсловияПоиска)
	
	УсловияНормализованные = Новый Массив;
	
	Если ТипЗнч(УсловияПоиска) = Тип("Строка") Тогда
		
		СтруктураУсловия = СтруктураУсловияПоиска(УсловияПоиска);
		УсловияНормализованные.Добавить(СтруктураУсловия);
		
	ИначеЕсли ТипЗнч(УсловияПоиска) = Тип("Массив") Тогда
		
		Для Каждого Условие Из УсловияПоиска Цикл
			
			Если ТипЗнч(Условие) = Тип("Строка") Тогда
				
				СтруктураУсловия = СтруктураУсловияПоиска(Условие);
				УсловияНормализованные.Добавить(СтруктураУсловия);
				
			ИначеЕсли ТипЗнч(Условие) = Тип("Структура") Тогда
				
				УсловияНормализованные.Добавить(Условие);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(УсловияПоиска) = Тип("Структура") Тогда
		
		УсловияНормализованные.Добавить(УсловияПоиска);
		
	КонецЕсли;
	
	Возврат УсловияНормализованные;
	
КонецФункции

Функция ОписаниеСвойствОбъектовДляПоиска(ТипОбъекта)
	
	ОписаниеСвойств = Новый Структура;
	ОписаниеСвойств.Вставить("Наименование", Перечисления.CRM_ПоляПоискаКонтактов.Наименование);
	
	Если ТипОбъекта = Тип("СправочникОбъект.Партнеры") Тогда
		ОписаниеСвойств.Вставить("НаименованиеПолное", Перечисления.CRM_ПоляПоискаКонтактов.НаименованиеПолное);
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			ОписаниеСвойств.Вставить("CRM_ИНН", Перечисления.CRM_ПоляПоискаКонтактов.ИНН);
		КонецЕсли;
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.CRM_ПотенциальныеКлиенты") Тогда
		ОписаниеСвойств.Вставить("Организация", Перечисления.CRM_ПоляПоискаКонтактов.Прочее);
	КонецЕсли;
	
	CRM_ПоискКонтактовПереопределяемый.ПриОпределенииОписанияСвойствОбъектовДляПоиска(ТипОбъекта, ОписаниеСвойств);
	
	Возврат ОписаниеСвойств;
	
КонецФункции

Функция ОписаниеСвойствКонтактнойИнформацииДляПоиска()
	
	ОписаниеСвойств = Новый Соответствие;
	
	ОписаниеСвойств.Вставить(Перечисления.ТипыКонтактнойИнформации.Адрес,
		Перечисления.CRM_ПоляПоискаКонтактов.Адрес);
	ОписаниеСвойств.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон,
		Перечисления.CRM_ПоляПоискаКонтактов.Телефон);
	ОписаниеСвойств.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
		Перечисления.CRM_ПоляПоискаКонтактов.EMail);
	ОписаниеСвойств.Вставить(Перечисления.ТипыКонтактнойИнформации.Skype,
		Перечисления.CRM_ПоляПоискаКонтактов.Прочее);
	ОписаниеСвойств.Вставить(Перечисления.ТипыКонтактнойИнформации.ВебСтраница,
		Перечисления.CRM_ПоляПоискаКонтактов.Прочее);
	ОписаниеСвойств.Вставить(Перечисления.ТипыКонтактнойИнформации.Факс,
		Перечисления.CRM_ПоляПоискаКонтактов.Прочее);
	ОписаниеСвойств.Вставить(Перечисления.ТипыКонтактнойИнформации.Другое,
		Перечисления.CRM_ПоляПоискаКонтактов.Прочее);
	
	Возврат ОписаниеСвойств;
	
КонецФункции

Функция ДополнитьСтрокуПоиска(Знач СтрокаПоиска, СпособПоиска, ПоискПоПочтовомуДомену = Ложь)
	
	Если ПоискПоПочтовомуДомену Тогда
		СтрокаПоиска = "%" + СтрокаПоиска;
		Возврат СтрокаПоиска;
	КонецЕсли;
	
	Если СпособПоиска = 0 Тогда
		СтрокаПоиска = СтрокаПоиска + "%";
	ИначеЕсли СпособПоиска = 1 Тогда
		СтрокаПоиска = "%" + СтрокаПоиска + "%";
	КонецЕсли;
	
	Возврат СтрокаПоиска;
	
КонецФункции

// Осуществляет расширенный поиск партнеров
// Параметры:
//          СписокПартнеров - таблица значений, заполняемая результатами поиска,
// Возвращаемое значение:
//          Неопределено если поиск произведен успешно
//          Текст сообщения пользователю, если поиск неудачен.
//
Функция НайтиПартнеров(СтрокаПоиска, СписокПартнеров, Толькоконтакты)

	// настроить параметры поиска
	мОбластьПоиска = Новый Массив;
	РазмерПорции = 200;
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска, РазмерПорции);  
	Если НЕ ТолькоКонтакты Тогда
		мОбластьПоиска.Добавить(Метаданные.Справочники.Партнеры);
	КонецЕсли;	
	мОбластьПоиска.Добавить(Метаданные.Справочники.КонтактныеЛицаПартнеров);
	СписокПоиска.ОбластьПоиска = мОбластьПоиска;
	
	Попытка
		СписокПоиска.ПерваяЧасть();
	Исключение
		Возврат НСтр("ru = 'При выполнении поиска произошла ошибка, попробуйте изменить выражение поиска.'");
	КонецПопытки;
	
	// возврат, если поиск не результативен
	Если СписокПоиска.ПолноеКоличество() = 0 Тогда
		Возврат НСтр("ru = 'Ничего не найдено'");
	КонецЕсли;
	
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
		Возврат НСтр("ru = 'Слишком много результатов, уточните запрос.'");
	КонецЕсли;
	
	КоличествоЭлементов = СписокПоиска.ПолноеКоличество();
	
	// сформировать список найденных партнеров
	СписокПартнеров.Очистить();
	НачальнаяПозиция = 0;
	КонечнаяПозиция = ?(КоличествоЭлементов > РазмерПорции, РазмерПорции, КоличествоЭлементов) - 1;
	ЕстьСледующаяПорция = Истина;

	// обработать по порциям результаты ППД
	Пока ЕстьСледующаяПорция Цикл
		Для СчетчикЭлементов = 0 По КонечнаяПозиция Цикл
			
			// сформировать элемент результата
			Элемент = СписокПоиска.Получить(СчетчикЭлементов);
			ЭлементСсылка = Элемент.Значение.Ссылка;
			Основание = Элемент.Метаданные.ПредставлениеОбъекта + " """
			            + Элемент.Представление + """ - " + Элемент.Описание;  
			Если НЕ ТолькоКонтакты Тогда			
				Если Элемент.Метаданные = Метаданные.Справочники.Партнеры Тогда
					Партнер = Элемент.Значение;
					Основание = НСтр("ru = 'Найдено в реквизите партнера'") + " - " + Элемент.Описание;
				ИначеЕсли Элемент.Метаданные = Метаданные.Справочники.КонтактныеЛицаПартнеров Тогда
					Партнер = Элемент.Значение.Владелец;
					ШаблонОснования =  НСтр("ru = 'Найдено в реквизите контактного лица партнера ""%1"" - %2'");
					Основание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОснования,
						 Элемент.Значение,
						 Элемент.Описание); 
				ИначеЕсли Не ЗначениеЗаполнено(Элемент.Значение.Партнер) Тогда
					Продолжить;
					Партнер = Элемент.Значение.Партнер;
				КонецЕсли;    
			Иначе
				Партнер = Элемент.Значение;
				ШаблонОснования =  НСтр("ru = 'Найдено в реквизите контактного лица партнера ""%1"" - %2'");
				Основание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОснования,
					 Элемент.Значение,
					 Элемент.Описание);
			КонецЕсли;
			
			Если НЕ ДобавитьПартнераВСписокНайденныхПолнотекстовымПоиском(СписокПартнеров, Партнер,
				 Основание,
				 ЭлементСсылка) Тогда
				Возврат НСтр("ru = 'Слишком много результатов, уточните запрос.'");
			КонецЕсли;
			
		КонецЦикла;
		НачальнаяПозиция = НачальнаяПозиция + РазмерПорции;
		ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоЭлементов - 1);
		Если ЕстьСледующаяПорция Тогда
			КонечнаяПозиция = 
			?(КоличествоЭлементов > НачальнаяПозиция + РазмерПорции, РазмерПорции,
			КоличествоЭлементов - НачальнаяПозиция) - 1;
			СписокПоиска.СледующаяЧасть();
		КонецЕсли;
	КонецЦикла;
	
	Если СписокПартнеров.Количество() = 0 Тогда
		Возврат НСтр("ru = 'Ничего не найдено.'");
	КонецЕсли;

	Возврат Неопределено;

КонецФункции  

Функция ДобавитьПартнераВСписокНайденныхПолнотекстовымПоиском(СписокПартнеров, Партнер, Основание, ЭлементСсылка)
	
	// добавить элемент, если партнера еще нет в списке найденных
	НайденнаяСтрока = СписокПартнеров.Найти(Партнер, "Партнер");
	Если НайденнаяСтрока = Неопределено Тогда
		// ограничить количество возвращаемых партнеров
		Если СписокПартнеров.Количество() > 100 Тогда
			Возврат Ложь; 
		Иначе 
			Запись = СписокПартнеров.Добавить();
			Запись.Партнер = Партнер;
			Запись.Основание = Основание;
			Запись.Ссылка = ЭлементСсылка;
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(НайденнаяСтрока.Ссылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
			И ТипЗнч(ЭлементСсылка) = Тип("СправочникСсылка.Партнеры") Тогда
		
			НайденнаяСтрока.Партнер = Партнер;
			НайденнаяСтрока.Основание = Основание;
			НайденнаяСтрока.Ссылка = ЭлементСсылка;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СтруктураУсловияПоиска(СтрокаПоиска = "") Экспорт
	
	СтруктураУсловия = Новый Структура;
	СтруктураУсловия.Вставить("СтрокаПоиска", СтрокаПоиска);
	СтруктураУсловия.Вставить("ПоляПоиска", Неопределено);
	СтруктураУсловия.Вставить("ПоискПоПочтовомуДомену", Ложь);
	
	Возврат СтруктураУсловия;
	
КонецФункции

#КонецОбласти
