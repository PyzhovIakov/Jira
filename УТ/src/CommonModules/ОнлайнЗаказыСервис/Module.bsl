///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.ОнлайнЗаказы".
// ОбщийМодуль.ОнлайнЗаказыСервис.
//
// Серверные процедуры онлайн-заказов:
//  - создание и получение ссылки для редактирования страницы онлайн-заказов;
//  - формирование, активация и деактивация заказов, получение статусов;
//  - подготовка и отправка вложений заказов.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область ПрикладныеОперации

// См. ОнлайнЗаказыСлужебный.НовыйЗаказ.
//
Функция СформироватьЗаказ(
		ДанныеЗаказа,
		НастройкаПодключения,
		НастройкиОплаты) Экспорт
		
	РезультатОперации = ОнлайнЗаказыСлужебный.НовыйРезультатДанныеЗаказа();
	
	// Создание/обновление онлайн-заказа.
	ДанныеСсылки = ОперацияСФормироватьЗаказ(
		ДанныеЗаказа,
		НастройкаПодключения,
		НастройкиОплаты);
		
	Если ЗначениеЗаполнено(ДанныеСсылки.КодОшибки) Тогда
		
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			ДанныеСсылки,
			"СтатусЗаказа, КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
			
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатОперации.URLЗаказа    = ДанныеСсылки.URLЗаказа;
	РезультатОперации.СуммаЗаказа  = ДанныеСсылки.СуммаЗаказа;
	РезультатОперации.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняется();
	
	Возврат РезультатОперации;
	
КонецФункции

// Возвращает данные онлайн-заказов.
// Параметры:
// ПараметрыОперации - Структура - Содержит параметры операции:
//  * НастройкаПодключения -  - СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам -
//    настройка выполнения операции.
//  * ИдентификаторыЗаказов - Массив Из Строка - Идентификаторы онлайн-заказов
//
// Возвращаемое значение:
//  Структура - результат создания платежной ссылки онлайн-заказа:
//    * ДанныеЗаказов - Массив Из Структура - содержит данные онлайн-заказов:
//      ** ИдентификаторЗаказа - Строка - Идентификатор онлайн-заказа;
//      ** Статус - Строка - Статус онлайн-заказа;
//      ** СуммаЗаказа - Число - Сумма онлайн-заказа;
//      ** СпособОплаты - Перечисление.СпособыОплатыОнлайнЗаказов - Способ оплаты онлайн-заказа;
//      ** ДатаОплаты - дата получения данных об оплате сервисом;
//      ** КонтрольнаяСумма - Строка - Значение контрольной суммы заказа;
//      ** ВерсияКонтрольнойСуммы - Число - Версия расчета контрольной суммы заказа;
//      ** ОплатаСБП - Структура, Неопределено - Содержит данные операции СБП, в том случае когда
//         значение Свойства СпособОплаты = Перечисления.СпособыОплатыОнлайнЗаказов.СБПc2b:
//        ***ИдентификаторОплаты - Строка - идентификатор оплаты в СБП;
//        ***ИдентификаторПлатежнойСистемы - Строка - идентификатор оплаты в Системе быстрых платежей;
//        ***ДатаОперации - Дата - фактическая дата оплаты в UTC;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - получение URL заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "НеверныйЛогинИлиПароль" - некорректный логин/пароль ИПП;
//        - "СервисВременноНеДоступен" - временная недоступность сервиса;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ПолучениеИнформацииПоЗаказам(ПараметрыОперации) Экспорт
	
	Возврат ОперацияПолученияИнформацииПоЗаказам(
		ПараметрыОперации);
	
КонецФункции

// Выполняет активацию заказа в сервисе.
//
// Параметры:
//  ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ в информационной базе,
//   являющийся основанием для заказа.
//
// Возвращаемое значение:
//  * СтатусЗаказа - Строка - Статус онлайн-заказа;
//  * КодОшибки - Строка - строковый код возникшей ошибки, который
//    может быть обработан вызывающим методом:
//      - <Пустая строка> - создание нового заказа выполнено успешно;
//      - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//      - "УжеОплачен" - документ уже оплачен;
//      - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису;
//      - "ПревышеноКоличествоПопыток" - превышено количество попыток
//        обращения к сервису с некорректным логином и паролем;
//      - "ОшибкаПодключения" - ошибка при подключении к сервису;
//      - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//      - "НеизвестнаяОшибка" - при получении информации возникла
//        неизвестная (не обрабатываемая) ошибка;
//      - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//      - "НеиспользуемаяНастройка" - использование отключено в настройках;
//  * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//  * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция АктивироватьЗаказ(ДокументЗаказа) Экспорт
	
	РезультатОперации = ОнлайнЗаказыСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("СтатусЗаказа", "");
	РезультатОперации.Вставить("СтатусЗаказаВСервисе", "");
	
	ПараметрыСсылки = РегистрыСведений.ИдентификаторыОнлайнЗаказов.ПараметрыСсылкиПоДокументуЗаказа(
		ДокументЗаказа);
		
	Если Не ЗначениеЗаполнено(ПараметрыСсылки.ИдентификаторЗаказа) Тогда
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Не обнаружен идентификатор заказа.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Не обнаружен идентификатор заказа.'");
	ИначеЕсли ПараметрыСсылки.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаИстекСрокЖизни() Тогда
		РезультатОперации.СтатусЗаказа = ПараметрыСсылки.СтатусЗаказа;
		РезультатОперации.КодОшибки = ОнлайнЗаказыКлиентСервер.КодОшибкиНедопустимыйСтатус();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'У заказа истек срок жизни, активация невозможна.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'У заказа истек срок жизни, активация невозможна.'");
	ИначеЕсли ПараметрыСсылки.СтатусЗаказа = ОнлайнЗаказыСлужебный.СтатусЗаказаОплачен() Тогда
		РезультатОперации.СтатусЗаказа = ПараметрыСсылки.СтатусЗаказа;
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.КодОшибкиУжеОплачен();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Заказ уже оплачен, активация не требуется.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Заказ уже оплачен, активация не требуется.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Подготовка параметров настройки подключения.
	ПараметрыНастройки = ОнлайнЗаказыСлужебный.ПараметрыНастройки(
		ПараметрыСсылки.НастройкаПодключения);
	
	// Проверка общих параметров подключения.
	ОнлайнЗаказыСлужебный.ПроверитьОбщиеНастройкиПодключения(
		ДокументЗаказа,
		ПараметрыСсылки.НастройкаПодключения,
		ПараметрыНастройки,
		Истина,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	Возврат ОперацияАктивацииЗаказа(
		ПараметрыСсылки);
	
КонецФункции

// Выполняет деактивацию заказа в сервисе.
//
// Параметры:
//  ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ в информационной базе,
//   являющийся основанием для заказа.
//
// Возвращаемое значение:
//  * СтатусЗаказа - Строка - Статус онлайн-заказа;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "УжеОплачен" - документ уже оплачен;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "НеиспользуемаяНастройка" - использование отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ДеактивироватьЗаказ(ДокументЗаказа) Экспорт
	
	РезультатОперации = ОнлайнЗаказыСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("СтатусЗаказа", "");
	РезультатОперации.Вставить("СтатусЗаказаВСервисе", "");
	
	ПараметрыСсылки = РегистрыСведений.ИдентификаторыОнлайнЗаказов.ПараметрыСсылкиПоДокументуЗаказа(
		ДокументЗаказа);
		
	Если Не ЗначениеЗаполнено(ПараметрыСсылки.ИдентификаторЗаказа) Тогда
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Не обнаружен идентификатор заказа.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Не обнаружен идентификатор заказа.'");
	ИначеЕсли ПараметрыСсылки.СтатусЗаказа = ОнлайнЗаказыСлужебный.СтатусЗаказаОплачен() Тогда
		РезультатОперации.СтатусЗаказа = ПараметрыСсылки.СтатусЗаказа;
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.КодОшибкиУжеОплачен();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Заказ уже оплачен, деактивация невозможна.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Заказ уже оплачен, деактивация невозможна.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Подготовка параметров настройки подключения.
	ПараметрыНастройки = ОнлайнЗаказыСлужебный.ПараметрыНастройки(
		ПараметрыСсылки.НастройкаПодключения);
	
	// Проверка общих параметров подключения.
	ОнлайнЗаказыСлужебный.ПроверитьОбщиеНастройкиПодключения(
		ДокументЗаказа,
		ПараметрыСсылки.НастройкаПодключения,
		ПараметрыНастройки,
		Ложь,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	Возврат ОперацияДеактивацияЗаказа(ПараметрыСсылки);
	
КонецФункции

// Выполняет актуализацию вложений заказа.
//
// Параметры:
//  ПараметрыОперации - Структура - содержит данные для выполнения операции:
//    * ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ в информационной базе,
//      являющийся основанием для заказа;
//    * ДанныеВложений - Соответствие - см. ОнлайнЗаказыСлужебный.ПодготовитьДанныеВложений;
//    * ПечатныеФормы - Массив Из Структура - Содержит описание и данные печатных форм;
//    * ПрисоединенныеФайлы - Массив Из Произвольный - Содержит ссылки
//      на элементы справочника Присоединенные файлы по ДокументуЗаказа;
//
// Возвращаемое значение:
//  Структура - результат выгрузки вложений:
//    * URLЗаказа - Строка - Ссылка на онлайн-заказ;
//    * СтатусЗаказа - Строка - Текущий статус онлайн-заказа;
//    * СуммаЗаказа - Число - Сумма онлайн-заказа;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "УжеОплачен" - документ уже оплачен;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "НеиспользуемаяНастройка" - использование отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОтправкаВложений(ПараметрыОперации) Экспорт
	
	РезультатОперации = ОнлайнЗаказыСлужебный.НовыйРезультатДанныеЗаказа();
	
	ПараметрыСсылки = РегистрыСведений.ИдентификаторыОнлайнЗаказов.ПараметрыСсылкиПоДокументуЗаказа(
		ПараметрыОперации.ДокументЗаказа);
	
	Если Не ЗначениеЗаполнено(ПараметрыСсылки.ИдентификаторЗаказа) Тогда
		
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Не обнаружен идентификатор заказа.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Не обнаружен идентификатор заказа.'");
		
		Возврат РезультатОперации;
		
	ИначеЕсли ПараметрыСсылки.СтатусЗаказа = ОнлайнЗаказыСлужебный.СтатусЗаказаОплачен() Тогда
		
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.КодОшибкиУжеОплачен();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Заказ уже оплачен, редактирование невозможно.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Заказ уже оплачен, редактирование невозможно.''");
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ПараметрыОперации.Вставить("ИдентификаторЗаказа", ПараметрыСсылки.ИдентификаторЗаказа);
	
	РезультатДеактивации = ОнлайнЗаказыСлужебный.ДеактивироватьЗаказ(ПараметрыОперации.ДокументЗаказа);
	
	Если ЗначениеЗаполнено(РезультатДеактивации.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатДеактивации);
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатПодготовки = ОперацияПодготовкаВложенийКОтправке(ПараметрыОперации);
	
	Если ЗначениеЗаполнено(РезультатПодготовки.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатПодготовки);
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатПередачи = ОперацияПередачаВложений(
		ПараметрыОперации.ДанныеВложений,
		РезультатПодготовки.ВложенияКЗагрузке);
	
	Если ЗначениеЗаполнено(РезультатПередачи.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатПередачи);
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатАктивации = ОперацияАктивацииЗаказа(ПараметрыОперации);
	
	ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатАктивации);
	
	Возврат РезультатОперации;
	
КонецФункции

#КонецОбласти

#Область РаботаСПорталом

// Выполняет обновление настройки онлайн-заказов.
// Параметры:
// ПараметрыОперации - Структура - Содержит параметры операции:
//  * НастройкаПодключения -  - СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам -
//    настройка выполнения операции.
//  * ТокенСПБb2b - Строка - Токен для сервиса payment-gateway для сценария оплаты СБП b2b
//  * ТокенСПБc2b - Строка - Токен для сервиса payment-gateway для сценария оплаты СБП c2b
//
// Возвращаемое значение:
//  Структура - результат обновления настройки страницы онлайн-заказов:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - получение URL заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "НеверныйЛогинИлиПароль" - некорректный логин/пароль ИПП;
//        - "СервисВременноНеДоступен" - временная недоступность сервиса;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОбновлениеНастройки(ПараметрыОперации) Экспорт
	
	Возврат ОперацияОбновленияНастройки(
		ПараметрыОперации);
	
КонецФункции

// Выполняет получение URL для перехода к настройке внешнего вида страницы онлайн-заказов.
// Параметры:
// НастройкаПодключения -  - СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам -
// настройка выполнения операции.
//
// Возвращаемое значение:
//  Структура - результат получения URL:
//    * URLНастройкиПодключения - Строка - URL для перехода к настройке внешнего вида страницы онлайн-заказов.
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - получение URL заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "НеверныйЛогинИлиПароль" - некорректный логин/пароль ИПП;
//        - "СервисВременноНеДоступен" - временная недоступность сервиса;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция URLНастройкиПодключения(НастройкаПодключения) Экспорт
	
	Возврат ОперацияURLНастройкиПодключения(
		НастройкаПодключения);
	
КонецФункции

#КонецОбласти

#Область ВызовОперацииСозданиеНастройки

// См. ОнлайнЗаказыСервис.ОбновлениеНастройки
//
Функция ОперацияОбновленияНастройки(ПараметрыОперации)
	
	РезультатОперации = ОнлайнЗаказыСлужебный.НовыйРезультатОперации();
	
	ПараметрыНастройки = ОнлайнЗаказыСлужебный.ПараметрыНастройки(
		ПараметрыОперации.НастройкаПодключения);
	
	Если ПараметрыНастройки = Неопределено Тогда
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Параметры настройки не определены.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Параметры настройки не определены.'");
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатДанныеАутентификации = ДанныеАутентификацииНастройкиПодключения(
		ПараметрыОперации.НастройкаПодключения,
		Истина);
	
	Если РезультатДанныеАутентификации.Ошибка Тогда
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатДанныеАутентификации.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатДанныеАутентификации.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	URLОперации = ОнлайнЗаказыСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/page-settings/%1",
			РезультатДанныеАутентификации.Идентификатор));
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыПодключения = ОнлайнЗаказыСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = page_settings(
		ПараметрыОперации,
		ПараметрыНастройки);
	
	Заголовки = НовыйЗаголовкиВызоваОперации();
	Заголовки.Вставить("Authorization", СтрокаАутентификации(РезультатИПП.ДанныеАутентификации));
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "PUT");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ОнлайнЗаказыСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое,
			ОнлайнЗаказыСлужебный.ИдентификаторОперацииОбновленияНастройки());
			
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить создание настройки онлайн-заказов.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При создании настройки возникли ошибки.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ОнлайнЗаказыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(Строка(РезультатОперации.ИнформацияОбОшибке));
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатОбновления = ОбновитьХешНастройки(
		ПараметрыОперации.НастройкаПодключения,
		ПрочитатьДанные_page_settings(
			РезультатОтправки.Содержимое));
	
	Если РезультатОбновления.Ошибка Тогда
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.КодОшибкиНеизвестнаяОшибка();
		РезультатОперации.СообщениеОбОшибке = РезультатОбновления.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатОбновления.ИнформацияОбОшибке;
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции /isl/authorized/page-settings/{settingId}.
//
Функция page_settings(ПараметрыОперации, ПараметрыНастройки)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("organizationName");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыНастройки.ПредставлениеОрганизации);
	
	Если Не ПустаяСтрока(ПараметрыОперации.ТокенСПБc2b) Тогда
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sbpC2bAuthToken");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыОперации.ТокенСПБc2b);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПараметрыОперации.ТокенСПБb2b) Тогда
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sbpB2bAuthToken");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыОперации.ТокенСПБb2b);
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции /isl/authorized/page-settings/{settingId}.
//
Функция ПрочитатьДанные_page_settings(ТелоJSON)
	
	// Ответ сервиса:
	//
	//  settingsHash - Хеш настройки подключения рассчитанный в сервисе.
	//  Служит ключом идемпотентности настройки подключения.
	//
	//  "settingsHash": "9b9b17022a31abb8d443202b0b5932cb"
		
	Попытка
	
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
		Результат = ПрочитатьJSON(ЧтениеОтвета);
		
		Возврат Результат.settingsHash;
		
	Исключение
		
		ОнлайнЗаказыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
		ВызватьИсключение НСтр("ru = 'Не удалось обработать ответ. Подробности в журнале регистрации.'");
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацииURLНастройкиПодключения

// См. ОнлайнЗаказыСервис.URLНастройкиПодключения
//
Функция ОперацияURLНастройкиПодключения(НастройкаПодключения)
	
	РезультатОперации = ОнлайнЗаказыСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("URLНастройкиПодключения", Неопределено);
	
	РезультатДанныеАутентификации = ДанныеАутентификацииНастройкиПодключения(
		НастройкаПодключения,
		Истина);
	
	Если РезультатДанныеАутентификации.Ошибка Тогда
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатДанныеАутентификации.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатДанныеАутентификации.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	URLОперации = ОнлайнЗаказыСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/page-settings/%1/edit-url",
			РезультатДанныеАутентификации.Идентификатор));
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыПодключения = ОнлайнЗаказыСлужебный.ИнициализироватьПараметрыПодключения();
	
	Заголовки = НовыйЗаголовкиВызоваОперации();
	Заголовки.Вставить("Authorization", СтрокаАутентификации(РезультатИПП.ДанныеАутентификации));
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "GET");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ОнлайнЗаказыСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
			
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить адрес настройки внешнего вида страницы онлайн-заказов.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При получении адреса возникли ошибки.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ОнлайнЗаказыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(Строка(РезультатОперации.ИнформацияОбОшибке));
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатОперации.URLНастройкиПодключения = РезультатОтправки.Содержимое;
	
	Возврат РезультатОперации;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацииURLЗаказа

// См. ОнлайнЗаказыСлужебный.НовыйЗаказ.
//
Функция ОперацияСФормироватьЗаказ(ДанныеЗаказа, НастройкаПодключения, НастройкиОплаты)
	
	РезультатОперации = ОнлайнЗаказыСлужебный.НовыйРезультатДанныеЗаказа();
	
	РезультатДанныеАутентификации = ДанныеАутентификацииНастройкиПодключения(НастройкаПодключения);
	
	Если РезультатДанныеАутентификации.Ошибка Тогда
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатДанныеАутентификации.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатДанныеАутентификации.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	URLОперации = ОнлайнЗаказыСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/orders/%1",
			ДанныеЗаказа.ИдентификаторЗаказа));
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыПодключения = ОнлайнЗаказыСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = order(
		РезультатДанныеАутентификации,
		НастройкиОплаты,
		ДанныеЗаказа);
	
	Заголовки = НовыйЗаголовкиВызоваОперации();
	Заголовки.Вставить("Authorization", СтрокаАутентификации(РезультатИПП.ДанныеАутентификации));
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "PUT");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ОнлайнЗаказыСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
			
		Если РезультатОперации.КодОшибки = ОнлайнЗаказыКлиентСервер.КодОшибкиНедопустимыйСтатус() Тогда
			РезультатОперации.СтатусЗаказа =
				ПрочитатьДанные_order_illegal_status(РезультатОтправки.Содержимое).СтатусЗаказа;
		КонецЕсли;
			
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить создание/обновление заказа.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При создании/обновлении заказа возникли ошибки.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ОнлайнЗаказыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(Строка(РезультатОперации.ИнформацияОбОшибке));
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатЧтения = ПрочитатьДанные_order(РезультатОтправки.Содержимое);
	ЗаполнитьЗначенияСвойств(
		РезультатОперации,
		РезультатЧтения);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции /isl/authorized/orders/{orderId}.
//
Функция order(
		ДанныеАутентификации,
		НастройкиОплаты,
		ДанныеЗаказа)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("activate");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Истина);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("settingId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Идентификатор);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("expectedSettingChecksumValue");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.КонтрольнаяСумма);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("expirationTimestamp");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(
		ЗаписатьДатуJSON(
			ДанныеЗаказа.ОбщиеПараметрыЗаказа.СрокЖизни,
			ФорматДатыJSON.ISO,
			ВариантЗаписиДатыJSON.УниверсальнаяДата));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("currency");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеЗаказа.ОбщиеПараметрыЗаказа.Валюта);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("orderDataChecksumValue");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеЗаказа.КонтрольнаяСумма.Значение);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("orderDataChecksumVersion");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеЗаказа.КонтрольнаяСумма.ВерсияРасчета);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("reasonObjectRepresentation");
	ПредставлениеОснованияЗаказа = СокрЛП(ДанныеЗаказа.ПредставлениеОснованияЗаказа);
	Если Врег(ПредставлениеОснованияЗаказа) = ПредставлениеОснованияЗаказа Тогда
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ПредставлениеОснованияЗаказа);
	Иначе
		ЗаписьДанныхСообщения.ЗаписатьЗначение(
			ВРег(Лев(ПредставлениеОснованияЗаказа,1)) + Сред(ПредставлениеОснованияЗаказа, 2));
	КонецЕсли;
	
	// Данные товаров
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("items");
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	
	Для Каждого Товар Из ДанныеЗаказа.Товары Цикл
		
		ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("nomenclatureId");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Товар.ИдентификаторТовара);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("title");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Товар.Наименование);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("quantity");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Товар.Количество);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("discount");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Товар.Скидка);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("discountedAmount");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Товар.СуммаСоСкидкой);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("vat");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Товар.СуммаНДС);
		
		ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
		
	КонецЦикла;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	// Параметры оплаты СБП
	Если НастройкиОплаты.СБП <> Неопределено Тогда
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sbpPaymentParams");
		
		ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sbpPaymentModel");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(НастройкиОплаты.СБП.ВариантСБП);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("paymentPurpose");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(НастройкиОплаты.СБП.НазначениеПлатежа);
		
		ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
		
	КонецЕсли;
	
	// Визуализация заказа
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("visualization");
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("title");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеЗаказа.ВизуализацияЗаказа.Представление);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("comment");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеЗаказа.ВизуализацияЗаказа.ДополнительнаяИнформация);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("supplierFieldTitle");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеЗаказа.ВизуализацияЗаказа.ПоставщикЗаголовок);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("supplierFieldValue");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеЗаказа.ВизуализацияЗаказа.ПоставщикПредставление);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("customerFieldTitle");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеЗаказа.ВизуализацияЗаказа.ПокупательЗаголовок);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("customerFieldValue");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеЗаказа.ВизуализацияЗаказа.ПокупательПредставление);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("itemColumns");
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	
	Для Каждого НастройкаВизуализации Из ДанныеЗаказа.НастройкиВизуализации Цикл
		
		ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("title");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(НастройкаВизуализации.Представление);
		
		ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
		
	КонецЦикла;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("itemRows");
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	
	Для Каждого Товар Из ДанныеЗаказа.Товары Цикл
		
		ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("nomenclatureId");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Товар.ИдентификаторТовара);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("cells");
		
		ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
		
		Для Каждого НастройкаВизуализации Из ДанныеЗаказа.НастройкиВизуализации Цикл
			
			ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
			
			ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("value");
			ЗаписьДанныхСообщения.ЗаписатьЗначение(Товар[НастройкаВизуализации.Идентификатор]);
			
			ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
			
		КонецЦикла;
		
		ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
		
		ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
		
	КонецЦикла;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции /isl/authorized/orders/{orderId}.
//
Функция ПрочитатьДанные_order(ТелоJSON)
	
	// Ответ сервиса:
	//
	//  orderPageUrl - URL заказа.
	//  amount - сумма заказа.
	//  currency - валюта заказа.
	//
	//{
	//  "orderPageUrl": "orders.1c.ru",
	//  "amount": 200,
	//  "currency": "RUB"
	//}
	
	Попытка
		
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
		РезультатЧтения = ПрочитатьJSON(ЧтениеОтвета);
		
		ДанныеЗаказа = Новый Структура;
		
		ДанныеЗаказа.Вставить("URLЗаказа",    РезультатЧтения.orderPageUrl);
		ДанныеЗаказа.Вставить("СуммаЗаказа",  РезультатЧтения.amount);
		
		Возврат ДанныеЗаказа;
		
	Исключение
		
		ОнлайнЗаказыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
		ВызватьИсключение НСтр("ru = 'Не удалось обработать ответ. Подробности в журнале регистрации.'");
		
	КонецПопытки;
	
КонецФункции

// Чтение ответа операции /isl/authorized/orders/{orderId}.
//
Функция ПрочитатьДанные_order_illegal_status(ТелоJSON)
	
	// Ответ сервиса:
	//
	//  type - тип ошибки.
	//  title - заголовок ошибки.
	//  status - код ошибки.
	//  detail - детальное описание ошибки.
	//  instance - инстанс.
	//  requestId - идентификатор запроса.
	//  requestTimestamp - таймкод запроса.
	//  orderStatus - статус заказа.
	//
	//{
	//  "type": "ILLEGAL_ORDER_STATUS",
	//  "title": "Некорректный статус заказа",
	//  "status": 409,
	//  "detail": "Увеличьте срок жизни заказ и повторите попытку",
	//  "instance": "/pm/api/isl/authorized/orders/1ca4d85d-9fca-45a8-9991-8a3625674afb",
	//  "requestId": "ec414604-2e01-4a49-8268-d4aa23c9c4eb",
	//  "requestTimestamp": "2024-09-02T14:16:18.783+00:00",
	//  "data":
	//    {
	//    "orderStatus": "EXPIRED"
	//    }
	//}
	
	Содержимое = Новый Структура;
	Содержимое.Вставить("СтатусЗаказа", "");
	
	Попытка
		
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
		РезультатЧтения = ПрочитатьJSON(ЧтениеОтвета);
		
		Содержимое.СтатусЗаказа = РезультатЧтения.data.orderStatus;
		
	Исключение
		
		Содержимое.СтатусЗаказа = "";
		
	КонецПопытки;
	
	Возврат Содержимое;
	
КонецФункции

#КонецОбласти

#Область АктивацияОнлайнЗаказа

// См. ОнлайнЗаказыСлужебный.АктивироватьЗаказ.
//
Функция ОперацияАктивацииЗаказа(ПараметрыОперации)
	
	РезультатОперации = ОнлайнЗаказыСлужебный.НовыйРезультатСтатусЗаказа();
	РезультатОперации.Вставить("СтатусЗаказаВСервисе",   "");
	РезультатОперации.Вставить("КонтрольнаяСумма",       "");
	РезультатОперации.Вставить("ВерсияКонтрольнойСуммы", "");
	
	URLОперации = ОнлайнЗаказыСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/orders/%1/activate",
			ПараметрыОперации.ИдентификаторЗаказа));
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыПодключения = ОнлайнЗаказыСлужебный.ИнициализироватьПараметрыПодключения();
	
	Заголовки = НовыйЗаголовкиВызоваОперации();
	Заголовки.Вставить("Authorization", СтрокаАутентификации(РезультатИПП.ДанныеАутентификации));
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ОнлайнЗаказыСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		Если РезультатОперации.КодОшибки = ОнлайнЗаказыКлиентСервер.КодОшибкиНедопустимыйСтатус() Тогда
			РезультатОперации.СтатусЗаказаВСервисе = ОнлайнЗаказыСлужебный.ОпределитьСтатусЗаказаВСервисе(
				РезультатОтправки.Содержимое);
		КонецЕсли;
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить активацию онлайн-заказа.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При активации онлайн-заказа возникли ошибки.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ОнлайнЗаказыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(Строка(РезультатОперации.ИнформацияОбОшибке));
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатАктивации = ПрочитатьДанные_activate(РезультатОтправки.Содержимое);
	
	ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатАктивации);
	РезультатОперации.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняется();
	
	Возврат РезультатОперации;
	
КонецФункции

// Чтение ответа операции /isl/authorized/orders/{orderId}/activate.
//
Функция ПрочитатьДанные_activate(ТелоJSON)
	
	// Ответ сервиса:
	//
	//  orderPageUrl - URL онлайн-заказа.
	//  amount - сумма онлайн-заказа.
	//  currency - валюта онлайн-заказа.
	//
	//  {
	//    "orderPageUrl":"https://orders-stage.1c.ru/pm/ui/orders/3c0d406e-119a-401a-ade9-bbf1d32df4d6",
	//    "amount":150,
	//    "currency":"RUB",
	//    "orderDataChecksumVersion":"1",
	//    "orderDataChecksumValue":"311D52DDCE19C4F5DB736601B78C0E0AD5CE8131BB0D37F34078A70FE02EC3AE"
	//  }
	
	Попытка
		
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
		ДанныеСервиса = ПрочитатьJSON(ЧтениеОтвета);
		
		ДанныеЗаказа = Новый Структура;
		ДанныеЗаказа.Вставить("URLЗаказа",              ДанныеСервиса.orderPageUrl);
		ДанныеЗаказа.Вставить("СуммаЗаказа",            ДанныеСервиса.amount);
		ДанныеЗаказа.Вставить("КонтрольнаяСумма",       ДанныеСервиса.orderDataChecksumValue);
		ДанныеЗаказа.Вставить("ВерсияКонтрольнойСуммы", ДанныеСервиса.orderDataChecksumVersion);
		
	Исключение
		
		ОнлайнЗаказыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
		ВызватьИсключение НСтр("ru = 'Не удалось обработать ответ. Подробности в журнале регистрации.'");
		
	КонецПопытки;
	
	Возврат ДанныеЗаказа;
	
КонецФункции

#КонецОбласти

#Область ДеактивацияОнлайнЗаказа

// См. ОнлайнЗаказыСлужебный.ДеактивироватьЗаказ.
//
Функция ОперацияДеактивацияЗаказа(ПараметрыОперации)
	
	РезультатОперации = ОнлайнЗаказыСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("СтатусЗаказа", "");
	РезультатОперации.Вставить("СтатусЗаказаВСервисе",   "");
	
	URLОперации = ОнлайнЗаказыСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/orders/%1/deactivate",
			ПараметрыОперации.ИдентификаторЗаказа));
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыПодключения = ОнлайнЗаказыСлужебный.ИнициализироватьПараметрыПодключения();
	
	Заголовки = НовыйЗаголовкиВызоваОперации();
	Заголовки.Вставить("Authorization", СтрокаАутентификации(РезультатИПП.ДанныеАутентификации));
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ОнлайнЗаказыСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		Если РезультатОперации.КодОшибки = ОнлайнЗаказыКлиентСервер.КодОшибкиНедопустимыйСтатус() Тогда
			РезультатОперации.СтатусЗаказаВСервисе = ОнлайнЗаказыСлужебный.ОпределитьСтатусЗаказаВСервисе(
				РезультатОтправки.Содержимое);
		КонецЕсли;
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить активацию онлайн-заказа.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При активации онлайн-заказа возникли ошибки.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ОнлайнЗаказыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(Строка(РезультатОперации.ИнформацияОбОшибке));
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатОперации.Вставить("СтатусЗаказа", ОнлайнЗаказыКлиентСервер.СтатусЗаказаНеАктивен());
	
	Возврат РезультатОперации;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаВложенийКОтправке

// См.ОнлайнЗаказыСервис.ОтправкаВложений
//
Функция ОперацияПодготовкаВложенийКОтправке(ПараметрыОперации)
	
	РезультатОперации = ОнлайнЗаказыСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("ВложенияКЗагрузке", Неопределено);
	
	URLОперации = ОнлайнЗаказыСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/orders/%1/attachment-file-list",
			ПараметрыОперации.ИдентификаторЗаказа));
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыПодключения = ОнлайнЗаказыСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = update_attachment_file_list(ПараметрыОперации.ДанныеВложений);
	
	Заголовки = НовыйЗаголовкиВызоваОперации();
	Заголовки.Вставить("Authorization", СтрокаАутентификации(РезультатИПП.ДанныеАутентификации));
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "PUT");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ОнлайнЗаказыСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
			
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подготовить вложения онлайн-заказа.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При подготовке вложений онлайн-заказа возникли ошибки.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ОнлайнЗаказыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(Строка(РезультатОперации.ИнформацияОбОшибке));
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатОперации.ВложенияКЗагрузке = ПрочитатьДанные_update_attachment_file_list(РезультатОтправки.Содержимое);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции /isl/authorized/orders/{orderId}/activate.
//
Функция update_attachment_file_list(ДанныеВложений)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("files");
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	Для Каждого ДанныеВложения Из ДанныеВложений Цикл
		
		ДанныеФайла = ДанныеВложения.Значение;
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства(ДанныеФайла.Идентификатор);
		
		ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("title");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеФайла.Представление);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("fileName");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеФайла.ИмяФайла);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("checksum");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеФайла.ХешСумма);
		
		ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
		
	КонецЦикла;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции /isl/authorized/page-settings/{settingId}.
//
Функция ПрочитатьДанные_update_attachment_file_list(ТелоJSON)
	
	// Ответ сервиса:
	//
	//  filesToUpload - перечень файлов к загрузке.
	//    id - идентификатор файла.
	//    uploadUrl - URL для загрузки файла.
	//
	//  {
	//    "filesToUpload": [
	//      {
	//        "id": "string",
	//        "uploadUrl": "string"
	//      }
	//    ]
	//  }
	
	Попытка
		
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
		ДанныеСервиса = ПрочитатьJSON(ЧтениеОтвета);
		
		ФайлыКЗагрузке = Новый Массив;
		
		Для Каждого ДанныеФайла Из ДанныеСервиса.filesToUpload Цикл
			
			ФайлКЗагрузке = Новый Структура;
			ФайлКЗагрузке.Вставить("Идентификатор", ДанныеФайла.id);
			ФайлКЗагрузке.Вставить("URLЗагрузки",   ДанныеФайла.uploadUrl);
			
			ФайлыКЗагрузке.Добавить(ФайлКЗагрузке);
			
		КонецЦикла;
		
	Исключение
		
		ОнлайнЗаказыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
		ВызватьИсключение НСтр("ru = 'Не удалось обработать ответ. Подробности в журнале регистрации.'");
		
	КонецПопытки;
	
	Возврат ФайлыКЗагрузке;
	
КонецФункции

#КонецОбласти

#Область ОтправкаВложений

Функция ОперацияПередачаВложений(ДанныеВложений, ВложенияКЗагрузке)
	
	РезультатОперации = ОнлайнЗаказыСлужебный.НовыйРезультатОперации();
	ПараметрыПодключения = ОнлайнЗаказыСлужебный.ИнициализироватьПараметрыПодключения();
	
	Для Каждого ВложениеКЗагрузке Из ВложенияКЗагрузке Цикл
		
		ДанныеВложения = ДанныеВложений.Получить(ВложениеКЗагрузке.Идентификатор);
		
		Если ДанныеВложения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДвоичныеДанныеВложения = ПолучитьИзВременногоХранилища(ДанныеВложения.АдресВоВременномХранилище);
		
		РезультатИПП = ДанныеАутентификации(ВложениеКЗагрузке.URLЗагрузки);
		
		Если РезультатИПП.Ошибка Тогда
			РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		Заголовки = НовыйЗаголовкиВызоваОперации();
		Заголовки.Вставить("Authorization",   СтрокаАутентификации(РезультатИПП.ДанныеАутентификации));
		Заголовки.Вставить("X-File-Checksum", ДанныеВложения.ХешСумма);
		Заголовки.Вставить("Content-Type",    "application/octet-stream");
		
		ПараметрыОтправки = Новый Структура;
		ПараметрыОтправки.Вставить("Метод"                   , "PUT");
		ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
		ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
		ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ДвоичныеДанныеВложения);
		ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 2);
		ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
		ПараметрыОтправки.Вставить("Таймаут"                 , 30);
		
		// Вызов операции сервиса.
		РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
			ВложениеКЗагрузке.URLЗагрузки,
			,
			,
			ПараметрыОтправки);
			
		Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
			РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.ПереопределитьКодОшибкиСервиса(
				РезультатОтправки.КодСостояния);
			РезультатОперации.СообщениеОбОшибке = ОнлайнЗаказыСлужебный.ПереопределитьСообщениеПользователю(
				РезультатОперации.КодОшибки,
				РезультатОтправки.Содержимое);
				
			РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось выполнить передачу вложений онлайн-заказа.
					|
					|%1
					|
					|Техническая информация об ошибке:
					|При передаче вложения онлайн-заказа возникли ошибки.
					|URL: %2
					|Код ошибки: %3
					|Подробная информация:
					|%4'"),
				РезультатОперации.СообщениеОбОшибке,
				ВложениеКЗагрузке.URLЗагрузки,
				РезультатОтправки.КодОшибки,
				РезультатОтправки.ИнформацияОбОшибке);
			
			ОнлайнЗаказыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
				Строка(РезультатОперации.ИнформацияОбОшибке));
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатОперации;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацииИнформацияПоЗаказам

// См. ОнлайнЗаказыСервис.ПолучениеИнформацииПоЗаказам.
//
Функция ОперацияПолученияИнформацииПоЗаказам(ПараметрыОперации)
	
	РезультатОперации = ОнлайнЗаказыСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("ДанныеЗаказов", Новый Массив);
	
	РезультатДанныеАутентификации = ДанныеАутентификацииНастройкиПодключения(
		ПараметрыОперации.НастройкаПодключения,
		Истина);
	
	Если РезультатДанныеАутентификации.Ошибка Тогда
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатДанныеАутентификации.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатДанныеАутентификации.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	URLОперации = ОнлайнЗаказыСлужебный.URLОперацииСервиса(
		"/orders/get-order-infos");
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыПодключения = ОнлайнЗаказыСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = order_infos(ПараметрыОперации.ИдентификаторыЗаказов);
	
	Заголовки = НовыйЗаголовкиВызоваОперации();
	Заголовки.Вставить("Authorization", СтрокаАутентификации(РезультатИПП.ДанныеАутентификации));
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ОнлайнЗаказыСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ОнлайнЗаказыСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
			
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить данные заказов.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При получении данных заказов возникли ошибки.
				|URL: %2
				|Код ошибки: %3
				|Подробная информация:
				|%4'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		ОнлайнЗаказыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(Строка(РезультатОперации.ИнформацияОбОшибке));
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатОперации.ДанныеЗаказов = ПрочитатьДанные_order_infos(РезультатОтправки.Содержимое);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции /isl/authorized/orders/get-order-infos.
//
Функция order_infos(ИдентификаторыЗаказов)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("orderIds");
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	
	Для Каждого ИдентификаторЗаказа Из ИдентификаторыЗаказов Цикл
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторЗаказа);
	КонецЦикла;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции /isl/authorized/orders/get-order-infos.
//
Функция ПрочитатьДанные_order_infos(ТелоJSON)
	
	// Ответ сервиса:
	//
	//  orders - данные заказов в сервисе.
	//    id - идентификатор заказа.
	//    status - статус заказа.
	//    paymentType - тип оплаты.
	//    amount - сумма оплаты.
	//    orderDataChecksumVersion -  версия расчета контрольной суммы заказа.
	//    orderDataChecksumValue -  контрольная сумма заказа.
	//    sbpPayment - данные оплаты СБП.
	//      qrc - идентификатор qrc в СБП.
	//      paymentId - идентификатор операции в СБП.
	//      operationDate - дата операции в системе СБП.
	//      sbpOrderId - идентификатор оплаты в СБП.
	//      merchantId - идентификатор ТСП в СБП.
	//      paymentPurpose - назначение платежа.
	//
	//  {
	//    "orders": [
	//      {
	//      "id": "string",
	//      "status": "string",
	//      "paymentType": "string",
	//      "amount": 0,
	//      "sbpPayment": {
	//        "qrc": "string",
	//        "paymentId": "string",
	//        "operationDate": "string",
	//        "sbpOrderId": "string",
	//        "merchantId": "string",
	//        "paymentPurpose": "string"
	//      },
	//      "orderDataChecksumVersion": "string",
	//      "orderDataChecksumValue": "string"
	//      }
	//    ]
	//  }
	
	Попытка
		
		СвойстваСоЗначениемДата = Новый Массив;
		СвойстваСоЗначениемДата.Добавить("operationDate");
		
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
		ДанныеСервиса = ПрочитатьJSON(
			ЧтениеОтвета,
			,
			,
			,
			"ВосстановитьДатуJSON",
			ОнлайнЗаказыСлужебный,
			,
			СвойстваСоЗначениемДата);
		
		ДанныеЗаказов = Новый Массив;
		
		Для Каждого ДанныеЗаказаВСервисе Из ДанныеСервиса.orders Цикл
			
			ОплатаСБП = Неопределено;
			ДанныеЗаказа = Новый Структура;
			
			Если ДанныеЗаказаВСервисе.Свойство("sbpPayment")
				И ЗначениеЗаполнено(ДанныеЗаказаВСервисе.sbpPayment) Тогда
				ОплатаСБП = Новый Структура;
				ОплатаСБП.Вставить("ИдентификаторОплаты",           ДанныеЗаказаВСервисе.sbpPayment.qrc);
				ОплатаСБП.Вставить("ИдентификаторПлатежнойСистемы", ДанныеЗаказаВСервисе.sbpPayment.paymentId);
				ОплатаСБП.Вставить("ДатаОперации",                  ДанныеЗаказаВСервисе.sbpPayment.operationDate);
				ОплатаСБП.Вставить("ИдентификаторМерчанта",         ДанныеЗаказаВСервисе.sbpPayment.merchantId);
				ОплатаСБП.Вставить("НазначениеПлатежа",             ДанныеЗаказаВСервисе.sbpPayment.paymentPurpose);
				ОплатаСБП.Вставить(
					"Идентификатор",
					Новый УникальныйИдентификатор(ДанныеЗаказаВСервисе.sbpPayment.sbpOrderId));
				
			КонецЕсли;
			
			ДанныеЗаказа = Новый Структура;
			
			ДанныеЗаказа.Вставить("ИдентификаторЗаказа",    ДанныеЗаказаВСервисе.id);
			ДанныеЗаказа.Вставить("Статус",                 СтатусЗаказаПоДаннымСервиса(ДанныеЗаказаВСервисе.status));
			ДанныеЗаказа.Вставить("СуммаЗаказа",            ДанныеЗаказаВСервисе.amount);
			ДанныеЗаказа.Вставить("КонтрольнаяСумма",       ДанныеЗаказаВСервисе.orderDataChecksumValue);
			ДанныеЗаказа.Вставить("ВерсияКонтрольнойСуммы", ДанныеЗаказаВСервисе.orderDataChecksumVersion);
			ДанныеЗаказа.Вставить("ОплатаСБП",              ОплатаСБП);
			
			Если ЗначениеЗаполнено(ДанныеЗаказаВСервисе.paymentType) Тогда
				ДанныеЗаказа.Вставить("СпособОплаты", СпособОплаты(ДанныеЗаказаВСервисе.paymentType));
			Иначе
				ДанныеЗаказа.Вставить("СпособОплаты", Неопределено);
			КонецЕсли;
			
			ДанныеЗаказов.Добавить(ДанныеЗаказа);
			
		КонецЦикла;
		
	Исключение
		
		ОнлайнЗаказыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
		ВызватьИсключение НСтр("ru = 'Не удалось обработать ответ. Подробности в журнале регистрации.'");
		
	КонецПопытки;
	
	Возврат ДанныеЗаказов;
	
КонецФункции

#КонецОбласти

#Область Аутентификация

// Возвращает логин и пароль Интернет-поддержки или тикет аутентификации.
//
// Параметры:
//  URLОперации -Строка - URL операции, для которой получаются данные аутентификации.
//
// Возвращаемое значение:
//  Структура - структура, содержащая результаты определения параметров
//    аутентификации пользователя Интернет-поддержки:
//    *ДанныеАутентификации - Структура - параметры аутентификации пользователя Интернет-поддержки;
//    *ИнформацияОбОшибке   - Строка    - информация об ошибке для пользователя.
//    *Ошибка - Строка    - признак наличия ошибки.
//
Функция ДанныеАутентификации(URLОперации)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеАутентификации", Новый Структура);
	Результат.Вставить("ИнформацияОбОшибке",   "");
	Результат.Вставить("Ошибка",               Ложь);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		МодульИнтернетПоддержкаПользователейВМоделиСервиса =
			ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
		РезультатПолученияТикета =
			МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
				URLОперации);
		
		Если ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
			Результат.ДанныеАутентификации.Вставить("Тикет", РезультатПолученияТикета.Тикет);
		Иначе
			Результат.Ошибка = Истина;
			Результат.ИнформацияОбОшибке =
				НСтр("ru = 'Ошибка аутентификации в сервисе.
					|Подробнее см. в журнале регистрации.'");
			ПодробнаяИнформацияОбОшибке =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось вызвать операцию %1.
						|Не удалось выполнить аутентификацию.
						|%2'"),
					URLОперации,
					РезультатПолученияТикета.ИнформацияОбОшибке);
			ОнлайнЗаказыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
				ПодробнаяИнформацияОбОшибке,
				Истина);
		КонецЕсли;
	Иначе
		
		Результат.ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		
		Если Результат.ДанныеАутентификации = Неопределено Тогда
			Результат.Ошибка             = Истина;
			Результат.ИнформацияОбОшибке =
				НСтр("ru = 'Для работы с сервисом необходимо подключить Интернет-поддержку пользователей.'");
			ОнлайнЗаказыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
				Результат.ИнформацияОбОшибке);
		Иначе
			Результат.ДанныеАутентификации.Вставить("Тикет", Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует строку аутентификации из данных аутентификации
//
// Параметры:
//  ДанныеАутентификации  - Структура, Неопределено - данные аутентификации ИПП.
//
// Возвращаемое значение:
//  Строка - результат преобразования.
//
Функция СтрокаАутентификации(ДанныеАутентификации)
	
	Если ДанныеАутентификации = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАутентификации.Тикет) Тогда
		Результат = ИнтернетПоддержкаПользователей.ЗаголовокBearerАутентификации(ДанныеАутентификации.Тикет);
	Иначе
		Результат = ИнтернетПоддержкаПользователей.ЗаголовокБазовойСхемыАутентификации(
			ДанныеАутентификации.Логин,
			ДанныеАутентификации.Пароль);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные аутентификации настройки онлайн-заказов.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам -
//    настройка онлайн-заказов.
//  ЭтоСозданиеНастройки - Булево - Признак операции создания настройки.
//
// Возвращаемое значение:
//  Структура - структура, содержащая результаты определения параметров
//    аутентификации онлайн-заказов:
//    *Идентификатор - Строка, Неопределено - идентификатор настройки онлайн-заказов.
//       Если Неопределено, значение настроек не обнаружено;
//    *ИнформацияОбОшибке   - Строка    - информация об ошибке для пользователя.
//    *Ошибка - Строка    - признак наличия ошибки.
//
Функция ДанныеАутентификацииНастройкиПодключения(
		НастройкаПодключения,
		ЭтоСозданиеНастройки = Ложь)
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор",      Неопределено);
	Результат.Вставить("КонтрольнаяСумма",   Неопределено);
	Результат.Вставить("КодОшибки",          "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("Ошибка",             Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		НастройкаПодключения);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеХранилища <> Неопределено Тогда
		Результат.Идентификатор = ДанныеХранилища.Идентификатор;
		Результат.КонтрольнаяСумма = ДанныеХранилища.КонтрольнаяСумма;
		Возврат Результат;
	КонецЕсли;
	
	Если Не ЭтоСозданиеНастройки Тогда
		
		Результат.Ошибка = Истина;
		Результат.ИнформацияОбОшибке =
			НСтр("ru = 'Ошибка данных аутентификации.'");
		Результат.КодОшибки = ОнлайнЗаказыСлужебный.КодОшибкиДанныеАутентификацииНеЗаполнены();
			
		ОнлайнЗаказыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		
	Иначе
		
		ДанныеХранилища = НовыйОписаниеДанныхАутентификации();
		ДанныеХранилища.Идентификатор    = СокрЛП(Новый УникальныйИдентификатор);
		ДанныеХранилища.КонтрольнаяСумма = "";
		
		УстановитьПривилегированныйРежим(Истина);
		
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			НастройкаПодключения,
			ДанныеХранилища);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Результат.Идентификатор = ДанныеХранилища.Идентификатор;
		Результат.КонтрольнаяСумма = ДанныеХранилища.КонтрольнаяСумма;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет обновление хеша настройки в безопасном хранилище.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам -
//    настройка онлайн-заказов.
//  ХешНастройки - Строка - Строка содержащая хеш настройки рассчитанный сервисом.
//
// Возвращаемое значение:
//  Структура - структура, содержащая результаты определения параметров
//    аутентификации онлайн-заказов:
//    *ИнформацияОбОшибке   - Строка    - информация об ошибке для пользователя.
//    *Ошибка - Строка    - признак наличия ошибки.
//
Функция ОбновитьХешНастройки(НастройкаПодключения, ХешНастройки)
	
	Результат = Новый Структура;
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("Ошибка",             Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		НастройкаПодключения);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеХранилища = Неопределено Тогда
		Результат.Ошибка = Истина;
		Результат.ИнформацияОбОшибке =
			НСтр("ru = 'Ошибка обновления хеша настройки.'");
	КонецЕсли;
	
	ДанныеХранилища.КонтрольнаяСумма = ХешНастройки;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
		НастройкаПодключения,
		ДанныеХранилища);
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Формирует новое описание данных аутентификации.
//
// Возвращаемое значение:
//  Структура - содержит описание параметров онлайн-заказа:
//    * Идентификатор - Строка - уникальный идентификатор настройки.
//    * Хеш - Строка - Хеш настройки рассчитанный сервисом.
//
Функция НовыйОписаниеДанныхАутентификации()
	
	ДанныеАутентификации = Новый Структура;
	ДанныеАутентификации.Вставить("Идентификатор",    "");
	ДанныеАутентификации.Вставить("КонтрольнаяСумма", "");
	
	Возврат ДанныеАутентификации;
	
КонецФункции

#КонецОбласти

#Область Прочие

// Формирует стандартные заголовки для вызова операции.
//
// Возвращаемое значение:
//  Соответствие - заголовки операции.
//
Функция НовыйЗаголовкиВызоваОперации() Экспорт
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type",            "application/json");
	Заголовки.Вставить("X-Correlation-ID",        Строка(Новый УникальныйИдентификатор));
	Заголовки.Вставить("X-Program-Nick",          ИнтернетПоддержкаПользователей.ИмяПрограммы());
	
	Возврат Заголовки;
	
КонецФункции

Функция СтатусЗаказаПоДаннымСервиса(ИдентификаторПоДаннымСервиса)
	
	ИдентификаторПоДаннымСервиса = ВРег(ИдентификаторПоДаннымСервиса);
	
	Если ИдентификаторПоДаннымСервиса <> ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняется()
		И ИдентификаторПоДаннымСервиса <> ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняетсяОплата()
		И ИдентификаторПоДаннымСервиса <> ОнлайнЗаказыКлиентСервер.СтатусЗаказаИстекСрокЖизни()
		И ИдентификаторПоДаннымСервиса <> ОнлайнЗаказыКлиентСервер.СтатусЗаказаНеАктивен()
		И ИдентификаторПоДаннымСервиса <> ОнлайнЗаказыСлужебный.СтатусЗаказаОплачен() Тогда
		
		ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Передан неизвестный идентификатор статуса заказа %1'"),
				ИдентификаторПоДаннымСервиса);
				
		ОнлайнЗаказыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ПредставлениеОшибки,
			Истина);
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обработать ответ сервиса. %1 Подробности в журнале регистрации.'"),
			ПредставлениеОшибки);
		
	КонецЕсли;
	
	Возврат ИдентификаторПоДаннымСервиса;
	
КонецФункции

Функция СпособОплаты(ИдентификаторПоДаннымСервиса)
	
	Если ИдентификаторПоДаннымСервиса = "SBP" Тогда
		Возврат Перечисления.СпособыОплатыОнлайнЗаказов.СБПc2b;
	Иначе
		ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Передан неизвестный идентификатор статуса способа оплаты %1'"),
				ИдентификаторПоДаннымСервиса);
		ОнлайнЗаказыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ПредставлениеОшибки,
			Истина);
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обработать ответ сервиса. %1 Подробности в журнале регистрации.'"),
			ПредставлениеОшибки);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти
