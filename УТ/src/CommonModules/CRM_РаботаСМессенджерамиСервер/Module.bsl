
////////////////////////////////////////////////////////////////////////////////
// CRM работа с мессенджерами сервер
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// См. ОбщегоНазначенияПереопределяемый.ПриПериодическомПолученииДанныхКлиентаНаСервере
Процедура ПриПериодическомПолученииДанныхКлиентаНаСервере(Параметры, Результаты) Экспорт
	
	ИмяПараметра = "CRM_Мессенджеры.ОповещениеОНовыхСообщениях";
	ПараметрыПроверки = Параметры.Получить(ИмяПараметра);
	Если ПараметрыПроверки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("CRM_ИспользоватьИнтеграциюСМессенджерами") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	НовыхСообщений = ПроверкаНепрочитанныхСообщений(ТекущийПользователь,
		 ТекущийПользователь,
		 Неопределено);
	Результаты.Вставить(ИмяПараметра, НовыхСообщений);
	
КонецПроцедуры

#Область МетодыВзаимодействияСОбработкамиМессенджеров

// Отправить сообщение.
//
// Параметры:
//  ТекстСообщения							 - Строка						 - Текст сообщения.
//  Диалог									 - СправочникСсылка.CRM_Диалоги	 - Элемент справочника Диалоги
//  СписокФайлов							 - СписокЗначений				 - Список файлов.
//  СписокПользователейСистемыВзаимодействия - СписокЗначений				 - Список пользователей системы взаимодействия.
//  ДопПараметры							 - Структура					 - Дополнительные параметры.
// 
// Возвращаемое значение:
//  ДокументСсылка.CRM_СообщениеМессенджера - Ссылка на созданное сообщение.
//
Функция ОтправитьСообщение(
		Знач ТекстСообщения,
		Знач Диалог,
		СписокФайлов,
		СписокПользователейСистемыВзаимодействия = Неопределено,
		ДопПараметры = Неопределено) Экспорт
	
	ТекстСообщения = СокрЛП(ТекстСообщения);
	
  	Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("СообщениеОснование") Тогда
		Диалог = ДопПараметры.СообщениеОснование.Диалог;
	КонецЕсли;

	Сообщение = Документы.CRM_СообщениеМессенджера.СоздатьДокумент();
	Сообщение.УстановитьНовыйНомер();
	Сообщение.ТекстСообщения = ТекстСообщения;
	Сообщение.ВидСообщения = Перечисления.CRM_ВидыСообщенияМессенджера.Исходящее;
	Сообщение.ID_Пользователя = Диалог.ID_Пользователя;
	
	Если ТипЗнч(Диалог) = Тип("Структура") Тогда
		Сообщение.Диалог = Справочники.CRM_Диалоги.ПолучитьАктивныйДиалог(Диалог);
	Иначе
		Сообщение.Диалог = Диалог;
	КонецЕсли;
	
	Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("СообщениеОснование") Тогда
		Сообщение.СообщениеОснование = ДопПараметры.СообщениеОснование;
	КонецЕсли;
	
	Если ТипЗнч(Диалог.Контакт) <> Тип("Строка") Тогда
		Сообщение.Контакт = Диалог.Контакт;
		Сообщение.КонтактПредставление = Строка(Диалог.Контакт);
	Иначе
		Сообщение.КонтактПредставление = Диалог.Контакт;
	КонецЕсли;
	
	Сообщение.Группа = Диалог.Группа;
	Сообщение.УчетнаяЗапись = Диалог.УчетнаяЗапись;
	Сообщение.Ответственный = Пользователи.ТекущийПользователь();
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура("Группа, Контакт, Диалог", Диалог.Группа, Диалог.Контакт, Диалог);
	ИначеЕсли Не ДопПараметры.Свойство("Группа") Тогда
		ДопПараметры.Вставить("Группа", Диалог.Группа);
	ИначеЕсли Не ДопПараметры.Свойство("Диалог") Тогда
		ДопПараметры.Вставить("Диалог", Диалог);
	КонецЕсли;
	
	ДопПараметры.Вставить("Номер", Сообщение.Номер);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Диалог, "ЭтоНомерТелефона")
			И Диалог.ЭтоНомерТелефона Тогда
		Сообщение.ID_Пользователя = Сообщение.ID_Пользователя + "@c.us"; 
		Сообщение.Группа = Сообщение.Группа + "@c.us";
		ДопПараметры.Вставить("ЭтоНомерТелефона", Диалог.ЭтоНомерТелефона);
	КонецЕсли;
	
	Если ДопПараметры.Свойство("ДатаИВремяОтложеннойОтправки")
			И ЗначениеЗаполнено(ДопПараметры.ДатаИВремяОтложеннойОтправки) Тогда
		Сообщение.Отложенное	= Истина;
		Сообщение.Дата			= ДопПараметры.ДатаИВремяОтложеннойОтправки;
		
		УстановитьПривилегированныйРежим(Истина);
		Сообщение.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
		УстановитьВладельцаФайловПрикрепленныхВложений(Сообщение, СписокФайлов);
		
		Возврат Сообщение.Ссылка;
	КонецЕсли;
	
	Возврат ОтправитьПодготовленноеСообщение(
		Сообщение,
		Диалог,
		СписокФайлов,
		СписокПользователейСистемыВзаимодействия,
		ДопПараметры);
	
КонецФункции // ОтправитьСообщение()

// Отправить подготовленное сообщение.
//
// Параметры:
//  Сообщение								 - ДокументСсылка.CRM_СообщениеМессенджера	 - Сообщение.
//  Диалог									 - СправочникСсылка.CRM_Диалоги	 - Элемент справочника Диалоги.
//  СписокФайлов							 - СписокЗначений				 - Список файлов.
//  СписокПользователейСистемыВзаимодействия - СписокЗначений				 - Список пользователей системы взаимодействия.
//  ДопПараметры							 - Структура					 - Дополнительные параметры.
// 
// Возвращаемое значение:
//  ДокументСсылка.CRM_СообщениеМессенджера - Ссылка на отправленное сообщение.
//
Функция ОтправитьПодготовленноеСообщение(
		Сообщение,
		Диалог,
		СписокФайлов,
		СписокПользователейСистемыВзаимодействия,
		ДопПараметры) Экспорт
	
	МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(
		Диалог.УчетнаяЗапись.ТипМессенджера);
	
	Если Диалог.УчетнаяЗапись = Справочники.CRM_УчетныеЗаписиМессенджеров.СистемаВзаимодействия Тогда
		ID_Сообщения = МодульМенеджера.ОтправитьСообщение(
			Сообщение.ТекстСообщения,
			Диалог.УчетнаяЗапись,
			Диалог.ID_Пользователя,
			СписокФайлов,
			СписокПользователейСистемыВзаимодействия,
			ДопПараметры);
	Иначе
		ID_Сообщения = МодульМенеджера.ОтправитьСообщение(
			Сообщение.ТекстСообщения,
			Диалог.УчетнаяЗапись,
			Диалог.ID_Пользователя,
			СписокФайлов,
			ДопПараметры);
	КонецЕсли;
	
	Если ID_Сообщения <> Неопределено Тогда
		ЭтоОтложеннаяОтправка = Сообщение.Отложенное;
		
		Сообщение.Дата = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
		
		// При отправке отложенного сообщения флаг снимается,
		// чтобы не попадало в следующую выборку для отправки.
		Сообщение.Отложенное = Ложь;
		
		Если ТипЗнч(ID_Сообщения) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(Сообщение, ID_Сообщения);
		Иначе
			Сообщение.ID_Сообщения = ID_Сообщения;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Сообщение.Записать();
		
		ЗаписьСвязиПосл = РегистрыСведений.CRM_СообщенияДиалоговПоследние.СоздатьМенеджерЗаписи();
		ЗаписьСвязиПосл.Диалог = Диалог;
		ЗаписьСвязиПосл.Сообщение = Сообщение.Ссылка;
		ЗаписьСвязиПосл.ВидСообщения = Сообщение.ВидСообщения;
		ЗаписьСвязиПосл.Дата = Сообщение.Дата;
		
		ТекстСообщения = Сообщение.ТекстСообщения;
		Если СтрНайти(ТекстСообщения, Символы.ПС) Тогда
			МассивСтр = СтрРазделить(ТекстСообщения, Символы.ПС, Ложь);
			Если МассивСтр.Количество() = 0 Тогда
				ТекстСообщения = "";
			Иначе
				ТекстСообщения = МассивСтр[0];
			КонецЕсли;
		КонецЕсли;
		
		Если ТекстСообщения = "" Тогда
			ТекстСообщения = Нстр("ru = 'Файл...'; en = 'File...'");
		КонецЕсли;
		
		ЗаписьСвязиПосл.ТекстСокр = ТекстСообщения;
		ЗаписьСвязиПосл.Записать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		// Для отложенной отправки владельцы файлов уже установленны.
		Если Не ЭтоОтложеннаяОтправка Тогда
			УстановитьВладельцаФайловПрикрепленныхВложений(Сообщение, СписокФайлов);
		КонецЕсли;
		
		Возврат Сообщение.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ОтправитьСообщениеПродолжение()

// Запускает получение сообщений в фоне.
//
Процедура ЗапуститьПолучениеСообщенийВФоне() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_УчетныеЗаписиМессенджеров.Ссылка КАК Ссылка,
	                      |	CRM_УчетныеЗаписиМессенджеров.ТипМессенджера КАК ТипМессенджера
	                      |ИЗ
	                      |	Справочник.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
	                      |ГДЕ
	                      |	НЕ CRM_УчетныеЗаписиМессенджеров.ПометкаУдаления
	                      |	И CRM_УчетныеЗаписиМессенджеров.Включена");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ПолучитьСообщенияУчетнойЗаписиВФоне(Выборка.Ссылка);
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

// Получает сообщения учетной записи в фоне.
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка - Ссылка на учетную запись.
//
Процедура ПолучитьСообщенияУчетнойЗаписиВФоне(УчетнаяЗапись) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяМетода = "CRM_РаботаСМессенджерамиСервер.ПолучитьСообщенияУчетнойЗаписи";
	Если Не УчетнаяЗапись.ПометкаУдаления И УчетнаяЗапись.Включена И НЕ УчетнаяЗапись.ИспользоватьWebhook Тогда
		Ключ = УчетнаяЗапись.УникальныйИдентификаторЗадания;
	Иначе
		Ключ = Строка(УчетнаяЗапись.УникальныйИдентификатор());
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	ТекущиеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если ТекущиеФоновыеЗадания.Количество() = 0 Тогда
		ПараметрыФЗ = Новый Массив;
		ПараметрыФЗ.Добавить(УчетнаяЗапись);
		Попытка
			ФоновыеЗадания.Выполнить(ИмяМетода, ПараметрыФЗ, Ключ);
		Исключение
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Получить сообщения по учетной записи.
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка - Ссылка на учетную запись.
//
Процедура ПолучитьСообщенияУчетнойЗаписи(УчетнаяЗапись) Экспорт
	Если УчетнаяЗапись.Включена Тогда
		МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(УчетнаяЗапись.ТипМессенджера);
		ДатаПолучения = ТекущаяДатаСеанса();
		МассивСообщений = МодульМенеджера.ПолучитьСообщения(УчетнаяЗапись);
		Если МассивСообщений.Количество() > 0 Тогда
			СоздатьСообщенияИзПолученныхДанных(УчетнаяЗапись, МассивСообщений);
		КонецЕсли;
		ЗаписатьДатуПолучения(УчетнаяЗапись, ДатаПолучения);
	КонецЕсли;
КонецПроцедуры

// Путь к диалогу в браузере
//
// Параметры:
//  Структура	 - Структура - Передаваемая  структура.
// 
// Возвращаемое значение:
//  Строка - Путь к диалогу.
//
Функция ПутьКДиалогуВБраузере(Структура) Экспорт
	МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(Структура.УчетнаяЗапись.ТипМессенджера);
	Возврат МодульМенеджера.ПутьКДиалогуВБраузере(Структура);
КонецФункции

// Помечает как прочитанные.
//
// Параметры:
//  УчетнаяЗапись	- СправочникСсылка - Ссылка на учетную запись.
//	МассивСообщений - Массив - Массив сообщений.
//
Процедура ПометитьКакПрочтенные(УчетнаяЗапись, МассивСообщений) Экспорт
	
	МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(УчетнаяЗапись.ТипМессенджера);
	МодульМенеджера.ПометитьКакПрочтенные(УчетнаяЗапись, МассивСообщений);
	
КонецПроцедуры

// Запускает "прозвон" мессенджеров.
//
// Параметры:
//  СсылкаНаОбъект					 - СпправочникСсылка - Объект прозвона
//  МассивТелефонныхНомеров			 - Массив			 - Массив телефонных номеров для прозвона
//  МассивИсключаемыхМессенджеров	 - Массив			 - Массив исключаемых из прозвона мессенджеров
//  ИмяРеквизитаКИ					 - Строка			 - Имя реквизита контсктной информации
// 
// Возвращаемое значение:
//  Структура: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания  - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                      помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                      содержит адрес дополнительного временного хранилища,
//                                      в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//   * Сообщения - ФиксированныйМассив - если Статус <> "Выполняется", то массив объектов СообщениеПользователю,
//                                      которые были сформированы в фоновом задании.
// 
Функция НачатьПрозвонМессенджеров(СсылкаНаОбъект, МассивТелефонныхНомеров,
	 МассивИсключаемыхМессенджеров,
	 ИмяРеквизитаКИ) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	ПараметрыПроцедуры.Вставить("МассивТелефонныхНомеров", МассивТелефонныхНомеров);
	ПараметрыПроцедуры.Вставить("МассивИсключаемыхМессенджеров", МассивИсключаемыхМессенджеров);
	ПараметрыПроцедуры.Вставить("ИмяРеквизитаКИ", ИмяРеквизитаКИ);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Прозвон мессенджеров'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("CRM_РаботаСМессенджерамиСервер.ПрозвонитьМессенджерыВФоне",
			ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

// "Прозванивает" мессенджеры.
//
// Параметры:
//  Параметры		 - Структура						 - парамерты прозвона
//  АдресРезультата	 - УникальныйИдентификатор, Строка	 - адрес временного хранилища
//
Процедура ПрозвонитьМессенджерыВФоне(Параметры, АдресРезультата) Экспорт
	
	РезультатПрозвона = Новый Структура("ВидыКИ, Сообщения", Новый Массив, Новый Массив);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	CRM_УчетныеЗаписиМессенджеров.Ссылка КАК УчетнаяЗапись,
	               |	CRM_УчетныеЗаписиМессенджеров.ТипМессенджера КАК ТипМессенджера,
	               |	ВидыКИМессенджеров.CRM_ВидКИ КАК ВидКИ,
	               |	ВидыКИМессенджеров.CRM_ВидКИ.Тип КАК ТипКИ
	               |ПОМЕСТИТЬ ВключенныеУчетныеЗаписи
	               |ИЗ
	               |	Справочник.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ВидыКонтактнойИнформацииМессенджеров КАК ВидыКИМессенджеров
					|	ПО ВидыКИМессенджеров.ТипМессенджера = CRM_УчетныеЗаписиМессенджеров.ТипМессенджера
	               |ГДЕ
	               |	НЕ CRM_УчетныеЗаписиМессенджеров.ПометкаУдаления
	               |	И CRM_УчетныеЗаписиМессенджеров.Включена
	               |	И НЕ ВидыКИМессенджеров.CRM_ВидКИ = Значение(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)
	               |	И НЕ ВидыКИМессенджеров.CRM_ВидКИ В (&МассивИсключаемыхМессенджеров)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ВключенныеУчетныеЗаписи.УчетнаяЗапись) КАК УчетнаяЗапись,
	               |	ВключенныеУчетныеЗаписи.ТипМессенджера КАК ТипМессенджера,
	               |	ВключенныеУчетныеЗаписи.ВидКИ КАК ВидКИ,
	               |	ВключенныеУчетныеЗаписи.ТипКИ КАК ТипКИ
	               |ИЗ
	               |	ВключенныеУчетныеЗаписи КАК ВключенныеУчетныеЗаписи
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВключенныеУчетныеЗаписи.ТипМессенджера,
	               |	ВключенныеУчетныеЗаписи.ВидКИ,
	               |	ВключенныеУчетныеЗаписи.ТипКИ				   ";
	Если ЗначениеЗаполнено(Параметры.ИмяРеквизитаКИ) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".CRM_ВидКИ", "." + Параметры.ИмяРеквизитаКИ);
	ИначеЕсли ТипЗнч(Параметры.СсылкаНаОбъект) = Тип("СправочникСсылка.Партнеры") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".CRM_ВидКИ", ".ВидКИ_Клиент");
	ИначеЕсли ТипЗнч(Параметры.СсылкаНаОбъект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".CRM_ВидКИ", ".ВидКИ_КЛ");
	ИначеЕсли ТипЗнч(Параметры.СсылкаНаОбъект) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".CRM_ВидКИ", ".ВидКИ_ПК");
	ИначеЕсли ТипЗнч(Параметры.СсылкаНаОбъект) = Тип("СправочникСсылка.Пользователи") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".CRM_ВидКИ", ".ВидКИ_Пользователь");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивИсключаемыхМессенджеров", Параметры.МассивИсключаемыхМессенджеров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(Выборка.ТипМессенджера);
		Для Каждого НомерТелефона Из Параметры.МассивТелефонныхНомеров Цикл
			
			Попытка
				Результат = МодульМенеджера.ПользовательДоступен(Выборка.УчетнаяЗапись, НомерТелефона);
			Исключение
				Результат = Новый Структура("Доступен, Описание", Ложь, "");
			КонецПопытки;
			
			Если Результат.Доступен Тогда
				СтруктураРезультата = Новый Структура("НомерТелефона, ВидКИ, ТипКИ",
					НомерТелефона, Выборка.ВидКИ, Выборка.ТипКИ);
				Если Результат.Свойство("КонтактнаяИнформация") Тогда
					СтруктураРезультата.Вставить("КонтактнаяИнформация", Результат.КонтактнаяИнформация);
				КонецЕсли;
				РезультатПрозвона.ВидыКИ.Добавить(СтруктураРезультата);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Результат.Описание) Тогда
				РезультатПрозвона.Сообщения.Добавить(Результат.Описание);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ПоместитьВоВременноеХранилище(РезультатПрозвона, АдресРезультата);
	
	Если Параметры.Свойство("ЗаполнитьКИВОбъекте") Тогда
		ТаблицаКИ = УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация(Ложь);
		
		Для Каждого СтрокаРезультата Из РезультатПрозвона.ВидыКИ Цикл 
			
			НоваяКИ = ТаблицаКИ.Добавить();
			НоваяКИ.Тип = СтрокаРезультата.ВидКИ.Тип;
			НоваяКИ.Вид = СтрокаРезультата.ВидКИ;
			
			Если СтрокаРезультата.ВидКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			
				СтруктураНомера =
					сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаРезультата.НомерТелефона);
				Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);
				
				Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
					НоваяКИ.Представление = ?(ЗначениеЗаполнено(СтруктураНомера.КодСтраны), СтруктураНомера.КодСтраны + " (", "(") + СтруктураНомера.КодГорода 
						+ ") " 
						+ СтруктураНомера.НомерТелефона;
				Иначе	
					НоваяКИ.Представление = Телефон;
				КонецЕсли;
				
				ЗначенияПолей = Новый СписокЗначений;
				ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,		"КодСтраны");
				ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,		"КодГорода");
				ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона,	"НомерТелефона");
				
				НоваяКИ.ЗначенияПолей = ЗначенияПолей;
				
				КонтактнаяИнформацияПоПолям = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(НоваяКИ.ЗначенияПолей,
					НоваяКИ.Тип, НоваяКИ.Представление, Ложь);
				НоваяКИ.Значение = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(КонтактнаяИнформацияПоПолям);
			Иначе
				НоваяКИ.Представление = СтрокаРезультата.КонтактнаяИнформация.Представление;
				ЗначенияПолей = СтрокаРезультата.КонтактнаяИнформация.ЗначенияПолей;
				НоваяКИ.Значение = СтрокаРезультата.КонтактнаяИнформация.Значение;
			КонецЕсли;
			
			
		КонецЦикла;
		УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(Параметры.СсылкаНаОбъект, ТаблицаКИ, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

// Выполнить запрос к ресурсу.
//
// Параметры:
//  Сервер				  - Строка - Сервер.
//  СтрокаЗапроса		  - Строка - Строка запроса.
//  Ресурс				  - Строка - Ресурс. 
//  Прокси				  - Структура - Структура прокси.
//  Тип				 	  - Строка - Тип.
//  Удаление		 	  - Булево - Признак необходимости удаления. 
//  КодироватьСпецСимволы - Булево - Признак необходимости кодирования спецсимволов.
// 
// Возвращаемое значение:
//  Строка - Текст ответа.
//
Функция ВыполнитьЗапрос(Сервер, СтрокаЗапроса = "", Ресурс, Прокси = Неопределено, Тип = "json",
	 Удаление = Ложь,
	 КодироватьСпецСимволы = Ложь) Экспорт  
	
	Если Прокси <> Неопределено Тогда
		HTTPПрокси = Новый ИнтернетПрокси;	
		HTTPПрокси.Установить("https", Прокси.Сервер, Прокси.Порт, Прокси.Пользователь, Прокси.Пароль, Ложь); 
	Иначе
		HTTPПрокси = Неопределено;
	КонецЕсли;
	HTTP =  Новый HTTPСоединение(Сервер, , , , HTTPПрокси, 30, Новый ЗащищенноеСоединениеOpenSSL);
	
	ЗаголовокHTTP = Новый Соответствие();
	Если ЗначениеЗаполнено(Тип) Тогда
		ЗаголовокHTTP.Вставить("Content-Type", "application/" + Тип);
	КонецЕсли;
	Если Удаление Тогда
		HTTPЗапрос = Новый HTTPЗапрос(Ресурс, ЗаголовокHTTP);
		Ответ = HTTP.Удалить(HTTPЗапрос);
	ИначеЕсли ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		HTTPЗапрос = Новый HTTPЗапрос(Ресурс, ЗаголовокHTTP);
		Если Тип = "json" Тогда
			HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаЗапроса, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
		Иначе
			КодСтрокаЗапроса = КодироватьСтроку(СтрокаЗапроса, СпособКодированияСтроки.URLВКодировкеURL);
			Если КодироватьСпецСимволы Тогда
				КодСтрокаЗапроса = СтрЗаменить(КодСтрокаЗапроса, "+", "%2B");
				КодСтрокаЗапроса = СтрЗаменить(КодСтрокаЗапроса, "&", "%26");
			КонецЕсли;
			HTTPЗапрос.УстановитьТелоИзСтроки(КодСтрокаЗапроса, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
		КонецЕсли;
		Ответ = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
	Иначе	
		HTTPЗапрос = Новый HTTPЗапрос(СтрЗаменить(КодироватьСтроку(Ресурс,
			 СпособКодированияСтроки.URLВКодировкеURL), "+", "%2B"),
			 ЗаголовокHTTP);
		Ответ = HTTP.Получить(HTTPЗапрос);
	КонецЕсли;
	
    ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	Возврат ТекстОтвета;
КонецФункции

// Получить значение из ответа JSON.
//
// Параметры:
//  ТекстJSON			   - Строка - Текст JSON. 
//	ПрочитатьВСоответствие - Булево - Прочитать в соответствие.
// 
// Возвращаемое значение:
//  Произвольный - Значение ответа.
//
Функция ПолучитьЗначениеИзОтветаJSON(ТекстJSON, ПрочитатьВСоответствие = Ложь) Экспорт 
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	Попытка
		Значение = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
	Исключение
		Значение = Новый Структура("error", ТекстJSON);
	КонецПопытки;
	Возврат Значение;
КонецФункции

// Получить строку JSON
//
// Параметры:
//  Значение					 - Срока - Объект записи JSON.
//  ИспользоватьДвойныеКавычки	 - Булево - Определяет использование двойных кавычек при записи
//										свойств и значений JSON.
// 
// Возвращаемое значение:
//  Строка - Завершает запись текста JSON. 
//
Функция ПолучитьСтрокуJSON(Значение, ИспользоватьДвойныеКавычки = Ложь) Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, , ИспользоватьДвойныеКавычки));
	ЗаписатьJSON(ЗаписьJSON, Значение);
	Возврат ЗаписьJSON.Закрыть();
КонецФункции

// Не связанные сообщения контакта.
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка - Учетная запись для отправки.
//  Группа			 - Строка - Текущая группа. 
//  ID_Пользователя	 - Строка - ИД пользователя.
// 
// Возвращаемое значение:
//  ДокументСсылка.CRM_СообщениеМессенджера - Не связанные сообщения.
//
Функция НеСвязанныеСообщенияКонтакта(УчетнаяЗапись, Группа, ID_Пользователя) Экспорт
	 Запрос = Новый Запрос("ВЫБРАТЬ
	                       |	CRM_СообщениеМессенджера.Ссылка КАК Ссылка
	                       |ПОМЕСТИТЬ НеСвязанныеСообщения
	                       |ИЗ
	                       |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                       |ГДЕ
	                       |	CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	                       |	И CRM_СообщениеМессенджера.Группа = &Группа
	                       |	И CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	НеСвязанныеСообщения.Ссылка КАК Ссылка
	                       |ИЗ
	                       |	НеСвязанныеСообщения КАК НеСвязанныеСообщения
	                       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
	                       |		ПО НеСвязанныеСообщения.Ссылка = CRM_ЖурналДокументов.Объект
	                       |			И (CRM_ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка))");
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("Группа", Группа);
	Запрос.УстановитьПараметр("ID_Пользователя", ID_Пользователя);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

// Текущий пользователь получить право учетной записи.
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка - Ссылка на учетную запись.
//  ИмяПрава		 - Строка - Имя права. 
// 
// Возвращаемое значение:
//  Булево - Право учетной записи.
//
Функция ТекущийПользовательПолучитьПравоУчетнойЗаписи(УчетнаяЗапись, ИмяПрава) Экспорт
	
	ЗначениеПраваУчетнойЗаписи = Ложь;
	
	// Полноправным пользователям разрешены все действия независимо от настроек.
	Если ИмяПрава = "Администрирование" Тогда
		
		ЗначениеПраваУчетнойЗаписи = Пользователи.ЭтоПолноправныйПользователь();
	
	КонецЕсли; 
	
	Если НЕ ЗначениеПраваУчетнойЗаписи Тогда
		
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		
		Если ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			Запрос = Новый Запрос;
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	CRM_УчетныеЗаписиМессенджеров.Администрирование КАК Администрирование,
			               |	CRM_УчетныеЗаписиМессенджеров.Запись КАК Запись
			               |ИЗ
			               |	РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
			               |ГДЕ
			               |	CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись = &УчетнаяЗапись
			               |	И CRM_УчетныеЗаписиМессенджеров.Пользователь В (&Пользователь)";
			
			Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
			РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ТекущийПользователь);
			РолиПользователя.Добавить(ТекущийПользователь);
			Запрос.УстановитьПараметр("Пользователь", РолиПользователя);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				ЗначениеПраваУчетнойЗаписи = Выборка[ИмяПрава];
				
			КонецЕсли;
			
		КонецЕсли;		
	
	КонецЕсли; 
	
	Возврат ЗначениеПраваУчетнойЗаписи;

КонецФункции // ПолучитьПравоПользователяУчетнойЗаписи() 

// Пометить исходящие как прочтенные
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка - Учетная запись для отправки.
//  Группа			 - Строка - Текущая группа. 
//  ID_Пользователя	 - Строка - ИД пользователя.
//
Процедура ПометитьИсходящиеКакПрочтенные(УчетнаяЗапись, Группа, ID_Пользователя) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СообщениеМессенджера.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	                      |	И CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
	                      |	И CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Исходящее)
	                      |	И CRM_СообщениеМессенджера.Группа = &Группа");
	Запрос.УстановитьПараметр("ID_Пользователя", ID_Пользователя);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("Группа", Группа);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СообщениеОбъект.Прочитано = Истина;
		СообщениеОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

// Процедура - Пометить входящие как прочтенные
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка	 - Ссылка на учетную запись.
//  Группа			 - Строка			 - Текущая группа.
//  ID_Пользователя	 - Строка			 - ИД пользователя.
//  Ответственный	 - СправочникСсылка.Пользователи, Неопределено	 - Ответственный.
//
Процедура ПометитьВходящиеКакПрочтенные(УчетнаяЗапись, Группа, ID_Пользователя, Ответственный = Неопределено) Экспорт
	МассивСообщений = Новый Массив;
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	CRM_СообщениеМессенджера.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_Диалоги КАК Диалоги
	                      |		ПО (Диалоги.Ссылка = CRM_СообщениеМессенджера.Диалог)
	                      |ГДЕ
	                      |	ВЫБОР
	                      |			КОГДА &ID_Пользователя = """"
	                      |				ТОГДА ИСТИНА
	                      |			ИНАЧЕ Диалоги.ID_Пользователя = &ID_Пользователя
	                      |		КОНЕЦ
	                      |	И Диалоги.УчетнаяЗапись = &УчетнаяЗапись
	                      |	И Диалоги.Группа = &Группа
	                      |	И CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Входящее)
	                      |	И НЕ CRM_СообщениеМессенджера.Прочитано");
	Запрос.УстановитьПараметр("ID_Пользователя", ID_Пользователя);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("Группа", Группа);
	
	Если ЗначениеЗаполнено(Ответственный) Тогда
		Запрос.Текст = Запрос.Текст + "
	                      |	И ВЫБОР
	                      |			КОГДА Диалоги.Статус <> ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыДиалогов.ПереданДляОзнакомления)
	                      |				ТОГДА ИСТИНА
	                      |			ИНАЧЕ ВЫБОР КОГДА Диалоги.Ответственный = &Ответственный ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ
	                      |		КОНЕЦ";
		Запрос.УстановитьПараметр("Ответственный", Ответственный);
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СообщениеОбъект.Прочитано = Истина;
		Попытка
			МассивСообщений.Добавить(Выборка.Ссылка);
			СообщениеОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка, , , 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	Если МассивСообщений.Количество() > 0 Тогда
		ПометитьКакПрочтенные(УчетнаяЗапись, МассивСообщений);
	КонецЕсли;
КонецПроцедуры

// Процедура - Записать событие мессенджера
//
// Параметры:
//  Событие			 - ПеречислениеСсылка.CRM_СобытияМессенджеров - Событие мессенджера.
//  УчетнаяЗапись	 - СправочникСсылка - Ссылка на учетную запись.
//  ID_Пользователя	 - Строка - ИД пользователя.
//  Значение		 - ДокументСсылка.CRM_СообщениеМессенджера - Ссылка на документ.
//	Пользователь	 - СправочникСсылка - Пользователь.	
//
Процедура ЗаписатьСобытиеМессенджера(Событие, УчетнаяЗапись, ID_Пользователя,
	 Значение = Неопределено,
	 Пользователь = Неопределено) Экспорт
	Если Пользователь = Неопределено Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
				               |	CRM_УчетныеЗаписиМессенджеров.Пользователь КАК Пользователь
				               |ИЗ
				               |	РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
				               |ГДЕ
				               |	CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись = &УчетнаяЗапись
				               |	И CRM_УчетныеЗаписиМессенджеров.Пользователь ССЫЛКА Справочник.Пользователи
				               |
				               |ОБЪЕДИНИТЬ
				               |
				               |ВЫБРАТЬ
				               |	ИсполнителиЗадач.Исполнитель
				               |ИЗ
				               |	РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
				               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
				               |		ПО CRM_УчетныеЗаписиМессенджеров.Пользователь = ИсполнителиЗадач.РольИсполнителя
				               |ГДЕ
				               |	CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись = &УчетнаяЗапись");
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.CRM_СобытияМессенджеров.СоздатьМенеджерЗаписи();
			Запись.Пользователь = Выборка.Пользователь;
			Запись.Событие = Событие;
			Запись.УчетнаяЗапись = УчетнаяЗапись;
			Запись.ID_Пользователя = ID_Пользователя;
			Запись.Значение = Значение;
			Запись.Записать(Истина);
		КонецЦикла;
	Иначе
		Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			Запись = РегистрыСведений.CRM_СобытияМессенджеров.СоздатьМенеджерЗаписи();
			Запись.Пользователь = Пользователь;
			Запись.Событие = Событие;
			Запись.УчетнаяЗапись = УчетнаяЗапись;
			Запись.ID_Пользователя = ID_Пользователя;
			Запись.Значение = Значение;
			Запись.Записать(Истина);
		Иначе
			ПользователиРоли = CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРоли(Пользователь);
			Для каждого ПользовательРоли Из ПользователиРоли Цикл
				Запись = РегистрыСведений.CRM_СобытияМессенджеров.СоздатьМенеджерЗаписи();
				Запись.Пользователь = ПользовательРоли.Значение;
				Запись.Событие = Событие;
				Запись.УчетнаяЗапись = УчетнаяЗапись;
				Запись.ID_Пользователя = ID_Пользователя;
				Запись.Значение = Значение;
				Запись.Записать(Истина);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Получить события мессенджера
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Ссылка на пользователя.
// 
// Возвращаемое значение:
//  Структура - Структура события.
//
Функция ПолучитьСобытияМессенджера(Пользователь) Экспорт
	НаборЗаписей = РегистрыСведений.CRM_СобытияМессенджеров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Прочитать();
	
	События = Новый Массив;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Для каждого Запись Из НаборЗаписей Цикл
			Событие = Новый Структура("Событие, УчетнаяЗапись, ID_Пользователя, Группа, Значение",
				 Неопределено, Неопределено, Неопределено,
				 Неопределено);
			ЗаполнитьЗначенияСвойств(Событие, Запись);
			Событие.Группа = Запись.Значение.Группа;
			События.Добавить(Событие);
		КонецЦикла;
		
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Возврат События;
КонецФункции

// Очистить события мессенджера.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Ссылка на пользователя.
//
Процедура ОчиститьСобытияМессенджера(Пользователь) Экспорт
	НаборЗаписей = РегистрыСведений.CRM_СобытияМессенджеров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Записать();
КонецПроцедуры

// Связать все сообщения пользователя с контактом
//
// Параметры:
//  ТипМессенджера	 - Строка - Тип мессенджера.
//  ID_Пользователя	 - Строка - ИД пользователя.
//  Контакт			 - ОпределяемыйТип.КонтактВзаимодействия - Контакт взаимодействия.
//
Процедура СвязатьВсеСообщенияПользователяСКонтактом(ТипМессенджера, ID_Пользователя, Контакт) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СообщениеМессенджера.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	                      |	И CRM_СообщениеМессенджера.УчетнаяЗапись.ТипМессенджера = &ТипМессенджера");
	Запрос.УстановитьПараметр("ID_Пользователя", ID_Пользователя);
	Запрос.УстановитьПараметр("ТипМессенджера", ТипМессенджера);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СообщениеОбъект.Контакт = Контакт;
		СообщениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Создать сообщения из полученных данных
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка - Ссылка на учетную запись.
//  МассивСообщений	 - Массив - Массив сообщений. 
//
Процедура СоздатьСообщенияИзПолученныхДанных(УчетнаяЗапись, МассивСообщений) Экспорт
	
	ЕстьНовые = Ложь;
	ЭтоНовыйДиалог = Ложь;
	МаксДатаСообщения = Дата(1, 1, 1);
	
	ВозможныГрупповыеСообщения = CRM_РаботаСМессенджерамиСерверПовтИсп.МессенджерПоддерживаетГрупповыеЧаты(УчетнаяЗапись);
	
	Для Каждого ТекСообщение Из МассивСообщений Цикл
		Если ВозможныГрупповыеСообщения Тогда
			ГруппаСообщения = ?(ТекСообщение.Группа = Неопределено, "", ТекСообщение.Группа);
			
			ИдентификаторБлокировки = ?(
				ЗначениеЗаполнено(ГруппаСообщения) И ГруппаСообщения <> ТекСообщение.ID_Пользователя,
				ГруппаСообщения,
				ТекСообщение.ID_Пользователя);
		Иначе
			ИдентификаторБлокировки = ТекСообщение.ID_Пользователя;
		КонецЕсли;
		
		Если ОтправительЯвляетсяЗаблокированным(ИдентификаторБлокировки) Тогда
			Продолжить;
		КонецЕсли;

		Если ЗначениеЗаполнено(ТекСообщение.ID_СообщенияОснования) Тогда
			СообщениеОснование = НайтиСообщениеМессенджера(УчетнаяЗапись,
				?(ТекСообщение.Группа = Неопределено, "", ТекСообщение.Группа), ТекСообщение.ID_СообщенияОснования);
			Если ТекСообщение.ID_Пользователя = "" И ЗначениеЗаполнено(СообщениеОснование)
				И ЗначениеЗаполнено(СообщениеОснование.ID_Пользователя) Тогда 
				ТекСообщение.ID_Пользователя = СообщениеОснование.ID_Пользователя;
			КонецЕсли;
		Иначе
			СообщениеОснование = Неопределено;	 
		КонецЕсли;

		СообщениеДиалог = НайтиСообщениеИДиалогМессенджера(
			УчетнаяЗапись,
			?(ТекСообщение.Группа = Неопределено, "", ТекСообщение.Группа),
			ТекСообщение.ID_Пользователя,
			ТекСообщение.ID_Сообщения);
		
		Если ЗначениеЗаполнено(СообщениеДиалог.Диалог) Тогда
			Диалог = СообщениеДиалог.Диалог;
			Если ТекСообщение.Свойство("Ссылка") Тогда
				ЭтоНовыйДиалог = ДиалогБезВходящихСообщений(Диалог);
			КонецЕсли;
		Иначе
			Диалог = СоздатьДиалог(УчетнаяЗапись, ТекСообщение);
			ЭтоНовыйДиалог = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СообщениеДиалог.Сообщение) Тогда 
			Если Не ЗначениеЗаполнено(ТекСообщение.Дата) Тогда
				Продолжить;
			КонецЕсли;
			
			Сообщение = Документы.CRM_СообщениеМессенджера.СоздатьДокумент();
			ЭтоНовое = Истина;
			ЕстьНовые = Истина;
			МаксДатаСообщения = Макс(МаксДатаСообщения, ТекСообщение.Дата);
			
			Если ТекСообщение.Свойство("Ссылка") Тогда
				Сообщение.УстановитьСсылкуНового(ТекСообщение.Ссылка);
			КонецЕсли;
		ИначеЕсли Не CRM_РаботаСМессенджерамиСерверПовтИсп.ВозможноИзменениеСообщений(УчетнаяЗапись) Тогда
			Продолжить;
		Иначе
			ЭтоНовое = Ложь;
			Сообщение = СообщениеДиалог.Сообщение.ПолучитьОбъект();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Сообщение, ТекСообщение);
		Сообщение.ВидСообщения = Перечисления.CRM_ВидыСообщенияМессенджера[ТекСообщение.ВидСообщения];
		Сообщение.Диалог = Диалог;
		Сообщение.Контакт = Диалог.Контакт;
		Сообщение.КонтактПредставление =
			ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Диалог.КонтактПредставление);
		Сообщение.ТекстСообщения = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Сообщение.ТекстСообщения);
		Сообщение.Ответственный = Диалог.Ответственный;
		Сообщение.УчетнаяЗапись = УчетнаяЗапись;
		Сообщение.СообщениеОснование = СообщениеОснование;
		
		УстановитьПривилегированныйРежим(Истина);
		Сообщение.Записать();
		
		ТекСообщение.Вставить("Диалог", Диалог);
		
		Если ЭтоНовое Тогда
			
			ЗаписьСвязиПосл = РегистрыСведений.CRM_СообщенияДиалоговПоследние.СоздатьМенеджерЗаписи();
			ЗаписьСвязиПосл.Диалог = Диалог;
			ЗаписьСвязиПосл.Сообщение = Сообщение.Ссылка;
			ЗаписьСвязиПосл.ВидСообщения = Сообщение.ВидСообщения;
			ЗаписьСвязиПосл.Дата = Сообщение.Дата;
			ТекстСообщения = СокрЛП(Сообщение.ТекстСообщения);
			Если СтрНайти(ТекстСообщения, Символы.ПС) Тогда
				МассивСтр = СтрРазделить(ТекстСообщения, Символы.ПС, Ложь);
				Если МассивСтр.Количество() = 0 Тогда
					ТекстСообщения = "";
				Иначе
					ТекстСообщения = МассивСтр[0];
				КонецЕсли;
			КонецЕсли;
			Если ТекстСообщения = "" Тогда
				ТекстСообщения = Нстр("ru = 'Файл...'; en = 'File...'");
			КонецЕсли;
			ЗаписьСвязиПосл.ТекстСокр = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстСообщения);
			ЗаписьСвязиПосл.Записать();
			
			Если CRM_РаботаСМессенджерамиСерверПовтИсп.МессенджерПоддерживаетГрупповыеЧаты(УчетнаяЗапись)
				И ЗначениеЗаполнено(ТекСообщение.Группа)
				И ТекСообщение.Группа <> ТекСообщение.ID_Пользователя Тогда
				
				ПараметрыПоиска = Новый Структура("ID_Пользователя, Группа, УчетнаяЗапись, Контакт",
					"", Сообщение.Группа, УчетнаяЗапись, Неопределено);
				ДиалогГруппы = ПолучитьАктивныйДиалог(ПараметрыПоиска);
				
				Если ЗначениеЗаполнено(ДиалогГруппы) Тогда
					ЗаписьСвязиПослГруппы = РегистрыСведений.CRM_СообщенияДиалоговПоследние.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(ЗаписьСвязиПослГруппы, ЗаписьСвязиПосл);
					ЗаписьСвязиПослГруппы.Диалог = ДиалогГруппы;
					ЗаписьСвязиПослГруппы.Записать();
				КонецЕсли;
			КонецЕсли;
			
			ПроверитьСтатусПредыдущегоСообщения(Сообщение.Ссылка);
			
			Для каждого Вложение Из ТекСообщение.Вложения Цикл
				Вложение.ВладелецФайлов = Сообщение.Ссылка;
				РаботаСФайлами.ДобавитьФайл(Вложение, Вложение.АдресФайлаВХранилище);
			КонецЦикла;
			
			Если ЭтоНовыйДиалог Тогда
				// Для возможности обработки сообщения требуется получить правило. 
				// Особенность в том, что установка ответственного происходит для диалога (см. СоздатьДиалог), а обработка правила происходит для сообщения
				Правило = Справочники.CRM_ПравилаОбработкиОбращений.ПравилоДляОбращения(Сообщение);
				
				Если ЗначениеЗаполнено(Правило) И ЗначениеЗаполнено(Правило.ВариантОбработки) 
					И Правило.ВариантОбработки <> Перечисления.CRM_ВариантыОбработкиОбращения.НеОбрабатывать Тогда
					Сообщение.ДополнительныеСвойства.Вставить("ПравилоОбработкиОбращения", Правило);
				КонецЕсли;
				
				Справочники.CRM_ПравилаОбработкиОбращений.ОбработатьОбращение(Сообщение);
			КонецЕсли;
			
			Если УчетнаяЗапись = Справочники.CRM_УчетныеЗаписиМессенджеров.СистемаВзаимодействия Тогда
				ЗаписатьСобытиеМессенджера(Перечисления.CRM_СобытияМессенджеров.ПолученоНовоеСообщение,
					 УчетнаяЗапись, Сообщение.ID_Пользователя,
				Сообщение.Ссылка, ?(ЗначениеЗаполнено(Сообщение.Ответственный), Сообщение.Ответственный, Сообщение.CRM_РольОтветственного));
			Иначе
				ЗаписатьСобытиеМессенджера(Перечисления.CRM_СобытияМессенджеров.ПолученоНовоеСообщение,
					 УчетнаяЗапись, Сообщение.ID_Пользователя,
					 Сообщение.Ссылка);
			КонецЕсли;
			
		КонецЕсли;	

		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЦикла;
	
	Если ЕстьНовые Тогда

		Если ЗначениеЗаполнено(МаксДатаСообщения) Тогда
			ЗаписатьДатуПолучения(УчетнаяЗапись, МаксДатаСообщения);
		КонецЕсли;
		
		ОтправитьСлужебноеСообщение(УчетнаяЗапись, Новый Структура("Данные, Текст",
			 "CRM_ПолученыНовыеСообщения",
			 Строка(УчетнаяЗапись) 
			+ " " + ТекстСообщения + Строка(ТекущаяДатаСеанса())));
		
		CRM_НапоминанияСервер.ДобавитьНапоминанияОСообщенияхМессенджеров(МассивСообщений, УчетнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

// Создать диалог из полученных данных
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка					 - Ссылка на учетную запись.
//  ДанныеСообщения	 - Структура						 - Данные сообщения.
//  Сообщение		 - ДокументСсылка.CRM_СообщениеМессенджера	 - Сообщения начиная с этого будут связаны с новым диалогом.
// 
// Возвращаемое значение:
//  СправочникСсылка.CRM_Диалоги - Ссылка на созданной диалог.
//
Функция СоздатьДиалог(УчетнаяЗапись, ДанныеСообщения, Сообщение = Неопределено) Экспорт 
	
	Параметры = Новый Структура;
	Параметры.Вставить("ID_Пользователя", ДанныеСообщения.ID_Пользователя);
	Параметры.Вставить("Группа", ДанныеСообщения.Группа);
	Параметры.Вставить("ГруппаПредставление", ДанныеСообщения.ГруппаПредставление);
	Параметры.Вставить("Контакт", ДанныеСообщения.Контакт);
	Если ЗначениеЗаполнено(ДанныеСообщения.Контакт) Тогда
		Параметры.Вставить("КонтактПредставление", ДанныеСообщения.Контакт);
	Иначе
		Параметры.Вставить("КонтактПредставление", ДанныеСообщения.КонтактПредставление);
	КонецЕсли;
	Параметры.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСообщения, "Ответственный") Тогда
		Параметры.Вставить("Ответственный", ДанныеСообщения.Ответственный);
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСообщения, "CRM_РольОтветственного") Тогда
		Параметры.Вставить("CRM_РольОтветственного", ДанныеСообщения.CRM_РольОтветственного);
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСообщения, "Основание") Тогда
		Параметры.Вставить("Основание", ДанныеСообщения.Основание);
	КонецЕсли;
	
	Диалог = Справочники.CRM_Диалоги.СоздатьДиалог(Параметры);
	
	Если Сообщение <> Неопределено Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	CRM_СообщениеМессенджера.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
		                      |ГДЕ
		                      |	CRM_СообщениеМессенджера.Диалог = &Диалог
		                      |	И CRM_СообщениеМессенджера.Дата >= &Дата");
		
		Запрос.УстановитьПараметр("Диалог", Сообщение.Диалог);
		Запрос.УстановитьПараметр("Дата", Сообщение.Дата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СообщениеОбъект.Диалог = Диалог;
			СообщениеОбъект.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Диалог;
	
КонецФункции

// Процедура - Завершить диалог
//
// Параметры:
//  Диалог			 - СправочникСсылка.CRM_Диалоги	 - Элемент справочника Диалоги
//  АвтоЗавершение	 - Булево						 - Признак автозавершения
//
Процедура ЗавершитьДиалог(Диалог, АвтоЗавершение = Ложь) Экспорт
	
	Справочники.CRM_Диалоги.ЗавершитьДиалог(Диалог, АвтоЗавершение);

КонецПроцедуры

// Завершить диалоги интереса по типу мессенджера
//
// Параметры:
//  Интерес				 - ДокументСсылка.CRM_Интерес	 - интерес, диалоги которого требуется завершить
//  ТипМессенджера		 - Строка						 - Тип мессенджера.
//  ПомечатьПрочитанным	 - Булево						 - Флаг "Помечать прочитанным".
//
Процедура ЗавершитьДиалогиИнтереса(Интерес, ТипМессенджера = Неопределено, ПомечатьПрочитанным = Истина) Экспорт
	Если ТипМессенджера = Неопределено Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ЖурналДокументов.CRM_Интерес КАК CRM_Интерес,
	                      |	CRM_ЖурналДокументов.Объект КАК Объект
	                      |ПОМЕСТИТЬ ВТ_Диалоги
	                      |ИЗ
	                      |	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
	                      |ГДЕ
	                      |	CRM_ЖурналДокументов.CRM_Интерес = &Интерес
	                      |	И CRM_ЖурналДокументов.Объект ССЫЛКА Справочник.CRM_Диалоги
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	CRM_Диалоги.Ссылка КАК Ссылка,
	                      |	CRM_Диалоги.ID_Пользователя КАК ID_Пользователя,
	                      |	CRM_Диалоги.Группа КАК Группа,
	                      |	CRM_Диалоги.УчетнаяЗапись КАК УчетнаяЗапись
	                      |ИЗ
	                      |	ВТ_Диалоги КАК ВТ_Диалоги
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_Диалоги КАК CRM_Диалоги
	                      |		ПО ВТ_Диалоги.Объект = CRM_Диалоги.Ссылка
	                      |ГДЕ
	                      |	НЕ CRM_Диалоги.Завершен");
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_УчетныеЗаписиМессенджеров.Ссылка КАК Ссылка
	                      |ПОМЕСТИТЬ ВТ_УчетныеЗаписи
	                      |ИЗ
	                      |	Справочник.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
	                      |ГДЕ
	                      |	CRM_УчетныеЗаписиМессенджеров.ТипМессенджера = &ТипМессенджера
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	CRM_ЖурналДокументов.CRM_Интерес КАК CRM_Интерес,
	                      |	CRM_ЖурналДокументов.Объект КАК Объект
	                      |ПОМЕСТИТЬ ВТ_Диалоги
	                      |ИЗ
	                      |	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
	                      |ГДЕ
	                      |	CRM_ЖурналДокументов.CRM_Интерес = &Интерес
	                      |	И CRM_ЖурналДокументов.Объект ССЫЛКА Справочник.CRM_Диалоги
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	CRM_Диалоги.Ссылка КАК Ссылка,
	                      |	CRM_Диалоги.ID_Пользователя КАК ID_Пользователя,
	                      |	CRM_Диалоги.Группа КАК Группа,
	                      |	CRM_Диалоги.УчетнаяЗапись КАК УчетнаяЗапись
	                      |ИЗ
	                      |	ВТ_Диалоги КАК ВТ_Диалоги
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_Диалоги КАК CRM_Диалоги
	                      |		ПО ВТ_Диалоги.Объект = CRM_Диалоги.Ссылка
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетныеЗаписи КАК ВТ_УчетныеЗаписи
	                      |		ПО (CRM_Диалоги.УчетнаяЗапись = ВТ_УчетныеЗаписи.Ссылка)
	                      |ГДЕ
	                      |	НЕ CRM_Диалоги.Завершен");
		Запрос.УстановитьПараметр("ТипМессенджера", ТипМессенджера);
	КонецЕсли;
	Запрос.УстановитьПараметр("Интерес", Интерес);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Справочники.CRM_Диалоги.ЗавершитьДиалог(Выборка.Ссылка);	
		Если ПомечатьПрочитанным Тогда
			ПометитьВходящиеКакПрочтенные(Выборка.УчетнаяЗапись,
				 Выборка.Группа,
				 Выборка.ID_Пользователя);
		КонецЕсли;
		РегистрыСведений.CRM_СоисполнителиДиалогов.УдалитьВсехСоисполнителей(Выборка.УчетнаяЗапись,
			 Выборка.Группа, 	Выборка.ID_Пользователя,
			 Ложь);
	КонецЦикла;
КонецПроцедуры

// Процедура - Передать диалог для ознакомления
//
// Параметры:
//  Диалог			 - СправочникСсылка.CRM_Диалоги	 - Элемент справочника Диалоги
//
Процедура ПередатьДиалогДляОзнакомления(Диалог) Экспорт
	
	Справочники.CRM_Диалоги.ПередатьДиалогДляОзнакомления(Диалог);

КонецПроцедуры

// Процедура - Принять диалог
//
// Параметры:
//  Диалог	 - СправочникСсылка.CRM_Диалоги	 - Элемент справочника Диалоги
//
Процедура ПринятьДиалог(Диалог) Экспорт
	
	Справочники.CRM_Диалоги.ПринятьДиалог(Диалог);

КонецПроцедуры

// Устанавливает наименование диалога
//
// Параметры:
//  Диалог		 - СправочникСсылка.CRM_Диалоги	 - диалог, которые требуется переименовать
//  Наименование - Строка	 - новое наименовапние диалога
//
Процедура ПереименоватьДиалог(Диалог, Наименование) Экспорт
	ДиалогОбъект = Диалог.ПолучитьОбъект();
	
	Если СтрДлина(Наименование) > 100 Тогда
		Наименование = Лев(Наименование, 97) + "...";
	КонецЕсли;
	
	ДиалогОбъект.Наименование = Наименование;
	ДиалогОбъект.Записать();
КонецПроцедуры

// Возвращает признак принятия диалога текущим пользователем
//
// Параметры:
//  Диалог	 - СправочникСсылка.CRM_Диалоги	 - Элемент справочника Диалоги
// 
// Возвращаемое значение:
//  Булево   - признак принятия диалога
//
Функция ПринятТекущимПользователем(Диалог) Экспорт
	
	Возврат Диалог.Статус = Перечисления.CRM_СтатусыДиалогов.ПринятВРаботу
		 И  Диалог.Ответственный = Пользователи.ТекущийПользователь();
	
КонецФункции // ПринятТекущимПользователем()

// Получить список мессенджеров
//
// Параметры:
//	РазмерИконки - Число - Размер иконки.
// 
// Возвращаемое значение:
//  СписокЗначений - Список мессенджеров.
//
Функция ПолучитьСписокМессенджеров(РазмерИконки = 16) Экспорт
	СписокМессенджеров = Новый СписокЗначений;
	Для каждого Обработка Из Метаданные.Обработки Цикл
		Если СтрНайти(Обработка.Имя, "CRM_РаботаСМессенджером") = 1 Тогда
			ТипМессенджера = СтрЗаменить(Обработка.Имя, "CRM_РаботаСМессенджером", "");
			Если Обработка.Макеты.Найти("Иконка_" + Строка(РазмерИконки)) <> Неопределено Тогда
				МакетКартинки = Обработки[Обработка.Имя].ПолучитьМакет("Иконка_" + Строка(РазмерИконки));
				Картинка = Новый Картинка(МакетКартинки);
			Иначе
				Картинка = Неопределено;
			КонецЕсли;
			СписокМессенджеров.Добавить(ТипМессенджера, , , Картинка);
		КонецЕсли;
	КонецЦикла;
	Возврат СписокМессенджеров;
КонецФункции

// Структура сообщения месенджера
// 
// Возвращаемое значение:
//  Структура - Структура сообщения. 
//
Функция СтруктураСообщенияМесенджера() Экспорт
	СтруктураСообщения = Новый Структура;
	СтруктураСообщения.Вставить("Дата");
	СтруктураСообщения.Вставить("ID_Сообщения");
	СтруктураСообщения.Вставить("ТекстСообщения");
	СтруктураСообщения.Вставить("ТекстHTML");
	СтруктураСообщения.Вставить("ВидСообщения");
	СтруктураСообщения.Вставить("ID_Пользователя");
	СтруктураСообщения.Вставить("Контакт");
	СтруктураСообщения.Вставить("КонтактПредставление");
	СтруктураСообщения.Вставить("Группа");
	СтруктураСообщения.Вставить("ГруппаПредставление");
	СтруктураСообщения.Вставить("Прочитано");
	СтруктураСообщения.Вставить("ID_СообщенияОснования");
	СтруктураСообщения.Вставить("Основание");
	СтруктураСообщения.Вставить("Вложения", Новый Массив);
	Возврат СтруктураСообщения;
КонецФункции

// Выполняет отключение.
//
// Параметры:
//	ТипМессенджера			   - Строка - Тип мессенджера.
//	СтруктураПараметровДоступа - СтруктураПараметровДоступа - Структура параметров доступа.
// 
// Возвращаемое значение:
//  Булево - Признак успешности операции.
//
Функция Отключиться(ТипМессенджера, СтруктураПараметровДоступа) Экспорт
	
	МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(ТипМессенджера);
	Возврат МодульМенеджера.Отключиться(СтруктураПараметровДоступа);
	
КонецФункции

// Возвращает служебные обсуждения мессенджеров.
//
// Параметры:
//	Пользователь - СправочникСсылка - Пользователь.
// 
// Возвращаемое значение:
//  Массив - служебные обсуждения мессенджеров.
//
Функция СлужебныеОбсужденияМессенджеров(Пользователь) Экспорт
	
	Если НЕ Обсуждения.ОбсужденияДоступны() Тогда
		Возврат Новый Массив;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивИдентификаторов = Новый Массив;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_УчетныеЗаписиМессенджеров.Ссылка КАК Ссылка,
	                      |	CRM_УчетныеЗаписиМессенджеров.РазрешитьПросмотрСообщенийВсемПользователям КАК РазрешитьПросмотрСообщенийВсемПользователям,
	                      |	CRM_УчетныеЗаписиМессенджеров1.УчетнаяЗапись КАК УчетнаяЗапись
	                      |ПОМЕСТИТЬ ВТ_УчетныеЗаписи
	                      |ИЗ
	                      |	Справочник.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров1
	                      |		ПО CRM_УчетныеЗаписиМессенджеров.Ссылка = CRM_УчетныеЗаписиМессенджеров1.УчетнаяЗапись
	                      |			И (CRM_УчетныеЗаписиМессенджеров1.Пользователь = &ТекущийПользователь)
	                      |ГДЕ
	                      |	НЕ CRM_УчетныеЗаписиМессенджеров.ПометкаУдаления
	                      |	И CRM_УчетныеЗаписиМессенджеров.Включена
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_УчетныеЗаписи.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	ВТ_УчетныеЗаписи КАК ВТ_УчетныеЗаписи
	                      |ГДЕ
	                      |	ВТ_УчетныеЗаписи.РазрешитьПросмотрСообщенийВсемПользователям
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ВТ_УчетныеЗаписи.Ссылка
	                      |ИЗ
	                      |	ВТ_УчетныеЗаписи КАК ВТ_УчетныеЗаписи
	                      |ГДЕ
	                      |	НЕ ВТ_УчетныеЗаписи.УчетнаяЗапись ЕСТЬ NULL
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ВТ_УчетныеЗаписи.Ссылка
	                      |ИЗ
	                      |	ВТ_УчетныеЗаписи КАК ВТ_УчетныеЗаписи
	                      |ГДЕ
	                      |	ВТ_УчетныеЗаписи.Ссылка = ЗНАЧЕНИЕ(Справочник.CRM_УчетныеЗаписиМессенджеров.СистемаВзаимодействия)");
	
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Идентификатор = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Идентификатор);
		Если Обсуждение = Неопределено Тогда
			Обсуждение = СистемаВзаимодействия.СоздатьОбсуждение();
			Обсуждение.Ключ = Идентификатор;
			Обсуждение.Отображаемое = Ложь;
			ВсеПользователи = СистемаВзаимодействия.СтандартныеПользователи.ВсеПользователиПриложения;
			Обсуждение.Участники.Добавить(ВсеПользователи);        
			Обсуждение.Записать();
		КонецЕсли;
		МассивИдентификаторов.Добавить(Обсуждение.Идентификатор);
	КонецЦикла;
	
	Возврат МассивИдентификаторов;
	
КонецФункции

// Возвращает подключаемые обсуждения мессенджеров.
//
// Параметры:
//	Пользователь	 - СправочникСсылка - Пользователь.
//	РолиПользователя - СписокЗначений - Роли пользователя.
// 
// Возвращаемое значение:
//  Массив - подключаемые обсуждения мессенджеров.
//
Функция ПодключаемыеОбсужденияМессенджеров(Пользователь, РолиПользователя) Экспорт
	
	УчетнаяЗапись = Справочники.CRM_УчетныеЗаписиМессенджеров.СистемаВзаимодействия;
	
	Если НЕ Обсуждения.ОбсужденияДоступны() ИЛИ НЕ УчетнаяЗапись.Включена Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	СтруктураПараметровДоступа = CRM_РаботаСМессенджерамиСерверПовтИсп.СтруктураПараметровДоступа(УчетнаяЗапись);
	Если СтруктураПараметровДоступа = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	МассивИдентификаторов = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	ОтборОбсуждений = Новый ОтборОбсужденийСистемыВзаимодействия();
	ОтборОбсуждений.Отображаемое = Истина;
	ОтборОбсуждений.КонтекстноеОбсуждение = Истина;
	ОтборОбсуждений.НаправлениеСортировки = НаправлениеСортировки.Убыв;
	МассивОбсуждений = СистемаВзаимодействия.ПолучитьОбсуждения(ОтборОбсуждений);
	Для каждого Обсуждение Из МассивОбсуждений Цикл
		Контекст =
			CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуИзНавигационной(Обсуждение.КонтекстОбсуждения.НавигационнаяСсылка);
			
		Если Контекст = Неопределено
			Или СтруктураПараметровДоступа.СписокОбъектов.НайтиПоЗначению(
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Контекст))) = Неопределено Тогда
			Продолжить;	
		КонецЕсли;
		Если (ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Ответственный")
				И (Контекст["Ответственный"] = Пользователь ИЛИ РолиПользователя.НайтиПоЗначению(Контекст["Ответственный"]) <> Неопределено))
			ИЛИ (ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Менеджер")
				И Контекст["Менеджер"] = Пользователь)
			ИЛИ (ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "ОсновнойМенеджер")
				И Контекст["ОсновнойМенеджер"] = Пользователь) Тогда
						
			МассивИдентификаторов.Добавить(Обсуждение.Идентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивИдентификаторов;
	
КонецФункции

// Возвращает доступные учетные записи мессенджеров.
//
// Параметры:
//	Пользователь - СправочникСсылка - Пользователь.
// 
// Возвращаемое значение:
//  Массив - доступные учетные записи мессенджеров.
//
Функция ДоступныеУчетныеЗаписиМессенджеров(Пользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивУчетныхЗаписей = Новый Массив;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_УчетныеЗаписиМессенджеров.Ссылка КАК Ссылка,
	                      |	CRM_УчетныеЗаписиМессенджеров.РазрешитьПросмотрСообщенийВсемПользователям КАК РазрешитьПросмотрСообщенийВсемПользователям,
	                      |	CRM_УчетныеЗаписиМессенджеров1.УчетнаяЗапись КАК УчетнаяЗапись
	                      |ПОМЕСТИТЬ ВТ_УчетныеЗаписи
	                      |ИЗ
	                      |	Справочник.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров1
	                      |		ПО CRM_УчетныеЗаписиМессенджеров.Ссылка = CRM_УчетныеЗаписиМессенджеров1.УчетнаяЗапись
	                      |			И (CRM_УчетныеЗаписиМессенджеров1.Пользователь = &ТекущийПользователь)
	                      |ГДЕ
	                      |	НЕ CRM_УчетныеЗаписиМессенджеров.ПометкаУдаления
	                      |	И CRM_УчетныеЗаписиМессенджеров.Включена
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_УчетныеЗаписи.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	ВТ_УчетныеЗаписи КАК ВТ_УчетныеЗаписи
	                      |ГДЕ
	                      |	ВТ_УчетныеЗаписи.РазрешитьПросмотрСообщенийВсемПользователям
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ВТ_УчетныеЗаписи.Ссылка
	                      |ИЗ
	                      |	ВТ_УчетныеЗаписи КАК ВТ_УчетныеЗаписи
	                      |ГДЕ
	                      |	НЕ ВТ_УчетныеЗаписи.УчетнаяЗапись ЕСТЬ NULL
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ВТ_УчетныеЗаписи.Ссылка
	                      |ИЗ
	                      |	ВТ_УчетныеЗаписи КАК ВТ_УчетныеЗаписи
	                      |ГДЕ
	                      |	ВТ_УчетныеЗаписи.Ссылка = ЗНАЧЕНИЕ(Справочник.CRM_УчетныеЗаписиМессенджеров.СистемаВзаимодействия)");
	
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивУчетныхЗаписей.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивУчетныхЗаписей;
	
КонецФункции

// Функция возвращает структуру параметров оповещенй о новых сообщениях.
// 
// Возвращаемое значение:
//   - Структура
//
Функция ПараметрыОповещенйОНовыхСообщениях() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИспользуютсяМессенджеры", ПолучитьФункциональнуюОпцию("CRM_ИспользоватьИнтеграциюСМессенджерами"));
	Если НЕ Параметры.ИспользуютсяМессенджеры Тогда
		Возврат Параметры;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	Параметры.Вставить("ОбсужденияДоступны", Обсуждения.ОбсужденияДоступны());
	
	Параметры.Вставить("ОповещенияНаРабочемСтоле", 
		CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("Диалоги_ОповещенияНаРабочемСтоле", ТекущийПользователь));
	
	Если Параметры.ОбсужденияДоступны Тогда
		Попытка
			Параметры.Вставить("ИдентификаторыОбсужденийСлужебные",
				Новый ФиксированныйМассив(СлужебныеОбсужденияМессенджеров(ТекущийПользователь)));
					
			Возврат Параметры;
		Исключение
			// Ошибка подключения к серверу обсуждений.
			Параметры.ОбсужденияДоступны = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Параметры.Вставить("ЕстьДоступныеУчетныеЗаписи",
		ДоступныеУчетныеЗаписиМессенджеров(Пользователи.АвторизованныйПользователь()).Количество() > 0);
		
	Возврат Параметры;
	
КонецФункции

// Возвращает данные о непрочитанных диалогах.
//
// Параметры:
//  ТекущийПользователь			 - СправочникСсылка.Пользователи	 - Текущий пользователь.
//  АвторизованныйПользователь	 - СправочникСсылка.Пользователи	 - Авторизованный пользователь.
//  ПараметрыОтбора				 - Структура, Неопределено	 - Параметры отбора.
// 
// Возвращаемое значение:
//   - Структура
//
Функция ПроверкаНепрочитанныхСообщений(ТекущийПользователь,
	 АвторизованныйПользователь,
	 ПараметрыОтбора) Экспорт
	 
	Если ПараметрыОтбора = Неопределено Тогда
		ПараметрыОтбора = ПараметрыОтбораСообщенийВФормеДиалогов(АвторизованныйПользователь); 
	КонецЕсли;

	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДанныеСоисполнителейТЗ.УчетнаяЗапись КАК УчетнаяЗапись,
	                      |	ДанныеСоисполнителейТЗ.Группа КАК Группа,
	                      |	ДанныеСоисполнителейТЗ.ID_Пользователя КАК ID_Пользователя,
	                      |	ИСТИНА КАК КакСоисполнитель,
						  |	ДанныеСоисполнителейТЗ.Статус КАК Статус
	                      |ПОМЕСТИТЬ ДанныеСоисполнителей
	                      |ИЗ
	                      |	&ДанныеСоисполнителейТЗ КАК ДанныеСоисполнителейТЗ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_Диалоги.Ссылка) КАК Новых,
	                      |	0 КАК ВРаботе,
	                      |	0 КАК Всего
	                      |ПОМЕСТИТЬ ВременнаяТаблица
	                      |ИЗ
	                      |	Справочник.CRM_Диалоги КАК CRM_Диалоги
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |		ПО (CRM_СообщениеМессенджера.Диалог = CRM_Диалоги.Ссылка)
	                      |			И (CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Входящее))
	                      |			И (НЕ CRM_СообщениеМессенджера.Прочитано)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
	                      |		ПО CRM_Диалоги.УчетнаяЗапись = CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись
                          |		И (CRM_УчетныеЗаписиМессенджеров.Пользователь = &АвторизованныйПользователь ИЛИ CRM_УчетныеЗаписиМессенджеров.Пользователь В (&РолиАвторизованногоПользователя)ИЛИ CRM_Диалоги.УчетнаяЗапись.РазрешитьПросмотрСообщенийВсемПользователям)
                          |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеСоисполнителей КАК ДанныеСоисполнителей
                          |		ПО CRM_Диалоги.УчетнаяЗапись = ДанныеСоисполнителей.УчетнаяЗапись
                          |			И CRM_Диалоги.Группа = ДанныеСоисполнителей.Группа
                          |			И CRM_Диалоги.ID_Пользователя = ДанныеСоисполнителей.ID_Пользователя
	                      |ГДЕ
	                      |	(CRM_Диалоги.УчетнаяЗапись.РазрешитьПросмотрСообщенийВсемПользователям
	                      |			ИЛИ CRM_Диалоги.УчетнаяЗапись = ЗНАЧЕНИЕ(Справочник.CRM_УчетныеЗаписиМессенджеров.СистемаВзаимодействия)
	                      |			ИЛИ НЕ CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись ЕСТЬ NULL
	                      |			ИЛИ CRM_Диалоги.CRM_РольОтветственного В (&РолиПользователя))
	                      |	И НЕ CRM_Диалоги.ПометкаУдаления
	                      |	И НЕ CRM_Диалоги.Служебный
	                      |	И НЕ ВЫБОР КОГДА ЕСТЬNULL(ДанныеСоисполнителей.КакСоисполнитель, ЛОЖЬ) И CRM_Диалоги.Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыДиалогов.ПринятВРаботу) ТОГДА ДанныеСоисполнителей.Статус ИНАЧЕ CRM_Диалоги.Статус КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыДиалогов.ПринятВРаботу)
						  |	И ВЫБОР
	                      |			КОГДА &ТекущийПользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
                          |					ИЛИ (ВЫБОР КОГДА &ОтображатьТолькоСвои ТОГДА ЛОЖЬ ИНАЧЕ ЕСТЬNULL(ДанныеСоисполнителей.КакСоисполнитель, ЛОЖЬ) КОНЕЦ)
	                      |				ТОГДА ИСТИНА
	                      |			ИНАЧЕ CRM_Диалоги.Ответственный = &ТекущийПользователь
	                      |					ИЛИ CRM_Диалоги.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	                      |		КОНЕЦ
	                      |	//СтрокаУсловияОтборПоКонтактам
	                      |
	                      |ОБЪЕДИНИТЬ
	                      |
	                      |ВЫБРАТЬ
	                      |	0,
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_Диалоги.Ссылка),
	                      |	0
	                      |ИЗ
	                      |	Справочник.CRM_Диалоги КАК CRM_Диалоги
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |		ПО (CRM_СообщениеМессенджера.Диалог = CRM_Диалоги.Ссылка)
	                      |			И (CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Входящее))
	                      |			И (НЕ CRM_СообщениеМессенджера.Прочитано)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
	                      |		ПО CRM_Диалоги.УчетнаяЗапись = CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись
                          |		И (CRM_УчетныеЗаписиМессенджеров.Пользователь = &АвторизованныйПользователь ИЛИ CRM_УчетныеЗаписиМессенджеров.Пользователь В (&РолиАвторизованногоПользователя)ИЛИ CRM_Диалоги.УчетнаяЗапись.РазрешитьПросмотрСообщенийВсемПользователям)
                          |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеСоисполнителей КАК ДанныеСоисполнителей
                          |		ПО CRM_Диалоги.УчетнаяЗапись = ДанныеСоисполнителей.УчетнаяЗапись
                          |			И CRM_Диалоги.Группа = ДанныеСоисполнителей.Группа
                          |			И CRM_Диалоги.ID_Пользователя = ДанныеСоисполнителей.ID_Пользователя
	                      |ГДЕ
	                      |	(CRM_Диалоги.УчетнаяЗапись.РазрешитьПросмотрСообщенийВсемПользователям
	                      |			ИЛИ CRM_Диалоги.УчетнаяЗапись = ЗНАЧЕНИЕ(Справочник.CRM_УчетныеЗаписиМессенджеров.СистемаВзаимодействия)
	                      |			ИЛИ НЕ CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись ЕСТЬ NULL
	                      |			ИЛИ CRM_Диалоги.CRM_РольОтветственного В (&РолиПользователя))
	                      |	И НЕ CRM_Диалоги.ПометкаУдаления
	                      |	И НЕ CRM_Диалоги.Служебный
	                      |	И ВЫБОР КОГДА ЕСТЬNULL(ДанныеСоисполнителей.КакСоисполнитель, ЛОЖЬ) И CRM_Диалоги.Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыДиалогов.ПринятВРаботу) ТОГДА ДанныеСоисполнителей.Статус ИНАЧЕ CRM_Диалоги.Статус КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыДиалогов.ПринятВРаботу)
	                      |	И ВЫБОР
	                      |			КОГДА &ТекущийПользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
                          |					ИЛИ (ВЫБОР КОГДА &ОтображатьТолькоСвои ТОГДА ЛОЖЬ ИНАЧЕ ЕСТЬNULL(ДанныеСоисполнителей.КакСоисполнитель, ЛОЖЬ) КОНЕЦ)
	                      |				ТОГДА ИСТИНА
	                      |			ИНАЧЕ CRM_Диалоги.Ответственный = &ТекущийПользователь
	                      |					ИЛИ CRM_Диалоги.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	                      |		КОНЕЦ
	                      |	//СтрокаУсловияОтборПоКонтактам
	                      |
	                      |ОБЪЕДИНИТЬ
	                      |
	                      |ВЫБРАТЬ
	                      |	0,
	                      |	0,
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_Диалоги.Ссылка)
	                      |ИЗ
	                      |	Справочник.CRM_Диалоги КАК CRM_Диалоги
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |		ПО (CRM_СообщениеМессенджера.Диалог = CRM_Диалоги.Ссылка)
	                      |			И (CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Входящее))
	                      |			И (НЕ CRM_СообщениеМессенджера.Прочитано)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
	                      |		ПО CRM_Диалоги.УчетнаяЗапись = CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись
                          |		И (CRM_УчетныеЗаписиМессенджеров.Пользователь = &АвторизованныйПользователь ИЛИ CRM_УчетныеЗаписиМессенджеров.Пользователь В (&РолиАвторизованногоПользователя)ИЛИ CRM_Диалоги.УчетнаяЗапись.РазрешитьПросмотрСообщенийВсемПользователям)
                          |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеСоисполнителей КАК ДанныеСоисполнителей
                          |		ПО CRM_Диалоги.УчетнаяЗапись = ДанныеСоисполнителей.УчетнаяЗапись
                          |			И CRM_Диалоги.Группа = ДанныеСоисполнителей.Группа
                          |			И CRM_Диалоги.ID_Пользователя = ДанныеСоисполнителей.ID_Пользователя
	                      |ГДЕ
	                      |	(CRM_Диалоги.УчетнаяЗапись.РазрешитьПросмотрСообщенийВсемПользователям
	                      |			ИЛИ CRM_Диалоги.УчетнаяЗапись = ЗНАЧЕНИЕ(Справочник.CRM_УчетныеЗаписиМессенджеров.СистемаВзаимодействия)
	                      |			ИЛИ НЕ CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись ЕСТЬ NULL
	                      |			ИЛИ CRM_Диалоги.CRM_РольОтветственного В (&РолиПользователя))
	                      |	И НЕ CRM_Диалоги.ПометкаУдаления
	                      |	И НЕ CRM_Диалоги.Служебный
	                      |	И ВЫБОР
	                      |			КОГДА &ТекущийПользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
                          |					ИЛИ (ВЫБОР КОГДА &ОтображатьТолькоСвои ТОГДА ЛОЖЬ ИНАЧЕ ЕСТЬNULL(ДанныеСоисполнителей.КакСоисполнитель, ЛОЖЬ) КОНЕЦ)
	                      |				ТОГДА ИСТИНА
	                      |			ИНАЧЕ CRM_Диалоги.Ответственный = &ТекущийПользователь
	                      |					ИЛИ CRM_Диалоги.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	                      |		КОНЕЦ
	                      |	//СтрокаУсловияОтборПоКонтактам
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СУММА(ВременнаяТаблица.Новых) КАК Новых,
	                      |	СУММА(ВременнаяТаблица.ВРаботе) КАК ВРаботе,
	                      |	СУММА(ВременнаяТаблица.Всего) КАК Всего
	                      |ИЗ
	                      |	ВременнаяТаблица КАК ВременнаяТаблица");
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
						  
	РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ТекущийПользователь);
	РолиПользователя.Добавить(ТекущийПользователь);
	Запрос.УстановитьПараметр("ДанныеСоисполнителейТЗ", ДанныеКонтактовКакСоисполнитель(ТекущийПользователь));
	Запрос.УстановитьПараметр("РолиПользователя", РолиПользователя);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("АвторизованныйПользователь", АвторизованныйПользователь);
	Запрос.УстановитьПараметр("РолиАвторизованногоПользователя",
		 CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(АвторизованныйПользователь));
	Запрос.УстановитьПараметр("ОтображатьТолькоСвои", ПараметрыОтбора.ОтображатьТолькоСвои);
	
	МассивУсловий = Новый Массив();
	
	Если ПараметрыОтбора.ОтборКонтакты.Количество() > 0 Тогда
		МассивУсловий.Добавить(" И CRM_Диалоги.Контакт В(&ОтборКонтакты)");
		Запрос.УстановитьПараметр("ОтборКонтакты", ПараметрыОтбора.ОтборКонтакты);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтбора.ОтборКанал) Тогда
		МассивУсловий.Добавить(" И CRM_Диалоги.УчетнаяЗапись = &УчетнаяЗапись");
		Запрос.УстановитьПараметр("УчетнаяЗапись", ПараметрыОтбора.ОтборКанал);
	КонецЕсли;
	Если Не ПараметрыОтбора.ОтображатьЗакрытые Тогда
		МассивУсловий.Добавить(" И НЕ CRM_Диалоги.Завершен");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтбора.ОтборПериод) Тогда
		МассивУсловий.Добавить(" И CRM_Диалоги.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания");
		Запрос.УстановитьПараметр("ДатаНачала", ПараметрыОтбора.ОтборПериод.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", ПараметрыОтбора.ОтборПериод.ДатаОкончания);
	КонецЕсли;	
	
	Условие = СтрСоединить(МассивУсловий);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//СтрокаУсловияОтборПоКонтактам", Условие);

	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураРезультата = Новый Структура("Новых, ВРаботе, Все", 0, 0, 0);

	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРезультата, Выборка);
		СтруктураРезультата.Все = Выборка.Всего;
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции // ()

// Функция возвращает данные контактов соисполнителей.
//
// Параметры:
//  ТПользователь	 - СправочникСсылка.Пользователи - Текущих пользователь.
//  ДанныеКонтактов	 - 								 - Структура
//  								* УчетнаяЗапись	 - СправочникСсылка.CRM_УчетныеЗаписиМессенджеров - Ссылка на учетную запись.
//  								* Группа			 - Строка - Текущая группа.
//  								* ID_Пользователя	 - Строка - ИД пользователя.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - :
//  * УчетнаяЗапись	 - СправочникСсылка.CRM_УчетныеЗаписиМессенджеров - Ссылка на учетную запись.
//  * Группа			 - Строка - Текущая группа.
//  * ID_Пользователя	 - Строка - ИД пользователя.
//
Функция ДанныеКонтактовКакСоисполнитель(ТПользователь, ДанныеКонтактов = Неопределено) Экспорт
	
	МассивСоисполнителей = Новый Массив;
	МассивСоисполнителей.Добавить(ТПользователь);
	
	КонтактыСоисполнителей = РегистрыСведений.CRM_СоисполнителиДиалогов.КонтактыСоисполнителей(МассивСоисполнителей,
		 ДанныеКонтактов);
	
	Возврат КонтактыСоисполнителей;
	
КонецФункции

// Получает структуру пользователя, автора сообщения.
//
// Параметры:
//	Сообщение - ДокументСсылка.CRM_СообщениеМессенджера - Сообщение.
// 
// Возвращаемое значение:
//  Структура - содержит идентификатор и имя пользователя.
//
Функция СтруктураПользователяАвтораСообщения(Сообщение) Экспорт
	
	Идентификатор = Новый ИдентификаторПользователяСистемыВзаимодействия(Сообщение.ID_Пользователя);
	ПользовательСВ = СистемаВзаимодействия.ПолучитьПользователя(Идентификатор);
	Если ПользовательСВ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("Идентификатор, Имя", ПользовательСВ.Идентификатор, ПользовательСВ.Имя);
	
КонецФункции

// Возвращает участников обсуждения.
//
// Параметры:
//	Идентификатор - Строка - Идентификатор.
// 
// Возвращаемое значение:
//  СписокЗначений - участники обсуждения.
//
Функция УчастникиОбсуждения(Идентификатор) Экспорт
	ТекущийПользовательСВ = СистемаВзаимодействия.ИдентификаторТекущегоПользователя();
	Участники = Новый СписокЗначений;
	ИдентификаторОбсуждения = Новый ИдентификаторОбсужденияСистемыВзаимодействия(Идентификатор);
	ОтборСообщений = Новый ОтборСообщенийСистемыВзаимодействия;
	ОтборСообщений.Обсуждение = ИдентификаторОбсуждения;
	Сообщения = СистемаВзаимодействия.ПолучитьСообщения(ОтборСообщений);
	Для каждого Сообщение Из Сообщения Цикл
		Если ТекущийПользовательСВ = Сообщение.Автор Тогда
			Продолжить;
		КонецЕсли;
		ПользовательСВ = СистемаВзаимодействия.ПолучитьПользователя(Сообщение.Автор);
		Если ПользовательСВ <> Неопределено И Участники.НайтиПоЗначению(Сообщение.Автор) = Неопределено Тогда
			 Участники.Добавить(Сообщение.Автор, ПользовательСВ.Имя);
		КонецЕсли;
	КонецЦикла;
	Участники.Добавить("Выбрать", Нстр("ru = 'Выбрать...'"));
	Возврат Участники;
КонецФункции

// Последнее сообщение диалога
//
// Параметры:
//  Диалог	 - СправочникСсылка.CRM_Диалоги	 - Элемент справочника Диалоги
// 
// Возвращаемое значение:
//  Структура - Результат выполнения функции
//
Функция ПоследнееСообщениеДиалога(Диалог) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	CRM_СообщениеМессенджера.Ссылка КАК Сообщение,
	|	CRM_СообщениеМессенджера.ВидСообщения КАК ВидСообщения,
	|	CRM_СообщениеМессенджера.Дата КАК Дата,
	|	CRM_СообщениеМессенджера.Дата КАК ДатаАРМ,
	|	CRM_СообщениеМессенджера.ТекстСообщения КАК ТекстСообщения
	|ИЗ
	|	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	|ГДЕ
	|	CRM_СообщениеМессенджера.Диалог = &Диалог
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_СообщениеМессенджера.МоментВремени УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Диалог", Диалог);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Новый Структура;
		Результат.Вставить("Сообщение",		Выборка.Сообщение);
		Результат.Вставить("ВидСообщения",	Выборка.ВидСообщения);
		Результат.Вставить("Дата",			Выборка.Дата);
		Результат.Вставить("ТекстСокр",		Сред(Выборка.ТекстСообщения, 1, 150));
		Результат.Вставить("ДатаАРМ",		Дата('00010101'));
		
		Если Выборка.ВидСообщения = Перечисления.CRM_ВидыСообщенияМессенджера.Входящее Тогда
			Если Выборка.ВидСообщения = Перечисления.CRM_ВидыСообщенияМессенджера.Исходящее Тогда
				Результат.ДатаАРМ = Результат.Дата;
			Иначе
				// Если это повторное входящее сообщение НЕ нового диалога, тогда дата для сортировки не должна измениться:
				Если ЗначениеЗаполнено(Выборка.ДатаАРМ) Тогда
					Результат.ДатаАРМ = Выборка.ДатаАРМ;
				Иначе
					Результат.ДатаАРМ = Результат.Дата;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает активный диалог
//
// Параметры:
//  Параметры	 - Структура - Параметры создания диалога
// 
// Возвращаемое значение:
//  СправочникСсылка.CRM_Диалоги - активный диалог или пустая ссылка
//
Функция ПолучитьАктивныйДиалог(Параметры) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	CRM_Диалоги.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_Диалоги КАК CRM_Диалоги
	|ГДЕ
	|	CRM_Диалоги.ID_Пользователя = &ID_Пользователя
	|	И CRM_Диалоги.Группа = &Группа
	|	И CRM_Диалоги.УчетнаяЗапись = &УчетнаяЗапись
	|	И CRM_Диалоги.Контакт = &Контакт
	|	И НЕ CRM_Диалоги.Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыДиалогов.Закрыт)
	|	И НЕ CRM_Диалоги.Служебный");
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры, "ЭтоНомерТелефона")
		 И Параметры.ЭтоНомерТелефона Тогда
		ID_Пользователя = Параметры.ID_Пользователя + "@c.us";
		Группа = Параметры.Группа + "@c.us";
	Иначе
		ID_Пользователя = Параметры.ID_Пользователя;
		Группа = Параметры.Группа;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ID_Пользователя", ID_Пользователя);
	Запрос.УстановитьПараметр("Группа", Группа);
	Запрос.УстановитьПараметр("УчетнаяЗапись", Параметры.УчетнаяЗапись);
	Запрос.УстановитьПараметр("Контакт", Параметры.Контакт);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе	
		Возврат Справочники.CRM_Диалоги.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции // ()

// Возвращает массив структур
//
// Параметры:
//  Объекты	 - Массив	 - Массив объектов по которым проверяется наличие непрочитанных сообщений
// 
// Возвращаемое значение:
//   - Массив
//
Функция ПроверкаНепрочитанныхИсхСообщенийПоОбъектам(Объекты) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_СообщениеМессенджера.Ссылка) КАК Сообщений,
	                      |	CRM_СообщениеМессенджера.Диалог.ДокументОснование КАК Основание
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.Диалог.ДокументОснование В(&Объекты)
	                      |	И НЕ CRM_СообщениеМессенджера.Прочитано
	                      |	И CRM_СообщениеМессенджера.ВидСообщения = &ВидСообщения
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	CRM_СообщениеМессенджера.Диалог.ДокументОснование");

	Запрос.УстановитьПараметр("Объекты", Объекты);
	Запрос.УстановитьПараметр("ВидСообщения", Перечисления.CRM_ВидыСообщенияМессенджера.Исходящее);
	Выборка = Запрос.Выполнить().Выбрать();
	Результат = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Новый Структура("Основание, Сообщений", Выборка.Основание, Выборка.Сообщений));
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Помечает исходящие сообщения прочитанными
// Параметры:
//  Объекты	 - Массив - Массив объектов по которым проверяется наличие непрочитанных сообщений
Процедура ПометитьПрочитаннымиИсхСообщенияПоОбъектам(Объекты) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СообщениеМессенджера.Ссылка КАК Сообщение
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.Диалог.ДокументОснование В(&Объекты)
	                      |	И НЕ CRM_СообщениеМессенджера.Прочитано
	                      |	И CRM_СообщениеМессенджера.ВидСообщения = &ВидСообщения");

	Запрос.УстановитьПараметр("Объекты", Объекты);
	Запрос.УстановитьПараметр("ВидСообщения", Перечисления.CRM_ВидыСообщенияМессенджера.Исходящее);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СообщениеОбъект = Выборка.Сообщение.ПолучитьОбъект();
		СообщениеОбъект.Прочитано = Истина;
		СообщениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Проверяет наличие подходящего контакта по документу интереса или КП.
//
// Параметры:
//  ТекущийДокумент - ДокументСсылка.CRM_Интерес | ДокументСсылка.КоммерческоеПредложениеКлиенту - Документ проверки.
// 
// Возвращаемое значение:
//  Булево - Наличие подходящего контакта.
//
Функция ЕстьПодходящиеКонтакты(ТекущийДокумент) Экспорт
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ПараметрыДиалога = CRM_УправлениеПечатью.ПолучитьПараметрыОткрытияДляМессенджера(ТекущийДокумент);
	СписокКонтактов = Новый СписокЗначений;
	Если ТипЗнч(ПараметрыДиалога.ПараметрОткрытия) = Тип("СправочникСсылка.Партнеры") Тогда
		СписокКонтактов.ЗагрузитьЗначения(CRM_ОбщегоНазначенияСервер.ПолучитьКонтактныхЛицКонтрагента(ПараметрыДиалога.ПараметрОткрытия).ВыгрузитьКолонку("КонтактноеЛицо"));
		СписокКонтактов.Добавить(ПараметрыДиалога.ПараметрОткрытия);
	ИначеЕсли ТипЗнч(ПараметрыДиалога.ПараметрОткрытия) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		СписокКонтактов.Добавить(ПараметрыДиалога.ПараметрОткрытия.Владелец);
		СписокКонтактов.Добавить(ПараметрыДиалога.ПараметрОткрытия);
	ИначеЕсли ТекущийДокумент = Тип("ДокументСсылка.CRM_Интерес")
			И ТипЗнч(ПараметрыДиалога.ПараметрОткрытия) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		СписокКонтактов.Добавить(ПараметрыДиалога.ПараметрОткрытия);
	КонецЕсли;

	СписокФильтровПоТипуМессенджера = Новый Массив;
	СписокФильтровПоТипуМессенджера.Добавить("Instagram");
	СписокФильтровПоТипуМессенджера.Добавить("Viber");
	
// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_СообщениеМессенджера.ID_Пользователя КАК ID_Пользователя,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА CRM_СообщениеМессенджера.Контакт <> НЕОПРЕДЕЛЕНО
	|				ТОГДА CRM_СообщениеМессенджера.Контакт
	|			ИНАЧЕ CRM_СообщениеМессенджера.КонтактПредставление
	|		КОНЕЦ) КАК Контакт,
	|	МАКСИМУМ(CRM_СообщениеМессенджера.Контакт.Владелец) КАК ВладелецКонтакта,
	|	CRM_СообщениеМессенджера.Группа КАК Группа,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА CRM_СообщениеМессенджера.ID_Пользователя <> CRM_СообщениеМессенджера.Группа
	|				ТОГДА CRM_СообщениеМессенджера.ГруппаПредставление
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК ГруппаПредставление,
	|	CRM_СообщениеМессенджера.УчетнаяЗапись КАК УчетнаяЗапись,
	|	МАКСИМУМ(CRM_СообщениеМессенджера.УчетнаяЗапись.Включена) КАК Включена,
	|	МАКСИМУМ(CRM_СообщениеМессенджера.Дата) КАК ДатаПоследнего,
	|	МАКСИМУМ(CRM_УчетныеЗаписиМессенджеров.Наименование) КАК ПредставлениеУчетнойЗаписи,
	|	МАКСИМУМ(ВложенныйЗапрос.Новых) КАК Новых
	|ИЗ
	|	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров1
	|			ПО CRM_УчетныеЗаписиМессенджеров.Ссылка = CRM_УчетныеЗаписиМессенджеров1.УчетнаяЗапись
	|				И (CRM_УчетныеЗаписиМессенджеров1.Пользователь = &ТекущийПользователь)
	|		ПО CRM_СообщениеМессенджера.УчетнаяЗапись = CRM_УчетныеЗаписиМессенджеров.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_СообщениеМессенджера.Ссылка) КАК Новых,
	|			CRM_СообщениеМессенджера.УчетнаяЗапись КАК УчетнаяЗапись,
	|			CRM_СообщениеМессенджера.Группа КАК Группа,
	|			CRM_СообщениеМессенджера.ID_Пользователя КАК ID_Пользователя
	|		ИЗ
	|			Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
	|				ПО CRM_СообщениеМессенджера.УчетнаяЗапись = CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись
	|					И (CRM_УчетныеЗаписиМессенджеров.Пользователь = &ТекущийПользователь)
	|		ГДЕ
	|			НЕ CRM_СообщениеМессенджера.Прочитано
	|			И CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Входящее)
	|			И (CRM_СообщениеМессенджера.УчетнаяЗапись.РазрешитьПросмотрСообщенийВсемПользователям
	|					ИЛИ НЕ CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись ЕСТЬ NULL)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			CRM_СообщениеМессенджера.УчетнаяЗапись,
	|			CRM_СообщениеМессенджера.Группа,
	|			CRM_СообщениеМессенджера.ID_Пользователя) КАК ВложенныйЗапрос
	|		ПО CRM_СообщениеМессенджера.Группа = ВложенныйЗапрос.Группа
	|			И CRM_СообщениеМессенджера.УчетнаяЗапись = ВложенныйЗапрос.УчетнаяЗапись
	|			И CRM_СообщениеМессенджера.ID_Пользователя = ВложенныйЗапрос.ID_Пользователя
	|ГДЕ
	|	CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Входящее)
	|	И (CRM_СообщениеМессенджера.УчетнаяЗапись.РазрешитьПросмотрСообщенийВсемПользователям
	|			ИЛИ НЕ CRM_УчетныеЗаписиМессенджеров1.УчетнаяЗапись ЕСТЬ NULL)
	|	И НЕ CRM_СообщениеМессенджера.УчетнаяЗапись.ТипМессенджера В (&СписокФильтровПоТипуМессенджера)
	|	И НЕ CRM_УчетныеЗаписиМессенджеров.ТипМессенджера В (&СписокФильтровПоТипуМессенджера)
	|	И CRM_СообщениеМессенджера.Диалог.Ответственный = &ТекущийПользователь
	|	И НЕ CRM_СообщениеМессенджера.Диалог.Завершен
	|	//ОтборПоКонтактам
	|
	|СГРУППИРОВАТЬ ПО
	|	CRM_СообщениеМессенджера.ID_Пользователя,
	|	CRM_СообщениеМессенджера.Группа,
	|	CRM_СообщениеМессенджера.УчетнаяЗапись
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПоследнего УБЫВ,
	|	Контакт");
// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("СписокФильтровПоТипуМессенджера", СписокФильтровПоТипуМессенджера);

	Условие = "";
	Если СписокКонтактов.Количество() > 0 Тогда
		Условие = Условие + "И CRM_СообщениеМессенджера.Контакт В(&СписокКонтактов)";
		Запрос.УстановитьПараметр("СписокКонтактов", СписокКонтактов);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоКонтактам", Условие);
	
	ТаблицаКонтактов = Запрос.Выполнить().Выгрузить();
	
	Возврат (ТаблицаКонтактов.Количество() > 0);
	
КонецФункции // ЕстьПодходящиеКонтакты()

// Возвращает количкство сообщений диалога
//
// Параметры:
//  Диалог  - СправочникСсылка.CRM_Диалоги - диалог, для которого требуется получить количество сообщений
//
// Возвращаемое значение:
//   Число   - количество сообщений диалога
//
Функция КоличествоСообщенийДиалога(Диалог) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КОЛИЧЕСТВО(*) КАК Количество
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.Диалог = &Диалог");
	Запрос.УстановитьПараметр("Диалог", Диалог);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Количество();
	
КонецФункции // ЭтоПервоеСообщениеДиалога()

// Возвращает параметры работы мессенджера по умолчанию.
//
// Возвращаемое значение:
//  Структура - Структура с параметрами.
//
Функция СтруктураПараметровМессенджера() Экспорт
	
	ПараметрыМессенджера = Новый Структура();
	
	ПараметрыМессенджера.Вставить("ИспользуютсяВложения", Истина);
	ПараметрыМессенджера.Вставить("ТекстОтдельноОтВложений", Ложь);
	ПараметрыМессенджера.Вставить("ФильтрВложений", "");
	ПараметрыМессенджера.Вставить("МаксРазмерВложения", 0);
	ПараметрыМессенджера.Вставить("ВозможностьПисатьПервыми", Ложь);
	
	Возврат ПараметрыМессенджера;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет поиск диалога и сообщения менеджера.
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка - Ссылка на учетную запись.
//  Группа			 - Строка - Текущая группа. 
//  IDПользователя	 - Строка - ИД пользователя. 
//  ID_Сообщения	 - Строка - ИД сообщения. 
// 
// Возвращаемое значение:
//  Структура - Найденные диалог и сообщение.
//
Функция НайтиСообщениеИДиалогМессенджера(УчетнаяЗапись, Группа, ID_Пользователя, ID_Сообщения) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	CRM_Диалоги.Ссылка КАК Диалог,
		|	CRM_СообщениеМессенджера.Ссылка КАК Сообщение
		|ИЗ
		|	Справочник.CRM_Диалоги КАК CRM_Диалоги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
		|		ПО (CRM_СообщениеМессенджера.Диалог = CRM_Диалоги.Ссылка)
		|			И (CRM_СообщениеМессенджера.ID_Сообщения = &ID_Сообщения)
		|ГДЕ
		|	CRM_Диалоги.ID_Пользователя = &ID_Пользователя
		|	И CRM_Диалоги.УчетнаяЗапись = &УчетнаяЗапись
		|	И CRM_Диалоги.Группа = &Группа
		|	И НЕ CRM_Диалоги.Служебный
		|	И НЕ(CRM_Диалоги.Завершен
		|				И CRM_СообщениеМессенджера.Ссылка ЕСТЬ NULL)
		|	И НЕ CRM_Диалоги.Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыДиалогов.ПереданДляОзнакомления)
		|	И НЕ CRM_Диалоги.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("ID_Сообщения",		ID_Сообщения);
	Запрос.УстановитьПараметр("ID_Пользователя",	ID_Пользователя);
	Запрос.УстановитьПараметр("УчетнаяЗапись",		УчетнаяЗапись);
	Запрос.УстановитьПараметр("Группа",				Группа);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Диалог, Сообщение", Выборка.Диалог, Выборка.Сообщение);
	Иначе
		// Диалог не найден.
		Возврат Новый Структура("Диалог, Сообщение", Неопределено, Неопределено);
	КонецЕсли;
	
КонецФункции // НайтиСообщениеИДиалогМессенджера()

// Выполняет поиск сообщения менеджера.
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка - Ссылка на учетную запись.
//  Группа			 - Строка - Текущая группа. 
//  IDПользователя	 - Строка - ИД пользователя. 
//  ID_Сообщения	 - Строка - ИД сообщения. 
// 
// Возвращаемое значение:
//  ДокументСсылка.CRM_СообщениеМессенджера - Найденное сообщение.
//
Функция НайтиСообщениеМессенджера(УчетнаяЗапись, Группа, ID_Сообщения) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СообщениеМессенджера.Ссылка КАК Сообщение
	                      |ИЗ
	                      |	Справочник.CRM_Диалоги КАК CRM_Диалоги
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |		ПО (CRM_СообщениеМессенджера.Диалог = CRM_Диалоги.Ссылка)
	                      |			И (CRM_СообщениеМессенджера.ID_Сообщения = &ID_Сообщения)
	                      |ГДЕ
	                      |	CRM_Диалоги.УчетнаяЗапись = &УчетнаяЗапись
	                      |	И CRM_Диалоги.Группа = &Группа");
	
	Запрос.УстановитьПараметр("ID_Сообщения", ID_Сообщения);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("Группа", Группа);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сообщение;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Скрывает из АРМ предыдущие сообщения.
//
// Параметры:
//  Сообщение - ДокументСсылка.CRM_СообщениеМессенджера - Сообщение.
//
Процедура СкрытьИзАрмаПредыдущиеСообщения(Сообщение) Экспорт 
	//Возврат;
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	CRM_СообщениеМессенджера.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	|ГДЕ
	|	CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	|	И CRM_СообщениеМессенджера.Группа = &Группа
	|	И CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
	|	И НЕ CRM_СообщениеМессенджера.CRM_СкрытьВАРМ
	|	И CRM_СообщениеМессенджера.Ссылка <> &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_СообщениеМессенджера.Дата УБЫВ");
	Запрос.УстановитьПараметр("УчетнаяЗапись", Сообщение.УчетнаяЗапись);
	Запрос.УстановитьПараметр("Группа", Сообщение.Группа);
	Запрос.УстановитьПараметр("Ссылка", Сообщение.Ссылка);
	Запрос.УстановитьПараметр("ID_Пользователя", Сообщение.ID_Пользователя);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.CRM_СостоянияЛидов.УдалитьСостояниеЛида(Выборка.Ссылка);
		СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СообщениеОбъект.CRM_СкрытьВАРМ = Истина;
		Попытка
			СообщениеОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка, , , 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

// Выполняет ожидание событий мессенджера.
//
// Параметры:
//  УникальныйИдентификаторЗадания - Строка - Уникальный идентификатор задания.
//	ТипМессенджера				   - Строка - Тип мессенджера.
//
Процедура ОжиданиеСобытийМессенджера(УникальныйИдентификаторЗадания = Неопределено,
	 ТипМессенджера = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.CRM_ОжиданиеСобытийМессенджера);

	Если ОбщегоНазначения.РазделениеВключено() И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	Если УникальныйИдентификаторЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединения);
	
	МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(ТипМессенджера);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	CRM_УчетныеЗаписиМессенджеров.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
	|ГДЕ
	|	CRM_УчетныеЗаписиМессенджеров.УникальныйИдентификаторЗадания = &УникальныйИдентификаторЗадания
	|	И CRM_УчетныеЗаписиМессенджеров.ТипМессенджера = &ТипМессенджера");
	Запрос.УстановитьПараметр("УникальныйИдентификаторЗадания", УникальныйИдентификаторЗадания);
	Запрос.УстановитьПараметр("ТипМессенджера", ТипМессенджера);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаПолучения = ТекущаяДатаСеанса();
		МассивСообщений = МодульМенеджера.ПолучитьСообщения(Выборка.Ссылка);
		СоздатьСообщенияИзПолученныхДанных(Выборка.Ссылка, МассивСообщений);
		ЗаписатьДатуПолучения(Выборка.Ссылка, ДатаПолучения);
		Если ЭтоФайловаяБаза ИЛИ РаботаВМоделиСервисаПовтИсп.РазделениеВключено() Тогда
			Возврат;
		КонецЕсли;
		МодульМенеджера.ОжиданиеСобытий(Выборка.Ссылка);
	КонецЕсли;
КонецПроцедуры

// Выполняет обработку Webhook.
//
// Параметры:
//  ИмяМетода	- Строка - Имя метода.
//	ТелоЗапроса - Строка - Тело запроса.
//
Функция ОбработатьWebhook(ИмяМетода, ТелоЗапроса) Экспорт
	
	УчетнаяЗапись = Справочники.CRM_УчетныеЗаписиМессенджеров.ПолучитьСсылку(Новый УникальныйИдентификатор(ИмяМетода));
	
	Если УчетнаяЗапись = Неопределено Или Не УчетнаяЗапись.Включена Тогда
		Ответ = HTTPОтвет(Новый Структура("error", "The requested metod was not found on this server: " + ИмяМетода));
	Иначе
		МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(УчетнаяЗапись.ТипМессенджера);
		Ответ = МодульМенеджера.ОбработатьWebhook(УчетнаяЗапись, ТелоЗапроса);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Выполняет установку Webhook.
//
// Параметры:
//	УчетнаяЗапись			   - СправочникСсылка.CRM_УсловияОбработкиОбращений - Учетная запись.
//	СтруктураПараметровДоступа - Структура - Cтруктура параметров доступа.
//
// Возвращаемое значение:
//	Булево - результат выполнения операции.
//
Функция УстановитьWebhook(УчетнаяЗапись, СтруктураПараметровДоступа) Экспорт
	МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(УчетнаяЗапись.ТипМессенджера);
	Результат = МодульМенеджера.УстановитьWebhook(УчетнаяЗапись, СтруктураПараметровДоступа);
	Возврат Результат;
КонецФункции

// Возвращает ответ HTTP.
//
// Параметры:
//	ДанныеОтвета - Строка - Данные ответа.
//
// Возвращаемое значение:
//	HTTPСервисОтвет - ответ HTTP.
//
Функция HTTPОтвет(ДанныеОтвета) Экспорт
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json");
	Ответ.УстановитьТелоИзСтроки(ПолучитьСтрокуJSON(ДанныеОтвета));
	Возврат Ответ;
	
КонецФункции	

Процедура ОтправитьСлужебноеСообщение(УчетнаяЗапись, ДанныеСообщения) Экспорт
	
	Если НЕ Обсуждения.ОбсужденияДоступны() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Строка(УчетнаяЗапись.УникальныйИдентификатор()));
	Если Обсуждение <> Неопределено Тогда
		Отбор = Новый ОтборСообщенийСистемыВзаимодействия;
		Отбор.Обсуждение = Обсуждение.Идентификатор;
		СообщенияСВ = СистемаВзаимодействия.ПолучитьСообщения(Отбор);
		Для каждого Сообщение Из СообщенияСВ Цикл
			СистемаВзаимодействия.УдалитьСообщение(Сообщение.Идентификатор);
		КонецЦикла;
		
		СообщениеСВ = СистемаВзаимодействия.СоздатьСообщение(Обсуждение.Идентификатор);
		СообщениеСВ.Данные = ДанныеСообщения.Данные;
		СообщениеСВ.Текст = ДанныеСообщения.Текст;
		СообщениеСВ.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДатуПолучения(УчетнаяЗапись, ДатаПолучения)

	УстановитьПривилегированныйРежим(Истина);

	МенеджерЗаписи = РегистрыСведений.CRM_ДатыПолученияСообщенийМессенджеров.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УчетнаяЗапись = УчетнаяЗапись;
	МенеджерЗаписи.ДатаПолучения = ДатаПолучения;
	МенеджерЗаписи.Записать();

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Возвращает имя события журнала регистрации
// 
// Возвращаемое значение:
//  Строка - имя события журнала регистрации 
//
Функция СобытиеЖурналаРегистрации() Экспорт
	Возврат НСтр("ru = 'Работа с мессенджерами'", ОбщегоНазначения.КодОсновногоЯзыка());
КонецФункции

Функция ДиалогБезВходящихСообщений(Диалог)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	CRM_СообщениеМессенджера.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.Диалог = &Диалог
	                      |	И CRM_СообщениеМессенджера.ВидСообщения = &ВидСообщения");
	Запрос.УстановитьПараметр("Диалог", Диалог);
	Запрос.УстановитьПараметр("ВидСообщения", Перечисления.CRM_ВидыСообщенияМессенджера.Входящее);
	Возврат Запрос.Выполнить().Пустой();
КонецФункции

Процедура ПроверитьСтатусПредыдущегоСообщения(Сообщение)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	CRM_СообщениеМессенджера.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ тмпПредыдущееСообщение
	|ИЗ
	|	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	|ГДЕ
	|	CRM_СообщениеМессенджера.Ссылка <> &Ссылка
	|	И CRM_СообщениеМессенджера.Группа = &Группа
	|	И CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	|	И CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_СообщениеМессенджера.Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_СостоянияЛидов.Состояние КАК Состояние,
	|	CRM_СостоянияЛидов.СконвертированВОбъект КАК СконвертированВОбъект,
	|	CRM_СостоянияЛидов.Лид КАК Лид
	|ИЗ
	|	РегистрСведений.CRM_СостоянияЛидов КАК CRM_СостоянияЛидов
	|ГДЕ
	|	CRM_СостоянияЛидов.Лид В
	|			(ВЫБРАТЬ
	|				тмпПредыдущееСообщение.Ссылка КАК Ссылка
	|			ИЗ
	|				тмпПредыдущееСообщение КАК тмпПредыдущееСообщение)";
	Запрос.УстановитьПараметр("Ссылка", Сообщение);
	Запрос.УстановитьПараметр("Группа", Сообщение.Группа);
	Запрос.УстановитьПараметр("ID_Пользователя", Сообщение.ID_Пользователя);
	Запрос.УстановитьПараметр("УчетнаяЗапись", Сообщение.УчетнаяЗапись);
	Запрос.УстановитьПараметр("Дата", Сообщение.Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.Состояние = Справочники.CRM_СостоянияЛидов.Повторный
			 ИЛИ Выборка.Состояние = Справочники.CRM_СостоянияЛидов.ПовторныйОбработанный
			 ИЛИ Выборка.Состояние = Справочники.CRM_СостоянияЛидов.Сконвертирован Тогда
			Если ТипЗнч(Выборка.СконвертированВОбъект) = Тип("ДокументСсылка.CRM_Интерес") Тогда
				Если НЕ Выборка.СконвертированВОбъект.Завершен Тогда
					
					ДанныеПовторногоОбращения = Новый Структура;
					ДанныеПовторногоОбращения.Вставить("CRM_Интерес", Выборка.СконвертированВОбъект);
					ДанныеПовторногоОбращения.Вставить("Состояние", Справочники.CRM_СостоянияЛидов.Повторный);
					
					РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Сообщение, , , , , , ДанныеПовторногоОбращения);
					
				КонецЕсли;	
			Иначе	
				
				ДанныеПовторногоОбращения = Новый Структура;
				ДанныеПовторногоОбращения.Вставить("CRM_Интерес", Выборка.СконвертированВОбъект);
				ДанныеПовторногоОбращения.Вставить("Состояние", Справочники.CRM_СостоянияЛидов.Повторный);
				
				РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Сообщение, , , , , , ДанныеПовторногоОбращения);
				
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры	

Функция ПараметрыОтбораСообщенийВФормеДиалогов(ТекущийПользователь)
	ИмяФормыДиалоги = "Обработка.CRM_Мессенджер.Форма.ФормаМессенджера";
	НастройкиФормыДиалоги = ХранилищеСистемныхНастроек.Загрузить(ИмяФормыДиалоги+"/ТекущиеДанные", "",,
		ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекущийПользователь.ИдентификаторПользователяИБ).Имя);
		
	ОтборКонтакты = Новый СписокЗначений;
	ОтборКанал = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	ОтображатьЗакрытые = Ложь;
	ОтображатьТолькоСвои = Ложь;
	ОтборПериод = Новый СтандартныйПериод;
	Если НастройкиФормыДиалоги <> Неопределено Тогда
		ОтборКанал = НастройкиФормыДиалоги.Получить("ОтборКанал");
		ОтображатьЗакрытые = НастройкиФормыДиалоги.Получить("ОтображатьЗакрытые");
		ОтображатьТолькоСвои = НастройкиФормыДиалоги.Получить("ОтображатьТолькоСвои");
		ОтборПериод = НастройкиФормыДиалоги.Получить("ОтборПериод");
	КонецЕсли;
	
	ПараметрыОтбораСообщений = Новый Структура("ОтборКонтакты, ОтборКанал, ОтображатьЗакрытые,
		| ОтображатьТолькоСвои, ОтборПериод",
		ОтборКонтакты, ОтборКанал, ОтображатьЗакрытые, ОтображатьТолькоСвои, ОтборПериод);
    Возврат ПараметрыОтбораСообщений;
КонецФункции	

Процедура УстановитьВладельцаФайловПрикрепленныхВложений(Сообщение, СписокФайлов)
	
	Если СписокФайлов <> Неопределено Тогда
		Для Каждого Вложение Из СписокФайлов Цикл
			ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
			ПараметрыФайла.ВладелецФайлов = Сообщение.Ссылка;
			ПараметрыФайла.Автор = Пользователи.ТекущийПользователь();
			
			ПараметрыФайла.ИмяБезРасширения = Лев(
				Вложение.Представление,
				СтрНайти(Вложение.Представление, ".", НаправлениеПоиска.СКонца) - 1);
			
			ПараметрыФайла.РасширениеБезТочки = Сред(
				Вложение.Представление,
				СтрНайти(Вложение.Представление, ".", НаправлениеПоиска.СКонца) + 1);
			
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, Вложение.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВладельцаФайловПрикрепленныхВложений()

#Область ОформлениеМессенджера

Функция ПолучитьОформлениеМессенджераПоПользователю(АвторизованныйПользователь) Экспорт
	
	Менеджер = РегистрыСведений.CRM_НастройкиПользователей.СоздатьМенеджерЗаписи();
	Менеджер.Настройка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.ВариантОформленияМессенджера;
	Менеджер.Пользователь = АвторизованныйПользователь;
	Менеджер.Прочитать();
	
	Попытка
		НастройкаОформленияПользователя = Менеджер.Значение;
	Исключение
		НастройкаОформленияПользователя = Перечисления.CRM_ВариантыОформленийМессенджера.ПустаяСсылка();
	КонецПопытки;
	
	Если НастройкаОформленияПользователя = Перечисления.CRM_ВариантыОформленийМессенджера.ПустаяСсылка() Тогда
		Возврат Перечисления.CRM_ВариантыОформленийМессенджера.Стандартная;
	КонецЕсли;
	
	Возврат НастройкаОформленияПользователя;
	
КонецФункции // ПолучитьОформлениеМессенджераПоПользователю()

Функция ПолучитьСтилиОформленияМессенджера(НастройкаОформленияПользователя) Экспорт
	
	НаименованиеМакета = "Стандартная";
	
	Если НастройкаОформленияПользователя = Перечисления.CRM_ВариантыОформленийМессенджера.АкваСинийГрадиент Тогда
		НаименованиеМакета = "АкваСинийГрадиент";
	ИначеЕсли НастройкаОформленияПользователя = Перечисления.CRM_ВариантыОформленийМессенджера.АквамариновыйГрадиент Тогда
		НаименованиеМакета = "АквамариновыйГрадиент";
	ИначеЕсли НастройкаОформленияПользователя = Перечисления.CRM_ВариантыОформленийМессенджера.ЛедянойБриз Тогда
		НаименованиеМакета = "ЛедянойБриз";
	ИначеЕсли НастройкаОформленияПользователя = Перечисления.CRM_ВариантыОформленийМессенджера.МорозноеУтро Тогда
		НаименованиеМакета = "МорозноеУтро";
	ИначеЕсли НастройкаОформленияПользователя = Перечисления.CRM_ВариантыОформленийМессенджера.ЛегкийТуман Тогда
		НаименованиеМакета = "ЛегкийТуман";
	ИначеЕсли НастройкаОформленияПользователя = Перечисления.CRM_ВариантыОформленийМессенджера.ГлубокийОкеан Тогда
		НаименованиеМакета = "ГлубокийОкеан";
	КонецЕсли;
	
	МакетСтилейОформленияДиалогов = Перечисления.CRM_ВариантыОформленийМессенджера.ПолучитьМакет(НаименованиеМакета);
	
	Возврат МакетСтилейОформленияДиалогов.ПолучитьТекст();
	
КонецФункции // ПолучитьСтилиОформленияМессенджера()

#КонецОбласти

#Область ОтложеннаяОтправкаСообщений

Процедура ИзменитьИспользованиеЗаданияОтправкиОтложенныхСообщений(Использование) Экспорт
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Метаданные", Метаданные.РегламентныеЗадания.CRM_ОтложеннаяОтправкаСообщенийМессенджера);
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыПоиска);
	
	Для Каждого Задание Из Задания Цикл
		ПараметрыЗадания = Новый Структура("Использование", Использование);
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
	КонецЦикла;
	
КонецПроцедуры // ИзменитьИспользованиеЗаданияОтправкиОтложенныхСообщений()

Процедура ВыполнитьОтправкуОтложенныхСообщенийМессенджера() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УчетныеЗаписиОбновления = Новый Соответствие;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	CRM_СообщениеМессенджера.Ссылка КАК Ссылка,
		|	CRM_СообщениеМессенджера.Диалог.Статус КАК СтатусДиалога,
		|	CRM_СообщениеМессенджераПрисоединенныеФайлы.Ссылка КАК Файл,
		|	CRM_СообщениеМессенджераПрисоединенныеФайлы.Наименование + ""."" + CRM_СообщениеМессенджераПрисоединенныеФайлы.Расширение КАК ИмяФайла
		|ИЗ
		|	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.CRM_СообщениеМессенджераПрисоединенныеФайлы КАК CRM_СообщениеМессенджераПрисоединенныеФайлы
		|		ПО (CRM_СообщениеМессенджераПрисоединенныеФайлы.ВладелецФайла = CRM_СообщениеМессенджера.Ссылка)
		|ГДЕ
		|	CRM_СообщениеМессенджера.Отложенное = ИСТИНА
		|	И НЕ CRM_СообщениеМессенджера.ПометкаУдаления
		|	И CRM_СообщениеМессенджера.Дата <= &ТекущаяДата
		|
		|УПОРЯДОЧИТЬ ПО
		|	CRM_СообщениеМессенджера.Ссылка.Дата
		|ИТОГИ ПО
		|	Ссылка");
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	ВыборкаОтложенныхСообщений = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОтложенныхСообщений.Следующий() Цикл
		СообщениеОбъект = ВыборкаОтложенныхСообщений.Ссылка.ПолучитьОбъект();
		
		// Если текущий диалог закрыт, то сообщение отправится в новый диалог.
		Если ВыборкаОтложенныхСообщений.СтатусДиалога = Перечисления.CRM_СтатусыДиалогов.Закрыт Тогда
			АктивныйДиалог = Справочники.CRM_Диалоги.ПолучитьАктивныйДиалог(СообщениеОбъект.Диалог);
			СообщениеОбъект.Диалог = АктивныйДиалог;
		КонецЕсли;
		
		/////////////////////////////////////////
		// Подготовка списка файлов для отправки.
		
		СписокФайловДляОтправки = Новый СписокЗначений;
		
		ВыборкаФайловОтложенногоСообщения = ВыборкаОтложенныхСообщений.Выбрать();
		Пока ВыборкаФайловОтложенногоСообщения.Следующий() Цикл
			Если Не ЗначениеЗаполнено(ВыборкаФайловОтложенногоСообщения.Файл) Тогда
				Продолжить;
			КонецЕсли;
			
			ДвоичныеДанныеФайлаДляОтправки	= РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаФайловОтложенногоСообщения.Файл);
			АдресВременногоХранилищаФайла	= ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаДляОтправки);
			
			СписокФайловДляОтправки.Добавить(АдресВременногоХранилищаФайла, ВыборкаФайловОтложенногоСообщения.ИмяФайла);
		КонецЦикла;
		
		//////////////////////////////////
		// Отправка отложенного сообщения.
		
		ОтправитьПодготовленноеСообщение(
			СообщениеОбъект,
			СообщениеОбъект.Диалог,
			СписокФайловДляОтправки,
			Новый СписокЗначений,
			Новый Структура);
		
		УчетныеЗаписиОбновления.Вставить(СообщениеОбъект.УчетнаяЗапись, СообщениеОбъект.Текст);
	КонецЦикла;
	
	///////////////////////////////////////////////////
	// Отправка служебных сообщений для обновления АРМ.
	
	Если Обсуждения.ОбсужденияДоступны() Тогда
		Для Каждого ТекущаяУчетнаяЗаписьОбновления Из УчетныеЗаписиОбновления Цикл
			ПараметрыСлужебногоСообщения = Новый Структура;
			ПараметрыСлужебногоСообщения.Вставить("Данные",	"CRM_ПолученыНовыеСообщения");
			ПараметрыСлужебногоСообщения.Вставить("Текст",	"");
			
			ОтправитьСлужебноеСообщение(УчетныеЗаписиОбновления.Ключ, ПараметрыСлужебногоСообщения);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьОтправкуОтложенныхСообщенийМессенджера()

Функция ОтменитьЗапланированноеСообщениеНаСервере(ИдентификаторСообщения) Экспорт
	
	УникальныйИдентификаторСообщения = Новый УникальныйИдентификатор(ИдентификаторСообщения);
	СообщениеСсылка = Документы.CRM_СообщениеМессенджера.ПолучитьСсылку(УникальныйИдентификаторСообщения);
	
	Если ЗначениеЗаполнено(СообщениеСсылка) И СообщениеСсылка.Отложенное Тогда
		/////////////////////////////////
		// Пометка сообщения на удаления.
		
		СообщениеОбъект = СообщениеСсылка.ПолучитьОбъект();
		СообщениеОбъект.УстановитьПометкуУдаления(Истина);
		СообщениеОбъект.Отложенное = Ложь;
		СообщениеОбъект.Записать();
		
		////////////////////////////////////////////
		// Пометка прикрепленных файлов на удаление.
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	CRM_СообщениеМессенджераПрисоединенныеФайлы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.CRM_СообщениеМессенджераПрисоединенныеФайлы КАК CRM_СообщениеМессенджераПрисоединенныеФайлы
			|ГДЕ
			|	CRM_СообщениеМессенджераПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
			|	И CRM_СообщениеМессенджераПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ");
		
		Запрос.УстановитьПараметр("ВладелецФайла", СообщениеСсылка);
		
		ВыборкаПрикрепленныхФайлов = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаПрикрепленныхФайлов.Следующий() Цикл
			ПрикрепленныйФайлОбъект = ВыборкаПрикрепленныхФайлов.Ссылка.ПолучитьОбъект();
			ПрикрепленныйФайлОбъект.УстановитьПометкуУдаления(Истина);
			ПрикрепленныйФайлОбъект.Записать();
		КонецЦикла;
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ОтменитьЗапланированноеСообщениеНаСервере()

#КонецОбласти

#Область БлокировкаОтправителяМессенджера

Процедура ИзменитьБлокировкуОтправителя(Идентификатор, ПризнакБлокировки) Экспорт
	
	МенеджерЗаписиРегистра = РегистрыСведений.CRM_ЗаблокированныеОтправителиМессенджера.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.Идентификатор = Идентификатор;
	
	Если ПризнакБлокировки Тогда
		МенеджерЗаписиРегистра.Записать();
	Иначе
		МенеджерЗаписиРегистра.Удалить();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьБлокировкуОтправителя()

Функция ОтправительЯвляетсяЗаблокированным(Идентификатор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.CRM_ЗаблокированныеОтправителиМессенджера.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Идентификатор = Идентификатор;
	МенеджерЗаписи.Прочитать();
	
	Возврат МенеджерЗаписи.Выбран();
	
КонецФункции // ОтправительЯвляетсяЗаблокированным()

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ИзменитьРодителяВидовКИМессенджеров() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ВидыКонтактнойИнформацииМессенджеров.ВидКИ_Клиент КАК ВидКИ_Клиент
	                      |ИЗ
	                      |	РегистрСведений.CRM_ВидыКонтактнойИнформацииМессенджеров КАК CRM_ВидыКонтактнойИнформацииМессенджеров
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	                      |		ПО CRM_ВидыКонтактнойИнформацииМессенджеров.ВидКИ_Клиент.ИдентификаторДляФормул = ВидыКонтактнойИнформации.ИдентификаторДляФормул
						  |			И ВидыКонтактнойИнформации.Родитель = &РодительОбщий
	                      |ГДЕ
	                      |	CRM_ВидыКонтактнойИнформацииМессенджеров.ВидКИ_Клиент.Родитель = &Родитель
	                      |	И ВидыКонтактнойИнформации.Ссылка ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("Родитель", Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо);
	Запрос.УстановитьПараметр("РодительОбщий", Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидКИОбъект = Выборка.ВидКИ_Клиент.ПолучитьОбъект();
		ВидКИОбъект.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры;
		ВидКИОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
