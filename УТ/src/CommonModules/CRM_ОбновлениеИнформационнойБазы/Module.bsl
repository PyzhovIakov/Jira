////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы CRM.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя	= "CRM" + ?(СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации(), "3Базовая", "");
	Описание.Версия = "3.1.32.10";
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	Описание.ИдентификаторИнтернетПоддержки = ?(СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации(), "CRMBase31", "CRM");
	
	Если ОбновлениеИнформационнойБазы.ВерсияИБ(Описание.Имя) = "0.0.0.0"
	   И ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя) <> "0.0.0.0" Тогда
		ОбновлениеИнформационнойБазы.УстановитьВерсиюИБ(Описание.Имя, "0.0.0.0", Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет параметры загружаемых и устанавливаемых исправлений (патчей).
//
// Параметры:
//  Настройки - Структура:
//    * ОтключитьНапоминания - Булево - Истина, если необходимо отключить создание задачи по включению автоматической
//        загрузки исправлений в подсистеме БСП.ТекущиеДела и не показывать оповещение пользователю при старте системы,
//        если подсистема БСП.ТекущиеДела отсутствует в конфигурации.
//    * Подсистемы - Массив из Структура - список программ, исправления которых необходимо загружать и устанавливать:
//        ** ИмяПодсистемы - Строка - имя подсистемы, например, "ИнтернетПоддержкиПользователей".
//        ** ИдентификаторИнтернетПоддержки - Строка - имя программы в сервисах Интернет-поддержки.
//        ** Версия - Строка - версия программы в формате из 4-х цифр, например, "2.1.3.1".
//
//@skip-warning
Процедура ПриОпределенииНастроекЗагрузкиИсправлений(Настройки) Экспорт
	
	Если ВРег(Метаданные.Имя) = ВРег("УправлениеТорговлей_CRM_2") Тогда
		МодульОбновления = ОбщегоНазначения.ОбщийМодуль("CRM_УТ_ОбновлениеИнформационнойБазы");
		МодульОбновления.ПриОпределенииНастроекЗагрузкиИсправлений(Настройки);
		
	ИначеЕсли CRM_ЛицензированиеСервер.ЭтоТиповаяКонфигурация() Тогда
		// Подразумеваем, что если имя "типовое", то это Модуль CRM.
		МодульОбновления = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_ОбновлениеИнформационнойБазы");
		МодульОбновления.ПриОпределенииНастроекЗагрузкиИсправлений(Настройки);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример:
//  Для добавления своей процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Оперативно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	ЭтоРазделенныйРежимРаботы = Константы.ИспользоватьРазделениеПоОбластямДанных.Получить();
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПервыйЗапуск";
	
	// Все версии
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "*";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура =
			"CRM_ОбновлениеИнформационнойБазы.УстановитьЗначениеКонстантыИспользоватьНапоминанияПользователя";
		Обработчик.Комментарий = НСтр("ru='Устанавливаем константу Использовать Напоминания Пользователя в Ложь';
			|en='Set the constant Use User Account Reminders to False'");
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьПроверитьПВХОбъектыЖурнала";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_УсловияСрабатыванияТриггеров.СоздатьПредопределенныеДействия";
	Обработчик.Комментарий = НСтр("ru='Обновление предопределенных условий триггеров.';
		|en='Update of triggers predefined conditions.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_ДействияТриггеров.СоздатьПредопределенныеДействия";
	Обработчик.Комментарий = НСтр("ru='Обновление предопределенных действий триггеров.';
		|en='Update predefined actions of triggers.'");
	
	Если НЕ ЭтоРазделенныйРежимРаботы Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "*";
		Обработчик.Комментарий = НСтр("ru='Обновляем правила регистрации объектов для iCRM.';
			|en='Updated rules of logging of objects for iCRM.'");
		Обработчик.Процедура = "ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.ОбновитьПравилаРегистрации";
		Обработчик.РежимВыполнения = "Монопольно";
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьКонстантуЭтоДемоБаза";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.СоздатьЭлементыСправочникаМакетыПечатныхФорм";
	Обработчик.Комментарий =
		НСтр("ru='Создание элементов справочника ""Макеты печатных форм"" для поставляемых макетов конфигурации.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a1942e00-da48-4e27-8def-23d192dc63e7");
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьПроверитьПВХВидыОбъектовБизнесПроцессов";
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Комментарий = НСтр("ru='Проверка плана видов характеристик ""Виды объектов бизнес-процессов."".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ed468504-234a-4cba-b38f-f312ca50f39a");
	Обработчик.Процедура = "Справочники.CRM_ВысокочастотныеФИО.ЗаполнитьВысокочастотныеФИО";
	Обработчик.Комментарий = НСтр("ru='Обновление справочника Высокочастотные ФИО.'");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	
	// Обработчик для спарок
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "БлокировкаРаботыСВнешнимиРесурсами.ОбновитьПараметрыБлокировкиРаботыСВнешнимиРесурсами";
	КонецЕсли;
	
	// 3.1.26.11
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.26.11";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8971f78c-8e1c-43d3-980b-ae76945759de");
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура =
		"CRM_ОбновлениеИнформационнойБазы.CRM_ВидыОбъектовБизнесПроцессовОбработтатьДанныеДляПереходаНаВерсию_3_1_26_11";
	Обработчик.Комментарий = НСтр("ru = 'Снятие пометки удаления с элементов ПВХ ""Виды объектов бизнес-процессов"",
		| которые раньше были предопределенными.'");
	Обработчик.ЧитаемыеОбъекты   = "ПланВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов";
	Обработчик.ИзменяемыеОбъекты = "ПланВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов";
	
	// 3.1.26.12
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.26.12";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьНачальныеНастройкиБазыЗнаний";
	Обработчик.Комментарий = НСтр("ru='Заполнение начальных настроек базы знаний..'");
	
	// 3.1.26.13
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.26.13";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("05135858-2a96-489c-b8bb-eb45677dc615");
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура = "РегистрыСведений.CRM_ОбъектыАРМ_Обращения.ЗаполнитьДанныеПриПереходеНаВерсию";
	Обработчик.Комментарий = НСтр("ru = 'Начальное заполнение регистра Объекты АРМ (Обращения).'");
	Обработчик.ЧитаемыеОбъекты   = "РегистрСведений.CRM_СостоянияЛидов";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.CRM_ОбъектыАРМ_Обращения";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.26.13";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("06a7d681-7afc-4935-bb49-c9ab1b4140cb");
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура = "РегистрыСведений.CRM_ОбъектыАРМ_Поддержка.ЗаполнитьДанныеПриПереходеНаВерсию";
	Обработчик.Комментарий = НСтр("ru = 'Начальное заполнение регистра Объекты АРМ (Поддержка).'");
	Обработчик.ЧитаемыеОбъекты   = "Документ.CRM_Интерес";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.CRM_ОбъектыАРМ_Поддержка";
	
	// 3.1.26.15
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.26.15";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("477be08c-16f2-4fec-a387-6ac49f5cd6ba");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ЗарегистрироватьВариантАвтосозданияКлиентов";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьВариантАвтосозданияКлиентов";
	Обработчик.ПроцедураПроверки    = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение варианта автосоздания клиентов'");
	Обработчик.ЧитаемыеОбъекты      = "Справочник.CRM_ИсточникиПолученияЛидов,Справочник.CRM_ПравилаОбработкиОбращений,
										|Справочник.CRM_УчетныеЗаписиМессенджеров,Справочник.УчетныеЗаписиЭлектроннойПочты,
										|Константа.CRM_НастройкиСозданияКлиентовПриЗвонке";
	Обработчик.ИзменяемыеОбъекты      = "Справочник.CRM_ИсточникиПолученияЛидов,Справочник.CRM_ПравилаОбработкиОбращений,
										|Справочник.CRM_УчетныеЗаписиМессенджеров,Справочник.УчетныеЗаписиЭлектроннойПочты,
										|Константа.CRM_НастройкиСозданияКлиентовПриЗвонке";
	
	// 3.1.26.16
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.26.16";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5b511ab5-df8f-4131-acf3-fe0c23ae668c");
	Обработчик.Процедура = "Справочники.CRM_ВысокочастотныеФИО.ЗаполнитьВысокочастотныеФИО";
	Обработчик.Комментарий = НСтр("ru='Обновление справочника Высокочастотные ФИО.'");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	
	// 3.1.26.17
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.26.17";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура =
		"CRM_ОбновлениеИнформационнойБазы.УстановитьЗначениеКонстантыСрокАктуальностиНапоминанийПоУмолчанию";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливается константа Срок актуальности напоминаний по умолчанию).'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.26.17";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьЗначениеКонстантыПоказыватьНапоминания";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливается константа Показывать напоминания.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.26.17";
	// BSLLS:Typo-off
	Обработчик.РежимВыполнения = "Отложенно";
	// BSLLS:Typo-on
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4213c413-5617-4032-a46e-ce3ed573e8bc");
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.CRM_Напоминания."
		+"ЗарегистрироватьДанныеКОбработкеДляПереходаНаВерсию_3_1_26_17";
	Обработчик.Процедура = "РегистрыСведений.CRM_Напоминания.ОбработатьДанныеДляПереходаНаВерсию_3_1_26_17";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение незаполненных дат актуальности и идентификаторов в регистре Напоминания.'");
	Обработчик.ЧитаемыеОбъекты      = "РегистрСведений.CRM_Напоминания";
	Обработчик.ИзменяемыеОбъекты    = "РегистрСведений.CRM_Напоминания";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.26.17";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.НастроитьРегламентноеЗаданиеУдалениеНеактуальныхНапоминаний";
	Обработчик.Комментарий = НСтр("ru = 'Настройка регламентного задания Удаление неактуальных напоминаний.'");	

	// 3.1.26.18
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.26.18";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("52e7cccc-5002-4d34-a4d4-147882bd69e5");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура =
		"CRM_ОбновлениеИнформационнойБазы.ЗаполнитьАвтотекстТриггераОтправкиСообщенияВМессенджер";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение автотекста ""Автотекст мессенджера""'");
	Обработчик.ЧитаемыеОбъекты		= "Справочник.CRM_ШаблоныАвтотекста";
	Обработчик.ИзменяемыеОбъекты	= "Справочник.CRM_ШаблоныАвтотекста";
	
	// 3.1.26.20
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.26.20";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("78070611-6bbe-45b6-95be-eab52b905fd7");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = 
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьЦветаТегов";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение цветов тегов.'");
	Обработчик.ЧитаемыеОбъекты		= "Справочник.CRM_Теги";
	Обработчик.ИзменяемыеОбъекты	= "Справочник.CRM_Теги";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.26.20";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("da21172c-e2bb-4820-a0dd-425ea03c9a09");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = 
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УдалитьЛишниеЗаписиРегистраСостоянияВоронкиПродаж";
	Обработчик.Комментарий = НСтр("ru = 'Удаление лишних записей из регистра ""CRM_СостоянияВоронкиПродаж"".'");
	Обработчик.ЧитаемыеОбъекты		= "РегистрСведений.CRM_СостоянияВоронкиПродаж";
	Обработчик.ИзменяемыеОбъекты	= "РегистрСведений.CRM_СостоянияВоронкиПродаж";
	
	// 3.1.27.11
	Если ЭтоРазделенныйРежимРаботы Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.27.11";
		Обработчик.РежимВыполнения = "Монопольно";
		// BSLLS:LineLength-off
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.НастроитьРегламентноеЗаданиеПолучениеИОтправкаЭлектронныхПисем"; 
		// BSLLS:LineLength-on
		Обработчик.Комментарий = НСтр("ru = 'Настройка регламентного задания Получение и отправка электронных писем.'");
	КонецЕсли;

	// 3.1.28.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.НастроитьСрокЖизниОбращенийПоУмолчанию";
	Обработчик.Комментарий = НСтр("ru = 'Настройка срока жизни обращений по умолчанию.'");	
	
	// 3.1.28.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_ПланПродаж.ЗаполнениеВариантаПолученияФакта";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение варианта получения факта выполнения плана продаж.'");	
	
	// 3.1.28.3
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a9fcd80b-29e2-4c0d-8796-c2b5b3e7e280");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = 
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура = "Константы.CRM_ШрифтПисьмаПоУмолчанию.УстановитьШрифтПоУмолчанию";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение шрифта письма по умолчанию.'");
	
	// 3.1.28.4
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("acc75433-4d9d-4557-8819-f8309a9ec288");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = 
		"CRM_ПланированиеПродаж.РегистрацияДанныхКОбновлениюМетаданных";
	Обработчик.Процедура = "CRM_ПланированиеПродаж.ОбновлениеСтруктурыМетаданныхПланирования";
	Обработчик.Комментарий = НСтр("ru = 'Обновление структуры метаданных планирования продаж.'");
	Обработчик.ЧитаемыеОбъекты   = "Справочник.CRM_КлючиАналитикиПланаПродаж";
	Обработчик.ИзменяемыеОбъекты = "Справочник.CRM_КлючиАналитикиПланаПродаж";
	
	// 3.1.28.6
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.6";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("16876135-4603-41da-8862-9b314399df10");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = 
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура = "Справочники.CRM_СхемаПланаПродаж.СоздатьПоставляемыеСхемы";
	Обработчик.Комментарий = НСтр("ru = 'Создание поставляемых схем планирования продаж.'");
	Обработчик.ЧитаемыеОбъекты   = "Справочник.CRM_СхемаПланаПродаж";
	Обработчик.ИзменяемыеОбъекты = "Справочник.CRM_СхемаПланаПродаж";
	
	// 3.1.28.7
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.7";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("09263a9a-a76c-45b7-9f61-de7bcf35a14c");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура =
		"CRM_ОбновлениеИнформационнойБазы.ЗаполнитьАвтотекстНомерОбращения";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение автотекста ""Номер обращения""'");
	Обработчик.ЧитаемыеОбъекты		= "Справочник.CRM_ШаблоныАвтотекста";
	Обработчик.ИзменяемыеОбъекты	= "Справочник.CRM_ШаблоныАвтотекста";
	
	// 3.1.28.8
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.8";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_СтатусыРаботыСКлиентом.ЗаполнитьДанныеПриПереходеНаВерсию";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение новых реквизитов справочника ""Статусы работы с клиентом"".'");	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.8";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("73515b35-614d-4208-b2e8-2f120163efaa");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = 
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура = "РегистрыСведений.CRM_СтатусыКлиентов.ЗаполнитьДанныеПриПереходеНаВерсию";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра статусов клиентов.'");
	Обработчик.ЧитаемыеОбъекты		= "РегистрСведений.CRM_СтатусыКлиентов";
	Обработчик.ИзменяемыеОбъекты	= "РегистрСведений.CRM_СтатусыКлиентов";
	
	// 3.1.28.9
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("26cfac00-fd68-4213-a428-5a1e68085d44");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = 
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура = "РегистрыСведений.CRM_ЗаполненностьРеквизитовОбъектов.ОчиститьДанныеПриПереходеНаВерсию";
	Обработчик.Комментарий = НСтр("ru = 'Очистка регистра данных заполнения клиентов.'");
	Обработчик.ЧитаемыеОбъекты		= "РегистрСведений.CRM_ЗаполненностьРеквизитовОбъектов";
	Обработчик.ИзменяемыеОбъекты	= "РегистрСведений.CRM_ЗаполненностьРеквизитовОбъектов";
	
	// 3.1.28.10
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.10";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b54f4b91-d790-4d49-9dd1-76a465c6ba57");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура =
		"CRM_ОбновлениеИнформационнойБазы.ЗаполнитьМетодГруппировкиЗначенийШаблоновПоказателей";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение метода группировки значений шаблонов показателей'");
	Обработчик.ЧитаемыеОбъекты		= "Справочник.CRM_ШаблоныКлючевыхПоказателей";
	Обработчик.ИзменяемыеОбъекты	= "Справочник.CRM_ШаблоныКлючевыхПоказателей";
	
	// 3.1.28.11
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.11";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура =
		"CRM_ОбновлениеИнформационнойБазы.ИзменитьЗапросыСхемКомпоновкиДанныхПоказателей";
	Обработчик.Комментарий =
		НСтр("ru = 'Замена обращений к предопределенным элементам в текстах запросов шаблонов ключевых показателей'");
		
	// 3.1.28.12
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.28.12";
		Обработчик.РежимВыполнения = "Отложенно";
		Обработчик.Идентификатор = Новый УникальныйИдентификатор("2adc1968-0947-45c8-9852-dd017ee17a44");
		Обработчик.ПроцедураЗаполненияДанныхОбновления =
			"CRM_ОбновлениеИнформационнойБазы.ЗарегистрироватьЗаметкиВHTML";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбработатьЗаметкиВHTML";
		Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
		Обработчик.Комментарий = НСтр("ru = 'Конвертация заметок в HTML'");
		Обработчик.ЧитаемыеОбъекты = "Справочник.Заметки";
		Обработчик.ИзменяемыеОбъекты = "Справочник.Заметки";
	КонецЕсли;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.12";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("60a0544b-ebb0-468f-a445-0e523951bdd1");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = 
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура = "CRM_МетодыМодулейМенеджеровСправочников.ОбработатьОтображатьВсегдаПриПереходеНаВерсию";
	Обработчик.Комментарий = НСтр("ru = 'Установка флага ""Отображать всегда"" в видах контактной информации.'");
	Обработчик.ЧитаемыеОбъекты = "Справочник.ВидыКонтактнойИнформации";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ВидыКонтактнойИнформации";

	// 3.1.28.15
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.15";
	Обработчик.Процедура = "ОбменДаннымиСервер.УстановитьКодыПредопределенныхУзлов";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// 3.1.28.16
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.16";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("37cc7a3e-9701-4604-848a-8380b034a163");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура =
		"CRM_ОбновлениеИнформационнойБазы.ЗаполнитьАвтотекстПодписи";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение автотекста ""Автотекст подписи""'");
	Обработчик.ЧитаемыеОбъекты		= "Справочник.CRM_ШаблоныАвтотекста";
	Обработчик.ИзменяемыеОбъекты	= "Справочник.CRM_ШаблоныАвтотекста";
	
	// 3.1.29.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.29.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dd36abe7-8cd1-4100-a126-b29dc6805426");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию_3_1_29_2";
	Обработчик.Процедура =
		"CRM_ОбновлениеИнформационнойБазы.ОбработатьДанныеДляПереходаНаНовуюВерсию_3_1_29_2";
	Обработчик.Комментарий = НСтр("ru = 'Конвертация фотографий пользователей.'");
	Обработчик.ЧитаемыеОбъекты		= "Справочник.Пользователи,Справочник.ПользователиПрисоединенныеФайлы";
	Обработчик.ИзменяемыеОбъекты	= "Справочник.Пользователи,Справочник.ПользователиПрисоединенныеФайлы";
	
	// 3.1.29.3
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.29.3";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("89732899-6141-4e7a-9316-876a9e09cab2");
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.Процедура = "РегистрыСведений.CRM_ПотокиДоставкиПочты.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Комментарий = НСтр("ru='Заполнение потоков доставки электронной почты по умолчанию.'");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.ЧитаемыеОбъекты = "Справочник.УчетныеЗаписиЭлектроннойПочты";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.CRM_ПотокиДоставкиПочты";
	
	// 3.1.29.7
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.29.7";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("648abcd1-09a9-4b6f-bfad-9d4fdbc445ad");
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьСписокПубличныхПочтовыхДоменов";
	Обработчик.Комментарий = НСтр("ru='Заполнение списка публичных почтовых доменов.'");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.ЧитаемыеОбъекты = "Константа.CRM_ПубличныеПочтовыеДомены";
	Обработчик.ИзменяемыеОбъекты = "Константа.CRM_ПубличныеПочтовыеДомены";
	
	// 3.1.29.9
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.29.9";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура =
		"CRM_ОбновлениеИнформационнойБазы.ИзменитьЗапросыСхемКомпоновкиПоказателейТелефонии";
	Обработчик.Комментарий =
		НСтр("ru = 'Изменение текстов запросов шаблонов ключевых показателей телефонии'");
	
	// 3.1.29.10
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.29.10";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура =
		"CRM_ОбновлениеИнформационнойБазы.ИзменитьВариантПоставки";
	Обработчик.Комментарий =
		НСтр("ru = 'Изменение варианта поставки для спарок и модулей.'");
		
	// 3.1.29.11
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.29.11";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a09e5a21-72c5-49ab-8729-ae979976c95a");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.КонвертироватьВариантНазначенияОтветственного";
	Обработчик.Комментарий = НСтр("ru = 'Конвертация варианта назначения ответственного в Мастере принятия обращения.'");
	Обработчик.ЧитаемыеОбъекты		= "Справочник.Пользователи";
	Обработчик.ИзменяемыеОбъекты	= "Справочник.Пользователи";
	
	// 3.1.29.17
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.29.17";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьКонстантыБазовойВерсии";
	Обработчик.Комментарий = НСтр("ru = 'Обновление констант базовой версии.'");
	
	// 3.1.30.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура =
		"Справочники.CRM_ВнешниеБиблиотеки.ЗаполнитьПредопределенныеВнешниеБиблиотеки";
	Обработчик.Комментарий =
		НСтр("ru = 'Заполнение предопределенных внешних библиотек конфигурации.'");
		
	// 3.1.30.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура =
		"Обработки.CRM_РаботаСМессенджеромTelegramBot.ЗаменитьТипМессенджера";
	Обработчик.Комментарий =
		НСтр("ru = 'Замена типа мессенджера для бота Telegram.'");

	// 3.1.30.3
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура =
		"РегистрыСведений.CRM_ВидыКонтактнойИнформацииМессенджеров.ОбновитьВидКИПользователя";
	Обработчик.Комментарий =
		НСтр("ru = 'Обновление видов контактной информации мессенджеров для пользователей.'");
	
	// 3.1.30.6
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.6";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9a535bbe-8b05-4c82-8205-015aea5d366a");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ИзменитьСостояниеЗаданияОтправкиОтложенныхСообщений";
	Обработчик.Комментарий = НСтр("ru = 'Изменение использования регламентного задания для отправки отложенных сообщений мессенджера.'");
	
	// 3.1.30.8
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.8";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("40932bfa-cd44-4354-8b15-91b63824ef7e");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОчиститьРегистрОбъектыОбновленияАналитикиСПустымиИД";
	Обработчик.Комментарий = НСтр("ru = 'Очистка в регистре объекты обновления аналитики данных с пустыми ID сквозной аналитики.'");
	Обработчик.ЧитаемыеОбъекты		= "РегистрСведений.CRM_ОбъектыОбновленияАналитики";
	Обработчик.ИзменяемыеОбъекты	= "РегистрСведений.CRM_ОбъектыОбновленияАналитики";
	
	// 3.1.30.9
	Если НЕ ЭтоРазделенныйРежимРаботы Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.30.9";
		Обработчик.РежимВыполнения = "Отложенно";
		Обработчик.Идентификатор = Новый УникальныйИдентификатор("cea9ac89-0ced-44bc-aa53-80ed43a518b1");
		Обработчик.ПроцедураЗаполненияДанныхОбновления =
			"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПерезаполнитьНастройкиЭтапов";
		Обработчик.Комментарий = НСтр("ru = 'Перезапись порядка следования этапов в картах машрутов бизнес-процессов.'");
		Обработчик.ЧитаемыеОбъекты = "Справочник.CRM_КартыМаршрутов";
		Обработчик.ИзменяемыеОбъекты = "РегистрСведений.CRM_НастройкиЭтапов";
	КонецЕсли;
	
	// 3.1.31.12
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.31.12";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d3fa845d-4e93-494d-9e02-818a677ea31b");
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.Процедура = "РегистрыСведений.CRM_ОповещенияПользовательскиеНастройки.ОбработатьДанныеДляПереходаНаВерсию_3_1_31_12";
	Обработчик.Комментарий = НСтр("ru='Обновление настроек оповещений.'");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"РегистрыСведений.CRM_ОповещенияПользовательскиеНастройки.ЗарегистрироватьДанныеКОбработкеДляПереходаНаВерсию_3_1_31_12";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.CRM_ОповещенияПользовательскиеНастройки";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.CRM_ОповещенияПользовательскиеНастройки";
	
	// 3.1.31.13
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.31.13";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c7546be4-05c2-4067-bcb0-a0692d538140");
	Обработчик.Процедура = "CRM_РаботаСМессенджерамиСервер.ИзменитьРодителяВидовКИМессенджеров";
	Обработчик.Комментарий = НСтр("ru='Перенос видов контактной информации мессенджеров в общую группу клиентов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.31.13";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9bfac4f3-87dd-4c04-9c7e-d43c6f2c33fe");
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.Процедура = "РегистрыСведений.CRM_ЖурналДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию_3_1_31_13";
	Обработчик.Комментарий = НСтр("ru='Заполнение данных для формирования ленты.'");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"РегистрыСведений.CRM_ЖурналДокументов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию_3_1_31_13";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.CRM_ЖурналДокументов";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.CRM_ДанныеКарточекЛенты";
	
	// 3.1.31.14
	Если НЕ ЭтоРазделенныйРежимРаботы Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.31.14";
		Обработчик.РежимВыполнения = "Отложенно";
		Обработчик.Идентификатор = Новый УникальныйИдентификатор("d3c1d085-d6c8-4d18-bca2-cdb3cbebe388");
		Обработчик.ПроцедураЗаполненияДанныхОбновления =
			"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьТипПроцессаКартыМаршрута";
		Обработчик.Комментарий = НСтр("ru='Заполнение данных реквизита ""Тип процесса"" в 
			|предопределенной карте маршрута ""Запрос на изменение сроков исполнения задачи"".'");
		Обработчик.ЧитаемыеОбъекты = "Справочник.CRM_КартыМаршрутов";
		Обработчик.ИзменяемыеОбъекты = "Справочник.CRM_КартыМаршрутов";
	КонецЕсли;
	
	// 3.1.31.15
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.31.15";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("08b4f057-4331-4e97-8d48-6f1b3f3e139d");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.CRM_ПоказателиКампанийСверткаЗаписей";
	Обработчик.Комментарий = НСтр("ru='Свертка записей в регистре ""Показатели кампаний"" перед удалением измерений.'");
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.CRM_ПоказателиКампаний";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.CRM_ПоказателиКампаний";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.31.15";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("468d70f2-5f44-4aa5-9d9e-38c3335c48a4");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.CRM_ИспользуемыеРешенияСверткаЗаписей";
	Обработчик.Комментарий = НСтр("ru='Свертка записей в регистре ""Используемые решения"" перед удалением измерений.'");
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.CRM_ИспользуемыеРешения";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.CRM_ИспользуемыеРешения";
	
	// 3.1.31.18
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.31.18";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2210fdca-b370-4132-8b52-90955991d045");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьСправочникБизнесРегионыПоКлассификатору";
	Обработчик.Комментарий = НСтр("ru='Обновление справочника ""Бизнес-регионы"".'");
	Обработчик.ЧитаемыеОбъекты = "Справочник.БизнесРегионы";
	Обработчик.ИзменяемыеОбъекты = "Справочник.БизнесРегионы";
	
	// 3.1.31.26
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.31.26";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e11e6d63-b8da-493f-a3ed-327e39a1ea11");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.CRM_ВключениеРегламентныхЗаданий";
	Обработчик.Комментарий = НСтр("ru='Включение регламентных заданий.'");
	
	// 3.1.31.28
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.31.28";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0ed94c9d-5cfa-415e-ac88-3d2b3a8117bf");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьИсточникиПолученияЛидов";
	Обработчик.Комментарий = 
		НСтр("ru='Обновление таблицы ""Сопоставление реквизитов"" в справончике ""Источники получения заявок"".'");
	Обработчик.ЧитаемыеОбъекты = "Справочник.CRM_ИсточникиПолученияЛидов";
	Обработчик.ИзменяемыеОбъекты = "Справочник.CRM_ИсточникиПолученияЛидов";
	
	// 3.1.31.29
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.31.29";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3fb3025e-6581-4057-9045-1b977a0caf1e");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ИзменитьЗапросыСхемКомпоновкиДанныхКартыМаршрутов";
	Обработчик.Комментарий = НСтр("ru='Обновления запросов в схемах компоновки данных справочника ""Карты маршрутов"".'");
	Обработчик.ЧитаемыеОбъекты = "Справочник.CRM_КартыМаршрутов";
	Обработчик.ИзменяемыеОбъекты = "Справочник.CRM_КартыМаршрутов";
	
	// 3.1.31.30
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.31.30";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("41e69919-8561-4b7c-87c9-da77ad62791c");
	Обработчик.Процедура = "Справочники.CRM_Виджеты.ЗаполнитьПредопределенныеВиджеты";
	Обработчик.Комментарий = НСтр("ru='Заполнение данных реквизита ""ТипИсточникаДанных"" в виджетах.'");
	
	// 3.1.31.31
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.31.31";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c0ae24ba-4a36-410a-981c-7183dfd8e452");
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПеренестиНастройкиВиджетовВВариантыВиджетов";
	Обработчик.Комментарий = 
		НСтр("ru='Перенос данных из регистра ""CRM_НастройкиВиджетов"" в справочник ""CRM_ВариантыВиджетов"".'");
	
	// 3.1.31.32
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.31.32";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("03a9308a-ad16-4bbc-8b52-4a833f3eca0a");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = 
		"РегистрыСведений.CRM_ВажностьСрочностьЗадач.ЗарегистрироватьДанныеКОбработкеДляПереходаНаВерсию_3_1_31_32";
	Обработчик.Процедура = "РегистрыСведений.CRM_ВажностьСрочностьЗадач.ОбработатьДанныеДляПереходаНаВерсию_3_1_31_32";
	Обработчик.Комментарий = НСтр("ru='Заполнение данных регистра ""Важность и срочность задач"".'");
	Обработчик.ЧитаемыеОбъекты = "РегистрыСведений.CRM_ОбъектыАРМ";
	Обработчик.ИзменяемыеОбъекты = "РегистрыСведений.CRM_ВажностьСрочностьЗадач";
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры // ПередОбновлениемИнформационнойБазы()

// Вызывается после завершения обновления данных ИБ.
// В зависимости от тех или иных условий можно отключить штатное открытие формы
// с описанием изменений в новой версии программы при первом входе в нее (после обновления),
// а также выполнить другие действия.
//
// Не рекомендуется выполнять в данной процедуре какую-либо обработку данных.
// Такие процедуры следует оформлять штатными обработчиками обновления, выполняемыми на каждую версию "*".
// 
// Параметры:
//   ПредыдущаяВерсия     - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия        - Строка - версия после обновления. Как правило, соответствует Метаданные.Версия.
//   ВыполненныеОбработчики - Массив из Структура - массив структур, описывающих сведения об обновлении каждой
//                                     библиотеки и конфигурации, с ключами:
//       * Подсистема              - Строка - имя библиотеки или конфигурации.
//       * Версия                  - Строка - например, "2.1.3.39". Номер версии библиотеки (конфигурации).
//       * ЭтоОсновнаяКонфигурация - Булево - Истина, если это основная конфигурация, а не библиотека.
//       * Обработчики             - ТаблицаЗначений - все обработчики обновления библиотеки, описание колонок
//                                   см. в ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//       * ВыполненныеОбработчики  - ДеревоЗначений - выполненные обработчики обновления, библиотеке и номеру версии,
//                                   описание колонок см. в ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//       * ИмяОсновногоСерверногоМодуля - Строка - имя модуля библиотеки (конфигурации), который предоставляет
//                                        основные сведения о ней: имя, версия и т.д.
//       * ОсновнойСерверныйМодуль      - ОбщийМодуль - общий модуль библиотеки (конфигурации), который предоставляет
//                                        основные сведения о ней: имя, версия и т.д.
//       * ПредыдущаяВерсия             - Строка - например, "2.1.3.30". Номер версии библиотеки (конфигурации) до обновления.
//   ВыводитьОписаниеОбновлений - Булево - если установить Ложь, то не будет открыта форма
//                                с описанием изменений в новой версии программы. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - признак того, что обновление выполнилось в монопольном режиме.
//
// Пример:
//  Для обхода выполненных обработчиков обновления:
//  Для Каждого ИтерацияОбновления Из ИтерацииОбновления Цикл
//  	Для Каждого Версия Из ИтерацияОбновления.ВыполненныеОбработчики.Строки Цикл
//  		
//  		Если Версия.Версия = "*" Тогда
//  			// Группа обработчиков, которые выполняются регулярно при каждой смене версии.
//  		Иначе
//  			// Группа обработчиков, которые выполнились для определенной версии.
//  		КонецЕсли;
//  		
//  		Для Каждого Обработчик Из Версия.Строки Цикл
//  			...
//  		КонецЦикла;
//  		
//  	КонецЦикла;
//  КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
	Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры // ПослеОбновленияИнформационнойБазы()

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры // ПриПодготовкеМакетаОписанияОбновлений()

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры // ПриОпределенииРежимаОбновленияДанных()

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "CRM3Базовая";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПерейтиСБазовойВерсииНаПРОФ";
	
КонецПроцедуры // ПриДобавленииОбработчиковПереходаСДругойПрограммы()

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "CRM3Базовая" Тогда
		Параметры.ВерсияКонфигурации = ПредыдущаяВерсияКонфигурации;
	КонецЕсли;
	
КонецПроцедуры // ПриЗавершенииПереходаСДругойПрограммы()

// Получить режим обновления данных информационной базы
//
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьРежимОбновленияДанных() Экспорт
	Возврат ОбновлениеИнформационнойБазыСлужебный.РежимОбновленияДанных();
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОчередьСсылкой(Очередь, Временная = Ложь)
	Возврат ПланыОбмена.ОбновлениеИнформационнойБазы.УзелПоОчереди(Очередь, Временная);
КонецФункции

Процедура ПустаяПроцедураЗаполненияДанныхОбновления(Параметры = Неопределено) Экспорт
	
	// Заполнение не требуется
	Возврат;
	
КонецПроцедуры

// Возвращает количество ссылок, по которым нужно произвести обработку.
//  Данные берутся из зарегистрированных в очереди, учитываются заблокированные более приоритетными очередями данные.
//	Ссылки на документы возвращаются упорядоченными по убыванию по дате.
//
// Параметры:
//  Очередь				 - Число - очередь, к которой отнесен обработчик и в которой зарегистрированы данные, которые он будет
//									обрабатывать.
//  ПолноеИмяОбъекта	 - Строка	 - имя объекта, который нужно обработать. Например, Документ.ПриходныйОрдерНаТовары.
//  ДополнительныеПараметры	 - Структура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки.
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка ссылок, которые нужно обработать, поля выборки:
//  * Ссылка - ЛюбаяСсылка.
//
Функция КоличествоСсылокДляОбработки(Очередь, ПолноеИмяОбъекта, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаИзменений.Ссылка КАК КоличествоСсылок
	|ИЗ
	|	#ТаблицаОбъектаИзменения КАК ТаблицаИзменений
	|ГДЕ
	|	ТаблицаИзменений.Узел = &ТекущаяОчередь
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
	|ПО
	|	ОБЩИЕ";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаОбъектаИзменения", ПолноеИмяОбъекта + ".Изменения");	
	
	ТекущаяОчередь = ОчередьСсылкой(Очередь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТекущаяОчередь", ТекущаяОчередь);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоСсылок;
	Иначе
		Возврат 0;
	КонецЕсли;
		
КонецФункции

#Область МетодыТолькоДляCRM3

// Функция заполняет в ИБ спрвочник "Ставки НДС" и возвращает
// ссылку на ставку НДС 18% для дальнейшего использования.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//  СправочникСсылка	- Ставка НДС
//	
Функция ЗаполнитьСтавкиНДСПервыйЗапуск()
	
	// 10%
	СтавкаНДС = Справочники["СтавкиНДС"].СоздатьЭлемент();
	СтавкаНДС.Наименование = "10%";
	СтавкаНДС.Ставка = 10;
	СтавкаНДС.Записать();
	
	// 0%
	СтавкаНДС = Справочники["СтавкиНДС"].СоздатьЭлемент();
	СтавкаНДС.Наименование = "0%";
	СтавкаНДС.Ставка = 0;
	СтавкаНДС.Записать();
	
	// Без НДС
	СтавкаНДС = Справочники["СтавкиНДС"].СоздатьЭлемент();
	СтавкаНДС.Наименование = НСтр("ru='Без НДС';en='excluding VAT'");
	СтавкаНДС["НеОблагается"] = Истина;
	СтавкаНДС.Ставка = 0;
	СтавкаНДС.Записать(); 
	
	// 20%
	СтавкаНДС = Справочники["СтавкиНДС"].СоздатьЭлемент();
	СтавкаНДС.Наименование = "20%";
	СтавкаНДС.Ставка = 20;
	СтавкаНДС.Записать();
	
	Возврат СтавкаНДС.Ссылка;
	
КонецФункции // ЗаполнитьСтавкиНДСПервыйЗапуск()

// Процедура создает регламентные задания для сегментов.
//
// Параметры:
//	Нет.
//
Процедура СоздатьРегламентныеЗаданияДляСегментов()
	
	// Создает регламентные задания для сегментов партнеров и номенклатуры с типом формирования
	// "Периодически обновлять".
	МассивЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные",
		 Метаданные.РегламентныеЗадания.ФормированиеСегментов));
	Если МассивЗаданий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайденноеЗадание = Неопределено;
	
	Для Каждого Задание Из МассивЗаданий Цикл
		
		Если Задание.Параметры.Количество() = 0 Тогда
			НайденноеЗадание = Задание;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НайденноеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СегментыНоменклатуры.Ссылка КАК Сегмент,
	|	""СегментыНоменклатуры"" КАК ТипСегмента,
	|	СегментыНоменклатуры.Наименование КАК Наименование
	|ИЗ
	|	Справочник.СегментыНоменклатуры КАК СегментыНоменклатуры
	|ГДЕ
	|	(НЕ СегментыНоменклатуры.ЭтоГруппа)
	|	И (НЕ СегментыНоменклатуры.ПометкаУдаления)
	|	И СегментыНоменклатуры.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ПериодическиОбновлять)
	|	И СегментыНоменклатуры.РегламентноеЗадание = &ПустойУникальныйИдентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СегментыПартнеров.Ссылка,
	|	""СегментыПартнеров"",
	|	СегментыПартнеров.Наименование
	|ИЗ
	|	Справочник.СегментыПартнеров КАК СегментыПартнеров
	|ГДЕ
	|	(НЕ СегментыПартнеров.ЭтоГруппа)
	|	И (НЕ СегментыПартнеров.ПометкаУдаления)
	|	И СегментыПартнеров.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ПериодическиОбновлять)
	|	И СегментыПартнеров.РегламентноеЗадание = &ПустойУникальныйИдентификатор";
	
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор",
		 Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипСегмента = "СегментыНоменклатуры" Тогда
			
			Наименование =  НСтр("ru='Формирование сегмента номенклатуры: ';en='Formation of item segment: '");
			
		ИначеЕсли Выборка.ТипСегмента = "СегментыПартнеров" Тогда
			
			Наименование =  НСтр("ru='Формирование сегмента партнеров: ';en='Formation of partners segment: '");
			
		КонецЕсли;
		
		НовоеЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.ФормированиеСегментов);
		НовоеЗадание.Использование = НайденноеЗадание.Использование;
		НовоеЗадание.Наименование = Наименование + СокрЛП(Выборка.Наименование);
		НовоеЗадание.Расписание = НайденноеЗадание.Расписание;
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(Выборка.Сегмент);
		НовоеЗадание.Параметры = ПараметрыЗадания;
		НовоеЗадание.Записать();
		
		СегментОбъект = Выборка.Сегмент.ПолучитьОбъект();
		СегментОбъект.РегламентноеЗадание = НовоеЗадание.УникальныйИдентификатор;
		СегментОбъект.ОбменДанными.Загрузка = Истина;
		СегментОбъект.Записать();
		
	КонецЦикла;
	
	Если НайденноеЗадание.Параметры.Количество() = 0 Тогда
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(Справочники.СегментыНоменклатуры.ПустаяСсылка());
		НайденноеЗадание.Параметры = ПараметрыЗадания;
		НайденноеЗадание.Записать();
	КонецЕсли;
	
КонецПроцедуры //  СоздатьРегламентныеЗаданияДляСегментов()

Функция ЗапускатьМастерНастройкиРешения() Экспорт
	
	Если РольДоступна("ПолныеПрава") Тогда
		Данные = CRM_ХранилищеНастроек.Загрузить("Запускать_CRM_МастерНастройкиРешения", , , "CRM_МастерНастройкиРешения");
		Возврат (Данные = Истина);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Процедура заполняет реквизит "офис" у предопределенного элемента справочника "Подразделения организации"
//
Процедура ЗаполнитьРеквизитОфисУОсновногоПодразделения() 
	
	ОсновнойОфис = Справочники.CRM_ОфисыКомпании.НайтиПоНаименованию("Основной офис");
	Если ОсновнойОфис = Неопределено Тогда
		ОсновнойОфис = Справочники.CRM_ОфисыКомпании.НайтиПоНаименованию("Main office");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОсновнойОфис) Тогда
		// повторно создадим элемент справочника, если этого не удалось сделать ранее
		НовыйОфис = Справочники.CRM_ОфисыКомпании.СоздатьЭлемент();
		НовыйОфис.Наименование	= НСтр("ru='Основной офис';en='Main office'");
		НовыйОфис.CRM_ВремяПоГринвичу_GMT = 3;
		Попытка
			НовыйОфис.Записать();
			ОсновнойОфис = НовыйОфис.Ссылка;
		Исключение
			Возврат;
		КонецПопытки;
	КонецЕсли;		
	
	ПодразделениеОбъект = Справочники.СтруктураПредприятия["ОсновноеПодразделение"].ПолучитьОбъект();
	ПодразделениеОбъект.CRM_Офис = ОсновнойОфис.Ссылка;
	Попытка
		ПодразделениеОбъект.Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
КонецПроцедуры  // ЗаполнитьРеквизитОфисУОсновногоПодразделения()

#КонецОбласти // МетодыТолькоДляCRM3

#Область ЗаполненияПустойИБ

// Процедура заполняет пустую ИБ.
//
// Параметры:
//	Нет.
//
Процедура ПервыйЗапуск() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Константы.CRM_ДемонстрационныйРежим.Установить(Ложь);
		
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			
			// Заполним валюты.
			РУБСсылка = НайтиСоздатьВалюту("643", "руб.", "Российский рубль", "рубль, рубля, рублей, м,
				| копейка, копейки, копеек, ж,
				| 2");
			
			// Заполним ставки НДС.
			СтавкаНДС20 = Справочники["СтавкиНДС"].НайтиПоНаименованию("20%");
			Если Не ЗначениеЗаполнено(СтавкаНДС20) Тогда
				СтавкаНДС20 = ЗаполнитьСтавкиНДСПервыйЗапуск();
			КонецЕсли;
			
			// Заполним организации.
			НашаОрганизацияСсылка = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию();
			НашаОрганизация = НашаОрганизацияСсылка.ПолучитьОбъект();
			НашаОрганизация.НаименованиеПолное	  = НСтр("ru='ООО ""Наша фирма""';en='LLC ""Our firm""'");
			НашаОрганизация.Префикс				  = "НФ";
			НашаОрганизация.ЮрФизЛицо			  = Перечисления.ЮрФизЛицо.ЮрЛицо;
			НашаОрганизация.НДСВключатьВСтоимость = Истина;
			НашаОрганизация.СтавкаНДСПоУмолчанию  = СтавкаНДС20;
			НашаОрганизация.Записать();
			
			// Заполним виды цен.
			ВалютаВКонстанте = Константы.ВалютаУправленческогоУчета.Получить();
			Если НЕ ЗначениеЗаполнено(ВалютаВКонстанте) Тогда
				ВалютаВКонстанте = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			// Оптовая.
			ОптоваяСсылка = Справочники.ВидыЦен["Оптовая"];
			Оптовая = ОптоваяСсылка.ПолучитьОбъект();
			Оптовая.ВалютаЦены = ВалютаВКонстанте;
			Оптовая.ЦенаВключаетНДС = Истина;
			Оптовая.ПорядокОкругления = Перечисления["ПорядкиОкругления"].Окр1;
			Оптовая.ОкруглятьВБольшуюСторону = Ложь;
			Оптовая.РассчитываетсяДинамически	= Ложь;
			Оптовая.ФорматЦены = "ЧЦ=15; ЧДЦ=2";
			Оптовая.Записать();
			
			// Учетная.
			УчетнаяСсылка = Справочники.ВидыЦен["Учетная"];
			Учетная = УчетнаяСсылка.ПолучитьОбъект();
			Учетная.ВалютаЦены = ВалютаВКонстанте;
			Учетная.ЦенаВключаетНДС = Истина;
			Учетная.ПорядокОкругления = Перечисления["ПорядкиОкругления"].Окр1;
			Учетная.ОкруглятьВБольшуюСторону = Ложь;
			Учетная.РассчитываетсяДинамически	= Ложь;
			Учетная.ФорматЦены = "ЧЦ=15; ЧДЦ=2";
			Учетная.Записать();
			
			// Заполним константы.
			Константы.ВалютаУправленческогоУчета.Установить(РУБСсылка);
			Константы.ВалютаРегламентированногоУчета.Установить(РУБСсылка);
			
			// Заполним наборы свойств.
			ОсновнаяНГСсылка = Справочники["НоменклатурныеГруппы"].ОсновнаяГруппа;
			ОсновнаяНГ = ОсновнаяНГСсылка.ПолучитьОбъект();
			ОсновнаяНГ.Записать();
			
			// Заполним реквизиты предопределенных единиц измерения.
			// Штука.
			ШтСсылка = Справочники["КлассификаторЕдиницИзмерения"].шт;
			ШтОбъект = ШтСсылка.ПолучитьОбъект();
			ШтОбъект.НаименованиеПолное = НСтр("ru='Штука';en='Piece'");
			ШтОбъект.МеждународноеСокращение = "PCE";
			ШтОбъект.Записать();
			
			// Заполним константу ОсновнойКалендарьПредприятия.
			ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
			Если ЗначениеЗаполнено(ПроизводственныйКалендарь) Тогда
				Календарь = Справочники.Календари.НайтиПоРеквизиту("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
				Если ЗначениеЗаполнено(Календарь) Тогда
					Константы.ОсновнойКалендарьПредприятия.Установить(Календарь);
				КонецЕсли;
			КонецЕсли;
			
			// Заполним предопределенный сегмент
			ИмяСпрСегменты = "СегментыПартнеров";
			Справочники[ИмяСпрСегменты].ЗаполнитьПредопределенныйСегмент();
			
			// Создаем регламентные задания для сегментов.
			СоздатьРегламентныеЗаданияДляСегментов();
			
			УстановитьКонстантыБазовойВерсии();
			
		КонецЕсли; // только для CRM 3
		
		// Создание групп доступа на основании профилей групп доступа.
		МодульУправлениеДоступом = Неопределено;
		Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("ОбщиеМодули", "CRM_Модуль_УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_УправлениеДоступом");
		ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("ОбщиеМодули", "CRM_УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеДоступом");
		КонецЕсли;
		Если МодульУправлениеДоступом <> Неопределено Тогда
			МодульУправлениеДоступом.СоздатьЭлементыСправочникаГруппыДоступа();
		КонецЕсли;
		
		ЭтоРазделенныйРежимРаботы = Константы.ИспользоватьРазделениеПоОбластямДанных.Получить();
		
		// Заполнение предопределенных сервисов рассылок писем.
		Справочники.CRM_СервисыРассылок.ЗаполнитьПредопределенныеСервисыРассылок();
		
		// Заполнение констант.
		Константы.CRM_НачалоРабочегоДня.Установить(Дата("00010101090000"));
		Константы.CRM_КонецРабочегоДня.Установить(Дата("00010101180000"));
		Константы.CRM_НачалоОбеда.Установить(Дата("00010101130000"));
		Константы.CRM_КонецОбеда.Установить(Дата("00010101140000"));
		
		Константы.ОтправлятьПисьмаВФорматеHTML.Установить(Истина);
		
		Если НЕ ЭтоРазделенныйРежимРаботы Тогда
			Константы.ФиксироватьПервичныйИнтерес.Установить(Истина);
			Константы.ИспользоватьКоммерческиеПредложенияКлиентам.Установить(Истина);
			Константы.CRM_ИспользоватьТипыУслуг.Установить(Истина);
		КонецЕсли;
		
		Константы.CRM_НеИспользоватьПотокиДоставкиЭлектроннойПочты.Установить(Истина);
		Константы.ИспользоватьПочтовыйКлиент.Установить(Истина);
		
		Константы.ИспользоватьДополнительныеРеквизитыИСведения.Установить(Истина);
		Константы.CRM_ВыполнятьПоискДублейПриЗаписиПартнера.Установить(Истина);
		Константы.CRM_ВестиИсториюРеквизитовКлиентов.Установить(Истина);
		//Константы.CRM_СвязыватьРанееПолученныеEmailиЗвонкиСКлиентами.Установить(Истина);
		Константы.сфпОператорКоллтрекинга.Установить(Перечисления.CRM_CallTrakingСценарии.Comagic);
		
		ЗаполнитьСписокПубличныхПочтовыхДоменов();
		
		РеквизитыПоискаДублейПартнеров = Новый СписокЗначений;
		РеквизитыПоискаДублейПартнеров.Добавить("Наименование;ПОДОБНО", "Наименование", Истина);
		РеквизитыПоискаДублейПартнеров.Добавить("НаименованиеПолное;ПОДОБНО", "Наименование полное", Истина);
		РеквизитыПоискаДублейПартнеров.Добавить("CRM_ИНН;=", "ИНН", Истина);
		
		РеквизитыПоискаДублейПартнеров.Добавить("Контакт_Адрес;ПОДОБНО", "Адрес");
		РеквизитыПоискаДублейПартнеров.Добавить("Контакт_АдресЭлектроннойПочты;ПОДОБНО", "Email");
		РеквизитыПоискаДублейПартнеров.Добавить("Контакт_Телефон;ПОДОБНО", "Телефон");
		
		Константы.CRM_РеквизитыПоискаДублейПартнеров.Установить(Новый ХранилищеЗначения(РеквизитыПоискаДублейПартнеров));
		Константы.ИспользоватьБизнесПроцессыИЗадачи.Установить(Истина);
		Константы.ИспользоватьДатуНачалаЗадач.Установить(Истина);
		
		Если Не ЭтоРазделенныйРежимРаботы Тогда
			Константы.CRM_ИспользоватьНапоминания.Установить(Истина);
		КонецЕсли;
		Константы.CRM_ПериодПроверкиНовыхНапоминаний.Установить(300);
		Константы.CRM_УчетнаяЗаписьОповещений.Установить(Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты);
		Константы.CRM_СрокАктуальностиНапоминанийПоУмолчанию.Установить(7);
		Константы.CRM_СпособОтображенияНапоминаний.Установить(
			Перечисления.CRM_ВариантыОтображенияНапоминаний.ВЦентреОповещений);
		Константы.ИспользоватьПрочиеВзаимодействия.Установить(Истина);
		
		Константы.CRM_ИспользоватьТелемаркетинг.Установить(Истина); 
		Константы.CRM_ИспользоватьМаркетинговыеМероприятия.Установить(Истина); 
		Константы.CRM_ИспользоватьПоказатели.Установить(Истина); 
		Константы.CRM_ИспользоватьРассылкиЭлектронныхПисем.Установить(Истина); 
		
		Константы.CRM_СервисРассылокПоУмолчанию.Установить(Справочники.CRM_СервисыРассылок.SMTP);
		Константы.CRM_СервисРассылокОповещенийПоУмолчанию.Установить(Справочники.CRM_СервисыРассылок.SMTP);
		Константы.CRM_НеСохранятьТекстыПисемРассылок.Установить(Истина);
		Константы.CRM_ЦветСобытияВКалендареПоУмолчанию.Установить(7);
		Константы.CRM_ВидВзаимодействияПоУмолчанию.Установить(Справочники.CRM_ВидыВзаимодействий.Встреча);
		Константы.CRM_ГлубинаПересчетаПоказателей.Установить(1);
		Константы.ИспользоватьЗаметки.Установить(Истина);
		Константы.сфпПоследниеЦифрыТелефонногоНомера.Установить(10);
		
		Константы.CRM_ИспользоватьПотенциальныхКлиентов.Установить(Истина);
		
		Если ЭтоРазделенныйРежимРаботы Тогда
			CRM_ОчисткаВложенийЭлектронныхПисем.УстановитьПараметрРегламентногоЗадания("Использование",
				 Константы.CRM_ОчищатьВложенияЭлектронныхПисем.Получить());
			ВключитьРегЗаданиеЭП = Константы.ИспользоватьПочтовыйКлиент.Получить()
				 И Константы.CRM_НеИспользоватьПотокиДоставкиЭлектроннойПочты.Получить();
			CRM_УправлениеЭлектроннойПочтой.УстановитьПараметрРегламентногоЗадания("Использование", ВключитьРегЗаданиеЭП);
		КонецЕсли;
		
		// Создаем Пользователя "Робот"
		Робот = Справочники.Пользователи.СоздатьЭлемент();
		Робот.Служебный = Истина;
		Робот.Наименование = "Робот";
		Робот.Записать();
		Константы.CRM_СлужебныйПользовательРобот.Установить(Робот.Ссылка);
		
		// Заполним предопределенные элементы справочников.
		Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Если Метаданные.ОбщиеМодули.Найти("ОбновлениеИнформационнойБазыУТ") <> Неопределено Тогда
				ОбщегоНазначения.ОбщийМодуль("ОбновлениеИнформационнойБазыУТ").ЗаполнитьСвойстваВидовКонтактнойИнформации();
			КонецЕсли;
		КонецЕсли;
		CRM_МетодыМодулейМенеджеровСправочников.ЗаполнитьСвойстваВидовКонтактнойИнформации();
		ЗаполнитьПредопределенныеВидыКонтактнойИнформацииДляОповещений();
		
		// Заполним ПВХ каналы рекламных воздействий.
		Элемент = Неопределено;
		Элемент = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.НайтиПоНаименованию("Акция", Истина);
		
		Если Не ЗначениеЗаполнено(Элемент) Тогда
			ЭлементПВХ = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.СоздатьЭлемент();
			ЭлементПВХ.Наименование		= НСтр("ru='Акция';en='Action'");
			ЭлементПВХ.ТипЗначения 		= Новый ОписаниеТипов("СправочникСсылка.МаркетинговыеМероприятия");
			ЭлементПВХ.Записать();
		КонецЕсли; 
		
		Элемент = Неопределено;
		Элемент = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.НайтиПоНаименованию("Сайт компании", Истина);
		Если Не ЗначениеЗаполнено(Элемент) Тогда
			ЭлементПВХ = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.СоздатьЭлемент();
			ЭлементПВХ.Наименование		= НСтр("ru='Сайт компании';en='Company Website'");
			ЭлементПВХ.ТипЗначения 		= Новый ОписаниеТипов("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника");
			ЭлементПВХ.Записать();
		КонецЕсли; 
		
		Элемент = Неопределено;
		Элемент = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.НайтиПоНаименованию("Рекомендация клиента", Истина);
		Если Не ЗначениеЗаполнено(Элемент) Тогда
			ЭлементПВХ = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.СоздатьЭлемент();
			ЭлементПВХ.Наименование		= НСтр("ru='Рекомендация клиента';en='Recommendation of customer'");
			ЭлементПВХ.ТипЗначения 		= Новый ОписаниеТипов("СправочникСсылка.Партнеры");
			ЭлементПВХ.Записать();
		КонецЕсли; 
		
		Элемент = Неопределено;
		Элемент = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.НайтиПоНаименованию("Рекомендация сотрудника", Истина);
		Если Не ЗначениеЗаполнено(Элемент) Тогда
			ЭлементПВХ = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.СоздатьЭлемент();
			ЭлементПВХ.Наименование		= НСтр("ru='Рекомендация сотрудника';en='Recommendation of the employee'");
			ЭлементПВХ.ТипЗначения 		= Новый ОписаниеТипов("СправочникСсылка.Пользователи");
			ЭлементПВХ.Записать();
		КонецЕсли; 
		
		Элемент = Неопределено;
		Элемент = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.НайтиПоНаименованию("Рекомендация сотрудника клиента",
			 Истина);
		Если Не ЗначениеЗаполнено(Элемент) Тогда
			ЭлементПВХ = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.СоздатьЭлемент();
			ЭлементПВХ.Наименование		= НСтр("ru='Рекомендация сотрудника клиента';
				|en='Recommendation of the employee of customer'");
			ЭлементПВХ.ТипЗначения 		= Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛицаПартнеров");
			ЭлементПВХ.Записать();
		КонецЕсли; 
		
		// Заполним справочник цветовые категории.
		ЭлементСправочника = Справочники.CRM_Категории.НайтиПоНаименованию("Командировка", Истина);
		Если ЭлементСправочника = Справочники.CRM_Категории.ПустаяСсылка() Тогда
			ЭлементСправочника = Справочники.CRM_Категории.СоздатьЭлемент();
			ЭлементСправочника.Наименование			= НСтр("ru='Командировка';en='Business trip'");
			ЭлементСправочника.ЦветПредставление 	= "Зеленый";
			ЭлементСправочника.ЦветИндекс 			= 4;
			ЭлементСправочника.ЦветКрасный 			= 122;
			ЭлементСправочника.ЦветЗеленый 			= 231;
			ЭлементСправочника.ЦветСиний 			= 191;
			ЭлементСправочника.Записать();
		КонецЕсли;
		
		ЭлементСправочника = Справочники.CRM_Категории.НайтиПоНаименованию("График руководителя", Истина);
		Если ЭлементСправочника = Справочники.CRM_Категории.ПустаяСсылка() Тогда
			ЭлементСправочника = Справочники.CRM_Категории.СоздатьЭлемент();
			ЭлементСправочника.Наименование			= НСтр("ru='График руководителя';en='Supervisor Schedule'");
			ЭлементСправочника.ЦветПредставление 	= "Красный";
			ЭлементСправочника.ЦветИндекс 			= 0;
			ЭлементСправочника.ЦветКрасный 			= 255;
			ЭлементСправочника.ЦветЗеленый 			= 136;
			ЭлементСправочника.ЦветСиний 			= 124;
			ЭлементСправочника.Записать();
		КонецЕсли;
		
		ЭлементСправочника = Справочники.CRM_Категории.НайтиПоНаименованию("Совещание (внутреннее)", Истина);
		Если ЭлементСправочника = Справочники.CRM_Категории.ПустаяСсылка() Тогда
			ЭлементСправочника = Справочники.CRM_Категории.СоздатьЭлемент();
			ЭлементСправочника.Наименование			= НСтр("ru='Совещание (внутреннее)';en='Meeting (internal)'");
			ЭлементСправочника.ЦветПредставление 	= "Лиловый";
			ЭлементСправочника.ЦветИндекс 			= 8;
			ЭлементСправочника.ЦветКрасный 			= 219;
			ЭлементСправочника.ЦветЗеленый 			= 173;
			ЭлементСправочника.ЦветСиний 			= 255;
			ЭлементСправочника.Записать();
		КонецЕсли;
		
		ЭлементСправочника = Справочники.CRM_Категории.НайтиПоНаименованию("Встреча (внешняя)", Истина);
		Если ЭлементСправочника = Справочники.CRM_Категории.ПустаяСсылка() Тогда
			ЭлементСправочника = Справочники.CRM_Категории.СоздатьЭлемент();
			ЭлементСправочника.Наименование			= НСтр("ru='Встреча (внешняя)';en='Meeting (External)'");
			ЭлементСправочника.ЦветПредставление 	= "Оранжевый";
			ЭлементСправочника.ЦветИндекс 			= 1;
			ЭлементСправочника.ЦветКрасный 			= 255;
			ЭлементСправочника.ЦветЗеленый 			= 184;
			ЭлементСправочника.ЦветСиний 			= 120;
			ЭлементСправочника.Записать();
		КонецЕсли;
		
		ЭлементСправочника = Справочники.CRM_Категории.НайтиПоНаименованию("Личные", Истина);
		Если ЭлементСправочника = Справочники.CRM_Категории.ПустаяСсылка() Тогда
			ЭлементСправочника = Справочники.CRM_Категории.СоздатьЭлемент();
			ЭлементСправочника.Наименование			= НСтр("ru='Личные';en='Personal'");
			ЭлементСправочника.ЦветПредставление 	= "Синий";
			ЭлементСправочника.ЦветИндекс 			= 7;
			ЭлементСправочника.ЦветКрасный 			= 164;
			ЭлементСправочника.ЦветЗеленый 			= 189;
			ЭлементСправочника.ЦветСиний 			= 252;
			ЭлементСправочника.Записать();
		КонецЕсли;
		
		// Для системной учетной записи электронной почты заполним папки электронных писем по умолчанию.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПапкиЭлектронныхПисем.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|ГДЕ
		|	ПапкиЭлектронныхПисем.Владелец = ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты)";
		Выборка = Запрос.Выполнить().Выбрать();
		Если НЕ Выборка.Следующий() Тогда
			СсылкаУЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
			ОбъектУЗ = СсылкаУЗ.ПолучитьОбъект();
			ОбъектУЗ.Записать();
		КонецЕсли;
		
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты.ПолучитьОбъект();
		УчетнаяЗапись.ПортСервераИсходящейПочты	= 25;
		УчетнаяЗапись.ПортСервераВходящейПочты	= 110;
		УчетнаяЗапись.ВремяОжидания				= 30;
		УчетнаяЗапись.Записать();
		
		// Заполним ПВХ CRM_ОбъектыЖурналаДокументов
		CRM_КлиентыСервер.ЗаполнитьПроверитьПВХОбъектыЖурнала();
		
		// Заполним ПВХ CRM_ВидыОбъектовБизнесПроцессов
		CRM_ВоронкиПродажСервер.ЗаполнитьПроверитьПВХВидыОбъектовБизнесПроцессов();
		
		// Заполним справочник CRM_ГруппыУниверсальногоЖурнала.
		Справочники.CRM_ГруппыУниверсальногоЖурнала.ЗаполнитьКонтакты();
		Справочники.CRM_ГруппыУниверсальногоЖурнала.ЗаполнитьПродажи();
		Справочники.CRM_ГруппыУниверсальногоЖурнала.ЗаполнитьПроцессы();
		
		// Заполнение пользовательских настроек динамических списков по умолчанию.
		CRM_ОбщегоНазначенияСервер.ПользовательскиеНастройкиСпискаЗаполнитьПоУмолчанию();
		
		// Заполнение элементов справочника CRM_СостоянияСобытий.
		Справочники.CRM_СостоянияСобытий.ЗаполнитьЭлементыСправочника();
		
		// Заполнение константы CRM_КоличествоПисемЭлектроннойРассылкиВОтправляемомПакете.
		Константы.CRM_КоличествоПисемЭлектроннойРассылкиВОтправляемомПакете.Установить(50);
		Константы.CRM_ИспользоватьРегламентноеЗаданиеОтправкиРассылокЭлектронныхПисем.Установить(Истина);
		Константы.CRM_ШрифтПисьмаПоУмолчанию.УстановитьШрифтПоУмолчанию();
		
		// Заполнение регистра CRM_ОписаниеРеквизитовМетаданных.
		РегистрыСведений.CRM_ОписаниеРеквизитовМетаданных.ОбновитьЗаписи();
		
		// Видам КИ с типом АдресЭлектроннойПочты включим флаг проверки корректности.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	НЕ ВидыКонтактнойИнформации.ЭтоГруппа
		|	И ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.ПроверятьКорректность = Истина;
			Попытка
				СправочникОбъект.Записать();
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЦикла;
		
		// Заполним шаблон рассылки для анкетирования.
		Справочники.CRM_ШаблоныРассылки.CRM_ЗаполнитьШаблонДляАнкетирования();
		Справочники.CRM_ШаблоныРассылки.ОбновитьОбъектСправочника(Справочники.CRM_ШаблоныРассылки.ШаблонОценкиОбращения);
		
		// Заполним шаблоны автотекста.
		Справочники.CRM_ШаблоныАвтотекста.ЗаполнитьПредопределенныеДанные();
		
		// Заполнение ролей партнеров для предопределенных элементов справочника ВидыСвязейМеждуПартнерами.
		CRM_МетодыМодулейМенеджеровСправочников.CRM_ЗаполнитьРолиПартнеровДляВидовСвязей();
		
		// Заполним реквизиты предопределенных элементов справочника обработчики событий точек маршрута.
		
		// Вложенный бизнес-процесс
		СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ПриСозданииВложенногоБизнесПроцесса.ПолучитьОбъект();
		СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс;
		СпрОбъект.Записать();
		
		СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ПослеСозданияВложенногоБизнесПроцесса.ПолучитьОбъект();
		СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс;
		СпрОбъект.Записать();
		
		СпрОбъект =
			Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ВложенныйБизнесПроцессПередСозданиемЗадач.ПолучитьОбъект();
		СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс;
		СпрОбъект.Записать();
		
		СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ВложенныйБизнесПроцессПриСозданииЗадач.ПолучитьОбъект();
		СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс;
		СпрОбъект.Записать();
		
		// Выбор варианта
		СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ВыборВарианта.ПолучитьОбъект();
		СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта;
		СпрОбъект.Записать();
		
		// Действие
		СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ДействиеПриВыполнении.ПолучитьОбъект();
		СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Действие;
		СпрОбъект.Записать();
		
		СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ДействиеПослеВыполнения.ПолучитьОбъект();
		СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Действие;
		СпрОбъект.Записать();
		
		СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ДействиеПередСозданиемЗадач.ПолучитьОбъект();
		СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Действие;
		СпрОбъект.Записать();
		
		СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ДействиеПриСозданииЗадач.ПолучитьОбъект();
		СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Действие;
		СпрОбъект.Записать();
		
		// Завершение
		СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ЗавершениеПриЗавершении.ПолучитьОбъект();
		СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Завершение;
		СпрОбъект.Записать();
		
		// Обработка
		СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.Обработка.ПолучитьОбъект();
		СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Обработка;
		СпрОбъект.Записать();
		
		// Старт
		СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.СтартПередСтартом.ПолучитьОбъект();
		СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Старт;
		СпрОбъект.Записать();
		
		СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.СтартПриСтарте.ПолучитьОбъект();
		СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Старт;
		СпрОбъект.Записать();
		
		СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.СтартПослеСтарта.ПолучитьОбъект();
		СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Старт;
		СпрОбъект.Записать();
		
		// Условие
		СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.УсловиеПроверкаУсловия.ПолучитьОбъект();
		СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Условие;
		СпрОбъект.Записать();
		
		// Обработка
		СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.Обработка.ПолучитьОбъект();
		СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Обработка;
		СпрОбъект.Записать();
		
		// Заполним предопределенный БП Поручение, создадим и заполним прочие карты маршрутов.
		Если НЕ ЭтоРазделенныйРежимРаботы Тогда
			
			Для Каждого МакетКарты Из Метаданные.Справочники.CRM_КартыМаршрутов.Макеты Цикл
				
				Если МакетКарты.Имя = "КартаМаршрутаПоУмолчанию" Тогда 
					Продолжить;
				КонецЕсли;
				
				ИмяФайла = ПолучитьИмяВременногоФайла("xml");
				ДвоичныеДанные = Справочники.CRM_КартыМаршрутов.ПолучитьМакет(МакетКарты.Имя);
				Если ТипЗнч(ДвоичныеДанные) <> Тип("ДвоичныеДанные") Тогда 
					Продолжить;
				КонецЕсли;
				
				ДвоичныеДанные.Записать(ИмяФайла);
				
				Если МакетКарты.Имя = "Поручение" Тогда
					Если НЕ Справочники.CRM_КартыМаршрутов.Поручение.Наименование = МакетКарты.Синоним Тогда
						ПредопределенныйОбъект = Справочники.CRM_КартыМаршрутов.Поручение.ПолучитьОбъект();
						ПредопределенныйОбъект.Наименование = МакетКарты.Синоним;
						ПредопределенныйОбъект.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
						ПредопределенныйОбъект.Записать();
						
						CRM_БизнесПроцессыСервер.ЗаполнитьКартуМаршрутаПоМакету(Справочники.CRM_КартыМаршрутов.Поручение, ИмяФайла);
					КонецЕсли;
					
				ИначеЕсли МакетКарты.Имя = "ЗапросНаИзменениеСроков" Тогда
					
					ПредопределенныйОбъект = Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков.ПолучитьОбъект();
					ПредопределенныйОбъект.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
					
					Если НЕ Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков.Наименование = МакетКарты.Синоним Тогда
						ПредопределенныйОбъект.Наименование = МакетКарты.Синоним;
					КонецЕсли;
					
					ПредопределенныйОбъект.Записать();
					
					CRM_БизнесПроцессыСервер.ЗаполнитьКартуМаршрутаПоМакету(Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков,
						 ИмяФайла);
					
				ИначеЕсли МакетКарты.Имя = "Обращение" Тогда
					Элемент = Неопределено;
					Элемент = Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("Обращение");
					Если Не ЗначениеЗаполнено(Элемент) Тогда
						
						НоваяКарта = Справочники.CRM_КартыМаршрутов.СоздатьЭлемент();
						НоваяКарта.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
						НоваяКарта.ИспользоватьПриПринятииОбращения = Истина;
						НоваяКарта.СостояниеПроцесса = Перечисления.bpmСостояниеПроцесса.Запланирован;
						НоваяКарта.Наименование = "Обращение";
						НоваяКарта.Записать();
						
						CRM_БизнесПроцессыСервер.ЗаполнитьКартуМаршрутаПоМакету(НоваяКарта.Ссылка, ИмяФайла);
					КонецЕсли;
				ИначеЕсли МакетКарты.Имя = "СогласованиеПланаВстреч" Тогда
					Элемент = Неопределено;
					Элемент = Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию(МакетКарты.Синоним);
					Если Не ЗначениеЗаполнено(Элемент) Тогда
						
						НоваяКарта = Справочники.CRM_КартыМаршрутов.СоздатьЭлемент();
						НоваяКарта.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта;
						НоваяКарта.Наименование = МакетКарты.Синоним;
						НоваяКарта.ВидОбъектаСтрокой = "CRM_ЖурналыВстреч";
						НоваяКарта.РеквизитОбъектаСтрокой = "Статус";
						НоваяКарта.РазрешеноДосрочноеЗавершение = Истина;
						НоваяКарта.РазрешитьПеремещатьТекущийЭтап = Истина;
						НоваяКарта.УказыватьПричинуНеудачногоЗавершения = Истина;
						НоваяКарта.СостояниеДосрочногоЗавершения = Перечисления.CRM_СтатусыСогласованияПланированияВстреч.Отменено;
						НоваяКарта.Записать();
						
						CRM_БизнесПроцессыСервер.ЗаполнитьКартуМаршрутаПоМакету(НоваяКарта.Ссылка, ИмяФайла);
						
						СхемаКомпоновкиДанных	   =
							CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта("CRM_ЖурналыВстреч");
						АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных,
							 Новый УникальныйИдентификатор());
						НастройкиКомпоновки		   = CRM_БизнесПроцессыПереопределяемый.СкомпоноватьНастройки(Новый КомпоновщикНастроекКомпоновкиДанных,
							 АдресСхемыКомпоновкиДанных);
						НоваяКарта.Прочитать();
						НоваяКарта.ХранилищеСхемыКомпоновкиДанных	 = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
						НоваяКарта.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(НастройкиКомпоновки);
						НоваяКарта.Записать();
					КонецЕсли;
				Иначе
					Элемент = Неопределено;
					Элемент = Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию(МакетКарты.Синоним);
					Если Не ЗначениеЗаполнено(Элемент) Тогда
						
						НоваяКарта = Справочники.CRM_КартыМаршрутов.СоздатьЭлемент();
						НоваяКарта.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
						НоваяКарта.Наименование = МакетКарты.Синоним;
						НоваяКарта.Записать();
						
						CRM_БизнесПроцессыСервер.ЗаполнитьКартуМаршрутаПоМакету(НоваяКарта.Ссылка, ИмяФайла);
						
						СхемаКомпоновкиДанных		= CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта("Пользователи");
						АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных,
							 Новый УникальныйИдентификатор());
						НастройкиКомпоновки	= CRM_БизнесПроцессыПереопределяемый.СкомпоноватьНастройки(Новый КомпоновщикНастроекКомпоновкиДанных,
							 АдресСхемыКомпоновкиДанных);
						НоваяКарта.Прочитать();
						НоваяКарта.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
						НоваяКарта.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(НастройкиКомпоновки);
						НоваяКарта.Записать();
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Заполнение реквизита УспешностьЗавершения у предопределенных элементов справочника
		// CRM_ВариантыЗавершенияБизнесПроцесса.
		Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.ЗаполнитьРеквизитУспешностьЗавершения();
		
		// Установим виды точек маршрута.
		Справочники.CRM_ОбработчикиСобытийТочекМаршрута.УстановитьВидТочкиВОбработчиках();
		
		// Заполнение реквизитов предопределенных элементов справочника "CRM_КатегорииРешений".
		Справочники.CRM_КатегорииРешений.ЗаполнитьПредопределенныеКатегорииРешений();
		
		// Объекты НСИ CRM 3.0
		ЗаполнитьДанныеНСИ_Редакции3();
		
		// Заполнение предопределенных данных для работы механизма триггеров.
		Справочники.CRM_ДействияТриггеров.СоздатьПредопределенныеДействия();
		Справочники.CRM_УсловияСрабатыванияТриггеров.СоздатьПредопределенныеДействия();
		
		// Заполнение должностей.
		Справочники.CRM_Должности.СоздатьЭлементыПоУмолчанию();
		
		// Заполнение причин отказа.
		Справочники.CRM_ПричиныОтказаПоИнтересам.СоздатьЭлементыПоУмолчанию();
		Справочники.CRM_ПричиныОтклоненияОбращений.СоздатьЭлементыПоУмолчанию();
		
		// Заполнение причин отсутствия сотрудника.
		Справочники.CRM_ПричиныОтсутствияСотрудника.СоздатьЭлементыПоУмолчанию();
		
		// Заполнение бизнес-регионов по классификатору.
		ЗаполнитьСправочникБизнесРегионыПоКлассификатору();
		
		// Заполнение шаблонов ключевых показателей
		ЗаполнитьШаблоныПоказателей();
		
		// История реквизитов.
		РегистрыСведений.CRM_НастройкаВерсионированияРеквизитовПартнеров.НачальноеЗаполнениеНастроекВерсионирования();
		
		РегистрыСведений.CRM_РасшифровкиСтатусовПисемEmailРассылки.ОбновитьРасшифровкиСтатусов();
		
		ПереименоватьПроценты();
		
		ОбработатьВзаимодействия();
		
		//Константы.CRM_НеИспользоватьПотокиДоставкиЭлектроннойПочты.Установить(Истина);
		
		Если ЭтоРазделенныйРежимРаботы Тогда
			Константы.CRM_ИспользоватьИнтеграциюСМессенджерами.Установить(Истина);
			CRM_РаботаСМессенджерамиСервер.ИзменитьИспользованиеЗаданияОтправкиОтложенныхСообщений(Истина);
		Иначе
			СписокРегЗаданий = Новый СписокЗначений;
			СписокРегЗаданий.Добавить("CRM_ОбменДаннымиСMSExchange");
			СписокРегЗаданий.Добавить("CRM_ОтправкаОповещенийПоСМС");
			СписокРегЗаданий.Добавить("CRM_ОтправкаОповещенийПоЭлектроннойПочте");
			СписокРегЗаданий.Добавить("CRM_СинхронизацияКалендарей");
			СписокРегЗаданий.Добавить("CRM_СтатусыEmailРассылок");
			СписокРегЗаданий.Добавить("CRM_ФормированиеОповещений");
			СписокРегЗаданий.Добавить("CRM_ФормированиеПоздравленийСДнемРождения");
			СписокРегЗаданий.Добавить("CRM_РасчетКлючевыхПоказателей");
			СписокРегЗаданий.Добавить("CRM_РегистрацияПотерянныхОбращений");
			Для Каждого РегЗадание Из  СписокРегЗаданий Цикл
				
				МетаданныеЗадания = Метаданные.РегламентныеЗадания[РегЗадание.Значение];
				ПараметрыПоиска = Новый Структура;
				ПараметрыПоиска.Вставить("Метаданные", МетаданныеЗадания);
				СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыПоиска);
				
				Если СписокЗаданий.Количество() = 0 Тогда
					РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(МетаданныеЗадания);
					
					ПараметрыЗадания = Новый Структура("Метаданные", МетаданныеЗадания);
					
					Если РегламентноеЗадание <> Неопределено Тогда
						ПараметрыЗадания.Вставить("Использование", Истина);
						ПараметрыЗадания.Вставить("Расписание", РегламентноеЗадание.Расписание);
					КонецЕсли;
					
					РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
					Продолжить;
				КонецЕсли;
				
				Для Каждого Задание Из СписокЗаданий Цикл
					ПараметрыЗадания = Новый Структура("Использование", Истина);
					РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
				КонецЦикла;
				
			КонецЦикла;
			
			ПланыВидовХарактеристик.CRM_Классификаторы.ВключениеИспользованияТегов();
			
		КонецЕсли;
		
		ОбновитьСоставЖурналаДокументов();
		
		ЗаполнитьНастройкиРабочегоСтола();
		
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() И НЕ ЭтоРазделенныйРежимРаботы Тогда
			ПроверкаКонтрагентов.ВключитьВыключитьПроверкуКонтрагентов(Ложь);
		КонецЕсли;
		
		Справочники.CRM_ТипыОтношений.ЗаполнитьПредопределенныеДанные(Неопределено);
		Справочники.CRM_УровниПоддержки.ЗаполнитьПредопределенныеДанные();
		Справочники.CRM_ТипыОбращений.ЗаполнитьПредопределенныеДанные();
		
		// Заполним служебные реквизиты для обмена с iCRM.
		ЗаполнитьРеквизитыДляОбмена();
		
		// Заполнение внешних библиотек конфигурации.
		Справочники.CRM_ВнешниеБиблиотеки.ЗаполнитьПредопределенныеВнешниеБиблиотеки();
		
		// Настройки контроля заполненности
		CRM_КонтрольЗаполненностиРеквизитовОбъектов.НачальноеЗаполнениеНастроекКонтроляЗаполненностиОбъектов(Новый Структура("ПервыйЗапуск",
			 Истина));
			 
		Справочники.CRM_СтатусыРаботыСКлиентом.НачальноеЗаполнениеДанных();
		Справочники.CRM_СтатусыКонтактныхЛиц.НачальноеЗаполнение();
		
		CRM_МоделиМашинногоОбучения.НачальноеЗаполнениеДанных();
		
		// Начальное заполнение роли CRM_ДинамическаяАдресация
		Роль = Справочники.РолиИсполнителей.CRM_ДинамическаяАдресация.ПолучитьОбъект();
		Назначение = Роль.Назначение.Добавить();
		Назначение.ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
		Роль.Записать();
		
		// Начальное заполнение предопределенных учетных записей
		Справочники.CRM_УчетныеЗаписиМессенджеров.ЗаполнитьПредопределенныеЭлементы();
		
		// Начальное заполнение регистра сведений "Потоки доставки почты (CRM)"
		РегистрыСведений.CRM_ПотокиДоставкиПочты.ЗаполнитьПоУмолчанию();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры // ПервыйЗапуск()

// Процедура устанавливает консанты CRM_БазоваяВерсия и CRM_НеБазоваяВерсия
//
// Параметры:
//	Нет.
//
Процедура УстановитьКонстантыБазовойВерсии() Экспорт
	
	БазоваяВерсия = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	Константы.CRM_БазоваяВерсия.Установить(БазоваяВерсия);
	Константы.CRM_НеБазоваяВерсия.Установить(Не БазоваяВерсия);
	
КонецПроцедуры // УстановитьКонстантыБазовойВерсии()

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском) Экспорт
	
	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);
	
	Если Ссылка.Пустая() Тогда
		
		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();
		
		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописи = ПараметрыПрописиНаРусском;
		
		ЗаписатьСправочникОбъект(СправочникОбъект);
		
		Ссылка = СправочникОбъект.Ссылка;
		
	ИначеЕсли Ссылка.Предопределенный 
		И ПустаяСтрока(Ссылка.НаименованиеПолное) Тогда
		
		// Это первое обращение к предопределенному элементу.
		СправочникОбъект = Ссылка.ПолучитьОбъект();
		
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописи = ПараметрыПрописиНаРусском;
		
		ЗаписатьСправочникОбъект(СправочникОбъект);
		
		Ссылка = СправочникОбъект.Ссылка;
		
	КонецЕсли;
	
	// Установим курс и кратность = 1 на 1 января 1980.
	РаботаСКурсамиВалют.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);
	
	Возврат Ссылка;
	
КонецФункции // НайтиСоздатьВалюту()

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект, Сообщать = Ложь) Экспорт
	
	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;
	
	Если СправочникОбъект.ЭтоНовый() Тогда
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru='Создана группа справочника ""%1"", код: ""%2"",
				| наименование: ""%3""';en='Group of catalog ""%1"" created, code: ""%2"",
				| description: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru='Создан элемент справочника ""%1"", код: ""%2"",
				| наименование: ""%3""';en='Item of catalog ""%1"" created, code: ""%2"",
				| description: ""%3""'") ;
		КонецЕсли; 
	Иначе
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru='Обработана группа справочника ""%1"", код: ""%2"",
				| наименование: ""%3""';en='Group of catalog ""%1"" processed, code: ""%2"",
				| description: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru='Обработан элемент справочника ""%1"", код: ""%2"",
				| наименование: ""%3""';en='Item of catalog ""%1"" processed, code: ""%2"",
				| description: ""%3""'") ;
		КонецЕсли; 
	КонецЕсли;
	
	Если СправочникОбъект.Метаданные().ДлинаКода > 0 Тогда
		ПолныйКод = СправочникОбъект.ПолныйКод();
	Иначе
		ПолныйКод = НСтр("ru='<без кода>';en='<no code>'");
	КонецЕсли; 
	СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрСообщения,
		 СправочникОбъект.Метаданные().Синоним, ПолныйКод,
		 СправочникОбъект.Наименование);
	
	Попытка
		СправочникОбъект.Записать();
		Если Сообщать = Истина Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСообщения, СправочникОбъект);
		КонецЕсли;
		
	Исключение
		
		ТекстСообщения = НСтр("ru='Не удалось завершить действие: %1';en='It were not possible to completed action: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрСообщения);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки.Описание);
		
	КонецПопытки;
	
КонецПроцедуры // ЗаписатьСправочникОбъект()

// Процедура выполняет заполнение реквизита "CRM_ИспользоватьДляОповещений" предопределенных элементов.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПредопределенныеВидыКонтактнойИнформацииДляОповещений() Экспорт
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.EmailПользователя.ПолучитьОбъект();
	СправочникОбъект.CRM_ИспользоватьДляОповещений = Истина;
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица.ПолучитьОбъект();
	СправочникОбъект.CRM_ИспользоватьДляОповещений = Истина;
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонПользователя.ПолучитьОбъект();
	СправочникОбъект.CRM_ИспользоватьДляОповещений = Истина;
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица.ПолучитьОбъект();
	СправочникОбъект.CRM_ИспользоватьДляОповещений = Истина;
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица.ПолучитьОбъект();
	СправочникОбъект.CRM_ИспользоватьДляОповещений = Истина;
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица.ПолучитьОбъект();
	СправочникОбъект.CRM_ИспользоватьДляОповещений = Истина;
	СправочникОбъект.Записать();
	
КонецПроцедуры	// ЗаполнитьПредопределенныеВидыКонтактнойИнформацииДляОповещений()

// Процедура выполняет заполнение предопределенного элемента "CRM_СайтПартнера".
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьВидКонтактнойИнформацииСайтПартнера() Экспорт
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.CRM_СайтПартнера.ПолучитьОбъект();
	СправочникОбъект.Тип								= Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
	СправочникОбъект.МожноИзменятьСпособРедактирования	= Истина;
	СправочникОбъект.ВидРедактирования					= "ПолеВвода";
	СправочникОбъект.РеквизитДопУпорядочивания			= 4;
	СправочникОбъект.Записать();
	
КонецПроцедуры // ЗаполнитьВидКонтактнойИнформацииСайтПартнера()

// Процедура заполняет значение ключевого события "День рождения" 
// у контактного лица на основе реквизита ДеньРождения
//
Процедура ЗаполнитьКлючевоеСобытиеДеньРожденияКЛНаОсновеДатыРождения()
	
	ВидСобытия = Справочники.CRM_ВидыКлючевыхСобытий.НайтиПоНаименованию("День рождения контактного лица", Истина);
	
	Если ВидСобытия = Неопределено Тогда
		ВидСобытия = Справочники.CRM_ВидыКлючевыхСобытий.НайтиПоНаименованию("Birthday of the contact person", Истина);
	КонецЕсли;

	Если ЗначениеЗаполнено(ВидСобытия) Тогда
		
		Выборка = Справочники.КонтактныеЛицаПартнеров.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ДатаРождения) Тогда
				ВыборкаОбъект 			= Выборка.ПолучитьОбъект();
				НоваяСтрока 			= ВыборкаОбъект.CRM_КлючевыеСобытия.Добавить();
				НоваяСтрока.ВидСобытия 	= ВидСобытия;
				НоваяСтрока.ДатаСобытия = Выборка.ДатаРождения;
				Если Выборка.CRM_НапоминатьОДнеРождения Тогда
					НоваяСтрока.НапоминатьОСобытии = Истина;
				Иначе
					НоваяСтрока.НапоминатьОСобытии = Ложь;
				КонецЕсли;
				ВыборкаОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура заполняет новые объекты ИБ данными по умолчанию
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьДанныеНСИ_Редакции3() Экспорт
	
	// Заполним константу использования тегов.
	Константы.CRM_ИспользоватьТеги.Установить(Истина);
	
	// Заполним справочник "Сегменты рынка".
	Справочники.CRM_СегментыРынка.СоздатьЭлементыСправочникаПоУмолчанию();
	
	// Заполним справочник "Численность сотрудников клиента".
	Справочники.CRM_ЧисленностьСотрудниковКлиента.СоздатьЭлементыСправочникаПоУмолчанию();
	
	// Заполним справочник "Численность рабочих мест клиента".
	Справочники.CRM_ЧисленностьРабочихМестКлиента.СоздатьЭлементыСправочникаПоУмолчанию();
	
	// Заполним справочник "Виды ключевых событий".
	Справочники.CRM_ВидыКлючевыхСобытий.СоздатьЭлементыСправочникаПоУмолчанию();
	
	// Заполним справочник "Важность клиентов".
	Справочники.CRM_ВажностьКлиентов.ЗаполнитьПредопределенныеЭлементы();
	
	// Заполним справочник "Состояния интересов".
	Справочники.CRM_СостоянияИнтересов.ЗаполнитьПредопределенныеЭлементы();
	
	// Заполним предопределенные элементы справочника "Виды взаимодействий".
	Справочники.CRM_ВидыВзаимодействий.ЗаполнитьПредопределенныеЭлементы();
	
	// Заполним предопределенные элементы справочника "Офисы компании".
	Справочники.CRM_ОфисыКомпании.СоздатьЭлементыСправочникаПоУмолчанию();
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// Сразу же после заполнения офисов, заполним реквизит "Офис" у основного подразделения
		ЗаполнитьРеквизитОфисУОсновногоПодразделения();
	КонецЕсли;
	
	// Заполняем у всех контактных лиц элемент "День рождения" ТЧ "Ключевые события". 
	ЗаполнитьКлючевоеСобытиеДеньРожденияКЛНаОсновеДатыРождения();	
	
	// Загружаем всем пользователям базы настройки полей отображения содержания из типового макета.
	CRM_ОбщегоНазначенияСервер.УстановитьВсемПользователямНастройкиОтображенияСодержанияИзМакета();
	
	// Заполним предопределенные виджеты.
	Справочники.CRM_Виджеты.ЗаполнитьПредопределенныеВиджеты();
	
	// Доступ к ключевым показателям и представления по умолчанию.
	ЗаполнитьДоступККлючевымПоказателямИПредставления();
	
	// Заполнение справочника CRM_ВоронкиПродаж.
	Справочники.CRM_ВоронкиПродаж.СоздатьЭлементыСправочникаПоУмолчанию();
	
КонецПроцедуры // ЗаполнитьДанныеНСИ_Редакции3()

Процедура ЗаполнитьСправочникБизнесРегионыПоКлассификатору()
	
	МакетКлассификатор = Справочники.БизнесРегионы.ПолучитьМакет("CRM_Классификатор");
	
	ВозвратнаяСтруктура = ОбщегоНазначения.ПрочитатьXMLВТаблицу(МакетКлассификатор.ПолучитьТекст());
	
	ТаблицаРегионов = ВозвратнаяСтруктура.Данные;
	Для Каждого СтрокаТаблицыРегионов Из ТаблицаРегионов Цикл
		
		Платежеспособность = ?(ПустаяСтрока(СтрокаТаблицыРегионов.Solvency), 
							   Перечисления.CRM_Платежеспособность.ПустаяСсылка(),
							   Перечисления.CRM_Платежеспособность[СтрокаТаблицыРегионов.Solvency]);
		
		НовыйЭлемент = Справочники.БизнесРегионы.СоздатьЭлемент();
		НовыйЭлемент.Наименование = СтрокаТаблицыРегионов.Name;
		НовыйЭлемент.CRM_КодПоКлассификатору  = Число(СтрокаТаблицыРегионов.Code);
		НовыйЭлемент.CRM_КодСтраны = СтрокаТаблицыРегионов.CountryCode;
		НовыйЭлемент.CRM_КодГорода = СтрокаТаблицыРегионов.SityCode;
		НовыйЭлемент.CRM_ЧисленностьНаселения = СтрокаТаблицыРегионов.Population;
		НовыйЭлемент.CRM_Платежеспособность = Платежеспособность;
		НовыйЭлемент.CRM_ВремяПоГринвичу_GMT = СтрокаТаблицыРегионов.TimeZone;
		НовыйЭлемент.Родитель = Справочники.БизнесРегионы.НайтиПоРеквизиту("CRM_КодПоКлассификатору",
			 Число(СтрокаТаблицыРегионов.ParentCode));
		НовыйЭлемент.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет доступ к ключевым показателям.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьДоступККлючевымПоказателямИПредставления() Экспорт
		
КонецПроцедуры // ЗаполнитьДоступККлючевымПоказателямИПредставления()

// Процедура перезаписывает всех клиентов и контактных лиц для заполнения данных о портрете и контактной информации
//
// Параметры:
//	Нет.
//
Процедура ПерезаписатьКлиентыКонтакты(Параметры = Неопределено) Экспорт
	
	Выборка = Справочники.КонтактныеЛицаПартнеров.Выбрать();
	Пока Выборка.Следующий() Цикл
		тОбъект = Выборка.ПолучитьОбъект();
		Попытка
			тОбъект.Записать();
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	Выборка = Справочники.Партнеры.Выбрать();
	Пока Выборка.Следующий() Цикл
		тОбъект = Выборка.ПолучитьОбъект();
		Попытка
			тОбъект.Записать();
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры // ПерезаписатьКлиентыКонтакты()

Процедура ЗаполнитьШаблоныПоказателей() Экспорт
	Справочники.CRM_ШаблоныКлючевыхПоказателей.ЗаполнитьПредопределенныеПоказатели();
КонецПроцедуры

Процедура УстановитьЗначениеКонстантыИспользоватьНапоминанияПользователя(Параметры) Экспорт
	Константы.ИспользоватьНапоминанияПользователя.Установить(Ложь);
КонецПроцедуры

Процедура ПереименоватьПроценты() Экспорт
	
	ЕдиницаПроценты = Справочники.CRM_ЕдиницыИзмеренияПоказателей.Процент.ПолучитьОбъект();
	ЕдиницаПроценты.Наименование = "%";
	ЕдиницаПроценты.Записать();
	
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ВысланныеКП.ПолучитьОбъект();
	Показатель.Наименование = "Кол-во выставленных коммерческих предложений";
	Показатель.КраткоеНаименование = "Выставленные КП";
	Показатель.Записать();
	
КонецПроцедуры

Процедура ОбработатьВзаимодействия() Экспорт
	
	ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.ОбзвонКлиентов.ПолучитьОбъект();
	ВидВзаимодействия.ВидДела = Справочники.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес;
	ВидВзаимодействия.Записать();
	
	ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.СоздатьЭлемент();
	ВидВзаимодействия.ВидДела = Справочники.CRM_ВидыДелВзаимодействий.ПрочиеДокументы;
	ВидВзаимодействия.Баллы				= 2;	
	ВидВзаимодействия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ТелефонныйЗвонок;
	ВидВзаимодействия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее;
	ВидВзаимодействия.Описание = Нстр("ru='Телефонный звонок клиенту';en='Phone call to customer'");
	ВидВзаимодействия.Наименование = Нстр("ru='Телефонный звонок клиенту';en='Phone call to customer'");
	ВидВзаимодействия.Записать();	
	
	ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.СоздатьЭлемент();
	ВидВзаимодействия.Баллы				= 2;	
	ВидВзаимодействия.ВидДела = Справочники.CRM_ВидыДелВзаимодействий.ПрочиеДокументы;
	ВидВзаимодействия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЭлектронноеПисьмо;
	ВидВзаимодействия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее;
	ВидВзаимодействия.Описание = Нстр("ru='Электронное письмо клиенту';en='Email to customer'");
	ВидВзаимодействия.Наименование = Нстр("ru='Электронное письмо клиенту';en='Email to customer'");
	ВидВзаимодействия.Записать();
	
КонецПроцедуры

Процедура ОбновитьСоставЖурналаДокументов() Экспорт
	
	СсылкаПВХ = CRM_КлиентыСервер.ПолучитьСсылкуПВХОбъектыЖурналаПоТипу(Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс"));
	Если СсылкаПВХ <> Неопределено Тогда 
		Если Справочники.CRM_ГруппыУниверсальногоЖурнала.Бизнес_процессы.Состав.Найти(СсылкаПВХ,
			 "Объект") = Неопределено Тогда
			ОбъектЖурнала = Справочники.CRM_ГруппыУниверсальногоЖурнала.Бизнес_процессы.ПолучитьОбъект();
			МассивТипов = Новый Массив();
			МассивТипов.Добавить(Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс"));
			Справочники.CRM_ГруппыУниверсальногоЖурнала.ЗаполнитьОбъектПоМассивуТипов(ОбъектЖурнала, МассивТипов);
			ОбъектЖурнала.Записать();
		КонецЕсли;
		ОбъектЖурнала = Справочники.CRM_ГруппыУниверсальногоЖурнала.Контакты.ПолучитьОбъект();
		Для Каждого Строка Из ОбъектЖурнала.Состав Цикл
			Если Строка.Объект = СсылкаПВХ Тогда
				ОбъектЖурнала.Состав.Удалить(Строка.НомерСтроки - 1);
			КонецЕсли;	
		КонецЦикла;
		ОбъектЖурнала.Записать();
		ОбъектЖурнала = Справочники.CRM_ГруппыУниверсальногоЖурнала.Продажи.ПолучитьОбъект();
		Для Каждого Строка Из ОбъектЖурнала.Состав Цикл
			Если Строка.Объект = СсылкаПВХ Тогда
				ОбъектЖурнала.Состав.Удалить(Строка.НомерСтроки - 1);
			КонецЕсли;	
		КонецЦикла;
		ОбъектЖурнала.Записать();
	КонецЕсли;
	
	СсылкаПВХ = CRM_КлиентыСервер.ПолучитьСсылкуПВХОбъектыЖурналаПоТипу(Тип("ДокументСсылка.CRM_Интерес"));
	Если СсылкаПВХ <> Неопределено Тогда
		Если Справочники.CRM_ГруппыУниверсальногоЖурнала.Продажи.Состав.Найти(СсылкаПВХ, "Объект") = Неопределено Тогда
			ОбъектЖурнала = Справочники.CRM_ГруппыУниверсальногоЖурнала.Продажи.ПолучитьОбъект();
			МассивТипов = Новый Массив();
			МассивТипов.Добавить(Тип("ДокументСсылка.CRM_Интерес"));
			Справочники.CRM_ГруппыУниверсальногоЖурнала.ЗаполнитьОбъектПоМассивуТипов(ОбъектЖурнала, МассивТипов);
			ОбъектЖурнала.Записать();
		КонецЕсли;
	КонецЕсли;
	СсылкаПВХ = CRM_КлиентыСервер.ПолучитьСсылкуПВХОбъектыЖурналаПоТипу(Тип("ДокументСсылка.CRM_Взаимодействие"));
	Если СсылкаПВХ <> Неопределено Тогда
		Если Справочники.CRM_ГруппыУниверсальногоЖурнала.Контакты.Состав.Найти(СсылкаПВХ, "Объект") = Неопределено Тогда
			ОбъектЖурнала = Справочники.CRM_ГруппыУниверсальногоЖурнала.Контакты.ПолучитьОбъект();
			МассивТипов = Новый Массив();
			МассивТипов.Добавить(Тип("ДокументСсылка.CRM_Взаимодействие"));
			Справочники.CRM_ГруппыУниверсальногоЖурнала.ЗаполнитьОбъектПоМассивуТипов(ОбъектЖурнала, МассивТипов);
			ОбъектЖурнала.Записать();
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьНастройкиРабочегоСтола() Экспорт
	
	// Для Fresh установим открытие раб. стола по умолчанию при запуске
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Запись = РегистрыСведений.CRM_НастройкиОткрытияРабочегоСтола.СоздатьМенеджерЗаписи();
		Запись.Объект = "Общие настройки";
		Запись.ОткрыватьРабочийСтол = Истина;
		Запись.БлокироватьИнтерфейс = Ложь;
		Запись.ИзменятьСоставРабочегоСтола = Ложь;
		Запись.ИзменятьРежимЗапуска = Ложь;
		Запись.ИндивидуальныеНастройки = Истина;
		Запись.ОтображатьПринятияОбращения = Истина;
		Запись.Записать();
	Иначе	
		Запись = РегистрыСведений.CRM_НастройкиОткрытияРабочегоСтола.СоздатьМенеджерЗаписи();
		Запись.Объект = "Общие настройки";
		Запись.ОткрыватьРабочийСтол = CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM();
		Запись.БлокироватьИнтерфейс = Ложь;
		Запись.ИзменятьСоставРабочегоСтола = Ложь;
		Запись.ИзменятьРежимЗапуска = Ложь;
		Запись.ИндивидуальныеНастройки = Истина;
		Запись.ОтображатьПринятияОбращения = Истина;
		Запись.Записать();
	КонецЕсли;
	
	СписокФорм = CRM_РабочийСтолСервер.ПолучитьСписокФормПоУмолчанию();
	Набор = РегистрыСведений.CRM_НастройкиРабочегоСтола.СоздатьНаборЗаписей();
	Набор.Очистить();
	Счетчик = 1;
	Для Каждого Значение Из СписокФорм Цикл
		Стр = Набор.Добавить();
		Стр.ИмяФормы = Значение.Значение;
		Стр.Наименование = Значение.Представление;
		Стр.Идентификатор = Строка(Новый УникальныйИдентификатор);
		Стр.Объект = "Общие настройки";
		Стр.Порядок = Счетчик;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	Набор.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДляОбмена(Параметры = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.CRM_ИмяПредопределенногоЭлемента = """"";
	ТабДанных = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из ТабДанных Цикл
		Об = Строка.Ссылка.ПолучитьОбъект();
		Если Об.Предопределенный Тогда
			Об.CRM_ИмяПредопределенногоЭлемента = Об.ИмяПредопределенныхДанных;
		Иначе
			Об.CRM_ИмяПредопределенногоЭлемента = Строка(Строка.Ссылка.УникальныйИдентификатор());
		КонецЕсли;	
		Об.Записать();
	КонецЦикла;	
КонецПроцедуры	

#Область КонвертацияЗаметокВHTML_ОбновлениеИПервыйЗапуск

Процедура ЗарегистрироватьЗаметкиВHTML(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Заметки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Заметки КАК Заметки
	|ГДЕ
	|	НЕ Заметки.ЭтоГруппа";
	
	РезультатЗапросаТаблица = Запрос.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РезультатЗапросаТаблица.ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура КонвертироватьЗаметкуВHTML(Заметка) Экспорт
	
	СправочникОбъект = Заметка.ПолучитьОбъект();
			
	ТекстHTML = "";
	Вложения = Новый Структура;
	Заметка.Содержание.Получить().ПолучитьHTML(ТекстHTML, Вложения);
	
	// Замена ссылок на картинки на base64
	Для Каждого Вложение Из Вложения Цикл
		Если ТипЗнч(Вложение.Значение) = Тип("Картинка") Тогда
			base64Картинка = "data:image/" + "png" + ";base64,"
								+ Base64Строка(Вложение.Значение.ПолучитьДвоичныеДанные());
			ТекстHTML = СтрЗаменить(ТекстHTML, Вложение.Ключ, base64Картинка);
		Иначе
			СтрокаТекстаИсключения = НСтр("ru = 'Некорретный тип вложения %1""'");
			ВызватьИсключение
			 СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаТекстаИсключения,
			 													ТипЗнч(Вложение.Значение));
		КонецЕсли;
	КонецЦикла;
	
	СправочникОбъект.CRM_СодержаниеHTML = Новый ХранилищеЗначения(ТекстHTML, Новый СжатиеДанных(9));
	
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
	
КонецПроцедуры

Процедура ОбработатьЗаметкиВHTML(Параметры) Экспорт
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
		
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, "Справочник.Заметки");	
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			КонвертироватьЗаметкуВHTML(Выборка.Ссылка);
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			
			// Если не удалось обработать объект, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось конвертировать заметку в HTML в объекте: %1 по причине:
					|%2'"), Выборка.Ссылка, ТекстОшибки);
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				 УровеньЖурналаРегистрации.Предупреждение,
				, Выборка.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;	
	
	
	ОбработкаЗавершена = Истина;
	
	Если Не ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, "Справочник.Заметки") Тогда
		ОбработкаЗавершена = Ложь;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре CRM_ОбновлениеИнформационнойБазы.ОбработатьЗаметкиВHTML не удалось обработать некоторые объекты (пропущены): %1'"), 
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			 УровеньЖурналаРегистрации.Информация,
			, ,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Процедура CRM_ОбновлениеИнформационнойБазы.ОбработатьЗаметкиВHTML обработала очередную порцию объектов: %1'"),
					ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // КонвертацияЗаметокВHTML_ОбновлениеИПервыйЗапуск

Процедура ЗаполнитьСписокПубличныхПочтовыхДоменов() Экспорт
	
	Если CRM_ОбщегоНазначенияСервер.МассивПубличныхДоменов() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивДоменов = CRM_ОбщегоНазначенияСервер.МассивПубличныхДоменовПоУмолчанию();
	
	Настройки = Новый Структура;
	Настройки.Вставить("МассивДоменов", МассивДоменов);
	
	ХранилищеНастроек = Новый ХранилищеЗначения(Настройки);
	Константы.CRM_ПубличныеПочтовыеДомены.Установить(ХранилищеНастроек);
	
КонецПроцедуры // ЗаполнитьСписокПубличныхПочтовыхДоменов()

#КонецОбласти

#Область ПереходНаВерсиюПроф

// Обработчик перехода на версию ПРОФ.
//
Процедура ПерейтиСБазовойВерсииНаПРОФ() Экспорт
	
	УстановитьКонстантыБазовойВерсии();
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

#КонецОбласти

#Область ВызываемыеПриКаждомОбновлении

// Заполняет ПВХ CRM_ОбъектыЖурналаДокументов
//
Процедура ЗаполнитьПроверитьПВХОбъектыЖурнала(Параметры) Экспорт
	CRM_КлиентыСервер.ЗаполнитьПроверитьПВХОбъектыЖурнала();
КонецПроцедуры

// Обновляет значение константы CRM_ЭтоДемоБаза
//
Процедура ОбновитьКонстантуЭтоДемоБаза(Параметры = Неопределено) Экспорт
	
	Если Параметры <> Неопределено И Не Параметры.МонопольныйРежим Тогда
		Параметры.МонопольныйРежим = Истина;
		Возврат;
	КонецЕсли;
	
	Если CRM_ОбщегоНазначенияСервер.ЭтоДемоБаза() Тогда
		Константы.CRM_ЭтоДемоБаза.Установить(Истина);
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM()
			И ЦентрМониторинга.ИдентификаторИнформационнойБазы() = "f3d47f7a-6280-467d-ad04-087f7db196ea" Тогда
			
			CRM_ЦентрМониторингаВызовСервера.ПараметрыЦентраМониторингаИзменитьИдентификаторИнформационнойБазы();
			
		ИначеЕсли (ВРег(CRM_ОбщегоНазначенияПовтИсп.ПолучитьИмяКонфигурации()) = ВРег("УТиВсК")
			Или ВРег(CRM_ОбщегоНазначенияПовтИсп.ПолучитьИмяКонфигурации()) = ВРег("УправлениеТорговлей_CRM_2"))
			И ЦентрМониторинга.ИдентификаторИнформационнойБазы() = "0c7c3eca-3a25-4110-a7f5-3aee85380dae" Тогда
			
			CRM_ЦентрМониторингаВызовСервера.ПараметрыЦентраМониторингаИзменитьИдентификаторИнформационнойБазы();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет создание элементов справочника "МакетыПечатныхФорм" для поставляемых макетов конфигурации.
//
Процедура СоздатьЭлементыСправочникаМакетыПечатныхФорм(Параметры = Неопределено) Экспорт
	
	// 0. Получить список макетов печатных форм, поставляемых конфигурацией.
	МакетыПФ = УправлениеПечатью.МакетыПечатныхФорм();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МакетыПечатныхФорм.CRM_ИмяМакета КАК CRM_ИмяМакета
		|ИЗ
		|	Справочник.МакетыПечатныхФорм КАК МакетыПечатныхФорм
		|ГДЕ
		|	МакетыПечатныхФорм.CRM_ПоставляемыйМакет";
	ПоставляемыеМакеты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("CRM_ИмяМакета");
	
	Для Каждого ОписаниеМакета Из МакетыПФ Цикл
		
		ОбъектМетаданных = ОписаниеМакета.Ключ;
		Если ТипЗнч(ОписаниеМакета.Значение) = Тип("ОбъектМетаданных") Тогда
			ИмяМакетаОбъекта = ОписаниеМакета.Значение.ПолноеИмя() + "." + ОбъектМетаданных.Имя;
		Иначе
			ИмяМакетаОбъекта = "ОбщийМакет." + ОбъектМетаданных.Имя;
		КонецЕсли;
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
		НайденныйМакет = ПоставляемыеМакеты.Найти(ИмяМакетаОбъекта);
		
		Если НайденныйМакет <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВладелецМакета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОписаниеМакета.Значение, Ложь);
		ДанныеМакета = МодульУправлениеПечатью.МакетПечатнойФормы(ИмяМакетаОбъекта);
		АдресМакетаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДанныеМакета);
		МодульCRMУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеПечатью");
		
		ОписаниеМакета = МодульCRMУправлениеПечатью.ОписаниеМакета();
		ОписаниеМакета.ИмяОбъектаМетаданныхМакета = "";
		ОписаниеМакета.АдресМакетаВоВременномХранилище = АдресМакетаВоВременномХранилище;
		ОписаниеМакета.КодЯзыка = "";
		ОписаниеМакета.Наименование = ОбъектМетаданных.Синоним;
		ОписаниеМакета.Ссылка = Справочники.МакетыПечатныхФорм.ПустаяСсылка();
		ОписаниеМакета.ТипМакета = ТипМакета(ДанныеМакета);
		ОписаниеМакета.CRM_ИмяМакета = ИмяМакетаОбъекта;
		ОписаниеМакета.CRM_ПоставляемыйМакет = Истина;
		ОписаниеМакета.Используется = Истина;
		
		МассивИсточники = Новый Массив;
		МассивИсточники.Добавить(ВладелецМакета);
		
		ОписаниеМакета.ИсточникиДанных = МассивИсточники;
		
		ИдентификаторМакета = МодульCRMУправлениеПечатью.ЗаписатьМакет(ОписаниеМакета);
		
		// Заполнить Условия видимости для интересов с типом "Обращение"
		МакетСсылка = Справочники.МакетыПечатныхФорм.НайтиПоРеквизиту("CRM_ИмяМакета", ИдентификаторМакета);
		Если ВладелецМакета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.CRM_Интерес", Ложь) Тогда
			МакетОбъект = МакетСсылка.ПолучитьОбъект();
			ЗаполнитьУсловияВидимостиВПоддержке(МакетОбъект, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	// 1. Заполнить Условия видимости поставляемых макетов печати
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МакетыПечатныхФорм.Ссылка КАК Ссылка,
		|	МакетыПечатныхФорм.УсловиеВидимости КАК УсловиеВидимости
		|ИЗ
		|	Справочник.МакетыПечатныхФорм КАК МакетыПечатныхФорм
		|ГДЕ
		|	МакетыПечатныхФорм.ИсточникДанных = &ИсточникДанных
		|	И МакетыПечатныхФорм.CRM_ПоставляемыйМакет";
	
	Запрос.УстановитьПараметр("ИсточникДанных",
		 ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.CRM_Интерес",
		 Ложь));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЭлементОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьУсловияВидимостиВПоддержке(ЭлементОбъект);
	КонецЦикла;
	
	// 2. Получить список внешних макетов (не поставляемых), для которых не создан макет печати в справочнике "МакетыПечатныхФорм".
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПользовательскиеМакетыПечати.ИмяМакета КАК ИмяМакета,
		|	ПользовательскиеМакетыПечати.Объект КАК Объект,
		|	ПользовательскиеМакетыПечати.Макет КАК Макет,
		|	ПользовательскиеМакетыПечати.Использование КАК Использование,
		|	ВЫБОР
		|		КОГДА ИдентификаторыОбъектовМетаданных.Ссылка ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|					КОГДА ИдентификаторыОбъектовРасширений.Ссылка ЕСТЬ NULL
		|						ТОГДА ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка)
		|					ИНАЧЕ ИдентификаторыОбъектовРасширений.Ссылка
		|				КОНЕЦ
		|		ИНАЧЕ ИдентификаторыОбъектовМетаданных.Ссылка
		|	КОНЕЦ КАК Владелец,
		|	ПользовательскиеМакетыПечати.CRM_Представление КАК CRM_Представление,
		|	ПользовательскиеМакетыПечати.CRM_ВнешнийМакет КАК CRM_ВнешнийМакет
		|ИЗ
		|	РегистрСведений.ПользовательскиеМакетыПечати КАК ПользовательскиеМакетыПечати
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МакетыПечатныхФорм КАК МакетыПечатныхФорм
		|		ПО ПользовательскиеМакетыПечати.CRM_Представление = МакетыПечатныхФорм.Наименование
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|		ПО ПользовательскиеМакетыПечати.Объект = ИдентификаторыОбъектовМетаданных.ПолноеИмя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовРасширений КАК ИдентификаторыОбъектовРасширений
		|		ПО ПользовательскиеМакетыПечати.Объект = ИдентификаторыОбъектовРасширений.ПолноеИмя
		|ГДЕ
		|	МакетыПечатныхФорм.Ссылка ЕСТЬ NULL
		|	И ПользовательскиеМакетыПечати.CRM_ВнешнийМакет";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		// 3. Создать элемент справочника "МакетыПечатныхФорм"
		МакетПечатнойФормы = Выборка.Макет.Получить();
		АдресМакетаВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетПечатнойФормы);
		
		ОписаниеМакета = CRM_УправлениеПечатью.ОписаниеМакета();
		ОписаниеМакета.АдресМакетаВоВременномХранилище = АдресМакетаВоВременномХранилище;
		ОписаниеМакета.КодЯзыка = "";
		ОписаниеМакета.Наименование = Выборка.CRM_Представление;
		ОписаниеМакета.Ссылка = Справочники.МакетыПечатныхФорм.ПустаяСсылка();
		ОписаниеМакета.ТипМакета = ТипМакета(МакетПечатнойФормы);
		ОписаниеМакета.CRM_ИмяМакета = Выборка.ИмяМакета;
		ОписаниеМакета.CRM_ПоставляемыйМакет = Ложь;
		ОписаниеМакета.Используется = Выборка.Использование;
		
		МассивИсточники = Новый Массив;
		МассивИсточники.Добавить(Выборка.Владелец);
		
		ОписаниеМакета.ИсточникиДанных = МассивИсточники;
		
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
		ИдентификаторМакета = МодульУправлениеПечатью.ЗаписатьМакет(ОписаниеМакета);
		
		// Заполнить Условия видимости для интересов с типом "Обращение"
		МакетСсылка = МодульУправлениеПечатью.СсылкаМакета(ИдентификаторМакета);
		Если МакетСсылка.ИсточникДанных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.CRM_Интерес", Ложь) Тогда
			МакетОбъект = МакетСсылка.ПолучитьОбъект();
			ЗаполнитьУсловияВидимостиВПоддержке(МакетОбъект, Истина);
		КонецЕсли;
		
		// 4. Удалить из регистра сведений.
		ПользовательскиеМакетыМенеджер = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьМенеджерЗаписи();
		ПользовательскиеМакетыМенеджер.ИмяМакета = Выборка.ИмяМакета;
		ПользовательскиеМакетыМенеджер.Объект    = Выборка.Объект;
		ПользовательскиеМакетыМенеджер.Прочитать();
		
		Если ПользовательскиеМакетыМенеджер.Выбран() Тогда
			ПользовательскиеМакетыМенеджер.Удалить();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьУсловияВидимостиВПоддержке(МакетОбъект, ТребуетсяЗаполнение = Ложь)
	
	МассивУсловий = МакетОбъект.УсловиеВидимости.Получить();
	Если МассивУсловий = Неопределено Тогда
		МассивУсловий = Новый Массив;
	КонецЕсли;
	
	// Удаление сатарого условия отображения печатных форм для документов поддержки
	ОставленныеУсловия = Новый Массив;
	Для Каждого ТекУсловие Из МассивУсловий Цикл
		Если ТекУсловие.Реквизит = "ТипОбращения"
			И ТекУсловие.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно
			И ТекУсловие.Значение = Справочники.CRM_ТипыОбращений.Обращение Тогда
			
			ТребуетсяЗаполнение = Истина;
			Продолжить;
		КонецЕсли;
		
		Если ТекУсловие.Реквизит = "ЭтоПоддержка"
			И ТекУсловие.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
			И ТекУсловие.Значение = Ложь Тогда
			
			ТребуетсяЗаполнение = Ложь;
		КонецЕсли;
		
		ОставленныеУсловия.Добавить(ТекУсловие);
	КонецЦикла;
	
	МассивУсловий = ОставленныеУсловия;
	
	Если ТребуетсяЗаполнение Тогда
		ОписаниеУсловия = Новый Структура();
		ОписаниеУсловия.Вставить("Реквизит", "ЭтоПоддержка");
		ОписаниеУсловия.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		ОписаниеУсловия.Вставить("Значение", Ложь);
		
		МассивУсловий.Добавить(ОписаниеУсловия);
	КонецЕсли;
	
	МакетОбъект.УсловиеВидимости = Новый ХранилищеЗначения(МассивУсловий, Новый СжатиеДанных(9));
	МакетОбъект.Записать();
	
КонецПроцедуры

// Функция возвращает тип макета печатной формы.
//
// Параметры:
//  МакетПечатнойФормы	 - ТабличныйДокумент, ТекстовыйДокумент, ДвоичныеДанные	 - Макет печатной формы.
// 
// Возвращаемое значение:
//   - Строка
//
Функция ТипМакета(МакетПечатнойФормы)
	
	ТипМакета = Неопределено;
	
	Если ТипЗнч(МакетПечатнойФормы) = Тип("ТабличныйДокумент") Тогда
		ТипМакета = "MXL";
	ИначеЕсли ТипЗнч(МакетПечатнойФормы) = Тип("ТекстовыйДокумент") Тогда
		ТипМакета = "HTML";
	ИначеЕсли ТипЗнч(МакетПечатнойФормы) = Тип("ДвоичныеДанные") Тогда
		ТипМакета = ВРег(УправлениеПечатьюСлужебный.ОпределитьРасширениеФайлаДанныхПоСигнатуре(МакетПечатнойФормы));
	КонецЕсли;
	
	Возврат ТипМакета;
	
КонецФункции

// Заполняет ПВХ CRM_ВидыОбъектовБизнесПроцессов
//
// Параметры:
//  Параметры	 - Структура	 - Параметры процедуры.
//
Процедура ЗаполнитьПроверитьПВХВидыОбъектовБизнесПроцессов(Параметры) Экспорт
	CRM_ВоронкиПродажСервер.ЗаполнитьПроверитьПВХВидыОбъектовБизнесПроцессов();
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_1_26_11

Процедура CRM_ВидыОбъектовБизнесПроцессовОбработтатьДанныеДляПереходаНаВерсию_3_1_26_11(Параметры) Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс"));
	МассивТипов.Добавить(Тип("ДокументСсылка.CRM_Взаимодействие"));
	МассивТипов.Добавить(Тип("ДокументСсылка.CRM_Заявка"));
	МассивТипов.Добавить(Тип("ДокументСсылка.CRM_ОтчетОРаботе"));
	МассивТипов.Добавить(Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем"));
	//МассивТипов.Добавить(Тип("ДокументСсылка.CRM_СчетНаОплатуПокупателю")); // +CRM_Модуль
	МассивТипов.Добавить(Тип("ДокументСсылка.CRM_Телемаркетинг"));
	МассивТипов.Добавить(Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту"));
	МассивТипов.Добавить(Тип("ДокументСсылка.СообщениеSMS"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ТелефонныйЗвонок"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
	МассивТипов.Добавить(Тип("СправочникСсылка.МаркетинговыеМероприятия"));
	
	// +CRM_Модуль	
	МассивТипов.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказКлиента"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств"));
	МассивТипов.Добавить(Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Претензии"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	МассивТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	МассивТипов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	МассивТипов.Добавить(Тип("СправочникСсылка.СделкиСКлиентами"));
	МассивТипов.Добавить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	МассивТипов.Добавить(Тип("ДокументСсылка.СчетНаОплатуКлиенту"));
	МассивТипов.Добавить(Тип("ДокументСсылка.СчетФактураВыданный"));
	// -CRM_Модуль
	
	ЗапросТочкаМаршрута = Новый Запрос;
	ЗапросТочкаМаршрута.Текст = 
	"ВЫБРАТЬ
	|	CRM_ВидыОбъектовБизнесПроцессов.Ссылка КАК Ссылка,
	|	CRM_ВидыОбъектовБизнесПроцессов.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов КАК CRM_ВидыОбъектовБизнесПроцессов
	|ГДЕ
	|	CRM_ВидыОбъектовБизнесПроцессов.ПометкаУдаления";
	
	РезультатЗапроса = ЗапросТочкаМаршрута.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Для Каждого ТекТип Из МассивТипов Цикл
			Если Выборка.ТипЗначения.СодержитТип(ТекТип) Тогда
				ОбъектПВХ = Выборка.Ссылка.ПолучитьОбъект();
				ОбъектПВХ.ПометкаУдаления = Ложь;
				ОбъектПВХ.Записать();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_1_26_11

#Область Обновление_3_1_26_12

Процедура ЗаполнитьНачальныеНастройкиБазыЗнаний() Экспорт
	
	Константы.CRM_ИспользоватьСтатусыОтветовБазыЗнаний.Установить(Истина);
	Константы.CRM_ИспользоватьВариантыОтветов.Установить(Истина);
	
КонецПроцедуры

#КонецОбласти // Обновление_3_1_26_12

#Область Обновление_3_1_26_15

Процедура ЗарегистрироватьВариантАвтосозданияКлиентов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_ИсточникиПолученияЛидов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_ИсточникиПолученияЛидов КАК CRM_ИсточникиПолученияЛидов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_ПравилаОбработкиОбращений.Ссылка
	|ИЗ
	|	Справочник.CRM_ПравилаОбработкиОбращений КАК CRM_ПравилаОбработкиОбращений
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_УчетныеЗаписиМессенджеров.Ссылка
	|ИЗ
	|	Справочник.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты";
	
	РезультатЗапросаТаблица = Запрос.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РезультатЗапросаТаблица.ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Функция ВариантАвтосозданияКлиентов(СоздаватьКлиентов)
	
	Если СоздаватьКлиентов Тогда
		Возврат Перечисления.CRM_ВариантыАвтосозданияКлиентов.СоздаватьКлиента;
	КонецЕсли;
	
	CRM_ИспользоватьПотенциальныхКлиентов = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПотенциальныхКлиентов");
	Если CRM_ИспользоватьПотенциальныхКлиентов Тогда
		Возврат Перечисления.CRM_ВариантыАвтосозданияКлиентов.СоздаватьПК;
	Иначе
		Возврат Перечисления.CRM_ВариантыАвтосозданияКлиентов.НеСоздавать;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьВариантАвтосозданияКлиентов(Параметры) Экспорт
	
	НастройкиСозданияКлиентов = Константы.CRM_НастройкиСозданияКлиентовПриЗвонке.Получить().Получить();
	Если НастройкиСозданияКлиентов <> Неопределено Тогда
		Если НастройкиСозданияКлиентов.Свойство("CRM_СоздаватьПартнера") Тогда
			НастройкиСозданияКлиентов.Вставить("CRM_ВариантАвтосозданияКлиентов",
				 ВариантАвтосозданияКлиентов(НастройкиСозданияКлиентов.CRM_СоздаватьПартнера));
			Константы.CRM_НастройкиСозданияКлиентовПриЗвонке.Установить(Новый ХранилищеЗначения(НастройкиСозданияКлиентов));
		КонецЕсли;
	КонецЕсли;
	
	МассивСправочников = Новый Массив;
	МассивСправочников.Добавить("Справочник.CRM_ИсточникиПолученияЛидов");
	МассивСправочников.Добавить("Справочник.CRM_ПравилаОбработкиОбращений");
	МассивСправочников.Добавить("Справочник.CRM_УчетныеЗаписиМессенджеров");
	МассивСправочников.Добавить("Справочник.УчетныеЗаписиЭлектроннойПочты");
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для Каждого ИмяСправочника Из МассивСправочников Цикл
		
		Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ИмяСправочника);	
		
		Пока Выборка.Следующий() Цикл
			
			Попытка
				
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				СправочникОбъект.CRM_ВариантАвтосозданияКлиентов =
					ВариантАвтосозданияКлиентов(Выборка.Ссылка.CRM_СоздаватьПартнера);
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
				
				ОбъектовОбработано = ОбъектовОбработано + 1;
				
			Исключение
				
				// Если не удалось обработать объект, повторяем попытку снова.
				ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
				
				ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось заполнить вариант автосоздания клиента в объекте: %1 по причине:
						|%2'"), 
						Выборка.Ссылка, ТекстОшибки);
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					 УровеньЖурналаРегистрации.Предупреждение,
					, Выборка.Ссылка, ТекстСообщения);
			КонецПопытки;
			
		КонецЦикла;
	
	КонецЦикла;
	
	ОбработкаЗавершена = Истина;
	Для Каждого ИмяСправочника Из МассивСправочников Цикл
		Если Не ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ИмяСправочника) Тогда
			ОбработкаЗавершена = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре CRM_ОбновлениеИнформационнойБазы.ЗаполнитьВариантАвтосозданияКлиентов не удалось обработать некоторые объекты (пропущены): %1'"), 
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			 УровеньЖурналаРегистрации.Информация,
			, ,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Процедура CRM_ОбновлениеИнформационнойБазы.ЗаполнитьВариантАвтосозданияКлиентов обработала очередную порцию объектов: %1'"),
					ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_1_26_15

#Область Обновление_3_1_26_17 

Процедура УстановитьЗначениеКонстантыСрокАктуальностиНапоминанийПоУмолчанию() Экспорт
	
	Константы.CRM_СрокАктуальностиНапоминанийПоУмолчанию.Установить(7);
	
КонецПроцедуры

Процедура УстановитьЗначениеКонстантыПоказыватьНапоминания() Экспорт
	
	Константы.CRM_СпособОтображенияНапоминаний.Установить(Перечисления.CRM_ВариантыОтображенияНапоминаний.ВОтдельномОкне);
	
КонецПроцедуры

Процедура НастроитьРегламентноеЗаданиеУдалениеНеактуальныхНапоминаний() Экспорт

	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Метаданные", Метаданные.РегламентныеЗадания.CRM_УдалениеНеактуальныхНапоминаний);
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыПоиска);

	Для Каждого Задание Из Задания Цикл
		ПараметрыЗадания = Новый Структура("Использование", 
		ПолучитьФункциональнуюОпцию("CRM_ИспользоватьНапоминанияПользователя"));
		
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти // Обновление_3_1_26_17

#Область Обновление_3_1_26_18

Процедура ЗаполнитьАвтотекстТриггераОтправкиСообщенияВМессенджер(Параметры) Экспорт
	
	// BSLLS:Typo-off
	Макет			= Справочники.CRM_ШаблоныАвтотекста.ПолучитьМакет("АвтотекстМессенджера");
	// BSLLS:Typo-on
	
	ИдентификаторОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.CRM_СообщениеМессенджера);
	
	ГруппаШаблоновОбъект = Справочники.CRM_ШаблоныАвтотекста.АвтотекстМессенджера.ПолучитьОбъект();
	ГруппаШаблоновОбъект.ИдентификаторОбъекта = ИдентификаторОбъекта;
	ГруппаШаблоновОбъект.Записать();
	
	Выполнять	= Истина;
	НомерСтроки	= 1;
	
	Пока Выполнять Цикл
		НомерСтроки = НомерСтроки + 1;
		Если СокрЛП(Макет.Область(НомерСтроки, 1).Параметр) = "" Тогда
			Прервать;
		КонецЕсли;
		
		Наименование	= СокрЛП(Макет.Область(НомерСтроки, 1).Параметр);
		Представление	= СокрЛП(Макет.Область(НомерСтроки, 2).Параметр);
		Действие		= СокрЛП(Макет.Область(НомерСтроки, 3).Параметр);
		Родитель		= СокрЛП(Макет.Область(НомерСтроки, 4).Параметр);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_ШаблоныАвтотекста.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_ШаблоныАвтотекста КАК CRM_ШаблоныАвтотекста
		|ГДЕ
		|	CRM_ШаблоныАвтотекста.ИдентификаторОбъекта = &ИдентификаторОбъекта
		|	И CRM_ШаблоныАвтотекста.ПредставлениеШаблона = &Представление";
		
		Запрос.УстановитьПараметр("Представление",			Представление);
		Запрос.УстановитьПараметр("ИдентификаторОбъекта",	ИдентификаторОбъекта);
		
		Выборка = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапрос(Запрос).Выбрать();
		
		Если Выборка.Количество() = 0 Тогда
			СпрОбъект						= Справочники.CRM_ШаблоныАвтотекста.СоздатьЭлемент();
			СпрОбъект.Действие				= Действие;
			СпрОбъект.ПредставлениеШаблона	= Представление;
			СпрОбъект.Наименование			= Наименование;
			СпрОбъект.ИдентификаторОбъекта	= ИдентификаторОбъекта;
			СпрОбъект.Родитель				= Справочники.CRM_ШаблоныАвтотекста[Родитель];
			СпрОбъект.ИзМакета				= Истина;
			
			СпрОбъект.УстановитьНовыйКод();
			
			СпрОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры // ЗаполнитьАвтотекстТриггераОтправкиСообщенияВМессенджер()

#КонецОбласти // Обновление_3_1_26_18

#Область Обновление_3_1_26_20

Процедура ОбновитьЦветаТегов(Параметры) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	CRM_Теги.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_Теги КАК CRM_Теги
		|ГДЕ
		|	CRM_Теги.ЦветПредставление = """"";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТегОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ТегОбъект.ЦветИндекс = 25;
		ТегОбъект.Записать();
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура УдалитьЛишниеЗаписиРегистраСостоянияВоронкиПродаж(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_СостоянияВоронкиПродаж.Объект КАК ОбъектСостояния,
		|	ЕСТЬNULL(ЗадачаИсполнителя.Ссылка, НЕОПРЕДЕЛЕНО) КАК ЗадачаИсполнителя,
		|	CRM_СостоянияВоронкиПродаж.Этап КАК Этап,
		|	CRM_СостоянияВоронкиПродаж.СостояниеЭтапа КАК СостояниеЭтапа
		|ИЗ
		|	РегистрСведений.CRM_СостоянияВоронкиПродаж КАК CRM_СостоянияВоронкиПродаж
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО CRM_СостоянияВоронкиПродаж.Объект = ЗадачаИсполнителя.БизнесПроцесс
		|ГДЕ
		|	НЕ ТИПЗНАЧЕНИЯ(CRM_СостоянияВоронкиПродаж.Объект.Ссылка) = ТИП(Документ.CRM_Интерес)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.ЗадачаИсполнителя = Неопределено Тогда
			ОбъектПроверки = Выборка.ЗадачаИсполнителя;
		Иначе
			ОбъектПроверки = Выборка.ОбъектСостояния;
		КонецЕсли;
		
		Если Не CRM_ВоронкиПродажПовтИсп.ОбъектВключенВЭтапВоронки(ОбъектПроверки) Тогда
			
			НаборЗаписей = РегистрыСведений.CRM_СостоянияВоронкиПродаж.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Выборка.ОбъектСостояния);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_1_26_20

#Область Обновление_3_1_27_11

Процедура НастроитьРегламентноеЗаданиеПолучениеИОтправкаЭлектронныхПисем() Экспорт

	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ПолучениеИОтправкаЭлектронныхПисем);
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыПоиска);
	
	Для Каждого Задание Из Задания Цикл
		ПараметрыЗадания = Новый Структура("Использование", ПолучитьФункциональнуюОпцию("ИспользоватьПочтовыйКлиент"));
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
	КонецЦикла;

КонецПроцедуры
#КонецОбласти // Обновление_3_1_27_11

#Область Обновление_3_1_28_1

Процедура НастроитьСрокЖизниОбращенийПоУмолчанию() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ИсточникиПолученияЛидов.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_ИсточникиПолученияЛидов КАК CRM_ИсточникиПолученияЛидов
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	CRM_УчетныеЗаписиМессенджеров.Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	УчетныеЗаписиЭлектроннойПочты.Ссылка
	                      |ИЗ
	                      |	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			Источник = Выборка.Ссылка.ПолучитьОбъект();
			Источник.CRM_СрокЖизниОбращения = 30;
			Источник.Записать();
		Исключение
			ОписаниеОшибки = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки.Описание);
		КонецПопытки;
	КонецЦикла;
	Константы.CRM_СрокЖизниЗвонков.Установить(30);
	
КонецПроцедуры

#КонецОбласти // Обновление_3_1_28_1

#Область Обновление_3_1_28_7

Процедура ЗаполнитьАвтотекстНомерОбращения(Параметры) Экспорт
	
	// BSLLS:Typo-off
	Макет = Справочники.CRM_ШаблоныАвтотекста.ПолучитьМакет("АвтотекстЭлектронногоПисьма");
	// BSLLS:Typo-on
	
	ИдентификаторОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ЭлектронноеПисьмоИсходящее);
	
	Выполнять	= Истина;
	НомерСтроки	= 1;
	
	Пока Выполнять Цикл
		НомерСтроки = НомерСтроки + 1;
		Если СокрЛП(Макет.Область(НомерСтроки, 1).Параметр) = "" Тогда
			Прервать;
		КонецЕсли;
		
		Наименование	= СокрЛП(Макет.Область(НомерСтроки, 1).Параметр);
		Представление	= СокрЛП(Макет.Область(НомерСтроки, 2).Параметр);
		Действие		= СокрЛП(Макет.Область(НомерСтроки, 3).Параметр);
		Родитель		= СокрЛП(Макет.Область(НомерСтроки, 4).Параметр);
		
		Если НЕ (Представление = "НОМЕР_ОБРАЩЕНИЯ"
			Или	Представление = "НОМЕР_ОБРАЩЕНИЯ_ОТВЕТ") Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_ШаблоныАвтотекста.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_ШаблоныАвтотекста КАК CRM_ШаблоныАвтотекста
		|ГДЕ
		|	CRM_ШаблоныАвтотекста.ИдентификаторОбъекта = &ИдентификаторОбъекта
		|	И CRM_ШаблоныАвтотекста.ПредставлениеШаблона = &Представление";
		
		Запрос.УстановитьПараметр("Представление", Представление);
		Запрос.УстановитьПараметр("ИдентификаторОбъекта", ИдентификаторОбъекта);
		
		Выборка = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапрос(Запрос).Выбрать();
		
		Если Выборка.Количество() = 0 Тогда
			СпрОбъект						= Справочники.CRM_ШаблоныАвтотекста.СоздатьЭлемент();
			СпрОбъект.Действие				= Действие;
			СпрОбъект.ПредставлениеШаблона	= Представление;
			СпрОбъект.Наименование			= Наименование;
			СпрОбъект.ИдентификаторОбъекта	= ИдентификаторОбъекта;
			СпрОбъект.Родитель				= Справочники.CRM_ШаблоныАвтотекста.АвтотекстЭлектронногоПисьма;
			СпрОбъект.ИзМакета				= Истина;
			
			СпрОбъект.УстановитьНовыйКод();
			
			СпрОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры // ЗаполнитьАвтотекстТриггераОтправкиСообщенияВМессенджер()

#КонецОбласти // Обновление_3_1_28_7

#Область Обновление_3_1_28_10

Процедура ЗаполнитьМетодГруппировкиЗначенийШаблоновПоказателей(Параметры) Экспорт
	
	ВыборкаШаблонов = Справочники.CRM_ШаблоныКлючевыхПоказателей.Выбрать();
	
	Пока ВыборкаШаблонов.Следующий() Цикл
		Если ВыборкаШаблонов.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		ШаблонОбъект = ВыборкаШаблонов.ПолучитьОбъект();
		
		Если ВыборкаШаблонов.Ссылка = Справочники.CRM_ШаблоныКлючевыхПоказателей.КасанияНаОдногоКлиента
				Или ВыборкаШаблонов.Ссылка = Справочники.CRM_ШаблоныКлючевыхПоказателей.КачествоКлиентскойБазы Тогда
			ШаблонОбъект.МетодГруппировкиЗначений = Перечисления.CRM_МетодыГруппировкиЗначенийПоказателей.Среднее;
		Иначе
			ШаблонОбъект.МетодГруппировкиЗначений = Перечисления.CRM_МетодыГруппировкиЗначенийПоказателей.Сумма;
		КонецЕсли;
		
		Попытка
			ШаблонОбъект.Записать();
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры // ЗаполнитьМетодГруппировкиЗначенийШаблоновПоказателей()

#КонецОбласти // Обновление_3_1_28_10

#Область Обновление_3_1_28_11

Процедура ИзменитьЗапросыСхемКомпоновкиДанныхПоказателей() Экспорт
	
	ВыборкаЭлементовСтатусов = Справочники.CRM_СтатусыРаботыСКлиентом.Выбрать();
	ПредопределенныйЭлементНеРаботаем = Неопределено;
	
	Пока ВыборкаЭлементовСтатусов.Следующий() Цикл
		Объект = ВыборкаЭлементовСтатусов.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(Объект.ИмяПредопределенныхДанных) Тогда
			Если Объект.ПометкаУдаления Тогда
				Объект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			
			// Если элемент "Не работаем".
			Если Объект.ИмяПредопределенныхДанных = "#6c9cedab-36c0-43b0-8c19-aaf2e1283534" Тогда
				ПредопределенныйЭлементНеРаботаем = Объект.Ссылка;
			КонецЕсли;
			
			Объект.ИмяПредопределенныхДанных = "";
			Объект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	CRM_ШаблоныКлючевыхПоказателей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_ШаблоныКлючевыхПоказателей КАК CRM_ШаблоныКлючевыхПоказателей
	|ГДЕ
	|	CRM_ШаблоныКлючевыхПоказателей.ЭтоГруппа = ЛОЖЬ
	|	И CRM_ШаблоныКлючевыхПоказателей.ПометкаУдаления = ЛОЖЬ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ВыборкаШаблонов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаШаблонов.Следующий() Цикл
		ОбъектШаблона = ВыборкаШаблонов.Ссылка.ПолучитьОбъект();
		
		СхемаКомпоновкиДанных = ОбъектШаблона.ХранилищеСхемыКомпоновкиДанных.Получить();
		
		Если СхемаКомпоновкиДанных = Неопределено
				Или ТипЗнч(СхемаКомпоновкиДанных) <> Тип("СхемаКомпоновкиДанных")
				Или СхемаКомпоновкиДанных.ИсточникиДанных.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекущийПараметрЗапроса Из СхемаКомпоновкиДанных.Параметры Цикл
			Если ТекущийПараметрЗапроса.Имя = "НачалоПериода" Или ТекущийПараметрЗапроса.Имя = "КонецПериода"
					Или ТекущийПараметрЗапроса.Имя = "Показатель" Или ТекущийПараметрЗапроса.Имя = "Менеджеры"
					Или ТекущийПараметрЗапроса.Имя = "Состояние" Или ТекущийПараметрЗапроса.Имя = "ВидСобытия" Тогда
				ТекущийПараметрЗапроса.ОграничениеИспользования = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ТекстЗапросаНабораДанных = СхемаКомпоновкиДанных.НаборыДанных[0].Запрос;
		ЕстьОбращениеКЭлементу = (СтрНайти(ТекстЗапросаНабораДанных, "ЗНАЧЕНИЕ(Справочник.CRM_СтатусыРаботыСКлиентом.НеРаботаем)") > 0);
		
		Если ЕстьОбращениеКЭлементу Тогда
			НовыйПараметр = СхемаКомпоновкиДанных.Параметры.Добавить();
			НовыйПараметр.Имя = "ИсключаемыеСтатусыКлиентов";
			НовыйПараметр.Заголовок = "Исключаемые статусы клиентов";
			НовыйПараметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.CRM_СтатусыРаботыСКлиентом");
			НовыйПараметр.ДоступенСписокЗначений = Истина;
			НовыйПараметр.Значение = Новый СписокЗначений;
			
			Если ПредопределенныйЭлементНеРаботаем <> Неопределено Тогда
				НовыйПараметр.Значение.Добавить(ПредопределенныйЭлементНеРаботаем);
			КонецЕсли;
			
			ТекстЗапросаНабораДанных = СтрЗаменить(
				ТекстЗапросаНабораДанных,
				"= ЗНАЧЕНИЕ(Справочник.CRM_СтатусыРаботыСКлиентом.НеРаботаем)",
				"В (&ИсключаемыеСтатусыКлиентов)");
			
			ТекстЗапросаНабораДанных = СтрЗаменить(
				ТекстЗапросаНабораДанных,
				"<> ЗНАЧЕНИЕ(Справочник.CRM_СтатусыРаботыСКлиентом.НеРаботаем)",
				"НЕ В (&ИсключаемыеСтатусыКлиентов)");
			
			СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = ТекстЗапросаНабораДанных;
		КонецЕсли;
		
		ОбъектШаблона.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		
		Попытка
			ОбъектШаблона.Записать();
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры // ИзменитьЗапросыСхемКомпоновкиДанныхПоказателей()

#КонецОбласти // Обновление_3_1_28_11

#Область Обновление_3_1_28_16

Процедура ЗаполнитьАвтотекстПодписи(Параметры) Экспорт
	
	// BSLLS:Typo-off
	Макет			= Справочники.CRM_ШаблоныАвтотекста.ПолучитьМакет("АвтотекстПодписи");
	// BSLLS:Typo-on
	
	ИдентификаторОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.CRM_Подписи);
	
	ГруппаШаблоновОбъект = Справочники.CRM_ШаблоныАвтотекста.АвтотекстПодписи.ПолучитьОбъект();
	ГруппаШаблоновОбъект.ИдентификаторОбъекта = ИдентификаторОбъекта;
	ГруппаШаблоновОбъект.Записать();
	
	Выполнять	= Истина;
	НомерСтроки	= 1;
	
	Пока Выполнять Цикл
		НомерСтроки = НомерСтроки + 1;
		Если СокрЛП(Макет.Область(НомерСтроки, 1).Параметр) = "" Тогда
			Прервать;
		КонецЕсли;
		
		Наименование	= СокрЛП(Макет.Область(НомерСтроки, 1).Параметр);
		Представление	= СокрЛП(Макет.Область(НомерСтроки, 2).Параметр);
		Действие		= СокрЛП(Макет.Область(НомерСтроки, 3).Параметр);
		Родитель		= СокрЛП(Макет.Область(НомерСтроки, 4).Параметр);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_ШаблоныАвтотекста.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_ШаблоныАвтотекста КАК CRM_ШаблоныАвтотекста
		|ГДЕ
		|	CRM_ШаблоныАвтотекста.ИдентификаторОбъекта = &ИдентификаторОбъекта
		|	И CRM_ШаблоныАвтотекста.ПредставлениеШаблона = &Представление";
		
		Запрос.УстановитьПараметр("Представление",			Представление);
		Запрос.УстановитьПараметр("ИдентификаторОбъекта",	ИдентификаторОбъекта);
		
		Выборка = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапрос(Запрос).Выбрать();
		
		Если Выборка.Количество() = 0 Тогда
			СпрОбъект						= Справочники.CRM_ШаблоныАвтотекста.СоздатьЭлемент();
			СпрОбъект.Действие				= Действие;
			СпрОбъект.ПредставлениеШаблона	= Представление;
			СпрОбъект.Наименование			= Наименование;
			СпрОбъект.ИдентификаторОбъекта	= ИдентификаторОбъекта;
			СпрОбъект.Родитель				= Справочники.CRM_ШаблоныАвтотекста[Родитель];
			СпрОбъект.ИзМакета				= Истина;
			
			СпрОбъект.УстановитьНовыйКод();
			
			СпрОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры // ЗаполнитьАвтотекстПодписи()

#КонецОбласти // Обновление_3_1_28_16

#Область Обновление_3_1_29_2

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию_3_1_29_2(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.УдалитьCRM_Фотография <> ЗНАЧЕНИЕ(Справочник.ПользователиПрисоединенныеФайлы.ПустаяСсылка)
	|			И НЕ Пользователи.УдалитьCRM_Фотография.ПометкаУдаления";
	
	РезультатЗапросаТаблица = Запрос.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РезультатЗапросаТаблица.ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура КонвертироватьФотографиюПользователя(Пользователь) Экспорт
	
	СправочникОбъект = Пользователь.ПолучитьОбъект();
	
	Если СправочникОбъект.Фотография.Получить() <> Неопределено Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
		Возврат;
	КонецЕсли;
	
	Если СправочникОбъект.УдалитьCRM_Фотография.Пустая() Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
		Возврат;
	КонецЕсли;
	
	ОбъектПрисоедФайл = СправочникОбъект.УдалитьCRM_Фотография.ПолучитьОбъект();
	ОбъектПрисоедФайл.УстановитьПометкуУдаления(Истина);
	
	Попытка
		ДанныеФотографии = РаботаСФайлами.ДвоичныеДанныеФайла(СправочникОбъект.УдалитьCRM_Фотография, Истина);
	Исключение
		ДанныеФотографии = Неопределено;
	КонецПопытки;
	
	СправочникОбъект.Фотография = Новый ХранилищеЗначения(ДанныеФотографии);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию_3_1_29_2(Параметры) Экспорт
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
		
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, "Справочник.Пользователи");	
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			КонвертироватьФотографиюПользователя(Выборка.Ссылка);
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			
			// Если не удалось обработать объект, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось конвертировать фотографию пользователя в объекте: %1 по причине:
					|%2'"), Выборка.Ссылка, ТекстОшибки);
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				 УровеньЖурналаРегистрации.Предупреждение,
				, Выборка.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре CRM_ОбновлениеИнформационнойБазы.ОбработатьДанныеДляПереходаНаНовуюВерсию_3_1_29_2 не удалось обработать некоторые объекты (пропущены): %1'"), 
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			 УровеньЖурналаРегистрации.Информация, , ,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Процедура CRM_ОбновлениеИнформационнойБазы.ОбработатьДанныеДляПереходаНаНовуюВерсию_3_1_29_2 обработала очередную порцию объектов: %1'"),
				ОбъектовОбработано));
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов
		+ ОбъектовОбработано;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь,
		"Справочник.Пользователи");
	
КонецПроцедуры

#КонецОбласти // Обновление_3_1_29_2

#Область Обновление_3_1_29_9

Процедура ИзменитьЗапросыСхемКомпоновкиПоказателейТелефонии() Экспорт
	
	ВсеТелефонныеЗвонки = Справочники.CRM_ШаблоныКлючевыхПоказателей.ВсеТелефонныеЗвонки;
	ВходящиеТелефонныеЗвонки = Справочники.CRM_ШаблоныКлючевыхПоказателей.ВходящиеТелефонныеЗвонки;
	ИсходящиеТелефонныеЗвонки = Справочники.CRM_ШаблоныКлючевыхПоказателей.ИсходящиеТелефонныеЗвонки;
	Справочники.CRM_ШаблоныКлючевыхПоказателей.ЗаполнитьПредопределенныеПоказатели(ВсеТелефонныеЗвонки);
	Справочники.CRM_ШаблоныКлючевыхПоказателей.ЗаполнитьПредопределенныеПоказатели(ВходящиеТелефонныеЗвонки);
	Справочники.CRM_ШаблоныКлючевыхПоказателей.ЗаполнитьПредопределенныеПоказатели(ИсходящиеТелефонныеЗвонки);
	
КонецПроцедуры // ИзменитьЗапросыСхемКомпоновкиПоказателейТелефонии()

#КонецОбласти // Обновление_3_1_29_9

#Область Обновление_3_1_29_10

Процедура ИзменитьВариантПоставки() Экспорт
	
	ИмяКонфигурации = CRM_ОбщегоНазначенияПовтИсп.ПолучитьИмяКонфигурации();
	ВариантПоставки = Константы.CRM_ОсновнойВариантПоставки.Получить();
	Если ИмяКонфигурации <> "CRM"
		И ИмяКонфигурации <> "УправлениеТорговлей_CRM_2"
		И ВариантПоставки <> Перечисления.CRM_ВариантыПоставки.КОРП Тогда
		Константы.CRM_ОсновнойВариантПоставки.Установить(Перечисления.CRM_ВариантыПоставки.КОРП);
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_НастройкиПользователей.Пользователь КАК Пользователь,
	                      |	CRM_НастройкиПользователей.Настройка КАК Настройка
	                      |ИЗ
	                      |	РегистрСведений.CRM_НастройкиПользователей КАК CRM_НастройкиПользователей
	                      |ГДЕ
	                      |	CRM_НастройкиПользователей.Значение ССЫЛКА Перечисление.CRM_ВариантыПоставки");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.CRM_НастройкиПользователей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Пользователь = Выборка.Пользователь;
		МенеджерЗаписи.Настройка = Выборка.Настройка;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ИзменитьВариантПоставки()

#КонецОбласти // Обновление_3_1_29_10

#Область Обновление_3_1_29_11

Процедура КонвертироватьВариантНазначенияОтветственного(Параметры) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_НастройкиПользователей.Пользователь КАК Пользователь,
	                      |	CRM_НастройкиПользователей.Настройка КАК Настройка,
	                      |	CRM_НастройкиПользователей.Значение КАК Значение
	                      |ИЗ
	                      |	РегистрСведений.CRM_НастройкиПользователей КАК CRM_НастройкиПользователей
	                      |ГДЕ
	                      |	CRM_НастройкиПользователей.Значение = ИСТИНА
	                      |	И CRM_НастройкиПользователей.Настройка = &Настройка");
	
	Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.CRM_НастройкиПользователей.УдалитьПодставлятьОтветственногоЗаКлиентаВИнтерес);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТаблицаВариантов = Обработки.CRM_МастерРегистрацииОбращения.ВариантыНазначенияОтветственногоПоУмолчанию(Истина);
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("CRM_МастерРегистрацииОбращения.НазначениеОтветственного",
			"МастерРегистрации",
			ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаВариантов),, Выборка.Пользователь);
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры // КонвертироватьВариантНазначенияОтветственного()

#КонецОбласти // Обновление_3_1_29_11

#Область Обновление_3_1_30_6

Процедура ИзменитьСостояниеЗаданияОтправкиОтложенныхСообщений() Экспорт
	
	Если CRM_ОбщегоНазначенияСервер.ФункциональнаяОпция("CRM_ИспользоватьИнтеграциюСМессенджерами") Тогда
		CRM_РаботаСМессенджерамиСервер.ИзменитьИспользованиеЗаданияОтправкиОтложенныхСообщений(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_1_30_6

#Область Обновление_3_1_30_8

Процедура ОчиститьРегистрОбъектыОбновленияАналитикиСПустымиИД(Параметры) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ОбъектыОбновленияАналитики.Объект КАК Объект
	                      |ИЗ
	                      |	РегистрСведений.CRM_ОбъектыОбновленияАналитики КАК CRM_ОбъектыОбновленияАналитики
	                      |	ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Заявка.ДополнительныеРеквизиты КАК Реквизиты
	                      |	ПО Реквизиты.Ссылка = CRM_ОбъектыОбновленияАналитики.Объект
	                      |	И Реквизиты.Свойство = &Свойство_Идентификатор
	                      |ГДЕ
	                      |	Реквизиты.Значение ЕСТЬ NULL");
	Свойство_Идентификатор = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",
		 "ИДСквознаяАналитика");
	Запрос.УстановитьПараметр("Свойство_Идентификатор", Свойство_Идентификатор);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.CRM_ОбъектыОбновленияАналитики.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры // КонвертироватьВариантНазначенияОтветственного()

#КонецОбласти // Обновление_3_1_30_8

#Область Обновление_3_1_30_9

Процедура ПерезаполнитьНастройкиЭтапов(Параметры) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	*,
	                      |	CRM_НастройкиЭтапов.ТочкаМаршрута.Имя КАК Имя,
	                      |	CRM_НастройкиЭтапов.ТочкаМаршрута.Вид КАК Вид
	                      |ИЗ
	                      |	РегистрСведений.CRM_НастройкиЭтапов КАК CRM_НастройкиЭтапов
	                      |ИТОГИ ПО
	                      |	Объект");
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаКарты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКарты.Следующий() Цикл
		
		Если Не ТипЗнч(ВыборкаКарты.Объект) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
			Продолжить;
		КонецЕсли;
		
		НаборОбъектов = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
		НаборОбъектов.Отбор.Объект.Установить(ВыборкаКарты.Объект);
		НаборОбъектов.Прочитать();
		НаборОбъектов.Очистить();
		
		СхемаМаршрута = Неопределено;
		Если ВыборкаКарты.Объект.Редактируется Тогда
			СхемаМаршрута = ВыборкаКарты.Объект.ГрафическаяСхема.Получить();
		Иначе
			СтрокаТекущейВерсии = ВыборкаКарты.Объект.ВерсииКартыМаршрута.Найти(ВыборкаКарты.Объект.НомерВерсии, "НомерВерсии");
			Если Не СтрокаТекущейВерсии = Неопределено Тогда
				СхемаМаршрута = СтрокаТекущейВерсии.КартаМаршрута.Получить();
			Иначе
				СхемаМаршрута = Справочники.CRM_КартыМаршрутов.ПолучитьМакет("КартаМаршрутаПоУмолчанию");
			КонецЕсли;
		КонецЕсли;
		
		Если СхемаМаршрута = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКВременномуФайлу = ПолучитьИмяВременногоФайла(".grs");
		СхемаМаршрута.Записать(ПутьКВременномуФайлу);
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ПутьКВременномуФайлу, КодировкаТекста.UTF8);
		
		СтруктураДанных = CRM_БизнесПроцессыЭкспортныеМетоды.ПрочитатьГрафическуюСхемуСформироватьДеревоТочек(СхемаМаршрута,
			ТекстовыйДокумент);
		ТаблицаТочек	= СтруктураДанных.ТабТочекМаршрута;
		
		Выборка = ВыборкаКарты.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрокаНабора = НаборОбъектов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНабора, Выборка);
			
			МассивСтрок = ТаблицаТочек.НайтиСтроки(Новый Структура("ИмяЭлемента, ВидЭлемента", Выборка.Имя, Выборка.Вид));
			Если МассивСтрок.Количество() > 0 Тогда
				СтрокаТабМаршрут = МассивСтрок[0];
				НоваяСтрокаНабора.Порядок = СтрокаТабМаршрут.РеквизитДопУпорядочивания;
			КонецЕсли;
		КонецЦикла;
		
		НаборОбъектов.Записать();
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры // ПерезаполнитьНастройкиЭтапов()

#КонецОбласти // Обновление_3_1_30_9

#Область Обновление_3_1_31_14

Процедура ЗаполнитьТипПроцессаКартыМаршрута(Параметры) Экспорт
	
	ПредопределенныйОбъект = Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков.ПолучитьОбъект();
	Если Не ЗначениеЗаполнено(ПредопределенныйОбъект.ТипПроцесса) Тогда
		ПредопределенныйОбъект.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
		ПредопределенныйОбъект.Записать();
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти // Обновление_3_1_31_14

#Область Обновление_3_1_31_15

Процедура CRM_ПоказателиКампанийСверткаЗаписей(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ПоказателиКампаний.ПериодДанных КАК ПериодДанных,
		|	CRM_ПоказателиКампаний.ИсточникиКампаний КАК ИсточникиКампаний,
		|	CRM_ПоказателиКампаний.СценарийАналитики КАК СценарийАналитики,
		|	CRM_ПоказателиКампаний.CRM_Сайт КАК CRM_Сайт,
		|	CRM_ПоказателиКампаний.География КАК География,
		|	CRM_ПоказателиКампаний.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса,
		|	CRM_ПоказателиКампаний.Medium КАК Medium,
		|	CRM_ПоказателиКампаний.Source КАК Source,
		|	CRM_ПоказателиКампаний.Устройства КАК Устройства,
		|	CRM_ПоказателиКампаний.ВремяНаСайте КАК ВремяНаСайте,
		|	CRM_ПоказателиКампаний.CRM_РекламнаяКампания КАК CRM_РекламнаяКампания,
		|	CRM_ПоказателиКампаний.ОбъявлениеРекламнаяКомпания КАК ОбъявлениеРекламнаяКомпания,
		|	CRM_ПоказателиКампаний.URL КАК URL,
		|	CRM_ПоказателиКампаний.ИдентификаторСвязиПоказателей КАК ИдентификаторСвязиПоказателей,
		|	СУММА(CRM_ПоказателиКампаний.Визиты) КАК Визиты,
		|	СУММА(CRM_ПоказателиКампаний.Посетители) КАК Посетители,
		|	СУММА(CRM_ПоказателиКампаний.Отказы) КАК Отказы,
		|	МАКСИМУМ(CRM_ПоказателиКампаний.ГлубинаПросмотра) КАК ГлубинаПросмотра
		|ИЗ
		|	РегистрСведений.CRM_ПоказателиКампаний КАК CRM_ПоказателиКампаний
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_ПоказателиКампаний.ПериодДанных,
		|	CRM_ПоказателиКампаний.ИсточникиКампаний,
		|	CRM_ПоказателиКампаний.СценарийАналитики,
		|	CRM_ПоказателиКампаний.CRM_Сайт,
		|	CRM_ПоказателиКампаний.География,
		|	CRM_ПоказателиКампаний.КаналПервичногоИнтереса,
		|	CRM_ПоказателиКампаний.Medium,
		|	CRM_ПоказателиКампаний.Source,
		|	CRM_ПоказателиКампаний.Устройства,
		|	CRM_ПоказателиКампаний.ВремяНаСайте,
		|	CRM_ПоказателиКампаний.CRM_РекламнаяКампания,
		|	CRM_ПоказателиКампаний.ОбъявлениеРекламнаяКомпания,
		|	CRM_ПоказателиКампаний.URL,
		|	CRM_ПоказателиКампаний.ИдентификаторСвязиПоказателей";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.CRM_ПоказателиКампаний.СоздатьНаборЗаписей();
	НаборЗаписей.Очистить();
	
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура CRM_ИспользуемыеРешенияСверткаЗаписей(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ИспользуемыеРешения.Объект КАК Объект,
		|	CRM_ИспользуемыеРешения.Решение КАК Решение,
		|	CRM_ИспользуемыеРешения.ВыбранныйОтвет КАК ВыбранныйОтвет,
		|	МАКСИМУМ(CRM_ИспользуемыеРешения.Пользователь) КАК Пользователь
		|ИЗ
		|	РегистрСведений.CRM_ИспользуемыеРешения КАК CRM_ИспользуемыеРешения
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_ИспользуемыеРешения.Объект,
		|	CRM_ИспользуемыеРешения.Решение,
		|	CRM_ИспользуемыеРешения.ВыбранныйОтвет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.CRM_ИспользуемыеРешения.СоздатьНаборЗаписей();
	НаборЗаписей.Очистить();
	
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_1_31_15

#Область Обновление_3_1_31_16

Процедура CRM_ВключениеРегламентныхЗаданий(Параметры) Экспорт
	
	// CRM_СтатусыEmailРассылок
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.CRM_СтатусыEmailРассылок);
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ПараметрыЗадания.Вставить("ИмяМетода", Метаданные.РегламентныеЗадания.CRM_СтатусыEmailРассылок.ИмяМетода);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
	Если СписокЗаданий.Количество() = 0 Тогда
		ПараметрыЗадания.Вставить("Использование", Истина);
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		ПараметрыЗадания = Новый Структура("Использование", Истина);
		Для Каждого Задание Из СписокЗаданий Цикл
			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
		КонецЦикла;
	КонецЕсли;

	
	// CRM_РегистрацияПотерянныхОбращений
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.CRM_РегистрацияПотерянныхОбращений);
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ПараметрыЗадания.Вставить("ИмяМетода", Метаданные.РегламентныеЗадания.CRM_РегистрацияПотерянныхОбращений.ИмяМетода);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
	Если СписокЗаданий.Количество() = 0 Тогда
		ПараметрыЗадания.Вставить("Использование", Истина);
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		ПараметрыЗадания = Новый Структура("Использование", Истина);
		Для Каждого Задание Из СписокЗаданий Цикл
			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
		КонецЦикла;
	КонецЕсли;
	
	
	// CRM_ОтправкаОповещенийВМессенджер
	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьОповещенияМессенджер") 
		И ЗначениеЗаполнено(Константы.CRM_УчетнаяЗаписьМессенджераОповещений.Получить()) Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.CRM_ОтправкаОповещенийВМессенджер);
		Если Не ОбщегоНазначения.РазделениеВключено() Тогда
			ПараметрыЗадания.Вставить("ИмяМетода", Метаданные.РегламентныеЗадания.CRM_ОтправкаОповещенийВМессенджер.ИмяМетода);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
		Если СписокЗаданий.Количество() = 0 Тогда
			ПараметрыЗадания.Вставить("Использование", Истина);
			РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		Иначе
			ПараметрыЗадания = Новый Структура("Использование", Истина);
			Для Каждого Задание Из СписокЗаданий Цикл
				РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_1_31_16

#Область Обновление_3_1_31_18

Процедура ОбновитьСправочникБизнесРегионыПоКлассификатору(Параметры) Экспорт
	
	МакетКлассификатор = Справочники.БизнесРегионы.ПолучитьМакет("CRM_Классификатор");
	
	ВозвратнаяСтруктура = ОбщегоНазначения.ПрочитатьXMLВТаблицу(МакетКлассификатор.ПолучитьТекст());
	
	ТаблицаРегионов = ВозвратнаяСтруктура.Данные;
	
	СписокНаименований = Новый СписокЗначений;
	СписокНаименований.Добавить("Луганск");
	СписокНаименований.Добавить("Донецк");
	СписокНаименований.Добавить("Запорожье");
	СписокНаименований.Добавить("Акимовка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БизнесРегионы.Ссылка КАК Ссылка,
		|	БизнесРегионы.CRM_КодПоКлассификатору КАК CRM_КодПоКлассификатору,
		|	БизнесРегионы.Наименование КАК Наименование
		|ИЗ
		|	Справочник.БизнесРегионы КАК БизнесРегионы
		|ГДЕ
		|	БизнесРегионы.Наименование В(&СписокНаименований)";
	
	Запрос.УстановитьПараметр("СписокНаименований", СписокНаименований);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Name", Выборка.Наименование);
		
		НайденныеСтроки = ТаблицаРегионов.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыРегионов = НайденныеСтроки[0];
		
		Платежеспособность = ?(ПустаяСтрока(СтрокаТаблицыРегионов.Solvency),
							   Перечисления.CRM_Платежеспособность.ПустаяСсылка(),
							   Перечисления.CRM_Платежеспособность[СтрокаТаблицыРегионов.Solvency]);
		
		ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ТекущийОбъект.Наименование = СтрокаТаблицыРегионов.Name;
		ТекущийОбъект.CRM_КодПоКлассификатору = Число(СтрокаТаблицыРегионов.Code);
		ТекущийОбъект.CRM_КодСтраны = СтрокаТаблицыРегионов.CountryCode;
		ТекущийОбъект.CRM_КодГорода = СтрокаТаблицыРегионов.SityCode;
		ТекущийОбъект.CRM_ЧисленностьНаселения = СтрокаТаблицыРегионов.Population;
		ТекущийОбъект.CRM_Платежеспособность = Платежеспособность;
		ТекущийОбъект.CRM_ВремяПоГринвичу_GMT = СтрокаТаблицыРегионов.TimeZone;
		Если Число(СтрокаТаблицыРегионов.ParentCode) = 0 Тогда
			ТекущийОбъект.Родитель = Справочники.БизнесРегионы.ПустаяСсылка();
		Иначе
			ТекущийОбъект.Родитель = Справочники.БизнесРегионы.НайтиПоРеквизиту("CRM_КодПоКлассификатору",
				Число(СтрокаТаблицыРегионов.ParentCode));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекущийОбъект.Родитель) Тогда
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Code", СтрокаТаблицыРегионов.ParentCode);
			
			НайденныеСтроки = ТаблицаРегионов.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				НовыйРодитель = НайденныеСтроки[0];
				
				Платежеспособность = ?(ПустаяСтрока(НовыйРодитель.Solvency),
							   Перечисления.CRM_Платежеспособность.ПустаяСсылка(),
							   Перечисления.CRM_Платежеспособность[НовыйРодитель.Solvency]);
				
				РодительОбъект = Справочники.БизнесРегионы.СоздатьЭлемент();
				РодительОбъект.Наименование = НовыйРодитель.Name;
				РодительОбъект.CRM_КодПоКлассификатору = Число(НовыйРодитель.Code);
				РодительОбъект.CRM_КодСтраны = НовыйРодитель.CountryCode;
				РодительОбъект.CRM_КодГорода = НовыйРодитель.SityCode;
				РодительОбъект.CRM_ЧисленностьНаселения = НовыйРодитель.Population;
				РодительОбъект.CRM_Платежеспособность = Платежеспособность;
				РодительОбъект.CRM_ВремяПоГринвичу_GMT = НовыйРодитель.TimeZone;
				Если Число(НовыйРодитель.ParentCode) = 0 Тогда
					РодительОбъект.Родитель = Справочники.БизнесРегионы.ПустаяСсылка();
				Иначе
					РодительОбъект.Родитель = Справочники.БизнесРегионы.НайтиПоРеквизиту("CRM_КодПоКлассификатору",
						Число(НовыйРодитель.ParentCode));
				КонецЕсли;
				
				РодительОбъект.Записать();
				
				ТекущийОбъект.Родитель = РодительОбъект.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		ТекущийОбъект.Записать();
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_1_31_18

#Область Обновление_3_1_31_28

Процедура ОбновитьИсточникиПолученияЛидов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ИсточникиПолученияЛидовТабличнаяЧастьСопоставлениеРеквизитов.Ссылка КАК Ссылка,
		|	CRM_ИсточникиПолученияЛидовТабличнаяЧастьСопоставлениеРеквизитов.Наименование КАК Наименование
		|ИЗ
		|	Справочник.CRM_ИсточникиПолученияЛидов.ТабличнаяЧастьСопоставлениеРеквизитов КАК CRM_ИсточникиПолученияЛидовТабличнаяЧастьСопоставлениеРеквизитов
		|ГДЕ
		|	CRM_ИсточникиПолученияЛидовТабличнаяЧастьСопоставлениеРеквизитов.Наименование = ""visitor_name""
		|	И НЕ CRM_ИсточникиПолученияЛидовТабличнаяЧастьСопоставлениеРеквизитов.РеквизитПользовательский";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЭлементОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СтруктураПоиска = Новый Структура("Наименование, РеквизитПользовательский", Выборка.Наименование, Ложь);
		НайденныеСтроки = ЭлементОбъект.ТабличнаяЧастьСопоставлениеРеквизитов.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			НайденнаяСтрока.РеквизитПоиск     = "ФИО";
			НайденнаяСтрока.РеквизитЗаголовок = "ФИО";
		КонецЕсли;
		
		ЭлементОбъект.Записать();
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_1_31_28

#Область Обновление_3_1_31_29

Процедура ИзменитьЗапросыСхемКомпоновкиДанныхКартыМаршрутов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_КартыМаршрутов.Ссылка КАК КартаМаршрута,
	|	CRM_КартыМаршрутов.ХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
	|	CRM_КартыМаршрутов.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных,
	|	CRM_КартыМаршрутов.ТипПроцесса КАК ТипПроцесса
	|ИЗ
	|	Справочник.CRM_КартыМаршрутов КАК CRM_КартыМаршрутов
	|ГДЕ
	|	НЕ CRM_КартыМаршрутов.ПометкаУдаления
	|	И НЕ CRM_КартыМаршрутов.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmТипыПроцессов.ПроцессОбъекта)
	|	И CRM_КартыМаршрутов.СостояниеПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmСостояниеПроцесса.Действует)
	|	И НЕ CRM_КартыМаршрутов.Ссылка = ЗНАЧЕНИЕ(Справочник.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков)
	|	
	|	УПОРЯДОЧИТЬ ПО
	|	CRM_КартыМаршрутов.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КартаМаршрута = Выборка.КартаМаршрута.ПолучитьОбъект();
		СхемаКомпоновкиДанных = КартаМаршрута.ХранилищеСхемыКомпоновкиДанных.Получить();
		
		Если СхемаКомпоновкиДанных = Неопределено
			Или ТипЗнч(СхемаКомпоновкиДанных) <> Тип("СхемаКомпоновкиДанных")
			Или СхемаКомпоновкиДанных.ИсточникиДанных.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапросаНабораДанных = СхемаКомпоновкиДанных.НаборыДанных[0].Запрос;
		Если СтрНайти(ТекстЗапросаНабораДанных, "Пользователи.CRM_УчаствуетВАнкетировании,") > 0 Тогда
			ТекстЗапросаНабораДанных = СтрЗаменить(ТекстЗапросаНабораДанных, "Пользователи.CRM_УчаствуетВАнкетировании,", "");
			СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = ТекстЗапросаНабораДанных;
		ИначеЕсли СтрНайти(ТекстЗапросаНабораДанных, "Пользователи.CRM_УчаствуетВАнкетировании КАК CRM_УчаствуетВАнкетировании,") > 0 Тогда
			ТекстЗапросаНабораДанных = СтрЗаменить(ТекстЗапросаНабораДанных,
				"Пользователи.CRM_УчаствуетВАнкетировании КАК CRM_УчаствуетВАнкетировании,", "");
			СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = ТекстЗапросаНабораДанных;
		КонецЕсли;
		
		КартаМаршрута.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		
		Попытка
			КартаМаршрута.Записать();
		Исключение
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры // ИзменитьЗапросыСхемКомпоновкиДанныхКартыМаршрутов()

#КонецОбласти // Обновление_3_1_31_29

#Область Обновление_3_1_31_31

Процедура ПеренестиНастройкиВиджетовВВариантыВиджетов() Экспорт
	
	ВыборкаНастроекВиджета = РегистрыСведений.удалитьCRM_НастройкиВиджетов.Выбрать();
	
	Пока ВыборкаНастроекВиджета.Следующий() Цикл
		
		ВариантВиджетаПоказателя = Справочники.CRM_ВариантыВиджетов.СоздатьЭлемент();
		
		// Название виджета.
		ВариантВиджетаПоказателя.Наименование = Строка(ВыборкаНастроекВиджета.Виджет);
		
		// Измерения регистра.
		ВариантВиджетаПоказателя.Автор	= ВыборкаНастроекВиджета.Пользователь;
		ВариантВиджетаПоказателя.Виджет	= ВыборкаНастроекВиджета.Виджет;
		
		// Ресурсы регистра.
		НастройкиВиджета = Справочники.CRM_ВариантыВиджетов.ПолучитьНастройки_КлючевыеПоказатели(
			ВыборкаНастроекВиджета.Виджет);
		
		// Ресурсы регистра.
		НастройкиВиджета.ОтображатьОбщиеРезультаты	= ВыборкаНастроекВиджета.ОтображатьОбщиеРезультаты;
		НастройкиВиджета.ОтображатьПлановыеЗначения	= ВыборкаНастроекВиджета.ОтображатьПлановыеЗначения;
		НастройкиВиджета.ТипАналитики				= ВыборкаНастроекВиджета.ТипАналитики;
		НастройкиВиджета.ЗначениеАналитики			= ВыборкаНастроекВиджета.ЗначениеАналитики;
		
		Если ВыборкаНастроекВиджета.Виджет = Справочники.CRM_Виджеты.ВыполнениеПланаПродаж
				Или ВыборкаНастроекВиджета.Виджет = Справочники.CRM_Виджеты.ВыполнениеПланаПродажКол Тогда
			
			ФильтрыПереопределяемогоВиджета = ВыборкаНастроекВиджета.Фильтры.Получить();
			
			Если ФильтрыПереопределяемогоВиджета <> Неопределено
					И ТипЗнч(ФильтрыПереопределяемогоВиджета) = Тип("Структура") Тогда
				
				ФильтрыПереопределяемогоВиджета.Свойство("ПланПродаж", НастройкиВиджета.ПланПродаж);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Прочее.
		ВариантВиджетаПоказателя.ПериодОбновления	= ВыборкаНастроекВиджета.ПериодОбновления;
		ВариантВиджетаПоказателя.НастройкиВарианта	= Новый ХранилищеЗначения(НастройкиВиджета);
		
		// Служебные флаги.
		ВариантВиджетаПоказателя.Используется		= Истина;
		ВариантВиджетаПоказателя.ТолькоДляАвтора	= Истина;
		
		ВариантВиджетаПоказателя.Записать();
		
		// Пометка использования виджета и фиксация его порядка виджета.
		МенеджерЗаписи = РегистрыСведений.CRM_ПорядокВиджетов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ВариантРаботыВиджетов	= "РабочийСтол";
		МенеджерЗаписи.ВариантВиджета			= ВариантВиджетаПоказателя.Ссылка;
		МенеджерЗаписи.Пользователь				= ВариантВиджетаПоказателя.Автор;
		МенеджерЗаписи.ИндексВертикальный		= ВыборкаНастроекВиджета.ИндексВиджета;
		МенеджерЗаписи.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры // ПеренестиНастройкиВиджетовВВариантыВиджетов()

#КонецОбласти

#КонецОбласти
