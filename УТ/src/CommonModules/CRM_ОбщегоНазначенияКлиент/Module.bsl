
////////////////////////////////////////////////////////////////////////////////
// Общего назначения клиент (CRM)
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// См. ОбщегоНазначенияКлиентПереопределяемый.ПередПериодическойОтправкойДанныхКлиентаНаСервер
Процедура ПередПериодическойОтправкойДанныхКлиентаНаСервер(Параметры) Экспорт
	
	МоментНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Попытка
		CRM_РаботаСМессенджерамиКлиент.ПередПериодическойОтправкойДанныхКлиентаНаСервер(Параметры);
	Исключение
		СерверныеОповещенияКлиент.ОбработатьОшибку(ИнформацияОбОшибке());
	КонецПопытки;
	СерверныеОповещенияКлиент.ДобавитьПоказатель(МоментНачала,
		"CRM_РаботаСМессенджерамиКлиент.ПередПериодическойОтправкойДанныхКлиентаНаСервер");
	
	
КонецПроцедуры

// См. ОбщегоНазначенияКлиентПереопределяемый.ПослеПериодическогоПолученияДанныхКлиентаНаСервере
Процедура ПослеПериодическогоПолученияДанныхКлиентаНаСервере(Результаты) Экспорт
	
	МоментНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Попытка
		CRM_РаботаСМессенджерамиКлиент.ПослеПериодическогоПолученияДанныхКлиентаНаСервере(Результаты);
	Исключение
		СерверныеОповещенияКлиент.ОбработатьОшибку(ИнформацияОбОшибке());
	КонецПопытки;
	СерверныеОповещенияКлиент.ДобавитьПоказатель(МоментНачала,
		"CRM_РаботаСМессенджерамиКлиент.ПослеПериодическогоПолученияДанныхКлиентаНаСервере");
	
КонецПроцедуры

#Область РаботаСПользовательскимиНастройкамиДинамическихСписков
	
// Процедура-обработчик выбора пользовательской настройки списка из подменю.
//
// Параметры:
//  ЭтаФорма						 - ФормаКлиентскогоПриложения	 - Форма
//  СвойстваДинамическогоСписка		 - Структура		 - Структура свойств динамического списка.
//  Команда							 - Строка			 - Команда
//  ОписаниеОповещенияОЗавершении - ОписаниеОповещения - Используется для описания вызова процедуры программного модуля.
//
Процедура ПользовательскиеНастройкиСпискаОбработкаВыбораНастройки(ЭтаФорма,
	 СвойстваДинамическогоСписка, Команда,
	 ОписаниеОповещенияОЗавершении) Экспорт
	ИмяКоманды = Команда.Имя;
	ИмяКоманды = СтрЗаменить(ИмяКоманды, "КомандаПользовательскиеНастройкиСписка_", "");
	ИмяКоманды = СтрЗаменить(ИмяКоманды, "_" + СвойстваДинамическогоСписка.ИмяСписка, "");
	Если ИмяКоманды = "Настройки" Тогда
		ПользовательскиеНастройкиСпискаОткрытьФормуНастроекВсеНастройки(ЭтаФорма,
			 СвойстваДинамическогоСписка,
			 ОписаниеОповещенияОЗавершении);
		Возврат;
	Иначе
		ПризнакИзмененыНастройки = Неопределено;
	КонецЕсли;
	Если ИмяКоманды = "БезНастроек" Тогда
		ИдентификаторНастройки = "";
	Иначе
		ИдентификаторНастройки = СтрЗаменить(ИмяКоманды, "_", "-");
		Попытка
			// BSLLS:UnusedLocalVariable-off
			ТестУникальныйИдентификатор = Новый УникальныйИдентификатор(ИдентификаторНастройки);
			// BSLLS:UnusedLocalVariable-on
		Исключение
			Возврат;
		КонецПопытки;
	КонецЕсли;
	ЭтаФорма[СвойстваДинамическогоСписка.ИмяПеременнойТекущейНастройки] = ИдентификаторНастройки;
	ИмяКнопки = "КнопкаПользовательскиеНастройкиСписка_" + ИмяКоманды + "_" + СвойстваДинамическогоСписка.ИмяСписка;
	ИмяЭлементаПодменю = СвойстваДинамическогоСписка.ИмяЭлементаПодменю;
	ПользовательскиеНастройкиСпискаУстановитьПометкиКнопкамНастроек(ЭтаФорма.Элементы[ИмяЭлементаПодменю].ПодчиненныеЭлементы,
		 ИмяКнопки);
	Если ИмяКоманды = "БезНастроек" Тогда
		ЭтаФорма.Элементы[ИмяЭлементаПодменю].Заголовок = НСтр("ru='Все';en='All'");
	Иначе
		ЗаголовокПодменю = ЭтаФорма.Элементы[ИмяКнопки].Заголовок;
		Если СтрДлина(ЗаголовокПодменю) > 40 Тогда
			ЗаголовокПодменю = Лев(ЗаголовокПодменю, 40 - 3) + "...";
		КонецЕсли;
		ЭтаФорма.Элементы[ИмяЭлементаПодменю].Заголовок = ЗаголовокПодменю;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, ПризнакИзмененыНастройки);
КонецПроцедуры // ПользовательскиеНастройкиСпискаОбработкаВыбораНастройки()

#КонецОбласти 

#Область РаботаСНастройкамиПолейОтображенияСодержания
	
// Процедура вызывается при активизации строки списка для обновления поля отображения содержания.
//
// Параметры:
//  ЭтаФорма						 		 - ФормаКлиентскогоПриложения	 - Форма
//  СсылкаНаОбъект							 - ДокументССылка -  Ссылка на объект.
//  ОграниченияТипов						 - ОписаниеТипов - Ограничение типов. 
//  ИмяГруппыПоляОтображенияСодержания		 - Строка - Имя групппы поля.
//  ИмяРеквизитаПоляОтображенияСодержания	 - Строка - Имя реквизита поля.
//
Процедура НастройкиПолейОтображенияСодержанияПриАктивизацииСтроки(ЭтаФорма,
																СсылкаНаОбъект,
																ОграниченияТипов,
																ИмяГруппыПоляОтображенияСодержания = "ГруппаПолеОтображенияСодержания",
																ИмяРеквизитаПоляОтображенияСодержания = "ПолеОтображениеСодержания") Экспорт
	Попытка
		Если НЕ ЭтаФорма.Элементы[ИмяГруппыПоляОтображенияСодержания].Видимость Тогда
			Возврат;
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;
	Попытка
		// BSLLS:UnusedLocalVariable-off
		ПеременнаяТест = ЭтаФорма[ИмяРеквизитаПоляОтображенияСодержания];
		// BSLLS:UnusedLocalVariable-on
	Исключение
		Возврат;
	КонецПопытки;
	
	ДополнительныеПараметры = Новый Структура("ИдентификаторФормы, ИдентификаторыКартинокПисьма",
		 ЭтаФорма.УникальныйИдентификатор,
		 Новый СписокЗначений);
	Содержание = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьСодержание(СсылкаНаОбъект,
		 ОграниченияТипов,
		 ДополнительныеПараметры);
	Если ЭтаФорма[ИмяРеквизитаПоляОтображенияСодержания] <> Содержание Тогда
		
		ЭтаФорма[ИмяРеквизитаПоляОтображенияСодержания] = Содержание;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, "ИдентификаторыКартинокПисьма") Тогда
			ЭтаФорма["ИдентификаторыКартинокПисьма"].ЗагрузитьЗначения(ДополнительныеПараметры["ИдентификаторыКартинокПисьма"].ВыгрузитьЗначения());
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры // НастройкиПолейОтображенияСодержанияПриАктивизацииСтроки()

// Процедура вызывается по нажатию кнопки показать / скрыть поле отображения содержания.
//
// Параметры:
//  ЭтаФорма										 - ФормаКлиентскогоПриложения	 - Форма
//  ИмяГруппыПоляОтображенияСодержания				 - Строка			 - Имя группы поля отображения содержания.
//  ИмяКнопкиПоказатьСкрытьПолеОтображенияСодержания - Строка			 - Имя кнопки отображения содержания.
//
Процедура НастройкиПолейОтображенияСодержанияПоказатьСкрытьПолеОтображенияСодержания(ЭтаФорма,
	ИмяГруппыПоляОтображенияСодержания = "ГруппаПолеОтображенияСодержания",
	ИмяКнопкиПоказатьСкрытьПолеОтображенияСодержания = "КнопкаПоказатьСкрытьПолеОтображенияСодержания") Экспорт
	
	Кнопка = ЭтаФорма.Элементы.Найти(ИмяКнопкиПоказатьСкрытьПолеОтображенияСодержания);
	Если Кнопка <> Неопределено Тогда
		Кнопка.Пометка = НЕ Кнопка.Пометка;
		ЭтаФорма.Элементы[ИмяГруппыПоляОтображенияСодержания].Видимость = Кнопка.Пометка;
	КонецЕсли;
КонецПроцедуры // НастройкиПолейОтображенияСодержанияПоказатьСкрытьПолеОтображенияСодержания()

// Процедура вызывается из обработчика "ПриНажатии" поля отображения содержания.
//
// Параметры:
//  ДанныеСобытия		 - Структура - Данные события.
//  СтандартнаяОбработка - Булево	 - Флаг стандартной обработки.
//  ОграничениеТипов	 - ОписаниеТипов - Ограничение типов.
//  Объект				 - БизнесПроцессСсылка - Ссылка на объект.
//  ОписаниеОповещения	 - ОписаниеОповещения - Используется для описания вызова процедуры программного модуля.
//
Процедура НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия,
	 СтандартнаяОбработка, ОграничениеТипов = Неопределено, Объект = Неопределено,
	 ОписаниеОповещения = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеСобытия.href) Тогда
		Если СтрНайти(ДанныеСобытия.href, "НастройкаПолейОтображения") > 0 Тогда
			НастройкиПолейОтображенияСодержанияОткрытьФормуНастройки(ОграничениеТипов, Объект, Ложь, ОписаниеОповещения);
		ИначеЕсли СтрНайти(ДанныеСобытия.href, "ЗаполнитьПоУмолчанию") > 0 И Объект <> Неопределено Тогда
			НастройкиПолейОтображенияСодержанияОткрытьФормуНастройки(ОграничениеТипов, Объект, Истина, ОписаниеОповещения);
		ИначеЕсли СтрНайти(ДанныеСобытия.href, "НажатиеНаКонтактнуюИнформацию") > 0 Тогда
			ТипКонтактнойИнформации			= ДанныеСобытия.Element.dataset.contactType;
			ЗначениеКонтактнойИнформации	= ДанныеСобытия.Element.innerHTML;
			
			ОбрабатываемыйОбъектСсылка	= Неопределено;
			ГлавныйКонтейнерBody		= ДанныеСобытия.Document.body.firstChild;
			
			Если ГлавныйКонтейнерBody <> Неопределено Тогда
				НавигационнаяСсылкаОбъекта = ГлавныйКонтейнерBody.dataset.object;
				ОбрабатываемыйОбъектСсылка = CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуИзНавигационной(НавигационнаяСсылкаОбъекта);
			КонецЕсли;
			
			Если ТипКонтактнойИнформации = "email" Тогда
				СписокАдресов = Новый СписокЗначений;
				СписокАдресов.Добавить(ОбрабатываемыйОбъектСсылка, ЗначениеКонтактнойИнформации);
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("СписокАдресов", СписокАдресов);
				
				ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", ПараметрыФормы);
			ИначеЕсли ТипКонтактнойИнформации = "telephone" Тогда
				Если Не сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина, ОбрабатываемыйОбъектСсылка) Тогда
					Возврат;
				КонецЕсли;
				
				ДанныеЗаполнения = Новый Структура;
				ДанныеЗаполнения.Вставить("Основание", ОбрабатываемыйОбъектСсылка);
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
				
				сфпСофтФонПроКлиент.сфпПозвонить(
					ЗначениеКонтактнойИнформации, ОбрабатываемыйОбъектСсылка, ДополнительныеПараметры);
			ИначеЕсли ТипКонтактнойИнформации = "webpage" Тогда
				Если СтрНайти(ЗначениеКонтактнойИнформации, "://") = 0 Тогда
					ЗначениеКонтактнойИнформации = "http://" + ЗначениеКонтактнойИнформации;
				КонецЕсли;
				
				ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(ЗначениеКонтактнойИнформации);
			ИначеЕсли ТипКонтактнойИнформации = "address" Тогда
				СписокКоманд = Новый СписокЗначений;
				
				СписокКоманд.Добавить("ПоказатьАдресНаЯндексКартах",
					НСтр("ru='Адрес на Яндекс.Картах';en='Address on Yandex.Maps'"), , БиблиотекаКартинок.ЯндексКарты);
					
				СписокКоманд.Добавить("ПоказатьАдресНаGoogleMaps",
					НСтр("ru='Адрес на Google Maps';en='Address on Google Maps'"), , БиблиотекаКартинок.GoogleMaps);
				
				СтруктураКИ = Новый Структура;
				СтруктураКИ.Вставить("Представление", ЗначениеКонтактнойИнформации);
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"КонтактнаяИнформацияНажатиеПродолжение", CRM_УправлениеКонтактнойИнформациейКлиент, СтруктураКИ);
					
				СписокКоманд.ПоказатьВыборЭлемента(
					ОписаниеОповещения,
					НСтр("en = 'Select the map to open the address'; ru = 'Выберите карту для открытия адреса'"),
					СписокКоманд.Получить(0));
			КонецЕсли;
		Иначе
			CRM_ОбщегоНазначенияКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии()

#КонецОбласти 

#Область РаботаССохранениемЗагрузкойРезультатовОтчетов
	
// Функция открывает форму заполнения по результатам отчета, возвращает имя сохраненного списка
//  или "Неопределено" в случае нажатия кнопки "Отмена".
//
// Параметры:
//  ЭтаФорма			 - ФормаКлиентскогоПриложения	 - Форма
//  ОписаниеОповещения	 - ОписаниеОповещения - Используется для описания вызова процедуры программного модуля.
//
Процедура ОткрытьФормуЗаполненияПоРезультатамОтчета(ЭтаФорма, ОписаниеОповещения) Экспорт
	ПараметрыФормы = Новый Структура("Режим", "Загрузка");
	ОткрытьФорму("ОбщаяФорма.CRM_СохранениеЗагрузкаРезультатовОтчетов", ПараметрыФормы, ЭтаФорма, , , ,
		 ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры // ОткрытьФормуЗаполненияПоРезультатамОтчета()

// Процедура устанавливает отбор по результатам отчета.
//
// Параметры:
//	НаименованиеСохраненногоРезультата	- Строка	- Наименование сохраненного результата.
//	ИмяПоля								- Строка	- Имя поля.
//	Настройки							- Структура	- Настройки
//	ПользовательскиеНастройки			- Структура	- Пользовательские настройки.
//
Процедура УстановитьОтборПоСпискуРезультатаОтчета(НаименованиеСохраненногоРезультата, ИмяПоля,
	 Настройки,
	 ПользовательскиеНастройки) Экспорт
	Список = CRM_ОбщегоНазначенияСервер.ПолучитьСохраненныйРезультатОтчетаПоНаименованию(НаименованиеСохраненногоРезультата);
	Если Список = Неопределено Тогда Возврат; КонецЕсли;
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отбор = Настройки.Отбор;
	Иначе
		Отбор = Настройки;
	КонецЕсли;
	ОтборПользовательский = Неопределено;
	ЭлементОтбора = Неопределено;
	Если ЗначениеЗаполнено(Отбор.ИдентификаторПользовательскойНастройки) Тогда
		ОтборПользовательский = ПользовательскиеНастройки.Элементы.Найти(Отбор.ИдентификаторПользовательскойНастройки);
		Если ОтборПользовательский <> Неопределено Тогда
			НайденныеЭлементы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ОтборПользовательский, ИмяПоля);
			Для Каждого НайденныйЭлемент Из НайденныеЭлементы Цикл
				НайденныйЭлемент.Использование = Ложь;
				Если ЭлементОтбора = Неопределено И НайденныйЭлемент.Родитель = Неопределено Тогда
					ЭлементОтбора = НайденныйЭлемент;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	бИспользуетсяПользовательскоеПолеОтбора = Ложь;
	НайденныеЭлементы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Отбор, ИмяПоля);
	Для Каждого НайденныйЭлемент Из НайденныеЭлементы Цикл
		Если ЗначениеЗаполнено(НайденныйЭлемент.ИдентификаторПользовательскойНастройки) Тогда
			ЭлементОтбораПользовательский = ПользовательскиеНастройки.Элементы.Найти(НайденныйЭлемент.ИдентификаторПользовательскойНастройки);
			Если ЭлементОтбораПользовательский = Неопределено Тогда
				НайденныйЭлемент.Использование = Ложь;
			Иначе
				ЭлементОтбораПользовательский.Использование = Ложь;
				Если ЭлементОтбора = Неопределено Тогда
					ЭлементОтбора = ЭлементОтбораПользовательский;
					бИспользуетсяПользовательскоеПолеОтбора = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			НайденныйЭлемент.Использование = Ложь;
		КонецЕсли;
		Если ОтборПользовательский = Неопределено И ЭлементОтбора = Неопределено И НайденныйЭлемент.Родитель = Неопределено Тогда
			ЭлементОтбора = НайденныйЭлемент;
		КонецЕсли;
	КонецЦикла;
	Если ЭлементОтбора = Неопределено Тогда
		Если ОтборПользовательский = Неопределено Тогда
			ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Иначе
			ЭлементОтбора = ОтборПользовательский.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	КонецЕсли;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	Попытка
		ДоступноеПолеОтбора = Отбор.ДоступныеПоляОтбора.Элементы.Найти(Новый ПолеКомпоновкиДанных(ИмяПоля));
		ТипЗначения = ДоступноеПолеОтбора.ТипЗначения;
		Если ТипЗначения.Типы().Количество() = 0 Тогда
			ТипЗначения = Неопределено;
		КонецЕсли;
	Исключение
		ТипЗначения = Неопределено;
	КонецПопытки;
	Если ТипЗначения = Неопределено Тогда
		ЭлементОтбора.ПравоеЗначение = Список;
	Иначе
		СписокСкорректированный = Новый СписокЗначений();
		Для Каждого СтрокаСписка Из Список Цикл
			Если ТипЗначения.СодержитТип(ТипЗнч(СтрокаСписка.Значение)) Тогда
				СписокСкорректированный.Добавить(СтрокаСписка.Значение);
			КонецЕсли;
		КонецЦикла;
		ЭлементОтбора.ПравоеЗначение = СписокСкорректированный;
	КонецЕсли;
	ЭлементОтбора.Использование = Истина;
	Если НЕ бИспользуетсяПользовательскоеПолеОтбора Тогда
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	КонецЕсли;
	
КонецПроцедуры // УстановитьОтборПоСпискуРезультатаОтчета()

#КонецОбласти 

#Область ЗаполнениеПолучателейПоСКД

// Возвращает пустую структуру вспомогательных данных
//
// Возвращаемое значение:
//  Структура - пустая структура вспомогательных данных.
//
Функция СтруктураДополнительныхДанных() Экспорт
	
	ДополнительныеДанные = Новый Структура("ИмяРеквизитаАдресОтбор, ИмяСправочника, Оповещение"); 
	
	Возврат ДополнительныеДанные;
	
КонецФункции

// Открывает форму отбора компоновки данных с целью последующего заполнения объекта-инициатора.
//
// Параметры:
//	Форма	- ФормаКлиентскогоПриложения	- форма, из которой открывается отбор.
//	ДополнительныеДанные	- Структура	- Содержит вспомогательные данные.
//
Процедура ОткрытьОтборЗаполнения(Форма, ДополнительныеДанные) Экспорт
	
	ПараметрыСтруктура = Новый Структура();
	
	ПараметрыСтруктура.Вставить("ТекстЗапроса",
		 CRM_ОбщегоНазначенияСервер.ЗаполнениеПоСКД_ПолучитьТекстЗапроса(ДополнительныеДанные.ИмяСправочника));
	
	ЗаголовокШаблон = НСтр("ru='Настройка отбора по %1';en='Settings of filter by %1'");
	ПараметрыСтруктура.Вставить("Заголовок", ЗаголовокФормыОтбораЗаполненияПоСКД(ЗаголовокШаблон,
		 ДополнительныеДанные.ИмяСправочника));
	
	Если ЭтоАдресВременногоХранилища(Форма[ДополнительныеДанные.ИмяРеквизитаАдресОтбор]) Тогда
		ПараметрыСтруктура.Вставить("ОтборКомпоновкиДанных",
			 ПолучитьИзВременногоХранилища(Форма[ДополнительныеДанные.ИмяРеквизитаАдресОтбор]));
	Иначе
		ПараметрыСтруктура.Вставить("ОтборКомпоновкиДанных",
			 CRM_ОбщегоНазначенияСервер.ЗаполнениеПоСКД_ПолучитьОтборПоУмолчанию(ДополнительныеДанные.ИмяСправочника));
	КонецЕсли;
	
	Если СтрЧислоВхождений(Форма.ИмяФормы,
		 "Обработка") = 0 Тогда // возможен вызов из "Обработка.CRM_ЗаполнениеУровнейДоступа", где отсутствует Ссылка
		ПараметрыСтруктура.Вставить("ДополнительныеПоля",
			 ДополнительныеПоляФормыОтбора(ДополнительныеДанные.ИмяСправочника,
			 Форма.Объект.Ссылка));
	Иначе
		ПараметрыСтруктура.Вставить("ДополнительныеПоля", Новый Массив);
	КонецЕсли;
	
	ПараметрыСтруктура.Вставить("ЗаголовокКомандыОК", НСтр("ru = 'Заполнить'"));
	
	ДополнительныеДанные.Вставить("Форма", Форма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьОтборЗаполненияЗавершение",
		 CRM_ОбщегоНазначенияКлиент,
		 ДополнительныеДанные);
	ОткрытьФорму("ОбщаяФорма.CRM_ОтборКомпоновкиДанных", ПараметрыСтруктура, Форма, , , ,
		 ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Вызывается при закрытии формы "ОбщаяФорма.CRM_ОтборКомпоновкиДанных"
//
// Параметры:
//	Результат	- Структура	- Значение, переданное при вызове метода Закрыть открываемой формы.
//	ДополнительныеПараметры	- Структура	- Значение, которое было указано при создании объекта ОписаниеОповещения.
//
Процедура ОткрытьОтборЗаполненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
		
	Форма = ДополнительныеПараметры.Форма;
	
	НастроенныйОтбор = Неопределено;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда	
		НастроенныйОтбор = Результат.Отбор;
	КонецЕсли;
		
	ОтборНастроен = НастроенныйОтбор <> Неопределено;
	
	Если ОтборНастроен Тогда
				
		Если ЭтоАдресВременногоХранилища(Форма[ДополнительныеПараметры.ИмяРеквизитаАдресОтбор]) Тогда
			УдалитьИзВременногоХранилища(Форма[ДополнительныеПараметры.ИмяРеквизитаАдресОтбор]);
		КонецЕсли;
		
		Если НастроенныйОтбор.Элементы.Количество() = 0 Тогда
			Форма[ДополнительныеПараметры.ИмяРеквизитаАдресОтбор] = "";
		Иначе
			Форма[ДополнительныеПараметры.ИмяРеквизитаАдресОтбор] = ПоместитьВоВременноеХранилище(НастроенныйОтбор,
				 Форма.УникальныйИдентификатор);
		КонецЕсли;
		
		Для Каждого ЭлементСтруктуры Из Результат Цикл
			
			Если ЭлементСтруктуры.Ключ = "Отбор" Тогда
				Продолжить;
			КонецЕсли;			
			ДополнительныеПараметры.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			
		КонецЦикла;

	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ОтборНастроен", ОтборНастроен);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение, ДополнительныеПараметры);
	
КонецПроцедуры

// Возвращает список получателей.
//
// Параметры:
//	Форма	- ФормаКлиентскогоПриложения	- форма, для которой фомрируется список получателей.
//	ДополнительныеПараметры	- Структура	- Дополнительные параметры.
// Возвращаемое значение:
//  СписокЗначений из СправочникСсылка.Партнеры, СправочникСсылка.КонтактныеЛицаПартнеров, 
//	СправочникСсылка.ПотенциальныеКлиенты - Содержит список получателей.
//
Функция СписокПолучателей(Форма, ДополнительныеПараметры) Экспорт
	
	Если ЭтоАдресВременногоХранилища(Форма[ДополнительныеПараметры.ИмяРеквизитаАдресОтбор]) Тогда
		ТекОтбор = ПолучитьИзВременногоХранилища(Форма[ДополнительныеПараметры.ИмяРеквизитаАдресОтбор]);
	Иначе
		ТекОтбор = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ТекОтбор) <> Тип("ОтборКомпоновкиДанных") Тогда
		ТекОтбор = Неопределено;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ТекОтбор", ТекОтбор);
	
	СписокСсылок = CRM_ОбщегоНазначенияСервер.СписокПолучателей(ДополнительныеПараметры);
	
	Возврат СписокСсылок;
	
КонецФункции

#КонецОбласти

#Область РаботаСДополнительнымиРеквизитами
	
// Процедура разворачивает дерево значений на форме.
//
// Параметры:
//	ЭлементФормы	- ЭлементУправления	- ЭлементФормы
//	Дерево			- ДеревоЗначений	- Дерево
//
Процедура РазвернутьДеревоЗначенийСвойств(ЭлементФормы, Дерево) Экспорт
	Для Каждого Элемент Из Дерево.ПолучитьЭлементы() Цикл
		Идентификатор = Элемент.ПолучитьИдентификатор();
		ЭлементФормы.Развернуть(Идентификатор, Истина);
	КонецЦикла;
КонецПроцедуры // РазвернутьДеревоЗначенийСвойств()

// Процедура обработчик события "ПередУдалением".
//
// Параметры:
//	Элемент				- ЭлементУправления	- ЭлементФормы
//	Отказ				- Булево			- Флаг отмены.
//	Модифицированность	- Булево			- Флаг изменений.
//
Процедура ДеревоЗначенийСвойствПередУдалением(Элемент, Отказ, Модифицированность) Экспорт
	Отказ = Истина;
	Элемент.ТекущиеДанные.Значение = Элемент.ТекущиеДанные.ТипЗначенияСвойства.ПривестиЗначение(Неопределено);
	Модифицированность = Истина;
КонецПроцедуры // ДеревоЗначенийСвойствПередУдалением()

// Процедура-обработчик события "ПриНачалеРедактирования"
//
// Параметры:
//	Элемент				- ЭлементУправления	- ЭлементФормы
//
Процедура ДеревоЗначенийСвойствПриНачалеРедактирования(Элемент) Экспорт
	Элемент.ПодчиненныеЭлементы.Значение.ОграничениеТипа = Элемент.ТекущиеДанные.ТипЗначенияСвойства;
КонецПроцедуры // ДеревоЗначенийСвойствПриНачалеРедактирования()

#КонецОбласти

#Область РаботаСКонтактнойИнформацией
	
// Процедура открывает форму ошибки подключения.
//
// Параметры:
//	ВидФормы	- Строка	- Вид формы ошибки подключения.
//
Процедура ОткрытьФормуОшибкиПодключения(ВидФормы) Экспорт
	ПараметрыФормы = Новый Структура("ВидФормы", ВидФормы);	
	
	Если ВидФормы = "СофтФон" Тогда
		
		ФормаОшибкиПодключения = ПолучитьФорму("Обработка.CRM_СообщенияОшибкиПодключения.Форма.ФормаСофтфон",
			 ПараметрыФормы, , ,
			 ВариантОткрытияОкна.ОтдельноеОкно);
		
	ИначеЕсли ВидФормы = "СМС" Тогда
		
		ФормаОшибкиПодключения = ПолучитьФорму("Обработка.CRM_СообщенияОшибкиПодключения.Форма.ФормаСМС",
			 ПараметрыФормы, , ,
			 ВариантОткрытияОкна.ОтдельноеОкно);
		
	ИначеЕсли ВидФормы = "Google" Тогда
		
		ФормаОшибкиПодключения = ПолучитьФорму("Обработка.CRM_СообщенияОшибкиПодключения.Форма.ФормаGoogle",
			 ПараметрыФормы, , ,
			 ВариантОткрытияОкна.ОтдельноеОкно);
		
	КонецЕсли;
	
	Если ФормаОшибкиПодключения = Неопределено Тогда
		Возврат;
	ИначеЕсли ФормаОшибкиПодключения.Открыта() Тогда
		ФормаОшибкиПодключения.Активизировать();
	Иначе
		ФормаОшибкиПодключения.Открыть();
	КонецЕсли;
КонецПроцедуры // ОткрытьФормуОшибкиПодключения()		

#КонецОбласти 

#Область ПроверкаПравописания

// Получить представление времени.
//
// Параметры:
//  Время - Число - Время.
// 
// Возвращаемое значение:
//  Строка - Представление времени. 
//
Функция ПолучитьПредставлениеВремени(Время) Экспорт
	СписокВремен = Новый СписокЗначений;
	СписокВремен.Добавить(86400,	"ru='дня(ей)'");
	СписокВремен.Добавить(3600,		"ru='часа(ов)'");
	СписокВремен.Добавить(60,		"ru='минут(ы)'");
	СписокВремен.Добавить(1,		"ru='секунд(ы)'");
	Текст = "";
	Для Каждого Элемент Из СписокВремен Цикл
		Если Время >= Элемент.Значение Тогда
			Текст = Формат(Время / Элемент.Значение, "ЧДЦ=1; ЧРД=.; ЧГ=0") + " " + НСтр(Элемент.Представление);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Текст;
КонецФункции

// Исключение временного периода
//
// Параметры:
//  ДатаНачала		 - Дата	 - Дата начала.
//  ДатаКонца		 - Дата	 - Дата окончания.
//  НачалоПериода	 - Дата	 - Начало периода.
//  КонецПериода	 - Дата	 - Конец периода.
// 
// Возвращаемое значение:
//  Число -  Разность дат.
//
Функция ИсключениеВременногоПериода(Знач ДатаНачала, Знач ДатаКонца, Знач НачалоПериода = 0,
	 Знач КонецПериода = 0) Экспорт
	
	Если ТипЗнч(ДатаНачала) = Тип("Дата") Тогда
		Если ТипЗнч(НачалоПериода) = Тип("Дата") Тогда
			НачалоПериода = НачалоПериода - НачалоДня(НачалоПериода);
		КонецЕсли;
		Если ТипЗнч(КонецПериода) = Тип("Дата") Тогда
			КонецПериода = КонецПериода - НачалоДня(КонецПериода);
			Если КонецПериода = 0 Тогда
				КонецПериода = 86400;
			КонецЕсли;
		КонецЕсли;
		Дат = Мин(ДатаКонца, КонецДня(ДатаНачала) + 1);
		Всего = ИсключениеВременногоПериода(ДатаНачала - НачалоДня(ДатаНачала),
			 Дат - НачалоДня(ДатаНачала), НачалоПериода,
			 КонецПериода);
		Если Дат < ДатаКонца Тогда
			Всего = Всего + ИсключениеВременногоПериода(0, ДатаКонца - НачалоДня(ДатаКонца), НачалоПериода, КонецПериода);
			ПолныхДней = (НачалоДня(ДатаКонца) - Дат) / 86400;
			ЧастьДня = ?(НачалоПериода > КонецПериода, НачалоПериода - КонецПериода, 86400 - КонецПериода + НачалоПериода);
			Всего = Всего + ПолныхДней * ЧастьДня;
		КонецЕсли;
	Иначе
		Всего = ДатаКонца - ДатаНачала;
		Если НачалоПериода <= КонецПериода Тогда
			Если (НачалоПериода < ДатаКонца) И (КонецПериода > ДатаНачала) Тогда
				Всего = Всего - (КонецПериода - НачалоПериода) + ?(НачалоПериода < ДатаНачала,
					 ДатаНачала - НачалоПериода, 0) + ?(КонецПериода > ДатаКонца, КонецПериода - ДатаКонца, 0);
			КонецЕсли;
		Иначе
			Всего = Всего - ?(ДатаНачала < КонецПериода, КонецПериода - ДатаНачала,
				 0) - ?(ДатаКонца > НачалоПериода, ДатаКонца - НачалоПериода,
				 0);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Всего;
	
КонецФункции

#КонецОбласти

#Область РаботаСоСсылкамиФорматированногоДокумента

// Открывает ссылку в теле письма.
//
// Параметры:
//  Href			 - Строка -  Значение поля Href элемента. 
//  Element			 - Element	 - Элемент, на который нажали; 
//  ТекущееПисьмо	 - ДокументСсылка - Ссылка на письмо. 
//  HTMLДокумент	 - ПолеФормы  - Поле HTML документа.
//
Процедура ОткрытьСсылку(Href, Element, ТекущееПисьмо = Неопределено, HTMLДокумент = Неопределено) Экспорт
	
	ВыбраннаяСсылка = Неопределено;
	
	Если Href <> Неопределено Тогда
		// Если у данных события заполнено свойство Href - будем считать что переход будет по этой ссылке.
		ВыбраннаяСсылка = Href;
	Иначе
		// BSLLS:MissingCodeTryCatchEx-off
		Попытка
			// Если у элемента события заполнено свойство Href и элемент AREA - будем считать что переход будет по этой ссылке.
			Если ВРег(Element.tagName) = "AREA" Тогда
				ВыбраннаяСсылка = Element.Href;
			КонецЕсли;
		Исключение
		КонецПопытки;
		// BSLLS:MissingCodeTryCatchEx-on
	КонецЕсли;
	
	Если ПустаяСтрока(ВыбраннаяСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
	Если СтрНайти(ВыбраннаяСсылка, "javascript:_1c") = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПозицияРазделителя = СтрНайти(ВыбраннаяСсылка, "#");
	ПозицияВнутреннейНавигационнойСсылки = СтрНайти(ВыбраннаяСсылка, "#e1cib/");
	
	// Safari - передается просто относительная ссылка.
	Если ПозицияРазделителя = 1  Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ВыбраннаяСсылка, ПолучитьНавигационнуюСсылкуИнформационнойБазы()) = 1 Тогда
		
		// Chrome, IE - передается полная ссылка.
		Если ПозицияРазделителя <> 0 И ПозицияВнутреннейНавигационнойСсылки = 0 Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	#Иначе
	Если СтрНайти(ВыбраннаяСсылка, ПолучитьНавигационнуюСсылкуИнформационнойБазы()) = 1 Тогда
		
		ElementID = Сред(ВыбраннаяСсылка, СтрНайти(ВыбраннаяСсылка, "#") + 1);
		ElementByID = HTMLДокумент.getElementById(ElementID);
		
		Если ElementByID <> Неопределено Тогда
			ElementByID.scrollIntoView(True);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	АдресБазыВИнтернете = CRM_ОбщегоНазначенияПовтИсп.АдресПубликацииИнформационнойБазыВИнтернете();
	Если ЗначениеЗаполнено(АдресБазыВИнтернете) И СтрНайти(ВыбраннаяСсылка, АдресБазыВИнтернете) = 1 Тогда
		
		ElementID = Сред(ВыбраннаяСсылка, СтрНайти(ВыбраннаяСсылка, "#") + 1);
		ElementByID = HTMLДокумент.getElementById(ElementID);
		
		Если ElementByID <> Неопределено Тогда
			ElementByID.scrollIntoView(True);
			Возврат;
		Иначе
			ПерейтиПоНавигационнойСсылке(ElementID);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПрефиксВнутреннаяСсылкаБазы = "/e1cib";
	ДлинаПрефикса     = СтрДлина(ПрефиксВнутреннаяСсылкаБазы);
	ПозицияНайденного = СтрНайти(ВыбраннаяСсылка, ПрефиксВнутреннаяСсылкаБазы);
	
	Если Не ПозицияНайденного = 0 Тогда
		ВыбраннаяСсылка = Прав(ВыбраннаяСсылка, СтрДлина(ВыбраннаяСсылка) - ПозицияНайденного);
	КонецЕсли;
	#КонецЕсли
	
	Попытка
		ПерейтиПоНавигационнойСсылке(ВыбраннаяСсылка);
	Исключение
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти // РаботаСоСсылкамиФорматированногоДокумента

#Область ИнициализацииПодсистем

// Процедура инициализации подсистем CRM.
//
Процедура ПриНачалеРаботыСистемы() Экспорт
	
	// +СофтФон
	Если ПараметрыПриложения["сфпЗакрыватьПанельПриЗавершенииРаботы"] = Неопределено Тогда
		Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
			ПараметрыПриложения.Вставить("сфпЗакрыватьПанельПриЗавершенииРаботы", Ложь);
		Иначе	
			ПараметрыПриложения.Вставить("сфпЗакрыватьПанельПриЗавершенииРаботы",
				сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпЗакрыватьПанельПриЗавершенииРаботы"));
		КонецЕсли;
	КонецЕсли;
	// -СофтФон
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	
	#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
	
	Если Не ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		CRM_НапоминанияКлиент.ПриНачалеРаботыСистемы();
	КонецЕсли;
	
	Если ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных И
		Не ПараметрыРаботыКлиента.РазделениеВключено Тогда
		
		ИмяПараметра = "CRM_ПараметрыЗапуска";
		CRM_Параметры = ПараметрыПриложения[ИмяПараметра];
		Если CRM_Параметры <> Неопределено Тогда
			CRM_ЗакладкиНеОткрываем = (CRM_Параметры["ЗакладкиНеОткрываем"] = Истина);
		Иначе
			CRM_ЗакладкиНеОткрываем = Ложь;
		КонецЕсли;
		
		Если Не CRM_ЗакладкиНеОткрываем Тогда
			Если CRM_РежимФормЗакладкиКлиентПовтИсп.ИспользуетсяРежимЗакладок() Тогда
				CRM_РежимФормЗакладкиКлиент.ПриНачалеРаботыСистемы();
			КонецЕсли;
		Иначе
			CRM_РежимФормЗакладкиСервер.СохранитьТекущийСоставОткрытыхФорм(Новый Массив());
			ТекПользователь = ИмяПользователя();
			ТекНастройки = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("ОбновлениеИБ",
				 "ВывестиОписаниеИзмененийДляАдминистратора", , ,
				 ТекПользователь); 
			Если ТекНастройки <> Неопределено Тогда
				ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекУдалить("ОбновлениеИБ",
					 "ВывестиОписаниеИзмененийДляАдминистратора",
					 ТекПользователь);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецЕсли
	
	Если ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных И
		Не ПараметрыРаботыКлиента.РазделениеВключено Тогда
		// проверка и обновление демонстрационных данных в демо-режиме
		Если CRM_ДемонстрационныйРежим.ЭтоДемоРежим() Тогда
			ДлительнаяОперация	= CRM_ОбщегоНазначенияСервер.НачатьПроверкуОбновленияДемоДанных();
			ПараметрыОжидания	= ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
			ПараметрыОжидания.ТекстСообщения	= НСтр("ru='Выполняется подготовка данных демонстрационной базы.'") 
				+ Символы.ПС 
				+ НСтр("ru='Это займет всего 1-2 минуты.'");
			ПараметрыОжидания.ВыводитьСообщения	= Истина;
			Оповещение	= Новый ОписаниеОповещения("ЗавершитьПроверкeОбновлениеДемоДанные", ЭтотОбъект);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // CRM_ПриНачалеРаботыСистемы()

// Процедура - обработчик заверешения обновления демо данных.
//
// Параметры:
//	Результат				- Произвольный	- Результат обновления.
//	ДополнительныеПараметры	- Структура		- Структура дополнительных параметров.
//
Процедура ЗавершитьПроверкeОбновлениеДемоДанные(Результат, ДополнительныеПараметры) Экспорт
	Оповестить("ОбновитьАРМ");
КонецПроцедуры

#КонецОбласти

#Область РаботаСКартами

// Процедура - Получить адрес показать на карте
//
// Параметры:
//  СтруктураАдреса		 - Структура - Структура адреса.
//  СайтИнтернетКарты	 - Строка	 - Сайт интернет карт. 
//
Процедура ПолучитьАдресПоказатьНаКарте(СтруктураАдреса, СайтИнтернетКарты) Экспорт
	
	Если Не СтруктураАдреса.Свойство("Индекс") Тогда
		СтруктураАдреса.Вставить("Индекс", "");
	КонецЕсли;
	
	Адрес = CRM_ОбщегоНазначенияСервер.ПолучитьАдрес(СтруктураАдреса, СайтИнтернетКарты);
	
	Если СайтИнтернетКарты = "GIS" Тогда
		// Для 2GIS в веб-клиенте не можем использовать API, поэтому пробуем хоть как то...
		// Пытаемся подставить город из "миллионников".
		Город = "";
		Если СтруктураАдреса.Свойство("Регион")
			И ТипЗнч(СтруктураАдреса.Регион) = Тип("Строка")
			И СтрНайти(Врег(СтруктураАдреса.Регион), "МОСКВА") Тогда
			Город = "moskow";
		ИначеЕсли СтруктураАдреса.Свойство("Регион")
			И ТипЗнч(СтруктураАдреса.Регион) = Тип("Строка") 
			И СтрНайти(Врег(СтруктураАдреса.Регион), "ПЕТЕРБУРГ") Тогда 	
			Город = "spb";
		ИначеЕсли СтруктураАдреса.Свойство("Город")
			И ТипЗнч(СтруктураАдреса.Город) = Тип("Строка") Тогда
			Если СтрНайти(Врег(СтруктураАдреса.Город), "НОВОСИБИРСК") Тогда 	
				Город = "novosibirsk";
			ИначеЕсли СтрНайти(Врег(СтруктураАдреса.Город), "ЕКАТЕРИНБУРГ") Тогда 	
				Город = "ekaterinburg";
			ИначеЕсли СтрНайти(Врег(СтруктураАдреса.Город), "НИЖНИЙ НОВГОРОД") Тогда 	
				Город = "n_novgorod";
			ИначеЕсли СтрНайти(Врег(СтруктураАдреса.Город), "КАЗАНЬ") Тогда 	
				Город = "kazan";
			ИначеЕсли СтрНайти(Врег(СтруктураАдреса.Город), "САМАРА") Тогда 	
				Город = "";
			ИначеЕсли СтрНайти(Врег(СтруктураАдреса.Город), "ОМСК") Тогда 	
				Город = "omsk";
			ИначеЕсли СтрНайти(Врег(СтруктураАдреса.Город), "ЧЕЛЯБИНСК") Тогда 	
				Город = "chelyabinsk";
			ИначеЕсли СтрНайти(Врег(СтруктураАдреса.Город), "РОСТОВ") Тогда 	
				Город = "rostov";
			ИначеЕсли СтрНайти(Врег(СтруктураАдреса.Город), "УФА") Тогда 	
				Город = "ufa";
			ИначеЕсли СтрНайти(Врег(СтруктураАдреса.Город), "ВОЛГОГРАД") Тогда 	
				Город = "volgograd";
			ИначеЕсли СтрНайти(Врег(СтруктураАдреса.Город), "КРАСНОЯРСК") Тогда 	
				Город = "krasnoyarsk";
			ИначеЕсли СтрНайти(Врег(СтруктураАдреса.Город), "ВОРОНЕЖ") Тогда 	
				Город = "voronezh";
			ИначеЕсли СтрНайти(Врег(СтруктураАдреса.Город), "ПЕРМЬ") Тогда 	
				Город = "perm";
			КонецЕсли; 
		КонецЕсли; 
		Представление = СтрЗаменить(СтруктураАдреса.Представление, СтруктураАдреса.Индекс + ",", "");
		
		Если Не ПустаяСтрока(Город) Тогда
			СтрокаПоиска = "http://2gis.ru/" + Город + "/search/" + Представление;
		Иначе	
			СтрокаПоиска = "http://2gis.ru/search/" + Представление;
		КонецЕсли; 
		ПерейтиПоНавигационнойСсылке(СтрокаПоиска);
	Иначе
		ПерейтиПоНавигационнойСсылке(Адрес);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСSMS4B

// Процедура - обработчик открытия формы настроек СМС.
//
// Параметры:
//	Ответ					- КодВозвратаДиалога	- Ответ на вопрос.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура смсОткрытьФормуНастроекСМС(Ответ, ДополнительныеПараметры) Экспорт
	Если НЕ (Ответ = КодВозвратаДиалога.Да) Тогда
		Возврат;
	КонецЕсли;
	ФормаНастроек = ПолучитьФорму("ОбщаяФорма.НастройкаОтправкиSMS");
	Если ФормаНастроек.Открыта() Тогда
		ФормаНастроек.Активизировать();
	Иначе
		ФормаНастроек.Открыть();
	КонецЕсли;	
КонецПроцедуры // СмсОткрытьФормуНастроекСМС().

// Функция проверяет доступность использования сервиса SMS4B.
//
// Параметры:
//  КонтекстВызова	 - Ссылка, Неопределено	 - Контекст вызова.
// 
// Возвращаемое значение:
//  Булево - Доступность сервиса SMS4B.
//
Функция смсПроверитьДоступностьSMS4B(КонтекстВызова = Неопределено) Экспорт
	Если НЕ SMS4B_ОтправкаSMS.SMS4B_ИспользоватьSMS4B() Тогда
		ЗаписатьДанныеБизнесСтатистики(КонтекстВызова);
		ОткрытьФормуОшибкиПодключения("СМС");
		Возврат Ложь;
	ИначеЕсли НЕ SMS4B_ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		ТекстВопроса = НСтр("ru='Отправка SMS невозможна, так как не установлены параметры подключения."
"Открыть форму настроек?';en='Sending SMS is impossible, because connection settings not installed."
"Open settings form?'");
		ДополнительныеПараметры = Новый Структура;
		ОповещениеОтвета = Новый ОписаниеОповещения("смсОткрытьФормуНастроекСМС", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОповещениеОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Внимание!");
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции // СмсПроверитьДоступностьSMS4B()

// Обработчик открытия формы документа СМС.
//
// Параметры:
//  СписокТелефонов			 - СписокЗначений - Список телефонов.
//  ДополнительныеПараметры	 - Структура - Структура дополнительных параметров.
//
Процедура ОткрытьФормуДокументаСМС(СписокТелефонов, ДополнительныеПараметры) Экспорт
	Если СписокТелефонов = Неопределено Тогда
		Возврат;
	ИначеЕсли СписокТелефонов.Количество() = 0 Тогда	
		Возврат;
	Иначе	
		СтруктураСписка = Новый Структура("СписокТелефонов", СписокТелефонов);
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("Основание", СтруктураСписка);
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ДанныеЗаполнения);
	КонецЕсли;
КонецПроцедуры // ОткрытьФормуДокументаСМС()

#КонецОбласти

#Область РедакторированиеЗаблокированныхРеквизитов

// Вызывается в формах объектов для разблокировки заблокированных реквизитов.
//
// Параметры:
//  ЭтаФорма				 - ФормаКлиентскогоПриложения	 - Форма объекта.
//  ИмяФормыРазблокировки	 - Строка	 - Имя формы разблокировки.
//
Процедура РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма, Знач ИмяФормыРазблокировки = "") Экспорт
	
	Если ЗначениеЗаполнено(ЭтаФорма.Объект.Ссылка) Тогда
		
		Если Не ЗначениеЗаполнено(ИмяФормыРазблокировки) Тогда
			МассивИмениФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ЭтаФорма.ИмяФормы, ".");
			МассивИмениФормы[3] = "РазблокированиеРеквизитов";
			ИмяФормыРазблокировки = СтрСоединить(МассивИмениФормы, ".");
		КонецЕсли;
		ОписаниеОповещения = Новый ОписаниеОповещения("РазрешитьРедактированиеРеквизитовОбъектаЗавершение",
			 CRM_ОбщегоНазначенияКлиент,
			 ЭтаФорма);
		ОткрытьФорму(ИмяФормыРазблокировки, Новый Структура("Объект", ЭтаФорма.Объект.Ссылка), , , , ,
			 ОписаниеОповещения,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Разрешить редактирование реквизитов объекта завершение
//
// Параметры:
//  РедактированиеРазрешено	 - Булево - Редактирование разрешено.
//  ЭтаФорма				 - ФормаКлиентскогоПриложения	 - Форма объекта.
//
Процедура РазрешитьРедактированиеРеквизитовОбъектаЗавершение(РедактированиеРазрешено, ЭтаФорма) Экспорт
	
		Если РедактированиеРазрешено = Истина Тогда
			
			ЗаблокированныеРеквизиты = ЗапретРедактированияРеквизитовОбъектовКлиент.Реквизиты(ЭтаФорма);
			ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьРазрешенностьРедактированияРеквизитов(ЭтаФорма,
				 ЗаблокированныеРеквизиты);
			ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма);
			
		КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

// Возвращает фильтр, используемый для выбора файлов-изображений.
// Возвращаемое значение:
//  Строка - строка, содержащая фильтр для файлов-изображений.
//
Функция ФильтрФайловИзображений() Экспорт
	Возврат НСтр("ru='Все картинки (*.bmp;*.gif;
		|*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;
		|*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf|"
"Все файлы(*.*)|*.*|"
"Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle|"
"Формат GIF(*.gif*)|*.gif|"
"Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg|"
"Формат PNG(*.png*)|*.png|"
"Формат TIFF(*.tif)|*.tif|"
"Формат icon(*.ico)|*.ico|"
"Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf|'");
КонецФункции

#Область Прочие

// Задает вопрос о продолжении действия, ведущего к закрытию формы.
// Для использования в обработчиках события ПередЗакрытием модулей форм.
// Для отображения вопроса в форме, которая  возможно записать в информационную базу, используйте: 
//  см. процедуру ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы().
//
// Параметры:
//  Форма                        - ФормаКлиентскогоПриложения - форма, которая вызывает диалог предупреждения.
//  Отказ                        - Булево - возвращаемый параметр, признак отказа от выполняемого действия.
//  ТекстПредупреждения          - Строка - текст предупреждения, выводимый пользователю.
//  ИмяРеквизитаЗакрытьФормуБезПодтверждения - Строка - имя реквизита, содержащего в себе признак того, нужно
//                                 выводить предупреждение или нет.
//  ОписаниеОповещенияЗакрыть    - ОписаниеОповещения - содержит имя процедуры, вызываемой при нажатии на кнопку да.
//
// Пример: 
//  ТекстПредупреждения = НСтр("ru='Закрыть помощник?'");
//  ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(
//      ЭтотОбъект, Отказ, ТекстПредупреждения, "ЗакрытьФормуБезПодтверждения");
//
Процедура CRM_ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(Форма, Отказ, ТекстПредупреждения,
	ИмяРеквизитаЗакрытьФормуБезПодтверждения, ОписаниеОповещенияЗакрыть = Неопределено) Экспорт
	
	Если Форма[ИмяРеквизитаЗакрытьФормуБезПодтверждения] Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Параметры = Новый Структура();
	Параметры.Вставить("Форма", Форма);
	Параметры.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	Параметры.Вставить("ИмяРеквизитаЗакрытьФормуБезПодтверждения", ИмяРеквизитаЗакрытьФормуБезПодтверждения);
	Параметры.Вставить("ОписаниеОповещенияЗакрыть", ОписаниеОповещенияЗакрыть);
	
	ИмяПараметра = "СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Неопределено);
	КонецЕсли;
	ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы"] = Параметры;
	
	ПодключитьОбработчикОжидания("ПодтвердитьЗакрытиеПроизвольнойФормыСейчас", 0.1, Истина);
	
КонецПроцедуры

// CRM показать подтверждение закрытия формы
//
// Параметры:
//  ОповещениеСохранитьИЗакрыть	 - ОписаниеОповещения - Оповещение закрытия.
//  Отказ						 - Булево - Признак отказа от записи документа.
//  ЗавершениеРаботы             - Булево - признак того, что форма закрывается в процессе завершения работы приложения.
//  ТекстПредупреждения			 - Строка - Текст с предупреждением. 
//  ТекстПредупрежденияПриЗавершении - Строка - возвращаемый параметр с текстом предупреждения, выводимым пользователю 
//                                          при завершении приложения. Если параметр указан, то возвращается текст
//                                          "Данные были изменены. Все изменения будут потеряны.".
//
Процедура CRM_ПоказатьПодтверждениеЗакрытияФормы(Знач ОповещениеСохранитьИЗакрыть, Отказ, 
	Знач ЗавершениеРаботы, Знач ТекстПредупреждения = "", ТекстПредупрежденияПриЗавершении = Неопределено) Экспорт
	
	Форма = ОповещениеСохранитьИЗакрыть.Модуль;
	Если Не Форма.Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ЗавершениеРаботы Тогда
		Если ТекстПредупрежденияПриЗавершении = "" Тогда // передан параметр из ПередЗакрытием
			ТекстПредупрежденияПриЗавершении = НСтр("ru='Данные были изменены. Все изменения будут потеряны.'");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура();
	Параметры.Вставить("ОповещениеСохранитьИЗакрыть", ОповещениеСохранитьИЗакрыть);
	Параметры.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	
	ИмяПараметра = "СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Неопределено);
	КонецЕсли;
	
	ТекущиеПараметры = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы"];
	Если ТекущиеПараметры <> Неопределено
	   И ТекущиеПараметры.ОповещениеСохранитьИЗакрыть.Модуль = Параметры.ОповещениеСохранитьИЗакрыть.Модуль Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы"] = Параметры;
	
	Форма.Активизировать();
	ПодключитьОбработчикОжидания("ПодтвердитьЗакрытиеФормыСейчас", 0.1, Истина);
	
КонецПроцедуры

// Функция проверяет возможность записи интереса клиента.
//
// Параметры:
//	Интерес	- ДокументСсылка	- Текущий интерес.
//
// Возвращаемое значение:
//	Булево	- Возможность записи интереса.
//
Функция ПроверитьВозможностьЗаписиИнтереса(Интерес) Экспорт
	МожноЗаписатьИнтерес = Истина;
	// Получаем все прочие незавершенные интересы клиента по данному типу услуги.
	Если ЗначениеЗаполнено(Интерес.Партнер) И ЗначениеЗаполнено(Интерес.ТипУслуги) Тогда
		
		// Проверяем аккаунт-менеджера.
		ТекПользователь		= ПользователиКлиентСервер.АвторизованныйПользователь();
		ОсновнойМенеджер	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Интерес.Партнер, "ОсновнойМенеджер");
		ЭтоАккаунтМенеджер = (ТекПользователь = ОсновнойМенеджер);
		// Сразу определяем, руководитель ли аккаунт-менеджера.
		МассивРуководителей = CRM_УправлениеДоступомПовтИсп.ПолучитьРуководителейПользователя(ОсновнойМенеджер);
		ЭтоРукводительАккаунтМенеджера = Не (МассивРуководителей.Найти(ТекПользователь) = Неопределено);
		
		// Если это аккаунт-менеджер или его руководитель разрешаем записать интерес, не смотря на наличие / отсутсвие
		// активных.
		Если ЭтоАккаунтМенеджер ИЛИ ЭтоРукводительАккаунтМенеджера ИЛИ Интерес.Ответственный = ОсновнойМенеджер Тогда
			Возврат МожноЗаписатьИнтерес;
		Иначе
			// Если нет, то проверяем активные по данному клиенту / типу услуги.
			МассивИнтересовКлиента = CRM_ОбщегоНазначенияСервер.ПолучитьМассивИнтересовКлиента(Интерес.Ссылка,
				 Интерес.Партнер,
				 Интерес.ТипУслуги);
			Для Каждого ЭлементМассива Из МассивИнтересовКлиента Цикл
				ОтветственныйМенеджер = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ЭлементМассива, "Ответственный");
				Если ОтветственныйМенеджер = Интерес.Ответственный Тогда
					// Если уже есть интерес с данным ответственным.
					МожноЗаписатьИнтерес = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
	Возврат МожноЗаписатьИнтерес;
КонецФункции // ПроверитьВозможностьЗаписиИнтереса()

// Функция проверяет возможность записи интереса потенциального клиента.
//
// Параметры:
//	Интерес	- ДокументСсылка	- Текущий интерес.
//
// Возвращаемое значение:
//	Булево	- Возможность записи интереса.
//
Функция ПроверитьВозможностьЗаписиИнтересаПотенциальногоКлиента(Интерес) Экспорт
	МожноЗаписатьИнтерес = Истина;
	// Получаем все прочие интересы потенциального клиента.
	Если ЗначениеЗаполнено(Интерес.ПотенциальныйКлиент) Тогда
		МассивИнтересовКлиента = CRM_ОбщегоНазначенияСервер.ПолучитьМассивИнтересовПотенциальногоКлиента(Интерес.Ссылка,
			 Интерес.ПотенциальныйКлиент);
		Если МассивИнтересовКлиента.Количество() > 0 Тогда
			МожноЗаписатьИнтерес = Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат МожноЗаписатьИнтерес;
КонецФункции // ПроверитьВозможностьЗаписиИнтересаПотенциальногоКлиента()	

// Процедура - Показать наше предупреждение
//
// Параметры:
//  ТекстПредупреждения			 - ТекстПредупреждения - Строка предупреждения.
//  Таймаут						 - Число - Таймаут открытия.
//  Заголовок					 - Строка - Заголовок.
//  ОписаниеОповещенияОЗакрытии	 - ОписаниеОповещения - Оповещение о закрытии. 
//
Процедура ПоказатьНашеПредупреждение(ТекстПредупреждения, Таймаут = 0, Заголовок = "",
	 ОписаниеОповещенияОЗакрытии = Неопределено) Экспорт
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	ПараметрыОткрытия.Вставить("Таймаут", Таймаут);
	ПараметрыОткрытия.Вставить("Заголовок", Заголовок);
	ОткрытьФорму("ОбщаяФорма.CRM_ФормаПредупреждения", ПараметрыОткрытия, , , , , ОписаниеОповещенияОЗакрытии);
КонецПроцедуры

// Возвращает Истина, если клиентское приложение является мобильным клиентом.
//
// Возвращаемое значение:
//  Булево - если нет клиентского приложения, возвращается Ложь.
//
Функция ЭтоМобильныйКлиент() Экспорт
	
	Возврат CRM_ОбщегоНазначенияСервер.ЭтоМобильныйКлиент();
	
КонецФункции

#КонецОбласти // Прочие

#Область ЗаписьОбъектов

// Записать объект и замерить длительность его записи.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма в которой выполняется вызов этой функции.
//  ЕстьВопросыПередЗаписью - Булево - Истина, если при записи могут отображаться вопросы пользователю.
//  ДействиеПослеЗаписи - ОписаниеОповещения - обработчик, выполняемый после записи объекта.
//
Процедура Записать(Форма, ЕстьВопросыПередЗаписью = Ложь, ДействиеПослеЗаписи = Неопределено) Экспорт
	
	ПараметрыЗаписи = СтруктураПараметровЗаписиОбъекта();
	ПараметрыЗаписи.ЕстьВопросыПередЗаписью = ЕстьВопросыПередЗаписью;
	
	Если ДействиеПослеЗаписи <> Неопределено Тогда
		ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ДействиеПослеЗаписи);
	КонецЕсли;
	
	ЗаписатьОбъект(Форма, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область Поддержка

// Процедура определяет уровень поддержки
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - Форма
//
Процедура ОпределитьУровеньПоддержки(Форма) Экспорт
	
	Если Не Форма.ЭтоПоддержка Тогда
		Возврат;
	КонецЕсли;
	
	ПоляФормы = Новый Структура;
	ПоляФормы.Вставить("КонтактноеЛицо", Форма.Интерес.КонтактноеЛицо);
	ПоляФормы.Вставить("Организация",    Форма.Интерес.Организация);
	ПоляФормы.Вставить("Ответственный",  Форма.Интерес.Ответственный);
	ПоляФормы.Вставить("Партнер",        Форма.Интерес.Партнер);
	ПоляФормы.Вставить("ТипУслуги",      Форма.Интерес.ТипУслуги);
	ПоляФормы.Вставить("ТипОбращения",   Форма.Интерес.ТипОбращения);
	ПоляФормы.Вставить("Проект",         Форма.Интерес.Проект);
	
	ДанныеУровня = CRM_ОбщегоНазначенияСервер.ДанныеУровняПоддержки(ПоляФормы);
	
	Форма.УровеньПоддержки  = ДанныеУровня.Уровень;
	Форма.ВремяРеакции = ДанныеУровня.ВремяРеакции;
	Форма.ВремяРешения = ДанныеУровня.ВремяРешения;
	Форма.УровеньПоддержкиОписание = ДанныеУровня.Описание;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заглушка для методов типа НачатьЗапускПриложения, с обязательным ОписаниеОповещения
Процедура ОбработчикОповещенияБезДействия(Результат, ДополнительныеПараметры) Экспорт
	Возврат;
КонецПроцедуры

// Заглушка для методов типа НачатьЗапускПриложения, с обязательным ОписаниеОповещения
Процедура ОбработчикОповещенияБезДействияТолькоДополнительныеПараметры(ДополнительныеПараметры) Экспорт
	Возврат;
КонецПроцедуры

// Заглушка для методов типа НачатьЗапускПриложения, с обязательным ОписаниеОповещения, для веб клиента
// в веб клиенте возникает ошибка, если у процедуры нет параметра
Процедура ОбработчикОповещенияБезДействияТолькоДополнительныеПараметрыВебКлиент(Результат,
	 ДополнительныеПараметры) Экспорт
	Возврат;
КонецПроцедуры

Процедура ВывестиСообщениеПоОкончанииФоновогоЗадания(Результат, ДополнительныеПараметры) Экспорт
	Если Результат.Статус = "Выполнено" Тогда
		Сообщение = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ТипЗнч(Сообщение) = Тип("Структура") Тогда
			ПоказатьНашеПредупреждение(Сообщение.ТекстСообщения, , Сообщение.Заголовок);
		КонецЕсли;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		Сообщение = Результат.КраткоеПредставлениеОшибки;
		Заголовок = "Ошибка";
		ПоказатьНашеПредупреждение(Сообщение, , Заголовок);		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик открытия контакта.
//
// Параметры:
//  РезультатЗакрытия		 - 			 - 
//  ДополнительныеПараметры	 - Структура - Структура дополнительных параметров.
//
Процедура ОткрытьНайденныйКонтакт(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	ПараметрыФормы = Новый Структура("Ключ", ДополнительныеПараметры.Ключ);
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Клиенты.КонтактноеЛицо.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры // ОткрытьНайденныйКонтакт()	

#Область РаботаСПользовательскимиНастройкамиДинамическихСписков
// Функция переопределяет обработчик события "ПередНачаломДобавления" для дерева пользовательских настроек списка.
//
// Параметры:
//	ЭтаФорма					- ФормаКлиентскогоПриложения		- Форма
//	СвойстваДинамическогоСписка	- Структура				- Структура свойств динамического списка.
//	Элемент						- ЭлементУправления		- Элемент управляемой формы.
//	Отказ						- Булево				- Флаг отмены.
//	Копирование					- Булево				- Флаг копирования.
//	Родитель					- СтрокаДереваЗначений	- Родитель
//	Группа						- СтрокаДереваЗначений	- Группа
//
// Возвращаемое значение:
//	Булево	- Результат выполнения.
//
Функция ДеревоПользовательскиеНастройкиСпискаПередНачаломДобавления(ЭтаФорма,
	 СвойстваДинамическогоСписка, Элемент, Отказ, Копирование, Родитель,
	 Группа) Экспорт
	Результат = Ложь;
	Отказ = Истина;
	Если СвойстваДинамическогоСписка.ИмяДереваНастроек = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекущийРодитель = Неопределено;
	Иначе
		ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	КонецЕсли;
	Если Копирование Тогда
		Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЭтоКорневойЭлемент Тогда
			Возврат Результат;
		КонецЕсли;
		ИдентификаторНастройки	= ТекущиеДанные.Идентификатор;
		НаименованиеНастройки	= ТекущиеДанные.Наименование;
	Иначе
		ИдентификаторНастройки	= Строка(Новый УникальныйИдентификатор());
		НаименованиеНастройки	= "";
	КонецЕсли;
	ПараметрыФормы = Новый Структура("СвойстваДинамическогоСписка,ИдентификаторНастройки,
		|НаименованиеНастройки,Копирование",
		СвойстваДинамическогоСписка, ИдентификаторНастройки, НаименованиеНастройки, Копирование);
	Если ТекущиеДанные <> Неопределено И НЕ Копирование Тогда
		ПараметрыФормы.Вставить("ИдентификаторНастройкиШаблон", ТекущиеДанные.Идентификатор);
	КонецЕсли;
	Форма = ПолучитьФорму("ОбщаяФорма.CRM_ПользовательскиеНастройкиСписка", ПараметрыФормы, ЭтаФорма);
	Форма.ОткрытьМодально();
	Если Форма.ДанныеБылиИзменены Тогда
		Если ТекущиеДанные = Неопределено Тогда
			ЭлементыДляДобавления = ЭтаФорма[СвойстваДинамическогоСписка.ИмяДереваНастроек].ПолучитьЭлементы();
		Иначе
			Если Копирование Тогда
				Если ТекущийРодитель = Неопределено Тогда
					ЭлементыДляДобавления = ЭтаФорма[СвойстваДинамическогоСписка.ИмяДереваНастроек].ПолучитьЭлементы();
				Иначе
					ЭлементыДляДобавления = ТекущийРодитель.ПолучитьЭлементы();
				КонецЕсли;
			Иначе
				ЭлементыДляДобавления = ТекущиеДанные.ПолучитьЭлементы();
			КонецЕсли;
		КонецЕсли;
		НовыйЭлемент = ЭлементыДляДобавления.Добавить();
		НовыйЭлемент.Наименование	= Форма.НаименованиеНастройки;
		НовыйЭлемент.Идентификатор	= Форма.ИдентификаторНастройки;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 
				И НЕ ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяДереваНастроек].Развернут(ТекущиеДанные.ПолучитьИдентификатор()) Тогда
				ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяДереваНастроек].Развернуть(ТекущиеДанные.ПолучитьИдентификатор(),
					 Истина);
			КонецЕсли;
		КонецЕсли;
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // ДеревоПользовательскиеНастройкиСпискаПередНачаломДобавления()

// Функция переопределяет обработчик события "ПередНачаломИзменения" для дерева пользовательских настроек списка.
//
// Параметры:
//	ЭтаФорма					- ФормаКлиентскогоПриложения		- Форма
//	СвойстваДинамическогоСписка	- Структура				- Структура свойств динамического списка.
//	Элемент						- ЭлементУправления		- Элемент управляемой формы.
//	Отказ						- Булево				- Флаг отмены.
//
// Возвращаемое значение:
//	Булево	- Результат выполнения.
//
Функция ДеревоПользовательскиеНастройкиСпискаПередНачаломИзменения(ЭтаФорма,
	 СвойстваДинамическогоСписка, Элемент,
	 Отказ) Экспорт
	Отказ = Истина;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЭтоКорневойЭлемент Тогда
		Возврат Ложь;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("СвойстваДинамическогоСписка,ИдентификаторНастройки,НаименованиеНастройки",
		СвойстваДинамическогоСписка, ТекущиеДанные.Идентификатор, ТекущиеДанные.Наименование);
	Форма = ПолучитьФорму("ОбщаяФорма.CRM_ПользовательскиеНастройкиСписка", ПараметрыФормы, ЭтаФорма);
	Форма.ОткрытьМодально();
	Если Форма.ДанныеБылиИзменены Тогда
		ТекущиеДанные.Наименование = Форма.НаименованиеНастройки;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции // ДеревоПользовательскиеНастройкиСпискаПередНачаломИзменения()

// Функция возвращает массив идентификаторов текущего и подчиненных элементов ветки дерева пользовательских настроек
// списка.
//
// Параметры:
//	ТекущиеДанные			- СтрокаДереваЗначений	- Текущие данные.
//	ИдентификаторСписка		- Строка				- Идентификатор списка.
//	МассивИдентификаторов	- Массив				- Массив идентификаторов.
//
// Возвращаемое значение:
//	Массив	- Массив идентификаторов.
//
Функция ПолучитьРекурсивноМассивИдентификаторовИзДереваПользовательскихНастроекСписка(ТекущиеДанные,
	 ИдентификаторСписка,
	 МассивИдентификаторов = Неопределено)
	Если МассивИдентификаторов = Неопределено Тогда
		МассивИдентификаторов = Новый Массив();
	КонецЕсли;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат МассивИдентификаторов;
	КонецЕсли;
	Если МассивИдентификаторов.Найти(ТекущиеДанные.Идентификатор) = Неопределено Тогда
		МассивИдентификаторов.Добавить(ТекущиеДанные.Идентификатор);
	КонецЕсли;
	ПодчиненныеЭлементы = ТекущиеДанные.ПолучитьЭлементы();
	Для Каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементы Цикл
		Если МассивИдентификаторов.Найти(ПодчиненныйЭлемент.Идентификатор) = Неопределено Тогда
			МассивИдентификаторов.Добавить(ПодчиненныйЭлемент.Идентификатор);
		КонецЕсли;
		ПолучитьРекурсивноМассивИдентификаторовИзДереваПользовательскихНастроекСписка(ПодчиненныйЭлемент,
			 ИдентификаторСписка,
			 МассивИдентификаторов);
	КонецЦикла;
	Возврат МассивИдентификаторов;
КонецФункции // ПолучитьРекурсивноМассивИдентификаторовИзДереваПользовательскихНастроекСписка()

// Процедура переопределяет обработчик события ПередУдалением для дерева пользовательских настроек списка.
//
// Параметры:
//	ЭтаФорма			- ФормаКлиентскогоПриложения	- Форма
//	ИдентификаторСписка	- Строка			- Идентификатор списка.
//	Элемент				- ЭлементУправления	- Элемент управляемой формы.
//	Отказ				- Булево			- Флаг отмены.
//
Процедура ДеревоПользовательскиеНастройкиСпискаПередУдалением(ЭтаФорма, ИдентификаторСписка, Элемент, Отказ) Экспорт
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЭтоКорневойЭлемент Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения("ДеревоПользовательскиеНастройкиСпискаПередУдалениемЗавершение",
		 ЭтотОбъект, Новый Структура("ТекущиеДанные, ИдентификаторСписка", ТекущиеДанные,
		 ИдентификаторСписка));
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Удалить настройку?'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
КонецПроцедуры // ДеревоПользовательскиеНастройкиСпискаПередУдалением()

Процедура ДеревоПользовательскиеНастройкиСпискаПередУдалениемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		МассивИдентификаторовДляУдаления = ПолучитьРекурсивноМассивИдентификаторовИзДереваПользовательскихНастроекСписка(ДополнительныеПараметры.ТекущиеДанные,
			 ДополнительныеПараметры.ИдентификаторСписка);
		CRM_ОбщегоНазначенияСервер.УдалитьПользовательскиеНастройкиДинамическогоСписка(ДополнительныеПараметры.ИдентификаторСписка,
			 МассивИдентификаторовДляУдаления);
	КонецЕсли;
КонецПроцедуры // ДеревоПользовательскиеНастройкиСпискаПередУдалением()

// Процедура настройки отображения элементов управления пользовательских настроек списка.
//
// Параметры:
//	ЭтаФорма					- ФормаКлиентскогоПриложения	- Форма
//	СвойстваДинамическогоСписка	- Структура			- Структура свойств динамического списка.
//
Процедура НастроитьВидимостьДоступностьЭлементовПользовательскихНастроекСписка(ЭтаФорма, СвойстваДинамическогоСписка)
	Если СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка <> Неопределено Тогда
		Если СвойстваДинамическогоСписка.ИмяДереваНастроек <> Неопределено Тогда
			ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяДереваНастроек].Видимость 
				= ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка].Пометка;
		КонецЕсли;
	КонецЕсли;
	ЭтаФорма.ОбновитьОтображениеДанных();
КонецПроцедуры // НастроитьВидимостьДоступностьЭлементовПользовательскихНастроекСписка()

// Процедура - обработчик команды "КомандаПользовательскиеНастройкиСписка".
//
// Параметры:
//	ЭтаФорма					- ФормаКлиентскогоПриложения	- Форма
//	СвойстваДинамическогоСписка	- Структура			- Структура свойств динамического списка.
//
Процедура КомандаПользовательскиеНастройкиСписка(ЭтаФорма, СвойстваДинамическогоСписка) Экспорт
	Если СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка <> Неопределено 
		И СвойстваДинамическогоСписка.ИмяДереваНастроек <> Неопределено Тогда
		ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка].Пометка 
			= НЕ ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка].Пометка;
		НастроитьВидимостьДоступностьЭлементовПользовательскихНастроекСписка(ЭтаФорма, СвойстваДинамическогоСписка);
		Если ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка].Пометка Тогда
			ИдентификаторСтрокиОсновнойНастройки =
				ПользовательскиеНастройкиСпискаПолучитьИдентификаторСтрокиОсновнойНастройки(ЭтаФорма[СвойстваДинамическогоСписка.ИмяДереваНастроек].ПолучитьЭлементы());
			Если ИдентификаторСтрокиОсновнойНастройки <> Неопределено Тогда
				ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяДереваНастроек].ТекущаяСтрока =
					ИдентификаторСтрокиОсновнойНастройки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // КомандаПользовательскиеНастройкиСписка()

// Функция открывает форму пользовательских настроек списка для редактирования всех настроек.
//
// Параметры:
//	ЭтаФорма					- ФормаКлиентскогоПриложения	- Форма
//	СвойстваДинамическогоСписка	- Структура			- Структура свойств динамического списка.
//
// Возвращаемое значение:
//	Булево	- Флаг изменения данных на форме.
//
Процедура ПользовательскиеНастройкиСпискаОткрытьФормуНастроекВсеНастройки(ЭтаФорма,
	 СвойстваДинамическогоСписка,
	 ОписаниеОповещенияОЗавершении) Экспорт
	ПараметрыФормы = Новый Структура("СвойстваДинамическогоСписка", СвойстваДинамическогоСписка);
	Если СвойстваДинамическогоСписка.Свойство("СкрытьУсловноеОформлениеВНастройках") Тогда
		ПараметрыФормы.Вставить("СкрытьУсловноеОформление");
	КонецЕсли;
	ОткрытьФорму("ОбщаяФорма.CRM_ПользовательскиеНастройкиСпискаОбщая", ПараметрыФормы, ЭтаФорма, , , ,
		 ОписаниеОповещенияОЗавершении,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры // ПользовательскиеНастройкиСпискаОткрытьФормуНастроекВсеНастройки()

// Функция возвращает идентификатор строки основной настройки или Неопределено если основная настройка не определена.
//
// Параметры:
//	ЭлементыДерева	- КоллекцияСтрокДереваЗначений	- Элементы дерева.
//
// Возвращаемое значение:
//	Неопределено или Число	- Идентификатор строки основной настройки.
//
Функция ПользовательскиеНастройкиСпискаПолучитьИдентификаторСтрокиОсновнойНастройки(ЭлементыДерева)
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Если Элемент.ЭтоОсновнаяНастройка Тогда
			Возврат Элемент.ПолучитьИдентификатор();
		КонецЕсли;
		ПодчиненныеЭлементы = Элемент.ПолучитьЭлементы();
		Если ПодчиненныеЭлементы.Количество() > 0 Тогда
			Идентификатор = ПользовательскиеНастройкиСпискаПолучитьИдентификаторСтрокиОсновнойНастройки(ПодчиненныеЭлементы);
			Если Идентификатор <> Неопределено Тогда
				Возврат Идентификатор;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции // ПользовательскиеНастройкиСпискаПолучитьИдентификаторСтрокиОсновнойНастройки()

// Процедура позиционирует курсор в дереве настроек на основной настройке.
//
// Параметры:
//	ЭтаФорма					- ФормаКлиентскогоПриложения	- Форма
//	СвойстваДинамическогоСписка	- Структура			- Структура свойств динамического списка.
//	РазвернутьДерево			- Булево			- Признак раскрытия дерева.
//
Процедура ПользовательскиеНастройкиСпискаСпозиционироватьсяНаОсновнойНастройке(ЭтаФорма,
	 СвойстваДинамическогоСписка,
	 РазвернутьДерево = Ложь) Экспорт
	ИдентификаторСтрокиОсновнойНастройки =
		ПользовательскиеНастройкиСпискаПолучитьИдентификаторСтрокиОсновнойНастройки(ЭтаФорма[СвойстваДинамическогоСписка.ИмяДереваНастроек].ПолучитьЭлементы());
	Если ИдентификаторСтрокиОсновнойНастройки <> Неопределено Тогда
		ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяДереваНастроек].ТекущаяСтрока = ИдентификаторСтрокиОсновнойНастройки;
	КонецЕсли;
	Если РазвернутьДерево Тогда
		CRM_ОбщегоНазначенияКлиентСервер.РазвернутьТаблицуФормы(
			ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяДереваНастроек],
			ЭтаФорма[СвойстваДинамическогоСписка.ИмяДереваНастроек].ПолучитьЭлементы()[0].ПолучитьИдентификатор(),
			Истина);
	КонецЕсли;
КонецПроцедуры // ПользовательскиеНастройкиСпискаСпозиционироватьсяНаОсновнойНастройке()

// Процедура вызывается из обработчика события формы "ПриОткрытии".
//
// Параметры:
//	ЭтаФорма					- ФормаКлиентскогоПриложения	- Форма
//	СвойстваДинамическогоСписка	- Структура			- Структура свойств динамического списка.
//
Процедура ПользовательскиеНастройкиСпискаПриОткрытии(ЭтаФорма, СвойстваДинамическогоСписка) Экспорт
	НастроитьВидимостьДоступностьЭлементовПользовательскихНастроекСписка(ЭтаФорма, СвойстваДинамическогоСписка);
	Если СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка = Неопределено
		ИЛИ	ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка].Пометка Тогда
		ПользовательскиеНастройкиСпискаСпозиционироватьсяНаОсновнойНастройке(ЭтаФорма, СвойстваДинамическогоСписка);
	КонецЕсли;
КонецПроцедуры // ПользовательскиеНастройкиСпискаПриОткрытии()

// Процедура устанавливает / сбрасывает признак "ЭтоОсновнаяНастройка" в дереве пользовательских настроек.
//
// Параметры:
//	ЭлементыДерева				- КоллекцияСтрокДереваЗначений	- Элементы дерева.
//	ИдентификаторТекущихДанных	- Число							- Идентификатор текущих данных.
//	Установить					- Булево						- Признак установки основной настройки.
//
Процедура ПользовательскиеНастройкиСпискаУстановитьПризнакОсновнаяВДереве(ЭлементыДерева,
	 ИдентификаторТекущихДанных,
	 Установить)
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Идентификатор = Элемент.ПолучитьИдентификатор();
		Если Идентификатор = ИдентификаторТекущихДанных Тогда
			Элемент.ЭтоОсновнаяНастройка = Установить;
		Иначе
			Элемент.ЭтоОсновнаяНастройка = Ложь;
		КонецЕсли;
		ПодчиненныеЭлементы = Элемент.ПолучитьЭлементы();
		ПользовательскиеНастройкиСпискаУстановитьПризнакОсновнаяВДереве(ПодчиненныеЭлементы,
			 ИдентификаторТекущихДанных,
			 Установить);
	КонецЦикла;
КонецПроцедуры // ПользовательскиеНастройкиСпискаУстановитьПризнакОсновнаяВДереве() 

// Процедура-обработчик команды "КомандаДеревоПользовательскиеНастройкиСпискаОсновная"
//
// Параметры:
//	ЭтаФорма					- ФормаКлиентскогоПриложения	- Форма
//	СвойстваДинамическогоСписка	- Структура			- Структура свойств динамического списка.
//
Процедура КомандаДеревоПользовательскиеНастройкиСпискаОсновная(ЭтаФорма, СвойстваДинамическогоСписка) Экспорт
	Дерево = ЭтаФорма[СвойстваДинамическогоСписка.ИмяДереваНастроек];
	ЭлементДерево = ЭтаФорма.Элементы.Найти(СвойстваДинамическогоСписка.ИмяДереваНастроек);
	Если ЭлементДерево = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ТекущиеДанные = ЭлементДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИдентификаторТекущихДанных = ТекущиеДанные.ПолучитьИдентификатор();
	Установить = (НЕ ТекущиеДанные.ЭтоОсновнаяНастройка);
	ПользовательскиеНастройкиСпискаУстановитьПризнакОсновнаяВДереве(Дерево.ПолучитьЭлементы(),
		 ИдентификаторТекущихДанных,
		 Установить);
	Если СвойстваДинамическогоСписка.ИмяКнопкиДеревоПользовательскиеНастройкиСпискаОсновная <> Неопределено Тогда
		ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяКнопкиДеревоПользовательскиеНастройкиСпискаОсновная].Пометка =
			ТекущиеДанные.ЭтоОсновнаяНастройка;
	КонецЕсли;
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(ЭлементДерево);
КонецПроцедуры // КомандаДеревоПользовательскиеНастройкиСпискаОсновная()

// Процедура устанавливает пометки кнопкам в подменю, вызывается из процедуры
// "ПользовательскиеНастройкиСпискаОбработкаВыбораНастройки".
//
// Параметры:
//	Элементы					- ЭлементыФормы	- Элементы формы.
//	ИмяКнопкиТекущейНастройки	- Строка		- Имя кнопки текущей настройки.
//
Процедура ПользовательскиеНастройкиСпискаУстановитьПометкиКнопкамНастроек(Элементы, ИмяКнопкиТекущейНастройки)
	Для Каждого Кнопка Из Элементы Цикл
		Если ТипЗнч(Кнопка) = Тип("ГруппаФормы") Тогда
			ПользовательскиеНастройкиСпискаУстановитьПометкиКнопкамНастроек(Кнопка.ПодчиненныеЭлементы,
				 ИмяКнопкиТекущейНастройки);
		ИначеЕсли ТипЗнч(Кнопка) = Тип("КнопкаФормы") Тогда
			Кнопка.Пометка = (Кнопка.Имя = ИмяКнопкиТекущейНастройки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ПользовательскиеНастройкиСпискаУстановитьПометкиКнопкамНастроек()

Процедура ПользовательскиеНастройкиСпискаОбработкаВыбораНастройкиЗавершение(ЭтаФорма,
	 СвойстваДинамическогоСписка, Команда,
	 ОписаниеОповещенияОЗавершении = Неопределено) Экспорт
	ИмяКоманды = Команда.Имя;
	ИмяКоманды = СтрЗаменить(ИмяКоманды, "КомандаПользовательскиеНастройкиСписка_", "");
	ИмяКоманды = СтрЗаменить(ИмяКоманды, "_" + СвойстваДинамическогоСписка.ИмяСписка, "");
	Если ИмяКоманды = "Настройки" Тогда
		ПользовательскиеНастройкиСпискаОткрытьФормуНастроекВсеНастройки(ЭтаФорма,
			 СвойстваДинамическогоСписка,
			 ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;
	Если ИмяКоманды = "БезНастроек" Тогда
		ИдентификаторНастройки = "";
	Иначе
		ИдентификаторНастройки = СтрЗаменить(ИмяКоманды, "_", "-");
		Попытка
			// BSLLS:UnusedLocalVariable-off
			ТестУникальныйИдентификатор = Новый УникальныйИдентификатор(ИдентификаторНастройки);
			// BSLLS:UnusedLocalVariable-on
		Исключение
			Возврат;
		КонецПопытки;
	КонецЕсли;
	ЭтаФорма[СвойстваДинамическогоСписка.ИмяПеременнойТекущейНастройки] = ИдентификаторНастройки;
	ИмяКнопки = "КнопкаПользовательскиеНастройкиСписка_" + ИмяКоманды + "_" + СвойстваДинамическогоСписка.ИмяСписка;
	ИмяЭлементаПодменю = СвойстваДинамическогоСписка.ИмяЭлементаПодменю;
	ПользовательскиеНастройкиСпискаУстановитьПометкиКнопкамНастроек(ЭтаФорма.Элементы[ИмяЭлементаПодменю].ПодчиненныеЭлементы,
		 ИмяКнопки);
	Если ИмяКоманды = "БезНастроек" Тогда
		ЭтаФорма.Элементы[ИмяЭлементаПодменю].Заголовок = НСтр("ru='Все'");
	Иначе
		ЗаголовокПодменю = ЭтаФорма.Элементы[ИмяКнопки].Заголовок;
		Если СтрДлина(ЗаголовокПодменю) > 40 Тогда
			ЗаголовокПодменю = Лев(ЗаголовокПодменю, 40 - 3) + "...";
		КонецЕсли;
		ЭтаФорма.Элементы[ИмяЭлементаПодменю].Заголовок = ЗаголовокПодменю;
	КонецЕсли;
КонецПроцедуры // ПользовательскиеНастройкиСпискаОбработкаВыбораНастройки()

Процедура ОткрытьПредмет(Предмет) Экспорт

	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента",
			Новый Структура("Ключ, ОткрытиеИзФормы", Предмет, Истина), , , , , , РежимОткрытияОкнаФормы.Независимый);
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента",
			Новый Структура("Ключ, ОткрытиеИзФормы", Предмет, Истина), , , , , , РежимОткрытияОкнаФормы.Независимый);
	Иначе
			ПоказатьЗначение(, Предмет);
		
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьФормуОбращения(Данные, Источник) Экспорт
	
	Если Данные = Неопределено Тогда
		ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаНовая");
		Возврат;
	КонецЕсли;
	
	ТипОбращения = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.ТекущийПользователь(),
		 "ОсновнойТипОбращения");
	Если Не ЗначениеЗаполнено(ТипОбращения) Тогда
		 ТипОбращения = ПредопределенноеЗначение("Справочник.CRM_ТипыОбращений.Обращение");
	КонецЕсли;
	Если Источник = "Партнер" Тогда
		Если ТипЗнч(Данные) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			ПараметрыФормы = Новый Структура("ПотенциальныйКлиент", Данные);
			ПараметрыФормы.Вставить("Наименование", CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Данные, "Наименование"));
		Иначе
			ПараметрыФормы = Новый Структура("Партнер", Данные);
		КонецЕсли;
		ПараметрыФормы.Вставить("ТипОбращения", ТипОбращения);
		ПараметрыФормы.Вставить("ИсточникОткрытияМастера", CRM_МетодыФормОбработокСервер.МастерОткрытИзОбращений());
		ПараметрыФормы.Вставить("НеОбновлятьТипОбращения", Истина);
		ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыФормы, ЭтотОбъект);
	ИначеЕсли Источник = "Счет" Тогда
		ПараметрыФормы = Новый Структура("Партнер", Данные.Партнер);
		ПараметрыФормы.Вставить("ТипОбращения", ТипОбращения);
		ПараметрыФормы.Вставить("ИсточникОткрытияМастера", CRM_МетодыФормОбработокСервер.МастерОткрытИзОбращений());
		ПараметрыФормы.Вставить("НеОбновлятьТипОбращения", Истина);
		ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыФормы, ЭтотОбъект);
	ИначеЕсли Источник = "Почта" Тогда
		ПараметрыФормы = Новый Структура;
		Если ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			ПараметрыФормы.Вставить("ПисьмоВходящее", Данные.Ссылка);
			ОтправительАдрес = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Данные.Ссылка, "ОтправительАдрес");
		Иначе
			ПараметрыФормы.Вставить("ПисьмоИсходящее", Данные.Ссылка);
			ОтправительАдрес = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Данные.Ссылка, "CRM_ОтправительАдрес");
		КонецЕсли;
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Данные.Ссылка);
		ПараметрыФормы.Вставить("МассивСсылок", МассивСсылок);
		ПараметрыФормы.Вставить("АдресЭП", ОтправительАдрес);
		ПараметрыФормы.Вставить("ТемаПисьма", Данные.Тема);
		ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма",  ПараметрыФормы, ЭтотОбъект, ОтправительАдрес);
	ИначеЕсли Источник = "Телефония" Тогда
		СтруктураЗвонка = Новый Структура("ИдентификаторЗвонка,Контакт,НомерТелефона,НовыйЗвонок",
			Данные.сфпИдентификаторЗвонка, Данные.АбонентКонтакт, Данные.АбонентКакСвязаться, Данные.Ссылка);
		сфпСофтФонПроКлиентПереопределяемый.сфпРегистрацияОбращения(СтруктураЗвонка);
	ИначеЕсли Источник = "Заявка" Тогда
		ПараметрыФормы = Новый Структура("Заявка", Данные);
		ПараметрыФормы.Вставить("ТипОбращения", ТипОбращения);
		ПараметрыФормы.Вставить("ИсточникОткрытияМастера", CRM_МетодыФормОбработокСервер.МастерОткрытИзОбращений());
		ПараметрыФормы.Вставить("НеОбновлятьТипОбращения", Истина);
		ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыФормы, ЭтотОбъект);
	ИначеЕсли Источник = "КоммерческоеПредложение" Или Источник = "ПотенциальныеКлиенты" Тогда
		ПараметрыФормы = Новый Структура("Партнер", Данные.Партнер);
		ПараметрыФормы.Вставить("ТипОбращения", ТипОбращения);
		ПараметрыФормы.Вставить("ИсточникОткрытияМастера", CRM_МетодыФормОбработокСервер.МастерОткрытИзОбращений());
		ПараметрыФормы.Вставить("НеОбновлятьТипОбращения", Истина);
		ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыФормы, ЭтотОбъект);
	ИначеЕсли Источник = "Сообщение" Тогда
		ПараметрыФормы = Новый Структура("Диалог", Данные);
		ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСНастройкамиПолейОтображенияСодержания

// Функция открывает форму настройки полей отображения содержания.
//
// Параметры:
//	ЭтаФорма				- ФормаКлиентскогоПриложения	- Форма
//	ОграничениеТипов		- ОписаниеТипов		- Ограничение типов.
//
// Возвращаемое значение:
//	Булево	- Результат открытия.
//
Процедура НастройкиПолейОтображенияСодержанияОткрытьФормуНастройки(ОграничениеТипов,
	 Объект = Неопределено, ЗаполнитьПоУмолчанию = Ложь,
	 ОписаниеОповещения = Неопределено) Экспорт
	СтруктураПараметры = Новый Структура("ЗаполнитьПоУмолчанию, Объект", ЗаполнитьПоУмолчанию, Объект);
	Если ТипЗнч(ОграничениеТипов) = Тип("ОписаниеТипов") И ОграничениеТипов.Типы().Количество() > 0 Тогда
		СтруктураПараметры.Вставить("ОграничениеТипов", ОграничениеТипов);
	КонецЕсли;
	ОткрытьФорму("ОбщаяФорма.CRM_НастройкаПоляОтображенияСодержания", СтруктураПараметры, , , , , ОписаниеОповещения);
КонецПроцедуры // НастройкиПолейОтображенияСодержанияОткрытьФормуНастройки()

// Процедура сохраняет настройки полей отображения содержания в файл.
//
// Параметры:
//	Нет.
//
Процедура НастройкиПолейОтображенияСодержанияСохранитьВФайл() Экспорт
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ВыборФайла.Заголовок = НСтр("ru='Сохранение файла настроек полей отображения содержания'");
	ВыборФайла.МножественныйВыбор = Ложь;
	ВыборФайла.ПолноеИмяФайла = НСтр("ru='Настройки отображения содержания'") + ".xml";
	ВыборФайла.Фильтр = НСтр("ru='Файлы настроек отображения содержания (*.xml)|*.xml'");
	ВыборФайла.ПроверятьСуществованиеФайла = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиПолейОтображенияСодержанияСохранитьВФайлЗавершение",
		 ЭтотОбъект);
	ВыборФайла.Показать(ОписаниеОповещения);
КонецПроцедуры // НастройкиПолейОтображенияСодержанияСохранитьВФайл()

Процедура НастройкиПолейОтображенияСодержанияСохранитьВФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		Результат = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияСохранитьВФайл(ВыбранныеФайлы[0]);
		Если НЕ ПустаяСтрока(Результат) Тогда
			ПоказатьПредупреждение(, Результат);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // НастройкиПолейОтображенияСодержанияСохранитьВФайл()

// Функция загружает настройки полей отображения содержания из файла.
//
// Параметры:
//	ПоместитьТаблицуВоВременноеХранилищеПоАдресу	- Строка	- Адрес во временном хранилище.
//
// Возвращаемое значение:
//	Булево	- Результат загрузки.
//
Процедура НастройкиПолейОтображенияСодержанияЗагрузитьИзФайла(ПоместитьТаблицуВоВременноеХранилищеПоАдресу = Неопределено,
	 ОписаниеОповещенияЗавершение = Неопределено) Экспорт
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВыборФайла.Заголовок = НСтр("ru='Открытие файла настроек полей отображения содержания'");
	ВыборФайла.МножественныйВыбор = Ложь;
	ВыборФайла.Фильтр = НСтр("ru='Файлы настроек отображения содержания (*.xml)|*.xml'");
	ВыборФайла.ПроверятьСуществованиеФайла = Истина;
	ДополнительныеПараметры = Новый Структура("ПоместитьТаблицуВоВременноеХранилищеПоАдресу,
		| ОписаниеОповещенияЗавершение", ПоместитьТаблицуВоВременноеХранилищеПоАдресу,
		 ОписаниеОповещенияЗавершение);
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиПолейОтображенияСодержанияЗагрузитьИзФайлаЗавершение",
		 ЭтотОбъект,
		 ДополнительныеПараметры);
	ВыборФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры // НастройкиПолейОтображенияСодержанияЗагрузитьИзФайла()

Процедура НастройкиПолейОтображенияСодержанияЗагрузитьИзФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла", ВыбранныеФайлы[0]);
		ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиПолейОтображенияСодержанияЗагрузитьИзФайлаОтветНаВопрос",
			 ЭтотОбъект,
			 ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Все текущие настройки будут перезаписаны,
			| продолжить?'"), РежимДиалогаВопрос.ДаНет, ,
			 КодВозвратаДиалога.Нет);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение, Ложь);
	КонецЕсли;
	
КонецПроцедуры 

Процедура НастройкиПолейОтображенияСодержанияЗагрузитьИзФайлаОтветНаВопрос(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		Результат = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияЗагрузитьИзФайла(ДополнительныеПараметры.ПолноеИмяФайла,
			ДополнительныеПараметры.ПоместитьТаблицуВоВременноеХранилищеПоАдресу);
		Если ПустаяСтрока(Результат) Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение, Истина);
		Иначе
			ПоказатьПредупреждение(, Результат);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область ПодсистемаЦенообразование
	
// Функция возвращает представление дня недели.
//
// Параметры:      
//	ДеньНеделиКалендаря	- Дата - День недели календаря.
//
// Возвращаемое значение: 
//	Строка	- День недели
//
Функция ПолучитьПредставлениеДняНедели(ДеньНеделиКалендаря) Экспорт
	НомерДняНедели = ДеньНедели(ДеньНеделиКалендаря);
	Если НомерДняНедели = 1 Тогда
		Возврат НСтр("ru='Пн'");
	ИначеЕсли НомерДняНедели = 2 Тогда
		Возврат НСтр("ru='Вт'");
	ИначеЕсли НомерДняНедели = 3 Тогда
		Возврат НСтр("ru='Ср'");
	ИначеЕсли НомерДняНедели = 4 Тогда
		Возврат НСтр("ru='Чт'");
	ИначеЕсли НомерДняНедели = 5 Тогда
		Возврат НСтр("ru='Пт'");
	ИначеЕсли НомерДняНедели = 6 Тогда
		Возврат НСтр("ru='Сб'");
	Иначе
		Возврат НСтр("ru='Вс'");
	КонецЕсли;
КонецФункции // ПолучитьПредставлениеДняНедели()

#КонецОбласти 

#Область РаботаСДинамическимиСписками
	
// Процедура удаляет элемент отбора динамического списка.
//
// Параметры:
//	Список	- СписокЗначений	- Обрабатываемый динамический список,
//	ИмяПоля	- Строка			- Имя поля компоновки, отбор по которому нужно удалить.
//
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля) Экспорт
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Счетчик = 1;
	Пока Счетчик <= Список.Отбор.Элементы.Количество() Цикл
		ЭлементОтбора = Список.Отбор.Элементы[Счетчик - 1];
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			Список.Отбор.Элементы.Удалить(ЭлементОтбора);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;	
	КонецЦикла; 
КонецПроцедуры // УдалитьЭлементОтбораСписка()

// Процедура устанавливает элемент отбора динамического списка.
//
// Параметры:
//	Список			- СписокЗначений				- Обрабатываемый динамический список,
//	ИмяПоля			- Строка						- Имя поля компоновки, отбор по которому нужно установить.
//	ПравоеЗначение  - Произвольный					- Значение отбора.
//	ВидСравнения	- ВидСравненияКомпоновкиДанных	- Вид сравнения.
//
Процедура УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено) Экспорт
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
КонецПроцедуры // УстановитьЭлементОтбораСписка()

// Процедура изменяет элемент отбора динамического списка.
//
// Параметры:
//	Список			- СписокЗначений				- Обрабатываемый динамический список,
//	ИмяПоля			- Строка						- Имя поля компоновки, отбор по которому нужно установить.
//	ПравоеЗначение  - Произвольный					- Значение отбора.
//	Установить		- Булево						- Флаг установки.
//	ВидСравнения	- ВидСравненияКомпоновкиДанных	- Вид сравнения.
//	ОтборПоПериоду	- Булево						- Флаг отбора по периоду.
//
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено,
	 Установить = Ложь, ВидСравнения = Неопределено,
	 ОтборПоПериоду = Ложь) Экспорт
	УдалитьЭлементОтбораСписка(Список, ИмяПоля);
	Если Установить Тогда
		Если ОтборПоПериоду Тогда
			УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение.ДатаНачала,
				 ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
			УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение.ДатаОкончания,
				 ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);		
		Иначе
		    УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения);	
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

#КонецОбласти

#Область ЗаписьОбъектов

Функция СтруктураПараметровЗаписиОбъекта()
	
	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить("ЕстьВопросыПередЗаписью", Ложь);
	ПараметрыЗаписи.Вставить("НовыйОбъект", Ложь);
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Ложь);
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

Функция ЗаписатьОбъект(Форма, ПараметрыЗаписи)
	
	Перем Проведен, ДействиеПослеЗаписи;
	
	ОчиститьСообщения();
	
	Если Не ПараметрыЗаписи.ЕстьВопросыПередЗаписью Тогда
		Если Не Форма.Объект.Свойство("Проведен", Проведен) Тогда
			Проведен =  Ложь;
		КонецЕсли;
		
		Если Проведен Тогда
			ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
		
		//НачатьЗамерВремениЗаписиОбъекта(Форма, ПараметрыЗаписи);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ДействиеПослеЗаписи", ДействиеПослеЗаписи) Тогда
		ПараметрыЗаписи.Удалить("ДействиеПослеЗаписи");
	КонецЕсли;
	
	Результат = Форма.Записать(ПараметрыЗаписи);
	
	Если ДействиеПослеЗаписи <> Неопределено Тогда
		Если Результат Тогда
			ВыполнитьОбработкуОповещения(ДействиеПослеЗаписи, Результат);
		КонецЕсли;
		
		ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ДействиеПослеЗаписи);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Проверяет расширение файла и размер.
Функция ПроверитьВозможностьЗагрузкиФайла(Файл,
                                          ВызыватьИсключение = Истина,
                                          МассивИменФайловСОшибками = Неопределено) Экспорт
	
	ОбщиеНастройки = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ОбщиеНастройкиРаботыСФайлами;
	
	// Размер файла слишком большой.
	Если Файл.Размер() > ОбщиеНастройки.МаксимальныйРазмерФайла Тогда
		
		РазмерВМб     = Файл.Размер() / (1024 * 1024);
		РазмерВМбМакс = ОбщиеНастройки.МаксимальныйРазмерФайла / (1024 * 1024);
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Размер файла ""%1"" (%2 Мб)"
"превышает максимально допустимый размер файла (%3 Мб).'"),
			Файл.Имя,
			РаботаСФайламиСлужебныйКлиентСервер.ПредставлениеРазмераФайла(РазмерВМб),
			РаботаСФайламиСлужебныйКлиентСервер.ПредставлениеРазмераФайла(РазмерВМбМакс));
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
		Запись = Новый Структура;
		Запись.Вставить("ИмяФайла", Файл.ПолноеИмя);
		Запись.Вставить("Ошибка",   ОписаниеОшибки);
		
		МассивИменФайловСОшибками.Добавить(Запись);
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка расширения файла.
	Если Не ПроверитьРасширениеФайлаДляЗагрузки(Файл.Расширение, Ложь) Тогда
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Загрузка файлов с расширением ""%1"" запрещена."
"Обратитесь к администратору.'"),
			Файл.Расширение);
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
		Запись = Новый Структура;
		Запись.Вставить("ИмяФайла", Файл.ПолноеИмя);
		Запись.Вставить("Ошибка",   ОписаниеОшибки);
		
		МассивИменФайловСОшибками.Добавить(Запись);
		Возврат Ложь;
	КонецЕсли;
	
	// Временные файлы Word не импортируются.
	Если СтрНачинаетсяС(Файл.Имя, "~")
		И Файл.ПолучитьНевидимость() Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает Истина, если файл с таким расширением можно загружать.
Функция ПроверитьРасширениеФайлаДляЗагрузки(РасширениеФайла, ВызыватьИсключение = Истина)
	
	ОбщиеНастройки = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ОбщиеНастройкиРаботыСФайлами;
	Если НЕ ОбщиеНастройки.ЗапретЗагрузкиФайловПоРасширению Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если РаботаСФайламиСлужебныйКлиентСервер.РасширениеФайлаВСписке(
		ОбщиеНастройки.СписокЗапрещенныхРасширений, РасширениеФайла) Тогда
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Загрузка файлов с расширением ""%1"" запрещена."
"Обратитесь к администратору.'"),
				РасширениеФайла);
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаписатьДанныеБизнесСтатистики(КонтекстВызова)
	
	Если ТипЗнч(КонтекстВызова) = Тип("СправочникСсылка.Партнеры") Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.SMS.ВыводОкнаСМСНеНастроены.КарточкаКлиента");
	ИначеЕсли ТипЗнч(КонтекстВызова) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.SMS.ВыводОкнаСМСНеНастроены.КарточкаКонтактногоЛицаКлиента");
	ИначеЕсли ТипЗнч(КонтекстВызова) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.SMS.ВыводОкнаСМСНеНастроены.КарточкаФормыВзаимодействий");
	ИначеЕсли ТипЗнч(КонтекстВызова) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.SMS.ВыводОкнаСМСНеНастроены.КарточкаПотенциальногоКлиента");
	ИначеЕсли КонтекстВызова = Неопределено Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.SMS.ВыводОкнаСМСНеНастроены.БезКонтекста");
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьЗамерВремениОткрытияФормы(Форма) Экспорт
	
	#Если ВебКлиент Тогда
		ШаблонКлючевойОперации = "ОткрытиеФормы.%1.НаВебКлиенте";
	#Иначе
		ШаблонКлючевойОперации = "ОткрытиеФормы.%1.НаКлиенте";
	#КонецЕсли
	
	ИмяКлючевойОперации = СтрШаблон(ШаблонКлючевойОперации, Форма.ИмяФормы);
	ОценкаПроизводительностиКлиент.ЗамерВремени(ИмяКлючевойОперации, , Истина);

КонецПроцедуры

Процедура НачатьЗамерВремениЗаписиВФорме(Форма, ПараметрыЗаписи) Экспорт
	
	Перем РежимЗаписи;
	
	Если Не ПараметрыЗаписи.Свойство("РежимЗаписи", РежимЗаписи) Тогда
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ШаблонКлючевойОперации = "Записать.%1";
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ШаблонКлючевойОперации = "Провести.%1";
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ШаблонКлючевойОперации = "ОтменитьПроведение.%1";
	КонецЕсли;
	
	ИмяКлючевойОперации = СтрШаблон(ШаблонКлючевойОперации, Форма.ИмяФормы);
	ОценкаПроизводительностиКлиент.ЗамерВремени(ИмяКлючевойОперации, , Истина);
	
КонецПроцедуры

// Возвращает массив с данными дополнительных полей, которые будут программно добавлены
// при открытии формы "ОбщаяФорма.CRM_ОтборКомпоновкиДанных"
//
// Параметры:
//	ИмяСправочника	- Строка	- Наименование справочника, по которому устанавливается отбор в форме "ОбщаяФорма.CRM_ОтборКомпоновкиДанных".
//  СсылкаНаОбъект - ДокументСсылка - Ссылка на объект, форма которого заполняется данными.
// Возвращаемое значение:
//  Массив из Структура - массив с данными дополнительных полей (реквизитов и элементов управления формы).
//
Функция ДополнительныеПоляФормыОтбора(ИмяСправочника, СсылкаНаОбъект)
	
	ЭтоКонтактныеЛица = ИмяСправочника = "КонтактныеЛицаПартнеров";
	ЭтоПотенциальныеКлиенты = ИмяСправочника = "CRM_ПотенциальныеКлиенты";
	
	МассивПолей = Новый Массив;
	
	ДополнительноеПоле = Новый Структура;
	ДополнительноеПоле.Вставить("Имя", "ВидКонтактнойИнформации");
	ДополнительноеПоле.Вставить("Тип", Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
	ДополнительноеПоле.Вставить("ИмяЭУ", "ВидКонтактнойИнформации");
	ДополнительноеПоле.Вставить("ЗаголовокЭУ", НСтр("ru='Вид контактной информации'"));
	ДополнительноеПоле.Вставить("ТипЭУ", Тип("ПолеФормы"));
	ДополнительноеПоле.Вставить("ВидЭУ", "ПолеВвода");
	ДополнительноеПоле.Вставить("ПутьКДаннымЭУ", "ВидКонтактнойИнформации");
	ДополнительноеПоле.Вставить("КнопкаОчисткиЭУ", Истина);
	ДополнительноеПоле.Вставить("СписокВыбора",
		 CRM_ОбщегоНазначенияСервер.ЗаполнениеПоСКД_СписокВидовКИ(ИмяСправочника,
		 СсылкаНаОбъект));
	
	МассивПолей.Добавить(ДополнительноеПоле);
	
	ДополнительноеПоле = Новый Структура;
	ДополнительноеПоле.Вставить("Имя", "НеЗаполнятьСПустымиАдресами");
	ДополнительноеПоле.Вставить("Тип", Новый ОписаниеТипов("Булево"));
	ДополнительноеПоле.Вставить("ИмяЭУ", "НеЗаполнятьСПустымиТелефонами");
	ДополнительноеПоле.Вставить("ЗаголовокЭУ", НСтр("ru='Не заполнять с незаполненными контактами'"));
	ДополнительноеПоле.Вставить("ТипЭУ", Тип("ПолеФормы"));
	ДополнительноеПоле.Вставить("ВидЭУ", "ПолеФлажка");
	ДополнительноеПоле.Вставить("ПутьКДаннымЭУ", "НеЗаполнятьСПустымиАдресами");
	ДополнительноеПоле.Вставить("ПоложениеЗаголовкаЭУ", "Право");
	
	МассивПолей.Добавить(ДополнительноеПоле);
	
	Если НЕ (ЭтоКонтактныеЛица ИЛИ ЭтоПотенциальныеКлиенты) Тогда
	
		ДополнительноеПоле = Новый Структура;
		ДополнительноеПоле.Вставить("Имя", "НеЗаполнятьОтписавшимисяОтРассылок");
		ДополнительноеПоле.Вставить("Тип", Новый ОписаниеТипов("Булево"));
		ДополнительноеПоле.Вставить("ИмяЭУ", "НеЗаполнятьОтписавшимисяОтРассылок");
		ДополнительноеПоле.Вставить("ЗаголовокЭУ", НСтр("ru='Не заполнять отписавшимися от рассылок'"));
		ДополнительноеПоле.Вставить("ТипЭУ", Тип("ПолеФормы"));
		ДополнительноеПоле.Вставить("ВидЭУ", "ПолеФлажка");
		ДополнительноеПоле.Вставить("ПутьКДаннымЭУ", "НеЗаполнятьОтписавшимисяОтРассылок");
		ДополнительноеПоле.Вставить("ПоложениеЗаголовкаЭУ", "Право");
		
		МассивПолей.Добавить(ДополнительноеПоле);
		
		ДополнительноеПоле = Новый Структура;
		ДополнительноеПоле.Вставить("Имя", "ТолькоОсновныеКонтактныеЛица");
		ДополнительноеПоле.Вставить("Тип", Новый ОписаниеТипов("Булево"));
		ДополнительноеПоле.Вставить("ИмяЭУ", "ТолькоОсновныеКонтактныеЛица");
		ДополнительноеПоле.Вставить("ЗаголовокЭУ", НСтр("ru='Только основные контактные лица'"));
		ДополнительноеПоле.Вставить("ТипЭУ", Тип("ПолеФормы"));
		ДополнительноеПоле.Вставить("ВидЭУ", "ПолеФлажка");
		ДополнительноеПоле.Вставить("ПутьКДаннымЭУ", "ТолькоОсновныеКонтактныеЛица");
		ДополнительноеПоле.Вставить("ПоложениеЗаголовкаЭУ", "Право");
		
		МассивПолей.Добавить(ДополнительноеПоле);
	
	КонецЕсли;
	
	Возврат МассивПолей;
	
КонецФункции

// Возвращает заголовок для формы "ОбщаяФорма.CRM_ОтборКомпоновкиДанных".
//
// Параметры:
//	ЗаголовокШаблон	- Строка	- Содержит шаблон заголовка.
//	ИмяСправочника	- Строка	- Наименование справочника, по которому устанавливается отбор в форме "ОбщаяФорма.CRM_ОтборКомпоновкиДанных".
// Возвращаемое значение:
//  Строка - Строка, содержащая заголовок.
//
Функция ЗаголовокФормыОтбораЗаполненияПоСКД(ЗаголовокШаблон, ИмяСправочника)
	
	НаименованиеОтбираемыеОбъектов = "<не определен>";
	
	Если ИмяСправочника = "Партнеры" Тогда
		НаименованиеОтбираемыеОбъектов = НСтр("ru='клиентам'");
	ИначеЕсли ИмяСправочника = "КонтактныеЛицаПартнеров" Тогда
		НаименованиеОтбираемыеОбъектов = НСтр("ru='контактным лицам'");
	ИначеЕсли ИмяСправочника = "CRM_ПотенциальныеКлиенты" Тогда
		НаименованиеОтбираемыеОбъектов = НСтр("ru='потенциальным клиентам'");
	КонецЕсли;
	
	Заголовок = СтрШаблон(ЗаголовокШаблон, НаименованиеОтбираемыеОбъектов);
	
	Возврат Заголовок;
	
КонецФункции

#Область ХешСтрокиПоАлгоритмуMD5

// АПК:1353-выкл, АПК:247-выкл Короткие имена математических операндов. 

// Возвращает хеш по алгоритму MD5 для произвольной строки.
//
// Параметры:
//  Строка - Строка - произвольная строка любой длины
//
// Возвращаемое значение:
//  Строка - хеш, вычисленный из строки
////
// Возвращает хеш по алгоритму MD5 для произвольной строки.
//
// Параметры:
//  Строка - строка - произвольная строка любой длины
//
// Возвращаемое значение:
//  Строка - хеш, вычисленный из строки
//
Функция ВычислитьХешСтрокиПоАлгоритмуMD5(Знач Строка) Экспорт
	
	a = 1732584193; // 01 23 45 67; (шестнадцатеричное представление, сначала младший байт)
	b = 4023233417; // 89 AB CD EF;
	c = 2562383102; // FE DC BA 98;
	d = 271733878;  // 76 54 32 10;
	
	X = Новый Массив(16); // X - блок данных размером 512 бит, массив из 32-битных слов
	
	ПустойБайт = ПолучитьДвоичныеДанныеИзHexСтроки("00");
	БайтОкончания = ПолучитьДвоичныеДанныеИзHexСтроки("80");
	ДвоичныеДанные = ДобавитьКДвоичнымДанным(ПолучитьДвоичныеДанныеИзСтроки(Строка, "UTF-8"), БайтОкончания);
	
	// разбиваем строку на блоки по 512 бит
	МассивБлоковИзСтроки = РазделитьДвоичныеДанные(ДвоичныеДанные, 64);
	
	ПоследнийБлок = МассивБлоковИзСтроки[МассивБлоковИзСтроки.ВГраница()];
	Пока ПоследнийБлок.Размер() < 64 Цикл
		ПоследнийБлок = ДобавитьКДвоичнымДанным(ПоследнийБлок, ПустойБайт);
	КонецЦикла;
	
	МассивБлоковИзСтроки[МассивБлоковИзСтроки.ВГраница()] = ПоследнийБлок;
	
	БуферДанных = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ПоследнийБлок);
	Если БуферДанных.ПрочитатьЦелое64(56) <> 0 Тогда
		МассивБлоковИзСтроки.Добавить(0);
	КонецЕсли;

	// для каждого блока производим расчет
	Для НомерБлока = 0 По МассивБлоковИзСтроки.Количество() - 1 Цикл 
		Блок = МассивБлоковИзСтроки[НомерБлока];
		
		Если Блок = 0 Тогда
			X = Новый Массив(16);
			Для НомерСлова = 0 По 15 Цикл
				X[НомерСлова] = 0;
			КонецЦикла;
		Иначе
			БуферДанных = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(Блок);
			Для НомерСлова = 0 По 15 Цикл
				Слово = БуферДанных.ПрочитатьЦелое32(НомерСлова*4);
				X[НомерСлова] = ?(Слово = Неопределено, 0, Слово);
			КонецЦикла;
		КонецЕсли;
 
		// в последний блок дописываем длину строки в битах
		Если НомерБлока = МассивБлоковИзСтроки.Количество() - 1 Тогда
			РазмерСтрокиВБитах = ПолучитьДвоичныеДанныеИзСтроки(Строка).Размер()* 8;
			X[14] = РазмерСтрокиВБитах % Pow(2,32); // сначала младшие 4 байта
			X[15] = Цел(РазмерСтрокиВБитах / Pow(2,32)) % Pow(2,64); // если длина превосходит (2^64 - 1) бит, то старшие биты откидываем
		КонецЕсли;
		РассчитатьБлок(a, b, c, d, X);
	КонецЦикла;
	                                                   
	Результат = ПолучитьHexСтрокуИзДвоичныхДанных(ЧислоВДвоичныеДанные(a))
			  + ПолучитьHexСтрокуИзДвоичныхДанных(ЧислоВДвоичныеДанные(b))
			  + ПолучитьHexСтрокуИзДвоичныхДанных(ЧислоВДвоичныеДанные(c))
			  + ПолучитьHexСтрокуИзДвоичныхДанных(ЧислоВДвоичныеДанные(d));
	
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьБлок(a, b, c, d, X)
	aa = a;
	bb = b;
	cc = c;
	dd = d;
	
	// раунд 1
	ВыполнитьОперациюСФункциейF(a,b,c,d, X[ 0],  7, 3614090360); // 0xd76aa478 /* 1 */
	ВыполнитьОперациюСФункциейF(d,a,b,c, X[ 1], 12, 3905402710); // 0xe8c7b756 /* 2 */
	ВыполнитьОперациюСФункциейF(c,d,a,b, X[ 2], 17,  606105819); // 0x242070db /* 3 */
	ВыполнитьОперациюСФункциейF(b,c,d,a, X[ 3], 22, 3250441966); // 0xc1bdceee /* 4 */
	ВыполнитьОперациюСФункциейF(a,b,c,d, X[ 4],  7, 4118548399); // 0xf57c0faf /* 5 */
	ВыполнитьОперациюСФункциейF(d,a,b,c, X[ 5], 12, 1200080426); // 0x4787c62a /* 6 */
	ВыполнитьОперациюСФункциейF(c,d,a,b, X[ 6], 17, 2821735955); // 0xa8304613 /* 7 */
	ВыполнитьОперациюСФункциейF(b,c,d,a, X[ 7], 22, 4249261313); // 0xfd469501 /* 8 */
	ВыполнитьОперациюСФункциейF(a,b,c,d, X[ 8],  7, 1770035416); // 0x698098d8 /* 9 */
	ВыполнитьОперациюСФункциейF(d,a,b,c, X[ 9], 12, 2336552879); // 0x8b44f7af /* 10 */
	ВыполнитьОперациюСФункциейF(c,d,a,b, X[10], 17, 4294925233); // 0xffff5bb1 /* 11 */
	ВыполнитьОперациюСФункциейF(b,c,d,a, X[11], 22, 2304563134); // 0x895cd7be /* 12 */
	ВыполнитьОперациюСФункциейF(a,b,c,d, X[12],  7, 1804603682); // 0x6b901122 /* 13 */
	ВыполнитьОперациюСФункциейF(d,a,b,c, X[13], 12, 4254626195); // 0xfd987193 /* 14 */
	ВыполнитьОперациюСФункциейF(c,d,a,b, X[14], 17, 2792965006); // 0xa679438e /* 15 */
	ВыполнитьОперациюСФункциейF(b,c,d,a, X[15], 22, 1236535329); // 0x49b40821 /* 16 */
	
	// раунд 2
	ВыполнитьОперациюСФункциейG(a,b,c,d, X[ 1],  5, 4129170786); // 0xf61e2562 /* 17 */
	ВыполнитьОперациюСФункциейG(d,a,b,c, X[ 6],  9, 3225465664); // 0xc040b340 /* 18 */
	ВыполнитьОперациюСФункциейG(c,d,a,b, X[11], 14,  643717713); // 0x265e5a51 /* 19 */
	ВыполнитьОперациюСФункциейG(b,c,d,a, X[ 0], 20, 3921069994); // 0xe9b6c7aa /* 20 */
	ВыполнитьОперациюСФункциейG(a,b,c,d, X[ 5],  5, 3593408605); // 0xd62f105d /* 21 */
	ВыполнитьОперациюСФункциейG(d,a,b,c, X[10],  9,   38016083); //  0x2441453 /* 22 */
	ВыполнитьОперациюСФункциейG(c,d,a,b, X[15], 14, 3634488961); // 0xd8a1e681 /* 23 */
	ВыполнитьОперациюСФункциейG(b,c,d,a, X[ 4], 20, 3889429448); // 0xe7d3fbc8 /* 24 */
	ВыполнитьОперациюСФункциейG(a,b,c,d, X[ 9],  5,  568446438); // 0x21e1cde6 /* 25 */
	ВыполнитьОперациюСФункциейG(d,a,b,c, X[14],  9, 3275163606); // 0xc33707d6 /* 26 */
	ВыполнитьОперациюСФункциейG(c,d,a,b, X[ 3], 14, 4107603335); // 0xf4d50d87 /* 27 */
	ВыполнитьОперациюСФункциейG(b,c,d,a, X[ 8], 20, 1163531501); // 0x455a14ed /* 28 */
	ВыполнитьОперациюСФункциейG(a,b,c,d, X[13],  5, 2850285829); // 0xa9e3e905 /* 29 */
	ВыполнитьОперациюСФункциейG(d,a,b,c, X[ 2],  9, 4243563512); // 0xfcefa3f8 /* 30 */
	ВыполнитьОперациюСФункциейG(c,d,a,b, X[ 7], 14, 1735328473); // 0x676f02d9 /* 31 */
	ВыполнитьОперациюСФункциейG(b,c,d,a, X[12], 20, 2368359562); // 0x8d2a4c8a /* 32 */
	
	// раунд 3
	ВыполнитьОперациюСФункциейH(a,b,c,d, X[ 5],  4, 4294588738); // 0xfffa3942 /* 33 */
	ВыполнитьОперациюСФункциейH(d,a,b,c, X[ 8], 11, 2272392833); // 0x8771f681 /* 34 */
	ВыполнитьОперациюСФункциейH(c,d,a,b, X[11], 16, 1839030562); // 0x6d9d6122 /* 35 */
	ВыполнитьОперациюСФункциейH(b,c,d,a, X[14], 23, 4259657740); // 0xfde5380c /* 36 */
	ВыполнитьОперациюСФункциейH(a,b,c,d, X[ 1],  4, 2763975236); // 0xa4beea44 /* 37 */
	ВыполнитьОперациюСФункциейH(d,a,b,c, X[ 4], 11, 1272893353); // 0x4bdecfa9 /* 38 */
	ВыполнитьОперациюСФункциейH(c,d,a,b, X[ 7], 16, 4139469664); // 0xf6bb4b60 /* 39 */
	ВыполнитьОперациюСФункциейH(b,c,d,a, X[10], 23, 3200236656); // 0xbebfbc70 /* 40 */
	ВыполнитьОперациюСФункциейH(a,b,c,d, X[13],  4,  681279174); // 0x289b7ec6 /* 41 */
	ВыполнитьОперациюСФункциейH(d,a,b,c, X[ 0], 11, 3936430074); // 0xeaa127fa /* 42 */
	ВыполнитьОперациюСФункциейH(c,d,a,b, X[ 3], 16, 3572445317); // 0xd4ef3085 /* 43 */
	ВыполнитьОперациюСФункциейH(b,c,d,a, X[ 6], 23,   76029189); //  0x4881d05 /* 44 */
	ВыполнитьОперациюСФункциейH(a,b,c,d, X[ 9],  4, 3654602809); // 0xd9d4d039 /* 45 */
	ВыполнитьОперациюСФункциейH(d,a,b,c, X[12], 11, 3873151461); // 0xe6db99e5 /* 46 */
	ВыполнитьОперациюСФункциейH(c,d,a,b, X[15], 16,  530742520); // 0x1fa27cf8 /* 47 */
	ВыполнитьОперациюСФункциейH(b,c,d,a, X[ 2], 23, 3299628645); // 0xc4ac5665 /* 48 */
	
	// раунд 4
	ВыполнитьОперациюСФункциейI(a,b,c,d, X[ 0],  6, 4096336452); // 0xf4292244 /* 49 */
	ВыполнитьОперациюСФункциейI(d,a,b,c, X[ 7], 10, 1126891415); // 0x432aff97 /* 50 */
	ВыполнитьОперациюСФункциейI(c,d,a,b, X[14], 15, 2878612391); // 0xab9423a7 /* 51 */
	ВыполнитьОперациюСФункциейI(b,c,d,a, X[ 5], 21, 4237533241); // 0xfc93a039 /* 52 */
	ВыполнитьОперациюСФункциейI(a,b,c,d, X[12],  6, 1700485571); // 0x655b59c3 /* 53 */
	ВыполнитьОперациюСФункциейI(d,a,b,c, X[ 3], 10, 2399980690); // 0x8f0ccc92 /* 54 */
	ВыполнитьОперациюСФункциейI(c,d,a,b, X[10], 15, 4293915773); // 0xffeff47d /* 55 */
	ВыполнитьОперациюСФункциейI(b,c,d,a, X[ 1], 21, 2240044497); // 0x85845dd1 /* 56 */
	ВыполнитьОперациюСФункциейI(a,b,c,d, X[ 8],  6, 1873313359); // 0x6fa87e4f /* 57 */
	ВыполнитьОперациюСФункциейI(d,a,b,c, X[15], 10, 4264355552); // 0xfe2ce6e0 /* 58 */
	ВыполнитьОперациюСФункциейI(c,d,a,b, X[ 6], 15, 2734768916); // 0xa3014314 /* 59 */
	ВыполнитьОперациюСФункциейI(b,c,d,a, X[13], 21, 1309151649); // 0x4e0811a1 /* 60 */
	ВыполнитьОперациюСФункциейI(a,b,c,d, X[ 4],  6, 4149444226); // 0xf7537e82 /* 61 */
	ВыполнитьОперациюСФункциейI(d,a,b,c, X[11], 10, 3174756917); // 0xbd3af235 /* 62 */
	ВыполнитьОперациюСФункциейI(c,d,a,b, X[ 2], 15,  718787259); // 0x2ad7d2bb /* 63 */
	ВыполнитьОперациюСФункциейI(b,c,d,a, X[ 9], 21, 3951481745); // 0xeb86d391 /* 64 */
	
	a = БинарнаяСумма(a, aa);
	b = БинарнаяСумма(b, bb);
	c = БинарнаяСумма(c, cc);
	d = БинарнаяСумма(d, dd);
КонецПроцедуры

Процедура ВыполнитьОперациюСФункциейF(a, b, c, d, X, s, t)
	ВыполнитьОперацию(ПобитовоеИли(ПобитовоеИ(b, c), ПобитовоеИ(ПобитовоеНе(b), d)), a, b, X, s, t);
КонецПроцедуры

Процедура ВыполнитьОперациюСФункциейG(a, b, c, d, X, s, t)
	ВыполнитьОперацию(ПобитовоеИли(ПобитовоеИ(b, d), ПобитовоеИ(ПобитовоеНе(d), c)), a, b, X, s, t);
КонецПроцедуры

Процедура ВыполнитьОперациюСФункциейH(a, b, c, d, X, s, t)
	ВыполнитьОперацию(ПобитовоеИсключительноеИли(ПобитовоеИсключительноеИли(b, c), d), a, b, X, s, t);
КонецПроцедуры

Процедура ВыполнитьОперациюСФункциейI(a, b, c, d, X, s, t)
	ВыполнитьОперацию(ПобитовоеИсключительноеИли(ПобитовоеИли(ПобитовоеНе(d), b), c), a, b, X, s, t);
КонецПроцедуры

Процедура ВыполнитьОперацию(q, a, b, X, s, t)
	a = БинарнаяСумма(ЦиклическийСдвигВлево(БинарнаяСумма(БинарнаяСумма(a, q), БинарнаяСумма(X, t)), s), b);
КонецПроцедуры

Функция ЦиклическийСдвигВлево(Число, КоличествоРазрядов)
	Результат = Число;
	Для НомерРазряда = 1 По КоличествоРазрядов Цикл
		Бит = ПроверитьБит(Результат, 31);
		Результат = ПобитовыйСдвигВлево(Результат, 1)% Pow(2,32);
		Результат = УстановитьБит(Результат, 0, Бит);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ЧислоВДвоичныеДанные(Число)
	
	БуферДанных = Новый БуферДвоичныхДанных(4);
	БуферДанных.ЗаписатьЦелое32(0, Число);
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(БуферДанных);
	Возврат ДвоичныеДанные;
	
КонецФункции

Функция БинарнаяСумма(Аргумент1, Аргумент2)
	Результат = (Аргумент1+Аргумент2)% Pow(2,32);
	Возврат Результат;
КонецФункции

Функция ДобавитьКДвоичнымДанным(ДвоичныеДанные, Добавление)
	МассивДвоичныхДанных = Новый Массив;
	МассивДвоичныхДанных.Добавить(ДвоичныеДанные);
	МассивДвоичныхДанных.Добавить(Добавление);
	Возврат СоединитьДвоичныеДанные(МассивДвоичныхДанных);
КонецФункции

// АПК:1353-вкл, АПК:247-вкл 

#КонецОбласти

#КонецОбласти
