// @strict-types
#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру свойств визуализации
// 
// Возвращаемое значение:
//  Структура:
//  * ПросмотрДоступен - Булево
//  * ПредставлениеДокумента - Строка
//  * ТипДанных - Строка
//  * ИмяФайла - Строка
//  * РасширениеФайла - Строка
//  * РазмерФайла - Число
//  * ТекстОшибки - Строка - информация о ошибке при подготовке визуализации
//  * ДатаВыполнения - Строка - Дата в формате ISO
//  * НастройкиПредставления - см. НовыеНастройкиПредставления
Функция НовыеСвойстваВизуализацииВСервисе() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ПросмотрДоступен", Ложь);
	Результат.Вставить("ПредставлениеДокумента", "");
	Результат.Вставить("ТипДанных", "");
	Результат.Вставить("ИмяФайла", "");
	Результат.Вставить("РасширениеФайла", "");
	Результат.Вставить("РазмерФайла", 0);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ДатаВыполнения", "");
	Результат.Вставить("НастройкиПредставления", ВизуализацияЭДО.НовыеНастройкиПредставления());

	Возврат Результат;
КонецФункции

// @skip-check typed-value-adding-to-untyped-collection, invocation-parameter-type-intersect
// 
// Параметры:
//  ОписаниеОбъектаУчета - см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
//  НастройкиФормированияПоОбъектуУчета - см. ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотра.НастройкиФормирования
//  ПараметрыОткрытия - см. ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотра.ПараметрыОткрытия
// 
// Возвращаемое значение:
//  Структура:
//  * ДанныеПредварительногоПросмотра - см. НовыеДанныеПредварительногоПросмотра
//  * ОписанияОшибок - Массив из см. ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования
Функция ДанныеПредварительногоПросмотра(ОписаниеОбъектаУчета, НастройкиФормированияПоОбъектуУчета,
	ПараметрыОткрытия) Экспорт
	
	РезультатПодготовкиДанных = Новый Структура("ДанныеПредварительногоПросмотра, ОписанияОшибок",
		НовыеДанныеПредварительногоПросмотра(), Новый Массив);
	
	ЕстьОписаниеОбъектаУчета = Ложь;
	НастройкиОтправки = Новый Соответствие;
	Для Каждого Описание Из ОписаниеОбъектаУчета Цикл
		ЕстьОписаниеОбъектаУчета = Истина;
		НастройкиОтправки.Вставить(Описание.ОбъектУчета, НастройкиФормированияПоОбъектуУчета.НастройкиОтправки);
	КонецЦикла;
	НастройкиФормирования = ЭлектронныеДокументыЭДОИнтеграцияОблака.НастройкиФормированияДокументовЭДОПоНастройкамОтправки(
		НастройкиОтправки, ОписаниеОбъектаУчета);
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	ДанныеДляСозданияДокументовЭДО = ЭлектронныеДокументыЭДОИнтеграцияОблака.ДанныеДляФормированияДокументовЭДО(
		ОписаниеОбъектаУчета, НастройкиФормирования, КонтекстДиагностики, ПараметрыОткрытия);
	
	Для Каждого Ошибка Из КонтекстДиагностики.Диагностика.Ошибки Цикл
		ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
		Если ЕстьОписаниеОбъектаУчета Тогда
			ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ОписаниеОбъектаУчета[0]);
		КонецЕсли;
		ОписаниеОшибки.ОшибкиДанных = Ошибка.ДополнительныеДанные.ОшибкиДанных;
		РезультатПодготовкиДанных.ОписанияОшибок.Добавить(ОписаниеОшибки);
		Возврат РезультатПодготовкиДанных;
	КонецЦикла;
		
	ОписаниеДокументаЭДО = ДанныеДляСозданияДокументовЭДО.ОписанияДокументовЭДО[0];
	Если Не ЗначениеЗаполнено(ДанныеДляСозданияДокументовЭДО.ДанныеДокументовОблачногоЭДО) Тогда
		ОписаниеОшибки = ОбработатьОшибкуПодготовкиДанных(Неопределено, ОписаниеДокументаЭДО);
		РезультатПодготовкиДанных.ОписанияОшибок.Добавить(ОписаниеОшибки);
		Возврат РезультатПодготовкиДанных;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ПараметрыВизуализации = ЭлектронныеДокументыЭДО.НовыеПараметрыВизуализацииДокумента();
	ИмяФормыСНастройками = ЛегкийИнтерфейсДокументовЭДО.ПутьКФормеПросмотраЭлектронногоДокумента(Ложь);
	ВыводитьБанковскиеРеквизиты = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ИмяФормыСНастройками,
		"ВыводитьБанковскиеРеквизиты", Ложь); // Булево
	ОтключитьВыводДопДанных = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ИмяФормыСНастройками,
		"ОтключитьВыводДопДанных", Истина); // Булево
	ОтключитьВыводКопияВерна = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ИмяФормыСНастройками,
		"ОтключитьВыводКопияВерна", Истина); // Булево
		
	ПараметрыВизуализации.ВыводитьШапкуСИдДокумента = Ложь;
	ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты = ВыводитьБанковскиеРеквизиты;
	ПараметрыВизуализации.ВыводитьДопДанные = Не ОтключитьВыводДопДанных;
	ПараметрыВизуализации.ВыводитьКопияВерна = Не ОтключитьВыводКопияВерна;
	
	ДанныеДокументаОблачногоЭДО = ДанныеДляСозданияДокументовЭДО.ДанныеДокументовОблачногоЭДО[0];
	
	УчетнаяЗаписьОблачногоЭДО = РегистрыСведений.НастройкиОблачногоЭДО.УчетнаяЗаписьОблачногоЭДО(
		ДанныеДокументаОблачногоЭДО.ИдентификаторОтправителя);
	
	Попытка
		ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
			УчетнаяЗаписьОблачногоЭДО, ТекущийПользователь);
	Исключение
		ВидОперации = НСтр("ru = 'Предварительный просмотр документа ЭДО'");
		ВидОшибки = ИнтеграцияОблачногоЭДО.ВидОшибкиОтсутствуютДанныеАвторизации(УчетнаяЗаписьОблачногоЭДО);
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ТекстОшибки, ТекстОшибки);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ИнтеграцияОблачногоЭДО);
		РезультатПодготовкиДанных.ДанныеПредварительногоПросмотра.КонтекстДиагностики = КонтекстДиагностики;
		Возврат РезультатПодготовкиДанных;
	КонецПопытки;

	ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса("СформироватьФайлыИВизуализациюДокументаЭДО",
		ДанныеДокументаОблачногоЭДО, ПараметрыВизуализации);

	РезультатВыполнения = ИнтеграцияОблачногоЭДО.ВыполнитьМетодСервиса(ПараметрыВыполнения, ОписаниеМетода,
		КонтекстДиагностики); // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.СформироватьФайлыИВизуализациюДокументаЭДО
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения) 
		Или ЗначениеЗаполнено(РезультатВыполнения.ФайлыДокумента.Ошибки) Тогда
		ОписаниеОшибки = ОбработатьОшибкуПодготовкиДанных(РезультатВыполнения, ОписаниеДокументаЭДО);
		РезультатПодготовкиДанных.ОписанияОшибок.Добавить(ОписаниеОшибки);
		Если ОписаниеОшибки.ОшибкаПодготовкиДанныхВИнтеграцииОблачногоЭДО 
			И КонтекстДиагностики.СообщатьОбОшибке Тогда
			РезультатПодготовкиДанных.ДанныеПредварительногоПросмотра.КонтекстДиагностики = КонтекстДиагностики;
		КонецЕсли;
		Возврат РезультатПодготовкиДанных;
	КонецЕсли;
	
	ДанныеПредварительногоПросмотра = РезультатПодготовкиДанных.ДанныеПредварительногоПросмотра;
	
	ДанныеПредварительногоПросмотра.КонтекстДиагностики = КонтекстДиагностики;
	ДанныеПредварительногоПросмотра.ОписаниеДокументаЭДО = ОписаниеДокументаЭДО;
	ОсновнойФайл = ФайлДокументаИзФорматаСервиса(РезультатВыполнения.ФайлыДокумента.ОсновнойФайл);
	ДанныеПредварительногоПросмотра.ФайлыДокумента.Основной = ОсновнойФайл;
	ДополнительныйФайл = ФайлДокументаИзФорматаСервиса(РезультатВыполнения.ФайлыДокумента.ДополнительныйФайл);
	Если ЗначениеЗаполнено(ДополнительныйФайл) Тогда
		ДанныеПредварительногоПросмотра.ФайлыДокумента.Дополнительный = ДополнительныйФайл;
	КонецЕсли;
	ДанныеПредварительногоПросмотра.Визуализация = ВизуализацияДокументаИзФорматаСервиса(
		РезультатВыполнения.Визуализация);
	ДанныеПредварительногоПросмотра.ДанныеИзСодержанияФайла = ДанныеСодержанияФайлаИзФорматаСервиса(
		РезультатВыполнения.ДанныеИзСодержанияФайла);
		
	Возврат РезультатПодготовкиДанных;
	
КонецФункции

// @skip-check statement-type-change, invocation-parameter-type-intersect, property-return-type
//
// Параметры:
//  СвойстваВизуализацииВФорматеСервиса - См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ВизуализацияДокументаЭДО
// 
// Возвращаемое значение:
//  См. ВизуализацияЭДО.НовыеСвойстваВизуализации
Функция ВизуализацияДокументаИзФорматаСервиса(СвойстваВизуализацииВФорматеСервиса) Экспорт

	СвойстваВизуализации = ВизуализацияЭДО.НовыеСвойстваВизуализации();
	ТипДанныхВизуализации = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(
		СвойстваВизуализацииВФорматеСервиса.ТипДанных, Метаданные.Перечисления.ТипыДанныхВизуализацииДокументаЭДО);
	ЗаполнитьЗначенияСвойств(СвойстваВизуализации, СвойстваВизуализацииВФорматеСервиса);
	СвойстваВизуализации.ТипДанных = ТипДанныхВизуализации;
	Если ТипДанныхВизуализации = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.PdfДокумент Тогда
		Если СвойстваВизуализации.ПолученИзКэша Тогда
			СвойстваВизуализации.ПредставлениеДокумента = Base64Значение(СвойстваВизуализацииВФорматеСервиса.Данные);
		КонецЕсли;
	ИначеЕсли ТипДанныхВизуализации = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.HTMLДокумент Тогда
		СвойстваВизуализации.ПредставлениеДокумента = СвойстваВизуализацииВФорматеСервиса.Данные;
	Иначе
		ДвоичныеДанные = Base64Значение(СвойстваВизуализацииВФорматеСервиса.Данные);
		СвойстваВизуализации.ПредставлениеДокумента =
			ОбщегоНазначенияБЭД.ТабличныйДокументИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	СвойстваВизуализации.ПросмотрДоступен = ЗначениеЗаполнено(СвойстваВизуализацииВФорматеСервиса.Данные);
	
	Возврат СвойстваВизуализации;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращаемое значение:
//  Структура:
//  * Ошибка - Булево
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  * ОписаниеДокументаЭДО - см. ЭлектронныеДокументыЭДОИнтеграцияОблака.НовоеОписаниеДокументаЭДО
//  * ФайлыДокумента - См. НовыеФайлыДокумента
//  * ДанныеИзСодержанияФайла - Неопределено
//                            - См. НовыеДанныеИзСодержанияФайлаДляПредварительногоПросмотра
//  * Визуализация - см. РегистрыСведений.ВизуализацииДокументовОблачногоЭДО.НовыеСвойстваВизуализации
Функция НовыеДанныеПредварительногоПросмотра()
	Данные = Новый Структура;
	Данные.Вставить("Ошибка", Ложь);
	Данные.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	Данные.Вставить("ОписаниеДокументаЭДО", Новый Структура);
	Данные.Вставить("ФайлыДокумента", НовыеФайлыДокумента());
	Данные.Вставить("ДанныеИзСодержанияФайла", Неопределено);
	Данные.Вставить("Визуализация", Новый Структура);
	Возврат Данные;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Основной - Неопределено
//             - См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
//  * Дополнительный - Неопределено - если дополнительный файл отсутствует.
//                   - См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
Функция НовыеФайлыДокумента()
	
	ФайлыДокумента = Новый Структура;
	ФайлыДокумента.Вставить("Основной", Неопределено);
	ФайлыДокумента.Вставить("Дополнительный", Неопределено);
	Возврат ФайлыДокумента;
	
КонецФункции

// Возвращает структуру документа из формата сервиса
// 
// Параметры:
//  ДанныеСодержанияВФорматеСервиса - Неопределено,Структура:
//  * НомерДокумента - Строка 
//  * ДатаДокумента - См. ОбщегоНазначенияБЭД.ДатаВФорматеISO
//  * СуммаДокумента - Число
//  * ТипРегламента - Строка
//  * СуммаНДСДокумента - Число
//  * СтавкаНДСДокумента - Строка
//  * ВалютаДокумента - Строка
// 
// Возвращаемое значение:
// - Неопределено
// - Структура:
// * НомерДокумента - Строка
// * ДатаДокумента - Дата
// * СуммаДокумента - Число
// * ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
// * СуммаНДСДокумента - Число
// * СтавкаНДСДокумента - Строка
// * ВалютаДокумента - Строка
Функция ДанныеСодержанияФайлаИзФорматаСервиса(ДанныеСодержанияВФорматеСервиса) 
	
	Если Не ЗначениеЗаполнено(ДанныеСодержанияВФорматеСервиса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеИзСодержания = НовыеДанныеИзСодержанияФайлаДляПредварительногоПросмотра();
	
	ДанныеИзСодержания.НомерДокумента = ДанныеСодержанияВФорматеСервиса.НомерДокумента;
	ДанныеИзСодержания.ДатаДокумента = ОбщегоНазначенияБЭД.ДатаИзФорматаISO(
		ДанныеСодержанияВФорматеСервиса.ДатаДокумента);
	ДанныеИзСодержания.СуммаДокумента = ДанныеСодержанияВФорматеСервиса.СуммаДокумента;
	//@skip-check statement-type-change
	ДанныеИзСодержания.ТипРегламента = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(
		ДанныеСодержанияВФорматеСервиса.ТипРегламента, Метаданные.Перечисления.ТипыРегламентовЭДО);
	ДанныеИзСодержания.СуммаНДСДокумента = ДанныеСодержанияВФорматеСервиса.СуммаНДСДокумента;
	ДанныеИзСодержания.СтавкаНДСДокумента = ДанныеСодержанияВФорматеСервиса.СтавкаНДСДокумента;
	ДанныеИзСодержания.ВалютаДокумента = ДанныеСодержанияВФорматеСервиса.ВалютаДокумента;
	
	Возврат ДанныеИзСодержания;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
// * НомерДокумента - Строка
// * ДатаДокумента - Дата
// * СуммаДокумента - Число
// * ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
// * СуммаНДСДокумента - Число
// * СтавкаНДСДокумента - Строка
// * ВалютаДокумента - Строка
Функция НовыеДанныеИзСодержанияФайлаДляПредварительногоПросмотра()
	ДанныеИзСодержания = Новый Структура;
	ДанныеИзСодержания.Вставить("НомерДокумента", "");
	ДанныеИзСодержания.Вставить("ДатаДокумента", '00010101');
	ДанныеИзСодержания.Вставить("СуммаДокумента", 0);
	ДанныеИзСодержания.Вставить("ТипРегламента", Перечисления.ТипыРегламентовЭДО.ПустаяСсылка());
	ДанныеИзСодержания.Вставить("СуммаНДСДокумента", 0);
	ДанныеИзСодержания.Вставить("СтавкаНДСДокумента", "");
	ДанныеИзСодержания.Вставить("ВалютаДокумента", "");
	Возврат ДанныеИзСодержания;
КонецФункции

// Возвращает структуру с данными файла из формата сервиса
// 
// Параметры:
//  ФайлВФорматеСервиса - Неопределено,Структура:
//  * ИмяФайла - Строка
//  * Данные - Строка - двоичные данные в формате base64.
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
Функция ФайлДокументаИзФорматаСервиса(ФайлВФорматеСервиса)
	
	Если Не ЗначениеЗаполнено(ФайлВФорматеСервиса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФайлДокумента = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
	ФайлДокумента.ИмяФайла = ФайлВФорматеСервиса.ИмяФайла;
	ФайлДокумента.ДвоичныеДанные = Base64Значение(ФайлВФорматеСервиса.Данные);
	Возврат ФайлДокумента;
	
КонецФункции

// Обработать ошибку подготовки данных.
// @skip-check property-return-type, statement-type-change - .
// 
// Параметры:
//  РезультатВыполнения - Неопределено
//  					- см. ИнтерфейсДокументовЭДОВОблаке.СформироватьФайлыИВизуализациюДокументаЭДО
//  ОписаниеДокументаЭДО - см. ЭлектронныеДокументыЭДОИнтеграцияОблака.НовоеОписаниеДокументаЭДО
// 
// Возвращаемое значение:
//  см. ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования 
Функция ОбработатьОшибкуПодготовкиДанных(РезультатВыполнения, ОписаниеДокументаЭДО)
	УчетныйДокумент = ОписаниеДокументаЭДО.СвязующийОбъектУчета;
	ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
	ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ОписаниеДокументаЭДО);
	
	ОписаниеОшибки.ОписаниеОбъектаУчета.ОбъектУчета = УчетныйДокумент;
	ОписаниеОшибки.ОписаниеОбъектаУчета.Направление = Перечисления.НаправленияЭДО.Исходящий;
	ОписаниеОшибки.ОшибкаПодготовкиДанныхВИнтеграцииОблачногоЭДО = Истина;
	Если РезультатВыполнения = Неопределено 
		Или Не РезультатВыполнения.Свойство("ФайлыДокумента")
		Или Не РезультатВыполнения.ФайлыДокумента.Свойство("Ошибки")
		Или ТипЗнч(РезультатВыполнения.ФайлыДокумента.Ошибки) <> Тип("Массив") Тогда
		Возврат ОписаниеОшибки;
	КонецЕсли;
	ЭтоОшибкаЗаполненияУчетногоДокумента = Ложь;
	Ошибки = Новый Массив; // Массив из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
	Для Каждого Ошибка Из РезультатВыполнения.ФайлыДокумента.Ошибки Цикл
		ЭтоОшибкаЗаполненияУчетногоДокумента = Истина;
		ПараметрыОшибки = ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки();
		Если ТипЗнч(Ошибка) = Тип("Структура") И Ошибка.Свойство("ТекстОшибки") 
			И Ошибка.Свойство("НавигационнаяСсылка") Тогда
			
			ЗаполнитьЗначенияСвойств(ПараметрыОшибки, Ошибка);
			ПараметрыОшибки.НавигационнаяСсылка = УчетныйДокумент;
			Ошибки.Добавить(ПараметрыОшибки);
		ИначеЕсли ТипЗнч(Ошибка) = Тип("Строка") Тогда
			
			ПараметрыОшибки.ТекстОшибки = Ошибка;
			Ошибки.Добавить(ПараметрыОшибки);
		Иначе
			ЭтоОшибкаЗаполненияУчетногоДокумента = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если ЭтоОшибкаЗаполненияУчетногоДокумента Тогда
		ОшибкиДанных = Новый Структура;
		ОшибкиДанных.Вставить("ЗаполнениеДанных", Ошибки);
		ОшибкиДанных.Вставить("ЗначенияДополнительныхПолей", Новый Структура);
		ОписаниеОшибки.ОшибкиДанных = ОшибкиДанных;
		ОписаниеОшибки.ОшибкаПодготовкиДанныхВИнтеграцииОблачногоЭДО = Ложь;
	КонецЕсли;
	Возврат ОписаниеОшибки;
КонецФункции

#КонецОбласти