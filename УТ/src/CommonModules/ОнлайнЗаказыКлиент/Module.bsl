///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.ОнлайнЗаказы".
// ОбщийМодуль.ОнлайнЗаказыКлиент.
//
// Клиентские процедуры настройки подключения к Онлайн-заказам:
//  - открытие формы настроек подключения;
//  - переход в журнал регистрации для просмотра лога;
//  - алгоритмы работы с формами шаблонов сообщений подсистемы;
//  - переход к форме отправки URL онлайн-заказа.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Открывает форму списка настроек онлайн-заказов.
//
// Параметры:
//  Владелец - ФормаКлиентскогоПриложения - форма которая будет установлена в качестве владельца.
//
Процедура НастройкиПодключения(Владелец) Экспорт
	
	ОткрытьФорму(
		"Справочник.НастройкиПодключенияКОнлайнЗаказам.ФормаСписка",
		,
		Владелец);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Открывает форму списка шаблонов сообщений.
//
// Параметры:
//  УникальныйИдентификатор - УникальныйИдентификатор - ключ уникальности используемый при открытии формы.
//
Процедура ОткрытьШаблоныСообщенийОнлайнЗаказов(УникальныйИдентификатор) Экспорт
	
	РезультатПроверки = ОнлайнЗаказыВызовСервера.ВсеШаблоныСозданы();
	
	Если РезультатПроверки.ВсеШаблоны Тогда
		ОткрытьФормуШаблонаСообщенийСОтбором(
			РезультатПроверки.Шаблоны,
			УникальныйИдентификатор);
	Иначе
		РезультатПроверки.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
		
		Оповещение = Новый ОписаниеОповещения(
			"ПослеОтветаНаВопросОСозданииШаблонов",
			ЭтотОбъект,
			РезультатПроверки);
		
		ПоказатьВопрос(
			Оповещение,
			НСтр("ru = 'Создать шаблоны сообщений для автоматического заполнения на основании данных документов?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет вызов вопроса пользователю о необходимости обновлении настроек подключения.
//
Процедура ПоказатьВопросОбновленияНастроекПодключенияПоНастройкеОплаты(
	НастройкаПодключения,
	Владелец,
	ЗакрытьВладельца) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("НастройкаПодключения", НастройкаПодключения);
	Параметры.Вставить("Владелец", Владелец);
	Параметры.Вставить("ЗакрытьВладельца", ЗакрытьВладельца);
	
	ОбработкаОтвета = Новый ОписаниеОповещения(
		"ПоказатьВопросОбновленияНастроекПодключенияПоНастройкеОплатыЗавершение",
		ЭтотОбъект,
		Параметры);
	
	ТекстВопроса = НСтр("ru='По настройке подключения обнаружены зависимые настройки
		|онлайн-заказов, необходимо выполнить обновление настроек в сервисе.
		|Обновить сейчас?'");
	
	ПоказатьВопрос(ОбработкаОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодключениеКОнлайнЗаказам

// Открывает форму настройки подключения к Онлайн-заказам.
//
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения, Неопределено - оповещение, которое
//    необходимо вызвать после завершения настройки подключения. В случае успешного
//    завершения настройки подключения в результате оповещения будет возвращено Истина;
//
Процедура СлужебнаяПодключитьОнлайнЗаказы(ОписаниеОповещения = Неопределено) Экспорт
	
	ОткрытьФорму(
		"Справочник.НастройкиПодключенияКОнлайнЗаказам.Форма.ФормаЭлемента",
		,
		,
		,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область КодыОшибок

// Возвращает код ошибки "ОшибкаДанныхАутентификации".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиДанныеАутентификацииИППНеЗаполнены() Экспорт
	
	Возврат "ДанныеАутентификацииИППНеЗаполнены";
	
КонецФункции

#КонецОбласти

#Область ПодготовкаПлатежнойСсылки

// См. ОнлайнЗаказыСлужебный.ПриОпределенииКомандПодключенныхКОбъекту
//
Процедура Подключаемый_ОткрытьФормуURLЗаказа(
		ПараметрКоманды,
		ПараметрыВыполненияКоманды) Экспорт
	
	ОткрытьФормуURLЗаказа(ПараметрКоманды);
	
КонецПроцедуры

// Открывает форму формирования ссылки на оплату.
// Позволяет:
//  * Сформировать новую ссылку.
//  * Просмотреть сформированную ранее ссылку.
//  * Обновить данные в сервисе, если они изменились.
//  
// Параметры:
//  ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - основание онлайн-заказа,
//  для которого нужно сформировать/открыть/обновить ссылку.
//
Процедура ОткрытьФормуURLЗаказа(Знач ДокументЗаказа)
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДокументЗаказа", ДокументЗаказа);
	
	ОбработкаПродолжения = Новый ОписаниеОповещения(
		"ОткрытьФормуURLЗаказаПродолжение",
		ЭтотОбъект,
		Параметры);
	
	ИнтернетПоддержкаПользователейКлиент.НачатьПроверкуИПодключениеИнтернетПоддержкиПользователей(
		ОбработкаПродолжения,
		НСтр("ru='Для использования онлайн-заказов необходимо подключить Интернет-поддержку пользователей.
			|Подключиться сейчас?'"));
	
КонецПроцедуры

// Подготавливает параметры открытия формы формирования платежной ссылки онлайн-заказа.
// Перед открытием проверяется наличие подключенной интернет-поддержки пользователей.
//
// Параметры:
//  ПодключенаИПП - Булево - признак подключения ИПП.
//  Параметры - Структура - содержит описание параметров открытия формы:
//   * ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - основание онлайн-заказа, для которого будет формироваться ссылка.
//
Процедура ОткрытьФормуURLЗаказаПродолжение(
		Знач ПодключенаИПП,
		Знач Параметры) Экспорт
	
	Если Не ПодключенаИПП Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСозданияЗаказа = ОнлайнЗаказыВызовСервера.ПриОпределенииПараметровСозданияЗаказа(
		Параметры.ДокументЗаказа);
	
	Если Не ПараметрыСозданияЗаказа.СозданиеЗаказаДоступно Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ПараметрыСозданияЗаказа.СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСозданияЗаказа.НастройкиПодключения.Количество() > 0 Тогда
		
		ОткрытьФормуURLЗаказаЗавершение(
			Параметры.ДокументЗаказа,
			ПараметрыСозданияЗаказа.НастройкиПодключения);
		
	ИначеЕсли ОнлайнЗаказыВызовСервера.НастройкаОнлайнЗаказовДоступна() Тогда
		
		ПараметрыЗавершения = Новый Структура;
		ПараметрыЗавершения.Вставить("ДокументЗаказа", Параметры.ДокументЗаказа);
		ПараметрыЗавершения.Вставить("Организация", ПараметрыСозданияЗаказа.Организация);
		
		ОбработкаОтвета = Новый ОписаниеОповещения(
			"ПоказатьВопросСозданияНастройкиПодключенияЗавершение",
			ЭтотОбъект,
			ПараметрыЗавершения);
		
		ТекстВопроса = НСтр("ru='Настройка подключения к онлайн-заказам не найдена,
			|необходимо создать новую настройку. Создать сейчас?'");
		
		ПоказатьВопрос(
			ОбработкаОтвета,
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не обнаружены действующие настройки.'"));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Определяет поведение системы после ответа пользователя о создании новой торговой точки.
//
// Параметры:
//  Ответ - Структура - результат открытия окна с вопросом пользователю.
//  Параметры - Структура - содержит описание параметров открытия формы.
//
Процедура ПоказатьВопросСозданияНастройкиПодключенияЗавершение(
		Знач Ответ,
		Знач Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Параметры.Вставить("НастройкаПодключенияКОнлайнЗаказам", Неопределено);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СозданиеНастройкиПодключенияЗавершение",
			ЭтотОбъект,
			Параметры);
			
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Организация", Параметры.Организация);
			
		ОткрытьФорму(
			"Справочник.НастройкиПодключенияКОнлайнЗаказам.ФормаОбъекта",
			Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения),
			,
			,
			,
			,
			ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет вызов обработки оповещения после окончания процесса создания торговой точки
//
// Параметры:
//  Результат - КодВозвратаДиалога - Содержит ответ пользователя.
//  ДополнительныеПараметры - Структура - содержит описание оповещения при закрытии формы.
//
Процедура СозданиеНастройкиПодключенияЗавершение(
		Результат,
		ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.НастройкаПодключенияКОнлайнЗаказам) Тогда
		
		НастройкиПодключения = Новый Массив;
		НастройкиПодключения.Добавить(ДополнительныеПараметры.НастройкаПодключенияКОнлайнЗаказам);
		
		ОткрытьФормуURLЗаказаЗавершение(
			ДополнительныеПараметры.ДокументЗаказа,
			НастройкиПодключения);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму формирования платежной ссылки для основания заказа.
// Перед открытием проверяется наличие подключенной интернет-поддержки пользователей.
//
// Параметры:
//  ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - основание платежа, для которого будет формироваться ссылка.
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операции.
//
Процедура ОткрытьФормуURLЗаказаЗавершение(
		ДокументЗаказа,
		НастройкиПодключения)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДокументЗаказа",       ДокументЗаказа);
	ПараметрыФормы.Вставить("НастройкиПодключения", НастройкиПодключения);
	
	ОткрытьФорму(
		"ОбщаяФорма.ОтправкаURLОнлайнЗаказов",
		ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область Шаблоны

// Определяет поведение системы после ответа пользователя о создании шаблонов
//
// Параметры:
//  Результат - Структура - результат открытия окна с вопросом пользователю.
//  Параметры - Структура - содержит описание параметров открытия формы.
//
Процедура ПослеОтветаНаВопросОСозданииШаблонов(
		Результат,
		Параметры) Экспорт
	
	Шаблоны = Параметры.Шаблоны;
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		
		ОнлайнЗаказыВызовСервера.УстановитьИспользованиеШаблоновСообщенийПроверкаПодсистем();
		
		СозданныеШаблоны = ОнлайнЗаказыВызовСервера.СоздатьПредопределенныеШаблоныСообщенийПроверкаПодсистем();
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			Шаблоны,
			СозданныеШаблоны);
		
	КонецЕсли;
	
	ОткрытьФормуШаблонаСообщенийСОтбором(
		Шаблоны,
		Параметры.УникальныйИдентификатор);
	
КонецПроцедуры

// Осуществляет открытие формы шаблонов сообщений с отбором по предопределенным шаблонам подсистемы.
//
// Параметры:
//  ДанныеШаблонов - Массив из СправочникСсылка.ШаблоныСообщений - массив элементов по которым будет установлен отбор.
//  УникальныйИдентификатор - УникальныйИдентификатор - ключ уникальности используемый при открытии формы
//
Процедура ОткрытьФормуШаблонаСообщенийСОтбором(
		ДанныеШаблонов,
		УникальныйИдентификатор)
	
	ОтборФормы = Новый Структура();
	ОтборФормы.Вставить("Ссылка", ДанныеШаблонов);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", ОтборФормы);
	
	ИмяФормыСпискаШаблонов = "Справочник.ШаблоныСообщений.ФормаСписка";
	ОткрытьФорму(
		ИмяФормыСпискаШаблонов,
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеНастроекПодключения

// Выполняет вызов обработки оповещения после ответа пользователя
//
// Параметры:
//  Ответ - КодВозвратаДиалога - Содержит ответ пользователя.
//  Параметры - Структура - содержит описание оповещения при закрытии формы.
//
Процедура ПоказатьВопросОбновленияНастроекПодключенияПоНастройкеОплатыЗавершение(
		Знач Ответ,
		Знач Параметры) Экспорт
	
	ОбработатьОтветОбОбновленииНастроек(Ответ, Параметры);
	
КонецПроцедуры

Процедура ОбновитьНастройкиСтраницЗавершение(
		Результат,
		ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатОперации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			ПоказатьОшибкуОбработкиНастроек(РезультатОперации.НеобработанныеНастройки);
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Настройки успешно обновлены.'"));
		КонецЕсли;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьВопросОшибкиОбновленияНастроек(ДополнительныеПараметры)
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьВопросОшибкиОбновленияНастроек(Параметры)
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения(
			"ПоказатьВопросОшибкиОбновленияНастроекЗавершение",
			ЭтотОбъект,
			Параметры),
		НСтр("ru = 'При обновлении настроек возникли ошибки. Повторить операцию?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура ПоказатьОшибкуОбработкиНастроек(НастройкиПодключения)
	
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось выполнить автоматическое обновление настроек подключения к онлайн-заказам:
			|%1
			|Для дальнейшего использования указанных настроек необходимо выполнить обновление вручную.'"),
		СтрСоединить(НастройкиПодключения, Символы.ПС));
	
	ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
	
КонецПроцедуры

Процедура ПоказатьВопросОшибкиОбновленияНастроекЗавершение(Ответ, Параметры) Экспорт
	
	ОбработатьОтветОбОбновленииНастроек(Ответ, Параметры);
	
КонецПроцедуры

Процедура ОбработатьОтветОбОбновленииНастроек(Ответ, Параметры)
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Если Параметры.ЗакрытьВладельца Тогда
			Параметры.Владелец.Закрыть();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = ОнлайнЗаказыВызовСервера.ОбновитьНастройкиСтраницЗапускЗадания(
		Параметры.Владелец.УникальныйИдентификатор,
		Параметры.НастройкаПодключения);
		
	Если Параметры.ЗакрытьВладельца Тогда
		Параметры.Владелец.Закрыть();
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения.Статус = "Выполнено" Или РезультатВыполнения.Статус = "Ошибка" Тогда
		ОбновитьНастройкиСтраницЗавершение(
			РезультатВыполнения,
			Параметры);
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Параметры.Владелец);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется обновление настроек в сервисе.'");
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ОбновитьНастройкиСтраницЗавершение",
		ЭтотОбъект,
		Параметры);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		РезультатВыполнения,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
		
КонецПроцедуры

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Открывает форму журнала регистрации с отбором
// по событию см. ИмяСобытияЖурналаРегистрации.
//
Процедура ОткрытьЖурналРегистрации() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("СобытиеЖурналаРегистрации", ИмяСобытияЖурналаРегистрации());
	ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(Отбор);
	
КонецПроцедуры

// Возвращает имя события для журнала регистрации, которое используется
// для записи событий загрузки данных из внешних систем.
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Онлайн-заказы'",
		ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
	
КонецФункции
#КонецОбласти

#КонецОбласти