
////////////////////////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ПОДСИСТЕМЫ "УПРАВЛЕНИЕ ПРОЕКТАМИ"

#Область ПрограммныйИнтерфейс

// Функция возвращает общую сумму плановых затрат по всем этапам проекта.
//
// Параметры:
//	Проект	- СправочникСсылка	- Проект, по которому считаем общие плановые затраты.
//
// Возвращаемое значение:
//	Число	- Сумма общих плановых затрат.
//
Функция ПолучитьПлановыеЗатратыПоПроекту(Проект) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(CRM_ЭтапыПроектовЗатраты.Сумма) КАК Сумма
	               |ИЗ
	               |	Справочник.CRM_ЭтапыПроектов.Затраты КАК CRM_ЭтапыПроектовЗатраты
	               |ГДЕ
	               |	CRM_ЭтапыПроектовЗатраты.Ссылка.Владелец = &Проект
	               |	И (НЕ CRM_ЭтапыПроектовЗатраты.Ссылка.ПометкаУдаления)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сумма;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции // ПолучитьПлановыеЗатратыПоПроекту()

// Возвращает текущее подразделение.
//
// Возвращаемое значение:
//	СправочникСсылка.СтруктураПредприятия - текущее подразделение.
//
Функция ТекущееПодразделение() Экспорт
	 Возврат Пользователи.ТекущийПользователь().Подразделение;
КонецФункции
 
// Возвращает контактную информацию участника.
//
// Параметры:
//	Участник - СправочникСсылка - участник.
//
// Возвращаемое значение:
//	Структура - контактная информация участника.
//
Функция ПолучитьКИУчастника(Участник) Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Участник);
	ТелефоныПользователя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(Массив,
		 Перечисления.ТипыКонтактнойИнформации.Телефон);
	АдресаПользователя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(Массив,
		 Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Результат = Новый Структура;
	Если ТелефоныПользователя.Количество() > 0 Тогда
		Результат.Вставить("Телефон", ТелефоныПользователя[0].Представление);
	Иначе
		Результат.Вставить("Телефон", "");
	КонецЕсли;
	Если АдресаПользователя.Количество() > 0 Тогда
		Результат.Вставить("Адрес", АдресаПользователя[0].Представление);
	Иначе
		Результат.Вставить("Адрес", "");
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Помечает на удаление связанные объекты.
//
// Параметры:
//	Источник - СправочникСсылка - источник.
//
Процедура ПометитьНаУдалениеСвязанныеОбъекты(Источник) Экспорт
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Проекты") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	CRM_ЭтапКалендарногоПлана.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
		                      |ГДЕ
		                      |	CRM_ЭтапКалендарногоПлана.Проект = &Источник");
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_ШаблоныПроектов") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	CRM_ШаблонЭтапаКалендарногоПлана.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	Документ.CRM_ШаблонЭтапаКалендарногоПлана КАК CRM_ШаблонЭтапаКалендарногоПлана
		                      |ГДЕ
		                      |	CRM_ШаблонЭтапаКалендарногоПлана.ШаблонПроекта = &Источник");
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	CRM_ЭтапКалендарногоПлана.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
		                      |ГДЕ
		                      |	CRM_ЭтапКалендарногоПлана.Этап = &Источник");
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	CRM_ШаблонЭтапаКалендарногоПлана.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	Документ.CRM_ШаблонЭтапаКалендарногоПлана КАК CRM_ШаблонЭтапаКалендарногоПлана
		                      |ГДЕ
		                      |	CRM_ШаблонЭтапаКалендарногоПлана.ШаблонЭтапаПроекта = &Источник");
		
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ДополнительныеСвойства.Вставить("УдалениеСвязанныхОбъектов", Истина);
		Объект.ПометкаУдаления = Истина;
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Отменяет задачи проекта.
//
// Параметры:
//	Источник - СправочникСсылка - источник.
//
Процедура ОтменитьЗадачиПроекта(Источник) Экспорт
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Проекты") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	CRM_ЭтапКалендарногоПлана.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
		                      |ГДЕ
		                      |	CRM_ЭтапКалендарногоПлана.Проект = &Источник");
		
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Отменена;
		Объект.КомментарийОтменыЗадачи = НСтр("ru='Отмена проекта';en='Cancellation of project'");
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Получает плановую дату окончания проекта.
//
// Параметры:
//	Проект - СправочникСсылка.Проекты - обрабатываемый проект.
//
// Возвращаемое значение:
//	Дата - плановая дата окончания проекта.
//
Функция ПолучитьПлановуюДатуОкончанияПроекта(Проект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(CRM_ЭтапКалендарногоПлана.ПлановаяДатаОкончания) КАК ПлановаяДатаОкончанияПроекта
	               |ИЗ
	               |	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
	               |ГДЕ
	               |	CRM_ЭтапКалендарногоПлана.Проект = &Проект
	               |	И НЕ CRM_ЭтапКалендарногоПлана.ПометкаУдаления
	               |	И НЕ CRM_ЭтапКалендарногоПлана.Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Отменена)
	               |";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ?(Выборка.ПлановаяДатаОкончанияПроекта =  NULL, Неопределено, Выборка.ПлановаяДатаОкончанияПроекта);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьПлановуюДатуОкончанияПроекта()

// Функция возвращает продолжительность периода в днях.
//
// Параметры:
//  ДатаНачала			 - Дата	 - Дата начала.
//  ДатаОкончания		 - Дата	 - Дата окончания.
//  УчитыватьКалендарь	 - Булево	 - Признак учета календаря.
// 
// Возвращаемое значение:
//   - Число
//
Функция ПолучитьПродолжительностьПериода(ДатаНачала, ДатаОкончания, УчитыватьКалендарь = Истина) Экспорт
	
	День = 86400;
	
	Если УчитыватьКалендарь Тогда
		Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
		ПродолжительностьДней = КалендарныеГрафики.РазностьДатПоКалендарю(Календарь, ДатаНачала, ДатаОкончания, Ложь);
	Иначе
		ПродолжительностьДней = (КонецДня(ДатаОкончания) - НачалоДня(ДатаНачала) + 1) / День;
	КонецЕсли;
	
	Если ПродолжительностьДней = Неопределено Тогда
		ПродолжительностьДней = 0;
	КонецЕсли;
	
	Возврат ПродолжительностьДней;
	
КонецФункции

#Область РаботаСШаблонамиПроектов

// Функция возвращает созданный шаблон проекта на основании проекта.
//
// Параметры:
//	Проект	- СправочникСсылка	- Проект, на основании которого создаем шаблон проекта.
//  Параметры - Структура
//
// Возвращаемое значение:
//	СправочникСсылка - созданный шаблон проекта.
//
Функция СоздатьШаблонНаОснованииПроекта(Проект, Параметры) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
	
		ШаблонПроекта = Справочники.CRM_ШаблоныПроектов.СоздатьЭлемент();
		
		ШаблонПроекта.Заполнить(Неопределено);
		
		ШаблонПроекта.Наименование = Проект.Наименование;
		ШаблонПроекта.Комментарий = Проект.Комментарий;
		ШаблонПроекта.CRM_Подразделение = Проект.CRM_Подразделение;
		ПереноситьОтветственныхЭтапов = Ложь;
		Если Параметры.Свойство("ОтветственныхПроектаИЭтапов") И Параметры.ОтветственныхПроектаИЭтапов Тогда
			ПереноситьОтветственныхЭтапов = Истина;
			ШаблонПроекта.Ответственный = Проект.Ответственный;
		КонецЕсли;
		ШаблонПроекта.CRM_КомментарийHTML = ШаблонПроекта.CRM_КомментарийHTML;
		ШаблонПроекта.CRM_КолонкиКалендарногоГрафика =
			Новый ХранилищеЗначения(Проект.CRM_КолонкиКалендарногоГрафика.Получить());
		
		ШаблонПроекта.Записать();
		
		// Создадим структуру пакетов задач для нового проекта
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	CRM_ЭтапыПроектов.Ссылка КАК Ссылка,
		               |	CRM_ЭтапыПроектов.Наименование КАК Наименование,
		               |	CRM_ЭтапыПроектов.Ответственный КАК Ответственный
		               |ИЗ
		               |	Справочник.CRM_ЭтапыПроектов КАК CRM_ЭтапыПроектов
		               |ГДЕ
		               |	CRM_ЭтапыПроектов.Владелец = &Проект
		               |	И НЕ CRM_ЭтапыПроектов.ПометкаУдаления
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Ссылка ИЕРАРХИЯ";
		
		Запрос.УстановитьПараметр("Проект", Проект);
		ДеревоПакетов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		СоответствиеЭтаповПроектов = Новый Соответствие;
		СоздатьЭтапыШаблонаПроектаПоПроектуРекурсивно(ДеревоПакетов.Строки, ШаблонПроекта.Ссылка,
			 СоответствиеЭтаповПроектов,
			 ПереноситьОтветственныхЭтапов);
		
		Если Параметры.Свойство("ЗадачиИКонтрольныеТочки") И Параметры.ЗадачиИКонтрольныеТочки Тогда
			// Создадим задачи на основе шаблонов задач
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	CRM_ЭтапКалендарногоПлана.Ссылка КАК Ссылка,
			               |	CRM_ЭтапКалендарногоПлана.ПлановаяДатаНачала КАК ПлановаяДатаНачала,
			               |	CRM_ЭтапКалендарногоПлана.ПлановаяДлительность КАК ПлановаяДлительность,
			               |	CRM_ЭтапКалендарногоПлана.Описание КАК Описание,
			               |	CRM_ЭтапКалендарногоПлана.Тема КАК Тема,
			               |	CRM_ЭтапКалендарногоПлана.ТипЭтапа КАК ТипЭтапа,
			               |	CRM_ЭтапКалендарногоПлана.Важность КАК Важность,
			               |	CRM_ЭтапКалендарногоПлана.Подразделение КАК Подразделение,
			               |	CRM_ЭтапКалендарногоПлана.Этап КАК Этап
			               |ИЗ
			               |	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
			               |ГДЕ
			               |	CRM_ЭтапКалендарногоПлана.Проект = &Проект
			               |	И НЕ CRM_ЭтапКалендарногоПлана.ПометкаУдаления";
			
			Запрос.УстановитьПараметр("Проект", Проект);
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() > 0 Тогда
				Результат.Сортировать("ПлановаяДатаНачала");
				МинимальнаяДатаНачала = Результат[0].ПлановаяДатаНачала;
			КонецЕсли;
			Для каждого Задача Из  Результат Цикл
				ШаблонЭтапа = Документы.CRM_ШаблонЭтапаКалендарногоПлана.СоздатьДокумент();
				ШаблонЭтапа.Заполнить(ШаблонПроекта.Ссылка);
				ШаблонЭтапа.Описание = Задача.Описание;
				ШаблонЭтапа.ШаблонПроекта   = ШаблонПроекта.Ссылка;
				ШаблонЭтапа.Тема	  = Задача.Тема;
				ШаблонЭтапа.ТипЭтапа = Задача.ТипЭтапа;
				
				ШаблонЭтапа.ШаблонЭтапаПроекта = СоответствиеЭтаповПроектов.Получить(Задача.Этап);
				
				// установка дат
				ШаблонЭтапа.Смещение = (Задача.ПлановаяДатаНачала - МинимальнаяДатаНачала) / 86400;
				ШаблонЭтапа.ПродолжительностьДней = Задача.ПлановаяДлительность;
				
				// ЭТИ 2 РЕКВИЗИТА НУЖНО ВКЛЮЧИТЬ В МЕХАНИЗМ!!
				ШаблонЭтапа.Важность = Задача.Важность;
				ШаблонЭтапа.Подразделение = Задача.Подразделение;
				
				// Заполнение табличных частей
				// ТЧ "ЧекЛист"
				Если Параметры.Свойство("ЧекЛисты") И Параметры.ЧекЛисты Тогда
					Для каждого СтрокаШаблона Из Задача.Ссылка.ЧекЛист Цикл
						СтрокаЗадачи = ШаблонЭтапа.ЧекЛист.Добавить();
						СтрокаЗадачи.ОписаниеЗадачи = СтрокаШаблона.ОписаниеЗадачи;
					КонецЦикла;
				КонецЕсли;
				
				// ТЧ "Участники"
				Если (Параметры.Свойство("ТолькоОтветственныхЗадач") И Параметры.ТолькоОтветственныхЗадач) 
					ИЛИ (Параметры.Свойство("ВсехУчастниковЗадач") И Параметры.ВсехУчастниковЗадач) Тогда
					Если Задача.Ссылка.Участники.Количество() > 0 Тогда
						Для каждого СтрокаШаблона Из Задача.Ссылка.Участники Цикл
							Если Параметры.ВсехУчастниковЗадач ИЛИ (Параметры.ТолькоОтветственныхЗадач И СтрокаШаблона.Ответственный) Тогда
								НовыйУчастник = ШаблонЭтапа.Участники.Добавить();
								ЗаполнитьЗначенияСвойств(НовыйУчастник, СтрокаШаблона);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				// ТЧ "ВариантыКонтекстаФайлов"
				Если Параметры.Свойство("КонтекстыФайловЗадач") И Параметры.КонтекстыФайловЗадач Тогда
					Для каждого СтрокаШаблона Из Задача.Ссылка.ВариантыКонтекстаФайлов Цикл
						СтрокаЗадачи = ШаблонЭтапа.ВариантыКонтекстаФайлов.Добавить();
						СтрокаЗадачи.ВариантКонтекстаФайлов = СтрокаШаблона.ВариантКонтекстаФайлов;
					КонецЦикла;
				КонецЕсли;
				
				ШаблонЭтапа.Записать();
				
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнфОбОшибке = ИнформацияОбОшибке();
		СтрОшибка = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнфОбОшибке);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось создать структуру шаблона проекта';
			|en='Failed to create the template structure of the project'")
			+ ?(ЗначениеЗаполнено(СтрОшибка), ": " + Символы.ПС + СтрОшибка, "."));
			
		Возврат Справочники.CRM_ШаблоныПроектов.ПустаяСсылка();
		
	КонецПопытки;
		
	Возврат ШаблонПроекта.Ссылка;
	
КонецФункции

// Процедура выполняет пересчет дерева шаблона проекта.
//
// Параметры:
//  ШаблонПроекта			 - СправочникСсылка.CRM_ШаблоныПроектов	 - Шаблон проекта.
//  ДанныеИсключаемогоЭтапа	 - Структура, Неопределено	 - Данные исключаемого этапа.
//
Процедура ПересчитатьДеревоШаблонаПроекта(ШаблонПроекта, ДанныеИсключаемогоЭтапа = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ШаблонПроекта) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ШаблонПроекта.РежимВводаОтЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	Дерево = ДеревоПоЭтапамВводОтЗадачи(ШаблонПроекта, ДанныеИсключаемогоЭтапа);
	
	НачатьТранзакцию();
	Попытка
		ПредыдущаяОтсрочкаСтартаДней = 0;
		ПересчитатьДеревоШаблонаПроектаРекурсивно(Неопределено, Дерево.Строки, ПредыдущаяОтсрочкаСтартаДней, ДанныеИсключаемогоЭтапа);
		ЗафиксироватьТранзакцию();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

Процедура ПересчитатьДеревоШаблонаПроектаРекурсивно(Родитель, Строки, ПредыдущаяОтсрочкаСтартаДней, ДанныеИсключаемогоЭтапа = Неопределено)
	
	Для Каждого СтрокаДерева Из Строки Цикл
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ПересчитатьДеревоШаблонаПроектаРекурсивно(СтрокаДерева, СтрокаДерева.Строки, ПредыдущаяОтсрочкаСтартаДней, ДанныеИсключаемогоЭтапа);
		Иначе
			
			Если СтрокаДерева.ОбъектЕстьВБазе = 0 Тогда // Этап шаблона проекта без подчиненных элементов
				Продолжить;
			КонецЕсли;
			
			// Код следующего условия важен, когда пересчет вызван из модуля объекта Документ.CRM_ШаблонЭтапаКалендарногоПлана,
			// т.к. данная структура содержит поля с актульными данными по этому шаблону этапа, которых еще нет в БД
			// (пересчет вызывает в обработчике ПередЗаписью и соотв-но, данные полученные запросом выше по данному шаблону - не корректны).
			// Эти же поля являются выходными - по ним заполняется объект шаблона задачи в модуле объекта после пересчета.
			Если ЗначениеЗаполнено(ДанныеИсключаемогоЭтапа) Тогда
				
				Если СтрокаДерева.ОбъектЕстьВБазе = 1 Тогда
					Если ДанныеИсключаемогоЭтапа.Этап = СтрокаДерева.Этап Тогда
						Если НЕ ДанныеИсключаемогоЭтапа.ПометкаУдаления Тогда
							ДанныеИсключаемогоЭтапа.Смещение = ПредыдущаяОтсрочкаСтартаДней + ДанныеИсключаемогоЭтапа.СмещениеОтЗадачи;
							ПредыдущаяОтсрочкаСтартаДней = ДанныеИсключаемогоЭтапа.Смещение;
						КонецЕсли;
						Продолжить;
					КонецЕсли;
				ИначеЕсли СтрокаДерева.ОбъектЕстьВБазе = 2 Тогда
					ДанныеИсключаемогоЭтапа.Смещение = ПредыдущаяОтсрочкаСтартаДней + ДанныеИсключаемогоЭтапа.СмещениеОтЗадачи;
					ПредыдущаяОтсрочкаСтартаДней = ДанныеИсключаемогоЭтапа.Смещение;
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			НовоеСмещение = ПредыдущаяОтсрочкаСтартаДней + СтрокаДерева.ОтсрочкаОтПредыдущейЗадачи;
			ПредыдущаяОтсрочкаСтартаДней = НовоеСмещение;
			
			Если СтрокаДерева.Этап.СмещениеОтЗадачи = СтрокаДерева.ОтсрочкаОтПредыдущейЗадачи
				И СтрокаДерева.Этап.Смещение = НовоеСмещение Тогда
				Продолжить;
			КонецЕсли;
			
			ЗадачаПроектаОб = СтрокаДерева.Этап.ПолучитьОбъект();
			
			ЗадачаПроектаОб.СмещениеОтЗадачи = СтрокаДерева.ОтсрочкаОтПредыдущейЗадачи;
			ЗадачаПроектаОб.Смещение = НовоеСмещение;			
			
			ЗадачаПроектаОб.ДополнительныеСвойства.Вставить("НеПересчитыватьДеревоШаблонаПроекта");
			ЗадачаПроектаОб.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает текст запроса шаблона проекта при вводе от задачи.
//
// Параметры:
//  ДанныеИсключаемогоЭтапа	 - Структура, Неопределено	 - Данные исключаемого этапа.
// 
// Возвращаемое значение:
//   - Строка
//
Функция ТекстЗапросаШаблонаПроектаВводОтЗадачи(ДанныеИсключаемогоЭтапа = Неопределено) Экспорт
	
	Если ДанныеИсключаемогоЭтапа = Неопределено Тогда
		
		// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
		Возврат "ВЫБРАТЬ
		        |	CRM_ШаблоныЭтаповПроектов.Ссылка КАК Пакет,
		        |	CRM_ШаблоныЭтаповПроектов.МинимальноеСмещение КАК МинимальноеСмещение,
		        |	CRM_ШаблоныЭтаповПроектов.ПродолжительностьДней КАК ПродолжительностьДнейЭтапа,
		        |	CRM_ШаблоныЭтаповПроектов.Ответственный КАК Ответственный,
		        |	CRM_ШаблонЭтапаКалендарногоПлана.Ссылка КАК Этап,
		        |	CRM_ШаблонЭтапаКалендарногоПлана.ПродолжительностьДней КАК ПродолжительностьДней,
		        |	CRM_ШаблонЭтапаКалендарногоПлана.ТипЭтапа КАК ТипЭтапа,
		        |	CRM_ШаблонЭтапаКалендарногоПлана.Смещение КАК ОтсрочкаСтартаДней,
		        |	CRM_ШаблонЭтапаКалендарногоПлана.СмещениеОтЗадачи КАК ОтсрочкаОтПредыдущейЗадачи,
		        |	CRM_ШаблонЭтапаКалендарногоПлана.Важность КАК Важность,
		        |	CRM_ШаблонЭтапаКалендарногоПлана.ПометкаУдаления КАК ПометкаУдаления,
		        |	CRM_ШаблонЭтапаКалендарногоПлана.ПорядокВШаблоне КАК ПорядокЗадачи,
		        |	CRM_ШаблоныЭтаповПроектов.ПорядокВШаблоне КАК ПорядокГруппы,
		        |	ВЫБОР
		        |		КОГДА CRM_ШаблонЭтапаКалендарногоПлана.Ссылка ЕСТЬ NULL
		        |			ТОГДА 0
		        |		ИНАЧЕ 1
		        |	КОНЕЦ КАК ОбъектЕстьВБазе
		        |ИЗ
		        |	Справочник.CRM_ШаблоныЭтаповПроектов КАК CRM_ШаблоныЭтаповПроектов
		        |		ПОЛНОЕ СОЕДИНЕНИЕ Документ.CRM_ШаблонЭтапаКалендарногоПлана КАК CRM_ШаблонЭтапаКалендарногоПлана
		        |		ПО CRM_ШаблоныЭтаповПроектов.Ссылка = CRM_ШаблонЭтапаКалендарногоПлана.ШаблонЭтапаПроекта
		        |ГДЕ
		        |	(CRM_ШаблоныЭтаповПроектов.ШаблонПроекта = &ШаблонПроекта
		        |			ИЛИ CRM_ШаблонЭтапаКалендарногоПлана.ШаблонПроекта = &ШаблонПроекта)
		        |	И НЕ ЕСТЬNULL(CRM_ШаблоныЭтаповПроектов.ПометкаУдаления, ЛОЖЬ)
		        |ИТОГИ ПО
		        |	Пакет ИЕРАРХИЯ";
		// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
		
	Иначе
		
		// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
		Возврат "ВЫБРАТЬ
		        |	ВЫРАЗИТЬ(ТаблицаИсключаемогоЭтапа.Этап КАК Документ.CRM_ШаблонЭтапаКалендарногоПлана) КАК Этап,
		        |	ВЫРАЗИТЬ(ТаблицаИсключаемогоЭтапа.ШаблонЭтапаПроекта КАК Справочник.CRM_ШаблоныЭтаповПроектов) КАК ШаблонЭтапаПроекта,
		        |	ТаблицаИсключаемогоЭтапа.Смещение КАК Смещение,
		        |	ТаблицаИсключаемогоЭтапа.СмещениеОтЗадачи КАК СмещениеОтЗадачи,
		        |	ВЫРАЗИТЬ(ТаблицаИсключаемогоЭтапа.ШаблонПроекта КАК Справочник.CRM_ШаблоныПроектов) КАК ШаблонПроекта,
				|	ТаблицаИсключаемогоЭтапа.ПорядокВШаблоне КАК ПорядокВШаблоне
		        |ПОМЕСТИТЬ ИсключаемыйЭтап
		        |ИЗ
		        |	&ТаблицаИсключаемогоЭтапа КАК ТаблицаИсключаемогоЭтапа
		        |;
		        |
		        |////////////////////////////////////////////////////////////////////////////////
		        |ВЫБРАТЬ
		        |	CRM_ШаблоныЭтаповПроектов.Ссылка КАК Пакет,
		        |	CRM_ШаблоныЭтаповПроектов.МинимальноеСмещение КАК МинимальноеСмещение,
		        |	CRM_ШаблоныЭтаповПроектов.ПродолжительностьДней КАК ПродолжительностьДнейЭтапа,
		        |	CRM_ШаблоныЭтаповПроектов.Ответственный КАК Ответственный,
		        |	CRM_ШаблоныЭтаповПроектов.ПорядокВШаблоне КАК ПорядокГруппы,
		        |	CRM_ШаблонЭтапаКалендарногоПлана.Ссылка КАК Этап,
		        |	CRM_ШаблонЭтапаКалендарногоПлана.Смещение КАК ОтсрочкаСтартаДней,
		        |	CRM_ШаблонЭтапаКалендарногоПлана.СмещениеОтЗадачи КАК ОтсрочкаОтПредыдущейЗадачи,
		        |	CRM_ШаблонЭтапаКалендарногоПлана.ПометкаУдаления КАК ПометкаУдаления,
		        |	CRM_ШаблонЭтапаКалендарногоПлана.ПорядокВШаблоне КАК ПорядокЗадачи,
		        |	ВЫБОР
		        |		КОГДА CRM_ШаблонЭтапаКалендарногоПлана.Ссылка ЕСТЬ NULL
		        |			ТОГДА 0
		        |		ИНАЧЕ 1
		        |	КОНЕЦ КАК ОбъектЕстьВБазе
		        |ИЗ
		        |	Справочник.CRM_ШаблоныЭтаповПроектов КАК CRM_ШаблоныЭтаповПроектов
		        |		ПОЛНОЕ СОЕДИНЕНИЕ Документ.CRM_ШаблонЭтапаКалендарногоПлана КАК CRM_ШаблонЭтапаКалендарногоПлана
		        |		ПО CRM_ШаблоныЭтаповПроектов.Ссылка = CRM_ШаблонЭтапаКалендарногоПлана.ШаблонЭтапаПроекта
		        |ГДЕ
		        |	(CRM_ШаблоныЭтаповПроектов.ШаблонПроекта = &ШаблонПроекта
		        |			ИЛИ CRM_ШаблонЭтапаКалендарногоПлана.ШаблонПроекта = &ШаблонПроекта)
		        |	И НЕ ЕСТЬNULL(CRM_ШаблоныЭтаповПроектов.ПометкаУдаления, ЛОЖЬ)
		        |
		        |ОБЪЕДИНИТЬ ВСЕ
		        |
		        |ВЫБРАТЬ
		        |	CRM_ШаблоныЭтаповПроектов.Ссылка,
		        |	CRM_ШаблоныЭтаповПроектов.МинимальноеСмещение,
		        |	CRM_ШаблоныЭтаповПроектов.ПродолжительностьДней,
		        |	CRM_ШаблоныЭтаповПроектов.Ответственный,
		        |	ИсключаемыйЭтап.Этап,
		        |	ИсключаемыйЭтап.Смещение,
		        |	ИсключаемыйЭтап.СмещениеОтЗадачи,		        
		        |	0,
				|	ЛОЖЬ,
		        |	ИсключаемыйЭтап.ПорядокВШаблоне,
		        |	ВЫБОР
		        |		КОГДА ИсключаемыйЭтап.Этап ЕСТЬ NULL
		        |			ТОГДА 0
		        |		ИНАЧЕ 2
		        |	КОНЕЦ
		        |ИЗ
		        |	Справочник.CRM_ШаблоныЭтаповПроектов КАК CRM_ШаблоныЭтаповПроектов
		        |		ПОЛНОЕ СОЕДИНЕНИЕ ИсключаемыйЭтап КАК ИсключаемыйЭтап
		        |		ПО CRM_ШаблоныЭтаповПроектов.Ссылка = ИсключаемыйЭтап.ШаблонЭтапаПроекта
		        |ГДЕ
		        |	(CRM_ШаблоныЭтаповПроектов.ШаблонПроекта = &ШаблонПроекта
		        |			ИЛИ ИсключаемыйЭтап.ШаблонПроекта = &ШаблонПроекта)
		        |	И НЕ ЕСТЬNULL(CRM_ШаблоныЭтаповПроектов.ПометкаУдаления, ЛОЖЬ)
		        |ИТОГИ ПО
		        |	Пакет ИЕРАРХИЯ";
		// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
		
	КонецЕсли;
	
КонецФункции

// Функция возвращает текст запроса шаблона этапа при вводе от задачи.
// 
// Возвращаемое значение:
//   - Строка
//
Функция ТекстЗапросаШаблонаЭтапаВводОтЗадачи() Экспорт
	
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
		Возврат "ВЫБРАТЬ
		        |	CRM_ШаблоныЭтаповПроектов.Ссылка КАК Пакет,
		        |	CRM_ШаблоныЭтаповПроектов.МинимальноеСмещение КАК МинимальноеСмещение,
		        |	CRM_ШаблоныЭтаповПроектов.ПродолжительностьДней КАК ПродолжительностьДнейЭтапа,
		        |	CRM_ШаблоныЭтаповПроектов.Ответственный КАК Ответственный,
		        |	CRM_ШаблонЭтапаКалендарногоПлана.Ссылка КАК Этап,
		        |	CRM_ШаблонЭтапаКалендарногоПлана.ПродолжительностьДней КАК ПродолжительностьДней,
		        |	CRM_ШаблонЭтапаКалендарногоПлана.ТипЭтапа КАК ТипЭтапа,
		        |	CRM_ШаблонЭтапаКалендарногоПлана.Смещение КАК ОтсрочкаСтартаДней,
		        |	CRM_ШаблонЭтапаКалендарногоПлана.СмещениеОтЗадачи КАК ОтсрочкаОтПредыдущейЗадачи,
		        |	CRM_ШаблонЭтапаКалендарногоПлана.Важность КАК Важность,
		        |	CRM_ШаблонЭтапаКалендарногоПлана.ПометкаУдаления КАК ПометкаУдаления,
		        |	CRM_ШаблонЭтапаКалендарногоПлана.ПорядокВШаблоне КАК ПорядокЗадачи,
		        |	CRM_ШаблоныЭтаповПроектов.ПорядокВШаблоне КАК ПорядокГруппы,
		        |	ВЫБОР
		        |		КОГДА CRM_ШаблонЭтапаКалендарногоПлана.Ссылка ЕСТЬ NULL
		        |			ТОГДА 0
		        |		ИНАЧЕ 1
		        |	КОНЕЦ КАК ОбъектЕстьВБазе
		        |ИЗ
		        |	Справочник.CRM_ШаблоныЭтаповПроектов КАК CRM_ШаблоныЭтаповПроектов
		        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_ШаблонЭтапаКалендарногоПлана КАК CRM_ШаблонЭтапаКалендарногоПлана
		        |		ПО CRM_ШаблоныЭтаповПроектов.Ссылка = CRM_ШаблонЭтапаКалендарногоПлана.ШаблонЭтапаПроекта
		        |ГДЕ
		        |	(CRM_ШаблоныЭтаповПроектов.ШаблонПроекта = &ШаблонПроекта
		        |			ИЛИ CRM_ШаблонЭтапаКалендарногоПлана.ШаблонПроекта = &ШаблонПроекта)
		        |	И (CRM_ШаблоныЭтаповПроектов.Ссылка В ИЕРАРХИИ (&ШаблонЭтапаПроекта)
		        |			ИЛИ CRM_ШаблонЭтапаКалендарногоПлана.ШаблонЭтапаПроекта В ИЕРАРХИИ (&ШаблонЭтапаПроекта))
		        |	И НЕ CRM_ШаблоныЭтаповПроектов.ПометкаУдаления
		        |ИТОГИ ПО
		        |	Пакет ИЕРАРХИЯ";
		// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	
КонецФункции

// Функция возвращает дерево по этапам при ввод от задачи.
//
// Параметры:
//  ШаблонПроекта			 - СправочникСсылка.CRM_ШаблоныПроектов	 - Шаблон проекта.
//  ДанныеИсключаемогоЭтапа	 - Структура, Неопределено	 - Данные исключаемого этапа.
// 
// Возвращаемое значение:
//   - ДеревоЗначений
//
Функция ДеревоПоЭтапамВводОтЗадачи(ШаблонПроекта, ДанныеИсключаемогоЭтапа = Неопределено) Экспорт
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Этап");
	Дерево.Колонки.Добавить("ОтсрочкаОтПредыдущейЗадачи", Новый ОписаниеТипов("Число"));
	Дерево.Колонки.Добавить("ПорядокВШаблоне", Новый ОписаниеТипов("Число"));
	Дерево.Колонки.Добавить("ОбъектЕстьВБазе", Новый ОписаниеТипов("Число")); // 0 - этап, 1 - есть, 2 - нет
	

	Запрос = Новый Запрос;
	
	// Если задача шаблона - новая, и ее еще нет в базе.
	Если ЗначениеЗаполнено(ДанныеИсключаемогоЭтапа)
		И НЕ ЗначениеЗаполнено(ДанныеИсключаемогоЭтапа.Этап) Тогда
		Запрос.Текст = ТекстЗапросаШаблонаПроектаВводОтЗадачи(ДанныеИсключаемогоЭтапа);	
	Иначе
		Запрос.Текст = ТекстЗапросаШаблонаПроектаВводОтЗадачи();	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ШаблонПроекта", ШаблонПроекта);
	
	Если ЗначениеЗаполнено(ДанныеИсключаемогоЭтапа) Тогда
		
		ТаблицаПараметр = Новый ТаблицаЗначений;
		ТаблицаПараметр.Колонки.Добавить("Этап", Новый ОписаниеТипов("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана"));
		ТаблицаПараметр.Колонки.Добавить("ШаблонЭтапаПроекта", Новый ОписаниеТипов("СправочникСсылка.CRM_ШаблоныЭтаповПроектов"));
		ТаблицаПараметр.Колонки.Добавить("ШаблонПроекта", Новый ОписаниеТипов("СправочникСсылка.CRM_ШаблоныПроектов"));
		ТаблицаПараметр.Колонки.Добавить("Смещение", Новый ОписаниеТипов("Число"));
		ТаблицаПараметр.Колонки.Добавить("СмещениеОтЗадачи", Новый ОписаниеТипов("Число"));
		ТаблицаПараметр.Колонки.Добавить("ПорядокВШаблоне", Новый ОписаниеТипов("Число"));
		
		НС = ТаблицаПараметр.Добавить();
		ЗаполнитьЗначенияСвойств(НС, ДанныеИсключаемогоЭтапа);
		
		Запрос.УстановитьПараметр("ТаблицаИсключаемогоЭтапа", ТаблицаПараметр);
		
	КонецЕсли;
	
	ДеревоПоЗапросу = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ВерхняяСтрокаЭтапов = Дерево.Строки.Добавить();
	
	ЗаполнитьДеревоПоЭтапамРекурсивноВводОтЗадачи(Неопределено, ВерхняяСтрокаЭтапов.Строки, ДеревоПоЗапросу.Строки, ДанныеИсключаемогоЭтапа);
	
	ВерхняяСтрокаЭтапов.Строки.Сортировать("ПорядокВШаблоне");	
	
	Возврат Дерево;
	
КонецФункции

Процедура ЗаполнитьДеревоПоЭтапамРекурсивноВводОтЗадачи(РодительСтрокаЭтапов, СтрокиЭтапов, СтрокиПоЗапросу, ДанныеИсключаемогоЭтапа)
	
	Для каждого СтрокаПоЗапросу Из СтрокиПоЗапросу Цикл
		
		Если СтрокаПоЗапросу.Строки.Количество() > 0 Тогда
			// Есть подчиненные пакеты/задачи
			Если ЗначениеЗаполнено(СтрокаПоЗапросу.Пакет) И (РодительСтрокаЭтапов = Неопределено
				Или РодительСтрокаЭтапов.Этап <> СтрокаПоЗапросу.Пакет) Тогда
				СтрокаЭтапа = СтрокиЭтапов.Добавить();
				СтрокаЭтапа.Этап = СтрокаПоЗапросу.Пакет;
				СтрокаЭтапа.ПорядокВШаблоне = СтрокаПоЗапросу.ПорядокГруппы;
				СтрокаЭтапа.ОбъектЕстьВБазе = СтрокаПоЗапросу.ОбъектЕстьВБазе;				
			
				ЗаполнитьДеревоПоЭтапамРекурсивноВводОтЗадачи(СтрокаЭтапа, СтрокаЭтапа.Строки, СтрокаПоЗапросу.Строки, ДанныеИсключаемогоЭтапа);
				
				СтрокаЭтапа.Строки.Сортировать("ПорядокВШаблоне");				
			Иначе
				ЗаполнитьДеревоПоЭтапамРекурсивноВводОтЗадачи(РодительСтрокаЭтапов, СтрокиЭтапов, СтрокаПоЗапросу.Строки, ДанныеИсключаемогоЭтапа);
			КонецЕсли;
			
		ИначеЕсли (ЗначениеЗаполнено(СтрокаПоЗапросу.Этап) Или СтрокаПоЗапросу.ОбъектЕстьВБазе = 2)
			И НЕ СтрокаПоЗапросу.ПометкаУдаления Тогда
			
			СтрокаЭтапа = СтрокиЭтапов.Добавить();
			СтрокаЭтапа.Этап 				  = СтрокаПоЗапросу.Этап;
			
			Если ЗначениеЗаполнено(ДанныеИсключаемогоЭтапа)
				И ДанныеИсключаемогоЭтапа.Этап = СтрокаПоЗапросу.Этап Тогда
				СтрокаЭтапа.ПорядокВШаблоне = ДанныеИсключаемогоЭтапа.ПорядокВШаблоне;
			Иначе
				СтрокаЭтапа.ПорядокВШаблоне = СтрокаПоЗапросу.ПорядокЗадачи;
			КонецЕсли;
			
			СтрокаЭтапа.ОтсрочкаОтПредыдущейЗадачи = СтрокаПоЗапросу.ОтсрочкаОтПредыдущейЗадачи;
			СтрокаЭтапа.ОбъектЕстьВБазе = СтрокаПоЗапросу.ОбъектЕстьВБазе;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // РаботаСШаблонамиПроектов

#Область ФормированиеПроекта

// Создает проект по шаблону.
//
// Параметры:
//	ШаблонПроекта 	- СправочникСсылка.CRM_ШаблоныПроектов - шаблон проекта.
//	СозданныйПроект - СправочникСсылка.Проекты - созданный проект.
//
Процедура СоздатьПроектПоШаблону(ШаблонПроекта, СозданныйПроект) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		УчитыватьПроизводственныйКалендарь = ШаблонПроекта.CRM_УчитыватьПроизводственныйКалендарь;
		Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
		
		НовыйПроект = Справочники.Проекты.СоздатьЭлемент();
		
		НовыйПроект.Заполнить(Неопределено);
		
		НовыйПроект.Наименование = ШаблонПроекта.Наименование;
		НовыйПроект.CRM_Планируемый  = Истина;
		НовыйПроект.Комментарий = ШаблонПроекта.Комментарий;
		НовыйПроект.ПлановаяДатаНачала = ТекущаяДатаСеанса();
		НовыйПроект.CRM_Подразделение = ШаблонПроекта.CRM_Подразделение;
		НовыйПроект.Ответственный = ШаблонПроекта.Ответственный;
		НовыйПроект.CRM_КомментарийHTML = ШаблонПроекта.CRM_КомментарийHTML;
		НовыйПроект.CRM_Статус 	 = Перечисления.CRM_СтатусыПроектов.Планируется;
		НовыйПроект.CRM_КолонкиКалендарногоГрафика =
			Новый ХранилищеЗначения(ШаблонПроекта.CRM_КолонкиКалендарногоГрафика.Получить());
		НовыйПроект.CRM_УчитыватьПроизводственныйКалендарь = ШаблонПроекта.CRM_УчитыватьПроизводственныйКалендарь;
		
		НовыйПроект.Записать();
		
		// Перенесем вложения (в том числе картинки форматированного описания)
		CRM_ПрисоединенныеФайлы.СкопироватьПрисоединенныеФайлы(ШаблонПроекта, НовыйПроект.Ссылка);
		
		// Создадим структуру пакетов задач для нового проекта
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	CRM_ШаблоныЭтаповПроектов.Ссылка КАК Ссылка,
		               |	CRM_ШаблоныЭтаповПроектов.Наименование КАК Наименование,
		               |	CRM_ШаблоныЭтаповПроектов.Ответственный КАК Ответственный
		               |ИЗ
		               |	Справочник.CRM_ШаблоныЭтаповПроектов КАК CRM_ШаблоныЭтаповПроектов
		               |ГДЕ
		               |	CRM_ШаблоныЭтаповПроектов.ШаблонПроекта = &ШаблонПроекта
		               |	И НЕ CRM_ШаблоныЭтаповПроектов.ПометкаУдаления
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Ссылка ИЕРАРХИЯ";
		
		Запрос.УстановитьПараметр("ШаблонПроекта", ШаблонПроекта);
		ДеревоПакетов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		СоответствиеЭтаповПроектов = Новый Соответствие;
		СоздатьЭтапыПроектовПоШаблонуРекурсивно(ДеревоПакетов.Строки, НовыйПроект.Ссылка, СоответствиеЭтаповПроектов);
		
		// Создадим задачи на основе шаблонов задач
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	CRM_ШаблонЭтапаКалендарногоПлана.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.CRM_ШаблонЭтапаКалендарногоПлана КАК CRM_ШаблонЭтапаКалендарногоПлана
		               |ГДЕ
		               |	CRM_ШаблонЭтапаКалендарногоПлана.ШаблонПроекта = &ШаблонПроекта
		               |	И НЕ CRM_ШаблонЭтапаКалендарногоПлана.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ШаблонПроекта", ШаблонПроекта);
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			ШаблонЭтапа = Результат.ссылка;
			Этап = Документы.CRM_ЭтапКалендарногоПлана.СоздатьДокумент();
			Этап.Заполнить(НовыйПроект.Ссылка);
			Этап.Описание = ШаблонЭтапа.Описание;
			Этап.Проект   = НовыйПроект.Ссылка;
			Этап.Статус   = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Запланирована;
			Этап.Тема	  = ШаблонЭтапа.Тема;
			Этап.ТипЭтапа = ШаблонЭтапа.ТипЭтапа;
			
			Этап.Этап = СоответствиеЭтаповПроектов.Получить(ШаблонЭтапа.ШаблонЭтапаПроекта);
			
			// установка дат
			Смещение = ШаблонЭтапа.Смещение;
			
			Если УчитыватьПроизводственныйКалендарь Тогда
				Этап.ПлановаяДатаНачала = CRM_КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь,
					НовыйПроект.ПлановаяДатаНачала, Смещение);
			Иначе
				Этап.ПлановаяДатаНачала = НовыйПроект.ПлановаяДатаНачала + Смещение * 86400;
			КонецЕсли;
			
			Если Этап.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
				Этап.ПлановаяДатаОкончания = Этап.ПлановаяДатаНачала;
			ИначеЕсли ШаблонЭтапа.ПродолжительностьДней = 0 Тогда
				Этап.ПлановаяДатаОкончания = Этап.ПлановаяДатаНачала;
			ИначеЕсли УчитыватьПроизводственныйКалендарь Тогда
				Продолжительность = Макс(0, ШаблонЭтапа.ПродолжительностьДней - 1);
				Этап.ПлановаяДатаОкончания = CRM_КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, Этап.ПлановаяДатаНачала,
					Продолжительность, Ложь, Истина);
			Иначе
				Этап.ПлановаяДатаОкончания = Этап.ПлановаяДатаНачала + (ШаблонЭтапа.ПродолжительностьДней - 1) * 86400;
			КонецЕсли;
			
			Этап.ПлановаяДлительность      = ШаблонЭтапа.ПродолжительностьДней;
			
			// ЭТИ 2 РЕКВИЗИТА НУЖНО ВКЛЮЧИТЬ В МЕХАНИЗМ!!
			Этап.Важность = ШаблонЭтапа.Важность;
			Этап.Подразделение = ШаблонЭтапа.Подразделение;
			
			// Заполнение табличных частей
			// ТЧ "ЧекЛист"
			Для каждого СтрокаШаблона Из ШаблонЭтапа.ЧекЛист Цикл
				СтрокаЗадачи = Этап.ЧекЛист.Добавить();
				СтрокаЗадачи.ОписаниеЗадачи = СтрокаШаблона.ОписаниеЗадачи;
			КонецЦикла;
			
			// ТЧ "Участники"
			Если ШаблонЭтапа.Участники.Количество() > 0 Тогда
				Для каждого СтрокаШаблона Из ШаблонЭтапа.Участники Цикл
					НовыйУчастник = Этап.Участники.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйУчастник, СтрокаШаблона);
				КонецЦикла;
			Иначе
				Если ЗначениеЗаполнено(Этап.Этап.Ответственный) ИЛИ ЗначениеЗаполнено(НовыйПроект.Ответственный) Тогда
					НовыйУчастник = Этап.Участники.Добавить();
					НовыйУчастник.Ответственный = Истина;
					НовыйУчастник.Пользователь = ?(ЗначениеЗаполнено(Этап.Этап.Ответственный),
						 Этап.Этап.Ответственный,
						 НовыйПроект.Ответственный);
					КИПользователя = ПолучитьКИУчастника(НовыйУчастник.Пользователь);
					НовыйУчастник.Адрес = КИПользователя.Адрес;
					НовыйУчастник.Телефон = КИПользователя.Телефон;
				КонецЕсли;
			КонецЕсли;
			
			// ТЧ "ВариантыКонтекстаФайлов"
			Для каждого СтрокаШаблона Из ШаблонЭтапа.ВариантыКонтекстаФайлов Цикл
				СтрокаЗадачи = Этап.ВариантыКонтекстаФайлов.Добавить();
				СтрокаЗадачи.ВариантКонтекстаФайлов = СтрокаШаблона.ВариантКонтекстаФайлов;
			КонецЦикла;
			
			Этап.Записать();
			
			CRM_ПрисоединенныеФайлы.СкопироватьПрисоединенныеФайлы(ШаблонЭтапа, Этап.Ссылка);

		КонецЦикла;
		
		НовыйПроект.ПлановаяДатаОкончания = ПолучитьПлановуюДатуОкончанияПроекта(НовыйПроект.Ссылка);
		НовыйПроект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнфОбОшибке = ИнформацияОбОшибке();
		СтрОшибка = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнфОбОшибке);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось создать структуру проекта';
			|en='Failed to create project structure'")
			+ ?(ЗначениеЗаполнено(СтрОшибка), ": " + Символы.ПС + СтрОшибка, "."));
			
		СозданныйПроект  = Неопределено;
		
	КонецПопытки;
		
	СозданныйПроект = НовыйПроект.Ссылка;
	
КонецПроцедуры // СоздатьПроектПоШаблону()

#КонецОбласти // ФормированиеПроекта

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьЭтапыШаблонаПроектаПоПроектуРекурсивно(Строки, ШаблонПроекта,
	 СоответствиеЭтаповПроектов, ПереноситьОтветственныхЭтапов,
	 Родитель = Неопределено)
	
	Для каждого Строка Из Строки Цикл
		НовыйПакет = Справочники.CRM_ШаблоныЭтаповПроектов.СоздатьЭлемент();
		НовыйПакет.Наименование = Строка.Наименование;
		Если ПереноситьОтветственныхЭтапов Тогда
			НовыйПакет.Ответственный = Строка.Ответственный;
		КонецЕсли;
		НовыйПакет.ШаблонПроекта = ШаблонПроекта;
		Если Строка.Родитель <> Неопределено Тогда
			НовыйПакет.Родитель = Родитель;
		КонецЕсли;
		
		НовыйПакет.Записать();
		СоответствиеЭтаповПроектов.Вставить(Строка.Ссылка, НовыйПакет.Ссылка);
		
		Если Строка.Строки.Количество() > 0 Тогда
			СоздатьЭтапыШаблонаПроектаПоПроектуРекурсивно(Строка.Строки, ШаблонПроекта,
				 СоответствиеЭтаповПроектов, ПереноситьОтветственныхЭтапов,
				 НовыйПакет.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СоздатьЭтапыПроектовПоШаблонуРекурсивно()

Процедура СоздатьЭтапыПроектовПоШаблонуРекурсивно(Строки, Проект, СоответствиеЭтаповПроектов, Родитель = Неопределено)
	
	Для каждого Строка Из Строки Цикл
		НовыйПакет = Справочники.CRM_ЭтапыПроектов.СоздатьЭлемент();
		НовыйПакет.Наименование = Строка.Наименование;
		НовыйПакет.Ответственный = Строка.Ответственный;
		НовыйПакет.Владелец = Проект;
		Если Строка.Родитель <> Неопределено Тогда
			НовыйПакет.Родитель = Родитель;
		КонецЕсли;
		
		НовыйПакет.Записать();
		СоответствиеЭтаповПроектов.Вставить(Строка.Ссылка, НовыйПакет.Ссылка);
		
		Если Строка.Строки.Количество() > 0 Тогда
			СоздатьЭтапыПроектовПоШаблонуРекурсивно(Строка.Строки, Проект, СоответствиеЭтаповПроектов, НовыйПакет.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СоздатьЭтапыПроектовПоШаблонуРекурсивно()

#КонецОбласти
