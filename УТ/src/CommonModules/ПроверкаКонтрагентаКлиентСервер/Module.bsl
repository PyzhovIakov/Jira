///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ПроверкаКонтрагента".
// ОбщийМодуль.ПроверкаКонтрагентаКлиентСервер.
//
// Клиент-серверные процедуры и функции проверки контрагента:
//  - отображение индексов СПАРК Риски.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Выводит информацию об индексах СПАРК Риски в элемент управления.
// Эта служебная процедура непосредственно заполняет элементы управления.
//
// Параметры:
//  РезультатИндексыКонтрагента - Структура, Неопределено - результата выполнения функции ИндексыСПАРККонтрагента
//                                 (ключи описаны в СПАРКРискиКлиентСервер.НовыйДанныеИндексов()),
//                                 или Неопределено, если необходимо вызвать эту функцию;
//  КонтрагентОбъект - Объект, Неопределено - заполняется в том случае, если форма - это форма элемента справочника,
//                     а не форма документа.
//  Контрагент - ОпределяемыйТип.КонтрагентБИП, Строка - Контрагент или ИНН контрагента;
//  Форма      - ФормаКлиентскогоПриложения - форма, в которой необходимо вывести информацию об индексах СПАРК Риски.
//               В этой форме должен присутствовать реквизит "ИндексыСПАРКРиски" произвольного типа
//               и (если заполнение будет осуществляться стандартным библиотечным способом), то элементы с именами:
//    * ДекорацияИндексыСПАРКРиски - Декорация текст;
//    * КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски - Декорация картинка;
//  ИспользованиеРазрешено - Булево - разрешено использование;
//
Процедура ОтобразитьИндексыСПАРК(
	РезультатИндексыКонтрагента,
	КонтрагентОбъект,
	Контрагент,
	Форма,
	ИспользованиеРазрешено) Экспорт
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		Возврат;
	КонецЕсли;
	МодульСПАРКРискиКлиентСервер = ОбщегоНазначения.ОбщийМодуль("СПАРКРискиКлиентСервер");
	МодульСПАРКРискиВызовСервера = ОбщегоНазначения.ОбщийМодуль("СПАРКРискиВызовСервера");
#Иначе
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		Возврат;
	КонецЕсли;
	МодульСПАРКРискиКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиентСервер");
	МодульСПАРКРискиВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиВызовСервера");
#КонецЕсли
	
	Форма.ИндексыСПАРКРиски = РезультатИндексыКонтрагента;
	Элементы = Форма.Элементы;
	
	// Чтобы изображение не моргало, скроем всю панель. Потом - покажем.
	Элементы.ГруппаИндексыСПАРКРиски.Видимость = Ложь;
	Элементы.ГруппаИндексыСПАРКРискиСтатус.Видимость = Ложь;
	Элементы.ГруппаПереданаБухгалтерскаяОтчетностьВСПАРК.Видимость = Ложь;
	Элементы.ГруппаЗначенияИндексов.Видимость = Ложь;
	
	Если ИспользованиеРазрешено Тогда
		Если КонтрагентОбъект <> Неопределено Тогда
			СвойстваКонтрагента = МодульСПАРКРискиКлиентСервер.СвойстваКонтрагентаВОбъекте(
				КонтрагентОбъект,
				Форма);
			РезультатИндексыКонтрагента.Вставить("ПодлежитПроверке", СвойстваКонтрагента.ПодлежитПроверке);
		ИначеЕсли ЗначениеЗаполнено(РезультатИндексыКонтрагента.ИНН) Тогда
			РезультатИндексыКонтрагента.Вставить("ПодлежитПроверке", Истина);
		КонецЕсли;
	Иначе
		Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Видимость = Ложь;
		МодульСПАРКРискиКлиентСервер.ВывестиСкрытыеИндексы(Форма);
		// Чтобы изображение не моргало, вся панель была скрыта. Снова отобразить.
		Элементы.ГруппаИндексыСПАРКРиски.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не РезультатИндексыКонтрагента.ПодлежитПроверке Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Видимость = Ложь;

	ЕстьОшибкаПодключения = Ложь;

	ВидОшибки               = РезультатИндексыКонтрагента.ВидОшибки;
	СостояниеВыводаДанных   = РезультатИндексыКонтрагента.СостояниеВыводаДанных;
	СостояниеЗагрузкиДанных = РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных;
	
	ЦветаСтилей = МодульСПАРКРискиВызовСервера.ЦветаСтилей();

	Если МодульСПАРКРискиКлиентСервер.ЭтоВидОшибкиПодключения(ВидОшибки) Тогда
		
		Если ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ТребуетсяОплатаИлиПревышенЛимит")
			И РезультатИндексыКонтрагента.ДоступностьПодключенияТестовогоПериода = "Доступно" Тогда
			
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru='Подключить'"),
					,
					,
					,
					"SPARK:ConnectTrialTariff"));
			МассивСтрок.Добавить(" ");
			МассивСтрок.Добавить(НСтр("ru = 'тестовый период'"));
			МассивСтрок.Добавить(Символы.ПС);
			МассивСтрок.Добавить(НСтр("ru = 'или'"));
			МассивСтрок.Добавить(" ");
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(
				НСтр("ru='купить сервис'"),
				,
				,
				,
				"SPARK:BuyService"));
			МассивСтрок.Добавить(" ");
			МассивСтрок.Добавить(НСтр("ru = 'проверки'"));
			МассивСтрок.Добавить(Символы.ПС);
			МассивСтрок.Добавить(НСтр("ru = 'и мониторинга контрагентов'"));
			
			Элементы.ДекорацияИндексыСПАРКРискиОписание.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
			
			МодульСПАРКРискиКлиентСервер.ВывестиСкрытыеИндексы(Форма);
			
		ИначеЕсли ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ОшибкаПодключения") Тогда
			
			Элементы.ДекорацияИндексыСПАРКРискиОписание.Заголовок =
				Новый ФорматированнаяСтрока(
					НСтр("ru='Не удалось подключиться к сервису 1СПАРК Риски'"),
					,
					ЦветаСтилей.ЦветОсобогоТекста);
		
		ИначеЕсли ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ТребуетсяОплатаИлиПревышенЛимит")
				И РезультатИндексыКонтрагента.ДоступностьПодключенияТестовогоПериода = "Подключение" Тогда
			
			Элементы.ДекорацияИндексыСПАРКРискиСтрока3Заголовок.Заголовок = НСтр("ru = 'Выполняется подключение.'");
			
		Иначе
			
			МассивСтрок = Новый Массив;
			Если Не РезультатИндексыКонтрагента.ДанныеАутентификацииЗаполнены
				Или РезультатИндексыКонтрагента.РаботаВМоделиСервиса Тогда
				
				МассивСтрок.Добавить(
					Новый ФорматированнаяСтрока(
					НСтр("ru='Подробнее о сервисе'"),
					,
					,
					,
					"SPARK:About"));
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(НСтр("ru = 'проверки'"));
				МассивСтрок.Добавить(Символы.ПС);
				МассивСтрок.Добавить(НСтр("ru = 'и мониторинга контрагентов'"));
				
			Иначе
				
				МассивСтрок.Добавить(
					Новый ФорматированнаяСтрока(
					НСтр("ru='Купить сервис'"),
					,
					,
					,
					"SPARK:BuyService"));
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(НСтр("ru = 'проверки и'"));
				МассивСтрок.Добавить(Символы.ПС);
				МассивСтрок.Добавить(НСтр("ru = 'мониторинга контрагентов'"));
				
			КонецЕсли;
			
			Элементы.ДекорацияИндексыСПАРКРискиОписание.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
			МодульСПАРКРискиКлиентСервер.ВывестиСкрытыеИндексы(Форма);
			
		КонецЕсли;
		
		Элементы.ДекорацияИндексыСПАРКРискиОписание.Видимость = Истина;
		
	ИначеЕсли ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НеизвестныйИНН") Тогда
		
		Элементы.ДекорацияИндексыСПАРКРискиОписание.Заголовок = Новый ФорматированнаяСтрока(
			НСтр("ru='Нет информации о контрагенте'"),,,,
			"SPARK:NoInformation");
		Элементы.ДекорацияИндексыСПАРКРискиОписание.Видимость = Истина;
		
	ИначеЕсли ВидОшибки = ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НекорректныйИНН") Тогда
		
		Элементы.ДекорацияИндексыСПАРКРискиОписание.Заголовок = Новый ФорматированнаяСтрока(
			НСтр("ru='Нет информации о контрагенте'"),,
			ЦветаСтилей.ЦветОсобогоТекста,,
			"SPARK:NoInformation");
		Элементы.ДекорацияИндексыСПАРКРискиОписание.Видимость = Истина;
	
	Иначе // Пустое поле - ошибок подключения нет.
		
		ЕстьОшибкаПолученияДанных = Ложь;
		
		ТекстОшибки = "";
		ЦветТекстаОшибки = ЦветаСтилей.ЦветОсобогоТекста;
		Если СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ВКэшеНетДанных") Тогда
			ЕстьОшибкаПолученияДанных = Истина;
			Если СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ЗапущеноФоновоеЗадание") Тогда
				ТекстОшибки = НСтр("ru='Получение данных...'");
				ЦветТекстаОшибки = Неопределено; // Авто
			ИначеЕсли СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ОтменаФоновогоЗадания") Тогда
				ТекстОшибки = НСтр("ru='Ошибка получения данных (слишком медленное соединение или отменено администратором)'");
			ИначеЕсли СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ОшибкаФоновогоЗадания") Тогда
				ТекстОшибки = НСтр("ru='Ошибка получения данных'");
			Иначе // Загрузка завершена или не осуществлялась.
				ТекстОшибки = НСтр("ru='Ошибка получения данных (данные не получены)'");
			КонецЕсли;
		ИначеЕсли СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ВКэшеУстаревшиеДанные") Тогда
			
			Если СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ЗапущеноФоновоеЗадание") Тогда
				ЕстьОшибкаПолученияДанных = Истина;
				ТекстОшибки = НСтр("ru='Получение данных...'");
				ЦветТекстаОшибки = Неопределено; // Авто
			КонецЕсли;
			
		ИначеЕсли СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.НеправильныйИНН") Тогда
			
			ЕстьОшибкаПолученияДанных = Истина;
			ТекстОшибки = Новый ФорматированнаяСтрока(
				НСтр("ru='Нет информации о контрагенте'"),
				,
				,
				,
				"SPARK:NoInformation");
				
		ИначеЕсли СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзКэша") Тогда
		ИначеЕсли СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзФоновогоЗадания") Тогда
		ИначеЕсли СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПустаяСсылка") Тогда
		Иначе
			
			ЕстьОшибкаПолученияДанных = Истина;
			ТекстОшибки = НСтр("ru='Неопределенная ошибка'");
			
		КонецЕсли;

		Если СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ЗапущеноФоновоеЗадание") Тогда
			Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Видимость = Истина;
		Иначе
			Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Видимость = Ложь;
		КонецЕсли;
		
		Если ЕстьОшибкаПолученияДанных = Истина Тогда
		
			Элементы.ДекорацияИндексыСПАРКРискиОписание.Заголовок = Новый ФорматированнаяСтрока(
				ТекстОшибки,,
				ЦветТекстаОшибки);
				
			Элементы.ДекорацияИндексыСПАРКРискиОписание.Видимость = Истина;
			
		Иначе
			
			// Если контрагент не активен, вывести сообщение "Контрагент прекратил деятельность %ДатаСтатуса%".
			Если (РезультатИндексыКонтрагента.Активен <> Истина) Тогда
				Элементы.ДекорацияИндексыСПАРКРискиОписание.Заголовок = Новый ФорматированнаяСтрока(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Контрагент прекратил деятельность %1'"),
							Формат(РезультатИндексыКонтрагента.ДатаСтатуса, "ДЛФ=D")),
						,
						ЦветаСтилей.ЦветОсобогоТекста);
						
				Элементы.ДекорацияИндексыСПАРКРискиОписание.Видимость = Истина;
				Элементы.ГруппаИндексыСПАРКРискиСтатус.Видимость  = Ложь;
				Элементы.ГруппаЗначенияИндексов.Видимость  = Ложь;
				
			Иначе

				ИнформацияВыведена = Ложь;
				ВыведеныИндексы = Ложь;
				
				Элементы.ДекорацияИндексыСПАРКРискиОписание.Видимость = Ложь;
				Элементы.ГруппаЗначенияИндексов.Видимость  = Ложь;
				
				МодульСПАРКРискиКлиентСервер.ВывестиСтатус(
					РезультатИндексыКонтрагента,
					Форма,
					ЦветаСтилей,
					ИнформацияВыведена);
				МодульСПАРКРискиКлиентСервер.ВывестиСводныйИндикатор(
					РезультатИндексыКонтрагента,
					Форма,
					ИнформацияВыведена,
					ВыведеныИндексы);
				МодульСПАРКРискиКлиентСервер.ВывестиИндексДолжнойОсмотрительности(
					РезультатИндексыКонтрагента,
					Форма,
					ИнформацияВыведена,
					ВыведеныИндексы);
				МодульСПАРКРискиКлиентСервер.ВывестиИндексФинансовогоРиска(
					РезультатИндексыКонтрагента,
					Форма,
					ИнформацияВыведена,
					ВыведеныИндексы);
				МодульСПАРКРискиКлиентСервер.ВывестиИндексПлатежнойДисциплины(
					РезультатИндексыКонтрагента,
					Форма,
					ИнформацияВыведена,
					ВыведеныИндексы);
				
				Элементы.ГруппаДанныеИндексыСПАРКРиски.Видимость = ВыведеныИндексы;
				Элементы.ГруппаЗначенияИндексов.Видимость        = ВыведеныИндексы;
				
				Если РезультатИндексыКонтрагента.БухгалтерскаяОтчетность = 1 Тогда
					ИнформацияВыведена = Истина;
					Элементы.ГруппаПереданаБухгалтерскаяОтчетностьВСПАРК.Видимость = Истина;
				Иначе
					Элементы.ГруппаПереданаБухгалтерскаяОтчетностьВСПАРК.Видимость = Ложь;
				КонецЕсли;
				
				Если Не ИнформацияВыведена Тогда // Ничего не выведено - вывести "Нет информации о контрагенте".
					
					Элементы.ДекорацияИндексыСПАРКРискиОписание.Заголовок = Новый ФорматированнаяСтрока(
						НСтр("ru='Нет информации о контрагенте'"),
						,
						,
						,
						"SPARK:NoInformation");
						
					Элементы.КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски.Видимость = Ложь;
					Элементы.ДекорацияИндексыСПАРКРискиОписание.Видимость = Истина;
					
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
	// Чтобы изображение не моргало, вся панель была скрыта. Снова отобразить.
	Элементы.ГруппаИндексыСПАРКРиски.Видимость = Истина;

КонецПроцедуры

#КонецОбласти
