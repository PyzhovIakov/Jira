
////////////////////////////////////////////////////////////////////////////////
// Обмен данными события (CRM)
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен CRM_Полный 

// Процедура-обработчик события "ПередЗаписью" ссылочных типов данных (кроме документов) для механизма регистрации
// объектов на узлах.
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации.
//  Источник       - источник события, кроме типа ДокументОбъект.
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
// 
Процедура ОбменДаннымиПолныйПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;

	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("CRM_Полный", Источник, Отказ);
	Иначе
		Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("ПланыОбмена", "Полный") Тогда
			ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("Полный", Источник, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" документов для механизма регистрации объектов на узлах.
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации.
//  Источник       - ДокументОбъект - источник события.
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
// 
Процедура ОбменДаннымиПолныйПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;

	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента("CRM_Полный", Источник,
			 Отказ, РежимЗаписи,
			 РежимПроведения);
	Иначе
		Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("ПланыОбмена", "Полный") Тогда
			ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента("Полный", Источник, Отказ,
				 РежимЗаписи,
				 РежимПроведения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" константы для механизма регистрации объектов на узлах.
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации.
//  Источник       - КонстантаМенеджерЗначения - источник события.
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
// 
Процедура ОбменДаннымиПолныйПередЗаписьюКонстанты(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;

	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюКонстанты("CRM_Полный", Источник, Отказ);
	Иначе
		Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("ПланыОбмена", "Полный") Тогда
			ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюКонстанты("Полный", Источник, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" регистров для механизма регистрации объектов на узлах.
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации.
//  Источник       - НаборЗаписейРегистра - источник события.
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
//  Замещение      - Булево - признак замещения существующего набора записей.
// 
Процедура ОбменДаннымиПолныйПередЗаписьюРегистра(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;

	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра("CRM_Полный", Источник, Отказ, Замещение);
	Иначе
		Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("ПланыОбмена", "Полный") Тогда
			ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра("Полный", Источник, Отказ, Замещение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события "ПередУдалением" ссылочных типов данных для механизма регистрации объектов на узлах.
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации.
//  Источник       - источник события.
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
// 
Процедура ОбменДаннымиПолныйПередУдалением(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередУдалением("CRM_Полный", Источник, Отказ);
	Иначе
		Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("ПланыОбмена", "Полный") Тогда
			ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередУдалением("Полный", Источник, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбменЧерезУниверсальныйФормат

// Процедура-обработчик события "ПередЗаписью" ссылочных типов данных (кроме документов) для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - источник события, кроме типа ДокументОбъект
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура СинхронизацияДанныхЧерезУниверсальныйФорматПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("СинхронизацияДанныхЧерезУниверсальныйФормат",
		 Источник,
		 Отказ);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" документов для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - ДокументОбъект - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура СинхронизацияДанныхЧерезУниверсальныйФорматПередЗаписьюДокумента(Источник, Отказ,
	 РежимЗаписи,
	 РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента("СинхронизацияДанныхЧерезУниверсальныйФормат",
		 Источник, Отказ, РежимЗаписи,
		 РежимПроведения);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" регистров для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - НаборЗаписейРегистра - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
//  Замещение      - Булево - признак замещения существующего набора записей
// 
Процедура СинхронизацияДанныхЧерезУниверсальныйФормат0ПередЗаписьюРегистра(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра("СинхронизацияДанныхЧерезУниверсальныйФормат",
		 Источник, Отказ,
		 Замещение);
	
КонецПроцедуры

// Процедура-обработчик события "ПередУдалением" ссылочных типов данных для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура СинхронизацияДанныхЧерезУниверсальныйФорматПередУдалением(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередУдалением("СинхронизацияДанныхЧерезУниверсальныйФормат",
		 Источник,
		 Отказ);
	
КонецПроцедуры

#КонецОбласти

// Функция заимствована в связи с доработкой ЗначениеСвойстваОбъекта (расположена ниже).
Функция ЗначенияСвойствДляОбъекта(Объект, ПРО) Экспорт
	
	ЗначенияСвойств = Новый Структура;
	
	Для Каждого Элемент Из ПРО.СвойстваОбъекта Цикл
		
		ЗначенияСвойств.Вставить(Элемент.Ключ, ЗначениеСвойстваОбъекта(Объект, Элемент.Значение));
		
	КонецЦикла;
	
	Возврат ЗначенияСвойств;
	
КонецФункции

// Добавлена проверка наличия свойства (реквизита) объекта при получении его значения.
// Необходимо в правилах регистрации iCRM при регистрации документа Телефонный звонок
// в случае, если включено ограничение по группам доступа партнеров.
// Реквизит АбонентКонтакт документа Телефонный звонок является определяемым типом и
// объекты данного типа могут содержать значение Группы доступа Партнера в разных реквизитах. Напр.,
// если АбонентКонтакт содержит ссылку на Партнера - это АбонентКонтакт.ГруппаДоступа,
// если АбонентКонтакт содержит ссылку на Контактное лицо - это АбонентКонтакт.Владелец.ГруппаДоступа,
// если АбонентКонтакт содержит ссылку на Потенциального клиента - это АбонентКонтакт.Клиент.ГруппаДоступа.
// В отсутствие данной доработки, проверка такого рода была невозможно, т.к. обращение к несуществующему
// для конкретного объекта реквизита приводило к генерации исключения.
Функция ЗначениеСвойстваОбъекта(Объект, СтрокаСвойствОбъекта)
	
	Значение = Объект;
	
	МассивПодстрок = СтрРазделить(СтрокаСвойствОбъекта, ".");
	
	// Значение получаем с учетом возможного разыменования свойства.
	Для Каждого ИмяСвойства Из МассивПодстрок Цикл
		
		// +CRM
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Значение, ИмяСвойства) Тогда
			Значение = Значение[ИмяСвойства];
		Иначе
			Значение = Неопределено;
		КонецЕсли;
		// -CRM
		
		Если Значение = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти
