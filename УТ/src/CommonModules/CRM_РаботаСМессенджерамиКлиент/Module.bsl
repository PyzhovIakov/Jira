
////////////////////////////////////////////////////////////////////////////////
// CRM работа с мессенджерами сервер
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Подключает обработчик служебных сообщений.
//
// Параметры:
//	ИдентификаторыОбсуждений - Массив - Идентификаторы обсуждений.
//
Процедура ПодключитьОбработчикСлужебныхСообщений(ИдентификаторыОбсуждений) Экспорт
	
	Для каждого Идентификатор Из ИдентификаторыОбсуждений Цикл
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикНовогоСлужебногоСообщенияМессенджера",
			 CRM_РаботаСМессенджерамиКлиент);
		СистемаВзаимодействия.НачатьПодключениеОбработчикаНовыхСообщений(, Идентификатор, ОписаниеОповещения);
	КонецЦикла;
	
КонецПроцедуры

// Подключает обработчик новых сообщений.
//
// Параметры:
//	ИдентификаторыОбсуждений - Массив - Идентификаторы обсуждений.
//
Процедура ПодключитьОбработчикНовыхСообщений(ИдентификаторыОбсуждений) Экспорт
	
	Для каждого Идентификатор Из ИдентификаторыОбсуждений Цикл
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикНовогоСообщенияМессенджера", CRM_РаботаСМессенджерамиКлиент);
		СистемаВзаимодействия.НачатьПодключениеОбработчикаНовыхСообщений(, Идентификатор, ОписаниеОповещения);
	КонецЦикла;
	
КонецПроцедуры

// Обработчик нового служебного сообщения мессенджера.
//
// Параметры:
//	Сообщение - ДокументСсылка.CRM_СообщениеМессенджера - Сообщение.
//	ДополнительныеПараметры - Структура - Дополнительные параметры.
//
Процедура ОбработчикНовогоСлужебногоСообщенияМессенджера(Сообщение, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Сообщение.Данные) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сообщение.Данные) Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательСистемыВзаимодействия = СистемаВзаимодействия.ИдентификаторТекущегоПользователя();
	Если ПользовательСистемыВзаимодействия = "" Тогда
		Возврат;
	КонецЕсли;
	
	Если Сообщение.Данные = "CRM_ПолученыНовыеСообщения" Тогда
		Если глОткрытаФормаДиалогов = Истина Тогда
			Оповестить(Сообщение.Данные);
		Иначе
			ТекущийПользователь = ПользователиКлиент.ТекущийПользователь();
			НовыхСообщений = CRM_РаботаСМессенджерамиСервер.ПроверкаНепрочитанныхСообщений(ТекущийПользователь,
				 ТекущийПользователь,
				 Неопределено);
			ВывестиОповещениеОНепрочитанныхНаРабочийСтол(НовыхСообщений);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик нового сообщения мессенджера.
//
// Параметры:
//	Сообщение - ДокументСсылка.CRM_СообщениеМессенджера - Сообщение.
//	ДополнительныеПараметры - Структура - Дополнительные параметры.
//
Процедура ОбработчикНовогоСообщенияМессенджера(Сообщение, ДополнительныеПараметры) Экспорт
	
	ПользовательСистемыВзаимодействия = СистемаВзаимодействия.ИдентификаторТекущегоПользователя();
	Если ПользовательСистемыВзаимодействия = "" Тогда
		Возврат;
	КонецЕсли;
	CRM_РаботаСМессенджерамиСервер.ПолучитьСообщенияУчетнойЗаписиВФоне(ПредопределенноеЗначение("Справочник.CRM_УчетныеЗаписиМессенджеров.СистемаВзаимодействия"));
	
КонецПроцедуры

// Функция возвращает признак использования условий использования файлов.
//
// Параметры:
//	ТипМессенджера - Строка - тип мессенджера.
//
// Возвращаемое значение:
//  Булево - Истина, если требуется принимать условия использования для передавчи файлов.
//
Функция ДляМессенджераЕстьУсловияИспользованияФайлов(ТипМессенджера) Экспорт
	
	СписокМессенджеров = Новый СписокЗначений;
	СписокМессенджеров.Добавить("InstagramDirect");

	Возврат СписокМессенджеров.НайтиПоЗначению(ТипМессенджера) <> Неопределено;

КонецФункции // ДляМессенджераЕстьУсловияИспользованияФайлов()

// Подключение обработчиков сообщений системы взаимодействий.
//
// Параметры:
//  ИзМессенджера	 - Булево	 - Признак подключения обработчиков из мессенджера.
//
Процедура ПодключитьОповещенияОСлужебныхСообщениях(ИзМессенджера = Ложь) Экспорт
	
	ПараметрыОповещений = CRM_РаботаСМессенджерамиСервер.ПараметрыОповещенйОНовыхСообщениях();
	
	Если Не ПараметрыОповещений.ИспользуютсяМессенджеры Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОповещений.ОбсужденияДоступны
		И (ИзМессенджера
			Или ПараметрыОповещений.ОповещенияНаРабочемСтоле) Тогда
		ПодключитьОбработчикСлужебныхСообщений(ПараметрыОповещений.ИдентификаторыОбсужденийСлужебные);
	КонецЕсли;
	Если Не ИзМессенджера Тогда
		ТекущийПользователь = ПользователиКлиент.ТекущийПользователь();
		НовыхСообщений = CRM_РаботаСМессенджерамиСервер.ПроверкаНепрочитанныхСообщений(ТекущийПользователь,
			 ТекущийПользователь,
			 Неопределено);
		ВывестиОповещениеОНепрочитанныхНаРабочийСтол(НовыхСообщений);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияПодсистемБСПКлиент.ПередПериодическойОтправкойДанныхКлиентаНаСервер
Процедура ПередПериодическойОтправкойДанныхКлиентаНаСервер(Параметры) Экспорт
	
	Если глИспользуютсяДиалогиНаРабочемСтоле = Истина
		И Не глОткрытаФормаДиалогов = Истина 
		И ск_глСтекФормРабочегоСтола <> Неопределено
		И ск_глСтекФормРабочегоСтола.Количество() > 0 Тогда 
		
		ИмяПараметра = "CRM_Мессенджеры.ОповещениеОНовыхСообщениях";
		Если Не СерверныеОповещенияКлиент.ЗакончилосьВремяОжидания(ИмяПараметра, 60) Тогда
			Возврат;
		КонецЕсли;
	
		Параметры.Вставить(ИмяПараметра, Истина);
	КонецЕсли;
	
КонецПроцедуры

// См. ОбщегоНазначенияКлиентПереопределяемый.ПослеПериодическогоПолученияДанныхКлиентаНаСервере
Процедура ПослеПериодическогоПолученияДанныхКлиентаНаСервере(Результаты) Экспорт
	
	ИмяПараметра = "CRM_Мессенджеры.ОповещениеОНовыхСообщениях";
	Данные = Результаты.Получить(ИмяПараметра);
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВывестиОповещениеОНепрочитанныхНаРабочийСтол(Данные);
	
КонецПроцедуры

// Процедура для вывода оповещений о непрочитанных письмах на рабочий стол.
//
// Параметры:
//  Данные	 - Структура	 - Данные оповещения.
//
Процедура ВывестиОповещениеОНепрочитанныхНаРабочийСтол(Данные) Экспорт
	
	Если ск_глСтекФормРабочегоСтола = Неопределено
		Или Не Данные.Свойство("Все") Тогда
		Возврат;
	Иначе
		СтрДиалоги = НСтр("ru = 'Диалоги'");
		глЗаголовокДиалогов = СтрДиалоги + Формат(Данные.Все, "ЧФ=' (Ч)'");
	КонецЕсли;
	Для Каждого ПолученнаяФорма Из ск_глСтекФормРабочегоСтола Цикл
		Группа = ПолученнаяФорма.Значение.Элементы.Найти("ЭлементГруппаКнопокТумблер");
		Для Каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
			Если СтрНачинаетсяС(Элемент.Заголовок, СтрДиалоги)
				И Элемент.Заголовок <> глЗаголовокДиалогов Тогда
				Элемент.Заголовок = глЗаголовокДиалогов; 
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
