
#Область ПрограммныйИнтерфейс

// Процедура формирует запрос-команду исходящего вызова
//
// Параметры:
//	НомерАбонента			- Строка	- Номер вызываемого абонента
//	ДанныеПользователяАТС	- Структура	- Данные пользователя АТС
//	URL						- Строка	- Корневой URL запроса
//	ТелоЗапроса				- Строка	- Тело сформированного запроса
//	Заголовки				- Структура	- Структура заголовков запроса
//	Ошибка					- Строка	- Возвращаемое описание возникшей ошибки
//
Процедура ПриСозданииИсходящегоВызова(НомерАбонента, ДанныеПользователяАТС, URL, ТелоЗапроса, Заголовки, Ошибка) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	ДлинаВнутреннихНомеров = Константы.сфпМаксимальнаяДлинаВнутреннихНомеров.Получить();
	ПараметрыЗапроса = Новый Массив;
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.СофтФонWebModule Тогда
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("command_id");
		ЗаписьJSON.ЗаписатьЗначение(Строка(Новый УникальныйИдентификатор));
		
		ЗаписьJSON.ЗаписатьИмяСвойства("from");
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("extension");
		ЗаписьJSON.ЗаписатьЗначение(ДанныеПользователяАТС.ВнутреннийНомер);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("to_number");
		Если Лев(НомерАбонента, 1) = "+" Тогда
			ЗаписьJSON.ЗаписатьЗначение(НомерАбонента);

		Иначе
			//ЗаписьJSON.ЗаписатьЗначение(?(СтрДлина(НомерАбонента) <= 10,
				// ?(СтрДлина(НомерАбонента) > ДлинаВнутреннихНомеров, "7", ""), "") 
				//+ НомерАбонента);
			ЗаписьJSON.ЗаписатьЗначение(НомерАбонента);
		КонецЕсли;

		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "commands/callback";
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("command_id");
		ЗаписьJSON.ЗаписатьЗначение(Строка(Новый УникальныйИдентификатор));
		
		ЗаписьJSON.ЗаписатьИмяСвойства("from");
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("extension");
		ЗаписьJSON.ЗаписатьЗначение(ДанныеПользователяАТС.ВнутреннийНомер);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("to_number");
		//ЗаписьJSON.ЗаписатьЗначение(?(СтрДлина(НомерАбонента) > ДлинаВнутреннихНомеров, "7", "") + НомерАбонента);
		ЗаписьJSON.ЗаписатьЗначение(НомерАбонента);
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "commands/callback";
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Яндекс Тогда
		
		НомерАбонента = ПреобразоватьНомерДляКонтактнойИнформации(НомерАбонента);
		
		Если НЕ ЗначениеЗаполнено(ДанныеПользователяАТС.ИсходящийНомер) Тогда
			Ошибка = "НеЗаполненНомерИсходящегоЗвонкаПользователя";
			Возврат;
		КонецЕсли;
		
		Токен = ТокенДоступаAPI(ДанныеПользователяАТС.ВнутреннийНомер, Ошибка);
		
		Если ЗначениеЗаполнено(Ошибка) Тогда
			Возврат;
		КонецЕсли;
		
		Если Токен = Неопределено Тогда
			ВызватьИсключение НСтр("ru='Не удалось авторизоваться.';en='Failed to log in.'");
		КонецЕсли;
		
		URL = URL + "api/v2/calls/makecall";
		
		Заголовки.Вставить("Authorization", "bearer " + Токен);
		Заголовки.Вставить("x-api-key", НастройкиТелефонии.КлючДляАвторизацииАТСЯндекс);
		
		ПараметрыЗапроса.Добавить("from=" + ДанныеПользователяАТС.ИсходящийНомер);
		ПараметрыЗапроса.Добавить("to=" + ?(СтрДлина(НомерАбонента) > ДлинаВнутреннихНомеров, "7", "") + НомерАбонента);
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Билайн Тогда
		URL = URL + "apis/portal/abonents/" + ДанныеПользователяАТС.ВнутреннийНомер + "/call?phoneNumber=" + НомерАбонента;
				
		Заголовки.Вставить("X-MPBX-API-AUTH-TOKEN", НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.UIS Тогда
		КлючAPI = НастройкиТелефонии.КлючДляАвторизацииАТСUIS;
		
		Если НЕ ЗначениеЗаполнено(ДанныеПользователяАТС.ИсходящийНомер) Тогда
			ВызватьИсключение НСтр("ru='Не заполнен исходящий номер пользователя АТС.';
				|en='Outgoing number of PBX user not filled.'");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДанныеПользователяАТС.ЛогинАТС) Тогда
			ВызватьИсключение НСтр("ru='Не заполнен идентификатор пользователя АТС.';en='User ID of PBX not filled.'");
		КонецЕсли;
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("jsonrpc");
		ЗаписьJSON.ЗаписатьЗначение("2.0");
		ЗаписьJSON.ЗаписатьИмяСвойства("id");
		ЗаписьJSON.ЗаписатьЗначение("" + Новый УникальныйИдентификатор());
		ЗаписьJSON.ЗаписатьИмяСвойства("method");
		ЗаписьJSON.ЗаписатьЗначение("start.employee_call");
		//ЗаписьJSON.ЗаписатьЗначение("start.simple_call");
				
		ЗаписьJSON.ЗаписатьИмяСвойства("params");
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("access_token");
		ЗаписьJSON.ЗаписатьЗначение(КлючAPI);
		ЗаписьJSON.ЗаписатьИмяСвойства("first_call");
		ЗаписьJSON.ЗаписатьЗначение("employee");
		ЗаписьJSON.ЗаписатьИмяСвойства("virtual_phone_number");
		ЗаписьJSON.ЗаписатьЗначение(ДанныеПользователяАТС.ИсходящийНомер);
		ЗаписьJSON.ЗаписатьИмяСвойства("contact");
		//ЗаписьJSON.ЗаписатьЗначение(?(СтрДлина(НомерАбонента) > ДлинаВнутреннихНомеров, "7", "") + НомерАбонента);
		ЗаписьJSON.ЗаписатьЗначение(НомерАбонента);
		//ЗаписьJSON.ЗаписатьИмяСвойства("external_id");
		//ЗаписьJSON.ЗаписатьЗначение("makecall");
		ЗаписьJSON.ЗаписатьИмяСвойства("employee");
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("id");
		ЗаписьJSON.ЗаписатьЗначение(Число(СтрЗаменить(ДанныеПользователяАТС.ЛогинАТС, " ", "")));
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		ТелоЗапроса = json;
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Ростелеком Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("request_number");
		ЗаписьJSON.ЗаписатьЗначение(НомерАбонента);
		ЗаписьJSON.ЗаписатьИмяСвойства("from_pin");
		ЗаписьJSON.ЗаписатьЗначение(ДанныеПользователяАТС.ВнутреннийНомер);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		Заголовки.Вставить("X-Client-ID", НастройкиТелефонии.vpbx_api_key);
		Заголовки.Вставить("X-Client-Sign", sign);
	
		URL = URL + "call_back";
		
		ТелоЗапроса = json;
		
	ИначеЕсли ЭтоПлатформаITooLabs(ИспользуемаяАТС) Тогда
		ПараметрыЗапроса.Добавить("cmd=makeCall");
		ПараметрыЗапроса.Добавить("user=" + ДанныеПользователяАТС.ВнутреннийНомер);
		ПараметрыЗапроса.Добавить("token=" + НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);	
		
		Если Лев(НомерАбонента, 1) = "+" ИЛИ СтрДлина(НомерАбонента) > 10 Тогда
			ПараметрыЗапроса.Добавить("phone=" + СтрЗаменить(НомерАбонента, "+", ""));
			
		Иначе
			ПараметрыЗапроса.Добавить("phone=" + ?(СтрДлина(НомерАбонента) > ДлинаВнутреннихНомеров, "8", "") + НомерАбонента);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗапроса.Количество() > 0 Тогда
		ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует запрос-команду перевода неотвеченного вызова
//
// Параметры:
//	ИдентификаторЗвонкаВАТС	- Строка	- Идентификатор звонка
//	НомерАбонента			- Строка	- Номер абонента
//	ВнутреннийНомер			- Строка	- Внутренний номер
//	Hold					- Булево	- Признак постановки звонка на удержание (Истина - Удержание, Ложь - Слепой перевод)
//	URL						- Строка	- Корневой URL запроса
//	ТелоЗапроса				- Строка	- Тело сформированного запроса
//	Заголовки				- Структура	- Структура заголовков запроса
//	Ошибка					- Строка	- Возвращаемое описание возникшей ошибки
//	json					- Строка	- Возвращаемая строка json-запроса
//
Процедура ПриПереводеНеотвеченногоВызова(ИдентификаторЗвонкаВАТС, НомерАбонента, ВнутреннийНомер,
	 Hold, URL, ТелоЗапроса, Заголовки, Ошибка,
	 json = "") Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
		
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	ПараметрыЗапроса = Новый Массив;
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.СофтФонWebModule Тогда
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("command_id");
		ЗаписьJSON.ЗаписатьЗначение(Строка(Новый УникальныйИдентификатор));
				
		ЗаписьJSON.ЗаписатьИмяСвойства("call_id");
		ЗаписьJSON.ЗаписатьЗначение(ИдентификаторЗвонкаВАТС);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("method");
		ЗаписьJSON.ЗаписатьЗначение(?(Hold, "hold", "blind"));
		
		ЗаписьJSON.ЗаписатьИмяСвойства("to_number");
		ЗаписьJSON.ЗаписатьЗначение(НомерАбонента);
						
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		Если Hold Тогда
			URL = URL + "commands/transfer";
		
		Иначе	
			URL = URL + "commands/route";
		КонецЕсли;
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("command_id");
		ЗаписьJSON.ЗаписатьЗначение(Строка(Новый УникальныйИдентификатор));
				
		ЗаписьJSON.ЗаписатьИмяСвойства("call_id");
		ЗаписьJSON.ЗаписатьЗначение(ИдентификаторЗвонкаВАТС);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("to_number");
		ЗаписьJSON.ЗаписатьЗначение(НомерАбонента);
		
		Если Hold Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("method");
			ЗаписьJSON.ЗаписатьЗначение(?(Hold, "hold", "blind"));
		
			ЗаписьJSON.ЗаписатьИмяСвойства("initiator");
			ЗаписьJSON.ЗаписатьЗначение(ВнутреннийНомер);
		КонецЕсли;	
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		Если Hold Тогда
			URL = URL + "commands/transfer";
		
		Иначе	
			URL = URL + "commands/route";
		КонецЕсли;	
	
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Яндекс Тогда
		Ошибка = "МетодНеПоддерживается";
		Возврат;
		
	ИначеЕсли ЭтоПлатформаITooLabs(ИспользуемаяАТС) Тогда
		ПараметрыЗапроса.Добавить("cmd=makeCall");
		//ПараметрыЗапроса.Добавить("phone=" + НомерАбонента);
		//ПараметрыЗапроса.Добавить("user=" + ДанныеПользователяАТС.ВнутреннийНомер);
		ПараметрыЗапроса.Добавить("token=" + НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);	
	КонецЕсли;
	
	ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	
КонецПроцедуры

// Процедура формирует запрос-команду перевода отвеченного вызова
//
// Параметры:
//	ИдентификаторЗвонкаВАТС	- Строка	- Идентификатор звонка
//	НомерАбонента			- Строка	- Номер абонента
//	ВнутреннийНомер			- Строка	- Внутренний номер
//	Hold					- Булево	- Признак постановки звонка на удержание (Истина - Удержание, Ложь - Слепой перевод)
//	URL						- Строка	- Корневой URL запроса
//	ТелоЗапроса				- Строка	- Тело сформированного запроса
//	Заголовки				- Структура	- Структура заголовков запроса
//	Ошибка					- Строка	- Возвращаемое описание возникшей ошибки
//	json					- Строка	- Возвращаемая строка json-запроса
//
Процедура ПриПереводеОтвеченногоВызова(ИдентификаторЗвонкаВАТС, НомерАбонента, ВнутреннийНомер,
	 Hold, URL, ТелоЗапроса, Заголовки, Ошибка,
	 json = "") Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
		
	ИспользуемаяАТС = сфпОбщегоНазначенияПовтИсп.ПолучитьЗначениеКонстанты("сфпИспользуемаяАТС");
	ПараметрыЗапроса = Новый Массив;
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.СофтФонWebModule Тогда

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("command_id");
		ЗаписьJSON.ЗаписатьЗначение(Строка(Новый УникальныйИдентификатор));
				
		ЗаписьJSON.ЗаписатьИмяСвойства("call_id");
		ЗаписьJSON.ЗаписатьЗначение(ИдентификаторЗвонкаВАТС);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("to_number");
		ЗаписьJSON.ЗаписатьЗначение(НомерАбонента);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("method");
		ЗаписьJSON.ЗаписатьЗначение(?(Hold, "hold", "blind"));
		
		ЗаписьJSON.ЗаписатьИмяСвойства("initiator");
		ЗаписьJSON.ЗаписатьЗначение(ВнутреннийНомер);
				
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "commands/transfer";
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("command_id");
		ЗаписьJSON.ЗаписатьЗначение(Строка(Новый УникальныйИдентификатор));
				
		ЗаписьJSON.ЗаписатьИмяСвойства("call_id");
		ЗаписьJSON.ЗаписатьЗначение(ИдентификаторЗвонкаВАТС);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("to_number");
		ЗаписьJSON.ЗаписатьЗначение(НомерАбонента);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("method");
		ЗаписьJSON.ЗаписатьЗначение(?(Hold, "hold", "blind"));
		
		ЗаписьJSON.ЗаписатьИмяСвойства("initiator");
		ЗаписьJSON.ЗаписатьЗначение(ВнутреннийНомер);
				
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "commands/transfer";
	
	ИначеЕсли ЭтоПлатформаITooLabs(ИспользуемаяАТС) Тогда
		ПараметрыЗапроса.Добавить("cmd=makeCall");
		//ПараметрыЗапроса.Добавить("phone=" + НомерАбонента);
		//ПараметрыЗапроса.Добавить("user=" + ДанныеПользователяАТС.ВнутреннийНомер);
		ПараметрыЗапроса.Добавить("token=" + НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);
	КонецЕсли;
	
	ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	
КонецПроцедуры

// Процедура формирует запрос-команду завершения вызова
//
// Параметры:
//	ИдентификаторЗвонкаВАТС	- Строка	- Идентификатор звонка
//	URL						- Строка	- Корневой URL запроса
//	ТелоЗапроса				- Строка	- Тело сформированного запроса
//	Заголовки				- Структура	- Структура заголовков запроса
//	Ошибка					- Строка	- Возвращаемое описание возникшей ошибки
//	json					- Строка	- Возвращаемая строка json-запроса
//
Процедура ПриЗавершенииВызова(ИдентификаторЗвонкаВАТС, URL, ТелоЗапроса, Заголовки, Ошибка, json = Неопределено) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	ПараметрыЗапроса = Новый Массив;
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.СофтФонWebModule Тогда
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("command_id");
		ЗаписьJSON.ЗаписатьЗначение(Строка(Новый УникальныйИдентификатор));
				
		ЗаписьJSON.ЗаписатьИмяСвойства("call_id");
		ЗаписьJSON.ЗаписатьЗначение(ИдентификаторЗвонкаВАТС);
				
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "commands/call/hangup";
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("command_id");
		ЗаписьJSON.ЗаписатьЗначение(Строка(Новый УникальныйИдентификатор));
				
		ЗаписьJSON.ЗаписатьИмяСвойства("call_id");
		ЗаписьJSON.ЗаписатьЗначение(ИдентификаторЗвонкаВАТС);
				
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "commands/call/hangup";
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Яндекс Тогда
		
		//НомерАбонента = ПреобразоватьНомерДляКонтактнойИнформации(НомерАбонента);
		//
		//Если НЕ ЗначениеЗаполнено(ДанныеПользователяАТС.ИсходящийНомер) Тогда
		//	Ошибка = "НеЗаполненНомерИсходящегоЗвонкаПользователя";
		//	Возврат;
		//КонецЕсли;
		//
		//Токен = ТокенДоступаAPI(ДанныеПользователяАТС.ВнутреннийНомер, Ошибка);
		//
		// Если Ошибка <> Неопределено Тогда
		//	Возврат;
		//КонецЕсли;
		//
		// Если Токен = Неопределено Тогда
		//	ВызватьИсключение НСтр("ru='Не удалось авторизоваться.';en='Failed to log in.'");
		//КонецЕсли;
		//
		// URL = URL + "api/v2/calls/makecall";
		//
		//Заголовки.Вставить("Authorization", "bearer " + Токен);
		//Заголовки.Вставить("x-api-key", сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии().КлючДляАвторизацииАТСЯндекс);
		//
		//ПараметрыЗапроса.Добавить("from=" + ДанныеПользователяАТС.ИсходящийНомер);
		//ПараметрыЗапроса.Добавить("to=" + НомерАбонента);
		
	ИначеЕсли ЭтоПлатформаITooLabs(ИспользуемаяАТС) Тогда
		// Команда не поддерживается оператором
		Ошибка = "КомандаНеПоддерживаетсяОператором";
		Возврат;	
	КонецЕсли;
	
	ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	
КонецПроцедуры

// Процедура формирует запрос получения статуса подключения
//
// Параметры:
//	URL			- Строка	- Корневой URL запроса
//	HTTPМетод	- Строка	- Метод (POST, GET)
//	ТелоЗапроса	- Строка	- Тело сформированного запроса
//	Заголовки	- Структура	- Структура заголовков запроса
//	Ошибка		- Строка	- Возвращаемое описание возникшей ошибки
//	json		- Строка	- Возвращаемая строка json-запроса
//
Процедура ПриПроверкеСтатусаПодключения(URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка, json) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	ПараметрыЗапроса = Новый Массив;
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.СофтФонWebModule Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("extension");
		ЗаписьJSON.ЗаписатьЗначение("");
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "config/users/request";
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("number");
		ЗаписьJSON.ЗаписатьЗначение("70001234567");
				
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "queries/user_info_by_dct_number";

	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Яндекс Тогда
		HTTPМетод = "GET";		
		URL = URL + "api/v2/auth/ping";
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Билайн Тогда
		HTTPМетод = "GET";
		URL = URL + "apis/portal/subscription";
		
		Заголовки.Вставить("X-MPBX-API-AUTH-TOKEN", НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.UIS Тогда
		ПриПолученииАбонентов(URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка, json);
		
	ИначеЕсли ЭтоПлатформаItoolabs(ИспользуемаяАТС) Тогда
		ПараметрыЗапроса.Добавить("cmd=accounts");
		ПараметрыЗапроса.Добавить("token=" + НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);	
	КонецЕсли;
	
	Если ПараметрыЗапроса.Количество() > 0 Тогда
		ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует запрос получения подписки на события АТС
//
// Параметры:
//	URL			- Строка	- Корневой URL запроса
//	HTTPМетод	- Строка	- Метод (POST, GET)
//	ТелоЗапроса	- Строка	- Тело сформированного запроса
//	Заголовки	- Структура	- Структура заголовков запроса
//	Ошибка		- Строка	- Возвращаемое описание возникшей ошибки
//	json		- Строка	- Возвращаемая строка json-запроса
//
Процедура ПриПодпискеНаСобытия(URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка, json) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	АдресОбратногоВызова = сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(ИспользуемаяАТС);
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии)
		 ИЛИ НЕ ЗначениеЗаполнено(АдресОбратногоВызова) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Билайн Тогда
		HTTPМетод = "PUT";
		URL = URL + "apis/portal/subscription";
				
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("subscriptionType");
		ЗаписьJSON.ЗаписатьЗначение("BASIC_CALL");
		
		ЗаписьJSON.ЗаписатьИмяСвойства("url");
		ЗаписьJSON.ЗаписатьЗначение(АдресОбратногоВызова);
				
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		Заголовки.Вставить("Content-Type", "application/json");
		Заголовки.Вставить("X-MPBX-API-AUTH-TOKEN", НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);
		
		ТелоЗапроса = json;
	КонецЕсли;
	
	//ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	
КонецПроцедуры

// Процедура формирует запрос получения данных подписки на события
//
// Параметры:
//	URL			- Строка	- Корневой URL запроса
//	HTTPМетод	- Строка	- Метод (POST, GET)
//	ТелоЗапроса	- Строка	- Тело сформированного запроса
//	Заголовки	- Структура	- Структура заголовков запроса
//	Ошибка		- Строка	- Возвращаемое описание возникшей ошибки
//	json		- Строка	- Возвращаемая строка json-запроса
//
Процедура ПриПолученииДанныхПодпискиНаСобытия(URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка, json) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	АдресОбратногоВызова = сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(ИспользуемаяАТС);
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии)
		 ИЛИ НЕ ЗначениеЗаполнено(АдресОбратногоВызова) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Билайн Тогда
		HTTPМетод = "GET";
		URL = URL + "apis/portal/subscription?subscriptionId=" + НастройкиТелефонии.КлючПодпискиНаСобытия;
		
		Заголовки.Вставить("X-MPBX-API-AUTH-TOKEN", НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);
	КонецЕсли;
	
	ТелоЗапроса = "";
	
КонецПроцедуры

// Процедура формирует запрос получения данных автоподписки
//
// Параметры:
//	URL			- Строка	- Корневой URL запроса
//	HTTPМетод	- Строка	- Метод (POST, GET)
//	ТелоЗапроса	- Строка	- Тело сформированного запроса
//	Заголовки	- Структура	- Структура заголовков запроса
//	Ошибка		- Строка	- Возвращаемое описание возникшей ошибки
//	json		- Строка	- Возвращаемая строка json-запроса
//	ПараметрыАвтоподписки - Структура - Параметры автоподписки
//
Процедура ПриАвтоподписке(URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка, json, ПараметрыАвтоподписки) Экспорт
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	АдресОбратногоВызова = сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(ИспользуемаяАТС);
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Гравител Тогда
		URL = "https://bit.gravitel.ru/reg/rarus/";
		Заголовки.Вставить("Content-Type", "application/json");
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("key");
		ЗаписьJSON.ЗаписатьЗначение("12345-12345-12345");
		
		ЗаписьJSON.ЗаписатьИмяСвойства("full_name");
		ЗаписьJSON.ЗаписатьЗначение(ПараметрыАвтоподписки.Наименование);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("mob_tel");
		ЗаписьJSON.ЗаписатьЗначение(ПараметрыАвтоподписки.Телефон);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("email");
		ЗаписьJSON.ЗаписатьЗначение(ПараметрыАвтоподписки.ЭлектроннаяПочта);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("crmurl");
		ЗаписьJSON.ЗаписатьЗначение(АдресОбратногоВызова);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("crmtoken");
		ЗаписьJSON.ЗаписатьЗначение(ПараметрыАвтоподписки.Токен);
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		ТелоЗапроса = json;
	КонецЕсли;

КонецПроцедуры

// Процедура формирует запрос получения тематик телефонного разговора
//
// Параметры:
//	URL					- Строка	- Корневой URL запроса
//	HTTPМетод			- Строка	- Метод (POST, GET)
//	ТелоЗапроса			- Строка	- Тело сформированного запроса
//	Заголовки			- Структура	- Структура заголовков запроса
//	Ошибка				- Строка	- Возвращаемое описание возникшей ошибки
//	json				- Строка	- Возвращаемая строка json-запроса
//	ИдентификаторЗаписи	- Строка	- Идентификатор записи разговора
//
Процедура ПриПолученииТематикРазговора(URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка, json,
	 ИдентификаторЗаписи) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	
	ПараметрыЗапроса = Новый Массив();
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("recording_id");
		ЗаписьJSON.ЗаписатьЗначение("[""" + ИдентификаторЗаписи + """]");
		ЗаписьJSON.ЗаписатьИмяСвойства("with_terms");
		ЗаписьJSON.ЗаписатьЗначение(Истина);
		ЗаписьJSON.ЗаписатьИмяСвойства("with_names");
		ЗаписьJSON.ЗаписатьЗначение(Истина);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "queries/recording_categories/";
	КонецЕсли;
	
	Если ПараметрыЗапроса.Количество() > 0 Тогда
		ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	КонецЕсли;	
	
КонецПроцедуры

// Процедура формирует запрос получения расшифровок телефонных разговоров
//
// Параметры:
//	URL					- Строка	- Корневой URL запроса
//	HTTPМетод			- Строка	- Метод (POST, GET)
//	ТелоЗапроса			- Строка	- Тело сформированного запроса
//	Заголовки			- Структура	- Структура заголовков запроса
//	Ошибка				- Строка	- Возвращаемое описание возникшей ошибки
//	json				- Строка	- Возвращаемая строка json-запроса
//	ЗаписиРазговоров	- Строка	- Массив идентификаторов записей разговоров
//
Процедура ПриПолученииРасшифровокРазговоров(URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка, json,
	 ЗаписиРазговоров) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	
	ПараметрыЗапроса = Новый Массив();
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("recording_id");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Для Каждого ИдентификаторЗаписи Из ЗаписиРазговоров Цикл
			ЗаписьJSON.ЗаписатьЗначение("""" + ИдентификаторЗаписи.Ключ + """");
		КонецЦикла;	
		ЗаписьJSON.ЗаписатьКонецМассива();
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "queries/recording_transcripts/";
	КонецЕсли;
	
	Если ПараметрыЗапроса.Количество() > 0 Тогда
		ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	КонецЕсли;	
	
КонецПроцедуры

// Процедура формирует запрос получения списка абонентов АТС
//
// Параметры:
//	URL			- Строка	- Корневой URL запроса
//	HTTPМетод	- Строка	- Метод (POST, GET)
//	ТелоЗапроса	- Строка	- Тело сформированного запроса
//	Заголовки	- Структура	- Структура заголовков запроса
//	Ошибка		- Строка	- Возвращаемое описание возникшей ошибки
//	json		- Строка	- Возвращаемая строка json-запроса
//
Процедура ПриПолученииАбонентов(URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка, json) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	
	ПараметрыЗапроса = Новый Массив();
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.СофтФонWebModule Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "config/users/request";
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ТелоЗапроса = "
		|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		|sign=" + sign + "
		|json=" + json;
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "config/users/request";
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.UIS Тогда
		КлючAPI = НастройкиТелефонии.КлючДляАвторизацииАТСUIS;
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("jsonrpc");
		ЗаписьJSON.ЗаписатьЗначение("2.0");
		ЗаписьJSON.ЗаписатьИмяСвойства("id");
		ЗаписьJSON.ЗаписатьЗначение("" + Новый УникальныйИдентификатор());
		ЗаписьJSON.ЗаписатьИмяСвойства("method");
		ЗаписьJSON.ЗаписатьЗначение("get.employees");
		
		ЗаписьJSON.ЗаписатьИмяСвойства("params");
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("access_token");
		ЗаписьJSON.ЗаписатьЗначение(КлючAPI);
		//ЗаписьJSON.ЗаписатьИмяСвойства("user_id");
		//ЗаписьJSON.ЗаписатьЗначение("number");
		//ЗаписьJSON.ЗаписатьИмяСвойства("offset");
		//ЗаписьJSON.ЗаписатьЗначение("number");
		//ЗаписьJSON.ЗаписатьИмяСвойства("limit");
		//ЗаписьJSON.ЗаписатьЗначение("number");
		//
		//ЗаписьJSON.ЗаписатьИмяСвойства("filter");
		//ЗаписьJSON.ЗаписатьНачалоОбъекта();
		//ЗаписьJSON.ЗаписатьКонецОбъекта();
		//
		//ЗаписьJSON.ЗаписатьИмяСвойства("sort");
		//ЗаписьJSON.ЗаписатьНачалоМассива();
		//ЗаписьJSON.ЗаписатьНачалоОбъекта();
		//ЗаписьJSON.ЗаписатьИмяСвойства("field");
		//ЗаписьJSON.ЗаписатьЗначение("string");
		//ЗаписьJSON.ЗаписатьИмяСвойства("order");
		//ЗаписьJSON.ЗаписатьЗначение("string");
		//ЗаписьJSON.ЗаписатьКонецОбъекта();
		//ЗаписьJSON.ЗаписатьКонецОбъекта();
		//
		//ЗаписьJSON.ЗаписатьИмяСвойства("fields");
		//ЗаписьJSON.ЗаписатьНачалоМассива();
		//ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		ТелоЗапроса = json;

	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Билайн Тогда
		HTTPМетод = "GET";
		URL = URL + "apis/portal/abonents";
		
		Заголовки.Вставить("X-MPBX-API-AUTH-TOKEN", НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);
		
		ТелоЗапроса = json;			
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Ростелеком Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("domain");
		ЗаписьJSON.ЗаписатьЗначение(НастройкиТелефонии.Domain);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		Заголовки.Вставить("X-Client-ID", НастройкиТелефонии.vpbx_api_key);
		Заголовки.Вставить("X-Client-Sign", sign);
	
		URL = URL + "users_info";
		
		ТелоЗапроса = json;

	ИначеЕсли ЭтоПлатформаITooLabs(ИспользуемаяАТС) Тогда
		ПараметрыЗапроса.Добавить("cmd=accounts");
		ПараметрыЗапроса.Добавить("token=" + НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);	
	КонецЕсли;
	
	Если ПараметрыЗапроса.Количество() > 0 Тогда
		ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	КонецЕсли;	
	
КонецПроцедуры

// Процедура формирует запрос получения данных абонента
//
// Параметры:
//	ВнутреннийНомер	- Строка	- Внутренний номер
//	URL				- Строка	- Корневой URL запроса
//	HTTPМетод		- Строка	- Метод (POST, GET)
//	ТелоЗапроса		- Строка	- Тело сформированного запроса
//	Заголовки		- Структура	- Структура заголовков запроса
//	Ошибка			- Строка	- Возвращаемое описание возникшей ошибки
//	json			- Строка	- Возвращаемая строка json-запроса
//
Процедура ПриПолученииДанныхАбонента(ВнутреннийНомер, URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка, json) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	ПараметрыЗапроса = Новый Массив;
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Яндекс Тогда
		HTTPМетод = "GET";
		
		Если НЕ ЗначениеЗаполнено(ВнутреннийНомер) Тогда
			Ошибка = "НеЗаполненВнутреннийНомерПользователя";
			Возврат;
		КонецЕсли;
		
		Токен = ТокенДоступаAPI(ВнутреннийНомер, Ошибка);
		
		Если ЗначениеЗаполнено(Ошибка) Тогда
			Возврат;
		КонецЕсли;
		
		Если Токен = Неопределено Тогда
			ВызватьИсключение НСтр("ru='Не удалось авторизоваться.';en='Failed to log in.'");
		КонецЕсли;
		
		URL = URL + "api/v2/profile/" + ВнутреннийНомер;
		
		Заголовки.Вставить("Authorization", "bearer " + Токен);
		Заголовки.Вставить("x-api-key", сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии().КлючДляАвторизацииАТСЯндекс);
	КонецЕсли;
	
	ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	
КонецПроцедуры

// Процедура формирует запрос получения исходящих номеров
//
// Параметры:
//	ВнутреннийНомер	- Строка	- Внутренний номер
//	URL				- Строка	- Корневой URL запроса
//	HTTPМетод		- Строка	- Метод (POST, GET)
//	ТелоЗапроса		- Строка	- Тело сформированного запроса
//	Заголовки		- Структура	- Структура заголовков запроса
//	Ошибка			- Строка	- Возвращаемое описание возникшей ошибки
//	json			- Строка	- Возвращаемая строка json-запроса
//
Процедура ПриПолученииИсходящихНомеров(ВнутреннийНомер, URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка, json) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	ПараметрыЗапроса = Новый Массив;
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Яндекс Тогда
		HTTPМетод = "GET";
		
		Если НЕ ЗначениеЗаполнено(ВнутреннийНомер) Тогда
			Ошибка = "НеЗаполненВнутреннийНомерПользователя";
			Возврат;
		КонецЕсли;
		
		Токен = ТокенДоступаAPI(ВнутреннийНомер, Ошибка);
		
		Если ЗначениеЗаполнено(Ошибка) Тогда
			Возврат;
		КонецЕсли;
		
		Если Токен = Неопределено Тогда
			ВызватьИсключение НСтр("ru='Не удалось авторизоваться.';en='Failed to log in.'");
		КонецЕсли;
		
		URL = URL + "api/v2/phonenumbers";
		
		Заголовки.Вставить("Authorization", "bearer " + Токен);
		Заголовки.Вставить("x-api-key", сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии().КлючДляАвторизацииАТСЯндекс);
	КонецЕсли;
	
	ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	
КонецПроцедуры

// Процедура формирует запрос получения записи разговора
//
// Параметры:
//	ИдентификаторЗаписи	- Строка	- Идентификатор записи разговора
//	ВнутреннийНомер		- Строка	- Внутренний номер
//	РежимПолученияЗаписи - Строка - Режим получения записи. Например, "download"
//	URL					- Строка	- Корневой URL запроса
//	HTTPМетод			- Строка	- Метод (POST, GET)
//	ТелоЗапроса			- Строка	- Тело сформированного запроса
//	Заголовки			- Структура	- Структура заголовков запроса
//	Ошибка				- Строка	- Возвращаемое описание возникшей ошибки
//	json				- Строка	- Возвращаемая строка json-запроса
//
Процедура ПриПолученииЗаписиРазговора(ИдентификаторЗаписи, ВнутреннийНомер, РежимПолученияЗаписи,
	 URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка,
	 json) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = сфпОбщегоНазначенияПовтИсп.ПолучитьЗначениеКонстанты("сфпИспользуемаяАТС");
	
	ПараметрыЗапроса = Новый Массив;
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.СофтФонWebModule Тогда
		HTTPМетод = Неопределено;
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("recording_id");
		ЗаписьJSON.ЗаписатьЗначение(ИдентификаторЗаписи);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("action");
		ЗаписьJSON.ЗаписатьЗначение("download");
		
		ЗаписьJSON.ЗаписатьИмяСвойства("extension");
		ЗаписьJSON.ЗаписатьЗначение(ВнутреннийНомер);
				
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "queries/recording/post?" + сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");

		ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("recording_id");
		ЗаписьJSON.ЗаписатьЗначение(ИдентификаторЗаписи);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("action");
		ЗаписьJSON.ЗаписатьЗначение(РежимПолученияЗаписи);
				
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		//ТелоЗапроса = "
		//|vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key + "
		//|sign=" + sign + "
		// |json=" + json;
		//
		//ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		//ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		//ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		// URL = URL + "queries/recording/post";
		
		HTTPМетод = "GET";
		
		vpbx_api_key = НастройкиТелефонии.vpbx_api_key;
		vpbx_api_salt = НастройкиТелефонии.vpbx_api_salt;
		timestamp = Формат((ТекущаяДатаСеанса() + 86400) - Дата("19700101"), "ЧН=0; ЧГ=0");
		sign = ПолучитьSign(vpbx_api_key, timestamp, ИдентификаторЗаписи, vpbx_api_salt);

		URL = URL + "queries/recording/link/" + ИдентификаторЗаписи + "/" + РежимПолученияЗаписи + "/" 
			+ vpbx_api_key + "/" + timestamp + "/" 
			+ sign;

		ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Билайн Тогда
		HTTPМетод = "GET";
		
		Позиция = СтрНайти(ИдентификаторЗаписи, "/");
		extTrackingId = КодировкаURL(Лев(ИдентификаторЗаписи, Позиция - 1));
		userId = КодировкаURL(Сред(ИдентификаторЗаписи, Позиция + 1));
		
		URL = URL + "apis/portal/records/" + extTrackingId + "/" + userId + "/reference";
		
		Заголовки.Вставить("X-MPBX-API-AUTH-TOKEN", НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);
		
		ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Ростелеком Тогда
		HTTPМетод = "POST";
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("session_id");
		ЗаписьJSON.ЗаписатьЗначение(ИдентификаторЗаписи);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		Заголовки.Вставить("X-Client-ID", НастройкиТелефонии.vpbx_api_key);
		Заголовки.Вставить("X-Client-Sign", sign);
	
		URL = URL + "get_record";
		
		ТелоЗапроса = json;
	КонецЕсли;

КонецПроцедуры

// Процедура формирует запрос загрузки записи разговора
//
// Параметры:
//	ИдентификаторЗаписи	- Строка	- Идентификатор записи разговора
//	URL					- Строка	- Корневой URL запроса
//	HTTPМетод			- Строка	- Метод (POST, GET)
//	ТелоЗапроса			- Строка	- Тело сформированного запроса
//	Заголовки			- Структура	- Структура заголовков запроса
//	Ошибка				- Строка	- Возвращаемое описание возникшей ошибки
//	json				- Строка	- Возвращаемая строка json-запроса
//
Процедура ПриЗагрузкеЗаписиРазговора(ИдентификаторЗаписи, URL, HTTPМетод, ТелоЗапроса, Заголовки, Ошибка, json) Экспорт
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	ПараметрыЗапроса = Новый Массив;
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.СофтФонWebModule Тогда
		HTTPМетод = "GET";
		
		URL = ИдентификаторЗаписи;
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		HTTPМетод = "GET";
		
		URL = ИдентификаторЗаписи;
		
	ИначеЕсли ЭтоПлатформаITooLabs(ИспользуемаяАТС) Тогда
		HTTPМетод = "GET";
		
		URL = ИдентификаторЗаписи;
	КонецЕсли;
	
	ТелоЗапроса = сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&");
	
КонецПроцедуры

// Процедура обработки ответа на запрос исходящего вызова
//
// Параметры:
//	HTTPОтвет						- HTTPОтвет	- Ответ сервера
//	ИмяСобытияДляЖурналаРегистрации	- Строка	- Имя события для записи журнала регистрации
//
Процедура ПриОбработкеОтветаНаСозданиеИсходящегоВызова(HTTPОтвет, ИмяСобытияДляЖурналаРегистрации) Экспорт
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.СофтФонWebModule Тогда
		ТелоОтвета = РаскодироватьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
		
		Если HTTPОтвет.КодСостояния = 200 Тогда
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
			ПараметрыОтвета = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			КодОтвета = Неопределено;
			Если ПараметрыОтвета.Свойство("result", КодОтвета) Тогда
				// 1ххх: Действие успешно выполнено
				Если сфпОбщегоНазначения.сфпСтрНачинаетсяС(КодОтвета, "1") Тогда
					Возврат;
				КонецЕсли;
				
				ЗаголовокОшибки = РасшифровкаОшибкиMango(КодОтвета);
				ТекстОшибки = ТелоОтвета;

			Иначе
				Возврат;
			КонецЕсли;	
			
		Иначе
			
			ЗаголовокОшибки = НСтр("ru='Ошибка при инициализации вызова.';en='Error initializing call.'");
			ТекстОшибки = ТелоОтвета;
			
		КонецЕсли;
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		ТелоОтвета = РаскодироватьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
		
		Если HTTPОтвет.КодСостояния = 200 Тогда
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
			ПараметрыОтвета = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			КодОтвета = Неопределено;
			Если ПараметрыОтвета.Свойство("result", КодОтвета) Тогда
				// 1ххх: Действие успешно выполнено
				Если сфпОбщегоНазначения.сфпСтрНачинаетсяС(КодОтвета, "1") Тогда
					Возврат;
				КонецЕсли;
				
				ЗаголовокОшибки = РасшифровкаОшибкиMango(КодОтвета);
				ТекстОшибки = ТелоОтвета;

			Иначе
				Возврат;
			КонецЕсли;	
			
		Иначе
			
			ЗаголовокОшибки = НСтр("ru='Ошибка при инициализации вызова.';en='Error initializing call.'");
			ТекстОшибки = ТелоОтвета;
			
		КонецЕсли;
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Ростелеком Тогда
		Если HTTPОтвет.КодСостояния = 200 Тогда
			Возврат;
			
		ИначеЕсли HTTPОтвет.КодСостояния = 401 Тогда	
			ТелоОтвета = РаскодироватьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
		    		
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
			ПараметрыОтвета = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			ТекстОшибки = "";
			Если ПараметрыОтвета.Свойство("resultMessage", ТекстОшибки) Тогда
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда				
					ЗаголовокОшибки = НСтр("ru='Ошибка при инициализации вызова.';en='Error initializing call.'");
					
				Иначе
					Возврат;
				КонецЕсли;	

			Иначе
				Возврат;
			КонецЕсли;	
		КонецЕсли;

	ИначеЕсли ЭтоПлатформаITooLabs(ИспользуемаяАТС) Тогда
		// 200 ОК
		Если HTTPОтвет.КодСостояния = 200 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаголовокОшибки = РасшифровкаОшибкиItoolabs(HTTPОтвет.КодСостояния);
		ТекстОшибки = РаскодироватьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3", ЗаголовокОшибки,
		 Символы.ПС,
		 ТекстОшибки);
	
	ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ТекстОшибки, УровеньЖурналаРегистрации.Ошибка);
	
	ВызватьИсключение ТекстОшибки;
	
КонецПроцедуры

// Возвращает ссылку на запись разговора
//
// Параметры:
//	ИдентификаторЗвонка	- Строка	- Идентификатор звонка
//	ВнутреннийНомер		- Строка	- Внутренний номер
//	Ошибка				- Строка	- Возвращаемое описание возникшей ошибки
//
// Возвращаемое значение:
//	Строка
//
Функция СсылкаНаЗаписьРазговора(ИдентификаторЗвонка, ВнутреннийНомер, Ошибка) Экспорт
	
	ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Яндекс Тогда
		Возврат ДанныеЗвонка(ИдентификаторЗвонка, ВнутреннийНомер, Ошибка);
	КонецЕсли;
	
КонецФункции

// Возвращает настройку отображения исходящего номера
//
// Возвращаемое значение:
//	Структура - содержит настройки
//
Функция НастройкиФормыПользователей() Экспорт
	
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("ПоказыватьИсходящийНомер",
		 Константы.сфпИспользуемаяАТС.Получить() = Перечисления.сфпДоступныеАТС.Яндекс);
	
	Возврат НастройкиФормы;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

/////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает массив идентификаторов записей телефонного разговора, доступных для прослушивания текущим пользователем
//
// Параметры:
//	ИдентификаторЗвонка	- Число	- Идентификатор звонка
//	ДатаНачало			- Дата	- Дата начала записи
//
// Возвращаемое значение:
//	Массив	- Массив идентификаторов записей телефонного разговора
//
Функция сфпПолучитьСписокЗаписейТелефонногоРазговора(ИдентификаторЗвонка, ДатаНачало) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторЗвонка",	ИдентификаторЗвонка);
	Запрос.УстановитьПараметр("НачалоЗаписи",			НачалоДня(ДатаНачало));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	сфпЗаписиТелефонныхПереговоров.ИдентификаторЗвонка КАК ИдентификаторЗвонка,
	|	сфпЗаписиТелефонныхПереговоров.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	сфпЗаписиТелефонныхПереговоров.НачалоЗаписи КАК НачалоЗаписи,
	|	сфпЗаписиТелефонныхПереговоров.Пользователь КАК Пользователь,
	|	сфпЗаписиТелефонныхПереговоров.НомерВнТелефона КАК НомерВнТелефона,
	|	сфпЗаписиТелефонныхПереговоров.Контакт КАК Контакт,
	|	сфпЗаписиТелефонныхПереговоров.НомерТелефона КАК НомерТелефона,
	|	сфпЗаписиТелефонныхПереговоров.ПродолжительностьЗаписи КАК ПродолжительностьЗаписи,
	|	сфпЗаписиТелефонныхПереговоров.ИмяЛинии КАК ИмяЛинии
	|ИЗ
	|	РегистрСведений.сфпЗаписиТелефонныхПереговоров КАК сфпЗаписиТелефонныхПереговоров
	|ГДЕ
	|	сфпЗаписиТелефонныхПереговоров.ИдентификаторЗвонка = &ИдентификаторЗвонка
	|	И сфпЗаписиТелефонныхПереговоров.НачалоЗаписи >= &НачалоЗаписи";
	ТаблицаЗаписей = Запрос.Выполнить().Выгрузить();
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаЗаписей);
КонецФункции // сфпСофтФонПроСервер.ПолучитьСписокЗаписейТелефонногоРазговора()

// Функция создает документ "Телефонный звонок"
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура данных звонка
//
Функция сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, ДанныеЗаполнения) Экспорт
	
	ИмяДокументаТелефонныйЗвонок = СтрЗаменить(сфпСофтФонПроСервер.сфпИмяДокументаТелефонныйЗвонок(), "Документ.", "");
	РеквизитыДокумента = Метаданные.Документы[ИмяДокументаТелефонныйЗвонок].Реквизиты;
	
	ПустойАбонентПредставление = НСтр("ru='!!!Не определен!!!';en='!!!Undefined!!!'");
	
	Если СтруктураЗвонка.Свойство("ДатаНачала") И ЗначениеЗаполнено(СтруктураЗвонка.ДатаНачала) Тогда
		  ДатаЗвонка = СтруктураЗвонка.ДатаНачала;
	Иначе ДатаЗвонка = сфпСофтФонПроСервер.сфпТекущаяДата();	
	КонецЕсли;
	
	ДлительностьЗвонка = 0;
	Если СтруктураЗвонка.Свойство("ДатаОкончания") И ЗначениеЗаполнено(СтруктураЗвонка.ДатаОкончания) Тогда
		Если СтруктураЗвонка.Свойство("ДатаОтвета") И ЗначениеЗаполнено(СтруктураЗвонка.ДатаОтвета) Тогда
			ДлительностьЗвонка = (СтруктураЗвонка.ДатаОкончания - СтруктураЗвонка.ДатаОтвета);
			
		Иначе
			ДлительностьЗвонка = (СтруктураЗвонка.ДатаОкончания - ДатаЗвонка);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураЗвонка.Свойство("Состояние") И ЗначениеЗаполнено(СтруктураЗвонка.Состояние) Тогда
		  СостояниеЗвонка = СтруктураЗвонка.Состояние;
	Иначе СостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Отвеченный;
	КонецЕсли;
	
	НовыйЗвонок	= Документы[ИмяДокументаТелефонныйЗвонок].СоздатьДокумент();
	НовыйЗвонок.Дата				   = ДатаЗвонка;
	НовыйЗвонок.Входящий			   = СтруктураЗвонка.ВходящийЗвонок;
	НовыйЗвонок.АбонентКакСвязаться	   = СтруктураЗвонка.НомерТелефона;
	НовыйЗвонок.сфпНомерКомпании	   = СтруктураЗвонка.Caller_Destination_Number;
	НовыйЗвонок.АбонентПредставление   = ПустойАбонентПредставление;
	НовыйЗвонок.Автор				   = сфпСофтФонПроСервер.сфпТекущийПользователь();
	НовыйЗвонок.Ответственный		   = НовыйЗвонок.Автор;
	НовыйЗвонок.сфпСостояниеЗвонка	   = СостояниеЗвонка;
	НовыйЗвонок.сфпИдентификаторЗвонка = СтруктураЗвонка.hCall;
	НовыйЗвонок.сфпИдентификаторЗаписи = СтруктураЗвонка.ИдентификаторЗаписи;
	НовыйЗвонок.сфпДлительностьЗвонка  = ДлительностьЗвонка;
	НовыйЗвонок.Описание			   =
		сфпСофтФонПроСервер.сфпЗаполнитьОписаниеТелефонногоЗвонка(НовыйЗвонок.сфпДлительностьЗвонка);
	
	Если РеквизитыДокумента.Найти("Важность") <> Неопределено Тогда
		Если НовыйЗвонок["Важность"].Метаданные().Имя = "ВариантыВажностиЗадачи" Тогда
			  НовыйЗвонок["Важность"] = Перечисления["ВариантыВажностиЗадачи"].Обычная;
		Иначе НовыйЗвонок["Важность"] = Перечисления["ВариантыВажностиВзаимодействия"].Обычная;
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыДокумента.Найти("Тема") <> Неопределено Тогда
		НовыйЗвонок.Тема = сфпСофтФонПроСервер.сфпЗаполнитьТемуТелефонногоЗвонка(НовыйЗвонок.Входящий, НовыйЗвонок.Дата);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		Если СтруктураЗвонка.Свойство("ContactID") И ЗначениеЗаполнено(СтруктураЗвонка.ContactID) Тогда
			СтруктураЗвонка.Контакт	= сфпСофтФонПроСервер.сфпНайтиКонтактПоGUID(СтруктураЗвонка.ContactID);
		КонецЕсли;
	КонецЕсли;
	
	//Если НЕ ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
	//	Если СтруктураЗвонка.МассивЗвонящих <> Неопределено Тогда
	//		Если СтруктураЗвонка.МассивЗвонящих.Количество() > 0 Тогда
	//			Если СтрНайти(СтруктураЗвонка.МассивЗвонящих[0], "Объект не найден") > 0 Тогда
	//				  СтруктураЗвонка.Контакт = Неопределено;
	//			Иначе СтруктураЗвонка.Контакт = СтруктураЗвонка.МассивЗвонящих[0];
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;

	Если ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		НовыйЗвонок["АбонентКонтакт"] = СтруктураЗвонка.Контакт;
		НовыйЗвонок["АбонентПредставление"]	= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(СтруктураЗвонка.Контакт);
		Если СтрНайти(Строка(СтруктураЗвонка.Контакт), "<Объект не найден>") > 0 Тогда
			НовыйЗвонок["Комментарий"] = Строка(ТипЗнч(СтруктураЗвонка.Контакт)) + ": "
					+ сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(СтруктураЗвонка.Контакт) + НСтр("ru=',
						| номер: ';en=', number: '") 
					+ сфпСофтФонПроСервер.сфпПолучитьПредставлениеНомераТелефона(СтруктураЗвонка.Контакт,
						 СтруктураЗвонка.НомерТелефона)
					+ Символы.ПС + НСтр("ru='К данному абоненту в доступе отказано.';en='Access to this subscriber is denied.'")
					+ НСтр("ru=' Для разрешения работы с абонентом обратитесь к руководителю или администратору.';
						|en=' For permission to work with a subscriber,
						| contact your supervisor or administrator.'");
		КонецЕсли;

	ИначеЕсли СтруктураЗвонка.Свойство("ВнешнийЗвонок") И СтруктураЗвонка.ВнешнийЗвонок Тогда
		Если СтруктураЗвонка.МассивЗвонящих = Неопределено Тогда
			Если НЕ ПустаяСтрока(СтруктураЗвонка.CallerInfoName) И СтрНайти(СтруктураЗвонка.CallerInfoName,
				 СтруктураЗвонка.НомерТелефона) = 0 Тогда
				НовыйЗвонок["АбонентПредставление"] = СтруктураЗвонка.CallerInfoName;
			КонецЕсли;

		ИначеЕсли СтруктураЗвонка.МассивЗвонящих.Количество() = 0 Тогда
			Если НЕ ПустаяСтрока(СтруктураЗвонка.CallerInfoName) И СтрНайти(СтруктураЗвонка.CallerInfoName,
				 СтруктураЗвонка.НомерТелефона) = 0 Тогда
				НовыйЗвонок["АбонентПредставление"] = СтруктураЗвонка.CallerInfoName;
			КонецЕсли;	
		КонецЕсли;

	Иначе	
		Если НЕ ПустаяСтрока(СтруктураЗвонка.CalledInfoName) Тогда
			НовыйЗвонок["АбонентПредставление"] = СтруктураЗвонка.CalledInfoName;
		КонецЕсли;	
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Если ДанныеЗаполнения.Свойство("Основание") Тогда
			НовыйЗвонок["ВзаимодействиеОснование"] = ДанныеЗаполнения.Основание;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("CRM_КонтекстВызова") Тогда
			НовыйЗвонок.ДополнительныеСвойства.Вставить("CRM_КонтекстВызова", ДанныеЗаполнения.CRM_КонтекстВызова);
		КонецЕсли;
	КонецЕсли;
	
	КаналПервичногоИнтереса = Неопределено;
	ИсточникПервичногоИнтереса = Неопределено;
	ИзменитьCRM_СостоянияЛидов = Ложь; // +CRM
	
	Если НовыйЗвонок.Входящий Тогда
		Если ЗначениеЗаполнено(ДанныеЗаполнения) И ДанныеЗаполнения.Свойство("сфпСтруктураCoMagic") Тогда
			сфпСтруктураВнешнихДанных = ДанныеЗаполнения.сфпСтруктураCoMagic;
			
			ИмяПредопределенногоЗначения = "ПланВидовХарактеристик.КаналыРекламныхВоздействий.CRM_CoMagic";	
			КаналПервичногоИнтереса = ПредопределенноеЗначение(ИмяПредопределенногоЗначения);
			ИсточникПервичногоИнтереса =
				сфпСофтФонПроСервер.сфпНайтиМаркетинговоеМероприятие(сфпСтруктураВнешнихДанных.comagic_context.campaign);

			НовыйЗвонок["сфпCoMagicID"] = сфпСтруктураВнешнихДанных.comagic_context.visitor_id;
			НовыйЗвонок["Комментарий"] = НовыйЗвонок["Комментарий"] 
				+ ?(НЕ ЗначениеЗаполнено(НовыйЗвонок["Комментарий"]), "", Символы.ПС)
				+ НСтр("ru='Кампания: ';en='Campaign: '") + сфпСтруктураВнешнихДанных.comagic_context.campaign + Символы.ПС
				+ НСтр("ru='Сайт: ';en='Website: '") + сфпСтруктураВнешнихДанных.comagic_context.site + Символы.ПС
				+ НСтр("ru='Ключевые слова: ';en='Keywords: '") + сфпСтруктураВнешнихДанных.comagic_context.search_query;

		Иначе
			МенеджерЗаписи = РегистрыСведений.сфпДанныеКоллтрекинга.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.НомерТелефона = Прав(НовыйЗвонок.АбонентКакСвязаться, 10);
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда

				Если МенеджерЗаписи.Оператор = Перечисления.CRM_CallTrakingСценарии.Comagic
					ИЛИ МенеджерЗаписи.Оператор = Перечисления.CRM_CallTrakingСценарии.UIS Тогда
					
					НовыйЗвонок["сфпCoMagicID"] = МенеджерЗаписи.Идентификатор;
					НовыйЗвонок["Комментарий"] = НовыйЗвонок["Комментарий"] 
						+ ?(НЕ ЗначениеЗаполнено(НовыйЗвонок["Комментарий"]), "", Символы.ПС)
						+ НСтр("ru='Кампания: ';en='Campaign: '") + МенеджерЗаписи.utm_campaign + Символы.ПС
						+ НСтр("ru='Сайт: ';en='Website: '") + МенеджерЗаписи.Сайт + Символы.ПС
						+ НСтр("ru='Ключевые слова: ';en='Keywords: '") + МенеджерЗаписи.utm_term;

				// ИначеЕсли МенеджерЗаписи.Оператор = Перечисления.CRM_CallTrakingСценарии.Roistat Тогда

				КонецЕсли;

				// +CRM
				КаналПервичногоИнтереса = МенеджерЗаписи.КаналПервичногоИнтереса;
				ИсточникПервичногоИнтереса = МенеджерЗаписи.ИсточникПервичногоИнтереса;

				Если ЗначениеЗаполнено(МенеджерЗаписи.Заявка) Тогда
					НовыйЗвонок["ВзаимодействиеОснование"] = МенеджерЗаписи.Заявка;
					ИзменитьCRM_СостоянияЛидов = Истина;
					
					ЗаявкаОбъект = МенеджерЗаписи.Заявка.ПолучитьОбъект();
					Если НЕ ЗаявкаОбъект.CRM_СкрытьВАРМ Тогда
						ЗаявкаОбъект.CRM_СкрытьВАРМ = Истина;
						ЗаявкаОбъект.ДополнительныеСвойства.Вставить("НеЗапускатьТриггер", Истина);
						ЗаявкаОбъект.Записать();
					КонецЕсли;
					
				КонецЕсли;
				// -CRM

				МенеджерЗаписи.Удалить();

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Отдельная врезка на заполнение представление абонента, если звонок совершается из телемаркетинга.
	Если ЗначениеЗаполнено(ДанныеЗаполнения) И ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Основание")
			 И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
			Если ДанныеЗаполнения.Свойство("Описание") И ЗначениеЗаполнено(ДанныеЗаполнения.Описание) Тогда
				// Звоним потенциальному клиенту
				НовыйЗвонок["АбонентПредставление"] = ДанныеЗаполнения.Описание;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураЗвонка.Свойство("ВнешнийЗвонок") И СтруктураЗвонка.ВнешнийЗвонок
		И Не ЗначениеЗаполнено(НовыйЗвонок.АбонентКонтакт) Тогда
		CRM_КлиентыСервер.СоздатьКонтактВзаимодействия(НовыйЗвонок);
	КонецЕсли;
	
	Справочники.CRM_ПравилаОбработкиОбращений.ПрименитьПравило(НовыйЗвонок);
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		НовыйЗвонок.Записать();
		ЗвонокЗаписан = Истина;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ЗвонокЗаписан	= Ложь;
	КонецПопытки;
	
	Справочники.CRM_ПравилаОбработкиОбращений.ОбработатьОбращение(НовыйЗвонок);
	
	// +CRM
	Если ЗвонокЗаписан И ИзменитьCRM_СостоянияЛидов Тогда
		СостояниеЗаявкаПоЗвонку = Константы.CRM_СостояниеЛидаСозданоПоЗвонку.Получить();
		Если ЗначениеЗаполнено(СостояниеЗаявкаПоЗвонку) Тогда
			РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(ЗаявкаОбъект.Ссылка, СостояниеЗаявкаПоЗвонку);

		Иначе
			РегистрыСведений.CRM_СостоянияЛидов.УдалитьСостояниеЛида(ЗаявкаОбъект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	// -CRM
	
	Если ЗвонокЗаписан И (ЗначениеЗаполнено(КаналПервичногоИнтереса)
		 ИЛИ ЗначениеЗаполнено(ИсточникПервичногоИнтереса)) Тогда
		// Зафиксируем актуальный источник привлечения
		НаборРегистра = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборРегистра.Отбор.Сделка.Установить(НовыйЗвонок.Ссылка);
	
		Партнер = Справочники.Партнеры.ПустаяСсылка();
		Если ЗначениеЗаполнено(НовыйЗвонок.АбонентКонтакт) Тогда
			Если ТипЗнч(НовыйЗвонок.АбонентКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
				Партнер = НовыйЗвонок.АбонентКонтакт;
				
			ИначеЕсли ТипЗнч(НовыйЗвонок.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда	
				Партнер = НовыйЗвонок.АбонентКонтакт.Владелец;
			КонецЕсли;
		КонецЕсли;
		
		Запись = НаборРегистра.Добавить();
		Запись.Период = ?(ЗначениеЗаполнено(НовыйЗвонок.Дата), НовыйЗвонок.Дата,
			 CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
		Запись.Партнер = Партнер;
		Запись.Сделка = НовыйЗвонок.Ссылка;
		Запись.ИсточникПервичногоИнтереса = ИсточникПервичногоИнтереса;
		Запись.КаналПервичногоИнтереса = КаналПервичногоИнтереса;
		
		НаборРегистра.Записать();
	КонецЕсли;
	
	ИмяМероприятия = СтруктураЗвонка.Caller_Destination_Number;
	Если ЗначениеЗаполнено(ИмяМероприятия) И ЗвонокЗаписан Тогда
		ПартнерИнтереса = "";
		
		Если ЗначениеЗаполнено(НовыйЗвонок.АбонентКонтакт) Тогда
			Если ТипЗнч(НовыйЗвонок.АбонентКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
				ПартнерИнтереса = НовыйЗвонок.АбонентКонтакт;
				
			ИначеЕсли ТипЗнч(НовыйЗвонок.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ПартнерИнтереса = НовыйЗвонок.АбонентКонтакт.Владелец;
			КонецЕсли;
			 
		Иначе
			ПотенциальныйКлиентОбъект = Справочники.CRM_ПотенциальныеКлиенты.СоздатьЭлемент();
			ПотенциальныйКлиентОбъект.Наименование = НовыйЗвонок.АбонентКакСвязаться;
			ПотенциальныйКлиентОбъект.ОбменДанными.Загрузка = Истина;
			ПотенциальныйКлиентОбъект.Записать();
			
			ПартнерИнтереса = ПотенциальныйКлиентОбъект.Ссылка;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПартнерИнтереса) Тогда
			Мероприятие = Справочники.МаркетинговыеМероприятия.НайтиПоНаименованию(ИмяМероприятия, Истина);
			Если Мероприятие.Пустая() Тогда
				МероприятиеОбъект = Справочники.МаркетинговыеМероприятия.СоздатьЭлемент();
				МероприятиеОбъект.Наименование = ИмяМероприятия;
				МероприятиеОбъект.ОбменДанными.Загрузка = Истина;
				МероприятиеОбъект.Записать();
				
				Мероприятие = МероприятиеОбъект.Ссылка;
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период = НовыйЗвонок.Дата;
			МенеджерЗаписи.Партнер = ПартнерИнтереса;
			МенеджерЗаписи.Сделка = НовыйЗвонок.Ссылка;
			МенеджерЗаписи.ИсточникПервичногоИнтереса = Мероприятие;
			МенеджерЗаписи.КаналПервичногоИнтереса = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.CRM_БезУказанияИсточника;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ДанныеЗаполнения) И ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ЗвонокЗаписан И ДанныеЗаполнения.Свойство("Взаимодействие") Тогда
			CRM_ВзаимодействияСервер.ДобавитьДокументВРегистр(ДанныеЗаполнения.Взаимодействие, НовыйЗвонок.Ссылка);
		КонецЕсли;
	КонецЕсли;

	Возврат НовыйЗвонок.Ссылка;

КонецФункции // сфпСоздатьТелефонныйЗвонок()

// Функция возврашает элемент справочника CRM_СостоянияИнтересов
Функция сфпСостояниеИнтересаВыявлениеПотребностей() Экспорт
	Возврат Справочники.CRM_СостоянияИнтересов.НайтиПоНаименованию("Выявление потребностей", Истина);
КонецФункции

// Функция создает документ "CRM_Интерес"
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура данных звонка
//
Функция сфпСоздатьИнтерес(СтруктураЗвонка) Экспорт
	НовыйИнтерес = Документы["CRM_Интерес"].СоздатьДокумент();
	Если НЕ ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		Если ЗначениеЗаполнено(СтруктураЗвонка.ContactID) Тогда
			СтруктураЗвонка.Контакт	= сфпСофтФонПроСервер.сфпНайтиКонтактПоGUID(СтруктураЗвонка.ContactID);
		КонецЕсли;
	КонецЕсли;	
	
	НовыйИнтерес["Автор"] 				= сфпСофтФонПроСервер.сфпТекущийПользователь();
	НовыйИнтерес["Дата"] 				= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	НовыйИнтерес["ДокументОснование"] 	= СтруктураЗвонка.НовыйЗвонок;
	НовыйИнтерес["Ответственный"] 		= НовыйИнтерес["Автор"];
		
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			НовыйИнтерес["Организация"] = ЗначениеНастройки;
		Иначе
			НовыйИнтерес["Организация"] = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию();
		КонецЕсли;
	Иначе
		МодульCRM_Модуль_МетодыМодулейОбъектовДокументов =
			ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_МетодыМодулейОбъектовДокументов");
		Если МодульCRM_Модуль_МетодыМодулейОбъектовДокументов <> Неопределено Тогда
			МодульCRM_Модуль_МетодыМодулейОбъектовДокументов.ЗаполнитьОрганизацию(НовыйИнтерес);
		КонецЕсли;
	КонецЕсли;
	
	НовыйИнтерес["Подразделение"]       = НовыйИнтерес["Автор"].Подразделение;
	НовыйИнтерес["Офис"]       			= НовыйИнтерес["Подразделение"].CRM_Офис;	
	//НовыйИнтерес["СостояниеИнтереса"]   = Справочники.CRM_СостоянияИнтересов.ВыявлениеПотребностей;	
	НовыйИнтерес["Тема"]				= НСтр("ru='#Создан автоматически средствами СофтФон';
		|en='# Created automatically with SoftPhone tools'");
	НовыйИнтерес["ТипУслуги"]			= Справочники.CRM_ТипУслуги.ПоставкаТоварыУслуги;	
	
	Если ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		Если СтрНайти(Строка(СтруктураЗвонка.Контакт), НСтр("ru='<Объект не найден>';en='<Object not found>'")) > 0 Тогда
			НовыйИнтерес["Описание"]	= НовыйИнтерес["Описание"] + Символы.ПС  + Строка(ТипЗнч(СтруктураЗвонка.Контакт)) + ": "
					+ сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(СтруктураЗвонка.Контакт) + НСтр("ru=',
						| номер: ';en=', number: '") 
					+ сфпСофтФонПроСервер.сфпПолучитьПредставлениеНомераТелефона(СтруктураЗвонка.Контакт,
						 СтруктураЗвонка.НомерТелефона)
					+ Символы.ПС + НСтр("ru='К данному абоненту в доступе отказано.';en='Access to this subscriber is denied.'")
					+ НСтр("ru=' Для разрешения работы с абонентом обратитесь к руководителю или администратору.';
						|en=' For permission to work with a subscriber,
						| contact your supervisor or administrator.'");
		ИначеЕсли ТипЗнч(СтруктураЗвонка.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
			НовыйИнтерес["Партнер"]			= СтруктураЗвонка.Контакт;
			НовыйИнтерес["КонтактноеЛицо"]  = НовыйИнтерес["Партнер"].CRM_ОсновноеКонтактноеЛицо;
		ИначеЕсли ТипЗнч(СтруктураЗвонка.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			НовыйИнтерес["КонтактноеЛицо"]	= СтруктураЗвонка.Контакт;
			НовыйИнтерес["Партнер"]			= сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(СтруктураЗвонка.Контакт);
		ИначеЕсли ТипЗнч(СтруктураЗвонка.Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		    Клиент = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(СтруктураЗвонка.Контакт);
			Если ЗначениеЗаполнено(Клиент) Тогда
				НовыйИнтерес["Партнер"]	= Клиент;			
			Иначе				
				НовыйИнтерес["ПотенциальныйКлиент"]	= СтруктураЗвонка.Контакт;			
			КонецЕсли;
		Иначе
			НовыйИнтерес["Описание"]	= НовыйИнтерес["Описание"] + Символы.ПС  + Строка(ТипЗнч(СтруктураЗвонка.Контакт)) + ": "
					+ сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(СтруктураЗвонка.Контакт) + НСтр("ru=',
						| номер: ';en=', number: '") 
					+ сфпСофтФонПроСервер.сфпПолучитьПредставлениеНомераТелефона(СтруктураЗвонка.Контакт,
						 СтруктураЗвонка.НомерТелефона);
		КонецЕсли;
	КонецЕсли;	
	Попытка
		НовыйИнтерес.Записать();
	Исключение
		Возврат Документы.CRM_Интерес.ПустаяСсылка();
	КонецПопытки;
	
	НовоеВзаимодействие						   	= Документы["CRM_Взаимодействие"].СоздатьДокумент();
	НовоеВзаимодействие["Автор"] 			   	= сфпСофтФонПроСервер.сфпТекущийПользователь();
	НовоеВзаимодействие["ВидВзаимодействия"]   	= Справочники.CRM_ВидыВзаимодействий.ОбзвонКлиентов;
	НовоеВзаимодействие["Баллы"]               	= НовоеВзаимодействие["ВидВзаимодействия"].Баллы;
	НовоеВзаимодействие["Дата"]                	= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	НовоеВзаимодействие["ДокументОснование"]   	= НовыйИнтерес.Ссылка;
	НовоеВзаимодействие["КонтактноеЛицо"]      	= НовыйИнтерес.КонтактноеЛицо;
	НовоеВзаимодействие["ОжидаемаяВыручка"]    	= НовыйИнтерес.ОжидаемаяВыручка;
	НовоеВзаимодействие["Организация"]         	= НовыйИнтерес.Организация;
	НовоеВзаимодействие["Ответственный"]       	= НовоеВзаимодействие["Автор"];
	НовоеВзаимодействие["ПлановаяДата"]        	= НовоеВзаимодействие["Дата"];
	НовоеВзаимодействие["Партнер"]             	= НовыйИнтерес.Партнер;
	НовоеВзаимодействие["Подразделение"]       	= НовыйИнтерес.Подразделение;
	НовоеВзаимодействие["ПотенциальныйКлиент"] 	= НовыйИнтерес.ПотенциальныйКлиент;
	НовоеВзаимодействие["СостояниеИнтереса"]   	= НовыйИнтерес.СостояниеИнтереса;
	НовоеВзаимодействие["Содержание"]          	= НСтр("ru='#Создан автоматически средствами СофтФон';
		|en='# Created automatically with SoftPhone tools'"); 
	НовоеВзаимодействие["СтатусВзаимодействия"] = Справочники.CRM_СостоянияСобытий.Запланировано;
	
	Попытка
		НовоеВзаимодействие.Записать();
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Ошибка, , , 
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Попытка
		НовыйИнтерес.Записать();
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Ошибка, , , 
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	Возврат НовыйИнтерес.Ссылка;
КонецФункции

/////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЕЙСТВИЙ

// Функция возвращает массив структур доступных действий при звонке
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив	- Массив структур доступных действий
//
Функция сфпПолучитьМассивДоступныхДействий() Экспорт
	
	МассивДействий = Новый Массив();
	
	сфпДобавитьДействие(МассивДействий,	Нстр("ru='Нет действий';en='No activity'"), "");
	сфпДобавитьДействие(МассивДействий,	Нстр("ru='Открыть Панель звонка';en='Open Call Panel'"), "сфпОткрытьПанельЗвонка");
	сфпДобавитьДействие(МассивДействий,	Нстр("ru='Открыть Телефонный звонок';en='Open Phone call'"),
		 "сфпОткрытьТелефонныйЗвонок");
	сфпДобавитьДействие(МассивДействий,	Нстр("ru='Открыть карточку контакта';en='Open contact card'"),
		 "сфпОткрытьКарточкуКонтакта");
	сфпДобавитьДействие(МассивДействий,	Нстр("ru='Регистрация обращения';en='Request  Registration'"),
		 "сфпРегистрацияОбращения");
	сфпДобавитьДействие(МассивДействий,
			Нстр("ru='Краткая форма Телефонного звонка';en='Short form of Phone call'"),
		 "сфпОткрытьСтикер");
	//сфпДобавитьДействие(МассивДействий,	Нстр("ru='Открыть интерес';en='Open Lead'"), "сфпОткрытьИнтерес");
		
	Если Метаданные.Документы.Найти("CRM_СчетНаОплатуПокупателю") <> Неопределено Тогда
		сфпДобавитьДействие(МассивДействий,
				Нстр("ru='Открыть счет на оплату';en='Open an account for payment'"),
			 "сфпОткрытьСчетНаОплату");
	
	ИначеЕсли Метаданные.Документы.Найти("ЗаказКлиента") <> Неопределено Тогда
		сфпДобавитьДействие(МассивДействий,
				Нстр("ru='Открыть счет на оплату';en='Open an account for payment'"),
			 "сфпОткрытьЗаказКлиента");
	КонецЕсли;
	
	Если Метаданные.Отчеты.Найти("CRM_Продажи") <> Неопределено Тогда
		сфпДобавитьДействие(МассивДействий,	Нстр("ru='Открыть продажи';en='Open sales'"), "сфпОткрытьПродажи");
	КонецЕсли;
	
	сфпДобавитьДействие(МассивДействий,	Нстр("ru='Открыть список анкет';en='Open Qustionnaire List'"),
		 "сфпОткрытьСписокАнкет");
	сфпДобавитьДействие(МассивДействий,	Нстр("ru='Открыть досье клиента';en='Open customer dossier'"),
		 "сфпОткрытьДосьеКлиента");
	сфпДобавитьДействие(МассивДействий,
			Нстр("ru='Открыть дебиторскую задолженность';en='Open receivables'"),
		 "сфпОткрытьДебиторскуюЗадолженность");
	сфпДобавитьДействие(МассивДействий,
			Нстр("ru='Открыть ведомость взаиморасчетов';en='Open the settlement sheet'"),
		 "сфпОткрытьВедомостьВзаиморасчетов");

	Возврат МассивДействий;
	
КонецФункции // сфпПолучитьМассивДоступныхДействий()

/////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ COMAGIC

// Функция возвращает идентификатор CoMagic
//
// Парамеры:
//	Ссылка	- ДокументСсылка	- Документ
//
// Возвращаемое значение:
//	Строка	- Идентификатор CoMagic
//
Функция сфпПолучитьCoMagicID(Параметры) Экспорт
	
	CoMagicID = "";
	Звонок = "";
	Партнер = "";
		
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Если Параметры.Свойство("Звонок") Тогда
			Звонок = Параметры.Звонок;
		КонецЕсли;
		Если Параметры.Свойство("Партнер") Тогда
			Партнер = Параметры.Партнер;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Партнер) И Параметры.Свойство("КонтактноеЛицо") Тогда
			Партнер = Параметры.КонтактноеЛицо.Владелец;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Параметры) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		Звонок = Параметры;

		Если ТипЗнч(Звонок.АбонентКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
			Партнер = Звонок.АбонентКонтакт;
				
		ИначеЕсли ТипЗнч(Звонок.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Партнер = Звонок.АбонентКонтакт.Владелец;
		КонецЕсли;
			
	ИначеЕсли ТипЗнч(Параметры) = Тип("СправочникСсылка.Партнеры") Тогда
		Партнер = Параметры;
		
	ИначеЕсли ТипЗнч(Параметры) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Партнер = Параметры.Владелец;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Партнер) И ЗначениеЗаполнено(Партнер.сфпCoMagicID) Тогда
		CoMagicID = Партнер.сфпCoMagicID;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(CoMagicID) И ЗначениеЗаполнено(Звонок) Тогда
		CoMagicID = Звонок.сфпCoMagicID;
	КонецЕсли;
	
	Возврат CoMagicID;

КонецФункции // сфпПолучитьCoMagicID(()

// Формирует структуру полей контактной информации типа Телефон или МобильныйТелефон по представлению телефона
//
// Параметры
//  Представление  - Строка - строковая информация с номером телефона
//
// Возвращаемое значение:
//   Структура   - сформированная структура
//
Функция ПреобразоватьНомерДляКонтактнойИнформации(Знач Номер) Экспорт
	
	// Очистка пользовательских разделителей
	ЗаменяемыеСимволы = "()- ";
	Для НомерСимвола = 1 По СтрДлина(ЗаменяемыеСимволы) Цикл
		Номер = СтрЗаменить(Номер, Сред(ЗаменяемыеСимволы, НомерСимвола, 1), "");
	КонецЦикла;
	
	// Телефонный код России 7 (вызов внутри страны начинается на 8), коды сотовых операторов начинаются на 9.
	Если Лев(Номер, 2) = "89" Тогда
		Номер = "7" + Сред(Номер, 2);
	ИначеЕсли Лев(Номер, 3) = "+79" Тогда
		Номер = Сред(Номер, 2);
	КонецЕсли;
	
	Возврат Номер;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область MangoOffice

Функция КодировкаURL(Строка) Экспорт
	
	Возврат КодироватьСтроку(Строка, СпособКодированияСтроки.КодировкаURL);
	
КонецФункции

Функция ПолучитьSign(Параметр1, Параметр2, Параметр3, Параметр4 = Неопределено) Экспорт
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(Параметр1);
	ХешированиеДанных.Добавить(Параметр2);
	ХешированиеДанных.Добавить(Параметр3);
	
	Если Параметр4 <> Неопределено Тогда
		ХешированиеДанных.Добавить(Параметр4);
	КонецЕсли;	
	
	Возврат НРег(СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", ""));
	
КонецФункции

Функция РасшифровкаОшибкиMango(Знач Код)
	
	Код = Формат(Код, "ЧГ=0");
	
	Если сфпОбщегоНазначения.сфпСтрНачинаетсяС(Код, "21") Тогда // 2100
		Возврат НСтр("ru='Доступ к счету невозможен';en='Access to account is impossible'");
	ИначеЕсли Код = "2210" Тогда
		Возврат НСтр("ru='Доступ ограничен периодом использования';en='Access limited by period of use'");
	ИначеЕсли Код = "2211" Тогда
		Возврат НСтр("ru='Достигнут дневной лимит использования услуги';en='Reached daily limit of using the service'");
	ИначеЕсли Код = "2212" Тогда
		Возврат НСтр("ru='Достигнут месячный лимит использования услуги';en='Reached monthly limit of use service'");
	ИначеЕсли Код = "2220" Тогда
		Возврат НСтр("ru='Количество одновременных вызовов/действий ограничено';
			|en='Number of simultaneous calls/actions are limited'");
	ИначеЕсли Код = "2230" Тогда
		Возврат НСтр("ru='Услуга недоступна';en='Service is not available'");
	ИначеЕсли Код = "2240" Тогда
		Возврат НСтр("ru='Недостаточно средств на счете';en='Insufficient funds in account'");
	ИначеЕсли Код = "2250" Тогда
		Возврат НСтр("ru='Ограничение на количество использований услуги в биллинге';
			|en='Restriction on number of services usages in billing'");
	ИначеЕсли сфпОбщегоНазначения.сфпСтрНачинаетсяС(Код, "22") Тогда // 2200
		Возврат НСтр("ru='Доступ к счету ограничен';en='Account access is limited'");
	ИначеЕсли сфпОбщегоНазначения.сфпСтрНачинаетсяС(Код, "23") Тогда // 2300
		Возврат НСтр("ru='Направление заблокировано';en='Direction blocked'");
	ИначеЕсли сфпОбщегоНазначения.сфпСтрНачинаетсяС(Код, "24") Тогда // 2400
		Возврат НСтр("ru='Ошибка биллинга';en='Billing error'");
	ИначеЕсли сфпОбщегоНазначения.сфпСтрНачинаетсяС(Код, "2") Тогда // 2000
		Возврат НСтр("ru='Ограничение биллинговой системы';en='Restriction of billing system'");
	ИначеЕсли Код = "3100" Тогда
		Возврат НСтр("ru='Переданы неверные параметры команды';en='Invalid command parameters passed'");
	ИначеЕсли Код = "3101" Тогда
		Возврат НСтр("ru='Запрос выполнен по методу, отличному от POST';en='Query is made by method other than POST'");
	ИначеЕсли Код = "3102" Тогда
		Возврат НСтр("ru='Значение ключа не соответствуют рассчитанному';en='Key value not correspond to calculated'");
	ИначеЕсли Код = "3103" Тогда
		Возврат НСтр("ru='В запросе отсутствует обязательный параметр';en='Query has no required parameter'");
	ИначеЕсли Код = "3104" Тогда
		Возврат НСтр("ru='Параметр передан в неправильном формате';en='This parameter is passed in wrong format'");
	ИначеЕсли Код = "3105" Тогда
		Возврат НСтр("ru='Неверный ключ доступа';en='Incorrect access key'");
	ИначеЕсли сфпОбщегоНазначения.сфпСтрНачинаетсяС(Код, "32") Тогда // 3200
		Возврат НСтр("ru='Неверно указан номер абонента';en='Invalid subscriber number'");
	ИначеЕсли Код = "3310" Тогда
		Возврат НСтр("ru='Вызов не найден';en='Call is not found'");
	ИначеЕсли Код = "3320" Тогда
		Возврат НСтр("ru='Запись разговора не найдена';en='Conversation record not found'");
	ИначеЕсли Код = "3330" Тогда
		Возврат НСтр("ru='Номер не найден у ВАТС или сотрудника';en='Number is not found in VATE or employee'");
	ИначеЕсли сфпОбщегоНазначения.сфпСтрНачинаетсяС(Код, "33") Тогда // 3300
		Возврат НСтр("ru='Объект не существует';en='Object does not exist'");
	ИначеЕсли сфпОбщегоНазначения.сфпСтрНачинаетсяС(Код, "3") Тогда // 3000
		Возврат НСтр("ru='Неверный запрос';en='Wrong Query'");
	ИначеЕсли сфпОбщегоНазначения.сфпСтрНачинаетсяС(Код, "4") Тогда // 4000
		Возврат НСтр("ru='Действие не может быть выполнено';en='Action cannot be performed'");
	ИначеЕсли сфпОбщегоНазначения.сфпСтрНачинаетсяС(Код, "5") Тогда // 5000
		Возврат НСтр("ru='Ошибка сервера';en='Server error'");
	Иначе
		Возврат НСтр("ru='Неизвестная ошибка';en='Unknown error'");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Itoolabs

Функция РасшифровкаОшибкиItoolabs(Код)
	
	Если Код = 400 Тогда
		Возврат НСтр("ru='Переданы некорректные параметры';en='Invalid parameters transmited'");
	ИначеЕсли Код = 401 Тогда
		Возврат НСтр("ru='Передан неверный ключ (token)';en='Invalid key passed (token)'");
	Иначе
		Возврат НСтр("ru='Неизвестная ошибка';en='Unknown error'");
	КонецЕсли;
	
КонецФункции

Функция ЭтоПлатформаITooLabs(АТС) Экспорт
	
	АТСНаПлатформеItoolabs = Новый Массив();
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.УниверсальныйItoolabs);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.ДомRu);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.ВестКоллСПб);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.ДеловаяСетьИркутск);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.Энфорта);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.Мегафон);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.ТТК);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.ВестКоллМосква);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.VirginConnect);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.ГарсТелеком);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.НаукаСвязь);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.RiNet);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.СибирскиеСети);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.Авантел);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.сфпДоступныеАТС.Гравител);
	
	Возврат АТСНаПлатформеItoolabs.Найти(АТС) <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область ЯндексТелефония

Функция ТокенДоступаAPI(ВнутреннийНомер, Ошибка)
	
	Токен = АктуальныйТокенДоступаAPI(ВнутреннийНомер);
	
	Если Токен = Неопределено Тогда
		Токен = НовыйТокенДоступаAPI(ВнутреннийНомер, Ошибка);
	КонецЕсли;
	
	Возврат Токен;
	
КонецФункции

Функция АктуальныйТокенДоступаAPI(ВнутреннийНомер)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.сфпТокеныДоступаAPIТелефонии.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВнутреннийНомер = ВнутреннийНомер;
	МенеджерЗаписи.Прочитать();
	
	Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.Токен) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если МенеджерЗаписи.СрокДействия < ТекущаяДатаСеанса() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат МенеджерЗаписи.Токен;
	
КонецФункции

Функция НовыйТокенДоступаAPI(ВнутреннийНомер, Ошибка)
	
	ДанныеАвторизации = ЗапроситьТокенДоступа(ВнутреннийНомер, Ошибка);
	
	Если ЗначениеЗаполнено(Ошибка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДанныеАвторизации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаписатьТокенДоступа(ВнутреннийНомер, ДанныеАвторизации.access_token, ТекущаяДатаСеанса() 
		+ ДанныеАвторизации.expires_in);
	
	Возврат ДанныеАвторизации.access_token;
	
КонецФункции

Функция ЗапроситьТокенДоступа(ВнутреннийНомер, Ошибка)
	
	api_key = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии().КлючДляАвторизацииАТСЯндекс;
	
	URL = сфпСофтФонПроСервер.КорневойАдресАТС() + "api/v2/auth/token";
	СтруктураURI = сфпОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить("grant_type=client_credentials");
	ПараметрыЗапроса.Добавить("client_id=" + api_key);
	ПараметрыЗапроса.Добавить("client_secret=" + ВнутреннийНомер);
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPЗапрос.Заголовки.Вставить("x-api-key", api_key);
	HTTPЗапрос.УстановитьТелоИзСтроки(сфпОбщегоНазначения.сфпСтрСоединить(ПараметрыЗапроса, "&"),
		КодировкаТекста.UTF8,
		ИспользованиеByteOrderMark.НеИспользовать);
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, , , Прокси, 60,
		Новый ЗащищенноеСоединениеOpenSSL);
	
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТелоЗапроса = РаскодироватьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	ПараметрыЗапроса = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Если ПараметрыЗапроса.Свойство("error") И ПараметрыЗапроса.error = "invalid_client" Тогда
		Ошибка = "НекорректныйВнутреннийНомерПользователя";
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Процедура ЗаписатьТокенДоступа(ВнутреннийНомер, Токен, СрокДействия)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.сфпТокеныДоступаAPIТелефонии.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВнутреннийНомер = ВнутреннийНомер;
	МенеджерЗаписи.Токен = Токен;
	МенеджерЗаписи.СрокДействия = СрокДействия;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Функция ДанныеЗвонка(ИдентификаторЗвонка, ВнутреннийНомер, Ошибка)
	
	Токен = ТокенДоступаAPI(ВнутреннийНомер, Ошибка);
	
	Если ЗначениеЗаполнено(Ошибка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Токен = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Не удалось авторизоваться.';en='Failed to log in.'");
	КонецЕсли;
	
	URL = сфпСофтФонПроСервер.КорневойАдресАТС() + "api/v2/calls/" + ИдентификаторЗвонка;
	СтруктураURI = сфпОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "bearer " + Токен);
	HTTPЗапрос.Заголовки.Вставить("x-api-key",
		 сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии().КлючДляАвторизацииАТСЯндекс);
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, , , Прокси, 60,
		Новый ЗащищенноеСоединениеOpenSSL);
	
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("GET", HTTPЗапрос);
		
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТелоЗапроса = РаскодироватьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	ПараметрыЗапроса = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Если ПараметрыЗапроса.Свойство("data") Тогда
		Если ПараметрыЗапроса.data.Свойство("callRecord") Тогда
			ДанныеЗаписи = ПараметрыЗапроса.data.callRecord;
			Возврат ДанныеЗаписи.Uri;
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru='Телефония';en='Telephony'");
	
КонецФункции

Процедура ЗаписатьЗапросВЖурналРегистрации(ВложенноеИмяСобытия, Текст, УровеньЖР = Неопределено) Экспорт
	
	Если УровеньЖР = Неопределено Тогда
		УровеньЖР = УровеньЖурналаРегистрации.Примечание;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации() + "." + ВложенноеИмяСобытия,
		УровеньЖР, , ,
		Текст);
	
КонецПроцедуры

Функция НастройкиИнтеграцииЗаполнены(АТС, НастройкиТелефонии)
	
	Если АТС = Перечисления.сфпДоступныеАТС.СофтФонWebModule Тогда
		Возврат ЗначениеЗаполнено(НастройкиТелефонии.АдресОблачнойАТС)
			И ЗначениеЗаполнено(НастройкиТелефонии.vpbx_api_key)
			И ЗначениеЗаполнено(НастройкиТелефонии.vpbx_api_salt);
			
	ИначеЕсли АТС = Перечисления.сфпДоступныеАТС.MangoOffice Тогда
		Возврат ЗначениеЗаполнено(НастройкиТелефонии.vpbx_api_key)
			И ЗначениеЗаполнено(НастройкиТелефонии.vpbx_api_salt);
		
	ИначеЕсли АТС = Перечисления.сфпДоступныеАТС.Яндекс Тогда
		Возврат ЗначениеЗаполнено(НастройкиТелефонии.КлючДляАвторизацииАТСЯндекс);
		
	ИначеЕсли АТС = Перечисления.сфпДоступныеАТС.Билайн Тогда
		Возврат ЗначениеЗаполнено(НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);
		
	ИначеЕсли АТС = Перечисления.сфпДоступныеАТС.Ростелеком Тогда
		Возврат ЗначениеЗаполнено(НастройкиТелефонии.vpbx_api_key)
			И ЗначениеЗаполнено(НастройкиТелефонии.vpbx_api_salt)
			И ЗначениеЗаполнено(НастройкиТелефонии.Domain);
			
	ИначеЕсли АТС = Перечисления.сфпДоступныеАТС.UIS Тогда
		Возврат ЗначениеЗаполнено(НастройкиТелефонии.КлючДляАвторизацииАТСUIS);
		
	Иначе
		Возврат ЗначениеЗаполнено(НастройкиТелефонии.АдресОблачнойАТС)
			И ЗначениеЗаполнено(НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС)
			И ЗначениеЗаполнено(НастройкиТелефонии.КлючДляАвторизацииВИБ);	
	КонецЕсли;
	
КонецФункции

// Процедура добавляет в массив структуру действий
//
// Параметры:
//	МассивДействий	- Массив	- Массив доступных действий
//	Наименование	- Строка	- Наименование действия
//	Действие		- Строка	- Имя процедуры-обработчика действия, процедура должна располагаться в этом модуле
//
Процедура сфпДобавитьДействие(МассивДействий, Наименование, Действие)
	СтруктураДействия = Новый Структура;
	СтруктураДействия.Вставить("Наименование",	Наименование);
	СтруктураДействия.Вставить("Действие",		Действие);
	МассивДействий.Добавить(СтруктураДействия);
КонецПроцедуры // сфпДобавитьДействие()

#КонецОбласти
