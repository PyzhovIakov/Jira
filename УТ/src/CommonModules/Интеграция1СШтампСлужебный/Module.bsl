
#Область СлужебныйПрограммныйИнтерфейс

// См. Интеграция1СШтамп.РезультатДобавленияШтамповВДокумент
Функция РезультатУстановкиШтамповВДокумент(
	Знач ПараметрыУстановкиШтампов,
	Знач ПользовательскийСценарий,
	Знач ТаймаутПолученияСтатусаВыполненияЗаданияВСервисе = Неопределено) Экспорт
	
	КонтекстПроверки = "Интеграция1СШтампСлужебный.РезультатУстановкиШтамповВДокумент";
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		КонтекстПроверки,
		"ПараметрыУстановкиШтампов",
		ПараметрыУстановкиШтампов,
		Тип("Структура"));
		
	МассивТиповТаймаут = Новый Массив;
	МассивТиповТаймаут.Добавить(Тип("Неопределено"));
	МассивТиповТаймаут.Добавить(Тип("Число"));
		
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		КонтекстПроверки,
		"ТаймаутПолученияСтатусаВыполненияЗаданияВСервисе",
		ТаймаутПолученияСтатусаВыполненияЗаданияВСервисе,
		МассивТиповТаймаут);
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		КонтекстПроверки,
		"ПользовательскийСценарий",
		ПользовательскийСценарий,
		Тип("Строка"));
		
	КоличествоСимволов = Интеграция1СШтампСлужебныйКлиентСервер.МаксимальноеКоличествоСимволовВОписанииПользовательскогоСценария();
		
	ТекстОшибки = СтрШаблон(
						Нстр("ru ='Описание пользовательского сценария превышает %1 символов.'",
							ОбщегоНазначения.КодОсновногоЯзыка()),
							КоличествоСимволов);
		
	ОбщегоНазначенияКлиентСервер.Проверить(
		СтрДлина(ПользовательскийСценарий) <= КоличествоСимволов,
		ТекстОшибки,
		КонтекстПроверки);
		
	ТекстОшибки = Нстр("ru ='Не указано расширение документа.'",
							ОбщегоНазначения.КодОсновногоЯзыка());
		
	ОбщегоНазначенияКлиентСервер.Проверить(
		Не ПустаяСтрока(ПараметрыУстановкиШтампов.ПараметрыДокумента.Расширение),
		ТекстОшибки,
		КонтекстПроверки);
		
	ТекстОшибки = Нстр("ru ='Не указаны двоичные данные документа.'",
							ОбщегоНазначения.КодОсновногоЯзыка());
		
	ОбщегоНазначенияКлиентСервер.Проверить(
		ЗначениеЗаполнено(ПараметрыУстановкиШтампов.ПараметрыДокумента.ДвоичныеДанные),
		ТекстОшибки,
		КонтекстПроверки);
		
	ТекстОшибки = Нстр("ru ='Не указаны данные картинок штампов.'",
							ОбщегоНазначения.КодОсновногоЯзыка());
		
	ОбщегоНазначенияКлиентСервер.Проверить(
		ЗначениеЗаполнено(ПараметрыУстановкиШтампов.ПараметрыШтампов.ПоПозиционированию) Или
		ЗначениеЗаполнено(ПараметрыУстановкиШтампов.ПараметрыШтампов.ПоТегам),
		ТекстОшибки,
		КонтекстПроверки);
		
	Если ЗначениеЗаполнено(ПараметрыУстановкиШтампов.ПараметрыШтампов.ПоТегам) Тогда
		
		ТекстОшибки = СтрШаблон(
							Нстр("ru ='Для документа с расширением %1 установка штампов по тегам не поддерживается.'",
								ОбщегоНазначения.КодОсновногоЯзыка()),
								ПараметрыУстановкиШтампов.ПараметрыДокумента.Расширение);
			
		ОбщегоНазначенияКлиентСервер.Проверить(
			Интеграция1СШтампСлужебныйКлиентСервер.РасширениеОсновногоФайлаПоддерживаетШтампированиеПоТегам(
				ПараметрыУстановкиШтампов.ПараметрыДокумента.Расширение),
			ТекстОшибки,
			КонтекстПроверки);
			
	КонецЕсли;
	
	Если НРег(ПараметрыУстановкиШтампов.ПараметрыРезультата.ФорматРезультата) <> "pdf" Тогда
	
		ТекстОшибки = СтрШаблон(
							Нстр("ru ='Для документа с расширением %1 получение результата в исходном формате не поддерживается.'",
								ОбщегоНазначения.КодОсновногоЯзыка()),
								ПараметрыУстановкиШтампов.ПараметрыДокумента.Расширение);
			
		ОбщегоНазначенияКлиентСервер.Проверить(
			Интеграция1СШтампСлужебныйКлиентСервер.РасширениеОсновногоФайлаПоддерживаетШтампированиеПоТегам(
				ПараметрыУстановкиШтампов.ПараметрыДокумента.Расширение),
			ТекстОшибки,
			КонтекстПроверки);
			
	КонецЕсли;
	
	// Создаем задание в очередь в сервисе
	ОтветСервиса = РезультатВыполненияЗапросаСоздатьЗаданиеВСервисеНаУстановкуШтамповВДокумент(ПараметрыУстановкиШтампов, ПользовательскийСценарий);
	
	Результат = НовыйРезультатОбработкиДокумента();
	
	Если Не ОтветСервиса.КодСостояния = Интеграция1СШтампСлужебныйКлиентСервер.КодСостоянияОжидание() Тогда
		Результат.ЕстьОшибки = Истина;
		Результат.ИнформацияОбОшибках = ОтветСервиса;
		Возврат Результат;
	КонецЕсли;
		
	Интервал     = ОтветСервиса.Интервал;
	URLРедиректа = ОтветСервиса.URLРедиректа;
	
	ДлительностьВыполненияЗапроса = ТаймаутПолученияСтатусаВыполненияЗаданияВСервисе;
	МаксимальныйТаймаут = МаксимальнаяДлительностьВыполненияЗапроса();
	
	Если Не ЗначениеЗаполнено(ТаймаутПолученияСтатусаВыполненияЗаданияВСервисе)
		Или	ТаймаутПолученияСтатусаВыполненияЗаданияВСервисе > МаксимальныйТаймаут Тогда
				ДлительностьВыполненияЗапроса = МаксимальныйТаймаут;
	КонецЕсли;
	
	ГраничноеВремя = ТекущаяДатаСеанса() + ДлительностьВыполненияЗапроса;
	ОтветСервиса = РезультатПолученияСтатусаВыполненияЗадания(ГраничноеВремя, URLРедиректа, Интервал);
	
	Если ОтветСервиса = Неопределено Тогда
		
		ОписаниеОшибки = НСтр("ru='Превышена длительность ожидания получения результата добавления штампов в документ.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		Результат.ЕстьОшибки = Истина;
		Результат.ИнформацияОбОшибках.ТекстОшибки = ОписаниеОшибки;
				
		Возврат Результат;
		
	КонецЕсли;
	
	Если Не ОтветСервиса.КодСостояния = Интеграция1СШтампСлужебныйКлиентСервер.КодСостоянияВыполнено()
		И Не ОтветСервиса.КодСостояния = Интеграция1СШтампСлужебныйКлиентСервер.КодСостоянияРедиректаЗапроса() Тогда
			Результат.ЕстьОшибки = Истина;
			Результат.ИнформацияОбОшибках = ОтветСервиса;
		Возврат Результат;
	КонецЕсли;
	
	URLРедиректа = ОтветСервиса.URLРедиректа;
	
	ОтветСервиса = РезультатВыполненияЗапросаПолучитьРезультатВыполненияЗаданияУстановкиШтамповВДокумент(
		URLРедиректа);
	
	Если ОтветСервиса.КодСостояния <> Интеграция1СШтампСлужебныйКлиентСервер.КодСостоянияСоздано() Тогда
		
		Результат.ЕстьОшибки = Истина;
		Результат.ИнформацияОбОшибках = ОтветСервиса;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтветСервиса.Данные) Тогда
		
		ОписаниеОшибки = НСтр("ru='Получен пустой результат ответа.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(НСтр("ru='Взаимодействие с сервисом 1С:Штамп.'", 
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ОписаниеОшибки);
		
		Результат.ЕстьОшибки = Истина;
		Результат.ИнформацияОбОшибках = ОтветСервиса;
		Результат.ИнформацияОбОшибках.ТекстОшибки = ОписаниеОшибки;
				
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.ЕстьРезультат              = Истина;
	Результат.ИнформацияОбОшибках        = ОтветСервиса;
	Результат.ДанныеФайла.ДвоичныеДанные = ИзвлеченнныйФайлИзАрхива(ОтветСервиса.Данные);
	Результат.ДанныеФайла.Расширение     = ПараметрыУстановкиШтампов.ПараметрыРезультата.ФорматРезультата;
	
	Возврат Результат;
	
КонецФункции

// См. Интеграция1СШтампПовтИсп.ПараметрыСоединения
Функция ПараметрыСоединения(Знач АдресСервиса) Экспорт
	
	Если Не ЗначениеЗаполнено(АдресСервиса) Тогда
		ВызватьИсключение НСтр("ru = 'Не указан адрес сервиса'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
		
	Результат = НовыеПараметрыСоединения(АдресСервиса, 443, Истина);
	Результат.Аутентификация = Ложь;
	Результат.Таймаут = 120;

	Возврат Результат;

КонецФункции

// См. Интеграция1СШтампПовтИсп.СлужебнаяИнформация
Функция СлужебнаяИнформация() Экспорт
	
	Информация = Новый Структура;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Информация.Вставить("ОперационнаяСистема" , Строка(СистемнаяИнформация.ТипПлатформы));
	Информация.Вставить("ВерсияПриложения"    , СистемнаяИнформация.ВерсияПриложения);
	Информация.Вставить("ИмяКонфигурации"     , Метаданные.Имя);
	Информация.Вставить("ВерсияКонфигурации"  , Метаданные.Версия);
	Информация.Вставить("ИдентификаторИБ"     , СтандартныеПодсистемыСервер.ИдентификаторИнформационнойБазы());
	Информация.Вставить("ВерсияБЭД"           , ОбновлениеИнформационнойБазыБЭД.ВерсияБиблиотеки());
	
	Возврат Информация;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область МетодыОбращенияКСервису

// Возвращает результат создания задания в очереди сервиса.
//
// Параметры:
//  ПараметрыДобавленияШтампов - см. Интеграция1СШтампКлиентСервер.НовыеПараметрыДобавленияШтамповВДокумент.
//  ПользовательскийСценарий   - Строка(250) - Краткое информативное описание пользовательского сценария.
// 
// Возвращаемое значение:
//  См. НовыйРезультатВыполненияЗапроса
//
Функция РезультатВыполненияЗапросаСоздатьЗаданиеВСервисеНаУстановкуШтамповВДокумент(
	Знач  ПараметрыДобавленияШтампов, Знач ПользовательскийСценарий)
	
	ДвоичныеДанные = ДвоичныеДанныеАрхиваСФайламиДляШтампированияДокумента(ПараметрыДобавленияШтампов);
	Результат = РезультатВыполненияПрикладныхПроверокПередОтправкойЗапроса(ДвоичныеДанные);
	
	Если Не Результат.КодСостояния = Интеграция1СШтампСлужебныйКлиентСервер.КодСостоянияВыполнено() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗапросКСервису = ЗапросКСервисуДобавитьШтампыВДокумент(ДвоичныеДанные, ПользовательскийСценарий);
	Результат = ВыполнитьЗапрос(ЗапросКСервису);
	
	Возврат Результат;
	
КонецФункции

// Возвращает статус задания в сервисе.
//
// Параметры:
//  АдресКРесурсу - Строка - URL для выполнения rest запроса;
// 
// Возвращаемое значение:
//  См. НовыйРезультатВыполненияЗапроса
//
Функция РезультатВыполненияЗапросаПолучитьСтатусЗаданияУстановкиШтамповВДокумент(Знач АдресКРесурсу)
	
	ЗапросКСервису = ЗапросКСервисуПолучитьСтатусВыполнения(АдресКРесурсу);
	Результат = ВыполнитьЗапрос(ЗапросКСервису);
	
	Возврат Результат;
	
КонецФункции

// Возвращает результат выполнения задания в сервисе.
//
// Параметры:
//  АдресКРесурсу - Строка - URL для выполнения rest запроса;
// 
// Возвращаемое значение:
//  См. НовыйРезультатВыполненияЗапроса
//
Функция РезультатВыполненияЗапросаПолучитьРезультатВыполненияЗаданияУстановкиШтамповВДокумент(Знач АдресКРесурсу)
	
	ЗапросКСервису = ЗапросКСервисуПолучитьРезультатВыполнения(АдресКРесурсу);
	Результат = ВыполнитьЗапрос(ЗапросКСервису);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВыполнениеЗапросов

Функция ЗапросКСервисуДобавитьШтампыВДокумент(Знач ДвоичныеДанные, Знач ПользовательскийСценарий)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.СтрокаЗапроса            = АдресЗапросаДобавитьШтамп();
	ЗапросСервиса.ТипПередаваемогоКонтента = ТипИсходящегоКонтентаДанныеДокументаИШтампов();
	ЗапросСервиса.Метод                    = "POST";
	ЗапросСервиса.Данные                   = ДвоичныеДанные;
	ЗапросСервиса.ДопустимыеКодыСостояния.Добавить(Интеграция1СШтампСлужебныйКлиентСервер.КодСостоянияОжидание());
		
	Информация = Интеграция1СШтампПовтИсп.СлужебнаяИнформация();
	
	ЗапросСервиса.Заголовки.Вставить(ИмяЗаголовкаСлужебныйВерсияПлатформы()    , Информация.ВерсияПриложения);
	ЗапросСервиса.Заголовки.Вставить(ИмяЗаголовкаСлужебныйИмяКонфигурации()    , СтроковыеФункции.СтрокаЛатиницей(Информация.ИмяКонфигурации));
	ЗапросСервиса.Заголовки.Вставить(ИмяЗаголовкаСлужебныйВерсияКонфигурации() , Информация.ВерсияКонфигурации);
	ЗапросСервиса.Заголовки.Вставить(ИмяЗаголовкаСлужебныйВерсияБЭД()          , Информация.ВерсияБЭД);
	ЗапросСервиса.Заголовки.Вставить(ИмяЗаголовкаСлужебныйИдентификаторИБ()    , Информация.ИдентификаторИБ);
	ЗапросСервиса.Заголовки.Вставить(ИмяЗаголовкаСлужебныйОперационнаяСистема(), Информация.ОперационнаяСистема);
	
	Если Не ПустаяСтрока(ПользовательскийСценарий) Тогда
		ЗапросСервиса.Заголовки.Вставить(
			ИмяЗаголовкаСлужебныйСценарийИспользования(),
			СтроковыеФункции.СтрокаЛатиницей(ПользовательскийСценарий));
	КонецЕсли;
	
	ЗапросСервиса.Наименование =
		НСтр("ru = 'Добавление штампов в документ в сервисе 1С:Штамп'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросКСервисуПолучитьСтатусВыполнения(Знач АдресОбращения)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.СтрокаЗапроса            = АдресОбращения;
	ЗапросСервиса.Метод                    = "GET";
	ЗапросСервиса.ДопустимыеКодыСостояния.Добавить(Интеграция1СШтампСлужебныйКлиентСервер.КодСостоянияВыполнено());
	ЗапросСервиса.ДопустимыеКодыСостояния.Добавить(Интеграция1СШтампСлужебныйКлиентСервер.КодСостоянияРедиректаЗапроса());
	ЗапросСервиса.Наименование =
		НСтр("ru = 'Получение статуса добавления штампов в документ в сервисе 1С:Штамп'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросКСервисуПолучитьРезультатВыполнения(Знач АдресОбращения)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.СтрокаЗапроса            = АдресОбращения;
	ЗапросСервиса.ТипВозвращаемогоКонтента = ТипВходящегоКонтентаРезультатШтампированияАрхивСДокументом();
	ЗапросСервиса.Метод                    = "GET";
	ЗапросСервиса.ДопустимыеКодыСостояния.Добавить(Интеграция1СШтампСлужебныйКлиентСервер.КодСостоянияСоздано());
	ЗапросСервиса.Наименование =
		НСтр("ru = 'Получение результата добавления штампов в документ в сервисе 1С:Штамп'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ВыполнитьЗапрос(Знач ЗапросСервиса)
	
	Отказ = Ложь;
	ТекстОшибки  ="";
	
	РезультатВыполнения = НовыйРезультатВыполненияЗапроса();
		
	// Установка параметров соединения.
	
	ПараметрыСоединения = Интеграция1СШтампПовтИсп.ПараметрыСоединения(ЗапросСервиса.АдресСервиса);
	
	// Установка времени ожидания ответа.
	Если ЗапросСервиса.Свойство("Таймаут") И ЗапросСервиса.Таймаут <> 0 Тогда
		Таймаут = ЗапросСервиса.Таймаут;
	Иначе
		Таймаут = ПараметрыСоединения.Таймаут;
	КонецЕсли;
	
	// Инициализация соединения с сервисом.
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.Сервер, ПараметрыСоединения.Порт,,,
			ПараметрыСоединения.Прокси, Таймаут, ПараметрыСоединения.ЗащищенноеСоединение);
	Исключение
		ТекстОшибки = НСтр("ru='Отсутствует соединение с сервисом 1С:Штамп. Подробности см. в журнале регистрации.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		РезультатВыполнения.ТекстОшибки  = ЗафиксироватьОшибкуВЗапросе(ПараметрыСоединения, ЗапросСервиса, ТекстОшибки);
		РезультатВыполнения.КодСостояния = Интеграция1СШтампСлужебныйКлиентСервер.КодСостоянияСервисНеОтвечает();
		Возврат РезультатВыполнения;
	КонецПопытки;

	// Установка параметров запроса.
	HTTPЗапрос = Новый HTTPЗапрос(ЗапросСервиса.СтрокаЗапроса, ЗапросСервиса.Заголовки);
	
	// Установка заголовков
	Если ЗначениеЗаполнено(ЗапросСервиса.ТипПередаваемогоКонтента) Тогда
		ИмяЗаголовкаТипПередаваемогоКонтента = НРег(ИмяЗаголовкаТипПередаваемогоКонтента());
		HTTPЗапрос.Заголовки.Вставить(ИмяЗаголовкаТипПередаваемогоКонтента,
			ЗапросСервиса.ТипПередаваемогоКонтента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗапросСервиса.ТипВозвращаемогоКонтента) Тогда
		ИмяЗаголовкаТипВозвращаемогоКонтента = НРег(ИмяЗаголовкаТипВозвращаемогоКонтента());
		HTTPЗапрос.Заголовки.Вставить(ИмяЗаголовкаТипВозвращаемогоКонтента,
			ЗапросСервиса.ТипВозвращаемогоКонтента);
	КонецЕсли;
		
	// Установка тела запроса.
	Если ЗначениеЗаполнено(ЗапросСервиса.Данные) Тогда
		Если ТипЗнч(ЗапросСервиса.Данные) = Тип("ДвоичныеДанные") Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ЗапросСервиса.Данные);
		Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(ЗапросСервиса.Данные, КодировкаТекста.UTF8,
				ИспользованиеByteOrderMark.НеИспользовать);
		КонецЕсли;
	КонецЕсли;
	
	// Выполнение запроса
	Попытка
		HTTPОтвет = Соединение.ВызватьHTTPМетод(ЗапросСервиса.Метод, HTTPЗапрос);
	Исключение
		ПодробноеОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ТекстОшибки  = ЗафиксироватьОшибкуВЗапросе(Соединение, ЗапросСервиса, ПодробноеОписаниеОшибки, Отказ);
		РезультатВыполнения.КодСостояния = Интеграция1СШтампСлужебныйКлиентСервер.КодСостоянияСервисНеОтвечает();
		Возврат РезультатВыполнения;
	КонецПопытки;
	
	// Разбор тела ответа
	ОбработатьОтветСервиса(HTTPОтвет, ЗапросСервиса, РезультатВыполнения, Отказ);
	
	Если Не ПустаяСтрока(РезультатВыполнения.ТекстОшибки) Тогда
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(РезультатВыполнения.ТекстОшибки, ИмяПодсистемы());
	КонецЕсли;
	
	Если Отказ Тогда
		РезультатВыполнения.ТекстОшибки = ЗафиксироватьОшибкуВЗапросе(ПараметрыСоединения, ЗапросСервиса, РезультатВыполнения.ТекстОшибки);
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция НовыйЗапросСервиса()
	
	ЗапросСервиса = Новый Структура;
	ЗапросСервиса.Вставить("АдресСервиса"                 , АдресСервиса());
	ЗапросСервиса.Вставить("Наименование"                 , "");
	ЗапросСервиса.Вставить("СтрокаЗапроса"                , "");
	ЗапросСервиса.Вставить("Метод"                        , "");
	ЗапросСервиса.Вставить("Данные"                       , Неопределено);
	ЗапросСервиса.Вставить("Ошибки"                       , Новый Соответствие);
	ЗапросСервиса.Вставить("БлокироватьСообщенияОбОшибках", Ложь);
	ЗапросСервиса.Вставить("Заголовки"                    , Новый Соответствие);
	ЗапросСервиса.Вставить("ТипПередаваемогоКонтента"     , "");
	ЗапросСервиса.Вставить("ТипВозвращаемогоКонтента"     , "");
	ЗапросСервиса.Вставить("ДопустимыеКодыСостояния"      , Новый Массив());
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ДвоичныеДанныеАрхиваСФайламиДляШтампированияДокумента(Знач ПараметрыДобавленияШтампов)
	
	КорневойКаталог = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(КорневойКаталог);
	
	ДвоичныеДанныеДокумента = ПараметрыДобавленияШтампов.ПараметрыДокумента.ДвоичныеДанные;
	РасширениеДокумента     = ПараметрыДобавленияШтампов.ПараметрыДокумента.Расширение;
	
	ИмяФайлаДокумента = СтрШаблон(ШаблонНаименованияФайлаДокумента(), РасширениеДокумента);
		
	ПутьКДокументу = КорневойКаталог
		+ ПолучитьРазделительПути()
		+ ИмяФайлаДокумента;
		
	Попытка
		ЗаписатьДвоичныеДанныеВФайл(ДвоичныеДанныеДокумента, ПутьКДокументу);
	Исключение
		ФайловаяСистема.УдалитьВременныйФайл(КорневойКаталог);
		ВызватьИсключение;
	КонецПопытки;
	
	ИмяКаталогаШтампов = КорневойКаталог
		+ ПолучитьРазделительПути()
		+ НаименованиеКаталогаСКартинкамиШтамповВнутриАрхива();
		
	СоздатьКаталог(ИмяКаталогаШтампов);
		
	ТаблицаШтампов = Новый ТаблицаЗначений;
	
	ТаблицаШтампов.Колонки.Добавить("ХешСумма"       , Новый ОписаниеТипов("Строка"));
	ТаблицаШтампов.Колонки.Добавить("ИмяФайла"       , Новый ОписаниеТипов("Строка"));
	ТаблицаШтампов.Колонки.Добавить("ДвоичныеДанные" , Новый ОписаниеТипов("ДвоичныеДанные"));
	ТаблицаШтампов.Колонки.Добавить("Расширение"     , Новый ОписаниеТипов("Строка"));
	
	ПараметрыДобавленияШтамповСлужебная = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыДобавленияШтампов);
	
	ДобавитьШтампыВТаблицу(ПараметрыДобавленияШтамповСлужебная.ПараметрыШтампов.ПоПозиционированию, ТаблицаШтампов);
	
	Для Каждого ПараметрыШтамповПоТегам Из ПараметрыДобавленияШтамповСлужебная.ПараметрыШтампов.ПоТегам Цикл
		ДобавитьШтампыВТаблицу(ПараметрыШтамповПоТегам.Штампы, ТаблицаШтампов);
	КонецЦикла;
	
	ТаблицаШтампов.Сортировать("ХешСумма Возр");
	
	Счетчик = 1;
	
	Для Каждого СтрокаШтампа Из ТаблицаШтампов Цикл
		
		ДвоичныеДанныеКартинки = СтрокаШтампа.ДвоичныеДанные;
		РасширениеКартинки     = СтрокаШтампа.Расширение;
		
		ИмяФайла = СтрШаблон(ШаблонНаименованияКартинкиШтампа(), Счетчик, РасширениеКартинки);
		
		ПутьКФайлуШтампа = ИмяКаталогаШтампов
		+ ПолучитьРазделительПути()
		+ ИмяФайла;
		
		СтрокаШтампа.ИмяФайла = НаименованиеКаталогаСКартинкамиШтамповВнутриАрхива()
			+ ПолучитьРазделительПути() 
			+ ИмяФайла;
			
		Попытка
			ЗаписатьДвоичныеДанныеВФайл(ДвоичныеДанныеКартинки, ПутьКФайлуШтампа);
		Исключение
			ФайловаяСистема.УдалитьВременныйФайл(КорневойКаталог);
			ВызватьИсключение;
		КонецПопытки;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	ФайлИнструкций = ФайлИнструкцийУстановкиШтамповВДокумент(ТаблицаШтампов, ПараметрыДобавленияШтамповСлужебная, ИмяФайлаДокумента, РасширениеДокумента);
	
	ИмяФайлаИнструкций = КорневойКаталог
		+ ПолучитьРазделительПути()
		+ НаименованиеФайлаИнструкций();
		
	Попытка
		ЗаписатьДвоичныеДанныеВФайл(ФайлИнструкций, ИмяФайлаИнструкций);
	Исключение
		ФайловаяСистема.УдалитьВременныйФайл(КорневойКаталог);
		ВызватьИсключение;
	КонецПопытки;
		
	ЗаписьZipФайла = Новый ЗаписьZipФайла();
	ЗаписьZipФайла.Добавить(КорневойКаталог + ПолучитьРазделительПути() + "*",
		РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
		РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	
	ZIPАрхив = ЗаписьZipФайла.ПолучитьДвоичныеДанные(,,, УровеньСжатияZIP.Максимальный);
	
	ФайловаяСистема.УдалитьВременныйФайл(КорневойКаталог);
	
	Возврат ZIPАрхив;
	
КонецФункции

Процедура ДобавитьШтампыВТаблицу(Знач Штампы, ТаблицаШтампов)
	
	Для Каждого ДанныеШтампа Из Штампы Цикл
		
		ДвоичныеДанные = ДанныеШтампа.ПараметрыШтампа.ДвоичныеДанные;
		ХешСумма = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ДвоичныеДанные, ХешФункция.MD5);
		
		ДанныеШтампа.ПараметрыШтампа.Вставить("ХешСумма", ХешСумма);
		
		Отбор = Новый Структура("ХешСумма", ХешСумма);
		МассивСтрок = ТаблицаШтампов.НайтиСтроки(Отбор);
		
		Если МассивСтрок.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка = ТаблицаШтампов.Добавить();
		Строка.ХешСумма       = ХешСумма;
		Строка.ДвоичныеДанные = ДвоичныеДанные;
		Строка.Расширение     = ДанныеШтампа.ПараметрыШтампа.Расширение;
		
	КонецЦикла;

КонецПроцедуры

Функция ШаблонНаименованияКартинкиШтампа()
	
	Возврат "stamp%1.%2";
	
КонецФункции

Функция ШаблонНаименованияФайлаДокумента()
	
	Возврат "document.%1";
	
КонецФункции

Функция НаименованиеКаталогаСКартинкамиШтамповВнутриАрхива()
	
	Возврат "stamps";
	
КонецФункции

Функция НаименованиеФайлаИнструкций()
	
	Возврат "meta.json";
	
КонецФункции

Функция ФайлИнструкцийУстановкиШтамповВДокумент(Знач ТаблицаШтампов, Знач ПараметрыДобавленияШтампов, Знач ИмяФайлаДокумента, Знач РасширениеДокумента)
	
	СтруктураТелаЗапроса = НоваяСтруктураТелаJSON();
	
	СтруктураТелаЗапроса.document.path      = ИмяФайлаДокумента;
	СтруктураТелаЗапроса.document.extension = РасширениеДокумента;
	
	СловарьЗначенийРазмещения = СловарьЗначенийРазмещения();
	СловарьПравилРасположений = СловарьПравилРасположений();
	СловарьВариантовВставки   = СловарьВариантовВставки();
	
	МассивСвойствШтамповПоПозиционированию = Новый Массив;
	МассивСвойствШтамповПоТегам            = Новый Массив;
	
	Для Каждого Данные Из ПараметрыДобавленияШтампов.ПараметрыШтампов.ПоПозиционированию Цикл
		
		ПараметрыШтампа = Данные.ПараметрыШтампа;
		
		Отбор = Новый Структура("ХешСумма", ПараметрыШтампа.ХешСумма);
		МассивСтрок = ТаблицаШтампов.НайтиСтроки(Отбор);
		
		ОбщегоНазначенияКлиентСервер.Проверить(
			МассивСтрок.Количество() = 1,
			НСтр("ru = 'Не удалось сформировать файл инструкций meta по причине: ""Не найдена картинка штампа в служебной таблице ""ТаблицаШтампов""""'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			"Интеграция1СШтампСлужебный.ФайлИнструкцийУстановкиШтамповВДокумент");
		
		НайденнаяСтрока = МассивСтрок[0];
		
		СтруктураСвойствШтампа = НовыеСвойстваВставкиШтампаПоПозиции();
		
		СтруктураСвойствШтампа.file.path      = НайденнаяСтрока.ИмяФайла;
		СтруктураСвойствШтампа.file.extension = ПараметрыШтампа.Расширение;
		
		СтруктураСвойствШтампа.location.sheet.position = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			СловарьЗначенийРазмещения,
			Данные.ПараметрыРазмещения.Расположение);
		
		СтруктураСвойствШтампа.location.sheet.coordinates.top  = Данные.ПараметрыРазмещения.Координаты.Верх;
		СтруктураСвойствШтампа.location.sheet.coordinates.left = Данные.ПараметрыРазмещения.Координаты.Лево;
		СтруктураСвойствШтампа.location.sheet.indentation      = Данные.ПараметрыРазмещения.ОтступОтГраниц;
		
		СтруктураСвойствШтампа.location.pages.rule = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			СловарьПравилРасположений,
			Данные.ПравилаРасположения.ПравилоРасположения);
			
		СтруктураСвойствШтампа.location.pages.number      = Данные.ПравилаРасположения.НомерСтраницы;
		
		СтруктураСвойствШтампа.transformation.coefficient       = Данные.Настройки.КоэффициентИзмененияРазмера;
		СтруктураСвойствШтампа.transformation.transparencyLevel = Данные.Настройки.УровеньПрозрачности;
		
		// Нормализация
		Если Не СтруктураСвойствШтампа.location.sheet.position = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				СловарьЗначенийРазмещения,
				Интеграция1СШтампКлиентСервер.ВариантРасположенияПоКоординатам()) Тогда
					СтруктураСвойствШтампа.location.sheet.Удалить("coordinates");
		КонецЕсли;
		
		Если Не СтруктураСвойствШтампа.location.pages.rule = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				СловарьПравилРасположений,
				Интеграция1СШтампКлиентСервер.ПравилоРасположенияНаКонкретнойСтранице()) Тогда
					СтруктураСвойствШтампа.location.pages.Удалить("number");
		КонецЕсли;
		
		Если Данные.Настройки.КоэффициентИзмененияРазмера = 0 Или Данные.Настройки.КоэффициентИзмененияРазмера = 1 Тогда
			СтруктураСвойствШтампа.transformation.Удалить("coefficient");
		КонецЕсли;
		
		Если Данные.Настройки.УровеньПрозрачности = Интеграция1СШтампСлужебныйКлиентСервер.ЗначениеКоэффициентаПрозрачностиШтампаНепрозрачный() Тогда
			СтруктураСвойствШтампа.transformation.Удалить("transparencyLevel");
		КонецЕсли;
		
		Если СтруктураСвойствШтампа.transformation.Количество() = 0 Тогда
			СтруктураСвойствШтампа.Удалить("transformation");
		КонецЕсли;
	
		МассивСвойствШтамповПоПозиционированию.Добавить(СтруктураСвойствШтампа);
		
	КонецЦикла;
	
	СтруктураТелаЗапроса.stampsByPosition = МассивСвойствШтамповПоПозиционированию;
	
	Для Каждого ПараметрыШтамповПоТегам Из ПараметрыДобавленияШтампов.ПараметрыШтампов.ПоТегам Цикл
		
		ОбщегоНазначенияКлиентСервер.Проверить(
			ЗначениеЗаполнено(ПараметрыШтамповПоТегам.ЗначениеТега),
			НСтр("ru = 'Не удалось сформировать файл инструкций meta по причине: ""Не указано значение тега для установки картинки штампа""'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			"Интеграция1СШтампСлужебный.ФайлИнструкцийУстановкиШтамповВДокумент");
		
		СтруктураСвойствШтампов = НовыеСвойстваРазмещенияШтамповПоТегам();
		
		СтруктураСвойствШтампов.value   = ПараметрыШтамповПоТегам.ЗначениеТега;
		СтруктураСвойствШтампов.replace = ПараметрыШтамповПоТегам.ЗамещатьЗначениеТега;
		
		МассивПараметровШтампов = Новый Массив;
		
		Для Каждого Данные Из ПараметрыШтамповПоТегам.Штампы Цикл
			
			ХешСумма = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(Данные.ПараметрыШтампа.ДвоичныеДанные, ХешФункция.MD5);
			
			Отбор = Новый Структура("ХешСумма", ХешСумма);
			МассивСтрок = ТаблицаШтампов.НайтиСтроки(Отбор);
			
			ОбщегоНазначенияКлиентСервер.Проверить(
				МассивСтрок.Количество() = 1,
				НСтр("ru = 'Не удалось сформировать файл инструкций meta по причине: ""Не найдена картинка штампа в служебной таблице ""ТаблицаШтампов""""'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				"Интеграция1СШтампСлужебный.ФайлИнструкцийУстановкиШтамповВДокумент");
			
			НайденнаяСтрока = МассивСтрок[0];
			
			СтруктураСвойствШтампа = НовыеСвойстваШтампаПриВставкеПоТегам();
			
			СтруктураСвойствШтампа.file.path      = НайденнаяСтрока.ИмяФайла;
			СтруктураСвойствШтампа.file.extension = Данные.ПараметрыШтампа.Расширение;
			
			СтруктураСвойствШтампа.location = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				СловарьВариантовВставки,
				Данные.ВариантВставкиШтампа);
			
			СтруктураСвойствШтампа.transformation.coefficient       = Данные.Настройки.КоэффициентИзмененияРазмера;
			СтруктураСвойствШтампа.transformation.transparencyLevel = Данные.Настройки.УровеньПрозрачности;
			
			// Нормализация
			Если Данные.Настройки.КоэффициентИзмененияРазмера = 0 Или Данные.Настройки.КоэффициентИзмененияРазмера = 1 Тогда
				СтруктураСвойствШтампа.transformation.Удалить("coefficient");
			КонецЕсли;
			
			Если Данные.Настройки.УровеньПрозрачности = Интеграция1СШтампСлужебныйКлиентСервер.ЗначениеКоэффициентаПрозрачностиШтампаНепрозрачный() Тогда
				СтруктураСвойствШтампа.transformation.Удалить("transparencyLevel");
			КонецЕсли;
			
			Если СтруктураСвойствШтампа.transformation.Количество() = 0 Тогда
				СтруктураСвойствШтампа.Удалить("transformation");
			КонецЕсли;
			
			МассивПараметровШтампов.Добавить(СтруктураСвойствШтампа);
			
		КонецЦикла;
		
		СтруктураСвойствШтампов.stamps = МассивПараметровШтампов;
		МассивСвойствШтамповПоТегам.Добавить(СтруктураСвойствШтампов);
		
	КонецЦикла;
	
	СтруктураТелаЗапроса.stampsByTags     = МассивСвойствШтамповПоТегам;
	СтруктураТелаЗапроса.result.extension = ПараметрыДобавленияШтампов.ПараметрыРезультата.ФорматРезультата;
	
	// Нормализация
	Если Не ЗначениеЗаполнено(СтруктураТелаЗапроса.stampsByPosition) Тогда
		СтруктураТелаЗапроса.Удалить("stampsByPosition");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураТелаЗапроса.stampsByTags) Тогда
		СтруктураТелаЗапроса.Удалить("stampsByTags");
	КонецЕсли;
	
	JSONСтрока = ОбщегоНазначенияБЭД.JSONСтрока(СтруктураТелаЗапроса);
	
	Возврат ПолучитьДвоичныеДанныеИзСтроки(JSONСтрока, КодировкаТекста.UTF8, Ложь);
	
КонецФункции

Процедура ЗаписатьДвоичныеДанныеВФайл(Знач ДвоичныеДанные, Знач ПутьКФайлу)
	
	Попытка
		ДвоичныеДанные.Записать(ПутьКФайлу);
	Исключение
		
		ПодробноеОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробноеОписаниеОшибки, ИмяПодсистемы());
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ЗафиксироватьОшибкуВЗапросе(Знач ПараметрыСоединения, Знач ЗапросСервиса,
	Знач ТекстОшибки, ЕстьОшибки = Неопределено)
	
	ЕстьОшибки = Истина;
	ПодробноеОписаниеОшибки = "";
	
	ПредставлениеОшибки = Новый Массив;
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Ошибка взаимодействия с сервисом 1С:Штамп'")));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Хост: %1'"), ПараметрыСоединения.Сервер));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Запрос: %1 %2.'"), ЗапросСервиса.Метод,
		ЗапросСервиса.СтрокаЗапроса));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Текст ошибки: %1'"), ТекстОшибки));
	
	ПодробноеОписаниеОшибки = СтрСоединить(ПредставлениеОшибки, Символы.ПС);

	ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробноеОписаниеОшибки, ИмяПодсистемы());
	
	ПредставлениеОшибкиДляПользователя = НСтр("ru='Произошла ошибка работы с сервисом 1С:Штамп.
										|Подробности см. в журнале регистрации.'");
	
	ОбщегоНазначения.СообщитьПользователю(ПредставлениеОшибкиДляПользователя);

	Возврат ПодробноеОписаниеОшибки;

КонецФункции

Функция ОбработатьОтветСервиса(Знач HTTPОтвет, Знач ЗапросСервиса, Результат, Отказ)
	
	ТекстОшибки = "";
	Результат.КодСостояния = HTTPОтвет.КодСостояния;
	
	Если Не ЗапросВыполненКорректно(ЗапросСервиса, HTTPОтвет, ТекстОшибки) Тогда
		Результат.ТекстОшибки = ТекстОшибки;
		Отказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Если Результат.КодСостояния <> 
		Интеграция1СШтампСлужебныйКлиентСервер.КодСостоянияСоздано() Тогда
			Результат.URLРедиректа = URLРедиректа(HTTPОтвет, ТекстОшибки);
			Результат.Интервал = ИнтервалПовторногоОбращения(HTTPОтвет, ТекстОшибки);
	КонецЕсли;
	
	Если Результат.КодСостояния =  Интеграция1СШтампСлужебныйКлиентСервер.КодСостоянияВыполнено() Или
		Результат.КодСостояния =  Интеграция1СШтампСлужебныйКлиентСервер.КодСостоянияОжидание() Тогда
			Результат.Интервал = ИнтервалПовторногоОбращения(HTTPОтвет, ТекстОшибки);
	КонецЕсли;
	
	Результат.ТекстОшибки = ТекстОшибки;
	Результат.Данные = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросВыполненКорректно(Знач ЗапросСервиса, Знач HTTPОтвет, ТекстОшибки = "")
	
	КодСостояния = HTTPОтвет.КодСостояния;
	
	Если ЗапросСервиса.ДопустимыеКодыСостояния.Количество() = 0
		Или ЗапросСервиса.ДопустимыеКодыСостояния.Найти(КодСостояния) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗапросСервиса.Ошибки.Получить(КодСостояния) <> Неопределено Тогда
		ТекстОшибки = ЗапросСервиса.Ошибки.Получить(КодСостояния);
		Возврат Ложь;
	КонецЕсли;
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	ПодстрокиОшибки = Новый Массив;
	Если ЕстьПодробноеОписаниеОшибки(HTTPОтвет) Тогда
		ОписаниеОшибки = ОбщегоНазначенияБЭД.JSONЗначение(HTTPОтвет.ПолучитьТелоКакПоток());
		
		ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='Код состояния %1 - %2'", КодЯзыка),
			XMLСтрока(КодСостояния), ОписаниеОшибки.title));
		
		ИдентификаторТрассировки = ЗначениеКоллекцииПоАбсолютномуПути(ОписаниеОшибки, "traceId");
		Если ЗначениеЗаполнено(ИдентификаторТрассировки) Тогда
			ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='Идентификатор трассировки: %1'", КодЯзыка),
			ИдентификаторТрассировки));
		КонецЕсли;
		
	Иначе
		ТекстОшибки = ИнтернетСоединениеБЭД.РасшифровкаКодаСостоянияHTTP(КодСостояния);
		Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			Если КодСостояния >= 500 Тогда
				ТекстОшибки = НСтр("ru = 'внутренняя ошибка сервиса'", КодЯзыка);
			ИначеЕсли КодСостояния >= 400 Тогда
				ТекстОшибки = НСтр("ru = 'ошибка параметров запроса'", КодЯзыка);
			Иначе
				ТекстОшибки = НСтр("ru = 'неизвестная ошибка'", КодЯзыка);
			КонецЕсли;
		КонецЕсли;
		
		ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='Код состояния %1 - %2'", КодЯзыка),
			XMLСтрока(КодСостояния), ТекстОшибки));
		
		Тело = "";
		Попытка
			Тело = HTTPОтвет.ПолучитьТелоКакСтроку();
			Если Не ПустаяСтрока(Тело) Тогда
				ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='Тело ответа: %1'", КодЯзыка), Тело));
			КонецЕсли;
		Исключение
			ПодробноеОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробноеОписаниеОшибки, ИмяПодсистемы());
		КонецПопытки;
	КонецЕсли;
	
	ТекстОшибки = СтрСоединить(ПодстрокиОшибки, Символы.ПС);
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьПодробноеОписаниеОшибки(Знач HTTPОтвет)
	
	ИмяЗаголовкаТипВозвращаемогоКонтента = НРег(ИмяЗаголовкаТипВозвращаемогоКонтента());
	Возврат HTTPОтвет.Заголовки.Получить(ИмяЗаголовкаТипВозвращаемогоКонтента) = ТипВходящегоКонтентаОшибка();
	
КонецФункции

Функция URLРедиректа(Знач HTTPОтвет, ТекстОшибки = Неопределено)
	
	ИмяЗаголовкаРедиректа = НРег(ИмяЗаголовкаРедиректа());
	
	Результат = HTTPОтвет.Заголовки.Получить(ИмяЗаголовкаРедиректа);

	Если Результат <> Неопределено Тогда
		Результат = СокрЛП(Результат);
		Если ПустаяСтрока(Результат) Тогда
			Результат = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Если Результат = Неопределено Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка при выполнении запроса %1. Некорректное перенаправление,
				 | отсутствует HTTP-заголовок ответа ""location"".'", ОбщегоНазначения.КодОсновногоЯзыка()), HTTPОтвет);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ИнтервалПовторногоОбращения(Знач HTTPОтвет, ТекстОшибки = Неопределено)
	
	ИмяЗаголовкаПериодОжидания = НРег(ИмяЗаголовкаПериодОжидания());
	Интервал = Интеграция1СШтампСлужебныйКлиентСервер.ЗначениеИнтервалаПовторногоОбращенияКСервисуПоУмолчанию();
	
	Результат = HTTPОтвет.Заголовки.Получить(ИмяЗаголовкаПериодОжидания);
	
	Если Результат = Неопределено Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка при выполнении запроса %1.
				 | Отсутствует HTTP-заголовок ответа ""retry-after"".'", ОбщегоНазначения.КодОсновногоЯзыка()), HTTPОтвет);
		Возврат Интервал;
	Иначе
		Результат = СокрЛП(Результат);
		Если ПустаяСтрока(Результат) Тогда
			Возврат Интервал;
		КонецЕсли;
	КонецЕсли;
	
	ЧисловойТип = Новый ОписаниеТипов("Число");
	Результат = ЧисловойТип.ПривестиЗначение(Результат);
	
	Возврат Результат;
	
КонецФункции

// Возвращает конструктор параметров результата выполнения запроса
//
// Возвращаемое значение:
// 	Структура: 
//    * КодСостояния - Число     - Код состояния http ответа.
//    * Данные       - Структура - Данные ответа сервиса.
//    * URLРедиректа - Строка    - URL адрес для повторного обращения.
//    * Интервал     - Число     - Интервал (в секундах) для повторного обращения к сервису.
//    * ТекстОшибки  - Строка    - Текст ошибки на стороне сервиса.
//
Функция НовыйРезультатВыполненияЗапроса()
	
	Результат = Новый Структура;
	Результат.Вставить("КодСостояния"  , 200);
	Результат.Вставить("Данные"      );
	Результат.Вставить("URLРедиректа"  , "");
	Результат.Вставить("Интервал"      , 0);
	Результат.Вставить("ТекстОшибки"   , "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает конструктор параметров результата выполнения запроса
//
// Возвращаемое значение:
// 	Структура: 
//    * ЕстьОшибки          - Булево         - Признак наличия ошибок.
//    * ИнформацияОбОшибках - см. НовыйРезультатВыполненияЗапроса
//    * ЕстьРезультат       - Булево         - Признак успешного выполнения запроса.
//    * ДвоичныеДанные      - ДвоичныеДанные - Двоичные данные результата.
//
Функция НовыйРезультатОбработкиДокумента() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки"         , Ложь);
	Результат.Вставить("ИнформацияОбОшибках", НовыйРезультатВыполненияЗапроса());
	Результат.Вставить("ЕстьРезультат"      , Истина);
	Результат.Вставить("ДанныеФайла"        , Интеграция1СШтампКлиентСервер.НовыеПараметрыФайла());
	
	Возврат Результат;
	
КонецФункции

Функция РезультатПолученияСтатусаВыполненияЗадания(Знач ГраничноеВремя, Знач URLРедиректа, Знач Интервал)
		
	Пока Истина Цикл
		
		Пауза(Интервал);
		
		Результат = РезультатВыполненияЗапросаПолучитьСтатусЗаданияУстановкиШтамповВДокумент(URLРедиректа);
		
		Если Результат.КодСостояния <> Интеграция1СШтампСлужебныйКлиентСервер.КодСостоянияВыполнено() Тогда
			Прервать;
		КонецЕсли;
		
		Если ГраничноеВремя <= ТекущаяДатаСеанса() Тогда
			ОписаниеОшибки = НСтр("ru='Превышена длительность ожидания получения файла.'");
			ЗаписьЖурналаРегистрации(НСтр("ru='Взаимодействие с сервисом 1С:Штамп.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , ,
				ОписаниеОшибки);
			Возврат Неопределено;
		КонецЕсли;
		
		Таймаут = ТаймаутОжидания();
		Если Интервал > Таймаут Тогда
			Интервал = Таймаут;
		КонецЕсли;
		
		Интервал     = Результат.Интервал;
		URLРедиректа = Результат.URLРедиректа;
		
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПараметрыАдресаКСервису

Функция АдресСервиса()
	
	Возврат "stamp-api.1c.ru";
	
КонецФункции

Функция ИмяПодсистемы()
	
	Возврат ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().СервисШтампированияФайлов;
	
КонецФункции

Функция АдресЗапросаДобавитьШтамп()
	
	Возврат "stamp";
	
КонецФункции 

#КонецОбласти

#Область Словарь

Функция ТипИсходящегоКонтентаДанныеДокументаИШтампов()
	
	Возврат "application/vnd.1cstamp.stamp.v4+zip";
	
КонецФункции

Функция ТипВходящегоКонтентаРезультатШтампированияАрхивСДокументом()
	
	Возврат "application/vnd.1cstamp.stampResult+zip";
	
КонецФункции

Функция ТипВходящегоКонтентаОшибка()
	
	Возврат "application/problem+json";
	
КонецФункции

Функция ИмяЗаголовкаРедиректа()
	
	Возврат "Location";
	
КонецФункции

Функция ИмяЗаголовкаПериодОжидания()
	
	Возврат "Retry-After";
	
КонецФункции

Функция ИмяЗаголовкаТипПередаваемогоКонтента()
	
	Возврат "Content-Type";
	
КонецФункции

Функция ИмяЗаголовкаТипВозвращаемогоКонтента()
	
	Возврат "Accept";
	
КонецФункции

Функция ИмяЗаголовкаСлужебныйВерсияПлатформы()
	
	Возврат "X-vnd-1cstamp-platform-version";
	
КонецФункции

Функция ИмяЗаголовкаСлужебныйИмяКонфигурации()
	
	Возврат "X-vnd-1cstamp-app-name";
	
КонецФункции

Функция ИмяЗаголовкаСлужебныйВерсияКонфигурации()
	
	Возврат "X-vnd-1cstamp-app-version";
	
КонецФункции

Функция ИмяЗаголовкаСлужебныйВерсияБЭД()
	
	Возврат "X-vnd-1cstamp-led-version";
	
КонецФункции

Функция ИмяЗаголовкаСлужебныйСценарийИспользования()
	
	Возврат "X-vnd-1cstamp-scenario";
	
КонецФункции

Функция ИмяЗаголовкаСлужебныйИдентификаторИБ()
	
	Возврат "X-vnd-1cstamp-endpointId";
	
КонецФункции

Функция ИмяЗаголовкаСлужебныйОперационнаяСистема()
	
	Возврат "X-vnd-1cstamp-os";
	
КонецФункции

#КонецОбласти

// Извлекает двоичные данные файла из архива.
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные - Двоичные данные архива.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - Двоичные данные файла в архиве.
//
Функция ИзвлеченнныйФайлИзАрхива(ДвоичныеДанные)
	
	Событие = НСтр("ru = 'Извлечение файла из архива. 1С:Штамп'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Попытка
		
		ЧтениеZip = Новый ЧтениеZipФайла(ДвоичныеДанные.ОткрытьПотокДляЧтения());
		КоличествоФайлов = ЧтениеZip.Элементы.Количество();
		
		Если КоличествоФайлов = 0 Тогда
			ОписаниеОшибки = НСтр(
					"ru = 'Не найдены файлы в архиве.'",
					ОбщегоНазначения.КодОсновногоЯзыка());
					
			ВызватьИсключение ОписаниеОшибки;
			
		КонецЕсли;
		
		Если КоличествоФайлов > 1 Тогда
			ОписаниеОшибки = НСтр(
					"ru = 'Обнаружено более одного файла в архиве.'",
					ОбщегоНазначения.КодОсновногоЯзыка());
					
			ВызватьИсключение ОписаниеОшибки;
			
		КонецЕсли;
		
		ИзвлекаемыйФайл = ЧтениеZip[0];
		
		ИмяФайла = ИзвлекаемыйФайл.Имя;
		Каталог  = ПолучитьИмяВременногоФайла();
		
		ЧтениеZip.Извлечь(ИзвлекаемыйФайл, Каталог);
		ЧтениеZip.Закрыть();
		
	Исключение
		
		ОписаниеОшибки = СтрШаблон(НСтр(
					"ru = 'Не удалось извлечь файл из архива по причине: %1.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
		ЗаписьЖурналаРегистрации(Событие,
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
			
		ВызватьИсключение ОписаниеОшибки;
		
	КонецПопытки;
	
	ДанныеФайла = Новый ДвоичныеДанные(Каталог + ПолучитьРазделительПути() + ИмяФайла);
	
	Событие = НСтр("ru = 'Удаление временных файлов'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Попытка
		УдалитьФайлы(Каталог);
	Исключение
		
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					
		ЗаписьЖурналаРегистрации(Событие,
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
			
	КонецПопытки;

	Возврат ДанныеФайла;
	
КонецФункции

// Возвращает структуру тела запроса JSON.
//
// Возвращаемое значение:
//   Структура: 
//    * document         - см. НоваяСтруктураСвойствФайла
//    * result - Структура - Параметры получения результата:
//      ** extension - Строка - Расширение файла результата.
//    * stampsByPosition - Массив из см. НовыеСвойстваВставкиШтампаПоПозиции.
//    * stampsByTags     - Массив из см. НовыеСвойстваРазмещенияШтамповПоТегам
//
Функция НоваяСтруктураТелаJSON()
	
	СвойстваРезультата = Новый Структура;
	СвойстваРезультата.Вставить("extension", "");
	
	СтруктураТела = Новый Структура;
	
	СтруктураТела.Вставить("document"        , НоваяСтруктураСвойствФайла());
	СтруктураТела.Вставить("result"          , СвойстваРезультата);
	СтруктураТела.Вставить("stampsByPosition", Новый Массив);
	СтруктураТела.Вставить("stampsByTags"    , Новый Массив);
	
	Возврат СтруктураТела;
	
КонецФункции

// Возвращает структуру свойств вставки штампа по позиции.
//
// Возвращаемое значение:
//   Структура: 
//    * file           - см. НоваяСтруктураСвойствФайла.
//    * location       - Структура  - Параметры размещения картинки штампа на странице документа:
//      ** pages - Структура - Параметры расположения на страницах:
//         *** rule       - Строка - Правила расположения картинки штампа на страницах документа.
//         *** pageNumber - Число  - Номер страницы документа для расположения картинки штампа.
//      ** sheet - Структура - Параметры расположения на странице:
//        *** position    - Строка    - Значение расположения картинки штампа на странице документа.
//        *** indentation - Число     - Отступ от границ страницы документа в пикселях при установке картинки штампа.
//        *** coordinates - Структура - Данные координат размещения в пикселях:
//           **** top  - Число - Значение отступа в пикселях от верхней границы страницы документа.
//           **** left - Число - Значение отступа в пикселях от левой границы страницы документа.
//    * transformation - см. НоваяСтруктураСвойствКартинкиШтампа.
//
Функция НовыеСвойстваВставкиШтампаПоПозиции()
	
	СтруктураКоординаты = Новый Структура;
	
	СтруктураКоординаты.Вставить("top", 0);
	СтруктураКоординаты.Вставить("left", 0);
	
	СтруктураРазмещениеНаСтранице = Новый Структура;
	
	СтруктураРазмещениеНаСтранице.Вставить("position"   , "");
	СтруктураРазмещениеНаСтранице.Вставить("indentation", 10);
	СтруктураРазмещениеНаСтранице.Вставить("coordinates", СтруктураКоординаты);
	
	СтруктураРазмещениеНаСтраницах = Новый Структура;
	
	СтруктураРазмещениеНаСтраницах.Вставить("rule"  , "");
	СтруктураРазмещениеНаСтраницах.Вставить("number", 0);
	
	СтруктураСвойствРазмещения = Новый Структура;
	
	СтруктураСвойствРазмещения.Вставить("pages", СтруктураРазмещениеНаСтраницах);
	СтруктураСвойствРазмещения.Вставить("sheet", СтруктураРазмещениеНаСтранице);
	
	СтруктураШтампа = Новый Структура;
	СтруктураШтампа.Вставить("file"          , НоваяСтруктураСвойствФайла());
	СтруктураШтампа.Вставить("location"      , СтруктураСвойствРазмещения);
	СтруктураШтампа.Вставить("transformation", НоваяСтруктураСвойствКартинкиШтампа());
	
	Возврат СтруктураШтампа;
	
КонецФункции

// Возвращает структуру свойств размещения штампов по тегам.
//
// Возвращаемое значение:
//   Структура: 
//    * value   - Строка - Текстовое значение тега.
//    * replace - Булево - Признак замещения тега картинкой штампа.
//    * stamps  - Массив из см.НовыеСвойстваШтампаПриВставкеПоТегам.
//
Функция НовыеСвойстваРазмещенияШтамповПоТегам()
	
	СтруктураШтампов = Новый Структура;
	
	СтруктураШтампов.Вставить("value"  , "");
	СтруктураШтампов.Вставить("replace", Ложь);
	СтруктураШтампов.Вставить("stamps" , Новый Массив);
	
	Возврат СтруктураШтампов;
	
КонецФункции

// Возвращает структуру свойств вставки штампа по тегам.
//
// Возвращаемое значение:
//   Структура:
//    * file           - см. НоваяСтруктураСвойствФайла.
//    * location       - Строка - Вариант вставки штампа в текстовое содержимое.
//    * transformation - см. НоваяСтруктураСвойствКартинкиШтампа.
//
Функция НовыеСвойстваШтампаПриВставкеПоТегам()
	
	СтруктураШтампа = Новый Структура;
	
	СтруктураШтампа.Вставить("file"          , НоваяСтруктураСвойствФайла());
	СтруктураШтампа.Вставить("location"      , "inBackground");
	СтруктураШтампа.Вставить("transformation", НоваяСтруктураСвойствКартинкиШтампа());
	
	Возврат СтруктураШтампа;
	
КонецФункции

// Возвращает структуру свойств файла.
//
// Возвращаемое значение:
//   Структура:
//    * path      - Строка - Путь к файлу в папке zip архива.
//    * extension - Строка - Значение расширения файла.
//
Функция НоваяСтруктураСвойствФайла()
	
	СтруктураСвойствФайла = Новый Структура;
	
	СтруктураСвойствФайла.Вставить("path", "");
	СтруктураСвойствФайла.Вставить("extension", "");
	
	Возврат СтруктураСвойствФайла;
	
КонецФункции

// Возвращает структуру параметров файла картинки штампа.
//
// Возвращаемое значение:
//   Структура:
//    * coefficient       - Число - Коэффициент изменения размера картинки штампа.
//      Значение по умолчанию: 1
//    * transparencyLevel - Число - Значение уровня прозрачности от 0 до 255, где 0 - 100% значение прозрачности.
//      Значение по умолчанию: 255
//
Функция НоваяСтруктураСвойствКартинкиШтампа()
	
	СтруктураСвойствКартинкиШтампа = Новый Структура;
	
	СтруктураСвойствКартинкиШтампа.Вставить("coefficient"       , 1);
	СтруктураСвойствКартинкиШтампа.Вставить("transparencyLevel" , 255);
	
	Возврат СтруктураСвойствКартинкиШтампа;
	
КонецФункции

Функция СловарьЗначенийРазмещения()
	
	Соответствие = Новый Структура;
	
	Соответствие.Вставить("ЛевыйВерхнийУгол"    , "leftTop");
	Соответствие.Вставить("ПравыйВерхнийУгол"   , "rightTop");
	Соответствие.Вставить("ВверхуПоЦентру"      , "centerTop");
	Соответствие.Вставить("ЛевыйНижнийУгол"     , "leftBottom");
	Соответствие.Вставить("ПравыйНижнийУгол"    , "rightBottom");
	Соответствие.Вставить("ВнизуПоЦентру"       , "centerBottom");
	Соответствие.Вставить("ПоКоординатам"       , "byCoordinates");
	Соответствие.Вставить("ПоТегам"             , "byTags");
	
	Возврат Соответствие;
	
КонецФункции 

Функция СловарьПравилРасположений()
	
	Соответствие = Новый Структура;
	
	Соответствие.Вставить("НаПервойСтранице"               , "firstPage");
	Соответствие.Вставить("НаПоследнейСтранице"            , "lastPage");
	Соответствие.Вставить("НаКаждойСтранице"               , "everyPage");
	Соответствие.Вставить("НаКаждойСтраницеКромеПоследней" , "everyPageExceptTheLast");
	Соответствие.Вставить("НаКонкретнойСтранице"           , "specificPage");
	
	Возврат Соответствие;
	
КонецФункции

Функция СловарьВариантовВставки()
	
	Соответствие = Новый Структура;
	
	Соответствие.Вставить("РаздвигаяТекст", "breakText");
	Соответствие.Вставить("НадТекстом"    , "inBackground");
	
	Возврат Соответствие;
	
КонецФункции

// Возвращает параметры соединения.
// 
// Возвращаемое значение:
//  Структура - параметры соединения:
//   * Сервер - Строка - имя сервера.
//   * Порт - Число - порт соединения.
//   * Аутентификация - Булево - требуется аутентификация по токену.
//   * Таймаут - Число - длительность ожидания ответа в секундах.
//   * ЗащищенноеСоединение - ЗащищенноеСоединениеOpenSSL - объект защищенного соединения OpenSSL.
//                          - Неопределено - объект защищенного соединения не установлен.
//   * Прокси - ИнтернетПрокси - параметры прокси-сервера.
//
Функция НовыеПараметрыСоединения(Сервер = "", Порт = 80, ЗащищенноеСоединение = Ложь)

	Результат = Новый Структура;
	Результат.Вставить("Сервер"              , Сервер);
	Результат.Вставить("Порт"                , Порт);
	Результат.Вставить("Аутентификация"      , Ложь);
	Результат.Вставить("Таймаут"             , 30);
	Результат.Вставить("Прокси"              , Новый ИнтернетПрокси);
	Результат.Вставить("ЗащищенноеСоединение", Неопределено);
	
	Если ЗащищенноеСоединение Тогда
		Результат.ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(,
			Новый СертификатыУдостоверяющихЦентровОС);
		Результат.Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	Иначе
		Результат.Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("http");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Останавливает выполнение кода на заданное время. 
//
// Параметры:
//  Секунд - Число - время ожидания в секундах.
//
Процедура Пауза(Секунд) Экспорт
	
	ТекущийСеансИнформационнойБазы = ПолучитьТекущийСеансИнформационнойБазы();
	ФоновоеЗадание = ТекущийСеансИнформационнойБазы.ПолучитьФоновоеЗадание();
	
	Если ФоновоеЗадание = Неопределено Тогда
		Параметры = Новый Массив;
		Параметры.Добавить(Секунд);
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("Интеграция1СШтампСлужебный.Пауза", Параметры);
	КонецЕсли;
		
	ФоновоеЗадание.ОжидатьЗавершенияВыполнения(Секунд);
	
КонецПроцедуры

// Защита от непредсказуемого интервала, который может быть получен из сервиса
// Максимальный таймаут для повторного обращения - 300 сек.
//
Функция ТаймаутОжидания()
	
	Возврат 300;
	
КонецФункции

// Защита от бесконечных проверок статуса задания
// Максимальная длительность запроса - 5 мин.
//
Функция МаксимальнаяДлительностьВыполненияЗапроса()
	
	Возврат 300;
	
КонецФункции

#Область ПрикладныеПроверки

// Возвращает результат проверок перед отправкой запросав в сервис.
//
// Параметры:
//  ТелоЗапроса  - Строка - JSON строка тела запроса.
//
// Возвращаемое значение:
//   См. НовыйРезультатВыполненияЗапроса
//
Функция РезультатВыполненияПрикладныхПроверокПередОтправкойЗапроса(Знач ДвоичныеДанные)
	
	Результат = НовыйРезультатВыполненияЗапроса();
	
	// Проверка превышения допустимого размера тела запроса
	Если ПревышенДопустимыйРазмерТелаЗапроса(ДвоичныеДанные) Тогда
		
		ОписаниеОшибки = НСтр(
					"ru = 'Тело запроса превышает допустимый размер.'",
					ОбщегоНазначения.КодОсновногоЯзыка());
		
		Результат.КодСостояния = Интеграция1СШтампСлужебныйКлиентСервер.КодСостоянияСлишкомБольшойРазмерТелаЗапроса();
		Результат.ТекстОшибки  = ОписаниеОшибки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак превышения допустимого размера тела запроса.
//
// Параметры:
//  ТелоЗапроса  - Строка - JSON строка тела запроса.
//
// Возвращаемое значение:
//   Булево - Признак превышения размера.
//
Функция ПревышенДопустимыйРазмерТелаЗапроса(Знач ДвоичныеДанные)
	
	РазмерТела = ДвоичныеДанные.Размер();
	
	Возврат РазмерТела > Интеграция1СШтампСлужебныйКлиентСервер.ДопустимыйРазмерИсходящегоТелаЗапроса();
	
КонецФункции

#КонецОбласти

#Область РаботаСКоллекцией

// Получить значение данных коллекции в рекурсии.
//
// Параметры:
//  Значение - Произвольный - значения обработки.
//  СвойстваПути - Массив Из Строка - элементы пути, например pathToRoot[0]; categories.
//  ЕстьОшибки - Булево - признак ошибки при разборе.
//
// Возвращаемое значение:
//  Произвольный - Значение свойства по указанному пути
Функция ЗначениеСвойстваКоллекцииВРекурсии(Знач Значение, Знач СвойстваПути, ЕстьОшибки = Ложь)
	
	Свойство = СвойстваПути[0];
	МеткаКоллекции = СтрНайти(Свойство, "[");
	ИндексКоллекции = Неопределено;
	Если МеткаКоллекции <> 0 Тогда
		ИндексКоллекции = Сред(Свойство, МеткаКоллекции + 1);
		ИндексКоллекции = Лев(ИндексКоллекции, СтрДлина(ИндексКоллекции) - 1);
		Свойство = Лев(Свойство, МеткаКоллекции - 1);
	КонецЕсли;
	
	// Проверка свойства структуры.
	Если Не ЭтоКоллекция(Значение) Тогда
		ЕстьОшибки = Истина;
		
		Возврат Неопределено;
	КонецЕсли;

	Если ТипЗнч(Значение) = Тип("Структура") И Не Значение.Свойство(Свойство) 
		Или ТипЗнч(Значение) = Тип("Соответствие") И Значение.Получить(Свойство) = Неопределено Тогда
		ЕстьОшибки = Истина;
		
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск нового элемента
	Если МеткаКоллекции = 0 Тогда
		Значение = Значение[Свойство];
	Иначе
		Значение = Значение[Свойство][Число(ИндексКоллекции)];
	КонецЕсли;
	
	Если СвойстваПути.Количество() = 1 Тогда
		// Последний элемент пути.
		Возврат Значение;
	Иначе
		СвойстваПути.Удалить(0);
		Возврат ЗначениеСвойстваКоллекцииВРекурсии(Значение, СвойстваПути, ЕстьОшибки);
	КонецЕсли;
	
КонецФункции

// Получает значение свойства объекта по указанному пути
// 
// Параметры:
//  Значение   - Структура, Соответствие Из Произвольный - Объект, свойство которого требуется получить
//  Путь       - Строка                                  - Путь к свойству
//  ЕстьОшибки - Булево                                  - Признак ошибки при получении свойства
// 
// Возвращаемое значение:
//  Произвольный - Значение свойства по указанному пути
Функция ЗначениеКоллекцииПоАбсолютномуПути(Знач Значение, Знач Путь, ЕстьОшибки = Ложь) Экспорт
	
	СвойстваПути = СтрРазделить(Путь, ".", Ложь);
	
	Попытка
		Результат = ЗначениеСвойстваКоллекцииВРекурсии(Значение, СвойстваПути, ЕстьОшибки);
	Исключение
		Результат = Неопределено;
		ЕстьОшибки = Истина;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоКоллекция(Знач Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	
	Возврат ТипЗначения = Тип("Структура") Или ТипЗначения = Тип("Соответствие");
	
КонецФункции

#КонецОбласти

#КонецОбласти
