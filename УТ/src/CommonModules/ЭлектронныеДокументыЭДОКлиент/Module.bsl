//@strict-types

#Область СлужебныйПрограммныйИнтерфейс

#Область ДействияПоИнтеграциямЭДО

// Запускает процесс выполнения действий по ЭДО.
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
//  ПараметрыВыполнения   - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  КонтекстДиагностики - Неопределено
//                      - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//
Процедура НачатьВыполнениеДействийПоЭДО(ОповещениеОЗавершении, ПараметрыВыполнения, КонтекстДиагностики = Неопределено) Экспорт
	
	Если КонтекстДиагностики = Неопределено Тогда
		КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	КонецЕсли;
	
	КонтекстДействийПоЭДО = НовыйКонтекстДействийПоЭДО();
	
	ОбработчикПрерывания = Новый ОписаниеОповещения("ЗавершитьВыполнениеДействийПоЭДОПослеПрерывания",
		ЭлектронныеДокументыЭДОКлиент, КонтекстДействийПоЭДО);
	
	ПараметрыОжидания = ОжиданиеОперацийБЭДКлиент.НовыеПараметры();
	КонтекстОжиданияОперации = ОжиданиеОперацийБЭДКлиент.НовыйКонтекст(ПараметрыОжидания);
	ОжиданиеОперацийБЭДКлиент.УстановитьОбработчикПрерывания(ОбработчикПрерывания, КонтекстОжиданияОперации);
	ОжиданиеОперацийБЭДКлиент.ОтметитьНачалоВыполнения(КонтекстОжиданияОперации);
	ОжиданиеОперацийБЭДКлиент.ОткрытьФормуОжидания(Неопределено, КонтекстОжиданияОперации);
	
	КонтекстДействийПоЭДО.ОповещениеОЗавершении = ОповещениеОЗавершении;
	КонтекстДействийПоЭДО.КонтекстДиагностики = КонтекстДиагностики;
	КонтекстДействийПоЭДО.КонтекстОжиданияОперации = КонтекстОжиданияОперации;
	КонтекстДействийПоЭДО.ПараметрыВыполненияДействий = ПараметрыВыполнения;
	
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	
	Если ЭлектроннаяПодписьКлиент.ИспользоватьЭлектронныеПодписи()
		И ЭлектронныеДокументыЭДОКлиентСервер.ТребуютсяОтпечаткиСертификатовДляНабораДействий(НаборДействий) Тогда
		Оповещение = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеПолученияОтпечатков",
			ЭлектронныеДокументыЭДОКлиент, КонтекстДействийПоЭДО);
		КриптографияБЭДКлиент.ПолучитьОтпечаткиСертификатов(Оповещение);
	Иначе
		ВыполнитьДействияПоЭДО(КонтекстДействийПоЭДО);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаРезультатовДействийПоИнтеграциямЭДО

// Возвращаемое значение:
//  Структура:
//  * ИтогВыполненияДействий - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  * СостояниеВыполненияДействий - Неопределено,Произвольный
//  * ПродолжитьВыполнениеДействий - Булево
//  * ПараметрыПродолженияДействий - Неопределено,Произвольный
//  * ДокументыДляОбработкиИзвещений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
//  * ДокументыДляОбработкиДополнительныхСведений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * ОшибкиФормирования  - Массив из См. НовоеОписаниеОшибкиФормирования
Функция НовыйРезультатОбработкиДействийИнтеграцииЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ИтогВыполненияДействий", ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
	Результат.Вставить("СостояниеВыполненияДействий", Неопределено);
	Результат.Вставить("ПродолжитьВыполнениеДействий", Ложь);
	Результат.Вставить("ПараметрыПродолженияДействий", Неопределено);
	Результат.Вставить("ДокументыДляОбработкиИзвещений", Новый Соответствие);
	Результат.Вставить("ДокументыДляОбработкиДополнительныхСведений", Новый Соответствие);
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Результат.Вставить("ОшибкиФормирования", Новый Массив);
	Возврат Результат;
КонецФункции

// Параметры:
//  ИсходныйНаборДействий - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыйНаборДействийПоЭДО
//  ВыполненныеДействия - Массив из ПеречислениеСсылка.ДействияПоЭДО
// 
// Возвращаемое значение:
//  см. ЭлектронныеДокументыЭДОКлиентСервер.НовыйНаборДействийПоЭДО
Функция НаборДействийПослеПодписанияРасшифровки(ИсходныйНаборДействий, ВыполненныеДействия) Экспорт
	
	НаборДействий = ЭлектронныеДокументыЭДОКлиентСервер.НовыйНаборДействийПоЭДО();
	
	Для Каждого ЭлементНабора Из ИсходныйНаборДействий Цикл
		Если ВыполненныеДействия.Найти(ЭлементНабора.Ключ) = Неопределено Тогда
			ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ЭлементНабора.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НаборДействий;
	
КонецФункции

#КонецОбласти

#Область ЖурналДействий

// Открывает журнал действий по указанному электронному документу.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,
//                        ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Ссылка на электронный документ.
//
Процедура ОткрытьЖурналДействийПоЭДО(ЭлектронныйДокумент) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
	ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму("РегистрСведений.ЖурналДействийПоЭДО.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаПодписейДокумента

// Проверяет подписи документов.
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - оповещение, которое будет вызвано после проверки подписей документа.
//  ЭлектронныйДокумент   - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,
//                          ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики   - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//
Процедура ПроверитьПодписиДокумента(ОповещениеОЗавершении, ЭлектронныйДокумент, КонтекстДиагностики) Экспорт
	
	РезультатПроверки = ЭлектронныеДокументыЭДОВызовСервера.ПроверитьПодписиДокумента(
		ЭлектронныйДокумент, КонтекстДиагностики);
	
	ОбработатьРезультатПроверкиПодписейСервера(ОповещениеОЗавершении, РезультатПроверки, КонтекстДиагностики);
	
КонецПроцедуры

// Проверяет подписи сообщения ЭДО
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - оповещение, которое будет вызвано после проверки подписей документа.
//  СообщениеЭДО          - ДокументСсылка.СообщениеЭДО
//  КонтекстДиагностики   - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//
Процедура ПроверитьПодписиСообщения(ОповещениеОЗавершении, СообщениеЭДО, КонтекстДиагностики) Экспорт
	
	РезультатПроверки = ЭлектронныеДокументыЭДОВызовСервера.ПроверитьПодписиСообщения(
		СообщениеЭДО, КонтекстДиагностики);
	
	ОбработатьРезультатПроверкиПодписейСервера(ОповещениеОЗавершении, РезультатПроверки, КонтекстДиагностики);
	
КонецПроцедуры

#КонецОбласти

#Область МашиночитаемыеДоверенности

// Возвращает новые параметры проверки машиночитаемой доверенности.
// 
// Возвращаемое значение:
//  Структура - Новые параметры проверки доверенности:
// * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// * Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// * ИННДоверителя - Строка - ИНН доверителя из подписываемых данных.
// * СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
Функция НовыеПараметрыПроверкиПодписиПоМЧДПриРегистрацииСертификата() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("Сертификат");
	Параметры.Вставить("Доверенность");
	Параметры.Вставить("ИННДоверителя", "");
	Параметры.Вставить("СвойстваПодписи");
	Возврат Параметры;
КонецФункции

// Возвращает результаты проверок подписей по МЧД при регистрации сертификатов.
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - описание оповещения, которое будет выполнено после проведения проверок:
//  * Результат - Структура:
//   ** РезультатыПроверокПодписейПоМЧД - См. ЭлектронныеДокументыЭДО.ПроверитьПодписиПоМЧДПриРегистрацииСертификатов
//   ** КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//  
//  НаборПараметровПроверок - Массив из См. ЭлектронныеДокументыЭДОКлиент.НовыеПараметрыПроверкиПодписиПоМЧДПриРегистрацииСертификата
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Процедура ПроверитьПодписиПоМЧДПриРегистрацииСертификатов(ОповещениеОЗавершении, НаборПараметровПроверок, КонтекстДиагностики) Экспорт
	
	РезультатыПроверокПодписейПоМЧД = 
		ЭлектронныеДокументыЭДОВызовСервера.ПроверитьПодписиПоМЧДПриРегистрацииСертификатов(
			НаборПараметровПроверок, КонтекстДиагностики);

	ОбработатьРезультатыПроверокПодписейПоМЧД(
		ОповещениеОЗавершении, РезультатыПроверокПодписейПоМЧД, КонтекстДиагностики);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаПодписейОбщее

// Проверяет электронные подписи на клиенте.
// 
// Параметры:
//  ПараметрыПроверки - Структура:
//  * Индекс - Число
//  * ОбработкаЗавершенияПроверки   - ОписаниеОповещения
//  * ОбработкаПроверкиПодписи      - ОписаниеОповещения
//  * ПодписиДляПроверки            - Массив из Структура
//  * МенеджерКриптографии          - Неопределено,
//                                    МенеджерКриптографии
//  * ОперацияМенеджераКриптографии - Строка
//  * КонтекстДиагностики           - Неопределено,
//                                    См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Процедура ПроверитьПодписи(ПараметрыПроверки) Экспорт
	
	СоздатьМенеджерКриптографии(ПараметрыПроверки.МенеджерКриптографии, ПараметрыПроверки);
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// Выводит предупреждение о том, что формат ЭД не поддержан оператором.
// 
// Параметры:
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
// 	ПараметрыОбработкиОшибок - см. ОбработкаНеисправностейБЭДКлиент.НовыеПараметрыОбработкиОшибок
Процедура ВывестиПредупреждениеОДокументеВФорматеНеПоддержанномОператором(КонтекстДиагностики, ПараметрыОбработкиОшибок) Экспорт
	
	Ошибка = КонтекстДиагностики.Диагностика.Ошибки[0];
	ТекстЗаголовка = НСтр("ru = 'Документ не поддерживается оператором ЭДО'");
	ПоказатьПредупреждение(, Ошибка.ПодробноеПредставлениеОшибки, 30, ТекстЗаголовка);
	
КонецПроцедуры

// Выводит информацию, что заданным сертификатом можно подписать только по доверенности, предлагает варианты решения.
// 
// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  ПараметрыОбработкиОшибок - см. ОбработкаНеисправностейБЭДКлиент.НовыеПараметрыОбработкиОшибок
//
Процедура ВывестиИнформациюОбОтсутствииМЧДДляСертификата(КонтекстДиагностики, ПараметрыОбработкиОшибок) Экспорт
	МассивСертификатов = Новый Массив; // Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
	Для Каждого Ошибка Из КонтекстДиагностики.Диагностика.Ошибки Цикл
		МассивСертификатов.Добавить(Ошибка.Сертификат);
	КонецЦикла;
	ПоказатьИнформациюПодписаниеСертификатомТолькоПоМЧД(МассивСертификатов);
КонецПроцедуры

// Выводит информацию о том, что доверенности подобрались, но не подходят по полномочиям.
// 
// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  ПараметрыОбработкиОшибок - см. ОбработкаНеисправностейБЭДКлиент.НовыеПараметрыОбработкиОшибок
//
Процедура ВывестиИнформациюОПроверкеПолномочийМЧДДляСертификата(КонтекстДиагностики, ПараметрыОбработкиОшибок) Экспорт
	
	ПараметрыОткрытия = Новый Структура();
	Для Каждого Ошибка Из КонтекстДиагностики.Диагностика.Ошибки Цикл
		Если ОбработкаНеисправностейБЭДКлиентСервер.ЭтоОшибкаДанногоВида(
			Ошибка, МашиночитаемыеДоверенностиКлиентСервер.ВидОшибкиДокументыНедоступныДляПодписанияНаСервереПоПолномочиямДоверенности()) Тогда
			ПараметрыОткрытия.Вставить("Сертификат", Ошибка.Сертификат);
			ПараметрыОткрытия.Вставить("ОшибкиПроверкиПолномочий", Ошибка.ДополнительныеДанные.ОшибкиПроверкиПолномочий);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПараметрыОткрытия) Тогда
		ОткрытьФорму("Обработка.РезультатыПроверкиПодписи.Форма.ОшибкиПроверкиПолномочийПриПодписании", 
			ПараметрыОткрытия,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
		
КонецПроцедуры

// Показывает предупреждение или вопрос с информацией о возможности подписать сертификатом толко при наличии МЧД.
// 
// Параметры:
//  Сертификаты - Массив Из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификаты,
//                                                                                            по которым требуются МЧД.
//  Оповещение - Неопределено,ОписаниеОповещения
//
Процедура ПоказатьИнформациюПодписаниеСертификатомТолькоПоМЧД(Сертификаты, Оповещение = Неопределено) Экспорт

	ТекстВопроса = ЭлектронныеДокументыЭДОВызовСервера.ТекстОшибкиСертификатомМожноПодписатьТолькоПоМЧД(Сертификаты);
		
	Если Оповещение = Неопределено Тогда
		ПоказатьПредупреждение(, ТекстВопроса);
	Иначе
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ПовторитьОтмена);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПодключаемыхКоманд

// Параметры:
//  ПараметрКоманды - Неопределено
//                  - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//                  - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ПараметрыВыполненияКоманды - Структура:
//  * Источник - ФормаКлиентскогоПриложения
//  * Оповещение - ОписаниеОповещения
Процедура СформироватьПодписатьПодготовитьКОтправкеЭД(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрКоманды) Тогда
		ПоказатьПредупреждение(, ТекстОшибкиНеВыбранОбъектУчета());
		Возврат;
	КонецЕсли;

	ОбработчикПослеПроверок = Новый ОписаниеОповещения("СформироватьПодписатьПодготовитьКОтправкеЭДЗавершить",
		ЭтотОбъект, ПараметрыВыполненияКоманды);
		
	ВыполнитьПроверкуПроведенияПередФормированиемИПодписаниемЭД(ПараметрКоманды, ПараметрыВыполненияКоманды,
		ОбработчикПослеПроверок);
		
КонецПроцедуры

// Параметры:
//  ПараметрКоманды - Неопределено
//                  - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//                  - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ПараметрыВыполненияКоманды - Структура:
//  * Источник - ФормаКлиентскогоПриложения
//  * Оповещение - ОписаниеОповещения
Процедура СформироватьПодписатьОтправитьЭД(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрКоманды) Тогда
		ПоказатьПредупреждение(, ТекстОшибкиНеВыбранОбъектУчета());
		Возврат;
	КонецЕсли;
	
	ОбработчикПослеПроверок = Новый ОписаниеОповещения("СформироватьПодписатьОтправитьЭДЗавершить",
		ЭтотОбъект, ПараметрыВыполненияКоманды);
		
	ВыполнитьПроверкуПроведенияПередФормированиемИПодписаниемЭД(ПараметрКоманды, ПараметрыВыполненияКоманды,
		ОбработчикПослеПроверок);
			
КонецПроцедуры

#КонецОбласти // ОбработчикиПодключаемыхКоманд

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

#Область ДействияПоИнтеграциямЭДО

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор интеграции ЭДО.
//  * Значение - ОбщийМодуль
Функция МенеджерыДействийЭДО()
	
	МенеджерыДействийЭДО = Новый Соответствие; // см. МенеджерыДействийЭДО
	
	ПриОпределенииМенеджеровДействийЭДО(МенеджерыДействийЭДО);
	
	Возврат МенеджерыДействийЭДО;
	
КонецФункции

// Заполнение менеджеров для обработки действий по ЭДО.
// Менеджер должен поддерживать методы:
// * ПриОпределенииМенеджеровДействийЭДО
// * ОбработатьРезультатВыполненияДействийЭДО
// .
//
// Параметры:
//  МенеджерыДействийЭДО - см. МенеджерыДействийЭДО
Процедура ПриОпределенииМенеджеровДействийЭДО(МенеджерыДействийЭДО)
	
	ЭлектронныеДокументыЭДОСлужебныйКлиент.ПриОпределенииМенеджеровДействийЭДО(МенеджерыДействийЭДО);
	
	Если ЕстьИнтеграцияОблачногоЭДО() Тогда
		ОбщийМодульИнтеграцияОблачногоЭДОКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"ЭлектронныеДокументыЭДОИнтеграцияОблакаКлиент");
		ОбщийМодульИнтеграцияОблачногоЭДОКлиент.ПриОпределенииМенеджеровДействийЭДО(МенеджерыДействийЭДО);
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Булево -  Есть интеграция облачного ЭДО
Функция ЕстьИнтеграцияОблачногоЭДО()
	Возврат ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами.ИнтеграцияОблачногоЭДО");
КонецФункции

// Возвращает пустой контекст действий по ЭДО.
// 
// Возвращаемое значение:
//  Структура:
//  * ИтогВыполненияДействий - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * КонтекстДиагностики - Неопределено
//                        - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * КонтекстОжиданияОперации - Неопределено
//                             - См. ОжиданиеОперацийБЭДКлиент.НовыйКонтекст
//  * ПаролиСертификатов - См. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  * Сообщения - ФиксированныйМассив из СообщениеПользователю - ключ возвращаемого значения см. ДлительныеОперации.ВыполнитьПроцедуру
//  * ПараметрыВыполненияДействий - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  * СостоянияВыполненияДействий - См. НовыеСостоянияВыполненияДействийПоИнтеграциямЭДО
//  * ОшибкиФормирования  - Массив из См. НовоеОписаниеОшибкиФормирования
//  * ДокументыДляОбработкиИзвещений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
//  * ДокументыДляОбработкиДополнительныхСведений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
Функция НовыйКонтекстДействийПоЭДО()
	Контекст = Новый Структура;
	Контекст.Вставить("ИтогВыполненияДействий", ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Контекст.Вставить("КонтекстДиагностики", Неопределено);
	Контекст.Вставить("КонтекстОжиданияОперации", Неопределено);
	Контекст.Вставить("ПаролиСертификатов", КриптографияБЭДКлиент.НовыеПаролиСертификатов());
	Контекст.Вставить("Сообщения", Новый ФиксированныйМассив(Новый Массив));
	Контекст.Вставить("ПараметрыВыполненияДействий", Новый Структура);
	Контекст.Вставить("СостоянияВыполненияДействий", НовыеСостоянияВыполненияДействийПоИнтеграциямЭДО());
	Контекст.Вставить("ОшибкиФормирования", Новый Массив);
	Контекст.Вставить("ДокументыДляОбработкиИзвещений", Новый Соответствие);
	Контекст.Вставить("ДокументыДляОбработкиДополнительныхСведений", Новый Соответствие);
	Возврат Контекст;
КонецФункции

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор менеджера действий интеграции ЭДО.
//  * Значение - Произвольный
Функция НовыеСостоянияВыполненияДействийПоИнтеграциямЭДО()
	Возврат Новый Соответствие;
КонецФункции

// Выполняет действия по ЭДО после получения отпечатков.
// 
// Параметры:
//  ОтпечаткиСертификатов - см. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
//  КонтекстДействийПоЭДО - см. НовыйКонтекстДействийПоЭДО
Процедура ВыполнитьДействияПоЭДОПослеПолученияОтпечатков(ОтпечаткиСертификатов, КонтекстДействийПоЭДО) Экспорт
	
	КонтекстДействийПоЭДО.ПараметрыВыполненияДействий.ОтпечаткиСертификатов = ОтпечаткиСертификатов;
	
	ВыполнитьДействияПоЭДО(КонтекстДействийПоЭДО);
	
КонецПроцедуры

// Выполняет действия по ЭДО.
// 
// Параметры:
//  КонтекстДействийПоЭДО - см. НовыйКонтекстДействийПоЭДО
//
Асинх Процедура ВыполнитьДействияПоЭДО(КонтекстДействийПоЭДО)
	
	ПараметрыВыполненияДействий = КонтекстДействийПоЭДО.ПараметрыВыполненияДействий;
	Если ЭлектронныеДокументыЭДОКлиентСервер.ОтсутствуютОбъектыДействий(ПараметрыВыполненияДействий.ОбъектыДействий) Тогда
		ЗавершитьВыполнениеДействийПоЭДО(КонтекстДействийПоЭДО);
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИСГИСНРКлиент 
			= ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектронноеАктированиеЕИСГИСНРКлиент");
		Результат = Ждать МодульЭлектронноеАктированиеЕИСГИСНРКлиент.НачалоОперацииЛогированияЭДО(
			ПараметрыВыполненияДействий);
		Если НЕ Результат Тогда
			ЗавершитьВыполнениеДействийПоЭДО(КонтекстДействийПоЭДО);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ДлительнаяОперация = ЭлектронныеДокументыЭДОВызовСервера.ВыполнитьДействияПоИнтеграциямЭДОВФоне(
		ПараметрыВыполненияДействий);
	
	Оповещение = Новый ОписаниеОповещения("ПродолжитьВыполнениеДействийПоЭДОПослеДлительнойОперации",
		ЭлектронныеДокументыЭДОКлиент, КонтекстДействийПоЭДО);
	
	ОжидатьЗавершениеДлительнойОперации(ДлительнаяОперация, Оповещение);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация    - См. ДлительныеОперации.ВыполнитьФункцию
//  КонтекстДействийПоЭДО - См. НовыйКонтекстДействийПоЭДО
Процедура ПродолжитьВыполнениеДействийПоЭДОПослеДлительнойОперации(ДлительнаяОперация, КонтекстДействийПоЭДО) Экспорт
	
	Если КонтекстДействийПоЭДО.КонтекстОжиданияОперации <> Неопределено
		И Не ОжиданиеОперацийБЭДКлиент.ОперацияВыполняется(КонтекстДействийПоЭДО.КонтекстОжиданияОперации) Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстДействийПоЭДО.Сообщения = ДлительнаяОперация.Сообщения;
	
	АдресРезультата = АдресРезультатаДлительнойОперации(ДлительнаяОперация, КонтекстДействийПоЭДО.КонтекстДиагностики);
	Если ПустаяСтрока(АдресРезультата) Тогда
		ЗавершитьВыполнениеДействийПоЭДО(КонтекстДействийПоЭДО);
		Возврат;
	КонецЕсли;
	
	РезультатыПоИнтеграциямЭДО = ЭлектронныеДокументыЭДОВызовСервера.РезультатыВыполненияДействийПоИнтеграциямЭДОДляКлиента(
		АдресРезультата);
	
	Если Не ЗначениеЗаполнено(РезультатыПоИнтеграциямЭДО) Тогда
		ЗавершитьВыполнениеДействийПоЭДО(КонтекстДействийПоЭДО);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПродолжитьВыполнениеДействийПоЭДОПослеОбработкиРезультата",
		ЭлектронныеДокументыЭДОКлиент, КонтекстДействийПоЭДО);
	
	НачатьОбработкуРезультатовВыполненияДействийПоИнтеграциямЭДО(Оповещение, РезультатыПоИнтеграциямЭДО, 
		КонтекстДействийПоЭДО.СостоянияВыполненияДействий, КонтекстДействийПоЭДО.ПараметрыВыполненияДействий.НаборДействий,
		КонтекстДействийПоЭДО.ПаролиСертификатов);
	
КонецПроцедуры

// Параметры:
//  РезультатОбработки - см. НовыйРезультатОбработкиВыполненияДействийПоЭДО
//  КонтекстДействийПоЭДО - см. НовыйКонтекстДействийПоЭДО
//
Процедура ПродолжитьВыполнениеДействийПоЭДОПослеОбработкиРезультата(РезультатОбработки, КонтекстДействийПоЭДО) Экспорт
	
	ЭлектронныеДокументыЭДОКлиентСервер.ДополнитьИтогВыполненияДействийПоЭДО(
		КонтекстДействийПоЭДО.ИтогВыполненияДействий, РезультатОбработки.ИтогВыполненияДействий);
	ОбработкаНеисправностейБЭДКлиент.ДополнитьКонтекстДиагностики(
		КонтекстДействийПоЭДО.КонтекстДиагностики, РезультатОбработки.КонтекстДиагностики);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(КонтекстДействийПоЭДО.ДокументыДляОбработкиИзвещений,
		РезультатОбработки.ДокументыДляОбработкиИзвещений, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(КонтекстДействийПоЭДО.ДокументыДляОбработкиДополнительныхСведений,
		РезультатОбработки.ДокументыДляОбработкиДополнительныхСведений, Ложь);
	КонтекстДействийПоЭДО.СостоянияВыполненияДействий = РезультатОбработки.СостоянияВыполненияДействий;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КонтекстДействийПоЭДО.ОшибкиФормирования,
		РезультатОбработки.ОшибкиФормирования);
	
	Если РезультатОбработки.ПродолжитьВыполнениеДействий Тогда
		
		ПродолжитьВыполнениеДействийПоЭДО(РезультатОбработки.ПараметрыПродолженияДействий, КонтекстДействийПоЭДО);
		
	ИначеЕсли ЕстьДокументыДляОбработкиДополнительныхСведений(КонтекстДействийПоЭДО.ДокументыДляОбработкиДополнительныхСведений) Тогда
		
		ВыполнитьДействияПоДополнительнымСведениямДокументовЭДО(КонтекстДействийПоЭДО);
		
	ИначеЕсли ЗначениеЗаполнено(КонтекстДействийПоЭДО.ДокументыДляОбработкиИзвещений) Тогда
		
		ВыполнитьДействияПоИзвещениямДокументовЭДО(КонтекстДействийПоЭДО);
		
	Иначе
		
		ЗавершитьВыполнениеДействийПоЭДО(КонтекстДействийПоЭДО);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ПараметрыПродолженияДействий - см. НовыеПараметрыПродолженияВыполненияДействийПоИнтеграциямЭДО
//  КонтекстДействийПоЭДО   - См. НовыйКонтекстДействийПоЭДО
Процедура ПродолжитьВыполнениеДействийПоЭДО(ПараметрыПродолженияДействий, КонтекстДействийПоЭДО)
	
	ДлительнаяОперация = ЭлектронныеДокументыЭДОВызовСервера.ПродолжитьВыполнениеДействийПоИнтеграциямЭДОВФоне(
		ПараметрыПродолженияДействий, КонтекстДействийПоЭДО.ПараметрыВыполненияДействий);
	
	Оповещение = Новый ОписаниеОповещения("ПродолжитьВыполнениеДействийПоЭДОПослеДлительнойОперации",
		ЭлектронныеДокументыЭДОКлиент, КонтекстДействийПоЭДО);
	
	ОжидатьЗавершениеДлительнойОперации(ДлительнаяОперация, Оповещение);
	
КонецПроцедуры

// Параметры:
//  ПараметрыПродолженияДействий - см. НовыеПараметрыПродолженияВыполненияДействийПоИнтеграциямЭДО
//  КонтекстДействийПоЭДО   - См. НовыйКонтекстДействийПоЭДО
Процедура ВыполнитьДействияПоИзвещениямДокументовЭДО(КонтекстДействийПоЭДО)
	
	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы = ОбщегоНазначенияБЭДКлиент.ВыгрузитьКолонку(
		КонтекстДействийПоЭДО.ДокументыДляОбработкиИзвещений, "Ключ");
	ПараметрыВыполнения.ОбработатьТолькоИзвещения = Истина;
	
	ПараметрыВыполнения.ОтпечаткиСертификатов = КонтекстДействийПоЭДО.ПараметрыВыполненияДействий.ОтпечаткиСертификатов;
	ПараметрыВыполнения.РасшифрованныеМаркеры = КонтекстДействийПоЭДО.ПараметрыВыполненияДействий.РасшифрованныеМаркеры;
	
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Подписать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отправить"));
	
	КонтекстДействийПоЭДО.ПараметрыВыполненияДействий = ПараметрыВыполнения;
	КонтекстДействийПоЭДО.СостоянияВыполненияДействий = НовыеСостоянияВыполненияДействийПоИнтеграциямЭДО();
	КонтекстДействийПоЭДО.ДокументыДляОбработкиИзвещений.Очистить();
	
	ВыполнитьДействияПоЭДО(КонтекстДействийПоЭДО);
	
КонецПроцедуры

// Параметры:
//  ПараметрыПродолженияДействий - см. НовыеПараметрыПродолженияВыполненияДействийПоИнтеграциямЭДО
//  КонтекстДействийПоЭДО   - См. НовыйКонтекстДействийПоЭДО
Процедура ВыполнитьДействияПоДополнительнымСведениямДокументовЭДО(КонтекстДействийПоЭДО)
	
	ДокументыДляОбработкиДополнительныхСведений = КонтекстДействийПоЭДО.ДокументыДляОбработкиДополнительныхСведений;
	НаборДокументов = ВыгрузитьДокументыДляОбработкиДополнительныхСведений(КонтекстДействийПоЭДО.ДокументыДляОбработкиДополнительныхСведений);
	Для Каждого ДокументДляОбработки Из НаборДокументов Цикл
		ДокументыДляОбработкиДополнительныхСведений.Вставить(ДокументДляОбработки, Ложь);
	КонецЦикла;
	
	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы = НаборДокументов;
	
	ПараметрыВыполнения.ОтпечаткиСертификатов = КонтекстДействийПоЭДО.ПараметрыВыполненияДействий.ОтпечаткиСертификатов;
	ПараметрыВыполнения.РасшифрованныеМаркеры = КонтекстДействийПоЭДО.ПараметрыВыполненияДействий.РасшифрованныеМаркеры;
	
	ТекущийНаборДействий = КонтекстДействийПоЭДО.ПараметрыВыполненияДействий.НаборДействий;
	
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	
	ДействиеПодписать = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Подписать");
	Если ЭлектронныеДокументыЭДОКлиентСервер.ЕстьДействие(ТекущийНаборДействий, ДействиеПодписать) Тогда
		ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействиеПодписать);
	КонецЕсли;
	
	ДействиеПодготовитьКОтправке = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ПодготовитьКОтправке");
	Если ЭлектронныеДокументыЭДОКлиентСервер.ЕстьДействие(ТекущийНаборДействий, ДействиеПодготовитьКОтправке) Тогда
		ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействиеПодготовитьКОтправке);
	КонецЕсли;
	
	ДействиеОтправить = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отправить");
	Если ЭлектронныеДокументыЭДОКлиентСервер.ЕстьДействие(ТекущийНаборДействий, ДействиеОтправить) Тогда
		ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействиеОтправить);
	КонецЕсли;
	
	КонтекстДействийПоЭДО.ПараметрыВыполненияДействий = ПараметрыВыполнения;
	КонтекстДействийПоЭДО.СостоянияВыполненияДействий = НовыеСостоянияВыполненияДействийПоИнтеграциямЭДО();
	
	ВыполнитьДействияПоЭДО(КонтекстДействийПоЭДО);
	
КонецПроцедуры

// Завершает выполнение действий по ЭДО.
// 
// Параметры:
//  КонтекстДействийПоЭДО - См. НовыйКонтекстДействийПоЭДО
//  РезультатДействийПоЭДО - См. ЭлектронныеДокументыЭДОВызовСервера.РезультатДействийПоЭДО
//
Процедура ЗавершитьВыполнениеДействийПоЭДО(КонтекстДействийПоЭДО, РезультатДействийПоЭДО = Неопределено)
	
	КонтекстОжиданияОперации = КонтекстДействийПоЭДО.КонтекстОжиданияОперации;
	
	Если КонтекстОжиданияОперации <> Неопределено Тогда
		ОжиданиеОперацийБЭДКлиент.ЗакрытьФормуОжидания(КонтекстОжиданияОперации);
		ОжиданиеОперацийБЭДКлиент.УстановитьОбработчикПрерывания(Неопределено, КонтекстОжиданияОперации);
	КонецЕсли;
	
	Для Каждого Сообщение Из КонтекстДействийПоЭДО.Сообщения Цикл
		Сообщение.Сообщить();
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Итог", КонтекстДействийПоЭДО.ИтогВыполненияДействий);
	Результат.Вставить("ОшибкиФормирования", КонтекстДействийПоЭДО.ОшибкиФормирования);
	Результат.Вставить("КонтекстДиагностики", КонтекстДействийПоЭДО.КонтекстДиагностики);
	
	Если РезультатДействийПоЭДО <> Неопределено И РезультатДействийПоЭДО.Свойство("СвойстваПодписи") Тогда
		Результат.Вставить("СвойстваПодписи", РезультатДействийПоЭДО.СвойстваПодписи);
	КонецЕсли;
	
	Если РезультатДействийПоЭДО <> Неопределено И РезультатДействийПоЭДО.Свойство("ПодписанныеДанные") Тогда
		Результат.Вставить("ПодписанныеДанные", РезультатДействийПоЭДО.ПодписанныеДанные);
	КонецЕсли;
	
	Если РезультатДействийПоЭДО <> Неопределено
		И ЗначениеЗаполнено(РезультатДействийПоЭДО.ОшибкиФормирования) Тогда
		Результат.ОшибкиФормирования = РезультатДействийПоЭДО.ОшибкиФормирования;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		ПараметрыВыполненияДействий = КонтекстДействийПоЭДО.ПараметрыВыполненияДействий;
		МодульЭлектронноеАктированиеЕИСГИСНРКлиент 
			= ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектронноеАктированиеЕИСГИСНРКлиент");
		МодульЭлектронноеАктированиеЕИСГИСНРКлиент.ОкончаниеОперацииЛогированияЭДО(
			ПараметрыВыполненияДействий,
			Результат);
	КонецЕсли;

	// См. НачатьВыполнениеДействийПоЭДО.ОповещениеОЗавершении
	ВыполнитьОбработкуОповещения(КонтекстДействийПоЭДО.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - См. ДлительныеОперации.ВыполнитьФункцию
//  Оповещение - ОписаниеОповещения
Процедура ОжидатьЗавершениеДлительнойОперации(ДлительнаяОперация, Оповещение)
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация    - См. ДлительныеОперации.ВыполнитьФункцию
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  Строка - адрес временного хранилища
Функция АдресРезультатаДлительнойОперации(ДлительнаяОперация, КонтекстДиагностики)
		
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат "";
	ИначеЕсли ДлительнаяОперация.Статус <> "Выполнено" Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось выполнить действия по ЭДО.'");
		ПодробныйТекстОшибки = ТекстОшибки;
		Если ЗначениеЗаполнено(ДлительнаяОперация.ПодробноеПредставлениеОшибки) Тогда
			ПодробныйТекстОшибки = ПодробныйТекстОшибки + Символы.ПС + ДлительнаяОперация.ПодробноеПредставлениеОшибки;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДлительнаяОперация.КраткоеПредставлениеОшибки) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + ДлительнаяОперация.КраткоеПредставлениеОшибки;
		КонецЕсли;
		Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(НСтр("ru = 'Выполнение действий по ЭДО.'"),
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ПодробныйТекстОшибки, ТекстОшибки);
		ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
		ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ПодсистемыБЭД.ОбменСКонтрагентами);
		Возврат "";
	КонецЕсли;
	
	Возврат ДлительнаяОперация.АдресРезультата;
	
КонецФункции

// Параметры:
//  ДокументыДляОбработкиДополнительныхСведений - Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Значение - Булево
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьДокументыДляОбработкиДополнительныхСведений(ДокументыДляОбработкиДополнительныхСведений)
	
	Результат = Ложь;
	
	Если Не ЗначениеЗаполнено(ДокументыДляОбработкиДополнительныхСведений) Тогда
		Возврат Результат;
	КонецЕсли;
	
	НаборДокументов = ВыгрузитьДокументыДляОбработкиДополнительныхСведений(ДокументыДляОбработкиДополнительныхСведений);
	
	Результат = ЗначениеЗаполнено(НаборДокументов);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ДокументыДляОбработкиДополнительныхСведений - Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Значение - Булево
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция ВыгрузитьДокументыДляОбработкиДополнительныхСведений(ДокументыДляОбработкиДополнительныхСведений)
	
	НаборДокументов = Новый Массив; // См. ПодписанныеДокументыДляОбработкиДополнительныхСведений
	
	Для Каждого ДокументДляОбработки Из ДокументыДляОбработкиДополнительныхСведений Цикл
		
		Если ДокументДляОбработки.Значение Тогда
			НаборДокументов.Добавить(ДокументДляОбработки.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаборДокументов;
	
КонецФункции

// Параметры:
//  РезультатПрерывания - Булево
//  КонтекстДействийПоЭДО - см. НовыйКонтекстДействийПоЭДО
Процедура ЗавершитьВыполнениеДействийПоЭДОПослеПрерывания(РезультатПрерывания, КонтекстДействийПоЭДО) Экспорт
	
	КонтекстДействийПоЭДО.КонтекстОжиданияОперации.ОперацияВыполняется = Ложь;
	
	ЗавершитьВыполнениеДействийПоЭДО(КонтекстДействийПоЭДО);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаРезультатовДействийПоИнтеграциямЭДО

// Возвращаемое значение:
//  Структура:
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * РезультатыВыполненияДействий - см. ЭлектронныеДокументыЭДОВызовСервера.РезультатыВыполненияДействийПоИнтеграциямЭДОДляКлиента
//  * СостоянияВыполненияДействий - см. НовыеСостоянияВыполненияДействийПоИнтеграциямЭДО
//  * ИсходныйНаборДействийЭДО - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО
//  * ПаролиСертификатов - см. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  * МенеджерыДействийЭДО - см. МенеджерыДействийЭДО
//  * ОбработанныеМенеджеры - Массив из Строка
//  * ИдентификаторМенеджера - Строка
//  * ИтогВыполненияДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  * ПродолжитьВыполнениеДействий - Булево
//  * ПараметрыПродолженияДействий - см. НовыеПараметрыПродолженияВыполненияДействийПоИнтеграциямЭДО
//  * ДокументыДляОбработкиИзвещений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
//  * ДокументыДляОбработкиДополнительныхСведений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * ОшибкиФормирования  - Массив из См. НовоеОписаниеОшибкиФормирования
Функция НовыйКонтекстОбработкиРезультатовВыполненияДействийПоИнтеграциямЭДО()
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Контекст.Вставить("РезультатыВыполненияДействий", Новый Соответствие);
	Контекст.Вставить("СостоянияВыполненияДействий", НовыеСостоянияВыполненияДействийПоИнтеграциямЭДО());
	Контекст.Вставить("ИсходныйНаборДействийЭДО", ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО());
	Контекст.Вставить("ПаролиСертификатов", КриптографияБЭДКлиент.НовыеПаролиСертификатов());
	Контекст.Вставить("МенеджерыДействийЭДО", МенеджерыДействийЭДО());
	Контекст.Вставить("ОбработанныеМенеджеры", Новый Массив);
	Контекст.Вставить("ИдентификаторМенеджера", "");
	Контекст.Вставить("ИтогВыполненияДействий", ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
	Контекст.Вставить("ПродолжитьВыполнениеДействий", Ложь);
	Контекст.Вставить("ПараметрыПродолженияДействий", НовыеПараметрыПродолженияВыполненияДействийПоИнтеграциямЭДО());
	Контекст.Вставить("ДокументыДляОбработкиИзвещений", Новый Соответствие);
	Контекст.Вставить("ДокументыДляОбработкиДополнительныхСведений", Новый Соответствие);
	Контекст.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Контекст.Вставить("ОшибкиФормирования", Новый Массив);
	Возврат Контекст;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИтогВыполненияДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  * СостоянияВыполненияДействий - см. НовыеСостоянияВыполненияДействийПоИнтеграциямЭДО
//  * ПродолжитьВыполнениеДействий - Булево
//  * ПараметрыПродолженияДействий - см. НовыеПараметрыПродолженияВыполненияДействийПоИнтеграциямЭДО
//  * ДокументыДляОбработкиИзвещений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
//  * ДокументыДляОбработкиДополнительныхСведений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * ОшибкиФормирования  - Массив из См. НовоеОписаниеОшибкиФормирования
Функция НовыйРезультатОбработкиВыполненияДействийПоЭДО()
	Результат = Новый Структура;
	Результат.Вставить("ИтогВыполненияДействий", ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
	Результат.Вставить("СостоянияВыполненияДействий", НовыеСостоянияВыполненияДействийПоИнтеграциямЭДО());
	Результат.Вставить("ПродолжитьВыполнениеДействий", Ложь);
	Результат.Вставить("ПараметрыПродолженияДействий", НовыеПараметрыПродолженияВыполненияДействийПоИнтеграциямЭДО());
	Результат.Вставить("ДокументыДляОбработкиИзвещений", Новый Соответствие);
	Результат.Вставить("ДокументыДляОбработкиДополнительныхСведений", Новый Соответствие);
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Результат.Вставить("ОшибкиФормирования", Новый Массив);
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор менеджера действий интеграции ЭДО.
//  * Значение - Произвольный
Функция НовыеПараметрыПродолженияВыполненияДействийПоИнтеграциямЭДО()
	Возврат Новый Соответствие;
КонецФункции

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - см. РезультатОбработкиВыполненияДействийПоИнтеграциямЭДО
//  РезультатыВыполненияДействий - см. ЭлектронныеДокументыЭДОВызовСервера.РезультатыВыполненияДействийПоИнтеграциямЭДОДляКлиента
//  СостоянияВыполненияДействий - см. НовыеСостоянияВыполненияДействийПоИнтеграциямЭДО
//  ИсходныйНаборДействийЭДО - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО
//  ПаролиСертификатов - см. КриптографияБЭДКлиент.НовыеПаролиСертификатов
Процедура НачатьОбработкуРезультатовВыполненияДействийПоИнтеграциямЭДО(ОповещениеОЗавершении, РезультатыВыполненияДействий, СостоянияВыполненияДействий, ИсходныйНаборДействийЭДО, ПаролиСертификатов)
	
	КонтекстОбработки = НовыйКонтекстОбработкиРезультатовВыполненияДействийПоИнтеграциямЭДО();
	КонтекстОбработки.ОповещениеОЗавершении = ОповещениеОЗавершении;
	КонтекстОбработки.РезультатыВыполненияДействий = РезультатыВыполненияДействий;
	КонтекстОбработки.СостоянияВыполненияДействий = СостоянияВыполненияДействий;
	КонтекстОбработки.ИсходныйНаборДействийЭДО = ИсходныйНаборДействийЭДО;
	КонтекстОбработки.ПаролиСертификатов = ПаролиСертификатов;
	
	ОбработатьРезультатыВыполненияДействийПоИнтеграциямЭДО(КонтекстОбработки);
	
КонецПроцедуры

// Параметры:
//  КонтекстОбработки - см. НовыйКонтекстОбработкиРезультатовВыполненияДействийПоИнтеграциямЭДО
Процедура ОбработатьРезультатыВыполненияДействийПоИнтеграциямЭДО(КонтекстОбработки)
	
	МенеджерУстановлен = УстановитьМенеджерОбработкиРезультатовВыполненияДействийЭДО(КонтекстОбработки);
		
	Если Не МенеджерУстановлен Тогда
		ЗавершитьОбработкуРезультатовВыполненияДействийПоИнтеграциямЭДО(КонтекстОбработки);
		Возврат;
	КонецЕсли;
	
	ИдентификаторМенеджера = КонтекстОбработки.ИдентификаторМенеджера;
	МодульМенеджера = КонтекстОбработки.МенеджерыДействийЭДО[ИдентификаторМенеджера];
	РезультатВыполненияДействий = КонтекстОбработки.РезультатыВыполненияДействий[ИдентификаторМенеджера];
	СостояниеВыполненияДействий = КонтекстОбработки.СостоянияВыполненияДействий[ИдентификаторМенеджера];
	ПаролиСертификатов = КонтекстОбработки.ПаролиСертификатов;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатыВыполненияДействийПослеОбработкиПоИнтеграцииЭДО",
		ЭлектронныеДокументыЭДОКлиент, КонтекстОбработки);
	
	МодульМенеджера.ОбработатьРезультатВыполненияДействийЭДО(Оповещение, РезультатВыполненияДействий, СостояниеВыполненияДействий,
		КонтекстОбработки.ИсходныйНаборДействийЭДО, ПаролиСертификатов);
	
КонецПроцедуры

// Параметры:
//  РезультатОбработкиПоИнтеграцииЭДО - см. НовыйРезультатОбработкиДействийИнтеграцииЭДО
//  КонтекстОбработки - см. НовыйКонтекстОбработкиРезультатовВыполненияДействийПоИнтеграциямЭДО
Процедура ОбработатьРезультатыВыполненияДействийПослеОбработкиПоИнтеграцииЭДО(РезультатОбработкиПоИнтеграцииЭДО, КонтекстОбработки) Экспорт
	
	ОбработкаНеисправностейБЭДКлиент.ДополнитьКонтекстДиагностики(
		КонтекстОбработки.КонтекстДиагностики, РезультатОбработкиПоИнтеграцииЭДО.КонтекстДиагностики);
	
	ИнтерфейсДокументовЭДОКлиентСервер.ДополнитьИтогВыполненияДействийПоЭДО(
		КонтекстОбработки.ИтогВыполненияДействий,
		РезультатОбработкиПоИнтеграцииЭДО.ИтогВыполненияДействий);
	
	ИдентификаторМенеджера = КонтекстОбработки.ИдентификаторМенеджера;
	
	КонтекстОбработки.СостоянияВыполненияДействий.Вставить(
		ИдентификаторМенеджера, РезультатОбработкиПоИнтеграцииЭДО.СостояниеВыполненияДействий);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		КонтекстОбработки.ОшибкиФормирования,
		РезультатОбработкиПоИнтеграцииЭДО.ОшибкиФормирования);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		КонтекстОбработки.ДокументыДляОбработкиИзвещений,
		РезультатОбработкиПоИнтеграцииЭДО.ДокументыДляОбработкиИзвещений, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		КонтекстОбработки.ДокументыДляОбработкиДополнительныхСведений,
		РезультатОбработкиПоИнтеграцииЭДО.ДокументыДляОбработкиДополнительныхСведений, Истина);
	
	Если РезультатОбработкиПоИнтеграцииЭДО.ПродолжитьВыполнениеДействий Тогда
		КонтекстОбработки.ПродолжитьВыполнениеДействий = Истина;
		КонтекстОбработки.ПараметрыПродолженияДействий.Вставить(
			ИдентификаторМенеджера, РезультатОбработкиПоИнтеграцииЭДО.ПараметрыПродолженияДействий);
	КонецЕсли;
	
	ОбработатьРезультатыВыполненияДействийПоИнтеграциямЭДО(КонтекстОбработки);
	
КонецПроцедуры

// Параметры:
//  КонтекстОбработки - см. НовыйКонтекстОбработкиРезультатовВыполненияДействийПоИнтеграциямЭДО
Процедура ЗавершитьОбработкуРезультатовВыполненияДействийПоИнтеграциямЭДО(КонтекстОбработки)
	
	РезультатОбработки = НовыйРезультатОбработкиВыполненияДействийПоЭДО();
	РезультатОбработки.ИтогВыполненияДействий = КонтекстОбработки.ИтогВыполненияДействий;
	РезультатОбработки.СостоянияВыполненияДействий = КонтекстОбработки.СостоянияВыполненияДействий;
	РезультатОбработки.ПродолжитьВыполнениеДействий = КонтекстОбработки.ПродолжитьВыполнениеДействий;
	РезультатОбработки.ПараметрыПродолженияДействий = КонтекстОбработки.ПараметрыПродолженияДействий;
	РезультатОбработки.КонтекстДиагностики = КонтекстОбработки.КонтекстДиагностики;
	РезультатОбработки.ОшибкиФормирования = КонтекстОбработки.ОшибкиФормирования;
	РезультатОбработки.ДокументыДляОбработкиИзвещений = КонтекстОбработки.ДокументыДляОбработкиИзвещений;
	РезультатОбработки.ДокументыДляОбработкиДополнительныхСведений = КонтекстОбработки.ДокументыДляОбработкиДополнительныхСведений;
	
	// См. НачатьОбработкуРезультатовВыполненияДействийПоИнтеграциямЭДО.ОповещениеОЗавершении
	ВыполнитьОбработкуОповещения(КонтекстОбработки.ОповещениеОЗавершении, РезультатОбработки);
	
КонецПроцедуры

// Параметры:
//  КонтекстОбработки - см. НовыйКонтекстОбработкиРезультатовВыполненияДействийПоИнтеграциямЭДО
Функция УстановитьМенеджерОбработкиРезультатовВыполненияДействийЭДО(КонтекстОбработки)
	
	МенеджерУстановлен = Ложь;
	
	ОбработанныеМенеджеры = КонтекстОбработки.ОбработанныеМенеджеры;
	
	Для Каждого РезультатВыполненияПоИнтеграцииЭДО Из КонтекстОбработки.РезультатыВыполненияДействий Цикл
		
		ИдентификаторМенеджера = РезультатВыполненияПоИнтеграцииЭДО.Ключ;
		Если ОбработанныеМенеджеры.Найти(ИдентификаторМенеджера) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработанныеМенеджеры.Добавить(ИдентификаторМенеджера);
		
		РезультатВыполненияДействий = РезультатВыполненияПоИнтеграцииЭДО.Значение;
		Если РезультатВыполненияДействий = Неопределено Тогда
			ВидОперации = НСтр("ru = 'Выполнение действий по ЭДО.'");
			ТекстСообщения = НСтр("ru = 'При выполнении действий по ЭДО возникла неизвестная ошибка.'");
			Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(ВидОперации,
				ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
				ТекстСообщения, ТекстСообщения);
			ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(КонтекстОбработки.КонтекстДиагностики, Ошибка,
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
			Продолжить;
		КонецЕсли;
		
		КонтекстОбработки.ИдентификаторМенеджера = ИдентификаторМенеджера;
		МенеджерУстановлен = Истина;
		Прервать;
		
	КонецЦикла;
	
	Возврат МенеджерУстановлен;
	
КонецФункции

#КонецОбласти

#Область ПроверкаПодписейДокумента

// Возвращает пустые параметры проверки подписей.
// 
// Возвращаемое значение:
//  Структура - Описание:
//  * Индекс - Число
//  * ОбработкаЗавершенияПроверки   - ОписаниеОповещения
//  * ОбработкаПроверкиПодписи      - ОписаниеОповещения
//  * ПодписиДляПроверки            - Массив из Структура:
//  ** ПрисоединенныйФайл           - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ** ДвоичныеДанныеФайла          - ДвоичныеДанные
//  ** ДвоичныеДанныеПодписи        - ДвоичныеДанные
//  * МенеджерКриптографии          - Неопределено,
//                                    МенеджерКриптографии
//  * ОперацияМенеджераКриптографии - Строка
//  * КонтекстДиагностики           - Неопределено,
//                                    См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * ПроверенныеПодписи            - Соответствие из КлючИЗначение:
//  ** Ключ                         - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ** Значение                     - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//
Функция НовыеПараметрыПроверкиПодписей()
	Параметры = Новый Структура;
	Параметры.Вставить("Индекс", 0);
	Параметры.Вставить("ОбработкаЗавершенияПроверки", Новый ОписаниеОповещения);
	Параметры.Вставить("ОбработкаПроверкиПодписи", Новый ОписаниеОповещения);
	Параметры.Вставить("ПодписиДляПроверки", Новый Массив);
	Параметры.Вставить("МенеджерКриптографии", Неопределено);
	Параметры.Вставить("ОперацияМенеджераКриптографии", "");
	Параметры.Вставить("КонтекстДиагностики", Неопределено);
	Параметры.Вставить("ПроверенныеПодписи", Новый Соответствие);
	Возврат Параметры;
КонецФункции

// Обрабатывает результат проверки электронных подписей документа.
// 
// Параметры:
//  РезультатПроверки - Структура:
//  * ОписаниеОшибки  - Строка
//  * ОшибкаИнициализацииПроверки - Булево
//  * СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  ПараметрыПроверки - См. НовыеПараметрыПроверкиПодписей
//
Процедура ОбработатьРезультатПроверкиПодписиДокумента(РезультатПроверки, ПараметрыПроверки) Экспорт
	
	Если Не РезультатПроверки.ОшибкаИнициализацииПроверки Тогда
		ТекущиеДанные = ПараметрыПроверки.ПодписиДляПроверки[ПараметрыПроверки.Индекс];
		
		СвойстваПодписи = РезультатПроверки.СвойстваПодписи;
		СвойстваПодписи.Подпись = ТекущиеДанные.ДвоичныеДанныеПодписи;
		
		ПроверенныеПодписиФайла = ПараметрыПроверки.ПроверенныеПодписи[ТекущиеДанные.ПрисоединенныйФайл];
		Если ПроверенныеПодписиФайла = Неопределено Тогда
			ПроверенныеПодписиФайла = Новый Массив;
			ПараметрыПроверки.ПроверенныеПодписи.Вставить(ТекущиеДанные.ПрисоединенныйФайл, ПроверенныеПодписиФайла);
		КонецЕсли;
		ПроверенныеПодписиФайла.Добавить(СвойстваПодписи);
	КонецЕсли;
	
	ПараметрыПроверки.Индекс = ПараметрыПроверки.Индекс + 1;
	
	Если ПараметрыПроверки.ПодписиДляПроверки.Количество() > ПараметрыПроверки.Индекс Тогда
		ПроверитьПодписи(ПараметрыПроверки);
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыПроверки.ОбработкаЗавершенияПроверки, ПараметрыПроверки);
	КонецЕсли;
	
КонецПроцедуры

// Завершает проверку электронных подписей документа.
// 
// Параметры:
//  ПараметрыПроверки - см. НовыеПараметрыПроверкиПодписей
//  ОповещениеОЗавершении - ОписаниеОповещения
//
Процедура ПроверитьПодписиДокументаЗавершение(ПараметрыПроверки, ОповещениеОЗавершении) Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("Успех", Ложь);
	РезультатПроверки.Вставить("КонтекстДиагностики", ПараметрыПроверки.КонтекстДиагностики);
	РезультатПроверки.Вставить("ПроверенныеПодписи", Новый Соответствие);
	
	Если Не ЗначениеЗаполнено(ПараметрыПроверки.ПроверенныеПодписи) Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатПроверки);
		Возврат;
	КонецЕсли;
	
	РезультатЗаписи = ЭлектронныеДокументыЭДОВызовСервера.ЗаписатьРезультатПроверкиПодписейДокумента(
		ПараметрыПроверки.ПроверенныеПодписи);
	
	РезультатПроверки.Успех = РезультатЗаписи;
	РезультатПроверки.ПроверенныеПодписи = ПараметрыПроверки.ПроверенныеПодписи;
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатПроверки);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаПодписейОбщее

// Обрабатывает результат проверки подписей с сервера,
// если на сервере подписи не проверены - проверяет на клиенте
Процедура ОбработатьРезультатПроверкиПодписейСервера(ОповещениеОЗавершении, РезультатПроверки, КонтекстДиагностики)
	
	Если РезультатПроверки.Успех
		ИЛИ Не ЗначениеЗаполнено(РезультатПроверки.ПодписиДляПроверки) Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатПроверки);
		Возврат;
	КонецЕсли;
	
	ПараметрыПроверки = НовыеПараметрыПроверкиПодписей();
	ПараметрыПроверки.ПодписиДляПроверки = РезультатПроверки.ПодписиДляПроверки;
	ПараметрыПроверки.ОбработкаЗавершенияПроверки = Новый ОписаниеОповещения(
		"ПроверитьПодписиДокументаЗавершение", ЭлектронныеДокументыЭДОКлиент, ОповещениеОЗавершении);
	ПараметрыПроверки.ОбработкаПроверкиПодписи = Новый ОписаниеОповещения(
		"ОбработатьРезультатПроверкиПодписиДокумента", ЭлектронныеДокументыЭДОКлиент, ПараметрыПроверки);
	ПараметрыПроверки.ОперацияМенеджераКриптографии = "ПроверкаПодписи";
	ПараметрыПроверки.КонтекстДиагностики = КонтекстДиагностики;
	
	ПроверитьПодписи(ПараметрыПроверки);
	
КонецПроцедуры

// Создает менеджер криптографии.
// 
// Параметры:
//  МенеджерКриптографии - Неопределено,Строка,МенеджерКриптографии
//  ПараметрыПроверки    - См. НовыеПараметрыПроверкиПодписей
//
Процедура СоздатьМенеджерКриптографии(МенеджерКриптографии, ПараметрыПроверки) Экспорт
	
	Если МенеджерКриптографии = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("СоздатьМенеджерКриптографии",
			ЭлектронныеДокументыЭДОКлиент, ПараметрыПроверки);
		ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение,
			ПараметрыПроверки.ОперацияМенеджераКриптографии, Ложь);
		Возврат;
	ИначеЕсли ТипЗнч(МенеджерКриптографии) = Тип("Строка") Тогда
		ВыполнитьОбработкуОповещения(ПараметрыПроверки.ОбработкаЗавершенияПроверки, 
			ПараметрыПроверки);
		Возврат;
	ИначеЕсли ПараметрыПроверки.МенеджерКриптографии = Неопределено Тогда 
		ПараметрыПроверки.МенеджерКриптографии = МенеджерКриптографии;
	КонецЕсли;
	
	ПроверитьПодписиПослеСозданияМенеджераКриптографии(МенеджерКриптографии, ПараметрыПроверки);
	
КонецПроцедуры

// Проверяет электронные подписи после создания менеджера криптографии.
// 
// Параметры:
//  МенеджерКриптографии - МенеджерКриптографии
//  ПараметрыПроверки - См. НовыеПараметрыПроверкиПодписей
//
Процедура ПроверитьПодписиПослеСозданияМенеджераКриптографии(МенеджерКриптографии, ПараметрыПроверки)
	ТекущиеДанные = ПараметрыПроверки.ПодписиДляПроверки[ПараметрыПроверки.Индекс];
	КриптографияБЭДКлиент.ПроверитьПодпись(ПараметрыПроверки.ОбработкаПроверкиПодписи, ТекущиеДанные.ДвоичныеДанныеФайла,
		ТекущиеДанные.ДвоичныеДанныеПодписи, ПараметрыПроверки.КонтекстДиагностики, МенеджерКриптографии);
КонецПроцедуры

#КонецОбласти

#Область МашиночитаемыеДоверенности

// Продолжает проверку подписей по МЧД при регистрации сертификатов
//
// Параметры:
//  РезультатыПроверокПодписейПоМЧД - см. ЭлектронныеДокументыЭДО.ПроверитьПодписиПоМЧДПриРегистрацииСертификатов
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  См. ЭлектронныеДокументыЭДО.ПроверитьПодписиПоМЧДПриРегистрацииСертификатовПродолжение
Функция ПроверитьПодписиПоМЧДПриРегистрацииСертификатовПродолжение(РезультатыПроверокПодписейПоМЧД,
	КонтекстДиагностики)
	Возврат ЭлектронныеДокументыЭДОВызовСервера.ПроверитьПодписиПоМЧДПриРегистрацииСертификатовПродолжение(
		РезультатыПроверокПодписейПоМЧД, КонтекстДиагностики);
КонецФункции

// Обновляет данные результата проверки подписей по МЧД, результатами проверки подписей МЧД полученными с клиента
// 
// Параметры:
//  РезультатПроверки - См. МашиночитаемыеДоверенностиКлиентСервер.РезультатПроверкиДоверенности
//  ПараметрыОповещения - Структура:
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * РезультатКПроверкеНаКлиенте - См. РезультатКПроверкеНаКлиенте
//  * РезультатыПроверок - См. ЭлектронныеДокументыЭДО.ПроверитьПодписиПоМЧДПриРегистрацииСертификатов
//
Процедура ОбработатьРезультатПроверкиДоверенностиНаКлиенте(РезультатПроверки, ПараметрыОповещения) Экспорт

	РезультатКОбработке = ПараметрыОповещения.РезультатыПроверок[ПараметрыОповещения.РезультатКПроверкеНаКлиенте.Ключ];
	РезультатКОбработке.ТребуетсяПроверкаМЧДНаКлиенте = Ложь;
	РезультатКОбработке.СведенияМЧД.Верна = РезультатПроверки.Результат;
	РезультатКОбработке.ТекстОшибки = РезультатПроверки.ТекстОшибки;

	ОбработатьРезультатыПроверокПодписейПоМЧД(ПараметрыОповещения.ОповещениеОЗавершении,
		ПараметрыОповещения.РезультатыПроверок, РезультатПроверки.КонтекстДиагностики);

КонецПроцедуры

// Обновляет результаты проверок подписей по МЧД, результатами проверок подписей МЧД полученными с клиента
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
// 	РезультатыПроверок - См. ЭлектронныеДокументыЭДО.ПроверитьПодписиПоМЧДПриРегистрацииСертификатов
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
Процедура ОбработатьРезультатыПроверокПодписейПоМЧД(ОповещениеОЗавершении, РезультатыПроверок, КонтекстДиагностики)

	РезультатКПроверкеНаКлиенте = РезультатКПроверкеНаКлиенте(РезультатыПроверок);

	Если ЗначениеЗаполнено(РезультатКПроверкеНаКлиенте) Тогда

		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		ПараметрыОповещения.Вставить("РезультатКПроверкеНаКлиенте", РезультатКПроверкеНаКлиенте);
		ПараметрыОповещения.Вставить("РезультатыПроверок", РезультатыПроверок);

		Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиДоверенностиНаКлиенте", ЭтотОбъект,
			ПараметрыОповещения);

		ДанныеДляПроверки = РезультатКПроверкеНаКлиенте.Значение.ДанныеДляПроверки;

		МашиночитаемыеДоверенностиКлиент.ПроверитьДоверенность(Оповещение, ДанныеДляПроверки, КонтекстДиагностики);

	Иначе

		РезультатыПроверокПодписейПоМЧД = ПроверитьПодписиПоМЧДПриРегистрацииСертификатовПродолжение(
				РезультатыПроверок, КонтекстДиагностики);

		РезультатыПроверки = Новый Структура;
		РезультатыПроверки.Вставить("РезультатыПроверокПодписейПоМЧД", РезультатыПроверокПодписейПоМЧД);
		РезультатыПроверки.Вставить("КонтекстДиагностики", КонтекстДиагностики);

		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатыПроверки);

	КонецЕсли;

КонецПроцедуры

// Возвращает результат проверки подписи по МЧД по которому необходимо выполнить проверку на клиенте.
// 
// Параметры:
//  Результаты - См. ЭлектронныеДокументыЭДО.ПроверитьПодписиПоМЧДПриРегистрацииСертификатов
//
// Возвращаемое значение:
// - Неопределено
// - КлючИЗначение:
//  * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * Значение - См. МашиночитаемыеДоверенности.НовыеПараметрыПроверкиПодписи
//
Функция РезультатКПроверкеНаКлиенте(Результаты)
	Для Каждого Результат Из Результаты Цикл
		Если Результат.Значение.ТребуетсяПроверкаМЧДНаКлиенте Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область ОбработчикиПодключаемыхКоманд

// Параметры:
//  ПараметрКоманды - См. СформироватьПодписатьПодготовитьКОтправкеЭД.ПараметрКоманды
//  ПараметрыВыполненияКоманды - См. СформироватьПодписатьПодготовитьКОтправкеЭД.ПараметрыВыполненияКоманды
Процедура СформироватьПодписатьПодготовитьКОтправкеЭДЗавершить(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	НаборДействий = Новый Соответствие;
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Сформировать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
		
	ПодготовитьПараметрыВыполненияДействийНачатьВыполнениеДействийПоЭДО(ПараметрКоманды, ПараметрыВыполненияКоманды,
		НаборДействий);
	
КонецПроцедуры

// Параметры:
//  ПараметрКоманды - См. СформироватьПодписатьОтправитьЭД.ПараметрКоманды
//  ПараметрыВыполненияКоманды - См. СформироватьПодписатьОтправитьЭД.ПараметрыВыполненияКоманды
Процедура СформироватьПодписатьОтправитьЭДЗавершить(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	НаборДействий = Новый Соответствие;
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Сформировать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
	
	ПодготовитьПараметрыВыполненияДействийНачатьВыполнениеДействийПоЭДО(ПараметрКоманды, ПараметрыВыполненияКоманды,
		НаборДействий);
	
КонецПроцедуры

// Параметры:
//  ПараметрКоманды - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//                  - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ПараметрыВыполненияКоманды - Структура:
//  * Источник - ФормаКлиентскогоПриложения
//  * Оповещение - ОписаниеОповещения
//  НаборДействий - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыйНаборДействийПоЭДО
Процедура ПодготовитьПараметрыВыполненияДействийНачатьВыполнениеДействийПоЭДО(ПараметрКоманды,
	ПараметрыВыполненияКоманды, НаборДействий)
	
	ПараметрыВыполненияДействийПоЭДО = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета = ПараметрКоманды;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИСГИСНРКлиент 
			= ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектронноеАктированиеЕИСГИСНРКлиент");
		МодульЭлектронноеАктированиеЕИСГИСНРКлиент.ПодготовитьПараметрыДокументовЭДО(
			ПараметрыВыполненияКоманды,
			ПараметрыВыполненияДействийПоЭДО);
	КонецЕсли;

	Если ПараметрыВыполненияКоманды.Свойство("Оповещение") Тогда
		Оповещение = ПараметрыВыполненияКоманды.Оповещение;
	Иначе
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ОбъектыУчета", ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета);
		ПараметрыОповещения.Вставить("ПараметрыВыполненияДействийПоЭДО", ПараметрыВыполненияДействийПоЭДО);
		Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО",
			ИнтерфейсДокументовЭДОКлиент, ПараметрыОповещения);
	КонецЕсли;
	
	НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры
	
// Параметры:
//  ПараметрКоманды - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//                  - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ПараметрыВыполненияКоманды - Структура:
//  * Источник - ФормаКлиентскогоПриложения
//  * Оповещение - ОписаниеОповещения
//  ОбработчикЗавершения - ОписаниеОповещения
Процедура ВыполнитьПроверкуПроведенияПередФормированиемИПодписаниемЭД(ПараметрКоманды, ПараметрыВыполненияКоманды,
	ОбработчикЗавершения)
	
	Основания = ?(ТипЗнч(ПараметрКоманды) = Тип("Массив"), ПараметрКоманды,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрКоманды));
	
	Если Основания.Количество() > 1 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрКоманды", Основания);
		ДополнительныеПараметры.Вставить("Обработчик", ОбработчикЗавершения);
		Если ПараметрыВыполненияКоманды.Свойство("Оповещение") Тогда
			ДополнительныеПараметры.Вставить("ОповещениеПриОтказе", ПараметрыВыполненияКоманды.Оповещение);
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПроверитьПроведениеПослеВопросаПользователю",
			ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = НСтр("ru = 'Отправить электронные документы выделенных элементов?
			|Если электронных документов нет, они будут созданы автоматически.'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ИнтеграцияЭДОКлиент.ПодготовитьКДокументообороту(Основания, ОбработчикЗавершения);
	
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Результат - Неопределено,КодВозвратаДиалога
//  ДополнительныеПараметры - Структура:
//  * ОповещениеПриОтказе - ОписаниеОповещения
//  * ПараметрКоманды - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * Обработчик - ОписаниеОповещения
Процедура ПроверитьПроведениеПослеВопросаПользователю(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.Свойство("ОповещениеПриОтказе") Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриОтказе);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЭДОКлиент.ПодготовитьКДокументообороту(ДополнительныеПараметры.ПараметрКоманды,
		ДополнительныеПараметры.Обработчик);
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ТекстОшибкиНеВыбранОбъектУчета()
	Возврат НСтр("ru = 'Не выбран объект учета для отправки электронного документа'");
КонецФункции

#КонецОбласти // ОбработчикиПодключаемыхКоманд

#КонецОбласти // СлужебныеПроцедурыИФункции
