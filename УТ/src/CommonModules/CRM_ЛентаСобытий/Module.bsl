
#Область ПрограммныйИнтерфейс

// Возвращает настройки ленты событий.
//
// Параметры:
//	Пользователь - СправочникСсылка.Пользователи - Пользователь ленты событий.
//  Режим		 - Строка - Режим использования ленты.
//
// Возвращаемое значение:
//	Структура - настройки ленты событий.
//
Функция НастройкиЛенты(Знач Пользователь, Знач Режим) Экспорт
	
	ЧтениеШаблоныАвтотекста = ПравоДоступа("Чтение", Метаданные.Справочники.CRM_ШаблоныАвтотекста, Пользователь);
	ЧтениеСтатусыПисемEmailРассылки = ПравоДоступа("Чтение",
	Метаданные.РегистрыСведений.CRM_СтатусыПисемEmailРассылки,
	Пользователь);
	
	ДобавлениеБизнесПроцесс = ПравоДоступа("Добавление", Метаданные.БизнесПроцессы.CRM_БизнесПроцесс, Пользователь);
	ДобавлениеСообщениеМессенджера = ПравоДоступа("Добавление",
		 Метаданные.Документы.CRM_СообщениеМессенджера,
		 Пользователь);
	ДобавлениеСообщениеSMS = ПравоДоступа("Добавление", Метаданные.Документы.СообщениеSMS, Пользователь);
	ДобавлениеВзаимодействие = ПравоДоступа("Добавление", Метаданные.Документы.CRM_Взаимодействие, Пользователь);
	ДобавлениеЗадачи = ПравоДоступа("Добавление", Метаданные.Задачи.ЗадачаИсполнителя, Пользователь);
	ДобавлениеЗаметки = ПравоДоступа("Добавление", Метаданные.Справочники.Заметки, Пользователь);
	
	ЗакрепленныеСверху =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_ЛентаСобытий_ЗакрепленныеСверху", Режим);
	
	ДобавлениеПрисоединенныеФайлы = Ложь;
	
	Если Режим = "ЛентаКлиента" Тогда
		ДобавлениеПрисоединенныеФайлы = ПравоДоступа("Добавление",
		Метаданные.Справочники.ПартнерыПрисоединенныеФайлы, Пользователь);
	ИначеЕсли Режим = "ЛентаКонтакта" Тогда
		ДобавлениеПрисоединенныеФайлы = ПравоДоступа("Добавление",
		Метаданные.Справочники.КонтактныеЛицаПартнеровПрисоединенныеФайлы, Пользователь);
	ИначеЕсли Режим = "ЛентаПотенциальногоКлиента" Тогда
		ДобавлениеПрисоединенныеФайлы = ПравоДоступа("Добавление",
		Метаданные.Справочники.CRM_ПотенциальныеКлиентыПрисоединенныеФайлы, Пользователь);
	ИначеЕсли Режим = "ЛентаИнтереса" Тогда
		ДобавлениеПрисоединенныеФайлы = ПравоДоступа("Добавление",
		Метаданные.Справочники.CRM_ИнтересПрисоединенныеФайлы, Пользователь);
	КонецЕсли;
	
	ЗначенияНастроек = Новый Структура;
	
	ЗначенияНастроек.Вставить("Режим",                       Режим);
	ЗначенияНастроек.Вставить("ИспользоватьБП",              ДобавлениеБизнесПроцесс
	И ПолучитьФункциональнуюОпцию("CRM_ИспользоватьБизнесПроцессы"));
	ЗначенияНастроек.Вставить("ИспользоватьКП",
	ПолучитьФункциональнуюОпцию("ИспользоватьКоммерческиеПредложенияКлиентам"));
	ЗначенияНастроек.Вставить("ИспользоватьСофтФон",         ПолучитьФункциональнуюОпцию("сфпИспользоватьСофтФон"));
	ЗначенияНастроек.Вставить("ИспользоватьЧаты",            ДобавлениеСообщениеМессенджера
	И ПолучитьФункциональнуюОпцию("CRM_ИспользоватьИнтеграциюСМессенджерами"));
	ЗначенияНастроек.Вставить("ИспользоватьSMS",             ДобавлениеСообщениеSMS И ЧтениеШаблоныАвтотекста
	И ОтправкаSMS.НастройкаОтправкиSMSВыполнена());
	ЗначенияНастроек.Вставить("ВремяВСрокахЗадач",
	ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач"));
	ЗначенияНастроек.Вставить("ДоступныЗадачи",              ДобавлениеЗадачи);
	ЗначенияНастроек.Вставить("ДоступныВзаимодействия",      ДобавлениеВзаимодействие);
	ЗначенияНастроек.Вставить("ДоступныПрисоединенныефайлы", ДобавлениеПрисоединенныеФайлы);
	ЗначенияНастроек.Вставить("ДоступныПримечания",          ДобавлениеЗаметки);
	
	ДоступныеУчетныеЗаписи = Новый СписокЗначений;
	CRM_УправлениеЭлектроннойПочтой.ДоступныеУчетныеЗаписиДляОтправкиБезУчетаИспользования(ДоступныеУчетныеЗаписи,,
	Пользователь);
	ЗначенияНастроек.Вставить("ДоступнаПочта",               ЧтениеСтатусыПисемEmailРассылки
		И ДоступныеУчетныеЗаписи.Количество() > 0);
	ЗначенияНастроек.Вставить("ЗакрепленныеСверху",          ЗакрепленныеСверху);
	
	Возврат ЗначенияНастроек;
	
КонецФункции

// Выполняет настройку ленты.
//
// Параметры:
//	Форма		   - ФормаКлиентскогоПриложения - Форма ленты событий.
//  НастройкиЛенты - Структура - Настройки ленты событий.
//
Процедура НастроитьЛенту(Форма, Знач НастройкиЛенты) Экспорт
	
	Элементы = Форма.Элементы;
	
	// Предварительная инициализация.
	Форма.БыстрыйВвод_ТекущийТипОбъекта = "Примечание";
	
	Элементы.ОбычныйВвод_ПоказатьЕще.Заголовок = НСтр("ru='Еще';en='More'") + " " + Символ(9660);
	
	Форма.Лента_HTML = CRM_ЛентаСобытийПовтИсп.ТекстЗаглушкиЛенты();
	
	ШаблонКартинки = Документы.CRM_Интерес.ПолучитьМакет("Лента_Картинки");
	Форма.Лента_АдресКартинок = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		Новый Картинка(ШаблонКартинки), Форма.УникальныйИдентификатор);
	
	ШаблонКартинкиФайлов = Документы.CRM_Интерес.ПолучитьМакет("Лента_КартинкиФайлов");
	Форма.Лента_АдресКартинокФайлов = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		Новый Картинка(ШаблонКартинкиФайлов), Форма.УникальныйИдентификатор);
	
	Форма.Лента_АдресаКартинокЗакрепа.Добавить(
		CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(БиблиотекаКартинок.CRM_Открепить, Форма.УникальныйИдентификатор));
	Форма.Лента_АдресаКартинокЗакрепа.Добавить(
		CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(БиблиотекаКартинок.CRM_Закрепить, Форма.УникальныйИдентификатор));
	
	Форма.Лента_АдресКартинкиСохраненияФайла	= CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.CRM_СохранитьКак, Форма.УникальныйИдентификатор);
	Форма.Лента_АдресКартинкиКопированияВБуфер	= CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.СкопироватьВБуферОбмена, Форма.УникальныйИдентификатор);
	
	Форма.Лента_КартинкаФильтрАктивный = БиблиотекаКартинок.CRM_ФильтрАктивный;
	Форма.Лента_КартинкаФильтрНеактивный = БиблиотекаКартинок.CRM_ФильтрНеАктивный;
	
	Форма.Лента_КоличествоОбъектовИстории = 50;
	
	Форма.Лента_ЗакрепленныеСверху = НастройкиЛенты.ЗакрепленныеСверху;
	
	// Отборы - создание элементов и чтение настроек.
	Для Сч = 1 По Форма.Лента_Отбор.Количество() - 1 Цикл
		Элементы.Удалить(Элементы["Лента_Отбор" + Сч]);
	КонецЦикла;
	Форма.Лента_Отбор.Очистить();
	
	АктуальныеНастройкиОтбора = CRM_ЛентаСобытийПовтИсп.ОтборыОбъектовЛенты(НастройкиЛенты);
	Если НастройкиЛенты.Свойство("ПараметрыОтбора") Тогда
		ТекущиеНастройкиОтбора = НастройкиЛенты.ПараметрыОтбора;
		Для Каждого НастройкаОтбора Из АктуальныеНастройкиОтбора Цикл
			НоваяНастройка = Форма.Лента_Отбор.Добавить();
			НоваяНастройка.Значение = НастройкаОтбора.Значение;
			НоваяНастройка.Представление = НастройкаОтбора.Представление;
			Если ТекущиеНастройкиОтбора.Свойство(НастройкаОтбора.Значение) Тогда
				НоваяНастройка.Пометка = ТекущиеНастройкиОтбора[НастройкаОтбора.Значение];
			КонецЕсли;
		КонецЦикла;
	Иначе
		СохраненныеНастройкиОтбора = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_ЛентаСобытий_Отбор",
			НастройкиЛенты.Режим, АктуальныеНастройкиОтбора);
		Для Каждого НастройкаОтбора Из АктуальныеНастройкиОтбора Цикл
			НоваяНастройка = Форма.Лента_Отбор.Добавить();
			СохраненнаяНастройка = СохраненныеНастройкиОтбора.НайтиПоЗначению(НастройкаОтбора.Значение);
			Если СохраненнаяНастройка = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НоваяНастройка, НастройкаОтбора);
			Иначе
				ЗаполнитьЗначенияСвойств(НоваяНастройка, СохраненнаяНастройка);
				НоваяНастройка.Представление = НастройкаОтбора.Представление;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НастройкаВсеСобытия = Форма.Лента_Отбор.Получить(0);
	Если НастройкаВсеСобытия.Пометка И Не Форма.Лента_ЗакрепленныеСверху Тогда
		Элементы.Лента_ПоказатьОтборы.Картинка = Форма.Лента_КартинкаФильтрНеактивный;
	Иначе
		Элементы.Лента_ПоказатьОтборы.Картинка = Форма.Лента_КартинкаФильтрАктивный;
	КонецЕсли;
	
	Для Сч = 1 По Форма.Лента_Отбор.Количество() - 1 Цикл
		
		ШиринаПредставления = 20;
		ИмяНастройки = Форма.Лента_Отбор.Получить(Сч).Значение;
		Если Лев(ИмяНастройки, 8) = "Входящие" Тогда
			
			КонтейнерОтбора = Элементы.Добавить("Лента_Направления" + Сч, Тип("ГруппаФормы"), Элементы.Лента_СписокОтборов);
			КонтейнерОтбора.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			КонтейнерОтбора.Отображение = ОтображениеОбычнойГруппы.Нет;
			КонтейнерОтбора.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			КонтейнерОтбора.Высота = 1;
			КонтейнерОтбора.РастягиватьПоВертикали = Ложь;
			КонтейнерОтбора.ОтображатьЗаголовок = Ложь;
			
			ОтступОтбора = Элементы.Добавить("Лента_ОтступОтбора" + Сч, Тип("ДекорацияФормы"), КонтейнерОтбора);
			ОтступОтбора.Вид = ВидДекорацииФормы.Надпись;
			ОтступОтбора.Высота = 1;
			ОтступОтбора.РастягиватьПоВертикали = Ложь;
			ОтступОтбора.Ширина = 1;
			ОтступОтбора.РастягиватьПоГоризонтали = Ложь;
			
			ШиринаПредставления = 7;
			
		ИначеЕсли Лев(ИмяНастройки, 9) = "Исходящие" Тогда
			
			КонтейнерОтбора = Элементы["Лента_Направления" + (Сч - 1)];
			ШиринаПредставления = 8;
			
		Иначе
			КонтейнерОтбора = Элементы.Лента_СписокОтборов;
		КонецЕсли;
		
		ГруппаОтбора = Элементы.Добавить("Лента_Отбор" + Сч, Тип("ГруппаФормы"), КонтейнерОтбора);
		ГруппаОтбора.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаОтбора.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаОтбора.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаОтбора.Высота = 1;
		ГруппаОтбора.РастягиватьПоВертикали = Ложь;
		ГруппаОтбора.ОтображатьЗаголовок = Ложь;
		
		ПометкаОтбора = Элементы.Добавить("Лента_Отбор_" + ИмяНастройки + "_Пометка", Тип("ПолеФормы"), ГруппаОтбора);
		ПометкаОтбора.Вид = ВидПоляФормы.ПолеФлажка;
		ПометкаОтбора.ПутьКДанным = "Лента_Отбор[" + Сч + "].Пометка";
		ПометкаОтбора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПометкаОтбора.УстановитьДействие("ПриИзменении", "Подключаемый_Лента_ОтборПриИзменении");
		
		ПредставлениеОтбора = Элементы.Добавить("Лента_Отбор_" + Сч + "_Представление", Тип("ПолеФормы"), ГруппаОтбора);
		ПредставлениеОтбора.Вид = ВидПоляФормы.ПолеНадписи;
		ПредставлениеОтбора.ПутьКДанным = "Лента_Отбор[" + Сч + "].Представление";
		ПредставлениеОтбора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПредставлениеОтбора.Ширина = ШиринаПредставления;
		ПредставлениеОтбора.РастягиватьПоГоризонтали = Ложь;
		ПредставлениеОтбора.Высота = 1;
		ПредставлениеОтбора.РастягиватьПоВертикали = Ложь;
		
	КонецЦикла;
	
	Форма.Элементы.Переместить(Форма.Элементы.Лента_ОтборЗакрепленных, Форма.Элементы.Лента_СписокОтборов);
	
КонецПроцедуры

// Создает объект в ленте событий.
//
// Параметры:
//  Режим			 - Строка - Режим использования ленты.
//  ТипОбъекта		 - Строка - Тип создаваемого объекта.
//	ДанныеЗаполнения - Произвольный - Данные заполнения.
//
Процедура СоздатьОбъектБыстрыйВвод(Знач Режим, Знач ТипОбъекта, Знач ДанныеЗаполнения) Экспорт
	
	Если ТипОбъекта = "Примечание" Тогда
		
		ЗаметкаОбъект = Справочники.Заметки.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ЗаметкаОбъект, ДанныеЗаполнения);
		
		ДокументHTML	= Взаимодействия.ПолучитьДокументHTMLИзОбычногоТекста(ДанныеЗаполнения.ТекстСодержания);
		ТекстHTML		= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		ТекстHTML		= СтрЗаменить(ТекстHTML, "size=""2""", "");
	
		ФорматированныйТекст = Новый ФорматированныйДокумент;
		ФорматированныйТекст.УстановитьHTML(ТекстHTML, Новый Структура);
		
		Содержание = Новый ХранилищеЗначения(ФорматированныйТекст, Новый СжатиеДанных(9));
		CRM_СодержаниеHTML = Новый ХранилищеЗначения(ТекстHTML, Новый СжатиеДанных(9));
		
		ЗаметкаОбъект.Содержание         = Содержание;
		ЗаметкаОбъект.CRM_СодержаниеHTML = CRM_СодержаниеHTML;
		
		ЗаметкаОбъект.Записать();
		
	ИначеЕсли ТипОбъекта = "Взаимодействие" Тогда
		
		ДокументОбъект = Документы.CRM_Взаимодействие.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.Баллы = ДокументОбъект.ВидВзаимодействия.Баллы;
		Если ЗначениеЗаполнено(ДокументОбъект.Партнер) Тогда
			НоваяСтрока = ДокументОбъект.СторонниеЛица.Добавить();
			НоваяСтрока.Партнер = ДокументОбъект.Партнер;
			НоваяСтрока.КонтактноеЛицо = ДокументОбъект.КонтактноеЛицо;
			НоваяСтрока.ПосетитМероприятие = 2;
		КонецЕсли;
		ДокументОбъект.Записать();
		
	ИначеЕсли ТипОбъекта = "Задача" Тогда
		
		ЗадачаОбъект = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗаполнитьЗначенияСвойств(ЗадачаОбъект, ДанныеЗаполнения);
		ЗадачаОбъект.Записать();
		
	ИначеЕсли ТипОбъекта = "Письмо" Тогда
		
		СоздатьЭлектронноеПисьмоВФормеИнтереса(Режим, ДанныеЗаполнения);
		
	ИначеЕсли ТипОбъекта = "Чат" Тогда
		
		//ДанныеЗаполнения.Вставить("Диалог", Новый Структура);
		//ДанныеЗаполнения.Диалог.Вставить("ID_Пользователя", ДанныеЗаполнения.Адрес);
		//ДанныеЗаполнения.Диалог.Вставить("Контакт", ?(ЗначениеЗаполнено(ДанныеЗаполнения.Получатель),
			// ДанныеЗаполнения.Получатель,
			// ДанныеЗаполнения.ПредставлениеПолучателя));
		//ДанныеЗаполнения.Диалог.Вставить("КонтактПредставление", ДанныеЗаполнения.ПредставлениеПолучателя);
		//	ДанныеЗаполнения.Диалог.Вставить("Группа", ДанныеЗаполнения.Группа); 
		//	ДанныеЗаполнения.Диалог.Вставить("ГруппаПредставление", ДанныеЗаполнения.Группа);
		//ДанныеЗаполнения.Диалог.Вставить("УчетнаяЗапись", ДанныеЗаполнения.УчетнаяЗапись);
		//ДанныеЗаполнения.Диалог.Вставить("ЭтоНомерТелефона", ДанныеЗаполнения.ЭтоНомерТелефона);
		
		СтруктураДиалога = Новый Структура;
		СтруктураДиалога.Вставить("ID_Пользователя", ДанныеЗаполнения.Адрес);
		СтруктураДиалога.Вставить("Контакт", ?(ЗначениеЗаполнено(ДанныеЗаполнения.Получатель),
			 ДанныеЗаполнения.Получатель,
			 ДанныеЗаполнения.ПредставлениеПолучателя));
		СтруктураДиалога.Вставить("КонтактПредставление", ДанныеЗаполнения.ПредставлениеПолучателя);
			СтруктураДиалога.Вставить("Группа", ДанныеЗаполнения.Группа); 
			СтруктураДиалога.Вставить("ГруппаПредставление", ДанныеЗаполнения.Группа);
		СтруктураДиалога.Вставить("УчетнаяЗапись", ДанныеЗаполнения.УчетнаяЗапись);
		СтруктураДиалога.Вставить("ЭтоНомерТелефона", ДанныеЗаполнения.ЭтоНомерТелефона);
		СтруктураДиалога.Вставить("Ответственный", Пользователи.ТекущийПользователь());
		
		ДанныеЗаполнения.Вставить("Диалог");
		
		ДанныеЗаполнения.Диалог = Справочники.CRM_Диалоги.ПолучитьАктивныйДиалог(СтруктураДиалога);
		
		Если Режим = "ЛентаИнтереса" Тогда // связь диалога с интересом. Необходима при создании диалога из ленты.
			
			ДиалогСвязанСТекущимИнтересом = Справочники.CRM_Диалоги.СвязанСИнтересом(ДанныеЗаполнения.Диалог,
				 ДанныеЗаполнения.ДокументОснование);
			Если Справочники.CRM_Диалоги.СвязанСИнтересом(ДанныеЗаполнения.Диалог) 	И Не ДиалогСвязанСТекущимИнтересом  Тогда
				// Если диалог связан с интересом и это не текущий интерес, то диалог закрывается и создается новый.
				Справочники.CRM_Диалоги.ЗавершитьДиалог(ДанныеЗаполнения.Диалог);
				ДанныеЗаполнения.Диалог = Справочники.CRM_Диалоги.СоздатьДиалог(СтруктураДиалога);
				ДиалогСвязанСТекущимИнтересом = Ложь;
			КонецЕсли;
			
			Если Не ДиалогСвязанСТекущимИнтересом Тогда
				
				ТаблицаСвязей = Новый ТаблицаЗначений;
				ТаблицаСвязей.Колонки.Добавить("Ссылка");
				ТаблицаСвязей.Колонки.Добавить("СостояниеИнтереса");
				ТаблицаСвязей.Колонки.Добавить("ВведенНаОсновании");
				ТаблицаСвязей.Колонки.Добавить("ОсновнойИнтерес");
				
				НоваяСтрока = ТаблицаСвязей.Добавить();
				НоваяСтрока.Ссылка = ДанныеЗаполнения.ДокументОснование;
				НоваяСтрока.СостояниеИнтереса = ДанныеЗаполнения.СостояниеИнтереса;
				НоваяСтрока.ВведенНаОсновании = Ложь;
				НоваяСтрока.ОсновнойИнтерес = Истина;
				
				ДиалогОбъект = ДанныеЗаполнения.Диалог.ПолучитьОбъект(); 
				ДиалогОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов", ТаблицаСвязей);
				//ДанныеЗаполнения.Диалог.Вставить("CRM_ТаблицаИнтересов", ТаблицаСвязей);
				ДиалогОбъект.Записать();
			КонецЕсли;
			
			Если Не CRM_РаботаСМессенджерамиСервер.ПринятТекущимПользователем(ДанныеЗаполнения.Диалог) Тогда
				CRM_РаботаСМессенджерамиСервер.ПринятьДиалог(ДанныеЗаполнения.Диалог);
			КонецЕсли;
			
		КонецЕсли;
		
		СообщениеСсылка = CRM_РаботаСМессенджерамиСервер.ОтправитьСообщение(
			ДанныеЗаполнения.Содержание,
			ДанныеЗаполнения.Диалог,
			Новый СписокЗначений);
		
		Если Режим = "ЛентаИнтереса" И ЗначениеЗаполнено(СообщениеСсылка) Тогда
			
			ТаблицаСвязей = Новый ТаблицаЗначений;
			ТаблицаСвязей.Колонки.Добавить("Ссылка");
			ТаблицаСвязей.Колонки.Добавить("СостояниеИнтереса");
			ТаблицаСвязей.Колонки.Добавить("ВведенНаОсновании");
			ТаблицаСвязей.Колонки.Добавить("ОсновнойИнтерес");
			
			НоваяСтрока = ТаблицаСвязей.Добавить();
			НоваяСтрока.Ссылка = ДанныеЗаполнения.ДокументОснование;
			НоваяСтрока.СостояниеИнтереса = ДанныеЗаполнения.СостояниеИнтереса;
			НоваяСтрока.ВведенНаОсновании = Ложь;
			НоваяСтрока.ОсновнойИнтерес = Истина;
			
			СообщениеОбъект = СообщениеСсылка.ПолучитьОбъект();
			СообщениеОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов", ТаблицаСвязей);
			СообщениеОбъект.Записать();
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "Файл" Тогда
		
		Для Каждого ДанныеФайла Из ДанныеЗаполнения.ДанныеВложений Цикл
			РаботаСФайлами.ДобавитьФайл(
				ДанныеФайла.ПараметрыФайла,
				ДанныеФайла.АдресФайлаВоВременномХранилище, ,
				ДанныеФайла.Описание);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет отбор ленты.
//
// Параметры:
//	Отбор - СписокЗначений - сохраняемый отбор ленты.
//  Режим - Строка - Режим использования ленты.
//
Процедура СохранитьОтборЛенты(Знач Отбор, Знач Режим) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("CRM_ЛентаСобытий_Отбор", Режим, Отбор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриЗаписиОбъектаЛенты(Источник) Экспорт
	
	ИсключаемыеТипы = CRM_ЛентаСобытийПовтИсп.ИсключаемыеТипыСсылокЛенты();
	Если ИсключаемыеТипы.Найти(ТипЗнч(Источник.Ссылка)) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъекта = ТипОбъектаЛентыСтрокой(Источник);
	
	Данные = Новый Структура;
	Данные.Вставить("Ссылка", Неопределено);
	Данные.Вставить("ТипОбъекта", ТипОбъекта);
	Данные.Вставить("ВидОбъекта", ТипОбъекта);
	Данные.Вставить("Дата", '00010101');
	Данные.Вставить("ПометкаУдаления", Ложь);
	Данные.Вставить("Проведен", Ложь);
	
	ОписанияОбъектов = CRM_ЛентаСобытийПовтИсп.ОписанияОбъектовЛенты();
	ПоляОбъекта = ОписанияОбъектов[ТипОбъекта].Поля;
	Для Каждого ОписаниеПоля Из ПоляОбъекта Цикл
		Данные.Вставить(ОписаниеПоля.Ключ, Неопределено);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Данные, Источник);
	
	Если ТипОбъекта = "Взаимодействие" Тогда
		
		#Область Взаимодействие
		
		ТипСостояния = Источник.СтатусВзаимодействия.ТипСостояния;
		Направление = Источник.ВидВзаимодействия.Направление;
		ВидСобытия = Источник.ВидВзаимодействия.ВидСобытия;
		
		Если ТипСостояния = Перечисления.CRM_ТипыСостоянийСобытий.Запланировано
			Или ТипСостояния = Перечисления.CRM_ТипыСостоянийСобытий.ВРаботе Тогда
			
			Данные.ВидОбъекта = "ВзаимодействиеЗапланированное";
			Данные.Дата = Источник.ПлановаяДата;
			
		Иначе
			
			Если ВидСобытия = Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча Тогда
				Данные.ВидОбъекта = "ВзаимодействиеВстреча";
			ИначеЕсли ВидСобытия = Перечисления.CRM_ВидыСобытий.ТелефонныйЗвонок Тогда
				Если Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Входящее Тогда
					Данные.ВидОбъекта = "ВзаимодействиеТелефонныйЗвонокВходящий";
				Иначе
					Данные.ВидОбъекта = "ВзаимодействиеТелефонныйЗвонокИсходящий";
				КонецЕсли;
			ИначеЕсли ВидСобытия = Перечисления.CRM_ВидыСобытий.ЭлектронноеПисьмо Тогда
				Если Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Входящее Тогда
					Данные.ВидОбъекта = "ВзаимодействиеЭлектронноеПисьмоВходящее";
				Иначе
					Данные.ВидОбъекта = "ВзаимодействиеЭлектронноеПисьмоИсходящее";
				КонецЕсли;
			Иначе
				Данные.ВидОбъекта = "ВзаимодействиеПрочее";
			КонецЕсли;
			
			Если ТипСостояния = Перечисления.CRM_ТипыСостоянийСобытий.Завершено Тогда
				Данные.Дата = Источник.ДатаЗавершенияВзаимодействия;
			Иначе
				Данные.Дата = Источник.ПлановаяДатаЗавершение;
			КонецЕсли;
			
		КонецЕсли;
		
		Данные.ТипСостояния = ТипСостояния;
		Данные.Направление = Направление;
		
		#КонецОбласти
		
	ИначеЕсли ТипОбъекта = "Задача" Тогда
		
		#Область Задача
		
		Если ЗначениеЗаполнено(Источник.CRM_ТочкаМаршрута)
			И Источник.CRM_ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
			Возврат;
		КонецЕсли;
		
		Если Источник.Выполнена Или Источник.ПометкаУдаления Тогда
			Данные.ВидОбъекта = "Задача";
			Если Источник.ПометкаУдаления Тогда
				Данные.Дата = Источник.СрокИсполнения;
			Иначе
				Данные.Дата = Источник.ДатаИсполнения;
			КонецЕсли;
		Иначе
			Данные.ВидОбъекта = "ЗадачаЗапланированная";
			Данные.Дата = Источник.СрокИсполнения;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Данные.Исполнитель) Тогда
			Данные.Исполнитель = Источник.РольИсполнителя;
		КонецЕсли;
		
		#КонецОбласти
		
	ИначеЕсли ТипОбъекта = "ТелефонныйЗвонок" Тогда
		
		#Область ТелефонныйЗвонок
		
		Если Источник.Входящий Тогда
			Данные.ВидОбъекта = "ТелефонныйЗвонокВходящий";
		Иначе
			Данные.ВидОбъекта = "ТелефонныйЗвонокИсходящий";
		КонецЕсли;
		
		#КонецОбласти
		
	ИначеЕсли ТипОбъекта = "ЭлектронноеПисьмоВходящее" Тогда
		
		#Область ЭлектронноеПисьмоВходящее
		
		Данные.Дата = Источник.ДатаПолучения;
		
		#КонецОбласти
		
	ИначеЕсли ТипОбъекта = "ЭлектронноеПисьмоИсходящее" Тогда
		
		#Область ЭлектронноеПисьмоИсходящее
		
		Если Источник.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено Тогда
			Данные.Дата = Источник.ДатаОтправления;
		КонецЕсли;
		
		#КонецОбласти
		
	ИначеЕсли ТипОбъекта = "Диалог" Тогда
		
		#Область Диалог
		
		Если Не ЗначениеЗаполнено(Данные.Ответственный) Тогда
			Данные.Ответственный = Источник.CRM_РольОтветственного;
		КонецЕсли;
		
		#КонецОбласти
		
	ИначеЕсли ТипОбъекта = "Интерес" Тогда
		
		#Область Интерес
		
		Если Источник.ЭтоПоддержка Тогда
			Данные.ВидОбъекта = "ОбращениеПоддержки";
		КонецЕсли;
		
		#КонецОбласти
		
	ИначеЕсли ТипОбъекта = "КоммерческоеПредложение" Тогда
		
		#Область КоммерческоеПредложение
		
		Данные.Синоним = Источник.Метаданные().Синоним;
		
		#КонецОбласти
		
	ИначеЕсли ТипОбъекта = "ПрочийДокумент" Тогда
		
		#Область ПрочийДокумент
		
		Данные.Синоним = Источник.Метаданные().Синоним;
		
		#КонецОбласти
		
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.CRM_ДанныеКарточекЛенты.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Данные);
	Для Каждого ОписаниеПоля Из ПоляОбъекта Цикл
		МенеджерЗаписи[ОписаниеПоля.Значение] = Данные[ОписаниеПоля.Ключ];
	КонецЦикла;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Функция СформироватьЛенту(Знач ПараметрыЛенты, ПолучателиЧата = Неопределено) Экспорт
	
	Если ПараметрыЛенты.Пустая Тогда
		Возврат CRM_ЛентаСобытийПовтИсп.ТекстЗаглушкиЛенты();
	КонецЕсли;
	
	ШаблонЛенты = CRM_ЛентаСобытийПовтИсп.ТекстШаблонаЛенты();
	ШаблонЛенты = СтрЗаменить(ШаблонЛенты, "FILES_SPRITE_URL", ПараметрыЛенты.АдресКартинокФайлов);
	ШаблонЛенты = СтрЗаменить(ШаблонЛенты, "SPRITE_URL", ПараметрыЛенты.АдресКартинок);
	ШаблонЛенты = СтрЗаменить(ШаблонЛенты, "UNPIN_IMG_URL", ПараметрыЛенты.АдресаКартинокЗакрепа[0].Значение);
	ШаблонЛенты = СтрЗаменить(ШаблонЛенты, "PIN_IMG_URL", ПараметрыЛенты.АдресаКартинокЗакрепа[1].Значение);
	ШаблонЛенты = СтрЗаменить(ШаблонЛенты, "DOWNLOAD_IMG_URL", ПараметрыЛенты.АдресКартинкиСохраненияФайла);
	ШаблонЛенты = СтрЗаменить(ШаблонЛенты, "COPY_IMG_URL", ПараметрыЛенты.АдресКартинкиКопированияВБуфер);
	
	ЧтениеHTML = Новый ЧтениеHTML;
	
	ЧтениеHTML.УстановитьСтроку(ШаблонЛенты);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
	
	#Область ИнициализацияКонтекста
	
	Контекст = Новый Структура;
	Контекст.Вставить("Режим", ПараметрыЛенты.Режим);
	Контекст.Вставить("Прокрутить", ПараметрыЛенты.Прокрутить);
	Контекст.Вставить("ВывестиОбъектовИстории", ПараметрыЛенты.ОбъектовИстории);
	Контекст.Вставить("ВсегоОбъектовИстории", 0);
	Контекст.Вставить("ВыведеноОбъектовИстории", 0);
	Контекст.Вставить("СчетчикГруппировки", 0);
	Контекст.Вставить("ВыведенЗаголовокЗапланировано", Ложь);
	Контекст.Вставить("ВыведенЗаголовокЗакрепленныеОбъекты", Ложь);
	Контекст.Вставить("ЗаполнитьПолучателейЧата", Ложь);
	Контекст.Вставить("ПолучателиЧата", Неопределено);
	Контекст.Вставить("МассивОбъектов", Неопределено);
	Контекст.Вставить("ДатаСегодня", '00010101');
	Контекст.Вставить("ДатаВчера", '00010101');
	Контекст.Вставить("ДатаЗавтра", '00010101');
	Контекст.Вставить("ТекущийГод", 0);
	Контекст.Вставить("ДобавитьКнопкуРаскрыть", Ложь);
	Контекст.Вставить("ТипОбъектаПредыдущий", "");
	Контекст.Вставить("ДатаБезВремениПредыдущая", '00010101');
	Контекст.Вставить("РазделПредыдущий", 0);
	Контекст.Вставить("ПредставлениеДня", "");
	Контекст.Вставить("БлокОбъектПредыдущий", Неопределено);
	Контекст.Вставить("БлокОбложкаЛенты", Неопределено);
	Контекст.Вставить("БлокГруппаОбъектов", Неопределено);
	Контекст.Вставить("БлокСписокКоманд", Неопределено);
	Контекст.Вставить("НадписьПоказать", Неопределено);
	Контекст.Вставить("НадписьСкрыть", Неопределено);
	Контекст.Вставить("ДобавитьКомандыРаботыСФайлами", Ложь);
	Контекст.Вставить("НомерРазделаЗапланировано", 0);
	Контекст.Вставить("НомерРазделаЗакреплено", 0);
	
	Контекст.НомерРазделаЗапланировано = ?(ПараметрыЛенты.ЗакрепленныеСверху, 1, 0);
	Контекст.НомерРазделаЗакреплено = ?(ПараметрыЛенты.ЗакрепленныеСверху, 0, 1);
	
	Если ПолучателиЧата <> Неопределено Тогда
		Контекст.ЗаполнитьПолучателейЧата = Истина;
		Контекст.ПолучателиЧата = НоваяТаблицаПолучателейЧата();
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЛенты.Объект) = Тип("Массив") Тогда
		МассивОбъектов = ПараметрыЛенты.Объект;
		Если ПараметрыЛенты.Свойство("ОбъектФормы") Тогда
			МассивОбъектов.Добавить(ПараметрыЛенты.ОбъектФормы);
		КонецЕсли;
	Иначе
		МассивОбъектов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыЛенты.Объект);
	КонецЕсли;
	Контекст.МассивОбъектов = МассивОбъектов;
	
	СекундВСутках = 86400;
	Контекст.ДатаСегодня = НачалоДня(ТекущаяДатаСеанса());
	Контекст.ДатаВчера = Контекст.ДатаСегодня - СекундВСутках;
	Контекст.ДатаЗавтра = Контекст.ДатаСегодня + СекундВСутках;
	Контекст.ТекущийГод = Год(Контекст.ДатаСегодня);
	
	Контекст.БлокОбложкаЛенты = ДокументHTML.ПолучитьЭлементПоИдентификатору("wrapper");
	
	#КонецОбласти
	
	#Область ОтборыИПараметрыЗапроса
	
	ВключенныеВидыОбъектов = ВидыОбъектовЛентыПоОтбору(ПараметрыЛенты.Отбор);
	ДоступныеТипы = CRM_ЛентаСобытийПовтИсп.ДоступныеТипыСсылокЛенты();
	
	ПараметрыЗапросаЛенты = Новый Структура;
	ПараметрыЗапросаЛенты.Вставить("Режим",						ПараметрыЛенты.Режим);
	ПараметрыЗапросаЛенты.Вставить("ОбъектовИстории",			ПараметрыЛенты.ОбъектовИстории);
	ПараметрыЗапросаЛенты.Вставить("ВключенныеВидыОбъектов",	СтрСоединить(ВключенныеВидыОбъектов, ","));
	ПараметрыЗапросаЛенты.Вставить("ЗакрепленныеСверху",		ПараметрыЛенты.ЗакрепленныеСверху);
	
	Запрос = Новый Запрос;
	Запрос.Текст = CRM_ЛентаСобытийПовтИсп.ТекстЗапросаДанныхЛенты(ПараметрыЗапросаЛенты);
	
	Запрос.Параметры.Вставить("Режим",						ПараметрыЛенты.Режим);
	Запрос.Параметры.Вставить("Объекты",					Контекст.МассивОбъектов);
	Запрос.Параметры.Вставить("ВключенныеВидыОбъектов",		ВключенныеВидыОбъектов);
	Запрос.Параметры.Вставить("ТекущийПользователь",		Пользователи.ТекущийПользователь());
	Запрос.Параметры.Вставить("ДоступныеТипы", 				ДоступныеТипы);
	
	Запрос.УстановитьПараметр("НомерРазделаЗапланировано", Контекст.НомерРазделаЗапланировано);
	Запрос.УстановитьПараметр("НомерРазделаЗакреплено", Контекст.НомерРазделаЗакреплено);
	
	Если ПараметрыЛенты.Режим = "ЛентаКлиента" Тогда
		
		ЗапросКонтакты = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контакты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК Контакты
		|ГДЕ
		|	Контакты.Владелец В(&Объекты)");
		ЗапросКонтакты.Параметры.Вставить("Объекты", Контекст.МассивОбъектов);
		ДоступныеКонтакты = ЗапросКонтакты.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		ДоступныеКонтакты.Добавить(Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
		Запрос.Параметры.Вставить("ДоступныеКонтакты", ДоступныеКонтакты);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПолучениеДанных
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатЗапросаКоличество = РезультатЗапроса[5];
	Если Не РезультатЗапросаКоличество.Пустой() Тогда
		ВыборкаКоличество = РезультатЗапросаКоличество.Выбрать();
		ВыборкаКоличество.Следующий();
		Контекст.ВсегоОбъектовИстории = ВыборкаКоличество.Количество;
	КонецЕсли;
	РезультатЗапросаОбъекты = РезультатЗапроса[6];
	Если РезультатЗапросаОбъекты.Пустой() Тогда
		Возврат CRM_ЛентаСобытийПовтИсп.ТекстЗаглушкиЛенты();
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВыводДанных
	
	БлокОбъект = Неопределено;
	ПараметрыОбъекта = Неопределено;
	ПоляОбъекта = Неопределено;
	
	ОписанияОбъектов = CRM_ЛентаСобытийПовтИсп.ОписанияОбъектовЛенты();
	
	// Вывод сделан исходя из необходимости вывести ленту за один обход выборки без итогов и группировок.
	ВыборкаОбъекты = РезультатЗапросаОбъекты.Выбрать();
	Пока ВыборкаОбъекты.Следующий() Цикл
		
		Контекст.ДобавитьКнопкуРаскрыть = Ложь;
		Контекст.ДобавитьКомандыРаботыСФайлами = Ложь;
		
		// Данные объекта ленты для вывода.
		ДанныеОбъекта = СтруктураДанныхОбъектаЛенты();
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ВыборкаОбъекты);
		
		Если ВыборкаОбъекты.ТипОбъекта <> Контекст.ТипОбъектаПредыдущий Тогда
			ПараметрыОбъекта = ОписанияОбъектов[ВыборкаОбъекты.ТипОбъекта].Параметры;
			ПоляОбъекта = ОписанияОбъектов[ВыборкаОбъекты.ТипОбъекта].Поля;
		КонецЕсли;
		
		Для Каждого ОписаниеПоля Из ПоляОбъекта Цикл
			ДанныеОбъекта.Вставить(ОписаниеПоля.Ключ, ВыборкаОбъекты[ОписаниеПоля.Значение]);
		КонецЦикла;
		
		// Добавление заголовка раздела "Запланировано" или группировки по дате.
		ДобавитьHTMLБлокЗаголовкаГруппировки(ДокументHTML, ДанныеОбъекта, Контекст);
		
		ПредставлениеВремени = Формат(ДанныеОбъекта.Дата, "ДФ=HH:mm");
		Если ДанныеОбъекта.ТипОбъекта = "Задача" И ДанныеОбъекта.Раздел = Контекст.НомерРазделаЗапланировано Тогда
			ДанныеОбъекта.ПредставлениеДаты = Контекст.ПредставлениеДня + НСтр("ru=' до ';en=' to '") + ПредставлениеВремени;
		ИначеЕсли (ДанныеОбъекта.ТипОбъекта = "Взаимодействие" И ДанныеОбъекта.Раздел = Контекст.НомерРазделаЗапланировано)
			Или ДанныеОбъекта.Раздел = Контекст.НомерРазделаЗакреплено Тогда
			ДанныеОбъекта.ПредставлениеДаты = Контекст.ПредставлениеДня + " " + ПредставлениеВремени;
		ИначеЕсли ДанныеОбъекта.ТипОбъекта = "Задача" И ДанныеОбъекта.Раздел = 2 Тогда
			ДанныеОбъекта.ПредставлениеДаты = НСтр("ru='Завершена ';en='Done'") + ПредставлениеВремени;
		Иначе
			ДанныеОбъекта.ПредставлениеДаты = ПредставлениеВремени;
		КонецЕсли;
		
		// Добавление якоря для прокрутки документа при выводе.
		Если Контекст.Прокрутить И Контекст.ВыведеноОбъектовИстории = Контекст.ВывестиОбъектовИстории - 50 Тогда
			ДобавитьHTMLЯкорьПрокрутки(ДокументHTML, Контекст);
		КонецЕсли;
		
		// Добавление блока объекта.
		ДобавитьHTMLБлокОбъект(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
		
		// Отрисовка содержиого объекта.
		ЗаполнитьHTMLОбъекта(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
		
		// Добавление команд загрузки и копирования вложений.
		Если Контекст.ДобавитьКомандыРаботыСФайлами Тогда
			ДобавитьHTMLКомандыСохраненияИКопированияВложений(ДокументHTML, БлокОбъект, ДанныеОбъекта);
		КонецЕсли;
		
		// Добавление кнопки Закрепить/Открепить
		ДобавитьHTMLКнопкуЗакрепитьОткрепить(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта);
		
		// Добавление команд меню объекта.
		Если ПараметрыОбъекта.ЕстьКоманды Тогда
			ДобавитьHTMLКомандыМенюОбъекта(ДокументHTML, БлокОбъект, ДанныеОбъекта, Контекст);
		КонецЕсли;
		
		// Добавление команд загрузки и копирования вложений.
		Если ПараметрыОбъекта.ЕстьКоманды И Контекст.ДобавитьКомандыРаботыСФайлами Тогда
			ДобавитьHTMLКомандыРаботыСФайлами(ДокументHTML, БлокОбъект, ДанныеОбъекта, Контекст);
		КонецЕсли;
		
		// Кнопка раскрытия со стрелкой.
		Если Контекст.ДобавитьКнопкуРаскрыть Тогда
			ДобавитьHTMLКнопкуРаскрыть(ДокументHTML, БлокОбъект);
		КонецЕсли;
		
		Контекст.ДатаБезВремениПредыдущая = ДанныеОбъекта.ДатаБезВремени;
		Контекст.ТипОбъектаПредыдущий = ДанныеОбъекта.ТипОбъекта;
		Контекст.РазделПредыдущий = ДанныеОбъекта.Раздел;
		Если ДанныеОбъекта.Раздел = 2 Тогда
			Контекст.ВыведеноОбъектовИстории = Контекст.ВыведеноОбъектовИстории + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	// Вывод гиперссылки "Еще N объектов".
	ОстатокОбъектовИстории = Контекст.ВсегоОбъектовИстории - Контекст.ВывестиОбъектовИстории;
	Если ОстатокОбъектовИстории > 0 Тогда
		ДобавитьHTMLБлокЗагрузитьЕще(ДокументHTML, ОстатокОбъектовИстории, Контекст);
	КонецЕсли;
	
	#КонецОбласти
	
	// Финализация
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументHTML, ЗаписьHTML);
	
	Если Контекст.ЗаполнитьПолучателейЧата Тогда
		ПолучателиЧата = ОбщегоНазначения.ТаблицаЗначенийВМассив(Контекст.ПолучателиЧата);
	КонецЕсли;
	
	Возврат ЗаписьHTML.Закрыть();
	
КонецФункции

Функция КомандыОбычногоВводаЛенты(Знач Режим, Знач ЗначенияНастроек) Экспорт
	
	Объекты = Новый СписокЗначений;
	
	Если ЗначенияНастроек.ИспользоватьБП Тогда
		Объекты.Добавить("Поручение", НСтр("ru='Поручение';en='Assignment'"));
	КонецЕсли;
	
	Если ЗначенияНастроек.ИспользоватьSMS Тогда
		Объекты.Добавить("СообщениеSMS", НСтр("ru='SMS';en='SMS'"));
	КонецЕсли;
	
	Возврат Объекты;
	
КонецФункции

Функция СсылкаПоИдентификатору(Знач Идентификатор) Экспорт
	
	Разделитель = "__";
	
	ПозицияРазделителя = СтрНайти(Идентификатор, Разделитель);
	ПолноеИмяТаблицы = Лев(Идентификатор, ПозицияРазделителя - 1);
	ИдентификаторСсылки = Сред(Идентификатор, ПозицияРазделителя + СтрДлина(Разделитель));
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяТаблицы);
	
	Возврат МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСсылки));
	
КонецФункции

Процедура ВыполнитьКомандуЛентыНаСервере(Знач Команда, Знач ПараметрКоманды) Экспорт
	
	ОбъектСсылка = СсылкаПоИдентификатору(ПараметрКоманды);
	Если ОбъектСсылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Объект = ОбъектСсылка.ПолучитьОбъект();
	
	Если Команда = "Удалить" Тогда
		Объект.УстановитьПометкуУдаления(Истина);
	ИначеЕсли Команда = "Отменить" Тогда
		Объект.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Отменено;
		Объект.ДатаЗавершенияВзаимодействия = ТекущаяДатаСеанса();
		Объект.ЗавершившийПользователь = Пользователи.ТекущийПользователь();
		Объект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеВидаВзаимодействияПоУмолчанию(Знач Режим, Знач СостояниеИнтереса = Неопределено) Экспорт
	
	ДанныеВидаВзаимодействия = Новый Структура;
	ДанныеВидаВзаимодействия.Вставить("Ссылка", Справочники.CRM_ВидыВзаимодействий.ПустаяСсылка());
	ДанныеВидаВзаимодействия.Вставить("Описание", "");
	ДанныеВидаВзаимодействия.Вставить("Тема", "");
	
	Если Режим = "ЛентаИнтереса" Тогда
		
		Если Не ЗначениеЗаполнено(СостояниеИнтереса) Тогда
			Возврат ДанныеВидаВзаимодействия;
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыВзаимодействий.Ссылка КАК Ссылка,
		|	ВидыВзаимодействий.Описание КАК Описание,
		|	ВидыВзаимодействий.Тема КАК Тема
		|ИЗ
		|	Справочник.CRM_ВидыВзаимодействий КАК ВидыВзаимодействий
		|ГДЕ
		|	ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
		|	И ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок)
		|	И ВидыВзаимодействий.ВидДела = ЗНАЧЕНИЕ(Справочник.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес)
		|	И ВидыВзаимодействий.СостояниеИнтереса = &СостояниеИнтереса
		|	И НЕ ВидыВзаимодействий.Ссылка = ЗНАЧЕНИЕ(Справочник.CRM_ВидыВзаимодействий.ОбзвонКлиентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыВзаимодействий.Ссылка,
		|	ВидыВзаимодействий.Описание,
		|	ВидыВзаимодействий.Тема
		|ИЗ
		|	Справочник.CRM_ВидыВзаимодействий КАК ВидыВзаимодействий
		|ГДЕ
		|	ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
		|	И ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок)
		|	И ВидыВзаимодействий.ВидДела = ЗНАЧЕНИЕ(Справочник.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес)
		|	И ВидыВзаимодействий.СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
		|	И НЕ ВидыВзаимодействий.Ссылка = ЗНАЧЕНИЕ(Справочник.CRM_ВидыВзаимодействий.ОбзвонКлиентов)");
		
		Запрос.Параметры.Вставить("СостояниеИнтереса", СостояниеИнтереса);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат ДанныеВидаВзаимодействия;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(ДанныеВидаВзаимодействия, Выборка);
		КонецЕсли;
		
	ИначеЕсли Режим = "ЛентаКлиента" Или Режим = "ЛентаКонтакта" Тогда
		
		ВидВзаимодействия = Константы.CRM_ВидВзаимодействияПоУмолчанию.Получить();
		Если Не ЗначениеЗаполнено(ВидВзаимодействия) Тогда
			ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.Встреча;
		КонецЕсли;
		Описание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидВзаимодействия, "Описание");
		Тема = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидВзаимодействия, "Тема");
		
		ДанныеВидаВзаимодействия.Ссылка = ВидВзаимодействия;
		ДанныеВидаВзаимодействия.Описание = Описание;
		ДанныеВидаВзаимодействия.Тема = Тема;
		
	КонецЕсли;
	
	Возврат ДанныеВидаВзаимодействия;
	
КонецФункции

Функция ЭтоПартнерСКонтактами(Знач Партнер) Экспорт
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контакты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК Контакты
	|ГДЕ
	|	Контакты.Владелец = &Партнер");
	Запрос.Параметры.Вставить("Партнер", Партнер);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция КонтактыПартнера(Знач Партнер) Экспорт
	
	КонтактыПартнера = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат КонтактыПартнера;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контакты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК Контакты
	|ГДЕ
	|	Контакты.Владелец = &Партнер");
	Запрос.Параметры.Вставить("Партнер", Партнер);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат КонтактыПартнера;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		КонтактыПартнера.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат КонтактыПартнера;
	
КонецФункции

Функция УчетнаяЗаписьПоУмолчанию(Знач Пользователь) Экспорт
	
	ОсновнаяУчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	
	ПользовательИБ =
		ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
	Если ПользовательИБ <> Неопределено И
		ПравоДоступа("Чтение", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты) Тогда
		ОсновнаяУчетнаяЗапись = ХранилищеОбщихНастроек.Загрузить("ОсновнаяУчетнаяЗапись",
			 "ОсновнаяУчетнаяЗапись", ,
			 ПользовательИБ.Имя);
		Если ОсновнаяУчетнаяЗапись = Неопределено Тогда
			ОсновнаяУчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОсновнаяУчетнаяЗапись;
	
КонецФункции

Функция ПодписьПользователя(Знач УчетнаяЗапись, Знач Пользователь) Экспорт
	
	НаборРегистра = РегистрыСведений.CRM_ПодписиУчетныхЗаписей.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Пользователь.Установить(Пользователь);
	НаборРегистра.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
	НаборРегистра.Прочитать();
	
	Если НаборРегистра.Количество() > 0 Тогда
		
		Если НЕ ЗначениеЗаполнено(НаборРегистра[0].ПодписьИсходящегоПисьма) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Подпись = НаборРегистра[0].ПодписьИсходящегоПисьма;
		
		СтруктураВложений = Новый Структура;
		ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(Подпись, Подпись.Текст, СтруктураВложений);
		
	Иначе
		
		ТекстHTML = "";
		СтруктураВложений = Новый Структура;
		
	КонецЕсли;
	
	ТекстПодписиФорматированныйДокумент = Новый ФорматированныйДокумент;
	ТекстПодписиФорматированныйДокумент.УстановитьHTML(ТекстHTML, СтруктураВложений);
	
	Возврат ТекстПодписиФорматированныйДокумент;
	
КонецФункции

Процедура ДобавитьФорматированныйДокументКФорматированномуДокументу(ПриемникДокумент, ДобавляемыйДокумент) Экспорт

	Для Инд = 0 По ДобавляемыйДокумент.Элементы.Количество() - 1 Цикл
		ДобавляемыйЭлемент = ДобавляемыйДокумент.Элементы[Инд];
		Если ТипЗнч(ДобавляемыйЭлемент) = Тип("ПараграфФорматированногоДокумента") Тогда
			НовыйПараграф = ПриемникДокумент.Элементы.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПараграф, ДобавляемыйЭлемент, "ТипПараграфа,
				| ГоризонтальноеПоложение, МеждустрочныйИнтервал,
				|Отступ");
			ДобавитьФорматированныйДокументКФорматированномуДокументу(НовыйПараграф, ДобавляемыйЭлемент);
		Иначе
			Если ТипЗнч(ДобавляемыйЭлемент) = Тип("ТекстФорматированногоДокумента") Тогда
				НовыйЭлемент = ПриемникДокумент.Элементы.Добавить(ДобавляемыйЭлемент.Текст, Тип("ТекстФорматированногоДокумента"));
				ЗаполнитьЗначенияСвойств(НовыйЭлемент, ДобавляемыйЭлемент, , "ЗакладкаКонца, ЗакладкаНачала, Родитель");
			ИначеЕсли ТипЗнч(ДобавляемыйЭлемент) = Тип("КартинкаФорматированногоДокумента") Тогда
				НовыйЭлемент = ПриемникДокумент.Элементы.Добавить(ДобавляемыйЭлемент.Картинка,
					 Тип("КартинкаФорматированногоДокумента"));
				ЗаполнитьЗначенияСвойств(НовыйЭлемент, ДобавляемыйЭлемент, , "ЗакладкаКонца, ЗакладкаНачала, Родитель");
			ИначеЕсли ТипЗнч(ДобавляемыйЭлемент) = Тип("ПереводСтрокиФорматированногоДокумента") Тогда
				Если ТипЗнч(ДобавляемыйДокумент) = Тип("ПараграфФорматированногоДокумента") 
					И (ДобавляемыйДокумент.ТипПараграфа = ТипПараграфа.МаркированныйСписок
					Или ДобавляемыйДокумент.ТипПараграфа = ТипПараграфа.НумерованныйСписок) Тогда
					Продолжить;
				КонецЕсли;
				НовыйЭлемент = ПриемникДокумент.Элементы.Добавить( , Тип("ПереводСтрокиФорматированногоДокумента"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПредставленияКонтактовПисьма(Знач ДанныеКонтактов) Экспорт
	
	ДанныеКонтактов.Кому = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(ДанныеКонтактов.Кому, Ложь);
	ДанныеКонтактов.Копии = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(ДанныеКонтактов.Копии, Ложь);
	ДанныеКонтактов.Скрытые = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(ДанныеКонтактов.Скрытые,
		 Ложь);
	
	Возврат ДанныеКонтактов;
	
КонецФункции

Процедура СоздатьЭлектронноеПисьмоВФормеИнтереса(Знач Режим, Знач ДанныеЗаполнения) Экспорт
	
	ПисьмоОбъект = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
	ПисьмоОбъект.Заполнить(ДанныеЗаполнения);
	ЗаполнитьЗначенияСвойств(ПисьмоОбъект, ДанныеЗаполнения);
	
	ИдентификаторыКартинокПисьма = ДанныеЗаполнения.ИдентификаторыКартинок;
	
	КартинкиДобавленные = Новый СписокЗначений;
	КартинкиУдаляемые = Новый СписокЗначений;
	
	CRM_Взаимодействия.ОбработатьКартинкиHTMLПередЗаписью(
		ПисьмоОбъект.ТекстHTML, ИдентификаторыКартинокПисьма, КартинкиДобавленные, КартинкиУдаляемые);
	
	ПисьмоОбъект.Записать();
	
	Для Каждого Строка Из КартинкиДобавленные Цикл
		
		ПараметрыВложения = Строка.Значение;
		
		ПрисоединенныйФайл = CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			ПисьмоОбъект.Ссылка, ПараметрыВложения.АдресВоВременномХранилище, ПараметрыВложения);
		
		Если ПрисоединенныйФайл <> Неопределено Тогда
			ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
			ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = ПараметрыВложения.ИДФайлаЭлектронногоПисьма;
			ПрисоединенныйФайлОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеЗаполнения.ОтправлятьСразу Тогда
		
		CRM_Взаимодействия.ВыполнитьОтправкуПисьма(ПисьмоОбъект);
		
		ПисьмоОбъект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено");
		ПисьмоОбъект.ДатаОтправления = ТекущаяДатаСеанса();
		
		Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(ПисьмоОбъект.УчетнаяЗапись, "Отправленные");
		
	Иначе
		
		ПисьмоОбъект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
		Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(ПисьмоОбъект.УчетнаяЗапись, "Исходящие");
		
	КонецЕсли;
	
	CRM_Взаимодействия.УстановитьПапкуЭлектронногоПисьма(ПисьмоОбъект.Ссылка, Папка, Ложь, Ложь);
	
	Если Режим = "ЛентаИнтереса" Тогда
		
		// Заполнение таблицы интересов:
		ТаблицаСвязей = Новый ТаблицаЗначений;
		ТаблицаСвязей.Колонки.Добавить("Ссылка");
		ТаблицаСвязей.Колонки.Добавить("СостояниеИнтереса");
		ТаблицаСвязей.Колонки.Добавить("ВведенНаОсновании");
		ТаблицаСвязей.Колонки.Добавить("ОсновнойИнтерес");
		
		НоваяСтрока = ТаблицаСвязей.Добавить();
		НоваяСтрока.Ссылка = ДанныеЗаполнения.ДокументОснование;
		НоваяСтрока.СостояниеИнтереса = ДанныеЗаполнения.СостояниеИнтереса;
		НоваяСтрока.ВведенНаОсновании = Истина;
		НоваяСтрока.ОсновнойИнтерес = Истина;
		
		ПисьмоОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов", ТаблицаСвязей);
		
	КонецЕсли;
	
	ПисьмоОбъект.Записать();
	
	Если Режим = "ЛентаИнтереса" Тогда
		// Заполнение предмета БСП:
		Взаимодействия.УстановитьПредмет(ПисьмоОбъект.Ссылка, ДанныеЗаполнения.ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстыПисьма(Знач ТекстПисьма, Знач УчетнаяЗапись, Знач Пользователь, Знач Основание = Неопределено) Экспорт
	
	ДокументHTML	= ПолучитьДокументHTMLИзОбычногоТекстаСШрифтомПоУмолчанию(ТекстПисьма);
	ТекстПисьмаHTML	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	
	ИдентификаторыКартинокПисьма = Новый СписокЗначений;
	
	Если Основание = Неопределено Тогда
		
		ТекстПисьмаHTML = CRM_Взаимодействия.ДобавитьПодписьКТекстуПисьма(
			ТекстПисьмаHTML, УчетнаяЗапись, Пользователь, Новый УникальныйИдентификатор, ИдентификаторыКартинокПисьма);
		
	ИначеЕсли Не УчетнаяЗапись.CRM_ПодписьВнизуПисьма Тогда
		
		ТекстПисьмаHTML = CRM_Взаимодействия.ДобавитьПодписьКТекстуПисьма(
			ТекстПисьмаHTML, УчетнаяЗапись, Пользователь, Новый УникальныйИдентификатор, ИдентификаторыКартинокПисьма);
		
		CRM_Взаимодействия.ДобавитьТекстИсходногоПисьма(ТекстПисьмаHTML, Основание, Основание);
		ТекстПисьмаHTML = CRM_Взаимодействия.ВставитьКартинкиВТекстHTML(ТекстПисьмаHTML,
			Основание, Новый УникальныйИдентификатор, ИдентификаторыКартинокПисьма, "Копирование");
			
	Иначе
		
		CRM_Взаимодействия.ДобавитьТекстИсходногоПисьма(ТекстПисьмаHTML, Основание, Основание);
		ТекстПисьмаHTML = CRM_Взаимодействия.ВставитьКартинкиВТекстHTML(ТекстПисьмаHTML,
			Основание, Новый УникальныйИдентификатор, ИдентификаторыКартинокПисьма, "Копирование");
		
		ТекстПисьмаHTML = CRM_Взаимодействия.ДобавитьПодписьКТекстуПисьма(
			ТекстПисьмаHTML, УчетнаяЗапись, Пользователь, Новый УникальныйИдентификатор, ИдентификаторыКартинокПисьма);
		
	КонецЕсли;
	
	ТекстПисьма = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекстПисьмаHTML);
	
	Возврат Новый Структура("ТекстПисьма,ТекстHTML,ИдентификаторыКартинок", ТекстПисьма,
		 ТекстПисьмаHTML,
		 ИдентификаторыКартинокПисьма);
	
КонецФункции

Функция ПараметрыРабочегоДня(Знач Пользователь) Экспорт
	
	ВремяНачала = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
		 "ВремяНачалаРабочегоДня");
	ВремяОкончания = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
		 "ВремяОкончанияРабочегоДня");
	
	Если Не ЗначениеЗаполнено(ВремяНачала) Тогда
		ВремяНачала = Константы.CRM_НачалоРабочегоДня.Получить();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВремяОкончания) Тогда
		ВремяОкончания = Константы.CRM_КонецРабочегоДня.Получить();
	КонецЕсли;
	
	Возврат Новый Структура("ВремяНачала, ВремяОкончания", ВремяНачала, ВремяОкончания);
	
КонецФункции

Функция ДатаОкончанияПоВарианту(Знач ДатаНачала, Знач ВариантСрока) Экспорт
	
	Если ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.Сейчас Тогда
		ДатаОкончания	= ДатаНачала;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.Через15Минут Тогда
		ДатаОкончания	= ДатаНачала + 900;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезЧас Тогда
		ДатаОкончания	= ДатаНачала + 3600;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.Через4Часа Тогда
		ДатаОкончания	= ДатаНачала + 14400;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.Через8Часов Тогда
		ДатаОкончания	= ДатаНачала + 28800;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДень Тогда
		ДатаОкончания	= ДатаНачала + 86400;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезТриДня Тогда
		ДатаОкончания	= ДатаНачала + 259200;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезНеделю Тогда
		ДатаОкончания	= ДатаНачала + 604800;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДвеНедели Тогда
		ДатаОкончания	= ДатаНачала + 1209600;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезМесяц Тогда
		ДатаОкончания	= ДобавитьМесяц(ДатаНачала, 1);
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезТриМесяца Тогда
		ДатаОкончания	= ДобавитьМесяц(ДатаНачала, 3);
	Иначе
		ДатаОкончания	= ДатаНачала;
	КонецЕсли;
	
	Возврат ДатаОкончания;
	
КонецФункции

Функция ПреобразоватьИменаПолучателей(ФормаИмяТаблицы, УчетнаяЗаписьЭП, МассивСтруктур, ФормаСоответствия) Экспорт
	
	МассивСтруктурИтог = Новый Массив;
	
	ТабПолучателей = ФормаИмяТаблицы.Выгрузить();
	
	ФормаИмяТаблицы.Очистить();
	Для Каждого Стр Из МассивСтруктур Цикл
		новСтр = ФормаИмяТаблицы.Добавить();
		СтрокаТаблицы = ТабПолучателей.Найти(Стр.АдресЭП, "Адрес");
		Если НЕ СтрокаТаблицы = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(новСтр, СтрокаТаблицы);
		Иначе
			новСтр.Адрес = Стр.АдресЭП;
			новСтр.Представление = Стр.Представление;
			новСтр.Контакт = ПолучитьКонтактПоАдресу(УчетнаяЗаписьЭП, Стр.АдресЭП, Стр.Представление, ФормаСоответствия);
		КонецЕсли;
		
		СтруктураПолучателя = Новый Структура("Адрес,Представление,Контакт");
		ЗаполнитьЗначенияСвойств(СтруктураПолучателя, новСтр);
		
		МассивСтруктурИтог.Добавить(СтруктураПолучателя);
		
	КонецЦикла;
	
	Возврат Новый Структура("Получатели, СоответствиеАдресов", МассивСтруктурИтог, ФормаСоответствия.ВыгрузитьЗначения()); 
	
КонецФункции

Функция СписокПолучателейАвтоПодборНаСервере(СтрокаДляПоиска) Экспорт
	
	СписокАдресов = Новый СписокЗначений;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 50
	|	Контакты.Ссылка КАК Контакт,
	|	Контакты.АдресЭП КАК АдресЭП
	|	ПОМЕСТИТЬ ВТВыборкаАдресов
	|ИЗ
	|	(ВЫБРАТЬ
	|		КонтактнаяИнформация.Ссылка КАК Ссылка,
	|		КонтактнаяИнформация.АдресЭП КАК АдресЭП
	|	ИЗ
	|		Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
	|	ГДЕ
	|		КонтактнаяИнформация.Тип = &Тип
	|		И КонтактнаяИнформация.АдресЭП ПОДОБНО &Представление
	|		И НЕ(КонтактнаяИнформация.Ссылка.ПометкаУдаления)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		КонтактнаяИнформация.Ссылка КАК Ссылка,
	|		КонтактнаяИнформация.АдресЭП КАК АдресЭП
	|	ИЗ
	|		Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
	|	ГДЕ
	|		КонтактнаяИнформация.Тип = &Тип
	|		И КонтактнаяИнформация.Ссылка.Наименование ПОДОБНО &Представление
	|		И НЕ(КонтактнаяИнформация.Ссылка.ПометкаУдаления)
	|";
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ОписанияКонтактов();
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|		КонтактнаяИнформация.Ссылка КАК Ссылка,
		|		КонтактнаяИнформация.АдресЭП КАК АдресЭП
		|ИЗ
		|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Тип = &Тип
		|	И КонтактнаяИнформация.АдресЭП ПОДОБНО &Представление
		|	И (НЕ КонтактнаяИнформация.Ссылка.ПометкаУдаления)
		|";		
		
	КонецЦикла;
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;	
		
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|		КонтактнаяИнформация.Ссылка КАК Ссылка,
		|		КонтактнаяИнформация.АдресЭП КАК АдресЭП
		|ИЗ
		|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Тип = &Тип
		|	И КонтактнаяИнформация.Ссылка.Наименование ПОДОБНО &Представление
		|	И (НЕ КонтактнаяИнформация.Ссылка.ПометкаУдаления)
		|";		
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + ") КАК Контакты";
	
	Запрос.УстановитьПараметр("Представление", "%" + СтрокаДляПоиска + "%");
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.Выполнить();
	
	// Формируем новый запрос из временной таблицы.
	
	Запрос.Текст = "ВЫБРАТЬ 
	|	Контакт,
	|	АдресЭП,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Контакт) = ТИП(Справочник.КонтактныеЛицаПартнеров)
	|	ТОГДА Контакт.Владелец.Наименование
	|	ИНАЧЕ NULL КОНЕЦ КАК Владелец
	|ИЗ
	|	ВТВыборкаАдресов
	|ИТОГИ ПО
	|	АдресЭП";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		ВыборкаПоСсылкам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока (ВыборкаПоСсылкам.Следующий()) Цикл
			
			СписокАдресов.Добавить(СокрЛП(Строка(ВыборкаПоСсылкам.Контакт.Наименование)) + " <" 
				+ Выборка.АдресЭП + "> " + ?(ЗначениеЗаполнено(ВыборкаПоСсылкам.Владелец), "(" 
				+ ВыборкаПоСсылкам.Владелец + ")",
				 ""));
		
		КонецЦикла;
		
	КонецЦикла;

	Возврат СписокАдресов;
	
КонецФункции

Функция ЗначениеРеквизитаОбъекта(Знач Ссылка, Знач ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

Функция ДанныеФайлаПоИдентификатору(Знач Идентификатор, Знач ИдентификаторФормы) Экспорт
	
	ФайлСсылка = СсылкаПоИдентификатору(Идентификатор);
	
	ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ДополнительныеПараметры.ИдентификаторФормы = ИдентификаторФормы;
	
	Возврат РаботаСФайлами.ДанныеФайла(ФайлСсылка, ДополнительныеПараметры);
	
КонецФункции

Процедура ОбновитьЭлементыВложений(Форма) Экспорт
	
	СписокИконокФайлов = Новый СписокЗначений;
	Для ИндексКартинки = 0 По 38 Цикл
		СписокИконокФайлов.Добавить(БиблиотекаКартинок["CRM_ИконкаТипаФайла_" + ИндексКартинки * 2]);
	КонецЦикла;
	
	Элементы = Форма.Элементы;
	Команды = Форма.Команды;
	
	ГруппаСсылокВложений = Элементы.БыстрыйВвод_СсылкиВложений;
	
	МаксимальнаяДлинаИмениВложения = 35;
	МаксимальнаяДлинаСтроки = 105;
	
	МассивЭкранов = ПолучитьИнформациюЭкрановКлиента();
	// Защита от Толстого клиента - в нем ПолучитьИнформациюЭкрановКлиента() возвращает Неопределено и падает ошибка
	Если МассивЭкранов <> Неопределено Тогда
		ШиринаЭкрана = ПолучитьИнформациюЭкрановКлиента()[0].Ширина;
	Иначе
		ШиринаЭкрана = 1440;
	КонецЕсли;
	МаксимальнаяДлинаСтроки = 0.5 * МаксимальнаяДлинаСтроки * (ШиринаЭкрана / 1920);
	
	// Удаление предыдущих элементов
	МассивУдаляемыхЭлементов = Новый Массив;
	Для Каждого Элемент Из ГруппаСсылокВложений.ПодчиненныеЭлементы Цикл
		МассивУдаляемыхЭлементов.Добавить(Элемент);
	КонецЦикла;
	
	Для Каждого Элемент Из МассивУдаляемыхЭлементов Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	МассивУдаляемыхКоманд = Новый Массив;
	Для Каждого КомандаФормы Из Команды Цикл
		Если СтрЧислоВхождений(КомандаФормы.Имя, "БыстрыйВвод_Удалить_СсылкаВложения_") > 0 Тогда
			МассивУдаляемыхКоманд.Добавить(КомандаФормы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КомандаФормы Из МассивУдаляемыхКоманд Цикл
		Команды.Удалить(КомандаФормы);
	КонецЦикла;
	
	НомерСтрокиЭлементов = 0;
	ТекущаяДлинаСтроки = 0;
	
	Для Каждого ЭлементТаблицы Из Форма.БыстрыйВвод_Вложения Цикл
		
		ПредставлениеСсылки = ЭлементТаблицы.ИмяФайла;
		
		Если НЕ ЗначениеЗаполнено(ПредставлениеСсылки) Тогда
			Продолжить;
		КонецЕсли;
		
		// Расчет длины текущей строки
		Если СтрДлина(ПредставлениеСсылки) > МаксимальнаяДлинаИмениВложения Тогда
			ПредставлениеСсылки = Лев(ПредставлениеСсылки, МаксимальнаяДлинаИмениВложения) + "...";
		КонецЕсли;
		ШиринаЭлемента = СтрДлина(ПредставлениеСсылки);
		Если ШиринаЭлемента > 8 Тогда 
			ШиринаЭлемента = ШиринаЭлемента * 0.8;
		КонецЕсли;
		ТекущаяДлинаСтроки = ТекущаяДлинаСтроки + ШиринаЭлемента;
		
		// Создание следующей горизонтальной группы
		Если НомерСтрокиЭлементов = 0 Или ТекущаяДлинаСтроки > МаксимальнаяДлинаСтроки Тогда
			
			ТекущаяДлинаСтроки = СтрДлина(ПредставлениеСсылки) + 2;
			НомерСтрокиЭлементов = НомерСтрокиЭлементов + 1;
			
			ГруппаСтрокаВложений = Элементы.Добавить("СтрокаВложений" + НомерСтрокиЭлементов,
				 Тип("ГруппаФормы"), ГруппаСсылокВложений);
			ГруппаСтрокаВложений.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаСтрокаВложений.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаСтрокаВложений.ОтображатьЗаголовок = Ложь;
			ГруппаСтрокаВложений.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаСтрокаВложений.РастягиватьПоВертикали = Ложь;
			ГруппаСтрокаВложений.Высота = 1;
			ГруппаСтрокаВложений.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
			ГруппаСтрокаВложений.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
			
		КонецЕсли;
		
		ИдентификаторСсылкиВложения = ЭлементТаблицы.ПолучитьИдентификатор();
		
		// Вывод иконки типа вложения
		ДекорацияИконкаВложения = Элементы.Добавить("ИконкаВложения_" + ИдентификаторСсылкиВложения,
			 Тип("ДекорацияФормы"), ГруппаСтрокаВложений);
		ДекорацияИконкаВложения.Вид = ВидДекорацииФормы.Картинка;
		РасширениеФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ЭлементТаблицы.ИмяФайла);
		ИндексКартинки	= РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(РасширениеФайла);
		ДекорацияИконкаВложения.Картинка = СписокИконокФайлов[ИндексКартинки / 2].Значение;
		
		// Создание элемента-вложения
		ДекорацияСсылкаВложения = Элементы.Добавить("СсылкаВложения_" + ИдентификаторСсылкиВложения,
			 Тип("ДекорацияФормы"), ГруппаСтрокаВложений);
		ДекорацияСсылкаВложения.Заголовок = ПредставлениеСсылки;
		ДекорацияСсылкаВложения.Гиперссылка = Истина;
		ДекорацияСсылкаВложения.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
		
		ИмяЭлементаКнопки = "БыстрыйВвод_Удалить_" + ДекорацияСсылкаВложения.Имя;
		КнопкаУдалитьВложение = Элементы.Найти(ИмяЭлементаКнопки);
		Если КнопкаУдалитьВложение = Неопределено Тогда
			
			Команда = Команды.Добавить(ИмяЭлементаКнопки);
			Команда.Заголовок = НСтр("ru='Удалить';en='Remove'");
			Команда.Подсказка = НСтр("ru='Удалить';en='Remove'");
			Команда.Картинка = БиблиотекаКартинок.CRM_УдалитьСерая;
			Команда.Действие = "Подключаемый_БыстрыйВвод_УдалитьФайл";
			
			КнопкаУдалитьВложение = Элементы.Добавить(ИмяЭлементаКнопки, Тип("КнопкаФормы"),
				 ДекорацияСсылкаВложения.КонтекстноеМеню);
			КнопкаУдалитьВложение.ИмяКоманды = ИмяЭлементаКнопки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьВложения = (Форма.БыстрыйВвод_Вложения.Количество() > 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_КомандыФайл",
		 "Видимость",
		 ЕстьВложения);
	Если ЕстьВложения Тогда
		Элементы.БыстрыйВвод_СоздатьФайл.КнопкаПоУмолчанию = Истина;
	Иначе	
		Если Элементы.Найти("КнопкаПоУмолчанию") <> Неопределено Тогда
			Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
		Иначе
			Элементы.БыстрыйВвод_СоздатьФайл.КнопкаПоУмолчанию = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрепитьОткрепитьЗаписьЛенты(Объект, ПараметрКоманды, Закрепить) Экспорт
	
	Запись = РегистрыСведений.CRM_ЗакрепленныеЗаписиЛенты.СоздатьМенеджерЗаписи();
	Запись.Пользователь = Пользователи.ТекущийПользователь();
	Запись.Объект = Объект;
	Запись.Ссылка = СсылкаПоИдентификатору(ПараметрКоманды);
	
	Если Закрепить Тогда
		Запись.Записать();
	Иначе
		Запись.Удалить();
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьВложенияОбъекта(СсылкаНаОбъект) Экспорт
	
	НаименованиеСправочникаВложений = СсылкаНаОбъект.Метаданные().Имя + "ПрисоединенныеФайлы";
	СправочникВложений = Метаданные.Справочники.Найти(НаименованиеСправочникаВложений);
	Если СправочникВложений = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СправочникВложений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИмяСправочникаПрисоединенныхФайлов КАК СправочникВложений
	|ГДЕ	
	|	СправочникВложений.ВладелецФайла = &ВладелецФайла
	|	И СправочникВложений.ПометкаУдаления = ЛОЖЬ
	|	И &УсловиеИерархическогоСправочника";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяСправочникаПрисоединенныхФайлов", НаименованиеСправочникаВложений);
	ТекстЗапроса = ?(СправочникВложений.Иерархический,
					СтрЗаменить(ТекстЗапроса, "&УсловиеИерархическогоСправочника", "СправочникВложений.ЭтоГруппа = ЛОЖЬ"),
					СтрЗаменить(ТекстЗапроса, "&УсловиеИерархическогоСправочника", "ИСТИНА"));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВладелецФайла", СсылкаНаОбъект);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПроверитьВозможностьОтправкиСообщения(ДанныеЗаполнения) Экспорт
	
	Результат = Ложь;
	
	Контакт = ?(ЗначениеЗаполнено(ДанныеЗаполнения.Получатель),
		ДанныеЗаполнения.Получатель, ДанныеЗаполнения.ПредставлениеПолучателя);
	idПолучателя = ДанныеЗаполнения.Адрес;
	УчетнаяЗапись = ДанныеЗаполнения.УчетнаяЗапись;
	ТипМессенджера = УчетнаяЗапись.ТипМессенджера;
	
	МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(ТипМессенджера);
	ПараметрыМессенджера = МодульМенеджера.ПараметрыМессенджера();
	ТипКИ = МодульМенеджера.ТипКИМессенджера();
	
	Если ПараметрыМессенджера.ВозможностьПисатьПервыми Тогда
		Результат = Истина;
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			|	CRM_Диалоги.Ссылка КАК Ссылка,
			|	ВЫБОР
			|		КОГДА CRM_Диалоги.Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыДиалогов.Закрыт)
			|			ТОГДА 10
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Порядок,
			|	CRM_Диалоги.Статус <> ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыДиалогов.Закрыт) КАК Активный,
			|	CRM_Диалоги.Группа КАК Группа,
			|	CRM_Диалоги.ГруппаПредставление КАК ГруппаПредставление,
			|	CRM_СообщениеМессенджера.Ссылка КАК Ссылка1
			|ИЗ
			|	Справочник.CRM_Диалоги КАК CRM_Диалоги
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
			|		ПО CRM_Диалоги.Ссылка = CRM_СообщениеМессенджера.Диалог
			|ГДЕ
			|	CRM_Диалоги.ID_Пользователя = &ID_Пользователя
			|	И CRM_Диалоги.УчетнаяЗапись = &УчетнаяЗапись
			|	И CRM_Диалоги.Контакт = &Контакт
			|	И НЕ CRM_Диалоги.Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыДиалогов.Закрыт)
			|	И НЕ CRM_Диалоги.Служебный
			|	И НЕ CRM_СообщениеМессенджера.Ссылка = ЗНАЧЕНИЕ(Документ.CRM_СообщениеМессенджера.ПустаяСсылка)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок");
		
		Запрос.УстановитьПараметр("ID_Пользователя", idПолучателя);
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
		Запрос.УстановитьПараметр("Контакт", Контакт);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеHTMLОбъектов

Процедура ЗаполнитьHTMLОбъекта(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст)
	
	ТипОбъекта = ДанныеОбъекта.ТипОбъекта;
	Раздел = ДанныеОбъекта.Раздел;
	
	Если ТипОбъекта = "Взаимодействие" И Раздел = Контекст.НомерРазделаЗапланировано Тогда
		
		ЗаполнитьHTMLВзаимодействиеПланов(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
		
	ИначеЕсли ТипОбъекта = "Задача" И Раздел = Контекст.НомерРазделаЗапланировано Тогда
		
		ЗаполнитьHTMLЗадачаПланов(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
		
	ИначеЕсли ТипОбъекта = "Примечание" Тогда
		
		ЗаполнитьHTMLПримечание(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
		
	ИначеЕсли ТипОбъекта = "Взаимодействие" И Раздел <> Контекст.НомерРазделаЗапланировано Тогда
		
		ЗаполнитьHTMLВзаимодействиеИстории(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
		
	ИначеЕсли ТипОбъекта = "Задача" И Раздел <> Контекст.НомерРазделаЗапланировано Тогда
		
		ЗаполнитьHTMLЗадачаИстории(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
		
	ИначеЕсли ТипОбъекта = "ТелефонныйЗвонок" Тогда
		
		ЗаполнитьHTMLТелефонныйЗвонок(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
		
	ИначеЕсли ТипОбъекта = "ЭлектронноеПисьмоВходящее" Тогда
		
		ЗаполнитьHTMLЭлектронноеПисьмоВходящее(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
		
	ИначеЕсли ТипОбъекта = "ЭлектронноеПисьмоИсходящее" Тогда
		
		ЗаполнитьHTMLЭлектронноеПисьмоИсходящее(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
		
	ИначеЕсли ТипОбъекта = "Диалог" Тогда
		
		Если Контекст.ЗаполнитьПолучателейЧата Тогда
			ДобавитьПолучателяЧата(Контекст.ПолучателиЧата, ДанныеОбъекта);
		КонецЕсли;
		ЗаполнитьHTMLДиалоги(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
		
	ИначеЕсли ТипОбъекта = "СообщениеSMS" Тогда
		
		ЗаполнитьHTMLСообщениеSMS(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
		
	ИначеЕсли ТипОбъекта = "Заявка" Тогда
		
		ЗаполнитьHTMLЗаявка(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
		
	ИначеЕсли ТипОбъекта = "Интерес" Тогда
		
		ЗаполнитьHTMLИнтерес(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
		
	ИначеЕсли ТипОбъекта = "КоммерческоеПредложение" Тогда
		
		ЗаполнитьHTMLПрочийДокумент(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
		
	ИначеЕсли ТипОбъекта = "Телемаркетинг" Тогда
		
		ЗаполнитьHTMLТелемаркетинг(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
		
	ИначеЕсли ТипОбъекта = "ПрочийДокумент" Тогда
		
		ЗаполнитьHTMLПрочийДокумент(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
		
	ИначеЕсли ТипОбъекта = "СозданиеОбъекта" Тогда
		
		БлокОбъект.УстановитьАтрибут("class", "interest__history");
		ЗаполнитьHTMLСозданиеОбъекта(ДокументHTML, БлокОбъект, ДанныеОбъекта, Контекст);
		
	ИначеЕсли ТипОбъекта = "ЗавершениеИнтереса" Тогда
		
		БлокОбъект.УстановитьАтрибут("class", "interest__history");
		ЗаполнитьHTMLЗавершениеИнтереса(ДокументHTML, БлокОбъект, ДанныеОбъекта);
		
	ИначеЕсли ТипОбъекта = "ЗаписьИстории" Тогда
		
		БлокОбъект.УстановитьАтрибут("class", "interest__history");
		ЗаполнитьHTMLЗаписьИстории(ДокументHTML, БлокОбъект, ДанныеОбъекта);
		
	ИначеЕсли ТипОбъекта = "Файл" Тогда
		
		ЗаполнитьHTMLФайл(ДокументHTML, БлокОбъект, ДанныеОбъекта, Контекст);
		
	ИначеЕсли ТипОбъекта = "ДействиеСИнтересом" Тогда
		
		ЗаполнитьHTMLДействиеСИнтересом(ДокументHTML, БлокОбъект, ДанныеОбъекта);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьHTMLВзаимодействиеПланов(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст)
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__calendar");
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	Если ДанныеОбъекта.ПометкаУдаления Тогда
		ДобавитьПометкуУдаления(БлокСодержаниеОбъекта);
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДобавитьHTMLБлокЗаголовка(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта);
	
	ВзаимодействиеПросрочено = ЗначениеЗаполнено(ДанныеОбъекта.ПлановаяДатаЗавершение)
		И (ДанныеОбъекта.ПлановаяДатаЗавершение < ТекущаяДатаСеанса());
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	Если ВзаимодействиеПросрочено > 0 Тогда
		ЭлементДата.УстановитьАтрибут("class", "text__bold text__red");
	Иначе
		Если ДанныеОбъекта.ДатаБезВремени = Контекст.ДатаСегодня Тогда
			ЭлементДата.УстановитьАтрибут("class", "text__bold text__green");
		Иначе
			ЭлементДата.УстановитьАтрибут("class", "text__bold text__gray");
		КонецЕсли;
	КонецЕсли;
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("a");
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Ответственный);
	ЭлементОтправитель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Ответственный);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	ЭлементСвязка = ДокументHTML.СоздатьТекстовыйУзел(" ");
	БлокЗаголовок.ДобавитьДочерний(ЭлементСвязка);
	
	ЭлементВид = ДокументHTML.СоздатьЭлемент("span");
	ЭлементВид.ТекстовоеСодержимое = Строка(ДанныеОбъекта.ВидВзаимодействия);
	БлокЗаголовок.ДобавитьДочерний(ЭлементВид);
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.КонтактноеЛицо) Тогда
		ЭлементСвязка = ДокументHTML.СоздатьЭлемент("span");
		ЭлементСвязка.ТекстовоеСодержимое = НСтр("ru=' с ';en=' with '");
		БлокЗаголовок.ДобавитьДочерний(ЭлементСвязка);
	Иначе
		ЭлементСвязка = ДокументHTML.СоздатьТекстовыйУзел(" ");
		БлокЗаголовок.ДобавитьДочерний(ЭлементСвязка);
	КонецЕсли;
	
	ЭлементПолучатель = ДокументHTML.СоздатьЭлемент("a");
	ЭлементПолучатель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.КонтактноеЛицо);
	ЭлементПолучатель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.КонтактноеЛицо);
	БлокЗаголовок.ДобавитьДочерний(ЭлементПолучатель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	БлокТема.УстановитьАтрибут("class", "interest__content text__bold");
	БлокТема.ТекстовоеСодержимое = ДанныеОбъекта.Тема;
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
	ДобавитьHTMLСписокПрисоединенныхФайлов(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLЗадачаПланов(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст)
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__task");
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	Если ДанныеОбъекта.ПометкаУдаления Тогда
		ДобавитьПометкуУдаления(БлокСодержаниеОбъекта);
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДобавитьHTMLБлокЗаголовка(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта);
	
	ЗадачаПросрочена = ЗначениеЗаполнено(ДанныеОбъекта.СрокИсполнения)
		И (ДанныеОбъекта.СрокИсполнения < ТекущаяДатаСеанса());
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	Если ЗадачаПросрочена Тогда
		ЭлементДата.УстановитьАтрибут("class", "text__bold text__red");
	Иначе
		Если ДанныеОбъекта.ДатаБезВремени = Контекст.ДатаСегодня Тогда
			ЭлементДата.УстановитьАтрибут("class", "text__bold text__green");
		Иначе
			ЭлементДата.УстановитьАтрибут("class", "text__bold text__gray");
		КонецЕсли;
	КонецЕсли;
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементПолучатель = ДокументHTML.СоздатьЭлемент("a");
	ЭлементПолучатель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Исполнитель);
	ЭлементПолучатель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Исполнитель);
	БлокЗаголовок.ДобавитьДочерний(ЭлементПолучатель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	БлокТема.УстановитьАтрибут("class", "interest__content text__bold");
	БлокТема.ТекстовоеСодержимое = ДанныеОбъекта.Наименование;
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
	ДобавитьHTMLСписокПрисоединенныхФайлов(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLПримечание(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст)
	
	УстановитьПривилегированныйРежим(Истина);
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__note");
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	Если ДанныеОбъекта.ПометкаУдаления Тогда
		ДобавитьПометкуУдаления(БлокСодержаниеОбъекта);
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДокументHTML.СоздатьЭлемент("div");
	БлокЗаголовок.УстановитьАтрибут("class", "text__gray");
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокЗаголовок);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("a");
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Автор);
	ЭлементОтправитель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Автор);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	Если ДанныеОбъекта.ПометкаУдаления Тогда
		БлокТема.УстановитьАтрибут("class", "interest__content text__strike text__bold");
	Иначе
		БлокТема.УстановитьАтрибут("class", "interest__content text__bold");
	КонецЕсли;
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	ДобавленоСтрок = ДобавитьHTMLМногострочныйТекст(ДокументHTML, БлокТема, ДанныеОбъекта.ТекстСодержания);
	Контекст.ДобавитьКнопкуРаскрыть = (ДобавленоСтрок > 1);
	
	ДобавитьHTMLСписокПрисоединенныхФайлов(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLВзаимодействиеИстории(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст)
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	Если ДанныеОбъекта.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Входящее Тогда
		БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__incoming-interaction");
	Иначе
		Если ДанныеОбъекта.ТипСостояния = Перечисления.CRM_ТипыСостоянийСобытий.Завершено Тогда
			БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__calendar-check");
		Иначе
			БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__calendar");
		КонецЕсли;
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	Если ДанныеОбъекта.ПометкаУдаления Тогда
		ДобавитьПометкуУдаления(БлокСодержаниеОбъекта);
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДобавитьHTMLБлокЗаголовка(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("a");
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Ответственный);
	ЭлементОтправитель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Ответственный);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	ЭлементСвязка = ДокументHTML.СоздатьТекстовыйУзел(" ");
	БлокЗаголовок.ДобавитьДочерний(ЭлементСвязка);
	
	ЭлементВид = ДокументHTML.СоздатьЭлемент("span");
	ЭлементВид.ТекстовоеСодержимое = Строка(ДанныеОбъекта.ВидВзаимодействия);
	БлокЗаголовок.ДобавитьДочерний(ЭлементВид);
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.КонтактноеЛицо) Тогда
		ЭлементСвязка = ДокументHTML.СоздатьЭлемент("span");
		ЭлементСвязка.ТекстовоеСодержимое = НСтр("ru=' с ';en=' with '");
		БлокЗаголовок.ДобавитьДочерний(ЭлементСвязка);
	Иначе
		ЭлементСвязка = ДокументHTML.СоздатьТекстовыйУзел(" ");
		БлокЗаголовок.ДобавитьДочерний(ЭлементСвязка);
	КонецЕсли;
	
	ЭлементПолучатель = ДокументHTML.СоздатьЭлемент("a");
	ЭлементПолучатель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.КонтактноеЛицо);
	ЭлементПолучатель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.КонтактноеЛицо);
	БлокЗаголовок.ДобавитьДочерний(ЭлементПолучатель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	Если ДанныеОбъекта.ТипСостояния = Перечисления.CRM_ТипыСостоянийСобытий.Отменено Тогда
		БлокТема.УстановитьАтрибут("class", "interest__content text__gray text__strike text__bold");
	Иначе
		БлокТема.УстановитьАтрибут("class", "interest__content text__gray text__bold");
	КонецЕсли;
	БлокТема.ТекстовоеСодержимое = ДанныеОбъекта.Тема;
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
	БлокРезультат = ДокументHTML.СоздатьЭлемент("div");
	БлокРезультат.УстановитьАтрибут("class", "interest__content");
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокРезультат);
	ДобавленоСтрок = ДобавитьHTMLМногострочныйТекст(ДокументHTML, БлокРезультат, ДанныеОбъекта.Результат);
	Контекст.ДобавитьКнопкуРаскрыть = (ДобавленоСтрок > 1);
	
	ДобавитьHTMLСписокПрисоединенныхФайлов(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLЗадачаИстории(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст)
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	Если ДанныеОбъекта.ПометкаУдаления Тогда
		БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__task");
	Иначе
		БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__task-done");
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	Если ДанныеОбъекта.ПометкаУдаления Тогда
		ДобавитьПометкуУдаления(БлокСодержаниеОбъекта);
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДобавитьHTMLБлокЗаголовка(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементПолучатель = ДокументHTML.СоздатьЭлемент("a");
	ЭлементПолучатель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Исполнитель);
	ЭлементПолучатель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Исполнитель);
	БлокЗаголовок.ДобавитьДочерний(ЭлементПолучатель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	Если ДанныеОбъекта.ПометкаУдаления Тогда
		БлокТема.УстановитьАтрибут("class", "interest__content text__gray text__strike text__bold");
	Иначе
		БлокТема.УстановитьАтрибут("class", "interest__content text__gray text__bold");
	КонецЕсли;
	БлокТема.ТекстовоеСодержимое = ДанныеОбъекта.Наименование;
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
	БлокРезультат = ДокументHTML.СоздатьЭлемент("div");
	БлокРезультат.УстановитьАтрибут("class", "interest__content");
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокРезультат);
	ДобавленоСтрок = ДобавитьHTMLМногострочныйТекст(ДокументHTML, БлокРезультат, ДанныеОбъекта.РезультатВыполнения);
	Контекст.ДобавитьКнопкуРаскрыть = (ДобавленоСтрок > 1);
	
	ВладелецФайлов = ДанныеОбъекта.Ссылка;
	Если ЗначениеЗаполнено(ДанныеОбъекта.БизнесПроцесс) Тогда
		ВладелецФайлов = ДанныеОбъекта.БизнесПроцесс;
	КонецЕсли;
	ДобавитьHTMLСписокПрисоединенныхФайлов(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLТелефонныйЗвонок(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст)
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	Если ДанныеОбъекта.Входящий Тогда
		БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__incoming-call");
	Иначе
		БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__outgoing-call");
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	Если ДанныеОбъекта.ПометкаУдаления Тогда
		ДобавитьПометкуУдаления(БлокСодержаниеОбъекта);
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДобавитьHTMLБлокЗаголовка(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	Если ДанныеОбъекта.Входящий И Не ДанныеОбъекта.сфпСостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Отвеченный Тогда
		ЭлементДата.УстановитьАтрибут("class", "text__red text__bold");
		БлокОбъект.УстановитьАтрибут("class", "interest__item interest__item--missed");
	КонецЕсли;
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	Если ДанныеОбъекта.Входящий Тогда
		Отправитель = ДанныеОбъекта.АбонентПредставление;
	Иначе
		Отправитель = ДанныеОбъекта.Автор;
	КонецЕсли;
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Если ТипЗнч(Отправитель) = Тип("Строка") Или Не ЗначениеЗаполнено(Отправитель) Тогда
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Иначе
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("a");
		ЭлементОтправитель.Гиперссылка = ПолучитьНавигационнуюСсылку(Отправитель);
	КонецЕсли;
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(Отправитель);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	Если (ДанныеОбъекта.сфпДлительностьЗвонка > 0) Или (Не ДанныеОбъекта.Входящий) Тогда
		ЭлементДлительность = ДокументHTML.СоздатьЭлемент("span");
		ЭлементДлительность.ТекстовоеСодержимое = " (" + ИнтервалВремениВСекундахСтрокой(ДанныеОбъекта.сфпДлительностьЗвонка) + ")";
		БлокЗаголовок.ДобавитьДочерний(ЭлементДлительность);
	КонецЕсли;
	
	Если ДанныеОбъекта.Входящий Тогда
		Получатель = ДанныеОбъекта.Ответственный;
	Иначе
		Получатель = ДанныеОбъекта.АбонентПредставление;
	КонецЕсли;
	
	БлокПолучатель = ДокументHTML.СоздатьЭлемент("div");
	БлокПолучатель.УстановитьАтрибут("class", "text__gray");
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокПолучатель);
	
	ЭлементКому = ДокументHTML.СоздатьЭлемент("span");
	ЭлементКому.ТекстовоеСодержимое = Нстр("ru='Кому: ';en='To: '");
	БлокПолучатель.ДобавитьДочерний(ЭлементКому);
	
	Если ТипЗнч(Получатель) = Тип("Строка") Тогда
		ЭлементПолучатель = ДокументHTML.СоздатьЭлемент("span");
	Иначе
		ЭлементПолучатель = ДокументHTML.СоздатьЭлемент("a");
		ЭлементПолучатель.Гиперссылка = ПолучитьНавигационнуюСсылку(Получатель);
	КонецЕсли;
	ЭлементПолучатель.ТекстовоеСодержимое = Строка(Получатель);
	БлокПолучатель.ДобавитьДочерний(ЭлементПолучатель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	БлокТема.УстановитьАтрибут("class", "interest__content text__bold");
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	ДобавленоСтрок = ДобавитьHTMLМногострочныйТекст(ДокументHTML, БлокТема, ДанныеОбъекта.Комментарий);
	Контекст.ДобавитьКнопкуРаскрыть = (ДобавленоСтрок > 1);
	
	ДобавитьHTMLСписокПрисоединенныхФайлов(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLЭлектронноеПисьмоВходящее(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст)
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__incoming-letter");
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	Если ДанныеОбъекта.ПометкаУдаления Тогда
		ДобавитьПометкуУдаления(БлокСодержаниеОбъекта);
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДобавитьHTMLБлокЗаголовка(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементСостояние = ДокументHTML.СоздатьЭлемент("span");
	ЭлементСостояние.ТекстовоеСодержимое = НСтр("ru='Получено от ';en='Received from '");
	БлокЗаголовок.ДобавитьДочерний(ЭлементСостояние);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.ОтправительПредставление);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	БлокПолучатель = ДокументHTML.СоздатьЭлемент("div");
	БлокПолучатель.УстановитьАтрибут("class", "text__gray");
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокПолучатель);
	
	ЭлементКому = ДокументHTML.СоздатьЭлемент("span");
	ЭлементКому.ТекстовоеСодержимое = Нстр("ru='Кому: ';en='To: '");
	БлокПолучатель.ДобавитьДочерний(ЭлементКому);
	
	ЭлементПолучатель = ДокументHTML.СоздатьЭлемент("span");
	ЭлементПолучатель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.СписокПолучателейПисьма);
	БлокПолучатель.ДобавитьДочерний(ЭлементПолучатель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	БлокТема.УстановитьАтрибут("class", "interest__content text__bold");
	БлокТема.ТекстовоеСодержимое = ДанныеОбъекта.Тема;
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
	ДобавитьHTMLСписокПрисоединенныхФайлов(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLЭлектронноеПисьмоИсходящее(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст)
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__outgoing-letter");
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	Если ДанныеОбъекта.ПометкаУдаления Тогда
		ДобавитьПометкуУдаления(БлокСодержаниеОбъекта);
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДобавитьHTMLБлокЗаголовка(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементСостояние = ДокументHTML.СоздатьЭлемент("span");
	Если ДанныеОбъекта.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено Тогда
		ЭлементСостояние.ТекстовоеСодержимое = НСтр("ru='Отправлено от ';en='Sent from '");
	Иначе
		ЭлементСостояние.ТекстовоеСодержимое = НСтр("ru='Создано ';en='Created '");
	КонецЕсли;
	БлокЗаголовок.ДобавитьДочерний(ЭлементСостояние);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Автор);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	БлокПолучатель = ДокументHTML.СоздатьЭлемент("div");
	БлокПолучатель.УстановитьАтрибут("class", "text__gray");
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокПолучатель);
	
	ЭлементКому = ДокументHTML.СоздатьЭлемент("span");
	ЭлементКому.ТекстовоеСодержимое = Нстр("ru='Кому: ';en='To: '");
	БлокПолучатель.ДобавитьДочерний(ЭлементКому);
	
	ЭлементПолучатель = ДокументHTML.СоздатьЭлемент("span");
	ЭлементПолучатель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.СписокПолучателейПисьма);
	БлокПолучатель.ДобавитьДочерний(ЭлементПолучатель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	БлокТема.УстановитьАтрибут("class", "interest__content text__bold");
	БлокТема.ТекстовоеСодержимое = ДанныеОбъекта.Тема;
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
	ДобавитьHTMLСписокПрисоединенныхФайлов(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLСообщениеSMS(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст)
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__incoming-sms");
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	Если ДанныеОбъекта.ПометкаУдаления Тогда
		ДобавитьПометкуУдаления(БлокСодержаниеОбъекта);
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДобавитьHTMLБлокЗаголовка(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Если ТипЗнч(ДанныеОбъекта.Автор) = Тип("Строка") Или Не ЗначениеЗаполнено(ДанныеОбъекта.Автор) Тогда
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Иначе
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("a");
		ЭлементОтправитель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Автор);
	КонецЕсли;
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Автор);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	ЭлементСостояние = ДокументHTML.СоздатьЭлемент("span");
	ЭлементСостояние.ТекстовоеСодержимое = " (" + НРег(Строка(ДанныеОбъекта.Состояние)) + ")";
	БлокЗаголовок.ДобавитьДочерний(ЭлементСостояние);
	
	БлокПолучатель = ДокументHTML.СоздатьЭлемент("div");
	БлокПолучатель.УстановитьАтрибут("class", "text__gray");
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокПолучатель);
	
	ЭлементКому = ДокументHTML.СоздатьЭлемент("span");
	ЭлементКому.ТекстовоеСодержимое = Нстр("ru='Кому: ';en='To: '");
	БлокПолучатель.ДобавитьДочерний(ЭлементКому);
	
	Если ТипЗнч(ДанныеОбъекта.СписокУчастников) = Тип("Строка") Тогда
		ЭлементПолучатель = ДокументHTML.СоздатьЭлемент("span");
	Иначе
		ЭлементПолучатель = ДокументHTML.СоздатьЭлемент("a");
		ЭлементПолучатель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.СписокУчастников);
	КонецЕсли;
	ЭлементПолучатель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.СписокУчастников);
	БлокПолучатель.ДобавитьДочерний(ЭлементПолучатель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	БлокТема.УстановитьАтрибут("class", "interest__content text__bold");
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	ДобавленоСтрок = ДобавитьHTMLМногострочныйТекст(ДокументHTML, БлокТема, ДанныеОбъекта.Тема);
	
	Контекст.ДобавитьКнопкуРаскрыть = (ДобавленоСтрок > 1);
	
	ДобавитьHTMLСписокПрисоединенныхФайлов(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLЗаявка(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст)
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__request");
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	Если ДанныеОбъекта.ПометкаУдаления Тогда
		ДобавитьПометкуУдаления(БлокСодержаниеОбъекта);
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДобавитьHTMLБлокЗаголовка(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.УстановитьАтрибут("class", "text__gray");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	СтрокаОрганизации = "";
	Если ЗначениеЗаполнено(ДанныеОбъекта.Организация) Тогда
		СтрокаОрганизации = " (" + Строка(ДанныеОбъекта.Организация) + ")";
	КонецЕсли;
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Наименование) + СтрокаОрганизации;
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	БлокТема.ТекстовоеСодержимое = Строка(ДанныеОбъекта.ИсточникПолучения) + ": " + ДанныеОбъекта.Тема;
	БлокТема.УстановитьАтрибут("class", "interest__content text__bold");
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
	ДобавитьHTMLСписокПрисоединенныхФайлов(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLИнтерес(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст)
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	Если ДанныеОбъекта.ТипОбращения = Справочники.CRM_ТипыОбращений.Интерес Тогда
		БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__interest");
	Иначе
		БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__interest-support");
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	Если ДанныеОбъекта.ПометкаУдаления Тогда
		ДобавитьПометкуУдаления(БлокСодержаниеОбъекта);
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДокументHTML.СоздатьЭлемент("div");
	БлокЗаголовок.УстановитьАтрибут("class", "text__gray");
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокЗаголовок);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Если ТипЗнч(ДанныеОбъекта.Ответственный) = Тип("Строка") Или Не ЗначениеЗаполнено(ДанныеОбъекта.Ответственный) Тогда
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Иначе
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("a");
		ЭлементОтправитель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Ответственный);
	КонецЕсли;
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Ответственный);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	БлокТема.УстановитьАтрибут("class", "interest__content text__bold");
	СтрокаСуммы = "";
	Если ДанныеОбъекта.ОжидаемаяВыручка > 0 Тогда
		СтрокаСуммы = НСтр("ru=' на сумму ';en=' for the amount of '") + Формат(ДанныеОбъекта.ОжидаемаяВыручка,
			 "ЧЦ=15; ЧДЦ=2") + " " 
			+ Строка(ДанныеОбъекта.Валюта);
	КонецЕсли;
	Если ДанныеОбъекта.ТипОбращения = Справочники.CRM_ТипыОбращений.Интерес Тогда
		БлокТема.ТекстовоеСодержимое = НСтр("ru='Интерес клиента: ';en='Customer lead: '") + ДанныеОбъекта.Тема + СтрокаСуммы;
	Иначе
		БлокТема.ТекстовоеСодержимое = СокрЛП(ДанныеОбъекта.ТипОбращения) + ": " + ДанныеОбъекта.Тема;
	КонецЕсли;	
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
	ДобавитьHTMLСписокПрисоединенныхФайлов(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLПрочийДокумент(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст)
	
	УстановитьПривилегированныйРежим(Истина);
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	Если ДанныеОбъекта.Проведен Тогда
		БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__other-docs-posted");
	Иначе
		БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__other-docs");
	КонецЕсли;
	
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	Если ДанныеОбъекта.ПометкаУдаления Тогда
		ДобавитьПометкуУдаления(БлокСодержаниеОбъекта);
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДобавитьHTMLБлокЗаголовка(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Если ТипЗнч(ДанныеОбъекта.Автор) = Тип("Строка") Или Не ЗначениеЗаполнено(ДанныеОбъекта.Автор) Тогда
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Иначе
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("a");
		ЭлементОтправитель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Автор);
	КонецЕсли;
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Автор);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	БлокТема.УстановитьАтрибут("class", "interest__content text__bold");
	СтрокаСуммы = "";
	Если ЗначениеЗаполнено(ДанныеОбъекта.СуммаДокумента) Тогда
		СтрокаСуммы = НСтр("ru=' на сумму ';en=' for the amount of '") + Формат(ДанныеОбъекта.СуммаДокумента,
			 "ЧЦ=15; ЧДЦ=2") + " " 
			+ Строка(ДанныеОбъекта.Валюта);
	КонецЕсли;
	БлокТема.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Синоним) + " " + "№" +
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеОбъекта.Номер) + " " + СтрокаСуммы;
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
	ДобавитьHTMLСписокПрисоединенныхФайлов(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLТелемаркетинг(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст)
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаУчастников = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДанныеОбъекта.Ссылка, "Участники").Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	Если ДанныеОбъекта.Проведен Тогда
		БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__other-docs-posted");
	Иначе
		БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__other-docs");
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	Если ДанныеОбъекта.ПометкаУдаления Тогда
		ДобавитьПометкуУдаления(БлокСодержаниеОбъекта);
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДобавитьHTMLБлокЗаголовка(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Если ТипЗнч(ДанныеОбъекта.Автор) = Тип("Строка") Или Не ЗначениеЗаполнено(ДанныеОбъекта.Автор) Тогда
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Иначе
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("a");
		ЭлементОтправитель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Автор);
	КонецЕсли;
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Автор);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	БлокТема.УстановитьАтрибут("class", "interest__content text__bold");
	БлокТема.ТекстовоеСодержимое = НСтр("ru='Телемаркетинг '") + """" + ДанныеОбъекта.Тема + """" 
		+ НСтр("ru=' от '") + Формат(ДанныеОбъекта.Дата,
		 "ДФ=dd.MM.yyyy");
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
	СтрокаОбработки = Неопределено;
	ОбъектЛенты = Контекст.МассивОбъектов[0];
	Если Контекст.Режим = "ЛентаКлиента" Тогда
		СтрокаОбработки = ТаблицаУчастников.Найти(ОбъектЛенты, "Партнер");
	ИначеЕсли Контекст.Режим = "ЛентаКонтакта" Тогда
		СтрокаОбработки = ТаблицаУчастников.Найти(ОбъектЛенты, "КонтактноеЛицо");
	КонецЕсли;	
	
	Если СтрокаОбработки <> Неопределено Тогда
		СтрокаСтатуса = "";
		Если СтрокаОбработки.Обработан Тогда
			СтрокаСтатуса = НСтр("ru='Статус: Обработан'");
		ИначеЕсли СтрокаОбработки.НеДозвонились Тогда
			СтрокаСтатуса = НСтр("ru='Статус: Не дозвонились'");
		ИначеЕсли СтрокаОбработки.Отказ Тогда
			СтрокаСтатуса = НСтр("ru='Статус: Отказ'");
		КонецЕсли;
		БлокСтатус = ДокументHTML.СоздатьЭлемент("div");
		БлокСтатус.ТекстовоеСодержимое = СтрокаСтатуса;
		БлокСодержаниеОбъекта.ДобавитьДочерний(БлокСтатус);
		
		БлокПримечание = ДокументHTML.СоздатьЭлемент("div");
		БлокПримечание.ТекстовоеСодержимое = НСтр("ru='Примечание: '") + СтрокаОбработки.Примечание;
		БлокСодержаниеОбъекта.ДобавитьДочерний(БлокПримечание);
		
		Если НЕ СтрокаОбработки.ПричинаОтказа.Пустая() Тогда
			БлокПричина = ДокументHTML.СоздатьЭлемент("div");
			БлокПричина.ТекстовоеСодержимое = НСтр("ru='Причина отказа: '") + СтрокаОбработки.ПричинаОтказа;
			БлокСодержаниеОбъекта.ДобавитьДочерний(БлокПричина);
		КонецЕсли;	
		Если НЕ СтрокаОбработки.Интерес.Пустая() Тогда
			БлокИнтерес = ДокументHTML.СоздатьЭлемент("div");
			БлокИнтерес.ТекстовоеСодержимое = НСтр("ru='Зарегистрирован: '");
			
			ЭлементИнтерес = ДокументHTML.СоздатьЭлемент("a");
			ЭлементИнтерес.Гиперссылка = ПолучитьНавигационнуюСсылку(СтрокаОбработки.Интерес);
			ЭлементИнтерес.ТекстовоеСодержимое = Строка(СтрокаОбработки.Интерес);
			
			БлокИнтерес.ДобавитьДочерний(ЭлементИнтерес);
			
			БлокСодержаниеОбъекта.ДобавитьДочерний(БлокИнтерес);
		КонецЕсли;
		Если НЕ СтрокаОбработки.Звонок.Пустая() Тогда
			БлокИнтерес = ДокументHTML.СоздатьЭлемент("div");
			БлокИнтерес.ТекстовоеСодержимое = НСтр("ru='Телефонный звонок: '");
			
			ЭлементИнтерес = ДокументHTML.СоздатьЭлемент("a");
			ЭлементИнтерес.Гиперссылка = ПолучитьНавигационнуюСсылку(СтрокаОбработки.Звонок);
			ЭлементИнтерес.ТекстовоеСодержимое = Строка(СтрокаОбработки.Звонок);
			
			БлокИнтерес.ДобавитьДочерний(ЭлементИнтерес);
			
			БлокСодержаниеОбъекта.ДобавитьДочерний(БлокИнтерес);
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьHTMLСписокПрисоединенныхФайлов(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLДиалоги(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст)
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__other-docs-posted");
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	Если ДанныеОбъекта.ПометкаУдаления Тогда
		ДобавитьПометкуУдаления(БлокСодержаниеОбъекта);
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	БлокТема.УстановитьАтрибут("class", "interest__content text__bold");
	Если ЗначениеЗаполнено(ДанныеОбъекта.Наименование) Тогда
		БлокТема.ТекстовоеСодержимое = НСтр("ru='Диалог '") + """" + ДанныеОбъекта.Наименование + """";
	Иначе
		БлокТема.ТекстовоеСодержимое = НСтр("ru='Диалог № '") + ДанныеОбъекта.Код;
	КонецЕсли;
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
	ПоследнееСообщение = CRM_РаботаСМессенджерамиСервер.ПоследнееСообщениеДиалога(ДанныеОбъекта.Ссылка);
	
	Если Не ПоследнееСообщение = Неопределено Тогда
		БлокИнформация = ДокументHTML.СоздатьЭлемент("div");
		ШаблонТекстовоеСодержимое = НСтр("ru = '%1, %2, %3'");
		БлокИнформация.ТекстовоеСодержимое = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстовоеСодержимое,
												ДанныеОбъекта.КонтактПредставление,
												ДанныеОбъекта.УчетнаяЗапись,
												ПоследнееСообщение.Дата);
		БлокСодержаниеОбъекта.ДобавитьДочерний(БлокИнформация);
	КонецЕсли;
	
	БлокОтветственный = ДокументHTML.СоздатьЭлемент("div");
	ЭлементОтветственный = ДокументHTML.СоздатьЭлемент("a"); 
	ЭлементОтветственный.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Ответственный);
	ЭлементОтветственный.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Ответственный);
	БлокОтветственный.ДобавитьДочерний(ЭлементОтветственный);
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокОтветственный);
	
	БлокСтатус = ДокументHTML.СоздатьЭлемент("div");
	БлокСтатус.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Статус);
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокСтатус);
	
	ДобавитьHTMLСписокПрисоединенныхФайлов(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта, ПараметрыОбъекта, Контекст);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLСозданиеОбъекта(ДокументHTML, БлокОбъект, Знач ДанныеОбъекта, Контекст)
	
	БлокЗаголовок = ДокументHTML.СоздатьЭлемент("div");
	БлокЗаголовок.УстановитьАтрибут("class", "interest__props text__gray");
	БлокОбъект.ДобавитьДочерний(БлокЗаголовок);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Если ТипЗнч(ДанныеОбъекта.Автор) = Тип("Строка") Или Не ЗначениеЗаполнено(ДанныеОбъекта.Автор) Тогда
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Иначе
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("a");
		ЭлементОтправитель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Автор);
	КонецЕсли;
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Автор);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	ЭлементСобытие = ДокументHTML.СоздатьЭлемент("span");
	Если Контекст.Режим = "ЛентаИнтереса" Тогда
		Если ДанныеОбъекта.ТипОбращения = Справочники.CRM_ТипыОбращений.Интерес Тогда
			ЭлементСобытие.ТекстовоеСодержимое = НСтр("ru=' Создан интерес: ';en=' Created Lead: '");
		Иначе
			ЭлементСобытие.ТекстовоеСодержимое = НСтр("ru=' Создано обращение ('") + СокрЛП(ДанныеОбъекта.ТипОбращения) + "): ";
		КонецЕсли;
	ИначеЕсли Контекст.Режим = "ЛентаКлиента" Тогда
		ЭлементСобытие.ТекстовоеСодержимое = НСтр("ru=' Создан клиент: ';en=' Created Customer: '");
	Иначе
		ЭлементСобытие.ТекстовоеСодержимое = НСтр("ru=' Создан контакт: ';en=' Created Contact: '");
	КонецЕсли;
	БлокЗаголовок.ДобавитьДочерний(ЭлементСобытие);
	
	ЭлементТема = ДокументHTML.СоздатьЭлемент("span");
	ЭлементТема.ТекстовоеСодержимое = ДанныеОбъекта.Описание;
	БлокЗаголовок.ДобавитьДочерний(ЭлементТема);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLЗавершениеИнтереса(ДокументHTML, БлокОбъект, Знач ДанныеОбъекта)
	
	БлокЗаголовок = ДокументHTML.СоздатьЭлемент("div");
	БлокЗаголовок.УстановитьАтрибут("class", "interest__props text__gray");
	БлокОбъект.ДобавитьДочерний(БлокЗаголовок);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Если ТипЗнч(ДанныеОбъекта.Ответственный) = Тип("Строка") Или Не ЗначениеЗаполнено(ДанныеОбъекта.Ответственный) Тогда
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Иначе
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("a");
		ЭлементОтправитель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Ответственный);
	КонецЕсли;
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Ответственный);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	ЭлементСобытие = ДокументHTML.СоздатьЭлемент("span");
	Если ДанныеОбъекта.ЭтоПоддержка Тогда
		ЭлементСобытие.ТекстовоеСодержимое = НСтр("ru=' обращение закрыто'");
	Иначе
		Если ДанныеОбъекта.ЗавершенУспешно Тогда
			ЭлементСобытие.ТекстовоеСодержимое = НСтр("ru=' интерес завершен успешно';en=' lead completed successfully'");
		Иначе
			ЭлементСобытие.ТекстовоеСодержимое = НСтр("ru=' интерес завершен неудачно';en=' lead completed unsuccessfuly'");
		КонецЕсли;
	КонецЕсли;
	БлокЗаголовок.ДобавитьДочерний(ЭлементСобытие);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLЗаписьИстории(ДокументHTML, БлокОбъект, Знач ДанныеОбъекта)
	
	БлокЗаголовок = ДокументHTML.СоздатьЭлемент("div");
	БлокЗаголовок.УстановитьАтрибут("class", "interest__props text__gray");
	БлокОбъект.ДобавитьДочерний(БлокЗаголовок);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Если ТипЗнч(ДанныеОбъекта.Автор) = Тип("Строка") Или ДанныеОбъекта.Автор = Неопределено Тогда
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Иначе
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("a");
		ЭлементОтправитель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Автор);
	КонецЕсли;
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Автор);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	ИмяПоля = Строка(ДанныеОбъекта.ИмяПоля);
	Если ЗначениеЗаполнено(ДанныеОбъекта.СтароеЗначение) Тогда
		ПрежнееЗначение = Строка(ДанныеОбъекта.СтароеЗначение);
	Иначе 
		ПрежнееЗначение = ДанныеОбъекта.СтароеЗначениеСтрока;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеОбъекта.Значение) Тогда
		НовоеЗначение = Строка(ДанныеОбъекта.Значение);
	Иначе 
		НовоеЗначение = ДанныеОбъекта.ЗначениеСтрока;
	КонецЕсли;
	
	ЭлементИзмененноеПоле = ДокументHTML.СоздатьЭлемент("span");
	БлокЗаголовок.ДобавитьДочерний(ЭлементИзмененноеПоле);
	
	Если ДанныеОбъекта.ВидЗаписи = Перечисления.CRM_ВидыЗаписейИстории.ЗаполнениеРеквизита Тогда
		
		ЭлементИзмененноеПоле.ТекстовоеСодержимое = НСтр("ru=' Для поля ""';en=' For Field ""'") + ИмяПоля +
		НСтр("ru='"" установлено значение ';en='"" set value '");
		
		ЭлементНовоеЗначение = ДокументHTML.СоздатьЭлемент("span");
		ЭлементНовоеЗначение.ТекстовоеСодержимое = """" + НовоеЗначение + """";
		БлокЗаголовок.ДобавитьДочерний(ЭлементНовоеЗначение);
		
	ИначеЕсли ДанныеОбъекта.ВидЗаписи = Перечисления.CRM_ВидыЗаписейИстории.ИзменениеРеквизита Тогда 
		
		Если ПустаяСтрока(ПрежнееЗначение) Тогда
			
			ЭлементИзмененноеПоле.ТекстовоеСодержимое = НСтр("ru=' Для поля ""';en=' For Field ""'") + ИмяПоля +
			НСтр("ru='"" установлено значение ';en='"" set value '");
			
			ЭлементНовоеЗначение = ДокументHTML.СоздатьЭлемент("span");
			ЭлементНовоеЗначение.ТекстовоеСодержимое = """" + НовоеЗначение + """";
			БлокЗаголовок.ДобавитьДочерний(ЭлементНовоеЗначение);
			
		Иначе
			
			ЭлементИзмененноеПоле.ТекстовоеСодержимое = НСтр("ru=' Изменено поле ""';en=' Changed field ""'") + ИмяПоля +
			НСтр("ru='"". Прежнее значение ';en='"". Previous value '");
			
			ЭлементСтароеЗначение = ДокументHTML.СоздатьЭлемент("span");
			ЭлементСтароеЗначение.ТекстовоеСодержимое = """" + ПрежнееЗначение + """";
			БлокЗаголовок.ДобавитьДочерний(ЭлементСтароеЗначение);
			
			ЭлементСвязка = ДокументHTML.СоздатьЭлемент("span");
			ЭлементСвязка.ТекстовоеСодержимое = НСтр("ru=', новое значение ';en=', new value '");
			БлокЗаголовок.ДобавитьДочерний(ЭлементСвязка);
			
			ЭлементНовоеЗначение = ДокументHTML.СоздатьЭлемент("span");
			ЭлементНовоеЗначение.ТекстовоеСодержимое = """" + НовоеЗначение + """";
			БлокЗаголовок.ДобавитьДочерний(ЭлементНовоеЗначение);
			
		КонецЕсли;
		
	ИначеЕсли ДанныеОбъекта.ВидЗаписи = Перечисления.CRM_ВидыЗаписейИстории.ОчисткаРеквизита Тогда 
		
		ЭлементИзмененноеПоле.ТекстовоеСодержимое = НСтр("ru=' Очищено поле ""';en=' Changed field ""'") + ИмяПоля +
		НСтр("ru='"". Прежнее значение ';en='"". Previous value '");
		
		ЭлементСтароеЗначение = ДокументHTML.СоздатьЭлемент("span");
		ЭлементСтароеЗначение.ТекстовоеСодержимое = """" + ПрежнееЗначение + """";
		БлокЗаголовок.ДобавитьДочерний(ЭлементСтароеЗначение);
		
	ИначеЕсли ДанныеОбъекта.ВидЗаписи = Перечисления.CRM_ВидыЗаписейИстории.ДобавлениеЗначенияВСписок Тогда
		
		ЭлементИзмененноеПоле.ТекстовоеСодержимое = НСтр("ru = ' В список ""'") + ИмяПоля +
		НСтр("ru = '"" добавлено значение '");
		
		ЭлементНовоеЗначение = ДокументHTML.СоздатьЭлемент("span");
		ЭлементНовоеЗначение.ТекстовоеСодержимое = """" + НовоеЗначение + """";
		БлокЗаголовок.ДобавитьДочерний(ЭлементНовоеЗначение);
		
	ИначеЕсли ДанныеОбъекта.ВидЗаписи = Перечисления.CRM_ВидыЗаписейИстории.УдалениеЗначенияИзСписка Тогда
		
		ЭлементИзмененноеПоле.ТекстовоеСодержимое = НСтр("ru = ' Из списка ""'") + ИмяПоля +
		НСтр("ru = '"" удалено значение '");
		
		ЭлементНовоеЗначение = ДокументHTML.СоздатьЭлемент("span");
		ЭлементНовоеЗначение.ТекстовоеСодержимое = """" + ПрежнееЗначение + """";
		БлокЗаголовок.ДобавитьДочерний(ЭлементНовоеЗначение);
		
	ИначеЕсли ДанныеОбъекта.ВидЗаписи = Перечисления.CRM_ВидыЗаписейИстории.ИзменениеЗначенияВСписке Тогда
		
		ЭлементИзмененноеПоле.ТекстовоеСодержимое = НСтр("ru = ' В списке ""'") + ИмяПоля +
		НСтр("ru = '"" изменено значение '");
		
		ЭлементСтароеЗначение = ДокументHTML.СоздатьЭлемент("span");
		ЭлементСтароеЗначение.ТекстовоеСодержимое = """" + ПрежнееЗначение + """";
		БлокЗаголовок.ДобавитьДочерний(ЭлементСтароеЗначение);
		
		ЭлементСвязка = ДокументHTML.СоздатьЭлемент("span");
		ЭлементСвязка.ТекстовоеСодержимое = НСтр("ru = ', новое значение '");
		БлокЗаголовок.ДобавитьДочерний(ЭлементСвязка);
		
		ЭлементНовоеЗначение = ДокументHTML.СоздатьЭлемент("span");
		ЭлементНовоеЗначение.ТекстовоеСодержимое = """" + НовоеЗначение + """";
		БлокЗаголовок.ДобавитьДочерний(ЭлементНовоеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьHTMLФайл(ДокументHTML, БлокОбъект, Знач ДанныеОбъекта, Контекст)
	
	ИндексПиктограммы = РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(ДанныеОбъекта.Расширение);
	КлассИконки = "icon icon__file" + Формат(ИндексПиктограммы, "ЧДЦ=0; ЧН=0; ЧГ=0");
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокИконкаОбъекта.УстановитьАтрибут("class", КлассИконки);
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДокументHTML.СоздатьЭлемент("div");
	БлокЗаголовок.УстановитьАтрибут("class", "text__gray");
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокЗаголовок);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("a");
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Автор);
	ЭлементОтправитель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Автор);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.Расширение) Тогда
		ИмяФайла = ДанныеОбъекта.Наименование + "." + ДанныеОбъекта.Расширение;
	Иначе
		ИмяФайла = ДанныеОбъекта.Наименование;
	КонецЕсли;
	
	РазмерФайла = CRM_ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(ДанныеОбъекта.Размер);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	БлокТема.УстановитьАтрибут("class", "interest__content text__bold");
	БлокТема.ТекстовоеСодержимое = ИмяФайла + ", " + РазмерФайла;
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.Описание) Тогда
		БлокОписание = ДокументHTML.СоздатьЭлемент("div");
		БлокОписание.УстановитьАтрибут("class", "interest__content text__gray");
		БлокСодержаниеОбъекта.ДобавитьДочерний(БлокОписание);
		ДобавленоСтрок = ДобавитьHTMLМногострочныйТекст(ДокументHTML, БлокОписание, ДанныеОбъекта.Описание);
		Контекст.ДобавитьКнопкуРаскрыть = (ДобавленоСтрок > 1);
	КонецЕсли;
	
	Контекст.ДобавитьКомандыРаботыСФайлами = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьHTMLДействиеСИнтересом(ДокументHTML, БлокОбъект, Знач ДанныеОбъекта)
	
	БлокЗаголовок = ДокументHTML.СоздатьЭлемент("div");
	БлокЗаголовок.УстановитьАтрибут("class", "interest__props text__gray");
	БлокОбъект.ДобавитьДочерний(БлокЗаголовок);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементАвтор = ДокументHTML.СоздатьЭлемент("span");
	ЭлементАвтор = ДокументHTML.СоздатьЭлемент("a");
	ЭлементАвтор.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Пользователь);
	ЭлементАвтор.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Пользователь);
	БлокЗаголовок.ДобавитьДочерний(ЭлементАвтор);
	
	ЭлементСобытие = ДокументHTML.СоздатьЭлемент("span");
	Если ДанныеОбъекта.Действие = Перечисления.CRM_ДействияСИнтересами.ДобавленСоисполнитель Тогда
		ЭлементСобытие.ТекстовоеСодержимое = НСтр("ru = ' Добавление в соисполнение: '");
	ИначеЕсли ДанныеОбъекта.Действие = Перечисления.CRM_ДействияСИнтересами.УдаленСоисполнитель Тогда
		ЭлементСобытие.ТекстовоеСодержимое = НСтр("ru = ' Удаление из соисполнения: '");
	Иначе
		ЭлементСобытие.ТекстовоеСодержимое = "";
	КонецЕсли;
	БлокЗаголовок.ДобавитьДочерний(ЭлементСобытие);
	
	ЭлементСоисполнитель = ДокументHTML.СоздатьЭлемент("span");
	ЭлементСоисполнитель = ДокументHTML.СоздатьЭлемент("a");
	ЭлементСоисполнитель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.ОбъектДействия);
	ЭлементСоисполнитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.ОбъектДействия);
	БлокЗаголовок.ДобавитьДочерний(ЭлементСоисполнитель);
	
КонецПроцедуры

Процедура ДобавитьHTMLКомандыМенюОбъекта(ДокументHTML, БлокОбъект, ДанныеОбъекта, Контекст)
	
	СписокКоманд = ДобавитьHTMLСписокКоманд(ДокументHTML, БлокОбъект, ДанныеОбъекта);
	Контекст.БлокСписокКоманд = СписокКоманд;
	
	Если ДанныеОбъекта.ТипОбъекта = "Примечание" Тогда
		
		ТекстКоманды = НСтр("ru='Изменить';en='Change'");
		СсылкаКоманды = ТекстСсылкиКоманды("Примечание_Открыть_", ДанныеОбъекта.Ссылка);
		ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ТекстКоманды, СсылкаКоманды);
		
		ТекстКоманды = НСтр("ru='Удалить';en='Delete'");
		СсылкаКоманды = ТекстСсылкиКоманды("Примечание_Удалить_", ДанныеОбъекта.Ссылка);
		ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ТекстКоманды, СсылкаКоманды);
		
	ИначеЕсли ДанныеОбъекта.ТипОбъекта = "Взаимодействие" И ДанныеОбъекта.Раздел = Контекст.НомерРазделаЗапланировано Тогда
		
		ТекстКоманды = НСтр("ru='Изменить';en='Change'");
		СсылкаКоманды = ТекстСсылкиКоманды("ВзаимодействиеПланов_Открыть_", ДанныеОбъекта.Ссылка);
		ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ТекстКоманды, СсылкаКоманды);
		
		ТекстКоманды = НСтр("ru='Удалить';en='Delete'");
		СсылкаКоманды = ТекстСсылкиКоманды("ВзаимодействиеПланов_Отменить", ДанныеОбъекта.Ссылка);
		ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ТекстКоманды, СсылкаКоманды);
		
	ИначеЕсли ДанныеОбъекта.ТипОбъекта = "Взаимодействие" И ДанныеОбъекта.Раздел <> Контекст.НомерРазделаЗапланировано Тогда
		
		ТекстКоманды = НСтр("ru='Изменить';en='Change'");
		СсылкаКоманды = ТекстСсылкиКоманды("ВзаимодействиеИстории_Открыть_", ДанныеОбъекта.Ссылка);
		ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ТекстКоманды, СсылкаКоманды);
		
		ТекстКоманды = НСтр("ru='Удалить';en='Delete'");
		СсылкаКоманды = ТекстСсылкиКоманды("ПрочиеОбъекты_Удалить_", ДанныеОбъекта.Ссылка);
		ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ТекстКоманды, СсылкаКоманды);
		
	ИначеЕсли ДанныеОбъекта.ТипОбъекта = "Задача" И ДанныеОбъекта.Раздел = Контекст.НомерРазделаЗапланировано Тогда
		
		ТекстКоманды = НСтр("ru='Изменить';en='Change'");
		ИмяКоманды = "";
		Если ДанныеОбъекта.CRM_Личная Тогда // Личная
			ИмяКоманды = "ЛичнаяЗадачаПланов_Открыть_";
		КонецЕсли;
		СсылкаКоманды = ТекстСсылкиКоманды(ИмяКоманды, ДанныеОбъекта.Ссылка);
		ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ТекстКоманды, СсылкаКоманды);
		
		Если ДанныеОбъекта.CRM_Личная Тогда
			ТекстКоманды = НСтр("ru='Удалить';en='Delete'");
			СсылкаКоманды = ТекстСсылкиКоманды("ЛичнаяЗадачаПланов_Удалить_", ДанныеОбъекта.Ссылка);
			ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ТекстКоманды, СсылкаКоманды);
		КонецЕсли;
		
	ИначеЕсли ДанныеОбъекта.ТипОбъекта = "Задача" И ДанныеОбъекта.Раздел <> Контекст.НомерРазделаЗапланировано Тогда
		
		ТекстКоманды = НСтр("ru='Изменить';en='Change'");
		ИмяКоманды = "";
		Если ДанныеОбъекта.CRM_Личная Тогда // Личная
			ИмяКоманды = "ЛичнаяЗадачаИстории_Открыть_";
		КонецЕсли;
		СсылкаКоманды = ТекстСсылкиКоманды(ИмяКоманды, ДанныеОбъекта.Ссылка);
		ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ТекстКоманды, СсылкаКоманды);
		
		ТекстКоманды = НСтр("ru='Удалить';en='Delete'");
		СсылкаКоманды = ТекстСсылкиКоманды("ПрочиеОбъекты_Удалить_", ДанныеОбъекта.Ссылка);
		ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ТекстКоманды, СсылкаКоманды);
		
	ИначеЕсли ДанныеОбъекта.ТипОбъекта = "КоммерческоеПредложение" Тогда
		
		ТекстКоманды = НСтр("ru='Изменить';en='Change'");
		СсылкаКоманды = ТекстСсылкиКоманды("", ДанныеОбъекта.Ссылка);
		ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ТекстКоманды, СсылкаКоманды);
		
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			ТекстКоманды = НСтр("ru='Счет на оплату';en='Invoice'");
			СсылкаКоманды = ТекстСсылкиКоманды("Счет_СоздатьНаОсновании_", ДанныеОбъекта.Ссылка);
		Иначе
			ТекстКоманды = НСтр("ru='Заказ клиента';en='Sales order'");
			СсылкаКоманды = ТекстСсылкиКоманды("Заказ_СоздатьНаОсновании_", ДанныеОбъекта.Ссылка);
		КонецЕсли;
		ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ТекстКоманды, СсылкаКоманды);
		
		ТекстКоманды = НСтр("ru='Удалить';en='Delete'");
		СсылкаКоманды = ТекстСсылкиКоманды("ПрочиеОбъекты_Удалить_", ДанныеОбъекта.Ссылка);
		ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ТекстКоманды, СсылкаКоманды);
		
	ИначеЕсли ДанныеОбъекта.ТипОбъекта = "Файл" Тогда
		
		ТекстКоманды = НСтр("ru = 'Просмотр'");
		СсылкаКоманды = ТекстСсылкиКоманды("Файл_Открыть_", ДанныеОбъекта.Ссылка);
		ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ТекстКоманды, СсылкаКоманды);
		
		ТекстКоманды = НСтр("ru = 'Перейти'");
		СсылкаКоманды = ТекстСсылкиКоманды("Файл_Перейти_", ДанныеОбъекта.Ссылка);
		ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ТекстКоманды, СсылкаКоманды);
		
		ТекстКоманды = НСтр("ru='Удалить';en='Delete'");
		СсылкаКоманды = ТекстСсылкиКоманды("ПрочиеОбъекты_Удалить_", ДанныеОбъекта.Ссылка);
		ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ТекстКоманды, СсылкаКоманды);
		
	Иначе
		
		ТекстКоманды = НСтр("ru='Изменить';en='Change'");
		СсылкаКоманды = ТекстСсылкиКоманды("", ДанныеОбъекта.Ссылка);
		ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ТекстКоманды, СсылкаКоманды);
		
		Если Не ДанныеОбъекта.ТипОбъекта = "Диалог" Тогда
			ТекстКоманды = НСтр("ru='Удалить';en='Delete'");
			СсылкаКоманды = ТекстСсылкиКоманды("ПрочиеОбъекты_Удалить_", ДанныеОбъекта.Ссылка);
			ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ТекстКоманды, СсылкаКоманды);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеОбъекта.ЗаписьЗакреплена Тогда
		ТекстКоманды = НСтр("ru='Открепить';en='Unpin'");
		СсылкаКоманды = ТекстСсылкиКоманды("ОбъектЛенты_Открепить_", ДанныеОбъекта.Ссылка);
		ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ТекстКоманды, СсылкаКоманды);
	ИначеЕсли ДанныеОбъекта.Раздел <> Контекст.НомерРазделаЗапланировано Тогда
		ТекстКоманды = НСтр("ru='Закрепить';en='Pin'");
		СсылкаКоманды = ТекстСсылкиКоманды("ОбъектЛенты_Закрепить_", ДанныеОбъекта.Ссылка);
		ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ТекстКоманды, СсылкаКоманды);
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьHTMLСписокКоманд(ДокументHTML, БлокОбъект, Знач ДанныеОбъекта)
	
	БлокКоманды = ДокументHTML.СоздатьЭлемент("div");
	БлокКоманды.УстановитьАтрибут("class", "interest__menu");
	БлокОбъект.ДобавитьДочерний(БлокКоманды);
	
	ЭлементСписокКоманд = ДокументHTML.СоздатьЭлемент("ul");
	БлокКоманды.ДобавитьДочерний(ЭлементСписокКоманд);
	
	Возврат ЭлементСписокКоманд;
	
КонецФункции

Процедура ДобавитьHTMLКоманду(ДокументHTML, ЭлементСписокКоманд, Знач ТекстКоманды, Знач СсылкаКоманды)
	
	ЭлементКоманда = ДокументHTML.СоздатьЭлемент("li");
	ЭлементСписокКоманд.ДобавитьДочерний(ЭлементКоманда);
	
	ЭлементСсылкаКоманды = ДокументHTML.СоздатьЭлемент("a");
	ЭлементСсылкаКоманды.Гиперссылка = СсылкаКоманды;
	ЭлементСсылкаКоманды.ТекстовоеСодержимое = ТекстКоманды;
	ЭлементКоманда.ДобавитьДочерний(ЭлементСсылкаКоманды);
	
КонецПроцедуры

Функция ДобавитьHTMLБлокЗаголовка(ДокументHTML, БлокСодержаниеОбъекта, Знач ДанныеОбъекта)
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.Интерес) Тогда
		
		БлокОбложкаЗаголовка = ДокументHTML.СоздатьЭлемент("div");
		БлокОбложкаЗаголовка.УстановитьАтрибут("class", "overflow-hidden");
		БлокСодержаниеОбъекта.ДобавитьДочерний(БлокОбложкаЗаголовка);
		
		БлокЗаголовок = ДокументHTML.СоздатьЭлемент("div");
		БлокЗаголовок.УстановитьАтрибут("class", "interest__props--info text__gray");
		БлокОбложкаЗаголовка.ДобавитьДочерний(БлокЗаголовок);
		
		БлокГиперссылкаИнтереса = ДокументHTML.СоздатьЭлемент("div");
		БлокГиперссылкаИнтереса.УстановитьАтрибут("class", "interest__props--link");
		БлокОбложкаЗаголовка.ДобавитьДочерний(БлокГиперссылкаИнтереса);
		
		ГиперссылкаИнтереса = ДокументHTML.СоздатьЭлемент("a");
		ГиперссылкаИнтереса.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Интерес);
		ТемаИнтереса = СокрЛП(ДанныеОбъекта.ТемаИнтереса);
		ТипОбращенияИнтереса = СокрЛП(ДанныеОбъекта.ТипОбращенияИнтереса);
		ГиперссылкаИнтереса.ТекстовоеСодержимое = ТипОбращенияИнтереса + ": " + ТемаИнтереса;
		БлокГиперссылкаИнтереса.ДобавитьДочерний(ГиперссылкаИнтереса);
		
	Иначе
		
		БлокЗаголовок = ДокументHTML.СоздатьЭлемент("div");
		БлокЗаголовок.УстановитьАтрибут("class", "text__gray");
		БлокСодержаниеОбъекта.ДобавитьДочерний(БлокЗаголовок);
		
	КонецЕсли;
	
	Возврат БлокЗаголовок;
	
КонецФункции

Функция ДобавитьHTMLМногострочныйТекст(ДокументHTML, БлокСодержаниеОбъекта, Знач Текст)
	
	ЧислоСтрок = СтрЧислоСтрок(Текст);
	
	Если ЧислоСтрок = 1 Тогда
		
		БлокСодержаниеОбъекта.ТекстовоеСодержимое = Текст;
		
	Иначе
		
		ТекстМассив = СтрРазделить(Текст, Символы.ПС);
		БлокСодержаниеОбъекта.ТекстовоеСодержимое = ТекстМассив[0];
		ТекстМассив.Удалить(0);
		Текст = СтрСоединить(ТекстМассив, Символы.ПС);
		
		БлокСвернутыйТекст = ДокументHTML.СоздатьЭлемент("div");
		БлокСвернутыйТекст.УстановитьАтрибут("class", "interest__text-collapse");
		БлокСодержаниеОбъекта.ДобавитьДочерний(БлокСвернутыйТекст);
		БлокСвернутыйТекст.ТекстовоеСодержимое = Текст;
		
	КонецЕсли;
	
	Возврат ЧислоСтрок;
	
КонецФункции

Процедура ДобавитьHTMLСписокПрисоединенныхФайлов(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта, ПараметрыОбъекта, Контекст)
	
	ВладелецФайлов = ДанныеОбъекта.Ссылка;
	Если ДанныеОбъекта.ТипОбъекта = "Задача" И ЗначениеЗаполнено(ДанныеОбъекта.БизнесПроцесс) Тогда
		ВладелецФайлов = ДанныеОбъекта.БизнесПроцесс;
	КонецЕсли;
	
	Если ПараметрыОбъекта.ЕстьФайлы <> Истина Тогда
		Если ПараметрыОбъекта.ЕстьФайлы = Неопределено Тогда
			ИмяСправочника = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(ВладелецФайлов);
			Если Не ЗначениеЗаполнено(ИмяСправочника) Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СвойстваФайлов = СвойстваПрисоединенныхФайловОбъекта(ДанныеОбъекта.Ссылка, ВладелецФайлов);
	
	КоличествоФайлов = СвойстваФайлов.Количество();
	Если КоличествоФайлов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Контекст.ДобавитьКомандыРаботыСФайлами = Истина;
	
	БлокКонтейнерФайлов = ДокументHTML.СоздатьЭлемент("div");
	БлокКонтейнерФайлов.УстановитьАтрибут("class", "interest__content attachment-container");
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокКонтейнерФайлов);
	
	МаксимумФайловДляВывода = 3;
	Для Сч = 1 По Мин(КоличествоФайлов, МаксимумФайловДляВывода) Цикл
		
		ОписаниеФайла = СвойстваФайлов[Сч - 1];
		
		БлокФайл = ДокументHTML.СоздатьЭлемент("div");
		БлокФайл.УстановитьАтрибут("class", "attachment text__gray");
		БлокКонтейнерФайлов.ДобавитьДочерний(БлокФайл);
		
		ИндексПиктограммы = РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(ОписаниеФайла.Расширение);
		КлассИконки = "attachment-icon attachment__file" + Формат(ИндексПиктограммы, "ЧДЦ=0; ЧН=0; ЧГ=0");
		
		БлокИконкаФайла = ДокументHTML.СоздатьЭлемент("div");
		БлокИконкаФайла.УстановитьАтрибут("class", КлассИконки);
		БлокФайл.ДобавитьДочерний(БлокИконкаФайла);
		
		ЭлементИмяФайла = ДокументHTML.СоздатьЭлемент("a");
		ЭлементИмяФайла.УстановитьАтрибут("class", "attachment-link");
		ЭлементИмяФайла.Гиперссылка = ТекстСсылкиКоманды("Файл_Открыть_", ОписаниеФайла.Ссылка);
		ЭлементИмяФайла.ТекстовоеСодержимое = ОписаниеФайла.Имя + "." + ОписаниеФайла.Расширение;
		ЭлементИмяФайла.УстановитьАтрибут("titile", ЭлементИмяФайла.ТекстовоеСодержимое);
		БлокФайл.ДобавитьДочерний(ЭлементИмяФайла);
		
		// Контейнер для команд загрузки и копирования.
		ЭлементКомандФайла = ДокументHTML.СоздатьЭлемент("div");
		ЭлементКомандФайла.УстановитьАтрибут("class", "attachment-commands");
		БлокФайл.ДобавитьДочерний(ЭлементКомандФайла);
		
		// Загрузка вложения.
		ЭлементЗагрузитьВложения = ДокументHTML.СоздатьЭлемент("a");
		ЭлементЗагрузитьВложения.УстановитьАтрибут("href",
			ТекстСсылкиКоманды("ОбъектЛенты_СохранитьВложение_", ОписаниеФайла.Ссылка));
		ЭлементЗагрузитьВложения.УстановитьАтрибут("title", НСтр("ru='Сохранить на диск';en='Save to disk'"));
		ЭлементЗагрузитьВложения.УстановитьАтрибут("class", "interest_button interest_btn__removed interest_btn__download");
		ЭлементЗагрузитьВложения.УстановитьАтрибут("style", "margin-left: 8px;");
		ЭлементКомандФайла.ДобавитьДочерний(ЭлементЗагрузитьВложения);
		
		// Копирования вложения.
		ЭлементКопированияВложения = ДокументHTML.СоздатьЭлемент("a");
		ЭлементКопированияВложения.УстановитьАтрибут("href",
			ТекстСсылкиКоманды("ОбъектЛенты_КопироватьВложение_", ОписаниеФайла.Ссылка));
		ЭлементКопированияВложения.УстановитьАтрибут("title", НСтр("ru='Копировать в буфер обмена';en='Copy to Clipboard'"));
		ЭлементКопированияВложения.УстановитьАтрибут("class", "interest_button interest_btn__removed interest_btn__copy");
		ЭлементКомандФайла.ДобавитьДочерний(ЭлементКопированияВложения);
		
	КонецЦикла;
	
	Если КоличествоФайлов > МаксимумФайловДляВывода Тогда
		
		ОсталосьФайлов = КоличествоФайлов - МаксимумФайловДляВывода;
		
		БлокЕще = ДокументHTML.СоздатьЭлемент("div");
		БлокЕще.УстановитьАтрибут("class", "attachment text__gray");
		БлокКонтейнерФайлов.ДобавитьДочерний(БлокЕще);
		
		ЭлементИмяКоманды = ДокументHTML.СоздатьЭлемент("a");
		ЭлементИмяКоманды.Гиперссылка = ТекстСсылкиКоманды("Файлы_Показать_", ВладелецФайлов);
		ЭлементИмяКоманды.ТекстовоеСодержимое = "+" + Формат(ОсталосьФайлов, "ЧДЦ=0; ЧН=0; ЧГ=0");
		БлокЕще.ДобавитьДочерний(ЭлементИмяКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПометкуУдаления(БлокСодержаниеОбъекта)
	
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__content text__strike");
	
КонецПроцедуры

Процедура ДобавитьHTMLБлокЗагрузитьЕще(ДокументHTML, КоличествоОбъектов, Контекст)
	
	БлокЗагрузитьЕще = ДокументHTML.СоздатьЭлемент("div");
	БлокЗагрузитьЕще.УстановитьАтрибут("class", "show__more");
	Контекст.БлокОбложкаЛенты.ДобавитьДочерний(БлокЗагрузитьЕще);
	
	КоличествоЗагрузитьЕще = Мин(50, КоличествоОбъектов);
	
	ЭлементЗагрузитьЕще = ДокументHTML.СоздатьЭлемент("a");
	ЭлементЗагрузитьЕще.УстановитьАтрибут("class", "show__more__link");
	ЭлементЗагрузитьЕще.Гиперссылка = "ЛентаЗагрузитьЕще";
	ЭлементЗагрузитьЕще.ТекстовоеСодержимое = НСтр("ru='Загрузить еще ';en='Load more '") 
		+ СтрЗаменить(КоличествоЗагрузитьЕще, Символы.НПП, "");
	БлокЗагрузитьЕще.ДобавитьДочерний(ЭлементЗагрузитьЕще);
	
КонецПроцедуры

Процедура ДобавитьHTMLКнопкуРаскрыть(ДокументHTML, БлокОбъект)
	
	ЭлементКнопкаРаскрыть = ДокументHTML.СоздатьЭлемент("button");
	ЭлементКнопкаРаскрыть.УстановитьАтрибут("type", "button");
	ЭлементКнопкаРаскрыть.УстановитьАтрибут("class", "interest__collapse-button js-collapsible");
	БлокОбъект.ДобавитьДочерний(ЭлементКнопкаРаскрыть);
	ЭлементИконкаРаскрыть = ДокументHTML.СоздатьЭлемент("i");
	ЭлементИконкаРаскрыть.УстановитьАтрибут("class", "icon icon__arrow");
	ЭлементКнопкаРаскрыть.ДобавитьДочерний(ЭлементИконкаРаскрыть);
	
КонецПроцедуры

Процедура ДобавитьHTMLКнопкуЗакрепитьОткрепить(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта)
	
	Если ДанныеОбъекта.ЗаписьЗакреплена Тогда
		
		ЭлементГиперссылкаОткрепить = ДокументHTML.СоздатьЭлемент("a");
		ЭлементГиперссылкаОткрепить.УстановитьАтрибут("href", ТекстСсылкиКоманды("ОбъектЛенты_Открепить_", ДанныеОбъекта.Ссылка));
		ЭлементГиперссылкаОткрепить.УстановитьАтрибут("title", НСтр("ru='Открепить';en='Unpin'"));
		ЭлементГиперссылкаОткрепить.УстановитьАтрибут("class", "interest_button interest_btn__hiding interest_btn__unpin");
		БлокОбъект.ДобавитьДочерний(ЭлементГиперссылкаОткрепить);
		
	ИначеЕсли ПараметрыОбъекта.ЕстьКоманды И ДанныеОбъекта.Раздел = 2 Тогда
		
		ЭлементГиперссылкаЗакрепить = ДокументHTML.СоздатьЭлемент("a");
		ЭлементГиперссылкаЗакрепить.УстановитьАтрибут("href", ТекстСсылкиКоманды("ОбъектЛенты_Закрепить_", ДанныеОбъекта.Ссылка));
		ЭлементГиперссылкаЗакрепить.УстановитьАтрибут("title", НСтр("ru='Закрепить';en='Pin'"));
		ЭлементГиперссылкаЗакрепить.УстановитьАтрибут("class", "interest_button interest_btn__hiding interest_btn__pin");
		БлокОбъект.ДобавитьДочерний(ЭлементГиперссылкаЗакрепить);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьHTMLБлокОбъект(ДокументHTML, БлокОбъект, ДанныеОбъекта, ПараметрыОбъекта, Контекст)
	
	БлокРодительОбъекта = Контекст.БлокОбложкаЛенты;
	
	// Определение родителя объекта - группа однотипных объектов или корневой контейнер ленты.
	Если ДанныеОбъекта.ТипОбъекта <> Контекст.ТипОбъектаПредыдущий
		Или ДанныеОбъекта.ДатаБезВремени <> Контекст.ДатаБезВремениПредыдущая
		Или ДанныеОбъекта.Раздел <> Контекст.РазделПредыдущий Тогда
		
		Если Контекст.СчетчикГруппировки > 2 Тогда
			Если Контекст.НадписьПоказать <> Неопределено Тогда
				Контекст.НадписьПоказать.ТекстовоеСодержимое = ТекстКомандыСкрытьРазвернуть(
				Контекст.ТипОбъектаПредыдущий,
				Контекст.СчетчикГруппировки - 1, Истина) + " ";
				Контекст.НадписьПоказать = Неопределено;
			КонецЕсли;
			Если Контекст.НадписьСкрыть <> Неопределено Тогда
				Контекст.НадписьСкрыть.ТекстовоеСодержимое = ТекстКомандыСкрытьРазвернуть(
				Контекст.ТипОбъектаПредыдущий,
				Контекст.СчетчикГруппировки - 1, Ложь) + " ";
				Контекст.НадписьСкрыть = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыОбъекта.Группировка Тогда
			Контекст.БлокГруппаОбъектов = ДокументHTML.СоздатьЭлемент("div");
			Контекст.БлокГруппаОбъектов.УстановитьАтрибут("class", "interest__group");
			Контекст.БлокОбложкаЛенты.ДобавитьДочерний(Контекст.БлокГруппаОбъектов);
			БлокРодительОбъекта = Контекст.БлокГруппаОбъектов;
		Иначе
			БлокРодительОбъекта = Контекст.БлокОбложкаЛенты;
		КонецЕсли;
		
		Контекст.СчетчикГруппировки = 0;
		
	КонецЕсли;
	
	// Для группы 3 и более объектов - добавление "раскрывашки" внизу и уточнение родителя объекта.
	Если ПараметрыОбъекта.Группировка Тогда
		
		Контекст.СчетчикГруппировки = Контекст.СчетчикГруппировки + 1;
		
		Если Контекст.СчетчикГруппировки = 3 Тогда
			
			Контекст.БлокГруппаОбъектов.УстановитьАтрибут("class", "interest__group interest__group--collapse");
			
			БлокКонтейнер = ДокументHTML.СоздатьЭлемент("div");
			БлокКонтейнер.УстановитьАтрибут("class", "interest__collapse-content");
			БлокКонтейнер.ДобавитьДочерний(Контекст.БлокОбъектПредыдущий);
			Контекст.БлокГруппаОбъектов.ДобавитьДочерний(БлокКонтейнер);
			
			// Гиперссылка "Показать еще".
			БлокПоказать = ДокументHTML.СоздатьЭлемент("div");
			БлокПоказать.УстановитьАтрибут("class", "interest__collapse-link");
			БлокПоказать.УстановитьАтрибут("onclick", "showObjects(this)");
			Контекст.БлокГруппаОбъектов.ДобавитьДочерний(БлокПоказать);
			
			БлокПоказатьОбложка = ДокументHTML.СоздатьЭлемент("div");
			БлокПоказать.ДобавитьДочерний(БлокПоказатьОбложка);
			
			Контекст.НадписьПоказать = ДокументHTML.СоздатьЭлемент("span");
			БлокПоказатьОбложка.ДобавитьДочерний(Контекст.НадписьПоказать);
			
			ИконкаПоказать = ДокументHTML.СоздатьЭлемент("i");
			ИконкаПоказать.УстановитьАтрибут("class", "icon icon__arrow");
			БлокПоказатьОбложка.ДобавитьДочерний(ИконкаПоказать);
			
			// Гиперссылка "Скрыть".
			БлокСкрыть = ДокументHTML.СоздатьЭлемент("div");
			БлокСкрыть.УстановитьАтрибут("class", "interest__expand-link");
			БлокСкрыть.УстановитьАтрибут("onclick", "hideObjects(this)");
			БлокСкрыть.УстановитьАтрибут("hidden", "true");
			Контекст.БлокГруппаОбъектов.ДобавитьДочерний(БлокСкрыть);
			
			БлокСкрытьОбложка = ДокументHTML.СоздатьЭлемент("div");
			БлокСкрыть.ДобавитьДочерний(БлокСкрытьОбложка);
			
			Контекст.НадписьСкрыть = ДокументHTML.СоздатьЭлемент("span");
			БлокСкрытьОбложка.ДобавитьДочерний(Контекст.НадписьСкрыть);
			
			ИконкаСкрыть = ДокументHTML.СоздатьЭлемент("i");
			ИконкаСкрыть.УстановитьАтрибут("class", "icon icon__arrow");
			БлокСкрытьОбложка.ДобавитьДочерний(ИконкаСкрыть);
			
			БлокРодительОбъекта = БлокКонтейнер;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыОбъекта.ЕстьКоманды Тогда
		
		ГиперссылкаОткрыть = ДокументHTML.СоздатьЭлемент("a");
		ГиперссылкаОткрыть.УстановитьАтрибут("class", "interest__item-wrap");
		БлокРодительОбъекта.ДобавитьДочерний(ГиперссылкаОткрыть);
		
		ИмяКоманды = "";
		Если ДанныеОбъекта.ТипОбъекта = "Взаимодействие" Тогда
			Если ДанныеОбъекта.Раздел = Контекст.НомерРазделаЗапланировано Тогда
				ИмяКоманды = "ВзаимодействиеПланов_Открыть_";
			Иначе
				ИмяКоманды = "ВзаимодействиеИстории_Открыть_";
			КонецЕсли;
		ИначеЕсли ДанныеОбъекта.ТипОбъекта = "Задача" И ДанныеОбъекта.Раздел = Контекст.НомерРазделаЗапланировано Тогда
			Если ДанныеОбъекта.CRM_Личная Тогда
				ИмяКоманды = "ЛичнаяЗадачаПланов_Открыть_";
			КонецЕсли;
		ИначеЕсли ДанныеОбъекта.ТипОбъекта = "Задача" И ДанныеОбъекта.Раздел <> Контекст.НомерРазделаЗапланировано Тогда
			Если ДанныеОбъекта.CRM_Личная Тогда
				ИмяКоманды = "ЛичнаяЗадачаИстории_Открыть_";
			КонецЕсли;
		ИначеЕсли ДанныеОбъекта.ТипОбъекта = "Примечание" Тогда
			ИмяКоманды = "Примечание_Открыть_";
		ИначеЕсли ДанныеОбъекта.ТипОбъекта = "Файл" Тогда
			ИмяКоманды = "Файл_Открыть_";
		КонецЕсли;
		
		ГиперссылкаОткрыть.Гиперссылка = ТекстСсылкиКоманды(ИмяКоманды, ДанныеОбъекта.Ссылка);
		
		БлокКонтейнерОбъекта =  ДокументHTML.СоздатьЭлемент("object");
		БлокКонтейнерОбъекта.УстановитьАтрибут("type", "interesting/solution");
		ГиперссылкаОткрыть.ДобавитьДочерний(БлокКонтейнерОбъекта);
		
		БлокОбъект = ДокументHTML.СоздатьЭлемент("div");
		БлокОбъект.УстановитьАтрибут("class", "interest__item");
		Если ДанныеОбъекта.Раздел = Контекст.НомерРазделаЗакреплено Тогда
			БлокКонтейнерОбъекта.РодительскийУзел.УстановитьАтрибут("class", "interest__item-wrap interest__item-wrap--shadow");
		КонецЕсли;
		БлокКонтейнерОбъекта.ДобавитьДочерний(БлокОбъект);
		
		Если ПараметрыОбъекта.Группировка Тогда
			Контекст.БлокОбъектПредыдущий = ГиперссылкаОткрыть;
		КонецЕсли;
		
	Иначе
		
		БлокОбъект = ДокументHTML.СоздатьЭлемент("div");
		БлокОбъект.УстановитьАтрибут("class", "interest__item");
		БлокРодительОбъекта.ДобавитьДочерний(БлокОбъект);
		
		Если ПараметрыОбъекта.Группировка Тогда
			Контекст.БлокОбъектПредыдущий = БлокОбъект;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьHTMLЯкорьПрокрутки(ДокументHTML, Контекст)
	
	ЭлементЯкорь = ДокументHTML.СоздатьЭлемент("a");
	ЭлементЯкорь.УстановитьАтрибут("id", "scrollmore");
	Контекст.БлокОбложкаЛенты.ДобавитьДочерний(ЭлементЯкорь);
	ДокументHTML.Тело.УстановитьАтрибут("onload", "scrollToElement()");
	
КонецПроцедуры

Процедура ДобавитьHTMLБлокЗаголовкаГруппировки(ДокументHTML, ДанныеОбъекта, Контекст)
	
	// Вывод заголовка с датой или надписью "Запланировано".
	Если ДанныеОбъекта.Раздел = Контекст.НомерРазделаЗапланировано И Не Контекст.ВыведенЗаголовокЗапланировано Тогда
		БлокЗаголовокОбложка = ДокументHTML.СоздатьЭлемент("div");
		БлокЗаголовокОбложка.УстановитьАтрибут("class", "interest__title-block");
		Контекст.БлокОбложкаЛенты.ДобавитьДочерний(БлокЗаголовокОбложка);
		БлокЗапланировано = ДокументHTML.СоздатьЭлемент("div");
		БлокЗапланировано.УстановитьАтрибут("class", "interest__title interest__title--green");
		БлокЗапланировано.ТекстовоеСодержимое = НСтр("ru='Запланировано';en='Planned'");
		БлокЗаголовокОбложка.ДобавитьДочерний(БлокЗапланировано);
		Контекст.ВыведенЗаголовокЗапланировано = Истина;
	КонецЕсли;
	
	Если ДанныеОбъекта.ДатаБезВремени <> Контекст.ДатаБезВремениПредыдущая
		Или ДанныеОбъекта.Раздел <> Контекст.РазделПредыдущий Тогда
		
		Если ДанныеОбъекта.ДатаБезВремени = Контекст.ДатаСегодня Тогда
			Контекст.ПредставлениеДня = НСтр("ru='Сегодня';en='Today'");
		ИначеЕсли ДанныеОбъекта.ДатаБезВремени = Контекст.ДатаВчера Тогда
			Контекст.ПредставлениеДня = НСтр("ru='Вчера';en='Yesterday'");
		ИначеЕсли ДанныеОбъекта.ДатаБезВремени = Контекст.ДатаЗавтра Тогда
			Контекст.ПредставлениеДня = НСтр("ru='Завтра';en='Tomorrow'");
		Иначе
			Если ДанныеОбъекта.Год = Контекст.ТекущийГод Тогда
				Контекст.ПредставлениеДня = ТРег(Формат(ДанныеОбъекта.ДатаБезВремени, "ДФ='d MMMM'"));
			Иначе
				Контекст.ПредставлениеДня = ТРег(Формат(ДанныеОбъекта.ДатаБезВремени, "ДФ='d MMMM yyyy'"));
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеОбъекта.Раздел = Контекст.НомерРазделаЗакреплено И Не Контекст.ВыведенЗаголовокЗакрепленныеОбъекты Тогда
			БлокЗаголовокОбложка = ДокументHTML.СоздатьЭлемент("div");
			БлокЗаголовокОбложка.УстановитьАтрибут("class", "interest__title-block");
			Контекст.БлокОбложкаЛенты.ДобавитьДочерний(БлокЗаголовокОбложка);
			БлокЗакреплено = ДокументHTML.СоздатьЭлемент("div");
			БлокЗакреплено.УстановитьАтрибут("class", "interest__title interest__title--darkblue");
			БлокЗакреплено.ТекстовоеСодержимое = НСтр("ru='Закреплено';en='Pinned'");
			БлокЗаголовокОбложка.ДобавитьДочерний(БлокЗакреплено);
			Контекст.ВыведенЗаголовокЗакрепленныеОбъекты = Истина;
		КонецЕсли;
		
		Если ДанныеОбъекта.Раздел = 2 Тогда
			БлокЗаголовокОбложка = ДокументHTML.СоздатьЭлемент("div");
			БлокЗаголовокОбложка.УстановитьАтрибут("class", "interest__title-block");
			Контекст.БлокОбложкаЛенты.ДобавитьДочерний(БлокЗаголовокОбложка);
			БлокПериод = ДокументHTML.СоздатьЭлемент("div");
			Если ДанныеОбъекта.ДатаБезВремени = Контекст.ДатаСегодня Тогда
				БлокПериод.УстановитьАтрибут("class", "interest__title interest__title--blue");
			Иначе
				БлокПериод.УстановитьАтрибут("class", "interest__title interest__title--grey");
			КонецЕсли;
			БлокПериод.ТекстовоеСодержимое = Контекст.ПредставлениеДня;
			БлокЗаголовокОбложка.ДобавитьДочерний(БлокПериод);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьHTMLКомандыСохраненияИКопированияВложений(ДокументHTML, БлокОбъект, ДанныеОбъекта)
	
	ЭлементЗагрузитьВложения	= ДокументHTML.СоздатьЭлемент("a");
	ЭлементКопированияВложения	= ДокументHTML.СоздатьЭлемент("a");
	
	ЭлементЗагрузитьВложения.УстановитьАтрибут(
		"class", "interest_button interest_btn__hiding interest_btn__download");
	ЭлементКопированияВложения.УстановитьАтрибут(
		"class", "interest_button interest_btn__hiding interest_btn__copy");
	
	Если ДанныеОбъекта.ТипОбъекта <> "Файл" Тогда
		ЭлементЗагрузитьВложения.УстановитьАтрибут(
		"href", ТекстСсылкиКоманды("ОбъектЛенты_СохранитьВложениеОбщая_", ДанныеОбъекта.Ссылка));
		ЭлементЗагрузитьВложения.УстановитьАтрибут(
		"title", НСтр("ru='Сохранить файлы на диск';en='Save files to disk'"));
		
		ЭлементКопированияВложения.УстановитьАтрибут(
		"href", ТекстСсылкиКоманды("ОбъектЛенты_КопироватьВложениеОбщая_", ДанныеОбъекта.Ссылка));
		ЭлементКопированияВложения.УстановитьАтрибут(
		"title", НСтр("ru='Копировать файлы в буфер';en='Copy files to Clipboard'"));
	Иначе
		ЭлементЗагрузитьВложения.УстановитьАтрибут(
		"href", ТекстСсылкиКоманды("ОбъектЛенты_СохранитьВложение_", ДанныеОбъекта.Ссылка));
		ЭлементЗагрузитьВложения.УстановитьАтрибут(
		"title", НСтр("ru='Сохранить на диск';en='Save to disk'"));
		
		ЭлементКопированияВложения.УстановитьАтрибут(
		"href", ТекстСсылкиКоманды("ОбъектЛенты_КопироватьВложение_", ДанныеОбъекта.Ссылка));
		ЭлементКопированияВложения.УстановитьАтрибут(
		"title", НСтр("ru='Копировать в буфер';en='Copy to Clipboard'"));
	КонецЕсли;
	
	БлокОбъект.ДобавитьДочерний(ЭлементЗагрузитьВложения);
	БлокОбъект.ДобавитьДочерний(ЭлементКопированияВложения);
	
КонецПроцедуры

Процедура ДобавитьHTMLКомандыРаботыСФайлами(ДокументHTML, БлокОбъект, ДанныеОбъекта, Контекст)
	
	СписокКоманд = Контекст.БлокСписокКоманд;
	
	Если ДанныеОбъекта.ТипОбъекта <> "Файл" Тогда
		ПодсказкаСохранение		= НСтр("ru='Сохранить файлы на диск';en='Save files to disk'");
		ПодсказкаКопирование	= НСтр("ru='Копировать файлы в буфер обмена';en='Copy files to Clipboard'");
		
		СсылкаКомандыСохранения		= ТекстСсылкиКоманды("ОбъектЛенты_СохранитьВложениеОбщая_", ДанныеОбъекта.Ссылка);
		СсылкаКомандыКопирования	= ТекстСсылкиКоманды("ОбъектЛенты_КопироватьВложениеОбщая_", ДанныеОбъекта.Ссылка);
	Иначе
		ПодсказкаСохранение		= НСтр("ru='Сохранить на диск';en='Save to disk'");
		ПодсказкаКопирование	= НСтр("ru='Копировать в буфер обмена';en='Copy to Clipboard'");
		
		СсылкаКомандыСохранения		= ТекстСсылкиКоманды("ОбъектЛенты_СохранитьВложение_", ДанныеОбъекта.Ссылка);
		СсылкаКомандыКопирования	= ТекстСсылкиКоманды("ОбъектЛенты_КопироватьВложение_", ДанныеОбъекта.Ссылка);
	КонецЕсли;
	
	ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ПодсказкаСохранение, СсылкаКомандыСохранения);
	ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ПодсказкаКопирование, СсылкаКомандыКопирования);
	
КонецПроцедуры

#КонецОбласти

Функция ТекстКомандыСкрытьРазвернуть(Знач ТипОбъекта, Знач Количество, Знач Развернуть)
	
	Если ТипОбъекта = "ТелефонныйЗвонок" Тогда
		
		Если Развернуть Тогда
			Возврат СтрокаСЧислом(";Еще %1 звонок;;Еще %1 звонка;Еще %1 звонков;Еще %1 звонка",
				Количество, ВидЧисловогоЗначения.Количественное, "L=ru");
		Иначе
			Возврат СтрокаСЧислом(";Скрыть %1 звонок;;Скрыть %1 звонка;Скрыть %1 звонков;Скрыть %1 звонка",
				Количество, ВидЧисловогоЗначения.Количественное, "L=ru");
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "ЭлектронноеПисьмо" Тогда
		
		Если Развернуть Тогда
			Возврат СтрокаСЧислом(";Еще %1 письмо;;Еще %1 письма;Еще %1 писем;Еще %1 письма",
				Количество, ВидЧисловогоЗначения.Количественное, "L=ru");
		Иначе
			Возврат СтрокаСЧислом(";Скрыть %1 письмо;;Скрыть %1 письма;Скрыть %1 писем;Скрыть %1 письма",
				Количество, ВидЧисловогоЗначения.Количественное, "L=ru");
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "СообщениеЧата" Тогда
		
		Если Развернуть Тогда
			Возврат СтрокаСЧислом(";Еще %1 чат;;Еще %1 чата;Еще %1 чатов;Еще %1 чата",
				Количество, ВидЧисловогоЗначения.Количественное, "L=ru");
		Иначе
			Возврат СтрокаСЧислом(";Скрыть %1 чат;;Скрыть %1 чата;Скрыть %1 чатов;Скрыть %1 чата",
				Количество, ВидЧисловогоЗначения.Количественное, "L=ru");
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "СообщениеSMS" Тогда
		
		Если Развернуть Тогда
			Возврат СтрокаСЧислом(";Еще %1 SMS;;Еще %1 SMS;Еще %1 SMS;Еще %1 SMS",
				Количество, ВидЧисловогоЗначения.Количественное, "L=ru");
		Иначе
			Возврат СтрокаСЧислом(";Скрыть %1 SMS;;Скрыть %1 SMS;Скрыть %1 SMS;Скрыть %1 SMS",
				Количество, ВидЧисловогоЗначения.Количественное, "L=ru");
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "Файл" Тогда
		
		Если Развернуть Тогда
			Возврат СтрокаСЧислом(";Еще %1 файл;;Еще %1 файла;Еще %1 файлов;Еще %1 файла",
				Количество, ВидЧисловогоЗначения.Количественное, "L=ru");
		Иначе
			Возврат СтрокаСЧислом(";Скрыть %1 файл;;Скрыть %1 файла;Скрыть %1 файлов;Скрыть %1 файла",
				Количество, ВидЧисловогоЗначения.Количественное, "L=ru");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ИнтервалВремениВСекундахСтрокой(Знач ИнтервалВСекундах)
	
	Если ИнтервалВСекундах = 0 Тогда
		Возврат НСтр("ru='0 сек';en='0 sec'");
	КонецЕсли;
	
	Часов = Цел(ИнтервалВСекундах / 60 / 60);
	Минут = Цел((ИнтервалВСекундах - Часов * 60 * 60) / 60);
	Секунд = ИнтервалВСекундах - Часов * 60 * 60 - Минут * 60;
	
	ОписаниеИнтервала =
		?(Часов = 0, "", Строка(Часов) + НСтр("ru=' ч ';en=' h '")) +
		?(Минут = 0, "", Строка(Минут) + НСтр("ru=' мин ';en=' min '")) +
		?(Секунд = 0, "", Строка(Секунд) + НСтр("ru=' сек ';en=' sec '"));
	
	Возврат СокрЛП(ОписаниеИнтервала);
	
КонецФункции

Процедура ДобавитьПолучателяЧата(ПолучателиЧатаТаблица, Знач ДанныеОбъекта)
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыДиалога = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеОбъекта.Ссылка,
		"ID_Пользователя,Группа,Контакт");
	
	Отправитель = ?(ЗначениеЗаполнено(РеквизитыДиалога.Контакт),
		РеквизитыДиалога.Контакт, ДанныеОбъекта.КонтактПредставление);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Адрес",			РеквизитыДиалога.ID_Пользователя);
	ПараметрыОтбора.Вставить("Контакт",			Отправитель);
	ПараметрыОтбора.Вставить("УчетнаяЗапись",	ДанныеОбъекта.УчетнаяЗапись);
	ПараметрыОтбора.Вставить("Представление",	ДанныеОбъекта.КонтактПредставление);
	ПараметрыОтбора.Вставить("Группа",			РеквизитыДиалога.Группа);
	
	НайденныеСтроки = ПолучателиЧатаТаблица.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрока = ПолучателиЧатаТаблица.Добавить();
		НоваяСтрока.Идентификатор	= Строка(Новый УникальныйИдентификатор);
		НоваяСтрока.Адрес			= РеквизитыДиалога.ID_Пользователя;
		НоваяСтрока.Контакт			= Отправитель;
		НоваяСтрока.УчетнаяЗапись	= ДанныеОбъекта.УчетнаяЗапись;
		НоваяСтрока.Представление	= ДанныеОбъекта.КонтактПредставление;
		НоваяСтрока.Группа			= РеквизитыДиалога.Группа;
		НоваяСтрока.ВидКИ = РегистрыСведений.CRM_ВидыКонтактнойИнформацииМессенджеров.ВидКонтактнойИнформацииМессенджера(
			ДанныеОбъекта.УчетнаяЗапись.ТипМессенджера, Отправитель);
	КонецЕсли;
	
КонецПроцедуры

Функция СвойстваПрисоединенныхФайловОбъекта(Ссылка, ВладелецФайлов)
	
	СвойстваФайлов = Новый ТаблицаЗначений;
	СвойстваФайлов.Колонки.Добавить("Ссылка");
	СвойстваФайлов.Колонки.Добавить("Имя");
	СвойстваФайлов.Колонки.Добавить("Расширение");
	
	ИмяСправочникаХранения = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(ВладелецФайлов);
	Если Не ЗначениеЗаполнено(ИмяСправочникаХранения) Тогда
		Возврат СвойстваФайлов;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СправочникХраненияФайлов.Ссылка КАК Ссылка,
	|	СправочникХраненияФайлов.Наименование КАК Имя,
	|	СправочникХраненияФайлов.Расширение КАК Расширение
	|ИЗ
	|	&ИмяСправочника КАК СправочникХраненияФайлов
	|ГДЕ
	|	СправочникХраненияФайлов.ВладелецФайла = &ВладелецФайла
	|	И СправочникХраненияФайлов.Задача = &Задача
	|	И НЕ СправочникХраненияФайлов.ПометкаУдаления
	|	И НЕ СправочникХраненияФайлов.ЭтоГруппа
	|	И НЕ СправочникХраненияФайлов.Служебный
	|	И СправочникХраненияФайлов.ИДФайлаЭлектронногоПисьма = """"";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", "Справочник." + ИмяСправочникаХранения);
	
	Если Не РаботаСФайламиСлужебный.ЕстьРеквизитСлужебный(ИмяСправочникаХранения) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И НЕ СправочникХраненияФайлов.Служебный", "");
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.Справочники[ИмяСправочникаХранения];
	
	Если Не ОбъектМетаданных.Иерархический Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И НЕ СправочникХраненияФайлов.ЭтоГруппа", "");
	КонецЕсли;
	
	ЕстьРеквизитИДФайла = (ОбъектМетаданных.Реквизиты.Найти("ИДФайлаЭлектронногоПисьма") <> Неопределено);
	Если Не ЕстьРеквизитИДФайла Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И СправочникХраненияФайлов.ИДФайлаЭлектронногоПисьма = """"", "");
	КонецЕсли;
	
	ЕстьРеквизитЗадача = (ОбъектМетаданных.Реквизиты.Найти("Задача") <> Неопределено);
	Если Не ЕстьРеквизитЗадача Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И СправочникХраненияФайлов.Задача = &Задача", "");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайлов);
	Если ЕстьРеквизитЗадача Тогда
		Запрос.УстановитьПараметр("Задача", Ссылка);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СвойстваФайлов = Запрос.Выполнить().Выгрузить();
	
	Возврат СвойстваФайлов;
	
КонецФункции

Функция ТекстСсылкиКоманды(ИмяКоманды, Ссылка)
	
	Если ЗначениеЗаполнено(ИмяКоманды) Тогда
		
		ПолноеИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(Ссылка);
		Возврат ИмяКоманды + ПолноеИмяТаблицы + "__" + Ссылка.УникальныйИдентификатор();
		
	Иначе
		
		Возврат ПолучитьНавигационнуюСсылку(Ссылка);
		
	КонецЕсли;
	
КонецФункции

Функция ЕстьПраваДоступаКЭлектронномуПисьму(ДанныеПисьма, Пользователь) Экспорт
	
	УчетнаяЗапись = ДанныеПисьма.УчетнаяЗапись;
	Ответственный = ДанныеПисьма.Ответственный;
	
	Если Ответственный = Пользователь
		ИЛИ УчетнаяЗапись.CRM_ЭтоОбщаяУчетнаяЗапись
		ИЛИ УчетнаяЗапись.CRM_РазрешитьПросмотрПисемВсемПользователям
		ИЛИ CRM_ОбщегоНазначенияСервер.НайтиПользователяВУчетнойЗаписи(УчетнаяЗапись, Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущиеПользователи = РегистрыСведений.CRM_ОтсутствиеСотрудников.ЗамещаемыеПользователи(Пользователь);
	Результат = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЖурналДокументов.CRM_Интерес.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.CRM_ЖурналДокументов КАК ЖурналДокументов
	|ГДЕ
	|	ЖурналДокументов.Объект = &Объект
	|	И НЕ ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЖурналДокументов.ОсновнойИнтерес УБЫВ");
	
	Запрос.Параметры.Вставить("Объект", ДанныеПисьма.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если ТекущиеПользователи.Найти(Выборка.Ответственный) <> Неопределено Тогда
			Результат = Истина;
		Иначе
			Руководители = CRM_УправлениеДоступомПовтИсп.ПолучитьРуководителейПользователя(Выборка.Ответственный);
			Результат = (CRM_ОбщегоНазначенияКлиентСервер.ПересечениеМножеств(ТекущиеПользователи,
				 Руководители).Количество() > 0);
		КонецЕсли;
	КонецЕсли;
	
	Если Результат Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ДанныеПисьма.Свойство("CRM_РольОтветственного") И ЗначениеЗаполнено(ДанныеПисьма.CRM_РольОтветственного) Тогда
		ИсполнителиРоли = CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРоли(ДанныеПисьма.CRM_РольОтветственного);
		Результат = (CRM_ОбщегоНазначенияКлиентСервер.ПересечениеМножеств(ТекущиеПользователи,
			 ИсполнителиРоли.ВыгрузитьЗначения()).Количество() > 0);
	Иначе
		Результат = (ТекущиеПользователи.Найти(Ответственный) <> Неопределено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКонтактПоАдресу(УчетнаяЗаписьЭП, Адрес, Знач Представление = Неопределено,
	 СоответствияАдресовИКонтактовР)
	
	Для Каждого Элемент Из СоответствияАдресовИКонтактовР Цикл
		Если Элемент.Представление = Адрес Тогда
			Возврат Элемент.Значение;
		КонецЕсли;
	КонецЦикла;

	Контакт = Адрес;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектСКонтактнойИнформацией.Ссылка КАК Ссылка,
	|	3 КАК Флаг,
	|	0 КАК CRM_Состояние
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
	|ГДЕ
	|	НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления
	|	И ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
	|	И ОбъектСКонтактнойИнформацией.Тип = &Тип
	|	И НЕ ОбъектСКонтактнойИнформацией.АдресЭП = &АдресУЗ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОбъектСКонтактнойИнформацией.Ссылка,
	|	2,
	|	0
	|ИЗ
	|	Справочник.CRM_ПотенциальныеКлиенты.КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
	|ГДЕ
	|	НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления
	|	И ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
	|	И ОбъектСКонтактнойИнформацией.Тип = &Тип
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОбъектСКонтактнойИнформацией.Ссылка,
	|	1,
	|	0
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
	|ГДЕ
	|	НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления
	|	И ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
	|	И ОбъектСКонтактнойИнформацией.Тип = &Тип
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОбъектСКонтактнойИнформацией.Ссылка,
	|	0,
	|	ВЫБОР
	|		КОГДА ОбъектСКонтактнойИнформацией.Ссылка.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен)
	|			ТОГДА 2
	|		КОГДА ОбъектСКонтактнойИнформацией.Ссылка.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.ВременноНеРаботает)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
	|ГДЕ
	|	НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления
	|	И ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
	|	И ОбъектСКонтактнойИнформацией.Тип = &Тип
	|
	|УПОРЯДОЧИТЬ ПО
	|	Флаг,
	|	CRM_Состояние";
	
	Запрос.УстановитьПараметр("АдресУЗ", УчетнаяЗаписьЭП.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("АдресЭП", Адрес);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Представление = Неопределено И Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Контакт = Выборка.Ссылка;
	Иначе
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Пока Выборка.Следующий() Цикл
				Если СокрЛП(Строка(Выборка.Ссылка)) = Представление Тогда
					Контакт = Выборка.Ссылка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Выборка.Сбросить();
			Выборка.Следующий();
			Контакт = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	СоответствияАдресовИКонтактовР.Добавить(Контакт, Адрес);
	Возврат Контакт;
	
КонецФункции

Функция НоваяТаблицаПолучателейЧата()
	
	ПолучателиЧатаТаблица = Новый ТаблицаЗначений;
	
	ПолучателиЧатаТаблица.Колонки.Добавить("Идентификатор");
	ПолучателиЧатаТаблица.Колонки.Добавить("Адрес");
	ПолучателиЧатаТаблица.Колонки.Добавить("Представление");
	ПолучателиЧатаТаблица.Колонки.Добавить("Контакт");
	ПолучателиЧатаТаблица.Колонки.Добавить("УчетнаяЗапись");
	ПолучателиЧатаТаблица.Колонки.Добавить("Группа");
	ПолучателиЧатаТаблица.Колонки.Добавить("ВидКИ");
	
	Возврат ПолучателиЧатаТаблица;
	
КонецФункции

Функция ПолучитьДокументHTMLИзОбычногоТекстаСШрифтомПоУмолчанию(Текст)
	
	ДокументHTML = Новый ДокументHTML;
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	ЭлементТело.ДобавитьДочерний(ЭлементБлок);
	
	НастройкиХранилище = Взаимодействия.НастройкиРаботыСПочтой();
	ШрифтПоУмолчанию = ?(НастройкиХранилище.Свойство("ШрифтПоУмолчаниюВЭлектронномПисьме"),
		НастройкиХранилище.ШрифтПоУмолчаниюВЭлектронномПисьме,
		WindowsШрифты.ШрифтДиалоговИМеню);
	
	Если ШрифтПоУмолчанию = WindowsШрифты.ШрифтДиалоговИМеню Тогда
		ШрифтПоУмолчанию = Константы.CRM_ШрифтПисьмаПоУмолчанию.ПолучитьШрифт();
	КонецЕсли;
	
	РазмерШрифта = ШрифтПоУмолчанию.Размер;
	Если РазмерШрифта < 8 Тогда
		РазмерШрифта = 1;
	ИначеЕсли РазмерШрифта <= 10 Тогда
		РазмерШрифта = 2;
	ИначеЕсли РазмерШрифта <= 12 Тогда
		РазмерШрифта = 3;
	ИначеЕсли РазмерШрифта <= 14 Тогда
		РазмерШрифта = 4;
	ИначеЕсли РазмерШрифта <= 16 Тогда
		РазмерШрифта = 5;
	ИначеЕсли РазмерШрифта <= 18 Тогда
		РазмерШрифта = 6;
	Иначе
		РазмерШрифта = 7;
	КонецЕсли;
	
	ЭлементШрифт = ДокументHTML.СоздатьЭлемент("Font");
	
	АтрибутИмя = ЭлементШрифт.ДокументВладелец.СоздатьАтрибут("face");
	АтрибутИмя.ТекстовоеСодержимое = ШрифтПоУмолчанию.Имя;
	ЭлементШрифт.Атрибуты.УстановитьИменованныйЭлемент(АтрибутИмя);
	
	АтрибутРазмер = ЭлементШрифт.ДокументВладелец.СоздатьАтрибут("size");
	АтрибутРазмер.ТекстовоеСодержимое = Строка(РазмерШрифта);
	ЭлементШрифт.Атрибуты.УстановитьИменованныйЭлемент(АтрибутРазмер);
	
	ТекущийЭлемент = ЭлементШрифт;
	
	Если ШрифтПоУмолчанию.Полужирный Тогда
		НовыйЭлемент = ДокументHTML.СоздатьЭлемент("b");
		ТекущийЭлемент.ДобавитьДочерний(НовыйЭлемент);
		ТекущийЭлемент = НовыйЭлемент;
	КонецЕсли;
	
	Если ШрифтПоУмолчанию.Наклонный Тогда
		НовыйЭлемент = ДокументHTML.СоздатьЭлемент("i");
		ТекущийЭлемент.ДобавитьДочерний(НовыйЭлемент);
		ТекущийЭлемент = НовыйЭлемент;
	КонецЕсли;
	
	Если ШрифтПоУмолчанию.Подчеркивание Тогда
		НовыйЭлемент = ДокументHTML.СоздатьЭлемент("u");
		ТекущийЭлемент.ДобавитьДочерний(НовыйЭлемент);
		ТекущийЭлемент = НовыйЭлемент;
	КонецЕсли;
	
	Если ШрифтПоУмолчанию.Зачеркивание Тогда
		НовыйЭлемент = ДокументHTML.СоздатьЭлемент("strike");
		ТекущийЭлемент.ДобавитьДочерний(НовыйЭлемент);
		ТекущийЭлемент = НовыйЭлемент;
	КонецЕсли;
	
	КоличествоСтрок = СтрЧислоСтрок(Текст);
	Для Индекс = 1 По КоличествоСтрок Цикл
		ДобавитьТекстовыйУзел(ТекущийЭлемент, СтрПолучитьСтроку(Текст, Индекс), ?(Индекс = КоличествоСтрок, Ложь, Истина));
	КонецЦикла;
	
	Если Текст = "" Тогда
		ДобавитьТекстовыйУзел(ТекущийЭлемент, Текст, Истина);
	КонецЕсли;
	
	ЭлементБлок.ДобавитьДочерний(ЭлементШрифт);
	
	Возврат ДокументHTML;

КонецФункции

Процедура ДобавитьТекстовыйУзел(ЭлементРодитель, Текст, ДобавлятьПереносСтроки = Ложь)
	
	ДокументВладелец = ЭлементРодитель.ДокументВладелец;
	ТекстовыйУзел = ДокументВладелец.СоздатьТекстовыйУзел(Текст);
	ЭлементРодитель.ДобавитьДочерний(ТекстовыйУзел);
	
	Если ДобавлятьПереносСтроки Тогда
		ЭлементРодитель.ДобавитьДочерний(ДокументВладелец.СоздатьЭлемент("br"));
	КонецЕсли;
	
КонецПроцедуры

Функция ВидыОбъектовЛентыПоОтбору(Знач ОтборЛенты)
	
	ВидыОбъектов = Новый Массив;
	ВидыОбъектов.Добавить("ВзаимодействиеЗапланированное");
	ВидыОбъектов.Добавить("ЗадачаЗапланированная");
	
	Для Каждого НастройкаОтбора Из ОтборЛенты Цикл
		
		Если Не НастройкаОтбора.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОтбора = НастройкаОтбора.Значение;
		Если ИмяОтбора = "Задачи" Тогда
			
			ВидыОбъектов.Добавить("Задача");
			
		ИначеЕсли ИмяОтбора = "ВзаимодействияВстречи" Тогда
			
			ВидыОбъектов.Добавить("ВзаимодействиеВстреча");
			
		ИначеЕсли ИмяОтбора = "ВходящиеЗвонки" Тогда
			
			ВидыОбъектов.Добавить("ТелефонныйЗвонокВходящий");
			ВидыОбъектов.Добавить("ВзаимодействиеТелефонныйЗвонокВходящий");
			
		ИначеЕсли ИмяОтбора = "ИсходящиеЗвонки" Тогда
			
			ВидыОбъектов.Добавить("ТелефонныйЗвонокИсходящий");
			ВидыОбъектов.Добавить("ВзаимодействиеТелефонныйЗвонокИсходящий");
			
		ИначеЕсли ИмяОтбора = "ВходящиеПисьма" Тогда
			
			ВидыОбъектов.Добавить("ЭлектронноеПисьмоВходящее");
			ВидыОбъектов.Добавить("ВзаимодействиеЭлектронноеПисьмоВходящее");
			
		ИначеЕсли ИмяОтбора = "ИсходящиеПисьма" Тогда
			
			ВидыОбъектов.Добавить("ЭлектронноеПисьмоИсходящее");
			ВидыОбъектов.Добавить("ВзаимодействиеЭлектронноеПисьмоИсходящее");
			
		ИначеЕсли ИмяОтбора = "ВзаимодействияПрочие" Тогда
			
			ВидыОбъектов.Добавить("ВзаимодействиеПрочее");
			
		ИначеЕсли ИмяОтбора = "Чаты" Тогда
			
			ВидыОбъектов.Добавить("Диалог");
			
		ИначеЕсли ИмяОтбора = "SMS" Тогда
			
			ВидыОбъектов.Добавить("СообщениеSMS");
			
		ИначеЕсли ИмяОтбора = "Примечания" Тогда
			
			ВидыОбъектов.Добавить("Примечание");
			
		ИначеЕсли ИмяОтбора = "Файлы" Тогда
			
			ВидыОбъектов.Добавить("Файл");
			
		ИначеЕсли ИмяОтбора = "Интересы" Тогда
			
			ВидыОбъектов.Добавить("Интерес");
			
		ИначеЕсли ИмяОтбора = "ИнтересыКакПоддержка" Тогда
			
			ВидыОбъектов.Добавить("ОбращениеПоддержки");
			
		ИначеЕсли ИмяОтбора = "Документы" Тогда
			
			ВидыОбъектов.Добавить("Заявка");
			ВидыОбъектов.Добавить("КоммерческоеПредложение"); 
			ВидыОбъектов.Добавить("Телемаркетинг");
			ВидыОбъектов.Добавить("ПрочийДокумент");
			
		ИначеЕсли ИмяОтбора = "История" Тогда
			
			ВидыОбъектов.Добавить("ЗаписьИстории");
			ВидыОбъектов.Добавить("ЗавершениеИнтереса");
			
		ИначеЕсли ИмяОтбора = "ИзменениеСостояния" Тогда
			
			ВидыОбъектов.Добавить("ИзменениеСостояния");
			
		ИначеЕсли ИмяОтбора = "ИзменениеОтветственного" Тогда
			
			ВидыОбъектов.Добавить("ИзменениеОтветственного");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыОбъектов);
	
КонецФункции

Функция ТипОбъектаЛентыСтрокой(Объект)
	
	Тип = ТипЗнч(Объект);
	
	Если Тип = Тип("ДокументОбъект.CRM_Взаимодействие") Тогда
		
		Возврат "Взаимодействие";
		
	ИначеЕсли Тип = Тип("ЗадачаОбъект.ЗадачаИсполнителя") Тогда
		
		Возврат "Задача";
		
	ИначеЕсли Тип = Тип("ДокументОбъект.ТелефонныйЗвонок") Тогда
		
		Возврат "ТелефонныйЗвонок";
		
	ИначеЕсли Тип = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") Тогда
		
		Возврат "ЭлектронноеПисьмоВходящее";
		
	ИначеЕсли Тип = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
		
		Возврат "ЭлектронноеПисьмоИсходящее";
		
	ИначеЕсли Тип = Тип("ДокументОбъект.СообщениеSMS") Тогда
		
		Возврат "СообщениеSMS";
		
	ИначеЕсли Тип = Тип("ДокументОбъект.CRM_Заявка") Тогда
		
		Возврат "Заявка";
		
	ИначеЕсли Тип = Тип("ДокументОбъект.CRM_Интерес") Тогда
		
		Возврат "Интерес";
		
	ИначеЕсли Тип = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") Тогда
		
		Возврат "КоммерческоеПредложение";
		
	ИначеЕсли Тип = Тип("ДокументОбъект.CRM_Телемаркетинг") Тогда
		
		Возврат "Телемаркетинг";
		
	ИначеЕсли Тип = Тип("СправочникОбъект.CRM_Диалоги") Тогда
		
		Возврат "Диалог";
		
	Иначе
		
		Возврат "ПрочийДокумент";
		
	КонецЕсли;
	
КонецФункции

Функция СтруктураДанныхОбъектаЛенты()
	
	Данные = Новый Структура;
	Данные.Вставить("Раздел", 0);
	Данные.Вставить("Ссылка", Неопределено);
	Данные.Вставить("ТипОбъекта", "");
	Данные.Вставить("ВидОбъекта", "");
	Данные.Вставить("Дата", '00010101');
	Данные.Вставить("ДатаБезВремени", '00010101');
	Данные.Вставить("Год", 0);
	Данные.Вставить("ПредставлениеДаты", "");
	Данные.Вставить("Проведен", Ложь);
	Данные.Вставить("ПометкаУдаления", Ложь);
	Данные.Вставить("ЗаписьЗакреплена", Ложь);
	Данные.Вставить("ТемаИнтереса", "");
	Данные.Вставить("ТипОбращенияИнтереса", Неопределено);
	Данные.Вставить("Интерес", Неопределено);
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти
