
#Область СлужебныйПрограммныйИнтерфейс

Функция ОбработатьТекст(Знач Текст) Экспорт
	
	Слова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Текст);
	
	Текст = СтрСоединить(Слова, " ");
	
	Возврат Текст;
	
КонецФункции

#Область Версионирование

Функция ТекущаяВерсияМоделей() Экспорт
	
	НомерВерсии = 1.2;
	
	Возврат НомерВерсии;
	
КонецФункции

Функция ВерсияПоддерживается(СтрокаВерсии) Экспорт
	
	Попытка
		НомерВерсии = Число(СтрокаВерсии);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если НомерВерсии < ТекущаяВерсияМоделей() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ТекстОшибкиВерсии(Версия) Экспорт
	
	ТекущаяВерсия = ТекущаяВерсияМоделей();
	ТекстОшибки = НСтр("ru = 'Запущен сервер моделей версии %1. Для работы необходима версия %2'");
	ТекстОшибки = СтрШаблон(ТекстОшибки, Версия, Формат(ТекущаяВерсия, "ЧДЦ=1; ЧРД=.; ЧГ=0"));
	
	Возврат ТекстОшибки;
	
КонецФункции

#КонецОбласти

#Область НастройкиИСведения

Функция НастройкиМоделей() Экспорт
	
	Настройки = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Настройки, НастройкиСервераМоделей());
	
	Настройки.Вставить("ИспользоватьПоискРешений", Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Настройки, НастройкиПоискаРешений());
	
	Настройки.Вставить("ИспользоватьКлассификациюОбращений", Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Настройки, НастройкиКлассификацииОбращений());
	
	Настройки.Вставить("ИспользоватьИнформированиеОКонверсии", Истина);
	
	Возврат Настройки;
	
КонецФункции

Функция ДанныеКонфигурационногоФайла(НастройкиМоделей) Экспорт
	
	НастройкиФайла = НастройкиКонфигурационногоФайла();
	
	НастройкиФайла.Common.host = НастройкиМоделей.Сервер;
	НастройкиФайла.Common.port = Формат(НастройкиМоделей.Порт, "ЧГ=0");
	
	НастройкиФайла.KnowledgeBaseSearch.enabled = Формат(НастройкиМоделей.ИспользоватьПоискРешений, "БЛ=0; БИ=1");
	
	ПоискРешенийПорогНезнания = Окр(НастройкиМоделей.ПоискРешенийПорогНезнания / 100, 1);
	НастройкиФайла.KnowledgeBaseSearch.min_proba = Формат(ПоискРешенийПорогНезнания, "ЧДЦ=1; ЧРД=.; ЧН=0.0");
	
	НастройкиФайла.KnowledgeBaseSearch.mode = "selfmade";
	
	НастройкиФайла.RequestClassification.enabled = Формат(НастройкиМоделей.ИспользоватьКлассификациюОбращений,
		 "БЛ=0; БИ=1");
	
	КлассификацияОбращенийПорогНезнания = Окр(НастройкиМоделей.КлассификацияОбращенийПорогНезнания / 100, 1);
	НастройкиФайла.RequestClassification.min_proba = Формат(КлассификацияОбращенийПорогНезнания, "ЧДЦ=1; ЧРД=.; ЧН=0.0");
	
	Если НастройкиМоделей.КлассификацияОбращенийРежимРаботы = "ГотоваяМодель" Тогда
		НастройкиФайла.RequestClassification.mode = "readymade";
	Иначе
		НастройкиФайла.RequestClassification.mode = "selfmade";
	КонецЕсли;
	
	НастройкиФайла.RequestClassification.names = "1csalesupport";
	
	НастройкиФайла.ConversionInfo.enabled = Формат(НастройкиМоделей.ИспользоватьИнформированиеОКонверсии, "БЛ=0; БИ=1");
	НастройкиФайла.ConversionInfo.mode = "selfmade";
	
	Возврат НастройкиФайла;
	
КонецФункции

Функция СведенияМоделей() Экспорт
	
	Сведения = Новый Структура;
	
	Сведения.Вставить("КлассификацияОбращенийДатаНачала",		'00010101');
	Сведения.Вставить("КлассификацияОбращенийДатаОкончания",	'00010101');
	Сведения.Вставить("КлассификацияОбращенийДатаВыгрузки",		'00010101');
	
	Сведения.Вставить("ПоискРешенийДатаВыгрузки",				'00010101');
	
	Сведения.Вставить("ИнформированиеОКонверсииДатаНачала",		'00010101');
	Сведения.Вставить("ИнформированиеОКонверсииДатаОкончания",	'00010101');
	Сведения.Вставить("ИнформированиеОКонверсииДатаВыгрузки",	'00010101');
	
	Возврат Сведения;
	
КонецФункции

#КонецОбласти

#Область СерверМоделей

Функция ПараметрыЗадач() Экспорт
	
	ПараметрыЗадач = Новый Структура;
	
	ЗадачаВерсия = Новый Структура;
	ЗадачаВерсия.Вставить("Адрес", "/crm/ai/version");
	ПараметрыЗадач.Вставить("Версия", ЗадачаВерсия);
	
	ЗадачаСостояние = Новый Структура;
	ЗадачаСостояние.Вставить("Адрес", "/crm/ai/status");
	ПараметрыЗадач.Вставить("Состояние", ЗадачаСостояние);
	
	ЗадачаПоискРешений = Новый Структура;
	ЗадачаПоискРешений.Вставить("Идентификатор", "KnowledgeBaseSearch");
	ЗадачаПоискРешений.Вставить("Адрес", "/crm/ai/advisor/knowledgebase");
	ЗадачаПоискРешений.Вставить("ПутьКДанным", "data\knowledgebase.csv");
	ПараметрыЗадач.Вставить("ПоискРешений", ЗадачаПоискРешений);
	
	ЗадачаКлассификацияОбращений = Новый Структура;
	ЗадачаКлассификацияОбращений.Вставить("Идентификатор", "RequestClassification");
	ЗадачаКлассификацияОбращений.Вставить("Адрес", "/crm/ai/advisor/requests");
	ЗадачаКлассификацияОбращений.Вставить("ПутьКДанным", "data\requests.csv");
	ПараметрыЗадач.Вставить("КлассификацияОбращений", ЗадачаКлассификацияОбращений);
	
	ЗадачаПрогнозКонверсии = Новый Структура;
	ЗадачаПрогнозКонверсии.Вставить("Идентификатор", "ConversionInfo");
	ЗадачаПрогнозКонверсии.Вставить("Адрес", "/crm/ai/merchant/deals");
	ЗадачаПрогнозКонверсии.Вставить("ПутьКДанным", "data\transactions.csv");
	ПараметрыЗадач.Вставить("ИнформированиеОКонверсии", ЗадачаПрогнозКонверсии);
	
	Возврат ПараметрыЗадач;
	
КонецФункции

Функция НастройкиСервераМоделей() Экспорт
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("ПутьКМоделям",		"");
	Настройки.Вставить("Сервер",			"localhost");
	Настройки.Вставить("Порт",				8082);
	Настройки.Вставить("ТаймаутСоединения",	3);
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область ПоискРешений

Функция НастройкиПоискаРешений() Экспорт
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("ПоискРешенийПорогУверенности",		90);
	Настройки.Вставить("ПоискРешенийПорогНезнания",			50);
	Настройки.Вставить("ПоискРешенийМаксимумРекомендаций",	3);
	Настройки.Вставить("ПоискРешенийДатаВыгрузки",			'00010101');
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область КлассификацияОбращений

Функция НастройкиКлассификацииОбращений() Экспорт
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("КлассификацияОбращенийПорогНезнания",			50);
	Настройки.Вставить("КлассификацияОбращенийПорогУверенности",		90);
	Настройки.Вставить("КлассификацияОбращенийМаксимумРекомендаций",	3);
	Настройки.Вставить("КлассификацияОбращенийРежимРаботы",				"ГотоваяМодель");
	Настройки.Вставить("КлассификацияОбращенийИмяГотовойМодели",		"ПродажаПоддержка1С");
	
	Возврат Настройки;
	
КонецФункции

Функция РежимыРаботыПомощникаКлассификацииОбращений() Экспорт
	
	РежимыРаботы = Новый Структура;
	РежимыРаботы.Вставить("ГотоваяМодель", НСтр("ru = 'Готовая модель'"));
	РежимыРаботы.Вставить("СвояМодель", НСтр("ru = 'Своя модель'"));
	
	Возврат РежимыРаботы;
	
КонецФункции

Функция ГотовыеМоделиКлассификацииОбращений() Экспорт
	
	ГотовыеМодели = Новый Массив;
	ГотовыеМодели.Добавить("ПродажаПоддержка1С");
	
	Возврат ГотовыеМодели;
	
КонецФункции

#КонецОбласти

#Область ПроверкаНастроек

Функция НастройкиМоделейЗаполнены(НастройкиМоделей) Экспорт
	
	НастройкиЗаполнены = ЗначениеЗаполнено(НастройкиМоделей.ПутьКМоделям)
		И ЗначениеЗаполнено(НастройкиМоделей.Сервер)
		И ЗначениеЗаполнено(НастройкиМоделей.Порт);
		
	Возврат НастройкиЗаполнены;
	
КонецФункции

Процедура ОбновитьСостояниеПроверки(Состояние, Форма) Экспорт
	
	Если ТипЗнч(Состояние) = Тип("Строка") Тогда
		ЗаполнитьЗначенияСвойств(Форма, Форма.СостоянияПроверки[Состояние]);
	ИначеЕсли ТипЗнч(Состояние) = Тип("Массив") Тогда
		Для Каждого ИмяСостояния Из Состояние Цикл
			ЗаполнитьЗначенияСвойств(Форма, Форма.СостоянияПроверки[ИмяСостояния]);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция СостоянияПроверкиНастроек() Экспорт
	
	КартинкаНеизвестно = БиблиотекаКартинок.CRM_ВоcклицательныйЗнак;
	КартинкаНеудачно = БиблиотекаКартинок.CRM_ЗнакКрест;
	КартинкаУспешно = БиблиотекаКартинок.CRM_ЗнакФлажок;
	
	СостоянияПроверок = Новый Структура;
	
	// Установка Python.
	
	Состояние = Новый Структура;
	Состояние.Вставить("УстановкаPythonУспех",				Ложь);
	Состояние.Вставить("УстановкаPythonПояснение",			НСтр("ru = 'Выполните проверку или пропустите ее,
		| если Python 3 уже был установлен отдельно.'"));
	Состояние.Вставить("УстановкаPythonКартинка",			КартинкаНеизвестно);
	СостоянияПроверок.Вставить("УстановкаPythonНеПроверялась", Состояние);
	
	Состояние = Новый Структура;
	Состояние.Вставить("УстановкаPythonУспех",				Истина);
	Состояние.Вставить("УстановкаPythonПояснение",			НСтр("ru = 'Удостоверьтесь,
		| что Python 3 установлен и работоспособен.'"));
	Состояние.Вставить("УстановкаPythonКартинка",			КартинкаУспешно);
	СостоянияПроверок.Вставить("УстановкаPythonПропущена", Состояние);
	
	Состояние = Новый Структура;
	Состояние.Вставить("УстановкаPythonУспех",				Истина);
	Состояние.Вставить("УстановкаPythonПояснение",			НСтр("ru = 'Установлена версия Python'") + " ");
	Состояние.Вставить("УстановкаPythonКартинка",			КартинкаУспешно);
	СостоянияПроверок.Вставить("УстановкаPythonУспешно", Состояние);
	
	Состояние = Новый Структура;
	Состояние.Вставить("УстановкаPythonУспех",				Ложь);
	Состояние.Вставить("УстановкаPythonПояснение",			НСтр("ru = 'Для работы необходим Python версии не ниже 3.'"));
	Состояние.Вставить("УстановкаPythonКартинка",			КартинкаНеудачно);
	СостоянияПроверок.Вставить("УстановкаPythonНеудачно", Состояние);
	
	Состояние = Новый Структура;
	Состояние.Вставить("УстановкаPythonУспех",				Ложь);
	Состояние.Вставить("УстановкаPythonПояснение",			НСтр("ru = 'Удостоверьтесь,
		| что Python 3 установлен и работоспособен.'"));
	Состояние.Вставить("УстановкаPythonКартинка",			КартинкаНеудачно);
	СостоянияПроверок.Вставить("УстановкаPythonНеНайден", Состояние);
	
	// Установка моделей.
	
	Состояние = Новый Структура;
	Состояние.Вставить("УстановкаМоделейУспех",				Ложь);
	Состояние.Вставить("УстановкаМоделейПояснение",
					НСтр("ru = 'Выполните проверку наличия моделей в указанном каталоге.'"));
	Состояние.Вставить("УстановкаМоделейКартинка",			КартинкаНеизвестно);
	СостоянияПроверок.Вставить("УстановкаМоделейНеПроверялась", Состояние);
	
	Состояние = Новый Структура;
	Состояние.Вставить("УстановкаМоделейУспех",				Истина);
	Состояние.Вставить("УстановкаМоделейПояснение",			НСтр("ru = 'Модели успешно найдены в указанном каталоге.'"));
	Состояние.Вставить("УстановкаМоделейКартинка",			КартинкаУспешно);
	СостоянияПроверок.Вставить("УстановкаМоделейУспешно", Состояние);
	
	Состояние = Новый Структура;
	Состояние.Вставить("УстановкаМоделейУспех",				Ложь);
	Состояние.Вставить("УстановкаМоделейПояснение",			НСтр("ru = 'Файлы моделей в указанном каталоге не найдены.'"));
	Состояние.Вставить("УстановкаМоделейКартинка",			КартинкаНеудачно);
	СостоянияПроверок.Вставить("УстановкаМоделейНеудачно", Состояние);
	
	// Каталог установки моделей.
	
	Состояние = Новый Структура;
	Состояние.Вставить("УстановкаМоделейУспех",				Ложь);
	Состояние.Вставить("УстановкаМоделейПояснение",			НСтр("ru = 'Каталог не указан. Укажите каталог моделей.'"));
	Состояние.Вставить("УстановкаМоделейКартинка",			КартинкаНеизвестно);
	СостоянияПроверок.Вставить("КаталогНеУказан", Состояние);
	
	Состояние = Новый Структура;
	Состояние.Вставить("УстановкаМоделейУспех",				Ложь);
	Состояние.Вставить("УстановкаМоделейПояснение",
					НСтр("ru = 'Указанный каталог не найден. Укажите корректный каталог моделей.'"));
	Состояние.Вставить("УстановкаМоделейКартинка",			КартинкаНеудачно);
	СостоянияПроверок.Вставить("КаталогНеСуществует", Состояние);
	
	Состояние = Новый Структура;
	Состояние.Вставить("УстановкаМоделейУспех",				Ложь);
	Состояние.Вставить("УстановкаМоделейПояснение",
					НСтр("ru = 'Указан не каталог. Укажите корректный каталог моделей. '"));
	Состояние.Вставить("УстановкаМоделейКартинка",			КартинкаНеудачно);
	СостоянияПроверок.Вставить("УказанНеКаталог", Состояние);
	
	Состояние = Новый Структура;
	Состояние.Вставить("УстановкаМоделейУспех",				Ложь);
	Состояние.Вставить("УстановкаМоделейПояснение",
					НСтр("ru = 'Каталог указан верно. Выполните проверку установки моделей.'"));
	Состояние.Вставить("УстановкаМоделейКартинка",			КартинкаНеизвестно);
	СостоянияПроверок.Вставить("КаталогУказанВерно", Состояние);
	
	// Выгрузка обучающих данных.
	
	Состояние = Новый Структура;
	Состояние.Вставить("ВыгрузкаДанныхУспех",				Ложь);
	Состояние.Вставить("ВыгрузкаДанныхПояснение",			НСтр("ru = 'Выполните выгрузку обучающих данных.'"));
	Состояние.Вставить("ВыгрузкаДанныхКартинка",			КартинкаНеизвестно);
	СостоянияПроверок.Вставить("ВыгрузкаДанныхНеВыполнялась", Состояние);
	
	Состояние = Новый Структура;
	Состояние.Вставить("ВыгрузкаДанныхУспех",				Ложь);
	Состояние.Вставить("ВыгрузкаДанныхПояснение",			НСтр("ru = 'Ошибка при выгрузке данных.'"));
	Состояние.Вставить("ВыгрузкаДанныхКартинка",			КартинкаНеудачно);
	СостоянияПроверок.Вставить("ВыгрузкаДанныхНеудачно", Состояние);
	
	Состояние = Новый Структура;
	Состояние.Вставить("ВыгрузкаДанныхУспех",				Истина);
	Состояние.Вставить("ВыгрузкаДанныхПояснение",			НСтр("ru = 'Обучающие данные успешно выгружены.'"));
	Состояние.Вставить("ВыгрузкаДанныхКартинка",			КартинкаУспешно);
	СостоянияПроверок.Вставить("ВыгрузкаДанныхУспешно", Состояние);
	
	// Параметры подключения к серверу.
	
	Состояние = Новый Структура;
	Состояние.Вставить("ПодключениеКВебСерверуУспех",		Ложь);
	Состояние.Вставить("ПодключениеКВебСерверуПояснение",
			НСтр("ru = 'Укажите адрес и номер порта для доступа к серверу моделей.'"));
	Состояние.Вставить("ПодключениеКВебСерверуКартинка",	КартинкаНеизвестно);
	СостоянияПроверок.Вставить("НастройкиДоступаНеудачно", Состояние);
	
	Состояние = Новый Структура;
	Состояние.Вставить("ПодключениеКВебСерверуУспех",		Ложь);
	Состояние.Вставить("ПодключениеКВебСерверуПояснение",
			НСтр("ru = 'Адрес и номер порта указаны. Проверьте доступность сервера моделей.'"));
	Состояние.Вставить("ПодключениеКВебСерверуКартинка",	КартинкаНеизвестно);
	СостоянияПроверок.Вставить("НастройкиДоступаУспешно", Состояние);
	
	// Подключение к серверу.
	
	Состояние = Новый Структура;
	Состояние.Вставить("ПодключениеКВебСерверуУспех",		Ложь);
	Состояние.Вставить("ПодключениеКВебСерверуПояснение",	НСтр("ru = 'Проверьте доступность сервера моделей.'"));
	Состояние.Вставить("ПодключениеКВебСерверуКартинка",	КартинкаНеизвестно);
	СостоянияПроверок.Вставить("ПодключениеКВебСерверуНеПроверялось", Состояние);
	
	Состояние = Новый Структура;
	Состояние.Вставить("ПодключениеКВебСерверуУспех",		Истина);
	Состояние.Вставить("ПодключениеКВебСерверуПояснение",	НСтр("ru = 'Успешное подключение к серверу моделей версии'")  
		+ " ");
	Состояние.Вставить("ПодключениеКВебСерверуКартинка",	КартинкаУспешно);
	СостоянияПроверок.Вставить("ПодключениеКВебСерверуУспешно", Состояние);
	
	Состояние = Новый Структура;
	Состояние.Вставить("ПодключениеКВебСерверуУспех",		Ложь);
	Состояние.Вставить("ПодключениеКВебСерверуПояснение",	НСтр("ru = 'Ошибка подключения'") + ": ");
	Состояние.Вставить("ПодключениеКВебСерверуКартинка",	КартинкаНеудачно);
	СостоянияПроверок.Вставить("ПодключениеКВебСерверуНеудачно", Состояние);
	
	Возврат СостоянияПроверок;
	
КонецФункции

Функция ИменаФайловМоделей() Экспорт
	
	ИменаФайлов = Новый Массив;
	
	ИменаФайлов.Добавить("ai_server.py");
	ИменаФайлов.Добавить("advisor.py");
	ИменаФайлов.Добавить("merchant.py");
	ИменаФайлов.Добавить("ai_server.cmd");
	ИменаФайлов.Добавить("libs_setup.cmd");
	
	Возврат ИменаФайлов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НастройкиКонфигурационногоФайла()
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("Common", Новый Структура);
	Настройки.Common.Вставить("host");
	Настройки.Common.Вставить("port");
	
	Настройки.Вставить("KnowledgeBaseSearch", Новый Структура);
	Настройки.KnowledgeBaseSearch.Вставить("enabled");
	Настройки.KnowledgeBaseSearch.Вставить("min_proba");
	Настройки.KnowledgeBaseSearch.Вставить("mode");
	
	Настройки.Вставить("RequestClassification", Новый Структура);
	Настройки.RequestClassification.Вставить("enabled");
	Настройки.RequestClassification.Вставить("min_proba");
	Настройки.RequestClassification.Вставить("mode");
	Настройки.RequestClassification.Вставить("names");
	
	Настройки.Вставить("ConversionInfo", Новый Структура);
	Настройки.ConversionInfo.Вставить("enabled");
	Настройки.ConversionInfo.Вставить("mode");
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти
