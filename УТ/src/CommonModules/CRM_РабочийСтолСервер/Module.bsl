
#Область ПрограммныйИнтерфейс

#Область ИнициализацияПараметров

// Добавляет необходимые параметры работы клиента при запуске.
//
// Параметры:
//	Параметры - Структура - заполняемые параметры;
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	Параметры.Вставить("ЗапускатьРабочийСтолМенеджераНаВесьЭкран", ПолучитьНастройкиОткрытия().БлокироватьИнтерфейс);
КонецПроцедуры

// Возвращает список доступных форм.
// 
// Возвращаемое значение:
//  СписокЗначений - Список доступных форм.
//
Функция ПолучитьСписокДоступныхФорм() Экспорт
	
	ЭтоCRM = CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM();
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	СписокФорм = Новый СписокЗначений;
	
	СписокФорм.Добавить("Обработка.CRM_АРМ_МоиПродажи.Форма.Форма", НСтр("ru='Мои продажи';en='My Sales'"));
	СписокФорм.Добавить("Обработка.CRM_АРМ_Поддержка.Форма.Форма", НСтр("ru = 'Поддержка'"));
	СписокФорм.Добавить("Обработка.CRM_АРМ_МоиДела.Форма.Форма", НСтр("ru='Мои дела';en='My Affairs'"));
	СписокФорм.Добавить("Отчет.CRM_ПутьКлиента.Форма.ФормаОтчета", НСтр("ru='Путь клиента'"));
	СписокФорм.Добавить("Документ.CRM_Интерес.Форма.ФормаСписка", НСтр("ru='Интересы';en='Leads'"));
	СписокФорм.Добавить("Отчет.CRM_ВоронкаПродаж.Форма.Форма", НСтр("ru='Воронка продаж';en='Sales Funnel'"));
	СписокФорм.Добавить("Справочник.Номенклатура.Форма.ФормаСписка", НСтр("ru='Номенклатура';en='Description'"));
	СписокФорм.Добавить("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаМоиЗадачи", НСтр("ru='Мои задачи';en='My Tasks'"));
	СписокФорм.Добавить("Обработка.CRM_КалендарьМенеджера.Форма.Форма", НСтр("ru='Календарь';en='Calendar'"));
	СписокФорм.Добавить("Обработка.CRM_МенеджерПочты.Форма.Форма", НСтр("ru='Почта';en='Mail'"));
	СписокФорм.Добавить("Документ.CRM_Заявка.Форма.ФормаСписка", НСтр("ru='Заявки';en='Requests'"));
	СписокФорм.Добавить("Обработка.CRM_Мессенджер.Форма.ФормаМессенджера", НСтр("ru='Диалоги';en='Dialogs'"));
	СписокФорм.Добавить("Обработка.CRM_АРМ_БазаЗнаний.Форма.АРМБазаЗнаний", НСтр("ru='База знаний';en='Knowledge Base'"));	
	СписокФорм.Добавить("Обработка.CRM_АРМ_УправлениеПоказателями.Форма.ФормаИспользуемыеПоказатели",
		 НСтр("ru='Управление показателями';en='Indicators Management'"));
	// +CRM_Сквозная аналитика
	СписокФорм.Добавить("Обработка.CRM_АРМ_РабочееМестоСквознаяАналитика.Форма.Форма",
		 НСтр("ru='Сквозная аналитика';en='End-to-end Analytics'"));
	// -CRM_Сквозная аналитика
	СписокФорм.Добавить("Обработка.CRM_УправлениеКлассификацией.Форма.ФормаНоменклатура",
		 НСтр("ru='Классификация номенклатуры';en='Nomenclature Classification'"));
	СписокФорм.Добавить("Обработка.CRM_УправлениеКлассификацией.Форма.ФормаКлиентскаяБаза",
		 НСтр("ru='Классификация клиентов';en='Customer Classification'"));
	СписокФорм.Добавить("Документ.CRM_Телемаркетинг.Форма.ФормаСписка", НСтр("ru='Телемаркетинг';en='Telemarketing'"));
	СписокФорм.Добавить("Документ.CRM_РассылкаЭлектронныхПисем.Форма.ФормаСписка",
		 НСтр("ru='Рассылки писем';en='Mailing'"));
	СписокФорм.Добавить("Справочник.МаркетинговыеМероприятия.Форма.CRM_ФормаСписка",
		 НСтр("ru='Маркетинговые мероприятия';en='Marketing activities'"));
	СписокФорм.Добавить("ОбщаяФорма.CRM_ПанельОтчетов", НСтр("ru='Отчеты';en='Reports'"));
	СписокФорм.Добавить("Справочник.CRM_ПотенциальныеКлиенты.Форма.ФормаСписка",
		 НСтр("ru='Потенциальные клиенты';en='Potential Customers'"));
	
	СписокФорм.Добавить("Обработка.CRM_АРМПланированияВстреч.Форма.ФормаАРМ", НСтр("ru='Журнал встреч'"));
	
	СписокФорм.Добавить("Обработка.CRM_ПланированиеПродаж.Форма.Форма", "Планирование продаж");
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ВариантПоставкиСтартИлиСтандарт() Тогда
		СписокФорм.Добавить("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаСписка",
			 НСтр("ru='Бизнес-процессы';en='Business Processes'"));
		СписокФорм.Добавить("Отчет.CRM_МониторЦелевыхПоказателей.Форма.ФормаМониторЦелевыхПоказателей",
			 НСтр("ru='Монитор показателей';en='Indicators Monitor'"));
		СписокФорм.Добавить("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаСписка", НСтр("ru='Все задачи';en='All Tasks'"));
		СписокФорм.Добавить("Обработка.CRM_ПланированиеПроектов.Форма.ФормаПланирования",
			 НСтр("ru='Планирование проектов';en='Project planning'"));
	КонецЕсли;
	
	Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы.КоммерческоеПредложениеКлиенту.Формы",
		 "CRM_Модуль_ФормаСписка") Тогда
		СписокФорм.Добавить("Документ.КоммерческоеПредложениеКлиенту.Форма.CRM_Модуль_ФормаСписка",
			 НСтр("ru='Коммерческие предложения';en='Quotations'"));
	Иначе
		СписокФорм.Добавить("Документ.КоммерческоеПредложениеКлиенту.Форма.CRM_ФормаСписка",
			 НСтр("ru='Коммерческие предложения';en='Quotations'"));
	КонецЕсли;
	
	СписокФорм.Добавить("Справочник.Проекты.Форма.CRM_ФормаСписка", НСтр("ru='Проекты';en='Projects'"));
	СписокФорм.Добавить("Документ.CRM_ЭтапКалендарногоПлана.Форма.ФормаСписка",
		 НСтр("ru='Задачи проектов';en='Project Check Points'"));
	
	СписокФорм.Добавить("Обработка.ПрайсЛист.Форма.Форма", НСтр("ru='Прайс-лист';en='Price List'"));
	СписокФорм.Добавить("Документ.CRM_ОтсутствиеСотрудника.Форма.ФормаСписка", НСтр("ru = 'Отсутствия сотрудников'"));
	
	Если ЭтоCRM Тогда
		СписокФорм.Добавить("Справочник.Партнеры.Форма.CRM_ФормаСписка", НСтр("ru='Клиенты';en='Customers'"));
		СписокФорм.Добавить("Документ.CRM_СчетНаОплатуПокупателю.Форма.ФормаСписка", НСтр("ru='Счета';en='Invoices'"));
		СписокФорм.Добавить("Документ.СообщениеSMS.Форма.SMS4B_ФормаСписка", НСтр("ru='SMS';en='SMS'"));
		СписокФорм.Добавить("Обработка.CRM_НастройкаРазделовРешения.Форма.Форма", НСтр("ru='Настройки';en='Settings'"));
		
	Иначе // это ERP/КА2/УТиВсК
		// Справочники
		СписокФорм.Добавить("Справочник.Партнеры.Форма.CRM_Модуль_ФормаСписка", НСтр("ru='Клиенты';en='Customers'"));
		СписокФорм.Добавить("Справочник.Претензии.Форма.ФормаСписка", НСтр("ru='Претензии';en='Customer complaints'"));
		СписокФорм.Добавить("Справочник.СделкиСКлиентами.Форма.ФормаСписка",
			 НСтр("ru='Сделки с клиентами';en='Customer transactions'"));
		
		// Документы
		СписокФорм.Добавить("Документ.АвансовыйОтчет.Форма.ФормаСписка", НСтр("ru='Авансовые отчеты';en='Expense reports '"));
		СписокФорм.Добавить("Документ.АктВыполненныхРабот.Форма.ФормаСписка",
			 НСтр("ru='Акты выполненных работ';en='Acts of executed works'"));
		СписокФорм.Добавить("Документ.ВнутреннееПотреблениеТоваров.Форма.ФормаСписка",
			 НСтр("ru='Внутреннее потребление товаров';
			|en='Internal goods consumption'"));
		СписокФорм.Добавить("Документ.ВозвратТоваровОтКлиента.Форма.ФормаСписка",
			 НСтр("ru='Возврат товаров от клиентов';en='Return of goods from customers'"));
		СписокФорм.Добавить("Документ.ВозвратТоваровПоставщику.Форма.ФормаСписка",
			 НСтр("ru='Возврат товаров поставщику';en='Return of goods to the supplier'"));
		СписокФорм.Добавить("Документ.ДоверенностьВыданная.Форма.ФормаСписка",
			 НСтр("ru='Доверенности';en='Powers of attorney'"));
		СписокФорм.Добавить("Документ.ЗаданиеТорговомуПредставителю.Форма.ФормаСписка",
			 НСтр("ru='Задания торговым представителям';
			|en='Jobs for sales representatives'"));
		СписокФорм.Добавить("Документ.ЗаказНаПеремещение.Форма.ФормаСписка",
			 НСтр("ru='Заказы на перемещение ';en='Transfer orders '"));
		СписокФорм.Добавить("Документ.ЗаказКлиента.Форма.ФормаСпискаДокументов",
			 НСтр("ru='Заказы клиентов';en='Sales orders'"));
		СписокФорм.Добавить("Документ.ЗаказНаСборку.Форма.ФормаСписка", НСтр("ru='Заказы на сборку';en='Assembly orders'"));
		СписокФорм.Добавить("Документ.ЗаказПоставщику.Форма.ФормаСпискаДокументов",
			 НСтр("ru='Заказы поставщикам';en='Purchase orders'"));
		СписокФорм.Добавить("Документ.ЗаявкаНаВозвратТоваровОтКлиента.Форма.ФормаСписка",
			 НСтр("ru='Заявки на возврат';en='Return requests'"));
		СписокФорм.Добавить("Документ.ЗаявкаНаРасходованиеДенежныхСредств.Форма.ФормаСписка",
			 НСтр("ru='Заявки на расход ДС';en='Applications for funds expense'"));
		СписокФорм.Добавить("Документ.ОтчетКомиссионера.Форма.ФормаСписка",
			 НСтр("ru='Отчеты комиссионеров';en='Commissioners reports'"));
		СписокФорм.Добавить("Документ.ОтчетКомитенту.Форма.ФормаСписка",
			 НСтр("ru='Отчеты комитентам';en='Reports to committents'"));
		СписокФорм.Добавить("Документ.ОтчетОРозничныхПродажах.Форма.ФормаСписка",
			 НСтр("ru='Отчеты о розничных продажах';en='Reports on retail sales'"));
		СписокФорм.Добавить("Документ.ПеремещениеТоваров.Форма.ФормаСписка",
			 НСтр("ru='Перемещения товаров';en='Movement of goods'"));
		СписокФорм.Добавить("Документ.ПоступлениеБезналичныхДенежныхСредств.Форма.ФормаСписка",
			 НСтр("ru='Поступления безнал. ДС';en='Receipt of cashless currency'"));
		СписокФорм.Добавить("Документ.СписаниеБезналичныхДенежныхСредств.Форма.ФормаСписка",
			 НСтр("ru='Списания безнал. ДС';en='Write-off cashless'"));
		СписокФорм.Добавить("Документ.ПриобретениеТоваровУслуг.Форма.ФормаСписка",
			 НСтр("ru='Приобретение товаров';en='Purchase of goods'"));
		СписокФорм.Добавить("Документ.ПриходныйКассовыйОрдер.Форма.ФормаСписка",
			 НСтр("ru='Приходные кассовые ордера';en='Receipt Cash Orders'"));
		СписокФорм.Добавить("Документ.РасходныйКассовыйОрдер.Форма.ФормаСписка",
			 НСтр("ru='Расходные кассовые ордера';en='Cash voucher'"));
		СписокФорм.Добавить("Документ.ПриходныйОрдерНаТовары.Форма.ФормаСписка",
			 НСтр("ru='Приходные ордера на товары';en='Incoming orders for goods'"));
		СписокФорм.Добавить("Документ.РасходныйОрдерНаТовары.Форма.ФормаСписка",
			 НСтр("ru='Расходные ордера на товары';en='Expenditure vouchers for goods'"));
		СписокФорм.Добавить("Документ.РеализацияТоваровУслуг.Форма.ФормаСписка",
			 НСтр("ru='Реализации товаров';en='Goods realizations'"));
		СписокФорм.Добавить("Документ.СборкаТоваров.Форма.ФормаСписка", НСтр("ru='Сборка товаров';en='Goods assembly'"));
		СписокФорм.Добавить("Документ.СчетНаОплатуКлиенту.Форма.ФормаСписка", НСтр("ru='Счета на оплату';en='Invoices'"));
		СписокФорм.Добавить("Документ.СчетФактураВыданный.Форма.ФормаСписка",
			 НСтр("ru='Счета-фактуры выданные';en='Invoices issued'"));
		// СписокФорм.Добавить("Документ.ТранспортнаяНакладная.Форма.ФормаСписка",
			// "Транспортные накладные"); // пока нет обоих обработчиков
		
		// Журналы
		СписокФорм.Добавить("ЖурналДокументов.АвансовыеОтчеты.Форма.ФормаСписка",
			 НСтр("ru='Авансовые отчеты';en='Expense reports '"));
		
		// Обработки
		СписокФорм.Добавить("Обработка.ЖурналДокументовБезналичныеПлатежи.Форма.ФормаСписка", "Безналичные платежи");
		СписокФорм.Добавить("Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.ФормаСписка",
			 НСтр("ru='Внутренние документы';en='Internal documents'"));
		СписокФорм.Добавить("Обработка.ЖурналДокументовЗакупки.Форма.СписокДокументов",
			 НСтр("ru='Документы закупки';en='Purchase documents'"));
		СписокФорм.Добавить("Обработка.ЖурналДокументовИнтеркампани.Форма.ФормаСписка",
			 НСтр("ru='Документы между организациями';
			|en='Documents between organizations'"));
		СписокФорм.Добавить("Обработка.ЖурналДокументовНДС.Форма.СписокДокументов",
			 НСтр("ru='Журнал документов НДС';en='VAT documents log'"));
		СписокФорм.Добавить("Обработка.ЖурналДокументовПродажи.Форма.СписокДокументов",
			 НСтр("ru='Документы продажи';en='Sales documents'"));
		СписокФорм.Добавить("Обработка.CRM_УниверсальныйЖурналДокументов.Форма.Форма",
			 НСтр("ru = 'Взаимодействия'; en = 'Interactions'"));
		// СписокФорм.Добавить("Обработка.ЖурналСкладскихАктов.Форма.ФормаСписка", "Журнал складских актов"); // пока нет
		// второго обработчика в форме
		СписокФорм.Добавить("Обработка.ПрайсЛист.Форма.Форма", НСтр("ru='Цены (прайс-лист)';en='Prices (price list)'"));
		СписокФорм.Добавить("Обработка.ПрайсЛистПоставщика.Форма.Форма", НСтр("ru='Цены поставщиков';en='Vendor prices'"));
		// СписокФорм.Добавить("Обработка.КлиентБанк.Форма.ЗагрузкаВыписки", "Обмен с банками"); // пока нет второго
		// обработчика в форме
		СписокФорм.Добавить("Документ.ЧекККМ.Форма.ФормаДокументаРМК",
			 НСтр("ru='Рабочее место кассира';en='Cashier work place'"));
		
	КонецЕсли;
	
	// +СофтФон
	СписокФорм.Добавить("Обработка.сфпАРМ_Телефония.Форма.Форма", НСтр("ru='Телефония';en='Telephony'"));
	// -СофтФон
	
	// +Приложения
	Если РазделениеВключено Тогда
		СписокФорм.Добавить("Обработка.CRM_Приложения.Форма.ФормаФреш", НСтр("ru='Приложения';en='Applications'"));
	Иначе
		СписокФорм.Добавить("Обработка.CRM_Приложения.Форма.Форма", НСтр("ru='Приложения';en='Applications'"));
	КонецЕсли;

	// -Приложения
	
	CRM_РабочийСтолСерверПереопределяемый.ПолучитьСписокДоступныхФорм(СписокФорм);
	
	ПроверитьДоступностьФорм(СписокФорм);
	
	Возврат СписокФорм;
	
КонецФункции

// Возвращает признак доступности формы по функциональным опциям.
//
// Параметры:
//	ИмяФормы - Строка - Имя формы.
//
// Возвращаемое значение:
//	Булево - признак доступности формы по функциональным опциям.
//
Функция ФормаДоступнаПоФункциональнымОпциям(ИмяФормы) Экспорт
	
	НаименованиеФормыОбъекта = ИмяФормы;
	Позиция = СтрНайти(НаименованиеФормыОбъекта, ".Форма.");
	НаименованиеОбъекта = "";
	Если Позиция = 0 Тогда // пробуем проверить как общую форму
		Если СтрНайти(НаименованиеФормыОбъекта, "ОбщаяФорма.") Тогда
			НаименованиеОбъекта = НаименованиеФормыОбъекта;
		КонецЕсли;
	Иначе
		НаименованиеОбъекта = Лев(НаименованиеФормыОбъекта, Позиция - 1);
	КонецЕсли;
	Возврат НЕ ЗначениеЗаполнено(НаименованиеОбъекта)
		 ИЛИ ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(НаименованиеОбъекта);
	
КонецФункции

// Возвращает список форм по умолчанию.
// 
// Возвращаемое значение:
//  СписокЗначений - Список форм по умолчанию.
//
Функция ПолучитьСписокФормПоУмолчанию() Экспорт
	
	ЭтоCRM = CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM();
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();

	СписокФорм = Новый СписокЗначений;
	
	СписокФорм.Добавить("Обработка.CRM_АРМ_МоиПродажи.Форма.Форма", "Мои продажи");
	СписокФорм.Добавить("Обработка.CRM_АРМ_МоиДела.Форма.Форма", "Мои дела");
	
	Если ЭтоCRM Тогда
		СписокФорм.Добавить("Справочник.Партнеры.Форма.CRM_ФормаСписка", "Клиенты");
	Иначе
		// Временно отключено!
		//СписокФорм.Добавить("Справочник.Партнеры.Форма.CRM_Модуль_ФормаСписка", "Клиенты");
	КонецЕсли;
	
	СписокФорм.Добавить("Обработка.CRM_КалендарьМенеджера.Форма.Форма", "Календарь");
	
	Если НЕ РазделениеВключено Тогда
		СписокФорм.Добавить("Обработка.CRM_МенеджерПочты.Форма.Форма", "Почта");
	КонецЕсли;
	
	СписокФорм.Добавить("ОбщаяФорма.CRM_ПанельОтчетов", "Отчеты");
	
	Если РазделениеВключено ИЛИ CRM_ЛицензированиеЭкспортныеМетоды.ВариантПоставкиСтартИлиСтандарт() Тогда
		СписокФорм.Добавить("Обработка.CRM_НастройкаРазделовРешения.Форма.Форма", "Настройки");
	КонецЕсли;
	
	Если РазделениеВключено Тогда
		СписокФорм.Добавить("Обработка.CRM_Приложения.Форма.ФормаФреш", НСтр("ru='Приложения';en='Applications'"));
	Иначе
		СписокФорм.Добавить("Обработка.CRM_Приложения.Форма.Форма", НСтр("ru='Приложения';en='Applications'"));
	КонецЕсли;
	
	СписокФорм.Добавить("Обработка.CRM_Мессенджер.Форма.ФормаМессенджера", "Диалоги");
	
	Если сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
		СписокФорм.Добавить("Обработка.сфпАРМ_Телефония.Форма.Форма", "Телефония");
	КонецЕсли;
	
	CRM_РабочийСтолСерверПереопределяемый.ПолучитьСписокФормПоУмолчанию(СписокФорм);
	
	Возврат СписокФорм;
	
КонецФункции

// Возвращает настройки открытия.
// 
// Возвращаемое значение:
//  Структура - Настройки открытия.
//
Функция ПолучитьНастройкиОткрытия() Экспорт
	
	СтруктураНастроек = Новый Структура("ОткрыватьРабочийСтол,БлокироватьИнтерфейс,
		|ИзменятьСоставРабочегоСтола,ИзменятьРежимЗапуска, ОтображатьОповещения", Ложь, Ложь, Истина,
		 Истина,
		 Ложь);
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ИспользоватьCRM() Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	Если ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Подразделение = ТекущийПользователь.Подразделение;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_НастройкиОткрытияРабочегоСтола.ОткрыватьРабочийСтол КАК ОткрыватьРабочийСтол,
		|	CRM_НастройкиОткрытияРабочегоСтола.БлокироватьИнтерфейс КАК БлокироватьИнтерфейс,
		|	CRM_НастройкиОткрытияРабочегоСтола.ИзменятьСоставРабочегоСтола КАК ИзменятьСоставРабочегоСтола,
		|	CRM_НастройкиОткрытияРабочегоСтола.ИзменятьРежимЗапуска КАК ИзменятьРежимЗапуска,
		|	CRM_НастройкиОткрытияРабочегоСтола.ОтображатьПринятияОбращения КАК ОтображатьПринятияОбращения
		|ИЗ
		|	РегистрСведений.CRM_НастройкиОткрытияРабочегоСтола КАК CRM_НастройкиОткрытияРабочегоСтола
		|ГДЕ
		|	CRM_НастройкиОткрытияРабочегоСтола.Объект = &Объект";
		
		Запрос.УстановитьПараметр("Объект", ТекущийПользователь);
		ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
		Если ТаблицаНастроек.Количество() > 0 Тогда
			СтруктураНастроек.Вставить("ОткрыватьРабочийСтол", ТаблицаНастроек[0].ОткрыватьРабочийСтол);
			СтруктураНастроек.Вставить("БлокироватьИнтерфейс", ТаблицаНастроек[0].БлокироватьИнтерфейс);
			СтруктураНастроек.Вставить("ИзменятьСоставРабочегоСтола", ТаблицаНастроек[0].ИзменятьСоставРабочегоСтола);
			СтруктураНастроек.Вставить("ИзменятьРежимЗапуска", ТаблицаНастроек[0].ИзменятьРежимЗапуска);
			СтруктураНастроек.Вставить("ОтображатьПринятияОбращения", ТаблицаНастроек[0].ОтображатьПринятияОбращения);
		Иначе
			Запрос.УстановитьПараметр("Объект", Подразделение);
			ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
			Если ТаблицаНастроек.Количество() > 0 Тогда
				СтруктураНастроек.Вставить("ОткрыватьРабочийСтол", ТаблицаНастроек[0].ОткрыватьРабочийСтол);
				СтруктураНастроек.Вставить("БлокироватьИнтерфейс", ТаблицаНастроек[0].БлокироватьИнтерфейс);
				СтруктураНастроек.Вставить("ИзменятьСоставРабочегоСтола", ТаблицаНастроек[0].ИзменятьСоставРабочегоСтола);
				СтруктураНастроек.Вставить("ИзменятьРежимЗапуска", ТаблицаНастроек[0].ИзменятьРежимЗапуска);
				СтруктураНастроек.Вставить("ОтображатьПринятияОбращения", ТаблицаНастроек[0].ОтображатьПринятияОбращения);
			Иначе
				Запрос.УстановитьПараметр("Объект", "Общие настройки");
				ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
				Если ТаблицаНастроек.Количество() > 0 Тогда
					СтруктураНастроек.Вставить("ОткрыватьРабочийСтол", ТаблицаНастроек[0].ОткрыватьРабочийСтол);
					СтруктураНастроек.Вставить("БлокироватьИнтерфейс", ТаблицаНастроек[0].БлокироватьИнтерфейс);
					СтруктураНастроек.Вставить("ИзменятьСоставРабочегоСтола", ТаблицаНастроек[0].ИзменятьСоставРабочегоСтола);
					СтруктураНастроек.Вставить("ИзменятьРежимЗапуска", ТаблицаНастроек[0].ИзменятьРежимЗапуска);
					СтруктураНастроек.Вставить("ОтображатьПринятияОбращения", ТаблицаНастроек[0].ОтображатьПринятияОбращения);
				Иначе
					СтруктураНастроек.Вставить("ОтображатьПринятияОбращения", Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураНастроек;
КонецФункции

// Возвращает структуру интерфе	йса рабочего стола.
// 
// Возвращаемое значение:
//  Структура - Структура интерфейса рабочего стола.
//
Функция СтруктураИнтерфейсаРабочегоСтола() Экспорт

	СтруктураИнтерфейса = Новый Структура;
	
	СтруктураИнтерфейса.Вставить("ФонТумблеров"					    , ЦветаСтиля.CRM_ФонТумблеров);
	СтруктураИнтерфейса.Вставить("ЦветШрифтаТумблеров"				, ЦветаСтиля.CRM_ЦветШрифтаТумблеров);
	СтруктураИнтерфейса.Вставить("ДанныеЛоготипа"					, Константы.CRM_ЛоготипРабочегоСтола.Получить().Получить());
	СтруктураИнтерфейса.Вставить("ДвоичныеДанныеЛоготипаПоУмолчанию", БиблиотекаКартинок.CRM_ЛоготипРабочийСтол);
	СтруктураИнтерфейса.Вставить("НастройкиОткрытия"				, ПолучитьНастройкиОткрытия());
	
	Возврат СтруктураИнтерфейса;
	
КонецФункции // СтруктураИнтерфейсаРабочегоСтола()

#КонецОбласти

#Область Инициализация

// Функция помещает массив структур в таблицу значений.
//
// Параметры:
//  мСтруктур	 - Массив - Массив структур. 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений.
//
Функция МассивСтруктурВТаблицуЗначений(мСтруктур) Экспорт 
	Если НЕ (ТипЗнч(мСтруктур) = Тип("Массив")) ИЛИ (мСтруктур.Количество() = 0) ИЛИ (мСтруктур[0].Количество() = 0) Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;		
	ТЗ = Новый ТаблицаЗначений;
	СтруктураПолей = "";
	СтруктураКолонок = мСтруктур[0];
	Для Каждого Поле Из СтруктураКолонок Цикл
		СтруктураПолей = СтруктураПолей + "," + Поле.Ключ;
	КонецЦикла;
	СтруктураКолонок = Новый Структура(СтруктураПолей);
	Для Каждого Поле Из СтруктураКолонок Цикл
		ТЗ.Колонки.Добавить(Поле.Ключ);
	КонецЦикла;
	Для Каждого Строка Из мСтруктур Цикл
		СтрокаТЗ = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗ, Строка);
	КонецЦикла;
	Возврат ТЗ;
КонецФункции

// Возвращает таблицу скрытых настроек рабочего стола.
// 
// Возвращаемое значение:
//  Массив - Массив с таблицей структур.
//
Функция ПолучитьТаблицуСкрытыхНастроекРабочегоСтола() Экспорт
	
	ТекущийПользователь	 = Пользователи.ТекущийПользователь();
	ТекущееПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "Подразделение");	
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_НастройкиОткрытияРабочегоСтола.Объект КАК Объект,
	|	CRM_НастройкиОткрытияРабочегоСтола.ИндивидуальныеНастройки КАК ИндивидуальныеНастройки
	|ИЗ
	|	РегистрСведений.CRM_НастройкиОткрытияРабочегоСтола КАК CRM_НастройкиОткрытияРабочегоСтола
	|ГДЕ
	|	CRM_НастройкиОткрытияРабочегоСтола.ИндивидуальныеНастройки";
	ТабНастроек = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиРабочегоСтола.ИмяФормы КАК ИмяФормы,
	|	НастройкиРабочегоСтола.Синоним КАК Синоним,
	|	НастройкиРабочегоСтола.Наименование КАК Наименование,
	|	НастройкиРабочегоСтола.Параметры КАК Параметры,
	|	НастройкиРабочегоСтола.Объект КАК Объект,
	|	НастройкиРабочегоСтола.Идентификатор КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(НастройкиРабочегоСтола.Объект) = ТИП(Справочник.Пользователи)
	|			ТОГДА 0
	|		КОГДА ТИПЗНАЧЕНИЯ(НастройкиРабочегоСтола.Объект) = ТИП(Справочник.СтруктураПредприятия)
	|			ТОГДА 1
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ПорядокНастроек,
	|	НастройкиРабочегоСтола.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.CRM_НастройкиРабочегоСтола КАК НастройкиРабочегоСтола
	|ГДЕ
	|	НастройкиРабочегоСтола.Объект = &ОбъектНастроек
	|	И НастройкиРабочегоСтола.Скрытая
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокНастроек,
	|	Порядок";
	
	НастройкаПользователя = ТабНастроек.Найти(ТекущийПользователь, "Объект");
	НастройкаПодразделения = ТабНастроек.Найти(ТекущееПодразделение, "Объект");
	
	Если НастройкаПользователя <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОбъектНастроек", ТекущийПользователь);
		
		ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
		Возврат ТаблицаВМассивСтруктур(ТаблицаНастроек);
	ИначеЕсли НастройкаПодразделения <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОбъектНастроек", ТекущееПодразделение);
		
		ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
		Возврат ТаблицаВМассивСтруктур(ТаблицаНастроек);
	Иначе
		Запрос.УстановитьПараметр("ОбъектНастроек", "Общие настройки");
		
		ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
		Возврат ТаблицаВМассивСтруктур(ТаблицаНастроек);
	КонецЕсли;
КонецФункции

// Сформировать настройки рабочего стола формы.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - Передаваемая форма.
//  ИмяОписания				 - Строка - Название таблицы значений.
//  ЭлементыРабочегоСтола	 - ТаблицаЗначений - элементы таблицы значений.
//	ОтображатьОповещения	 - Булево - Признак отображения оповещения.
//
Процедура СформироватьНастройкиРабочегоСтолаФормы(Форма, ИмяОписания, ЭлементыРабочегоСтола,
	 ОтображатьОповещения = Ложь) Экспорт

	МассивДобавляемыхРеквизитов = Новый Массив;
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяКоманды"     ,
		 Новый ОписаниеТипов("Строка") ,
		 ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Порядок"        ,
		 Новый ОписаниеТипов("Число" , , , Новый КвалификаторыЧисла(10))  ,
		 ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПорядокНастроек",
		 Новый ОписаниеТипов("Число" , , , Новый КвалификаторыЧисла(10))  ,
		 ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяФормы"       ,
		 Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)),
		 ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Наименование"	  ,
		 Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)),
		 ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Идентификатор"  ,
		 Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)) ,
		 ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Синоним"        ,
		 Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)),
		 ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Параметры"      ,
		 Новый ОписаниеТипов("Строка") ,
		 ИмяОписания));
	
	// Создадим реквизиты
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	Форма[ИмяОписания].Загрузить(ЭлементыРабочегоСтола);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает структуру параметров открытия формы.
// Пока для 1 формы
Функция ПолучитьПараметрыОткрытияФормы(ИмяФормы, ПараметрыФормы) Экспорт
	Если ИмяФормы = "Обработка.CRM_АРМПланированияВстреч.Форма.ФормаАРМ" Тогда
		СтруктураПараметров =  Обработки.CRM_АРМПланированияВстреч.ПолучитьМассивЖурналов();
		ПараметрыФормы.Вставить("Ключ", СтруктураПараметров.Ключ);
		ПоследнийОткрытыйЖурнал = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_ЖурналВстреч.ПоследнийОткрытыйЖурнал",
			 Строка(Пользователи.АвторизованныйПользователь().УникальныйИдентификатор()),
			 Неопределено);
		Если ПоследнийОткрытыйЖурнал <> Неопределено Тогда
			ПараметрыФормы.Вставить("Ключ", ПоследнийОткрытыйЖурнал);
		КонецЕсли;	
		ПараметрыФормы.Вставить("ИзДереваИтогов", Ложь);
	КонецЕсли;
	
	Возврат ПараметрыФормы;
КонецФункции	

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма, из обработчика события которой происходит вызов процедуры.
//	Отказ - Булево - признак отказа.
//
Процедура ПриСозданииНаСервере(Форма, Отказ) Экспорт
	Если CRM_ЛицензированиеЭкспортныеМетоды.РабочийСтолCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().РабочийСтолПриСозданииНаСервере(Форма, Отказ);
		
		// +СофтФон
		// Индикатор активного телефонного звонка
		ИмяОписания = "сфпИндикаторАктивногоЗвонка";
		
		Если Форма.Элементы.Найти(ИмяОписания) = Неопределено
			И Форма.Элементы.Найти("скОбластьДействий") <> Неопределено
			И Форма.Элементы.Найти("CRM_ОткрытьЗаметки") <> Неопределено Тогда

			Команда = Форма.Команды.Найти(ИмяОписания);
			Если Команда = Неопределено Тогда
				Команда = Форма.Команды.Добавить(ИмяОписания);
				Команда.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
				Команда.Заголовок = НСтр("ru='Панель звонка';en='Call panel'");
				Команда.Подсказка = НСтр("ru='Открыть панель звонка';en='Open call panel'");
			КонецЕсли;

			Элемент = Форма.Элементы.Вставить(ИмяОписания, Тип("КнопкаФормы"),
				 Форма.Элементы.скОбластьДействий,
				 Форма.Элементы.CRM_ОткрытьЗаметки);
			Элемент.Отображение = ОтображениеКнопки.Картинка;
			Элемент.Заголовок = НСтр("ru='Панель звонка';en='Call panel'");
			Элемент.Картинка = БиблиотекаКартинок.сфпИндикаторАктивногоЗвонка;
			Элемент.ИмяКоманды = ИмяОписания;
			Элемент.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			Элемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
			Элемент.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
			Элемент.Видимость = Ложь;
			Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
			
		КонецЕсли;	
		// -СофтФон
	КонецЕсли;	
	
КонецПроцедуры

// Определяет разделы глобального командного интерфейса, в которых предусмотрены панели отчетов.
// В Разделы необходимо добавить метаданные тех подсистем первого уровня,
// в которых размещены команды вызова панелей отчетов.
//
// Параметры:
//   Разделы - СписокЗначений - разделы, в которые выведены команды открытия панели отчетов.
//       * Значение - ОбъектМетаданных: Подсистема, Строка - подсистема раздела глобального командного интерфейса,
//           либо ВариантыОтчетовКлиентСервер.ИдентификаторНачальнойСтраницы для начальной страницы.
//       * Представление - Строка - заголовок панели отчетов в этом разделе.
//
// Пример:
//	Разделы.Добавить(Метаданные.Подсистемы.Анкетирование,
	// НСтр("ru='Отчеты по анкетированию';en='Reports on questioning'"));
//	Разделы.Добавить(ВариантыОтчетовКлиентСервер.ИдентификаторНачальнойСтраницы(),
	// НСтр("ru='Основные отчеты';en='Basic reports'"));
//
Процедура ОпределитьРазделыСВариантамиОтчетов(Разделы) Экспорт
	Разделы.Добавить(Метаданные.Подсистемы["скОтчетыРабочегоСтола"]);
КонецПроцедуры

#Область Заметки

Функция ЗаметкиПользователя(Знач ТекущийПользователь = Неопределено) Экспорт

	Если ТекущийПользователь = Неопределено Тогда
		ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	КонецЕсли;	
	
	МассивЗаметок = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникЗаметки.Ссылка КАК Ссылка,
		|	СправочникЗаметки.ПометкаУдаления КАК ПометкаУдаления,
		|	СправочникЗаметки.Предопределенный КАК Предопределенный,
		|	СправочникЗаметки.Наименование КАК Наименование,
		|	СправочникЗаметки.Автор КАК Автор,
		|	СправочникЗаметки.Содержание КАК Содержание,
		|	СправочникЗаметки.ТекстСодержания КАК ТекстСодержания,
		|	СправочникЗаметки.ДляРабочегоСтола КАК ДляРабочегоСтола,
		|	ВЫБОР
		|		КОГДА СправочникЗаметки.Пометка = ЗНАЧЕНИЕ(Перечисление.ЦветаЗаметок.Красный)
		|			ТОГДА ""red""
		|		КОГДА СправочникЗаметки.Пометка = ЗНАЧЕНИЕ(Перечисление.ЦветаЗаметок.Оранжевый)
		|			ТОГДА ""orange""
		|		КОГДА СправочникЗаметки.Пометка = ЗНАЧЕНИЕ(Перечисление.ЦветаЗаметок.Желтый)
		|			ТОГДА ""yellow""
		|		КОГДА СправочникЗаметки.Пометка = ЗНАЧЕНИЕ(Перечисление.ЦветаЗаметок.Зеленый)
		|			ТОГДА ""green""
		|		КОГДА СправочникЗаметки.Пометка = ЗНАЧЕНИЕ(Перечисление.ЦветаЗаметок.Голубой)
		|			ТОГДА ""lightblue""
		|		КОГДА СправочникЗаметки.Пометка = ЗНАЧЕНИЕ(Перечисление.ЦветаЗаметок.Синий)
		|			ТОГДА ""blue""
		|		КОГДА СправочникЗаметки.Пометка = ЗНАЧЕНИЕ(Перечисление.ЦветаЗаметок.Фиолетовый)
		|			ТОГДА ""violet""
		|	КОНЕЦ КАК ЦветСтиля,
		|	СправочникЗаметки.ПредставлениеПредмета КАК ПредставлениеПредмета,
		|	СправочникЗаметки.ДатаИзменения КАК ДатаИзменения
		|ИЗ
		|	Справочник.Заметки КАК СправочникЗаметки
		|ГДЕ
		|	НЕ СправочникЗаметки.ПометкаУдаления
		|	И СправочникЗаметки.Автор = &Пользователь
		|	И СправочникЗаметки.ДляРабочегоСтола = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл
		СтруктураЭлемента = Новый Структура;
		Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
			СтруктураЭлемента.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла;
		
		СтруктураЭлемента.Вставить("ИдентификаторСсылки", XMLСтрока(Выборка.Ссылка));
		
		МассивЗаметок.Добавить(СтруктураЭлемента);
		
	КонецЦикла;
	
	Возврат МассивЗаметок;
	
КонецФункции // ЗаметкиПользователя()

Функция СкрытьЭлементЗаметки(Идентификатор) Экспорт
		
	Объект = СсылкаЭлемента(Идентификатор, "Справочник.Заметки").ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Объект.Заблокировать();
	Объект.ДляРабочегоСтола = Ложь;
	
	Попытка
		Объект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;	
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // СкрытьЭлементЗаметки()

#КонецОбласти

Функция СсылкаЭлемента(ИдентификаторЭлемента, ИмяМенеджераОбъекта) Экспорт

	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяМенеджераОбъекта);	
	Возврат МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(ИдентификаторЭлемента, "_", "-")));
	
КонецФункции // СсылкаЭлемента()

Функция ПолучитьBase64ДанныеКартинки(Картинка) Экспорт
	ДвоичныеДанныеКартинки = Картинка.ПолучитьДвоичныеДанные();
	Base64ДанныеКартинки = Base64Строка(ДвоичныеДанныеКартинки);
	СтруктураДанныхКартинки = Новый Структура("Base64ДанныеКартинки, Формат", Base64ДанныеКартинки, Картинка.Формат());
	Возврат СтруктураДанныхКартинки;
КонецФункции

Процедура ДобавитьФормуНаРабочийСтол(ИмяФормы, Синоним, ВсегдаДобавлятьВКонец = Ложь) Экспорт
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Набор = РегистрыСведений.CRM_НастройкиРабочегоСтола.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить("Общие настройки");
	Набор.Прочитать();
	ТаблицаНабора = Набор.Выгрузить();
	Если ТаблицаНабора.Найти(ИмяФормы, "ИмяФормы") = Неопределено Тогда
		ТаблицаНабора.Сортировать("Порядок");
		Порядок = ТаблицаНабора.Количество();
		
		Если НЕ ВсегдаДобавлятьВКонец Тогда
			ИскомаяФорма = ТаблицаНабора.Найти("ОбщаяФорма.CRM_ПанельОтчетов", "ИмяФормы");
			Если ИскомаяФорма <> Неопределено Тогда
				Порядок = Мин(Порядок, ТаблицаНабора.Индекс(ИскомаяФорма));
			КонецЕсли;
			ИскомаяФорма = ТаблицаНабора.Найти("Обработка.CRM_НастройкаРазделовРешения.Форма.Форма", "ИмяФормы");
			Если ИскомаяФорма <> Неопределено Тогда
				Порядок = Мин(Порядок, ТаблицаНабора.Индекс(ИскомаяФорма));
			КонецЕсли;
			
			Если РазделениеВключено Тогда
				ИскомаяФорма = ТаблицаНабора.Найти("Обработка.CRM_Приложения.Форма.ФормаФреш", "ИмяФормы");
			Иначе
				ИскомаяФорма = ТаблицаНабора.Найти("Обработка.CRM_Приложения.Форма.Форма", "ИмяФормы");
			КонецЕсли;
			Если ИскомаяФорма <> Неопределено Тогда
				Порядок = Мин(Порядок, ТаблицаНабора.Индекс(ИскомаяФорма));
			КонецЕсли;
		КонецЕсли; 
		
		Если Порядок = ТаблицаНабора.Количество() Тогда
			ЗаписьНабора = ТаблицаНабора.Добавить();
		Иначе
			ЗаписьНабора = ТаблицаНабора.Вставить(Порядок);
		КонецЕсли;
		
		ЗаписьНабора.ИмяФормы = ИмяФормы;
		ЗаписьНабора.Наименование = Синоним;
		ЗаписьНабора.Объект = "Общие настройки";
		ЗаписьНабора.Идентификатор = Строка(Новый УникальныйИдентификатор);
		
		Порядок = 0;
		Для каждого ЗаписьНабора Из ТаблицаНабора Цикл
			Порядок = Порядок + 1;
			ЗаписьНабора.Порядок = Порядок;
		КонецЦикла;
		Набор.Загрузить(ТаблицаНабора);
		Набор.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуНастроекРабочегоСтола(ПараметрыНастроек = Неопределено) Экспорт
	
	ТекущийПользователь	 = Пользователи.ТекущийПользователь();
	ТекущееПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "Подразделение");	
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_НастройкиОткрытияРабочегоСтола.Объект КАК Объект,
	|	CRM_НастройкиОткрытияРабочегоСтола.ИндивидуальныеНастройки КАК ИндивидуальныеНастройки
	|ИЗ
	|	РегистрСведений.CRM_НастройкиОткрытияРабочегоСтола КАК CRM_НастройкиОткрытияРабочегоСтола
	|ГДЕ
	|	CRM_НастройкиОткрытияРабочегоСтола.ИндивидуальныеНастройки";
	ТабНастроек = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиРабочегоСтола.ИмяФормы КАК ИмяФормы,
	|	НастройкиРабочегоСтола.Синоним КАК Синоним,
	|	НастройкиРабочегоСтола.Наименование КАК Наименование,
	|	НастройкиРабочегоСтола.Параметры КАК Параметры,
	|	НастройкиРабочегоСтола.Объект КАК Объект,
	|	НастройкиРабочегоСтола.Идентификатор КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(НастройкиРабочегоСтола.Объект) = ТИП(Справочник.Пользователи)
	|			ТОГДА 0
	|		КОГДА ТИПЗНАЧЕНИЯ(НастройкиРабочегоСтола.Объект) = ТИП(Справочник.СтруктураПредприятия)
	|			ТОГДА 1
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ПорядокНастроек,
	|	НастройкиРабочегоСтола.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.CRM_НастройкиРабочегоСтола КАК НастройкиРабочегоСтола
	|ГДЕ
	|	НастройкиРабочегоСтола.Объект = &ОбъектНастроек
	|	И НЕ НастройкиРабочегоСтола.Скрытая
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокНастроек,
	|	Порядок";
	
	НастройкаПользователя = ТабНастроек.Найти(ТекущийПользователь, "Объект");
	НастройкаПодразделения = ТабНастроек.Найти(ТекущееПодразделение, "Объект");
	
	Если ПараметрыНастроек <> Неопределено Тогда
		Если ПараметрыНастроек.Свойство("ПолучатьСкрытые")
			И ПараметрыНастроек.ПолучатьСкрытые Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ НастройкиРабочегоСтола.Скрытая", "");
		КонецЕсли;
		Если ПараметрыНастроек.Свойство("глЗаголовокДиалогов") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "НастройкиРабочегоСтола.Наименование",
				"ВЫБОР КОГДА НастройкиРабочегоСтола.ИмяФормы = ""Обработка.CRM_Мессенджер.Форма.ФормаМессенджера""
				|ТОГДА &глЗаголовокДиалогов
				|ИНАЧЕ НастройкиРабочегоСтола.Наименование КОНЕЦ");
			
			Запрос.УстановитьПараметр("глЗаголовокДиалогов", ПараметрыНастроек.глЗаголовокДиалогов);
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкаПользователя <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОбъектНастроек", ТекущийПользователь);
	ИначеЕсли НастройкаПодразделения <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОбъектНастроек", ТекущееПодразделение);
	Иначе
		Запрос.УстановитьПараметр("ОбъектНастроек", "Общие настройки");
	КонецЕсли;
	
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаВМассивСтруктур(ТаблицаНастроек);

КонецФункции

Процедура ИнициализироватьРабочийСтолСервер(Форма, Отказ) Экспорт
	
	ЭлементыРабочегоСтола = ПолучитьТаблицуНастроекРабочегоСтола();
	Если ЭлементыРабочегоСтола.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Состав рабочего стола не определен. ';
			|en='Composition of desktop is not defined. '"));
	    Возврат;
		
	КонецЕсли;
	ЭлементыРабочегоСтола.Сортировать("ПорядокНастроек Убыв, Порядок Убыв");
	
	// ИмяОписания = "CRM_НастройкиРабочегоСтола";
	
	// СформироватьНастройкиРабочегоСтолаФормы(Форма, ИмяОписания, ЭлементыРабочегоСтола);
	// Форма.ИмяОписания = ИмяОписания;
	
КонецПроцедуры

Функция ТаблицаВМассивСтруктур(Знач ТаблицаЗначений) Экспорт
	Результат = Новый Массив;
	
	ИменаКолонок = "";
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		ИменаКолонок = ИменаКолонок + "," + Колонка.Имя;
	КонецЦикла;
	ИменаКолонок = Сред(ИменаКолонок, 2);
	
	Для Каждого Строка Из ТаблицаЗначений Цикл
		СтруктураСтроки = Новый Структура(ИменаКолонок);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
		Результат.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура ПодменитьНастройкиНачальнойСтраницы() Экспорт
	
	НастройкиОткрытия = CRM_РабочийСтолСервер.ПолучитьНастройкиОткрытия();
	ЗапускатьРабочийСтолМенеджера = НастройкиОткрытия.ОткрыватьРабочийСтол ИЛИ НастройкиОткрытия.БлокироватьИнтерфейс;
	
	Если ЗапускатьРабочийСтолМенеджера Тогда
		ПроблемныеФормыНачальнойСтраницы = Новый Массив;
		Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			ИмяФО = "ИспользоватьПроцессыИЗадачи1СДокументооборота";
			Если ПолучитьФункциональнуюОпцию(ИмяФО) Тогда
				ПроблемныеФормыНачальнойСтраницы.Добавить("Обработка.ИнтеграцияС1СДокументооборот.Форма.ЗадачиМне");
			КонецЕсли;
		КонецЕсли;
		
		НастройкиНачальнойСтраницы = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиНачальнойСтраницы");
		Если НастройкиНачальнойСтраницы = Неопределено Тогда
			НастройкиНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
		КонецЕсли;
		СоставФорм = НастройкиНачальнойСтраницы.ПолучитьСоставФорм();
		
		Если ПроблемныеФормыНачальнойСтраницы.Количество() > 0
			И (СоставФорм.ЛеваяКолонка.Количество() > 0 
			Или СоставФорм.ПраваяКолонка.Количество() > 0) Тогда
			
			ЕстьПроблемныеФормы = Ложь;
			НовыйСостав = Новый СоставФормНачальнойСтраницы;
		
		    Для каждого ИмяФормы Из СоставФорм.ЛеваяКолонка Цикл
				Если ПроблемныеФормыНачальнойСтраницы.Найти(ИмяФормы) = Неопределено Тогда
					НовыйСостав.ЛеваяКолонка.Добавить(ИмяФормы);
				Иначе	
					ЕстьПроблемныеФормы = Истина;
				КонецЕсли;
			КонецЦикла;
			
		    Для каждого ИмяФормы Из СоставФорм.ПраваяКолонка Цикл
				Если ПроблемныеФормыНачальнойСтраницы.Найти(ИмяФормы) = Неопределено Тогда
					НовыйСостав.ПраваяКолонка.Добавить(ИмяФормы);
				Иначе	
					ЕстьПроблемныеФормы = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьПроблемныеФормы Тогда
				
				ХранилищеОбщихНастроек.Сохранить("CRM_КэшНастроекНачальнойСтраницы", , НастройкиНачальнойСтраницы);
				
				НастройкиНачальнойСтраницы.УстановитьСоставФорм(НовыйСостав);
				ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы", , НастройкиНачальнойСтраницы);
				
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ХранилищеОбщихНастроек.Сохранить("CRM_КэшНастроекНачальнойСтраницы", , Неопределено);

КонецПроцедуры

Функция ВосстановитьНастройкиНачальнойСтраницы() Экспорт
	НастройкиНачальнойСтраницы = ХранилищеОбщихНастроек.Загрузить("CRM_КэшНастроекНачальнойСтраницы");
	Если ТипЗнч(НастройкиНачальнойСтраницы) = Тип("НастройкиНачальнойСтраницы") Тогда
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы", , НастройкиНачальнойСтраницы);
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Процедура ПроверитьДоступностьФорм(СписокФорм)
	
	СписокДляУдаления = Новый СписокЗначений;
	
	Для Каждого ЭлементФорма Из СписокФорм Цикл
		Если НЕ ФормаДоступнаПоФункциональнымОпциям(ЭлементФорма.Значение) Тогда
			СписокДляУдаления.Добавить(ЭлементФорма.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементФорма Из СписокДляУдаления Цикл
		ЭлементДляУдаления = СписокФорм.НайтиПоЗначению(ЭлементФорма.Значение);
		СписокФорм.Удалить(ЭлементДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
