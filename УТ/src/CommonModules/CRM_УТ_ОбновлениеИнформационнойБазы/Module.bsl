////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы УтиВСК.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ИдентификаторИнтернетПоддержки - Строка - уникальное имя программы в сервисах Интернет-поддержки.
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя	= "УправлениеТорговлей_CRM_2";
	Описание.Версия = "3.1.32.16";
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	Описание.ИдентификаторИнтернетПоддержки = "tradeCRM";
	
КонецПроцедуры

// Переопределяет параметры загружаемых и устанавливаемых исправлений (патчей).
//
// Параметры:
//  Настройки - Структура:
//    * ОтключитьНапоминания - Булево - Истина, если необходимо отключить создание задачи по включению автоматической
//        загрузки исправлений в подсистеме БСП.ТекущиеДела и не показывать оповещение пользователю при старте системы,
//        если подсистема БСП.ТекущиеДела отсутствует в конфигурации.
//    * Подсистемы - Массив из Структура - список программ, исправления которых необходимо загружать и устанавливать:
//        ** ИмяПодсистемы - Строка - имя подсистемы, например, "ИнтернетПоддержкиПользователей".
//        ** ИдентификаторИнтернетПоддержки - Строка - имя программы в сервисах Интернет-поддержки.
//        ** Версия - Строка - версия программы в формате из 4-х цифр, например, "2.1.3.1".
//
//@skip-warning
Процедура ПриОпределенииНастроекЗагрузкиИсправлений(Настройки) Экспорт

	Настройки.Подсистемы.Добавить(
	Новый Структура(
	"ИмяПодсистемы, ИдентификаторИнтернетПоддержки, Версия",
	"УправлениеТорговлей",
	"Trade",
	"11.5.21.116")); // Версия текущей подсистемы УТ (см. общий модуль ОбновлениеИнформационнойБазыУТ).
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.


// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример:
//  Для добавления своей процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Оперативно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики, выполняемые при каждом обновлении ИБ
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_УТ_ОбновлениеИнформационнойБазы.ПервыйЗапуск";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_УсловияСрабатыванияТриггеров.СоздатьПредопределенныеДействия";
	Обработчик.Комментарий = НСтр("ru = 'Обновление предопределенных условий триггеров.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_ДействияТриггеров.СоздатьПредопределенныеДействия";
	Обработчик.Комментарий = НСтр("ru = 'Обновление предопределенных действий триггеров.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_УТ_ПолучениеОбновленийПрограммы.ОчиститьИгнорируемыеИсправления";
	Обработчик.Комментарий = НСтр("ru = 'Очистка регистра игнорируемых исправлений.'");
	
	// Обработчики, выполняемые при переходе на определенную версию
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры // ПередОбновлениемИнформационнойБазы()

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПослеОбновленияИнформационнойБазы.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсияИБ, Знач ТекущаяВерсияИБ,
	Знач ИтерацииОбновления, ВыводитьОписаниеОбновлений, Знач МонопольныйРежим) Экспорт
	
КонецПроцедуры // ПослеОбновленияИнформационнойБазы

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры // ПриПодготовкеМакетаОписанияОбновлений()

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры // ПриОпределенииРежимаОбновленияДанных()

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
#Область ТиповыеРешения

	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей";
	Обработчик.Процедура = "CRM_УТ_ОбновлениеИнформационнойБазы.ПереходСТиповогоРешения";

#КонецОбласти

#Область ОбъединенныеРешения

	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей_CRM_2";
	Обработчик.Процедура = "CRM_УТ_ОбновлениеИнформационнойБазы.ПереходСОбъединенногоРешения";

#КонецОбласти

КонецПроцедуры // ПриДобавленииОбработчиковПереходаСДругойПрограммы()

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("ОчиститьСведенияОПредыдущейКонфигурации") Тогда
		Параметры.ОчиститьСведенияОПредыдущейКонфигурации = Ложь;
	КонецЕсли;
	
	// Снимем флаг "ЭтоОсновнаяКонфигурация" с подсистемы "УправлениеТорговлей" (ПредыдущееИмяКонфигурации)
	ОбновлениеИнформационнойБазы.УстановитьВерсиюИБ(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Ложь);
	
КонецПроцедуры // ПриЗавершенииПереходаСДругойПрограммы()

// Получить режим обновления данных информационной базы
//
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьРежимОбновленияДанных() Экспорт
	Возврат ОбновлениеИнформационнойБазыСлужебный.РежимОбновленияДанных();
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПервыйЗапуск

// Процедура заполняет пустую ИБ.
//
// Параметры:
//	Нет.
//
Процедура ПервыйЗапуск() Экспорт
	
КонецПроцедуры // ПервыйЗапуск()

// Процедура перехода с ТиповогоРешения
//
// Параметры:
//	Нет.
//
Процедура ПереходСТиповогоРешения() Экспорт
	
КонецПроцедуры // ПереходСТиповогоРешения()

// Процедура перехода с Объединенного решения 2.0
//
// Параметры:
//	Нет.
//
Процедура ПереходСОбъединенногоРешения() Экспорт
	
КонецПроцедуры // ПереходСОбъединенногоРешения()

#КонецОбласти

#Область ПроцедурыОбновления

#КонецОбласти

#КонецОбласти // СлужебныеПроцедурыИФункции
