// strict-types

#Область ПрограммныйИнтерфейс

// См. ЭлектронноеВзаимодействие.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки
// 
// Параметры:
//  Типы - См. ЭлектронноеВзаимодействие.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки.Типы
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Константы.ИспользоватьИнтеграциюОблачногоЭДО);
	Типы.Добавить(Метаданные.РегистрыСведений.ВизуализацииДокументовОблачногоЭДО);
	Типы.Добавить(Метаданные.РегистрыСведений.СостоянияПравилВизуализацииОблачногоЭДО);
	Типы.Добавить(Метаданные.РегистрыСведений.СостоянияСинхронизацииОблачногоЭДО);
	Типы.Добавить(Метаданные.РегистрыСведений.НастройкиОблачногоЭДО);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область УчетныеЗаписиОблачногоЭДО

// Возвращаемое значение:
//  - Неопределено - если нет элементов или элементов больше одного.
//  - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
Функция ЕдинственнаяУчетнаяЗаписьОблачногоЭДО() Экспорт
	Возврат Справочники.УчетныеЗаписиОблачногоЭДО.ЕдинственнаяУчетнаяЗапись();
КонецФункции

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  * Значение - Массив из Строка
Функция ИдентификаторыЭДОПоУчетнымЗаписямОблачнымЭДО() Экспорт
	Возврат РегистрыСведений.НастройкиОблачногоЭДО.ИдентификаторыЭДОПоУчетнымЗаписям();
КонецФункции

// Параметры:
//  ИдентификаторЭДО - Строка
// 
// Возвращаемое значение:
//  СправочникСсылка.УчетныеЗаписиОблачногоЭДО
Функция УчетнаяЗаписьОблачногоЭДО(ИдентификаторЭДО) Экспорт
	
	Возврат РегистрыСведений.НастройкиОблачногоЭДО.УчетнаяЗаписьОблачногоЭДО(ИдентификаторЭДО);
	
КонецФункции

#КонецОбласти

#Область ВыполнениеМетодовСервиса

// Возвращаемое значение:
//  Структура:
//  * ТипТокена - Строка
//  * ТокенДоступа - Строка
Функция НовыйТокенАвторизации() Экспорт
	ТокенАвторизации = Новый Структура;
	ТокенАвторизации.Вставить("ТипТокена", "");
	ТокенАвторизации.Вставить("ТокенДоступа", "");
	Возврат ТокенАвторизации;
КонецФункции

// Параметры:
//  Логин - Строка
//  Пароль - Строка
// 
// Возвращаемое значение:
//  См. НовыйТокенАвторизации
Функция ТокенАвторизацииБазовый(Логин, Пароль) Экспорт
	ТокенАвторизации = НовыйТокенАвторизации();
	ТокенАвторизации.ТипТокена = "Basic";
	ТокенАвторизации.ТокенДоступа = ОбщегоНазначенияБЭД.СтрокаBase64БезBOM(СтрШаблон("%1:%2", Логин, Пароль));
	Возврат ТокенАвторизации;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  * АдресСервиса - Строка
//  * ТокенАвторизации - См. НовыйТокенАвторизации
//  * ИспользоватьМетодGET - Булево
Функция НовыеПараметрыВыполненияМетодаСервиса() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("УчетнаяЗапись", Справочники.УчетныеЗаписиОблачногоЭДО.ПустаяСсылка());
	Параметры.Вставить("АдресСервиса", "");
	Параметры.Вставить("ТокенАвторизации", НовыйТокенАвторизации());
	Параметры.Вставить("ИспользоватьМетодGET", Ложь);
	Возврат Параметры;
КонецФункции

// Параметры:
//  УчетнаяЗаписьОблачногоЭДО - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  Пользователь - Неопределено - для получения параметров выполнения служебного пользователя.
//               - ОпределяемыйТип.Пользователь
// 
// Возвращаемое значение:
//  См. НовыеПараметрыВыполненияМетодаСервиса
Функция ПараметрыВыполненияМетодаСервиса(УчетнаяЗаписьОблачногоЭДО, Пользователь = Неопределено) Экспорт
	
	ТокенАвторизации = Неопределено;
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		ТокенАвторизации = РегистрыСведений.ПользователиОблачногоЭДО.ТокенАвторизации(
			УчетнаяЗаписьОблачногоЭДО, Пользователь);
	КонецЕсли;
	
	Если ТокенАвторизации = Неопределено
		И (Пользователь = Неопределено Или Пользователь = Пользователи.СсылкаНеуказанногоПользователя()) Тогда
		ТокенАвторизации = Справочники.УчетныеЗаписиОблачногоЭДО.ТокенАвторизацииСлужебный(УчетнаяЗаписьОблачногоЭДО);
	КонецЕсли;
	
	Если ТокенАвторизации = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Отсутствуют данные авторизации для пользователя ""%1"" учетной записи облачного ЭДО ""%2""'"),
			Пользователь, УчетнаяЗаписьОблачногоЭДО);
	КонецЕсли;
	
	Параметры = НовыеПараметрыВыполненияМетодаСервиса();
	Параметры.УчетнаяЗапись = УчетнаяЗаписьОблачногоЭДО;
	Параметры.ТокенАвторизации = ТокенАвторизации;
	Параметры.АдресСервиса = Справочники.УчетныеЗаписиОблачногоЭДО.АдресСервиса(УчетнаяЗаписьОблачногоЭДО);
	
	Возврат Параметры;
	
КонецФункции

//@skip-check method-too-many-params
//
// Параметры:
//  ИмяМетода - Строка
//  Параметр1 - Неопределено
//            - Строка
//            - Число
//            - Булево
//            - Массив из Число
//            - Массив из Строка
//            - Массив из Булево
//            - Массив из Структура
//            - Структура
//  Параметр2 - см. ОписаниеМетодаСервиса.Параметр1
//  Параметр3 - см. ОписаниеМетодаСервиса.Параметр1
//  Параметр4 - см. ОписаниеМетодаСервиса.Параметр1
//  Параметр5 - см. ОписаниеМетодаСервиса.Параметр1
//  Параметр6 - см. ОписаниеМетодаСервиса.Параметр1
//  Параметр7 - см. ОписаниеМетодаСервиса.Параметр1
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервисаПоСвойствам
//  
Функция ОписаниеМетодаСервиса(ИмяМетода, Параметр1 = Неопределено,
	Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено,
	Параметр5 = Неопределено, Параметр6 = Неопределено, Параметр7 = Неопределено) Экспорт
	
	ПараметрыВызова = СписокПараметровМетодаСервиса(Параметр1, Параметр2, Параметр3, Параметр4,
		Параметр5, Параметр6, Параметр7);
	
	Возврат ОписаниеМетодаСервисаПоСвойствам(ИмяМетода, ПараметрыВызова);
	
КонецФункции

// Возвращаемое значение:
//  Массив из см. ОписаниеМетодаСервиса
Функция НовыйПакетМетодовСервиса() Экспорт
	Возврат Новый Массив;
КонецФункции

// Параметры:
//  ПакетМетодов - Массив из см. НовыйПакетМетодовСервиса
//  ОписаниеМетода - См. ОписаниеМетодаСервиса
//  ИдентификаторМетода - Строка,Число
Процедура ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, ИдентификаторМетода = Неопределено) Экспорт
	ПакетМетодов.Добавить(ОписаниеМетода);
	Если ИдентификаторМетода <> Неопределено Тогда
		ОписаниеМетода.id = ИдентификаторМетода;
	ИначеЕсли Не ЗначениеЗаполнено(ОписаниеМетода.id) Тогда
		ОписаниеМетода.id = ПакетМетодов.ВГраница();
	КонецЕсли;
КонецПроцедуры

// Параметры:
//  ПараметрыВыполнения - См. ПараметрыВыполненияМетодаСервиса
//  ОписаниеМетода - См. ОписаниеМетодаСервиса
//  КонтекстДиагностики - Неопределено - В случае ошибки будет вызвано исключение.
//                      - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Неопределено,Произвольный
Функция ВыполнитьМетодСервиса(ПараметрыВыполнения, ОписаниеМетода, КонтекстДиагностики = Неопределено) Экспорт
	
	РезультатВызова = ВызватьМетодСервиса(ПараметрыВыполнения, ОписаниеМетода, КонтекстДиагностики);
	
	Если РезультатВызова = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли РезультатВызова.Ошибка = Неопределено Тогда
		Возврат РезультатВызова.Результат;
	КонецЕсли;
	
	Ошибка = РезультатВызова.Ошибка; // См. НоваяОшибкаВызоваМетодаСервиса
	
	Если КонтекстДиагностики = Неопределено Тогда
		ВызватьИсключение ТекстИсключенияВызовМетодаСервиса(ОписаниеМетода, Ошибка.Текст);
	Иначе
		ВидОперации = ВидОперацииВызовМетодаСервиса(ОписаниеМетода);
		ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации, Ошибка.Текст,,ПараметрыВыполнения.УчетнаяЗапись);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Параметры:
//  ПараметрыВыполнения - См. ПараметрыВыполненияМетодаСервиса
//  ПакетМетодов - См. НовыйПакетМетодовСервиса
//  КонтекстДиагностики - Неопределено - В случае ошибки будет вызвано исключение.
//                      - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Неопределено,Соответствие из КлючИЗначение:
//  * Ключ - Строка
//  * Значение - Неопределено,Произвольный
Функция ВыполнитьПакетМетодовСервиса(ПараметрыВыполнения, ПакетМетодов, КонтекстДиагностики = Неопределено) Экспорт
	
	РезультатВызоваПакета = ВызватьПакетМетодовСервиса(ПараметрыВыполнения, ПакетМетодов, КонтекстДиагностики);
	
	Если РезультатВызоваПакета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатВыполненияПакета = Новый Соответствие;
	
	ОшибкиПакета = Новый Соответствие;
	
	Для Каждого ИдентификаторИРезультатВызова Из РезультатВызоваПакета Цикл
		Идентификатор = ИдентификаторИРезультатВызова.Ключ;
		РезультатВызова = ИдентификаторИРезультатВызова.Значение;
		РезультатВыполненияПакета.Вставить(Идентификатор, РезультатВызова.Результат);
		Если РезультатВызова.Ошибка <> Неопределено Тогда
			ОшибкиПакета.Вставить(Идентификатор, РезультатВызова.Ошибка);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ОшибкиПакета) Тогда
		Возврат РезультатВыполненияПакета;
	КонецЕсли;
	
	ТекстыИсключения = Новый Массив;
	
	Для Каждого ОписаниеМетода Из ПакетМетодов Цикл
		Ошибка = ОшибкиПакета[ОписаниеМетода.id]; // См. НоваяОшибкаВызоваМетодаСервиса
		Если Ошибка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если КонтекстДиагностики = Неопределено Тогда
			ВидОперации = ВидОперацииВызовМетодаСервиса(ОписаниеМетода);
			ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации, Ошибка.Текст);
		Иначе
			ТекстыИсключения.Добавить(ТекстИсключенияВызовМетодаСервиса(ОписаниеМетода, Ошибка.Текст));
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстыИсключения) Тогда
		ВызватьИсключение СтрСоединить(ТекстыИсключения, Символы.ПС);
	КонецЕсли;
	
	Возврат РезультатВыполненияПакета;
	
КонецФункции

// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
// 
// Возвращаемое значение:
//  См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиОтсутствуютДанныеАвторизации(УчетнаяЗапись) Экспорт
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ОтсутствуютДанныеАвторизацииВОблачномЭДО";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Отсутствуют данные авторизации'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'В учетной записи облачного ЭДО отсутствуют данные для авторизации
		|текущего пользователя в сервисе облачного ЭДО'");
	ВидОшибки.ОписаниеРешения = 
		НСтр("ru = '<a href = ""Авторизоваться"">Авторизоваться</a> и повторить операцию.'");
	ВидОшибки.ОбработчикиНажатия.Вставить("Авторизоваться",
		"ИнтеграцияОблачногоЭДОКлиент.АвторизоватьсяВОблачномЭДОИзОбработчикаНеисправностей");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ДополнительныеПараметры.Вставить("ИдентификаторОшибки", ВидОшибки.Идентификатор);
	ДополнительныеПараметры.Вставить("ЗаголовокПроблемы", ВидОшибки.ЗаголовокПроблемы);
	
	ВидОшибки.ПараметрыОбработчиков.Вставить("Авторизоваться", ДополнительныеПараметры);
	ВидОшибки.ВыводитьСсылкуНаСписокОшибок = Ложь;
	
	Возврат ВидОшибки;
	
КонецФункции

#КонецОбласти // ВыполнениеМетодовСервиса

#Область ВыполнениеМетодовСервисаАсинхронно

// Параметры:
//  ПараметрыВыполнения - См. ПараметрыВыполненияМетодаСервиса
//  ОписаниеМетода - См. ОписаниеМетодаСервиса
//  КонтекстДиагностики - Неопределено - В случае ошибки будет вызвано исключение.
//                      - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. РезультатВызоваСервисаАсинхронно
Функция ВыполнитьМетодСервисаАсинхронно(ПараметрыВыполнения, ОписаниеМетода, КонтекстДиагностики = Неопределено) Экспорт
	Возврат ВызватьСервисАсинхронно(ПараметрыВыполнения, ОписаниеМетода, КонтекстДиагностики);
КонецФункции

// Параметры:
//  ПараметрыВыполнения - См. ПараметрыВыполненияМетодаСервиса
//  ПакетМетодов - См. НовыйПакетМетодовСервиса
//  КонтекстДиагностики - Неопределено - В случае ошибки будет вызвано исключение.
//                      - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. РезультатВызоваСервисаАсинхронно
Функция ВыполнитьПакетМетодовСервисаАсинхронно(ПараметрыВыполнения, ПакетМетодов, КонтекстДиагностики = Неопределено) Экспорт
	Возврат ВызватьСервисАсинхронно(ПараметрыВыполнения, ПакетМетодов, КонтекстДиагностики);
КонецФункции

#КонецОбласти

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

#Область УчетныеЗаписиОблачногоЭДО

// Возвращаемое значение:
//  Структура:
//  * УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  * КлючПользователя - Неопределено,РегистрСведенийКлючЗаписи.ПользователиОблачногоЭДО
//  * КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция НовыйРезультатПодключенияОблачногоЭДО()
	Результат = Новый Структура;
	Результат.Вставить("УчетнаяЗапись", Справочники.УчетныеЗаписиОблачногоЭДО.ПустаяСсылка());
	Результат.Вставить("КлючПользователя", Неопределено);
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	Возврат Результат;
КонецФункции

// Параметры:
//  ПараметрыПользователя - см. РегистрыСведений.ПользователиОблачногоЭДО.НовыеПараметрыПользователя
//  НовоеПодключение - Булево
// 
// Возвращаемое значение:
//  См. НовыйРезультатПодключенияОблачногоЭДО
Функция ПодключитьОблачныйЭДО(ПараметрыПользователя, НовоеПодключение) Экспорт
	
	РезультатПодключения = НовыйРезультатПодключенияОблачногоЭДО();
	КонтекстДиагностики = РезультатПодключения.КонтекстДиагностики;
	
	Если НовоеПодключение Тогда
		УчетнаяЗапись = Справочники.УчетныеЗаписиОблачногоЭДО.Добавить(ПараметрыПользователя, КонтекстДиагностики);
	Иначе
		УчетнаяЗапись = Справочники.УчетныеЗаписиОблачногоЭДО.НайтиПоАдресуСервиса(ПараметрыПользователя.АдресСервиса);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат РезультатПодключения;
	КонецЕсли;
	
	РезультатПодключения.УчетнаяЗапись = УчетнаяЗапись;
	
	РезультатПодключения.КлючПользователя = РегистрыСведений.ПользователиОблачногоЭДО.Добавить(
		УчетнаяЗапись, ПараметрыПользователя);
	
	Возврат РезультатПодключения;
	
КонецФункции

// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  ПараметрыПользователя - См. ИнтеграцияОблачногоЭДО.ПодключитьОблачныйЭДО.ПараметрыПользователя
// 
// Возвращаемое значение:
//  Неопределено,РегистрСведенийКлючЗаписи.ПользователиОблачногоЭДО
Функция ПодключитьПользователяОблачногоЭДО(УчетнаяЗапись, ПараметрыПользователя) Экспорт
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РегистрыСведений.ПользователиОблачногоЭДО.Добавить(УчетнаяЗапись, ПараметрыПользователя);
	
КонецФункции

// Параметры:
//  ИдентификаторыЭДО - Массив из Строка
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ИдентификаторЭДО - Строка
//  * УчетнаяЗаписьОблачногоЭДО - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  * АдресСервиса - Строка
//  * АдресРесурса - Строка
Функция ОписанияСервисовУчетныхЗаписейЭДО(ИдентификаторыЭДО) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиОблачногоЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	НастройкиОблачногоЭДО.УчетнаяЗаписьОблачногоЭДО КАК УчетнаяЗаписьОблачногоЭДО,
		|	НастройкиОблачногоЭДО.УчетнаяЗаписьОблачногоЭДО.АдресСервиса КАК АдресСервиса
		|ИЗ
		|	РегистрСведений.НастройкиОблачногоЭДО КАК НастройкиОблачногоЭДО
		|ГДЕ
		|	НастройкиОблачногоЭДО.ИдентификаторЭДО В (&ИдентификаторыЭДО)";
	
	Запрос.УстановитьПараметр("ИдентификаторыЭДО", ИдентификаторыЭДО);
	
	ОписанияСервисов = Запрос.Выполнить().Выгрузить();
	
	ОписанияСервисов.Колонки.Добавить("АдресРесурса", Новый ОписаниеТипов("Строка"));
	Для Каждого ОписаниеСервиса Из ОписанияСервисов Цикл
		ОписаниеСервиса.АдресРесурса = АдресРесурса(ОписаниеСервиса.АдресСервиса);
	КонецЦикла;
	
	Возврат ОписанияСервисов;
	
КонецФункции

#КонецОбласти

#Область ВыполнениеМетодовСервиса

// Возвращаемое значение:
//  Структура:
//  * method - Строка
//  * params - Массив из Число
//           - Массив из Строка
//           - Массив из Булево
//           - Массив из Структура
//  * id - Число,Строка
Функция НовоеОписаниеМетодаСервиса()
	ОписаниеМетода = Новый Структура;
	ОписаниеМетода.Вставить("method", "");
	ОписаниеМетода.Вставить("params", Новый Массив);
	ОписаниеМетода.Вставить("id", 0);
	Возврат ОписаниеМетода;
КонецФункции

// Возвращаемое значение:
//  См. НовоеОписаниеМетодаСервиса
Функция ОписаниеМетодаСервисаПоСвойствам(ИмяМетода, Параметры = Неопределено, Идентификатор = 0)
	ОписаниеМетода = НовоеОписаниеМетодаСервиса();
	ОписаниеМетода.method = ИмяМетода;
	Если ЗначениеЗаполнено(Параметры) Тогда
		ОписаниеМетода.params = Параметры;
	КонецЕсли;
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		ОписаниеМетода.id = Идентификатор;
	КонецЕсли;
	Возврат ОписаниеМетода;
КонецФункции

// Параметры:
//  Параметр1 - см. ОписаниеМетодаСервиса.Параметр1
//  Параметр2 - см. ОписаниеМетодаСервиса.Параметр1
//  Параметр3 - см. ОписаниеМетодаСервиса.Параметр1
//  Параметр4 - см. ОписаниеМетодаСервиса.Параметр1
//  Параметр5 - см. ОписаниеМетодаСервиса.Параметр1
//  Параметр6 - см. ОписаниеМетодаСервиса.Параметр1
//  Параметр7 - см. ОписаниеМетодаСервиса.Параметр1
// 
// Возвращаемое значение:
//  Массив из см. ВыполнитьМетодСервиса.Параметр1
Функция СписокПараметровМетодаСервиса(Параметр1, Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7)
	
	ПереданныеПараметры = Новый Массив; // См. СписокПараметровМетодаСервиса
	ПереданныеПараметры.Добавить(Параметр7);
	ПереданныеПараметры.Добавить(Параметр6);
	ПереданныеПараметры.Добавить(Параметр5);
	ПереданныеПараметры.Добавить(Параметр4);
	ПереданныеПараметры.Добавить(Параметр3);
	ПереданныеПараметры.Добавить(Параметр2);
	ПереданныеПараметры.Добавить(Параметр1);
	
	Результат = Новый Массив; // См. СписокПараметровМетодаСервиса
	
	Для Каждого Параметр Из ПереданныеПараметры Цикл
		Если Результат.Количество() = 0 И Параметр = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Результат.Вставить(0, Параметр);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Ошибка - Неопределено
//           - См. НоваяОшибкаВызоваМетодаСервиса
//  * Результат - Неопределено - если возникла ошибка при выполнении.
//              - Произвольный - если метод выполнен успешно.
Функция НовыйРезультатВызоваМетодаСервиса()
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Неопределено);
	Результат.Вставить("Результат", Неопределено);
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Код - Число
//  * Текст - Строка
Функция НоваяОшибкаВызоваМетодаСервиса() Экспорт
	Ошибка = Новый Структура;
	Ошибка.Вставить("Код", 0);
	Ошибка.Вставить("Текст", "");
	Возврат Ошибка;
КонецФункции

// Параметры:
//  РезультатОтправки - см. ОтправитьВСервис
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. НовыйРезультатВызоваМетодаСервиса
//
Функция РезультатВызоваМетодаСервиса(РезультатОтправки, КонтекстДиагностики = Неопределено)
	
	ТекстОтвета = ТекстОтветаСервиса(РезультатОтправки, КонтекстДиагностики);
	
	Если Не ЗначениеЗаполнено(ТекстОтвета) Тогда
		Возврат НовыйРезультатВызоваМетодаСервиса();
	КонецЕсли;
	
	Попытка
		РезультатВыполненияВФорматеСервиса = РезультатВызоваМетодаВФорматеСервиса(ТекстОтвета); 
	Исключение
		КраткоеПредставление = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьНеизвестнуюОшибкуИлиИсключение(КонтекстДиагностики, РезультатОтправки.Событие, КраткоеПредставление,
			РезультатОтправки.УчетнаяЗапись);
		Возврат НовыйРезультатВызоваМетодаСервиса();
	КонецПопытки;
	
	РезультатВыполнения = РезультатВызоваМетодаИзФорматаСервиса(РезультатВыполненияВФорматеСервиса);
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Параметры:
//  РезультатОтправки - см. ОтправитьВСервис
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Число,Строка - Идентификатор запроса.
//  * Значение - См. НовыйРезультатВызоваМетодаСервиса
Функция РезультатВызоваПакетаМетодовСервиса(РезультатОтправки, КонтекстДиагностики = Неопределено)
	
	РезультатыПакета = Новый Соответствие; // См. РезультатВызоваПакетаМетодовСервиса
	
	ТекстОтвета = ТекстОтветаСервиса(РезультатОтправки, КонтекстДиагностики);
	
	Если Не ЗначениеЗаполнено(ТекстОтвета) Тогда
		Возврат РезультатыПакета;
	КонецЕсли;
	
	Попытка
		РезультатВыполненияПакетаВФорматеСервиса = РезультатВызоваПакетаМетодовВФорматеСервиса(ТекстОтвета); 
	Исключение
		КраткоеПредставление = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ДобавитьНеизвестнуюОшибкуИлиИсключение(КонтекстДиагностики, РезультатОтправки.Событие, КраткоеПредставление,
			РезультатОтправки.УчетнаяЗапись);
		Возврат НовыйРезультатВызоваМетодаСервиса();
	КонецПопытки;
	
	Для Каждого РезультатВыполненияВФорматеСервиса Из РезультатВыполненияПакетаВФорматеСервиса Цикл
		РезультатВыполнения = РезультатВызоваМетодаИзФорматаСервиса(РезультатВыполненияВФорматеСервиса);
		ИдентификаторЗапроса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыполненияВФорматеСервиса, "id");
		РезультатыПакета.Вставить(ИдентификаторЗапроса, РезультатВыполнения);
	КонецЦикла;
	
	Возврат РезультатыПакета;
	
КонецФункции

// Параметры:
//  ТекстОтвета - Строка
// 
// Возвращаемое значение:
//  Структура:
//  * result - Неопределено
//           - Произвольный
//  * error - Неопределено
//          - Структура:
//    ** code - Число
//    ** message - Строка
//  * id - Неопределено,Строка,Число
Функция РезультатВызоваМетодаВФорматеСервиса(ТекстОтвета)
	
	РезультатВыполненияМетода = ОбщегоНазначенияБЭД.JSONЗначение(ТекстОтвета); // см. РезультатВызоваМетодаВФорматеСервиса
	
	Возврат РезультатВыполненияМетода;
	
КонецФункции

// Параметры:
//  ТекстОтвета - Строка
// 
// Возвращаемое значение:
//  Массив из см. РезультатВызоваМетодаВФорматеСервиса
Функция РезультатВызоваПакетаМетодовВФорматеСервиса(ТекстОтвета)
	
	РезультатВыполнения = ОбщегоНазначенияБЭД.JSONЗначение(ТекстОтвета); // См. РезультатВызоваПакетаМетодовСервиса
	
	Если ТипЗнч(РезультатВыполнения) <> Тип("Массив") Тогда
		ВызватьИсключение НСтр("ru = 'Некорректный формат ответа.'");
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Параметры:
//  РезультатВыполненияВФорматеСервиса - См. РезультатВызоваМетодаВФорматеСервиса
// 
// Возвращаемое значение:
//  См. НовыйРезультатВызоваМетодаСервиса
Функция РезультатВызоваМетодаИзФорматаСервиса(РезультатВыполненияВФорматеСервиса)
	
	РезультатВыполнения = НовыйРезультатВызоваМетодаСервиса();
	
	ОшибкаВФорматеСевиса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыполненияВФорматеСервиса, "error");
	Если ЗначениеЗаполнено(ОшибкаВФорматеСевиса) Тогда
		Ошибка = НоваяОшибкаВызоваМетодаСервиса();
		Ошибка.Код = ОшибкаВФорматеСевиса.code;
		Ошибка.Текст = ОшибкаВФорматеСевиса.message;
		РезультатВыполнения.Ошибка = Ошибка;
	КонецЕсли;
	
	РезультатВыполнения.Результат = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		РезультатВыполненияВФорматеСервиса, "result");
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Параметры:
//  ПараметрыВыполнения - См. ПараметрыВыполненияМетодаСервиса
//  ОписаниеМетода - См. ОписаниеМетодаСервиса
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  См. РезультатВызоваМетодаСервиса
Функция ВызватьМетодСервиса(ПараметрыВыполнения, ОписаниеМетода, КонтекстДиагностики = Неопределено)
	
	ОписанияМетодов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеМетода);
	
	ПараметрыЗапроса = ПараметрыЗапросаВСервис(ПараметрыВыполнения, ОписанияМетодов);
	
	РезультатОтправки = ОтправитьВСервис(ПараметрыЗапроса, ОписанияМетодов);
	
	РезультатВызова = РезультатВызоваМетодаСервиса(РезультатОтправки, КонтекстДиагностики);
	
	Возврат РезультатВызова;
	
КонецФункции

// Параметры:
//  ПараметрыВыполнения - См. ПараметрыВыполненияМетодаСервиса
//  ПакетМетодов - См. НовыйПакетМетодовСервиса
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. РезультатВызоваПакетаМетодовСервиса
Функция ВызватьПакетМетодовСервиса(ПараметрыВыполнения, ПакетМетодов, КонтекстДиагностики = Неопределено)
	
	ПараметрыЗапроса = ПараметрыЗапросаВСервис(ПараметрыВыполнения, ПакетМетодов, Истина);
	
	РезультатОтправки = ОтправитьВСервис(ПараметрыЗапроса, ПакетМетодов);
	
	РезультатВызова = РезультатВызоваПакетаМетодовСервиса(РезультатОтправки, КонтекстДиагностики);
	
	Возврат РезультатВызова;
	
КонецФункции

#КонецОбласти

#Область ВыполнениеМетодовСервисаАсинхронно

// Параметры:
//  ПараметрыВыполнения - См. ПараметрыВыполненияМетодаСервиса
//  ОписанияМетодов - Массив из см. ОписаниеМетодаСервиса
//                  - см. ОписаниеМетодаСервиса
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  См. РезультатВызоваСервисаАсинхронно
Функция ВызватьСервисАсинхронно(ПараметрыВыполнения, ОписанияМетодов, КонтекстДиагностики = Неопределено)
	
	Если ТипЗнч(ОписанияМетодов) = Тип("Массив") Тогда
		ЭтоПакетМетодов = Истина
	Иначе
		ЭтоПакетМетодов = Ложь;
		ОписанияМетодов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписанияМетодов);
	КонецЕсли;
	
	ПараметрыЗапроса = ПараметрыЗапросаВСервис(ПараметрыВыполнения, ОписанияМетодов, ЭтоПакетМетодов);
	ПараметрыЗапроса.Асинхронно = Истина;
	
	РезультатОтправки = ОтправитьВСервис(ПараметрыЗапроса, ОписанияМетодов);
	
	РезультатВызова = РезультатВызоваСервисаАсинхронно(РезультатОтправки, КонтекстДиагностики);
	
	Возврат РезультатВызова;
	
КонецФункции

// Параметры:
//  РезультатОтправки - см. ОтправитьВСервис
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Структура:
//  * АдресРесурса     - Строка
//  * ПовторитьПосле - Число - количество секунд, через которое нужно повторить загрузку результата.
//
Функция РезультатВызоваСервисаАсинхронно(РезультатОтправки, КонтекстДиагностики = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("АдресРесурса", "");
	Результат.Вставить("ПовторитьПосле", 0);
	
	ОтветСервиса = РезультатОтправки.ОтветСервиса;
	
	АдресРесурса = ОтветСервиса.Заголовки["Location"]; // Строка
	Если ЗначениеЗаполнено(АдресРесурса) Тогда
		Результат.АдресРесурса = АдресРесурса;
	КонецЕсли;
	
	ПовторитьПосле = ОтветСервиса.Заголовки["Retry-After"]; // Строка
	Если ЗначениеЗаполнено(ПовторитьПосле) Тогда
		Результат.ПовторитьПосле = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПовторитьПосле);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//   Структура:
//   * УчетнаяЗаписьОблачногоЭДО - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//   * Статус          - Строка  - "Выполняется", если задание еще не завершилось;
//                                 "Выполнено", если задание было успешно выполнено;
//                                 "Ошибка", если задание завершено с ошибкой.
//   * АдресРесурса    - Строка
//   * ПовторитьПосле  - Число - если Статус = "Выполняется", то содержит количество секунд,
//                              через которое надо повторить запрос результата.
//   * АдресРезультата - Неопределено - если Статус = "Выполняется" или Статус = "Ошибка".
//                     - Строка - адрес временного хранилища.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
Функция НоваяАсинхроннаяОперация() Экспорт
	РезультатЗадания = Новый Структура;
	РезультатЗадания.Вставить("УчетнаяЗаписьОблачногоЭДО", Справочники.УчетныеЗаписиОблачногоЭДО.ПустаяСсылка());
	РезультатЗадания.Вставить("Статус", "Выполнено");
	РезультатЗадания.Вставить("АдресРесурса", "");
	РезультатЗадания.Вставить("ПовторитьПосле", 0);
	РезультатЗадания.Вставить("АдресРезультата", Неопределено);
	РезультатЗадания.Вставить("КраткоеПредставлениеОшибки", "");
	РезультатЗадания.Вставить("ПодробноеПредставлениеОшибки", "");
	Возврат РезультатЗадания;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * УчетнаяЗаписьОблачногоЭДО - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  * АдресРесурса - Строка
//  * АдресРезультата - Строка
Функция НовыеПараметрыПроверкиВыполненияАсинхроннойОперации() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("УчетнаяЗаписьОблачногоЭДО", Справочники.УчетныеЗаписиОблачногоЭДО.ПустаяСсылка());
	Параметры.Вставить("АдресРесурса", "");
	Параметры.Вставить("АдресРезультата", "");
	Возврат Параметры;
КонецФункции

// Параметры:
//  ПараметрыПроверокОпераций - Массив из Структура:
//  * УчетнаяЗаписьОблачногоЭДО - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  * АдресРесурса - Строка
//  * АдресРезультата - Строка
//
// Возвращаемое значение:
//  Массив из см. НоваяАсинхроннаяОперация
//
Функция ПроверитьВыполнениеАсинхронныхОпераций(ПараметрыПроверокОпераций) Экспорт
	
	АсинхронныеОперации = Новый Массив; // См. ПроверитьВыполнениеАсинхронныхОпераций
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	Для Каждого ПроверкаОперации Из ПараметрыПроверокОпераций Цикл
		АсинхроннаяОперация = ПроверитьВыполнениеАсинхроннойОперации(
			ПроверкаОперации.УчетныеЗаписиОблачногоЭДО, ПроверкаОперации.АдресРесурса, КонтекстДиагностики);
		АсинхронныеОперации.Добавить(АсинхроннаяОперация);
	КонецЦикла;
	
	Возврат АсинхронныеОперации;
	
КонецФункции

// Параметры:
//  УчетнаяЗаписьОблачногоЭДО - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  АдресРесурса - Строка
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. РезультатВызоваСервисаАсинхронно
//
Функция ПроверитьВыполнениеАсинхроннойОперации(УчетнаяЗаписьОблачногоЭДО, АдресРесурса, КонтекстДиагностики)
	
	ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
		УчетнаяЗаписьОблачногоЭДО, Пользователи.ТекущийПользователь());
	
	ПараметрыЗапроса = ПараметрыЗапросаВСервис(ПараметрыВыполнения);
	ПараметрыЗапроса.АдресРесурса = АдресРесурса;
	
	РезультатОтправки = ОтправитьВСервис(ПараметрыЗапроса);
	
	РезультатВызова = РезультатВызоваСервисаАсинхронно(РезультатОтправки, КонтекстДиагностики);
	
	Возврат РезультатВызова;
	
КонецФункции

#КонецОбласти

#Область ЗапросВСервис

// Отправляет запрос в сервис и возвращает ответ.
// 
// Параметры:
//  ПараметрыЗапроса - см. ПараметрыЗапросаВСервис
//  ОписанияМетодов - Неопределено
//                  - Массив из см. ОписаниеМетодаСервиса
// 
// Возвращаемое значение:
//  Структура:
//  * УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  * Событие - Строка
//  * Ошибка - Неопределено
//           - см. ОбработкаНеисправностейБЭД.НоваяОшибка
//  * ОтветСервиса - Неопределено
//                 - HTTPОтвет
Функция ОтправитьВСервис(ПараметрыЗапроса, ОписанияМетодов = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("УчетнаяЗапись", ПараметрыЗапроса.УчетнаяЗапись);
	Результат.Вставить("Событие", ПараметрыЗапроса.Событие);
	Результат.Вставить("Ошибка", Неопределено);
	Результат.Вставить("ОтветСервиса", Неопределено);
	
	СтрокаАвторизации = ПараметрыЗапроса.СтрокаАвторизации;
	
	Если Не ЗначениеЗаполнено(СтрокаАвторизации) Тогда
		Результат.ЕстьОшибка = Истина;
		Результат.ТекстОшибки = СтрШаблон(НСтр("ru='Ошибка аутентификации в сервисе %1'"),
			ПараметрыЗапроса.АдресРесурса);
		Возврат Результат;
	КонецЕсли;
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыЗапроса.АдресРесурса);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", СтрокаАвторизации);
	Заголовки.Вставить("Content-Type", ТипКонтента());
	
	Если ПараметрыЗапроса.Асинхронно Тогда
		Заголовки.Вставить("Prefer", "respond-async");
	КонецЕсли;
	
	ИнформацияОПриложении = ИнтеграцияОблачногоЭДОПовтИсп.ИнформацияОПриложении();
	Заголовки.Вставить("x-app-id", ИнформацияОПриложении.Идентификатор);
	Заголовки.Вставить("x-app-name", ИнформацияОПриложении.ИмяКонфигурации);
	Заголовки.Вставить("x-app-version", ИнформацияОПриложении.ВерсияКонфигурации);
	Заголовки.Вставить("x-app-user", ИнформацияОПриложении.ИмяПользователя);
	Заголовки.Вставить("x-platform-version", ИнформацияОПриложении.ВерсияПлатформы);
	
	Соединение = СоединениеССервисом(СтруктураURI);
	ЗапросКСервису = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, Заголовки);
	
	ЗаполнитьОписанияМетодовВЗапросКСервису(ЗапросКСервису, ОписанияМетодов, ПараметрыЗапроса);
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Попытка
		Результат.ОтветСервиса = ИнтернетСоединениеБЭД.ВызватьHTTPМетодРасширенный(
			ПараметрыЗапроса.МетодЗапроса, ЗапросКСервису, Соединение, ПараметрыЗапроса.Событие);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		КраткоеПредставление = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставление = СтрШаблон(
			НСтр("ru='Не удалось выполнить метод сервиса %1 по причине:'"), ПараметрыЗапроса.Событие)
			+ Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ИнтеграцияОблачногоЭДО;
		ВидОшибки = ИнтернетСоединениеБЭДКлиентСервер.ВидОшибкиИнтернетСоединение();
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ПараметрыЗапроса.Событие,
			ВидОшибки, ПодробноеПредставление, КраткоеПредставление);
		Ошибка.СсылкаНаОбъект = ПараметрыЗапроса.УчетнаяЗапись;
		Результат.Ошибка = Ошибка;
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(Ошибка.ВидОперации, Подсистема,
			Ошибка.ПодробноеПредставлениеОшибки,,Ошибка.СсылкаНаОбъект);
	КонецПопытки;
	
	ЗаписатьВызовСервисаВЖурналРегистрации(ПараметрыЗапроса.УчетнаяЗапись,
		Соединение, ЗапросКСервису, ПараметрыЗапроса.МетодЗапроса, Результат.ОтветСервиса, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИспользоватьМетодGET - Булево
// 
// Возвращаемое значение:
//  Строка - Метод http запроса в сервис.
Функция МетодЗапросаВСервис(ИспользоватьМетодGET = Ложь)
	Возврат ?(ИспользоватьМетодGET, "GET", "POST");
КонецФункции

// Возвращает параметры запроса по указанной организации.
// 
// Параметры:
//  ПараметрыВыполнения - См. ПараметрыВыполненияМетодаСервиса
//  ОписанияМетодов - Массив из см. ОписаниеМетодаСервиса
//  ЭтоПакетМетодов - Булево
// 
// Возвращаемое значение:
//  Структура:
//  * АдресРесурса - Строка
//  * СтрокаАвторизации - Строка
//  * Асинхронно - Булево
//  * МетодЗапроса - Строка
//  * Событие - Строка
//  * ЭтоПакетМетодов - Булево
//  * УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
// 
Функция ПараметрыЗапросаВСервис(ПараметрыВыполнения, ОписанияМетодов = Неопределено, ЭтоПакетМетодов = Ложь)
	
	Параметры = Новый Структура;
	Параметры.Вставить("АдресРесурса", "");
	Параметры.Вставить("СтрокаАвторизации", "");
	Параметры.Вставить("Асинхронно", Ложь);
	Параметры.Вставить("МетодЗапроса", "");
	Параметры.Вставить("Событие", "");
	Параметры.Вставить("ЭтоПакетМетодов", ЭтоПакетМетодов);
	Параметры.Вставить("УчетнаяЗапись", ПараметрыВыполнения.УчетнаяЗапись);
	
	Параметры.МетодЗапроса = МетодЗапросаВСервис(ПараметрыВыполнения.ИспользоватьМетодGET);
	Параметры.АдресРесурса = АдресРесурса(ПараметрыВыполнения.АдресСервиса);
	Параметры.СтрокаАвторизации = СтрокаАвторизации(ПараметрыВыполнения.ТокенАвторизации);
	Если ЗначениеЗаполнено(ОписанияМетодов) Тогда
		Параметры.Событие = СобытиеЗапросаПоОписаниямМетодов(ОписанияМетодов);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
// 
// Возвращаемое значение:
//  Строка
Функция СобытиеЗапросаПоОписаниямМетодов(ОписанияМетодов)
	
	НаборСтрок = Новый Массив; // Массив из Строка
	
	Для Каждого ОписаниеМетода Из ОписанияМетодов Цикл
		ИмяМетода = ОписаниеМетода.method;
		Позиция = СтрНайти(ИмяМетода, ".", НаправлениеПоиска.СКонца);
		Если Позиция > 0 Тогда
			Позиция = Позиция + 1;
		КонецЕсли;
		НаборСтрок.Добавить(Сред(ИмяМетода, Позиция));
	КонецЦикла;
	
	Возврат СтрСоединить(НаборСтрок, ", ");
	
КонецФункции

// Возвращает соединение с сервисом.
// 
// Параметры:
//  СтруктураURI - см. ОбщегоНазначенияКлиентСервер.СтруктураURI
// 
// Возвращаемое значение:
//  HTTPСоединение
Функция СоединениеССервисом(СтруктураURI)
	
	Таймаут = 30;
 
	Если СтруктураURI.Схема = "https" Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема);
	
	HTTPСоединение = Новый HTTPСоединение(
		СтруктураURI.Хост,
		СтруктураURI.Порт,
		СтруктураURI.Логин,
		СтруктураURI.Пароль,
		Прокси,
		Таймаут,
		ЗащищенноеСоединение);
	
	Возврат HTTPСоединение;
	
КонецФункции

// Параметры:
//  АдресСервиса - Строка
// 
// Возвращаемое значение:
//  См. СоединениеССервисом
Функция СоединениеССервисомПоАдресу(АдресСервиса) Экспорт
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресСервиса);
	Возврат СоединениеССервисом(СтруктураURI);
КонецФункции

// Параметры:
//  АдресСервиса - Строка
// 
// Возвращаемое значение:
//  Строка
Функция АдресРесурса(АдресСервиса)
	Возврат АдресСервиса + АдресПрограммногоИнтерфейса();
КонецФункции

// Возвращаемое значение:
//  Строка
Функция АдресПрограммногоИнтерфейса() Экспорт
	Возврат "/hs/edo/rpc";
КонецФункции

// Параметры:
//  ЗапросКСервису - HTTPЗапрос
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  ПараметрыЗапроса - См. ПараметрыЗапросаВСервис
//
Процедура ЗаполнитьОписанияМетодовВЗапросКСервису(ЗапросКСервису, ОписанияМетодов, ПараметрыЗапроса)
	
	Если Не ЗначениеЗаполнено(ОписанияМетодов) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗапроса.МетодЗапроса = "GET" И Не ПараметрыЗапроса.ЭтоПакетМетодов Тогда
		ОписаниеМетодаСтрокой = ОписаниеМетодаВСтрокуПараметровЗапроса(ОписанияМетодов[0]);
		ЗапросКСервису.АдресРесурса = ЗапросКСервису.АдресРесурса + "?" + ОписаниеМетодаСтрокой;
	Иначе
		ДанныеТела = ?(ПараметрыЗапроса.ЭтоПакетМетодов, ОписанияМетодов, ОписанияМетодов[0]);
		ДанныеТелаСтрокой = ОбщегоНазначенияБЭД.JSONСтрока(ДанныеТела);
		ЗапросКСервису.УстановитьТелоИзСтроки(ДанныеТелаСтрокой);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ОписаниеМетода - См. ОписаниеМетодаСервиса
// 
// Возвращаемое значение:
//  Строка
Функция ОписаниеМетодаВСтрокуПараметровЗапроса(ОписаниеМетода)
	ПараметрыМетодаСтрокойJSON = ОбщегоНазначенияБЭД.JSONСтрока(ОписаниеМетода.params);
	Возврат СтрШаблон("method=%1&params=%2&id=%3", 
		КодироватьСтроку(ОписаниеМетода.method, СпособКодированияСтроки.КодировкаURL),
		КодироватьСтроку(ПараметрыМетодаСтрокойJSON, СпособКодированияСтроки.КодировкаURL),
		ОписаниеМетода.id);
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТипКонтента()
	Возврат "vnd.1cedo.rpc+json;version=" + ВерсияПрограммногоИнтерфейса();
КонецФункции

// Параметры:
//  ТокенАвторизации - См. НовыйТокенАвторизации
// 
// Возвращаемое значение:
//  Строка
Функция СтрокаАвторизации(ТокенАвторизации)
	Возврат СтрШаблон("%1 %2", ТокенАвторизации.ТипТокена, ТокенАвторизации.ТокенДоступа);
КонецФункции

// Параметры:
//  РезультатОтправки - См. ОтправитьВСервис
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Строка
Функция ТекстОтветаСервиса(РезультатОтправки, КонтекстДиагностики = Неопределено)
	
	Если РезультатОтправки.Ошибка <> Неопределено Тогда
		ДобавитьОшибкуИлиИсключение(КонтекстДиагностики, РезультатОтправки.Ошибка, Ложь);
		Возврат "";
	КонецЕсли;
	
	ОтветСервиса = РезультатОтправки.ОтветСервиса;
	Если ОтветСервиса = Неопределено Тогда
		ДобавитьНеизвестнуюОшибкуИлиИсключение(КонтекстДиагностики,
			РезультатОтправки.Событие, НСтр("ru='Не удалось получить ответ от сервиса'"),
			РезультатОтправки.УчетнаяЗапись);
		Возврат "";
	КонецЕсли;
	
	ТекстОтвета = ОтветСервиса.ПолучитьТелоКакСтроку();
	
	Если ОтветСервиса.КодСостояния = 200 Тогда
		Возврат ТекстОтвета;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОтвета) Тогда
		ТекстОшибки = ТекстОтвета;
	ИначеЕсли ОтветСервиса.КодСостояния = 401 Тогда 
		ТекстОшибки = НСтр("ru = 'Неверный логин или пароль'");
	Иначе
		ТекстОшибки = ИнтернетСоединениеБЭД.РасшифровкаКодаСостоянияHTTP(ОтветСервиса.КодСостояния);
	КонецЕсли;
	
	ДобавитьНеизвестнуюОшибкуИлиИсключение(КонтекстДиагностики, РезультатОтправки.Событие, ТекстОшибки,
		РезультатОтправки.УчетнаяЗапись);
	
	Возврат "";
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИмяКонфигурации - Строка
//  * ВерсияКонфигурации - Строка
//  * ВерсияПлатформы - Строка
//  * Идентификатор - Строка
//  * ИмяПользователя - Строка
Функция ИнформацияОПриложении() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Информация = Новый Структура;
	Информация.Вставить("ИмяКонфигурации" , Метаданные.Имя);
	Информация.Вставить("ВерсияКонфигурации", Метаданные.Версия);
	Информация.Вставить("ВерсияПлатформы", СистемнаяИнформация.ВерсияПриложения);
	Информация.Вставить("Идентификатор", ОбщегоНазначенияБЭД.ИдентификаторПриложения());
	Информация.Вставить("ИмяПользователя", Строка(Пользователи.АвторизованныйПользователь()));
	Возврат Информация;
	
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ВерсияПрограммногоИнтерфейса()
	Возврат "1";
КонецФункции

#КонецОбласти

#Область ОбработкаОшибок

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ВидОперации - Строка
//  ТекстОшибки - Строка
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
Процедура ДобавитьНеизвестнуюОшибкуИлиИсключение(КонтекстДиагностики, ВидОперации, ТекстОшибки, УчетнаяЗапись)
	
	Если КонтекстДиагностики = Неопределено Тогда
		ВызватьИсключение ВидОперации + Символы.ПС + ТекстОшибки;
	Иначе
		ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации, ТекстОшибки,,УчетнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ВидОперации - Строка
//  КраткоеПредставление - Строка
//  ПодробноеПредставление - Строка
//  УчетнаяЗаписьОблачногоЭДО - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
Процедура ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации, КраткоеПредставление,
	ПодробноеПредставление = "", УчетнаяЗаписьОблачногоЭДО = Неопределено) Экспорт
	
	Если ПустаяСтрока(ПодробноеПредставление) Тогда
		ПодробноеПредставление = КраткоеПредставление;
	КонецЕсли;
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
		ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
		КраткоеПредставление, ПодробноеПредставление);
	
	Если ЗначениеЗаполнено(УчетнаяЗаписьОблачногоЭДО) Тогда
		Ошибка.СсылкаНаОбъект = УчетнаяЗаписьОблачногоЭДО;
	КонецЕсли;
	
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ИнтеграцияОблачногоЭДО);
	
КонецПроцедуры

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  Ошибка - см. ОбработкаНеисправностейБЭД.НоваяОшибка
//  ЗаписыватьВЖурналРегистрации - Булево
Процедура ДобавитьОшибкуИлиИсключение(КонтекстДиагностики, Ошибка, ЗаписыватьВЖурналРегистрации = Истина)
	
	Если КонтекстДиагностики = Неопределено Тогда
		ВызватьИсключение Ошибка.ВидОперации + Символы.ПС + Ошибка.КраткоеПредставлениеОшибки;
	Иначе
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ИнтеграцияОблачногоЭДО, ЗаписыватьВЖурналРегистрации);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ОписаниеМетода - См. НовоеОписаниеМетодаСервиса
// 
// Возвращаемое значение:
//  Строка
Функция ВидОперацииВызовМетодаСервиса(ОписаниеМетода)
	Возврат СтрШаблон(НСтр("ru = 'Вызов метода %1'"), ОписаниеМетода.method);
КонецФункции

// Параметры:
//  ОписаниеМетода - См. НовоеОписаниеМетодаСервиса
//  ТекстОшибки - Строка
// 
// Возвращаемое значение:
//  Строка
Функция ТекстИсключенияВызовМетодаСервиса(ОписаниеМетода, ТекстОшибки)
	Возврат СтрШаблон(НСтр("ru = 'Ошибка при вызове метода %1: %2'"), ОписаниеМетода.method, ТекстОшибки);
КонецФункции

#КонецОбласти

#Область ЛогированиеHTTP

// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  Соединение - HTTPСоединение
//  Запрос - HTTPЗапрос
//  Метод - Строка
//  Ответ - Неопределено,HTTPОтвет
//  ВремяНачала - Число
Процедура ЗаписатьВызовСервисаВЖурналРегистрации(УчетнаяЗапись, Соединение, Запрос, Метод, Ответ, ВремяНачала)
	
	ПредставлениеОтвета = ПредставлениеHTTPОтвета(Ответ, ВремяНачала);
	
	ПредставлениеЗапроса = ПредставлениеHTTPЗапроса(Соединение, Запрос, Метод);
	
	Комментарий = СтрШаблон(
		"%1
		|
		|%2", ПредставлениеЗапроса, ПредставлениеОтвета);
	
	Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ИнтеграцияОблачногоЭДО;
	
	Если Ответ = Неопределено
		Или Ответ.КодСостояния >= 400 Тогда
		Уровень = УровеньЖурналаРегистрации.Ошибка;
	Иначе
		Уровень = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	ПараметрыЗаписи = ОбщегоНазначенияБЭД.НовыеПараметрыЗаписиВЖурналРегистрации();
	ПараметрыЗаписи.Данные = УчетнаяЗапись;
	ПараметрыЗаписи.ОбъектМетаданных = УчетнаяЗапись.Метаданные();
	
	ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(Комментарий, Подсистема, Уровень, ПараметрыЗаписи);
	
КонецПроцедуры

// Параметры:
//  Соединение - HTTPСоединение
//  Запрос - HTTPЗапрос
//  Метод - Строка
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеHTTPЗапроса(Соединение, Запрос, Метод)
	
	ЧастиПредставления = Новый Массив; // Массив из Строка
	
	СтрокаURLЗапроса = ИнтернетСоединениеБЭД.СтрокаURLЗапроса(Соединение, Запрос, Метод);
	ЧастиПредставления.Добавить(СтрокаURLЗапроса);
	
	ПредставлениеЗаголовков = ИнтернетСоединениеБЭД.ПредставлениеЗаголовковHTTPСписком(Запрос.Заголовки);
	ЧастиПредставления.Добавить(ПредставлениеЗаголовков);
	
	Тело = Запрос.ПолучитьТелоКакСтроку();
	Если ЗначениеЗаполнено(Тело) Тогда
		ЧастиПредставления.Добавить("");
		ЧастиПредставления.Добавить(Тело);
	КонецЕсли;
	
	Возврат СтрСоединить(ЧастиПредставления, Символы.ПС);
	
КонецФункции

// Параметры:
//  Ответ - Неопределено,HTTPОтвет
//  ВремяНачала - Число
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеHTTPОтвета(Ответ, ВремяНачала)
	
	Длительность = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала)/1000;
	
	ПредставлениеСостояния = ?(Ответ = Неопределено, "error",
		ИнтернетСоединениеБЭД.РасшифровкаКодаСостоянияHTTP(Ответ.КодСостояния));
	
	ОсновныеСвойства = СтрШаблон("# %1 - %2.%3 (%4 sec)",
		ПредставлениеСостояния,
		Формат(ТекущаяДатаСеанса(), "ДФ='dd.MM.yyyy HH:mm:ss'"),
		Формат(ВремяНачала % 1000, "ЧЦ=3; ЧВН="),
		Формат(Длительность, "ЧДЦ=3; ЧН=0"));
	
	Если Ответ = Неопределено Тогда
		Возврат ОсновныеСвойства;
	КонецЕсли;
	
	ЧастиПредставления = Новый Массив; // Массив из Строка
	ЧастиПредставления.Добавить(ОсновныеСвойства);
	
	ПредставлениеЗаголовков = ИнтернетСоединениеБЭД.ПредставлениеЗаголовковHTTPСписком(Ответ.Заголовки);
	ЧастиПредставления.Добавить(ПредставлениеЗаголовков);
	
	Тело = Ответ.ПолучитьТелоКакСтроку();
	Если ЗначениеЗаполнено(Тело) Тогда
		ЧастиПредставления.Добавить("");
		ЧастиПредставления.Добавить(Тело);
	КонецЕсли;
	
	Возврат СтрСоединить(ЧастиПредставления, Символы.ПС);
	
КонецФункции

#КонецОбласти

#КонецОбласти // СлужебныеПроцедурыИФункции
