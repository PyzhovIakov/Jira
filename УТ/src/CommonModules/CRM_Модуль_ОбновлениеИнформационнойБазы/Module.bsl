////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы Модуля CRM
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ИдентификаторИнтернетПоддержки - Строка - уникальное имя программы в сервисах Интернет-поддержки.
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя	= "CRMМодуль";
	Описание.Версия = "3.1.32.15";
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	
КонецПроцедуры

// Переопределяет параметры загружаемых и устанавливаемых исправлений (патчей).
//
// Параметры:
//  Настройки - Структура:
//    * ОтключитьНапоминания - Булево - Истина, если необходимо отключить создание задачи по включению автоматической
//        загрузки исправлений в подсистеме БСП.ТекущиеДела и не показывать оповещение пользователю при старте системы,
//        если подсистема БСП.ТекущиеДела отсутствует в конфигурации.
//    * Подсистемы - Массив из Структура - список программ, исправления которых необходимо загружать и устанавливать:
//        ** ИмяПодсистемы - Строка - имя подсистемы, например, "ИнтернетПоддержкиПользователей".
//        ** ИдентификаторИнтернетПоддержки - Строка - имя программы в сервисах Интернет-поддержки.
//        ** Версия - Строка - версия программы в формате из 4-х цифр, например, "2.1.3.1".
//
//@skip-warning
Процедура ПриОпределенииНастроекЗагрузкиИсправлений(Настройки) Экспорт

	Настройки.Подсистемы.Добавить(
	Новый Структура(
	"ИмяПодсистемы, ИдентификаторИнтернетПоддержки, Версия",
	?(CRM_ОбщегоНазначенияПовтИсп.ЭтоУХ(), "CRMМодульERP_УХ", "CRMМодуль"),
	?(CRM_ОбщегоНазначенияПовтИсп.ЭтоУХ(), "CRMModuleERP_UH", "CRMModuleERP"),
	"3.1.32.15")); // Версия Модуля CRM (см.в процедуре ПриДобавленииПодсистемы() данного модуля).

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример:
//  Для добавления своей процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Оперативно";
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ПервыйЗапуск";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d1695497-2033-4afb-b7eb-b3a0c58450cd");
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура = "Обработки.CRM_РегистрацияОбъектовВУниверсальномЖурналеДокументов.ЗарегистрироватьОбъектыФоновоеЗадание";
	Обработчик.Комментарий = НСтр("ru='Регистрация объектов в журнале документов'");
	Обработчик.ЧитаемыеОбъекты      = "РегистрСведений.CRM_ЖурналДокументов";
	Обработчик.ИзменяемыеОбъекты    = "РегистрСведений.CRM_ЖурналДокументов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9985167c-149c-472a-9bb8-068e475adf22");
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "CRM_ОбновлениеИнформационнойБазы.ПустаяПроцедураЗаполненияДанныхОбновления";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ЗаполнитьРегистрПоискаПоКонтрагентам";
	Обработчик.Комментарий = НСтр("ru='Заполнение служебной информации для поиска по контрагентам'");
	Обработчик.ЧитаемыеОбъекты      = "РегистрСведений.CRM_ДанныеДляПоискаКонтактов";
	Обработчик.ИзменяемыеОбъекты    = "РегистрСведений.CRM_ДанныеДляПоискаКонтактов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b354fdee-5d61-421f-9d4a-7e09e42b0c98");
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "CRM_Модуль_ОбновлениеИнформационнойБазы.ПерезаписьКлиентыКонтакты_ЗарегистрироватьДанныеКОбработке";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ПерезаписатьКлиентыКонтакты";
	Обработчик.Комментарий = НСтр("ru='Перезапись всех клиентов и контактных лиц для заполнения данных о портрете и контактной информации'");
	Обработчик.ЧитаемыеОбъекты      = "Справочник.Партнеры, Справочник.КонтактныеЛицаПартнеров";
	Обработчик.ИзменяемыеОбъекты    = "Справочник.Партнеры, Справочник.КонтактныеЛицаПартнеров";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("495f4024-86ed-4bf1-b053-c5997fb3d963");
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "CRM_Модуль_ОбновлениеИнформационнойБазы.КоммерческоеПредложение_ЗарегистрироватьДанныеКОбработке";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.КонвертироватьКоммерческиеПредложения";
	Обработчик.Комментарий = НСтр("ru='Выполнение конвертации коммерческих предложений'");
	Обработчик.ЧитаемыеОбъекты      = "Документ.КоммерческоеПредложениеКлиенту";
	Обработчик.ИзменяемыеОбъекты    = "Документ.КоммерческоеПредложениеКлиенту";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e788b848-e39b-44b0-8035-1ca39770db4a");
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "CRM_Модуль_ОбновлениеИнформационнойБазы.ОбъектыЗадачПользователей_ЗарегистрироватьДанныеКОбработке";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ЗаписатьОбъектыЗадачПользователей";
	Обработчик.Комментарий = НСтр("ru='Создание записей по задачам в регистре сведений CRM_ЗадачиПользователей'");
	Обработчик.ЧитаемыеОбъекты      = "Задача.ЗадачаИсполнителя";
	Обработчик.ИзменяемыеОбъекты    = "РегистрСведений.CRM_ЗадачиПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d742aff2-3996-4757-94e7-c4d73f05599c");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "CRM_Модуль_ОбновлениеИнформационнойБазы.Заметки_ЗарегистрироватьДанныеКОбработке";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ЗаполнениеПризнакаЗаметкаДляЛенты";
	Обработчик.Комментарий = НСтр("ru = 'Обработка заметок для отображения в ленте событий.'");
	Обработчик.ЧитаемыеОбъекты      = "Справочник.Заметки";
	Обработчик.ИзменяемыеОбъекты    = "Справочник.Заметки";
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	Приоритет = Обработчик.ПриоритетыВыполнения.Добавить();
	Приоритет.Порядок = "До";
	Приоритет.Идентификатор = Новый УникальныйИдентификатор("d9a2265d-19ce-467b-bb83-3c9d1ccb759e");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d9a2265d-19ce-467b-bb83-3c9d1ccb759e");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ЗарегистрироватьЗаметкиВHTML";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбработатьЗаметкиВHTML";
	Обработчик.Комментарий = НСтр("ru = 'Конвертация заметок в HTML'");
	Обработчик.ЧитаемыеОбъекты = "Справочник.Заметки";
	Обработчик.ИзменяемыеОбъекты = "Справочник.Заметки";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "3.0.1.1";
	Обработчик.Процедура = "CRM_УправлениеСвойствамиСлужебный.СоздатьПредопределенныеНаборыСвойств";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьПроверитьПВХОбъектыЖурнала";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_УсловияСрабатыванияТриггеров.СоздатьПредопределенныеДействия";
	Обработчик.Комментарий = НСтр("ru = 'Обновление предопределенных условий триггеров.'");
 	 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_ДействияТриггеров.СоздатьПредопределенныеДействия";
	Обработчик.Комментарий = НСтр("ru = 'Обновление предопределенных действий триггеров.'");
	
	// Обработчики, выполняемые при переходе на определенную версию
	
	// 3.1.28.12
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.12";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("52540a58-bab6-4d86-8a0d-ed5754aa9cda");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_ОбновлениеИнформационнойБазы.ЗарегистрироватьЗаметкиВHTML";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбработатьЗаметкиВHTML";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Конвертация заметок в HTML'");
	Обработчик.ЧитаемыеОбъекты = "Справочник.Заметки";
	Обработчик.ИзменяемыеОбъекты = "Справочник.Заметки";
	
	// 3.1.28.14
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.14";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("10f0b6fd-b820-4720-b839-b88ddb30ca49");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"CRM_Модуль_МетодыМодулейМенеджеровДокументов.ЗарегистрироватьДанныеКОбработкеКоммерческоеПредложениеКлиенту";
	Обработчик.Процедура =
		"CRM_Модуль_МетодыМодулейМенеджеровДокументов.ОбработатьДанныеКоммерческоеПредложениеКлиенту";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита ""Автор"" в Коммерческих предложениях клиенту.'");
	Обработчик.ЧитаемыеОбъекты =   "Документ.КоммерческоеПредложениеКлиенту";
	Обработчик.ИзменяемыеОбъекты = "Документ.КоммерческоеПредложениеКлиенту";
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры // ПередОбновлениемИнформационнойБазы()

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПослеОбновленияИнформационнойБазы.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсияИБ, Знач ТекущаяВерсияИБ,
	Знач ИтерацииОбновления, ВыводитьОписаниеОбновлений, Знач МонопольныйРежим) Экспорт
	
КонецПроцедуры // ПослеОбновленияИнформационнойБазы()

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры // ПриПодготовкеМакетаОписанияОбновлений()

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры // ПриОпределенииРежимаОбновленияДанных()

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
#Область ТиповыеРешения
	
#КонецОбласти

#Область ОбъединенныеРешения

	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей_CRM_2";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ПереходСОбъединенногоРешения";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеПредприятием_CRM";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ПереходСОбъединенногоРешения";

	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "КомплекснаяАвтоматизация_CRM";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ПереходСОбъединенногоРешения";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей_CRM_2";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ПереносПерсональныхНастроекПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеПредприятием_CRM";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ПереносПерсональныхНастроекПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "КомплекснаяАвтоматизация_CRM";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ПереносПерсональныхНастроекПользователей";
	
#КонецОбласти

КонецПроцедуры // ПриДобавленииОбработчиковПереходаСДругойПрограммы()

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("ОчиститьСведенияОПредыдущейКонфигурации") Тогда
		Параметры.ОчиститьСведенияОПредыдущейКонфигурации = Ложь;
	КонецЕсли;
	
	// Снимем флаг "ЭтоОсновнаяКонфигурация" с подсистемы "УправлениеТорговлей" (ПредыдущееИмяКонфигурации)
	ОбновлениеИнформационнойБазы.УстановитьВерсиюИБ(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Ложь);
	
КонецПроцедуры // ПриЗавершенииПереходаСДругойПрограммы()

// Получить режим обновления данных информационной базы
//
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьРежимОбновленияДанных() Экспорт
	Возврат ОбновлениеИнформационнойБазыСлужебный.РежимОбновленияДанных();
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПервыйЗапуск

// Процедура заполняет пустую ИБ.
//
// Параметры:
//	Нет.
//
Процедура ПервыйЗапуск() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		УстановитьВариантПоставки();
		
		// установим доступность новых групп видов КИ
		УправлениеКонтактнойИнформациейСлужебный.УстановитьЗначениеПризнакаИспользуется();
		
		Если Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить() Тогда 
			Константы.CRM_ИспользоватьБизнесПроцессы.Установить(Истина);
		КонецЕсли;
		
		// Для всех учетных записей электронной почты заполним или обновим папки электронных писем по умолчанию
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			CRM_УправлениеЭлектроннойПочтой.СоздатьПредопределенныеПапкиЭлектронныхПисемДляУчетнойЗаписи(Выборка.Ссылка);
		КонецЦикла;
		
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбновлениеИБ",
			"ПоследняяВерсияОтображенияИзмененийСистемы", Неопределено, , ПользовательИБ.Имя);
			
		CRM_ПользователиПереопределяемый.CRM_ЗаполнитьНастройкиВсехПользователейПоУмолчанию();
		
		ЗаполнитьРеквизитыДляОбмена();
		
		// Устанавливает значения свойства Используется в значение Истина у дополнительных свойств
		УправлениеСвойствамиСлужебный.УстановитьЗначениеПризнакаИспользуется();
		
		// Перезаполнение карты маршрута Поручение из макета
		ПерезаполнитьКартуМаршрутаПоручение();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры // ПервыйЗапуск()

// Установка варианта поставки
//
Процедура УстановитьВариантПоставки()
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоУТиВСК() Или ВРег(Метаданные.Имя) = ВРег("УправлениеТорговлей") Тогда
		Константы.CRM_ОсновнойВариантПоставки.Установить(Перечисления.CRM_ВариантыПоставки.ПРОФ);
	Иначе
		Константы.CRM_ОсновнойВариантПоставки.Установить(Перечисления.CRM_ВариантыПоставки.КОРП);
	КонецЕсли;
	
КонецПроцедуры // УстановитьВариантПоставки()

// Процедура перехода с ОбъединенногоРешения 2
//
// Параметры:
//	Нет.
//
Процедура ПереходСОбъединенногоРешения() Экспорт
	
	НачатьТранзакцию();
	
	УстановитьВариантПоставки();
	
	// Установка констант
	Константы.CRM_СрокАктуальностиНапоминанийПоУмолчанию.Установить(30);
	
	Если Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить() Тогда 
		Константы.CRM_ИспользоватьБизнесПроцессы.Установить(Истина);
	КонецЕсли;
	
	// установим доступность новых групп видов КИ
	УправлениеКонтактнойИнформациейСлужебный.УстановитьЗначениеПризнакаИспользуется();
	
	
	// данный блок должен быть в самом конце
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбновлениеИБ",
		"ПоследняяВерсияОтображенияИзмененийСистемы", Неопределено, , ПользовательИБ.Имя);
		
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ПереходСОбъединенногоРешения()

// Процедура переносит настройки, не совпавшие по идентификаторам
//
// Параметры:
//	Нет.
//
Процедура ПереносПерсональныхНастроекПользователей() Экспорт
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_НастройкиПользователей.Пользователь,
	               |	CRM_НастройкиПользователей.Настройка,
	               |	CRM_НастройкиПользователей.Значение,
	               |	ПВХ_НастройкиПользователей.ИмяПредопределенныхДанных
	               |ИЗ
	               |	РегистрСведений.CRM_НастройкиПользователей КАК CRM_НастройкиПользователей
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.CRM_НастройкиПользователей КАК ПВХ_НастройкиПользователей
	               |		ПО CRM_НастройкиПользователей.Настройка = ПВХ_НастройкиПользователей.Ссылка";
				   
	СтруктураПереносаНастроек = Новый Структура;
	
	СтруктураПереносаНастроек.Вставить("Удалить_сфпПривязатьВнутреннийНомер",			  ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпПривязатьВнутреннийНомер);
	СтруктураПереносаНастроек.Вставить("Удалить_сфпЛогинНаСерверСофтФон",				  ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпЛогинНаСерверСофтФон);
	СтруктураПереносаНастроек.Вставить("Удалить_сфпПарольНаСерверСофтФон",				  ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпПарольНаСерверСофтФон);
	СтруктураПереносаНастроек.Вставить("Удалить_ПодставлятьОсновнойПроектВПоручения",	  ПланыВидовХарактеристик.CRM_НастройкиПользователей.ПодставлятьОсновнойПроектВПоручения);

	ВыборкаНастроекПользователя = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаНастроекПользователя.Следующий() Цикл
		
		ЭлементДляЗамены = Неопределено;
		
		Если Не ПустаяСтрока(ВыборкаНастроекПользователя.ИмяПредопределенныхДанных)
			И СтруктураПереносаНастроек.Свойство(ВыборкаНастроекПользователя.ИмяПредопределенныхДанных, ЭлементДляЗамены) Тогда
			
			МенеджерЗаписи = РегистрыСведений.CRM_НастройкиПользователей.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаНастроекПользователя);
			
			МенеджерЗаписи.Прочитать();
			
			Если МенеджерЗаписи.Выбран() Тогда
			
				МенеджерЗаписи.Настройка = ЭлементДляЗамены;
				
				МенеджерЗаписи.Записать();
			
			КонецЕсли;		
		
		КонецЕсли; 
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ПереходСДругойПрограммы()

Процедура КонвертироватьКоммерческиеПредложения(Параметры) Экспорт
	
	ОбработкаЗавершена = Истина;
	
	ВыбранныеДанные = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, "Документ.КоммерческоеПредложениеКлиенту");
	
	МассивСсылок = Новый Массив;
	
	Пока ВыбранныеДанные.Следующий() Цикл
		МассивСсылок.Добавить(ВыбранныеДанные.Ссылка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КоммерческоеПредложениеКлиентуТовары.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК КоммерческоеПредложениеКлиентуТовары
		|ГДЕ
		|	КоммерческоеПредложениеКлиентуТовары.Ссылка В (&МассивСсылок)";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		КоммерческоеПредложениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Для каждого СтрокаТовары Из КоммерческоеПредложениеОбъект.Товары Цикл
			
			СтрокаТовары.CRM_ИДВарианта = 1;
			СтрокаТовары.CRM_ИмяВарианта = "";
			СтрокаТовары.CRM_Утвержден = Ложь;
			СтрокаТовары.CRM_ЭтоРазделитель = Ложь;
			
			Если Пустаястрока(СтрокаТовары.CRM_Содержание) Тогда
				СтрокаТовары.CRM_Содержание = CRM_Модуль_РаботаСФормамиСервер.СформироватьСодержаниеДляПечати(СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика);
			КонецЕсли;
			
		КонецЦикла;
		
		КомментарииНоваяСтрока = КоммерческоеПредложениеОбъект.CRM_КомментарииВариантов.Добавить();
		
		КомментарииНоваяСтрока.ИДВарианта = 1;
		КомментарииНоваяСтрока.КомментарийВарианта = "";
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(КоммерческоеПредложениеОбъект);
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры// КонвертироватьКоммерческиеПредложения()

Процедура КоммерческоеПредложение_ЗарегистрироватьДанныеКОбработке(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	КоммерческоеПредложениеКлиентуТовары.Ссылка КАК Ссылка,
	               |	КоммерческоеПредложениеКлиентуТовары.CRM_ИДВарианта КАК CRM_ИДВарианта
	               |ИЗ
	               |	Документ.КоммерческоеПредложениеКлиенту.Товары КАК КоммерческоеПредложениеКлиентуТовары
	               |ГДЕ
	               |	КоммерческоеПредложениеКлиентуТовары.CRM_ИДВарианта <> 0";
	
	Если Запрос.Выполнить().Пустой() Тогда
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Новый Массив);
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КоммерческоеПредложениеКлиентуТовары.Ссылка КАК Ссылка,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоммерческоеПредложениеКлиентуТовары.НомерСтроки) КАК КоличествоСтрок
	               |ИЗ
	               |	Документ.КоммерческоеПредложениеКлиенту.Товары КАК КоммерческоеПредложениеКлиентуТовары
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КоммерческоеПредложениеКлиентуТовары.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КоммерческоеПредложениеКлиентуТовары.Ссылка.Дата УБЫВ";
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивСсылок);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДляОбмена(Параметры = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.CRM_ИмяПредопределенногоЭлемента = """"";
	ТабДанных = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из ТабДанных Цикл
		Об = Строка.Ссылка.ПолучитьОбъект();
		Если Об.Предопределенный Тогда
			Об.CRM_ИмяПредопределенногоЭлемента = Об.ИмяПредопределенныхДанных;
		Иначе
			Об.CRM_ИмяПредопределенногоЭлемента = Строка(Строка.Ссылка.УникальныйИдентификатор());
		КонецЕсли;	
		Об.Записать();
	КонецЦикла;	
КонецПроцедуры

// Процедура создает записи по задачам в регистре сведений CRM_ЗадачиПользователей
//
// Параметры:
//	Нет.
//
Процедура ЗаписатьОбъектыЗадачПользователей(Параметры) Экспорт
	
	ОбработкаЗавершена = Истина;
	
	ВыбранныеДанные = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, "Задача.ЗадачаИсполнителя");
	
	Пока ВыбранныеДанные.Следующий() Цикл
		ОбъектЗадачи = ВыбранныеДанные.Ссылка.ПолучитьОбъект();
		Попытка
			ПараметрОтказ = Ложь;
			CRM_ОбщегоНазначенияСервер.ПриЗаписиОбъектаЗадачПользователя(ОбъектЗадачи, ПараметрОтказ);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектЗадачи);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры // ЗаписатьОбъектыЗадачПользователей()

Процедура ОбъектыЗадачПользователей_ЗарегистрироватьДанныеКОбработке(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗадачаИсполнителя.ДатаНачала УБЫВ";
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивСсылок);
	
КонецПроцедуры

// Процедура перезаписывает всех клиентов и контактных лиц для заполнения данных о портрете и контактной информации
//
// Параметры:
//	Нет.
//
Процедура ПерезаписатьКлиентыКонтакты(Параметры) Экспорт
	
	ОбработкаЗавершена = Истина;
	
	ВыбранныеДанные = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, "Справочник.Партнеры");
	
	Пока ВыбранныеДанные.Следующий() Цикл
		тОбъект = ВыбранныеДанные.Ссылка.ПолучитьОбъект();
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(тОбъект);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	ВыбранныеДанные = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, "Справочник.КонтактныеЛицаПартнеров");
	
	Пока ВыбранныеДанные.Следующий() Цикл
		тОбъект = ВыбранныеДанные.Ссылка.ПолучитьОбъект();
		Если тОбъект.РолиКонтактногоЛица.Количество() > 0 Тогда
			тОбъект.CRM_РольКонтактногоЛица = тОбъект.РолиКонтактногоЛица[0].РольКонтактногоЛица;
		КонецЕсли;
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(тОбъект);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры // ПерезаписатьКлиентыКонтакты()

Процедура ПерезаписьКлиентыКонтакты_ЗарегистрироватьДанныеКОбработке(Параметры) Экспорт
	
	МассивСсылокКЛ = Новый Массив;
	Выборка = Справочники.КонтактныеЛицаПартнеров.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСсылокКЛ.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивСсылокКЛ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Партнеры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|
		|УПОРЯДОЧИТЬ ПО
		|	Партнеры.ДатаРегистрации УБЫВ";
	
	МассивСсылокПартнеры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивСсылокПартнеры);
	
КонецПроцедуры

Процедура Заметки_ЗарегистрироватьДанныеКОбработке(Параметры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Заметки.Ссылка КАК Ссылка,
	|	Заметки.ДатаИзменения КАК ДатаИзменения
	|ПОМЕСТИТЬ втЗаметки
	|ИЗ
	|	Справочник.Заметки КАК Заметки
	|ГДЕ
	|	Заметки.Предмет ССЫЛКА Справочник.Партнеры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Заметки.Ссылка,
	|	Заметки.ДатаИзменения
	|ИЗ
	|	Справочник.Заметки КАК Заметки
	|ГДЕ
	|	Заметки.Предмет ССЫЛКА Справочник.КонтактныеЛицаПартнеров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Заметки.Ссылка,
	|	Заметки.ДатаИзменения
	|ИЗ
	|	Справочник.Заметки КАК Заметки
	|ГДЕ
	|	Заметки.Предмет ССЫЛКА Документ.CRM_Интерес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗаметки.Ссылка КАК Ссылка
	|ИЗ
	|	втЗаметки КАК втЗаметки
	|
	|УПОРЯДОЧИТЬ ПО
	|	втЗаметки.ДатаИзменения УБЫВ");
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивСсылок);
	
КонецПроцедуры

Процедура ЗаполнениеПризнакаЗаметкаДляЛенты(Параметры) Экспорт
	
	ОбработкаЗавершена = Истина;
	
	ВыбранныеДанные = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, "Справочник.Заметки");
	
	Пока ВыбранныеДанные.Следующий() Цикл
		ЗаметкаОбъект = ВыбранныеДанные.Ссылка.ПолучитьОбъект();
		ЗаметкаОбъект.CRM_ЗаметкаЛенты = Истина;
		ЗаметкаОбъект.ОбменДанными.Загрузка = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЗаметкаОбъект);
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

// Перезаполнение карты маршрута Поручение из макета.
//
Процедура ПерезаполнитьКартуМаршрутаПоручение() Экспорт
	
	Если Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() Тогда Возврат; КонецЕсли;
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанные = Справочники.CRM_КартыМаршрутов.ПолучитьМакет("Поручение");
	Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда ДвоичныеДанные.Записать(ИмяФайла); КонецЕсли;
	CRM_БизнесПроцессыСервер.ЗаполнитьКартуМаршрутаПоМакету(Справочники.CRM_КартыМаршрутов.Поручение, ИмяФайла);
	
КонецПроцедуры

Процедура ЗаполнитьРегистрПоискаПоКонтрагентам(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления";   
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		CRM_ПоискКонтактов.ОбновитьДанныеДляПоиска(Выборка.Ссылка);
	КонецЦикла;  
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#КонецОбласти // СлужебныеПроцедурыИФункции

