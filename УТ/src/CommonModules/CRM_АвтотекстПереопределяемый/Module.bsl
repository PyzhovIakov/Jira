
////////////////////////////////////////////////////////////////////////////////
// CRM автотекст переопределяемый
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура формирует список автотекста.
//
// Параметры:
//  ТаблицаАвтотекста	 - ТаблицаЗначений	 - Таблица автотекста.
//  ИдентификаторОбъекта - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Назначение автотекста.
//  ИмяТабличнойЧасти    - Строка            - Имя ТЧ.
//  АвтотекстТемы		 - Булево			 - Автотекст темы.
//  ТолькоТегиПисьма	 - Булево			 - Только теги письма.
//  НачальныйНомер		 - Число			 - Начальный номер.
//  Префикс				 - Строак			 - Префикс.
//
Процедура СформироватьСписокАвтотекста(ТаблицаАвтотекста, ИдентификаторОбъекта = Неопределено,
	 ИмяТабличнойЧасти = "", АвтотекстТемы = Ложь, ТолькоТегиПисьма = Ложь, НачальныйНомер = 0,
	 Префикс = "") Экспорт
	Если ИдентификаторОбъекта = Неопределено Тогда
		НовыйТэг = ТаблицаАвтотекста.Добавить();
		НовыйТэг.Тэг					= "%ВРЕМЯ%";
		НовыйТэг.ИмяКоманды				= ?(АвтотекстТемы, "Тема", "") + "ВставитьВремя";
		НовыйТэг.ЗаголовокКоманды		= "%ВРЕМЯ%";
		НовыйТэг = ТаблицаАвтотекста.Добавить();
		НовыйТэг.Тэг					= "%ДАТА%";
		НовыйТэг.ИмяКоманды				= ?(АвтотекстТемы, "Тема", "") + "ВставитьДату";
		НовыйТэг.ЗаголовокКоманды		= "%ДАТА%";
		НовыйТэг = ТаблицаАвтотекста.Добавить();
		НовыйТэг.Тэг					= "%ДАТА_ВРЕМЯ%";
		НовыйТэг.ИмяКоманды				= ?(АвтотекстТемы, "Тема", "") + "ВставитьДату_Время";
		НовыйТэг.ЗаголовокКоманды		= "%ДАТА_ВРЕМЯ%";
		НовыйТэг = ТаблицаАвтотекста.Добавить();
		НовыйТэг.Тэг					= "%УВАЖАЕМЫЙ/УВАЖАЕМАЯ%";
		НовыйТэг.ИмяКоманды				= ?(АвтотекстТемы, "Тема", "") + "УважаемыйУважаемая";
		НовыйТэг.ЗаголовокКоманды		= "%УВАЖАЕМЫЙ/УВАЖАЕМАЯ%";
		НовыйТэг = ТаблицаАвтотекста.Добавить();
		НовыйТэг.Тэг					= "%ПОЛУЧАТЕЛЬ%";
		НовыйТэг.ИмяКоманды				= ?(АвтотекстТемы, "Тема", "") + "ВставитьПолучатель";
		НовыйТэг.ЗаголовокКоманды		= "%ПОЛУЧАТЕЛЬ%";
		НовыйТэг = ТаблицаАвтотекста.Добавить();
		НовыйТэг.Тэг					= "%ПОЛУЧАТЕЛЬ_ИМЯ%";
		НовыйТэг.ИмяКоманды				= ?(АвтотекстТемы, "Тема", "") + "ВставитьПолучатель_Имя";
		НовыйТэг.ЗаголовокКоманды		= "%ПОЛУЧАТЕЛЬ_ИМЯ%";
		НовыйТэг = ТаблицаАвтотекста.Добавить();
		НовыйТэг.Тэг					= "%ПОЛУЧАТЕЛЬ_ИМЯ_ОТЧЕСТВО%";
		НовыйТэг.ИмяКоманды				= ?(АвтотекстТемы, "Тема", "") + "ВставитьПолучатель_Имя_Отчество";
		НовыйТэг.ЗаголовокКоманды		= "%ПОЛУЧАТЕЛЬ_ИМЯ_ОТЧЕСТВО%";
		НовыйТэг = ТаблицаАвтотекста.Добавить();
		НовыйТэг.Тэг					= "%ПОЛУЧАТЕЛЬ_ФАМИЛИЯ_И_О%";
		НовыйТэг.ИмяКоманды				= ?(АвтотекстТемы, "Тема", "") + "ВставитьПолучатель_Фамилия_И_О";
		НовыйТэг.ЗаголовокКоманды		= "%ПОЛУЧАТЕЛЬ_ФАМИЛИЯ_И_О%";
		НовыйТэг = ТаблицаАвтотекста.Добавить();
		НовыйТэг.Тэг					= "%УВАЖАЕМОМУ_ПОЛУЧАТЕЛЮ_ФАМИЛИЯ_ИМЯ_ОТЧЕСТВО%";
		НовыйТэг.ИмяКоманды				= ?(АвтотекстТемы, "Тема", "") + "ВставитьПолучатель_Фамилия_И_О_1";
		НовыйТэг.ЗаголовокКоманды		= "%УВАЖАЕМОМУ_ПОЛУЧАТЕЛЮ_ФАМИЛИЯ_ИМЯ_ОТЧЕСТВО%";
	Иначе
		
		ДобавлятьТэгLAT = (ТаблицаАвтотекста.Колонки.Найти("ТэгLAT") <> Неопределено);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИдентификаторОбъекта", ИдентификаторОбъекта);
		Запрос.УстановитьПараметр("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
		Запрос.Текст = "ВЫБРАТЬ
		               |	CRM_ШаблоныАвтотекста.Действие КАК Действие,
		               |	CRM_ШаблоныАвтотекста.ПредставлениеШаблона КАК Представление,
		               |	CRM_ШаблоныАвтотекста.ПредставлениеLAT КАК ПредставлениеLAT,
		               |	CRM_ШаблоныАвтотекста.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		               |	CRM_ШаблоныАвтотекста.Наименование КАК Наименование
		               |ИЗ
		               |	Справочник.CRM_ШаблоныАвтотекста КАК CRM_ШаблоныАвтотекста
		               |ГДЕ
		               |	CRM_ШаблоныАвтотекста.ИдентификаторОбъекта В(&ИдентификаторОбъекта)
		               |	И НЕ CRM_ШаблоныАвтотекста.ПометкаУдаления
		               |	И НЕ CRM_ШаблоныАвтотекста.ЭтоГруппа
		               |	И CRM_ШаблоныАвтотекста.ИмяТабличнойЧасти = &ИмяТабличнойЧасти ";
		
		Если ТолькоТегиПисьма Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И CRM_ШаблоныАвтотекста.Родитель <> ЗНАЧЕНИЕ(Справочник.CRM_ШаблоныАвтотекста.Анкетирование)";
		КонецЕсли;				
		Запрос.Текст = Запрос.Текст + "
		               |УПОРЯДОЧИТЬ ПО
		               |	Представление";
		Если ТипЗнч(ИдентификаторОбъекта) = Тип("Массив") Тогда
			Запрос.Текст = Запрос.Текст + "
		               |ИТОГИ
		               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИдентификаторОбъекта)
		               |ПО
		               |	Представление";
		КонецЕсли;		

		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Ном = ?(НачальныйНомер > 0, НачальныйНомер, ТаблицаАвтотекста.Количество());
		Пока Выборка.Следующий() Цикл
			Если ТипЗнч(ИдентификаторОбъекта) = Тип("Массив")
				 И Выборка.ИдентификаторОбъекта < ИдентификаторОбъекта.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			НовыйТэг = ТаблицаАвтотекста.Добавить();
			Если Префикс = "" Тогда
				Тег = "%" + Выборка.Представление + "%";
			Иначе
				Тег = "%[" + Префикс + "].[" + Выборка.Представление + "]%";
			КонецЕсли;
			НовыйТэг.Тэг					= Тег;
			НовыйТэг.ИмяКоманды				= ?(АвтотекстТемы, "Тема", "") + Префикс + "ВставитьТэг_" + Строка(Ном);
			ВыборкаПодробно = Выборка.Выбрать();
			Если ВыборкаПодробно.Следующий() Тогда
				НовыйТэг.ЗаголовокКоманды = ВыборкаПодробно.Наименование + ?(Префикс = "", "", " (" + Префикс + ")");
			Иначе
				НовыйТэг.ЗаголовокКоманды = Выборка.Наименование + ?(Префикс = "", "", " (" + Префикс + ")");
			КонецЕсли;
			НовыйТэг.Действие				= Выборка.Действие;
			Если ДобавлятьТэгLAT Тогда
				НовыйТэг.ТэгLAT					= "{{" + Выборка.ПредставлениеLAT + "}}";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // СформироватьСписокАвтотекста()

// Процедура заполняет командную панель форматированного документа.
//
// Параметры:
//  Форма									 - УправляемаяФорма - Форма, на которой заполняется командная панель.
//  ДобавлятьВКонтекстноеМеню				 - Булево - Признак, что нужно добавить пункты в контекстное меню.
//  КоличествоДополнительныхКомандныхПанелей - Число  - Количество дополнительных командных панелей.
//  АвтотекстТемы		 					 - Булево - Автотекст темы.
//  ИмяТаблицыАвтотекста		 			 - Строка - Имя таблицы автотекста.
//  ИмяЭлементаАвтоТекст		 			 - Строка - Имя элемента автотекста.
//
Процедура ЗаполнитьКоманднуюПанельФорматированногоДокумента(Форма, ДобавлятьВКонтекстноеМеню = Ложь,
	 КоличествоДополнительныхКомандныхПанелей = 0,
											АвтотекстТемы = Ложь, ИмяТаблицыАвтотекста = "ТаблицаАвтотекста", ИмяЭлементаАвтоТекст = "АвтоТекст") Экспорт
											
	ПрефиксЭлементов = ?(ИмяЭлементаАвтоТекст = "АвтоТекст" ИЛИ АвтотекстТемы, "", ИмяЭлементаАвтоТекст);										
	Для Каждого СтрокаАвтотекста Из Форма[ИмяТаблицыАвтотекста] Цикл
		
		Если Лев(СтрокаАвтотекста.ИмяКоманды, 4) = "Тема" Тогда
			Если НЕ АвтотекстТемы Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если АвтотекстТемы Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НоваяКомандаФормы = Форма.Команды.Добавить(ПрефиксЭлементов + СтрокаАвтотекста.ИмяКоманды);
		НоваяКомандаФормы.Заголовок					= СтрокаАвтотекста.ЗаголовокКоманды;
		НоваяКомандаФормы.Действие					= "Подключаемый_ВставитьТэг";
		НоваяКомандаФормы.ИзменяетСохраняемыеДанные	= Истина;
		
		НовыйПунктМеню = Форма.Элементы.Вставить(НоваяКомандаФормы.Имя, Тип("КнопкаФормы"),
			 ?(АвтотекстТемы, Форма.Элементы.АвтоТекстТемы,
			 Форма.Элементы[ИмяЭлементаАвтоТекст]));
		НовыйПунктМеню.ИмяКоманды			= НоваяКомандаФормы.Имя;
		НовыйПунктМеню.Отображение			= ОтображениеКнопки.Текст;
		
		Если ДобавлятьВКонтекстноеМеню Тогда
			КонтекстноеМенюКонтекст = Форма.Элементы.Вставить(НоваяКомандаФормы.Имя + "Контекст",
				 Тип("КнопкаФормы"), Форма.Элементы[ИмяЭлементаАвтоТекст + "Контекст"]);	
			КонтекстноеМенюКонтекст.ИмяКоманды	= НоваяКомандаФормы.Имя;
			КонтекстноеМенюКонтекст.Отображение	= ОтображениеКнопки.Текст;
		КонецЕсли;
		
		Для Ном = 1 По КоличествоДополнительныхКомандныхПанелей Цикл
			НовыйПунктМеню = Форма.Элементы.Вставить(НоваяКомандаФормы.Имя + "_" + Строка(Ном),
				 Тип("КнопкаФормы"), Форма.Элементы["АвтоТекст_" + Строка(Ном)]);
			НовыйПунктМеню.ИмяКоманды			= НоваяКомандаФормы.Имя;
			НовыйПунктМеню.Отображение			= ОтображениеКнопки.Текст;
			
			Если ДобавлятьВКонтекстноеМеню Тогда
				КонтекстноеМенюКонтекст = Форма.Элементы.Вставить(НоваяКомандаФормы.Имя + "Контекст_" 
					+ Строка(Ном), Тип("КнопкаФормы"), Форма.Элементы["АвтоТекстКонтекст_" + Строка(Ном)]);
				КонтекстноеМенюКонтекст.ИмяКоманды	= НоваяКомандаФормы.Имя;
				КонтекстноеМенюКонтекст.Отображение	= ОтображениеКнопки.Текст;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	НоваяГруппаМеню = Форма.Элементы.Вставить(ПрефиксЭлементов + "МенюАвтотекстаГруппа" + ?(АвтотекстТемы, "Тема", ""),
		Тип("ГруппаФормы"), ?(АвтотекстТемы, Форма.Элементы.АвтоТекстТемы, Форма.Элементы[ИмяЭлементаАвтоТекст]));
	НоваяГруппаМеню.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	НоваяКомандаФормы = Форма.Команды.Добавить(ПрефиксЭлементов + "МенюАвтотекстаСоздатьТег" 
		+ ?(АвтотекстТемы, "Тема", ""));
	НоваяКомандаФормы.Заголовок					= НСтр("ru = 'Добавить автотекст...'");
	НоваяКомандаФормы.Действие					= "Подключаемый_СоздатьТег";
	НоваяКомандаФормы.ИзменяетСохраняемыеДанные	= Истина;
		
	НовыйПунктМеню = Форма.Элементы.Вставить(ПрефиксЭлементов + "МенюАвтотекстаСоздатьТег" + ?(АвтотекстТемы, "Тема", ""),
		Тип("КнопкаФормы"), НоваяГруппаМеню);
	НовыйПунктМеню.ИмяКоманды			= НоваяКомандаФормы.Имя;
	НовыйПунктМеню.Отображение			= ОтображениеКнопки.Текст;
	
	Если ДобавлятьВКонтекстноеМеню Тогда
		НоваяГруппаМеню = Форма.Элементы.Вставить(ПрефиксЭлементов + "МенюАвтотекстаГруппаКонтекст" 
			+ ?(АвтотекстТемы, "Тема", ""),
			Тип("ГруппаФормы"), Форма.Элементы[ИмяЭлементаАвтоТекст + "Контекст"]);	
		НоваяГруппаМеню.Вид = ВидГруппыФормы.ГруппаКнопок;
		
		НовыйПунктМеню = Форма.Элементы.Вставить(ПрефиксЭлементов + "МенюАвтотекстаСоздатьТегКонтекст" 
			+ ?(АвтотекстТемы, "Тема", ""),
			Тип("КнопкаФормы"), НоваяГруппаМеню);
		НовыйПунктМеню.ИмяКоманды			= НоваяКомандаФормы.Имя;
		НовыйПунктМеню.Отображение			= ОтображениеКнопки.Текст;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКоманднуюПанельФорматированногоДокумента()

// Процедура заполняет командную панель сообщениями СМС.
//
// Параметры:
//  Форма	 - 	ФормаКлиентскогоПриложения - Форма, на которой заполняется командная панель.
//
Процедура ЗаполнитьКоманднуюПанельСообщенияСМС(Форма) Экспорт
	Для Каждого СтрокаАвтотекста Из Форма.ТаблицаАвтотекста Цикл
		ИмяКоманды = СтрокаАвтотекста.ИмяКоманды + "_СМС";
		НоваяКомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		НоваяКомандаФормы.Заголовок					= СтрокаАвтотекста.ЗаголовокКоманды;
		НоваяКомандаФормы.Действие					= "Подключаемый_ВставитьТэгСМС";
		НоваяКомандаФормы.ИзменяетСохраняемыеДанные	= Истина;
		НовыйПунктМеню = Форма.Элементы.Вставить(ИмяКоманды, Тип("КнопкаФормы"), Форма.Элементы.АвтоТекстСМС);
		НовыйПунктМеню.ИмяКоманды			= ИмяКоманды;
		НовыйПунктМеню.Отображение			= ОтображениеКнопки.Текст;
	КонецЦикла;
КонецПроцедуры // ЗаполнитьКоманднуюПанельСообщенияСМС()

// Функция получает значение тэга.
//
// Параметры:
//  СтрокаАвтотекста - СтрокаТаблицыЗначений - Строка таблицы автотекста.
//  СтрокаТаблицы	 - СтрокаТаблицыЗначений - Строка таблицы значений.
// 
// Возвращаемое значение:
//  Строка - Значение тэга.
//
Функция ПолучитьЗначениеТэга(СтрокаАвтотекста, СтрокаТаблицы) Экспорт
	
	Тэг = СтрокаАвтотекста.Тэг;
	
	Возврат ПолучитьРезультатДействия(СтрокаАвтотекста.Действие, Тэг, СтрокаТаблицы);
	
КонецФункции // ПолучитьЗначениеТэга()

// Функция получает значение тэга СМС.
//
// Параметры:
//  СтрокаАвтотекста - СтрокаТаблицыЗначений - Строка таблицы автотекста.
//  Объект			 - СправочникСсылка	 - Получатель СМС
// 
// Возвращаемое значение:
//  Строка - Значение тэга
//
Функция ПолучитьЗначениеТэгаСМС(СтрокаАвтотекста, Объект) Экспорт
	
	Тэг = СтрокаАвтотекста.Тэг;
	Возврат ПолучитьРезультатДействия(СтрокаАвтотекста.Действие, Тэг, Объект);

КонецФункции // ПолучитьЗначениеТэгаСМС()

// Функция проверяет выполнение действия.
//
// Параметры:
//  Действие					 - Строка - Строка действия 
//  СсылкаНаОбъект				 - СправочникОбъект	 - Ссылка на объект.
//  ИмяТабличнойЧасти			 - Строка - Имя табличной части. 
//  ТабличнаяЧастьПредставление	 - Строка - Имя табличной части.
// 
// Возвращаемое значение:
//  Булево - Результат выполнения действия. 
//
Функция ПроверитьВыполнениеДействия(Действие, СсылкаНаОбъект, ИмяТабличнойЧасти, ТабличнаяЧастьПредставление) Экспорт
	
	Результат = "";
	
	Если ИмяТабличнойЧасти <> "" Тогда
		
		Если СсылкаНаОбъект[ИмяТабличнойЧасти].Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru='В выбранном объекте для проверки в табличной части %ТабличнаяЧасть% отсутствуют данные.';
				|en='In the selected object for check in tabular section %ТабличнаяЧасть% there are no data.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТабличнаяЧасть%", ТабличнаяЧастьПредставление);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту")
			 И ИмяТабличнойЧасти = "Товары" Тогда
			Возврат Истина;
		Иначе
			// BSLLS:UseLessForEach-off
			// BSLLS:UnusedLocalVariable-off
			Для Каждого Объект Из СсылкаНаОбъект[ИмяТабличнойЧасти] Цикл
			// BSLLS:UnusedLocalVariable-on
				Попытка
					Выполнить(Действие);
				Исключение
					ТекстСообщения = НСтр("ru='Ошибка выполнения действия:';en='Run error of action:'") + Символы.ПС 
						+ ОписаниеОшибки();
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Возврат Ложь;
				КонецПопытки;
			КонецЦикла;
			// BSLLS:UseLessForEach-on
			
			ТекстСообщения = НСтр("ru='Действие выполнено успешно.';en='Action are fulfill successfully.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Истина;
		КонецЕсли;
		
	Иначе
		
		Объект = СсылкаНаОбъект;
		Попытка
			Результат = "";
			Выполнить(Действие);
			//ТекстСообщения = НСтр("ru='Действие выполнено успешно.';en='Action are fulfill successfully.'");
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Результат';en='Result'") + ":" + Символы.ПС + Результат);
		Исключение
			ТекстСообщения = НСтр("ru='Ошибка выполнения действия:';en='Run error of action:'") + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

// Функция получает структуру тэгов шаблона.
//
// Параметры:
//  СсылкаНаОбъект			 - ДокументСсылка - Ссылка на объект.
//  ИмяТабличнойЧасти		 - Строка - Имя табличной части. 
//  ДополнительныеПараметры	 - Структура - Дополнительные параметры получения структуры тэгов. 
//  Префикс					 - Строка - Префикс. 
// 
// Возвращаемое значение:
//  Структура - Структура тэгов и их значения. 
//
Функция ПолучитьСтруктуруТеговШаблона(СсылкаНаОбъект, ИмяТабличнойЧасти = "",
	 ДополнительныеПараметры = Неопределено,
	 Префикс = "") Экспорт
	
	Если ИмяТабличнойЧасти = "" Тогда 
		ИдентификаторОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(СсылкаНаОбъект));
	Иначе
		ИдентификаторОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(СтрЗаменить(СтрЗаменить(Строка(СсылкаНаОбъект),
			 "ТабличнаяЧастьСтрока", ""), "." + ИмяТабличнойЧасти,
			 ""));
	КонецЕсли;
	
	СтруктураТегов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", ИдентификаторОбъекта);
	Запрос.УстановитьПараметр("ИмяТабличнойЧасти"	, ИмяТабличнойЧасти);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	CRM_ШаблоныАвтотекста.ПредставлениеШаблона КАК ПредставлениеШаблона,
	|	CRM_ШаблоныАвтотекста.Действие КАК Действие
	|ИЗ
	|	Справочник.CRM_ШаблоныАвтотекста КАК CRM_ШаблоныАвтотекста
	|ГДЕ
	|	НЕ CRM_ШаблоныАвтотекста.ЭтоГруппа
	|	И НЕ CRM_ШаблоныАвтотекста.ПометкаУдаления
	|	И CRM_ШаблоныАвтотекста.ИдентификаторОбъекта = &ИдентификаторОбъекта
	|	И CRM_ШаблоныАвтотекста.ИмяТабличнойЧасти = &ИмяТабличнойЧасти";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Префикс = "" Тогда
			Тег = Выборка.ПредставлениеШаблона;
		Иначе
			Тег = "[" + Префикс + "].[" + Выборка.ПредставлениеШаблона + "]";
		КонецЕсли;
		ЗначениеТега = ПолучитьРезультатДействия(Выборка.Действие, Тег, СсылкаНаОбъект, ДополнительныеПараметры);
		
		СтруктураТегов.Вставить(Тег, ЗначениеТега);
		
	КонецЦикла;
	
	Возврат СтруктураТегов;
	
КонецФункции

// Заполняет автотекст по шаблону.
//
// Параметры:
//  Шаблон - Строка - Шаблон к заполнению.
//  ОбъектЗаполнения - ДокументСсылка - Ссылка на заполняемый объект.
//  ИмяТабличнойЧасти - Строка - Имя табличной части.
//  Префикс - Строка - Префикс.
//
Процедура ЗаполнитьАвтотекстШаблона(Шаблон, ОбъектЗаполнения, ИмяТабличнойЧасти = "", Префикс = "") Экспорт
	
	СтруктураТегов = ПолучитьСтруктуруТеговШаблона(ОбъектЗаполнения, ИмяТабличнойЧасти, , Префикс);
	Для каждого Тег Из СтруктураТегов Цикл
		Шаблон = СтрЗаменить(Шаблон, "%" + Тег.Ключ + "%", Тег.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет контактную информация объекта.
//
// Параметры:
//  Объект - ЛюбаяСсылка, Объект - Ссылка или объект-владелец контактной информации (организация,
//                                            контрагент, партнер и т.д.).
//  GUIDВидаКИ - Строка - Идентификатор вида КИ.
//
// Возвращаемое значение:
//  - ТаблицаЗначений - таблица с контактной информацией объекта содержащая колонки:
//      * СсылкиИлиОбъекты - Ссылка - Владелец контактной информации.
//      * Вид              - СправочникСсылка.ВидыКонтактнойИнформации   - Вид контактной информации.
//      * Тип              - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации.
//      * Значение         - Строка - контактная информация во внутреннем формате JSON.
//      * Представление    - Строка - Представление контактной информации.
//      * Дата             - Дата   - дата, с которой действует запись контактной информации.
//      * ИдентификаторСтрокиТабличнойЧасти - Число - Идентификатор строки этой табличной части
//     * ЗначенияПолей    - Строка - устаревший XML, соответствующий XDTO пакетам КонтактнаяИнформация или Адрес. Для
//                                  обратной совместимости.
//  - Строка - если Вид КИ не получен.
//
Функция КИОбъекта(Объект, GUIDВидаКИ) Экспорт
	ВидКИ = Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор(GUIDВидаКИ));
	Если ВидКИ.Пустая() Тогда
		Результат = "";
	Иначе
		Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект, ВидКИ, , Истина);
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Возвращает дополнительный реквизит объекта.
//
// Параметры:
//  Объект - ЛюбаяСсылка, Объект - Ссылка или объект-владелец дополнительного реквизита.
//  GUIDДопРеквизита - Строка - Идентификатор дополнительного реквизита.
//
// Возвращаемое значение:
//  - Произвольный - любое значение, допустимое для свойства.
//  - Строка - если Дополнительный реквизит не получен.
//
Функция ДопРеквизитОбъекта(Объект, GUIDДопРеквизита) Экспорт
	ДопРеквизит =
		ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(GUIDДопРеквизита));
	Если ДопРеквизит.Пустая() Тогда
		Результат = "";
	Иначе
		Результат = УправлениеСвойствами.ЗначениеСвойства(Объект, ДопРеквизит);
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Создает элемент автотекста.
//
// Параметры:
//  СтруктураТега - Структура:
//     * Наименование  - Строка
//     * ТегАвтотекста  - Строка
//     * Идентификатор  - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//     * Действие  - Строка
//     * ИмяТабличнойЧасти  - Строка
//
// Возвращаемое значение:
//  - СправочникСсылка.CRM_ШаблоныАвтотекста - ссылка на созданный элемент автотекста.
//
Функция СоздатьЭлементАвтотекста(СтруктураТега) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	CRM_ШаблоныАвтотекста.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_ШаблоныАвтотекста КАК CRM_ШаблоныАвтотекста
	                      |ГДЕ
	                      |	CRM_ШаблоныАвтотекста.ПредставлениеШаблона = &Представление
	                      |	И CRM_ШаблоныАвтотекста.ИдентификаторОбъекта = &ИдентификаторОбъекта
	                      |	И CRM_ШаблоныАвтотекста.ИмяТабличнойЧасти = &ИмяТабличнойЧасти");
	
	Запрос.УстановитьПараметр("Представление", СтруктураТега.ТегАвтотекста);
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", СтруктураТега.Идентификатор);
	Запрос.УстановитьПараметр("ИмяТабличнойЧасти", СтруктураТега.ИмяТабличнойЧасти);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Автотекст с таким тегом уже существует!'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	CRM_ШаблоныАвтотекста.Ссылка КАК Ссылка,
	                      |	CRM_ШаблоныАвтотекста.Родитель КАК Родитель
	                      |ИЗ
	                      |	Справочник.CRM_ШаблоныАвтотекста КАК CRM_ШаблоныАвтотекста
	                      |ГДЕ
	                      |	CRM_ШаблоныАвтотекста.ЭтоГруппа
	                      |	И CRM_ШаблоныАвтотекста.ИдентификаторОбъекта = &ИдентификаторОбъекта
	                      |	И CRM_ШаблоныАвтотекста.ИмяТабличнойЧасти = &ИмяТабличнойЧасти
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Родитель ВОЗР");
	
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", СтруктураТега.Идентификатор);
	Запрос.УстановитьПараметр("ИмяТабличнойЧасти", СтруктураТега.ИмяТабличнойЧасти);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Группа = Выборка.Ссылка;
	Иначе
		ГруппаОбъект = Справочники.CRM_ШаблоныАвтотекста.СоздатьГруппу();
		ГруппаОбъект.Наименование = СтруктураТега.Идентификатор;
		ГруппаОбъект.ИдентификаторОбъекта = СтруктураТега.Идентификатор;
		ГруппаОбъект.ИмяТабличнойЧасти = СтруктураТега.ИмяТабличнойЧасти;
		ГруппаОбъект.Записать();
		
		Группа = ГруппаОбъект.Ссылка;
	КонецЕсли;
	
	Элемент = Справочники.CRM_ШаблоныАвтотекста.СоздатьЭлемент();
	Элемент.Родитель = Группа;
	Элемент.ИдентификаторОбъекта = СтруктураТега.Идентификатор;
	Элемент.ИмяТабличнойЧасти = СтруктураТега.ИмяТабличнойЧасти;
	Элемент.Наименование = СтруктураТега.Наименование;
	Элемент.ПредставлениеШаблона = СтруктураТега.ТегАвтотекста;
	Элемент.Действие = СтруктураТега.Действие;
	Элемент.Записать();
	
	Возврат Элемент.Ссылка;
	
КонецФункции

// Добавляет команду автотекста.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, в которую будет добавлена команда.
//  Автотекст - Строка - Тег.
//  АвтотекстТемы - Строка - Тема.
//  ДобавлятьВКонтекстноеМеню - Булево - необходимо добавлять в контекстное меню или нет.
//  Префикс - Строка - Префикс.
//  ТаблицаАвтотекста - Строка - Таблица автотекста.
//  ИмяЭлементаАвтоТекст - Строка - Имя элемента автотекста.
//
// Возвращаемое значение:
// 	Строка - Имя новой команды.
//
Функция ДобавитьКомандуАвтотекста(Форма, Автотекст, АвтотекстТемы, ДобавлятьВКонтекстноеМеню = Ложь,
	 Префикс = "", ТаблицаАвтотекста = "ТаблицаАвтотекста",
	 ИмяЭлементаАвтоТекст = "АвтоТекст") Экспорт
	
	ПрефиксЭлементов = ?(ИмяЭлементаАвтоТекст = "АвтоТекст" ИЛИ АвтотекстТемы, "", ИмяЭлементаАвтоТекст);										
	НовыйТэг = Форма[ТаблицаАвтотекста].Добавить();
	Если Префикс = "" Тогда
		Тег = "%" + Автотекст.ПредставлениеШаблона + "%";
	Иначе
		Тег = "%[" + Префикс + "].[" + Автотекст.ПредставлениеШаблона + "]%";
	КонецЕсли;
	НовыйТэг.Тэг = Тег;
	НовыйТэг.ИмяКоманды	= ?(АвтотекстТемы, "Тема", "") + Префикс + "ВставитьТэг_" 
		+ Строка(Форма[ТаблицаАвтотекста].Количество());
	НовыйТэг.ЗаголовокКоманды = Автотекст.Наименование + ?(Префикс = "", "", " (" + Префикс + ")");
	НовыйТэг.Действие = Автотекст.Действие;
	
	НоваяКомандаФормы = Форма.Команды.Добавить(ПрефиксЭлементов + НовыйТэг.ИмяКоманды);
	НоваяКомандаФормы.Заголовок	= НовыйТэг.ЗаголовокКоманды;
	НоваяКомандаФормы.Действие = "Подключаемый_ВставитьТэг";
	НоваяКомандаФормы.ИзменяетСохраняемыеДанные	= Истина;
	
	НовыйПунктМеню = Форма.Элементы.Вставить(НоваяКомандаФормы.Имя, Тип("КнопкаФормы"),
		 ?(АвтотекстТемы, Форма.Элементы.АвтоТекстТемы, Форма.Элементы[ИмяЭлементаАвтоТекст]),
		Форма.Элементы.Найти(ПрефиксЭлементов + "МенюАвтотекстаГруппа" + ?(АвтотекстТемы, "Тема", "")));
	НовыйПунктМеню.ИмяКоманды = НоваяКомандаФормы.Имя;
	НовыйПунктМеню.Отображение = ОтображениеКнопки.Текст;
	
	Если ДобавлятьВКонтекстноеМеню Тогда
		КонтекстноеМенюКонтекст = Форма.Элементы.Вставить(НоваяКомандаФормы.Имя + "Контекст",
			 Тип("КнопкаФормы"), Форма.Элементы[ИмяЭлементаАвтоТекст + "Контекст"],
			Форма.Элементы.Найти(ПрефиксЭлементов + "МенюАвтотекстаГруппаКонтекст" + ?(АвтотекстТемы, "Тема", "")));	
		КонтекстноеМенюКонтекст.ИмяКоманды	= НоваяКомандаФормы.Имя;
		КонтекстноеМенюКонтекст.Отображение	= ОтображениеКнопки.Текст;
	КонецЕсли;
	
	Возврат НоваяКомандаФормы.Имя;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция получает результат выполнения действия.
//
// Параметры:
//  Действие				- Строка			- Строка действия. 
//  Тег						- СправочникСсылка	- Ссылка на тег.
//  Объект					- ДокументСсылка	- Ссылка на объект.
//  ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
// 
// Возвращаемое значение:
//  Булево	- Результат выполнения действия. 
//
Функция ПолучитьРезультатДействия(Действие, Тэг, Объект = Неопределено, ДополнительныеПараметры = Неопределено)
	
	Результат = "";
	Попытка
		Выполнить(Действие);
	Исключение
		Если СтрНайти(Действие, "Объект.Пользователь") > 0 Тогда
			Результат = Нстр("ru='&lt;Тег &lt;';en='& lt; Tag & lt;'") + Тэг 
				+ Нстр("ru='&gt; недоступен для данного объекта&gt;
				|'");
			Возврат Результат;
		Иначе			
			ТекстСообщения = НСтр("ru='Ошибка выполнения действия тега:';en='Run error of action of a tag:'") + Тэг + Символы.ПС 
				+ ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
